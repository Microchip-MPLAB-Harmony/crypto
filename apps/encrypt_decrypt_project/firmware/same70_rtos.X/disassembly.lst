
dist\same70_rtos\production\same70_rtos.X.production.elf:     file format elf32-littlearm


Disassembly of section .vectors:

00400000 <exception_table>:
  400000:	f8 ff 45 20 21 74 41 00 a7 56 41 00 87 68 41 00     ..E !tA..VA..hA.
  400010:	1f 74 41 00 5f 78 41 00 4b 95 41 00 00 00 00 00     .tA._xA.K.A.....
	...
  40002c:	f1 e3 41 00 47 6d 41 00 00 00 00 00 b1 c5 41 00     ..A.GmA.......A.
  40003c:	9d de 41 00 27 47 41 00 27 47 41 00 27 47 41 00     ..A.'GA.'GA.'GA.
  40004c:	27 47 41 00 27 47 41 00 27 47 41 00 27 47 41 00     'GA.'GA.'GA.'GA.
  40005c:	27 47 41 00 27 47 41 00 00 00 00 00 27 47 41 00     'GA.'GA.....'GA.
  40006c:	27 47 41 00 27 47 41 00 27 47 41 00 bd 70 41 00     'GA.'GA.'GA..pA.
  40007c:	27 47 41 00 27 47 41 00 27 47 41 00 27 47 41 00     'GA.'GA.'GA.'GA.
  40008c:	27 47 41 00 27 47 41 00 27 47 41 00 27 47 41 00     'GA.'GA.'GA.'GA.
  40009c:	b1 e5 41 00 27 47 41 00 27 47 41 00 27 47 41 00     ..A.'GA.'GA.'GA.
  4000ac:	27 47 41 00 27 47 41 00 27 47 41 00 27 47 41 00     'GA.'GA.'GA.'GA.
  4000bc:	27 47 41 00 27 47 41 00 27 47 41 00 27 47 41 00     'GA.'GA.'GA.'GA.
  4000cc:	27 47 41 00 27 47 41 00 27 47 41 00 27 47 41 00     'GA.'GA.'GA.'GA.
  4000dc:	27 47 41 00 27 47 41 00 27 47 41 00 27 47 41 00     'GA.'GA.'GA.'GA.
  4000ec:	27 47 41 00 27 47 41 00 27 47 41 00 27 47 41 00     'GA.'GA.'GA.'GA.
  4000fc:	27 47 41 00 27 47 41 00 27 47 41 00 27 47 41 00     'GA.'GA.'GA.'GA.
  40010c:	27 47 41 00 27 47 41 00 00 00 00 00 00 00 00 00     'GA.'GA.........
  40011c:	00 00 00 00 27 47 41 00 27 47 41 00 27 47 41 00     ....'GA.'GA.'GA.
  40012c:	27 47 41 00 27 47 41 00 27 47 41 00 27 47 41 00     'GA.'GA.'GA.'GA.
  40013c:	27 47 41 00 27 47 41 00 27 47 41 00 27 47 41 00     'GA.'GA.'GA.'GA.
  40014c:	27 47 41 00 27 47 41 00 27 47 41 00 27 47 41 00     'GA.'GA.'GA.'GA.
  40015c:	27 47 41 00 27 47 41 00 27 47 41 00                 'GA.'GA.'GA.

Disassembly of section .text:

00400168 <_init>:
  400168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40016a:	bf00      	nop
  40016c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40016e:	bc08      	pop	{r3}
  400170:	469e      	mov	lr, r3
  400172:	4770      	bx	lr

00400174 <__init_array_start>:
  400174:	0041eb7d 	.word	0x0041eb7d

00400178 <__frame_dummy_init_array_entry>:
  400178:	0041c1bd                                ..A.

0040017c <_fini>:
  40017c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40017e:	bf00      	nop
  400180:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400182:	bc08      	pop	{r3}
  400184:	469e      	mov	lr, r3
  400186:	4770      	bx	lr

00400188 <__fini_array_start>:
  400188:	0041c199 	.word	0x0041c199

Disassembly of section .ARM.exidx:

0040018c <.ARM.exidx>:
  40018c:	00013110 	.word	0x00013110
  400190:	00000001 	.word	0x00000001

Disassembly of section .text._Transform%60:

00400194 <_Transform>:

#define R(i) h(i)+=S1(e(i))+Ch(e(i),f(i),g(i))+K[i+j]+(j?blk2(i):blk0(i));\
    d(i)+=h(i);h(i)+=S0(a(i))+Maj(a(i),b(i),c(i))

static int _Transform(Sha512* sha512)
{
  400194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00400198 <.LCFI0>:
  400198:	f2ad 7d94 	subw	sp, sp, #1940	; 0x794

0040019c <.LCFI1>:
  40019c:	f8cd 06cc 	str.w	r0, [sp, #1740]	; 0x6cc
#else
    word64 W[16];
#endif

    /* Copy digest to working vars */
    XMEMCPY(T, sha512->digest, sizeof(T));
  4001a0:	f100 0418 	add.w	r4, r0, #24
  4001a4:	f50d 66ea 	add.w	r6, sp, #1872	; 0x750
  4001a8:	f100 0758 	add.w	r7, r0, #88	; 0x58

004001ac <.LVL2>:
  4001ac:	4635      	mov	r5, r6
  4001ae:	6820      	ldr	r0, [r4, #0]
  4001b0:	6861      	ldr	r1, [r4, #4]
  4001b2:	68a2      	ldr	r2, [r4, #8]
  4001b4:	68e3      	ldr	r3, [r4, #12]
  4001b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  4001b8:	3410      	adds	r4, #16
  4001ba:	462e      	mov	r6, r5
  4001bc:	42bc      	cmp	r4, r7
  4001be:	d1f5      	bne.n	4001ac <.LVL2>

004001c0 <.LVL3>:
  4001c0:	f50d 63da 	add.w	r3, sp, #1744	; 0x6d0
  4001c4:	e9d3 3400 	ldrd	r3, r4, [r3]
  4001c8:	e9cd 341c 	strd	r3, r4, [sp, #112]	; 0x70
  4001cc:	f50d 63ed 	add.w	r3, sp, #1896	; 0x768
  4001d0:	e9d3 ab00 	ldrd	sl, fp, [r3]
  4001d4:	f50d 63ea 	add.w	r3, sp, #1872	; 0x750
  4001d8:	e9d3 3400 	ldrd	r3, r4, [r3]
  4001dc:	4625      	mov	r5, r4
  4001de:	461c      	mov	r4, r3
  4001e0:	f50d 63eb 	add.w	r3, sp, #1880	; 0x758
  4001e4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4001e8:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  4001ec:	f50d 63ec 	add.w	r3, sp, #1888	; 0x760
  4001f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4001f4:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8
  4001f8:	f50d 63f1 	add.w	r3, sp, #1928	; 0x788
  4001fc:	e9d3 2300 	ldrd	r2, r3, [r3]
  400200:	e9cd 2306 	strd	r2, r3, [sp, #24]
  400204:	f50d 63dc 	add.w	r3, sp, #1760	; 0x6e0
  400208:	e9d3 2300 	ldrd	r2, r3, [r3]
  40020c:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  400210:	f50d 63dd 	add.w	r3, sp, #1768	; 0x6e8
  400214:	e9d3 2300 	ldrd	r2, r3, [r3]
  400218:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  40021c:	f50d 63db 	add.w	r3, sp, #1752	; 0x6d8
  400220:	e9d3 2300 	ldrd	r2, r3, [r3]
  400224:	e9cd 2308 	strd	r2, r3, [sp, #32]
  400228:	f50d 63de 	add.w	r3, sp, #1776	; 0x6f0
  40022c:	e9d3 2300 	ldrd	r2, r3, [r3]
  400230:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
  400234:	f50d 63df 	add.w	r3, sp, #1784	; 0x6f8
  400238:	e9d3 2300 	ldrd	r2, r3, [r3]
  40023c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  400240:	f50d 63e0 	add.w	r3, sp, #1792	; 0x700
  400244:	e9d3 2300 	ldrd	r2, r3, [r3]
  400248:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  40024c:	f50d 63e1 	add.w	r3, sp, #1800	; 0x708
  400250:	e9d3 2300 	ldrd	r2, r3, [r3]
  400254:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  400258:	f50d 63e3 	add.w	r3, sp, #1816	; 0x718
  40025c:	e9d3 2300 	ldrd	r2, r3, [r3]
  400260:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  400264:	f50d 63f0 	add.w	r3, sp, #1920	; 0x780
  400268:	e9d3 2300 	ldrd	r2, r3, [r3]
  40026c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  400270:	f50d 63e2 	add.w	r3, sp, #1808	; 0x710
  400274:	e9d3 2300 	ldrd	r2, r3, [r3]
  400278:	e9cd 2300 	strd	r2, r3, [sp]
  40027c:	f50d 63e4 	add.w	r3, sp, #1824	; 0x720
  400280:	e9d3 2300 	ldrd	r2, r3, [r3]
  400284:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
  400288:	f50d 63ef 	add.w	r3, sp, #1912	; 0x778
  40028c:	e9d3 8900 	ldrd	r8, r9, [r3]
  400290:	f50d 63e5 	add.w	r3, sp, #1832	; 0x728
  400294:	e9d3 2300 	ldrd	r2, r3, [r3]
  400298:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  40029c:	f50d 63ee 	add.w	r3, sp, #1904	; 0x770
  4002a0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4002a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4002a8:	f50d 63e6 	add.w	r3, sp, #1840	; 0x730
  4002ac:	e9d3 2300 	ldrd	r2, r3, [r3]
  4002b0:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  4002b4:	f50d 63e7 	add.w	r3, sp, #1848	; 0x738
  4002b8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4002bc:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
  4002c0:	f50d 63e8 	add.w	r3, sp, #1856	; 0x740
  4002c4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4002c8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  4002cc:	f50d 63e9 	add.w	r3, sp, #1864	; 0x748
  4002d0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4002d4:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
  4002d8:	4b5a      	ldr	r3, [pc, #360]	; (400444 <.LBE365+0x4e>)
            R(m);
        }
    }
#else
    /* 80 operations, partially loop unrolled */
    for (j = 0; j < 80; j += 16) {
  4002da:	f04f 0c00 	mov.w	ip, #0
  4002de:	469e      	mov	lr, r3
  4002e0:	4667      	mov	r7, ip

004002e2 <.LVL4>:
  4002e2:	f8dd c6cc 	ldr.w	ip, [sp, #1740]	; 0x6cc

004002e6 <.LBB353>:
}


STATIC INLINE word64 rotrFixed64(word64 x, word64 y)
{
    return (x >> y) | (x << (sizeof(y) * 8 - y));
  4002e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4002ea:	0b83      	lsrs	r3, r0, #14
  4002ec:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  4002f0:	9370      	str	r3, [sp, #448]	; 0x1c0
  4002f2:	0b8b      	lsrs	r3, r1, #14
  4002f4:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
  4002f8:	9371      	str	r3, [sp, #452]	; 0x1c4

004002fa <.LBB355>:
  4002fa:	0c83      	lsrs	r3, r0, #18
  4002fc:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
  400300:	9372      	str	r3, [sp, #456]	; 0x1c8
  400302:	0c8b      	lsrs	r3, r1, #18
  400304:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
  400308:	9373      	str	r3, [sp, #460]	; 0x1cc

0040030a <.LBE355>:
        R( 0); R( 1); R( 2); R( 3);
  40030a:	ab70      	add	r3, sp, #448	; 0x1c0
  40030c:	e9d3 2300 	ldrd	r2, r3, [r3]
  400310:	a972      	add	r1, sp, #456	; 0x1c8
  400312:	e9d1 0100 	ldrd	r0, r1, [r1]
  400316:	4042      	eors	r2, r0
  400318:	404b      	eors	r3, r1
  40031a:	4610      	mov	r0, r2
  40031c:	4619      	mov	r1, r3

0040031e <.LBB357>:
  40031e:	9b03      	ldr	r3, [sp, #12]
  400320:	05db      	lsls	r3, r3, #23
  400322:	9a02      	ldr	r2, [sp, #8]
  400324:	ea43 2352 	orr.w	r3, r3, r2, lsr #9
  400328:	9375      	str	r3, [sp, #468]	; 0x1d4
  40032a:	05d3      	lsls	r3, r2, #23
  40032c:	9a03      	ldr	r2, [sp, #12]
  40032e:	ea43 2352 	orr.w	r3, r3, r2, lsr #9
  400332:	9374      	str	r3, [sp, #464]	; 0x1d0

00400334 <.LBE357>:
  400334:	ab74      	add	r3, sp, #464	; 0x1d0
  400336:	e9d3 2300 	ldrd	r2, r3, [r3]
  40033a:	4042      	eors	r2, r0
  40033c:	404b      	eors	r3, r1
  40033e:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  400342:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  400346:	ea82 0208 	eor.w	r2, r2, r8
  40034a:	ea83 0309 	eor.w	r3, r3, r9
  40034e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  400352:	4010      	ands	r0, r2
  400354:	4019      	ands	r1, r3
  400356:	4602      	mov	r2, r0
  400358:	460b      	mov	r3, r1
  40035a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40035e:	4050      	eors	r0, r2
  400360:	4059      	eors	r1, r3
  400362:	4602      	mov	r2, r0
  400364:	460b      	mov	r3, r1
  400366:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  40036a:	1880      	adds	r0, r0, r2
  40036c:	4159      	adcs	r1, r3
  40036e:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  400372:	4676      	mov	r6, lr
  400374:	e9de 2300 	ldrd	r2, r3, [lr]
  400378:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
  40037c:	2f00      	cmp	r7, #0
  40037e:	f002 8255 	beq.w	40282c <.LCFI3>

00400382 <.LBB359>:
  400382:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  400386:	0cc3      	lsrs	r3, r0, #19
  400388:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
  40038c:	9376      	str	r3, [sp, #472]	; 0x1d8
  40038e:	0ccb      	lsrs	r3, r1, #19
  400390:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
  400394:	9377      	str	r3, [sp, #476]	; 0x1dc

00400396 <.LBB361>:
  400396:	00cb      	lsls	r3, r1, #3
  400398:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
  40039c:	9379      	str	r3, [sp, #484]	; 0x1e4
  40039e:	00c3      	lsls	r3, r0, #3
  4003a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
  4003a4:	9378      	str	r3, [sp, #480]	; 0x1e0

004003a6 <.LBE361>:
  4003a6:	ab76      	add	r3, sp, #472	; 0x1d8
  4003a8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4003ac:	a978      	add	r1, sp, #480	; 0x1e0
  4003ae:	e9d1 0100 	ldrd	r0, r1, [r1]
  4003b2:	4042      	eors	r2, r0
  4003b4:	404b      	eors	r3, r1
  4003b6:	990c      	ldr	r1, [sp, #48]	; 0x30
  4003b8:	0989      	lsrs	r1, r1, #6
  4003ba:	980d      	ldr	r0, [sp, #52]	; 0x34
  4003bc:	ea41 6180 	orr.w	r1, r1, r0, lsl #26
  4003c0:	9130      	str	r1, [sp, #192]	; 0xc0
  4003c2:	0981      	lsrs	r1, r0, #6
  4003c4:	9131      	str	r1, [sp, #196]	; 0xc4
  4003c6:	e9dd 0130 	ldrd	r0, r1, [sp, #192]	; 0xc0
  4003ca:	4050      	eors	r0, r2
  4003cc:	4059      	eors	r1, r3
  4003ce:	e9cd 012e 	strd	r0, r1, [sp, #184]	; 0xb8

004003d2 <.LBB363>:
  4003d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  4003d6:	0851      	lsrs	r1, r2, #1
  4003d8:	ea41 71c3 	orr.w	r1, r1, r3, lsl #31
  4003dc:	917a      	str	r1, [sp, #488]	; 0x1e8
  4003de:	0859      	lsrs	r1, r3, #1
  4003e0:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
  4003e4:	917b      	str	r1, [sp, #492]	; 0x1ec

004003e6 <.LBB365>:
  4003e6:	0a11      	lsrs	r1, r2, #8
  4003e8:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
  4003ec:	917c      	str	r1, [sp, #496]	; 0x1f0
  4003ee:	0a19      	lsrs	r1, r3, #8
  4003f0:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
  4003f4:	917d      	str	r1, [sp, #500]	; 0x1f4

004003f6 <.LBE365>:
  4003f6:	ab7a      	add	r3, sp, #488	; 0x1e8
  4003f8:	e9d3 0100 	ldrd	r0, r1, [r3]
  4003fc:	ab7c      	add	r3, sp, #496	; 0x1f0
  4003fe:	e9d3 2300 	ldrd	r2, r3, [r3]
  400402:	4050      	eors	r0, r2
  400404:	4059      	eors	r1, r3
  400406:	9b08      	ldr	r3, [sp, #32]
  400408:	09db      	lsrs	r3, r3, #7
  40040a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40040c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
  400410:	9332      	str	r3, [sp, #200]	; 0xc8
  400412:	09d3      	lsrs	r3, r2, #7
  400414:	9333      	str	r3, [sp, #204]	; 0xcc
  400416:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
  40041a:	4042      	eors	r2, r0
  40041c:	404b      	eors	r3, r1
  40041e:	4610      	mov	r0, r2
  400420:	4619      	mov	r1, r3
  400422:	e9dd 232e 	ldrd	r2, r3, [sp, #184]	; 0xb8
  400426:	1812      	adds	r2, r2, r0
  400428:	414b      	adcs	r3, r1
  40042a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40042e:	1880      	adds	r0, r0, r2
  400430:	4159      	adcs	r1, r3
  400432:	4602      	mov	r2, r0
  400434:	460b      	mov	r3, r1
  400436:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
  40043a:	1880      	adds	r0, r0, r2
  40043c:	4159      	adcs	r1, r3
  40043e:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
  400442:	e001      	b.n	400448 <.LBE365+0x52>
  400444:	00414000 	.word	0x00414000
  400448:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  40044c:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
  400450:	1812      	adds	r2, r2, r0
  400452:	414b      	adcs	r3, r1
  400454:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
  400458:	1880      	adds	r0, r0, r2
  40045a:	4159      	adcs	r1, r3
  40045c:	4602      	mov	r2, r0
  40045e:	460b      	mov	r3, r1
  400460:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  400464:	1880      	adds	r0, r0, r2
  400466:	4159      	adcs	r1, r3
  400468:	4602      	mov	r2, r0
  40046a:	460b      	mov	r3, r1
  40046c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  400470:	eb10 020a 	adds.w	r2, r0, sl
  400474:	eb41 030b 	adc.w	r3, r1, fp
  400478:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0

0040047c <.LBB367>:
  40047c:	0f23      	lsrs	r3, r4, #28
  40047e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  400482:	937e      	str	r3, [sp, #504]	; 0x1f8
  400484:	0f2b      	lsrs	r3, r5, #28
  400486:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  40048a:	937f      	str	r3, [sp, #508]	; 0x1fc

0040048c <.LBB369>:
  40048c:	07ab      	lsls	r3, r5, #30
  40048e:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  400492:	9381      	str	r3, [sp, #516]	; 0x204
  400494:	07a3      	lsls	r3, r4, #30
  400496:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  40049a:	9380      	str	r3, [sp, #512]	; 0x200

0040049c <.LBE369>:
  40049c:	ab7e      	add	r3, sp, #504	; 0x1f8
  40049e:	e9d3 1200 	ldrd	r1, r2, [r3]
  4004a2:	ab80      	add	r3, sp, #512	; 0x200
  4004a4:	e9d3 ab00 	ldrd	sl, fp, [r3]
  4004a8:	ea81 010a 	eor.w	r1, r1, sl
  4004ac:	ea82 020b 	eor.w	r2, r2, fp
  4004b0:	4613      	mov	r3, r2
  4004b2:	460a      	mov	r2, r1

004004b4 <.LBB371>:
  4004b4:	0669      	lsls	r1, r5, #25
  4004b6:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  4004ba:	9183      	str	r1, [sp, #524]	; 0x20c
  4004bc:	0661      	lsls	r1, r4, #25
  4004be:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  4004c2:	9182      	str	r1, [sp, #520]	; 0x208

004004c4 <.LBE371>:
  4004c4:	a982      	add	r1, sp, #520	; 0x208
  4004c6:	e9d1 0100 	ldrd	r0, r1, [r1]
  4004ca:	4050      	eors	r0, r2
  4004cc:	4059      	eors	r1, r3
  4004ce:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  4004d2:	e9dd ab18 	ldrd	sl, fp, [sp, #96]	; 0x60
  4004d6:	4650      	mov	r0, sl
  4004d8:	4659      	mov	r1, fp
  4004da:	4320      	orrs	r0, r4
  4004dc:	4329      	orrs	r1, r5
  4004de:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  4004e2:	4002      	ands	r2, r0
  4004e4:	400b      	ands	r3, r1
  4004e6:	4650      	mov	r0, sl
  4004e8:	4659      	mov	r1, fp
  4004ea:	4020      	ands	r0, r4
  4004ec:	4029      	ands	r1, r5
  4004ee:	4310      	orrs	r0, r2
  4004f0:	4319      	orrs	r1, r3
  4004f2:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  4004f6:	1812      	adds	r2, r2, r0
  4004f8:	414b      	adcs	r3, r1
  4004fa:	4610      	mov	r0, r2
  4004fc:	4619      	mov	r1, r3
  4004fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  400502:	1812      	adds	r2, r2, r0
  400504:	414b      	adcs	r3, r1
  400506:	e9cd 2306 	strd	r2, r3, [sp, #24]

0040050a <.LBB373>:
  40050a:	e9dd ab2c 	ldrd	sl, fp, [sp, #176]	; 0xb0
  40050e:	4653      	mov	r3, sl
  400510:	0b9b      	lsrs	r3, r3, #14
  400512:	465a      	mov	r2, fp
  400514:	ea43 438b 	orr.w	r3, r3, fp, lsl #18
  400518:	9384      	str	r3, [sp, #528]	; 0x210
  40051a:	0b93      	lsrs	r3, r2, #14
  40051c:	4652      	mov	r2, sl
  40051e:	ea43 438a 	orr.w	r3, r3, sl, lsl #18
  400522:	9385      	str	r3, [sp, #532]	; 0x214

00400524 <.LBB375>:
  400524:	0c93      	lsrs	r3, r2, #18
  400526:	465a      	mov	r2, fp
  400528:	ea43 338b 	orr.w	r3, r3, fp, lsl #14
  40052c:	9386      	str	r3, [sp, #536]	; 0x218
  40052e:	0c93      	lsrs	r3, r2, #18
  400530:	ea43 338a 	orr.w	r3, r3, sl, lsl #14
  400534:	9387      	str	r3, [sp, #540]	; 0x21c

00400536 <.LBE375>:
  400536:	ab84      	add	r3, sp, #528	; 0x210
  400538:	e9d3 2300 	ldrd	r2, r3, [r3]
  40053c:	a986      	add	r1, sp, #536	; 0x218
  40053e:	e9d1 0100 	ldrd	r0, r1, [r1]
  400542:	4042      	eors	r2, r0
  400544:	404b      	eors	r3, r1

00400546 <.LBB377>:
  400546:	4659      	mov	r1, fp
  400548:	05c9      	lsls	r1, r1, #23
  40054a:	4650      	mov	r0, sl
  40054c:	ea41 215a 	orr.w	r1, r1, sl, lsr #9
  400550:	9189      	str	r1, [sp, #548]	; 0x224
  400552:	05c1      	lsls	r1, r0, #23
  400554:	ea41 215b 	orr.w	r1, r1, fp, lsr #9
  400558:	9188      	str	r1, [sp, #544]	; 0x220

0040055a <.LBE377>:
  40055a:	a988      	add	r1, sp, #544	; 0x220
  40055c:	e9d1 0100 	ldrd	r0, r1, [r1]
  400560:	4050      	eors	r0, r2
  400562:	4059      	eors	r1, r3
  400564:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  400568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40056c:	ea80 0008 	eor.w	r0, r0, r8
  400570:	ea81 0109 	eor.w	r1, r1, r9
  400574:	4652      	mov	r2, sl
  400576:	465b      	mov	r3, fp
  400578:	4002      	ands	r2, r0
  40057a:	400b      	ands	r3, r1
  40057c:	ea82 0a08 	eor.w	sl, r2, r8
  400580:	ea83 0b09 	eor.w	fp, r3, r9
  400584:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
  400588:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40058c:	1880      	adds	r0, r0, r2
  40058e:	4159      	adcs	r1, r3
  400590:	eb1a 0000 	adds.w	r0, sl, r0
  400594:	eb4b 0101 	adc.w	r1, fp, r1
  400598:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40059c:	2f00      	cmp	r7, #0
  40059e:	f002 814b 	beq.w	402838 <.LCFI3+0xc>

004005a2 <.LBB379>:
  4005a2:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
  4005a6:	0cc3      	lsrs	r3, r0, #19
  4005a8:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
  4005ac:	938a      	str	r3, [sp, #552]	; 0x228
  4005ae:	0ccb      	lsrs	r3, r1, #19
  4005b0:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
  4005b4:	938b      	str	r3, [sp, #556]	; 0x22c

004005b6 <.LBB381>:
  4005b6:	00cb      	lsls	r3, r1, #3
  4005b8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
  4005bc:	938d      	str	r3, [sp, #564]	; 0x234
  4005be:	00c3      	lsls	r3, r0, #3
  4005c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
  4005c4:	938c      	str	r3, [sp, #560]	; 0x230

004005c6 <.LBE381>:
  4005c6:	ab8a      	add	r3, sp, #552	; 0x228
  4005c8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4005cc:	f50d 7a0c 	add.w	sl, sp, #560	; 0x230
  4005d0:	e9da ab00 	ldrd	sl, fp, [sl]
  4005d4:	ea82 020a 	eor.w	r2, r2, sl
  4005d8:	ea83 030b 	eor.w	r3, r3, fp
  4005dc:	468b      	mov	fp, r1
  4005de:	0981      	lsrs	r1, r0, #6
  4005e0:	4658      	mov	r0, fp
  4005e2:	ea41 618b 	orr.w	r1, r1, fp, lsl #26
  4005e6:	9134      	str	r1, [sp, #208]	; 0xd0
  4005e8:	0981      	lsrs	r1, r0, #6
  4005ea:	9135      	str	r1, [sp, #212]	; 0xd4
  4005ec:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
  4005f0:	4050      	eors	r0, r2
  4005f2:	4059      	eors	r1, r3
  4005f4:	4602      	mov	r2, r0
  4005f6:	460b      	mov	r3, r1
  4005f8:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
  4005fc:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
  400600:	eb10 000a 	adds.w	r0, r0, sl
  400604:	eb41 010b 	adc.w	r1, r1, fp
  400608:	eb12 0a00 	adds.w	sl, r2, r0
  40060c:	eb43 0b01 	adc.w	fp, r3, r1
  400610:	e9cd ab08 	strd	sl, fp, [sp, #32]

00400614 <.LBB383>:
  400614:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
  400618:	0851      	lsrs	r1, r2, #1
  40061a:	ea41 71c3 	orr.w	r1, r1, r3, lsl #31
  40061e:	918e      	str	r1, [sp, #568]	; 0x238
  400620:	0859      	lsrs	r1, r3, #1
  400622:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
  400626:	918f      	str	r1, [sp, #572]	; 0x23c

00400628 <.LBB385>:
  400628:	0a11      	lsrs	r1, r2, #8
  40062a:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
  40062e:	9190      	str	r1, [sp, #576]	; 0x240
  400630:	0a19      	lsrs	r1, r3, #8
  400632:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
  400636:	9191      	str	r1, [sp, #580]	; 0x244

00400638 <.LBE385>:
  400638:	a98e      	add	r1, sp, #568	; 0x238
  40063a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40063e:	f50d 7a10 	add.w	sl, sp, #576	; 0x240
  400642:	e9da ab00 	ldrd	sl, fp, [sl]
  400646:	ea80 000a 	eor.w	r0, r0, sl
  40064a:	ea81 010b 	eor.w	r1, r1, fp
  40064e:	469b      	mov	fp, r3
  400650:	09d3      	lsrs	r3, r2, #7
  400652:	465a      	mov	r2, fp
  400654:	ea43 634b 	orr.w	r3, r3, fp, lsl #25
  400658:	9336      	str	r3, [sp, #216]	; 0xd8
  40065a:	09d3      	lsrs	r3, r2, #7
  40065c:	9337      	str	r3, [sp, #220]	; 0xdc
  40065e:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
  400662:	4042      	eors	r2, r0
  400664:	404b      	eors	r3, r1
  400666:	4610      	mov	r0, r2
  400668:	4619      	mov	r1, r3
  40066a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  40066e:	1812      	adds	r2, r2, r0
  400670:	414b      	adcs	r3, r1
  400672:	e9cd 2308 	strd	r2, r3, [sp, #32]
  400676:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  40067a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40067e:	1812      	adds	r2, r2, r0
  400680:	414b      	adcs	r3, r1
  400682:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  400686:	1880      	adds	r0, r0, r2
  400688:	4159      	adcs	r1, r3
  40068a:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  40068e:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  400692:	1812      	adds	r2, r2, r0
  400694:	414b      	adcs	r3, r1
  400696:	e9cd 2304 	strd	r2, r3, [sp, #16]

0040069a <.LBB387>:
  40069a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40069e:	0f03      	lsrs	r3, r0, #28
  4006a0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  4006a4:	9392      	str	r3, [sp, #584]	; 0x248
  4006a6:	0f0b      	lsrs	r3, r1, #28
  4006a8:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  4006ac:	9393      	str	r3, [sp, #588]	; 0x24c

004006ae <.LBB389>:
  4006ae:	078b      	lsls	r3, r1, #30
  4006b0:	ea43 0390 	orr.w	r3, r3, r0, lsr #2
  4006b4:	9395      	str	r3, [sp, #596]	; 0x254
  4006b6:	0783      	lsls	r3, r0, #30
  4006b8:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  4006bc:	9394      	str	r3, [sp, #592]	; 0x250

004006be <.LBE389>:
  4006be:	ab92      	add	r3, sp, #584	; 0x248
  4006c0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4006c4:	f50d 7a14 	add.w	sl, sp, #592	; 0x250
  4006c8:	e9da ab00 	ldrd	sl, fp, [sl]
  4006cc:	ea82 020a 	eor.w	r2, r2, sl
  4006d0:	ea83 030b 	eor.w	r3, r3, fp

004006d4 <.LBB391>:
  4006d4:	4682      	mov	sl, r0
  4006d6:	0649      	lsls	r1, r1, #25
  4006d8:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
  4006dc:	9197      	str	r1, [sp, #604]	; 0x25c
  4006de:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
  4006e2:	4651      	mov	r1, sl
  4006e4:	0649      	lsls	r1, r1, #25
  4006e6:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
  4006ea:	9196      	str	r1, [sp, #600]	; 0x258

004006ec <.LBE391>:
  4006ec:	a996      	add	r1, sp, #600	; 0x258
  4006ee:	e9d1 0100 	ldrd	r0, r1, [r1]
  4006f2:	4050      	eors	r0, r2
  4006f4:	4059      	eors	r1, r3
  4006f6:	e9cd 012a 	strd	r0, r1, [sp, #168]	; 0xa8
  4006fa:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
  4006fe:	4650      	mov	r0, sl
  400700:	4659      	mov	r1, fp
  400702:	4320      	orrs	r0, r4
  400704:	4329      	orrs	r1, r5
  400706:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  40070a:	4002      	ands	r2, r0
  40070c:	400b      	ands	r3, r1
  40070e:	4610      	mov	r0, r2
  400710:	4619      	mov	r1, r3
  400712:	4652      	mov	r2, sl
  400714:	465b      	mov	r3, fp
  400716:	4022      	ands	r2, r4
  400718:	402b      	ands	r3, r5
  40071a:	4302      	orrs	r2, r0
  40071c:	430b      	orrs	r3, r1
  40071e:	4610      	mov	r0, r2
  400720:	4619      	mov	r1, r3
  400722:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  400726:	1812      	adds	r2, r2, r0
  400728:	414b      	adcs	r3, r1
  40072a:	4610      	mov	r0, r2
  40072c:	4619      	mov	r1, r3
  40072e:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  400732:	1812      	adds	r2, r2, r0
  400734:	414b      	adcs	r3, r1
  400736:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8

0040073a <.LBB393>:
  40073a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40073e:	0b83      	lsrs	r3, r0, #14
  400740:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  400744:	9398      	str	r3, [sp, #608]	; 0x260
  400746:	0b8b      	lsrs	r3, r1, #14
  400748:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
  40074c:	9399      	str	r3, [sp, #612]	; 0x264

0040074e <.LBB395>:
  40074e:	0c83      	lsrs	r3, r0, #18
  400750:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
  400754:	939a      	str	r3, [sp, #616]	; 0x268
  400756:	0c8b      	lsrs	r3, r1, #18
  400758:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
  40075c:	939b      	str	r3, [sp, #620]	; 0x26c

0040075e <.LBE395>:
  40075e:	ab98      	add	r3, sp, #608	; 0x260
  400760:	e9d3 2300 	ldrd	r2, r3, [r3]
  400764:	f50d 7a1a 	add.w	sl, sp, #616	; 0x268
  400768:	e9da ab00 	ldrd	sl, fp, [sl]
  40076c:	ea82 020a 	eor.w	r2, r2, sl
  400770:	ea83 030b 	eor.w	r3, r3, fp

00400774 <.LBB397>:
  400774:	4682      	mov	sl, r0
  400776:	468b      	mov	fp, r1
  400778:	05c9      	lsls	r1, r1, #23
  40077a:	4650      	mov	r0, sl
  40077c:	ea41 215a 	orr.w	r1, r1, sl, lsr #9
  400780:	919d      	str	r1, [sp, #628]	; 0x274
  400782:	05c1      	lsls	r1, r0, #23
  400784:	ea41 215b 	orr.w	r1, r1, fp, lsr #9
  400788:	919c      	str	r1, [sp, #624]	; 0x270

0040078a <.LBE397>:
  40078a:	a99c      	add	r1, sp, #624	; 0x270
  40078c:	e9d1 0100 	ldrd	r0, r1, [r1]
  400790:	4050      	eors	r0, r2
  400792:	4059      	eors	r1, r3
  400794:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  400798:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  40079c:	4650      	mov	r0, sl
  40079e:	4659      	mov	r1, fp
  4007a0:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
  4007a4:	4042      	eors	r2, r0
  4007a6:	404b      	eors	r3, r1
  4007a8:	4610      	mov	r0, r2
  4007aa:	4619      	mov	r1, r3
  4007ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4007b0:	4002      	ands	r2, r0
  4007b2:	400b      	ands	r3, r1
  4007b4:	4610      	mov	r0, r2
  4007b6:	4619      	mov	r1, r3
  4007b8:	4652      	mov	r2, sl
  4007ba:	465b      	mov	r3, fp
  4007bc:	4042      	eors	r2, r0
  4007be:	404b      	eors	r3, r1
  4007c0:	4610      	mov	r0, r2
  4007c2:	4619      	mov	r1, r3
  4007c4:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
  4007c8:	eb18 0802 	adds.w	r8, r8, r2
  4007cc:	eb49 0903 	adc.w	r9, r9, r3
  4007d0:	eb18 0800 	adds.w	r8, r8, r0
  4007d4:	eb49 0901 	adc.w	r9, r9, r1
  4007d8:	2f00      	cmp	r7, #0
  4007da:	f002 8033 	beq.w	402844 <.LCFI3+0x18>

004007de <.LBB399>:
  4007de:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  4007e2:	0843      	lsrs	r3, r0, #1
  4007e4:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
  4007e8:	939e      	str	r3, [sp, #632]	; 0x278
  4007ea:	084b      	lsrs	r3, r1, #1
  4007ec:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
  4007f0:	939f      	str	r3, [sp, #636]	; 0x27c

004007f2 <.LBB401>:
  4007f2:	0a03      	lsrs	r3, r0, #8
  4007f4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  4007f8:	93a0      	str	r3, [sp, #640]	; 0x280
  4007fa:	0a0b      	lsrs	r3, r1, #8
  4007fc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  400800:	93a1      	str	r3, [sp, #644]	; 0x284

00400802 <.LBE401>:
  400802:	ab9e      	add	r3, sp, #632	; 0x278
  400804:	e9d3 2300 	ldrd	r2, r3, [r3]
  400808:	f50d 7a20 	add.w	sl, sp, #640	; 0x280
  40080c:	e9da ab00 	ldrd	sl, fp, [sl]
  400810:	ea82 020a 	eor.w	r2, r2, sl
  400814:	ea83 030b 	eor.w	r3, r3, fp
  400818:	468b      	mov	fp, r1
  40081a:	09c1      	lsrs	r1, r0, #7
  40081c:	4658      	mov	r0, fp
  40081e:	ea41 614b 	orr.w	r1, r1, fp, lsl #25
  400822:	9138      	str	r1, [sp, #224]	; 0xe0
  400824:	09c1      	lsrs	r1, r0, #7
  400826:	9139      	str	r1, [sp, #228]	; 0xe4
  400828:	e9dd 0138 	ldrd	r0, r1, [sp, #224]	; 0xe0
  40082c:	4050      	eors	r0, r2
  40082e:	4059      	eors	r1, r3
  400830:	4602      	mov	r2, r0
  400832:	460b      	mov	r3, r1
  400834:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
  400838:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
  40083c:	eb10 000a 	adds.w	r0, r0, sl
  400840:	eb41 010b 	adc.w	r1, r1, fp
  400844:	eb12 0a00 	adds.w	sl, r2, r0
  400848:	eb43 0b01 	adc.w	fp, r3, r1
  40084c:	e9cd ab1e 	strd	sl, fp, [sp, #120]	; 0x78

00400850 <.LBB403>:
  400850:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
  400854:	0cd1      	lsrs	r1, r2, #19
  400856:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
  40085a:	91a2      	str	r1, [sp, #648]	; 0x288
  40085c:	0cd9      	lsrs	r1, r3, #19
  40085e:	ea41 3142 	orr.w	r1, r1, r2, lsl #13
  400862:	91a3      	str	r1, [sp, #652]	; 0x28c

00400864 <.LBB405>:
  400864:	00d9      	lsls	r1, r3, #3
  400866:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
  40086a:	91a5      	str	r1, [sp, #660]	; 0x294
  40086c:	00d1      	lsls	r1, r2, #3
  40086e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
  400872:	91a4      	str	r1, [sp, #656]	; 0x290

00400874 <.LBE405>:
  400874:	a9a2      	add	r1, sp, #648	; 0x288
  400876:	e9d1 0100 	ldrd	r0, r1, [r1]
  40087a:	f50d 7a24 	add.w	sl, sp, #656	; 0x290
  40087e:	e9da ab00 	ldrd	sl, fp, [sl]
  400882:	ea80 000a 	eor.w	r0, r0, sl
  400886:	ea81 010b 	eor.w	r1, r1, fp
  40088a:	469b      	mov	fp, r3
  40088c:	0993      	lsrs	r3, r2, #6
  40088e:	465a      	mov	r2, fp
  400890:	ea43 638b 	orr.w	r3, r3, fp, lsl #26
  400894:	933a      	str	r3, [sp, #232]	; 0xe8
  400896:	0993      	lsrs	r3, r2, #6
  400898:	933b      	str	r3, [sp, #236]	; 0xec
  40089a:	e9dd 233a 	ldrd	r2, r3, [sp, #232]	; 0xe8
  40089e:	4042      	eors	r2, r0
  4008a0:	404b      	eors	r3, r1
  4008a2:	4610      	mov	r0, r2
  4008a4:	4619      	mov	r1, r3
  4008a6:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
  4008aa:	1812      	adds	r2, r2, r0
  4008ac:	414b      	adcs	r3, r1
  4008ae:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  4008b2:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  4008b6:	eb12 0208 	adds.w	r2, r2, r8
  4008ba:	eb43 0309 	adc.w	r3, r3, r9
  4008be:	4690      	mov	r8, r2
  4008c0:	4699      	mov	r9, r3
  4008c2:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
  4008c6:	eb12 0208 	adds.w	r2, r2, r8
  4008ca:	eb43 0309 	adc.w	r3, r3, r9
  4008ce:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
  4008d2:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  4008d6:	eb18 0802 	adds.w	r8, r8, r2
  4008da:	eb49 0903 	adc.w	r9, r9, r3
  4008de:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60

004008e2 <.LBB407>:
  4008e2:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
  4008e6:	0f03      	lsrs	r3, r0, #28
  4008e8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  4008ec:	93a6      	str	r3, [sp, #664]	; 0x298
  4008ee:	0f0b      	lsrs	r3, r1, #28
  4008f0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  4008f4:	93a7      	str	r3, [sp, #668]	; 0x29c

004008f6 <.LBB409>:
  4008f6:	078b      	lsls	r3, r1, #30
  4008f8:	ea43 0390 	orr.w	r3, r3, r0, lsr #2
  4008fc:	93a9      	str	r3, [sp, #676]	; 0x2a4
  4008fe:	0783      	lsls	r3, r0, #30
  400900:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  400904:	93a8      	str	r3, [sp, #672]	; 0x2a0

00400906 <.LBE409>:
  400906:	aba6      	add	r3, sp, #664	; 0x298
  400908:	e9d3 2300 	ldrd	r2, r3, [r3]
  40090c:	f50d 7828 	add.w	r8, sp, #672	; 0x2a0
  400910:	e9d8 ab00 	ldrd	sl, fp, [r8]
  400914:	ea82 020a 	eor.w	r2, r2, sl
  400918:	ea83 030b 	eor.w	r3, r3, fp

0040091c <.LBB411>:
  40091c:	4680      	mov	r8, r0
  40091e:	4689      	mov	r9, r1
  400920:	0649      	lsls	r1, r1, #25
  400922:	4640      	mov	r0, r8
  400924:	ea41 11d8 	orr.w	r1, r1, r8, lsr #7
  400928:	91ab      	str	r1, [sp, #684]	; 0x2ac
  40092a:	0641      	lsls	r1, r0, #25
  40092c:	ea41 11d9 	orr.w	r1, r1, r9, lsr #7
  400930:	91aa      	str	r1, [sp, #680]	; 0x2a8

00400932 <.LBE411>:
  400932:	a9aa      	add	r1, sp, #680	; 0x2a8
  400934:	e9d1 0100 	ldrd	r0, r1, [r1]
  400938:	4050      	eors	r0, r2
  40093a:	4059      	eors	r1, r3
  40093c:	e9cd 012e 	strd	r0, r1, [sp, #184]	; 0xb8
  400940:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
  400944:	4652      	mov	r2, sl
  400946:	465b      	mov	r3, fp
  400948:	4640      	mov	r0, r8
  40094a:	4649      	mov	r1, r9
  40094c:	4302      	orrs	r2, r0
  40094e:	430b      	orrs	r3, r1
  400950:	4022      	ands	r2, r4
  400952:	402b      	ands	r3, r5
  400954:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
  400958:	e9c1 2300 	strd	r2, r3, [r1]
  40095c:	4650      	mov	r0, sl
  40095e:	4659      	mov	r1, fp
  400960:	4642      	mov	r2, r8
  400962:	464b      	mov	r3, r9
  400964:	4010      	ands	r0, r2
  400966:	4019      	ands	r1, r3
  400968:	f50d 63d8 	add.w	r3, sp, #1728	; 0x6c0
  40096c:	e9d3 9a00 	ldrd	r9, sl, [r3]
  400970:	ea49 0900 	orr.w	r9, r9, r0
  400974:	ea4a 0a01 	orr.w	sl, sl, r1
  400978:	e9dd 232e 	ldrd	r2, r3, [sp, #184]	; 0xb8
  40097c:	eb12 0209 	adds.w	r2, r2, r9
  400980:	eb43 030a 	adc.w	r3, r3, sl
  400984:	4610      	mov	r0, r2
  400986:	4619      	mov	r1, r3
  400988:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  40098c:	1812      	adds	r2, r2, r0
  40098e:	414b      	adcs	r3, r1
  400990:	e9cd 232e 	strd	r2, r3, [sp, #184]	; 0xb8

00400994 <.LBB413>:
  400994:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
  400998:	4643      	mov	r3, r8
  40099a:	0b9b      	lsrs	r3, r3, #14
  40099c:	464a      	mov	r2, r9
  40099e:	ea43 4389 	orr.w	r3, r3, r9, lsl #18
  4009a2:	93ac      	str	r3, [sp, #688]	; 0x2b0
  4009a4:	0b93      	lsrs	r3, r2, #14
  4009a6:	4642      	mov	r2, r8
  4009a8:	ea43 4388 	orr.w	r3, r3, r8, lsl #18
  4009ac:	93ad      	str	r3, [sp, #692]	; 0x2b4

004009ae <.LBB415>:
  4009ae:	0c93      	lsrs	r3, r2, #18
  4009b0:	464a      	mov	r2, r9
  4009b2:	ea43 3389 	orr.w	r3, r3, r9, lsl #14
  4009b6:	93ae      	str	r3, [sp, #696]	; 0x2b8
  4009b8:	0c93      	lsrs	r3, r2, #18
  4009ba:	ea43 3388 	orr.w	r3, r3, r8, lsl #14
  4009be:	93af      	str	r3, [sp, #700]	; 0x2bc

004009c0 <.LBE415>:
  4009c0:	abac      	add	r3, sp, #688	; 0x2b0
  4009c2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4009c6:	a9ae      	add	r1, sp, #696	; 0x2b8
  4009c8:	e9d1 0100 	ldrd	r0, r1, [r1]
  4009cc:	4042      	eors	r2, r0
  4009ce:	404b      	eors	r3, r1

004009d0 <.LBB417>:
  4009d0:	4649      	mov	r1, r9
  4009d2:	05c9      	lsls	r1, r1, #23
  4009d4:	4640      	mov	r0, r8
  4009d6:	ea41 2158 	orr.w	r1, r1, r8, lsr #9
  4009da:	91b1      	str	r1, [sp, #708]	; 0x2c4
  4009dc:	05c1      	lsls	r1, r0, #23
  4009de:	ea41 2159 	orr.w	r1, r1, r9, lsr #9
  4009e2:	91b0      	str	r1, [sp, #704]	; 0x2c0

004009e4 <.LBE417>:
  4009e4:	a9b0      	add	r1, sp, #704	; 0x2c0
  4009e6:	e9d1 0100 	ldrd	r0, r1, [r1]
  4009ea:	4050      	eors	r0, r2
  4009ec:	4059      	eors	r1, r3
  4009ee:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  4009f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4009f6:	e9dd ab2c 	ldrd	sl, fp, [sp, #176]	; 0xb0
  4009fa:	4652      	mov	r2, sl
  4009fc:	465b      	mov	r3, fp
  4009fe:	4042      	eors	r2, r0
  400a00:	404b      	eors	r3, r1
  400a02:	4610      	mov	r0, r2
  400a04:	4619      	mov	r1, r3
  400a06:	4642      	mov	r2, r8
  400a08:	464b      	mov	r3, r9
  400a0a:	4002      	ands	r2, r0
  400a0c:	400b      	ands	r3, r1
  400a0e:	ea8a 0802 	eor.w	r8, sl, r2
  400a12:	ea8b 0903 	eor.w	r9, fp, r3
  400a16:	e9d6 2306 	ldrd	r2, r3, [r6, #24]
  400a1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  400a1e:	1880      	adds	r0, r0, r2
  400a20:	4159      	adcs	r1, r3
  400a22:	eb18 0000 	adds.w	r0, r8, r0
  400a26:	eb49 0101 	adc.w	r1, r9, r1
  400a2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400a2e:	2f00      	cmp	r7, #0
  400a30:	f001 870e 	beq.w	402850 <.LCFI3+0x24>

00400a34 <.LBB419>:
  400a34:	e9dd 8922 	ldrd	r8, r9, [sp, #136]	; 0x88
  400a38:	4643      	mov	r3, r8
  400a3a:	085b      	lsrs	r3, r3, #1
  400a3c:	464a      	mov	r2, r9
  400a3e:	ea43 73c9 	orr.w	r3, r3, r9, lsl #31
  400a42:	93b2      	str	r3, [sp, #712]	; 0x2c8
  400a44:	0853      	lsrs	r3, r2, #1
  400a46:	4642      	mov	r2, r8
  400a48:	ea43 73c8 	orr.w	r3, r3, r8, lsl #31
  400a4c:	93b3      	str	r3, [sp, #716]	; 0x2cc

00400a4e <.LBB421>:
  400a4e:	0a13      	lsrs	r3, r2, #8
  400a50:	464a      	mov	r2, r9
  400a52:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
  400a56:	93b4      	str	r3, [sp, #720]	; 0x2d0
  400a58:	0a13      	lsrs	r3, r2, #8
  400a5a:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
  400a5e:	93b5      	str	r3, [sp, #724]	; 0x2d4

00400a60 <.LBE421>:
  400a60:	abb2      	add	r3, sp, #712	; 0x2c8
  400a62:	e9d3 2300 	ldrd	r2, r3, [r3]
  400a66:	a9b4      	add	r1, sp, #720	; 0x2d0
  400a68:	e9d1 ab00 	ldrd	sl, fp, [r1]
  400a6c:	ea82 020a 	eor.w	r2, r2, sl
  400a70:	ea83 030b 	eor.w	r3, r3, fp
  400a74:	4641      	mov	r1, r8
  400a76:	09c9      	lsrs	r1, r1, #7
  400a78:	4648      	mov	r0, r9
  400a7a:	ea41 6149 	orr.w	r1, r1, r9, lsl #25
  400a7e:	913c      	str	r1, [sp, #240]	; 0xf0
  400a80:	09c1      	lsrs	r1, r0, #7
  400a82:	913d      	str	r1, [sp, #244]	; 0xf4
  400a84:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
  400a88:	4050      	eors	r0, r2
  400a8a:	4059      	eors	r1, r3
  400a8c:	4602      	mov	r2, r0
  400a8e:	460b      	mov	r3, r1
  400a90:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  400a94:	e9dd ab16 	ldrd	sl, fp, [sp, #88]	; 0x58
  400a98:	eb10 000a 	adds.w	r0, r0, sl
  400a9c:	eb41 010b 	adc.w	r1, r1, fp
  400aa0:	eb12 0800 	adds.w	r8, r2, r0
  400aa4:	eb43 0901 	adc.w	r9, r3, r1
  400aa8:	e9cd 8920 	strd	r8, r9, [sp, #128]	; 0x80

00400aac <.LBB423>:
  400aac:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  400ab0:	4641      	mov	r1, r8
  400ab2:	0cc9      	lsrs	r1, r1, #19
  400ab4:	4648      	mov	r0, r9
  400ab6:	ea41 3149 	orr.w	r1, r1, r9, lsl #13
  400aba:	91b6      	str	r1, [sp, #728]	; 0x2d8
  400abc:	0cc1      	lsrs	r1, r0, #19
  400abe:	4640      	mov	r0, r8
  400ac0:	ea41 3148 	orr.w	r1, r1, r8, lsl #13
  400ac4:	91b7      	str	r1, [sp, #732]	; 0x2dc

00400ac6 <.LBB425>:
  400ac6:	4649      	mov	r1, r9
  400ac8:	00c9      	lsls	r1, r1, #3
  400aca:	ea41 7158 	orr.w	r1, r1, r8, lsr #29
  400ace:	91b9      	str	r1, [sp, #740]	; 0x2e4
  400ad0:	00c1      	lsls	r1, r0, #3
  400ad2:	ea41 7159 	orr.w	r1, r1, r9, lsr #29
  400ad6:	91b8      	str	r1, [sp, #736]	; 0x2e0

00400ad8 <.LBE425>:
  400ad8:	abb6      	add	r3, sp, #728	; 0x2d8
  400ada:	e9d3 0100 	ldrd	r0, r1, [r3]
  400ade:	abb8      	add	r3, sp, #736	; 0x2e0
  400ae0:	e9d3 ab00 	ldrd	sl, fp, [r3]
  400ae4:	ea80 000a 	eor.w	r0, r0, sl
  400ae8:	ea81 010b 	eor.w	r1, r1, fp
  400aec:	4643      	mov	r3, r8
  400aee:	099b      	lsrs	r3, r3, #6
  400af0:	464a      	mov	r2, r9
  400af2:	ea43 6389 	orr.w	r3, r3, r9, lsl #26
  400af6:	933e      	str	r3, [sp, #248]	; 0xf8
  400af8:	0993      	lsrs	r3, r2, #6
  400afa:	933f      	str	r3, [sp, #252]	; 0xfc
  400afc:	e9dd 233e 	ldrd	r2, r3, [sp, #248]	; 0xf8
  400b00:	4042      	eors	r2, r0
  400b02:	404b      	eors	r3, r1
  400b04:	4610      	mov	r0, r2
  400b06:	4619      	mov	r1, r3
  400b08:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
  400b0c:	1812      	adds	r2, r2, r0
  400b0e:	414b      	adcs	r3, r1
  400b10:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  400b14:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  400b18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  400b1c:	1812      	adds	r2, r2, r0
  400b1e:	414b      	adcs	r3, r1
  400b20:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  400b24:	1880      	adds	r0, r0, r2
  400b26:	4159      	adcs	r1, r3
  400b28:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400b2c:	1902      	adds	r2, r0, r4
  400b2e:	eb41 0305 	adc.w	r3, r1, r5
  400b32:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68

00400b36 <.LBB427>:
  400b36:	e9dd 452e 	ldrd	r4, r5, [sp, #184]	; 0xb8
  400b3a:	0f23      	lsrs	r3, r4, #28
  400b3c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  400b40:	93ba      	str	r3, [sp, #744]	; 0x2e8
  400b42:	0f2b      	lsrs	r3, r5, #28
  400b44:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  400b48:	93bb      	str	r3, [sp, #748]	; 0x2ec

00400b4a <.LBB429>:
  400b4a:	07ab      	lsls	r3, r5, #30
  400b4c:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  400b50:	93bd      	str	r3, [sp, #756]	; 0x2f4
  400b52:	07a3      	lsls	r3, r4, #30
  400b54:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  400b58:	93bc      	str	r3, [sp, #752]	; 0x2f0

00400b5a <.LBE429>:
  400b5a:	abba      	add	r3, sp, #744	; 0x2e8
  400b5c:	e9d3 1200 	ldrd	r1, r2, [r3]
  400b60:	abbc      	add	r3, sp, #752	; 0x2f0
  400b62:	e9d3 ab00 	ldrd	sl, fp, [r3]
  400b66:	ea81 010a 	eor.w	r1, r1, sl
  400b6a:	ea82 020b 	eor.w	r2, r2, fp
  400b6e:	4613      	mov	r3, r2
  400b70:	460a      	mov	r2, r1

00400b72 <.LBB431>:
  400b72:	0669      	lsls	r1, r5, #25
  400b74:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  400b78:	91bf      	str	r1, [sp, #764]	; 0x2fc
  400b7a:	0661      	lsls	r1, r4, #25
  400b7c:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  400b80:	91be      	str	r1, [sp, #760]	; 0x2f8

00400b82 <.LBE431>:
  400b82:	a9be      	add	r1, sp, #760	; 0x2f8
  400b84:	e9d1 0100 	ldrd	r0, r1, [r1]
  400b88:	4050      	eors	r0, r2
  400b8a:	4059      	eors	r1, r3
  400b8c:	f50d 63d8 	add.w	r3, sp, #1728	; 0x6c0
  400b90:	e9c3 0100 	strd	r0, r1, [r3]
  400b94:	e9dd ab2a 	ldrd	sl, fp, [sp, #168]	; 0xa8
  400b98:	4650      	mov	r0, sl
  400b9a:	4659      	mov	r1, fp
  400b9c:	46a0      	mov	r8, r4
  400b9e:	4320      	orrs	r0, r4
  400ba0:	4329      	orrs	r1, r5
  400ba2:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
  400ba6:	4003      	ands	r3, r0
  400ba8:	400c      	ands	r4, r1
  400baa:	4618      	mov	r0, r3
  400bac:	4621      	mov	r1, r4
  400bae:	4652      	mov	r2, sl
  400bb0:	465b      	mov	r3, fp
  400bb2:	4644      	mov	r4, r8
  400bb4:	4022      	ands	r2, r4
  400bb6:	402b      	ands	r3, r5
  400bb8:	4310      	orrs	r0, r2
  400bba:	4319      	orrs	r1, r3
  400bbc:	f50d 63d8 	add.w	r3, sp, #1728	; 0x6c0
  400bc0:	e9d3 3400 	ldrd	r3, r4, [r3]
  400bc4:	181b      	adds	r3, r3, r0
  400bc6:	414c      	adcs	r4, r1
  400bc8:	4621      	mov	r1, r4
  400bca:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  400bce:	18e4      	adds	r4, r4, r3
  400bd0:	414d      	adcs	r5, r1

00400bd2 <.LBB433>:
  400bd2:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  400bd6:	0b83      	lsrs	r3, r0, #14
  400bd8:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  400bdc:	93c0      	str	r3, [sp, #768]	; 0x300
  400bde:	0b8b      	lsrs	r3, r1, #14
  400be0:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
  400be4:	93c1      	str	r3, [sp, #772]	; 0x304

00400be6 <.LBB435>:
  400be6:	0c83      	lsrs	r3, r0, #18
  400be8:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
  400bec:	93c2      	str	r3, [sp, #776]	; 0x308
  400bee:	0c8b      	lsrs	r3, r1, #18
  400bf0:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
  400bf4:	93c3      	str	r3, [sp, #780]	; 0x30c

00400bf6 <.LBE435>:
        R( 4); R( 5); R( 6); R( 7);
  400bf6:	abc0      	add	r3, sp, #768	; 0x300
  400bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
  400bfc:	f50d 7842 	add.w	r8, sp, #776	; 0x308
  400c00:	e9d8 ab00 	ldrd	sl, fp, [r8]
  400c04:	ea82 020a 	eor.w	r2, r2, sl
  400c08:	ea83 030b 	eor.w	r3, r3, fp

00400c0c <.LBB437>:
  400c0c:	4682      	mov	sl, r0
  400c0e:	468b      	mov	fp, r1
  400c10:	05c9      	lsls	r1, r1, #23
  400c12:	4650      	mov	r0, sl
  400c14:	ea41 215a 	orr.w	r1, r1, sl, lsr #9
  400c18:	91c5      	str	r1, [sp, #788]	; 0x314
  400c1a:	05c1      	lsls	r1, r0, #23
  400c1c:	ea41 215b 	orr.w	r1, r1, fp, lsr #9
  400c20:	91c4      	str	r1, [sp, #784]	; 0x310

00400c22 <.LBE437>:
  400c22:	a9c4      	add	r1, sp, #784	; 0x310
  400c24:	e9d1 0100 	ldrd	r0, r1, [r1]
  400c28:	4050      	eors	r0, r2
  400c2a:	4059      	eors	r1, r3
  400c2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400c30:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
  400c34:	4640      	mov	r0, r8
  400c36:	4649      	mov	r1, r9
  400c38:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  400c3c:	4042      	eors	r2, r0
  400c3e:	404b      	eors	r3, r1
  400c40:	4610      	mov	r0, r2
  400c42:	4619      	mov	r1, r3
  400c44:	4652      	mov	r2, sl
  400c46:	465b      	mov	r3, fp
  400c48:	4002      	ands	r2, r0
  400c4a:	400b      	ands	r3, r1
  400c4c:	4610      	mov	r0, r2
  400c4e:	4619      	mov	r1, r3
  400c50:	4642      	mov	r2, r8
  400c52:	464b      	mov	r3, r9
  400c54:	4042      	eors	r2, r0
  400c56:	404b      	eors	r3, r1
  400c58:	4610      	mov	r0, r2
  400c5a:	4619      	mov	r1, r3
  400c5c:	e9d6 2308 	ldrd	r2, r3, [r6, #32]
  400c60:	e9dd ab2c 	ldrd	sl, fp, [sp, #176]	; 0xb0
  400c64:	eb1a 0a02 	adds.w	sl, sl, r2
  400c68:	eb4b 0b03 	adc.w	fp, fp, r3
  400c6c:	eb1a 0200 	adds.w	r2, sl, r0
  400c70:	eb4b 0301 	adc.w	r3, fp, r1
  400c74:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
  400c78:	2f00      	cmp	r7, #0
  400c7a:	f001 85ef 	beq.w	40285c <.LCFI3+0x30>

00400c7e <.LBB439>:
  400c7e:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
  400c82:	4643      	mov	r3, r8
  400c84:	085b      	lsrs	r3, r3, #1
  400c86:	464a      	mov	r2, r9
  400c88:	ea43 73c9 	orr.w	r3, r3, r9, lsl #31
  400c8c:	93c6      	str	r3, [sp, #792]	; 0x318
  400c8e:	0853      	lsrs	r3, r2, #1
  400c90:	4642      	mov	r2, r8
  400c92:	ea43 73c8 	orr.w	r3, r3, r8, lsl #31
  400c96:	93c7      	str	r3, [sp, #796]	; 0x31c

00400c98 <.LBB441>:
  400c98:	0a13      	lsrs	r3, r2, #8
  400c9a:	464a      	mov	r2, r9
  400c9c:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
  400ca0:	93c8      	str	r3, [sp, #800]	; 0x320
  400ca2:	0a13      	lsrs	r3, r2, #8
  400ca4:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
  400ca8:	93c9      	str	r3, [sp, #804]	; 0x324

00400caa <.LBE441>:
  400caa:	abc6      	add	r3, sp, #792	; 0x318
  400cac:	e9d3 2300 	ldrd	r2, r3, [r3]
  400cb0:	a9c8      	add	r1, sp, #800	; 0x320
  400cb2:	e9d1 ab00 	ldrd	sl, fp, [r1]
  400cb6:	ea82 020a 	eor.w	r2, r2, sl
  400cba:	ea83 030b 	eor.w	r3, r3, fp
  400cbe:	4641      	mov	r1, r8
  400cc0:	09c9      	lsrs	r1, r1, #7
  400cc2:	4648      	mov	r0, r9
  400cc4:	ea41 6149 	orr.w	r1, r1, r9, lsl #25
  400cc8:	9140      	str	r1, [sp, #256]	; 0x100
  400cca:	09c1      	lsrs	r1, r0, #7
  400ccc:	9141      	str	r1, [sp, #260]	; 0x104
  400cce:	a940      	add	r1, sp, #256	; 0x100
  400cd0:	e9d1 0100 	ldrd	r0, r1, [r1]
  400cd4:	4050      	eors	r0, r2
  400cd6:	4059      	eors	r1, r3
  400cd8:	4602      	mov	r2, r0
  400cda:	460b      	mov	r3, r1
  400cdc:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
  400ce0:	e9dd ab26 	ldrd	sl, fp, [sp, #152]	; 0x98
  400ce4:	eb10 000a 	adds.w	r0, r0, sl
  400ce8:	eb41 010b 	adc.w	r1, r1, fp
  400cec:	eb12 0800 	adds.w	r8, r2, r0
  400cf0:	eb43 0901 	adc.w	r9, r3, r1
  400cf4:	e9cd 8922 	strd	r8, r9, [sp, #136]	; 0x88

00400cf8 <.LBB443>:
  400cf8:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
  400cfc:	4641      	mov	r1, r8
  400cfe:	0cc9      	lsrs	r1, r1, #19
  400d00:	4648      	mov	r0, r9
  400d02:	ea41 3149 	orr.w	r1, r1, r9, lsl #13
  400d06:	91ca      	str	r1, [sp, #808]	; 0x328
  400d08:	0cc1      	lsrs	r1, r0, #19
  400d0a:	4640      	mov	r0, r8
  400d0c:	ea41 3148 	orr.w	r1, r1, r8, lsl #13
  400d10:	91cb      	str	r1, [sp, #812]	; 0x32c

00400d12 <.LBB445>:
  400d12:	4649      	mov	r1, r9
  400d14:	00c9      	lsls	r1, r1, #3
  400d16:	ea41 7158 	orr.w	r1, r1, r8, lsr #29
  400d1a:	91cd      	str	r1, [sp, #820]	; 0x334
  400d1c:	00c1      	lsls	r1, r0, #3
  400d1e:	ea41 7159 	orr.w	r1, r1, r9, lsr #29
  400d22:	91cc      	str	r1, [sp, #816]	; 0x330

00400d24 <.LBE445>:
  400d24:	abca      	add	r3, sp, #808	; 0x328
  400d26:	e9d3 0100 	ldrd	r0, r1, [r3]
  400d2a:	abcc      	add	r3, sp, #816	; 0x330
  400d2c:	e9d3 ab00 	ldrd	sl, fp, [r3]
  400d30:	ea80 000a 	eor.w	r0, r0, sl
  400d34:	ea81 010b 	eor.w	r1, r1, fp
  400d38:	4643      	mov	r3, r8
  400d3a:	099b      	lsrs	r3, r3, #6
  400d3c:	464a      	mov	r2, r9
  400d3e:	ea43 6389 	orr.w	r3, r3, r9, lsl #26
  400d42:	9342      	str	r3, [sp, #264]	; 0x108
  400d44:	0993      	lsrs	r3, r2, #6
  400d46:	9343      	str	r3, [sp, #268]	; 0x10c
  400d48:	ab42      	add	r3, sp, #264	; 0x108
  400d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
  400d4e:	4042      	eors	r2, r0
  400d50:	404b      	eors	r3, r1
  400d52:	4610      	mov	r0, r2
  400d54:	4619      	mov	r1, r3
  400d56:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
  400d5a:	1812      	adds	r2, r2, r0
  400d5c:	414b      	adcs	r3, r1
  400d5e:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
  400d62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  400d66:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
  400d6a:	1880      	adds	r0, r0, r2
  400d6c:	4159      	adcs	r1, r3
  400d6e:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
  400d72:	1812      	adds	r2, r2, r0
  400d74:	414b      	adcs	r3, r1
  400d76:	4690      	mov	r8, r2
  400d78:	4699      	mov	r9, r3
  400d7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  400d7e:	eb12 0208 	adds.w	r2, r2, r8
  400d82:	eb43 0309 	adc.w	r3, r3, r9
  400d86:	e9cd 2306 	strd	r2, r3, [sp, #24]

00400d8a <.LBB447>:
  400d8a:	0f23      	lsrs	r3, r4, #28
  400d8c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  400d90:	93ce      	str	r3, [sp, #824]	; 0x338
  400d92:	0f2b      	lsrs	r3, r5, #28
  400d94:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  400d98:	93cf      	str	r3, [sp, #828]	; 0x33c

00400d9a <.LBB449>:
  400d9a:	07ab      	lsls	r3, r5, #30
  400d9c:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  400da0:	93d1      	str	r3, [sp, #836]	; 0x344
  400da2:	07a3      	lsls	r3, r4, #30
  400da4:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  400da8:	93d0      	str	r3, [sp, #832]	; 0x340

00400daa <.LBE449>:
  400daa:	abce      	add	r3, sp, #824	; 0x338
  400dac:	e9d3 2300 	ldrd	r2, r3, [r3]
  400db0:	a9d0      	add	r1, sp, #832	; 0x340
  400db2:	e9d1 ab00 	ldrd	sl, fp, [r1]
  400db6:	ea82 020a 	eor.w	r2, r2, sl
  400dba:	ea83 030b 	eor.w	r3, r3, fp

00400dbe <.LBB451>:
  400dbe:	0669      	lsls	r1, r5, #25
  400dc0:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  400dc4:	91d3      	str	r1, [sp, #844]	; 0x34c
  400dc6:	0661      	lsls	r1, r4, #25
  400dc8:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  400dcc:	91d2      	str	r1, [sp, #840]	; 0x348

00400dce <.LBE451>:
  400dce:	a9d2      	add	r1, sp, #840	; 0x348
  400dd0:	e9d1 ab00 	ldrd	sl, fp, [r1]
  400dd4:	ea8a 0a02 	eor.w	sl, sl, r2
  400dd8:	ea8b 0b03 	eor.w	fp, fp, r3
  400ddc:	e9cd ab02 	strd	sl, fp, [sp, #8]
  400de0:	e9dd ab2e 	ldrd	sl, fp, [sp, #184]	; 0xb8
  400de4:	4650      	mov	r0, sl
  400de6:	4659      	mov	r1, fp
  400de8:	4320      	orrs	r0, r4
  400dea:	4329      	orrs	r1, r5
  400dec:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  400df0:	4002      	ands	r2, r0
  400df2:	400b      	ands	r3, r1
  400df4:	ea0a 0a04 	and.w	sl, sl, r4
  400df8:	ea0b 0b05 	and.w	fp, fp, r5
  400dfc:	ea4a 0a02 	orr.w	sl, sl, r2
  400e00:	ea4b 0b03 	orr.w	fp, fp, r3
  400e04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  400e08:	eb12 020a 	adds.w	r2, r2, sl
  400e0c:	eb43 030b 	adc.w	r3, r3, fp
  400e10:	eb18 0a02 	adds.w	sl, r8, r2
  400e14:	eb49 0b03 	adc.w	fp, r9, r3

00400e18 <.LBB453>:
  400e18:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  400e1c:	4643      	mov	r3, r8
  400e1e:	0b9b      	lsrs	r3, r3, #14
  400e20:	464a      	mov	r2, r9
  400e22:	ea43 4389 	orr.w	r3, r3, r9, lsl #18
  400e26:	93d4      	str	r3, [sp, #848]	; 0x350
  400e28:	0b93      	lsrs	r3, r2, #14
  400e2a:	4642      	mov	r2, r8
  400e2c:	ea43 4388 	orr.w	r3, r3, r8, lsl #18
  400e30:	93d5      	str	r3, [sp, #852]	; 0x354

00400e32 <.LBB455>:
  400e32:	0c93      	lsrs	r3, r2, #18
  400e34:	464a      	mov	r2, r9
  400e36:	ea43 3389 	orr.w	r3, r3, r9, lsl #14
  400e3a:	93d6      	str	r3, [sp, #856]	; 0x358
  400e3c:	0c93      	lsrs	r3, r2, #18
  400e3e:	ea43 3388 	orr.w	r3, r3, r8, lsl #14
  400e42:	93d7      	str	r3, [sp, #860]	; 0x35c

00400e44 <.LBE455>:
  400e44:	abd4      	add	r3, sp, #848	; 0x350
  400e46:	e9d3 2300 	ldrd	r2, r3, [r3]
  400e4a:	a9d6      	add	r1, sp, #856	; 0x358
  400e4c:	e9d1 0100 	ldrd	r0, r1, [r1]
  400e50:	4042      	eors	r2, r0
  400e52:	404b      	eors	r3, r1

00400e54 <.LBB457>:
  400e54:	4649      	mov	r1, r9
  400e56:	05c9      	lsls	r1, r1, #23
  400e58:	4640      	mov	r0, r8
  400e5a:	ea41 2158 	orr.w	r1, r1, r8, lsr #9
  400e5e:	91d9      	str	r1, [sp, #868]	; 0x364
  400e60:	05c1      	lsls	r1, r0, #23
  400e62:	ea41 2159 	orr.w	r1, r1, r9, lsr #9
  400e66:	91d8      	str	r1, [sp, #864]	; 0x360

00400e68 <.LBE457>:
  400e68:	a9d8      	add	r1, sp, #864	; 0x360
  400e6a:	e9d1 0100 	ldrd	r0, r1, [r1]
  400e6e:	4050      	eors	r0, r2
  400e70:	4059      	eors	r1, r3
  400e72:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400e76:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  400e7a:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  400e7e:	4042      	eors	r2, r0
  400e80:	404b      	eors	r3, r1
  400e82:	4610      	mov	r0, r2
  400e84:	4619      	mov	r1, r3
  400e86:	4642      	mov	r2, r8
  400e88:	464b      	mov	r3, r9
  400e8a:	4002      	ands	r2, r0
  400e8c:	400b      	ands	r3, r1
  400e8e:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
  400e92:	ea88 0802 	eor.w	r8, r8, r2
  400e96:	ea89 0903 	eor.w	r9, r9, r3
  400e9a:	e9d6 230a 	ldrd	r2, r3, [r6, #40]	; 0x28
  400e9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  400ea2:	1880      	adds	r0, r0, r2
  400ea4:	4159      	adcs	r1, r3
  400ea6:	eb18 0000 	adds.w	r0, r8, r0
  400eaa:	eb49 0101 	adc.w	r1, r9, r1
  400eae:	e9cd 0104 	strd	r0, r1, [sp, #16]
  400eb2:	2f00      	cmp	r7, #0
  400eb4:	f001 84d8 	beq.w	402868 <.LCFI3+0x3c>

00400eb8 <.LBB459>:
  400eb8:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
  400ebc:	4643      	mov	r3, r8
  400ebe:	085b      	lsrs	r3, r3, #1
  400ec0:	464a      	mov	r2, r9
  400ec2:	ea43 73c9 	orr.w	r3, r3, r9, lsl #31
  400ec6:	93da      	str	r3, [sp, #872]	; 0x368
  400ec8:	0853      	lsrs	r3, r2, #1
  400eca:	4642      	mov	r2, r8
  400ecc:	ea43 73c8 	orr.w	r3, r3, r8, lsl #31
  400ed0:	93db      	str	r3, [sp, #876]	; 0x36c

00400ed2 <.LBB461>:
  400ed2:	0a13      	lsrs	r3, r2, #8
  400ed4:	464a      	mov	r2, r9
  400ed6:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
  400eda:	93dc      	str	r3, [sp, #880]	; 0x370
  400edc:	0a13      	lsrs	r3, r2, #8
  400ede:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
  400ee2:	93dd      	str	r3, [sp, #884]	; 0x374

00400ee4 <.LBE461>:
  400ee4:	abda      	add	r3, sp, #872	; 0x368
  400ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
  400eea:	a9dc      	add	r1, sp, #880	; 0x370
  400eec:	e9d1 0100 	ldrd	r0, r1, [r1]
  400ef0:	4042      	eors	r2, r0
  400ef2:	404b      	eors	r3, r1
  400ef4:	4641      	mov	r1, r8
  400ef6:	09c9      	lsrs	r1, r1, #7
  400ef8:	4648      	mov	r0, r9
  400efa:	ea41 6149 	orr.w	r1, r1, r9, lsl #25
  400efe:	9144      	str	r1, [sp, #272]	; 0x110
  400f00:	09c1      	lsrs	r1, r0, #7
  400f02:	9145      	str	r1, [sp, #276]	; 0x114
  400f04:	a944      	add	r1, sp, #272	; 0x110
  400f06:	e9d1 0100 	ldrd	r0, r1, [r1]
  400f0a:	4050      	eors	r0, r2
  400f0c:	4059      	eors	r1, r3
  400f0e:	4680      	mov	r8, r0
  400f10:	4689      	mov	r9, r1
  400f12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  400f16:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  400f1a:	1880      	adds	r0, r0, r2
  400f1c:	4159      	adcs	r1, r3
  400f1e:	eb18 0200 	adds.w	r2, r8, r0
  400f22:	eb49 0301 	adc.w	r3, r9, r1
  400f26:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28

00400f2a <.LBB463>:
  400f2a:	e9dd 8920 	ldrd	r8, r9, [sp, #128]	; 0x80
  400f2e:	4641      	mov	r1, r8
  400f30:	0cc9      	lsrs	r1, r1, #19
  400f32:	4648      	mov	r0, r9
  400f34:	ea41 3149 	orr.w	r1, r1, r9, lsl #13
  400f38:	91de      	str	r1, [sp, #888]	; 0x378
  400f3a:	0cc1      	lsrs	r1, r0, #19
  400f3c:	4640      	mov	r0, r8
  400f3e:	ea41 3148 	orr.w	r1, r1, r8, lsl #13
  400f42:	91df      	str	r1, [sp, #892]	; 0x37c

00400f44 <.LBB465>:
  400f44:	4649      	mov	r1, r9
  400f46:	00c9      	lsls	r1, r1, #3
  400f48:	ea41 7158 	orr.w	r1, r1, r8, lsr #29
  400f4c:	91e1      	str	r1, [sp, #900]	; 0x384
  400f4e:	00c1      	lsls	r1, r0, #3
  400f50:	ea41 7159 	orr.w	r1, r1, r9, lsr #29
  400f54:	91e0      	str	r1, [sp, #896]	; 0x380

00400f56 <.LBE465>:
  400f56:	abde      	add	r3, sp, #888	; 0x378
  400f58:	e9d3 0100 	ldrd	r0, r1, [r3]
  400f5c:	abe0      	add	r3, sp, #896	; 0x380
  400f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
  400f62:	4050      	eors	r0, r2
  400f64:	4059      	eors	r1, r3
  400f66:	4643      	mov	r3, r8
  400f68:	099b      	lsrs	r3, r3, #6
  400f6a:	464a      	mov	r2, r9
  400f6c:	ea43 6389 	orr.w	r3, r3, r9, lsl #26
  400f70:	9346      	str	r3, [sp, #280]	; 0x118
  400f72:	0993      	lsrs	r3, r2, #6
  400f74:	9347      	str	r3, [sp, #284]	; 0x11c
  400f76:	ab46      	add	r3, sp, #280	; 0x118
  400f78:	e9d3 2300 	ldrd	r2, r3, [r3]
  400f7c:	4042      	eors	r2, r0
  400f7e:	404b      	eors	r3, r1
  400f80:	4610      	mov	r0, r2
  400f82:	4619      	mov	r1, r3
  400f84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  400f88:	1812      	adds	r2, r2, r0
  400f8a:	414b      	adcs	r3, r1
  400f8c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  400f90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  400f94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  400f98:	1812      	adds	r2, r2, r0
  400f9a:	414b      	adcs	r3, r1
  400f9c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  400fa0:	1880      	adds	r0, r0, r2
  400fa2:	4159      	adcs	r1, r3
  400fa4:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  400fa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400fac:	1812      	adds	r2, r2, r0
  400fae:	414b      	adcs	r3, r1
  400fb0:	e9cd 2304 	strd	r2, r3, [sp, #16]

00400fb4 <.LBB467>:
  400fb4:	ea4f 731a 	mov.w	r3, sl, lsr #28
  400fb8:	ea43 130b 	orr.w	r3, r3, fp, lsl #4
  400fbc:	93e2      	str	r3, [sp, #904]	; 0x388
  400fbe:	ea4f 731b 	mov.w	r3, fp, lsr #28
  400fc2:	ea43 130a 	orr.w	r3, r3, sl, lsl #4
  400fc6:	93e3      	str	r3, [sp, #908]	; 0x38c

00400fc8 <.LBB469>:
  400fc8:	ea4f 738b 	mov.w	r3, fp, lsl #30
  400fcc:	ea43 039a 	orr.w	r3, r3, sl, lsr #2
  400fd0:	93e5      	str	r3, [sp, #916]	; 0x394
  400fd2:	ea4f 738a 	mov.w	r3, sl, lsl #30
  400fd6:	ea43 039b 	orr.w	r3, r3, fp, lsr #2
  400fda:	93e4      	str	r3, [sp, #912]	; 0x390

00400fdc <.LBE469>:
  400fdc:	abe2      	add	r3, sp, #904	; 0x388
  400fde:	e9d3 1200 	ldrd	r1, r2, [r3]
  400fe2:	abe4      	add	r3, sp, #912	; 0x390
  400fe4:	e9d3 8900 	ldrd	r8, r9, [r3]
  400fe8:	ea81 0108 	eor.w	r1, r1, r8
  400fec:	ea82 0209 	eor.w	r2, r2, r9
  400ff0:	4613      	mov	r3, r2
  400ff2:	460a      	mov	r2, r1

00400ff4 <.LBB471>:
  400ff4:	ea4f 614b 	mov.w	r1, fp, lsl #25
  400ff8:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
  400ffc:	91e7      	str	r1, [sp, #924]	; 0x39c
  400ffe:	ea4f 614a 	mov.w	r1, sl, lsl #25
  401002:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
  401006:	91e6      	str	r1, [sp, #920]	; 0x398

00401008 <.LBE471>:
  401008:	a9e6      	add	r1, sp, #920	; 0x398
  40100a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40100e:	4050      	eors	r0, r2
  401010:	4059      	eors	r1, r3
  401012:	4680      	mov	r8, r0
  401014:	4689      	mov	r9, r1
  401016:	ea44 000a 	orr.w	r0, r4, sl
  40101a:	ea45 010b 	orr.w	r1, r5, fp
  40101e:	e9dd 232e 	ldrd	r2, r3, [sp, #184]	; 0xb8
  401022:	4002      	ands	r2, r0
  401024:	400b      	ands	r3, r1
  401026:	4610      	mov	r0, r2
  401028:	4619      	mov	r1, r3
  40102a:	ea04 020a 	and.w	r2, r4, sl
  40102e:	ea05 030b 	and.w	r3, r5, fp
  401032:	4302      	orrs	r2, r0
  401034:	430b      	orrs	r3, r1
  401036:	eb12 0008 	adds.w	r0, r2, r8
  40103a:	eb43 0109 	adc.w	r1, r3, r9
  40103e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401042:	1812      	adds	r2, r2, r0
  401044:	414b      	adcs	r3, r1
  401046:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8

0040104a <.LBB473>:
  40104a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40104e:	0b83      	lsrs	r3, r0, #14
  401050:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  401054:	93e8      	str	r3, [sp, #928]	; 0x3a0
  401056:	0b8b      	lsrs	r3, r1, #14
  401058:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
  40105c:	93e9      	str	r3, [sp, #932]	; 0x3a4

0040105e <.LBB475>:
  40105e:	0c83      	lsrs	r3, r0, #18
  401060:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
  401064:	93ea      	str	r3, [sp, #936]	; 0x3a8
  401066:	0c8b      	lsrs	r3, r1, #18
  401068:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
  40106c:	93eb      	str	r3, [sp, #940]	; 0x3ac

0040106e <.LBE475>:
  40106e:	abe8      	add	r3, sp, #928	; 0x3a0
  401070:	e9d3 2300 	ldrd	r2, r3, [r3]
  401074:	f50d 786a 	add.w	r8, sp, #936	; 0x3a8
  401078:	e9d8 8900 	ldrd	r8, r9, [r8]
  40107c:	ea82 0208 	eor.w	r2, r2, r8
  401080:	ea83 0309 	eor.w	r3, r3, r9

00401084 <.LBB477>:
  401084:	4680      	mov	r8, r0
  401086:	4689      	mov	r9, r1
  401088:	05c9      	lsls	r1, r1, #23
  40108a:	4640      	mov	r0, r8
  40108c:	ea41 2158 	orr.w	r1, r1, r8, lsr #9
  401090:	91ed      	str	r1, [sp, #948]	; 0x3b4
  401092:	05c1      	lsls	r1, r0, #23
  401094:	ea41 2159 	orr.w	r1, r1, r9, lsr #9
  401098:	91ec      	str	r1, [sp, #944]	; 0x3b0

0040109a <.LBE477>:
  40109a:	a9ec      	add	r1, sp, #944	; 0x3b0
  40109c:	e9d1 0100 	ldrd	r0, r1, [r1]
  4010a0:	4050      	eors	r0, r2
  4010a2:	4059      	eors	r1, r3
  4010a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4010a8:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  4010ac:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  4010b0:	ea80 0008 	eor.w	r0, r0, r8
  4010b4:	ea81 0109 	eor.w	r1, r1, r9
  4010b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4010bc:	4002      	ands	r2, r0
  4010be:	400b      	ands	r3, r1
  4010c0:	4610      	mov	r0, r2
  4010c2:	4619      	mov	r1, r3
  4010c4:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  4010c8:	4042      	eors	r2, r0
  4010ca:	404b      	eors	r3, r1
  4010cc:	4610      	mov	r0, r2
  4010ce:	4619      	mov	r1, r3
  4010d0:	e9d6 230c 	ldrd	r2, r3, [r6, #48]	; 0x30
  4010d4:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
  4010d8:	eb18 0802 	adds.w	r8, r8, r2
  4010dc:	eb49 0903 	adc.w	r9, r9, r3
  4010e0:	eb18 0200 	adds.w	r2, r8, r0
  4010e4:	eb49 0301 	adc.w	r3, r9, r1
  4010e8:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  4010ec:	2f00      	cmp	r7, #0
  4010ee:	f001 83c1 	beq.w	402874 <.LCFI3+0x48>

004010f2 <.LBB479>:
  4010f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4010f6:	0843      	lsrs	r3, r0, #1
  4010f8:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
  4010fc:	93ee      	str	r3, [sp, #952]	; 0x3b8
  4010fe:	084b      	lsrs	r3, r1, #1
  401100:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
  401104:	93ef      	str	r3, [sp, #956]	; 0x3bc

00401106 <.LBB481>:
  401106:	0a03      	lsrs	r3, r0, #8
  401108:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  40110c:	93f0      	str	r3, [sp, #960]	; 0x3c0
  40110e:	0a0b      	lsrs	r3, r1, #8
  401110:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  401114:	93f1      	str	r3, [sp, #964]	; 0x3c4

00401116 <.LBE481>:
  401116:	abee      	add	r3, sp, #952	; 0x3b8
  401118:	e9d3 2300 	ldrd	r2, r3, [r3]
  40111c:	f50d 7870 	add.w	r8, sp, #960	; 0x3c0
  401120:	e9d8 8900 	ldrd	r8, r9, [r8]
  401124:	ea82 0208 	eor.w	r2, r2, r8
  401128:	ea83 0309 	eor.w	r3, r3, r9
  40112c:	4689      	mov	r9, r1
  40112e:	09c1      	lsrs	r1, r0, #7
  401130:	4648      	mov	r0, r9
  401132:	ea41 6149 	orr.w	r1, r1, r9, lsl #25
  401136:	9148      	str	r1, [sp, #288]	; 0x120
  401138:	09c1      	lsrs	r1, r0, #7
  40113a:	9149      	str	r1, [sp, #292]	; 0x124
  40113c:	a948      	add	r1, sp, #288	; 0x120
  40113e:	e9d1 0100 	ldrd	r0, r1, [r1]
  401142:	4050      	eors	r0, r2
  401144:	4059      	eors	r1, r3
  401146:	4602      	mov	r2, r0
  401148:	460b      	mov	r3, r1
  40114a:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
  40114e:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
  401152:	eb10 0008 	adds.w	r0, r0, r8
  401156:	eb41 0109 	adc.w	r1, r1, r9
  40115a:	eb12 0800 	adds.w	r8, r2, r0
  40115e:	eb43 0901 	adc.w	r9, r3, r1
  401162:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38

00401166 <.LBB483>:
  401166:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
  40116a:	0cd1      	lsrs	r1, r2, #19
  40116c:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
  401170:	91f2      	str	r1, [sp, #968]	; 0x3c8
  401172:	0cd9      	lsrs	r1, r3, #19
  401174:	ea41 3142 	orr.w	r1, r1, r2, lsl #13
  401178:	91f3      	str	r1, [sp, #972]	; 0x3cc

0040117a <.LBB485>:
  40117a:	00d9      	lsls	r1, r3, #3
  40117c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
  401180:	91f5      	str	r1, [sp, #980]	; 0x3d4
  401182:	00d1      	lsls	r1, r2, #3
  401184:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
  401188:	91f4      	str	r1, [sp, #976]	; 0x3d0

0040118a <.LBE485>:
  40118a:	a9f2      	add	r1, sp, #968	; 0x3c8
  40118c:	e9d1 0100 	ldrd	r0, r1, [r1]
  401190:	f50d 7874 	add.w	r8, sp, #976	; 0x3d0
  401194:	e9d8 8900 	ldrd	r8, r9, [r8]
  401198:	ea80 0008 	eor.w	r0, r0, r8
  40119c:	ea81 0109 	eor.w	r1, r1, r9
  4011a0:	4699      	mov	r9, r3
  4011a2:	0993      	lsrs	r3, r2, #6
  4011a4:	464a      	mov	r2, r9
  4011a6:	ea43 6389 	orr.w	r3, r3, r9, lsl #26
  4011aa:	934a      	str	r3, [sp, #296]	; 0x128
  4011ac:	0993      	lsrs	r3, r2, #6
  4011ae:	934b      	str	r3, [sp, #300]	; 0x12c
  4011b0:	ab4a      	add	r3, sp, #296	; 0x128
  4011b2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4011b6:	4042      	eors	r2, r0
  4011b8:	404b      	eors	r3, r1
  4011ba:	4610      	mov	r0, r2
  4011bc:	4619      	mov	r1, r3
  4011be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  4011c2:	1812      	adds	r2, r2, r0
  4011c4:	414b      	adcs	r3, r1
  4011c6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  4011ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4011ce:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
  4011d2:	1880      	adds	r0, r0, r2
  4011d4:	4159      	adcs	r1, r3
  4011d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  4011da:	1812      	adds	r2, r2, r0
  4011dc:	414b      	adcs	r3, r1
  4011de:	4610      	mov	r0, r2
  4011e0:	4619      	mov	r1, r3
  4011e2:	e9dd 232e 	ldrd	r2, r3, [sp, #184]	; 0xb8
  4011e6:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  4011ea:	1880      	adds	r0, r0, r2
  4011ec:	4159      	adcs	r1, r3
  4011ee:	4602      	mov	r2, r0
  4011f0:	460b      	mov	r3, r1
  4011f2:	e9cd 2302 	strd	r2, r3, [sp, #8]

004011f6 <.LBB487>:
  4011f6:	e9dd 892a 	ldrd	r8, r9, [sp, #168]	; 0xa8
  4011fa:	4643      	mov	r3, r8
  4011fc:	0f1b      	lsrs	r3, r3, #28
  4011fe:	464a      	mov	r2, r9
  401200:	ea43 1309 	orr.w	r3, r3, r9, lsl #4
  401204:	93f6      	str	r3, [sp, #984]	; 0x3d8
  401206:	0f13      	lsrs	r3, r2, #28
  401208:	4642      	mov	r2, r8
  40120a:	ea43 1308 	orr.w	r3, r3, r8, lsl #4
  40120e:	93f7      	str	r3, [sp, #988]	; 0x3dc

00401210 <.LBB489>:
  401210:	464b      	mov	r3, r9
  401212:	079b      	lsls	r3, r3, #30
  401214:	ea43 0398 	orr.w	r3, r3, r8, lsr #2
  401218:	93f9      	str	r3, [sp, #996]	; 0x3e4
  40121a:	0793      	lsls	r3, r2, #30
  40121c:	ea43 0399 	orr.w	r3, r3, r9, lsr #2
  401220:	93f8      	str	r3, [sp, #992]	; 0x3e0

00401222 <.LBE489>:
  401222:	abf6      	add	r3, sp, #984	; 0x3d8
  401224:	e9d3 2300 	ldrd	r2, r3, [r3]
  401228:	a9f8      	add	r1, sp, #992	; 0x3e0
  40122a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40122e:	4042      	eors	r2, r0
  401230:	404b      	eors	r3, r1

00401232 <.LBB491>:
  401232:	4649      	mov	r1, r9
  401234:	0649      	lsls	r1, r1, #25
  401236:	4640      	mov	r0, r8
  401238:	ea41 11d8 	orr.w	r1, r1, r8, lsr #7
  40123c:	91fb      	str	r1, [sp, #1004]	; 0x3ec
  40123e:	0641      	lsls	r1, r0, #25
  401240:	ea41 11d9 	orr.w	r1, r1, r9, lsr #7
  401244:	91fa      	str	r1, [sp, #1000]	; 0x3e8

00401246 <.LBE491>:
  401246:	a9fa      	add	r1, sp, #1000	; 0x3e8
  401248:	e9d1 0100 	ldrd	r0, r1, [r1]
  40124c:	4050      	eors	r0, r2
  40124e:	4059      	eors	r1, r3
  401250:	4602      	mov	r2, r0
  401252:	460b      	mov	r3, r1
  401254:	ea48 000a 	orr.w	r0, r8, sl
  401258:	ea49 010b 	orr.w	r1, r9, fp
  40125c:	4020      	ands	r0, r4
  40125e:	4029      	ands	r1, r5
  401260:	ea08 080a 	and.w	r8, r8, sl
  401264:	ea09 090b 	and.w	r9, r9, fp
  401268:	ea48 0800 	orr.w	r8, r8, r0
  40126c:	ea49 0901 	orr.w	r9, r9, r1
  401270:	eb18 0002 	adds.w	r0, r8, r2
  401274:	eb49 0103 	adc.w	r1, r9, r3
  401278:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
  40127c:	eb18 0800 	adds.w	r8, r8, r0
  401280:	eb49 0901 	adc.w	r9, r9, r1

00401284 <.LBB493>:
  401284:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  401288:	0b83      	lsrs	r3, r0, #14
  40128a:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  40128e:	93fc      	str	r3, [sp, #1008]	; 0x3f0
  401290:	0b8b      	lsrs	r3, r1, #14
  401292:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
  401296:	93fd      	str	r3, [sp, #1012]	; 0x3f4

00401298 <.LBB495>:
  401298:	0c83      	lsrs	r3, r0, #18
  40129a:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
  40129e:	93fe      	str	r3, [sp, #1016]	; 0x3f8
  4012a0:	0c8b      	lsrs	r3, r1, #18
  4012a2:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
  4012a6:	93ff      	str	r3, [sp, #1020]	; 0x3fc

004012a8 <.LBE495>:
  4012a8:	abfc      	add	r3, sp, #1008	; 0x3f0
  4012aa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4012ae:	a9fe      	add	r1, sp, #1016	; 0x3f8
  4012b0:	e9d1 0100 	ldrd	r0, r1, [r1]
  4012b4:	4042      	eors	r2, r0
  4012b6:	404b      	eors	r3, r1

004012b8 <.LBB497>:
  4012b8:	9903      	ldr	r1, [sp, #12]
  4012ba:	05c9      	lsls	r1, r1, #23
  4012bc:	9802      	ldr	r0, [sp, #8]
  4012be:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
  4012c2:	f8cd 1404 	str.w	r1, [sp, #1028]	; 0x404
  4012c6:	05c1      	lsls	r1, r0, #23
  4012c8:	9803      	ldr	r0, [sp, #12]
  4012ca:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
  4012ce:	f8cd 1400 	str.w	r1, [sp, #1024]	; 0x400

004012d2 <.LBE497>:
  4012d2:	f50d 6180 	add.w	r1, sp, #1024	; 0x400
  4012d6:	e9d1 0100 	ldrd	r0, r1, [r1]
  4012da:	4050      	eors	r0, r2
  4012dc:	4059      	eors	r1, r3
  4012de:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  4012e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4012e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4012ea:	4050      	eors	r0, r2
  4012ec:	4059      	eors	r1, r3
  4012ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4012f2:	4002      	ands	r2, r0
  4012f4:	400b      	ands	r3, r1
  4012f6:	4610      	mov	r0, r2
  4012f8:	4619      	mov	r1, r3
  4012fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  4012fe:	4042      	eors	r2, r0
  401300:	404b      	eors	r3, r1
  401302:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
  401306:	e9d6 230e 	ldrd	r2, r3, [r6, #56]	; 0x38
  40130a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  40130e:	1880      	adds	r0, r0, r2
  401310:	4159      	adcs	r1, r3
  401312:	4602      	mov	r2, r0
  401314:	460b      	mov	r3, r1
  401316:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
  40131a:	1880      	adds	r0, r0, r2
  40131c:	4159      	adcs	r1, r3
  40131e:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  401322:	2f00      	cmp	r7, #0
  401324:	f001 82ac 	beq.w	402880 <.LCFI3+0x54>

00401328 <.LBB499>:
  401328:	e9dd 0100 	ldrd	r0, r1, [sp]
  40132c:	0843      	lsrs	r3, r0, #1
  40132e:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
  401332:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
  401336:	084b      	lsrs	r3, r1, #1
  401338:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
  40133c:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c

00401340 <.LBB501>:
  401340:	0a03      	lsrs	r3, r0, #8
  401342:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  401346:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
  40134a:	0a0b      	lsrs	r3, r1, #8
  40134c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  401350:	f8cd 3414 	str.w	r3, [sp, #1044]	; 0x414

00401354 <.LBE501>:
  401354:	f50d 6381 	add.w	r3, sp, #1032	; 0x408
  401358:	e9d3 2300 	ldrd	r2, r3, [r3]
  40135c:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
  401360:	e9d1 0100 	ldrd	r0, r1, [r1]
  401364:	4042      	eors	r2, r0
  401366:	404b      	eors	r3, r1
  401368:	9900      	ldr	r1, [sp, #0]
  40136a:	09c9      	lsrs	r1, r1, #7
  40136c:	9801      	ldr	r0, [sp, #4]
  40136e:	ea41 6140 	orr.w	r1, r1, r0, lsl #25
  401372:	914c      	str	r1, [sp, #304]	; 0x130
  401374:	09c1      	lsrs	r1, r0, #7
  401376:	914d      	str	r1, [sp, #308]	; 0x134
  401378:	a94c      	add	r1, sp, #304	; 0x130
  40137a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40137e:	4050      	eors	r0, r2
  401380:	4059      	eors	r1, r3
  401382:	4602      	mov	r2, r0
  401384:	460b      	mov	r3, r1
  401386:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40138a:	1880      	adds	r0, r0, r2
  40138c:	4159      	adcs	r1, r3
  40138e:	4602      	mov	r2, r0
  401390:	460b      	mov	r3, r1
  401392:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
  401396:	1880      	adds	r0, r0, r2
  401398:	4159      	adcs	r1, r3
  40139a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40

0040139e <.LBB503>:
  40139e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4013a2:	0cd1      	lsrs	r1, r2, #19
  4013a4:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
  4013a8:	f8cd 1418 	str.w	r1, [sp, #1048]	; 0x418
  4013ac:	0cd9      	lsrs	r1, r3, #19
  4013ae:	ea41 3142 	orr.w	r1, r1, r2, lsl #13
  4013b2:	f8cd 141c 	str.w	r1, [sp, #1052]	; 0x41c

004013b6 <.LBB505>:
  4013b6:	00d9      	lsls	r1, r3, #3
  4013b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
  4013bc:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
  4013c0:	00d1      	lsls	r1, r2, #3
  4013c2:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
  4013c6:	f8cd 1420 	str.w	r1, [sp, #1056]	; 0x420

004013ca <.LBE505>:
  4013ca:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
  4013ce:	e9d3 0100 	ldrd	r0, r1, [r3]
  4013d2:	f50d 6384 	add.w	r3, sp, #1056	; 0x420
  4013d6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4013da:	4050      	eors	r0, r2
  4013dc:	4059      	eors	r1, r3
  4013de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4013e0:	099b      	lsrs	r3, r3, #6
  4013e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4013e4:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
  4013e8:	934e      	str	r3, [sp, #312]	; 0x138
  4013ea:	0993      	lsrs	r3, r2, #6
  4013ec:	934f      	str	r3, [sp, #316]	; 0x13c
  4013ee:	ab4e      	add	r3, sp, #312	; 0x138
  4013f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4013f4:	4042      	eors	r2, r0
  4013f6:	404b      	eors	r3, r1
  4013f8:	4610      	mov	r0, r2
  4013fa:	4619      	mov	r1, r3
  4013fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  401400:	1812      	adds	r2, r2, r0
  401402:	414b      	adcs	r3, r1
  401404:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  401408:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  40140c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  401410:	1812      	adds	r2, r2, r0
  401412:	414b      	adcs	r3, r1
  401414:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  401418:	1880      	adds	r0, r0, r2
  40141a:	4159      	adcs	r1, r3
  40141c:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  401420:	1902      	adds	r2, r0, r4
  401422:	eb41 0305 	adc.w	r3, r1, r5
  401426:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60

0040142a <.LBB507>:
  40142a:	ea4f 7318 	mov.w	r3, r8, lsr #28
  40142e:	ea43 1309 	orr.w	r3, r3, r9, lsl #4
  401432:	f8cd 3428 	str.w	r3, [sp, #1064]	; 0x428
  401436:	ea4f 7319 	mov.w	r3, r9, lsr #28
  40143a:	ea43 1308 	orr.w	r3, r3, r8, lsl #4
  40143e:	f8cd 342c 	str.w	r3, [sp, #1068]	; 0x42c

00401442 <.LBB509>:
  401442:	ea4f 7389 	mov.w	r3, r9, lsl #30
  401446:	ea43 0398 	orr.w	r3, r3, r8, lsr #2
  40144a:	f8cd 3434 	str.w	r3, [sp, #1076]	; 0x434
  40144e:	ea4f 7388 	mov.w	r3, r8, lsl #30
  401452:	ea43 0399 	orr.w	r3, r3, r9, lsr #2
  401456:	f8cd 3430 	str.w	r3, [sp, #1072]	; 0x430

0040145a <.LBE509>:
  40145a:	f50d 6385 	add.w	r3, sp, #1064	; 0x428
  40145e:	e9d3 1200 	ldrd	r1, r2, [r3]
  401462:	f50d 6386 	add.w	r3, sp, #1072	; 0x430
  401466:	e9d3 3400 	ldrd	r3, r4, [r3]
  40146a:	4059      	eors	r1, r3
  40146c:	4062      	eors	r2, r4
  40146e:	4613      	mov	r3, r2
  401470:	460a      	mov	r2, r1

00401472 <.LBB511>:
  401472:	ea4f 6149 	mov.w	r1, r9, lsl #25
  401476:	ea41 11d8 	orr.w	r1, r1, r8, lsr #7
  40147a:	f8cd 143c 	str.w	r1, [sp, #1084]	; 0x43c
  40147e:	ea4f 6148 	mov.w	r1, r8, lsl #25
  401482:	ea41 11d9 	orr.w	r1, r1, r9, lsr #7
  401486:	f8cd 1438 	str.w	r1, [sp, #1080]	; 0x438

0040148a <.LBE511>:
  40148a:	f50d 6187 	add.w	r1, sp, #1080	; 0x438
  40148e:	e9d1 0100 	ldrd	r0, r1, [r1]
  401492:	4050      	eors	r0, r2
  401494:	4059      	eors	r1, r3
  401496:	4602      	mov	r2, r0
  401498:	460b      	mov	r3, r1
  40149a:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
  40149e:	ea44 0008 	orr.w	r0, r4, r8
  4014a2:	ea45 0109 	orr.w	r1, r5, r9
  4014a6:	ea00 000a 	and.w	r0, r0, sl
  4014aa:	ea01 010b 	and.w	r1, r1, fp
  4014ae:	ea04 0408 	and.w	r4, r4, r8
  4014b2:	ea05 0509 	and.w	r5, r5, r9
  4014b6:	4320      	orrs	r0, r4
  4014b8:	4329      	orrs	r1, r5
  4014ba:	1880      	adds	r0, r0, r2
  4014bc:	4159      	adcs	r1, r3
  4014be:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
  4014c2:	181b      	adds	r3, r3, r0
  4014c4:	414c      	adcs	r4, r1
  4014c6:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68

004014ca <.LBB513>:
  4014ca:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
  4014ce:	0ba3      	lsrs	r3, r4, #14
  4014d0:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
  4014d4:	f8cd 3440 	str.w	r3, [sp, #1088]	; 0x440
  4014d8:	0bab      	lsrs	r3, r5, #14
  4014da:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
  4014de:	f8cd 3444 	str.w	r3, [sp, #1092]	; 0x444

004014e2 <.LBB515>:
  4014e2:	0ca3      	lsrs	r3, r4, #18
  4014e4:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
  4014e8:	f8cd 3448 	str.w	r3, [sp, #1096]	; 0x448
  4014ec:	0cab      	lsrs	r3, r5, #18
  4014ee:	ea43 3384 	orr.w	r3, r3, r4, lsl #14
  4014f2:	f8cd 344c 	str.w	r3, [sp, #1100]	; 0x44c

004014f6 <.LBE515>:
        R( 8); R( 9); R(10); R(11);
  4014f6:	f50d 6388 	add.w	r3, sp, #1088	; 0x440
  4014fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4014fe:	f50d 6189 	add.w	r1, sp, #1096	; 0x448
  401502:	e9d1 0100 	ldrd	r0, r1, [r1]
  401506:	4042      	eors	r2, r0
  401508:	404b      	eors	r3, r1

0040150a <.LBB517>:
  40150a:	05e9      	lsls	r1, r5, #23
  40150c:	ea41 2154 	orr.w	r1, r1, r4, lsr #9
  401510:	f8cd 1454 	str.w	r1, [sp, #1108]	; 0x454
  401514:	05e1      	lsls	r1, r4, #23
  401516:	ea41 2155 	orr.w	r1, r1, r5, lsr #9
  40151a:	f8cd 1450 	str.w	r1, [sp, #1104]	; 0x450

0040151e <.LBE517>:
  40151e:	f50d 618a 	add.w	r1, sp, #1104	; 0x450
  401522:	e9d1 0100 	ldrd	r0, r1, [r1]
  401526:	4050      	eors	r0, r2
  401528:	4059      	eors	r1, r3
  40152a:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  40152e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
  401532:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
  401536:	404b      	eors	r3, r1
  401538:	4054      	eors	r4, r2
  40153a:	4625      	mov	r5, r4
  40153c:	461c      	mov	r4, r3
  40153e:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  401542:	4022      	ands	r2, r4
  401544:	402b      	ands	r3, r5
  401546:	4614      	mov	r4, r2
  401548:	461d      	mov	r5, r3
  40154a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40154e:	4062      	eors	r2, r4
  401550:	406b      	eors	r3, r5
  401552:	4614      	mov	r4, r2
  401554:	461d      	mov	r5, r3
  401556:	e9d6 2310 	ldrd	r2, r3, [r6, #64]	; 0x40
  40155a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40155e:	1880      	adds	r0, r0, r2
  401560:	4159      	adcs	r1, r3
  401562:	1820      	adds	r0, r4, r0
  401564:	eb45 0101 	adc.w	r1, r5, r1
  401568:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40156c:	2f00      	cmp	r7, #0
  40156e:	f001 818d 	beq.w	40288c <.LCFI3+0x60>

00401572 <.LBB519>:
  401572:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
  401576:	0863      	lsrs	r3, r4, #1
  401578:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
  40157c:	f8cd 3458 	str.w	r3, [sp, #1112]	; 0x458
  401580:	086b      	lsrs	r3, r5, #1
  401582:	ea43 73c4 	orr.w	r3, r3, r4, lsl #31
  401586:	f8cd 345c 	str.w	r3, [sp, #1116]	; 0x45c

0040158a <.LBB521>:
  40158a:	0a23      	lsrs	r3, r4, #8
  40158c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  401590:	f8cd 3460 	str.w	r3, [sp, #1120]	; 0x460
  401594:	0a2b      	lsrs	r3, r5, #8
  401596:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  40159a:	f8cd 3464 	str.w	r3, [sp, #1124]	; 0x464

0040159e <.LBE521>:
  40159e:	f50d 638b 	add.w	r3, sp, #1112	; 0x458
  4015a2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4015a6:	f50d 618c 	add.w	r1, sp, #1120	; 0x460
  4015aa:	e9d1 0100 	ldrd	r0, r1, [r1]
  4015ae:	4042      	eors	r2, r0
  4015b0:	404b      	eors	r3, r1
  4015b2:	09e1      	lsrs	r1, r4, #7
  4015b4:	ea41 6145 	orr.w	r1, r1, r5, lsl #25
  4015b8:	9150      	str	r1, [sp, #320]	; 0x140
  4015ba:	09e9      	lsrs	r1, r5, #7
  4015bc:	9151      	str	r1, [sp, #324]	; 0x144
  4015be:	a950      	add	r1, sp, #320	; 0x140
  4015c0:	e9d1 0100 	ldrd	r0, r1, [r1]
  4015c4:	4050      	eors	r0, r2
  4015c6:	4059      	eors	r1, r3
  4015c8:	4602      	mov	r2, r0
  4015ca:	460b      	mov	r3, r1
  4015cc:	e9dd 0100 	ldrd	r0, r1, [sp]
  4015d0:	1880      	adds	r0, r0, r2
  4015d2:	4159      	adcs	r1, r3
  4015d4:	4602      	mov	r2, r0
  4015d6:	460b      	mov	r3, r1
  4015d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4015dc:	1880      	adds	r0, r0, r2
  4015de:	4159      	adcs	r1, r3
  4015e0:	e9cd 0100 	strd	r0, r1, [sp]

004015e4 <.LBB523>:
  4015e4:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
  4015e8:	0ce1      	lsrs	r1, r4, #19
  4015ea:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
  4015ee:	f8cd 1468 	str.w	r1, [sp, #1128]	; 0x468
  4015f2:	0ce9      	lsrs	r1, r5, #19
  4015f4:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
  4015f8:	f8cd 146c 	str.w	r1, [sp, #1132]	; 0x46c

004015fc <.LBB525>:
  4015fc:	00e9      	lsls	r1, r5, #3
  4015fe:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
  401602:	f8cd 1474 	str.w	r1, [sp, #1140]	; 0x474
  401606:	00e1      	lsls	r1, r4, #3
  401608:	ea41 7155 	orr.w	r1, r1, r5, lsr #29
  40160c:	f8cd 1470 	str.w	r1, [sp, #1136]	; 0x470

00401610 <.LBE525>:
  401610:	f50d 638d 	add.w	r3, sp, #1128	; 0x468
  401614:	e9d3 0100 	ldrd	r0, r1, [r3]
  401618:	f50d 638e 	add.w	r3, sp, #1136	; 0x470
  40161c:	e9d3 2300 	ldrd	r2, r3, [r3]
  401620:	4050      	eors	r0, r2
  401622:	4059      	eors	r1, r3
  401624:	09a4      	lsrs	r4, r4, #6
  401626:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  401628:	ea44 6485 	orr.w	r4, r4, r5, lsl #26
  40162c:	9452      	str	r4, [sp, #328]	; 0x148
  40162e:	09ac      	lsrs	r4, r5, #6
  401630:	9453      	str	r4, [sp, #332]	; 0x14c
  401632:	ab52      	add	r3, sp, #328	; 0x148
  401634:	e9d3 4500 	ldrd	r4, r5, [r3]
  401638:	4044      	eors	r4, r0
  40163a:	404d      	eors	r5, r1
  40163c:	4620      	mov	r0, r4
  40163e:	e9dd 3400 	ldrd	r3, r4, [sp]
  401642:	181b      	adds	r3, r3, r0
  401644:	416c      	adcs	r4, r5
  401646:	e9cd 3400 	strd	r3, r4, [sp]
  40164a:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  40164e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  401652:	1912      	adds	r2, r2, r4
  401654:	416b      	adcs	r3, r5
  401656:	4614      	mov	r4, r2
  401658:	461d      	mov	r5, r3
  40165a:	e9dd 2300 	ldrd	r2, r3, [sp]
  40165e:	1912      	adds	r2, r2, r4
  401660:	416b      	adcs	r3, r5
  401662:	461c      	mov	r4, r3
  401664:	4613      	mov	r3, r2
  401666:	e9cd 3406 	strd	r3, r4, [sp, #24]
  40166a:	eb12 020a 	adds.w	r2, r2, sl
  40166e:	eb44 030b 	adc.w	r3, r4, fp
  401672:	4692      	mov	sl, r2
  401674:	469b      	mov	fp, r3

00401676 <.LBB527>:
  401676:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
  40167a:	0f23      	lsrs	r3, r4, #28
  40167c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  401680:	f8cd 3478 	str.w	r3, [sp, #1144]	; 0x478
  401684:	0f2b      	lsrs	r3, r5, #28
  401686:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  40168a:	f8cd 347c 	str.w	r3, [sp, #1148]	; 0x47c

0040168e <.LBB529>:
  40168e:	07ab      	lsls	r3, r5, #30
  401690:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  401694:	f8cd 3484 	str.w	r3, [sp, #1156]	; 0x484
  401698:	07a3      	lsls	r3, r4, #30
  40169a:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  40169e:	f8cd 3480 	str.w	r3, [sp, #1152]	; 0x480

004016a2 <.LBE529>:
  4016a2:	f50d 638f 	add.w	r3, sp, #1144	; 0x478
  4016a6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4016aa:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
  4016ae:	e9d1 0100 	ldrd	r0, r1, [r1]
  4016b2:	4042      	eors	r2, r0
  4016b4:	404b      	eors	r3, r1

004016b6 <.LBB531>:
  4016b6:	0669      	lsls	r1, r5, #25
  4016b8:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  4016bc:	f8cd 148c 	str.w	r1, [sp, #1164]	; 0x48c
  4016c0:	0661      	lsls	r1, r4, #25
  4016c2:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  4016c6:	f8cd 1488 	str.w	r1, [sp, #1160]	; 0x488

004016ca <.LBE531>:
  4016ca:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
  4016ce:	e9d1 0100 	ldrd	r0, r1, [r1]
  4016d2:	4050      	eors	r0, r2
  4016d4:	4059      	eors	r1, r3
  4016d6:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  4016da:	ea44 0008 	orr.w	r0, r4, r8
  4016de:	ea45 0109 	orr.w	r1, r5, r9
  4016e2:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  4016e6:	4002      	ands	r2, r0
  4016e8:	400b      	ands	r3, r1
  4016ea:	ea04 0408 	and.w	r4, r4, r8
  4016ee:	ea05 0509 	and.w	r5, r5, r9
  4016f2:	4314      	orrs	r4, r2
  4016f4:	431d      	orrs	r5, r3
  4016f6:	4620      	mov	r0, r4
  4016f8:	4629      	mov	r1, r5
  4016fa:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  4016fe:	1824      	adds	r4, r4, r0
  401700:	414d      	adcs	r5, r1
  401702:	4620      	mov	r0, r4
  401704:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
  401708:	181b      	adds	r3, r3, r0
  40170a:	416c      	adcs	r4, r5
  40170c:	e9cd 3406 	strd	r3, r4, [sp, #24]

00401710 <.LBB533>:
  401710:	ea4f 339a 	mov.w	r3, sl, lsr #14
  401714:	ea43 438b 	orr.w	r3, r3, fp, lsl #18
  401718:	f8cd 3490 	str.w	r3, [sp, #1168]	; 0x490
  40171c:	ea4f 339b 	mov.w	r3, fp, lsr #14
  401720:	ea43 438a 	orr.w	r3, r3, sl, lsl #18
  401724:	f8cd 3494 	str.w	r3, [sp, #1172]	; 0x494

00401728 <.LBB535>:
  401728:	ea4f 439a 	mov.w	r3, sl, lsr #18
  40172c:	ea43 338b 	orr.w	r3, r3, fp, lsl #14
  401730:	f8cd 3498 	str.w	r3, [sp, #1176]	; 0x498
  401734:	ea4f 439b 	mov.w	r3, fp, lsr #18
  401738:	ea43 338a 	orr.w	r3, r3, sl, lsl #14
  40173c:	f8cd 349c 	str.w	r3, [sp, #1180]	; 0x49c

00401740 <.LBE535>:
  401740:	f50d 6392 	add.w	r3, sp, #1168	; 0x490
  401744:	e9d3 2300 	ldrd	r2, r3, [r3]
  401748:	f50d 6193 	add.w	r1, sp, #1176	; 0x498
  40174c:	e9d1 0100 	ldrd	r0, r1, [r1]
  401750:	4042      	eors	r2, r0
  401752:	404b      	eors	r3, r1

00401754 <.LBB537>:
  401754:	ea4f 51cb 	mov.w	r1, fp, lsl #23
  401758:	ea41 215a 	orr.w	r1, r1, sl, lsr #9
  40175c:	f8cd 14a4 	str.w	r1, [sp, #1188]	; 0x4a4
  401760:	ea4f 51ca 	mov.w	r1, sl, lsl #23
  401764:	ea41 215b 	orr.w	r1, r1, fp, lsr #9
  401768:	f8cd 14a0 	str.w	r1, [sp, #1184]	; 0x4a0

0040176c <.LBE537>:
  40176c:	f50d 6194 	add.w	r1, sp, #1184	; 0x4a0
  401770:	e9d1 0100 	ldrd	r0, r1, [r1]
  401774:	4050      	eors	r0, r2
  401776:	4059      	eors	r1, r3
  401778:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  40177c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401780:	4614      	mov	r4, r2
  401782:	461d      	mov	r5, r3
  401784:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
  401788:	4044      	eors	r4, r0
  40178a:	404d      	eors	r5, r1
  40178c:	ea04 040a 	and.w	r4, r4, sl
  401790:	ea05 050b 	and.w	r5, r5, fp
  401794:	4062      	eors	r2, r4
  401796:	406b      	eors	r3, r5
  401798:	4614      	mov	r4, r2
  40179a:	461d      	mov	r5, r3
  40179c:	e9d6 2312 	ldrd	r2, r3, [r6, #72]	; 0x48
  4017a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4017a4:	1880      	adds	r0, r0, r2
  4017a6:	4159      	adcs	r1, r3
  4017a8:	1820      	adds	r0, r4, r0
  4017aa:	eb45 0101 	adc.w	r1, r5, r1
  4017ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4017b2:	2f00      	cmp	r7, #0
  4017b4:	f001 8070 	beq.w	402898 <.LCFI3+0x6c>

004017b8 <.LBB539>:
  4017b8:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
  4017bc:	0863      	lsrs	r3, r4, #1
  4017be:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
  4017c2:	f8cd 34a8 	str.w	r3, [sp, #1192]	; 0x4a8
  4017c6:	086b      	lsrs	r3, r5, #1
  4017c8:	ea43 73c4 	orr.w	r3, r3, r4, lsl #31
  4017cc:	f8cd 34ac 	str.w	r3, [sp, #1196]	; 0x4ac

004017d0 <.LBB541>:
  4017d0:	0a23      	lsrs	r3, r4, #8
  4017d2:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  4017d6:	f8cd 34b0 	str.w	r3, [sp, #1200]	; 0x4b0
  4017da:	0a2b      	lsrs	r3, r5, #8
  4017dc:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  4017e0:	f8cd 34b4 	str.w	r3, [sp, #1204]	; 0x4b4

004017e4 <.LBE541>:
  4017e4:	f50d 6395 	add.w	r3, sp, #1192	; 0x4a8
  4017e8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4017ec:	f50d 6196 	add.w	r1, sp, #1200	; 0x4b0
  4017f0:	e9d1 0100 	ldrd	r0, r1, [r1]
  4017f4:	4042      	eors	r2, r0
  4017f6:	404b      	eors	r3, r1
  4017f8:	09e1      	lsrs	r1, r4, #7
  4017fa:	ea41 6145 	orr.w	r1, r1, r5, lsl #25
  4017fe:	9154      	str	r1, [sp, #336]	; 0x150
  401800:	09e9      	lsrs	r1, r5, #7
  401802:	9155      	str	r1, [sp, #340]	; 0x154
  401804:	a954      	add	r1, sp, #336	; 0x150
  401806:	e9d1 0100 	ldrd	r0, r1, [r1]
  40180a:	4050      	eors	r0, r2
  40180c:	4059      	eors	r1, r3
  40180e:	4602      	mov	r2, r0
  401810:	460b      	mov	r3, r1
  401812:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  401816:	1880      	adds	r0, r0, r2
  401818:	4159      	adcs	r1, r3
  40181a:	4602      	mov	r2, r0
  40181c:	460b      	mov	r3, r1
  40181e:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
  401822:	1880      	adds	r0, r0, r2
  401824:	4159      	adcs	r1, r3
  401826:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48

0040182a <.LBB543>:
  40182a:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
  40182e:	0ce1      	lsrs	r1, r4, #19
  401830:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
  401834:	f8cd 14b8 	str.w	r1, [sp, #1208]	; 0x4b8
  401838:	0ce9      	lsrs	r1, r5, #19
  40183a:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
  40183e:	f8cd 14bc 	str.w	r1, [sp, #1212]	; 0x4bc

00401842 <.LBB545>:
  401842:	00e9      	lsls	r1, r5, #3
  401844:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
  401848:	f8cd 14c4 	str.w	r1, [sp, #1220]	; 0x4c4
  40184c:	00e1      	lsls	r1, r4, #3
  40184e:	ea41 7155 	orr.w	r1, r1, r5, lsr #29
  401852:	f8cd 14c0 	str.w	r1, [sp, #1216]	; 0x4c0

00401856 <.LBE545>:
  401856:	f50d 6397 	add.w	r3, sp, #1208	; 0x4b8
  40185a:	e9d3 0100 	ldrd	r0, r1, [r3]
  40185e:	f50d 6398 	add.w	r3, sp, #1216	; 0x4c0
  401862:	e9d3 2300 	ldrd	r2, r3, [r3]
  401866:	4050      	eors	r0, r2
  401868:	4059      	eors	r1, r3
  40186a:	09a4      	lsrs	r4, r4, #6
  40186c:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40186e:	ea44 6485 	orr.w	r4, r4, r5, lsl #26
  401872:	9456      	str	r4, [sp, #344]	; 0x158
  401874:	09ac      	lsrs	r4, r5, #6
  401876:	9457      	str	r4, [sp, #348]	; 0x15c
  401878:	ab56      	add	r3, sp, #344	; 0x158
  40187a:	e9d3 4500 	ldrd	r4, r5, [r3]
  40187e:	4044      	eors	r4, r0
  401880:	404d      	eors	r5, r1
  401882:	4620      	mov	r0, r4
  401884:	e9dd 3412 	ldrd	r3, r4, [sp, #72]	; 0x48
  401888:	181b      	adds	r3, r3, r0
  40188a:	416c      	adcs	r4, r5
  40188c:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
  401890:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  401894:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  401898:	1912      	adds	r2, r2, r4
  40189a:	416b      	adcs	r3, r5
  40189c:	4614      	mov	r4, r2
  40189e:	461d      	mov	r5, r3
  4018a0:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  4018a4:	1912      	adds	r2, r2, r4
  4018a6:	416b      	adcs	r3, r5
  4018a8:	4610      	mov	r0, r2
  4018aa:	4619      	mov	r1, r3
  4018ac:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  4018b0:	e9cd 012a 	strd	r0, r1, [sp, #168]	; 0xa8
  4018b4:	1880      	adds	r0, r0, r2
  4018b6:	4159      	adcs	r1, r3
  4018b8:	4602      	mov	r2, r0
  4018ba:	460b      	mov	r3, r1
  4018bc:	e9cd 2304 	strd	r2, r3, [sp, #16]

004018c0 <.LBB547>:
  4018c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4018c4:	0f03      	lsrs	r3, r0, #28
  4018c6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  4018ca:	f8cd 34c8 	str.w	r3, [sp, #1224]	; 0x4c8
  4018ce:	0f0b      	lsrs	r3, r1, #28
  4018d0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  4018d4:	f8cd 34cc 	str.w	r3, [sp, #1228]	; 0x4cc

004018d8 <.LBB549>:
  4018d8:	078b      	lsls	r3, r1, #30
  4018da:	ea43 0390 	orr.w	r3, r3, r0, lsr #2
  4018de:	f8cd 34d4 	str.w	r3, [sp, #1236]	; 0x4d4
  4018e2:	0783      	lsls	r3, r0, #30
  4018e4:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  4018e8:	f8cd 34d0 	str.w	r3, [sp, #1232]	; 0x4d0

004018ec <.LBE549>:
  4018ec:	f50d 6399 	add.w	r3, sp, #1224	; 0x4c8
  4018f0:	e9d3 3400 	ldrd	r3, r4, [r3]
  4018f4:	f50d 629a 	add.w	r2, sp, #1232	; 0x4d0
  4018f8:	e9d2 1200 	ldrd	r1, r2, [r2]
  4018fc:	404b      	eors	r3, r1
  4018fe:	4054      	eors	r4, r2
  401900:	461a      	mov	r2, r3
  401902:	4623      	mov	r3, r4

00401904 <.LBB551>:
  401904:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
  401908:	0669      	lsls	r1, r5, #25
  40190a:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  40190e:	f8cd 14dc 	str.w	r1, [sp, #1244]	; 0x4dc
  401912:	0661      	lsls	r1, r4, #25
  401914:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  401918:	f8cd 14d8 	str.w	r1, [sp, #1240]	; 0x4d8

0040191c <.LBE551>:
  40191c:	f50d 619b 	add.w	r1, sp, #1240	; 0x4d8
  401920:	e9d1 0100 	ldrd	r0, r1, [r1]
  401924:	4050      	eors	r0, r2
  401926:	4059      	eors	r1, r3
  401928:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  40192c:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  401930:	4322      	orrs	r2, r4
  401932:	432b      	orrs	r3, r5
  401934:	ea02 0208 	and.w	r2, r2, r8
  401938:	ea03 0309 	and.w	r3, r3, r9
  40193c:	e9cd 232e 	strd	r2, r3, [sp, #184]	; 0xb8
  401940:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
  401944:	4623      	mov	r3, r4
  401946:	4019      	ands	r1, r3
  401948:	402a      	ands	r2, r5
  40194a:	4608      	mov	r0, r1
  40194c:	e9dd 452e 	ldrd	r4, r5, [sp, #184]	; 0xb8
  401950:	4304      	orrs	r4, r0
  401952:	4315      	orrs	r5, r2
  401954:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
  401958:	1912      	adds	r2, r2, r4
  40195a:	416b      	adcs	r3, r5
  40195c:	4619      	mov	r1, r3
  40195e:	e9dd 342a 	ldrd	r3, r4, [sp, #168]	; 0xa8
  401962:	189b      	adds	r3, r3, r2
  401964:	414c      	adcs	r4, r1
  401966:	e9cd 342a 	strd	r3, r4, [sp, #168]	; 0xa8

0040196a <.LBB553>:
  40196a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  40196e:	0ba3      	lsrs	r3, r4, #14
  401970:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
  401974:	f8cd 34e0 	str.w	r3, [sp, #1248]	; 0x4e0
  401978:	0bab      	lsrs	r3, r5, #14
  40197a:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
  40197e:	f8cd 34e4 	str.w	r3, [sp, #1252]	; 0x4e4

00401982 <.LBB555>:
  401982:	0ca3      	lsrs	r3, r4, #18
  401984:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
  401988:	f8cd 34e8 	str.w	r3, [sp, #1256]	; 0x4e8
  40198c:	0cab      	lsrs	r3, r5, #18
  40198e:	ea43 3384 	orr.w	r3, r3, r4, lsl #14
  401992:	f8cd 34ec 	str.w	r3, [sp, #1260]	; 0x4ec

00401996 <.LBE555>:
  401996:	f50d 639c 	add.w	r3, sp, #1248	; 0x4e0
  40199a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40199e:	f50d 619d 	add.w	r1, sp, #1256	; 0x4e8
  4019a2:	e9d1 0100 	ldrd	r0, r1, [r1]
  4019a6:	4042      	eors	r2, r0
  4019a8:	404b      	eors	r3, r1

004019aa <.LBB557>:
  4019aa:	05e9      	lsls	r1, r5, #23
  4019ac:	ea41 2154 	orr.w	r1, r1, r4, lsr #9
  4019b0:	f8cd 14f4 	str.w	r1, [sp, #1268]	; 0x4f4
  4019b4:	05e1      	lsls	r1, r4, #23
  4019b6:	ea41 2155 	orr.w	r1, r1, r5, lsr #9
  4019ba:	f8cd 14f0 	str.w	r1, [sp, #1264]	; 0x4f0

004019be <.LBE557>:
  4019be:	f50d 619e 	add.w	r1, sp, #1264	; 0x4f0
  4019c2:	e9d1 0100 	ldrd	r0, r1, [r1]
  4019c6:	4050      	eors	r0, r2
  4019c8:	4059      	eors	r1, r3
  4019ca:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  4019ce:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
  4019d2:	ea80 030a 	eor.w	r3, r0, sl
  4019d6:	ea81 040b 	eor.w	r4, r1, fp
  4019da:	4625      	mov	r5, r4
  4019dc:	461c      	mov	r4, r3
  4019de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4019e2:	4022      	ands	r2, r4
  4019e4:	402b      	ands	r3, r5
  4019e6:	4614      	mov	r4, r2
  4019e8:	461d      	mov	r5, r3
  4019ea:	4602      	mov	r2, r0
  4019ec:	460b      	mov	r3, r1
  4019ee:	4062      	eors	r2, r4
  4019f0:	406b      	eors	r3, r5
  4019f2:	4614      	mov	r4, r2
  4019f4:	461d      	mov	r5, r3
  4019f6:	e9d6 2314 	ldrd	r2, r3, [r6, #80]	; 0x50
  4019fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4019fe:	1880      	adds	r0, r0, r2
  401a00:	4159      	adcs	r1, r3
  401a02:	1820      	adds	r0, r4, r0
  401a04:	eb45 0101 	adc.w	r1, r5, r1
  401a08:	e9cd 0102 	strd	r0, r1, [sp, #8]
  401a0c:	2f00      	cmp	r7, #0
  401a0e:	f000 8749 	beq.w	4028a4 <.LCFI3+0x78>

00401a12 <.LBB559>:
  401a12:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
  401a16:	0863      	lsrs	r3, r4, #1
  401a18:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
  401a1c:	f8cd 34f8 	str.w	r3, [sp, #1272]	; 0x4f8
  401a20:	086b      	lsrs	r3, r5, #1
  401a22:	ea43 73c4 	orr.w	r3, r3, r4, lsl #31
  401a26:	f8cd 34fc 	str.w	r3, [sp, #1276]	; 0x4fc

00401a2a <.LBB561>:
  401a2a:	0a23      	lsrs	r3, r4, #8
  401a2c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  401a30:	f8cd 3500 	str.w	r3, [sp, #1280]	; 0x500
  401a34:	0a2b      	lsrs	r3, r5, #8
  401a36:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  401a3a:	f8cd 3504 	str.w	r3, [sp, #1284]	; 0x504

00401a3e <.LBE561>:
  401a3e:	f50d 639f 	add.w	r3, sp, #1272	; 0x4f8
  401a42:	e9d3 2300 	ldrd	r2, r3, [r3]
  401a46:	f50d 61a0 	add.w	r1, sp, #1280	; 0x500
  401a4a:	e9d1 0100 	ldrd	r0, r1, [r1]
  401a4e:	4042      	eors	r2, r0
  401a50:	404b      	eors	r3, r1
  401a52:	09e1      	lsrs	r1, r4, #7
  401a54:	ea41 6145 	orr.w	r1, r1, r5, lsl #25
  401a58:	9158      	str	r1, [sp, #352]	; 0x160
  401a5a:	09e9      	lsrs	r1, r5, #7
  401a5c:	9159      	str	r1, [sp, #356]	; 0x164
  401a5e:	a958      	add	r1, sp, #352	; 0x160
  401a60:	e9d1 0100 	ldrd	r0, r1, [r1]
  401a64:	4050      	eors	r0, r2
  401a66:	4059      	eors	r1, r3
  401a68:	4602      	mov	r2, r0
  401a6a:	460b      	mov	r3, r1
  401a6c:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
  401a70:	1880      	adds	r0, r0, r2
  401a72:	4159      	adcs	r1, r3
  401a74:	4602      	mov	r2, r0
  401a76:	460b      	mov	r3, r1
  401a78:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  401a7c:	1880      	adds	r0, r0, r2
  401a7e:	4159      	adcs	r1, r3
  401a80:	e9cd 0124 	strd	r0, r1, [sp, #144]	; 0x90

00401a84 <.LBB563>:
  401a84:	e9dd 4500 	ldrd	r4, r5, [sp]
  401a88:	0ce1      	lsrs	r1, r4, #19
  401a8a:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
  401a8e:	f8cd 1508 	str.w	r1, [sp, #1288]	; 0x508
  401a92:	0ce9      	lsrs	r1, r5, #19
  401a94:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
  401a98:	f8cd 150c 	str.w	r1, [sp, #1292]	; 0x50c

00401a9c <.LBB565>:
  401a9c:	00e9      	lsls	r1, r5, #3
  401a9e:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
  401aa2:	f8cd 1514 	str.w	r1, [sp, #1300]	; 0x514
  401aa6:	00e1      	lsls	r1, r4, #3
  401aa8:	ea41 7155 	orr.w	r1, r1, r5, lsr #29
  401aac:	f8cd 1510 	str.w	r1, [sp, #1296]	; 0x510

00401ab0 <.LBE565>:
  401ab0:	f50d 63a1 	add.w	r3, sp, #1288	; 0x508
  401ab4:	e9d3 0100 	ldrd	r0, r1, [r3]
  401ab8:	f50d 63a2 	add.w	r3, sp, #1296	; 0x510
  401abc:	e9d3 2300 	ldrd	r2, r3, [r3]
  401ac0:	4050      	eors	r0, r2
  401ac2:	4059      	eors	r1, r3
  401ac4:	09a4      	lsrs	r4, r4, #6
  401ac6:	9d01      	ldr	r5, [sp, #4]
  401ac8:	ea44 6485 	orr.w	r4, r4, r5, lsl #26
  401acc:	945a      	str	r4, [sp, #360]	; 0x168
  401ace:	09ac      	lsrs	r4, r5, #6
  401ad0:	945b      	str	r4, [sp, #364]	; 0x16c
  401ad2:	ab5a      	add	r3, sp, #360	; 0x168
  401ad4:	e9d3 4500 	ldrd	r4, r5, [r3]
  401ad8:	4044      	eors	r4, r0
  401ada:	404d      	eors	r5, r1
  401adc:	4620      	mov	r0, r4
  401ade:	e9dd 3424 	ldrd	r3, r4, [sp, #144]	; 0x90
  401ae2:	181b      	adds	r3, r3, r0
  401ae4:	416c      	adcs	r4, r5
  401ae6:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
  401aea:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  401aee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401af2:	1912      	adds	r2, r2, r4
  401af4:	416b      	adcs	r3, r5
  401af6:	4614      	mov	r4, r2
  401af8:	461d      	mov	r5, r3
  401afa:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
  401afe:	1912      	adds	r2, r2, r4
  401b00:	416b      	adcs	r3, r5
  401b02:	461c      	mov	r4, r3
  401b04:	4613      	mov	r3, r2
  401b06:	e9cd 3402 	strd	r3, r4, [sp, #8]
  401b0a:	eb12 0208 	adds.w	r2, r2, r8
  401b0e:	eb44 0309 	adc.w	r3, r4, r9
  401b12:	4690      	mov	r8, r2
  401b14:	4699      	mov	r9, r3

00401b16 <.LBB567>:
  401b16:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
  401b1a:	0f23      	lsrs	r3, r4, #28
  401b1c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  401b20:	f8cd 3518 	str.w	r3, [sp, #1304]	; 0x518
  401b24:	0f2b      	lsrs	r3, r5, #28
  401b26:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  401b2a:	f8cd 351c 	str.w	r3, [sp, #1308]	; 0x51c

00401b2e <.LBB569>:
  401b2e:	07ab      	lsls	r3, r5, #30
  401b30:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  401b34:	f8cd 3524 	str.w	r3, [sp, #1316]	; 0x524
  401b38:	07a3      	lsls	r3, r4, #30
  401b3a:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  401b3e:	f8cd 3520 	str.w	r3, [sp, #1312]	; 0x520

00401b42 <.LBE569>:
  401b42:	f50d 63a3 	add.w	r3, sp, #1304	; 0x518
  401b46:	e9d3 2300 	ldrd	r2, r3, [r3]
  401b4a:	f50d 61a4 	add.w	r1, sp, #1312	; 0x520
  401b4e:	e9d1 0100 	ldrd	r0, r1, [r1]
  401b52:	4042      	eors	r2, r0
  401b54:	404b      	eors	r3, r1

00401b56 <.LBB571>:
  401b56:	0669      	lsls	r1, r5, #25
  401b58:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  401b5c:	f8cd 152c 	str.w	r1, [sp, #1324]	; 0x52c
  401b60:	0661      	lsls	r1, r4, #25
  401b62:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  401b66:	f8cd 1528 	str.w	r1, [sp, #1320]	; 0x528

00401b6a <.LBE571>:
  401b6a:	f50d 61a5 	add.w	r1, sp, #1320	; 0x528
  401b6e:	e9d1 0100 	ldrd	r0, r1, [r1]
  401b72:	4050      	eors	r0, r2
  401b74:	4059      	eors	r1, r3
  401b76:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  401b7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  401b7e:	4322      	orrs	r2, r4
  401b80:	432b      	orrs	r3, r5
  401b82:	4610      	mov	r0, r2
  401b84:	4619      	mov	r1, r3
  401b86:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  401b8a:	4002      	ands	r2, r0
  401b8c:	400b      	ands	r3, r1
  401b8e:	4610      	mov	r0, r2
  401b90:	4619      	mov	r1, r3
  401b92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  401b96:	4022      	ands	r2, r4
  401b98:	402b      	ands	r3, r5
  401b9a:	4302      	orrs	r2, r0
  401b9c:	430b      	orrs	r3, r1
  401b9e:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  401ba2:	18a4      	adds	r4, r4, r2
  401ba4:	415d      	adcs	r5, r3
  401ba6:	4620      	mov	r0, r4
  401ba8:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
  401bac:	181b      	adds	r3, r3, r0
  401bae:	416c      	adcs	r4, r5
  401bb0:	e9cd 3402 	strd	r3, r4, [sp, #8]

00401bb4 <.LBB573>:
  401bb4:	ea4f 3398 	mov.w	r3, r8, lsr #14
  401bb8:	ea43 4389 	orr.w	r3, r3, r9, lsl #18
  401bbc:	f8cd 3530 	str.w	r3, [sp, #1328]	; 0x530
  401bc0:	ea4f 3399 	mov.w	r3, r9, lsr #14
  401bc4:	ea43 4388 	orr.w	r3, r3, r8, lsl #18
  401bc8:	f8cd 3534 	str.w	r3, [sp, #1332]	; 0x534

00401bcc <.LBB575>:
  401bcc:	ea4f 4398 	mov.w	r3, r8, lsr #18
  401bd0:	ea43 3389 	orr.w	r3, r3, r9, lsl #14
  401bd4:	f8cd 3538 	str.w	r3, [sp, #1336]	; 0x538
  401bd8:	ea4f 4399 	mov.w	r3, r9, lsr #18
  401bdc:	ea43 3388 	orr.w	r3, r3, r8, lsl #14
  401be0:	f8cd 353c 	str.w	r3, [sp, #1340]	; 0x53c

00401be4 <.LBE575>:
  401be4:	f50d 63a6 	add.w	r3, sp, #1328	; 0x530
  401be8:	e9d3 2300 	ldrd	r2, r3, [r3]
  401bec:	f50d 61a7 	add.w	r1, sp, #1336	; 0x538
  401bf0:	e9d1 0100 	ldrd	r0, r1, [r1]
  401bf4:	4042      	eors	r2, r0
  401bf6:	404b      	eors	r3, r1

00401bf8 <.LBB577>:
  401bf8:	ea4f 51c9 	mov.w	r1, r9, lsl #23
  401bfc:	ea41 2158 	orr.w	r1, r1, r8, lsr #9
  401c00:	f8cd 1544 	str.w	r1, [sp, #1348]	; 0x544
  401c04:	ea4f 51c8 	mov.w	r1, r8, lsl #23
  401c08:	ea41 2159 	orr.w	r1, r1, r9, lsr #9
  401c0c:	f8cd 1540 	str.w	r1, [sp, #1344]	; 0x540

00401c10 <.LBE577>:
  401c10:	f50d 61a8 	add.w	r1, sp, #1344	; 0x540
  401c14:	e9d1 0100 	ldrd	r0, r1, [r1]
  401c18:	4050      	eors	r0, r2
  401c1a:	4059      	eors	r1, r3
  401c1c:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  401c20:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  401c24:	ea84 040a 	eor.w	r4, r4, sl
  401c28:	ea85 050b 	eor.w	r5, r5, fp
  401c2c:	ea04 0408 	and.w	r4, r4, r8
  401c30:	ea05 0509 	and.w	r5, r5, r9
  401c34:	ea84 040a 	eor.w	r4, r4, sl
  401c38:	ea85 050b 	eor.w	r5, r5, fp
  401c3c:	e9d6 2316 	ldrd	r2, r3, [r6, #88]	; 0x58
  401c40:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
  401c44:	1880      	adds	r0, r0, r2
  401c46:	4159      	adcs	r1, r3
  401c48:	1820      	adds	r0, r4, r0
  401c4a:	eb45 0101 	adc.w	r1, r5, r1
  401c4e:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  401c52:	2f00      	cmp	r7, #0
  401c54:	f000 862c 	beq.w	4028b0 <.LCFI3+0x84>

00401c58 <.LBB579>:
  401c58:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  401c5c:	0863      	lsrs	r3, r4, #1
  401c5e:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
  401c62:	f8cd 3548 	str.w	r3, [sp, #1352]	; 0x548
  401c66:	086b      	lsrs	r3, r5, #1
  401c68:	ea43 73c4 	orr.w	r3, r3, r4, lsl #31
  401c6c:	f8cd 354c 	str.w	r3, [sp, #1356]	; 0x54c

00401c70 <.LBB581>:
  401c70:	0a23      	lsrs	r3, r4, #8
  401c72:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  401c76:	f8cd 3550 	str.w	r3, [sp, #1360]	; 0x550
  401c7a:	0a2b      	lsrs	r3, r5, #8
  401c7c:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  401c80:	f8cd 3554 	str.w	r3, [sp, #1364]	; 0x554

00401c84 <.LBE581>:
  401c84:	f50d 63a9 	add.w	r3, sp, #1352	; 0x548
  401c88:	e9d3 2300 	ldrd	r2, r3, [r3]
  401c8c:	f50d 61aa 	add.w	r1, sp, #1360	; 0x550
  401c90:	e9d1 0100 	ldrd	r0, r1, [r1]
  401c94:	4042      	eors	r2, r0
  401c96:	404b      	eors	r3, r1
  401c98:	09e1      	lsrs	r1, r4, #7
  401c9a:	ea41 6145 	orr.w	r1, r1, r5, lsl #25
  401c9e:	915c      	str	r1, [sp, #368]	; 0x170
  401ca0:	09e9      	lsrs	r1, r5, #7
  401ca2:	915d      	str	r1, [sp, #372]	; 0x174
  401ca4:	a95c      	add	r1, sp, #368	; 0x170
  401ca6:	e9d1 0100 	ldrd	r0, r1, [r1]
  401caa:	4050      	eors	r0, r2
  401cac:	4059      	eors	r1, r3
  401cae:	4602      	mov	r2, r0
  401cb0:	460b      	mov	r3, r1
  401cb2:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
  401cb6:	1880      	adds	r0, r0, r2
  401cb8:	4159      	adcs	r1, r3
  401cba:	4602      	mov	r2, r0
  401cbc:	460b      	mov	r3, r1
  401cbe:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
  401cc2:	1880      	adds	r0, r0, r2
  401cc4:	4159      	adcs	r1, r3
  401cc6:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50

00401cca <.LBB583>:
  401cca:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
  401cce:	0ce1      	lsrs	r1, r4, #19
  401cd0:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
  401cd4:	f8cd 1558 	str.w	r1, [sp, #1368]	; 0x558
  401cd8:	0ce9      	lsrs	r1, r5, #19
  401cda:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
  401cde:	f8cd 155c 	str.w	r1, [sp, #1372]	; 0x55c

00401ce2 <.LBB585>:
  401ce2:	00e9      	lsls	r1, r5, #3
  401ce4:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
  401ce8:	f8cd 1564 	str.w	r1, [sp, #1380]	; 0x564
  401cec:	00e1      	lsls	r1, r4, #3
  401cee:	ea41 7155 	orr.w	r1, r1, r5, lsr #29
  401cf2:	f8cd 1560 	str.w	r1, [sp, #1376]	; 0x560

00401cf6 <.LBE585>:
  401cf6:	f50d 63ab 	add.w	r3, sp, #1368	; 0x558
  401cfa:	e9d3 0100 	ldrd	r0, r1, [r3]
  401cfe:	f50d 63ac 	add.w	r3, sp, #1376	; 0x560
  401d02:	e9d3 2300 	ldrd	r2, r3, [r3]
  401d06:	4050      	eors	r0, r2
  401d08:	4059      	eors	r1, r3
  401d0a:	09a4      	lsrs	r4, r4, #6
  401d0c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  401d0e:	ea44 6485 	orr.w	r4, r4, r5, lsl #26
  401d12:	945e      	str	r4, [sp, #376]	; 0x178
  401d14:	09ac      	lsrs	r4, r5, #6
  401d16:	945f      	str	r4, [sp, #380]	; 0x17c
  401d18:	ab5e      	add	r3, sp, #376	; 0x178
  401d1a:	e9d3 4500 	ldrd	r4, r5, [r3]
  401d1e:	4044      	eors	r4, r0
  401d20:	404d      	eors	r5, r1
  401d22:	4620      	mov	r0, r4
  401d24:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
  401d28:	181b      	adds	r3, r3, r0
  401d2a:	416c      	adcs	r4, r5
  401d2c:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
  401d30:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  401d34:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  401d38:	1912      	adds	r2, r2, r4
  401d3a:	416b      	adcs	r3, r5
  401d3c:	4614      	mov	r4, r2
  401d3e:	461d      	mov	r5, r3
  401d40:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
  401d44:	1912      	adds	r2, r2, r4
  401d46:	416b      	adcs	r3, r5
  401d48:	4610      	mov	r0, r2
  401d4a:	4619      	mov	r1, r3
  401d4c:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  401d50:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  401d54:	1880      	adds	r0, r0, r2
  401d56:	4159      	adcs	r1, r3
  401d58:	4602      	mov	r2, r0
  401d5a:	460b      	mov	r3, r1
  401d5c:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68

00401d60 <.LBB587>:
  401d60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  401d64:	0f03      	lsrs	r3, r0, #28
  401d66:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  401d6a:	f8cd 3568 	str.w	r3, [sp, #1384]	; 0x568
  401d6e:	0f0b      	lsrs	r3, r1, #28
  401d70:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  401d74:	f8cd 356c 	str.w	r3, [sp, #1388]	; 0x56c

00401d78 <.LBB589>:
  401d78:	078b      	lsls	r3, r1, #30
  401d7a:	ea43 0390 	orr.w	r3, r3, r0, lsr #2
  401d7e:	f8cd 3574 	str.w	r3, [sp, #1396]	; 0x574
  401d82:	0783      	lsls	r3, r0, #30
  401d84:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  401d88:	f8cd 3570 	str.w	r3, [sp, #1392]	; 0x570

00401d8c <.LBE589>:
  401d8c:	f50d 63ad 	add.w	r3, sp, #1384	; 0x568
  401d90:	e9d3 3400 	ldrd	r3, r4, [r3]
  401d94:	f50d 62ae 	add.w	r2, sp, #1392	; 0x570
  401d98:	e9d2 1200 	ldrd	r1, r2, [r2]
  401d9c:	404b      	eors	r3, r1
  401d9e:	4054      	eors	r4, r2
  401da0:	461a      	mov	r2, r3
  401da2:	4623      	mov	r3, r4

00401da4 <.LBB591>:
  401da4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  401da8:	0669      	lsls	r1, r5, #25
  401daa:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  401dae:	f8cd 157c 	str.w	r1, [sp, #1404]	; 0x57c
  401db2:	0661      	lsls	r1, r4, #25
  401db4:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  401db8:	f8cd 1578 	str.w	r1, [sp, #1400]	; 0x578

00401dbc <.LBE591>:
  401dbc:	f50d 61af 	add.w	r1, sp, #1400	; 0x578
  401dc0:	e9d1 0100 	ldrd	r0, r1, [r1]
  401dc4:	4050      	eors	r0, r2
  401dc6:	4059      	eors	r1, r3
  401dc8:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  401dcc:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  401dd0:	4322      	orrs	r2, r4
  401dd2:	432b      	orrs	r3, r5
  401dd4:	4619      	mov	r1, r3
  401dd6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
  401dda:	4013      	ands	r3, r2
  401ddc:	400c      	ands	r4, r1
  401dde:	e9cd 342e 	strd	r3, r4, [sp, #184]	; 0xb8
  401de2:	e9dd 122a 	ldrd	r1, r2, [sp, #168]	; 0xa8
  401de6:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
  401dea:	4019      	ands	r1, r3
  401dec:	4022      	ands	r2, r4
  401dee:	4608      	mov	r0, r1
  401df0:	e9dd 452e 	ldrd	r4, r5, [sp, #184]	; 0xb8
  401df4:	4304      	orrs	r4, r0
  401df6:	4315      	orrs	r5, r2
  401df8:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
  401dfc:	1912      	adds	r2, r2, r4
  401dfe:	416b      	adcs	r3, r5
  401e00:	4619      	mov	r1, r3
  401e02:	e9dd 3418 	ldrd	r3, r4, [sp, #96]	; 0x60
  401e06:	189b      	adds	r3, r3, r2
  401e08:	414c      	adcs	r4, r1
  401e0a:	e9cd 342c 	strd	r3, r4, [sp, #176]	; 0xb0

00401e0e <.LBB593>:
  401e0e:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
  401e12:	0ba3      	lsrs	r3, r4, #14
  401e14:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
  401e18:	f8cd 3580 	str.w	r3, [sp, #1408]	; 0x580
  401e1c:	0bab      	lsrs	r3, r5, #14
  401e1e:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
  401e22:	f8cd 3584 	str.w	r3, [sp, #1412]	; 0x584

00401e26 <.LBB595>:
  401e26:	0ca3      	lsrs	r3, r4, #18
  401e28:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
  401e2c:	f8cd 3588 	str.w	r3, [sp, #1416]	; 0x588
  401e30:	0cab      	lsrs	r3, r5, #18
  401e32:	ea43 3384 	orr.w	r3, r3, r4, lsl #14
  401e36:	f8cd 358c 	str.w	r3, [sp, #1420]	; 0x58c

00401e3a <.LBE595>:
        R(12); R(13); R(14); R(15);
  401e3a:	f50d 63b0 	add.w	r3, sp, #1408	; 0x580
  401e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
  401e42:	f50d 61b1 	add.w	r1, sp, #1416	; 0x588
  401e46:	e9d1 0100 	ldrd	r0, r1, [r1]
  401e4a:	4042      	eors	r2, r0
  401e4c:	404b      	eors	r3, r1

00401e4e <.LBB597>:
  401e4e:	05e9      	lsls	r1, r5, #23
  401e50:	ea41 2154 	orr.w	r1, r1, r4, lsr #9
  401e54:	f8cd 1594 	str.w	r1, [sp, #1428]	; 0x594
  401e58:	05e1      	lsls	r1, r4, #23
  401e5a:	ea41 2155 	orr.w	r1, r1, r5, lsr #9
  401e5e:	f8cd 1590 	str.w	r1, [sp, #1424]	; 0x590

00401e62 <.LBE597>:
  401e62:	f50d 61b2 	add.w	r1, sp, #1424	; 0x590
  401e66:	e9d1 0100 	ldrd	r0, r1, [r1]
  401e6a:	4050      	eors	r0, r2
  401e6c:	4059      	eors	r1, r3
  401e6e:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  401e72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  401e76:	ea80 0308 	eor.w	r3, r0, r8
  401e7a:	ea81 0409 	eor.w	r4, r1, r9
  401e7e:	4625      	mov	r5, r4
  401e80:	461c      	mov	r4, r3
  401e82:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  401e86:	4022      	ands	r2, r4
  401e88:	402b      	ands	r3, r5
  401e8a:	4614      	mov	r4, r2
  401e8c:	461d      	mov	r5, r3
  401e8e:	4602      	mov	r2, r0
  401e90:	460b      	mov	r3, r1
  401e92:	4062      	eors	r2, r4
  401e94:	406b      	eors	r3, r5
  401e96:	4614      	mov	r4, r2
  401e98:	461d      	mov	r5, r3
  401e9a:	e9d6 2318 	ldrd	r2, r3, [r6, #96]	; 0x60
  401e9e:	eb12 020a 	adds.w	r2, r2, sl
  401ea2:	eb43 030b 	adc.w	r3, r3, fp
  401ea6:	18a4      	adds	r4, r4, r2
  401ea8:	415d      	adcs	r5, r3
  401eaa:	2f00      	cmp	r7, #0
  401eac:	f000 8506 	beq.w	4028bc <.LCFI3+0x90>

00401eb0 <.LBB599>:
  401eb0:	e9dd ab26 	ldrd	sl, fp, [sp, #152]	; 0x98
  401eb4:	4653      	mov	r3, sl
  401eb6:	085b      	lsrs	r3, r3, #1
  401eb8:	465a      	mov	r2, fp
  401eba:	ea43 73cb 	orr.w	r3, r3, fp, lsl #31
  401ebe:	f8cd 3598 	str.w	r3, [sp, #1432]	; 0x598
  401ec2:	0853      	lsrs	r3, r2, #1
  401ec4:	4652      	mov	r2, sl
  401ec6:	ea43 73ca 	orr.w	r3, r3, sl, lsl #31
  401eca:	f8cd 359c 	str.w	r3, [sp, #1436]	; 0x59c

00401ece <.LBB601>:
  401ece:	0a13      	lsrs	r3, r2, #8
  401ed0:	465a      	mov	r2, fp
  401ed2:	ea43 630b 	orr.w	r3, r3, fp, lsl #24
  401ed6:	f8cd 35a0 	str.w	r3, [sp, #1440]	; 0x5a0
  401eda:	0a13      	lsrs	r3, r2, #8
  401edc:	ea43 630a 	orr.w	r3, r3, sl, lsl #24
  401ee0:	f8cd 35a4 	str.w	r3, [sp, #1444]	; 0x5a4

00401ee4 <.LBE601>:
  401ee4:	f50d 63b3 	add.w	r3, sp, #1432	; 0x598
  401ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
  401eec:	f50d 61b4 	add.w	r1, sp, #1440	; 0x5a0
  401ef0:	e9d1 0100 	ldrd	r0, r1, [r1]
  401ef4:	4042      	eors	r2, r0
  401ef6:	404b      	eors	r3, r1
  401ef8:	4651      	mov	r1, sl
  401efa:	09c9      	lsrs	r1, r1, #7
  401efc:	4658      	mov	r0, fp
  401efe:	ea41 614b 	orr.w	r1, r1, fp, lsl #25
  401f02:	9160      	str	r1, [sp, #384]	; 0x180
  401f04:	09c1      	lsrs	r1, r0, #7
  401f06:	9161      	str	r1, [sp, #388]	; 0x184
  401f08:	a960      	add	r1, sp, #384	; 0x180
  401f0a:	e9d1 0100 	ldrd	r0, r1, [r1]
  401f0e:	4050      	eors	r0, r2
  401f10:	4059      	eors	r1, r3
  401f12:	4602      	mov	r2, r0
  401f14:	460b      	mov	r3, r1
  401f16:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  401f1a:	1880      	adds	r0, r0, r2
  401f1c:	4159      	adcs	r1, r3
  401f1e:	4602      	mov	r2, r0
  401f20:	460b      	mov	r3, r1
  401f22:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  401f26:	1880      	adds	r0, r0, r2
  401f28:	4159      	adcs	r1, r3
  401f2a:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58

00401f2e <.LBB603>:
  401f2e:	e9dd ab24 	ldrd	sl, fp, [sp, #144]	; 0x90
  401f32:	4651      	mov	r1, sl
  401f34:	0cc9      	lsrs	r1, r1, #19
  401f36:	4658      	mov	r0, fp
  401f38:	ea41 314b 	orr.w	r1, r1, fp, lsl #13
  401f3c:	f8cd 15a8 	str.w	r1, [sp, #1448]	; 0x5a8
  401f40:	0cc1      	lsrs	r1, r0, #19
  401f42:	4650      	mov	r0, sl
  401f44:	ea41 314a 	orr.w	r1, r1, sl, lsl #13
  401f48:	f8cd 15ac 	str.w	r1, [sp, #1452]	; 0x5ac

00401f4c <.LBB605>:
  401f4c:	4659      	mov	r1, fp
  401f4e:	00c9      	lsls	r1, r1, #3
  401f50:	ea41 715a 	orr.w	r1, r1, sl, lsr #29
  401f54:	f8cd 15b4 	str.w	r1, [sp, #1460]	; 0x5b4
  401f58:	00c1      	lsls	r1, r0, #3
  401f5a:	ea41 715b 	orr.w	r1, r1, fp, lsr #29
  401f5e:	f8cd 15b0 	str.w	r1, [sp, #1456]	; 0x5b0

00401f62 <.LBE605>:
  401f62:	f50d 63b5 	add.w	r3, sp, #1448	; 0x5a8
  401f66:	e9d3 0100 	ldrd	r0, r1, [r3]
  401f6a:	f50d 63b6 	add.w	r3, sp, #1456	; 0x5b0
  401f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
  401f72:	4050      	eors	r0, r2
  401f74:	4059      	eors	r1, r3
  401f76:	4653      	mov	r3, sl
  401f78:	099b      	lsrs	r3, r3, #6
  401f7a:	465a      	mov	r2, fp
  401f7c:	ea43 638b 	orr.w	r3, r3, fp, lsl #26
  401f80:	9362      	str	r3, [sp, #392]	; 0x188
  401f82:	0993      	lsrs	r3, r2, #6
  401f84:	9363      	str	r3, [sp, #396]	; 0x18c
  401f86:	ab62      	add	r3, sp, #392	; 0x188
  401f88:	e9d3 2300 	ldrd	r2, r3, [r3]
  401f8c:	4042      	eors	r2, r0
  401f8e:	404b      	eors	r3, r1
  401f90:	4610      	mov	r0, r2
  401f92:	4619      	mov	r1, r3
  401f94:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  401f98:	1812      	adds	r2, r2, r0
  401f9a:	414b      	adcs	r3, r1
  401f9c:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  401fa0:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  401fa4:	1912      	adds	r2, r2, r4
  401fa6:	416b      	adcs	r3, r5
  401fa8:	e9dd ab16 	ldrd	sl, fp, [sp, #88]	; 0x58
  401fac:	eb1a 0a02 	adds.w	sl, sl, r2
  401fb0:	eb4b 0b03 	adc.w	fp, fp, r3
  401fb4:	4651      	mov	r1, sl
  401fb6:	465a      	mov	r2, fp
  401fb8:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
  401fbc:	e9cd 1218 	strd	r1, r2, [sp, #96]	; 0x60
  401fc0:	eb1a 0103 	adds.w	r1, sl, r3
  401fc4:	eb4b 0204 	adc.w	r2, fp, r4
  401fc8:	460b      	mov	r3, r1
  401fca:	4614      	mov	r4, r2
  401fcc:	e9cd 3406 	strd	r3, r4, [sp, #24]

00401fd0 <.LBB607>:
  401fd0:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  401fd4:	0f23      	lsrs	r3, r4, #28
  401fd6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  401fda:	f8cd 35b8 	str.w	r3, [sp, #1464]	; 0x5b8
  401fde:	0f2b      	lsrs	r3, r5, #28
  401fe0:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  401fe4:	f8cd 35bc 	str.w	r3, [sp, #1468]	; 0x5bc

00401fe8 <.LBB609>:
  401fe8:	07ab      	lsls	r3, r5, #30
  401fea:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  401fee:	f8cd 35c4 	str.w	r3, [sp, #1476]	; 0x5c4
  401ff2:	07a3      	lsls	r3, r4, #30
  401ff4:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  401ff8:	f8cd 35c0 	str.w	r3, [sp, #1472]	; 0x5c0

00401ffc <.LBE609>:
  401ffc:	f50d 63b7 	add.w	r3, sp, #1464	; 0x5b8
  402000:	e9d3 2300 	ldrd	r2, r3, [r3]
  402004:	f50d 61b8 	add.w	r1, sp, #1472	; 0x5c0
  402008:	e9d1 ab00 	ldrd	sl, fp, [r1]
  40200c:	ea82 020a 	eor.w	r2, r2, sl
  402010:	ea83 030b 	eor.w	r3, r3, fp

00402014 <.LBB611>:
  402014:	0669      	lsls	r1, r5, #25
  402016:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  40201a:	f8cd 15cc 	str.w	r1, [sp, #1484]	; 0x5cc
  40201e:	0661      	lsls	r1, r4, #25
  402020:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  402024:	f8cd 15c8 	str.w	r1, [sp, #1480]	; 0x5c8

00402028 <.LBE611>:
  402028:	f50d 61b9 	add.w	r1, sp, #1480	; 0x5c8
  40202c:	e9d1 0100 	ldrd	r0, r1, [r1]
  402030:	4050      	eors	r0, r2
  402032:	4059      	eors	r1, r3
  402034:	e9cd 012e 	strd	r0, r1, [sp, #184]	; 0xb8
  402038:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40203c:	4610      	mov	r0, r2
  40203e:	4619      	mov	r1, r3
  402040:	4320      	orrs	r0, r4
  402042:	4329      	orrs	r1, r5
  402044:	e9dd ab2a 	ldrd	sl, fp, [sp, #168]	; 0xa8
  402048:	ea0a 0a00 	and.w	sl, sl, r0
  40204c:	ea0b 0b01 	and.w	fp, fp, r1
  402050:	4650      	mov	r0, sl
  402052:	4659      	mov	r1, fp
  402054:	4022      	ands	r2, r4
  402056:	402b      	ands	r3, r5
  402058:	4310      	orrs	r0, r2
  40205a:	4319      	orrs	r1, r3
  40205c:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
  402060:	181b      	adds	r3, r3, r0
  402062:	414c      	adcs	r4, r1
  402064:	e9dd ab18 	ldrd	sl, fp, [sp, #96]	; 0x60
  402068:	eb1a 0a03 	adds.w	sl, sl, r3
  40206c:	eb4b 0b04 	adc.w	fp, fp, r4

00402070 <.LBB613>:
  402070:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  402074:	0b83      	lsrs	r3, r0, #14
  402076:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  40207a:	f8cd 35d0 	str.w	r3, [sp, #1488]	; 0x5d0
  40207e:	0b8b      	lsrs	r3, r1, #14
  402080:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
  402084:	f8cd 35d4 	str.w	r3, [sp, #1492]	; 0x5d4

00402088 <.LBB615>:
  402088:	0c83      	lsrs	r3, r0, #18
  40208a:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
  40208e:	f8cd 35d8 	str.w	r3, [sp, #1496]	; 0x5d8
  402092:	0c8b      	lsrs	r3, r1, #18
  402094:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
  402098:	f8cd 35dc 	str.w	r3, [sp, #1500]	; 0x5dc

0040209c <.LBE615>:
  40209c:	f50d 63ba 	add.w	r3, sp, #1488	; 0x5d0
  4020a0:	e9d3 4500 	ldrd	r4, r5, [r3]
  4020a4:	f50d 63bb 	add.w	r3, sp, #1496	; 0x5d8
  4020a8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4020ac:	4054      	eors	r4, r2
  4020ae:	405d      	eors	r5, r3

004020b0 <.LBB617>:
  4020b0:	05c9      	lsls	r1, r1, #23
  4020b2:	9b06      	ldr	r3, [sp, #24]
  4020b4:	ea41 2353 	orr.w	r3, r1, r3, lsr #9
  4020b8:	f8cd 35e4 	str.w	r3, [sp, #1508]	; 0x5e4
  4020bc:	9b06      	ldr	r3, [sp, #24]
  4020be:	05d9      	lsls	r1, r3, #23
  4020c0:	9b07      	ldr	r3, [sp, #28]
  4020c2:	ea41 2353 	orr.w	r3, r1, r3, lsr #9
  4020c6:	f8cd 35e0 	str.w	r3, [sp, #1504]	; 0x5e0

004020ca <.LBE617>:
  4020ca:	f50d 63bc 	add.w	r3, sp, #1504	; 0x5e0
  4020ce:	e9d3 2300 	ldrd	r2, r3, [r3]
  4020d2:	4062      	eors	r2, r4
  4020d4:	406b      	eors	r3, r5
  4020d6:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  4020da:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  4020de:	ea80 0008 	eor.w	r0, r0, r8
  4020e2:	ea81 0109 	eor.w	r1, r1, r9
  4020e6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
  4020ea:	4003      	ands	r3, r0
  4020ec:	400c      	ands	r4, r1
  4020ee:	ea83 0008 	eor.w	r0, r3, r8
  4020f2:	ea84 0109 	eor.w	r1, r4, r9
  4020f6:	e9d6 231a 	ldrd	r2, r3, [r6, #104]	; 0x68
  4020fa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  4020fe:	18a4      	adds	r4, r4, r2
  402100:	415d      	adcs	r5, r3
  402102:	1904      	adds	r4, r0, r4
  402104:	eb41 0505 	adc.w	r5, r1, r5
  402108:	e9cd 4504 	strd	r4, r5, [sp, #16]
  40210c:	2f00      	cmp	r7, #0
  40210e:	f000 83db 	beq.w	4028c8 <.LCFI3+0x9c>

00402112 <.LBB619>:
  402112:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
  402116:	0863      	lsrs	r3, r4, #1
  402118:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
  40211c:	f8cd 35e8 	str.w	r3, [sp, #1512]	; 0x5e8
  402120:	086b      	lsrs	r3, r5, #1
  402122:	ea43 73c4 	orr.w	r3, r3, r4, lsl #31
  402126:	f8cd 35ec 	str.w	r3, [sp, #1516]	; 0x5ec

0040212a <.LBB621>:
  40212a:	0a23      	lsrs	r3, r4, #8
  40212c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  402130:	f8cd 35f0 	str.w	r3, [sp, #1520]	; 0x5f0
  402134:	0a2b      	lsrs	r3, r5, #8
  402136:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  40213a:	f8cd 35f4 	str.w	r3, [sp, #1524]	; 0x5f4

0040213e <.LBE621>:
  40213e:	f50d 63bd 	add.w	r3, sp, #1512	; 0x5e8
  402142:	e9d3 2300 	ldrd	r2, r3, [r3]
  402146:	f50d 61be 	add.w	r1, sp, #1520	; 0x5f0
  40214a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40214e:	4042      	eors	r2, r0
  402150:	404b      	eors	r3, r1
  402152:	09e1      	lsrs	r1, r4, #7
  402154:	ea41 6145 	orr.w	r1, r1, r5, lsl #25
  402158:	9164      	str	r1, [sp, #400]	; 0x190
  40215a:	09e9      	lsrs	r1, r5, #7
  40215c:	9165      	str	r1, [sp, #404]	; 0x194
  40215e:	a964      	add	r1, sp, #400	; 0x190
  402160:	e9d1 0100 	ldrd	r0, r1, [r1]
  402164:	4050      	eors	r0, r2
  402166:	4059      	eors	r1, r3
  402168:	4602      	mov	r2, r0
  40216a:	460b      	mov	r3, r1
  40216c:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
  402170:	1880      	adds	r0, r0, r2
  402172:	4159      	adcs	r1, r3
  402174:	4602      	mov	r2, r0
  402176:	460b      	mov	r3, r1
  402178:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40217c:	1880      	adds	r0, r0, r2
  40217e:	4159      	adcs	r1, r3
  402180:	e9cd 0126 	strd	r0, r1, [sp, #152]	; 0x98

00402184 <.LBB623>:
  402184:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
  402188:	0ce1      	lsrs	r1, r4, #19
  40218a:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
  40218e:	f8cd 15f8 	str.w	r1, [sp, #1528]	; 0x5f8
  402192:	0ce9      	lsrs	r1, r5, #19
  402194:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
  402198:	f8cd 15fc 	str.w	r1, [sp, #1532]	; 0x5fc

0040219c <.LBB625>:
  40219c:	00e9      	lsls	r1, r5, #3
  40219e:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
  4021a2:	f8cd 1604 	str.w	r1, [sp, #1540]	; 0x604
  4021a6:	00e1      	lsls	r1, r4, #3
  4021a8:	ea41 7155 	orr.w	r1, r1, r5, lsr #29
  4021ac:	f8cd 1600 	str.w	r1, [sp, #1536]	; 0x600

004021b0 <.LBE625>:
  4021b0:	f50d 63bf 	add.w	r3, sp, #1528	; 0x5f8
  4021b4:	e9d3 0100 	ldrd	r0, r1, [r3]
  4021b8:	f50d 63c0 	add.w	r3, sp, #1536	; 0x600
  4021bc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4021c0:	4050      	eors	r0, r2
  4021c2:	4059      	eors	r1, r3
  4021c4:	09a4      	lsrs	r4, r4, #6
  4021c6:	9d15      	ldr	r5, [sp, #84]	; 0x54
  4021c8:	ea44 6485 	orr.w	r4, r4, r5, lsl #26
  4021cc:	9466      	str	r4, [sp, #408]	; 0x198
  4021ce:	09ac      	lsrs	r4, r5, #6
  4021d0:	9467      	str	r4, [sp, #412]	; 0x19c
  4021d2:	ab66      	add	r3, sp, #408	; 0x198
  4021d4:	e9d3 4500 	ldrd	r4, r5, [r3]
  4021d8:	4044      	eors	r4, r0
  4021da:	404d      	eors	r5, r1
  4021dc:	4620      	mov	r0, r4
  4021de:	e9dd 3426 	ldrd	r3, r4, [sp, #152]	; 0x98
  4021e2:	181b      	adds	r3, r3, r0
  4021e4:	416c      	adcs	r4, r5
  4021e6:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
  4021ea:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  4021ee:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  4021f2:	1912      	adds	r2, r2, r4
  4021f4:	416b      	adcs	r3, r5
  4021f6:	4614      	mov	r4, r2
  4021f8:	461d      	mov	r5, r3
  4021fa:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
  4021fe:	1912      	adds	r2, r2, r4
  402200:	416b      	adcs	r3, r5
  402202:	4610      	mov	r0, r2
  402204:	4619      	mov	r1, r3
  402206:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  40220a:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  40220e:	1880      	adds	r0, r0, r2
  402210:	4159      	adcs	r1, r3
  402212:	4602      	mov	r2, r0
  402214:	460b      	mov	r3, r1
  402216:	e9cd 2304 	strd	r2, r3, [sp, #16]

0040221a <.LBB627>:
  40221a:	ea4f 731a 	mov.w	r3, sl, lsr #28
  40221e:	ea43 130b 	orr.w	r3, r3, fp, lsl #4
  402222:	f8cd 3608 	str.w	r3, [sp, #1544]	; 0x608
  402226:	ea4f 731b 	mov.w	r3, fp, lsr #28
  40222a:	ea43 130a 	orr.w	r3, r3, sl, lsl #4
  40222e:	f8cd 360c 	str.w	r3, [sp, #1548]	; 0x60c

00402232 <.LBB629>:
  402232:	ea4f 738b 	mov.w	r3, fp, lsl #30
  402236:	ea43 039a 	orr.w	r3, r3, sl, lsr #2
  40223a:	f8cd 3614 	str.w	r3, [sp, #1556]	; 0x614
  40223e:	ea4f 738a 	mov.w	r3, sl, lsl #30
  402242:	ea43 039b 	orr.w	r3, r3, fp, lsr #2
  402246:	f8cd 3610 	str.w	r3, [sp, #1552]	; 0x610

0040224a <.LBE629>:
  40224a:	f50d 63c1 	add.w	r3, sp, #1544	; 0x608
  40224e:	e9d3 3400 	ldrd	r3, r4, [r3]
  402252:	f50d 62c2 	add.w	r2, sp, #1552	; 0x610
  402256:	e9d2 1200 	ldrd	r1, r2, [r2]
  40225a:	404b      	eors	r3, r1
  40225c:	4054      	eors	r4, r2
  40225e:	461a      	mov	r2, r3
  402260:	4623      	mov	r3, r4

00402262 <.LBB631>:
  402262:	ea4f 614b 	mov.w	r1, fp, lsl #25
  402266:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
  40226a:	f8cd 161c 	str.w	r1, [sp, #1564]	; 0x61c
  40226e:	ea4f 614a 	mov.w	r1, sl, lsl #25
  402272:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
  402276:	f8cd 1618 	str.w	r1, [sp, #1560]	; 0x618

0040227a <.LBE631>:
  40227a:	f50d 61c3 	add.w	r1, sp, #1560	; 0x618
  40227e:	e9d1 4500 	ldrd	r4, r5, [r1]
  402282:	4054      	eors	r4, r2
  402284:	405d      	eors	r5, r3
  402286:	e9cd 452a 	strd	r4, r5, [sp, #168]	; 0xa8
  40228a:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  40228e:	ea44 000a 	orr.w	r0, r4, sl
  402292:	ea45 010b 	orr.w	r1, r5, fp
  402296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40229a:	4002      	ands	r2, r0
  40229c:	400b      	ands	r3, r1
  40229e:	ea04 040a 	and.w	r4, r4, sl
  4022a2:	ea05 050b 	and.w	r5, r5, fp
  4022a6:	4314      	orrs	r4, r2
  4022a8:	431d      	orrs	r5, r3
  4022aa:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  4022ae:	1912      	adds	r2, r2, r4
  4022b0:	416b      	adcs	r3, r5
  4022b2:	4619      	mov	r1, r3
  4022b4:	e9dd 3418 	ldrd	r3, r4, [sp, #96]	; 0x60
  4022b8:	189b      	adds	r3, r3, r2
  4022ba:	414c      	adcs	r4, r1
  4022bc:	e9cd 342a 	strd	r3, r4, [sp, #168]	; 0xa8

004022c0 <.LBB633>:
  4022c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4022c4:	0b83      	lsrs	r3, r0, #14
  4022c6:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  4022ca:	f8cd 3620 	str.w	r3, [sp, #1568]	; 0x620
  4022ce:	0b8b      	lsrs	r3, r1, #14
  4022d0:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
  4022d4:	f8cd 3624 	str.w	r3, [sp, #1572]	; 0x624

004022d8 <.LBB635>:
  4022d8:	0c83      	lsrs	r3, r0, #18
  4022da:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
  4022de:	f8cd 3628 	str.w	r3, [sp, #1576]	; 0x628
  4022e2:	0c8b      	lsrs	r3, r1, #18
  4022e4:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
  4022e8:	f8cd 362c 	str.w	r3, [sp, #1580]	; 0x62c

004022ec <.LBE635>:
  4022ec:	f50d 63c4 	add.w	r3, sp, #1568	; 0x620
  4022f0:	e9d3 4500 	ldrd	r4, r5, [r3]
  4022f4:	f50d 63c5 	add.w	r3, sp, #1576	; 0x628
  4022f8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4022fc:	4054      	eors	r4, r2
  4022fe:	405d      	eors	r5, r3

00402300 <.LBB637>:
  402300:	05c9      	lsls	r1, r1, #23
  402302:	9b04      	ldr	r3, [sp, #16]
  402304:	ea41 2353 	orr.w	r3, r1, r3, lsr #9
  402308:	f8cd 3634 	str.w	r3, [sp, #1588]	; 0x634
  40230c:	9b04      	ldr	r3, [sp, #16]
  40230e:	05d9      	lsls	r1, r3, #23
  402310:	9b05      	ldr	r3, [sp, #20]
  402312:	ea41 2353 	orr.w	r3, r1, r3, lsr #9
  402316:	f8cd 3630 	str.w	r3, [sp, #1584]	; 0x630

0040231a <.LBE637>:
  40231a:	f50d 63c6 	add.w	r3, sp, #1584	; 0x630
  40231e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402322:	4062      	eors	r2, r4
  402324:	406b      	eors	r3, r5
  402326:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  40232a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  40232e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  402332:	4050      	eors	r0, r2
  402334:	4059      	eors	r1, r3
  402336:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
  40233a:	4003      	ands	r3, r0
  40233c:	400c      	ands	r4, r1
  40233e:	4618      	mov	r0, r3
  402340:	4621      	mov	r1, r4
  402342:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
  402346:	4043      	eors	r3, r0
  402348:	404c      	eors	r4, r1
  40234a:	4618      	mov	r0, r3
  40234c:	e9d6 231c 	ldrd	r2, r3, [r6, #112]	; 0x70
  402350:	eb18 0802 	adds.w	r8, r8, r2
  402354:	eb49 0903 	adc.w	r9, r9, r3
  402358:	eb18 0800 	adds.w	r8, r8, r0
  40235c:	eb49 0904 	adc.w	r9, r9, r4
  402360:	2f00      	cmp	r7, #0
  402362:	f000 82b6 	beq.w	4028d2 <.LCFI3+0xa6>

00402366 <.LBB639>:
  402366:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
  40236a:	0863      	lsrs	r3, r4, #1
  40236c:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
  402370:	f8cd 3638 	str.w	r3, [sp, #1592]	; 0x638
  402374:	086b      	lsrs	r3, r5, #1
  402376:	ea43 73c4 	orr.w	r3, r3, r4, lsl #31
  40237a:	f8cd 363c 	str.w	r3, [sp, #1596]	; 0x63c

0040237e <.LBB641>:
  40237e:	0a23      	lsrs	r3, r4, #8
  402380:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  402384:	f8cd 3640 	str.w	r3, [sp, #1600]	; 0x640
  402388:	0a2b      	lsrs	r3, r5, #8
  40238a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  40238e:	f8cd 3644 	str.w	r3, [sp, #1604]	; 0x644

00402392 <.LBE641>:
  402392:	f50d 63c7 	add.w	r3, sp, #1592	; 0x638
  402396:	e9d3 2300 	ldrd	r2, r3, [r3]
  40239a:	f50d 61c8 	add.w	r1, sp, #1600	; 0x640
  40239e:	e9d1 0100 	ldrd	r0, r1, [r1]
  4023a2:	4042      	eors	r2, r0
  4023a4:	404b      	eors	r3, r1
  4023a6:	09e1      	lsrs	r1, r4, #7
  4023a8:	ea41 6145 	orr.w	r1, r1, r5, lsl #25
  4023ac:	9168      	str	r1, [sp, #416]	; 0x1a0
  4023ae:	09e9      	lsrs	r1, r5, #7
  4023b0:	9169      	str	r1, [sp, #420]	; 0x1a4
  4023b2:	a968      	add	r1, sp, #416	; 0x1a0
  4023b4:	e9d1 0100 	ldrd	r0, r1, [r1]
  4023b8:	4050      	eors	r0, r2
  4023ba:	4059      	eors	r1, r3
  4023bc:	4602      	mov	r2, r0
  4023be:	460b      	mov	r3, r1
  4023c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  4023c4:	1880      	adds	r0, r0, r2
  4023c6:	4159      	adcs	r1, r3
  4023c8:	4602      	mov	r2, r0
  4023ca:	460b      	mov	r3, r1
  4023cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4023d0:	1880      	adds	r0, r0, r2
  4023d2:	4159      	adcs	r1, r3
  4023d4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30

004023d8 <.LBB643>:
  4023d8:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  4023dc:	0ce1      	lsrs	r1, r4, #19
  4023de:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
  4023e2:	f8cd 1648 	str.w	r1, [sp, #1608]	; 0x648
  4023e6:	0ce9      	lsrs	r1, r5, #19
  4023e8:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
  4023ec:	f8cd 164c 	str.w	r1, [sp, #1612]	; 0x64c

004023f0 <.LBB645>:
  4023f0:	00e9      	lsls	r1, r5, #3
  4023f2:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
  4023f6:	f8cd 1654 	str.w	r1, [sp, #1620]	; 0x654
  4023fa:	00e1      	lsls	r1, r4, #3
  4023fc:	ea41 7155 	orr.w	r1, r1, r5, lsr #29
  402400:	f8cd 1650 	str.w	r1, [sp, #1616]	; 0x650

00402404 <.LBE645>:
  402404:	f50d 63c9 	add.w	r3, sp, #1608	; 0x648
  402408:	e9d3 0100 	ldrd	r0, r1, [r3]
  40240c:	f50d 63ca 	add.w	r3, sp, #1616	; 0x650
  402410:	e9d3 2300 	ldrd	r2, r3, [r3]
  402414:	4050      	eors	r0, r2
  402416:	4059      	eors	r1, r3
  402418:	09a4      	lsrs	r4, r4, #6
  40241a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
  40241c:	ea44 6485 	orr.w	r4, r4, r5, lsl #26
  402420:	946a      	str	r4, [sp, #424]	; 0x1a8
  402422:	09ac      	lsrs	r4, r5, #6
  402424:	946b      	str	r4, [sp, #428]	; 0x1ac
  402426:	ab6a      	add	r3, sp, #424	; 0x1a8
  402428:	e9d3 4500 	ldrd	r4, r5, [r3]
  40242c:	4044      	eors	r4, r0
  40242e:	404d      	eors	r5, r1
  402430:	4620      	mov	r0, r4
  402432:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
  402436:	181b      	adds	r3, r3, r0
  402438:	416c      	adcs	r4, r5
  40243a:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
  40243e:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
  402442:	eb14 0408 	adds.w	r4, r4, r8
  402446:	eb45 0509 	adc.w	r5, r5, r9
  40244a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  40244e:	1912      	adds	r2, r2, r4
  402450:	416b      	adcs	r3, r5
  402452:	461c      	mov	r4, r3
  402454:	4613      	mov	r3, r2
  402456:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  40245a:	e9cd 3402 	strd	r3, r4, [sp, #8]
  40245e:	eb12 0208 	adds.w	r2, r2, r8
  402462:	eb44 0309 	adc.w	r3, r4, r9
  402466:	4690      	mov	r8, r2
  402468:	4699      	mov	r9, r3

0040246a <.LBB647>:
  40246a:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
  40246e:	0f23      	lsrs	r3, r4, #28
  402470:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  402474:	f8cd 3658 	str.w	r3, [sp, #1624]	; 0x658
  402478:	0f2b      	lsrs	r3, r5, #28
  40247a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  40247e:	f8cd 365c 	str.w	r3, [sp, #1628]	; 0x65c

00402482 <.LBB649>:
  402482:	07ab      	lsls	r3, r5, #30
  402484:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  402488:	f8cd 3664 	str.w	r3, [sp, #1636]	; 0x664
  40248c:	07a3      	lsls	r3, r4, #30
  40248e:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  402492:	f8cd 3660 	str.w	r3, [sp, #1632]	; 0x660

00402496 <.LBE649>:
  402496:	f50d 63cb 	add.w	r3, sp, #1624	; 0x658
  40249a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40249e:	f50d 61cc 	add.w	r1, sp, #1632	; 0x660
  4024a2:	e9d1 0100 	ldrd	r0, r1, [r1]
  4024a6:	4042      	eors	r2, r0
  4024a8:	404b      	eors	r3, r1

004024aa <.LBB651>:
  4024aa:	0669      	lsls	r1, r5, #25
  4024ac:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  4024b0:	f8cd 166c 	str.w	r1, [sp, #1644]	; 0x66c
  4024b4:	0661      	lsls	r1, r4, #25
  4024b6:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  4024ba:	f8cd 1668 	str.w	r1, [sp, #1640]	; 0x668

004024be <.LBE651>:
  4024be:	f50d 61cd 	add.w	r1, sp, #1640	; 0x668
  4024c2:	e9d1 0100 	ldrd	r0, r1, [r1]
  4024c6:	4050      	eors	r0, r2
  4024c8:	4059      	eors	r1, r3
  4024ca:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  4024ce:	ea44 000a 	orr.w	r0, r4, sl
  4024d2:	ea45 010b 	orr.w	r1, r5, fp
  4024d6:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
  4024da:	4002      	ands	r2, r0
  4024dc:	400b      	ands	r3, r1
  4024de:	ea04 040a 	and.w	r4, r4, sl
  4024e2:	ea05 050b 	and.w	r5, r5, fp
  4024e6:	4314      	orrs	r4, r2
  4024e8:	431d      	orrs	r5, r3
  4024ea:	4620      	mov	r0, r4
  4024ec:	4629      	mov	r1, r5
  4024ee:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
  4024f2:	1824      	adds	r4, r4, r0
  4024f4:	414d      	adcs	r5, r1
  4024f6:	4620      	mov	r0, r4
  4024f8:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
  4024fc:	181b      	adds	r3, r3, r0
  4024fe:	416c      	adcs	r4, r5
  402500:	e9cd 3418 	strd	r3, r4, [sp, #96]	; 0x60

00402504 <.LBB653>:
  402504:	ea4f 3398 	mov.w	r3, r8, lsr #14
  402508:	ea43 4389 	orr.w	r3, r3, r9, lsl #18
  40250c:	f8cd 3670 	str.w	r3, [sp, #1648]	; 0x670
  402510:	ea4f 3399 	mov.w	r3, r9, lsr #14
  402514:	ea43 4388 	orr.w	r3, r3, r8, lsl #18
  402518:	f8cd 3674 	str.w	r3, [sp, #1652]	; 0x674

0040251c <.LBB655>:
  40251c:	ea4f 4398 	mov.w	r3, r8, lsr #18
  402520:	ea43 3389 	orr.w	r3, r3, r9, lsl #14
  402524:	f8cd 3678 	str.w	r3, [sp, #1656]	; 0x678
  402528:	ea4f 4399 	mov.w	r3, r9, lsr #18
  40252c:	ea43 3388 	orr.w	r3, r3, r8, lsl #14
  402530:	f8cd 367c 	str.w	r3, [sp, #1660]	; 0x67c

00402534 <.LBE655>:
  402534:	f50d 63ce 	add.w	r3, sp, #1648	; 0x670
  402538:	e9d3 2300 	ldrd	r2, r3, [r3]
  40253c:	f50d 61cf 	add.w	r1, sp, #1656	; 0x678
  402540:	e9d1 0100 	ldrd	r0, r1, [r1]
  402544:	4042      	eors	r2, r0
  402546:	404b      	eors	r3, r1

00402548 <.LBB657>:
  402548:	ea4f 51c9 	mov.w	r1, r9, lsl #23
  40254c:	ea41 2158 	orr.w	r1, r1, r8, lsr #9
  402550:	f8cd 1684 	str.w	r1, [sp, #1668]	; 0x684
  402554:	ea4f 51c8 	mov.w	r1, r8, lsl #23
  402558:	ea41 2159 	orr.w	r1, r1, r9, lsr #9
  40255c:	f8cd 1680 	str.w	r1, [sp, #1664]	; 0x680

00402560 <.LBE657>:
  402560:	f50d 61d0 	add.w	r1, sp, #1664	; 0x680
  402564:	e9d1 0100 	ldrd	r0, r1, [r1]
  402568:	4050      	eors	r0, r2
  40256a:	4059      	eors	r1, r3
  40256c:	e9cd 012e 	strd	r0, r1, [sp, #184]	; 0xb8
  402570:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  402574:	4602      	mov	r2, r0
  402576:	460b      	mov	r3, r1
  402578:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  40257c:	4062      	eors	r2, r4
  40257e:	406b      	eors	r3, r5
  402580:	ea02 0208 	and.w	r2, r2, r8
  402584:	ea03 0309 	and.w	r3, r3, r9
  402588:	4050      	eors	r0, r2
  40258a:	4059      	eors	r1, r3
  40258c:	4602      	mov	r2, r0
  40258e:	460b      	mov	r3, r1
  402590:	e9d6 011e 	ldrd	r0, r1, [r6, #120]	; 0x78
  402594:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
  402598:	1824      	adds	r4, r4, r0
  40259a:	414d      	adcs	r5, r1
  40259c:	1914      	adds	r4, r2, r4
  40259e:	eb43 0505 	adc.w	r5, r3, r5
  4025a2:	e9cd 4502 	strd	r4, r5, [sp, #8]
  4025a6:	2f00      	cmp	r7, #0
  4025a8:	f000 8198 	beq.w	4028dc <.LCFI3+0xb0>

004025ac <.LBB659>:
  4025ac:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
  4025b0:	0843      	lsrs	r3, r0, #1
  4025b2:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
  4025b6:	f8cd 3688 	str.w	r3, [sp, #1672]	; 0x688
  4025ba:	084b      	lsrs	r3, r1, #1
  4025bc:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
  4025c0:	f8cd 368c 	str.w	r3, [sp, #1676]	; 0x68c

004025c4 <.LBB661>:
  4025c4:	0a03      	lsrs	r3, r0, #8
  4025c6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  4025ca:	f8cd 3690 	str.w	r3, [sp, #1680]	; 0x690
  4025ce:	0a0b      	lsrs	r3, r1, #8
  4025d0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  4025d4:	f8cd 3694 	str.w	r3, [sp, #1684]	; 0x694

004025d8 <.LBE661>:
  4025d8:	f50d 63d1 	add.w	r3, sp, #1672	; 0x688
  4025dc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4025e0:	f50d 64d2 	add.w	r4, sp, #1680	; 0x690
  4025e4:	e9d4 4500 	ldrd	r4, r5, [r4]
  4025e8:	4062      	eors	r2, r4
  4025ea:	406b      	eors	r3, r5
  4025ec:	460d      	mov	r5, r1
  4025ee:	09c1      	lsrs	r1, r0, #7
  4025f0:	ea41 6145 	orr.w	r1, r1, r5, lsl #25
  4025f4:	916c      	str	r1, [sp, #432]	; 0x1b0
  4025f6:	09e9      	lsrs	r1, r5, #7
  4025f8:	916d      	str	r1, [sp, #436]	; 0x1b4
  4025fa:	a96c      	add	r1, sp, #432	; 0x1b0
  4025fc:	e9d1 0100 	ldrd	r0, r1, [r1]
  402600:	4050      	eors	r0, r2
  402602:	4059      	eors	r1, r3
  402604:	4602      	mov	r2, r0
  402606:	460b      	mov	r3, r1
  402608:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
  40260c:	1880      	adds	r0, r0, r2
  40260e:	4159      	adcs	r1, r3
  402610:	4602      	mov	r2, r0
  402612:	460b      	mov	r3, r1
  402614:	e9dd 0100 	ldrd	r0, r1, [sp]
  402618:	1880      	adds	r0, r0, r2
  40261a:	4159      	adcs	r1, r3
  40261c:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68

00402620 <.LBB663>:
  402620:	e9dd 5626 	ldrd	r5, r6, [sp, #152]	; 0x98
  402624:	0ce9      	lsrs	r1, r5, #19
  402626:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
  40262a:	f8cd 1698 	str.w	r1, [sp, #1688]	; 0x698
  40262e:	0cf1      	lsrs	r1, r6, #19
  402630:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
  402634:	f8cd 169c 	str.w	r1, [sp, #1692]	; 0x69c

00402638 <.LBB665>:
  402638:	00f1      	lsls	r1, r6, #3
  40263a:	ea41 7155 	orr.w	r1, r1, r5, lsr #29
  40263e:	f8cd 16a4 	str.w	r1, [sp, #1700]	; 0x6a4
  402642:	00e9      	lsls	r1, r5, #3
  402644:	ea41 7156 	orr.w	r1, r1, r6, lsr #29
  402648:	f8cd 16a0 	str.w	r1, [sp, #1696]	; 0x6a0

0040264c <.LBE665>:
  40264c:	f50d 63d3 	add.w	r3, sp, #1688	; 0x698
  402650:	e9d3 0100 	ldrd	r0, r1, [r3]
  402654:	f50d 63d4 	add.w	r3, sp, #1696	; 0x6a0
  402658:	e9d3 3400 	ldrd	r3, r4, [r3]
  40265c:	4058      	eors	r0, r3
  40265e:	4061      	eors	r1, r4
  402660:	462c      	mov	r4, r5
  402662:	4635      	mov	r5, r6
  402664:	09a6      	lsrs	r6, r4, #6
  402666:	4633      	mov	r3, r6
  402668:	ea43 6685 	orr.w	r6, r3, r5, lsl #26
  40266c:	966e      	str	r6, [sp, #440]	; 0x1b8
  40266e:	09ae      	lsrs	r6, r5, #6
  402670:	966f      	str	r6, [sp, #444]	; 0x1bc
  402672:	ab6e      	add	r3, sp, #440	; 0x1b8
  402674:	e9d3 3400 	ldrd	r3, r4, [r3]
  402678:	4043      	eors	r3, r0
  40267a:	404c      	eors	r4, r1
  40267c:	4618      	mov	r0, r3
  40267e:	4621      	mov	r1, r4
  402680:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
  402684:	181b      	adds	r3, r3, r0
  402686:	414c      	adcs	r4, r1
  402688:	e9cd 3428 	strd	r3, r4, [sp, #160]	; 0xa0
  40268c:	e9dd 452e 	ldrd	r4, r5, [sp, #184]	; 0xb8
  402690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402694:	1912      	adds	r2, r2, r4
  402696:	416b      	adcs	r3, r5
  402698:	4614      	mov	r4, r2
  40269a:	461d      	mov	r5, r3
  40269c:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
  4026a0:	1912      	adds	r2, r2, r4
  4026a2:	416b      	adcs	r3, r5
  4026a4:	4611      	mov	r1, r2
  4026a6:	461a      	mov	r2, r3
  4026a8:	e9dd 342c 	ldrd	r3, r4, [sp, #176]	; 0xb0
  4026ac:	e9cd 121a 	strd	r1, r2, [sp, #104]	; 0x68
  4026b0:	18c9      	adds	r1, r1, r3
  4026b2:	4162      	adcs	r2, r4
  4026b4:	460b      	mov	r3, r1
  4026b6:	4614      	mov	r4, r2
  4026b8:	e9cd 3402 	strd	r3, r4, [sp, #8]

004026bc <.LBB667>:
  4026bc:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
  4026c0:	0f23      	lsrs	r3, r4, #28
  4026c2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  4026c6:	f8cd 36a8 	str.w	r3, [sp, #1704]	; 0x6a8
  4026ca:	0f2b      	lsrs	r3, r5, #28
  4026cc:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  4026d0:	f8cd 36ac 	str.w	r3, [sp, #1708]	; 0x6ac

004026d4 <.LBB669>:
  4026d4:	07ab      	lsls	r3, r5, #30
  4026d6:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  4026da:	f8cd 36b4 	str.w	r3, [sp, #1716]	; 0x6b4
  4026de:	07a3      	lsls	r3, r4, #30
  4026e0:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  4026e4:	f8cd 36b0 	str.w	r3, [sp, #1712]	; 0x6b0

004026e8 <.LBE669>:
  4026e8:	f50d 63d5 	add.w	r3, sp, #1704	; 0x6a8
  4026ec:	e9d3 2300 	ldrd	r2, r3, [r3]
  4026f0:	f50d 61d6 	add.w	r1, sp, #1712	; 0x6b0
  4026f4:	e9d1 0100 	ldrd	r0, r1, [r1]
  4026f8:	4042      	eors	r2, r0
  4026fa:	404b      	eors	r3, r1

004026fc <.LBB671>:
  4026fc:	0669      	lsls	r1, r5, #25
  4026fe:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  402702:	f8cd 16bc 	str.w	r1, [sp, #1724]	; 0x6bc
  402706:	0661      	lsls	r1, r4, #25
  402708:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  40270c:	f8cd 16b8 	str.w	r1, [sp, #1720]	; 0x6b8

00402710 <.LBE671>:
  402710:	f50d 61d7 	add.w	r1, sp, #1720	; 0x6b8
  402714:	e9d1 4500 	ldrd	r4, r5, [r1]
  402718:	4054      	eors	r4, r2
  40271a:	405d      	eors	r5, r3
  40271c:	e9cd 452c 	strd	r4, r5, [sp, #176]	; 0xb0
  402720:	e9dd 562a 	ldrd	r5, r6, [sp, #168]	; 0xa8
  402724:	462a      	mov	r2, r5
  402726:	4633      	mov	r3, r6
  402728:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
  40272c:	4302      	orrs	r2, r0
  40272e:	430b      	orrs	r3, r1
  402730:	ea02 000a 	and.w	r0, r2, sl
  402734:	ea03 010b 	and.w	r1, r3, fp
  402738:	e9dd 3418 	ldrd	r3, r4, [sp, #96]	; 0x60
  40273c:	401d      	ands	r5, r3
  40273e:	4026      	ands	r6, r4
  402740:	4305      	orrs	r5, r0
  402742:	430e      	orrs	r6, r1
  402744:	e9dd 342c 	ldrd	r3, r4, [sp, #176]	; 0xb0
  402748:	195b      	adds	r3, r3, r5
  40274a:	4174      	adcs	r4, r6
  40274c:	4621      	mov	r1, r4
  40274e:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
  402752:	18e4      	adds	r4, r4, r3
  402754:	414d      	adcs	r5, r1
    for (j = 0; j < 80; j += 16) {
  402756:	3710      	adds	r7, #16
  402758:	f10e 0e80 	add.w	lr, lr, #128	; 0x80
  40275c:	2f50      	cmp	r7, #80	; 0x50
  40275e:	f47d adc2 	bne.w	4002e6 <.LBB353>
    }
#endif /* USE_SLOW_SHA2 */

    /* Add the working vars back into digest */

    sha512->digest[0] += a(0);
  402762:	f8dd 06cc 	ldr.w	r0, [sp, #1740]	; 0x6cc
  402766:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
  40276a:	18a4      	adds	r4, r4, r2
  40276c:	415d      	adcs	r5, r3
  40276e:	4622      	mov	r2, r4
  402770:	462b      	mov	r3, r5
  402772:	e9c0 2306 	strd	r2, r3, [r0, #24]
    sha512->digest[1] += b(0);
  402776:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
  40277a:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
  40277e:	18a4      	adds	r4, r4, r2
  402780:	415d      	adcs	r5, r3
  402782:	4622      	mov	r2, r4
  402784:	462b      	mov	r3, r5
  402786:	e9c0 2308 	strd	r2, r3, [r0, #32]
    sha512->digest[2] += c(0);
  40278a:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
  40278e:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
  402792:	18a4      	adds	r4, r4, r2
  402794:	415d      	adcs	r5, r3
  402796:	4622      	mov	r2, r4
  402798:	462b      	mov	r3, r5
  40279a:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
    sha512->digest[3] += d(0);
  40279e:	e9d0 230c 	ldrd	r2, r3, [r0, #48]	; 0x30
  4027a2:	eb12 020a 	adds.w	r2, r2, sl
  4027a6:	eb43 030b 	adc.w	r3, r3, fp
  4027aa:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
    sha512->digest[4] += e(0);
  4027ae:	e9d0 230e 	ldrd	r2, r3, [r0, #56]	; 0x38
  4027b2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  4027b6:	18a4      	adds	r4, r4, r2
  4027b8:	415d      	adcs	r5, r3
  4027ba:	4622      	mov	r2, r4
  4027bc:	462b      	mov	r3, r5
  4027be:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
    sha512->digest[5] += f(0);
  4027c2:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
  4027c6:	eb12 0208 	adds.w	r2, r2, r8
  4027ca:	eb43 0309 	adc.w	r3, r3, r9
  4027ce:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    sha512->digest[6] += g(0);
  4027d2:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
  4027d6:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  4027da:	18a4      	adds	r4, r4, r2
  4027dc:	415d      	adcs	r5, r3
  4027de:	4622      	mov	r2, r4
  4027e0:	462b      	mov	r3, r5
  4027e2:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
    sha512->digest[7] += h(0);
  4027e6:	e9d0 2314 	ldrd	r2, r3, [r0, #80]	; 0x50
  4027ea:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
  4027ee:	18a4      	adds	r4, r4, r2
  4027f0:	415d      	adcs	r5, r3
  4027f2:	4622      	mov	r2, r4
  4027f4:	462b      	mov	r3, r5
  4027f6:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50

004027fa <.LBB673>:


/* Make sure compiler doesn't skip */
STATIC INLINE void ForceZero(const void* mem, word32 len)
{
    volatile byte* z = (volatile byte*)mem;
  4027fa:	f50d 63da 	add.w	r3, sp, #1744	; 0x6d0

004027fe <.LVL8>:

    for (w = (volatile word64*)z; len >= sizeof(*w); len -= sizeof(*w))
        *w++ = 0;
    z = (volatile byte*)w;
#endif
    while (len--) *z++ = 0;
  4027fe:	2000      	movs	r0, #0
  402800:	f50d 61ea 	add.w	r1, sp, #1872	; 0x750

00402804 <.LVL9>:
  402804:	1c5a      	adds	r2, r3, #1

00402806 <.LVL10>:
  402806:	7018      	strb	r0, [r3, #0]

00402808 <.LVL11>:
  402808:	4613      	mov	r3, r2
  40280a:	428a      	cmp	r2, r1
  40280c:	d1fa      	bne.n	402804 <.LVL9>
  40280e:	f50d 63ea 	add.w	r3, sp, #1872	; 0x750

00402812 <.LBB675>:
  402812:	2100      	movs	r1, #0

00402814 <.LVL12>:
  402814:	1c5a      	adds	r2, r3, #1

00402816 <.LVL13>:
  402816:	7019      	strb	r1, [r3, #0]

00402818 <.LVL14>:
  402818:	4613      	mov	r3, r2
  40281a:	f50d 60f2 	add.w	r0, sp, #1936	; 0x790
  40281e:	4282      	cmp	r2, r0
  402820:	d1f8      	bne.n	402814 <.LVL12>

00402822 <.LBE675>:
#ifdef WOLFSSL_SMALL_STACK
    XFREE(W, NULL, DYNAMIC_TYPE_TMP_BUFFER);
#endif

    return 0;
}
  402822:	2000      	movs	r0, #0
  402824:	f20d 7d94 	addw	sp, sp, #1940	; 0x794

00402828 <.LCFI2>:
  402828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040282c <.LCFI3>:
        R( 0); R( 1); R( 2); R( 3);
  40282c:	e9dc 2316 	ldrd	r2, r3, [ip, #88]	; 0x58
  402830:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  402834:	f7fd be08 	b.w	400448 <.LBE365+0x52>
  402838:	e9dc 2318 	ldrd	r2, r3, [ip, #96]	; 0x60
  40283c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  402840:	f7fd bf19 	b.w	400676 <.LBE385+0x3e>
  402844:	e9dc 231a 	ldrd	r2, r3, [ip, #104]	; 0x68
  402848:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  40284c:	f7fe b831 	b.w	4008b2 <.LBE405+0x3e>
  402850:	e9dc 231c 	ldrd	r2, r3, [ip, #112]	; 0x70
  402854:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  402858:	f7fe b95c 	b.w	400b14 <.LBE425+0x3c>
        R( 4); R( 5); R( 6); R( 7);
  40285c:	e9dc 231e 	ldrd	r2, r3, [ip, #120]	; 0x78
  402860:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
  402864:	f7fe ba7d 	b.w	400d62 <.LBE445+0x3e>
  402868:	e9dc 2320 	ldrd	r2, r3, [ip, #128]	; 0x80
  40286c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  402870:	f7fe bb8e 	b.w	400f90 <.LBE465+0x3a>
  402874:	e9dc 2322 	ldrd	r2, r3, [ip, #136]	; 0x88
  402878:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  40287c:	f7fe bca5 	b.w	4011ca <.LBE485+0x40>
  402880:	e9dc 2324 	ldrd	r2, r3, [ip, #144]	; 0x90
  402884:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  402888:	f7fe bdbe 	b.w	401408 <.LBE505+0x3e>
        R( 8); R( 9); R(10); R(11);
  40288c:	e9dc 3426 	ldrd	r3, r4, [ip, #152]	; 0x98
  402890:	e9cd 3400 	strd	r3, r4, [sp]
  402894:	f7fe bed9 	b.w	40164a <.LBE525+0x3a>
  402898:	e9dc 3428 	ldrd	r3, r4, [ip, #160]	; 0xa0
  40289c:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
  4028a0:	f7fe bff6 	b.w	401890 <.LBE545+0x3a>
  4028a4:	e9dc 342a 	ldrd	r3, r4, [ip, #168]	; 0xa8
  4028a8:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
  4028ac:	f7ff b91d 	b.w	401aea <.LBE565+0x3a>
  4028b0:	e9dc 342c 	ldrd	r3, r4, [ip, #176]	; 0xb0
  4028b4:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
  4028b8:	f7ff ba3a 	b.w	401d30 <.LBE585+0x3a>
        R(12); R(13); R(14); R(15);
  4028bc:	e9dc 232e 	ldrd	r2, r3, [ip, #184]	; 0xb8
  4028c0:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  4028c4:	f7ff bb6c 	b.w	401fa0 <.LBE605+0x3e>
  4028c8:	e9dc 3430 	ldrd	r3, r4, [ip, #192]	; 0xc0
  4028cc:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
  4028d0:	e48b      	b.n	4021ea <.LBE625+0x3a>
  4028d2:	e9dc 3432 	ldrd	r3, r4, [ip, #200]	; 0xc8
  4028d6:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
  4028da:	e5b0      	b.n	40243e <.LBE645+0x3a>
  4028dc:	e9dc 3434 	ldrd	r3, r4, [ip, #208]	; 0xd0
  4028e0:	e9cd 3428 	strd	r3, r4, [sp, #160]	; 0xa0
  4028e4:	e6d2      	b.n	40268c <.LBE665+0x40>

004028e6 <.LFE16>:
  4028e6:	bf00      	nop

Disassembly of section .rodata.crc_table%61:

004028e8 <crc_table>:
  4028e8:	0000 0000 3096 7707 612c ee0e 51ba 9909     .....0.w,a...Q..
  4028f8:	c419 076d f48f 706a a535 e963 95a3 9e64     ..m...jp5.c...d.
  402908:	8832 0edb b8a4 79dc e91e e0d5 d988 97d2     2......y........
  402918:	4c2b 09b6 7cbd 7eb1 2d07 e7b8 1d91 90bf     +L...|.~.-......
  402928:	1064 1db7 20f2 6ab0 7148 f3b9 41de 84be     d.... .jHq...A..
  402938:	d47d 1ada e4eb 6ddd b551 f4d4 85c7 83d3     }......mQ.......
  402948:	9856 136c a8c0 646b f97a fd62 c9ec 8a65     V.l...kdz.b...e.
  402958:	5c4f 1401 6cd9 6306 3d63 fa0f 0df5 8d08     O\...l.cc=......
  402968:	20c8 3b6e 105e 4c69 41e4 d560 7172 a267     . n;^.iL.A`.rqg.
  402978:	e4d1 3c03 d447 4b04 85fd d20d b56b a50a     ...<G..K....k...
  402988:	a8fa 35b5 986c 42b2 c9d6 dbbb f940 acbc     ...5l..B....@...
  402998:	6ce3 32d8 5c75 45df 0dcf dcd6 3d59 abd1     .l.2u\.E....Y=..
  4029a8:	30ac 26d9 003a 51de 5180 c8d7 6116 bfd0     .0.&:..Q.Q...a..
  4029b8:	f4b5 21b4 c423 56b3 9599 cfba a50f b8bd     ...!#..V........
  4029c8:	b89e 2802 8808 5f05 d9b2 c60c e924 b10b     ...(..._....$...
  4029d8:	7c87 2f6f 4c11 5868 1dab c161 2d3d b666     .|o/.LhX..a.=-f.
  4029e8:	4190 76dc 7106 01db 20bc 98d2 102a efd5     .A.v.q... ..*...
  4029f8:	8589 71b1 b51f 06b6 e4a5 9fbf d433 e8b8     ...q........3...
  402a08:	c9a2 7807 f934 0f00 a88e 9609 9818 e10e     ...x4...........
  402a18:	0dbb 7f6a 3d2d 086d 6c97 9164 5c01 e663     ..j.-=m..ld..\c.
  402a28:	51f4 6b6b 6162 1c6c 30d8 8565 004e f262     .Qkkbal..0e.N.b.
  402a38:	95ed 6c06 a57b 1b01 f4c1 8208 c457 f50f     ...l{.......W...
  402a48:	d9c6 65b0 e950 12b7 b8ea 8bbe 887c fcb9     ...eP.......|...
  402a58:	1ddf 62dd 2d49 15da 7cf3 8cd3 4c65 fbd4     ...bI-...|..eL..
  402a68:	6158 4db2 51ce 3ab5 0074 a3bc 30e2 d4bb     Xa.M.Q.:t....0..
  402a78:	a541 4adf 95d7 3dd8 c46d a4d1 f4fb d3d6     A..J...=m.......
  402a88:	e96a 4369 d9fc 346e 8846 ad67 b8d0 da60     j.iC..n4F.g...`.
  402a98:	2d73 4404 1de5 3303 4c5f aa0a 7cc9 dd0d     s-.D...3_L...|..
  402aa8:	713c 5005 41aa 2702 1010 be0b 2086 c90c     <q.P.A.'..... ..
  402ab8:	b525 5768 85b3 206f d409 b966 e49f ce61     %.hW..o ..f...a.
  402ac8:	f90e 5ede c998 29d9 9822 b0d0 a8b4 c7d7     ...^...)".......
  402ad8:	3d17 59b3 0d81 2eb4 5c3b b7bd 6cad c0ba     .=.Y....;\...l..
  402ae8:	8320 edb8 b3b6 9abf e20c 03b6 d29a 74b1      ..............t
  402af8:	4739 ead5 77af 9dd2 2615 04db 1683 73dc     9G...w...&.....s
  402b08:	0b12 e363 3b84 9464 6a3e 0d6d 5aa8 7a6a     ..c..;d.>jm..Zjz
  402b18:	cf0b e40e ff9d 9309 ae27 0a00 9eb1 7d07     ........'......}
  402b28:	9344 f00f a3d2 8708 f268 1e01 c2fe 6906     D.......h......i
  402b38:	575d f762 67cb 8065 3671 196c 06e7 6e6b     ]Wb..ge.q6l...kn
  402b48:	1b76 fed4 2be0 89d3 7a5a 10da 4acc 67dd     v....+..Zz...J.g
  402b58:	df6f f9b9 eff9 8ebe be43 17b7 8ed5 60b0     o.......C......`
  402b68:	a3e8 d6d6 937e a1d1 c2c4 38d8 f252 4fdf     ....~......8R..O
  402b78:	67f1 d1bb 5767 a6bc 06dd 3fb5 364b 48b2     .g..gW.....?K6.H
  402b88:	2bda d80d 1b4c af0a 4af6 3603 7a60 4104     .+..L....J.6`z.A
  402b98:	efc3 df60 df55 a867 8eef 316e be79 4669     ..`.U.g...n1y.iF
  402ba8:	b38c cb61 831a bc66 d2a0 256f e236 5268     ..a...f...o%6.hR
  402bb8:	7795 cc0c 4703 bb0b 16b9 2202 262f 5505     .w...G....."/&.U
  402bc8:	3bbe c5ba 0b28 b2bd 5a92 2bb4 6a04 5cb3     .;..(....Z.+.j.\
  402bd8:	ffa7 c2d7 cf31 b5d0 9e8b 2cd9 ae1d 5bde     ....1......,...[
  402be8:	c2b0 9b64 f226 ec63 a39c 756a 930a 026d     ..d.&.c...ju..m.
  402bf8:	06a9 9c09 363f eb0e 6785 7207 5713 0500     ....?6...g.r.W..
  402c08:	4a82 95bf 7a14 e2b8 2bae 7bb1 1b38 0cb6     .J...z...+.{8...
  402c18:	8e9b 92d2 be0d e5d5 efb7 7cdc df21 0bdb     ...........|!...
  402c28:	d2d4 86d3 e242 f1d4 b3f8 68dd 836e 1fda     ....B......hn...
  402c38:	16cd 81be 265b f6b9 77e1 6fb0 4777 18b7     ....[&...w.owG..
  402c48:	5ae6 8808 6a70 ff0f 3bca 6606 0b5c 1101     .Z..pj...;.f\...
  402c58:	9eff 8f65 ae69 f862 ffd3 616b cf45 166c     ..e.i.b...kaE.l.
  402c68:	e278 a00a d2ee d70d 8354 4e04 b3c2 3903     x.......T..N...9
  402c78:	2661 a767 16f7 d060 474d 4969 77db 3e6e     a&g...`.MGiI.wn>
  402c88:	6a4a aed1 5adc d9d6 0b66 40df 3bf0 37d8     Jj...Z..f..@.;.7
  402c98:	ae53 a9bc 9ec5 debb cf7f 47b2 ffe9 30b5     S..........G...0
  402ca8:	f21c bdbd c28a caba 9330 53b3 a3a6 24b4     ........0..S...$
  402cb8:	3605 bad0 0693 cdd7 5729 54de 67bf 23d9     .6......)W.T.g.#
  402cc8:	7a2e b366 4ab8 c461 1b02 5d68 2b94 2a6f     .zf..Ja...h].+o*
  402cd8:	be37 b40b 8ea1 c30c df1b 5a05 ef8d 2d02     7..........Z...-
  402ce8:	0000 0000 3141 191b 6282 3236 53c3 2b2d     ....A1...b62.S-+
  402cf8:	c504 646c f445 7d77 a786 565a 96c7 4f41     ..ldE.w}..ZV..AO
  402d08:	8a08 c8d9 bb49 d1c2 e88a faef d9cb e3f4     ....I...........
  402d18:	4f0c acb5 7e4d b5ae 2d8e 9e83 1ccf 8798     .O..M~...-......
  402d28:	1251 4ac2 2310 53d9 70d3 78f4 4192 61ef     Q..J.#.S.p.x.A.a
  402d38:	d755 2eae e614 37b5 b5d7 1c98 8496 0583     U......7........
  402d48:	9859 821b a918 9b00 fadb b02d cb9a a936     Y.........-...6.
  402d58:	5d5d e677 6c1c ff6c 3fdf d441 0e9e cd5a     ]]w..ll..?A...Z.
  402d68:	24a2 9584 15e3 8c9f 4620 a7b2 7761 bea9     .$...... F..aw..
  402d78:	e1a6 f1e8 d0e7 e8f3 8324 c3de b265 dac5     ........$...e...
  402d88:	aeaa 5d5d 9feb 4446 cc28 6f6b fd69 7670     ..]]..FD(.koi.pv
  402d98:	6bae 3931 5aef 202a 092c 0b07 386d 121c     .k19.Z* ,...m8..
  402da8:	36f3 df46 07b2 c65d 5471 ed70 6530 f46b     .6F...].qTp.0ek.
  402db8:	f3f7 bb2a c2b6 a231 9175 891c a034 9007     ..*...1.u...4...
  402dc8:	bcfb 179f 8dba 0e84 de79 25a9 ef38 3cb2     ........y..%8..<
  402dd8:	79ff 73f3 48be 6ae8 1b7d 41c5 2a3c 58de     .y.s.H.j}..A<*.X
  402de8:	4f05 f079 7e44 e962 2d87 c24f 1cc6 db54     .Oy.D~b..-O...T.
  402df8:	8a01 9415 bb40 8d0e e883 a623 d9c2 bf38     ....@.....#...8.
  402e08:	c50d 38a0 f44c 21bb a78f 0a96 96ce 138d     ...8L..!........
  402e18:	0009 5ccc 3148 45d7 628b 6efa 53ca 77e1     ...\H1.E.b.n.S.w
  402e28:	5d54 babb 6c15 a3a0 3fd6 888d 0e97 9196     T]...l...?......
  402e38:	9850 ded7 a911 c7cc fad2 ece1 cb93 f5fa     P...............
  402e48:	d75c 7262 e61d 6b79 b5de 4054 849f 594f     \.br..yk..T@..OY
  402e58:	1258 160e 2319 0f15 70da 2438 419b 3d23     X....#...p8$.A#=
  402e68:	6ba7 65fd 5ae6 7ce6 0925 57cb 3864 4ed0     .k.e.Z.|%..Wd8.N
  402e78:	aea3 0191 9fe2 188a cc21 33a7 fd60 2abc     ........!..3`..*
  402e88:	e1af ad24 d0ee b43f 832d 9f12 b26c 8609     ..$...?.-...l...
  402e98:	24ab c948 15ea d053 4629 fb7e 7768 e265     .$H...S.)F~.hwe.
  402ea8:	79f6 2f3f 48b7 3624 1b74 1d09 2a35 0412     .y?/.H$6t...5*..
  402eb8:	bcf2 4b53 8db3 5248 de70 7965 ef31 607e     ..SK..HRp.ey1.~`
  402ec8:	f3fe e7e6 c2bf fefd 917c d5d0 a03d cccb     ........|...=...
  402ed8:	36fa 838a 07bb 9a91 5478 b1bc 6539 a8a7     .6......xT..9e..
  402ee8:	984b 3b83 a90a 2298 fac9 09b5 cb88 10ae     K..;..."........
  402ef8:	5d4f 5fef 6c0e 46f4 3fcd 6dd9 0e8c 74c2     O]._.l.F.?.m...t
  402f08:	1243 f35a 2302 ea41 70c1 c16c 4180 d877     C.Z..#A..pl..Aw.
  402f18:	d747 9736 e606 8e2d b5c5 a500 8484 bc1b     G.6...-.........
  402f28:	8a1a 7141 bb5b 685a e898 4377 d9d9 5a6c     ..Aq[.Zh..wC..lZ
  402f38:	4f1e 152d 7e5f 0c36 2d9c 271b 1cdd 3e00     .O-._~6..-.'...>
  402f48:	0012 b998 3153 a083 6290 8bae 53d1 92b5     ....S1...b...S..
  402f58:	c516 ddf4 f457 c4ef a794 efc2 96d5 f6d9     ....W...........
  402f68:	bce9 ae07 8da8 b71c de6b 9c31 ef2a 852a     ........k.1.*.*.
  402f78:	79ed ca6b 48ac d370 1b6f f85d 2a2e e146     .yk..Hp.o.]..*F.
  402f88:	36e1 66de 07a0 7fc5 5463 54e8 6522 4df3     .6.f....cT.T"e.M
  402f98:	f3e5 02b2 c2a4 1ba9 9167 3084 a026 299f     ........g..0&..)
  402fa8:	aeb8 e4c5 9ff9 fdde cc3a d6f3 fd7b cfe8     ........:...{...
  402fb8:	6bbc 80a9 5afd 99b2 093e b29f 387f ab84     .k...Z..>....8..
  402fc8:	24b0 2c1c 15f1 3507 4632 1e2a 7773 0731     .$.,...52F*.sw1.
  402fd8:	e1b4 4870 d0f5 516b 8336 7a46 b277 635d     ..pH..kQ6.Fzw.]c
  402fe8:	d74e cbfa e60f d2e1 b5cc f9cc 848d e0d7     N...............
  402ff8:	124a af96 230b b68d 70c8 9da0 4189 84bb     J....#...p...A..
  403008:	5d46 0323 6c07 1a38 3fc4 3115 0e85 280e     F]#..l8..?.1...(
  403018:	9842 674f a903 7e54 fac0 5579 cb81 4c62     B.Og..T~..yU..bL
  403028:	c51f 8138 f45e 9823 a79d b30e 96dc aa15     ..8.^.#.........
  403038:	001b e554 315a fc4f 6299 d762 53d8 ce79     ..T.Z1O..bb..Sy.
  403048:	4f17 49e1 7e56 50fa 2d95 7bd7 1cd4 62cc     .O.IV~.P.-.{...b
  403058:	8a13 2d8d bb52 3496 e891 1fbb d9d0 06a0     ...-R..4........
  403068:	f3ec 5e7e c2ad 4765 916e 6c48 a02f 7553     ..~^..eGn.Hl/.Su
  403078:	36e8 3a12 07a9 2309 546a 0824 652b 113f     .6.:...#jT$.+e?.
  403088:	79e4 96a7 48a5 8fbc 1b66 a491 2a27 bd8a     .y...H..f...'*..
  403098:	bce0 f2cb 8da1 ebd0 de62 c0fd ef23 d9e6     ........b...#...
  4030a8:	e1bd 14bc d0fc 0da7 833f 268a b27e 3f91     ........?..&~..?
  4030b8:	24b9 70d0 15f8 69cb 463b 42e6 777a 5bfd     .$.p...i;F.Bzw.[
  4030c8:	6bb5 dc65 5af4 c57e 0937 ee53 3876 f748     .ke..Z~.7.S.v8H.
  4030d8:	aeb1 b809 9ff0 a112 cc33 8a3f fd72 9324     ........3.?.r.$.
  4030e8:	0000 0000 6a37 01c2 d46e 0384 be59 0246     ....7j..n...Y.F.
  4030f8:	a8dc 0709 c2eb 06cb 7cb2 048d 1685 054f     .........|....O.
  403108:	51b8 0e13 3b8f 0fd1 85d6 0d97 efe1 0c55     .Q...;........U.
  403118:	f964 091a 9353 08d8 2d0a 0a9e 473d 0b5c     d...S....-..=G\.
  403128:	a370 1c26 c947 1de4 771e 1fa2 1d29 1e60     p.&.G....w..).`.
  403138:	0bac 1b2f 619b 1aed dfc2 18ab b5f5 1969     ../..a........i.
  403148:	f2c8 1235 98ff 13f7 26a6 11b1 4c91 1073     ..5......&...Ls.
  403158:	5a14 153c 3023 14fe 8e7a 16b8 e44d 177a     .Z<.#0..z...M.z.
  403168:	46e0 384d 2cd7 398f 928e 3bc9 f8b9 3a0b     .FM8.,.9...;...:
  403178:	ee3c 3f44 840b 3e86 3a52 3cc0 5065 3d02     <.D?...>R:.<eP.=
  403188:	1758 365e 7d6f 379c c336 35da a901 3418     X.^6o}.76..5...4
  403198:	bf84 3157 d5b3 3095 6bea 32d3 01dd 3311     ..W1...0.k.2...3
  4031a8:	e590 246b 8fa7 25a9 31fe 27ef 5bc9 262d     ..k$...%.1.'.[-&
  4031b8:	4d4c 2362 277b 22a0 9922 20e6 f315 2124     LMb#{'."".. ..$!
  4031c8:	b428 2a78 de1f 2bba 6046 29fc 0a71 283e     (.x*...+F`.)q.>(
  4031d8:	1cf4 2d71 76c3 2cb3 c89a 2ef5 a2ad 2f37     ..q-.v.,......7/
  4031e8:	8dc0 709a e7f7 7158 59ae 731e 3399 72dc     ...p..Xq.Y.s.3.r
  4031f8:	251c 7793 4f2b 7651 f172 7417 9b45 75d5     .%.w+OQvr..tE..u
  403208:	dc78 7e89 b64f 7f4b 0816 7d0d 6221 7ccf     x..~O.K....}!b.|
  403218:	74a4 7980 1e93 7842 a0ca 7a04 cafd 7bc6     .t.y..Bx...z...{
  403228:	2eb0 6cbc 4487 6d7e fade 6f38 90e9 6efa     ...l.D~m..8o...n
  403238:	866c 6bb5 ec5b 6a77 5202 6831 3835 69f3     l..k[.wj.R1h58.i
  403248:	7f08 62af 153f 636d ab66 612b c151 60e9     ...b?.mcf.+aQ..`
  403258:	d7d4 65a6 bde3 6464 03ba 6622 698d 67e0     ...e..dd.."f.i.g
  403268:	cb20 48d7 a117 4915 1f4e 4b53 7579 4a91      ..H...IN.SKyu.J
  403278:	63fc 4fde 09cb 4e1c b792 4c5a dda5 4d98     .c.O...N..ZL...M
  403288:	9a98 46c4 f0af 4706 4ef6 4540 24c1 4482     ...F...G.N@E.$.D
  403298:	3244 41cd 5873 400f e62a 4249 8c1d 438b     D2.AsX.@*.IB...C
  4032a8:	6850 54f1 0267 5533 bc3e 5775 d609 56b7     Ph.Tg.3U>.uW...V
  4032b8:	c08c 53f8 aabb 523a 14e2 507c 7ed5 51be     ...S..:R..|P.~.Q
  4032c8:	39e8 5ae2 53df 5b20 ed86 5966 87b1 58a4     .9.Z.S [..fY...X
  4032d8:	9134 5deb fb03 5c29 455a 5e6f 2f6d 5fad     4..]..)\ZEo^m/._
  4032e8:	1b80 e135 71b7 e0f7 cfee e2b1 a5d9 e373     ..5..q........s.
  4032f8:	b35c e63c d96b e7fe 6732 e5b8 0d05 e47a     \.<.k...2g....z.
  403308:	4a38 ef26 200f eee4 9e56 eca2 f461 ed60     8J&.. ..V...a.`.
  403318:	e2e4 e82f 88d3 e9ed 368a ebab 5cbd ea69     ../......6...\i.
  403328:	b8f0 fd13 d2c7 fcd1 6c9e fe97 06a9 ff55     .........l....U.
  403338:	102c fa1a 7a1b fbd8 c442 f99e ae75 f85c     ,....z..B...u.\.
  403348:	e948 f300 837f f2c2 3d26 f084 5711 f146     H.......&=...WF.
  403358:	4194 f409 2ba3 f5cb 95fa f78d ffcd f64f     .A...+........O.
  403368:	5d60 d978 3757 d8ba 890e dafc e339 db3e     `]x.W7......9.>.
  403378:	f5bc de71 9f8b dfb3 21d2 ddf5 4be5 dc37     ..q......!...K7.
  403388:	0cd8 d76b 66ef d6a9 d8b6 d4ef b281 d52d     ..k..f........-.
  403398:	a404 d062 ce33 d1a0 706a d3e6 1a5d d224     ..b.3...jp..].$.
  4033a8:	fe10 c55e 9427 c49c 2a7e c6da 4049 c718     ..^.'...~*..I@..
  4033b8:	56cc c257 3cfb c395 82a2 c1d3 e895 c011     .VW..<..........
  4033c8:	afa8 cb4d c59f ca8f 7bc6 c8c9 11f1 c90b     ..M......{......
  4033d8:	0774 cc44 6d43 cd86 d31a cfc0 b92d ce02     t.D.Cm......-...
  4033e8:	9640 91af fc77 906d 422e 922b 2819 93e9     @...w.m..B+..(..
  4033f8:	3e9c 96a6 54ab 9764 eaf2 9522 80c5 94e0     .>...Td...".....
  403408:	c7f8 9fbc adcf 9e7e 1396 9c38 79a1 9dfa     ......~...8..y..
  403418:	6f24 98b5 0513 9977 bb4a 9b31 d17d 9af3     $o....w.J.1.}...
  403428:	3530 8d89 5f07 8c4b e15e 8e0d 8b69 8fcf     05..._K.^...i...
  403438:	9dec 8a80 f7db 8b42 4982 8904 23b5 88c6     ......B..I...#..
  403448:	6488 839a 0ebf 8258 b0e6 801e dad1 81dc     .d....X.........
  403458:	cc54 8493 a663 8551 183a 8717 720d 86d5     T...c.Q.:....r..
  403468:	d0a0 a9e2 ba97 a820 04ce aa66 6ef9 aba4     ...... ...f..n..
  403478:	787c aeeb 124b af29 ac12 ad6f c625 acad     |x..K.)...o.%...
  403488:	8118 a7f1 eb2f a633 5576 a475 3f41 a5b7     ..../.3.vUu.A?..
  403498:	29c4 a0f8 43f3 a13a fdaa a37c 979d a2be     .)...C:...|.....
  4034a8:	73d0 b5c4 19e7 b406 a7be b640 cd89 b782     .s........@.....
  4034b8:	db0c b2cd b13b b30f 0f62 b149 6555 b08b     ....;...b.I.Ue..
  4034c8:	2268 bbd7 485f ba15 f606 b853 9c31 b991     h".._H....S.1...
  4034d8:	8ab4 bcde e083 bd1c 5eda bf5a 34ed be98     .........^Z..4..
  4034e8:	0000 0000 6765 b8bc c88b aa09 afee 12b5     ....eg..........
  4034f8:	9757 8f62 f032 37de 5fdc 256b 38b9 9dd7     W.b.2..7._k%.8..
  403508:	28ef c5b4 4f8a 7d08 e064 6fbd 8701 d701     .(...O.}d..o....
  403518:	bfb8 4ad6 d8dd f26a 7733 e0df 1056 5863     ...J..j.3w..V.cX
  403528:	579f 5019 30fa e8a5 9f14 fa10 f871 42ac     .W.P.0......q..B
  403538:	c0c8 df7b a7ad 67c7 0843 7572 6f26 cdce     ..{....gC.ru&o..
  403548:	7f70 95ad 1815 2d11 b7fb 3fa4 d09e 8718     p......-...?....
  403558:	e827 1acf 8f42 a273 20ac b0c6 47c9 087a     '...B.s.. ...Gz.
  403568:	af3e a032 c85b 188e 67b5 0a3b 00d0 b287     >.2.[....g;.....
  403578:	3869 2f50 5f0c 97ec f0e2 8559 9787 3de5     i8P/._....Y....=
  403588:	87d1 6586 e0b4 dd3a 4f5a cf8f 283f 7733     ...e..:.ZO..?(3w
  403598:	1086 eae4 77e3 5258 d80d 40ed bf68 f851     .....wXR...@h.Q.
  4035a8:	f8a1 f02b 9fc4 4897 302a 5a22 574f e29e     ..+....H*0"ZOW..
  4035b8:	6ff6 7f49 0893 c7f5 a77d d540 c018 6dfc     .oI.....}.@....m
  4035c8:	d04e 359f b72b 8d23 18c5 9f96 7fa0 272a     N..5+.#.......*'
  4035d8:	4719 bafd 207c 0241 8f92 10f4 e8f7 a848     .G..| A.......H.
  4035e8:	583d 9b14 3f58 23a8 90b6 311d f7d3 89a1     =X..X?.#...1....
  4035f8:	cf6a 1476 a80f acca 07e1 be7f 6084 06c3     j.v..........`..
  403608:	70d2 5ea0 17b7 e61c b859 f4a9 df3c 4c15     .p.^....Y...<..L
  403618:	e785 d1c2 80e0 697e 2f0e 7bcb 486b c377     ......~i./.{kHw.
  403628:	0fa2 cb0d 68c7 73b1 c729 6104 a04c d9b8     .....h.s)..aL...
  403638:	98f5 446f ff90 fcd3 507e ee66 371b 56da     ..oD....~Pf..7.V
  403648:	274d 0eb9 4028 b605 efc6 a4b0 88a3 1c0c     M'..(@..........
  403658:	b01a 81db d77f 3967 7891 2bd2 1ff4 936e     ......g9.x.+..n.
  403668:	f703 3b26 9066 839a 3f88 912f 58ed 2993     ..&;f....?/..X.)
  403678:	6054 b444 0731 0cf8 a8df 1e4d cfba a6f1     T`D.1.....M.....
  403688:	dfec fe92 b889 462e 1767 549b 7002 ec27     .......Fg..T.p'.
  403698:	48bb 71f0 2fde c94c 8030 dbf9 e755 6345     .H.q./L.0...U.Ec
  4036a8:	a09c 6b3f c7f9 d383 6817 c136 0f72 798a     ..?k.....h6.r..y
  4036b8:	37cb e45d 50ae 5ce1 ff40 4e54 9825 f6e8     .7]..P.\@.TN%...
  4036c8:	8873 ae8b ef16 1637 40f8 0482 279d bc3e     s.....7..@...'>.
  4036d8:	1f24 21e9 7841 9955 d7af 8be0 b0ca 335c     $..!AxU.......\3
  4036e8:	b63b ed59 d15e 55e5 7eb0 4750 19d5 ffec     ;.Y.^..U.~PG....
  4036f8:	216c 623b 4609 da87 e9e7 c832 8e82 708e     l!;b.F....2....p
  403708:	9ed4 28ed f9b1 9051 565f 82e4 313a 3a58     ...(..Q._V..:1X:
  403718:	0983 a78f 6ee6 1f33 c108 0d86 a66d b53a     .....n3.....m.:.
  403728:	e1a4 bd40 86c1 05fc 292f 1749 4e4a aff5     ..@...../)I.JN..
  403738:	76f3 3222 1196 8a9e be78 982b d91d 2097     .v"2....x.+.... 
  403748:	c94b 78f4 ae2e c048 01c0 d2fd 66a5 6a41     K..x..H......fAj
  403758:	5e1c f796 3979 4f2a 9697 5d9f f1f2 e523     .^..y9*O...]..#.
  403768:	1905 4d6b 7e60 f5d7 d18e e762 b6eb 5fde     ..kM`~....b...._
  403778:	8e52 c209 e937 7ab5 46d9 6800 21bc d0bc     R...7..z.F.h.!..
  403788:	31ea 88df 568f 3063 f961 22d6 9e04 9a6a     .1...Vc0a.."..j.
  403798:	a6bd 07bd c1d8 bf01 6e36 adb4 0953 1508     ........6n..S...
  4037a8:	4e9a 1d72 29ff a5ce 8611 b77b e174 0fc7     .Nr..)....{.t...
  4037b8:	d9cd 9210 bea8 2aac 1146 3819 7623 80a5     .......*F..8#v..
  4037c8:	6675 d8c6 0110 607a aefe 72cf c99b ca73     uf....z`...r..s.
  4037d8:	f122 57a4 9647 ef18 39a9 fdad 5ecc 4511     "..WG....9...^.E
  4037e8:	ee06 764d 8963 cef1 268d dc44 41e8 64f8     ..Mvc....&D..A.d
  4037f8:	7951 f92f 1e34 4193 b1da 5326 d6bf eb9a     Qy/.4..A..&S....
  403808:	c6e9 b3f9 a18c 0b45 0e62 19f0 6907 a14c     ......E.b....iL.
  403818:	51be 3c9b 36db 8427 9935 9692 fe50 2e2e     .Q.<.6'.5...P...
  403828:	b999 2654 defc 9ee8 7112 8c5d 1677 34e1     ..T&.....q].w..4
  403838:	2ece a936 49ab 118a e645 033f 8120 bb83     ..6..I..E.?. ...
  403848:	9176 e3e0 f613 5b5c 59fd 49e9 3e98 f155     v.....\[.Y.I.>U.
  403858:	0621 6c82 6144 d43e ceaa c68b a9cf 7e37     !..lDa>.......7~
  403868:	4138 d67f 265d 6ec3 89b3 7c76 eed6 c4ca     8A..]&.n..v|....
  403878:	d66f 591d b10a e1a1 1ee4 f314 7981 4ba8     o..Y.........y.K
  403888:	69d7 13cb 0eb2 ab77 a15c b9c2 c639 017e     .i....w.\...9.~.
  403898:	fe80 9ca9 99e5 2415 360b 36a0 516e 8e1c     .......$.6.6nQ..
  4038a8:	16a7 8666 71c2 3eda de2c 2c6f b949 94d3     ..f..q.>,.o,I...
  4038b8:	81f0 0904 e695 b1b8 497b a30d 2e1e 1bb1     ........{I......
  4038c8:	3e48 43d2 592d fb6e f6c3 e9db 91a6 5167     H>.C-Yn.......gQ
  4038d8:	a91f ccb0 ce7a 740c 6194 66b9 06f1 de05     ....z..t.a.f....
  4038e8:	0000 0000 0777 9630 0eee 2c61 0999 ba51     ....w.0...a,..Q.
  4038f8:	6d07 19c4 6a70 8ff4 63e9 35a5 649e a395     .m..pj...c.5.d..
  403908:	db0e 3288 dc79 a4b8 d5e0 1ee9 d297 88d9     ...2y...........
  403918:	b609 2b4c b17e bd7c b8e7 072d bf90 911d     ..L+~.|...-.....
  403928:	b71d 6410 b06a f220 b9f3 4871 be84 de41     ...dj. ...qH..A.
  403938:	da1a 7dd4 dd6d ebe4 d4f4 51b5 d383 c785     ...}m......Q....
  403948:	6c13 5698 6b64 c0a8 62fd 7af9 658a ecc9     .l.Vdk...b.z.e..
  403958:	0114 4f5c 0663 d96c 0ffa 633d 088d f50d     ..\Oc.l...=c....
  403968:	6e3b c820 694c 5e10 60d5 e441 67a2 7271     ;n .Li.^.`A..gqr
  403978:	033c d1e4 044b 47d4 0dd2 fd85 0aa5 6bb5     <...K..G.......k
  403988:	b535 faa8 b242 6c98 bbdb d6c9 bcac 40f9     5...B..l.......@
  403998:	d832 e36c df45 755c d6dc cf0d d1ab 593d     2.l.E.\u......=Y
  4039a8:	d926 ac30 de51 3a00 d7c8 8051 d0bf 1661     &.0.Q..:..Q...a.
  4039b8:	b421 b5f4 b356 23c4 bacf 9995 bdb8 0fa5     !...V..#........
  4039c8:	0228 9eb8 055f 0888 0cc6 b2d9 0bb1 24e9     (..._..........$
  4039d8:	6f2f 877c 6858 114c 61c1 ab1d 66b6 3d2d     /o|.XhL..a...f-=
  4039e8:	dc76 9041 db01 0671 d298 bc20 d5ef 2a10     v.A...q... ....*
  4039f8:	b171 8985 b606 1fb5 bf9f a5e4 b8e8 33d4     q..............3
  403a08:	0778 a2c9 000f 34f9 0996 8ea8 0ee1 1898     x......4........
  403a18:	6a7f bb0d 6d08 2d3d 6491 976c 63e6 015c     .j...m=-.dl..c\.
  403a28:	6b6b f451 6c1c 6261 6585 d830 62f2 4e00     kkQ..lab.e0..b.N
  403a38:	066c ed95 011b 7ba5 0882 c1f4 0ff5 57c4     l......{.......W
  403a48:	b065 c6d9 b712 50e9 be8b eab8 b9fc 7c88     e......P.......|
  403a58:	dd62 df1d da15 492d d38c f37c d4fb 654c     b.....-I..|...Le
  403a68:	b24d 5861 b53a ce51 bca3 7400 bbd4 e230     M.aX:.Q....t..0.
  403a78:	df4a 41a5 d83d d795 d1a4 6dc4 d6d3 fbf4     J..A=......m....
  403a88:	6943 6ae9 6e34 fcd9 67ad 4688 60da d0b8     Ci.j4n...g.F.`..
  403a98:	0444 732d 0333 e51d 0aaa 5f4c 0ddd c97c     D.-s3.....L_..|.
  403aa8:	0550 3c71 0227 aa41 0bbe 1010 0cc9 8620     P.q<'.A....... .
  403ab8:	6857 25b5 6f20 b385 66b9 09d4 61ce 9fe4     Wh.% o...f...a..
  403ac8:	de5e 0ef9 d929 98c9 d0b0 2298 d7c7 b4a8     ^...)......"....
  403ad8:	b359 173d b42e 810d bdb7 3b5c bac0 ad6c     Y.=.......\;..l.
  403ae8:	b8ed 2083 bf9a b6b3 b603 0ce2 b174 9ad2     ... ........t...
  403af8:	d5ea 3947 d29d af77 db04 1526 dc73 8316     ..G9..w...&.s...
  403b08:	63e3 120b 6494 843b 6d0d 3e6a 6a7a a85a     .c...d;..mj>zjZ.
  403b18:	0ee4 0bcf 0993 9dff 000a 27ae 077d b19e     ...........'}...
  403b28:	0ff0 4493 0887 d2a3 011e 68f2 0669 fec2     ...D.......hi...
  403b38:	62f7 5d57 6580 cb67 6c19 7136 6b6e e706     .bW].eg..l6qnk..
  403b48:	d4fe 761b d389 e02b da10 5a7a dd67 cc4a     ...v..+...zZg.J.
  403b58:	b9f9 6fdf be8e f9ef b717 43be b060 d58e     ...o.......C`...
  403b68:	d6d6 e8a3 d1a1 7e93 d838 c4c2 df4f 52f2     .......~8...O..R
  403b78:	bbd1 f167 bca6 6757 b53f dd06 b248 4b36     ..g...Wg?...H.6K
  403b88:	0dd8 da2b 0aaf 4c1b 0336 f64a 0441 607a     ..+....L6.J.A.z`
  403b98:	60df c3ef 67a8 55df 6e31 ef8e 6946 79be     .`...g.U1n..Fi.y
  403ba8:	61cb 8cb3 66bc 1a83 6f25 a0d2 6852 36e2     .a...f..%o..Rh.6
  403bb8:	0ccc 9577 0bbb 0347 0222 b916 0555 2f26     ..w...G."...U.&/
  403bc8:	bac5 be3b bdb2 280b b42b 925a b35c 046a     ..;....(+.Z.\.j.
  403bd8:	d7c2 a7ff d0b5 31cf d92c 8b9e de5b 1dae     .......1,...[...
  403be8:	649b b0c2 63ec 26f2 6a75 9ca3 6d02 0a93     .d...c.&uj...m..
  403bf8:	099c a906 0eeb 3f36 0772 8567 0005 1357     ......6?r.g...W.
  403c08:	bf95 824a b8e2 147a b17b ae2b b60c 381b     ..J...z.{.+....8
  403c18:	d292 9b8e d5e5 0dbe dc7c b7ef db0b 21df     ........|......!
  403c28:	d386 d4d2 d4f1 42e2 dd68 f8b3 da1f 6e83     .......Bh......n
  403c38:	be81 cd16 b9f6 5b26 b06f e177 b718 7747     ......&[o.w...Gw
  403c48:	0888 e65a 0fff 706a 0666 ca3b 0111 5c0b     ..Z...jpf.;....\
  403c58:	658f ff9e 62f8 69ae 6b61 d3ff 6c16 45cf     .e...b.iak...l.E
  403c68:	0aa0 78e2 0dd7 eed2 044e 5483 0339 c2b3     ...x....N..T9...
  403c78:	67a7 6126 60d0 f716 6949 4d47 6e3e db77     .g&a.`..IiGM>nw.
  403c88:	d1ae 4a6a d6d9 dc5a df40 660b d837 f03b     ..jJ..Z.@..f7.;.
  403c98:	bca9 53ae bbde c59e b247 7fcf b530 e9ff     ...S....G...0...
  403ca8:	bdbd 1cf2 baca 8ac2 b353 3093 b424 a6a3     ........S..0$...
  403cb8:	d0ba 0536 d7cd 9306 de54 2957 d923 bf67     ..6.....T.W)#.g.
  403cc8:	66b3 2e7a 61c4 b84a 685d 021b 6f2a 942b     .fz..aJ.]h..*o+.
  403cd8:	0bb4 37be 0cc3 a18e 055a 1bdf 022d 8def     ...7....Z...-...
  403ce8:	0000 0000 1b19 4131 3632 8262 2d2b c353     ......1A26b.+-S.
  403cf8:	6c64 04c5 777d 45f4 5a56 86a7 414f c796     dl..}w.EVZ..OA..
  403d08:	d9c8 088a c2d1 49bb effa 8ae8 f4e3 cbd9     .......I........
  403d18:	b5ac 0c4f aeb5 4d7e 839e 8e2d 9887 cf1c     ..O...~M..-.....
  403d28:	c24a 5112 d953 1023 f478 d370 ef61 9241     J..QS.#.x.p.a.A.
  403d38:	ae2e 55d7 b537 14e6 981c d7b5 8305 9684     ...U7...........
  403d48:	1b82 5998 009b 18a9 2db0 dbfa 36a9 9acb     ...Y.....-...6..
  403d58:	77e6 5d5d 6cff 1c6c 41d4 df3f 5acd 9e0e     .w]].ll..A?..Z..
  403d68:	8495 a224 9f8c e315 b2a7 2046 a9be 6177     ..$.......F ..wa
  403d78:	e8f1 a6e1 f3e8 e7d0 dec3 2483 c5da 65b2     ...........$...e
  403d88:	5d5d aaae 4644 eb9f 6b6f 28cc 7076 69fd     ]]..DF..ok.(vp.i
  403d98:	3139 ae6b 2a20 ef5a 070b 2c09 1c12 6d38     91k. *Z....,..8m
  403da8:	46df f336 5dc6 b207 70ed 7154 6bf4 3065     .F6..]...pTq.ke0
  403db8:	2abb f7f3 31a2 b6c2 1c89 7591 0790 34a0     .*...1.....u...4
  403dc8:	9f17 fbbc 840e ba8d a925 79de b23c 38ef     ........%..y<..8
  403dd8:	f373 ff79 e86a be48 c541 7d1b de58 3c2a     s.y.j.H.A..}X.*<
  403de8:	79f0 054f 62e9 447e 4fc2 872d 54db c61c     .yO..b~D.O-..T..
  403df8:	1594 018a 0e8d 40bb 23a6 83e8 38bf c2d9     .......@.#...8..
  403e08:	a038 0dc5 bb21 4cf4 960a 8fa7 8d13 ce96     8...!..L........
  403e18:	cc5c 0900 d745 4831 fa6e 8b62 e177 ca53     \...E.1Hn.b.w.S.
  403e28:	bbba 545d a0a3 156c 8d88 d63f 9691 970e     ..]T..l...?.....
  403e38:	d7de 5098 ccc7 11a9 e1ec d2fa faf5 93cb     ...P............
  403e48:	6272 5cd7 796b 1de6 5440 deb5 4f59 9f84     rb.\ky..@T..YO..
  403e58:	0e16 5812 150f 1923 3824 da70 233d 9b41     ...X..#.$8p.=#A.
  403e68:	fd65 a76b e67c e65a cb57 2509 d04e 6438     e.k.|.Z.W..%N.8d
  403e78:	9101 a3ae 8a18 e29f a733 21cc bc2a 60fd     ........3..!*..`
  403e88:	24ad afe1 3fb4 eed0 129f 2d83 0986 6cb2     .$...?.....-...l
  403e98:	48c9 ab24 53d0 ea15 7efb 2946 65e2 6877     .H$..S...~F).ewh
  403ea8:	3f2f f679 2436 b748 091d 741b 1204 352a     /?y.6$H....t..*5
  403eb8:	534b f2bc 4852 b38d 6579 70de 7e60 31ef     KS..RH..ye.p`~.1
  403ec8:	e6e7 fef3 fdfe bfc2 d0d5 7c91 cbcc 3da0     ...........|...=
  403ed8:	8a83 fa36 919a bb07 bcb1 7854 a7a8 3965     ..6.......Tx..e9
  403ee8:	833b 4b98 9822 0aa9 b509 c9fa ae10 88cb     ;..K"...........
  403ef8:	ef5f 4f5d f446 0e6c d96d cd3f c274 8c0e     _.]OF.l.m.?.t...
  403f08:	5af3 4312 41ea 0223 6cc1 c170 77d8 8041     .Z.C.A#..lp..wA.
  403f18:	3697 47d7 2d8e 06e6 00a5 c5b5 1bbc 8484     .6.G.-..........
  403f28:	4171 1a8a 5a68 5bbb 7743 98e8 6c5a d9d9     qA..hZ.[Cw..Zl..
  403f38:	2d15 1e4f 360c 5f7e 1b27 9c2d 003e dd1c     .-O..6~_'.-.>...
  403f48:	98b9 1200 83a0 5331 ae8b 9062 b592 d153     ......1S..b...S.
  403f58:	f4dd 16c5 efc4 57f4 c2ef 94a7 d9f6 d596     .......W........
  403f68:	07ae e9bc 1cb7 a88d 319c 6bde 2a85 2aef     .........1.k.*.*
  403f78:	6bca ed79 70d3 ac48 5df8 6f1b 46e1 2e2a     .ky..pH..].o.F*.
  403f88:	de66 e136 c57f a007 e854 6354 f34d 2265     f.6.....T.TcM.e"
  403f98:	b202 e5f3 a91b a4c2 8430 6791 9f29 26a0     ........0..g)..&
  403fa8:	c5e4 b8ae defd f99f f3d6 3acc e8cf 7bfd     ...........:...{
  403fb8:	a980 bc6b b299 fd5a 9fb2 3e09 84ab 7f38     ..k...Z....>..8.
  403fc8:	1c2c b024 0735 f115 2a1e 3246 3107 7377     ,.$.5....*F2.1ws
  403fd8:	7048 b4e1 6b51 f5d0 467a 3683 5d63 77b2     Hp..Qk..zF.6c].w
  403fe8:	facb 4ed7 e1d2 0fe6 ccf9 ccb5 d7e0 8d84     ...N............
  403ff8:	96af 4a12 8db6 0b23 a09d c870 bb84 8941     ...J..#...p...A.
  404008:	2303 465d 381a 076c 1531 c43f 0e28 850e     .#]F.8l.1.?.(...
  404018:	4f67 4298 547e 03a9 7955 c0fa 624c 81cb     gO.B~T..Uy..Lb..
  404028:	3881 1fc5 2398 5ef4 0eb3 9da7 15aa dc96     .8...#.^........
  404038:	54e5 1b00 4ffc 5a31 62d7 9962 79ce d853     .T...O1Z.bb..yS.
  404048:	e149 174f fa50 567e d77b 952d cc62 d41c     I.O.P.~V{.-.b...
  404058:	8d2d 138a 9634 52bb bb1f 91e8 a006 d0d9     -...4..R........
  404068:	7e5e ecf3 6547 adc2 486c 6e91 5375 2fa0     ^~..Ge..lH.nuS./
  404078:	123a e836 0923 a907 2408 6a54 3f11 2b65     :.6.#....$Tj.?e+
  404088:	a796 e479 bc8f a548 91a4 661b 8abd 272a     ..y...H....f..*'
  404098:	cbf2 e0bc d0eb a18d fdc0 62de e6d9 23ef     ...........b...#
  4040a8:	bc14 bde1 a70d fcd0 8a26 3f83 913f 7eb2     ........&..??..~
  4040b8:	d070 b924 cb69 f815 e642 3b46 fd5b 7a77     p.$.i...B.F;[.wz
  4040c8:	65dc b56b 7ec5 f45a 53ee 3709 48f7 7638     .ek..~Z..S.7.H8v
  4040d8:	09b8 b1ae 12a1 f09f 3f8a 33cc 2493 72fd     .........?.3.$.r
  4040e8:	0000 0000 c201 376a 8403 6ed4 4602 59be     ......j7...n.F.Y
  4040f8:	0907 dca8 cb06 ebc2 8d04 b27c 4f05 8516     ..........|..O..
  404108:	130e b851 d10f 8f3b 970d d685 550c e1ef     ..Q...;......U..
  404118:	1a09 64f9 d808 5393 9e0a 0a2d 5c0b 3d47     ...d...S..-..\G=
  404128:	261c 70a3 e41d 47c9 a21f 1e77 601e 291d     .&.p...G..w..`.)
  404138:	2f1b ac0b ed1a 9b61 ab18 c2df 6919 f5b5     ./....a......i..
  404148:	3512 c8f2 f713 ff98 b111 a626 7310 914c     .5........&..sL.
  404158:	3c15 145a fe14 2330 b816 7a8e 7a17 4de4     .<Z...0#...z.z.M
  404168:	4d38 e046 8f39 d72c c93b 8e92 0b3a b9f8     8MF.9.,.;...:...
  404178:	443f 3cee 863e 0b84 c03c 523a 023d 6550     ?D.<>...<.:R=.Pe
  404188:	5e36 5817 9c37 6f7d da35 36c3 1834 01a9     6^.X7.}o5..64...
  404198:	5731 84bf 9530 b3d5 d332 ea6b 1133 dd01     1W..0...2.k.3...
  4041a8:	6b24 90e5 a925 a78f ef27 fe31 2d26 c95b     $k..%...'.1.&-[.
  4041b8:	6223 4c4d a022 7b27 e620 2299 2421 15f3     #bML".'{ .."!$..
  4041c8:	782a 28b4 ba2b 1fde fc29 4660 3e28 710a     *x.(+...).`F(>.q
  4041d8:	712d f41c b32c c376 f52e 9ac8 372f ada2     -q..,.v...../7..
  4041e8:	9a70 c08d 5871 f7e7 1e73 ae59 dc72 9933     p...qX..s.Y.r.3.
  4041f8:	9377 1c25 5176 2b4f 1774 72f1 d575 459b     w.%.vQO+t..ru..E
  404208:	897e 78dc 4b7f 4fb6 0d7d 1608 cf7c 2162     ~..x.K.O}...|.b!
  404218:	8079 a474 4278 931e 047a caa0 c67b fdca     y.t.xB..z...{...
  404228:	bc6c b02e 7e6d 8744 386f defa fa6e e990     l...m~D.o8..n...
  404238:	b56b 6c86 776a 5bec 3168 0252 f369 3538     k..ljw.[h1R.i.85
  404248:	af62 087f 6d63 3f15 2b61 66ab e960 51c1     b...cm.?a+.f`..Q
  404258:	a665 d4d7 6464 e3bd 2266 ba03 e067 8d69     e...dd..f"..g.i.
  404268:	d748 20cb 1549 17a1 534b 4e1f 914a 7975     H.. I...KS.NJ.uy
  404278:	de4f fc63 1c4e cb09 5a4c 92b7 984d a5dd     O.c.N...LZ..M...
  404288:	c446 989a 0647 aff0 4045 f64e 8244 c124     F...G...E@N.D.$.
  404298:	cd41 4432 0f40 7358 4942 2ae6 8b43 1d8c     A.2D@.XsBI.*C...
  4042a8:	f154 5068 3355 6702 7557 3ebc b756 09d6     T.hPU3.gWu.>V...
  4042b8:	f853 8cc0 3a52 bbaa 7c50 e214 be51 d57e     S...R:..P|..Q.~.
  4042c8:	e25a e839 205b df53 6659 86ed a458 b187     Z.9.[ S.Yf..X...
  4042d8:	eb5d 3491 295c 03fb 6f5e 5a45 ad5f 6d2f     ]..4\)..^oEZ_./m
  4042e8:	35e1 801b f7e0 b771 b1e2 eecf 73e3 d9a5     .5....q......s..
  4042f8:	3ce6 5cb3 fee7 6bd9 b8e5 3267 7ae4 050d     .<.\...k..g2.z..
  404308:	26ef 384a e4ee 0f20 a2ec 569e 60ed 61f4     .&J8.. ....V.`.a
  404318:	2fe8 e4e2 ede9 d388 abeb 8a36 69ea bd5c     ./........6..i\.
  404328:	13fd f0b8 d1fc c7d2 97fe 9e6c 55ff a906     ..........l..U..
  404338:	1afa 2c10 d8fb 1b7a 9ef9 42c4 5cf8 75ae     ...,..z....B.\.u
  404348:	00f3 48e9 c2f2 7f83 84f0 263d 46f1 1157     ...H......=&.FW.
  404358:	09f4 9441 cbf5 a32b 8df7 fa95 4ff6 cdff     ..A...+......O..
  404368:	78d9 605d bad8 5737 fcda 0e89 3edb 39e3     .x]`..7W.....>.9
  404378:	71de bcf5 b3df 8b9f f5dd d221 37dc e54b     .q........!..7K.
  404388:	6bd7 d80c a9d6 ef66 efd4 b6d8 2dd5 81b2     .k....f......-..
  404398:	62d0 04a4 a0d1 33ce e6d3 6a70 24d2 5d1a     .b.....3..pj.$.]
  4043a8:	5ec5 10fe 9cc4 2794 dac6 7e2a 18c7 4940     .^.....'..*~..@I
  4043b8:	57c2 cc56 95c3 fb3c d3c1 a282 11c0 95e8     .WV...<.........
  4043c8:	4dcb a8af 8fca 9fc5 c9c8 c67b 0bc9 f111     .M........{.....
  4043d8:	44cc 7407 86cd 436d c0cf 1ad3 02ce 2db9     .D.t..mC.......-
  4043e8:	af91 4096 6d90 77fc 2b92 2e42 e993 1928     ...@.m.w.+B...(.
  4043f8:	a696 9c3e 6497 ab54 2295 f2ea e094 c580     ..>..dT.."......
  404408:	bc9f f8c7 7e9e cfad 389c 9613 fa9d a179     .....~...8....y.
  404418:	b598 246f 7799 1305 319b 4abb f39a 7dd1     ..o$.w...1.J...}
  404428:	898d 3035 4b8c 075f 0d8e 5ee1 cf8f 698b     ..50.K_....^...i
  404438:	808a ec9d 428b dbf7 0489 8249 c688 b523     .....B....I...#.
  404448:	9a83 8864 5882 bf0e 1e80 e6b0 dc81 d1da     ..d..X..........
  404458:	9384 54cc 5185 63a6 1787 3a18 d586 0d72     ...T.Q.c...:..r.
  404468:	e2a9 a0d0 20a8 97ba 66aa ce04 a4ab f96e     ..... ...f....n.
  404478:	ebae 7c78 29af 4b12 6fad 12ac adac 25c6     ..x|.).K.o.....%
  404488:	f1a7 1881 33a6 2feb 75a4 7655 b7a5 413f     .....3./.uUv..?A
  404498:	f8a0 c429 3aa1 f343 7ca3 aafd bea2 9d97     ..)..:C..|......
  4044a8:	c4b5 d073 06b4 e719 40b6 bea7 82b7 89cd     ..s......@......
  4044b8:	cdb2 0cdb 0fb3 3bb1 49b1 620f 8bb0 5565     .......;.I.b..eU
  4044c8:	d7bb 6822 15ba 5f48 53b8 06f6 91b9 319c     .."h..H_.S.....1
  4044d8:	debc b48a 1cbd 83e0 5abf da5e 98be ed34     .........Z^...4.
  4044e8:	0000 0000 bcb8 6567 09aa 8bc8 b512 eeaf     ......ge........
  4044f8:	628f 5797 de37 32f0 6b25 dc5f d79d b938     .b.W7..2%k_...8.
  404508:	b4c5 ef28 087d 8a4f bd6f 64e0 01d7 0187     ..(.}.O.o..d....
  404518:	d64a b8bf 6af2 ddd8 dfe0 3377 6358 5610     J....j....w3Xc.V
  404528:	1950 9f57 a5e8 fa30 10fa 149f ac42 71f8     P.W...0.....B..q
  404538:	7bdf c8c0 c767 ada7 7275 4308 cecd 266f     .{..g...ur.C..o&
  404548:	ad95 707f 112d 1518 a43f fbb7 1887 9ed0     ...p-...?.......
  404558:	cf1a 27e8 73a2 428f c6b0 ac20 7a08 c947     ...'.s.B.. ..zG.
  404568:	32a0 3eaf 8e18 5bc8 3b0a b567 87b2 d000     .2.>...[.;g.....
  404578:	502f 6938 ec97 0c5f 5985 e2f0 e53d 8797     /P8i.._..Y..=...
  404588:	8665 d187 3add b4e0 8fcf 5a4f 3377 3f28     e....:....OZw3(?
  404598:	e4ea 8610 5852 e377 ed40 0dd8 51f8 68bf     ....RXw.@....Q.h
  4045a8:	2bf0 a1f8 9748 c49f 225a 2a30 9ee2 4f57     .+..H...Z"0*..WO
  4045b8:	497f f66f f5c7 9308 40d5 7da7 fc6d 18c0     .Io......@.}m...
  4045c8:	9f35 4ed0 238d 2bb7 969f c518 2a27 a07f     5..N.#.+....'*..
  4045d8:	fdba 1947 4102 7c20 f410 928f 48a8 f7e8     ..G..A |.....H..
  4045e8:	149b 3d58 a823 583f 1d31 b690 a189 d3f7     ..X=#.?X1.......
  4045f8:	7614 6acf caac 0fa8 7fbe e107 c306 8460     .v.j..........`.
  404608:	a05e d270 1ce6 b717 a9f4 59b8 154c 3cdf     ^.p........YL..<
  404618:	c2d1 85e7 7e69 e080 cb7b 0e2f 77c3 6b48     ....i~..{./..wHk
  404628:	0dcb a20f b173 c768 0461 29c7 b8d9 4ca0     ....s.h.a..)...L
  404638:	6f44 f598 d3fc 90ff 66ee 7e50 da56 1b37     Do.......fP~V.7.
  404648:	b90e 4d27 05b6 2840 b0a4 c6ef 0c1c a388     ..'M..@(........
  404658:	db81 1ab0 6739 7fd7 d22b 9178 6e93 f41f     ....9g..+.x..n..
  404668:	263b 03f7 9a83 6690 2f91 883f 9329 ed58     ;&.....f./?.).X.
  404678:	44b4 5460 f80c 3107 4d1e dfa8 f1a6 bacf     .D`T...1.M......
  404688:	92fe ecdf 2e46 89b8 9b54 6717 27ec 0270     ....F...T..g.'p.
  404698:	f071 bb48 4cc9 de2f f9db 3080 4563 55e7     q.H..L/....0cE.U
  4046a8:	3f6b 9ca0 83d3 f9c7 36c1 1768 8a79 720f     k?.......6h.y..r
  4046b8:	5de4 cb37 e15c ae50 544e 40ff e8f6 2598     .]7.\.P.NT.@...%
  4046c8:	8bae 7388 3716 16ef 8204 f840 3ebc 9d27     ...s.7....@..>'.
  4046d8:	e921 241f 5599 4178 e08b afd7 5c33 cab0     !..$.UxA....3\..
  4046e8:	59ed 3bb6 e555 5ed1 5047 b07e ecff d519     .Y.;U..^GP~.....
  4046f8:	3b62 6c21 87da 0946 32c8 e7e9 8e70 828e     b;!l..F..2..p...
  404708:	ed28 d49e 5190 b1f9 e482 5f56 583a 3a31     (....Q....V_:X1:
  404718:	8fa7 8309 331f e66e 860d 08c1 3ab5 6da6     .....3n......:.m
  404728:	40bd a4e1 fc05 c186 4917 2f29 f5af 4a4e     .@.......I)/..NJ
  404738:	2232 f376 9e8a 9611 2b98 78be 9720 1dd9     2"v......+.x ...
  404748:	f478 4bc9 48c0 2eae fdd2 c001 416a a566     x..K.H......jAf.
  404758:	96f7 1c5e 2a4f 7939 9f5d 9796 23e5 f2f1     ..^.O*9y]....#..
  404768:	6b4d 0519 d7f5 607e 62e7 8ed1 de5f ebb6     Mk....~`.b.._...
  404778:	09c2 528e b57a 37e9 0068 d946 bcd0 bc21     ...Rz..7h.F...!.
  404788:	df88 ea31 6330 8f56 d622 61f9 6a9a 049e     ..1.0cV."..a.j..
  404798:	bd07 bda6 01bf d8c1 b4ad 366e 0815 5309     ..........n6...S
  4047a8:	721d 9a4e cea5 ff29 7bb7 1186 c70f 74e1     .rN...)..{.....t
  4047b8:	1092 cdd9 ac2a a8be 1938 4611 a580 2376     ....*...8..F..v#
  4047c8:	c6d8 7566 7a60 1001 cf72 feae 73ca 9bc9     ..fu`z..r....s..
  4047d8:	a457 22f1 18ef 4796 adfd a939 1145 cc5e     W.."...G..9.E.^.
  4047e8:	4d76 06ee f1ce 6389 44dc 8d26 f864 e841     vM.....c.D&.d.A.
  4047f8:	2ff9 5179 9341 341e 2653 dab1 9aeb bfd6     ./yQA..4S&......
  404808:	f9b3 e9c6 450b 8ca1 f019 620e 4ca1 0769     .....E.....b.Li.
  404818:	9b3c be51 2784 db36 9296 3599 2e2e 50fe     <.Q..'6....5...P
  404828:	5426 99b9 e89e fcde 5d8c 1271 e134 7716     &T.......]q.4..w
  404838:	36a9 ce2e 8a11 ab49 3f03 45e6 83bb 2081     .6....I..?.E... 
  404848:	e0e3 7691 5c5b 13f6 e949 fd59 55f1 983e     ...v[\..I.Y..U>.
  404858:	826c 2106 3ed4 4461 8bc6 aace 377e cfa9     l..!.>aD....~7..
  404868:	7fd6 3841 c36e 5d26 767c b389 cac4 d6ee     ..A8n.&]|v......
  404878:	1d59 6fd6 a1e1 0ab1 14f3 e41e a84b 8179     Y..o........K.y.
  404888:	cb13 d769 77ab b20e c2b9 5ca1 7e01 39c6     ..i..w.....\.~.9
  404898:	a99c 80fe 1524 e599 a036 0b36 1c8e 6e51     ....$...6.6...Qn
  4048a8:	6686 a716 da3e c271 6f2c 2cde d394 49b9     .f..>.q.,o.,...I
  4048b8:	0409 f081 b8b1 95e6 0da3 7b49 b11b 1e2e     ..........I{....
  4048c8:	d243 483e 6efb 2d59 dbe9 c3f6 6751 a691     C.>H.nY-....Qg..
  4048d8:	b0cc 1fa9 0c74 7ace b966 9461 05de f106     ....t..zf.a.....

Disassembly of section .text._svfprintf_r%62:

004048e8 <_svfprintf_r>:
  4048e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

004048ec <.LCFI0>:
  4048ec:	ed2d 8b06 	vpush	{d8-d10}

004048f0 <.LCFI1>:
  4048f0:	b0cf      	sub	sp, #316	; 0x13c

004048f2 <.LCFI2>:
  4048f2:	460c      	mov	r4, r1
  4048f4:	9105      	str	r1, [sp, #20]
  4048f6:	4693      	mov	fp, r2
  4048f8:	930a      	str	r3, [sp, #40]	; 0x28

004048fa <.LVL1>:
  4048fa:	9011      	str	r0, [sp, #68]	; 0x44
  4048fc:	f019 ff6c 	bl	41e7d8 <_localeconv_r>

00404900 <.LVL2>:
  404900:	6803      	ldr	r3, [r0, #0]
  404902:	9317      	str	r3, [sp, #92]	; 0x5c

00404904 <.LVL3>:
  404904:	4618      	mov	r0, r3
  404906:	f013 fe3b 	bl	418580 <strlen>

0040490a <.LVL4>:
  40490a:	89a3      	ldrh	r3, [r4, #12]
  40490c:	9015      	str	r0, [sp, #84]	; 0x54

0040490e <.LVL5>:
  40490e:	061d      	lsls	r5, r3, #24
  404910:	d503      	bpl.n	40491a <.LVL6>
  404912:	6923      	ldr	r3, [r4, #16]
  404914:	2b00      	cmp	r3, #0
  404916:	f001 8151 	beq.w	405bbc <.LBE47>

0040491a <.LVL6>:
  40491a:	2300      	movs	r3, #0
  40491c:	ed9f 8b7a 	vldr	d8, [pc, #488]	; 404b08 <.LVL46+0x4>
  404920:	ed9f 9b7b 	vldr	d9, [pc, #492]	; 404b10 <.LVL46+0xc>
  404924:	930f      	str	r3, [sp, #60]	; 0x3c
  404926:	9324      	str	r3, [sp, #144]	; 0x90
  404928:	9323      	str	r3, [sp, #140]	; 0x8c

0040492a <.LVL7>:
  40492a:	9314      	str	r3, [sp, #80]	; 0x50
  40492c:	9319      	str	r3, [sp, #100]	; 0x64
  40492e:	9312      	str	r3, [sp, #72]	; 0x48
  404930:	9318      	str	r3, [sp, #96]	; 0x60
  404932:	9316      	str	r3, [sp, #88]	; 0x58
  404934:	9303      	str	r3, [sp, #12]
  404936:	465e      	mov	r6, fp
  404938:	ab25      	add	r3, sp, #148	; 0x94

0040493a <.LVL8>:
  40493a:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 404b18 <.LVL46+0x14>
  40493e:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44

00404942 <.LVL9>:
  404942:	9322      	str	r3, [sp, #136]	; 0x88
  404944:	4699      	mov	r9, r3

00404946 <.LVL10>:
  404946:	7833      	ldrb	r3, [r6, #0]
  404948:	4634      	mov	r4, r6
  40494a:	b1e3      	cbz	r3, 404986 <.LVL18>
  40494c:	2b25      	cmp	r3, #37	; 0x25
  40494e:	d102      	bne.n	404956 <.LVL12>
  404950:	e019      	b.n	404986 <.LVL18>

00404952 <.LVL11>:
  404952:	2b25      	cmp	r3, #37	; 0x25
  404954:	d003      	beq.n	40495e <.LVL14>

00404956 <.LVL12>:
  404956:	f814 3f01 	ldrb.w	r3, [r4, #1]!

0040495a <.LVL13>:
  40495a:	2b00      	cmp	r3, #0
  40495c:	d1f9      	bne.n	404952 <.LVL11>

0040495e <.LVL14>:
  40495e:	1ba5      	subs	r5, r4, r6
  404960:	b18d      	cbz	r5, 404986 <.LVL18>
  404962:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404964:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404966:	f8c9 6000 	str.w	r6, [r9]
  40496a:	3301      	adds	r3, #1
  40496c:	442a      	add	r2, r5
  40496e:	2b07      	cmp	r3, #7
  404970:	f8c9 5004 	str.w	r5, [r9, #4]
  404974:	9224      	str	r2, [sp, #144]	; 0x90

00404976 <.LVL15>:
  404976:	9323      	str	r3, [sp, #140]	; 0x8c
  404978:	f300 809d 	bgt.w	404ab6 <.LVL36>

0040497c <.LVL16>:
  40497c:	f109 0908 	add.w	r9, r9, #8

00404980 <.LVL17>:
  404980:	9b03      	ldr	r3, [sp, #12]
  404982:	442b      	add	r3, r5
  404984:	9303      	str	r3, [sp, #12]

00404986 <.LVL18>:
  404986:	7823      	ldrb	r3, [r4, #0]
  404988:	2b00      	cmp	r3, #0
  40498a:	f001 80ca 	beq.w	405b22 <.LDL1>

0040498e <.LVL19>:
  40498e:	2300      	movs	r3, #0
  404990:	f04f 32ff 	mov.w	r2, #4294967295
  404994:	4698      	mov	r8, r3
  404996:	9307      	str	r3, [sp, #28]
  404998:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
  40499c:	1c67      	adds	r7, r4, #1

0040499e <.LVL20>:
  40499e:	7863      	ldrb	r3, [r4, #1]
  4049a0:	9204      	str	r2, [sp, #16]
  4049a2:	242b      	movs	r4, #43	; 0x2b

004049a4 <.LVL21>:
  4049a4:	2520      	movs	r5, #32

004049a6 <.LVL22>:
  4049a6:	3701      	adds	r7, #1
  4049a8:	f1a3 0220 	sub.w	r2, r3, #32
  4049ac:	2a5a      	cmp	r2, #90	; 0x5a
  4049ae:	f200 83e4 	bhi.w	40517a <.LVL218>
  4049b2:	e8df f012 	tbh	[pc, r2, lsl #1]
  4049b6:	02a5      	.short	0x02a5
  4049b8:	03e203e2 	.word	0x03e203e2
  4049bc:	03e202ae 	.word	0x03e202ae
  4049c0:	03e203e2 	.word	0x03e203e2
  4049c4:	03e2005f 	.word	0x03e2005f
  4049c8:	02b203e2 	.word	0x02b203e2
  4049cc:	03e202bf 	.word	0x03e202bf
  4049d0:	02cd007c 	.word	0x02cd007c
  4049d4:	02e703e2 	.word	0x02e703e2
  4049d8:	03d203d2 	.word	0x03d203d2
  4049dc:	03d203d2 	.word	0x03d203d2
  4049e0:	03d203d2 	.word	0x03d203d2
  4049e4:	03d203d2 	.word	0x03d203d2
  4049e8:	03e203d2 	.word	0x03e203d2
  4049ec:	03e203e2 	.word	0x03e203e2
  4049f0:	03e203e2 	.word	0x03e203e2
  4049f4:	03e203e2 	.word	0x03e203e2
  4049f8:	03e2034a 	.word	0x03e2034a
  4049fc:	0392037c 	.word	0x0392037c
  404a00:	034a034a 	.word	0x034a034a
  404a04:	03e2034a 	.word	0x03e2034a
  404a08:	03e203e2 	.word	0x03e203e2
  404a0c:	02eb03e2 	.word	0x02eb03e2
  404a10:	03e203e2 	.word	0x03e203e2
  404a14:	03e202ef 	.word	0x03e202ef
  404a18:	03e203e2 	.word	0x03e203e2
  404a1c:	03e20300 	.word	0x03e20300
  404a20:	03e20327 	.word	0x03e20327
  404a24:	029403e2 	.word	0x029403e2
  404a28:	03e203e2 	.word	0x03e203e2
  404a2c:	03e203e2 	.word	0x03e203e2
  404a30:	03e203e2 	.word	0x03e203e2
  404a34:	03e203e2 	.word	0x03e203e2
  404a38:	03e2034a 	.word	0x03e2034a
  404a3c:	0254037c 	.word	0x0254037c
  404a40:	034a034a 	.word	0x034a034a
  404a44:	02c3034a 	.word	0x02c3034a
  404a48:	005b0254 	.word	0x005b0254
  404a4c:	03b003e2 	.word	0x03b003e2
  404a50:	03ba03e2 	.word	0x03ba03e2
  404a54:	03380223 	.word	0x03380223
  404a58:	03e2005b 	.word	0x03e2005b
  404a5c:	00760300 	.word	0x00760300
  404a60:	03e2023e 	.word	0x03e2023e
  404a64:	00b303e2 	.word	0x00b303e2
  404a68:	007603e2 	.word	0x007603e2
  404a6c:	f048 0820 	orr.w	r8, r8, #32
  404a70:	783b      	ldrb	r3, [r7, #0]
  404a72:	e798      	b.n	4049a6 <.LVL22>
  404a74:	4658      	mov	r0, fp
  404a76:	f019 feaf 	bl	41e7d8 <_localeconv_r>

00404a7a <.LVL25>:
  404a7a:	6843      	ldr	r3, [r0, #4]
  404a7c:	9316      	str	r3, [sp, #88]	; 0x58

00404a7e <.LVL26>:
  404a7e:	4618      	mov	r0, r3
  404a80:	f013 fd7e 	bl	418580 <strlen>

00404a84 <.LVL27>:
  404a84:	9018      	str	r0, [sp, #96]	; 0x60

00404a86 <.LVL28>:
  404a86:	4658      	mov	r0, fp
  404a88:	f019 fea6 	bl	41e7d8 <_localeconv_r>

00404a8c <.LVL29>:
  404a8c:	6883      	ldr	r3, [r0, #8]
  404a8e:	9312      	str	r3, [sp, #72]	; 0x48

00404a90 <.LVL30>:
  404a90:	9b18      	ldr	r3, [sp, #96]	; 0x60

00404a92 <.LVL31>:
  404a92:	b133      	cbz	r3, 404aa2 <.LVL32>
  404a94:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404a96:	b123      	cbz	r3, 404aa2 <.LVL32>
  404a98:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404a9a:	781b      	ldrb	r3, [r3, #0]
  404a9c:	2b00      	cmp	r3, #0
  404a9e:	f041 8083 	bne.w	405ba8 <.LVL513>

00404aa2 <.LVL32>:
  404aa2:	783b      	ldrb	r3, [r7, #0]
  404aa4:	e77f      	b.n	4049a6 <.LVL22>

00404aa6 <.LVL33>:
  404aa6:	9a07      	ldr	r2, [sp, #28]
  404aa8:	930a      	str	r3, [sp, #40]	; 0x28
  404aaa:	4252      	negs	r2, r2
  404aac:	9207      	str	r2, [sp, #28]

00404aae <.LVL34>:
  404aae:	f048 0804 	orr.w	r8, r8, #4
  404ab2:	783b      	ldrb	r3, [r7, #0]
  404ab4:	e777      	b.n	4049a6 <.LVL22>

00404ab6 <.LVL36>:
  404ab6:	aa22      	add	r2, sp, #136	; 0x88
  404ab8:	9905      	ldr	r1, [sp, #20]
  404aba:	4658      	mov	r0, fp
  404abc:	f013 f8ce 	bl	417c5c <.LFE215>

00404ac0 <.LVL37>:
  404ac0:	b980      	cbnz	r0, 404ae4 <.LVL44>

00404ac2 <.LVL38>:
  404ac2:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00404ac6 <.LVL39>:
  404ac6:	e75b      	b.n	404980 <.LVL17>

00404ac8 <.LVL40>:
  404ac8:	aa22      	add	r2, sp, #136	; 0x88

00404aca <.LVL41>:
  404aca:	9905      	ldr	r1, [sp, #20]
  404acc:	4658      	mov	r0, fp
  404ace:	f013 f8c5 	bl	417c5c <.LFE215>

00404ad2 <.LVL42>:
  404ad2:	2800      	cmp	r0, #0
  404ad4:	f000 8182 	beq.w	404ddc <.LVL119>

00404ad8 <.L189>:
  404ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404ada:	b11b      	cbz	r3, 404ae4 <.LVL44>
  404adc:	9909      	ldr	r1, [sp, #36]	; 0x24
  404ade:	9811      	ldr	r0, [sp, #68]	; 0x44
  404ae0:	f010 fde2 	bl	4156a8 <_free_r>

00404ae4 <.LVL44>:
  404ae4:	9b05      	ldr	r3, [sp, #20]
  404ae6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
  404aea:	f013 0f40 	tst.w	r3, #64	; 0x40
  404aee:	9b03      	ldr	r3, [sp, #12]
  404af0:	bf18      	it	ne
  404af2:	f04f 33ff 	movne.w	r3, #4294967295
  404af6:	9303      	str	r3, [sp, #12]

00404af8 <.LVL45>:
  404af8:	9803      	ldr	r0, [sp, #12]
  404afa:	b04f      	add	sp, #316	; 0x13c

00404afc <.LCFI3>:
  404afc:	ecbd 8b06 	vpop	{d8-d10}

00404b00 <.LCFI4>:
  404b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00404b04 <.LVL46>:
  404b04:	f3af 8000 	nop.w
	...
  404b10:	ffffffff 	.word	0xffffffff
  404b14:	7fefffff 	.word	0x7fefffff
  404b18:	0041ed14 	.word	0x0041ed14

00404b1c <.L45>:
  404b1c:	930d      	str	r3, [sp, #52]	; 0x34
  404b1e:	f018 0f20 	tst.w	r8, #32
  404b22:	4bb4      	ldr	r3, [pc, #720]	; (404df4 <.LVL122+0x4>)
  404b24:	9314      	str	r3, [sp, #80]	; 0x50

00404b26 <.LVL48>:
  404b26:	f040 81e1 	bne.w	404eec <.LVL150>
  404b2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404b2c:	f018 0f10 	tst.w	r8, #16
  404b30:	4613      	mov	r3, r2
  404b32:	f040 859d 	bne.w	405670 <.LVL365>
  404b36:	f018 0f40 	tst.w	r8, #64	; 0x40
  404b3a:	f041 801d 	bne.w	405b78 <.LVL506>
  404b3e:	f418 7f00 	tst.w	r8, #512	; 0x200
  404b42:	f000 8595 	beq.w	405670 <.LVL365>

00404b46 <.LVL49>:
  404b46:	3304      	adds	r3, #4

00404b48 <.LVL50>:
  404b48:	7814      	ldrb	r4, [r2, #0]
  404b4a:	930a      	str	r3, [sp, #40]	; 0x28
  404b4c:	2500      	movs	r5, #0

00404b4e <.LVL51>:
  404b4e:	f018 0f01 	tst.w	r8, #1
  404b52:	d00b      	beq.n	404b6c <.LVL51+0x1e>
  404b54:	ea54 0305 	orrs.w	r3, r4, r5
  404b58:	d008      	beq.n	404b6c <.LVL51+0x1e>
  404b5a:	2330      	movs	r3, #48	; 0x30
  404b5c:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
  404b60:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
  404b64:	f048 0802 	orr.w	r8, r8, #2
  404b68:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
  404b6c:	f428 6180 	bic.w	r1, r8, #1024	; 0x400

00404b70 <.LVL53>:
  404b70:	2302      	movs	r3, #2

00404b72 <.L150>:
  404b72:	2200      	movs	r2, #0
  404b74:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b

00404b78 <.L65>:
  404b78:	9804      	ldr	r0, [sp, #16]
  404b7a:	1c42      	adds	r2, r0, #1
  404b7c:	f000 8190 	beq.w	404ea0 <.LVL139>

00404b80 <.LVL56>:
  404b80:	ea54 0205 	orrs.w	r2, r4, r5
  404b84:	f021 0880 	bic.w	r8, r1, #128	; 0x80

00404b88 <.LVL57>:
  404b88:	f040 818f 	bne.w	404eaa <.LVL140>
  404b8c:	2800      	cmp	r0, #0
  404b8e:	f040 8409 	bne.w	4053a4 <.LVL271>
  404b92:	2b00      	cmp	r3, #0
  404b94:	f040 84a2 	bne.w	4054dc <.LBE13>
  404b98:	f011 0301 	ands.w	r3, r1, #1

00404b9c <.LVL58>:
  404b9c:	ae4e      	add	r6, sp, #312	; 0x138

00404b9e <.LVL59>:
  404b9e:	9308      	str	r3, [sp, #32]
  404ba0:	d002      	beq.n	404ba8 <.LVL61>

00404ba2 <.LVL60>:
  404ba2:	2330      	movs	r3, #48	; 0x30
  404ba4:	f806 3d01 	strb.w	r3, [r6, #-1]!

00404ba8 <.LVL61>:
  404ba8:	2300      	movs	r3, #0
  404baa:	9a08      	ldr	r2, [sp, #32]
  404bac:	9309      	str	r3, [sp, #36]	; 0x24
  404bae:	9313      	str	r3, [sp, #76]	; 0x4c
  404bb0:	9310      	str	r3, [sp, #64]	; 0x40
  404bb2:	930e      	str	r3, [sp, #56]	; 0x38
  404bb4:	9b04      	ldr	r3, [sp, #16]
  404bb6:	4293      	cmp	r3, r2
  404bb8:	bfb8      	it	lt
  404bba:	4613      	movlt	r3, r2
  404bbc:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  404bc0:	9302      	str	r3, [sp, #8]

00404bc2 <.L59>:
  404bc2:	b112      	cbz	r2, 404bca <.LVL64>

00404bc4 <.LVL63>:
  404bc4:	9b02      	ldr	r3, [sp, #8]
  404bc6:	3301      	adds	r3, #1
  404bc8:	9302      	str	r3, [sp, #8]

00404bca <.LVL64>:
  404bca:	f018 0302 	ands.w	r3, r8, #2
  404bce:	930b      	str	r3, [sp, #44]	; 0x2c
  404bd0:	d002      	beq.n	404bd8 <.LVL64+0xe>
  404bd2:	9b02      	ldr	r3, [sp, #8]
  404bd4:	3302      	adds	r3, #2
  404bd6:	9302      	str	r3, [sp, #8]
  404bd8:	f018 0384 	ands.w	r3, r8, #132	; 0x84
  404bdc:	930c      	str	r3, [sp, #48]	; 0x30
  404bde:	f040 82ea 	bne.w	4051b6 <.LVL227>
  404be2:	9b07      	ldr	r3, [sp, #28]
  404be4:	9902      	ldr	r1, [sp, #8]
  404be6:	1a5c      	subs	r4, r3, r1

00404be8 <.LVL66>:
  404be8:	2c00      	cmp	r4, #0
  404bea:	f340 82e4 	ble.w	4051b6 <.LVL227>
  404bee:	2c10      	cmp	r4, #16
  404bf0:	9924      	ldr	r1, [sp, #144]	; 0x90
  404bf2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  404bf4:	4d80      	ldr	r5, [pc, #512]	; (404df8 <.LVL122+0x8>)
  404bf6:	dd25      	ble.n	404c44 <.LVL80>
  404bf8:	4648      	mov	r0, r9
  404bfa:	2310      	movs	r3, #16
  404bfc:	46c1      	mov	r9, r8
  404bfe:	46b0      	mov	r8, r6

00404c00 <.LVL67>:
  404c00:	9e05      	ldr	r6, [sp, #20]
  404c02:	e004      	b.n	404c0e <.LVL71>

00404c04 <.LVL68>:
  404c04:	3c10      	subs	r4, #16

00404c06 <.LVL69>:
  404c06:	2c10      	cmp	r4, #16
  404c08:	f100 0008 	add.w	r0, r0, #8

00404c0c <.LVL70>:
  404c0c:	dd17      	ble.n	404c3e <.LVL79>

00404c0e <.LVL71>:
  404c0e:	3201      	adds	r2, #1
  404c10:	3110      	adds	r1, #16
  404c12:	2a07      	cmp	r2, #7
  404c14:	9124      	str	r1, [sp, #144]	; 0x90

00404c16 <.LVL72>:
  404c16:	9223      	str	r2, [sp, #140]	; 0x8c
  404c18:	6005      	str	r5, [r0, #0]
  404c1a:	6043      	str	r3, [r0, #4]
  404c1c:	ddf2      	ble.n	404c04 <.LVL68>
  404c1e:	aa22      	add	r2, sp, #136	; 0x88
  404c20:	4631      	mov	r1, r6
  404c22:	4658      	mov	r0, fp

00404c24 <.LVL73>:
  404c24:	9306      	str	r3, [sp, #24]
  404c26:	f013 f819 	bl	417c5c <.LFE215>

00404c2a <.LVL74>:
  404c2a:	2800      	cmp	r0, #0
  404c2c:	f47f af54 	bne.w	404ad8 <.L189>
  404c30:	3c10      	subs	r4, #16

00404c32 <.LVL75>:
  404c32:	2c10      	cmp	r4, #16
  404c34:	9924      	ldr	r1, [sp, #144]	; 0x90
  404c36:	9a23      	ldr	r2, [sp, #140]	; 0x8c

00404c38 <.LVL76>:
  404c38:	9b06      	ldr	r3, [sp, #24]

00404c3a <.LVL77>:
  404c3a:	a825      	add	r0, sp, #148	; 0x94

00404c3c <.LVL78>:
  404c3c:	dce7      	bgt.n	404c0e <.LVL71>

00404c3e <.LVL79>:
  404c3e:	4646      	mov	r6, r8
  404c40:	46c8      	mov	r8, r9
  404c42:	4681      	mov	r9, r0

00404c44 <.LVL80>:
  404c44:	3201      	adds	r2, #1
  404c46:	1863      	adds	r3, r4, r1
  404c48:	2a07      	cmp	r2, #7
  404c4a:	9324      	str	r3, [sp, #144]	; 0x90
  404c4c:	9223      	str	r2, [sp, #140]	; 0x8c
  404c4e:	f8c9 5000 	str.w	r5, [r9]
  404c52:	f8c9 4004 	str.w	r4, [r9, #4]
  404c56:	f300 848f 	bgt.w	405578 <.LVL333>

00404c5a <.LVL81>:
  404c5a:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  404c5e:	f109 0908 	add.w	r9, r9, #8

00404c62 <.LVL82>:
  404c62:	b172      	cbz	r2, 404c82 <.LVL84>
  404c64:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  404c66:	3201      	adds	r2, #1
  404c68:	3301      	adds	r3, #1
  404c6a:	f10d 006b 	add.w	r0, sp, #107	; 0x6b
  404c6e:	2101      	movs	r1, #1
  404c70:	2a07      	cmp	r2, #7
  404c72:	9324      	str	r3, [sp, #144]	; 0x90
  404c74:	9223      	str	r2, [sp, #140]	; 0x8c
  404c76:	e889 0003 	stmia.w	r9, {r0, r1}
  404c7a:	f300 83a9 	bgt.w	4053d0 <.LVL278>

00404c7e <.LVL83>:
  404c7e:	f109 0908 	add.w	r9, r9, #8

00404c82 <.LVL84>:
  404c82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404c84:	b16a      	cbz	r2, 404ca2 <.LVL86>
  404c86:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  404c88:	3201      	adds	r2, #1
  404c8a:	3302      	adds	r3, #2
  404c8c:	a81b      	add	r0, sp, #108	; 0x6c
  404c8e:	2102      	movs	r1, #2
  404c90:	2a07      	cmp	r2, #7
  404c92:	9324      	str	r3, [sp, #144]	; 0x90
  404c94:	9223      	str	r2, [sp, #140]	; 0x8c
  404c96:	e889 0003 	stmia.w	r9, {r0, r1}
  404c9a:	f300 83a5 	bgt.w	4053e8 <.LVL282>

00404c9e <.LVL85>:
  404c9e:	f109 0908 	add.w	r9, r9, #8

00404ca2 <.LVL86>:
  404ca2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404ca4:	2a80      	cmp	r2, #128	; 0x80
  404ca6:	f000 82eb 	beq.w	405280 <.LVL243>
  404caa:	9a04      	ldr	r2, [sp, #16]
  404cac:	9908      	ldr	r1, [sp, #32]
  404cae:	1a54      	subs	r4, r2, r1

00404cb0 <.LVL87>:
  404cb0:	2c00      	cmp	r4, #0
  404cb2:	dd36      	ble.n	404d22 <.LVL102>
  404cb4:	2c10      	cmp	r4, #16
  404cb6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  404cb8:	dd26      	ble.n	404d08 <.LVL100>
  404cba:	4649      	mov	r1, r9
  404cbc:	2510      	movs	r5, #16
  404cbe:	46a1      	mov	r9, r4
  404cc0:	9c05      	ldr	r4, [sp, #20]

00404cc2 <.LVL88>:
  404cc2:	e006      	b.n	404cd2 <.LVL92>

00404cc4 <.LVL89>:
  404cc4:	f1a9 0910 	sub.w	r9, r9, #16

00404cc8 <.LVL90>:
  404cc8:	f1b9 0f10 	cmp.w	r9, #16
  404ccc:	f101 0108 	add.w	r1, r1, #8

00404cd0 <.LVL91>:
  404cd0:	dd18      	ble.n	404d04 <.LVL99>

00404cd2 <.LVL92>:
  404cd2:	3201      	adds	r2, #1
  404cd4:	3310      	adds	r3, #16
  404cd6:	2a07      	cmp	r2, #7
  404cd8:	9324      	str	r3, [sp, #144]	; 0x90

00404cda <.LVL93>:
  404cda:	9223      	str	r2, [sp, #140]	; 0x8c
  404cdc:	f8c1 a000 	str.w	sl, [r1]
  404ce0:	604d      	str	r5, [r1, #4]
  404ce2:	ddef      	ble.n	404cc4 <.LVL89>
  404ce4:	aa22      	add	r2, sp, #136	; 0x88
  404ce6:	4621      	mov	r1, r4

00404ce8 <.LVL94>:
  404ce8:	4658      	mov	r0, fp
  404cea:	f012 ffb7 	bl	417c5c <.LFE215>

00404cee <.LVL95>:
  404cee:	2800      	cmp	r0, #0
  404cf0:	f47f aef2 	bne.w	404ad8 <.L189>
  404cf4:	f1a9 0910 	sub.w	r9, r9, #16

00404cf8 <.LVL96>:
  404cf8:	f1b9 0f10 	cmp.w	r9, #16
  404cfc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404cfe:	9a23      	ldr	r2, [sp, #140]	; 0x8c

00404d00 <.LVL97>:
  404d00:	a925      	add	r1, sp, #148	; 0x94

00404d02 <.LVL98>:
  404d02:	dce6      	bgt.n	404cd2 <.LVL92>

00404d04 <.LVL99>:
  404d04:	464c      	mov	r4, r9
  404d06:	4689      	mov	r9, r1

00404d08 <.LVL100>:
  404d08:	3201      	adds	r2, #1
  404d0a:	4423      	add	r3, r4
  404d0c:	2a07      	cmp	r2, #7
  404d0e:	9324      	str	r3, [sp, #144]	; 0x90
  404d10:	9223      	str	r2, [sp, #140]	; 0x8c
  404d12:	f8c9 a000 	str.w	sl, [r9]
  404d16:	f8c9 4004 	str.w	r4, [r9, #4]
  404d1a:	f300 834d 	bgt.w	4053b8 <.LVL274>

00404d1e <.LVL101>:
  404d1e:	f109 0908 	add.w	r9, r9, #8

00404d22 <.LVL102>:
  404d22:	f418 7f80 	tst.w	r8, #256	; 0x100
  404d26:	f040 824f 	bne.w	4051c8 <.LVL228>
  404d2a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  404d2c:	9808      	ldr	r0, [sp, #32]
  404d2e:	f8c9 6000 	str.w	r6, [r9]
  404d32:	3201      	adds	r2, #1
  404d34:	4403      	add	r3, r0
  404d36:	2a07      	cmp	r2, #7
  404d38:	9324      	str	r3, [sp, #144]	; 0x90
  404d3a:	f8c9 0004 	str.w	r0, [r9, #4]
  404d3e:	9223      	str	r2, [sp, #140]	; 0x8c
  404d40:	f300 8324 	bgt.w	40538c <.LVL269>

00404d44 <.LVL103>:
  404d44:	f109 0908 	add.w	r9, r9, #8

00404d48 <.LVL104>:
  404d48:	f018 0f04 	tst.w	r8, #4
  404d4c:	d03b      	beq.n	404dc6 <.LVL117>
  404d4e:	9a07      	ldr	r2, [sp, #28]
  404d50:	9902      	ldr	r1, [sp, #8]
  404d52:	1a54      	subs	r4, r2, r1

00404d54 <.LVL105>:
  404d54:	2c00      	cmp	r4, #0
  404d56:	dd36      	ble.n	404dc6 <.LVL117>
  404d58:	2c10      	cmp	r4, #16
  404d5a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  404d5c:	4d26      	ldr	r5, [pc, #152]	; (404df8 <.LVL122+0x8>)
  404d5e:	dd1f      	ble.n	404da0 <.LVL115>
  404d60:	2610      	movs	r6, #16
  404d62:	f8dd 8014 	ldr.w	r8, [sp, #20]
  404d66:	e004      	b.n	404d72 <.LVL109>

00404d68 <.LVL106>:
  404d68:	3c10      	subs	r4, #16

00404d6a <.LVL107>:
  404d6a:	2c10      	cmp	r4, #16
  404d6c:	f109 0908 	add.w	r9, r9, #8

00404d70 <.LVL108>:
  404d70:	dd16      	ble.n	404da0 <.LVL115>

00404d72 <.LVL109>:
  404d72:	3201      	adds	r2, #1
  404d74:	3310      	adds	r3, #16
  404d76:	2a07      	cmp	r2, #7
  404d78:	9324      	str	r3, [sp, #144]	; 0x90

00404d7a <.LVL110>:
  404d7a:	9223      	str	r2, [sp, #140]	; 0x8c
  404d7c:	e889 0060 	stmia.w	r9, {r5, r6}
  404d80:	ddf2      	ble.n	404d68 <.LVL106>
  404d82:	aa22      	add	r2, sp, #136	; 0x88
  404d84:	4641      	mov	r1, r8
  404d86:	4658      	mov	r0, fp
  404d88:	f012 ff68 	bl	417c5c <.LFE215>

00404d8c <.LVL111>:
  404d8c:	2800      	cmp	r0, #0
  404d8e:	f47f aea3 	bne.w	404ad8 <.L189>
  404d92:	3c10      	subs	r4, #16

00404d94 <.LVL112>:
  404d94:	2c10      	cmp	r4, #16
  404d96:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404d98:	9a23      	ldr	r2, [sp, #140]	; 0x8c

00404d9a <.LVL113>:
  404d9a:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00404d9e <.LVL114>:
  404d9e:	dce8      	bgt.n	404d72 <.LVL109>

00404da0 <.LVL115>:
  404da0:	3201      	adds	r2, #1
  404da2:	4423      	add	r3, r4
  404da4:	2a07      	cmp	r2, #7
  404da6:	9324      	str	r3, [sp, #144]	; 0x90
  404da8:	9223      	str	r2, [sp, #140]	; 0x8c
  404daa:	f8c9 5000 	str.w	r5, [r9]
  404dae:	f8c9 4004 	str.w	r4, [r9, #4]
  404db2:	dd08      	ble.n	404dc6 <.LVL117>
  404db4:	aa22      	add	r2, sp, #136	; 0x88
  404db6:	9905      	ldr	r1, [sp, #20]
  404db8:	4658      	mov	r0, fp
  404dba:	f012 ff4f 	bl	417c5c <.LFE215>

00404dbe <.LVL116>:
  404dbe:	2800      	cmp	r0, #0
  404dc0:	f47f ae8a 	bne.w	404ad8 <.L189>
  404dc4:	9b24      	ldr	r3, [sp, #144]	; 0x90

00404dc6 <.LVL117>:
  404dc6:	9a03      	ldr	r2, [sp, #12]
  404dc8:	9907      	ldr	r1, [sp, #28]
  404dca:	9802      	ldr	r0, [sp, #8]
  404dcc:	4281      	cmp	r1, r0
  404dce:	bfac      	ite	ge
  404dd0:	1852      	addge	r2, r2, r1
  404dd2:	1812      	addlt	r2, r2, r0
  404dd4:	9203      	str	r2, [sp, #12]

00404dd6 <.LVL118>:
  404dd6:	2b00      	cmp	r3, #0
  404dd8:	f47f ae76 	bne.w	404ac8 <.LVL40>

00404ddc <.LVL119>:
  404ddc:	2300      	movs	r3, #0
  404dde:	9323      	str	r3, [sp, #140]	; 0x8c

00404de0 <.LVL120>:
  404de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404de2:	b11b      	cbz	r3, 404dec <.LVL121>
  404de4:	9909      	ldr	r1, [sp, #36]	; 0x24
  404de6:	4658      	mov	r0, fp
  404de8:	f010 fc5e 	bl	4156a8 <_free_r>

00404dec <.LVL121>:
  404dec:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00404df0 <.LVL122>:
  404df0:	463e      	mov	r6, r7
  404df2:	e5a8      	b.n	404946 <.LVL10>
  404df4:	0041d60c 	.word	0x0041d60c
  404df8:	0041ed04 	.word	0x0041ed04

00404dfc <.LVL123>:
  404dfc:	f018 0f20 	tst.w	r8, #32
  404e00:	930d      	str	r3, [sp, #52]	; 0x34
  404e02:	f040 80ce 	bne.w	404fa2 <.LVL168+0x1e>
  404e06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404e08:	f018 0f10 	tst.w	r8, #16
  404e0c:	4613      	mov	r3, r2
  404e0e:	f040 8419 	bne.w	405644 <.LVL358>
  404e12:	f018 0f40 	tst.w	r8, #64	; 0x40
  404e16:	f040 86a2 	bne.w	405b5e <.LVL502>
  404e1a:	f418 7f00 	tst.w	r8, #512	; 0x200
  404e1e:	f000 8411 	beq.w	405644 <.LVL358>

00404e22 <.LVL124>:
  404e22:	3304      	adds	r3, #4

00404e24 <.LVL125>:
  404e24:	7814      	ldrb	r4, [r2, #0]
  404e26:	930a      	str	r3, [sp, #40]	; 0x28
  404e28:	2500      	movs	r5, #0

00404e2a <.LVL126>:
  404e2a:	f428 6180 	bic.w	r1, r8, #1024	; 0x400

00404e2e <.LVL127>:
  404e2e:	2300      	movs	r3, #0
  404e30:	e69f      	b.n	404b72 <.L150>

00404e32 <.LVL128>:
  404e32:	4641      	mov	r1, r8

00404e34 <.LVL129>:
  404e34:	068e      	lsls	r6, r1, #26

00404e36 <.LVL130>:
  404e36:	930d      	str	r3, [sp, #52]	; 0x34
  404e38:	f100 80ea 	bmi.w	405010 <.LVL180+0x6>
  404e3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404e3e:	06cd      	lsls	r5, r1, #27
  404e40:	4613      	mov	r3, r2
  404e42:	f100 8405 	bmi.w	405650 <.LVL360>
  404e46:	064c      	lsls	r4, r1, #25
  404e48:	f100 868f 	bmi.w	405b6a <.LVL504>
  404e4c:	0588      	lsls	r0, r1, #22
  404e4e:	f140 83ff 	bpl.w	405650 <.LVL360>

00404e52 <.LVL131>:
  404e52:	7814      	ldrb	r4, [r2, #0]
  404e54:	3204      	adds	r2, #4

00404e56 <.LVL132>:
  404e56:	2500      	movs	r5, #0
  404e58:	2301      	movs	r3, #1
  404e5a:	920a      	str	r2, [sp, #40]	; 0x28
  404e5c:	e689      	b.n	404b72 <.L150>

00404e5e <.LVL133>:
  404e5e:	4641      	mov	r1, r8

00404e60 <.LVL134>:
  404e60:	068c      	lsls	r4, r1, #26
  404e62:	930d      	str	r3, [sp, #52]	; 0x34
  404e64:	f100 813f 	bmi.w	4050e6 <.LVL198+0x8>
  404e68:	06c8      	lsls	r0, r1, #27
  404e6a:	f100 83f8 	bmi.w	40565e <.LVL362>
  404e6e:	064a      	lsls	r2, r1, #25
  404e70:	f100 8688 	bmi.w	405b84 <.LVL508>
  404e74:	058b      	lsls	r3, r1, #22
  404e76:	f140 83f2 	bpl.w	40565e <.LVL362>

00404e7a <.LVL135>:
  404e7a:	980a      	ldr	r0, [sp, #40]	; 0x28
  404e7c:	f990 4000 	ldrsb.w	r4, [r0]

00404e80 <.LVL136>:
  404e80:	17e5      	asrs	r5, r4, #31
  404e82:	3004      	adds	r0, #4
  404e84:	4622      	mov	r2, r4
  404e86:	462b      	mov	r3, r5
  404e88:	900a      	str	r0, [sp, #40]	; 0x28

00404e8a <.LVL137>:
  404e8a:	2a00      	cmp	r2, #0
  404e8c:	f173 0300 	sbcs.w	r3, r3, #0
  404e90:	f2c0 8139 	blt.w	405106 <.LVL201>
  404e94:	9804      	ldr	r0, [sp, #16]
  404e96:	1c42      	adds	r2, r0, #1
  404e98:	f04f 0301 	mov.w	r3, #1

00404e9c <.LVL138>:
  404e9c:	f47f ae70 	bne.w	404b80 <.LVL56>

00404ea0 <.LVL139>:
  404ea0:	ea54 0205 	orrs.w	r2, r4, r5
  404ea4:	f000 827f 	beq.w	4053a6 <.LVL272>
  404ea8:	4688      	mov	r8, r1

00404eaa <.LVL140>:
  404eaa:	2b01      	cmp	r3, #1
  404eac:	f000 831e 	beq.w	4054ec <.LVL316>
  404eb0:	2b02      	cmp	r3, #2
  404eb2:	f040 82a8 	bne.w	405406 <.LVL288>

00404eb6 <.LVL141>:
  404eb6:	9814      	ldr	r0, [sp, #80]	; 0x50

00404eb8 <.LVL142>:
  404eb8:	ae4e      	add	r6, sp, #312	; 0x138

00404eba <.LVL143>:
  404eba:	0923      	lsrs	r3, r4, #4
  404ebc:	f004 010f 	and.w	r1, r4, #15
  404ec0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  404ec4:	092a      	lsrs	r2, r5, #4
  404ec6:	461c      	mov	r4, r3

00404ec8 <.LVL144>:
  404ec8:	4615      	mov	r5, r2

00404eca <.LVL145>:
  404eca:	5c43      	ldrb	r3, [r0, r1]
  404ecc:	f806 3d01 	strb.w	r3, [r6, #-1]!

00404ed0 <.LVL146>:
  404ed0:	ea54 0305 	orrs.w	r3, r4, r5
  404ed4:	d1f1      	bne.n	404eba <.LVL143>

00404ed6 <.LVL147>:
  404ed6:	ab4e      	add	r3, sp, #312	; 0x138
  404ed8:	1b9b      	subs	r3, r3, r6
  404eda:	9308      	str	r3, [sp, #32]
  404edc:	e664      	b.n	404ba8 <.LVL61>

00404ede <.LVL148>:
  404ede:	930d      	str	r3, [sp, #52]	; 0x34
  404ee0:	f018 0f20 	tst.w	r8, #32
  404ee4:	4bb5      	ldr	r3, [pc, #724]	; (4051bc <.LVL227+0x6>)
  404ee6:	9314      	str	r3, [sp, #80]	; 0x50

00404ee8 <.LVL149>:
  404ee8:	f43f ae1f 	beq.w	404b2a <.LVL48+0x4>

00404eec <.LVL150>:
  404eec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404eee:	3507      	adds	r5, #7
  404ef0:	f025 0307 	bic.w	r3, r5, #7
  404ef4:	f103 0208 	add.w	r2, r3, #8
  404ef8:	920a      	str	r2, [sp, #40]	; 0x28

00404efa <.LVL151>:
  404efa:	e9d3 4500 	ldrd	r4, r5, [r3]
  404efe:	e626      	b.n	404b4e <.LVL51>

00404f00 <.LVL152>:
  404f00:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
  404f04:	2b00      	cmp	r3, #0
  404f06:	f47f adcc 	bne.w	404aa2 <.LVL32>
  404f0a:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
  404f0e:	783b      	ldrb	r3, [r7, #0]
  404f10:	e549      	b.n	4049a6 <.LVL22>
  404f12:	f048 0801 	orr.w	r8, r8, #1
  404f16:	783b      	ldrb	r3, [r7, #0]
  404f18:	e545      	b.n	4049a6 <.LVL22>
  404f1a:	990a      	ldr	r1, [sp, #40]	; 0x28
  404f1c:	680b      	ldr	r3, [r1, #0]
  404f1e:	9307      	str	r3, [sp, #28]
  404f20:	461a      	mov	r2, r3
  404f22:	2a00      	cmp	r2, #0
  404f24:	460b      	mov	r3, r1
  404f26:	f103 0304 	add.w	r3, r3, #4

00404f2a <.LVL154>:
  404f2a:	f6ff adbc 	blt.w	404aa6 <.LVL33>
  404f2e:	930a      	str	r3, [sp, #40]	; 0x28
  404f30:	783b      	ldrb	r3, [r7, #0]

00404f32 <.LVL155>:
  404f32:	e538      	b.n	4049a6 <.LVL22>
  404f34:	f88d 406b 	strb.w	r4, [sp, #107]	; 0x6b
  404f38:	783b      	ldrb	r3, [r7, #0]
  404f3a:	e534      	b.n	4049a6 <.LVL22>

00404f3c <.LVL156>:
  404f3c:	783b      	ldrb	r3, [r7, #0]
  404f3e:	2b68      	cmp	r3, #104	; 0x68
  404f40:	bf03      	ittte	eq
  404f42:	787b      	ldrbeq	r3, [r7, #1]
  404f44:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
  404f48:	3701      	addeq	r7, #1

00404f4a <.LVL158>:
  404f4a:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
  404f4e:	e52a      	b.n	4049a6 <.LVL22>

00404f50 <.LVL160>:
  404f50:	783b      	ldrb	r3, [r7, #0]
  404f52:	2b2a      	cmp	r3, #42	; 0x2a
  404f54:	f107 0101 	add.w	r1, r7, #1

00404f58 <.LVL161>:
  404f58:	f001 811c 	beq.w	406194 <.LVL687>

00404f5c <.LVL162>:
  404f5c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  404f60:	2a09      	cmp	r2, #9
  404f62:	460f      	mov	r7, r1
  404f64:	f201 804a 	bhi.w	405ffc <.LVL637>
  404f68:	2300      	movs	r3, #0

00404f6a <.LVL163>:
  404f6a:	4619      	mov	r1, r3

00404f6c <.LVL164>:
  404f6c:	f817 3b01 	ldrb.w	r3, [r7], #1

00404f70 <.LVL165>:
  404f70:	eb01 0181 	add.w	r1, r1, r1, lsl #2

00404f74 <.LVL166>:
  404f74:	eb02 0141 	add.w	r1, r2, r1, lsl #1

00404f78 <.LVL167>:
  404f78:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  404f7c:	2a09      	cmp	r2, #9
  404f7e:	d9f5      	bls.n	404f6c <.LVL164>
  404f80:	9104      	str	r1, [sp, #16]
  404f82:	e511      	b.n	4049a8 <.LVL22+0x2>

00404f84 <.LVL168>:
  404f84:	f048 0880 	orr.w	r8, r8, #128	; 0x80
  404f88:	783b      	ldrb	r3, [r7, #0]
  404f8a:	e50c      	b.n	4049a6 <.LVL22>
  404f8c:	f048 0808 	orr.w	r8, r8, #8
  404f90:	783b      	ldrb	r3, [r7, #0]
  404f92:	e508      	b.n	4049a6 <.LVL22>
  404f94:	f048 0810 	orr.w	r8, r8, #16
  404f98:	f018 0f20 	tst.w	r8, #32
  404f9c:	930d      	str	r3, [sp, #52]	; 0x34
  404f9e:	f43f af32 	beq.w	404e06 <.LVL123+0xa>
  404fa2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404fa4:	3507      	adds	r5, #7
  404fa6:	f025 0307 	bic.w	r3, r5, #7
  404faa:	f103 0208 	add.w	r2, r3, #8
  404fae:	920a      	str	r2, [sp, #40]	; 0x28

00404fb0 <.LVL172>:
  404fb0:	e9d3 4500 	ldrd	r4, r5, [r3]
  404fb4:	e739      	b.n	404e2a <.LVL126>

00404fb6 <.LVL173>:
  404fb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404fb8:	930d      	str	r3, [sp, #52]	; 0x34
  404fba:	6816      	ldr	r6, [r2, #0]

00404fbc <.LVL174>:
  404fbc:	2400      	movs	r4, #0
  404fbe:	f88d 406b 	strb.w	r4, [sp, #107]	; 0x6b
  404fc2:	1d15      	adds	r5, r2, #4

00404fc4 <.LVL175>:
  404fc4:	2e00      	cmp	r6, #0
  404fc6:	f000 873d 	beq.w	405e44 <.LVL593>
  404fca:	9a04      	ldr	r2, [sp, #16]
  404fcc:	1c53      	adds	r3, r2, #1
  404fce:	f000 869b 	beq.w	405d08 <.LVL549>

00404fd2 <.LBB11>:
  404fd2:	4621      	mov	r1, r4
  404fd4:	4630      	mov	r0, r6
  404fd6:	f015 f8e3 	bl	41a1a0 <memchr>

00404fda <.LVL176>:
  404fda:	9009      	str	r0, [sp, #36]	; 0x24
  404fdc:	2800      	cmp	r0, #0
  404fde:	f000 8782 	beq.w	405ee6 <.LBB63>
  404fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404fe4:	9404      	str	r4, [sp, #16]
  404fe6:	1b9b      	subs	r3, r3, r6
  404fe8:	461a      	mov	r2, r3
  404fea:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  404fee:	9308      	str	r3, [sp, #32]

00404ff0 <.LBE11>:
  404ff0:	950a      	str	r5, [sp, #40]	; 0x28

00404ff2 <.LBB12>:
  404ff2:	4623      	mov	r3, r4
  404ff4:	9202      	str	r2, [sp, #8]

00404ff6 <.LBE12>:
  404ff6:	9309      	str	r3, [sp, #36]	; 0x24
  404ff8:	9313      	str	r3, [sp, #76]	; 0x4c
  404ffa:	9310      	str	r3, [sp, #64]	; 0x40
  404ffc:	930e      	str	r3, [sp, #56]	; 0x38
  404ffe:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  405002:	e5de      	b.n	404bc2 <.L59>

00405004 <.LVL178>:
  405004:	f048 0110 	orr.w	r1, r8, #16

00405008 <.LVL179>:
  405008:	068e      	lsls	r6, r1, #26

0040500a <.LVL180>:
  40500a:	930d      	str	r3, [sp, #52]	; 0x34
  40500c:	f57f af16 	bpl.w	404e3c <.LVL130+0x6>
  405010:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  405012:	3507      	adds	r5, #7
  405014:	f025 0307 	bic.w	r3, r5, #7
  405018:	f103 0208 	add.w	r2, r3, #8
  40501c:	e9d3 4500 	ldrd	r4, r5, [r3]
  405020:	920a      	str	r2, [sp, #40]	; 0x28

00405022 <.LVL181>:
  405022:	2301      	movs	r3, #1
  405024:	e5a5      	b.n	404b72 <.L150>

00405026 <.LVL182>:
  405026:	980a      	ldr	r0, [sp, #40]	; 0x28
  405028:	4b65      	ldr	r3, [pc, #404]	; (4051c0 <.LVL227+0xa>)
  40502a:	6804      	ldr	r4, [r0, #0]
  40502c:	9314      	str	r3, [sp, #80]	; 0x50

0040502e <.LVL183>:
  40502e:	2230      	movs	r2, #48	; 0x30
  405030:	2378      	movs	r3, #120	; 0x78
  405032:	3004      	adds	r0, #4

00405034 <.LVL184>:
  405034:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
  405038:	930d      	str	r3, [sp, #52]	; 0x34
  40503a:	f048 0102 	orr.w	r1, r8, #2
  40503e:	900a      	str	r0, [sp, #40]	; 0x28
  405040:	2500      	movs	r5, #0

00405042 <.LVL185>:
  405042:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c

00405046 <.LVL186>:
  405046:	2302      	movs	r3, #2
  405048:	e593      	b.n	404b72 <.L150>

0040504a <.LVL187>:
  40504a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40504c:	930d      	str	r3, [sp, #52]	; 0x34
  40504e:	f018 0f08 	tst.w	r8, #8
  405052:	f105 0507 	add.w	r5, r5, #7
  405056:	f000 84ed 	beq.w	405a34 <.LVL468>
  40505a:	f025 0307 	bic.w	r3, r5, #7
  40505e:	ed93 8b00 	vldr	d8, [r3]

00405062 <.LVL188>:
  405062:	f103 0208 	add.w	r2, r3, #8
  405066:	920a      	str	r2, [sp, #40]	; 0x28

00405068 <.LVL189>:
  405068:	eeb0 7bc8 	vabs.f64	d7, d8
  40506c:	eeb4 7b49 	vcmp.f64	d7, d9
  405070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405074:	f340 8439 	ble.w	4058ea <.LBE27>
  405078:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
  40507c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405080:	f100 86f0 	bmi.w	405e64 <.LVL595>
  405084:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  405088:	4e4e      	ldr	r6, [pc, #312]	; (4051c4 <.LVL227+0xe>)

0040508a <.LVL190>:
  40508a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40508c:	2303      	movs	r3, #3
  40508e:	2100      	movs	r1, #0
  405090:	4618      	mov	r0, r3
  405092:	9302      	str	r3, [sp, #8]
  405094:	1f33      	subs	r3, r6, #4
  405096:	9109      	str	r1, [sp, #36]	; 0x24
  405098:	f028 0880 	bic.w	r8, r8, #128	; 0x80

0040509c <.LVL191>:
  40509c:	2c47      	cmp	r4, #71	; 0x47
  40509e:	bfd8      	it	le
  4050a0:	461e      	movle	r6, r3

004050a2 <.LVL192>:
  4050a2:	9008      	str	r0, [sp, #32]
  4050a4:	9104      	str	r1, [sp, #16]
  4050a6:	9113      	str	r1, [sp, #76]	; 0x4c
  4050a8:	9110      	str	r1, [sp, #64]	; 0x40
  4050aa:	910e      	str	r1, [sp, #56]	; 0x38
  4050ac:	e589      	b.n	404bc2 <.L59>

004050ae <.LVL193>:
  4050ae:	980a      	ldr	r0, [sp, #40]	; 0x28
  4050b0:	930d      	str	r3, [sp, #52]	; 0x34
  4050b2:	6801      	ldr	r1, [r0, #0]
  4050b4:	f88d 10d4 	strb.w	r1, [sp, #212]	; 0xd4

004050b8 <.LVL194>:
  4050b8:	2300      	movs	r3, #0
  4050ba:	4601      	mov	r1, r0
  4050bc:	461a      	mov	r2, r3
  4050be:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
  4050c2:	3104      	adds	r1, #4

004050c4 <.LVL195>:
  4050c4:	2301      	movs	r3, #1
  4050c6:	9302      	str	r3, [sp, #8]
  4050c8:	9209      	str	r2, [sp, #36]	; 0x24
  4050ca:	9204      	str	r2, [sp, #16]
  4050cc:	9213      	str	r2, [sp, #76]	; 0x4c
  4050ce:	9210      	str	r2, [sp, #64]	; 0x40
  4050d0:	920e      	str	r2, [sp, #56]	; 0x38
  4050d2:	910a      	str	r1, [sp, #40]	; 0x28
  4050d4:	9308      	str	r3, [sp, #32]
  4050d6:	ae35      	add	r6, sp, #212	; 0xd4

004050d8 <.LVL196>:
  4050d8:	e577      	b.n	404bca <.LVL64>

004050da <.LVL197>:
  4050da:	f048 0110 	orr.w	r1, r8, #16

004050de <.LVL198>:
  4050de:	068c      	lsls	r4, r1, #26
  4050e0:	930d      	str	r3, [sp, #52]	; 0x34
  4050e2:	f57f aec1 	bpl.w	404e68 <.LVL134+0x8>
  4050e6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4050e8:	3507      	adds	r5, #7
  4050ea:	f025 0507 	bic.w	r5, r5, #7
  4050ee:	e9d5 2300 	ldrd	r2, r3, [r5]
  4050f2:	2a00      	cmp	r2, #0
  4050f4:	f105 0008 	add.w	r0, r5, #8
  4050f8:	461d      	mov	r5, r3
  4050fa:	f173 0300 	sbcs.w	r3, r3, #0
  4050fe:	900a      	str	r0, [sp, #40]	; 0x28

00405100 <.LVL199>:
  405100:	4614      	mov	r4, r2

00405102 <.LVL200>:
  405102:	f6bf aec7 	bge.w	404e94 <.LVL137+0xa>

00405106 <.LVL201>:
  405106:	232d      	movs	r3, #45	; 0x2d
  405108:	4264      	negs	r4, r4

0040510a <.LVL202>:
  40510a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
  40510e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1

00405112 <.LVL203>:
  405112:	2301      	movs	r3, #1
  405114:	e530      	b.n	404b78 <.L65>

00405116 <.LVL204>:
  405116:	783b      	ldrb	r3, [r7, #0]
  405118:	2b6c      	cmp	r3, #108	; 0x6c
  40511a:	bf03      	ittte	eq
  40511c:	787b      	ldrbeq	r3, [r7, #1]
  40511e:	f048 0820 	orreq.w	r8, r8, #32
  405122:	3701      	addeq	r7, #1

00405124 <.LVL206>:
  405124:	f048 0810 	orrne.w	r8, r8, #16
  405128:	e43d      	b.n	4049a6 <.LVL22>

0040512a <.LVL208>:
  40512a:	f018 0f20 	tst.w	r8, #32
  40512e:	f040 8509 	bne.w	405b44 <.LVL499>
  405132:	f018 0f10 	tst.w	r8, #16
  405136:	d135      	bne.n	4051a4 <.LVL222>
  405138:	f018 0f40 	tst.w	r8, #64	; 0x40
  40513c:	f040 8678 	bne.w	405e30 <.LBE23>
  405140:	f418 7f00 	tst.w	r8, #512	; 0x200
  405144:	d02e      	beq.n	4051a4 <.LVL222>

00405146 <.LVL209>:
  405146:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405148:	6813      	ldr	r3, [r2, #0]
  40514a:	3204      	adds	r2, #4

0040514c <.LVL210>:
  40514c:	920a      	str	r2, [sp, #40]	; 0x28
  40514e:	f89d 200c 	ldrb.w	r2, [sp, #12]

00405152 <.LVL211>:
  405152:	701a      	strb	r2, [r3, #0]
  405154:	463e      	mov	r6, r7

00405156 <.LVL212>:
  405156:	f7ff bbf6 	b.w	404946 <.LVL10>

0040515a <.LVL213>:
  40515a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40515e:	2300      	movs	r3, #0
  405160:	4619      	mov	r1, r3

00405162 <.LVL214>:
  405162:	f817 3b01 	ldrb.w	r3, [r7], #1

00405166 <.LVL215>:
  405166:	eb01 0181 	add.w	r1, r1, r1, lsl #2

0040516a <.LVL216>:
  40516a:	eb02 0141 	add.w	r1, r2, r1, lsl #1

0040516e <.LVL217>:
  40516e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  405172:	2a09      	cmp	r2, #9
  405174:	d9f5      	bls.n	405162 <.LVL214>
  405176:	9107      	str	r1, [sp, #28]
  405178:	e416      	b.n	4049a8 <.LVL22+0x2>

0040517a <.LVL218>:
  40517a:	4619      	mov	r1, r3
  40517c:	930d      	str	r3, [sp, #52]	; 0x34
  40517e:	2b00      	cmp	r3, #0
  405180:	f000 84cf 	beq.w	405b22 <.LDL1>

00405184 <.LVL219>:
  405184:	2300      	movs	r3, #0
  405186:	2001      	movs	r0, #1
  405188:	461a      	mov	r2, r3
  40518a:	9002      	str	r0, [sp, #8]
  40518c:	f88d 10d4 	strb.w	r1, [sp, #212]	; 0xd4

00405190 <.LVL220>:
  405190:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
  405194:	9309      	str	r3, [sp, #36]	; 0x24
  405196:	9304      	str	r3, [sp, #16]
  405198:	9313      	str	r3, [sp, #76]	; 0x4c
  40519a:	9310      	str	r3, [sp, #64]	; 0x40
  40519c:	930e      	str	r3, [sp, #56]	; 0x38
  40519e:	9008      	str	r0, [sp, #32]
  4051a0:	ae35      	add	r6, sp, #212	; 0xd4

004051a2 <.LVL221>:
  4051a2:	e512      	b.n	404bca <.LVL64>

004051a4 <.LVL222>:
  4051a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4051a6:	6813      	ldr	r3, [r2, #0]
  4051a8:	3204      	adds	r2, #4

004051aa <.LVL223>:
  4051aa:	920a      	str	r2, [sp, #40]	; 0x28
  4051ac:	9a03      	ldr	r2, [sp, #12]

004051ae <.LVL224>:
  4051ae:	601a      	str	r2, [r3, #0]

004051b0 <.LVL225>:
  4051b0:	463e      	mov	r6, r7

004051b2 <.LVL226>:
  4051b2:	f7ff bbc8 	b.w	404946 <.LVL10>

004051b6 <.LVL227>:
  4051b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4051b8:	e553      	b.n	404c62 <.LVL82>
  4051ba:	bf00      	nop
  4051bc:	0041d5f8 	.word	0x0041d5f8
  4051c0:	0041d60c 	.word	0x0041d60c
  4051c4:	0041d5ec 	.word	0x0041d5ec

004051c8 <.LVL228>:
  4051c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4051ca:	2a65      	cmp	r2, #101	; 0x65
  4051cc:	f340 8096 	ble.w	4052fc <.LVL260>
  4051d0:	eeb5 8b40 	vcmp.f64	d8, #0.0
  4051d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4051d8:	f040 8139 	bne.w	40544e <.LVL295>
  4051dc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  4051de:	49c2      	ldr	r1, [pc, #776]	; (4054e8 <.LVL315+0x6>)
  4051e0:	f8c9 1000 	str.w	r1, [r9]
  4051e4:	3201      	adds	r2, #1
  4051e6:	3301      	adds	r3, #1
  4051e8:	2101      	movs	r1, #1
  4051ea:	2a07      	cmp	r2, #7
  4051ec:	9324      	str	r3, [sp, #144]	; 0x90
  4051ee:	9223      	str	r2, [sp, #140]	; 0x8c
  4051f0:	f8c9 1004 	str.w	r1, [r9, #4]
  4051f4:	f300 8444 	bgt.w	405a80 <.LBE21>

004051f8 <.LVL229>:
  4051f8:	f109 0908 	add.w	r9, r9, #8

004051fc <.LVL230>:
  4051fc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  4051fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405200:	4293      	cmp	r3, r2
  405202:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405204:	db03      	blt.n	40520e <.LVL230+0x12>
  405206:	f018 0f01 	tst.w	r8, #1
  40520a:	f43f ad9d 	beq.w	404d48 <.LVL104>
  40520e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  405210:	9815      	ldr	r0, [sp, #84]	; 0x54
  405212:	9917      	ldr	r1, [sp, #92]	; 0x5c
  405214:	f8c9 1000 	str.w	r1, [r9]
  405218:	3201      	adds	r2, #1
  40521a:	4403      	add	r3, r0
  40521c:	2a07      	cmp	r2, #7
  40521e:	f8c9 0004 	str.w	r0, [r9, #4]
  405222:	9324      	str	r3, [sp, #144]	; 0x90

00405224 <.LVL231>:
  405224:	9223      	str	r2, [sp, #140]	; 0x8c
  405226:	f300 84b2 	bgt.w	405b8e <.LVL509>

0040522a <.LVL232>:
  40522a:	f109 0908 	add.w	r9, r9, #8

0040522e <.LVL233>:
  40522e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405230:	1e54      	subs	r4, r2, #1
  405232:	2c00      	cmp	r4, #0
  405234:	f77f ad88 	ble.w	404d48 <.LVL104>
  405238:	2c10      	cmp	r4, #16
  40523a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40523c:	f340 8308 	ble.w	405850 <.LVL421>
  405240:	2510      	movs	r5, #16
  405242:	9e05      	ldr	r6, [sp, #20]
  405244:	e005      	b.n	405252 <.LVL238>

00405246 <.LVL235>:
  405246:	f109 0908 	add.w	r9, r9, #8

0040524a <.LVL236>:
  40524a:	3c10      	subs	r4, #16
  40524c:	2c10      	cmp	r4, #16
  40524e:	f340 82ff 	ble.w	405850 <.LVL421>

00405252 <.LVL238>:
  405252:	3201      	adds	r2, #1
  405254:	3310      	adds	r3, #16
  405256:	2a07      	cmp	r2, #7
  405258:	9324      	str	r3, [sp, #144]	; 0x90

0040525a <.LVL239>:
  40525a:	9223      	str	r2, [sp, #140]	; 0x8c
  40525c:	f8c9 a000 	str.w	sl, [r9]
  405260:	f8c9 5004 	str.w	r5, [r9, #4]
  405264:	ddef      	ble.n	405246 <.LVL235>
  405266:	aa22      	add	r2, sp, #136	; 0x88
  405268:	4631      	mov	r1, r6
  40526a:	4658      	mov	r0, fp
  40526c:	f012 fcf6 	bl	417c5c <.LFE215>

00405270 <.LVL240>:
  405270:	2800      	cmp	r0, #0
  405272:	f47f ac31 	bne.w	404ad8 <.L189>
  405276:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405278:	9a23      	ldr	r2, [sp, #140]	; 0x8c

0040527a <.LVL241>:
  40527a:	f10d 0994 	add.w	r9, sp, #148	; 0x94

0040527e <.LVL242>:
  40527e:	e7e4      	b.n	40524a <.LVL236>

00405280 <.LVL243>:
  405280:	9a07      	ldr	r2, [sp, #28]
  405282:	9902      	ldr	r1, [sp, #8]
  405284:	1a54      	subs	r4, r2, r1

00405286 <.LVL244>:
  405286:	2c00      	cmp	r4, #0
  405288:	f77f ad0f 	ble.w	404caa <.LVL86+0x8>
  40528c:	2c10      	cmp	r4, #16
  40528e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  405290:	dd26      	ble.n	4052e0 <.LVL257>
  405292:	4649      	mov	r1, r9
  405294:	2510      	movs	r5, #16
  405296:	46a1      	mov	r9, r4
  405298:	9c05      	ldr	r4, [sp, #20]

0040529a <.LVL245>:
  40529a:	e006      	b.n	4052aa <.LVL249>

0040529c <.LVL246>:
  40529c:	f1a9 0910 	sub.w	r9, r9, #16

004052a0 <.LVL247>:
  4052a0:	f1b9 0f10 	cmp.w	r9, #16
  4052a4:	f101 0108 	add.w	r1, r1, #8

004052a8 <.LVL248>:
  4052a8:	dd18      	ble.n	4052dc <.LVL256>

004052aa <.LVL249>:
  4052aa:	3201      	adds	r2, #1
  4052ac:	3310      	adds	r3, #16
  4052ae:	2a07      	cmp	r2, #7
  4052b0:	9324      	str	r3, [sp, #144]	; 0x90

004052b2 <.LVL250>:
  4052b2:	9223      	str	r2, [sp, #140]	; 0x8c
  4052b4:	f8c1 a000 	str.w	sl, [r1]
  4052b8:	604d      	str	r5, [r1, #4]
  4052ba:	ddef      	ble.n	40529c <.LVL246>
  4052bc:	aa22      	add	r2, sp, #136	; 0x88
  4052be:	4621      	mov	r1, r4

004052c0 <.LVL251>:
  4052c0:	4658      	mov	r0, fp
  4052c2:	f012 fccb 	bl	417c5c <.LFE215>

004052c6 <.LVL252>:
  4052c6:	2800      	cmp	r0, #0
  4052c8:	f47f ac06 	bne.w	404ad8 <.L189>
  4052cc:	f1a9 0910 	sub.w	r9, r9, #16

004052d0 <.LVL253>:
  4052d0:	f1b9 0f10 	cmp.w	r9, #16
  4052d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4052d6:	9a23      	ldr	r2, [sp, #140]	; 0x8c

004052d8 <.LVL254>:
  4052d8:	a925      	add	r1, sp, #148	; 0x94

004052da <.LVL255>:
  4052da:	dce6      	bgt.n	4052aa <.LVL249>

004052dc <.LVL256>:
  4052dc:	464c      	mov	r4, r9
  4052de:	4689      	mov	r9, r1

004052e0 <.LVL257>:
  4052e0:	3201      	adds	r2, #1
  4052e2:	4423      	add	r3, r4
  4052e4:	2a07      	cmp	r2, #7
  4052e6:	9324      	str	r3, [sp, #144]	; 0x90
  4052e8:	9223      	str	r2, [sp, #140]	; 0x8c
  4052ea:	f8c9 a000 	str.w	sl, [r9]
  4052ee:	f8c9 4004 	str.w	r4, [r9, #4]
  4052f2:	f300 82e6 	bgt.w	4058c2 <.LVL432>

004052f6 <.LVL258>:
  4052f6:	f109 0908 	add.w	r9, r9, #8

004052fa <.LVL259>:
  4052fa:	e4d6      	b.n	404caa <.LVL86+0x8>

004052fc <.LVL260>:
  4052fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4052fe:	f8c9 6000 	str.w	r6, [r9]
  405302:	2a01      	cmp	r2, #1
  405304:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  405306:	f103 0301 	add.w	r3, r3, #1
  40530a:	f102 0201 	add.w	r2, r2, #1
  40530e:	f04f 0101 	mov.w	r1, #1
  405312:	9324      	str	r3, [sp, #144]	; 0x90
  405314:	9223      	str	r2, [sp, #140]	; 0x8c
  405316:	f8c9 1004 	str.w	r1, [r9, #4]
  40531a:	f340 82a5 	ble.w	405868 <.LBE19>
  40531e:	2a07      	cmp	r2, #7
  405320:	f300 82b5 	bgt.w	40588e <.LBE26>
  405324:	f109 0908 	add.w	r9, r9, #8

00405328 <.LVL261>:
  405328:	9815      	ldr	r0, [sp, #84]	; 0x54
  40532a:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40532c:	f8c9 1000 	str.w	r1, [r9]
  405330:	3201      	adds	r2, #1
  405332:	4403      	add	r3, r0
  405334:	2a07      	cmp	r2, #7
  405336:	9324      	str	r3, [sp, #144]	; 0x90

00405338 <.LVL262>:
  405338:	9223      	str	r2, [sp, #140]	; 0x8c
  40533a:	f8c9 0004 	str.w	r0, [r9, #4]
  40533e:	f300 82b3 	bgt.w	4058a8 <.LVL429>
  405342:	f109 0908 	add.w	r9, r9, #8

00405346 <.LVL263>:
  405346:	eeb5 8b40 	vcmp.f64	d8, #0.0
  40534a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40534e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405350:	f000 8121 	beq.w	405596 <.LVL337>
  405354:	3901      	subs	r1, #1
  405356:	3201      	adds	r2, #1
  405358:	3601      	adds	r6, #1

0040535a <.LVL264>:
  40535a:	440b      	add	r3, r1
  40535c:	2a07      	cmp	r2, #7
  40535e:	f8c9 6000 	str.w	r6, [r9]
  405362:	9223      	str	r2, [sp, #140]	; 0x8c
  405364:	9324      	str	r3, [sp, #144]	; 0x90

00405366 <.LVL265>:
  405366:	f8c9 1004 	str.w	r1, [r9, #4]
  40536a:	f300 8146 	bgt.w	4055fa <.LVL348>

0040536e <.LVL266>:
  40536e:	f109 0908 	add.w	r9, r9, #8

00405372 <.LVL267>:
  405372:	9819      	ldr	r0, [sp, #100]	; 0x64
  405374:	f8c9 0004 	str.w	r0, [r9, #4]
  405378:	3201      	adds	r2, #1
  40537a:	4403      	add	r3, r0
  40537c:	a91e      	add	r1, sp, #120	; 0x78
  40537e:	2a07      	cmp	r2, #7
  405380:	9324      	str	r3, [sp, #144]	; 0x90

00405382 <.LVL268>:
  405382:	9223      	str	r2, [sp, #140]	; 0x8c
  405384:	f8c9 1000 	str.w	r1, [r9]
  405388:	f77f acdc 	ble.w	404d44 <.LVL103>

0040538c <.LVL269>:
  40538c:	aa22      	add	r2, sp, #136	; 0x88
  40538e:	9905      	ldr	r1, [sp, #20]
  405390:	4658      	mov	r0, fp
  405392:	f012 fc63 	bl	417c5c <.LFE215>

00405396 <.LVL270>:
  405396:	2800      	cmp	r0, #0
  405398:	f47f ab9e 	bne.w	404ad8 <.L189>
  40539c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40539e:	f10d 0994 	add.w	r9, sp, #148	; 0x94
  4053a2:	e4d1      	b.n	404d48 <.LVL104>

004053a4 <.LVL271>:
  4053a4:	4641      	mov	r1, r8

004053a6 <.LVL272>:
  4053a6:	2b01      	cmp	r3, #1
  4053a8:	f000 8135 	beq.w	405616 <.LVL351>
  4053ac:	2b02      	cmp	r3, #2
  4053ae:	d127      	bne.n	405400 <.LVL286>
  4053b0:	4688      	mov	r8, r1
  4053b2:	2400      	movs	r4, #0

004053b4 <.LVL273>:
  4053b4:	2500      	movs	r5, #0
  4053b6:	e57e      	b.n	404eb6 <.LVL141>

004053b8 <.LVL274>:
  4053b8:	aa22      	add	r2, sp, #136	; 0x88
  4053ba:	9905      	ldr	r1, [sp, #20]
  4053bc:	4658      	mov	r0, fp
  4053be:	f012 fc4d 	bl	417c5c <.LFE215>

004053c2 <.LVL275>:
  4053c2:	2800      	cmp	r0, #0
  4053c4:	f47f ab88 	bne.w	404ad8 <.L189>
  4053c8:	9b24      	ldr	r3, [sp, #144]	; 0x90

004053ca <.LVL276>:
  4053ca:	f10d 0994 	add.w	r9, sp, #148	; 0x94

004053ce <.LVL277>:
  4053ce:	e4a8      	b.n	404d22 <.LVL102>

004053d0 <.LVL278>:
  4053d0:	aa22      	add	r2, sp, #136	; 0x88
  4053d2:	9905      	ldr	r1, [sp, #20]
  4053d4:	4658      	mov	r0, fp
  4053d6:	f012 fc41 	bl	417c5c <.LFE215>

004053da <.LVL279>:
  4053da:	2800      	cmp	r0, #0
  4053dc:	f47f ab7c 	bne.w	404ad8 <.L189>
  4053e0:	9b24      	ldr	r3, [sp, #144]	; 0x90

004053e2 <.LVL280>:
  4053e2:	f10d 0994 	add.w	r9, sp, #148	; 0x94

004053e6 <.LVL281>:
  4053e6:	e44c      	b.n	404c82 <.LVL84>

004053e8 <.LVL282>:
  4053e8:	aa22      	add	r2, sp, #136	; 0x88
  4053ea:	9905      	ldr	r1, [sp, #20]
  4053ec:	4658      	mov	r0, fp
  4053ee:	f012 fc35 	bl	417c5c <.LFE215>

004053f2 <.LVL283>:
  4053f2:	2800      	cmp	r0, #0
  4053f4:	f47f ab70 	bne.w	404ad8 <.L189>
  4053f8:	9b24      	ldr	r3, [sp, #144]	; 0x90

004053fa <.LVL284>:
  4053fa:	f10d 0994 	add.w	r9, sp, #148	; 0x94

004053fe <.LVL285>:
  4053fe:	e450      	b.n	404ca2 <.LVL86>

00405400 <.LVL286>:
  405400:	4688      	mov	r8, r1
  405402:	2400      	movs	r4, #0

00405404 <.LVL287>:
  405404:	2500      	movs	r5, #0

00405406 <.LVL288>:
  405406:	a94e      	add	r1, sp, #312	; 0x138

00405408 <.LVL289>:
  405408:	e000      	b.n	40540c <.LVL291>

0040540a <.LVL290>:
  40540a:	4631      	mov	r1, r6

0040540c <.LVL291>:
  40540c:	08e2      	lsrs	r2, r4, #3
  40540e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  405412:	08e8      	lsrs	r0, r5, #3
  405414:	f004 0307 	and.w	r3, r4, #7
  405418:	4605      	mov	r5, r0
  40541a:	4614      	mov	r4, r2

0040541c <.LVL292>:
  40541c:	3330      	adds	r3, #48	; 0x30
  40541e:	ea54 0205 	orrs.w	r2, r4, r5
  405422:	f801 3c01 	strb.w	r3, [r1, #-1]
  405426:	f101 36ff 	add.w	r6, r1, #4294967295

0040542a <.LVL293>:
  40542a:	d1ee      	bne.n	40540a <.LVL290>
  40542c:	f018 0f01 	tst.w	r8, #1
  405430:	f43f ad51 	beq.w	404ed6 <.LVL147>
  405434:	2b30      	cmp	r3, #48	; 0x30
  405436:	f43f ad4e 	beq.w	404ed6 <.LVL147>
  40543a:	2330      	movs	r3, #48	; 0x30
  40543c:	3902      	subs	r1, #2

0040543e <.LVL294>:
  40543e:	f806 3c01 	strb.w	r3, [r6, #-1]
  405442:	ab4e      	add	r3, sp, #312	; 0x138
  405444:	1a5b      	subs	r3, r3, r1
  405446:	9308      	str	r3, [sp, #32]
  405448:	460e      	mov	r6, r1
  40544a:	f7ff bbad 	b.w	404ba8 <.LVL61>

0040544e <.LVL295>:
  40544e:	991c      	ldr	r1, [sp, #112]	; 0x70
  405450:	2900      	cmp	r1, #0
  405452:	f340 832f 	ble.w	405ab4 <.LBE46>

00405456 <.LVL296>:
  405456:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405458:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40545a:	428a      	cmp	r2, r1
  40545c:	bfa8      	it	ge
  40545e:	460a      	movge	r2, r1

00405460 <.LBB13>:
  405460:	2a00      	cmp	r2, #0
  405462:	4614      	mov	r4, r2

00405464 <.LVL297>:
  405464:	dd0d      	ble.n	405482 <.LVL300>
  405466:	9a23      	ldr	r2, [sp, #140]	; 0x8c

00405468 <.LVL298>:
  405468:	f8c9 6000 	str.w	r6, [r9]
  40546c:	3201      	adds	r2, #1
  40546e:	4423      	add	r3, r4
  405470:	2a07      	cmp	r2, #7
  405472:	9324      	str	r3, [sp, #144]	; 0x90
  405474:	f8c9 4004 	str.w	r4, [r9, #4]
  405478:	9223      	str	r2, [sp, #140]	; 0x8c
  40547a:	f300 84cc 	bgt.w	405e16 <.LBB23>

0040547e <.LVL299>:
  40547e:	f109 0908 	add.w	r9, r9, #8

00405482 <.LVL300>:
  405482:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405484:	2c00      	cmp	r4, #0
  405486:	bfa8      	it	ge
  405488:	1b12      	subge	r2, r2, r4
  40548a:	2a00      	cmp	r2, #0
  40548c:	4614      	mov	r4, r2

0040548e <.LVL301>:
  40548e:	f340 8100 	ble.w	405692 <.LBE15>
  405492:	2c10      	cmp	r4, #16
  405494:	9a23      	ldr	r2, [sp, #140]	; 0x8c

00405496 <.LVL302>:
  405496:	f340 82d8 	ble.w	405a4a <.LBB20>
  40549a:	4649      	mov	r1, r9
  40549c:	2510      	movs	r5, #16
  40549e:	46a1      	mov	r9, r4
  4054a0:	9c05      	ldr	r4, [sp, #20]

004054a2 <.LVL303>:
  4054a2:	e006      	b.n	4054b2 <.LVL307>

004054a4 <.LVL304>:
  4054a4:	3108      	adds	r1, #8

004054a6 <.LVL305>:
  4054a6:	f1a9 0910 	sub.w	r9, r9, #16
  4054aa:	f1b9 0f10 	cmp.w	r9, #16
  4054ae:	f340 82ca 	ble.w	405a46 <.LVL471>

004054b2 <.LVL307>:
  4054b2:	3201      	adds	r2, #1
  4054b4:	3310      	adds	r3, #16
  4054b6:	2a07      	cmp	r2, #7
  4054b8:	9324      	str	r3, [sp, #144]	; 0x90

004054ba <.LVL308>:
  4054ba:	9223      	str	r2, [sp, #140]	; 0x8c
  4054bc:	f8c1 a000 	str.w	sl, [r1]
  4054c0:	604d      	str	r5, [r1, #4]
  4054c2:	ddef      	ble.n	4054a4 <.LVL304>
  4054c4:	aa22      	add	r2, sp, #136	; 0x88
  4054c6:	4621      	mov	r1, r4

004054c8 <.LVL309>:
  4054c8:	4658      	mov	r0, fp
  4054ca:	f012 fbc7 	bl	417c5c <.LFE215>

004054ce <.LVL310>:
  4054ce:	2800      	cmp	r0, #0
  4054d0:	f47f ab02 	bne.w	404ad8 <.L189>
  4054d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4054d6:	9a23      	ldr	r2, [sp, #140]	; 0x8c

004054d8 <.LVL311>:
  4054d8:	a925      	add	r1, sp, #148	; 0x94

004054da <.LVL312>:
  4054da:	e7e4      	b.n	4054a6 <.LVL305>

004054dc <.LBE13>:
  4054dc:	9b04      	ldr	r3, [sp, #16]

004054de <.LVL314>:
  4054de:	9308      	str	r3, [sp, #32]
  4054e0:	ae4e      	add	r6, sp, #312	; 0x138

004054e2 <.LVL315>:
  4054e2:	f7ff bb61 	b.w	404ba8 <.LVL61>
  4054e6:	bf00      	nop
  4054e8:	0041d628 	.word	0x0041d628

004054ec <.LVL316>:
  4054ec:	2d00      	cmp	r5, #0
  4054ee:	bf08      	it	eq
  4054f0:	2c0a      	cmpeq	r4, #10
  4054f2:	f0c0 808f 	bcc.w	405614 <.LVL350>
  4054f6:	f408 6380 	and.w	r3, r8, #1024	; 0x400

004054fa <.LVL317>:
  4054fa:	2200      	movs	r2, #0
  4054fc:	9702      	str	r7, [sp, #8]
  4054fe:	f8cd 9018 	str.w	r9, [sp, #24]
  405502:	f8cd b020 	str.w	fp, [sp, #32]
  405506:	ae4e      	add	r6, sp, #312	; 0x138

00405508 <.LVL318>:
  405508:	46c3      	mov	fp, r8
  40550a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48

0040550e <.LVL319>:
  40550e:	4617      	mov	r7, r2

00405510 <.LVL320>:
  405510:	4698      	mov	r8, r3

00405512 <.LVL321>:
  405512:	e00a      	b.n	40552a <.LVL325+0x6>

00405514 <.LVL322>:
  405514:	2300      	movs	r3, #0
  405516:	4620      	mov	r0, r4
  405518:	4629      	mov	r1, r5
  40551a:	220a      	movs	r2, #10
  40551c:	f018 fd36 	bl	41df8c <.LBE14>
  405520:	4604      	mov	r4, r0

00405522 <.LVL324>:
  405522:	460d      	mov	r5, r1

00405524 <.LVL325>:
  405524:	ea54 0305 	orrs.w	r3, r4, r5
  405528:	d07e      	beq.n	405628 <.LVL354>
  40552a:	220a      	movs	r2, #10
  40552c:	2300      	movs	r3, #0
  40552e:	4620      	mov	r0, r4
  405530:	4629      	mov	r1, r5
  405532:	f018 fd2b 	bl	41df8c <.LBE14>
  405536:	3230      	adds	r2, #48	; 0x30
  405538:	f806 2c01 	strb.w	r2, [r6, #-1]
  40553c:	3701      	adds	r7, #1

0040553e <.LVL328>:
  40553e:	3e01      	subs	r6, #1

00405540 <.LVL329>:
  405540:	f1b8 0f00 	cmp.w	r8, #0
  405544:	d0e6      	beq.n	405514 <.LVL322>
  405546:	f899 3000 	ldrb.w	r3, [r9]
  40554a:	429f      	cmp	r7, r3
  40554c:	d1e2      	bne.n	405514 <.LVL322>
  40554e:	2fff      	cmp	r7, #255	; 0xff
  405550:	d0e0      	beq.n	405514 <.LVL322>
  405552:	2d00      	cmp	r5, #0
  405554:	bf08      	it	eq
  405556:	2c0a      	cmpeq	r4, #10
  405558:	d3dc      	bcc.n	405514 <.LVL322>
  40555a:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40555c:	9916      	ldr	r1, [sp, #88]	; 0x58
  40555e:	1af6      	subs	r6, r6, r3
  405560:	4630      	mov	r0, r6
  405562:	461a      	mov	r2, r3
  405564:	f017 f8ec 	bl	41c740 <strncpy>

00405568 <.LVL331>:
  405568:	f899 7001 	ldrb.w	r7, [r9, #1]
  40556c:	2f00      	cmp	r7, #0
  40556e:	d0d1      	beq.n	405514 <.LVL322>
  405570:	f109 0901 	add.w	r9, r9, #1
  405574:	2700      	movs	r7, #0
  405576:	e7cd      	b.n	405514 <.LVL322>

00405578 <.LVL333>:
  405578:	aa22      	add	r2, sp, #136	; 0x88
  40557a:	9905      	ldr	r1, [sp, #20]
  40557c:	4658      	mov	r0, fp
  40557e:	f012 fb6d 	bl	417c5c <.LFE215>

00405582 <.LVL334>:
  405582:	2800      	cmp	r0, #0
  405584:	f47f aaa8 	bne.w	404ad8 <.L189>
  405588:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  40558c:	9b24      	ldr	r3, [sp, #144]	; 0x90

0040558e <.LVL335>:
  40558e:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00405592 <.LVL336>:
  405592:	f7ff bb66 	b.w	404c62 <.LVL82>

00405596 <.LVL337>:
  405596:	1e4c      	subs	r4, r1, #1
  405598:	2c00      	cmp	r4, #0
  40559a:	f77f aeea 	ble.w	405372 <.LVL267>
  40559e:	2c10      	cmp	r4, #16
  4055a0:	dd20      	ble.n	4055e4 <.LVL346+0x2>
  4055a2:	2510      	movs	r5, #16
  4055a4:	9e05      	ldr	r6, [sp, #20]

004055a6 <.LVL339>:
  4055a6:	e004      	b.n	4055b2 <.LVL342+0x2>

004055a8 <.LVL340>:
  4055a8:	3c10      	subs	r4, #16

004055aa <.LVL341>:
  4055aa:	2c10      	cmp	r4, #16
  4055ac:	f109 0908 	add.w	r9, r9, #8

004055b0 <.LVL342>:
  4055b0:	dd18      	ble.n	4055e4 <.LVL346+0x2>
  4055b2:	3201      	adds	r2, #1
  4055b4:	3310      	adds	r3, #16
  4055b6:	2a07      	cmp	r2, #7
  4055b8:	9324      	str	r3, [sp, #144]	; 0x90

004055ba <.LVL343>:
  4055ba:	9223      	str	r2, [sp, #140]	; 0x8c
  4055bc:	f8c9 a000 	str.w	sl, [r9]
  4055c0:	f8c9 5004 	str.w	r5, [r9, #4]
  4055c4:	ddf0      	ble.n	4055a8 <.LVL340>
  4055c6:	aa22      	add	r2, sp, #136	; 0x88
  4055c8:	4631      	mov	r1, r6
  4055ca:	4658      	mov	r0, fp
  4055cc:	f012 fb46 	bl	417c5c <.LFE215>

004055d0 <.LVL344>:
  4055d0:	2800      	cmp	r0, #0
  4055d2:	f47f aa81 	bne.w	404ad8 <.L189>
  4055d6:	3c10      	subs	r4, #16

004055d8 <.LVL345>:
  4055d8:	2c10      	cmp	r4, #16
  4055da:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4055dc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  4055de:	f10d 0994 	add.w	r9, sp, #148	; 0x94

004055e2 <.LVL346>:
  4055e2:	dce6      	bgt.n	4055b2 <.LVL342+0x2>
  4055e4:	3201      	adds	r2, #1
  4055e6:	4423      	add	r3, r4
  4055e8:	2a07      	cmp	r2, #7
  4055ea:	9324      	str	r3, [sp, #144]	; 0x90

004055ec <.LVL347>:
  4055ec:	9223      	str	r2, [sp, #140]	; 0x8c
  4055ee:	f8c9 a000 	str.w	sl, [r9]
  4055f2:	f8c9 4004 	str.w	r4, [r9, #4]
  4055f6:	f77f aeba 	ble.w	40536e <.LVL266>

004055fa <.LVL348>:
  4055fa:	aa22      	add	r2, sp, #136	; 0x88
  4055fc:	9905      	ldr	r1, [sp, #20]
  4055fe:	4658      	mov	r0, fp
  405600:	f012 fb2c 	bl	417c5c <.LFE215>

00405604 <.LVL349>:
  405604:	2800      	cmp	r0, #0
  405606:	f47f aa67 	bne.w	404ad8 <.L189>
  40560a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40560c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40560e:	f10d 0994 	add.w	r9, sp, #148	; 0x94
  405612:	e6ae      	b.n	405372 <.LVL267>

00405614 <.LVL350>:
  405614:	4641      	mov	r1, r8

00405616 <.LVL351>:
  405616:	ae4e      	add	r6, sp, #312	; 0x138
  405618:	3430      	adds	r4, #48	; 0x30

0040561a <.LVL352>:
  40561a:	2301      	movs	r3, #1

0040561c <.LVL353>:
  40561c:	4688      	mov	r8, r1
  40561e:	f806 4d01 	strb.w	r4, [r6, #-1]!
  405622:	9308      	str	r3, [sp, #32]
  405624:	f7ff bac0 	b.w	404ba8 <.LVL61>

00405628 <.LVL354>:
  405628:	ab4e      	add	r3, sp, #312	; 0x138
  40562a:	1b9b      	subs	r3, r3, r6
  40562c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  405630:	46d8      	mov	r8, fp
  405632:	970f      	str	r7, [sp, #60]	; 0x3c
  405634:	f8dd b020 	ldr.w	fp, [sp, #32]

00405638 <.LVL355>:
  405638:	f8dd 9018 	ldr.w	r9, [sp, #24]

0040563c <.LVL356>:
  40563c:	9f02      	ldr	r7, [sp, #8]

0040563e <.LVL357>:
  40563e:	9308      	str	r3, [sp, #32]
  405640:	f7ff bab2 	b.w	404ba8 <.LVL61>

00405644 <.LVL358>:
  405644:	681c      	ldr	r4, [r3, #0]
  405646:	3304      	adds	r3, #4
  405648:	930a      	str	r3, [sp, #40]	; 0x28

0040564a <.LVL359>:
  40564a:	2500      	movs	r5, #0
  40564c:	f7ff bbed 	b.w	404e2a <.LVL126>

00405650 <.LVL360>:
  405650:	3204      	adds	r2, #4
  405652:	681c      	ldr	r4, [r3, #0]
  405654:	920a      	str	r2, [sp, #40]	; 0x28

00405656 <.LVL361>:
  405656:	2301      	movs	r3, #1
  405658:	2500      	movs	r5, #0
  40565a:	f7ff ba8a 	b.w	404b72 <.L150>

0040565e <.LVL362>:
  40565e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405660:	6814      	ldr	r4, [r2, #0]
  405662:	4613      	mov	r3, r2
  405664:	3304      	adds	r3, #4

00405666 <.LVL363>:
  405666:	17e5      	asrs	r5, r4, #31
  405668:	930a      	str	r3, [sp, #40]	; 0x28
  40566a:	4622      	mov	r2, r4
  40566c:	462b      	mov	r3, r5

0040566e <.LVL364>:
  40566e:	e40c      	b.n	404e8a <.LVL137>

00405670 <.LVL365>:
  405670:	681c      	ldr	r4, [r3, #0]
  405672:	3304      	adds	r3, #4
  405674:	930a      	str	r3, [sp, #40]	; 0x28

00405676 <.LVL366>:
  405676:	2500      	movs	r5, #0
  405678:	f7ff ba69 	b.w	404b4e <.LVL51>

0040567c <.LBB15>:
  40567c:	aa22      	add	r2, sp, #136	; 0x88
  40567e:	9905      	ldr	r1, [sp, #20]
  405680:	4658      	mov	r0, fp
  405682:	f012 faeb 	bl	417c5c <.LFE215>

00405686 <.LVL368>:
  405686:	2800      	cmp	r0, #0
  405688:	f47f aa26 	bne.w	404ad8 <.L189>
  40568c:	9b24      	ldr	r3, [sp, #144]	; 0x90

0040568e <.LVL369>:
  40568e:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00405692 <.LBE15>:
  405692:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405694:	f418 6f80 	tst.w	r8, #1024	; 0x400
  405698:	4432      	add	r2, r6
  40569a:	4615      	mov	r5, r2

0040569c <.LVL371>:
  40569c:	f000 8083 	beq.w	4057a6 <.LVL403>

004056a0 <.LBB16>:
  4056a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4056a2:	9608      	str	r6, [sp, #32]
  4056a4:	4618      	mov	r0, r3

004056a6 <.LBE16>:
  4056a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4056a8:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c

004056ac <.LBB17>:
  4056ac:	1871      	adds	r1, r6, r1
  4056ae:	9104      	str	r1, [sp, #16]
  4056b0:	9706      	str	r7, [sp, #24]
  4056b2:	4649      	mov	r1, r9
  4056b4:	4616      	mov	r6, r2

004056b6 <.LVL372>:
  4056b6:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
  4056ba:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c

004056be <.LVL373>:
  4056be:	9d05      	ldr	r5, [sp, #20]

004056c0 <.LBE17>:
  4056c0:	2b00      	cmp	r3, #0
  4056c2:	d05f      	beq.n	405784 <.LVL399>

004056c4 <.LVL374>:
  4056c4:	f1b8 0f00 	cmp.w	r8, #0
  4056c8:	f000 8108 	beq.w	4058dc <.LBB27>
  4056cc:	f108 38ff 	add.w	r8, r8, #4294967295

004056d0 <.LVL375>:
  4056d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4056d2:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4056d4:	600a      	str	r2, [r1, #0]
  4056d6:	3301      	adds	r3, #1
  4056d8:	4448      	add	r0, r9
  4056da:	2b07      	cmp	r3, #7
  4056dc:	9024      	str	r0, [sp, #144]	; 0x90
  4056de:	f8c1 9004 	str.w	r9, [r1, #4]
  4056e2:	9323      	str	r3, [sp, #140]	; 0x8c
  4056e4:	f300 80c8 	bgt.w	405878 <.LBB26>

004056e8 <.LVL376>:
  4056e8:	3108      	adds	r1, #8

004056ea <.LBB18>:
  4056ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4056ec:	9c04      	ldr	r4, [sp, #16]
  4056ee:	7813      	ldrb	r3, [r2, #0]
  4056f0:	1ba4      	subs	r4, r4, r6

004056f2 <.LVL378>:
  4056f2:	429c      	cmp	r4, r3
  4056f4:	bfa8      	it	ge
  4056f6:	461c      	movge	r4, r3
  4056f8:	2c00      	cmp	r4, #0
  4056fa:	dd0b      	ble.n	405714 <.LVL382>
  4056fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4056fe:	600e      	str	r6, [r1, #0]
  405700:	3301      	adds	r3, #1
  405702:	4420      	add	r0, r4
  405704:	2b07      	cmp	r3, #7
  405706:	9024      	str	r0, [sp, #144]	; 0x90

00405708 <.LVL380>:
  405708:	604c      	str	r4, [r1, #4]
  40570a:	9323      	str	r3, [sp, #140]	; 0x8c
  40570c:	f300 81ab 	bgt.w	405a66 <.LBB21>

00405710 <.LVL381>:
  405710:	7813      	ldrb	r3, [r2, #0]
  405712:	3108      	adds	r1, #8

00405714 <.LVL382>:
  405714:	2c00      	cmp	r4, #0
  405716:	bfac      	ite	ge
  405718:	1b1c      	subge	r4, r3, r4

0040571a <.LVL383>:
  40571a:	461c      	movlt	r4, r3

0040571c <.LVL384>:
  40571c:	2c00      	cmp	r4, #0
  40571e:	dd2d      	ble.n	40577c <.LBE18>
  405720:	2c10      	cmp	r4, #16
  405722:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  405724:	dd1d      	ble.n	405762 <.LVL395>
  405726:	2710      	movs	r7, #16
  405728:	e004      	b.n	405734 <.LVL388>

0040572a <.LVL385>:
  40572a:	3c10      	subs	r4, #16

0040572c <.LVL386>:
  40572c:	2c10      	cmp	r4, #16
  40572e:	f101 0108 	add.w	r1, r1, #8

00405732 <.LVL387>:
  405732:	dd16      	ble.n	405762 <.LVL395>

00405734 <.LVL388>:
  405734:	3201      	adds	r2, #1
  405736:	3010      	adds	r0, #16
  405738:	2a07      	cmp	r2, #7
  40573a:	9024      	str	r0, [sp, #144]	; 0x90

0040573c <.LVL389>:
  40573c:	9223      	str	r2, [sp, #140]	; 0x8c
  40573e:	f8c1 a000 	str.w	sl, [r1]
  405742:	604f      	str	r7, [r1, #4]
  405744:	ddf1      	ble.n	40572a <.LVL385>
  405746:	aa22      	add	r2, sp, #136	; 0x88
  405748:	4629      	mov	r1, r5

0040574a <.LVL390>:
  40574a:	4658      	mov	r0, fp
  40574c:	f012 fa86 	bl	417c5c <.LFE215>

00405750 <.LVL391>:
  405750:	2800      	cmp	r0, #0
  405752:	f47f a9c1 	bne.w	404ad8 <.L189>
  405756:	3c10      	subs	r4, #16

00405758 <.LVL392>:
  405758:	2c10      	cmp	r4, #16
  40575a:	9824      	ldr	r0, [sp, #144]	; 0x90
  40575c:	9a23      	ldr	r2, [sp, #140]	; 0x8c

0040575e <.LVL393>:
  40575e:	a925      	add	r1, sp, #148	; 0x94

00405760 <.LVL394>:
  405760:	dce8      	bgt.n	405734 <.LVL388>

00405762 <.LVL395>:
  405762:	3201      	adds	r2, #1
  405764:	4420      	add	r0, r4
  405766:	2a07      	cmp	r2, #7
  405768:	9024      	str	r0, [sp, #144]	; 0x90
  40576a:	9223      	str	r2, [sp, #140]	; 0x8c
  40576c:	f8c1 a000 	str.w	sl, [r1]
  405770:	604c      	str	r4, [r1, #4]
  405772:	f300 8191 	bgt.w	405a98 <.LBB22>

00405776 <.LVL396>:
  405776:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405778:	781b      	ldrb	r3, [r3, #0]
  40577a:	3108      	adds	r1, #8

0040577c <.LBE18>:
  40577c:	441e      	add	r6, r3
  40577e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405780:	2b00      	cmp	r3, #0
  405782:	d19f      	bne.n	4056c4 <.LVL374>

00405784 <.LVL399>:
  405784:	f1b8 0f00 	cmp.w	r8, #0
  405788:	d1a0      	bne.n	4056cc <.LVL374+0x8>
  40578a:	4634      	mov	r4, r6
  40578c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40578e:	9e08      	ldr	r6, [sp, #32]

00405790 <.LVL400>:
  405790:	9f06      	ldr	r7, [sp, #24]
  405792:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c

00405796 <.LVL401>:
  405796:	18b2      	adds	r2, r6, r2
  405798:	4294      	cmp	r4, r2
  40579a:	4689      	mov	r9, r1
  40579c:	4621      	mov	r1, r4
  40579e:	bf28      	it	cs
  4057a0:	4611      	movcs	r1, r2
  4057a2:	4603      	mov	r3, r0

004057a4 <.LVL402>:
  4057a4:	460d      	mov	r5, r1

004057a6 <.LVL403>:
  4057a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  4057a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4057aa:	428a      	cmp	r2, r1
  4057ac:	f280 8201 	bge.w	405bb2 <.LBB47>
  4057b0:	9923      	ldr	r1, [sp, #140]	; 0x8c
  4057b2:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4057b4:	9817      	ldr	r0, [sp, #92]	; 0x5c
  4057b6:	f8c9 0000 	str.w	r0, [r9]
  4057ba:	3101      	adds	r1, #1
  4057bc:	4423      	add	r3, r4
  4057be:	2907      	cmp	r1, #7
  4057c0:	9324      	str	r3, [sp, #144]	; 0x90
  4057c2:	f8c9 4004 	str.w	r4, [r9, #4]
  4057c6:	9123      	str	r1, [sp, #140]	; 0x8c
  4057c8:	f300 828d 	bgt.w	405ce6 <.LBB50>

004057cc <.LVL404>:
  4057cc:	f109 0908 	add.w	r9, r9, #8

004057d0 <.LBB19>:
  4057d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4057d2:	1874      	adds	r4, r6, r1
  4057d4:	1b64      	subs	r4, r4, r5

004057d6 <.LVL406>:
  4057d6:	1a8a      	subs	r2, r1, r2
  4057d8:	4294      	cmp	r4, r2
  4057da:	bfa8      	it	ge
  4057dc:	4614      	movge	r4, r2
  4057de:	2c00      	cmp	r4, #0
  4057e0:	dd0d      	ble.n	4057fe <.LVL409>
  4057e2:	9923      	ldr	r1, [sp, #140]	; 0x8c
  4057e4:	f8c9 5000 	str.w	r5, [r9]
  4057e8:	3101      	adds	r1, #1
  4057ea:	4423      	add	r3, r4
  4057ec:	2907      	cmp	r1, #7
  4057ee:	9324      	str	r3, [sp, #144]	; 0x90
  4057f0:	f8c9 4004 	str.w	r4, [r9, #4]
  4057f4:	9123      	str	r1, [sp, #140]	; 0x8c
  4057f6:	f300 83bc 	bgt.w	405f72 <.LBB24>

004057fa <.LVL408>:
  4057fa:	f109 0908 	add.w	r9, r9, #8

004057fe <.LVL409>:
  4057fe:	2c00      	cmp	r4, #0
  405800:	bfac      	ite	ge
  405802:	1b14      	subge	r4, r2, r4

00405804 <.LVL410>:
  405804:	4614      	movlt	r4, r2

00405806 <.LVL411>:
  405806:	2c00      	cmp	r4, #0
  405808:	f77f aa9e 	ble.w	404d48 <.LVL104>
  40580c:	2c10      	cmp	r4, #16
  40580e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  405810:	dd1e      	ble.n	405850 <.LVL421>
  405812:	2510      	movs	r5, #16

00405814 <.LVL412>:
  405814:	9e05      	ldr	r6, [sp, #20]
  405816:	e004      	b.n	405822 <.LVL416>

00405818 <.LVL413>:
  405818:	f109 0908 	add.w	r9, r9, #8

0040581c <.LVL414>:
  40581c:	3c10      	subs	r4, #16
  40581e:	2c10      	cmp	r4, #16
  405820:	dd16      	ble.n	405850 <.LVL421>

00405822 <.LVL416>:
  405822:	3201      	adds	r2, #1
  405824:	3310      	adds	r3, #16
  405826:	2a07      	cmp	r2, #7
  405828:	9324      	str	r3, [sp, #144]	; 0x90

0040582a <.LVL417>:
  40582a:	9223      	str	r2, [sp, #140]	; 0x8c
  40582c:	f8c9 a000 	str.w	sl, [r9]
  405830:	f8c9 5004 	str.w	r5, [r9, #4]
  405834:	ddf0      	ble.n	405818 <.LVL413>
  405836:	aa22      	add	r2, sp, #136	; 0x88
  405838:	4631      	mov	r1, r6
  40583a:	4658      	mov	r0, fp
  40583c:	f012 fa0e 	bl	417c5c <.LFE215>

00405840 <.LVL418>:
  405840:	2800      	cmp	r0, #0
  405842:	f47f a949 	bne.w	404ad8 <.L189>
  405846:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405848:	9a23      	ldr	r2, [sp, #140]	; 0x8c

0040584a <.LVL419>:
  40584a:	f10d 0994 	add.w	r9, sp, #148	; 0x94

0040584e <.LVL420>:
  40584e:	e7e5      	b.n	40581c <.LVL414>

00405850 <.LVL421>:
  405850:	3201      	adds	r2, #1
  405852:	4423      	add	r3, r4
  405854:	2a07      	cmp	r2, #7
  405856:	9324      	str	r3, [sp, #144]	; 0x90
  405858:	9223      	str	r2, [sp, #140]	; 0x8c
  40585a:	f8c9 a000 	str.w	sl, [r9]
  40585e:	f8c9 4004 	str.w	r4, [r9, #4]
  405862:	f77f aa6f 	ble.w	404d44 <.LVL103>
  405866:	e591      	b.n	40538c <.LVL269>

00405868 <.LBE19>:
  405868:	f018 0f01 	tst.w	r8, #1
  40586c:	f47f ad57 	bne.w	40531e <.LVL260+0x22>
  405870:	2a07      	cmp	r2, #7
  405872:	f77f ad7c 	ble.w	40536e <.LVL266>
  405876:	e6c0      	b.n	4055fa <.LVL348>

00405878 <.LBB26>:
  405878:	aa22      	add	r2, sp, #136	; 0x88
  40587a:	4629      	mov	r1, r5
  40587c:	4658      	mov	r0, fp
  40587e:	f012 f9ed 	bl	417c5c <.LFE215>

00405882 <.LVL424>:
  405882:	2800      	cmp	r0, #0
  405884:	f47f a928 	bne.w	404ad8 <.L189>
  405888:	9824      	ldr	r0, [sp, #144]	; 0x90

0040588a <.LVL425>:
  40588a:	a925      	add	r1, sp, #148	; 0x94

0040588c <.LVL426>:
  40588c:	e72d      	b.n	4056ea <.LBB18>

0040588e <.LBE26>:
  40588e:	aa22      	add	r2, sp, #136	; 0x88
  405890:	9905      	ldr	r1, [sp, #20]
  405892:	4658      	mov	r0, fp
  405894:	f012 f9e2 	bl	417c5c <.LFE215>

00405898 <.LVL428>:
  405898:	2800      	cmp	r0, #0
  40589a:	f47f a91d 	bne.w	404ad8 <.L189>
  40589e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4058a0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  4058a2:	f10d 0994 	add.w	r9, sp, #148	; 0x94
  4058a6:	e53f      	b.n	405328 <.LVL261>

004058a8 <.LVL429>:
  4058a8:	aa22      	add	r2, sp, #136	; 0x88
  4058aa:	9905      	ldr	r1, [sp, #20]
  4058ac:	4658      	mov	r0, fp
  4058ae:	f012 f9d5 	bl	417c5c <.LFE215>

004058b2 <.LVL430>:
  4058b2:	2800      	cmp	r0, #0
  4058b4:	f47f a910 	bne.w	404ad8 <.L189>
  4058b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4058ba:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  4058bc:	f10d 0994 	add.w	r9, sp, #148	; 0x94

004058c0 <.LVL431>:
  4058c0:	e541      	b.n	405346 <.LVL263>

004058c2 <.LVL432>:
  4058c2:	aa22      	add	r2, sp, #136	; 0x88
  4058c4:	9905      	ldr	r1, [sp, #20]
  4058c6:	4658      	mov	r0, fp
  4058c8:	f012 f9c8 	bl	417c5c <.LFE215>

004058cc <.LVL433>:
  4058cc:	2800      	cmp	r0, #0
  4058ce:	f47f a903 	bne.w	404ad8 <.L189>
  4058d2:	9b24      	ldr	r3, [sp, #144]	; 0x90

004058d4 <.LVL434>:
  4058d4:	f10d 0994 	add.w	r9, sp, #148	; 0x94

004058d8 <.LVL435>:
  4058d8:	f7ff b9e7 	b.w	404caa <.LVL86+0x8>

004058dc <.LBB27>:
  4058dc:	9b12      	ldr	r3, [sp, #72]	; 0x48

004058de <.LVL437>:
  4058de:	3b01      	subs	r3, #1
  4058e0:	9312      	str	r3, [sp, #72]	; 0x48

004058e2 <.LVL438>:
  4058e2:	9b10      	ldr	r3, [sp, #64]	; 0x40

004058e4 <.LVL439>:
  4058e4:	3b01      	subs	r3, #1
  4058e6:	9310      	str	r3, [sp, #64]	; 0x40

004058e8 <.LVL440>:
  4058e8:	e6f2      	b.n	4056d0 <.LVL375>

004058ea <.LBE27>:
  4058ea:	eeb4 8b48 	vcmp.f64	d8, d8
  4058ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4058f2:	f180 83e3 	bvs.w	4060bc <.LBE70>
  4058f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4058f8:	2b61      	cmp	r3, #97	; 0x61
  4058fa:	f000 82b8 	beq.w	405e6e <.LVL595+0xa>
  4058fe:	2b41      	cmp	r3, #65	; 0x41
  405900:	f000 8178 	beq.w	405bf4 <.LVL523>
  405904:	9b04      	ldr	r3, [sp, #16]
  405906:	3301      	adds	r3, #1
  405908:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40590a:	f023 0520 	bic.w	r5, r3, #32
  40590e:	f000 839d 	beq.w	40604c <.LBE69>
  405912:	2d47      	cmp	r5, #71	; 0x47
  405914:	d104      	bne.n	405920 <.LBB28>
  405916:	9b04      	ldr	r3, [sp, #16]
  405918:	2b00      	cmp	r3, #0
  40591a:	bf08      	it	eq
  40591c:	2301      	moveq	r3, #1
  40591e:	9304      	str	r3, [sp, #16]

00405920 <.LBB28>:
  405920:	ee18 3a90 	vmov	r3, s17

00405924 <.LBE28>:
  405924:	f448 7280 	orr.w	r2, r8, #256	; 0x100

00405928 <.LBB43>:
  405928:	2b00      	cmp	r3, #0

0040592a <.LBE43>:
  40592a:	9202      	str	r2, [sp, #8]

0040592c <.LBB44>:
  40592c:	f04f 0300 	mov.w	r3, #0
  405930:	f2c0 82b8 	blt.w	405ea4 <.LBB62>
  405934:	eeb0 ab48 	vmov.f64	d10, d8
  405938:	9306      	str	r3, [sp, #24]
  40593a:	9309      	str	r3, [sp, #36]	; 0x24

0040593c <.LVL445>:
  40593c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40593e:	2b66      	cmp	r3, #102	; 0x66
  405940:	f000 82ef 	beq.w	405f22 <.LBB64>
  405944:	2b46      	cmp	r3, #70	; 0x46
  405946:	f000 83d8 	beq.w	4060fa <.LBB71>
  40594a:	eeb0 0b4a 	vmov.f64	d0, d10
  40594e:	2d45      	cmp	r5, #69	; 0x45
  405950:	bf0a      	itet	eq
  405952:	9b04      	ldreq	r3, [sp, #16]
  405954:	9c04      	ldrne	r4, [sp, #16]
  405956:	1c5c      	addeq	r4, r3, #1

00405958 <.LVL446>:
  405958:	aa20      	add	r2, sp, #128	; 0x80

0040595a <.LVL447>:
  40595a:	ab1d      	add	r3, sp, #116	; 0x74
  40595c:	9201      	str	r2, [sp, #4]
  40595e:	9300      	str	r3, [sp, #0]
  405960:	4622      	mov	r2, r4
  405962:	ab1c      	add	r3, sp, #112	; 0x70

00405964 <.LVL448>:
  405964:	2102      	movs	r1, #2
  405966:	4658      	mov	r0, fp
  405968:	f004 fb8a 	bl	40a080 <_dtoa_r>

0040596c <.LVL449>:
  40596c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40596e:	2b67      	cmp	r3, #103	; 0x67
  405970:	4606      	mov	r6, r0

00405972 <.LVL450>:
  405972:	f040 8395 	bne.w	4060a0 <.LBB70>
  405976:	f018 0f01 	tst.w	r8, #1
  40597a:	f040 8343 	bne.w	406004 <.LBB66>

0040597e <.LVL451>:
  40597e:	9b20      	ldr	r3, [sp, #128]	; 0x80

00405980 <.LVL452>:
  405980:	46c6      	mov	lr, r8
  405982:	1b9b      	subs	r3, r3, r6
  405984:	f8dd 8008 	ldr.w	r8, [sp, #8]
  405988:	930f      	str	r3, [sp, #60]	; 0x3c

0040598a <.LBE44>:
  40598a:	2d47      	cmp	r5, #71	; 0x47
  40598c:	f000 81cf 	beq.w	405d2e <.LVL554>
  405990:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405992:	2b46      	cmp	r3, #70	; 0x46
  405994:	f000 82b3 	beq.w	405efe <.LVL607>
  405998:	2b65      	cmp	r3, #101	; 0x65
  40599a:	f340 8412 	ble.w	4061c2 <.LVL694>
  40599e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4059a0:	2b66      	cmp	r3, #102	; 0x66
  4059a2:	f000 82ac 	beq.w	405efe <.LVL607>
  4059a6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  4059a8:	930e      	str	r3, [sp, #56]	; 0x38

004059aa <.LVL454>:
  4059aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4059ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4059ae:	4619      	mov	r1, r3
  4059b0:	4291      	cmp	r1, r2
  4059b2:	4613      	mov	r3, r2
  4059b4:	f300 8260 	bgt.w	405e78 <.LVL596>

004059b8 <.LVL455>:
  4059b8:	f01e 0f01 	tst.w	lr, #1
  4059bc:	f000 8363 	beq.w	406086 <.LVL655>
  4059c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4059c2:	4413      	add	r3, r2
  4059c4:	9308      	str	r3, [sp, #32]

004059c6 <.LVL456>:
  4059c6:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  4059ca:	f000 8310 	beq.w	405fee <.LVL635>
  4059ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4059d0:	2b00      	cmp	r3, #0
  4059d2:	f340 830c 	ble.w	405fee <.LVL635>
  4059d6:	2367      	movs	r3, #103	; 0x67
  4059d8:	930d      	str	r3, [sp, #52]	; 0x34

004059da <.LVL457>:
  4059da:	9812      	ldr	r0, [sp, #72]	; 0x48
  4059dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4059de:	2300      	movs	r3, #0
  4059e0:	9313      	str	r3, [sp, #76]	; 0x4c
  4059e2:	9310      	str	r3, [sp, #64]	; 0x40
  4059e4:	7803      	ldrb	r3, [r0, #0]

004059e6 <.LVL458>:
  4059e6:	2bff      	cmp	r3, #255	; 0xff
  4059e8:	d00e      	beq.n	405a08 <.LVL461+0x8>
  4059ea:	429a      	cmp	r2, r3
  4059ec:	dd0c      	ble.n	405a08 <.LVL461+0x8>
  4059ee:	7841      	ldrb	r1, [r0, #1]
  4059f0:	1ad2      	subs	r2, r2, r3
  4059f2:	2900      	cmp	r1, #0
  4059f4:	f000 8184 	beq.w	405d00 <.LBE50>
  4059f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4059fa:	3301      	adds	r3, #1
  4059fc:	9310      	str	r3, [sp, #64]	; 0x40

004059fe <.LVL460>:
  4059fe:	460b      	mov	r3, r1

00405a00 <.LVL461>:
  405a00:	2bff      	cmp	r3, #255	; 0xff
  405a02:	f100 0001 	add.w	r0, r0, #1
  405a06:	d1f0      	bne.n	4059ea <.LVL458+0x4>
  405a08:	920e      	str	r2, [sp, #56]	; 0x38
  405a0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405a0c:	9a13      	ldr	r2, [sp, #76]	; 0x4c

00405a0e <.LVL463>:
  405a0e:	9908      	ldr	r1, [sp, #32]
  405a10:	9012      	str	r0, [sp, #72]	; 0x48
  405a12:	4413      	add	r3, r2
  405a14:	9a18      	ldr	r2, [sp, #96]	; 0x60
  405a16:	fb02 1303 	mla	r3, r2, r3, r1
  405a1a:	9308      	str	r3, [sp, #32]

00405a1c <.LVL464>:
  405a1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31

00405a20 <.LVL465>:
  405a20:	9302      	str	r3, [sp, #8]

00405a22 <.LVL466>:
  405a22:	9b06      	ldr	r3, [sp, #24]
  405a24:	2b00      	cmp	r3, #0
  405a26:	f040 817b 	bne.w	405d20 <.LVL552>
  405a2a:	9304      	str	r3, [sp, #16]

00405a2c <.LVL467>:
  405a2c:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  405a30:	f7ff b8c7 	b.w	404bc2 <.L59>

00405a34 <.LVL468>:
  405a34:	f025 0507 	bic.w	r5, r5, #7
  405a38:	f105 0308 	add.w	r3, r5, #8
  405a3c:	ed95 8b00 	vldr	d8, [r5]

00405a40 <.LVL469>:
  405a40:	930a      	str	r3, [sp, #40]	; 0x28

00405a42 <.LVL470>:
  405a42:	f7ff bb11 	b.w	405068 <.LVL189>

00405a46 <.LVL471>:
  405a46:	464c      	mov	r4, r9
  405a48:	4689      	mov	r9, r1

00405a4a <.LBB20>:
  405a4a:	3201      	adds	r2, #1
  405a4c:	4423      	add	r3, r4
  405a4e:	2a07      	cmp	r2, #7
  405a50:	9324      	str	r3, [sp, #144]	; 0x90
  405a52:	9223      	str	r2, [sp, #140]	; 0x8c
  405a54:	f8c9 a000 	str.w	sl, [r9]
  405a58:	f8c9 4004 	str.w	r4, [r9, #4]
  405a5c:	f73f ae0e 	bgt.w	40567c <.LBB15>

00405a60 <.LVL473>:
  405a60:	f109 0908 	add.w	r9, r9, #8

00405a64 <.LVL474>:
  405a64:	e615      	b.n	405692 <.LBE15>

00405a66 <.LBB21>:
  405a66:	aa22      	add	r2, sp, #136	; 0x88
  405a68:	4629      	mov	r1, r5

00405a6a <.LVL476>:
  405a6a:	4658      	mov	r0, fp
  405a6c:	f012 f8f6 	bl	417c5c <.LFE215>

00405a70 <.LVL477>:
  405a70:	2800      	cmp	r0, #0
  405a72:	f47f a831 	bne.w	404ad8 <.L189>
  405a76:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405a78:	9824      	ldr	r0, [sp, #144]	; 0x90

00405a7a <.LVL478>:
  405a7a:	781b      	ldrb	r3, [r3, #0]
  405a7c:	a925      	add	r1, sp, #148	; 0x94

00405a7e <.LVL479>:
  405a7e:	e649      	b.n	405714 <.LVL382>

00405a80 <.LBE21>:
  405a80:	aa22      	add	r2, sp, #136	; 0x88
  405a82:	9905      	ldr	r1, [sp, #20]
  405a84:	4658      	mov	r0, fp
  405a86:	f012 f8e9 	bl	417c5c <.LFE215>

00405a8a <.LVL481>:
  405a8a:	2800      	cmp	r0, #0
  405a8c:	f47f a824 	bne.w	404ad8 <.L189>

00405a90 <.LVL482>:
  405a90:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00405a94 <.LVL483>:
  405a94:	f7ff bbb2 	b.w	4051fc <.LVL230>

00405a98 <.LBB22>:
  405a98:	aa22      	add	r2, sp, #136	; 0x88
  405a9a:	4629      	mov	r1, r5
  405a9c:	4658      	mov	r0, fp
  405a9e:	f012 f8dd 	bl	417c5c <.LFE215>

00405aa2 <.LVL485>:
  405aa2:	2800      	cmp	r0, #0
  405aa4:	f47f a818 	bne.w	404ad8 <.L189>
  405aa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405aaa:	9824      	ldr	r0, [sp, #144]	; 0x90

00405aac <.LVL486>:
  405aac:	781b      	ldrb	r3, [r3, #0]
  405aae:	a925      	add	r1, sp, #148	; 0x94

00405ab0 <.LBE22>:
  405ab0:	441e      	add	r6, r3
  405ab2:	e664      	b.n	40577e <.LBE18+0x2>

00405ab4 <.LBE46>:
  405ab4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  405ab6:	48c2      	ldr	r0, [pc, #776]	; (405dc0 <.LVL571+0x2>)
  405ab8:	f8c9 0000 	str.w	r0, [r9]
  405abc:	3201      	adds	r2, #1
  405abe:	3301      	adds	r3, #1
  405ac0:	2001      	movs	r0, #1
  405ac2:	2a07      	cmp	r2, #7
  405ac4:	9324      	str	r3, [sp, #144]	; 0x90
  405ac6:	9223      	str	r2, [sp, #140]	; 0x8c
  405ac8:	f8c9 0004 	str.w	r0, [r9, #4]
  405acc:	f300 8085 	bgt.w	405bda <.LVL519>

00405ad0 <.LVL490>:
  405ad0:	f109 0908 	add.w	r9, r9, #8

00405ad4 <.LVL491>:
  405ad4:	b929      	cbnz	r1, 405ae2 <.LVL491+0xe>
  405ad6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405ad8:	b91a      	cbnz	r2, 405ae2 <.LVL491+0xe>
  405ada:	f018 0f01 	tst.w	r8, #1
  405ade:	f43f a933 	beq.w	404d48 <.LVL104>
  405ae2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  405ae4:	9c15      	ldr	r4, [sp, #84]	; 0x54

00405ae6 <.LVL492>:
  405ae6:	9817      	ldr	r0, [sp, #92]	; 0x5c
  405ae8:	f8c9 0000 	str.w	r0, [r9]
  405aec:	3201      	adds	r2, #1
  405aee:	4423      	add	r3, r4
  405af0:	2a07      	cmp	r2, #7
  405af2:	9324      	str	r3, [sp, #144]	; 0x90

00405af4 <.LVL493>:
  405af4:	f8c9 4004 	str.w	r4, [r9, #4]
  405af8:	9223      	str	r2, [sp, #140]	; 0x8c
  405afa:	f300 826a 	bgt.w	405fd2 <.LVL632>
  405afe:	f109 0908 	add.w	r9, r9, #8

00405b02 <.LVL494>:
  405b02:	2900      	cmp	r1, #0
  405b04:	f2c0 8244 	blt.w	405f90 <.LBE24>

00405b08 <.LVL495>:
  405b08:	980f      	ldr	r0, [sp, #60]	; 0x3c
  405b0a:	f8c9 6000 	str.w	r6, [r9]
  405b0e:	3201      	adds	r2, #1
  405b10:	4403      	add	r3, r0
  405b12:	2a07      	cmp	r2, #7
  405b14:	9324      	str	r3, [sp, #144]	; 0x90

00405b16 <.LVL496>:
  405b16:	9223      	str	r2, [sp, #140]	; 0x8c
  405b18:	f8c9 0004 	str.w	r0, [r9, #4]
  405b1c:	f77f a912 	ble.w	404d44 <.LVL103>
  405b20:	e434      	b.n	40538c <.LVL269>

00405b22 <.LDL1>:
  405b22:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405b24:	2b00      	cmp	r3, #0
  405b26:	f43e afdd 	beq.w	404ae4 <.LVL44>
  405b2a:	9c05      	ldr	r4, [sp, #20]
  405b2c:	9811      	ldr	r0, [sp, #68]	; 0x44
  405b2e:	aa22      	add	r2, sp, #136	; 0x88
  405b30:	4621      	mov	r1, r4
  405b32:	f012 f893 	bl	417c5c <.LFE215>

00405b36 <.LVL498>:
  405b36:	2800      	cmp	r0, #0
  405b38:	f43e afd4 	beq.w	404ae4 <.LVL44>
  405b3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405b40:	f7fe bfd3 	b.w	404aea <.LVL44+0x6>

00405b44 <.LVL499>:
  405b44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405b46:	9903      	ldr	r1, [sp, #12]
  405b48:	6813      	ldr	r3, [r2, #0]
  405b4a:	17cd      	asrs	r5, r1, #31
  405b4c:	4608      	mov	r0, r1
  405b4e:	3204      	adds	r2, #4

00405b50 <.LVL500>:
  405b50:	4629      	mov	r1, r5
  405b52:	920a      	str	r2, [sp, #40]	; 0x28
  405b54:	e9c3 0100 	strd	r0, r1, [r3]
  405b58:	463e      	mov	r6, r7

00405b5a <.LVL501>:
  405b5a:	f7fe bef4 	b.w	404946 <.LVL10>

00405b5e <.LVL502>:
  405b5e:	3304      	adds	r3, #4
  405b60:	8814      	ldrh	r4, [r2, #0]
  405b62:	930a      	str	r3, [sp, #40]	; 0x28

00405b64 <.LVL503>:
  405b64:	2500      	movs	r5, #0
  405b66:	f7ff b960 	b.w	404e2a <.LVL126>

00405b6a <.LVL504>:
  405b6a:	8814      	ldrh	r4, [r2, #0]
  405b6c:	3204      	adds	r2, #4
  405b6e:	2500      	movs	r5, #0
  405b70:	2301      	movs	r3, #1
  405b72:	920a      	str	r2, [sp, #40]	; 0x28

00405b74 <.LVL505>:
  405b74:	f7fe bffd 	b.w	404b72 <.L150>

00405b78 <.LVL506>:
  405b78:	3304      	adds	r3, #4
  405b7a:	8814      	ldrh	r4, [r2, #0]
  405b7c:	930a      	str	r3, [sp, #40]	; 0x28

00405b7e <.LVL507>:
  405b7e:	2500      	movs	r5, #0
  405b80:	f7fe bfe5 	b.w	404b4e <.LVL51>

00405b84 <.LVL508>:
  405b84:	980a      	ldr	r0, [sp, #40]	; 0x28
  405b86:	f9b0 4000 	ldrsh.w	r4, [r0]
  405b8a:	f7ff b979 	b.w	404e80 <.LVL136>

00405b8e <.LVL509>:
  405b8e:	aa22      	add	r2, sp, #136	; 0x88
  405b90:	9905      	ldr	r1, [sp, #20]
  405b92:	4658      	mov	r0, fp
  405b94:	f012 f862 	bl	417c5c <.LFE215>

00405b98 <.LVL510>:
  405b98:	2800      	cmp	r0, #0
  405b9a:	f47e af9d 	bne.w	404ad8 <.L189>
  405b9e:	9b24      	ldr	r3, [sp, #144]	; 0x90

00405ba0 <.LVL511>:
  405ba0:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00405ba4 <.LVL512>:
  405ba4:	f7ff bb43 	b.w	40522e <.LVL233>

00405ba8 <.LVL513>:
  405ba8:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
  405bac:	783b      	ldrb	r3, [r7, #0]
  405bae:	f7fe befa 	b.w	4049a6 <.LVL22>

00405bb2 <.LBB47>:
  405bb2:	f018 0f01 	tst.w	r8, #1
  405bb6:	f43f ae0b 	beq.w	4057d0 <.LBB19>
  405bba:	e5f9      	b.n	4057b0 <.LVL403+0xa>

00405bbc <.LBE47>:
  405bbc:	2140      	movs	r1, #64	; 0x40
  405bbe:	9811      	ldr	r0, [sp, #68]	; 0x44

00405bc0 <.LVL517>:
  405bc0:	f008 f9ca 	bl	40df58 <.LFE174>

00405bc4 <.LVL518>:
  405bc4:	9a05      	ldr	r2, [sp, #20]
  405bc6:	6010      	str	r0, [r2, #0]
  405bc8:	6110      	str	r0, [r2, #16]
  405bca:	2800      	cmp	r0, #0
  405bcc:	f000 82f1 	beq.w	4061b2 <.LBE76>
  405bd0:	9a05      	ldr	r2, [sp, #20]
  405bd2:	2340      	movs	r3, #64	; 0x40
  405bd4:	6153      	str	r3, [r2, #20]
  405bd6:	f7fe bea0 	b.w	40491a <.LVL6>

00405bda <.LVL519>:
  405bda:	aa22      	add	r2, sp, #136	; 0x88
  405bdc:	9905      	ldr	r1, [sp, #20]
  405bde:	4658      	mov	r0, fp
  405be0:	f012 f83c 	bl	417c5c <.LFE215>

00405be4 <.LVL520>:
  405be4:	2800      	cmp	r0, #0
  405be6:	f47e af77 	bne.w	404ad8 <.L189>
  405bea:	991c      	ldr	r1, [sp, #112]	; 0x70
  405bec:	9b24      	ldr	r3, [sp, #144]	; 0x90

00405bee <.LVL521>:
  405bee:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00405bf2 <.LVL522>:
  405bf2:	e76f      	b.n	405ad4 <.LVL491>

00405bf4 <.LVL523>:
  405bf4:	2330      	movs	r3, #48	; 0x30
  405bf6:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
  405bfa:	2358      	movs	r3, #88	; 0x58
  405bfc:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
  405c00:	9b04      	ldr	r3, [sp, #16]
  405c02:	2b63      	cmp	r3, #99	; 0x63
  405c04:	f048 0402 	orr.w	r4, r8, #2

00405c08 <.LVL524>:
  405c08:	f300 8240 	bgt.w	40608c <.LVL656>
  405c0c:	2300      	movs	r3, #0
  405c0e:	9309      	str	r3, [sp, #36]	; 0x24
  405c10:	ae35      	add	r6, sp, #212	; 0xd4

00405c12 <.LBB48>:
  405c12:	ee18 3a90 	vmov	r3, s17
  405c16:	2b00      	cmp	r3, #0
  405c18:	9b0d      	ldr	r3, [sp, #52]	; 0x34

00405c1a <.LBE48>:
  405c1a:	f448 7281 	orr.w	r2, r8, #258	; 0x102
  405c1e:	9202      	str	r2, [sp, #8]

00405c20 <.LBB49>:
  405c20:	46a0      	mov	r8, r4
  405c22:	f023 0520 	bic.w	r5, r3, #32
  405c26:	f2c0 813e 	blt.w	405ea6 <.LVL602>
  405c2a:	eeb0 ab48 	vmov.f64	d10, d8
  405c2e:	2300      	movs	r3, #0
  405c30:	9306      	str	r3, [sp, #24]

00405c32 <.LVL527>:
  405c32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405c34:	2b61      	cmp	r3, #97	; 0x61
  405c36:	f000 81ec 	beq.w	406012 <.LBB68>
  405c3a:	2b41      	cmp	r3, #65	; 0x41
  405c3c:	f47f ae7e 	bne.w	40593c <.LVL445>
  405c40:	eeb0 0b4a 	vmov.f64	d0, d10
  405c44:	a81c      	add	r0, sp, #112	; 0x70

00405c46 <.LVL528>:
  405c46:	f015 fe53 	bl	41b8f0 <.LFE260>

00405c4a <.LVL529>:
  405c4a:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
  405c4e:	ee20 0b07 	vmul.f64	d0, d0, d7

00405c52 <.LVL530>:
  405c52:	eeb5 0b40 	vcmp.f64	d0, #0.0
  405c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405c5a:	d101      	bne.n	405c60 <.LVL530+0xe>
  405c5c:	2301      	movs	r3, #1
  405c5e:	931c      	str	r3, [sp, #112]	; 0x70
  405c60:	4c58      	ldr	r4, [pc, #352]	; (405dc4 <.LVL571+0x6>)

00405c62 <.LVL531>:
  405c62:	9b04      	ldr	r3, [sp, #16]
  405c64:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
  405c68:	3b01      	subs	r3, #1
  405c6a:	4631      	mov	r1, r6
  405c6c:	e005      	b.n	405c7a <.LVL533>

00405c6e <.LVL532>:
  405c6e:	eeb5 0b40 	vcmp.f64	d0, #0.0
  405c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405c76:	d014      	beq.n	405ca2 <.LVL536+0x6>
  405c78:	4611      	mov	r1, r2

00405c7a <.LVL533>:
  405c7a:	ee20 0b05 	vmul.f64	d0, d0, d5
  405c7e:	eefd 6bc0 	vcvt.s32.f64	s13, d0

00405c82 <.LVL535>:
  405c82:	460a      	mov	r2, r1
  405c84:	ee16 0a90 	vmov	r0, s13
  405c88:	f1b3 3fff 	cmp.w	r3, #4294967295
  405c8c:	5c20      	ldrb	r0, [r4, r0]
  405c8e:	f802 0b01 	strb.w	r0, [r2], #1
  405c92:	eeb8 7be6 	vcvt.f64.s32	d7, s13
  405c96:	4618      	mov	r0, r3
  405c98:	ee30 0b47 	vsub.f64	d0, d0, d7

00405c9c <.LVL536>:
  405c9c:	f103 33ff 	add.w	r3, r3, #4294967295
  405ca0:	d1e5      	bne.n	405c6e <.LVL532>
  405ca2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
  405ca6:	eeb4 0bc7 	vcmpe.f64	d0, d7
  405caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405cae:	f300 80ff 	bgt.w	405eb0 <.LVL604>
  405cb2:	eeb4 0b47 	vcmp.f64	d0, d7
  405cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405cba:	d104      	bne.n	405cc6 <.LVL537>
  405cbc:	ee16 3a90 	vmov	r3, s13
  405cc0:	07db      	lsls	r3, r3, #31
  405cc2:	f100 80f5 	bmi.w	405eb0 <.LVL604>

00405cc6 <.LVL537>:
  405cc6:	2800      	cmp	r0, #0
  405cc8:	db07      	blt.n	405cda <.LVL541>
  405cca:	1814      	adds	r4, r2, r0

00405ccc <.LVL538>:
  405ccc:	2330      	movs	r3, #48	; 0x30

00405cce <.LVL539>:
  405cce:	f801 3f01 	strb.w	r3, [r1, #1]!

00405cd2 <.LVL540>:
  405cd2:	42a1      	cmp	r1, r4
  405cd4:	d1fb      	bne.n	405cce <.LVL539>
  405cd6:	3001      	adds	r0, #1
  405cd8:	4402      	add	r2, r0

00405cda <.LVL541>:
  405cda:	1b93      	subs	r3, r2, r6
  405cdc:	46c6      	mov	lr, r8
  405cde:	930f      	str	r3, [sp, #60]	; 0x3c

00405ce0 <.LVL542>:
  405ce0:	f8dd 8008 	ldr.w	r8, [sp, #8]
  405ce4:	e651      	b.n	40598a <.LBE44>

00405ce6 <.LBB50>:
  405ce6:	aa22      	add	r2, sp, #136	; 0x88
  405ce8:	9905      	ldr	r1, [sp, #20]
  405cea:	4658      	mov	r0, fp
  405cec:	f011 ffb6 	bl	417c5c <.LFE215>

00405cf0 <.LVL544>:
  405cf0:	2800      	cmp	r0, #0
  405cf2:	f47e aef1 	bne.w	404ad8 <.L189>
  405cf6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  405cf8:	9b24      	ldr	r3, [sp, #144]	; 0x90

00405cfa <.LVL545>:
  405cfa:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00405cfe <.LVL546>:
  405cfe:	e567      	b.n	4057d0 <.LBB19>

00405d00 <.LBE50>:
  405d00:	9913      	ldr	r1, [sp, #76]	; 0x4c
  405d02:	3101      	adds	r1, #1
  405d04:	9113      	str	r1, [sp, #76]	; 0x4c

00405d06 <.LVL548>:
  405d06:	e66e      	b.n	4059e6 <.LVL458>

00405d08 <.LVL549>:
  405d08:	4630      	mov	r0, r6
  405d0a:	9404      	str	r4, [sp, #16]
  405d0c:	f012 fc38 	bl	418580 <strlen>

00405d10 <.LVL550>:
  405d10:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
  405d14:	9008      	str	r0, [sp, #32]

00405d16 <.LVL551>:
  405d16:	950a      	str	r5, [sp, #40]	; 0x28
  405d18:	9202      	str	r2, [sp, #8]
  405d1a:	4623      	mov	r3, r4
  405d1c:	f7ff b96b 	b.w	404ff6 <.LBE12>

00405d20 <.LVL552>:
  405d20:	222d      	movs	r2, #45	; 0x2d
  405d22:	2300      	movs	r3, #0
  405d24:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
  405d28:	9304      	str	r3, [sp, #16]

00405d2a <.LVL553>:
  405d2a:	f7fe bf4b 	b.w	404bc4 <.LVL63>

00405d2e <.LVL554>:
  405d2e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  405d30:	930e      	str	r3, [sp, #56]	; 0x38
  405d32:	1cda      	adds	r2, r3, #3
  405d34:	db03      	blt.n	405d3e <.LVL555>
  405d36:	9a04      	ldr	r2, [sp, #16]
  405d38:	4293      	cmp	r3, r2
  405d3a:	f77f ae36 	ble.w	4059aa <.LVL454>

00405d3e <.LVL555>:
  405d3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405d40:	3b02      	subs	r3, #2

00405d42 <.LVL556>:
  405d42:	930d      	str	r3, [sp, #52]	; 0x34
  405d44:	f023 0520 	bic.w	r5, r3, #32

00405d48 <.LVL557>:
  405d48:	9b0e      	ldr	r3, [sp, #56]	; 0x38

00405d4a <.LBB51>:
  405d4a:	2d41      	cmp	r5, #65	; 0x41

00405d4c <.LBE51>:
  405d4c:	f103 33ff 	add.w	r3, r3, #4294967295
  405d50:	931c      	str	r3, [sp, #112]	; 0x70

00405d52 <.LBB59>:
  405d52:	f000 8159 	beq.w	406008 <.LBB67>

00405d56 <.LVL559>:
  405d56:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
  405d5a:	2100      	movs	r1, #0

00405d5c <.LVL560>:
  405d5c:	2b00      	cmp	r3, #0
  405d5e:	bfb8      	it	lt
  405d60:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38

00405d62 <.LVL561>:
  405d62:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  405d66:	bfba      	itte	lt
  405d68:	f1c3 0301 	rsblt	r3, r3, #1

00405d6c <.LVL562>:
  405d6c:	222d      	movlt	r2, #45	; 0x2d
  405d6e:	222b      	movge	r2, #43	; 0x2b
  405d70:	2b09      	cmp	r3, #9
  405d72:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79

00405d76 <.LVL563>:
  405d76:	f340 815d 	ble.w	406034 <.LBB69>
  405d7a:	f10d 0487 	add.w	r4, sp, #135	; 0x87

00405d7e <.LVL564>:
  405d7e:	4620      	mov	r0, r4
  405d80:	4d11      	ldr	r5, [pc, #68]	; (405dc8 <.LVL571+0xa>)
  405d82:	e000      	b.n	405d86 <.LVL566>

00405d84 <.LVL565>:
  405d84:	4610      	mov	r0, r2

00405d86 <.LVL566>:
  405d86:	fb85 1203 	smull	r1, r2, r5, r3
  405d8a:	17d9      	asrs	r1, r3, #31
  405d8c:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  405d90:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  405d94:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  405d98:	3230      	adds	r2, #48	; 0x30
  405d9a:	2909      	cmp	r1, #9
  405d9c:	f800 2c01 	strb.w	r2, [r0, #-1]
  405da0:	460b      	mov	r3, r1

00405da2 <.LVL567>:
  405da2:	f100 32ff 	add.w	r2, r0, #4294967295

00405da6 <.LVL568>:
  405da6:	dced      	bgt.n	405d84 <.LVL565>

00405da8 <.LVL569>:
  405da8:	3330      	adds	r3, #48	; 0x30
  405daa:	3802      	subs	r0, #2
  405dac:	b2db      	uxtb	r3, r3
  405dae:	4284      	cmp	r4, r0
  405db0:	f802 3c01 	strb.w	r3, [r2, #-1]
  405db4:	f240 81fa 	bls.w	4061ac <.LBB76>
  405db8:	f10d 007a 	add.w	r0, sp, #122	; 0x7a

00405dbc <.LVL570>:
  405dbc:	4611      	mov	r1, r2

00405dbe <.LVL571>:
  405dbe:	e007      	b.n	405dd0 <.LVL573>
  405dc0:	0041d628 	.word	0x0041d628
  405dc4:	0041d5f8 	.word	0x0041d5f8
  405dc8:	66666667 	.word	0x66666667

00405dcc <.LVL572>:
  405dcc:	f811 3b01 	ldrb.w	r3, [r1], #1

00405dd0 <.LVL573>:
  405dd0:	f800 3b01 	strb.w	r3, [r0], #1

00405dd4 <.LVL574>:
  405dd4:	428c      	cmp	r4, r1
  405dd6:	d1f9      	bne.n	405dcc <.LVL572>
  405dd8:	3401      	adds	r4, #1
  405dda:	1aa2      	subs	r2, r4, r2

00405ddc <.LVL575>:
  405ddc:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
  405de0:	441a      	add	r2, r3

00405de2 <.LVL576>:
  405de2:	ab1e      	add	r3, sp, #120	; 0x78

00405de4 <.LVL577>:
  405de4:	1ad3      	subs	r3, r2, r3

00405de6 <.LBE59>:
  405de6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c

00405de8 <.LBB60>:
  405de8:	9319      	str	r3, [sp, #100]	; 0x64

00405dea <.LBE60>:
  405dea:	2a01      	cmp	r2, #1
  405dec:	4413      	add	r3, r2
  405dee:	9308      	str	r3, [sp, #32]

00405df0 <.LVL581>:
  405df0:	f340 81ad 	ble.w	40614e <.LBE72>
  405df4:	9b08      	ldr	r3, [sp, #32]

00405df6 <.LVL582>:
  405df6:	9a15      	ldr	r2, [sp, #84]	; 0x54
  405df8:	4413      	add	r3, r2
  405dfa:	9308      	str	r3, [sp, #32]
  405dfc:	2300      	movs	r3, #0
  405dfe:	9313      	str	r3, [sp, #76]	; 0x4c
  405e00:	9310      	str	r3, [sp, #64]	; 0x40
  405e02:	930e      	str	r3, [sp, #56]	; 0x38
  405e04:	9b08      	ldr	r3, [sp, #32]
  405e06:	f42e 6e80 	bic.w	lr, lr, #1024	; 0x400
  405e0a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405e0e:	f44e 7880 	orr.w	r8, lr, #256	; 0x100

00405e12 <.LVL584>:
  405e12:	9302      	str	r3, [sp, #8]
  405e14:	e605      	b.n	405a22 <.LVL466>

00405e16 <.LBB23>:
  405e16:	aa22      	add	r2, sp, #136	; 0x88
  405e18:	9905      	ldr	r1, [sp, #20]
  405e1a:	4658      	mov	r0, fp
  405e1c:	f011 ff1e 	bl	417c5c <.LFE215>

00405e20 <.LVL586>:
  405e20:	2800      	cmp	r0, #0
  405e22:	f47e ae59 	bne.w	404ad8 <.L189>
  405e26:	9b24      	ldr	r3, [sp, #144]	; 0x90

00405e28 <.LVL587>:
  405e28:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00405e2c <.LVL588>:
  405e2c:	f7ff bb29 	b.w	405482 <.LVL300>

00405e30 <.LBE23>:
  405e30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405e32:	6813      	ldr	r3, [r2, #0]
  405e34:	3204      	adds	r2, #4

00405e36 <.LVL590>:
  405e36:	920a      	str	r2, [sp, #40]	; 0x28
  405e38:	f8bd 200c 	ldrh.w	r2, [sp, #12]

00405e3c <.LVL591>:
  405e3c:	801a      	strh	r2, [r3, #0]
  405e3e:	463e      	mov	r6, r7

00405e40 <.LVL592>:
  405e40:	f7fe bd81 	b.w	404946 <.LVL10>

00405e44 <.LVL593>:
  405e44:	9b04      	ldr	r3, [sp, #16]
  405e46:	9613      	str	r6, [sp, #76]	; 0x4c
  405e48:	2b06      	cmp	r3, #6
  405e4a:	bf28      	it	cs
  405e4c:	2306      	movcs	r3, #6
  405e4e:	4632      	mov	r2, r6
  405e50:	9604      	str	r6, [sp, #16]
  405e52:	9610      	str	r6, [sp, #64]	; 0x40
  405e54:	960e      	str	r6, [sp, #56]	; 0x38
  405e56:	9609      	str	r6, [sp, #36]	; 0x24
  405e58:	9302      	str	r3, [sp, #8]

00405e5a <.LVL594>:
  405e5a:	950a      	str	r5, [sp, #40]	; 0x28
  405e5c:	9308      	str	r3, [sp, #32]
  405e5e:	4eae      	ldr	r6, [pc, #696]	; (406118 <.LVL671+0x2>)
  405e60:	f7fe beaf 	b.w	404bc2 <.L59>

00405e64 <.LVL595>:
  405e64:	222d      	movs	r2, #45	; 0x2d
  405e66:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
  405e6a:	f7ff b90d 	b.w	405088 <.LVL189+0x20>
  405e6e:	2330      	movs	r3, #48	; 0x30
  405e70:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
  405e74:	2378      	movs	r3, #120	; 0x78
  405e76:	e6c1      	b.n	405bfc <.LVL523+0x8>

00405e78 <.LVL596>:
  405e78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405e7a:	9a15      	ldr	r2, [sp, #84]	; 0x54
  405e7c:	4413      	add	r3, r2
  405e7e:	9308      	str	r3, [sp, #32]

00405e80 <.LVL597>:
  405e80:	9b0e      	ldr	r3, [sp, #56]	; 0x38

00405e82 <.LVL598>:
  405e82:	2b00      	cmp	r3, #0
  405e84:	f340 814e 	ble.w	406124 <.LBE71>
  405e88:	2367      	movs	r3, #103	; 0x67
  405e8a:	930d      	str	r3, [sp, #52]	; 0x34

00405e8c <.LVL599>:
  405e8c:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  405e90:	f47f ada3 	bne.w	4059da <.LVL457>
  405e94:	9b08      	ldr	r3, [sp, #32]
  405e96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405e9a:	9302      	str	r3, [sp, #8]

00405e9c <.LVL600>:
  405e9c:	2300      	movs	r3, #0
  405e9e:	9313      	str	r3, [sp, #76]	; 0x4c
  405ea0:	9310      	str	r3, [sp, #64]	; 0x40
  405ea2:	e5be      	b.n	405a22 <.LVL466>

00405ea4 <.LBB62>:
  405ea4:	9309      	str	r3, [sp, #36]	; 0x24

00405ea6 <.LVL602>:
  405ea6:	232d      	movs	r3, #45	; 0x2d
  405ea8:	9306      	str	r3, [sp, #24]
  405eaa:	eeb1 ab48 	vneg.f64	d10, d8

00405eae <.LVL603>:
  405eae:	e6c0      	b.n	405c32 <.LVL527>

00405eb0 <.LVL604>:
  405eb0:	9120      	str	r1, [sp, #128]	; 0x80
  405eb2:	f812 0c01 	ldrb.w	r0, [r2, #-1]

00405eb6 <.LVL605>:
  405eb6:	7be3      	ldrb	r3, [r4, #15]
  405eb8:	4283      	cmp	r3, r0
  405eba:	f040 8150 	bne.w	40615e <.LBB74>
  405ebe:	4613      	mov	r3, r2
  405ec0:	f04f 0e30 	mov.w	lr, #48	; 0x30
  405ec4:	f803 ec01 	strb.w	lr, [r3, #-1]
  405ec8:	9b20      	ldr	r3, [sp, #128]	; 0x80
  405eca:	1e59      	subs	r1, r3, #1
  405ecc:	9120      	str	r1, [sp, #128]	; 0x80
  405ece:	f813 1c01 	ldrb.w	r1, [r3, #-1]
  405ed2:	4281      	cmp	r1, r0
  405ed4:	d0f6      	beq.n	405ec4 <.LVL605+0xe>
  405ed6:	2939      	cmp	r1, #57	; 0x39
  405ed8:	bf16      	itet	ne
  405eda:	3101      	addne	r1, #1
  405edc:	7aa1      	ldrbeq	r1, [r4, #10]
  405ede:	b2c9      	uxtbne	r1, r1
  405ee0:	f803 1c01 	strb.w	r1, [r3, #-1]
  405ee4:	e6f9      	b.n	405cda <.LVL541>

00405ee6 <.LBB63>:
  405ee6:	9b04      	ldr	r3, [sp, #16]
  405ee8:	9302      	str	r3, [sp, #8]
  405eea:	9308      	str	r3, [sp, #32]

00405eec <.LBE63>:
  405eec:	9004      	str	r0, [sp, #16]
  405eee:	950a      	str	r5, [sp, #40]	; 0x28
  405ef0:	9013      	str	r0, [sp, #76]	; 0x4c
  405ef2:	9010      	str	r0, [sp, #64]	; 0x40
  405ef4:	900e      	str	r0, [sp, #56]	; 0x38
  405ef6:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  405efa:	f7fe be62 	b.w	404bc2 <.L59>

00405efe <.LVL607>:
  405efe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  405f00:	930e      	str	r3, [sp, #56]	; 0x38
  405f02:	2b00      	cmp	r3, #0
  405f04:	9b04      	ldr	r3, [sp, #16]
  405f06:	f340 812d 	ble.w	406164 <.LBE74>

00405f0a <.LVL608>:
  405f0a:	2b00      	cmp	r3, #0
  405f0c:	f040 80ec 	bne.w	4060e8 <.LVL665>
  405f10:	f01e 0f01 	tst.w	lr, #1
  405f14:	f040 80e8 	bne.w	4060e8 <.LVL665>
  405f18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405f1a:	9308      	str	r3, [sp, #32]
  405f1c:	2366      	movs	r3, #102	; 0x66
  405f1e:	930d      	str	r3, [sp, #52]	; 0x34
  405f20:	e7b4      	b.n	405e8c <.LVL599>

00405f22 <.LBB64>:
  405f22:	9c04      	ldr	r4, [sp, #16]
  405f24:	eeb0 0b4a 	vmov.f64	d0, d10
  405f28:	aa20      	add	r2, sp, #128	; 0x80

00405f2a <.LVL610>:
  405f2a:	ab1d      	add	r3, sp, #116	; 0x74
  405f2c:	9201      	str	r2, [sp, #4]
  405f2e:	9300      	str	r3, [sp, #0]
  405f30:	2103      	movs	r1, #3
  405f32:	ab1c      	add	r3, sp, #112	; 0x70

00405f34 <.LVL611>:
  405f34:	4622      	mov	r2, r4
  405f36:	4658      	mov	r0, fp
  405f38:	f004 f8a2 	bl	40a080 <_dtoa_r>

00405f3c <.LVL612>:
  405f3c:	4606      	mov	r6, r0

00405f3e <.LVL613>:
  405f3e:	1901      	adds	r1, r0, r4

00405f40 <.LVL614>:
  405f40:	7833      	ldrb	r3, [r6, #0]
  405f42:	2b30      	cmp	r3, #48	; 0x30
  405f44:	f000 80f9 	beq.w	40613a <.LBB72>
  405f48:	9c1c      	ldr	r4, [sp, #112]	; 0x70

00405f4a <.LVL615>:
  405f4a:	4421      	add	r1, r4
  405f4c:	eeb5 ab40 	vcmp.f64	d10, #0.0
  405f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405f54:	d00b      	beq.n	405f6e <.LVL618>
  405f56:	9b20      	ldr	r3, [sp, #128]	; 0x80
  405f58:	4299      	cmp	r1, r3
  405f5a:	f67f ad11 	bls.w	405980 <.LVL452>
  405f5e:	2030      	movs	r0, #48	; 0x30

00405f60 <.LVL617>:
  405f60:	1c5a      	adds	r2, r3, #1
  405f62:	9220      	str	r2, [sp, #128]	; 0x80
  405f64:	7018      	strb	r0, [r3, #0]
  405f66:	9b20      	ldr	r3, [sp, #128]	; 0x80
  405f68:	4299      	cmp	r1, r3
  405f6a:	d8f9      	bhi.n	405f60 <.LVL617>
  405f6c:	e508      	b.n	405980 <.LVL452>

00405f6e <.LVL618>:
  405f6e:	460b      	mov	r3, r1
  405f70:	e506      	b.n	405980 <.LVL452>

00405f72 <.LBB24>:
  405f72:	aa22      	add	r2, sp, #136	; 0x88
  405f74:	9905      	ldr	r1, [sp, #20]
  405f76:	4658      	mov	r0, fp
  405f78:	f011 fe70 	bl	417c5c <.LFE215>

00405f7c <.LVL620>:
  405f7c:	2800      	cmp	r0, #0
  405f7e:	f47e adab 	bne.w	404ad8 <.L189>
  405f82:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  405f84:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405f86:	9b24      	ldr	r3, [sp, #144]	; 0x90

00405f88 <.LVL621>:
  405f88:	1a8a      	subs	r2, r1, r2
  405f8a:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00405f8e <.LVL622>:
  405f8e:	e436      	b.n	4057fe <.LVL409>

00405f90 <.LBE24>:
  405f90:	424c      	negs	r4, r1
  405f92:	3110      	adds	r1, #16

00405f94 <.LVL624>:
  405f94:	da5d      	bge.n	406052 <.LVL651>
  405f96:	2510      	movs	r5, #16
  405f98:	e004      	b.n	405fa4 <.LVL626+0x6>

00405f9a <.LVL625>:
  405f9a:	f109 0908 	add.w	r9, r9, #8

00405f9e <.LVL626>:
  405f9e:	3c10      	subs	r4, #16
  405fa0:	2c10      	cmp	r4, #16
  405fa2:	dd56      	ble.n	406052 <.LVL651>
  405fa4:	3201      	adds	r2, #1
  405fa6:	3310      	adds	r3, #16
  405fa8:	2a07      	cmp	r2, #7
  405faa:	9324      	str	r3, [sp, #144]	; 0x90

00405fac <.LVL629>:
  405fac:	9223      	str	r2, [sp, #140]	; 0x8c
  405fae:	f8c9 a000 	str.w	sl, [r9]
  405fb2:	f8c9 5004 	str.w	r5, [r9, #4]
  405fb6:	ddf0      	ble.n	405f9a <.LVL625>
  405fb8:	aa22      	add	r2, sp, #136	; 0x88
  405fba:	9905      	ldr	r1, [sp, #20]
  405fbc:	4658      	mov	r0, fp
  405fbe:	f011 fe4d 	bl	417c5c <.LFE215>

00405fc2 <.LVL630>:
  405fc2:	2800      	cmp	r0, #0
  405fc4:	f47e ad88 	bne.w	404ad8 <.L189>
  405fc8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405fca:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  405fcc:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00405fd0 <.LVL631>:
  405fd0:	e7e5      	b.n	405f9e <.LVL626>

00405fd2 <.LVL632>:
  405fd2:	aa22      	add	r2, sp, #136	; 0x88
  405fd4:	9905      	ldr	r1, [sp, #20]
  405fd6:	4658      	mov	r0, fp
  405fd8:	f011 fe40 	bl	417c5c <.LFE215>

00405fdc <.LVL633>:
  405fdc:	2800      	cmp	r0, #0
  405fde:	f47e ad7b 	bne.w	404ad8 <.L189>
  405fe2:	991c      	ldr	r1, [sp, #112]	; 0x70
  405fe4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405fe6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  405fe8:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00405fec <.LVL634>:
  405fec:	e589      	b.n	405b02 <.LVL494>

00405fee <.LVL635>:
  405fee:	9b08      	ldr	r3, [sp, #32]
  405ff0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405ff4:	9302      	str	r3, [sp, #8]

00405ff6 <.LVL636>:
  405ff6:	2367      	movs	r3, #103	; 0x67
  405ff8:	930d      	str	r3, [sp, #52]	; 0x34
  405ffa:	e74f      	b.n	405e9c <.LVL600>

00405ffc <.LVL637>:
  405ffc:	2200      	movs	r2, #0
  405ffe:	9204      	str	r2, [sp, #16]
  406000:	f7fe bcd2 	b.w	4049a8 <.LVL22+0x2>

00406004 <.LBB66>:
  406004:	1931      	adds	r1, r6, r4

00406006 <.LVL639>:
  406006:	e7a1      	b.n	405f4c <.LVL615+0x2>

00406008 <.LBB67>:
  406008:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40600a:	320f      	adds	r2, #15
  40600c:	b2d2      	uxtb	r2, r2
  40600e:	2101      	movs	r1, #1
  406010:	e6a4      	b.n	405d5c <.LVL560>

00406012 <.LBB68>:
  406012:	eeb0 0b4a 	vmov.f64	d0, d10
  406016:	a81c      	add	r0, sp, #112	; 0x70

00406018 <.LVL642>:
  406018:	f015 fc6a 	bl	41b8f0 <.LFE260>

0040601c <.LVL643>:
  40601c:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
  406020:	ee20 0b07 	vmul.f64	d0, d0, d7

00406024 <.LVL644>:
  406024:	eeb5 0b40 	vcmp.f64	d0, #0.0
  406028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40602c:	f000 80af 	beq.w	40618e <.LBB75>
  406030:	4c3a      	ldr	r4, [pc, #232]	; (40611c <.LVL671+0x6>)
  406032:	e616      	b.n	405c62 <.LVL531>

00406034 <.LBB69>:
  406034:	2900      	cmp	r1, #0
  406036:	f040 808f 	bne.w	406158 <.LBB73>

0040603a <.LVL646>:
  40603a:	2230      	movs	r2, #48	; 0x30
  40603c:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
  406040:	f10d 027b 	add.w	r2, sp, #123	; 0x7b

00406044 <.LVL647>:
  406044:	3330      	adds	r3, #48	; 0x30

00406046 <.LVL648>:
  406046:	7013      	strb	r3, [r2, #0]
  406048:	3201      	adds	r2, #1
  40604a:	e6ca      	b.n	405de2 <.LVL576>

0040604c <.LBE69>:
  40604c:	2306      	movs	r3, #6
  40604e:	9304      	str	r3, [sp, #16]
  406050:	e466      	b.n	405920 <.LBB28>

00406052 <.LVL651>:
  406052:	3201      	adds	r2, #1
  406054:	4423      	add	r3, r4
  406056:	2a07      	cmp	r2, #7
  406058:	f8c9 a000 	str.w	sl, [r9]
  40605c:	f8c9 4004 	str.w	r4, [r9, #4]
  406060:	9324      	str	r3, [sp, #144]	; 0x90
  406062:	9223      	str	r2, [sp, #140]	; 0x8c
  406064:	f109 0908 	add.w	r9, r9, #8
  406068:	f77f ad4e 	ble.w	405b08 <.LVL495>
  40606c:	aa22      	add	r2, sp, #136	; 0x88
  40606e:	9905      	ldr	r1, [sp, #20]
  406070:	4658      	mov	r0, fp
  406072:	f011 fdf3 	bl	417c5c <.LFE215>

00406076 <.LVL653>:
  406076:	2800      	cmp	r0, #0
  406078:	f47e ad2e 	bne.w	404ad8 <.L189>
  40607c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40607e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  406080:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00406084 <.LVL654>:
  406084:	e540      	b.n	405b08 <.LVL495>

00406086 <.LVL655>:
  406086:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406088:	9308      	str	r3, [sp, #32]
  40608a:	e49c      	b.n	4059c6 <.LVL456>

0040608c <.LVL656>:
  40608c:	1c59      	adds	r1, r3, #1
  40608e:	4658      	mov	r0, fp
  406090:	f007 ff62 	bl	40df58 <.LFE174>

00406094 <.LVL657>:
  406094:	4606      	mov	r6, r0

00406096 <.LVL658>:
  406096:	2800      	cmp	r0, #0
  406098:	f000 8096 	beq.w	4061c8 <.LVL695>
  40609c:	9009      	str	r0, [sp, #36]	; 0x24
  40609e:	e5b8      	b.n	405c12 <.LBB48>

004060a0 <.LBB70>:
  4060a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4060a2:	2b47      	cmp	r3, #71	; 0x47
  4060a4:	d1ae      	bne.n	406004 <.LBB66>
  4060a6:	f018 0f01 	tst.w	r8, #1
  4060aa:	f43f ac68 	beq.w	40597e <.LVL451>
  4060ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4060b0:	2b46      	cmp	r3, #70	; 0x46
  4060b2:	eb06 0104 	add.w	r1, r6, r4

004060b6 <.LVL660>:
  4060b6:	f43f af43 	beq.w	405f40 <.LVL614>
  4060ba:	e747      	b.n	405f4c <.LVL615+0x2>

004060bc <.LBE70>:
  4060bc:	4e18      	ldr	r6, [pc, #96]	; (406120 <.LVL671+0xa>)

004060be <.LVL662>:
  4060be:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  4060c0:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  4060c4:	2300      	movs	r3, #0
  4060c6:	4619      	mov	r1, r3
  4060c8:	2003      	movs	r0, #3
  4060ca:	9309      	str	r3, [sp, #36]	; 0x24
  4060cc:	1f33      	subs	r3, r6, #4
  4060ce:	9104      	str	r1, [sp, #16]
  4060d0:	9002      	str	r0, [sp, #8]
  4060d2:	f028 0880 	bic.w	r8, r8, #128	; 0x80

004060d6 <.LVL663>:
  4060d6:	2c47      	cmp	r4, #71	; 0x47
  4060d8:	bfd8      	it	le
  4060da:	461e      	movle	r6, r3

004060dc <.LVL664>:
  4060dc:	9113      	str	r1, [sp, #76]	; 0x4c
  4060de:	9110      	str	r1, [sp, #64]	; 0x40
  4060e0:	910e      	str	r1, [sp, #56]	; 0x38
  4060e2:	9008      	str	r0, [sp, #32]
  4060e4:	f7fe bd6d 	b.w	404bc2 <.L59>

004060e8 <.LVL665>:
  4060e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4060ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4060ec:	4413      	add	r3, r2
  4060ee:	9a04      	ldr	r2, [sp, #16]
  4060f0:	441a      	add	r2, r3
  4060f2:	2366      	movs	r3, #102	; 0x66
  4060f4:	9208      	str	r2, [sp, #32]

004060f6 <.LVL666>:
  4060f6:	930d      	str	r3, [sp, #52]	; 0x34
  4060f8:	e6c8      	b.n	405e8c <.LVL599>

004060fa <.LBB71>:
  4060fa:	9c04      	ldr	r4, [sp, #16]
  4060fc:	eeb0 0b4a 	vmov.f64	d0, d10
  406100:	aa20      	add	r2, sp, #128	; 0x80

00406102 <.LVL668>:
  406102:	ab1d      	add	r3, sp, #116	; 0x74
  406104:	9201      	str	r2, [sp, #4]
  406106:	9300      	str	r3, [sp, #0]
  406108:	4622      	mov	r2, r4
  40610a:	ab1c      	add	r3, sp, #112	; 0x70

0040610c <.LVL669>:
  40610c:	2103      	movs	r1, #3
  40610e:	4658      	mov	r0, fp
  406110:	f003 ffb6 	bl	40a080 <_dtoa_r>

00406114 <.LVL670>:
  406114:	4606      	mov	r6, r0

00406116 <.LVL671>:
  406116:	e7ca      	b.n	4060ae <.LBB70+0xe>
  406118:	0041d620 	.word	0x0041d620
  40611c:	0041d60c 	.word	0x0041d60c
  406120:	0041d5f4 	.word	0x0041d5f4

00406124 <.LBE71>:
  406124:	9a08      	ldr	r2, [sp, #32]
  406126:	f1c3 0301 	rsb	r3, r3, #1
  40612a:	441a      	add	r2, r3
  40612c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  406130:	9302      	str	r3, [sp, #8]

00406132 <.LVL673>:
  406132:	2367      	movs	r3, #103	; 0x67
  406134:	9208      	str	r2, [sp, #32]

00406136 <.LVL674>:
  406136:	930d      	str	r3, [sp, #52]	; 0x34
  406138:	e6b0      	b.n	405e9c <.LVL600>

0040613a <.LBB72>:
  40613a:	eeb5 ab40 	vcmp.f64	d10, #0.0
  40613e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  406142:	f43f af01 	beq.w	405f48 <.LVL614+0x8>
  406146:	f1c4 0401 	rsb	r4, r4, #1

0040614a <.LVL676>:
  40614a:	941c      	str	r4, [sp, #112]	; 0x70
  40614c:	e6fd      	b.n	405f4a <.LVL615>

0040614e <.LBE72>:
  40614e:	f01e 0f01 	tst.w	lr, #1
  406152:	f43f ae53 	beq.w	405dfc <.LVL582+0x6>
  406156:	e64d      	b.n	405df4 <.LVL581+0x4>

00406158 <.LBB73>:
  406158:	f10d 027a 	add.w	r2, sp, #122	; 0x7a

0040615c <.LVL679>:
  40615c:	e772      	b.n	406044 <.LVL647>

0040615e <.LBB74>:
  40615e:	4601      	mov	r1, r0
  406160:	4613      	mov	r3, r2
  406162:	e6b8      	b.n	405ed6 <.LVL605+0x20>

00406164 <.LBE74>:
  406164:	b913      	cbnz	r3, 40616c <.LBE74+0x8>
  406166:	f01e 0f01 	tst.w	lr, #1
  40616a:	d00a      	beq.n	406182 <.LVL683>
  40616c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40616e:	9a04      	ldr	r2, [sp, #16]
  406170:	3301      	adds	r3, #1
  406172:	441a      	add	r2, r3
  406174:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  406178:	9302      	str	r3, [sp, #8]

0040617a <.LVL682>:
  40617a:	2366      	movs	r3, #102	; 0x66
  40617c:	9208      	str	r2, [sp, #32]
  40617e:	930d      	str	r3, [sp, #52]	; 0x34
  406180:	e68c      	b.n	405e9c <.LVL600>

00406182 <.LVL683>:
  406182:	2301      	movs	r3, #1
  406184:	9302      	str	r3, [sp, #8]

00406186 <.LVL684>:
  406186:	9308      	str	r3, [sp, #32]

00406188 <.LVL685>:
  406188:	2366      	movs	r3, #102	; 0x66
  40618a:	930d      	str	r3, [sp, #52]	; 0x34
  40618c:	e686      	b.n	405e9c <.LVL600>

0040618e <.LBB75>:
  40618e:	2301      	movs	r3, #1
  406190:	931c      	str	r3, [sp, #112]	; 0x70
  406192:	e74d      	b.n	406030 <.LVL644+0xc>

00406194 <.LVL687>:
  406194:	980a      	ldr	r0, [sp, #40]	; 0x28
  406196:	787b      	ldrb	r3, [r7, #1]

00406198 <.LVL688>:
  406198:	6802      	ldr	r2, [r0, #0]
  40619a:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
  40619e:	9204      	str	r2, [sp, #16]

004061a0 <.LBE75>:
  4061a0:	4602      	mov	r2, r0
  4061a2:	3204      	adds	r2, #4

004061a4 <.LVL689>:
  4061a4:	460f      	mov	r7, r1

004061a6 <.LVL690>:
  4061a6:	920a      	str	r2, [sp, #40]	; 0x28
  4061a8:	f7fe bbfd 	b.w	4049a6 <.LVL22>

004061ac <.LBB76>:
  4061ac:	f10d 027a 	add.w	r2, sp, #122	; 0x7a

004061b0 <.LVL692>:
  4061b0:	e617      	b.n	405de2 <.LVL576>

004061b2 <.LBE76>:
  4061b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4061b4:	230c      	movs	r3, #12
  4061b6:	6013      	str	r3, [r2, #0]
  4061b8:	f04f 33ff 	mov.w	r3, #4294967295
  4061bc:	9303      	str	r3, [sp, #12]
  4061be:	f7fe bc9b 	b.w	404af8 <.LVL45>

004061c2 <.LVL694>:
  4061c2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  4061c4:	930e      	str	r3, [sp, #56]	; 0x38
  4061c6:	e5bf      	b.n	405d48 <.LVL557>

004061c8 <.LVL695>:
  4061c8:	9a05      	ldr	r2, [sp, #20]
  4061ca:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4061ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4061d2:	8193      	strh	r3, [r2, #12]
  4061d4:	f7fe bc89 	b.w	404aea <.LVL44+0x6>

Disassembly of section .rodata.sample_text%63:

004061d8 <sample_text>:
  4061d8:	6942 646f 6569 6573 206c 7563 6970 6164     Biodiesel cupida
  4061e8:	6174 2074 616d 6672 2c61 6320 696c 6863     tat marfa, clich
  4061f8:	2065 7561 6574 7020 7475 6120 6220 7269     e aute put a bir
  406208:	2064 6e6f 6920 2074 6e69 6963 6964 7564     d on it incididu
  406218:	746e 6520 696c 0a74 6f70 616c 6f72 6469     nt elit.polaroid
  406228:	202e 7553 746e 7420 7461 6f74 656f 2064     . Sunt tattooed 
  406238:	6562 7073 6b6f 2065 6572 7270 6865 6e65     bespoke reprehen
  406248:	6564 6972 2e74 5320 6e69 2074 7774 6565     derit. Sint twee
  406258:	6f20 6772 6e61 6369 6920 0a64 616d 6672      organic id.marf
  406268:	2e61 4320 6d6f 6f6d 6f64 7620 6e65 6169     a. Commodo venia
  406278:	206d 6461 6520 7373 2065 6167 7473 6f72     m ad esse gastro
  406288:	7570 2e62 3320 7720 6c6f 2066 6f6d 6e6f     pub. 3 wolf moon
  406298:	7320 7261 6f74 6972 6c61 7620 7265 2c6f      sartorial vero,
  4062a8:	700a 616c 6469 6420 6c65 6365 7574 2073     .plaid delectus 
  4062b8:	6962 646f 6569 6573 206c 7173 6975 2064     biodiesel squid 
  4062c8:	312b 7620 6369 2e65 5020 736f 2d74 7269     +1 vice. Post-ir
  4062d8:	6e6f 6369 6b20 6665 6966 6579 2068 656c     onic keffiyeh le
  4062e8:	6767 6e69 7367 730a 6c65 6966 7365 6320     ggings.selfies c
  4062f8:	6172 2079 6166 2070 6f68 646f 6569 202c     ray fap hoodie, 
  406308:	6f66 6172 6567 6120 696e 2e6d 4320 7261     forage anim. Car
  406318:	656c 2073 7563 6970 6164 6174 2074 6873     les cupidatat sh
  406328:	726f 6465 7469 6863 202c 4856 0a53 6d73     oreditch, VHS.sm
  406338:	6c61 206c 6162 6374 2068 656d 6767 6e69     all batch meggin
  406348:	7367 6b20 676f 2069 6f64 6f6c 6572 6620     gs kogi dolore f
  406358:	6f6f 2064 7274 6375 206b 6562 7073 6b6f     ood truck bespok
  406368:	2065 6167 7473 6f72 7570 2e62 0a0a 6554     e gastropub...Te
  406378:	7272 2079 6972 6863 7261 7364 6e6f 6120     rry richardson a
  406388:	6964 6970 6973 6963 676e 6120 7463 6175     dipisicing actua
  406398:	6c6c 2079 7974 6570 7277 7469 7265 7420     lly typewriter t
  4063a8:	6d75 6c62 2c72 7420 6577 2065 6877 7461     umblr, twee what
  4063b8:	7665 7265 660a 756f 2072 6f6c 6f6b 7920     ever.four loko y
  4063c8:	756f 7020 6f72 6162 6c62 2079 6168 6576     ou probably have
  4063d8:	276e 2074 6568 7261 2064 666f 7420 6568     n't heard of the
  4063e8:	206d 6968 6867 6c20 6669 2e65 4d20 7365     m high life. Mes
  4063f8:	6573 676e 7265 6220 6761 770a 6168 6574     senger bag.whate
  406408:	6576 2072 6174 7474 6f6f 6465 6420 6565     ver tattooed dee
  406418:	2070 2076 6c6d 736b 6b68 202e 7242 6f6f     p v mlkshk. Broo
  406428:	6c6b 6e79 7020 6e69 6574 6572 7473 6120     klyn pinterest a
  406438:	7373 6d75 6e65 6164 6320 6968 6c6c 6177     ssumenda chillwa
  406448:	6576 650a 2c74 6220 6e61 736b 2079 6c75     ve.et, banksy ul
  406458:	616c 636d 206f 656d 7373 6e65 6567 2072     lamco messenger 
  406468:	6162 2067 6d75 6d61 2069 6170 6972 7461     bag umami pariat
  406478:	7275 6420 7269 6365 2074 7274 6461 2065     ur direct trade 
  406488:	6f66 6172 6567 0a2e 7954 6570 7277 7469     forage..Typewrit
  406498:	7265 6320 6c75 6170 7420 7972 682d 7261     er culpa try-har
  4064a8:	2c64 7020 7261 6169 7574 2072 6973 746e     d, pariatur sint
  4064b8:	6220 6f72 6b6f 796c 206e 656d 6767 6e69      brooklyn meggin
  4064c8:	7367 202e 6547 746e 6972 7966 660a 6f6f     gs. Gentrify.foo
  4064d8:	2064 7274 6375 206b 656e 7478 6c20 7665     d truck next lev
  4064e8:	6c65 202c 6f74 7375 656c 2064 7269 6e6f     el, tousled iron
  4064f8:	2079 6f6e 206e 6573 696d 746f 6369 2073     y non semiotics 
  406508:	4250 2052 7465 6968 6163 206c 6e61 6d69     PBR ethical anim
  406518:	6320 6572 0a64 6572 6461 6d79 6461 2e65      cred.readymade.
  406528:	4d20 6d75 6c62 6365 726f 2065 7262 6e75      Mumblecore brun
  406538:	6863 6c20 6d6f 206f 646f 2064 7566 7574     ch lomo odd futu
  406548:	6572 202c 6f70 7472 616c 646e 6f20 6772     re, portland org
  406558:	6e61 6369 7420 7265 7972 720a 6369 6168     anic terry.richa
  406568:	6472 6f73 206e 6c65 7469 6c20 6765 6967     rdson elit leggi
  406578:	676e 2073 6461 7069 7369 6369 6e69 2067     ngs adipisicing 
  406588:	6e65 756e 2069 6172 2077 6564 696e 206d     ennui raw denim 
  406598:	6162 6a6e 206f 6568 6c6c 2e61 4720 646f     banjo hella. God
  4065a8:	7261 0a64 696d 7478 7061 2065 6f70 616c     ard.mixtape pola
  4065b8:	6f72 6469 202c 6f70 6b72 6220 6c65 796c     roid, pork belly
  4065c8:	7220 6165 7964 616d 6564 6f20 6772 6e61      readymade organ
  4065d8:	6369 6320 6172 2079 7974 6570 7277 7469     ic cray typewrit
  4065e8:	7265 6820 6c65 6576 6974 6163 660a 756f     er helvetica.fou
  4065f8:	2072 6f6c 6f6b 7720 6168 6574 6576 2072     r loko whatever 
  406608:	7473 6572 7465 6120 7472 7920 2072 6166     street art yr fa
  406618:	6d72 742d 2d6f 6174 6c62 2e65 0a0a 6956     rm-to-table...Vi
  406628:	796e 206c 656b 7479 7261 7620 6369 2065     nyl keytar vice 
  406638:	6f74 7566 202e 6f4c 6163 6f76 6572 7920     tofu. Locavore y
  406648:	756f 7020 6f72 6162 6c62 2079 6168 6576     ou probably have
  406658:	276e 2074 6568 7261 2064 666f 7420 6568     n't heard of the
  406668:	206d 7570 0a67 6970 6b63 656c 2c64 6820     m pug.pickled, h
  406678:	6c65 616c 7420 6e6f 2078 616c 6f62 6572     ella tonx labore
  406688:	7420 7572 6666 7561 2074 4944 2059 6c6d      truffaut DIY ml
  406698:	736b 6b68 6520 696c 2074 6f63 6273 2079     kshk elit cosby 
  4066a8:	7773 6165 6574 2072 6973 746e 650a 2074     sweater sint.et 
  4066b8:	756d 626d 656c 6f63 6572 202e 6c45 7469     mumblecore. Elit
  4066c8:	7320 6177 2067 6573 696d 746f 6369 2c73      swag semiotics,
  4066d8:	7220 7065 6572 6568 646e 7265 7469 4420      reprehenderit D
  4066e8:	5949 7320 7261 6f74 6972 6c61 6e20 7369     IY sartorial nis
  4066f8:	2069 6775 0a68 656e 6373 7569 746e 7020     i ugh.nesciunt p
  406708:	6775 7020 726f 206b 6562 6c6c 2079 6177     ug pork belly wa
  406718:	6679 7261 7265 2073 6573 666c 6569 2073     yfarers selfies 
  406728:	6564 656c 7463 7375 202e 7445 6968 6163     delectus. Ethica
  406738:	206c 6f68 646f 6569 730a 6965 6174 206e     l hoodie.seitan 
  406748:	6966 676e 7265 7473 6361 6568 6b20 6c61     fingerstache kal
  406758:	2065 6863 7069 2e73 5420 7265 7972 7220     e chips. Terry r
  406768:	6369 6168 6472 6f73 206e 7261 6974 6173     ichardson artisa
  406778:	206e 6977 6c6c 6169 736d 7562 6772 0a2c     n williamsburg,.
  406788:	6965 7375 6f6d 2064 6166 6e6e 2079 6170     eiusmod fanny pa
  406798:	6b63 6920 6f72 796e 7420 6e6f 2078 6e65     ck irony tonx en
  4067a8:	756e 2069 6f6c 662d 2069 6e69 6963 6964     nui lo-fi incidi
  4067b8:	7564 746e 7420 666f 2075 4f59 4f4c 720a     dunt tofu YOLO.r
  4067c8:	6165 7964 616d 6564 202e 2d38 6962 2074     eadymade. 8-bit 
  4067d8:	6573 2064 7465 6e68 6369 6220 6165 6472     sed ethnic beard
  4067e8:	6f20 6666 6369 6169 202e 6f50 7275 6f2d      officia. Pour-o
  4067f8:	6576 2072 7069 6f68 656e 4420 5949 6220     ver iphone DIY b
  406808:	7475 6863 7265 0a2c 7465 6e68 6369 6120     utcher,.ethnic a
  406818:	7472 7020 7261 7974 7120 6975 6c20 7465     rt party qui let
  406828:	6574 7072 6572 7373 6e20 7369 2069 7270     terpress nisi pr
  406838:	696f 6564 746e 6a20 6165 206e 6873 726f     oident jean shor
  406848:	7374 6d20 6b6c 6873 0a6b 6f6c 6163 6f76     ts mlkshk.locavo
  406858:	6572 0a2e 4e0a 7261 6877 6c61 6620 656c     re...Narwhal fle
  406868:	6978 6174 6972 6e61 6c20 7465 6574 7072     xitarian letterp
  406878:	6572 7373 202c 6f64 6720 756c 6574 2d6e     ress, do gluten-
  406888:	7266 6565 7620 6c6f 7075 6174 6574 6e20     free voluptate n
  406898:	7865 2074 656c 6576 0a6c 6162 686e 6d20     ext level.banh m
  4068a8:	2069 6f74 786e 6920 636e 6469 6469 6e75     i tonx incididun
  4068b8:	2074 6163 6c72 7365 4420 5949 202e 644f     t carles DIY. Od
  4068c8:	2064 7566 7574 6572 6e20 6c75 616c 3820     d future nulla 8
  4068d8:	622d 7469 6220 6165 6472 7520 0a74 6963     -bit beard ut.ci
  4068e8:	6c6c 6d75 7020 6369 6c6b 6465 7620 6c65     llum pickled vel
  4068f8:	7469 202c 4f59 4f4c 6f20 6666 6369 6169     it, YOLO officia
  406908:	7920 756f 7020 6f72 6162 6c62 2079 6168      you probably ha
  406918:	6576 276e 2074 6568 7261 2064 666f 7420     ven't heard of t
  406928:	6568 0a6d 7274 7375 2074 7566 646e 6720     hem.trust fund g
  406938:	7361 7274 706f 6275 202e 694e 6973 6120     astropub. Nisi a
  406948:	6964 6970 6973 6963 676e 7420 7461 6f74     dipisicing tatto
  406958:	656f 2c64 4120 7375 6974 206e 6c6d 736b     oed, Austin mlks
  406968:	6b68 3920 2730 0a73 6d73 6c61 206c 6162     hk 90's.small ba
  406978:	6374 2068 6d61 7265 6369 6e61 6120 7070     tch american app
  406988:	7261 6c65 202e 7550 2074 2061 6962 6472     arel. Put a bird
  406998:	6f20 206e 7469 6320 736f 7962 7320 6577      on it cosby swe
  4069a8:	7461 7265 6220 6665 726f 2065 6874 7965     ater before they
  4069b8:	730a 6c6f 2064 756f 2074 6f70 6b72 6220     .sold out pork b
  4069c8:	6c65 796c 6b20 676f 2069 6568 6c6c 2e61     elly kogi hella.
  4069d8:	5320 7274 6565 2074 7261 2074 6f6d 6c6c      Street art moll
  4069e8:	7469 7320 7375 6174 6e69 6261 656c 7020     it sustainable p
  4069f8:	6c6f 7261 696f 2c64 440a 5949 6520 6874     olaroid,.DIY eth
  406a08:	696e 2063 6165 7020 6775 6220 6165 6472     nic ea pug beard
  406a18:	6420 6572 6d61 6163 6374 6568 2072 6f63      dreamcatcher co
  406a28:	6273 2079 7773 6165 6574 2072 616d 6e67     sby sweater magn
  406a38:	2061 6373 6e65 7365 6574 2072 696e 6973     a scenester nisi
  406a48:	0a2e 6553 2064 6f70 6b72 6220 6c65 796c     ..Sed pork belly
  406a58:	7320 616b 6574 6f62 7261 2064 6f6d 6c6c      skateboard moll
  406a68:	7469 202c 616c 6f62 6572 7020 6f72 6469     it, labore proid
  406a78:	6e65 2074 6965 7375 6f6d 2e64 5320 6972     ent eiusmod. Sri
  406a88:	6172 6863 0a61 7865 6563 7470 7565 2072     racha.excepteur 
  406a98:	6f63 6273 2079 7773 6165 6574 2c72 6120     cosby sweater, a
  406aa8:	696e 206d 6564 6573 7572 746e 6c20 6261     nim deserunt lab
  406ab8:	726f 6d75 6520 2075 6c61 7169 6975 2070     orum eu aliquip 
  406ac8:	7465 6968 6163 206c 7465 6e0a 7565 7274     ethical et.neutr
  406ad8:	2061 4250 2052 6573 766c 6761 2e65 0a0a     a PBR selvage...
  406ae8:	6152 2077 6564 696e 206d 6f70 6b72 6220     Raw denim pork b
  406af8:	6c65 796c 7420 7572 6666 7561 2c74 6920     elly truffaut, i
  406b08:	6f72 796e 7020 616c 6469 7320 7375 6174     rony plaid susta
  406b18:	6e69 6261 656c 7020 7475 6120 6220 7269     inable put a bir
  406b28:	2064 6e6f 6920 0a74 656e 7478 6c20 7665     d on it.next lev
  406b38:	6c65 6a20 6165 206e 6873 726f 7374 6520     el jean shorts e
  406b48:	6578 6372 7469 7461 6f69 2e6e 4820 7361     xercitation. Has
  406b58:	7468 6761 6b20 7965 6174 2072 6877 7461     htag keytar what
  406b68:	7665 7265 202c 696e 6968 0a6c 7561 6874     ever, nihil.auth
  406b78:	6e65 6974 2063 6c61 7169 6975 2070 6964     entic aliquip di
  406b88:	7273 7075 2074 616c 6f62 7572 2e6d 5420     srupt laborum. T
  406b98:	7461 6f74 656f 2064 6573 666c 6569 2073     attooed selfies 
  406ba8:	6564 6573 7572 746e 7420 7572 7473 6620     deserunt trust f
  406bb8:	6e75 0a64 6177 6679 7261 7265 2e73 3320     und.wayfarers. 3
  406bc8:	7720 6c6f 2066 6f6d 6e6f 7320 6e79 6874      wolf moon synth
  406bd8:	6320 7568 6372 2d68 656b 2079 6173 7472      church-key sart
  406be8:	726f 6169 2c6c 6720 7361 7274 706f 6275     orial, gastropub
  406bf8:	6c20 6765 6967 676e 0a73 6174 7474 6f6f      leggings.tattoo
  406c08:	6465 202e 614c 6f62 6572 6820 6769 2068     ed. Labore high 
  406c18:	696c 6566 6320 6d6f 6f6d 6f64 202c 656d     life commodo, me
  406c28:	6767 6e69 7367 7220 7761 6420 6e65 6d69     ggings raw denim
  406c38:	6620 6e69 6567 7372 6174 6863 2065 7570      fingerstache pu
  406c48:	0a67 7274 7375 2074 7566 646e 6c20 6765     g.trust fund leg
  406c58:	6967 676e 2073 6573 7469 6e61 6620 726f     gings seitan for
  406c68:	6761 2e65 4e20 736f 7274 6475 7520 6c6c     age. Nostrud ull
  406c78:	6d61 6f63 6420 6975 2c73 7220 7065 6572     amco duis, repre
  406c88:	6568 646e 7265 7469 690a 636e 6469 6469     henderit.incidid
  406c98:	6e75 2074 6c66 6e61 656e 206c 7573 7473     unt flannel sust
  406ca8:	6961 616e 6c62 2065 6568 766c 7465 6369     ainable helvetic
  406cb8:	2061 6f70 6b72 6220 6c65 796c 7020 6775     a pork belly pug
  406cc8:	6220 6e61 736b 2079 6f79 0a75 7270 626f      banksy you.prob
  406cd8:	6261 796c 6820 7661 6e65 7427 6820 6165     ably haven't hea
  406ce8:	6472 6f20 2066 6874 6d65 6e20 7365 6963     rd of them nesci
  406cf8:	6e75 2074 6166 6d72 742d 2d6f 6174 6c62     unt farm-to-tabl
  406d08:	2e65 4420 7369 7572 7470 6e20 736f 7274     e. Disrupt nostr
  406d18:	6475 6d0a 6c6f 696c 2074 616d 6e67 2c61     ud.mollit magna,
  406d28:	7320 6972 6172 6863 2061 6173 7472 726f      sriracha sartor
  406d38:	6169 206c 6568 766c 7465 6369 2e61 0a0a     ial helvetica...
  406d48:	754e 6c6c 2061 6f6b 6967 7220 7065 6572     Nulla kogi repre
  406d58:	6568 646e 7265 7469 202c 6b73 7461 6265     henderit, skateb
  406d68:	616f 6472 7320 7375 6174 6e69 6261 656c     oard sustainable
  406d78:	6420 6975 2073 6461 7069 7369 6369 6e69      duis adipisicin
  406d88:	2067 6976 6172 0a6c 6461 6620 6e61 796e     g viral.ad fanny
  406d98:	7020 6361 206b 6173 766c 6169 202e 6146      pack salvia. Fa
  406da8:	6e6e 2079 6170 6b63 7420 7572 7473 6620     nny pack trust f
  406db8:	6e75 2064 6f79 2075 7270 626f 6261 796c     und you probably
  406dc8:	6820 7661 6e65 7427 6820 6165 6472 6f0a      haven't heard.o
  406dd8:	2066 6874 6d65 5920 4c4f 204f 6976 6563     f them YOLO vice
  406de8:	6e20 6869 6c69 202e 654b 6666 7969 6865      nihil. Keffiyeh
  406df8:	6320 6172 2079 6f6c 662d 2069 6970 746e      cray lo-fi pint
  406e08:	7265 7365 2074 6163 6472 6769 6e61 6120     erest cardigan a
  406e18:	696c 7571 2c61 720a 7065 6572 6568 646e     liqua,.reprehend
  406e28:	7265 7469 6120 7475 2e65 4320 6c75 6170     erit aute. Culpa
  406e38:	7420 756f 6c73 6465 7720 6c69 696c 6d61      tousled william
  406e48:	6273 7275 2c67 6d20 7261 6166 6c20 6d6f     sburg, marfa lom
  406e58:	206f 6361 7574 6c61 796c 6120 696e 0a6d     o actually anim.
  406e68:	6b73 7461 6265 616f 6472 202e 7049 6f68     skateboard. Ipho
  406e78:	656e 6120 696c 7571 2061 6775 2c68 7320     ne aliqua ugh, s
  406e88:	6d65 6f69 6974 7363 7020 7261 6169 7574     emiotics pariatu
  406e98:	2072 6576 6f72 7220 6165 7964 616d 6564     r vero readymade
  406ea8:	6f0a 6772 6e61 6369 202e 614d 6672 2061     .organic. Marfa 
  406eb8:	7173 6975 2064 756e 6c6c 2c61 6920 206e     squid nulla, in 
  406ec8:	616c 6f62 7572 206d 6964 7273 7075 2074     laborum disrupt 
  406ed8:	616c 6f62 6972 2073 7269 7275 2065 6167     laboris irure ga
  406ee8:	7473 6f72 7570 2e62 560a 6e65 6169 206d     stropub..Veniam 
  406ef8:	7573 746e 6620 6f6f 2064 7274 6375 206b     sunt food truck 
  406f08:	656c 6767 6e69 7367 202c 6973 746e 7620     leggings, sint v
  406f18:	6e69 6c79 6620 7061 0a2e 480a 6c65 616c     inyl fap...Hella
  406f28:	6420 6c6f 726f 2065 6f70 6b72 6220 6c65      dolore pork bel
  406f38:	796c 202c 7274 6675 6166 7475 6320 7261     ly, truffaut car
  406f48:	656c 2073 6f79 2075 7270 626f 6261 796c     les you probably
  406f58:	6820 7661 6e65 7427 6820 6165 6472 6f20      haven't heard o
  406f68:	0a66 6874 6d65 5020 5242 6820 6c65 6576     f.them PBR helve
  406f78:	6974 6163 6920 206e 6173 6970 6e65 6574     tica in sapiente
  406f88:	202e 6146 6873 6f69 206e 7861 2065 6775     . Fashion axe ug
  406f98:	2068 7562 6873 6977 6b63 6120 656d 6972     h bushwick ameri
  406fa8:	6163 0a6e 7061 6170 6572 2e6c 4620 6e69     can.apparel. Fin
  406fb8:	6567 7372 6174 6863 2065 6573 2064 7069     gerstache sed ip
  406fc8:	6f68 656e 202c 656a 6e61 7320 6f68 7472     hone, jean short
  406fd8:	2073 6c62 6575 6220 746f 6c74 2065 696e     s blue bottle ni
  406fe8:	6973 6220 7375 7768 6369 0a6b 6c66 7865     si bushwick.flex
  406ff8:	7469 7261 6169 206e 666f 6966 6963 2061     itarian officia 
  407008:	6576 696e 6d61 7020 616c 6469 6220 7365     veniam plaid bes
  407018:	6f70 656b 6620 7061 5920 4c4f 204f 6f6c     poke fap YOLO lo
  407028:	662d 2e69 4220 6f6c 0a67 656c 7474 7265     -fi. Blog.letter
  407038:	7270 7365 2073 756d 626d 656c 6f63 6572     press mumblecore
  407048:	202c 6f66 646f 7420 7572 6b63 6920 2064     , food truck id 
  407058:	7263 7961 6220 6f72 6b6f 796c 206e 6963     cray brooklyn ci
  407068:	6c6c 6d75 6120 2064 6573 2e64 410a 7373     llum ad sed..Ass
  407078:	6d75 6e65 6164 6320 6168 626d 6172 2079     umenda chambray 
  407088:	6177 6679 7261 7265 2073 6976 796e 206c     wayfarers vinyl 
  407098:	696d 7478 7061 2065 7573 7473 6961 616e     mixtape sustaina
  4070a8:	6c62 2e65 5620 5348 7620 6e69 6c79 640a     ble. VHS vinyl.d
  4070b8:	6c65 6365 7574 2c73 6320 6c75 6170 7720     electus, culpa w
  4070c8:	6c69 696c 6d61 6273 7275 2067 6f70 616c     illiamsburg pola
  4070d8:	6f72 6469 6320 696c 6863 2065 7773 6761     roid cliche swag
  4070e8:	6320 7568 6372 2d68 656b 2079 7973 746e      church-key synt
  4070f8:	2068 6f6b 6967 6d0a 6761 616e 7020 706f     h kogi.magna pop
  407108:	752d 2070 696c 6574 6172 6c6c 2e79 5320     -up literally. S
  407118:	6177 2067 6874 6e75 6564 6372 7461 2073     wag thundercats 
  407128:	6e65 756e 2069 6873 726f 6465 7469 6863     ennui shoreditch
  407138:	7620 6765 6e61 700a 7469 6863 6f66 6b72      vegan.pitchfork
  407148:	6e20 7565 7274 2061 7274 6675 6166 7475      neutra truffaut
  407158:	6520 7374 2c79 7320 6465 7320 6e69 6c67      etsy, sed singl
  407168:	2d65 726f 6769 6e69 6320 666f 6566 2065     e-origin coffee 
  407178:	7263 6661 2074 6562 7265 0a2e 4f0a 6964     craft beer...Odi
  407188:	206f 656c 7474 7265 7270 7365 2073 7262     o letterpress br
  407198:	6f6f 6c6b 6e79 6520 696c 2e74 4e20 6c75     ooklyn elit. Nul
  4071a8:	616c 7320 6e69 6c67 2d65 726f 6769 6e69     la single-origin
  4071b8:	6320 666f 6566 2065 6e69 6f20 6363 6561      coffee in occae
  4071c8:	6163 0a74 656d 6767 6e69 7367 202e 7249     cat.meggings. Ir
  4071d8:	6e6f 2079 656d 6767 6e69 7367 3820 622d     ony meggings 8-b
  4071e8:	7469 202c 6863 6c69 776c 7661 2065 6f6c     it, chillwave lo
  4071f8:	662d 2069 6461 7069 7369 6369 6e69 2067     -fi adipisicing 
  407208:	7263 6465 640a 6572 6d61 6163 6374 6568     cred.dreamcatche
  407218:	2072 6576 696e 6d61 202e 7550 2074 2061     r veniam. Put a 
  407228:	6962 6472 6f20 206e 7469 6920 6f72 796e     bird on it irony
  407238:	7520 616d 696d 202c 7274 7375 2074 7566      umami, trust fu
  407248:	646e 6220 7375 7768 6369 0a6b 6f6c 6163     nd bushwick.loca
  407258:	6f76 6572 6b20 6c61 2065 6863 7069 2e73     vore kale chips.
  407268:	5320 6972 6172 6863 2061 7773 6761 7420      Sriracha swag t
  407278:	7568 646e 7265 6163 7374 202c 6863 6c69     hundercats, chil
  407288:	776c 7661 2065 6964 7273 7075 0a74 6f74     lwave disrupt.to
  407298:	7375 656c 2064 6562 7261 2064 6f6d 6c6c     usled beard moll
  4072a8:	7469 6d20 7375 6174 6863 2065 656c 6767     it mustache legg
  4072b8:	6e69 7367 7020 726f 6c74 6e61 2064 656e     ings portland ne
  4072c8:	7478 6c20 7665 6c65 202e 694e 6968 206c     xt level. Nihil 
  4072d8:	7365 6573 650a 7473 202c 6b73 7461 6265     esse.est, skateb
  4072e8:	616f 6472 6120 7472 7020 7261 7974 6520     oard art party e
  4072f8:	7374 2079 6874 6e75 6564 6372 7461 2073     tsy thundercats 
  407308:	6573 2064 7264 6165 636d 7461 6863 7265     sed dreamcatcher
  407318:	7520 2074 7069 6f68 656e 730a 6177 2067      ut iphone.swag 
  407328:	6f63 736e 6365 6574 7574 2072 7465 202e     consectetur et. 
  407338:	7249 7275 2065 6b73 7461 6265 616f 6472     Irure skateboard
  407348:	6220 6e61 6f6a 202c 756e 6c6c 2061 6564      banjo, nulla de
  407358:	6573 7572 746e 6d20 7365 6573 676e 7265     serunt messenger
  407368:	620a 6761 6420 6c6f 726f 7420 7265 7972     .bag dolor terry
  407378:	7220 6369 6168 6472 6f73 206e 6173 6970      richardson sapi
  407388:	6e65 6574 0a2e 0000                         ente....

Disassembly of section .text.inflate%64:

00407390 <inflate>:
 */

int ZEXPORT inflate(strm, flush)
z_streamp strm;
int flush;
{
  407390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00407394 <.LCFI16>:
  407394:	b08f      	sub	sp, #60	; 0x3c

00407396 <.LCFI17>:
    unsigned char hbuf[4];      /* buffer for gzip header crc calculation */
#endif
    static const unsigned short order[19] = /* permutation of code lengths */
        {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};

    if (strm == Z_NULL || strm->state == Z_NULL || strm->next_out == Z_NULL ||
  407396:	2800      	cmp	r0, #0
  407398:	f001 803a 	beq.w	408410 <.LVL483>
  40739c:	4681      	mov	r9, r0
  40739e:	69c6      	ldr	r6, [r0, #28]
  4073a0:	2e00      	cmp	r6, #0
  4073a2:	f001 803a 	beq.w	40841a <.LVL483+0xa>
  4073a6:	68c2      	ldr	r2, [r0, #12]
  4073a8:	2a00      	cmp	r2, #0
  4073aa:	f001 803b 	beq.w	408424 <.LVL483+0x14>
  4073ae:	6802      	ldr	r2, [r0, #0]
  4073b0:	2a00      	cmp	r2, #0
  4073b2:	d040      	beq.n	407436 <.LVL114>

004073b4 <.LVL104>:
        (strm->next_in == Z_NULL && strm->avail_in != 0))
        return Z_STREAM_ERROR;

    state = (struct inflate_state FAR *)strm->state;
    if (state->mode == TYPE) state->mode = TYPEDO;      /* skip check */
  4073b4:	7832      	ldrb	r2, [r6, #0]
  4073b6:	2a0b      	cmp	r2, #11
  4073b8:	d044      	beq.n	407444 <.LVL115>
  4073ba:	9107      	str	r1, [sp, #28]
    LOAD();
  4073bc:	f8d9 300c 	ldr.w	r3, [r9, #12]
  4073c0:	9306      	str	r3, [sp, #24]

004073c2 <.LVL105>:
  4073c2:	f8d9 3010 	ldr.w	r3, [r9, #16]

004073c6 <.LVL106>:
  4073c6:	9305      	str	r3, [sp, #20]

004073c8 <.LVL107>:
  4073c8:	f8d9 a000 	ldr.w	sl, [r9]

004073cc <.LVL108>:
  4073cc:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4073d0:	9208      	str	r2, [sp, #32]

004073d2 <.LVL109>:
  4073d2:	f8d6 b038 	ldr.w	fp, [r6, #56]	; 0x38

004073d6 <.LVL110>:
  4073d6:	6bf4      	ldr	r4, [r6, #60]	; 0x3c

004073d8 <.LVL111>:
    in = have;
    out = left;
  4073d8:	9304      	str	r3, [sp, #16]
    LOAD();
  4073da:	4615      	mov	r5, r2
    ret = Z_OK;
  4073dc:	2300      	movs	r3, #0

004073de <.LVL112>:
  4073de:	9303      	str	r3, [sp, #12]
            state->mode = LENGTH;
        case LENGTH:
            if (state->wrap && state->flags) {
                NEEDBITS(32);
                if (hold != (state->total & 0xffffffffUL)) {
                    strm->msg = (char *)"incorrect length check";
  4073e0:	4baf      	ldr	r3, [pc, #700]	; (4076a0 <.LVL161+0x6>)
  4073e2:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
  4073e6:	9309      	str	r3, [sp, #36]	; 0x24
  4073e8:	4bae      	ldr	r3, [pc, #696]	; (4076a4 <.LVL161+0xa>)
  4073ea:	3324      	adds	r3, #36	; 0x24
  4073ec:	930a      	str	r3, [sp, #40]	; 0x28

004073ee <.LVL113>:
        switch (state->mode) {
  4073ee:	7833      	ldrb	r3, [r6, #0]
  4073f0:	2b1e      	cmp	r3, #30
  4073f2:	d82d      	bhi.n	407450 <.LVL116+0x6>
  4073f4:	e8df f013 	tbh	[pc, r3, lsl #1]
  4073f8:	00540066 	.word	0x00540066
  4073fc:	015a0120 	.word	0x015a0120
  407400:	018501ca 	.word	0x018501ca
  407404:	022701b0 	.word	0x022701b0
  407408:	00420261 	.word	0x00420261
  40740c:	03320326 	.word	0x03320326
  407410:	038f0337 	.word	0x038f0337
  407414:	03bf03bd 	.word	0x03bf03bd
  407418:	03fa0030 	.word	0x03fa0030
  40741c:	05830468 	.word	0x05830468
  407420:	06480585 	.word	0x06480585
  407424:	06f60672 	.word	0x06f60672
  407428:	0762071b 	.word	0x0762071b
  40742c:	07c90771 	.word	0x07c90771
  407430:	07f00029 	.word	0x07f00029
  407434:	081b      	.short	0x081b

00407436 <.LVL114>:
        (strm->next_in == Z_NULL && strm->avail_in != 0))
  407436:	6842      	ldr	r2, [r0, #4]
  407438:	2a00      	cmp	r2, #0
  40743a:	d0bb      	beq.n	4073b4 <.LVL104>
        return Z_STREAM_ERROR;
  40743c:	f06f 0301 	mvn.w	r3, #1
  407440:	9303      	str	r3, [sp, #12]
  407442:	e2b8      	b.n	4079b6 <.LVL227>

00407444 <.LVL115>:
    if (state->mode == TYPE) state->mode = TYPEDO;      /* skip check */
  407444:	220c      	movs	r2, #12
  407446:	7032      	strb	r2, [r6, #0]
  407448:	e7b7      	b.n	4073ba <.LVL104+0x6>

0040744a <.LVL116>:
                Tracev((stderr, "inflate:   length matches trailer\n"));
            }
#endif
            state->mode = DONE;
        case DONE:
            ret = Z_STREAM_END;
  40744a:	2301      	movs	r3, #1
  40744c:	9303      	str	r3, [sp, #12]
  40744e:	e247      	b.n	4078e0 <.L124>
            goto inf_leave;
        case MEM:
            return Z_MEM_ERROR;
        case SYNC:
        default:
            return Z_STREAM_ERROR;
  407450:	f06f 0301 	mvn.w	r3, #1
  407454:	9303      	str	r3, [sp, #12]
  407456:	e2ae      	b.n	4079b6 <.LVL227>
            NEEDBITS(14);
  407458:	2c0d      	cmp	r4, #13
  40745a:	f200 83ae 	bhi.w	407bba <.LVL276>
  40745e:	2d00      	cmp	r5, #0
  407460:	f000 823e 	beq.w	4078e0 <.L124>
  407464:	3d01      	subs	r5, #1
  407466:	f81a 3b01 	ldrb.w	r3, [sl], #1

0040746a <.LVL118>:
  40746a:	40a3      	lsls	r3, r4
  40746c:	449b      	add	fp, r3
  40746e:	3408      	adds	r4, #8

00407470 <.LVL120>:
  407470:	2c0d      	cmp	r4, #13
  407472:	f200 83a2 	bhi.w	407bba <.LVL276>
  407476:	2d00      	cmp	r5, #0
  407478:	d1f4      	bne.n	407464 <.LVL116+0x1a>
  40747a:	e231      	b.n	4078e0 <.L124>
            NEEDBITS(32);
  40747c:	2c1f      	cmp	r4, #31
  40747e:	f200 82cb 	bhi.w	407a18 <.LVL234+0xc>
  407482:	2d00      	cmp	r5, #0
  407484:	f000 822c 	beq.w	4078e0 <.L124>
  407488:	3d01      	subs	r5, #1
  40748a:	f81a 3b01 	ldrb.w	r3, [sl], #1

0040748e <.LVL122>:
  40748e:	40a3      	lsls	r3, r4
  407490:	449b      	add	fp, r3
  407492:	3408      	adds	r4, #8

00407494 <.LVL124>:
  407494:	2c1f      	cmp	r4, #31
  407496:	f200 82bf 	bhi.w	407a18 <.LVL234+0xc>
  40749a:	2d00      	cmp	r5, #0
  40749c:	d1f4      	bne.n	407488 <.LVL120+0x18>
  40749e:	e21f      	b.n	4078e0 <.L124>
            NEEDBITS(16);
  4074a0:	2c0f      	cmp	r4, #15
  4074a2:	f200 8097 	bhi.w	4075d4 <.LVL147>
  4074a6:	2d00      	cmp	r5, #0
  4074a8:	f000 821a 	beq.w	4078e0 <.L124>
  4074ac:	3d01      	subs	r5, #1
  4074ae:	f81a 3b01 	ldrb.w	r3, [sl], #1

004074b2 <.LVL126>:
  4074b2:	40a3      	lsls	r3, r4
  4074b4:	449b      	add	fp, r3
  4074b6:	3408      	adds	r4, #8

004074b8 <.LVL128>:
  4074b8:	2c0f      	cmp	r4, #15
  4074ba:	f200 808b 	bhi.w	4075d4 <.LVL147>
  4074be:	2d00      	cmp	r5, #0
  4074c0:	d1f4      	bne.n	4074ac <.LVL124+0x18>
  4074c2:	e20d      	b.n	4078e0 <.L124>
            if (state->wrap == 0) {
  4074c4:	68b2      	ldr	r2, [r6, #8]
  4074c6:	b17a      	cbz	r2, 4074e8 <.LVL132+0xa>
            NEEDBITS(16);
  4074c8:	2c0f      	cmp	r4, #15
  4074ca:	d810      	bhi.n	4074ee <.LVL132+0x10>
  4074cc:	2d00      	cmp	r5, #0
  4074ce:	f000 8207 	beq.w	4078e0 <.L124>
  4074d2:	3d01      	subs	r5, #1
  4074d4:	f81a 3b01 	ldrb.w	r3, [sl], #1

004074d8 <.LVL130>:
  4074d8:	40a3      	lsls	r3, r4
  4074da:	449b      	add	fp, r3
  4074dc:	3408      	adds	r4, #8

004074de <.LVL132>:
  4074de:	2c0f      	cmp	r4, #15
  4074e0:	d805      	bhi.n	4074ee <.LVL132+0x10>
  4074e2:	2d00      	cmp	r5, #0
  4074e4:	d1f5      	bne.n	4074d2 <.LVL128+0x1a>
  4074e6:	e1fb      	b.n	4078e0 <.L124>
                state->mode = TYPEDO;
  4074e8:	230c      	movs	r3, #12
  4074ea:	7033      	strb	r3, [r6, #0]
                break;
  4074ec:	e77f      	b.n	4073ee <.LVL113>
            if ((state->wrap & 2) && hold == 0x8b1f) {  /* gzip header */
  4074ee:	f012 0f02 	tst.w	r2, #2
  4074f2:	d003      	beq.n	4074fc <.LVL132+0x1e>
  4074f4:	f648 331f 	movw	r3, #35615	; 0x8b1f
  4074f8:	459b      	cmp	fp, r3
  4074fa:	d020      	beq.n	40753e <.LVL132+0x60>
            state->flags = 0;           /* expect zlib header */
  4074fc:	2300      	movs	r3, #0
  4074fe:	6133      	str	r3, [r6, #16]
            if (state->head != Z_NULL)
  407500:	6a33      	ldr	r3, [r6, #32]
  407502:	b113      	cbz	r3, 40750a <.LVL132+0x2c>
                state->head->done = -1;
  407504:	f04f 32ff 	mov.w	r2, #4294967295
  407508:	631a      	str	r2, [r3, #48]	; 0x30
            if (!(state->wrap & 1) ||   /* check if zlib header allowed */
  40750a:	68b3      	ldr	r3, [r6, #8]
  40750c:	f013 0f01 	tst.w	r3, #1
  407510:	d00f      	beq.n	407532 <.LVL132+0x54>
                ((BITS(8) << 8) + (hold >> 8)) % 31) {
  407512:	ea4f 230b 	mov.w	r3, fp, lsl #8
  407516:	b29b      	uxth	r3, r3
  407518:	eb03 231b 	add.w	r3, r3, fp, lsr #8
  40751c:	4a62      	ldr	r2, [pc, #392]	; (4076a8 <.LVL161+0xe>)
  40751e:	fba2 1203 	umull	r1, r2, r2, r3
  407522:	1a9f      	subs	r7, r3, r2
  407524:	eb02 0257 	add.w	r2, r2, r7, lsr #1
  407528:	0917      	lsrs	r7, r2, #4
  40752a:	ebc7 1747 	rsb	r7, r7, r7, lsl #5
            if (!(state->wrap & 1) ||   /* check if zlib header allowed */
  40752e:	1bdf      	subs	r7, r3, r7
  407530:	d01c      	beq.n	40756c <.LVL137>
                strm->msg = (char *)"incorrect header check";
  407532:	4b5b      	ldr	r3, [pc, #364]	; (4076a0 <.LVL161+0x6>)
  407534:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  407538:	231d      	movs	r3, #29
  40753a:	7033      	strb	r3, [r6, #0]
                break;
  40753c:	e757      	b.n	4073ee <.LVL113>
                state->check = crc32(0L, Z_NULL, 0);
  40753e:	2200      	movs	r2, #0
  407540:	4611      	mov	r1, r2
  407542:	4610      	mov	r0, r2
  407544:	f00c f976 	bl	413834 <.LFE21>

00407548 <.LVL133>:
  407548:	61b0      	str	r0, [r6, #24]
                CRC2(state->check, hold);
  40754a:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
  40754e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8

00407552 <.LVL134>:
  407552:	f88d b035 	strb.w	fp, [sp, #53]	; 0x35
  407556:	2202      	movs	r2, #2
  407558:	a90d      	add	r1, sp, #52	; 0x34
  40755a:	f00c f96b 	bl	413834 <.LFE21>

0040755e <.LVL135>:
  40755e:	61b0      	str	r0, [r6, #24]

00407560 <.LVL136>:
                state->mode = FLAGS;
  407560:	2301      	movs	r3, #1
  407562:	7033      	strb	r3, [r6, #0]
                INITBITS();
  407564:	f04f 0b00 	mov.w	fp, #0
  407568:	465c      	mov	r4, fp
                break;
  40756a:	e740      	b.n	4073ee <.LVL113>

0040756c <.LVL137>:
            if (BITS(4) != Z_DEFLATED) {
  40756c:	f00b 030f 	and.w	r3, fp, #15
  407570:	2b08      	cmp	r3, #8
  407572:	d006      	beq.n	407582 <.LVL137+0x16>
                strm->msg = (char *)"unknown compression method";
  407574:	4b4a      	ldr	r3, [pc, #296]	; (4076a0 <.LVL161+0x6>)
  407576:	3318      	adds	r3, #24
  407578:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  40757c:	231d      	movs	r3, #29
  40757e:	7033      	strb	r3, [r6, #0]
                break;
  407580:	e735      	b.n	4073ee <.LVL113>
            DROPBITS(4);
  407582:	ea4f 1b1b 	mov.w	fp, fp, lsr #4

00407586 <.LVL138>:
            len = BITS(4) + 8;
  407586:	f00b 030f 	and.w	r3, fp, #15
  40758a:	3308      	adds	r3, #8

0040758c <.LVL139>:
            if (state->wbits == 0)
  40758c:	6a72      	ldr	r2, [r6, #36]	; 0x24
  40758e:	b9ba      	cbnz	r2, 4075c0 <.LVL144>
                state->wbits = len;
  407590:	6273      	str	r3, [r6, #36]	; 0x24
            state->dmax = 1U << len;
  407592:	2201      	movs	r2, #1
  407594:	fa02 f303 	lsl.w	r3, r2, r3

00407598 <.LVL140>:
  407598:	6173      	str	r3, [r6, #20]
            strm->adler = state->check = adler32(0L, Z_NULL, 0);
  40759a:	2200      	movs	r2, #0
  40759c:	4611      	mov	r1, r2
  40759e:	4610      	mov	r0, r2
  4075a0:	f00b fd0a 	bl	412fb8 <.LBE46>

004075a4 <.LVL141>:
  4075a4:	61b0      	str	r0, [r6, #24]
  4075a6:	f8c9 0030 	str.w	r0, [r9, #48]	; 0x30
            state->mode = hold & 0x200 ? DICTID : TYPE;
  4075aa:	f40b 7b00 	and.w	fp, fp, #512	; 0x200

004075ae <.LVL142>:
  4075ae:	f1bb 0f00 	cmp.w	fp, #0
  4075b2:	bf14      	ite	ne
  4075b4:	2309      	movne	r3, #9
  4075b6:	230b      	moveq	r3, #11
  4075b8:	7033      	strb	r3, [r6, #0]

004075ba <.LVL143>:
            INITBITS();
  4075ba:	46bb      	mov	fp, r7
  4075bc:	2400      	movs	r4, #0
            break;
  4075be:	e716      	b.n	4073ee <.LVL113>

004075c0 <.LVL144>:
            else if (len > state->wbits) {
  4075c0:	4293      	cmp	r3, r2
  4075c2:	d9e6      	bls.n	407592 <.LVL139+0x6>
            DROPBITS(4);
  4075c4:	3c04      	subs	r4, #4

004075c6 <.LVL145>:
                strm->msg = (char *)"invalid window size";
  4075c6:	4b36      	ldr	r3, [pc, #216]	; (4076a0 <.LVL161+0x6>)

004075c8 <.LVL146>:
  4075c8:	3334      	adds	r3, #52	; 0x34
  4075ca:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  4075ce:	231d      	movs	r3, #29
  4075d0:	7033      	strb	r3, [r6, #0]
                break;
  4075d2:	e70c      	b.n	4073ee <.LVL113>

004075d4 <.LVL147>:
            state->flags = (int)(hold);
  4075d4:	f8c6 b010 	str.w	fp, [r6, #16]
            if ((state->flags & 0xff) != Z_DEFLATED) {
  4075d8:	fa5f f38b 	uxtb.w	r3, fp
  4075dc:	2b08      	cmp	r3, #8
  4075de:	d006      	beq.n	4075ee <.LVL147+0x1a>
                strm->msg = (char *)"unknown compression method";
  4075e0:	4b2f      	ldr	r3, [pc, #188]	; (4076a0 <.LVL161+0x6>)
  4075e2:	3318      	adds	r3, #24
  4075e4:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  4075e8:	231d      	movs	r3, #29
  4075ea:	7033      	strb	r3, [r6, #0]
                break;
  4075ec:	e6ff      	b.n	4073ee <.LVL113>
            if (state->flags & 0xe000) {
  4075ee:	f41b 4f60 	tst.w	fp, #57344	; 0xe000
  4075f2:	d006      	beq.n	407602 <.LVL147+0x2e>
                strm->msg = (char *)"unknown header flags set";
  4075f4:	4b2a      	ldr	r3, [pc, #168]	; (4076a0 <.LVL161+0x6>)
  4075f6:	3348      	adds	r3, #72	; 0x48
  4075f8:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  4075fc:	231d      	movs	r3, #29
  4075fe:	7033      	strb	r3, [r6, #0]
                break;
  407600:	e6f5      	b.n	4073ee <.LVL113>
            if (state->head != Z_NULL)
  407602:	6a33      	ldr	r3, [r6, #32]
  407604:	b113      	cbz	r3, 40760c <.LVL147+0x38>
                state->head->text = (int)((hold >> 8) & 1);
  407606:	f3cb 2200 	ubfx	r2, fp, #8, #1
  40760a:	601a      	str	r2, [r3, #0]
            if (state->flags & 0x0200) CRC2(state->check, hold);
  40760c:	6933      	ldr	r3, [r6, #16]
  40760e:	f413 7f00 	tst.w	r3, #512	; 0x200
  407612:	d104      	bne.n	40761e <.LVL149>

00407614 <.LVL148>:
            state->mode = TIME;
  407614:	2302      	movs	r3, #2
  407616:	7033      	strb	r3, [r6, #0]
            INITBITS();
  407618:	2400      	movs	r4, #0
  40761a:	46a3      	mov	fp, r4
  40761c:	e00e      	b.n	40763c <.LVL152+0x4>

0040761e <.LVL149>:
            if (state->flags & 0x0200) CRC2(state->check, hold);
  40761e:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
  407622:	ea4f 2b1b 	mov.w	fp, fp, lsr #8

00407626 <.LVL150>:
  407626:	f88d b035 	strb.w	fp, [sp, #53]	; 0x35
  40762a:	2202      	movs	r2, #2
  40762c:	a90d      	add	r1, sp, #52	; 0x34
  40762e:	69b0      	ldr	r0, [r6, #24]
  407630:	f00c f900 	bl	413834 <.LFE21>

00407634 <.LVL151>:
  407634:	61b0      	str	r0, [r6, #24]
  407636:	e7ed      	b.n	407614 <.LVL148>

00407638 <.LVL152>:
            NEEDBITS(32);
  407638:	2c1f      	cmp	r4, #31
  40763a:	d80d      	bhi.n	407658 <.LVL157+0xa>
  40763c:	2d00      	cmp	r5, #0
  40763e:	f000 814f 	beq.w	4078e0 <.L124>
  407642:	3d01      	subs	r5, #1
  407644:	f81a 3b01 	ldrb.w	r3, [sl], #1

00407648 <.LVL155>:
  407648:	40a3      	lsls	r3, r4
  40764a:	449b      	add	fp, r3
  40764c:	3408      	adds	r4, #8

0040764e <.LVL157>:
  40764e:	2c1f      	cmp	r4, #31
  407650:	d802      	bhi.n	407658 <.LVL157+0xa>
  407652:	2d00      	cmp	r5, #0
  407654:	d1f5      	bne.n	407642 <.LVL152+0xa>
  407656:	e143      	b.n	4078e0 <.L124>
            if (state->head != Z_NULL)
  407658:	6a33      	ldr	r3, [r6, #32]
  40765a:	b10b      	cbz	r3, 407660 <.LVL157+0x12>
                state->head->time = hold;
  40765c:	f8c3 b004 	str.w	fp, [r3, #4]
            if (state->flags & 0x0200) CRC4(state->check, hold);
  407660:	6933      	ldr	r3, [r6, #16]
  407662:	f413 7f00 	tst.w	r3, #512	; 0x200
  407666:	d105      	bne.n	407674 <.LVL159>

00407668 <.LVL158>:
            state->mode = OS;
  407668:	2303      	movs	r3, #3
  40766a:	7033      	strb	r3, [r6, #0]
            INITBITS();
  40766c:	f04f 0b00 	mov.w	fp, #0
  407670:	465c      	mov	r4, fp
  407672:	e01d      	b.n	4076b0 <.LVL162+0x4>

00407674 <.LVL159>:
            if (state->flags & 0x0200) CRC4(state->check, hold);
  407674:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
  407678:	ea4f 231b 	mov.w	r3, fp, lsr #8
  40767c:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
  407680:	ea4f 431b 	mov.w	r3, fp, lsr #16
  407684:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  407688:	ea4f 6b1b 	mov.w	fp, fp, lsr #24

0040768c <.LVL160>:
  40768c:	f88d b037 	strb.w	fp, [sp, #55]	; 0x37
  407690:	2204      	movs	r2, #4
  407692:	a90d      	add	r1, sp, #52	; 0x34
  407694:	69b0      	ldr	r0, [r6, #24]
  407696:	f00c f8cd 	bl	413834 <.LFE21>

0040769a <.LVL161>:
  40769a:	61b0      	str	r0, [r6, #24]
  40769c:	e7e4      	b.n	407668 <.LVL158>
  40769e:	bf00      	nop
  4076a0:	00414f20 	.word	0x00414f20
  4076a4:	0041e2dc 	.word	0x0041e2dc
  4076a8:	08421085 	.word	0x08421085

004076ac <.LVL162>:
            NEEDBITS(16);
  4076ac:	2c0f      	cmp	r4, #15
  4076ae:	d80d      	bhi.n	4076cc <.LVL167+0xa>
  4076b0:	2d00      	cmp	r5, #0
  4076b2:	f000 8115 	beq.w	4078e0 <.L124>
  4076b6:	3d01      	subs	r5, #1
  4076b8:	f81a 3b01 	ldrb.w	r3, [sl], #1

004076bc <.LVL165>:
  4076bc:	40a3      	lsls	r3, r4
  4076be:	449b      	add	fp, r3
  4076c0:	3408      	adds	r4, #8

004076c2 <.LVL167>:
  4076c2:	2c0f      	cmp	r4, #15
  4076c4:	d802      	bhi.n	4076cc <.LVL167+0xa>
  4076c6:	2d00      	cmp	r5, #0
  4076c8:	d1f5      	bne.n	4076b6 <.LVL162+0xa>
  4076ca:	e109      	b.n	4078e0 <.L124>
            if (state->head != Z_NULL) {
  4076cc:	6a33      	ldr	r3, [r6, #32]
  4076ce:	b133      	cbz	r3, 4076de <.LVL167+0x1c>
                state->head->xflags = (int)(hold & 0xff);
  4076d0:	fa5f f28b 	uxtb.w	r2, fp
  4076d4:	609a      	str	r2, [r3, #8]
                state->head->os = (int)(hold >> 8);
  4076d6:	6a33      	ldr	r3, [r6, #32]
  4076d8:	ea4f 221b 	mov.w	r2, fp, lsr #8
  4076dc:	60da      	str	r2, [r3, #12]
            if (state->flags & 0x0200) CRC2(state->check, hold);
  4076de:	6933      	ldr	r3, [r6, #16]
  4076e0:	f413 7f00 	tst.w	r3, #512	; 0x200
  4076e4:	d145      	bne.n	407772 <.LVL177+0x2c>

004076e6 <.LVL168>:
            state->mode = EXLEN;
  4076e6:	2304      	movs	r3, #4
  4076e8:	7033      	strb	r3, [r6, #0]
            if (state->flags & 0x0400) {
  4076ea:	6933      	ldr	r3, [r6, #16]
  4076ec:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4076f0:	d160      	bne.n	4077b4 <.LVL186>
            INITBITS();
  4076f2:	2400      	movs	r4, #0
  4076f4:	46a3      	mov	fp, r4

004076f6 <.LVL169>:
            else if (state->head != Z_NULL)
  4076f6:	6a33      	ldr	r3, [r6, #32]
  4076f8:	b10b      	cbz	r3, 4076fe <.LVL170>
                state->head->extra = Z_NULL;
  4076fa:	2200      	movs	r2, #0
  4076fc:	611a      	str	r2, [r3, #16]

004076fe <.LVL170>:
            state->mode = EXTRA;
  4076fe:	2305      	movs	r3, #5
  407700:	7033      	strb	r3, [r6, #0]
            if (state->flags & 0x0400) {
  407702:	6933      	ldr	r3, [r6, #16]
  407704:	f413 6f80 	tst.w	r3, #1024	; 0x400
  407708:	d022      	beq.n	407750 <.LVL177+0xa>
                copy = state->length;
  40770a:	6c33      	ldr	r3, [r6, #64]	; 0x40

0040770c <.LVL171>:
  40770c:	462f      	mov	r7, r5
  40770e:	429d      	cmp	r5, r3
  407710:	bf28      	it	cs
  407712:	461f      	movcs	r7, r3

00407714 <.LVL172>:
                if (copy) {
  407714:	b1c7      	cbz	r7, 407748 <.LVL177+0x2>
                    if (state->head != Z_NULL &&
  407716:	6a32      	ldr	r2, [r6, #32]
  407718:	b16a      	cbz	r2, 407736 <.LVL174>
                        state->head->extra != Z_NULL) {
  40771a:	6910      	ldr	r0, [r2, #16]
                    if (state->head != Z_NULL &&
  40771c:	b158      	cbz	r0, 407736 <.LVL174>
                        len = state->head->extra_len - state->length;
  40771e:	6951      	ldr	r1, [r2, #20]
  407720:	1acb      	subs	r3, r1, r3

00407722 <.LVL173>:
                        zmemcpy(state->head->extra + len, next,
  407722:	4418      	add	r0, r3
                                len + copy > state->head->extra_max ?
  407724:	6992      	ldr	r2, [r2, #24]
  407726:	18f9      	adds	r1, r7, r3
                        zmemcpy(state->head->extra + len, next,
  407728:	4291      	cmp	r1, r2
  40772a:	bf8c      	ite	hi
  40772c:	1ad2      	subhi	r2, r2, r3
  40772e:	463a      	movls	r2, r7
  407730:	4651      	mov	r1, sl
  407732:	f00f f8a9 	bl	416888 <memcpy>

00407736 <.LVL174>:
                    if (state->flags & 0x0200)
  407736:	6933      	ldr	r3, [r6, #16]
  407738:	f413 7f00 	tst.w	r3, #512	; 0x200
  40773c:	d15a      	bne.n	4077f4 <.LVL194>
                    have -= copy;
  40773e:	1bed      	subs	r5, r5, r7
                    next += copy;
  407740:	44ba      	add	sl, r7
                    state->length -= copy;
  407742:	6c33      	ldr	r3, [r6, #64]	; 0x40
  407744:	1bdf      	subs	r7, r3, r7

00407746 <.LVL177>:
  407746:	6437      	str	r7, [r6, #64]	; 0x40
                if (state->length) goto inf_leave;
  407748:	6c33      	ldr	r3, [r6, #64]	; 0x40
  40774a:	2b00      	cmp	r3, #0
  40774c:	f040 80c8 	bne.w	4078e0 <.L124>
            state->length = 0;
  407750:	2300      	movs	r3, #0
  407752:	6433      	str	r3, [r6, #64]	; 0x40
            state->mode = NAME;
  407754:	2306      	movs	r3, #6
  407756:	7033      	strb	r3, [r6, #0]
            if (state->flags & 0x0800) {
  407758:	6933      	ldr	r3, [r6, #16]
  40775a:	f413 6f00 	tst.w	r3, #2048	; 0x800
  40775e:	f000 8085 	beq.w	40786c <.LVL207>
                if (have == 0) goto inf_leave;
  407762:	2d00      	cmp	r5, #0
  407764:	f000 80bc 	beq.w	4078e0 <.L124>
  407768:	f10a 31ff 	add.w	r1, sl, #4294967295
  40776c:	2700      	movs	r7, #0
  40776e:	468e      	mov	lr, r1
  407770:	e04a      	b.n	407808 <.LVL197>
            if (state->flags & 0x0200) CRC2(state->check, hold);
  407772:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
  407776:	ea4f 2b1b 	mov.w	fp, fp, lsr #8

0040777a <.LVL178>:
  40777a:	f88d b035 	strb.w	fp, [sp, #53]	; 0x35
  40777e:	2202      	movs	r2, #2
  407780:	a90d      	add	r1, sp, #52	; 0x34
  407782:	69b0      	ldr	r0, [r6, #24]
  407784:	f00c f856 	bl	413834 <.LFE21>

00407788 <.LVL179>:
  407788:	61b0      	str	r0, [r6, #24]
  40778a:	e7ac      	b.n	4076e6 <.LVL168>

0040778c <.LVL180>:
            if (state->flags & 0x0400) {
  40778c:	6933      	ldr	r3, [r6, #16]
  40778e:	f413 6f80 	tst.w	r3, #1024	; 0x400
  407792:	d0b0      	beq.n	4076f6 <.LVL169>
                NEEDBITS(16);
  407794:	2c0f      	cmp	r4, #15
  407796:	d810      	bhi.n	4077ba <.LVL187>
  407798:	2d00      	cmp	r5, #0
  40779a:	f000 80a1 	beq.w	4078e0 <.L124>
  40779e:	3d01      	subs	r5, #1
  4077a0:	f81a 3b01 	ldrb.w	r3, [sl], #1

004077a4 <.LVL183>:
  4077a4:	40a3      	lsls	r3, r4
  4077a6:	449b      	add	fp, r3
  4077a8:	3408      	adds	r4, #8

004077aa <.LVL185>:
  4077aa:	2c0f      	cmp	r4, #15
  4077ac:	d805      	bhi.n	4077ba <.LVL187>
  4077ae:	2d00      	cmp	r5, #0
  4077b0:	d1f5      	bne.n	40779e <.LVL180+0x12>
  4077b2:	e095      	b.n	4078e0 <.L124>

004077b4 <.LVL186>:
            INITBITS();
  4077b4:	2400      	movs	r4, #0
  4077b6:	46a3      	mov	fp, r4
  4077b8:	e7ee      	b.n	407798 <.LVL180+0xc>

004077ba <.LVL187>:
                state->length = (unsigned)(hold);
  4077ba:	f8c6 b040 	str.w	fp, [r6, #64]	; 0x40
                if (state->head != Z_NULL)
  4077be:	6a33      	ldr	r3, [r6, #32]
  4077c0:	b10b      	cbz	r3, 4077c6 <.LVL187+0xc>
                    state->head->extra_len = (unsigned)hold;
  4077c2:	f8c3 b014 	str.w	fp, [r3, #20]
                if (state->flags & 0x0200) CRC2(state->check, hold);
  4077c6:	6933      	ldr	r3, [r6, #16]
  4077c8:	f413 7f00 	tst.w	r3, #512	; 0x200
  4077cc:	d102      	bne.n	4077d4 <.LVL190>
                INITBITS();
  4077ce:	2400      	movs	r4, #0

004077d0 <.LVL188>:
  4077d0:	46a3      	mov	fp, r4

004077d2 <.LVL189>:
  4077d2:	e794      	b.n	4076fe <.LVL170>

004077d4 <.LVL190>:
                if (state->flags & 0x0200) CRC2(state->check, hold);
  4077d4:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
  4077d8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8

004077dc <.LVL191>:
  4077dc:	f88d b035 	strb.w	fp, [sp, #53]	; 0x35
  4077e0:	2202      	movs	r2, #2
  4077e2:	a90d      	add	r1, sp, #52	; 0x34
  4077e4:	69b0      	ldr	r0, [r6, #24]
  4077e6:	f00c f825 	bl	413834 <.LFE21>

004077ea <.LVL192>:
  4077ea:	61b0      	str	r0, [r6, #24]
                INITBITS();
  4077ec:	f04f 0b00 	mov.w	fp, #0
  4077f0:	465c      	mov	r4, fp

004077f2 <.LVL193>:
  4077f2:	e784      	b.n	4076fe <.LVL170>

004077f4 <.LVL194>:
                        state->check = crc32(state->check, next, copy);
  4077f4:	463a      	mov	r2, r7
  4077f6:	4651      	mov	r1, sl
  4077f8:	69b0      	ldr	r0, [r6, #24]
  4077fa:	f00c f81b 	bl	413834 <.LFE21>

004077fe <.LVL195>:
  4077fe:	61b0      	str	r0, [r6, #24]
  407800:	e79d      	b.n	40773e <.LVL174+0x8>

00407802 <.LVL196>:
                } while (len && copy < have);
  407802:	b192      	cbz	r2, 40782a <.LVL199+0x1c>
  407804:	42bd      	cmp	r5, r7
  407806:	d910      	bls.n	40782a <.LVL199+0x1c>

00407808 <.LVL197>:
                    len = (unsigned)(next[copy++]);
  407808:	3701      	adds	r7, #1
  40780a:	f81e 2f01 	ldrb.w	r2, [lr, #1]!

0040780e <.LVL199>:
                    if (state->head != Z_NULL &&
  40780e:	6a33      	ldr	r3, [r6, #32]
  407810:	2b00      	cmp	r3, #0
  407812:	d0f6      	beq.n	407802 <.LVL196>
                            state->head->name != Z_NULL &&
  407814:	69d9      	ldr	r1, [r3, #28]
                    if (state->head != Z_NULL &&
  407816:	2900      	cmp	r1, #0
  407818:	d0f3      	beq.n	407802 <.LVL196>
                            state->length < state->head->name_max)
  40781a:	6c30      	ldr	r0, [r6, #64]	; 0x40
                            state->head->name != Z_NULL &&
  40781c:	6a1b      	ldr	r3, [r3, #32]
  40781e:	4298      	cmp	r0, r3
  407820:	d2ef      	bcs.n	407802 <.LVL196>
                        state->head->name[state->length++] = len;
  407822:	1c43      	adds	r3, r0, #1
  407824:	6433      	str	r3, [r6, #64]	; 0x40
  407826:	540a      	strb	r2, [r1, r0]
  407828:	e7eb      	b.n	407802 <.LVL196>
  40782a:	4690      	mov	r8, r2
                if (state->flags & 0x0200)
  40782c:	6933      	ldr	r3, [r6, #16]
  40782e:	f413 7f00 	tst.w	r3, #512	; 0x200
  407832:	d114      	bne.n	40785e <.LVL204>

00407834 <.LVL200>:
                have -= copy;
  407834:	1bed      	subs	r5, r5, r7
                next += copy;
  407836:	44ba      	add	sl, r7
                if (len) goto inf_leave;
  407838:	f1b8 0f00 	cmp.w	r8, #0
  40783c:	d150      	bne.n	4078e0 <.L124>

0040783e <.LVL203>:
            state->length = 0;
  40783e:	2300      	movs	r3, #0
  407840:	6433      	str	r3, [r6, #64]	; 0x40
            state->mode = COMMENT;
  407842:	2307      	movs	r3, #7
  407844:	7033      	strb	r3, [r6, #0]
            if (state->flags & 0x1000) {
  407846:	6933      	ldr	r3, [r6, #16]
  407848:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  40784c:	f000 80be 	beq.w	4079cc <.LVL231>
                if (have == 0) goto inf_leave;
  407850:	2d00      	cmp	r5, #0
  407852:	d045      	beq.n	4078e0 <.L124>
  407854:	f10a 31ff 	add.w	r1, sl, #4294967295
  407858:	2700      	movs	r7, #0
  40785a:	468e      	mov	lr, r1
  40785c:	e00f      	b.n	40787e <.LVL209>

0040785e <.LVL204>:
                    state->check = crc32(state->check, next, copy);
  40785e:	463a      	mov	r2, r7

00407860 <.LVL205>:
  407860:	4651      	mov	r1, sl
  407862:	69b0      	ldr	r0, [r6, #24]
  407864:	f00b ffe6 	bl	413834 <.LFE21>

00407868 <.LVL206>:
  407868:	61b0      	str	r0, [r6, #24]
  40786a:	e7e3      	b.n	407834 <.LVL200>

0040786c <.LVL207>:
            else if (state->head != Z_NULL)
  40786c:	6a33      	ldr	r3, [r6, #32]
  40786e:	2b00      	cmp	r3, #0
  407870:	d0e5      	beq.n	40783e <.LVL203>
                state->head->name = Z_NULL;
  407872:	2200      	movs	r2, #0
  407874:	61da      	str	r2, [r3, #28]
  407876:	e7e2      	b.n	40783e <.LVL203>

00407878 <.LVL208>:
                } while (len && copy < have);
  407878:	b192      	cbz	r2, 4078a0 <.LVL211+0x1c>
  40787a:	42bd      	cmp	r5, r7
  40787c:	d910      	bls.n	4078a0 <.LVL211+0x1c>

0040787e <.LVL209>:
                    len = (unsigned)(next[copy++]);
  40787e:	3701      	adds	r7, #1
  407880:	f81e 2f01 	ldrb.w	r2, [lr, #1]!

00407884 <.LVL211>:
                    if (state->head != Z_NULL &&
  407884:	6a33      	ldr	r3, [r6, #32]
  407886:	2b00      	cmp	r3, #0
  407888:	d0f6      	beq.n	407878 <.LVL208>
                            state->head->comment != Z_NULL &&
  40788a:	6a59      	ldr	r1, [r3, #36]	; 0x24
                    if (state->head != Z_NULL &&
  40788c:	2900      	cmp	r1, #0
  40788e:	d0f3      	beq.n	407878 <.LVL208>
                            state->length < state->head->comm_max)
  407890:	6c30      	ldr	r0, [r6, #64]	; 0x40
                            state->head->comment != Z_NULL &&
  407892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  407894:	4298      	cmp	r0, r3
  407896:	d2ef      	bcs.n	407878 <.LVL208>
                        state->head->comment[state->length++] = len;
  407898:	1c43      	adds	r3, r0, #1
  40789a:	6433      	str	r3, [r6, #64]	; 0x40
  40789c:	540a      	strb	r2, [r1, r0]
  40789e:	e7eb      	b.n	407878 <.LVL208>
  4078a0:	4690      	mov	r8, r2
                if (state->flags & 0x0200)
  4078a2:	6933      	ldr	r3, [r6, #16]
  4078a4:	f413 7f00 	tst.w	r3, #512	; 0x200
  4078a8:	f040 8089 	bne.w	4079be <.LCFI19>

004078ac <.LVL212>:
                have -= copy;
  4078ac:	1bed      	subs	r5, r5, r7
                next += copy;
  4078ae:	44ba      	add	sl, r7
                if (len) goto inf_leave;
  4078b0:	f1b8 0f00 	cmp.w	r8, #0
  4078b4:	d114      	bne.n	4078e0 <.L124>

004078b6 <.LVL215>:
            state->mode = HCRC;
  4078b6:	2308      	movs	r3, #8
  4078b8:	7033      	strb	r3, [r6, #0]
            if (state->flags & 0x0200) {
  4078ba:	6932      	ldr	r2, [r6, #16]
  4078bc:	f412 7f00 	tst.w	r2, #512	; 0x200
  4078c0:	f000 8097 	beq.w	4079f2 <.LVL233>
                NEEDBITS(16);
  4078c4:	2c0f      	cmp	r4, #15
  4078c6:	f200 8088 	bhi.w	4079da <.LVL231+0xe>
  4078ca:	b14d      	cbz	r5, 4078e0 <.L124>
  4078cc:	3d01      	subs	r5, #1
  4078ce:	f81a 3b01 	ldrb.w	r3, [sl], #1

004078d2 <.LVL217>:
  4078d2:	40a3      	lsls	r3, r4
  4078d4:	449b      	add	fp, r3
  4078d6:	3408      	adds	r4, #8

004078d8 <.LVL219>:
  4078d8:	2c0f      	cmp	r4, #15
  4078da:	d87e      	bhi.n	4079da <.LVL231+0xe>
  4078dc:	2d00      	cmp	r5, #0
  4078de:	d1f5      	bne.n	4078cc <.LVL215+0x16>

004078e0 <.L124>:
       If there was no progress during the inflate() call, return a buffer
       error.  Call updatewindow() to create and/or update the window state.
       Note: a memory error from inflate() is non-recoverable.
     */
  inf_leave:
    RESTORE();
  4078e0:	9b06      	ldr	r3, [sp, #24]
  4078e2:	f8c9 300c 	str.w	r3, [r9, #12]
  4078e6:	9b05      	ldr	r3, [sp, #20]
  4078e8:	f8c9 3010 	str.w	r3, [r9, #16]
  4078ec:	f8c9 a000 	str.w	sl, [r9]
  4078f0:	f8c9 5004 	str.w	r5, [r9, #4]
  4078f4:	f8c6 b038 	str.w	fp, [r6, #56]	; 0x38
  4078f8:	63f4      	str	r4, [r6, #60]	; 0x3c
    if (state->wsize || (out != strm->avail_out && state->mode < BAD &&
  4078fa:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  4078fc:	b963      	cbnz	r3, 407918 <.L124+0x38>
  4078fe:	f8d9 3010 	ldr.w	r3, [r9, #16]
  407902:	9a04      	ldr	r2, [sp, #16]
  407904:	429a      	cmp	r2, r3
  407906:	d00e      	beq.n	407926 <.LVL221+0x6>
  407908:	7833      	ldrb	r3, [r6, #0]
  40790a:	2b1c      	cmp	r3, #28
  40790c:	d80b      	bhi.n	407926 <.LVL221+0x6>
            (state->mode < CHECK || flush != Z_FINISH)))
  40790e:	9a07      	ldr	r2, [sp, #28]
  407910:	2a04      	cmp	r2, #4
  407912:	d101      	bne.n	407918 <.L124+0x38>
  407914:	2b19      	cmp	r3, #25
  407916:	d806      	bhi.n	407926 <.LVL221+0x6>
        if (updatewindow(strm, out)) {
  407918:	9904      	ldr	r1, [sp, #16]
  40791a:	4648      	mov	r0, r9
  40791c:	f012 f94e 	bl	419bbc <.LFE164>

00407920 <.LVL221>:
  407920:	2800      	cmp	r0, #0
  407922:	f040 8562 	bne.w	4083ea <.LVL479>
            state->mode = MEM;
            return Z_MEM_ERROR;
        }
    in -= strm->avail_in;
  407926:	f8d9 5004 	ldr.w	r5, [r9, #4]

0040792a <.LVL222>:
  40792a:	9b08      	ldr	r3, [sp, #32]
  40792c:	1b5d      	subs	r5, r3, r5

0040792e <.LVL223>:
    out -= strm->avail_out;
  40792e:	f8d9 4010 	ldr.w	r4, [r9, #16]

00407932 <.LVL224>:
  407932:	9b04      	ldr	r3, [sp, #16]
  407934:	1b1c      	subs	r4, r3, r4

00407936 <.LVL225>:
    strm->total_in += in;
  407936:	f8d9 3008 	ldr.w	r3, [r9, #8]
  40793a:	442b      	add	r3, r5
  40793c:	f8c9 3008 	str.w	r3, [r9, #8]
    strm->total_out += out;
  407940:	f8d9 3014 	ldr.w	r3, [r9, #20]
  407944:	4423      	add	r3, r4
  407946:	f8c9 3014 	str.w	r3, [r9, #20]
    state->total += out;
  40794a:	69f3      	ldr	r3, [r6, #28]
  40794c:	4423      	add	r3, r4
  40794e:	61f3      	str	r3, [r6, #28]
    if (state->wrap && out)
  407950:	68b3      	ldr	r3, [r6, #8]
  407952:	b173      	cbz	r3, 407972 <.LVL226+0x6>
  407954:	b16c      	cbz	r4, 407972 <.LVL226+0x6>
        strm->adler = state->check =
            UPDATE(state->check, strm->next_out - out, out);
  407956:	6933      	ldr	r3, [r6, #16]
  407958:	2b00      	cmp	r3, #0
  40795a:	f000 854d 	beq.w	4083f8 <.LVL481>
  40795e:	f8d9 100c 	ldr.w	r1, [r9, #12]
  407962:	4622      	mov	r2, r4
  407964:	1b09      	subs	r1, r1, r4
  407966:	69b0      	ldr	r0, [r6, #24]
  407968:	f00b ff64 	bl	413834 <.LFE21>

0040796c <.LVL226>:
        strm->adler = state->check =
  40796c:	61b0      	str	r0, [r6, #24]
  40796e:	f8c9 0030 	str.w	r0, [r9, #48]	; 0x30
    strm->data_type = state->bits + (state->last ? 64 : 0) +
  407972:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
  407974:	6873      	ldr	r3, [r6, #4]
  407976:	2b00      	cmp	r3, #0
  407978:	bf14      	ite	ne
  40797a:	2340      	movne	r3, #64	; 0x40
  40797c:	2300      	moveq	r3, #0
  40797e:	4413      	add	r3, r2
                      (state->mode == TYPE ? 128 : 0) +
  407980:	7832      	ldrb	r2, [r6, #0]
  407982:	2a0b      	cmp	r2, #11
  407984:	f000 8558 	beq.w	408438 <.LVL486>
                      (state->mode == LEN_ || state->mode == COPY_ ? 256 : 0);
  407988:	2a13      	cmp	r2, #19
  40798a:	d002      	beq.n	407992 <.LVL226+0x26>
  40798c:	2a0e      	cmp	r2, #14
  40798e:	f040 853c 	bne.w	40840a <.LVL482+0x4>
  407992:	f44f 7280 	mov.w	r2, #256	; 0x100
                      (state->mode == TYPE ? 128 : 0) +
  407996:	4413      	add	r3, r2
    strm->data_type = state->bits + (state->last ? 64 : 0) +
  407998:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
    if (((in == 0 && out == 0) || flush == Z_FINISH) && ret == Z_OK)
  40799c:	2d00      	cmp	r5, #0
  40799e:	bf08      	it	eq
  4079a0:	2c00      	cmpeq	r4, #0
  4079a2:	d002      	beq.n	4079aa <.LVL226+0x3e>
  4079a4:	9b07      	ldr	r3, [sp, #28]
  4079a6:	2b04      	cmp	r3, #4
  4079a8:	d105      	bne.n	4079b6 <.LVL227>
        ret = Z_BUF_ERROR;
  4079aa:	9b03      	ldr	r3, [sp, #12]
  4079ac:	2b00      	cmp	r3, #0
  4079ae:	bf08      	it	eq
  4079b0:	f06f 0304 	mvneq.w	r3, #4
  4079b4:	9303      	str	r3, [sp, #12]

004079b6 <.LVL227>:
    return ret;
}
  4079b6:	9803      	ldr	r0, [sp, #12]
  4079b8:	b00f      	add	sp, #60	; 0x3c

004079ba <.LCFI18>:
  4079ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004079be <.LCFI19>:
                    state->check = crc32(state->check, next, copy);
  4079be:	463a      	mov	r2, r7

004079c0 <.LVL229>:
  4079c0:	4651      	mov	r1, sl
  4079c2:	69b0      	ldr	r0, [r6, #24]
  4079c4:	f00b ff36 	bl	413834 <.LFE21>

004079c8 <.LVL230>:
  4079c8:	61b0      	str	r0, [r6, #24]
  4079ca:	e76f      	b.n	4078ac <.LVL212>

004079cc <.LVL231>:
            else if (state->head != Z_NULL)
  4079cc:	6a33      	ldr	r3, [r6, #32]
  4079ce:	2b00      	cmp	r3, #0
  4079d0:	f43f af71 	beq.w	4078b6 <.LVL215>
                state->head->comment = Z_NULL;
  4079d4:	2200      	movs	r2, #0
  4079d6:	625a      	str	r2, [r3, #36]	; 0x24
  4079d8:	e76d      	b.n	4078b6 <.LVL215>
                if (hold != (state->check & 0xffff)) {
  4079da:	8b33      	ldrh	r3, [r6, #24]
  4079dc:	455b      	cmp	r3, fp
  4079de:	d006      	beq.n	4079ee <.LVL231+0x22>
                    strm->msg = (char *)"header crc mismatch";
  4079e0:	4bb3      	ldr	r3, [pc, #716]	; (407cb0 <.LVL290+0x14>)
  4079e2:	3364      	adds	r3, #100	; 0x64
  4079e4:	f8c9 3018 	str.w	r3, [r9, #24]
                    state->mode = BAD;
  4079e8:	231d      	movs	r3, #29
  4079ea:	7033      	strb	r3, [r6, #0]
                    break;
  4079ec:	e4ff      	b.n	4073ee <.LVL113>
                INITBITS();
  4079ee:	2400      	movs	r4, #0

004079f0 <.LVL232>:
  4079f0:	46a3      	mov	fp, r4

004079f2 <.LVL233>:
            if (state->head != Z_NULL) {
  4079f2:	6a33      	ldr	r3, [r6, #32]
  4079f4:	b12b      	cbz	r3, 407a02 <.LVL233+0x10>
                state->head->hcrc = (int)((state->flags >> 9) & 1);
  4079f6:	f3c2 2240 	ubfx	r2, r2, #9, #1
  4079fa:	62da      	str	r2, [r3, #44]	; 0x2c
                state->head->done = 1;
  4079fc:	6a33      	ldr	r3, [r6, #32]
  4079fe:	2201      	movs	r2, #1
  407a00:	631a      	str	r2, [r3, #48]	; 0x30
            strm->adler = state->check = crc32(0L, Z_NULL, 0);
  407a02:	2200      	movs	r2, #0
  407a04:	4611      	mov	r1, r2
  407a06:	4610      	mov	r0, r2
  407a08:	f00b ff14 	bl	413834 <.LFE21>

00407a0c <.LVL234>:
  407a0c:	61b0      	str	r0, [r6, #24]
  407a0e:	f8c9 0030 	str.w	r0, [r9, #48]	; 0x30
            state->mode = TYPE;
  407a12:	230b      	movs	r3, #11
  407a14:	7033      	strb	r3, [r6, #0]
            break;
  407a16:	e4ea      	b.n	4073ee <.LVL113>
            strm->adler = state->check = ZSWAP32(hold);
  407a18:	ea4f 630b 	mov.w	r3, fp, lsl #24
  407a1c:	eb03 631b 	add.w	r3, r3, fp, lsr #24
  407a20:	ea4f 221b 	mov.w	r2, fp, lsr #8
  407a24:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
  407a28:	4413      	add	r3, r2
  407a2a:	ea4f 2b0b 	mov.w	fp, fp, lsl #8

00407a2e <.LVL235>:
  407a2e:	f40b 0b7f 	and.w	fp, fp, #16711680	; 0xff0000
  407a32:	445b      	add	r3, fp
  407a34:	61b3      	str	r3, [r6, #24]
  407a36:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30

00407a3a <.LVL236>:
            state->mode = DICT;
  407a3a:	230a      	movs	r3, #10
  407a3c:	7033      	strb	r3, [r6, #0]
            INITBITS();
  407a3e:	f04f 0b00 	mov.w	fp, #0
  407a42:	465c      	mov	r4, fp

00407a44 <.LVL237>:
            if (state->havedict == 0) {
  407a44:	68f3      	ldr	r3, [r6, #12]
  407a46:	b343      	cbz	r3, 407a9a <.LVL244>
            strm->adler = state->check = adler32(0L, Z_NULL, 0);
  407a48:	2200      	movs	r2, #0
  407a4a:	4611      	mov	r1, r2
  407a4c:	4610      	mov	r0, r2
  407a4e:	f00b fab3 	bl	412fb8 <.LBE46>

00407a52 <.LVL238>:
  407a52:	61b0      	str	r0, [r6, #24]
  407a54:	f8c9 0030 	str.w	r0, [r9, #48]	; 0x30
            state->mode = TYPE;
  407a58:	230b      	movs	r3, #11
  407a5a:	7033      	strb	r3, [r6, #0]
            if (flush == Z_BLOCK || flush == Z_TREES) goto inf_leave;
  407a5c:	9b07      	ldr	r3, [sp, #28]
  407a5e:	3b05      	subs	r3, #5
  407a60:	2b01      	cmp	r3, #1
  407a62:	f67f af3d 	bls.w	4078e0 <.L124>
            if (state->last) {
  407a66:	6873      	ldr	r3, [r6, #4]
  407a68:	bb3b      	cbnz	r3, 407aba <.LVL244+0x20>
            NEEDBITS(3);
  407a6a:	2c02      	cmp	r4, #2
  407a6c:	d82e      	bhi.n	407acc <.LVL244+0x32>
  407a6e:	2d00      	cmp	r5, #0
  407a70:	f43f af36 	beq.w	4078e0 <.L124>
  407a74:	3d01      	subs	r5, #1
  407a76:	f10a 0201 	add.w	r2, sl, #1

00407a7a <.LVL240>:
  407a7a:	f89a 3000 	ldrb.w	r3, [sl]
  407a7e:	40a3      	lsls	r3, r4
  407a80:	449b      	add	fp, r3
  407a82:	3408      	adds	r4, #8
            state->last = BITS(1);
  407a84:	f00b 0301 	and.w	r3, fp, #1
  407a88:	6073      	str	r3, [r6, #4]

00407a8a <.LVL243>:
            switch (BITS(2)) {
  407a8a:	f3cb 0341 	ubfx	r3, fp, #1, #2
  407a8e:	2b03      	cmp	r3, #3
  407a90:	d820      	bhi.n	407ad4 <.LVL247+0x4>
  407a92:	e8df f003 	tbb	[pc, r3]
  407a96:	241d      	.short	0x241d
  407a98:	3936      	.short	0x3936

00407a9a <.LVL244>:
                RESTORE();
  407a9a:	9b06      	ldr	r3, [sp, #24]
  407a9c:	f8c9 300c 	str.w	r3, [r9, #12]
  407aa0:	9b05      	ldr	r3, [sp, #20]
  407aa2:	f8c9 3010 	str.w	r3, [r9, #16]
  407aa6:	f8c9 a000 	str.w	sl, [r9]
  407aaa:	f8c9 5004 	str.w	r5, [r9, #4]
  407aae:	f8c6 b038 	str.w	fp, [r6, #56]	; 0x38
  407ab2:	63f4      	str	r4, [r6, #60]	; 0x3c
                return Z_NEED_DICT;
  407ab4:	2302      	movs	r3, #2
  407ab6:	9303      	str	r3, [sp, #12]
  407ab8:	e77d      	b.n	4079b6 <.LVL227>
                BYTEBITS();
  407aba:	f004 0307 	and.w	r3, r4, #7
  407abe:	fa2b fb03 	lsr.w	fp, fp, r3
  407ac2:	f024 0407 	bic.w	r4, r4, #7
                state->mode = CHECK;
  407ac6:	231a      	movs	r3, #26
  407ac8:	7033      	strb	r3, [r6, #0]
                break;
  407aca:	e490      	b.n	4073ee <.LVL113>
            NEEDBITS(3);
  407acc:	4652      	mov	r2, sl
  407ace:	e7d9      	b.n	407a84 <.LVL240+0xa>

00407ad0 <.LVL247>:
                state->mode = STORED;
  407ad0:	230d      	movs	r3, #13
  407ad2:	7033      	strb	r3, [r6, #0]
            DROPBITS(2);
  407ad4:	ea4f 0bdb 	mov.w	fp, fp, lsr #3

00407ad8 <.LVL248>:
  407ad8:	3c03      	subs	r4, #3

00407ada <.LVL249>:
            break;
  407ada:	4692      	mov	sl, r2
  407adc:	e487      	b.n	4073ee <.LVL113>

00407ade <.LBB4>:
    state->lencode = lenfix;
  407ade:	4b75      	ldr	r3, [pc, #468]	; (407cb4 <.LVL290+0x18>)
  407ae0:	64f3      	str	r3, [r6, #76]	; 0x4c
    state->lenbits = 9;
  407ae2:	2309      	movs	r3, #9
  407ae4:	6573      	str	r3, [r6, #84]	; 0x54
    state->distcode = distfix;
  407ae6:	4b74      	ldr	r3, [pc, #464]	; (407cb8 <.LVL290+0x1c>)
  407ae8:	6533      	str	r3, [r6, #80]	; 0x50
    state->distbits = 5;
  407aea:	2305      	movs	r3, #5
  407aec:	65b3      	str	r3, [r6, #88]	; 0x58

00407aee <.LBE4>:
                state->mode = LEN_;             /* decode codes */
  407aee:	2313      	movs	r3, #19
  407af0:	7033      	strb	r3, [r6, #0]
                if (flush == Z_TREES) {
  407af2:	9b07      	ldr	r3, [sp, #28]
  407af4:	2b06      	cmp	r3, #6
  407af6:	d1ed      	bne.n	407ad4 <.LVL247+0x4>
                    DROPBITS(2);
  407af8:	ea4f 0bdb 	mov.w	fp, fp, lsr #3

00407afc <.LVL252>:
  407afc:	3c03      	subs	r4, #3

00407afe <.LVL253>:
                    goto inf_leave;
  407afe:	4692      	mov	sl, r2
  407b00:	e6ee      	b.n	4078e0 <.L124>

00407b02 <.LVL254>:
                state->mode = TABLE;
  407b02:	2310      	movs	r3, #16
  407b04:	7033      	strb	r3, [r6, #0]
                break;
  407b06:	e7e5      	b.n	407ad4 <.LVL247+0x4>
                strm->msg = (char *)"invalid block type";
  407b08:	4b69      	ldr	r3, [pc, #420]	; (407cb0 <.LVL290+0x14>)
  407b0a:	3378      	adds	r3, #120	; 0x78
  407b0c:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  407b10:	231d      	movs	r3, #29
  407b12:	7033      	strb	r3, [r6, #0]
  407b14:	e7de      	b.n	407ad4 <.LVL247+0x4>

00407b16 <.LVL255>:
            BYTEBITS();                         /* go to byte boundary */
  407b16:	f004 0307 	and.w	r3, r4, #7
  407b1a:	fa2b fb03 	lsr.w	fp, fp, r3
  407b1e:	f024 0407 	bic.w	r4, r4, #7
            NEEDBITS(32);
  407b22:	2c1f      	cmp	r4, #31
  407b24:	d80d      	bhi.n	407b42 <.LVL261+0xa>
  407b26:	2d00      	cmp	r5, #0
  407b28:	f43f aeda 	beq.w	4078e0 <.L124>
  407b2c:	3d01      	subs	r5, #1
  407b2e:	f81a 3b01 	ldrb.w	r3, [sl], #1

00407b32 <.LVL259>:
  407b32:	40a3      	lsls	r3, r4
  407b34:	449b      	add	fp, r3
  407b36:	3408      	adds	r4, #8

00407b38 <.LVL261>:
  407b38:	2c1f      	cmp	r4, #31
  407b3a:	d802      	bhi.n	407b42 <.LVL261+0xa>
  407b3c:	2d00      	cmp	r5, #0
  407b3e:	d1f5      	bne.n	407b2c <.LVL255+0x16>
  407b40:	e6ce      	b.n	4078e0 <.L124>
            if ((hold & 0xffff) != ((hold >> 16) ^ 0xffff)) {
  407b42:	fa1f f28b 	uxth.w	r2, fp
  407b46:	f64f 73ff 	movw	r3, #65535	; 0xffff
  407b4a:	ea83 431b 	eor.w	r3, r3, fp, lsr #16
  407b4e:	429a      	cmp	r2, r3
  407b50:	d006      	beq.n	407b60 <.LVL261+0x28>
                strm->msg = (char *)"invalid stored block lengths";
  407b52:	4b57      	ldr	r3, [pc, #348]	; (407cb0 <.LVL290+0x14>)
  407b54:	338c      	adds	r3, #140	; 0x8c
  407b56:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  407b5a:	231d      	movs	r3, #29
  407b5c:	7033      	strb	r3, [r6, #0]
                break;
  407b5e:	e446      	b.n	4073ee <.LVL113>
            state->length = (unsigned)hold & 0xffff;
  407b60:	6432      	str	r2, [r6, #64]	; 0x40

00407b62 <.LVL262>:
            state->mode = COPY_;
  407b62:	230e      	movs	r3, #14
  407b64:	7033      	strb	r3, [r6, #0]
            if (flush == Z_TREES) goto inf_leave;
  407b66:	9b07      	ldr	r3, [sp, #28]
  407b68:	2b06      	cmp	r3, #6
  407b6a:	f000 843a 	beq.w	4083e2 <.LVL478>
            INITBITS();
  407b6e:	2400      	movs	r4, #0
  407b70:	46a3      	mov	fp, r4

00407b72 <.LVL263>:
            state->mode = COPY;
  407b72:	230f      	movs	r3, #15
  407b74:	7033      	strb	r3, [r6, #0]
            copy = state->length;
  407b76:	6c37      	ldr	r7, [r6, #64]	; 0x40

00407b78 <.LVL264>:
            if (copy) {
  407b78:	b1e7      	cbz	r7, 407bb4 <.LVL275>
  407b7a:	9b05      	ldr	r3, [sp, #20]
  407b7c:	429f      	cmp	r7, r3
  407b7e:	bf28      	it	cs
  407b80:	461f      	movcs	r7, r3

00407b82 <.LVL265>:
  407b82:	42af      	cmp	r7, r5
  407b84:	bf28      	it	cs
  407b86:	462f      	movcs	r7, r5

00407b88 <.LVL266>:
                if (copy == 0) goto inf_leave;
  407b88:	2f00      	cmp	r7, #0
  407b8a:	f43f aea9 	beq.w	4078e0 <.L124>
                zmemcpy(put, next, copy);
  407b8e:	463a      	mov	r2, r7
  407b90:	4651      	mov	r1, sl
  407b92:	f8dd 8018 	ldr.w	r8, [sp, #24]
  407b96:	4640      	mov	r0, r8
  407b98:	f00e fe76 	bl	416888 <memcpy>

00407b9c <.LVL267>:
                have -= copy;
  407b9c:	1bed      	subs	r5, r5, r7
                next += copy;
  407b9e:	44ba      	add	sl, r7
                left -= copy;
  407ba0:	9b05      	ldr	r3, [sp, #20]
  407ba2:	1bdb      	subs	r3, r3, r7
  407ba4:	9305      	str	r3, [sp, #20]

00407ba6 <.LVL270>:
                put += copy;
  407ba6:	4643      	mov	r3, r8

00407ba8 <.LVL271>:
  407ba8:	443b      	add	r3, r7
  407baa:	9306      	str	r3, [sp, #24]

00407bac <.LVL272>:
                state->length -= copy;
  407bac:	6c33      	ldr	r3, [r6, #64]	; 0x40

00407bae <.LVL273>:
  407bae:	1bdf      	subs	r7, r3, r7

00407bb0 <.LVL274>:
  407bb0:	6437      	str	r7, [r6, #64]	; 0x40
                break;
  407bb2:	e41c      	b.n	4073ee <.LVL113>

00407bb4 <.LVL275>:
            state->mode = TYPE;
  407bb4:	230b      	movs	r3, #11
  407bb6:	7033      	strb	r3, [r6, #0]
            break;
  407bb8:	e419      	b.n	4073ee <.LVL113>

00407bba <.LVL276>:
            state->nlen = BITS(5) + 257;
  407bba:	f00b 021f 	and.w	r2, fp, #31
  407bbe:	f202 1201 	addw	r2, r2, #257	; 0x101
  407bc2:	6632      	str	r2, [r6, #96]	; 0x60

00407bc4 <.LVL277>:
            state->ndist = BITS(5) + 1;
  407bc4:	f3cb 1344 	ubfx	r3, fp, #5, #5
  407bc8:	3301      	adds	r3, #1
  407bca:	6673      	str	r3, [r6, #100]	; 0x64

00407bcc <.LVL278>:
            state->ncode = BITS(4) + 4;
  407bcc:	f3cb 2183 	ubfx	r1, fp, #10, #4
  407bd0:	3104      	adds	r1, #4
  407bd2:	65f1      	str	r1, [r6, #92]	; 0x5c
            DROPBITS(4);
  407bd4:	ea4f 3b9b 	mov.w	fp, fp, lsr #14

00407bd8 <.LVL279>:
  407bd8:	3c0e      	subs	r4, #14

00407bda <.LVL280>:
            if (state->nlen > 286 || state->ndist > 30) {
  407bda:	2b1e      	cmp	r3, #30
  407bdc:	d82d      	bhi.n	407c3a <.LVL287>
  407bde:	f5b2 7f8f 	cmp.w	r2, #286	; 0x11e
  407be2:	d82a      	bhi.n	407c3a <.LVL287>
            state->have = 0;
  407be4:	2300      	movs	r3, #0
  407be6:	66b3      	str	r3, [r6, #104]	; 0x68
            state->mode = LENLENS;
  407be8:	2311      	movs	r3, #17
  407bea:	7033      	strb	r3, [r6, #0]
            while (state->have < state->ncode) {
  407bec:	6eb3      	ldr	r3, [r6, #104]	; 0x68
  407bee:	6df7      	ldr	r7, [r6, #92]	; 0x5c
  407bf0:	42bb      	cmp	r3, r7
  407bf2:	d22d      	bcs.n	407c50 <.LVL289>
  407bf4:	1c58      	adds	r0, r3, #1
  407bf6:	4a31      	ldr	r2, [pc, #196]	; (407cbc <.LVL290+0x20>)
  407bf8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  407bfc:	1e99      	subs	r1, r3, #2
  407bfe:	3701      	adds	r7, #1
                NEEDBITS(3);
  407c00:	2c02      	cmp	r4, #2
  407c02:	d822      	bhi.n	407c4a <.LVL287+0x10>
  407c04:	2d00      	cmp	r5, #0
  407c06:	f43f ae6b 	beq.w	4078e0 <.L124>
  407c0a:	3d01      	subs	r5, #1
  407c0c:	f10a 0201 	add.w	r2, sl, #1

00407c10 <.LVL282>:
  407c10:	f89a 3000 	ldrb.w	r3, [sl]
  407c14:	40a3      	lsls	r3, r4
  407c16:	449b      	add	fp, r3
  407c18:	3408      	adds	r4, #8
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
  407c1a:	66b0      	str	r0, [r6, #104]	; 0x68
  407c1c:	f831 3f02 	ldrh.w	r3, [r1, #2]!
  407c20:	3338      	adds	r3, #56	; 0x38
  407c22:	f00b 0e07 	and.w	lr, fp, #7
  407c26:	f826 e013 	strh.w	lr, [r6, r3, lsl #1]
                DROPBITS(3);
  407c2a:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
  407c2e:	3c03      	subs	r4, #3
  407c30:	3001      	adds	r0, #1
            while (state->have < state->ncode) {
  407c32:	42b8      	cmp	r0, r7
  407c34:	d00b      	beq.n	407c4e <.LVL288>
  407c36:	4692      	mov	sl, r2
  407c38:	e7e2      	b.n	407c00 <.LVL280+0x26>

00407c3a <.LVL287>:
                strm->msg = (char *)"too many length or distance symbols";
  407c3a:	4b1d      	ldr	r3, [pc, #116]	; (407cb0 <.LVL290+0x14>)
  407c3c:	33ac      	adds	r3, #172	; 0xac
  407c3e:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  407c42:	231d      	movs	r3, #29
  407c44:	7033      	strb	r3, [r6, #0]
                break;
  407c46:	f7ff bbd2 	b.w	4073ee <.LVL113>
                NEEDBITS(3);
  407c4a:	4652      	mov	r2, sl
  407c4c:	e7e5      	b.n	407c1a <.LVL282+0xa>

00407c4e <.LVL288>:
  407c4e:	4692      	mov	sl, r2

00407c50 <.LVL289>:
            while (state->have < 19)
  407c50:	6eb3      	ldr	r3, [r6, #104]	; 0x68
  407c52:	2b12      	cmp	r3, #18
  407c54:	d80e      	bhi.n	407c74 <.LVL289+0x24>
  407c56:	4a19      	ldr	r2, [pc, #100]	; (407cbc <.LVL290+0x20>)
  407c58:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  407c5c:	1e9a      	subs	r2, r3, #2
                state->lens[order[state->have++]] = 0;
  407c5e:	2100      	movs	r1, #0
  407c60:	980a      	ldr	r0, [sp, #40]	; 0x28
  407c62:	f832 3f02 	ldrh.w	r3, [r2, #2]!
  407c66:	3338      	adds	r3, #56	; 0x38
  407c68:	f826 1013 	strh.w	r1, [r6, r3, lsl #1]
            while (state->have < 19)
  407c6c:	4290      	cmp	r0, r2
  407c6e:	d1f8      	bne.n	407c62 <.LVL289+0x12>
  407c70:	2313      	movs	r3, #19
  407c72:	66b3      	str	r3, [r6, #104]	; 0x68
            state->next = state->codes;
  407c74:	f506 63a6 	add.w	r3, r6, #1328	; 0x530
  407c78:	66f3      	str	r3, [r6, #108]	; 0x6c
            state->lencode = (code const FAR *)(state->next);
  407c7a:	64f3      	str	r3, [r6, #76]	; 0x4c
            state->lenbits = 7;
  407c7c:	2307      	movs	r3, #7
  407c7e:	6573      	str	r3, [r6, #84]	; 0x54
                                &(state->lenbits), state->work);
  407c80:	f506 733c 	add.w	r3, r6, #752	; 0x2f0
            ret = inflate_table(CODES, state->lens, 19, &(state->next),
  407c84:	9301      	str	r3, [sp, #4]
  407c86:	f106 0354 	add.w	r3, r6, #84	; 0x54
  407c8a:	9300      	str	r3, [sp, #0]
  407c8c:	f106 036c 	add.w	r3, r6, #108	; 0x6c
  407c90:	2213      	movs	r2, #19
  407c92:	f106 0170 	add.w	r1, r6, #112	; 0x70
  407c96:	2000      	movs	r0, #0
  407c98:	f009 fbb8 	bl	41140c <.LFE177>

00407c9c <.LVL290>:
            if (ret) {
  407c9c:	9003      	str	r0, [sp, #12]
  407c9e:	b178      	cbz	r0, 407cc0 <.LVL290+0x24>
                strm->msg = (char *)"invalid code lengths set";
  407ca0:	4b03      	ldr	r3, [pc, #12]	; (407cb0 <.LVL290+0x14>)
  407ca2:	33d0      	adds	r3, #208	; 0xd0
  407ca4:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  407ca8:	231d      	movs	r3, #29
  407caa:	7033      	strb	r3, [r6, #0]
                break;
  407cac:	f7ff bb9f 	b.w	4073ee <.LVL113>
  407cb0:	00414f20 	.word	0x00414f20
  407cb4:	0040cb24 	.word	0x0040cb24
  407cb8:	0041b388 	.word	0x0041b388
  407cbc:	0041e2dc 	.word	0x0041e2dc
            state->have = 0;
  407cc0:	2300      	movs	r3, #0
  407cc2:	66b3      	str	r3, [r6, #104]	; 0x68
            state->mode = CODELENS;
  407cc4:	2312      	movs	r3, #18
  407cc6:	7033      	strb	r3, [r6, #0]

00407cc8 <.LVL291>:
            while (state->have < state->nlen + state->ndist) {
  407cc8:	6e32      	ldr	r2, [r6, #96]	; 0x60
  407cca:	6e73      	ldr	r3, [r6, #100]	; 0x64
  407ccc:	eb02 0e03 	add.w	lr, r2, r3
                    here = state->lencode[BITS(state->lenbits)];
  407cd0:	f04f 0c01 	mov.w	ip, #1
            while (state->have < state->nlen + state->ndist) {
  407cd4:	6eb1      	ldr	r1, [r6, #104]	; 0x68
  407cd6:	4571      	cmp	r1, lr
  407cd8:	f080 80bb 	bcs.w	407e52 <.LVL342>
                    here = state->lencode[BITS(state->lenbits)];
  407cdc:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  407cde:	6d73      	ldr	r3, [r6, #84]	; 0x54
  407ce0:	fa0c f303 	lsl.w	r3, ip, r3
  407ce4:	1e58      	subs	r0, r3, #1
  407ce6:	ea0b 0300 	and.w	r3, fp, r0
  407cea:	eb02 0383 	add.w	r3, r2, r3, lsl #2

00407cee <.LVL292>:
  407cee:	785f      	ldrb	r7, [r3, #1]

00407cf0 <.LVL293>:
  407cf0:	885b      	ldrh	r3, [r3, #2]

00407cf2 <.LVL294>:
                    if ((unsigned)(here.bits) <= bits) break;
  407cf2:	46b8      	mov	r8, r7
  407cf4:	42bc      	cmp	r4, r7
  407cf6:	d214      	bcs.n	407d22 <.LVL303>
                    PULLBYTE();
  407cf8:	2d00      	cmp	r5, #0
  407cfa:	f43f adf1 	beq.w	4078e0 <.L124>

00407cfe <.LVL295>:
  407cfe:	3d01      	subs	r5, #1
  407d00:	f81a 3b01 	ldrb.w	r3, [sl], #1

00407d04 <.LVL297>:
  407d04:	40a3      	lsls	r3, r4
  407d06:	449b      	add	fp, r3
  407d08:	3408      	adds	r4, #8

00407d0a <.LVL299>:
                    here = state->lencode[BITS(state->lenbits)];
  407d0a:	ea0b 0300 	and.w	r3, fp, r0
  407d0e:	eb02 0383 	add.w	r3, r2, r3, lsl #2

00407d12 <.LVL300>:
  407d12:	785f      	ldrb	r7, [r3, #1]

00407d14 <.LVL301>:
  407d14:	885b      	ldrh	r3, [r3, #2]

00407d16 <.LVL302>:
                    if ((unsigned)(here.bits) <= bits) break;
  407d16:	46b8      	mov	r8, r7
  407d18:	42a7      	cmp	r7, r4
  407d1a:	d902      	bls.n	407d22 <.LVL303>
                    PULLBYTE();
  407d1c:	2d00      	cmp	r5, #0
  407d1e:	d1ee      	bne.n	407cfe <.LVL295>
  407d20:	e5de      	b.n	4078e0 <.L124>

00407d22 <.LVL303>:
                if (here.val < 16) {
  407d22:	2b0f      	cmp	r3, #15
  407d24:	d809      	bhi.n	407d3a <.LVL303+0x18>
                    DROPBITS(here.bits);
  407d26:	fa2b fb07 	lsr.w	fp, fp, r7
  407d2a:	eba4 0408 	sub.w	r4, r4, r8
                    state->lens[state->have++] = here.val;
  407d2e:	1c4a      	adds	r2, r1, #1
  407d30:	66b2      	str	r2, [r6, #104]	; 0x68
  407d32:	3138      	adds	r1, #56	; 0x38
  407d34:	f826 3011 	strh.w	r3, [r6, r1, lsl #1]
  407d38:	e7cc      	b.n	407cd4 <.LVL291+0xc>
                    if (here.val == 16) {
  407d3a:	2b10      	cmp	r3, #16
  407d3c:	d013      	beq.n	407d66 <.LVL309+0xa>
                    else if (here.val == 17) {
  407d3e:	2b11      	cmp	r3, #17
  407d40:	d03b      	beq.n	407dba <.LVL320+0x10>
                        NEEDBITS(here.bits + 7);
  407d42:	463a      	mov	r2, r7
  407d44:	3707      	adds	r7, #7
  407d46:	42a7      	cmp	r7, r4
  407d48:	d959      	bls.n	407dfe <.LVL331>
  407d4a:	2d00      	cmp	r5, #0
  407d4c:	f43f adc8 	beq.w	4078e0 <.L124>
  407d50:	3d01      	subs	r5, #1
  407d52:	f81a 3b01 	ldrb.w	r3, [sl], #1

00407d56 <.LVL307>:
  407d56:	40a3      	lsls	r3, r4
  407d58:	449b      	add	fp, r3
  407d5a:	3408      	adds	r4, #8

00407d5c <.LVL309>:
  407d5c:	42bc      	cmp	r4, r7
  407d5e:	d24e      	bcs.n	407dfe <.LVL331>
  407d60:	2d00      	cmp	r5, #0
  407d62:	d1f5      	bne.n	407d50 <.LVL303+0x2e>
  407d64:	e5bc      	b.n	4078e0 <.L124>
                        NEEDBITS(here.bits + 2);
  407d66:	463a      	mov	r2, r7
  407d68:	3702      	adds	r7, #2
  407d6a:	42a7      	cmp	r7, r4
  407d6c:	d90d      	bls.n	407d8a <.LVL313+0xa>
  407d6e:	2d00      	cmp	r5, #0
  407d70:	f43f adb6 	beq.w	4078e0 <.L124>
  407d74:	3d01      	subs	r5, #1
  407d76:	f81a 3b01 	ldrb.w	r3, [sl], #1

00407d7a <.LVL311>:
  407d7a:	40a3      	lsls	r3, r4
  407d7c:	449b      	add	fp, r3
  407d7e:	3408      	adds	r4, #8

00407d80 <.LVL313>:
  407d80:	42bc      	cmp	r4, r7
  407d82:	d202      	bcs.n	407d8a <.LVL313+0xa>
  407d84:	2d00      	cmp	r5, #0
  407d86:	d1f5      	bne.n	407d74 <.LVL309+0x18>
  407d88:	e5aa      	b.n	4078e0 <.L124>
                        DROPBITS(here.bits);
  407d8a:	fa2b fb02 	lsr.w	fp, fp, r2
  407d8e:	eba4 0408 	sub.w	r4, r4, r8
                        if (state->have == 0) {
  407d92:	b151      	cbz	r1, 407daa <.LVL320>
                        len = state->lens[state->have - 1];
  407d94:	f101 0337 	add.w	r3, r1, #55	; 0x37
  407d98:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]

00407d9c <.LVL316>:
                        copy = 3 + BITS(2);
  407d9c:	f00b 0203 	and.w	r2, fp, #3
  407da0:	3203      	adds	r2, #3

00407da2 <.LVL317>:
                        DROPBITS(2);
  407da2:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
  407da6:	3c02      	subs	r4, #2
  407da8:	e038      	b.n	407e1c <.LVL338>

00407daa <.LVL320>:
                            strm->msg = (char *)"invalid bit length repeat";
  407daa:	4bc0      	ldr	r3, [pc, #768]	; (4080ac <.LVL395+0xa>)
  407dac:	33ec      	adds	r3, #236	; 0xec
  407dae:	f8c9 3018 	str.w	r3, [r9, #24]
                            state->mode = BAD;
  407db2:	231d      	movs	r3, #29
  407db4:	7033      	strb	r3, [r6, #0]
                            break;
  407db6:	f7ff bb1a 	b.w	4073ee <.LVL113>
                        NEEDBITS(here.bits + 3);
  407dba:	463a      	mov	r2, r7
  407dbc:	3703      	adds	r7, #3
  407dbe:	42a7      	cmp	r7, r4
  407dc0:	d90d      	bls.n	407dde <.LVL324+0xa>
  407dc2:	2d00      	cmp	r5, #0
  407dc4:	f43f ad8c 	beq.w	4078e0 <.L124>
  407dc8:	3d01      	subs	r5, #1
  407dca:	f81a 3b01 	ldrb.w	r3, [sl], #1

00407dce <.LVL322>:
  407dce:	40a3      	lsls	r3, r4
  407dd0:	449b      	add	fp, r3
  407dd2:	3408      	adds	r4, #8

00407dd4 <.LVL324>:
  407dd4:	42bc      	cmp	r4, r7
  407dd6:	d202      	bcs.n	407dde <.LVL324+0xa>
  407dd8:	2d00      	cmp	r5, #0
  407dda:	d1f5      	bne.n	407dc8 <.LVL320+0x1e>
  407ddc:	e580      	b.n	4078e0 <.L124>
                        DROPBITS(here.bits);
  407dde:	fa2b fb02 	lsr.w	fp, fp, r2

00407de2 <.LVL325>:
                        copy = 3 + BITS(3);
  407de2:	f00b 0207 	and.w	r2, fp, #7

00407de6 <.LVL326>:
  407de6:	3203      	adds	r2, #3

00407de8 <.LVL327>:
                        DROPBITS(3);
  407de8:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
  407dec:	f1c8 28ff 	rsb	r8, r8, #4278255360	; 0xff00ff00

00407df0 <.LVL329>:
  407df0:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
  407df4:	f108 08fd 	add.w	r8, r8, #253	; 0xfd
  407df8:	4444      	add	r4, r8

00407dfa <.LVL330>:
                        len = 0;
  407dfa:	2000      	movs	r0, #0
  407dfc:	e00e      	b.n	407e1c <.LVL338>

00407dfe <.LVL331>:
                        DROPBITS(here.bits);
  407dfe:	fa2b fb02 	lsr.w	fp, fp, r2

00407e02 <.LVL332>:
                        copy = 11 + BITS(7);
  407e02:	f00b 027f 	and.w	r2, fp, #127	; 0x7f

00407e06 <.LVL333>:
  407e06:	320b      	adds	r2, #11

00407e08 <.LVL334>:
                        DROPBITS(7);
  407e08:	ea4f 1bdb 	mov.w	fp, fp, lsr #7
  407e0c:	f1c8 28ff 	rsb	r8, r8, #4278255360	; 0xff00ff00

00407e10 <.LVL336>:
  407e10:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
  407e14:	f108 08f9 	add.w	r8, r8, #249	; 0xf9
  407e18:	4444      	add	r4, r8

00407e1a <.LVL337>:
                        len = 0;
  407e1a:	2000      	movs	r0, #0

00407e1c <.LVL338>:
                    if (state->have + copy > state->nlen + state->ndist) {
  407e1c:	1857      	adds	r7, r2, r1
  407e1e:	45be      	cmp	lr, r7
  407e20:	d30f      	bcc.n	407e42 <.LVL341>

00407e22 <.LVL339>:
                    while (copy--)
  407e22:	2a00      	cmp	r2, #0
  407e24:	f43f af56 	beq.w	407cd4 <.LVL291+0xc>
  407e28:	eb06 0341 	add.w	r3, r6, r1, lsl #1
  407e2c:	336e      	adds	r3, #110	; 0x6e
  407e2e:	3137      	adds	r1, #55	; 0x37
  407e30:	440a      	add	r2, r1

00407e32 <.LVL340>:
  407e32:	eb06 0242 	add.w	r2, r6, r2, lsl #1
                        state->lens[state->have++] = (unsigned short)len;
  407e36:	f823 0f02 	strh.w	r0, [r3, #2]!
                    while (copy--)
  407e3a:	4293      	cmp	r3, r2
  407e3c:	d1fb      	bne.n	407e36 <.LVL340+0x4>
  407e3e:	66b7      	str	r7, [r6, #104]	; 0x68
  407e40:	e748      	b.n	407cd4 <.LVL291+0xc>

00407e42 <.LVL341>:
                        strm->msg = (char *)"invalid bit length repeat";
  407e42:	4b9a      	ldr	r3, [pc, #616]	; (4080ac <.LVL395+0xa>)
  407e44:	33ec      	adds	r3, #236	; 0xec
  407e46:	f8c9 3018 	str.w	r3, [r9, #24]
                        state->mode = BAD;
  407e4a:	231d      	movs	r3, #29
  407e4c:	7033      	strb	r3, [r6, #0]
                        break;
  407e4e:	f7ff bace 	b.w	4073ee <.LVL113>

00407e52 <.LVL342>:
            if (state->mode == BAD) break;
  407e52:	7833      	ldrb	r3, [r6, #0]
  407e54:	2b1d      	cmp	r3, #29
  407e56:	f43f aaca 	beq.w	4073ee <.LVL113>
            if (state->lens[256] == 0) {
  407e5a:	f8b6 3270 	ldrh.w	r3, [r6, #624]	; 0x270
  407e5e:	b943      	cbnz	r3, 407e72 <.LVL342+0x20>
                strm->msg = (char *)"invalid code -- missing end-of-block";
  407e60:	4b92      	ldr	r3, [pc, #584]	; (4080ac <.LVL395+0xa>)
  407e62:	f503 7384 	add.w	r3, r3, #264	; 0x108
  407e66:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  407e6a:	231d      	movs	r3, #29
  407e6c:	7033      	strb	r3, [r6, #0]
                break;
  407e6e:	f7ff babe 	b.w	4073ee <.LVL113>
            state->next = state->codes;
  407e72:	f506 63a6 	add.w	r3, r6, #1328	; 0x530
  407e76:	66f3      	str	r3, [r6, #108]	; 0x6c
            state->lencode = (code const FAR *)(state->next);
  407e78:	64f3      	str	r3, [r6, #76]	; 0x4c
            state->lenbits = 9;
  407e7a:	2309      	movs	r3, #9
  407e7c:	6573      	str	r3, [r6, #84]	; 0x54
            ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),
  407e7e:	f106 0770 	add.w	r7, r6, #112	; 0x70
  407e82:	f106 036c 	add.w	r3, r6, #108	; 0x6c
  407e86:	461a      	mov	r2, r3
  407e88:	930b      	str	r3, [sp, #44]	; 0x2c
                                &(state->lenbits), state->work);
  407e8a:	f506 783c 	add.w	r8, r6, #752	; 0x2f0
            ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),
  407e8e:	f8cd 8004 	str.w	r8, [sp, #4]
  407e92:	f106 0354 	add.w	r3, r6, #84	; 0x54
  407e96:	9300      	str	r3, [sp, #0]
  407e98:	4613      	mov	r3, r2
  407e9a:	6e32      	ldr	r2, [r6, #96]	; 0x60
  407e9c:	4639      	mov	r1, r7
  407e9e:	2001      	movs	r0, #1
  407ea0:	f009 fab4 	bl	41140c <.LFE177>

00407ea4 <.LVL343>:
            if (ret) {
  407ea4:	9003      	str	r0, [sp, #12]
  407ea6:	b140      	cbz	r0, 407eba <.LVL343+0x16>
                strm->msg = (char *)"invalid literal/lengths set";
  407ea8:	4b80      	ldr	r3, [pc, #512]	; (4080ac <.LVL395+0xa>)
  407eaa:	f503 7398 	add.w	r3, r3, #304	; 0x130
  407eae:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  407eb2:	231d      	movs	r3, #29
  407eb4:	7033      	strb	r3, [r6, #0]
                break;
  407eb6:	f7ff ba9a 	b.w	4073ee <.LVL113>
            state->distcode = (code const FAR *)(state->next);
  407eba:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
  407ebc:	6533      	str	r3, [r6, #80]	; 0x50
            state->distbits = 6;
  407ebe:	2306      	movs	r3, #6
  407ec0:	65b3      	str	r3, [r6, #88]	; 0x58
            ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,
  407ec2:	6e31      	ldr	r1, [r6, #96]	; 0x60
  407ec4:	f8cd 8004 	str.w	r8, [sp, #4]
  407ec8:	f106 0358 	add.w	r3, r6, #88	; 0x58
  407ecc:	9300      	str	r3, [sp, #0]
  407ece:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407ed0:	6e72      	ldr	r2, [r6, #100]	; 0x64
  407ed2:	eb07 0141 	add.w	r1, r7, r1, lsl #1
  407ed6:	2002      	movs	r0, #2

00407ed8 <.LVL344>:
  407ed8:	f009 fa98 	bl	41140c <.LFE177>

00407edc <.LVL345>:
            if (ret) {
  407edc:	9003      	str	r0, [sp, #12]
  407ede:	b140      	cbz	r0, 407ef2 <.LVL345+0x16>
                strm->msg = (char *)"invalid distances set";
  407ee0:	4b72      	ldr	r3, [pc, #456]	; (4080ac <.LVL395+0xa>)
  407ee2:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
  407ee6:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  407eea:	231d      	movs	r3, #29
  407eec:	7033      	strb	r3, [r6, #0]
                break;
  407eee:	f7ff ba7e 	b.w	4073ee <.LVL113>
            state->mode = LEN_;
  407ef2:	2313      	movs	r3, #19
  407ef4:	7033      	strb	r3, [r6, #0]
            if (flush == Z_TREES) goto inf_leave;
  407ef6:	9b07      	ldr	r3, [sp, #28]
  407ef8:	2b06      	cmp	r3, #6
  407efa:	f43f acf1 	beq.w	4078e0 <.L124>

00407efe <.LVL346>:
            state->mode = LEN;
  407efe:	2314      	movs	r3, #20
  407f00:	7033      	strb	r3, [r6, #0]
            if (have >= 6 && left >= 258) {
  407f02:	2d05      	cmp	r5, #5
  407f04:	d903      	bls.n	407f0e <.LVL346+0x10>
  407f06:	9a05      	ldr	r2, [sp, #20]
  407f08:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
  407f0c:	d22a      	bcs.n	407f64 <.LVL359>
            state->back = 0;
  407f0e:	2200      	movs	r2, #0
  407f10:	f641 33c4 	movw	r3, #7108	; 0x1bc4
  407f14:	50f2      	str	r2, [r6, r3]
                here = state->lencode[BITS(state->lenbits)];
  407f16:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  407f18:	6d73      	ldr	r3, [r6, #84]	; 0x54
  407f1a:	2701      	movs	r7, #1
  407f1c:	409f      	lsls	r7, r3
  407f1e:	3f01      	subs	r7, #1
  407f20:	ea0b 0307 	and.w	r3, fp, r7
  407f24:	eb02 0083 	add.w	r0, r2, r3, lsl #2
  407f28:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]

00407f2c <.LVL347>:
  407f2c:	7843      	ldrb	r3, [r0, #1]

00407f2e <.LVL348>:
  407f2e:	8840      	ldrh	r0, [r0, #2]

00407f30 <.LVL349>:
                if ((unsigned)(here.bits) <= bits) break;
  407f30:	930b      	str	r3, [sp, #44]	; 0x2c
  407f32:	429c      	cmp	r4, r3
  407f34:	d23f      	bcs.n	407fb6 <.LVL370>
                PULLBYTE();
  407f36:	2d00      	cmp	r5, #0
  407f38:	f43f acd2 	beq.w	4078e0 <.L124>

00407f3c <.LVL350>:
  407f3c:	3d01      	subs	r5, #1
  407f3e:	f81a 3b01 	ldrb.w	r3, [sl], #1

00407f42 <.LVL352>:
  407f42:	40a3      	lsls	r3, r4
  407f44:	449b      	add	fp, r3
  407f46:	3408      	adds	r4, #8

00407f48 <.LVL354>:
                here = state->lencode[BITS(state->lenbits)];
  407f48:	ea0b 0307 	and.w	r3, fp, r7
  407f4c:	eb02 0083 	add.w	r0, r2, r3, lsl #2

00407f50 <.LVL355>:
  407f50:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]

00407f54 <.LVL356>:
  407f54:	7843      	ldrb	r3, [r0, #1]

00407f56 <.LVL357>:
  407f56:	8840      	ldrh	r0, [r0, #2]

00407f58 <.LVL358>:
                if ((unsigned)(here.bits) <= bits) break;
  407f58:	469e      	mov	lr, r3
  407f5a:	42a3      	cmp	r3, r4
  407f5c:	d92a      	bls.n	407fb4 <.LVL369>
                PULLBYTE();
  407f5e:	2d00      	cmp	r5, #0
  407f60:	d1ec      	bne.n	407f3c <.LVL350>
  407f62:	e4bd      	b.n	4078e0 <.L124>

00407f64 <.LVL359>:
                RESTORE();
  407f64:	9b06      	ldr	r3, [sp, #24]
  407f66:	f8c9 300c 	str.w	r3, [r9, #12]
  407f6a:	f8c9 2010 	str.w	r2, [r9, #16]
  407f6e:	f8c9 a000 	str.w	sl, [r9]
  407f72:	f8c9 5004 	str.w	r5, [r9, #4]
  407f76:	f8c6 b038 	str.w	fp, [r6, #56]	; 0x38
  407f7a:	63f4      	str	r4, [r6, #60]	; 0x3c
                inflate_fast(strm, out);
  407f7c:	9904      	ldr	r1, [sp, #16]
  407f7e:	4648      	mov	r0, r9
  407f80:	f008 f844 	bl	41000c <.LFE31>

00407f84 <.LVL360>:
                LOAD();
  407f84:	f8d9 300c 	ldr.w	r3, [r9, #12]
  407f88:	9306      	str	r3, [sp, #24]

00407f8a <.LVL361>:
  407f8a:	f8d9 3010 	ldr.w	r3, [r9, #16]

00407f8e <.LVL362>:
  407f8e:	9305      	str	r3, [sp, #20]

00407f90 <.LVL363>:
  407f90:	f8d9 a000 	ldr.w	sl, [r9]
  407f94:	f8d9 5004 	ldr.w	r5, [r9, #4]
  407f98:	f8d6 b038 	ldr.w	fp, [r6, #56]	; 0x38
  407f9c:	6bf4      	ldr	r4, [r6, #60]	; 0x3c
                if (state->mode == TYPE)
  407f9e:	7833      	ldrb	r3, [r6, #0]

00407fa0 <.LVL368>:
  407fa0:	2b0b      	cmp	r3, #11
  407fa2:	f47f aa24 	bne.w	4073ee <.LVL113>
                    state->back = -1;
  407fa6:	f04f 32ff 	mov.w	r2, #4294967295
  407faa:	f641 33c4 	movw	r3, #7108	; 0x1bc4
  407fae:	50f2      	str	r2, [r6, r3]
  407fb0:	f7ff ba1d 	b.w	4073ee <.LVL113>

00407fb4 <.LVL369>:
  407fb4:	930b      	str	r3, [sp, #44]	; 0x2c

00407fb6 <.LVL370>:
            if (here.op && (here.op & 0xf0) == 0) {
  407fb6:	2900      	cmp	r1, #0
  407fb8:	d03b      	beq.n	408032 <.LVL386>
  407fba:	f011 0ff0 	tst.w	r1, #240	; 0xf0
  407fbe:	d138      	bne.n	408032 <.LVL386>
                    here = state->lencode[last.val +
  407fc0:	4680      	mov	r8, r0
                            (BITS(last.bits + last.op) >> last.bits)];
  407fc2:	461f      	mov	r7, r3
  407fc4:	4419      	add	r1, r3
  407fc6:	f04f 0c01 	mov.w	ip, #1
  407fca:	fa0c fc01 	lsl.w	ip, ip, r1
  407fce:	f10c 3cff 	add.w	ip, ip, #4294967295
  407fd2:	ea0c 010b 	and.w	r1, ip, fp
  407fd6:	fa21 f303 	lsr.w	r3, r1, r3
                    here = state->lencode[last.val +
  407fda:	4403      	add	r3, r0
  407fdc:	eb02 0083 	add.w	r0, r2, r3, lsl #2
  407fe0:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]

00407fe4 <.LVL371>:
  407fe4:	7843      	ldrb	r3, [r0, #1]

00407fe6 <.LVL372>:
  407fe6:	8840      	ldrh	r0, [r0, #2]

00407fe8 <.LVL373>:
                    if ((unsigned)(last.bits + here.bits) <= bits) break;
  407fe8:	eb03 0e07 	add.w	lr, r3, r7
  407fec:	45a6      	cmp	lr, r4
  407fee:	d919      	bls.n	408024 <.LVL383>
                    PULLBYTE();
  407ff0:	2d00      	cmp	r5, #0
  407ff2:	f43f ac75 	beq.w	4078e0 <.L124>

00407ff6 <.LVL374>:
  407ff6:	3d01      	subs	r5, #1
  407ff8:	f81a 3b01 	ldrb.w	r3, [sl], #1

00407ffc <.LVL376>:
  407ffc:	40a3      	lsls	r3, r4
  407ffe:	449b      	add	fp, r3
  408000:	3408      	adds	r4, #8

00408002 <.LVL378>:
                            (BITS(last.bits + last.op) >> last.bits)];
  408002:	ea0b 030c 	and.w	r3, fp, ip
  408006:	40fb      	lsrs	r3, r7
                    here = state->lencode[last.val +
  408008:	4443      	add	r3, r8
  40800a:	eb02 0083 	add.w	r0, r2, r3, lsl #2

0040800e <.LVL379>:
  40800e:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]

00408012 <.LVL380>:
  408012:	7843      	ldrb	r3, [r0, #1]

00408014 <.LVL381>:
  408014:	8840      	ldrh	r0, [r0, #2]

00408016 <.LVL382>:
                    if ((unsigned)(last.bits + here.bits) <= bits) break;
  408016:	eb03 0e07 	add.w	lr, r3, r7
  40801a:	45a6      	cmp	lr, r4
  40801c:	d902      	bls.n	408024 <.LVL383>
                    PULLBYTE();
  40801e:	2d00      	cmp	r5, #0
  408020:	d1e9      	bne.n	407ff6 <.LVL374>
  408022:	e45d      	b.n	4078e0 <.L124>

00408024 <.LVL383>:
                DROPBITS(last.bits);
  408024:	fa2b fb07 	lsr.w	fp, fp, r7
  408028:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40802a:	1aa4      	subs	r4, r4, r2
                state->back += last.bits;
  40802c:	f641 32c4 	movw	r2, #7108	; 0x1bc4
  408030:	50b7      	str	r7, [r6, r2]

00408032 <.LVL386>:
            DROPBITS(here.bits);
  408032:	fa2b fb03 	lsr.w	fp, fp, r3
  408036:	1ae4      	subs	r4, r4, r3
            state->back += here.bits;
  408038:	f641 37c4 	movw	r7, #7108	; 0x1bc4
  40803c:	59f2      	ldr	r2, [r6, r7]
  40803e:	4413      	add	r3, r2

00408040 <.LVL389>:
  408040:	51f3      	str	r3, [r6, r7]
            state->length = (unsigned)here.val;
  408042:	6430      	str	r0, [r6, #64]	; 0x40
            if ((int)(here.op) == 0) {
  408044:	b919      	cbnz	r1, 40804e <.LVL389+0xe>
                state->mode = LIT;
  408046:	2319      	movs	r3, #25
  408048:	7033      	strb	r3, [r6, #0]
                break;
  40804a:	f7ff b9d0 	b.w	4073ee <.LVL113>
            if (here.op & 32) {
  40804e:	f011 0f20 	tst.w	r1, #32
  408052:	d008      	beq.n	408066 <.LVL389+0x26>
                state->back = -1;
  408054:	f04f 32ff 	mov.w	r2, #4294967295
  408058:	f641 33c4 	movw	r3, #7108	; 0x1bc4
  40805c:	50f2      	str	r2, [r6, r3]
                state->mode = TYPE;
  40805e:	230b      	movs	r3, #11
  408060:	7033      	strb	r3, [r6, #0]
                break;
  408062:	f7ff b9c4 	b.w	4073ee <.LVL113>
            if (here.op & 64) {
  408066:	f011 0f40 	tst.w	r1, #64	; 0x40
  40806a:	d008      	beq.n	40807e <.LVL389+0x3e>
                strm->msg = (char *)"invalid literal/length code";
  40806c:	4b0f      	ldr	r3, [pc, #60]	; (4080ac <.LVL395+0xa>)
  40806e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
  408072:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  408076:	231d      	movs	r3, #29
  408078:	7033      	strb	r3, [r6, #0]
                break;
  40807a:	f7ff b9b8 	b.w	4073ee <.LVL113>
            state->extra = (unsigned)(here.op) & 15;
  40807e:	f001 010f 	and.w	r1, r1, #15

00408082 <.LVL390>:
  408082:	64b1      	str	r1, [r6, #72]	; 0x48
            state->mode = LENEXT;
  408084:	2315      	movs	r3, #21
  408086:	7033      	strb	r3, [r6, #0]

00408088 <.LVL391>:
            if (state->extra) {
  408088:	6cb2      	ldr	r2, [r6, #72]	; 0x48
  40808a:	b30a      	cbz	r2, 4080d0 <.LVL395+0x2e>
                NEEDBITS(state->extra);
  40808c:	4294      	cmp	r4, r2
  40808e:	d20f      	bcs.n	4080b0 <.LVL395+0xe>
  408090:	2d00      	cmp	r5, #0
  408092:	f43f ac25 	beq.w	4078e0 <.L124>
  408096:	3d01      	subs	r5, #1
  408098:	f81a 3b01 	ldrb.w	r3, [sl], #1

0040809c <.LVL393>:
  40809c:	40a3      	lsls	r3, r4
  40809e:	449b      	add	fp, r3
  4080a0:	3408      	adds	r4, #8

004080a2 <.LVL395>:
  4080a2:	42a2      	cmp	r2, r4
  4080a4:	d904      	bls.n	4080b0 <.LVL395+0xe>
  4080a6:	2d00      	cmp	r5, #0
  4080a8:	d1f5      	bne.n	408096 <.LVL391+0xe>
  4080aa:	e419      	b.n	4078e0 <.L124>
  4080ac:	00414f20 	.word	0x00414f20
                state->length += BITS(state->extra);
  4080b0:	2301      	movs	r3, #1
  4080b2:	4093      	lsls	r3, r2
  4080b4:	3b01      	subs	r3, #1
  4080b6:	ea03 030b 	and.w	r3, r3, fp
  4080ba:	6c31      	ldr	r1, [r6, #64]	; 0x40
  4080bc:	440b      	add	r3, r1
  4080be:	6433      	str	r3, [r6, #64]	; 0x40
                DROPBITS(state->extra);
  4080c0:	fa2b fb02 	lsr.w	fp, fp, r2
  4080c4:	1aa4      	subs	r4, r4, r2
                state->back += state->extra;
  4080c6:	f641 31c4 	movw	r1, #7108	; 0x1bc4
  4080ca:	5873      	ldr	r3, [r6, r1]
  4080cc:	4413      	add	r3, r2
  4080ce:	5073      	str	r3, [r6, r1]
            state->was = state->length;
  4080d0:	6c32      	ldr	r2, [r6, #64]	; 0x40
  4080d2:	f641 33c8 	movw	r3, #7112	; 0x1bc8
  4080d6:	50f2      	str	r2, [r6, r3]
            state->mode = DIST;
  4080d8:	2316      	movs	r3, #22
  4080da:	7033      	strb	r3, [r6, #0]
                here = state->distcode[BITS(state->distbits)];
  4080dc:	6d32      	ldr	r2, [r6, #80]	; 0x50
  4080de:	6db3      	ldr	r3, [r6, #88]	; 0x58
  4080e0:	2701      	movs	r7, #1
  4080e2:	409f      	lsls	r7, r3
  4080e4:	3f01      	subs	r7, #1
  4080e6:	ea0b 0307 	and.w	r3, fp, r7
  4080ea:	eb02 0083 	add.w	r0, r2, r3, lsl #2
  4080ee:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]

004080f2 <.LVL398>:
  4080f2:	7843      	ldrb	r3, [r0, #1]

004080f4 <.LVL399>:
  4080f4:	8840      	ldrh	r0, [r0, #2]

004080f6 <.LVL400>:
                if ((unsigned)(here.bits) <= bits) break;
  4080f6:	930b      	str	r3, [sp, #44]	; 0x2c
  4080f8:	429c      	cmp	r4, r3
  4080fa:	d218      	bcs.n	40812e <.LVL410>
                PULLBYTE();
  4080fc:	2d00      	cmp	r5, #0
  4080fe:	f43f abef 	beq.w	4078e0 <.L124>

00408102 <.LVL401>:
  408102:	3d01      	subs	r5, #1
  408104:	f81a 3b01 	ldrb.w	r3, [sl], #1

00408108 <.LVL403>:
  408108:	40a3      	lsls	r3, r4
  40810a:	449b      	add	fp, r3
  40810c:	3408      	adds	r4, #8

0040810e <.LVL405>:
                here = state->distcode[BITS(state->distbits)];
  40810e:	ea0b 0307 	and.w	r3, fp, r7
  408112:	eb02 0083 	add.w	r0, r2, r3, lsl #2

00408116 <.LVL406>:
  408116:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]

0040811a <.LVL407>:
  40811a:	7843      	ldrb	r3, [r0, #1]

0040811c <.LVL408>:
  40811c:	8840      	ldrh	r0, [r0, #2]

0040811e <.LVL409>:
                if ((unsigned)(here.bits) <= bits) break;
  40811e:	469e      	mov	lr, r3
  408120:	42a3      	cmp	r3, r4
  408122:	d903      	bls.n	40812c <.LVL409+0xe>
                PULLBYTE();
  408124:	2d00      	cmp	r5, #0
  408126:	d1ec      	bne.n	408102 <.LVL401>
  408128:	f7ff bbda 	b.w	4078e0 <.L124>
  40812c:	930b      	str	r3, [sp, #44]	; 0x2c

0040812e <.LVL410>:
            if ((here.op & 0xf0) == 0) {
  40812e:	f011 0ff0 	tst.w	r1, #240	; 0xf0
  408132:	d13d      	bne.n	4081b0 <.LVL426>
                    here = state->distcode[last.val +
  408134:	4680      	mov	r8, r0
                            (BITS(last.bits + last.op) >> last.bits)];
  408136:	461f      	mov	r7, r3
  408138:	4419      	add	r1, r3
  40813a:	f04f 0c01 	mov.w	ip, #1
  40813e:	fa0c fc01 	lsl.w	ip, ip, r1
  408142:	f10c 3cff 	add.w	ip, ip, #4294967295
  408146:	ea0c 010b 	and.w	r1, ip, fp
  40814a:	fa21 f303 	lsr.w	r3, r1, r3
                    here = state->distcode[last.val +
  40814e:	4403      	add	r3, r0
  408150:	eb02 0083 	add.w	r0, r2, r3, lsl #2
  408154:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]

00408158 <.LVL411>:
  408158:	7843      	ldrb	r3, [r0, #1]

0040815a <.LVL412>:
  40815a:	8840      	ldrh	r0, [r0, #2]

0040815c <.LVL413>:
                    if ((unsigned)(last.bits + here.bits) <= bits) break;
  40815c:	eb03 0e07 	add.w	lr, r3, r7
  408160:	45a6      	cmp	lr, r4
  408162:	d91a      	bls.n	40819a <.LVL423>
                    PULLBYTE();
  408164:	2d00      	cmp	r5, #0
  408166:	f43f abbb 	beq.w	4078e0 <.L124>

0040816a <.LVL414>:
  40816a:	3d01      	subs	r5, #1
  40816c:	f81a 3b01 	ldrb.w	r3, [sl], #1

00408170 <.LVL416>:
  408170:	40a3      	lsls	r3, r4
  408172:	449b      	add	fp, r3
  408174:	3408      	adds	r4, #8

00408176 <.LVL418>:
                            (BITS(last.bits + last.op) >> last.bits)];
  408176:	ea0b 030c 	and.w	r3, fp, ip
  40817a:	40fb      	lsrs	r3, r7
                    here = state->distcode[last.val +
  40817c:	4443      	add	r3, r8
  40817e:	eb02 0083 	add.w	r0, r2, r3, lsl #2

00408182 <.LVL419>:
  408182:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]

00408186 <.LVL420>:
  408186:	7843      	ldrb	r3, [r0, #1]

00408188 <.LVL421>:
  408188:	8840      	ldrh	r0, [r0, #2]

0040818a <.LVL422>:
                    if ((unsigned)(last.bits + here.bits) <= bits) break;
  40818a:	eb03 0e07 	add.w	lr, r3, r7
  40818e:	45a6      	cmp	lr, r4
  408190:	d903      	bls.n	40819a <.LVL423>
                    PULLBYTE();
  408192:	2d00      	cmp	r5, #0
  408194:	d1e9      	bne.n	40816a <.LVL414>
  408196:	f7ff bba3 	b.w	4078e0 <.L124>

0040819a <.LVL423>:
                DROPBITS(last.bits);
  40819a:	fa2b fb07 	lsr.w	fp, fp, r7
  40819e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4081a0:	1aa4      	subs	r4, r4, r2
                state->back += last.bits;
  4081a2:	f641 3ec4 	movw	lr, #7108	; 0x1bc4
  4081a6:	f856 200e 	ldr.w	r2, [r6, lr]
  4081aa:	443a      	add	r2, r7
  4081ac:	f846 200e 	str.w	r2, [r6, lr]

004081b0 <.LVL426>:
            DROPBITS(here.bits);
  4081b0:	fa2b fb03 	lsr.w	fp, fp, r3
  4081b4:	1ae4      	subs	r4, r4, r3
            state->back += here.bits;
  4081b6:	f641 37c4 	movw	r7, #7108	; 0x1bc4
  4081ba:	59f2      	ldr	r2, [r6, r7]
  4081bc:	4413      	add	r3, r2

004081be <.LVL429>:
  4081be:	51f3      	str	r3, [r6, r7]
            if (here.op & 64) {
  4081c0:	f011 0f40 	tst.w	r1, #64	; 0x40
  4081c4:	d008      	beq.n	4081d8 <.LVL429+0x1a>
                strm->msg = (char *)"invalid distance code";
  4081c6:	4b9e      	ldr	r3, [pc, #632]	; (408440 <.LVL486+0x8>)
  4081c8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
  4081cc:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  4081d0:	231d      	movs	r3, #29
  4081d2:	7033      	strb	r3, [r6, #0]
                break;
  4081d4:	f7ff b90b 	b.w	4073ee <.LVL113>
            state->offset = (unsigned)here.val;
  4081d8:	6470      	str	r0, [r6, #68]	; 0x44
            state->extra = (unsigned)(here.op) & 15;
  4081da:	f001 010f 	and.w	r1, r1, #15

004081de <.LVL430>:
  4081de:	64b1      	str	r1, [r6, #72]	; 0x48
            state->mode = DISTEXT;
  4081e0:	2317      	movs	r3, #23
  4081e2:	7033      	strb	r3, [r6, #0]

004081e4 <.LVL431>:
            if (state->extra) {
  4081e4:	6cb2      	ldr	r2, [r6, #72]	; 0x48
  4081e6:	b302      	cbz	r2, 40822a <.LVL435+0x2c>
                NEEDBITS(state->extra);
  4081e8:	4294      	cmp	r4, r2
  4081ea:	d20e      	bcs.n	40820a <.LVL435+0xc>
  4081ec:	2d00      	cmp	r5, #0
  4081ee:	f43f ab77 	beq.w	4078e0 <.L124>
  4081f2:	3d01      	subs	r5, #1
  4081f4:	f81a 3b01 	ldrb.w	r3, [sl], #1

004081f8 <.LVL433>:
  4081f8:	40a3      	lsls	r3, r4
  4081fa:	449b      	add	fp, r3
  4081fc:	3408      	adds	r4, #8

004081fe <.LVL435>:
  4081fe:	42a2      	cmp	r2, r4
  408200:	d903      	bls.n	40820a <.LVL435+0xc>
  408202:	2d00      	cmp	r5, #0
  408204:	d1f5      	bne.n	4081f2 <.LVL431+0xe>
  408206:	f7ff bb6b 	b.w	4078e0 <.L124>
                state->offset += BITS(state->extra);
  40820a:	2301      	movs	r3, #1
  40820c:	4093      	lsls	r3, r2
  40820e:	3b01      	subs	r3, #1
  408210:	ea03 030b 	and.w	r3, r3, fp
  408214:	6c71      	ldr	r1, [r6, #68]	; 0x44
  408216:	440b      	add	r3, r1
  408218:	6473      	str	r3, [r6, #68]	; 0x44
                DROPBITS(state->extra);
  40821a:	fa2b fb02 	lsr.w	fp, fp, r2
  40821e:	1aa4      	subs	r4, r4, r2
                state->back += state->extra;
  408220:	f641 31c4 	movw	r1, #7108	; 0x1bc4
  408224:	5873      	ldr	r3, [r6, r1]
  408226:	4413      	add	r3, r2
  408228:	5073      	str	r3, [r6, r1]
            state->mode = MATCH;
  40822a:	2318      	movs	r3, #24
  40822c:	7033      	strb	r3, [r6, #0]
            if (left == 0) goto inf_leave;
  40822e:	9b05      	ldr	r3, [sp, #20]
  408230:	2b00      	cmp	r3, #0
  408232:	f43f ab55 	beq.w	4078e0 <.L124>
            copy = out - left;
  408236:	9a04      	ldr	r2, [sp, #16]
  408238:	1ad0      	subs	r0, r2, r3

0040823a <.LVL438>:
            if (state->offset > copy) {         /* copy from window */
  40823a:	6c73      	ldr	r3, [r6, #68]	; 0x44
  40823c:	4298      	cmp	r0, r3
  40823e:	d21d      	bcs.n	40827c <.LVL443>
                copy = state->offset - copy;
  408240:	1a18      	subs	r0, r3, r0
                if (copy > state->whave) {
  408242:	6af3      	ldr	r3, [r6, #44]	; 0x2c
  408244:	4298      	cmp	r0, r3
  408246:	d90c      	bls.n	408262 <.LVL438+0x28>
                    if (state->sane) {
  408248:	f506 53de 	add.w	r3, r6, #7104	; 0x1bc0
  40824c:	681b      	ldr	r3, [r3, #0]
  40824e:	b143      	cbz	r3, 408262 <.LVL438+0x28>
                        strm->msg = (char *)"invalid distance too far back";
  408250:	4b7b      	ldr	r3, [pc, #492]	; (408440 <.LVL486+0x8>)
  408252:	f503 73cc 	add.w	r3, r3, #408	; 0x198
  408256:	f8c9 3018 	str.w	r3, [r9, #24]
                        state->mode = BAD;
  40825a:	231d      	movs	r3, #29
  40825c:	7033      	strb	r3, [r6, #0]
                        break;
  40825e:	f7ff b8c6 	b.w	4073ee <.LVL113>
                if (copy > state->wnext) {
  408262:	6b33      	ldr	r3, [r6, #48]	; 0x30
  408264:	4298      	cmp	r0, r3
                    copy -= state->wnext;
  408266:	bf84      	itt	hi
  408268:	1ac0      	subhi	r0, r0, r3
                    from = state->window + (state->wsize - copy);
  40826a:	6ab3      	ldrhi	r3, [r6, #40]	; 0x28
                    from = state->window + (state->wnext - copy);
  40826c:	1a1b      	subs	r3, r3, r0
  40826e:	6b72      	ldr	r2, [r6, #52]	; 0x34
  408270:	4413      	add	r3, r2

00408272 <.LVL441>:
  408272:	6c32      	ldr	r2, [r6, #64]	; 0x40
  408274:	4290      	cmp	r0, r2
  408276:	bf28      	it	cs
  408278:	4610      	movcs	r0, r2

0040827a <.LVL442>:
  40827a:	e002      	b.n	408282 <.LVL444+0x2>

0040827c <.LVL443>:
                from = put - state->offset;
  40827c:	9a06      	ldr	r2, [sp, #24]
  40827e:	1ad3      	subs	r3, r2, r3

00408280 <.LVL444>:
                copy = state->length;
  408280:	6c30      	ldr	r0, [r6, #64]	; 0x40
  408282:	9905      	ldr	r1, [sp, #20]
  408284:	4288      	cmp	r0, r1
  408286:	bf28      	it	cs
  408288:	4608      	movcs	r0, r1
            left -= copy;
  40828a:	1a0a      	subs	r2, r1, r0
  40828c:	9205      	str	r2, [sp, #20]

0040828e <.LVL447>:
            state->length -= copy;
  40828e:	6c32      	ldr	r2, [r6, #64]	; 0x40

00408290 <.LVL448>:
  408290:	1a12      	subs	r2, r2, r0
  408292:	6432      	str	r2, [r6, #64]	; 0x40
  408294:	9a06      	ldr	r2, [sp, #24]
  408296:	3a01      	subs	r2, #1
  408298:	181f      	adds	r7, r3, r0

0040829a <.LVL449>:
                *put++ = *from++;
  40829a:	f813 1b01 	ldrb.w	r1, [r3], #1

0040829e <.LVL450>:
  40829e:	f802 1f01 	strb.w	r1, [r2, #1]!
            } while (--copy);
  4082a2:	42bb      	cmp	r3, r7
  4082a4:	d1f9      	bne.n	40829a <.LVL449>
  4082a6:	9b06      	ldr	r3, [sp, #24]

004082a8 <.LVL451>:
  4082a8:	4403      	add	r3, r0
  4082aa:	9306      	str	r3, [sp, #24]
            if (state->length == 0) state->mode = LEN;
  4082ac:	6c33      	ldr	r3, [r6, #64]	; 0x40
  4082ae:	2b00      	cmp	r3, #0
  4082b0:	f47f a89d 	bne.w	4073ee <.LVL113>
  4082b4:	2314      	movs	r3, #20
  4082b6:	7033      	strb	r3, [r6, #0]
  4082b8:	f7ff b899 	b.w	4073ee <.LVL113>

004082bc <.LVL452>:
            if (left == 0) goto inf_leave;
  4082bc:	9a05      	ldr	r2, [sp, #20]
  4082be:	2a00      	cmp	r2, #0
  4082c0:	f43f ab0e 	beq.w	4078e0 <.L124>

004082c4 <.LVL453>:
            *put++ = (unsigned char)(state->length);
  4082c4:	6c33      	ldr	r3, [r6, #64]	; 0x40
  4082c6:	9806      	ldr	r0, [sp, #24]
  4082c8:	7003      	strb	r3, [r0, #0]
            left--;
  4082ca:	1e53      	subs	r3, r2, #1
  4082cc:	9305      	str	r3, [sp, #20]

004082ce <.LVL454>:
            state->mode = LEN;
  4082ce:	2314      	movs	r3, #20

004082d0 <.LVL455>:
  4082d0:	7033      	strb	r3, [r6, #0]
            *put++ = (unsigned char)(state->length);
  4082d2:	1c43      	adds	r3, r0, #1

004082d4 <.LVL456>:
  4082d4:	9306      	str	r3, [sp, #24]
            break;
  4082d6:	f7ff b88a 	b.w	4073ee <.LVL113>

004082da <.LVL457>:
            if (state->wrap) {
  4082da:	68b3      	ldr	r3, [r6, #8]
  4082dc:	2b00      	cmp	r3, #0
  4082de:	d052      	beq.n	408386 <.LVL471>
                NEEDBITS(32);
  4082e0:	2c1f      	cmp	r4, #31
  4082e2:	d80e      	bhi.n	408302 <.LVL461+0xc>
  4082e4:	2d00      	cmp	r5, #0
  4082e6:	f43f aafb 	beq.w	4078e0 <.L124>
  4082ea:	3d01      	subs	r5, #1
  4082ec:	f81a 3b01 	ldrb.w	r3, [sl], #1

004082f0 <.LVL459>:
  4082f0:	40a3      	lsls	r3, r4
  4082f2:	449b      	add	fp, r3
  4082f4:	3408      	adds	r4, #8

004082f6 <.LVL461>:
  4082f6:	2c1f      	cmp	r4, #31
  4082f8:	d803      	bhi.n	408302 <.LVL461+0xc>
  4082fa:	2d00      	cmp	r5, #0
  4082fc:	d1f5      	bne.n	4082ea <.LVL457+0x10>
  4082fe:	f7ff baef 	b.w	4078e0 <.L124>
                out -= left;
  408302:	9b04      	ldr	r3, [sp, #16]
  408304:	9a05      	ldr	r2, [sp, #20]
  408306:	1a99      	subs	r1, r3, r2

00408308 <.LVL462>:
                strm->total_out += out;
  408308:	f8d9 3014 	ldr.w	r3, [r9, #20]
  40830c:	440b      	add	r3, r1
  40830e:	f8c9 3014 	str.w	r3, [r9, #20]
                state->total += out;
  408312:	69f3      	ldr	r3, [r6, #28]
  408314:	440b      	add	r3, r1
  408316:	61f3      	str	r3, [r6, #28]
                if (out)
  408318:	b151      	cbz	r1, 408330 <.LVL465>
                        UPDATE(state->check, put - out, out);
  40831a:	6933      	ldr	r3, [r6, #16]
  40831c:	b333      	cbz	r3, 40836c <.LVL466>
  40831e:	460a      	mov	r2, r1
  408320:	9b06      	ldr	r3, [sp, #24]
  408322:	1a59      	subs	r1, r3, r1

00408324 <.LVL463>:
  408324:	69b0      	ldr	r0, [r6, #24]
  408326:	f00b fa85 	bl	413834 <.LFE21>

0040832a <.LVL464>:
                    strm->adler = state->check =
  40832a:	61b0      	str	r0, [r6, #24]
  40832c:	f8c9 0030 	str.w	r0, [r9, #48]	; 0x30

00408330 <.LVL465>:
                     state->flags ? hold :
  408330:	6933      	ldr	r3, [r6, #16]
  408332:	bb13      	cbnz	r3, 40837a <.LVL469>
                     ZSWAP32(hold)) != state->check) {
  408334:	ea4f 630b 	mov.w	r3, fp, lsl #24
                     state->flags ? hold :
  408338:	eb03 631b 	add.w	r3, r3, fp, lsr #24
                     ZSWAP32(hold)) != state->check) {
  40833c:	ea4f 221b 	mov.w	r2, fp, lsr #8
  408340:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
                     state->flags ? hold :
  408344:	4413      	add	r3, r2
                     ZSWAP32(hold)) != state->check) {
  408346:	ea4f 220b 	mov.w	r2, fp, lsl #8
  40834a:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
                     state->flags ? hold :
  40834e:	4413      	add	r3, r2
                if ((
  408350:	69b2      	ldr	r2, [r6, #24]
  408352:	4293      	cmp	r3, r2
  408354:	d013      	beq.n	40837e <.LVL469+0x4>
                    strm->msg = (char *)"incorrect data check";
  408356:	4b3a      	ldr	r3, [pc, #232]	; (408440 <.LVL486+0x8>)
  408358:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
  40835c:	f8c9 3018 	str.w	r3, [r9, #24]
                    state->mode = BAD;
  408360:	231d      	movs	r3, #29
  408362:	7033      	strb	r3, [r6, #0]
                    break;
  408364:	9b05      	ldr	r3, [sp, #20]
  408366:	9304      	str	r3, [sp, #16]
  408368:	f7ff b841 	b.w	4073ee <.LVL113>

0040836c <.LVL466>:
                        UPDATE(state->check, put - out, out);
  40836c:	460a      	mov	r2, r1
  40836e:	9b06      	ldr	r3, [sp, #24]
  408370:	1a59      	subs	r1, r3, r1

00408372 <.LVL467>:
  408372:	69b0      	ldr	r0, [r6, #24]
  408374:	f00a fe20 	bl	412fb8 <.LBE46>

00408378 <.LVL468>:
  408378:	e7d7      	b.n	40832a <.LVL464>

0040837a <.LVL469>:
  40837a:	465b      	mov	r3, fp
  40837c:	e7e8      	b.n	408350 <.LVL465+0x20>
  40837e:	9b05      	ldr	r3, [sp, #20]
  408380:	9304      	str	r3, [sp, #16]
                INITBITS();
  408382:	2400      	movs	r4, #0

00408384 <.LVL470>:
  408384:	46a3      	mov	fp, r4

00408386 <.LVL471>:
            state->mode = LENGTH;
  408386:	231b      	movs	r3, #27
  408388:	7033      	strb	r3, [r6, #0]
            if (state->wrap && state->flags) {
  40838a:	68b3      	ldr	r3, [r6, #8]
  40838c:	b1f3      	cbz	r3, 4083cc <.LVL477>
  40838e:	6933      	ldr	r3, [r6, #16]
  408390:	b1e3      	cbz	r3, 4083cc <.LVL477>
                NEEDBITS(32);
  408392:	2c1f      	cmp	r4, #31
  408394:	d80e      	bhi.n	4083b4 <.LVL475+0xc>
  408396:	2d00      	cmp	r5, #0
  408398:	f43f aaa2 	beq.w	4078e0 <.L124>
  40839c:	3d01      	subs	r5, #1
  40839e:	f81a 3b01 	ldrb.w	r3, [sl], #1

004083a2 <.LVL473>:
  4083a2:	40a3      	lsls	r3, r4
  4083a4:	449b      	add	fp, r3
  4083a6:	3408      	adds	r4, #8

004083a8 <.LVL475>:
  4083a8:	2c1f      	cmp	r4, #31
  4083aa:	d803      	bhi.n	4083b4 <.LVL475+0xc>
  4083ac:	2d00      	cmp	r5, #0
  4083ae:	d1f5      	bne.n	40839c <.LVL471+0x16>
  4083b0:	f7ff ba96 	b.w	4078e0 <.L124>
                if (hold != (state->total & 0xffffffffUL)) {
  4083b4:	69f3      	ldr	r3, [r6, #28]
  4083b6:	455b      	cmp	r3, fp
  4083b8:	d006      	beq.n	4083c8 <.LVL475+0x20>
                    strm->msg = (char *)"incorrect length check";
  4083ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4083bc:	f8c9 3018 	str.w	r3, [r9, #24]
                    state->mode = BAD;
  4083c0:	231d      	movs	r3, #29
  4083c2:	7033      	strb	r3, [r6, #0]
                    break;
  4083c4:	f7ff b813 	b.w	4073ee <.LVL113>
                INITBITS();
  4083c8:	2400      	movs	r4, #0

004083ca <.LVL476>:
  4083ca:	46a3      	mov	fp, r4

004083cc <.LVL477>:
            state->mode = DONE;
  4083cc:	231c      	movs	r3, #28
  4083ce:	7033      	strb	r3, [r6, #0]
            ret = Z_STREAM_END;
  4083d0:	2301      	movs	r3, #1
  4083d2:	9303      	str	r3, [sp, #12]
  4083d4:	f7ff ba84 	b.w	4078e0 <.L124>
            ret = Z_DATA_ERROR;
  4083d8:	f06f 0302 	mvn.w	r3, #2
  4083dc:	9303      	str	r3, [sp, #12]
  4083de:	f7ff ba7f 	b.w	4078e0 <.L124>

004083e2 <.LVL478>:
            INITBITS();
  4083e2:	2400      	movs	r4, #0
  4083e4:	46a3      	mov	fp, r4
  4083e6:	f7ff ba7b 	b.w	4078e0 <.L124>

004083ea <.LVL479>:
            state->mode = MEM;
  4083ea:	231e      	movs	r3, #30
  4083ec:	7033      	strb	r3, [r6, #0]
            return Z_MEM_ERROR;
  4083ee:	f06f 0303 	mvn.w	r3, #3
  4083f2:	9303      	str	r3, [sp, #12]

004083f4 <.LVL480>:
  4083f4:	f7ff badf 	b.w	4079b6 <.LVL227>

004083f8 <.LVL481>:
            UPDATE(state->check, strm->next_out - out, out);
  4083f8:	f8d9 100c 	ldr.w	r1, [r9, #12]
  4083fc:	4622      	mov	r2, r4
  4083fe:	1b09      	subs	r1, r1, r4
  408400:	69b0      	ldr	r0, [r6, #24]
  408402:	f00a fdd9 	bl	412fb8 <.LBE46>

00408406 <.LVL482>:
  408406:	f7ff bab1 	b.w	40796c <.LVL226>
                      (state->mode == LEN_ || state->mode == COPY_ ? 256 : 0);
  40840a:	2200      	movs	r2, #0
  40840c:	f7ff bac3 	b.w	407996 <.LVL226+0x2a>

00408410 <.LVL483>:
        return Z_STREAM_ERROR;
  408410:	f06f 0301 	mvn.w	r3, #1
  408414:	9303      	str	r3, [sp, #12]
  408416:	f7ff bace 	b.w	4079b6 <.LVL227>
  40841a:	f06f 0301 	mvn.w	r3, #1
  40841e:	9303      	str	r3, [sp, #12]
  408420:	f7ff bac9 	b.w	4079b6 <.LVL227>
  408424:	f06f 0301 	mvn.w	r3, #1
  408428:	9303      	str	r3, [sp, #12]
  40842a:	f7ff bac4 	b.w	4079b6 <.LVL227>

0040842e <.LVL484>:
            return Z_MEM_ERROR;
  40842e:	f06f 0303 	mvn.w	r3, #3
  408432:	9303      	str	r3, [sp, #12]
  408434:	f7ff babf 	b.w	4079b6 <.LVL227>

00408438 <.LVL486>:
    strm->data_type = state->bits + (state->last ? 64 : 0) +
  408438:	3380      	adds	r3, #128	; 0x80
                      (state->mode == LEN_ || state->mode == COPY_ ? 256 : 0);
  40843a:	2200      	movs	r2, #0
  40843c:	f7ff baab 	b.w	407996 <.LVL226+0x2a>
  408440:	00414f20 	.word	0x00414f20

Disassembly of section .rodata%65:

00408444 <.rodata%65>:
  408444:	50434553 	.word	0x50434553
  408448:	52323131 	.word	0x52323131
  40844c:	00000031 	.word	0x00000031
  408450:	43374244 	.word	0x43374244
  408454:	46424132 	.word	0x46424132
  408458:	33453236 	.word	0x33453236
  40845c:	36364535 	.word	0x36364535
  408460:	36373038 	.word	0x36373038
  408464:	44414542 	.word	0x44414542
  408468:	42383032 	.word	0x42383032
  40846c:	00000000 	.word	0x00000000
  408470:	43374244 	.word	0x43374244
  408474:	46424132 	.word	0x46424132
  408478:	33453236 	.word	0x33453236
  40847c:	36364535 	.word	0x36364535
  408480:	36373038 	.word	0x36373038
  408484:	44414542 	.word	0x44414542
  408488:	38383032 	.word	0x38383032
  40848c:	00000000 	.word	0x00000000
  408490:	45393536 	.word	0x45393536
  408494:	41423846 	.word	0x41423846
  408498:	39333430 	.word	0x39333430
  40849c:	45453631 	.word	0x45453631
  4084a0:	39384544 	.word	0x39384544
  4084a4:	30373131 	.word	0x30373131
  4084a8:	32324232 	.word	0x32324232
  4084ac:	00000000 	.word	0x00000000
  4084b0:	43374244 	.word	0x43374244
  4084b4:	46424132 	.word	0x46424132
  4084b8:	33453236 	.word	0x33453236
  4084bc:	36374535 	.word	0x36374535
  4084c0:	46443832 	.word	0x46443832
  4084c4:	35364341 	.word	0x35364341
  4084c8:	35433136 	.word	0x35433136
  4084cc:	00000000 	.word	0x00000000
  4084d0:	37383439 	.word	0x37383439
  4084d4:	39393332 	.word	0x39393332
  4084d8:	35413539 	.word	0x35413539
  4084dc:	36374545 	.word	0x36374545
  4084e0:	46353542 	.word	0x46353542
  4084e4:	46324339 	.word	0x46324339
  4084e8:	00383930 	.word	0x00383930
  4084ec:	43393841 	.word	0x43393841
  4084f0:	46413545 	.word	0x46413545
  4084f4:	34323738 	.word	0x34323738
  4084f8:	32413043 	.word	0x32413043
  4084fc:	45304533 	.word	0x45304533
  408500:	37464630 	.word	0x37464630
  408504:	30303537 	.word	0x30303537
  408508:	00000000 	.word	0x00000000
  40850c:	50434553 	.word	0x50434553
  408510:	52383231 	.word	0x52383231
  408514:	00000031 	.word	0x00000031
  408518:	46464646 	.word	0x46464646
  40851c:	44464646 	.word	0x44464646
  408520:	46464646 	.word	0x46464646
  408524:	46464646 	.word	0x46464646
  408528:	46464646 	.word	0x46464646
  40852c:	46464646 	.word	0x46464646
  408530:	46464646 	.word	0x46464646
  408534:	46464646 	.word	0x46464646
  408538:	00000000 	.word	0x00000000
  40853c:	46464646 	.word	0x46464646
  408540:	44464646 	.word	0x44464646
  408544:	46464646 	.word	0x46464646
  408548:	46464646 	.word	0x46464646
  40854c:	46464646 	.word	0x46464646
  408550:	46464646 	.word	0x46464646
  408554:	46464646 	.word	0x46464646
  408558:	43464646 	.word	0x43464646
  40855c:	00000000 	.word	0x00000000
  408560:	35373845 	.word	0x35373845
  408564:	31433937 	.word	0x31433937
  408568:	39373031 	.word	0x39373031
  40856c:	44333446 	.word	0x44333446
  408570:	34323844 	.word	0x34323844
  408574:	43333939 	.word	0x43333939
  408578:	45454332 	.word	0x45454332
  40857c:	33444535 	.word	0x33444535
  408580:	00000000 	.word	0x00000000
  408584:	46464646 	.word	0x46464646
  408588:	45464646 	.word	0x45464646
  40858c:	30303030 	.word	0x30303030
  408590:	30303030 	.word	0x30303030
  408594:	33413537 	.word	0x33413537
  408598:	42314430 	.word	0x42314430
  40859c:	38333039 	.word	0x38333039
  4085a0:	35313141 	.word	0x35313141
  4085a4:	00000000 	.word	0x00000000
  4085a8:	46313631 	.word	0x46313631
  4085ac:	32353746 	.word	0x32353746
  4085b0:	39384238 	.word	0x39384238
  4085b4:	44324239 	.word	0x44324239
  4085b8:	38324330 	.word	0x38324330
  4085bc:	43373036 	.word	0x43373036
  4085c0:	43323541 	.word	0x43323541
  4085c4:	36384235 	.word	0x36384235
  4085c8:	00000000 	.word	0x00000000
  4085cc:	41354643 	.word	0x41354643
  4085d0:	39333843 	.word	0x39333843
  4085d4:	46414235 	.word	0x46414235
  4085d8:	33314245 	.word	0x33314245
  4085dc:	44323043 	.word	0x44323043
  4085e0:	32393241 	.word	0x32393241
  4085e4:	44454444 	.word	0x44454444
  4085e8:	33384137 	.word	0x33384137
  4085ec:	00000000 	.word	0x00000000
  4085f0:	50434553 	.word	0x50434553
  4085f4:	52303631 	.word	0x52303631
  4085f8:	00000031 	.word	0x00000031
  4085fc:	46464646 	.word	0x46464646
  408600:	46464646 	.word	0x46464646
  408604:	46464646 	.word	0x46464646
  408608:	46464646 	.word	0x46464646
  40860c:	46464646 	.word	0x46464646
  408610:	46464646 	.word	0x46464646
  408614:	46464646 	.word	0x46464646
  408618:	46464646 	.word	0x46464646
  40861c:	46464637 	.word	0x46464637
  408620:	46464646 	.word	0x46464646
  408624:	00000000 	.word	0x00000000
  408628:	46464646 	.word	0x46464646
  40862c:	46464646 	.word	0x46464646
  408630:	46464646 	.word	0x46464646
  408634:	46464646 	.word	0x46464646
  408638:	46464646 	.word	0x46464646
  40863c:	46464646 	.word	0x46464646
  408640:	46464646 	.word	0x46464646
  408644:	46464646 	.word	0x46464646
  408648:	46464637 	.word	0x46464637
  40864c:	43464646 	.word	0x43464646
  408650:	00000000 	.word	0x00000000
  408654:	37394331 	.word	0x37394331
  408658:	43464542 	.word	0x43464542
  40865c:	44423435 	.word	0x44423435
  408660:	42384137 	.word	0x42384137
  408664:	43413536 	.word	0x43413536
  408668:	46393846 	.word	0x46393846
  40866c:	34443138 	.word	0x34443138
  408670:	44413444 	.word	0x44413444
  408674:	35363543 	.word	0x35363543
  408678:	35344146 	.word	0x35344146
  40867c:	00000000 	.word	0x00000000
  408680:	30303031 	.word	0x30303031
  408684:	30303030 	.word	0x30303030
  408688:	30303030 	.word	0x30303030
  40868c:	30303030 	.word	0x30303030
  408690:	30303030 	.word	0x30303030
  408694:	43344631 	.word	0x43344631
  408698:	32394638 	.word	0x32394638
  40869c:	44454137 	.word	0x44454137
  4086a0:	37414333 	.word	0x37414333
  4086a4:	35323235 	.word	0x35323235
  4086a8:	00000037 	.word	0x00000037
  4086ac:	36394134 	.word	0x36394134
  4086b0:	38363542 	.word	0x38363542
  4086b4:	35464538 	.word	0x35464538
  4086b8:	38323337 	.word	0x38323337
  4086bc:	34363634 	.word	0x34363634
  4086c0:	39383936 	.word	0x39383936
  4086c4:	33433836 	.word	0x33433836
  4086c8:	39424238 	.word	0x39424238
  4086cc:	42433331 	.word	0x42433331
  4086d0:	32384346 	.word	0x32384346
  4086d4:	00000000 	.word	0x00000000
  4086d8:	36413332 	.word	0x36413332
  4086dc:	35353832 	.word	0x35353832
  4086e0:	38363133 	.word	0x38363133
  4086e4:	44373439 	.word	0x44373439
  4086e8:	43443935 	.word	0x43443935
  4086ec:	32313943 	.word	0x32313943
  4086f0:	33323430 	.word	0x33323430
  4086f4:	37333135 	.word	0x37333135
  4086f8:	35434137 	.word	0x35434137
  4086fc:	32334246 	.word	0x32334246
  408700:	00000000 	.word	0x00000000
  408704:	50434553 	.word	0x50434553
  408708:	52323931 	.word	0x52323931
  40870c:	00000031 	.word	0x00000031
  408710:	46464646 	.word	0x46464646
  408714:	46464646 	.word	0x46464646
  408718:	46464646 	.word	0x46464646
  40871c:	46464646 	.word	0x46464646
  408720:	46464646 	.word	0x46464646
  408724:	46464646 	.word	0x46464646
  408728:	46464646 	.word	0x46464646
  40872c:	45464646 	.word	0x45464646
  408730:	46464646 	.word	0x46464646
  408734:	46464646 	.word	0x46464646
  408738:	46464646 	.word	0x46464646
  40873c:	46464646 	.word	0x46464646
  408740:	00000000 	.word	0x00000000
  408744:	46464646 	.word	0x46464646
  408748:	46464646 	.word	0x46464646
  40874c:	46464646 	.word	0x46464646
  408750:	46464646 	.word	0x46464646
  408754:	46464646 	.word	0x46464646
  408758:	46464646 	.word	0x46464646
  40875c:	46464646 	.word	0x46464646
  408760:	45464646 	.word	0x45464646
  408764:	46464646 	.word	0x46464646
  408768:	46464646 	.word	0x46464646
  40876c:	46464646 	.word	0x46464646
  408770:	43464646 	.word	0x43464646
  408774:	00000000 	.word	0x00000000
  408778:	31323436 	.word	0x31323436
  40877c:	39313530 	.word	0x39313530
  408780:	43393545 	.word	0x43393545
  408784:	37453038 	.word	0x37453038
  408788:	37414630 	.word	0x37414630
  40878c:	42413945 	.word	0x42413945
  408790:	34323237 	.word	0x34323237
  408794:	39343033 	.word	0x39343033
  408798:	38424546 	.word	0x38424546
  40879c:	43454544 	.word	0x43454544
  4087a0:	36343143 	.word	0x36343143
  4087a4:	31423942 	.word	0x31423942
  4087a8:	00000000 	.word	0x00000000
  4087ac:	46464646 	.word	0x46464646
  4087b0:	46464646 	.word	0x46464646
  4087b4:	46464646 	.word	0x46464646
  4087b8:	46464646 	.word	0x46464646
  4087bc:	46464646 	.word	0x46464646
  4087c0:	46464646 	.word	0x46464646
  4087c4:	45443939 	.word	0x45443939
  4087c8:	36333846 	.word	0x36333846
  4087cc:	42363431 	.word	0x42363431
  4087d0:	31423943 	.word	0x31423943
  4087d4:	32443442 	.word	0x32443442
  4087d8:	31333832 	.word	0x31333832
  4087dc:	00000000 	.word	0x00000000
  4087e0:	44383831 	.word	0x44383831
  4087e4:	45303841 	.word	0x45303841
  4087e8:	30333042 	.word	0x30333042
  4087ec:	36463039 	.word	0x36463039
  4087f0:	46424337 	.word	0x46424337
  4087f4:	42453032 	.word	0x42453032
  4087f8:	31413334 	.word	0x31413334
  4087fc:	30303838 	.word	0x30303838
  408800:	46463446 	.word	0x46463446
  408804:	44464130 	.word	0x44464130
  408808:	46463238 	.word	0x46463238
  40880c:	32313031 	.word	0x32313031
  408810:	00000000 	.word	0x00000000
  408814:	32393137 	.word	0x32393137
  408818:	46353942 	.word	0x46353942
  40881c:	44384346 	.word	0x44384346
  408820:	36383741 	.word	0x36383741
  408824:	31303133 	.word	0x31303133
  408828:	36444531 	.word	0x36444531
  40882c:	43343242 	.word	0x43343242
  408830:	37354444 	.word	0x37354444
  408834:	37394633 	.word	0x37394633
  408838:	31314137 	.word	0x31314137
  40883c:	34393745 	.word	0x34393745
  408840:	00313138 	.word	0x00313138
  408844:	50434553 	.word	0x50434553
  408848:	52343232 	.word	0x52343232
  40884c:	00000031 	.word	0x00000031
  408850:	46464646 	.word	0x46464646
  408854:	46464646 	.word	0x46464646
  408858:	46464646 	.word	0x46464646
  40885c:	46464646 	.word	0x46464646
  408860:	46464646 	.word	0x46464646
  408864:	46464646 	.word	0x46464646
  408868:	46464646 	.word	0x46464646
  40886c:	46464646 	.word	0x46464646
  408870:	30303030 	.word	0x30303030
  408874:	30303030 	.word	0x30303030
  408878:	30303030 	.word	0x30303030
  40887c:	30303030 	.word	0x30303030
  408880:	30303030 	.word	0x30303030
  408884:	31303030 	.word	0x31303030
  408888:	00000000 	.word	0x00000000
  40888c:	46464646 	.word	0x46464646
  408890:	46464646 	.word	0x46464646
  408894:	46464646 	.word	0x46464646
  408898:	46464646 	.word	0x46464646
  40889c:	46464646 	.word	0x46464646
  4088a0:	46464646 	.word	0x46464646
  4088a4:	46464646 	.word	0x46464646
  4088a8:	45464646 	.word	0x45464646
  4088ac:	46464646 	.word	0x46464646
  4088b0:	46464646 	.word	0x46464646
  4088b4:	46464646 	.word	0x46464646
  4088b8:	46464646 	.word	0x46464646
  4088bc:	46464646 	.word	0x46464646
  4088c0:	45464646 	.word	0x45464646
  4088c4:	00000000 	.word	0x00000000
  4088c8:	35303442 	.word	0x35303442
  4088cc:	35384130 	.word	0x35384130
  4088d0:	34304330 	.word	0x34304330
  4088d4:	42413342 	.word	0x42413342
  4088d8:	31343546 	.word	0x31343546
  4088dc:	36353233 	.word	0x36353233
  4088e0:	34343035 	.word	0x34343035
  4088e4:	37423042 	.word	0x37423042
  4088e8:	46423744 	.word	0x46423744
  4088ec:	41423844 	.word	0x41423844
  4088f0:	42303732 	.word	0x42303732
  4088f4:	33343933 	.word	0x33343933
  4088f8:	35353332 	.word	0x35353332
  4088fc:	34424646 	.word	0x34424646
  408900:	00000000 	.word	0x00000000
  408904:	46464646 	.word	0x46464646
  408908:	46464646 	.word	0x46464646
  40890c:	46464646 	.word	0x46464646
  408910:	46464646 	.word	0x46464646
  408914:	46464646 	.word	0x46464646
  408918:	46464646 	.word	0x46464646
  40891c:	46464646 	.word	0x46464646
  408920:	32413631 	.word	0x32413631
  408924:	38423045 	.word	0x38423045
  408928:	45333046 	.word	0x45333046
  40892c:	44443331 	.word	0x44443331
  408930:	35343932 	.word	0x35343932
  408934:	43354335 	.word	0x43354335
  408938:	44334132 	.word	0x44334132
  40893c:	00000000 	.word	0x00000000
  408940:	45303742 	.word	0x45303742
  408944:	44424330 	.word	0x44424330
  408948:	34424236 	.word	0x34424236
  40894c:	46374642 	.word	0x46374642
  408950:	33313233 	.word	0x33313233
  408954:	39423039 	.word	0x39423039
  408958:	33304134 	.word	0x33304134
  40895c:	33443143 	.word	0x33443143
  408960:	32433635 	.word	0x32433635
  408964:	32323131 	.word	0x32323131
  408968:	32333433 	.word	0x32333433
  40896c:	36443038 	.word	0x36443038
  408970:	43353131 	.word	0x43353131
  408974:	31324431 	.word	0x31324431
  408978:	00000000 	.word	0x00000000
  40897c:	37334442 	.word	0x37334442
  408980:	38383336 	.word	0x38383336
  408984:	37463542 	.word	0x37463542
  408988:	42463332 	.word	0x42463332
  40898c:	32324334 	.word	0x32324334
  408990:	36454644 	.word	0x36454644
  408994:	33344443 	.word	0x33344443
  408998:	30413537 	.word	0x30413537
  40899c:	37304135 	.word	0x37304135
  4089a0:	34363734 	.word	0x34363734
  4089a4:	35443434 	.word	0x35443434
  4089a8:	39393138 	.word	0x39393138
  4089ac:	30303538 	.word	0x30303538
  4089b0:	34334537 	.word	0x34334537
  4089b4:	00000000 	.word	0x00000000
  4089b8:	4d495250 	.word	0x4d495250
  4089bc:	39333245 	.word	0x39333245
  4089c0:	00003156 	.word	0x00003156
  4089c4:	46464637 	.word	0x46464637
  4089c8:	46464646 	.word	0x46464646
  4089cc:	46464646 	.word	0x46464646
  4089d0:	46464646 	.word	0x46464646
  4089d4:	46464646 	.word	0x46464646
  4089d8:	46464646 	.word	0x46464646
  4089dc:	46464637 	.word	0x46464637
  4089e0:	46464646 	.word	0x46464646
  4089e4:	46464646 	.word	0x46464646
  4089e8:	30303038 	.word	0x30303038
  4089ec:	30303030 	.word	0x30303030
  4089f0:	30303030 	.word	0x30303030
  4089f4:	46464637 	.word	0x46464637
  4089f8:	46464646 	.word	0x46464646
  4089fc:	46464646 	.word	0x46464646
  408a00:	00000000 	.word	0x00000000
  408a04:	46464637 	.word	0x46464637
  408a08:	46464646 	.word	0x46464646
  408a0c:	46464646 	.word	0x46464646
  408a10:	46464646 	.word	0x46464646
  408a14:	46464646 	.word	0x46464646
  408a18:	46464646 	.word	0x46464646
  408a1c:	46464637 	.word	0x46464637
  408a20:	46464646 	.word	0x46464646
  408a24:	46464646 	.word	0x46464646
  408a28:	30303038 	.word	0x30303038
  408a2c:	30303030 	.word	0x30303030
  408a30:	30303030 	.word	0x30303030
  408a34:	46464637 	.word	0x46464637
  408a38:	46464646 	.word	0x46464646
  408a3c:	43464646 	.word	0x43464646
  408a40:	00000000 	.word	0x00000000
  408a44:	31304236 	.word	0x31304236
  408a48:	42334336 	.word	0x42334336
  408a4c:	31464344 	.word	0x31464344
  408a50:	31343938 	.word	0x31343938
  408a54:	36443044 	.word	0x36443044
  408a58:	32393435 	.word	0x32393435
  408a5c:	35373431 	.word	0x35373431
  408a60:	31374143 	.word	0x31374143
  408a64:	42443941 	.word	0x42443941
  408a68:	32424632 	.word	0x32424632
  408a6c:	44314437 	.word	0x44314437
  408a70:	39373733 	.word	0x39373733
  408a74:	35383136 	.word	0x35383136
  408a78:	34393243 	.word	0x34393243
  408a7c:	41304332 	.word	0x41304332
  408a80:	00000000 	.word	0x00000000
  408a84:	46464637 	.word	0x46464637
  408a88:	46464646 	.word	0x46464646
  408a8c:	46464646 	.word	0x46464646
  408a90:	46464646 	.word	0x46464646
  408a94:	46464646 	.word	0x46464646
  408a98:	46464646 	.word	0x46464646
  408a9c:	46464637 	.word	0x46464637
  408aa0:	45394646 	.word	0x45394646
  408aa4:	41394535 	.word	0x41394535
  408aa8:	44354639 	.word	0x44354639
  408aac:	31373039 	.word	0x31373039
  408ab0:	31444246 	.word	0x31444246
  408ab4:	36323235 	.word	0x36323235
  408ab8:	30393838 	.word	0x30393838
  408abc:	42304439 	.word	0x42304439
  408ac0:	00000000 	.word	0x00000000
  408ac4:	41464630 	.word	0x41464630
  408ac8:	43333639 	.word	0x43333639
  408acc:	38414344 	.word	0x38414344
  408ad0:	43363138 	.word	0x43363138
  408ad4:	33334343 	.word	0x33334343
  408ad8:	34363842 	.word	0x34363842
  408adc:	44454232 	.word	0x44454232
  408ae0:	35303946 	.word	0x35303946
  408ae4:	33443343 	.word	0x33443343
  408ae8:	37353835 	.word	0x37353835
  408aec:	46334433 	.word	0x46334433
  408af0:	42463732 	.word	0x42463732
  408af4:	42334442 	.word	0x42334442
  408af8:	39424333 	.word	0x39424333
  408afc:	46414141 	.word	0x46414141
  408b00:	00000000 	.word	0x00000000
  408b04:	42454437 	.word	0x42454437
  408b08:	34453845 	.word	0x34453845
  408b0c:	41303945 	.word	0x41303945
  408b10:	45414435 	.word	0x45414435
  408b14:	30344536 	.word	0x30344536
  408b18:	41433435 	.word	0x41433435
  408b1c:	42303335 	.word	0x42303335
  408b20:	36343041 	.word	0x36343041
  408b24:	33423435 	.word	0x33423435
  408b28:	38313836 	.word	0x38313836
  408b2c:	32324543 	.word	0x32324543
  408b30:	39334236 	.word	0x39334236
  408b34:	42434346 	.word	0x42434346
  408b38:	32304237 	.word	0x32304237
  408b3c:	45413146 	.word	0x45413146
  408b40:	00000000 	.word	0x00000000
  408b44:	50434553 	.word	0x50434553
  408b48:	52363532 	.word	0x52363532
  408b4c:	00000031 	.word	0x00000031
  408b50:	46464646 	.word	0x46464646
  408b54:	46464646 	.word	0x46464646
  408b58:	30303030 	.word	0x30303030
  408b5c:	31303030 	.word	0x31303030
  408b60:	30303030 	.word	0x30303030
  408b64:	30303030 	.word	0x30303030
  408b68:	30303030 	.word	0x30303030
  408b6c:	30303030 	.word	0x30303030
  408b70:	30303030 	.word	0x30303030
  408b74:	30303030 	.word	0x30303030
  408b78:	46464646 	.word	0x46464646
  408b7c:	46464646 	.word	0x46464646
  408b80:	46464646 	.word	0x46464646
  408b84:	46464646 	.word	0x46464646
  408b88:	46464646 	.word	0x46464646
  408b8c:	46464646 	.word	0x46464646
  408b90:	00000000 	.word	0x00000000
  408b94:	46464646 	.word	0x46464646
  408b98:	46464646 	.word	0x46464646
  408b9c:	30303030 	.word	0x30303030
  408ba0:	31303030 	.word	0x31303030
  408ba4:	30303030 	.word	0x30303030
  408ba8:	30303030 	.word	0x30303030
  408bac:	30303030 	.word	0x30303030
  408bb0:	30303030 	.word	0x30303030
  408bb4:	30303030 	.word	0x30303030
  408bb8:	30303030 	.word	0x30303030
  408bbc:	46464646 	.word	0x46464646
  408bc0:	46464646 	.word	0x46464646
  408bc4:	46464646 	.word	0x46464646
  408bc8:	46464646 	.word	0x46464646
  408bcc:	46464646 	.word	0x46464646
  408bd0:	43464646 	.word	0x43464646
  408bd4:	00000000 	.word	0x00000000
  408bd8:	36434135 	.word	0x36434135
  408bdc:	38443533 	.word	0x38443533
  408be0:	41334141 	.word	0x41334141
  408be4:	37453339 	.word	0x37453339
  408be8:	42453342 	.word	0x42453342
  408bec:	35354442 	.word	0x35354442
  408bf0:	38393637 	.word	0x38393637
  408bf4:	43423638 	.word	0x43423638
  408bf8:	44313536 	.word	0x44313536
  408bfc:	30423630 	.word	0x30423630
  408c00:	33354343 	.word	0x33354343
  408c04:	36463042 	.word	0x36463042
  408c08:	45434233 	.word	0x45434233
  408c0c:	45334333 	.word	0x45334333
  408c10:	32443732 	.word	0x32443732
  408c14:	42343036 	.word	0x42343036
  408c18:	00000000 	.word	0x00000000
  408c1c:	46464646 	.word	0x46464646
  408c20:	46464646 	.word	0x46464646
  408c24:	30303030 	.word	0x30303030
  408c28:	30303030 	.word	0x30303030
  408c2c:	46464646 	.word	0x46464646
  408c30:	46464646 	.word	0x46464646
  408c34:	46464646 	.word	0x46464646
  408c38:	46464646 	.word	0x46464646
  408c3c:	36454342 	.word	0x36454342
  408c40:	44414146 	.word	0x44414146
  408c44:	37313741 	.word	0x37313741
  408c48:	34384539 	.word	0x34384539
  408c4c:	39423346 	.word	0x39423346
  408c50:	32434143 	.word	0x32434143
  408c54:	33364346 	.word	0x33364346
  408c58:	31353532 	.word	0x31353532
  408c5c:	00000000 	.word	0x00000000
  408c60:	37314236 	.word	0x37314236
  408c64:	32463144 	.word	0x32463144
  408c68:	43323145 	.word	0x43323145
  408c6c:	37343234 	.word	0x37343234
  408c70:	43423846 	.word	0x43423846
  408c74:	35453645 	.word	0x35453645
  408c78:	34413336 	.word	0x34413336
  408c7c:	32463034 	.word	0x32463034
  408c80:	33303737 	.word	0x33303737
  408c84:	31384437 	.word	0x31384437
  408c88:	42454432 	.word	0x42454432
  408c8c:	30413333 	.word	0x30413333
  408c90:	31413446 	.word	0x31413446
  408c94:	35343933 	.word	0x35343933
  408c98:	38393844 	.word	0x38393844
  408c9c:	36393243 	.word	0x36393243
  408ca0:	00000000 	.word	0x00000000
  408ca4:	33454634 	.word	0x33454634
  408ca8:	32453234 	.word	0x32453234
  408cac:	41314546 	.word	0x41314546
  408cb0:	42394637 	.word	0x42394637
  408cb4:	37454538 	.word	0x37454538
  408cb8:	41344245 	.word	0x41344245
  408cbc:	46304337 	.word	0x46304337
  408cc0:	36314539 	.word	0x36314539
  408cc4:	45434232 	.word	0x45434232
  408cc8:	37353333 	.word	0x37353333
  408ccc:	31334236 	.word	0x31334236
  408cd0:	45434535 	.word	0x45434535
  408cd4:	36424243 	.word	0x36424243
  408cd8:	38363034 	.word	0x38363034
  408cdc:	46423733 	.word	0x46423733
  408ce0:	35463135 	.word	0x35463135
  408ce4:	00000000 	.word	0x00000000
  408ce8:	50434553 	.word	0x50434553
  408cec:	52343833 	.word	0x52343833
  408cf0:	00000031 	.word	0x00000031
  408cf4:	46464646 	.word	0x46464646
  408cf8:	46464646 	.word	0x46464646
  408cfc:	46464646 	.word	0x46464646
  408d00:	46464646 	.word	0x46464646
  408d04:	46464646 	.word	0x46464646
  408d08:	46464646 	.word	0x46464646
  408d0c:	46464646 	.word	0x46464646
  408d10:	46464646 	.word	0x46464646
  408d14:	46464646 	.word	0x46464646
  408d18:	46464646 	.word	0x46464646
  408d1c:	46464646 	.word	0x46464646
  408d20:	46464646 	.word	0x46464646
  408d24:	46464646 	.word	0x46464646
  408d28:	46464646 	.word	0x46464646
  408d2c:	46464646 	.word	0x46464646
  408d30:	45464646 	.word	0x45464646
  408d34:	46464646 	.word	0x46464646
  408d38:	46464646 	.word	0x46464646
  408d3c:	30303030 	.word	0x30303030
  408d40:	30303030 	.word	0x30303030
  408d44:	30303030 	.word	0x30303030
  408d48:	30303030 	.word	0x30303030
  408d4c:	46464646 	.word	0x46464646
  408d50:	46464646 	.word	0x46464646
  408d54:	00000000 	.word	0x00000000
  408d58:	46464646 	.word	0x46464646
  408d5c:	46464646 	.word	0x46464646
  408d60:	46464646 	.word	0x46464646
  408d64:	46464646 	.word	0x46464646
  408d68:	46464646 	.word	0x46464646
  408d6c:	46464646 	.word	0x46464646
  408d70:	46464646 	.word	0x46464646
  408d74:	46464646 	.word	0x46464646
  408d78:	46464646 	.word	0x46464646
  408d7c:	46464646 	.word	0x46464646
  408d80:	46464646 	.word	0x46464646
  408d84:	46464646 	.word	0x46464646
  408d88:	46464646 	.word	0x46464646
  408d8c:	46464646 	.word	0x46464646
  408d90:	46464646 	.word	0x46464646
  408d94:	45464646 	.word	0x45464646
  408d98:	46464646 	.word	0x46464646
  408d9c:	46464646 	.word	0x46464646
  408da0:	30303030 	.word	0x30303030
  408da4:	30303030 	.word	0x30303030
  408da8:	30303030 	.word	0x30303030
  408dac:	30303030 	.word	0x30303030
  408db0:	46464646 	.word	0x46464646
  408db4:	43464646 	.word	0x43464646
  408db8:	00000000 	.word	0x00000000
  408dbc:	31333342 	.word	0x31333342
  408dc0:	37414632 	.word	0x37414632
  408dc4:	45333245 	.word	0x45333245
  408dc8:	34453745 	.word	0x34453745
  408dcc:	45383839 	.word	0x45383839
  408dd0:	42363530 	.word	0x42363530
  408dd4:	38463345 	.word	0x38463345
  408dd8:	39314432 	.word	0x39314432
  408ddc:	44313831 	.word	0x44313831
  408de0:	45364339 	.word	0x45364339
  408de4:	31384546 	.word	0x31384546
  408de8:	32313134 	.word	0x32313134
  408dec:	34313330 	.word	0x34313330
  408df0:	46383830 	.word	0x46383830
  408df4:	33313035 	.word	0x33313035
  408df8:	41353738 	.word	0x41353738
  408dfc:	36353643 	.word	0x36353643
  408e00:	44383933 	.word	0x44383933
  408e04:	45324138 	.word	0x45324138
  408e08:	44393144 	.word	0x44393144
  408e0c:	35384132 	.word	0x35384132
  408e10:	44453843 	.word	0x44453843
  408e14:	43453344 	.word	0x43453344
  408e18:	46454132 	.word	0x46454132
  408e1c:	00000000 	.word	0x00000000
  408e20:	46464646 	.word	0x46464646
  408e24:	46464646 	.word	0x46464646
  408e28:	46464646 	.word	0x46464646
  408e2c:	46464646 	.word	0x46464646
  408e30:	46464646 	.word	0x46464646
  408e34:	46464646 	.word	0x46464646
  408e38:	46464646 	.word	0x46464646
  408e3c:	46464646 	.word	0x46464646
  408e40:	46464646 	.word	0x46464646
  408e44:	46464646 	.word	0x46464646
  408e48:	46464646 	.word	0x46464646
  408e4c:	46464646 	.word	0x46464646
  408e50:	33363743 	.word	0x33363743
  408e54:	31384434 	.word	0x31384434
  408e58:	37333446 	.word	0x37333446
  408e5c:	46444432 	.word	0x46444432
  408e60:	41313835 	.word	0x41313835
  408e64:	32424430 	.word	0x32424430
  408e68:	30423834 	.word	0x30423834
  408e6c:	41373741 	.word	0x41373741
  408e70:	43454345 	.word	0x43454345
  408e74:	41363931 	.word	0x41363931
  408e78:	35434343 	.word	0x35434343
  408e7c:	33373932 	.word	0x33373932
  408e80:	00000000 	.word	0x00000000
  408e84:	37384141 	.word	0x37384141
  408e88:	32324143 	.word	0x32324143
  408e8c:	42384542 	.word	0x42384542
  408e90:	37333530 	.word	0x37333530
  408e94:	31424538 	.word	0x31424538
  408e98:	45313743 	.word	0x45313743
  408e9c:	30323346 	.word	0x30323346
  408ea0:	34374441 	.word	0x34374441
  408ea4:	44314536 	.word	0x44314536
  408ea8:	32364233 	.word	0x32364233
  408eac:	37414238 	.word	0x37414238
  408eb0:	38394239 	.word	0x38394239
  408eb4:	37463935 	.word	0x37463935
  408eb8:	30453134 	.word	0x30453134
  408ebc:	34353238 	.word	0x34353238
  408ec0:	38334132 	.word	0x38334132
  408ec4:	32303535 	.word	0x32303535
  408ec8:	44353246 	.word	0x44353246
  408ecc:	35354642 	.word	0x35354642
  408ed0:	43363932 	.word	0x43363932
  408ed4:	34354133 	.word	0x34354133
  408ed8:	38334535 	.word	0x38334535
  408edc:	36373237 	.word	0x36373237
  408ee0:	37424130 	.word	0x37424130
  408ee4:	00000000 	.word	0x00000000
  408ee8:	37313633 	.word	0x37313633
  408eec:	41344544 	.word	0x41344544
  408ef0:	36323639 	.word	0x36323639
  408ef4:	46364332 	.word	0x46364332
  408ef8:	45394435 	.word	0x45394435
  408efc:	46423839 	.word	0x46423839
  408f00:	32393239 	.word	0x32393239
  408f04:	39324344 	.word	0x39324344
  408f08:	34463846 	.word	0x34463846
  408f0c:	44424431 	.word	0x44424431
  408f10:	41393832 	.word	0x41393832
  408f14:	43373431 	.word	0x43373431
  408f18:	41443945 	.word	0x41443945
  408f1c:	33313133 	.word	0x33313133
  408f20:	30463542 	.word	0x30463542
  408f24:	30433842 	.word	0x30433842
  408f28:	30364130 	.word	0x30364130
  408f2c:	45433142 	.word	0x45433142
  408f30:	45374431 	.word	0x45374431
  408f34:	44393138 	.word	0x44393138
  408f38:	33344137 	.word	0x33344137
  408f3c:	43374431 	.word	0x43374431
  408f40:	41453039 	.word	0x41453039
  408f44:	46354530 	.word	0x46354530
  408f48:	00000000 	.word	0x00000000
  408f4c:	50434553 	.word	0x50434553
  408f50:	52313235 	.word	0x52313235
  408f54:	00000031 	.word	0x00000031
  408f58:	46464631 	.word	0x46464631
  408f5c:	46464646 	.word	0x46464646
  408f60:	46464646 	.word	0x46464646
  408f64:	46464646 	.word	0x46464646
  408f68:	46464646 	.word	0x46464646
  408f6c:	46464646 	.word	0x46464646
  408f70:	46464646 	.word	0x46464646
  408f74:	46464646 	.word	0x46464646
  408f78:	46464646 	.word	0x46464646
  408f7c:	46464646 	.word	0x46464646
  408f80:	46464646 	.word	0x46464646
  408f84:	46464646 	.word	0x46464646
  408f88:	46464646 	.word	0x46464646
  408f8c:	46464646 	.word	0x46464646
  408f90:	46464646 	.word	0x46464646
  408f94:	46464646 	.word	0x46464646
  408f98:	46464646 	.word	0x46464646
  408f9c:	46464646 	.word	0x46464646
  408fa0:	46464646 	.word	0x46464646
  408fa4:	46464646 	.word	0x46464646
  408fa8:	46464646 	.word	0x46464646
  408fac:	46464646 	.word	0x46464646
  408fb0:	46464646 	.word	0x46464646
  408fb4:	46464646 	.word	0x46464646
  408fb8:	46464646 	.word	0x46464646
  408fbc:	46464646 	.word	0x46464646
  408fc0:	46464646 	.word	0x46464646
  408fc4:	46464646 	.word	0x46464646
  408fc8:	46464646 	.word	0x46464646
  408fcc:	46464646 	.word	0x46464646
  408fd0:	46464646 	.word	0x46464646
  408fd4:	46464646 	.word	0x46464646
  408fd8:	00464646 	.word	0x00464646
  408fdc:	46464631 	.word	0x46464631
  408fe0:	46464646 	.word	0x46464646
  408fe4:	46464646 	.word	0x46464646
  408fe8:	46464646 	.word	0x46464646
  408fec:	46464646 	.word	0x46464646
  408ff0:	46464646 	.word	0x46464646
  408ff4:	46464646 	.word	0x46464646
  408ff8:	46464646 	.word	0x46464646
  408ffc:	46464646 	.word	0x46464646
  409000:	46464646 	.word	0x46464646
  409004:	46464646 	.word	0x46464646
  409008:	46464646 	.word	0x46464646
  40900c:	46464646 	.word	0x46464646
  409010:	46464646 	.word	0x46464646
  409014:	46464646 	.word	0x46464646
  409018:	46464646 	.word	0x46464646
  40901c:	46464646 	.word	0x46464646
  409020:	46464646 	.word	0x46464646
  409024:	46464646 	.word	0x46464646
  409028:	46464646 	.word	0x46464646
  40902c:	46464646 	.word	0x46464646
  409030:	46464646 	.word	0x46464646
  409034:	46464646 	.word	0x46464646
  409038:	46464646 	.word	0x46464646
  40903c:	46464646 	.word	0x46464646
  409040:	46464646 	.word	0x46464646
  409044:	46464646 	.word	0x46464646
  409048:	46464646 	.word	0x46464646
  40904c:	46464646 	.word	0x46464646
  409050:	46464646 	.word	0x46464646
  409054:	46464646 	.word	0x46464646
  409058:	46464646 	.word	0x46464646
  40905c:	00434646 	.word	0x00434646
  409060:	35393135 	.word	0x35393135
  409064:	39424533 	.word	0x39424533
  409068:	45383136 	.word	0x45383136
  40906c:	41394331 	.word	0x41394331
  409070:	32394631 	.word	0x32394631
  409074:	31324139 	.word	0x31324139
  409078:	36423041 	.word	0x36423041
  40907c:	30343538 	.word	0x30343538
  409080:	32414545 	.word	0x32414545
  409084:	32374144 	.word	0x32374144
  409088:	39394235 	.word	0x39394235
  40908c:	35313342 	.word	0x35313342
  409090:	38423346 	.word	0x38423346
  409094:	39383442 	.word	0x39383442
  409098:	45383139 	.word	0x45383139
  40909c:	39303146 	.word	0x39303146
  4090a0:	36353145 	.word	0x36353145
  4090a4:	39333931 	.word	0x39333931
  4090a8:	43453135 	.word	0x43453135
  4090ac:	33394537 	.word	0x33394537
  4090b0:	36314237 	.word	0x36314237
  4090b4:	30433235 	.word	0x30433235
  4090b8:	42334442 	.word	0x42334442
  4090bc:	46423142 	.word	0x46423142
  4090c0:	35333730 	.word	0x35333730
  4090c4:	46443337 	.word	0x46443337
  4090c8:	44333838 	.word	0x44333838
  4090cc:	34334332 	.word	0x34334332
  4090d0:	46453146 	.word	0x46453146
  4090d4:	46313534 	.word	0x46313534
  4090d8:	42363444 	.word	0x42363444
  4090dc:	46333035 	.word	0x46333035
  4090e0:	00003030 	.word	0x00003030
  4090e4:	46464631 	.word	0x46464631
  4090e8:	46464646 	.word	0x46464646
  4090ec:	46464646 	.word	0x46464646
  4090f0:	46464646 	.word	0x46464646
  4090f4:	46464646 	.word	0x46464646
  4090f8:	46464646 	.word	0x46464646
  4090fc:	46464646 	.word	0x46464646
  409100:	46464646 	.word	0x46464646
  409104:	46464646 	.word	0x46464646
  409108:	46464646 	.word	0x46464646
  40910c:	46464646 	.word	0x46464646
  409110:	46464646 	.word	0x46464646
  409114:	46464646 	.word	0x46464646
  409118:	46464646 	.word	0x46464646
  40911c:	46464646 	.word	0x46464646
  409120:	46464646 	.word	0x46464646
  409124:	35414646 	.word	0x35414646
  409128:	38363831 	.word	0x38363831
  40912c:	42333837 	.word	0x42333837
  409130:	39463246 	.word	0x39463246
  409134:	37423636 	.word	0x37423636
  409138:	30434346 	.word	0x30434346
  40913c:	46383431 	.word	0x46383431
  409140:	41393037 	.word	0x41393037
  409144:	33304435 	.word	0x33304435
  409148:	43354242 	.word	0x43354242
  40914c:	38384239 	.word	0x38384239
  409150:	34433939 	.word	0x34433939
  409154:	42454137 	.word	0x42454137
  409158:	42463642 	.word	0x42463642
  40915c:	39453137 	.word	0x39453137
  409160:	36383331 	.word	0x36383331
  409164:	00393034 	.word	0x00393034
  409168:	35383643 	.word	0x35383643
  40916c:	36304538 	.word	0x36304538
  409170:	34303742 	.word	0x34303742
  409174:	39453430 	.word	0x39453430
  409178:	45394443 	.word	0x45394443
  40917c:	42434533 	.word	0x42434533
  409180:	33323636 	.word	0x33323636
  409184:	34423539 	.word	0x34423539
  409188:	43393234 	.word	0x43393234
  40918c:	31383436 	.word	0x31383436
  409190:	35303933 	.word	0x35303933
  409194:	35424633 	.word	0x35424633
  409198:	38463132 	.word	0x38463132
  40919c:	46413832 	.word	0x46413832
  4091a0:	42363036 	.word	0x42363036
  4091a4:	44334434 	.word	0x44334434
  4091a8:	31414142 	.word	0x31414142
  4091ac:	45354234 	.word	0x45354234
  4091b0:	46453737 	.word	0x46453737
  4091b4:	39353745 	.word	0x39353745
  4091b8:	45463832 	.word	0x45463832
  4091bc:	31434431 	.word	0x31434431
  4091c0:	32413732 	.word	0x32413732
  4091c4:	38414646 	.word	0x38414646
  4091c8:	33334544 	.word	0x33334544
  4091cc:	33423834 	.word	0x33423834
  4091d0:	35383143 	.word	0x35383143
  4091d4:	32344136 	.word	0x32344136
  4091d8:	39464239 	.word	0x39464239
  4091dc:	45374537 	.word	0x45374537
  4091e0:	32433133 	.word	0x32433133
  4091e4:	44423545 	.word	0x44423545
  4091e8:	00003636 	.word	0x00003636
  4091ec:	33383131 	.word	0x33383131
  4091f0:	36393239 	.word	0x36393239
  4091f4:	39383741 	.word	0x39383741
  4091f8:	43423341 	.word	0x43423341
  4091fc:	35343030 	.word	0x35343030
  409200:	35413843 	.word	0x35413843
  409204:	32344246 	.word	0x32344246
  409208:	31443743 	.word	0x31443743
  40920c:	39394442 	.word	0x39394442
  409210:	34354638 	.word	0x34354638
  409214:	35393434 	.word	0x35393434
  409218:	34423937 	.word	0x34423937
  40921c:	31383634 	.word	0x31383634
  409220:	42464137 	.word	0x42464137
  409224:	32373144 	.word	0x32373144
  409228:	36453337 	.word	0x36453337
  40922c:	39433236 	.word	0x39433236
  409230:	37454537 	.word	0x37454537
  409234:	35393932 	.word	0x35393932
  409238:	32344645 	.word	0x32344645
  40923c:	43303436 	.word	0x43303436
  409240:	42303535 	.word	0x42303535
  409244:	33313039 	.word	0x33313039
  409248:	30444146 	.word	0x30444146
  40924c:	33313637 	.word	0x33313637
  409250:	37433335 	.word	0x37433335
  409254:	41363830 	.word	0x41363830
  409258:	43323732 	.word	0x43323732
  40925c:	38303432 	.word	0x38303432
  409260:	39454238 	.word	0x39454238
  409264:	39363734 	.word	0x39363734
  409268:	36314446 	.word	0x36314446
  40926c:	00303536 	.word	0x00303536

Disassembly of section .dinit%66:

00409270 <.dinit>:
  409270:	20417708 	.word	0x20417708
  409274:	0000001c 	.word	0x0000001c
  409278:	00000000 	.word	0x00000000
  40927c:	20417828 	.word	0x20417828
  409280:	00000008 	.word	0x00000008
  409284:	00000001 	.word	0x00000001
  409288:	00000000 	.word	0x00000000
  40928c:	204176e8 	.word	0x204176e8
  409290:	20416854 	.word	0x20416854
  409294:	00000004 	.word	0x00000004
  409298:	00000001 	.word	0x00000001
  40929c:	00000400 	.word	0x00000400
  4092a0:	20417830 	.word	0x20417830
  4092a4:	00000008 	.word	0x00000008
  4092a8:	00000001 	.word	0x00000001
  4092ac:	20417724 	.word	0x20417724
  4092b0:	00000017 	.word	0x00000017
  4092b4:	20417724 	.word	0x20417724
  4092b8:	0000001c 	.word	0x0000001c
  4092bc:	00000001 	.word	0x00000001
  4092c0:	0041edf1 	.word	0x0041edf1
  4092c4:	0041edcd 	.word	0x0041edcd
  4092c8:	0041ef89 	.word	0x0041ef89
  4092cc:	0041edd9 	.word	0x0041edd9
  4092d0:	0041edb5 	.word	0x0041edb5
  4092d4:	0041edc1 	.word	0x0041edc1
  4092d8:	0041ede5 	.word	0x0041ede5
  4092dc:	20400000 	.word	0x20400000
  4092e0:	0000000c 	.word	0x0000000c
  4092e4:	00000000 	.word	0x00000000
  4092e8:	20417838 	.word	0x20417838
  4092ec:	00000004 	.word	0x00000004
  4092f0:	00000000 	.word	0x00000000
  4092f4:	2041783c 	.word	0x2041783c
  4092f8:	00000004 	.word	0x00000004
  4092fc:	00000000 	.word	0x00000000
  409300:	20417840 	.word	0x20417840
  409304:	00000004 	.word	0x00000004
  409308:	00000000 	.word	0x00000000
  40930c:	20417534 	.word	0x20417534
  409310:	00000064 	.word	0x00000064
  409314:	00000000 	.word	0x00000000
  409318:	20417844 	.word	0x20417844
  40931c:	00000004 	.word	0x00000004
  409320:	00000000 	.word	0x00000000
  409324:	20417848 	.word	0x20417848
  409328:	00000004 	.word	0x00000004
  40932c:	00000000 	.word	0x00000000
  409330:	2041784c 	.word	0x2041784c
  409334:	00000004 	.word	0x00000004
  409338:	00000000 	.word	0x00000000
  40933c:	20417850 	.word	0x20417850
  409340:	00000004 	.word	0x00000004
  409344:	00000000 	.word	0x00000000
  409348:	20417854 	.word	0x20417854
  40934c:	00000004 	.word	0x00000004
  409350:	00000000 	.word	0x00000000
  409354:	20417858 	.word	0x20417858
  409358:	00000004 	.word	0x00000004
  40935c:	00000000 	.word	0x00000000
  409360:	20417740 	.word	0x20417740
  409364:	00000014 	.word	0x00000014
  409368:	00000000 	.word	0x00000000
  40936c:	20417754 	.word	0x20417754
  409370:	00000014 	.word	0x00000014
  409374:	00000000 	.word	0x00000000
  409378:	2041785c 	.word	0x2041785c
  40937c:	00000004 	.word	0x00000004
  409380:	00000000 	.word	0x00000000
  409384:	20417860 	.word	0x20417860
  409388:	00000004 	.word	0x00000004
  40938c:	00000000 	.word	0x00000000
  409390:	20417864 	.word	0x20417864
  409394:	00000004 	.word	0x00000004
  409398:	00000000 	.word	0x00000000
  40939c:	20417768 	.word	0x20417768
  4093a0:	00000014 	.word	0x00000014
  4093a4:	00000000 	.word	0x00000000
  4093a8:	20417868 	.word	0x20417868
  4093ac:	00000004 	.word	0x00000004
  4093b0:	00000000 	.word	0x00000000
  4093b4:	2041777c 	.word	0x2041777c
  4093b8:	00000014 	.word	0x00000014
  4093bc:	00000000 	.word	0x00000000
  4093c0:	20417790 	.word	0x20417790
  4093c4:	00000014 	.word	0x00000014
  4093c8:	00000000 	.word	0x00000000
  4093cc:	2041786c 	.word	0x2041786c
  4093d0:	00000004 	.word	0x00000004
  4093d4:	00000000 	.word	0x00000000
  4093d8:	20417870 	.word	0x20417870
  4093dc:	00000004 	.word	0x00000004
  4093e0:	00000000 	.word	0x00000000
  4093e4:	20417874 	.word	0x20417874
  4093e8:	00000004 	.word	0x00000004
  4093ec:	00000000 	.word	0x00000000
  4093f0:	2040c854 	.word	0x2040c854
  4093f4:	0000a000 	.word	0x0000a000
  4093f8:	00000000 	.word	0x00000000
  4093fc:	20417878 	.word	0x20417878
  409400:	00000004 	.word	0x00000004
  409404:	00000000 	.word	0x00000000
  409408:	2041787c 	.word	0x2041787c
  40940c:	00000004 	.word	0x00000004
  409410:	00000001 	.word	0x00000001
  409414:	aaaaaaaa 	.word	0xaaaaaaaa
  409418:	20400054 	.word	0x20400054
  40941c:	0000c800 	.word	0x0000c800
  409420:	00000000 	.word	0x00000000
  409424:	20417880 	.word	0x20417880
  409428:	00000004 	.word	0x00000004
  40942c:	00000000 	.word	0x00000000
  409430:	20417598 	.word	0x20417598
  409434:	00000050 	.word	0x00000050
  409438:	00000001 	.word	0x00000001
  40943c:	00010100 	.word	0x00010100
	...
  40948c:	20417884 	.word	0x20417884
  409490:	00000004 	.word	0x00000004
  409494:	00000000 	.word	0x00000000
  409498:	20417888 	.word	0x20417888
  40949c:	00000004 	.word	0x00000004
  4094a0:	00000000 	.word	0x00000000
  4094a4:	204177a4 	.word	0x204177a4
  4094a8:	00000014 	.word	0x00000014
  4094ac:	00000001 	.word	0x00000001
  4094b0:	00000000 	.word	0x00000000
  4094b4:	0041d168 	.word	0x0041d168
  4094b8:	00000000 	.word	0x00000000
  4094bc:	00000013 	.word	0x00000013
  4094c0:	00000007 	.word	0x00000007
  4094c4:	204177b8 	.word	0x204177b8
  4094c8:	00000014 	.word	0x00000014
  4094cc:	00000001 	.word	0x00000001
  4094d0:	0041bbc4 	.word	0x0041bbc4
  4094d4:	0041bb4c 	.word	0x0041bb4c
  4094d8:	00000000 	.word	0x00000000
  4094dc:	0000001e 	.word	0x0000001e
  4094e0:	0000000f 	.word	0x0000000f
  4094e4:	204177cc 	.word	0x204177cc
  4094e8:	00000014 	.word	0x00000014
  4094ec:	00000001 	.word	0x00000001
  4094f0:	0040f710 	.word	0x0040f710
  4094f4:	0041bd9c 	.word	0x0041bd9c
  4094f8:	00000101 	.word	0x00000101
  4094fc:	0000011e 	.word	0x0000011e
  409500:	0000000f 	.word	0x0000000f
  409504:	204177e0 	.word	0x204177e0
  409508:	00000014 	.word	0x00000014
  40950c:	00000000 	.word	0x00000000
  409510:	2041781c 	.word	0x2041781c
  409514:	0000000c 	.word	0x0000000c
  409518:	00000000 	.word	0x00000000
  40951c:	204175e8 	.word	0x204175e8
  409520:	00000050 	.word	0x00000050
  409524:	00000000 	.word	0x00000000
  409528:	20417088 	.word	0x20417088
  40952c:	00000200 	.word	0x00000200
  409530:	00000000 	.word	0x00000000
  409534:	20417638 	.word	0x20417638
  409538:	00000050 	.word	0x00000050
  40953c:	00000001 	.word	0x00000001
	...
  409584:	00000101 	.word	0x00000101
	...
  409590:	204176e8 	.word	0x204176e8
  409594:	00000020 	.word	0x00000020
  409598:	00000001 	.word	0x00000001
  40959c:	00000300 	.word	0x00000300
  4095a0:	0041e571 	.word	0x0041e571
  4095a4:	0041cc81 	.word	0x0041cc81
  4095a8:	0041d1b5 	.word	0x0041d1b5
  4095ac:	0041ea0d 	.word	0x0041ea0d
  4095b0:	004165e5 	.word	0x004165e5
  4095b4:	0041d3bd 	.word	0x0041d3bd
  4095b8:	0041d925 	.word	0x0041d925
  4095bc:	204177f4 	.word	0x204177f4
  4095c0:	00000014 	.word	0x00000014
  4095c4:	00000001 	.word	0x00000001
	...
  4095d4:	204175e8 	.word	0x204175e8
  4095d8:	0000000a 	.word	0x0000000a
  4095dc:	20417808 	.word	0x20417808
  4095e0:	00000014 	.word	0x00000014
  4095e4:	00000001 	.word	0x00000001
	...
  4095f4:	20417088 	.word	0x20417088
  4095f8:	00000040 	.word	0x00000040
  4095fc:	2040000c 	.word	0x2040000c
  409600:	00000009 	.word	0x00000009
  409604:	00000000 	.word	0x00000000
  409608:	20417688 	.word	0x20417688
  40960c:	00000038 	.word	0x00000038
  409610:	00000000 	.word	0x00000000
  409614:	204173f4 	.word	0x204173f4
  409618:	00000140 	.word	0x00000140
  40961c:	00000000 	.word	0x00000000
  409620:	20400018 	.word	0x20400018
  409624:	00000008 	.word	0x00000008
  409628:	00000000 	.word	0x00000000
  40962c:	20400020 	.word	0x20400020
  409630:	00000030 	.word	0x00000030
  409634:	00000000 	.word	0x00000000
  409638:	2041788c 	.word	0x2041788c
  40963c:	00000004 	.word	0x00000004
  409640:	00000001 	.word	0x00000001
  409644:	20416858 	.word	0x20416858
  409648:	20416858 	.word	0x20416858
  40964c:	00000428 	.word	0x00000428
  409650:	00000001 	.word	0x00000001
  409654:	00000000 	.word	0x00000000
  409658:	20416b44 	.word	0x20416b44
  40965c:	20416bac 	.word	0x20416bac
  409660:	20416c14 	.word	0x20416c14
	...
  4096fc:	00000001 	.word	0x00000001
  409700:	00000000 	.word	0x00000000
  409704:	abcd330e 	.word	0xabcd330e
  409708:	e66d1234 	.word	0xe66d1234
  40970c:	0005deec 	.word	0x0005deec
  409710:	0000000b 	.word	0x0000000b
	...
  409a7c:	20417288 	.word	0x20417288
  409a80:	0000016c 	.word	0x0000016c
  409a84:	00000001 	.word	0x00000001
  409a88:	00000043 	.word	0x00000043
	...
  409aa8:	00000043 	.word	0x00000043
	...
  409ac8:	00000043 	.word	0x00000043
	...
  409ae8:	00000043 	.word	0x00000043
	...
  409b08:	00000043 	.word	0x00000043
	...
  409b28:	00000043 	.word	0x00000043
	...
  409b48:	00000043 	.word	0x00000043
	...
  409b68:	0041e7bd 	.word	0x0041e7bd
  409b6c:	0041e0c9 	.word	0x0041e0c9
  409b70:	00000000 	.word	0x00000000
  409b74:	00417860 	.word	0x00417860
  409b78:	0041eb78 	.word	0x0041eb78
  409b7c:	0041eb74 	.word	0x0041eb74
  409b80:	0041eb74 	.word	0x0041eb74
  409b84:	0041eb74 	.word	0x0041eb74
  409b88:	0041eb74 	.word	0x0041eb74
  409b8c:	0041eb74 	.word	0x0041eb74
  409b90:	0041eb74 	.word	0x0041eb74
  409b94:	0041eb74 	.word	0x0041eb74
  409b98:	0041eb74 	.word	0x0041eb74
  409b9c:	0041eb74 	.word	0x0041eb74
  409ba0:	ffffffff 	.word	0xffffffff
  409ba4:	ffffffff 	.word	0xffffffff
  409ba8:	ffffffff 	.word	0xffffffff
  409bac:	0000ffff 	.word	0x0000ffff
  409bb0:	53410001 	.word	0x53410001
  409bb4:	00494943 	.word	0x00494943
	...
  409bd0:	53410000 	.word	0x53410000
  409bd4:	00494943 	.word	0x00494943
	...
  409bf4:	204176c0 	.word	0x204176c0
  409bf8:	00000028 	.word	0x00000028
  409bfc:	00000000 	.word	0x00000000
  409c00:	20417890 	.word	0x20417890
  409c04:	00000004 	.word	0x00000004
  409c08:	00000000 	.word	0x00000000
  409c0c:	20417894 	.word	0x20417894
  409c10:	00000004 	.word	0x00000004
  409c14:	00000000 	.word	0x00000000
  409c18:	20417898 	.word	0x20417898
  409c1c:	00000004 	.word	0x00000004
  409c20:	00000000 	.word	0x00000000
  409c24:	20416c80 	.word	0x20416c80
  409c28:	00000408 	.word	0x00000408
  409c2c:	00000001 	.word	0x00000001
	...
  409c38:	20416c80 	.word	0x20416c80
  409c3c:	20416c80 	.word	0x20416c80
  409c40:	20416c88 	.word	0x20416c88
  409c44:	20416c88 	.word	0x20416c88
  409c48:	20416c90 	.word	0x20416c90
  409c4c:	20416c90 	.word	0x20416c90
  409c50:	20416c98 	.word	0x20416c98
  409c54:	20416c98 	.word	0x20416c98
  409c58:	20416ca0 	.word	0x20416ca0
  409c5c:	20416ca0 	.word	0x20416ca0
  409c60:	20416ca8 	.word	0x20416ca8
  409c64:	20416ca8 	.word	0x20416ca8
  409c68:	20416cb0 	.word	0x20416cb0
  409c6c:	20416cb0 	.word	0x20416cb0
  409c70:	20416cb8 	.word	0x20416cb8
  409c74:	20416cb8 	.word	0x20416cb8
  409c78:	20416cc0 	.word	0x20416cc0
  409c7c:	20416cc0 	.word	0x20416cc0
  409c80:	20416cc8 	.word	0x20416cc8
  409c84:	20416cc8 	.word	0x20416cc8
  409c88:	20416cd0 	.word	0x20416cd0
  409c8c:	20416cd0 	.word	0x20416cd0
  409c90:	20416cd8 	.word	0x20416cd8
  409c94:	20416cd8 	.word	0x20416cd8
  409c98:	20416ce0 	.word	0x20416ce0
  409c9c:	20416ce0 	.word	0x20416ce0
  409ca0:	20416ce8 	.word	0x20416ce8
  409ca4:	20416ce8 	.word	0x20416ce8
  409ca8:	20416cf0 	.word	0x20416cf0
  409cac:	20416cf0 	.word	0x20416cf0
  409cb0:	20416cf8 	.word	0x20416cf8
  409cb4:	20416cf8 	.word	0x20416cf8
  409cb8:	20416d00 	.word	0x20416d00
  409cbc:	20416d00 	.word	0x20416d00
  409cc0:	20416d08 	.word	0x20416d08
  409cc4:	20416d08 	.word	0x20416d08
  409cc8:	20416d10 	.word	0x20416d10
  409ccc:	20416d10 	.word	0x20416d10
  409cd0:	20416d18 	.word	0x20416d18
  409cd4:	20416d18 	.word	0x20416d18
  409cd8:	20416d20 	.word	0x20416d20
  409cdc:	20416d20 	.word	0x20416d20
  409ce0:	20416d28 	.word	0x20416d28
  409ce4:	20416d28 	.word	0x20416d28
  409ce8:	20416d30 	.word	0x20416d30
  409cec:	20416d30 	.word	0x20416d30
  409cf0:	20416d38 	.word	0x20416d38
  409cf4:	20416d38 	.word	0x20416d38
  409cf8:	20416d40 	.word	0x20416d40
  409cfc:	20416d40 	.word	0x20416d40
  409d00:	20416d48 	.word	0x20416d48
  409d04:	20416d48 	.word	0x20416d48
  409d08:	20416d50 	.word	0x20416d50
  409d0c:	20416d50 	.word	0x20416d50
  409d10:	20416d58 	.word	0x20416d58
  409d14:	20416d58 	.word	0x20416d58
  409d18:	20416d60 	.word	0x20416d60
  409d1c:	20416d60 	.word	0x20416d60
  409d20:	20416d68 	.word	0x20416d68
  409d24:	20416d68 	.word	0x20416d68
  409d28:	20416d70 	.word	0x20416d70
  409d2c:	20416d70 	.word	0x20416d70
  409d30:	20416d78 	.word	0x20416d78
  409d34:	20416d78 	.word	0x20416d78
  409d38:	20416d80 	.word	0x20416d80
  409d3c:	20416d80 	.word	0x20416d80
  409d40:	20416d88 	.word	0x20416d88
  409d44:	20416d88 	.word	0x20416d88
  409d48:	20416d90 	.word	0x20416d90
  409d4c:	20416d90 	.word	0x20416d90
  409d50:	20416d98 	.word	0x20416d98
  409d54:	20416d98 	.word	0x20416d98
  409d58:	20416da0 	.word	0x20416da0
  409d5c:	20416da0 	.word	0x20416da0
  409d60:	20416da8 	.word	0x20416da8
  409d64:	20416da8 	.word	0x20416da8
  409d68:	20416db0 	.word	0x20416db0
  409d6c:	20416db0 	.word	0x20416db0
  409d70:	20416db8 	.word	0x20416db8
  409d74:	20416db8 	.word	0x20416db8
  409d78:	20416dc0 	.word	0x20416dc0
  409d7c:	20416dc0 	.word	0x20416dc0
  409d80:	20416dc8 	.word	0x20416dc8
  409d84:	20416dc8 	.word	0x20416dc8
  409d88:	20416dd0 	.word	0x20416dd0
  409d8c:	20416dd0 	.word	0x20416dd0
  409d90:	20416dd8 	.word	0x20416dd8
  409d94:	20416dd8 	.word	0x20416dd8
  409d98:	20416de0 	.word	0x20416de0
  409d9c:	20416de0 	.word	0x20416de0
  409da0:	20416de8 	.word	0x20416de8
  409da4:	20416de8 	.word	0x20416de8
  409da8:	20416df0 	.word	0x20416df0
  409dac:	20416df0 	.word	0x20416df0
  409db0:	20416df8 	.word	0x20416df8
  409db4:	20416df8 	.word	0x20416df8
  409db8:	20416e00 	.word	0x20416e00
  409dbc:	20416e00 	.word	0x20416e00
  409dc0:	20416e08 	.word	0x20416e08
  409dc4:	20416e08 	.word	0x20416e08
  409dc8:	20416e10 	.word	0x20416e10
  409dcc:	20416e10 	.word	0x20416e10
  409dd0:	20416e18 	.word	0x20416e18
  409dd4:	20416e18 	.word	0x20416e18
  409dd8:	20416e20 	.word	0x20416e20
  409ddc:	20416e20 	.word	0x20416e20
  409de0:	20416e28 	.word	0x20416e28
  409de4:	20416e28 	.word	0x20416e28
  409de8:	20416e30 	.word	0x20416e30
  409dec:	20416e30 	.word	0x20416e30
  409df0:	20416e38 	.word	0x20416e38
  409df4:	20416e38 	.word	0x20416e38
  409df8:	20416e40 	.word	0x20416e40
  409dfc:	20416e40 	.word	0x20416e40
  409e00:	20416e48 	.word	0x20416e48
  409e04:	20416e48 	.word	0x20416e48
  409e08:	20416e50 	.word	0x20416e50
  409e0c:	20416e50 	.word	0x20416e50
  409e10:	20416e58 	.word	0x20416e58
  409e14:	20416e58 	.word	0x20416e58
  409e18:	20416e60 	.word	0x20416e60
  409e1c:	20416e60 	.word	0x20416e60
  409e20:	20416e68 	.word	0x20416e68
  409e24:	20416e68 	.word	0x20416e68
  409e28:	20416e70 	.word	0x20416e70
  409e2c:	20416e70 	.word	0x20416e70
  409e30:	20416e78 	.word	0x20416e78
  409e34:	20416e78 	.word	0x20416e78
  409e38:	20416e80 	.word	0x20416e80
  409e3c:	20416e80 	.word	0x20416e80
  409e40:	20416e88 	.word	0x20416e88
  409e44:	20416e88 	.word	0x20416e88
  409e48:	20416e90 	.word	0x20416e90
  409e4c:	20416e90 	.word	0x20416e90
  409e50:	20416e98 	.word	0x20416e98
  409e54:	20416e98 	.word	0x20416e98
  409e58:	20416ea0 	.word	0x20416ea0
  409e5c:	20416ea0 	.word	0x20416ea0
  409e60:	20416ea8 	.word	0x20416ea8
  409e64:	20416ea8 	.word	0x20416ea8
  409e68:	20416eb0 	.word	0x20416eb0
  409e6c:	20416eb0 	.word	0x20416eb0
  409e70:	20416eb8 	.word	0x20416eb8
  409e74:	20416eb8 	.word	0x20416eb8
  409e78:	20416ec0 	.word	0x20416ec0
  409e7c:	20416ec0 	.word	0x20416ec0
  409e80:	20416ec8 	.word	0x20416ec8
  409e84:	20416ec8 	.word	0x20416ec8
  409e88:	20416ed0 	.word	0x20416ed0
  409e8c:	20416ed0 	.word	0x20416ed0
  409e90:	20416ed8 	.word	0x20416ed8
  409e94:	20416ed8 	.word	0x20416ed8
  409e98:	20416ee0 	.word	0x20416ee0
  409e9c:	20416ee0 	.word	0x20416ee0
  409ea0:	20416ee8 	.word	0x20416ee8
  409ea4:	20416ee8 	.word	0x20416ee8
  409ea8:	20416ef0 	.word	0x20416ef0
  409eac:	20416ef0 	.word	0x20416ef0
  409eb0:	20416ef8 	.word	0x20416ef8
  409eb4:	20416ef8 	.word	0x20416ef8
  409eb8:	20416f00 	.word	0x20416f00
  409ebc:	20416f00 	.word	0x20416f00
  409ec0:	20416f08 	.word	0x20416f08
  409ec4:	20416f08 	.word	0x20416f08
  409ec8:	20416f10 	.word	0x20416f10
  409ecc:	20416f10 	.word	0x20416f10
  409ed0:	20416f18 	.word	0x20416f18
  409ed4:	20416f18 	.word	0x20416f18
  409ed8:	20416f20 	.word	0x20416f20
  409edc:	20416f20 	.word	0x20416f20
  409ee0:	20416f28 	.word	0x20416f28
  409ee4:	20416f28 	.word	0x20416f28
  409ee8:	20416f30 	.word	0x20416f30
  409eec:	20416f30 	.word	0x20416f30
  409ef0:	20416f38 	.word	0x20416f38
  409ef4:	20416f38 	.word	0x20416f38
  409ef8:	20416f40 	.word	0x20416f40
  409efc:	20416f40 	.word	0x20416f40
  409f00:	20416f48 	.word	0x20416f48
  409f04:	20416f48 	.word	0x20416f48
  409f08:	20416f50 	.word	0x20416f50
  409f0c:	20416f50 	.word	0x20416f50
  409f10:	20416f58 	.word	0x20416f58
  409f14:	20416f58 	.word	0x20416f58
  409f18:	20416f60 	.word	0x20416f60
  409f1c:	20416f60 	.word	0x20416f60
  409f20:	20416f68 	.word	0x20416f68
  409f24:	20416f68 	.word	0x20416f68
  409f28:	20416f70 	.word	0x20416f70
  409f2c:	20416f70 	.word	0x20416f70
  409f30:	20416f78 	.word	0x20416f78
  409f34:	20416f78 	.word	0x20416f78
  409f38:	20416f80 	.word	0x20416f80
  409f3c:	20416f80 	.word	0x20416f80
  409f40:	20416f88 	.word	0x20416f88
  409f44:	20416f88 	.word	0x20416f88
  409f48:	20416f90 	.word	0x20416f90
  409f4c:	20416f90 	.word	0x20416f90
  409f50:	20416f98 	.word	0x20416f98
  409f54:	20416f98 	.word	0x20416f98
  409f58:	20416fa0 	.word	0x20416fa0
  409f5c:	20416fa0 	.word	0x20416fa0
  409f60:	20416fa8 	.word	0x20416fa8
  409f64:	20416fa8 	.word	0x20416fa8
  409f68:	20416fb0 	.word	0x20416fb0
  409f6c:	20416fb0 	.word	0x20416fb0
  409f70:	20416fb8 	.word	0x20416fb8
  409f74:	20416fb8 	.word	0x20416fb8
  409f78:	20416fc0 	.word	0x20416fc0
  409f7c:	20416fc0 	.word	0x20416fc0
  409f80:	20416fc8 	.word	0x20416fc8
  409f84:	20416fc8 	.word	0x20416fc8
  409f88:	20416fd0 	.word	0x20416fd0
  409f8c:	20416fd0 	.word	0x20416fd0
  409f90:	20416fd8 	.word	0x20416fd8
  409f94:	20416fd8 	.word	0x20416fd8
  409f98:	20416fe0 	.word	0x20416fe0
  409f9c:	20416fe0 	.word	0x20416fe0
  409fa0:	20416fe8 	.word	0x20416fe8
  409fa4:	20416fe8 	.word	0x20416fe8
  409fa8:	20416ff0 	.word	0x20416ff0
  409fac:	20416ff0 	.word	0x20416ff0
  409fb0:	20416ff8 	.word	0x20416ff8
  409fb4:	20416ff8 	.word	0x20416ff8
  409fb8:	20417000 	.word	0x20417000
  409fbc:	20417000 	.word	0x20417000
  409fc0:	20417008 	.word	0x20417008
  409fc4:	20417008 	.word	0x20417008
  409fc8:	20417010 	.word	0x20417010
  409fcc:	20417010 	.word	0x20417010
  409fd0:	20417018 	.word	0x20417018
  409fd4:	20417018 	.word	0x20417018
  409fd8:	20417020 	.word	0x20417020
  409fdc:	20417020 	.word	0x20417020
  409fe0:	20417028 	.word	0x20417028
  409fe4:	20417028 	.word	0x20417028
  409fe8:	20417030 	.word	0x20417030
  409fec:	20417030 	.word	0x20417030
  409ff0:	20417038 	.word	0x20417038
  409ff4:	20417038 	.word	0x20417038
  409ff8:	20417040 	.word	0x20417040
  409ffc:	20417040 	.word	0x20417040
  40a000:	20417048 	.word	0x20417048
  40a004:	20417048 	.word	0x20417048
  40a008:	20417050 	.word	0x20417050
  40a00c:	20417050 	.word	0x20417050
  40a010:	20417058 	.word	0x20417058
  40a014:	20417058 	.word	0x20417058
  40a018:	20417060 	.word	0x20417060
  40a01c:	20417060 	.word	0x20417060
  40a020:	20417068 	.word	0x20417068
  40a024:	20417068 	.word	0x20417068
  40a028:	20417070 	.word	0x20417070
  40a02c:	20417070 	.word	0x20417070
  40a030:	20417078 	.word	0x20417078
  40a034:	20417078 	.word	0x20417078
  40a038:	2041789c 	.word	0x2041789c
  40a03c:	00000004 	.word	0x00000004
  40a040:	00000001 	.word	0x00000001
  40a044:	ffffffff 	.word	0xffffffff
  40a048:	204178a0 	.word	0x204178a0
  40a04c:	00000004 	.word	0x00000004
  40a050:	00000001 	.word	0x00000001
  40a054:	00020000 	.word	0x00020000
  40a058:	20400050 	.word	0x20400050
  40a05c:	00000004 	.word	0x00000004
  40a060:	00000000 	.word	0x00000000
  40a064:	204178a4 	.word	0x204178a4
  40a068:	00000004 	.word	0x00000004
	...
  40a078:	22222222 	.word	0x22222222
  40a07c:	22222222 	.word	0x22222222

Disassembly of section .text._dtoa_r%67:

0040a080 <_dtoa_r>:
  40a080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0040a084 <.LCFI4>:
  40a084:	6c05      	ldr	r5, [r0, #64]	; 0x40
  40a086:	b093      	sub	sp, #76	; 0x4c

0040a088 <.LCFI5>:
  40a088:	4604      	mov	r4, r0
  40a08a:	ec5b ab10 	vmov	sl, fp, d0
  40a08e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
  40a090:	9101      	str	r1, [sp, #4]
  40a092:	4691      	mov	r9, r2
  40a094:	9304      	str	r3, [sp, #16]
  40a096:	b14d      	cbz	r5, 40a0ac <.LVL53+0x4>
  40a098:	6c42      	ldr	r2, [r0, #68]	; 0x44

0040a09a <.LVL50>:
  40a09a:	606a      	str	r2, [r5, #4]
  40a09c:	2301      	movs	r3, #1

0040a09e <.LVL51>:
  40a09e:	4093      	lsls	r3, r2
  40a0a0:	60ab      	str	r3, [r5, #8]
  40a0a2:	4629      	mov	r1, r5

0040a0a4 <.LVL52>:
  40a0a4:	f014 fd7e 	bl	41eba4 <_Bfree>

0040a0a8 <.LVL53>:
  40a0a8:	2300      	movs	r3, #0
  40a0aa:	6423      	str	r3, [r4, #64]	; 0x40
  40a0ac:	f1bb 0f00 	cmp.w	fp, #0
  40a0b0:	465e      	mov	r6, fp
  40a0b2:	db35      	blt.n	40a120 <.LVL63>
  40a0b4:	2300      	movs	r3, #0
  40a0b6:	603b      	str	r3, [r7, #0]
  40a0b8:	4bc1      	ldr	r3, [pc, #772]	; (40a3c0 <.LVL134+0x20>)
  40a0ba:	43b3      	bics	r3, r6
  40a0bc:	d015      	beq.n	40a0ea <.LCFI7>
  40a0be:	ec4b ab17 	vmov	d7, sl, fp
  40a0c2:	eeb5 7b40 	vcmp.f64	d7, #0.0
  40a0c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr

0040a0ca <.LVL55>:
  40a0ca:	e9cd ab02 	strd	sl, fp, [sp, #8]
  40a0ce:	d12d      	bne.n	40a12c <.LVL64>
  40a0d0:	9a04      	ldr	r2, [sp, #16]
  40a0d2:	2301      	movs	r3, #1
  40a0d4:	6013      	str	r3, [r2, #0]

0040a0d6 <.LVL56>:
  40a0d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40a0d8:	2b00      	cmp	r3, #0
  40a0da:	f000 80b3 	beq.w	40a244 <.LVL99>
  40a0de:	48b9      	ldr	r0, [pc, #740]	; (40a3c4 <.LVL134+0x24>)
  40a0e0:	6018      	str	r0, [r3, #0]
  40a0e2:	3801      	subs	r0, #1

0040a0e4 <.LVL57>:
  40a0e4:	b013      	add	sp, #76	; 0x4c

0040a0e6 <.LCFI6>:
  40a0e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040a0ea <.LCFI7>:
  40a0ea:	9a04      	ldr	r2, [sp, #16]
  40a0ec:	f242 730f 	movw	r3, #9999	; 0x270f
  40a0f0:	6013      	str	r3, [r2, #0]

0040a0f2 <.LVL59>:
  40a0f2:	f1ba 0f00 	cmp.w	sl, #0
  40a0f6:	d10d      	bne.n	40a114 <.LCFI9>
  40a0f8:	f3c6 0613 	ubfx	r6, r6, #0, #20
  40a0fc:	b956      	cbnz	r6, 40a114 <.LCFI9>

0040a0fe <.LVL60>:
  40a0fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40a100:	48b1      	ldr	r0, [pc, #708]	; (40a3c8 <.LVL134+0x28>)
  40a102:	2b00      	cmp	r3, #0
  40a104:	d0ee      	beq.n	40a0e4 <.LVL57>
  40a106:	f100 0308 	add.w	r3, r0, #8

0040a10a <.LVL61>:
  40a10a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
  40a10c:	6013      	str	r3, [r2, #0]
  40a10e:	b013      	add	sp, #76	; 0x4c

0040a110 <.LCFI8>:
  40a110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040a114 <.LCFI9>:
  40a114:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40a116:	48ad      	ldr	r0, [pc, #692]	; (40a3cc <.LVL134+0x2c>)
  40a118:	2b00      	cmp	r3, #0
  40a11a:	d0e3      	beq.n	40a0e4 <.LVL57>
  40a11c:	1cc3      	adds	r3, r0, #3
  40a11e:	e7f4      	b.n	40a10a <.LVL61>

0040a120 <.LVL63>:
  40a120:	2301      	movs	r3, #1
  40a122:	f02b 4600 	bic.w	r6, fp, #2147483648	; 0x80000000
  40a126:	603b      	str	r3, [r7, #0]
  40a128:	46b3      	mov	fp, r6
  40a12a:	e7c5      	b.n	40a0b8 <.LVL53+0x10>

0040a12c <.LVL64>:
  40a12c:	a911      	add	r1, sp, #68	; 0x44
  40a12e:	aa10      	add	r2, sp, #64	; 0x40
  40a130:	ed9d 0b02 	vldr	d0, [sp, #8]
  40a134:	4620      	mov	r0, r4
  40a136:	f00f fa09 	bl	41954c <__d2b>

0040a13a <.LVL65>:
  40a13a:	0d31      	lsrs	r1, r6, #20
  40a13c:	4680      	mov	r8, r0

0040a13e <.LVL66>:
  40a13e:	d065      	beq.n	40a20c <.LVL92>
  40a140:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40a144:	f3c3 0013 	ubfx	r0, r3, #0, #20

0040a148 <.LVL68>:
  40a148:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
  40a14c:	2500      	movs	r5, #0
  40a14e:	9810      	ldr	r0, [sp, #64]	; 0x40
  40a150:	950d      	str	r5, [sp, #52]	; 0x34
  40a152:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff

0040a156 <.LVL69>:
  40a156:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000

0040a15a <.LVL70>:
  40a15a:	ec43 2b17 	vmov	d7, r2, r3
  40a15e:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
  40a162:	ed9f 4b91 	vldr	d4, [pc, #580]	; 40a3a8 <.LVL134+0x8>
  40a166:	ee37 6b46 	vsub.f64	d6, d7, d6
  40a16a:	ed9f 7b91 	vldr	d7, [pc, #580]	; 40a3b0 <.LVL134+0x10>
  40a16e:	ed9f 5b92 	vldr	d5, [pc, #584]	; 40a3b8 <.LVL134+0x18>
  40a172:	eea6 7b04 	vfma.f64	d7, d6, d4
  40a176:	ee06 1a90 	vmov	s13, r1
  40a17a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
  40a17e:	eea6 7b05 	vfma.f64	d7, d6, d5

0040a182 <.LVL71>:
  40a182:	eefd 6bc7 	vcvt.s32.f64	s13, d7
  40a186:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
  40a18a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40a18e:	edcd 6a02 	vstr	s13, [sp, #8]

0040a192 <.LVL72>:
  40a192:	f100 8130 	bmi.w	40a3f6 <.LVL143>

0040a196 <.LVL73>:
  40a196:	9d02      	ldr	r5, [sp, #8]
  40a198:	2d16      	cmp	r5, #22
  40a19a:	f200 8101 	bhi.w	40a3a0 <.LVL134>
  40a19e:	4b8c      	ldr	r3, [pc, #560]	; (40a3d0 <.LVL134+0x30>)
  40a1a0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40a1a4:	ed93 7b00 	vldr	d7, [r3]

0040a1a8 <.LVL74>:
  40a1a8:	ec4b ab16 	vmov	d6, sl, fp
  40a1ac:	eeb4 7bc6 	vcmpe.f64	d7, d6
  40a1b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40a1b4:	f340 8183 	ble.w	40a4be <.LVL173>
  40a1b8:	1e6b      	subs	r3, r5, #1
  40a1ba:	9302      	str	r3, [sp, #8]

0040a1bc <.LVL75>:
  40a1bc:	2300      	movs	r3, #0

0040a1be <.LVL76>:
  40a1be:	930b      	str	r3, [sp, #44]	; 0x2c

0040a1c0 <.LVL77>:
  40a1c0:	1a41      	subs	r1, r0, r1

0040a1c2 <.LVL78>:
  40a1c2:	1e4b      	subs	r3, r1, #1

0040a1c4 <.LVL79>:
  40a1c4:	9306      	str	r3, [sp, #24]
  40a1c6:	f100 8110 	bmi.w	40a3ea <.LVL138>
  40a1ca:	2300      	movs	r3, #0

0040a1cc <.LVL80>:
  40a1cc:	9307      	str	r3, [sp, #28]

0040a1ce <.LVL81>:
  40a1ce:	9b02      	ldr	r3, [sp, #8]
  40a1d0:	2b00      	cmp	r3, #0
  40a1d2:	f2c0 8101 	blt.w	40a3d8 <.LVL135>

0040a1d6 <.LVL82>:
  40a1d6:	9a06      	ldr	r2, [sp, #24]

0040a1d8 <.LVL83>:
  40a1d8:	930a      	str	r3, [sp, #40]	; 0x28
  40a1da:	4611      	mov	r1, r2

0040a1dc <.LVL84>:
  40a1dc:	4419      	add	r1, r3
  40a1de:	2300      	movs	r3, #0

0040a1e0 <.LVL85>:
  40a1e0:	9106      	str	r1, [sp, #24]

0040a1e2 <.LVL86>:
  40a1e2:	9305      	str	r3, [sp, #20]

0040a1e4 <.LVL87>:
  40a1e4:	9b01      	ldr	r3, [sp, #4]
  40a1e6:	2b09      	cmp	r3, #9
  40a1e8:	d82e      	bhi.n	40a248 <.LVL100>

0040a1ea <.LVL88>:
  40a1ea:	2b05      	cmp	r3, #5
  40a1ec:	f340 8550 	ble.w	40ac90 <.LVL445>
  40a1f0:	3b04      	subs	r3, #4

0040a1f2 <.LVL89>:
  40a1f2:	9301      	str	r3, [sp, #4]

0040a1f4 <.LVL90>:
  40a1f4:	2500      	movs	r5, #0

0040a1f6 <.LVL91>:
  40a1f6:	9b01      	ldr	r3, [sp, #4]
  40a1f8:	3b02      	subs	r3, #2
  40a1fa:	2b03      	cmp	r3, #3
  40a1fc:	f200 8550 	bhi.w	40aca0 <.LVL447>
  40a200:	e8df f013 	tbh	[pc, r3, lsl #1]
  40a204:	02860349 	.word	0x02860349
  40a208:	03d80356 	.word	0x03d80356

0040a20c <.LVL92>:
  40a20c:	9810      	ldr	r0, [sp, #64]	; 0x40

0040a20e <.LVL93>:
  40a20e:	9911      	ldr	r1, [sp, #68]	; 0x44

0040a210 <.LVL94>:
  40a210:	4401      	add	r1, r0
  40a212:	f201 4332 	addw	r3, r1, #1074	; 0x432

0040a216 <.LVL95>:
  40a216:	2b20      	cmp	r3, #32
  40a218:	f340 814a 	ble.w	40a4b0 <.LVL171>
  40a21c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40

0040a220 <.LVL96>:
  40a220:	f201 4212 	addw	r2, r1, #1042	; 0x412
  40a224:	409e      	lsls	r6, r3
  40a226:	fa2a f302 	lsr.w	r3, sl, r2
  40a22a:	4333      	orrs	r3, r6
  40a22c:	ee07 3a90 	vmov	s15, r3

0040a230 <.LVL97>:
  40a230:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  40a234:	2501      	movs	r5, #1
  40a236:	ec53 2b17 	vmov	r2, r3, d7
  40a23a:	3901      	subs	r1, #1

0040a23c <.LVL98>:
  40a23c:	f1a3 73f8 	sub.w	r3, r3, #32505856	; 0x1f00000
  40a240:	950d      	str	r5, [sp, #52]	; 0x34
  40a242:	e78a      	b.n	40a15a <.LVL70>

0040a244 <.LVL99>:
  40a244:	4863      	ldr	r0, [pc, #396]	; (40a3d4 <.LVL134+0x34>)
  40a246:	e74d      	b.n	40a0e4 <.LVL57>

0040a248 <.LVL100>:
  40a248:	2100      	movs	r1, #0
  40a24a:	6461      	str	r1, [r4, #68]	; 0x44
  40a24c:	4620      	mov	r0, r4
  40a24e:	4689      	mov	r9, r1
  40a250:	f012 fffc 	bl	41d24c <.LFE2>

0040a254 <.LVL101>:
  40a254:	f04f 36ff 	mov.w	r6, #4294967295
  40a258:	2301      	movs	r3, #1
  40a25a:	9008      	str	r0, [sp, #32]
  40a25c:	6420      	str	r0, [r4, #64]	; 0x40

0040a25e <.LVL102>:
  40a25e:	f8cd 9004 	str.w	r9, [sp, #4]

0040a262 <.LVL103>:
  40a262:	960c      	str	r6, [sp, #48]	; 0x30
  40a264:	9309      	str	r3, [sp, #36]	; 0x24

0040a266 <.LVL104>:
  40a266:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40a268:	2b00      	cmp	r3, #0
  40a26a:	db7a      	blt.n	40a362 <.LCFI11>
  40a26c:	9a02      	ldr	r2, [sp, #8]
  40a26e:	2a0e      	cmp	r2, #14
  40a270:	dc77      	bgt.n	40a362 <.LCFI11>
  40a272:	4b57      	ldr	r3, [pc, #348]	; (40a3d0 <.LVL134+0x30>)
  40a274:	f1b9 0f00 	cmp.w	r9, #0
  40a278:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40a27c:	ed93 4b00 	vldr	d4, [r3]

0040a280 <.LVL105>:
  40a280:	f2c0 8332 	blt.w	40a8e8 <.LVL300>

0040a284 <.LVL106>:
  40a284:	ec4b ab17 	vmov	d7, sl, fp
  40a288:	ee87 6b04 	vdiv.f64	d6, d7, d4
  40a28c:	eebd 6bc6 	vcvt.s32.f64	s12, d6

0040a290 <.LVL107>:
  40a290:	9a08      	ldr	r2, [sp, #32]
  40a292:	ee16 3a10 	vmov	r3, s12
  40a296:	2e01      	cmp	r6, #1
  40a298:	f103 0330 	add.w	r3, r3, #48	; 0x30
  40a29c:	eeb8 5bc6 	vcvt.f64.s32	d5, s12
  40a2a0:	f102 0b01 	add.w	fp, r2, #1

0040a2a4 <.LVL108>:
  40a2a4:	7013      	strb	r3, [r2, #0]
  40a2a6:	eea5 7b44 	vfms.f64	d7, d5, d4
  40a2aa:	d024      	beq.n	40a2f6 <.LVL115>
  40a2ac:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
  40a2b0:	ee27 7b03 	vmul.f64	d7, d7, d3
  40a2b4:	eeb5 7b40 	vcmp.f64	d7, #0.0
  40a2b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40a2bc:	d03c      	beq.n	40a338 <.L76>
  40a2be:	eeb1 2b44 	vneg.f64	d2, d4
  40a2c2:	9a08      	ldr	r2, [sp, #32]
  40a2c4:	e006      	b.n	40a2d4 <.LVL110>

0040a2c6 <.LVL109>:
  40a2c6:	ee27 7b03 	vmul.f64	d7, d7, d3
  40a2ca:	eeb5 7b40 	vcmp.f64	d7, #0.0
  40a2ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40a2d2:	d031      	beq.n	40a338 <.L76>

0040a2d4 <.LVL110>:
  40a2d4:	ee87 6b04 	vdiv.f64	d6, d7, d4

0040a2d8 <.LVL111>:
  40a2d8:	eebd 6bc6 	vcvt.s32.f64	s12, d6

0040a2dc <.LVL112>:
  40a2dc:	ee16 3a10 	vmov	r3, s12
  40a2e0:	3330      	adds	r3, #48	; 0x30
  40a2e2:	f80b 3b01 	strb.w	r3, [fp], #1

0040a2e6 <.LVL113>:
  40a2e6:	ebab 0302 	sub.w	r3, fp, r2
  40a2ea:	42b3      	cmp	r3, r6
  40a2ec:	eeb8 5bc6 	vcvt.f64.s32	d5, s12
  40a2f0:	eea2 7b05 	vfma.f64	d7, d2, d5

0040a2f4 <.LVL114>:
  40a2f4:	d1e7      	bne.n	40a2c6 <.LVL109>

0040a2f6 <.LVL115>:
  40a2f6:	ee37 7b07 	vadd.f64	d7, d7, d7
  40a2fa:	eeb4 4bc7 	vcmpe.f64	d4, d7
  40a2fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40a302:	d408      	bmi.n	40a316 <.LVL115+0x20>
  40a304:	eeb4 4b47 	vcmp.f64	d4, d7
  40a308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40a30c:	d114      	bne.n	40a338 <.L76>
  40a30e:	ee16 3a10 	vmov	r3, s12
  40a312:	07db      	lsls	r3, r3, #31
  40a314:	d510      	bpl.n	40a338 <.L76>
  40a316:	f81b 3c01 	ldrb.w	r3, [fp, #-1]

0040a31a <.L77>:
  40a31a:	9908      	ldr	r1, [sp, #32]
  40a31c:	f10b 32ff 	add.w	r2, fp, #4294967295
  40a320:	e004      	b.n	40a32c <.LVL118>

0040a322 <.LVL117>:
  40a322:	4291      	cmp	r1, r2
  40a324:	f000 83da 	beq.w	40aadc <.LVL375>
  40a328:	f812 3d01 	ldrb.w	r3, [r2, #-1]!

0040a32c <.LVL118>:
  40a32c:	2b39      	cmp	r3, #57	; 0x39
  40a32e:	f102 0b01 	add.w	fp, r2, #1

0040a332 <.LVL119>:
  40a332:	d0f6      	beq.n	40a322 <.LVL117>

0040a334 <.LVL120>:
  40a334:	3301      	adds	r3, #1
  40a336:	7013      	strb	r3, [r2, #0]

0040a338 <.L76>:
  40a338:	4641      	mov	r1, r8
  40a33a:	4620      	mov	r0, r4

0040a33c <.LVL122>:
  40a33c:	f014 fc32 	bl	41eba4 <_Bfree>

0040a340 <.LVL123>:
  40a340:	2200      	movs	r2, #0
  40a342:	9b02      	ldr	r3, [sp, #8]
  40a344:	f88b 2000 	strb.w	r2, [fp]
  40a348:	9a04      	ldr	r2, [sp, #16]
  40a34a:	3301      	adds	r3, #1
  40a34c:	6013      	str	r3, [r2, #0]
  40a34e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40a350:	2b00      	cmp	r3, #0
  40a352:	f000 8355 	beq.w	40aa00 <.LVL340>
  40a356:	9808      	ldr	r0, [sp, #32]
  40a358:	f8c3 b000 	str.w	fp, [r3]
  40a35c:	b013      	add	sp, #76	; 0x4c

0040a35e <.LCFI10>:
  40a35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040a362 <.LCFI11>:
  40a362:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40a364:	2a00      	cmp	r2, #0
  40a366:	d052      	beq.n	40a40e <.LVL145>
  40a368:	9a01      	ldr	r2, [sp, #4]
  40a36a:	2a01      	cmp	r2, #1
  40a36c:	f340 82e2 	ble.w	40a934 <.LVL312>
  40a370:	9905      	ldr	r1, [sp, #20]
  40a372:	1e72      	subs	r2, r6, #1

0040a374 <.LVL125>:
  40a374:	4291      	cmp	r1, r2
  40a376:	f2c0 8346 	blt.w	40aa06 <.LVL341>
  40a37a:	1a8b      	subs	r3, r1, r2
  40a37c:	930d      	str	r3, [sp, #52]	; 0x34

0040a37e <.LVL126>:
  40a37e:	2e00      	cmp	r6, #0
  40a380:	f2c0 8415 	blt.w	40abae <.LVL411>
  40a384:	9f07      	ldr	r7, [sp, #28]
  40a386:	4633      	mov	r3, r6

0040a388 <.LVL127>:
  40a388:	9a07      	ldr	r2, [sp, #28]
  40a38a:	441a      	add	r2, r3
  40a38c:	9207      	str	r2, [sp, #28]

0040a38e <.LVL128>:
  40a38e:	9a06      	ldr	r2, [sp, #24]

0040a390 <.LVL129>:
  40a390:	2101      	movs	r1, #1
  40a392:	441a      	add	r2, r3
  40a394:	4620      	mov	r0, r4

0040a396 <.LVL130>:
  40a396:	9206      	str	r2, [sp, #24]

0040a398 <.LVL131>:
  40a398:	f014 fc0e 	bl	41ebb8 <__i2b>

0040a39c <.LVL132>:
  40a39c:	4605      	mov	r5, r0

0040a39e <.LVL133>:
  40a39e:	e03a      	b.n	40a416 <.LVL146>

0040a3a0 <.LVL134>:
  40a3a0:	2301      	movs	r3, #1
  40a3a2:	930b      	str	r3, [sp, #44]	; 0x2c
  40a3a4:	e70c      	b.n	40a1c0 <.LVL77>
  40a3a6:	bf00      	nop
  40a3a8:	636f4361 	.word	0x636f4361
  40a3ac:	3fd287a7 	.word	0x3fd287a7
  40a3b0:	8b60c8b3 	.word	0x8b60c8b3
  40a3b4:	3fc68a28 	.word	0x3fc68a28
  40a3b8:	509f79fb 	.word	0x509f79fb
  40a3bc:	3fd34413 	.word	0x3fd34413
  40a3c0:	7ff00000 	.word	0x7ff00000
  40a3c4:	0041eba1 	.word	0x0041eba1
  40a3c8:	0041eb90 	.word	0x0041eb90
  40a3cc:	0041eb9c 	.word	0x0041eb9c
  40a3d0:	00418ff8 	.word	0x00418ff8
  40a3d4:	0041eba0 	.word	0x0041eba0

0040a3d8 <.LVL135>:
  40a3d8:	9a07      	ldr	r2, [sp, #28]

0040a3da <.LVL136>:
  40a3da:	9b02      	ldr	r3, [sp, #8]
  40a3dc:	1ad2      	subs	r2, r2, r3
  40a3de:	425b      	negs	r3, r3
  40a3e0:	9305      	str	r3, [sp, #20]
  40a3e2:	2300      	movs	r3, #0
  40a3e4:	9207      	str	r2, [sp, #28]

0040a3e6 <.LVL137>:
  40a3e6:	930a      	str	r3, [sp, #40]	; 0x28
  40a3e8:	e6fc      	b.n	40a1e4 <.LVL87>

0040a3ea <.LVL138>:
  40a3ea:	f1c1 0301 	rsb	r3, r1, #1

0040a3ee <.LVL139>:
  40a3ee:	9307      	str	r3, [sp, #28]

0040a3f0 <.LVL140>:
  40a3f0:	2300      	movs	r3, #0

0040a3f2 <.LVL141>:
  40a3f2:	9306      	str	r3, [sp, #24]

0040a3f4 <.LVL142>:
  40a3f4:	e6eb      	b.n	40a1ce <.LVL81>

0040a3f6 <.LVL143>:
  40a3f6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
  40a3fa:	eeb4 7b46 	vcmp.f64	d7, d6
  40a3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40a402:	f43f aec8 	beq.w	40a196 <.LVL73>
  40a406:	9b02      	ldr	r3, [sp, #8]
  40a408:	3b01      	subs	r3, #1
  40a40a:	9302      	str	r3, [sp, #8]

0040a40c <.LVL144>:
  40a40c:	e6c3      	b.n	40a196 <.LVL73>

0040a40e <.LVL145>:
  40a40e:	9b05      	ldr	r3, [sp, #20]
  40a410:	9f07      	ldr	r7, [sp, #28]
  40a412:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40a414:	930d      	str	r3, [sp, #52]	; 0x34

0040a416 <.LVL146>:
  40a416:	2f00      	cmp	r7, #0
  40a418:	dd0c      	ble.n	40a434 <.LVL151>
  40a41a:	9906      	ldr	r1, [sp, #24]
  40a41c:	2900      	cmp	r1, #0
  40a41e:	460b      	mov	r3, r1
  40a420:	dd08      	ble.n	40a434 <.LVL151>
  40a422:	42b9      	cmp	r1, r7
  40a424:	9a07      	ldr	r2, [sp, #28]
  40a426:	bfa8      	it	ge
  40a428:	463b      	movge	r3, r7

0040a42a <.LVL147>:
  40a42a:	1ad2      	subs	r2, r2, r3
  40a42c:	1aff      	subs	r7, r7, r3

0040a42e <.LVL148>:
  40a42e:	1acb      	subs	r3, r1, r3

0040a430 <.LVL149>:
  40a430:	9207      	str	r2, [sp, #28]

0040a432 <.LVL150>:
  40a432:	9306      	str	r3, [sp, #24]

0040a434 <.LVL151>:
  40a434:	9b05      	ldr	r3, [sp, #20]
  40a436:	b1eb      	cbz	r3, 40a474 <.LVL162>
  40a438:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a43a:	2b00      	cmp	r3, #0
  40a43c:	f000 8273 	beq.w	40a926 <.LVL308>
  40a440:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40a442:	2b00      	cmp	r3, #0
  40a444:	dd11      	ble.n	40a46a <.LVL160>
  40a446:	461a      	mov	r2, r3
  40a448:	4629      	mov	r1, r5
  40a44a:	4620      	mov	r0, r4

0040a44c <.LVL152>:
  40a44c:	f00f fef8 	bl	41a240 <__pow5mult>

0040a450 <.LVL153>:
  40a450:	4642      	mov	r2, r8
  40a452:	4601      	mov	r1, r0
  40a454:	4605      	mov	r5, r0

0040a456 <.LVL154>:
  40a456:	4620      	mov	r0, r4

0040a458 <.LVL155>:
  40a458:	f00c fec2 	bl	4171e0 <.LBE11>

0040a45c <.LVL156>:
  40a45c:	4641      	mov	r1, r8
  40a45e:	900e      	str	r0, [sp, #56]	; 0x38

0040a460 <.LVL157>:
  40a460:	4620      	mov	r0, r4

0040a462 <.LVL158>:
  40a462:	f014 fb9f 	bl	41eba4 <_Bfree>

0040a466 <.LVL159>:
  40a466:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40a468:	4698      	mov	r8, r3

0040a46a <.LVL160>:
  40a46a:	9b05      	ldr	r3, [sp, #20]
  40a46c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40a46e:	1a9a      	subs	r2, r3, r2

0040a470 <.LVL161>:
  40a470:	f040 825a 	bne.w	40a928 <.LVL308+0x2>

0040a474 <.LVL162>:
  40a474:	2101      	movs	r1, #1
  40a476:	4620      	mov	r0, r4

0040a478 <.LVL163>:
  40a478:	f014 fb9e 	bl	41ebb8 <__i2b>

0040a47c <.LVL164>:
  40a47c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a47e:	9005      	str	r0, [sp, #20]

0040a480 <.LVL165>:
  40a480:	2b00      	cmp	r3, #0
  40a482:	dd1f      	ble.n	40a4c4 <.LVL174>
  40a484:	4601      	mov	r1, r0
  40a486:	461a      	mov	r2, r3
  40a488:	4620      	mov	r0, r4

0040a48a <.LVL166>:
  40a48a:	f00f fed9 	bl	41a240 <__pow5mult>

0040a48e <.LVL167>:
  40a48e:	9b01      	ldr	r3, [sp, #4]
  40a490:	9005      	str	r0, [sp, #20]

0040a492 <.LVL168>:
  40a492:	2b01      	cmp	r3, #1
  40a494:	f340 820f 	ble.w	40a8b6 <.LVL293>
  40a498:	2300      	movs	r3, #0
  40a49a:	930d      	str	r3, [sp, #52]	; 0x34

0040a49c <.LVL169>:
  40a49c:	9a05      	ldr	r2, [sp, #20]
  40a49e:	6913      	ldr	r3, [r2, #16]
  40a4a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40a4a4:	6918      	ldr	r0, [r3, #16]
  40a4a6:	f013 f9c1 	bl	41d82c <__hi0bits>

0040a4aa <.LVL170>:
  40a4aa:	f1c0 0020 	rsb	r0, r0, #32
  40a4ae:	e013      	b.n	40a4d8 <.LVL175+0x8>

0040a4b0 <.LVL171>:
  40a4b0:	f1c3 0320 	rsb	r3, r3, #32

0040a4b4 <.LVL172>:
  40a4b4:	fa0a f303 	lsl.w	r3, sl, r3
  40a4b8:	ee07 3a90 	vmov	s15, r3
  40a4bc:	e6b8      	b.n	40a230 <.LVL97>

0040a4be <.LVL173>:
  40a4be:	2300      	movs	r3, #0
  40a4c0:	930b      	str	r3, [sp, #44]	; 0x2c
  40a4c2:	e67d      	b.n	40a1c0 <.LVL77>

0040a4c4 <.LVL174>:
  40a4c4:	9b01      	ldr	r3, [sp, #4]
  40a4c6:	2b01      	cmp	r3, #1
  40a4c8:	f340 823e 	ble.w	40a948 <.LVL314>
  40a4cc:	2300      	movs	r3, #0
  40a4ce:	930d      	str	r3, [sp, #52]	; 0x34

0040a4d0 <.LVL175>:
  40a4d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a4d2:	2001      	movs	r0, #1
  40a4d4:	2b00      	cmp	r3, #0
  40a4d6:	d1e1      	bne.n	40a49c <.LVL169>
  40a4d8:	9a06      	ldr	r2, [sp, #24]
  40a4da:	4410      	add	r0, r2

0040a4dc <.LVL176>:
  40a4dc:	f010 001f 	ands.w	r0, r0, #31

0040a4e0 <.LVL177>:
  40a4e0:	f000 809e 	beq.w	40a620 <.LVL217>
  40a4e4:	f1c0 0320 	rsb	r3, r0, #32

0040a4e8 <.LVL178>:
  40a4e8:	2b04      	cmp	r3, #4
  40a4ea:	f340 83d4 	ble.w	40ac96 <.LVL446>
  40a4ee:	9b07      	ldr	r3, [sp, #28]

0040a4f0 <.LVL179>:
  40a4f0:	f1c0 001c 	rsb	r0, r0, #28

0040a4f4 <.LVL180>:
  40a4f4:	4403      	add	r3, r0
  40a4f6:	9307      	str	r3, [sp, #28]

0040a4f8 <.LVL181>:
  40a4f8:	4613      	mov	r3, r2

0040a4fa <.LVL182>:
  40a4fa:	4403      	add	r3, r0
  40a4fc:	4407      	add	r7, r0
  40a4fe:	9306      	str	r3, [sp, #24]

0040a500 <.LVL184>:
  40a500:	9b07      	ldr	r3, [sp, #28]
  40a502:	2b00      	cmp	r3, #0
  40a504:	dd05      	ble.n	40a512 <.LVL185+0x2>
  40a506:	4641      	mov	r1, r8
  40a508:	461a      	mov	r2, r3
  40a50a:	4620      	mov	r0, r4
  40a50c:	f00f fcfc 	bl	419f08 <__lshift>

0040a510 <.LVL185>:
  40a510:	4680      	mov	r8, r0
  40a512:	9b06      	ldr	r3, [sp, #24]
  40a514:	2b00      	cmp	r3, #0
  40a516:	dd05      	ble.n	40a524 <.LVL187+0x2>
  40a518:	461a      	mov	r2, r3
  40a51a:	9905      	ldr	r1, [sp, #20]
  40a51c:	4620      	mov	r0, r4
  40a51e:	f00f fcf3 	bl	419f08 <__lshift>

0040a522 <.LVL187>:
  40a522:	9005      	str	r0, [sp, #20]
  40a524:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40a526:	2b00      	cmp	r3, #0
  40a528:	f040 8083 	bne.w	40a632 <.LVL223>
  40a52c:	2e00      	cmp	r6, #0
  40a52e:	f340 821e 	ble.w	40a96e <.LVL322>
  40a532:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a534:	2b00      	cmp	r3, #0
  40a536:	f000 8096 	beq.w	40a666 <.LVL230>

0040a53a <.LVL189>:
  40a53a:	2f00      	cmp	r7, #0
  40a53c:	dd05      	ble.n	40a54a <.LVL191>
  40a53e:	4629      	mov	r1, r5
  40a540:	463a      	mov	r2, r7
  40a542:	4620      	mov	r0, r4
  40a544:	f00f fce0 	bl	419f08 <__lshift>

0040a548 <.LVL190>:
  40a548:	4605      	mov	r5, r0

0040a54a <.LVL191>:
  40a54a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40a54c:	2b00      	cmp	r3, #0
  40a54e:	f040 82ce 	bne.w	40aaee <.LVL378>
  40a552:	462f      	mov	r7, r5

0040a554 <.LVL192>:
  40a554:	9b08      	ldr	r3, [sp, #32]
  40a556:	3e01      	subs	r6, #1
  40a558:	199a      	adds	r2, r3, r6
  40a55a:	9209      	str	r2, [sp, #36]	; 0x24
  40a55c:	f00a 0201 	and.w	r2, sl, #1
  40a560:	920a      	str	r2, [sp, #40]	; 0x28

0040a562 <.LVL193>:
  40a562:	461e      	mov	r6, r3

0040a564 <.LVL194>:
  40a564:	f8dd b014 	ldr.w	fp, [sp, #20]
  40a568:	4640      	mov	r0, r8
  40a56a:	4659      	mov	r1, fp
  40a56c:	f00c fc80 	bl	416e70 <.LFE10>

0040a570 <.LVL195>:
  40a570:	4629      	mov	r1, r5
  40a572:	4682      	mov	sl, r0

0040a574 <.LVL196>:
  40a574:	4640      	mov	r0, r8
  40a576:	f013 fb87 	bl	41dc88 <.LFE147>

0040a57a <.LVL197>:
  40a57a:	463a      	mov	r2, r7
  40a57c:	4659      	mov	r1, fp
  40a57e:	4681      	mov	r9, r0
  40a580:	4620      	mov	r0, r4
  40a582:	f00d f865 	bl	417650 <.LFE20>

0040a586 <.LVL198>:
  40a586:	68c3      	ldr	r3, [r0, #12]
  40a588:	4683      	mov	fp, r0
  40a58a:	f10a 0230 	add.w	r2, sl, #48	; 0x30

0040a58e <.LVL199>:
  40a58e:	2b00      	cmp	r3, #0
  40a590:	f040 81e5 	bne.w	40a95e <.LVL318>
  40a594:	4601      	mov	r1, r0
  40a596:	4640      	mov	r0, r8

0040a598 <.LVL200>:
  40a598:	9207      	str	r2, [sp, #28]
  40a59a:	f013 fb75 	bl	41dc88 <.LFE147>

0040a59e <.LVL201>:
  40a59e:	4659      	mov	r1, fp
  40a5a0:	9006      	str	r0, [sp, #24]

0040a5a2 <.LVL202>:
  40a5a2:	4620      	mov	r0, r4

0040a5a4 <.LVL203>:
  40a5a4:	f014 fafe 	bl	41eba4 <_Bfree>

0040a5a8 <.LVL204>:
  40a5a8:	9b06      	ldr	r3, [sp, #24]
  40a5aa:	9a07      	ldr	r2, [sp, #28]
  40a5ac:	b933      	cbnz	r3, 40a5bc <.LVL205>
  40a5ae:	9901      	ldr	r1, [sp, #4]
  40a5b0:	b921      	cbnz	r1, 40a5bc <.LVL205>
  40a5b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a5b4:	2b00      	cmp	r3, #0
  40a5b6:	f000 8343 	beq.w	40ac40 <.LVL432>
  40a5ba:	9b01      	ldr	r3, [sp, #4]

0040a5bc <.LVL205>:
  40a5bc:	f1b9 0f00 	cmp.w	r9, #0
  40a5c0:	f2c0 823b 	blt.w	40aa3a <.LVL352>
  40a5c4:	d105      	bne.n	40a5d2 <.LVL205+0x16>
  40a5c6:	9901      	ldr	r1, [sp, #4]
  40a5c8:	b919      	cbnz	r1, 40a5d2 <.LVL205+0x16>
  40a5ca:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a5cc:	2900      	cmp	r1, #0
  40a5ce:	f000 8234 	beq.w	40aa3a <.LVL352>
  40a5d2:	2b00      	cmp	r3, #0
  40a5d4:	f300 829f 	bgt.w	40ab16 <.LVL385>
  40a5d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a5da:	7032      	strb	r2, [r6, #0]
  40a5dc:	f106 0901 	add.w	r9, r6, #1

0040a5e0 <.LVL206>:
  40a5e0:	429e      	cmp	r6, r3
  40a5e2:	46cb      	mov	fp, r9

0040a5e4 <.LVL207>:
  40a5e4:	f000 82a2 	beq.w	40ab2c <.LVL390>
  40a5e8:	4641      	mov	r1, r8
  40a5ea:	2300      	movs	r3, #0
  40a5ec:	220a      	movs	r2, #10
  40a5ee:	4620      	mov	r0, r4
  40a5f0:	f010 ff4a 	bl	41b488 <__multadd>

0040a5f4 <.LVL208>:
  40a5f4:	42bd      	cmp	r5, r7
  40a5f6:	4680      	mov	r8, r0

0040a5f8 <.LVL209>:
  40a5f8:	4629      	mov	r1, r5
  40a5fa:	f04f 0300 	mov.w	r3, #0
  40a5fe:	f04f 020a 	mov.w	r2, #10
  40a602:	4620      	mov	r0, r4

0040a604 <.LVL210>:
  40a604:	f000 81a5 	beq.w	40a952 <.LVL315>

0040a608 <.LVL211>:
  40a608:	f010 ff3e 	bl	41b488 <__multadd>

0040a60c <.LVL212>:
  40a60c:	4639      	mov	r1, r7
  40a60e:	4605      	mov	r5, r0

0040a610 <.LVL213>:
  40a610:	2300      	movs	r3, #0
  40a612:	220a      	movs	r2, #10
  40a614:	4620      	mov	r0, r4

0040a616 <.LVL214>:
  40a616:	f010 ff37 	bl	41b488 <__multadd>

0040a61a <.LVL215>:
  40a61a:	464e      	mov	r6, r9
  40a61c:	4607      	mov	r7, r0

0040a61e <.LVL216>:
  40a61e:	e7a1      	b.n	40a564 <.LVL194>

0040a620 <.LVL217>:
  40a620:	201c      	movs	r0, #28

0040a622 <.LVL218>:
  40a622:	9b07      	ldr	r3, [sp, #28]
  40a624:	4403      	add	r3, r0
  40a626:	9307      	str	r3, [sp, #28]

0040a628 <.LVL219>:
  40a628:	9b06      	ldr	r3, [sp, #24]

0040a62a <.LVL220>:
  40a62a:	4403      	add	r3, r0
  40a62c:	4407      	add	r7, r0
  40a62e:	9306      	str	r3, [sp, #24]

0040a630 <.LVL222>:
  40a630:	e766      	b.n	40a500 <.LVL184>

0040a632 <.LVL223>:
  40a632:	9905      	ldr	r1, [sp, #20]
  40a634:	4640      	mov	r0, r8
  40a636:	f013 fb27 	bl	41dc88 <.LFE147>

0040a63a <.LVL224>:
  40a63a:	2800      	cmp	r0, #0
  40a63c:	f6bf af76 	bge.w	40a52c <.LVL187+0xa>
  40a640:	9e02      	ldr	r6, [sp, #8]

0040a642 <.LVL225>:
  40a642:	4641      	mov	r1, r8
  40a644:	2300      	movs	r3, #0
  40a646:	220a      	movs	r2, #10
  40a648:	4620      	mov	r0, r4
  40a64a:	3e01      	subs	r6, #1
  40a64c:	9602      	str	r6, [sp, #8]

0040a64e <.LVL226>:
  40a64e:	f010 ff1b 	bl	41b488 <__multadd>

0040a652 <.LVL227>:
  40a652:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a654:	4680      	mov	r8, r0

0040a656 <.LVL228>:
  40a656:	2b00      	cmp	r3, #0
  40a658:	f040 8302 	bne.w	40ac60 <.LVL436>

0040a65c <.LVL229>:
  40a65c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40a65e:	2b00      	cmp	r3, #0
  40a660:	f340 830a 	ble.w	40ac78 <.LVL440>
  40a664:	461e      	mov	r6, r3

0040a666 <.LVL230>:
  40a666:	f8dd a020 	ldr.w	sl, [sp, #32]

0040a66a <.LVL231>:
  40a66a:	f8dd b014 	ldr.w	fp, [sp, #20]
  40a66e:	4657      	mov	r7, sl

0040a670 <.LVL232>:
  40a670:	e002      	b.n	40a678 <.LVL235>

0040a672 <.LVL233>:
  40a672:	f010 ff09 	bl	41b488 <__multadd>

0040a676 <.LVL234>:
  40a676:	4680      	mov	r8, r0

0040a678 <.LVL235>:
  40a678:	4659      	mov	r1, fp
  40a67a:	4640      	mov	r0, r8
  40a67c:	f00c fbf8 	bl	416e70 <.LFE10>

0040a680 <.LVL236>:
  40a680:	f100 0930 	add.w	r9, r0, #48	; 0x30

0040a684 <.LVL237>:
  40a684:	f807 9b01 	strb.w	r9, [r7], #1

0040a688 <.LVL238>:
  40a688:	eba7 030a 	sub.w	r3, r7, sl
  40a68c:	42b3      	cmp	r3, r6
  40a68e:	f04f 020a 	mov.w	r2, #10
  40a692:	f04f 0300 	mov.w	r3, #0
  40a696:	4641      	mov	r1, r8
  40a698:	4620      	mov	r0, r4
  40a69a:	dbea      	blt.n	40a672 <.LVL233>

0040a69c <.LVL239>:
  40a69c:	9b08      	ldr	r3, [sp, #32]
  40a69e:	2e01      	cmp	r6, #1
  40a6a0:	bfac      	ite	ge
  40a6a2:	199b      	addge	r3, r3, r6
  40a6a4:	3301      	addlt	r3, #1
  40a6a6:	469b      	mov	fp, r3
  40a6a8:	f04f 0a00 	mov.w	sl, #0

0040a6ac <.LVL240>:
  40a6ac:	4641      	mov	r1, r8
  40a6ae:	2201      	movs	r2, #1
  40a6b0:	4620      	mov	r0, r4
  40a6b2:	f00f fc29 	bl	419f08 <__lshift>

0040a6b6 <.LVL241>:
  40a6b6:	9905      	ldr	r1, [sp, #20]
  40a6b8:	4680      	mov	r8, r0

0040a6ba <.LVL242>:
  40a6ba:	f013 fae5 	bl	41dc88 <.LFE147>

0040a6be <.LVL243>:
  40a6be:	2800      	cmp	r0, #0
  40a6c0:	f340 81d7 	ble.w	40aa72 <.LVL362>
  40a6c4:	f81b 2c01 	ldrb.w	r2, [fp, #-1]

0040a6c8 <.L142>:
  40a6c8:	9908      	ldr	r1, [sp, #32]
  40a6ca:	f10b 33ff 	add.w	r3, fp, #4294967295
  40a6ce:	e004      	b.n	40a6da <.LVL246>

0040a6d0 <.LVL245>:
  40a6d0:	428b      	cmp	r3, r1
  40a6d2:	f000 8168 	beq.w	40a9a6 <.LVL331>
  40a6d6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!

0040a6da <.LVL246>:
  40a6da:	2a39      	cmp	r2, #57	; 0x39
  40a6dc:	f103 0b01 	add.w	fp, r3, #1

0040a6e0 <.LVL247>:
  40a6e0:	d0f6      	beq.n	40a6d0 <.LVL245>

0040a6e2 <.LVL248>:
  40a6e2:	3201      	adds	r2, #1
  40a6e4:	701a      	strb	r2, [r3, #0]

0040a6e6 <.L135>:
  40a6e6:	9905      	ldr	r1, [sp, #20]
  40a6e8:	4620      	mov	r0, r4
  40a6ea:	f014 fa5b 	bl	41eba4 <_Bfree>

0040a6ee <.LVL250>:
  40a6ee:	2d00      	cmp	r5, #0
  40a6f0:	f43f ae22 	beq.w	40a338 <.L76>
  40a6f4:	f1ba 0f00 	cmp.w	sl, #0
  40a6f8:	d005      	beq.n	40a706 <.LVL251>
  40a6fa:	45aa      	cmp	sl, r5
  40a6fc:	d003      	beq.n	40a706 <.LVL251>
  40a6fe:	4651      	mov	r1, sl
  40a700:	4620      	mov	r0, r4
  40a702:	f014 fa4f 	bl	41eba4 <_Bfree>

0040a706 <.LVL251>:
  40a706:	4629      	mov	r1, r5
  40a708:	4620      	mov	r0, r4
  40a70a:	f014 fa4b 	bl	41eba4 <_Bfree>

0040a70e <.LVL252>:
  40a70e:	e613      	b.n	40a338 <.L76>

0040a710 <.LVL253>:
  40a710:	2300      	movs	r3, #0
  40a712:	9309      	str	r3, [sp, #36]	; 0x24

0040a714 <.LVL254>:
  40a714:	9b02      	ldr	r3, [sp, #8]
  40a716:	444b      	add	r3, r9
  40a718:	1c5e      	adds	r6, r3, #1

0040a71a <.LVL255>:
  40a71a:	2e01      	cmp	r6, #1
  40a71c:	4637      	mov	r7, r6
  40a71e:	930c      	str	r3, [sp, #48]	; 0x30

0040a720 <.LVL256>:
  40a720:	bfb8      	it	lt
  40a722:	2701      	movlt	r7, #1
  40a724:	960e      	str	r6, [sp, #56]	; 0x38

0040a726 <.LVL257>:
  40a726:	2100      	movs	r1, #0
  40a728:	2f17      	cmp	r7, #23
  40a72a:	6461      	str	r1, [r4, #68]	; 0x44
  40a72c:	d90a      	bls.n	40a744 <.LVL260>
  40a72e:	2201      	movs	r2, #1
  40a730:	2304      	movs	r3, #4

0040a732 <.LVL258>:
  40a732:	005b      	lsls	r3, r3, #1
  40a734:	f103 0014 	add.w	r0, r3, #20
  40a738:	4287      	cmp	r7, r0
  40a73a:	4611      	mov	r1, r2
  40a73c:	f102 0201 	add.w	r2, r2, #1
  40a740:	d2f7      	bcs.n	40a732 <.LVL258>
  40a742:	6461      	str	r1, [r4, #68]	; 0x44

0040a744 <.LVL260>:
  40a744:	4620      	mov	r0, r4
  40a746:	f012 fd81 	bl	41d24c <.LFE2>

0040a74a <.LVL261>:
  40a74a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40a74c:	9008      	str	r0, [sp, #32]
  40a74e:	2b0e      	cmp	r3, #14
  40a750:	6420      	str	r0, [r4, #64]	; 0x40

0040a752 <.LVL262>:
  40a752:	f63f ad88 	bhi.w	40a266 <.LVL104>

0040a756 <.LVL263>:
  40a756:	2d00      	cmp	r5, #0
  40a758:	f43f ad85 	beq.w	40a266 <.LVL104>

0040a75c <.LVL264>:
  40a75c:	9802      	ldr	r0, [sp, #8]
  40a75e:	2800      	cmp	r0, #0
  40a760:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38

0040a764 <.LVL265>:
  40a764:	f340 819a 	ble.w	40aa9c <.LVL368>
  40a768:	4ac8      	ldr	r2, [pc, #800]	; (40aa8c <.LVL365+0x4>)
  40a76a:	f000 030f 	and.w	r3, r0, #15
  40a76e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  40a772:	1103      	asrs	r3, r0, #4
  40a774:	06df      	lsls	r7, r3, #27
  40a776:	ed92 7b00 	vldr	d7, [r2]

0040a77a <.LVL266>:
  40a77a:	f140 814d 	bpl.w	40aa18 <.LVL348>
  40a77e:	4ac4      	ldr	r2, [pc, #784]	; (40aa90 <.LVL365+0x8>)
  40a780:	ed92 6b08 	vldr	d6, [r2, #32]
  40a784:	ec4b ab14 	vmov	d4, sl, fp

0040a788 <.LVL267>:
  40a788:	f003 030f 	and.w	r3, r3, #15
  40a78c:	2103      	movs	r1, #3
  40a78e:	ee84 5b06 	vdiv.f64	d5, d4, d6

0040a792 <.LVL269>:
  40a792:	b15b      	cbz	r3, 40a7ac <.LVL273+0x6>
  40a794:	4abe      	ldr	r2, [pc, #760]	; (40aa90 <.LVL365+0x8>)

0040a796 <.LVL270>:
  40a796:	07dd      	lsls	r5, r3, #31
  40a798:	d504      	bpl.n	40a7a4 <.LVL272>
  40a79a:	ed92 6b00 	vldr	d6, [r2]
  40a79e:	3101      	adds	r1, #1
  40a7a0:	ee27 7b06 	vmul.f64	d7, d7, d6

0040a7a4 <.LVL272>:
  40a7a4:	105b      	asrs	r3, r3, #1

0040a7a6 <.LVL273>:
  40a7a6:	f102 0208 	add.w	r2, r2, #8
  40a7aa:	d1f4      	bne.n	40a796 <.LVL270>
  40a7ac:	ee85 6b07 	vdiv.f64	d6, d5, d7

0040a7b0 <.LVL274>:
  40a7b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40a7b2:	b13b      	cbz	r3, 40a7c4 <.LVL275>
  40a7b4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
  40a7b8:	eeb4 6bc7 	vcmpe.f64	d6, d7
  40a7bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40a7c0:	f100 8206 	bmi.w	40abd0 <.LVL416>

0040a7c4 <.LVL275>:
  40a7c4:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
  40a7c8:	ee07 1a90 	vmov	s15, r1
  40a7cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  40a7d0:	eea7 5b06 	vfma.f64	d5, d7, d6
  40a7d4:	ec51 0b15 	vmov	r0, r1, d5
  40a7d8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000

0040a7dc <.LVL276>:
  40a7dc:	2e00      	cmp	r6, #0
  40a7de:	f000 80f8 	beq.w	40a9d2 <.LVL336>
  40a7e2:	9a02      	ldr	r2, [sp, #8]
  40a7e4:	4635      	mov	r5, r6

0040a7e6 <.LVL277>:
  40a7e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a7e8:	2b00      	cmp	r3, #0
  40a7ea:	f000 81a7 	beq.w	40ab3c <.LVL396>
  40a7ee:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
  40a7f2:	4ba6      	ldr	r3, [pc, #664]	; (40aa8c <.LVL365+0x4>)
  40a7f4:	9f08      	ldr	r7, [sp, #32]
  40a7f6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40a7fa:	ed13 4b02 	vldr	d4, [r3, #-8]
  40a7fe:	eebd 7bc6 	vcvt.s32.f64	s14, d6
  40a802:	ee83 5b04 	vdiv.f64	d5, d3, d4
  40a806:	ee17 3a10 	vmov	r3, s14

0040a80a <.LVL278>:
  40a80a:	ec41 0b14 	vmov	d4, r0, r1
  40a80e:	3330      	adds	r3, #48	; 0x30
  40a810:	b2db      	uxtb	r3, r3
  40a812:	ee35 5b44 	vsub.f64	d5, d5, d4

0040a816 <.LVL279>:
  40a816:	eeb8 7bc7 	vcvt.f64.s32	d7, s14

0040a81a <.LVL280>:
  40a81a:	ee36 7b47 	vsub.f64	d7, d6, d7
  40a81e:	eeb4 5bc7 	vcmpe.f64	d5, d7
  40a822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40a826:	703b      	strb	r3, [r7, #0]
  40a828:	f107 0b01 	add.w	fp, r7, #1

0040a82c <.LVL281>:
  40a82c:	dc31      	bgt.n	40a892 <.LVL288+0xe>
  40a82e:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
  40a832:	ee33 6b47 	vsub.f64	d6, d3, d7

0040a836 <.LVL282>:
  40a836:	eeb4 5bc6 	vcmpe.f64	d5, d6
  40a83a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40a83e:	f300 81fa 	bgt.w	40ac36 <.LVL428>

0040a842 <.LVL283>:
  40a842:	2d01      	cmp	r5, #1
  40a844:	f000 8126 	beq.w	40aa94 <.LDL1>
  40a848:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
  40a84c:	9b08      	ldr	r3, [sp, #32]
  40a84e:	1959      	adds	r1, r3, r5
  40a850:	e00a      	b.n	40a868 <.LVL285>

0040a852 <.LVL284>:
  40a852:	ee33 6b47 	vsub.f64	d6, d3, d7
  40a856:	eeb4 6bc5 	vcmpe.f64	d6, d5
  40a85a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40a85e:	f100 81ea 	bmi.w	40ac36 <.LVL428>
  40a862:	458b      	cmp	fp, r1
  40a864:	f000 8116 	beq.w	40aa94 <.LDL1>

0040a868 <.LVL285>:
  40a868:	ee27 7b04 	vmul.f64	d7, d7, d4
  40a86c:	ee25 5b04 	vmul.f64	d5, d5, d4
  40a870:	eebd 6bc7 	vcvt.s32.f64	s12, d7

0040a874 <.LVL286>:
  40a874:	ee16 3a10 	vmov	r3, s12
  40a878:	3330      	adds	r3, #48	; 0x30
  40a87a:	b2db      	uxtb	r3, r3
  40a87c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12

0040a880 <.LVL287>:
  40a880:	ee37 7b46 	vsub.f64	d7, d7, d6

0040a884 <.LVL288>:
  40a884:	eeb4 7bc5 	vcmpe.f64	d7, d5
  40a888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40a88c:	f80b 3b01 	strb.w	r3, [fp], #1
  40a890:	d5df      	bpl.n	40a852 <.LVL284>
  40a892:	9202      	str	r2, [sp, #8]

0040a894 <.LVL289>:
  40a894:	e550      	b.n	40a338 <.L76>

0040a896 <.LVL290>:
  40a896:	2300      	movs	r3, #0
  40a898:	9309      	str	r3, [sp, #36]	; 0x24

0040a89a <.LVL291>:
  40a89a:	f1b9 0f00 	cmp.w	r9, #0
  40a89e:	f340 80bf 	ble.w	40aa20 <.LVL349>
  40a8a2:	464f      	mov	r7, r9
  40a8a4:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  40a8a8:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  40a8ac:	464e      	mov	r6, r9
  40a8ae:	e73a      	b.n	40a726 <.LVL257>

0040a8b0 <.LVL292>:
  40a8b0:	2301      	movs	r3, #1
  40a8b2:	9309      	str	r3, [sp, #36]	; 0x24
  40a8b4:	e7f1      	b.n	40a89a <.LVL291>

0040a8b6 <.LVL293>:
  40a8b6:	f1ba 0f00 	cmp.w	sl, #0
  40a8ba:	f47f aded 	bne.w	40a498 <.LVL168+0x6>

0040a8be <.LVL294>:
  40a8be:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40a8c2:	2b00      	cmp	r3, #0
  40a8c4:	f47f ae02 	bne.w	40a4cc <.LVL174+0x8>
  40a8c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
  40a8cc:	0d1b      	lsrs	r3, r3, #20
  40a8ce:	051b      	lsls	r3, r3, #20
  40a8d0:	2b00      	cmp	r3, #0
  40a8d2:	f000 81b3 	beq.w	40ac3c <.LVL430>
  40a8d6:	9b07      	ldr	r3, [sp, #28]
  40a8d8:	3301      	adds	r3, #1
  40a8da:	9307      	str	r3, [sp, #28]

0040a8dc <.LVL295>:
  40a8dc:	9b06      	ldr	r3, [sp, #24]

0040a8de <.LVL296>:
  40a8de:	3301      	adds	r3, #1
  40a8e0:	9306      	str	r3, [sp, #24]

0040a8e2 <.LVL297>:
  40a8e2:	2301      	movs	r3, #1

0040a8e4 <.LVL298>:
  40a8e4:	930d      	str	r3, [sp, #52]	; 0x34

0040a8e6 <.LVL299>:
  40a8e6:	e5f3      	b.n	40a4d0 <.LVL175>

0040a8e8 <.LVL300>:
  40a8e8:	2e00      	cmp	r6, #0
  40a8ea:	f73f accb 	bgt.w	40a284 <.LVL106>

0040a8ee <.LVL301>:
  40a8ee:	f040 8083 	bne.w	40a9f8 <.LVL338>
  40a8f2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
  40a8f6:	ee24 4b07 	vmul.f64	d4, d4, d7

0040a8fa <.LVL302>:
  40a8fa:	ec4b ab17 	vmov	d7, sl, fp
  40a8fe:	eeb4 4bc7 	vcmpe.f64	d4, d7
  40a902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40a906:	4635      	mov	r5, r6
  40a908:	9605      	str	r6, [sp, #20]

0040a90a <.LVL303>:
  40a90a:	db43      	blt.n	40a994 <.L73>

0040a90c <.L74>:
  40a90c:	ea6f 0309 	mvn.w	r3, r9
  40a910:	f8dd b020 	ldr.w	fp, [sp, #32]
  40a914:	9302      	str	r3, [sp, #8]

0040a916 <.LVL305>:
  40a916:	9905      	ldr	r1, [sp, #20]
  40a918:	4620      	mov	r0, r4

0040a91a <.LVL306>:
  40a91a:	f014 f943 	bl	41eba4 <_Bfree>

0040a91e <.LVL307>:
  40a91e:	2d00      	cmp	r5, #0
  40a920:	f43f ad0a 	beq.w	40a338 <.L76>
  40a924:	e6ef      	b.n	40a706 <.LVL251>

0040a926 <.LVL308>:
  40a926:	9a05      	ldr	r2, [sp, #20]
  40a928:	4641      	mov	r1, r8
  40a92a:	4620      	mov	r0, r4

0040a92c <.LVL309>:
  40a92c:	f00f fc88 	bl	41a240 <__pow5mult>

0040a930 <.LVL310>:
  40a930:	4680      	mov	r8, r0

0040a932 <.LVL311>:
  40a932:	e59f      	b.n	40a474 <.LVL162>

0040a934 <.LVL312>:
  40a934:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40a936:	2a00      	cmp	r2, #0
  40a938:	f000 813e 	beq.w	40abb8 <.LVL413>
  40a93c:	9a05      	ldr	r2, [sp, #20]
  40a93e:	920d      	str	r2, [sp, #52]	; 0x34

0040a940 <.LVL313>:
  40a940:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40a944:	9f07      	ldr	r7, [sp, #28]
  40a946:	e51f      	b.n	40a388 <.LVL127>

0040a948 <.LVL314>:
  40a948:	f1ba 0f00 	cmp.w	sl, #0
  40a94c:	f47f adbe 	bne.w	40a4cc <.LVL174+0x8>
  40a950:	e7b5      	b.n	40a8be <.LVL294>

0040a952 <.LVL315>:
  40a952:	f010 fd99 	bl	41b488 <__multadd>

0040a956 <.LVL316>:
  40a956:	464e      	mov	r6, r9
  40a958:	4605      	mov	r5, r0

0040a95a <.LVL317>:
  40a95a:	4607      	mov	r7, r0
  40a95c:	e602      	b.n	40a564 <.LVL194>

0040a95e <.LVL318>:
  40a95e:	4601      	mov	r1, r0
  40a960:	4620      	mov	r0, r4

0040a962 <.LVL319>:
  40a962:	9206      	str	r2, [sp, #24]

0040a964 <.LVL320>:
  40a964:	f014 f91e 	bl	41eba4 <_Bfree>

0040a968 <.LVL321>:
  40a968:	2301      	movs	r3, #1
  40a96a:	9a06      	ldr	r2, [sp, #24]
  40a96c:	e626      	b.n	40a5bc <.LVL205>

0040a96e <.LVL322>:
  40a96e:	9b01      	ldr	r3, [sp, #4]
  40a970:	2b02      	cmp	r3, #2
  40a972:	f77f adde 	ble.w	40a532 <.LVL187+0x10>

0040a976 <.LVL323>:
  40a976:	2e00      	cmp	r6, #0
  40a978:	d1c8      	bne.n	40a90c <.L74>
  40a97a:	4633      	mov	r3, r6
  40a97c:	9905      	ldr	r1, [sp, #20]
  40a97e:	2205      	movs	r2, #5
  40a980:	4620      	mov	r0, r4
  40a982:	f010 fd81 	bl	41b488 <__multadd>

0040a986 <.LVL324>:
  40a986:	4601      	mov	r1, r0
  40a988:	9005      	str	r0, [sp, #20]

0040a98a <.LVL325>:
  40a98a:	4640      	mov	r0, r8

0040a98c <.LVL326>:
  40a98c:	f013 f97c 	bl	41dc88 <.LFE147>

0040a990 <.LVL327>:
  40a990:	2800      	cmp	r0, #0
  40a992:	ddbb      	ble.n	40a90c <.L74>

0040a994 <.L73>:
  40a994:	9a02      	ldr	r2, [sp, #8]
  40a996:	9908      	ldr	r1, [sp, #32]
  40a998:	2331      	movs	r3, #49	; 0x31
  40a99a:	3201      	adds	r2, #1
  40a99c:	9202      	str	r2, [sp, #8]

0040a99e <.LVL329>:
  40a99e:	700b      	strb	r3, [r1, #0]
  40a9a0:	f101 0b01 	add.w	fp, r1, #1

0040a9a4 <.LVL330>:
  40a9a4:	e7b7      	b.n	40a916 <.LVL305>

0040a9a6 <.LVL331>:
  40a9a6:	9a02      	ldr	r2, [sp, #8]
  40a9a8:	3201      	adds	r2, #1
  40a9aa:	9202      	str	r2, [sp, #8]

0040a9ac <.LVL332>:
  40a9ac:	9a08      	ldr	r2, [sp, #32]

0040a9ae <.LVL333>:
  40a9ae:	2331      	movs	r3, #49	; 0x31
  40a9b0:	7013      	strb	r3, [r2, #0]
  40a9b2:	e698      	b.n	40a6e6 <.L135>

0040a9b4 <.LVL334>:
  40a9b4:	2301      	movs	r3, #1
  40a9b6:	9309      	str	r3, [sp, #36]	; 0x24
  40a9b8:	e6ac      	b.n	40a714 <.LVL254>

0040a9ba <.LVL335>:
  40a9ba:	ee07 1a90 	vmov	s15, r1
  40a9be:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
  40a9c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  40a9c6:	eea6 5b07 	vfma.f64	d5, d6, d7
  40a9ca:	ec51 0b15 	vmov	r0, r1, d5
  40a9ce:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000

0040a9d2 <.LVL336>:
  40a9d2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
  40a9d6:	ee36 7b47 	vsub.f64	d7, d6, d7

0040a9da <.LVL337>:
  40a9da:	ec41 0b16 	vmov	d6, r0, r1
  40a9de:	eeb4 7bc6 	vcmpe.f64	d7, d6
  40a9e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40a9e6:	f300 80a5 	bgt.w	40ab34 <.LVL394>
  40a9ea:	eeb1 6b46 	vneg.f64	d6, d6
  40a9ee:	eeb4 7bc6 	vcmpe.f64	d7, d6
  40a9f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40a9f6:	d54d      	bpl.n	40aa94 <.LDL1>

0040a9f8 <.LVL338>:
  40a9f8:	2300      	movs	r3, #0
  40a9fa:	9305      	str	r3, [sp, #20]

0040a9fc <.LVL339>:
  40a9fc:	461d      	mov	r5, r3
  40a9fe:	e785      	b.n	40a90c <.L74>

0040aa00 <.LVL340>:
  40aa00:	9808      	ldr	r0, [sp, #32]
  40aa02:	f7ff bb6f 	b.w	40a0e4 <.LVL57>

0040aa06 <.LVL341>:
  40aa06:	9b05      	ldr	r3, [sp, #20]
  40aa08:	990a      	ldr	r1, [sp, #40]	; 0x28

0040aa0a <.LVL342>:
  40aa0a:	9205      	str	r2, [sp, #20]

0040aa0c <.LVL343>:
  40aa0c:	1ad3      	subs	r3, r2, r3

0040aa0e <.LVL344>:
  40aa0e:	4419      	add	r1, r3
  40aa10:	2300      	movs	r3, #0

0040aa12 <.LVL345>:
  40aa12:	910a      	str	r1, [sp, #40]	; 0x28

0040aa14 <.LVL346>:
  40aa14:	930d      	str	r3, [sp, #52]	; 0x34

0040aa16 <.LVL347>:
  40aa16:	e4b2      	b.n	40a37e <.LVL126>

0040aa18 <.LVL348>:
  40aa18:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
  40aa1c:	2102      	movs	r1, #2
  40aa1e:	e6b8      	b.n	40a792 <.LVL269>

0040aa20 <.LVL349>:
  40aa20:	2100      	movs	r1, #0
  40aa22:	6461      	str	r1, [r4, #68]	; 0x44
  40aa24:	4620      	mov	r0, r4
  40aa26:	f012 fc11 	bl	41d24c <.LFE2>

0040aa2a <.LVL350>:
  40aa2a:	f04f 0901 	mov.w	r9, #1
  40aa2e:	9008      	str	r0, [sp, #32]
  40aa30:	6420      	str	r0, [r4, #64]	; 0x40

0040aa32 <.LVL351>:
  40aa32:	464e      	mov	r6, r9
  40aa34:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  40aa38:	e68d      	b.n	40a756 <.LVL263>

0040aa3a <.LVL352>:
  40aa3a:	2b00      	cmp	r3, #0
  40aa3c:	4691      	mov	r9, r2

0040aa3e <.LVL353>:
  40aa3e:	dd11      	ble.n	40aa64 <.LVL359>
  40aa40:	4641      	mov	r1, r8
  40aa42:	2201      	movs	r2, #1
  40aa44:	4620      	mov	r0, r4
  40aa46:	f00f fa5f 	bl	419f08 <__lshift>

0040aa4a <.LVL354>:
  40aa4a:	9905      	ldr	r1, [sp, #20]
  40aa4c:	4680      	mov	r8, r0

0040aa4e <.LVL355>:
  40aa4e:	f013 f91b 	bl	41dc88 <.LFE147>

0040aa52 <.LVL356>:
  40aa52:	2800      	cmp	r0, #0
  40aa54:	f340 80fd 	ble.w	40ac52 <.LVL435>

0040aa58 <.LVL357>:
  40aa58:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  40aa5c:	f000 80d4 	beq.w	40ac08 <.L133>

0040aa60 <.LVL358>:
  40aa60:	f10a 0931 	add.w	r9, sl, #49	; 0x31

0040aa64 <.LVL359>:
  40aa64:	46aa      	mov	sl, r5
  40aa66:	f886 9000 	strb.w	r9, [r6]
  40aa6a:	f106 0b01 	add.w	fp, r6, #1

0040aa6e <.LVL360>:
  40aa6e:	463d      	mov	r5, r7

0040aa70 <.LVL361>:
  40aa70:	e639      	b.n	40a6e6 <.L135>

0040aa72 <.LVL362>:
  40aa72:	d104      	bne.n	40aa7e <.LVL364>
  40aa74:	f019 0f01 	tst.w	r9, #1
  40aa78:	d001      	beq.n	40aa7e <.LVL364>
  40aa7a:	e623      	b.n	40a6c4 <.LVL243+0x6>

0040aa7c <.LVL363>:
  40aa7c:	4693      	mov	fp, r2

0040aa7e <.LVL364>:
  40aa7e:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
  40aa82:	2b30      	cmp	r3, #48	; 0x30
  40aa84:	f10b 32ff 	add.w	r2, fp, #4294967295

0040aa88 <.LVL365>:
  40aa88:	d0f8      	beq.n	40aa7c <.LVL363>
  40aa8a:	e62c      	b.n	40a6e6 <.L135>
  40aa8c:	00418ff8 	.word	0x00418ff8
  40aa90:	0041e358 	.word	0x0041e358

0040aa94 <.LDL1>:
  40aa94:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38

0040aa98 <.LVL367>:
  40aa98:	f7ff bbe5 	b.w	40a266 <.LVL104>

0040aa9c <.LVL368>:
  40aa9c:	f000 8094 	beq.w	40abc8 <.LVL415>
  40aaa0:	9b02      	ldr	r3, [sp, #8]
  40aaa2:	4a88      	ldr	r2, [pc, #544]	; (40acc4 <.LVL451+0x4>)
  40aaa4:	425b      	negs	r3, r3

0040aaa6 <.LVL369>:
  40aaa6:	f003 010f 	and.w	r1, r3, #15
  40aaaa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
  40aaae:	ed92 6b00 	vldr	d6, [r2]
  40aab2:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
  40aab6:	111b      	asrs	r3, r3, #4

0040aab8 <.LVL370>:
  40aab8:	ee27 6b06 	vmul.f64	d6, d7, d6
  40aabc:	f000 80e1 	beq.w	40ac82 <.LVL442>
  40aac0:	4a81      	ldr	r2, [pc, #516]	; (40acc8 <.LVL451+0x8>)
  40aac2:	2102      	movs	r1, #2

0040aac4 <.LVL371>:
  40aac4:	07d8      	lsls	r0, r3, #31
  40aac6:	d504      	bpl.n	40aad2 <.LVL373>
  40aac8:	ed92 7b00 	vldr	d7, [r2]
  40aacc:	3101      	adds	r1, #1
  40aace:	ee26 6b07 	vmul.f64	d6, d6, d7

0040aad2 <.LVL373>:
  40aad2:	105b      	asrs	r3, r3, #1

0040aad4 <.LVL374>:
  40aad4:	f102 0208 	add.w	r2, r2, #8
  40aad8:	d1f4      	bne.n	40aac4 <.LVL371>
  40aada:	e669      	b.n	40a7b0 <.LVL274>

0040aadc <.LVL375>:
  40aadc:	9908      	ldr	r1, [sp, #32]
  40aade:	2330      	movs	r3, #48	; 0x30
  40aae0:	700b      	strb	r3, [r1, #0]
  40aae2:	9b02      	ldr	r3, [sp, #8]
  40aae4:	3301      	adds	r3, #1
  40aae6:	9302      	str	r3, [sp, #8]

0040aae8 <.LVL376>:
  40aae8:	f81b 3c01 	ldrb.w	r3, [fp, #-1]

0040aaec <.LVL377>:
  40aaec:	e422      	b.n	40a334 <.LVL120>

0040aaee <.LVL378>:
  40aaee:	6869      	ldr	r1, [r5, #4]
  40aaf0:	4620      	mov	r0, r4
  40aaf2:	f012 fbab 	bl	41d24c <.LFE2>

0040aaf6 <.LVL379>:
  40aaf6:	692b      	ldr	r3, [r5, #16]
  40aaf8:	3302      	adds	r3, #2
  40aafa:	4607      	mov	r7, r0

0040aafc <.LVL380>:
  40aafc:	009a      	lsls	r2, r3, #2
  40aafe:	f105 010c 	add.w	r1, r5, #12
  40ab02:	300c      	adds	r0, #12

0040ab04 <.LVL381>:
  40ab04:	f00b fec0 	bl	416888 <memcpy>

0040ab08 <.LVL382>:
  40ab08:	4639      	mov	r1, r7
  40ab0a:	2201      	movs	r2, #1
  40ab0c:	4620      	mov	r0, r4
  40ab0e:	f00f f9fb 	bl	419f08 <__lshift>

0040ab12 <.LVL383>:
  40ab12:	4607      	mov	r7, r0

0040ab14 <.LVL384>:
  40ab14:	e51e      	b.n	40a554 <.LVL192>

0040ab16 <.LVL385>:
  40ab16:	2a39      	cmp	r2, #57	; 0x39
  40ab18:	d076      	beq.n	40ac08 <.L133>
  40ab1a:	f102 0901 	add.w	r9, r2, #1

0040ab1e <.LVL386>:
  40ab1e:	46aa      	mov	sl, r5

0040ab20 <.LVL387>:
  40ab20:	f886 9000 	strb.w	r9, [r6]
  40ab24:	f106 0b01 	add.w	fp, r6, #1

0040ab28 <.LVL388>:
  40ab28:	463d      	mov	r5, r7

0040ab2a <.LVL389>:
  40ab2a:	e5dc      	b.n	40a6e6 <.L135>

0040ab2c <.LVL390>:
  40ab2c:	46aa      	mov	sl, r5

0040ab2e <.LVL391>:
  40ab2e:	4691      	mov	r9, r2

0040ab30 <.LVL392>:
  40ab30:	463d      	mov	r5, r7

0040ab32 <.LVL393>:
  40ab32:	e5bb      	b.n	40a6ac <.LVL240>

0040ab34 <.LVL394>:
  40ab34:	2300      	movs	r3, #0
  40ab36:	9305      	str	r3, [sp, #20]

0040ab38 <.LVL395>:
  40ab38:	461d      	mov	r5, r3
  40ab3a:	e72b      	b.n	40a994 <.L73>

0040ab3c <.LVL396>:
  40ab3c:	4b61      	ldr	r3, [pc, #388]	; (40acc4 <.LVL451+0x4>)
  40ab3e:	eebd 7bc6 	vcvt.s32.f64	s14, d6
  40ab42:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40ab46:	ed13 4b02 	vldr	d4, [r3, #-8]
  40ab4a:	ee17 3a10 	vmov	r3, s14

0040ab4e <.LVL397>:
  40ab4e:	ec41 0b15 	vmov	d5, r0, r1
  40ab52:	9808      	ldr	r0, [sp, #32]

0040ab54 <.LVL398>:
  40ab54:	ee24 4b05 	vmul.f64	d4, d4, d5

0040ab58 <.LVL399>:
  40ab58:	3330      	adds	r3, #48	; 0x30

0040ab5a <.LVL400>:
  40ab5a:	2d01      	cmp	r5, #1
  40ab5c:	eeb8 7bc7 	vcvt.f64.s32	d7, s14

0040ab60 <.LVL401>:
  40ab60:	7003      	strb	r3, [r0, #0]
  40ab62:	f100 0b01 	add.w	fp, r0, #1

0040ab66 <.LVL402>:
  40ab66:	ee36 7b47 	vsub.f64	d7, d6, d7
  40ab6a:	d012      	beq.n	40ab92 <.LVL409>
  40ab6c:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
  40ab70:	9b08      	ldr	r3, [sp, #32]

0040ab72 <.LVL403>:
  40ab72:	1959      	adds	r1, r3, r5

0040ab74 <.LVL404>:
  40ab74:	ee27 7b05 	vmul.f64	d7, d7, d5
  40ab78:	eebd 6bc7 	vcvt.s32.f64	s12, d7

0040ab7c <.LVL405>:
  40ab7c:	ee16 3a10 	vmov	r3, s12
  40ab80:	3330      	adds	r3, #48	; 0x30
  40ab82:	f80b 3b01 	strb.w	r3, [fp], #1

0040ab86 <.LVL406>:
  40ab86:	458b      	cmp	fp, r1
  40ab88:	eeb8 6bc6 	vcvt.f64.s32	d6, s12

0040ab8c <.LVL407>:
  40ab8c:	ee37 7b46 	vsub.f64	d7, d7, d6

0040ab90 <.LVL408>:
  40ab90:	d1f0      	bne.n	40ab74 <.LVL404>

0040ab92 <.LVL409>:
  40ab92:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
  40ab96:	ee34 5b06 	vadd.f64	d5, d4, d6
  40ab9a:	eeb4 5bc7 	vcmpe.f64	d5, d7
  40ab9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40aba2:	d538      	bpl.n	40ac16 <.LVL424>
  40aba4:	9202      	str	r2, [sp, #8]

0040aba6 <.LVL410>:
  40aba6:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
  40abaa:	f7ff bbb6 	b.w	40a31a <.L77>

0040abae <.LVL411>:
  40abae:	9b07      	ldr	r3, [sp, #28]
  40abb0:	1b9f      	subs	r7, r3, r6

0040abb2 <.LVL412>:
  40abb2:	2300      	movs	r3, #0
  40abb4:	f7ff bbe8 	b.w	40a388 <.LVL127>

0040abb8 <.LVL413>:
  40abb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40abba:	9a05      	ldr	r2, [sp, #20]
  40abbc:	920d      	str	r2, [sp, #52]	; 0x34

0040abbe <.LVL414>:
  40abbe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40abc2:	9f07      	ldr	r7, [sp, #28]
  40abc4:	f7ff bbe0 	b.w	40a388 <.LVL127>

0040abc8 <.LVL415>:
  40abc8:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
  40abcc:	2102      	movs	r1, #2
  40abce:	e5ef      	b.n	40a7b0 <.LVL274>

0040abd0 <.LVL416>:
  40abd0:	2e00      	cmp	r6, #0
  40abd2:	f43f aef2 	beq.w	40a9ba <.LVL335>
  40abd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40abd8:	2b00      	cmp	r3, #0
  40abda:	f77f af5b 	ble.w	40aa94 <.LDL1>

0040abde <.LVL417>:
  40abde:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
  40abe2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
  40abe6:	3101      	adds	r1, #1

0040abe8 <.LVL418>:
  40abe8:	ee07 1a90 	vmov	s15, r1
  40abec:	ee26 6b04 	vmul.f64	d6, d6, d4
  40abf0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  40abf4:	9a02      	ldr	r2, [sp, #8]
  40abf6:	eea6 5b07 	vfma.f64	d5, d6, d7
  40abfa:	ec51 0b15 	vmov	r0, r1, d5
  40abfe:	3a01      	subs	r2, #1

0040ac00 <.LVL419>:
  40ac00:	461d      	mov	r5, r3
  40ac02:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000

0040ac06 <.LVL420>:
  40ac06:	e5ee      	b.n	40a7e6 <.LVL277>

0040ac08 <.L133>:
  40ac08:	2239      	movs	r2, #57	; 0x39
  40ac0a:	46aa      	mov	sl, r5
  40ac0c:	7032      	strb	r2, [r6, #0]
  40ac0e:	463d      	mov	r5, r7

0040ac10 <.LVL422>:
  40ac10:	f106 0b01 	add.w	fp, r6, #1

0040ac14 <.LVL423>:
  40ac14:	e558      	b.n	40a6c8 <.L142>

0040ac16 <.LVL424>:
  40ac16:	ee36 6b44 	vsub.f64	d6, d6, d4
  40ac1a:	eeb4 6bc7 	vcmpe.f64	d6, d7
  40ac1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40ac22:	dc01      	bgt.n	40ac28 <.LVL426>
  40ac24:	e736      	b.n	40aa94 <.LDL1>

0040ac26 <.LVL425>:
  40ac26:	468b      	mov	fp, r1

0040ac28 <.LVL426>:
  40ac28:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
  40ac2c:	2b30      	cmp	r3, #48	; 0x30
  40ac2e:	f10b 31ff 	add.w	r1, fp, #4294967295

0040ac32 <.LVL427>:
  40ac32:	d0f8      	beq.n	40ac26 <.LVL425>
  40ac34:	e62d      	b.n	40a892 <.LVL288+0xe>

0040ac36 <.LVL428>:
  40ac36:	9202      	str	r2, [sp, #8]

0040ac38 <.LVL429>:
  40ac38:	f7ff bb6f 	b.w	40a31a <.L77>

0040ac3c <.LVL430>:
  40ac3c:	930d      	str	r3, [sp, #52]	; 0x34

0040ac3e <.LVL431>:
  40ac3e:	e447      	b.n	40a4d0 <.LVL175>

0040ac40 <.LVL432>:
  40ac40:	2a39      	cmp	r2, #57	; 0x39
  40ac42:	46cb      	mov	fp, r9

0040ac44 <.LVL433>:
  40ac44:	4691      	mov	r9, r2

0040ac46 <.LVL434>:
  40ac46:	d0df      	beq.n	40ac08 <.L133>
  40ac48:	f1bb 0f00 	cmp.w	fp, #0
  40ac4c:	f73f af08 	bgt.w	40aa60 <.LVL358>
  40ac50:	e708      	b.n	40aa64 <.LVL359>

0040ac52 <.LVL435>:
  40ac52:	f47f af07 	bne.w	40aa64 <.LVL359>
  40ac56:	f019 0f01 	tst.w	r9, #1
  40ac5a:	f43f af03 	beq.w	40aa64 <.LVL359>
  40ac5e:	e6fb      	b.n	40aa58 <.LVL357>

0040ac60 <.LVL436>:
  40ac60:	4629      	mov	r1, r5
  40ac62:	2300      	movs	r3, #0
  40ac64:	220a      	movs	r2, #10
  40ac66:	4620      	mov	r0, r4

0040ac68 <.LVL437>:
  40ac68:	f010 fc0e 	bl	41b488 <__multadd>

0040ac6c <.LVL438>:
  40ac6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40ac6e:	2b00      	cmp	r3, #0
  40ac70:	4605      	mov	r5, r0

0040ac72 <.LVL439>:
  40ac72:	dd08      	ble.n	40ac86 <.LVL443>
  40ac74:	461e      	mov	r6, r3
  40ac76:	e460      	b.n	40a53a <.LVL189>

0040ac78 <.LVL440>:
  40ac78:	9b01      	ldr	r3, [sp, #4]

0040ac7a <.LVL441>:
  40ac7a:	2b02      	cmp	r3, #2
  40ac7c:	dc20      	bgt.n	40acc0 <.LVL451>
  40ac7e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  40ac80:	e4f1      	b.n	40a666 <.LVL230>

0040ac82 <.LVL442>:
  40ac82:	2102      	movs	r1, #2
  40ac84:	e594      	b.n	40a7b0 <.LVL274>

0040ac86 <.LVL443>:
  40ac86:	9b01      	ldr	r3, [sp, #4]

0040ac88 <.LVL444>:
  40ac88:	2b02      	cmp	r3, #2
  40ac8a:	dc19      	bgt.n	40acc0 <.LVL451>
  40ac8c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  40ac8e:	e454      	b.n	40a53a <.LVL189>

0040ac90 <.LVL445>:
  40ac90:	2501      	movs	r5, #1
  40ac92:	f7ff bab0 	b.w	40a1f6 <.LVL91>

0040ac96 <.LVL446>:
  40ac96:	f43f ac33 	beq.w	40a500 <.LVL184>
  40ac9a:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  40ac9e:	e4c0      	b.n	40a622 <.LVL218>

0040aca0 <.LVL447>:
  40aca0:	2500      	movs	r5, #0

0040aca2 <.LVL448>:
  40aca2:	6465      	str	r5, [r4, #68]	; 0x44
  40aca4:	4629      	mov	r1, r5
  40aca6:	4620      	mov	r0, r4
  40aca8:	f012 fad0 	bl	41d24c <.LFE2>

0040acac <.LVL449>:
  40acac:	f04f 36ff 	mov.w	r6, #4294967295
  40acb0:	2301      	movs	r3, #1
  40acb2:	9008      	str	r0, [sp, #32]
  40acb4:	46a9      	mov	r9, r5
  40acb6:	6420      	str	r0, [r4, #64]	; 0x40

0040acb8 <.LVL450>:
  40acb8:	960c      	str	r6, [sp, #48]	; 0x30
  40acba:	9309      	str	r3, [sp, #36]	; 0x24
  40acbc:	f7ff bad3 	b.w	40a266 <.LVL104>

0040acc0 <.LVL451>:
  40acc0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  40acc2:	e658      	b.n	40a976 <.LVL323>
  40acc4:	00418ff8 	.word	0x00418ff8
  40acc8:	0041e358 	.word	0x0041e358

Disassembly of section .rodata%68:

0040accc <.LANCHOR0>:
  40accc:	00636261 	.word	0x00636261

0040acd0 <.LC25>:
  40acd0:	98500190 	.word	0x98500190
  40acd4:	b04fd23c 	.word	0xb04fd23c
  40acd8:	7d3f96d6 	.word	0x7d3f96d6
  40acdc:	727fe128 	.word	0x727fe128
  40ace0:	00000000 	.word	0x00000000

0040ace4 <.LC26>:
  40ace4:	7373656d 	.word	0x7373656d
  40ace8:	20656761 	.word	0x20656761
  40acec:	65676964 	.word	0x65676964
  40acf0:	00007473 	.word	0x00007473

0040acf4 <.LC27>:
  40acf4:	7d696bf9 	.word	0x7d696bf9
  40acf8:	8d93b77c 	.word	0x8d93b77c
  40acfc:	312f5a52 	.word	0x312f5a52
  40ad00:	d061f1aa 	.word	0xd061f1aa
  40ad04:	00000000 	.word	0x00000000

0040ad08 <.LC28>:
  40ad08:	64636261 	.word	0x64636261
  40ad0c:	68676665 	.word	0x68676665
  40ad10:	6c6b6a69 	.word	0x6c6b6a69
  40ad14:	706f6e6d 	.word	0x706f6e6d
  40ad18:	74737271 	.word	0x74737271
  40ad1c:	78777675 	.word	0x78777675
  40ad20:	00007a79 	.word	0x00007a79

0040ad24 <.LC29>:
  40ad24:	d7d3fcc3 	.word	0xd7d3fcc3
  40ad28:	00e49261 	.word	0x00e49261
  40ad2c:	6c49fb7d 	.word	0x6c49fb7d
  40ad30:	3be167ca 	.word	0x3be167ca
  40ad34:	00000000 	.word	0x00000000

0040ad38 <.LC30>:
  40ad38:	44434241 	.word	0x44434241
  40ad3c:	48474645 	.word	0x48474645
  40ad40:	4c4b4a49 	.word	0x4c4b4a49
  40ad44:	504f4e4d 	.word	0x504f4e4d
  40ad48:	54535251 	.word	0x54535251
  40ad4c:	58575655 	.word	0x58575655
  40ad50:	62615a59 	.word	0x62615a59
  40ad54:	66656463 	.word	0x66656463
  40ad58:	6a696867 	.word	0x6a696867
  40ad5c:	6e6d6c6b 	.word	0x6e6d6c6b
  40ad60:	7271706f 	.word	0x7271706f
  40ad64:	76757473 	.word	0x76757473
  40ad68:	7a797877 	.word	0x7a797877
  40ad6c:	33323130 	.word	0x33323130
  40ad70:	37363534 	.word	0x37363534
  40ad74:	00003938 	.word	0x00003938

0040ad78 <.LC31>:
  40ad78:	98ab74d1 	.word	0x98ab74d1
  40ad7c:	f5d977d2 	.word	0xf5d977d2
  40ad80:	2c1c61a5 	.word	0x2c1c61a5
  40ad84:	9f9d419f 	.word	0x9f9d419f
  40ad88:	00000000 	.word	0x00000000

0040ad8c <.LC32>:
  40ad8c:	34333231 	.word	0x34333231
  40ad90:	38373635 	.word	0x38373635
  40ad94:	32313039 	.word	0x32313039
  40ad98:	36353433 	.word	0x36353433
  40ad9c:	30393837 	.word	0x30393837
  40ada0:	34333231 	.word	0x34333231
  40ada4:	38373635 	.word	0x38373635
  40ada8:	32313039 	.word	0x32313039
  40adac:	36353433 	.word	0x36353433
  40adb0:	30393837 	.word	0x30393837
  40adb4:	34333231 	.word	0x34333231
  40adb8:	38373635 	.word	0x38373635
  40adbc:	32313039 	.word	0x32313039
  40adc0:	36353433 	.word	0x36353433
  40adc4:	30393837 	.word	0x30393837
  40adc8:	34333231 	.word	0x34333231
  40adcc:	38373635 	.word	0x38373635
  40add0:	32313039 	.word	0x32313039
  40add4:	36353433 	.word	0x36353433
  40add8:	30393837 	.word	0x30393837
  40addc:	00000000 	.word	0x00000000

0040ade0 <.LC33>:
  40ade0:	a2f4ed57 	.word	0xa2f4ed57
  40ade4:	55c9e32b 	.word	0x55c9e32b
  40ade8:	2eda49ac 	.word	0x2eda49ac
  40adec:	7ab60721 	.word	0x7ab60721
  40adf0:	00000000 	.word	0x00000000

0040adf4 <.LC34>:
  40adf4:	61616161 	.word	0x61616161
  40adf8:	61616161 	.word	0x61616161
  40adfc:	61616161 	.word	0x61616161
  40ae00:	61616161 	.word	0x61616161
  40ae04:	61616161 	.word	0x61616161
  40ae08:	61616161 	.word	0x61616161
  40ae0c:	61616161 	.word	0x61616161
  40ae10:	61616161 	.word	0x61616161
  40ae14:	61616161 	.word	0x61616161
  40ae18:	61616161 	.word	0x61616161
  40ae1c:	61616161 	.word	0x61616161
  40ae20:	61616161 	.word	0x61616161
  40ae24:	61616161 	.word	0x61616161
  40ae28:	61616161 	.word	0x61616161
  40ae2c:	61616161 	.word	0x61616161
  40ae30:	61616161 	.word	0x61616161
  40ae34:	61616161 	.word	0x61616161
  40ae38:	61616161 	.word	0x61616161
  40ae3c:	61616161 	.word	0x61616161
  40ae40:	61616161 	.word	0x61616161
  40ae44:	61616161 	.word	0x61616161
  40ae48:	61616161 	.word	0x61616161
  40ae4c:	61616161 	.word	0x61616161
  40ae50:	61616161 	.word	0x61616161
  40ae54:	61616161 	.word	0x61616161
  40ae58:	61616161 	.word	0x61616161
  40ae5c:	61616161 	.word	0x61616161
  40ae60:	61616161 	.word	0x61616161
  40ae64:	61616161 	.word	0x61616161
  40ae68:	61616161 	.word	0x61616161
  40ae6c:	61616161 	.word	0x61616161
  40ae70:	61616161 	.word	0x61616161
  40ae74:	00000000 	.word	0x00000000

0040ae78 <.LC35>:
  40ae78:	db3f5bad 	.word	0xdb3f5bad
  40ae7c:	786752cb 	.word	0x786752cb
  40ae80:	2f9d83c2 	.word	0x2f9d83c2
  40ae84:	53a71e15 	.word	0x53a71e15
  40ae88:	a0265e99 	.word	0xa0265e99
  40ae8c:	00000000 	.word	0x00000000

0040ae90 <.LC36>:
  40ae90:	64636261 	.word	0x64636261
  40ae94:	65646362 	.word	0x65646362
  40ae98:	66656463 	.word	0x66656463
  40ae9c:	67666564 	.word	0x67666564
  40aea0:	68676665 	.word	0x68676665
  40aea4:	69686766 	.word	0x69686766
  40aea8:	6a696867 	.word	0x6a696867
  40aeac:	6b6a6968 	.word	0x6b6a6968
  40aeb0:	6c6b6a69 	.word	0x6c6b6a69
  40aeb4:	6d6c6b6a 	.word	0x6d6c6b6a
  40aeb8:	6e6d6c6b 	.word	0x6e6d6c6b
  40aebc:	6f6e6d6c 	.word	0x6f6e6d6c
  40aec0:	706f6e6d 	.word	0x706f6e6d
  40aec4:	71706f6e 	.word	0x71706f6e
  40aec8:	00000000 	.word	0x00000000

0040aecc <.LC37>:
  40aecc:	443e9884 	.word	0x443e9884
  40aed0:	6ed23b1c 	.word	0x6ed23b1c
  40aed4:	a14aaeba 	.word	0xa14aaeba
  40aed8:	e52951f9 	.word	0xe52951f9
  40aedc:	f17046e5 	.word	0xf17046e5
  40aee0:	00000000 	.word	0x00000000

0040aee4 <.LC38>:
  40aee4:	61616161 	.word	0x61616161
  40aee8:	61616161 	.word	0x61616161
  40aeec:	61616161 	.word	0x61616161
  40aef0:	61616161 	.word	0x61616161
  40aef4:	61616161 	.word	0x61616161
  40aef8:	61616161 	.word	0x61616161
  40aefc:	61616161 	.word	0x61616161
  40af00:	61616161 	.word	0x61616161
  40af04:	61616161 	.word	0x61616161
  40af08:	61616161 	.word	0x61616161
  40af0c:	61616161 	.word	0x61616161
  40af10:	61616161 	.word	0x61616161
  40af14:	61616161 	.word	0x61616161
  40af18:	61616161 	.word	0x61616161
  40af1c:	61616161 	.word	0x61616161
  40af20:	61616161 	.word	0x61616161
  40af24:	00000000 	.word	0x00000000

0040af28 <.LC39>:
  40af28:	82ba9800 	.word	0x82ba9800
  40af2c:	42165c4b 	.word	0x42165c4b
  40af30:	12a1d77b 	.word	0x12a1d77b
  40af34:	2a445a2a 	.word	0x2a445a2a
  40af38:	4d64ec25 	.word	0x4d64ec25
  40af3c:	00000000 	.word	0x00000000

0040af40 <.LC40>:
  40af40:	363e99a9 	.word	0x363e99a9
  40af44:	6a810647 	.word	0x6a810647
  40af48:	71253eba 	.word	0x71253eba
  40af4c:	6cc25078 	.word	0x6cc25078
  40af50:	9dd8d09c 	.word	0x9dd8d09c
  40af54:	00000000 	.word	0x00000000

0040af58 <.LC41>:
  40af58:	bf1678ba 	.word	0xbf1678ba
  40af5c:	eacf018f 	.word	0xeacf018f
  40af60:	de404141 	.word	0xde404141
  40af64:	2322ae5d 	.word	0x2322ae5d
  40af68:	a36103b0 	.word	0xa36103b0
  40af6c:	9c7a1796 	.word	0x9c7a1796
  40af70:	61ff10b4 	.word	0x61ff10b4
  40af74:	ad1500f2 	.word	0xad1500f2
  40af78:	00000000 	.word	0x00000000

0040af7c <.LC42>:
  40af7c:	616a8d24 	.word	0x616a8d24
  40af80:	b83806d2 	.word	0xb83806d2
  40af84:	9326c0e5 	.word	0x9326c0e5
  40af88:	39603e0c 	.word	0x39603e0c
  40af8c:	59e43ca3 	.word	0x59e43ca3
  40af90:	6721ff64 	.word	0x6721ff64
  40af94:	d4edecf6 	.word	0xd4edecf6
  40af98:	c106db19 	.word	0xc106db19
  40af9c:	00000000 	.word	0x00000000

0040afa0 <.LC43>:
  40afa0:	3f7500cb 	.word	0x3f7500cb
  40afa4:	8b5ea345 	.word	0x8b5ea345
  40afa8:	693da0b5 	.word	0x693da0b5
  40afac:	0750c69a 	.word	0x0750c69a
  40afb0:	ab322c27 	.word	0xab322c27
  40afb4:	63d1de0e 	.word	0x63d1de0e
  40afb8:	5a608b1a 	.word	0x5a608b1a
  40afbc:	ed5bff43 	.word	0xed5bff43
  40afc0:	2b078680 	.word	0x2b078680
  40afc4:	23cce7a1 	.word	0x23cce7a1
  40afc8:	a1ecba58 	.word	0xa1ecba58
  40afcc:	a725c834 	.word	0xa725c834
  40afd0:	00000000 	.word	0x00000000

0040afd4 <.LC44>:
  40afd4:	64636261 	.word	0x64636261
  40afd8:	68676665 	.word	0x68676665
  40afdc:	65646362 	.word	0x65646362
  40afe0:	69686766 	.word	0x69686766
  40afe4:	66656463 	.word	0x66656463
  40afe8:	6a696867 	.word	0x6a696867
  40afec:	67666564 	.word	0x67666564
  40aff0:	6b6a6968 	.word	0x6b6a6968
  40aff4:	68676665 	.word	0x68676665
  40aff8:	6c6b6a69 	.word	0x6c6b6a69
  40affc:	69686766 	.word	0x69686766
  40b000:	6d6c6b6a 	.word	0x6d6c6b6a
  40b004:	6a696867 	.word	0x6a696867
  40b008:	6e6d6c6b 	.word	0x6e6d6c6b
  40b00c:	6b6a6968 	.word	0x6b6a6968
  40b010:	6f6e6d6c 	.word	0x6f6e6d6c
  40b014:	6c6b6a69 	.word	0x6c6b6a69
  40b018:	706f6e6d 	.word	0x706f6e6d
  40b01c:	6d6c6b6a 	.word	0x6d6c6b6a
  40b020:	71706f6e 	.word	0x71706f6e
  40b024:	6e6d6c6b 	.word	0x6e6d6c6b
  40b028:	7271706f 	.word	0x7271706f
  40b02c:	6f6e6d6c 	.word	0x6f6e6d6c
  40b030:	73727170 	.word	0x73727170
  40b034:	706f6e6d 	.word	0x706f6e6d
  40b038:	74737271 	.word	0x74737271
  40b03c:	71706f6e 	.word	0x71706f6e
  40b040:	75747372 	.word	0x75747372
  40b044:	00000000 	.word	0x00000000

0040b048 <.LC45>:
  40b048:	330c3309 	.word	0x330c3309
  40b04c:	e84711f7 	.word	0xe84711f7
  40b050:	c72f193d 	.word	0xc72f193d
  40b054:	471bcd82 	.word	0x471bcd82
  40b058:	171b1153 	.word	0x171b1153
  40b05c:	d2053b3b 	.word	0xd2053b3b
  40b060:	8680a02f 	.word	0x8680a02f
  40b064:	12f7b0e3 	.word	0x12f7b0e3
  40b068:	1ac7c7fc 	.word	0x1ac7c7fc
  40b06c:	b92d7e55 	.word	0xb92d7e55
  40b070:	fae9c366 	.word	0xfae9c366
  40b074:	39607491 	.word	0x39607491
  40b078:	00000000 	.word	0x00000000

0040b07c <.LC46>:
  40b07c:	a135afdd 	.word	0xa135afdd
  40b080:	ba7a6193 	.word	0xba7a6193
  40b084:	497341cc 	.word	0x497341cc
  40b088:	314120ae 	.word	0x314120ae
  40b08c:	4efae612 	.word	0x4efae612
  40b090:	a27ea989 	.word	0xa27ea989
  40b094:	e6ee9e0a 	.word	0xe6ee9e0a
  40b098:	9ad3554b 	.word	0x9ad3554b
  40b09c:	2a999221 	.word	0x2a999221
  40b0a0:	a8c14f27 	.word	0xa8c14f27
  40b0a4:	233cba36 	.word	0x233cba36
  40b0a8:	bdebfea3 	.word	0xbdebfea3
  40b0ac:	23444d45 	.word	0x23444d45
  40b0b0:	0ee83c64 	.word	0x0ee83c64
  40b0b4:	4fc99a2a 	.word	0x4fc99a2a
  40b0b8:	9fa44ca5 	.word	0x9fa44ca5
  40b0bc:	00000000 	.word	0x00000000

0040b0c0 <.LC47>:
  40b0c0:	759b958e 	.word	0x759b958e
  40b0c4:	da13e3da 	.word	0xda13e3da
  40b0c8:	28f7f48c 	.word	0x28f7f48c
  40b0cc:	3f14fc14 	.word	0x3f14fc14
  40b0d0:	c679778f 	.word	0xc679778f
  40b0d4:	a17f9feb 	.word	0xa17f9feb
  40b0d8:	adae9972 	.word	0xadae9972
  40b0dc:	189088b6 	.word	0x189088b6
  40b0e0:	9e281d50 	.word	0x9e281d50
  40b0e4:	e4f70049 	.word	0xe4f70049
  40b0e8:	de991b33 	.word	0xde991b33
  40b0ec:	3a43b5c4 	.word	0x3a43b5c4
  40b0f0:	ee29d3c7 	.word	0xee29d3c7
  40b0f4:	5426ddb6 	.word	0x5426ddb6
  40b0f8:	5be5965e 	.word	0x5be5965e
  40b0fc:	09e94b87 	.word	0x09e94b87
  40b100:	00000000 	.word	0x00000000
  40b104:	0040b808 	.word	0x0040b808
  40b108:	0040b7e8 	.word	0x0040b7e8
  40b10c:	0040b81c 	.word	0x0040b81c

0040b110 <.LC49>:
  40b110:	54206948 	.word	0x54206948
  40b114:	65726568 	.word	0x65726568
  40b118:	00000000 	.word	0x00000000

0040b11c <.LC50>:
  40b11c:	7a729492 	.word	0x7a729492
  40b120:	1cbb3836 	.word	0x1cbb3836
  40b124:	f88ef413 	.word	0xf88ef413
  40b128:	9dfc8b15 	.word	0x9dfc8b15
  40b12c:	00000000 	.word	0x00000000

0040b130 <.LC51>:
  40b130:	74616877 	.word	0x74616877
  40b134:	206f6420 	.word	0x206f6420
  40b138:	77206179 	.word	0x77206179
  40b13c:	20746e61 	.word	0x20746e61
  40b140:	20726f66 	.word	0x20726f66
  40b144:	68746f6e 	.word	0x68746f6e
  40b148:	3f676e69 	.word	0x3f676e69
  40b14c:	00000000 	.word	0x00000000

0040b150 <.LC52>:
  40b150:	3e780c75 	.word	0x3e780c75
  40b154:	03b5b06a 	.word	0x03b5b06a
  40b158:	316ea8ea 	.word	0x316ea8ea
  40b15c:	38b75d0a 	.word	0x38b75d0a
  40b160:	00000000 	.word	0x00000000

0040b164 <.LC53>:
  40b164:	dddddddd 	.word	0xdddddddd
  40b168:	dddddddd 	.word	0xdddddddd
  40b16c:	dddddddd 	.word	0xdddddddd
  40b170:	dddddddd 	.word	0xdddddddd
  40b174:	dddddddd 	.word	0xdddddddd
  40b178:	dddddddd 	.word	0xdddddddd
  40b17c:	dddddddd 	.word	0xdddddddd
  40b180:	dddddddd 	.word	0xdddddddd
  40b184:	dddddddd 	.word	0xdddddddd
  40b188:	dddddddd 	.word	0xdddddddd
  40b18c:	dddddddd 	.word	0xdddddddd
  40b190:	dddddddd 	.word	0xdddddddd
  40b194:	0000dddd 	.word	0x0000dddd

0040b198 <.LC54>:
  40b198:	5234be56 	.word	0x5234be56
  40b19c:	884c141d 	.word	0x884c141d
  40b1a0:	33c7b8db 	.word	0x33c7b8db
  40b1a4:	f6b3e8f0 	.word	0xf6b3e8f0
  40b1a8:	00000000 	.word	0x00000000
  40b1ac:	0040b7d0 	.word	0x0040b7d0
  40b1b0:	0040b7e8 	.word	0x0040b7e8
  40b1b4:	0040b7f0 	.word	0x0040b7f0

0040b1b8 <.LC56>:
  40b1b8:	863117b6 	.word	0x863117b6
  40b1bc:	64720555 	.word	0x64720555
  40b1c0:	b6c08be2 	.word	0xb6c08be2
  40b1c4:	8e8c37fb 	.word	0x8e8c37fb
  40b1c8:	00be46f1 	.word	0x00be46f1
  40b1cc:	00000000 	.word	0x00000000

0040b1d0 <.LC57>:
  40b1d0:	6adffcef 	.word	0x6adffcef
  40b1d4:	a22febe5 	.word	0xa22febe5
  40b1d8:	d51674d2 	.word	0xd51674d2
  40b1dc:	9cdf84f1 	.word	0x9cdf84f1
  40b1e0:	797c9a25 	.word	0x797c9a25
  40b1e4:	00000000 	.word	0x00000000

0040b1e8 <.LC58>:
  40b1e8:	42735d12 	.word	0x42735d12
  40b1ec:	cd11acb9 	.word	0xcd11acb9
  40b1f0:	f49aa391 	.word	0xf49aa391
  40b1f4:	4f7ba18a 	.word	0x4f7ba18a
  40b1f8:	d375f163 	.word	0xd375f163
  40b1fc:	00000000 	.word	0x00000000

0040b200 <.LC59>:
  40b200:	614c34b0 	.word	0x614c34b0
  40b204:	5338dbd8 	.word	0x5338dbd8
  40b208:	ceafa85c 	.word	0xceafa85c
  40b20c:	2bf10baf 	.word	0x2bf10baf
  40b210:	00c21d88 	.word	0x00c21d88
  40b214:	a73d83c9 	.word	0xa73d83c9
  40b218:	6c37e926 	.word	0x6c37e926
  40b21c:	f7cf322e 	.word	0xf7cf322e
  40b220:	00000000 	.word	0x00000000

0040b224 <.LC60>:
  40b224:	46c1dc5b 	.word	0x46c1dc5b
  40b228:	4e7560bf 	.word	0x4e7560bf
  40b22c:	2624046a 	.word	0x2624046a
  40b230:	c7759508 	.word	0xc7759508
  40b234:	083f005a 	.word	0x083f005a
  40b238:	8339279d 	.word	0x8339279d
  40b23c:	b958ec9d 	.word	0xb958ec9d
  40b240:	4338ec64 	.word	0x4338ec64
  40b244:	00000000 	.word	0x00000000

0040b248 <.LC61>:
  40b248:	1ea93e77 	.word	0x1ea93e77
  40b24c:	460e8036 	.word	0x460e8036
  40b250:	ebb84d85 	.word	0xebb84d85
  40b254:	a78191d0 	.word	0xa78191d0
  40b258:	8b095929 	.word	0x8b095929
  40b25c:	22c1f83e 	.word	0x22c1f83e
  40b260:	145563d9 	.word	0x145563d9
  40b264:	fe65d5ce 	.word	0xfe65d5ce
  40b268:	00000000 	.word	0x00000000

0040b26c <.LC62>:
  40b26c:	4439d0af 	.word	0x4439d0af
  40b270:	629548d8 	.word	0x629548d8
  40b274:	f425086b 	.word	0xf425086b
  40b278:	7f9046ab 	.word	0x7f9046ab
  40b27c:	dbdaf915 	.word	0xdbdaf915
  40b280:	c61e10e4 	.word	0xc61e10e4
  40b284:	4c03aa82 	.word	0x4c03aa82
  40b288:	9cc5eb7c 	.word	0x9cc5eb7c
  40b28c:	a99eeafa 	.word	0xa99eeafa
  40b290:	7fde6e07 	.word	0x7fde6e07
  40b294:	e852f14a 	.word	0xe852f14a
  40b298:	b69cfab2 	.word	0xb69cfab2
  40b29c:	00000000 	.word	0x00000000

0040b2a0 <.LC63>:
  40b2a0:	e3d245af 	.word	0xe3d245af
  40b2a4:	31404876 	.word	0x31404876
  40b2a8:	d2787f61 	.word	0xd2787f61
  40b2ac:	1b6b8ab5 	.word	0x1b6b8ab5
  40b2b0:	64f47e9c 	.word	0x64f47e9c
  40b2b4:	471ba0f5 	.word	0x471ba0f5
  40b2b8:	73c32ee4 	.word	0x73c32ee4
  40b2bc:	5e442263 	.word	0x5e442263
  40b2c0:	ca40228e 	.word	0xca40228e
  40b2c4:	c7e2695e 	.word	0xc7e2695e
  40b2c8:	ec39328b 	.word	0xec39328b
  40b2cc:	4916b2fa 	.word	0x4916b2fa
  40b2d0:	00000000 	.word	0x00000000

0040b2d4 <.LC64>:
  40b2d4:	08260688 	.word	0x08260688
  40b2d8:	8aade6d3 	.word	0x8aade6d3
  40b2dc:	e0aca20a 	.word	0xe0aca20a
  40b2e0:	6fa8c814 	.word	0x6fa8c814
  40b2e4:	d935a60a 	.word	0xd935a60a
  40b2e8:	eb9fac47 	.word	0xeb9fac47
  40b2ec:	e5f43ee8 	.word	0xe5f43ee8
  40b2f0:	4b146659 	.word	0x4b146659
  40b2f4:	9db35a2a 	.word	0x9db35a2a
  40b2f8:	b91438c1 	.word	0xb91438c1
  40b2fc:	e1b63a4e 	.word	0xe1b63a4e
  40b300:	274fa301 	.word	0x274fa301
  40b304:	00000000 	.word	0x00000000

0040b308 <.LC65>:
  40b308:	de7caa87 	.word	0xde7caa87
  40b30c:	9d61efa5 	.word	0x9d61efa5
  40b310:	24b4f04f 	.word	0x24b4f04f
  40b314:	b06c1d1a 	.word	0xb06c1d1a
  40b318:	e2f47923 	.word	0xe2f47923
  40b31c:	78c24ece 	.word	0x78c24ece
  40b320:	05b3d07a 	.word	0x05b3d07a
  40b324:	de7ce145 	.word	0xde7ce145
  40b328:	b733a8da 	.word	0xb733a8da
  40b32c:	02a7b8d6 	.word	0x02a7b8d6
  40b330:	4e278b03 	.word	0x4e278b03
  40b334:	e4f4a3ae 	.word	0xe4f4a3ae
  40b338:	4e919dbe 	.word	0x4e919dbe
  40b33c:	70f161eb 	.word	0x70f161eb
  40b340:	206c692e 	.word	0x206c692e
  40b344:	5468123a 	.word	0x5468123a
  40b348:	00000000 	.word	0x00000000

0040b34c <.LC66>:
  40b34c:	7b7a4b16 	.word	0x7b7a4b16
  40b350:	e219f8fc 	.word	0xe219f8fc
  40b354:	e7fb95e3 	.word	0xe7fb95e3
  40b358:	a3e0563b 	.word	0xa3e0563b
  40b35c:	2264bd87 	.word	0x2264bd87
  40b360:	d61f832e 	.word	0xd61f832e
  40b364:	d70c2710 	.word	0xd70c2710
  40b368:	540525ea 	.word	0x540525ea
  40b36c:	75bf5897 	.word	0x75bf5897
  40b370:	4a995ac0 	.word	0x4a995ac0
  40b374:	654f036d 	.word	0x654f036d
  40b378:	fde6f0f8 	.word	0xfde6f0f8
  40b37c:	a3b1eaca 	.word	0xa3b1eaca
  40b380:	4b6b4a4d 	.word	0x4b6b4a4d
  40b384:	0a076e63 	.word	0x0a076e63
  40b388:	37e7bc38 	.word	0x37e7bc38
  40b38c:	00000000 	.word	0x00000000

0040b390 <.LC67>:
  40b390:	08b073fa 	.word	0x08b073fa
  40b394:	84a2569d 	.word	0x84a2569d
  40b398:	75f0b0ef 	.word	0x75f0b0ef
  40b39c:	e90b896c 	.word	0xe90b896c
  40b3a0:	dddbb5b1 	.word	0xdddbb5b1
  40b3a4:	361ae88e 	.word	0x361ae88e
  40b3a8:	333ef855 	.word	0x333ef855
  40b3ac:	399d27b2 	.word	0x399d27b2
  40b3b0:	82843ebf 	.word	0x82843ebf
  40b3b4:	c822a779 	.word	0xc822a779
  40b3b8:	a485b406 	.word	0xa485b406
  40b3bc:	07c8677e 	.word	0x07c8677e
  40b3c0:	37a346b9 	.word	0x37a346b9
  40b3c4:	2694e8be 	.word	0x2694e8be
  40b3c8:	59882774 	.word	0x59882774
  40b3cc:	fb9232e1 	.word	0xfb9232e1
  40b3d0:	00000000 	.word	0x00000000
  40b3d4:	20776f6e 	.word	0x20776f6e
  40b3d8:	74207369 	.word	0x74207369
  40b3dc:	74206568 	.word	0x74206568
  40b3e0:	20656d69 	.word	0x20656d69
  40b3e4:	57929495 	.word	0x57929495
  40b3e8:	5381425f 	.word	0x5381425f
  40b3ec:	469dcc2c 	.word	0x469dcc2c
  40b3f0:	cb33a277 	.word	0xcb33a277
  40b3f4:	33323130 	.word	0x33323130
  40b3f8:	37363534 	.word	0x37363534
  40b3fc:	62613938 	.word	0x62613938
  40b400:	66656463 	.word	0x66656463
  40b404:	00202020 	.word	0x00202020
  40b408:	34333231 	.word	0x34333231
  40b40c:	38373635 	.word	0x38373635
  40b410:	62613039 	.word	0x62613039
  40b414:	66656463 	.word	0x66656463
  40b418:	00202020 	.word	0x00202020
  40b41c:	16157e2b 	.word	0x16157e2b
  40b420:	a6d2ae28 	.word	0xa6d2ae28
  40b424:	8815f7ab 	.word	0x8815f7ab
  40b428:	3c4fcf09 	.word	0x3c4fcf09
  40b42c:	f3f2f1f0 	.word	0xf3f2f1f0
  40b430:	f7f6f5f4 	.word	0xf7f6f5f4
  40b434:	fbfaf9f8 	.word	0xfbfaf9f8
  40b438:	fffefdfc 	.word	0xfffefdfc
  40b43c:	e2bec16b 	.word	0xe2bec16b
  40b440:	969f402e 	.word	0x969f402e
  40b444:	117e3de9 	.word	0x117e3de9
  40b448:	2a179373 	.word	0x2a179373
  40b44c:	578a2dae 	.word	0x578a2dae
  40b450:	9cac031e 	.word	0x9cac031e
  40b454:	ac6fb79e 	.word	0xac6fb79e
  40b458:	518eaf45 	.word	0x518eaf45
  40b45c:	461cc830 	.word	0x461cc830
  40b460:	11e45ca3 	.word	0x11e45ca3
  40b464:	19c1fbe5 	.word	0x19c1fbe5
  40b468:	ef520a1a 	.word	0xef520a1a
  40b46c:	45249ff6 	.word	0x45249ff6
  40b470:	179b4fdf 	.word	0x179b4fdf
  40b474:	7b412bad 	.word	0x7b412bad
  40b478:	10376ce6 	.word	0x10376ce6
  40b47c:	91614d87 	.word	0x91614d87
  40b480:	26e320b6 	.word	0x26e320b6
  40b484:	6468ef1b 	.word	0x6468ef1b
  40b488:	ceb60d99 	.word	0xceb60d99
  40b48c:	6bf60698 	.word	0x6bf60698
  40b490:	fffd7079 	.word	0xfffd7079
  40b494:	7b181786 	.word	0x7b181786
  40b498:	fffdffb9 	.word	0xfffdffb9
  40b49c:	3edfe45a 	.word	0x3edfe45a
  40b4a0:	5ed3d5db 	.word	0x5ed3d5db
  40b4a4:	02094f5b 	.word	0x02094f5b
  40b4a8:	ab3eb00d 	.word	0xab3eb00d
  40b4ac:	da1d031e 	.word	0xda1d031e
  40b4b0:	d103be2f 	.word	0xd103be2f
  40b4b4:	a0702179 	.word	0xa0702179
  40b4b8:	ee9c00f3 	.word	0xee9c00f3
  40b4bc:	20776f6e 	.word	0x20776f6e
  40b4c0:	74207369 	.word	0x74207369
  40b4c4:	74206568 	.word	0x74206568
  40b4c8:	20656d69 	.word	0x20656d69
  40b4cc:	20726f66 	.word	0x20726f66
  40b4d0:	206c6c61 	.word	0x206c6c61
  40b4d4:	67452301 	.word	0x67452301
  40b4d8:	efcdab89 	.word	0xefcdab89
  40b4dc:	78563412 	.word	0x78563412
  40b4e0:	efcdab90 	.word	0xefcdab90
  40b4e4:	b0527c8b 	.word	0xb0527c8b
  40b4e8:	b86c2b01 	.word	0xb86c2b01
  40b4ec:	f3eb0f4f 	.word	0xf3eb0f4f
  40b4f0:	73865ffb 	.word	0x73865ffb
  40b4f4:	22b38515 	.word	0x22b38515
  40b4f8:	4b2b864b 	.word	0x4b2b864b
  40b4fc:	20776f4e 	.word	0x20776f4e
  40b500:	74207369 	.word	0x74207369
  40b504:	74206568 	.word	0x74206568
  40b508:	20656d69 	.word	0x20656d69
  40b50c:	20726f66 	.word	0x20726f66
  40b510:	206c6c61 	.word	0x206c6c61
  40b514:	67452301 	.word	0x67452301
  40b518:	efcdab89 	.word	0xefcdab89
  40b51c:	98badefe 	.word	0x98badefe
  40b520:	10325476 	.word	0x10325476
  40b524:	efcdab89 	.word	0xefcdab89
  40b528:	67452301 	.word	0x67452301
  40b52c:	78563412 	.word	0x78563412
  40b530:	efcdab90 	.word	0xefcdab90
  40b534:	01010101 	.word	0x01010101
  40b538:	01010101 	.word	0x01010101
  40b53c:	41312111 	.word	0x41312111
  40b540:	81716151 	.word	0x81716151
  40b544:	7e29a043 	.word	0x7e29a043
  40b548:	0ef884d1 	.word	0x0ef884d1
  40b54c:	32846489 	.word	0x32846489
  40b550:	9808d512 	.word	0x9808d512
  40b554:	74159418 	.word	0x74159418
  40b558:	b07d1287 	.word	0xb07d1287
  40b55c:	72657645 	.word	0x72657645
  40b560:	656e6f79 	.word	0x656e6f79
  40b564:	74656720 	.word	0x74656720
  40b568:	72462073 	.word	0x72462073
  40b56c:	79616469 	.word	0x79616469
  40b570:	66666f20 	.word	0x66666f20
  40b574:	0000002e 	.word	0x0000002e
  40b578:	73736150 	.word	0x73736150
  40b57c:	00000000 	.word	0x00000000
  40b580:	6c696146 	.word	0x6c696146
  40b584:	00000000 	.word	0x00000000
  40b588:	0d0a7325 	.word	0x0d0a7325
  40b58c:	2035444d 	.word	0x2035444d
  40b590:	74736574 	.word	0x74736574
  40b594:	2020203a 	.word	0x2020203a
  40b598:	20202020 	.word	0x20202020
  40b59c:	25202020 	.word	0x25202020
  40b5a0:	00000073 	.word	0x00000073
  40b5a4:	0d0a7325 	.word	0x0d0a7325
  40b5a8:	20414853 	.word	0x20414853
  40b5ac:	74736574 	.word	0x74736574
  40b5b0:	2020203a 	.word	0x2020203a
  40b5b4:	20202020 	.word	0x20202020
  40b5b8:	25202020 	.word	0x25202020
  40b5bc:	00000073 	.word	0x00000073
  40b5c0:	0d0a7325 	.word	0x0d0a7325
  40b5c4:	32414853 	.word	0x32414853
  40b5c8:	74203635 	.word	0x74203635
  40b5cc:	3a747365 	.word	0x3a747365
  40b5d0:	20202020 	.word	0x20202020
  40b5d4:	25202020 	.word	0x25202020
  40b5d8:	00000073 	.word	0x00000073
  40b5dc:	0d0a7325 	.word	0x0d0a7325
  40b5e0:	33414853 	.word	0x33414853
  40b5e4:	74203438 	.word	0x74203438
  40b5e8:	3a747365 	.word	0x3a747365
  40b5ec:	20202020 	.word	0x20202020
  40b5f0:	25202020 	.word	0x25202020
  40b5f4:	00000073 	.word	0x00000073
  40b5f8:	0d0a7325 	.word	0x0d0a7325
  40b5fc:	35414853 	.word	0x35414853
  40b600:	74203231 	.word	0x74203231
  40b604:	3a747365 	.word	0x3a747365
  40b608:	20202020 	.word	0x20202020
  40b60c:	25202020 	.word	0x25202020
  40b610:	00000073 	.word	0x00000073
  40b614:	0d0a7325 	.word	0x0d0a7325
  40b618:	43414d48 	.word	0x43414d48
  40b61c:	35444d5f 	.word	0x35444d5f
  40b620:	73657420 	.word	0x73657420
  40b624:	20203a74 	.word	0x20203a74
  40b628:	25202020 	.word	0x25202020
  40b62c:	00000073 	.word	0x00000073
  40b630:	0d0a7325 	.word	0x0d0a7325
  40b634:	43414d48 	.word	0x43414d48
  40b638:	4148535f 	.word	0x4148535f
  40b63c:	73657420 	.word	0x73657420
  40b640:	20203a74 	.word	0x20203a74
  40b644:	25202020 	.word	0x25202020
  40b648:	00000073 	.word	0x00000073
  40b64c:	0d0a7325 	.word	0x0d0a7325
  40b650:	43414d48 	.word	0x43414d48
  40b654:	4148535f 	.word	0x4148535f
  40b658:	20363532 	.word	0x20363532
  40b65c:	74736574 	.word	0x74736574
  40b660:	2520203a 	.word	0x2520203a
  40b664:	00000073 	.word	0x00000073
  40b668:	0d0a7325 	.word	0x0d0a7325
  40b66c:	43414d48 	.word	0x43414d48
  40b670:	4148535f 	.word	0x4148535f
  40b674:	20343833 	.word	0x20343833
  40b678:	74736574 	.word	0x74736574
  40b67c:	2520203a 	.word	0x2520203a
  40b680:	00000073 	.word	0x00000073
  40b684:	0d0a7325 	.word	0x0d0a7325
  40b688:	43414d48 	.word	0x43414d48
  40b68c:	4148535f 	.word	0x4148535f
  40b690:	20323135 	.word	0x20323135
  40b694:	74736574 	.word	0x74736574
  40b698:	2520203a 	.word	0x2520203a
  40b69c:	00000073 	.word	0x00000073
  40b6a0:	0d0a7325 	.word	0x0d0a7325
  40b6a4:	20434345 	.word	0x20434345
  40b6a8:	74736574 	.word	0x74736574
  40b6ac:	2020203a 	.word	0x2020203a
  40b6b0:	20202020 	.word	0x20202020
  40b6b4:	25202020 	.word	0x25202020
  40b6b8:	00000073 	.word	0x00000073
  40b6bc:	0d0a7325 	.word	0x0d0a7325
  40b6c0:	444e4152 	.word	0x444e4152
  40b6c4:	74204d4f 	.word	0x74204d4f
  40b6c8:	3a747365 	.word	0x3a747365
  40b6cc:	20202020 	.word	0x20202020
  40b6d0:	25202020 	.word	0x25202020
  40b6d4:	00000073 	.word	0x00000073
  40b6d8:	0d0a7325 	.word	0x0d0a7325
  40b6dc:	20534541 	.word	0x20534541
  40b6e0:	20434243 	.word	0x20434243
  40b6e4:	74736574 	.word	0x74736574
  40b6e8:	2020203a 	.word	0x2020203a
  40b6ec:	25202020 	.word	0x25202020
  40b6f0:	00000073 	.word	0x00000073
  40b6f4:	0d0a7325 	.word	0x0d0a7325
  40b6f8:	20534541 	.word	0x20534541
  40b6fc:	20525443 	.word	0x20525443
  40b700:	74736574 	.word	0x74736574
  40b704:	2020203a 	.word	0x2020203a
  40b708:	25202020 	.word	0x25202020
  40b70c:	00000073 	.word	0x00000073
  40b710:	0d0a7325 	.word	0x0d0a7325
  40b714:	504d4f43 	.word	0x504d4f43
  40b718:	53534552 	.word	0x53534552
  40b71c:	73657420 	.word	0x73657420
  40b720:	20203a74 	.word	0x20203a74
  40b724:	25202020 	.word	0x25202020
  40b728:	00000073 	.word	0x00000073
  40b72c:	0d0a7325 	.word	0x0d0a7325
  40b730:	20534544 	.word	0x20534544
  40b734:	74736574 	.word	0x74736574
  40b738:	2020203a 	.word	0x2020203a
  40b73c:	20202020 	.word	0x20202020
  40b740:	25202020 	.word	0x25202020
  40b744:	00000073 	.word	0x00000073
  40b748:	0d0a7325 	.word	0x0d0a7325
  40b74c:	33534544 	.word	0x33534544
  40b750:	73657420 	.word	0x73657420
  40b754:	20203a74 	.word	0x20203a74
  40b758:	20202020 	.word	0x20202020
  40b75c:	25202020 	.word	0x25202020
  40b760:	00000073 	.word	0x00000073
  40b764:	0d0a7325 	.word	0x0d0a7325
  40b768:	20415352 	.word	0x20415352
  40b76c:	74736574 	.word	0x74736574
  40b770:	2020203a 	.word	0x2020203a
  40b774:	20202020 	.word	0x20202020
  40b778:	25202020 	.word	0x25202020
  40b77c:	00000073 	.word	0x00000073
  40b780:	0d0a7325 	.word	0x0d0a7325
  40b784:	74206f4e 	.word	0x74206f4e
  40b788:	73747365 	.word	0x73747365
  40b78c:	65786520 	.word	0x65786520
  40b790:	65747563 	.word	0x65747563
  40b794:	000d0a64 	.word	0x000d0a64
  40b798:	0d0a7325 	.word	0x0d0a7325
  40b79c:	20656e4f 	.word	0x20656e4f
  40b7a0:	6d20726f 	.word	0x6d20726f
  40b7a4:	2065726f 	.word	0x2065726f
  40b7a8:	74736574 	.word	0x74736574
  40b7ac:	61662073 	.word	0x61662073
  40b7b0:	64656c69 	.word	0x64656c69
  40b7b4:	00000d0a 	.word	0x00000d0a
  40b7b8:	0d0a7325 	.word	0x0d0a7325
  40b7bc:	206c6c41 	.word	0x206c6c41
  40b7c0:	74736574 	.word	0x74736574
  40b7c4:	61702073 	.word	0x61702073
  40b7c8:	64657373 	.word	0x64657373
  40b7cc:	00000d0a 	.word	0x00000d0a
  40b7d0:	0b0b0b0b 	.word	0x0b0b0b0b
  40b7d4:	0b0b0b0b 	.word	0x0b0b0b0b
  40b7d8:	0b0b0b0b 	.word	0x0b0b0b0b
  40b7dc:	0b0b0b0b 	.word	0x0b0b0b0b
  40b7e0:	0b0b0b0b 	.word	0x0b0b0b0b
  40b7e4:	00000000 	.word	0x00000000
  40b7e8:	6566654a 	.word	0x6566654a
  40b7ec:	00000000 	.word	0x00000000
  40b7f0:	aaaaaaaa 	.word	0xaaaaaaaa
  40b7f4:	aaaaaaaa 	.word	0xaaaaaaaa
  40b7f8:	aaaaaaaa 	.word	0xaaaaaaaa
  40b7fc:	aaaaaaaa 	.word	0xaaaaaaaa
  40b800:	aaaaaaaa 	.word	0xaaaaaaaa
  40b804:	00000000 	.word	0x00000000
  40b808:	0b0b0b0b 	.word	0x0b0b0b0b
  40b80c:	0b0b0b0b 	.word	0x0b0b0b0b
  40b810:	0b0b0b0b 	.word	0x0b0b0b0b
  40b814:	0b0b0b0b 	.word	0x0b0b0b0b
  40b818:	00000000 	.word	0x00000000
  40b81c:	aaaaaaaa 	.word	0xaaaaaaaa
  40b820:	aaaaaaaa 	.word	0xaaaaaaaa
  40b824:	aaaaaaaa 	.word	0xaaaaaaaa
  40b828:	aaaaaaaa 	.word	0xaaaaaaaa
  40b82c:	00000000 	.word	0x00000000
  40b830:	41200a0d 	.word	0x41200a0d
  40b834:	696c7070 	.word	0x696c7070
  40b838:	69746163 	.word	0x69746163
  40b83c:	63206e6f 	.word	0x63206e6f
  40b840:	74616572 	.word	0x74616572
  40b844:	4f206465 	.word	0x4f206465
  40b848:	32207463 	.word	0x32207463
  40b84c:	30322033 	.word	0x30322033
  40b850:	31203831 	.word	0x31203831
  40b854:	30313a37 	.word	0x30313a37
  40b858:	2034353a 	.word	0x2034353a
  40b85c:	74696e69 	.word	0x74696e69
  40b860:	696c6169 	.word	0x696c6169
  40b864:	2164657a 	.word	0x2164657a
  40b868:	0a0d      	.short	0x0a0d
	...

Disassembly of section .text.deflate%69:

0040b86c <deflate>:
    int flush;
{
    int old_flush; /* value of flush param for previous deflate call */
    deflate_state *s;

    if (strm == Z_NULL || strm->state == Z_NULL ||
  40b86c:	2800      	cmp	r0, #0
  40b86e:	f000 84e3 	beq.w	40c238 <.LCFI25>
{
  40b872:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

0040b876 <.LCFI24>:
  40b876:	4605      	mov	r5, r0
    if (strm == Z_NULL || strm->state == Z_NULL ||
  40b878:	69c4      	ldr	r4, [r0, #28]
  40b87a:	2c00      	cmp	r4, #0
  40b87c:	f000 84df 	beq.w	40c23e <.LCFI26>
        flush > Z_BLOCK || flush < 0) {
  40b880:	2905      	cmp	r1, #5
  40b882:	f200 84e0 	bhi.w	40c246 <.LVL520>

0040b886 <.LVL353>:
        return Z_STREAM_ERROR;
    }
    s = strm->state;

    if (strm->next_out == Z_NULL ||
  40b886:	68c3      	ldr	r3, [r0, #12]
  40b888:	2b00      	cmp	r3, #0
  40b88a:	d04b      	beq.n	40b924 <.LVL357+0x6>
  40b88c:	6803      	ldr	r3, [r0, #0]
  40b88e:	2b00      	cmp	r3, #0
  40b890:	d045      	beq.n	40b91e <.LVL357>
        (strm->next_in == Z_NULL && strm->avail_in != 0) ||
        (s->status == FINISH_STATE && flush != Z_FINISH)) {
  40b892:	6863      	ldr	r3, [r4, #4]
  40b894:	1f0e      	subs	r6, r1, #4
  40b896:	bf18      	it	ne
  40b898:	2601      	movne	r6, #1
  40b89a:	f240 229a 	movw	r2, #666	; 0x29a
  40b89e:	4293      	cmp	r3, r2
  40b8a0:	d101      	bne.n	40b8a6 <.LVL353+0x20>
  40b8a2:	2e00      	cmp	r6, #0
  40b8a4:	d13e      	bne.n	40b924 <.LVL357+0x6>
        ERR_RETURN(strm, Z_STREAM_ERROR);
    }
    if (strm->avail_out == 0) ERR_RETURN(strm, Z_BUF_ERROR);
  40b8a6:	692a      	ldr	r2, [r5, #16]
  40b8a8:	2a00      	cmp	r2, #0
  40b8aa:	d042      	beq.n	40b932 <.LVL359>
  40b8ac:	460f      	mov	r7, r1

    s->strm = strm; /* just in case */
  40b8ae:	6025      	str	r5, [r4, #0]
    old_flush = s->last_flush;
  40b8b0:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28

0040b8b4 <.LVL354>:
    s->last_flush = flush;
  40b8b4:	62a1      	str	r1, [r4, #40]	; 0x28

    /* Write the header */
    if (s->status == INIT_STATE) {
  40b8b6:	2b2a      	cmp	r3, #42	; 0x2a
  40b8b8:	d042      	beq.n	40b940 <.LVL361>

0040b8ba <.LVL355>:
            }
            strm->adler = adler32(0L, Z_NULL, 0);
        }
    }
#ifdef GZIP
    if (s->status == EXTRA_STATE) {
  40b8ba:	6863      	ldr	r3, [r4, #4]
  40b8bc:	2b45      	cmp	r3, #69	; 0x45
  40b8be:	f000 80f6 	beq.w	40baae <.LVL376+0x10a>
            }
        }
        else
            s->status = NAME_STATE;
    }
    if (s->status == NAME_STATE) {
  40b8c2:	6863      	ldr	r3, [r4, #4]
  40b8c4:	2b49      	cmp	r3, #73	; 0x49
  40b8c6:	f000 8192 	beq.w	40bbee <.LBE45>
            }
        }
        else
            s->status = COMMENT_STATE;
    }
    if (s->status == COMMENT_STATE) {
  40b8ca:	6863      	ldr	r3, [r4, #4]
  40b8cc:	2b5b      	cmp	r3, #91	; 0x5b
  40b8ce:	f000 84cd 	beq.w	40c26c <.LBE72>
                s->status = HCRC_STATE;
        }
        else
            s->status = HCRC_STATE;
    }
    if (s->status == HCRC_STATE) {
  40b8d2:	6863      	ldr	r3, [r4, #4]
  40b8d4:	2b67      	cmp	r3, #103	; 0x67
  40b8d6:	f000 84d7 	beq.w	40c288 <.LBE73>
            s->status = BUSY_STATE;
    }
#endif

    /* Flush as much pending output as possible */
    if (s->pending != 0) {
  40b8da:	6963      	ldr	r3, [r4, #20]
  40b8dc:	2b00      	cmp	r3, #0
  40b8de:	f040 8212 	bne.w	40bd06 <.LVL420+0x14>

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
    } else if (strm->avail_in == 0 && RANK(flush) <= RANK(old_flush) &&
  40b8e2:	686b      	ldr	r3, [r5, #4]
  40b8e4:	2b00      	cmp	r3, #0
  40b8e6:	f040 84f0 	bne.w	40c2ca <.LVL531+0xa>
  40b8ea:	2f04      	cmp	r7, #4
  40b8ec:	bfcc      	ite	gt
  40b8ee:	2209      	movgt	r2, #9
  40b8f0:	2200      	movle	r2, #0
  40b8f2:	ebc2 0247 	rsb	r2, r2, r7, lsl #1
  40b8f6:	f1b8 0f04 	cmp.w	r8, #4
  40b8fa:	bfcc      	ite	gt
  40b8fc:	2309      	movgt	r3, #9
  40b8fe:	2300      	movle	r3, #0
  40b900:	ebc3 0848 	rsb	r8, r3, r8, lsl #1

0040b904 <.LVL356>:
  40b904:	4542      	cmp	r2, r8
  40b906:	f300 8203 	bgt.w	40bd10 <.LVL422>
  40b90a:	2e00      	cmp	r6, #0
  40b90c:	f000 8200 	beq.w	40bd10 <.LVL422>
               flush != Z_FINISH) {
        ERR_RETURN(strm, Z_BUF_ERROR);
  40b910:	4b99      	ldr	r3, [pc, #612]	; (40bb78 <.LVL388+0x2>)
  40b912:	69db      	ldr	r3, [r3, #28]
  40b914:	61ab      	str	r3, [r5, #24]
  40b916:	f06f 0004 	mvn.w	r0, #4
  40b91a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040b91e <.LVL357>:
        (strm->next_in == Z_NULL && strm->avail_in != 0) ||
  40b91e:	6843      	ldr	r3, [r0, #4]
  40b920:	2b00      	cmp	r3, #0
  40b922:	d0b6      	beq.n	40b892 <.LVL353+0xc>
        ERR_RETURN(strm, Z_STREAM_ERROR);
  40b924:	4b94      	ldr	r3, [pc, #592]	; (40bb78 <.LVL388+0x2>)
  40b926:	691b      	ldr	r3, [r3, #16]
  40b928:	61ab      	str	r3, [r5, #24]
  40b92a:	f06f 0001 	mvn.w	r0, #1

0040b92e <.LVL358>:
  40b92e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040b932 <.LVL359>:
    if (strm->avail_out == 0) ERR_RETURN(strm, Z_BUF_ERROR);
  40b932:	4b91      	ldr	r3, [pc, #580]	; (40bb78 <.LVL388+0x2>)
  40b934:	69db      	ldr	r3, [r3, #28]
  40b936:	61ab      	str	r3, [r5, #24]
  40b938:	f06f 0004 	mvn.w	r0, #4

0040b93c <.LVL360>:
  40b93c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040b940 <.LVL361>:
        if (s->wrap == 2) {
  40b940:	69a3      	ldr	r3, [r4, #24]
  40b942:	2b02      	cmp	r3, #2
  40b944:	d029      	beq.n	40b99a <.LBE42>

0040b946 <.LBB42>:
            uInt header = (Z_DEFLATED + ((s->w_bits-8)<<4)) << 8;
  40b946:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40b948:	031b      	lsls	r3, r3, #12
  40b94a:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800

0040b94e <.LVL362>:
            if (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2)
  40b94e:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
  40b952:	2a01      	cmp	r2, #1
  40b954:	f340 80f8 	ble.w	40bb48 <.LBB44>
                level_flags = 0;
  40b958:	2100      	movs	r1, #0

0040b95a <.LVL363>:
            header |= (level_flags << 6);
  40b95a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
            if (s->strstart != 0) header |= PRESET_DICT;
  40b95e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  40b960:	b10a      	cbz	r2, 40b966 <.LVL363+0xc>
  40b962:	f043 0320 	orr.w	r3, r3, #32
            header += 31 - (header % 31);
  40b966:	4985      	ldr	r1, [pc, #532]	; (40bb7c <.LVL388+0x6>)

0040b968 <.LVL366>:
  40b968:	fba1 2103 	umull	r2, r1, r1, r3
  40b96c:	1a5b      	subs	r3, r3, r1

0040b96e <.LVL367>:
  40b96e:	eb01 0153 	add.w	r1, r1, r3, lsr #1
  40b972:	0909      	lsrs	r1, r1, #4
  40b974:	ebc1 1141 	rsb	r1, r1, r1, lsl #5

0040b978 <.LVL368>:
            s->status = BUSY_STATE;
  40b978:	2371      	movs	r3, #113	; 0x71
  40b97a:	6063      	str	r3, [r4, #4]
            putShortMSB(s, header);
  40b97c:	311f      	adds	r1, #31

0040b97e <.LVL369>:
  40b97e:	4620      	mov	r0, r4

0040b980 <.LVL370>:
  40b980:	f012 fe8f 	bl	41e6a2 <.LFE188>

0040b984 <.LVL371>:
            if (s->strstart != 0) {
  40b984:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40b986:	2b00      	cmp	r3, #0
  40b988:	f040 80ed 	bne.w	40bb66 <.LVL386>
            strm->adler = adler32(0L, Z_NULL, 0);
  40b98c:	2200      	movs	r2, #0
  40b98e:	4611      	mov	r1, r2
  40b990:	4610      	mov	r0, r2
  40b992:	f007 fb11 	bl	412fb8 <.LBE46>

0040b996 <.LVL372>:
  40b996:	6328      	str	r0, [r5, #48]	; 0x30
  40b998:	e78f      	b.n	40b8ba <.LVL355>

0040b99a <.LBE42>:
            strm->adler = crc32(0L, Z_NULL, 0);
  40b99a:	2200      	movs	r2, #0
  40b99c:	4611      	mov	r1, r2

0040b99e <.LVL374>:
  40b99e:	4610      	mov	r0, r2

0040b9a0 <.LVL375>:
  40b9a0:	f007 ff48 	bl	413834 <.LFE21>

0040b9a4 <.LVL376>:
  40b9a4:	6328      	str	r0, [r5, #48]	; 0x30
            put_byte(s, 31);
  40b9a6:	68a2      	ldr	r2, [r4, #8]
  40b9a8:	6963      	ldr	r3, [r4, #20]
  40b9aa:	1c59      	adds	r1, r3, #1
  40b9ac:	6161      	str	r1, [r4, #20]
  40b9ae:	211f      	movs	r1, #31
  40b9b0:	54d1      	strb	r1, [r2, r3]
            put_byte(s, 139);
  40b9b2:	68a2      	ldr	r2, [r4, #8]
  40b9b4:	6963      	ldr	r3, [r4, #20]
  40b9b6:	1c59      	adds	r1, r3, #1
  40b9b8:	6161      	str	r1, [r4, #20]
  40b9ba:	218b      	movs	r1, #139	; 0x8b
  40b9bc:	54d1      	strb	r1, [r2, r3]
            put_byte(s, 8);
  40b9be:	68a2      	ldr	r2, [r4, #8]
  40b9c0:	6963      	ldr	r3, [r4, #20]
  40b9c2:	1c59      	adds	r1, r3, #1
  40b9c4:	6161      	str	r1, [r4, #20]
  40b9c6:	2108      	movs	r1, #8
  40b9c8:	54d1      	strb	r1, [r2, r3]
            if (s->gzhead == Z_NULL) {
  40b9ca:	69e2      	ldr	r2, [r4, #28]
  40b9cc:	2a00      	cmp	r2, #0
  40b9ce:	d079      	beq.n	40bac4 <.LBE43>
                put_byte(s, (s->gzhead->text ? 1 : 0) +
  40b9d0:	6961      	ldr	r1, [r4, #20]
  40b9d2:	1c4b      	adds	r3, r1, #1
  40b9d4:	6163      	str	r3, [r4, #20]
  40b9d6:	6813      	ldr	r3, [r2, #0]
  40b9d8:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40b9da:	2800      	cmp	r0, #0
  40b9dc:	bf14      	ite	ne
  40b9de:	2002      	movne	r0, #2
  40b9e0:	2000      	moveq	r0, #0
  40b9e2:	2b00      	cmp	r3, #0
  40b9e4:	bf18      	it	ne
  40b9e6:	3001      	addne	r0, #1
  40b9e8:	6913      	ldr	r3, [r2, #16]
  40b9ea:	2b00      	cmp	r3, #0
  40b9ec:	bf0c      	ite	eq
  40b9ee:	2300      	moveq	r3, #0
  40b9f0:	2304      	movne	r3, #4
  40b9f2:	4403      	add	r3, r0
  40b9f4:	69d0      	ldr	r0, [r2, #28]
  40b9f6:	2800      	cmp	r0, #0
  40b9f8:	bf0c      	ite	eq
  40b9fa:	2000      	moveq	r0, #0
  40b9fc:	2008      	movne	r0, #8
  40b9fe:	fa50 f383 	uxtab	r3, r0, r3
  40ba02:	6a50      	ldr	r0, [r2, #36]	; 0x24
  40ba04:	2800      	cmp	r0, #0
  40ba06:	bf0c      	ite	eq
  40ba08:	2000      	moveq	r0, #0
  40ba0a:	2010      	movne	r0, #16
  40ba0c:	fa50 f383 	uxtab	r3, r0, r3
  40ba10:	68a2      	ldr	r2, [r4, #8]
  40ba12:	5453      	strb	r3, [r2, r1]
                put_byte(s, (Byte)(s->gzhead->time & 0xff));
  40ba14:	68a2      	ldr	r2, [r4, #8]
  40ba16:	6963      	ldr	r3, [r4, #20]
  40ba18:	1c59      	adds	r1, r3, #1
  40ba1a:	6161      	str	r1, [r4, #20]
  40ba1c:	69e1      	ldr	r1, [r4, #28]
  40ba1e:	6849      	ldr	r1, [r1, #4]
  40ba20:	54d1      	strb	r1, [r2, r3]
                put_byte(s, (Byte)((s->gzhead->time >> 8) & 0xff));
  40ba22:	68a1      	ldr	r1, [r4, #8]
  40ba24:	6962      	ldr	r2, [r4, #20]
  40ba26:	1c53      	adds	r3, r2, #1
  40ba28:	6163      	str	r3, [r4, #20]
  40ba2a:	69e3      	ldr	r3, [r4, #28]
  40ba2c:	685b      	ldr	r3, [r3, #4]
  40ba2e:	0a1b      	lsrs	r3, r3, #8
  40ba30:	548b      	strb	r3, [r1, r2]
                put_byte(s, (Byte)((s->gzhead->time >> 16) & 0xff));
  40ba32:	68a2      	ldr	r2, [r4, #8]
  40ba34:	6963      	ldr	r3, [r4, #20]
  40ba36:	1c59      	adds	r1, r3, #1
  40ba38:	6161      	str	r1, [r4, #20]
  40ba3a:	69e1      	ldr	r1, [r4, #28]
  40ba3c:	88c9      	ldrh	r1, [r1, #6]
  40ba3e:	54d1      	strb	r1, [r2, r3]
                put_byte(s, (Byte)((s->gzhead->time >> 24) & 0xff));
  40ba40:	68a2      	ldr	r2, [r4, #8]
  40ba42:	6963      	ldr	r3, [r4, #20]
  40ba44:	1c59      	adds	r1, r3, #1
  40ba46:	6161      	str	r1, [r4, #20]
  40ba48:	69e1      	ldr	r1, [r4, #28]
  40ba4a:	79c9      	ldrb	r1, [r1, #7]
  40ba4c:	54d1      	strb	r1, [r2, r3]
                put_byte(s, s->level == 9 ? 2 :
  40ba4e:	68a1      	ldr	r1, [r4, #8]
  40ba50:	6963      	ldr	r3, [r4, #20]
  40ba52:	1c5a      	adds	r2, r3, #1
  40ba54:	6162      	str	r2, [r4, #20]
  40ba56:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  40ba5a:	2a09      	cmp	r2, #9
  40ba5c:	d069      	beq.n	40bb32 <.LBE43+0x6e>
  40ba5e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
  40ba62:	2801      	cmp	r0, #1
  40ba64:	dc67      	bgt.n	40bb36 <.LBE43+0x72>
  40ba66:	2a01      	cmp	r2, #1
  40ba68:	dd65      	ble.n	40bb36 <.LBE43+0x72>
  40ba6a:	2200      	movs	r2, #0
  40ba6c:	54ca      	strb	r2, [r1, r3]
                put_byte(s, s->gzhead->os & 0xff);
  40ba6e:	68a2      	ldr	r2, [r4, #8]
  40ba70:	6963      	ldr	r3, [r4, #20]
  40ba72:	1c59      	adds	r1, r3, #1
  40ba74:	6161      	str	r1, [r4, #20]
  40ba76:	69e1      	ldr	r1, [r4, #28]
  40ba78:	68c9      	ldr	r1, [r1, #12]
  40ba7a:	54d1      	strb	r1, [r2, r3]
                if (s->gzhead->extra != Z_NULL) {
  40ba7c:	69e2      	ldr	r2, [r4, #28]
  40ba7e:	6913      	ldr	r3, [r2, #16]
  40ba80:	b16b      	cbz	r3, 40ba9e <.LVL376+0xfa>
                    put_byte(s, s->gzhead->extra_len & 0xff);
  40ba82:	68a1      	ldr	r1, [r4, #8]
  40ba84:	6963      	ldr	r3, [r4, #20]
  40ba86:	1c58      	adds	r0, r3, #1
  40ba88:	6160      	str	r0, [r4, #20]
  40ba8a:	6952      	ldr	r2, [r2, #20]
  40ba8c:	54ca      	strb	r2, [r1, r3]
                    put_byte(s, (s->gzhead->extra_len >> 8) & 0xff);
  40ba8e:	68a1      	ldr	r1, [r4, #8]
  40ba90:	6962      	ldr	r2, [r4, #20]
  40ba92:	1c53      	adds	r3, r2, #1
  40ba94:	6163      	str	r3, [r4, #20]
  40ba96:	69e3      	ldr	r3, [r4, #28]
  40ba98:	695b      	ldr	r3, [r3, #20]
  40ba9a:	0a1b      	lsrs	r3, r3, #8
  40ba9c:	548b      	strb	r3, [r1, r2]
                if (s->gzhead->hcrc)
  40ba9e:	69e3      	ldr	r3, [r4, #28]
  40baa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40baa2:	2b00      	cmp	r3, #0
  40baa4:	d149      	bne.n	40bb3a <.LBE43+0x76>
                s->gzindex = 0;
  40baa6:	2300      	movs	r3, #0
  40baa8:	6223      	str	r3, [r4, #32]
                s->status = EXTRA_STATE;
  40baaa:	2345      	movs	r3, #69	; 0x45
  40baac:	6063      	str	r3, [r4, #4]
        if (s->gzhead->extra != Z_NULL) {
  40baae:	69e0      	ldr	r0, [r4, #28]
  40bab0:	6903      	ldr	r3, [r0, #16]
  40bab2:	2b00      	cmp	r3, #0
  40bab4:	f000 80a9 	beq.w	40bc0a <.LBE47>

0040bab8 <.LBB43>:
            uInt beg = s->pending;  /* start of bytes to update crc */
  40bab8:	6961      	ldr	r1, [r4, #20]

0040baba <.LVL377>:
            while (s->gzindex < (s->gzhead->extra_len & 0xffff)) {
  40baba:	8a83      	ldrh	r3, [r0, #20]
  40babc:	6a22      	ldr	r2, [r4, #32]
  40babe:	429a      	cmp	r2, r3
  40bac0:	d375      	bcc.n	40bbae <.LVL390+0x26>
  40bac2:	e08a      	b.n	40bbda <.LVL394>

0040bac4 <.LBE43>:
                put_byte(s, 0);
  40bac4:	68a1      	ldr	r1, [r4, #8]
  40bac6:	6962      	ldr	r2, [r4, #20]
  40bac8:	1c53      	adds	r3, r2, #1
  40baca:	6163      	str	r3, [r4, #20]
  40bacc:	2300      	movs	r3, #0
  40bace:	548b      	strb	r3, [r1, r2]
                put_byte(s, 0);
  40bad0:	68a1      	ldr	r1, [r4, #8]
  40bad2:	6962      	ldr	r2, [r4, #20]
  40bad4:	1c50      	adds	r0, r2, #1
  40bad6:	6160      	str	r0, [r4, #20]
  40bad8:	548b      	strb	r3, [r1, r2]
                put_byte(s, 0);
  40bada:	68a1      	ldr	r1, [r4, #8]
  40badc:	6962      	ldr	r2, [r4, #20]
  40bade:	1c50      	adds	r0, r2, #1
  40bae0:	6160      	str	r0, [r4, #20]
  40bae2:	548b      	strb	r3, [r1, r2]
                put_byte(s, 0);
  40bae4:	68a1      	ldr	r1, [r4, #8]
  40bae6:	6962      	ldr	r2, [r4, #20]
  40bae8:	1c50      	adds	r0, r2, #1
  40baea:	6160      	str	r0, [r4, #20]
  40baec:	548b      	strb	r3, [r1, r2]
                put_byte(s, 0);
  40baee:	68a1      	ldr	r1, [r4, #8]
  40baf0:	6962      	ldr	r2, [r4, #20]
  40baf2:	1c50      	adds	r0, r2, #1
  40baf4:	6160      	str	r0, [r4, #20]
  40baf6:	548b      	strb	r3, [r1, r2]
                put_byte(s, s->level == 9 ? 2 :
  40baf8:	68a1      	ldr	r1, [r4, #8]
  40bafa:	6962      	ldr	r2, [r4, #20]
  40bafc:	1c53      	adds	r3, r2, #1
  40bafe:	6163      	str	r3, [r4, #20]
  40bb00:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
  40bb04:	2b09      	cmp	r3, #9
  40bb06:	d010      	beq.n	40bb2a <.LBE43+0x66>
  40bb08:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
  40bb0c:	2801      	cmp	r0, #1
  40bb0e:	dc0e      	bgt.n	40bb2e <.LBE43+0x6a>
  40bb10:	2b01      	cmp	r3, #1
  40bb12:	dd0c      	ble.n	40bb2e <.LBE43+0x6a>
  40bb14:	2300      	movs	r3, #0
  40bb16:	548b      	strb	r3, [r1, r2]
                put_byte(s, OS_CODE);
  40bb18:	68a2      	ldr	r2, [r4, #8]
  40bb1a:	6963      	ldr	r3, [r4, #20]
  40bb1c:	1c59      	adds	r1, r3, #1
  40bb1e:	6161      	str	r1, [r4, #20]
  40bb20:	2103      	movs	r1, #3
  40bb22:	54d1      	strb	r1, [r2, r3]
                s->status = BUSY_STATE;
  40bb24:	2371      	movs	r3, #113	; 0x71
  40bb26:	6063      	str	r3, [r4, #4]
  40bb28:	e6cf      	b.n	40b8ca <.LVL355+0x10>
                put_byte(s, s->level == 9 ? 2 :
  40bb2a:	2302      	movs	r3, #2
  40bb2c:	e7f3      	b.n	40bb16 <.LBE43+0x52>
  40bb2e:	2304      	movs	r3, #4
  40bb30:	e7f1      	b.n	40bb16 <.LBE43+0x52>
                put_byte(s, s->level == 9 ? 2 :
  40bb32:	2202      	movs	r2, #2
  40bb34:	e79a      	b.n	40ba6c <.LVL376+0xc8>
  40bb36:	2204      	movs	r2, #4
  40bb38:	e798      	b.n	40ba6c <.LVL376+0xc8>
                    strm->adler = crc32(strm->adler, s->pending_buf,
  40bb3a:	6962      	ldr	r2, [r4, #20]
  40bb3c:	68a1      	ldr	r1, [r4, #8]
  40bb3e:	6b28      	ldr	r0, [r5, #48]	; 0x30
  40bb40:	f007 fe78 	bl	413834 <.LFE21>

0040bb44 <.LVL379>:
  40bb44:	6328      	str	r0, [r5, #48]	; 0x30
  40bb46:	e7ae      	b.n	40baa6 <.LVL376+0x102>

0040bb48 <.LBB44>:
            if (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2)
  40bb48:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  40bb4c:	2a01      	cmp	r2, #1
  40bb4e:	dd06      	ble.n	40bb5e <.LVL382>
            else if (s->level < 6)
  40bb50:	2a05      	cmp	r2, #5
  40bb52:	dd06      	ble.n	40bb62 <.LVL384>
                level_flags = 3;
  40bb54:	2a06      	cmp	r2, #6
  40bb56:	bf0c      	ite	eq
  40bb58:	2102      	moveq	r1, #2

0040bb5a <.LVL381>:
  40bb5a:	2103      	movne	r1, #3
  40bb5c:	e6fd      	b.n	40b95a <.LVL363>

0040bb5e <.LVL382>:
                level_flags = 0;
  40bb5e:	2100      	movs	r1, #0

0040bb60 <.LVL383>:
  40bb60:	e6fb      	b.n	40b95a <.LVL363>

0040bb62 <.LVL384>:
                level_flags = 1;
  40bb62:	2101      	movs	r1, #1

0040bb64 <.LVL385>:
  40bb64:	e6f9      	b.n	40b95a <.LVL363>

0040bb66 <.LVL386>:
                putShortMSB(s, (uInt)(strm->adler >> 16));
  40bb66:	8e69      	ldrh	r1, [r5, #50]	; 0x32
  40bb68:	4620      	mov	r0, r4
  40bb6a:	f012 fd9a 	bl	41e6a2 <.LFE188>

0040bb6e <.LVL387>:
                putShortMSB(s, (uInt)(strm->adler & 0xffff));
  40bb6e:	8e29      	ldrh	r1, [r5, #48]	; 0x30
  40bb70:	4620      	mov	r0, r4
  40bb72:	f012 fd96 	bl	41e6a2 <.LFE188>

0040bb76 <.LVL388>:
  40bb76:	e709      	b.n	40b98c <.LVL371+0x8>
  40bb78:	0041e304 	.word	0x0041e304
  40bb7c:	08421085 	.word	0x08421085

0040bb80 <.LBB45>:
                    flush_pending(strm);
  40bb80:	4628      	mov	r0, r5
  40bb82:	f011 faa5 	bl	41d0d0 <.LFE41>

0040bb86 <.LVL389>:
                    beg = s->pending;
  40bb86:	6961      	ldr	r1, [r4, #20]

0040bb88 <.LVL390>:
                    if (s->pending == s->pending_buf_size)
  40bb88:	68e3      	ldr	r3, [r4, #12]
  40bb8a:	4299      	cmp	r1, r3
  40bb8c:	d025      	beq.n	40bbda <.LVL394>
                put_byte(s, s->gzhead->extra[s->gzindex]);
  40bb8e:	6963      	ldr	r3, [r4, #20]
  40bb90:	1c58      	adds	r0, r3, #1
  40bb92:	6160      	str	r0, [r4, #20]
  40bb94:	69e0      	ldr	r0, [r4, #28]
  40bb96:	6902      	ldr	r2, [r0, #16]
  40bb98:	6a20      	ldr	r0, [r4, #32]
  40bb9a:	5c10      	ldrb	r0, [r2, r0]
  40bb9c:	68a2      	ldr	r2, [r4, #8]
  40bb9e:	54d0      	strb	r0, [r2, r3]
                s->gzindex++;
  40bba0:	6a23      	ldr	r3, [r4, #32]
  40bba2:	3301      	adds	r3, #1
  40bba4:	6223      	str	r3, [r4, #32]
            while (s->gzindex < (s->gzhead->extra_len & 0xffff)) {
  40bba6:	69e0      	ldr	r0, [r4, #28]
  40bba8:	8a82      	ldrh	r2, [r0, #20]
  40bbaa:	429a      	cmp	r2, r3
  40bbac:	d910      	bls.n	40bbd0 <.LVL393>
                if (s->pending == s->pending_buf_size) {
  40bbae:	6962      	ldr	r2, [r4, #20]
  40bbb0:	68e3      	ldr	r3, [r4, #12]
  40bbb2:	429a      	cmp	r2, r3
  40bbb4:	d1eb      	bne.n	40bb8e <.LVL390+0x6>
                    if (s->gzhead->hcrc && s->pending > beg)
  40bbb6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  40bbb8:	2b00      	cmp	r3, #0
  40bbba:	d0e1      	beq.n	40bb80 <.LBB45>
  40bbbc:	428a      	cmp	r2, r1
  40bbbe:	d9df      	bls.n	40bb80 <.LBB45>
                        strm->adler = crc32(strm->adler, s->pending_buf + beg,
  40bbc0:	68a3      	ldr	r3, [r4, #8]
  40bbc2:	1a52      	subs	r2, r2, r1
  40bbc4:	4419      	add	r1, r3

0040bbc6 <.LVL391>:
  40bbc6:	6b28      	ldr	r0, [r5, #48]	; 0x30
  40bbc8:	f007 fe34 	bl	413834 <.LFE21>

0040bbcc <.LVL392>:
  40bbcc:	6328      	str	r0, [r5, #48]	; 0x30
  40bbce:	e7d7      	b.n	40bb80 <.LBB45>

0040bbd0 <.LVL393>:
            if (s->gzhead->hcrc && s->pending > beg)
  40bbd0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  40bbd2:	b113      	cbz	r3, 40bbda <.LVL394>
  40bbd4:	6962      	ldr	r2, [r4, #20]
  40bbd6:	4291      	cmp	r1, r2
  40bbd8:	d30f      	bcc.n	40bbfa <.LBB47>

0040bbda <.LVL394>:
            if (s->gzindex == s->gzhead->extra_len) {
  40bbda:	69e3      	ldr	r3, [r4, #28]
  40bbdc:	6a22      	ldr	r2, [r4, #32]
  40bbde:	695b      	ldr	r3, [r3, #20]
  40bbe0:	429a      	cmp	r2, r3
  40bbe2:	f47f ae6e 	bne.w	40b8c2 <.LVL355+0x8>
                s->gzindex = 0;
  40bbe6:	2300      	movs	r3, #0
  40bbe8:	6223      	str	r3, [r4, #32]
                s->status = NAME_STATE;
  40bbea:	2349      	movs	r3, #73	; 0x49
  40bbec:	6063      	str	r3, [r4, #4]

0040bbee <.LBE45>:
        if (s->gzhead->name != Z_NULL) {
  40bbee:	69e3      	ldr	r3, [r4, #28]
  40bbf0:	69db      	ldr	r3, [r3, #28]
  40bbf2:	2b00      	cmp	r3, #0
  40bbf4:	d040      	beq.n	40bc78 <.LBE48>

0040bbf6 <.LBB46>:
            uInt beg = s->pending;  /* start of bytes to update crc */
  40bbf6:	6960      	ldr	r0, [r4, #20]

0040bbf8 <.LVL395>:
  40bbf8:	e020      	b.n	40bc3c <.LVL402>

0040bbfa <.LBB47>:
                strm->adler = crc32(strm->adler, s->pending_buf + beg,
  40bbfa:	68a3      	ldr	r3, [r4, #8]
  40bbfc:	1a52      	subs	r2, r2, r1
  40bbfe:	4419      	add	r1, r3

0040bc00 <.LVL397>:
  40bc00:	6b28      	ldr	r0, [r5, #48]	; 0x30
  40bc02:	f007 fe17 	bl	413834 <.LFE21>

0040bc06 <.LVL398>:
  40bc06:	6328      	str	r0, [r5, #48]	; 0x30
  40bc08:	e7e7      	b.n	40bbda <.LVL394>

0040bc0a <.LBE47>:
            s->status = NAME_STATE;
  40bc0a:	2349      	movs	r3, #73	; 0x49
  40bc0c:	6063      	str	r3, [r4, #4]
  40bc0e:	e7ee      	b.n	40bbee <.LBE45>

0040bc10 <.LBB48>:
                    flush_pending(strm);
  40bc10:	4628      	mov	r0, r5
  40bc12:	f011 fa5d 	bl	41d0d0 <.LFE41>

0040bc16 <.LVL399>:
                    beg = s->pending;
  40bc16:	6960      	ldr	r0, [r4, #20]

0040bc18 <.LVL400>:
                    if (s->pending == s->pending_buf_size) {
  40bc18:	68e3      	ldr	r3, [r4, #12]
  40bc1a:	4298      	cmp	r0, r3
  40bc1c:	f43f ae55 	beq.w	40b8ca <.LVL355+0x10>
                val = s->gzhead->name[s->gzindex++];
  40bc20:	69e3      	ldr	r3, [r4, #28]
  40bc22:	69da      	ldr	r2, [r3, #28]
  40bc24:	6a23      	ldr	r3, [r4, #32]
  40bc26:	1c59      	adds	r1, r3, #1
  40bc28:	6221      	str	r1, [r4, #32]
  40bc2a:	5cd3      	ldrb	r3, [r2, r3]

0040bc2c <.LVL401>:
                put_byte(s, val);
  40bc2c:	6962      	ldr	r2, [r4, #20]
  40bc2e:	1c51      	adds	r1, r2, #1
  40bc30:	6161      	str	r1, [r4, #20]
  40bc32:	68a1      	ldr	r1, [r4, #8]
  40bc34:	548b      	strb	r3, [r1, r2]
            } while (val != 0);
  40bc36:	2b00      	cmp	r3, #0
  40bc38:	f000 830f 	beq.w	40c25a <.LBB72>

0040bc3c <.LVL402>:
                if (s->pending == s->pending_buf_size) {
  40bc3c:	6962      	ldr	r2, [r4, #20]
  40bc3e:	68e3      	ldr	r3, [r4, #12]
  40bc40:	429a      	cmp	r2, r3
  40bc42:	d1ed      	bne.n	40bc20 <.LVL400+0x8>
                    if (s->gzhead->hcrc && s->pending > beg)
  40bc44:	69e3      	ldr	r3, [r4, #28]
  40bc46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40bc48:	2b00      	cmp	r3, #0
  40bc4a:	d0e1      	beq.n	40bc10 <.LBB48>
  40bc4c:	4290      	cmp	r0, r2
  40bc4e:	d2df      	bcs.n	40bc10 <.LBB48>
                        strm->adler = crc32(strm->adler, s->pending_buf + beg,
  40bc50:	68a1      	ldr	r1, [r4, #8]
  40bc52:	1a12      	subs	r2, r2, r0
  40bc54:	4401      	add	r1, r0
  40bc56:	6b28      	ldr	r0, [r5, #48]	; 0x30

0040bc58 <.LVL403>:
  40bc58:	f007 fdec 	bl	413834 <.LFE21>

0040bc5c <.LVL404>:
  40bc5c:	6328      	str	r0, [r5, #48]	; 0x30
  40bc5e:	e7d7      	b.n	40bc10 <.LBB48>

0040bc60 <.LVL405>:
            if (s->gzhead->hcrc && s->pending > beg)
  40bc60:	6962      	ldr	r2, [r4, #20]
  40bc62:	4290      	cmp	r0, r2
  40bc64:	f080 82fe 	bcs.w	40c264 <.LVL525>
                strm->adler = crc32(strm->adler, s->pending_buf + beg,
  40bc68:	68a1      	ldr	r1, [r4, #8]
  40bc6a:	1a12      	subs	r2, r2, r0
  40bc6c:	4401      	add	r1, r0
  40bc6e:	6b28      	ldr	r0, [r5, #48]	; 0x30

0040bc70 <.LVL406>:
  40bc70:	f007 fde0 	bl	413834 <.LFE21>

0040bc74 <.LVL407>:
  40bc74:	6328      	str	r0, [r5, #48]	; 0x30
  40bc76:	e2f5      	b.n	40c264 <.LVL525>

0040bc78 <.LBE48>:
            s->status = COMMENT_STATE;
  40bc78:	235b      	movs	r3, #91	; 0x5b
  40bc7a:	6063      	str	r3, [r4, #4]
  40bc7c:	e2f6      	b.n	40c26c <.LBE72>

0040bc7e <.LBB49>:
                    flush_pending(strm);
  40bc7e:	4628      	mov	r0, r5
  40bc80:	f011 fa26 	bl	41d0d0 <.LFE41>

0040bc84 <.LVL410>:
                    beg = s->pending;
  40bc84:	6960      	ldr	r0, [r4, #20]

0040bc86 <.LVL411>:
                    if (s->pending == s->pending_buf_size) {
  40bc86:	68e3      	ldr	r3, [r4, #12]
  40bc88:	4298      	cmp	r0, r3
  40bc8a:	f43f ae22 	beq.w	40b8d2 <.LVL355+0x18>
                val = s->gzhead->comment[s->gzindex++];
  40bc8e:	69e3      	ldr	r3, [r4, #28]
  40bc90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  40bc92:	6a23      	ldr	r3, [r4, #32]
  40bc94:	1c59      	adds	r1, r3, #1
  40bc96:	6221      	str	r1, [r4, #32]
  40bc98:	5cd3      	ldrb	r3, [r2, r3]

0040bc9a <.LVL412>:
                put_byte(s, val);
  40bc9a:	6962      	ldr	r2, [r4, #20]
  40bc9c:	1c51      	adds	r1, r2, #1
  40bc9e:	6161      	str	r1, [r4, #20]
  40bca0:	68a1      	ldr	r1, [r4, #8]
  40bca2:	548b      	strb	r3, [r1, r2]
            } while (val != 0);
  40bca4:	2b00      	cmp	r3, #0
  40bca6:	f000 82e8 	beq.w	40c27a <.LVL528>

0040bcaa <.LVL413>:
                if (s->pending == s->pending_buf_size) {
  40bcaa:	6962      	ldr	r2, [r4, #20]
  40bcac:	68e3      	ldr	r3, [r4, #12]
  40bcae:	429a      	cmp	r2, r3
  40bcb0:	d1ed      	bne.n	40bc8e <.LVL411+0x8>
                    if (s->gzhead->hcrc && s->pending > beg)
  40bcb2:	69e3      	ldr	r3, [r4, #28]
  40bcb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40bcb6:	2b00      	cmp	r3, #0
  40bcb8:	d0e1      	beq.n	40bc7e <.LBB49>
  40bcba:	4290      	cmp	r0, r2
  40bcbc:	d2df      	bcs.n	40bc7e <.LBB49>
                        strm->adler = crc32(strm->adler, s->pending_buf + beg,
  40bcbe:	68a1      	ldr	r1, [r4, #8]
  40bcc0:	1a12      	subs	r2, r2, r0
  40bcc2:	4401      	add	r1, r0
  40bcc4:	6b28      	ldr	r0, [r5, #48]	; 0x30

0040bcc6 <.LVL414>:
  40bcc6:	f007 fdb5 	bl	413834 <.LFE21>

0040bcca <.LVL415>:
  40bcca:	6328      	str	r0, [r5, #48]	; 0x30
  40bccc:	e7d7      	b.n	40bc7e <.LBB49>

0040bcce <.LVL416>:
            if (s->gzhead->hcrc && s->pending > beg)
  40bcce:	6962      	ldr	r2, [r4, #20]
  40bcd0:	4290      	cmp	r0, r2
  40bcd2:	f080 82d7 	bcs.w	40c284 <.LVL529>
                strm->adler = crc32(strm->adler, s->pending_buf + beg,
  40bcd6:	68a1      	ldr	r1, [r4, #8]
  40bcd8:	1a12      	subs	r2, r2, r0
  40bcda:	4401      	add	r1, r0
  40bcdc:	6b28      	ldr	r0, [r5, #48]	; 0x30

0040bcde <.LVL417>:
  40bcde:	f007 fda9 	bl	413834 <.LFE21>

0040bce2 <.LVL418>:
  40bce2:	6328      	str	r0, [r5, #48]	; 0x30
  40bce4:	e2ce      	b.n	40c284 <.LVL529>

0040bce6 <.LBE49>:
            s->status = HCRC_STATE;
  40bce6:	2367      	movs	r3, #103	; 0x67
  40bce8:	6063      	str	r3, [r4, #4]
  40bcea:	e2cd      	b.n	40c288 <.LBE73>
                flush_pending(strm);
  40bcec:	4628      	mov	r0, r5
  40bcee:	f011 f9ef 	bl	41d0d0 <.LFE41>

0040bcf2 <.LVL420>:
            if (s->pending + 2 <= s->pending_buf_size) {
  40bcf2:	6963      	ldr	r3, [r4, #20]
  40bcf4:	1c99      	adds	r1, r3, #2
  40bcf6:	68e2      	ldr	r2, [r4, #12]
  40bcf8:	4291      	cmp	r1, r2
  40bcfa:	f63f adee 	bhi.w	40b8da <.LVL355+0x20>
  40bcfe:	e2ce      	b.n	40c29e <.LBE73+0x16>
            s->status = BUSY_STATE;
  40bd00:	2371      	movs	r3, #113	; 0x71
  40bd02:	6063      	str	r3, [r4, #4]
  40bd04:	e5e9      	b.n	40b8da <.LVL355+0x20>
        flush_pending(strm);
  40bd06:	4628      	mov	r0, r5
  40bd08:	f011 f9e2 	bl	41d0d0 <.LFE41>

0040bd0c <.LVL421>:
        if (strm->avail_out == 0) {
  40bd0c:	692b      	ldr	r3, [r5, #16]
  40bd0e:	b1ab      	cbz	r3, 40bd3c <.LBE50>

0040bd10 <.LVL422>:
    }

    /* User must not provide more input after the first FINISH: */
    if (s->status == FINISH_STATE && strm->avail_in != 0) {
  40bd10:	6863      	ldr	r3, [r4, #4]
  40bd12:	f240 229a 	movw	r2, #666	; 0x29a
  40bd16:	4293      	cmp	r3, r2
  40bd18:	d016      	beq.n	40bd48 <.LVL424>
        ERR_RETURN(strm, Z_BUF_ERROR);
    }

    /* Start a new block or continue the current one.
     */
    if (strm->avail_in != 0 || s->lookahead != 0 ||
  40bd1a:	686a      	ldr	r2, [r5, #4]
  40bd1c:	2a00      	cmp	r2, #0
  40bd1e:	f040 82da 	bne.w	40c2d6 <.LBB74>
  40bd22:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40bd24:	2a00      	cmp	r2, #0
  40bd26:	f040 82d6 	bne.w	40c2d6 <.LBB74>
        (flush != Z_NO_FLUSH && s->status != FINISH_STATE)) {
  40bd2a:	f240 229a 	movw	r2, #666	; 0x29a
  40bd2e:	4293      	cmp	r3, r2
  40bd30:	f000 82f0 	beq.w	40c314 <.LBE74>
  40bd34:	2f00      	cmp	r7, #0
  40bd36:	f040 82ce 	bne.w	40c2d6 <.LBB74>

0040bd3a <.LBB50>:
  40bd3a:	e2eb      	b.n	40c314 <.LBE74>

0040bd3c <.LBE50>:
            s->last_flush = -1;
  40bd3c:	f04f 33ff 	mov.w	r3, #4294967295
  40bd40:	62a3      	str	r3, [r4, #40]	; 0x28
            return Z_OK;
  40bd42:	2000      	movs	r0, #0
  40bd44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040bd48 <.LVL424>:
    if (s->status == FINISH_STATE && strm->avail_in != 0) {
  40bd48:	686b      	ldr	r3, [r5, #4]
  40bd4a:	b923      	cbnz	r3, 40bd56 <.LVL424+0xe>
    if (strm->avail_in != 0 || s->lookahead != 0 ||
  40bd4c:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40bd4e:	2b00      	cmp	r3, #0
  40bd50:	f040 82c1 	bne.w	40c2d6 <.LBB74>
  40bd54:	e2de      	b.n	40c314 <.LBE74>
        ERR_RETURN(strm, Z_BUF_ERROR);
  40bd56:	4b86      	ldr	r3, [pc, #536]	; (40bf70 <.LVL459+0x1e>)
  40bd58:	69db      	ldr	r3, [r3, #28]
  40bd5a:	61ab      	str	r3, [r5, #24]
  40bd5c:	f06f 0004 	mvn.w	r0, #4
  40bd60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040bd64 <.LBB51>:
        }

        /* Output a literal byte */
        s->match_length = 0;
        Tracevv((stderr,"%c", s->window[s->strstart]));
        _tr_tally_lit (s, s->window[s->strstart], bflush);
  40bd64:	f241 68a4 	movw	r8, #5796	; 0x16a4
  40bd68:	44a0      	add	r8, r4
  40bd6a:	e069      	b.n	40be40 <.LVL439+0xa>

0040bd6c <.LBE53>:
        s->match_length = 0;
  40bd6c:	6626      	str	r6, [r4, #96]	; 0x60

0040bd6e <.LBB54>:
        _tr_tally_lit (s, s->window[s->strstart], bflush);
  40bd6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40bd70:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40bd72:	5cd3      	ldrb	r3, [r2, r3]

0040bd74 <.LVL426>:
  40bd74:	f504 51b5 	add.w	r1, r4, #5792	; 0x16a0
  40bd78:	6808      	ldr	r0, [r1, #0]
  40bd7a:	f8d8 2000 	ldr.w	r2, [r8]
  40bd7e:	f822 6010 	strh.w	r6, [r2, r0, lsl #1]
  40bd82:	f241 6298 	movw	r2, #5784	; 0x1698
  40bd86:	58a0      	ldr	r0, [r4, r2]
  40bd88:	680a      	ldr	r2, [r1, #0]
  40bd8a:	f102 0e01 	add.w	lr, r2, #1
  40bd8e:	f8c1 e000 	str.w	lr, [r1]
  40bd92:	5483      	strb	r3, [r0, r2]
  40bd94:	eb04 0383 	add.w	r3, r4, r3, lsl #2

0040bd98 <.LVL427>:
  40bd98:	f8b3 2094 	ldrh.w	r2, [r3, #148]	; 0x94

0040bd9c <.LVL428>:
  40bd9c:	3201      	adds	r2, #1
  40bd9e:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

0040bda2 <.LVL429>:
  40bda2:	6809      	ldr	r1, [r1, #0]
  40bda4:	f241 639c 	movw	r3, #5788	; 0x169c
  40bda8:	58e3      	ldr	r3, [r4, r3]
  40bdaa:	3b01      	subs	r3, #1

0040bdac <.LBE54>:
        s->lookahead--;
  40bdac:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40bdae:	3a01      	subs	r2, #1
  40bdb0:	6762      	str	r2, [r4, #116]	; 0x74
        s->strstart++;
  40bdb2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  40bdb4:	3201      	adds	r2, #1
  40bdb6:	66e2      	str	r2, [r4, #108]	; 0x6c
        if (bflush) FLUSH_BLOCK(s, 0);
  40bdb8:	4299      	cmp	r1, r3
  40bdba:	d02d      	beq.n	40be18 <.LVL435>

0040bdbc <.LVL431>:
        if (s->lookahead == 0) {
  40bdbc:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40bdbe:	2b00      	cmp	r3, #0
  40bdc0:	d1d4      	bne.n	40bd6c <.LBE53>
            fill_window(s);
  40bdc2:	4620      	mov	r0, r4
  40bdc4:	f008 ffb6 	bl	414d34 <fill_window>

0040bdc8 <.LVL432>:
            if (s->lookahead == 0) {
  40bdc8:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40bdca:	2b00      	cmp	r3, #0
  40bdcc:	d1ce      	bne.n	40bd6c <.LBE53>
                if (flush == Z_NO_FLUSH)
  40bdce:	2f00      	cmp	r7, #0
  40bdd0:	f000 817d 	beq.w	40c0ce <.LBE66>
    }
    s->insert = 0;
  40bdd4:	2200      	movs	r2, #0
  40bdd6:	f241 63b4 	movw	r3, #5812	; 0x16b4
  40bdda:	50e2      	str	r2, [r4, r3]
    if (flush == Z_FINISH) {
  40bddc:	2f04      	cmp	r7, #4
  40bdde:	d033      	beq.n	40be48 <.LVL442>
        FLUSH_BLOCK(s, 1);
        return finish_done;
    }
    if (s->last_lit)
  40bde0:	f504 53b5 	add.w	r3, r4, #5792	; 0x16a0
  40bde4:	681b      	ldr	r3, [r3, #0]
  40bde6:	2b00      	cmp	r3, #0
  40bde8:	f000 819b 	beq.w	40c122 <.LBE68>
        FLUSH_BLOCK(s, 0);
  40bdec:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  40bdee:	2a00      	cmp	r2, #0
  40bdf0:	db43      	blt.n	40be7a <.LVL444+0x12>
  40bdf2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  40bdf4:	4411      	add	r1, r2
  40bdf6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  40bdf8:	2300      	movs	r3, #0
  40bdfa:	1a82      	subs	r2, r0, r2
  40bdfc:	4620      	mov	r0, r4
  40bdfe:	f003 fa43 	bl	40f288 <_tr_flush_block>

0040be02 <.LVL433>:
  40be02:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40be04:	65e3      	str	r3, [r4, #92]	; 0x5c
  40be06:	6820      	ldr	r0, [r4, #0]
  40be08:	f011 f962 	bl	41d0d0 <.LFE41>

0040be0c <.LVL434>:
  40be0c:	6823      	ldr	r3, [r4, #0]
  40be0e:	6918      	ldr	r0, [r3, #16]
        if (bflush) FLUSH_BLOCK(s, 0);
  40be10:	3000      	adds	r0, #0
  40be12:	bf18      	it	ne
  40be14:	2001      	movne	r0, #1
  40be16:	e271      	b.n	40c2fc <.LVL533>

0040be18 <.LVL435>:
  40be18:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  40be1a:	2800      	cmp	r0, #0
  40be1c:	db12      	blt.n	40be44 <.LVL440>
  40be1e:	6ba1      	ldr	r1, [r4, #56]	; 0x38

0040be20 <.LVL436>:
  40be20:	4401      	add	r1, r0
  40be22:	2300      	movs	r3, #0

0040be24 <.LVL437>:
  40be24:	1a12      	subs	r2, r2, r0
  40be26:	4620      	mov	r0, r4
  40be28:	f003 fa2e 	bl	40f288 <_tr_flush_block>

0040be2c <.LVL438>:
  40be2c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40be2e:	65e3      	str	r3, [r4, #92]	; 0x5c
  40be30:	6820      	ldr	r0, [r4, #0]
  40be32:	f011 f94d 	bl	41d0d0 <.LFE41>

0040be36 <.LVL439>:
  40be36:	6823      	ldr	r3, [r4, #0]
  40be38:	691b      	ldr	r3, [r3, #16]
  40be3a:	2b00      	cmp	r3, #0
  40be3c:	f000 8147 	beq.w	40c0ce <.LBE66>
        s->match_length = 0;
  40be40:	2600      	movs	r6, #0
  40be42:	e7bb      	b.n	40bdbc <.LVL431>

0040be44 <.LVL440>:
        if (bflush) FLUSH_BLOCK(s, 0);
  40be44:	2100      	movs	r1, #0

0040be46 <.LVL441>:
  40be46:	e7ec      	b.n	40be22 <.LVL436+0x2>

0040be48 <.LVL442>:
        FLUSH_BLOCK(s, 1);
  40be48:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  40be4a:	2a00      	cmp	r2, #0
  40be4c:	db13      	blt.n	40be76 <.LVL444+0xe>
  40be4e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  40be50:	4411      	add	r1, r2
  40be52:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  40be54:	2301      	movs	r3, #1
  40be56:	1a82      	subs	r2, r0, r2
  40be58:	4620      	mov	r0, r4
  40be5a:	f003 fa15 	bl	40f288 <_tr_flush_block>

0040be5e <.LVL443>:
  40be5e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40be60:	65e3      	str	r3, [r4, #92]	; 0x5c
  40be62:	6820      	ldr	r0, [r4, #0]
  40be64:	f011 f934 	bl	41d0d0 <.LFE41>

0040be68 <.LVL444>:
  40be68:	6823      	ldr	r3, [r4, #0]
  40be6a:	691b      	ldr	r3, [r3, #16]
        return finish_done;
  40be6c:	2b00      	cmp	r3, #0
  40be6e:	bf0c      	ite	eq
  40be70:	2002      	moveq	r0, #2
  40be72:	2003      	movne	r0, #3
  40be74:	e14d      	b.n	40c112 <.LBE67>
        FLUSH_BLOCK(s, 1);
  40be76:	2100      	movs	r1, #0
  40be78:	e7eb      	b.n	40be52 <.LVL442+0xa>
        FLUSH_BLOCK(s, 0);
  40be7a:	2100      	movs	r1, #0
  40be7c:	e7bb      	b.n	40bdf6 <.LVL432+0x2e>

0040be7e <.LBB56>:
            _tr_tally_lit (s, s->window[s->strstart], bflush);
  40be7e:	f241 66a4 	movw	r6, #5796	; 0x16a4
  40be82:	4426      	add	r6, r4

0040be84 <.LBB59>:
            _tr_tally_dist(s, 1, s->match_length - MIN_MATCH, bflush);
  40be84:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 40bf74 <.LVL459+0x22>
  40be88:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 40bf78 <.LVL459+0x26>
  40be8c:	e0b8      	b.n	40c000 <.LVL473>

0040be8e <.LBE59>:
            fill_window(s);
  40be8e:	4620      	mov	r0, r4
  40be90:	f008 ff50 	bl	414d34 <fill_window>

0040be94 <.LVL445>:
            if (s->lookahead <= MAX_MATCH && flush == Z_NO_FLUSH) {
  40be94:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40be96:	b91f      	cbnz	r7, 40bea0 <.LVL445+0xc>
  40be98:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
  40be9c:	f240 8117 	bls.w	40c0ce <.LBE66>
            if (s->lookahead == 0) break; /* flush the current block */
  40bea0:	2b00      	cmp	r3, #0
  40bea2:	f040 80b2 	bne.w	40c00a <.LVL473+0xa>
    s->insert = 0;
  40bea6:	2200      	movs	r2, #0
  40bea8:	f241 63b4 	movw	r3, #5812	; 0x16b4
  40beac:	50e2      	str	r2, [r4, r3]
    if (flush == Z_FINISH) {
  40beae:	2f04      	cmp	r7, #4
  40beb0:	f000 8119 	beq.w	40c0e6 <.LVL500>
    if (s->last_lit)
  40beb4:	f504 53b5 	add.w	r3, r4, #5792	; 0x16a0
  40beb8:	681b      	ldr	r3, [r3, #0]
  40beba:	2b00      	cmp	r3, #0
  40bebc:	f000 8131 	beq.w	40c122 <.LBE68>
        FLUSH_BLOCK(s, 0);
  40bec0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  40bec2:	2a00      	cmp	r2, #0
  40bec4:	f2c0 812b 	blt.w	40c11e <.LBB68+0x4>
  40bec8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  40beca:	4411      	add	r1, r2
  40becc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  40bece:	2300      	movs	r3, #0
  40bed0:	1a82      	subs	r2, r0, r2
  40bed2:	4620      	mov	r0, r4
  40bed4:	f003 f9d8 	bl	40f288 <_tr_flush_block>

0040bed8 <.LVL446>:
  40bed8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40beda:	65e3      	str	r3, [r4, #92]	; 0x5c
  40bedc:	6820      	ldr	r0, [r4, #0]
  40bede:	f011 f8f7 	bl	41d0d0 <.LFE41>

0040bee2 <.LVL447>:
  40bee2:	6823      	ldr	r3, [r4, #0]
  40bee4:	6918      	ldr	r0, [r3, #16]

0040bee6 <.LBB65>:
        if (bflush) FLUSH_BLOCK(s, 0);
  40bee6:	3000      	adds	r0, #0
  40bee8:	bf18      	it	ne
  40beea:	2001      	movne	r0, #1
  40beec:	e206      	b.n	40c2fc <.LVL533>

0040beee <.LBB66>:
            if (prev == *++scan && prev == *++scan && prev == *++scan) {
  40beee:	f890 c002 	ldrb.w	ip, [r0, #2]
  40bef2:	4561      	cmp	r1, ip
  40bef4:	f040 809c 	bne.w	40c030 <.LBB61>

0040bef8 <.LVL449>:
  40bef8:	f890 c003 	ldrb.w	ip, [r0, #3]
  40befc:	4561      	cmp	r1, ip
  40befe:	f040 8097 	bne.w	40c030 <.LBB61>
  40bf02:	3003      	adds	r0, #3

0040bf04 <.LVL450>:
                strend = s->window + s->strstart + MAX_MATCH;
  40bf04:	f503 7381 	add.w	r3, r3, #258	; 0x102
  40bf08:	4473      	add	r3, lr

0040bf0a <.LVL451>:
                } while (prev == *++scan && prev == *++scan &&
  40bf0a:	f890 e001 	ldrb.w	lr, [r0, #1]
                         scan < strend);
  40bf0e:	4571      	cmp	r1, lr
  40bf10:	d134      	bne.n	40bf7c <.LVL460>

0040bf12 <.LVL452>:
                } while (prev == *++scan && prev == *++scan &&
  40bf12:	f890 e002 	ldrb.w	lr, [r0, #2]
  40bf16:	4571      	cmp	r1, lr
  40bf18:	f040 80b5 	bne.w	40c086 <.LVL482>

0040bf1c <.LVL453>:
                         prev == *++scan && prev == *++scan &&
  40bf1c:	f890 e003 	ldrb.w	lr, [r0, #3]
                } while (prev == *++scan && prev == *++scan &&
  40bf20:	4571      	cmp	r1, lr
  40bf22:	f040 80b2 	bne.w	40c08a <.LVL484>

0040bf26 <.LVL454>:
                         prev == *++scan && prev == *++scan &&
  40bf26:	f890 e004 	ldrb.w	lr, [r0, #4]
  40bf2a:	4571      	cmp	r1, lr
  40bf2c:	f040 80af 	bne.w	40c08e <.LVL486>

0040bf30 <.LVL455>:
                         prev == *++scan && prev == *++scan &&
  40bf30:	f890 e005 	ldrb.w	lr, [r0, #5]
                         prev == *++scan && prev == *++scan &&
  40bf34:	4571      	cmp	r1, lr
  40bf36:	f040 80ac 	bne.w	40c092 <.LVL488>

0040bf3a <.LVL456>:
                         prev == *++scan && prev == *++scan &&
  40bf3a:	f890 e006 	ldrb.w	lr, [r0, #6]
  40bf3e:	4571      	cmp	r1, lr
  40bf40:	f040 80a9 	bne.w	40c096 <.LVL490>

0040bf44 <.LVL457>:
                         prev == *++scan && prev == *++scan &&
  40bf44:	f890 e007 	ldrb.w	lr, [r0, #7]
                         prev == *++scan && prev == *++scan &&
  40bf48:	4571      	cmp	r1, lr
  40bf4a:	f040 80a6 	bne.w	40c09a <.LVL492>

0040bf4e <.LVL458>:
                         prev == *++scan && prev == *++scan &&
  40bf4e:	f810 ef08 	ldrb.w	lr, [r0, #8]!

0040bf52 <.LVL459>:
  40bf52:	458e      	cmp	lr, r1
  40bf54:	bf14      	ite	ne
  40bf56:	f04f 0c00 	movne.w	ip, #0
  40bf5a:	f04f 0c01 	moveq.w	ip, #1
  40bf5e:	4298      	cmp	r0, r3
  40bf60:	bf28      	it	cs
  40bf62:	f04f 0c00 	movcs.w	ip, #0
  40bf66:	f1bc 0f00 	cmp.w	ip, #0
  40bf6a:	d1ce      	bne.n	40bf0a <.LVL451>
  40bf6c:	e007      	b.n	40bf7e <.LVL461>
  40bf6e:	bf00      	nop
  40bf70:	0041e304 	.word	0x0041e304
  40bf74:	00417964 	.word	0x00417964
  40bf78:	00414b34 	.word	0x00414b34

0040bf7c <.LVL460>:
                         scan < strend);
  40bf7c:	3001      	adds	r0, #1

0040bf7e <.LVL461>:
                s->match_length = MAX_MATCH - (int)(strend - scan);
  40bf7e:	1a1b      	subs	r3, r3, r0

0040bf80 <.LVL462>:
  40bf80:	f5c3 7381 	rsb	r3, r3, #258	; 0x102
  40bf84:	6623      	str	r3, [r4, #96]	; 0x60
                if (s->match_length > s->lookahead)
  40bf86:	429a      	cmp	r2, r3
  40bf88:	f080 8089 	bcs.w	40c09e <.LVL494>
                    s->match_length = s->lookahead;
  40bf8c:	6622      	str	r2, [r4, #96]	; 0x60
        if (s->match_length >= MIN_MATCH) {
  40bf8e:	4613      	mov	r3, r2

0040bf90 <.LBB60>:
            _tr_tally_dist(s, 1, s->match_length - MIN_MATCH, bflush);
  40bf90:	3b03      	subs	r3, #3
  40bf92:	b2db      	uxtb	r3, r3

0040bf94 <.LVL463>:
  40bf94:	f504 52b5 	add.w	r2, r4, #5792	; 0x16a0
  40bf98:	6810      	ldr	r0, [r2, #0]

0040bf9a <.LVL464>:
  40bf9a:	6831      	ldr	r1, [r6, #0]

0040bf9c <.LVL465>:
  40bf9c:	f04f 0e01 	mov.w	lr, #1
  40bfa0:	f821 e010 	strh.w	lr, [r1, r0, lsl #1]

0040bfa4 <.LVL466>:
  40bfa4:	f241 6198 	movw	r1, #5784	; 0x1698
  40bfa8:	5860      	ldr	r0, [r4, r1]
  40bfaa:	6811      	ldr	r1, [r2, #0]
  40bfac:	448e      	add	lr, r1
  40bfae:	f8c2 e000 	str.w	lr, [r2]
  40bfb2:	5443      	strb	r3, [r0, r1]

0040bfb4 <.LVL467>:
  40bfb4:	f819 3003 	ldrb.w	r3, [r9, r3]

0040bfb8 <.LVL468>:
  40bfb8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  40bfbc:	f8b3 1498 	ldrh.w	r1, [r3, #1176]	; 0x498

0040bfc0 <.LVL469>:
  40bfc0:	3101      	adds	r1, #1
  40bfc2:	f8a3 1498 	strh.w	r1, [r3, #1176]	; 0x498

0040bfc6 <.LVL470>:
  40bfc6:	f898 3000 	ldrb.w	r3, [r8]
  40bfca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  40bfce:	f8b3 1988 	ldrh.w	r1, [r3, #2440]	; 0x988
  40bfd2:	3101      	adds	r1, #1
  40bfd4:	f8a3 1988 	strh.w	r1, [r3, #2440]	; 0x988
  40bfd8:	f241 639c 	movw	r3, #5788	; 0x169c
  40bfdc:	58e3      	ldr	r3, [r4, r3]
  40bfde:	3b01      	subs	r3, #1
  40bfe0:	6812      	ldr	r2, [r2, #0]
  40bfe2:	4293      	cmp	r3, r2
  40bfe4:	bf14      	ite	ne
  40bfe6:	2300      	movne	r3, #0
  40bfe8:	2301      	moveq	r3, #1

0040bfea <.LBE60>:
            s->lookahead -= s->match_length;
  40bfea:	6e20      	ldr	r0, [r4, #96]	; 0x60
  40bfec:	6f61      	ldr	r1, [r4, #116]	; 0x74
  40bfee:	1a09      	subs	r1, r1, r0
  40bff0:	6761      	str	r1, [r4, #116]	; 0x74
            s->strstart += s->match_length;
  40bff2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  40bff4:	4402      	add	r2, r0
  40bff6:	66e2      	str	r2, [r4, #108]	; 0x6c
            s->match_length = 0;
  40bff8:	2200      	movs	r2, #0
  40bffa:	6622      	str	r2, [r4, #96]	; 0x60

0040bffc <.LVL472>:
        if (bflush) FLUSH_BLOCK(s, 0);
  40bffc:	2b00      	cmp	r3, #0
  40bffe:	d152      	bne.n	40c0a6 <.LVL495>

0040c000 <.LVL473>:
        if (s->lookahead <= MAX_MATCH) {
  40c000:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40c002:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
  40c006:	f67f af42 	bls.w	40be8e <.LBE59>
        s->match_length = 0;
  40c00a:	2300      	movs	r3, #0
  40c00c:	6623      	str	r3, [r4, #96]	; 0x60
        if (s->lookahead >= MIN_MATCH && s->strstart > 0) {
  40c00e:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40c010:	2a02      	cmp	r2, #2
  40c012:	d90d      	bls.n	40c030 <.LBB61>
  40c014:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40c016:	b15b      	cbz	r3, 40c030 <.LBB61>
            scan = s->window + s->strstart - 1;
  40c018:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
  40c01c:	1e59      	subs	r1, r3, #1
  40c01e:	eb0e 0001 	add.w	r0, lr, r1

0040c022 <.LVL474>:
            prev = *scan;
  40c022:	f81e 1001 	ldrb.w	r1, [lr, r1]

0040c026 <.LVL475>:
            if (prev == *++scan && prev == *++scan && prev == *++scan) {
  40c026:	f890 c001 	ldrb.w	ip, [r0, #1]
  40c02a:	4561      	cmp	r1, ip
  40c02c:	f43f af5f 	beq.w	40beee <.LBB66>

0040c030 <.LBB61>:
            _tr_tally_lit (s, s->window[s->strstart], bflush);
  40c030:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40c032:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40c034:	5cd3      	ldrb	r3, [r2, r3]

0040c036 <.LVL477>:
  40c036:	f504 51b5 	add.w	r1, r4, #5792	; 0x16a0
  40c03a:	6808      	ldr	r0, [r1, #0]
  40c03c:	6832      	ldr	r2, [r6, #0]
  40c03e:	f04f 0e00 	mov.w	lr, #0
  40c042:	f822 e010 	strh.w	lr, [r2, r0, lsl #1]
  40c046:	f241 6298 	movw	r2, #5784	; 0x1698
  40c04a:	58a0      	ldr	r0, [r4, r2]
  40c04c:	680a      	ldr	r2, [r1, #0]
  40c04e:	f102 0e01 	add.w	lr, r2, #1
  40c052:	f8c1 e000 	str.w	lr, [r1]
  40c056:	5483      	strb	r3, [r0, r2]
  40c058:	eb04 0383 	add.w	r3, r4, r3, lsl #2

0040c05c <.LVL478>:
  40c05c:	f8b3 2094 	ldrh.w	r2, [r3, #148]	; 0x94

0040c060 <.LVL479>:
  40c060:	3201      	adds	r2, #1
  40c062:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

0040c066 <.LVL480>:
  40c066:	f241 639c 	movw	r3, #5788	; 0x169c
  40c06a:	58e3      	ldr	r3, [r4, r3]
  40c06c:	3b01      	subs	r3, #1
  40c06e:	680a      	ldr	r2, [r1, #0]
  40c070:	4293      	cmp	r3, r2
  40c072:	bf14      	ite	ne
  40c074:	2300      	movne	r3, #0
  40c076:	2301      	moveq	r3, #1

0040c078 <.LBE61>:
            s->lookahead--;
  40c078:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40c07a:	3a01      	subs	r2, #1
  40c07c:	6762      	str	r2, [r4, #116]	; 0x74
            s->strstart++;
  40c07e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  40c080:	3201      	adds	r2, #1
  40c082:	66e2      	str	r2, [r4, #108]	; 0x6c
  40c084:	e7ba      	b.n	40bffc <.LVL472>

0040c086 <.LVL482>:
                } while (prev == *++scan && prev == *++scan &&
  40c086:	3002      	adds	r0, #2

0040c088 <.LVL483>:
  40c088:	e779      	b.n	40bf7e <.LVL461>

0040c08a <.LVL484>:
  40c08a:	3003      	adds	r0, #3

0040c08c <.LVL485>:
  40c08c:	e777      	b.n	40bf7e <.LVL461>

0040c08e <.LVL486>:
                         prev == *++scan && prev == *++scan &&
  40c08e:	3004      	adds	r0, #4

0040c090 <.LVL487>:
  40c090:	e775      	b.n	40bf7e <.LVL461>

0040c092 <.LVL488>:
  40c092:	3005      	adds	r0, #5

0040c094 <.LVL489>:
  40c094:	e773      	b.n	40bf7e <.LVL461>

0040c096 <.LVL490>:
                         prev == *++scan && prev == *++scan &&
  40c096:	3006      	adds	r0, #6

0040c098 <.LVL491>:
  40c098:	e771      	b.n	40bf7e <.LVL461>

0040c09a <.LVL492>:
  40c09a:	3007      	adds	r0, #7

0040c09c <.LVL493>:
  40c09c:	e76f      	b.n	40bf7e <.LVL461>

0040c09e <.LVL494>:
        if (s->match_length >= MIN_MATCH) {
  40c09e:	2b02      	cmp	r3, #2
  40c0a0:	f63f af76 	bhi.w	40bf90 <.LBB60>
  40c0a4:	e7c4      	b.n	40c030 <.LBB61>

0040c0a6 <.LVL495>:
        if (bflush) FLUSH_BLOCK(s, 0);
  40c0a6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  40c0a8:	2a00      	cmp	r2, #0
  40c0aa:	db1a      	blt.n	40c0e2 <.LBB67>
  40c0ac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  40c0ae:	4411      	add	r1, r2
  40c0b0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  40c0b2:	2300      	movs	r3, #0

0040c0b4 <.LVL496>:
  40c0b4:	1a82      	subs	r2, r0, r2
  40c0b6:	4620      	mov	r0, r4
  40c0b8:	f003 f8e6 	bl	40f288 <_tr_flush_block>

0040c0bc <.LVL497>:
  40c0bc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40c0be:	65e3      	str	r3, [r4, #92]	; 0x5c
  40c0c0:	6820      	ldr	r0, [r4, #0]
  40c0c2:	f011 f805 	bl	41d0d0 <.LFE41>

0040c0c6 <.LVL498>:
  40c0c6:	6823      	ldr	r3, [r4, #0]
  40c0c8:	691b      	ldr	r3, [r3, #16]
  40c0ca:	2b00      	cmp	r3, #0
  40c0cc:	d198      	bne.n	40c000 <.LVL473>

0040c0ce <.LBE66>:
            if (strm->avail_out == 0) {
  40c0ce:	692b      	ldr	r3, [r5, #16]
  40c0d0:	2b00      	cmp	r3, #0
  40c0d2:	f040 80bc 	bne.w	40c24e <.LBB71>
                s->last_flush = -1; /* avoid BUF_ERROR next call, see above */
  40c0d6:	f04f 33ff 	mov.w	r3, #4294967295
  40c0da:	62a3      	str	r3, [r4, #40]	; 0x28
            return Z_OK;
  40c0dc:	2000      	movs	r0, #0
  40c0de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040c0e2 <.LBB67>:
        if (bflush) FLUSH_BLOCK(s, 0);
  40c0e2:	2100      	movs	r1, #0
  40c0e4:	e7e4      	b.n	40c0b0 <.LVL495+0xa>

0040c0e6 <.LVL500>:
        FLUSH_BLOCK(s, 1);
  40c0e6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  40c0e8:	2a00      	cmp	r2, #0
  40c0ea:	db16      	blt.n	40c11a <.LBB68>
  40c0ec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  40c0ee:	4411      	add	r1, r2
  40c0f0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  40c0f2:	2301      	movs	r3, #1
  40c0f4:	1a82      	subs	r2, r0, r2
  40c0f6:	4620      	mov	r0, r4
  40c0f8:	f003 f8c6 	bl	40f288 <_tr_flush_block>

0040c0fc <.LVL501>:
  40c0fc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40c0fe:	65e3      	str	r3, [r4, #92]	; 0x5c
  40c100:	6820      	ldr	r0, [r4, #0]
  40c102:	f010 ffe5 	bl	41d0d0 <.LFE41>

0040c106 <.LVL502>:
  40c106:	6823      	ldr	r3, [r4, #0]
  40c108:	691b      	ldr	r3, [r3, #16]
        return finish_done;
  40c10a:	2b00      	cmp	r3, #0
  40c10c:	bf0c      	ite	eq
  40c10e:	2002      	moveq	r0, #2
  40c110:	2003      	movne	r0, #3

0040c112 <.LBE67>:
            s->status = FINISH_STATE;
  40c112:	f240 239a 	movw	r3, #666	; 0x29a
  40c116:	6063      	str	r3, [r4, #4]
  40c118:	e0f5      	b.n	40c306 <.LVL533+0xa>

0040c11a <.LBB68>:
        FLUSH_BLOCK(s, 1);
  40c11a:	2100      	movs	r1, #0
  40c11c:	e7e8      	b.n	40c0f0 <.LVL500+0xa>
        FLUSH_BLOCK(s, 0);
  40c11e:	2100      	movs	r1, #0
  40c120:	e6d4      	b.n	40becc <.LVL445+0x38>

0040c122 <.LBE68>:
            if (flush == Z_PARTIAL_FLUSH) {
  40c122:	2f01      	cmp	r7, #1
  40c124:	d016      	beq.n	40c154 <.LVL506+0x14>
            } else if (flush != Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */
  40c126:	2f05      	cmp	r7, #5
  40c128:	d017      	beq.n	40c15a <.LVL508>
                _tr_stored_block(s, (char*)0, 0L, 0);
  40c12a:	2300      	movs	r3, #0
  40c12c:	461a      	mov	r2, r3
  40c12e:	4619      	mov	r1, r3
  40c130:	4620      	mov	r0, r4
  40c132:	f00d fa69 	bl	419608 <_tr_stored_block>

0040c136 <.LVL505>:
                if (flush == Z_FULL_FLUSH) {
  40c136:	2f03      	cmp	r7, #3
  40c138:	d018      	beq.n	40c16c <.LBB70>
            flush_pending(strm);
  40c13a:	4628      	mov	r0, r5
  40c13c:	f010 ffc8 	bl	41d0d0 <.LFE41>

0040c140 <.LVL506>:
            if (strm->avail_out == 0) {
  40c140:	692b      	ldr	r3, [r5, #16]
  40c142:	2b00      	cmp	r3, #0
  40c144:	f040 80e6 	bne.w	40c314 <.LBE74>
              s->last_flush = -1; /* avoid BUF_ERROR at next call, see above */
  40c148:	f04f 33ff 	mov.w	r3, #4294967295
  40c14c:	62a3      	str	r3, [r4, #40]	; 0x28
              return Z_OK;
  40c14e:	2000      	movs	r0, #0
  40c150:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                _tr_align(s);
  40c154:	4620      	mov	r0, r4
  40c156:	f00d fe31 	bl	419dbc <.LFE150>

0040c15a <.LVL508>:
            flush_pending(strm);
  40c15a:	4628      	mov	r0, r5
  40c15c:	f010 ffb8 	bl	41d0d0 <.LFE41>

0040c160 <.LVL509>:
            if (strm->avail_out == 0) {
  40c160:	692b      	ldr	r3, [r5, #16]
  40c162:	2b00      	cmp	r3, #0
  40c164:	d0f0      	beq.n	40c148 <.LVL506+0x8>

0040c166 <.LBE69>:
    if (flush != Z_FINISH) return Z_OK;
  40c166:	2000      	movs	r0, #0
  40c168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040c16c <.LBB70>:
                    CLEAR_HASH(s);             /* forget history */
  40c16c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  40c170:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
  40c172:	441a      	add	r2, r3
  40c174:	6c60      	ldr	r0, [r4, #68]	; 0x44
  40c176:	2100      	movs	r1, #0
  40c178:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
  40c17c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
  40c17e:	441a      	add	r2, r3
  40c180:	0052      	lsls	r2, r2, #1
  40c182:	6c60      	ldr	r0, [r4, #68]	; 0x44
  40c184:	f00e fa34 	bl	41a5f0 <.LFE157>

0040c188 <.LVL511>:
                    if (s->lookahead == 0) {
  40c188:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40c18a:	2b00      	cmp	r3, #0
  40c18c:	d1e5      	bne.n	40c15a <.LVL508>
                        s->strstart = 0;
  40c18e:	66e3      	str	r3, [r4, #108]	; 0x6c
                        s->block_start = 0L;
  40c190:	65e3      	str	r3, [r4, #92]	; 0x5c
                        s->insert = 0;
  40c192:	f241 62b4 	movw	r2, #5812	; 0x16b4
  40c196:	50a3      	str	r3, [r4, r2]
  40c198:	e7df      	b.n	40c15a <.LVL508>

0040c19a <.LBE70>:
    if (s->wrap <= 0) return Z_STREAM_END;
  40c19a:	69a3      	ldr	r3, [r4, #24]
  40c19c:	2b00      	cmp	r3, #0
  40c19e:	dd59      	ble.n	40c254 <.LBE71>
    if (s->wrap == 2) {
  40c1a0:	2b02      	cmp	r3, #2
  40c1a2:	d015      	beq.n	40c1d0 <.LVL514+0x16>
        putShortMSB(s, (uInt)(strm->adler >> 16));
  40c1a4:	8e69      	ldrh	r1, [r5, #50]	; 0x32
  40c1a6:	4620      	mov	r0, r4
  40c1a8:	f012 fa7b 	bl	41e6a2 <.LFE188>

0040c1ac <.LVL512>:
        putShortMSB(s, (uInt)(strm->adler & 0xffff));
  40c1ac:	8e29      	ldrh	r1, [r5, #48]	; 0x30
  40c1ae:	4620      	mov	r0, r4
  40c1b0:	f012 fa77 	bl	41e6a2 <.LFE188>

0040c1b4 <.LVL513>:
    flush_pending(strm);
  40c1b4:	4628      	mov	r0, r5
  40c1b6:	f010 ff8b 	bl	41d0d0 <.LFE41>

0040c1ba <.LVL514>:
    if (s->wrap > 0) s->wrap = -s->wrap; /* write the trailer only once! */
  40c1ba:	69a3      	ldr	r3, [r4, #24]
  40c1bc:	2b00      	cmp	r3, #0
  40c1be:	dd01      	ble.n	40c1c4 <.LVL514+0xa>
  40c1c0:	425b      	negs	r3, r3
  40c1c2:	61a3      	str	r3, [r4, #24]
    return s->pending != 0 ? Z_OK : Z_STREAM_END;
  40c1c4:	6960      	ldr	r0, [r4, #20]
  40c1c6:	fab0 f080 	clz	r0, r0
  40c1ca:	0940      	lsrs	r0, r0, #5
  40c1cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        put_byte(s, (Byte)(strm->adler & 0xff));
  40c1d0:	68a2      	ldr	r2, [r4, #8]
  40c1d2:	6963      	ldr	r3, [r4, #20]
  40c1d4:	1c59      	adds	r1, r3, #1
  40c1d6:	6161      	str	r1, [r4, #20]
  40c1d8:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40c1da:	54d1      	strb	r1, [r2, r3]
        put_byte(s, (Byte)((strm->adler >> 8) & 0xff));
  40c1dc:	68a1      	ldr	r1, [r4, #8]
  40c1de:	6962      	ldr	r2, [r4, #20]
  40c1e0:	1c53      	adds	r3, r2, #1
  40c1e2:	6163      	str	r3, [r4, #20]
  40c1e4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40c1e6:	0a1b      	lsrs	r3, r3, #8
  40c1e8:	548b      	strb	r3, [r1, r2]
        put_byte(s, (Byte)((strm->adler >> 16) & 0xff));
  40c1ea:	68a2      	ldr	r2, [r4, #8]
  40c1ec:	6963      	ldr	r3, [r4, #20]
  40c1ee:	1c59      	adds	r1, r3, #1
  40c1f0:	6161      	str	r1, [r4, #20]
  40c1f2:	8e69      	ldrh	r1, [r5, #50]	; 0x32
  40c1f4:	54d1      	strb	r1, [r2, r3]
        put_byte(s, (Byte)((strm->adler >> 24) & 0xff));
  40c1f6:	68a2      	ldr	r2, [r4, #8]
  40c1f8:	6963      	ldr	r3, [r4, #20]
  40c1fa:	1c59      	adds	r1, r3, #1
  40c1fc:	6161      	str	r1, [r4, #20]
  40c1fe:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
  40c202:	54d1      	strb	r1, [r2, r3]
        put_byte(s, (Byte)(strm->total_in & 0xff));
  40c204:	68a2      	ldr	r2, [r4, #8]
  40c206:	6963      	ldr	r3, [r4, #20]
  40c208:	1c59      	adds	r1, r3, #1
  40c20a:	6161      	str	r1, [r4, #20]
  40c20c:	68a9      	ldr	r1, [r5, #8]
  40c20e:	54d1      	strb	r1, [r2, r3]
        put_byte(s, (Byte)((strm->total_in >> 8) & 0xff));
  40c210:	68a1      	ldr	r1, [r4, #8]
  40c212:	6962      	ldr	r2, [r4, #20]
  40c214:	1c53      	adds	r3, r2, #1
  40c216:	6163      	str	r3, [r4, #20]
  40c218:	68ab      	ldr	r3, [r5, #8]
  40c21a:	0a1b      	lsrs	r3, r3, #8
  40c21c:	548b      	strb	r3, [r1, r2]
        put_byte(s, (Byte)((strm->total_in >> 16) & 0xff));
  40c21e:	68a2      	ldr	r2, [r4, #8]
  40c220:	6963      	ldr	r3, [r4, #20]
  40c222:	1c59      	adds	r1, r3, #1
  40c224:	6161      	str	r1, [r4, #20]
  40c226:	8969      	ldrh	r1, [r5, #10]
  40c228:	54d1      	strb	r1, [r2, r3]
        put_byte(s, (Byte)((strm->total_in >> 24) & 0xff));
  40c22a:	68a2      	ldr	r2, [r4, #8]
  40c22c:	6963      	ldr	r3, [r4, #20]
  40c22e:	1c59      	adds	r1, r3, #1
  40c230:	6161      	str	r1, [r4, #20]
  40c232:	7ae9      	ldrb	r1, [r5, #11]
  40c234:	54d1      	strb	r1, [r2, r3]
  40c236:	e7bd      	b.n	40c1b4 <.LVL513>

0040c238 <.LCFI25>:
        return Z_STREAM_ERROR;
  40c238:	f06f 0001 	mvn.w	r0, #1

0040c23c <.LVL517>:
  40c23c:	4770      	bx	lr

0040c23e <.LCFI26>:
  40c23e:	f06f 0001 	mvn.w	r0, #1

0040c242 <.LVL519>:
  40c242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040c246 <.LVL520>:
  40c246:	f06f 0001 	mvn.w	r0, #1

0040c24a <.LVL521>:
  40c24a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040c24e <.LBB71>:
            return Z_OK;
  40c24e:	2000      	movs	r0, #0
  40c250:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040c254 <.LBE71>:
    if (s->wrap <= 0) return Z_STREAM_END;
  40c254:	2001      	movs	r0, #1
  40c256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040c25a <.LBB72>:
            if (s->gzhead->hcrc && s->pending > beg)
  40c25a:	69e3      	ldr	r3, [r4, #28]
  40c25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40c25e:	2b00      	cmp	r3, #0
  40c260:	f47f acfe 	bne.w	40bc60 <.LVL405>

0040c264 <.LVL525>:
                s->gzindex = 0;
  40c264:	2300      	movs	r3, #0
  40c266:	6223      	str	r3, [r4, #32]
                s->status = COMMENT_STATE;
  40c268:	235b      	movs	r3, #91	; 0x5b
  40c26a:	6063      	str	r3, [r4, #4]

0040c26c <.LBE72>:
        if (s->gzhead->comment != Z_NULL) {
  40c26c:	69e3      	ldr	r3, [r4, #28]
  40c26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40c270:	2b00      	cmp	r3, #0
  40c272:	f43f ad38 	beq.w	40bce6 <.LBE49>

0040c276 <.LBB73>:
            uInt beg = s->pending;  /* start of bytes to update crc */
  40c276:	6960      	ldr	r0, [r4, #20]

0040c278 <.LVL527>:
  40c278:	e517      	b.n	40bcaa <.LVL413>

0040c27a <.LVL528>:
            if (s->gzhead->hcrc && s->pending > beg)
  40c27a:	69e3      	ldr	r3, [r4, #28]
  40c27c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40c27e:	2b00      	cmp	r3, #0
  40c280:	f47f ad25 	bne.w	40bcce <.LVL416>

0040c284 <.LVL529>:
                s->status = HCRC_STATE;
  40c284:	2367      	movs	r3, #103	; 0x67
  40c286:	6063      	str	r3, [r4, #4]

0040c288 <.LBE73>:
        if (s->gzhead->hcrc) {
  40c288:	69e3      	ldr	r3, [r4, #28]
  40c28a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40c28c:	2b00      	cmp	r3, #0
  40c28e:	f43f ad37 	beq.w	40bd00 <.LVL420+0xe>
            if (s->pending + 2 > s->pending_buf_size)
  40c292:	6963      	ldr	r3, [r4, #20]
  40c294:	1c99      	adds	r1, r3, #2
  40c296:	68e2      	ldr	r2, [r4, #12]
  40c298:	4291      	cmp	r1, r2
  40c29a:	f63f ad27 	bhi.w	40bcec <.LBE49+0x6>
                put_byte(s, (Byte)(strm->adler & 0xff));
  40c29e:	68a2      	ldr	r2, [r4, #8]
  40c2a0:	1c59      	adds	r1, r3, #1
  40c2a2:	6161      	str	r1, [r4, #20]
  40c2a4:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40c2a6:	54d1      	strb	r1, [r2, r3]
                put_byte(s, (Byte)((strm->adler >> 8) & 0xff));
  40c2a8:	68a1      	ldr	r1, [r4, #8]
  40c2aa:	6962      	ldr	r2, [r4, #20]
  40c2ac:	1c53      	adds	r3, r2, #1
  40c2ae:	6163      	str	r3, [r4, #20]
  40c2b0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40c2b2:	0a1b      	lsrs	r3, r3, #8
  40c2b4:	548b      	strb	r3, [r1, r2]
                strm->adler = crc32(0L, Z_NULL, 0);
  40c2b6:	2200      	movs	r2, #0
  40c2b8:	4611      	mov	r1, r2
  40c2ba:	4610      	mov	r0, r2
  40c2bc:	f007 faba 	bl	413834 <.LFE21>

0040c2c0 <.LVL531>:
  40c2c0:	6328      	str	r0, [r5, #48]	; 0x30
                s->status = BUSY_STATE;
  40c2c2:	2371      	movs	r3, #113	; 0x71
  40c2c4:	6063      	str	r3, [r4, #4]
  40c2c6:	f7ff bb08 	b.w	40b8da <.LVL355+0x20>
    if (s->status == FINISH_STATE && strm->avail_in != 0) {
  40c2ca:	6862      	ldr	r2, [r4, #4]
  40c2cc:	f240 239a 	movw	r3, #666	; 0x29a
  40c2d0:	429a      	cmp	r2, r3
  40c2d2:	f43f ad40 	beq.w	40bd56 <.LVL424+0xe>

0040c2d6 <.LBB74>:
        bstate = s->strategy == Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :
  40c2d6:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
  40c2da:	2b02      	cmp	r3, #2
  40c2dc:	f43f ad42 	beq.w	40bd64 <.LBB51>
  40c2e0:	2b03      	cmp	r3, #3
  40c2e2:	f43f adcc 	beq.w	40be7e <.LBB56>
                        (*(configuration_table[s->level].func))(s, flush));
  40c2e6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
  40c2ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40c2ee:	4a0c      	ldr	r2, [pc, #48]	; (40c320 <.LVL535>)
  40c2f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
        bstate = s->strategy == Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :
  40c2f4:	689b      	ldr	r3, [r3, #8]
  40c2f6:	4639      	mov	r1, r7
  40c2f8:	4620      	mov	r0, r4
  40c2fa:	4798      	blx	r3

0040c2fc <.LVL533>:
        if (bstate == finish_started || bstate == finish_done) {
  40c2fc:	1e83      	subs	r3, r0, #2
  40c2fe:	b2db      	uxtb	r3, r3
  40c300:	2b01      	cmp	r3, #1
  40c302:	f67f af06 	bls.w	40c112 <.LBE67>
        if (bstate == need_more || bstate == finish_started) {
  40c306:	f010 0ffd 	tst.w	r0, #253	; 0xfd
  40c30a:	f43f aee0 	beq.w	40c0ce <.LBE66>
        if (bstate == block_done) {
  40c30e:	2801      	cmp	r0, #1
  40c310:	f43f af07 	beq.w	40c122 <.LBE68>

0040c314 <.LBE74>:
    if (flush != Z_FINISH) return Z_OK;
  40c314:	2f04      	cmp	r7, #4
  40c316:	f43f af40 	beq.w	40c19a <.LBE70>
  40c31a:	2000      	movs	r0, #0
  40c31c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040c320 <.LVL535>:
  40c320:	0041ba5c 	.word	0x0041ba5c

Disassembly of section .rodata.Spbox%70:

0040c324 <Spbox>:
  40c324:	01010400 00000000 00010000 01010404     ................
  40c334:	01010004 00010404 00000004 00010000     ................
  40c344:	00000400 01010400 01010404 00000400     ................
  40c354:	01000404 01010004 01000000 00000004     ................
  40c364:	00000404 01000400 01000400 00010400     ................
  40c374:	00010400 01010000 01010000 01000404     ................
  40c384:	00010004 01000004 01000004 00010004     ................
  40c394:	00000000 00000404 00010404 01000000     ................
  40c3a4:	00010000 01010404 00000004 01010000     ................
  40c3b4:	01010400 01000000 01000000 00000400     ................
  40c3c4:	01010004 00010000 00010400 01000004     ................
  40c3d4:	00000400 00000004 01000404 00010404     ................
  40c3e4:	01010404 00010004 01010000 01000404     ................
  40c3f4:	01000004 00000404 00010404 01010400     ................
  40c404:	00000404 01000400 01000400 00000000     ................
  40c414:	00010004 00010400 00000000 01010004     ................
  40c424:	80108020 80008000 00008000 00108020      ........... ...
  40c434:	00100000 00000020 80100020 80008020     .... ... ... ...
  40c444:	80000020 80108020 80108000 80000000      ... ...........
  40c454:	80008000 00100000 00000020 80100020     ........ ... ...
  40c464:	00108000 00100020 80008020 00000000     .... ... .......
  40c474:	80000000 00008000 00108020 80100000     ........ .......
  40c484:	00100020 80000020 00000000 00108000      ... ...........
  40c494:	00008020 80108000 80100000 00008020      ........... ...
  40c4a4:	00000000 00108020 80100020 00100000     .... ... .......
  40c4b4:	80008020 80100000 80108000 00008000      ...............
  40c4c4:	80100000 80008000 00000020 80108020     ........ ... ...
  40c4d4:	00108020 00000020 00008000 80000000      ... ...........
  40c4e4:	00008020 80108000 00100000 80000020      ........... ...
  40c4f4:	00100020 80008020 80000020 00100020      ... ... ... ...
  40c504:	00108000 00000000 80008000 00008020     ............ ...
  40c514:	80000000 80100020 80108020 00108000     .... ... .......
  40c524:	00000208 08020200 00000000 08020008     ................
  40c534:	08000200 00000000 00020208 08000200     ................
  40c544:	00020008 08000008 08000008 00020000     ................
  40c554:	08020208 00020008 08020000 00000208     ................
  40c564:	08000000 00000008 08020200 00000200     ................
  40c574:	00020200 08020000 08020008 00020208     ................
  40c584:	08000208 00020200 00020000 08000208     ................
  40c594:	00000008 08020208 00000200 08000000     ................
  40c5a4:	08020200 08000000 00020008 00000208     ................
  40c5b4:	00020000 08020200 08000200 00000000     ................
  40c5c4:	00000200 00020008 08020208 08000200     ................
  40c5d4:	08000008 00000200 00000000 08020008     ................
  40c5e4:	08000208 00020000 08000000 08020208     ................
  40c5f4:	00000008 00020208 00020200 08000008     ................
  40c604:	08020000 08000208 00000208 08020000     ................
  40c614:	00020208 00000008 08020008 00020200     ................
  40c624:	00802001 00002081 00002081 00000080     . ... ... ......
  40c634:	00802080 00800081 00800001 00002001     . ........... ..
  40c644:	00000000 00802000 00802000 00802081     ..... ... ... ..
  40c654:	00000081 00000000 00800080 00800001     ................
  40c664:	00000001 00002000 00800000 00802001     ..... ....... ..
  40c674:	00000080 00800000 00002001 00002080     ......... ... ..
  40c684:	00800081 00000001 00002080 00800080     ......... ......
  40c694:	00002000 00802080 00802081 00000081     . ... ... ......
  40c6a4:	00800080 00800001 00802000 00802081     ......... ... ..
  40c6b4:	00000081 00000000 00000000 00802000     ............. ..
  40c6c4:	00002080 00800080 00800081 00000001     . ..............
  40c6d4:	00802001 00002081 00002081 00000080     . ... ... ......
  40c6e4:	00802081 00000081 00000001 00002000     . ........... ..
  40c6f4:	00800001 00002001 00802080 00800081     ..... ... ......
  40c704:	00002001 00002080 00800000 00802001     . ... ....... ..
  40c714:	00000080 00800000 00002000 00802080     ......... ... ..
  40c724:	00000100 02080100 02080000 42000100     ...............B
  40c734:	00080000 00000100 40000000 02080000     ...........@....
  40c744:	40080100 00080000 02000100 40080100     ...@...........@
  40c754:	42000100 42080000 00080100 40000000     ...B...B.......@
  40c764:	02000000 40080000 40080000 00000000     .......@...@....
  40c774:	40000100 42080100 42080100 02000100     ...@...B...B....
  40c784:	42080000 40000100 00000000 42000000     ...B...@.......B
  40c794:	02080100 02000000 42000000 00080100     ...........B....
  40c7a4:	00080000 42000100 00000100 02000000     .......B........
  40c7b4:	40000000 02080000 42000100 40080100     ...@.......B...@
  40c7c4:	02000100 40000000 42080000 02080100     .......@...B....
  40c7d4:	40080100 00000100 02000000 42080000     ...@...........B
  40c7e4:	42080100 00080100 42000000 42080100     ...B.......B...B
  40c7f4:	02080000 00000000 40080000 42000000     ...........@...B
  40c804:	00080100 02000100 40000100 00080000     ...........@....
  40c814:	00000000 40080000 02080100 40000100     .......@.......@
  40c824:	20000010 20400000 00004000 20404010     ... ..@ .@...@@ 
  40c834:	20400000 00000010 20404010 00400000     ..@ .....@@ ..@.
  40c844:	20004000 00404010 00400000 20000010     .@. .@@...@.... 
  40c854:	00400010 20004000 20000000 00004010     ..@..@. ... .@..
  40c864:	00000000 00400010 20004010 00004000     ......@..@. .@..
  40c874:	00404000 20004010 00000010 20400010     .@@..@. ......@ 
  40c884:	20400010 00000000 00404010 20404000     ..@ .....@@..@@ 
  40c894:	00004010 00404000 20404000 20000000     .@...@@..@@ ... 
  40c8a4:	20004000 00000010 20400010 00404000     .@. ......@ .@@.
  40c8b4:	20404010 00400000 00004010 20000010     .@@ ..@..@..... 
  40c8c4:	00400000 20004000 20000000 00004010     ..@..@. ... .@..
  40c8d4:	20000010 20404010 00404000 20400000     ... .@@ .@@...@ 
  40c8e4:	00404010 20404000 00000000 20400010     .@@..@@ ......@ 
  40c8f4:	00000010 00004000 20400000 00404010     .....@....@ .@@.
  40c904:	00004000 00400010 20004010 00000000     .@....@..@. ....
  40c914:	20404000 20000000 00400010 20004010     .@@ ... ..@..@. 
  40c924:	00200000 04200002 04000802 00000000     .. ... .........
  40c934:	00000800 04000802 00200802 04200800     .......... ... .
  40c944:	04200802 00200000 00000000 04000002     .. ... .........
  40c954:	00000002 04000000 04200002 00000802     .......... .....
  40c964:	04000800 00200802 00200002 04000800     ...... ... .....
  40c974:	04000002 04200000 04200800 00200002     ...... ... ... .
  40c984:	04200000 00000800 00000802 04200802     .. ........... .
  40c994:	00200800 00000002 04000000 00200800     .. ........... .
  40c9a4:	04000000 00200800 00200000 04000802     ...... ... .....
  40c9b4:	04000802 04200002 04200002 00000002     ...... ... .....
  40c9c4:	00200002 04000000 04000800 00200000     .. ........... .
  40c9d4:	04200800 00000802 00200802 04200800     .. ....... ... .
  40c9e4:	00000802 04000002 04200802 04200000     .......... ... .
  40c9f4:	00200800 00000000 00000002 04200802     .. ........... .
  40ca04:	00000000 00200802 04200000 00000800     ...... ... .....
  40ca14:	04000002 04000800 00000800 00200002     .............. .
  40ca24:	10001040 00001000 00040000 10041040     @...........@...
  40ca34:	10000000 10001040 00000040 10000000     ....@...@.......
  40ca44:	00040040 10040000 10041040 00041000     @.......@.......
  40ca54:	10041000 00041040 00001000 00000040     ....@.......@...
  40ca64:	10040000 10000040 10001000 00001040     ....@.......@...
  40ca74:	00041000 00040040 10040040 10041000     ....@...@.......
  40ca84:	00001040 00000000 00000000 10040040     @...........@...
  40ca94:	10000040 10001000 00041040 00040000     @.......@.......
  40caa4:	00041040 00040000 10041000 00001000     @...............
  40cab4:	00000040 10040040 00001000 00041040     @...@.......@...
  40cac4:	10001000 00000040 10000040 10040000     ....@...@.......
  40cad4:	10040040 10000000 00040000 10001040     @...........@...
  40cae4:	00000000 10041040 00040040 10000040     ....@...@...@...
  40caf4:	10040000 10001000 10001040 00000000     ........@.......
  40cb04:	10041040 00041000 00041000 00001040     @...........@...
  40cb14:	00001040 00040040 10000000 10041000     @...@...........

Disassembly of section .rodata.lenfix.6567%71:

0040cb24 <lenfix.6567>:
  40cb24:	00000760 00500800 00100800 00730814     `.....P.......s.
  40cb34:	001f0712 00700800 00300800 00c00900     ......p...0.....
  40cb44:	000a0710 00600800 00200800 00a00900     ......`... .....
  40cb54:	00000800 00800800 00400800 00e00900     ..........@.....
  40cb64:	00060710 00580800 00180800 00900900     ......X.........
  40cb74:	003b0713 00780800 00380800 00d00900     ..;...x...8.....
  40cb84:	00110711 00680800 00280800 00b00900     ......h...(.....
  40cb94:	00080800 00880800 00480800 00f00900     ..........H.....
  40cba4:	00040710 00540800 00140800 00e30815     ......T.........
  40cbb4:	002b0713 00740800 00340800 00c80900     ..+...t...4.....
  40cbc4:	000d0711 00640800 00240800 00a80900     ......d...$.....
  40cbd4:	00040800 00840800 00440800 00e80900     ..........D.....
  40cbe4:	00080710 005c0800 001c0800 00980900     ......\.........
  40cbf4:	00530714 007c0800 003c0800 00d80900     ..S...|...<.....
  40cc04:	00170712 006c0800 002c0800 00b80900     ......l...,.....
  40cc14:	000c0800 008c0800 004c0800 00f80900     ..........L.....
  40cc24:	00030710 00520800 00120800 00a30815     ......R.........
  40cc34:	00230713 00720800 00320800 00c40900     ..#...r...2.....
  40cc44:	000b0711 00620800 00220800 00a40900     ......b...".....
  40cc54:	00020800 00820800 00420800 00e40900     ..........B.....
  40cc64:	00070710 005a0800 001a0800 00940900     ......Z.........
  40cc74:	00430714 007a0800 003a0800 00d40900     ..C...z...:.....
  40cc84:	00130712 006a0800 002a0800 00b40900     ......j...*.....
  40cc94:	000a0800 008a0800 004a0800 00f40900     ..........J.....
  40cca4:	00050710 00560800 00160800 00000840     ......V.....@...
  40ccb4:	00330713 00760800 00360800 00cc0900     ..3...v...6.....
  40ccc4:	000f0711 00660800 00260800 00ac0900     ......f...&.....
  40ccd4:	00060800 00860800 00460800 00ec0900     ..........F.....
  40cce4:	00090710 005e0800 001e0800 009c0900     ......^.........
  40ccf4:	00630714 007e0800 003e0800 00dc0900     ..c...~...>.....
  40cd04:	001b0712 006e0800 002e0800 00bc0900     ......n.........
  40cd14:	000e0800 008e0800 004e0800 00fc0900     ..........N.....
  40cd24:	00000760 00510800 00110800 00830815     `.....Q.........
  40cd34:	001f0712 00710800 00310800 00c20900     ......q...1.....
  40cd44:	000a0710 00610800 00210800 00a20900     ......a...!.....
  40cd54:	00010800 00810800 00410800 00e20900     ..........A.....
  40cd64:	00060710 00590800 00190800 00920900     ......Y.........
  40cd74:	003b0713 00790800 00390800 00d20900     ..;...y...9.....
  40cd84:	00110711 00690800 00290800 00b20900     ......i...).....
  40cd94:	00090800 00890800 00490800 00f20900     ..........I.....
  40cda4:	00040710 00550800 00150800 01020810     ......U.........
  40cdb4:	002b0713 00750800 00350800 00ca0900     ..+...u...5.....
  40cdc4:	000d0711 00650800 00250800 00aa0900     ......e...%.....
  40cdd4:	00050800 00850800 00450800 00ea0900     ..........E.....
  40cde4:	00080710 005d0800 001d0800 009a0900     ......].........
  40cdf4:	00530714 007d0800 003d0800 00da0900     ..S...}...=.....
  40ce04:	00170712 006d0800 002d0800 00ba0900     ......m...-.....
  40ce14:	000d0800 008d0800 004d0800 00fa0900     ..........M.....
  40ce24:	00030710 00530800 00130800 00c30815     ......S.........
  40ce34:	00230713 00730800 00330800 00c60900     ..#...s...3.....
  40ce44:	000b0711 00630800 00230800 00a60900     ......c...#.....
  40ce54:	00030800 00830800 00430800 00e60900     ..........C.....
  40ce64:	00070710 005b0800 001b0800 00960900     ......[.........
  40ce74:	00430714 007b0800 003b0800 00d60900     ..C...{...;.....
  40ce84:	00130712 006b0800 002b0800 00b60900     ......k...+.....
  40ce94:	000b0800 008b0800 004b0800 00f60900     ..........K.....
  40cea4:	00050710 00570800 00170800 00000840     ......W.....@...
  40ceb4:	00330713 00770800 00370800 00ce0900     ..3...w...7.....
  40cec4:	000f0711 00670800 00270800 00ae0900     ......g...'.....
  40ced4:	00070800 00870800 00470800 00ee0900     ..........G.....
  40cee4:	00090710 005f0800 001f0800 009e0900     ......_.........
  40cef4:	00630714 007f0800 003f0800 00de0900     ..c.......?.....
  40cf04:	001b0712 006f0800 002f0800 00be0900     ......o.../.....
  40cf14:	000f0800 008f0800 004f0800 00fe0900     ..........O.....
  40cf24:	00000760 00500800 00100800 00730814     `.....P.......s.
  40cf34:	001f0712 00700800 00300800 00c10900     ......p...0.....
  40cf44:	000a0710 00600800 00200800 00a10900     ......`... .....
  40cf54:	00000800 00800800 00400800 00e10900     ..........@.....
  40cf64:	00060710 00580800 00180800 00910900     ......X.........
  40cf74:	003b0713 00780800 00380800 00d10900     ..;...x...8.....
  40cf84:	00110711 00680800 00280800 00b10900     ......h...(.....
  40cf94:	00080800 00880800 00480800 00f10900     ..........H.....
  40cfa4:	00040710 00540800 00140800 00e30815     ......T.........
  40cfb4:	002b0713 00740800 00340800 00c90900     ..+...t...4.....
  40cfc4:	000d0711 00640800 00240800 00a90900     ......d...$.....
  40cfd4:	00040800 00840800 00440800 00e90900     ..........D.....
  40cfe4:	00080710 005c0800 001c0800 00990900     ......\.........
  40cff4:	00530714 007c0800 003c0800 00d90900     ..S...|...<.....
  40d004:	00170712 006c0800 002c0800 00b90900     ......l...,.....
  40d014:	000c0800 008c0800 004c0800 00f90900     ..........L.....
  40d024:	00030710 00520800 00120800 00a30815     ......R.........
  40d034:	00230713 00720800 00320800 00c50900     ..#...r...2.....
  40d044:	000b0711 00620800 00220800 00a50900     ......b...".....
  40d054:	00020800 00820800 00420800 00e50900     ..........B.....
  40d064:	00070710 005a0800 001a0800 00950900     ......Z.........
  40d074:	00430714 007a0800 003a0800 00d50900     ..C...z...:.....
  40d084:	00130712 006a0800 002a0800 00b50900     ......j...*.....
  40d094:	000a0800 008a0800 004a0800 00f50900     ..........J.....
  40d0a4:	00050710 00560800 00160800 00000840     ......V.....@...
  40d0b4:	00330713 00760800 00360800 00cd0900     ..3...v...6.....
  40d0c4:	000f0711 00660800 00260800 00ad0900     ......f...&.....
  40d0d4:	00060800 00860800 00460800 00ed0900     ..........F.....
  40d0e4:	00090710 005e0800 001e0800 009d0900     ......^.........
  40d0f4:	00630714 007e0800 003e0800 00dd0900     ..c...~...>.....
  40d104:	001b0712 006e0800 002e0800 00bd0900     ......n.........
  40d114:	000e0800 008e0800 004e0800 00fd0900     ..........N.....
  40d124:	00000760 00510800 00110800 00830815     `.....Q.........
  40d134:	001f0712 00710800 00310800 00c30900     ......q...1.....
  40d144:	000a0710 00610800 00210800 00a30900     ......a...!.....
  40d154:	00010800 00810800 00410800 00e30900     ..........A.....
  40d164:	00060710 00590800 00190800 00930900     ......Y.........
  40d174:	003b0713 00790800 00390800 00d30900     ..;...y...9.....
  40d184:	00110711 00690800 00290800 00b30900     ......i...).....
  40d194:	00090800 00890800 00490800 00f30900     ..........I.....
  40d1a4:	00040710 00550800 00150800 01020810     ......U.........
  40d1b4:	002b0713 00750800 00350800 00cb0900     ..+...u...5.....
  40d1c4:	000d0711 00650800 00250800 00ab0900     ......e...%.....
  40d1d4:	00050800 00850800 00450800 00eb0900     ..........E.....
  40d1e4:	00080710 005d0800 001d0800 009b0900     ......].........
  40d1f4:	00530714 007d0800 003d0800 00db0900     ..S...}...=.....
  40d204:	00170712 006d0800 002d0800 00bb0900     ......m...-.....
  40d214:	000d0800 008d0800 004d0800 00fb0900     ..........M.....
  40d224:	00030710 00530800 00130800 00c30815     ......S.........
  40d234:	00230713 00730800 00330800 00c70900     ..#...s...3.....
  40d244:	000b0711 00630800 00230800 00a70900     ......c...#.....
  40d254:	00030800 00830800 00430800 00e70900     ..........C.....
  40d264:	00070710 005b0800 001b0800 00970900     ......[.........
  40d274:	00430714 007b0800 003b0800 00d70900     ..C...{...;.....
  40d284:	00130712 006b0800 002b0800 00b70900     ......k...+.....
  40d294:	000b0800 008b0800 004b0800 00f70900     ..........K.....
  40d2a4:	00050710 00570800 00170800 00000840     ......W.....@...
  40d2b4:	00330713 00770800 00370800 00cf0900     ..3...w...7.....
  40d2c4:	000f0711 00670800 00270800 00af0900     ......g...'.....
  40d2d4:	00070800 00870800 00470800 00ef0900     ..........G.....
  40d2e4:	00090710 005f0800 001f0800 009f0900     ......_.........
  40d2f4:	00630714 007f0800 003f0800 00df0900     ..c.......?.....
  40d304:	001b0712 006f0800 002f0800 00bf0900     ......o.../.....
  40d314:	000f0800 008f0800 004f0800 00ff0900     ..........O.....

Disassembly of section .text.Transform%72:

0040d324 <Transform>:

    #define MD5STEP(f, w, x, y, z, data, s) \
        w = rotlFixed(w + f(x, y, z) + data, s) + x

    static int Transform(Md5* md5)
    {
  40d324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0040d328 <.LCFI0>:
  40d328:	b083      	sub	sp, #12

0040d32a <.LCFI1>:
        /* Copy context->state[] to working vars  */
        word32 a = md5->digest[0];
        word32 b = md5->digest[1];
  40d32a:	6d05      	ldr	r5, [r0, #80]	; 0x50

0040d32c <.LVL2>:
        word32 c = md5->digest[2];
  40d32c:	6d44      	ldr	r4, [r0, #84]	; 0x54
  40d32e:	4627      	mov	r7, r4

0040d330 <.LVL3>:
        word32 d = md5->digest[3];

        MD5STEP(F1, a, b, c, d, md5->buffer[0]  + 0xd76aa478,  7);
  40d330:	6d83      	ldr	r3, [r0, #88]	; 0x58
  40d332:	ea84 0903 	eor.w	r9, r4, r3
  40d336:	ea09 0905 	and.w	r9, r9, r5
  40d33a:	ea89 0903 	eor.w	r9, r9, r3
  40d33e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40d340:	68c2      	ldr	r2, [r0, #12]
  40d342:	189a      	adds	r2, r3, r2
  40d344:	4bdf      	ldr	r3, [pc, #892]	; (40d6c4 <.LVL188+0x10>)
  40d346:	4413      	add	r3, r2
  40d348:	4499      	add	r9, r3
  40d34a:	eb05 6979 	add.w	r9, r5, r9, ror #25

0040d34e <.LVL7>:
        MD5STEP(F1, d, a, b, c, md5->buffer[1]  + 0xe8c7b756, 12);
  40d34e:	ea85 0c04 	eor.w	ip, r5, r4
  40d352:	ea0c 0c09 	and.w	ip, ip, r9
  40d356:	ea8c 0c04 	eor.w	ip, ip, r4
  40d35a:	6d83      	ldr	r3, [r0, #88]	; 0x58
  40d35c:	6902      	ldr	r2, [r0, #16]
  40d35e:	4413      	add	r3, r2
  40d360:	4cd9      	ldr	r4, [pc, #868]	; (40d6c8 <.LVL188+0x14>)

0040d362 <.LVL10>:
  40d362:	441c      	add	r4, r3
  40d364:	44a4      	add	ip, r4
  40d366:	eb09 5c3c 	add.w	ip, r9, ip, ror #20

0040d36a <.LVL12>:
        MD5STEP(F1, c, d, a, b, md5->buffer[2]  + 0x242070db, 17);
  40d36a:	ea85 0609 	eor.w	r6, r5, r9
  40d36e:	ea06 060c 	and.w	r6, r6, ip
  40d372:	406e      	eors	r6, r5
  40d374:	6943      	ldr	r3, [r0, #20]
  40d376:	9701      	str	r7, [sp, #4]
  40d378:	443b      	add	r3, r7
  40d37a:	4ad4      	ldr	r2, [pc, #848]	; (40d6cc <.LVL188+0x18>)
  40d37c:	441a      	add	r2, r3
  40d37e:	4416      	add	r6, r2
  40d380:	eb0c 36f6 	add.w	r6, ip, r6, ror #15

0040d384 <.LVL16>:
        MD5STEP(F1, b, c, d, a, md5->buffer[3]  + 0xc1bdceee, 22);
  40d384:	ea89 010c 	eor.w	r1, r9, ip
  40d388:	4031      	ands	r1, r6
  40d38a:	ea81 0109 	eor.w	r1, r1, r9
  40d38e:	6983      	ldr	r3, [r0, #24]
  40d390:	18ea      	adds	r2, r5, r3
  40d392:	4bcf      	ldr	r3, [pc, #828]	; (40d6d0 <.LVL188+0x1c>)
  40d394:	4413      	add	r3, r2
  40d396:	4419      	add	r1, r3
  40d398:	eb06 21b1 	add.w	r1, r6, r1, ror #10

0040d39c <.LVL20>:
        MD5STEP(F1, a, b, c, d, md5->buffer[4]  + 0xf57c0faf,  7);
  40d39c:	ea8c 0306 	eor.w	r3, ip, r6
  40d3a0:	400b      	ands	r3, r1
  40d3a2:	ea83 030c 	eor.w	r3, r3, ip
  40d3a6:	4acb      	ldr	r2, [pc, #812]	; (40d6d4 <.LVL188+0x20>)
  40d3a8:	69c4      	ldr	r4, [r0, #28]
  40d3aa:	4422      	add	r2, r4
  40d3ac:	4491      	add	r9, r2

0040d3ae <.LVL23>:
  40d3ae:	444b      	add	r3, r9
  40d3b0:	eb01 6373 	add.w	r3, r1, r3, ror #25

0040d3b4 <.LVL25>:
        MD5STEP(F1, d, a, b, c, md5->buffer[5]  + 0x4787c62a, 12);
  40d3b4:	ea86 0401 	eor.w	r4, r6, r1
  40d3b8:	401c      	ands	r4, r3
  40d3ba:	4074      	eors	r4, r6
  40d3bc:	4ac6      	ldr	r2, [pc, #792]	; (40d6d8 <.LVL188+0x24>)
  40d3be:	6a07      	ldr	r7, [r0, #32]
  40d3c0:	443a      	add	r2, r7
  40d3c2:	4494      	add	ip, r2

0040d3c4 <.LVL28>:
  40d3c4:	4464      	add	r4, ip
  40d3c6:	eb03 5434 	add.w	r4, r3, r4, ror #20

0040d3ca <.LVL30>:
        MD5STEP(F1, c, d, a, b, md5->buffer[6]  + 0xa8304613, 17);
  40d3ca:	ea81 0203 	eor.w	r2, r1, r3
  40d3ce:	4022      	ands	r2, r4
  40d3d0:	404a      	eors	r2, r1
  40d3d2:	f8df e36c 	ldr.w	lr, [pc, #876]	; 40d740 <.LVL188+0x8c>
  40d3d6:	6a47      	ldr	r7, [r0, #36]	; 0x24
  40d3d8:	44be      	add	lr, r7
  40d3da:	4476      	add	r6, lr

0040d3dc <.LVL33>:
  40d3dc:	4432      	add	r2, r6
  40d3de:	eb04 32f2 	add.w	r2, r4, r2, ror #15

0040d3e2 <.LVL35>:
        MD5STEP(F1, b, c, d, a, md5->buffer[7]  + 0xfd469501, 22);
  40d3e2:	f8d0 a028 	ldr.w	sl, [r0, #40]	; 0x28
  40d3e6:	ea83 0804 	eor.w	r8, r3, r4
  40d3ea:	ea08 0802 	and.w	r8, r8, r2
  40d3ee:	ea88 0803 	eor.w	r8, r8, r3
  40d3f2:	4eba      	ldr	r6, [pc, #744]	; (40d6dc <.LVL188+0x28>)
  40d3f4:	4456      	add	r6, sl
  40d3f6:	4431      	add	r1, r6

0040d3f8 <.LVL39>:
  40d3f8:	4488      	add	r8, r1
  40d3fa:	eb02 28b8 	add.w	r8, r2, r8, ror #10

0040d3fe <.LVL41>:
        MD5STEP(F1, a, b, c, d, md5->buffer[8]  + 0x698098d8,  7);
  40d3fe:	ea84 0e02 	eor.w	lr, r4, r2
  40d402:	ea0e 0e08 	and.w	lr, lr, r8
  40d406:	ea8e 0e04 	eor.w	lr, lr, r4
  40d40a:	49b5      	ldr	r1, [pc, #724]	; (40d6e0 <.LVL188+0x2c>)
  40d40c:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  40d40e:	4431      	add	r1, r6
  40d410:	440b      	add	r3, r1

0040d412 <.LVL44>:
  40d412:	449e      	add	lr, r3
  40d414:	eb08 6e7e 	add.w	lr, r8, lr, ror #25

0040d418 <.LVL46>:
        MD5STEP(F1, d, a, b, c, md5->buffer[9]  + 0x8b44f7af, 12);
  40d418:	ea82 0908 	eor.w	r9, r2, r8
  40d41c:	ea09 090e 	and.w	r9, r9, lr
  40d420:	ea89 0902 	eor.w	r9, r9, r2
  40d424:	4baf      	ldr	r3, [pc, #700]	; (40d6e4 <.LVL188+0x30>)
  40d426:	6b01      	ldr	r1, [r0, #48]	; 0x30
  40d428:	440b      	add	r3, r1
  40d42a:	441c      	add	r4, r3

0040d42c <.LVL49>:
  40d42c:	44a1      	add	r9, r4
  40d42e:	eb0e 5939 	add.w	r9, lr, r9, ror #20

0040d432 <.LVL51>:
        MD5STEP(F1, c, d, a, b, md5->buffer[10] + 0xffff5bb1, 17);
  40d432:	ea88 0c0e 	eor.w	ip, r8, lr
  40d436:	ea0c 0c09 	and.w	ip, ip, r9
  40d43a:	ea8c 0c08 	eor.w	ip, ip, r8
  40d43e:	4baa      	ldr	r3, [pc, #680]	; (40d6e8 <.LVL188+0x34>)
  40d440:	6b41      	ldr	r1, [r0, #52]	; 0x34
  40d442:	440b      	add	r3, r1
  40d444:	441a      	add	r2, r3

0040d446 <.LVL54>:
  40d446:	4494      	add	ip, r2
  40d448:	eb09 3cfc 	add.w	ip, r9, ip, ror #15

0040d44c <.LVL56>:
        MD5STEP(F1, b, c, d, a, md5->buffer[11] + 0x895cd7be, 22);
  40d44c:	ea8e 0609 	eor.w	r6, lr, r9
  40d450:	ea06 060c 	and.w	r6, r6, ip
  40d454:	ea86 060e 	eor.w	r6, r6, lr
  40d458:	4ba4      	ldr	r3, [pc, #656]	; (40d6ec <.LVL188+0x38>)
  40d45a:	6b82      	ldr	r2, [r0, #56]	; 0x38
  40d45c:	4413      	add	r3, r2
  40d45e:	4498      	add	r8, r3

0040d460 <.LVL59>:
  40d460:	4446      	add	r6, r8
  40d462:	eb0c 26b6 	add.w	r6, ip, r6, ror #10

0040d466 <.LVL61>:
        MD5STEP(F1, a, b, c, d, md5->buffer[12] + 0x6b901122,  7);
  40d466:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
  40d46a:	ea89 010c 	eor.w	r1, r9, ip
  40d46e:	4031      	ands	r1, r6
  40d470:	ea81 0109 	eor.w	r1, r1, r9
  40d474:	4b9e      	ldr	r3, [pc, #632]	; (40d6f0 <.LVL188+0x3c>)
  40d476:	4443      	add	r3, r8
  40d478:	449e      	add	lr, r3

0040d47a <.LVL65>:
  40d47a:	4471      	add	r1, lr
  40d47c:	eb06 6171 	add.w	r1, r6, r1, ror #25

0040d480 <.LVL67>:
        MD5STEP(F1, d, a, b, c, md5->buffer[13] + 0xfd987193, 12);
  40d480:	ea8c 0306 	eor.w	r3, ip, r6
  40d484:	400b      	ands	r3, r1
  40d486:	ea83 030c 	eor.w	r3, r3, ip
  40d48a:	4a9a      	ldr	r2, [pc, #616]	; (40d6f4 <.LVL188+0x40>)
  40d48c:	6c04      	ldr	r4, [r0, #64]	; 0x40
  40d48e:	4422      	add	r2, r4
  40d490:	4491      	add	r9, r2

0040d492 <.LVL70>:
  40d492:	444b      	add	r3, r9
  40d494:	eb01 5333 	add.w	r3, r1, r3, ror #20

0040d498 <.LVL72>:
        MD5STEP(F1, c, d, a, b, md5->buffer[14] + 0xa679438e, 17);
  40d498:	f8d0 9044 	ldr.w	r9, [r0, #68]	; 0x44
  40d49c:	ea86 0401 	eor.w	r4, r6, r1
  40d4a0:	401c      	ands	r4, r3
  40d4a2:	4074      	eors	r4, r6
  40d4a4:	4a94      	ldr	r2, [pc, #592]	; (40d6f8 <.LVL188+0x44>)
  40d4a6:	444a      	add	r2, r9
  40d4a8:	4494      	add	ip, r2

0040d4aa <.LVL76>:
  40d4aa:	4464      	add	r4, ip
  40d4ac:	eb03 34f4 	add.w	r4, r3, r4, ror #15

0040d4b0 <.LVL78>:
        MD5STEP(F1, b, c, d, a, md5->buffer[15] + 0x49b40821, 22);
  40d4b0:	f8d0 c048 	ldr.w	ip, [r0, #72]	; 0x48
  40d4b4:	ea81 0203 	eor.w	r2, r1, r3
  40d4b8:	4022      	ands	r2, r4
  40d4ba:	404a      	eors	r2, r1
  40d4bc:	f8df e284 	ldr.w	lr, [pc, #644]	; 40d744 <.LVL188+0x90>
  40d4c0:	44e6      	add	lr, ip
  40d4c2:	4476      	add	r6, lr

0040d4c4 <.LVL82>:
  40d4c4:	4432      	add	r2, r6
  40d4c6:	eb04 22b2 	add.w	r2, r4, r2, ror #10

0040d4ca <.LVL84>:

        MD5STEP(F2, a, b, c, d, md5->buffer[1]  + 0xf61e2562,  5);
  40d4ca:	ea84 0b02 	eor.w	fp, r4, r2
  40d4ce:	ea0b 0b03 	and.w	fp, fp, r3
  40d4d2:	ea8b 0b04 	eor.w	fp, fp, r4
  40d4d6:	4e89      	ldr	r6, [pc, #548]	; (40d6fc <.LVL188+0x48>)
  40d4d8:	6907      	ldr	r7, [r0, #16]
  40d4da:	443e      	add	r6, r7
  40d4dc:	4431      	add	r1, r6

0040d4de <.LVL87>:
  40d4de:	448b      	add	fp, r1
  40d4e0:	eb02 6bfb 	add.w	fp, r2, fp, ror #27

0040d4e4 <.LVL89>:
        MD5STEP(F2, d, a, b, c, md5->buffer[6]  + 0xc040b340,  9);
  40d4e4:	ea82 0e0b 	eor.w	lr, r2, fp
  40d4e8:	ea0e 0e04 	and.w	lr, lr, r4
  40d4ec:	ea8e 0e02 	eor.w	lr, lr, r2
  40d4f0:	4983      	ldr	r1, [pc, #524]	; (40d700 <.LVL188+0x4c>)
  40d4f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
  40d4f4:	4431      	add	r1, r6
  40d4f6:	440b      	add	r3, r1

0040d4f8 <.LVL92>:
  40d4f8:	449e      	add	lr, r3
  40d4fa:	eb0b 5efe 	add.w	lr, fp, lr, ror #23

0040d4fe <.LVL94>:
        MD5STEP(F2, c, d, a, b, md5->buffer[11] + 0x265e5a51, 14);
  40d4fe:	ea8b 030e 	eor.w	r3, fp, lr
  40d502:	4013      	ands	r3, r2
  40d504:	ea83 030b 	eor.w	r3, r3, fp
  40d508:	497e      	ldr	r1, [pc, #504]	; (40d704 <.LVL188+0x50>)
  40d50a:	6b86      	ldr	r6, [r0, #56]	; 0x38
  40d50c:	4431      	add	r1, r6
  40d50e:	440c      	add	r4, r1

0040d510 <.LVL97>:
  40d510:	4423      	add	r3, r4
  40d512:	eb0e 43b3 	add.w	r3, lr, r3, ror #18

0040d516 <.LVL99>:
        MD5STEP(F2, b, c, d, a, md5->buffer[0]  + 0xe9b6c7aa, 20);
  40d516:	ea8e 0603 	eor.w	r6, lr, r3
  40d51a:	ea06 060b 	and.w	r6, r6, fp
  40d51e:	ea86 060e 	eor.w	r6, r6, lr
  40d522:	4979      	ldr	r1, [pc, #484]	; (40d708 <.LVL188+0x54>)
  40d524:	68c4      	ldr	r4, [r0, #12]
  40d526:	4421      	add	r1, r4
  40d528:	440a      	add	r2, r1

0040d52a <.LVL102>:
  40d52a:	4416      	add	r6, r2
  40d52c:	eb03 3636 	add.w	r6, r3, r6, ror #12

0040d530 <.LVL104>:
        MD5STEP(F2, a, b, c, d, md5->buffer[5]  + 0xd62f105d,  5);
  40d530:	ea83 0206 	eor.w	r2, r3, r6
  40d534:	ea02 020e 	and.w	r2, r2, lr
  40d538:	405a      	eors	r2, r3
  40d53a:	4974      	ldr	r1, [pc, #464]	; (40d70c <.LVL188+0x58>)
  40d53c:	6a04      	ldr	r4, [r0, #32]
  40d53e:	4421      	add	r1, r4
  40d540:	448b      	add	fp, r1

0040d542 <.LVL107>:
  40d542:	445a      	add	r2, fp
  40d544:	eb06 62f2 	add.w	r2, r6, r2, ror #27

0040d548 <.LVL109>:
        MD5STEP(F2, d, a, b, c, md5->buffer[10] + 0x02441453,  9);
  40d548:	ea86 0102 	eor.w	r1, r6, r2
  40d54c:	4019      	ands	r1, r3
  40d54e:	4071      	eors	r1, r6
  40d550:	4c6f      	ldr	r4, [pc, #444]	; (40d710 <.LVL188+0x5c>)
  40d552:	6b47      	ldr	r7, [r0, #52]	; 0x34
  40d554:	443c      	add	r4, r7
  40d556:	44a6      	add	lr, r4

0040d558 <.LVL112>:
  40d558:	4471      	add	r1, lr
  40d55a:	eb02 51f1 	add.w	r1, r2, r1, ror #23

0040d55e <.LVL114>:
        MD5STEP(F2, c, d, a, b, md5->buffer[15] + 0xd8a1e681, 14);
  40d55e:	ea82 0401 	eor.w	r4, r2, r1
  40d562:	4034      	ands	r4, r6
  40d564:	4054      	eors	r4, r2
  40d566:	f8df e1e0 	ldr.w	lr, [pc, #480]	; 40d748 <.LVL188+0x94>
  40d56a:	44e6      	add	lr, ip
  40d56c:	4473      	add	r3, lr

0040d56e <.LVL117>:
  40d56e:	441c      	add	r4, r3
  40d570:	eb01 44b4 	add.w	r4, r1, r4, ror #18

0040d574 <.LVL119>:
        MD5STEP(F2, b, c, d, a, md5->buffer[4]  + 0xe7d3fbc8, 20);
  40d574:	ea81 0304 	eor.w	r3, r1, r4
  40d578:	4013      	ands	r3, r2
  40d57a:	404b      	eors	r3, r1
  40d57c:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 40d74c <.LVL188+0x98>
  40d580:	69c7      	ldr	r7, [r0, #28]
  40d582:	44be      	add	lr, r7
  40d584:	4476      	add	r6, lr

0040d586 <.LVL122>:
  40d586:	4433      	add	r3, r6
  40d588:	eb04 3333 	add.w	r3, r4, r3, ror #12

0040d58c <.LVL124>:
        MD5STEP(F2, a, b, c, d, md5->buffer[9]  + 0x21e1cde6,  5);
  40d58c:	ea84 0b03 	eor.w	fp, r4, r3
  40d590:	ea0b 0b01 	and.w	fp, fp, r1
  40d594:	ea8b 0b04 	eor.w	fp, fp, r4
  40d598:	4e5e      	ldr	r6, [pc, #376]	; (40d714 <.LVL188+0x60>)
  40d59a:	6b07      	ldr	r7, [r0, #48]	; 0x30
  40d59c:	443e      	add	r6, r7
  40d59e:	4432      	add	r2, r6

0040d5a0 <.LVL127>:
  40d5a0:	4493      	add	fp, r2
  40d5a2:	eb03 6bfb 	add.w	fp, r3, fp, ror #27

0040d5a6 <.LVL129>:
        MD5STEP(F2, d, a, b, c, md5->buffer[14] + 0xc33707d6,  9);
  40d5a6:	ea83 0e0b 	eor.w	lr, r3, fp
  40d5aa:	ea0e 0e04 	and.w	lr, lr, r4
  40d5ae:	ea8e 0e03 	eor.w	lr, lr, r3
  40d5b2:	4a59      	ldr	r2, [pc, #356]	; (40d718 <.LVL188+0x64>)
  40d5b4:	444a      	add	r2, r9
  40d5b6:	4411      	add	r1, r2

0040d5b8 <.LVL132>:
  40d5b8:	448e      	add	lr, r1
  40d5ba:	eb0b 5efe 	add.w	lr, fp, lr, ror #23

0040d5be <.LVL134>:
        MD5STEP(F2, c, d, a, b, md5->buffer[3]  + 0xf4d50d87, 14);
  40d5be:	ea8b 060e 	eor.w	r6, fp, lr
  40d5c2:	401e      	ands	r6, r3
  40d5c4:	ea86 060b 	eor.w	r6, r6, fp
  40d5c8:	4a54      	ldr	r2, [pc, #336]	; (40d71c <.LVL188+0x68>)
  40d5ca:	6981      	ldr	r1, [r0, #24]
  40d5cc:	440a      	add	r2, r1
  40d5ce:	4414      	add	r4, r2

0040d5d0 <.LVL137>:
  40d5d0:	4426      	add	r6, r4
  40d5d2:	eb0e 46b6 	add.w	r6, lr, r6, ror #18

0040d5d6 <.LVL139>:
        MD5STEP(F2, b, c, d, a, md5->buffer[8]  + 0x455a14ed, 20);
  40d5d6:	ea8e 0206 	eor.w	r2, lr, r6
  40d5da:	ea02 020b 	and.w	r2, r2, fp
  40d5de:	ea82 020e 	eor.w	r2, r2, lr
  40d5e2:	494f      	ldr	r1, [pc, #316]	; (40d720 <.LVL188+0x6c>)
  40d5e4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  40d5e6:	4421      	add	r1, r4
  40d5e8:	440b      	add	r3, r1

0040d5ea <.LVL142>:
  40d5ea:	441a      	add	r2, r3
  40d5ec:	eb06 3232 	add.w	r2, r6, r2, ror #12

0040d5f0 <.LVL144>:
        MD5STEP(F2, a, b, c, d, md5->buffer[13] + 0xa9e3e905,  5);
  40d5f0:	ea86 0302 	eor.w	r3, r6, r2
  40d5f4:	ea03 030e 	and.w	r3, r3, lr
  40d5f8:	4073      	eors	r3, r6
  40d5fa:	494a      	ldr	r1, [pc, #296]	; (40d724 <.LVL188+0x70>)
  40d5fc:	6c04      	ldr	r4, [r0, #64]	; 0x40
  40d5fe:	4421      	add	r1, r4
  40d600:	448b      	add	fp, r1

0040d602 <.LVL147>:
  40d602:	445b      	add	r3, fp
  40d604:	eb02 63f3 	add.w	r3, r2, r3, ror #27

0040d608 <.LVL149>:
        MD5STEP(F2, d, a, b, c, md5->buffer[2]  + 0xfcefa3f8,  9);
  40d608:	ea82 0103 	eor.w	r1, r2, r3
  40d60c:	4031      	ands	r1, r6
  40d60e:	4051      	eors	r1, r2
  40d610:	4c45      	ldr	r4, [pc, #276]	; (40d728 <.LVL188+0x74>)
  40d612:	6947      	ldr	r7, [r0, #20]
  40d614:	443c      	add	r4, r7
  40d616:	44a6      	add	lr, r4

0040d618 <.LVL152>:
  40d618:	4471      	add	r1, lr
  40d61a:	eb03 51f1 	add.w	r1, r3, r1, ror #23

0040d61e <.LVL154>:
        MD5STEP(F2, c, d, a, b, md5->buffer[7]  + 0x676f02d9, 14);
  40d61e:	ea83 0401 	eor.w	r4, r3, r1
  40d622:	4014      	ands	r4, r2
  40d624:	405c      	eors	r4, r3
  40d626:	f8df e128 	ldr.w	lr, [pc, #296]	; 40d750 <.LVL188+0x9c>
  40d62a:	44d6      	add	lr, sl
  40d62c:	4476      	add	r6, lr

0040d62e <.LVL157>:
  40d62e:	4434      	add	r4, r6
  40d630:	eb01 44b4 	add.w	r4, r1, r4, ror #18

0040d634 <.LVL159>:
        MD5STEP(F2, b, c, d, a, md5->buffer[12] + 0x8d2a4c8a, 20);
  40d634:	ea81 0b04 	eor.w	fp, r1, r4
  40d638:	ea03 060b 	and.w	r6, r3, fp
  40d63c:	404e      	eors	r6, r1
  40d63e:	f8df e114 	ldr.w	lr, [pc, #276]	; 40d754 <.LVL188+0xa0>
  40d642:	44c6      	add	lr, r8
  40d644:	4472      	add	r2, lr

0040d646 <.LVL163>:
  40d646:	4416      	add	r6, r2
  40d648:	eb04 3636 	add.w	r6, r4, r6, ror #12

0040d64c <.LVL165>:

        MD5STEP(F3, a, b, c, d, md5->buffer[5]  + 0xfffa3942,  4);
  40d64c:	4a37      	ldr	r2, [pc, #220]	; (40d72c <.LVL188+0x78>)
  40d64e:	6a07      	ldr	r7, [r0, #32]
  40d650:	443a      	add	r2, r7
  40d652:	4413      	add	r3, r2

0040d654 <.LVL166>:
  40d654:	ea8b 0b06 	eor.w	fp, fp, r6
  40d658:	445b      	add	r3, fp
  40d65a:	eb06 7333 	add.w	r3, r6, r3, ror #28

0040d65e <.LVL168>:
        MD5STEP(F3, d, a, b, c, md5->buffer[8]  + 0x8771f681, 11);
  40d65e:	ea84 0206 	eor.w	r2, r4, r6
  40d662:	405a      	eors	r2, r3
  40d664:	f8df e0f0 	ldr.w	lr, [pc, #240]	; 40d758 <.LVL188+0xa4>
  40d668:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  40d66a:	44be      	add	lr, r7
  40d66c:	4471      	add	r1, lr

0040d66e <.LVL171>:
  40d66e:	4411      	add	r1, r2
  40d670:	eb03 5171 	add.w	r1, r3, r1, ror #21

0040d674 <.LVL173>:
        MD5STEP(F3, c, d, a, b, md5->buffer[11] + 0x6d9d6122, 16);
  40d674:	ea86 0b03 	eor.w	fp, r6, r3
  40d678:	ea8b 0b01 	eor.w	fp, fp, r1
  40d67c:	4a2c      	ldr	r2, [pc, #176]	; (40d730 <.LVL188+0x7c>)
  40d67e:	6b87      	ldr	r7, [r0, #56]	; 0x38
  40d680:	443a      	add	r2, r7
  40d682:	4414      	add	r4, r2

0040d684 <.LVL176>:
  40d684:	445c      	add	r4, fp
  40d686:	eb01 4434 	add.w	r4, r1, r4, ror #16

0040d68a <.LVL178>:
        MD5STEP(F3, b, c, d, a, md5->buffer[14] + 0xfde5380c, 23);
  40d68a:	ea83 0e01 	eor.w	lr, r3, r1
  40d68e:	ea8e 0e04 	eor.w	lr, lr, r4
  40d692:	4a28      	ldr	r2, [pc, #160]	; (40d734 <.LVL188+0x80>)
  40d694:	444a      	add	r2, r9
  40d696:	4416      	add	r6, r2

0040d698 <.LVL181>:
  40d698:	44b6      	add	lr, r6
  40d69a:	eb04 2e7e 	add.w	lr, r4, lr, ror #9

0040d69e <.LVL183>:
        MD5STEP(F3, a, b, c, d, md5->buffer[1]  + 0xa4beea44,  4);
  40d69e:	ea81 0204 	eor.w	r2, r1, r4
  40d6a2:	ea82 020e 	eor.w	r2, r2, lr
  40d6a6:	4e24      	ldr	r6, [pc, #144]	; (40d738 <.LVL188+0x84>)
  40d6a8:	6907      	ldr	r7, [r0, #16]
  40d6aa:	443e      	add	r6, r7
  40d6ac:	4433      	add	r3, r6

0040d6ae <.LVL186>:
  40d6ae:	4413      	add	r3, r2
  40d6b0:	eb0e 7333 	add.w	r3, lr, r3, ror #28

0040d6b4 <.LVL188>:
        MD5STEP(F3, d, a, b, c, md5->buffer[4]  + 0x4bdecfa9, 11);
  40d6b4:	ea84 020e 	eor.w	r2, r4, lr
  40d6b8:	405a      	eors	r2, r3
  40d6ba:	4e20      	ldr	r6, [pc, #128]	; (40d73c <.LVL188+0x88>)
  40d6bc:	69c7      	ldr	r7, [r0, #28]
  40d6be:	443e      	add	r6, r7
  40d6c0:	4431      	add	r1, r6
  40d6c2:	e04b      	b.n	40d75c <.LVL191>
  40d6c4:	d76aa478 	.word	0xd76aa478
  40d6c8:	e8c7b756 	.word	0xe8c7b756
  40d6cc:	242070db 	.word	0x242070db
  40d6d0:	c1bdceee 	.word	0xc1bdceee
  40d6d4:	f57c0faf 	.word	0xf57c0faf
  40d6d8:	4787c62a 	.word	0x4787c62a
  40d6dc:	fd469501 	.word	0xfd469501
  40d6e0:	698098d8 	.word	0x698098d8
  40d6e4:	8b44f7af 	.word	0x8b44f7af
  40d6e8:	ffff5bb1 	.word	0xffff5bb1
  40d6ec:	895cd7be 	.word	0x895cd7be
  40d6f0:	6b901122 	.word	0x6b901122
  40d6f4:	fd987193 	.word	0xfd987193
  40d6f8:	a679438e 	.word	0xa679438e
  40d6fc:	f61e2562 	.word	0xf61e2562
  40d700:	c040b340 	.word	0xc040b340
  40d704:	265e5a51 	.word	0x265e5a51
  40d708:	e9b6c7aa 	.word	0xe9b6c7aa
  40d70c:	d62f105d 	.word	0xd62f105d
  40d710:	02441453 	.word	0x02441453
  40d714:	21e1cde6 	.word	0x21e1cde6
  40d718:	c33707d6 	.word	0xc33707d6
  40d71c:	f4d50d87 	.word	0xf4d50d87
  40d720:	455a14ed 	.word	0x455a14ed
  40d724:	a9e3e905 	.word	0xa9e3e905
  40d728:	fcefa3f8 	.word	0xfcefa3f8
  40d72c:	fffa3942 	.word	0xfffa3942
  40d730:	6d9d6122 	.word	0x6d9d6122
  40d734:	fde5380c 	.word	0xfde5380c
  40d738:	a4beea44 	.word	0xa4beea44
  40d73c:	4bdecfa9 	.word	0x4bdecfa9
  40d740:	a8304613 	.word	0xa8304613
  40d744:	49b40821 	.word	0x49b40821
  40d748:	d8a1e681 	.word	0xd8a1e681
  40d74c:	e7d3fbc8 	.word	0xe7d3fbc8
  40d750:	676f02d9 	.word	0x676f02d9
  40d754:	8d2a4c8a 	.word	0x8d2a4c8a
  40d758:	8771f681 	.word	0x8771f681

0040d75c <.LVL191>:
  40d75c:	4411      	add	r1, r2
  40d75e:	eb03 5171 	add.w	r1, r3, r1, ror #21

0040d762 <.LVL193>:
        MD5STEP(F3, c, d, a, b, md5->buffer[7]  + 0xf6bb4b60, 16);
  40d762:	ea8e 0b03 	eor.w	fp, lr, r3
  40d766:	ea8b 0b01 	eor.w	fp, fp, r1
  40d76a:	4a8c      	ldr	r2, [pc, #560]	; (40d99c <.LVL322>)
  40d76c:	4452      	add	r2, sl
  40d76e:	4414      	add	r4, r2

0040d770 <.LVL196>:
  40d770:	44a3      	add	fp, r4
  40d772:	eb01 4b3b 	add.w	fp, r1, fp, ror #16

0040d776 <.LVL198>:
        MD5STEP(F3, b, c, d, a, md5->buffer[10] + 0xbebfbc70, 23);
  40d776:	ea83 0201 	eor.w	r2, r3, r1
  40d77a:	ea82 020b 	eor.w	r2, r2, fp
  40d77e:	4c88      	ldr	r4, [pc, #544]	; (40d9a0 <.LVL322+0x4>)
  40d780:	6b46      	ldr	r6, [r0, #52]	; 0x34
  40d782:	4434      	add	r4, r6
  40d784:	44a6      	add	lr, r4

0040d786 <.LVL201>:
  40d786:	4472      	add	r2, lr
  40d788:	eb0b 2272 	add.w	r2, fp, r2, ror #9

0040d78c <.LVL203>:
        MD5STEP(F3, a, b, c, d, md5->buffer[13] + 0x289b7ec6,  4);
  40d78c:	ea81 040b 	eor.w	r4, r1, fp
  40d790:	4054      	eors	r4, r2
  40d792:	4e84      	ldr	r6, [pc, #528]	; (40d9a4 <.LVL322+0x8>)
  40d794:	6c07      	ldr	r7, [r0, #64]	; 0x40
  40d796:	443e      	add	r6, r7
  40d798:	4433      	add	r3, r6

0040d79a <.LVL206>:
  40d79a:	4423      	add	r3, r4
  40d79c:	eb02 7333 	add.w	r3, r2, r3, ror #28

0040d7a0 <.LVL208>:
        MD5STEP(F3, d, a, b, c, md5->buffer[0]  + 0xeaa127fa, 11);
  40d7a0:	ea8b 0e02 	eor.w	lr, fp, r2
  40d7a4:	ea8e 0e03 	eor.w	lr, lr, r3
  40d7a8:	4c7f      	ldr	r4, [pc, #508]	; (40d9a8 <.LVL322+0xc>)
  40d7aa:	68c6      	ldr	r6, [r0, #12]
  40d7ac:	4434      	add	r4, r6
  40d7ae:	4421      	add	r1, r4

0040d7b0 <.LVL211>:
  40d7b0:	448e      	add	lr, r1
  40d7b2:	eb03 5e7e 	add.w	lr, r3, lr, ror #21

0040d7b6 <.LVL213>:
        MD5STEP(F3, c, d, a, b, md5->buffer[3]  + 0xd4ef3085, 16);
  40d7b6:	ea82 0603 	eor.w	r6, r2, r3
  40d7ba:	ea86 060e 	eor.w	r6, r6, lr
  40d7be:	497b      	ldr	r1, [pc, #492]	; (40d9ac <.LVL322+0x10>)
  40d7c0:	6984      	ldr	r4, [r0, #24]
  40d7c2:	4421      	add	r1, r4
  40d7c4:	448b      	add	fp, r1

0040d7c6 <.LVL216>:
  40d7c6:	445e      	add	r6, fp
  40d7c8:	eb0e 4636 	add.w	r6, lr, r6, ror #16

0040d7cc <.LVL218>:
        MD5STEP(F3, b, c, d, a, md5->buffer[6]  + 0x04881d05, 23);
  40d7cc:	ea83 0b0e 	eor.w	fp, r3, lr
  40d7d0:	ea8b 0b06 	eor.w	fp, fp, r6
  40d7d4:	4976      	ldr	r1, [pc, #472]	; (40d9b0 <.LVL322+0x14>)
  40d7d6:	6a44      	ldr	r4, [r0, #36]	; 0x24
  40d7d8:	4421      	add	r1, r4
  40d7da:	440a      	add	r2, r1

0040d7dc <.LVL221>:
  40d7dc:	4493      	add	fp, r2
  40d7de:	eb06 2b7b 	add.w	fp, r6, fp, ror #9

0040d7e2 <.LVL223>:
        MD5STEP(F3, a, b, c, d, md5->buffer[9]  + 0xd9d4d039,  4);
  40d7e2:	ea8e 0406 	eor.w	r4, lr, r6
  40d7e6:	ea84 040b 	eor.w	r4, r4, fp
  40d7ea:	4a72      	ldr	r2, [pc, #456]	; (40d9b4 <.LVL322+0x18>)
  40d7ec:	6b01      	ldr	r1, [r0, #48]	; 0x30
  40d7ee:	440a      	add	r2, r1
  40d7f0:	4413      	add	r3, r2

0040d7f2 <.LVL226>:
  40d7f2:	441c      	add	r4, r3
  40d7f4:	eb0b 7434 	add.w	r4, fp, r4, ror #28

0040d7f8 <.LVL228>:
        MD5STEP(F3, d, a, b, c, md5->buffer[12] + 0xe6db99e5, 11);
  40d7f8:	ea86 010b 	eor.w	r1, r6, fp
  40d7fc:	4061      	eors	r1, r4
  40d7fe:	4b6e      	ldr	r3, [pc, #440]	; (40d9b8 <.LVL322+0x1c>)
  40d800:	4443      	add	r3, r8
  40d802:	449e      	add	lr, r3

0040d804 <.LVL231>:
  40d804:	4471      	add	r1, lr
  40d806:	eb04 5171 	add.w	r1, r4, r1, ror #21

0040d80a <.LVL233>:
        MD5STEP(F3, c, d, a, b, md5->buffer[15] + 0x1fa27cf8, 16);
  40d80a:	ea8b 0304 	eor.w	r3, fp, r4
  40d80e:	404b      	eors	r3, r1
  40d810:	4a6a      	ldr	r2, [pc, #424]	; (40d9bc <.LVL322+0x20>)
  40d812:	4462      	add	r2, ip
  40d814:	4416      	add	r6, r2

0040d816 <.LVL236>:
  40d816:	441e      	add	r6, r3
  40d818:	eb01 4636 	add.w	r6, r1, r6, ror #16

0040d81c <.LVL238>:
        MD5STEP(F3, b, c, d, a, md5->buffer[2]  + 0xc4ac5665, 23);
  40d81c:	ea84 0201 	eor.w	r2, r4, r1
  40d820:	4072      	eors	r2, r6
  40d822:	4b67      	ldr	r3, [pc, #412]	; (40d9c0 <.LVL322+0x24>)
  40d824:	6947      	ldr	r7, [r0, #20]
  40d826:	443b      	add	r3, r7
  40d828:	449b      	add	fp, r3

0040d82a <.LVL241>:
  40d82a:	445a      	add	r2, fp
  40d82c:	eb06 2272 	add.w	r2, r6, r2, ror #9

0040d830 <.LVL243>:

        MD5STEP(F4, a, b, c, d, md5->buffer[0]  + 0xf4292244,  6);
  40d830:	ea62 0301 	orn	r3, r2, r1
  40d834:	4073      	eors	r3, r6
  40d836:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 40da00 <.LVL322+0x64>
  40d83a:	68c7      	ldr	r7, [r0, #12]
  40d83c:	44be      	add	lr, r7
  40d83e:	4474      	add	r4, lr

0040d840 <.LVL246>:
  40d840:	4423      	add	r3, r4
  40d842:	eb02 63b3 	add.w	r3, r2, r3, ror #26

0040d846 <.LVL248>:
        MD5STEP(F4, d, a, b, c, md5->buffer[7]  + 0x432aff97, 10);
  40d846:	ea63 0b06 	orn	fp, r3, r6
  40d84a:	ea8b 0b02 	eor.w	fp, fp, r2
  40d84e:	4c5d      	ldr	r4, [pc, #372]	; (40d9c4 <.LVL322+0x28>)
  40d850:	4454      	add	r4, sl
  40d852:	4421      	add	r1, r4

0040d854 <.LVL251>:
  40d854:	448b      	add	fp, r1
  40d856:	eb03 5bbb 	add.w	fp, r3, fp, ror #22

0040d85a <.LVL253>:
        MD5STEP(F4, c, d, a, b, md5->buffer[14] + 0xab9423a7, 15);
  40d85a:	ea6b 0e02 	orn	lr, fp, r2
  40d85e:	ea8e 0e03 	eor.w	lr, lr, r3
  40d862:	4959      	ldr	r1, [pc, #356]	; (40d9c8 <.LVL322+0x2c>)
  40d864:	4449      	add	r1, r9
  40d866:	440e      	add	r6, r1

0040d868 <.LVL256>:
  40d868:	44b6      	add	lr, r6
  40d86a:	eb0b 4e7e 	add.w	lr, fp, lr, ror #17

0040d86e <.LVL258>:
        MD5STEP(F4, b, c, d, a, md5->buffer[5]  + 0xfc93a039, 21);
  40d86e:	ea6e 0403 	orn	r4, lr, r3
  40d872:	ea84 040b 	eor.w	r4, r4, fp
  40d876:	4955      	ldr	r1, [pc, #340]	; (40d9cc <.LVL322+0x30>)
  40d878:	6a06      	ldr	r6, [r0, #32]
  40d87a:	4431      	add	r1, r6
  40d87c:	440a      	add	r2, r1

0040d87e <.LVL261>:
  40d87e:	4414      	add	r4, r2
  40d880:	eb0e 24f4 	add.w	r4, lr, r4, ror #11

0040d884 <.LVL263>:
        MD5STEP(F4, a, b, c, d, md5->buffer[12] + 0x655b59c3,  6);
  40d884:	ea64 060b 	orn	r6, r4, fp
  40d888:	ea86 060e 	eor.w	r6, r6, lr
  40d88c:	4a50      	ldr	r2, [pc, #320]	; (40d9d0 <.LVL322+0x34>)
  40d88e:	4442      	add	r2, r8
  40d890:	4413      	add	r3, r2

0040d892 <.LVL266>:
  40d892:	441e      	add	r6, r3
  40d894:	eb04 66b6 	add.w	r6, r4, r6, ror #26

0040d898 <.LVL268>:
        MD5STEP(F4, d, a, b, c, md5->buffer[3]  + 0x8f0ccc92, 10);
  40d898:	ea66 080e 	orn	r8, r6, lr
  40d89c:	ea88 0804 	eor.w	r8, r8, r4
  40d8a0:	4b4c      	ldr	r3, [pc, #304]	; (40d9d4 <.LVL322+0x38>)
  40d8a2:	6982      	ldr	r2, [r0, #24]
  40d8a4:	4413      	add	r3, r2
  40d8a6:	449b      	add	fp, r3

0040d8a8 <.LVL271>:
  40d8a8:	44d8      	add	r8, fp
  40d8aa:	eb06 58b8 	add.w	r8, r6, r8, ror #22

0040d8ae <.LVL273>:
        MD5STEP(F4, c, d, a, b, md5->buffer[10] + 0xffeff47d, 15);
  40d8ae:	ea68 0204 	orn	r2, r8, r4
  40d8b2:	4072      	eors	r2, r6
  40d8b4:	4948      	ldr	r1, [pc, #288]	; (40d9d8 <.LVL322+0x3c>)
  40d8b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
  40d8b8:	4419      	add	r1, r3
  40d8ba:	448e      	add	lr, r1

0040d8bc <.LVL276>:
  40d8bc:	4472      	add	r2, lr
  40d8be:	eb08 4272 	add.w	r2, r8, r2, ror #17

0040d8c2 <.LVL278>:
        MD5STEP(F4, b, c, d, a, md5->buffer[1]  + 0x85845dd1, 21);
  40d8c2:	ea62 0306 	orn	r3, r2, r6
  40d8c6:	ea83 0308 	eor.w	r3, r3, r8
  40d8ca:	4944      	ldr	r1, [pc, #272]	; (40d9dc <.LVL322+0x40>)
  40d8cc:	6907      	ldr	r7, [r0, #16]
  40d8ce:	4439      	add	r1, r7
  40d8d0:	440c      	add	r4, r1

0040d8d2 <.LVL281>:
  40d8d2:	4423      	add	r3, r4
  40d8d4:	eb02 23f3 	add.w	r3, r2, r3, ror #11

0040d8d8 <.LVL283>:
        MD5STEP(F4, a, b, c, d, md5->buffer[8]  + 0x6fa87e4f,  6);
  40d8d8:	ea63 0e08 	orn	lr, r3, r8
  40d8dc:	ea8e 0e02 	eor.w	lr, lr, r2
  40d8e0:	493f      	ldr	r1, [pc, #252]	; (40d9e0 <.LVL322+0x44>)
  40d8e2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  40d8e4:	4421      	add	r1, r4
  40d8e6:	440e      	add	r6, r1

0040d8e8 <.LVL286>:
  40d8e8:	44b6      	add	lr, r6
  40d8ea:	eb03 6ebe 	add.w	lr, r3, lr, ror #26

0040d8ee <.LVL288>:
        MD5STEP(F4, d, a, b, c, md5->buffer[15] + 0xfe2ce6e0, 10);
  40d8ee:	ea6e 0402 	orn	r4, lr, r2
  40d8f2:	405c      	eors	r4, r3
  40d8f4:	493b      	ldr	r1, [pc, #236]	; (40d9e4 <.LVL322+0x48>)
  40d8f6:	4461      	add	r1, ip
  40d8f8:	4488      	add	r8, r1

0040d8fa <.LVL291>:
  40d8fa:	4444      	add	r4, r8
  40d8fc:	eb0e 54b4 	add.w	r4, lr, r4, ror #22

0040d900 <.LVL293>:
        MD5STEP(F4, c, d, a, b, md5->buffer[6]  + 0xa3014314, 15);
  40d900:	ea64 0603 	orn	r6, r4, r3
  40d904:	ea86 060e 	eor.w	r6, r6, lr
  40d908:	4937      	ldr	r1, [pc, #220]	; (40d9e8 <.LVL322+0x4c>)
  40d90a:	6a47      	ldr	r7, [r0, #36]	; 0x24
  40d90c:	4439      	add	r1, r7
  40d90e:	440a      	add	r2, r1

0040d910 <.LVL296>:
  40d910:	4416      	add	r6, r2
  40d912:	eb04 4676 	add.w	r6, r4, r6, ror #17

0040d916 <.LVL298>:
        MD5STEP(F4, b, c, d, a, md5->buffer[13] + 0x4e0811a1, 21);
  40d916:	ea66 0c0e 	orn	ip, r6, lr
  40d91a:	ea8c 0c04 	eor.w	ip, ip, r4
  40d91e:	4933      	ldr	r1, [pc, #204]	; (40d9ec <.LVL322+0x50>)
  40d920:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40d922:	4411      	add	r1, r2
  40d924:	440b      	add	r3, r1

0040d926 <.LVL301>:
  40d926:	449c      	add	ip, r3
  40d928:	eb06 2cfc 	add.w	ip, r6, ip, ror #11

0040d92c <.LVL303>:
        MD5STEP(F4, a, b, c, d, md5->buffer[4]  + 0xf7537e82,  6);
  40d92c:	ea6c 0204 	orn	r2, ip, r4
  40d930:	4072      	eors	r2, r6
  40d932:	492f      	ldr	r1, [pc, #188]	; (40d9f0 <.LVL322+0x54>)
  40d934:	69c3      	ldr	r3, [r0, #28]
  40d936:	4419      	add	r1, r3
  40d938:	448e      	add	lr, r1

0040d93a <.LVL306>:
  40d93a:	4472      	add	r2, lr
  40d93c:	eb0c 62b2 	add.w	r2, ip, r2, ror #26

0040d940 <.LVL308>:
        MD5STEP(F4, d, a, b, c, md5->buffer[11] + 0xbd3af235, 10);
  40d940:	ea62 0306 	orn	r3, r2, r6
  40d944:	ea83 030c 	eor.w	r3, r3, ip
  40d948:	492a      	ldr	r1, [pc, #168]	; (40d9f4 <.LVL322+0x58>)
  40d94a:	6b87      	ldr	r7, [r0, #56]	; 0x38
  40d94c:	4439      	add	r1, r7
  40d94e:	440c      	add	r4, r1

0040d950 <.LVL311>:
  40d950:	441c      	add	r4, r3
  40d952:	eb02 54b4 	add.w	r4, r2, r4, ror #22

0040d956 <.LVL313>:
        MD5STEP(F4, c, d, a, b, md5->buffer[2]  + 0x2ad7d2bb, 15);
  40d956:	ea64 030c 	orn	r3, r4, ip
  40d95a:	4053      	eors	r3, r2
  40d95c:	4926      	ldr	r1, [pc, #152]	; (40d9f8 <.LVL322+0x5c>)
  40d95e:	6947      	ldr	r7, [r0, #20]
  40d960:	4439      	add	r1, r7
  40d962:	440e      	add	r6, r1

0040d964 <.LVL316>:
  40d964:	441e      	add	r6, r3
  40d966:	eb04 4676 	add.w	r6, r4, r6, ror #17

0040d96a <.LVL318>:
        MD5STEP(F4, b, c, d, a, md5->buffer[9]  + 0xeb86d391, 21);

        /* Add the working vars back into digest state[]  */
        md5->digest[0] += a;
  40d96a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40d96c:	4413      	add	r3, r2
  40d96e:	64c3      	str	r3, [r0, #76]	; 0x4c
        MD5STEP(F4, b, c, d, a, md5->buffer[9]  + 0xeb86d391, 21);
  40d970:	ea66 0202 	orn	r2, r6, r2

0040d974 <.LVL319>:
  40d974:	4062      	eors	r2, r4
  40d976:	4921      	ldr	r1, [pc, #132]	; (40d9fc <.LVL322+0x60>)
  40d978:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40d97a:	4419      	add	r1, r3
  40d97c:	448c      	add	ip, r1
  40d97e:	4494      	add	ip, r2
        md5->digest[1] += b;
  40d980:	4435      	add	r5, r6
  40d982:	eb05 25fc 	add.w	r5, r5, ip, ror #11
  40d986:	6505      	str	r5, [r0, #80]	; 0x50
        md5->digest[2] += c;
  40d988:	9b01      	ldr	r3, [sp, #4]
  40d98a:	4433      	add	r3, r6
  40d98c:	6543      	str	r3, [r0, #84]	; 0x54
        md5->digest[3] += d;
  40d98e:	6d83      	ldr	r3, [r0, #88]	; 0x58
  40d990:	441c      	add	r4, r3

0040d992 <.LVL320>:
  40d992:	6584      	str	r4, [r0, #88]	; 0x58

        return 0;
    }
  40d994:	2000      	movs	r0, #0

0040d996 <.LVL321>:
  40d996:	b003      	add	sp, #12

0040d998 <.LCFI2>:
  40d998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040d99c <.LVL322>:
  40d99c:	f6bb4b60 	.word	0xf6bb4b60
  40d9a0:	bebfbc70 	.word	0xbebfbc70
  40d9a4:	289b7ec6 	.word	0x289b7ec6
  40d9a8:	eaa127fa 	.word	0xeaa127fa
  40d9ac:	d4ef3085 	.word	0xd4ef3085
  40d9b0:	04881d05 	.word	0x04881d05
  40d9b4:	d9d4d039 	.word	0xd9d4d039
  40d9b8:	e6db99e5 	.word	0xe6db99e5
  40d9bc:	1fa27cf8 	.word	0x1fa27cf8
  40d9c0:	c4ac5665 	.word	0xc4ac5665
  40d9c4:	432aff97 	.word	0x432aff97
  40d9c8:	ab9423a7 	.word	0xab9423a7
  40d9cc:	fc93a039 	.word	0xfc93a039
  40d9d0:	655b59c3 	.word	0x655b59c3
  40d9d4:	8f0ccc92 	.word	0x8f0ccc92
  40d9d8:	ffeff47d 	.word	0xffeff47d
  40d9dc:	85845dd1 	.word	0x85845dd1
  40d9e0:	6fa87e4f 	.word	0x6fa87e4f
  40d9e4:	fe2ce6e0 	.word	0xfe2ce6e0
  40d9e8:	a3014314 	.word	0xa3014314
  40d9ec:	4e0811a1 	.word	0x4e0811a1
  40d9f0:	f7537e82 	.word	0xf7537e82
  40d9f4:	bd3af235 	.word	0xbd3af235
  40d9f8:	2ad7d2bb 	.word	0x2ad7d2bb
  40d9fc:	eb86d391 	.word	0xeb86d391
  40da00:	f4292244 	.word	0xf4292244

Disassembly of section .text.ecc_projective_add_point%73:

0040da04 <ecc_projective_add_point>:
   mp       The "b" value from montgomery_setup()
   return   MP_OKAY on success
*/
int ecc_projective_add_point(ecc_point* P, ecc_point* Q, ecc_point* R,
                             mp_int* a, mp_int* modulus, mp_digit mp)
{
  40da04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0040da08 <.LCFI19>:
  40da08:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464

0040da0c <.LCFI20>:
  40da0c:	f8dd 7488 	ldr.w	r7, [sp, #1160]	; 0x488
   mp_int rx, ry, rz;
#endif
   mp_int *x, *y, *z;
   int    err;

   if (P == NULL || Q == NULL || R == NULL || modulus == NULL) {
  40da10:	2800      	cmp	r0, #0
  40da12:	f000 829b 	beq.w	40df4c <.LVL461>
  40da16:	460e      	mov	r6, r1
  40da18:	4615      	mov	r5, r2
  40da1a:	469a      	mov	sl, r3
  40da1c:	4680      	mov	r8, r0
  40da1e:	2900      	cmp	r1, #0
  40da20:	f000 8294 	beq.w	40df4c <.LVL461>
  40da24:	2a00      	cmp	r2, #0
  40da26:	f000 8294 	beq.w	40df52 <.LVL461+0x6>
  40da2a:	2f00      	cmp	r7, #0
  40da2c:	f000 8291 	beq.w	40df52 <.LVL461+0x6>
       return ECC_BAD_ARG_E;
   }

   /* if Q == R then swap P and Q, so we don't require a local x,y,z */
   if (Q == R) {
  40da30:	4291      	cmp	r1, r2
  40da32:	d00e      	beq.n	40da52 <.LBB22>

0040da34 <.LVL257>:
      ecc_point* tPt  = P;
      P = Q;
      Q = tPt;
   }

   if ((err = mp_init_multi(&t1, &t2, NULL, NULL, NULL, NULL)) != MP_OKAY) {
  40da34:	2200      	movs	r2, #0

0040da36 <.LVL258>:
  40da36:	9201      	str	r2, [sp, #4]
  40da38:	9200      	str	r2, [sp, #0]
  40da3a:	4613      	mov	r3, r2

0040da3c <.LVL259>:
  40da3c:	a904      	add	r1, sp, #16
  40da3e:	a88e      	add	r0, sp, #568	; 0x238
  40da40:	f00f ff14 	bl	41d86c <mp_init_multi>

0040da44 <.LVL260>:
  40da44:	4604      	mov	r4, r0
  40da46:	b138      	cbz	r0, 40da58 <.LBE22>

0040da48 <.LVL261>:
   /* clean up */
   mp_clear(&t1);
   mp_clear(&t2);

   return err;
}
  40da48:	4620      	mov	r0, r4
  40da4a:	f20d 4d64 	addw	sp, sp, #1124	; 0x464

0040da4e <.LCFI21>:
  40da4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040da52 <.LBB22>:
      Q = tPt;
  40da52:	4606      	mov	r6, r0
      P = Q;
  40da54:	4690      	mov	r8, r2
  40da56:	e7ed      	b.n	40da34 <.LVL257>

0040da58 <.LBE22>:
       err = mp_sub(modulus, Q->y, &t1);
  40da58:	f506 790a 	add.w	r9, r6, #552	; 0x228
  40da5c:	aa8e      	add	r2, sp, #568	; 0x238
  40da5e:	4649      	mov	r1, r9
  40da60:	4638      	mov	r0, r7

0040da62 <.LVL264>:
  40da62:	f011 f9ec 	bl	41ee3e <.LFE71>

0040da66 <.LVL265>:
   if (err == MP_OKAY) {
  40da66:	4604      	mov	r4, r0
  40da68:	b130      	cbz	r0, 40da78 <.LVL270>

0040da6a <.L136>:
   mp_clear(&t1);
  40da6a:	a88e      	add	r0, sp, #568	; 0x238

0040da6c <.LVL267>:
  40da6c:	f011 f996 	bl	41ed9c <.LFE170>

0040da70 <.LVL268>:
   mp_clear(&t2);
  40da70:	a804      	add	r0, sp, #16
  40da72:	f011 f993 	bl	41ed9c <.LFE170>

0040da76 <.LVL269>:
   return err;
  40da76:	e7e7      	b.n	40da48 <.LVL261>

0040da78 <.LVL270>:
       if ( (mp_cmp(P->x, Q->x) == MP_EQ) &&
  40da78:	4644      	mov	r4, r8
  40da7a:	9603      	str	r6, [sp, #12]
  40da7c:	4631      	mov	r1, r6
  40da7e:	4640      	mov	r0, r8

0040da80 <.LVL271>:
  40da80:	f011 fa4e 	bl	41ef20 <.LFE66>

0040da84 <.LVL272>:
  40da84:	2800      	cmp	r0, #0
  40da86:	d066      	beq.n	40db56 <.LVL298>

0040da88 <.LVL273>:
   y = R->y;
  40da88:	f505 7a0a 	add.w	sl, r5, #552	; 0x228

0040da8c <.LVL274>:
   z = R->z;
  40da8c:	f505 6b8a 	add.w	fp, r5, #1104	; 0x450

0040da90 <.LVL275>:
       err = mp_copy(P->x, x);
  40da90:	4629      	mov	r1, r5
  40da92:	4620      	mov	r0, r4
  40da94:	f011 f9e7 	bl	41ee66 <.LFE85>

0040da98 <.LVL276>:
   if (err == MP_OKAY)
  40da98:	4604      	mov	r4, r0

0040da9a <.LVL277>:
  40da9a:	2800      	cmp	r0, #0
  40da9c:	f000 8088 	beq.w	40dbb0 <.LVL307>

0040daa0 <.LVL278>:
   if (err == MP_OKAY)
  40daa0:	2c00      	cmp	r4, #0
  40daa2:	f000 80e8 	beq.w	40dc76 <.LVL337+0x2>
   if (err == MP_OKAY)
  40daa6:	2c00      	cmp	r4, #0
  40daa8:	f000 8103 	beq.w	40dcb2 <.LVL348+0x2>
   if (err == MP_OKAY) {
  40daac:	bb1c      	cbnz	r4, 40daf6 <.LVL288>
       if (mp_isneg(y))
  40daae:	f8d5 322c 	ldr.w	r3, [r5, #556]	; 0x22c
  40dab2:	2b00      	cmp	r3, #0
  40dab4:	f040 811f 	bne.w	40dcf6 <.LVL360+0x2>

0040dab8 <.LVL279>:
       err = mp_add(&t1, &t1, &t1);
  40dab8:	aa8e      	add	r2, sp, #568	; 0x238
  40daba:	4611      	mov	r1, r2
  40dabc:	4610      	mov	r0, r2
  40dabe:	f011 f9b9 	bl	41ee34 <.LFE222>

0040dac2 <.LVL280>:
  40dac2:	4604      	mov	r4, r0

0040dac4 <.LVL281>:
   if (err == MP_OKAY) {
  40dac4:	2c00      	cmp	r4, #0
  40dac6:	f040 8132 	bne.w	40dd2e <.LVL370>
       if (mp_cmp(&t1, modulus) != MP_LT)
  40daca:	4639      	mov	r1, r7
  40dacc:	a88e      	add	r0, sp, #568	; 0x238

0040dace <.LVL282>:
  40dace:	f011 fa27 	bl	41ef20 <.LFE66>

0040dad2 <.LVL283>:
  40dad2:	f1b0 3fff 	cmp.w	r0, #4294967295
  40dad6:	d008      	beq.n	40daea <.LVL286>
           err = mp_sub(&t1, modulus, &t1);
  40dad8:	aa8e      	add	r2, sp, #568	; 0x238
  40dada:	4639      	mov	r1, r7
  40dadc:	4610      	mov	r0, r2
  40dade:	f011 f9ae 	bl	41ee3e <.LFE71>

0040dae2 <.LVL284>:
  40dae2:	4604      	mov	r4, r0

0040dae4 <.LVL285>:
   if (err == MP_OKAY)
  40dae4:	2c00      	cmp	r4, #0
  40dae6:	f040 8132 	bne.w	40dd4e <.LVL376>

0040daea <.LVL286>:
       err = mp_add(&t1, y, &t1);
  40daea:	aa8e      	add	r2, sp, #568	; 0x238
  40daec:	4651      	mov	r1, sl
  40daee:	4610      	mov	r0, r2
  40daf0:	f011 f9a0 	bl	41ee34 <.LFE222>

0040daf4 <.LVL287>:
  40daf4:	4604      	mov	r4, r0

0040daf6 <.LVL288>:
   if (err == MP_OKAY) {
  40daf6:	2c00      	cmp	r4, #0
  40daf8:	f000 8105 	beq.w	40dd06 <.LVL363+0x4>
   if (err == MP_OKAY) {
  40dafc:	2c00      	cmp	r4, #0
  40dafe:	f000 8128 	beq.w	40dd52 <.LVL376+0x4>

0040db02 <.LVL289>:
   if (err == MP_OKAY)
  40db02:	2c00      	cmp	r4, #0
  40db04:	f000 8150 	beq.w	40dda8 <.LVL390+0x4>
   if (err == MP_OKAY)
  40db08:	2c00      	cmp	r4, #0
  40db0a:	f000 81ae 	beq.w	40de6a <.LVL418+0x2>
   if (err == MP_OKAY)
  40db0e:	2c00      	cmp	r4, #0
  40db10:	f000 81c8 	beq.w	40dea4 <.LVL430+0x2>
   if (err == MP_OKAY)
  40db14:	2c00      	cmp	r4, #0
  40db16:	f000 81e3 	beq.w	40dee0 <.LVL442+0x2>
   if (err == MP_OKAY)
  40db1a:	2c00      	cmp	r4, #0
  40db1c:	f000 8160 	beq.w	40dde0 <.LVL397>
   if (err == MP_OKAY)
  40db20:	2c00      	cmp	r4, #0
  40db22:	d1a2      	bne.n	40da6a <.L136>
       err = mp_sub(&t2, &t1, y);
  40db24:	4652      	mov	r2, sl
  40db26:	a98e      	add	r1, sp, #568	; 0x238
  40db28:	a804      	add	r0, sp, #16

0040db2a <.LVL290>:
  40db2a:	f011 f988 	bl	41ee3e <.LFE71>

0040db2e <.LVL291>:
  40db2e:	4604      	mov	r4, r0

0040db30 <.LVL292>:
   if (err == MP_OKAY) {
  40db30:	2c00      	cmp	r4, #0
  40db32:	d19a      	bne.n	40da6a <.L136>
       if (mp_isneg(y))
  40db34:	f8d5 322c 	ldr.w	r3, [r5, #556]	; 0x22c
  40db38:	2b00      	cmp	r3, #0
  40db3a:	f040 81f6 	bne.w	40df2a <.LVL454+0x2>

0040db3e <.LVL293>:
       if (mp_isodd(y) == MP_YES)
  40db3e:	4650      	mov	r0, sl
  40db40:	f011 f85f 	bl	41ec02 <.LFE154>

0040db44 <.LVL294>:
  40db44:	2801      	cmp	r0, #1
  40db46:	f000 81f7 	beq.w	40df38 <.LVL458>
       err = mp_div_2(y, y);
  40db4a:	4651      	mov	r1, sl
  40db4c:	4650      	mov	r0, sl
  40db4e:	f011 f9a3 	bl	41ee98 <.LFE111>

0040db52 <.LVL296>:
  40db52:	4604      	mov	r4, r0

0040db54 <.LVL297>:
  40db54:	e789      	b.n	40da6a <.L136>

0040db56 <.LVL298>:
            (get_digit_count(Q->z) && mp_cmp(P->z, Q->z) == MP_EQ) &&
  40db56:	f506 6b8a 	add.w	fp, r6, #1104	; 0x450
  40db5a:	4658      	mov	r0, fp
  40db5c:	f011 f9a6 	bl	41eeac <.LFE115>

0040db60 <.LVL299>:
       if ( (mp_cmp(P->x, Q->x) == MP_EQ) &&
  40db60:	2800      	cmp	r0, #0
  40db62:	d091      	beq.n	40da88 <.LVL273>
            (get_digit_count(Q->z) && mp_cmp(P->z, Q->z) == MP_EQ) &&
  40db64:	4659      	mov	r1, fp
  40db66:	f508 608a 	add.w	r0, r8, #1104	; 0x450
  40db6a:	f011 f9d9 	bl	41ef20 <.LFE66>

0040db6e <.LVL300>:
  40db6e:	2800      	cmp	r0, #0
  40db70:	d18a      	bne.n	40da88 <.LVL273>
            (mp_cmp(P->y, Q->y) == MP_EQ || mp_cmp(P->y, &t1) == MP_EQ)) {
  40db72:	f508 7b0a 	add.w	fp, r8, #552	; 0x228
  40db76:	4649      	mov	r1, r9
  40db78:	4658      	mov	r0, fp
  40db7a:	f011 f9d1 	bl	41ef20 <.LFE66>

0040db7e <.LVL301>:
            (get_digit_count(Q->z) && mp_cmp(P->z, Q->z) == MP_EQ) &&
  40db7e:	b130      	cbz	r0, 40db8e <.LVL302+0x6>
            (mp_cmp(P->y, Q->y) == MP_EQ || mp_cmp(P->y, &t1) == MP_EQ)) {
  40db80:	a98e      	add	r1, sp, #568	; 0x238
  40db82:	4658      	mov	r0, fp
  40db84:	f011 f9cc 	bl	41ef20 <.LFE66>

0040db88 <.LVL302>:
  40db88:	2800      	cmp	r0, #0
  40db8a:	f47f af7d 	bne.w	40da88 <.LVL273>
           mp_clear(&t1);
  40db8e:	a88e      	add	r0, sp, #568	; 0x238
  40db90:	f011 f904 	bl	41ed9c <.LFE170>

0040db94 <.LVL303>:
           mp_clear(&t2);
  40db94:	a804      	add	r0, sp, #16
  40db96:	f011 f901 	bl	41ed9c <.LFE170>

0040db9a <.LVL304>:
          return ecc_projective_dbl_point(P, R, a, modulus, mp);
  40db9a:	f8dd 348c 	ldr.w	r3, [sp, #1164]	; 0x48c
  40db9e:	9300      	str	r3, [sp, #0]
  40dba0:	463b      	mov	r3, r7
  40dba2:	4652      	mov	r2, sl
  40dba4:	4629      	mov	r1, r5
  40dba6:	4640      	mov	r0, r8
  40dba8:	f004 fd16 	bl	4125d8 <.LFE25>

0040dbac <.LVL305>:
  40dbac:	4604      	mov	r4, r0

0040dbae <.LVL306>:
  40dbae:	e74b      	b.n	40da48 <.LVL261>

0040dbb0 <.LVL307>:
       err = mp_copy(P->y, y);
  40dbb0:	4651      	mov	r1, sl
  40dbb2:	f508 700a 	add.w	r0, r8, #552	; 0x228

0040dbb6 <.LVL308>:
  40dbb6:	f011 f956 	bl	41ee66 <.LFE85>

0040dbba <.LVL309>:
   if (err == MP_OKAY)
  40dbba:	4604      	mov	r4, r0
  40dbbc:	2800      	cmp	r0, #0
  40dbbe:	d161      	bne.n	40dc84 <.LVL340>
       err = mp_copy(P->z, z);
  40dbc0:	4659      	mov	r1, fp
  40dbc2:	f508 608a 	add.w	r0, r8, #1104	; 0x450

0040dbc6 <.LVL310>:
  40dbc6:	f011 f94e 	bl	41ee66 <.LFE85>

0040dbca <.LVL311>:
   if (err == MP_OKAY) {
  40dbca:	4604      	mov	r4, r0
  40dbcc:	2800      	cmp	r0, #0
  40dbce:	f47f af67 	bne.w	40daa0 <.LVL278>
       if (!mp_iszero(Q->z)) {
  40dbd2:	f506 688a 	add.w	r8, r6, #1104	; 0x450

0040dbd6 <.LVL312>:
  40dbd6:	4640      	mov	r0, r8

0040dbd8 <.LVL313>:
  40dbd8:	f011 f94a 	bl	41ee70 <.LFE93>

0040dbdc <.LVL314>:
  40dbdc:	b128      	cbz	r0, 40dbea <.LVL318>

0040dbde <.LVL315>:
       err = mp_sqr(z, &t1);
  40dbde:	a98e      	add	r1, sp, #568	; 0x238
  40dbe0:	4658      	mov	r0, fp
  40dbe2:	f011 f94f 	bl	41ee84 <.LFE105>

0040dbe6 <.LVL316>:
  40dbe6:	4604      	mov	r4, r0

0040dbe8 <.LVL317>:
  40dbe8:	e75a      	b.n	40daa0 <.LVL278>

0040dbea <.LVL318>:
           err = mp_sqr(Q->z, &t1);
  40dbea:	a98e      	add	r1, sp, #568	; 0x238
  40dbec:	4640      	mov	r0, r8
  40dbee:	f011 f949 	bl	41ee84 <.LFE105>

0040dbf2 <.LVL319>:
           if (err == MP_OKAY)
  40dbf2:	4604      	mov	r4, r0
  40dbf4:	b1f0      	cbz	r0, 40dc34 <.LVL328+0x6>
           if (err == MP_OKAY)
  40dbf6:	2c00      	cmp	r4, #0
  40dbf8:	f47f af52 	bne.w	40daa0 <.LVL278>
               err = mp_montgomery_reduce(&t1, modulus, mp);
  40dbfc:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  40dc00:	4639      	mov	r1, r7
  40dc02:	a88e      	add	r0, sp, #568	; 0x238

0040dc04 <.LVL320>:
  40dc04:	f011 f943 	bl	41ee8e <.LFE110>

0040dc08 <.LVL321>:
  40dc08:	4604      	mov	r4, r0

0040dc0a <.LVL322>:
           if (err == MP_OKAY)
  40dc0a:	2c00      	cmp	r4, #0
  40dc0c:	d13a      	bne.n	40dc84 <.LVL340>
               err = mp_mul(&t1, y, y);
  40dc0e:	4652      	mov	r2, sl
  40dc10:	4651      	mov	r1, sl
  40dc12:	a88e      	add	r0, sp, #568	; 0x238

0040dc14 <.LVL323>:
  40dc14:	f011 f91d 	bl	41ee52 <.LFE86>

0040dc18 <.LVL324>:
  40dc18:	4604      	mov	r4, r0

0040dc1a <.LVL325>:
           if (err == MP_OKAY)
  40dc1a:	2c00      	cmp	r4, #0
  40dc1c:	f47f af40 	bne.w	40daa0 <.LVL278>
               err = mp_montgomery_reduce(y, modulus, mp);
  40dc20:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  40dc24:	4639      	mov	r1, r7
  40dc26:	4650      	mov	r0, sl

0040dc28 <.LVL326>:
  40dc28:	f011 f931 	bl	41ee8e <.LFE110>

0040dc2c <.LVL327>:
  40dc2c:	4604      	mov	r4, r0

0040dc2e <.LVL328>:
   if (err == MP_OKAY)
  40dc2e:	2c00      	cmp	r4, #0
  40dc30:	d0d5      	beq.n	40dbde <.LVL315>
  40dc32:	e036      	b.n	40dca2 <.LVL345>
               err = mp_montgomery_reduce(&t1, modulus, mp);
  40dc34:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  40dc38:	4639      	mov	r1, r7
  40dc3a:	a88e      	add	r0, sp, #568	; 0x238

0040dc3c <.LVL329>:
  40dc3c:	f011 f927 	bl	41ee8e <.LFE110>

0040dc40 <.LVL330>:
           if (err == MP_OKAY)
  40dc40:	4604      	mov	r4, r0
  40dc42:	2800      	cmp	r0, #0
  40dc44:	d1e1      	bne.n	40dc0a <.LVL322>
               err = mp_mul(&t1, x, x);
  40dc46:	462a      	mov	r2, r5
  40dc48:	4629      	mov	r1, r5
  40dc4a:	a88e      	add	r0, sp, #568	; 0x238

0040dc4c <.LVL331>:
  40dc4c:	f011 f901 	bl	41ee52 <.LFE86>

0040dc50 <.LVL332>:
           if (err == MP_OKAY)
  40dc50:	4604      	mov	r4, r0
  40dc52:	2800      	cmp	r0, #0
  40dc54:	d1e1      	bne.n	40dc1a <.LVL325>
               err = mp_montgomery_reduce(x, modulus, mp);
  40dc56:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  40dc5a:	4639      	mov	r1, r7
  40dc5c:	4628      	mov	r0, r5

0040dc5e <.LVL333>:
  40dc5e:	f011 f916 	bl	41ee8e <.LFE110>

0040dc62 <.LVL334>:
           if (err == MP_OKAY)
  40dc62:	4604      	mov	r4, r0
  40dc64:	2800      	cmp	r0, #0
  40dc66:	d1e2      	bne.n	40dc2e <.LVL328>
               err = mp_mul(Q->z, &t1, &t1);
  40dc68:	aa8e      	add	r2, sp, #568	; 0x238
  40dc6a:	4611      	mov	r1, r2
  40dc6c:	4640      	mov	r0, r8

0040dc6e <.LVL335>:
  40dc6e:	f011 f8f0 	bl	41ee52 <.LFE86>

0040dc72 <.LVL336>:
  40dc72:	4604      	mov	r4, r0

0040dc74 <.LVL337>:
  40dc74:	e7bf      	b.n	40dbf6 <.LVL319+0x4>
       err = mp_montgomery_reduce(&t1, modulus, mp);
  40dc76:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  40dc7a:	4639      	mov	r1, r7
  40dc7c:	a88e      	add	r0, sp, #568	; 0x238

0040dc7e <.LVL338>:
  40dc7e:	f011 f906 	bl	41ee8e <.LFE110>

0040dc82 <.LVL339>:
  40dc82:	4604      	mov	r4, r0

0040dc84 <.LVL340>:
   if (err == MP_OKAY)
  40dc84:	b9e4      	cbnz	r4, 40dcc0 <.LVL351>
       err = mp_mul(Q->x, &t1, &t2);
  40dc86:	aa04      	add	r2, sp, #16
  40dc88:	a98e      	add	r1, sp, #568	; 0x238
  40dc8a:	9803      	ldr	r0, [sp, #12]

0040dc8c <.LVL341>:
  40dc8c:	f011 f8e1 	bl	41ee52 <.LFE86>

0040dc90 <.LVL342>:
   if (err == MP_OKAY)
  40dc90:	4604      	mov	r4, r0
  40dc92:	b9e0      	cbnz	r0, 40dcce <.LVL354>
       err = mp_montgomery_reduce(&t2, modulus, mp);
  40dc94:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  40dc98:	4639      	mov	r1, r7
  40dc9a:	a804      	add	r0, sp, #16

0040dc9c <.LVL343>:
  40dc9c:	f011 f8f7 	bl	41ee8e <.LFE110>

0040dca0 <.LVL344>:
  40dca0:	4604      	mov	r4, r0

0040dca2 <.LVL345>:
   if (err == MP_OKAY)
  40dca2:	b9f4      	cbnz	r4, 40dce2 <.LVL357>
       err = mp_mul(z, &t1, &t1);
  40dca4:	aa8e      	add	r2, sp, #568	; 0x238
  40dca6:	4611      	mov	r1, r2
  40dca8:	4658      	mov	r0, fp

0040dcaa <.LVL346>:
  40dcaa:	f011 f8d2 	bl	41ee52 <.LFE86>

0040dcae <.LVL347>:
  40dcae:	4604      	mov	r4, r0

0040dcb0 <.LVL348>:
  40dcb0:	e6f9      	b.n	40daa6 <.LVL278+0x6>
       err = mp_montgomery_reduce(&t1, modulus, mp);
  40dcb2:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  40dcb6:	4639      	mov	r1, r7
  40dcb8:	a88e      	add	r0, sp, #568	; 0x238

0040dcba <.LVL349>:
  40dcba:	f011 f8e8 	bl	41ee8e <.LFE110>

0040dcbe <.LVL350>:
  40dcbe:	4604      	mov	r4, r0

0040dcc0 <.LVL351>:
   if (err == MP_OKAY)
  40dcc0:	b9fc      	cbnz	r4, 40dd02 <.LVL363>
       err = mp_mul(Q->y, &t1, &t1);
  40dcc2:	aa8e      	add	r2, sp, #568	; 0x238
  40dcc4:	4611      	mov	r1, r2
  40dcc6:	4648      	mov	r0, r9

0040dcc8 <.LVL352>:
  40dcc8:	f011 f8c3 	bl	41ee52 <.LFE86>

0040dccc <.LVL353>:
  40dccc:	4604      	mov	r4, r0

0040dcce <.LVL354>:
   if (err == MP_OKAY)
  40dcce:	2c00      	cmp	r4, #0
  40dcd0:	f47f aef8 	bne.w	40dac4 <.LVL281>
       err = mp_montgomery_reduce(&t1, modulus, mp);
  40dcd4:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  40dcd8:	4639      	mov	r1, r7
  40dcda:	a88e      	add	r0, sp, #568	; 0x238

0040dcdc <.LVL355>:
  40dcdc:	f011 f8d7 	bl	41ee8e <.LFE110>

0040dce0 <.LVL356>:
  40dce0:	4604      	mov	r4, r0

0040dce2 <.LVL357>:
   if (err == MP_OKAY)
  40dce2:	2c00      	cmp	r4, #0
  40dce4:	f47f aefe 	bne.w	40dae4 <.LVL285>
       err = mp_sub(y, &t1, y);
  40dce8:	4652      	mov	r2, sl
  40dcea:	a98e      	add	r1, sp, #568	; 0x238
  40dcec:	4650      	mov	r0, sl

0040dcee <.LVL358>:
  40dcee:	f011 f8a6 	bl	41ee3e <.LFE71>

0040dcf2 <.LVL359>:
  40dcf2:	4604      	mov	r4, r0

0040dcf4 <.LVL360>:
  40dcf4:	e6da      	b.n	40daac <.LVL278+0xc>
           err = mp_add(y, modulus, y);
  40dcf6:	4652      	mov	r2, sl
  40dcf8:	4639      	mov	r1, r7
  40dcfa:	4650      	mov	r0, sl

0040dcfc <.LVL361>:
  40dcfc:	f011 f89a 	bl	41ee34 <.LFE222>

0040dd00 <.LVL362>:
  40dd00:	4604      	mov	r4, r0

0040dd02 <.LVL363>:
   if (err == MP_OKAY)
  40dd02:	b96c      	cbnz	r4, 40dd20 <.LVL367>
  40dd04:	e6d8      	b.n	40dab8 <.LVL279>
       if (mp_cmp(&t1, modulus) != MP_LT)
  40dd06:	4639      	mov	r1, r7
  40dd08:	a88e      	add	r0, sp, #568	; 0x238

0040dd0a <.LVL364>:
  40dd0a:	f011 f909 	bl	41ef20 <.LFE66>

0040dd0e <.LVL365>:
  40dd0e:	f1b0 3fff 	cmp.w	r0, #4294967295
  40dd12:	d006      	beq.n	40dd22 <.LVL368>
           err = mp_sub(&t1, modulus, &t1);
  40dd14:	aa8e      	add	r2, sp, #568	; 0x238
  40dd16:	4639      	mov	r1, r7
  40dd18:	4610      	mov	r0, r2
  40dd1a:	f011 f890 	bl	41ee3e <.LFE71>

0040dd1e <.LVL366>:
  40dd1e:	4604      	mov	r4, r0

0040dd20 <.LVL367>:
   if (err == MP_OKAY)
  40dd20:	bb24      	cbnz	r4, 40dd6c <.LVL380>

0040dd22 <.LVL368>:
       err = mp_sub(x, &t2, x);
  40dd22:	462a      	mov	r2, r5
  40dd24:	a904      	add	r1, sp, #16
  40dd26:	4628      	mov	r0, r5
  40dd28:	f011 f889 	bl	41ee3e <.LFE71>

0040dd2c <.LVL369>:
  40dd2c:	4604      	mov	r4, r0

0040dd2e <.LVL370>:
   if (err == MP_OKAY) {
  40dd2e:	bb24      	cbnz	r4, 40dd7a <.LVL383>
       if (mp_isneg(x))
  40dd30:	686b      	ldr	r3, [r5, #4]
  40dd32:	b933      	cbnz	r3, 40dd42 <.LVL373+0x2>

0040dd34 <.LVL371>:
       err = mp_add(&t2, &t2, &t2);
  40dd34:	aa04      	add	r2, sp, #16
  40dd36:	4611      	mov	r1, r2
  40dd38:	4610      	mov	r0, r2
  40dd3a:	f011 f87b 	bl	41ee34 <.LFE222>

0040dd3e <.LVL372>:
  40dd3e:	4604      	mov	r4, r0

0040dd40 <.LVL373>:
  40dd40:	e6dc      	b.n	40dafc <.LVL288+0x6>
           err = mp_add(x, modulus, x);
  40dd42:	462a      	mov	r2, r5
  40dd44:	4639      	mov	r1, r7
  40dd46:	4628      	mov	r0, r5

0040dd48 <.LVL374>:
  40dd48:	f011 f874 	bl	41ee34 <.LFE222>

0040dd4c <.LVL375>:
  40dd4c:	4604      	mov	r4, r0

0040dd4e <.LVL376>:
   if (err == MP_OKAY)
  40dd4e:	bb1c      	cbnz	r4, 40dd98 <.LVL387>
  40dd50:	e7f0      	b.n	40dd34 <.LVL371>
       if (mp_cmp(&t2, modulus) != MP_LT)
  40dd52:	4639      	mov	r1, r7
  40dd54:	a804      	add	r0, sp, #16

0040dd56 <.LVL377>:
  40dd56:	f011 f8e3 	bl	41ef20 <.LFE66>

0040dd5a <.LVL378>:
  40dd5a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40dd5e:	d006      	beq.n	40dd6e <.LVL381>
           err = mp_sub(&t2, modulus, &t2);
  40dd60:	aa04      	add	r2, sp, #16
  40dd62:	4639      	mov	r1, r7
  40dd64:	4610      	mov	r0, r2
  40dd66:	f011 f86a 	bl	41ee3e <.LFE71>

0040dd6a <.LVL379>:
  40dd6a:	4604      	mov	r4, r0

0040dd6c <.LVL380>:
   if (err == MP_OKAY)
  40dd6c:	bb14      	cbnz	r4, 40ddb4 <.LVL393>

0040dd6e <.LVL381>:
       err = mp_add(&t2, x, &t2);
  40dd6e:	aa04      	add	r2, sp, #16
  40dd70:	4629      	mov	r1, r5
  40dd72:	4610      	mov	r0, r2
  40dd74:	f011 f85e 	bl	41ee34 <.LFE222>

0040dd78 <.LVL382>:
  40dd78:	4604      	mov	r4, r0

0040dd7a <.LVL383>:
   if (err == MP_OKAY) {
  40dd7a:	2c00      	cmp	r4, #0
  40dd7c:	d165      	bne.n	40de4a <.LVL413>
       if (mp_cmp(&t2, modulus) != MP_LT)
  40dd7e:	4639      	mov	r1, r7
  40dd80:	a804      	add	r0, sp, #16

0040dd82 <.LVL384>:
  40dd82:	f011 f8cd 	bl	41ef20 <.LFE66>

0040dd86 <.LVL385>:
  40dd86:	f1b0 3fff 	cmp.w	r0, #4294967295
  40dd8a:	d006      	beq.n	40dd9a <.LVL388>
           err = mp_sub(&t2, modulus, &t2);
  40dd8c:	aa04      	add	r2, sp, #16
  40dd8e:	4639      	mov	r1, r7
  40dd90:	4610      	mov	r0, r2
  40dd92:	f011 f854 	bl	41ee3e <.LFE71>

0040dd96 <.LVL386>:
  40dd96:	4604      	mov	r4, r0

0040dd98 <.LVL387>:
   if (err == MP_OKAY) {
  40dd98:	b964      	cbnz	r4, 40ddb4 <.LVL393>

0040dd9a <.LVL388>:
       if (!mp_iszero(Q->z)) {
  40dd9a:	f506 668a 	add.w	r6, r6, #1104	; 0x450

0040dd9e <.LVL389>:
  40dd9e:	4630      	mov	r0, r6
  40dda0:	f011 f866 	bl	41ee70 <.LFE93>

0040dda4 <.LVL390>:
  40dda4:	2800      	cmp	r0, #0
  40dda6:	d039      	beq.n	40de1c <.LVL406>
       err = mp_mul(z, x, z);
  40dda8:	465a      	mov	r2, fp
  40ddaa:	4629      	mov	r1, r5
  40ddac:	4658      	mov	r0, fp
  40ddae:	f011 f850 	bl	41ee52 <.LFE86>

0040ddb2 <.LVL392>:
  40ddb2:	4604      	mov	r4, r0

0040ddb4 <.LVL393>:
   if (err == MP_OKAY)
  40ddb4:	2c00      	cmp	r4, #0
  40ddb6:	d041      	beq.n	40de3c <.LVL410+0x2>
   if (err == MP_OKAY)
  40ddb8:	2c00      	cmp	r4, #0
  40ddba:	d05c      	beq.n	40de76 <.LVL421+0x2>
   if (err == MP_OKAY)
  40ddbc:	2c00      	cmp	r4, #0
  40ddbe:	d078      	beq.n	40deb2 <.LVL433+0x2>
   if (err == MP_OKAY) {
  40ddc0:	b9a4      	cbnz	r4, 40ddec <.LVL399>
       if (mp_isneg(x))
  40ddc2:	686b      	ldr	r3, [r5, #4]
  40ddc4:	2b00      	cmp	r3, #0
  40ddc6:	f040 8092 	bne.w	40deee <.LVL445+0x2>

0040ddca <.LVL394>:
       err = mp_sub(&t2, x, &t2);
  40ddca:	aa04      	add	r2, sp, #16
  40ddcc:	4629      	mov	r1, r5
  40ddce:	4610      	mov	r0, r2
  40ddd0:	f011 f835 	bl	41ee3e <.LFE71>

0040ddd4 <.LVL395>:
  40ddd4:	4604      	mov	r4, r0

0040ddd6 <.LVL396>:
   if (err == MP_OKAY) {
  40ddd6:	b9b4      	cbnz	r4, 40de06 <.LVL402>
       if (mp_isneg(&t2))
  40ddd8:	9b05      	ldr	r3, [sp, #20]
  40ddda:	2b00      	cmp	r3, #0
  40dddc:	f040 8097 	bne.w	40df0e <.LVL448+0x14>

0040dde0 <.LVL397>:
       err = mp_sub(&t2, x, &t2);
  40dde0:	aa04      	add	r2, sp, #16
  40dde2:	4629      	mov	r1, r5
  40dde4:	4610      	mov	r0, r2
  40dde6:	f011 f82a 	bl	41ee3e <.LFE71>

0040ddea <.LVL398>:
  40ddea:	4604      	mov	r4, r0

0040ddec <.LVL399>:
   if (err == MP_OKAY) {
  40ddec:	2c00      	cmp	r4, #0
  40ddee:	f47f ae9f 	bne.w	40db30 <.LVL292>
       if (mp_isneg(&t2))
  40ddf2:	9b05      	ldr	r3, [sp, #20]
  40ddf4:	2b00      	cmp	r3, #0
  40ddf6:	f040 8091 	bne.w	40df1c <.LVL451+0x2>

0040ddfa <.LVL400>:
       err = mp_mul(&t2, y, &t2);
  40ddfa:	aa04      	add	r2, sp, #16
  40ddfc:	4651      	mov	r1, sl
  40ddfe:	4610      	mov	r0, r2
  40de00:	f011 f827 	bl	41ee52 <.LFE86>

0040de04 <.LVL401>:
  40de04:	4604      	mov	r4, r0

0040de06 <.LVL402>:
   if (err == MP_OKAY)
  40de06:	2c00      	cmp	r4, #0
  40de08:	f040 809c 	bne.w	40df44 <.LVL460>
       err = mp_montgomery_reduce(&t2, modulus, mp);
  40de0c:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  40de10:	4639      	mov	r1, r7
  40de12:	a804      	add	r0, sp, #16

0040de14 <.LVL403>:
  40de14:	f011 f83b 	bl	41ee8e <.LFE110>

0040de18 <.LVL404>:
  40de18:	4604      	mov	r4, r0

0040de1a <.LVL405>:
  40de1a:	e681      	b.n	40db20 <.LVL289+0x1e>

0040de1c <.LVL406>:
           err = mp_mul(z, Q->z, z);
  40de1c:	465a      	mov	r2, fp
  40de1e:	4631      	mov	r1, r6
  40de20:	4658      	mov	r0, fp
  40de22:	f011 f816 	bl	41ee52 <.LFE86>

0040de26 <.LVL407>:
           if (err == MP_OKAY)
  40de26:	4604      	mov	r4, r0
  40de28:	2800      	cmp	r0, #0
  40de2a:	d1c3      	bne.n	40ddb4 <.LVL393>
               err = mp_montgomery_reduce(z, modulus, mp);
  40de2c:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  40de30:	4639      	mov	r1, r7
  40de32:	4658      	mov	r0, fp

0040de34 <.LVL408>:
  40de34:	f011 f82b 	bl	41ee8e <.LFE110>

0040de38 <.LVL409>:
  40de38:	4604      	mov	r4, r0

0040de3a <.LVL410>:
  40de3a:	e662      	b.n	40db02 <.LVL289>
       err = mp_montgomery_reduce(z, modulus, mp);
  40de3c:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  40de40:	4639      	mov	r1, r7
  40de42:	4658      	mov	r0, fp

0040de44 <.LVL411>:
  40de44:	f011 f823 	bl	41ee8e <.LFE110>

0040de48 <.LVL412>:
  40de48:	4604      	mov	r4, r0

0040de4a <.LVL413>:
   if (err == MP_OKAY)
  40de4a:	b9dc      	cbnz	r4, 40de84 <.LVL424>
       err = mp_mul(&t1, x, &t1);
  40de4c:	aa8e      	add	r2, sp, #568	; 0x238
  40de4e:	4629      	mov	r1, r5
  40de50:	4610      	mov	r0, r2

0040de52 <.LVL414>:
  40de52:	f010 fffe 	bl	41ee52 <.LFE86>

0040de56 <.LVL415>:
   if (err == MP_OKAY)
  40de56:	4604      	mov	r4, r0
  40de58:	b9d8      	cbnz	r0, 40de92 <.LVL427>
       err = mp_montgomery_reduce(&t1, modulus, mp);
  40de5a:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  40de5e:	4639      	mov	r1, r7
  40de60:	a88e      	add	r0, sp, #568	; 0x238

0040de62 <.LVL416>:
  40de62:	f011 f814 	bl	41ee8e <.LFE110>

0040de66 <.LVL417>:
  40de66:	4604      	mov	r4, r0

0040de68 <.LVL418>:
  40de68:	e64e      	b.n	40db08 <.LVL289+0x6>
       err = mp_sqr(x, x);
  40de6a:	4629      	mov	r1, r5
  40de6c:	4628      	mov	r0, r5

0040de6e <.LVL419>:
  40de6e:	f011 f809 	bl	41ee84 <.LFE105>

0040de72 <.LVL420>:
  40de72:	4604      	mov	r4, r0

0040de74 <.LVL421>:
  40de74:	e7a0      	b.n	40ddb8 <.LVL393+0x4>
       err = mp_montgomery_reduce(x, modulus, mp);
  40de76:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  40de7a:	4639      	mov	r1, r7
  40de7c:	4628      	mov	r0, r5

0040de7e <.LVL422>:
  40de7e:	f011 f806 	bl	41ee8e <.LFE110>

0040de82 <.LVL423>:
  40de82:	4604      	mov	r4, r0

0040de84 <.LVL424>:
   if (err == MP_OKAY)
  40de84:	b9e4      	cbnz	r4, 40dec0 <.LVL436>
       err = mp_mul(&t2, x, &t2);
  40de86:	aa04      	add	r2, sp, #16
  40de88:	4629      	mov	r1, r5
  40de8a:	4610      	mov	r0, r2

0040de8c <.LVL425>:
  40de8c:	f010 ffe1 	bl	41ee52 <.LFE86>

0040de90 <.LVL426>:
  40de90:	4604      	mov	r4, r0

0040de92 <.LVL427>:
   if (err == MP_OKAY)
  40de92:	b9dc      	cbnz	r4, 40decc <.LVL439>
       err = mp_montgomery_reduce(&t2, modulus, mp);
  40de94:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  40de98:	4639      	mov	r1, r7
  40de9a:	a804      	add	r0, sp, #16

0040de9c <.LVL428>:
  40de9c:	f010 fff7 	bl	41ee8e <.LFE110>

0040dea0 <.LVL429>:
  40dea0:	4604      	mov	r4, r0

0040dea2 <.LVL430>:
  40dea2:	e634      	b.n	40db0e <.LVL289+0xc>
       err = mp_mul(&t1, x, &t1);
  40dea4:	aa8e      	add	r2, sp, #568	; 0x238
  40dea6:	4629      	mov	r1, r5
  40dea8:	4610      	mov	r0, r2

0040deaa <.LVL431>:
  40deaa:	f010 ffd2 	bl	41ee52 <.LFE86>

0040deae <.LVL432>:
  40deae:	4604      	mov	r4, r0

0040deb0 <.LVL433>:
  40deb0:	e784      	b.n	40ddbc <.LVL393+0x8>
       err = mp_montgomery_reduce(&t1, modulus, mp);
  40deb2:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  40deb6:	4639      	mov	r1, r7
  40deb8:	a88e      	add	r0, sp, #568	; 0x238

0040deba <.LVL434>:
  40deba:	f010 ffe8 	bl	41ee8e <.LFE110>

0040debe <.LVL435>:
  40debe:	4604      	mov	r4, r0

0040dec0 <.LVL436>:
   if (err == MP_OKAY)
  40dec0:	b9dc      	cbnz	r4, 40defa <.LVL448>
       err = mp_sqr(y, x);
  40dec2:	4629      	mov	r1, r5
  40dec4:	4650      	mov	r0, sl

0040dec6 <.LVL437>:
  40dec6:	f010 ffdd 	bl	41ee84 <.LFE105>

0040deca <.LVL438>:
  40deca:	4604      	mov	r4, r0

0040decc <.LVL439>:
   if (err == MP_OKAY)
  40decc:	2c00      	cmp	r4, #0
  40dece:	d182      	bne.n	40ddd6 <.LVL396>
       err = mp_montgomery_reduce(x, modulus, mp);
  40ded0:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  40ded4:	4639      	mov	r1, r7
  40ded6:	4628      	mov	r0, r5

0040ded8 <.LVL440>:
  40ded8:	f010 ffd9 	bl	41ee8e <.LFE110>

0040dedc <.LVL441>:
  40dedc:	4604      	mov	r4, r0

0040dede <.LVL442>:
  40dede:	e619      	b.n	40db14 <.LVL289+0x12>
       err = mp_sub(x, &t2, x);
  40dee0:	462a      	mov	r2, r5
  40dee2:	a904      	add	r1, sp, #16
  40dee4:	4628      	mov	r0, r5

0040dee6 <.LVL443>:
  40dee6:	f010 ffaa 	bl	41ee3e <.LFE71>

0040deea <.LVL444>:
  40deea:	4604      	mov	r4, r0

0040deec <.LVL445>:
  40deec:	e768      	b.n	40ddc0 <.LVL393+0xc>
           err = mp_add(x, modulus, x);
  40deee:	462a      	mov	r2, r5
  40def0:	4639      	mov	r1, r7
  40def2:	4628      	mov	r0, r5

0040def4 <.LVL446>:
  40def4:	f010 ff9e 	bl	41ee34 <.LFE222>

0040def8 <.LVL447>:
  40def8:	4604      	mov	r4, r0

0040defa <.LVL448>:
   if (err == MP_OKAY)
  40defa:	2c00      	cmp	r4, #0
  40defc:	f43f af65 	beq.w	40ddca <.LVL394>
   if (err == MP_OKAY)
  40df00:	2c00      	cmp	r4, #0
  40df02:	f43f af7a 	beq.w	40ddfa <.LVL400>
   if (err == MP_OKAY) {
  40df06:	2c00      	cmp	r4, #0
  40df08:	f47f adaf 	bne.w	40da6a <.L136>
  40df0c:	e617      	b.n	40db3e <.LVL293>
           err = mp_add(&t2, modulus, &t2);
  40df0e:	aa04      	add	r2, sp, #16
  40df10:	4639      	mov	r1, r7
  40df12:	4610      	mov	r0, r2

0040df14 <.LVL449>:
  40df14:	f010 ff8e 	bl	41ee34 <.LFE222>

0040df18 <.LVL450>:
  40df18:	4604      	mov	r4, r0

0040df1a <.LVL451>:
  40df1a:	e5fe      	b.n	40db1a <.LVL289+0x18>
           err = mp_add(&t2, modulus, &t2);
  40df1c:	aa04      	add	r2, sp, #16
  40df1e:	4639      	mov	r1, r7
  40df20:	4610      	mov	r0, r2

0040df22 <.LVL452>:
  40df22:	f010 ff87 	bl	41ee34 <.LFE222>

0040df26 <.LVL453>:
  40df26:	4604      	mov	r4, r0

0040df28 <.LVL454>:
  40df28:	e7ea      	b.n	40df00 <.LVL448+0x6>
           err = mp_add(y, modulus, y);
  40df2a:	4652      	mov	r2, sl
  40df2c:	4639      	mov	r1, r7
  40df2e:	4650      	mov	r0, sl

0040df30 <.LVL455>:
  40df30:	f010 ff80 	bl	41ee34 <.LFE222>

0040df34 <.LVL456>:
  40df34:	4604      	mov	r4, r0

0040df36 <.LVL457>:
  40df36:	e7e6      	b.n	40df06 <.LVL448+0xc>

0040df38 <.LVL458>:
           err = mp_add(y, modulus, y);
  40df38:	4652      	mov	r2, sl
  40df3a:	4639      	mov	r1, r7
  40df3c:	4650      	mov	r0, sl
  40df3e:	f010 ff79 	bl	41ee34 <.LFE222>

0040df42 <.LVL459>:
  40df42:	4604      	mov	r4, r0

0040df44 <.LVL460>:
   if (err == MP_OKAY)
  40df44:	2c00      	cmp	r4, #0
  40df46:	f47f ad90 	bne.w	40da6a <.L136>
  40df4a:	e5fe      	b.n	40db4a <.LVL294+0x6>

0040df4c <.LVL461>:
       return ECC_BAD_ARG_E;
  40df4c:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
  40df50:	e57a      	b.n	40da48 <.LVL261>
  40df52:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
  40df56:	e577      	b.n	40da48 <.LVL261>

Disassembly of section .text._malloc_r%74:

0040df58 <_malloc_r>:
  40df58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0040df5c <.LCFI0>:
  40df5c:	f101 060b 	add.w	r6, r1, #11
  40df60:	2e16      	cmp	r6, #22
  40df62:	b083      	sub	sp, #12

0040df64 <.LCFI1>:
  40df64:	4605      	mov	r5, r0
  40df66:	f240 809e 	bls.w	40e0a6 <.LVL46>

0040df6a <.LVL1>:
  40df6a:	f036 0607 	bics.w	r6, r6, #7

0040df6e <.LVL2>:
  40df6e:	f100 80bd 	bmi.w	40e0ec <.LCFI3>
  40df72:	42b1      	cmp	r1, r6
  40df74:	f200 80ba 	bhi.w	40e0ec <.LCFI3>
  40df78:	f010 f9ec 	bl	41e354 <.LFE141>

0040df7c <.LVL3>:
  40df7c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40df80:	f0c0 828b 	bcc.w	40e49a <.LVL171>
  40df84:	0a73      	lsrs	r3, r6, #9
  40df86:	f000 80b8 	beq.w	40e0fa <.LCFI5>
  40df8a:	2b04      	cmp	r3, #4
  40df8c:	f200 816e 	bhi.w	40e26c <.LCFI11>
  40df90:	09b3      	lsrs	r3, r6, #6
  40df92:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40df96:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40df9a:	00c3      	lsls	r3, r0, #3

0040df9c <.LVL4>:
  40df9c:	4fb9      	ldr	r7, [pc, #740]	; (40e284 <.LCFI11+0x18>)
  40df9e:	443b      	add	r3, r7
  40dfa0:	f1a3 0108 	sub.w	r1, r3, #8

0040dfa4 <.LVL5>:
  40dfa4:	685c      	ldr	r4, [r3, #4]

0040dfa6 <.LVL6>:
  40dfa6:	42a1      	cmp	r1, r4
  40dfa8:	d106      	bne.n	40dfb8 <.LVL10>
  40dfaa:	e00c      	b.n	40dfc6 <.LVL14>

0040dfac <.LVL7>:
  40dfac:	2a00      	cmp	r2, #0
  40dfae:	f280 80aa 	bge.w	40e106 <.LVL62>

0040dfb2 <.LVL8>:
  40dfb2:	68e4      	ldr	r4, [r4, #12]
  40dfb4:	42a1      	cmp	r1, r4
  40dfb6:	d006      	beq.n	40dfc6 <.LVL14>

0040dfb8 <.LVL10>:
  40dfb8:	6863      	ldr	r3, [r4, #4]
  40dfba:	f023 0303 	bic.w	r3, r3, #3

0040dfbe <.LVL11>:
  40dfbe:	1b9a      	subs	r2, r3, r6

0040dfc0 <.LVL12>:
  40dfc0:	2a0f      	cmp	r2, #15
  40dfc2:	ddf3      	ble.n	40dfac <.LVL7>

0040dfc4 <.LVL13>:
  40dfc4:	4670      	mov	r0, lr

0040dfc6 <.LVL14>:
  40dfc6:	693c      	ldr	r4, [r7, #16]
  40dfc8:	f8df e2d0 	ldr.w	lr, [pc, #720]	; 40e29c <.LCFI11+0x30>
  40dfcc:	4574      	cmp	r4, lr
  40dfce:	f000 819f 	beq.w	40e310 <.LVL115>
  40dfd2:	6863      	ldr	r3, [r4, #4]
  40dfd4:	f023 0303 	bic.w	r3, r3, #3

0040dfd8 <.LVL16>:
  40dfd8:	1b9a      	subs	r2, r3, r6

0040dfda <.LVL17>:
  40dfda:	2a0f      	cmp	r2, #15
  40dfdc:	f300 8184 	bgt.w	40e2e8 <.LVL110>
  40dfe0:	2a00      	cmp	r2, #0
  40dfe2:	f8c7 e014 	str.w	lr, [r7, #20]
  40dfe6:	f8c7 e010 	str.w	lr, [r7, #16]
  40dfea:	f280 809d 	bge.w	40e128 <.LCFI7>
  40dfee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40dff2:	f080 8155 	bcs.w	40e2a0 <.LVL101>
  40dff6:	08db      	lsrs	r3, r3, #3

0040dff8 <.LVL18>:
  40dff8:	f103 0c01 	add.w	ip, r3, #1
  40dffc:	1099      	asrs	r1, r3, #2
  40dffe:	687a      	ldr	r2, [r7, #4]

0040e000 <.LVL19>:
  40e000:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40e004:	f8c4 8008 	str.w	r8, [r4, #8]
  40e008:	2301      	movs	r3, #1

0040e00a <.LVL20>:
  40e00a:	408b      	lsls	r3, r1
  40e00c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3

0040e010 <.LVL21>:
  40e010:	4313      	orrs	r3, r2
  40e012:	3908      	subs	r1, #8

0040e014 <.LVL22>:
  40e014:	60e1      	str	r1, [r4, #12]
  40e016:	607b      	str	r3, [r7, #4]

0040e018 <.LVL23>:
  40e018:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40e01c:	f8c8 400c 	str.w	r4, [r8, #12]

0040e020 <.LVL24>:
  40e020:	1082      	asrs	r2, r0, #2
  40e022:	2401      	movs	r4, #1

0040e024 <.LVL25>:
  40e024:	4094      	lsls	r4, r2

0040e026 <.LVL26>:
  40e026:	429c      	cmp	r4, r3
  40e028:	f200 808b 	bhi.w	40e142 <.LCFI9>
  40e02c:	421c      	tst	r4, r3
  40e02e:	d106      	bne.n	40e03e <.LVL30>
  40e030:	f020 0003 	bic.w	r0, r0, #3

0040e034 <.LVL27>:
  40e034:	0064      	lsls	r4, r4, #1

0040e036 <.LVL28>:
  40e036:	421c      	tst	r4, r3
  40e038:	f100 0004 	add.w	r0, r0, #4

0040e03c <.LVL29>:
  40e03c:	d0fa      	beq.n	40e034 <.LVL27>

0040e03e <.LVL30>:
  40e03e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3

0040e042 <.LVL31>:
  40e042:	46cc      	mov	ip, r9
  40e044:	4680      	mov	r8, r0

0040e046 <.LVL32>:
  40e046:	f8dc 300c 	ldr.w	r3, [ip, #12]

0040e04a <.LVL33>:
  40e04a:	459c      	cmp	ip, r3
  40e04c:	d107      	bne.n	40e05e <.LVL36>
  40e04e:	e161      	b.n	40e314 <.LVL116>

0040e050 <.LVL34>:
  40e050:	2a00      	cmp	r2, #0
  40e052:	f280 816f 	bge.w	40e334 <.LVL121>
  40e056:	68db      	ldr	r3, [r3, #12]
  40e058:	459c      	cmp	ip, r3
  40e05a:	f000 815b 	beq.w	40e314 <.LVL116>

0040e05e <.LVL36>:
  40e05e:	6859      	ldr	r1, [r3, #4]
  40e060:	f021 0103 	bic.w	r1, r1, #3

0040e064 <.LVL37>:
  40e064:	1b8a      	subs	r2, r1, r6

0040e066 <.LVL38>:
  40e066:	2a0f      	cmp	r2, #15
  40e068:	ddf2      	ble.n	40e050 <.LVL34>
  40e06a:	f8d3 c00c 	ldr.w	ip, [r3, #12]

0040e06e <.LVL39>:
  40e06e:	f8d3 8008 	ldr.w	r8, [r3, #8]

0040e072 <.LVL40>:
  40e072:	9301      	str	r3, [sp, #4]
  40e074:	199c      	adds	r4, r3, r6

0040e076 <.LVL41>:
  40e076:	4628      	mov	r0, r5

0040e078 <.LVL42>:
  40e078:	f046 0601 	orr.w	r6, r6, #1
  40e07c:	f042 0501 	orr.w	r5, r2, #1

0040e080 <.LVL43>:
  40e080:	605e      	str	r6, [r3, #4]
  40e082:	f8c8 c00c 	str.w	ip, [r8, #12]
  40e086:	f8cc 8008 	str.w	r8, [ip, #8]
  40e08a:	617c      	str	r4, [r7, #20]
  40e08c:	613c      	str	r4, [r7, #16]
  40e08e:	f8c4 e00c 	str.w	lr, [r4, #12]
  40e092:	f8c4 e008 	str.w	lr, [r4, #8]
  40e096:	6065      	str	r5, [r4, #4]
  40e098:	505a      	str	r2, [r3, r1]
  40e09a:	f010 ff7d 	bl	41ef98 <__malloc_unlock>

0040e09e <.LVL44>:
  40e09e:	9b01      	ldr	r3, [sp, #4]
  40e0a0:	f103 0408 	add.w	r4, r3, #8

0040e0a4 <.LVL45>:
  40e0a4:	e01e      	b.n	40e0e4 <.LVL58>

0040e0a6 <.LVL46>:
  40e0a6:	2910      	cmp	r1, #16
  40e0a8:	d820      	bhi.n	40e0ec <.LCFI3>
  40e0aa:	f010 f953 	bl	41e354 <.LFE141>

0040e0ae <.LVL47>:
  40e0ae:	2610      	movs	r6, #16

0040e0b0 <.LVL48>:
  40e0b0:	2318      	movs	r3, #24
  40e0b2:	2002      	movs	r0, #2

0040e0b4 <.LVL49>:
  40e0b4:	4f73      	ldr	r7, [pc, #460]	; (40e284 <.LCFI11+0x18>)
  40e0b6:	443b      	add	r3, r7

0040e0b8 <.LVL50>:
  40e0b8:	f1a3 0208 	sub.w	r2, r3, #8

0040e0bc <.LVL51>:
  40e0bc:	685c      	ldr	r4, [r3, #4]

0040e0be <.LVL52>:
  40e0be:	4294      	cmp	r4, r2
  40e0c0:	f000 8131 	beq.w	40e326 <.LVL119>

0040e0c4 <.LVL53>:
  40e0c4:	6863      	ldr	r3, [r4, #4]
  40e0c6:	68e1      	ldr	r1, [r4, #12]
  40e0c8:	68a6      	ldr	r6, [r4, #8]
  40e0ca:	f023 0303 	bic.w	r3, r3, #3

0040e0ce <.LVL54>:
  40e0ce:	4423      	add	r3, r4

0040e0d0 <.LVL55>:
  40e0d0:	4628      	mov	r0, r5
  40e0d2:	685a      	ldr	r2, [r3, #4]
  40e0d4:	60f1      	str	r1, [r6, #12]
  40e0d6:	f042 0201 	orr.w	r2, r2, #1
  40e0da:	608e      	str	r6, [r1, #8]
  40e0dc:	605a      	str	r2, [r3, #4]

0040e0de <.LVL56>:
  40e0de:	f010 ff5b 	bl	41ef98 <__malloc_unlock>

0040e0e2 <.LVL57>:
  40e0e2:	3408      	adds	r4, #8

0040e0e4 <.LVL58>:
  40e0e4:	4620      	mov	r0, r4
  40e0e6:	b003      	add	sp, #12

0040e0e8 <.LCFI2>:
  40e0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040e0ec <.LCFI3>:
  40e0ec:	2400      	movs	r4, #0
  40e0ee:	230c      	movs	r3, #12
  40e0f0:	4620      	mov	r0, r4

0040e0f2 <.LVL60>:
  40e0f2:	602b      	str	r3, [r5, #0]
  40e0f4:	b003      	add	sp, #12

0040e0f6 <.LCFI4>:
  40e0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040e0fa <.LCFI5>:
  40e0fa:	2040      	movs	r0, #64	; 0x40
  40e0fc:	f44f 7300 	mov.w	r3, #512	; 0x200
  40e100:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40e104:	e74a      	b.n	40df9c <.LVL4>

0040e106 <.LVL62>:
  40e106:	4423      	add	r3, r4

0040e108 <.LVL63>:
  40e108:	68e1      	ldr	r1, [r4, #12]

0040e10a <.LVL64>:
  40e10a:	685a      	ldr	r2, [r3, #4]

0040e10c <.LVL65>:
  40e10c:	68a6      	ldr	r6, [r4, #8]

0040e10e <.LVL66>:
  40e10e:	f042 0201 	orr.w	r2, r2, #1
  40e112:	60f1      	str	r1, [r6, #12]
  40e114:	4628      	mov	r0, r5
  40e116:	608e      	str	r6, [r1, #8]
  40e118:	605a      	str	r2, [r3, #4]

0040e11a <.LVL67>:
  40e11a:	f010 ff3d 	bl	41ef98 <__malloc_unlock>

0040e11e <.LVL68>:
  40e11e:	3408      	adds	r4, #8

0040e120 <.LVL69>:
  40e120:	4620      	mov	r0, r4
  40e122:	b003      	add	sp, #12

0040e124 <.LCFI6>:
  40e124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040e128 <.LCFI7>:
  40e128:	4423      	add	r3, r4

0040e12a <.LVL71>:
  40e12a:	4628      	mov	r0, r5

0040e12c <.LVL72>:
  40e12c:	685a      	ldr	r2, [r3, #4]

0040e12e <.LVL73>:
  40e12e:	f042 0201 	orr.w	r2, r2, #1
  40e132:	605a      	str	r2, [r3, #4]

0040e134 <.LVL74>:
  40e134:	f010 ff30 	bl	41ef98 <__malloc_unlock>

0040e138 <.LVL75>:
  40e138:	3408      	adds	r4, #8

0040e13a <.LVL76>:
  40e13a:	4620      	mov	r0, r4
  40e13c:	b003      	add	sp, #12

0040e13e <.LCFI8>:
  40e13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040e142 <.LCFI9>:
  40e142:	68bc      	ldr	r4, [r7, #8]

0040e144 <.LVL78>:
  40e144:	6863      	ldr	r3, [r4, #4]
  40e146:	f023 0a03 	bic.w	sl, r3, #3
  40e14a:	45b2      	cmp	sl, r6
  40e14c:	d303      	bcc.n	40e156 <.LBB4>
  40e14e:	ebaa 0306 	sub.w	r3, sl, r6
  40e152:	2b0f      	cmp	r3, #15
  40e154:	dc7a      	bgt.n	40e24c <.LBE4>

0040e156 <.LBB4>:
  40e156:	4b4c      	ldr	r3, [pc, #304]	; (40e288 <.LCFI11+0x1c>)
  40e158:	4a4c      	ldr	r2, [pc, #304]	; (40e28c <.LCFI11+0x20>)
  40e15a:	9301      	str	r3, [sp, #4]
  40e15c:	6811      	ldr	r1, [r2, #0]
  40e15e:	681a      	ldr	r2, [r3, #0]
  40e160:	eb06 0801 	add.w	r8, r6, r1
  40e164:	3201      	adds	r2, #1
  40e166:	bf16      	itet	ne
  40e168:	f108 088f 	addne.w	r8, r8, #143	; 0x8f
  40e16c:	f108 0810 	addeq.w	r8, r8, #16
  40e170:	f028 087f 	bicne.w	r8, r8, #127	; 0x7f
  40e174:	4641      	mov	r1, r8
  40e176:	4628      	mov	r0, r5
  40e178:	f010 f994 	bl	41e4a4 <.LFE91>

0040e17c <.LVL80>:
  40e17c:	f1b0 3fff 	cmp.w	r0, #4294967295
  40e180:	eb04 0b0a 	add.w	fp, r4, sl

0040e184 <.LVL81>:
  40e184:	4681      	mov	r9, r0

0040e186 <.LVL82>:
  40e186:	9b01      	ldr	r3, [sp, #4]
  40e188:	f000 80f1 	beq.w	40e36e <.LBB10+0x4>
  40e18c:	4583      	cmp	fp, r0
  40e18e:	f200 80ec 	bhi.w	40e36a <.LBB10>
  40e192:	4a3f      	ldr	r2, [pc, #252]	; (40e290 <.LCFI11+0x24>)
  40e194:	6811      	ldr	r1, [r2, #0]
  40e196:	4441      	add	r1, r8
  40e198:	6011      	str	r1, [r2, #0]
  40e19a:	f000 8147 	beq.w	40e42c <.LBB12+0xa>

0040e19e <.LVL83>:
  40e19e:	6818      	ldr	r0, [r3, #0]

0040e1a0 <.LVL84>:
  40e1a0:	9201      	str	r2, [sp, #4]
  40e1a2:	3001      	adds	r0, #1
  40e1a4:	bf1b      	ittet	ne
  40e1a6:	eba9 0b0b 	subne.w	fp, r9, fp

0040e1aa <.LVL85>:
  40e1aa:	4459      	addne	r1, fp
  40e1ac:	f8c3 9000 	streq.w	r9, [r3]
  40e1b0:	6011      	strne	r1, [r2, #0]
  40e1b2:	f019 0107 	ands.w	r1, r9, #7

0040e1b6 <.LVL86>:
  40e1b6:	bf1c      	itt	ne
  40e1b8:	f1c1 0308 	rsbne	r3, r1, #8
  40e1bc:	4499      	addne	r9, r3

0040e1be <.LVL87>:
  40e1be:	eb09 0308 	add.w	r3, r9, r8
  40e1c2:	bf14      	ite	ne
  40e1c4:	f1c1 0188 	rsbne	r1, r1, #136	; 0x88

0040e1c8 <.LVL88>:
  40e1c8:	2180      	moveq	r1, #128	; 0x80
  40e1ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  40e1ce:	eba1 0803 	sub.w	r8, r1, r3

0040e1d2 <.LVL89>:
  40e1d2:	4641      	mov	r1, r8
  40e1d4:	4628      	mov	r0, r5
  40e1d6:	f010 f965 	bl	41e4a4 <.LFE91>

0040e1da <.LVL90>:
  40e1da:	1c43      	adds	r3, r0, #1
  40e1dc:	9a01      	ldr	r2, [sp, #4]
  40e1de:	f000 813f 	beq.w	40e460 <.LVL167>
  40e1e2:	eba0 0309 	sub.w	r3, r0, r9
  40e1e6:	4443      	add	r3, r8
  40e1e8:	f043 0301 	orr.w	r3, r3, #1

0040e1ec <.LVL91>:
  40e1ec:	6811      	ldr	r1, [r2, #0]
  40e1ee:	f8c7 9008 	str.w	r9, [r7, #8]
  40e1f2:	4441      	add	r1, r8
  40e1f4:	42bc      	cmp	r4, r7
  40e1f6:	f8c9 3004 	str.w	r3, [r9, #4]
  40e1fa:	6011      	str	r1, [r2, #0]
  40e1fc:	d017      	beq.n	40e22e <.LVL94>
  40e1fe:	f1ba 0f0f 	cmp.w	sl, #15
  40e202:	f240 80ee 	bls.w	40e3e2 <.LBB11>
  40e206:	6860      	ldr	r0, [r4, #4]
  40e208:	f1aa 030c 	sub.w	r3, sl, #12
  40e20c:	f023 0307 	bic.w	r3, r3, #7

0040e210 <.LVL93>:
  40e210:	eb04 0e03 	add.w	lr, r4, r3
  40e214:	f000 0001 	and.w	r0, r0, #1
  40e218:	f04f 0c05 	mov.w	ip, #5
  40e21c:	4318      	orrs	r0, r3
  40e21e:	2b0f      	cmp	r3, #15
  40e220:	6060      	str	r0, [r4, #4]
  40e222:	f8ce c004 	str.w	ip, [lr, #4]
  40e226:	f8ce c008 	str.w	ip, [lr, #8]
  40e22a:	f200 8110 	bhi.w	40e44e <.LBB13>

0040e22e <.LVL94>:
  40e22e:	4b19      	ldr	r3, [pc, #100]	; (40e294 <.LCFI11+0x28>)
  40e230:	68bc      	ldr	r4, [r7, #8]

0040e232 <.LVL95>:
  40e232:	681a      	ldr	r2, [r3, #0]
  40e234:	4291      	cmp	r1, r2
  40e236:	bf88      	it	hi
  40e238:	6019      	strhi	r1, [r3, #0]
  40e23a:	4b17      	ldr	r3, [pc, #92]	; (40e298 <.LCFI11+0x2c>)
  40e23c:	681a      	ldr	r2, [r3, #0]
  40e23e:	4291      	cmp	r1, r2
  40e240:	6862      	ldr	r2, [r4, #4]
  40e242:	bf88      	it	hi
  40e244:	6019      	strhi	r1, [r3, #0]
  40e246:	f022 0203 	bic.w	r2, r2, #3
  40e24a:	e094      	b.n	40e376 <.LBE10>

0040e24c <.LBE4>:
  40e24c:	19a2      	adds	r2, r4, r6
  40e24e:	f043 0301 	orr.w	r3, r3, #1

0040e252 <.LVL97>:
  40e252:	f046 0601 	orr.w	r6, r6, #1
  40e256:	6066      	str	r6, [r4, #4]
  40e258:	4628      	mov	r0, r5
  40e25a:	60ba      	str	r2, [r7, #8]

0040e25c <.LVL98>:
  40e25c:	6053      	str	r3, [r2, #4]
  40e25e:	f010 fe9b 	bl	41ef98 <__malloc_unlock>

0040e262 <.LVL99>:
  40e262:	3408      	adds	r4, #8
  40e264:	4620      	mov	r0, r4
  40e266:	b003      	add	sp, #12

0040e268 <.LCFI10>:
  40e268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040e26c <.LCFI11>:
  40e26c:	2b14      	cmp	r3, #20
  40e26e:	d970      	bls.n	40e352 <.LVL130>
  40e270:	2b54      	cmp	r3, #84	; 0x54
  40e272:	f200 80ac 	bhi.w	40e3ce <.LVL150>
  40e276:	0b33      	lsrs	r3, r6, #12
  40e278:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40e27c:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40e280:	00c3      	lsls	r3, r0, #3
  40e282:	e68b      	b.n	40df9c <.LVL4>
  40e284:	20416c80 	.word	0x20416c80
  40e288:	2041789c 	.word	0x2041789c
  40e28c:	20417898 	.word	0x20417898
  40e290:	204176c0 	.word	0x204176c0
  40e294:	20417890 	.word	0x20417890
  40e298:	20417894 	.word	0x20417894
  40e29c:	20416c88 	.word	0x20416c88

0040e2a0 <.LVL101>:
  40e2a0:	0a5a      	lsrs	r2, r3, #9

0040e2a2 <.LVL102>:
  40e2a2:	2a04      	cmp	r2, #4
  40e2a4:	d95b      	bls.n	40e35e <.LVL131>
  40e2a6:	2a14      	cmp	r2, #20
  40e2a8:	f200 80b3 	bhi.w	40e412 <.LVL159>
  40e2ac:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40e2b0:	00c9      	lsls	r1, r1, #3
  40e2b2:	325b      	adds	r2, #91	; 0x5b

0040e2b4 <.LVL103>:
  40e2b4:	eb07 0c01 	add.w	ip, r7, r1
  40e2b8:	5879      	ldr	r1, [r7, r1]
  40e2ba:	f1ac 0c08 	sub.w	ip, ip, #8

0040e2be <.LVL104>:
  40e2be:	458c      	cmp	ip, r1
  40e2c0:	f000 8093 	beq.w	40e3ea <.LBE11>

0040e2c4 <.LVL105>:
  40e2c4:	684a      	ldr	r2, [r1, #4]
  40e2c6:	f022 0203 	bic.w	r2, r2, #3
  40e2ca:	4293      	cmp	r3, r2
  40e2cc:	d27d      	bcs.n	40e3ca <.LVL148>
  40e2ce:	6889      	ldr	r1, [r1, #8]
  40e2d0:	458c      	cmp	ip, r1
  40e2d2:	d1f7      	bne.n	40e2c4 <.LVL105>

0040e2d4 <.LVL107>:
  40e2d4:	f8dc 200c 	ldr.w	r2, [ip, #12]

0040e2d8 <.LVL108>:
  40e2d8:	687b      	ldr	r3, [r7, #4]

0040e2da <.LVL109>:
  40e2da:	60e2      	str	r2, [r4, #12]
  40e2dc:	f8c4 c008 	str.w	ip, [r4, #8]
  40e2e0:	6094      	str	r4, [r2, #8]
  40e2e2:	f8cc 400c 	str.w	r4, [ip, #12]
  40e2e6:	e69b      	b.n	40e020 <.LVL24>

0040e2e8 <.LVL110>:
  40e2e8:	19a1      	adds	r1, r4, r6

0040e2ea <.LVL111>:
  40e2ea:	f046 0c01 	orr.w	ip, r6, #1
  40e2ee:	f042 0601 	orr.w	r6, r2, #1
  40e2f2:	f8c4 c004 	str.w	ip, [r4, #4]
  40e2f6:	4628      	mov	r0, r5

0040e2f8 <.LVL112>:
  40e2f8:	6179      	str	r1, [r7, #20]
  40e2fa:	6139      	str	r1, [r7, #16]
  40e2fc:	f8c1 e00c 	str.w	lr, [r1, #12]
  40e300:	f8c1 e008 	str.w	lr, [r1, #8]
  40e304:	604e      	str	r6, [r1, #4]
  40e306:	50e2      	str	r2, [r4, r3]
  40e308:	f010 fe46 	bl	41ef98 <__malloc_unlock>

0040e30c <.LVL113>:
  40e30c:	3408      	adds	r4, #8

0040e30e <.LVL114>:
  40e30e:	e6e9      	b.n	40e0e4 <.LVL58>

0040e310 <.LVL115>:
  40e310:	687b      	ldr	r3, [r7, #4]
  40e312:	e685      	b.n	40e020 <.LVL24>

0040e314 <.LVL116>:
  40e314:	f108 0801 	add.w	r8, r8, #1

0040e318 <.LVL117>:
  40e318:	f018 0f03 	tst.w	r8, #3
  40e31c:	f10c 0c08 	add.w	ip, ip, #8

0040e320 <.LVL118>:
  40e320:	f47f ae91 	bne.w	40e046 <.LVL32>
  40e324:	e037      	b.n	40e396 <.LVL140>

0040e326 <.LVL119>:
  40e326:	68dc      	ldr	r4, [r3, #12]
  40e328:	42a3      	cmp	r3, r4
  40e32a:	bf08      	it	eq
  40e32c:	3002      	addeq	r0, #2
  40e32e:	f43f ae4a 	beq.w	40dfc6 <.LVL14>
  40e332:	e6c7      	b.n	40e0c4 <.LVL53>

0040e334 <.LVL121>:
  40e334:	4419      	add	r1, r3

0040e336 <.LVL122>:
  40e336:	461c      	mov	r4, r3

0040e338 <.LVL123>:
  40e338:	684a      	ldr	r2, [r1, #4]

0040e33a <.LVL124>:
  40e33a:	68db      	ldr	r3, [r3, #12]

0040e33c <.LVL125>:
  40e33c:	f854 6f08 	ldr.w	r6, [r4, #8]!

0040e340 <.LVL126>:
  40e340:	f042 0201 	orr.w	r2, r2, #1
  40e344:	604a      	str	r2, [r1, #4]

0040e346 <.LVL127>:
  40e346:	4628      	mov	r0, r5

0040e348 <.LVL128>:
  40e348:	60f3      	str	r3, [r6, #12]
  40e34a:	609e      	str	r6, [r3, #8]
  40e34c:	f010 fe24 	bl	41ef98 <__malloc_unlock>

0040e350 <.LVL129>:
  40e350:	e6c8      	b.n	40e0e4 <.LVL58>

0040e352 <.LVL130>:
  40e352:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40e356:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40e35a:	00c3      	lsls	r3, r0, #3
  40e35c:	e61e      	b.n	40df9c <.LVL4>

0040e35e <.LVL131>:
  40e35e:	099a      	lsrs	r2, r3, #6
  40e360:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40e364:	00c9      	lsls	r1, r1, #3
  40e366:	3238      	adds	r2, #56	; 0x38
  40e368:	e7a4      	b.n	40e2b4 <.LVL103>

0040e36a <.LBB10>:
  40e36a:	42bc      	cmp	r4, r7
  40e36c:	d059      	beq.n	40e422 <.LBB12>
  40e36e:	68bc      	ldr	r4, [r7, #8]

0040e370 <.LVL133>:
  40e370:	6862      	ldr	r2, [r4, #4]
  40e372:	f022 0203 	bic.w	r2, r2, #3

0040e376 <.LBE10>:
  40e376:	4296      	cmp	r6, r2
  40e378:	eba2 0306 	sub.w	r3, r2, r6

0040e37c <.LVL135>:
  40e37c:	d802      	bhi.n	40e384 <.LVL136>
  40e37e:	2b0f      	cmp	r3, #15
  40e380:	f73f af64 	bgt.w	40e24c <.LBE4>

0040e384 <.LVL136>:
  40e384:	4628      	mov	r0, r5
  40e386:	f010 fe07 	bl	41ef98 <__malloc_unlock>

0040e38a <.LVL137>:
  40e38a:	2400      	movs	r4, #0
  40e38c:	e6aa      	b.n	40e0e4 <.LVL58>

0040e38e <.LVL138>:
  40e38e:	f859 3908 	ldr.w	r3, [r9], #-8

0040e392 <.LVL139>:
  40e392:	4599      	cmp	r9, r3
  40e394:	d17f      	bne.n	40e496 <.LVL170>

0040e396 <.LVL140>:
  40e396:	f010 0f03 	tst.w	r0, #3
  40e39a:	f100 30ff 	add.w	r0, r0, #4294967295
  40e39e:	d1f6      	bne.n	40e38e <.LVL138>
  40e3a0:	687b      	ldr	r3, [r7, #4]
  40e3a2:	ea23 0304 	bic.w	r3, r3, r4
  40e3a6:	607b      	str	r3, [r7, #4]

0040e3a8 <.LVL142>:
  40e3a8:	0064      	lsls	r4, r4, #1
  40e3aa:	429c      	cmp	r4, r3
  40e3ac:	f63f aec9 	bhi.w	40e142 <.LCFI9>
  40e3b0:	2c00      	cmp	r4, #0
  40e3b2:	f43f aec6 	beq.w	40e142 <.LCFI9>
  40e3b6:	421c      	tst	r4, r3
  40e3b8:	4640      	mov	r0, r8

0040e3ba <.LVL144>:
  40e3ba:	f47f ae40 	bne.w	40e03e <.LVL30>

0040e3be <.LVL145>:
  40e3be:	0064      	lsls	r4, r4, #1

0040e3c0 <.LVL146>:
  40e3c0:	421c      	tst	r4, r3
  40e3c2:	f100 0004 	add.w	r0, r0, #4

0040e3c6 <.LVL147>:
  40e3c6:	d0fa      	beq.n	40e3be <.LVL145>
  40e3c8:	e639      	b.n	40e03e <.LVL30>

0040e3ca <.LVL148>:
  40e3ca:	468c      	mov	ip, r1

0040e3cc <.LVL149>:
  40e3cc:	e782      	b.n	40e2d4 <.LVL107>

0040e3ce <.LVL150>:
  40e3ce:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40e3d2:	d813      	bhi.n	40e3fc <.LVL158>
  40e3d4:	0bf3      	lsrs	r3, r6, #15
  40e3d6:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40e3da:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40e3de:	00c3      	lsls	r3, r0, #3
  40e3e0:	e5dc      	b.n	40df9c <.LVL4>

0040e3e2 <.LBB11>:
  40e3e2:	2301      	movs	r3, #1
  40e3e4:	f8c9 3004 	str.w	r3, [r9, #4]

0040e3e8 <.LVL152>:
  40e3e8:	e7cc      	b.n	40e384 <.LVL136>

0040e3ea <.LBE11>:
  40e3ea:	687b      	ldr	r3, [r7, #4]

0040e3ec <.LVL154>:
  40e3ec:	1092      	asrs	r2, r2, #2

0040e3ee <.LVL155>:
  40e3ee:	2101      	movs	r1, #1

0040e3f0 <.LVL156>:
  40e3f0:	fa01 f202 	lsl.w	r2, r1, r2
  40e3f4:	4313      	orrs	r3, r2
  40e3f6:	607b      	str	r3, [r7, #4]

0040e3f8 <.LVL157>:
  40e3f8:	4662      	mov	r2, ip
  40e3fa:	e76e      	b.n	40e2da <.LVL109>

0040e3fc <.LVL158>:
  40e3fc:	f240 5254 	movw	r2, #1364	; 0x554
  40e400:	4293      	cmp	r3, r2
  40e402:	d81e      	bhi.n	40e442 <.LBE12>
  40e404:	0cb3      	lsrs	r3, r6, #18
  40e406:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40e40a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40e40e:	00c3      	lsls	r3, r0, #3
  40e410:	e5c4      	b.n	40df9c <.LVL4>

0040e412 <.LVL159>:
  40e412:	2a54      	cmp	r2, #84	; 0x54
  40e414:	d828      	bhi.n	40e468 <.LBE13>
  40e416:	0b1a      	lsrs	r2, r3, #12
  40e418:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40e41c:	00c9      	lsls	r1, r1, #3
  40e41e:	326e      	adds	r2, #110	; 0x6e
  40e420:	e748      	b.n	40e2b4 <.LVL103>

0040e422 <.LBB12>:
  40e422:	4a20      	ldr	r2, [pc, #128]	; (40e4a4 <.LVL171+0xa>)
  40e424:	6811      	ldr	r1, [r2, #0]
  40e426:	4441      	add	r1, r8
  40e428:	6011      	str	r1, [r2, #0]
  40e42a:	e6b8      	b.n	40e19e <.LVL83>
  40e42c:	f01b 0f7f 	tst.w	fp, #127	; 0x7f
  40e430:	f47f aeb5 	bne.w	40e19e <.LVL83>

0040e434 <.LVL161>:
  40e434:	eb0a 0308 	add.w	r3, sl, r8

0040e438 <.LVL162>:
  40e438:	68ba      	ldr	r2, [r7, #8]
  40e43a:	f043 0301 	orr.w	r3, r3, #1

0040e43e <.LVL163>:
  40e43e:	6053      	str	r3, [r2, #4]
  40e440:	e6f5      	b.n	40e22e <.LVL94>

0040e442 <.LBE12>:
  40e442:	207f      	movs	r0, #127	; 0x7f
  40e444:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40e448:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40e44c:	e5a6      	b.n	40df9c <.LVL4>

0040e44e <.LBB13>:
  40e44e:	f104 0108 	add.w	r1, r4, #8
  40e452:	4628      	mov	r0, r5
  40e454:	9201      	str	r2, [sp, #4]
  40e456:	f007 f927 	bl	4156a8 <_free_r>

0040e45a <.LVL166>:
  40e45a:	9a01      	ldr	r2, [sp, #4]
  40e45c:	6811      	ldr	r1, [r2, #0]
  40e45e:	e6e6      	b.n	40e22e <.LVL94>

0040e460 <.LVL167>:
  40e460:	2301      	movs	r3, #1

0040e462 <.LVL168>:
  40e462:	f04f 0800 	mov.w	r8, #0
  40e466:	e6c1      	b.n	40e1ec <.LVL91>

0040e468 <.LBE13>:
  40e468:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40e46c:	d805      	bhi.n	40e47a <.LBE13+0x12>
  40e46e:	0bda      	lsrs	r2, r3, #15
  40e470:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40e474:	00c9      	lsls	r1, r1, #3
  40e476:	3277      	adds	r2, #119	; 0x77
  40e478:	e71c      	b.n	40e2b4 <.LVL103>
  40e47a:	f240 5154 	movw	r1, #1364	; 0x554
  40e47e:	428a      	cmp	r2, r1
  40e480:	d805      	bhi.n	40e48e <.LBE13+0x26>
  40e482:	0c9a      	lsrs	r2, r3, #18
  40e484:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40e488:	00c9      	lsls	r1, r1, #3
  40e48a:	327c      	adds	r2, #124	; 0x7c
  40e48c:	e712      	b.n	40e2b4 <.LVL103>
  40e48e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40e492:	227e      	movs	r2, #126	; 0x7e
  40e494:	e70e      	b.n	40e2b4 <.LVL103>

0040e496 <.LVL170>:
  40e496:	687b      	ldr	r3, [r7, #4]
  40e498:	e786      	b.n	40e3a8 <.LVL142>

0040e49a <.LVL171>:
  40e49a:	08f0      	lsrs	r0, r6, #3
  40e49c:	f106 0308 	add.w	r3, r6, #8
  40e4a0:	e608      	b.n	40e0b4 <.LVL49>
  40e4a2:	bf00      	nop
  40e4a4:	204176c0 	.word	0x204176c0

Disassembly of section .rodata.client_key_der_2048%75:

0040e4a8 <client_key_der_2048>:
  40e4a8:	a4048230 02000102 00010182 2bd103c3     0..............+
  40e4b8:	32a439fe c8533b45 7c2a2b84 aabd9a74     .9.2E;S..+*|t...
  40e4c8:	4707522a b236a6d6 d08e3207 c67b69ba     *R.G..6..2...i{.
  40e4d8:	d49e44c3 2dfd4881 678ba268 c875a1bb     .D...H.-h..g..u.
  40e4e8:	d24a2c36 ba8bf71b eff90dcf 1e81f1ec     6,J.............
  40e4f8:	47039b7b cc65bf9a 6924657f 8914e8a6     {..G..e..e$i....
  40e508:	f734e45b 9314b0c5 3a7b67f5 01e1787a     [.4......g{:zx..
  40e518:	a6915656 d28d4213 4c9c403c df86d1ef     VV...B..<@.L....
  40e528:	0c1b5137 f1f53ba1 e4354aa3 df96cee1     7Q...;...J5.....
  40e538:	4ebf7e1b e810d097 813008a8 430b20af     .~.N......0.. .C
  40e548:	6774c514 6f8232b4 88c2868d 83369940     ..tg.2.o....@.6.
  40e558:	72401eba 52d71722 b0732465 cd19efce     ..@r"..Re$s.....
  40e568:	6c78ffae 0312c07b 0d724ed4 a33b6d50     ..xl{....Nr.Pm;.
  40e578:	5e99a33b 0cd9c89d 8ad9b385 db2654d9     ;..^.........T&.
  40e588:	bbacfa6d c44c25ff 71f479d1 184086d3     m....%L..y.q..@.
  40e598:	b563b013 c4304e72 2d868497 15d72f56     ..c.rN0....-V/..
  40e5a8:	aec07ff7 e55bfcf5 d3baa1fb 00010302     ......[.........
  40e5b8:	01820201 e6a20001 71105fd8 2e9e0864     ........._.qd...
  40e5c8:	1e6dd16d b10ad285 2cce478c 12a06a51     m.m......G.,Qj..
  40e5d8:	91de539e ea6d1d4c 77f27b59 d9c6d9aa     .S..L.m.Y{.w....
  40e5e8:	e1d8ab8a 2663e416 136cb5ff a5e3b859     ......c&..l.Y...
  40e5f8:	2e1772c8 e56f9f0c 6f763f59 c211b149     .r....o.Y?voI...
  40e608:	29162e5a 8eb7de0d a2d540dc a11ee0ee     Z..).....@......
  40e618:	db97bef4 14966386 600998cd 9c76302d     .....c.....`-0v.
  40e628:	88e6cd3c 799247ee e2005a0b 7c115f5e     <....G.y.Z..^_.|
  40e638:	b708f97d 2a890620 ab00fd5d b3f0e122     }... ..*]..."...
  40e648:	5ea924bc 001f0e26 9a21fe2d d36d5b53     .$.^&...-.!.S[m.
  40e658:	8294ab2b d8364368 22c62ff6 5d41b5fc     +...hC6../."..A]
  40e668:	ea60330d e87e7da4 5691554b 8f575cd3     .3`..}~.KU.V.\W.
  40e678:	2f17941f 9ee9deaa 8acff4a8 e4a08e4c     .../........L...
  40e688:	cfb27356 69c5864f 2024f33c 0c965c8b     Vs..O..i<.$ .\..
  40e698:	3b126bfa dfc1679a a5b296c6 9b0d92d5     .k.;.g..........
  40e6a8:	24684209 50d44510 483917e4 948b35d0     .Bh$.E.P..9H.5..
  40e6b8:	8fde116d 810259ca 24ea0081 3369f9a7     m....Y.....$..i3
  40e6c8:	52dc71e9 2821887d bade492f cce91672     .q.R}.!(/I..r...
  40e6d8:	0d887a47 58845794 b0813a16 a6cfa23f     Gz...W.X.:..?...
  40e6e8:	06b01e6c e78f0029 dbac7677 5ed9c7ca     l...)...wv.....^
  40e6f8:	90263f9b 38fcae52 bb140090 94580fb4     .?&.R..8......X.
  40e708:	7e6a2fe7 21414f1c 1f5931d4 8d1a8a4e     ./j~.OA!.1Y.N...
  40e718:	226c57a7 7ef4e5d8 cb10a632 0355a564     .Wl"...~2...d.U.
  40e728:	0527a687 b6d7c38c ba4db227 8f47da30     ..'.....'.M.0.G.
  40e738:	8b3dd354 98948d84 8102a558 38d50081     T.=.....X......8
  40e748:	c58fc31b 0b470c93 c592356f c8468db0     ......G.o5....F.
  40e758:	f58f1892 eff70a80 b980fea1 caba2ab5     .............*..
  40e768:	a55db018 8d93d007 1c049cd8 a68e62d4     ..]..........b..
  40e778:	ff018126 632a8ace aa403534 89de806d     &.....*c45@.m...
  40e788:	4d576a23 93ad6e9e 0b90564e 8b739d6d     #jWM.n..NV..m.s.
  40e798:	3d27ae0c aaf04ede 67786cc5 9c52946c     ..'=.N...lxgl.R.
  40e7a8:	2d6c6737 dfafbbef c43c90a6 968dcf47     7gl-......<.G...
  40e7b8:	b4a9989e 50a6c59f fbf0b3dc 81021774     .......P....t...
  40e7c8:	09835e80 7cbabd62 7442bfa2 d21c7cf5     .^..b..|..Bt.|..
  40e7d8:	0d04c969 3d3e7e85 18c31224 f329f37b     i....~>=$...{.).
  40e7e8:	6c760e5f 41e47559 329d6984 ab22cdf3     _.vlYu.A.i.2..".
  40e7f8:	4aba35b0 d9e53cb2 4f62b658 9ee5de5d     .5.J.<..X.bO]...
  40e808:	b253ca0a b39ef72c 795b0a6b 916eec65     ..S.,...k.[ye.n.
  40e818:	f620924e ed16fcfc e20c76d3 69b27fec     N. ......v.....i
  40e828:	0e786b13 b464465a a025b75e 4b3a755a     .kx.ZFd.^.%.Zu:K
  40e838:	3e3cc7ef b826fdf7 0a99c420 c3be739a     ..<>..&. ....s..
  40e848:	81810219 9344ba00 1934ac14 60915f3b     ......D...4.;_.`
  40e858:	d6b4f7ac 51360581 65e83d53 dc2eafdc     ......6QS=.e....
  40e868:	7dc93e61 f0877fb8 82039b3b 72ce3729     a>.}....;...)7.r
  40e878:	b1d5114e a0070cc1 8d4a9199 cf79ec7f     N.........J...y.
  40e888:	e9b539f1 f762ec85 64bc7dda 0e3c224d     .9....b..}.dM"<.
  40e898:	f551d6f2 c099d887 0f5d2011 e25bfd29     ..Q...... ].).[.
  40e8a8:	d91cd9ae fc6d5621 ed5fd084 181c1510     ....!Vm..._.....
  40e8b8:	3dc4e721 9ed0d74b 22cf956a 9e7b03c9     !..=K...j.."..{.
  40e8c8:	fc0160e3 8081022f cf4bd011 9fb9671b     .`../.....K..g..
  40e8d8:	86477510 c231ae65 59ac30c6 0fd95006     .uG.e.1..0.Y.P..
  40e8e8:	f70670b5 62c8d3f0 6edaa87c d33f21f6     .p.....b|..n.!?.
  40e8f8:	8aea5f7f 2ad93fab d251f35e e33730c2     ._...?.*^.Q..07.
  40e908:	0d75a32d 34214d1e 5c7057d5 ec72bf89     -.u..M!4.Wp\..r.
  40e918:	d5686e4a 337418cd 453a8c4e 4096e68f     Jnh...t3N.:E...@
  40e928:	19f963eb dd513a86 f3b04b89 285d9ff9     .c...:Q..K....](
  40e938:	35be3895 e75ccaab a1345393 39135d45     .8.5..\..S4.E].9
  40e948:	a1464265 bff5cd9f                       eBF.....

Disassembly of section .text.APP_Tasks%76:

0040e950 <APP_Tasks>:

  Remarks:
    See prototype in app.h.
 */

void APP_Tasks(void) {
  40e950:	b510      	push	{r4, lr}

0040e952 <.LCFI70>:

    /* Check the application's current state. */
    switch (appData.state) {
  40e952:	4b63      	ldr	r3, [pc, #396]	; (40eae0 <.LVL197+0xa>)
  40e954:	781b      	ldrb	r3, [r3, #0]
  40e956:	2b14      	cmp	r3, #20
  40e958:	f200 8206 	bhi.w	40ed68 <.LVL218+0x6>
  40e95c:	e8df f013 	tbh	[pc, r3, lsl #1]
  40e960:	00190015 	.word	0x00190015
  40e964:	002d0023 	.word	0x002d0023
  40e968:	003d0037 	.word	0x003d0037
  40e96c:	00510047 	.word	0x00510047
  40e970:	0065005b 	.word	0x0065005b
  40e974:	00a1006f 	.word	0x00a1006f
  40e978:	008d00ab 	.word	0x008d00ab
  40e97c:	007900b5 	.word	0x007900b5
  40e980:	00970083 	.word	0x00970083
  40e984:	020400c4 	.word	0x020400c4
  40e988:	01b2      	.short	0x01b2
            /* Show Hyperterminal is working using available output functions */
            // SYS_MESSAGE("SYS_MESSAGE:" "\r\n Application created " __DATE__ " " __TIME__ " initialized!\r\n");            
            // SYS_DEBUG(SYS_ERROR_INFO,"SYS_DEBUG:" "\r\n Application created " __DATE__ " " __TIME__ " initialized!\r\n");
            // SYS_CONSOLE_Write(SYS_CONSOLE_INDEX_0, STDOUT_FILENO, msgBuffer, strlen(msgBuffer));            

            appData.state = APP_STATE_TEST_MD5;
  40e98a:	2201      	movs	r2, #1
  40e98c:	4b54      	ldr	r3, [pc, #336]	; (40eae0 <.LVL197+0xa>)
  40e98e:	701a      	strb	r2, [r3, #0]
            break;
  40e990:	bd10      	pop	{r4, pc}
        }

        case APP_STATE_TEST_MD5:
#ifndef NO_MD5
            testCount++;
  40e992:	4a54      	ldr	r2, [pc, #336]	; (40eae4 <.LVL197+0xe>)
  40e994:	6813      	ldr	r3, [r2, #0]
  40e996:	3301      	adds	r3, #1
  40e998:	6013      	str	r3, [r2, #0]
            md5_test();
  40e99a:	f00b f85f 	bl	419a5c <md5_test>

0040e99e <.LVL181>:
#endif
            appData.state = APP_STATE_TEST_SHA;
  40e99e:	2202      	movs	r2, #2
  40e9a0:	4b4f      	ldr	r3, [pc, #316]	; (40eae0 <.LVL197+0xa>)
  40e9a2:	701a      	strb	r2, [r3, #0]
            break;
  40e9a4:	bd10      	pop	{r4, pc}


         case APP_STATE_TEST_SHA:
#ifndef NO_SHA
            testCount++;
  40e9a6:	4a4f      	ldr	r2, [pc, #316]	; (40eae4 <.LVL197+0xe>)
  40e9a8:	6813      	ldr	r3, [r2, #0]
  40e9aa:	3301      	adds	r3, #1
  40e9ac:	6013      	str	r3, [r2, #0]
            sha_test();
  40e9ae:	f00a fe89 	bl	4196c4 <sha_test>

0040e9b2 <.LVL182>:
#endif
            appData.state = APP_STATE_TEST_SHA256;
  40e9b2:	2203      	movs	r2, #3
  40e9b4:	4b4a      	ldr	r3, [pc, #296]	; (40eae0 <.LVL197+0xa>)
  40e9b6:	701a      	strb	r2, [r3, #0]
            break;
  40e9b8:	bd10      	pop	{r4, pc}

         case APP_STATE_TEST_SHA256:
#ifndef NO_SHA256
            testCount++;
  40e9ba:	4a4a      	ldr	r2, [pc, #296]	; (40eae4 <.LVL197+0xe>)
  40e9bc:	6813      	ldr	r3, [r2, #0]
  40e9be:	3301      	adds	r3, #1
  40e9c0:	6013      	str	r3, [r2, #0]
            sha256_test();
  40e9c2:	f00c f821 	bl	41aa08 <.LFE2>

0040e9c6 <.LVL183>:
#endif
            appData.state = APP_STATE_TEST_SHA384;
  40e9c6:	2204      	movs	r2, #4
  40e9c8:	4b45      	ldr	r3, [pc, #276]	; (40eae0 <.LVL197+0xa>)
  40e9ca:	701a      	strb	r2, [r3, #0]
            break;
  40e9cc:	bd10      	pop	{r4, pc}
            
        case APP_STATE_TEST_SHA384:
#ifdef WOLFSSL_SHA384
            sha384_test();
  40e9ce:	f00c fed5 	bl	41b77c <.LFE52>

0040e9d2 <.LVL184>:
#endif
            appData.state = APP_STATE_TEST_SHA512;
  40e9d2:	2205      	movs	r2, #5
  40e9d4:	4b42      	ldr	r3, [pc, #264]	; (40eae0 <.LVL197+0xa>)
  40e9d6:	701a      	strb	r2, [r3, #0]
            break;
  40e9d8:	bd10      	pop	{r4, pc}

        case APP_STATE_TEST_SHA512:
#ifdef WOLFSSL_SHA512
            testCount++;
  40e9da:	4a42      	ldr	r2, [pc, #264]	; (40eae4 <.LVL197+0xe>)
  40e9dc:	6813      	ldr	r3, [r2, #0]
  40e9de:	3301      	adds	r3, #1
  40e9e0:	6013      	str	r3, [r2, #0]
            sha512_test();
  40e9e2:	f00c ff09 	bl	41b7f8 <.LFE157>

0040e9e6 <.LVL185>:
#endif
            appData.state = APP_STATE_TEST_HMAC_MD5;
  40e9e6:	2206      	movs	r2, #6
  40e9e8:	4b3d      	ldr	r3, [pc, #244]	; (40eae0 <.LVL197+0xa>)
  40e9ea:	701a      	strb	r2, [r3, #0]
            break;
  40e9ec:	bd10      	pop	{r4, pc}
  
        case APP_STATE_TEST_HMAC_MD5:
#if !defined(NO_HMAC) && !defined(NO_MD5)
            testCount++;
  40e9ee:	4a3d      	ldr	r2, [pc, #244]	; (40eae4 <.LVL197+0xe>)
  40e9f0:	6813      	ldr	r3, [r2, #0]
  40e9f2:	3301      	adds	r3, #1
  40e9f4:	6013      	str	r3, [r2, #0]
            hmac_md5_test();
  40e9f6:	f009 ff6f 	bl	4188d8 <.LFE211>

0040e9fa <.LVL186>:
#endif
            appData.state = APP_STATE_TEST_HMAC_SHA;
  40e9fa:	2207      	movs	r2, #7
  40e9fc:	4b38      	ldr	r3, [pc, #224]	; (40eae0 <.LVL197+0xa>)
  40e9fe:	701a      	strb	r2, [r3, #0]
            break;
  40ea00:	bd10      	pop	{r4, pc}
            
        case APP_STATE_TEST_HMAC_SHA:
#if !defined(NO_HMAC) && !defined(NO_SHA)
            testCount++;
  40ea02:	4a38      	ldr	r2, [pc, #224]	; (40eae4 <.LVL197+0xe>)
  40ea04:	6813      	ldr	r3, [r2, #0]
  40ea06:	3301      	adds	r3, #1
  40ea08:	6013      	str	r3, [r2, #0]
            hmac_sha_test();
  40ea0a:	f009 ffcb 	bl	4189a4 <.LFE159>

0040ea0e <.LVL187>:
#endif
            appData.state = APP_STATE_TEST_HMAC_SHA256;
  40ea0e:	2208      	movs	r2, #8
  40ea10:	4b33      	ldr	r3, [pc, #204]	; (40eae0 <.LVL197+0xa>)
  40ea12:	701a      	strb	r2, [r3, #0]
            break;
  40ea14:	bd10      	pop	{r4, pc}
             
        case APP_STATE_TEST_HMAC_SHA256:
#if !defined(NO_HMAC) && !defined(NO_SHA256)
            testCount++;
  40ea16:	4a33      	ldr	r2, [pc, #204]	; (40eae4 <.LVL197+0xe>)
  40ea18:	6813      	ldr	r3, [r2, #0]
  40ea1a:	3301      	adds	r3, #1
  40ea1c:	6013      	str	r3, [r2, #0]
            hmac_sha256_test();
  40ea1e:	f00a f827 	bl	418a70 <.LFE160>

0040ea22 <.LVL188>:
#endif
            appData.state = APP_STATE_TEST_HMAC_SHA384;
  40ea22:	2209      	movs	r2, #9
  40ea24:	4b2e      	ldr	r3, [pc, #184]	; (40eae0 <.LVL197+0xa>)
  40ea26:	701a      	strb	r2, [r3, #0]
            break;
  40ea28:	bd10      	pop	{r4, pc}
              
        case APP_STATE_TEST_HMAC_SHA384:
#if !defined(NO_HMAC) && defined(WOLFSSL_SHA384)
            testCount++;
  40ea2a:	4a2e      	ldr	r2, [pc, #184]	; (40eae4 <.LVL197+0xe>)
  40ea2c:	6813      	ldr	r3, [r2, #0]
  40ea2e:	3301      	adds	r3, #1
  40ea30:	6013      	str	r3, [r2, #0]
            hmac_sha384_test();
  40ea32:	f00a f883 	bl	418b3c <.LFE161>

0040ea36 <.LVL189>:
#endif
            appData.state = APP_STATE_TEST_HMAC_SHA512;
  40ea36:	220a      	movs	r2, #10
  40ea38:	4b29      	ldr	r3, [pc, #164]	; (40eae0 <.LVL197+0xa>)
  40ea3a:	701a      	strb	r2, [r3, #0]
            break;
  40ea3c:	bd10      	pop	{r4, pc}
              
        case APP_STATE_TEST_HMAC_SHA512:
#if !defined(NO_HMAC) && defined(WOLFSSL_SHA512)
            testCount++;
  40ea3e:	4a29      	ldr	r2, [pc, #164]	; (40eae4 <.LVL197+0xe>)
  40ea40:	6813      	ldr	r3, [r2, #0]
  40ea42:	3301      	adds	r3, #1
  40ea44:	6013      	str	r3, [r2, #0]
            hmac_sha512_test();
  40ea46:	f00a f9ab 	bl	418da0 <.LFE161>

0040ea4a <.LVL190>:
#endif
            appData.state = APP_STATE_TEST_RANDOM;
  40ea4a:	220f      	movs	r2, #15
  40ea4c:	4b24      	ldr	r3, [pc, #144]	; (40eae0 <.LVL197+0xa>)
  40ea4e:	701a      	strb	r2, [r3, #0]
            break;
  40ea50:	bd10      	pop	{r4, pc}
            
        case APP_STATE_TEST_RANDOM:
#ifndef NO_RNG_TEST
            testCount++;
  40ea52:	4a24      	ldr	r2, [pc, #144]	; (40eae4 <.LVL197+0xe>)
  40ea54:	6813      	ldr	r3, [r2, #0]
  40ea56:	3301      	adds	r3, #1
  40ea58:	6013      	str	r3, [r2, #0]
            random_test();
  40ea5a:	f00f f835 	bl	41dac8 <random_test>

0040ea5e <.LVL191>:
#endif
            appData.state = APP_STATE_TEST_ECC;
  40ea5e:	2210      	movs	r2, #16
  40ea60:	4b1f      	ldr	r3, [pc, #124]	; (40eae0 <.LVL197+0xa>)
  40ea62:	701a      	strb	r2, [r3, #0]
            break;
  40ea64:	bd10      	pop	{r4, pc}
			
        case APP_STATE_TEST_ECC:
#ifdef HAVE_ECC
            testCount++;
  40ea66:	4a1f      	ldr	r2, [pc, #124]	; (40eae4 <.LVL197+0xe>)
  40ea68:	6813      	ldr	r3, [r2, #0]
  40ea6a:	3301      	adds	r3, #1
  40ea6c:	6013      	str	r3, [r2, #0]
            ecc_test();
  40ea6e:	f005 fc07 	bl	414280 <ecc_test>

0040ea72 <.LVL192>:
#endif
            appData.state = APP_STATE_TEST_AES;
  40ea72:	220d      	movs	r2, #13
  40ea74:	4b1a      	ldr	r3, [pc, #104]	; (40eae0 <.LVL197+0xa>)
  40ea76:	701a      	strb	r2, [r3, #0]
            break;
  40ea78:	bd10      	pop	{r4, pc}
                          
        case APP_STATE_TEST_AES:
#ifndef NO_AES
            testCount++;
  40ea7a:	4a1a      	ldr	r2, [pc, #104]	; (40eae4 <.LVL197+0xe>)
  40ea7c:	6813      	ldr	r3, [r2, #0]
  40ea7e:	3301      	adds	r3, #1
  40ea80:	6013      	str	r3, [r2, #0]
            aes_test();
  40ea82:	f007 f967 	bl	415d54 <.LFE173>

0040ea86 <.LVL193>:
#endif
            appData.state = APP_STATE_TEST_COMPRESS;
  40ea86:	2211      	movs	r2, #17
  40ea88:	4b15      	ldr	r3, [pc, #84]	; (40eae0 <.LVL197+0xa>)
  40ea8a:	701a      	strb	r2, [r3, #0]
            break;
  40ea8c:	bd10      	pop	{r4, pc}
                
        case APP_STATE_TEST_COMPRESS:
#ifdef HAVE_LIBZ
            testCount++;
  40ea8e:	4a15      	ldr	r2, [pc, #84]	; (40eae4 <.LVL197+0xe>)
  40ea90:	6813      	ldr	r3, [r2, #0]
  40ea92:	3301      	adds	r3, #1
  40ea94:	6013      	str	r3, [r2, #0]
            compress_test();
  40ea96:	f00a fc99 	bl	4193cc <.LBE77>

0040ea9a <.LVL194>:
#endif
            appData.state = APP_STATE_TEST_DES;
  40ea9a:	220b      	movs	r2, #11
  40ea9c:	4b10      	ldr	r3, [pc, #64]	; (40eae0 <.LVL197+0xa>)
  40ea9e:	701a      	strb	r2, [r3, #0]
            break;
  40eaa0:	bd10      	pop	{r4, pc}
              
        case APP_STATE_TEST_DES:
#ifndef NO_DES3
            testCount++;
  40eaa2:	4a10      	ldr	r2, [pc, #64]	; (40eae4 <.LVL197+0xe>)
  40eaa4:	6813      	ldr	r3, [r2, #0]
  40eaa6:	3301      	adds	r3, #1
  40eaa8:	6013      	str	r3, [r2, #0]
            des_test();
  40eaaa:	f00a fb09 	bl	4190c0 <des_test>

0040eaae <.LVL195>:
#endif
            appData.state = APP_STATE_TEST_DES3;
  40eaae:	220c      	movs	r2, #12
  40eab0:	4b0b      	ldr	r3, [pc, #44]	; (40eae0 <.LVL197+0xa>)
  40eab2:	701a      	strb	r2, [r3, #0]
            break;
  40eab4:	bd10      	pop	{r4, pc}
 
        case APP_STATE_TEST_DES3:
#ifndef NO_DES3
            testCount++;
  40eab6:	4a0b      	ldr	r2, [pc, #44]	; (40eae4 <.LVL197+0xe>)
  40eab8:	6813      	ldr	r3, [r2, #0]
  40eaba:	3301      	adds	r3, #1
  40eabc:	6013      	str	r3, [r2, #0]
            des3_test();
  40eabe:	f009 f9c7 	bl	417e50 <.LFE172>

0040eac2 <.LVL196>:
#endif
            appData.state = APP_STATE_TEST_RSA;
  40eac2:	220e      	movs	r2, #14
  40eac4:	4b06      	ldr	r3, [pc, #24]	; (40eae0 <.LVL197+0xa>)
  40eac6:	701a      	strb	r2, [r3, #0]
            break;
  40eac8:	bd10      	pop	{r4, pc}
        
        case APP_STATE_TEST_RSA:
#ifndef NO_RSA
            testCount++;
  40eaca:	4a06      	ldr	r2, [pc, #24]	; (40eae4 <.LVL197+0xe>)
  40eacc:	6813      	ldr	r3, [r2, #0]
  40eace:	3301      	adds	r3, #1
  40ead0:	6013      	str	r3, [r2, #0]
            rsa_test();
  40ead2:	f007 fb75 	bl	4161c0 <.LFE45>

0040ead6 <.LVL197>:
#endif
            appData.state = APP_STATE_DISPLAY_RESULTS;
  40ead6:	2212      	movs	r2, #18
  40ead8:	4b01      	ldr	r3, [pc, #4]	; (40eae0 <.LVL197+0xa>)
  40eada:	701a      	strb	r2, [r3, #0]
            break;
  40eadc:	bd10      	pop	{r4, pc}
  40eade:	bf00      	nop
  40eae0:	20417598 	.word	0x20417598
  40eae4:	20417880 	.word	0x20417880
                      
        case APP_STATE_DISPLAY_RESULTS:
#ifndef NO_MD5
            sprintf(printBuffer, "%s\n\rMD5 test:          %s", 
                    printBuffer, (appData.md5_test_result==expectedResult?"Pass":"Fail"));
  40eae8:	4ba0      	ldr	r3, [pc, #640]	; (40ed6c <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rMD5 test:          %s", 
  40eaea:	685b      	ldr	r3, [r3, #4]
  40eaec:	2b00      	cmp	r3, #0
  40eaee:	4aa0      	ldr	r2, [pc, #640]	; (40ed70 <.LVL218+0xe>)
  40eaf0:	f1a2 0308 	sub.w	r3, r2, #8
  40eaf4:	bf18      	it	ne
  40eaf6:	4613      	movne	r3, r2
  40eaf8:	489e      	ldr	r0, [pc, #632]	; (40ed74 <.LVL218+0x12>)
  40eafa:	4602      	mov	r2, r0
  40eafc:	499e      	ldr	r1, [pc, #632]	; (40ed78 <.LVL218+0x16>)
  40eafe:	f00e fb7f 	bl	41d200 <.LFE157>

0040eb02 <.LVL198>:
#endif

#ifndef NO_SHA
            sprintf(printBuffer, "%s\n\rSHA test:          %s", 
                    printBuffer, (appData.sha_test_result==expectedResult?"Pass":"Fail"));
  40eb02:	4b9a      	ldr	r3, [pc, #616]	; (40ed6c <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rSHA test:          %s", 
  40eb04:	689b      	ldr	r3, [r3, #8]
  40eb06:	2b00      	cmp	r3, #0
  40eb08:	4a99      	ldr	r2, [pc, #612]	; (40ed70 <.LVL218+0xe>)
  40eb0a:	f1a2 0308 	sub.w	r3, r2, #8
  40eb0e:	bf18      	it	ne
  40eb10:	4613      	movne	r3, r2
  40eb12:	4898      	ldr	r0, [pc, #608]	; (40ed74 <.LVL218+0x12>)
  40eb14:	4602      	mov	r2, r0
  40eb16:	4999      	ldr	r1, [pc, #612]	; (40ed7c <.LVL218+0x1a>)
  40eb18:	f00e fb72 	bl	41d200 <.LFE157>

0040eb1c <.LVL199>:
#endif

#ifndef NO_SHA256
            sprintf(printBuffer, "%s\n\rSHA256 test:       %s", 
                    printBuffer, (appData.sha256_test_result==expectedResult?"Pass":"Fail"));
  40eb1c:	4b93      	ldr	r3, [pc, #588]	; (40ed6c <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rSHA256 test:       %s", 
  40eb1e:	68db      	ldr	r3, [r3, #12]
  40eb20:	2b00      	cmp	r3, #0
  40eb22:	4a93      	ldr	r2, [pc, #588]	; (40ed70 <.LVL218+0xe>)
  40eb24:	f1a2 0308 	sub.w	r3, r2, #8
  40eb28:	bf18      	it	ne
  40eb2a:	4613      	movne	r3, r2
  40eb2c:	4891      	ldr	r0, [pc, #580]	; (40ed74 <.LVL218+0x12>)
  40eb2e:	4602      	mov	r2, r0
  40eb30:	4993      	ldr	r1, [pc, #588]	; (40ed80 <.LVL218+0x1e>)
  40eb32:	f00e fb65 	bl	41d200 <.LFE157>

0040eb36 <.LVL200>:
#endif

#ifdef WOLFSSL_SHA384
            sprintf(printBuffer, "%s\n\rSHA384 test:       %s", 
                    printBuffer, (appData.sha384_test_result==expectedResult?"Pass":"Fail"));
  40eb36:	4b8d      	ldr	r3, [pc, #564]	; (40ed6c <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rSHA384 test:       %s", 
  40eb38:	691b      	ldr	r3, [r3, #16]
  40eb3a:	2b00      	cmp	r3, #0
  40eb3c:	4a8c      	ldr	r2, [pc, #560]	; (40ed70 <.LVL218+0xe>)
  40eb3e:	f1a2 0308 	sub.w	r3, r2, #8
  40eb42:	bf18      	it	ne
  40eb44:	4613      	movne	r3, r2
  40eb46:	488b      	ldr	r0, [pc, #556]	; (40ed74 <.LVL218+0x12>)
  40eb48:	4602      	mov	r2, r0
  40eb4a:	498e      	ldr	r1, [pc, #568]	; (40ed84 <.LVL218+0x22>)
  40eb4c:	f00e fb58 	bl	41d200 <.LFE157>

0040eb50 <.LVL201>:
#endif

#ifdef WOLFSSL_SHA512
            sprintf(printBuffer, "%s\n\rSHA512 test:       %s", 
                    printBuffer, (appData.sha512_test_result==expectedResult?"Pass":"Fail"));
  40eb50:	4b86      	ldr	r3, [pc, #536]	; (40ed6c <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rSHA512 test:       %s", 
  40eb52:	695b      	ldr	r3, [r3, #20]
  40eb54:	2b00      	cmp	r3, #0
  40eb56:	4a86      	ldr	r2, [pc, #536]	; (40ed70 <.LVL218+0xe>)
  40eb58:	f1a2 0308 	sub.w	r3, r2, #8
  40eb5c:	bf18      	it	ne
  40eb5e:	4613      	movne	r3, r2
  40eb60:	4884      	ldr	r0, [pc, #528]	; (40ed74 <.LVL218+0x12>)
  40eb62:	4602      	mov	r2, r0
  40eb64:	4988      	ldr	r1, [pc, #544]	; (40ed88 <.LVL218+0x26>)
  40eb66:	f00e fb4b 	bl	41d200 <.LFE157>

0040eb6a <.LVL202>:
#endif

#if !defined(NO_HMAC) && !defined(NO_MD5)
            sprintf(printBuffer, "%s\n\rHMAC_MD5 test:     %s", 
                    printBuffer, (appData.hmac_md5_test_result==expectedResult?"Pass":"Fail"));
  40eb6a:	4b80      	ldr	r3, [pc, #512]	; (40ed6c <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rHMAC_MD5 test:     %s", 
  40eb6c:	699b      	ldr	r3, [r3, #24]
  40eb6e:	2b00      	cmp	r3, #0
  40eb70:	4a7f      	ldr	r2, [pc, #508]	; (40ed70 <.LVL218+0xe>)
  40eb72:	f1a2 0308 	sub.w	r3, r2, #8
  40eb76:	bf18      	it	ne
  40eb78:	4613      	movne	r3, r2
  40eb7a:	487e      	ldr	r0, [pc, #504]	; (40ed74 <.LVL218+0x12>)
  40eb7c:	4602      	mov	r2, r0
  40eb7e:	4983      	ldr	r1, [pc, #524]	; (40ed8c <.LVL218+0x2a>)
  40eb80:	f00e fb3e 	bl	41d200 <.LFE157>

0040eb84 <.LVL203>:
#endif

#if !defined(NO_HMAC) && !defined(NO_SHA)
            sprintf(printBuffer, "%s\n\rHMAC_SHA test:     %s", 
                    printBuffer, (appData.hmac_sha_test_result==expectedResult?"Pass":"Fail"));
  40eb84:	4b79      	ldr	r3, [pc, #484]	; (40ed6c <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rHMAC_SHA test:     %s", 
  40eb86:	69db      	ldr	r3, [r3, #28]
  40eb88:	2b00      	cmp	r3, #0
  40eb8a:	4a79      	ldr	r2, [pc, #484]	; (40ed70 <.LVL218+0xe>)
  40eb8c:	f1a2 0308 	sub.w	r3, r2, #8
  40eb90:	bf18      	it	ne
  40eb92:	4613      	movne	r3, r2
  40eb94:	4877      	ldr	r0, [pc, #476]	; (40ed74 <.LVL218+0x12>)
  40eb96:	4602      	mov	r2, r0
  40eb98:	497d      	ldr	r1, [pc, #500]	; (40ed90 <.LVL218+0x2e>)
  40eb9a:	f00e fb31 	bl	41d200 <.LFE157>

0040eb9e <.LVL204>:
#endif

#if !defined(NO_HMAC) && !defined(NO_SHA256)
            sprintf(printBuffer, "%s\n\rHMAC_SHA256 test:  %s", 
                    printBuffer, (appData.hmac_sha256_test_result==expectedResult?"Pass":"Fail"));
  40eb9e:	4b73      	ldr	r3, [pc, #460]	; (40ed6c <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rHMAC_SHA256 test:  %s", 
  40eba0:	6a1b      	ldr	r3, [r3, #32]
  40eba2:	2b00      	cmp	r3, #0
  40eba4:	4a72      	ldr	r2, [pc, #456]	; (40ed70 <.LVL218+0xe>)
  40eba6:	f1a2 0308 	sub.w	r3, r2, #8
  40ebaa:	bf18      	it	ne
  40ebac:	4613      	movne	r3, r2
  40ebae:	4871      	ldr	r0, [pc, #452]	; (40ed74 <.LVL218+0x12>)
  40ebb0:	4602      	mov	r2, r0
  40ebb2:	4978      	ldr	r1, [pc, #480]	; (40ed94 <.LVL218+0x32>)
  40ebb4:	f00e fb24 	bl	41d200 <.LFE157>

0040ebb8 <.LVL205>:
#endif

#if !defined(NO_HMAC) && defined(WOLFSSL_SHA384)
            sprintf(printBuffer, "%s\n\rHMAC_SHA384 test:  %s", 
                    printBuffer, (appData.hmac_sha384_test_result==expectedResult?"Pass":"Fail"));
  40ebb8:	4b6c      	ldr	r3, [pc, #432]	; (40ed6c <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rHMAC_SHA384 test:  %s", 
  40ebba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40ebbc:	2b00      	cmp	r3, #0
  40ebbe:	4a6c      	ldr	r2, [pc, #432]	; (40ed70 <.LVL218+0xe>)
  40ebc0:	f1a2 0308 	sub.w	r3, r2, #8
  40ebc4:	bf18      	it	ne
  40ebc6:	4613      	movne	r3, r2
  40ebc8:	486a      	ldr	r0, [pc, #424]	; (40ed74 <.LVL218+0x12>)
  40ebca:	4602      	mov	r2, r0
  40ebcc:	4972      	ldr	r1, [pc, #456]	; (40ed98 <.LVL218+0x36>)
  40ebce:	f00e fb17 	bl	41d200 <.LFE157>

0040ebd2 <.LVL206>:
#endif

#if !defined(NO_HMAC) && defined(WOLFSSL_SHA512)
            sprintf(printBuffer, "%s\n\rHMAC_SHA512 test:  %s", 
                    printBuffer, (appData.hmac_sha512_test_result==expectedResult?"Pass":"Fail"));
  40ebd2:	4b66      	ldr	r3, [pc, #408]	; (40ed6c <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rHMAC_SHA512 test:  %s", 
  40ebd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40ebd6:	2b00      	cmp	r3, #0
  40ebd8:	4a65      	ldr	r2, [pc, #404]	; (40ed70 <.LVL218+0xe>)
  40ebda:	f1a2 0308 	sub.w	r3, r2, #8
  40ebde:	bf18      	it	ne
  40ebe0:	4613      	movne	r3, r2
  40ebe2:	4864      	ldr	r0, [pc, #400]	; (40ed74 <.LVL218+0x12>)
  40ebe4:	4602      	mov	r2, r0
  40ebe6:	496d      	ldr	r1, [pc, #436]	; (40ed9c <.LVL218+0x3a>)
  40ebe8:	f00e fb0a 	bl	41d200 <.LFE157>

0040ebec <.LVL207>:
#endif

#ifdef HAVE_ECC
            sprintf(printBuffer, "%s\n\rECC test:          %s", 
                    printBuffer, (appData.ecc_test_result==expectedResult?"Pass":"Fail"));
  40ebec:	4b5f      	ldr	r3, [pc, #380]	; (40ed6c <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rECC test:          %s", 
  40ebee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  40ebf0:	2b00      	cmp	r3, #0
  40ebf2:	4a5f      	ldr	r2, [pc, #380]	; (40ed70 <.LVL218+0xe>)
  40ebf4:	f1a2 0308 	sub.w	r3, r2, #8
  40ebf8:	bf18      	it	ne
  40ebfa:	4613      	movne	r3, r2
  40ebfc:	485d      	ldr	r0, [pc, #372]	; (40ed74 <.LVL218+0x12>)
  40ebfe:	4602      	mov	r2, r0
  40ec00:	4967      	ldr	r1, [pc, #412]	; (40eda0 <.LVL218+0x3e>)
  40ec02:	f00e fafd 	bl	41d200 <.LFE157>

0040ec06 <.LVL208>:
#endif
#ifndef NO_RNG_TEST
            sprintf(printBuffer, "%s\n\rRANDOM test:       %s", 
                    printBuffer, (appData.random_test_result==expectedResult?"Pass":"Fail"));
  40ec06:	4b59      	ldr	r3, [pc, #356]	; (40ed6c <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rRANDOM test:       %s", 
  40ec08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40ec0a:	2b00      	cmp	r3, #0
  40ec0c:	4a58      	ldr	r2, [pc, #352]	; (40ed70 <.LVL218+0xe>)
  40ec0e:	f1a2 0308 	sub.w	r3, r2, #8
  40ec12:	bf18      	it	ne
  40ec14:	4613      	movne	r3, r2
  40ec16:	4857      	ldr	r0, [pc, #348]	; (40ed74 <.LVL218+0x12>)
  40ec18:	4602      	mov	r2, r0
  40ec1a:	4962      	ldr	r1, [pc, #392]	; (40eda4 <.LVL218+0x42>)
  40ec1c:	f00e faf0 	bl	41d200 <.LFE157>

0040ec20 <.LVL209>:
#endif
#ifndef NO_AES
            sprintf(printBuffer, "%s\n\rAES CBC test:      %s", 
                    printBuffer, (appData.aes_cbc_test_result==expectedResult?"Pass":"Fail"));
  40ec20:	4b52      	ldr	r3, [pc, #328]	; (40ed6c <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rAES CBC test:      %s", 
  40ec22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40ec24:	2b00      	cmp	r3, #0
  40ec26:	4a52      	ldr	r2, [pc, #328]	; (40ed70 <.LVL218+0xe>)
  40ec28:	f1a2 0308 	sub.w	r3, r2, #8
  40ec2c:	bf18      	it	ne
  40ec2e:	4613      	movne	r3, r2
  40ec30:	4850      	ldr	r0, [pc, #320]	; (40ed74 <.LVL218+0x12>)
  40ec32:	4602      	mov	r2, r0
  40ec34:	495c      	ldr	r1, [pc, #368]	; (40eda8 <.LVL218+0x46>)
  40ec36:	f00e fae3 	bl	41d200 <.LFE157>

0040ec3a <.LVL210>:
#ifdef WOLFSSL_AES_COUNTER
            sprintf(printBuffer, "%s\n\rAES CTR test:      %s", 
                     printBuffer, (appData.aes_ctr_test_result==expectedResult?"Pass":"Fail"));
  40ec3a:	4b4c      	ldr	r3, [pc, #304]	; (40ed6c <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rAES CTR test:      %s", 
  40ec3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  40ec3e:	2b00      	cmp	r3, #0
  40ec40:	4a4b      	ldr	r2, [pc, #300]	; (40ed70 <.LVL218+0xe>)
  40ec42:	f1a2 0308 	sub.w	r3, r2, #8
  40ec46:	bf18      	it	ne
  40ec48:	4613      	movne	r3, r2
  40ec4a:	484a      	ldr	r0, [pc, #296]	; (40ed74 <.LVL218+0x12>)
  40ec4c:	4602      	mov	r2, r0
  40ec4e:	4957      	ldr	r1, [pc, #348]	; (40edac <.LVL218+0x4a>)
  40ec50:	f00e fad6 	bl	41d200 <.LFE157>

0040ec54 <.LVL211>:
#endif                    
#endif

#ifdef HAVE_LIBZ
            sprintf(printBuffer, "%s\n\rCOMPRESS test:     %s", 
                    printBuffer, (appData.compress_test_result==expectedResult?"Pass":"Fail"));
  40ec54:	4b45      	ldr	r3, [pc, #276]	; (40ed6c <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rCOMPRESS test:     %s", 
  40ec56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  40ec58:	2b00      	cmp	r3, #0
  40ec5a:	4a45      	ldr	r2, [pc, #276]	; (40ed70 <.LVL218+0xe>)
  40ec5c:	f1a2 0308 	sub.w	r3, r2, #8
  40ec60:	bf18      	it	ne
  40ec62:	4613      	movne	r3, r2
  40ec64:	4843      	ldr	r0, [pc, #268]	; (40ed74 <.LVL218+0x12>)
  40ec66:	4602      	mov	r2, r0
  40ec68:	4951      	ldr	r1, [pc, #324]	; (40edb0 <.LVL218+0x4e>)
  40ec6a:	f00e fac9 	bl	41d200 <.LFE157>

0040ec6e <.LVL212>:
#endif

#ifndef NO_DES3
            sprintf(printBuffer, "%s\n\rDES test:          %s", 
                    printBuffer, (appData.des_test_result==expectedResult?"Pass":"Fail"));
  40ec6e:	4b3f      	ldr	r3, [pc, #252]	; (40ed6c <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rDES test:          %s", 
  40ec70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40ec72:	2b00      	cmp	r3, #0
  40ec74:	4a3e      	ldr	r2, [pc, #248]	; (40ed70 <.LVL218+0xe>)
  40ec76:	f1a2 0308 	sub.w	r3, r2, #8
  40ec7a:	bf18      	it	ne
  40ec7c:	4613      	movne	r3, r2
  40ec7e:	483d      	ldr	r0, [pc, #244]	; (40ed74 <.LVL218+0x12>)
  40ec80:	4602      	mov	r2, r0
  40ec82:	494c      	ldr	r1, [pc, #304]	; (40edb4 <.LVL218+0x52>)
  40ec84:	f00e fabc 	bl	41d200 <.LFE157>

0040ec88 <.LVL213>:
#endif

#ifndef NO_DES3
            sprintf(printBuffer, "%s\n\rDES3 test:         %s", 
                    printBuffer, (appData.des3_test_result==expectedResult?"Pass":"Fail"));
  40ec88:	4b38      	ldr	r3, [pc, #224]	; (40ed6c <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rDES3 test:         %s", 
  40ec8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40ec8c:	2b00      	cmp	r3, #0
  40ec8e:	4a38      	ldr	r2, [pc, #224]	; (40ed70 <.LVL218+0xe>)
  40ec90:	f1a2 0308 	sub.w	r3, r2, #8
  40ec94:	bf18      	it	ne
  40ec96:	4613      	movne	r3, r2
  40ec98:	4836      	ldr	r0, [pc, #216]	; (40ed74 <.LVL218+0x12>)
  40ec9a:	4602      	mov	r2, r0
  40ec9c:	4946      	ldr	r1, [pc, #280]	; (40edb8 <.LVL218+0x56>)
  40ec9e:	f00e faaf 	bl	41d200 <.LFE157>

0040eca2 <.LVL214>:
#endif

#ifndef NO_RSA
            sprintf(printBuffer, "%s\n\rRSA test:          %s", 
                    printBuffer, (appData.rsa_test_result==expectedResult?"Pass":"Fail"));
  40eca2:	4b32      	ldr	r3, [pc, #200]	; (40ed6c <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rRSA test:          %s", 
  40eca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  40eca6:	2b00      	cmp	r3, #0
  40eca8:	4a31      	ldr	r2, [pc, #196]	; (40ed70 <.LVL218+0xe>)
  40ecaa:	f1a2 0308 	sub.w	r3, r2, #8
  40ecae:	bf18      	it	ne
  40ecb0:	4613      	movne	r3, r2
  40ecb2:	4830      	ldr	r0, [pc, #192]	; (40ed74 <.LVL218+0x12>)
  40ecb4:	4602      	mov	r2, r0
  40ecb6:	4941      	ldr	r1, [pc, #260]	; (40edbc <.LVL218+0x5a>)
  40ecb8:	f00e faa2 	bl	41d200 <.LFE157>

0040ecbc <.LVL215>:
#endif

            appData.state = APP_STATE_CHECK_RESULTS;
  40ecbc:	2214      	movs	r2, #20
  40ecbe:	4b2b      	ldr	r3, [pc, #172]	; (40ed6c <.LVL218+0xa>)
  40ecc0:	701a      	strb	r2, [r3, #0]

            break;
  40ecc2:	bd10      	pop	{r4, pc}

        case APP_STATE_CHECK_RESULTS:
            if ( testCount == 0 ) {
  40ecc4:	4b3e      	ldr	r3, [pc, #248]	; (40edc0 <.LVL218+0x5e>)
  40ecc6:	681b      	ldr	r3, [r3, #0]
  40ecc8:	2b00      	cmp	r3, #0
  40ecca:	d07d      	beq.n	40edc8 <.LVL218+0x66>
                sprintf(printBuffer, "%s\n\rNo tests executed\n\r", printBuffer);
            }
            else if (
#ifndef NO_RNG_TEST
			    expectedResult != appData.random_test_result ||
  40eccc:	4b27      	ldr	r3, [pc, #156]	; (40ed6c <.LVL218+0xa>)
            else if (
  40ecce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40ecd0:	2b00      	cmp	r3, #0
  40ecd2:	d137      	bne.n	40ed44 <.LVL215+0x88>
#endif
#ifndef NO_MD5
                expectedResult != appData.md5_test_result || 
  40ecd4:	4b25      	ldr	r3, [pc, #148]	; (40ed6c <.LVL218+0xa>)
			    expectedResult != appData.random_test_result ||
  40ecd6:	685b      	ldr	r3, [r3, #4]
  40ecd8:	2b00      	cmp	r3, #0
  40ecda:	d133      	bne.n	40ed44 <.LVL215+0x88>
#endif
#ifndef NO_SHA                    
                expectedResult != appData.sha_test_result ||
  40ecdc:	4b23      	ldr	r3, [pc, #140]	; (40ed6c <.LVL218+0xa>)
                expectedResult != appData.md5_test_result || 
  40ecde:	689b      	ldr	r3, [r3, #8]
  40ece0:	2b00      	cmp	r3, #0
  40ece2:	d12f      	bne.n	40ed44 <.LVL215+0x88>
#endif
#ifndef NO_SHA256                    
                expectedResult != appData.sha256_test_result ||
  40ece4:	4b21      	ldr	r3, [pc, #132]	; (40ed6c <.LVL218+0xa>)
                expectedResult != appData.sha_test_result ||
  40ece6:	68db      	ldr	r3, [r3, #12]
  40ece8:	2b00      	cmp	r3, #0
  40ecea:	d12b      	bne.n	40ed44 <.LVL215+0x88>
#endif
#ifdef WOLFSSL_SHA384                    
                expectedResult != appData.sha384_test_result ||
  40ecec:	4b1f      	ldr	r3, [pc, #124]	; (40ed6c <.LVL218+0xa>)
                expectedResult != appData.sha256_test_result ||
  40ecee:	691b      	ldr	r3, [r3, #16]
  40ecf0:	2b00      	cmp	r3, #0
  40ecf2:	d127      	bne.n	40ed44 <.LVL215+0x88>
#endif
#ifdef WOLFSSL_SHA512                    
                expectedResult != appData.sha512_test_result ||
  40ecf4:	4b1d      	ldr	r3, [pc, #116]	; (40ed6c <.LVL218+0xa>)
                expectedResult != appData.sha384_test_result ||
  40ecf6:	695b      	ldr	r3, [r3, #20]
  40ecf8:	bb23      	cbnz	r3, 40ed44 <.LVL215+0x88>
#endif
#if !defined(NO_HMAC) && !defined(NO_MD5)                    
                expectedResult != appData.hmac_md5_test_result ||
  40ecfa:	4b1c      	ldr	r3, [pc, #112]	; (40ed6c <.LVL218+0xa>)
                expectedResult != appData.sha512_test_result ||
  40ecfc:	699b      	ldr	r3, [r3, #24]
  40ecfe:	bb0b      	cbnz	r3, 40ed44 <.LVL215+0x88>
#endif
#if !defined(NO_HMAC) && !defined(NO_SHA)                    
                expectedResult != appData.hmac_sha_test_result ||
  40ed00:	4b1a      	ldr	r3, [pc, #104]	; (40ed6c <.LVL218+0xa>)
                expectedResult != appData.hmac_md5_test_result ||
  40ed02:	69db      	ldr	r3, [r3, #28]
  40ed04:	b9f3      	cbnz	r3, 40ed44 <.LVL215+0x88>
#endif
#if !defined(NO_HMAC) && !defined(NO_SHA256)                    
                expectedResult != appData.hmac_sha256_test_result ||
  40ed06:	4b19      	ldr	r3, [pc, #100]	; (40ed6c <.LVL218+0xa>)
                expectedResult != appData.hmac_sha_test_result ||
  40ed08:	6a1b      	ldr	r3, [r3, #32]
  40ed0a:	b9db      	cbnz	r3, 40ed44 <.LVL215+0x88>
#endif
#if !defined(NO_HMAC) && defined(WOLFSSL_SHA384)                    
                expectedResult != appData.hmac_sha384_test_result ||
  40ed0c:	4b17      	ldr	r3, [pc, #92]	; (40ed6c <.LVL218+0xa>)
                expectedResult != appData.hmac_sha256_test_result ||
  40ed0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40ed10:	b9c3      	cbnz	r3, 40ed44 <.LVL215+0x88>
#endif
#if !defined(NO_HMAC) && defined(WOLFSSL_SHA512)                    
                expectedResult != appData.hmac_sha512_test_result ||
  40ed12:	4b16      	ldr	r3, [pc, #88]	; (40ed6c <.LVL218+0xa>)
                expectedResult != appData.hmac_sha384_test_result ||
  40ed14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40ed16:	b9ab      	cbnz	r3, 40ed44 <.LVL215+0x88>
#endif
#ifdef HAVE_ECC
                expectedResult != appData.ecc_test_result ||
  40ed18:	4b14      	ldr	r3, [pc, #80]	; (40ed6c <.LVL218+0xa>)
                expectedResult != appData.hmac_sha512_test_result ||
  40ed1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  40ed1c:	b993      	cbnz	r3, 40ed44 <.LVL215+0x88>
#endif
#ifndef NO_AES                   
                expectedResult != appData.aes_cbc_test_result ||
  40ed1e:	4b13      	ldr	r3, [pc, #76]	; (40ed6c <.LVL218+0xa>)
                expectedResult != appData.ecc_test_result ||
  40ed20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40ed22:	b97b      	cbnz	r3, 40ed44 <.LVL215+0x88>
#ifdef WOLFSSL_AES_COUNTER                    
                expectedResult != appData.aes_ctr_test_result ||
  40ed24:	4b11      	ldr	r3, [pc, #68]	; (40ed6c <.LVL218+0xa>)
                expectedResult != appData.aes_cbc_test_result ||
  40ed26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  40ed28:	b963      	cbnz	r3, 40ed44 <.LVL215+0x88>
#endif
#endif
#ifdef HAVE_LIBZ
                expectedResult != appData.compress_test_result ||
  40ed2a:	4b10      	ldr	r3, [pc, #64]	; (40ed6c <.LVL218+0xa>)
                expectedResult != appData.aes_ctr_test_result ||
  40ed2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  40ed2e:	b94b      	cbnz	r3, 40ed44 <.LVL215+0x88>
#endif
#ifndef NO_DES3                   
                expectedResult != appData.des_test_result ||
  40ed30:	4b0e      	ldr	r3, [pc, #56]	; (40ed6c <.LVL218+0xa>)
                expectedResult != appData.compress_test_result ||
  40ed32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40ed34:	b933      	cbnz	r3, 40ed44 <.LVL215+0x88>
                expectedResult != appData.des3_test_result ||
  40ed36:	4b0d      	ldr	r3, [pc, #52]	; (40ed6c <.LVL218+0xa>)
                expectedResult != appData.des_test_result ||
  40ed38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40ed3a:	b91b      	cbnz	r3, 40ed44 <.LVL215+0x88>
#endif
#ifndef NO_RSA
                expectedResult != appData.rsa_test_result ||
  40ed3c:	4b0b      	ldr	r3, [pc, #44]	; (40ed6c <.LVL218+0xa>)
  40ed3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  40ed40:	2b00      	cmp	r3, #0
  40ed42:	d047      	beq.n	40edd4 <.LVL219+0x2>
#endif
                expectedResult != dummy_test_result /* always false */
            ) 
            {
                /* We had an error during comparisons */
                sprintf(printBuffer, "%s\n\rOne or more tests failed\n\r", printBuffer);
  40ed44:	480b      	ldr	r0, [pc, #44]	; (40ed74 <.LVL218+0x12>)
  40ed46:	4602      	mov	r2, r0
  40ed48:	491e      	ldr	r1, [pc, #120]	; (40edc4 <.LVL218+0x62>)
  40ed4a:	f00e fa59 	bl	41d200 <.LFE157>

0040ed4e <.LVL216>:
            } else {
                sprintf(printBuffer, "%s\n\rAll tests passed\n\r", printBuffer);
            }
            SYS_CONSOLE_Write(SYS_CONSOLE_INDEX_0, STDOUT_FILENO, printBuffer, strlen(printBuffer));
  40ed4e:	4c09      	ldr	r4, [pc, #36]	; (40ed74 <.LVL218+0x12>)
  40ed50:	4620      	mov	r0, r4
  40ed52:	f009 fc15 	bl	418580 <strlen>

0040ed56 <.LVL217>:
  40ed56:	4603      	mov	r3, r0
  40ed58:	4622      	mov	r2, r4
  40ed5a:	2101      	movs	r1, #1
  40ed5c:	2000      	movs	r0, #0
  40ed5e:	f00f f8e5 	bl	41df2c <.LFE154>

0040ed62 <.LVL218>:
            appData.state = APP_SPIN;
  40ed62:	2215      	movs	r2, #21
  40ed64:	4b01      	ldr	r3, [pc, #4]	; (40ed6c <.LVL218+0xa>)
  40ed66:	701a      	strb	r2, [r3, #0]
  40ed68:	bd10      	pop	{r4, pc}
  40ed6a:	bf00      	nop
  40ed6c:	20417598 	.word	0x20417598
  40ed70:	0040b580 	.word	0x0040b580
  40ed74:	20400054 	.word	0x20400054
  40ed78:	0040b588 	.word	0x0040b588
  40ed7c:	0040b5a4 	.word	0x0040b5a4
  40ed80:	0040b5c0 	.word	0x0040b5c0
  40ed84:	0040b5dc 	.word	0x0040b5dc
  40ed88:	0040b5f8 	.word	0x0040b5f8
  40ed8c:	0040b614 	.word	0x0040b614
  40ed90:	0040b630 	.word	0x0040b630
  40ed94:	0040b64c 	.word	0x0040b64c
  40ed98:	0040b668 	.word	0x0040b668
  40ed9c:	0040b684 	.word	0x0040b684
  40eda0:	0040b6a0 	.word	0x0040b6a0
  40eda4:	0040b6bc 	.word	0x0040b6bc
  40eda8:	0040b6d8 	.word	0x0040b6d8
  40edac:	0040b6f4 	.word	0x0040b6f4
  40edb0:	0040b710 	.word	0x0040b710
  40edb4:	0040b72c 	.word	0x0040b72c
  40edb8:	0040b748 	.word	0x0040b748
  40edbc:	0040b764 	.word	0x0040b764
  40edc0:	20417880 	.word	0x20417880
  40edc4:	0040b798 	.word	0x0040b798
                sprintf(printBuffer, "%s\n\rNo tests executed\n\r", printBuffer);
  40edc8:	4805      	ldr	r0, [pc, #20]	; (40ede0 <.LVL220+0x2>)
  40edca:	4602      	mov	r2, r0
  40edcc:	4905      	ldr	r1, [pc, #20]	; (40ede4 <.LVL220+0x6>)
  40edce:	f00e fa17 	bl	41d200 <.LFE157>

0040edd2 <.LVL219>:
  40edd2:	e7bc      	b.n	40ed4e <.LVL216>
                sprintf(printBuffer, "%s\n\rAll tests passed\n\r", printBuffer);
  40edd4:	4802      	ldr	r0, [pc, #8]	; (40ede0 <.LVL220+0x2>)
  40edd6:	4602      	mov	r2, r0
  40edd8:	4903      	ldr	r1, [pc, #12]	; (40ede8 <.LVL220+0xa>)
  40edda:	f00e fa11 	bl	41d200 <.LFE157>

0040edde <.LVL220>:
  40edde:	e7b6      	b.n	40ed4e <.LVL216>
  40ede0:	20400054 	.word	0x20400054
  40ede4:	0040b780 	.word	0x0040b780
  40ede8:	0040b7b8 	.word	0x0040b7b8

Disassembly of section .rodata.client_cert_der_2048%77:

0040edec <client_cert_der_2048>:
  40edec:	98048230 80038230 010203a0 00090202     0...0...........
  40edfc:	be754a87 3dd86691 09060d30 8648862a     .Ju..f.=0...*.H.
  40ee0c:	01010df7 30000505 0b318e81 03060930     .......0..1.0...
  40ee1c:	13060455 31535502 060d300f 08045503     U....US1.0...U..
  40ee2c:	724f0613 6e6f6765 0f301131 04550306     ..Oregon1.0...U.
  40ee3c:	50081307 6c74726f 31646e61 060c300e     ...Portland1.0..
  40ee4c:	0a045503 61790513 314c5353 06123014     .U....yaSSL1.0..
  40ee5c:	0b045503 72500b13 6172676f 6e696d6d     .U....Programmin
  40ee6c:	30163167 55030614 0d130304 2e777777     g1.0...U....www.
  40ee7c:	73736179 6f632e6c 301d316d 2a09061b     yassl.com1.0...*
  40ee8c:	f7864886 0109010d 6e690e16 79406f66     .H........info@y
  40ee9c:	6c737361 6d6f632e 0d171e30 30313131     assl.com0...1110
  40eeac:	38313432 35353132 310d175a 32373034     24182155Z..14072
  40eebc:	32383130 5a353531 318e8130 0609300b     0182155Z0..1.0..
  40eecc:	06045503 53550213 0d300f31 04550306     .U....US1.0...U.
  40eedc:	4f061308 6f676572 3011316e 5503060f     ...Oregon1.0...U
  40eeec:	08130704 74726f50 646e616c 0c300e31     ....Portland1.0.
  40eefc:	04550306 7905130a 4c535361 12301431     ..U....yaSSL1.0.
  40ef0c:	04550306 500b130b 72676f72 696d6d61     ..U....Programmi
  40ef1c:	1631676e 03061430 13030455 7777770d     ng1.0...U....www
  40ef2c:	7361792e 632e6c73 1d316d6f 09061b30     .yassl.com1.0...
  40ef3c:	8648862a 09010df7 690e1601 406f666e     *.H........info@
  40ef4c:	73736179 6f632e6c 0182306d 060d3022     yassl.com0.."0..
  40ef5c:	48862a09 010df786 00050101 0f018203     .*.H............
  40ef6c:	01823000 0182020a 03c30001 39fe2bd1     .0...........+.9
  40ef7c:	3b4532a4 2b84c853 9a747c2a 522aaabd     .2E;S..+*|t...*R
  40ef8c:	a6d64707 3207b236 69bad08e 44c3c67b     .G..6..2...i{..D
  40ef9c:	4881d49e a2682dfd a1bb678b 2c36c875     ...H.-h..g..u.6,
  40efac:	f71bd24a 0dcfba8b f1eceff9 9b7b1e81     J.............{.
  40efbc:	bf9a4703 657fcc65 e8a66924 e45b8914     .G..e..e$i....[.
  40efcc:	b0c5f734 67f59314 787a3a7b 565601e1     4......g{:zx..VV
  40efdc:	4213a691 403cd28d d1ef4c9c 5137df86     ...B..<@.L....7Q
  40efec:	3ba10c1b 4aa3f1f5 cee1e435 7e1bdf96     ...;...J5......~
  40effc:	d0974ebf 08a8e810 20af8130 c514430b     .N......0.. .C..
  40f00c:	32b46774 868d6f82 994088c2 1eba8336     tg.2.o....@.6...
  40f01c:	17227240 246552d7 efceb073 ffaecd19     @r"..Re$s.......
  40f02c:	c07b6c78 4ed40312 6d500d72 a33ba33b     xl{....Nr.Pm;.;.
  40f03c:	c89d5e99 b3850cd9 54d98ad9 fa6ddb26     .^.........T&.m.
  40f04c:	25ffbbac 79d1c44c 86d371f4 b0131840     ...%L..y.q..@...
  40f05c:	4e72b563 8497c430 2f562d86 7ff715d7     c.rN0....-V/....
  40f06c:	fcf5aec0 a1fbe55b 0302d3ba a3010001     ....[...........
  40f07c:	8130f681 061d30f3 0e1d5503 14041604     ..0..0...U......
  40f08c:	6645d833 188768d7 700d547e 26c79127     3.Ef.h..~T.p'..&
  40f09c:	c06585d7 06c38130 231d5503 30bb8104     ..e.0....U.#...0
  40f0ac:	1480b881 6645d833 188768d7 700d547e     ....3.Ef.h..~T.p
  40f0bc:	26c79127 c06585d7 a49481a1 81309181     '..&..e.......0.
  40f0cc:	300b318e 55030609 02130604 0f315355     .1.0...U....US1.
  40f0dc:	03060d30 13080455 65724f06 316e6f67     0...U....Oregon1
  40f0ec:	060f3011 07045503 6f500813 616c7472     .0...U....Portla
  40f0fc:	0e31646e 03060c30 130a0455 53617905     nd1.0...U....yaS
  40f10c:	14314c53 03061230 130b0455 6f72500b     SL1.0...U....Pro
  40f11c:	6d617267 676e696d 14301631 04550306     gramming1.0...U.
  40f12c:	770d1303 792e7777 6c737361 6d6f632e     ...www.yassl.com
  40f13c:	1b301d31 862a0906 0df78648 16010901     1.0...*.H.......
  40f14c:	666e690e 6179406f 2e6c7373 826d6f63     .info@yassl.com.
  40f15c:	4a870009 6691be75 0c303dd8 1d550306     ...Ju..f.=0...U.
  40f16c:	30050413 ff010103 09060d30 8648862a     ...0....0...*.H.
  40f17c:	01010df7 03000505 00010182 81427c1c     .............|B.
  40f18c:	cf219e29 54c1d8d0 14aecc6f 68ff3809     ).!....To....8.h
  40f19c:	53959a98 e67b1876 28ec7630 dea7750d     ...Sv.{.0v.(.u..
  40f1ac:	d58ecde0 476a2355 fc8d4e2b d8a3067d     ....U#jG+N..}...
  40f1bc:	d65ead0f 3300c904 d32777fb 7bb303b5     ..^....3.w'....{
  40f1cc:	0b317421 1a2daf4a cc8e93b3 903d5ff3     !t1.J.-......_=.
  40f1dc:	55e3cc3f 787b9119 094a2e24 614e18bb     ?..U..{x$.J...Na
  40f1ec:	0ac69c2d 889134a0 483b6b70 9479bc47     -....4..pk;HG.y.
  40f1fc:	324da0a2 a3c25447 51d22edc 1139294c     ..M2GT.....QL)9.
  40f20c:	5e15e2ff f6369758 860606e9 959d8d0e     ...^X.6.........
  40f21c:	8bb27203 14e97c19 7388a16e 716d5868     .r...|..n..shXmq
  40f22c:	d3d5c25e de5fd213 e2be03ea cee54000     ^....._......@..
  40f23c:	3192e6fd bbebc357 2fcbac66 62e0fa1a     ...1W...f../...b
  40f24c:	93f447a2 6c4b2a43 f92f0a5e 634ae6e7     .G..C*Kl^./...Jc
  40f25c:	2aacb086 5bb4eba1 e432cd67 9a4b11b6     ...*...[g.2...K.
  40f26c:	a20d6672 fe8f764a fd83bc22 a9d5b7db     rf..Jv..".......
  40f27c:	b1c905ee 2b1b7e71 c0afe3e1              ....q~.+....

Disassembly of section .text._tr_flush_block%78:

0040f288 <_tr_flush_block>:
void ZLIB_INTERNAL _tr_flush_block(s, buf, stored_len, last)
    deflate_state *s;
    charf *buf;       /* input block, or NULL if too old */
    ulg stored_len;   /* length of input block */
    int last;         /* one if this is the last block for a file */
{
  40f288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0040f28c <.LCFI24>:
  40f28c:	b083      	sub	sp, #12

0040f28e <.LCFI25>:
  40f28e:	4604      	mov	r4, r0
  40f290:	4689      	mov	r9, r1
  40f292:	4615      	mov	r5, r2
  40f294:	461e      	mov	r6, r3

0040f296 <.LVL314>:
    ulg opt_lenb, static_lenb; /* opt_len and static_len in bytes */
    int max_blindex = 0;  /* index of last bit length code of non zero freq */

    /* Build the Huffman trees unless a stored block is forced */
    if (s->level > 0) {
  40f296:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84

0040f29a <.LVL315>:
  40f29a:	2b00      	cmp	r3, #0
  40f29c:	f340 8096 	ble.w	40f3cc <.LBE104>

        /* Check if the file is binary or text */
        if (s->strm->data_type == Z_UNKNOWN)
  40f2a0:	f8d0 e000 	ldr.w	lr, [r0]
  40f2a4:	f8de 302c 	ldr.w	r3, [lr, #44]	; 0x2c
  40f2a8:	2b02      	cmp	r3, #2
  40f2aa:	d059      	beq.n	40f360 <.LCFI27>

0040f2ac <.LVL316>:
            s->strm->data_type = detect_data_type(s);

        /* Construct the literal and distance trees */
        build_tree(s, (tree_desc *)(&(s->l_desc)));
  40f2ac:	f604 3118 	addw	r1, r4, #2840	; 0xb18
  40f2b0:	4620      	mov	r0, r4
  40f2b2:	f001 fcd6 	bl	410c62 <.LBE59>

0040f2b6 <.LVL317>:
        Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
                s->static_len));

        build_tree(s, (tree_desc *)(&(s->d_desc)));
  40f2b6:	f604 3124 	addw	r1, r4, #2852	; 0xb24
  40f2ba:	4620      	mov	r0, r4
  40f2bc:	f001 fcd1 	bl	410c62 <.LBE59>

0040f2c0 <.LBB97>:
    scan_tree(s, (ct_data *)s->dyn_ltree, s->l_desc.max_code);
  40f2c0:	f104 0794 	add.w	r7, r4, #148	; 0x94
  40f2c4:	f8d4 2b1c 	ldr.w	r2, [r4, #2844]	; 0xb1c
  40f2c8:	4639      	mov	r1, r7
  40f2ca:	4620      	mov	r0, r4
  40f2cc:	f009 ffbc 	bl	419248 <.LFE19>

0040f2d0 <.LVL319>:
    scan_tree(s, (ct_data *)s->dyn_dtree, s->d_desc.max_code);
  40f2d0:	f604 1888 	addw	r8, r4, #2440	; 0x988
  40f2d4:	f8d4 2b28 	ldr.w	r2, [r4, #2856]	; 0xb28
  40f2d8:	4641      	mov	r1, r8
  40f2da:	4620      	mov	r0, r4
  40f2dc:	f009 ffb4 	bl	419248 <.LFE19>

0040f2e0 <.LVL320>:
    build_tree(s, (tree_desc *)(&(s->bl_desc)));
  40f2e0:	f504 6133 	add.w	r1, r4, #2864	; 0xb30
  40f2e4:	4620      	mov	r0, r4
  40f2e6:	f001 fcbc 	bl	410c62 <.LBE59>

0040f2ea <.LVL321>:
        if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;
  40f2ea:	f8b4 3aba 	ldrh.w	r3, [r4, #2746]	; 0xaba
  40f2ee:	2b00      	cmp	r3, #0
  40f2f0:	d16a      	bne.n	40f3c8 <.LBB104>
  40f2f2:	4ac2      	ldr	r2, [pc, #776]	; (40f5fc <.LVL388+0xc>)
    for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {
  40f2f4:	2111      	movs	r1, #17

0040f2f6 <.LVL322>:
        if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;
  40f2f6:	f812 3901 	ldrb.w	r3, [r2], #-1
  40f2fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  40f2fe:	f8b3 3a7e 	ldrh.w	r3, [r3, #2686]	; 0xa7e
  40f302:	b913      	cbnz	r3, 40f30a <.LVL324>
    for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {
  40f304:	3901      	subs	r1, #1
  40f306:	2902      	cmp	r1, #2
  40f308:	d1f5      	bne.n	40f2f6 <.LVL322>

0040f30a <.LVL324>:
    s->opt_len += 3*(max_blindex+1) + 5+5+4;
  40f30a:	f101 0b01 	add.w	fp, r1, #1
  40f30e:	f241 60a8 	movw	r0, #5800	; 0x16a8
  40f312:	5823      	ldr	r3, [r4, r0]
  40f314:	330e      	adds	r3, #14
  40f316:	eb0b 0e4b 	add.w	lr, fp, fp, lsl #1
  40f31a:	4473      	add	r3, lr
  40f31c:	5023      	str	r3, [r4, r0]

0040f31e <.LBE97>:
         */
        max_blindex = build_bl_tree(s);

        /* Determine the best encoding. Compute the block lengths in bytes. */
        opt_lenb = (s->opt_len+3+7)>>3;
        static_lenb = (s->static_len+3+7)>>3;
  40f31e:	f241 60ac 	movw	r0, #5804	; 0x16ac
  40f322:	5820      	ldr	r0, [r4, r0]
  40f324:	f100 0e0a 	add.w	lr, r0, #10
  40f328:	ea4f 0ede 	mov.w	lr, lr, lsr #3

0040f32c <.LVL326>:
        opt_lenb = (s->opt_len+3+7)>>3;
  40f32c:	330a      	adds	r3, #10

0040f32e <.LVL327>:
  40f32e:	08db      	lsrs	r3, r3, #3

0040f330 <.LVL328>:
  40f330:	4573      	cmp	r3, lr
  40f332:	bf28      	it	cs
  40f334:	4673      	movcs	r3, lr

0040f336 <.LVL329>:
    }

#ifdef FORCE_STORED
    if (buf != (char*)0) { /* force stored block */
#else
    if (stored_len+4 <= opt_lenb && buf != (char*)0) {
  40f336:	1d28      	adds	r0, r5, #4
  40f338:	4298      	cmp	r0, r3
  40f33a:	d878      	bhi.n	40f42e <.LVL359>
  40f33c:	f1b9 0f00 	cmp.w	r9, #0
  40f340:	d075      	beq.n	40f42e <.LVL359>

0040f342 <.LVL330>:
         * Otherwise we can't have processed more than WSIZE input bytes since
         * the last block flush, because compression would have been
         * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
         * transform a block into a stored block.
         */
        _tr_stored_block(s, buf, stored_len, last);
  40f342:	4633      	mov	r3, r6

0040f344 <.LVL331>:
  40f344:	462a      	mov	r2, r5
  40f346:	4649      	mov	r1, r9
  40f348:	4620      	mov	r0, r4
  40f34a:	f00a f95d 	bl	419608 <_tr_stored_block>

0040f34e <.LVL332>:
    }
    Assert (s->compressed_len == s->bits_sent, "bad compressed size");
    /* The above check is made mod 2^32, for files larger than 512 MB
     * and uLong implemented on 32 bits.
     */
    init_block(s);
  40f34e:	4620      	mov	r0, r4
  40f350:	f00d fc38 	bl	41cbc4 <.LFE2>

0040f354 <.LVL333>:

    if (last) {
  40f354:	2e00      	cmp	r6, #0
  40f356:	f040 81d7 	bne.w	40f708 <.LVL403>
        s->compressed_len += 7;  /* align on byte boundary */
#endif
    }
    Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
           s->compressed_len-7*last));
}
  40f35a:	b003      	add	sp, #12

0040f35c <.LCFI26>:
  40f35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040f360 <.LCFI27>:
  40f360:	4607      	mov	r7, r0
  40f362:	f100 0180 	add.w	r1, r0, #128	; 0x80

0040f366 <.LVL335>:
        if (s->strm->data_type == Z_UNKNOWN)
  40f366:	4603      	mov	r3, r0
  40f368:	4aa5      	ldr	r2, [pc, #660]	; (40f600 <.LVL388+0x10>)

0040f36a <.LVL336>:
  40f36a:	e003      	b.n	40f374 <.LBB100+0x8>

0040f36c <.LBB100>:
     */
    unsigned long black_mask = 0xf3ffc07fUL;
    int n;

    /* Check for non-textual ("black-listed") bytes. */
    for (n = 0; n <= 31; n++, black_mask >>= 1)
  40f36c:	0852      	lsrs	r2, r2, #1
  40f36e:	3304      	adds	r3, #4
  40f370:	428b      	cmp	r3, r1
  40f372:	d00a      	beq.n	40f38a <.LBB103>
        if ((black_mask & 1) && (s->dyn_ltree[n].Freq != 0))
  40f374:	f012 0f01 	tst.w	r2, #1
  40f378:	d0f8      	beq.n	40f36c <.LBB100>
  40f37a:	f8b3 0094 	ldrh.w	r0, [r3, #148]	; 0x94
  40f37e:	2800      	cmp	r0, #0
  40f380:	d0f4      	beq.n	40f36c <.LBB100>
            return Z_BINARY;
  40f382:	2300      	movs	r3, #0

0040f384 <.LBE100>:
            s->strm->data_type = detect_data_type(s);
  40f384:	f8ce 302c 	str.w	r3, [lr, #44]	; 0x2c
  40f388:	e790      	b.n	40f2ac <.LVL316>

0040f38a <.LBB103>:

    /* Check for textual ("white-listed") bytes. */
    if (s->dyn_ltree[9].Freq != 0 || s->dyn_ltree[10].Freq != 0
  40f38a:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
  40f38e:	b98b      	cbnz	r3, 40f3b4 <.LVL344>
  40f390:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
  40f394:	b983      	cbnz	r3, 40f3b8 <.LVL344+0x4>
            || s->dyn_ltree[13].Freq != 0)
  40f396:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
  40f39a:	b97b      	cbnz	r3, 40f3bc <.LVL344+0x8>

0040f39c <.LVL342>:
        return Z_TEXT;
    for (n = 32; n < LITERALS; n++)
        if (s->dyn_ltree[n].Freq != 0)
  40f39c:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
  40f3a0:	b973      	cbnz	r3, 40f3c0 <.LVL345>
  40f3a2:	f504 725f 	add.w	r2, r4, #892	; 0x37c

0040f3a6 <.LVL343>:
  40f3a6:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
  40f3aa:	b95b      	cbnz	r3, 40f3c4 <.LVL346>
  40f3ac:	3704      	adds	r7, #4
    for (n = 32; n < LITERALS; n++)
  40f3ae:	4297      	cmp	r7, r2
  40f3b0:	d1f9      	bne.n	40f3a6 <.LVL343>
  40f3b2:	e7e7      	b.n	40f384 <.LBE100>

0040f3b4 <.LVL344>:
        return Z_TEXT;
  40f3b4:	2301      	movs	r3, #1
  40f3b6:	e7e5      	b.n	40f384 <.LBE100>
  40f3b8:	2301      	movs	r3, #1
  40f3ba:	e7e3      	b.n	40f384 <.LBE100>
  40f3bc:	2301      	movs	r3, #1
  40f3be:	e7e1      	b.n	40f384 <.LBE100>

0040f3c0 <.LVL345>:
            return Z_TEXT;
  40f3c0:	2301      	movs	r3, #1
  40f3c2:	e7df      	b.n	40f384 <.LBE100>

0040f3c4 <.LVL346>:
  40f3c4:	2301      	movs	r3, #1
  40f3c6:	e7dd      	b.n	40f384 <.LBE100>

0040f3c8 <.LBB104>:
    for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {
  40f3c8:	2112      	movs	r1, #18
  40f3ca:	e79e      	b.n	40f30a <.LVL324>

0040f3cc <.LBE104>:
        opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  40f3cc:	1d53      	adds	r3, r2, #5

0040f3ce <.LVL349>:
    if (stored_len+4 <= opt_lenb && buf != (char*)0) {
  40f3ce:	3204      	adds	r2, #4

0040f3d0 <.LVL350>:
  40f3d0:	4293      	cmp	r3, r2
  40f3d2:	d301      	bcc.n	40f3d8 <.LBB105>
  40f3d4:	2900      	cmp	r1, #0
  40f3d6:	d1b4      	bne.n	40f342 <.LVL330>

0040f3d8 <.LBB105>:
        send_bits(s, (STATIC_TREES<<1)+last, 3);
  40f3d8:	f241 63bc 	movw	r3, #5820	; 0x16bc

0040f3dc <.LVL352>:
  40f3dc:	58e3      	ldr	r3, [r4, r3]
  40f3de:	2b0d      	cmp	r3, #13
  40f3e0:	f340 80ef 	ble.w	40f5c2 <.LBB125>

0040f3e4 <.LBB106>:
  40f3e4:	1cb2      	adds	r2, r6, #2

0040f3e6 <.LVL354>:
  40f3e6:	b292      	uxth	r2, r2

0040f3e8 <.LVL355>:
  40f3e8:	f241 61b8 	movw	r1, #5816	; 0x16b8
  40f3ec:	fa02 f303 	lsl.w	r3, r2, r3
  40f3f0:	5a60      	ldrh	r0, [r4, r1]
  40f3f2:	4303      	orrs	r3, r0
  40f3f4:	b21b      	sxth	r3, r3
  40f3f6:	5263      	strh	r3, [r4, r1]
  40f3f8:	68a5      	ldr	r5, [r4, #8]

0040f3fa <.LVL356>:
  40f3fa:	6960      	ldr	r0, [r4, #20]
  40f3fc:	1c47      	adds	r7, r0, #1
  40f3fe:	6167      	str	r7, [r4, #20]
  40f400:	542b      	strb	r3, [r5, r0]
  40f402:	68a5      	ldr	r5, [r4, #8]
  40f404:	6960      	ldr	r0, [r4, #20]
  40f406:	1c43      	adds	r3, r0, #1
  40f408:	6163      	str	r3, [r4, #20]
  40f40a:	5a63      	ldrh	r3, [r4, r1]
  40f40c:	0a1b      	lsrs	r3, r3, #8
  40f40e:	542b      	strb	r3, [r5, r0]
  40f410:	f241 60bc 	movw	r0, #5820	; 0x16bc
  40f414:	5823      	ldr	r3, [r4, r0]
  40f416:	f1c3 0510 	rsb	r5, r3, #16
  40f41a:	412a      	asrs	r2, r5
  40f41c:	5262      	strh	r2, [r4, r1]
  40f41e:	3b0d      	subs	r3, #13
  40f420:	5023      	str	r3, [r4, r0]

0040f422 <.LBE105>:
        compress_block(s, (ct_data *)static_ltree, (ct_data *)static_dtree);
  40f422:	4a78      	ldr	r2, [pc, #480]	; (40f604 <.LVL388+0x14>)
  40f424:	4978      	ldr	r1, [pc, #480]	; (40f608 <.LVL388+0x18>)
  40f426:	4620      	mov	r0, r4
  40f428:	f003 fc24 	bl	412c74 <.LBE16>

0040f42c <.LVL358>:
  40f42c:	e78f      	b.n	40f34e <.LVL332>

0040f42e <.LVL359>:
    } else if (s->strategy == Z_FIXED || static_lenb == opt_lenb) {
  40f42e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
  40f432:	2804      	cmp	r0, #4
  40f434:	d0d0      	beq.n	40f3d8 <.LBB105>
  40f436:	459e      	cmp	lr, r3
  40f438:	d0ce      	beq.n	40f3d8 <.LBB105>

0040f43a <.LBB107>:
        send_bits(s, (DYN_TREES<<1)+last, 3);
  40f43a:	f241 63bc 	movw	r3, #5820	; 0x16bc

0040f43e <.LVL361>:
  40f43e:	58e3      	ldr	r3, [r4, r3]
  40f440:	2b0d      	cmp	r3, #13
  40f442:	f340 80cb 	ble.w	40f5dc <.LBB126>

0040f446 <.LBB108>:
  40f446:	1d35      	adds	r5, r6, #4

0040f448 <.LVL363>:
  40f448:	b2ad      	uxth	r5, r5

0040f44a <.LVL364>:
  40f44a:	f241 6eb8 	movw	lr, #5816	; 0x16b8

0040f44e <.LVL365>:
  40f44e:	fa05 f303 	lsl.w	r3, r5, r3
  40f452:	f834 000e 	ldrh.w	r0, [r4, lr]
  40f456:	4303      	orrs	r3, r0
  40f458:	b21b      	sxth	r3, r3
  40f45a:	f824 300e 	strh.w	r3, [r4, lr]

0040f45e <.LVL366>:
  40f45e:	6960      	ldr	r0, [r4, #20]
  40f460:	f100 0901 	add.w	r9, r0, #1

0040f464 <.LVL367>:
  40f464:	f8c4 9014 	str.w	r9, [r4, #20]
  40f468:	68a2      	ldr	r2, [r4, #8]
  40f46a:	5413      	strb	r3, [r2, r0]
  40f46c:	6963      	ldr	r3, [r4, #20]
  40f46e:	1c58      	adds	r0, r3, #1
  40f470:	6160      	str	r0, [r4, #20]
  40f472:	f834 000e 	ldrh.w	r0, [r4, lr]
  40f476:	0a00      	lsrs	r0, r0, #8
  40f478:	68a2      	ldr	r2, [r4, #8]
  40f47a:	54d0      	strb	r0, [r2, r3]
  40f47c:	f241 60bc 	movw	r0, #5820	; 0x16bc
  40f480:	5823      	ldr	r3, [r4, r0]
  40f482:	f1c3 0c10 	rsb	ip, r3, #16
  40f486:	fa45 f50c 	asr.w	r5, r5, ip
  40f48a:	f824 500e 	strh.w	r5, [r4, lr]
  40f48e:	3b0d      	subs	r3, #13
  40f490:	5023      	str	r3, [r4, r0]

0040f492 <.LBE107>:
        send_all_trees(s, s->l_desc.max_code+1, s->d_desc.max_code+1,
  40f492:	f8d4 ab1c 	ldr.w	sl, [r4, #2844]	; 0xb1c
  40f496:	f8d4 3b28 	ldr.w	r3, [r4, #2856]	; 0xb28
  40f49a:	9301      	str	r3, [sp, #4]

0040f49c <.LBB109>:
    send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */
  40f49c:	f241 63bc 	movw	r3, #5820	; 0x16bc

0040f4a0 <.LVL370>:
  40f4a0:	58e3      	ldr	r3, [r4, r3]
  40f4a2:	2b0b      	cmp	r3, #11
  40f4a4:	f340 80b4 	ble.w	40f610 <.LBB119>

0040f4a8 <.LBB112>:
  40f4a8:	f5aa 7080 	sub.w	r0, sl, #256	; 0x100

0040f4ac <.LVL372>:
  40f4ac:	b280      	uxth	r0, r0

0040f4ae <.LVL373>:
  40f4ae:	f241 6eb8 	movw	lr, #5816	; 0x16b8
  40f4b2:	fa00 f303 	lsl.w	r3, r0, r3
  40f4b6:	f834 500e 	ldrh.w	r5, [r4, lr]
  40f4ba:	431d      	orrs	r5, r3
  40f4bc:	b22d      	sxth	r5, r5
  40f4be:	f824 500e 	strh.w	r5, [r4, lr]

0040f4c2 <.LVL374>:
  40f4c2:	6963      	ldr	r3, [r4, #20]
  40f4c4:	f103 0901 	add.w	r9, r3, #1
  40f4c8:	f8c4 9014 	str.w	r9, [r4, #20]
  40f4cc:	68a2      	ldr	r2, [r4, #8]
  40f4ce:	54d5      	strb	r5, [r2, r3]
  40f4d0:	6963      	ldr	r3, [r4, #20]
  40f4d2:	1c5d      	adds	r5, r3, #1
  40f4d4:	6165      	str	r5, [r4, #20]
  40f4d6:	f834 500e 	ldrh.w	r5, [r4, lr]
  40f4da:	0a2d      	lsrs	r5, r5, #8
  40f4dc:	68a2      	ldr	r2, [r4, #8]
  40f4de:	54d5      	strb	r5, [r2, r3]
  40f4e0:	f241 65bc 	movw	r5, #5820	; 0x16bc
  40f4e4:	5963      	ldr	r3, [r4, r5]
  40f4e6:	f1c3 0c10 	rsb	ip, r3, #16
  40f4ea:	fa40 f00c 	asr.w	r0, r0, ip
  40f4ee:	f824 000e 	strh.w	r0, [r4, lr]
  40f4f2:	3b0b      	subs	r3, #11
  40f4f4:	5163      	str	r3, [r4, r5]

0040f4f6 <.LBB113>:
    send_bits(s, dcodes-1,   5);
  40f4f6:	f241 63bc 	movw	r3, #5820	; 0x16bc
  40f4fa:	58e3      	ldr	r3, [r4, r3]
  40f4fc:	2b0b      	cmp	r3, #11
  40f4fe:	f340 8097 	ble.w	40f630 <.LBB120>

0040f502 <.LVL376>:
  40f502:	f8bd 5004 	ldrh.w	r5, [sp, #4]

0040f506 <.LBB114>:
  40f506:	f241 6eb8 	movw	lr, #5816	; 0x16b8
  40f50a:	fa05 f003 	lsl.w	r0, r5, r3
  40f50e:	f834 300e 	ldrh.w	r3, [r4, lr]
  40f512:	4318      	orrs	r0, r3
  40f514:	b200      	sxth	r0, r0
  40f516:	f824 000e 	strh.w	r0, [r4, lr]
  40f51a:	6963      	ldr	r3, [r4, #20]
  40f51c:	f103 0901 	add.w	r9, r3, #1
  40f520:	f8c4 9014 	str.w	r9, [r4, #20]
  40f524:	68a2      	ldr	r2, [r4, #8]
  40f526:	54d0      	strb	r0, [r2, r3]
  40f528:	6963      	ldr	r3, [r4, #20]
  40f52a:	1c58      	adds	r0, r3, #1
  40f52c:	6160      	str	r0, [r4, #20]
  40f52e:	f834 000e 	ldrh.w	r0, [r4, lr]
  40f532:	0a00      	lsrs	r0, r0, #8
  40f534:	68a2      	ldr	r2, [r4, #8]
  40f536:	54d0      	strb	r0, [r2, r3]
  40f538:	f241 60bc 	movw	r0, #5820	; 0x16bc
  40f53c:	5823      	ldr	r3, [r4, r0]
  40f53e:	f1c3 0c10 	rsb	ip, r3, #16
  40f542:	fa45 f50c 	asr.w	r5, r5, ip
  40f546:	f824 500e 	strh.w	r5, [r4, lr]
  40f54a:	3b0b      	subs	r3, #11
  40f54c:	5023      	str	r3, [r4, r0]

0040f54e <.LBB115>:
    send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */
  40f54e:	f241 63bc 	movw	r3, #5820	; 0x16bc
  40f552:	58e3      	ldr	r3, [r4, r3]
  40f554:	2b0c      	cmp	r3, #12
  40f556:	dd7a      	ble.n	40f64e <.LBB121>

0040f558 <.LBB116>:
  40f558:	1ec8      	subs	r0, r1, #3

0040f55a <.LVL379>:
  40f55a:	b280      	uxth	r0, r0

0040f55c <.LVL380>:
  40f55c:	f241 6eb8 	movw	lr, #5816	; 0x16b8
  40f560:	fa00 f503 	lsl.w	r5, r0, r3
  40f564:	f834 300e 	ldrh.w	r3, [r4, lr]
  40f568:	431d      	orrs	r5, r3
  40f56a:	b22d      	sxth	r5, r5
  40f56c:	f824 500e 	strh.w	r5, [r4, lr]
  40f570:	6963      	ldr	r3, [r4, #20]
  40f572:	f103 0901 	add.w	r9, r3, #1
  40f576:	f8c4 9014 	str.w	r9, [r4, #20]
  40f57a:	68a2      	ldr	r2, [r4, #8]
  40f57c:	54d5      	strb	r5, [r2, r3]
  40f57e:	6963      	ldr	r3, [r4, #20]
  40f580:	1c5d      	adds	r5, r3, #1
  40f582:	6165      	str	r5, [r4, #20]
  40f584:	f834 500e 	ldrh.w	r5, [r4, lr]
  40f588:	0a2d      	lsrs	r5, r5, #8
  40f58a:	68a2      	ldr	r2, [r4, #8]
  40f58c:	54d5      	strb	r5, [r2, r3]
  40f58e:	f241 65bc 	movw	r5, #5820	; 0x16bc
  40f592:	5963      	ldr	r3, [r4, r5]
  40f594:	f1c3 0c10 	rsb	ip, r3, #16
  40f598:	fa40 f00c 	asr.w	r0, r0, ip
  40f59c:	f824 000e 	strh.w	r0, [r4, lr]
  40f5a0:	3b0c      	subs	r3, #12
  40f5a2:	5163      	str	r3, [r4, r5]

0040f5a4 <.LBE115>:
    for (rank = 0; rank < blcodes; rank++) {
  40f5a4:	f1bb 0f00 	cmp.w	fp, #0
  40f5a8:	f340 809e 	ble.w	40f6e8 <.LBE118>
  40f5ac:	4817      	ldr	r0, [pc, #92]	; (40f60c <.LVL388+0x1c>)
  40f5ae:	3101      	adds	r1, #1

0040f5b0 <.LVL382>:
  40f5b0:	4401      	add	r1, r0

0040f5b2 <.LBB117>:
        send_bits(s, s->bl_tree[bl_order[rank]].Len, 3);
  40f5b2:	f241 69bc 	movw	r9, #5820	; 0x16bc
  40f5b6:	44a1      	add	r9, r4
  40f5b8:	f241 6cb8 	movw	ip, #5816	; 0x16b8
  40f5bc:	44a4      	add	ip, r4
  40f5be:	46b6      	mov	lr, r6
  40f5c0:	e066      	b.n	40f690 <.LBB123>

0040f5c2 <.LBB125>:
        send_bits(s, (STATIC_TREES<<1)+last, 3);
  40f5c2:	f241 61b8 	movw	r1, #5816	; 0x16b8
  40f5c6:	1cb2      	adds	r2, r6, #2
  40f5c8:	b292      	uxth	r2, r2
  40f5ca:	409a      	lsls	r2, r3
  40f5cc:	5a60      	ldrh	r0, [r4, r1]
  40f5ce:	4302      	orrs	r2, r0
  40f5d0:	5262      	strh	r2, [r4, r1]
  40f5d2:	3303      	adds	r3, #3
  40f5d4:	f241 62bc 	movw	r2, #5820	; 0x16bc
  40f5d8:	50a3      	str	r3, [r4, r2]
  40f5da:	e722      	b.n	40f422 <.LBE105>

0040f5dc <.LBB126>:
        send_bits(s, (DYN_TREES<<1)+last, 3);
  40f5dc:	f241 65b8 	movw	r5, #5816	; 0x16b8

0040f5e0 <.LVL386>:
  40f5e0:	1d30      	adds	r0, r6, #4
  40f5e2:	b280      	uxth	r0, r0
  40f5e4:	4098      	lsls	r0, r3
  40f5e6:	f834 e005 	ldrh.w	lr, [r4, r5]

0040f5ea <.LVL387>:
  40f5ea:	ea40 000e 	orr.w	r0, r0, lr
  40f5ee:	5360      	strh	r0, [r4, r5]

0040f5f0 <.LVL388>:
  40f5f0:	3303      	adds	r3, #3
  40f5f2:	f241 60bc 	movw	r0, #5820	; 0x16bc
  40f5f6:	5023      	str	r3, [r4, r0]
  40f5f8:	e74b      	b.n	40f492 <.LBE107>
  40f5fa:	bf00      	nop
  40f5fc:	0041eb65 	.word	0x0041eb65
  40f600:	f3ffc07f 	.word	0xf3ffc07f
  40f604:	0041bbc4 	.word	0x0041bbc4
  40f608:	0040f710 	.word	0x0040f710
  40f60c:	0041eb54 	.word	0x0041eb54

0040f610 <.LBB119>:
    send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */
  40f610:	f241 65b8 	movw	r5, #5816	; 0x16b8
  40f614:	f5aa 7080 	sub.w	r0, sl, #256	; 0x100
  40f618:	b280      	uxth	r0, r0
  40f61a:	4098      	lsls	r0, r3
  40f61c:	f834 e005 	ldrh.w	lr, [r4, r5]
  40f620:	ea40 000e 	orr.w	r0, r0, lr
  40f624:	5360      	strh	r0, [r4, r5]

0040f626 <.LVL390>:
  40f626:	3305      	adds	r3, #5
  40f628:	f241 60bc 	movw	r0, #5820	; 0x16bc
  40f62c:	5023      	str	r3, [r4, r0]
  40f62e:	e762      	b.n	40f4f6 <.LBB113>

0040f630 <.LBB120>:
    send_bits(s, dcodes-1,   5);
  40f630:	f241 65b8 	movw	r5, #5816	; 0x16b8
  40f634:	f8bd 0004 	ldrh.w	r0, [sp, #4]
  40f638:	4098      	lsls	r0, r3
  40f63a:	f834 e005 	ldrh.w	lr, [r4, r5]
  40f63e:	ea40 000e 	orr.w	r0, r0, lr
  40f642:	5360      	strh	r0, [r4, r5]
  40f644:	3305      	adds	r3, #5
  40f646:	f241 60bc 	movw	r0, #5820	; 0x16bc
  40f64a:	5023      	str	r3, [r4, r0]
  40f64c:	e77f      	b.n	40f54e <.LBB115>

0040f64e <.LBB121>:
    send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */
  40f64e:	f241 65b8 	movw	r5, #5816	; 0x16b8
  40f652:	f1ab 0004 	sub.w	r0, fp, #4
  40f656:	b280      	uxth	r0, r0
  40f658:	4098      	lsls	r0, r3
  40f65a:	f834 e005 	ldrh.w	lr, [r4, r5]
  40f65e:	ea40 000e 	orr.w	r0, r0, lr
  40f662:	5360      	strh	r0, [r4, r5]
  40f664:	3304      	adds	r3, #4
  40f666:	f241 60bc 	movw	r0, #5820	; 0x16bc
  40f66a:	5023      	str	r3, [r4, r0]
  40f66c:	e79a      	b.n	40f5a4 <.LBE115>

0040f66e <.LBB122>:
        send_bits(s, s->bl_tree[bl_order[rank]].Len, 3);
  40f66e:	7802      	ldrb	r2, [r0, #0]
  40f670:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  40f674:	f8b2 2a7e 	ldrh.w	r2, [r2, #2686]	; 0xa7e
  40f678:	409a      	lsls	r2, r3
  40f67a:	f8bc 5000 	ldrh.w	r5, [ip]
  40f67e:	432a      	orrs	r2, r5
  40f680:	f8ac 2000 	strh.w	r2, [ip]
  40f684:	3303      	adds	r3, #3
  40f686:	f8c9 3000 	str.w	r3, [r9]

0040f68a <.LVL394>:
  40f68a:	3001      	adds	r0, #1

0040f68c <.LBE122>:
    for (rank = 0; rank < blcodes; rank++) {
  40f68c:	4281      	cmp	r1, r0
  40f68e:	d02a      	beq.n	40f6e6 <.LVL398+0xc>

0040f690 <.LBB123>:
        send_bits(s, s->bl_tree[bl_order[rank]].Len, 3);
  40f690:	f8d9 3000 	ldr.w	r3, [r9]
  40f694:	2b0d      	cmp	r3, #13
  40f696:	ddea      	ble.n	40f66e <.LBB122>

0040f698 <.LBB118>:
  40f698:	7802      	ldrb	r2, [r0, #0]
  40f69a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  40f69e:	f8b2 5a7e 	ldrh.w	r5, [r2, #2686]	; 0xa7e

0040f6a2 <.LVL397>:
  40f6a2:	fa05 f303 	lsl.w	r3, r5, r3
  40f6a6:	f8bc 2000 	ldrh.w	r2, [ip]
  40f6aa:	4313      	orrs	r3, r2
  40f6ac:	b21b      	sxth	r3, r3
  40f6ae:	f8ac 3000 	strh.w	r3, [ip]
  40f6b2:	6962      	ldr	r2, [r4, #20]
  40f6b4:	f102 0b01 	add.w	fp, r2, #1
  40f6b8:	f8c4 b014 	str.w	fp, [r4, #20]
  40f6bc:	68a6      	ldr	r6, [r4, #8]
  40f6be:	54b3      	strb	r3, [r6, r2]
  40f6c0:	6963      	ldr	r3, [r4, #20]
  40f6c2:	1c5a      	adds	r2, r3, #1
  40f6c4:	6162      	str	r2, [r4, #20]
  40f6c6:	f8bc 2000 	ldrh.w	r2, [ip]
  40f6ca:	0a12      	lsrs	r2, r2, #8
  40f6cc:	68a6      	ldr	r6, [r4, #8]
  40f6ce:	54f2      	strb	r2, [r6, r3]
  40f6d0:	f8d9 3000 	ldr.w	r3, [r9]
  40f6d4:	f1c3 0210 	rsb	r2, r3, #16
  40f6d8:	4115      	asrs	r5, r2

0040f6da <.LVL398>:
  40f6da:	f8ac 5000 	strh.w	r5, [ip]
  40f6de:	3b0d      	subs	r3, #13
  40f6e0:	f8c9 3000 	str.w	r3, [r9]
  40f6e4:	e7d1      	b.n	40f68a <.LVL394>
  40f6e6:	4676      	mov	r6, lr

0040f6e8 <.LBE118>:
    send_tree(s, (ct_data *)s->dyn_ltree, lcodes-1); /* literal tree */
  40f6e8:	4652      	mov	r2, sl
  40f6ea:	4639      	mov	r1, r7
  40f6ec:	4620      	mov	r0, r4
  40f6ee:	f002 fa3a 	bl	411b66 <.LBE100>

0040f6f2 <.LVL400>:
    send_tree(s, (ct_data *)s->dyn_dtree, dcodes-1); /* distance tree */
  40f6f2:	9a01      	ldr	r2, [sp, #4]
  40f6f4:	4641      	mov	r1, r8
  40f6f6:	4620      	mov	r0, r4
  40f6f8:	f002 fa35 	bl	411b66 <.LBE100>

0040f6fc <.LBE127>:
        compress_block(s, (ct_data *)s->dyn_ltree, (ct_data *)s->dyn_dtree);
  40f6fc:	4642      	mov	r2, r8
  40f6fe:	4639      	mov	r1, r7
  40f700:	4620      	mov	r0, r4
  40f702:	f003 fab7 	bl	412c74 <.LBE16>

0040f706 <.LVL402>:
  40f706:	e622      	b.n	40f34e <.LVL332>

0040f708 <.LVL403>:
        bi_windup(s);
  40f708:	4620      	mov	r0, r4
  40f70a:	f00d fbed 	bl	41cee8 <.LFE223>

0040f70e <.LVL404>:
}
  40f70e:	e624      	b.n	40f35a <.LVL333+0x6>

Disassembly of section .rodata.static_ltree%79:

0040f710 <static_ltree>:
  40f710:	000c 0008 008c 0008 004c 0008 00cc 0008     ........L.......
  40f720:	002c 0008 00ac 0008 006c 0008 00ec 0008     ,.......l.......
  40f730:	001c 0008 009c 0008 005c 0008 00dc 0008     ........\.......
  40f740:	003c 0008 00bc 0008 007c 0008 00fc 0008     <.......|.......
  40f750:	0002 0008 0082 0008 0042 0008 00c2 0008     ........B.......
  40f760:	0022 0008 00a2 0008 0062 0008 00e2 0008     ".......b.......
  40f770:	0012 0008 0092 0008 0052 0008 00d2 0008     ........R.......
  40f780:	0032 0008 00b2 0008 0072 0008 00f2 0008     2.......r.......
  40f790:	000a 0008 008a 0008 004a 0008 00ca 0008     ........J.......
  40f7a0:	002a 0008 00aa 0008 006a 0008 00ea 0008     *.......j.......
  40f7b0:	001a 0008 009a 0008 005a 0008 00da 0008     ........Z.......
  40f7c0:	003a 0008 00ba 0008 007a 0008 00fa 0008     :.......z.......
  40f7d0:	0006 0008 0086 0008 0046 0008 00c6 0008     ........F.......
  40f7e0:	0026 0008 00a6 0008 0066 0008 00e6 0008     &.......f.......
  40f7f0:	0016 0008 0096 0008 0056 0008 00d6 0008     ........V.......
  40f800:	0036 0008 00b6 0008 0076 0008 00f6 0008     6.......v.......
  40f810:	000e 0008 008e 0008 004e 0008 00ce 0008     ........N.......
  40f820:	002e 0008 00ae 0008 006e 0008 00ee 0008     ........n.......
  40f830:	001e 0008 009e 0008 005e 0008 00de 0008     ........^.......
  40f840:	003e 0008 00be 0008 007e 0008 00fe 0008     >.......~.......
  40f850:	0001 0008 0081 0008 0041 0008 00c1 0008     ........A.......
  40f860:	0021 0008 00a1 0008 0061 0008 00e1 0008     !.......a.......
  40f870:	0011 0008 0091 0008 0051 0008 00d1 0008     ........Q.......
  40f880:	0031 0008 00b1 0008 0071 0008 00f1 0008     1.......q.......
  40f890:	0009 0008 0089 0008 0049 0008 00c9 0008     ........I.......
  40f8a0:	0029 0008 00a9 0008 0069 0008 00e9 0008     ).......i.......
  40f8b0:	0019 0008 0099 0008 0059 0008 00d9 0008     ........Y.......
  40f8c0:	0039 0008 00b9 0008 0079 0008 00f9 0008     9.......y.......
  40f8d0:	0005 0008 0085 0008 0045 0008 00c5 0008     ........E.......
  40f8e0:	0025 0008 00a5 0008 0065 0008 00e5 0008     %.......e.......
  40f8f0:	0015 0008 0095 0008 0055 0008 00d5 0008     ........U.......
  40f900:	0035 0008 00b5 0008 0075 0008 00f5 0008     5.......u.......
  40f910:	000d 0008 008d 0008 004d 0008 00cd 0008     ........M.......
  40f920:	002d 0008 00ad 0008 006d 0008 00ed 0008     -.......m.......
  40f930:	001d 0008 009d 0008 005d 0008 00dd 0008     ........].......
  40f940:	003d 0008 00bd 0008 007d 0008 00fd 0008     =.......}.......
  40f950:	0013 0009 0113 0009 0093 0009 0193 0009     ................
  40f960:	0053 0009 0153 0009 00d3 0009 01d3 0009     S...S...........
  40f970:	0033 0009 0133 0009 00b3 0009 01b3 0009     3...3...........
  40f980:	0073 0009 0173 0009 00f3 0009 01f3 0009     s...s...........
  40f990:	000b 0009 010b 0009 008b 0009 018b 0009     ................
  40f9a0:	004b 0009 014b 0009 00cb 0009 01cb 0009     K...K...........
  40f9b0:	002b 0009 012b 0009 00ab 0009 01ab 0009     +...+...........
  40f9c0:	006b 0009 016b 0009 00eb 0009 01eb 0009     k...k...........
  40f9d0:	001b 0009 011b 0009 009b 0009 019b 0009     ................
  40f9e0:	005b 0009 015b 0009 00db 0009 01db 0009     [...[...........
  40f9f0:	003b 0009 013b 0009 00bb 0009 01bb 0009     ;...;...........
  40fa00:	007b 0009 017b 0009 00fb 0009 01fb 0009     {...{...........
  40fa10:	0007 0009 0107 0009 0087 0009 0187 0009     ................
  40fa20:	0047 0009 0147 0009 00c7 0009 01c7 0009     G...G...........
  40fa30:	0027 0009 0127 0009 00a7 0009 01a7 0009     '...'...........
  40fa40:	0067 0009 0167 0009 00e7 0009 01e7 0009     g...g...........
  40fa50:	0017 0009 0117 0009 0097 0009 0197 0009     ................
  40fa60:	0057 0009 0157 0009 00d7 0009 01d7 0009     W...W...........
  40fa70:	0037 0009 0137 0009 00b7 0009 01b7 0009     7...7...........
  40fa80:	0077 0009 0177 0009 00f7 0009 01f7 0009     w...w...........
  40fa90:	000f 0009 010f 0009 008f 0009 018f 0009     ................
  40faa0:	004f 0009 014f 0009 00cf 0009 01cf 0009     O...O...........
  40fab0:	002f 0009 012f 0009 00af 0009 01af 0009     /.../...........
  40fac0:	006f 0009 016f 0009 00ef 0009 01ef 0009     o...o...........
  40fad0:	001f 0009 011f 0009 009f 0009 019f 0009     ................
  40fae0:	005f 0009 015f 0009 00df 0009 01df 0009     _..._...........
  40faf0:	003f 0009 013f 0009 00bf 0009 01bf 0009     ?...?...........
  40fb00:	007f 0009 017f 0009 00ff 0009 01ff 0009     ................
  40fb10:	0000 0007 0040 0007 0020 0007 0060 0007     ....@... ...`...
  40fb20:	0010 0007 0050 0007 0030 0007 0070 0007     ....P...0...p...
  40fb30:	0008 0007 0048 0007 0028 0007 0068 0007     ....H...(...h...
  40fb40:	0018 0007 0058 0007 0038 0007 0078 0007     ....X...8...x...
  40fb50:	0004 0007 0044 0007 0024 0007 0064 0007     ....D...$...d...
  40fb60:	0014 0007 0054 0007 0034 0007 0074 0007     ....T...4...t...
  40fb70:	0003 0008 0083 0008 0043 0008 00c3 0008     ........C.......
  40fb80:	0023 0008 00a3 0008 0063 0008 00e3 0008     #.......c.......

Disassembly of section .text.fp_invmod%80:

0040fb90 <fp_invmod>:
  return FP_OKAY;
}

/* c = 1/a (mod b) for odd b only */
int fp_invmod(fp_int *a, fp_int *b, fp_int *c)
{
  40fb90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

0040fb94 <.LCFI92>:
  40fb94:	f5ad 5df1 	sub.w	sp, sp, #7712	; 0x1e20

0040fb98 <.LCFI93>:
  40fb98:	b084      	sub	sp, #16

0040fb9a <.LCFI94>:
  40fb9a:	4681      	mov	r9, r0
  40fb9c:	4688      	mov	r8, r1
  40fb9e:	4692      	mov	sl, r2
  fp_int  x, y, u, v, B, D;
  int     neg;

  /* 2. [modified] b must be odd   */
  if (fp_iseven (b) == FP_YES) {
  40fba0:	680b      	ldr	r3, [r1, #0]
  40fba2:	2b00      	cmp	r3, #0
  40fba4:	dd04      	ble.n	40fbb0 <.LBB126>
  40fba6:	688b      	ldr	r3, [r1, #8]
  40fba8:	f013 0f01 	tst.w	r3, #1
  40fbac:	f000 80d1 	beq.w	40fd52 <.LBB157>

0040fbb0 <.LBB126>:
    a->size = FP_SIZE;
#endif
#ifdef HAVE_WOLF_BIGINT
    wc_bigint_init(&a->raw);
#endif
    fp_zero(a);
  40fbb0:	f641 4008 	movw	r0, #7176	; 0x1c08

0040fbb4 <.LVL641>:
  40fbb4:	4468      	add	r0, sp
  40fbb6:	f00e ffb9 	bl	41eb2c <.LFE154>

0040fbba <.LBB128>:
  40fbba:	f50d 54cf 	add.w	r4, sp, #6624	; 0x19e0

0040fbbe <.LVL643>:
  40fbbe:	4620      	mov	r0, r4
  40fbc0:	f00e ffb4 	bl	41eb2c <.LFE154>

0040fbc4 <.LBB130>:
  40fbc4:	f241 70b8 	movw	r0, #6072	; 0x17b8
  40fbc8:	4468      	add	r0, sp
  40fbca:	f00e ffaf 	bl	41eb2c <.LFE154>

0040fbce <.LBB132>:
  40fbce:	f241 5090 	movw	r0, #5520	; 0x1590
  40fbd2:	4468      	add	r0, sp
  40fbd4:	f00e ffaa 	bl	41eb2c <.LFE154>

0040fbd8 <.LBB134>:
  40fbd8:	f241 3068 	movw	r0, #4968	; 0x1368
  40fbdc:	4468      	add	r0, sp
  40fbde:	f00e ffa5 	bl	41eb2c <.LFE154>

0040fbe2 <.LBB136>:
  40fbe2:	f50d 508a 	add.w	r0, sp, #4416	; 0x1140

0040fbe6 <.LVL648>:
  40fbe6:	f00e ffa1 	bl	41eb2c <.LFE154>

0040fbea <.LBE136>:
  fp_copy(b, &x);
  40fbea:	f641 4108 	movw	r1, #7176	; 0x1c08
  40fbee:	4469      	add	r1, sp
  40fbf0:	4640      	mov	r0, r8
  40fbf2:	f00e fc45 	bl	41e480 <.LFE185>

0040fbf6 <.LVL650>:
  fp_abs(a, &y);
  40fbf6:	4621      	mov	r1, r4
  40fbf8:	4648      	mov	r0, r9
  40fbfa:	f00e fc41 	bl	41e480 <.LFE185>

0040fbfe <.LVL651>:
  40fbfe:	2300      	movs	r3, #0
  40fc00:	6063      	str	r3, [r4, #4]
  fp_copy(&x, &u);
  40fc02:	f241 71b8 	movw	r1, #6072	; 0x17b8
  40fc06:	4469      	add	r1, sp
  40fc08:	f641 4008 	movw	r0, #7176	; 0x1c08
  40fc0c:	4468      	add	r0, sp
  40fc0e:	f00e fc37 	bl	41e480 <.LFE185>

0040fc12 <.LVL652>:
  fp_copy(&y, &v);
  40fc12:	f241 5190 	movw	r1, #5520	; 0x1590
  40fc16:	4469      	add	r1, sp
  40fc18:	4620      	mov	r0, r4
  40fc1a:	f00e fc31 	bl	41e480 <.LFE185>

0040fc1e <.LVL653>:
  fp_set (&D, 1);
  40fc1e:	2101      	movs	r1, #1
  40fc20:	f50d 508a 	add.w	r0, sp, #4416	; 0x1140
  40fc24:	f00e ff58 	bl	41ead8 <.LFE20>

0040fc28 <.LVL654>:
  while (fp_iseven (&u) == FP_YES) {
  40fc28:	f241 77b8 	movw	r7, #6072	; 0x17b8
  40fc2c:	446f      	add	r7, sp
  while (fp_iseven (&v) == FP_YES) {
  40fc2e:	f241 5690 	movw	r6, #5520	; 0x1590
  40fc32:	446e      	add	r6, sp
  40fc34:	4635      	mov	r5, r6
  40fc36:	e1d6      	b.n	40ffe6 <.LVL729+0x8>

0040fc38 <.LBB138>:
    fp_sub (&v, &u, &v);
  40fc38:	4622      	mov	r2, r4
  40fc3a:	f50d 618a 	add.w	r1, sp, #1104	; 0x450
  40fc3e:	4620      	mov	r0, r4
  40fc40:	f00d fc8e 	bl	41d560 <.LFE162>

0040fc44 <.LVL656>:
    fp_sub (&C, &A, &C);
  40fc44:	f50d 624f 	add.w	r2, sp, #3312	; 0xcf0
  40fc48:	f50d 610a 	add.w	r1, sp, #2208	; 0x8a0
  40fc4c:	4610      	mov	r0, r2
  40fc4e:	f00d fc87 	bl	41d560 <.LFE162>

0040fc52 <.LVL657>:
    fp_sub (&D, &B, &D);
  40fc52:	f60d 7218 	addw	r2, sp, #3864	; 0xf18
  40fc56:	f60d 21c8 	addw	r1, sp, #2760	; 0xac8
  40fc5a:	4610      	mov	r0, r2
  40fc5c:	f00d fc80 	bl	41d560 <.LFE162>

0040fc60 <.LVL658>:
  40fc60:	e126      	b.n	40feb0 <.LVL714>
  if (fp_cmp_d (&v, 1) != FP_EQ) {
  40fc62:	2101      	movs	r1, #1
  40fc64:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
  40fc68:	f00d fa0c 	bl	41d084 <.LFE0>

0040fc6c <.LVL659>:
  40fc6c:	4605      	mov	r5, r0

0040fc6e <.LVL660>:
  40fc6e:	bb20      	cbnz	r0, 40fcba <.LVL665+0x2>
  while (fp_cmp_d(&C, 0) == FP_LT) {
  40fc70:	2400      	movs	r4, #0
  40fc72:	e005      	b.n	40fc80 <.LVL661>
      fp_add(&C, b, &C);
  40fc74:	f50d 624f 	add.w	r2, sp, #3312	; 0xcf0
  40fc78:	4641      	mov	r1, r8
  40fc7a:	4610      	mov	r0, r2
  40fc7c:	f00d fb0c 	bl	41d298 <.LFE17>

0040fc80 <.LVL661>:
  while (fp_cmp_d(&C, 0) == FP_LT) {
  40fc80:	4621      	mov	r1, r4
  40fc82:	f50d 604f 	add.w	r0, sp, #3312	; 0xcf0
  40fc86:	f00d f9fd 	bl	41d084 <.LFE0>

0040fc8a <.LVL662>:
  40fc8a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40fc8e:	d0f1      	beq.n	40fc74 <.LVL660+0x6>
  40fc90:	e005      	b.n	40fc9e <.LVL663>
      fp_sub(&C, b, &C);
  40fc92:	f50d 624f 	add.w	r2, sp, #3312	; 0xcf0
  40fc96:	4641      	mov	r1, r8
  40fc98:	4610      	mov	r0, r2
  40fc9a:	f00d fc61 	bl	41d560 <.LFE162>

0040fc9e <.LVL663>:
  while (fp_cmp_mag(&C, b) != FP_LT) {
  40fc9e:	4641      	mov	r1, r8
  40fca0:	f50d 604f 	add.w	r0, sp, #3312	; 0xcf0
  40fca4:	f00c fc1f 	bl	41c4e6 <.LFE170>

0040fca8 <.LVL664>:
  40fca8:	f1b0 3fff 	cmp.w	r0, #4294967295
  40fcac:	d1f1      	bne.n	40fc92 <.LVL662+0x8>
  fp_copy(&C, c);
  40fcae:	4651      	mov	r1, sl
  40fcb0:	f50d 604f 	add.w	r0, sp, #3312	; 0xcf0
  40fcb4:	f00e fbe4 	bl	41e480 <.LFE185>

0040fcb8 <.LVL665>:
  40fcb8:	e042      	b.n	40fd40 <.LVL677>
    return FP_VAL;
  40fcba:	f04f 35ff 	mov.w	r5, #4294967295
  40fcbe:	e03f      	b.n	40fd40 <.LVL677>

0040fcc0 <.LVL666>:
    return FP_VAL;
  40fcc0:	f04f 35ff 	mov.w	r5, #4294967295

0040fcc4 <.LBE138>:
    return fp_invmod_slow(a,b,c);
  40fcc4:	e03c      	b.n	40fd40 <.LVL677>

0040fcc6 <.LVL668>:
    fp_sub (&v, &u, &v);
  40fcc6:	462a      	mov	r2, r5
  40fcc8:	4639      	mov	r1, r7
  40fcca:	4628      	mov	r0, r5
  40fccc:	f00d fc48 	bl	41d560 <.LFE162>

0040fcd0 <.LVL669>:
    fp_sub (&D, &B, &D);
  40fcd0:	f50d 528a 	add.w	r2, sp, #4416	; 0x1140
  40fcd4:	f241 3168 	movw	r1, #4968	; 0x1368
  40fcd8:	4469      	add	r1, sp
  40fcda:	4610      	mov	r0, r2
  40fcdc:	f00d fc40 	bl	41d560 <.LFE162>

0040fce0 <.LVL670>:
  40fce0:	e17d      	b.n	40ffde <.LVL729>
  if (fp_cmp_d (&v, 1) != FP_EQ) {
  40fce2:	2101      	movs	r1, #1
  40fce4:	f241 5090 	movw	r0, #5520	; 0x1590
  40fce8:	4468      	add	r0, sp
  40fcea:	f00d f9cb 	bl	41d084 <.LFE0>

0040fcee <.LVL671>:
  40fcee:	4605      	mov	r5, r0
  40fcf0:	bb60      	cbnz	r0, 40fd4c <.LCFI96>
  neg = a->sign;
  40fcf2:	f8d9 6004 	ldr.w	r6, [r9, #4]

0040fcf6 <.LVL672>:
  while (D.sign == FP_NEG) {
  40fcf6:	f50d 538a 	add.w	r3, sp, #4416	; 0x1140
  40fcfa:	685b      	ldr	r3, [r3, #4]
  40fcfc:	2b01      	cmp	r3, #1
  40fcfe:	d110      	bne.n	40fd22 <.LVL674>
    fp_add (&D, b, &D);
  40fd00:	f50d 548a 	add.w	r4, sp, #4416	; 0x1140
  40fd04:	4622      	mov	r2, r4
  40fd06:	4641      	mov	r1, r8
  40fd08:	4620      	mov	r0, r4
  40fd0a:	f00d fac5 	bl	41d298 <.LFE17>

0040fd0e <.LVL673>:
  while (D.sign == FP_NEG) {
  40fd0e:	6863      	ldr	r3, [r4, #4]
  40fd10:	2b01      	cmp	r3, #1
  40fd12:	d0f7      	beq.n	40fd04 <.LVL672+0xe>
  40fd14:	e005      	b.n	40fd22 <.LVL674>
    fp_sub(&D, b, &D);
  40fd16:	f50d 528a 	add.w	r2, sp, #4416	; 0x1140
  40fd1a:	4641      	mov	r1, r8
  40fd1c:	4610      	mov	r0, r2
  40fd1e:	f00d fc1f 	bl	41d560 <.LFE162>

0040fd22 <.LVL674>:
  while (fp_cmp_mag(&D, b) != FP_LT) {
  40fd22:	4641      	mov	r1, r8
  40fd24:	f50d 508a 	add.w	r0, sp, #4416	; 0x1140
  40fd28:	f00c fbdd 	bl	41c4e6 <.LFE170>

0040fd2c <.LVL675>:
  40fd2c:	f1b0 3fff 	cmp.w	r0, #4294967295
  40fd30:	d1f1      	bne.n	40fd16 <.LVL673+0x8>
  fp_copy (&D, c);
  40fd32:	4651      	mov	r1, sl
  40fd34:	f50d 508a 	add.w	r0, sp, #4416	; 0x1140
  40fd38:	f00e fba2 	bl	41e480 <.LFE185>

0040fd3c <.LVL676>:
  c->sign = neg;
  40fd3c:	f8ca 6004 	str.w	r6, [sl, #4]

0040fd40 <.LVL677>:
}
  40fd40:	4628      	mov	r0, r5
  40fd42:	f50d 5df1 	add.w	sp, sp, #7712	; 0x1e20
  40fd46:	b004      	add	sp, #16

0040fd48 <.LCFI95>:
  40fd48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040fd4c <.LCFI96>:
    return FP_VAL;
  40fd4c:	f04f 35ff 	mov.w	r5, #4294967295
  40fd50:	e7f6      	b.n	40fd40 <.LVL677>

0040fd52 <.LBB157>:
  if (b->sign == FP_NEG || fp_iszero(b) == FP_YES) {
  40fd52:	684b      	ldr	r3, [r1, #4]
  40fd54:	2b01      	cmp	r3, #1
  40fd56:	d0b3      	beq.n	40fcc0 <.LVL666>

0040fd58 <.LBB140>:
    fp_zero(a);
  40fd58:	4668      	mov	r0, sp

0040fd5a <.LVL681>:
  40fd5a:	f00e fee7 	bl	41eb2c <.LFE154>

0040fd5e <.LBB142>:
  40fd5e:	a88a      	add	r0, sp, #552	; 0x228

0040fd60 <.LVL683>:
  40fd60:	f00e fee4 	bl	41eb2c <.LFE154>

0040fd64 <.LBB144>:
  40fd64:	f50d 608a 	add.w	r0, sp, #1104	; 0x450

0040fd68 <.LVL685>:
  40fd68:	f00e fee0 	bl	41eb2c <.LFE154>

0040fd6c <.LBB146>:
  40fd6c:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678

0040fd70 <.LVL687>:
  40fd70:	f00e fedc 	bl	41eb2c <.LFE154>

0040fd74 <.LBB148>:
  40fd74:	f50d 600a 	add.w	r0, sp, #2208	; 0x8a0

0040fd78 <.LVL689>:
  40fd78:	f00e fed8 	bl	41eb2c <.LFE154>

0040fd7c <.LBB150>:
  40fd7c:	f60d 20c8 	addw	r0, sp, #2760	; 0xac8

0040fd80 <.LVL691>:
  40fd80:	f00e fed4 	bl	41eb2c <.LFE154>

0040fd84 <.LBB152>:
  40fd84:	f50d 604f 	add.w	r0, sp, #3312	; 0xcf0

0040fd88 <.LVL693>:
  40fd88:	f00e fed0 	bl	41eb2c <.LFE154>

0040fd8c <.LBB154>:
  40fd8c:	f60d 7018 	addw	r0, sp, #3864	; 0xf18

0040fd90 <.LVL695>:
  40fd90:	f00e fecc 	bl	41eb2c <.LFE154>

0040fd94 <.LBE154>:
  if ((res = fp_mod(a, b, &x)) != FP_OKAY) {
  40fd94:	466a      	mov	r2, sp
  40fd96:	4641      	mov	r1, r8
  40fd98:	4648      	mov	r0, r9
  40fd9a:	f00d fb7a 	bl	41d492 <.LFE171>

0040fd9e <.LVL697>:
  40fd9e:	4605      	mov	r5, r0
  40fda0:	2800      	cmp	r0, #0
  40fda2:	d1cd      	bne.n	40fd40 <.LVL677>
  fp_copy(b, &y);
  40fda4:	a98a      	add	r1, sp, #552	; 0x228
  40fda6:	4640      	mov	r0, r8

0040fda8 <.LVL698>:
  40fda8:	f00e fb6a 	bl	41e480 <.LFE185>

0040fdac <.LVL699>:
  if (fp_iseven (&x) == FP_YES && fp_iseven (&y) == FP_YES) {
  40fdac:	4b93      	ldr	r3, [pc, #588]	; (40fffc <.LVL729+0x1e>)
  40fdae:	f641 6230 	movw	r2, #7728	; 0x1e30
  40fdb2:	446a      	add	r2, sp
  40fdb4:	58d3      	ldr	r3, [r2, r3]
  40fdb6:	2b00      	cmp	r3, #0
  40fdb8:	dd03      	ble.n	40fdc2 <.LVL699+0x16>
  40fdba:	9b02      	ldr	r3, [sp, #8]
  40fdbc:	f013 0f01 	tst.w	r3, #1
  40fdc0:	d016      	beq.n	40fdf0 <.LVL703+0x6>
  fp_copy (&x, &u);
  40fdc2:	f50d 618a 	add.w	r1, sp, #1104	; 0x450
  40fdc6:	4668      	mov	r0, sp
  40fdc8:	f00e fb5a 	bl	41e480 <.LFE185>

0040fdcc <.LVL700>:
  fp_copy (&y, &v);
  40fdcc:	f50d 61cf 	add.w	r1, sp, #1656	; 0x678
  40fdd0:	a88a      	add	r0, sp, #552	; 0x228
  40fdd2:	f00e fb55 	bl	41e480 <.LFE185>

0040fdd6 <.LVL701>:
  fp_set (&A, 1);
  40fdd6:	2101      	movs	r1, #1
  40fdd8:	f50d 600a 	add.w	r0, sp, #2208	; 0x8a0
  40fddc:	f00e fe7c 	bl	41ead8 <.LFE20>

0040fde0 <.LVL702>:
  fp_set (&D, 1);
  40fde0:	2101      	movs	r1, #1
  40fde2:	f60d 7018 	addw	r0, sp, #3864	; 0xf18
  40fde6:	f00e fe77 	bl	41ead8 <.LFE20>

0040fdea <.LVL703>:
  while (fp_iseven (&v) == FP_YES) {
  40fdea:	f50d 64cf 	add.w	r4, sp, #1656	; 0x678
  40fdee:	e064      	b.n	40feba <.LVL714+0xa>
  if (fp_iseven (&x) == FP_YES && fp_iseven (&y) == FP_YES) {
  40fdf0:	4b83      	ldr	r3, [pc, #524]	; (410000 <.LVL729+0x22>)
  40fdf2:	f641 6230 	movw	r2, #7728	; 0x1e30
  40fdf6:	446a      	add	r2, sp
  40fdf8:	58d3      	ldr	r3, [r2, r3]
  40fdfa:	2b00      	cmp	r3, #0
  40fdfc:	dde1      	ble.n	40fdc2 <.LVL699+0x16>
  40fdfe:	9b8c      	ldr	r3, [sp, #560]	; 0x230
  40fe00:	f013 0f01 	tst.w	r3, #1
  40fe04:	d1dd      	bne.n	40fdc2 <.LVL699+0x16>
    return FP_VAL;
  40fe06:	f04f 35ff 	mov.w	r5, #4294967295

0040fe0a <.LVL704>:
  40fe0a:	e799      	b.n	40fd40 <.LVL677>

0040fe0c <.LVL705>:
    fp_div_2 (&v, &v);
  40fe0c:	4621      	mov	r1, r4
  40fe0e:	4620      	mov	r0, r4
  40fe10:	f00b f86c 	bl	41aeec <.LFE3>

0040fe14 <.LVL706>:
    if (fp_isodd (&C) == FP_YES || fp_isodd (&D) == FP_YES) {
  40fe14:	f8dd 3cf0 	ldr.w	r3, [sp, #3312]	; 0xcf0
  40fe18:	2b00      	cmp	r3, #0
  40fe1a:	dd04      	ble.n	40fe26 <.LVL706+0x12>
  40fe1c:	f8dd 3cf8 	ldr.w	r3, [sp, #3320]	; 0xcf8
  40fe20:	f013 0f01 	tst.w	r3, #1
  40fe24:	d108      	bne.n	40fe38 <.LVL706+0x24>
  40fe26:	f8dd 3f18 	ldr.w	r3, [sp, #3864]	; 0xf18
  40fe2a:	2b00      	cmp	r3, #0
  40fe2c:	dd10      	ble.n	40fe50 <.LVL708>
  40fe2e:	f8dd 3f20 	ldr.w	r3, [sp, #3872]	; 0xf20
  40fe32:	f013 0f01 	tst.w	r3, #1
  40fe36:	d00b      	beq.n	40fe50 <.LVL708>
      fp_add (&C, &y, &C);
  40fe38:	f50d 624f 	add.w	r2, sp, #3312	; 0xcf0
  40fe3c:	a98a      	add	r1, sp, #552	; 0x228
  40fe3e:	4610      	mov	r0, r2
  40fe40:	f00d fa2a 	bl	41d298 <.LFE17>

0040fe44 <.LVL707>:
      fp_sub (&D, &x, &D);
  40fe44:	f60d 7218 	addw	r2, sp, #3864	; 0xf18
  40fe48:	4669      	mov	r1, sp
  40fe4a:	4610      	mov	r0, r2
  40fe4c:	f00d fb88 	bl	41d560 <.LFE162>

0040fe50 <.LVL708>:
    fp_div_2 (&C, &C);
  40fe50:	f50d 614f 	add.w	r1, sp, #3312	; 0xcf0
  40fe54:	4608      	mov	r0, r1
  40fe56:	f00b f849 	bl	41aeec <.LFE3>

0040fe5a <.LVL709>:
    fp_div_2 (&D, &D);
  40fe5a:	f60d 7118 	addw	r1, sp, #3864	; 0xf18
  40fe5e:	4608      	mov	r0, r1
  40fe60:	f00b f844 	bl	41aeec <.LFE3>

0040fe64 <.LVL710>:
  while (fp_iseven (&v) == FP_YES) {
  40fe64:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
  40fe68:	2b00      	cmp	r3, #0
  40fe6a:	dd04      	ble.n	40fe76 <.LVL710+0x12>
  40fe6c:	f8dd 3680 	ldr.w	r3, [sp, #1664]	; 0x680
  40fe70:	f013 0f01 	tst.w	r3, #1
  40fe74:	d0ca      	beq.n	40fe0c <.LVL705>
  if (fp_cmp (&u, &v) != FP_LT) {
  40fe76:	4621      	mov	r1, r4
  40fe78:	f50d 608a 	add.w	r0, sp, #1104	; 0x450
  40fe7c:	f00d ffc1 	bl	41de02 <.LFE7>

0040fe80 <.LVL711>:
  40fe80:	f1b0 3fff 	cmp.w	r0, #4294967295
  40fe84:	f43f aed8 	beq.w	40fc38 <.LBB138>
    fp_sub (&u, &v, &u);
  40fe88:	f50d 628a 	add.w	r2, sp, #1104	; 0x450
  40fe8c:	4621      	mov	r1, r4
  40fe8e:	4610      	mov	r0, r2
  40fe90:	f00d fb66 	bl	41d560 <.LFE162>

0040fe94 <.LVL712>:
    fp_sub (&A, &C, &A);
  40fe94:	f50d 620a 	add.w	r2, sp, #2208	; 0x8a0
  40fe98:	f50d 614f 	add.w	r1, sp, #3312	; 0xcf0
  40fe9c:	4610      	mov	r0, r2
  40fe9e:	f00d fb5f 	bl	41d560 <.LFE162>

0040fea2 <.LVL713>:
    fp_sub (&B, &D, &B);
  40fea2:	f60d 22c8 	addw	r2, sp, #2760	; 0xac8
  40fea6:	f60d 7118 	addw	r1, sp, #3864	; 0xf18
  40feaa:	4610      	mov	r0, r2
  40feac:	f00d fb58 	bl	41d560 <.LFE162>

0040feb0 <.LVL714>:
  if (fp_iszero (&u) == FP_NO)
  40feb0:	f8dd 3450 	ldr.w	r3, [sp, #1104]	; 0x450
  40feb4:	2b00      	cmp	r3, #0
  40feb6:	f43f aed4 	beq.w	40fc62 <.LVL658+0x2>
  while (fp_iseven (&u) == FP_YES) {
  40feba:	f8dd 3450 	ldr.w	r3, [sp, #1104]	; 0x450
  40febe:	2b00      	cmp	r3, #0
  40fec0:	ddd0      	ble.n	40fe64 <.LVL710>
  40fec2:	f8dd 3458 	ldr.w	r3, [sp, #1112]	; 0x458
  40fec6:	f013 0f01 	tst.w	r3, #1
  40feca:	d1cb      	bne.n	40fe64 <.LVL710>
    fp_div_2 (&u, &u);
  40fecc:	f50d 618a 	add.w	r1, sp, #1104	; 0x450
  40fed0:	4608      	mov	r0, r1
  40fed2:	f00b f80b 	bl	41aeec <.LFE3>

0040fed6 <.LVL715>:
    if (fp_isodd (&A) == FP_YES || fp_isodd (&B) == FP_YES) {
  40fed6:	4b4b      	ldr	r3, [pc, #300]	; (410004 <.LVL729+0x26>)
  40fed8:	f641 6230 	movw	r2, #7728	; 0x1e30
  40fedc:	446a      	add	r2, sp
  40fede:	58d3      	ldr	r3, [r2, r3]
  40fee0:	2b00      	cmp	r3, #0
  40fee2:	dd04      	ble.n	40feee <.LVL715+0x18>
  40fee4:	f8dd 38a8 	ldr.w	r3, [sp, #2216]	; 0x8a8
  40fee8:	f013 0f01 	tst.w	r3, #1
  40feec:	d10b      	bne.n	40ff06 <.LVL715+0x30>
  40feee:	4b46      	ldr	r3, [pc, #280]	; (410008 <.LVL729+0x2a>)
  40fef0:	f641 6230 	movw	r2, #7728	; 0x1e30
  40fef4:	446a      	add	r2, sp
  40fef6:	58d3      	ldr	r3, [r2, r3]
  40fef8:	2b00      	cmp	r3, #0
  40fefa:	dd10      	ble.n	40ff1e <.LVL717>
  40fefc:	f8dd 3ad0 	ldr.w	r3, [sp, #2768]	; 0xad0
  40ff00:	f013 0f01 	tst.w	r3, #1
  40ff04:	d00b      	beq.n	40ff1e <.LVL717>
      fp_add (&A, &y, &A);
  40ff06:	f50d 620a 	add.w	r2, sp, #2208	; 0x8a0
  40ff0a:	a98a      	add	r1, sp, #552	; 0x228
  40ff0c:	4610      	mov	r0, r2
  40ff0e:	f00d f9c3 	bl	41d298 <.LFE17>

0040ff12 <.LVL716>:
      fp_sub (&B, &x, &B);
  40ff12:	f60d 22c8 	addw	r2, sp, #2760	; 0xac8
  40ff16:	4669      	mov	r1, sp
  40ff18:	4610      	mov	r0, r2
  40ff1a:	f00d fb21 	bl	41d560 <.LFE162>

0040ff1e <.LVL717>:
    fp_div_2 (&A, &A);
  40ff1e:	f50d 610a 	add.w	r1, sp, #2208	; 0x8a0
  40ff22:	4608      	mov	r0, r1
  40ff24:	f00a ffe2 	bl	41aeec <.LFE3>

0040ff28 <.LVL718>:
    fp_div_2 (&B, &B);
  40ff28:	f60d 21c8 	addw	r1, sp, #2760	; 0xac8
  40ff2c:	4608      	mov	r0, r1
  40ff2e:	f00a ffdd 	bl	41aeec <.LFE3>

0040ff32 <.LVL719>:
  40ff32:	e7c2      	b.n	40feba <.LVL714+0xa>

0040ff34 <.LBE157>:
      fp_sub (&B, &x, &B);
  40ff34:	f241 3268 	movw	r2, #4968	; 0x1368
  40ff38:	446a      	add	r2, sp
  40ff3a:	f641 4108 	movw	r1, #7176	; 0x1c08
  40ff3e:	4469      	add	r1, sp
  40ff40:	4610      	mov	r0, r2
  40ff42:	f00d fb0d 	bl	41d560 <.LFE162>

0040ff46 <.LVL721>:
  40ff46:	e010      	b.n	40ff6a <.LVL722+0x1a>
    fp_div_2 (&u, &u);
  40ff48:	4639      	mov	r1, r7
  40ff4a:	4638      	mov	r0, r7
  40ff4c:	f00a ffce 	bl	41aeec <.LFE3>

0040ff50 <.LVL722>:
    if (fp_isodd (&B) == FP_YES) {
  40ff50:	f241 3368 	movw	r3, #4968	; 0x1368
  40ff54:	446b      	add	r3, sp
  40ff56:	681b      	ldr	r3, [r3, #0]
  40ff58:	2b00      	cmp	r3, #0
  40ff5a:	dd06      	ble.n	40ff6a <.LVL722+0x1a>
  40ff5c:	f241 3368 	movw	r3, #4968	; 0x1368
  40ff60:	446b      	add	r3, sp
  40ff62:	689b      	ldr	r3, [r3, #8]
  40ff64:	f013 0f01 	tst.w	r3, #1
  40ff68:	d1e4      	bne.n	40ff34 <.LBE157>
    fp_div_2 (&B, &B);
  40ff6a:	f241 3168 	movw	r1, #4968	; 0x1368
  40ff6e:	4469      	add	r1, sp
  40ff70:	4608      	mov	r0, r1
  40ff72:	f00a ffbb 	bl	41aeec <.LFE3>

0040ff76 <.LVL723>:
  40ff76:	e036      	b.n	40ffe6 <.LVL729+0x8>
      fp_sub (&D, &x, &D);
  40ff78:	4622      	mov	r2, r4
  40ff7a:	f641 4108 	movw	r1, #7176	; 0x1c08
  40ff7e:	4469      	add	r1, sp
  40ff80:	4620      	mov	r0, r4
  40ff82:	f00d faed 	bl	41d560 <.LFE162>

0040ff86 <.LVL724>:
  40ff86:	e00a      	b.n	40ff9e <.LVL725+0xe>
    fp_div_2 (&v, &v);
  40ff88:	4629      	mov	r1, r5
  40ff8a:	4628      	mov	r0, r5
  40ff8c:	f00a ffae 	bl	41aeec <.LFE3>

0040ff90 <.LVL725>:
    if (fp_isodd (&D) == FP_YES) {
  40ff90:	6823      	ldr	r3, [r4, #0]
  40ff92:	2b00      	cmp	r3, #0
  40ff94:	dd03      	ble.n	40ff9e <.LVL725+0xe>
  40ff96:	68a3      	ldr	r3, [r4, #8]
  40ff98:	f013 0f01 	tst.w	r3, #1
  40ff9c:	d1ec      	bne.n	40ff78 <.LVL723+0x2>
    fp_div_2 (&D, &D);
  40ff9e:	4621      	mov	r1, r4
  40ffa0:	4620      	mov	r0, r4
  40ffa2:	f00a ffa3 	bl	41aeec <.LFE3>

0040ffa6 <.LVL726>:
  while (fp_iseven (&v) == FP_YES) {
  40ffa6:	6833      	ldr	r3, [r6, #0]
  40ffa8:	2b00      	cmp	r3, #0
  40ffaa:	dd03      	ble.n	40ffb4 <.LVL726+0xe>
  40ffac:	68b3      	ldr	r3, [r6, #8]
  40ffae:	f013 0f01 	tst.w	r3, #1
  40ffb2:	d0e9      	beq.n	40ff88 <.LVL724+0x2>
  if (fp_cmp (&u, &v) != FP_LT) {
  40ffb4:	4629      	mov	r1, r5
  40ffb6:	4638      	mov	r0, r7
  40ffb8:	f00d ff23 	bl	41de02 <.LFE7>

0040ffbc <.LVL727>:
  40ffbc:	f1b0 3fff 	cmp.w	r0, #4294967295
  40ffc0:	f43f ae81 	beq.w	40fcc6 <.LVL668>
    fp_sub (&u, &v, &u);
  40ffc4:	463a      	mov	r2, r7
  40ffc6:	4629      	mov	r1, r5
  40ffc8:	4638      	mov	r0, r7
  40ffca:	f00d fac9 	bl	41d560 <.LFE162>

0040ffce <.LVL728>:
    fp_sub (&B, &D, &B);
  40ffce:	f241 3268 	movw	r2, #4968	; 0x1368
  40ffd2:	446a      	add	r2, sp
  40ffd4:	f50d 518a 	add.w	r1, sp, #4416	; 0x1140
  40ffd8:	4610      	mov	r0, r2
  40ffda:	f00d fac1 	bl	41d560 <.LFE162>

0040ffde <.LVL729>:
  if (fp_iszero (&u) == FP_NO) {
  40ffde:	683b      	ldr	r3, [r7, #0]
  40ffe0:	2b00      	cmp	r3, #0
  40ffe2:	f43f ae7e 	beq.w	40fce2 <.LVL670+0x2>
  while (fp_iseven (&u) == FP_YES) {
  40ffe6:	683b      	ldr	r3, [r7, #0]
  40ffe8:	2b00      	cmp	r3, #0
  40ffea:	dd03      	ble.n	40fff4 <.LVL729+0x16>
  40ffec:	68bb      	ldr	r3, [r7, #8]
  40ffee:	f013 0f01 	tst.w	r3, #1
  40fff2:	d0a9      	beq.n	40ff48 <.LVL721+0x2>
    if (fp_isodd (&D) == FP_YES) {
  40fff4:	f50d 548a 	add.w	r4, sp, #4416	; 0x1140
  40fff8:	e7d5      	b.n	40ffa6 <.LVL726>
  40fffa:	bf00      	nop
  40fffc:	ffffe1d0 	.word	0xffffe1d0
  410000:	ffffe3f8 	.word	0xffffe3f8
  410004:	ffffea70 	.word	0xffffea70
  410008:	ffffec98 	.word	0xffffec98

Disassembly of section .text.inflate_fast%81:

0041000c <inflate_fast>:
      output space.
 */
void ZLIB_INTERNAL inflate_fast(strm, start)
z_streamp strm;
unsigned start;         /* inflate()'s starting value for strm->avail_out */
{
  41000c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00410010 <.LCFI0>:
  410010:	b093      	sub	sp, #76	; 0x4c

00410012 <.LCFI1>:
  410012:	4682      	mov	sl, r0
    unsigned len;               /* match length, unused bytes */
    unsigned dist;              /* match distance */
    unsigned char FAR *from;    /* where to copy match from */

    /* copy state to local variables */
    state = (struct inflate_state FAR *)strm->state;
  410014:	f8d0 b01c 	ldr.w	fp, [r0, #28]
    in = strm->next_in - OFF;
  410018:	6803      	ldr	r3, [r0, #0]
  41001a:	f103 39ff 	add.w	r9, r3, #4294967295

0041001e <.LVL2>:
    last = in + (strm->avail_in - 5);
  41001e:	6843      	ldr	r3, [r0, #4]
  410020:	3b05      	subs	r3, #5
  410022:	444b      	add	r3, r9
  410024:	9302      	str	r3, [sp, #8]

00410026 <.LVL3>:
    out = strm->next_out - OFF;
  410026:	68c5      	ldr	r5, [r0, #12]
  410028:	3d01      	subs	r5, #1

0041002a <.LVL4>:
    beg = out - (start - strm->avail_out);
  41002a:	6903      	ldr	r3, [r0, #16]

0041002c <.LVL5>:
  41002c:	1a59      	subs	r1, r3, r1

0041002e <.LVL6>:
  41002e:	186a      	adds	r2, r5, r1
  410030:	9206      	str	r2, [sp, #24]

00410032 <.LVL7>:
    end = out + (strm->avail_out - 257);
  410032:	f2a3 1301 	subw	r3, r3, #257	; 0x101
  410036:	18eb      	adds	r3, r5, r3
  410038:	9301      	str	r3, [sp, #4]

0041003a <.LVL8>:
#ifdef INFLATE_STRICT
    dmax = state->dmax;
#endif
    wsize = state->wsize;
  41003a:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28

0041003e <.LVL9>:
  41003e:	461f      	mov	r7, r3
  410040:	9309      	str	r3, [sp, #36]	; 0x24

00410042 <.LVL10>:
    whave = state->whave;
  410042:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c

00410046 <.LVL11>:
  410046:	9307      	str	r3, [sp, #28]

00410048 <.LVL12>:
    wnext = state->wnext;
  410048:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30

0041004c <.LVL13>:
  41004c:	9304      	str	r3, [sp, #16]

0041004e <.LVL14>:
    window = state->window;
  41004e:	f8db 1034 	ldr.w	r1, [fp, #52]	; 0x34
  410052:	9108      	str	r1, [sp, #32]

00410054 <.LVL15>:
    hold = state->hold;
  410054:	f8db 1038 	ldr.w	r1, [fp, #56]	; 0x38

00410058 <.LVL16>:
    bits = state->bits;
  410058:	f8db 003c 	ldr.w	r0, [fp, #60]	; 0x3c

0041005c <.LVL17>:
    lcode = state->lencode;
  41005c:	f8db 404c 	ldr.w	r4, [fp, #76]	; 0x4c

00410060 <.LVL18>:
    dcode = state->distcode;
  410060:	f8db 8050 	ldr.w	r8, [fp, #80]	; 0x50
    lmask = (1U << state->lenbits) - 1;
  410064:	2201      	movs	r2, #1

00410066 <.LVL20>:
  410066:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54

0041006a <.LVL21>:
  41006a:	fa02 f303 	lsl.w	r3, r2, r3
  41006e:	1e5e      	subs	r6, r3, #1
  410070:	9603      	str	r6, [sp, #12]

00410072 <.LVL22>:
    dmask = (1U << state->distbits) - 1;
  410072:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
  410076:	fa02 f303 	lsl.w	r3, r2, r3
  41007a:	1e5e      	subs	r6, r3, #1

0041007c <.LVL23>:
  41007c:	9605      	str	r6, [sp, #20]

0041007e <.LVL24>:
                    if (bits < op) {
                        hold += (unsigned long)(PUP(in)) << bits;
                        bits += 8;
                    }
                }
                dist += (unsigned)hold & ((1U << op) - 1);
  41007e:	4616      	mov	r6, r2

00410080 <.LVL25>:
                            } while (--op);
                            from = out - dist;  /* rest from output */
                        }
                    }
                    else if (wnext < op) {      /* wrap around window */
                        from += wsize + wnext - op;
  410080:	463b      	mov	r3, r7
  410082:	9a04      	ldr	r2, [sp, #16]
  410084:	4413      	add	r3, r2
  410086:	930b      	str	r3, [sp, #44]	; 0x2c
                        if (state->sane) {
  410088:	f50b 53de 	add.w	r3, fp, #7104	; 0x1bc0
  41008c:	930a      	str	r3, [sp, #40]	; 0x28
  41008e:	e00a      	b.n	4100a6 <.LVL27+0x10>

00410090 <.LVL26>:
            PUP(out) = (unsigned char)(here.val);
  410090:	f885 e001 	strb.w	lr, [r5, #1]
  410094:	3501      	adds	r5, #1

00410096 <.LVL27>:
        else {
            strm->msg = (char *)"invalid literal/length code";
            state->mode = BAD;
            break;
        }
    } while (in < last && out < end);
  410096:	9b02      	ldr	r3, [sp, #8]
  410098:	4599      	cmp	r9, r3
  41009a:	f080 8097 	bcs.w	4101cc <.LVL84>
  41009e:	9b01      	ldr	r3, [sp, #4]
  4100a0:	429d      	cmp	r5, r3
  4100a2:	f080 8093 	bcs.w	4101cc <.LVL84>
        if (bits < 15) {
  4100a6:	280e      	cmp	r0, #14
  4100a8:	d80c      	bhi.n	4100c4 <.LVL33>

004100aa <.LVL28>:
            hold += (unsigned long)(PUP(in)) << bits;
  4100aa:	f899 3002 	ldrb.w	r3, [r9, #2]
            bits += 8;
  4100ae:	f100 0208 	add.w	r2, r0, #8

004100b2 <.LVL29>:
            hold += (unsigned long)(PUP(in)) << bits;
  4100b2:	4093      	lsls	r3, r2
            hold += (unsigned long)(PUP(in)) << bits;
  4100b4:	f899 2001 	ldrb.w	r2, [r9, #1]

004100b8 <.LVL30>:
  4100b8:	4082      	lsls	r2, r0
            hold += (unsigned long)(PUP(in)) << bits;
  4100ba:	4413      	add	r3, r2
  4100bc:	4419      	add	r1, r3

004100be <.LVL31>:
            bits += 8;
  4100be:	3010      	adds	r0, #16

004100c0 <.LVL32>:
            hold += (unsigned long)(PUP(in)) << bits;
  4100c0:	f109 0902 	add.w	r9, r9, #2

004100c4 <.LVL33>:
        here = lcode[hold & lmask];
  4100c4:	9b03      	ldr	r3, [sp, #12]
  4100c6:	ea01 0203 	and.w	r2, r1, r3
  4100ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
  4100ce:	f814 2022 	ldrb.w	r2, [r4, r2, lsl #2]

004100d2 <.LVL34>:
  4100d2:	f8b3 e002 	ldrh.w	lr, [r3, #2]

004100d6 <.LVL35>:
        op = (unsigned)(here.bits);
  4100d6:	785b      	ldrb	r3, [r3, #1]

004100d8 <.LVL36>:
        hold >>= op;
  4100d8:	40d9      	lsrs	r1, r3

004100da <.LVL37>:
        bits -= op;
  4100da:	1ac0      	subs	r0, r0, r3
        op = (unsigned)(here.op);
  4100dc:	4617      	mov	r7, r2

004100de <.LVL39>:
        if (op == 0) {                          /* literal */
  4100de:	2a00      	cmp	r2, #0
  4100e0:	d0d6      	beq.n	410090 <.LVL26>
        else if (op & 16) {                     /* length base */
  4100e2:	f012 0f10 	tst.w	r2, #16
  4100e6:	d121      	bne.n	41012c <.LVL49+0x10>
        else if ((op & 64) == 0) {              /* 2nd level length code */
  4100e8:	f012 0f40 	tst.w	r2, #64	; 0x40
  4100ec:	d116      	bne.n	41011c <.LVL49>

004100ee <.LVL40>:
            here = lcode[here.val + (hold & ((1U << op) - 1))];
  4100ee:	fa06 f707 	lsl.w	r7, r6, r7
  4100f2:	3f01      	subs	r7, #1
  4100f4:	400f      	ands	r7, r1
  4100f6:	44be      	add	lr, r7

004100f8 <.LVL41>:
  4100f8:	eb04 038e 	add.w	r3, r4, lr, lsl #2

004100fc <.LVL42>:
  4100fc:	f814 202e 	ldrb.w	r2, [r4, lr, lsl #2]

00410100 <.LVL43>:
  410100:	f8b3 e002 	ldrh.w	lr, [r3, #2]

00410104 <.LDL1>:
        op = (unsigned)(here.bits);
  410104:	785b      	ldrb	r3, [r3, #1]

00410106 <.LVL45>:
        hold >>= op;
  410106:	40d9      	lsrs	r1, r3
        bits -= op;
  410108:	1ac0      	subs	r0, r0, r3
        op = (unsigned)(here.op);
  41010a:	4617      	mov	r7, r2

0041010c <.LVL48>:
        if (op == 0) {                          /* literal */
  41010c:	2a00      	cmp	r2, #0
  41010e:	d0bf      	beq.n	410090 <.LVL26>
        else if (op & 16) {                     /* length base */
  410110:	f012 0f10 	tst.w	r2, #16
  410114:	d10a      	bne.n	41012c <.LVL49+0x10>
        else if ((op & 64) == 0) {              /* 2nd level length code */
  410116:	f012 0f40 	tst.w	r2, #64	; 0x40
  41011a:	d0e8      	beq.n	4100ee <.LVL40>

0041011c <.LVL49>:
        else if (op & 32) {                     /* end-of-block */
  41011c:	f012 0f20 	tst.w	r2, #32
  410120:	f000 817c 	beq.w	41041c <.LVL176>
            state->mode = TYPE;
  410124:	230b      	movs	r3, #11
  410126:	f88b 3000 	strb.w	r3, [fp]
            break;
  41012a:	e04f      	b.n	4101cc <.LVL84>
            len = (unsigned)(here.val);
  41012c:	4673      	mov	r3, lr

0041012e <.LVL50>:
            if (op) {
  41012e:	f012 020f 	ands.w	r2, r2, #15

00410132 <.LVL51>:
  410132:	d00f      	beq.n	410154 <.LVL56+0xe>

00410134 <.LVL52>:
                if (bits < op) {
  410134:	4282      	cmp	r2, r0
  410136:	d906      	bls.n	410146 <.LVL56>

00410138 <.LVL53>:
                    hold += (unsigned long)(PUP(in)) << bits;
  410138:	f899 7001 	ldrb.w	r7, [r9, #1]
  41013c:	4087      	lsls	r7, r0
  41013e:	4439      	add	r1, r7
                    bits += 8;
  410140:	3008      	adds	r0, #8
                    hold += (unsigned long)(PUP(in)) << bits;
  410142:	f109 0901 	add.w	r9, r9, #1

00410146 <.LVL56>:
                len += (unsigned)hold & ((1U << op) - 1);
  410146:	fa06 f702 	lsl.w	r7, r6, r2
  41014a:	3f01      	subs	r7, #1
  41014c:	400f      	ands	r7, r1
  41014e:	443b      	add	r3, r7
                hold >>= op;
  410150:	40d1      	lsrs	r1, r2
                bits -= op;
  410152:	1a80      	subs	r0, r0, r2
            if (bits < 15) {
  410154:	280e      	cmp	r0, #14
  410156:	d80c      	bhi.n	410172 <.LVL66>

00410158 <.LVL60>:
                hold += (unsigned long)(PUP(in)) << bits;
  410158:	f899 2002 	ldrb.w	r2, [r9, #2]

0041015c <.LVL61>:
                bits += 8;
  41015c:	f100 0708 	add.w	r7, r0, #8

00410160 <.LVL62>:
                hold += (unsigned long)(PUP(in)) << bits;
  410160:	40ba      	lsls	r2, r7
                hold += (unsigned long)(PUP(in)) << bits;
  410162:	f899 7001 	ldrb.w	r7, [r9, #1]

00410166 <.LVL63>:
  410166:	4087      	lsls	r7, r0
                hold += (unsigned long)(PUP(in)) << bits;
  410168:	443a      	add	r2, r7
  41016a:	4411      	add	r1, r2

0041016c <.LVL64>:
                bits += 8;
  41016c:	3010      	adds	r0, #16

0041016e <.LVL65>:
                hold += (unsigned long)(PUP(in)) << bits;
  41016e:	f109 0902 	add.w	r9, r9, #2

00410172 <.LVL66>:
            here = dcode[hold & dmask];
  410172:	9a05      	ldr	r2, [sp, #20]
  410174:	400a      	ands	r2, r1
  410176:	eb08 0782 	add.w	r7, r8, r2, lsl #2
  41017a:	f818 2022 	ldrb.w	r2, [r8, r2, lsl #2]

0041017e <.LVL67>:
  41017e:	f8b7 c002 	ldrh.w	ip, [r7, #2]

00410182 <.LVL68>:
            op = (unsigned)(here.bits);
  410182:	787f      	ldrb	r7, [r7, #1]

00410184 <.LVL69>:
            hold >>= op;
  410184:	40f9      	lsrs	r1, r7

00410186 <.LVL70>:
            bits -= op;
  410186:	1bc0      	subs	r0, r0, r7
            op = (unsigned)(here.op);
  410188:	4617      	mov	r7, r2

0041018a <.LVL72>:
            if (op & 16) {                      /* distance base */
  41018a:	f012 0f10 	tst.w	r2, #16
  41018e:	d145      	bne.n	41021c <.LCFI3>
            else if ((op & 64) == 0) {          /* 2nd level distance code */
  410190:	f012 0f40 	tst.w	r2, #64	; 0x40
  410194:	d114      	bne.n	4101c0 <.LVL82>

00410196 <.LVL73>:
                here = dcode[here.val + (hold & ((1U << op) - 1))];
  410196:	fa06 f707 	lsl.w	r7, r6, r7
  41019a:	3f01      	subs	r7, #1
  41019c:	400f      	ands	r7, r1
  41019e:	44bc      	add	ip, r7

004101a0 <.LVL74>:
  4101a0:	eb08 078c 	add.w	r7, r8, ip, lsl #2

004101a4 <.LVL75>:
  4101a4:	f818 202c 	ldrb.w	r2, [r8, ip, lsl #2]

004101a8 <.LVL76>:
  4101a8:	f8b7 c002 	ldrh.w	ip, [r7, #2]

004101ac <.LDL2>:
            op = (unsigned)(here.bits);
  4101ac:	787f      	ldrb	r7, [r7, #1]

004101ae <.LVL78>:
            hold >>= op;
  4101ae:	40f9      	lsrs	r1, r7
            bits -= op;
  4101b0:	1bc0      	subs	r0, r0, r7
            op = (unsigned)(here.op);
  4101b2:	4617      	mov	r7, r2

004101b4 <.LVL81>:
            if (op & 16) {                      /* distance base */
  4101b4:	f012 0f10 	tst.w	r2, #16
  4101b8:	d130      	bne.n	41021c <.LCFI3>
            else if ((op & 64) == 0) {          /* 2nd level distance code */
  4101ba:	f012 0f40 	tst.w	r2, #64	; 0x40
  4101be:	d0ea      	beq.n	410196 <.LVL73>

004101c0 <.LVL82>:
                strm->msg = (char *)"invalid distance code";
  4101c0:	4b9f      	ldr	r3, [pc, #636]	; (410440 <.LVL180+0x6>)

004101c2 <.LVL83>:
  4101c2:	f8ca 3018 	str.w	r3, [sl, #24]
                state->mode = BAD;
  4101c6:	231d      	movs	r3, #29
  4101c8:	f88b 3000 	strb.w	r3, [fp]

004101cc <.LVL84>:

    /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
    len = bits >> 3;
    in -= len;
  4101cc:	eba9 03d0 	sub.w	r3, r9, r0, lsr #3

004101d0 <.LVL85>:
  4101d0:	f000 0007 	and.w	r0, r0, #7

004101d4 <.LVL86>:
    bits -= len << 3;
    hold &= (1U << bits) - 1;
  4101d4:	2201      	movs	r2, #1
  4101d6:	4082      	lsls	r2, r0
  4101d8:	3a01      	subs	r2, #1
  4101da:	4011      	ands	r1, r2

    /* update state and return */
    strm->next_in = in + OFF;
  4101dc:	1c5a      	adds	r2, r3, #1
  4101de:	f8ca 2000 	str.w	r2, [sl]
    strm->next_out = out + OFF;
  4101e2:	1c6a      	adds	r2, r5, #1
  4101e4:	f8ca 200c 	str.w	r2, [sl, #12]
    strm->avail_in = (unsigned)(in < last ? 5 + (last - in) : 5 - (in - last));
  4101e8:	9c02      	ldr	r4, [sp, #8]

004101ea <.LVL88>:
  4101ea:	429c      	cmp	r4, r3
  4101ec:	f240 811f 	bls.w	41042e <.LVL178>
  4101f0:	1ae3      	subs	r3, r4, r3

004101f2 <.LVL89>:
  4101f2:	3305      	adds	r3, #5
  4101f4:	f8ca 3004 	str.w	r3, [sl, #4]
    strm->avail_out = (unsigned)(out < end ?
  4101f8:	9b01      	ldr	r3, [sp, #4]
  4101fa:	429d      	cmp	r5, r3
  4101fc:	f0c0 811c 	bcc.w	410438 <.LVL179+0x6>
                                 257 + (end - out) : 257 - (out - end));
  410200:	9b01      	ldr	r3, [sp, #4]
  410202:	1aed      	subs	r5, r5, r3

00410204 <.LVL90>:
  410204:	f240 1301 	movw	r3, #257	; 0x101
  410208:	1b5b      	subs	r3, r3, r5
    strm->avail_out = (unsigned)(out < end ?
  41020a:	f8ca 3010 	str.w	r3, [sl, #16]
    state->hold = hold;
  41020e:	f8cb 1038 	str.w	r1, [fp, #56]	; 0x38

00410212 <.LVL91>:
    state->bits = bits;
  410212:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
    return;
}
  410216:	b013      	add	sp, #76	; 0x4c

00410218 <.LCFI2>:
  410218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0041021c <.LCFI3>:
                dist = (unsigned)(here.val);
  41021c:	4667      	mov	r7, ip

0041021e <.LVL93>:
                op &= 15;                       /* number of extra bits */
  41021e:	f002 020f 	and.w	r2, r2, #15
                if (bits < op) {
  410222:	4282      	cmp	r2, r0
  410224:	d90b      	bls.n	41023e <.LVL99>

00410226 <.LVL95>:
                    hold += (unsigned long)(PUP(in)) << bits;
  410226:	f899 e001 	ldrb.w	lr, [r9, #1]
  41022a:	fa0e fe00 	lsl.w	lr, lr, r0
  41022e:	4471      	add	r1, lr
                    bits += 8;
  410230:	f100 0e08 	add.w	lr, r0, #8

00410234 <.LVL97>:
                    if (bits < op) {
  410234:	4572      	cmp	r2, lr
  410236:	d860      	bhi.n	4102fa <.LVL128>
                    hold += (unsigned long)(PUP(in)) << bits;
  410238:	f109 0901 	add.w	r9, r9, #1

0041023c <.LVL98>:
                    bits += 8;
  41023c:	4670      	mov	r0, lr

0041023e <.LVL99>:
                dist += (unsigned)hold & ((1U << op) - 1);
  41023e:	fa06 fe02 	lsl.w	lr, r6, r2
  410242:	f10e 3eff 	add.w	lr, lr, #4294967295
  410246:	ea0e 0e01 	and.w	lr, lr, r1
  41024a:	eb0e 0c07 	add.w	ip, lr, r7

0041024e <.LVL100>:
                hold >>= op;
  41024e:	40d1      	lsrs	r1, r2
                bits -= op;
  410250:	1a80      	subs	r0, r0, r2
                op = (unsigned)(out - beg);     /* max distance in output */
  410252:	9a06      	ldr	r2, [sp, #24]

00410254 <.LVL103>:
  410254:	1aaa      	subs	r2, r5, r2

00410256 <.LVL104>:
                if (dist > op) {                /* see if copy from window */
  410256:	4594      	cmp	ip, r2
  410258:	f240 80c3 	bls.w	4103e2 <.LVL162>
                    op = dist - op;             /* distance back in window */
  41025c:	ebac 0202 	sub.w	r2, ip, r2

00410260 <.LVL105>:
  410260:	920d      	str	r2, [sp, #52]	; 0x34

00410262 <.LVL106>:
                    if (op > whave) {
  410262:	9f07      	ldr	r7, [sp, #28]
  410264:	4297      	cmp	r7, r2
  410266:	d203      	bcs.n	410270 <.LVL107+0x6>
                        if (state->sane) {
  410268:	9a0a      	ldr	r2, [sp, #40]	; 0x28

0041026a <.LVL107>:
  41026a:	6812      	ldr	r2, [r2, #0]
  41026c:	2a00      	cmp	r2, #0
  41026e:	d14d      	bne.n	41030c <.LVL133>
                    from = window - OFF;
  410270:	9a08      	ldr	r2, [sp, #32]
  410272:	3a01      	subs	r2, #1
  410274:	920e      	str	r2, [sp, #56]	; 0x38

00410276 <.LVL108>:
                    if (wnext == 0) {           /* very common case */
  410276:	9a04      	ldr	r2, [sp, #16]

00410278 <.LVL109>:
  410278:	2a00      	cmp	r2, #0
  41027a:	d14e      	bne.n	41031a <.LVL135>
                        from += wsize - op;
  41027c:	9f09      	ldr	r7, [sp, #36]	; 0x24
  41027e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  410280:	1aba      	subs	r2, r7, r2
  410282:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  410284:	46be      	mov	lr, r7
  410286:	443a      	add	r2, r7
  410288:	920c      	str	r2, [sp, #48]	; 0x30

0041028a <.LVL110>:
                        if (op < len) {         /* some from window */
  41028a:	9a0d      	ldr	r2, [sp, #52]	; 0x34

0041028c <.LVL111>:
  41028c:	4293      	cmp	r3, r2
  41028e:	d918      	bls.n	4102c2 <.LVL116>
                            len -= op;
  410290:	1a9b      	subs	r3, r3, r2
  410292:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  410294:	463a      	mov	r2, r7
  410296:	9f09      	ldr	r7, [sp, #36]	; 0x24
  410298:	443a      	add	r2, r7
  41029a:	920e      	str	r2, [sp, #56]	; 0x38
  41029c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  4102a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4102a2:	462f      	mov	r7, r5
  4102a4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38

004102a8 <.LVL113>:
                                PUP(out) = PUP(from);
  4102a8:	f812 ef01 	ldrb.w	lr, [r2, #1]!

004102ac <.LVL114>:
  4102ac:	f807 ef01 	strb.w	lr, [r7, #1]!
                            } while (--op);
  4102b0:	454a      	cmp	r2, r9
  4102b2:	d1f9      	bne.n	4102a8 <.LVL113>
  4102b4:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  4102b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34

004102ba <.LVL115>:
  4102ba:	4415      	add	r5, r2
                            from = out - dist;  /* rest from output */
  4102bc:	eba5 020c 	sub.w	r2, r5, ip
  4102c0:	920c      	str	r2, [sp, #48]	; 0x30

004102c2 <.LVL116>:
                    while (len > 2) {
  4102c2:	2b02      	cmp	r3, #2
  4102c4:	d90c      	bls.n	4102e0 <.LVL123>
  4102c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30

004102c8 <.LVL117>:
                        PUP(out) = PUP(from);
  4102c8:	7857      	ldrb	r7, [r2, #1]
  4102ca:	706f      	strb	r7, [r5, #1]

004102cc <.LVL118>:
                        PUP(out) = PUP(from);
  4102cc:	7897      	ldrb	r7, [r2, #2]
  4102ce:	70af      	strb	r7, [r5, #2]

004102d0 <.LVL119>:
                        PUP(out) = PUP(from);
  4102d0:	f812 7f03 	ldrb.w	r7, [r2, #3]!

004102d4 <.LVL120>:
  4102d4:	f805 7f03 	strb.w	r7, [r5, #3]!

004102d8 <.LVL121>:
                        len -= 3;
  4102d8:	3b03      	subs	r3, #3

004102da <.LVL122>:
                    while (len > 2) {
  4102da:	2b02      	cmp	r3, #2
  4102dc:	d8f4      	bhi.n	4102c8 <.LVL117>
  4102de:	920c      	str	r2, [sp, #48]	; 0x30

004102e0 <.LVL123>:
                    if (len) {
  4102e0:	2b00      	cmp	r3, #0
  4102e2:	f43f aed8 	beq.w	410096 <.LVL27>

004102e6 <.LVL124>:
                        PUP(out) = PUP(from);
  4102e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4102e8:	7857      	ldrb	r7, [r2, #1]
  4102ea:	706f      	strb	r7, [r5, #1]
                        if (len > 1)
  4102ec:	2b01      	cmp	r3, #1
  4102ee:	d976      	bls.n	4103de <.LVL160>

004102f0 <.LVL125>:
                            PUP(out) = PUP(from);
  4102f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30

004102f2 <.LVL126>:
  4102f2:	789b      	ldrb	r3, [r3, #2]
  4102f4:	70ab      	strb	r3, [r5, #2]
  4102f6:	3502      	adds	r5, #2

004102f8 <.LVL127>:
  4102f8:	e6cd      	b.n	410096 <.LVL27>

004102fa <.LVL128>:
                        hold += (unsigned long)(PUP(in)) << bits;
  4102fa:	f899 c002 	ldrb.w	ip, [r9, #2]
  4102fe:	fa0c fe0e 	lsl.w	lr, ip, lr

00410302 <.LVL129>:
  410302:	4471      	add	r1, lr
                        bits += 8;
  410304:	3010      	adds	r0, #16

00410306 <.LVL131>:
                        hold += (unsigned long)(PUP(in)) << bits;
  410306:	f109 0902 	add.w	r9, r9, #2

0041030a <.LVL132>:
  41030a:	e798      	b.n	41023e <.LVL99>

0041030c <.LVL133>:
                            strm->msg =
  41030c:	4b4d      	ldr	r3, [pc, #308]	; (410444 <.LVL180+0xa>)

0041030e <.LVL134>:
  41030e:	f8ca 3018 	str.w	r3, [sl, #24]
                            state->mode = BAD;
  410312:	231d      	movs	r3, #29
  410314:	f88b 3000 	strb.w	r3, [fp]
                            break;
  410318:	e758      	b.n	4101cc <.LVL84>

0041031a <.LVL135>:
                    else if (wnext < op) {      /* wrap around window */
  41031a:	9a04      	ldr	r2, [sp, #16]
  41031c:	4696      	mov	lr, r2
  41031e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  410320:	4596      	cmp	lr, r2
  410322:	d236      	bcs.n	410392 <.LVL151>
                        from += wsize + wnext - op;
  410324:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  410326:	1aba      	subs	r2, r7, r2
  410328:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  41032a:	19d7      	adds	r7, r2, r7
  41032c:	970c      	str	r7, [sp, #48]	; 0x30

0041032e <.LVL136>:
                        op -= wnext;
  41032e:	9f0d      	ldr	r7, [sp, #52]	; 0x34

00410330 <.LVL137>:
  410330:	4672      	mov	r2, lr
  410332:	1aba      	subs	r2, r7, r2
  410334:	920f      	str	r2, [sp, #60]	; 0x3c

00410336 <.LVL138>:
                        if (op < len) {         /* some from end of window */
  410336:	4293      	cmp	r3, r2
  410338:	d9c3      	bls.n	4102c2 <.LVL116>
                            len -= op;
  41033a:	1a9b      	subs	r3, r3, r2
  41033c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  41033e:	443a      	add	r2, r7

00410340 <.LVL140>:
  410340:	9210      	str	r2, [sp, #64]	; 0x40
  410342:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  410346:	463a      	mov	r2, r7
  410348:	462f      	mov	r7, r5
  41034a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40

0041034e <.LVL141>:
                                PUP(out) = PUP(from);
  41034e:	f812 ef01 	ldrb.w	lr, [r2, #1]!

00410352 <.LVL142>:
  410352:	f807 ef01 	strb.w	lr, [r7, #1]!
                            } while (--op);
  410356:	454a      	cmp	r2, r9
  410358:	d1f9      	bne.n	41034e <.LVL141>
  41035a:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
  41035e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c

00410360 <.LVL143>:
  410360:	442a      	add	r2, r5
  410362:	4617      	mov	r7, r2

00410364 <.LVL144>:
                            if (wnext < len) {  /* some from start of window */
  410364:	9a04      	ldr	r2, [sp, #16]
  410366:	429a      	cmp	r2, r3
  410368:	d235      	bcs.n	4103d6 <.LVL159>

0041036a <.LVL145>:
                                len -= op;
  41036a:	1a9b      	subs	r3, r3, r2
  41036c:	463a      	mov	r2, r7

0041036e <.LVL147>:
  41036e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  410370:	443d      	add	r5, r7
  410372:	46ae      	mov	lr, r5
  410374:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  410378:	9f0e      	ldr	r7, [sp, #56]	; 0x38

0041037a <.LVL148>:
                                    PUP(out) = PUP(from);
  41037a:	f817 9f01 	ldrb.w	r9, [r7, #1]!

0041037e <.LVL149>:
  41037e:	f802 9f01 	strb.w	r9, [r2, #1]!
                                } while (--op);
  410382:	4572      	cmp	r2, lr
  410384:	d1f9      	bne.n	41037a <.LVL148>
  410386:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
                                from = out - dist;      /* rest from output */
  41038a:	eba5 020c 	sub.w	r2, r5, ip
  41038e:	920c      	str	r2, [sp, #48]	; 0x30

00410390 <.LVL150>:
  410390:	e797      	b.n	4102c2 <.LVL116>

00410392 <.LVL151>:
                        from += wnext - op;
  410392:	9f04      	ldr	r7, [sp, #16]
  410394:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  410396:	1aba      	subs	r2, r7, r2
  410398:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  41039a:	46be      	mov	lr, r7
  41039c:	443a      	add	r2, r7
  41039e:	920c      	str	r2, [sp, #48]	; 0x30

004103a0 <.LVL152>:
                        if (op < len) {         /* some from window */
  4103a0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  4103a2:	42bb      	cmp	r3, r7
  4103a4:	d98d      	bls.n	4102c2 <.LVL116>
                            len -= op;
  4103a6:	1bdb      	subs	r3, r3, r7
  4103a8:	462f      	mov	r7, r5
  4103aa:	9a04      	ldr	r2, [sp, #16]

004103ac <.LVL154>:
  4103ac:	4496      	add	lr, r2
  4103ae:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  4103b2:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  4103b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4103b8:	46f1      	mov	r9, lr

004103ba <.LVL155>:
                                PUP(out) = PUP(from);
  4103ba:	f812 ef01 	ldrb.w	lr, [r2, #1]!

004103be <.LVL156>:
  4103be:	f807 ef01 	strb.w	lr, [r7, #1]!
                            } while (--op);
  4103c2:	454a      	cmp	r2, r9
  4103c4:	d1f9      	bne.n	4103ba <.LVL155>
  4103c6:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  4103ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34

004103cc <.LVL157>:
  4103cc:	4415      	add	r5, r2
                            from = out - dist;  /* rest from output */
  4103ce:	eba5 020c 	sub.w	r2, r5, ip
  4103d2:	920c      	str	r2, [sp, #48]	; 0x30

004103d4 <.LVL158>:
  4103d4:	e775      	b.n	4102c2 <.LVL116>

004103d6 <.LVL159>:
                            from = window - OFF;
  4103d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4103d8:	920c      	str	r2, [sp, #48]	; 0x30
                                PUP(out) = PUP(from);
  4103da:	463d      	mov	r5, r7
  4103dc:	e771      	b.n	4102c2 <.LVL116>

004103de <.LVL160>:
                        PUP(out) = PUP(from);
  4103de:	3501      	adds	r5, #1

004103e0 <.LVL161>:
  4103e0:	e659      	b.n	410096 <.LVL27>

004103e2 <.LVL162>:
                    from = out - dist;          /* copy direct from output */
  4103e2:	eba5 020c 	sub.w	r2, r5, ip

004103e6 <.LVL163>:
  4103e6:	e001      	b.n	4103ec <.LVL165>

004103e8 <.LVL164>:
                        PUP(out) = PUP(from);
  4103e8:	4662      	mov	r2, ip
  4103ea:	4675      	mov	r5, lr

004103ec <.LVL165>:
                        PUP(out) = PUP(from);
  4103ec:	7857      	ldrb	r7, [r2, #1]
  4103ee:	706f      	strb	r7, [r5, #1]

004103f0 <.LVL166>:
                        PUP(out) = PUP(from);
  4103f0:	7897      	ldrb	r7, [r2, #2]
  4103f2:	70af      	strb	r7, [r5, #2]
  4103f4:	f105 0e03 	add.w	lr, r5, #3

004103f8 <.LVL167>:
  4103f8:	f102 0c03 	add.w	ip, r2, #3

004103fc <.LVL168>:
                        PUP(out) = PUP(from);
  4103fc:	78d7      	ldrb	r7, [r2, #3]
  4103fe:	70ef      	strb	r7, [r5, #3]
                        len -= 3;
  410400:	3b03      	subs	r3, #3
                    } while (len > 2);
  410402:	2b02      	cmp	r3, #2
  410404:	d8f0      	bhi.n	4103e8 <.LVL164>
                    if (len) {
  410406:	b183      	cbz	r3, 41042a <.LVL177>

00410408 <.LVL170>:
                        PUP(out) = PUP(from);
  410408:	7917      	ldrb	r7, [r2, #4]
  41040a:	712f      	strb	r7, [r5, #4]
                        if (len > 1)
  41040c:	2b01      	cmp	r3, #1
  41040e:	d903      	bls.n	410418 <.LVL174>

00410410 <.LVL171>:
                            PUP(out) = PUP(from);
  410410:	7953      	ldrb	r3, [r2, #5]

00410412 <.LVL172>:
  410412:	716b      	strb	r3, [r5, #5]
  410414:	3505      	adds	r5, #5

00410416 <.LVL173>:
  410416:	e63e      	b.n	410096 <.LVL27>

00410418 <.LVL174>:
                        PUP(out) = PUP(from);
  410418:	3504      	adds	r5, #4

0041041a <.LVL175>:
  41041a:	e63c      	b.n	410096 <.LVL27>

0041041c <.LVL176>:
            strm->msg = (char *)"invalid literal/length code";
  41041c:	4b0a      	ldr	r3, [pc, #40]	; (410448 <.LVL180+0xe>)
  41041e:	f8ca 3018 	str.w	r3, [sl, #24]
            state->mode = BAD;
  410422:	231d      	movs	r3, #29
  410424:	f88b 3000 	strb.w	r3, [fp]
            break;
  410428:	e6d0      	b.n	4101cc <.LVL84>

0041042a <.LVL177>:
                        PUP(out) = PUP(from);
  41042a:	4675      	mov	r5, lr
  41042c:	e633      	b.n	410096 <.LVL27>

0041042e <.LVL178>:
    strm->avail_in = (unsigned)(in < last ? 5 + (last - in) : 5 - (in - last));
  41042e:	9a02      	ldr	r2, [sp, #8]
  410430:	1a9b      	subs	r3, r3, r2

00410432 <.LVL179>:
  410432:	f1c3 0305 	rsb	r3, r3, #5
  410436:	e6dd      	b.n	4101f4 <.LVL89+0x2>
                                 257 + (end - out) : 257 - (out - end));
  410438:	1b5d      	subs	r5, r3, r5

0041043a <.LVL180>:
  41043a:	f205 1301 	addw	r3, r5, #257	; 0x101
  41043e:	e6e4      	b.n	41020a <.LVL90+0x6>
  410440:	0041cf5c 	.word	0x0041cf5c
  410444:	0041cf3c 	.word	0x0041cf3c
  410448:	0041cf74 	.word	0x0041cf74

Disassembly of section .text.wc_ecc_verify_hash_ex%82:

0041044c <wc_ecc_verify_hash_ex>:
   key         The corresponding public ECC key
   return      MP_OKAY if successful (even if the signature is not valid)
*/
int wc_ecc_verify_hash_ex(mp_int *r, mp_int *s, const byte* hash,
                    word32 hashlen, int* res, ecc_key* key)
{
  41044c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00410450 <.LCFI88>:
  410450:	f5ad 5dae 	sub.w	sp, sp, #5568	; 0x15c0

00410454 <.LCFI89>:
  410454:	b087      	sub	sp, #28

00410456 <.LCFI90>:
  410456:	4681      	mov	r9, r0
  410458:	468a      	mov	sl, r1
  41045a:	4616      	mov	r6, r2
  41045c:	9305      	str	r3, [sp, #20]
  41045e:	f50d 53b0 	add.w	r3, sp, #5632	; 0x1600

00410462 <.LVL1049>:
  410462:	f8d3 8000 	ldr.w	r8, [r3]
  410466:	f241 6304 	movw	r3, #5636	; 0x1604

0041046a <.LVL1050>:
  41046a:	446b      	add	r3, sp
  41046c:	681d      	ldr	r5, [r3, #0]

0041046e <.LVL1051>:
   mp_int        v;
   mp_int        w;
   mp_int        u1;
   mp_int        u2;
   mp_int        e;
   DECLARE_CURVE_SPECS(ECC_CURVE_FIELD_COUNT)
  41046e:	ac08      	add	r4, sp, #32
  410470:	4bb6      	ldr	r3, [pc, #728]	; (41074c <.LVL1124+0x8>)
  410472:	f241 52d8 	movw	r2, #5592	; 0x15d8

00410476 <.LVL1052>:
  410476:	446a      	add	r2, sp
  410478:	50d4      	str	r4, [r2, r3]
  41047a:	2228      	movs	r2, #40	; 0x28
  41047c:	2100      	movs	r1, #0

0041047e <.LVL1053>:
  41047e:	4620      	mov	r0, r4

00410480 <.LVL1054>:
  410480:	f00a f8b6 	bl	41a5f0 <.LFE157>

00410484 <.LVL1055>:
  410484:	ab12      	add	r3, sp, #72	; 0x48
  410486:	61a3      	str	r3, [r4, #24]
  410488:	2305      	movs	r3, #5
  41048a:	61e3      	str	r3, [r4, #28]
#else
   byte sigRS[ATECC_KEY_SIZE*2];
#endif

   if (r == NULL || s == NULL || hash == NULL || res == NULL || key == NULL)
  41048c:	f1b9 0f00 	cmp.w	r9, #0
  410490:	f000 81b3 	beq.w	4107fa <.LVL1143>
  410494:	f1ba 0f00 	cmp.w	sl, #0
  410498:	f000 81af 	beq.w	4107fa <.LVL1143>
  41049c:	f1b8 0f00 	cmp.w	r8, #0
  4104a0:	bf18      	it	ne
  4104a2:	2e00      	cmpne	r6, #0
  4104a4:	f000 81ac 	beq.w	410800 <.LVL1143+0x6>
  4104a8:	2d00      	cmp	r5, #0
  4104aa:	f000 81a9 	beq.w	410800 <.LVL1143+0x6>
       return ECC_BAD_ARG_E;

   /* default to invalid signature */
   *res = 0;
  4104ae:	2300      	movs	r3, #0
  4104b0:	f8c8 3000 	str.w	r3, [r8]

   /* is the IDX valid ?  */
   if (wc_ecc_is_valid_idx(key->idx) != 1) {
  4104b4:	6868      	ldr	r0, [r5, #4]
  4104b6:	f00d ffd1 	bl	41e45c <.LBE24>

004104ba <.LVL1056>:
  4104ba:	4683      	mov	fp, r0
  4104bc:	2801      	cmp	r0, #1
  4104be:	f040 81a2 	bne.w	410806 <.LVL1143+0xc>
       return BAD_COND_E;
   }

#else

   err = mp_init(&e);
  4104c2:	f50d 6031 	add.w	r0, sp, #2832	; 0xb10
  4104c6:	f00e fbe5 	bl	41ec94 <.LFE193>

004104ca <.LVL1057>:
   if (err != MP_OKAY)
  4104ca:	9004      	str	r0, [sp, #16]
  4104cc:	2800      	cmp	r0, #0
  4104ce:	f040 819d 	bne.w	41080c <.LVL1144>
      return MEMORY_E;

   /* read in the specs for this curve */
   err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ALL);
  4104d2:	223b      	movs	r2, #59	; 0x3b
  4104d4:	a907      	add	r1, sp, #28
  4104d6:	6928      	ldr	r0, [r5, #16]

004104d8 <.LVL1058>:
  4104d8:	f009 f950 	bl	41977c <.LFE155>

004104dc <.LVL1059>:

   /* check for zero */
   if (err == MP_OKAY) {
  4104dc:	4604      	mov	r4, r0
  4104de:	b350      	cbz	r0, 410536 <.LCFI92>

004104e0 <.LVL1060>:
       if (mQ  == NULL || mG == NULL)
          err = MEMORY_E;
   }

   /*  w  = s^-1 mod n */
   if (err == MP_OKAY)
  4104e0:	2c00      	cmp	r4, #0
  4104e2:	f000 808e 	beq.w	410602 <.LVL1092>

004104e6 <.LVL1061>:
   ecc_point    *mG = NULL, *mQ = NULL;
  4104e6:	2700      	movs	r7, #0
  4104e8:	463e      	mov	r6, r7

004104ea <.LVL1062>:
       err = mp_mulmod(r, &w, curve->order, &u2);

   /* find mG and mQ */
   if (err == MP_OKAY)
       err = mp_copy(curve->Gx, mG->x);
   if (err == MP_OKAY)
  4104ea:	2c00      	cmp	r4, #0
  4104ec:	f000 80c7 	beq.w	41067e <.LVL1102>

   if (err == MP_OKAY)
       err = mp_copy(key->pubkey.x, mQ->x);
   if (err == MP_OKAY)
       err = mp_copy(key->pubkey.y, mQ->y);
   if (err == MP_OKAY)
  4104f0:	2c00      	cmp	r4, #0
  4104f2:	f000 80e9 	beq.w	4106c8 <.LVL1113>

004104f6 <.LBB78>:
       /* find the montgomery mp */
       if (err == MP_OKAY)
           err = mp_montgomery_setup(curve->prime, &mp);

       /* add them */
       if (err == MP_OKAY)
  4104f6:	2c00      	cmp	r4, #0
  4104f8:	f000 812a 	beq.w	410750 <.LVL1125>

004104fc <.LBE78>:
       if (mp_cmp(&v, r) == MP_EQ)
           *res = 1;
   }

   /* cleanup */
   wc_ecc_del_point_h(mG, key->heap);
  4104fc:	6969      	ldr	r1, [r5, #20]
  4104fe:	4630      	mov	r0, r6
  410500:	f00d ff9a 	bl	41e438 <.LFE10>

00410504 <.LVL1064>:
   wc_ecc_del_point_h(mQ, key->heap);
  410504:	6969      	ldr	r1, [r5, #20]
  410506:	4638      	mov	r0, r7
  410508:	f00d ff96 	bl	41e438 <.LFE10>

0041050c <.LVL1065>:

   mp_clear(&e);
  41050c:	f50d 6031 	add.w	r0, sp, #2832	; 0xb10
  410510:	f00e fc44 	bl	41ed9c <.LFE170>

00410514 <.LVL1066>:
   if (did_init) {
  410514:	9b04      	ldr	r3, [sp, #16]
  410516:	2b00      	cmp	r3, #0
  410518:	f040 815c 	bne.w	4107d4 <.LVL1138>

0041051c <.LBB79>:
    _wc_ecc_curve_free(curve);
  41051c:	4b8b      	ldr	r3, [pc, #556]	; (41074c <.LVL1124+0x8>)
  41051e:	f241 52d8 	movw	r2, #5592	; 0x15d8
  410522:	446a      	add	r2, sp
  410524:	58d0      	ldr	r0, [r2, r3]
  410526:	f00b fed9 	bl	41c2dc <.LFE46>

0041052a <.LBE79>:
   wc_ecc_curve_free(curve);

#endif /* WOLFSSL_ATECC508A */

   return err;
}
  41052a:	4620      	mov	r0, r4
  41052c:	f50d 5dae 	add.w	sp, sp, #5568	; 0x15c0
  410530:	b007      	add	sp, #28

00410532 <.LCFI91>:
  410532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00410536 <.LCFI92>:
       if (mp_iszero(r) == MP_YES || mp_iszero(s) == MP_YES ||
  410536:	4648      	mov	r0, r9

00410538 <.LVL1070>:
  410538:	f00e fc9a 	bl	41ee70 <.LFE93>

0041053c <.LVL1071>:
  41053c:	2801      	cmp	r0, #1
  41053e:	f000 8194 	beq.w	41086a <.LVL1160>
  410542:	4650      	mov	r0, sl
  410544:	f00e fc94 	bl	41ee70 <.LFE93>

00410548 <.LVL1072>:
  410548:	2801      	cmp	r0, #1
  41054a:	f000 8191 	beq.w	410870 <.LVL1162>
           mp_cmp(r, curve->order) != MP_LT ||
  41054e:	4b7f      	ldr	r3, [pc, #508]	; (41074c <.LVL1124+0x8>)
  410550:	f241 52d8 	movw	r2, #5592	; 0x15d8
  410554:	446a      	add	r2, sp
  410556:	58d3      	ldr	r3, [r2, r3]
  410558:	68d9      	ldr	r1, [r3, #12]
  41055a:	4648      	mov	r0, r9
  41055c:	f00e fce0 	bl	41ef20 <.LFE66>

00410560 <.LVL1073>:
       if (mp_iszero(r) == MP_YES || mp_iszero(s) == MP_YES ||
  410560:	f1b0 3fff 	cmp.w	r0, #4294967295
  410564:	d002      	beq.n	41056c <.LVL1075>
           err = MP_ZERO_E;
  410566:	f06f 0478 	mvn.w	r4, #120	; 0x78

0041056a <.LVL1074>:
  41056a:	e7b9      	b.n	4104e0 <.LVL1060>

0041056c <.LVL1075>:
           mp_cmp(s, curve->order) != MP_LT) {
  41056c:	4b77      	ldr	r3, [pc, #476]	; (41074c <.LVL1124+0x8>)
  41056e:	f241 52d8 	movw	r2, #5592	; 0x15d8
  410572:	446a      	add	r2, sp
  410574:	58d3      	ldr	r3, [r2, r3]
  410576:	68d9      	ldr	r1, [r3, #12]
  410578:	4650      	mov	r0, sl
  41057a:	f00e fcd1 	bl	41ef20 <.LFE66>

0041057e <.LVL1076>:
           mp_cmp(r, curve->order) != MP_LT ||
  41057e:	f1b0 3fff 	cmp.w	r0, #4294967295
  410582:	f000 8146 	beq.w	410812 <.LBB84>
           err = MP_ZERO_E;
  410586:	f06f 0478 	mvn.w	r4, #120	; 0x78

0041058a <.LVL1077>:
  41058a:	e7a9      	b.n	4104e0 <.LVL1060>

0041058c <.LBB81>:
           hashlen = (orderBits + WOLFSSL_BIT_SIZE - 1) / WOLFSSL_BIT_SIZE;
  41058c:	1dfb      	adds	r3, r7, #7

0041058e <.LVL1079>:
       err = mp_read_unsigned_bin(&e, hash, hashlen);
  41058e:	9304      	str	r3, [sp, #16]
  410590:	08da      	lsrs	r2, r3, #3

00410592 <.LVL1080>:
  410592:	4631      	mov	r1, r6
  410594:	f50d 6031 	add.w	r0, sp, #2832	; 0xb10

00410598 <.LVL1081>:
  410598:	f00e fc56 	bl	41ee48 <.LFE72>

0041059c <.LVL1082>:
       if (err == MP_OKAY && (WOLFSSL_BIT_SIZE * hashlen) > orderBits)
  41059c:	4603      	mov	r3, r0
  41059e:	2800      	cmp	r0, #0
  4105a0:	f040 8153 	bne.w	41084a <.LVL1153>
  4105a4:	9b04      	ldr	r3, [sp, #16]
  4105a6:	f023 0307 	bic.w	r3, r3, #7
  4105aa:	429f      	cmp	r7, r3
  4105ac:	d207      	bcs.n	4105be <.LBE81>
           mp_rshb(&e, WOLFSSL_BIT_SIZE - (orderBits & 0x7));
  4105ae:	f007 0107 	and.w	r1, r7, #7
  4105b2:	f1c1 0108 	rsb	r1, r1, #8
  4105b6:	f50d 6031 	add.w	r0, sp, #2832	; 0xb10

004105ba <.LVL1083>:
  4105ba:	f00e fcd5 	bl	41ef68 <.LFE97>

004105be <.LBE81>:
       if ((err = mp_init_multi(&v, &w, &u1, &u2, NULL, NULL)) != MP_OKAY) {
  4105be:	2300      	movs	r3, #0
  4105c0:	9301      	str	r3, [sp, #4]
  4105c2:	9300      	str	r3, [sp, #0]
  4105c4:	f60d 5338 	addw	r3, sp, #3384	; 0xd38
  4105c8:	f50d 6276 	add.w	r2, sp, #3936	; 0xf60
  4105cc:	f241 1188 	movw	r1, #4488	; 0x1188
  4105d0:	4469      	add	r1, sp
  4105d2:	f241 30b0 	movw	r0, #5040	; 0x13b0
  4105d6:	4468      	add	r0, sp
  4105d8:	f00d f948 	bl	41d86c <mp_init_multi>

004105dc <.LVL1085>:
  4105dc:	2800      	cmp	r0, #0
  4105de:	f040 813f 	bne.w	410860 <.LBE85>

004105e2 <.LVL1086>:
       mG = wc_ecc_new_point_h(key->heap);
  4105e2:	6968      	ldr	r0, [r5, #20]
  4105e4:	f00d f842 	bl	41d66c <.LBE36>

004105e8 <.LVL1087>:
  4105e8:	4606      	mov	r6, r0

004105ea <.LVL1088>:
       mQ = wc_ecc_new_point_h(key->heap);
  4105ea:	6968      	ldr	r0, [r5, #20]

004105ec <.LVL1089>:
  4105ec:	f00d f83e 	bl	41d66c <.LBE36>

004105f0 <.LVL1090>:
       if (mQ  == NULL || mG == NULL)
  4105f0:	4607      	mov	r7, r0

004105f2 <.LVL1091>:
  4105f2:	2800      	cmp	r0, #0
  4105f4:	f000 812d 	beq.w	410852 <.LVL1156>
  4105f8:	2e00      	cmp	r6, #0
  4105fa:	f000 812a 	beq.w	410852 <.LVL1156>
  4105fe:	465c      	mov	r4, fp
  410600:	e001      	b.n	410606 <.LVL1093>

00410602 <.LVL1092>:
   ecc_point    *mG = NULL, *mQ = NULL;
  410602:	2700      	movs	r7, #0
  410604:	463e      	mov	r6, r7

00410606 <.LVL1093>:
       err = mp_invmod(s, curve->order, &w);
  410606:	4b51      	ldr	r3, [pc, #324]	; (41074c <.LVL1124+0x8>)
  410608:	f241 52d8 	movw	r2, #5592	; 0x15d8
  41060c:	446a      	add	r2, sp
  41060e:	58d3      	ldr	r3, [r2, r3]
  410610:	f241 1288 	movw	r2, #4488	; 0x1188
  410614:	446a      	add	r2, sp
  410616:	68d9      	ldr	r1, [r3, #12]
  410618:	4650      	mov	r0, sl
  41061a:	f00e fc8d 	bl	41ef38 <.LFE83>

0041061e <.LVL1094>:
  41061e:	4603      	mov	r3, r0

00410620 <.LVL1095>:
   if (err == MP_OKAY)
  410620:	2b00      	cmp	r3, #0
  410622:	d138      	bne.n	410696 <.LVL1105>
       err = mp_mulmod(&e, &w, curve->order, &u1);
  410624:	4b49      	ldr	r3, [pc, #292]	; (41074c <.LVL1124+0x8>)

00410626 <.LVL1096>:
  410626:	f241 52d8 	movw	r2, #5592	; 0x15d8
  41062a:	446a      	add	r2, sp
  41062c:	58d2      	ldr	r2, [r2, r3]
  41062e:	f50d 6376 	add.w	r3, sp, #3936	; 0xf60
  410632:	68d2      	ldr	r2, [r2, #12]
  410634:	f241 1188 	movw	r1, #4488	; 0x1188
  410638:	4469      	add	r1, sp
  41063a:	f50d 6031 	add.w	r0, sp, #2832	; 0xb10
  41063e:	f00e fc7f 	bl	41ef40 <.LFE79>

00410642 <.LVL1097>:
   if (err == MP_OKAY)
  410642:	4603      	mov	r3, r0
  410644:	bb70      	cbnz	r0, 4106a4 <.LVL1107>
       err = mp_mulmod(r, &w, curve->order, &u2);
  410646:	4b41      	ldr	r3, [pc, #260]	; (41074c <.LVL1124+0x8>)
  410648:	f241 52d8 	movw	r2, #5592	; 0x15d8
  41064c:	446a      	add	r2, sp
  41064e:	58d2      	ldr	r2, [r2, r3]
  410650:	f60d 5338 	addw	r3, sp, #3384	; 0xd38
  410654:	68d2      	ldr	r2, [r2, #12]
  410656:	f241 1188 	movw	r1, #4488	; 0x1188
  41065a:	4469      	add	r1, sp
  41065c:	4648      	mov	r0, r9

0041065e <.LVL1098>:
  41065e:	f00e fc6f 	bl	41ef40 <.LFE79>

00410662 <.LVL1099>:
   if (err == MP_OKAY)
  410662:	4603      	mov	r3, r0
  410664:	bb28      	cbnz	r0, 4106b2 <.LVL1110>
       err = mp_copy(curve->Gx, mG->x);
  410666:	4b39      	ldr	r3, [pc, #228]	; (41074c <.LVL1124+0x8>)
  410668:	f241 52d8 	movw	r2, #5592	; 0x15d8
  41066c:	446a      	add	r2, sp
  41066e:	58d3      	ldr	r3, [r2, r3]
  410670:	4631      	mov	r1, r6
  410672:	6918      	ldr	r0, [r3, #16]

00410674 <.LVL1100>:
  410674:	f00e fbf7 	bl	41ee66 <.LFE85>

00410678 <.LVL1101>:
  410678:	9404      	str	r4, [sp, #16]
  41067a:	4604      	mov	r4, r0
  41067c:	e735      	b.n	4104ea <.LVL1062>

0041067e <.LVL1102>:
       err = mp_copy(curve->Gy, mG->y);
  41067e:	4b33      	ldr	r3, [pc, #204]	; (41074c <.LVL1124+0x8>)
  410680:	f241 52d8 	movw	r2, #5592	; 0x15d8
  410684:	446a      	add	r2, sp
  410686:	58d3      	ldr	r3, [r2, r3]
  410688:	f506 710a 	add.w	r1, r6, #552	; 0x228
  41068c:	6958      	ldr	r0, [r3, #20]
  41068e:	f00e fbea 	bl	41ee66 <.LFE85>

00410692 <.LVL1103>:
  410692:	4603      	mov	r3, r0

00410694 <.LVL1104>:
  410694:	9c04      	ldr	r4, [sp, #16]

00410696 <.LVL1105>:
   if (err == MP_OKAY)
  410696:	b9fb      	cbnz	r3, 4106d8 <.LBB82>
       err = mp_set(mG->z, 1);
  410698:	2101      	movs	r1, #1
  41069a:	f506 608a 	add.w	r0, r6, #1104	; 0x450
  41069e:	f00e fc00 	bl	41eea2 <.LFE113>

004106a2 <.LVL1106>:
  4106a2:	4603      	mov	r3, r0

004106a4 <.LVL1107>:
   if (err == MP_OKAY)
  4106a4:	bb6b      	cbnz	r3, 410702 <.LVL1119>
       err = mp_copy(key->pubkey.x, mQ->x);
  4106a6:	4639      	mov	r1, r7
  4106a8:	f105 0018 	add.w	r0, r5, #24

004106ac <.LVL1108>:
  4106ac:	f00e fbdb 	bl	41ee66 <.LFE85>

004106b0 <.LVL1109>:
  4106b0:	4603      	mov	r3, r0

004106b2 <.LVL1110>:
   if (err == MP_OKAY)
  4106b2:	2b00      	cmp	r3, #0
  4106b4:	d13a      	bne.n	41072c <.LVL1122>
       err = mp_copy(key->pubkey.y, mQ->y);
  4106b6:	f507 710a 	add.w	r1, r7, #552	; 0x228
  4106ba:	f505 7010 	add.w	r0, r5, #576	; 0x240

004106be <.LVL1111>:
  4106be:	f00e fbd2 	bl	41ee66 <.LFE85>

004106c2 <.LVL1112>:
  4106c2:	9404      	str	r4, [sp, #16]
  4106c4:	4604      	mov	r4, r0
  4106c6:	e713      	b.n	4104f0 <.LVL1062+0x6>

004106c8 <.LVL1113>:
       err = mp_copy(key->pubkey.z, mQ->z);
  4106c8:	f507 618a 	add.w	r1, r7, #1104	; 0x450
  4106cc:	f505 608d 	add.w	r0, r5, #1128	; 0x468
  4106d0:	f00e fbc9 	bl	41ee66 <.LFE85>

004106d4 <.LVL1114>:
  4106d4:	4603      	mov	r3, r0

004106d6 <.LVL1115>:
  4106d6:	9c04      	ldr	r4, [sp, #16]

004106d8 <.LBB82>:
       if (err == MP_OKAY)
  4106d8:	2b00      	cmp	r3, #0
  4106da:	d14a      	bne.n	410772 <.LVL1128>
           err = wc_ecc_mulmod_ex(&u1, mG, mG, curve->Af, curve->prime, 0, key->heap);
  4106dc:	4b1b      	ldr	r3, [pc, #108]	; (41074c <.LVL1124+0x8>)

004106de <.LVL1117>:
  4106de:	f241 52d8 	movw	r2, #5592	; 0x15d8
  4106e2:	446a      	add	r2, sp
  4106e4:	58d2      	ldr	r2, [r2, r3]
  4106e6:	6893      	ldr	r3, [r2, #8]
  4106e8:	6969      	ldr	r1, [r5, #20]
  4106ea:	9102      	str	r1, [sp, #8]
  4106ec:	2100      	movs	r1, #0
  4106ee:	9101      	str	r1, [sp, #4]
  4106f0:	6852      	ldr	r2, [r2, #4]
  4106f2:	9200      	str	r2, [sp, #0]
  4106f4:	4632      	mov	r2, r6
  4106f6:	4631      	mov	r1, r6
  4106f8:	f50d 6076 	add.w	r0, sp, #3936	; 0xf60
  4106fc:	f000 fca3 	bl	411046 <.LFE6>

00410700 <.LVL1118>:
  410700:	4603      	mov	r3, r0

00410702 <.LVL1119>:
       if (err == MP_OKAY)
  410702:	2b00      	cmp	r3, #0
  410704:	d162      	bne.n	4107cc <.LBB83>
           err = wc_ecc_mulmod_ex(&u2, mQ, mQ, curve->Af, curve->prime, 0, key->heap);
  410706:	4b11      	ldr	r3, [pc, #68]	; (41074c <.LVL1124+0x8>)
  410708:	f241 52d8 	movw	r2, #5592	; 0x15d8
  41070c:	446a      	add	r2, sp
  41070e:	58d2      	ldr	r2, [r2, r3]
  410710:	6893      	ldr	r3, [r2, #8]
  410712:	6969      	ldr	r1, [r5, #20]
  410714:	9102      	str	r1, [sp, #8]
  410716:	2100      	movs	r1, #0
  410718:	9101      	str	r1, [sp, #4]
  41071a:	6852      	ldr	r2, [r2, #4]
  41071c:	9200      	str	r2, [sp, #0]
  41071e:	463a      	mov	r2, r7
  410720:	4639      	mov	r1, r7
  410722:	f60d 5038 	addw	r0, sp, #3384	; 0xd38

00410726 <.LVL1120>:
  410726:	f000 fc8e 	bl	411046 <.LFE6>

0041072a <.LVL1121>:
  41072a:	4603      	mov	r3, r0

0041072c <.LVL1122>:
       if (err == MP_OKAY)
  41072c:	2b00      	cmp	r3, #0
  41072e:	f040 8094 	bne.w	41085a <.LBB85>
           err = mp_montgomery_setup(curve->prime, &mp);
  410732:	4b06      	ldr	r3, [pc, #24]	; (41074c <.LVL1124+0x8>)
  410734:	f241 52d8 	movw	r2, #5592	; 0x15d8
  410738:	446a      	add	r2, sp
  41073a:	58d3      	ldr	r3, [r2, r3]
  41073c:	a906      	add	r1, sp, #24
  41073e:	6858      	ldr	r0, [r3, #4]

00410740 <.LVL1123>:
  410740:	f00e fc16 	bl	41ef70 <.LFE98>

00410744 <.LVL1124>:
  410744:	9404      	str	r4, [sp, #16]
  410746:	4604      	mov	r4, r0
  410748:	e6d5      	b.n	4104f6 <.LBB78>
  41074a:	bf00      	nop
  41074c:	ffffea44 	.word	0xffffea44

00410750 <.LVL1125>:
           err = ecc_projective_add_point(mQ, mG, mG, curve->Af,
  410750:	4b49      	ldr	r3, [pc, #292]	; (410878 <.LVL1163+0x4>)
  410752:	f241 52d8 	movw	r2, #5592	; 0x15d8
  410756:	446a      	add	r2, sp
  410758:	58d2      	ldr	r2, [r2, r3]
  41075a:	6893      	ldr	r3, [r2, #8]
  41075c:	9906      	ldr	r1, [sp, #24]
  41075e:	9101      	str	r1, [sp, #4]
  410760:	6852      	ldr	r2, [r2, #4]
  410762:	9200      	str	r2, [sp, #0]
  410764:	4632      	mov	r2, r6
  410766:	4631      	mov	r1, r6
  410768:	4638      	mov	r0, r7
  41076a:	f7fd f94b 	bl	40da04 <.LFE14>

0041076e <.LVL1126>:
  41076e:	4603      	mov	r3, r0

00410770 <.LVL1127>:
  410770:	9c04      	ldr	r4, [sp, #16]

00410772 <.LVL1128>:
       if (err == MP_OKAY)
  410772:	2b00      	cmp	r3, #0
  410774:	d171      	bne.n	41085a <.LBB85>
           err = ecc_map(mG, curve->prime, mp);
  410776:	4b40      	ldr	r3, [pc, #256]	; (410878 <.LVL1163+0x4>)

00410778 <.LVL1129>:
  410778:	f241 52d8 	movw	r2, #5592	; 0x15d8
  41077c:	446a      	add	r2, sp
  41077e:	58d3      	ldr	r3, [r2, r3]
  410780:	9a06      	ldr	r2, [sp, #24]
  410782:	6859      	ldr	r1, [r3, #4]
  410784:	4630      	mov	r0, r6
  410786:	f006 fa49 	bl	416c1c <.LFE21>

0041078a <.LVL1130>:
  41078a:	4603      	mov	r3, r0

0041078c <.LVL1131>:
  41078c:	9404      	str	r4, [sp, #16]

0041078e <.LBE82>:
   if (err == MP_OKAY)
  41078e:	b9fb      	cbnz	r3, 4107d0 <.LBE83>
       err = mp_mod(mG->x, curve->order, &v);
  410790:	4b39      	ldr	r3, [pc, #228]	; (410878 <.LVL1163+0x4>)
  410792:	f241 52d8 	movw	r2, #5592	; 0x15d8
  410796:	446a      	add	r2, sp
  410798:	58d3      	ldr	r3, [r2, r3]
  41079a:	f241 32b0 	movw	r2, #5040	; 0x13b0
  41079e:	446a      	add	r2, sp
  4107a0:	68d9      	ldr	r1, [r3, #12]
  4107a2:	4630      	mov	r0, r6

004107a4 <.LVL1132>:
  4107a4:	f00e fbd0 	bl	41ef48 <.LFE75>

004107a8 <.LVL1133>:
   if (err == MP_OKAY) {
  4107a8:	4604      	mov	r4, r0
  4107aa:	2800      	cmp	r0, #0
  4107ac:	f47f aea6 	bne.w	4104fc <.LBE78>
       if (mp_cmp(&v, r) == MP_EQ)
  4107b0:	4649      	mov	r1, r9
  4107b2:	f241 30b0 	movw	r0, #5040	; 0x13b0

004107b6 <.LVL1134>:
  4107b6:	4468      	add	r0, sp
  4107b8:	f00e fbb2 	bl	41ef20 <.LFE66>

004107bc <.LVL1135>:
  4107bc:	2800      	cmp	r0, #0
  4107be:	f47f ae9d 	bne.w	4104fc <.LBE78>
           *res = 1;
  4107c2:	2201      	movs	r2, #1
  4107c4:	f8c8 2000 	str.w	r2, [r8]
  4107c8:	4604      	mov	r4, r0

004107ca <.LVL1136>:
  4107ca:	e697      	b.n	4104fc <.LBE78>

004107cc <.LBB83>:
  4107cc:	9404      	str	r4, [sp, #16]
  4107ce:	e7de      	b.n	41078e <.LBE82>

004107d0 <.LBE83>:
  4107d0:	461c      	mov	r4, r3
  4107d2:	e693      	b.n	4104fc <.LBE78>

004107d4 <.LVL1138>:
       mp_clear(&v);
  4107d4:	f241 30b0 	movw	r0, #5040	; 0x13b0
  4107d8:	4468      	add	r0, sp
  4107da:	f00e fadf 	bl	41ed9c <.LFE170>

004107de <.LVL1139>:
       mp_clear(&w);
  4107de:	f241 1088 	movw	r0, #4488	; 0x1188
  4107e2:	4468      	add	r0, sp
  4107e4:	f00e fada 	bl	41ed9c <.LFE170>

004107e8 <.LVL1140>:
       mp_clear(&u1);
  4107e8:	f50d 6076 	add.w	r0, sp, #3936	; 0xf60
  4107ec:	f00e fad6 	bl	41ed9c <.LFE170>

004107f0 <.LVL1141>:
       mp_clear(&u2);
  4107f0:	f60d 5038 	addw	r0, sp, #3384	; 0xd38
  4107f4:	f00e fad2 	bl	41ed9c <.LFE170>

004107f8 <.LVL1142>:
  4107f8:	e690      	b.n	41051c <.LBB79>

004107fa <.LVL1143>:
       return ECC_BAD_ARG_E;
  4107fa:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
  4107fe:	e694      	b.n	41052a <.LBE79>
  410800:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
  410804:	e691      	b.n	41052a <.LBE79>
      return ECC_BAD_ARG_E;
  410806:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
  41080a:	e68e      	b.n	41052a <.LBE79>

0041080c <.LVL1144>:
      return MEMORY_E;
  41080c:	f06f 047c 	mvn.w	r4, #124	; 0x7c
  410810:	e68b      	b.n	41052a <.LBE79>

00410812 <.LBB84>:
       unsigned int orderBits = mp_count_bits(curve->order);
  410812:	4b19      	ldr	r3, [pc, #100]	; (410878 <.LVL1163+0x4>)
  410814:	f241 52d8 	movw	r2, #5592	; 0x15d8
  410818:	446a      	add	r2, sp
  41081a:	58d3      	ldr	r3, [r2, r3]
  41081c:	68d8      	ldr	r0, [r3, #12]
  41081e:	f00e fb9b 	bl	41ef58 <.LFE80>

00410822 <.LVL1146>:
  410822:	4607      	mov	r7, r0

00410824 <.LVL1147>:
       if ( (WOLFSSL_BIT_SIZE * hashlen) > orderBits)
  410824:	9b05      	ldr	r3, [sp, #20]
  410826:	ebb0 0fc3 	cmp.w	r0, r3, lsl #3
  41082a:	f4ff aeaf 	bcc.w	41058c <.LBB81>

0041082e <.LVL1148>:
       err = mp_read_unsigned_bin(&e, hash, hashlen);
  41082e:	9a05      	ldr	r2, [sp, #20]
  410830:	4631      	mov	r1, r6
  410832:	f50d 6031 	add.w	r0, sp, #2832	; 0xb10

00410836 <.LVL1149>:
  410836:	f00e fb07 	bl	41ee48 <.LFE72>

0041083a <.LVL1150>:
       if (err == MP_OKAY && (WOLFSSL_BIT_SIZE * hashlen) > orderBits)
  41083a:	4603      	mov	r3, r0
  41083c:	2800      	cmp	r0, #0
  41083e:	f43f aebe 	beq.w	4105be <.LBE81>

00410842 <.LBE84>:
   int          did_init = 0;
  410842:	46a3      	mov	fp, r4
   ecc_point    *mG = NULL, *mQ = NULL;
  410844:	2700      	movs	r7, #0

00410846 <.LVL1151>:
  410846:	463e      	mov	r6, r7

00410848 <.LVL1152>:
  410848:	e005      	b.n	410856 <.LVL1157>

0041084a <.LVL1153>:
   int          did_init = 0;
  41084a:	46a3      	mov	fp, r4
   ecc_point    *mG = NULL, *mQ = NULL;
  41084c:	2700      	movs	r7, #0

0041084e <.LVL1154>:
  41084e:	463e      	mov	r6, r7

00410850 <.LVL1155>:
  410850:	e001      	b.n	410856 <.LVL1157>

00410852 <.LVL1156>:
          err = MEMORY_E;
  410852:	f06f 037c 	mvn.w	r3, #124	; 0x7c

00410856 <.LVL1157>:
  410856:	465c      	mov	r4, fp
  410858:	e6e2      	b.n	410620 <.LVL1095>

0041085a <.LBB85>:
  41085a:	9404      	str	r4, [sp, #16]
  41085c:	461c      	mov	r4, r3
  41085e:	e64d      	b.n	4104fc <.LBE78>

00410860 <.LBE85>:
       did_init = 1;
  410860:	f8cd b010 	str.w	fp, [sp, #16]
          err = MEMORY_E;
  410864:	f06f 047c 	mvn.w	r4, #124	; 0x7c
  410868:	e63d      	b.n	4104e6 <.LVL1061>

0041086a <.LVL1160>:
           err = MP_ZERO_E;
  41086a:	f06f 0478 	mvn.w	r4, #120	; 0x78

0041086e <.LVL1161>:
  41086e:	e637      	b.n	4104e0 <.LVL1060>

00410870 <.LVL1162>:
  410870:	f06f 0478 	mvn.w	r4, #120	; 0x78

00410874 <.LVL1163>:
  410874:	e634      	b.n	4104e0 <.LVL1060>
  410876:	bf00      	nop
  410878:	ffffea44 	.word	0xffffea44

Disassembly of section .text.RsaPrivateDecryptEx%83:

0041087c <RsaPrivateDecryptEx>:
static int RsaPrivateDecryptEx(byte* in, word32 inLen, byte* out,
                            word32 outLen, byte** outPtr, RsaKey* key,
                            int rsa_type, byte pad_value, int pad_type,
                            enum wc_HashType hash, int mgf,
                            byte* label, word32 labelSz, WC_RNG* rng)
{
  41087c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00410880 <.LCFI27>:
  410880:	b09b      	sub	sp, #108	; 0x6c

00410882 <.LCFI28>:
  410882:	9c25      	ldr	r4, [sp, #148]	; 0x94
  410884:	f89d 609c 	ldrb.w	r6, [sp, #156]	; 0x9c
  410888:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4

0041088c <.LVL149>:
    int ret = RSA_WRONG_TYPE_E;

    if (in == NULL || inLen == 0 || out == NULL || key == NULL) {
  41088c:	2800      	cmp	r0, #0
  41088e:	f000 81d0 	beq.w	410c32 <.LVL256>
  410892:	4680      	mov	r8, r0
  410894:	2900      	cmp	r1, #0
  410896:	f000 81cc 	beq.w	410c32 <.LVL256>
  41089a:	2a00      	cmp	r2, #0
  41089c:	f000 81cc 	beq.w	410c38 <.LVL256+0x6>
  4108a0:	2c00      	cmp	r4, #0
  4108a2:	f000 81c9 	beq.w	410c38 <.LVL256+0x6>
  4108a6:	461f      	mov	r7, r3
  4108a8:	9205      	str	r2, [sp, #20]
  4108aa:	460d      	mov	r5, r1
        return BAD_FUNC_ARG;
    }

    switch (key->state) {
  4108ac:	f241 134c 	movw	r3, #4428	; 0x114c

004108b0 <.LVL150>:
  4108b0:	58e3      	ldr	r3, [r4, r3]
  4108b2:	2b06      	cmp	r3, #6
  4108b4:	f200 81c6 	bhi.w	410c44 <.LBE80>
  4108b8:	e8df f013 	tbh	[pc, r3, lsl #1]

004108bc <.LVL151>:
  4108bc:	01c40007 	.word	0x01c40007
  4108c0:	01c401c4 	.word	0x01c401c4
  4108c4:	010d0007 	.word	0x010d0007
  4108c8:	01b4      	.short	0x01b4
    case RSA_STATE_NONE:
    case RSA_STATE_DECRYPT_EXPTMOD:
        key->state = RSA_STATE_DECRYPT_EXPTMOD;
  4108ca:	2204      	movs	r2, #4
  4108cc:	f241 134c 	movw	r3, #4428	; 0x114c
  4108d0:	50e2      	str	r2, [r4, r3]
        key->dataLen = inLen;
  4108d2:	f241 1350 	movw	r3, #4432	; 0x1150
  4108d6:	50e1      	str	r1, [r4, r3]
            }
        }
    #endif

        /* verify the tmp ptr is NULL, otherwise indicates bad state */
        if (key->data != NULL) {
  4108d8:	f241 1344 	movw	r3, #4420	; 0x1144
  4108dc:	58e3      	ldr	r3, [r4, r3]
  4108de:	b163      	cbz	r3, 4108fa <.LCFI30>
            ret = BAD_STATE_E;
  4108e0:	f06f 05bf 	mvn.w	r5, #191	; 0xbf

004108e4 <.LVL152>:
    /* if async pending then return and skip done cleanup below */
    if (ret == WC_PENDING_E) {
        return ret;
    }

    key->state = RSA_STATE_NONE;
  4108e4:	2200      	movs	r2, #0
  4108e6:	f241 134c 	movw	r3, #4428	; 0x114c
  4108ea:	50e2      	str	r2, [r4, r3]
    wc_RsaCleanup(key);
  4108ec:	4620      	mov	r0, r4
  4108ee:	f00b fe91 	bl	41c614 <.LFE12>

004108f2 <.LVL153>:

    return ret;
}
  4108f2:	4628      	mov	r0, r5
  4108f4:	b01b      	add	sp, #108	; 0x6c

004108f6 <.LCFI29>:
  4108f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004108fa <.LCFI30>:
        if (outPtr == NULL) {
  4108fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4108fc:	2b00      	cmp	r3, #0
  4108fe:	f000 80d3 	beq.w	410aa8 <.LBE32>
            key->data = out;
  410902:	f241 1344 	movw	r3, #4420	; 0x1144
  410906:	9a05      	ldr	r2, [sp, #20]
  410908:	50e2      	str	r2, [r4, r3]

0041090a <.LVL155>:
        ret = wc_RsaFunction(key->data, inLen, key->data, &key->dataLen, rsa_type,
  41090a:	f241 1344 	movw	r3, #4420	; 0x1144
  41090e:	58e0      	ldr	r0, [r4, r3]
  410910:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  410912:	9302      	str	r3, [sp, #8]
  410914:	9401      	str	r4, [sp, #4]
  410916:	9b26      	ldr	r3, [sp, #152]	; 0x98
  410918:	9300      	str	r3, [sp, #0]
  41091a:	f241 1350 	movw	r3, #4432	; 0x1150
  41091e:	4423      	add	r3, r4
  410920:	4602      	mov	r2, r0
  410922:	4629      	mov	r1, r5
  410924:	f00c f97d 	bl	41cc22 <.LFE2>

00410928 <.LVL156>:
        if (ret >= 0 || ret == WC_PENDING_E) {
  410928:	1e05      	subs	r5, r0, #0

0041092a <.LVL157>:
  41092a:	f280 80cf 	bge.w	410acc <.LVL196>
  41092e:	f115 0f6c 	cmn.w	r5, #108	; 0x6c
  410932:	f000 80cb 	beq.w	410acc <.LVL196>
        if (ret < 0) {
  410936:	2d00      	cmp	r5, #0
  410938:	f2c0 8176 	blt.w	410c28 <.LVL255>

0041093c <.LBB32>:
        ret = wc_RsaUnPad_ex(key->data, key->dataLen, &pad, pad_value, pad_type,
  41093c:	f241 1344 	movw	r3, #4420	; 0x1144
  410940:	f854 a003 	ldr.w	sl, [r4, r3]
  410944:	f241 1350 	movw	r3, #4432	; 0x1150
  410948:	f854 8003 	ldr.w	r8, [r4, r3]

0041094c <.LVL159>:
  41094c:	4620      	mov	r0, r4

0041094e <.LVL160>:
  41094e:	f00e fb03 	bl	41ef58 <.LFE80>

00410952 <.LBB33>:
    switch (padType) {
  410952:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  410954:	2b00      	cmp	r3, #0
  410956:	f000 80e6 	beq.w	410b26 <.LBB50>
  41095a:	2b01      	cmp	r3, #1
  41095c:	f040 816f 	bne.w	410c3e <.LBB80>

00410960 <.LBB35>:
    if (optLabel == NULL && labelLen > 0) {
  410960:	9b2b      	ldr	r3, [sp, #172]	; 0xac

00410962 <.LVL163>:
  410962:	b91b      	cbnz	r3, 41096c <.LBE33>
  410964:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  410966:	2b00      	cmp	r3, #0
  410968:	f040 813c 	bne.w	410be4 <.LVL241>

0041096c <.LBE33>:
        ret = wc_RsaUnPad_ex(key->data, key->dataLen, &pad, pad_value, pad_type,
  41096c:	f504 538a 	add.w	r3, r4, #4416	; 0x1140
  410970:	681b      	ldr	r3, [r3, #0]
  410972:	9306      	str	r3, [sp, #24]

00410974 <.LBB49>:
    hLen = wc_HashGetDigestSize(hType);
  410974:	4648      	mov	r0, r9
  410976:	f00d f9a3 	bl	41dcc0 <wc_HashGetDigestSize>

0041097a <.LVL164>:
    if ((hLen < 0) || (pkcsBlockLen < (2 * (word32)hLen + 2))) {
  41097a:	f1b0 0b00 	subs.w	fp, r0, #0
  41097e:	f2c0 8135 	blt.w	410bec <.LBE55>
  410982:	f10b 0501 	add.w	r5, fp, #1
  410986:	ebb8 0f45 	cmp.w	r8, r5, lsl #1
  41098a:	f0c0 8133 	bcc.w	410bf4 <.LBE56>
    tmp = (byte*)XMALLOC(pkcsBlockLen, heap, DYNAMIC_TYPE_RSA_BUFFER);
  41098e:	4640      	mov	r0, r8

00410990 <.LVL165>:
  410990:	f00e f818 	bl	41e9c4 <.LFE180>

00410994 <.LVL166>:
    if (tmp == NULL) {
  410994:	4606      	mov	r6, r0

00410996 <.LVL167>:
  410996:	2800      	cmp	r0, #0
  410998:	f000 8130 	beq.w	410bfc <.LVL247>
    XMEMSET(tmp, 0, pkcsBlockLen);
  41099c:	4642      	mov	r2, r8
  41099e:	2100      	movs	r1, #0
  4109a0:	f009 fe26 	bl	41a5f0 <.LFE157>

004109a4 <.LVL168>:
  4109a4:	f108 32ff 	add.w	r2, r8, #4294967295
  4109a8:	9208      	str	r2, [sp, #32]
    if ((ret = RsaMGF(mgf, (byte*)(pkcsBlock + (hLen + 1)),
  4109aa:	eba2 020b 	sub.w	r2, r2, fp
  4109ae:	9207      	str	r2, [sp, #28]
  4109b0:	9b06      	ldr	r3, [sp, #24]
  4109b2:	9301      	str	r3, [sp, #4]
  4109b4:	f8cd b000 	str.w	fp, [sp]
  4109b8:	4633      	mov	r3, r6
  4109ba:	eb0a 0105 	add.w	r1, sl, r5
  4109be:	982a      	ldr	r0, [sp, #168]	; 0xa8
  4109c0:	f00b fa98 	bl	41bef4 <.LBE177>

004109c4 <.LVL169>:
  4109c4:	4605      	mov	r5, r0
  4109c6:	2800      	cmp	r0, #0
  4109c8:	f040 8102 	bne.w	410bd0 <.LBB40>

004109cc <.LVL170>:
    for (idx = 0; idx < (word32)hLen; idx++) {
  4109cc:	f1bb 0f00 	cmp.w	fp, #0
  4109d0:	d00b      	beq.n	4109ea <.LVL172+0x10>
  4109d2:	1e70      	subs	r0, r6, #1

004109d4 <.LVL171>:
  4109d4:	4651      	mov	r1, sl
  4109d6:	eb0a 050b 	add.w	r5, sl, fp

004109da <.LVL172>:
        tmp[idx] = tmp[idx] ^ pkcsBlock[1 + idx];
  4109da:	7843      	ldrb	r3, [r0, #1]
  4109dc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
  4109e0:	4053      	eors	r3, r2
  4109e2:	f800 3f01 	strb.w	r3, [r0, #1]!
    for (idx = 0; idx < (word32)hLen; idx++) {
  4109e6:	42a9      	cmp	r1, r5
  4109e8:	d1f7      	bne.n	4109da <.LVL172>
    if ((ret = RsaMGF(mgf, tmp, hLen, tmp + hLen,
  4109ea:	eb06 030b 	add.w	r3, r6, fp
  4109ee:	9309      	str	r3, [sp, #36]	; 0x24
  4109f0:	9a06      	ldr	r2, [sp, #24]
  4109f2:	9201      	str	r2, [sp, #4]
  4109f4:	9a07      	ldr	r2, [sp, #28]
  4109f6:	9200      	str	r2, [sp, #0]
  4109f8:	465a      	mov	r2, fp
  4109fa:	4631      	mov	r1, r6
  4109fc:	982a      	ldr	r0, [sp, #168]	; 0xa8
  4109fe:	f00b fa79 	bl	41bef4 <.LBE177>

00410a02 <.LVL173>:
  410a02:	4605      	mov	r5, r0
  410a04:	2800      	cmp	r0, #0
  410a06:	f040 80e8 	bne.w	410bda <.LBB41>

00410a0a <.LVL174>:
    for (idx = 0; idx < (pkcsBlockLen - hLen - 1); idx++) {
  410a0a:	9a07      	ldr	r2, [sp, #28]
  410a0c:	b16a      	cbz	r2, 410a2a <.LBB37>
  410a0e:	eb0a 010b 	add.w	r1, sl, fp
  410a12:	9809      	ldr	r0, [sp, #36]	; 0x24

00410a14 <.LVL175>:
  410a14:	9b08      	ldr	r3, [sp, #32]
  410a16:	4453      	add	r3, sl
  410a18:	461d      	mov	r5, r3

00410a1a <.LVL176>:
        pkcsBlock[hLen + 1 + idx] = pkcsBlock[hLen + 1 + idx] ^ tmp[idx + hLen];
  410a1a:	f810 3b01 	ldrb.w	r3, [r0], #1
  410a1e:	784a      	ldrb	r2, [r1, #1]
  410a20:	4053      	eors	r3, r2
  410a22:	f801 3f01 	strb.w	r3, [r1, #1]!
    for (idx = 0; idx < (pkcsBlockLen - hLen - 1); idx++) {
  410a26:	42a9      	cmp	r1, r5
  410a28:	d1f7      	bne.n	410a1a <.LVL176>

00410a2a <.LBB37>:
    XFREE(tmp, heap, DYNAMIC_TYPE_RSA_BUFFER);
  410a2a:	4630      	mov	r0, r6
  410a2c:	f00d ffd6 	bl	41e9dc <.LFE2>

00410a30 <.LBE37>:
    idx = hLen + 1 + hLen;
  410a30:	f10b 0601 	add.w	r6, fp, #1

00410a34 <.LVL179>:
  410a34:	445e      	add	r6, fp

00410a36 <.LVL180>:
    while (idx < pkcsBlockLen && pkcsBlock[idx] == 0) {idx++;}
  410a36:	4546      	cmp	r6, r8
  410a38:	d20b      	bcs.n	410a52 <.LVL180+0x1c>
  410a3a:	eb0a 0306 	add.w	r3, sl, r6
  410a3e:	f81a 2006 	ldrb.w	r2, [sl, r6]
  410a42:	b932      	cbnz	r2, 410a52 <.LVL180+0x1c>
  410a44:	3601      	adds	r6, #1
  410a46:	4546      	cmp	r6, r8
  410a48:	d203      	bcs.n	410a52 <.LVL180+0x1c>
  410a4a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  410a4e:	2a00      	cmp	r2, #0
  410a50:	d0f8      	beq.n	410a44 <.LVL180+0xe>
    if ((ret = wc_Hash(hType, optLabel, labelLen, h, hLen)) != 0) {
  410a52:	f8cd b000 	str.w	fp, [sp]
  410a56:	ab0a      	add	r3, sp, #40	; 0x28
  410a58:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  410a5a:	992b      	ldr	r1, [sp, #172]	; 0xac
  410a5c:	4648      	mov	r0, r9
  410a5e:	f009 fc8e 	bl	41a37e <.LFE24>

00410a62 <.LVL182>:
  410a62:	4605      	mov	r5, r0
  410a64:	2800      	cmp	r0, #0
  410a66:	f040 80cc 	bne.w	410c02 <.LBE57>

00410a6a <.LBB38>:
STATIC INLINE int ConstantCompare(const byte* a, const byte* b, int length)
{
    int i;
    int compareSum = 0;

    for (i = 0; i < length; i++) {
  410a6a:	f1bb 0f00 	cmp.w	fp, #0
  410a6e:	dd0b      	ble.n	410a88 <.LBE38>
  410a70:	eb0a 010b 	add.w	r1, sl, fp
  410a74:	a80a      	add	r0, sp, #40	; 0x28

00410a76 <.LVL184>:
  410a76:	448b      	add	fp, r1

00410a78 <.LVL185>:
        compareSum |= a[i] ^ b[i];
  410a78:	f810 3b01 	ldrb.w	r3, [r0], #1
  410a7c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
  410a80:	4053      	eors	r3, r2
  410a82:	431d      	orrs	r5, r3
    for (i = 0; i < length; i++) {
  410a84:	4559      	cmp	r1, fp
  410a86:	d1f7      	bne.n	410a78 <.LVL185>

00410a88 <.LBE38>:
    ret += pkcsBlock[idx++] ^ 0x01; /* separator value is 0x01 */
  410a88:	1c72      	adds	r2, r6, #1

00410a8a <.LVL188>:
  410a8a:	f81a 3006 	ldrb.w	r3, [sl, r6]
  410a8e:	f083 0301 	eor.w	r3, r3, #1
  410a92:	441d      	add	r5, r3

00410a94 <.LVL189>:
    ret += pkcsBlock[0]     ^ 0x00; /* Y, the first value, should be 0 */
  410a94:	f89a 3000 	ldrb.w	r3, [sl]
    if (ret != 0) {
  410a98:	42eb      	cmn	r3, r5
  410a9a:	f040 80b4 	bne.w	410c06 <.LVL250>
    *output = (byte*)(pkcsBlock + idx);
  410a9e:	eb0a 0602 	add.w	r6, sl, r2

00410aa2 <.LVL190>:
    return pkcsBlockLen - idx;
  410aa2:	eba8 0502 	sub.w	r5, r8, r2

00410aa6 <.LVL191>:
  410aa6:	e029      	b.n	410afc <.LBE73>

00410aa8 <.LBE32>:
            key->data = (byte*)XMALLOC(inLen, key->heap, DYNAMIC_TYPE_WOLF_BIGINT);
  410aa8:	4608      	mov	r0, r1

00410aaa <.LVL193>:
  410aaa:	f00d ff8b 	bl	41e9c4 <.LFE180>

00410aae <.LVL194>:
  410aae:	f241 1344 	movw	r3, #4420	; 0x1144
  410ab2:	50e0      	str	r0, [r4, r3]
            key->dataIsAlloc = 1;
  410ab4:	2201      	movs	r2, #1
  410ab6:	f241 1354 	movw	r3, #4436	; 0x1154
  410aba:	54e2      	strb	r2, [r4, r3]
            if (key->data == NULL) {
  410abc:	2800      	cmp	r0, #0
  410abe:	f000 80c4 	beq.w	410c4a <.LVL260>
            XMEMCPY(key->data, in, inLen);
  410ac2:	462a      	mov	r2, r5
  410ac4:	4641      	mov	r1, r8
  410ac6:	f005 fedf 	bl	416888 <memcpy>

00410aca <.LVL195>:
  410aca:	e71e      	b.n	41090a <.LVL155>

00410acc <.LVL196>:
            key->state = RSA_STATE_DECRYPT_UNPAD;
  410acc:	2205      	movs	r2, #5
  410ace:	f241 134c 	movw	r3, #4428	; 0x114c
  410ad2:	50e2      	str	r2, [r4, r3]
  410ad4:	e72f      	b.n	410936 <.LVL157+0xc>

00410ad6 <.LBB82>:
        ret = wc_RsaUnPad_ex(key->data, key->dataLen, &pad, pad_value, pad_type,
  410ad6:	f241 1344 	movw	r3, #4420	; 0x1144
  410ada:	f854 a003 	ldr.w	sl, [r4, r3]
  410ade:	f241 1350 	movw	r3, #4432	; 0x1150
  410ae2:	f854 8003 	ldr.w	r8, [r4, r3]
  410ae6:	4620      	mov	r0, r4

00410ae8 <.LVL198>:
  410ae8:	f00e fa36 	bl	41ef58 <.LFE80>

00410aec <.LBB72>:
    switch (padType) {
  410aec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  410aee:	b1d3      	cbz	r3, 410b26 <.LBB50>
  410af0:	2b01      	cmp	r3, #1
  410af2:	f43f af35 	beq.w	410960 <.LBB35>

00410af6 <.LBE72>:
        byte* pad = NULL;
  410af6:	2600      	movs	r6, #0

00410af8 <.LBB73>:
            ret = RSA_PAD_E;
  410af8:	f06f 05c8 	mvn.w	r5, #200	; 0xc8

00410afc <.LBE73>:
        if (ret > 0 && ret <= (int)outLen && pad != NULL) {
  410afc:	42af      	cmp	r7, r5
  410afe:	bfa8      	it	ge
  410b00:	2d00      	cmpge	r5, #0
  410b02:	f340 808a 	ble.w	410c1a <.LVL253+0x2>
  410b06:	2e00      	cmp	r6, #0
  410b08:	f000 8087 	beq.w	410c1a <.LVL253+0x2>
            if (outPtr == NULL) {
  410b0c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  410b0e:	2b00      	cmp	r3, #0
  410b10:	d07d      	beq.n	410c0e <.LBE58>
                *outPtr = pad;
  410b12:	9b24      	ldr	r3, [sp, #144]	; 0x90
  410b14:	601e      	str	r6, [r3, #0]

00410b16 <.LVL202>:
        if (ret < 0) {
  410b16:	2d00      	cmp	r5, #0
  410b18:	f2c0 8086 	blt.w	410c28 <.LVL255>
        key->state = RSA_STATE_DECRYPT_RES;
  410b1c:	2206      	movs	r2, #6
  410b1e:	f241 134c 	movw	r3, #4428	; 0x114c
  410b22:	50e2      	str	r2, [r4, r3]

00410b24 <.LVL203>:
  410b24:	e080      	b.n	410c28 <.LVL255>

00410b26 <.LBB50>:
    word32 maxOutputLen = (pkcsBlockLen > 10) ? (pkcsBlockLen - 10) : 0;
  410b26:	f1b8 0f0a 	cmp.w	r8, #10
  410b2a:	bf8c      	ite	hi
  410b2c:	f1a8 010a 	subhi.w	r1, r8, #10
  410b30:	2100      	movls	r1, #0

00410b32 <.LVL205>:
    if (output == NULL || pkcsBlockLen == 0) {
  410b32:	f1b8 0f00 	cmp.w	r8, #0
  410b36:	f000 808b 	beq.w	410c50 <.LBB59>

00410b3a <.LVL206>:
    pkcsBlock++; pkcsBlockLen--;
  410b3a:	f108 38ff 	add.w	r8, r8, #4294967295

00410b3e <.LVL207>:
    invalid = (pkcsBlock[0] != padValue) || invalid;
  410b3e:	f89a 2001 	ldrb.w	r2, [sl, #1]
    if (pkcsBlock[0] != 0x0) { /* skip past zero */
  410b42:	f89a 3000 	ldrb.w	r3, [sl]

00410b46 <.LVL208>:
  410b46:	2b00      	cmp	r3, #0
  410b48:	bf08      	it	eq
  410b4a:	42b2      	cmpeq	r2, r6
  410b4c:	bf14      	ite	ne
  410b4e:	2001      	movne	r0, #1
  410b50:	2000      	moveq	r0, #0

00410b52 <.LVL209>:
    if (padValue == RSA_BLOCK_TYPE_1) {
  410b52:	2e01      	cmp	r6, #1
  410b54:	d01e      	beq.n	410b94 <.LVL218>
        while (i<pkcsBlockLen && pkcsBlock[i++]) {/* Null body */}
  410b56:	f1b8 0f01 	cmp.w	r8, #1
  410b5a:	d935      	bls.n	410bc8 <.LVL229>

00410b5c <.LVL210>:
  410b5c:	f89a 3002 	ldrb.w	r3, [sl, #2]
  410b60:	b3a3      	cbz	r3, 410bcc <.LVL231>
  410b62:	f10a 0302 	add.w	r3, sl, #2
  410b66:	2602      	movs	r6, #2

00410b68 <.LVL211>:
  410b68:	45b0      	cmp	r8, r6
  410b6a:	d027      	beq.n	410bbc <.LVL223>
  410b6c:	3601      	adds	r6, #1
  410b6e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  410b72:	2a00      	cmp	r2, #0
  410b74:	d1f8      	bne.n	410b68 <.LVL211>
    if (!(i==pkcsBlockLen || pkcsBlock[i-1]==0)) {
  410b76:	45b0      	cmp	r8, r6
  410b78:	d003      	beq.n	410b82 <.LVL214>
  410b7a:	f81a 3006 	ldrb.w	r3, [sl, r6]
  410b7e:	2b00      	cmp	r3, #0
  410b80:	d169      	bne.n	410c56 <.LVL263>

00410b82 <.LVL214>:
    outputLen = pkcsBlockLen - i;
  410b82:	eba8 0506 	sub.w	r5, r8, r6

00410b86 <.LVL215>:
    if (invalid) {
  410b86:	428d      	cmp	r5, r1
  410b88:	d868      	bhi.n	410c5c <.LVL264>
  410b8a:	2800      	cmp	r0, #0
  410b8c:	d166      	bne.n	410c5c <.LVL264>
    *output = (byte *)(pkcsBlock + i);
  410b8e:	3601      	adds	r6, #1

00410b90 <.LVL216>:
  410b90:	4456      	add	r6, sl

00410b92 <.LVL217>:
  410b92:	e7b3      	b.n	410afc <.LBE73>

00410b94 <.LVL218>:
        while (i<pkcsBlockLen && pkcsBlock[i++] == 0xFF) {/* Null body */}
  410b94:	f1b8 0f01 	cmp.w	r8, #1
  410b98:	d912      	bls.n	410bc0 <.LVL225>

00410b9a <.LVL219>:
  410b9a:	f89a 3002 	ldrb.w	r3, [sl, #2]
  410b9e:	2bff      	cmp	r3, #255	; 0xff
  410ba0:	d110      	bne.n	410bc4 <.LVL227>
  410ba2:	f10a 0302 	add.w	r3, sl, #2
  410ba6:	2602      	movs	r6, #2

00410ba8 <.LVL220>:
  410ba8:	45b0      	cmp	r8, r6
  410baa:	d005      	beq.n	410bb8 <.LVL220+0x10>
  410bac:	3601      	adds	r6, #1
  410bae:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  410bb2:	2aff      	cmp	r2, #255	; 0xff
  410bb4:	d0f8      	beq.n	410ba8 <.LVL220>
  410bb6:	e7de      	b.n	410b76 <.LVL211+0xe>
  410bb8:	4646      	mov	r6, r8

00410bba <.LVL222>:
  410bba:	e7e2      	b.n	410b82 <.LVL214>

00410bbc <.LVL223>:
        while (i<pkcsBlockLen && pkcsBlock[i++]) {/* Null body */}
  410bbc:	4646      	mov	r6, r8

00410bbe <.LVL224>:
  410bbe:	e7e0      	b.n	410b82 <.LVL214>

00410bc0 <.LVL225>:
        while (i<pkcsBlockLen && pkcsBlock[i++] == 0xFF) {/* Null body */}
  410bc0:	2601      	movs	r6, #1

00410bc2 <.LVL226>:
  410bc2:	e7d8      	b.n	410b76 <.LVL211+0xe>

00410bc4 <.LVL227>:
  410bc4:	2602      	movs	r6, #2

00410bc6 <.LVL228>:
  410bc6:	e7d6      	b.n	410b76 <.LVL211+0xe>

00410bc8 <.LVL229>:
        while (i<pkcsBlockLen && pkcsBlock[i++]) {/* Null body */}
  410bc8:	2601      	movs	r6, #1

00410bca <.LVL230>:
  410bca:	e7d4      	b.n	410b76 <.LVL211+0xe>

00410bcc <.LVL231>:
  410bcc:	2602      	movs	r6, #2

00410bce <.LVL232>:
  410bce:	e7d2      	b.n	410b76 <.LVL211+0xe>

00410bd0 <.LBB40>:
        XFREE(tmp, heap, DYNAMIC_TYPE_RSA_BUFFER);
  410bd0:	4630      	mov	r0, r6

00410bd2 <.LVL234>:
  410bd2:	f00d ff03 	bl	41e9dc <.LFE2>

00410bd6 <.LBE40>:
        byte* pad = NULL;
  410bd6:	2600      	movs	r6, #0

00410bd8 <.LVL236>:
  410bd8:	e790      	b.n	410afc <.LBE73>

00410bda <.LBB41>:
        XFREE(tmp, NULL, DYNAMIC_TYPE_RSA_BUFFER);
  410bda:	4630      	mov	r0, r6

00410bdc <.LVL238>:
  410bdc:	f00d fefe 	bl	41e9dc <.LFE2>

00410be0 <.LBE41>:
        byte* pad = NULL;
  410be0:	2600      	movs	r6, #0

00410be2 <.LVL240>:
  410be2:	e78b      	b.n	410afc <.LBE73>

00410be4 <.LVL241>:
  410be4:	2600      	movs	r6, #0

00410be6 <.LBB55>:
        return BUFFER_E;
  410be6:	f06f 0583 	mvn.w	r5, #131	; 0x83
  410bea:	e787      	b.n	410afc <.LBE73>

00410bec <.LBE55>:
        byte* pad = NULL;
  410bec:	2600      	movs	r6, #0

00410bee <.LBB56>:
        return BAD_FUNC_ARG;
  410bee:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  410bf2:	e783      	b.n	410afc <.LBE73>

00410bf4 <.LBE56>:
        byte* pad = NULL;
  410bf4:	2600      	movs	r6, #0

00410bf6 <.LBB57>:
        return BAD_FUNC_ARG;
  410bf6:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  410bfa:	e77f      	b.n	410afc <.LBE73>

00410bfc <.LVL247>:
        return MEMORY_E;
  410bfc:	f06f 057c 	mvn.w	r5, #124	; 0x7c
  410c00:	e77c      	b.n	410afc <.LBE73>

00410c02 <.LBE57>:
        byte* pad = NULL;
  410c02:	2600      	movs	r6, #0

00410c04 <.LVL249>:
  410c04:	e77a      	b.n	410afc <.LBE73>

00410c06 <.LVL250>:
  410c06:	2600      	movs	r6, #0

00410c08 <.LBB58>:
        return BAD_PADDING_E;
  410c08:	f06f 05c0 	mvn.w	r5, #192	; 0xc0

00410c0c <.LVL251>:
  410c0c:	e776      	b.n	410afc <.LBE73>

00410c0e <.LBE58>:
                XMEMCPY(out, pad, ret);
  410c0e:	462a      	mov	r2, r5
  410c10:	4631      	mov	r1, r6
  410c12:	9805      	ldr	r0, [sp, #20]
  410c14:	f005 fe38 	bl	416888 <memcpy>

00410c18 <.LVL253>:
  410c18:	e77d      	b.n	410b16 <.LVL202>
        else if (ret >= 0) {
  410c1a:	2d00      	cmp	r5, #0
  410c1c:	db04      	blt.n	410c28 <.LVL255>
            ret = RSA_BUFFER_E;
  410c1e:	f06f 0582 	mvn.w	r5, #130	; 0x82
  410c22:	e65f      	b.n	4108e4 <.LVL152>

00410c24 <.LBE82>:
    int ret = RSA_WRONG_TYPE_E;
  410c24:	f06f 0581 	mvn.w	r5, #129	; 0x81

00410c28 <.LVL255>:
    if (ret == WC_PENDING_E) {
  410c28:	f115 0f6c 	cmn.w	r5, #108	; 0x6c
  410c2c:	f43f ae61 	beq.w	4108f2 <.LVL153>
  410c30:	e658      	b.n	4108e4 <.LVL152>

00410c32 <.LVL256>:
        return BAD_FUNC_ARG;
  410c32:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  410c36:	e65c      	b.n	4108f2 <.LVL153>
  410c38:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  410c3c:	e659      	b.n	4108f2 <.LVL153>

00410c3e <.LBB80>:
            ret = RSA_PAD_E;
  410c3e:	f06f 05c8 	mvn.w	r5, #200	; 0xc8

00410c42 <.LVL258>:
  410c42:	e7f1      	b.n	410c28 <.LVL255>

00410c44 <.LBE80>:
        ret = BAD_STATE_E;
  410c44:	f06f 05bf 	mvn.w	r5, #191	; 0xbf
  410c48:	e64c      	b.n	4108e4 <.LVL152>

00410c4a <.LVL260>:
                ret = MEMORY_E;
  410c4a:	f06f 057c 	mvn.w	r5, #124	; 0x7c

00410c4e <.LVL261>:
  410c4e:	e649      	b.n	4108e4 <.LVL152>

00410c50 <.LBB59>:
        return BAD_FUNC_ARG;
  410c50:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  410c54:	e7e8      	b.n	410c28 <.LVL255>

00410c56 <.LVL263>:
        return RSA_PAD_E;
  410c56:	f06f 05c8 	mvn.w	r5, #200	; 0xc8
  410c5a:	e7e5      	b.n	410c28 <.LVL255>

00410c5c <.LVL264>:
        return RSA_PAD_E;
  410c5c:	f06f 05c8 	mvn.w	r5, #200	; 0xc8

00410c60 <.LVL265>:
  410c60:	e7e2      	b.n	410c28 <.LVL255>

Disassembly of section .text.build_tree%84:

00410c62 <build_tree>:
{
  410c62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00410c66 <.LCFI11>:
  410c66:	b091      	sub	sp, #68	; 0x44

00410c68 <.LCFI12>:
  410c68:	4604      	mov	r4, r0
  410c6a:	9101      	str	r1, [sp, #4]
    ct_data *tree         = desc->dyn_tree;
  410c6c:	680d      	ldr	r5, [r1, #0]

00410c6e <.LVL186>:
    const ct_data *stree  = desc->stat_desc->static_tree;
  410c6e:	688b      	ldr	r3, [r1, #8]
  410c70:	681e      	ldr	r6, [r3, #0]

00410c72 <.LVL187>:
    int elems             = desc->stat_desc->elems;
  410c72:	68df      	ldr	r7, [r3, #12]

00410c74 <.LVL188>:
    s->heap_len = 0, s->heap_max = HEAP_SIZE;
  410c74:	2200      	movs	r2, #0
  410c76:	f241 4350 	movw	r3, #5200	; 0x1450
  410c7a:	50c2      	str	r2, [r0, r3]
  410c7c:	f240 223d 	movw	r2, #573	; 0x23d
  410c80:	f241 4354 	movw	r3, #5204	; 0x1454
  410c84:	50c2      	str	r2, [r0, r3]

00410c86 <.LVL189>:
    for (n = 0; n < elems; n++) {
  410c86:	2f00      	cmp	r7, #0
  410c88:	dd38      	ble.n	410cfc <.LVL197>
  410c8a:	4629      	mov	r1, r5

00410c8c <.LVL190>:
  410c8c:	f241 4258 	movw	r2, #5208	; 0x1458
  410c90:	4402      	add	r2, r0
  410c92:	f04f 33ff 	mov.w	r3, #4294967295
  410c96:	9306      	str	r3, [sp, #24]
  410c98:	2300      	movs	r3, #0
            tree[n].Len = 0;
  410c9a:	469c      	mov	ip, r3
            s->heap[++(s->heap_len)] = max_code = n;
  410c9c:	f241 4e50 	movw	lr, #5200	; 0x1450
  410ca0:	4486      	add	lr, r0
  410ca2:	4680      	mov	r8, r0
  410ca4:	e006      	b.n	410cb4 <.LVL191+0xe>

00410ca6 <.LVL191>:
            tree[n].Len = 0;
  410ca6:	f8a1 c002 	strh.w	ip, [r1, #2]
    for (n = 0; n < elems; n++) {
  410caa:	3301      	adds	r3, #1
  410cac:	3104      	adds	r1, #4
  410cae:	3201      	adds	r2, #1
  410cb0:	429f      	cmp	r7, r3
  410cb2:	d010      	beq.n	410cd6 <.LVL195>
        if (tree[n].Freq != 0) {
  410cb4:	f835 0023 	ldrh.w	r0, [r5, r3, lsl #2]
  410cb8:	2800      	cmp	r0, #0
  410cba:	d0f4      	beq.n	410ca6 <.LVL191>
            s->heap[++(s->heap_len)] = max_code = n;
  410cbc:	f8de 0000 	ldr.w	r0, [lr]
  410cc0:	1c44      	adds	r4, r0, #1
  410cc2:	f8ce 4000 	str.w	r4, [lr]

00410cc6 <.LVL194>:
  410cc6:	eb08 0080 	add.w	r0, r8, r0, lsl #2
  410cca:	f8c0 3b60 	str.w	r3, [r0, #2912]	; 0xb60
            s->depth[n] = 0;
  410cce:	f882 c000 	strb.w	ip, [r2]
  410cd2:	9306      	str	r3, [sp, #24]
  410cd4:	e7e9      	b.n	410caa <.LVL191+0x4>

00410cd6 <.LVL195>:
  410cd6:	4644      	mov	r4, r8

00410cd8 <.LVL196>:
    while (s->heap_len < 2) {
  410cd8:	f241 4250 	movw	r2, #5200	; 0x1450
  410cdc:	4422      	add	r2, r4
        node = s->heap[++(s->heap_len)] = (max_code < 2 ? ++max_code : 0);
  410cde:	f04f 0e00 	mov.w	lr, #0
        tree[node].Freq = 1;
  410ce2:	f04f 0801 	mov.w	r8, #1
        s->depth[node] = 0;
  410ce6:	f241 4c58 	movw	ip, #5208	; 0x1458
        s->opt_len--; if (stree) s->static_len -= stree[node].Len;
  410cea:	f241 61a8 	movw	r1, #5800	; 0x16a8
  410cee:	4421      	add	r1, r4
  410cf0:	f241 60ac 	movw	r0, #5804	; 0x16ac
  410cf4:	4420      	add	r0, r4
  410cf6:	f8dd 9018 	ldr.w	r9, [sp, #24]
  410cfa:	e01c      	b.n	410d36 <.LVL201+0x1a>

00410cfc <.LVL197>:
    int max_code = -1; /* largest code with non zero frequency */
  410cfc:	f04f 33ff 	mov.w	r3, #4294967295
  410d00:	9306      	str	r3, [sp, #24]
  410d02:	e7e9      	b.n	410cd8 <.LVL196>

00410d04 <.LVL198>:
        node = s->heap[++(s->heap_len)] = (max_code < 2 ? ++max_code : 0);
  410d04:	f109 0901 	add.w	r9, r9, #1
  410d08:	46ca      	mov	sl, r9
  410d0a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  410d0e:	f8c3 ab5c 	str.w	sl, [r3, #2908]	; 0xb5c

00410d12 <.LVL200>:
        tree[node].Freq = 1;
  410d12:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
  410d16:	f825 802a 	strh.w	r8, [r5, sl, lsl #2]
        s->depth[node] = 0;
  410d1a:	44a2      	add	sl, r4

00410d1c <.LVL201>:
  410d1c:	f80a e00c 	strb.w	lr, [sl, ip]
        s->opt_len--; if (stree) s->static_len -= stree[node].Len;
  410d20:	680b      	ldr	r3, [r1, #0]
  410d22:	3b01      	subs	r3, #1
  410d24:	600b      	str	r3, [r1, #0]
  410d26:	b136      	cbz	r6, 410d36 <.LVL201+0x1a>
  410d28:	44b3      	add	fp, r6
  410d2a:	f8bb a002 	ldrh.w	sl, [fp, #2]
  410d2e:	6803      	ldr	r3, [r0, #0]
  410d30:	eba3 030a 	sub.w	r3, r3, sl
  410d34:	6003      	str	r3, [r0, #0]
    while (s->heap_len < 2) {
  410d36:	6813      	ldr	r3, [r2, #0]
  410d38:	2b01      	cmp	r3, #1
  410d3a:	dc06      	bgt.n	410d4a <.LVL201+0x2e>
        node = s->heap[++(s->heap_len)] = (max_code < 2 ? ++max_code : 0);
  410d3c:	3301      	adds	r3, #1
  410d3e:	6013      	str	r3, [r2, #0]
  410d40:	f1b9 0f01 	cmp.w	r9, #1
  410d44:	ddde      	ble.n	410d04 <.LVL198>
  410d46:	46f2      	mov	sl, lr
  410d48:	e7df      	b.n	410d0a <.LVL198+0x6>
  410d4a:	f8cd 9018 	str.w	r9, [sp, #24]
    desc->max_code = max_code;
  410d4e:	9a01      	ldr	r2, [sp, #4]
  410d50:	f8c2 9004 	str.w	r9, [r2, #4]
    for (n = s->heap_len/2; n >= 1; n--) pqdownheap(s, tree, n);
  410d54:	f241 4350 	movw	r3, #5200	; 0x1450
  410d58:	58e6      	ldr	r6, [r4, r3]

00410d5a <.LVL203>:
  410d5a:	2e00      	cmp	r6, #0
  410d5c:	bfb8      	it	lt
  410d5e:	3601      	addlt	r6, #1
  410d60:	1076      	asrs	r6, r6, #1

00410d62 <.LVL204>:
  410d62:	2e00      	cmp	r6, #0
  410d64:	dd06      	ble.n	410d74 <.LVL206+0x2>
  410d66:	4632      	mov	r2, r6
  410d68:	4629      	mov	r1, r5
  410d6a:	4620      	mov	r0, r4
  410d6c:	f009 f970 	bl	41a050 <.LFE0>

00410d70 <.LVL205>:
  410d70:	3e01      	subs	r6, #1

00410d72 <.LVL206>:
  410d72:	d1f8      	bne.n	410d66 <.LVL204+0x4>
  410d74:	f241 4957 	movw	r9, #5207	; 0x1457

00410d78 <.LVL207>:
  410d78:	44b9      	add	r9, r7
  410d7a:	44a1      	add	r9, r4
        pqremove(s, tree, n);  /* n = node of least frequency */
  410d7c:	f241 4850 	movw	r8, #5200	; 0x1450
  410d80:	44a0      	add	r8, r4
  410d82:	f04f 0b01 	mov.w	fp, #1
        s->heap[--(s->heap_max)] = n; /* keep the nodes sorted by frequency */
  410d86:	f241 4a54 	movw	sl, #5204	; 0x1454
  410d8a:	44a2      	add	sl, r4
  410d8c:	e000      	b.n	410d90 <.LVL209>

00410d8e <.LVL208>:
        s->heap[SMALLEST] = node++;
  410d8e:	4637      	mov	r7, r6

00410d90 <.LVL209>:
        pqremove(s, tree, n);  /* n = node of least frequency */
  410d90:	f8d4 6b60 	ldr.w	r6, [r4, #2912]	; 0xb60

00410d94 <.LVL210>:
  410d94:	f8d8 3000 	ldr.w	r3, [r8]
  410d98:	1e5a      	subs	r2, r3, #1
  410d9a:	f8c8 2000 	str.w	r2, [r8]
  410d9e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  410da2:	f8d3 3b5c 	ldr.w	r3, [r3, #2908]	; 0xb5c
  410da6:	f8c4 3b60 	str.w	r3, [r4, #2912]	; 0xb60
  410daa:	465a      	mov	r2, fp
  410dac:	4629      	mov	r1, r5
  410dae:	4620      	mov	r0, r4
  410db0:	f009 f94e 	bl	41a050 <.LFE0>

00410db4 <.LVL211>:
        m = s->heap[SMALLEST]; /* m = node of next least frequency */
  410db4:	f8d4 3b60 	ldr.w	r3, [r4, #2912]	; 0xb60

00410db8 <.LVL212>:
        s->heap[--(s->heap_max)] = n; /* keep the nodes sorted by frequency */
  410db8:	f8da 2000 	ldr.w	r2, [sl]
  410dbc:	eb04 0182 	add.w	r1, r4, r2, lsl #2
  410dc0:	f8c1 6b58 	str.w	r6, [r1, #2904]	; 0xb58
        s->heap[--(s->heap_max)] = m;
  410dc4:	3a02      	subs	r2, #2
  410dc6:	f8ca 2000 	str.w	r2, [sl]
  410dca:	f8c1 3b54 	str.w	r3, [r1, #2900]	; 0xb54
        tree[node].Freq = tree[n].Freq + tree[m].Freq;
  410dce:	eb05 0286 	add.w	r2, r5, r6, lsl #2
  410dd2:	eb05 0183 	add.w	r1, r5, r3, lsl #2
  410dd6:	f835 0026 	ldrh.w	r0, [r5, r6, lsl #2]
  410dda:	f835 e023 	ldrh.w	lr, [r5, r3, lsl #2]
  410dde:	4470      	add	r0, lr
  410de0:	f825 0027 	strh.w	r0, [r5, r7, lsl #2]
        s->depth[node] = (uch)((s->depth[n] >= s->depth[m] ?
  410de4:	4426      	add	r6, r4

00410de6 <.LVL213>:
  410de6:	f241 4e58 	movw	lr, #5208	; 0x1458
  410dea:	f816 000e 	ldrb.w	r0, [r6, lr]
  410dee:	4423      	add	r3, r4

00410df0 <.LVL214>:
  410df0:	f813 300e 	ldrb.w	r3, [r3, lr]
  410df4:	4298      	cmp	r0, r3
  410df6:	bf2c      	ite	cs
  410df8:	1c43      	addcs	r3, r0, #1
  410dfa:	3301      	addcc	r3, #1
  410dfc:	b2db      	uxtb	r3, r3
  410dfe:	f809 3f01 	strb.w	r3, [r9, #1]!
        tree[n].Dad = tree[m].Dad = (ush)node;
  410e02:	b2bb      	uxth	r3, r7
  410e04:	804b      	strh	r3, [r1, #2]
  410e06:	8053      	strh	r3, [r2, #2]
        s->heap[SMALLEST] = node++;
  410e08:	1c7e      	adds	r6, r7, #1

00410e0a <.LVL215>:
  410e0a:	f8c4 7b60 	str.w	r7, [r4, #2912]	; 0xb60
        pqdownheap(s, tree, SMALLEST);
  410e0e:	465a      	mov	r2, fp
  410e10:	4629      	mov	r1, r5
  410e12:	4620      	mov	r0, r4
  410e14:	f009 f91c 	bl	41a050 <.LFE0>

00410e18 <.LVL216>:
    } while (s->heap_len >= 2);
  410e18:	f8d8 3000 	ldr.w	r3, [r8]
  410e1c:	2b01      	cmp	r3, #1
  410e1e:	dcb6      	bgt.n	410d8e <.LVL208>
    s->heap[--(s->heap_max)] = s->heap[SMALLEST];
  410e20:	f241 4254 	movw	r2, #5204	; 0x1454
  410e24:	58a3      	ldr	r3, [r4, r2]
  410e26:	1e59      	subs	r1, r3, #1
  410e28:	50a1      	str	r1, [r4, r2]
  410e2a:	f8d4 eb60 	ldr.w	lr, [r4, #2912]	; 0xb60
  410e2e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  410e32:	f8c3 eb58 	str.w	lr, [r3, #2904]	; 0xb58

00410e36 <.LBB54>:
    ct_data *tree        = desc->dyn_tree;
  410e36:	9801      	ldr	r0, [sp, #4]
  410e38:	6802      	ldr	r2, [r0, #0]

00410e3a <.LVL218>:
    int max_code         = desc->max_code;
  410e3a:	6841      	ldr	r1, [r0, #4]

00410e3c <.LVL219>:
    const ct_data *stree = desc->stat_desc->static_tree;
  410e3c:	6883      	ldr	r3, [r0, #8]
  410e3e:	6818      	ldr	r0, [r3, #0]
  410e40:	4683      	mov	fp, r0

00410e42 <.LVL220>:
    const intf *extra    = desc->stat_desc->extra_bits;
  410e42:	6858      	ldr	r0, [r3, #4]

00410e44 <.LVL221>:
  410e44:	9005      	str	r0, [sp, #20]

00410e46 <.LVL222>:
    int base             = desc->stat_desc->extra_base;
  410e46:	6898      	ldr	r0, [r3, #8]

00410e48 <.LVL223>:
  410e48:	9003      	str	r0, [sp, #12]

00410e4a <.LVL224>:
    int max_length       = desc->stat_desc->max_length;
  410e4a:	691b      	ldr	r3, [r3, #16]

00410e4c <.LVL225>:
  410e4c:	f604 303a 	addw	r0, r4, #2874	; 0xb3a

00410e50 <.LVL226>:
  410e50:	f604 375a 	addw	r7, r4, #2906	; 0xb5a
    for (bits = 0; bits <= MAX_BITS; bits++) s->bl_count[bits] = 0;
  410e54:	2600      	movs	r6, #0

00410e56 <.LVL227>:
  410e56:	f820 6f02 	strh.w	r6, [r0, #2]!
  410e5a:	42b8      	cmp	r0, r7
  410e5c:	d1fb      	bne.n	410e56 <.LVL227>
    tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */
  410e5e:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
  410e62:	2000      	movs	r0, #0
  410e64:	f8ae 0002 	strh.w	r0, [lr, #2]
    for (h = s->heap_max+1; h < HEAP_SIZE; h++) {
  410e68:	f241 4054 	movw	r0, #5204	; 0x1454
  410e6c:	5820      	ldr	r0, [r4, r0]

00410e6e <.LVL228>:
  410e6e:	1c46      	adds	r6, r0, #1

00410e70 <.LVL229>:
  410e70:	f5b6 7f0f 	cmp.w	r6, #572	; 0x23c
  410e74:	f300 80b1 	bgt.w	410fda <.LVL263>
  410e78:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  410e7c:	f600 3c5c 	addw	ip, r0, #2908	; 0xb5c
  410e80:	f241 404c 	movw	r0, #5196	; 0x144c
  410e84:	1820      	adds	r0, r4, r0
  410e86:	f04f 0800 	mov.w	r8, #0
        if (bits > max_length) bits = max_length, overflow++;
  410e8a:	9304      	str	r3, [sp, #16]
        s->opt_len += (ulg)f * (bits + xbits);
  410e8c:	f241 69a8 	movw	r9, #5800	; 0x16a8
  410e90:	44a1      	add	r9, r4
        if (stree) s->static_len += (ulg)f * (stree[n].Len + xbits);
  410e92:	f241 6aac 	movw	sl, #5804	; 0x16ac
  410e96:	44a2      	add	sl, r4
        xbits = 0;
  410e98:	9507      	str	r5, [sp, #28]
  410e9a:	46de      	mov	lr, fp
  410e9c:	9001      	str	r0, [sp, #4]

00410e9e <.LVL230>:
  410e9e:	9402      	str	r4, [sp, #8]
  410ea0:	e019      	b.n	410ed6 <.LVL236+0x6>

00410ea2 <.LVL231>:
  410ea2:	2700      	movs	r7, #0

00410ea4 <.LVL232>:
        s->opt_len += (ulg)f * (bits + xbits);
  410ea4:	f832 5025 	ldrh.w	r5, [r2, r5, lsl #2]

00410ea8 <.LVL233>:
  410ea8:	4438      	add	r0, r7

00410eaa <.LVL234>:
  410eaa:	f8d9 6000 	ldr.w	r6, [r9]
  410eae:	fb05 6000 	mla	r0, r5, r0, r6
  410eb2:	f8c9 0000 	str.w	r0, [r9]
        if (stree) s->static_len += (ulg)f * (stree[n].Len + xbits);
  410eb6:	f1be 0f00 	cmp.w	lr, #0
  410eba:	d009      	beq.n	410ed0 <.LVL236>
  410ebc:	4474      	add	r4, lr
  410ebe:	8860      	ldrh	r0, [r4, #2]
  410ec0:	eb00 0b07 	add.w	fp, r0, r7
  410ec4:	f8da 0000 	ldr.w	r0, [sl]
  410ec8:	fb05 050b 	mla	r5, r5, fp, r0

00410ecc <.LVL235>:
  410ecc:	f8ca 5000 	str.w	r5, [sl]

00410ed0 <.LVL236>:
    for (h = s->heap_max+1; h < HEAP_SIZE; h++) {
  410ed0:	9801      	ldr	r0, [sp, #4]
  410ed2:	4584      	cmp	ip, r0
  410ed4:	d020      	beq.n	410f18 <.LVL245>
        n = s->heap[h];
  410ed6:	f85c 5f04 	ldr.w	r5, [ip, #4]!

00410eda <.LVL238>:
        bits = tree[tree[n].Dad].Len + 1;
  410eda:	00ac      	lsls	r4, r5, #2
  410edc:	1917      	adds	r7, r2, r4
  410ede:	8878      	ldrh	r0, [r7, #2]
  410ee0:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  410ee4:	8840      	ldrh	r0, [r0, #2]
  410ee6:	3001      	adds	r0, #1

00410ee8 <.LVL239>:
        if (bits > max_length) bits = max_length, overflow++;
  410ee8:	4283      	cmp	r3, r0
  410eea:	da02      	bge.n	410ef2 <.LVL242>

00410eec <.LVL240>:
  410eec:	f108 0801 	add.w	r8, r8, #1
  410ef0:	9804      	ldr	r0, [sp, #16]

00410ef2 <.LVL242>:
        tree[n].Len = (ush)bits;
  410ef2:	8078      	strh	r0, [r7, #2]
        if (n > max_code) continue; /* not a leaf node */
  410ef4:	42a9      	cmp	r1, r5
  410ef6:	dbeb      	blt.n	410ed0 <.LVL236>
  410ef8:	9f02      	ldr	r7, [sp, #8]
  410efa:	eb07 0b40 	add.w	fp, r7, r0, lsl #1
        s->bl_count[bits]++;
  410efe:	f8bb 7b3c 	ldrh.w	r7, [fp, #2876]	; 0xb3c
  410f02:	3701      	adds	r7, #1
  410f04:	f8ab 7b3c 	strh.w	r7, [fp, #2876]	; 0xb3c

00410f08 <.LVL243>:
        if (n >= base) xbits = extra[n-base];
  410f08:	9e03      	ldr	r6, [sp, #12]
  410f0a:	42ae      	cmp	r6, r5
  410f0c:	dcc9      	bgt.n	410ea2 <.LVL231>
  410f0e:	1baf      	subs	r7, r5, r6
  410f10:	9e05      	ldr	r6, [sp, #20]
  410f12:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]

00410f16 <.LVL244>:
  410f16:	e7c5      	b.n	410ea4 <.LVL232>

00410f18 <.LVL245>:
  410f18:	9d07      	ldr	r5, [sp, #28]
  410f1a:	9c02      	ldr	r4, [sp, #8]
    if (overflow == 0) return;
  410f1c:	f1b8 0f00 	cmp.w	r8, #0
  410f20:	d05b      	beq.n	410fda <.LVL263>
  410f22:	f203 5c9c 	addw	ip, r3, #1436	; 0x59c
  410f26:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
  410f2a:	f10c 0e02 	add.w	lr, ip, #2

00410f2e <.LVL246>:
  410f2e:	44a6      	add	lr, r4
  410f30:	eb04 0743 	add.w	r7, r4, r3, lsl #1
        bits = max_length-1;
  410f34:	1e58      	subs	r0, r3, #1

00410f36 <.LVL247>:
        while (s->bl_count[bits] == 0) bits--;
  410f36:	f8b7 6b3a 	ldrh.w	r6, [r7, #2874]	; 0xb3a
  410f3a:	b92e      	cbnz	r6, 410f48 <.LVL247+0x12>
  410f3c:	46f1      	mov	r9, lr
  410f3e:	3801      	subs	r0, #1
  410f40:	f839 6d02 	ldrh.w	r6, [r9, #-2]!
  410f44:	2e00      	cmp	r6, #0
  410f46:	d0fa      	beq.n	410f3e <.LVL247+0x8>
  410f48:	eb04 0040 	add.w	r0, r4, r0, lsl #1

00410f4c <.LVL249>:
        s->bl_count[bits]--;      /* move one leaf down the tree */
  410f4c:	3e01      	subs	r6, #1
  410f4e:	f8a0 6b3c 	strh.w	r6, [r0, #2876]	; 0xb3c
        s->bl_count[bits+1] += 2; /* move one overflow item as its brother */
  410f52:	f8b0 6b3e 	ldrh.w	r6, [r0, #2878]	; 0xb3e
  410f56:	3602      	adds	r6, #2
  410f58:	f8a0 6b3e 	strh.w	r6, [r0, #2878]	; 0xb3e
        s->bl_count[max_length]--;
  410f5c:	f8b7 0b3c 	ldrh.w	r0, [r7, #2876]	; 0xb3c
  410f60:	3801      	subs	r0, #1
  410f62:	f8a7 0b3c 	strh.w	r0, [r7, #2876]	; 0xb3c
        overflow -= 2;
  410f66:	f1a8 0802 	sub.w	r8, r8, #2
    } while (overflow > 0);
  410f6a:	f1b8 0f00 	cmp.w	r8, #0
  410f6e:	dce1      	bgt.n	410f34 <.LVL246+0x6>

00410f70 <.LVL251>:
    for (bits = max_length; bits != 0; bits--) {
  410f70:	b39b      	cbz	r3, 410fda <.LVL263>
  410f72:	f10c 0c06 	add.w	ip, ip, #6
  410f76:	eb04 0b0c 	add.w	fp, r4, ip
    for (h = s->heap_max+1; h < HEAP_SIZE; h++) {
  410f7a:	f240 283d 	movw	r8, #573	; 0x23d

00410f7e <.LVL252>:
                s->opt_len += ((long)bits - (long)tree[m].Len)
  410f7e:	f241 6aa8 	movw	sl, #5800	; 0x16a8
  410f82:	44a2      	add	sl, r4
  410f84:	469c      	mov	ip, r3
  410f86:	e01e      	b.n	410fc6 <.LVL261>

00410f88 <.LVL253>:
            n--;
  410f88:	3b01      	subs	r3, #1
        while (n != 0) {
  410f8a:	b1c3      	cbz	r3, 410fbe <.LVL258+0x6>
            m = s->heap[--h];
  410f8c:	f108 38ff 	add.w	r8, r8, #4294967295
  410f90:	f857 0d04 	ldr.w	r0, [r7, #-4]!

00410f94 <.LVL256>:
            if (m > max_code) continue;
  410f94:	4281      	cmp	r1, r0
  410f96:	dbf8      	blt.n	410f8a <.LVL253+0x2>
            if ((unsigned) tree[m].Len != (unsigned) bits) {
  410f98:	eb02 0680 	add.w	r6, r2, r0, lsl #2
  410f9c:	f8b6 e002 	ldrh.w	lr, [r6, #2]
  410fa0:	45e6      	cmp	lr, ip
  410fa2:	d0f1      	beq.n	410f88 <.LVL253>
                s->opt_len += ((long)bits - (long)tree[m].Len)
  410fa4:	ebac 0e0e 	sub.w	lr, ip, lr
                              *(long)tree[m].Freq;
  410fa8:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]

00410fac <.LVL257>:
                s->opt_len += ((long)bits - (long)tree[m].Len)
  410fac:	f8da 4000 	ldr.w	r4, [sl]
  410fb0:	fb00 400e 	mla	r0, r0, lr, r4
  410fb4:	f8ca 0000 	str.w	r0, [sl]

00410fb8 <.LVL258>:
                tree[m].Len = (ush)bits;
  410fb8:	f8a6 c002 	strh.w	ip, [r6, #2]
  410fbc:	e7e4      	b.n	410f88 <.LVL253>
  410fbe:	464c      	mov	r4, r9

00410fc0 <.LVL259>:
    for (bits = max_length; bits != 0; bits--) {
  410fc0:	f1bc 0c01 	subs.w	ip, ip, #1

00410fc4 <.LVL260>:
  410fc4:	d009      	beq.n	410fda <.LVL263>

00410fc6 <.LVL261>:
        n = s->bl_count[bits];
  410fc6:	f83b 3d02 	ldrh.w	r3, [fp, #-2]!

00410fca <.LVL262>:
        while (n != 0) {
  410fca:	2b00      	cmp	r3, #0
  410fcc:	d0f8      	beq.n	410fc0 <.LVL259>
  410fce:	eb04 0788 	add.w	r7, r4, r8, lsl #2
  410fd2:	f607 375c 	addw	r7, r7, #2908	; 0xb5c
  410fd6:	46a1      	mov	r9, r4
  410fd8:	e7d8      	b.n	410f8c <.LVL253+0x4>

00410fda <.LVL263>:
  410fda:	f604 343a 	addw	r4, r4, #2874	; 0xb3a

00410fde <.LVL264>:
  410fde:	f10d 0122 	add.w	r1, sp, #34	; 0x22
  410fe2:	a810      	add	r0, sp, #64	; 0x40

00410fe4 <.LBB56>:
    ush code = 0;              /* running code value */
  410fe4:	2300      	movs	r3, #0

00410fe6 <.LVL265>:
        next_code[bits] = code = (code + bl_count[bits-1]) << 1;
  410fe6:	f834 2f02 	ldrh.w	r2, [r4, #2]!
  410fea:	4413      	add	r3, r2

00410fec <.LVL266>:
  410fec:	b29b      	uxth	r3, r3
  410fee:	005b      	lsls	r3, r3, #1
  410ff0:	b29b      	uxth	r3, r3

00410ff2 <.LVL267>:
  410ff2:	f821 3b02 	strh.w	r3, [r1], #2
    for (bits = 1; bits <= MAX_BITS; bits++) {
  410ff6:	4288      	cmp	r0, r1
  410ff8:	d1f5      	bne.n	410fe6 <.LVL265>

00410ffa <.LVL268>:
    for (n = 0;  n <= max_code; n++) {
  410ffa:	9b06      	ldr	r3, [sp, #24]

00410ffc <.LVL269>:
  410ffc:	2b00      	cmp	r3, #0
  410ffe:	db1f      	blt.n	411040 <.LBE56>
  411000:	462e      	mov	r6, r5
  411002:	2400      	movs	r4, #0

00411004 <.LBB58>:
 */
local unsigned bi_reverse(code, len)
    unsigned code; /* the value to invert */
    int len;       /* its bit length */
{
    register unsigned res = 0;
  411004:	4627      	mov	r7, r4
  411006:	469e      	mov	lr, r3
  411008:	e003      	b.n	411012 <.LBB63>

0041100a <.LBE58>:
    for (n = 0;  n <= max_code; n++) {
  41100a:	3401      	adds	r4, #1
  41100c:	3604      	adds	r6, #4
  41100e:	45a6      	cmp	lr, r4
  411010:	db16      	blt.n	411040 <.LBE56>

00411012 <.LBB63>:
        int len = tree[n].Len;
  411012:	8872      	ldrh	r2, [r6, #2]

00411014 <.LVL273>:
        if (len == 0) continue;
  411014:	2a00      	cmp	r2, #0
  411016:	d0f8      	beq.n	41100a <.LBE58>
        tree[n].Code = bi_reverse(next_code[len]++, len);
  411018:	ab10      	add	r3, sp, #64	; 0x40
  41101a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
  41101e:	f833 1c20 	ldrh.w	r1, [r3, #-32]
  411022:	1c48      	adds	r0, r1, #1
  411024:	f823 0c20 	strh.w	r0, [r3, #-32]

00411028 <.LBB62>:
    register unsigned res = 0;
  411028:	4638      	mov	r0, r7

0041102a <.LVL275>:
    do {
        res |= code & 1;
  41102a:	f001 0301 	and.w	r3, r1, #1
  41102e:	4303      	orrs	r3, r0

00411030 <.LVL276>:
        code >>= 1, res <<= 1;
  411030:	0849      	lsrs	r1, r1, #1
  411032:	0058      	lsls	r0, r3, #1

00411034 <.LVL278>:
    } while (--len > 0);
  411034:	3a01      	subs	r2, #1
  411036:	2a00      	cmp	r2, #0
  411038:	dcf7      	bgt.n	41102a <.LVL275>

0041103a <.LBE62>:
        tree[n].Code = bi_reverse(next_code[len]++, len);
  41103a:	f825 3024 	strh.w	r3, [r5, r4, lsl #2]

0041103e <.LVL281>:
  41103e:	e7e4      	b.n	41100a <.LBE58>

00411040 <.LBE56>:
}
  411040:	b011      	add	sp, #68	; 0x44

00411042 <.LCFI13>:
  411042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section .text.wc_ecc_mulmod_ex%85:

00411046 <wc_ecc_mulmod_ex>:
{
  411046:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0041104a <.LCFI34>:
  41104a:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274

0041104e <.LCFI35>:
   if (k == NULL || G == NULL || R == NULL || modulus == NULL) {
  41104e:	2800      	cmp	r0, #0
  411050:	f000 8197 	beq.w	411382 <.LVL639>
  411054:	4604      	mov	r4, r0
  411056:	2900      	cmp	r1, #0
  411058:	f000 8193 	beq.w	411382 <.LVL639>
  41105c:	2a00      	cmp	r2, #0
  41105e:	f000 8193 	beq.w	411388 <.LVL640>
  411062:	98a6      	ldr	r0, [sp, #664]	; 0x298

00411064 <.LVL529>:
  411064:	2800      	cmp	r0, #0
  411066:	f000 818f 	beq.w	411388 <.LVL640>
  41106a:	9404      	str	r4, [sp, #16]
  41106c:	9302      	str	r3, [sp, #8]
  41106e:	9203      	str	r2, [sp, #12]
  411070:	460f      	mov	r7, r1

00411072 <.LVL530>:
   XMEMSET(M, 0, sizeof(M));
  411072:	2220      	movs	r2, #32

00411074 <.LVL531>:
  411074:	2100      	movs	r1, #0

00411076 <.LVL532>:
  411076:	a894      	add	r0, sp, #592	; 0x250
  411078:	f009 faba 	bl	41a5f0 <.LFE157>

0041107c <.LVL533>:
   if ((err = mp_montgomery_setup(modulus, &mp)) != MP_OKAY) {
  41107c:	a909      	add	r1, sp, #36	; 0x24
  41107e:	98a6      	ldr	r0, [sp, #664]	; 0x298
  411080:	f00d ff76 	bl	41ef70 <.LFE98>

00411084 <.LVL534>:
  411084:	4604      	mov	r4, r0

00411086 <.LVL535>:
  411086:	b120      	cbz	r0, 411092 <.LCFI37>

00411088 <.LVL536>:
}
  411088:	4620      	mov	r0, r4
  41108a:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274

0041108e <.LCFI36>:
  41108e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00411092 <.LCFI37>:
   if ((err = mp_init(&mu)) != MP_OKAY) {
  411092:	a80a      	add	r0, sp, #40	; 0x28

00411094 <.LVL538>:
  411094:	f00d fdfe 	bl	41ec94 <.LFE193>

00411098 <.LVL539>:
  411098:	4604      	mov	r4, r0
  41109a:	2800      	cmp	r0, #0
  41109c:	d1f4      	bne.n	411088 <.LVL536>
   if ((err = mp_montgomery_calc_normalization(&mu, modulus)) != MP_OKAY) {
  41109e:	99a6      	ldr	r1, [sp, #664]	; 0x298
  4110a0:	a80a      	add	r0, sp, #40	; 0x28

004110a2 <.LVL540>:
  4110a2:	f00d feea 	bl	41ee7a <.LFE95>

004110a6 <.LVL541>:
  4110a6:	4604      	mov	r4, r0
  4110a8:	2800      	cmp	r0, #0
  4110aa:	d139      	bne.n	411120 <.LVL555>
  4110ac:	ad93      	add	r5, sp, #588	; 0x24c
  4110ae:	f50d 781b 	add.w	r8, sp, #620	; 0x26c
  4110b2:	46a9      	mov	r9, r5

004110b4 <.LVL542>:
      M[i] = wc_ecc_new_point_h(heap);
  4110b4:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
  4110b6:	f00c fad9 	bl	41d66c <.LBE36>

004110ba <.LVL543>:
  4110ba:	f849 0f04 	str.w	r0, [r9, #4]!
      if (M[i] == NULL) {
  4110be:	2800      	cmp	r0, #0
  4110c0:	d032      	beq.n	411128 <.LVL557+0x2>
  for (i = 0; i < M_POINTS; i++) {
  4110c2:	45c1      	cmp	r9, r8
  4110c4:	d1f6      	bne.n	4110b4 <.LVL542>
   tG = wc_ecc_new_point_h(heap);
  4110c6:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
  4110c8:	f00c fad0 	bl	41d66c <.LBE36>

004110cc <.LVL545>:
   if (tG == NULL)
  4110cc:	4606      	mov	r6, r0
  4110ce:	2800      	cmp	r0, #0
  4110d0:	f000 816e 	beq.w	4113b0 <.LVL651>

004110d4 <.LVL546>:
       if (mp_cmp_d(&mu, 1) == MP_EQ) {
  4110d4:	2101      	movs	r1, #1
  4110d6:	a80a      	add	r0, sp, #40	; 0x28

004110d8 <.LVL547>:
  4110d8:	f00d ff26 	bl	41ef28 <.LFE81>

004110dc <.LVL548>:
  4110dc:	2800      	cmp	r0, #0
  4110de:	d035      	beq.n	41114c <.LVL562>
           err = mp_mulmod(G->x, &mu, modulus, tG->x);
  4110e0:	4633      	mov	r3, r6
  4110e2:	9aa6      	ldr	r2, [sp, #664]	; 0x298
  4110e4:	a90a      	add	r1, sp, #40	; 0x28
  4110e6:	4638      	mov	r0, r7
  4110e8:	f00d ff2a 	bl	41ef40 <.LFE79>

004110ec <.LVL549>:
           if (err == MP_OKAY)
  4110ec:	4604      	mov	r4, r0
  4110ee:	2800      	cmp	r0, #0
  4110f0:	f040 8160 	bne.w	4113b4 <.LVL652>
               err = mp_mulmod(G->y, &mu, modulus, tG->y);
  4110f4:	f506 730a 	add.w	r3, r6, #552	; 0x228
  4110f8:	9aa6      	ldr	r2, [sp, #664]	; 0x298
  4110fa:	a90a      	add	r1, sp, #40	; 0x28
  4110fc:	f507 700a 	add.w	r0, r7, #552	; 0x228

00411100 <.LVL550>:
  411100:	f00d ff1e 	bl	41ef40 <.LFE79>

00411104 <.LVL551>:
           if (err == MP_OKAY)
  411104:	4604      	mov	r4, r0
  411106:	2800      	cmp	r0, #0
  411108:	f040 8141 	bne.w	41138e <.LVL642>
               err = mp_mulmod(G->z, &mu, modulus, tG->z);
  41110c:	f506 638a 	add.w	r3, r6, #1104	; 0x450
  411110:	9aa6      	ldr	r2, [sp, #664]	; 0x298
  411112:	a90a      	add	r1, sp, #40	; 0x28
  411114:	f507 608a 	add.w	r0, r7, #1104	; 0x450

00411118 <.LVL552>:
  411118:	f00d ff12 	bl	41ef40 <.LFE79>

0041111c <.LVL553>:
  41111c:	4604      	mov	r4, r0

0041111e <.LVL554>:
  41111e:	e02e      	b.n	41117e <.LVL568>

00411120 <.LVL555>:
       mp_clear(&mu);
  411120:	a80a      	add	r0, sp, #40	; 0x28

00411122 <.LVL556>:
  411122:	f00d fe3b 	bl	41ed9c <.LFE170>

00411126 <.LVL557>:
       return err;
  411126:	e7af      	b.n	411088 <.LVL536>
  411128:	4606      	mov	r6, r0
         mp_clear(&mu);
  41112a:	a80a      	add	r0, sp, #40	; 0x28
  41112c:	f00d fe36 	bl	41ed9c <.LFE170>

00411130 <.LVL558>:
         err = MEMORY_E; goto exit;
  411130:	f06f 047c 	mvn.w	r4, #124	; 0x7c

00411134 <.L262>:
   wc_ecc_del_point_h(tG, heap);
  411134:	99a8      	ldr	r1, [sp, #672]	; 0x2a0
  411136:	4630      	mov	r0, r6
  411138:	f00d f97e 	bl	41e438 <.LFE10>

0041113c <.LVL560>:
       wc_ecc_del_point_h(M[i], heap);
  41113c:	99a8      	ldr	r1, [sp, #672]	; 0x2a0
  41113e:	f855 0f04 	ldr.w	r0, [r5, #4]!
  411142:	f00d f979 	bl	41e438 <.LFE10>

00411146 <.LVL561>:
   for (i = 0; i < M_POINTS; i++) {
  411146:	4545      	cmp	r5, r8
  411148:	d1f8      	bne.n	41113c <.LVL560>
  41114a:	e79d      	b.n	411088 <.LVL536>

0041114c <.LVL562>:
           err = mp_copy(G->x, tG->x);
  41114c:	4631      	mov	r1, r6
  41114e:	4638      	mov	r0, r7
  411150:	f00d fe89 	bl	41ee66 <.LFE85>

00411154 <.LVL563>:
           if (err == MP_OKAY)
  411154:	4604      	mov	r4, r0
  411156:	2800      	cmp	r0, #0
  411158:	f040 812c 	bne.w	4113b4 <.LVL652>
               err = mp_copy(G->y, tG->y);
  41115c:	f506 710a 	add.w	r1, r6, #552	; 0x228
  411160:	f507 700a 	add.w	r0, r7, #552	; 0x228

00411164 <.LVL564>:
  411164:	f00d fe7f 	bl	41ee66 <.LFE85>

00411168 <.LVL565>:
           if (err == MP_OKAY)
  411168:	4604      	mov	r4, r0
  41116a:	2800      	cmp	r0, #0
  41116c:	f040 810f 	bne.w	41138e <.LVL642>
               err = mp_copy(G->z, tG->z);
  411170:	f506 618a 	add.w	r1, r6, #1104	; 0x450
  411174:	f507 608a 	add.w	r0, r7, #1104	; 0x450

00411178 <.LVL566>:
  411178:	f00d fe75 	bl	41ee66 <.LFE85>

0041117c <.LVL567>:
  41117c:	4604      	mov	r4, r0

0041117e <.LVL568>:
   mp_clear(&mu);
  41117e:	a80a      	add	r0, sp, #40	; 0x28

00411180 <.LVL569>:
  411180:	f00d fe0c 	bl	41ed9c <.LFE170>

00411184 <.LVL570>:
   if (err == MP_OKAY)
  411184:	2c00      	cmp	r4, #0
  411186:	f040 8118 	bne.w	4113ba <.LVL653>
       err = ecc_projective_dbl_point(tG, M[0], a, modulus, mp);
  41118a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41118c:	9300      	str	r3, [sp, #0]
  41118e:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  411190:	9a02      	ldr	r2, [sp, #8]
  411192:	9994      	ldr	r1, [sp, #592]	; 0x250
  411194:	4630      	mov	r0, r6
  411196:	f001 fa1f 	bl	4125d8 <.LFE25>

0041119a <.LVL571>:
  41119a:	4604      	mov	r4, r0
   if (err == MP_OKAY)
  41119c:	2c00      	cmp	r4, #0
  41119e:	f040 80fb 	bne.w	411398 <.LVL646>
       err = ecc_projective_dbl_point(M[0], M[0], a, modulus, mp);
  4111a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4111a4:	9300      	str	r3, [sp, #0]
  4111a6:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  4111a8:	9a02      	ldr	r2, [sp, #8]
  4111aa:	9994      	ldr	r1, [sp, #592]	; 0x250
  4111ac:	4608      	mov	r0, r1
  4111ae:	f001 fa13 	bl	4125d8 <.LFE25>

004111b2 <.LVL573>:
  4111b2:	4604      	mov	r4, r0

004111b4 <.LVL574>:
  4111b4:	e101      	b.n	4113ba <.LVL653>

004111b6 <.LVL575>:
       err = ecc_projective_dbl_point(M[0], M[0], a, modulus, mp);
  4111b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4111b8:	9300      	str	r3, [sp, #0]
  4111ba:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  4111bc:	9a02      	ldr	r2, [sp, #8]
  4111be:	9994      	ldr	r1, [sp, #592]	; 0x250
  4111c0:	4608      	mov	r0, r1
  4111c2:	f001 fa09 	bl	4125d8 <.LFE25>

004111c6 <.LVL576>:
   if (err == MP_OKAY)
  4111c6:	4604      	mov	r4, r0
  4111c8:	2800      	cmp	r0, #0
  4111ca:	f040 80e5 	bne.w	411398 <.LVL646>
  4111ce:	ac94      	add	r4, sp, #592	; 0x250
           err = ecc_projective_add_point(M[j-9], tG, M[j-M_POINTS], a,
  4111d0:	9fa6      	ldr	r7, [sp, #664]	; 0x298

004111d2 <.LVL577>:
  4111d2:	6820      	ldr	r0, [r4, #0]
  4111d4:	f854 2f04 	ldr.w	r2, [r4, #4]!
  4111d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4111da:	9301      	str	r3, [sp, #4]
  4111dc:	9700      	str	r7, [sp, #0]
  4111de:	9b02      	ldr	r3, [sp, #8]
  4111e0:	4631      	mov	r1, r6
  4111e2:	f7fc fc0f 	bl	40da04 <.LFE14>

004111e6 <.LVL578>:
           if (err != MP_OKAY) break;
  4111e6:	2800      	cmp	r0, #0
  4111e8:	f040 80d5 	bne.w	411396 <.LVL645>

004111ec <.LVL579>:
       for (j = 9; j < 16; j++) {
  4111ec:	45a1      	cmp	r9, r4
  4111ee:	d1f0      	bne.n	4111d2 <.LVL577>
  4111f0:	4607      	mov	r7, r0

004111f2 <.LVL580>:
       digidx = get_digit_count(k) - 1;
  4111f2:	9804      	ldr	r0, [sp, #16]
  4111f4:	f00d fe5a 	bl	41eeac <.LFE115>

004111f8 <.LVL581>:
  4111f8:	1e43      	subs	r3, r0, #1
  4111fa:	9306      	str	r3, [sp, #24]

004111fc <.LVL582>:
       mode   = 0;
  4111fc:	9705      	str	r7, [sp, #20]
       bitcpy = bitbuf = 0;
  4111fe:	46bb      	mov	fp, r7
       bitcnt = 1;
  411200:	2401      	movs	r4, #1
       buf    = 0;
  411202:	f04f 0a00 	mov.w	sl, #0
       first  = 1;
  411206:	46a1      	mov	r9, r4
                   err = mp_copy(M[bitbuf-M_POINTS]->y, R->y);
  411208:	9b03      	ldr	r3, [sp, #12]

0041120a <.LVL583>:
  41120a:	f503 730a 	add.w	r3, r3, #552	; 0x228
  41120e:	9307      	str	r3, [sp, #28]
  411210:	e008      	b.n	411224 <.LVL587>

00411212 <.LVL584>:
           i = (int)(buf >> (DIGIT_BIT - 1)) & 1;
  411212:	ea4f 73da 	mov.w	r3, sl, lsr #31

00411216 <.LVL585>:
           buf <<= 1;
  411216:	ea4f 0a4a 	mov.w	sl, sl, lsl #1

0041121a <.LVL586>:
           if (mode == 0 && i == 0)
  41121a:	f083 0201 	eor.w	r2, r3, #1
  41121e:	9905      	ldr	r1, [sp, #20]
  411220:	b989      	cbnz	r1, 411246 <.LVL593>
  411222:	b182      	cbz	r2, 411246 <.LVL593>

00411224 <.LVL587>:
           if (--bitcnt == 0) {
  411224:	3c01      	subs	r4, #1

00411226 <.LVL588>:
  411226:	d1f4      	bne.n	411212 <.LVL584>

00411228 <.LVL589>:
               if (digidx == -1) {
  411228:	9a06      	ldr	r2, [sp, #24]
  41122a:	f1b2 3fff 	cmp.w	r2, #4294967295
  41122e:	f000 80d5 	beq.w	4113dc <.LVL657>
               buf    = get_digit(k, digidx);
  411232:	4614      	mov	r4, r2
  411234:	4611      	mov	r1, r2
  411236:	9804      	ldr	r0, [sp, #16]
  411238:	f00d fa7a 	bl	41e730 <.LFE49>

0041123c <.LVL590>:
  41123c:	4682      	mov	sl, r0

0041123e <.LVL591>:
               --digidx;
  41123e:	1e63      	subs	r3, r4, #1
  411240:	9306      	str	r3, [sp, #24]

00411242 <.LVL592>:
               bitcnt = (int) DIGIT_BIT;
  411242:	2420      	movs	r4, #32
  411244:	e7e5      	b.n	411212 <.LVL584>

00411246 <.LVL593>:
           if (mode == 1 && i == 0) {
  411246:	9905      	ldr	r1, [sp, #20]
  411248:	2901      	cmp	r1, #1
  41124a:	d100      	bne.n	41124e <.LVL593+0x8>
  41124c:	b95a      	cbnz	r2, 411266 <.LVL597>
           bitbuf |= (i << (WINSIZE - ++bitcpy));
  41124e:	f10b 0b01 	add.w	fp, fp, #1
  411252:	f1cb 0204 	rsb	r2, fp, #4
  411256:	4093      	lsls	r3, r2

00411258 <.LVL595>:
  411258:	431f      	orrs	r7, r3

0041125a <.LVL596>:
           if (bitcpy == WINSIZE) {
  41125a:	f1bb 0f04 	cmp.w	fp, #4
  41125e:	d00f      	beq.n	411280 <.LVL603>
           mode = 2;
  411260:	2302      	movs	r3, #2
  411262:	9305      	str	r3, [sp, #20]
  411264:	e7de      	b.n	411224 <.LVL587>

00411266 <.LVL597>:
               err = ecc_projective_dbl_point(R, R, a, modulus, mp);
  411266:	9b09      	ldr	r3, [sp, #36]	; 0x24

00411268 <.LVL598>:
  411268:	9300      	str	r3, [sp, #0]
  41126a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  41126c:	9a02      	ldr	r2, [sp, #8]

0041126e <.LVL599>:
  41126e:	9803      	ldr	r0, [sp, #12]
  411270:	4601      	mov	r1, r0
  411272:	f001 f9b1 	bl	4125d8 <.LFE25>

00411276 <.LVL600>:
               if (err != MP_OKAY) break;
  411276:	4603      	mov	r3, r0
  411278:	2800      	cmp	r0, #0
  41127a:	d0d3      	beq.n	411224 <.LVL587>

0041127c <.LVL601>:
         err = MEMORY_E; goto exit;
  41127c:	461c      	mov	r4, r3

0041127e <.LVL602>:
  41127e:	e759      	b.n	411134 <.L262>

00411280 <.LVL603>:
               if (first == 1) {
  411280:	f1b9 0f01 	cmp.w	r9, #1
  411284:	d026      	beq.n	4112d4 <.LVL612>
  411286:	f04f 0904 	mov.w	r9, #4

0041128a <.LVL604>:
                       err = ecc_projective_dbl_point(R, R, a, modulus, mp);
  41128a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41128c:	9300      	str	r3, [sp, #0]
  41128e:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  411290:	9a02      	ldr	r2, [sp, #8]
  411292:	9803      	ldr	r0, [sp, #12]
  411294:	4601      	mov	r1, r0
  411296:	f001 f99f 	bl	4125d8 <.LFE25>

0041129a <.LVL605>:
                       if (err != MP_OKAY) break;
  41129a:	2800      	cmp	r0, #0
  41129c:	d17e      	bne.n	41139c <.LVL647>

0041129e <.LVL606>:
                   for (j = 0; j < WINSIZE; j++) {
  41129e:	f1b9 0901 	subs.w	r9, r9, #1

004112a2 <.LVL607>:
  4112a2:	d1f2      	bne.n	41128a <.LVL604>
                   err = ecc_projective_add_point(R, M[bitbuf-M_POINTS], R, a,
  4112a4:	ab9c      	add	r3, sp, #624	; 0x270
  4112a6:	eb03 0787 	add.w	r7, r3, r7, lsl #2

004112aa <.LVL608>:
  4112aa:	f857 1c40 	ldr.w	r1, [r7, #-64]
  4112ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4112b0:	9301      	str	r3, [sp, #4]
  4112b2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  4112b4:	9300      	str	r3, [sp, #0]
  4112b6:	9b02      	ldr	r3, [sp, #8]
  4112b8:	9803      	ldr	r0, [sp, #12]
  4112ba:	4602      	mov	r2, r0
  4112bc:	f7fc fba2 	bl	40da04 <.LFE14>

004112c0 <.LVL609>:
  4112c0:	4681      	mov	r9, r0

004112c2 <.LVL610>:
               if (err != MP_OKAY) break;
  4112c2:	f1b9 0f00 	cmp.w	r9, #0
  4112c6:	f040 809f 	bne.w	411408 <.LVL662>
               bitcpy = bitbuf = 0;
  4112ca:	46cb      	mov	fp, r9

004112cc <.LVL611>:
  4112cc:	464f      	mov	r7, r9
               mode = 1;
  4112ce:	2301      	movs	r3, #1
  4112d0:	9305      	str	r3, [sp, #20]
  4112d2:	e7a7      	b.n	411224 <.LVL587>

004112d4 <.LVL612>:
                   err = mp_copy(M[bitbuf-M_POINTS]->x, R->x);
  4112d4:	ab9c      	add	r3, sp, #624	; 0x270
  4112d6:	eb03 0787 	add.w	r7, r3, r7, lsl #2

004112da <.LVL613>:
  4112da:	f857 7c40 	ldr.w	r7, [r7, #-64]
  4112de:	f8dd 900c 	ldr.w	r9, [sp, #12]

004112e2 <.LVL614>:
  4112e2:	4649      	mov	r1, r9
  4112e4:	4638      	mov	r0, r7
  4112e6:	f00d fdbe 	bl	41ee66 <.LFE85>

004112ea <.LVL615>:
                   if (err != MP_OKAY) break;
  4112ea:	4603      	mov	r3, r0
  4112ec:	2800      	cmp	r0, #0
  4112ee:	d1c5      	bne.n	41127c <.LVL601>
                   err = mp_copy(M[bitbuf-M_POINTS]->y, R->y);
  4112f0:	9907      	ldr	r1, [sp, #28]
  4112f2:	f507 700a 	add.w	r0, r7, #552	; 0x228

004112f6 <.LVL616>:
  4112f6:	f00d fdb6 	bl	41ee66 <.LFE85>

004112fa <.LVL617>:
                   if (err != MP_OKAY) break;
  4112fa:	4603      	mov	r3, r0
  4112fc:	2800      	cmp	r0, #0
  4112fe:	d1bd      	bne.n	41127c <.LVL601>
                   err = mp_copy(M[bitbuf-M_POINTS]->z, R->z);
  411300:	f509 618a 	add.w	r1, r9, #1104	; 0x450
  411304:	f507 608a 	add.w	r0, r7, #1104	; 0x450

00411308 <.LVL618>:
  411308:	f00d fdad 	bl	41ee66 <.LFE85>

0041130c <.LVL619>:
  41130c:	4681      	mov	r9, r0

0041130e <.LVL620>:
  41130e:	e7d8      	b.n	4112c2 <.LVL610>

00411310 <.LVL621>:
                   err = ecc_projective_dbl_point(R, R, a, modulus, mp);
  411310:	9b09      	ldr	r3, [sp, #36]	; 0x24

00411312 <.LVL622>:
  411312:	9300      	str	r3, [sp, #0]
  411314:	4623      	mov	r3, r4
  411316:	9a02      	ldr	r2, [sp, #8]
  411318:	4649      	mov	r1, r9
  41131a:	4648      	mov	r0, r9
  41131c:	f001 f95c 	bl	4125d8 <.LFE25>

00411320 <.LVL623>:
                   if (err != MP_OKAY) break;
  411320:	2800      	cmp	r0, #0
  411322:	d13d      	bne.n	4113a0 <.LVL649>

00411324 <.LVL624>:
               bitbuf <<= 1;
  411324:	007f      	lsls	r7, r7, #1

00411326 <.LVL625>:
               if ((bitbuf & (1 << WINSIZE)) != 0) {
  411326:	f017 0310 	ands.w	r3, r7, #16

0041132a <.LVL626>:
  41132a:	d00a      	beq.n	411342 <.LVL629>
                       err = ecc_projective_add_point(R, tG, R, a, modulus,
  41132c:	9b09      	ldr	r3, [sp, #36]	; 0x24

0041132e <.LVL627>:
  41132e:	9301      	str	r3, [sp, #4]
  411330:	9400      	str	r4, [sp, #0]
  411332:	9b02      	ldr	r3, [sp, #8]
  411334:	464a      	mov	r2, r9
  411336:	4631      	mov	r1, r6
  411338:	4648      	mov	r0, r9
  41133a:	f7fc fb63 	bl	40da04 <.LFE14>

0041133e <.LVL628>:
                       if (err != MP_OKAY) break;
  41133e:	4603      	mov	r3, r0
  411340:	bba0      	cbnz	r0, 4113ac <.LVL650>

00411342 <.LVL629>:
           for (j = 0; j < bitcpy; j++) {
  411342:	f10a 0a01 	add.w	sl, sl, #1
  411346:	45d3      	cmp	fp, sl
  411348:	d019      	beq.n	41137e <.LVL638>
               if (first == 0) {
  41134a:	2b00      	cmp	r3, #0
  41134c:	d0e0      	beq.n	411310 <.LVL621>
               bitbuf <<= 1;
  41134e:	007f      	lsls	r7, r7, #1
               if ((bitbuf & (1 << WINSIZE)) != 0) {
  411350:	f017 0f10 	tst.w	r7, #16
  411354:	d0f5      	beq.n	411342 <.LVL629>
                       err = mp_copy(tG->x, R->x);
  411356:	4649      	mov	r1, r9
  411358:	4630      	mov	r0, r6
  41135a:	f00d fd84 	bl	41ee66 <.LFE85>

0041135e <.LVL633>:
                       if (err != MP_OKAY) break;
  41135e:	bb08      	cbnz	r0, 4113a4 <.LVL649+0x4>
                       err = mp_copy(tG->y, R->y);
  411360:	9904      	ldr	r1, [sp, #16]
  411362:	9805      	ldr	r0, [sp, #20]

00411364 <.LVL634>:
  411364:	f00d fd7f 	bl	41ee66 <.LFE85>

00411368 <.LVL635>:
                       if (err != MP_OKAY) break;
  411368:	b9f0      	cbnz	r0, 4113a8 <.LVL649+0x8>
                       err = mp_copy(tG->z, R->z);
  41136a:	9906      	ldr	r1, [sp, #24]
  41136c:	f506 608a 	add.w	r0, r6, #1104	; 0x450

00411370 <.LVL636>:
  411370:	f00d fd79 	bl	41ee66 <.LFE85>

00411374 <.LVL637>:
                       if (err != MP_OKAY) break;
  411374:	4603      	mov	r3, r0
  411376:	2800      	cmp	r0, #0
  411378:	d0e3      	beq.n	411342 <.LVL629>
                       err = mp_copy(tG->z, R->z);
  41137a:	4604      	mov	r4, r0
  41137c:	e6da      	b.n	411134 <.L262>

0041137e <.LVL638>:
  41137e:	9c07      	ldr	r4, [sp, #28]
  411380:	e01e      	b.n	4113c0 <.LVL654>

00411382 <.LVL639>:
       return ECC_BAD_ARG_E;
  411382:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
  411386:	e67f      	b.n	411088 <.LVL536>

00411388 <.LVL640>:
  411388:	f06f 04a9 	mvn.w	r4, #169	; 0xa9

0041138c <.LVL641>:
  41138c:	e67c      	b.n	411088 <.LVL536>

0041138e <.LVL642>:
   mp_clear(&mu);
  41138e:	a80a      	add	r0, sp, #40	; 0x28

00411390 <.LVL643>:
  411390:	f00d fd04 	bl	41ed9c <.LFE170>

00411394 <.LVL644>:
  411394:	e702      	b.n	41119c <.LVL571+0x2>

00411396 <.LVL645>:
           err = ecc_projective_add_point(M[j-9], tG, M[j-M_POINTS], a,
  411396:	4604      	mov	r4, r0

00411398 <.LVL646>:
   if (err == MP_OKAY) {
  411398:	b194      	cbz	r4, 4113c0 <.LVL654>
  41139a:	e6cb      	b.n	411134 <.L262>

0041139c <.LVL647>:
                       err = ecc_projective_dbl_point(R, R, a, modulus, mp);
  41139c:	4604      	mov	r4, r0

0041139e <.LVL648>:
  41139e:	e6c9      	b.n	411134 <.L262>

004113a0 <.LVL649>:
                   err = ecc_projective_dbl_point(R, R, a, modulus, mp);
  4113a0:	4604      	mov	r4, r0
  4113a2:	e6c7      	b.n	411134 <.L262>
                       err = mp_copy(tG->x, R->x);
  4113a4:	4604      	mov	r4, r0
  4113a6:	e6c5      	b.n	411134 <.L262>
                       err = mp_copy(tG->y, R->y);
  4113a8:	4604      	mov	r4, r0
  4113aa:	e6c3      	b.n	411134 <.L262>

004113ac <.LVL650>:
                       err = ecc_projective_add_point(R, tG, R, a, modulus,
  4113ac:	4604      	mov	r4, r0
  4113ae:	e6c1      	b.n	411134 <.L262>

004113b0 <.LVL651>:
       err = MEMORY_E;
  4113b0:	f06f 047c 	mvn.w	r4, #124	; 0x7c

004113b4 <.LVL652>:
   mp_clear(&mu);
  4113b4:	a80a      	add	r0, sp, #40	; 0x28
  4113b6:	f00d fcf1 	bl	41ed9c <.LFE170>

004113ba <.LVL653>:
   if (err == MP_OKAY)
  4113ba:	2c00      	cmp	r4, #0
  4113bc:	f43f aefb 	beq.w	4111b6 <.LVL575>

004113c0 <.LVL654>:
   if (err == MP_OKAY && map)
  4113c0:	2c00      	cmp	r4, #0
  4113c2:	f47f aeb7 	bne.w	411134 <.L262>
  4113c6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
  4113c8:	2b00      	cmp	r3, #0
  4113ca:	f43f aeb3 	beq.w	411134 <.L262>
       err = ecc_map(R, modulus, mp);
  4113ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4113d0:	99a6      	ldr	r1, [sp, #664]	; 0x298
  4113d2:	9803      	ldr	r0, [sp, #12]
  4113d4:	f005 fc22 	bl	416c1c <.LFE21>

004113d8 <.LVL655>:
  4113d8:	4604      	mov	r4, r0

004113da <.LVL656>:
  4113da:	e6ab      	b.n	411134 <.L262>

004113dc <.LVL657>:
       if (mode == 2 && bitcpy > 0) {
  4113dc:	9b05      	ldr	r3, [sp, #20]
  4113de:	2b02      	cmp	r3, #2
  4113e0:	d1ee      	bne.n	4113c0 <.LVL654>

004113e2 <.LVL658>:
           for (j = 0; j < bitcpy; j++) {
  4113e2:	f1bb 0f00 	cmp.w	fp, #0
  4113e6:	ddeb      	ble.n	4113c0 <.LVL654>
  4113e8:	46a2      	mov	sl, r4
                       err = mp_copy(tG->y, R->y);
  4113ea:	9903      	ldr	r1, [sp, #12]
  4113ec:	f501 730a 	add.w	r3, r1, #552	; 0x228
  4113f0:	9304      	str	r3, [sp, #16]

004113f2 <.LVL659>:
  4113f2:	f506 730a 	add.w	r3, r6, #552	; 0x228
  4113f6:	9305      	str	r3, [sp, #20]

004113f8 <.LVL660>:
                       err = mp_copy(tG->z, R->z);
  4113f8:	f501 638a 	add.w	r3, r1, #1104	; 0x450
  4113fc:	9306      	str	r3, [sp, #24]
  4113fe:	464b      	mov	r3, r9
  411400:	9407      	str	r4, [sp, #28]
  411402:	9ca6      	ldr	r4, [sp, #664]	; 0x298
  411404:	4689      	mov	r9, r1

00411406 <.LVL661>:
  411406:	e7a0      	b.n	41134a <.LVL629+0x8>

00411408 <.LVL662>:
  411408:	464b      	mov	r3, r9
  41140a:	e737      	b.n	41127c <.LVL601>

Disassembly of section .text.inflate_table%86:

0041140c <inflate_table>:
unsigned short FAR *lens;
unsigned codes;
code FAR * FAR *table;
unsigned FAR *bits;
unsigned short FAR *work;
{
  41140c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00411410 <.LCFI0>:
  411410:	b09f      	sub	sp, #124	; 0x7c

00411412 <.LCFI1>:
  411412:	9106      	str	r1, [sp, #24]
  411414:	9929      	ldr	r1, [sp, #164]	; 0xa4

00411416 <.LVL1>:
  411416:	f10d 0456 	add.w	r4, sp, #86	; 0x56
  41141a:	f10d 0676 	add.w	r6, sp, #118	; 0x76
       decoding tables.
     */

    /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
    for (len = 0; len <= MAXBITS; len++)
        count[len] = 0;
  41141e:	2500      	movs	r5, #0

00411420 <.LVL2>:
  411420:	f824 5f02 	strh.w	r5, [r4, #2]!
    for (len = 0; len <= MAXBITS; len++)
  411424:	42b4      	cmp	r4, r6
  411426:	d1fb      	bne.n	411420 <.LVL2>

00411428 <.LVL3>:
    for (sym = 0; sym < codes; sym++)
  411428:	b17a      	cbz	r2, 41144a <.LVL5>
  41142a:	9c06      	ldr	r4, [sp, #24]
  41142c:	4626      	mov	r6, r4
  41142e:	eb04 0742 	add.w	r7, r4, r2, lsl #1

00411432 <.LVL4>:
        count[lens[sym]]++;
  411432:	f836 4b02 	ldrh.w	r4, [r6], #2
  411436:	ad1e      	add	r5, sp, #120	; 0x78
  411438:	eb05 0444 	add.w	r4, r5, r4, lsl #1
  41143c:	f834 5c20 	ldrh.w	r5, [r4, #-32]
  411440:	3501      	adds	r5, #1
  411442:	f824 5c20 	strh.w	r5, [r4, #-32]
    for (sym = 0; sym < codes; sym++)
  411446:	42be      	cmp	r6, r7
  411448:	d1f3      	bne.n	411432 <.LVL4>

0041144a <.LVL5>:

    /* bound code lengths, force root to be within code lengths */
    root = *bits;
    for (max = MAXBITS; max >= 1; max--)
        if (count[max] != 0) break;
  41144a:	f8bd 4076 	ldrh.w	r4, [sp, #118]	; 0x76
  41144e:	2c00      	cmp	r4, #0
  411450:	f040 81ad 	bne.w	4117ae <.LVL104>
  411454:	ac1d      	add	r4, sp, #116	; 0x74
    for (max = MAXBITS; max >= 1; max--)
  411456:	f04f 0c0e 	mov.w	ip, #14

0041145a <.LVL6>:
        if (count[max] != 0) break;
  41145a:	f834 5902 	ldrh.w	r5, [r4], #-2
  41145e:	2d00      	cmp	r5, #0
  411460:	f040 8119 	bne.w	411696 <.LVL73>

00411464 <.LVL7>:
    for (max = MAXBITS; max >= 1; max--)
  411464:	f1bc 0c01 	subs.w	ip, ip, #1

00411468 <.LVL8>:
  411468:	d1f7      	bne.n	41145a <.LVL6>

0041146a <.LVL9>:
    if (root > max) root = max;
    if (max == 0) {                     /* no symbols to code at all */
        here.op = (unsigned char)64;    /* invalid code marker */
        here.bits = (unsigned char)1;
        here.val = (unsigned short)0;
        *(*table)++ = here;             /* make a table to force an error */
  41146a:	681a      	ldr	r2, [r3, #0]

0041146c <.LVL10>:
  41146c:	1d11      	adds	r1, r2, #4
  41146e:	6019      	str	r1, [r3, #0]
  411470:	2440      	movs	r4, #64	; 0x40
  411472:	7014      	strb	r4, [r2, #0]
  411474:	2101      	movs	r1, #1
  411476:	7051      	strb	r1, [r2, #1]
  411478:	2000      	movs	r0, #0

0041147a <.LVL11>:
  41147a:	8050      	strh	r0, [r2, #2]
        *(*table)++ = here;
  41147c:	681a      	ldr	r2, [r3, #0]
  41147e:	1d15      	adds	r5, r2, #4
  411480:	601d      	str	r5, [r3, #0]
  411482:	7014      	strb	r4, [r2, #0]
  411484:	7051      	strb	r1, [r2, #1]
  411486:	8050      	strh	r0, [r2, #2]
        *bits = 1;
  411488:	9b28      	ldr	r3, [sp, #160]	; 0xa0

0041148a <.LVL12>:
  41148a:	6019      	str	r1, [r3, #0]

0041148c <.LVL13>:

    /* set return parameters */
    *table += used;
    *bits = root;
    return 0;
}
  41148c:	b01f      	add	sp, #124	; 0x7c

0041148e <.LCFI2>:
  41148e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00411492 <.LCFI3>:
        left -= count[len];
  411492:	f8bd 405a 	ldrh.w	r4, [sp, #90]	; 0x5a

00411496 <.LVL15>:
        if (left < 0) return -1;        /* over-subscribed */
  411496:	f1d4 0402 	rsbs	r4, r4, #2

0041149a <.LVL16>:
  41149a:	d502      	bpl.n	4114a2 <.LVL18>
  41149c:	f04f 30ff 	mov.w	r0, #4294967295

004114a0 <.LVL17>:
  4114a0:	e7f4      	b.n	41148c <.LVL13>

004114a2 <.LVL18>:
  4114a2:	2e01      	cmp	r6, #1
  4114a4:	bf38      	it	cc
  4114a6:	2601      	movcc	r6, #1

004114a8 <.LVL19>:
  4114a8:	9603      	str	r6, [sp, #12]
  4114aa:	f04f 0801 	mov.w	r8, #1
  4114ae:	e111      	b.n	4116d4 <.LVL79>

004114b0 <.LVL20>:
    for (sym = 0; sym < codes; sym++)
  4114b0:	3601      	adds	r6, #1
  4114b2:	4295      	cmp	r5, r2
  4114b4:	f000 8153 	beq.w	41175e <.LVL96>
        if (lens[sym] != 0) work[offs[lens[sym]]++] = (unsigned short)sym;
  4114b8:	f835 4b02 	ldrh.w	r4, [r5], #2
  4114bc:	2c00      	cmp	r4, #0
  4114be:	d0f7      	beq.n	4114b0 <.LVL20>
  4114c0:	af1e      	add	r7, sp, #120	; 0x78
  4114c2:	eb07 0444 	add.w	r4, r7, r4, lsl #1
  4114c6:	f834 7c40 	ldrh.w	r7, [r4, #-64]
  4114ca:	f107 0e01 	add.w	lr, r7, #1
  4114ce:	f824 ec40 	strh.w	lr, [r4, #-64]
  4114d2:	f821 6017 	strh.w	r6, [r1, r7, lsl #1]
  4114d6:	e7eb      	b.n	4114b0 <.LVL20>

004114d8 <.LVL23>:
    mask = used - 1;            /* mask for comparing low */
  4114d8:	9c04      	ldr	r4, [sp, #16]
  4114da:	1e62      	subs	r2, r4, #1
  4114dc:	9208      	str	r2, [sp, #32]

004114de <.LVL24>:
        (type == DISTS && used >= ENOUGH_DISTS))
  4114de:	2802      	cmp	r0, #2
  4114e0:	bf14      	ite	ne
  4114e2:	2200      	movne	r2, #0

004114e4 <.LVL25>:
  4114e4:	2201      	moveq	r2, #1
  4114e6:	4610      	mov	r0, r2

004114e8 <.LVL26>:
  4114e8:	920d      	str	r2, [sp, #52]	; 0x34
    if ((type == LENS && used >= ENOUGH_LENS) ||
  4114ea:	f5b4 7f14 	cmp.w	r4, #592	; 0x250
  4114ee:	f0c0 812b 	bcc.w	411748 <.LVL95>
  4114f2:	2800      	cmp	r0, #0
  4114f4:	f000 8128 	beq.w	411748 <.LVL95>
        return 1;
  4114f8:	2001      	movs	r0, #1
  4114fa:	e7c7      	b.n	41148c <.LVL13>

004114fc <.LVL27>:
  4114fc:	9207      	str	r2, [sp, #28]

004114fe <.LVL28>:
  4114fe:	e091      	b.n	411624 <.LVL57>

00411500 <.LVL29>:
            here.op = (unsigned char)0;
  411500:	2300      	movs	r3, #0
  411502:	9302      	str	r3, [sp, #8]

00411504 <.LVL30>:
        incr = 1U << (len - drop);
  411504:	eba8 000a 	sub.w	r0, r8, sl
  411508:	fa0b f100 	lsl.w	r1, fp, r0

0041150c <.LVL31>:
        fill = 1U << curr;
  41150c:	fa0b f206 	lsl.w	r2, fp, r6

00411510 <.LVL32>:
  411510:	f06f 0303 	mvn.w	r3, #3
  411514:	fa03 f000 	lsl.w	r0, r3, r0
            next[(huff >> drop) + fill] = here;
  411518:	fa24 f30a 	lsr.w	r3, r4, sl
  41151c:	4413      	add	r3, r2
  41151e:	1a5b      	subs	r3, r3, r1
  411520:	9f01      	ldr	r7, [sp, #4]
  411522:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  411526:	9f02      	ldr	r7, [sp, #8]

00411528 <.LVL33>:
  411528:	701f      	strb	r7, [r3, #0]
  41152a:	f883 e001 	strb.w	lr, [r3, #1]
  41152e:	805d      	strh	r5, [r3, #2]
  411530:	4403      	add	r3, r0
        } while (fill != 0);
  411532:	1a52      	subs	r2, r2, r1

00411534 <.LVL34>:
  411534:	d1f8      	bne.n	411528 <.LVL33>
        incr = 1U << (len - 1);
  411536:	f108 31ff 	add.w	r1, r8, #4294967295

0041153a <.LVL35>:
  41153a:	fa0b f101 	lsl.w	r1, fp, r1

0041153e <.LVL36>:
        while (huff & incr)
  41153e:	420c      	tst	r4, r1
  411540:	d002      	beq.n	411548 <.LVL36+0xa>
            incr >>= 1;
  411542:	0849      	lsrs	r1, r1, #1
        while (huff & incr)
  411544:	420c      	tst	r4, r1
  411546:	d1fc      	bne.n	411542 <.LVL36+0x4>
        if (incr != 0) {
  411548:	b111      	cbz	r1, 411550 <.LVL39>
            huff &= incr - 1;
  41154a:	1e4b      	subs	r3, r1, #1
  41154c:	401c      	ands	r4, r3
            huff += incr;
  41154e:	4421      	add	r1, r4

00411550 <.LVL39>:
        if (--(count[len]) == 0) {
  411550:	ab1e      	add	r3, sp, #120	; 0x78
  411552:	eb03 0248 	add.w	r2, r3, r8, lsl #1

00411556 <.LVL40>:
  411556:	f832 3c20 	ldrh.w	r3, [r2, #-32]
  41155a:	3b01      	subs	r3, #1
  41155c:	b29b      	uxth	r3, r3
  41155e:	f822 3c20 	strh.w	r3, [r2, #-32]
  411562:	b933      	cbnz	r3, 411572 <.LVL40+0x1c>
            if (len == max) break;
  411564:	45e0      	cmp	r8, ip
  411566:	d075      	beq.n	411654 <.LVL63>
            len = lens[work[sym]];
  411568:	f8b9 3000 	ldrh.w	r3, [r9]
  41156c:	9a06      	ldr	r2, [sp, #24]
  41156e:	f832 8013 	ldrh.w	r8, [r2, r3, lsl #1]
        if (len > root && (huff & mask) != low) {
  411572:	9803      	ldr	r0, [sp, #12]
  411574:	4580      	cmp	r8, r0
  411576:	d955      	bls.n	411624 <.LVL57>
  411578:	9b08      	ldr	r3, [sp, #32]
  41157a:	ea01 0203 	and.w	r2, r1, r3
  41157e:	9b07      	ldr	r3, [sp, #28]
  411580:	4293      	cmp	r3, r2
  411582:	d0bb      	beq.n	4114fc <.LVL27>
            if (drop == 0)
  411584:	f1ba 0f00 	cmp.w	sl, #0
  411588:	bf08      	it	eq
  41158a:	4682      	moveq	sl, r0
            next += min;            /* here min is 1 << curr */
  41158c:	2304      	movs	r3, #4
  41158e:	fa03 f606 	lsl.w	r6, r3, r6

00411592 <.LVL43>:
  411592:	9b01      	ldr	r3, [sp, #4]
  411594:	4433      	add	r3, r6
  411596:	9301      	str	r3, [sp, #4]

00411598 <.LVL44>:
            curr = len - drop;
  411598:	eba8 060a 	sub.w	r6, r8, sl

0041159c <.LVL45>:
            left = (int)(1 << curr);
  41159c:	fa0b f306 	lsl.w	r3, fp, r6

004115a0 <.LVL46>:
            while (curr + drop < max) {
  4115a0:	45e0      	cmp	r8, ip
  4115a2:	d219      	bcs.n	4115d8 <.LVL46+0x38>
                left -= count[curr + drop];
  4115a4:	a81e      	add	r0, sp, #120	; 0x78
  4115a6:	eb00 0048 	add.w	r0, r0, r8, lsl #1
  4115aa:	f830 0c20 	ldrh.w	r0, [r0, #-32]
  4115ae:	1a1b      	subs	r3, r3, r0
                if (left <= 0) break;
  4115b0:	2b00      	cmp	r3, #0
  4115b2:	dd11      	ble.n	4115d8 <.LVL46+0x38>
  4115b4:	f10a 0401 	add.w	r4, sl, #1
  4115b8:	4434      	add	r4, r6
  4115ba:	a816      	add	r0, sp, #88	; 0x58
  4115bc:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4115c0:	3c02      	subs	r4, #2
                curr++;
  4115c2:	3601      	adds	r6, #1
                left <<= 1;
  4115c4:	005b      	lsls	r3, r3, #1
            while (curr + drop < max) {
  4115c6:	eb0a 0006 	add.w	r0, sl, r6
  4115ca:	4584      	cmp	ip, r0
  4115cc:	d904      	bls.n	4115d8 <.LVL46+0x38>
                left -= count[curr + drop];
  4115ce:	f834 0f02 	ldrh.w	r0, [r4, #2]!
  4115d2:	1a1b      	subs	r3, r3, r0
                if (left <= 0) break;
  4115d4:	2b00      	cmp	r3, #0
  4115d6:	dcf4      	bgt.n	4115c2 <.LVL46+0x22>
            used += 1U << curr;
  4115d8:	fa0b f306 	lsl.w	r3, fp, r6

004115dc <.LVL51>:
  4115dc:	9804      	ldr	r0, [sp, #16]
  4115de:	4418      	add	r0, r3
  4115e0:	4603      	mov	r3, r0
  4115e2:	9004      	str	r0, [sp, #16]

004115e4 <.LVL52>:
            if ((type == LENS && used >= ENOUGH_LENS) ||
  4115e4:	f240 3053 	movw	r0, #851	; 0x353

004115e8 <.LVL53>:
  4115e8:	4283      	cmp	r3, r0
  4115ea:	d902      	bls.n	4115f2 <.LVL54+0x4>
  4115ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30

004115ee <.LVL54>:
  4115ee:	2b00      	cmp	r3, #0
  4115f0:	d14d      	bne.n	41168e <.LVL71>
  4115f2:	9b04      	ldr	r3, [sp, #16]
  4115f4:	f240 204f 	movw	r0, #591	; 0x24f
  4115f8:	4283      	cmp	r3, r0
  4115fa:	d902      	bls.n	411602 <.LVL55>
  4115fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4115fe:	2b00      	cmp	r3, #0
  411600:	d147      	bne.n	411692 <.LVL71+0x4>

00411602 <.LVL55>:
            (*table)[low].op = (unsigned char)curr;
  411602:	0090      	lsls	r0, r2, #2
  411604:	9d09      	ldr	r5, [sp, #36]	; 0x24

00411606 <.LVL56>:
  411606:	682b      	ldr	r3, [r5, #0]
  411608:	f803 6022 	strb.w	r6, [r3, r2, lsl #2]
            (*table)[low].bits = (unsigned char)root;
  41160c:	682b      	ldr	r3, [r5, #0]
  41160e:	4403      	add	r3, r0
  411610:	f89d 400c 	ldrb.w	r4, [sp, #12]
  411614:	705c      	strb	r4, [r3, #1]
            (*table)[low].val = (unsigned short)(next - *table);
  411616:	682b      	ldr	r3, [r5, #0]
  411618:	4418      	add	r0, r3
  41161a:	9c01      	ldr	r4, [sp, #4]
  41161c:	1ae3      	subs	r3, r4, r3
  41161e:	109b      	asrs	r3, r3, #2
  411620:	8043      	strh	r3, [r0, #2]
            low = huff & mask;
  411622:	9207      	str	r2, [sp, #28]

00411624 <.LVL57>:
  411624:	460c      	mov	r4, r1

00411626 <.LVL58>:
        here.bits = (unsigned char)(len - drop);
  411626:	eba8 0e0a 	sub.w	lr, r8, sl
  41162a:	fa5f fe8e 	uxtb.w	lr, lr

0041162e <.LVL59>:
        if ((int)(work[sym]) < end) {
  41162e:	f839 5b02 	ldrh.w	r5, [r9], #2
  411632:	9a05      	ldr	r2, [sp, #20]
  411634:	42aa      	cmp	r2, r5
  411636:	f73f af63 	bgt.w	411500 <.LVL29>
        else if ((int)(work[sym]) > end) {
  41163a:	da07      	bge.n	41164c <.LVL62>
            here.op = (unsigned char)(extra[work[sym]]);
  41163c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  41163e:	f813 3015 	ldrb.w	r3, [r3, r5, lsl #1]
  411642:	9302      	str	r3, [sp, #8]

00411644 <.LVL60>:
            here.val = base[work[sym]];
  411644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  411646:	f833 5015 	ldrh.w	r5, [r3, r5, lsl #1]

0041164a <.LVL61>:
  41164a:	e75b      	b.n	411504 <.LVL30>

0041164c <.LVL62>:
            here.val = 0;
  41164c:	2500      	movs	r5, #0
            here.op = (unsigned char)(32 + 64);         /* end of block */
  41164e:	2360      	movs	r3, #96	; 0x60
  411650:	9302      	str	r3, [sp, #8]
  411652:	e757      	b.n	411504 <.LVL30>

00411654 <.LVL63>:
  411654:	9b09      	ldr	r3, [sp, #36]	; 0x24
    if (huff != 0) {
  411656:	b149      	cbz	r1, 41166c <.LVL66>

00411658 <.LVL64>:
        next[huff] = here;
  411658:	9c01      	ldr	r4, [sp, #4]
  41165a:	eb04 0281 	add.w	r2, r4, r1, lsl #2
  41165e:	2040      	movs	r0, #64	; 0x40
  411660:	f804 0021 	strb.w	r0, [r4, r1, lsl #2]
  411664:	f882 e001 	strb.w	lr, [r2, #1]
  411668:	2100      	movs	r1, #0

0041166a <.LVL65>:
  41166a:	8051      	strh	r1, [r2, #2]

0041166c <.LVL66>:
    *table += used;
  41166c:	681a      	ldr	r2, [r3, #0]
  41166e:	9904      	ldr	r1, [sp, #16]
  411670:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  411674:	601a      	str	r2, [r3, #0]
    *bits = root;
  411676:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  411678:	461a      	mov	r2, r3
  41167a:	9b03      	ldr	r3, [sp, #12]
  41167c:	6013      	str	r3, [r2, #0]
    return 0;
  41167e:	2000      	movs	r0, #0
  411680:	e704      	b.n	41148c <.LVL13>

00411682 <.LVL67>:
        if (left < 0) return -1;        /* over-subscribed */
  411682:	f04f 30ff 	mov.w	r0, #4294967295

00411686 <.LVL68>:
  411686:	e701      	b.n	41148c <.LVL13>

00411688 <.LVL69>:
        return -1;                      /* incomplete set */
  411688:	f04f 30ff 	mov.w	r0, #4294967295

0041168c <.LVL70>:
  41168c:	e6fe      	b.n	41148c <.LVL13>

0041168e <.LVL71>:
                return 1;
  41168e:	2001      	movs	r0, #1
  411690:	e6fc      	b.n	41148c <.LVL13>
  411692:	2001      	movs	r0, #1

00411694 <.LVL72>:
  411694:	e6fa      	b.n	41148c <.LVL13>

00411696 <.LVL73>:
    root = *bits;
  411696:	9c28      	ldr	r4, [sp, #160]	; 0xa0
  411698:	6826      	ldr	r6, [r4, #0]
  41169a:	4566      	cmp	r6, ip
  41169c:	bf28      	it	cs
  41169e:	4666      	movcs	r6, ip

004116a0 <.LVL74>:
    for (min = 1; min < max; min++)
  4116a0:	f1bc 0f01 	cmp.w	ip, #1
  4116a4:	f67f aef5 	bls.w	411492 <.LCFI3>

004116a8 <.LVL75>:
        if (count[min] != 0) break;
  4116a8:	f8bd 405a 	ldrh.w	r4, [sp, #90]	; 0x5a
  4116ac:	2c00      	cmp	r4, #0
  4116ae:	f47f aef0 	bne.w	411492 <.LCFI3>
  4116b2:	ac17      	add	r4, sp, #92	; 0x5c
  4116b4:	f04f 0801 	mov.w	r8, #1

004116b8 <.LVL76>:
    for (min = 1; min < max; min++)
  4116b8:	f108 0801 	add.w	r8, r8, #1
  4116bc:	45e0      	cmp	r8, ip
  4116be:	d003      	beq.n	4116c8 <.LVL76+0x10>
        if (count[min] != 0) break;
  4116c0:	f834 5b02 	ldrh.w	r5, [r4], #2
  4116c4:	2d00      	cmp	r5, #0
  4116c6:	d0f7      	beq.n	4116b8 <.LVL76>
  4116c8:	4634      	mov	r4, r6
  4116ca:	4546      	cmp	r6, r8
  4116cc:	bf38      	it	cc
  4116ce:	4644      	movcc	r4, r8
  4116d0:	9403      	str	r4, [sp, #12]

004116d2 <.LVL78>:
        left -= count[len];
  4116d2:	2402      	movs	r4, #2

004116d4 <.LVL79>:
  4116d4:	ad17      	add	r5, sp, #92	; 0x5c
  4116d6:	af1e      	add	r7, sp, #120	; 0x78

004116d8 <.LVL80>:
  4116d8:	f835 6b02 	ldrh.w	r6, [r5], #2

004116dc <.LVL81>:
        if (left < 0) return -1;        /* over-subscribed */
  4116dc:	ebd6 0444 	rsbs	r4, r6, r4, lsl #1

004116e0 <.LVL82>:
  4116e0:	d4cf      	bmi.n	411682 <.LVL67>
    for (len = 1; len <= MAXBITS; len++) {
  4116e2:	42bd      	cmp	r5, r7
  4116e4:	d1f8      	bne.n	4116d8 <.LVL80>
    if (left > 0 && (type == CODES || max != 1))
  4116e6:	2c00      	cmp	r4, #0
  4116e8:	dd04      	ble.n	4116f4 <.LVL82+0x14>
  4116ea:	2800      	cmp	r0, #0
  4116ec:	d0cc      	beq.n	411688 <.LVL69>
  4116ee:	f1bc 0f01 	cmp.w	ip, #1
  4116f2:	d1c9      	bne.n	411688 <.LVL69>
    offs[1] = 0;
  4116f4:	ad1e      	add	r5, sp, #120	; 0x78
  4116f6:	2400      	movs	r4, #0

004116f8 <.LVL83>:
  4116f8:	f825 4d3e 	strh.w	r4, [r5, #-62]!

004116fc <.LVL84>:
  4116fc:	f10d 065a 	add.w	r6, sp, #90	; 0x5a
  411700:	f10d 0756 	add.w	r7, sp, #86	; 0x56

00411704 <.LVL85>:
        offs[len + 1] = offs[len] + count[len];
  411704:	882c      	ldrh	r4, [r5, #0]
  411706:	f836 eb02 	ldrh.w	lr, [r6], #2
  41170a:	4474      	add	r4, lr
  41170c:	f825 4f02 	strh.w	r4, [r5, #2]!
    for (len = 1; len < MAXBITS; len++)
  411710:	42bd      	cmp	r5, r7
  411712:	d1f7      	bne.n	411704 <.LVL85>

00411714 <.LVL86>:
    for (sym = 0; sym < codes; sym++)
  411714:	b31a      	cbz	r2, 41175e <.LVL96>
  411716:	9c06      	ldr	r4, [sp, #24]
  411718:	4625      	mov	r5, r4
  41171a:	eb04 0242 	add.w	r2, r4, r2, lsl #1

0041171e <.LVL87>:
  41171e:	2600      	movs	r6, #0
  411720:	e6ca      	b.n	4114b8 <.LVL20+0x8>

00411722 <.LVL88>:
    next = *table;              /* current table to fill in */
  411722:	681a      	ldr	r2, [r3, #0]
  411724:	9201      	str	r2, [sp, #4]

00411726 <.LVL89>:
    used = 1U << root;          /* use root table entries */
  411726:	2201      	movs	r2, #1

00411728 <.LVL90>:
  411728:	9c03      	ldr	r4, [sp, #12]
  41172a:	40a2      	lsls	r2, r4
  41172c:	9204      	str	r2, [sp, #16]

0041172e <.LVL91>:
    mask = used - 1;            /* mask for comparing low */
  41172e:	3a01      	subs	r2, #1

00411730 <.LVL92>:
  411730:	9208      	str	r2, [sp, #32]

00411732 <.LVL93>:
        (type == DISTS && used >= ENOUGH_DISTS))
  411732:	2802      	cmp	r0, #2
  411734:	bf14      	ite	ne
  411736:	2200      	movne	r2, #0

00411738 <.LVL94>:
  411738:	2201      	moveq	r2, #1
  41173a:	920d      	str	r2, [sp, #52]	; 0x34
        base = extra = work;    /* dummy value--not used */
  41173c:	910b      	str	r1, [sp, #44]	; 0x2c
  41173e:	910a      	str	r1, [sp, #40]	; 0x28
    if ((type == LENS && used >= ENOUGH_LENS) ||
  411740:	2200      	movs	r2, #0
  411742:	920c      	str	r2, [sp, #48]	; 0x30
        end = 19;
  411744:	2213      	movs	r2, #19
  411746:	9205      	str	r2, [sp, #20]

00411748 <.LVL95>:
  411748:	9e03      	ldr	r6, [sp, #12]
  41174a:	f04f 32ff 	mov.w	r2, #4294967295
  41174e:	9207      	str	r2, [sp, #28]
  411750:	2400      	movs	r4, #0
  411752:	46a2      	mov	sl, r4
        incr = 1U << (len - drop);
  411754:	f04f 0b01 	mov.w	fp, #1
  411758:	4689      	mov	r9, r1
  41175a:	9309      	str	r3, [sp, #36]	; 0x24
  41175c:	e763      	b.n	411626 <.LVL58>

0041175e <.LVL96>:
    switch (type) {
  41175e:	2800      	cmp	r0, #0
  411760:	d0df      	beq.n	411722 <.LVL88>
  411762:	2801      	cmp	r0, #1
        end = -1;
  411764:	bf0c      	ite	eq
  411766:	f44f 7280 	moveq.w	r2, #256	; 0x100
  41176a:	f04f 32ff 	movne.w	r2, #4294967295
  41176e:	9205      	str	r2, [sp, #20]
  411770:	4a13      	ldr	r2, [pc, #76]	; (4117c0 <.LVL105+0x8>)
  411772:	4c14      	ldr	r4, [pc, #80]	; (4117c4 <.LVL105+0xc>)
  411774:	bf08      	it	eq
  411776:	4622      	moveq	r2, r4
  411778:	920b      	str	r2, [sp, #44]	; 0x2c
  41177a:	4a13      	ldr	r2, [pc, #76]	; (4117c8 <.LVL105+0x10>)
  41177c:	4c13      	ldr	r4, [pc, #76]	; (4117cc <.LVL105+0x14>)
  41177e:	bf08      	it	eq
  411780:	4622      	moveq	r2, r4
  411782:	920a      	str	r2, [sp, #40]	; 0x28

00411784 <.LVL97>:
    next = *table;              /* current table to fill in */
  411784:	681a      	ldr	r2, [r3, #0]

00411786 <.LVL98>:
  411786:	9201      	str	r2, [sp, #4]

00411788 <.LVL99>:
    used = 1U << root;          /* use root table entries */
  411788:	2201      	movs	r2, #1

0041178a <.LVL100>:
  41178a:	9c03      	ldr	r4, [sp, #12]
  41178c:	40a2      	lsls	r2, r4
  41178e:	9204      	str	r2, [sp, #16]

00411790 <.LVL101>:
    if ((type == LENS && used >= ENOUGH_LENS) ||
  411790:	2801      	cmp	r0, #1
  411792:	bf14      	ite	ne
  411794:	2400      	movne	r4, #0
  411796:	2401      	moveq	r4, #1
  411798:	940c      	str	r4, [sp, #48]	; 0x30
  41179a:	f5b2 7f55 	cmp.w	r2, #852	; 0x354
  41179e:	f4ff ae9b 	bcc.w	4114d8 <.LVL23>
  4117a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30

004117a4 <.LVL102>:
  4117a4:	2a00      	cmp	r2, #0
  4117a6:	f43f ae97 	beq.w	4114d8 <.LVL23>
        return 1;
  4117aa:	2001      	movs	r0, #1

004117ac <.LVL103>:
  4117ac:	e66e      	b.n	41148c <.LVL13>

004117ae <.LVL104>:
    root = *bits;
  4117ae:	9c28      	ldr	r4, [sp, #160]	; 0xa0
  4117b0:	6826      	ldr	r6, [r4, #0]
  4117b2:	2e0f      	cmp	r6, #15
  4117b4:	bf28      	it	cs
  4117b6:	260f      	movcs	r6, #15

004117b8 <.LVL105>:
    for (max = MAXBITS; max >= 1; max--)
  4117b8:	f04f 0c0f 	mov.w	ip, #15
  4117bc:	e774      	b.n	4116a8 <.LVL75>
  4117be:	bf00      	nop
  4117c0:	0041d72c 	.word	0x0041d72c
  4117c4:	0041d5aa 	.word	0x0041d5aa
  4117c8:	0041d6ec 	.word	0x0041d6ec
  4117cc:	0041d56a 	.word	0x0041d56a

Disassembly of section .text.RsaPublicEncryptEx%87:

004117d0 <RsaPublicEncryptEx>:
{
  4117d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

004117d4 <.LCFI50>:
  4117d4:	b0ab      	sub	sp, #172	; 0xac

004117d6 <.LCFI51>:
  4117d6:	9c34      	ldr	r4, [sp, #208]	; 0xd0
  4117d8:	f89d a0d8 	ldrb.w	sl, [sp, #216]	; 0xd8
  4117dc:	f89d b0e0 	ldrb.w	fp, [sp, #224]	; 0xe0
    if (in == NULL || inLen == 0 || out == NULL || key == NULL) {
  4117e0:	2800      	cmp	r0, #0
  4117e2:	f000 81a8 	beq.w	411b36 <.LVL369>
  4117e6:	2900      	cmp	r1, #0
  4117e8:	f000 81a5 	beq.w	411b36 <.LVL369>
  4117ec:	fab2 f882 	clz	r8, r2
  4117f0:	ea4f 1858 	mov.w	r8, r8, lsr #5
  4117f4:	2c00      	cmp	r4, #0
  4117f6:	f000 81a1 	beq.w	411b3c <.LVL369+0x6>
  4117fa:	f1b8 0f00 	cmp.w	r8, #0
  4117fe:	f040 819d 	bne.w	411b3c <.LVL369+0x6>
  411802:	9005      	str	r0, [sp, #20]
  411804:	461f      	mov	r7, r3
  411806:	4691      	mov	r9, r2
  411808:	460d      	mov	r5, r1
    sz = wc_RsaEncryptSize(key);
  41180a:	4620      	mov	r0, r4

0041180c <.LVL293>:
  41180c:	f00d fa3a 	bl	41ec84 <wc_RsaEncryptSize>

00411810 <.LVL294>:
  411810:	4606      	mov	r6, r0

00411812 <.LVL295>:
    if (sz > (int)outLen) {
  411812:	42b8      	cmp	r0, r7
  411814:	f300 8195 	bgt.w	411b42 <.LVL370>
    if (sz < RSA_MIN_PAD_SZ) {
  411818:	280a      	cmp	r0, #10
  41181a:	f340 8195 	ble.w	411b48 <.LVL370+0x6>
    if (inLen > (word32)(sz - RSA_MIN_PAD_SZ)) {
  41181e:	f1a0 030b 	sub.w	r3, r0, #11
  411822:	429d      	cmp	r5, r3
  411824:	f200 8193 	bhi.w	411b4e <.LVL370+0xc>
    switch (key->state) {
  411828:	f241 134c 	movw	r3, #4428	; 0x114c
  41182c:	58e3      	ldr	r3, [r4, r3]
  41182e:	2b03      	cmp	r3, #3
  411830:	f200 817e 	bhi.w	411b30 <.LVL368>
  411834:	e8df f003 	tbb	[pc, r3]
  411838:	31180202 	.word	0x31180202
        key->state = RSA_STATE_ENCRYPT_PAD;
  41183c:	2201      	movs	r2, #1
  41183e:	f241 134c 	movw	r3, #4428	; 0x114c
  411842:	50e2      	str	r2, [r4, r3]
        ret = wc_RsaPad_ex(in, inLen, out, sz, pad_value, rng, pad_type, hash,
  411844:	9006      	str	r0, [sp, #24]
  411846:	4620      	mov	r0, r4

00411848 <.LVL296>:
  411848:	f00d fb86 	bl	41ef58 <.LFE80>

0041184c <.LBB94>:
    switch (padType)
  41184c:	9b37      	ldr	r3, [sp, #220]	; 0xdc
  41184e:	b3b3      	cbz	r3, 4118be <.LBB112>
  411850:	2b01      	cmp	r3, #1
  411852:	f000 8081 	beq.w	411958 <.LBB102>
            ret = RSA_PAD_E;
  411856:	f06f 08c8 	mvn.w	r8, #200	; 0xc8

0041185a <.LBE94>:
        if (ret < 0) {
  41185a:	f1b8 0f00 	cmp.w	r8, #0
  41185e:	db20      	blt.n	4118a2 <.LVL301>
        key->state = RSA_STATE_ENCRYPT_EXPTMOD;
  411860:	2202      	movs	r2, #2
  411862:	f241 134c 	movw	r3, #4428	; 0x114c
  411866:	50e2      	str	r2, [r4, r3]
        key->dataLen = outLen;
  411868:	f241 1350 	movw	r3, #4432	; 0x1150
  41186c:	50e7      	str	r7, [r4, r3]
        ret = wc_RsaFunction(out, sz, out, &key->dataLen, rsa_type, key, rng);
  41186e:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
  411870:	9202      	str	r2, [sp, #8]
  411872:	9401      	str	r4, [sp, #4]
  411874:	9a35      	ldr	r2, [sp, #212]	; 0xd4
  411876:	9200      	str	r2, [sp, #0]
  411878:	4423      	add	r3, r4
  41187a:	464a      	mov	r2, r9
  41187c:	4631      	mov	r1, r6
  41187e:	4648      	mov	r0, r9
  411880:	f00b f9cf 	bl	41cc22 <.LFE2>

00411884 <.LVL299>:
        if (ret >= 0 || ret == WC_PENDING_E) {
  411884:	f1b0 0800 	subs.w	r8, r0, #0
  411888:	f280 814d 	bge.w	411b26 <.LBE107>
  41188c:	f118 0f6c 	cmn.w	r8, #108	; 0x6c
  411890:	f000 8149 	beq.w	411b26 <.LBE107>
        if (ret < 0) {
  411894:	f1b8 0f00 	cmp.w	r8, #0
  411898:	db03      	blt.n	4118a2 <.LVL301>

0041189a <.LVL300>:
        ret = key->dataLen;
  41189a:	f241 1350 	movw	r3, #4432	; 0x1150
  41189e:	f854 8003 	ldr.w	r8, [r4, r3]

004118a2 <.LVL301>:
    if (ret == WC_PENDING_E) {
  4118a2:	f118 0f6c 	cmn.w	r8, #108	; 0x6c
  4118a6:	d006      	beq.n	4118b6 <.LVL303>
    key->state = RSA_STATE_NONE;
  4118a8:	2200      	movs	r2, #0
  4118aa:	f241 134c 	movw	r3, #4428	; 0x114c
  4118ae:	50e2      	str	r2, [r4, r3]
    wc_RsaCleanup(key);
  4118b0:	4620      	mov	r0, r4
  4118b2:	f00a feaf 	bl	41c614 <.LFE12>

004118b6 <.LVL303>:
}
  4118b6:	4640      	mov	r0, r8
  4118b8:	b02b      	add	sp, #172	; 0xac

004118ba <.LCFI52>:
  4118ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004118be <.LBB112>:
    if (input == NULL || inputLen == 0 || pkcsBlock == NULL ||
  4118be:	2e00      	cmp	r6, #0
  4118c0:	f000 8148 	beq.w	411b54 <.LBB108>
  4118c4:	f1b8 0f00 	cmp.w	r8, #0
  4118c8:	f040 8144 	bne.w	411b54 <.LBB108>
    pkcsBlock[0] = 0x0;       /* set first byte to zero and advance */
  4118cc:	2300      	movs	r3, #0

004118ce <.LVL305>:
  4118ce:	f889 3000 	strb.w	r3, [r9]

004118d2 <.LVL306>:
    pkcsBlock++; pkcsBlockLen--;
  4118d2:	f106 3bff 	add.w	fp, r6, #4294967295

004118d6 <.LVL307>:
    pkcsBlock[0] = padValue;  /* insert padValue */
  4118d6:	f889 a001 	strb.w	sl, [r9, #1]
    if (padValue == RSA_BLOCK_TYPE_1) {
  4118da:	f1ba 0f01 	cmp.w	sl, #1
  4118de:	d019      	beq.n	411914 <.LBE98>

004118e0 <.LBB98>:
        if (pkcsBlockLen < inputLen + 1) {
  4118e0:	1c6b      	adds	r3, r5, #1
  4118e2:	459b      	cmp	fp, r3
  4118e4:	f0c0 813c 	bcc.w	411b60 <.LBB100>
        padLen = pkcsBlockLen - inputLen - 1;
  4118e8:	ea6f 0a05 	mvn.w	sl, r5

004118ec <.LVL308>:
  4118ec:	44da      	add	sl, fp

004118ee <.LVL309>:
        ret = CRYPT_RNG_BlockGenerate((CRYPT_RNG_CTX*)rng, &pkcsBlock[1], padLen);
  4118ee:	4652      	mov	r2, sl
  4118f0:	f109 0102 	add.w	r1, r9, #2
  4118f4:	983c      	ldr	r0, [sp, #240]	; 0xf0
  4118f6:	f00c fe7a 	bl	41e5ee <.LFE14>

004118fa <.LVL310>:
        if (ret != 0) {
  4118fa:	4680      	mov	r8, r0
  4118fc:	2800      	cmp	r0, #0
  4118fe:	d1ac      	bne.n	41185a <.LBE94>

00411900 <.LVL311>:
        for (i = 1; i < padLen; i++) {
  411900:	f1ba 0f01 	cmp.w	sl, #1
  411904:	d912      	bls.n	41192c <.LVL315>
  411906:	f109 0302 	add.w	r3, r9, #2
  41190a:	f10a 0a01 	add.w	sl, sl, #1

0041190e <.LVL312>:
  41190e:	44ca      	add	sl, r9

00411910 <.LVL313>:
            if (pkcsBlock[i] == 0) pkcsBlock[i] = 0x01;
  411910:	2101      	movs	r1, #1
  411912:	e01c      	b.n	41194e <.LBB99+0x4>

00411914 <.LBE98>:
        if (pkcsBlockLen < inputLen + 2) {
  411914:	1cab      	adds	r3, r5, #2
  411916:	459b      	cmp	fp, r3
  411918:	f0c0 811f 	bcc.w	411b5a <.LVL372>
        XMEMSET(&pkcsBlock[1], 0xFF, pkcsBlockLen - inputLen - 2);
  41191c:	ebab 0205 	sub.w	r2, fp, r5
  411920:	3a02      	subs	r2, #2
  411922:	21ff      	movs	r1, #255	; 0xff
  411924:	f109 0002 	add.w	r0, r9, #2
  411928:	f008 fe62 	bl	41a5f0 <.LFE157>

0041192c <.LVL315>:
    pkcsBlock[pkcsBlockLen-inputLen-1] = 0;     /* separator */
  41192c:	ebab 0b05 	sub.w	fp, fp, r5

00411930 <.LVL316>:
  411930:	2300      	movs	r3, #0
  411932:	f809 300b 	strb.w	r3, [r9, fp]
    XMEMCPY(pkcsBlock+pkcsBlockLen-inputLen, input, inputLen);
  411936:	f10b 0b01 	add.w	fp, fp, #1
  41193a:	462a      	mov	r2, r5
  41193c:	9905      	ldr	r1, [sp, #20]
  41193e:	eb09 000b 	add.w	r0, r9, fp
  411942:	f004 ffa1 	bl	416888 <memcpy>

00411946 <.LVL317>:
  411946:	e78b      	b.n	411860 <.LBE94+0x6>

00411948 <.LVL318>:
  411948:	3301      	adds	r3, #1

0041194a <.LBB99>:
        for (i = 1; i < padLen; i++) {
  41194a:	459a      	cmp	sl, r3
  41194c:	d0ee      	beq.n	41192c <.LVL315>
            if (pkcsBlock[i] == 0) pkcsBlock[i] = 0x01;
  41194e:	781a      	ldrb	r2, [r3, #0]
  411950:	2a00      	cmp	r2, #0
  411952:	d1f9      	bne.n	411948 <.LVL318>
  411954:	7019      	strb	r1, [r3, #0]
  411956:	e7f7      	b.n	411948 <.LVL318>

00411958 <.LBB102>:
    if (optLabel == NULL && labelLen > 0) {
  411958:	9b3a      	ldr	r3, [sp, #232]	; 0xe8

0041195a <.LVL320>:
  41195a:	b91b      	cbnz	r3, 411964 <.LBE102>
  41195c:	9b3b      	ldr	r3, [sp, #236]	; 0xec
  41195e:	2b00      	cmp	r3, #0
  411960:	f040 80cc 	bne.w	411afc <.LBE105>

00411964 <.LBE102>:
        ret = wc_RsaPad_ex(in, inLen, out, sz, pad_value, rng, pad_type, hash,
  411964:	f504 538a 	add.w	r3, r4, #4416	; 0x1140
  411968:	681b      	ldr	r3, [r3, #0]
  41196a:	9308      	str	r3, [sp, #32]

0041196c <.LBB107>:
    hLen = wc_HashGetDigestSize(hType);
  41196c:	4658      	mov	r0, fp
  41196e:	f00c f9a7 	bl	41dcc0 <wc_HashGetDigestSize>

00411972 <.LVL321>:
    if (hLen < 0) {
  411972:	1e03      	subs	r3, r0, #0
  411974:	9307      	str	r3, [sp, #28]
  411976:	f2c0 80c4 	blt.w	411b02 <.LVL361>
        if ((word32)hLen > sizeof(lHash)) {
  41197a:	2b40      	cmp	r3, #64	; 0x40
  41197c:	f200 80c4 	bhi.w	411b08 <.LVL361+0x6>
    if ((ret = wc_Hash(hType, optLabel, labelLen, lHash, hLen)) != 0) {
  411980:	9300      	str	r3, [sp, #0]
  411982:	ab0a      	add	r3, sp, #40	; 0x28
  411984:	9a3b      	ldr	r2, [sp, #236]	; 0xec
  411986:	993a      	ldr	r1, [sp, #232]	; 0xe8
  411988:	4658      	mov	r0, fp

0041198a <.LVL322>:
  41198a:	f008 fcf8 	bl	41a37e <.LFE24>

0041198e <.LVL323>:
  41198e:	4680      	mov	r8, r0
  411990:	2800      	cmp	r0, #0
  411992:	f47f af62 	bne.w	41185a <.LBE94>
    if ((word32)(2 * hLen + 2) > pkcsBlockLen) {
  411996:	9b07      	ldr	r3, [sp, #28]
  411998:	3301      	adds	r3, #1
  41199a:	9309      	str	r3, [sp, #36]	; 0x24
  41199c:	005b      	lsls	r3, r3, #1
  41199e:	429e      	cmp	r6, r3
  4119a0:	f0c0 80b5 	bcc.w	411b0e <.LVL362>
    if (inputLen > (pkcsBlockLen - 2 * hLen - 2)) {
  4119a4:	f1a3 0802 	sub.w	r8, r3, #2
  4119a8:	1af3      	subs	r3, r6, r3
  4119aa:	429d      	cmp	r5, r3
  4119ac:	f200 80b2 	bhi.w	411b14 <.LVL362+0x6>
    idx = pkcsBlockLen - 1 - inputLen;
  4119b0:	1b70      	subs	r0, r6, r5

004119b2 <.LVL324>:
  4119b2:	f100 3bff 	add.w	fp, r0, #4294967295

004119b6 <.LVL325>:
  4119b6:	f1a0 0a02 	sub.w	sl, r0, #2

004119ba <.LVL326>:
    psLen = pkcsBlockLen - inputLen - 2 * hLen - 2;
  4119ba:	ebaa 0808 	sub.w	r8, sl, r8

004119be <.LVL327>:
    if (pkcsBlockLen < inputLen) { /*make sure not writing over end of buffer */
  4119be:	42b5      	cmp	r5, r6
  4119c0:	f200 80ab 	bhi.w	411b1a <.LVL363>
    XMEMCPY(pkcsBlock + (pkcsBlockLen - inputLen), input, inputLen);
  4119c4:	462a      	mov	r2, r5
  4119c6:	9905      	ldr	r1, [sp, #20]
  4119c8:	4448      	add	r0, r9
  4119ca:	f004 ff5d 	bl	416888 <memcpy>

004119ce <.LVL328>:
    pkcsBlock[idx--] = 0x01; /* PS and M separator */
  4119ce:	eb09 030b 	add.w	r3, r9, fp
  4119d2:	2201      	movs	r2, #1
  4119d4:	f809 200b 	strb.w	r2, [r9, fp]
    while (psLen > 0 && idx > 0) {
  4119d8:	f1b8 0f00 	cmp.w	r8, #0
  4119dc:	dd0f      	ble.n	4119fe <.LVL332>
  4119de:	f1ba 0f00 	cmp.w	sl, #0
  4119e2:	d00c      	beq.n	4119fe <.LVL332>
        pkcsBlock[idx--] = 0x00;
  4119e4:	2200      	movs	r2, #0
  4119e6:	4651      	mov	r1, sl

004119e8 <.LVL329>:
  4119e8:	3901      	subs	r1, #1
  4119ea:	f803 2d01 	strb.w	r2, [r3, #-1]!
        psLen--;
  4119ee:	f108 38ff 	add.w	r8, r8, #4294967295
    while (psLen > 0 && idx > 0) {
  4119f2:	f1b8 0f00 	cmp.w	r8, #0
  4119f6:	dd7b      	ble.n	411af0 <.LVL356>
  4119f8:	2900      	cmp	r1, #0
  4119fa:	d1f5      	bne.n	4119e8 <.LVL329>
  4119fc:	468a      	mov	sl, r1

004119fe <.LVL332>:
    idx = idx - hLen + 1;
  4119fe:	9d07      	ldr	r5, [sp, #28]

00411a00 <.LVL333>:
  411a00:	f1c5 0001 	rsb	r0, r5, #1
  411a04:	4450      	add	r0, sl
    XMEMCPY(pkcsBlock + idx, lHash, hLen);
  411a06:	462a      	mov	r2, r5
  411a08:	a90a      	add	r1, sp, #40	; 0x28
  411a0a:	4448      	add	r0, r9
  411a0c:	f004 ff3c 	bl	416888 <memcpy>

00411a10 <.LVL334>:
    if ((ret = CRYPT_RNG_BlockGenerate((CRYPT_RNG_CTX*)rng, seed, hLen)) != 0) {    
  411a10:	462a      	mov	r2, r5
  411a12:	a91a      	add	r1, sp, #104	; 0x68
  411a14:	983c      	ldr	r0, [sp, #240]	; 0xf0
  411a16:	f00c fdea 	bl	41e5ee <.LFE14>

00411a1a <.LVL335>:
  411a1a:	4680      	mov	r8, r0

00411a1c <.LVL336>:
  411a1c:	2800      	cmp	r0, #0
  411a1e:	f47f af1c 	bne.w	41185a <.LBE94>
    dbMask = (byte*)XMALLOC(pkcsBlockLen - hLen - 1, heap, DYNAMIC_TYPE_RSA);
  411a22:	1e73      	subs	r3, r6, #1
  411a24:	9d07      	ldr	r5, [sp, #28]
  411a26:	eba3 0b05 	sub.w	fp, r3, r5
  411a2a:	4658      	mov	r0, fp

00411a2c <.LVL337>:
  411a2c:	f00c ffca 	bl	41e9c4 <.LFE180>

00411a30 <.LVL338>:
    if (dbMask == NULL) {
  411a30:	4682      	mov	sl, r0

00411a32 <.LVL339>:
  411a32:	2800      	cmp	r0, #0
  411a34:	d074      	beq.n	411b20 <.LVL365>
    XMEMSET(dbMask, 0, pkcsBlockLen - hLen - 1); /* help static analyzer */
  411a36:	465a      	mov	r2, fp
  411a38:	2100      	movs	r1, #0
  411a3a:	f008 fdd9 	bl	41a5f0 <.LFE157>

00411a3e <.LVL340>:
    ret = RsaMGF(mgf, seed, hLen, dbMask, pkcsBlockLen - hLen - 1, heap);
  411a3e:	9b08      	ldr	r3, [sp, #32]
  411a40:	9301      	str	r3, [sp, #4]
  411a42:	f8cd b000 	str.w	fp, [sp]
  411a46:	4653      	mov	r3, sl
  411a48:	462a      	mov	r2, r5
  411a4a:	a91a      	add	r1, sp, #104	; 0x68
  411a4c:	9839      	ldr	r0, [sp, #228]	; 0xe4
  411a4e:	f00a fa51 	bl	41bef4 <.LBE177>

00411a52 <.LVL341>:
    if (ret != 0) {
  411a52:	4680      	mov	r8, r0
  411a54:	2800      	cmp	r0, #0
  411a56:	d14d      	bne.n	411af4 <.LBB105>

00411a58 <.LVL342>:
    idx = hLen + 1;
  411a58:	9a09      	ldr	r2, [sp, #36]	; 0x24
  411a5a:	4615      	mov	r5, r2

00411a5c <.LVL343>:
    while (idx < pkcsBlockLen && (word32)i < (pkcsBlockLen - hLen -1)) {
  411a5c:	4296      	cmp	r6, r2
  411a5e:	d917      	bls.n	411a90 <.LBB104>
  411a60:	f1bb 0f00 	cmp.w	fp, #0
  411a64:	d014      	beq.n	411a90 <.LBB104>
  411a66:	4650      	mov	r0, sl

00411a68 <.LVL344>:
  411a68:	9b07      	ldr	r3, [sp, #28]
  411a6a:	eb09 0103 	add.w	r1, r9, r3
  411a6e:	eb0a 0e0b 	add.w	lr, sl, fp
  411a72:	f8dd c018 	ldr.w	ip, [sp, #24]

00411a76 <.LVL345>:
        pkcsBlock[idx] = dbMask[i++] ^ pkcsBlock[idx];
  411a76:	f810 3b01 	ldrb.w	r3, [r0], #1
  411a7a:	f891 8001 	ldrb.w	r8, [r1, #1]
  411a7e:	ea83 0308 	eor.w	r3, r3, r8
  411a82:	f801 3f01 	strb.w	r3, [r1, #1]!
        idx++;
  411a86:	3201      	adds	r2, #1
    while (idx < pkcsBlockLen && (word32)i < (pkcsBlockLen - hLen -1)) {
  411a88:	4594      	cmp	ip, r2
  411a8a:	d901      	bls.n	411a90 <.LBB104>
  411a8c:	4570      	cmp	r0, lr
  411a8e:	d1f2      	bne.n	411a76 <.LVL345>

00411a90 <.LBB104>:
    XFREE(dbMask, heap, DYNAMIC_TYPE_RSA);
  411a90:	4650      	mov	r0, sl
  411a92:	f00c ffa3 	bl	41e9dc <.LFE2>

00411a96 <.LBE104>:
    pkcsBlock[idx++] = 0x00;
  411a96:	464b      	mov	r3, r9
  411a98:	2200      	movs	r2, #0
  411a9a:	f803 2b01 	strb.w	r2, [r3], #1
    if ((ret = RsaMGF(mgf, pkcsBlock + hLen + 1, pkcsBlockLen - hLen - 1,
  411a9e:	9a07      	ldr	r2, [sp, #28]
  411aa0:	1c51      	adds	r1, r2, #1
  411aa2:	9808      	ldr	r0, [sp, #32]
  411aa4:	9001      	str	r0, [sp, #4]
  411aa6:	9200      	str	r2, [sp, #0]
  411aa8:	465a      	mov	r2, fp
  411aaa:	4449      	add	r1, r9
  411aac:	9839      	ldr	r0, [sp, #228]	; 0xe4
  411aae:	f00a fa21 	bl	41bef4 <.LBE177>

00411ab2 <.LVL349>:
  411ab2:	4680      	mov	r8, r0
  411ab4:	2800      	cmp	r0, #0
  411ab6:	f47f aed0 	bne.w	41185a <.LBE94>

00411aba <.LVL350>:
    while (idx < (word32)(hLen + 1) && i < hLen) {
  411aba:	9a07      	ldr	r2, [sp, #28]
  411abc:	2a00      	cmp	r2, #0
  411abe:	f77f aecc 	ble.w	41185a <.LBE94>
  411ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411ac4:	2b01      	cmp	r3, #1
  411ac6:	f67f aec8 	bls.w	41185a <.LBE94>
  411aca:	4648      	mov	r0, r9

00411acc <.LVL351>:
  411acc:	f10d 0e67 	add.w	lr, sp, #103	; 0x67
  411ad0:	4641      	mov	r1, r8
  411ad2:	4694      	mov	ip, r2

00411ad4 <.LVL352>:
        pkcsBlock[idx] = pkcsBlock[idx] ^ seed[i++];
  411ad4:	3101      	adds	r1, #1

00411ad6 <.LVL353>:
  411ad6:	7843      	ldrb	r3, [r0, #1]
  411ad8:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  411adc:	4053      	eors	r3, r2
  411ade:	f800 3f01 	strb.w	r3, [r0, #1]!

00411ae2 <.LVL354>:
    while (idx < (word32)(hLen + 1) && i < hLen) {
  411ae2:	1c4b      	adds	r3, r1, #1

00411ae4 <.LVL355>:
  411ae4:	429d      	cmp	r5, r3
  411ae6:	f67f aeb8 	bls.w	41185a <.LBE94>
  411aea:	458c      	cmp	ip, r1
  411aec:	dcf2      	bgt.n	411ad4 <.LVL352>
  411aee:	e6b4      	b.n	41185a <.LBE94>

00411af0 <.LVL356>:
  411af0:	468a      	mov	sl, r1
  411af2:	e784      	b.n	4119fe <.LVL332>

00411af4 <.LBB105>:
        XFREE(dbMask, heap, DYNAMIC_TYPE_RSA);
  411af4:	4650      	mov	r0, sl

00411af6 <.LVL358>:
  411af6:	f00c ff71 	bl	41e9dc <.LFE2>

00411afa <.LVL359>:
  411afa:	e6ae      	b.n	41185a <.LBE94>

00411afc <.LBE105>:
        return BUFFER_E;
  411afc:	f06f 0883 	mvn.w	r8, #131	; 0x83
  411b00:	e6ab      	b.n	41185a <.LBE94>

00411b02 <.LVL361>:
        return hLen;
  411b02:	f8dd 801c 	ldr.w	r8, [sp, #28]
  411b06:	e6a8      	b.n	41185a <.LBE94>
            return MEMORY_E;
  411b08:	f06f 087c 	mvn.w	r8, #124	; 0x7c
  411b0c:	e6a5      	b.n	41185a <.LBE94>

00411b0e <.LVL362>:
        return BAD_FUNC_ARG;
  411b0e:	f06f 08ac 	mvn.w	r8, #172	; 0xac
  411b12:	e6a2      	b.n	41185a <.LBE94>
        return BAD_FUNC_ARG;
  411b14:	f06f 08ac 	mvn.w	r8, #172	; 0xac
  411b18:	e69f      	b.n	41185a <.LBE94>

00411b1a <.LVL363>:
        return BUFFER_E;
  411b1a:	f06f 0883 	mvn.w	r8, #131	; 0x83

00411b1e <.LVL364>:
  411b1e:	e69c      	b.n	41185a <.LBE94>

00411b20 <.LVL365>:
        return MEMORY_E;
  411b20:	f06f 087c 	mvn.w	r8, #124	; 0x7c

00411b24 <.LVL366>:
  411b24:	e699      	b.n	41185a <.LBE94>

00411b26 <.LBE107>:
            key->state = RSA_STATE_ENCRYPT_RES;
  411b26:	2203      	movs	r2, #3
  411b28:	f241 134c 	movw	r3, #4428	; 0x114c
  411b2c:	50e2      	str	r2, [r4, r3]
  411b2e:	e6b1      	b.n	411894 <.LVL299+0x10>

00411b30 <.LVL368>:
        ret = BAD_STATE_E;
  411b30:	f06f 08bf 	mvn.w	r8, #191	; 0xbf
  411b34:	e6b5      	b.n	4118a2 <.LVL301>

00411b36 <.LVL369>:
        return BAD_FUNC_ARG;
  411b36:	f06f 08ac 	mvn.w	r8, #172	; 0xac
  411b3a:	e6bc      	b.n	4118b6 <.LVL303>
  411b3c:	f06f 08ac 	mvn.w	r8, #172	; 0xac
  411b40:	e6b9      	b.n	4118b6 <.LVL303>

00411b42 <.LVL370>:
        return RSA_BUFFER_E;
  411b42:	f06f 0882 	mvn.w	r8, #130	; 0x82
  411b46:	e6b6      	b.n	4118b6 <.LVL303>
        return WC_KEY_SIZE_E;
  411b48:	f06f 08e9 	mvn.w	r8, #233	; 0xe9
  411b4c:	e6b3      	b.n	4118b6 <.LVL303>
        return RSA_BUFFER_E;
  411b4e:	f06f 0882 	mvn.w	r8, #130	; 0x82
  411b52:	e6b0      	b.n	4118b6 <.LVL303>

00411b54 <.LBB108>:
        return BAD_FUNC_ARG;
  411b54:	f06f 08ac 	mvn.w	r8, #172	; 0xac
  411b58:	e6a6      	b.n	4118a8 <.LVL301+0x6>

00411b5a <.LVL372>:
            return RSA_PAD_E;
  411b5a:	f06f 08c8 	mvn.w	r8, #200	; 0xc8
  411b5e:	e6a3      	b.n	4118a8 <.LVL301+0x6>

00411b60 <.LBB100>:
            return RSA_PAD_E;
  411b60:	f06f 08c8 	mvn.w	r8, #200	; 0xc8

00411b64 <.LVL373>:
  411b64:	e6a0      	b.n	4118a8 <.LVL301+0x6>

Disassembly of section .text.send_tree%88:

00411b66 <send_tree>:
{
  411b66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00411b6a <.LCFI4>:
  411b6a:	b083      	sub	sp, #12

00411b6c <.LCFI5>:
    int nextlen = tree[0].Len; /* length of next code */
  411b6c:	f8b1 c002 	ldrh.w	ip, [r1, #2]

00411b70 <.LVL41>:
    if (nextlen == 0) max_count = 138, min_count = 3;
  411b70:	f1bc 0f00 	cmp.w	ip, #0
  411b74:	bf15      	itete	ne
  411b76:	2604      	movne	r6, #4
  411b78:	2603      	moveq	r6, #3
  411b7a:	2307      	movne	r3, #7
  411b7c:	238a      	moveq	r3, #138	; 0x8a

00411b7e <.LVL42>:
    for (n = 0; n <= max_code; n++) {
  411b7e:	2a00      	cmp	r2, #0
  411b80:	9201      	str	r2, [sp, #4]
  411b82:	f2c0 81b6 	blt.w	411ef2 <.LVL118>
  411b86:	4689      	mov	r9, r1
  411b88:	f04f 0a00 	mov.w	sl, #0
  411b8c:	f04f 32ff 	mov.w	r2, #4294967295

00411b90 <.LVL43>:
  411b90:	46d3      	mov	fp, sl

00411b92 <.LBB2>:
            do { send_code(s, curlen, s->bl_tree); } while (--count != 0);
  411b92:	f241 67bc 	movw	r7, #5820	; 0x16bc
  411b96:	4407      	add	r7, r0

00411b98 <.LBB3>:
  411b98:	f241 65b8 	movw	r5, #5816	; 0x16b8
  411b9c:	4405      	add	r5, r0

00411b9e <.LBE2>:
            max_count = 138, min_count = 3;
  411b9e:	f8cd c000 	str.w	ip, [sp]
  411ba2:	e0be      	b.n	411d22 <.LVL74>

00411ba4 <.LBB5>:
            do { send_code(s, curlen, s->bl_tree); } while (--count != 0);
  411ba4:	f8be 2a7c 	ldrh.w	r2, [lr, #2684]	; 0xa7c
  411ba8:	409a      	lsls	r2, r3
  411baa:	882e      	ldrh	r6, [r5, #0]
  411bac:	4332      	orrs	r2, r6
  411bae:	802a      	strh	r2, [r5, #0]
  411bb0:	4423      	add	r3, r4
  411bb2:	603b      	str	r3, [r7, #0]

00411bb4 <.LBE5>:
  411bb4:	f1bc 0c01 	subs.w	ip, ip, #1

00411bb8 <.LVL46>:
  411bb8:	f000 8099 	beq.w	411cee <.LBE11>

00411bbc <.LBB6>:
  411bbc:	f8be 4a7e 	ldrh.w	r4, [lr, #2686]	; 0xa7e

00411bc0 <.LVL48>:
  411bc0:	683b      	ldr	r3, [r7, #0]
  411bc2:	f1c4 0210 	rsb	r2, r4, #16
  411bc6:	4293      	cmp	r3, r2
  411bc8:	ddec      	ble.n	411ba4 <.LBB5>

00411bca <.LBB4>:
  411bca:	f8be 6a7c 	ldrh.w	r6, [lr, #2684]	; 0xa7c

00411bce <.LVL49>:
  411bce:	fa06 f203 	lsl.w	r2, r6, r3
  411bd2:	882b      	ldrh	r3, [r5, #0]
  411bd4:	431a      	orrs	r2, r3
  411bd6:	b212      	sxth	r2, r2
  411bd8:	802a      	strh	r2, [r5, #0]
  411bda:	6943      	ldr	r3, [r0, #20]
  411bdc:	f103 0a01 	add.w	sl, r3, #1
  411be0:	f8c0 a014 	str.w	sl, [r0, #20]
  411be4:	6881      	ldr	r1, [r0, #8]
  411be6:	54ca      	strb	r2, [r1, r3]
  411be8:	6943      	ldr	r3, [r0, #20]
  411bea:	1c5a      	adds	r2, r3, #1
  411bec:	6142      	str	r2, [r0, #20]
  411bee:	882a      	ldrh	r2, [r5, #0]
  411bf0:	0a12      	lsrs	r2, r2, #8
  411bf2:	6881      	ldr	r1, [r0, #8]
  411bf4:	54ca      	strb	r2, [r1, r3]
  411bf6:	683a      	ldr	r2, [r7, #0]
  411bf8:	f1c2 0310 	rsb	r3, r2, #16
  411bfc:	411e      	asrs	r6, r3

00411bfe <.LVL50>:
  411bfe:	802e      	strh	r6, [r5, #0]
  411c00:	f1a4 0310 	sub.w	r3, r4, #16
  411c04:	4413      	add	r3, r2
  411c06:	603b      	str	r3, [r7, #0]

00411c08 <.LBE4>:
  411c08:	e7d4      	b.n	411bb4 <.LBE5>

00411c0a <.LBE6>:
        } else if (curlen != 0) {
  411c0a:	9b00      	ldr	r3, [sp, #0]

00411c0c <.LVL52>:
  411c0c:	2b00      	cmp	r3, #0
  411c0e:	f000 80b8 	beq.w	411d82 <.LBE15>
            if (curlen != prevlen) {
  411c12:	429a      	cmp	r2, r3
  411c14:	f000 80a0 	beq.w	411d58 <.LBE13>
  411c18:	eb00 0283 	add.w	r2, r0, r3, lsl #2

00411c1c <.LBB7>:
                send_code(s, curlen, s->bl_tree); count--;
  411c1c:	f8b2 1a7e 	ldrh.w	r1, [r2, #2686]	; 0xa7e

00411c20 <.LVL54>:
  411c20:	683b      	ldr	r3, [r7, #0]
  411c22:	f1c1 0410 	rsb	r4, r1, #16
  411c26:	42a3      	cmp	r3, r4
  411c28:	f340 808d 	ble.w	411d46 <.LBB13>

00411c2c <.LBB8>:
  411c2c:	f8b2 4a7c 	ldrh.w	r4, [r2, #2684]	; 0xa7c

00411c30 <.LVL55>:
  411c30:	fa04 f203 	lsl.w	r2, r4, r3
  411c34:	882b      	ldrh	r3, [r5, #0]
  411c36:	431a      	orrs	r2, r3
  411c38:	b212      	sxth	r2, r2
  411c3a:	802a      	strh	r2, [r5, #0]
  411c3c:	6946      	ldr	r6, [r0, #20]

00411c3e <.LVL56>:
  411c3e:	1c73      	adds	r3, r6, #1
  411c40:	6143      	str	r3, [r0, #20]
  411c42:	6883      	ldr	r3, [r0, #8]
  411c44:	559a      	strb	r2, [r3, r6]
  411c46:	6883      	ldr	r3, [r0, #8]
  411c48:	6946      	ldr	r6, [r0, #20]
  411c4a:	1c72      	adds	r2, r6, #1
  411c4c:	6142      	str	r2, [r0, #20]
  411c4e:	882a      	ldrh	r2, [r5, #0]
  411c50:	0a12      	lsrs	r2, r2, #8
  411c52:	559a      	strb	r2, [r3, r6]
  411c54:	683b      	ldr	r3, [r7, #0]
  411c56:	f1c3 0210 	rsb	r2, r3, #16
  411c5a:	4114      	asrs	r4, r2

00411c5c <.LVL57>:
  411c5c:	802c      	strh	r4, [r5, #0]
  411c5e:	3910      	subs	r1, #16

00411c60 <.LVL58>:
  411c60:	4419      	add	r1, r3

00411c62 <.LVL59>:
  411c62:	6039      	str	r1, [r7, #0]

00411c64 <.LBB9>:
            send_code(s, REP_3_6, s->bl_tree); send_bits(s, count-3, 2);
  411c64:	f8b0 1abe 	ldrh.w	r1, [r0, #2750]	; 0xabe

00411c68 <.LVL61>:
  411c68:	683b      	ldr	r3, [r7, #0]
  411c6a:	f1c1 0210 	rsb	r2, r1, #16
  411c6e:	4293      	cmp	r3, r2
  411c70:	dd74      	ble.n	411d5c <.LBB14>

00411c72 <.LBB10>:
  411c72:	f8b0 4abc 	ldrh.w	r4, [r0, #2748]	; 0xabc

00411c76 <.LVL62>:
  411c76:	fa04 f203 	lsl.w	r2, r4, r3
  411c7a:	882b      	ldrh	r3, [r5, #0]
  411c7c:	431a      	orrs	r2, r3
  411c7e:	b212      	sxth	r2, r2
  411c80:	802a      	strh	r2, [r5, #0]
  411c82:	6946      	ldr	r6, [r0, #20]
  411c84:	1c73      	adds	r3, r6, #1
  411c86:	6143      	str	r3, [r0, #20]
  411c88:	6883      	ldr	r3, [r0, #8]
  411c8a:	559a      	strb	r2, [r3, r6]
  411c8c:	6883      	ldr	r3, [r0, #8]
  411c8e:	6946      	ldr	r6, [r0, #20]
  411c90:	1c72      	adds	r2, r6, #1
  411c92:	6142      	str	r2, [r0, #20]
  411c94:	882a      	ldrh	r2, [r5, #0]
  411c96:	0a12      	lsrs	r2, r2, #8
  411c98:	559a      	strb	r2, [r3, r6]
  411c9a:	683b      	ldr	r3, [r7, #0]
  411c9c:	f1c3 0210 	rsb	r2, r3, #16
  411ca0:	4114      	asrs	r4, r2

00411ca2 <.LVL63>:
  411ca2:	802c      	strh	r4, [r5, #0]
  411ca4:	3910      	subs	r1, #16

00411ca6 <.LVL64>:
  411ca6:	4419      	add	r1, r3

00411ca8 <.LVL65>:
  411ca8:	6039      	str	r1, [r7, #0]

00411caa <.LBB11>:
  411caa:	683b      	ldr	r3, [r7, #0]
  411cac:	2b0e      	cmp	r3, #14
  411cae:	dd5e      	ble.n	411d6e <.LBB15>

00411cb0 <.LBB12>:
  411cb0:	f1aa 0a03 	sub.w	sl, sl, #3

00411cb4 <.LVL68>:
  411cb4:	fa1f fa8a 	uxth.w	sl, sl

00411cb8 <.LVL69>:
  411cb8:	fa0a f203 	lsl.w	r2, sl, r3
  411cbc:	882b      	ldrh	r3, [r5, #0]
  411cbe:	431a      	orrs	r2, r3
  411cc0:	b212      	sxth	r2, r2
  411cc2:	802a      	strh	r2, [r5, #0]
  411cc4:	6883      	ldr	r3, [r0, #8]
  411cc6:	6941      	ldr	r1, [r0, #20]
  411cc8:	1c4c      	adds	r4, r1, #1
  411cca:	6144      	str	r4, [r0, #20]
  411ccc:	545a      	strb	r2, [r3, r1]
  411cce:	6883      	ldr	r3, [r0, #8]
  411cd0:	6941      	ldr	r1, [r0, #20]
  411cd2:	1c4a      	adds	r2, r1, #1
  411cd4:	6142      	str	r2, [r0, #20]
  411cd6:	882a      	ldrh	r2, [r5, #0]
  411cd8:	0a12      	lsrs	r2, r2, #8
  411cda:	545a      	strb	r2, [r3, r1]
  411cdc:	683b      	ldr	r3, [r7, #0]
  411cde:	f1c3 0210 	rsb	r2, r3, #16
  411ce2:	fa4a fa02 	asr.w	sl, sl, r2
  411ce6:	f8a5 a000 	strh.w	sl, [r5]
  411cea:	3b0e      	subs	r3, #14
  411cec:	603b      	str	r3, [r7, #0]

00411cee <.LBE11>:
        if (nextlen == 0) {
  411cee:	f1b8 0f00 	cmp.w	r8, #0
  411cf2:	f000 80f9 	beq.w	411ee8 <.LVL117>
        } else if (curlen == nextlen) {
  411cf6:	9900      	ldr	r1, [sp, #0]
  411cf8:	460a      	mov	r2, r1
  411cfa:	4588      	cmp	r8, r1
  411cfc:	bf0c      	ite	eq
  411cfe:	2603      	moveq	r6, #3
  411d00:	2604      	movne	r6, #4
  411d02:	4588      	cmp	r8, r1
  411d04:	bf0c      	ite	eq
  411d06:	2306      	moveq	r3, #6
  411d08:	2307      	movne	r3, #7
  411d0a:	f04f 0a00 	mov.w	sl, #0

00411d0e <.LVL71>:
    for (n = 0; n <= max_code; n++) {
  411d0e:	f10b 0b01 	add.w	fp, fp, #1
  411d12:	f109 0904 	add.w	r9, r9, #4
        curlen = nextlen; nextlen = tree[n+1].Len;
  411d16:	f8cd 8000 	str.w	r8, [sp]

00411d1a <.LVL73>:
    for (n = 0; n <= max_code; n++) {
  411d1a:	9901      	ldr	r1, [sp, #4]
  411d1c:	4559      	cmp	r1, fp
  411d1e:	f2c0 80e8 	blt.w	411ef2 <.LVL118>

00411d22 <.LVL74>:
        curlen = nextlen; nextlen = tree[n+1].Len;
  411d22:	f8b9 8006 	ldrh.w	r8, [r9, #6]

00411d26 <.LVL75>:
        if (++count < max_count && curlen == nextlen) {
  411d26:	f10a 0101 	add.w	r1, sl, #1

00411d2a <.LVL76>:
  411d2a:	4299      	cmp	r1, r3
  411d2c:	da03      	bge.n	411d36 <.LVL76+0xc>
  411d2e:	9c00      	ldr	r4, [sp, #0]
  411d30:	45a0      	cmp	r8, r4
  411d32:	f000 80d7 	beq.w	411ee4 <.LBE27>
        } else if (count < min_count) {
  411d36:	42b1      	cmp	r1, r6
  411d38:	f6bf af67 	bge.w	411c0a <.LBE6>
  411d3c:	9b00      	ldr	r3, [sp, #0]

00411d3e <.LVL77>:
  411d3e:	eb00 0e83 	add.w	lr, r0, r3, lsl #2
  411d42:	468c      	mov	ip, r1
  411d44:	e73a      	b.n	411bbc <.LBB6>

00411d46 <.LBB13>:
                send_code(s, curlen, s->bl_tree); count--;
  411d46:	f8b2 2a7c 	ldrh.w	r2, [r2, #2684]	; 0xa7c
  411d4a:	409a      	lsls	r2, r3
  411d4c:	882c      	ldrh	r4, [r5, #0]
  411d4e:	4322      	orrs	r2, r4
  411d50:	802a      	strh	r2, [r5, #0]
  411d52:	4419      	add	r1, r3

00411d54 <.LVL79>:
  411d54:	6039      	str	r1, [r7, #0]
  411d56:	e785      	b.n	411c64 <.LBB9>

00411d58 <.LBE13>:
        if (++count < max_count && curlen == nextlen) {
  411d58:	468a      	mov	sl, r1
  411d5a:	e783      	b.n	411c64 <.LBB9>

00411d5c <.LBB14>:
            send_code(s, REP_3_6, s->bl_tree); send_bits(s, count-3, 2);
  411d5c:	f8b0 2abc 	ldrh.w	r2, [r0, #2748]	; 0xabc
  411d60:	409a      	lsls	r2, r3
  411d62:	882c      	ldrh	r4, [r5, #0]
  411d64:	4322      	orrs	r2, r4
  411d66:	802a      	strh	r2, [r5, #0]
  411d68:	4419      	add	r1, r3

00411d6a <.LVL82>:
  411d6a:	6039      	str	r1, [r7, #0]
  411d6c:	e79d      	b.n	411caa <.LBB11>

00411d6e <.LBB15>:
  411d6e:	f1aa 0203 	sub.w	r2, sl, #3
  411d72:	b292      	uxth	r2, r2
  411d74:	409a      	lsls	r2, r3
  411d76:	8829      	ldrh	r1, [r5, #0]
  411d78:	430a      	orrs	r2, r1
  411d7a:	802a      	strh	r2, [r5, #0]
  411d7c:	3302      	adds	r3, #2
  411d7e:	603b      	str	r3, [r7, #0]
  411d80:	e7b5      	b.n	411cee <.LBE11>

00411d82 <.LBE15>:
        } else if (count <= 10) {
  411d82:	290a      	cmp	r1, #10
  411d84:	dc56      	bgt.n	411e34 <.LBB22>

00411d86 <.LBB16>:
            send_code(s, REPZ_3_10, s->bl_tree); send_bits(s, count-3, 3);
  411d86:	f8b0 4ac2 	ldrh.w	r4, [r0, #2754]	; 0xac2

00411d8a <.LVL85>:
  411d8a:	683b      	ldr	r3, [r7, #0]
  411d8c:	f1c4 0210 	rsb	r2, r4, #16

00411d90 <.LVL86>:
  411d90:	4293      	cmp	r3, r2
  411d92:	dd3d      	ble.n	411e10 <.LBB20>

00411d94 <.LBB17>:
  411d94:	f8b0 cac0 	ldrh.w	ip, [r0, #2752]	; 0xac0

00411d98 <.LVL87>:
  411d98:	fa0c f203 	lsl.w	r2, ip, r3
  411d9c:	882b      	ldrh	r3, [r5, #0]
  411d9e:	431a      	orrs	r2, r3
  411da0:	b212      	sxth	r2, r2
  411da2:	802a      	strh	r2, [r5, #0]
  411da4:	6946      	ldr	r6, [r0, #20]

00411da6 <.LVL88>:
  411da6:	1c73      	adds	r3, r6, #1
  411da8:	6143      	str	r3, [r0, #20]
  411daa:	6883      	ldr	r3, [r0, #8]
  411dac:	559a      	strb	r2, [r3, r6]
  411dae:	6883      	ldr	r3, [r0, #8]
  411db0:	6946      	ldr	r6, [r0, #20]
  411db2:	1c72      	adds	r2, r6, #1
  411db4:	6142      	str	r2, [r0, #20]
  411db6:	882a      	ldrh	r2, [r5, #0]
  411db8:	0a12      	lsrs	r2, r2, #8
  411dba:	559a      	strb	r2, [r3, r6]
  411dbc:	683b      	ldr	r3, [r7, #0]
  411dbe:	f1c3 0210 	rsb	r2, r3, #16
  411dc2:	fa4c fc02 	asr.w	ip, ip, r2

00411dc6 <.LVL89>:
  411dc6:	f8a5 c000 	strh.w	ip, [r5]
  411dca:	3c10      	subs	r4, #16

00411dcc <.LVL90>:
  411dcc:	4423      	add	r3, r4
  411dce:	603b      	str	r3, [r7, #0]

00411dd0 <.LBB18>:
  411dd0:	683b      	ldr	r3, [r7, #0]
  411dd2:	2b0d      	cmp	r3, #13
  411dd4:	dd25      	ble.n	411e22 <.LBB21>

00411dd6 <.LBB19>:
  411dd6:	f1aa 0202 	sub.w	r2, sl, #2

00411dda <.LVL93>:
  411dda:	b292      	uxth	r2, r2

00411ddc <.LVL94>:
  411ddc:	fa02 f103 	lsl.w	r1, r2, r3

00411de0 <.LVL95>:
  411de0:	882b      	ldrh	r3, [r5, #0]
  411de2:	4319      	orrs	r1, r3
  411de4:	b209      	sxth	r1, r1
  411de6:	8029      	strh	r1, [r5, #0]
  411de8:	6883      	ldr	r3, [r0, #8]
  411dea:	6944      	ldr	r4, [r0, #20]
  411dec:	1c66      	adds	r6, r4, #1
  411dee:	6146      	str	r6, [r0, #20]
  411df0:	5519      	strb	r1, [r3, r4]
  411df2:	6883      	ldr	r3, [r0, #8]
  411df4:	6944      	ldr	r4, [r0, #20]
  411df6:	1c61      	adds	r1, r4, #1
  411df8:	6141      	str	r1, [r0, #20]
  411dfa:	8829      	ldrh	r1, [r5, #0]
  411dfc:	0a09      	lsrs	r1, r1, #8
  411dfe:	5519      	strb	r1, [r3, r4]
  411e00:	683b      	ldr	r3, [r7, #0]
  411e02:	f1c3 0110 	rsb	r1, r3, #16
  411e06:	410a      	asrs	r2, r1
  411e08:	802a      	strh	r2, [r5, #0]
  411e0a:	3b0d      	subs	r3, #13
  411e0c:	603b      	str	r3, [r7, #0]

00411e0e <.LBE19>:
  411e0e:	e76e      	b.n	411cee <.LBE11>

00411e10 <.LBB20>:
  411e10:	f8b0 2ac0 	ldrh.w	r2, [r0, #2752]	; 0xac0
  411e14:	409a      	lsls	r2, r3
  411e16:	882e      	ldrh	r6, [r5, #0]

00411e18 <.LVL97>:
  411e18:	4332      	orrs	r2, r6
  411e1a:	802a      	strh	r2, [r5, #0]
  411e1c:	4423      	add	r3, r4
  411e1e:	603b      	str	r3, [r7, #0]
  411e20:	e7d6      	b.n	411dd0 <.LBB18>

00411e22 <.LBB21>:
  411e22:	1eca      	subs	r2, r1, #3
  411e24:	b292      	uxth	r2, r2
  411e26:	409a      	lsls	r2, r3
  411e28:	8829      	ldrh	r1, [r5, #0]

00411e2a <.LVL99>:
  411e2a:	430a      	orrs	r2, r1
  411e2c:	802a      	strh	r2, [r5, #0]
  411e2e:	3303      	adds	r3, #3
  411e30:	603b      	str	r3, [r7, #0]
  411e32:	e75c      	b.n	411cee <.LBE11>

00411e34 <.LBB22>:
            send_code(s, REPZ_11_138, s->bl_tree); send_bits(s, count-11, 7);
  411e34:	f8b0 4ac6 	ldrh.w	r4, [r0, #2758]	; 0xac6

00411e38 <.LVL101>:
  411e38:	683b      	ldr	r3, [r7, #0]
  411e3a:	f1c4 0210 	rsb	r2, r4, #16

00411e3e <.LVL102>:
  411e3e:	4293      	cmp	r3, r2
  411e40:	dd3d      	ble.n	411ebe <.LBB26>

00411e42 <.LBB23>:
  411e42:	f8b0 cac4 	ldrh.w	ip, [r0, #2756]	; 0xac4

00411e46 <.LVL103>:
  411e46:	fa0c f203 	lsl.w	r2, ip, r3
  411e4a:	882b      	ldrh	r3, [r5, #0]
  411e4c:	431a      	orrs	r2, r3
  411e4e:	b212      	sxth	r2, r2
  411e50:	802a      	strh	r2, [r5, #0]
  411e52:	6946      	ldr	r6, [r0, #20]

00411e54 <.LVL104>:
  411e54:	1c73      	adds	r3, r6, #1
  411e56:	6143      	str	r3, [r0, #20]
  411e58:	6883      	ldr	r3, [r0, #8]
  411e5a:	559a      	strb	r2, [r3, r6]
  411e5c:	6883      	ldr	r3, [r0, #8]
  411e5e:	6946      	ldr	r6, [r0, #20]
  411e60:	1c72      	adds	r2, r6, #1
  411e62:	6142      	str	r2, [r0, #20]
  411e64:	882a      	ldrh	r2, [r5, #0]
  411e66:	0a12      	lsrs	r2, r2, #8
  411e68:	559a      	strb	r2, [r3, r6]
  411e6a:	683b      	ldr	r3, [r7, #0]
  411e6c:	f1c3 0210 	rsb	r2, r3, #16
  411e70:	fa4c fc02 	asr.w	ip, ip, r2

00411e74 <.LVL105>:
  411e74:	f8a5 c000 	strh.w	ip, [r5]
  411e78:	3c10      	subs	r4, #16

00411e7a <.LVL106>:
  411e7a:	4423      	add	r3, r4
  411e7c:	603b      	str	r3, [r7, #0]

00411e7e <.LBB24>:
  411e7e:	683b      	ldr	r3, [r7, #0]
  411e80:	2b09      	cmp	r3, #9
  411e82:	dd25      	ble.n	411ed0 <.LBB27>

00411e84 <.LBB25>:
  411e84:	f1aa 020a 	sub.w	r2, sl, #10

00411e88 <.LVL109>:
  411e88:	b292      	uxth	r2, r2

00411e8a <.LVL110>:
  411e8a:	fa02 f103 	lsl.w	r1, r2, r3

00411e8e <.LVL111>:
  411e8e:	882b      	ldrh	r3, [r5, #0]
  411e90:	4319      	orrs	r1, r3
  411e92:	b209      	sxth	r1, r1
  411e94:	8029      	strh	r1, [r5, #0]
  411e96:	6883      	ldr	r3, [r0, #8]
  411e98:	6944      	ldr	r4, [r0, #20]
  411e9a:	1c66      	adds	r6, r4, #1
  411e9c:	6146      	str	r6, [r0, #20]
  411e9e:	5519      	strb	r1, [r3, r4]
  411ea0:	6883      	ldr	r3, [r0, #8]
  411ea2:	6944      	ldr	r4, [r0, #20]
  411ea4:	1c61      	adds	r1, r4, #1
  411ea6:	6141      	str	r1, [r0, #20]
  411ea8:	8829      	ldrh	r1, [r5, #0]
  411eaa:	0a09      	lsrs	r1, r1, #8
  411eac:	5519      	strb	r1, [r3, r4]
  411eae:	683b      	ldr	r3, [r7, #0]
  411eb0:	f1c3 0110 	rsb	r1, r3, #16
  411eb4:	410a      	asrs	r2, r1
  411eb6:	802a      	strh	r2, [r5, #0]
  411eb8:	3b09      	subs	r3, #9
  411eba:	603b      	str	r3, [r7, #0]

00411ebc <.LBE25>:
  411ebc:	e717      	b.n	411cee <.LBE11>

00411ebe <.LBB26>:
  411ebe:	f8b0 2ac4 	ldrh.w	r2, [r0, #2756]	; 0xac4
  411ec2:	409a      	lsls	r2, r3
  411ec4:	882e      	ldrh	r6, [r5, #0]

00411ec6 <.LVL113>:
  411ec6:	4332      	orrs	r2, r6
  411ec8:	802a      	strh	r2, [r5, #0]
  411eca:	4423      	add	r3, r4
  411ecc:	603b      	str	r3, [r7, #0]
  411ece:	e7d6      	b.n	411e7e <.LBB24>

00411ed0 <.LBB27>:
  411ed0:	f1a1 020b 	sub.w	r2, r1, #11
  411ed4:	b292      	uxth	r2, r2
  411ed6:	409a      	lsls	r2, r3
  411ed8:	8829      	ldrh	r1, [r5, #0]

00411eda <.LVL115>:
  411eda:	430a      	orrs	r2, r1
  411edc:	802a      	strh	r2, [r5, #0]
  411ede:	3307      	adds	r3, #7
  411ee0:	603b      	str	r3, [r7, #0]
  411ee2:	e704      	b.n	411cee <.LBE11>

00411ee4 <.LBE27>:
        if (++count < max_count && curlen == nextlen) {
  411ee4:	468a      	mov	sl, r1
  411ee6:	e712      	b.n	411d0e <.LVL71>

00411ee8 <.LVL117>:
        count = 0; prevlen = curlen;
  411ee8:	46c2      	mov	sl, r8
  411eea:	9a00      	ldr	r2, [sp, #0]
            max_count = 138, min_count = 3;
  411eec:	2603      	movs	r6, #3
  411eee:	238a      	movs	r3, #138	; 0x8a
  411ef0:	e70d      	b.n	411d0e <.LVL71>

00411ef2 <.LVL118>:
}
  411ef2:	b003      	add	sp, #12

00411ef4 <.LCFI6>:
  411ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section .text.deflate_slow%89:

00411ef8 <deflate_slow>:
{
  411ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

00411efc <.LCFI7>:
  411efc:	4604      	mov	r4, r0
  411efe:	460e      	mov	r6, r1

00411f00 <.LBB12>:
            _tr_tally_lit(s, s->window[s->strstart-1], bflush);
  411f00:	f241 65a4 	movw	r5, #5796	; 0x16a4
  411f04:	4405      	add	r5, r0

00411f06 <.LBB13>:
            _tr_tally_dist(s, s->strstart -1 - s->prev_match,
  411f06:	f8df 9360 	ldr.w	r9, [pc, #864]	; 412268 <.LVL165+0x4>
  411f0a:	e0b3      	b.n	412074 <.LVL139+0x10>

00411f0c <.LBE13>:
            fill_window(s);
  411f0c:	4620      	mov	r0, r4
  411f0e:	f002 ff11 	bl	414d34 <fill_window>

00411f12 <.LVL116>:
            if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {
  411f12:	6f63      	ldr	r3, [r4, #116]	; 0x74
  411f14:	b91e      	cbnz	r6, 411f1e <.LVL116+0xc>
  411f16:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
  411f1a:	f0c0 815a 	bcc.w	4121d2 <.LVL155+0x18>
            if (s->lookahead == 0) break; /* flush the current block */
  411f1e:	2b00      	cmp	r3, #0
  411f20:	f040 80ad 	bne.w	41207e <.LVL140>
    if (s->match_available) {
  411f24:	6ea3      	ldr	r3, [r4, #104]	; 0x68
  411f26:	b1e3      	cbz	r3, 411f62 <.LVL120>

00411f28 <.LBB17>:
        _tr_tally_lit(s, s->window[s->strstart-1], bflush);
  411f28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  411f2a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  411f2c:	4413      	add	r3, r2
  411f2e:	f813 3c01 	ldrb.w	r3, [r3, #-1]

00411f32 <.LVL117>:
  411f32:	f504 52b5 	add.w	r2, r4, #5792	; 0x16a0
  411f36:	6815      	ldr	r5, [r2, #0]
  411f38:	f241 61a4 	movw	r1, #5796	; 0x16a4
  411f3c:	5860      	ldr	r0, [r4, r1]
  411f3e:	2100      	movs	r1, #0
  411f40:	f820 1015 	strh.w	r1, [r0, r5, lsl #1]
  411f44:	f241 6098 	movw	r0, #5784	; 0x1698
  411f48:	5825      	ldr	r5, [r4, r0]
  411f4a:	6810      	ldr	r0, [r2, #0]
  411f4c:	1c47      	adds	r7, r0, #1
  411f4e:	6017      	str	r7, [r2, #0]
  411f50:	542b      	strb	r3, [r5, r0]
  411f52:	eb04 0383 	add.w	r3, r4, r3, lsl #2

00411f56 <.LVL118>:
  411f56:	f8b3 2094 	ldrh.w	r2, [r3, #148]	; 0x94
  411f5a:	3201      	adds	r2, #1
  411f5c:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

00411f60 <.LBE17>:
        s->match_available = 0;
  411f60:	66a1      	str	r1, [r4, #104]	; 0x68

00411f62 <.LVL120>:
    s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;
  411f62:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  411f64:	4611      	mov	r1, r2
  411f66:	2a02      	cmp	r2, #2
  411f68:	bf28      	it	cs
  411f6a:	2102      	movcs	r1, #2
  411f6c:	f241 63b4 	movw	r3, #5812	; 0x16b4
  411f70:	50e1      	str	r1, [r4, r3]
    if (flush == Z_FINISH) {
  411f72:	2e04      	cmp	r6, #4
  411f74:	f000 8112 	beq.w	41219c <.LBE19>
    if (s->last_lit)
  411f78:	f504 53b5 	add.w	r3, r4, #5792	; 0x16a0
  411f7c:	681b      	ldr	r3, [r3, #0]
  411f7e:	2b00      	cmp	r3, #0
  411f80:	f000 812a 	beq.w	4121d8 <.LVL155+0x1e>
        FLUSH_BLOCK(s, 0);
  411f84:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  411f86:	2800      	cmp	r0, #0
  411f88:	f2c0 8121 	blt.w	4121ce <.LVL155+0x14>
  411f8c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  411f8e:	4401      	add	r1, r0
  411f90:	2300      	movs	r3, #0
  411f92:	1a12      	subs	r2, r2, r0
  411f94:	4620      	mov	r0, r4
  411f96:	f7fd f977 	bl	40f288 <_tr_flush_block>

00411f9a <.LVL121>:
  411f9a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  411f9c:	65e3      	str	r3, [r4, #92]	; 0x5c
  411f9e:	6820      	ldr	r0, [r4, #0]
  411fa0:	f00b f896 	bl	41d0d0 <.LFE41>

00411fa4 <.LVL122>:
  411fa4:	6823      	ldr	r3, [r4, #0]
  411fa6:	6918      	ldr	r0, [r3, #16]
                return need_more;
  411fa8:	3000      	adds	r0, #0
  411faa:	bf18      	it	ne
  411fac:	2001      	movne	r0, #1
  411fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00411fb2 <.LBB15>:
            _tr_tally_dist(s, s->strstart -1 - s->prev_match,
  411fb2:	4bac      	ldr	r3, [pc, #688]	; (412264 <.LVL165>)
  411fb4:	eb03 11d1 	add.w	r1, r3, r1, lsr #7

00411fb8 <.LVL124>:
  411fb8:	f891 3100 	ldrb.w	r3, [r1, #256]	; 0x100
  411fbc:	e0d6      	b.n	41216c <.LVL151>

00411fbe <.LBE15>:
            } while (--s->prev_length != 0);
  411fbe:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  411fc0:	3b01      	subs	r3, #1
  411fc2:	67a3      	str	r3, [r4, #120]	; 0x78
  411fc4:	b1e3      	cbz	r3, 412000 <.LVL127+0x6>
                if (++s->strstart <= max_insert) {
  411fc6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  411fc8:	1c4f      	adds	r7, r1, #1
  411fca:	66e7      	str	r7, [r4, #108]	; 0x6c
  411fcc:	42ba      	cmp	r2, r7
  411fce:	d3f6      	bcc.n	411fbe <.LBE15>
                    INSERT_STRING(s, s->strstart, hash_head);
  411fd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  411fd2:	440b      	add	r3, r1
  411fd4:	78d8      	ldrb	r0, [r3, #3]
  411fd6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  411fd8:	6da1      	ldr	r1, [r4, #88]	; 0x58
  411fda:	408b      	lsls	r3, r1
  411fdc:	4043      	eors	r3, r0
  411fde:	6d60      	ldr	r0, [r4, #84]	; 0x54
  411fe0:	4003      	ands	r3, r0
  411fe2:	64a3      	str	r3, [r4, #72]	; 0x48
  411fe4:	6c60      	ldr	r0, [r4, #68]	; 0x44
  411fe6:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
  411fea:	6b63      	ldr	r3, [r4, #52]	; 0x34
  411fec:	403b      	ands	r3, r7
  411fee:	6c21      	ldr	r1, [r4, #64]	; 0x40
  411ff0:	f821 0013 	strh.w	r0, [r1, r3, lsl #1]

00411ff4 <.LVL126>:
  411ff4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  411ff6:	6c63      	ldr	r3, [r4, #68]	; 0x44
  411ff8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c

00411ffa <.LVL127>:
  411ffa:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
  411ffe:	e7de      	b.n	411fbe <.LBE15>
            s->match_available = 0;
  412000:	66a3      	str	r3, [r4, #104]	; 0x68
            s->match_length = MIN_MATCH-1;
  412002:	2302      	movs	r3, #2
  412004:	6623      	str	r3, [r4, #96]	; 0x60
            s->strstart++;
  412006:	6ee2      	ldr	r2, [r4, #108]	; 0x6c

00412008 <.LVL128>:
  412008:	3201      	adds	r2, #1
  41200a:	66e2      	str	r2, [r4, #108]	; 0x6c
            if (bflush) FLUSH_BLOCK(s, 0);
  41200c:	45f4      	cmp	ip, lr
  41200e:	d131      	bne.n	412074 <.LVL139+0x10>
  412010:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  412012:	2800      	cmp	r0, #0
  412014:	db11      	blt.n	41203a <.LVL131>
  412016:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  412018:	4401      	add	r1, r0
  41201a:	2300      	movs	r3, #0
  41201c:	1a12      	subs	r2, r2, r0
  41201e:	4620      	mov	r0, r4
  412020:	f7fd f932 	bl	40f288 <_tr_flush_block>

00412024 <.LVL129>:
  412024:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  412026:	65e3      	str	r3, [r4, #92]	; 0x5c
  412028:	6820      	ldr	r0, [r4, #0]
  41202a:	f00b f851 	bl	41d0d0 <.LFE41>

0041202e <.LVL130>:
  41202e:	6823      	ldr	r3, [r4, #0]
  412030:	691b      	ldr	r3, [r3, #16]
  412032:	b9fb      	cbnz	r3, 412074 <.LVL139+0x10>
  412034:	2000      	movs	r0, #0
  412036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0041203a <.LVL131>:
  41203a:	2100      	movs	r1, #0
  41203c:	e7ed      	b.n	41201a <.LVL128+0x12>

0041203e <.LBE18>:
                FLUSH_BLOCK_ONLY(s, 0);
  41203e:	6de2      	ldr	r2, [r4, #92]	; 0x5c

00412040 <.LVL133>:
  412040:	2a00      	cmp	r2, #0
  412042:	db0d      	blt.n	412060 <.LVL137>
  412044:	6ba1      	ldr	r1, [r4, #56]	; 0x38

00412046 <.LVL134>:
  412046:	4411      	add	r1, r2
  412048:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  41204a:	2300      	movs	r3, #0
  41204c:	1a82      	subs	r2, r0, r2
  41204e:	4620      	mov	r0, r4
  412050:	f7fd f91a 	bl	40f288 <_tr_flush_block>

00412054 <.LVL135>:
  412054:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  412056:	65e3      	str	r3, [r4, #92]	; 0x5c
  412058:	6820      	ldr	r0, [r4, #0]
  41205a:	f00b f839 	bl	41d0d0 <.LFE41>

0041205e <.LVL136>:
  41205e:	e0f3      	b.n	412248 <.LVL164>

00412060 <.LVL137>:
  412060:	2100      	movs	r1, #0

00412062 <.LVL138>:
  412062:	e7f1      	b.n	412048 <.LVL134+0x2>

00412064 <.LVL139>:
            s->match_available = 1;
  412064:	2301      	movs	r3, #1
  412066:	66a3      	str	r3, [r4, #104]	; 0x68
            s->strstart++;
  412068:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  41206a:	3301      	adds	r3, #1
  41206c:	66e3      	str	r3, [r4, #108]	; 0x6c
            s->lookahead--;
  41206e:	6f63      	ldr	r3, [r4, #116]	; 0x74
  412070:	3b01      	subs	r3, #1
  412072:	6763      	str	r3, [r4, #116]	; 0x74
        if (s->lookahead < MIN_LOOKAHEAD) {
  412074:	6f63      	ldr	r3, [r4, #116]	; 0x74
  412076:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
  41207a:	f4ff af47 	bcc.w	411f0c <.LBE13>

0041207e <.LVL140>:
        if (s->lookahead >= MIN_MATCH) {
  41207e:	6f63      	ldr	r3, [r4, #116]	; 0x74
  412080:	2b02      	cmp	r3, #2
  412082:	f240 80ac 	bls.w	4121de <.LVL158>
            INSERT_STRING(s, s->strstart, hash_head);
  412086:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  412088:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  41208a:	4402      	add	r2, r0
  41208c:	7893      	ldrb	r3, [r2, #2]
  41208e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  412090:	6da1      	ldr	r1, [r4, #88]	; 0x58
  412092:	408a      	lsls	r2, r1
  412094:	4053      	eors	r3, r2
  412096:	6d62      	ldr	r2, [r4, #84]	; 0x54
  412098:	4013      	ands	r3, r2
  41209a:	64a3      	str	r3, [r4, #72]	; 0x48
  41209c:	6c62      	ldr	r2, [r4, #68]	; 0x44
  41209e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
  4120a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
  4120a4:	4003      	ands	r3, r0
  4120a6:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4120a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

004120ac <.LVL141>:
  4120ac:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  4120ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4120b0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  4120b2:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
        s->prev_length = s->match_length, s->prev_match = s->match_start;
  4120b6:	6e23      	ldr	r3, [r4, #96]	; 0x60
  4120b8:	67a3      	str	r3, [r4, #120]	; 0x78
  4120ba:	6f22      	ldr	r2, [r4, #112]	; 0x70
  4120bc:	6662      	str	r2, [r4, #100]	; 0x64
        s->match_length = MIN_MATCH-1;
  4120be:	2202      	movs	r2, #2
  4120c0:	6622      	str	r2, [r4, #96]	; 0x60
        if (hash_head != NIL && s->prev_length < s->max_lazy_match &&
  4120c2:	2900      	cmp	r1, #0
  4120c4:	f000 8091 	beq.w	4121ea <.LVL159>
  4120c8:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
  4120cc:	4293      	cmp	r3, r2
  4120ce:	f080 808c 	bcs.w	4121ea <.LVL159>
            s->strstart - hash_head <= MAX_DIST(s)) {
  4120d2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  4120d4:	1a5a      	subs	r2, r3, r1
  4120d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4120d8:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
        if (hash_head != NIL && s->prev_length < s->max_lazy_match &&
  4120dc:	429a      	cmp	r2, r3
  4120de:	f200 8084 	bhi.w	4121ea <.LVL159>
            s->match_length = longest_match (s, hash_head);
  4120e2:	4620      	mov	r0, r4
  4120e4:	f003 fbc6 	bl	415874 <.LFE1>

004120e8 <.LVL142>:
  4120e8:	6620      	str	r0, [r4, #96]	; 0x60
            if (s->match_length <= 5 && (s->strategy == Z_FILTERED
  4120ea:	2805      	cmp	r0, #5
  4120ec:	d87d      	bhi.n	4121ea <.LVL159>
  4120ee:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
  4120f2:	2b01      	cmp	r3, #1
  4120f4:	d007      	beq.n	412106 <.LVL142+0x1e>
                || (s->match_length == MIN_MATCH &&
  4120f6:	2803      	cmp	r0, #3
  4120f8:	d177      	bne.n	4121ea <.LVL159>
                    s->strstart - s->match_start > TOO_FAR)
  4120fa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  4120fc:	6f22      	ldr	r2, [r4, #112]	; 0x70
  4120fe:	1a9b      	subs	r3, r3, r2
                || (s->match_length == MIN_MATCH &&
  412100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  412104:	d971      	bls.n	4121ea <.LVL159>
                s->match_length = MIN_MATCH-1;
  412106:	2302      	movs	r3, #2
  412108:	6623      	str	r3, [r4, #96]	; 0x60
        if (s->prev_length >= MIN_MATCH && s->match_length <= s->prev_length) {
  41210a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  41210c:	2b02      	cmp	r3, #2
  41210e:	d972      	bls.n	4121f6 <.LVL159+0xc>

00412110 <.LBB19>:
            uInt max_insert = s->strstart + s->lookahead - MIN_MATCH;
  412110:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  412112:	6f62      	ldr	r2, [r4, #116]	; 0x74
  412114:	440a      	add	r2, r1
  412116:	3a03      	subs	r2, #3

00412118 <.LBB16>:
            _tr_tally_dist(s, s->strstart -1 - s->prev_match,
  412118:	3b03      	subs	r3, #3
  41211a:	b2db      	uxtb	r3, r3

0041211c <.LVL144>:
  41211c:	6e60      	ldr	r0, [r4, #100]	; 0x64
  41211e:	1a09      	subs	r1, r1, r0
  412120:	b289      	uxth	r1, r1

00412122 <.LVL145>:
  412122:	f504 5eb5 	add.w	lr, r4, #5792	; 0x16a0
  412126:	6828      	ldr	r0, [r5, #0]
  412128:	f101 3cff 	add.w	ip, r1, #4294967295
  41212c:	f8de 7000 	ldr.w	r7, [lr]
  412130:	f820 c017 	strh.w	ip, [r0, r7, lsl #1]
  412134:	f241 6098 	movw	r0, #5784	; 0x1698
  412138:	f854 c000 	ldr.w	ip, [r4, r0]
  41213c:	f8de 0000 	ldr.w	r0, [lr]
  412140:	f100 0801 	add.w	r8, r0, #1
  412144:	f8ce 8000 	str.w	r8, [lr]
  412148:	f80c 3000 	strb.w	r3, [ip, r0]
  41214c:	3902      	subs	r1, #2

0041214e <.LVL146>:
  41214e:	b289      	uxth	r1, r1

00412150 <.LVL147>:
  412150:	f819 3003 	ldrb.w	r3, [r9, r3]

00412154 <.LVL148>:
  412154:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  412158:	f8b3 0498 	ldrh.w	r0, [r3, #1176]	; 0x498

0041215c <.LVL149>:
  41215c:	3001      	adds	r0, #1
  41215e:	f8a3 0498 	strh.w	r0, [r3, #1176]	; 0x498

00412162 <.LVL150>:
  412162:	29ff      	cmp	r1, #255	; 0xff
  412164:	f63f af25 	bhi.w	411fb2 <.LBB15>
  412168:	4b3e      	ldr	r3, [pc, #248]	; (412264 <.LVL165>)
  41216a:	5c5b      	ldrb	r3, [r3, r1]

0041216c <.LVL151>:
  41216c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  412170:	f8b3 1988 	ldrh.w	r1, [r3, #2440]	; 0x988
  412174:	3101      	adds	r1, #1
  412176:	f8a3 1988 	strh.w	r1, [r3, #2440]	; 0x988
  41217a:	f504 53b5 	add.w	r3, r4, #5792	; 0x16a0
  41217e:	f8d3 c000 	ldr.w	ip, [r3]
  412182:	f241 639c 	movw	r3, #5788	; 0x169c
  412186:	58e3      	ldr	r3, [r4, r3]
  412188:	f103 3eff 	add.w	lr, r3, #4294967295

0041218c <.LBE16>:
            s->lookahead -= s->prev_length-1;
  41218c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  41218e:	6f63      	ldr	r3, [r4, #116]	; 0x74
  412190:	3301      	adds	r3, #1
  412192:	1a5b      	subs	r3, r3, r1
  412194:	6763      	str	r3, [r4, #116]	; 0x74
            s->prev_length -= 2;
  412196:	3902      	subs	r1, #2
  412198:	67a1      	str	r1, [r4, #120]	; 0x78
  41219a:	e714      	b.n	411fc6 <.LBE15+0x8>

0041219c <.LBE19>:
        FLUSH_BLOCK(s, 1);
  41219c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  41219e:	2800      	cmp	r0, #0
  4121a0:	db13      	blt.n	4121ca <.LVL155+0x10>
  4121a2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  4121a4:	4401      	add	r1, r0
  4121a6:	2301      	movs	r3, #1
  4121a8:	1a12      	subs	r2, r2, r0
  4121aa:	4620      	mov	r0, r4
  4121ac:	f7fd f86c 	bl	40f288 <_tr_flush_block>

004121b0 <.LVL154>:
  4121b0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  4121b2:	65e3      	str	r3, [r4, #92]	; 0x5c
  4121b4:	6820      	ldr	r0, [r4, #0]
  4121b6:	f00a ff8b 	bl	41d0d0 <.LFE41>

004121ba <.LVL155>:
  4121ba:	6823      	ldr	r3, [r4, #0]
  4121bc:	691b      	ldr	r3, [r3, #16]
        return finish_done;
  4121be:	2b00      	cmp	r3, #0
  4121c0:	bf0c      	ite	eq
  4121c2:	2002      	moveq	r0, #2
  4121c4:	2003      	movne	r0, #3
  4121c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        FLUSH_BLOCK(s, 1);
  4121ca:	2100      	movs	r1, #0
  4121cc:	e7eb      	b.n	4121a6 <.LBE19+0xa>
        FLUSH_BLOCK(s, 0);
  4121ce:	2100      	movs	r1, #0
  4121d0:	e6de      	b.n	411f90 <.LVL120+0x2e>
                return need_more;
  4121d2:	2000      	movs	r0, #0
  4121d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return block_done;
  4121d8:	2001      	movs	r0, #1
  4121da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

004121de <.LVL158>:
        s->prev_length = s->match_length, s->prev_match = s->match_start;
  4121de:	6e23      	ldr	r3, [r4, #96]	; 0x60
  4121e0:	67a3      	str	r3, [r4, #120]	; 0x78
  4121e2:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4121e4:	6663      	str	r3, [r4, #100]	; 0x64
        s->match_length = MIN_MATCH-1;
  4121e6:	2302      	movs	r3, #2
  4121e8:	6623      	str	r3, [r4, #96]	; 0x60

004121ea <.LVL159>:
        if (s->prev_length >= MIN_MATCH && s->match_length <= s->prev_length) {
  4121ea:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  4121ec:	2b02      	cmp	r3, #2
  4121ee:	d902      	bls.n	4121f6 <.LVL159+0xc>
  4121f0:	6e22      	ldr	r2, [r4, #96]	; 0x60
  4121f2:	4293      	cmp	r3, r2
  4121f4:	d28c      	bcs.n	412110 <.LBB19>
        } else if (s->match_available) {
  4121f6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
  4121f8:	2b00      	cmp	r3, #0
  4121fa:	f43f af33 	beq.w	412064 <.LVL139>

004121fe <.LBB20>:
            _tr_tally_lit(s, s->window[s->strstart-1], bflush);
  4121fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  412200:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  412202:	4413      	add	r3, r2
  412204:	f813 3c01 	ldrb.w	r3, [r3, #-1]

00412208 <.LVL160>:
  412208:	f504 51b5 	add.w	r1, r4, #5792	; 0x16a0
  41220c:	6808      	ldr	r0, [r1, #0]
  41220e:	682a      	ldr	r2, [r5, #0]
  412210:	f04f 0e00 	mov.w	lr, #0
  412214:	f822 e010 	strh.w	lr, [r2, r0, lsl #1]
  412218:	f241 6298 	movw	r2, #5784	; 0x1698
  41221c:	58a0      	ldr	r0, [r4, r2]
  41221e:	680a      	ldr	r2, [r1, #0]
  412220:	f102 0e01 	add.w	lr, r2, #1
  412224:	f8c1 e000 	str.w	lr, [r1]
  412228:	5483      	strb	r3, [r0, r2]
  41222a:	eb04 0383 	add.w	r3, r4, r3, lsl #2

0041222e <.LVL161>:
  41222e:	f8b3 2094 	ldrh.w	r2, [r3, #148]	; 0x94

00412232 <.LVL162>:
  412232:	3201      	adds	r2, #1
  412234:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

00412238 <.LVL163>:
  412238:	f241 639c 	movw	r3, #5788	; 0x169c
  41223c:	58e3      	ldr	r3, [r4, r3]
  41223e:	3b01      	subs	r3, #1

00412240 <.LBE20>:
            if (bflush) {
  412240:	680a      	ldr	r2, [r1, #0]
  412242:	429a      	cmp	r2, r3
  412244:	f43f aefb 	beq.w	41203e <.LBE18>

00412248 <.LVL164>:
            s->strstart++;
  412248:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  41224a:	3301      	adds	r3, #1
  41224c:	66e3      	str	r3, [r4, #108]	; 0x6c
            s->lookahead--;
  41224e:	6f63      	ldr	r3, [r4, #116]	; 0x74
  412250:	3b01      	subs	r3, #1
  412252:	6763      	str	r3, [r4, #116]	; 0x74
            if (s->strm->avail_out == 0) return need_more;
  412254:	6823      	ldr	r3, [r4, #0]
  412256:	691b      	ldr	r3, [r3, #16]
  412258:	2b00      	cmp	r3, #0
  41225a:	f47f af0b 	bne.w	412074 <.LVL139+0x10>
  41225e:	2000      	movs	r0, #0
  412260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00412264 <.LVL165>:
  412264:	00414b34 	.word	0x00414b34
  412268:	00417964 	.word	0x00417964

Disassembly of section .text.fp_div%90:

0041226c <fp_div>:
{
  41226c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00412270 <.LCFI84>:
  412270:	f6ad 3d04 	subw	sp, sp, #2820	; 0xb04

00412274 <.LCFI85>:
  if (fp_iszero (b) == FP_YES) {
  412274:	680c      	ldr	r4, [r1, #0]
  412276:	2c00      	cmp	r4, #0
  412278:	f000 81a7 	beq.w	4125ca <.LCFI87>
  41227c:	461d      	mov	r5, r3
  41227e:	930a      	str	r3, [sp, #40]	; 0x28
  412280:	9208      	str	r2, [sp, #32]
  412282:	9109      	str	r1, [sp, #36]	; 0x24
  412284:	4604      	mov	r4, r0
  412286:	900b      	str	r0, [sp, #44]	; 0x2c
  if (fp_cmp_mag (a, b) == FP_LT) {
  412288:	f00a f92d 	bl	41c4e6 <.LFE170>

0041228c <.LVL564>:
  41228c:	f1b0 3fff 	cmp.w	r0, #4294967295
  412290:	d045      	beq.n	41231e <.LVL586>

00412292 <.LBB85>:
    fp_zero(a);
  412292:	f60d 00d8 	addw	r0, sp, #2264	; 0x8d8

00412296 <.LVL566>:
  412296:	f00c fc49 	bl	41eb2c <.LFE154>

0041229a <.LBE85>:
  q.used = a->used + 2;
  41229a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c

0041229c <.LVL568>:
  41229c:	6823      	ldr	r3, [r4, #0]
  41229e:	3302      	adds	r3, #2
  4122a0:	f8cd 38d8 	str.w	r3, [sp, #2264]	; 0x8d8

004122a4 <.LBB87>:
    fp_zero(a);
  4122a4:	a898      	add	r0, sp, #608	; 0x260

004122a6 <.LVL570>:
  4122a6:	f00c fc41 	bl	41eb2c <.LFE154>

004122aa <.LBB89>:
  4122aa:	a80e      	add	r0, sp, #56	; 0x38

004122ac <.LVL572>:
  4122ac:	f00c fc3e 	bl	41eb2c <.LFE154>

004122b0 <.LBE89>:
  fp_init_copy(&x, a);
  4122b0:	4621      	mov	r1, r4
  4122b2:	f50d 60d6 	add.w	r0, sp, #1712	; 0x6b0
  4122b6:	f00c fab7 	bl	41e828 <.LFE54>

004122ba <.LVL574>:
  fp_init_copy(&y, b);
  4122ba:	9d09      	ldr	r5, [sp, #36]	; 0x24

004122bc <.LVL575>:
  4122bc:	4629      	mov	r1, r5
  4122be:	f50d 6091 	add.w	r0, sp, #1160	; 0x488
  4122c2:	f00c fab1 	bl	41e828 <.LFE54>

004122c6 <.LVL576>:
  neg = (a->sign == b->sign) ? FP_ZPOS : FP_NEG;
  4122c6:	6862      	ldr	r2, [r4, #4]
  4122c8:	686b      	ldr	r3, [r5, #4]
  4122ca:	1ad3      	subs	r3, r2, r3
  4122cc:	bf18      	it	ne
  4122ce:	2301      	movne	r3, #1
  4122d0:	930d      	str	r3, [sp, #52]	; 0x34

004122d2 <.LVL577>:
  x.sign = y.sign = FP_ZPOS;
  4122d2:	2300      	movs	r3, #0

004122d4 <.LVL578>:
  4122d4:	f8cd 348c 	str.w	r3, [sp, #1164]	; 0x48c
  4122d8:	f8cd 36b4 	str.w	r3, [sp, #1716]	; 0x6b4
  norm = fp_count_bits(&y) % DIGIT_BIT;
  4122dc:	f50d 6091 	add.w	r0, sp, #1160	; 0x488
  4122e0:	f00c fa95 	bl	41e80e <.LFE26>

004122e4 <.LVL579>:
  4122e4:	4242      	negs	r2, r0
  4122e6:	f000 031f 	and.w	r3, r0, #31
  4122ea:	f002 021f 	and.w	r2, r2, #31
  4122ee:	bf58      	it	pl
  4122f0:	4253      	negpl	r3, r2

004122f2 <.LVL580>:
  if (norm < (int)(DIGIT_BIT-1)) {
  4122f2:	2b1e      	cmp	r3, #30
  4122f4:	dd21      	ble.n	41233a <.LVL589>
     norm = 0;
  4122f6:	2300      	movs	r3, #0

004122f8 <.LVL581>:
  4122f8:	930c      	str	r3, [sp, #48]	; 0x30

004122fa <.LVL582>:
  n = x.used - 1;
  4122fa:	f8dd 46b0 	ldr.w	r4, [sp, #1712]	; 0x6b0
  4122fe:	f104 3aff 	add.w	sl, r4, #4294967295

00412302 <.LVL583>:
  t = y.used - 1;
  412302:	f8dd 6488 	ldr.w	r6, [sp, #1160]	; 0x488
  412306:	f106 39ff 	add.w	r9, r6, #4294967295

0041230a <.LVL584>:
  fp_lshd (&y, n - t); /* y = y*b**{n-t} */
  41230a:	ebaa 0709 	sub.w	r7, sl, r9
  41230e:	4639      	mov	r1, r7
  412310:	f50d 6091 	add.w	r0, sp, #1160	; 0x488
  412314:	f008 fe2d 	bl	41af72 <.LFE26>

00412318 <.LVL585>:
    ++(q.dp[n - t]);
  412318:	f60d 05d8 	addw	r5, sp, #2264	; 0x8d8
  while (fp_cmp (&x, &y) != FP_LT) {
  41231c:	e02b      	b.n	412376 <.LVL595>

0041231e <.LVL586>:
    if (d != NULL) {
  41231e:	b11d      	cbz	r5, 412328 <.LVL587>
      fp_copy (a, d);
  412320:	4629      	mov	r1, r5
  412322:	4620      	mov	r0, r4
  412324:	f00c f8ac 	bl	41e480 <.LFE185>

00412328 <.LVL587>:
    if (c != NULL) {
  412328:	9b08      	ldr	r3, [sp, #32]
  41232a:	2b00      	cmp	r3, #0
  41232c:	f000 8150 	beq.w	4125d0 <.LVL626>
      fp_zero (c);
  412330:	4618      	mov	r0, r3
  412332:	f00c fbfb 	bl	41eb2c <.LFE154>

00412336 <.LVL588>:
    return FP_OKAY;
  412336:	2000      	movs	r0, #0
  412338:	e143      	b.n	4125c2 <.LVL623>

0041233a <.LVL589>:
     norm = (DIGIT_BIT-1) - norm;
  41233a:	f1c3 031f 	rsb	r3, r3, #31

0041233e <.LVL590>:
  41233e:	461c      	mov	r4, r3
  412340:	930c      	str	r3, [sp, #48]	; 0x30

00412342 <.LVL591>:
     fp_mul_2d (&x, norm, &x);
  412342:	f50d 62d6 	add.w	r2, sp, #1712	; 0x6b0
  412346:	4619      	mov	r1, r3
  412348:	4610      	mov	r0, r2
  41234a:	f007 fd8a 	bl	419e62 <.LBE78>

0041234e <.LVL592>:
     fp_mul_2d (&y, norm, &y);
  41234e:	f50d 6291 	add.w	r2, sp, #1160	; 0x488
  412352:	4621      	mov	r1, r4
  412354:	4610      	mov	r0, r2
  412356:	f007 fd84 	bl	419e62 <.LBE78>

0041235a <.LVL593>:
  41235a:	e7ce      	b.n	4122fa <.LVL582>

0041235c <.LVL594>:
    ++(q.dp[n - t]);
  41235c:	1cba      	adds	r2, r7, #2
  41235e:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
  412362:	3301      	adds	r3, #1
  412364:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    fp_sub (&x, &y, &x);
  412368:	f50d 62d6 	add.w	r2, sp, #1712	; 0x6b0
  41236c:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
  412370:	4610      	mov	r0, r2
  412372:	f00b f8f5 	bl	41d560 <.LFE162>

00412376 <.LVL595>:
  while (fp_cmp (&x, &y) != FP_LT) {
  412376:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
  41237a:	f50d 60d6 	add.w	r0, sp, #1712	; 0x6b0
  41237e:	f00b fd40 	bl	41de02 <.LFE7>

00412382 <.LVL596>:
  412382:	f1b0 3fff 	cmp.w	r0, #4294967295
  412386:	d1e9      	bne.n	41235c <.LVL594>
  fp_rshd (&y, n - t);
  412388:	4639      	mov	r1, r7
  41238a:	f50d 6091 	add.w	r0, sp, #1160	; 0x488
  41238e:	f008 feb7 	bl	41b100 <.LFE150>

00412392 <.LVL597>:
  for (i = n; i >= (t + 1); i--) {
  412392:	45b2      	cmp	sl, r6
  412394:	f2c0 809d 	blt.w	4124d2 <.LVL616>
  412398:	9607      	str	r6, [sp, #28]
  41239a:	1c63      	adds	r3, r4, #1
  41239c:	1b9b      	subs	r3, r3, r6
  41239e:	f60d 02d8 	addw	r2, sp, #2264	; 0x8d8
  4123a2:	eb02 0b83 	add.w	fp, r2, r3, lsl #2
  4123a6:	f50d 63d6 	add.w	r3, sp, #1712	; 0x6b0
  4123aa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
  4123ae:	9301      	str	r3, [sp, #4]
    if (x.dp[i] == y.dp[t]) {
  4123b0:	f50d 6891 	add.w	r8, sp, #1160	; 0x488
      t1.dp[1] = y.dp[t];
  4123b4:	f8cd 8018 	str.w	r8, [sp, #24]
  4123b8:	e04f      	b.n	41245a <.LVL606+0x12>

004123ba <.LVL598>:
      q.dp[i - t - 1] = (fp_digit) ((((fp_word)1) << DIGIT_BIT) - 1);
  4123ba:	f04f 33ff 	mov.w	r3, #4294967295
  4123be:	f8cb 3000 	str.w	r3, [fp]
  4123c2:	e067      	b.n	412494 <.LVL611+0x4>

004123c4 <.LVL599>:
      t1.dp[0] = (t - 1 < 0) ? 0 : y.dp[t - 1];
  4123c4:	3302      	adds	r3, #2
  4123c6:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
  4123ca:	939a      	str	r3, [sp, #616]	; 0x268
      t1.dp[1] = y.dp[t];
  4123cc:	f109 0302 	add.w	r3, r9, #2
  4123d0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
  4123d4:	939b      	str	r3, [sp, #620]	; 0x26c
      t1.used = 2;
  4123d6:	2302      	movs	r3, #2
  4123d8:	9398      	str	r3, [sp, #608]	; 0x260
      fp_mul_d (&t1, q.dp[i - t - 1], &t1);
  4123da:	aa98      	add	r2, sp, #608	; 0x260
  4123dc:	6821      	ldr	r1, [r4, #0]
  4123de:	4610      	mov	r0, r2
  4123e0:	f007 f854 	bl	41948c <.LFE167>

004123e4 <.LVL600>:
      t2.dp[0] = (i - 2 < 0) ? 0 : x.dp[i - 2];
  4123e4:	2f02      	cmp	r7, #2
  4123e6:	bf54      	ite	pl
  4123e8:	f855 3c04 	ldrpl.w	r3, [r5, #-4]
  4123ec:	2300      	movmi	r3, #0
  4123ee:	9310      	str	r3, [sp, #64]	; 0x40
      t2.dp[1] = (i - 1 < 0) ? 0 : x.dp[i - 1];
  4123f0:	2f01      	cmp	r7, #1
  4123f2:	bf54      	ite	pl
  4123f4:	682b      	ldrpl	r3, [r5, #0]
  4123f6:	2300      	movmi	r3, #0
  4123f8:	9311      	str	r3, [sp, #68]	; 0x44
      t2.dp[2] = x.dp[i];
  4123fa:	686b      	ldr	r3, [r5, #4]
  4123fc:	9312      	str	r3, [sp, #72]	; 0x48
      t2.used = 3;
  4123fe:	2303      	movs	r3, #3
  412400:	930e      	str	r3, [sp, #56]	; 0x38
    } while (fp_cmp_mag(&t1, &t2) == FP_GT);
  412402:	a90e      	add	r1, sp, #56	; 0x38
  412404:	a898      	add	r0, sp, #608	; 0x260
  412406:	f00a f86e 	bl	41c4e6 <.LFE170>

0041240a <.LVL601>:
  41240a:	2801      	cmp	r0, #1
  41240c:	d109      	bne.n	412422 <.LVL602+0x8>
      q.dp[i - t - 1] = (q.dp[i - t - 1] - 1);
  41240e:	6823      	ldr	r3, [r4, #0]
  412410:	3b01      	subs	r3, #1
  412412:	6023      	str	r3, [r4, #0]
      fp_zero (&t1);
  412414:	a898      	add	r0, sp, #608	; 0x260
  412416:	f00c fb89 	bl	41eb2c <.LFE154>

0041241a <.LVL602>:
      t1.dp[0] = (t - 1 < 0) ? 0 : y.dp[t - 1];
  41241a:	1eb3      	subs	r3, r6, #2
  41241c:	d5d2      	bpl.n	4123c4 <.LVL599>
  41241e:	2300      	movs	r3, #0
  412420:	e7d3      	b.n	4123ca <.LVL599+0x6>
    fp_mul_d (&y, q.dp[i - t - 1], &t1);
  412422:	aa98      	add	r2, sp, #608	; 0x260
  412424:	6821      	ldr	r1, [r4, #0]
  412426:	9806      	ldr	r0, [sp, #24]
  412428:	f007 f830 	bl	41948c <.LFE167>

0041242c <.LVL603>:
    fp_lshd  (&t1, i - t - 1);
  41242c:	9904      	ldr	r1, [sp, #16]
  41242e:	a898      	add	r0, sp, #608	; 0x260
  412430:	f008 fd9f 	bl	41af72 <.LFE26>

00412434 <.LVL604>:
    fp_sub   (&x, &t1, &x);
  412434:	f50d 62d6 	add.w	r2, sp, #1712	; 0x6b0
  412438:	a998      	add	r1, sp, #608	; 0x260
  41243a:	4610      	mov	r0, r2
  41243c:	f00b f890 	bl	41d560 <.LFE162>

00412440 <.LVL605>:
    if (x.sign == FP_NEG) {
  412440:	f8dd 36b4 	ldr.w	r3, [sp, #1716]	; 0x6b4
  412444:	2b01      	cmp	r3, #1
  412446:	d032      	beq.n	4124ae <.LVL612>

00412448 <.LVL606>:
  for (i = n; i >= (t + 1); i--) {
  412448:	f10a 3aff 	add.w	sl, sl, #4294967295
  41244c:	f1ab 0b04 	sub.w	fp, fp, #4
  412450:	9b01      	ldr	r3, [sp, #4]
  412452:	3b04      	subs	r3, #4
  412454:	9301      	str	r3, [sp, #4]
  412456:	4556      	cmp	r6, sl
  412458:	dc3b      	bgt.n	4124d2 <.LVL616>
    if (i > x.used) {
  41245a:	f8dd 36b0 	ldr.w	r3, [sp, #1712]	; 0x6b0
  41245e:	4553      	cmp	r3, sl
  412460:	dbf2      	blt.n	412448 <.LVL606>
  412462:	9b01      	ldr	r3, [sp, #4]
  412464:	9305      	str	r3, [sp, #20]
    if (x.dp[i] == y.dp[t]) {
  412466:	685b      	ldr	r3, [r3, #4]
  412468:	f109 0202 	add.w	r2, r9, #2
  41246c:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
  412470:	4293      	cmp	r3, r2
  412472:	d0a2      	beq.n	4123ba <.LVL598>

00412474 <.LBB91>:
      tmp = ((fp_word) x.dp[i]) << ((fp_word) DIGIT_BIT);
  412474:	9303      	str	r3, [sp, #12]
  412476:	2300      	movs	r3, #0
  412478:	9302      	str	r3, [sp, #8]

0041247a <.LVL608>:
      tmp |= ((fp_word) x.dp[i - 1]);
  41247a:	9b01      	ldr	r3, [sp, #4]
  41247c:	6818      	ldr	r0, [r3, #0]

0041247e <.LVL609>:
      tmp /= ((fp_word)y.dp[t]);
  41247e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  412482:	4623      	mov	r3, r4
  412484:	ea44 0400 	orr.w	r4, r4, r0
  412488:	4620      	mov	r0, r4

0041248a <.LVL610>:
  41248a:	4629      	mov	r1, r5
  41248c:	f00b fd7e 	bl	41df8c <.LBE14>

00412490 <.LVL611>:
      q.dp[i - t - 1] = (fp_digit) (tmp);
  412490:	f8cb 0000 	str.w	r0, [fp]
  412494:	4657      	mov	r7, sl
  412496:	9b07      	ldr	r3, [sp, #28]
  412498:	ebaa 0303 	sub.w	r3, sl, r3
  41249c:	9304      	str	r3, [sp, #16]
  41249e:	465c      	mov	r4, fp

004124a0 <.LBE91>:
    q.dp[i - t - 1] = (q.dp[i - t - 1] + 1);
  4124a0:	f8db 3000 	ldr.w	r3, [fp]
  4124a4:	3301      	adds	r3, #1
  4124a6:	f8cb 3000 	str.w	r3, [fp]
      t2.dp[0] = (i - 2 < 0) ? 0 : x.dp[i - 2];
  4124aa:	9d05      	ldr	r5, [sp, #20]
  4124ac:	e7af      	b.n	41240e <.LVL601+0x4>

004124ae <.LVL612>:
      fp_copy (&y, &t1);
  4124ae:	a998      	add	r1, sp, #608	; 0x260
  4124b0:	9806      	ldr	r0, [sp, #24]
  4124b2:	f00b ffe5 	bl	41e480 <.LFE185>

004124b6 <.LVL613>:
      fp_lshd (&t1, i - t - 1);
  4124b6:	9904      	ldr	r1, [sp, #16]
  4124b8:	a898      	add	r0, sp, #608	; 0x260
  4124ba:	f008 fd5a 	bl	41af72 <.LFE26>

004124be <.LVL614>:
      fp_add (&x, &t1, &x);
  4124be:	f50d 62d6 	add.w	r2, sp, #1712	; 0x6b0
  4124c2:	a998      	add	r1, sp, #608	; 0x260
  4124c4:	4610      	mov	r0, r2
  4124c6:	f00a fee7 	bl	41d298 <.LFE17>

004124ca <.LVL615>:
      q.dp[i - t - 1] = q.dp[i - t - 1] - 1;
  4124ca:	6823      	ldr	r3, [r4, #0]
  4124cc:	3b01      	subs	r3, #1
  4124ce:	6023      	str	r3, [r4, #0]
  4124d0:	e7ba      	b.n	412448 <.LVL606>

004124d2 <.LVL616>:
  x.sign = x.used == 0 ? FP_ZPOS : a->sign;
  4124d2:	f8dd 36b0 	ldr.w	r3, [sp, #1712]	; 0x6b0
  4124d6:	b10b      	cbz	r3, 4124dc <.LVL616+0xa>
  4124d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4124da:	685b      	ldr	r3, [r3, #4]
  4124dc:	f8cd 36b4 	str.w	r3, [sp, #1716]	; 0x6b4
  if (c != NULL) {
  4124e0:	9b08      	ldr	r3, [sp, #32]
  4124e2:	b34b      	cbz	r3, 412538 <.LVL617+0x4>
    fp_clamp (&q);
  4124e4:	f8dd 28d8 	ldr.w	r2, [sp, #2264]	; 0x8d8
  4124e8:	b1da      	cbz	r2, 412522 <.LVL616+0x50>
  4124ea:	1e53      	subs	r3, r2, #1
  4124ec:	1c51      	adds	r1, r2, #1
  4124ee:	f60d 00d8 	addw	r0, sp, #2264	; 0x8d8
  4124f2:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
  4124f6:	b979      	cbnz	r1, 412518 <.LVL616+0x46>
  4124f8:	f50d 6130 	add.w	r1, sp, #2816	; 0xb00
  4124fc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  412500:	f5a2 7209 	sub.w	r2, r2, #548	; 0x224
  412504:	e000      	b.n	412508 <.LVL616+0x36>
  412506:	4603      	mov	r3, r0
  412508:	b14b      	cbz	r3, 41251e <.LVL616+0x4c>
  41250a:	1e58      	subs	r0, r3, #1
  41250c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  412510:	2900      	cmp	r1, #0
  412512:	d0f8      	beq.n	412506 <.LVL616+0x34>
  412514:	f8cd 38d8 	str.w	r3, [sp, #2264]	; 0x8d8
  412518:	f8dd 38dc 	ldr.w	r3, [sp, #2268]	; 0x8dc
  41251c:	e002      	b.n	412524 <.LVL616+0x52>
  41251e:	f8cd 38d8 	str.w	r3, [sp, #2264]	; 0x8d8
  412522:	2300      	movs	r3, #0
  412524:	f8cd 38dc 	str.w	r3, [sp, #2268]	; 0x8dc
    fp_copy (&q, c);
  412528:	9c08      	ldr	r4, [sp, #32]
  41252a:	4621      	mov	r1, r4
  41252c:	f60d 00d8 	addw	r0, sp, #2264	; 0x8d8
  412530:	f00b ffa6 	bl	41e480 <.LFE185>

00412534 <.LVL617>:
    c->sign = neg;
  412534:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  412536:	6063      	str	r3, [r4, #4]
  if (d != NULL) {
  412538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41253a:	2b00      	cmp	r3, #0
  41253c:	d04a      	beq.n	4125d4 <.LVL627>
    fp_div_2d (&x, norm, &x, NULL);
  41253e:	2300      	movs	r3, #0
  412540:	f50d 62d6 	add.w	r2, sp, #1712	; 0x6b0
  412544:	990c      	ldr	r1, [sp, #48]	; 0x30
  412546:	4610      	mov	r0, r2
  412548:	f007 fb8f 	bl	419c6a <.LFE7>

0041254c <.LVL618>:
    for (i = b->used; i < x.used; i++) {
  41254c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41254e:	681b      	ldr	r3, [r3, #0]

00412550 <.LVL619>:
  412550:	f8dd 06b0 	ldr.w	r0, [sp, #1712]	; 0x6b0
  412554:	4283      	cmp	r3, r0
  412556:	da0e      	bge.n	412576 <.LVL621+0x8>
  412558:	f50d 62d6 	add.w	r2, sp, #1712	; 0x6b0
  41255c:	eb02 0383 	add.w	r3, r2, r3, lsl #2

00412560 <.LVL620>:
  412560:	3304      	adds	r3, #4
  412562:	1c42      	adds	r2, r0, #1
  412564:	f50d 61d6 	add.w	r1, sp, #1712	; 0x6b0
  412568:	eb01 0282 	add.w	r2, r1, r2, lsl #2
        x.dp[i] = 0;
  41256c:	2100      	movs	r1, #0

0041256e <.LVL621>:
  41256e:	f843 1f04 	str.w	r1, [r3, #4]!
    for (i = b->used; i < x.used; i++) {
  412572:	4293      	cmp	r3, r2
  412574:	d1fb      	bne.n	41256e <.LVL621>
    fp_clamp(&x);
  412576:	b1d8      	cbz	r0, 4125b0 <.LVL621+0x42>
  412578:	1e43      	subs	r3, r0, #1
  41257a:	1c42      	adds	r2, r0, #1
  41257c:	f50d 61d6 	add.w	r1, sp, #1712	; 0x6b0
  412580:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  412584:	b97a      	cbnz	r2, 4125a6 <.LVL621+0x38>
  412586:	f50d 6230 	add.w	r2, sp, #2816	; 0xb00
  41258a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
  41258e:	f2a2 424c 	subw	r2, r2, #1100	; 0x44c
  412592:	e000      	b.n	412596 <.LVL621+0x28>
  412594:	4603      	mov	r3, r0
  412596:	b14b      	cbz	r3, 4125ac <.LVL621+0x3e>
  412598:	1e58      	subs	r0, r3, #1
  41259a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  41259e:	2900      	cmp	r1, #0
  4125a0:	d0f8      	beq.n	412594 <.LVL621+0x26>
  4125a2:	f8cd 36b0 	str.w	r3, [sp, #1712]	; 0x6b0
  4125a6:	f8dd 36b4 	ldr.w	r3, [sp, #1716]	; 0x6b4
  4125aa:	e002      	b.n	4125b2 <.LVL621+0x44>
  4125ac:	f8cd 36b0 	str.w	r3, [sp, #1712]	; 0x6b0
  4125b0:	2300      	movs	r3, #0
  4125b2:	f8cd 36b4 	str.w	r3, [sp, #1716]	; 0x6b4
    fp_copy (&x, d);
  4125b6:	990a      	ldr	r1, [sp, #40]	; 0x28
  4125b8:	f50d 60d6 	add.w	r0, sp, #1712	; 0x6b0
  4125bc:	f00b ff60 	bl	41e480 <.LFE185>

004125c0 <.LVL622>:
  return FP_OKAY;
  4125c0:	2000      	movs	r0, #0

004125c2 <.LVL623>:
}
  4125c2:	f60d 3d04 	addw	sp, sp, #2820	; 0xb04

004125c6 <.LCFI86>:
  4125c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004125ca <.LCFI87>:
    return FP_VAL;
  4125ca:	f04f 30ff 	mov.w	r0, #4294967295

004125ce <.LVL625>:
  4125ce:	e7f8      	b.n	4125c2 <.LVL623>

004125d0 <.LVL626>:
    return FP_OKAY;
  4125d0:	2000      	movs	r0, #0
  4125d2:	e7f6      	b.n	4125c2 <.LVL623>

004125d4 <.LVL627>:
  return FP_OKAY;
  4125d4:	2000      	movs	r0, #0
  4125d6:	e7f4      	b.n	4125c2 <.LVL623>

Disassembly of section .text.ecc_projective_dbl_point%91:

004125d8 <ecc_projective_dbl_point>:
{
  4125d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

004125dc <.LCFI15>:
  4125dc:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c

004125e0 <.LCFI16>:
   if (P == NULL || R == NULL || modulus == NULL)
  4125e0:	2b00      	cmp	r3, #0
  4125e2:	bf18      	it	ne
  4125e4:	2900      	cmpne	r1, #0
  4125e6:	f000 819c 	beq.w	412922 <.LVL255>
  4125ea:	460d      	mov	r5, r1
  4125ec:	4698      	mov	r8, r3
  4125ee:	2800      	cmp	r0, #0
  4125f0:	f000 8197 	beq.w	412922 <.LVL255>
  4125f4:	4606      	mov	r6, r0
   if ((err = mp_init_multi(&t1, &t2, NULL, NULL, NULL, NULL)) != MP_OKAY) {
  4125f6:	2200      	movs	r2, #0

004125f8 <.LVL116>:
  4125f8:	9201      	str	r2, [sp, #4]
  4125fa:	9200      	str	r2, [sp, #0]
  4125fc:	4613      	mov	r3, r2

004125fe <.LVL117>:
  4125fe:	a902      	add	r1, sp, #8

00412600 <.LVL118>:
  412600:	a88c      	add	r0, sp, #560	; 0x230

00412602 <.LVL119>:
  412602:	f00b f933 	bl	41d86c <mp_init_multi>

00412606 <.LVL120>:
  412606:	4604      	mov	r4, r0
  412608:	b120      	cbz	r0, 412614 <.LCFI18>

0041260a <.LVL121>:
}
  41260a:	4620      	mov	r0, r4
  41260c:	f20d 4d5c 	addw	sp, sp, #1116	; 0x45c

00412610 <.LCFI17>:
  412610:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00412614 <.LCFI18>:
   y = R->y;
  412614:	f505 770a 	add.w	r7, r5, #552	; 0x228

00412618 <.LVL123>:
   z = R->z;
  412618:	f505 698a 	add.w	r9, r5, #1104	; 0x450

0041261c <.LVL124>:
       err = mp_copy(P->x, x);
  41261c:	4629      	mov	r1, r5
  41261e:	4630      	mov	r0, r6

00412620 <.LVL125>:
  412620:	f00c fc21 	bl	41ee66 <.LFE85>

00412624 <.LVL126>:
   if (err == MP_OKAY)
  412624:	4604      	mov	r4, r0
  412626:	b1f0      	cbz	r0, 412666 <.LVL130>
   if (err == MP_OKAY)
  412628:	2c00      	cmp	r4, #0
  41262a:	d038      	beq.n	41269e <.LVL139+0x2>
      if (err == MP_OKAY)
  41262c:	2c00      	cmp	r4, #0
  41262e:	d05a      	beq.n	4126e6 <.LVL153>
      if (err == MP_OKAY)
  412630:	2c00      	cmp	r4, #0
  412632:	d07e      	beq.n	412732 <.LVL166>
      if (err == MP_OKAY)
  412634:	2c00      	cmp	r4, #0
  412636:	f000 80a0 	beq.w	41277a <.LVL179>
   if (err == MP_OKAY)
  41263a:	2c00      	cmp	r4, #0
  41263c:	f000 80c7 	beq.w	4127ce <.LVL193>
   if (err == MP_OKAY) {
  412640:	2c00      	cmp	r4, #0
  412642:	f000 80e0 	beq.w	412806 <.LVL204+0x2>
   if (err == MP_OKAY)
  412646:	2c00      	cmp	r4, #0
  412648:	f000 8100 	beq.w	41284c <.LVL218+0x6>
   if (err == MP_OKAY)
  41264c:	2c00      	cmp	r4, #0
  41264e:	f000 8116 	beq.w	41287e <.LVL228>
   if (err == MP_OKAY)
  412652:	2c00      	cmp	r4, #0
  412654:	f000 8126 	beq.w	4128a4 <.LVL234>

00412658 <.LVL127>:
   mp_clear(&t1);
  412658:	a88c      	add	r0, sp, #560	; 0x230
  41265a:	f00c fb9f 	bl	41ed9c <.LFE170>

0041265e <.LVL128>:
   mp_clear(&t2);
  41265e:	a802      	add	r0, sp, #8
  412660:	f00c fb9c 	bl	41ed9c <.LFE170>

00412664 <.LVL129>:
   return err;
  412664:	e7d1      	b.n	41260a <.LVL121>

00412666 <.LVL130>:
       err = mp_copy(P->y, y);
  412666:	4639      	mov	r1, r7
  412668:	f506 700a 	add.w	r0, r6, #552	; 0x228

0041266c <.LVL131>:
  41266c:	f00c fbfb 	bl	41ee66 <.LFE85>

00412670 <.LVL132>:
   if (err == MP_OKAY)
  412670:	4604      	mov	r4, r0
  412672:	b9d0      	cbnz	r0, 4126aa <.LVL142>
       err = mp_copy(P->z, z);
  412674:	4649      	mov	r1, r9
  412676:	f506 608a 	add.w	r0, r6, #1104	; 0x450

0041267a <.LVL133>:
  41267a:	f00c fbf4 	bl	41ee66 <.LFE85>

0041267e <.LVL134>:
   if (err == MP_OKAY)
  41267e:	4604      	mov	r4, r0
  412680:	b9d8      	cbnz	r0, 4126ba <.LVL145>
       err = mp_sqr(z, &t1);
  412682:	a98c      	add	r1, sp, #560	; 0x230
  412684:	4648      	mov	r0, r9

00412686 <.LVL135>:
  412686:	f00c fbfd 	bl	41ee84 <.LFE105>

0041268a <.LVL136>:
   if (err == MP_OKAY)
  41268a:	4604      	mov	r4, r0
  41268c:	b9e0      	cbnz	r0, 4126c8 <.LVL148>
       err = mp_montgomery_reduce(&t1, modulus, mp);
  41268e:	f8dd 2478 	ldr.w	r2, [sp, #1144]	; 0x478
  412692:	4641      	mov	r1, r8
  412694:	a88c      	add	r0, sp, #560	; 0x230

00412696 <.LVL137>:
  412696:	f00c fbfa 	bl	41ee8e <.LFE110>

0041269a <.LVL138>:
  41269a:	4604      	mov	r4, r0

0041269c <.LVL139>:
  41269c:	e7c4      	b.n	412628 <.LVL126+0x4>
       err = mp_mul(z, y, z);
  41269e:	464a      	mov	r2, r9
  4126a0:	4639      	mov	r1, r7
  4126a2:	4648      	mov	r0, r9

004126a4 <.LVL140>:
  4126a4:	f00c fbd5 	bl	41ee52 <.LFE86>

004126a8 <.LVL141>:
  4126a8:	4604      	mov	r4, r0

004126aa <.LVL142>:
   if (err == MP_OKAY)
  4126aa:	bb14      	cbnz	r4, 4126f2 <.LVL155>
       err = mp_montgomery_reduce(z, modulus, mp);
  4126ac:	f8dd 2478 	ldr.w	r2, [sp, #1144]	; 0x478
  4126b0:	4641      	mov	r1, r8
  4126b2:	4648      	mov	r0, r9

004126b4 <.LVL143>:
  4126b4:	f00c fbeb 	bl	41ee8e <.LFE110>

004126b8 <.LVL144>:
  4126b8:	4604      	mov	r4, r0

004126ba <.LVL145>:
   if (err == MP_OKAY)
  4126ba:	bbc4      	cbnz	r4, 41272e <.LVL165>
       err = mp_add(z, z, z);
  4126bc:	464a      	mov	r2, r9
  4126be:	4649      	mov	r1, r9
  4126c0:	4648      	mov	r0, r9

004126c2 <.LVL146>:
  4126c2:	f00c fbb7 	bl	41ee34 <.LFE222>

004126c6 <.LVL147>:
  4126c6:	4604      	mov	r4, r0

004126c8 <.LVL148>:
   if (err == MP_OKAY) {
  4126c8:	b9e4      	cbnz	r4, 412704 <.LVL158>
       if (mp_cmp(z, modulus) != MP_LT)
  4126ca:	4641      	mov	r1, r8
  4126cc:	4648      	mov	r0, r9

004126ce <.LVL149>:
  4126ce:	f00c fc27 	bl	41ef20 <.LFE66>

004126d2 <.LVL150>:
  4126d2:	f1b0 3fff 	cmp.w	r0, #4294967295
  4126d6:	d006      	beq.n	4126e6 <.LVL153>
           err = mp_sub(z, modulus, z);
  4126d8:	464a      	mov	r2, r9
  4126da:	4641      	mov	r1, r8
  4126dc:	4648      	mov	r0, r9
  4126de:	f00c fbae 	bl	41ee3e <.LFE71>

004126e2 <.LVL151>:
  4126e2:	4604      	mov	r4, r0

004126e4 <.LVL152>:
  4126e4:	e7a2      	b.n	41262c <.LVL126+0x8>

004126e6 <.LVL153>:
          err = mp_sub(x, &t1, &t2);
  4126e6:	aa02      	add	r2, sp, #8
  4126e8:	a98c      	add	r1, sp, #560	; 0x230
  4126ea:	4628      	mov	r0, r5
  4126ec:	f00c fba7 	bl	41ee3e <.LFE71>

004126f0 <.LVL154>:
  4126f0:	4604      	mov	r4, r0

004126f2 <.LVL155>:
      if (err == MP_OKAY) {
  4126f2:	bb24      	cbnz	r4, 41273e <.LVL168>
          if (mp_isneg(&t2))
  4126f4:	9b03      	ldr	r3, [sp, #12]
  4126f6:	b9a3      	cbnz	r3, 412722 <.LVL162+0x2>

004126f8 <.LVL156>:
          err = mp_add(&t1, x, &t1);
  4126f8:	aa8c      	add	r2, sp, #560	; 0x230
  4126fa:	4629      	mov	r1, r5
  4126fc:	4610      	mov	r0, r2
  4126fe:	f00c fb99 	bl	41ee34 <.LFE222>

00412702 <.LVL157>:
  412702:	4604      	mov	r4, r0

00412704 <.LVL158>:
      if (err == MP_OKAY) {
  412704:	bb54      	cbnz	r4, 41275c <.LVL174>
          if (mp_cmp(&t1, modulus) != MP_LT)
  412706:	4641      	mov	r1, r8
  412708:	a88c      	add	r0, sp, #560	; 0x230

0041270a <.LVL159>:
  41270a:	f00c fc09 	bl	41ef20 <.LFE66>

0041270e <.LVL160>:
  41270e:	f1b0 3fff 	cmp.w	r0, #4294967295
  412712:	d00e      	beq.n	412732 <.LVL166>
              err = mp_sub(&t1, modulus, &t1);
  412714:	aa8c      	add	r2, sp, #560	; 0x230
  412716:	4641      	mov	r1, r8
  412718:	4610      	mov	r0, r2
  41271a:	f00c fb90 	bl	41ee3e <.LFE71>

0041271e <.LVL161>:
  41271e:	4604      	mov	r4, r0

00412720 <.LVL162>:
  412720:	e786      	b.n	412630 <.LVL126+0xc>
              err = mp_add(&t2, modulus, &t2);
  412722:	aa02      	add	r2, sp, #8
  412724:	4641      	mov	r1, r8
  412726:	4610      	mov	r0, r2

00412728 <.LVL163>:
  412728:	f00c fb84 	bl	41ee34 <.LFE222>

0041272c <.LVL164>:
  41272c:	4604      	mov	r4, r0

0041272e <.LVL165>:
      if (err == MP_OKAY)
  41272e:	b974      	cbnz	r4, 41274e <.LVL171>
  412730:	e7e2      	b.n	4126f8 <.LVL156>

00412732 <.LVL166>:
          err = mp_mul(&t1, &t2, &t2);
  412732:	aa02      	add	r2, sp, #8
  412734:	4611      	mov	r1, r2
  412736:	a88c      	add	r0, sp, #560	; 0x230
  412738:	f00c fb8b 	bl	41ee52 <.LFE86>

0041273c <.LVL167>:
  41273c:	4604      	mov	r4, r0

0041273e <.LVL168>:
      if (err == MP_OKAY)
  41273e:	bb14      	cbnz	r4, 412786 <.LVL181>
          err = mp_montgomery_reduce(&t2, modulus, mp);
  412740:	f8dd 2478 	ldr.w	r2, [sp, #1144]	; 0x478
  412744:	4641      	mov	r1, r8
  412746:	a802      	add	r0, sp, #8

00412748 <.LVL169>:
  412748:	f00c fba1 	bl	41ee8e <.LFE110>

0041274c <.LVL170>:
  41274c:	4604      	mov	r4, r0

0041274e <.LVL171>:
      if (err == MP_OKAY)
  41274e:	bb44      	cbnz	r4, 4127a2 <.LVL185>
          err = mp_add(&t2, &t2, &t1);
  412750:	aa8c      	add	r2, sp, #560	; 0x230
  412752:	a902      	add	r1, sp, #8
  412754:	4608      	mov	r0, r1

00412756 <.LVL172>:
  412756:	f00c fb6d 	bl	41ee34 <.LFE222>

0041275a <.LVL173>:
  41275a:	4604      	mov	r4, r0

0041275c <.LVL174>:
      if (err == MP_OKAY) {
  41275c:	bb44      	cbnz	r4, 4127b0 <.LVL188>
          if (mp_cmp(&t1, modulus) != MP_LT)
  41275e:	4641      	mov	r1, r8
  412760:	a88c      	add	r0, sp, #560	; 0x230

00412762 <.LVL175>:
  412762:	f00c fbdd 	bl	41ef20 <.LFE66>

00412766 <.LVL176>:
  412766:	f1b0 3fff 	cmp.w	r0, #4294967295
  41276a:	d006      	beq.n	41277a <.LVL179>
              err = mp_sub(&t1, modulus, &t1);
  41276c:	aa8c      	add	r2, sp, #560	; 0x230
  41276e:	4641      	mov	r1, r8
  412770:	4610      	mov	r0, r2
  412772:	f00c fb64 	bl	41ee3e <.LFE71>

00412776 <.LVL177>:
  412776:	4604      	mov	r4, r0

00412778 <.LVL178>:
  412778:	e75c      	b.n	412634 <.LVL126+0x10>

0041277a <.LVL179>:
          err = mp_add(&t1, &t2, &t1);
  41277a:	aa8c      	add	r2, sp, #560	; 0x230
  41277c:	a902      	add	r1, sp, #8
  41277e:	4610      	mov	r0, r2
  412780:	f00c fb58 	bl	41ee34 <.LFE222>

00412784 <.LVL180>:
  412784:	4604      	mov	r4, r0

00412786 <.LVL181>:
      if (err == MP_OKAY) {
  412786:	bb3c      	cbnz	r4, 4127d8 <.LVL195>
          if (mp_cmp(&t1, modulus) != MP_LT)
  412788:	4641      	mov	r1, r8
  41278a:	a88c      	add	r0, sp, #560	; 0x230

0041278c <.LVL182>:
  41278c:	f00c fbc8 	bl	41ef20 <.LFE66>

00412790 <.LVL183>:
  412790:	f1b0 3fff 	cmp.w	r0, #4294967295
  412794:	d006      	beq.n	4127a4 <.LVL186>
              err = mp_sub(&t1, modulus, &t1);
  412796:	aa8c      	add	r2, sp, #560	; 0x230
  412798:	4641      	mov	r1, r8
  41279a:	4610      	mov	r0, r2
  41279c:	f00c fb4f 	bl	41ee3e <.LFE71>

004127a0 <.LVL184>:
  4127a0:	4604      	mov	r4, r0

004127a2 <.LVL185>:
   if (err == MP_OKAY)
  4127a2:	bb0c      	cbnz	r4, 4127e8 <.LVL198>

004127a4 <.LVL186>:
       err = mp_add(y, y, y);
  4127a4:	463a      	mov	r2, r7
  4127a6:	4639      	mov	r1, r7
  4127a8:	4638      	mov	r0, r7
  4127aa:	f00c fb43 	bl	41ee34 <.LFE222>

004127ae <.LVL187>:
  4127ae:	4604      	mov	r4, r0

004127b0 <.LVL188>:
   if (err == MP_OKAY) {
  4127b0:	bb04      	cbnz	r4, 4127f4 <.LVL201>
       if (mp_cmp(y, modulus) != MP_LT)
  4127b2:	4641      	mov	r1, r8
  4127b4:	4638      	mov	r0, r7

004127b6 <.LVL189>:
  4127b6:	f00c fbb3 	bl	41ef20 <.LFE66>

004127ba <.LVL190>:
  4127ba:	f1b0 3fff 	cmp.w	r0, #4294967295
  4127be:	d006      	beq.n	4127ce <.LVL193>
           err = mp_sub(y, modulus, y);
  4127c0:	463a      	mov	r2, r7
  4127c2:	4641      	mov	r1, r8
  4127c4:	4638      	mov	r0, r7
  4127c6:	f00c fb3a 	bl	41ee3e <.LFE71>

004127ca <.LVL191>:
  4127ca:	4604      	mov	r4, r0

004127cc <.LVL192>:
  4127cc:	e735      	b.n	41263a <.LVL126+0x16>

004127ce <.LVL193>:
       err = mp_sqr(y, y);
  4127ce:	4639      	mov	r1, r7
  4127d0:	4638      	mov	r0, r7
  4127d2:	f00c fb57 	bl	41ee84 <.LFE105>

004127d6 <.LVL194>:
  4127d6:	4604      	mov	r4, r0

004127d8 <.LVL195>:
   if (err == MP_OKAY)
  4127d8:	bbac      	cbnz	r4, 412846 <.LVL218>
       err = mp_montgomery_reduce(y, modulus, mp);
  4127da:	f8dd 2478 	ldr.w	r2, [sp, #1144]	; 0x478
  4127de:	4641      	mov	r1, r8
  4127e0:	4638      	mov	r0, r7

004127e2 <.LVL196>:
  4127e2:	f00c fb54 	bl	41ee8e <.LFE110>

004127e6 <.LVL197>:
  4127e6:	4604      	mov	r4, r0

004127e8 <.LVL198>:
   if (err == MP_OKAY)
  4127e8:	b9bc      	cbnz	r4, 41281a <.LVL209>
       err = mp_sqr(y, &t2);
  4127ea:	a902      	add	r1, sp, #8
  4127ec:	4638      	mov	r0, r7

004127ee <.LVL199>:
  4127ee:	f00c fb49 	bl	41ee84 <.LFE105>

004127f2 <.LVL200>:
  4127f2:	4604      	mov	r4, r0

004127f4 <.LVL201>:
   if (err == MP_OKAY)
  4127f4:	b9c4      	cbnz	r4, 412828 <.LVL212>
       err = mp_montgomery_reduce(&t2, modulus, mp);
  4127f6:	f8dd 2478 	ldr.w	r2, [sp, #1144]	; 0x478
  4127fa:	4641      	mov	r1, r8
  4127fc:	a802      	add	r0, sp, #8

004127fe <.LVL202>:
  4127fe:	f00c fb46 	bl	41ee8e <.LFE110>

00412802 <.LVL203>:
  412802:	4604      	mov	r4, r0

00412804 <.LVL204>:
  412804:	e71c      	b.n	412640 <.LVL126+0x1c>
       if (mp_isodd(&t2) == MP_YES)
  412806:	a802      	add	r0, sp, #8

00412808 <.LVL205>:
  412808:	f00c f9fb 	bl	41ec02 <.LFE154>

0041280c <.LVL206>:
  41280c:	2801      	cmp	r0, #1
  41280e:	d014      	beq.n	41283a <.LVL216>

00412810 <.LVL207>:
       err = mp_div_2(&t2, &t2);
  412810:	a902      	add	r1, sp, #8
  412812:	4608      	mov	r0, r1
  412814:	f00c fb40 	bl	41ee98 <.LFE111>

00412818 <.LVL208>:
  412818:	4604      	mov	r4, r0

0041281a <.LVL209>:
   if (err == MP_OKAY)
  41281a:	bb24      	cbnz	r4, 412866 <.LVL224>
       err = mp_mul(y, x, y);
  41281c:	463a      	mov	r2, r7
  41281e:	4629      	mov	r1, r5
  412820:	4638      	mov	r0, r7

00412822 <.LVL210>:
  412822:	f00c fb16 	bl	41ee52 <.LFE86>

00412826 <.LVL211>:
  412826:	4604      	mov	r4, r0

00412828 <.LVL212>:
   if (err == MP_OKAY)
  412828:	bb2c      	cbnz	r4, 412876 <.LVL227>
       err = mp_montgomery_reduce(y, modulus, mp);
  41282a:	f8dd 2478 	ldr.w	r2, [sp, #1144]	; 0x478
  41282e:	4641      	mov	r1, r8
  412830:	4638      	mov	r0, r7

00412832 <.LVL213>:
  412832:	f00c fb2c 	bl	41ee8e <.LFE110>

00412836 <.LVL214>:
  412836:	4604      	mov	r4, r0

00412838 <.LVL215>:
  412838:	e705      	b.n	412646 <.LVL126+0x22>

0041283a <.LVL216>:
           err = mp_add(&t2, modulus, &t2);
  41283a:	aa02      	add	r2, sp, #8
  41283c:	4641      	mov	r1, r8
  41283e:	4610      	mov	r0, r2
  412840:	f00c faf8 	bl	41ee34 <.LFE222>

00412844 <.LVL217>:
  412844:	4604      	mov	r4, r0

00412846 <.LVL218>:
   if (err == MP_OKAY)
  412846:	2c00      	cmp	r4, #0
  412848:	d0e2      	beq.n	412810 <.LVL207>
  41284a:	e004      	b.n	412856 <.LVL221>
       err = mp_sqr(&t1, x);
  41284c:	4629      	mov	r1, r5
  41284e:	a88c      	add	r0, sp, #560	; 0x230

00412850 <.LVL219>:
  412850:	f00c fb18 	bl	41ee84 <.LFE105>

00412854 <.LVL220>:
  412854:	4604      	mov	r4, r0

00412856 <.LVL221>:
   if (err == MP_OKAY)
  412856:	b9c4      	cbnz	r4, 41288a <.LVL230>
       err = mp_montgomery_reduce(x, modulus, mp);
  412858:	f8dd 2478 	ldr.w	r2, [sp, #1144]	; 0x478
  41285c:	4641      	mov	r1, r8
  41285e:	4628      	mov	r0, r5

00412860 <.LVL222>:
  412860:	f00c fb15 	bl	41ee8e <.LFE110>

00412864 <.LVL223>:
  412864:	4604      	mov	r4, r0

00412866 <.LVL224>:
   if (err == MP_OKAY)
  412866:	2c00      	cmp	r4, #0
  412868:	d151      	bne.n	41290e <.LVL251>
       err = mp_sub(x, y, x);
  41286a:	462a      	mov	r2, r5
  41286c:	4639      	mov	r1, r7
  41286e:	4628      	mov	r0, r5

00412870 <.LVL225>:
  412870:	f00c fae5 	bl	41ee3e <.LFE71>

00412874 <.LVL226>:
  412874:	4604      	mov	r4, r0

00412876 <.LVL227>:
   if (err == MP_OKAY) {
  412876:	b98c      	cbnz	r4, 41289c <.LVL233>
       if (mp_isneg(x))
  412878:	686b      	ldr	r3, [r5, #4]
  41287a:	2b00      	cmp	r3, #0
  41287c:	d13a      	bne.n	4128f4 <.LVL245+0x2>

0041287e <.LVL228>:
       err = mp_sub(x, y, x);
  41287e:	462a      	mov	r2, r5
  412880:	4639      	mov	r1, r7
  412882:	4628      	mov	r0, r5
  412884:	f00c fadb 	bl	41ee3e <.LFE71>

00412888 <.LVL229>:
  412888:	4604      	mov	r4, r0

0041288a <.LVL230>:
   if (err == MP_OKAY) {
  41288a:	b98c      	cbnz	r4, 4128b0 <.LVL236>
       if (mp_isneg(x))
  41288c:	686b      	ldr	r3, [r5, #4]
  41288e:	bbc3      	cbnz	r3, 412902 <.LVL248+0x2>

00412890 <.LVL231>:
       err = mp_sub(y, x, y);
  412890:	463a      	mov	r2, r7
  412892:	4629      	mov	r1, r5
  412894:	4638      	mov	r0, r7
  412896:	f00c fad2 	bl	41ee3e <.LFE71>

0041289a <.LVL232>:
  41289a:	4604      	mov	r4, r0

0041289c <.LVL233>:
   if (err == MP_OKAY) {
  41289c:	b9dc      	cbnz	r4, 4128d6 <.LVL242>
       if (mp_isneg(y))
  41289e:	f8d5 322c 	ldr.w	r3, [r5, #556]	; 0x22c
  4128a2:	bbbb      	cbnz	r3, 412914 <.LVL251+0x6>

004128a4 <.LVL234>:
       err = mp_mul(y, &t1, y);
  4128a4:	463a      	mov	r2, r7
  4128a6:	a98c      	add	r1, sp, #560	; 0x230
  4128a8:	4638      	mov	r0, r7
  4128aa:	f00c fad2 	bl	41ee52 <.LFE86>

004128ae <.LVL235>:
  4128ae:	4604      	mov	r4, r0

004128b0 <.LVL236>:
   if (err == MP_OKAY)
  4128b0:	2c00      	cmp	r4, #0
  4128b2:	f47f aed1 	bne.w	412658 <.LVL127>
       err = mp_montgomery_reduce(y, modulus, mp);
  4128b6:	f8dd 2478 	ldr.w	r2, [sp, #1144]	; 0x478
  4128ba:	4641      	mov	r1, r8
  4128bc:	4638      	mov	r0, r7

004128be <.LVL237>:
  4128be:	f00c fae6 	bl	41ee8e <.LFE110>

004128c2 <.LVL238>:
  4128c2:	4604      	mov	r4, r0

004128c4 <.LVL239>:
   if (err == MP_OKAY)
  4128c4:	2c00      	cmp	r4, #0
  4128c6:	f47f aec7 	bne.w	412658 <.LVL127>
       err = mp_sub(y, &t2, y);
  4128ca:	463a      	mov	r2, r7
  4128cc:	a902      	add	r1, sp, #8
  4128ce:	4638      	mov	r0, r7

004128d0 <.LVL240>:
  4128d0:	f00c fab5 	bl	41ee3e <.LFE71>

004128d4 <.LVL241>:
  4128d4:	4604      	mov	r4, r0

004128d6 <.LVL242>:
   if (err == MP_OKAY) {
  4128d6:	2c00      	cmp	r4, #0
  4128d8:	f47f aebe 	bne.w	412658 <.LVL127>
       if (mp_isneg(y))
  4128dc:	f8d5 422c 	ldr.w	r4, [r5, #556]	; 0x22c
  4128e0:	2c00      	cmp	r4, #0
  4128e2:	f43f aeb9 	beq.w	412658 <.LVL127>
           err = mp_add(y, modulus, y);
  4128e6:	463a      	mov	r2, r7
  4128e8:	4641      	mov	r1, r8
  4128ea:	4638      	mov	r0, r7

004128ec <.LVL243>:
  4128ec:	f00c faa2 	bl	41ee34 <.LFE222>

004128f0 <.LVL244>:
  4128f0:	4604      	mov	r4, r0

004128f2 <.LVL245>:
  4128f2:	e6b1      	b.n	412658 <.LVL127>
           err = mp_add(x, modulus, x);
  4128f4:	462a      	mov	r2, r5
  4128f6:	4641      	mov	r1, r8
  4128f8:	4628      	mov	r0, r5

004128fa <.LVL246>:
  4128fa:	f00c fa9b 	bl	41ee34 <.LFE222>

004128fe <.LVL247>:
  4128fe:	4604      	mov	r4, r0

00412900 <.LVL248>:
  412900:	e6a4      	b.n	41264c <.LVL126+0x28>
           err = mp_add(x, modulus, x);
  412902:	462a      	mov	r2, r5
  412904:	4641      	mov	r1, r8
  412906:	4628      	mov	r0, r5

00412908 <.LVL249>:
  412908:	f00c fa94 	bl	41ee34 <.LFE222>

0041290c <.LVL250>:
  41290c:	4604      	mov	r4, r0

0041290e <.LVL251>:
   if (err == MP_OKAY)
  41290e:	2c00      	cmp	r4, #0
  412910:	d1d8      	bne.n	4128c4 <.LVL239>
  412912:	e7bd      	b.n	412890 <.LVL231>
           err = mp_add(y, modulus, y);
  412914:	463a      	mov	r2, r7
  412916:	4641      	mov	r1, r8
  412918:	4638      	mov	r0, r7

0041291a <.LVL252>:
  41291a:	f00c fa8b 	bl	41ee34 <.LFE222>

0041291e <.LVL253>:
  41291e:	4604      	mov	r4, r0

00412920 <.LVL254>:
  412920:	e697      	b.n	412652 <.LVL126+0x2e>

00412922 <.LVL255>:
       return ECC_BAD_ARG_E;
  412922:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
  412926:	e670      	b.n	41260a <.LVL121>

Disassembly of section .text._realloc_r%92:

00412928 <_realloc_r>:
  412928:	2900      	cmp	r1, #0
  41292a:	f000 8095 	beq.w	412a58 <.LCFI6>
  41292e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00412932 <.LCFI0>:
  412932:	460d      	mov	r5, r1
  412934:	4616      	mov	r6, r2
  412936:	b083      	sub	sp, #12

00412938 <.LCFI1>:
  412938:	4680      	mov	r8, r0
  41293a:	f106 070b 	add.w	r7, r6, #11
  41293e:	f00b fd09 	bl	41e354 <.LFE141>

00412942 <.LVL1>:
  412942:	f855 ec04 	ldr.w	lr, [r5, #-4]
  412946:	2f16      	cmp	r7, #22
  412948:	f02e 0403 	bic.w	r4, lr, #3
  41294c:	f1a5 0908 	sub.w	r9, r5, #8

00412950 <.LVL2>:
  412950:	d83c      	bhi.n	4129cc <.LVL18>
  412952:	2210      	movs	r2, #16
  412954:	4617      	mov	r7, r2

00412956 <.LVL3>:
  412956:	42be      	cmp	r6, r7
  412958:	d83d      	bhi.n	4129d6 <.LVL19+0x6>
  41295a:	4294      	cmp	r4, r2
  41295c:	da43      	bge.n	4129e6 <.LCFI3>
  41295e:	4bc4      	ldr	r3, [pc, #784]	; (412c70 <.LVL142+0x2>)
  412960:	6899      	ldr	r1, [r3, #8]
  412962:	eb09 0004 	add.w	r0, r9, r4

00412966 <.LVL4>:
  412966:	4288      	cmp	r0, r1
  412968:	f000 80b4 	beq.w	412ad4 <.LVL65>
  41296c:	6843      	ldr	r3, [r0, #4]
  41296e:	f023 0101 	bic.w	r1, r3, #1
  412972:	4401      	add	r1, r0
  412974:	6849      	ldr	r1, [r1, #4]
  412976:	07c9      	lsls	r1, r1, #31
  412978:	d54c      	bpl.n	412a14 <.LCFI5>

0041297a <.LVL5>:
  41297a:	f01e 0f01 	tst.w	lr, #1
  41297e:	f000 809b 	beq.w	412ab8 <.LBE12>

00412982 <.LVL6>:
  412982:	4631      	mov	r1, r6
  412984:	4640      	mov	r0, r8
  412986:	f7fb fae7 	bl	40df58 <.LFE174>

0041298a <.LVL7>:
  41298a:	4606      	mov	r6, r0

0041298c <.LVL8>:
  41298c:	2800      	cmp	r0, #0
  41298e:	d03a      	beq.n	412a06 <.LVL26>

00412990 <.LVL9>:
  412990:	f855 3c04 	ldr.w	r3, [r5, #-4]
  412994:	f023 0301 	bic.w	r3, r3, #1
  412998:	444b      	add	r3, r9
  41299a:	f1a0 0208 	sub.w	r2, r0, #8

0041299e <.LVL10>:
  41299e:	429a      	cmp	r2, r3
  4129a0:	f000 8121 	beq.w	412be6 <.LBE24>

004129a4 <.LBB2>:
  4129a4:	1f22      	subs	r2, r4, #4

004129a6 <.LVL11>:
  4129a6:	2a24      	cmp	r2, #36	; 0x24
  4129a8:	f200 8107 	bhi.w	412bba <.LBB21>

004129ac <.LBB3>:
  4129ac:	2a13      	cmp	r2, #19
  4129ae:	f200 80db 	bhi.w	412b68 <.LBB18>
  4129b2:	4603      	mov	r3, r0
  4129b4:	462a      	mov	r2, r5

004129b6 <.LVL13>:
  4129b6:	6811      	ldr	r1, [r2, #0]
  4129b8:	6019      	str	r1, [r3, #0]

004129ba <.LVL14>:
  4129ba:	6851      	ldr	r1, [r2, #4]
  4129bc:	6059      	str	r1, [r3, #4]
  4129be:	6892      	ldr	r2, [r2, #8]

004129c0 <.LVL15>:
  4129c0:	609a      	str	r2, [r3, #8]

004129c2 <.LBE2>:
  4129c2:	4629      	mov	r1, r5
  4129c4:	4640      	mov	r0, r8
  4129c6:	f002 fe6f 	bl	4156a8 <_free_r>

004129ca <.LVL17>:
  4129ca:	e01c      	b.n	412a06 <.LVL26>

004129cc <.LVL18>:
  4129cc:	f027 0707 	bic.w	r7, r7, #7

004129d0 <.LVL19>:
  4129d0:	2f00      	cmp	r7, #0
  4129d2:	463a      	mov	r2, r7
  4129d4:	dabf      	bge.n	412956 <.LVL3>
  4129d6:	2600      	movs	r6, #0

004129d8 <.LVL20>:
  4129d8:	230c      	movs	r3, #12
  4129da:	4630      	mov	r0, r6
  4129dc:	f8c8 3000 	str.w	r3, [r8]
  4129e0:	b003      	add	sp, #12

004129e2 <.LCFI2>:
  4129e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004129e6 <.LCFI3>:
  4129e6:	462e      	mov	r6, r5

004129e8 <.L11>:
  4129e8:	1be3      	subs	r3, r4, r7

004129ea <.LVL23>:
  4129ea:	2b0f      	cmp	r3, #15
  4129ec:	d81e      	bhi.n	412a2c <.LVL35>
  4129ee:	f8d9 3004 	ldr.w	r3, [r9, #4]

004129f2 <.LVL24>:
  4129f2:	f003 0301 	and.w	r3, r3, #1
  4129f6:	4323      	orrs	r3, r4
  4129f8:	444c      	add	r4, r9

004129fa <.LVL25>:
  4129fa:	f8c9 3004 	str.w	r3, [r9, #4]
  4129fe:	6863      	ldr	r3, [r4, #4]
  412a00:	f043 0301 	orr.w	r3, r3, #1
  412a04:	6063      	str	r3, [r4, #4]

00412a06 <.LVL26>:
  412a06:	4640      	mov	r0, r8
  412a08:	f00c fac6 	bl	41ef98 <__malloc_unlock>

00412a0c <.LVL27>:
  412a0c:	4630      	mov	r0, r6
  412a0e:	b003      	add	sp, #12

00412a10 <.LCFI4>:
  412a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00412a14 <.LCFI5>:
  412a14:	f023 0303 	bic.w	r3, r3, #3

00412a18 <.LVL29>:
  412a18:	18e1      	adds	r1, r4, r3
  412a1a:	4291      	cmp	r1, r2
  412a1c:	db1f      	blt.n	412a5e <.LCFI7>
  412a1e:	68c3      	ldr	r3, [r0, #12]

00412a20 <.LVL30>:
  412a20:	6882      	ldr	r2, [r0, #8]

00412a22 <.LVL31>:
  412a22:	462e      	mov	r6, r5

00412a24 <.LVL32>:
  412a24:	60d3      	str	r3, [r2, #12]
  412a26:	460c      	mov	r4, r1

00412a28 <.LVL33>:
  412a28:	609a      	str	r2, [r3, #8]

00412a2a <.LVL34>:
  412a2a:	e7dd      	b.n	4129e8 <.L11>

00412a2c <.LVL35>:
  412a2c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  412a30:	eb09 0107 	add.w	r1, r9, r7

00412a34 <.LVL36>:
  412a34:	f002 0201 	and.w	r2, r2, #1
  412a38:	444c      	add	r4, r9

00412a3a <.LVL37>:
  412a3a:	f043 0301 	orr.w	r3, r3, #1

00412a3e <.LVL38>:
  412a3e:	4317      	orrs	r7, r2

00412a40 <.LVL39>:
  412a40:	f8c9 7004 	str.w	r7, [r9, #4]
  412a44:	604b      	str	r3, [r1, #4]
  412a46:	6863      	ldr	r3, [r4, #4]
  412a48:	f043 0301 	orr.w	r3, r3, #1
  412a4c:	3108      	adds	r1, #8

00412a4e <.LVL40>:
  412a4e:	6063      	str	r3, [r4, #4]
  412a50:	4640      	mov	r0, r8
  412a52:	f002 fe29 	bl	4156a8 <_free_r>

00412a56 <.LVL41>:
  412a56:	e7d6      	b.n	412a06 <.LVL26>

00412a58 <.LCFI6>:
  412a58:	4611      	mov	r1, r2

00412a5a <.LVL43>:
  412a5a:	f7fb ba7d 	b.w	40df58 <.LFE174>

00412a5e <.LCFI7>:
  412a5e:	f01e 0f01 	tst.w	lr, #1
  412a62:	d18e      	bne.n	412982 <.LVL6>
  412a64:	f855 1c08 	ldr.w	r1, [r5, #-8]
  412a68:	eba9 0a01 	sub.w	sl, r9, r1

00412a6c <.LVL45>:
  412a6c:	f8da 1004 	ldr.w	r1, [sl, #4]
  412a70:	f021 0103 	bic.w	r1, r1, #3

00412a74 <.LVL46>:
  412a74:	440b      	add	r3, r1

00412a76 <.LVL47>:
  412a76:	4423      	add	r3, r4
  412a78:	4293      	cmp	r3, r2
  412a7a:	db25      	blt.n	412ac8 <.LVL63>
  412a7c:	68c2      	ldr	r2, [r0, #12]

00412a7e <.LVL48>:
  412a7e:	6881      	ldr	r1, [r0, #8]

00412a80 <.LVL49>:
  412a80:	4656      	mov	r6, sl

00412a82 <.LVL50>:
  412a82:	60ca      	str	r2, [r1, #12]
  412a84:	6091      	str	r1, [r2, #8]

00412a86 <.LVL51>:
  412a86:	f8da 100c 	ldr.w	r1, [sl, #12]

00412a8a <.LVL52>:
  412a8a:	f856 0f08 	ldr.w	r0, [r6, #8]!

00412a8e <.LBB7>:
  412a8e:	1f22      	subs	r2, r4, #4
  412a90:	2a24      	cmp	r2, #36	; 0x24

00412a92 <.LBE7>:
  412a92:	60c1      	str	r1, [r0, #12]
  412a94:	6088      	str	r0, [r1, #8]

00412a96 <.LBB12>:
  412a96:	f200 8094 	bhi.w	412bc2 <.LBB22>

00412a9a <.LBB8>:
  412a9a:	2a13      	cmp	r2, #19
  412a9c:	d96f      	bls.n	412b7e <.LBB19>

00412a9e <.LVL56>:
  412a9e:	6829      	ldr	r1, [r5, #0]

00412aa0 <.LVL57>:
  412aa0:	f8ca 1008 	str.w	r1, [sl, #8]

00412aa4 <.LVL58>:
  412aa4:	6869      	ldr	r1, [r5, #4]
  412aa6:	f8ca 100c 	str.w	r1, [sl, #12]
  412aaa:	2a1b      	cmp	r2, #27
  412aac:	f200 80a2 	bhi.w	412bf4 <.LBB10>
  412ab0:	3508      	adds	r5, #8

00412ab2 <.LVL59>:
  412ab2:	f10a 0210 	add.w	r2, sl, #16

00412ab6 <.LVL60>:
  412ab6:	e063      	b.n	412b80 <.LVL92>

00412ab8 <.LBE12>:
  412ab8:	f855 3c08 	ldr.w	r3, [r5, #-8]
  412abc:	eba9 0a03 	sub.w	sl, r9, r3

00412ac0 <.LVL62>:
  412ac0:	f8da 1004 	ldr.w	r1, [sl, #4]
  412ac4:	f021 0103 	bic.w	r1, r1, #3

00412ac8 <.LVL63>:
  412ac8:	1863      	adds	r3, r4, r1
  412aca:	4293      	cmp	r3, r2
  412acc:	f6ff af59 	blt.w	412982 <.LVL6>
  412ad0:	4656      	mov	r6, sl

00412ad2 <.LVL64>:
  412ad2:	e7d8      	b.n	412a86 <.LVL51>

00412ad4 <.LVL65>:
  412ad4:	6841      	ldr	r1, [r0, #4]
  412ad6:	f021 0b03 	bic.w	fp, r1, #3

00412ada <.LVL66>:
  412ada:	44a3      	add	fp, r4

00412adc <.LVL67>:
  412adc:	f107 0010 	add.w	r0, r7, #16

00412ae0 <.LVL68>:
  412ae0:	4583      	cmp	fp, r0
  412ae2:	da56      	bge.n	412b92 <.LBE20>

00412ae4 <.LVL69>:
  412ae4:	f01e 0f01 	tst.w	lr, #1
  412ae8:	f47f af4b 	bne.w	412982 <.LVL6>
  412aec:	f855 1c08 	ldr.w	r1, [r5, #-8]

00412af0 <.LVL70>:
  412af0:	eba9 0a01 	sub.w	sl, r9, r1

00412af4 <.LVL71>:
  412af4:	f8da 1004 	ldr.w	r1, [sl, #4]
  412af8:	f021 0103 	bic.w	r1, r1, #3

00412afc <.LVL72>:
  412afc:	448b      	add	fp, r1
  412afe:	4558      	cmp	r0, fp
  412b00:	dce2      	bgt.n	412ac8 <.LVL63>
  412b02:	4656      	mov	r6, sl

00412b04 <.LVL73>:
  412b04:	f8da 100c 	ldr.w	r1, [sl, #12]

00412b08 <.LVL74>:
  412b08:	f856 0f08 	ldr.w	r0, [r6, #8]!

00412b0c <.LBB13>:
  412b0c:	1f22      	subs	r2, r4, #4
  412b0e:	2a24      	cmp	r2, #36	; 0x24

00412b10 <.LBE13>:
  412b10:	60c1      	str	r1, [r0, #12]
  412b12:	6088      	str	r0, [r1, #8]

00412b14 <.LBB17>:
  412b14:	f200 808f 	bhi.w	412c36 <.LBE15>

00412b18 <.LBB14>:
  412b18:	2a13      	cmp	r2, #19
  412b1a:	f240 808a 	bls.w	412c32 <.LBB15>

00412b1e <.LVL78>:
  412b1e:	6829      	ldr	r1, [r5, #0]

00412b20 <.LVL79>:
  412b20:	f8ca 1008 	str.w	r1, [sl, #8]

00412b24 <.LVL80>:
  412b24:	6869      	ldr	r1, [r5, #4]
  412b26:	f8ca 100c 	str.w	r1, [sl, #12]
  412b2a:	2a1b      	cmp	r2, #27
  412b2c:	f200 808a 	bhi.w	412c44 <.LBB16>
  412b30:	3508      	adds	r5, #8

00412b32 <.LVL81>:
  412b32:	f10a 0210 	add.w	r2, sl, #16

00412b36 <.LVL82>:
  412b36:	6829      	ldr	r1, [r5, #0]
  412b38:	6011      	str	r1, [r2, #0]

00412b3a <.LVL83>:
  412b3a:	6869      	ldr	r1, [r5, #4]
  412b3c:	6051      	str	r1, [r2, #4]
  412b3e:	68a9      	ldr	r1, [r5, #8]
  412b40:	6091      	str	r1, [r2, #8]

00412b42 <.LBE14>:
  412b42:	eb0a 0107 	add.w	r1, sl, r7
  412b46:	ebab 0207 	sub.w	r2, fp, r7
  412b4a:	f042 0201 	orr.w	r2, r2, #1
  412b4e:	6099      	str	r1, [r3, #8]
  412b50:	604a      	str	r2, [r1, #4]
  412b52:	f8da 3004 	ldr.w	r3, [sl, #4]
  412b56:	f003 0301 	and.w	r3, r3, #1
  412b5a:	431f      	orrs	r7, r3

00412b5c <.LVL85>:
  412b5c:	4640      	mov	r0, r8
  412b5e:	f8ca 7004 	str.w	r7, [sl, #4]
  412b62:	f00c fa19 	bl	41ef98 <__malloc_unlock>

00412b66 <.LVL86>:
  412b66:	e751      	b.n	412a0c <.LVL27>

00412b68 <.LBB18>:
  412b68:	682b      	ldr	r3, [r5, #0]
  412b6a:	6003      	str	r3, [r0, #0]

00412b6c <.LVL88>:
  412b6c:	686b      	ldr	r3, [r5, #4]
  412b6e:	6043      	str	r3, [r0, #4]
  412b70:	2a1b      	cmp	r2, #27
  412b72:	d82d      	bhi.n	412bd0 <.LBB24>
  412b74:	f100 0308 	add.w	r3, r0, #8

00412b78 <.LVL89>:
  412b78:	f105 0208 	add.w	r2, r5, #8

00412b7c <.LVL90>:
  412b7c:	e71b      	b.n	4129b6 <.LVL13>

00412b7e <.LBB19>:
  412b7e:	4632      	mov	r2, r6

00412b80 <.LVL92>:
  412b80:	6829      	ldr	r1, [r5, #0]
  412b82:	6011      	str	r1, [r2, #0]

00412b84 <.LVL93>:
  412b84:	6869      	ldr	r1, [r5, #4]
  412b86:	6051      	str	r1, [r2, #4]
  412b88:	68a9      	ldr	r1, [r5, #8]
  412b8a:	6091      	str	r1, [r2, #8]

00412b8c <.LBE19>:
  412b8c:	461c      	mov	r4, r3

00412b8e <.LBB20>:
  412b8e:	46d1      	mov	r9, sl

00412b90 <.LVL95>:
  412b90:	e72a      	b.n	4129e8 <.L11>

00412b92 <.LBE20>:
  412b92:	eb09 0107 	add.w	r1, r9, r7

00412b96 <.LVL97>:
  412b96:	ebab 0b07 	sub.w	fp, fp, r7

00412b9a <.LVL98>:
  412b9a:	f04b 0201 	orr.w	r2, fp, #1
  412b9e:	6099      	str	r1, [r3, #8]
  412ba0:	604a      	str	r2, [r1, #4]

00412ba2 <.LVL99>:
  412ba2:	f855 3c04 	ldr.w	r3, [r5, #-4]
  412ba6:	f003 0301 	and.w	r3, r3, #1
  412baa:	431f      	orrs	r7, r3

00412bac <.LVL100>:
  412bac:	4640      	mov	r0, r8

00412bae <.LVL101>:
  412bae:	f845 7c04 	str.w	r7, [r5, #-4]
  412bb2:	f00c f9f1 	bl	41ef98 <__malloc_unlock>

00412bb6 <.LVL102>:
  412bb6:	462e      	mov	r6, r5

00412bb8 <.LVL103>:
  412bb8:	e728      	b.n	412a0c <.LVL27>

00412bba <.LBB21>:
  412bba:	4629      	mov	r1, r5
  412bbc:	f006 f9b8 	bl	418f30 <.LFE155>

00412bc0 <.LVL105>:
  412bc0:	e6ff      	b.n	4129c2 <.LBE2>

00412bc2 <.LBB22>:
  412bc2:	4629      	mov	r1, r5

00412bc4 <.LVL107>:
  412bc4:	4630      	mov	r0, r6

00412bc6 <.LBE22>:
  412bc6:	461c      	mov	r4, r3

00412bc8 <.LBB23>:
  412bc8:	46d1      	mov	r9, sl

00412bca <.LVL110>:
  412bca:	f006 f9b1 	bl	418f30 <.LFE155>

00412bce <.LVL111>:
  412bce:	e70b      	b.n	4129e8 <.L11>

00412bd0 <.LBB24>:
  412bd0:	68ab      	ldr	r3, [r5, #8]
  412bd2:	6083      	str	r3, [r0, #8]

00412bd4 <.LVL113>:
  412bd4:	68eb      	ldr	r3, [r5, #12]
  412bd6:	60c3      	str	r3, [r0, #12]
  412bd8:	2a24      	cmp	r2, #36	; 0x24
  412bda:	d017      	beq.n	412c0c <.LBB26>
  412bdc:	f100 0310 	add.w	r3, r0, #16

00412be0 <.LVL114>:
  412be0:	f105 0210 	add.w	r2, r5, #16

00412be4 <.LVL115>:
  412be4:	e6e7      	b.n	4129b6 <.LVL13>

00412be6 <.LBE24>:
  412be6:	f850 3c04 	ldr.w	r3, [r0, #-4]
  412bea:	f023 0303 	bic.w	r3, r3, #3
  412bee:	441c      	add	r4, r3

00412bf0 <.LVL117>:
  412bf0:	462e      	mov	r6, r5
  412bf2:	e6f9      	b.n	4129e8 <.L11>

00412bf4 <.LBB10>:
  412bf4:	68a9      	ldr	r1, [r5, #8]
  412bf6:	f8ca 1010 	str.w	r1, [sl, #16]

00412bfa <.LVL119>:
  412bfa:	68e9      	ldr	r1, [r5, #12]
  412bfc:	f8ca 1014 	str.w	r1, [sl, #20]
  412c00:	2a24      	cmp	r2, #36	; 0x24
  412c02:	d00c      	beq.n	412c1e <.LBB11>
  412c04:	3510      	adds	r5, #16

00412c06 <.LVL120>:
  412c06:	f10a 0218 	add.w	r2, sl, #24

00412c0a <.LVL121>:
  412c0a:	e7b9      	b.n	412b80 <.LVL92>

00412c0c <.LBB26>:
  412c0c:	692b      	ldr	r3, [r5, #16]
  412c0e:	6103      	str	r3, [r0, #16]
  412c10:	696b      	ldr	r3, [r5, #20]
  412c12:	6143      	str	r3, [r0, #20]
  412c14:	f105 0218 	add.w	r2, r5, #24

00412c18 <.LVL123>:
  412c18:	f100 0318 	add.w	r3, r0, #24

00412c1c <.LVL124>:
  412c1c:	e6cb      	b.n	4129b6 <.LVL13>

00412c1e <.LBB11>:
  412c1e:	692a      	ldr	r2, [r5, #16]

00412c20 <.LVL126>:
  412c20:	f8ca 2018 	str.w	r2, [sl, #24]
  412c24:	696a      	ldr	r2, [r5, #20]
  412c26:	f8ca 201c 	str.w	r2, [sl, #28]
  412c2a:	3518      	adds	r5, #24

00412c2c <.LVL127>:
  412c2c:	f10a 0220 	add.w	r2, sl, #32

00412c30 <.LVL128>:
  412c30:	e7a6      	b.n	412b80 <.LVL92>

00412c32 <.LBB15>:
  412c32:	4632      	mov	r2, r6

00412c34 <.LVL130>:
  412c34:	e77f      	b.n	412b36 <.LVL82>

00412c36 <.LBE15>:
  412c36:	4629      	mov	r1, r5

00412c38 <.LVL132>:
  412c38:	4630      	mov	r0, r6

00412c3a <.LVL133>:
  412c3a:	9301      	str	r3, [sp, #4]
  412c3c:	f006 f978 	bl	418f30 <.LFE155>

00412c40 <.LVL134>:
  412c40:	9b01      	ldr	r3, [sp, #4]
  412c42:	e77e      	b.n	412b42 <.LBE14>

00412c44 <.LBB16>:
  412c44:	68a9      	ldr	r1, [r5, #8]
  412c46:	f8ca 1010 	str.w	r1, [sl, #16]

00412c4a <.LVL136>:
  412c4a:	68e9      	ldr	r1, [r5, #12]
  412c4c:	f8ca 1014 	str.w	r1, [sl, #20]
  412c50:	2a24      	cmp	r2, #36	; 0x24
  412c52:	d003      	beq.n	412c5c <.LVL139>
  412c54:	3510      	adds	r5, #16

00412c56 <.LVL137>:
  412c56:	f10a 0218 	add.w	r2, sl, #24

00412c5a <.LVL138>:
  412c5a:	e76c      	b.n	412b36 <.LVL82>

00412c5c <.LVL139>:
  412c5c:	692a      	ldr	r2, [r5, #16]

00412c5e <.LVL140>:
  412c5e:	f8ca 2018 	str.w	r2, [sl, #24]
  412c62:	696a      	ldr	r2, [r5, #20]
  412c64:	f8ca 201c 	str.w	r2, [sl, #28]
  412c68:	3518      	adds	r5, #24

00412c6a <.LVL141>:
  412c6a:	f10a 0220 	add.w	r2, sl, #32

00412c6e <.LVL142>:
  412c6e:	e762      	b.n	412b36 <.LVL82>
  412c70:	20416c80 	.word	0x20416c80

Disassembly of section .text.compress_block%93:

00412c74 <compress_block>:
{
  412c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00412c78 <.LCFI7>:
  412c78:	b083      	sub	sp, #12

00412c7a <.LCFI8>:
  412c7a:	9201      	str	r2, [sp, #4]

00412c7c <.LVL120>:
    if (s->last_lit != 0) do {
  412c7c:	f500 53b5 	add.w	r3, r0, #5792	; 0x16a0
  412c80:	681b      	ldr	r3, [r3, #0]
  412c82:	2b00      	cmp	r3, #0
  412c84:	f000 8153 	beq.w	412f2e <.LBB44>
  412c88:	2400      	movs	r4, #0
        dist = s->d_buf[lx];
  412c8a:	f241 6ba4 	movw	fp, #5796	; 0x16a4
  412c8e:	4483      	add	fp, r0
        lc = s->l_buf[lx++];
  412c90:	f241 6a98 	movw	sl, #5784	; 0x1698
  412c94:	4482      	add	sl, r0

00412c96 <.LBB28>:
            send_code(s, code+LITERALS+1, ltree); /* send the length code */
  412c96:	f241 66bc 	movw	r6, #5820	; 0x16bc
  412c9a:	4406      	add	r6, r0

00412c9c <.LBE28>:
            code = d_code(dist);
  412c9c:	9100      	str	r1, [sp, #0]
  412c9e:	e011      	b.n	412cc4 <.LVL125>

00412ca0 <.LBB30>:
            send_code(s, lc, ltree); /* send a literal byte */
  412ca0:	f241 64b8 	movw	r4, #5816	; 0x16b8
  412ca4:	9900      	ldr	r1, [sp, #0]
  412ca6:	f831 2022 	ldrh.w	r2, [r1, r2, lsl #2]

00412caa <.LVL122>:
  412caa:	409a      	lsls	r2, r3
  412cac:	5b07      	ldrh	r7, [r0, r4]
  412cae:	433a      	orrs	r2, r7
  412cb0:	5302      	strh	r2, [r0, r4]

00412cb2 <.LVL123>:
  412cb2:	442b      	add	r3, r5
  412cb4:	6033      	str	r3, [r6, #0]

00412cb6 <.LBE30>:
        lc = s->l_buf[lx++];
  412cb6:	464c      	mov	r4, r9
    } while (lx < s->last_lit);
  412cb8:	f500 53b5 	add.w	r3, r0, #5792	; 0x16a0
  412cbc:	681b      	ldr	r3, [r3, #0]
  412cbe:	4599      	cmp	r9, r3
  412cc0:	f080 8134 	bcs.w	412f2c <.LVL176>

00412cc4 <.LVL125>:
        dist = s->d_buf[lx];
  412cc4:	f8db 3000 	ldr.w	r3, [fp]
  412cc8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]

00412ccc <.LVL126>:
        lc = s->l_buf[lx++];
  412ccc:	f104 0901 	add.w	r9, r4, #1

00412cd0 <.LVL127>:
  412cd0:	f8da 2000 	ldr.w	r2, [sl]
  412cd4:	5d12      	ldrb	r2, [r2, r4]

00412cd6 <.LVL128>:
        if (dist == 0) {
  412cd6:	bb53      	cbnz	r3, 412d2e <.LBE32>

00412cd8 <.LBB32>:
            send_code(s, lc, ltree); /* send a literal byte */
  412cd8:	9900      	ldr	r1, [sp, #0]
  412cda:	eb01 0382 	add.w	r3, r1, r2, lsl #2

00412cde <.LVL129>:
  412cde:	885d      	ldrh	r5, [r3, #2]

00412ce0 <.LVL130>:
  412ce0:	6833      	ldr	r3, [r6, #0]
  412ce2:	f1c5 0410 	rsb	r4, r5, #16

00412ce6 <.LVL131>:
  412ce6:	42a3      	cmp	r3, r4
  412ce8:	ddda      	ble.n	412ca0 <.LBB30>

00412cea <.LBB31>:
  412cea:	f831 e022 	ldrh.w	lr, [r1, r2, lsl #2]

00412cee <.LVL132>:
  412cee:	f241 67b8 	movw	r7, #5816	; 0x16b8
  412cf2:	fa0e f403 	lsl.w	r4, lr, r3
  412cf6:	5bc3      	ldrh	r3, [r0, r7]
  412cf8:	431c      	orrs	r4, r3
  412cfa:	b224      	sxth	r4, r4
  412cfc:	53c4      	strh	r4, [r0, r7]

00412cfe <.LVL133>:
  412cfe:	6943      	ldr	r3, [r0, #20]
  412d00:	1c5a      	adds	r2, r3, #1

00412d02 <.LVL134>:
  412d02:	6142      	str	r2, [r0, #20]
  412d04:	6882      	ldr	r2, [r0, #8]
  412d06:	54d4      	strb	r4, [r2, r3]
  412d08:	6882      	ldr	r2, [r0, #8]
  412d0a:	6944      	ldr	r4, [r0, #20]
  412d0c:	1c63      	adds	r3, r4, #1
  412d0e:	6143      	str	r3, [r0, #20]
  412d10:	5bc3      	ldrh	r3, [r0, r7]
  412d12:	0a1b      	lsrs	r3, r3, #8
  412d14:	5513      	strb	r3, [r2, r4]
  412d16:	6832      	ldr	r2, [r6, #0]
  412d18:	f1c2 0310 	rsb	r3, r2, #16
  412d1c:	fa4e fe03 	asr.w	lr, lr, r3

00412d20 <.LVL135>:
  412d20:	f820 e007 	strh.w	lr, [r0, r7]
  412d24:	f1a5 0310 	sub.w	r3, r5, #16
  412d28:	4413      	add	r3, r2
  412d2a:	6033      	str	r3, [r6, #0]

00412d2c <.LBE31>:
  412d2c:	e7c3      	b.n	412cb6 <.LBE30>

00412d2e <.LBE32>:
            code = _length_code[lc];
  412d2e:	4c9c      	ldr	r4, [pc, #624]	; (412fa0 <.LBE45+0x2>)
  412d30:	f814 e002 	ldrb.w	lr, [r4, r2]

00412d34 <.LBB33>:
            send_code(s, code+LITERALS+1, ltree); /* send the length code */
  412d34:	f20e 1701 	addw	r7, lr, #257	; 0x101
  412d38:	9900      	ldr	r1, [sp, #0]
  412d3a:	eb01 0487 	add.w	r4, r1, r7, lsl #2
  412d3e:	8865      	ldrh	r5, [r4, #2]

00412d40 <.LVL138>:
  412d40:	6834      	ldr	r4, [r6, #0]
  412d42:	f1c5 0c10 	rsb	ip, r5, #16
  412d46:	4564      	cmp	r4, ip
  412d48:	f340 80b6 	ble.w	412eb8 <.LBB40>

00412d4c <.LBB29>:
  412d4c:	f831 8027 	ldrh.w	r8, [r1, r7, lsl #2]

00412d50 <.LVL139>:
  412d50:	f241 6cb8 	movw	ip, #5816	; 0x16b8
  412d54:	fa08 f404 	lsl.w	r4, r8, r4
  412d58:	f830 700c 	ldrh.w	r7, [r0, ip]
  412d5c:	433c      	orrs	r4, r7
  412d5e:	b224      	sxth	r4, r4
  412d60:	f820 400c 	strh.w	r4, [r0, ip]
  412d64:	6947      	ldr	r7, [r0, #20]
  412d66:	1c79      	adds	r1, r7, #1
  412d68:	6141      	str	r1, [r0, #20]
  412d6a:	6881      	ldr	r1, [r0, #8]
  412d6c:	55cc      	strb	r4, [r1, r7]
  412d6e:	6944      	ldr	r4, [r0, #20]
  412d70:	1c67      	adds	r7, r4, #1
  412d72:	6147      	str	r7, [r0, #20]
  412d74:	f830 700c 	ldrh.w	r7, [r0, ip]
  412d78:	0a3f      	lsrs	r7, r7, #8
  412d7a:	6881      	ldr	r1, [r0, #8]
  412d7c:	550f      	strb	r7, [r1, r4]
  412d7e:	6834      	ldr	r4, [r6, #0]
  412d80:	f1c4 0710 	rsb	r7, r4, #16
  412d84:	fa48 f807 	asr.w	r8, r8, r7

00412d88 <.LVL140>:
  412d88:	f820 800c 	strh.w	r8, [r0, ip]
  412d8c:	3d10      	subs	r5, #16

00412d8e <.LVL141>:
  412d8e:	442c      	add	r4, r5
  412d90:	6034      	str	r4, [r6, #0]

00412d92 <.LBE29>:
            extra = extra_lbits[code];
  412d92:	4c84      	ldr	r4, [pc, #528]	; (412fa4 <.LBE45+0x6>)
  412d94:	f854 502e 	ldr.w	r5, [r4, lr, lsl #2]

00412d98 <.LVL143>:
            if (extra != 0) {
  412d98:	b365      	cbz	r5, 412df4 <.LBE34>
                lc -= base_length[code];
  412d9a:	4c83      	ldr	r4, [pc, #524]	; (412fa8 <.LBE45+0xa>)
  412d9c:	f854 402e 	ldr.w	r4, [r4, lr, lsl #2]
  412da0:	1b12      	subs	r2, r2, r4

00412da2 <.LBB34>:
                send_bits(s, lc, extra);       /* send the extra length bits */
  412da2:	6837      	ldr	r7, [r6, #0]
  412da4:	f1c5 0410 	rsb	r4, r5, #16
  412da8:	42a7      	cmp	r7, r4
  412daa:	f340 8094 	ble.w	412ed6 <.LBB41>

00412dae <.LVL145>:
  412dae:	b292      	uxth	r2, r2

00412db0 <.LBB35>:
  412db0:	f241 6eb8 	movw	lr, #5816	; 0x16b8

00412db4 <.LVL147>:
  412db4:	fa02 f707 	lsl.w	r7, r2, r7
  412db8:	f830 400e 	ldrh.w	r4, [r0, lr]
  412dbc:	4327      	orrs	r7, r4
  412dbe:	b23f      	sxth	r7, r7
  412dc0:	f820 700e 	strh.w	r7, [r0, lr]
  412dc4:	6944      	ldr	r4, [r0, #20]
  412dc6:	f104 0801 	add.w	r8, r4, #1
  412dca:	f8c0 8014 	str.w	r8, [r0, #20]
  412dce:	6881      	ldr	r1, [r0, #8]
  412dd0:	550f      	strb	r7, [r1, r4]
  412dd2:	6944      	ldr	r4, [r0, #20]
  412dd4:	1c67      	adds	r7, r4, #1
  412dd6:	6147      	str	r7, [r0, #20]
  412dd8:	f830 700e 	ldrh.w	r7, [r0, lr]
  412ddc:	0a3f      	lsrs	r7, r7, #8
  412dde:	6881      	ldr	r1, [r0, #8]
  412de0:	550f      	strb	r7, [r1, r4]
  412de2:	6834      	ldr	r4, [r6, #0]
  412de4:	f1c4 0710 	rsb	r7, r4, #16
  412de8:	413a      	asrs	r2, r7
  412dea:	f820 200e 	strh.w	r2, [r0, lr]
  412dee:	3d10      	subs	r5, #16

00412df0 <.LVL148>:
  412df0:	4425      	add	r5, r4

00412df2 <.LVL149>:
  412df2:	6035      	str	r5, [r6, #0]

00412df4 <.LBE34>:
            dist--; /* dist is now the match distance - 1 */
  412df4:	3b01      	subs	r3, #1
            code = d_code(dist);
  412df6:	2bff      	cmp	r3, #255	; 0xff
  412df8:	d879      	bhi.n	412eee <.LBE41>
  412dfa:	4a6c      	ldr	r2, [pc, #432]	; (412fac <.LBE45+0xe>)
  412dfc:	5cd7      	ldrb	r7, [r2, r3]

00412dfe <.LBB36>:
            send_code(s, code, dtree);       /* send the distance code */
  412dfe:	9901      	ldr	r1, [sp, #4]
  412e00:	eb01 0287 	add.w	r2, r1, r7, lsl #2
  412e04:	8855      	ldrh	r5, [r2, #2]

00412e06 <.LVL152>:
  412e06:	6832      	ldr	r2, [r6, #0]
  412e08:	f1c5 0410 	rsb	r4, r5, #16
  412e0c:	42a2      	cmp	r2, r4
  412e0e:	dd74      	ble.n	412efa <.LBB42>

00412e10 <.LBB37>:
  412e10:	f831 c027 	ldrh.w	ip, [r1, r7, lsl #2]

00412e14 <.LVL153>:
  412e14:	f241 6eb8 	movw	lr, #5816	; 0x16b8
  412e18:	fa0c f202 	lsl.w	r2, ip, r2
  412e1c:	f830 400e 	ldrh.w	r4, [r0, lr]
  412e20:	4322      	orrs	r2, r4
  412e22:	b212      	sxth	r2, r2
  412e24:	f820 200e 	strh.w	r2, [r0, lr]
  412e28:	6944      	ldr	r4, [r0, #20]
  412e2a:	f104 0801 	add.w	r8, r4, #1
  412e2e:	f8c0 8014 	str.w	r8, [r0, #20]
  412e32:	6881      	ldr	r1, [r0, #8]
  412e34:	550a      	strb	r2, [r1, r4]
  412e36:	6942      	ldr	r2, [r0, #20]
  412e38:	1c54      	adds	r4, r2, #1
  412e3a:	6144      	str	r4, [r0, #20]
  412e3c:	f830 400e 	ldrh.w	r4, [r0, lr]
  412e40:	0a24      	lsrs	r4, r4, #8
  412e42:	6881      	ldr	r1, [r0, #8]
  412e44:	548c      	strb	r4, [r1, r2]
  412e46:	6832      	ldr	r2, [r6, #0]
  412e48:	f1c2 0410 	rsb	r4, r2, #16
  412e4c:	fa4c fc04 	asr.w	ip, ip, r4

00412e50 <.LVL154>:
  412e50:	f820 c00e 	strh.w	ip, [r0, lr]
  412e54:	3d10      	subs	r5, #16

00412e56 <.LVL155>:
  412e56:	4415      	add	r5, r2

00412e58 <.LVL156>:
  412e58:	6035      	str	r5, [r6, #0]

00412e5a <.LBE36>:
            extra = extra_dbits[code];
  412e5a:	4a55      	ldr	r2, [pc, #340]	; (412fb0 <.LBE45+0x12>)
  412e5c:	f852 4027 	ldr.w	r4, [r2, r7, lsl #2]

00412e60 <.LVL157>:
            if (extra != 0) {
  412e60:	2c00      	cmp	r4, #0
  412e62:	f43f af28 	beq.w	412cb6 <.LBE30>
                dist -= base_dist[code];
  412e66:	4a53      	ldr	r2, [pc, #332]	; (412fb4 <.LBE45+0x16>)
  412e68:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
  412e6c:	1a9b      	subs	r3, r3, r2

00412e6e <.LBB38>:
                send_bits(s, dist, extra);   /* send the extra distance bits */
  412e6e:	6832      	ldr	r2, [r6, #0]
  412e70:	f1c4 0510 	rsb	r5, r4, #16
  412e74:	42aa      	cmp	r2, r5
  412e76:	dd4f      	ble.n	412f18 <.LBB43>

00412e78 <.LBB39>:
  412e78:	b29b      	uxth	r3, r3

00412e7a <.LVL160>:
  412e7a:	f241 65b8 	movw	r5, #5816	; 0x16b8
  412e7e:	fa03 f702 	lsl.w	r7, r3, r2

00412e82 <.LVL161>:
  412e82:	5b42      	ldrh	r2, [r0, r5]
  412e84:	4317      	orrs	r7, r2
  412e86:	b23f      	sxth	r7, r7
  412e88:	5347      	strh	r7, [r0, r5]
  412e8a:	6942      	ldr	r2, [r0, #20]
  412e8c:	f102 0c01 	add.w	ip, r2, #1
  412e90:	f8c0 c014 	str.w	ip, [r0, #20]
  412e94:	6881      	ldr	r1, [r0, #8]
  412e96:	548f      	strb	r7, [r1, r2]
  412e98:	6942      	ldr	r2, [r0, #20]
  412e9a:	1c57      	adds	r7, r2, #1
  412e9c:	6147      	str	r7, [r0, #20]
  412e9e:	5b47      	ldrh	r7, [r0, r5]
  412ea0:	0a3f      	lsrs	r7, r7, #8
  412ea2:	6881      	ldr	r1, [r0, #8]
  412ea4:	548f      	strb	r7, [r1, r2]
  412ea6:	6832      	ldr	r2, [r6, #0]
  412ea8:	f1c2 0710 	rsb	r7, r2, #16
  412eac:	413b      	asrs	r3, r7
  412eae:	5343      	strh	r3, [r0, r5]
  412eb0:	3c10      	subs	r4, #16

00412eb2 <.LVL162>:
  412eb2:	4414      	add	r4, r2

00412eb4 <.LVL163>:
  412eb4:	6034      	str	r4, [r6, #0]

00412eb6 <.LBE39>:
  412eb6:	e6fe      	b.n	412cb6 <.LBE30>

00412eb8 <.LBB40>:
            send_code(s, code+LITERALS+1, ltree); /* send the length code */
  412eb8:	f241 6cb8 	movw	ip, #5816	; 0x16b8
  412ebc:	9900      	ldr	r1, [sp, #0]
  412ebe:	f831 7027 	ldrh.w	r7, [r1, r7, lsl #2]
  412ec2:	40a7      	lsls	r7, r4
  412ec4:	f830 800c 	ldrh.w	r8, [r0, ip]
  412ec8:	ea47 0708 	orr.w	r7, r7, r8
  412ecc:	f820 700c 	strh.w	r7, [r0, ip]
  412ed0:	4425      	add	r5, r4

00412ed2 <.LVL165>:
  412ed2:	6035      	str	r5, [r6, #0]
  412ed4:	e75d      	b.n	412d92 <.LBE29>

00412ed6 <.LBB41>:
                send_bits(s, lc, extra);       /* send the extra length bits */
  412ed6:	f241 64b8 	movw	r4, #5816	; 0x16b8
  412eda:	b292      	uxth	r2, r2

00412edc <.LVL167>:
  412edc:	40ba      	lsls	r2, r7
  412ede:	f830 e004 	ldrh.w	lr, [r0, r4]

00412ee2 <.LVL168>:
  412ee2:	ea42 020e 	orr.w	r2, r2, lr
  412ee6:	5302      	strh	r2, [r0, r4]
  412ee8:	443d      	add	r5, r7

00412eea <.LVL169>:
  412eea:	6035      	str	r5, [r6, #0]
  412eec:	e782      	b.n	412df4 <.LBE34>

00412eee <.LBE41>:
            code = d_code(dist);
  412eee:	4a2f      	ldr	r2, [pc, #188]	; (412fac <.LBE45+0xe>)
  412ef0:	eb02 12d3 	add.w	r2, r2, r3, lsr #7
  412ef4:	f892 7100 	ldrb.w	r7, [r2, #256]	; 0x100
  412ef8:	e781      	b.n	412dfe <.LBB36>

00412efa <.LBB42>:
            send_code(s, code, dtree);       /* send the distance code */
  412efa:	f241 6eb8 	movw	lr, #5816	; 0x16b8
  412efe:	9901      	ldr	r1, [sp, #4]
  412f00:	f831 4027 	ldrh.w	r4, [r1, r7, lsl #2]
  412f04:	4094      	lsls	r4, r2
  412f06:	f830 c00e 	ldrh.w	ip, [r0, lr]
  412f0a:	ea44 040c 	orr.w	r4, r4, ip
  412f0e:	f820 400e 	strh.w	r4, [r0, lr]
  412f12:	4415      	add	r5, r2

00412f14 <.LVL171>:
  412f14:	6035      	str	r5, [r6, #0]
  412f16:	e7a0      	b.n	412e5a <.LBE36>

00412f18 <.LBB43>:
                send_bits(s, dist, extra);   /* send the extra distance bits */
  412f18:	f241 65b8 	movw	r5, #5816	; 0x16b8
  412f1c:	b29b      	uxth	r3, r3

00412f1e <.LVL173>:
  412f1e:	4093      	lsls	r3, r2
  412f20:	5b47      	ldrh	r7, [r0, r5]

00412f22 <.LVL174>:
  412f22:	433b      	orrs	r3, r7
  412f24:	5343      	strh	r3, [r0, r5]
  412f26:	4414      	add	r4, r2

00412f28 <.LVL175>:
  412f28:	6034      	str	r4, [r6, #0]
  412f2a:	e6c4      	b.n	412cb6 <.LBE30>

00412f2c <.LVL176>:
  412f2c:	9900      	ldr	r1, [sp, #0]

00412f2e <.LBB44>:
    send_code(s, END_BLOCK, ltree);
  412f2e:	f8b1 4402 	ldrh.w	r4, [r1, #1026]	; 0x402

00412f32 <.LVL178>:
  412f32:	f241 63bc 	movw	r3, #5820	; 0x16bc
  412f36:	58c3      	ldr	r3, [r0, r3]
  412f38:	f1c4 0210 	rsb	r2, r4, #16
  412f3c:	4293      	cmp	r3, r2
  412f3e:	dc0e      	bgt.n	412f5e <.LBB45>
  412f40:	f241 65b8 	movw	r5, #5816	; 0x16b8
  412f44:	f8b1 2400 	ldrh.w	r2, [r1, #1024]	; 0x400
  412f48:	409a      	lsls	r2, r3
  412f4a:	5b41      	ldrh	r1, [r0, r5]
  412f4c:	430a      	orrs	r2, r1
  412f4e:	5342      	strh	r2, [r0, r5]
  412f50:	4423      	add	r3, r4
  412f52:	f241 62bc 	movw	r2, #5820	; 0x16bc
  412f56:	5083      	str	r3, [r0, r2]

00412f58 <.LBE44>:
}
  412f58:	b003      	add	sp, #12

00412f5a <.LCFI9>:
  412f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00412f5e <.LBB45>:
    send_code(s, END_BLOCK, ltree);
  412f5e:	f8b1 5400 	ldrh.w	r5, [r1, #1024]	; 0x400

00412f62 <.LVL181>:
  412f62:	f241 61b8 	movw	r1, #5816	; 0x16b8
  412f66:	fa05 f203 	lsl.w	r2, r5, r3
  412f6a:	5a43      	ldrh	r3, [r0, r1]
  412f6c:	431a      	orrs	r2, r3
  412f6e:	b212      	sxth	r2, r2
  412f70:	5242      	strh	r2, [r0, r1]
  412f72:	6886      	ldr	r6, [r0, #8]
  412f74:	6943      	ldr	r3, [r0, #20]
  412f76:	1c5f      	adds	r7, r3, #1
  412f78:	6147      	str	r7, [r0, #20]
  412f7a:	54f2      	strb	r2, [r6, r3]
  412f7c:	6886      	ldr	r6, [r0, #8]
  412f7e:	6942      	ldr	r2, [r0, #20]
  412f80:	1c53      	adds	r3, r2, #1
  412f82:	6143      	str	r3, [r0, #20]
  412f84:	5a43      	ldrh	r3, [r0, r1]
  412f86:	0a1b      	lsrs	r3, r3, #8
  412f88:	54b3      	strb	r3, [r6, r2]
  412f8a:	f241 63bc 	movw	r3, #5820	; 0x16bc
  412f8e:	58c2      	ldr	r2, [r0, r3]
  412f90:	f1c2 0610 	rsb	r6, r2, #16
  412f94:	4135      	asrs	r5, r6

00412f96 <.LVL182>:
  412f96:	5245      	strh	r5, [r0, r1]
  412f98:	3c10      	subs	r4, #16

00412f9a <.LVL183>:
  412f9a:	4414      	add	r4, r2

00412f9c <.LVL184>:
  412f9c:	50c4      	str	r4, [r0, r3]

00412f9e <.LBE45>:
  412f9e:	e7db      	b.n	412f58 <.LBE44>
  412fa0:	00417964 	.word	0x00417964
  412fa4:	0041bd9c 	.word	0x0041bd9c
  412fa8:	0041bd28 	.word	0x0041bd28
  412fac:	00414b34 	.word	0x00414b34
  412fb0:	0041bb4c 	.word	0x0041bb4c
  412fb4:	0041bad4 	.word	0x0041bad4

Disassembly of section .text.adler32%94:

00412fb8 <adler32>:
/* ========================================================================= */
uLong ZEXPORT adler32(adler, buf, len)
    uLong adler;
    const Bytef *buf;
    uInt len;
{
  412fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00412fbc <.LCFI2>:
  412fbc:	b08b      	sub	sp, #44	; 0x2c

00412fbe <.LCFI3>:
  412fbe:	9107      	str	r1, [sp, #28]
  412fc0:	9209      	str	r2, [sp, #36]	; 0x24
    unsigned long sum2;
    unsigned n;

    /* split Adler-32 into component sums */
    sum2 = (adler >> 16) & 0xffff;
  412fc2:	0c03      	lsrs	r3, r0, #16
  412fc4:	9301      	str	r3, [sp, #4]

00412fc6 <.LVL22>:
    adler &= 0xffff;
  412fc6:	b280      	uxth	r0, r0

00412fc8 <.LVL23>:

    /* in case user likes doing a byte at a time, keep it fast */
    if (len == 1) {
  412fc8:	2a01      	cmp	r2, #1
  412fca:	d00d      	beq.n	412fe8 <.LVL25>
            sum2 -= BASE;
        return adler | (sum2 << 16);
    }

    /* initial Adler-32 value (deferred check for len == 1 speed) */
    if (buf == Z_NULL)
  412fcc:	9b07      	ldr	r3, [sp, #28]

00412fce <.LVL24>:
  412fce:	2b00      	cmp	r3, #0
  412fd0:	f000 8152 	beq.w	413278 <.LVL106>
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
  412fd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  412fd6:	2a0f      	cmp	r2, #15
  412fd8:	d91b      	bls.n	413012 <.LVL34>
        MOD28(sum2);            /* only added so many BASE's */
        return adler | (sum2 << 16);
    }

    /* do length NMAX blocks -- requires just one modulo operation */
    while (len >= NMAX) {
  412fda:	f241 53af 	movw	r3, #5551	; 0x15af
  412fde:	429a      	cmp	r2, r3
  412fe0:	f240 814c 	bls.w	41327c <.LVL108>
  412fe4:	4683      	mov	fp, r0
  412fe6:	e03b      	b.n	413060 <.LVL46>

00412fe8 <.LVL25>:
        adler += buf[0];
  412fe8:	780b      	ldrb	r3, [r1, #0]

00412fea <.LVL26>:
  412fea:	4418      	add	r0, r3
        if (adler >= BASE)
  412fec:	f64f 73f0 	movw	r3, #65520	; 0xfff0
  412ff0:	4298      	cmp	r0, r3
  412ff2:	d902      	bls.n	412ffa <.LVL29>
            adler -= BASE;
  412ff4:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00

00412ff8 <.LVL28>:
  412ff8:	38f1      	subs	r0, #241	; 0xf1

00412ffa <.LVL29>:
        sum2 += adler;
  412ffa:	9b01      	ldr	r3, [sp, #4]
  412ffc:	4403      	add	r3, r0

00412ffe <.LVL30>:
        if (sum2 >= BASE)
  412ffe:	f64f 72f0 	movw	r2, #65520	; 0xfff0
  413002:	4293      	cmp	r3, r2
  413004:	d902      	bls.n	41300c <.LVL32>
            sum2 -= BASE;
  413006:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00

0041300a <.LVL31>:
  41300a:	3bf1      	subs	r3, #241	; 0xf1

0041300c <.LVL32>:
        return adler | (sum2 << 16);
  41300c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16

00413010 <.LVL33>:
  413010:	e021      	b.n	413056 <.LVL44>

00413012 <.LVL34>:
        while (len--) {
  413012:	9b09      	ldr	r3, [sp, #36]	; 0x24
  413014:	b15b      	cbz	r3, 41302e <.LVL41>
  413016:	9c07      	ldr	r4, [sp, #28]
  413018:	4423      	add	r3, r4
  41301a:	461a      	mov	r2, r3

0041301c <.LVL35>:
  41301c:	9901      	ldr	r1, [sp, #4]

0041301e <.LVL36>:
  41301e:	4623      	mov	r3, r4

00413020 <.LVL37>:
            adler += *buf++;
  413020:	f813 4b01 	ldrb.w	r4, [r3], #1

00413024 <.LVL38>:
  413024:	4420      	add	r0, r4
            sum2 += adler;
  413026:	4401      	add	r1, r0
        while (len--) {
  413028:	4293      	cmp	r3, r2
  41302a:	d1f9      	bne.n	413020 <.LVL37>
  41302c:	9101      	str	r1, [sp, #4]

0041302e <.LVL41>:
        if (adler >= BASE)
  41302e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
  413032:	4298      	cmp	r0, r3
  413034:	d902      	bls.n	41303c <.LVL43>
            adler -= BASE;
  413036:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00

0041303a <.LVL42>:
  41303a:	38f1      	subs	r0, #241	; 0xf1

0041303c <.LVL43>:
        MOD28(sum2);            /* only added so many BASE's */
  41303c:	4b95      	ldr	r3, [pc, #596]	; (413294 <.LVL110+0x4>)
  41303e:	9901      	ldr	r1, [sp, #4]
  413040:	460a      	mov	r2, r1
  413042:	fba3 2302 	umull	r2, r3, r3, r2
  413046:	0bdb      	lsrs	r3, r3, #15
  413048:	ebc3 3203 	rsb	r2, r3, r3, lsl #12
  41304c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  413050:	1acb      	subs	r3, r1, r3
        return adler | (sum2 << 16);
  413052:	ea40 4003 	orr.w	r0, r0, r3, lsl #16

00413056 <.LVL44>:
        MOD(sum2);
    }

    /* return recombined sums */
    return adler | (sum2 << 16);
}
  413056:	b00b      	add	sp, #44	; 0x2c

00413058 <.LCFI4>:
  413058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0041305c <.LCFI5>:
        len -= NMAX;
  41305c:	9b08      	ldr	r3, [sp, #32]
  41305e:	9309      	str	r3, [sp, #36]	; 0x24

00413060 <.LVL46>:
  413060:	9b09      	ldr	r3, [sp, #36]	; 0x24
  413062:	f5a3 53ad 	sub.w	r3, r3, #5536	; 0x15a0
  413066:	3b10      	subs	r3, #16
  413068:	9308      	str	r3, [sp, #32]

0041306a <.LVL47>:
  41306a:	9a07      	ldr	r2, [sp, #28]
  41306c:	f102 0410 	add.w	r4, r2, #16
  413070:	f502 53ae 	add.w	r3, r2, #5568	; 0x15c0
  413074:	9306      	str	r3, [sp, #24]

00413076 <.LVL48>:
            DO16(buf);          /* 16 sums unrolled */
  413076:	f814 3c10 	ldrb.w	r3, [r4, #-16]
  41307a:	445b      	add	r3, fp

0041307c <.LVL49>:
  41307c:	f814 ac0f 	ldrb.w	sl, [r4, #-15]
  413080:	449a      	add	sl, r3

00413082 <.LVL50>:
  413082:	f814 9c0e 	ldrb.w	r9, [r4, #-14]
  413086:	44d1      	add	r9, sl

00413088 <.LVL51>:
  413088:	f814 2c0d 	ldrb.w	r2, [r4, #-13]
  41308c:	444a      	add	r2, r9

0041308e <.LVL52>:
  41308e:	f814 8c0c 	ldrb.w	r8, [r4, #-12]
  413092:	9202      	str	r2, [sp, #8]
  413094:	eb08 0002 	add.w	r0, r8, r2

00413098 <.LVL53>:
  413098:	f814 8c0b 	ldrb.w	r8, [r4, #-11]
  41309c:	9003      	str	r0, [sp, #12]
  41309e:	4440      	add	r0, r8

004130a0 <.LVL54>:
  4130a0:	f814 8c0a 	ldrb.w	r8, [r4, #-10]
  4130a4:	9004      	str	r0, [sp, #16]
  4130a6:	4480      	add	r8, r0

004130a8 <.LVL55>:
  4130a8:	f814 cc09 	ldrb.w	ip, [r4, #-9]
  4130ac:	44c4      	add	ip, r8

004130ae <.LVL56>:
  4130ae:	f814 ec08 	ldrb.w	lr, [r4, #-8]
  4130b2:	44e6      	add	lr, ip

004130b4 <.LVL57>:
  4130b4:	f814 7c07 	ldrb.w	r7, [r4, #-7]
  4130b8:	4477      	add	r7, lr

004130ba <.LVL58>:
  4130ba:	f814 6c06 	ldrb.w	r6, [r4, #-6]
  4130be:	443e      	add	r6, r7

004130c0 <.LVL59>:
  4130c0:	f814 5c05 	ldrb.w	r5, [r4, #-5]
  4130c4:	4435      	add	r5, r6

004130c6 <.LVL60>:
  4130c6:	f814 0c04 	ldrb.w	r0, [r4, #-4]
  4130ca:	4428      	add	r0, r5

004130cc <.LVL61>:
  4130cc:	f814 1c03 	ldrb.w	r1, [r4, #-3]
  4130d0:	4401      	add	r1, r0

004130d2 <.LVL62>:
  4130d2:	f814 2c02 	ldrb.w	r2, [r4, #-2]
  4130d6:	9105      	str	r1, [sp, #20]
  4130d8:	440a      	add	r2, r1

004130da <.LVL63>:
  4130da:	f814 bc01 	ldrb.w	fp, [r4, #-1]
  4130de:	4493      	add	fp, r2

004130e0 <.LVL64>:
  4130e0:	4453      	add	r3, sl
  4130e2:	444b      	add	r3, r9
  4130e4:	9902      	ldr	r1, [sp, #8]
  4130e6:	440b      	add	r3, r1
  4130e8:	9903      	ldr	r1, [sp, #12]
  4130ea:	440b      	add	r3, r1
  4130ec:	9904      	ldr	r1, [sp, #16]
  4130ee:	440b      	add	r3, r1
  4130f0:	4498      	add	r8, r3
  4130f2:	44c4      	add	ip, r8
  4130f4:	44e6      	add	lr, ip
  4130f6:	4477      	add	r7, lr
  4130f8:	443e      	add	r6, r7
  4130fa:	4435      	add	r5, r6
  4130fc:	4428      	add	r0, r5
  4130fe:	9b05      	ldr	r3, [sp, #20]
  413100:	4403      	add	r3, r0
  413102:	441a      	add	r2, r3
  413104:	445a      	add	r2, fp
  413106:	9b01      	ldr	r3, [sp, #4]
  413108:	4413      	add	r3, r2
  41310a:	9301      	str	r3, [sp, #4]

0041310c <.LVL65>:
  41310c:	3410      	adds	r4, #16

0041310e <.LVL66>:
        } while (--n);
  41310e:	9b06      	ldr	r3, [sp, #24]

00413110 <.LVL67>:
  413110:	429c      	cmp	r4, r3
  413112:	d1b0      	bne.n	413076 <.LVL48>
  413114:	9b07      	ldr	r3, [sp, #28]
  413116:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
  41311a:	3310      	adds	r3, #16
  41311c:	9307      	str	r3, [sp, #28]
        MOD(adler);
  41311e:	4b5d      	ldr	r3, [pc, #372]	; (413294 <.LVL110+0x4>)
  413120:	fba3 230b 	umull	r2, r3, r3, fp
  413124:	0bdb      	lsrs	r3, r3, #15
  413126:	ebc3 3203 	rsb	r2, r3, r3, lsl #12
  41312a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  41312e:	ebab 0b03 	sub.w	fp, fp, r3
        MOD(sum2);
  413132:	9901      	ldr	r1, [sp, #4]
  413134:	4a57      	ldr	r2, [pc, #348]	; (413294 <.LVL110+0x4>)
  413136:	fba2 2301 	umull	r2, r3, r2, r1
  41313a:	0bdb      	lsrs	r3, r3, #15
  41313c:	ebc3 3203 	rsb	r2, r3, r3, lsl #12
  413140:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  413144:	1acb      	subs	r3, r1, r3
  413146:	9301      	str	r3, [sp, #4]

00413148 <.LVL69>:
    while (len >= NMAX) {
  413148:	9b08      	ldr	r3, [sp, #32]

0041314a <.LVL70>:
  41314a:	f241 52af 	movw	r2, #5551	; 0x15af
  41314e:	4293      	cmp	r3, r2
  413150:	d884      	bhi.n	41305c <.LCFI5>
  413152:	4658      	mov	r0, fp
    if (len) {                  /* avoid modulos if none remaining */
  413154:	2b00      	cmp	r3, #0
  413156:	f000 808b 	beq.w	413270 <.LVL102+0x28>
        while (len >= 16) {
  41315a:	2b0f      	cmp	r3, #15
  41315c:	f240 8094 	bls.w	413288 <.LVL109>

00413160 <.LVL71>:
  413160:	9b07      	ldr	r3, [sp, #28]
  413162:	f103 0510 	add.w	r5, r3, #16
    if (len) {                  /* avoid modulos if none remaining */
  413166:	9b08      	ldr	r3, [sp, #32]
  413168:	9302      	str	r3, [sp, #8]

0041316a <.LVL72>:
            len -= 16;
  41316a:	9b02      	ldr	r3, [sp, #8]
  41316c:	3b10      	subs	r3, #16
  41316e:	9302      	str	r3, [sp, #8]

00413170 <.LVL73>:
            DO16(buf);
  413170:	f815 3c10 	ldrb.w	r3, [r5, #-16]

00413174 <.LVL74>:
  413174:	4403      	add	r3, r0

00413176 <.LVL75>:
  413176:	f815 bc0f 	ldrb.w	fp, [r5, #-15]
  41317a:	449b      	add	fp, r3

0041317c <.LVL76>:
  41317c:	f815 ac0e 	ldrb.w	sl, [r5, #-14]
  413180:	44da      	add	sl, fp

00413182 <.LVL77>:
  413182:	f815 9c0d 	ldrb.w	r9, [r5, #-13]
  413186:	44d1      	add	r9, sl

00413188 <.LVL78>:
  413188:	f815 8c0c 	ldrb.w	r8, [r5, #-12]
  41318c:	44c8      	add	r8, r9

0041318e <.LVL79>:
  41318e:	f815 cc0b 	ldrb.w	ip, [r5, #-11]
  413192:	44c4      	add	ip, r8

00413194 <.LVL80>:
  413194:	f815 ec0a 	ldrb.w	lr, [r5, #-10]
  413198:	44e6      	add	lr, ip

0041319a <.LVL81>:
  41319a:	f815 2c09 	ldrb.w	r2, [r5, #-9]
  41319e:	4472      	add	r2, lr
  4131a0:	4611      	mov	r1, r2

004131a2 <.LVL82>:
  4131a2:	f815 2c08 	ldrb.w	r2, [r5, #-8]
  4131a6:	9103      	str	r1, [sp, #12]
  4131a8:	1850      	adds	r0, r2, r1

004131aa <.LVL83>:
  4131aa:	f815 2c07 	ldrb.w	r2, [r5, #-7]
  4131ae:	9004      	str	r0, [sp, #16]
  4131b0:	1814      	adds	r4, r2, r0

004131b2 <.LVL84>:
  4131b2:	f815 7c06 	ldrb.w	r7, [r5, #-6]
  4131b6:	9405      	str	r4, [sp, #20]
  4131b8:	4427      	add	r7, r4

004131ba <.LVL85>:
  4131ba:	f815 6c05 	ldrb.w	r6, [r5, #-5]
  4131be:	443e      	add	r6, r7

004131c0 <.LVL86>:
  4131c0:	f815 4c04 	ldrb.w	r4, [r5, #-4]
  4131c4:	4434      	add	r4, r6

004131c6 <.LVL87>:
  4131c6:	f815 1c03 	ldrb.w	r1, [r5, #-3]
  4131ca:	4421      	add	r1, r4

004131cc <.LVL88>:
  4131cc:	f815 2c02 	ldrb.w	r2, [r5, #-2]
  4131d0:	9106      	str	r1, [sp, #24]
  4131d2:	440a      	add	r2, r1

004131d4 <.LVL89>:
  4131d4:	f815 0c01 	ldrb.w	r0, [r5, #-1]
  4131d8:	4410      	add	r0, r2

004131da <.LVL90>:
  4131da:	445b      	add	r3, fp
  4131dc:	4453      	add	r3, sl
  4131de:	444b      	add	r3, r9
  4131e0:	4443      	add	r3, r8
  4131e2:	4463      	add	r3, ip
  4131e4:	4473      	add	r3, lr
  4131e6:	9903      	ldr	r1, [sp, #12]
  4131e8:	468e      	mov	lr, r1
  4131ea:	440b      	add	r3, r1
  4131ec:	9904      	ldr	r1, [sp, #16]
  4131ee:	440b      	add	r3, r1
  4131f0:	9905      	ldr	r1, [sp, #20]
  4131f2:	440b      	add	r3, r1
  4131f4:	443b      	add	r3, r7
  4131f6:	4433      	add	r3, r6
  4131f8:	4423      	add	r3, r4
  4131fa:	9906      	ldr	r1, [sp, #24]
  4131fc:	440b      	add	r3, r1
  4131fe:	4413      	add	r3, r2
  413200:	4403      	add	r3, r0
  413202:	9a01      	ldr	r2, [sp, #4]
  413204:	441a      	add	r2, r3
  413206:	9201      	str	r2, [sp, #4]

00413208 <.LVL91>:
  413208:	3510      	adds	r5, #16

0041320a <.LVL92>:
        while (len >= 16) {
  41320a:	9b02      	ldr	r3, [sp, #8]
  41320c:	2b0f      	cmp	r3, #15
  41320e:	d8ac      	bhi.n	41316a <.LVL72>
  413210:	9908      	ldr	r1, [sp, #32]
  413212:	f1a1 0310 	sub.w	r3, r1, #16
  413216:	f023 020f 	bic.w	r2, r3, #15

0041321a <.LVL93>:
  41321a:	3210      	adds	r2, #16
  41321c:	9c07      	ldr	r4, [sp, #28]
  41321e:	4414      	add	r4, r2
  413220:	9407      	str	r4, [sp, #28]
  413222:	f1a1 0211 	sub.w	r2, r1, #17

00413226 <.LVL94>:
        while (len--) {
  413226:	f023 030f 	bic.w	r3, r3, #15
  41322a:	1ad2      	subs	r2, r2, r3

0041322c <.LVL95>:
  41322c:	f011 0f0f 	tst.w	r1, #15
  413230:	d00a      	beq.n	413248 <.LVL102>

00413232 <.LVL96>:
  413232:	9907      	ldr	r1, [sp, #28]
  413234:	1e4b      	subs	r3, r1, #1
  413236:	440a      	add	r2, r1

00413238 <.LVL97>:
  413238:	9901      	ldr	r1, [sp, #4]

0041323a <.LVL98>:
            adler += *buf++;
  41323a:	f813 4f01 	ldrb.w	r4, [r3, #1]!

0041323e <.LVL99>:
  41323e:	4420      	add	r0, r4
            sum2 += adler;
  413240:	4401      	add	r1, r0
        while (len--) {
  413242:	429a      	cmp	r2, r3
  413244:	d1f9      	bne.n	41323a <.LVL98>
  413246:	9101      	str	r1, [sp, #4]

00413248 <.LVL102>:
        MOD(adler);
  413248:	4b12      	ldr	r3, [pc, #72]	; (413294 <.LVL110+0x4>)
  41324a:	fba3 1200 	umull	r1, r2, r3, r0
  41324e:	0bd2      	lsrs	r2, r2, #15
  413250:	ebc2 3102 	rsb	r1, r2, r2, lsl #12
  413254:	eb02 1201 	add.w	r2, r2, r1, lsl #4
  413258:	1a80      	subs	r0, r0, r2
        MOD(sum2);
  41325a:	9901      	ldr	r1, [sp, #4]
  41325c:	460a      	mov	r2, r1
  41325e:	fba3 2302 	umull	r2, r3, r3, r2
  413262:	0bdb      	lsrs	r3, r3, #15
  413264:	ebc3 3203 	rsb	r2, r3, r3, lsl #12
  413268:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  41326c:	1acb      	subs	r3, r1, r3
  41326e:	9301      	str	r3, [sp, #4]
    return adler | (sum2 << 16);
  413270:	9b01      	ldr	r3, [sp, #4]
  413272:	ea40 4003 	orr.w	r0, r0, r3, lsl #16

00413276 <.LVL105>:
  413276:	e6ee      	b.n	413056 <.LVL44>

00413278 <.LVL106>:
        return 1L;
  413278:	2001      	movs	r0, #1

0041327a <.LVL107>:
  41327a:	e6ec      	b.n	413056 <.LVL44>

0041327c <.LVL108>:
    if (len) {                  /* avoid modulos if none remaining */
  41327c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41327e:	2b00      	cmp	r3, #0
  413280:	d0f6      	beq.n	413270 <.LVL102+0x28>
  413282:	9b09      	ldr	r3, [sp, #36]	; 0x24
  413284:	9308      	str	r3, [sp, #32]
  413286:	e76b      	b.n	413160 <.LVL71>

00413288 <.LVL109>:
        while (len--) {
  413288:	4a03      	ldr	r2, [pc, #12]	; (413298 <.LVL110+0x8>)
  41328a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41328c:	4413      	add	r3, r2
  41328e:	461a      	mov	r2, r3

00413290 <.LVL110>:
  413290:	e7cf      	b.n	413232 <.LVL96>
  413292:	bf00      	nop
  413294:	80078071 	.word	0x80078071
  413298:	ffffea4f 	.word	0xffffea4f

Disassembly of section .text%95:

0041329c <__udivmoddi4>:
  41329c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4132a0:	468c      	mov	ip, r1
  4132a2:	460d      	mov	r5, r1
  4132a4:	4604      	mov	r4, r0
  4132a6:	9e08      	ldr	r6, [sp, #32]
  4132a8:	2b00      	cmp	r3, #0
  4132aa:	d151      	bne.n	413350 <__udivmoddi4+0xb4>
  4132ac:	428a      	cmp	r2, r1
  4132ae:	4617      	mov	r7, r2
  4132b0:	d96d      	bls.n	41338e <__udivmoddi4+0xf2>
  4132b2:	fab2 fe82 	clz	lr, r2
  4132b6:	f1be 0f00 	cmp.w	lr, #0
  4132ba:	d00b      	beq.n	4132d4 <__udivmoddi4+0x38>
  4132bc:	f1ce 0c20 	rsb	ip, lr, #32
  4132c0:	fa01 f50e 	lsl.w	r5, r1, lr
  4132c4:	fa20 fc0c 	lsr.w	ip, r0, ip
  4132c8:	fa02 f70e 	lsl.w	r7, r2, lr
  4132cc:	ea4c 0c05 	orr.w	ip, ip, r5
  4132d0:	fa00 f40e 	lsl.w	r4, r0, lr
  4132d4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4132d8:	0c25      	lsrs	r5, r4, #16
  4132da:	fbbc f8fa 	udiv	r8, ip, sl
  4132de:	fa1f f987 	uxth.w	r9, r7
  4132e2:	fb0a cc18 	mls	ip, sl, r8, ip
  4132e6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4132ea:	fb08 f309 	mul.w	r3, r8, r9
  4132ee:	42ab      	cmp	r3, r5
  4132f0:	d90a      	bls.n	413308 <__udivmoddi4+0x6c>
  4132f2:	19ed      	adds	r5, r5, r7
  4132f4:	f108 32ff 	add.w	r2, r8, #4294967295
  4132f8:	f080 8123 	bcs.w	413542 <__udivmoddi4+0x2a6>
  4132fc:	42ab      	cmp	r3, r5
  4132fe:	f240 8120 	bls.w	413542 <__udivmoddi4+0x2a6>
  413302:	f1a8 0802 	sub.w	r8, r8, #2
  413306:	443d      	add	r5, r7
  413308:	1aed      	subs	r5, r5, r3
  41330a:	b2a4      	uxth	r4, r4
  41330c:	fbb5 f0fa 	udiv	r0, r5, sl
  413310:	fb0a 5510 	mls	r5, sl, r0, r5
  413314:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  413318:	fb00 f909 	mul.w	r9, r0, r9
  41331c:	45a1      	cmp	r9, r4
  41331e:	d909      	bls.n	413334 <__udivmoddi4+0x98>
  413320:	19e4      	adds	r4, r4, r7
  413322:	f100 33ff 	add.w	r3, r0, #4294967295
  413326:	f080 810a 	bcs.w	41353e <__udivmoddi4+0x2a2>
  41332a:	45a1      	cmp	r9, r4
  41332c:	f240 8107 	bls.w	41353e <__udivmoddi4+0x2a2>
  413330:	3802      	subs	r0, #2
  413332:	443c      	add	r4, r7
  413334:	eba4 0409 	sub.w	r4, r4, r9
  413338:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  41333c:	2100      	movs	r1, #0
  41333e:	2e00      	cmp	r6, #0
  413340:	d061      	beq.n	413406 <__udivmoddi4+0x16a>
  413342:	fa24 f40e 	lsr.w	r4, r4, lr
  413346:	2300      	movs	r3, #0
  413348:	6034      	str	r4, [r6, #0]
  41334a:	6073      	str	r3, [r6, #4]
  41334c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  413350:	428b      	cmp	r3, r1
  413352:	d907      	bls.n	413364 <__udivmoddi4+0xc8>
  413354:	2e00      	cmp	r6, #0
  413356:	d054      	beq.n	413402 <__udivmoddi4+0x166>
  413358:	2100      	movs	r1, #0
  41335a:	e886 0021 	stmia.w	r6, {r0, r5}
  41335e:	4608      	mov	r0, r1
  413360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  413364:	fab3 f183 	clz	r1, r3
  413368:	2900      	cmp	r1, #0
  41336a:	f040 808e 	bne.w	41348a <__udivmoddi4+0x1ee>
  41336e:	42ab      	cmp	r3, r5
  413370:	d302      	bcc.n	413378 <__udivmoddi4+0xdc>
  413372:	4282      	cmp	r2, r0
  413374:	f200 80fa 	bhi.w	41356c <__udivmoddi4+0x2d0>
  413378:	1a84      	subs	r4, r0, r2
  41337a:	eb65 0503 	sbc.w	r5, r5, r3
  41337e:	2001      	movs	r0, #1
  413380:	46ac      	mov	ip, r5
  413382:	2e00      	cmp	r6, #0
  413384:	d03f      	beq.n	413406 <__udivmoddi4+0x16a>
  413386:	e886 1010 	stmia.w	r6, {r4, ip}
  41338a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  41338e:	b912      	cbnz	r2, 413396 <__udivmoddi4+0xfa>
  413390:	2701      	movs	r7, #1
  413392:	fbb7 f7f2 	udiv	r7, r7, r2
  413396:	fab7 fe87 	clz	lr, r7
  41339a:	f1be 0f00 	cmp.w	lr, #0
  41339e:	d134      	bne.n	41340a <__udivmoddi4+0x16e>
  4133a0:	1beb      	subs	r3, r5, r7
  4133a2:	0c3a      	lsrs	r2, r7, #16
  4133a4:	fa1f fc87 	uxth.w	ip, r7
  4133a8:	2101      	movs	r1, #1
  4133aa:	fbb3 f8f2 	udiv	r8, r3, r2
  4133ae:	0c25      	lsrs	r5, r4, #16
  4133b0:	fb02 3318 	mls	r3, r2, r8, r3
  4133b4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4133b8:	fb0c f308 	mul.w	r3, ip, r8
  4133bc:	42ab      	cmp	r3, r5
  4133be:	d907      	bls.n	4133d0 <__udivmoddi4+0x134>
  4133c0:	19ed      	adds	r5, r5, r7
  4133c2:	f108 30ff 	add.w	r0, r8, #4294967295
  4133c6:	d202      	bcs.n	4133ce <__udivmoddi4+0x132>
  4133c8:	42ab      	cmp	r3, r5
  4133ca:	f200 80d1 	bhi.w	413570 <__udivmoddi4+0x2d4>
  4133ce:	4680      	mov	r8, r0
  4133d0:	1aed      	subs	r5, r5, r3
  4133d2:	b2a3      	uxth	r3, r4
  4133d4:	fbb5 f0f2 	udiv	r0, r5, r2
  4133d8:	fb02 5510 	mls	r5, r2, r0, r5
  4133dc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4133e0:	fb0c fc00 	mul.w	ip, ip, r0
  4133e4:	45a4      	cmp	ip, r4
  4133e6:	d907      	bls.n	4133f8 <__udivmoddi4+0x15c>
  4133e8:	19e4      	adds	r4, r4, r7
  4133ea:	f100 33ff 	add.w	r3, r0, #4294967295
  4133ee:	d202      	bcs.n	4133f6 <__udivmoddi4+0x15a>
  4133f0:	45a4      	cmp	ip, r4
  4133f2:	f200 80b8 	bhi.w	413566 <__udivmoddi4+0x2ca>
  4133f6:	4618      	mov	r0, r3
  4133f8:	eba4 040c 	sub.w	r4, r4, ip
  4133fc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  413400:	e79d      	b.n	41333e <__udivmoddi4+0xa2>
  413402:	4631      	mov	r1, r6
  413404:	4630      	mov	r0, r6
  413406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  41340a:	f1ce 0420 	rsb	r4, lr, #32
  41340e:	fa05 f30e 	lsl.w	r3, r5, lr
  413412:	fa07 f70e 	lsl.w	r7, r7, lr
  413416:	fa20 f804 	lsr.w	r8, r0, r4
  41341a:	0c3a      	lsrs	r2, r7, #16
  41341c:	fa25 f404 	lsr.w	r4, r5, r4
  413420:	ea48 0803 	orr.w	r8, r8, r3
  413424:	fbb4 f1f2 	udiv	r1, r4, r2
  413428:	ea4f 4518 	mov.w	r5, r8, lsr #16
  41342c:	fb02 4411 	mls	r4, r2, r1, r4
  413430:	fa1f fc87 	uxth.w	ip, r7
  413434:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  413438:	fb01 f30c 	mul.w	r3, r1, ip
  41343c:	42ab      	cmp	r3, r5
  41343e:	fa00 f40e 	lsl.w	r4, r0, lr
  413442:	d909      	bls.n	413458 <__udivmoddi4+0x1bc>
  413444:	19ed      	adds	r5, r5, r7
  413446:	f101 30ff 	add.w	r0, r1, #4294967295
  41344a:	f080 808a 	bcs.w	413562 <__udivmoddi4+0x2c6>
  41344e:	42ab      	cmp	r3, r5
  413450:	f240 8087 	bls.w	413562 <__udivmoddi4+0x2c6>
  413454:	3902      	subs	r1, #2
  413456:	443d      	add	r5, r7
  413458:	1aeb      	subs	r3, r5, r3
  41345a:	fa1f f588 	uxth.w	r5, r8
  41345e:	fbb3 f0f2 	udiv	r0, r3, r2
  413462:	fb02 3310 	mls	r3, r2, r0, r3
  413466:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  41346a:	fb00 f30c 	mul.w	r3, r0, ip
  41346e:	42ab      	cmp	r3, r5
  413470:	d907      	bls.n	413482 <__udivmoddi4+0x1e6>
  413472:	19ed      	adds	r5, r5, r7
  413474:	f100 38ff 	add.w	r8, r0, #4294967295
  413478:	d26f      	bcs.n	41355a <__udivmoddi4+0x2be>
  41347a:	42ab      	cmp	r3, r5
  41347c:	d96d      	bls.n	41355a <__udivmoddi4+0x2be>
  41347e:	3802      	subs	r0, #2
  413480:	443d      	add	r5, r7
  413482:	1aeb      	subs	r3, r5, r3
  413484:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  413488:	e78f      	b.n	4133aa <__udivmoddi4+0x10e>
  41348a:	f1c1 0720 	rsb	r7, r1, #32
  41348e:	fa22 f807 	lsr.w	r8, r2, r7
  413492:	408b      	lsls	r3, r1
  413494:	fa05 f401 	lsl.w	r4, r5, r1
  413498:	ea48 0303 	orr.w	r3, r8, r3
  41349c:	fa20 fe07 	lsr.w	lr, r0, r7
  4134a0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4134a4:	40fd      	lsrs	r5, r7
  4134a6:	ea4e 0e04 	orr.w	lr, lr, r4
  4134aa:	fbb5 f9fc 	udiv	r9, r5, ip
  4134ae:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4134b2:	fb0c 5519 	mls	r5, ip, r9, r5
  4134b6:	fa1f f883 	uxth.w	r8, r3
  4134ba:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4134be:	fb09 f408 	mul.w	r4, r9, r8
  4134c2:	42ac      	cmp	r4, r5
  4134c4:	fa02 f201 	lsl.w	r2, r2, r1
  4134c8:	fa00 fa01 	lsl.w	sl, r0, r1
  4134cc:	d908      	bls.n	4134e0 <__udivmoddi4+0x244>
  4134ce:	18ed      	adds	r5, r5, r3
  4134d0:	f109 30ff 	add.w	r0, r9, #4294967295
  4134d4:	d243      	bcs.n	41355e <__udivmoddi4+0x2c2>
  4134d6:	42ac      	cmp	r4, r5
  4134d8:	d941      	bls.n	41355e <__udivmoddi4+0x2c2>
  4134da:	f1a9 0902 	sub.w	r9, r9, #2
  4134de:	441d      	add	r5, r3
  4134e0:	1b2d      	subs	r5, r5, r4
  4134e2:	fa1f fe8e 	uxth.w	lr, lr
  4134e6:	fbb5 f0fc 	udiv	r0, r5, ip
  4134ea:	fb0c 5510 	mls	r5, ip, r0, r5
  4134ee:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4134f2:	fb00 f808 	mul.w	r8, r0, r8
  4134f6:	45a0      	cmp	r8, r4
  4134f8:	d907      	bls.n	41350a <__udivmoddi4+0x26e>
  4134fa:	18e4      	adds	r4, r4, r3
  4134fc:	f100 35ff 	add.w	r5, r0, #4294967295
  413500:	d229      	bcs.n	413556 <__udivmoddi4+0x2ba>
  413502:	45a0      	cmp	r8, r4
  413504:	d927      	bls.n	413556 <__udivmoddi4+0x2ba>
  413506:	3802      	subs	r0, #2
  413508:	441c      	add	r4, r3
  41350a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  41350e:	eba4 0408 	sub.w	r4, r4, r8
  413512:	fba0 8902 	umull	r8, r9, r0, r2
  413516:	454c      	cmp	r4, r9
  413518:	46c6      	mov	lr, r8
  41351a:	464d      	mov	r5, r9
  41351c:	d315      	bcc.n	41354a <__udivmoddi4+0x2ae>
  41351e:	d012      	beq.n	413546 <__udivmoddi4+0x2aa>
  413520:	b156      	cbz	r6, 413538 <__udivmoddi4+0x29c>
  413522:	ebba 030e 	subs.w	r3, sl, lr
  413526:	eb64 0405 	sbc.w	r4, r4, r5
  41352a:	fa04 f707 	lsl.w	r7, r4, r7
  41352e:	40cb      	lsrs	r3, r1
  413530:	431f      	orrs	r7, r3
  413532:	40cc      	lsrs	r4, r1
  413534:	6037      	str	r7, [r6, #0]
  413536:	6074      	str	r4, [r6, #4]
  413538:	2100      	movs	r1, #0
  41353a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  41353e:	4618      	mov	r0, r3
  413540:	e6f8      	b.n	413334 <__udivmoddi4+0x98>
  413542:	4690      	mov	r8, r2
  413544:	e6e0      	b.n	413308 <__udivmoddi4+0x6c>
  413546:	45c2      	cmp	sl, r8
  413548:	d2ea      	bcs.n	413520 <__udivmoddi4+0x284>
  41354a:	ebb8 0e02 	subs.w	lr, r8, r2
  41354e:	eb69 0503 	sbc.w	r5, r9, r3
  413552:	3801      	subs	r0, #1
  413554:	e7e4      	b.n	413520 <__udivmoddi4+0x284>
  413556:	4628      	mov	r0, r5
  413558:	e7d7      	b.n	41350a <__udivmoddi4+0x26e>
  41355a:	4640      	mov	r0, r8
  41355c:	e791      	b.n	413482 <__udivmoddi4+0x1e6>
  41355e:	4681      	mov	r9, r0
  413560:	e7be      	b.n	4134e0 <__udivmoddi4+0x244>
  413562:	4601      	mov	r1, r0
  413564:	e778      	b.n	413458 <__udivmoddi4+0x1bc>
  413566:	3802      	subs	r0, #2
  413568:	443c      	add	r4, r7
  41356a:	e745      	b.n	4133f8 <__udivmoddi4+0x15c>
  41356c:	4608      	mov	r0, r1
  41356e:	e708      	b.n	413382 <__udivmoddi4+0xe6>
  413570:	f1a8 0802 	sub.w	r8, r8, #2
  413574:	443d      	add	r5, r7
  413576:	e72b      	b.n	4133d0 <__udivmoddi4+0x134>

Disassembly of section .text.deflate_fast%96:

00413578 <deflate_fast>:
{
  413578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

0041357c <.LCFI8>:
  41357c:	4604      	mov	r4, r0
  41357e:	4688      	mov	r8, r1

00413580 <.LBB21>:
            _tr_tally_lit (s, s->window[s->strstart], bflush);
  413580:	f241 65a4 	movw	r5, #5796	; 0x16a4
  413584:	4405      	add	r5, r0

00413586 <.LBB22>:
            _tr_tally_dist(s, s->strstart - s->match_start,
  413586:	4fa9      	ldr	r7, [pc, #676]	; (41382c <.LVL206>)
  413588:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 413830 <.LVL206+0x4>
  41358c:	e07e      	b.n	41368c <.LVL182>

0041358e <.LBE22>:
            fill_window(s);
  41358e:	4620      	mov	r0, r4
  413590:	f001 fbd0 	bl	414d34 <fill_window>

00413594 <.LVL168>:
            if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {
  413594:	6f63      	ldr	r3, [r4, #116]	; 0x74
  413596:	f1b8 0f00 	cmp.w	r8, #0
  41359a:	d103      	bne.n	4135a4 <.LVL168+0x10>
  41359c:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
  4135a0:	f0c0 813e 	bcc.w	413820 <.LVL203+0x18>
            if (s->lookahead == 0) break; /* flush the current block */
  4135a4:	2b00      	cmp	r3, #0
  4135a6:	d176      	bne.n	413696 <.LVL183>
    s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;
  4135a8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  4135aa:	4611      	mov	r1, r2
  4135ac:	2a02      	cmp	r2, #2
  4135ae:	bf28      	it	cs
  4135b0:	2102      	movcs	r1, #2
  4135b2:	f241 63b4 	movw	r3, #5812	; 0x16b4
  4135b6:	50e1      	str	r1, [r4, r3]
    if (flush == Z_FINISH) {
  4135b8:	f1b8 0f04 	cmp.w	r8, #4
  4135bc:	f000 8115 	beq.w	4137ea <.LVL201>
    if (s->last_lit)
  4135c0:	f504 53b5 	add.w	r3, r4, #5792	; 0x16a0
  4135c4:	681b      	ldr	r3, [r3, #0]
  4135c6:	2b00      	cmp	r3, #0
  4135c8:	f000 812d 	beq.w	413826 <.LVL203+0x1e>
        FLUSH_BLOCK(s, 0);
  4135cc:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  4135ce:	2800      	cmp	r0, #0
  4135d0:	f2c0 8124 	blt.w	41381c <.LVL203+0x14>
  4135d4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  4135d6:	4401      	add	r1, r0
  4135d8:	2300      	movs	r3, #0
  4135da:	1a12      	subs	r2, r2, r0
  4135dc:	4620      	mov	r0, r4
  4135de:	f7fb fe53 	bl	40f288 <_tr_flush_block>

004135e2 <.LVL169>:
  4135e2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  4135e4:	65e3      	str	r3, [r4, #92]	; 0x5c
  4135e6:	6820      	ldr	r0, [r4, #0]
  4135e8:	f009 fd72 	bl	41d0d0 <.LFE41>

004135ec <.LVL170>:
  4135ec:	6823      	ldr	r3, [r4, #0]
  4135ee:	6918      	ldr	r0, [r3, #16]
                return need_more;
  4135f0:	3000      	adds	r0, #0
  4135f2:	bf18      	it	ne
  4135f4:	2001      	movne	r0, #1
  4135f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

004135fa <.LVL171>:
            s->match_length = longest_match (s, hash_head);
  4135fa:	4620      	mov	r0, r4
  4135fc:	f002 f93a 	bl	415874 <.LFE1>

00413600 <.LVL172>:
  413600:	6620      	str	r0, [r4, #96]	; 0x60
  413602:	e06b      	b.n	4136dc <.LVL185>

00413604 <.LBB23>:
            _tr_tally_dist(s, s->strstart - s->match_start,
  413604:	eb09 13d3 	add.w	r3, r9, r3, lsr #7

00413608 <.LVL174>:
  413608:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
  41360c:	e08f      	b.n	41372e <.LVL193>

0041360e <.LBE23>:
                s->strstart += s->match_length;
  41360e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  413610:	4413      	add	r3, r2
  413612:	66e3      	str	r3, [r4, #108]	; 0x6c
                s->match_length = 0;
  413614:	2200      	movs	r2, #0
  413616:	6622      	str	r2, [r4, #96]	; 0x60
                s->ins_h = s->window[s->strstart];
  413618:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  41361a:	5cca      	ldrb	r2, [r1, r3]
  41361c:	64a2      	str	r2, [r4, #72]	; 0x48
                UPDATE_HASH(s, s->ins_h, s->window[s->strstart+1]);
  41361e:	440b      	add	r3, r1
  413620:	785b      	ldrb	r3, [r3, #1]
  413622:	6da1      	ldr	r1, [r4, #88]	; 0x58
  413624:	408a      	lsls	r2, r1
  413626:	4053      	eors	r3, r2
  413628:	6d62      	ldr	r2, [r4, #84]	; 0x54
  41362a:	4013      	ands	r3, r2
  41362c:	64a3      	str	r3, [r4, #72]	; 0x48
  41362e:	e02a      	b.n	413686 <.LBE24+0xc>

00413630 <.LBB24>:
            _tr_tally_lit (s, s->window[s->strstart], bflush);
  413630:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  413632:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  413634:	5cd3      	ldrb	r3, [r2, r3]

00413636 <.LVL177>:
  413636:	f504 52b5 	add.w	r2, r4, #5792	; 0x16a0
  41363a:	6810      	ldr	r0, [r2, #0]
  41363c:	6829      	ldr	r1, [r5, #0]
  41363e:	f04f 0e00 	mov.w	lr, #0
  413642:	f821 e010 	strh.w	lr, [r1, r0, lsl #1]
  413646:	f241 6198 	movw	r1, #5784	; 0x1698
  41364a:	5860      	ldr	r0, [r4, r1]
  41364c:	6811      	ldr	r1, [r2, #0]
  41364e:	f101 0e01 	add.w	lr, r1, #1
  413652:	f8c2 e000 	str.w	lr, [r2]
  413656:	5443      	strb	r3, [r0, r1]
  413658:	eb04 0383 	add.w	r3, r4, r3, lsl #2

0041365c <.LVL178>:
  41365c:	f8b3 1094 	ldrh.w	r1, [r3, #148]	; 0x94

00413660 <.LVL179>:
  413660:	3101      	adds	r1, #1
  413662:	f8a3 1094 	strh.w	r1, [r3, #148]	; 0x94

00413666 <.LVL180>:
  413666:	f241 639c 	movw	r3, #5788	; 0x169c
  41366a:	58e3      	ldr	r3, [r4, r3]
  41366c:	f103 3eff 	add.w	lr, r3, #4294967295
  413670:	6810      	ldr	r0, [r2, #0]
  413672:	4586      	cmp	lr, r0
  413674:	bf14      	ite	ne
  413676:	2000      	movne	r0, #0
  413678:	2001      	moveq	r0, #1

0041367a <.LBE24>:
            s->lookahead--;
  41367a:	6f63      	ldr	r3, [r4, #116]	; 0x74
  41367c:	3b01      	subs	r3, #1
  41367e:	6763      	str	r3, [r4, #116]	; 0x74
            s->strstart++;
  413680:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  413682:	3301      	adds	r3, #1
  413684:	66e3      	str	r3, [r4, #108]	; 0x6c
        if (bflush) FLUSH_BLOCK(s, 0);
  413686:	2800      	cmp	r0, #0
  413688:	f040 8095 	bne.w	4137b6 <.LVL196+0x16>

0041368c <.LVL182>:
        if (s->lookahead < MIN_LOOKAHEAD) {
  41368c:	6f63      	ldr	r3, [r4, #116]	; 0x74
  41368e:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
  413692:	f4ff af7c 	bcc.w	41358e <.LBE22>

00413696 <.LVL183>:
        if (s->lookahead >= MIN_MATCH) {
  413696:	6f63      	ldr	r3, [r4, #116]	; 0x74
  413698:	2b02      	cmp	r3, #2
  41369a:	d91f      	bls.n	4136dc <.LVL185>
            INSERT_STRING(s, s->strstart, hash_head);
  41369c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  41369e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4136a0:	4413      	add	r3, r2
  4136a2:	789b      	ldrb	r3, [r3, #2]
  4136a4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  4136a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4136a8:	4081      	lsls	r1, r0
  4136aa:	404b      	eors	r3, r1
  4136ac:	6d61      	ldr	r1, [r4, #84]	; 0x54
  4136ae:	400b      	ands	r3, r1
  4136b0:	64a3      	str	r3, [r4, #72]	; 0x48
  4136b2:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4136b4:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
  4136b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
  4136ba:	401a      	ands	r2, r3
  4136bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4136be:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

004136c2 <.LVL184>:
  4136c2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  4136c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4136c6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  4136c8:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
        if (hash_head != NIL && s->strstart - hash_head <= MAX_DIST(s)) {
  4136cc:	b131      	cbz	r1, 4136dc <.LVL185>
  4136ce:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  4136d0:	1a5a      	subs	r2, r3, r1
  4136d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4136d4:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
  4136d8:	429a      	cmp	r2, r3
  4136da:	d98e      	bls.n	4135fa <.LVL171>

004136dc <.LVL185>:
        if (s->match_length >= MIN_MATCH) {
  4136dc:	6e23      	ldr	r3, [r4, #96]	; 0x60
  4136de:	2b02      	cmp	r3, #2
  4136e0:	d9a6      	bls.n	413630 <.LBB24>

004136e2 <.LBB25>:
            _tr_tally_dist(s, s->strstart - s->match_start,
  4136e2:	3b03      	subs	r3, #3
  4136e4:	b2da      	uxtb	r2, r3

004136e6 <.LVL186>:
  4136e6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  4136e8:	6f21      	ldr	r1, [r4, #112]	; 0x70
  4136ea:	1a5b      	subs	r3, r3, r1
  4136ec:	b29b      	uxth	r3, r3

004136ee <.LVL187>:
  4136ee:	f504 5eb5 	add.w	lr, r4, #5792	; 0x16a0
  4136f2:	f8de 0000 	ldr.w	r0, [lr]
  4136f6:	6829      	ldr	r1, [r5, #0]
  4136f8:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
  4136fc:	f241 6198 	movw	r1, #5784	; 0x1698
  413700:	5860      	ldr	r0, [r4, r1]
  413702:	f8de 1000 	ldr.w	r1, [lr]
  413706:	f101 0c01 	add.w	ip, r1, #1
  41370a:	f8ce c000 	str.w	ip, [lr]
  41370e:	5442      	strb	r2, [r0, r1]
  413710:	3b01      	subs	r3, #1

00413712 <.LVL188>:
  413712:	b29b      	uxth	r3, r3

00413714 <.LVL189>:
  413714:	5cba      	ldrb	r2, [r7, r2]

00413716 <.LVL190>:
  413716:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  41371a:	f8b2 1498 	ldrh.w	r1, [r2, #1176]	; 0x498

0041371e <.LVL191>:
  41371e:	3101      	adds	r1, #1
  413720:	f8a2 1498 	strh.w	r1, [r2, #1176]	; 0x498

00413724 <.LVL192>:
  413724:	2bff      	cmp	r3, #255	; 0xff
  413726:	f63f af6d 	bhi.w	413604 <.LBB23>
  41372a:	f819 3003 	ldrb.w	r3, [r9, r3]

0041372e <.LVL193>:
  41372e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  413732:	f8b3 2988 	ldrh.w	r2, [r3, #2440]	; 0x988
  413736:	3201      	adds	r2, #1
  413738:	f8a3 2988 	strh.w	r2, [r3, #2440]	; 0x988
  41373c:	f241 639c 	movw	r3, #5788	; 0x169c
  413740:	58e3      	ldr	r3, [r4, r3]
  413742:	f103 3eff 	add.w	lr, r3, #4294967295
  413746:	f504 53b5 	add.w	r3, r4, #5792	; 0x16a0
  41374a:	6818      	ldr	r0, [r3, #0]
  41374c:	4586      	cmp	lr, r0
  41374e:	bf14      	ite	ne
  413750:	2000      	movne	r0, #0
  413752:	2001      	moveq	r0, #1

00413754 <.LBE25>:
            s->lookahead -= s->match_length;
  413754:	6e23      	ldr	r3, [r4, #96]	; 0x60
  413756:	6f62      	ldr	r2, [r4, #116]	; 0x74
  413758:	1ad2      	subs	r2, r2, r3
  41375a:	6762      	str	r2, [r4, #116]	; 0x74
            if (s->match_length <= s->max_insert_length &&
  41375c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
  413760:	428b      	cmp	r3, r1
  413762:	f63f af54 	bhi.w	41360e <.LBE23>
  413766:	2a02      	cmp	r2, #2
  413768:	f67f af51 	bls.w	41360e <.LBE23>
                s->match_length--; /* string at strstart already in table */
  41376c:	3b01      	subs	r3, #1
  41376e:	6623      	str	r3, [r4, #96]	; 0x60
                    s->strstart++;
  413770:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  413772:	1c4a      	adds	r2, r1, #1
  413774:	66e2      	str	r2, [r4, #108]	; 0x6c
                    INSERT_STRING(s, s->strstart, hash_head);
  413776:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  413778:	440b      	add	r3, r1
  41377a:	78db      	ldrb	r3, [r3, #3]
  41377c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  41377e:	6da6      	ldr	r6, [r4, #88]	; 0x58
  413780:	40b1      	lsls	r1, r6
  413782:	404b      	eors	r3, r1
  413784:	6d61      	ldr	r1, [r4, #84]	; 0x54
  413786:	400b      	ands	r3, r1
  413788:	64a3      	str	r3, [r4, #72]	; 0x48
  41378a:	6c61      	ldr	r1, [r4, #68]	; 0x44
  41378c:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
  413790:	6b63      	ldr	r3, [r4, #52]	; 0x34
  413792:	401a      	ands	r2, r3
  413794:	6c23      	ldr	r3, [r4, #64]	; 0x40
  413796:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

0041379a <.LVL195>:
  41379a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  41379c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  41379e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c

004137a0 <.LVL196>:
  4137a0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
                } while (--s->match_length != 0);
  4137a4:	6e23      	ldr	r3, [r4, #96]	; 0x60
  4137a6:	3b01      	subs	r3, #1
  4137a8:	6623      	str	r3, [r4, #96]	; 0x60
  4137aa:	2b00      	cmp	r3, #0
  4137ac:	d1e0      	bne.n	413770 <.LBE25+0x1c>
                s->strstart++;
  4137ae:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  4137b0:	3301      	adds	r3, #1
  4137b2:	66e3      	str	r3, [r4, #108]	; 0x6c
  4137b4:	e767      	b.n	413686 <.LBE24+0xc>
        if (bflush) FLUSH_BLOCK(s, 0);
  4137b6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  4137b8:	2a00      	cmp	r2, #0
  4137ba:	db14      	blt.n	4137e6 <.LVL200>
  4137bc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  4137be:	4411      	add	r1, r2
  4137c0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c

004137c2 <.LVL197>:
  4137c2:	2300      	movs	r3, #0
  4137c4:	1a82      	subs	r2, r0, r2
  4137c6:	4620      	mov	r0, r4
  4137c8:	f7fb fd5e 	bl	40f288 <_tr_flush_block>

004137cc <.LVL198>:
  4137cc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  4137ce:	65e3      	str	r3, [r4, #92]	; 0x5c
  4137d0:	6820      	ldr	r0, [r4, #0]
  4137d2:	f009 fc7d 	bl	41d0d0 <.LFE41>

004137d6 <.LVL199>:
  4137d6:	6823      	ldr	r3, [r4, #0]
  4137d8:	691b      	ldr	r3, [r3, #16]
  4137da:	2b00      	cmp	r3, #0
  4137dc:	f47f af56 	bne.w	41368c <.LVL182>
  4137e0:	2000      	movs	r0, #0
  4137e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

004137e6 <.LVL200>:
  4137e6:	2100      	movs	r1, #0
  4137e8:	e7ea      	b.n	4137c0 <.LVL196+0x20>

004137ea <.LVL201>:
        FLUSH_BLOCK(s, 1);
  4137ea:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  4137ec:	2800      	cmp	r0, #0
  4137ee:	db13      	blt.n	413818 <.LVL203+0x10>
  4137f0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  4137f2:	4401      	add	r1, r0
  4137f4:	2301      	movs	r3, #1
  4137f6:	1a12      	subs	r2, r2, r0
  4137f8:	4620      	mov	r0, r4
  4137fa:	f7fb fd45 	bl	40f288 <_tr_flush_block>

004137fe <.LVL202>:
  4137fe:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  413800:	65e3      	str	r3, [r4, #92]	; 0x5c
  413802:	6820      	ldr	r0, [r4, #0]
  413804:	f009 fc64 	bl	41d0d0 <.LFE41>

00413808 <.LVL203>:
  413808:	6823      	ldr	r3, [r4, #0]
  41380a:	691b      	ldr	r3, [r3, #16]
        return finish_done;
  41380c:	2b00      	cmp	r3, #0
  41380e:	bf0c      	ite	eq
  413810:	2002      	moveq	r0, #2
  413812:	2003      	movne	r0, #3
  413814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        FLUSH_BLOCK(s, 1);
  413818:	2100      	movs	r1, #0
  41381a:	e7eb      	b.n	4137f4 <.LVL201+0xa>
        FLUSH_BLOCK(s, 0);
  41381c:	2100      	movs	r1, #0
  41381e:	e6db      	b.n	4135d8 <.LVL168+0x44>
                return need_more;
  413820:	2000      	movs	r0, #0
  413822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return block_done;
  413826:	2001      	movs	r0, #1
}
  413828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0041382c <.LVL206>:
  41382c:	00417964 	.word	0x00417964
  413830:	00414b34 	.word	0x00414b34

Disassembly of section .text.crc32%97:

00413834 <crc32>:
unsigned long ZEXPORT crc32(crc, buf, len)
    unsigned long crc;
    const unsigned char FAR *buf;
    uInt len;
{
    if (buf == Z_NULL) return 0UL;
  413834:	2900      	cmp	r1, #0
  413836:	f000 814b 	beq.w	413ad0 <.LBE5>
{
  41383a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0041383e <.LCFI4>:
  41383e:	460c      	mov	r4, r1

00413840 <.LBB5>:
{
    register z_crc_t c;
    register const z_crc_t FAR *buf4;

    c = (z_crc_t)crc;
    c = ~c;
  413840:	43c0      	mvns	r0, r0

00413842 <.LVL36>:
    while (len && ((ptrdiff_t)buf & 3)) {
  413842:	2a00      	cmp	r2, #0
  413844:	f000 8146 	beq.w	413ad4 <.LBB10>
  413848:	f011 0f03 	tst.w	r1, #3
  41384c:	f000 813e 	beq.w	413acc <.LVL85>
        c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
  413850:	49a1      	ldr	r1, [pc, #644]	; (413ad8 <.LBB10+0x4>)

00413852 <.LVL37>:
  413852:	f814 3b01 	ldrb.w	r3, [r4], #1

00413856 <.LVL38>:
  413856:	4043      	eors	r3, r0
  413858:	b2db      	uxtb	r3, r3
  41385a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  41385e:	ea83 2010 	eor.w	r0, r3, r0, lsr #8

00413862 <.LVL39>:
    while (len && ((ptrdiff_t)buf & 3)) {
  413862:	3a01      	subs	r2, #1

00413864 <.LVL40>:
  413864:	f000 812f 	beq.w	413ac6 <.LVL83>
  413868:	f014 0f03 	tst.w	r4, #3
  41386c:	d1f1      	bne.n	413852 <.LVL37>
        c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
  41386e:	46a0      	mov	r8, r4

00413870 <.LVL41>:
        len--;
    }

    buf4 = (const z_crc_t FAR *)(const void FAR *)buf;
    while (len >= 32) {
  413870:	2a1f      	cmp	r2, #31
  413872:	f240 80ed 	bls.w	413a50 <.LVL70>
  413876:	f108 0520 	add.w	r5, r8, #32
  41387a:	4616      	mov	r6, r2
        DOLIT32;
  41387c:	4b96      	ldr	r3, [pc, #600]	; (413ad8 <.LBB10+0x4>)

0041387e <.LVL42>:
  41387e:	f855 1c20 	ldr.w	r1, [r5, #-32]
  413882:	4048      	eors	r0, r1
  413884:	f3c0 4107 	ubfx	r1, r0, #16, #8
  413888:	f501 7180 	add.w	r1, r1, #256	; 0x100
  41388c:	f853 e021 	ldr.w	lr, [r3, r1, lsl #2]

00413890 <.LVL44>:
  413890:	b2c1      	uxtb	r1, r0
  413892:	f501 7140 	add.w	r1, r1, #768	; 0x300
  413896:	ea4f 6c10 	mov.w	ip, r0, lsr #24
  41389a:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
  41389e:	f853 102c 	ldr.w	r1, [r3, ip, lsl #2]
  4138a2:	404f      	eors	r7, r1
  4138a4:	f855 1c1c 	ldr.w	r1, [r5, #-28]
  4138a8:	404f      	eors	r7, r1
  4138aa:	f3c0 2007 	ubfx	r0, r0, #8, #8

004138ae <.LVL45>:
  4138ae:	f500 7000 	add.w	r0, r0, #512	; 0x200
  4138b2:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
  4138b6:	4079      	eors	r1, r7
  4138b8:	ea8e 0101 	eor.w	r1, lr, r1

004138bc <.LVL46>:
  4138bc:	f3c1 4007 	ubfx	r0, r1, #16, #8
  4138c0:	f500 7080 	add.w	r0, r0, #256	; 0x100
  4138c4:	f853 e020 	ldr.w	lr, [r3, r0, lsl #2]

004138c8 <.LVL47>:
  4138c8:	b2c8      	uxtb	r0, r1
  4138ca:	f500 7040 	add.w	r0, r0, #768	; 0x300
  4138ce:	ea4f 6c11 	mov.w	ip, r1, lsr #24
  4138d2:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
  4138d6:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
  4138da:	4047      	eors	r7, r0
  4138dc:	f855 0c18 	ldr.w	r0, [r5, #-24]
  4138e0:	4047      	eors	r7, r0
  4138e2:	f3c1 2107 	ubfx	r1, r1, #8, #8

004138e6 <.LVL48>:
  4138e6:	f501 7100 	add.w	r1, r1, #512	; 0x200
  4138ea:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  4138ee:	4078      	eors	r0, r7
  4138f0:	ea8e 0000 	eor.w	r0, lr, r0

004138f4 <.LVL49>:
  4138f4:	f3c0 4107 	ubfx	r1, r0, #16, #8
  4138f8:	f501 7180 	add.w	r1, r1, #256	; 0x100
  4138fc:	f853 e021 	ldr.w	lr, [r3, r1, lsl #2]

00413900 <.LVL50>:
  413900:	b2c1      	uxtb	r1, r0
  413902:	f501 7140 	add.w	r1, r1, #768	; 0x300
  413906:	ea4f 6c10 	mov.w	ip, r0, lsr #24
  41390a:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
  41390e:	f853 102c 	ldr.w	r1, [r3, ip, lsl #2]
  413912:	404f      	eors	r7, r1
  413914:	f855 1c14 	ldr.w	r1, [r5, #-20]
  413918:	404f      	eors	r7, r1
  41391a:	f3c0 2007 	ubfx	r0, r0, #8, #8

0041391e <.LVL51>:
  41391e:	f500 7000 	add.w	r0, r0, #512	; 0x200
  413922:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
  413926:	4079      	eors	r1, r7
  413928:	ea8e 0101 	eor.w	r1, lr, r1

0041392c <.LVL52>:
  41392c:	f3c1 4007 	ubfx	r0, r1, #16, #8
  413930:	f500 7080 	add.w	r0, r0, #256	; 0x100
  413934:	f853 e020 	ldr.w	lr, [r3, r0, lsl #2]

00413938 <.LVL53>:
  413938:	b2c8      	uxtb	r0, r1
  41393a:	f500 7040 	add.w	r0, r0, #768	; 0x300
  41393e:	0e0f      	lsrs	r7, r1, #24
  413940:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  413944:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
  413948:	4078      	eors	r0, r7
  41394a:	f855 7c10 	ldr.w	r7, [r5, #-16]
  41394e:	4078      	eors	r0, r7
  413950:	f3c1 2107 	ubfx	r1, r1, #8, #8

00413954 <.LVL54>:
  413954:	f501 7100 	add.w	r1, r1, #512	; 0x200
  413958:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  41395c:	4048      	eors	r0, r1
  41395e:	ea80 000e 	eor.w	r0, r0, lr

00413962 <.LVL55>:
  413962:	f3c0 4107 	ubfx	r1, r0, #16, #8
  413966:	f501 7180 	add.w	r1, r1, #256	; 0x100
  41396a:	f853 e021 	ldr.w	lr, [r3, r1, lsl #2]

0041396e <.LVL56>:
  41396e:	b2c1      	uxtb	r1, r0
  413970:	f501 7140 	add.w	r1, r1, #768	; 0x300
  413974:	0e07      	lsrs	r7, r0, #24
  413976:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  41397a:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
  41397e:	4079      	eors	r1, r7
  413980:	f855 7c0c 	ldr.w	r7, [r5, #-12]
  413984:	4079      	eors	r1, r7
  413986:	f3c0 2007 	ubfx	r0, r0, #8, #8

0041398a <.LVL57>:
  41398a:	f500 7000 	add.w	r0, r0, #512	; 0x200
  41398e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  413992:	4041      	eors	r1, r0
  413994:	ea81 010e 	eor.w	r1, r1, lr

00413998 <.LVL58>:
  413998:	f3c1 4007 	ubfx	r0, r1, #16, #8
  41399c:	f500 7080 	add.w	r0, r0, #256	; 0x100
  4139a0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

004139a4 <.LVL59>:
  4139a4:	b2cf      	uxtb	r7, r1
  4139a6:	f507 7740 	add.w	r7, r7, #768	; 0x300
  4139aa:	ea4f 6e11 	mov.w	lr, r1, lsr #24
  4139ae:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
  4139b2:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
  4139b6:	ea87 070e 	eor.w	r7, r7, lr
  4139ba:	f855 4c08 	ldr.w	r4, [r5, #-8]
  4139be:	4067      	eors	r7, r4
  4139c0:	f3c1 2107 	ubfx	r1, r1, #8, #8

004139c4 <.LVL60>:
  4139c4:	f501 7100 	add.w	r1, r1, #512	; 0x200
  4139c8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  4139cc:	4079      	eors	r1, r7
  4139ce:	4048      	eors	r0, r1

004139d0 <.LVL61>:
  4139d0:	f3c0 4107 	ubfx	r1, r0, #16, #8
  4139d4:	f501 7180 	add.w	r1, r1, #256	; 0x100
  4139d8:	f853 e021 	ldr.w	lr, [r3, r1, lsl #2]

004139dc <.LVL62>:
  4139dc:	b2c1      	uxtb	r1, r0
  4139de:	f501 7140 	add.w	r1, r1, #768	; 0x300
  4139e2:	0e07      	lsrs	r7, r0, #24
  4139e4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  4139e8:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
  4139ec:	4079      	eors	r1, r7
  4139ee:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4139f2:	4079      	eors	r1, r7
  4139f4:	f3c0 2007 	ubfx	r0, r0, #8, #8

004139f8 <.LVL63>:
  4139f8:	f500 7000 	add.w	r0, r0, #512	; 0x200
  4139fc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  413a00:	4041      	eors	r1, r0
  413a02:	ea8e 0101 	eor.w	r1, lr, r1

00413a06 <.LVL64>:
  413a06:	f3c1 4007 	ubfx	r0, r1, #16, #8
  413a0a:	f500 7080 	add.w	r0, r0, #256	; 0x100
  413a0e:	f853 e020 	ldr.w	lr, [r3, r0, lsl #2]
  413a12:	b2cf      	uxtb	r7, r1
  413a14:	f507 7740 	add.w	r7, r7, #768	; 0x300
  413a18:	0e08      	lsrs	r0, r1, #24
  413a1a:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
  413a1e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  413a22:	4047      	eors	r7, r0
  413a24:	f3c1 2107 	ubfx	r1, r1, #8, #8

00413a28 <.LVL65>:
  413a28:	f501 7100 	add.w	r1, r1, #512	; 0x200
  413a2c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  413a30:	4078      	eors	r0, r7
  413a32:	ea8e 0000 	eor.w	r0, lr, r0

00413a36 <.LVL66>:
        len -= 32;
  413a36:	3e20      	subs	r6, #32
  413a38:	3520      	adds	r5, #32

00413a3a <.LVL68>:
    while (len >= 32) {
  413a3a:	2e1f      	cmp	r6, #31
  413a3c:	f63f af1f 	bhi.w	41387e <.LVL42>
  413a40:	f1a2 0320 	sub.w	r3, r2, #32
  413a44:	f023 031f 	bic.w	r3, r3, #31
  413a48:	3320      	adds	r3, #32
  413a4a:	4498      	add	r8, r3

00413a4c <.LVL69>:
  413a4c:	f002 021f 	and.w	r2, r2, #31

00413a50 <.LVL70>:
    }
    while (len >= 4) {
  413a50:	2a03      	cmp	r2, #3
  413a52:	d927      	bls.n	413aa4 <.LVL77>
  413a54:	4616      	mov	r6, r2
  413a56:	4647      	mov	r7, r8
        DOLIT4;
  413a58:	4d1f      	ldr	r5, [pc, #124]	; (413ad8 <.LBB10+0x4>)

00413a5a <.LVL71>:
  413a5a:	f857 3b04 	ldr.w	r3, [r7], #4

00413a5e <.LVL72>:
  413a5e:	4043      	eors	r3, r0

00413a60 <.LVL73>:
  413a60:	f3c3 4107 	ubfx	r1, r3, #16, #8
  413a64:	f501 7180 	add.w	r1, r1, #256	; 0x100
  413a68:	f855 e021 	ldr.w	lr, [r5, r1, lsl #2]
  413a6c:	b2d9      	uxtb	r1, r3
  413a6e:	f501 7140 	add.w	r1, r1, #768	; 0x300
  413a72:	0e18      	lsrs	r0, r3, #24
  413a74:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
  413a78:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
  413a7c:	4041      	eors	r1, r0
  413a7e:	f3c3 2307 	ubfx	r3, r3, #8, #8

00413a82 <.LVL74>:
  413a82:	f503 7300 	add.w	r3, r3, #512	; 0x200
  413a86:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
  413a8a:	4048      	eors	r0, r1
  413a8c:	ea8e 0000 	eor.w	r0, lr, r0

00413a90 <.LVL75>:
        len -= 4;
  413a90:	3e04      	subs	r6, #4

00413a92 <.LVL76>:
    while (len >= 4) {
  413a92:	2e03      	cmp	r6, #3
  413a94:	d8e1      	bhi.n	413a5a <.LVL71>
  413a96:	1f13      	subs	r3, r2, #4
  413a98:	f023 0303 	bic.w	r3, r3, #3
  413a9c:	3304      	adds	r3, #4
  413a9e:	4498      	add	r8, r3
  413aa0:	f002 0203 	and.w	r2, r2, #3

00413aa4 <.LVL77>:
    }
    buf = (const unsigned char FAR *)buf4;

    if (len) do {
  413aa4:	b162      	cbz	r2, 413ac0 <.LVL81>
  413aa6:	4442      	add	r2, r8
  413aa8:	4644      	mov	r4, r8
        c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
  413aaa:	490b      	ldr	r1, [pc, #44]	; (413ad8 <.LBB10+0x4>)

00413aac <.LVL78>:
  413aac:	f814 3b01 	ldrb.w	r3, [r4], #1

00413ab0 <.LVL79>:
  413ab0:	4043      	eors	r3, r0
  413ab2:	b2db      	uxtb	r3, r3
  413ab4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  413ab8:	ea83 2010 	eor.w	r0, r3, r0, lsr #8
    } while (--len);
  413abc:	42a2      	cmp	r2, r4
  413abe:	d1f5      	bne.n	413aac <.LVL78>

00413ac0 <.LVL81>:
    c = ~c;
  413ac0:	43c0      	mvns	r0, r0

00413ac2 <.LVL82>:
  413ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00413ac6 <.LVL83>:
        c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
  413ac6:	46a0      	mov	r8, r4

00413ac8 <.LVL84>:
    while (len >= 4) {
  413ac8:	2200      	movs	r2, #0
  413aca:	e7eb      	b.n	413aa4 <.LVL77>

00413acc <.LVL85>:
    while (len && ((ptrdiff_t)buf & 3)) {
  413acc:	4688      	mov	r8, r1
  413ace:	e6cf      	b.n	413870 <.LVL41>

00413ad0 <.LBE5>:
    if (buf == Z_NULL) return 0UL;
  413ad0:	2000      	movs	r0, #0

00413ad2 <.LVL87>:
  413ad2:	4770      	bx	lr

00413ad4 <.LBB10>:
    while (len && ((ptrdiff_t)buf & 3)) {
  413ad4:	4688      	mov	r8, r1
  413ad6:	e7f7      	b.n	413ac8 <.LVL84>
  413ad8:	004028e8 	.word	0x004028e8

Disassembly of section .text.wc_Sha512Final%98:

00413ae0 <wc_Sha512Final>:

int wc_Sha512Final(Sha512* sha512, byte* hash)
{
    int ret;

    if (sha512 == NULL || hash == NULL) {
  413ae0:	2800      	cmp	r0, #0
  413ae2:	f000 8120 	beq.w	413d26 <.LBE801>
{
  413ae6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00413aea <.LCFI7>:
  413aea:	b083      	sub	sp, #12

00413aec <.LCFI8>:
  413aec:	468e      	mov	lr, r1
  413aee:	4601      	mov	r1, r0

00413af0 <.LVL46>:
    if (sha512 == NULL || hash == NULL) {
  413af0:	f1be 0f00 	cmp.w	lr, #0
  413af4:	f000 8111 	beq.w	413d1a <.LBE799>

00413af8 <.LBB762>:
    byte* local = (byte*)sha512->buffer;
  413af8:	f100 0358 	add.w	r3, r0, #88	; 0x58
  413afc:	9301      	str	r3, [sp, #4]

00413afe <.LVL48>:
    if (sha512 == NULL) {
  413afe:	2800      	cmp	r0, #0
  413b00:	f000 810e 	beq.w	413d20 <.LBB801>
    AddLength(sha512, sha512->buffLen);               /* before adding pads */
  413b04:	6800      	ldr	r0, [r0, #0]

00413b06 <.LBB764>:
    word64 tmp = sha512->loLen;
  413b06:	e9d1 2302 	ldrd	r2, r3, [r1, #8]

00413b0a <.LVL50>:
    if ( (sha512->loLen += len) < tmp)
  413b0a:	eb12 0a00 	adds.w	sl, r2, r0
  413b0e:	f143 0b00 	adc.w	fp, r3, #0
  413b12:	e9c1 ab02 	strd	sl, fp, [r1, #8]
  413b16:	459b      	cmp	fp, r3
  413b18:	bf08      	it	eq
  413b1a:	4592      	cmpeq	sl, r2
  413b1c:	d206      	bcs.n	413b2c <.LVL52+0x4>
        sha512->hiLen++;                       /* carry low to high */
  413b1e:	e9d1 2304 	ldrd	r2, r3, [r1, #16]

00413b22 <.LVL51>:
  413b22:	3201      	adds	r2, #1
  413b24:	f143 0300 	adc.w	r3, r3, #0

00413b28 <.LVL52>:
  413b28:	e9c1 2304 	strd	r2, r3, [r1, #16]
  413b2c:	468a      	mov	sl, r1
  413b2e:	46f3      	mov	fp, lr

00413b30 <.LBE764>:
    local[sha512->buffLen++] = 0x80;  /* add 1 */
  413b30:	1c43      	adds	r3, r0, #1
  413b32:	600b      	str	r3, [r1, #0]
  413b34:	2380      	movs	r3, #128	; 0x80
  413b36:	9a01      	ldr	r2, [sp, #4]
  413b38:	5413      	strb	r3, [r2, r0]
    if (sha512->buffLen > SHA512_PAD_SIZE) {
  413b3a:	6808      	ldr	r0, [r1, #0]
  413b3c:	2870      	cmp	r0, #112	; 0x70
  413b3e:	d92f      	bls.n	413ba0 <.LVL61>

00413b40 <.LVL54>:
        XMEMSET(&local[sha512->buffLen], 0, SHA512_BLOCK_SIZE - sha512->buffLen);
  413b40:	1a1a      	subs	r2, r3, r0
  413b42:	2100      	movs	r1, #0

00413b44 <.LVL55>:
  413b44:	9b01      	ldr	r3, [sp, #4]
  413b46:	4418      	add	r0, r3
  413b48:	f006 fd52 	bl	41a5f0 <.LFE157>

00413b4c <.LVL56>:
        sha512->buffLen += SHA512_BLOCK_SIZE - sha512->buffLen;
  413b4c:	4652      	mov	r2, sl
  413b4e:	2380      	movs	r3, #128	; 0x80
  413b50:	f842 3b50 	str.w	r3, [r2], #80

00413b54 <.LVL57>:
  413b54:	f10a 0ed0 	add.w	lr, sl, #208	; 0xd0

00413b58 <.LBB766>:
        out[i] = ByteReverseWord64(in[i]);
  413b58:	6893      	ldr	r3, [r2, #8]
  413b5a:	68d1      	ldr	r1, [r2, #12]

00413b5c <.LBB768>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  413b5c:	0a18      	lsrs	r0, r3, #8
  413b5e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  413b62:	021b      	lsls	r3, r3, #8
  413b64:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  413b68:	4303      	orrs	r3, r0

00413b6a <.LBE770>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  413b6a:	ea4f 4733 	mov.w	r7, r3, ror #16
  413b6e:	2600      	movs	r6, #0

00413b70 <.LBB772>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  413b70:	0a0b      	lsrs	r3, r1, #8
  413b72:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  413b76:	0209      	lsls	r1, r1, #8
  413b78:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  413b7c:	430b      	orrs	r3, r1

00413b7e <.LBB774>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  413b7e:	ea4f 4333 	mov.w	r3, r3, ror #16

00413b82 <.LBE772>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  413b82:	ea46 0003 	orr.w	r0, r6, r3
  413b86:	4639      	mov	r1, r7

00413b88 <.LBE768>:
        out[i] = ByteReverseWord64(in[i]);
  413b88:	e9e2 0102 	strd	r0, r1, [r2, #8]!
    for (i = 0; i < count; i++)
  413b8c:	4572      	cmp	r2, lr
  413b8e:	d1e3      	bne.n	413b58 <.LBB766>

00413b90 <.LBE766>:
        ret = Transform(sha512);
  413b90:	4650      	mov	r0, sl
  413b92:	f7ec faff 	bl	400194 <_etext>

00413b96 <.LVL60>:
        if (ret != 0)
  413b96:	4602      	mov	r2, r0
  413b98:	2800      	cmp	r0, #0
  413b9a:	d151      	bne.n	413c40 <.LBE762>
        sha512->buffLen = 0;
  413b9c:	f8ca 6000 	str.w	r6, [sl]

00413ba0 <.LVL61>:
    XMEMSET(&local[sha512->buffLen], 0, SHA512_PAD_SIZE - sha512->buffLen);
  413ba0:	f8da 0000 	ldr.w	r0, [sl]
  413ba4:	f1c0 0270 	rsb	r2, r0, #112	; 0x70
  413ba8:	2100      	movs	r1, #0
  413baa:	9b01      	ldr	r3, [sp, #4]
  413bac:	4418      	add	r0, r3
  413bae:	f006 fd1f 	bl	41a5f0 <.LFE157>

00413bb2 <.LVL62>:
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
  413bb2:	f8da 7008 	ldr.w	r7, [sl, #8]
  413bb6:	f8da 600c 	ldr.w	r6, [sl, #12]
                                                         (sha512->hiLen << 3);
  413bba:	f8da 2010 	ldr.w	r2, [sl, #16]
  413bbe:	f8da 3014 	ldr.w	r3, [sl, #20]
  413bc2:	00d9      	lsls	r1, r3, #3
  413bc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
  413bc8:	00d0      	lsls	r0, r2, #3
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
  413bca:	0f72      	lsrs	r2, r6, #29
  413bcc:	2300      	movs	r3, #0
  413bce:	1812      	adds	r2, r2, r0
  413bd0:	414b      	adcs	r3, r1
  413bd2:	e9ca 2304 	strd	r2, r3, [sl, #16]
    sha512->loLen = sha512->loLen << 3;
  413bd6:	00f6      	lsls	r6, r6, #3
  413bd8:	ea46 7657 	orr.w	r6, r6, r7, lsr #29
  413bdc:	00ff      	lsls	r7, r7, #3
  413bde:	f8ca 7008 	str.w	r7, [sl, #8]
  413be2:	f8ca 600c 	str.w	r6, [sl, #12]

00413be6 <.LVL63>:
  413be6:	f10a 0250 	add.w	r2, sl, #80	; 0x50
  413bea:	f10a 06c0 	add.w	r6, sl, #192	; 0xc0

00413bee <.LBB776>:
        out[i] = ByteReverseWord64(in[i]);
  413bee:	6893      	ldr	r3, [r2, #8]
  413bf0:	68d1      	ldr	r1, [r2, #12]

00413bf2 <.LBB778>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  413bf2:	0a18      	lsrs	r0, r3, #8
  413bf4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  413bf8:	021b      	lsls	r3, r3, #8
  413bfa:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  413bfe:	4303      	orrs	r3, r0

00413c00 <.LBE780>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  413c00:	ea4f 4533 	mov.w	r5, r3, ror #16
  413c04:	2400      	movs	r4, #0

00413c06 <.LBB782>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  413c06:	0a0b      	lsrs	r3, r1, #8
  413c08:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  413c0c:	0209      	lsls	r1, r1, #8
  413c0e:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  413c12:	430b      	orrs	r3, r1

00413c14 <.LBB784>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  413c14:	ea4f 4333 	mov.w	r3, r3, ror #16

00413c18 <.LBE782>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  413c18:	ea44 0003 	orr.w	r0, r4, r3
  413c1c:	4629      	mov	r1, r5

00413c1e <.LBE778>:
        out[i] = ByteReverseWord64(in[i]);
  413c1e:	e9e2 0102 	strd	r0, r1, [r2, #8]!
    for (i = 0; i < count; i++)
  413c22:	42b2      	cmp	r2, r6
  413c24:	d1e3      	bne.n	413bee <.LBB776>

00413c26 <.LBE776>:
    sha512->buffer[SHA512_BLOCK_SIZE / sizeof(word64) - 2] = sha512->hiLen;
  413c26:	e9da 2304 	ldrd	r2, r3, [sl, #16]
  413c2a:	e9ca 2332 	strd	r2, r3, [sl, #200]	; 0xc8
    sha512->buffer[SHA512_BLOCK_SIZE / sizeof(word64) - 1] = sha512->loLen;
  413c2e:	e9da 2302 	ldrd	r2, r3, [sl, #8]
  413c32:	e9ca 2334 	strd	r2, r3, [sl, #208]	; 0xd0
    ret = Transform(sha512);
  413c36:	4650      	mov	r0, sl
  413c38:	f7ec faac 	bl	400194 <_etext>

00413c3c <.LVL66>:
    if (ret != 0)
  413c3c:	4602      	mov	r2, r0
  413c3e:	b118      	cbz	r0, 413c48 <.LBB798>

00413c40 <.LBE762>:
        return ret;

    XMEMCPY(hash, sha512->digest, SHA512_DIGEST_SIZE);

    return InitSha512(sha512);  /* reset state */
}
  413c40:	4610      	mov	r0, r2
  413c42:	b003      	add	sp, #12

00413c44 <.LCFI9>:
  413c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00413c48 <.LBB798>:
        ByteReverseWords64(sha512->digest, sha512->digest, SHA512_DIGEST_SIZE);
  413c48:	f10a 0618 	add.w	r6, sl, #24

00413c4c <.LVL69>:
  413c4c:	f10a 0410 	add.w	r4, sl, #16
  413c50:	f10a 0550 	add.w	r5, sl, #80	; 0x50

00413c54 <.LBB786>:
        out[i] = ByteReverseWord64(in[i]);
  413c54:	68a3      	ldr	r3, [r4, #8]
  413c56:	68e1      	ldr	r1, [r4, #12]

00413c58 <.LBB788>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  413c58:	0a18      	lsrs	r0, r3, #8
  413c5a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  413c5e:	021b      	lsls	r3, r3, #8
  413c60:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  413c64:	4303      	orrs	r3, r0

00413c66 <.LBE790>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  413c66:	ea4f 4933 	mov.w	r9, r3, ror #16
  413c6a:	f04f 0800 	mov.w	r8, #0

00413c6e <.LBB792>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  413c6e:	0a0b      	lsrs	r3, r1, #8
  413c70:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  413c74:	0209      	lsls	r1, r1, #8
  413c76:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  413c7a:	430b      	orrs	r3, r1

00413c7c <.LBB794>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  413c7c:	ea4f 4333 	mov.w	r3, r3, ror #16

00413c80 <.LBE792>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  413c80:	ea48 0003 	orr.w	r0, r8, r3
  413c84:	4649      	mov	r1, r9

00413c86 <.LBE788>:
        out[i] = ByteReverseWord64(in[i]);
  413c86:	e9e4 0102 	strd	r0, r1, [r4, #8]!
    for (i = 0; i < count; i++)
  413c8a:	42ac      	cmp	r4, r5
  413c8c:	d1e2      	bne.n	413c54 <.LBB786>

00413c8e <.LBE786>:
    XMEMCPY(hash, sha512->digest, SHA512_DIGEST_SIZE);
  413c8e:	4633      	mov	r3, r6
  413c90:	46de      	mov	lr, fp
  413c92:	3640      	adds	r6, #64	; 0x40

00413c94 <.LVL72>:
  413c94:	681d      	ldr	r5, [r3, #0]
  413c96:	685c      	ldr	r4, [r3, #4]
  413c98:	6898      	ldr	r0, [r3, #8]
  413c9a:	68d9      	ldr	r1, [r3, #12]
  413c9c:	f8ce 5000 	str.w	r5, [lr]
  413ca0:	f8ce 4004 	str.w	r4, [lr, #4]
  413ca4:	f8ce 0008 	str.w	r0, [lr, #8]
  413ca8:	f8ce 100c 	str.w	r1, [lr, #12]
  413cac:	3310      	adds	r3, #16
  413cae:	f10e 0e10 	add.w	lr, lr, #16
  413cb2:	42b3      	cmp	r3, r6
  413cb4:	d1ee      	bne.n	413c94 <.LVL72>

00413cb6 <.LBB799>:
    sha512->digest[0] = W64LIT(0x6a09e667f3bcc908);
  413cb6:	a11e      	add	r1, pc, #120	; (adr r1, 413d30 <.LVL78+0x4>)
  413cb8:	e9d1 0100 	ldrd	r0, r1, [r1]
  413cbc:	e9ca 0106 	strd	r0, r1, [sl, #24]
    sha512->digest[1] = W64LIT(0xbb67ae8584caa73b);
  413cc0:	a11d      	add	r1, pc, #116	; (adr r1, 413d38 <.LVL78+0xc>)
  413cc2:	e9d1 0100 	ldrd	r0, r1, [r1]
  413cc6:	e9ca 0108 	strd	r0, r1, [sl, #32]
    sha512->digest[2] = W64LIT(0x3c6ef372fe94f82b);
  413cca:	a11d      	add	r1, pc, #116	; (adr r1, 413d40 <.LVL78+0x14>)
  413ccc:	e9d1 0100 	ldrd	r0, r1, [r1]
  413cd0:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
    sha512->digest[3] = W64LIT(0xa54ff53a5f1d36f1);
  413cd4:	a11c      	add	r1, pc, #112	; (adr r1, 413d48 <.LVL78+0x1c>)
  413cd6:	e9d1 0100 	ldrd	r0, r1, [r1]
  413cda:	e9ca 010c 	strd	r0, r1, [sl, #48]	; 0x30
    sha512->digest[4] = W64LIT(0x510e527fade682d1);
  413cde:	a11c      	add	r1, pc, #112	; (adr r1, 413d50 <.LVL78+0x24>)
  413ce0:	e9d1 0100 	ldrd	r0, r1, [r1]
  413ce4:	e9ca 010e 	strd	r0, r1, [sl, #56]	; 0x38
    sha512->digest[5] = W64LIT(0x9b05688c2b3e6c1f);
  413ce8:	a11b      	add	r1, pc, #108	; (adr r1, 413d58 <.LVL78+0x2c>)
  413cea:	e9d1 0100 	ldrd	r0, r1, [r1]
  413cee:	e9ca 0110 	strd	r0, r1, [sl, #64]	; 0x40
    sha512->digest[6] = W64LIT(0x1f83d9abfb41bd6b);
  413cf2:	a11b      	add	r1, pc, #108	; (adr r1, 413d60 <.LVL78+0x34>)
  413cf4:	e9d1 0100 	ldrd	r0, r1, [r1]
  413cf8:	e9ca 0112 	strd	r0, r1, [sl, #72]	; 0x48
    sha512->digest[7] = W64LIT(0x5be0cd19137e2179);
  413cfc:	a11a      	add	r1, pc, #104	; (adr r1, 413d68 <.LVL78+0x3c>)
  413cfe:	e9d1 0100 	ldrd	r0, r1, [r1]
  413d02:	e9ca 0114 	strd	r0, r1, [sl, #80]	; 0x50
    sha512->buffLen = 0;
  413d06:	2300      	movs	r3, #0
  413d08:	f8ca 3000 	str.w	r3, [sl]
    sha512->loLen   = 0;
  413d0c:	2000      	movs	r0, #0
  413d0e:	2100      	movs	r1, #0
  413d10:	e9ca 0102 	strd	r0, r1, [sl, #8]
    sha512->hiLen   = 0;
  413d14:	e9ca 0104 	strd	r0, r1, [sl, #16]
  413d18:	e792      	b.n	413c40 <.LBE762>

00413d1a <.LBE799>:
        return BAD_FUNC_ARG;
  413d1a:	f06f 02ac 	mvn.w	r2, #172	; 0xac
  413d1e:	e78f      	b.n	413c40 <.LBE762>

00413d20 <.LBB801>:
        return BAD_FUNC_ARG;
  413d20:	f06f 02ac 	mvn.w	r2, #172	; 0xac

00413d24 <.LVL76>:
  413d24:	e78c      	b.n	413c40 <.LBE762>

00413d26 <.LBE801>:
        return BAD_FUNC_ARG;
  413d26:	f06f 02ac 	mvn.w	r2, #172	; 0xac
}
  413d2a:	4610      	mov	r0, r2

00413d2c <.LVL78>:
  413d2c:	4770      	bx	lr
  413d2e:	bf00      	nop
  413d30:	f3bcc908 	.word	0xf3bcc908
  413d34:	6a09e667 	.word	0x6a09e667
  413d38:	84caa73b 	.word	0x84caa73b
  413d3c:	bb67ae85 	.word	0xbb67ae85
  413d40:	fe94f82b 	.word	0xfe94f82b
  413d44:	3c6ef372 	.word	0x3c6ef372
  413d48:	5f1d36f1 	.word	0x5f1d36f1
  413d4c:	a54ff53a 	.word	0xa54ff53a
  413d50:	ade682d1 	.word	0xade682d1
  413d54:	510e527f 	.word	0x510e527f
  413d58:	2b3e6c1f 	.word	0x2b3e6c1f
  413d5c:	9b05688c 	.word	0x9b05688c
  413d60:	fb41bd6b 	.word	0xfb41bd6b
  413d64:	1f83d9ab 	.word	0x1f83d9ab
  413d68:	137e2179 	.word	0x137e2179
  413d6c:	5be0cd19 	.word	0x5be0cd19

Disassembly of section .text.wc_Sha384Final%99:

00413d70 <wc_Sha384Final>:

int wc_Sha384Final(Sha384* sha384, byte* hash)
{
    int ret;

    if (sha384 == NULL || hash == NULL) {
  413d70:	2800      	cmp	r0, #0
  413d72:	f000 8120 	beq.w	413fb6 <.LBE922>
{
  413d76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00413d7a <.LCFI14>:
  413d7a:	b083      	sub	sp, #12

00413d7c <.LCFI15>:
  413d7c:	468e      	mov	lr, r1
  413d7e:	4601      	mov	r1, r0

00413d80 <.LVL105>:
    if (sha384 == NULL || hash == NULL) {
  413d80:	f1be 0f00 	cmp.w	lr, #0
  413d84:	f000 8111 	beq.w	413faa <.LBE920>

00413d88 <.LBB883>:
    byte* local = (byte*)sha512->buffer;
  413d88:	f100 0358 	add.w	r3, r0, #88	; 0x58
  413d8c:	9301      	str	r3, [sp, #4]

00413d8e <.LVL107>:
    if (sha512 == NULL) {
  413d8e:	2800      	cmp	r0, #0
  413d90:	f000 810e 	beq.w	413fb0 <.LBB922>
    AddLength(sha512, sha512->buffLen);               /* before adding pads */
  413d94:	6800      	ldr	r0, [r0, #0]

00413d96 <.LBB885>:
    word64 tmp = sha512->loLen;
  413d96:	e9d1 2302 	ldrd	r2, r3, [r1, #8]

00413d9a <.LVL109>:
    if ( (sha512->loLen += len) < tmp)
  413d9a:	eb12 0a00 	adds.w	sl, r2, r0
  413d9e:	f143 0b00 	adc.w	fp, r3, #0
  413da2:	e9c1 ab02 	strd	sl, fp, [r1, #8]
  413da6:	459b      	cmp	fp, r3
  413da8:	bf08      	it	eq
  413daa:	4592      	cmpeq	sl, r2
  413dac:	d206      	bcs.n	413dbc <.LVL111+0x4>
        sha512->hiLen++;                       /* carry low to high */
  413dae:	e9d1 2304 	ldrd	r2, r3, [r1, #16]

00413db2 <.LVL110>:
  413db2:	3201      	adds	r2, #1
  413db4:	f143 0300 	adc.w	r3, r3, #0

00413db8 <.LVL111>:
  413db8:	e9c1 2304 	strd	r2, r3, [r1, #16]
  413dbc:	468a      	mov	sl, r1
  413dbe:	46f3      	mov	fp, lr

00413dc0 <.LBE885>:
    local[sha512->buffLen++] = 0x80;  /* add 1 */
  413dc0:	1c43      	adds	r3, r0, #1
  413dc2:	600b      	str	r3, [r1, #0]
  413dc4:	2380      	movs	r3, #128	; 0x80
  413dc6:	9a01      	ldr	r2, [sp, #4]
  413dc8:	5413      	strb	r3, [r2, r0]
    if (sha512->buffLen > SHA512_PAD_SIZE) {
  413dca:	6808      	ldr	r0, [r1, #0]
  413dcc:	2870      	cmp	r0, #112	; 0x70
  413dce:	d92f      	bls.n	413e30 <.LVL120>

00413dd0 <.LVL113>:
        XMEMSET(&local[sha512->buffLen], 0, SHA512_BLOCK_SIZE - sha512->buffLen);
  413dd0:	1a1a      	subs	r2, r3, r0
  413dd2:	2100      	movs	r1, #0

00413dd4 <.LVL114>:
  413dd4:	9b01      	ldr	r3, [sp, #4]
  413dd6:	4418      	add	r0, r3
  413dd8:	f006 fc0a 	bl	41a5f0 <.LFE157>

00413ddc <.LVL115>:
        sha512->buffLen += SHA512_BLOCK_SIZE - sha512->buffLen;
  413ddc:	4652      	mov	r2, sl
  413dde:	2380      	movs	r3, #128	; 0x80
  413de0:	f842 3b50 	str.w	r3, [r2], #80

00413de4 <.LVL116>:
  413de4:	f10a 0ed0 	add.w	lr, sl, #208	; 0xd0

00413de8 <.LBB887>:
        out[i] = ByteReverseWord64(in[i]);
  413de8:	6893      	ldr	r3, [r2, #8]
  413dea:	68d1      	ldr	r1, [r2, #12]

00413dec <.LBB889>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  413dec:	0a18      	lsrs	r0, r3, #8
  413dee:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  413df2:	021b      	lsls	r3, r3, #8
  413df4:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  413df8:	4303      	orrs	r3, r0

00413dfa <.LBE891>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  413dfa:	ea4f 4733 	mov.w	r7, r3, ror #16
  413dfe:	2600      	movs	r6, #0

00413e00 <.LBB893>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  413e00:	0a0b      	lsrs	r3, r1, #8
  413e02:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  413e06:	0209      	lsls	r1, r1, #8
  413e08:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  413e0c:	430b      	orrs	r3, r1

00413e0e <.LBB895>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  413e0e:	ea4f 4333 	mov.w	r3, r3, ror #16

00413e12 <.LBE893>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  413e12:	ea46 0003 	orr.w	r0, r6, r3
  413e16:	4639      	mov	r1, r7

00413e18 <.LBE889>:
        out[i] = ByteReverseWord64(in[i]);
  413e18:	e9e2 0102 	strd	r0, r1, [r2, #8]!
    for (i = 0; i < count; i++)
  413e1c:	4572      	cmp	r2, lr
  413e1e:	d1e3      	bne.n	413de8 <.LBB887>

00413e20 <.LBE887>:
        ret = Transform(sha512);
  413e20:	4650      	mov	r0, sl
  413e22:	f7ec f9b7 	bl	400194 <_etext>

00413e26 <.LVL119>:
        if (ret != 0)
  413e26:	4602      	mov	r2, r0
  413e28:	2800      	cmp	r0, #0
  413e2a:	d151      	bne.n	413ed0 <.LBE883>
        sha512->buffLen = 0;
  413e2c:	f8ca 6000 	str.w	r6, [sl]

00413e30 <.LVL120>:
    XMEMSET(&local[sha512->buffLen], 0, SHA512_PAD_SIZE - sha512->buffLen);
  413e30:	f8da 0000 	ldr.w	r0, [sl]
  413e34:	f1c0 0270 	rsb	r2, r0, #112	; 0x70
  413e38:	2100      	movs	r1, #0
  413e3a:	9b01      	ldr	r3, [sp, #4]
  413e3c:	4418      	add	r0, r3
  413e3e:	f006 fbd7 	bl	41a5f0 <.LFE157>

00413e42 <.LVL121>:
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
  413e42:	f8da 7008 	ldr.w	r7, [sl, #8]
  413e46:	f8da 600c 	ldr.w	r6, [sl, #12]
                                                         (sha512->hiLen << 3);
  413e4a:	f8da 2010 	ldr.w	r2, [sl, #16]
  413e4e:	f8da 3014 	ldr.w	r3, [sl, #20]
  413e52:	00d9      	lsls	r1, r3, #3
  413e54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
  413e58:	00d0      	lsls	r0, r2, #3
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
  413e5a:	0f72      	lsrs	r2, r6, #29
  413e5c:	2300      	movs	r3, #0
  413e5e:	1812      	adds	r2, r2, r0
  413e60:	414b      	adcs	r3, r1
  413e62:	e9ca 2304 	strd	r2, r3, [sl, #16]
    sha512->loLen = sha512->loLen << 3;
  413e66:	00f6      	lsls	r6, r6, #3
  413e68:	ea46 7657 	orr.w	r6, r6, r7, lsr #29
  413e6c:	00ff      	lsls	r7, r7, #3
  413e6e:	f8ca 7008 	str.w	r7, [sl, #8]
  413e72:	f8ca 600c 	str.w	r6, [sl, #12]

00413e76 <.LVL122>:
  413e76:	f10a 0250 	add.w	r2, sl, #80	; 0x50
  413e7a:	f10a 06c0 	add.w	r6, sl, #192	; 0xc0

00413e7e <.LBB897>:
        out[i] = ByteReverseWord64(in[i]);
  413e7e:	6893      	ldr	r3, [r2, #8]
  413e80:	68d1      	ldr	r1, [r2, #12]

00413e82 <.LBB899>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  413e82:	0a18      	lsrs	r0, r3, #8
  413e84:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  413e88:	021b      	lsls	r3, r3, #8
  413e8a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  413e8e:	4303      	orrs	r3, r0

00413e90 <.LBE901>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  413e90:	ea4f 4533 	mov.w	r5, r3, ror #16
  413e94:	2400      	movs	r4, #0

00413e96 <.LBB903>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  413e96:	0a0b      	lsrs	r3, r1, #8
  413e98:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  413e9c:	0209      	lsls	r1, r1, #8
  413e9e:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  413ea2:	430b      	orrs	r3, r1

00413ea4 <.LBB905>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  413ea4:	ea4f 4333 	mov.w	r3, r3, ror #16

00413ea8 <.LBE903>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  413ea8:	ea44 0003 	orr.w	r0, r4, r3
  413eac:	4629      	mov	r1, r5

00413eae <.LBE899>:
        out[i] = ByteReverseWord64(in[i]);
  413eae:	e9e2 0102 	strd	r0, r1, [r2, #8]!
    for (i = 0; i < count; i++)
  413eb2:	42b2      	cmp	r2, r6
  413eb4:	d1e3      	bne.n	413e7e <.LBB897>

00413eb6 <.LBE897>:
    sha512->buffer[SHA512_BLOCK_SIZE / sizeof(word64) - 2] = sha512->hiLen;
  413eb6:	e9da 2304 	ldrd	r2, r3, [sl, #16]
  413eba:	e9ca 2332 	strd	r2, r3, [sl, #200]	; 0xc8
    sha512->buffer[SHA512_BLOCK_SIZE / sizeof(word64) - 1] = sha512->loLen;
  413ebe:	e9da 2302 	ldrd	r2, r3, [sl, #8]
  413ec2:	e9ca 2334 	strd	r2, r3, [sl, #208]	; 0xd0
    ret = Transform(sha512);
  413ec6:	4650      	mov	r0, sl
  413ec8:	f7ec f964 	bl	400194 <_etext>

00413ecc <.LVL125>:
    if (ret != 0)
  413ecc:	4602      	mov	r2, r0
  413ece:	b118      	cbz	r0, 413ed8 <.LBB919>

00413ed0 <.LBE883>:
        return ret;

    XMEMCPY(hash, sha384->digest, SHA384_DIGEST_SIZE);

    return InitSha384(sha384);  /* reset state */
}
  413ed0:	4610      	mov	r0, r2
  413ed2:	b003      	add	sp, #12

00413ed4 <.LCFI16>:
  413ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00413ed8 <.LBB919>:
        ByteReverseWords64(sha512->digest, sha512->digest, SHA512_DIGEST_SIZE);
  413ed8:	f10a 0618 	add.w	r6, sl, #24

00413edc <.LVL128>:
  413edc:	f10a 0410 	add.w	r4, sl, #16
  413ee0:	f10a 0550 	add.w	r5, sl, #80	; 0x50

00413ee4 <.LBB907>:
        out[i] = ByteReverseWord64(in[i]);
  413ee4:	68a3      	ldr	r3, [r4, #8]
  413ee6:	68e1      	ldr	r1, [r4, #12]

00413ee8 <.LBB909>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  413ee8:	0a18      	lsrs	r0, r3, #8
  413eea:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  413eee:	021b      	lsls	r3, r3, #8
  413ef0:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  413ef4:	4303      	orrs	r3, r0

00413ef6 <.LBE911>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  413ef6:	ea4f 4933 	mov.w	r9, r3, ror #16
  413efa:	f04f 0800 	mov.w	r8, #0

00413efe <.LBB913>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  413efe:	0a0b      	lsrs	r3, r1, #8
  413f00:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  413f04:	0209      	lsls	r1, r1, #8
  413f06:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  413f0a:	430b      	orrs	r3, r1

00413f0c <.LBB915>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  413f0c:	ea4f 4333 	mov.w	r3, r3, ror #16

00413f10 <.LBE913>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  413f10:	ea48 0003 	orr.w	r0, r8, r3
  413f14:	4649      	mov	r1, r9

00413f16 <.LBE909>:
        out[i] = ByteReverseWord64(in[i]);
  413f16:	e9e4 0102 	strd	r0, r1, [r4, #8]!
    for (i = 0; i < count; i++)
  413f1a:	42ac      	cmp	r4, r5
  413f1c:	d1e2      	bne.n	413ee4 <.LBB907>

00413f1e <.LBE907>:
    XMEMCPY(hash, sha384->digest, SHA384_DIGEST_SIZE);
  413f1e:	4633      	mov	r3, r6
  413f20:	46de      	mov	lr, fp
  413f22:	3630      	adds	r6, #48	; 0x30

00413f24 <.LVL131>:
  413f24:	681d      	ldr	r5, [r3, #0]
  413f26:	685c      	ldr	r4, [r3, #4]
  413f28:	6898      	ldr	r0, [r3, #8]
  413f2a:	68d9      	ldr	r1, [r3, #12]
  413f2c:	f8ce 5000 	str.w	r5, [lr]
  413f30:	f8ce 4004 	str.w	r4, [lr, #4]
  413f34:	f8ce 0008 	str.w	r0, [lr, #8]
  413f38:	f8ce 100c 	str.w	r1, [lr, #12]
  413f3c:	3310      	adds	r3, #16
  413f3e:	f10e 0e10 	add.w	lr, lr, #16
  413f42:	42b3      	cmp	r3, r6
  413f44:	d1ee      	bne.n	413f24 <.LVL131>

00413f46 <.LBB920>:
    sha384->digest[0] = W64LIT(0xcbbb9d5dc1059ed8);
  413f46:	a11e      	add	r1, pc, #120	; (adr r1, 413fc0 <.LVL137+0x4>)
  413f48:	e9d1 0100 	ldrd	r0, r1, [r1]
  413f4c:	e9ca 0106 	strd	r0, r1, [sl, #24]
    sha384->digest[1] = W64LIT(0x629a292a367cd507);
  413f50:	a11d      	add	r1, pc, #116	; (adr r1, 413fc8 <.LVL137+0xc>)
  413f52:	e9d1 0100 	ldrd	r0, r1, [r1]
  413f56:	e9ca 0108 	strd	r0, r1, [sl, #32]
    sha384->digest[2] = W64LIT(0x9159015a3070dd17);
  413f5a:	a11d      	add	r1, pc, #116	; (adr r1, 413fd0 <.LVL137+0x14>)
  413f5c:	e9d1 0100 	ldrd	r0, r1, [r1]
  413f60:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
    sha384->digest[3] = W64LIT(0x152fecd8f70e5939);
  413f64:	a11c      	add	r1, pc, #112	; (adr r1, 413fd8 <.LVL137+0x1c>)
  413f66:	e9d1 0100 	ldrd	r0, r1, [r1]
  413f6a:	e9ca 010c 	strd	r0, r1, [sl, #48]	; 0x30
    sha384->digest[4] = W64LIT(0x67332667ffc00b31);
  413f6e:	a11c      	add	r1, pc, #112	; (adr r1, 413fe0 <.LVL137+0x24>)
  413f70:	e9d1 0100 	ldrd	r0, r1, [r1]
  413f74:	e9ca 010e 	strd	r0, r1, [sl, #56]	; 0x38
    sha384->digest[5] = W64LIT(0x8eb44a8768581511);
  413f78:	a11b      	add	r1, pc, #108	; (adr r1, 413fe8 <.LVL137+0x2c>)
  413f7a:	e9d1 0100 	ldrd	r0, r1, [r1]
  413f7e:	e9ca 0110 	strd	r0, r1, [sl, #64]	; 0x40
    sha384->digest[6] = W64LIT(0xdb0c2e0d64f98fa7);
  413f82:	a11b      	add	r1, pc, #108	; (adr r1, 413ff0 <.LVL137+0x34>)
  413f84:	e9d1 0100 	ldrd	r0, r1, [r1]
  413f88:	e9ca 0112 	strd	r0, r1, [sl, #72]	; 0x48
    sha384->digest[7] = W64LIT(0x47b5481dbefa4fa4);
  413f8c:	a11a      	add	r1, pc, #104	; (adr r1, 413ff8 <.LVL137+0x3c>)
  413f8e:	e9d1 0100 	ldrd	r0, r1, [r1]
  413f92:	e9ca 0114 	strd	r0, r1, [sl, #80]	; 0x50
    sha384->buffLen = 0;
  413f96:	2300      	movs	r3, #0
  413f98:	f8ca 3000 	str.w	r3, [sl]
    sha384->loLen   = 0;
  413f9c:	2000      	movs	r0, #0
  413f9e:	2100      	movs	r1, #0
  413fa0:	e9ca 0102 	strd	r0, r1, [sl, #8]
    sha384->hiLen   = 0;
  413fa4:	e9ca 0104 	strd	r0, r1, [sl, #16]
  413fa8:	e792      	b.n	413ed0 <.LBE883>

00413faa <.LBE920>:
        return BAD_FUNC_ARG;
  413faa:	f06f 02ac 	mvn.w	r2, #172	; 0xac
  413fae:	e78f      	b.n	413ed0 <.LBE883>

00413fb0 <.LBB922>:
        return BAD_FUNC_ARG;
  413fb0:	f06f 02ac 	mvn.w	r2, #172	; 0xac

00413fb4 <.LVL135>:
  413fb4:	e78c      	b.n	413ed0 <.LBE883>

00413fb6 <.LBE922>:
        return BAD_FUNC_ARG;
  413fb6:	f06f 02ac 	mvn.w	r2, #172	; 0xac
}
  413fba:	4610      	mov	r0, r2

00413fbc <.LVL137>:
  413fbc:	4770      	bx	lr
  413fbe:	bf00      	nop
  413fc0:	c1059ed8 	.word	0xc1059ed8
  413fc4:	cbbb9d5d 	.word	0xcbbb9d5d
  413fc8:	367cd507 	.word	0x367cd507
  413fcc:	629a292a 	.word	0x629a292a
  413fd0:	3070dd17 	.word	0x3070dd17
  413fd4:	9159015a 	.word	0x9159015a
  413fd8:	f70e5939 	.word	0xf70e5939
  413fdc:	152fecd8 	.word	0x152fecd8
  413fe0:	ffc00b31 	.word	0xffc00b31
  413fe4:	67332667 	.word	0x67332667
  413fe8:	68581511 	.word	0x68581511
  413fec:	8eb44a87 	.word	0x8eb44a87
  413ff0:	64f98fa7 	.word	0x64f98fa7
  413ff4:	db0c2e0d 	.word	0xdb0c2e0d
  413ff8:	befa4fa4 	.word	0xbefa4fa4
  413ffc:	47b5481d 	.word	0x47b5481d

Disassembly of section .rodata.K512%100:

00414000 <K512>:
  414000:	d728ae22 428a2f98 23ef65cd 71374491     ".(../.B.e.#.D7q
  414010:	ec4d3b2f b5c0fbcf 8189dbbc e9b5dba5     /;M.............
  414020:	f348b538 3956c25b b605d019 59f111f1     8.H.[.V9.......Y
  414030:	af194f9b 923f82a4 da6d8118 ab1c5ed5     .O....?...m..^..
  414040:	a3030242 d807aa98 45706fbe 12835b01     B........opE.[..
  414050:	4ee4b28c 243185be d5ffb4e2 550c7dc3     ...N..1$.....}.U
  414060:	f27b896f 72be5d74 3b1696b1 80deb1fe     o.{.t].r...;....
  414070:	25c71235 9bdc06a7 cf692694 c19bf174     5..%.....&i.t...
  414080:	9ef14ad2 e49b69c1 384f25e3 efbe4786     .J...i...%O8.G..
  414090:	8b8cd5b5 0fc19dc6 77ac9c65 240ca1cc     ........e..w...$
  4140a0:	592b0275 2de92c6f 6ea6e483 4a7484aa     u.+Yo,.-...n..tJ
  4140b0:	bd41fbd4 5cb0a9dc 831153b5 76f988da     ..A....\.S.....v
  4140c0:	ee66dfab 983e5152 2db43210 a831c66d     ..f.RQ>..2.-m.1.
  4140d0:	98fb213f b00327c8 beef0ee4 bf597fc7     ?!...'........Y.
  4140e0:	3da88fc2 c6e00bf3 930aa725 d5a79147     ...=....%...G...
  4140f0:	e003826f 06ca6351 0a0e6e70 14292967     o...Qc..pn..g)).
  414100:	46d22ffc 27b70a85 5c26c926 2e1b2138     ./.F...'&.&\8!..
  414110:	5ac42aed 4d2c6dfc 9d95b3df 53380d13     .*.Z.m,M......8S
  414120:	8baf63de 650a7354 3c77b2a8 766a0abb     .c..Ts.e..w<..jv
  414130:	47edaee6 81c2c92e 1482353b 92722c85     ...G....;5...,r.
  414140:	4cf10364 a2bfe8a1 bc423001 a81a664b     d..L.....0B.Kf..
  414150:	d0f89791 c24b8b70 0654be30 c76c51a3     ....p.K.0.T..Ql.
  414160:	d6ef5218 d192e819 5565a910 d6990624     .R........eU$...
  414170:	5771202a f40e3585 32bbd1b8 106aa070     * qW.5.....2p.j.
  414180:	b8d2d0c8 19a4c116 5141ab53 1e376c08     ........S.AQ.l7.
  414190:	df8eeb99 2748774c e19b48a8 34b0bcb5     ....LwH'.H.....4
  4141a0:	c5c95a63 391c0cb3 e3418acb 4ed8aa4a     cZ.....9..A.J..N
  4141b0:	7763e373 5b9cca4f d6b2b8a3 682e6ff3     s.cwO..[.....o.h
  4141c0:	5defb2fc 748f82ee 43172f60 78a5636f     ...]...t`/.Coc.x
  4141d0:	a1f0ab72 84c87814 1a6439ec 8cc70208     r....x...9d.....
  4141e0:	23631e28 90befffa de82bde9 a4506ceb     (.c#.........lP.
  4141f0:	b2c67915 bef9a3f7 e372532b c67178f2     .y......+Sr..xq.
  414200:	ea26619c ca273ece 21c0c207 d186b8c7     .a&..>'....!....
  414210:	cde0eb1e eada7dd6 ee6ed178 f57d4f7f     .....}..x.n..O}.
  414220:	72176fba 06f067aa a2c898a6 0a637dc5     .o.r.g.......}c.
  414230:	bef90dae 113f9804 131c471b 1b710b35     ......?..G..5.q.
  414240:	23047d84 28db77f5 40c72493 32caab7b     .}.#.w.(.$.@{..2
  414250:	15c9bebc 3c9ebe0a 9c100d4c 431d67c4     .......<L....g.C
  414260:	cb3e42b6 4cc5d4be fc657e2a 597f299c     .B>....L*~e..).Y
  414270:	3ad6faec 5fcb6fab 4a475817 6c44198c     ...:.o._.XGJ..Dl

Disassembly of section .text.ecc_test%101:

00414280 <ecc_test>:
{
  414280:	b530      	push	{r4, r5, lr}

00414282 <.LCFI44>:
  414282:	f5ad 5d2d 	sub.w	sp, sp, #11072	; 0x2b40

00414286 <.LCFI45>:
  414286:	b087      	sub	sp, #28

00414288 <.LCFI46>:
    appData.ecc_test_result = 12;
  414288:	220c      	movs	r2, #12
  41428a:	4b94      	ldr	r3, [pc, #592]	; (4144dc <.LCFI48+0x16>)
  41428c:	645a      	str	r2, [r3, #68]	; 0x44
    ret = CRYPT_RNG_Initialize(&rng);
  41428e:	f642 2050 	movw	r0, #10832	; 0x2a50
  414292:	4468      	add	r0, sp
  414294:	f00a fce6 	bl	41ec64 <.LFE169>

00414298 <.LVL75>:
    if (ret == 0)
  414298:	b918      	cbnz	r0, 4142a2 <.LVL75+0xa>
        appData.ecc_test_result--;
  41429a:	4a90      	ldr	r2, [pc, #576]	; (4144dc <.LCFI48+0x16>)
  41429c:	6c53      	ldr	r3, [r2, #68]	; 0x44
  41429e:	3b01      	subs	r3, #1
  4142a0:	6453      	str	r3, [r2, #68]	; 0x44
    wc_ecc_init(&userA);
  4142a2:	f241 1078 	movw	r0, #4472	; 0x1178

004142a6 <.LVL76>:
  4142a6:	4468      	add	r0, sp
  4142a8:	f00a fd4a 	bl	41ed40 <.LBE3>

004142ac <.LVL77>:
    wc_ecc_init(&userB);
  4142ac:	f50d 600c 	add.w	r0, sp, #2240	; 0x8c0
  4142b0:	f00a fd46 	bl	41ed40 <.LBE3>

004142b4 <.LVL78>:
    wc_ecc_init(&pubKey);
  4142b4:	a802      	add	r0, sp, #8
  4142b6:	f00a fd43 	bl	41ed40 <.LBE3>

004142ba <.LVL79>:
    ret = wc_ecc_make_key((struct RNG *)&rng, 32, &userA);
  4142ba:	f241 1278 	movw	r2, #4472	; 0x1178
  4142be:	446a      	add	r2, sp
  4142c0:	2120      	movs	r1, #32
  4142c2:	f642 2050 	movw	r0, #10832	; 0x2a50
  4142c6:	4468      	add	r0, sp
  4142c8:	f00a fdaa 	bl	41ee20 <wc_ecc_make_key>

004142cc <.LVL80>:
    ret = wc_ecc_make_key((struct RNG *)&rng, 32, &userB);
  4142cc:	f50d 620c 	add.w	r2, sp, #2240	; 0x8c0
  4142d0:	2120      	movs	r1, #32
  4142d2:	f642 2050 	movw	r0, #10832	; 0x2a50
  4142d6:	4468      	add	r0, sp
  4142d8:	f00a fda2 	bl	41ee20 <wc_ecc_make_key>

004142dc <.LVL81>:
    if (ret == 0)
  4142dc:	b918      	cbnz	r0, 4142e6 <.LVL81+0xa>
        appData.ecc_test_result--;
  4142de:	4a7f      	ldr	r2, [pc, #508]	; (4144dc <.LCFI48+0x16>)
  4142e0:	6c53      	ldr	r3, [r2, #68]	; 0x44
  4142e2:	3b01      	subs	r3, #1
  4142e4:	6453      	str	r3, [r2, #68]	; 0x44
    x = sizeof(sharedA);
  4142e6:	f641 2338 	movw	r3, #6712	; 0x1a38
  4142ea:	446b      	add	r3, sp
  4142ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4142f0:	601c      	str	r4, [r3, #0]
    ret = wc_ecc_shared_secret(&userA, &userB, sharedA, &x);
  4142f2:	f242 6250 	movw	r2, #9808	; 0x2650
  4142f6:	446a      	add	r2, sp
  4142f8:	f50d 610c 	add.w	r1, sp, #2240	; 0x8c0
  4142fc:	f241 1078 	movw	r0, #4472	; 0x1178

00414300 <.LVL82>:
  414300:	4468      	add	r0, sp
  414302:	f007 fed9 	bl	41c0b8 <.LBE19>

00414306 <.LVL83>:
    y = sizeof(sharedB);
  414306:	4b76      	ldr	r3, [pc, #472]	; (4144e0 <.LCFI48+0x1a>)
  414308:	f642 3258 	movw	r2, #11096	; 0x2b58
  41430c:	446a      	add	r2, sp
  41430e:	50d4      	str	r4, [r2, r3]
    ret = wc_ecc_shared_secret(&userB, &userA, sharedB, &y);
  414310:	4413      	add	r3, r2
  414312:	f242 2250 	movw	r2, #8784	; 0x2250
  414316:	446a      	add	r2, sp
  414318:	f241 1178 	movw	r1, #4472	; 0x1178
  41431c:	4469      	add	r1, sp
  41431e:	f50d 600c 	add.w	r0, sp, #2240	; 0x8c0
  414322:	f007 fec9 	bl	41c0b8 <.LBE19>

00414326 <.LVL84>:
    if (ret == 0)
  414326:	b918      	cbnz	r0, 414330 <.LVL84+0xa>
        appData.ecc_test_result--;
  414328:	4a6c      	ldr	r2, [pc, #432]	; (4144dc <.LCFI48+0x16>)
  41432a:	6c53      	ldr	r3, [r2, #68]	; 0x44
  41432c:	3b01      	subs	r3, #1
  41432e:	6453      	str	r3, [r2, #68]	; 0x44
    if (y == x)
  414330:	f641 2338 	movw	r3, #6712	; 0x1a38
  414334:	446b      	add	r3, sp
  414336:	681a      	ldr	r2, [r3, #0]
  414338:	4b69      	ldr	r3, [pc, #420]	; (4144e0 <.LCFI48+0x1a>)
  41433a:	f642 3158 	movw	r1, #11096	; 0x2b58
  41433e:	4469      	add	r1, sp
  414340:	58cb      	ldr	r3, [r1, r3]
  414342:	4293      	cmp	r3, r2
  414344:	f000 80bf 	beq.w	4144c6 <.LCFI48>
    if (!(memcmp(sharedA, sharedB, x)))
  414348:	f242 2150 	movw	r1, #8784	; 0x2250
  41434c:	4469      	add	r1, sp
  41434e:	f242 6050 	movw	r0, #9808	; 0x2650

00414352 <.LVL85>:
  414352:	4468      	add	r0, sp
  414354:	f008 fb78 	bl	41ca48 <memcmp>

00414358 <.LVL86>:
  414358:	b918      	cbnz	r0, 414362 <.LVL86+0xa>
        appData.ecc_test_result--;
  41435a:	4a60      	ldr	r2, [pc, #384]	; (4144dc <.LCFI48+0x16>)
  41435c:	6c53      	ldr	r3, [r2, #68]	; 0x44
  41435e:	3b01      	subs	r3, #1
  414360:	6453      	str	r3, [r2, #68]	; 0x44
    x = sizeof(exportBuf);
  414362:	f641 2238 	movw	r2, #6712	; 0x1a38
  414366:	446a      	add	r2, sp
  414368:	f44f 6380 	mov.w	r3, #1024	; 0x400
  41436c:	6013      	str	r3, [r2, #0]
    ret = wc_ecc_export_x963(&userA, exportBuf, &x);
  41436e:	f641 213c 	movw	r1, #6716	; 0x1a3c
  414372:	4469      	add	r1, sp
  414374:	f241 1078 	movw	r0, #4472	; 0x1178
  414378:	4468      	add	r0, sp
  41437a:	f003 fbf1 	bl	417b60 <.LFE25>

0041437e <.LVL87>:
    if (ret == 0)
  41437e:	b918      	cbnz	r0, 414388 <.LVL87+0xa>
        appData.ecc_test_result--;
  414380:	4a56      	ldr	r2, [pc, #344]	; (4144dc <.LCFI48+0x16>)
  414382:	6c53      	ldr	r3, [r2, #68]	; 0x44
  414384:	3b01      	subs	r3, #1
  414386:	6453      	str	r3, [r2, #68]	; 0x44
    ret = wc_ecc_import_x963(exportBuf, x, &pubKey);
  414388:	aa02      	add	r2, sp, #8
  41438a:	f641 2338 	movw	r3, #6712	; 0x1a38
  41438e:	446b      	add	r3, sp
  414390:	6819      	ldr	r1, [r3, #0]
  414392:	f641 203c 	movw	r0, #6716	; 0x1a3c

00414396 <.LVL88>:
  414396:	4468      	add	r0, sp
  414398:	f00a fd47 	bl	41ee2a <.LFE202>

0041439c <.LVL89>:
    if (ret == 0)
  41439c:	b918      	cbnz	r0, 4143a6 <.LVL89+0xa>
        appData.ecc_test_result--;
  41439e:	4a4f      	ldr	r2, [pc, #316]	; (4144dc <.LCFI48+0x16>)
  4143a0:	6c53      	ldr	r3, [r2, #68]	; 0x44
  4143a2:	3b01      	subs	r3, #1
  4143a4:	6453      	str	r3, [r2, #68]	; 0x44
    y = sizeof(sharedB);
  4143a6:	4b4e      	ldr	r3, [pc, #312]	; (4144e0 <.LCFI48+0x1a>)
  4143a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4143ac:	f642 3158 	movw	r1, #11096	; 0x2b58
  4143b0:	4469      	add	r1, sp
  4143b2:	50ca      	str	r2, [r1, r3]
    ret = wc_ecc_shared_secret(&userB, &pubKey, sharedB, &y);
  4143b4:	440b      	add	r3, r1
  4143b6:	f242 2250 	movw	r2, #8784	; 0x2250
  4143ba:	446a      	add	r2, sp
  4143bc:	a902      	add	r1, sp, #8
  4143be:	f50d 600c 	add.w	r0, sp, #2240	; 0x8c0

004143c2 <.LVL90>:
  4143c2:	f007 fe79 	bl	41c0b8 <.LBE19>

004143c6 <.LVL91>:
    if (ret == 0)
  4143c6:	b918      	cbnz	r0, 4143d0 <.LVL91+0xa>
        appData.ecc_test_result--;
  4143c8:	4a44      	ldr	r2, [pc, #272]	; (4144dc <.LCFI48+0x16>)
  4143ca:	6c53      	ldr	r3, [r2, #68]	; 0x44
  4143cc:	3b01      	subs	r3, #1
  4143ce:	6453      	str	r3, [r2, #68]	; 0x44
    if (!(memcmp(sharedA, sharedB, y)))
  4143d0:	4b43      	ldr	r3, [pc, #268]	; (4144e0 <.LCFI48+0x1a>)
  4143d2:	f642 3258 	movw	r2, #11096	; 0x2b58
  4143d6:	446a      	add	r2, sp
  4143d8:	58d2      	ldr	r2, [r2, r3]
  4143da:	f242 2150 	movw	r1, #8784	; 0x2250
  4143de:	4469      	add	r1, sp
  4143e0:	f242 6050 	movw	r0, #9808	; 0x2650

004143e4 <.LVL92>:
  4143e4:	4468      	add	r0, sp
  4143e6:	f008 fb2f 	bl	41ca48 <memcmp>

004143ea <.LVL93>:
  4143ea:	b918      	cbnz	r0, 4143f4 <.LVL94>
        appData.ecc_test_result--;
  4143ec:	4a3b      	ldr	r2, [pc, #236]	; (4144dc <.LCFI48+0x16>)
  4143ee:	6c53      	ldr	r3, [r2, #68]	; 0x44
  4143f0:	3b01      	subs	r3, #1
  4143f2:	6453      	str	r3, [r2, #68]	; 0x44

004143f4 <.LVL94>:
  4143f4:	f641 613c 	movw	r1, #7740	; 0x1e3c
  4143f8:	4469      	add	r1, sp
  4143fa:	f641 6050 	movw	r0, #7760	; 0x1e50
  4143fe:	4468      	add	r0, sp
{
  414400:	460b      	mov	r3, r1

00414402 <.LVL95>:
        digest[i] = i;
  414402:	1a5a      	subs	r2, r3, r1
  414404:	f803 2b01 	strb.w	r2, [r3], #1
    for (i = 0; i < (int)sizeof(digest); i++)
  414408:	4283      	cmp	r3, r0
  41440a:	d1fa      	bne.n	414402 <.LVL95>
    x = sizeof(sig);
  41440c:	f641 2438 	movw	r4, #6712	; 0x1a38
  414410:	446c      	add	r4, sp
  414412:	f44f 6380 	mov.w	r3, #1024	; 0x400

00414416 <.LVL97>:
  414416:	6023      	str	r3, [r4, #0]
    ret = wc_ecc_sign_hash(digest, sizeof(digest), sig, &x, (struct RNG *)&rng, &userA);
  414418:	f241 1578 	movw	r5, #4472	; 0x1178
  41441c:	446d      	add	r5, sp
  41441e:	9501      	str	r5, [sp, #4]
  414420:	f642 2350 	movw	r3, #10832	; 0x2a50
  414424:	446b      	add	r3, sp
  414426:	9300      	str	r3, [sp, #0]
  414428:	4623      	mov	r3, r4
  41442a:	f641 6250 	movw	r2, #7760	; 0x1e50
  41442e:	446a      	add	r2, sp
  414430:	2114      	movs	r1, #20
  414432:	f641 603c 	movw	r0, #7740	; 0x1e3c
  414436:	4468      	add	r0, sp
  414438:	f004 f910 	bl	41865c <L0>

0041443c <.LVL98>:
    verify = 0;
  41443c:	4b29      	ldr	r3, [pc, #164]	; (4144e4 <.LCFI48+0x1e>)
  41443e:	f642 3258 	movw	r2, #11096	; 0x2b58
  414442:	446a      	add	r2, sp
  414444:	441a      	add	r2, r3
  414446:	2100      	movs	r1, #0
  414448:	f642 3058 	movw	r0, #11096	; 0x2b58
  41444c:	4468      	add	r0, sp
  41444e:	50c1      	str	r1, [r0, r3]
    ret = wc_ecc_verify_hash(sig, x, digest, sizeof(digest), &verify, &userA);
  414450:	6821      	ldr	r1, [r4, #0]
  414452:	9501      	str	r5, [sp, #4]
  414454:	9200      	str	r2, [sp, #0]
  414456:	2314      	movs	r3, #20
  414458:	f641 623c 	movw	r2, #7740	; 0x1e3c
  41445c:	446a      	add	r2, sp
  41445e:	f641 6050 	movw	r0, #7760	; 0x1e50
  414462:	4468      	add	r0, sp
  414464:	f004 f9d0 	bl	418808 <.LFE17>

00414468 <.LVL99>:
    if (ret == 0)
  414468:	b918      	cbnz	r0, 414472 <.LVL99+0xa>
        appData.ecc_test_result--;
  41446a:	4a1c      	ldr	r2, [pc, #112]	; (4144dc <.LCFI48+0x16>)
  41446c:	6c53      	ldr	r3, [r2, #68]	; 0x44
  41446e:	3b01      	subs	r3, #1
  414470:	6453      	str	r3, [r2, #68]	; 0x44
    if (verify == 1)
  414472:	4b1c      	ldr	r3, [pc, #112]	; (4144e4 <.LCFI48+0x1e>)
  414474:	f642 3258 	movw	r2, #11096	; 0x2b58
  414478:	446a      	add	r2, sp
  41447a:	58d3      	ldr	r3, [r2, r3]
  41447c:	2b01      	cmp	r3, #1
  41447e:	d027      	beq.n	4144d0 <.LCFI48+0xa>
    x = sizeof(exportBuf);
  414480:	f641 2238 	movw	r2, #6712	; 0x1a38
  414484:	446a      	add	r2, sp
  414486:	f44f 6380 	mov.w	r3, #1024	; 0x400
  41448a:	6013      	str	r3, [r2, #0]
    ret = wc_ecc_export_private_only(&userA, exportBuf, &x);
  41448c:	f641 213c 	movw	r1, #6716	; 0x1a3c
  414490:	4469      	add	r1, sp
  414492:	f241 1078 	movw	r0, #4472	; 0x1178

00414496 <.LVL100>:
  414496:	4468      	add	r0, sp
  414498:	f008 fa16 	bl	41c8c8 <.LFE178>

0041449c <.LVL101>:
    if (ret == 0)
  41449c:	b918      	cbnz	r0, 4144a6 <.LVL101+0xa>
        appData.ecc_test_result--;
  41449e:	4a0f      	ldr	r2, [pc, #60]	; (4144dc <.LCFI48+0x16>)
  4144a0:	6c53      	ldr	r3, [r2, #68]	; 0x44
  4144a2:	3b01      	subs	r3, #1
  4144a4:	6453      	str	r3, [r2, #68]	; 0x44
    wc_ecc_free(&pubKey);
  4144a6:	a802      	add	r0, sp, #8

004144a8 <.LVL102>:
  4144a8:	f009 feb4 	bl	41e214 <.LFE27>

004144ac <.LVL103>:
    wc_ecc_free(&userB);
  4144ac:	f50d 600c 	add.w	r0, sp, #2240	; 0x8c0
  4144b0:	f009 feb0 	bl	41e214 <.LFE27>

004144b4 <.LVL104>:
    wc_ecc_free(&userA);
  4144b4:	f241 1078 	movw	r0, #4472	; 0x1178
  4144b8:	4468      	add	r0, sp
  4144ba:	f009 feab 	bl	41e214 <.LFE27>

004144be <.LVL105>:
}
  4144be:	f50d 5d2d 	add.w	sp, sp, #11072	; 0x2b40
  4144c2:	b007      	add	sp, #28

004144c4 <.LCFI47>:
  4144c4:	bd30      	pop	{r4, r5, pc}

004144c6 <.LCFI48>:
        appData.ecc_test_result--;
  4144c6:	4905      	ldr	r1, [pc, #20]	; (4144dc <.LCFI48+0x16>)
  4144c8:	6c4b      	ldr	r3, [r1, #68]	; 0x44
  4144ca:	3b01      	subs	r3, #1
  4144cc:	644b      	str	r3, [r1, #68]	; 0x44
  4144ce:	e73b      	b.n	414348 <.LVL84+0x22>
        appData.ecc_test_result--;
  4144d0:	4a02      	ldr	r2, [pc, #8]	; (4144dc <.LCFI48+0x16>)
  4144d2:	6c53      	ldr	r3, [r2, #68]	; 0x44
  4144d4:	3b01      	subs	r3, #1
  4144d6:	6453      	str	r3, [r2, #68]	; 0x44
  4144d8:	e7d2      	b.n	414480 <.LVL99+0x18>
  4144da:	bf00      	nop
  4144dc:	20417598 	.word	0x20417598
  4144e0:	ffffeedc 	.word	0xffffeedc
  4144e4:	ffffeed8 	.word	0xffffeed8

Disassembly of section .text.wc_HmacSetKey%102:

004144e8 <wc_HmacSetKey>:
    return ret;
}


int wc_HmacSetKey(Hmac* hmac, int type, const byte* key, word32 length)
{
  4144e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

004144ec <.LCFI1>:
    byte*  op;
    word32 i, hmac_block_size = 0;
    int    ret = 0;
    void*  heap = NULL;

    if (hmac == NULL || (key == NULL && length != 0) ||
  4144ec:	2800      	cmp	r0, #0
  4144ee:	f000 80ef 	beq.w	4146d0 <.LVL103>
  4144f2:	4616      	mov	r6, r2
  4144f4:	461f      	mov	r7, r3
  4144f6:	4604      	mov	r4, r0
  4144f8:	b912      	cbnz	r2, 414500 <.LCFI1+0x14>
  4144fa:	2b00      	cmp	r3, #0
  4144fc:	f040 80eb 	bne.w	4146d6 <.LVL103+0x6>
        !(type == MD5 || type == SHA    || type == SHA256 || type == SHA384
  414500:	2908      	cmp	r1, #8
  414502:	f200 80eb 	bhi.w	4146dc <.LVL103+0xc>
  414506:	f240 13b7 	movw	r3, #439	; 0x1b7

0041450a <.LVL31>:
  41450a:	40cb      	lsrs	r3, r1
    if (hmac == NULL || (key == NULL && length != 0) ||
  41450c:	f013 0f01 	tst.w	r3, #1
  414510:	f000 80e9 	beq.w	4146e6 <.LVL105>
                      || type == SHA512 || type == BLAKE2B_ID
                      || type == SHA224)) {
        return BAD_FUNC_ARG;
    }

    hmac->innerHashKeyed = 0;
  414514:	2300      	movs	r3, #0
  414516:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
    hmac->macType = (byte)type;
  41451a:	f884 1244 	strb.w	r1, [r4, #580]	; 0x244

0041451e <.LBB4>:
    switch (type) {
  41451e:	2905      	cmp	r1, #5
  414520:	f200 80e7 	bhi.w	4146f2 <.LBB9>
  414524:	e8df f001 	tbb	[pc, r1]
  414528:	e51e1903 	.word	0xe51e1903
  41452c:	2328      	.short	0x2328
            ret = wc_InitMd5(&hmac->hash.md5);
  41452e:	4620      	mov	r0, r4

00414530 <.LVL33>:
  414530:	f00a fac7 	bl	41eac2 <.LFE172>

00414534 <.LVL34>:
  414534:	4605      	mov	r5, r0

00414536 <.LVL35>:
    hmac->heap = heap;
  414536:	2300      	movs	r3, #0
  414538:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240

0041453c <.LBE4>:
    #endif /* HAVE_CAVIUM */
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    ret = _InitHmac(hmac, type, heap);
    if (ret != 0)
  41453c:	2d00      	cmp	r5, #0
  41453e:	f040 80cf 	bne.w	4146e0 <.LVL104>
#ifdef HAVE_FIPS
    if (length < HMAC_FIPS_MIN_KEY)
        return HMAC_MIN_KEYLEN_E;
#endif

    ip = (byte*)hmac->ipad;
  414542:	f504 7880 	add.w	r8, r4, #256	; 0x100

00414546 <.LVL37>:
    op = (byte*)hmac->opad;

    switch (hmac->macType) {
  414546:	f894 3244 	ldrb.w	r3, [r4, #580]	; 0x244
  41454a:	2b05      	cmp	r3, #5
  41454c:	f200 80ce 	bhi.w	4146ec <.LVL106>
  414550:	e8df f003 	tbb	[pc, r3]
  414554:	cc6d5017 	.word	0xcc6d5017
  414558:	89a4      	.short	0x89a4

0041455a <.LBB8>:
            ret = wc_InitSha(&hmac->hash.sha);
  41455a:	4620      	mov	r0, r4

0041455c <.LVL39>:
  41455c:	f008 fa14 	bl	41c988 <.LFE19>

00414560 <.LVL40>:
  414560:	4605      	mov	r5, r0

00414562 <.LVL41>:
  414562:	e7e8      	b.n	414536 <.LVL35>

00414564 <.LVL42>:
            ret = wc_InitSha256(&hmac->hash.sha256);
  414564:	4620      	mov	r0, r4

00414566 <.LVL43>:
  414566:	f006 f927 	bl	41a7b8 <.LFE41>

0041456a <.LVL44>:
  41456a:	4605      	mov	r5, r0

0041456c <.LVL45>:
  41456c:	e7e3      	b.n	414536 <.LVL35>

0041456e <.LVL46>:
            ret = wc_InitSha384(&hmac->hash.sha384);
  41456e:	4620      	mov	r0, r4

00414570 <.LVL47>:
  414570:	f00a fbf4 	bl	41ed5c <.LFE22>

00414574 <.LVL48>:
  414574:	4605      	mov	r5, r0

00414576 <.LVL49>:
  414576:	e7de      	b.n	414536 <.LVL35>

00414578 <.LVL50>:
            ret = wc_InitSha512(&hmac->hash.sha512);
  414578:	4620      	mov	r0, r4

0041457a <.LVL51>:
  41457a:	f00a fbe8 	bl	41ed4e <.LFE206>

0041457e <.LVL52>:
  41457e:	4605      	mov	r5, r0

00414580 <.LVL53>:
  414580:	e7d9      	b.n	414536 <.LVL35>

00414582 <.LBE8>:
    #ifndef NO_MD5
        case MD5:
            hmac_block_size = MD5_BLOCK_SIZE;
            if (length <= MD5_BLOCK_SIZE) {
  414582:	2f40      	cmp	r7, #64	; 0x40
  414584:	d81c      	bhi.n	4145c0 <.LVL60>
                if (key != NULL) {
  414586:	2e00      	cmp	r6, #0
  414588:	f000 80c3 	beq.w	414712 <.LVL112>
                    XMEMCPY(ip, key, length);
  41458c:	463a      	mov	r2, r7
  41458e:	4631      	mov	r1, r6
  414590:	4640      	mov	r0, r8
  414592:	f002 f979 	bl	416888 <memcpy>

00414596 <.LVL55>:
            hmac_block_size = MD5_BLOCK_SIZE;
  414596:	2640      	movs	r6, #64	; 0x40

00414598 <.LVL56>:
    #endif
    }
#endif

    if (ret == 0) {
        if (length < hmac_block_size)
  414598:	42b7      	cmp	r7, r6
  41459a:	d322      	bcc.n	4145e2 <.LVL65>

0041459c <.LVL57>:
  41459c:	4643      	mov	r3, r8
  41459e:	f204 107f 	addw	r0, r4, #383	; 0x17f
  4145a2:	eb08 0106 	add.w	r1, r8, r6

004145a6 <.LVL58>:
            XMEMSET(ip + length, 0, hmac_block_size - length);

        for(i = 0; i < hmac_block_size; i++) {
            op[i] = ip[i] ^ OPAD;
  4145a6:	781a      	ldrb	r2, [r3, #0]
  4145a8:	f082 025c 	eor.w	r2, r2, #92	; 0x5c
  4145ac:	f800 2f01 	strb.w	r2, [r0, #1]!
            ip[i] ^= IPAD;
  4145b0:	781a      	ldrb	r2, [r3, #0]
  4145b2:	f082 0236 	eor.w	r2, r2, #54	; 0x36
  4145b6:	f803 2b01 	strb.w	r2, [r3], #1
        for(i = 0; i < hmac_block_size; i++) {
  4145ba:	428b      	cmp	r3, r1
  4145bc:	d1f3      	bne.n	4145a6 <.LVL58>
  4145be:	e08f      	b.n	4146e0 <.LVL104>

004145c0 <.LVL60>:
                ret = wc_Md5Update(&hmac->hash.md5, key, length);
  4145c0:	463a      	mov	r2, r7
  4145c2:	4631      	mov	r1, r6
  4145c4:	4620      	mov	r0, r4
  4145c6:	f006 fbc5 	bl	41ad54 <.LFE23>

004145ca <.LVL61>:
                if (ret != 0)
  4145ca:	b108      	cbz	r0, 4145d0 <.LVL61+0x6>
                ret = wc_Md5Update(&hmac->hash.md5, key, length);
  4145cc:	4605      	mov	r5, r0
  4145ce:	e087      	b.n	4146e0 <.LVL104>
                ret = wc_Md5Final(&hmac->hash.md5, ip);
  4145d0:	4641      	mov	r1, r8
  4145d2:	4620      	mov	r0, r4

004145d4 <.LVL62>:
  4145d4:	f004 fdd6 	bl	419184 <.LFE168>

004145d8 <.LVL63>:
                if (ret != 0)
  4145d8:	2800      	cmp	r0, #0
  4145da:	f040 8090 	bne.w	4146fe <.LBE9>
            hmac_block_size = MD5_BLOCK_SIZE;
  4145de:	2640      	movs	r6, #64	; 0x40

004145e0 <.LVL64>:
                length = MD5_DIGEST_SIZE;
  4145e0:	2710      	movs	r7, #16

004145e2 <.LVL65>:
            XMEMSET(ip + length, 0, hmac_block_size - length);
  4145e2:	1bf2      	subs	r2, r6, r7
  4145e4:	2100      	movs	r1, #0
  4145e6:	eb08 0007 	add.w	r0, r8, r7
  4145ea:	f006 f801 	bl	41a5f0 <.LFE157>

004145ee <.LVL66>:
        for(i = 0; i < hmac_block_size; i++) {
  4145ee:	2e00      	cmp	r6, #0
  4145f0:	d076      	beq.n	4146e0 <.LVL104>
  4145f2:	e7d3      	b.n	41459c <.LVL57>

004145f4 <.LVL67>:
            if (length <= SHA_BLOCK_SIZE) {
  4145f4:	2f40      	cmp	r7, #64	; 0x40
  4145f6:	d809      	bhi.n	41460c <.LVL70>
                if (key != NULL) {
  4145f8:	2e00      	cmp	r6, #0
  4145fa:	f000 808c 	beq.w	414716 <.LVL114>
                    XMEMCPY(ip, key, length);
  4145fe:	463a      	mov	r2, r7
  414600:	4631      	mov	r1, r6
  414602:	4640      	mov	r0, r8
  414604:	f002 f940 	bl	416888 <memcpy>

00414608 <.LVL68>:
            hmac_block_size = SHA_BLOCK_SIZE;
  414608:	2640      	movs	r6, #64	; 0x40

0041460a <.LVL69>:
  41460a:	e7c5      	b.n	414598 <.LVL56>

0041460c <.LVL70>:
                ret = wc_ShaUpdate(&hmac->hash.sha, key, length);
  41460c:	463a      	mov	r2, r7
  41460e:	4631      	mov	r1, r6
  414610:	4620      	mov	r0, r4
  414612:	f006 fdb6 	bl	41b182 <.LFE58>

00414616 <.LVL71>:
                if (ret != 0)
  414616:	b108      	cbz	r0, 41461c <.LVL71+0x6>
                ret = wc_ShaUpdate(&hmac->hash.sha, key, length);
  414618:	4605      	mov	r5, r0
  41461a:	e061      	b.n	4146e0 <.LVL104>
                ret = wc_ShaFinal(&hmac->hash.sha, ip);
  41461c:	4641      	mov	r1, r8
  41461e:	4620      	mov	r0, r4

00414620 <.LVL72>:
  414620:	f006 fa82 	bl	41ab28 <.LFE171>

00414624 <.LVL73>:
                if (ret != 0)
  414624:	2800      	cmp	r0, #0
  414626:	d16c      	bne.n	414702 <.LBE9+0x4>
            hmac_block_size = SHA_BLOCK_SIZE;
  414628:	2640      	movs	r6, #64	; 0x40

0041462a <.LVL74>:
                length = SHA_DIGEST_SIZE;
  41462a:	2714      	movs	r7, #20

0041462c <.LVL75>:
  41462c:	e7d9      	b.n	4145e2 <.LVL65>

0041462e <.LVL76>:
            if (length <= SHA256_BLOCK_SIZE) {
  41462e:	2f40      	cmp	r7, #64	; 0x40
  414630:	d808      	bhi.n	414644 <.LVL79>
                if (key != NULL) {
  414632:	2e00      	cmp	r6, #0
  414634:	d071      	beq.n	41471a <.LVL116>
                    XMEMCPY(ip, key, length);
  414636:	463a      	mov	r2, r7
  414638:	4631      	mov	r1, r6
  41463a:	4640      	mov	r0, r8
  41463c:	f002 f924 	bl	416888 <memcpy>

00414640 <.LVL77>:
    		hmac_block_size = SHA256_BLOCK_SIZE;
  414640:	2640      	movs	r6, #64	; 0x40

00414642 <.LVL78>:
  414642:	e7a9      	b.n	414598 <.LVL56>

00414644 <.LVL79>:
                ret = wc_Sha256Update(&hmac->hash.sha256, key, length);
  414644:	463a      	mov	r2, r7
  414646:	4631      	mov	r1, r6
  414648:	4620      	mov	r0, r4
  41464a:	f006 fddb 	bl	41b204 <.LFE156>

0041464e <.LVL80>:
                if (ret != 0)
  41464e:	b108      	cbz	r0, 414654 <.LVL80+0x6>
                ret = wc_Sha256Update(&hmac->hash.sha256, key, length);
  414650:	4605      	mov	r5, r0
  414652:	e045      	b.n	4146e0 <.LVL104>
                ret = wc_Sha256Final(&hmac->hash.sha256, ip);
  414654:	4641      	mov	r1, r8
  414656:	4620      	mov	r0, r4

00414658 <.LVL81>:
  414658:	f005 ff7c 	bl	41a554 <.LFE151>

0041465c <.LVL82>:
                if (ret != 0)
  41465c:	2800      	cmp	r0, #0
  41465e:	d152      	bne.n	414706 <.LBE9+0x8>
    		hmac_block_size = SHA256_BLOCK_SIZE;
  414660:	2640      	movs	r6, #64	; 0x40

00414662 <.LVL83>:
                length = SHA256_DIGEST_SIZE;
  414662:	2720      	movs	r7, #32

00414664 <.LVL84>:
  414664:	e7bd      	b.n	4145e2 <.LVL65>

00414666 <.LVL85>:
            if (length <= SHA384_BLOCK_SIZE) {
  414666:	2f80      	cmp	r7, #128	; 0x80
  414668:	d808      	bhi.n	41467c <.LVL88>
                if (key != NULL) {
  41466a:	2e00      	cmp	r6, #0
  41466c:	d057      	beq.n	41471e <.LVL118>
                    XMEMCPY(ip, key, length);
  41466e:	463a      	mov	r2, r7
  414670:	4631      	mov	r1, r6
  414672:	4640      	mov	r0, r8
  414674:	f002 f908 	bl	416888 <memcpy>

00414678 <.LVL86>:
            hmac_block_size = SHA384_BLOCK_SIZE;
  414678:	2680      	movs	r6, #128	; 0x80

0041467a <.LVL87>:
  41467a:	e78d      	b.n	414598 <.LVL56>

0041467c <.LVL88>:
                ret = wc_Sha384Update(&hmac->hash.sha384, key, length);
  41467c:	463a      	mov	r2, r7
  41467e:	4631      	mov	r1, r6
  414680:	4620      	mov	r0, r4
  414682:	f003 fcd0 	bl	418026 <.LBE719>

00414686 <.LVL89>:
                if (ret != 0)
  414686:	b108      	cbz	r0, 41468c <.LVL89+0x6>
                ret = wc_Sha384Update(&hmac->hash.sha384, key, length);
  414688:	4605      	mov	r5, r0
  41468a:	e029      	b.n	4146e0 <.LVL104>
                ret = wc_Sha384Final(&hmac->hash.sha384, ip);
  41468c:	4641      	mov	r1, r8
  41468e:	4620      	mov	r0, r4

00414690 <.LVL90>:
  414690:	f7ff fb6e 	bl	413d70 <.LFE21>

00414694 <.LVL91>:
                if (ret != 0)
  414694:	bbc8      	cbnz	r0, 41470a <.LVL110>
            hmac_block_size = SHA384_BLOCK_SIZE;
  414696:	2680      	movs	r6, #128	; 0x80

00414698 <.LVL92>:
                length = SHA384_DIGEST_SIZE;
  414698:	2730      	movs	r7, #48	; 0x30

0041469a <.LVL93>:
  41469a:	e7a2      	b.n	4145e2 <.LVL65>

0041469c <.LVL94>:
            if (length <= SHA512_BLOCK_SIZE) {
  41469c:	2f80      	cmp	r7, #128	; 0x80
  41469e:	d807      	bhi.n	4146b0 <.LVL97>
                if (key != NULL) {
  4146a0:	b3fe      	cbz	r6, 414722 <.LVL120>
                    XMEMCPY(ip, key, length);
  4146a2:	463a      	mov	r2, r7
  4146a4:	4631      	mov	r1, r6
  4146a6:	4640      	mov	r0, r8
  4146a8:	f002 f8ee 	bl	416888 <memcpy>

004146ac <.LVL95>:
            hmac_block_size = SHA512_BLOCK_SIZE;
  4146ac:	2680      	movs	r6, #128	; 0x80

004146ae <.LVL96>:
  4146ae:	e773      	b.n	414598 <.LVL56>

004146b0 <.LVL97>:
                ret = wc_Sha512Update(&hmac->hash.sha512, key, length);
  4146b0:	463a      	mov	r2, r7
  4146b2:	4631      	mov	r1, r6
  4146b4:	4620      	mov	r0, r4
  4146b6:	f003 fc41 	bl	417f3c <.LFE169>

004146ba <.LVL98>:
                if (ret != 0)
  4146ba:	b108      	cbz	r0, 4146c0 <.LVL98+0x6>
                ret = wc_Sha512Update(&hmac->hash.sha512, key, length);
  4146bc:	4605      	mov	r5, r0
  4146be:	e00f      	b.n	4146e0 <.LVL104>
                ret = wc_Sha512Final(&hmac->hash.sha512, ip);
  4146c0:	4641      	mov	r1, r8
  4146c2:	4620      	mov	r0, r4

004146c4 <.LVL99>:
  4146c4:	f7ff fa0c 	bl	413ae0 <wc_Sha512Final>

004146c8 <.LVL100>:
                if (ret != 0)
  4146c8:	bb08      	cbnz	r0, 41470e <.LVL110+0x4>
            hmac_block_size = SHA512_BLOCK_SIZE;
  4146ca:	2680      	movs	r6, #128	; 0x80

004146cc <.LVL101>:
                length = SHA512_DIGEST_SIZE;
  4146cc:	2740      	movs	r7, #64	; 0x40

004146ce <.LVL102>:
  4146ce:	e788      	b.n	4145e2 <.LVL65>

004146d0 <.LVL103>:
        return BAD_FUNC_ARG;
  4146d0:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  4146d4:	e004      	b.n	4146e0 <.LVL104>
  4146d6:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  4146da:	e001      	b.n	4146e0 <.LVL104>
  4146dc:	f06f 05ac 	mvn.w	r5, #172	; 0xac

004146e0 <.LVL104>:
        }
    }

    return ret;
}
  4146e0:	4628      	mov	r0, r5
  4146e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004146e6 <.LVL105>:
        return BAD_FUNC_ARG;
  4146e6:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  4146ea:	e7f9      	b.n	4146e0 <.LVL104>

004146ec <.LVL106>:
            return BAD_FUNC_ARG;
  4146ec:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  4146f0:	e7f6      	b.n	4146e0 <.LVL104>

004146f2 <.LBB9>:
    hmac->heap = heap;
  4146f2:	2300      	movs	r3, #0
  4146f4:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240

004146f8 <.LVL108>:
            ret = BAD_FUNC_ARG;
  4146f8:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  4146fc:	e7f0      	b.n	4146e0 <.LVL104>

004146fe <.LBE9>:
                ret = wc_Md5Final(&hmac->hash.md5, ip);
  4146fe:	4605      	mov	r5, r0
  414700:	e7ee      	b.n	4146e0 <.LVL104>
                ret = wc_ShaFinal(&hmac->hash.sha, ip);
  414702:	4605      	mov	r5, r0
  414704:	e7ec      	b.n	4146e0 <.LVL104>
                ret = wc_Sha256Final(&hmac->hash.sha256, ip);
  414706:	4605      	mov	r5, r0
  414708:	e7ea      	b.n	4146e0 <.LVL104>

0041470a <.LVL110>:
                ret = wc_Sha384Final(&hmac->hash.sha384, ip);
  41470a:	4605      	mov	r5, r0
  41470c:	e7e8      	b.n	4146e0 <.LVL104>
                ret = wc_Sha512Final(&hmac->hash.sha512, ip);
  41470e:	4605      	mov	r5, r0

00414710 <.LVL111>:
  414710:	e7e6      	b.n	4146e0 <.LVL104>

00414712 <.LVL112>:
            hmac_block_size = MD5_BLOCK_SIZE;
  414712:	2640      	movs	r6, #64	; 0x40

00414714 <.LVL113>:
  414714:	e740      	b.n	414598 <.LVL56>

00414716 <.LVL114>:
            hmac_block_size = SHA_BLOCK_SIZE;
  414716:	2640      	movs	r6, #64	; 0x40

00414718 <.LVL115>:
  414718:	e73e      	b.n	414598 <.LVL56>

0041471a <.LVL116>:
    		hmac_block_size = SHA256_BLOCK_SIZE;
  41471a:	2640      	movs	r6, #64	; 0x40

0041471c <.LVL117>:
  41471c:	e73c      	b.n	414598 <.LVL56>

0041471e <.LVL118>:
            hmac_block_size = SHA384_BLOCK_SIZE;
  41471e:	2680      	movs	r6, #128	; 0x80

00414720 <.LVL119>:
  414720:	e73a      	b.n	414598 <.LVL56>

00414722 <.LVL120>:
            hmac_block_size = SHA512_BLOCK_SIZE;
  414722:	2680      	movs	r6, #128	; 0x80

00414724 <.LVL121>:
  414724:	e738      	b.n	414598 <.LVL56>

Disassembly of section .rodata.ecc_sets%103:

00414728 <ecc_sets>:
  414728:	000e 0000 0008 0000 8444 0040 8450 0040     ........D.@.P.@.
  414738:	8470 0040 8490 0040 84b0 0040 84d0 0040     p.@...@...@...@.
  414748:	84ec 0040 eed8 0041 0005 0000 00b6 0000     ..@...A.........
  414758:	0001 0000 0010 0000 000a 0000 850c 0040     ..............@.
  414768:	8518 0040 853c 0040 8560 0040 8584 0040     ..@.<.@.`.@...@.
  414778:	85a8 0040 85cc 0040 eee0 0041 0005 0000     ..@...@...A.....
  414788:	00cc 0000 0001 0000 0014 0000 000c 0000     ................
  414798:	85f0 0040 85fc 0040 8628 0040 8654 0040     ..@...@.(.@.T.@.
  4147a8:	8680 0040 86ac 0040 86d8 0040 eee8 0041     ..@...@...@...A.
  4147b8:	0005 0000 00b8 0000 0001 0000 0018 0000     ................
  4147c8:	0001 0000 8704 0040 8710 0040 8744 0040     ......@...@.D.@.
  4147d8:	8778 0040 87ac 0040 87e0 0040 8814 0040     x.@...@...@...@.
  4147e8:	eef0 0041 0008 0000 0208 0000 0001 0000     ..A.............
  4147f8:	001c 0000 000e 0000 8844 0040 8850 0040     ........D.@.P.@.
  414808:	888c 0040 88c8 0040 8904 0040 8940 0040     ..@...@...@.@.@.
  414818:	897c 0040 eef8 0041 0005 0000 00d1 0000     |.@...A.........
  414828:	0001 0000 001e 0000 0004 0000 89b8 0040     ..............@.
  414838:	89c4 0040 8a04 0040 8a44 0040 8a84 0040     ..@...@.D.@...@.
  414848:	8ac4 0040 8b04 0040 eed0 0041 0008 0000     ..@...@...A.....
  414858:	020b 0000 0001 0000 0020 0000 0007 0000     ........ .......
  414868:	8b44 0040 8b50 0040 8b94 0040 8bd8 0040     D.@.P.@...@...@.
  414878:	8c1c 0040 8c60 0040 8ca4 0040 ef00 0041     ..@.`.@...@...A.
  414888:	0008 0000 020e 0000 0001 0000 0030 0000     ............0...
  414898:	000f 0000 8ce8 0040 8cf4 0040 8d58 0040     ......@...@.X.@.
  4148a8:	8dbc 0040 8e20 0040 8e84 0040 8ee8 0040     ..@. .@...@...@.
  4148b8:	ef08 0041 0005 0000 00d2 0000 0001 0000     ..A.............
  4148c8:	0042 0000 0010 0000 8f4c 0040 8f58 0040     B.......L.@.X.@.
  4148d8:	8fdc 0040 9060 0040 90e4 0040 9168 0040     ..@.`.@...@.h.@.
  4148e8:	91ec 0040 ef10 0041 0005 0000 00d3 0000     ..@...A.........
  4148f8:	0001 0000 0000 0000 ffff ffff 0000 0000     ................
	...

Disassembly of section .text.wc_ecc_sign_hash_ex%104:

00414930 <wc_ecc_sign_hash_ex>:
{
  414930:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}

00414934 <.LCFI80>:
  414934:	f6ad 5d38 	subw	sp, sp, #3384	; 0xd38

00414938 <.LCFI81>:
  414938:	4607      	mov	r7, r0
  41493a:	468a      	mov	sl, r1
  41493c:	4616      	mov	r6, r2
  41493e:	461d      	mov	r5, r3
   DECLARE_CURVE_SPECS(1)
  414940:	f50d 640c 	add.w	r4, sp, #2240	; 0x8c0
  414944:	f8cd 48bc 	str.w	r4, [sp, #2236]	; 0x8bc
  414948:	2228      	movs	r2, #40	; 0x28

0041494a <.LVL954>:
  41494a:	2100      	movs	r1, #0

0041494c <.LVL955>:
  41494c:	4620      	mov	r0, r4

0041494e <.LVL956>:
  41494e:	f005 fe4f 	bl	41a5f0 <.LFE157>

00414952 <.LVL957>:
  414952:	f60d 03e8 	addw	r3, sp, #2280	; 0x8e8
  414956:	61a3      	str	r3, [r4, #24]
  414958:	2301      	movs	r3, #1
  41495a:	61e3      	str	r3, [r4, #28]
   if (in == NULL || r == NULL || s == NULL || key == NULL || rng == NULL)
  41495c:	2f00      	cmp	r7, #0
  41495e:	f000 80d0 	beq.w	414b02 <.LBE64>
  414962:	f8dd 3d58 	ldr.w	r3, [sp, #3416]	; 0xd58
  414966:	2b00      	cmp	r3, #0
  414968:	f000 80cb 	beq.w	414b02 <.LBE64>
  41496c:	f8dd 3d5c 	ldr.w	r3, [sp, #3420]	; 0xd5c
  414970:	2d00      	cmp	r5, #0
  414972:	bf18      	it	ne
  414974:	2b00      	cmpne	r3, #0
  414976:	f000 80c7 	beq.w	414b08 <.LBE64+0x6>
  41497a:	2e00      	cmp	r6, #0
  41497c:	f000 80c4 	beq.w	414b08 <.LBE64+0x6>
   if (key->type != ECC_PRIVATEKEY) {
  414980:	682b      	ldr	r3, [r5, #0]
  414982:	2b02      	cmp	r3, #2
  414984:	f040 80c3 	bne.w	414b0e <.LBE64+0xc>
   if (wc_ecc_is_valid_idx(key->idx) != 1) {
  414988:	6868      	ldr	r0, [r5, #4]
  41498a:	f009 fd67 	bl	41e45c <.LBE24>

0041498e <.LVL958>:
  41498e:	2801      	cmp	r0, #1
  414990:	f040 80c0 	bne.w	414b14 <.LBE64+0x12>
   if ((err = mp_init(&e)) != MP_OKAY) {
  414994:	f50d 6031 	add.w	r0, sp, #2832	; 0xb10
  414998:	f00a f97c 	bl	41ec94 <.LFE193>

0041499c <.LVL959>:
  41499c:	4604      	mov	r4, r0
  41499e:	b120      	cbz	r0, 4149aa <.LCFI83>

004149a0 <.LVL960>:
}
  4149a0:	4620      	mov	r0, r4
  4149a2:	f60d 5d38 	addw	sp, sp, #3384	; 0xd38

004149a6 <.LCFI82>:
  4149a6:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

004149aa <.LCFI83>:
   err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ORDER);
  4149aa:	2208      	movs	r2, #8
  4149ac:	f60d 01bc 	addw	r1, sp, #2236	; 0x8bc
  4149b0:	6928      	ldr	r0, [r5, #16]

004149b2 <.LVL962>:
  4149b2:	f004 fee3 	bl	41977c <.LFE155>

004149b6 <.LVL963>:
   if (err == MP_OKAY) {
  4149b6:	4604      	mov	r4, r0
  4149b8:	b140      	cbz	r0, 4149cc <.LBB63>

004149ba <.LVL964>:
   mp_clear(&e);
  4149ba:	f50d 6031 	add.w	r0, sp, #2832	; 0xb10
  4149be:	f00a f9ed 	bl	41ed9c <.LFE170>

004149c2 <.LBB61>:
    _wc_ecc_curve_free(curve);
  4149c2:	f8dd 08bc 	ldr.w	r0, [sp, #2236]	; 0x8bc
  4149c6:	f007 fc89 	bl	41c2dc <.LFE46>

004149ca <.LVL966>:
  4149ca:	e7e9      	b.n	4149a0 <.LVL960>

004149cc <.LBB63>:
       word32 orderBits = mp_count_bits(curve->order);
  4149cc:	f8dd 38bc 	ldr.w	r3, [sp, #2236]	; 0x8bc
  4149d0:	68d8      	ldr	r0, [r3, #12]

004149d2 <.LVL968>:
  4149d2:	f00a fac1 	bl	41ef58 <.LFE80>

004149d6 <.LVL969>:
  4149d6:	4683      	mov	fp, r0

004149d8 <.LVL970>:
       if ((WOLFSSL_BIT_SIZE * inlen) > orderBits)
  4149d8:	ebb0 0fca 	cmp.w	r0, sl, lsl #3
  4149dc:	f080 809f 	bcs.w	414b1e <.LVL1007>
           inlen = (orderBits + WOLFSSL_BIT_SIZE - 1) / WOLFSSL_BIT_SIZE;
  4149e0:	f100 0a07 	add.w	sl, r0, #7

004149e4 <.LVL971>:
       err = mp_read_unsigned_bin(&e, (byte*)in, inlen);
  4149e4:	ea4f 02da 	mov.w	r2, sl, lsr #3

004149e8 <.LVL972>:
  4149e8:	4639      	mov	r1, r7
  4149ea:	f50d 6031 	add.w	r0, sp, #2832	; 0xb10

004149ee <.LVL973>:
  4149ee:	f00a fa2b 	bl	41ee48 <.LFE72>

004149f2 <.LVL974>:
       if (err == MP_OKAY && (WOLFSSL_BIT_SIZE * inlen) > orderBits)
  4149f2:	2800      	cmp	r0, #0
  4149f4:	f040 8091 	bne.w	414b1a <.LBB65>
  4149f8:	f02a 0a07 	bic.w	sl, sl, #7

004149fc <.LVL975>:
  4149fc:	45d3      	cmp	fp, sl
  4149fe:	d207      	bcs.n	414a10 <.LBB64>
           mp_rshb(&e, WOLFSSL_BIT_SIZE - (orderBits & 0x7));
  414a00:	f00b 0107 	and.w	r1, fp, #7
  414a04:	f1c1 0108 	rsb	r1, r1, #8
  414a08:	f50d 6031 	add.w	r0, sp, #2832	; 0xb10

00414a0c <.LVL976>:
  414a0c:	f00a faac 	bl	41ef68 <.LFE97>

00414a10 <.LBB64>:
       if (wc_ecc_init_ex(&pubkey, key->heap, INVALID_DEVID) == MP_OKAY) {
  414a10:	f06f 0201 	mvn.w	r2, #1
  414a14:	6969      	ldr	r1, [r5, #20]
  414a16:	a801      	add	r0, sp, #4
  414a18:	f008 fc88 	bl	41d32c <.LFE8>

00414a1c <.LVL978>:
  414a1c:	2800      	cmp	r0, #0
  414a1e:	d1cc      	bne.n	4149ba <.LVL964>
  414a20:	f04f 0940 	mov.w	r9, #64	; 0x40
  414a24:	e010      	b.n	414a48 <.LVL985>

00414a26 <.LVL979>:
                   mp_clear(pubkey.pubkey.x);
  414a26:	a807      	add	r0, sp, #28
  414a28:	f00a f9b8 	bl	41ed9c <.LFE170>

00414a2c <.LVL980>:
                   mp_clear(pubkey.pubkey.y);
  414a2c:	a891      	add	r0, sp, #580	; 0x244
  414a2e:	f00a f9b5 	bl	41ed9c <.LFE170>

00414a32 <.LVL981>:
                   mp_clear(pubkey.pubkey.z);
  414a32:	f20d 406c 	addw	r0, sp, #1132	; 0x46c
  414a36:	f00a f9b1 	bl	41ed9c <.LFE170>

00414a3a <.LVL982>:
                   mp_forcezero(&pubkey.k);
  414a3a:	f20d 6094 	addw	r0, sp, #1684	; 0x694
  414a3e:	f00a fa6b 	bl	41ef18 <mp_forcezero>

00414a42 <.LVL983>:
               if (++loop_check > 64) {
  414a42:	f1b9 0901 	subs.w	r9, r9, #1

00414a46 <.LVL984>:
  414a46:	d056      	beq.n	414af6 <.LVL1002+0x6>

00414a48 <.LVL985>:
               err = wc_ecc_make_key_ex(rng, key->dp->size, &pubkey,
  414a48:	6929      	ldr	r1, [r5, #16]
  414a4a:	684b      	ldr	r3, [r1, #4]
  414a4c:	aa01      	add	r2, sp, #4
  414a4e:	6809      	ldr	r1, [r1, #0]
  414a50:	4630      	mov	r0, r6
  414a52:	f000 ffed 	bl	415a30 <.LFE18>

00414a56 <.LVL986>:
               if (err != MP_OKAY) break;
  414a56:	4604      	mov	r4, r0
  414a58:	2800      	cmp	r0, #0
  414a5a:	d14e      	bne.n	414afa <.LVL1003>
               err = mp_mod(pubkey.pubkey.x, curve->order, r);
  414a5c:	f8dd 38bc 	ldr.w	r3, [sp, #2236]	; 0x8bc
  414a60:	f8dd 2d58 	ldr.w	r2, [sp, #3416]	; 0xd58
  414a64:	68d9      	ldr	r1, [r3, #12]
  414a66:	a807      	add	r0, sp, #28

00414a68 <.LVL987>:
  414a68:	f00a fa6e 	bl	41ef48 <.LFE75>

00414a6c <.LVL988>:
               if (err != MP_OKAY) break;
  414a6c:	4604      	mov	r4, r0
  414a6e:	2800      	cmp	r0, #0
  414a70:	d143      	bne.n	414afa <.LVL1003>
               if (mp_iszero(r) == MP_YES) {
  414a72:	f8dd 0d58 	ldr.w	r0, [sp, #3416]	; 0xd58

00414a76 <.LVL989>:
  414a76:	f00a f9fb 	bl	41ee70 <.LFE93>

00414a7a <.LVL990>:
  414a7a:	2801      	cmp	r0, #1
  414a7c:	d0d3      	beq.n	414a26 <.LVL979>
                   err = mp_invmod(&pubkey.k, curve->order, &pubkey.k);
  414a7e:	f8dd 38bc 	ldr.w	r3, [sp, #2236]	; 0x8bc
  414a82:	f20d 6294 	addw	r2, sp, #1684	; 0x694
  414a86:	68d9      	ldr	r1, [r3, #12]
  414a88:	4610      	mov	r0, r2
  414a8a:	f00a fa55 	bl	41ef38 <.LFE83>

00414a8e <.LVL991>:
                   if (err != MP_OKAY) break;
  414a8e:	4604      	mov	r4, r0
  414a90:	bb98      	cbnz	r0, 414afa <.LVL1003>
                   err = mp_mulmod(&key->k, r, curve->order, s);
  414a92:	f8dd 28bc 	ldr.w	r2, [sp, #2236]	; 0x8bc
  414a96:	f8dd 3d5c 	ldr.w	r3, [sp, #3420]	; 0xd5c
  414a9a:	68d2      	ldr	r2, [r2, #12]
  414a9c:	f8dd 1d58 	ldr.w	r1, [sp, #3416]	; 0xd58
  414aa0:	f505 60d2 	add.w	r0, r5, #1680	; 0x690

00414aa4 <.LVL992>:
  414aa4:	f00a fa4c 	bl	41ef40 <.LFE79>

00414aa8 <.LVL993>:
                   if (err != MP_OKAY) break;
  414aa8:	4604      	mov	r4, r0
  414aaa:	bb30      	cbnz	r0, 414afa <.LVL1003>
                   err = mp_add(&e, s, s);
  414aac:	f8dd 2d5c 	ldr.w	r2, [sp, #3420]	; 0xd5c
  414ab0:	4611      	mov	r1, r2
  414ab2:	f50d 6031 	add.w	r0, sp, #2832	; 0xb10

00414ab6 <.LVL994>:
  414ab6:	f00a f9bd 	bl	41ee34 <.LFE222>

00414aba <.LVL995>:
                   if (err != MP_OKAY) break;
  414aba:	4604      	mov	r4, r0
  414abc:	b9e8      	cbnz	r0, 414afa <.LVL1003>
                   err = mp_mod(s, curve->order, s);
  414abe:	f8dd 38bc 	ldr.w	r3, [sp, #2236]	; 0x8bc
  414ac2:	f8dd 2d5c 	ldr.w	r2, [sp, #3420]	; 0xd5c
  414ac6:	68d9      	ldr	r1, [r3, #12]
  414ac8:	4610      	mov	r0, r2

00414aca <.LVL996>:
  414aca:	f00a fa3d 	bl	41ef48 <.LFE75>

00414ace <.LVL997>:
                   if (err != MP_OKAY) break;
  414ace:	4604      	mov	r4, r0
  414ad0:	b998      	cbnz	r0, 414afa <.LVL1003>
                   err = mp_mulmod(s, &pubkey.k, curve->order, s);
  414ad2:	f8dd 28bc 	ldr.w	r2, [sp, #2236]	; 0x8bc
  414ad6:	f8dd 3d5c 	ldr.w	r3, [sp, #3420]	; 0xd5c
  414ada:	68d2      	ldr	r2, [r2, #12]
  414adc:	f20d 6194 	addw	r1, sp, #1684	; 0x694
  414ae0:	4618      	mov	r0, r3

00414ae2 <.LVL998>:
  414ae2:	f00a fa2d 	bl	41ef40 <.LFE79>

00414ae6 <.LVL999>:
  414ae6:	4604      	mov	r4, r0

00414ae8 <.LVL1000>:
                   if (mp_iszero(s) == MP_NO)
  414ae8:	f8dd 0d5c 	ldr.w	r0, [sp, #3420]	; 0xd5c

00414aec <.LVL1001>:
  414aec:	f00a f9c0 	bl	41ee70 <.LFE93>

00414af0 <.LVL1002>:
  414af0:	2800      	cmp	r0, #0
  414af2:	d1a6      	bne.n	414a42 <.LVL983>
  414af4:	e001      	b.n	414afa <.LVL1003>
                    err = RNG_FAILURE_E;
  414af6:	f06f 04c6 	mvn.w	r4, #198	; 0xc6

00414afa <.LVL1003>:
           wc_ecc_free(&pubkey);
  414afa:	a801      	add	r0, sp, #4
  414afc:	f009 fb8a 	bl	41e214 <.LFE27>

00414b00 <.LVL1004>:
  414b00:	e75b      	b.n	4149ba <.LVL964>

00414b02 <.LBE64>:
       return ECC_BAD_ARG_E;
  414b02:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
  414b06:	e74b      	b.n	4149a0 <.LVL960>
  414b08:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
  414b0c:	e748      	b.n	4149a0 <.LVL960>
      return ECC_BAD_ARG_E;
  414b0e:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
  414b12:	e745      	b.n	4149a0 <.LVL960>
      return ECC_BAD_ARG_E;
  414b14:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
  414b18:	e742      	b.n	4149a0 <.LVL960>

00414b1a <.LBB65>:
       err = mp_read_unsigned_bin(&e, (byte*)in, inlen);
  414b1a:	4604      	mov	r4, r0
  414b1c:	e74d      	b.n	4149ba <.LVL964>

00414b1e <.LVL1007>:
  414b1e:	4652      	mov	r2, sl
  414b20:	4639      	mov	r1, r7
  414b22:	f50d 6031 	add.w	r0, sp, #2832	; 0xb10

00414b26 <.LVL1008>:
  414b26:	f00a f98f 	bl	41ee48 <.LFE72>

00414b2a <.LVL1009>:
       if (err == MP_OKAY && (WOLFSSL_BIT_SIZE * inlen) > orderBits)
  414b2a:	2800      	cmp	r0, #0
  414b2c:	f43f af70 	beq.w	414a10 <.LBB64>
       err = mp_read_unsigned_bin(&e, (byte*)in, inlen);
  414b30:	4604      	mov	r4, r0
  414b32:	e742      	b.n	4149ba <.LVL964>

Disassembly of section .rodata._dist_code%105:

00414b34 <_dist_code>:
  414b34:	0100 0302 0404 0505 0606 0606 0707 0707     ................
  414b44:	0808 0808 0808 0808 0909 0909 0909 0909     ................
  414b54:	0a0a 0a0a 0a0a 0a0a 0a0a 0a0a 0a0a 0a0a     ................
  414b64:	0b0b 0b0b 0b0b 0b0b 0b0b 0b0b 0b0b 0b0b     ................
  414b74:	0c0c 0c0c 0c0c 0c0c 0c0c 0c0c 0c0c 0c0c     ................
  414b84:	0c0c 0c0c 0c0c 0c0c 0c0c 0c0c 0c0c 0c0c     ................
  414b94:	0d0d 0d0d 0d0d 0d0d 0d0d 0d0d 0d0d 0d0d     ................
  414ba4:	0d0d 0d0d 0d0d 0d0d 0d0d 0d0d 0d0d 0d0d     ................
  414bb4:	0e0e 0e0e 0e0e 0e0e 0e0e 0e0e 0e0e 0e0e     ................
  414bc4:	0e0e 0e0e 0e0e 0e0e 0e0e 0e0e 0e0e 0e0e     ................
  414bd4:	0e0e 0e0e 0e0e 0e0e 0e0e 0e0e 0e0e 0e0e     ................
  414be4:	0e0e 0e0e 0e0e 0e0e 0e0e 0e0e 0e0e 0e0e     ................
  414bf4:	0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f     ................
  414c04:	0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f     ................
  414c14:	0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f     ................
  414c24:	0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f     ................
  414c34:	0000 1110 1212 1313 1414 1414 1515 1515     ................
  414c44:	1616 1616 1616 1616 1717 1717 1717 1717     ................
  414c54:	1818 1818 1818 1818 1818 1818 1818 1818     ................
  414c64:	1919 1919 1919 1919 1919 1919 1919 1919     ................
  414c74:	1a1a 1a1a 1a1a 1a1a 1a1a 1a1a 1a1a 1a1a     ................
  414c84:	1a1a 1a1a 1a1a 1a1a 1a1a 1a1a 1a1a 1a1a     ................
  414c94:	1b1b 1b1b 1b1b 1b1b 1b1b 1b1b 1b1b 1b1b     ................
  414ca4:	1b1b 1b1b 1b1b 1b1b 1b1b 1b1b 1b1b 1b1b     ................
  414cb4:	1c1c 1c1c 1c1c 1c1c 1c1c 1c1c 1c1c 1c1c     ................
  414cc4:	1c1c 1c1c 1c1c 1c1c 1c1c 1c1c 1c1c 1c1c     ................
  414cd4:	1c1c 1c1c 1c1c 1c1c 1c1c 1c1c 1c1c 1c1c     ................
  414ce4:	1c1c 1c1c 1c1c 1c1c 1c1c 1c1c 1c1c 1c1c     ................
  414cf4:	1d1d 1d1d 1d1d 1d1d 1d1d 1d1d 1d1d 1d1d     ................
  414d04:	1d1d 1d1d 1d1d 1d1d 1d1d 1d1d 1d1d 1d1d     ................
  414d14:	1d1d 1d1d 1d1d 1d1d 1d1d 1d1d 1d1d 1d1d     ................
  414d24:	1d1d 1d1d 1d1d 1d1d 1d1d 1d1d 1d1d 1d1d     ................

Disassembly of section .text.fill_window%106:

00414d34 <fill_window>:
{
  414d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

00414d38 <.LCFI5>:
  414d38:	4604      	mov	r4, r0
    uInt wsize = s->w_size;
  414d3a:	6ac6      	ldr	r6, [r0, #44]	; 0x2c

00414d3c <.LVL61>:
            p = &s->prev[n];
  414d3c:	0077      	lsls	r7, r6, #1
        if (s->lookahead + s->insert >= MIN_MATCH) {
  414d3e:	f241 65b4 	movw	r5, #5812	; 0x16b4
  414d42:	4405      	add	r5, r0
  414d44:	e067      	b.n	414e16 <.LVL84>

00414d46 <.LVL62>:
            zmemcpy(s->window, s->window+wsize, (unsigned)wsize);
  414d46:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  414d48:	4632      	mov	r2, r6
  414d4a:	1981      	adds	r1, r0, r6
  414d4c:	f001 fd9c 	bl	416888 <memcpy>

00414d50 <.LVL63>:
            s->match_start -= wsize;
  414d50:	6f23      	ldr	r3, [r4, #112]	; 0x70
  414d52:	1b9b      	subs	r3, r3, r6
  414d54:	6723      	str	r3, [r4, #112]	; 0x70
            s->strstart    -= wsize; /* we now have strstart >= MAX_DIST */
  414d56:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  414d58:	1b9b      	subs	r3, r3, r6
  414d5a:	66e3      	str	r3, [r4, #108]	; 0x6c
            s->block_start -= (long) wsize;
  414d5c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  414d5e:	1b9b      	subs	r3, r3, r6
  414d60:	65e3      	str	r3, [r4, #92]	; 0x5c
            n = s->hash_size;
  414d62:	6ce2      	ldr	r2, [r4, #76]	; 0x4c

00414d64 <.LVL64>:
            p = &s->head[n];
  414d64:	6c61      	ldr	r1, [r4, #68]	; 0x44
  414d66:	eb01 0142 	add.w	r1, r1, r2, lsl #1

00414d6a <.LVL65>:
  414d6a:	2000      	movs	r0, #0

00414d6c <.LVL66>:
                m = *--p;
  414d6c:	f831 3c02 	ldrh.w	r3, [r1, #-2]

00414d70 <.LVL67>:
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
  414d70:	429e      	cmp	r6, r3
  414d72:	bf94      	ite	ls
  414d74:	1b9b      	subls	r3, r3, r6

00414d76 <.LVL68>:
  414d76:	4603      	movhi	r3, r0
  414d78:	f821 3d02 	strh.w	r3, [r1, #-2]!

00414d7c <.LVL69>:
            } while (--n);
  414d7c:	3a01      	subs	r2, #1

00414d7e <.LVL70>:
  414d7e:	d1f5      	bne.n	414d6c <.LVL66>

00414d80 <.LVL71>:
            p = &s->prev[n];
  414d80:	6c21      	ldr	r1, [r4, #64]	; 0x40
  414d82:	4439      	add	r1, r7

00414d84 <.LVL72>:
            n = wsize;
  414d84:	4630      	mov	r0, r6

00414d86 <.LVL73>:
                m = *--p;
  414d86:	f831 3c02 	ldrh.w	r3, [r1, #-2]

00414d8a <.LVL74>:
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
  414d8a:	429e      	cmp	r6, r3
  414d8c:	bf94      	ite	ls
  414d8e:	1b9b      	subls	r3, r3, r6

00414d90 <.LVL75>:
  414d90:	4613      	movhi	r3, r2
  414d92:	f821 3d02 	strh.w	r3, [r1, #-2]!

00414d96 <.LVL76>:
            } while (--n);
  414d96:	3801      	subs	r0, #1

00414d98 <.LVL77>:
  414d98:	d1f5      	bne.n	414d86 <.LVL73>
            more += wsize;
  414d9a:	44b0      	add	r8, r6
  414d9c:	e047      	b.n	414e2e <.LVL85+0xc>

00414d9e <.LVL79>:
        n = read_buf(s->strm, s->window + s->strstart + s->lookahead, more);
  414d9e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  414da0:	6f61      	ldr	r1, [r4, #116]	; 0x74
  414da2:	440a      	add	r2, r1
  414da4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  414da6:	eb01 0a02 	add.w	sl, r1, r2

00414daa <.LBB6>:
    strm->avail_in  -= len;
  414daa:	eba3 0308 	sub.w	r3, r3, r8
  414dae:	f8c9 3004 	str.w	r3, [r9, #4]
    zmemcpy(buf, strm->next_in, len);
  414db2:	4642      	mov	r2, r8
  414db4:	f8d9 1000 	ldr.w	r1, [r9]
  414db8:	4650      	mov	r0, sl
  414dba:	f001 fd65 	bl	416888 <memcpy>

00414dbe <.LVL80>:
    if (strm->state->wrap == 1) {
  414dbe:	f8d9 301c 	ldr.w	r3, [r9, #28]
  414dc2:	699b      	ldr	r3, [r3, #24]
  414dc4:	2b01      	cmp	r3, #1
  414dc6:	d00c      	beq.n	414de2 <.LVL80+0x24>
    else if (strm->state->wrap == 2) {
  414dc8:	2b02      	cmp	r3, #2
  414dca:	d013      	beq.n	414df4 <.LVL81+0x6>
    strm->next_in  += len;
  414dcc:	f8d9 3000 	ldr.w	r3, [r9]
  414dd0:	4443      	add	r3, r8
  414dd2:	f8c9 3000 	str.w	r3, [r9]
    strm->total_in += len;
  414dd6:	f8d9 3008 	ldr.w	r3, [r9, #8]
  414dda:	4443      	add	r3, r8
  414ddc:	f8c9 3008 	str.w	r3, [r9, #8]
  414de0:	e033      	b.n	414e4a <.LBE9>
        strm->adler = adler32(strm->adler, buf, len);
  414de2:	4642      	mov	r2, r8
  414de4:	4651      	mov	r1, sl
  414de6:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
  414dea:	f7fe f8e5 	bl	412fb8 <.LBE46>

00414dee <.LVL81>:
  414dee:	f8c9 0030 	str.w	r0, [r9, #48]	; 0x30
  414df2:	e7eb      	b.n	414dcc <.LVL80+0xe>
        strm->adler = crc32(strm->adler, buf, len);
  414df4:	4642      	mov	r2, r8
  414df6:	4651      	mov	r1, sl
  414df8:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
  414dfc:	f7fe fd1a 	bl	413834 <.LFE21>

00414e00 <.LVL82>:
  414e00:	f8c9 0030 	str.w	r0, [r9, #48]	; 0x30
  414e04:	e7e2      	b.n	414dcc <.LVL80+0xe>

00414e06 <.LBE6>:
    } while (s->lookahead < MIN_LOOKAHEAD && s->strm->avail_in != 0);
  414e06:	6f63      	ldr	r3, [r4, #116]	; 0x74
  414e08:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
  414e0c:	d253      	bcs.n	414eb6 <.LBE10>
  414e0e:	6823      	ldr	r3, [r4, #0]
  414e10:	685b      	ldr	r3, [r3, #4]
  414e12:	2b00      	cmp	r3, #0
  414e14:	d04f      	beq.n	414eb6 <.LBE10>

00414e16 <.LVL84>:
        more = (unsigned)(s->window_size -(ulg)s->lookahead -(ulg)s->strstart);
  414e16:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  414e18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  414e1a:	6f61      	ldr	r1, [r4, #116]	; 0x74
  414e1c:	1a5b      	subs	r3, r3, r1
  414e1e:	eba3 0802 	sub.w	r8, r3, r2

00414e22 <.LVL85>:
        if (s->strstart >= wsize+MAX_DIST(s)) {
  414e22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  414e24:	4433      	add	r3, r6
  414e26:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
  414e2a:	429a      	cmp	r2, r3
  414e2c:	d28b      	bcs.n	414d46 <.LVL62>
        if (s->strm->avail_in == 0) break;
  414e2e:	f8d4 9000 	ldr.w	r9, [r4]
  414e32:	f8d9 3004 	ldr.w	r3, [r9, #4]
  414e36:	2b00      	cmp	r3, #0
  414e38:	d03d      	beq.n	414eb6 <.LBE10>

00414e3a <.LVL86>:
  414e3a:	4598      	cmp	r8, r3
  414e3c:	bf28      	it	cs
  414e3e:	4698      	movcs	r8, r3

00414e40 <.LBB9>:
    if (len == 0) return 0;
  414e40:	f1b8 0f00 	cmp.w	r8, #0
  414e44:	d1ab      	bne.n	414d9e <.LVL79>
  414e46:	f04f 0800 	mov.w	r8, #0

00414e4a <.LBE9>:
        s->lookahead += n;
  414e4a:	6f63      	ldr	r3, [r4, #116]	; 0x74
  414e4c:	4443      	add	r3, r8
  414e4e:	6763      	str	r3, [r4, #116]	; 0x74
        if (s->lookahead + s->insert >= MIN_MATCH) {
  414e50:	682a      	ldr	r2, [r5, #0]
  414e52:	4413      	add	r3, r2
  414e54:	2b02      	cmp	r3, #2
  414e56:	d9d6      	bls.n	414e06 <.LBE6>

00414e58 <.LBB10>:
            uInt str = s->strstart - s->insert;
  414e58:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  414e5a:	1a9a      	subs	r2, r3, r2

00414e5c <.LVL89>:
            s->ins_h = s->window[str];
  414e5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  414e5e:	5c99      	ldrb	r1, [r3, r2]
  414e60:	64a1      	str	r1, [r4, #72]	; 0x48
            UPDATE_HASH(s, s->ins_h, s->window[str + 1]);
  414e62:	4413      	add	r3, r2
  414e64:	785b      	ldrb	r3, [r3, #1]
  414e66:	6da0      	ldr	r0, [r4, #88]	; 0x58
  414e68:	4081      	lsls	r1, r0
  414e6a:	404b      	eors	r3, r1
  414e6c:	6d61      	ldr	r1, [r4, #84]	; 0x54
  414e6e:	400b      	ands	r3, r1
  414e70:	64a3      	str	r3, [r4, #72]	; 0x48
            while (s->insert) {
  414e72:	682b      	ldr	r3, [r5, #0]
  414e74:	2b00      	cmp	r3, #0
  414e76:	d0c6      	beq.n	414e06 <.LBE6>
                UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);
  414e78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  414e7a:	4413      	add	r3, r2
  414e7c:	789b      	ldrb	r3, [r3, #2]
  414e7e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  414e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
  414e82:	4081      	lsls	r1, r0
  414e84:	404b      	eors	r3, r1
  414e86:	6d61      	ldr	r1, [r4, #84]	; 0x54
  414e88:	400b      	ands	r3, r1
  414e8a:	64a3      	str	r3, [r4, #72]	; 0x48
                s->prev[str & s->w_mask] = s->head[s->ins_h];
  414e8c:	6c61      	ldr	r1, [r4, #68]	; 0x44
  414e8e:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
  414e92:	6b63      	ldr	r3, [r4, #52]	; 0x34
  414e94:	4013      	ands	r3, r2
  414e96:	6c21      	ldr	r1, [r4, #64]	; 0x40
  414e98:	f821 0013 	strh.w	r0, [r1, r3, lsl #1]
                s->head[s->ins_h] = (Pos)str;
  414e9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  414e9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  414ea0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
                str++;
  414ea4:	3201      	adds	r2, #1
                s->insert--;
  414ea6:	682b      	ldr	r3, [r5, #0]
  414ea8:	3b01      	subs	r3, #1
  414eaa:	602b      	str	r3, [r5, #0]
                if (s->lookahead + s->insert < MIN_MATCH)
  414eac:	6f61      	ldr	r1, [r4, #116]	; 0x74
  414eae:	440b      	add	r3, r1
  414eb0:	2b02      	cmp	r3, #2
  414eb2:	d8de      	bhi.n	414e72 <.LVL89+0x16>
  414eb4:	e7a7      	b.n	414e06 <.LBE6>

00414eb6 <.LBE10>:
    if (s->high_water < s->window_size) {
  414eb6:	f504 53b6 	add.w	r3, r4, #5824	; 0x16c0
  414eba:	6818      	ldr	r0, [r3, #0]
  414ebc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  414ebe:	4298      	cmp	r0, r3
  414ec0:	d22c      	bcs.n	414f1c <.LVL103>

00414ec2 <.LBB11>:
        ulg curr = s->strstart + (ulg)(s->lookahead);
  414ec2:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  414ec4:	6f62      	ldr	r2, [r4, #116]	; 0x74
  414ec6:	18ae      	adds	r6, r5, r2

00414ec8 <.LVL92>:
        if (s->high_water < curr) {
  414ec8:	42b0      	cmp	r0, r6
  414eca:	d211      	bcs.n	414ef0 <.LVL98>
            init = s->window_size - curr;
  414ecc:	1b9d      	subs	r5, r3, r6

00414ece <.LVL93>:
  414ece:	f5b5 7f81 	cmp.w	r5, #258	; 0x102
  414ed2:	bf28      	it	cs
  414ed4:	f44f 7581 	movcs.w	r5, #258	; 0x102
            zmemzero(s->window + curr, (unsigned)init);
  414ed8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  414eda:	462a      	mov	r2, r5
  414edc:	2100      	movs	r1, #0
  414ede:	4430      	add	r0, r6
  414ee0:	f005 fb86 	bl	41a5f0 <.LFE157>

00414ee4 <.LVL95>:
            s->high_water = curr + init;
  414ee4:	f504 54b6 	add.w	r4, r4, #5824	; 0x16c0

00414ee8 <.LVL96>:
  414ee8:	4435      	add	r5, r6

00414eea <.LVL97>:
  414eea:	6025      	str	r5, [r4, #0]
  414eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00414ef0 <.LVL98>:
        else if (s->high_water < (ulg)curr + WIN_INIT) {
  414ef0:	f506 7281 	add.w	r2, r6, #258	; 0x102
  414ef4:	4290      	cmp	r0, r2
  414ef6:	d211      	bcs.n	414f1c <.LVL103>
            init = (ulg)curr + WIN_INIT - s->high_water;
  414ef8:	1a35      	subs	r5, r6, r0
  414efa:	f505 7581 	add.w	r5, r5, #258	; 0x102

00414efe <.LVL99>:
            if (init > s->window_size - s->high_water)
  414efe:	1a1b      	subs	r3, r3, r0
  414f00:	429d      	cmp	r5, r3
  414f02:	bf28      	it	cs
  414f04:	461d      	movcs	r5, r3
            zmemzero(s->window + s->high_water, (unsigned)init);
  414f06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  414f08:	462a      	mov	r2, r5
  414f0a:	2100      	movs	r1, #0
  414f0c:	4418      	add	r0, r3
  414f0e:	f005 fb6f 	bl	41a5f0 <.LFE157>

00414f12 <.LVL101>:
            s->high_water += init;
  414f12:	f504 54b6 	add.w	r4, r4, #5824	; 0x16c0

00414f16 <.LVL102>:
  414f16:	6823      	ldr	r3, [r4, #0]
  414f18:	442b      	add	r3, r5
  414f1a:	6023      	str	r3, [r4, #0]

00414f1c <.LVL103>:
  414f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

Disassembly of section .rodata%107:

00414f20 <.rodata%107>:
  414f20:	6f636e69 	.word	0x6f636e69
  414f24:	63657272 	.word	0x63657272
  414f28:	65682074 	.word	0x65682074
  414f2c:	72656461 	.word	0x72656461
  414f30:	65686320 	.word	0x65686320
  414f34:	00006b63 	.word	0x00006b63
  414f38:	6e6b6e75 	.word	0x6e6b6e75
  414f3c:	206e776f 	.word	0x206e776f
  414f40:	706d6f63 	.word	0x706d6f63
  414f44:	73736572 	.word	0x73736572
  414f48:	206e6f69 	.word	0x206e6f69
  414f4c:	6874656d 	.word	0x6874656d
  414f50:	0000646f 	.word	0x0000646f
  414f54:	61766e69 	.word	0x61766e69
  414f58:	2064696c 	.word	0x2064696c
  414f5c:	646e6977 	.word	0x646e6977
  414f60:	7320776f 	.word	0x7320776f
  414f64:	00657a69 	.word	0x00657a69
  414f68:	6e6b6e75 	.word	0x6e6b6e75
  414f6c:	206e776f 	.word	0x206e776f
  414f70:	64616568 	.word	0x64616568
  414f74:	66207265 	.word	0x66207265
  414f78:	7367616c 	.word	0x7367616c
  414f7c:	74657320 	.word	0x74657320
  414f80:	00000000 	.word	0x00000000
  414f84:	64616568 	.word	0x64616568
  414f88:	63207265 	.word	0x63207265
  414f8c:	6d206372 	.word	0x6d206372
  414f90:	616d7369 	.word	0x616d7369
  414f94:	00686374 	.word	0x00686374
  414f98:	61766e69 	.word	0x61766e69
  414f9c:	2064696c 	.word	0x2064696c
  414fa0:	636f6c62 	.word	0x636f6c62
  414fa4:	7974206b 	.word	0x7974206b
  414fa8:	00006570 	.word	0x00006570
  414fac:	61766e69 	.word	0x61766e69
  414fb0:	2064696c 	.word	0x2064696c
  414fb4:	726f7473 	.word	0x726f7473
  414fb8:	62206465 	.word	0x62206465
  414fbc:	6b636f6c 	.word	0x6b636f6c
  414fc0:	6e656c20 	.word	0x6e656c20
  414fc4:	73687467 	.word	0x73687467
  414fc8:	00000000 	.word	0x00000000
  414fcc:	206f6f74 	.word	0x206f6f74
  414fd0:	796e616d 	.word	0x796e616d
  414fd4:	6e656c20 	.word	0x6e656c20
  414fd8:	20687467 	.word	0x20687467
  414fdc:	6420726f 	.word	0x6420726f
  414fe0:	61747369 	.word	0x61747369
  414fe4:	2065636e 	.word	0x2065636e
  414fe8:	626d7973 	.word	0x626d7973
  414fec:	00736c6f 	.word	0x00736c6f
  414ff0:	61766e69 	.word	0x61766e69
  414ff4:	2064696c 	.word	0x2064696c
  414ff8:	65646f63 	.word	0x65646f63
  414ffc:	6e656c20 	.word	0x6e656c20
  415000:	73687467 	.word	0x73687467
  415004:	74657320 	.word	0x74657320
  415008:	00000000 	.word	0x00000000
  41500c:	61766e69 	.word	0x61766e69
  415010:	2064696c 	.word	0x2064696c
  415014:	20746962 	.word	0x20746962
  415018:	676e656c 	.word	0x676e656c
  41501c:	72206874 	.word	0x72206874
  415020:	61657065 	.word	0x61657065
  415024:	00000074 	.word	0x00000074
  415028:	61766e69 	.word	0x61766e69
  41502c:	2064696c 	.word	0x2064696c
  415030:	65646f63 	.word	0x65646f63
  415034:	202d2d20 	.word	0x202d2d20
  415038:	7373696d 	.word	0x7373696d
  41503c:	20676e69 	.word	0x20676e69
  415040:	2d646e65 	.word	0x2d646e65
  415044:	622d666f 	.word	0x622d666f
  415048:	6b636f6c 	.word	0x6b636f6c
  41504c:	00000000 	.word	0x00000000
  415050:	61766e69 	.word	0x61766e69
  415054:	2064696c 	.word	0x2064696c
  415058:	6574696c 	.word	0x6574696c
  41505c:	2f6c6172 	.word	0x2f6c6172
  415060:	676e656c 	.word	0x676e656c
  415064:	20736874 	.word	0x20736874
  415068:	00746573 	.word	0x00746573
  41506c:	61766e69 	.word	0x61766e69
  415070:	2064696c 	.word	0x2064696c
  415074:	74736964 	.word	0x74736964
  415078:	65636e61 	.word	0x65636e61
  41507c:	65732073 	.word	0x65732073
  415080:	00000074 	.word	0x00000074
  415084:	61766e69 	.word	0x61766e69
  415088:	2064696c 	.word	0x2064696c
  41508c:	6574696c 	.word	0x6574696c
  415090:	2f6c6172 	.word	0x2f6c6172
  415094:	676e656c 	.word	0x676e656c
  415098:	63206874 	.word	0x63206874
  41509c:	0065646f 	.word	0x0065646f
  4150a0:	61766e69 	.word	0x61766e69
  4150a4:	2064696c 	.word	0x2064696c
  4150a8:	74736964 	.word	0x74736964
  4150ac:	65636e61 	.word	0x65636e61
  4150b0:	646f6320 	.word	0x646f6320
  4150b4:	00000065 	.word	0x00000065
  4150b8:	61766e69 	.word	0x61766e69
  4150bc:	2064696c 	.word	0x2064696c
  4150c0:	74736964 	.word	0x74736964
  4150c4:	65636e61 	.word	0x65636e61
  4150c8:	6f6f7420 	.word	0x6f6f7420
  4150cc:	72616620 	.word	0x72616620
  4150d0:	63616220 	.word	0x63616220
  4150d4:	0000006b 	.word	0x0000006b
  4150d8:	6f636e69 	.word	0x6f636e69
  4150dc:	63657272 	.word	0x63657272
  4150e0:	61642074 	.word	0x61642074
  4150e4:	63206174 	.word	0x63206174
  4150e8:	6b636568 	.word	0x6b636568
  4150ec:	00000000 	.word	0x00000000
  4150f0:	6f636e69 	.word	0x6f636e69
  4150f4:	63657272 	.word	0x63657272
  4150f8:	656c2074 	.word	0x656c2074
  4150fc:	6874676e 	.word	0x6874676e
  415100:	65686320 	.word	0x65686320
  415104:	6b63      	.short	0x6b63
	...

Disassembly of section .text.deflateInit2_%108:

00415108 <deflateInit2_>:
{
  415108:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

0041510c <.LCFI33>:
  41510c:	461e      	mov	r6, r3
  41510e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  415110:	9b0c      	ldr	r3, [sp, #48]	; 0x30

00415112 <.LVL569>:
    if (version == Z_NULL || version[0] != my_version[0] ||
  415112:	2b00      	cmp	r3, #0
  415114:	f000 80c5 	beq.w	4152a2 <.LVL594>
  415118:	4605      	mov	r5, r0
  41511a:	4688      	mov	r8, r1
  41511c:	4692      	mov	sl, r2
  41511e:	781b      	ldrb	r3, [r3, #0]
  415120:	2b31      	cmp	r3, #49	; 0x31
  415122:	f040 80c2 	bne.w	4152aa <.LVL596>
  415126:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  415128:	2b38      	cmp	r3, #56	; 0x38
  41512a:	f040 80be 	bne.w	4152aa <.LVL596>
    if (strm == Z_NULL) return Z_STREAM_ERROR;
  41512e:	2800      	cmp	r0, #0
  415130:	f000 80bf 	beq.w	4152b2 <.LVL598>
    strm->msg = Z_NULL;
  415134:	2300      	movs	r3, #0
  415136:	6183      	str	r3, [r0, #24]
    if (strm->zalloc == (alloc_func)0) {
  415138:	6a03      	ldr	r3, [r0, #32]
  41513a:	2b00      	cmp	r3, #0
  41513c:	f000 8095 	beq.w	41526a <.LVL587>
    if (strm->zfree == (free_func)0)
  415140:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  415142:	2b00      	cmp	r3, #0
  415144:	f000 8096 	beq.w	415274 <.LVL587+0xa>
    if (level == Z_DEFAULT_COMPRESSION) level = 6;
  415148:	f1b8 3fff 	cmp.w	r8, #4294967295
  41514c:	bf08      	it	eq
  41514e:	f04f 0806 	moveq.w	r8, #6

00415152 <.LVL570>:
    if (windowBits < 0) { /* suppress zlib wrapper */
  415152:	2e00      	cmp	r6, #0
  415154:	f2c0 8091 	blt.w	41527a <.LVL588>
    else if (windowBits > 15) {
  415158:	2e0f      	cmp	r6, #15
  41515a:	f340 8092 	ble.w	415282 <.LVL590>

0041515e <.LVL571>:
        windowBits -= 16;
  41515e:	3e10      	subs	r6, #16
        wrap = 2;       /* write gzip wrapper instead */
  415160:	f04f 0902 	mov.w	r9, #2

00415164 <.LVL573>:
    if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method != Z_DEFLATED ||
  415164:	1e7b      	subs	r3, r7, #1
  415166:	2b08      	cmp	r3, #8
  415168:	f200 80a7 	bhi.w	4152ba <.LVL600>
        windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
  41516c:	f1a6 0308 	sub.w	r3, r6, #8
    if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method != Z_DEFLATED ||
  415170:	2b07      	cmp	r3, #7
  415172:	f200 80a6 	bhi.w	4152c2 <.LVL602>
  415176:	f1ba 0f08 	cmp.w	sl, #8
  41517a:	f040 80a2 	bne.w	4152c2 <.LVL602>
        strategy < 0 || strategy > Z_FIXED) {
  41517e:	f1b8 0f09 	cmp.w	r8, #9
  415182:	f200 80a2 	bhi.w	4152ca <.LVL604>
  415186:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  415188:	2b04      	cmp	r3, #4
  41518a:	f200 809e 	bhi.w	4152ca <.LVL604>
    if (windowBits == 8) windowBits = 9;  /* until 256-byte window bug fixed */
  41518e:	2e08      	cmp	r6, #8
  415190:	bf08      	it	eq
  415192:	2609      	moveq	r6, #9
    s = (deflate_state *) ZALLOC(strm, 1, sizeof(deflate_state));
  415194:	6a2b      	ldr	r3, [r5, #32]
  415196:	f241 62c4 	movw	r2, #5828	; 0x16c4

0041519a <.LVL575>:
  41519a:	2101      	movs	r1, #1
  41519c:	6aa8      	ldr	r0, [r5, #40]	; 0x28

0041519e <.LVL576>:
  41519e:	4798      	blx	r3

004151a0 <.LVL577>:
    if (s == Z_NULL) return Z_MEM_ERROR;
  4151a0:	4604      	mov	r4, r0
  4151a2:	2800      	cmp	r0, #0
  4151a4:	f000 8095 	beq.w	4152d2 <.LVL606>
    strm->state = (struct internal_state FAR *)s;
  4151a8:	61e8      	str	r0, [r5, #28]
    s->strm = strm;
  4151aa:	6005      	str	r5, [r0, #0]
    s->wrap = wrap;
  4151ac:	f8c0 9018 	str.w	r9, [r0, #24]
    s->gzhead = Z_NULL;
  4151b0:	f04f 0b00 	mov.w	fp, #0
  4151b4:	f8c0 b01c 	str.w	fp, [r0, #28]
    s->w_bits = windowBits;
  4151b8:	6306      	str	r6, [r0, #48]	; 0x30
    s->w_size = 1 << s->w_bits;
  4151ba:	f04f 0901 	mov.w	r9, #1

004151be <.LVL578>:
  4151be:	fa09 f106 	lsl.w	r1, r9, r6
  4151c2:	62c1      	str	r1, [r0, #44]	; 0x2c
    s->w_mask = s->w_size - 1;
  4151c4:	1e4b      	subs	r3, r1, #1
  4151c6:	6343      	str	r3, [r0, #52]	; 0x34
    s->hash_bits = memLevel + 7;
  4151c8:	1dfb      	adds	r3, r7, #7
  4151ca:	6503      	str	r3, [r0, #80]	; 0x50
    s->hash_size = 1 << s->hash_bits;
  4151cc:	fa09 f303 	lsl.w	r3, r9, r3
  4151d0:	64c3      	str	r3, [r0, #76]	; 0x4c
    s->hash_mask = s->hash_size - 1;
  4151d2:	3b01      	subs	r3, #1
  4151d4:	6543      	str	r3, [r0, #84]	; 0x54
    s->hash_shift =  ((s->hash_bits+MIN_MATCH-1)/MIN_MATCH);
  4151d6:	f107 0309 	add.w	r3, r7, #9
  4151da:	4a40      	ldr	r2, [pc, #256]	; (4152dc <.LVL608+0x2>)
  4151dc:	fba2 2303 	umull	r2, r3, r2, r3
  4151e0:	fa23 f309 	lsr.w	r3, r3, r9
  4151e4:	6583      	str	r3, [r0, #88]	; 0x58
    s->window = (Bytef *) ZALLOC(strm, s->w_size, 2*sizeof(Byte));
  4151e6:	6a2b      	ldr	r3, [r5, #32]
  4151e8:	2202      	movs	r2, #2
  4151ea:	6aa8      	ldr	r0, [r5, #40]	; 0x28

004151ec <.LVL579>:
  4151ec:	4798      	blx	r3

004151ee <.LVL580>:
  4151ee:	63a0      	str	r0, [r4, #56]	; 0x38
    s->prev   = (Posf *)  ZALLOC(strm, s->w_size, sizeof(Pos));
  4151f0:	6a2b      	ldr	r3, [r5, #32]
  4151f2:	2202      	movs	r2, #2
  4151f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  4151f6:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  4151f8:	4798      	blx	r3

004151fa <.LVL581>:
  4151fa:	6420      	str	r0, [r4, #64]	; 0x40
    s->head   = (Posf *)  ZALLOC(strm, s->hash_size, sizeof(Pos));
  4151fc:	6a2b      	ldr	r3, [r5, #32]
  4151fe:	2202      	movs	r2, #2
  415200:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  415202:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  415204:	4798      	blx	r3

00415206 <.LVL582>:
  415206:	6460      	str	r0, [r4, #68]	; 0x44
    s->high_water = 0;      /* nothing written to s->window yet */
  415208:	f504 53b6 	add.w	r3, r4, #5824	; 0x16c0
  41520c:	f8c3 b000 	str.w	fp, [r3]
    s->lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */
  415210:	3706      	adds	r7, #6
  415212:	fa09 f107 	lsl.w	r1, r9, r7
  415216:	f241 669c 	movw	r6, #5788	; 0x169c

0041521a <.LVL583>:
  41521a:	51a1      	str	r1, [r4, r6]
    overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
  41521c:	6a2b      	ldr	r3, [r5, #32]
  41521e:	2204      	movs	r2, #4
  415220:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  415222:	4798      	blx	r3

00415224 <.LVL584>:
    s->pending_buf = (uchf *) overlay;
  415224:	60a0      	str	r0, [r4, #8]
    s->pending_buf_size = (ulg)s->lit_bufsize * (sizeof(ush)+2L);
  415226:	59a3      	ldr	r3, [r4, r6]
  415228:	009a      	lsls	r2, r3, #2
  41522a:	60e2      	str	r2, [r4, #12]
    if (s->window == Z_NULL || s->prev == Z_NULL || s->head == Z_NULL ||
  41522c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  41522e:	b35a      	cbz	r2, 415288 <.LVL591>
  415230:	6c22      	ldr	r2, [r4, #64]	; 0x40
  415232:	b34a      	cbz	r2, 415288 <.LVL591>
  415234:	6c62      	ldr	r2, [r4, #68]	; 0x44
  415236:	b33a      	cbz	r2, 415288 <.LVL591>
  415238:	b330      	cbz	r0, 415288 <.LVL591>
    s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  41523a:	f023 0201 	bic.w	r2, r3, #1
  41523e:	4402      	add	r2, r0
  415240:	f241 61a4 	movw	r1, #5796	; 0x16a4
  415244:	5062      	str	r2, [r4, r1]
    s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  415246:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  41524a:	4418      	add	r0, r3

0041524c <.LVL585>:
  41524c:	f241 6398 	movw	r3, #5784	; 0x1698
  415250:	50e0      	str	r0, [r4, r3]
    s->level = level;
  415252:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
    s->strategy = strategy;
  415256:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  415258:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    s->method = (Byte)method;
  41525c:	f884 a024 	strb.w	sl, [r4, #36]	; 0x24
    return deflateReset(strm);
  415260:	4628      	mov	r0, r5
  415262:	f006 fbbf 	bl	41b9e4 <.LFE29>

00415266 <.LVL586>:
  415266:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0041526a <.LVL587>:
        strm->zalloc = zcalloc;
  41526a:	4b1d      	ldr	r3, [pc, #116]	; (4152e0 <.LVL608+0x6>)
  41526c:	6203      	str	r3, [r0, #32]
        strm->opaque = (voidpf)0;
  41526e:	2300      	movs	r3, #0
  415270:	6283      	str	r3, [r0, #40]	; 0x28
  415272:	e765      	b.n	415140 <.LVL569+0x2e>
        strm->zfree = zcfree;
  415274:	4b1b      	ldr	r3, [pc, #108]	; (4152e4 <.LVL608+0xa>)
  415276:	626b      	str	r3, [r5, #36]	; 0x24
  415278:	e766      	b.n	415148 <.LVL569+0x36>

0041527a <.LVL588>:
        windowBits = -windowBits;
  41527a:	4276      	negs	r6, r6
        wrap = 0;
  41527c:	f04f 0900 	mov.w	r9, #0
  415280:	e770      	b.n	415164 <.LVL573>

00415282 <.LVL590>:
    int wrap = 1;
  415282:	f04f 0901 	mov.w	r9, #1
  415286:	e76d      	b.n	415164 <.LVL573>

00415288 <.LVL591>:
        s->status = FINISH_STATE;
  415288:	f240 239a 	movw	r3, #666	; 0x29a
  41528c:	6063      	str	r3, [r4, #4]
        strm->msg = (char*)ERR_MSG(Z_MEM_ERROR);
  41528e:	4b16      	ldr	r3, [pc, #88]	; (4152e8 <.LVL608+0xe>)
  415290:	699b      	ldr	r3, [r3, #24]
  415292:	61ab      	str	r3, [r5, #24]
        deflateEnd (strm);
  415294:	4628      	mov	r0, r5

00415296 <.LVL592>:
  415296:	f005 f8c1 	bl	41a41c <.LFE156>

0041529a <.LVL593>:
        return Z_MEM_ERROR;
  41529a:	f06f 0003 	mvn.w	r0, #3
  41529e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

004152a2 <.LVL594>:
        return Z_VERSION_ERROR;
  4152a2:	f06f 0005 	mvn.w	r0, #5

004152a6 <.LVL595>:
  4152a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

004152aa <.LVL596>:
  4152aa:	f06f 0005 	mvn.w	r0, #5

004152ae <.LVL597>:
  4152ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

004152b2 <.LVL598>:
    if (strm == Z_NULL) return Z_STREAM_ERROR;
  4152b2:	f06f 0001 	mvn.w	r0, #1

004152b6 <.LVL599>:
  4152b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

004152ba <.LVL600>:
        return Z_STREAM_ERROR;
  4152ba:	f06f 0001 	mvn.w	r0, #1

004152be <.LVL601>:
  4152be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

004152c2 <.LVL602>:
  4152c2:	f06f 0001 	mvn.w	r0, #1

004152c6 <.LVL603>:
  4152c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

004152ca <.LVL604>:
  4152ca:	f06f 0001 	mvn.w	r0, #1

004152ce <.LVL605>:
  4152ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

004152d2 <.LVL606>:
    if (s == Z_NULL) return Z_MEM_ERROR;
  4152d2:	f06f 0003 	mvn.w	r0, #3

004152d6 <.LVL607>:
}
  4152d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

004152da <.LVL608>:
  4152da:	bf00      	nop
  4152dc:	aaaaaaab 	.word	0xaaaaaaab
  4152e0:	0041eda9 	.word	0x0041eda9
  4152e4:	0041eeb7 	.word	0x0041eeb7
  4152e8:	0041e304 	.word	0x0041e304

Disassembly of section .text.xTaskCreate%109:

004152ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
  4152ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

004152f0 <.LCFI2>:
  4152f0:	4682      	mov	sl, r0
  4152f2:	4689      	mov	r9, r1
  4152f4:	4698      	mov	r8, r3
  4152f6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c

004152f8 <.LBB40>:
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4152f8:	0095      	lsls	r5, r2, #2
  4152fa:	4628      	mov	r0, r5

004152fc <.LVL29>:
  4152fc:	f007 f926 	bl	41c54c <.LFE42>

00415300 <.LVL30>:

			if( pxStack != NULL )
  415300:	2800      	cmp	r0, #0
  415302:	f000 808d 	beq.w	415420 <.LBE48>
  415306:	4607      	mov	r7, r0
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
  415308:	2054      	movs	r0, #84	; 0x54

0041530a <.LVL31>:
  41530a:	f007 f91f 	bl	41c54c <.LFE42>

0041530e <.LVL32>:

				if( pxNewTCB != NULL )
  41530e:	4604      	mov	r4, r0
  415310:	2800      	cmp	r0, #0
  415312:	f000 8082 	beq.w	41541a <.LBB48>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
  415316:	6307      	str	r7, [r0, #48]	; 0x30

00415318 <.LBB41>:

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
  415318:	462a      	mov	r2, r5
  41531a:	21a5      	movs	r1, #165	; 0xa5
  41531c:	4638      	mov	r0, r7

0041531e <.LVL34>:
  41531e:	f005 f967 	bl	41a5f0 <.LFE157>

00415322 <.LVL35>:
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
  415322:	3d04      	subs	r5, #4

00415324 <.LVL36>:
  415324:	6b23      	ldr	r3, [r4, #48]	; 0x30
  415326:	441d      	add	r5, r3

00415328 <.LVL37>:
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  415328:	f025 0507 	bic.w	r5, r5, #7

0041532c <.LVL38>:
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  41532c:	f899 3000 	ldrb.w	r3, [r9]
  415330:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  415334:	f899 3000 	ldrb.w	r3, [r9]
  415338:	b163      	cbz	r3, 415354 <.LVL42>
  41533a:	464b      	mov	r3, r9
  41533c:	f104 0234 	add.w	r2, r4, #52	; 0x34
  415340:	f109 010f 	add.w	r1, r9, #15

00415344 <.LVL39>:
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  415344:	7858      	ldrb	r0, [r3, #1]
  415346:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  41534a:	f813 0f01 	ldrb.w	r0, [r3, #1]!

0041534e <.LVL40>:
  41534e:	b108      	cbz	r0, 415354 <.LVL42>

00415350 <.LVL41>:
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  415350:	428b      	cmp	r3, r1
  415352:	d1f7      	bne.n	415344 <.LVL39>

00415354 <.LVL42>:
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  415354:	2700      	movs	r7, #0

00415356 <.LVL43>:
  415356:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
  41535a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41535c:	2b04      	cmp	r3, #4
  41535e:	bf28      	it	cs
  415360:	2304      	movcs	r3, #4
  415362:	4699      	mov	r9, r3

00415364 <.LVL44>:
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
  415364:	62e3      	str	r3, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
  415366:	6463      	str	r3, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
  415368:	64a7      	str	r7, [r4, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
  41536a:	f104 0b04 	add.w	fp, r4, #4
  41536e:	4658      	mov	r0, fp
  415370:	f009 fe0e 	bl	41ef90 <.LFE144>

00415374 <.LVL45>:
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
  415374:	f104 0018 	add.w	r0, r4, #24
  415378:	f009 fe0a 	bl	41ef90 <.LFE144>

0041537c <.LVL46>:

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
  41537c:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  41537e:	f1c9 0305 	rsb	r3, r9, #5
  415382:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
  415384:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
  415386:	64e7      	str	r7, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
  415388:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  41538c:	4642      	mov	r2, r8
  41538e:	4651      	mov	r1, sl
  415390:	4628      	mov	r0, r5
  415392:	f008 fe57 	bl	41e044 <.LFE39>

00415396 <.LVL47>:
  415396:	6020      	str	r0, [r4, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
  415398:	b106      	cbz	r6, 41539c <.LBB43>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  41539a:	6034      	str	r4, [r6, #0]

0041539c <.LBB43>:

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
  41539c:	f009 f83a 	bl	41e414 <.LFE6>

004153a0 <.LVL49>:
	{
		uxCurrentNumberOfTasks++;
  4153a0:	4a3c      	ldr	r2, [pc, #240]	; (415494 <.LVL71+0x2>)
  4153a2:	6813      	ldr	r3, [r2, #0]
  4153a4:	3301      	adds	r3, #1
  4153a6:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
  4153a8:	4b3b      	ldr	r3, [pc, #236]	; (415498 <.LVL71+0x6>)
  4153aa:	681b      	ldr	r3, [r3, #0]
  4153ac:	2b00      	cmp	r3, #0
  4153ae:	d03b      	beq.n	415428 <.LBB49>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
  4153b0:	4b3a      	ldr	r3, [pc, #232]	; (41549c <.LVL71+0xa>)
  4153b2:	681b      	ldr	r3, [r3, #0]
  4153b4:	b93b      	cbnz	r3, 4153c6 <.LVL49+0x26>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
  4153b6:	4b38      	ldr	r3, [pc, #224]	; (415498 <.LVL71+0x6>)
  4153b8:	681b      	ldr	r3, [r3, #0]
  4153ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4153bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4153be:	429a      	cmp	r2, r3
  4153c0:	d801      	bhi.n	4153c6 <.LVL49+0x26>
				{
					pxCurrentTCB = pxNewTCB;
  4153c2:	4b35      	ldr	r3, [pc, #212]	; (415498 <.LVL71+0x6>)
  4153c4:	601c      	str	r4, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
  4153c6:	4a36      	ldr	r2, [pc, #216]	; (4154a0 <.LVL71+0xe>)
  4153c8:	6813      	ldr	r3, [r2, #0]
  4153ca:	3301      	adds	r3, #1
  4153cc:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
  4153ce:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4153d0:	4b34      	ldr	r3, [pc, #208]	; (4154a4 <.LVL71+0x12>)
  4153d2:	681b      	ldr	r3, [r3, #0]
  4153d4:	4298      	cmp	r0, r3
  4153d6:	d901      	bls.n	4153dc <.LVL49+0x3c>
  4153d8:	4b32      	ldr	r3, [pc, #200]	; (4154a4 <.LVL71+0x12>)
  4153da:	6018      	str	r0, [r3, #0]
  4153dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4153e0:	4659      	mov	r1, fp
  4153e2:	4b31      	ldr	r3, [pc, #196]	; (4154a8 <.LVL71+0x16>)
  4153e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4153e8:	f009 fa38 	bl	41e85c <.LFE142>

004153ec <.LVL50>:

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
  4153ec:	f009 fb8a 	bl	41eb04 <vPortExitCritical>

004153f0 <.LVL51>:

	if( xSchedulerRunning != pdFALSE )
  4153f0:	4b2a      	ldr	r3, [pc, #168]	; (41549c <.LVL71+0xa>)
  4153f2:	681b      	ldr	r3, [r3, #0]
  4153f4:	2b00      	cmp	r3, #0
  4153f6:	d046      	beq.n	415486 <.LBE45>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
  4153f8:	4b27      	ldr	r3, [pc, #156]	; (415498 <.LVL71+0x6>)
  4153fa:	681b      	ldr	r3, [r3, #0]
  4153fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4153fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  415400:	429a      	cmp	r2, r3
  415402:	d243      	bcs.n	41548c <.LBE45+0x6>
		{
			taskYIELD_IF_USING_PREEMPTION();
  415404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  415408:	4b28      	ldr	r3, [pc, #160]	; (4154ac <.LVL71+0x1a>)
  41540a:	601a      	str	r2, [r3, #0]

0041540c <.LVL52>:
  41540c:	f3bf 8f4f 	dsb	sy
  415410:	f3bf 8f6f 	isb	sy

00415414 <.LBE43>:
			xReturn = pdPASS;
  415414:	2001      	movs	r0, #1
  415416:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0041541a <.LBB48>:
					vPortFree( pxStack );
  41541a:	4638      	mov	r0, r7

0041541c <.LVL54>:
  41541c:	f004 f951 	bl	4196c2 <.LBE72>

00415420 <.LBE48>:
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  415420:	f04f 30ff 	mov.w	r0, #4294967295
	}
  415424:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00415428 <.LBB49>:
			pxCurrentTCB = pxNewTCB;
  415428:	4b1b      	ldr	r3, [pc, #108]	; (415498 <.LVL71+0x6>)
  41542a:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  41542c:	6813      	ldr	r3, [r2, #0]
  41542e:	2b01      	cmp	r3, #1
  415430:	d1c9      	bne.n	4153c6 <.LVL49+0x26>

00415432 <.LBB45>:
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  415432:	4d1d      	ldr	r5, [pc, #116]	; (4154a8 <.LVL71+0x16>)
  415434:	4628      	mov	r0, r5
  415436:	f009 fb23 	bl	41ea80 <.LBE8>

0041543a <.LVL58>:
  41543a:	f105 0014 	add.w	r0, r5, #20
  41543e:	f009 fb1f 	bl	41ea80 <.LBE8>

00415442 <.LVL59>:
  415442:	f105 0028 	add.w	r0, r5, #40	; 0x28
  415446:	f009 fb1b 	bl	41ea80 <.LBE8>

0041544a <.LVL60>:
  41544a:	f105 003c 	add.w	r0, r5, #60	; 0x3c
  41544e:	f009 fb17 	bl	41ea80 <.LBE8>

00415452 <.LVL61>:
  415452:	f105 0050 	add.w	r0, r5, #80	; 0x50
  415456:	f009 fb13 	bl	41ea80 <.LBE8>

0041545a <.LVL62>:
	}

	vListInitialise( &xDelayedTaskList1 );
  41545a:	4e15      	ldr	r6, [pc, #84]	; (4154b0 <.LVL71+0x1e>)
  41545c:	4630      	mov	r0, r6
  41545e:	f009 fb0f 	bl	41ea80 <.LBE8>

00415462 <.LVL63>:
	vListInitialise( &xDelayedTaskList2 );
  415462:	4d14      	ldr	r5, [pc, #80]	; (4154b4 <.LVL71+0x22>)
  415464:	4628      	mov	r0, r5
  415466:	f009 fb0b 	bl	41ea80 <.LBE8>

0041546a <.LVL64>:
	vListInitialise( &xPendingReadyList );
  41546a:	4813      	ldr	r0, [pc, #76]	; (4154b8 <.LVL71+0x26>)
  41546c:	f009 fb08 	bl	41ea80 <.LBE8>

00415470 <.LVL65>:

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
  415470:	4812      	ldr	r0, [pc, #72]	; (4154bc <.LVL71+0x2a>)
  415472:	f009 fb05 	bl	41ea80 <.LBE8>

00415476 <.LVL66>:
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
  415476:	4812      	ldr	r0, [pc, #72]	; (4154c0 <.LVL71+0x2e>)
  415478:	f009 fb02 	bl	41ea80 <.LBE8>

0041547c <.LVL67>:
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  41547c:	4b11      	ldr	r3, [pc, #68]	; (4154c4 <.LVL71+0x32>)
  41547e:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  415480:	4b11      	ldr	r3, [pc, #68]	; (4154c8 <.LVL71+0x36>)
  415482:	601d      	str	r5, [r3, #0]
  415484:	e79f      	b.n	4153c6 <.LVL49+0x26>

00415486 <.LBE45>:
			xReturn = pdPASS;
  415486:	2001      	movs	r0, #1
  415488:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41548c:	2001      	movs	r0, #1
		return xReturn;
  41548e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00415492 <.LVL71>:
  415492:	bf00      	nop
  415494:	20417844 	.word	0x20417844
  415498:	20417838 	.word	0x20417838
  41549c:	20417868 	.word	0x20417868
  4154a0:	20417854 	.word	0x20417854
  4154a4:	20417858 	.word	0x20417858
  4154a8:	20417534 	.word	0x20417534
  4154ac:	e000ed04 	.word	0xe000ed04
  4154b0:	20417740 	.word	0x20417740
  4154b4:	20417754 	.word	0x20417754
  4154b8:	20417768 	.word	0x20417768
  4154bc:	20417790 	.word	0x20417790
  4154c0:	2041777c 	.word	0x2041777c
  4154c4:	2041783c 	.word	0x2041783c
  4154c8:	20417840 	.word	0x20417840

Disassembly of section .text.wc_RsaFunctionSync%110:

004154cc <wc_RsaFunctionSync>:
{
  4154cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

004154d0 <.LCFI19>:
  4154d0:	f2ad 6d7c 	subw	sp, sp, #1660	; 0x67c

004154d4 <.LCFI20>:
  4154d4:	4604      	mov	r4, r0
  4154d6:	460d      	mov	r5, r1
  4154d8:	4616      	mov	r6, r2
  4154da:	461f      	mov	r7, r3

004154dc <.LVL89>:
    if (mp_init(&tmp) != MP_OKAY)
  4154dc:	f50d 608a 	add.w	r0, sp, #1104	; 0x450

004154e0 <.LVL90>:
  4154e0:	f009 fbd8 	bl	41ec94 <.LFE193>

004154e4 <.LVL91>:
  4154e4:	2800      	cmp	r0, #0
  4154e6:	f040 80db 	bne.w	4156a0 <.LVL141>
    if (mp_read_unsigned_bin(&tmp, (byte*)in, inLen) != MP_OKAY)
  4154ea:	462a      	mov	r2, r5
  4154ec:	4621      	mov	r1, r4
  4154ee:	f50d 608a 	add.w	r0, sp, #1104	; 0x450
  4154f2:	f009 fca9 	bl	41ee48 <.LFE72>

004154f6 <.LVL92>:
  4154f6:	2800      	cmp	r0, #0
  4154f8:	f040 80c1 	bne.w	41567e <.LVL134>
    switch(type) {
  4154fc:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
  415500:	2b03      	cmp	r3, #3
  415502:	f200 80c7 	bhi.w	415694 <.LVL137>
  415506:	e8df f003 	tbb	[pc, r3]
  41550a:	8d8d      	.short	0x8d8d
  41550c:	0202      	.short	0x0202

0041550e <.LBB19>:
        if (mp_init(&tmpa) != MP_OKAY)
  41550e:	4668      	mov	r0, sp
  415510:	f009 fbc0 	bl	41ec94 <.LFE193>

00415514 <.LVL93>:
  415514:	b110      	cbz	r0, 41551c <.LVL95>
            ERROR_OUT(MP_INIT_E);
  415516:	f06f 046d 	mvn.w	r4, #109	; 0x6d

0041551a <.LVL94>:
  41551a:	e0b2      	b.n	415682 <.L68>

0041551c <.LVL95>:
        if (mp_init(&tmpb) != MP_OKAY) {
  41551c:	a88a      	add	r0, sp, #552	; 0x228
  41551e:	f009 fbb9 	bl	41ec94 <.LFE193>

00415522 <.LVL96>:
  415522:	b128      	cbz	r0, 415530 <.LVL99>
            mp_clear(&tmpa);
  415524:	4668      	mov	r0, sp
  415526:	f009 fc39 	bl	41ed9c <.LFE170>

0041552a <.LVL97>:
            ERROR_OUT(MP_INIT_E);
  41552a:	f06f 046d 	mvn.w	r4, #109	; 0x6d

0041552e <.LVL98>:
  41552e:	e0a8      	b.n	415682 <.L68>

00415530 <.LVL99>:
        r = mp_exptmod(&tmp, &key->dP, &key->p, &tmpa);
  415530:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
  415534:	f503 68cf 	add.w	r8, r3, #1656	; 0x678
  415538:	466b      	mov	r3, sp
  41553a:	4642      	mov	r2, r8
  41553c:	f8dd 169c 	ldr.w	r1, [sp, #1692]	; 0x69c
  415540:	f601 21c8 	addw	r1, r1, #2760	; 0xac8
  415544:	f50d 608a 	add.w	r0, sp, #1104	; 0x450
  415548:	f009 fd02 	bl	41ef50 <.LFE78>

0041554c <.LVL100>:
        ret = RET_ERR(ret, r, MP_EXPTMOD_E);
  41554c:	1c04      	adds	r4, r0, #0

0041554e <.LVL101>:
  41554e:	bf18      	it	ne
  415550:	2401      	movne	r4, #1
  415552:	4264      	negs	r4, r4
  415554:	f024 096f 	bic.w	r9, r4, #111	; 0x6f

00415558 <.LVL102>:
        r = mp_exptmod(&tmp, &key->dQ, &key->q, &tmpb);
  415558:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
  41555c:	f503 650a 	add.w	r5, r3, #2208	; 0x8a0

00415560 <.LVL103>:
  415560:	ab8a      	add	r3, sp, #552	; 0x228
  415562:	462a      	mov	r2, r5
  415564:	f8dd 169c 	ldr.w	r1, [sp, #1692]	; 0x69c
  415568:	f501 614f 	add.w	r1, r1, #3312	; 0xcf0
  41556c:	f50d 608a 	add.w	r0, sp, #1104	; 0x450

00415570 <.LVL104>:
  415570:	f009 fcee 	bl	41ef50 <.LFE78>

00415574 <.LVL105>:
        ret = RET_ERR(ret, r, MP_EXPTMOD_E);
  415574:	1c04      	adds	r4, r0, #0
  415576:	bf18      	it	ne
  415578:	2401      	movne	r4, #1
  41557a:	4264      	negs	r4, r4
  41557c:	f024 046f 	bic.w	r4, r4, #111	; 0x6f
  415580:	f1b9 0f00 	cmp.w	r9, #0
  415584:	bf18      	it	ne
  415586:	2400      	movne	r4, #0
  415588:	ea44 0409 	orr.w	r4, r4, r9

0041558c <.LVL106>:
        r = mp_sub(&tmpa, &tmpb, &tmp);
  41558c:	f50d 628a 	add.w	r2, sp, #1104	; 0x450
  415590:	a98a      	add	r1, sp, #552	; 0x228
  415592:	4668      	mov	r0, sp

00415594 <.LVL107>:
  415594:	f009 fc53 	bl	41ee3e <.LFE71>

00415598 <.LVL108>:
        ret = RET_ERR(ret, r, MP_SUB_E);
  415598:	1c03      	adds	r3, r0, #0
  41559a:	bf18      	it	ne
  41559c:	2301      	movne	r3, #1
  41559e:	425b      	negs	r3, r3
  4155a0:	f023 0371 	bic.w	r3, r3, #113	; 0x71
  4155a4:	2c00      	cmp	r4, #0
  4155a6:	bf18      	it	ne
  4155a8:	2300      	movne	r3, #0
  4155aa:	431c      	orrs	r4, r3
        r = mp_mulmod(&tmp, &key->u, &key->p, &tmp);
  4155ac:	f50d 638a 	add.w	r3, sp, #1104	; 0x450
  4155b0:	4642      	mov	r2, r8
  4155b2:	f8dd 169c 	ldr.w	r1, [sp, #1692]	; 0x69c
  4155b6:	f601 7118 	addw	r1, r1, #3864	; 0xf18
  4155ba:	4618      	mov	r0, r3

004155bc <.LVL110>:
  4155bc:	f009 fcc0 	bl	41ef40 <.LFE79>

004155c0 <.LVL111>:
        ret = RET_ERR(ret, r, MP_MULMOD_E);
  4155c0:	1c03      	adds	r3, r0, #0
  4155c2:	bf18      	it	ne
  4155c4:	2301      	movne	r3, #1
  4155c6:	425b      	negs	r3, r3
  4155c8:	f023 0374 	bic.w	r3, r3, #116	; 0x74
  4155cc:	2c00      	cmp	r4, #0
  4155ce:	bf18      	it	ne
  4155d0:	2300      	movne	r3, #0
  4155d2:	431c      	orrs	r4, r3
        r = mp_mul(&tmp, &key->q, &tmp);
  4155d4:	f50d 628a 	add.w	r2, sp, #1104	; 0x450
  4155d8:	4629      	mov	r1, r5
  4155da:	4610      	mov	r0, r2

004155dc <.LVL113>:
  4155dc:	f009 fc39 	bl	41ee52 <.LFE86>

004155e0 <.LVL114>:
        ret = RET_ERR(ret, r, MP_MUL_E);
  4155e0:	1c03      	adds	r3, r0, #0
  4155e2:	bf18      	it	ne
  4155e4:	2301      	movne	r3, #1
  4155e6:	425b      	negs	r3, r3
  4155e8:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  4155ec:	2c00      	cmp	r4, #0
  4155ee:	bf18      	it	ne
  4155f0:	2300      	movne	r3, #0
  4155f2:	431c      	orrs	r4, r3
        r = mp_add(&tmp, &tmpb, &tmp);
  4155f4:	f50d 628a 	add.w	r2, sp, #1104	; 0x450
  4155f8:	a98a      	add	r1, sp, #552	; 0x228
  4155fa:	4610      	mov	r0, r2

004155fc <.LVL116>:
  4155fc:	f009 fc1a 	bl	41ee34 <.LFE222>

00415600 <.LVL117>:
        ret = RET_ERR(ret, r, MP_ADD_E);
  415600:	1c03      	adds	r3, r0, #0
  415602:	bf18      	it	ne
  415604:	2301      	movne	r3, #1
  415606:	425b      	negs	r3, r3
  415608:	f023 0372 	bic.w	r3, r3, #114	; 0x72
  41560c:	2c00      	cmp	r4, #0
  41560e:	bf18      	it	ne
  415610:	2300      	movne	r3, #0
  415612:	431c      	orrs	r4, r3
        mp_clear(&tmpa);
  415614:	4668      	mov	r0, sp

00415616 <.LVL119>:
  415616:	f009 fbc1 	bl	41ed9c <.LFE170>

0041561a <.LVL120>:
        mp_clear(&tmpb);
  41561a:	a88a      	add	r0, sp, #552	; 0x228
  41561c:	f009 fbbe 	bl	41ed9c <.LFE170>

00415620 <.LVL121>:
        if (ret != 0) {
  415620:	bb7c      	cbnz	r4, 415682 <.L68>
  415622:	e009      	b.n	415638 <.LVL124>

00415624 <.LBE19>:
        if (mp_exptmod(&tmp, &key->e, &key->n, &tmp) != MP_OKAY)
  415624:	f50d 638a 	add.w	r3, sp, #1104	; 0x450
  415628:	f8dd 269c 	ldr.w	r2, [sp, #1692]	; 0x69c
  41562c:	f502 710a 	add.w	r1, r2, #552	; 0x228
  415630:	4618      	mov	r0, r3
  415632:	f009 fc8d 	bl	41ef50 <.LFE78>

00415636 <.LVL123>:
  415636:	bb80      	cbnz	r0, 41569a <.LCFI22>

00415638 <.LVL124>:
    keyLen = wc_RsaEncryptSize(key);
  415638:	f8dd 069c 	ldr.w	r0, [sp, #1692]	; 0x69c
  41563c:	f009 fb22 	bl	41ec84 <wc_RsaEncryptSize>

00415640 <.LVL125>:
  415640:	4604      	mov	r4, r0

00415642 <.LVL126>:
    if (keyLen > *outLen) {
  415642:	683b      	ldr	r3, [r7, #0]
  415644:	4298      	cmp	r0, r3
  415646:	d902      	bls.n	41564e <.LVL126+0xc>
        ERROR_OUT(RSA_BUFFER_E);
  415648:	f06f 0482 	mvn.w	r4, #130	; 0x82
  41564c:	e019      	b.n	415682 <.L68>
    len = mp_unsigned_bin_size(&tmp);
  41564e:	f50d 608a 	add.w	r0, sp, #1104	; 0x450

00415652 <.LVL127>:
  415652:	f009 fc6d 	bl	41ef30 <.LFE82>

00415656 <.LVL128>:
    while (len < keyLen) {
  415656:	4284      	cmp	r4, r0
  415658:	d906      	bls.n	415668 <.LVL131>
  41565a:	1a23      	subs	r3, r4, r0
  41565c:	4433      	add	r3, r6
        *out++ = 0x00;
  41565e:	2200      	movs	r2, #0
  415660:	f806 2b01 	strb.w	r2, [r6], #1
    while (len < keyLen) {
  415664:	429e      	cmp	r6, r3
  415666:	d1fb      	bne.n	415660 <.LVL128+0xa>

00415668 <.LVL131>:
    *outLen = keyLen;
  415668:	603c      	str	r4, [r7, #0]
    if (mp_to_unsigned_bin(&tmp, out) != MP_OKAY)
  41566a:	4631      	mov	r1, r6
  41566c:	f50d 608a 	add.w	r0, sp, #1104	; 0x450
  415670:	f009 fbf4 	bl	41ee5c <.LFE73>

00415674 <.LVL132>:
  415674:	1e04      	subs	r4, r0, #0

00415676 <.LVL133>:
        ERROR_OUT(MP_TO_E);
  415676:	bf18      	it	ne
  415678:	f06f 0470 	mvnne.w	r4, #112	; 0x70
  41567c:	e001      	b.n	415682 <.L68>

0041567e <.LVL134>:
        ERROR_OUT(MP_READ_E);
  41567e:	f06f 046e 	mvn.w	r4, #110	; 0x6e

00415682 <.L68>:
    mp_clear(&tmp);
  415682:	f50d 608a 	add.w	r0, sp, #1104	; 0x450
  415686:	f009 fb89 	bl	41ed9c <.LFE170>

0041568a <.LVL136>:
}
  41568a:	4620      	mov	r0, r4
  41568c:	f20d 6d7c 	addw	sp, sp, #1660	; 0x67c

00415690 <.LCFI21>:
  415690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00415694 <.LVL137>:
        ERROR_OUT(RSA_WRONG_TYPE_E);
  415694:	f06f 0481 	mvn.w	r4, #129	; 0x81

00415698 <.LVL138>:
  415698:	e7f3      	b.n	415682 <.L68>

0041569a <.LCFI22>:
            ERROR_OUT(MP_EXPTMOD_E);
  41569a:	f06f 046f 	mvn.w	r4, #111	; 0x6f

0041569e <.LVL140>:
  41569e:	e7f0      	b.n	415682 <.L68>

004156a0 <.LVL141>:
        return MP_INIT_E;
  4156a0:	f06f 046d 	mvn.w	r4, #109	; 0x6d

004156a4 <.LVL142>:
  4156a4:	e7f1      	b.n	41568a <.LVL136>

Disassembly of section .text._free_r%111:

004156a8 <_free_r>:
  4156a8:	2900      	cmp	r1, #0
  4156aa:	d044      	beq.n	415736 <.LVL43>
  4156ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

004156b0 <.LCFI1>:
  4156b0:	460d      	mov	r5, r1
  4156b2:	4680      	mov	r8, r0
  4156b4:	f008 fe4e 	bl	41e354 <.LFE141>

004156b8 <.LVL24>:
  4156b8:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4156bc:	4969      	ldr	r1, [pc, #420]	; (415864 <.LVL82+0xa>)
  4156be:	f027 0301 	bic.w	r3, r7, #1
  4156c2:	f1a5 0408 	sub.w	r4, r5, #8

004156c6 <.LVL25>:
  4156c6:	18e2      	adds	r2, r4, r3

004156c8 <.LVL26>:
  4156c8:	688e      	ldr	r6, [r1, #8]
  4156ca:	6850      	ldr	r0, [r2, #4]
  4156cc:	42b2      	cmp	r2, r6
  4156ce:	f020 0003 	bic.w	r0, r0, #3

004156d2 <.LVL27>:
  4156d2:	d05e      	beq.n	415792 <.LVL56>
  4156d4:	07fe      	lsls	r6, r7, #31
  4156d6:	6050      	str	r0, [r2, #4]

004156d8 <.LVL28>:
  4156d8:	d40b      	bmi.n	4156f2 <.LVL34>
  4156da:	f855 7c08 	ldr.w	r7, [r5, #-8]

004156de <.LVL29>:
  4156de:	1be4      	subs	r4, r4, r7
  4156e0:	f101 0e08 	add.w	lr, r1, #8
  4156e4:	68a5      	ldr	r5, [r4, #8]

004156e6 <.LVL31>:
  4156e6:	4575      	cmp	r5, lr
  4156e8:	443b      	add	r3, r7
  4156ea:	d06d      	beq.n	4157c8 <.LVL70>
  4156ec:	68e7      	ldr	r7, [r4, #12]

004156ee <.LVL33>:
  4156ee:	60ef      	str	r7, [r5, #12]
  4156f0:	60bd      	str	r5, [r7, #8]

004156f2 <.LVL34>:
  4156f2:	1815      	adds	r5, r2, r0
  4156f4:	686d      	ldr	r5, [r5, #4]
  4156f6:	07ed      	lsls	r5, r5, #31
  4156f8:	d53e      	bpl.n	415778 <.LCFI5>
  4156fa:	f043 0201 	orr.w	r2, r3, #1

004156fe <.LVL35>:
  4156fe:	6062      	str	r2, [r4, #4]
  415700:	50e3      	str	r3, [r4, r3]

00415702 <.LVL36>:
  415702:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  415706:	d217      	bcs.n	415738 <.LCFI3>
  415708:	08db      	lsrs	r3, r3, #3

0041570a <.LVL37>:
  41570a:	1c58      	adds	r0, r3, #1
  41570c:	109a      	asrs	r2, r3, #2
  41570e:	684d      	ldr	r5, [r1, #4]
  415710:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  415714:	60a7      	str	r7, [r4, #8]
  415716:	2301      	movs	r3, #1

00415718 <.LVL38>:
  415718:	4093      	lsls	r3, r2
  41571a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3

0041571e <.LVL39>:
  41571e:	432b      	orrs	r3, r5
  415720:	3a08      	subs	r2, #8

00415722 <.LVL40>:
  415722:	60e2      	str	r2, [r4, #12]
  415724:	604b      	str	r3, [r1, #4]
  415726:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  41572a:	60fc      	str	r4, [r7, #12]

0041572c <.LVL41>:
  41572c:	4640      	mov	r0, r8
  41572e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

00415732 <.LCFI2>:
  415732:	f009 bc31 	b.w	41ef98 <__malloc_unlock>

00415736 <.LVL43>:
  415736:	4770      	bx	lr

00415738 <.LCFI3>:
  415738:	0a5a      	lsrs	r2, r3, #9
  41573a:	2a04      	cmp	r2, #4
  41573c:	d852      	bhi.n	4157e4 <.LVL74>
  41573e:	099a      	lsrs	r2, r3, #6
  415740:	f102 0739 	add.w	r7, r2, #57	; 0x39
  415744:	00ff      	lsls	r7, r7, #3
  415746:	f102 0538 	add.w	r5, r2, #56	; 0x38

0041574a <.LVL45>:
  41574a:	19c8      	adds	r0, r1, r7
  41574c:	59ca      	ldr	r2, [r1, r7]
  41574e:	3808      	subs	r0, #8

00415750 <.LVL46>:
  415750:	4290      	cmp	r0, r2
  415752:	d04f      	beq.n	4157f4 <.LVL75>
  415754:	6851      	ldr	r1, [r2, #4]
  415756:	f021 0103 	bic.w	r1, r1, #3
  41575a:	428b      	cmp	r3, r1
  41575c:	d232      	bcs.n	4157c4 <.LVL68>
  41575e:	6892      	ldr	r2, [r2, #8]
  415760:	4290      	cmp	r0, r2
  415762:	d1f7      	bne.n	415754 <.LVL46+0x4>

00415764 <.LVL48>:
  415764:	68c3      	ldr	r3, [r0, #12]

00415766 <.LVL49>:
  415766:	60a0      	str	r0, [r4, #8]
  415768:	60e3      	str	r3, [r4, #12]
  41576a:	609c      	str	r4, [r3, #8]
  41576c:	60c4      	str	r4, [r0, #12]
  41576e:	4640      	mov	r0, r8

00415770 <.LVL50>:
  415770:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

00415774 <.LCFI4>:
  415774:	f009 bc10 	b.w	41ef98 <__malloc_unlock>

00415778 <.LCFI5>:
  415778:	6895      	ldr	r5, [r2, #8]
  41577a:	4f3b      	ldr	r7, [pc, #236]	; (415868 <.LVL82+0xe>)
  41577c:	42bd      	cmp	r5, r7
  41577e:	4403      	add	r3, r0
  415780:	d040      	beq.n	415804 <.LVL79>
  415782:	68d0      	ldr	r0, [r2, #12]

00415784 <.LVL54>:
  415784:	60e8      	str	r0, [r5, #12]
  415786:	f043 0201 	orr.w	r2, r3, #1

0041578a <.LVL55>:
  41578a:	6085      	str	r5, [r0, #8]
  41578c:	6062      	str	r2, [r4, #4]
  41578e:	50e3      	str	r3, [r4, r3]
  415790:	e7b7      	b.n	415702 <.LVL36>

00415792 <.LVL56>:
  415792:	07ff      	lsls	r7, r7, #31

00415794 <.LVL57>:
  415794:	4403      	add	r3, r0
  415796:	d407      	bmi.n	4157a8 <.LVL64>
  415798:	f855 2c08 	ldr.w	r2, [r5, #-8]

0041579c <.LVL59>:
  41579c:	1aa4      	subs	r4, r4, r2

0041579e <.LVL60>:
  41579e:	4413      	add	r3, r2
  4157a0:	68a0      	ldr	r0, [r4, #8]

004157a2 <.LVL62>:
  4157a2:	68e2      	ldr	r2, [r4, #12]

004157a4 <.LVL63>:
  4157a4:	60c2      	str	r2, [r0, #12]
  4157a6:	6090      	str	r0, [r2, #8]

004157a8 <.LVL64>:
  4157a8:	4a30      	ldr	r2, [pc, #192]	; (41586c <.LVL82+0x12>)
  4157aa:	6812      	ldr	r2, [r2, #0]
  4157ac:	f043 0001 	orr.w	r0, r3, #1
  4157b0:	4293      	cmp	r3, r2
  4157b2:	6060      	str	r0, [r4, #4]

004157b4 <.LVL65>:
  4157b4:	608c      	str	r4, [r1, #8]
  4157b6:	d3b9      	bcc.n	41572c <.LVL41>
  4157b8:	4b2d      	ldr	r3, [pc, #180]	; (415870 <.LVL82+0x16>)

004157ba <.LVL66>:
  4157ba:	4640      	mov	r0, r8
  4157bc:	6819      	ldr	r1, [r3, #0]
  4157be:	f005 f8d9 	bl	41a974 <.LFE0>

004157c2 <.LVL67>:
  4157c2:	e7b3      	b.n	41572c <.LVL41>

004157c4 <.LVL68>:
  4157c4:	4610      	mov	r0, r2

004157c6 <.LVL69>:
  4157c6:	e7cd      	b.n	415764 <.LVL48>

004157c8 <.LVL70>:
  4157c8:	1811      	adds	r1, r2, r0
  4157ca:	6849      	ldr	r1, [r1, #4]
  4157cc:	07c9      	lsls	r1, r1, #31
  4157ce:	d444      	bmi.n	41585a <.LVL82>
  4157d0:	6891      	ldr	r1, [r2, #8]
  4157d2:	68d2      	ldr	r2, [r2, #12]

004157d4 <.LVL71>:
  4157d4:	60ca      	str	r2, [r1, #12]
  4157d6:	4403      	add	r3, r0

004157d8 <.LVL72>:
  4157d8:	f043 0001 	orr.w	r0, r3, #1

004157dc <.LVL73>:
  4157dc:	6091      	str	r1, [r2, #8]
  4157de:	6060      	str	r0, [r4, #4]
  4157e0:	50e3      	str	r3, [r4, r3]
  4157e2:	e7a3      	b.n	41572c <.LVL41>

004157e4 <.LVL74>:
  4157e4:	2a14      	cmp	r2, #20
  4157e6:	d816      	bhi.n	415816 <.LVL81>
  4157e8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4157ec:	00ff      	lsls	r7, r7, #3
  4157ee:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4157f2:	e7aa      	b.n	41574a <.LVL45>

004157f4 <.LVL75>:
  4157f4:	10aa      	asrs	r2, r5, #2

004157f6 <.LVL76>:
  4157f6:	2301      	movs	r3, #1

004157f8 <.LVL77>:
  4157f8:	684d      	ldr	r5, [r1, #4]

004157fa <.LVL78>:
  4157fa:	4093      	lsls	r3, r2
  4157fc:	432b      	orrs	r3, r5
  4157fe:	604b      	str	r3, [r1, #4]
  415800:	4603      	mov	r3, r0
  415802:	e7b0      	b.n	415766 <.LVL49>

00415804 <.LVL79>:
  415804:	f043 0201 	orr.w	r2, r3, #1

00415808 <.LVL80>:
  415808:	614c      	str	r4, [r1, #20]
  41580a:	610c      	str	r4, [r1, #16]
  41580c:	60e5      	str	r5, [r4, #12]
  41580e:	60a5      	str	r5, [r4, #8]
  415810:	6062      	str	r2, [r4, #4]
  415812:	50e3      	str	r3, [r4, r3]
  415814:	e78a      	b.n	41572c <.LVL41>

00415816 <.LVL81>:
  415816:	2a54      	cmp	r2, #84	; 0x54
  415818:	d806      	bhi.n	415828 <.LVL81+0x12>
  41581a:	0b1a      	lsrs	r2, r3, #12
  41581c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  415820:	00ff      	lsls	r7, r7, #3
  415822:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  415826:	e790      	b.n	41574a <.LVL45>
  415828:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  41582c:	d806      	bhi.n	41583c <.LVL81+0x26>
  41582e:	0bda      	lsrs	r2, r3, #15
  415830:	f102 0778 	add.w	r7, r2, #120	; 0x78
  415834:	00ff      	lsls	r7, r7, #3
  415836:	f102 0577 	add.w	r5, r2, #119	; 0x77
  41583a:	e786      	b.n	41574a <.LVL45>
  41583c:	f240 5054 	movw	r0, #1364	; 0x554
  415840:	4282      	cmp	r2, r0
  415842:	d806      	bhi.n	415852 <.LVL81+0x3c>
  415844:	0c9a      	lsrs	r2, r3, #18
  415846:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  41584a:	00ff      	lsls	r7, r7, #3
  41584c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  415850:	e77b      	b.n	41574a <.LVL45>
  415852:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  415856:	257e      	movs	r5, #126	; 0x7e
  415858:	e777      	b.n	41574a <.LVL45>

0041585a <.LVL82>:
  41585a:	f043 0101 	orr.w	r1, r3, #1
  41585e:	6061      	str	r1, [r4, #4]
  415860:	6013      	str	r3, [r2, #0]
  415862:	e763      	b.n	41572c <.LVL41>
  415864:	20416c80 	.word	0x20416c80
  415868:	20416c88 	.word	0x20416c88
  41586c:	204178a0 	.word	0x204178a0
  415870:	20417898 	.word	0x20417898

Disassembly of section .text.longest_match%112:

00415874 <longest_match>:
{
  415874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00415878 <.LCFI2>:
  415878:	b085      	sub	sp, #20

0041587a <.LCFI3>:
    unsigned chain_length = s->max_chain_length;/* max hash chain length */
  41587a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c

0041587c <.LVL2>:
    register Bytef *scan = s->window + s->strstart; /* current string */
  41587c:	6b85      	ldr	r5, [r0, #56]	; 0x38
  41587e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  415880:	18ac      	adds	r4, r5, r2
  415882:	9400      	str	r4, [sp, #0]

00415884 <.LVL3>:
    int best_len = s->prev_length;              /* best match length so far */
  415884:	f8d0 8078 	ldr.w	r8, [r0, #120]	; 0x78
  415888:	4644      	mov	r4, r8

0041588a <.LVL4>:
    int nice_match = s->nice_match;             /* stop if match long enough */
  41588a:	f8d0 6090 	ldr.w	r6, [r0, #144]	; 0x90
  41588e:	9601      	str	r6, [sp, #4]

00415890 <.LVL5>:
    IPos limit = s->strstart > (IPos)MAX_DIST(s) ?
  415890:	6ac6      	ldr	r6, [r0, #44]	; 0x2c

00415892 <.LVL6>:
  415892:	f5a6 7783 	sub.w	r7, r6, #262	; 0x106
        s->strstart - (IPos)MAX_DIST(s) : NIL;
  415896:	42ba      	cmp	r2, r7
  415898:	d920      	bls.n	4158dc <.LVL15>
  41589a:	f502 7783 	add.w	r7, r2, #262	; 0x106
  41589e:	eba7 0a06 	sub.w	sl, r7, r6

004158a2 <.LVL7>:
    Posf *prev = s->prev;
  4158a2:	f8d0 e040 	ldr.w	lr, [r0, #64]	; 0x40

004158a6 <.LVL8>:
    uInt wmask = s->w_mask;
  4158a6:	f8d0 c034 	ldr.w	ip, [r0, #52]	; 0x34

004158aa <.LVL9>:
    register Bytef *strend = s->window + s->strstart + MAX_MATCH;
  4158aa:	f502 7281 	add.w	r2, r2, #258	; 0x102
  4158ae:	18aa      	adds	r2, r5, r2
  4158b0:	9202      	str	r2, [sp, #8]

004158b2 <.LVL10>:
    register Byte scan_end1  = scan[best_len-1];
  4158b2:	9f00      	ldr	r7, [sp, #0]
  4158b4:	463a      	mov	r2, r7

004158b6 <.LVL11>:
  4158b6:	4442      	add	r2, r8
  4158b8:	f812 9c01 	ldrb.w	r9, [r2, #-1]

004158bc <.LVL12>:
    register Byte scan_end   = scan[best_len];
  4158bc:	f817 7008 	ldrb.w	r7, [r7, r8]

004158c0 <.LVL13>:
    if (s->prev_length >= s->good_match) {
  4158c0:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
  4158c4:	4590      	cmp	r8, r2
        chain_length >>= 2;
  4158c6:	bf28      	it	cs
  4158c8:	089b      	lsrcs	r3, r3, #2
    if ((uInt)nice_match > s->lookahead) nice_match = s->lookahead;
  4158ca:	6f46      	ldr	r6, [r0, #116]	; 0x74
  4158cc:	9a01      	ldr	r2, [sp, #4]
  4158ce:	42b2      	cmp	r2, r6
  4158d0:	bf28      	it	cs
  4158d2:	4632      	movcs	r2, r6
  4158d4:	9201      	str	r2, [sp, #4]
  4158d6:	4656      	mov	r6, sl
  4158d8:	4683      	mov	fp, r0
  4158da:	e022      	b.n	415922 <.LVL27+0x2>

004158dc <.LVL15>:
        s->strstart - (IPos)MAX_DIST(s) : NIL;
  4158dc:	f04f 0a00 	mov.w	sl, #0
  4158e0:	e7df      	b.n	4158a2 <.LVL7>

004158e2 <.LVL16>:
  4158e2:	9b03      	ldr	r3, [sp, #12]
  4158e4:	4683      	mov	fp, r0
                 scan < strend);
  4158e6:	f108 0801 	add.w	r8, r8, #1

004158ea <.LVL17>:
        len = MAX_MATCH - (int)(strend - scan);
  4158ea:	9a02      	ldr	r2, [sp, #8]
  4158ec:	eba2 0208 	sub.w	r2, r2, r8
  4158f0:	f5c2 7281 	rsb	r2, r2, #258	; 0x102

004158f4 <.LVL18>:
        if (len > best_len) {
  4158f4:	4294      	cmp	r4, r2
  4158f6:	da0b      	bge.n	415910 <.LVL23>
            s->match_start = cur_match;
  4158f8:	f8cb 1070 	str.w	r1, [fp, #112]	; 0x70

004158fc <.LVL19>:
            if (len >= nice_match) break;
  4158fc:	9801      	ldr	r0, [sp, #4]

004158fe <.LVL20>:
  4158fe:	4290      	cmp	r0, r2
  415900:	f340 808b 	ble.w	415a1a <.LVL56>
            scan_end1  = scan[best_len-1];
  415904:	9800      	ldr	r0, [sp, #0]
  415906:	1884      	adds	r4, r0, r2
  415908:	f814 9c01 	ldrb.w	r9, [r4, #-1]
            scan_end   = scan[best_len];
  41590c:	5c87      	ldrb	r7, [r0, r2]
        len = MAX_MATCH - (int)(strend - scan);
  41590e:	4614      	mov	r4, r2

00415910 <.LVL23>:
    } while ((cur_match = prev[cur_match & wmask]) > limit
  415910:	ea01 010c 	and.w	r1, r1, ip

00415914 <.LVL24>:
  415914:	f83e 1011 	ldrh.w	r1, [lr, r1, lsl #1]

00415918 <.LVL25>:
             && --chain_length != 0);
  415918:	428e      	cmp	r6, r1
  41591a:	f080 8081 	bcs.w	415a20 <.LVL57>

0041591e <.LVL26>:
  41591e:	3b01      	subs	r3, #1

00415920 <.LVL27>:
  415920:	d079      	beq.n	415a16 <.LVL55>
        match = s->window + cur_match;
  415922:	186a      	adds	r2, r5, r1

00415924 <.LVL28>:
        if (match[best_len]   != scan_end  ||
  415924:	f812 8004 	ldrb.w	r8, [r2, r4]
  415928:	45b8      	cmp	r8, r7
  41592a:	d1f1      	bne.n	415910 <.LVL23>
            match[best_len-1] != scan_end1 ||
  41592c:	eb02 0804 	add.w	r8, r2, r4
        if (match[best_len]   != scan_end  ||
  415930:	f818 8c01 	ldrb.w	r8, [r8, #-1]
  415934:	45c8      	cmp	r8, r9
  415936:	d1eb      	bne.n	415910 <.LVL23>
            match[best_len-1] != scan_end1 ||
  415938:	f892 a000 	ldrb.w	sl, [r2]
  41593c:	9800      	ldr	r0, [sp, #0]
  41593e:	f890 8000 	ldrb.w	r8, [r0]
  415942:	45c2      	cmp	sl, r8
  415944:	d1e4      	bne.n	415910 <.LVL23>

00415946 <.LVL29>:
            *match            != *scan     ||
  415946:	f892 a001 	ldrb.w	sl, [r2, #1]
  41594a:	f890 8001 	ldrb.w	r8, [r0, #1]
  41594e:	45c2      	cmp	sl, r8
  415950:	d1de      	bne.n	415910 <.LVL23>
        scan += 2, match++;
  415952:	f100 0802 	add.w	r8, r0, #2

00415956 <.LVL30>:
  415956:	3202      	adds	r2, #2

00415958 <.LVL31>:
  415958:	9303      	str	r3, [sp, #12]
  41595a:	9b02      	ldr	r3, [sp, #8]

0041595c <.LVL32>:
  41595c:	4658      	mov	r0, fp

0041595e <.LVL33>:
                 scan < strend);
  41595e:	f898 b001 	ldrb.w	fp, [r8, #1]
  415962:	f892 a001 	ldrb.w	sl, [r2, #1]
  415966:	45d3      	cmp	fp, sl
  415968:	d1bb      	bne.n	4158e2 <.LVL16>

0041596a <.LVL34>:
        } while (*++scan == *++match && *++scan == *++match &&
  41596a:	f898 b002 	ldrb.w	fp, [r8, #2]
  41596e:	f892 a002 	ldrb.w	sl, [r2, #2]
  415972:	45d3      	cmp	fp, sl
  415974:	d131      	bne.n	4159da <.LVL43>

00415976 <.LVL35>:
  415976:	f898 b003 	ldrb.w	fp, [r8, #3]
  41597a:	f892 a003 	ldrb.w	sl, [r2, #3]
  41597e:	45d3      	cmp	fp, sl
  415980:	d130      	bne.n	4159e4 <.LVL45>

00415982 <.LVL36>:
                 *++scan == *++match && *++scan == *++match &&
  415982:	f898 b004 	ldrb.w	fp, [r8, #4]
  415986:	f892 a004 	ldrb.w	sl, [r2, #4]
  41598a:	45d3      	cmp	fp, sl
  41598c:	d12f      	bne.n	4159ee <.LVL47>

0041598e <.LVL37>:
  41598e:	f898 b005 	ldrb.w	fp, [r8, #5]
  415992:	f892 a005 	ldrb.w	sl, [r2, #5]
  415996:	45d3      	cmp	fp, sl
  415998:	d12e      	bne.n	4159f8 <.LVL49>

0041599a <.LVL38>:
                 *++scan == *++match && *++scan == *++match &&
  41599a:	f898 b006 	ldrb.w	fp, [r8, #6]
  41599e:	f892 a006 	ldrb.w	sl, [r2, #6]
  4159a2:	45d3      	cmp	fp, sl
  4159a4:	d12d      	bne.n	415a02 <.LVL51>

004159a6 <.LVL39>:
  4159a6:	f898 b007 	ldrb.w	fp, [r8, #7]
  4159aa:	f892 a007 	ldrb.w	sl, [r2, #7]
  4159ae:	45d3      	cmp	fp, sl
  4159b0:	d12c      	bne.n	415a0c <.LVL53>

004159b2 <.LVL40>:
                 *++scan == *++match && *++scan == *++match &&
  4159b2:	f818 af08 	ldrb.w	sl, [r8, #8]!

004159b6 <.LVL41>:
  4159b6:	f812 bf08 	ldrb.w	fp, [r2, #8]!

004159ba <.LVL42>:
  4159ba:	45da      	cmp	sl, fp
  4159bc:	bf14      	ite	ne
  4159be:	f04f 0a00 	movne.w	sl, #0
  4159c2:	f04f 0a01 	moveq.w	sl, #1
  4159c6:	4543      	cmp	r3, r8
  4159c8:	bf98      	it	ls
  4159ca:	f04f 0a00 	movls.w	sl, #0
  4159ce:	f1ba 0f00 	cmp.w	sl, #0
  4159d2:	d1c4      	bne.n	41595e <.LVL33>
  4159d4:	9b03      	ldr	r3, [sp, #12]
  4159d6:	4683      	mov	fp, r0
  4159d8:	e787      	b.n	4158ea <.LVL17>

004159da <.LVL43>:
  4159da:	9b03      	ldr	r3, [sp, #12]
  4159dc:	4683      	mov	fp, r0
        } while (*++scan == *++match && *++scan == *++match &&
  4159de:	f108 0802 	add.w	r8, r8, #2

004159e2 <.LVL44>:
  4159e2:	e782      	b.n	4158ea <.LVL17>

004159e4 <.LVL45>:
  4159e4:	9b03      	ldr	r3, [sp, #12]
  4159e6:	4683      	mov	fp, r0
  4159e8:	f108 0803 	add.w	r8, r8, #3

004159ec <.LVL46>:
  4159ec:	e77d      	b.n	4158ea <.LVL17>

004159ee <.LVL47>:
  4159ee:	9b03      	ldr	r3, [sp, #12]
  4159f0:	4683      	mov	fp, r0
                 *++scan == *++match && *++scan == *++match &&
  4159f2:	f108 0804 	add.w	r8, r8, #4

004159f6 <.LVL48>:
  4159f6:	e778      	b.n	4158ea <.LVL17>

004159f8 <.LVL49>:
  4159f8:	9b03      	ldr	r3, [sp, #12]
  4159fa:	4683      	mov	fp, r0
  4159fc:	f108 0805 	add.w	r8, r8, #5

00415a00 <.LVL50>:
  415a00:	e773      	b.n	4158ea <.LVL17>

00415a02 <.LVL51>:
  415a02:	9b03      	ldr	r3, [sp, #12]
  415a04:	4683      	mov	fp, r0
                 *++scan == *++match && *++scan == *++match &&
  415a06:	f108 0806 	add.w	r8, r8, #6

00415a0a <.LVL52>:
  415a0a:	e76e      	b.n	4158ea <.LVL17>

00415a0c <.LVL53>:
  415a0c:	9b03      	ldr	r3, [sp, #12]
  415a0e:	4683      	mov	fp, r0
  415a10:	f108 0807 	add.w	r8, r8, #7

00415a14 <.LVL54>:
  415a14:	e769      	b.n	4158ea <.LVL17>

00415a16 <.LVL55>:
  415a16:	4658      	mov	r0, fp
  415a18:	e003      	b.n	415a22 <.LVL58>

00415a1a <.LVL56>:
  415a1a:	4658      	mov	r0, fp
        len = MAX_MATCH - (int)(strend - scan);
  415a1c:	4614      	mov	r4, r2
  415a1e:	e000      	b.n	415a22 <.LVL58>

00415a20 <.LVL57>:
  415a20:	4658      	mov	r0, fp

00415a22 <.LVL58>:
  415a22:	6f40      	ldr	r0, [r0, #116]	; 0x74

00415a24 <.LVL59>:
}
  415a24:	42a0      	cmp	r0, r4
  415a26:	bf28      	it	cs
  415a28:	4620      	movcs	r0, r4
  415a2a:	b005      	add	sp, #20

00415a2c <.LCFI4>:
  415a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section .text.wc_ecc_make_key_ex%113:

00415a30 <wc_ecc_make_key_ex>:
{
  415a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

00415a34 <.LCFI67>:
  415a34:	f6ad 3d54 	subw	sp, sp, #2900	; 0xb54

00415a38 <.LCFI68>:
  415a38:	4606      	mov	r6, r0
  415a3a:	460f      	mov	r7, r1
  415a3c:	4614      	mov	r4, r2
  415a3e:	4698      	mov	r8, r3

00415a40 <.LVL863>:
    DECLARE_CURVE_SPECS(ECC_CURVE_FIELD_COUNT)
  415a40:	ad18      	add	r5, sp, #96	; 0x60
  415a42:	9517      	str	r5, [sp, #92]	; 0x5c
  415a44:	2228      	movs	r2, #40	; 0x28

00415a46 <.LVL864>:
  415a46:	2100      	movs	r1, #0

00415a48 <.LVL865>:
  415a48:	4628      	mov	r0, r5

00415a4a <.LVL866>:
  415a4a:	f004 fdd1 	bl	41a5f0 <.LFE157>

00415a4e <.LVL867>:
  415a4e:	ab22      	add	r3, sp, #136	; 0x88
  415a50:	61ab      	str	r3, [r5, #24]
  415a52:	2305      	movs	r3, #5
  415a54:	61eb      	str	r3, [r5, #28]
    if (key == NULL || rng == NULL) {
  415a56:	2c00      	cmp	r4, #0
  415a58:	f000 80aa 	beq.w	415bb0 <.LVL924>
  415a5c:	2e00      	cmp	r6, #0
  415a5e:	f000 80a7 	beq.w	415bb0 <.LVL924>

00415a62 <.LBB45>:
    key->state = ECC_STATE_NONE;
  415a62:	2300      	movs	r3, #0
  415a64:	60a3      	str	r3, [r4, #8]

00415a66 <.LBE45>:
    err = wc_ecc_set_curve(key, keysize, curve_id);
  415a66:	4642      	mov	r2, r8
  415a68:	4639      	mov	r1, r7
  415a6a:	4620      	mov	r0, r4
  415a6c:	f006 faec 	bl	41c048 <.LFE35>

00415a70 <.LVL870>:
    if (err != 0) {
  415a70:	4605      	mov	r5, r0
  415a72:	b120      	cbz	r0, 415a7e <.LCFI70>

00415a74 <.LVL871>:
}
  415a74:	4628      	mov	r0, r5
  415a76:	f60d 3d54 	addw	sp, sp, #2900	; 0xb54

00415a7a <.LCFI69>:
  415a7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00415a7e <.LCFI70>:
    err = mp_init(&key->k);
  415a7e:	f504 67d2 	add.w	r7, r4, #1680	; 0x690

00415a82 <.LVL873>:
  415a82:	4638      	mov	r0, r7

00415a84 <.LVL874>:
  415a84:	f009 f906 	bl	41ec94 <.LFE193>

00415a88 <.LVL875>:
    if (err == MP_OKAY) {
  415a88:	4605      	mov	r5, r0
  415a8a:	b168      	cbz	r0, 415aa8 <.LBE47>
    ecc_point*     base = NULL;
  415a8c:	2600      	movs	r6, #0

00415a8e <.LVL876>:
    if (err == MP_OKAY)
  415a8e:	b36d      	cbz	r5, 415aec <.LVL892+0x2>

00415a90 <.LVL877>:
    if (err == MP_OKAY)
  415a90:	2d00      	cmp	r5, #0
  415a92:	d17d      	bne.n	415b90 <.LBE55>
        key->type = ECC_PRIVATEKEY;
  415a94:	2302      	movs	r3, #2
  415a96:	6023      	str	r3, [r4, #0]

00415a98 <.LVL878>:
    wc_ecc_del_point_h(base, key->heap);
  415a98:	6961      	ldr	r1, [r4, #20]
  415a9a:	4630      	mov	r0, r6
  415a9c:	f008 fccc 	bl	41e438 <.LFE10>

00415aa0 <.LBB47>:
    _wc_ecc_curve_free(curve);
  415aa0:	9817      	ldr	r0, [sp, #92]	; 0x5c
  415aa2:	f006 fc1b 	bl	41c2dc <.LFE46>

00415aa6 <.LVL880>:
  415aa6:	e7e5      	b.n	415a74 <.LVL871>

00415aa8 <.LBE47>:
        err = mp_init_multi(key->pubkey.x, key->pubkey.y, key->pubkey.z,
  415aa8:	2300      	movs	r3, #0
  415aaa:	9301      	str	r3, [sp, #4]
  415aac:	9300      	str	r3, [sp, #0]
  415aae:	f504 628d 	add.w	r2, r4, #1128	; 0x468
  415ab2:	f504 7110 	add.w	r1, r4, #576	; 0x240
  415ab6:	f104 0018 	add.w	r0, r4, #24

00415aba <.LVL882>:
  415aba:	f007 fed7 	bl	41d86c <mp_init_multi>

00415abe <.LVL883>:
    if (err == MP_OKAY) {
  415abe:	4605      	mov	r5, r0
  415ac0:	2800      	cmp	r0, #0
  415ac2:	d17a      	bne.n	415bba <.LVL926>
        base = wc_ecc_new_point_h(key->heap);
  415ac4:	6960      	ldr	r0, [r4, #20]

00415ac6 <.LVL884>:
  415ac6:	f007 fdd1 	bl	41d66c <.LBE36>

00415aca <.LVL885>:
        if (base == NULL)
  415aca:	4606      	mov	r6, r0

00415acc <.LVL886>:
  415acc:	2800      	cmp	r0, #0
  415ace:	d072      	beq.n	415bb6 <.LVL925>

00415ad0 <.LVL887>:
        err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ALL);
  415ad0:	223b      	movs	r2, #59	; 0x3b
  415ad2:	a917      	add	r1, sp, #92	; 0x5c
  415ad4:	6920      	ldr	r0, [r4, #16]

00415ad6 <.LVL888>:
  415ad6:	f003 fe51 	bl	41977c <.LFE155>

00415ada <.LVL889>:
  415ada:	4605      	mov	r5, r0

00415adc <.LVL890>:
    if (err == MP_OKAY)
  415adc:	bb65      	cbnz	r5, 415b38 <.LBE49>
        err = mp_copy(curve->Gx, base->x);
  415ade:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  415ae0:	4631      	mov	r1, r6
  415ae2:	6918      	ldr	r0, [r3, #16]
  415ae4:	f009 f9bf 	bl	41ee66 <.LFE85>

00415ae8 <.LVL891>:
  415ae8:	4605      	mov	r5, r0

00415aea <.LVL892>:
  415aea:	e7d0      	b.n	415a8e <.LVL876>
        err = mp_copy(curve->Gy, base->y);
  415aec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  415aee:	f506 710a 	add.w	r1, r6, #552	; 0x228
  415af2:	6958      	ldr	r0, [r3, #20]

00415af4 <.LVL893>:
  415af4:	f009 f9b7 	bl	41ee66 <.LFE85>

00415af8 <.LVL894>:
    if (err == MP_OKAY)
  415af8:	4605      	mov	r5, r0
  415afa:	b9e8      	cbnz	r0, 415b38 <.LBE49>
        err = mp_set(base->z, 1);
  415afc:	2101      	movs	r1, #1
  415afe:	f506 608a 	add.w	r0, r6, #1104	; 0x450

00415b02 <.LVL895>:
  415b02:	f009 f9ce 	bl	41eea2 <.LFE113>

00415b06 <.LVL896>:
    if (err == MP_OKAY)
  415b06:	4605      	mov	r5, r0
  415b08:	2800      	cmp	r0, #0
  415b0a:	d141      	bne.n	415b90 <.LBE55>
        err = wc_ecc_gen_k(rng, key->dp->size, &key->k, curve->order);
  415b0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  415b0e:	f8d3 900c 	ldr.w	r9, [r3, #12]

00415b12 <.LVL897>:
  415b12:	6923      	ldr	r3, [r4, #16]

00415b14 <.LBB49>:
    size += 8;
  415b14:	681b      	ldr	r3, [r3, #0]
  415b16:	f103 0808 	add.w	r8, r3, #8

00415b1a <.LVL898>:
    err = pic32c_RNG_GenerateBlock(buf, size);
  415b1a:	4641      	mov	r1, r8
  415b1c:	a804      	add	r0, sp, #16

00415b1e <.LVL899>:
  415b1e:	f007 fd41 	bl	41d5a4 <.LFE18>

00415b22 <.LVL900>:
    if (err == 0)
  415b22:	4605      	mov	r5, r0

00415b24 <.LVL901>:
  415b24:	b1c8      	cbz	r0, 415b5a <.LBB55>

00415b26 <.LBB51>:
    volatile byte* z = (volatile byte*)mem;
  415b26:	ab04      	add	r3, sp, #16

00415b28 <.LVL903>:
    while (len--) *z++ = 0;
  415b28:	2000      	movs	r0, #0
  415b2a:	f10d 0152 	add.w	r1, sp, #82	; 0x52

00415b2e <.LVL904>:
  415b2e:	1c5a      	adds	r2, r3, #1

00415b30 <.LVL905>:
  415b30:	7018      	strb	r0, [r3, #0]

00415b32 <.LVL906>:
  415b32:	4613      	mov	r3, r2
  415b34:	428a      	cmp	r2, r1
  415b36:	d1fa      	bne.n	415b2e <.LVL904>

00415b38 <.LBE49>:
    if (err == MP_OKAY)
  415b38:	bb55      	cbnz	r5, 415b90 <.LBE55>
            curve->Af, curve->prime, 1, key->heap);
  415b3a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
        err = wc_ecc_mulmod_ex(&key->k, base, &key->pubkey,
  415b3c:	6893      	ldr	r3, [r2, #8]
  415b3e:	6961      	ldr	r1, [r4, #20]
  415b40:	9102      	str	r1, [sp, #8]
  415b42:	2101      	movs	r1, #1
  415b44:	9101      	str	r1, [sp, #4]
  415b46:	6852      	ldr	r2, [r2, #4]
  415b48:	9200      	str	r2, [sp, #0]
  415b4a:	f104 0218 	add.w	r2, r4, #24
  415b4e:	4631      	mov	r1, r6
  415b50:	4638      	mov	r0, r7
  415b52:	f7fb fa78 	bl	411046 <.LFE6>

00415b56 <.LVL908>:
  415b56:	4605      	mov	r5, r0

00415b58 <.LVL909>:
  415b58:	e79a      	b.n	415a90 <.LVL877>

00415b5a <.LBB55>:
        err = mp_read_unsigned_bin(k, (byte*)buf, size);
  415b5a:	4642      	mov	r2, r8
  415b5c:	a904      	add	r1, sp, #16
  415b5e:	4638      	mov	r0, r7

00415b60 <.LVL911>:
  415b60:	f009 f972 	bl	41ee48 <.LFE72>

00415b64 <.LVL912>:
    if (err == MP_OKAY) {
  415b64:	4605      	mov	r5, r0
  415b66:	2800      	cmp	r0, #0
  415b68:	d1dd      	bne.n	415b26 <.LBB51>
        if (mp_iszero(k) == MP_YES)
  415b6a:	4638      	mov	r0, r7

00415b6c <.LVL913>:
  415b6c:	f009 f980 	bl	41ee70 <.LFE93>

00415b70 <.LVL914>:
  415b70:	2801      	cmp	r0, #1
  415b72:	d024      	beq.n	415bbe <.LBB56>

00415b74 <.LVL915>:
        if (mp_cmp(k, order) != MP_LT) {
  415b74:	4649      	mov	r1, r9
  415b76:	4638      	mov	r0, r7
  415b78:	f009 f9d2 	bl	41ef20 <.LFE66>

00415b7c <.LVL916>:
  415b7c:	f1b0 3fff 	cmp.w	r0, #4294967295
  415b80:	d0d1      	beq.n	415b26 <.LBB51>
            err = mp_mod(k, order, k);
  415b82:	463a      	mov	r2, r7
  415b84:	4649      	mov	r1, r9
  415b86:	4638      	mov	r0, r7
  415b88:	f009 f9de 	bl	41ef48 <.LFE75>

00415b8c <.LVL917>:
  415b8c:	4605      	mov	r5, r0

00415b8e <.LVL918>:
  415b8e:	e7ca      	b.n	415b26 <.LBB51>

00415b90 <.LBE55>:
        mp_clear(key->pubkey.x);
  415b90:	f104 0018 	add.w	r0, r4, #24
  415b94:	f009 f902 	bl	41ed9c <.LFE170>

00415b98 <.LVL920>:
        mp_clear(key->pubkey.y);
  415b98:	f504 7010 	add.w	r0, r4, #576	; 0x240
  415b9c:	f009 f8fe 	bl	41ed9c <.LFE170>

00415ba0 <.LVL921>:
        mp_clear(key->pubkey.z);
  415ba0:	f504 608d 	add.w	r0, r4, #1128	; 0x468
  415ba4:	f009 f8fa 	bl	41ed9c <.LFE170>

00415ba8 <.LVL922>:
        mp_forcezero(&key->k);
  415ba8:	4638      	mov	r0, r7
  415baa:	f009 f9b5 	bl	41ef18 <mp_forcezero>

00415bae <.LVL923>:
  415bae:	e773      	b.n	415a98 <.LVL878>

00415bb0 <.LVL924>:
        return BAD_FUNC_ARG;
  415bb0:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  415bb4:	e75e      	b.n	415a74 <.LVL871>

00415bb6 <.LVL925>:
            err = MEMORY_E;
  415bb6:	f06f 057c 	mvn.w	r5, #124	; 0x7c

00415bba <.LVL926>:
{
  415bba:	2600      	movs	r6, #0
  415bbc:	e78e      	b.n	415adc <.LVL890>

00415bbe <.LBB56>:
          err = MP_ZERO_E;
  415bbe:	f06f 0578 	mvn.w	r5, #120	; 0x78

00415bc2 <.LVL928>:
  415bc2:	e7b0      	b.n	415b26 <.LBB51>

Disassembly of section .text.wc_HmacFinal%114:

00415bc4 <wc_HmacFinal>:

int wc_HmacFinal(Hmac* hmac, byte* hash)
{
    int ret;

    if (hmac == NULL || hash == NULL) {
  415bc4:	2800      	cmp	r0, #0
  415bc6:	f000 80c1 	beq.w	415d4c <.LCFI6>
{
  415bca:	b570      	push	{r4, r5, r6, lr}

00415bcc <.LCFI5>:
  415bcc:	4604      	mov	r4, r0
    if (hmac == NULL || hash == NULL) {
  415bce:	2900      	cmp	r1, #0
  415bd0:	f000 80b6 	beq.w	415d40 <.LVL194>
  415bd4:	460d      	mov	r5, r1
            (byte*)hmac->ipad, hmac->keyLen, hash, NULL, hashLen);
    #endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    if (!hmac->innerHashKeyed) {
  415bd6:	f890 3245 	ldrb.w	r3, [r0, #581]	; 0x245
  415bda:	b14b      	cbz	r3, 415bf0 <.LVL146>

00415bdc <.LVL145>:
        ret = HmacKeyInnerHash(hmac);
        if (ret != 0)
            return ret;
    }

    switch (hmac->macType) {
  415bdc:	f894 3244 	ldrb.w	r3, [r4, #580]	; 0x244
  415be0:	2b05      	cmp	r3, #5
  415be2:	f200 80b0 	bhi.w	415d46 <.LVL195>
  415be6:	e8df f003 	tbb	[pc, r3]
  415bea:	2b09      	.short	0x2b09
  415bec:	6b8bae4b 	.word	0x6b8bae4b

00415bf0 <.LVL146>:
        ret = HmacKeyInnerHash(hmac);
  415bf0:	f006 ff8a 	bl	41cb08 <HmacKeyInnerHash>

00415bf4 <.LVL147>:
        if (ret != 0)
  415bf4:	4603      	mov	r3, r0
  415bf6:	2800      	cmp	r0, #0
  415bf8:	d0f0      	beq.n	415bdc <.LVL145>
  415bfa:	e01f      	b.n	415c3c <.LVL157>

00415bfc <.LVL148>:
    #ifndef NO_MD5
        case MD5:
            ret = wc_Md5Final(&hmac->hash.md5, (byte*)hmac->innerHash);
  415bfc:	f504 7600 	add.w	r6, r4, #512	; 0x200
  415c00:	4631      	mov	r1, r6
  415c02:	4620      	mov	r0, r4
  415c04:	f003 fabe 	bl	419184 <.LFE168>

00415c08 <.LVL149>:
            if (ret != 0)
  415c08:	4603      	mov	r3, r0
  415c0a:	b9b8      	cbnz	r0, 415c3c <.LVL157>
                break;
            ret = wc_Md5Update(&hmac->hash.md5, (byte*)hmac->opad,
  415c0c:	2240      	movs	r2, #64	; 0x40
  415c0e:	f504 71c0 	add.w	r1, r4, #384	; 0x180
  415c12:	4620      	mov	r0, r4

00415c14 <.LVL150>:
  415c14:	f005 f89e 	bl	41ad54 <.LFE23>

00415c18 <.LVL151>:
                                                                MD5_BLOCK_SIZE);
            if (ret != 0)
  415c18:	4603      	mov	r3, r0
  415c1a:	b978      	cbnz	r0, 415c3c <.LVL157>
                break;
            ret = wc_Md5Update(&hmac->hash.md5, (byte*)hmac->innerHash,
  415c1c:	2210      	movs	r2, #16
  415c1e:	4631      	mov	r1, r6
  415c20:	4620      	mov	r0, r4

00415c22 <.LVL152>:
  415c22:	f005 f897 	bl	41ad54 <.LFE23>

00415c26 <.LVL153>:
                                                               MD5_DIGEST_SIZE);
            if (ret != 0)
  415c26:	4603      	mov	r3, r0
  415c28:	b940      	cbnz	r0, 415c3c <.LVL157>
                break;
            ret = wc_Md5Final(&hmac->hash.md5, hash);
  415c2a:	4629      	mov	r1, r5
  415c2c:	4620      	mov	r0, r4

00415c2e <.LVL154>:
  415c2e:	f003 faa9 	bl	419184 <.LFE168>

00415c32 <.LVL155>:
  415c32:	4603      	mov	r3, r0

00415c34 <.LVL156>:
        default:
            ret = BAD_FUNC_ARG;
            break;
    }

    if (ret == 0) {
  415c34:	b913      	cbnz	r3, 415c3c <.LVL157>
        hmac->innerHashKeyed = 0;
  415c36:	2200      	movs	r2, #0
  415c38:	f884 2245 	strb.w	r2, [r4, #581]	; 0x245

00415c3c <.LVL157>:
    }

    return ret;
}
  415c3c:	4618      	mov	r0, r3
  415c3e:	bd70      	pop	{r4, r5, r6, pc}

00415c40 <.LVL158>:
            ret = wc_ShaFinal(&hmac->hash.sha, (byte*)hmac->innerHash);
  415c40:	f504 7600 	add.w	r6, r4, #512	; 0x200
  415c44:	4631      	mov	r1, r6
  415c46:	4620      	mov	r0, r4
  415c48:	f004 ff6e 	bl	41ab28 <.LFE171>

00415c4c <.LVL159>:
            if (ret != 0)
  415c4c:	4603      	mov	r3, r0
  415c4e:	2800      	cmp	r0, #0
  415c50:	d1f4      	bne.n	415c3c <.LVL157>
            ret = wc_ShaUpdate(&hmac->hash.sha, (byte*)hmac->opad,
  415c52:	2240      	movs	r2, #64	; 0x40
  415c54:	f504 71c0 	add.w	r1, r4, #384	; 0x180
  415c58:	4620      	mov	r0, r4

00415c5a <.LVL160>:
  415c5a:	f005 fa92 	bl	41b182 <.LFE58>

00415c5e <.LVL161>:
            if (ret != 0)
  415c5e:	4603      	mov	r3, r0
  415c60:	2800      	cmp	r0, #0
  415c62:	d1eb      	bne.n	415c3c <.LVL157>
            ret = wc_ShaUpdate(&hmac->hash.sha, (byte*)hmac->innerHash,
  415c64:	2214      	movs	r2, #20
  415c66:	4631      	mov	r1, r6
  415c68:	4620      	mov	r0, r4

00415c6a <.LVL162>:
  415c6a:	f005 fa8a 	bl	41b182 <.LFE58>

00415c6e <.LVL163>:
            if (ret != 0)
  415c6e:	4603      	mov	r3, r0
  415c70:	2800      	cmp	r0, #0
  415c72:	d1e3      	bne.n	415c3c <.LVL157>
            ret = wc_ShaFinal(&hmac->hash.sha, hash);
  415c74:	4629      	mov	r1, r5
  415c76:	4620      	mov	r0, r4

00415c78 <.LVL164>:
  415c78:	f004 ff56 	bl	41ab28 <.LFE171>

00415c7c <.LVL165>:
  415c7c:	4603      	mov	r3, r0

00415c7e <.LVL166>:
            break;
  415c7e:	e7d9      	b.n	415c34 <.LVL156>

00415c80 <.LVL167>:
            ret = wc_Sha256Final(&hmac->hash.sha256, (byte*)hmac->innerHash);
  415c80:	f504 7600 	add.w	r6, r4, #512	; 0x200
  415c84:	4631      	mov	r1, r6
  415c86:	4620      	mov	r0, r4
  415c88:	f004 fc64 	bl	41a554 <.LFE151>

00415c8c <.LVL168>:
            if (ret != 0)
  415c8c:	4603      	mov	r3, r0
  415c8e:	2800      	cmp	r0, #0
  415c90:	d1d4      	bne.n	415c3c <.LVL157>
            ret = wc_Sha256Update(&hmac->hash.sha256, (byte*)hmac->opad,
  415c92:	2240      	movs	r2, #64	; 0x40
  415c94:	f504 71c0 	add.w	r1, r4, #384	; 0x180
  415c98:	4620      	mov	r0, r4

00415c9a <.LVL169>:
  415c9a:	f005 fab3 	bl	41b204 <.LFE156>

00415c9e <.LVL170>:
            if (ret != 0)
  415c9e:	4603      	mov	r3, r0
  415ca0:	2800      	cmp	r0, #0
  415ca2:	d1cb      	bne.n	415c3c <.LVL157>
            ret = wc_Sha256Update(&hmac->hash.sha256, (byte*)hmac->innerHash,
  415ca4:	2220      	movs	r2, #32
  415ca6:	4631      	mov	r1, r6
  415ca8:	4620      	mov	r0, r4

00415caa <.LVL171>:
  415caa:	f005 faab 	bl	41b204 <.LFE156>

00415cae <.LVL172>:
            if (ret != 0)
  415cae:	4603      	mov	r3, r0
  415cb0:	2800      	cmp	r0, #0
  415cb2:	d1c3      	bne.n	415c3c <.LVL157>
            ret = wc_Sha256Final(&hmac->hash.sha256, hash);
  415cb4:	4629      	mov	r1, r5
  415cb6:	4620      	mov	r0, r4

00415cb8 <.LVL173>:
  415cb8:	f004 fc4c 	bl	41a554 <.LFE151>

00415cbc <.LVL174>:
  415cbc:	4603      	mov	r3, r0

00415cbe <.LVL175>:
            break;
  415cbe:	e7b9      	b.n	415c34 <.LVL156>

00415cc0 <.LVL176>:
            ret = wc_Sha384Final(&hmac->hash.sha384, (byte*)hmac->innerHash);
  415cc0:	f504 7600 	add.w	r6, r4, #512	; 0x200
  415cc4:	4631      	mov	r1, r6
  415cc6:	4620      	mov	r0, r4
  415cc8:	f7fe f852 	bl	413d70 <.LFE21>

00415ccc <.LVL177>:
            if (ret != 0)
  415ccc:	4603      	mov	r3, r0
  415cce:	2800      	cmp	r0, #0
  415cd0:	d1b4      	bne.n	415c3c <.LVL157>
            ret = wc_Sha384Update(&hmac->hash.sha384, (byte*)hmac->opad,
  415cd2:	2280      	movs	r2, #128	; 0x80
  415cd4:	f504 71c0 	add.w	r1, r4, #384	; 0x180
  415cd8:	4620      	mov	r0, r4

00415cda <.LVL178>:
  415cda:	f002 f9a4 	bl	418026 <.LBE719>

00415cde <.LVL179>:
            if (ret != 0)
  415cde:	4603      	mov	r3, r0
  415ce0:	2800      	cmp	r0, #0
  415ce2:	d1ab      	bne.n	415c3c <.LVL157>
            ret = wc_Sha384Update(&hmac->hash.sha384, (byte*)hmac->innerHash,
  415ce4:	2230      	movs	r2, #48	; 0x30
  415ce6:	4631      	mov	r1, r6
  415ce8:	4620      	mov	r0, r4

00415cea <.LVL180>:
  415cea:	f002 f99c 	bl	418026 <.LBE719>

00415cee <.LVL181>:
            if (ret != 0)
  415cee:	4603      	mov	r3, r0
  415cf0:	2800      	cmp	r0, #0
  415cf2:	d1a3      	bne.n	415c3c <.LVL157>
            ret = wc_Sha384Final(&hmac->hash.sha384, hash);
  415cf4:	4629      	mov	r1, r5
  415cf6:	4620      	mov	r0, r4

00415cf8 <.LVL182>:
  415cf8:	f7fe f83a 	bl	413d70 <.LFE21>

00415cfc <.LVL183>:
  415cfc:	4603      	mov	r3, r0

00415cfe <.LVL184>:
            break;
  415cfe:	e799      	b.n	415c34 <.LVL156>

00415d00 <.LVL185>:
            ret = wc_Sha512Final(&hmac->hash.sha512, (byte*)hmac->innerHash);
  415d00:	f504 7600 	add.w	r6, r4, #512	; 0x200
  415d04:	4631      	mov	r1, r6
  415d06:	4620      	mov	r0, r4
  415d08:	f7fd feea 	bl	413ae0 <wc_Sha512Final>

00415d0c <.LVL186>:
            if (ret != 0)
  415d0c:	4603      	mov	r3, r0
  415d0e:	2800      	cmp	r0, #0
  415d10:	d194      	bne.n	415c3c <.LVL157>
            ret = wc_Sha512Update(&hmac->hash.sha512, (byte*)hmac->opad,
  415d12:	2280      	movs	r2, #128	; 0x80
  415d14:	f504 71c0 	add.w	r1, r4, #384	; 0x180
  415d18:	4620      	mov	r0, r4

00415d1a <.LVL187>:
  415d1a:	f002 f90f 	bl	417f3c <.LFE169>

00415d1e <.LVL188>:
            if (ret != 0)
  415d1e:	4603      	mov	r3, r0
  415d20:	2800      	cmp	r0, #0
  415d22:	d18b      	bne.n	415c3c <.LVL157>
            ret = wc_Sha512Update(&hmac->hash.sha512, (byte*)hmac->innerHash,
  415d24:	2240      	movs	r2, #64	; 0x40
  415d26:	4631      	mov	r1, r6
  415d28:	4620      	mov	r0, r4

00415d2a <.LVL189>:
  415d2a:	f002 f907 	bl	417f3c <.LFE169>

00415d2e <.LVL190>:
            if (ret != 0)
  415d2e:	4603      	mov	r3, r0
  415d30:	2800      	cmp	r0, #0
  415d32:	d183      	bne.n	415c3c <.LVL157>
            ret = wc_Sha512Final(&hmac->hash.sha512, hash);
  415d34:	4629      	mov	r1, r5
  415d36:	4620      	mov	r0, r4

00415d38 <.LVL191>:
  415d38:	f7fd fed2 	bl	413ae0 <wc_Sha512Final>

00415d3c <.LVL192>:
  415d3c:	4603      	mov	r3, r0

00415d3e <.LVL193>:
            break;
  415d3e:	e779      	b.n	415c34 <.LVL156>

00415d40 <.LVL194>:
        return BAD_FUNC_ARG;
  415d40:	f06f 03ac 	mvn.w	r3, #172	; 0xac
  415d44:	e77a      	b.n	415c3c <.LVL157>

00415d46 <.LVL195>:
            ret = BAD_FUNC_ARG;
  415d46:	f06f 03ac 	mvn.w	r3, #172	; 0xac
  415d4a:	e777      	b.n	415c3c <.LVL157>

00415d4c <.LCFI6>:
        return BAD_FUNC_ARG;
  415d4c:	f06f 03ac 	mvn.w	r3, #172	; 0xac
}
  415d50:	4618      	mov	r0, r3

00415d52 <.LVL197>:
  415d52:	4770      	bx	lr

Disassembly of section .text.aes_test%115:

00415d54 <aes_test>:
{
  415d54:	b5f0      	push	{r4, r5, r6, r7, lr}

00415d56 <.LCFI53>:
  415d56:	f2ad 4d44 	subw	sp, sp, #1092	; 0x444

00415d5a <.LCFI54>:
    const byte msg[] = { /* "now is the time for all " w/o trailing 0 */
  415d5a:	4c5e      	ldr	r4, [pc, #376]	; (415ed4 <.LCFI55+0x2>)
  415d5c:	ad58      	add	r5, sp, #352	; 0x160
  415d5e:	f8d4 0708 	ldr.w	r0, [r4, #1800]	; 0x708
  415d62:	f8d4 170c 	ldr.w	r1, [r4, #1804]	; 0x70c
  415d66:	f8d4 2710 	ldr.w	r2, [r4, #1808]	; 0x710
  415d6a:	f8d4 3714 	ldr.w	r3, [r4, #1812]	; 0x714
  415d6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    const byte verify[] =
  415d70:	ad54      	add	r5, sp, #336	; 0x150
  415d72:	f8d4 0718 	ldr.w	r0, [r4, #1816]	; 0x718
  415d76:	f8d4 171c 	ldr.w	r1, [r4, #1820]	; 0x71c
  415d7a:	f8d4 2720 	ldr.w	r2, [r4, #1824]	; 0x720
  415d7e:	f8d4 3724 	ldr.w	r3, [r4, #1828]	; 0x724
  415d82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    byte key[] = "0123456789abcdef   ";  /* align */
  415d84:	ad4f      	add	r5, sp, #316	; 0x13c
  415d86:	f504 66e5 	add.w	r6, r4, #1832	; 0x728
  415d8a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  415d8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  415d8e:	6833      	ldr	r3, [r6, #0]
  415d90:	602b      	str	r3, [r5, #0]
    byte iv[]  = "1234567890abcdef   ";  /* align */
  415d92:	ad4a      	add	r5, sp, #296	; 0x128
  415d94:	f204 743c 	addw	r4, r4, #1852	; 0x73c
  415d98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  415d9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  415d9c:	6823      	ldr	r3, [r4, #0]
  415d9e:	602b      	str	r3, [r5, #0]
    CRYPT_AES_KeySet(&enc, key, AES_BLOCK_SIZE, iv, AES_ENCRYPTION);
  415da0:	2300      	movs	r3, #0
  415da2:	9300      	str	r3, [sp, #0]
  415da4:	ab4a      	add	r3, sp, #296	; 0x128
  415da6:	2210      	movs	r2, #16
  415da8:	a94f      	add	r1, sp, #316	; 0x13c
  415daa:	a8b6      	add	r0, sp, #728	; 0x2d8
  415dac:	f008 fbbf 	bl	41e52e <.LFE1>

00415db0 <.LVL110>:
    CRYPT_AES_KeySet(&dec, key, AES_BLOCK_SIZE, iv, AES_DECRYPTION);
  415db0:	2301      	movs	r3, #1
  415db2:	9300      	str	r3, [sp, #0]
  415db4:	ab4a      	add	r3, sp, #296	; 0x128
  415db6:	2210      	movs	r2, #16
  415db8:	a94f      	add	r1, sp, #316	; 0x13c
  415dba:	a85c      	add	r0, sp, #368	; 0x170
  415dbc:	f008 fbb7 	bl	41e52e <.LFE1>

00415dc0 <.LVL111>:
    CRYPT_AES_CBC_Encrypt(&enc, cipher, msg,   AES_BLOCK_SIZE);
  415dc0:	2310      	movs	r3, #16
  415dc2:	aa58      	add	r2, sp, #352	; 0x160
  415dc4:	a93a      	add	r1, sp, #232	; 0xe8
  415dc6:	a8b6      	add	r0, sp, #728	; 0x2d8
  415dc8:	f008 fc3e 	bl	41e648 <.LFE183>

00415dcc <.LVL112>:
    CRYPT_AES_CBC_Decrypt(&dec, plain, verify, AES_BLOCK_SIZE);
  415dcc:	2310      	movs	r3, #16
  415dce:	aa54      	add	r2, sp, #336	; 0x150
  415dd0:	a92a      	add	r1, sp, #168	; 0xa8
  415dd2:	a85c      	add	r0, sp, #368	; 0x170
  415dd4:	f008 fc47 	bl	41e666 <.LFE186>

00415dd8 <.LVL113>:
    appData.aes_cbc_test_result = numCbcSubTests;
  415dd8:	2202      	movs	r2, #2
  415dda:	4b3f      	ldr	r3, [pc, #252]	; (415ed8 <.LCFI55+0x6>)
  415ddc:	635a      	str	r2, [r3, #52]	; 0x34
    if (!(memcmp(plain, msg, AES_BLOCK_SIZE)))
  415dde:	2210      	movs	r2, #16
  415de0:	a958      	add	r1, sp, #352	; 0x160
  415de2:	a82a      	add	r0, sp, #168	; 0xa8
  415de4:	f006 fe30 	bl	41ca48 <memcmp>

00415de8 <.LVL114>:
  415de8:	b910      	cbnz	r0, 415df0 <.LVL114+0x8>
        appData.aes_cbc_test_result--;
  415dea:	2201      	movs	r2, #1
  415dec:	4b3a      	ldr	r3, [pc, #232]	; (415ed8 <.LCFI55+0x6>)
  415dee:	635a      	str	r2, [r3, #52]	; 0x34
    if (!(memcmp(cipher, verify, AES_BLOCK_SIZE)))
  415df0:	2210      	movs	r2, #16
  415df2:	a954      	add	r1, sp, #336	; 0x150
  415df4:	a83a      	add	r0, sp, #232	; 0xe8
  415df6:	f006 fe27 	bl	41ca48 <memcmp>

00415dfa <.LVL115>:
  415dfa:	b918      	cbnz	r0, 415e04 <.LBB2>
        appData.aes_cbc_test_result--;
  415dfc:	4a36      	ldr	r2, [pc, #216]	; (415ed8 <.LCFI55+0x6>)
  415dfe:	6b53      	ldr	r3, [r2, #52]	; 0x34
  415e00:	3b01      	subs	r3, #1
  415e02:	6353      	str	r3, [r2, #52]	; 0x34

00415e04 <.LBB2>:
        const byte ctrKey[] =
  415e04:	4d33      	ldr	r5, [pc, #204]	; (415ed4 <.LCFI55+0x2>)
  415e06:	ac02      	add	r4, sp, #8
  415e08:	f8d5 0750 	ldr.w	r0, [r5, #1872]	; 0x750
  415e0c:	f8d5 1754 	ldr.w	r1, [r5, #1876]	; 0x754
  415e10:	f8d5 2758 	ldr.w	r2, [r5, #1880]	; 0x758
  415e14:	f8d5 375c 	ldr.w	r3, [r5, #1884]	; 0x75c
  415e18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        const byte ctrIv[] =
  415e1a:	ac06      	add	r4, sp, #24
  415e1c:	f8d5 0760 	ldr.w	r0, [r5, #1888]	; 0x760
  415e20:	f8d5 1764 	ldr.w	r1, [r5, #1892]	; 0x764
  415e24:	f8d5 2768 	ldr.w	r2, [r5, #1896]	; 0x768
  415e28:	f8d5 376c 	ldr.w	r3, [r5, #1900]	; 0x76c
  415e2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        const byte ctrPlain[] =
  415e2e:	f505 64ee 	add.w	r4, r5, #1904	; 0x770
  415e32:	af0a      	add	r7, sp, #40	; 0x28
  415e34:	f505 65f6 	add.w	r5, r5, #1968	; 0x7b0
  415e38:	463e      	mov	r6, r7
  415e3a:	6820      	ldr	r0, [r4, #0]
  415e3c:	6861      	ldr	r1, [r4, #4]
  415e3e:	68a2      	ldr	r2, [r4, #8]
  415e40:	68e3      	ldr	r3, [r4, #12]
  415e42:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  415e44:	3410      	adds	r4, #16
  415e46:	4637      	mov	r7, r6
  415e48:	42ac      	cmp	r4, r5
  415e4a:	d1f5      	bne.n	415e38 <.LBB2+0x34>
        const byte ctrCipher[] =
  415e4c:	4e21      	ldr	r6, [pc, #132]	; (415ed4 <.LCFI55+0x2>)
  415e4e:	f506 64f6 	add.w	r4, r6, #1968	; 0x7b0
  415e52:	af1a      	add	r7, sp, #104	; 0x68
  415e54:	f506 66fe 	add.w	r6, r6, #2032	; 0x7f0
  415e58:	463d      	mov	r5, r7
  415e5a:	6820      	ldr	r0, [r4, #0]
  415e5c:	6861      	ldr	r1, [r4, #4]
  415e5e:	68a2      	ldr	r2, [r4, #8]
  415e60:	68e3      	ldr	r3, [r4, #12]
  415e62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  415e64:	3410      	adds	r4, #16
  415e66:	462f      	mov	r7, r5
  415e68:	42b4      	cmp	r4, r6
  415e6a:	d1f5      	bne.n	415e58 <.LBB2+0x54>
        CRYPT_AES_KeySet(&enc, ctrKey, AES_BLOCK_SIZE, ctrIv, AES_ENCRYPTION);
  415e6c:	2400      	movs	r4, #0
  415e6e:	9400      	str	r4, [sp, #0]
  415e70:	ab06      	add	r3, sp, #24
  415e72:	2210      	movs	r2, #16
  415e74:	a902      	add	r1, sp, #8
  415e76:	a8b6      	add	r0, sp, #728	; 0x2d8
  415e78:	f008 fb59 	bl	41e52e <.LFE1>

00415e7c <.LVL116>:
        CRYPT_AES_KeySet(&dec, ctrKey, AES_BLOCK_SIZE, ctrIv, AES_ENCRYPTION);
  415e7c:	9400      	str	r4, [sp, #0]
  415e7e:	ab06      	add	r3, sp, #24
  415e80:	2210      	movs	r2, #16
  415e82:	a902      	add	r1, sp, #8
  415e84:	a85c      	add	r0, sp, #368	; 0x170
  415e86:	f008 fb52 	bl	41e52e <.LFE1>

00415e8a <.LVL117>:
        CRYPT_AES_CTR_Encrypt(&enc, cipher, ctrPlain, AES_BLOCK_SIZE*4);
  415e8a:	2340      	movs	r3, #64	; 0x40
  415e8c:	aa0a      	add	r2, sp, #40	; 0x28
  415e8e:	a93a      	add	r1, sp, #232	; 0xe8
  415e90:	a8b6      	add	r0, sp, #728	; 0x2d8
  415e92:	f008 fbf7 	bl	41e684 <.LFE187>

00415e96 <.LVL118>:
        CRYPT_AES_CTR_Encrypt(&dec, plain, ctrCipher, AES_BLOCK_SIZE*4);
  415e96:	2340      	movs	r3, #64	; 0x40
  415e98:	aa1a      	add	r2, sp, #104	; 0x68
  415e9a:	a92a      	add	r1, sp, #168	; 0xa8
  415e9c:	a85c      	add	r0, sp, #368	; 0x170
  415e9e:	f008 fbf1 	bl	41e684 <.LFE187>

00415ea2 <.LVL119>:
        appData.aes_ctr_test_result = numCtrSubTests;
  415ea2:	2202      	movs	r2, #2
  415ea4:	4b0c      	ldr	r3, [pc, #48]	; (415ed8 <.LCFI55+0x6>)
  415ea6:	639a      	str	r2, [r3, #56]	; 0x38
        if (!(memcmp(plain, ctrPlain, AES_BLOCK_SIZE*4)))
  415ea8:	2240      	movs	r2, #64	; 0x40
  415eaa:	a90a      	add	r1, sp, #40	; 0x28
  415eac:	a82a      	add	r0, sp, #168	; 0xa8
  415eae:	f006 fdcb 	bl	41ca48 <memcmp>

00415eb2 <.LVL120>:
  415eb2:	b910      	cbnz	r0, 415eba <.LVL120+0x8>
            appData.aes_ctr_test_result--;
  415eb4:	2201      	movs	r2, #1
  415eb6:	4b08      	ldr	r3, [pc, #32]	; (415ed8 <.LCFI55+0x6>)
  415eb8:	639a      	str	r2, [r3, #56]	; 0x38
        if (!(memcmp(cipher, ctrCipher, AES_BLOCK_SIZE*4)))
  415eba:	2240      	movs	r2, #64	; 0x40
  415ebc:	a91a      	add	r1, sp, #104	; 0x68
  415ebe:	a83a      	add	r0, sp, #232	; 0xe8
  415ec0:	f006 fdc2 	bl	41ca48 <memcmp>

00415ec4 <.LVL121>:
  415ec4:	b918      	cbnz	r0, 415ece <.LBE2>
            appData.aes_ctr_test_result--;
  415ec6:	4a04      	ldr	r2, [pc, #16]	; (415ed8 <.LCFI55+0x6>)
  415ec8:	6b93      	ldr	r3, [r2, #56]	; 0x38
  415eca:	3b01      	subs	r3, #1
  415ecc:	6393      	str	r3, [r2, #56]	; 0x38

00415ece <.LBE2>:
}
  415ece:	f20d 4d44 	addw	sp, sp, #1092	; 0x444

00415ed2 <.LCFI55>:
  415ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  415ed4:	0040accc 	.word	0x0040accc
  415ed8:	20417598 	.word	0x20417598

Disassembly of section .text.fp_sqr_comba%116:

00415edc <fp_sqr_comba>:
{
  415edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00415ee0 <.LCFI77>:
  415ee0:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c

00415ee4 <.LCFI78>:
  415ee4:	9005      	str	r0, [sp, #20]
  415ee6:	910b      	str	r1, [sp, #44]	; 0x2c
  pa = A->used + A->used;
  415ee8:	6803      	ldr	r3, [r0, #0]
  415eea:	005b      	lsls	r3, r3, #1

00415eec <.LVL505>:
  415eec:	2b87      	cmp	r3, #135	; 0x87
  415eee:	bfa8      	it	ge
  415ef0:	2387      	movge	r3, #135	; 0x87

00415ef2 <.LVL506>:
  415ef2:	9308      	str	r3, [sp, #32]

00415ef4 <.LVL507>:
  if (A == B) {
  415ef4:	4288      	cmp	r0, r1
  415ef6:	d012      	beq.n	415f1e <.LBB70>
     fp_zero(B);
  415ef8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  415efa:	4620      	mov	r0, r4

00415efc <.LVL508>:
  415efc:	f008 fe16 	bl	41eb2c <.LFE154>

00415f00 <.LVL509>:
     dst = B;
  415f00:	940a      	str	r4, [sp, #40]	; 0x28

00415f02 <.LVL510>:
  for (ix = 0; ix < pa; ix++) {
  415f02:	9b08      	ldr	r3, [sp, #32]
  415f04:	2b00      	cmp	r3, #0
  415f06:	dd7c      	ble.n	416002 <.LBE69>
  415f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  415f0a:	3304      	adds	r3, #4
  415f0c:	9304      	str	r3, [sp, #16]
  415f0e:	f04f 0a00 	mov.w	sl, #0
  415f12:	46d1      	mov	r9, sl
  415f14:	46d3      	mov	fp, sl

00415f16 <.LBB67>:
      tmpx = A->dp + tx;
  415f16:	9b05      	ldr	r3, [sp, #20]
  415f18:	3308      	adds	r3, #8
  415f1a:	9309      	str	r3, [sp, #36]	; 0x24
  415f1c:	e014      	b.n	415f48 <.LBB73>

00415f1e <.LBB70>:
    fp_zero(a);
  415f1e:	a80c      	add	r0, sp, #48	; 0x30

00415f20 <.LVL512>:
  415f20:	f008 fe04 	bl	41eb2c <.LFE154>

00415f24 <.LBE70>:
     dst = &tmp;
  415f24:	ab0c      	add	r3, sp, #48	; 0x30

00415f26 <.LVL514>:
  415f26:	930a      	str	r3, [sp, #40]	; 0x28
  415f28:	e7eb      	b.n	415f02 <.LVL510>

00415f2a <.LBB72>:
      COMBA_FORWARD;
  415f2a:	f04f 0e00 	mov.w	lr, #0
  415f2e:	e04d      	b.n	415fcc <.LVL541>

00415f30 <.LVL516>:
  415f30:	4649      	mov	r1, r9
  415f32:	46d1      	mov	r9, sl
  415f34:	46f2      	mov	sl, lr

00415f36 <.LVL517>:
      COMBA_STORE(dst->dp[ix]);
  415f36:	9b04      	ldr	r3, [sp, #16]
  415f38:	f843 1f04 	str.w	r1, [r3, #4]!

00415f3c <.LVL518>:
  415f3c:	9304      	str	r3, [sp, #16]

00415f3e <.LBE72>:
  for (ix = 0; ix < pa; ix++) {
  415f3e:	f10b 0b01 	add.w	fp, fp, #1
  415f42:	9b08      	ldr	r3, [sp, #32]
  415f44:	455b      	cmp	r3, fp
  415f46:	d05c      	beq.n	416002 <.LBE69>

00415f48 <.LBB73>:
      ty = MIN(A->used-1, ix);
  415f48:	9b05      	ldr	r3, [sp, #20]
  415f4a:	6819      	ldr	r1, [r3, #0]
  415f4c:	1e4b      	subs	r3, r1, #1
  415f4e:	455b      	cmp	r3, fp
  415f50:	bfa8      	it	ge
  415f52:	465b      	movge	r3, fp

00415f54 <.LVL521>:
      tx = ix - ty;
  415f54:	ebab 0003 	sub.w	r0, fp, r3

00415f58 <.LVL522>:
      tmpx = A->dp + tx;
  415f58:	9c09      	ldr	r4, [sp, #36]	; 0x24
  415f5a:	eb04 0880 	add.w	r8, r4, r0, lsl #2

00415f5e <.LVL523>:
      tmpy = A->dp + ty;
  415f5e:	eb04 0c83 	add.w	ip, r4, r3, lsl #2

00415f62 <.LVL524>:
      iy = MIN(A->used-tx, ty+1);
  415f62:	1c5a      	adds	r2, r3, #1
  415f64:	1a09      	subs	r1, r1, r0
  415f66:	4291      	cmp	r1, r2
  415f68:	bfa8      	it	ge
  415f6a:	4611      	movge	r1, r2

00415f6c <.LVL525>:
      iy = MIN(iy, (ty-tx+1)>>1);
  415f6c:	1a1a      	subs	r2, r3, r0
  415f6e:	3201      	adds	r2, #1
  415f70:	1052      	asrs	r2, r2, #1
  415f72:	428a      	cmp	r2, r1
  415f74:	bfa8      	it	ge
  415f76:	460a      	movge	r2, r1

00415f78 <.LVL526>:
      for (iz = 0; iz < iy; iz++) {
  415f78:	2a00      	cmp	r2, #0
  415f7a:	ddd6      	ble.n	415f2a <.LBB72>
  415f7c:	f04f 0e00 	mov.w	lr, #0
  415f80:	4673      	mov	r3, lr

00415f82 <.LBB68>:
          SQRADD2(*tmpx++, *tmpy--);
  415f82:	f858 0b04 	ldr.w	r0, [r8], #4

00415f86 <.LVL528>:
  415f86:	f85c 1904 	ldr.w	r1, [ip], #-4

00415f8a <.LVL529>:
  415f8a:	fba0 0101 	umull	r0, r1, r0, r1

00415f8e <.LVL530>:
  415f8e:	eb10 0409 	adds.w	r4, r0, r9
  415f92:	f141 0500 	adc.w	r5, r1, #0

00415f96 <.LVL531>:
  415f96:	9500      	str	r5, [sp, #0]
  415f98:	2600      	movs	r6, #0
  415f9a:	9601      	str	r6, [sp, #4]
  415f9c:	e9dd 6700 	ldrd	r6, r7, [sp]
  415fa0:	eb16 060a 	adds.w	r6, r6, sl
  415fa4:	f147 0700 	adc.w	r7, r7, #0

00415fa8 <.LVL532>:
  415fa8:	1900      	adds	r0, r0, r4

00415faa <.LVL533>:
  415faa:	f141 0100 	adc.w	r1, r1, #0

00415fae <.LVL534>:
  415fae:	4681      	mov	r9, r0

00415fb0 <.LVL535>:
  415fb0:	9102      	str	r1, [sp, #8]
  415fb2:	2100      	movs	r1, #0
  415fb4:	9103      	str	r1, [sp, #12]
  415fb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]

00415fba <.LVL536>:
  415fba:	1980      	adds	r0, r0, r6
  415fbc:	f141 0100 	adc.w	r1, r1, #0

00415fc0 <.LVL537>:
  415fc0:	4682      	mov	sl, r0

00415fc2 <.LVL538>:
  415fc2:	4439      	add	r1, r7
  415fc4:	448e      	add	lr, r1

00415fc6 <.LBE68>:
      for (iz = 0; iz < iy; iz++) {
  415fc6:	3301      	adds	r3, #1

00415fc8 <.LVL540>:
  415fc8:	429a      	cmp	r2, r3
  415fca:	d1da      	bne.n	415f82 <.LBB68>

00415fcc <.LVL541>:
      if ((ix&1) == 0) {
  415fcc:	f01b 0f01 	tst.w	fp, #1
  415fd0:	d1ae      	bne.n	415f30 <.LVL516>

00415fd2 <.LBB69>:
          SQRADD(A->dp[ix>>1], A->dp[ix>>1]);
  415fd2:	ea4f 036b 	mov.w	r3, fp, asr #1
  415fd6:	3302      	adds	r3, #2
  415fd8:	9a05      	ldr	r2, [sp, #20]

00415fda <.LVL542>:
  415fda:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
  415fde:	464a      	mov	r2, r9
  415fe0:	2300      	movs	r3, #0
  415fe2:	fbe1 2301 	umlal	r2, r3, r1, r1

00415fe6 <.LVL543>:
  415fe6:	4611      	mov	r1, r2

00415fe8 <.LVL544>:
  415fe8:	9306      	str	r3, [sp, #24]
  415fea:	2300      	movs	r3, #0
  415fec:	9307      	str	r3, [sp, #28]
  415fee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]

00415ff2 <.LVL545>:
  415ff2:	eb12 020a 	adds.w	r2, r2, sl
  415ff6:	f143 0300 	adc.w	r3, r3, #0

00415ffa <.LVL546>:
  415ffa:	4691      	mov	r9, r2

00415ffc <.LVL547>:
  415ffc:	eb0e 0a03 	add.w	sl, lr, r3

00416000 <.LVL548>:
  416000:	e799      	b.n	415f36 <.LVL517>

00416002 <.LBE69>:
  dst->used = pa;
  416002:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  416004:	4622      	mov	r2, r4
  416006:	9908      	ldr	r1, [sp, #32]
  416008:	460b      	mov	r3, r1
  41600a:	6011      	str	r1, [r2, #0]
  fp_clamp (dst);
  41600c:	b319      	cbz	r1, 416056 <.LCFI80+0x6>
  41600e:	1e4a      	subs	r2, r1, #1
  416010:	3301      	adds	r3, #1
  416012:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
  416016:	b963      	cbnz	r3, 416032 <.LBE69+0x30>
  416018:	eb04 0381 	add.w	r3, r4, r1, lsl #2
  41601c:	3304      	adds	r3, #4
  41601e:	e000      	b.n	416022 <.LBE69+0x20>
  416020:	4602      	mov	r2, r0
  416022:	b1aa      	cbz	r2, 416050 <.LCFI80>
  416024:	1e50      	subs	r0, r2, #1
  416026:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  41602a:	2900      	cmp	r1, #0
  41602c:	d0f8      	beq.n	416020 <.LBE69+0x1e>
  41602e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  416030:	601a      	str	r2, [r3, #0]
  416032:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  416034:	685b      	ldr	r3, [r3, #4]
  416036:	990a      	ldr	r1, [sp, #40]	; 0x28
  416038:	460a      	mov	r2, r1
  41603a:	604b      	str	r3, [r1, #4]
  if (dst != B) {
  41603c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  41603e:	428a      	cmp	r2, r1
  416040:	d002      	beq.n	416048 <.LVL550>
     fp_copy(dst, B);
  416042:	4610      	mov	r0, r2
  416044:	f008 fa1c 	bl	41e480 <.LFE185>

00416048 <.LVL550>:
}
  416048:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c

0041604c <.LCFI79>:
  41604c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00416050 <.LCFI80>:
  416050:	2300      	movs	r3, #0
  416052:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  416054:	6013      	str	r3, [r2, #0]
  fp_clamp (dst);
  416056:	2300      	movs	r3, #0
  416058:	e7ed      	b.n	416036 <.LBE69+0x34>

Disassembly of section .text.fp_montgomery_reduce%117:

0041605a <fp_montgomery_reduce>:
{
  41605a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0041605e <.LCFI19>:
  41605e:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234

00416062 <.LCFI20>:
   if (m->used > (FP_SIZE/2)) {
  416062:	f8d1 b000 	ldr.w	fp, [r1]
  416066:	f1bb 0f44 	cmp.w	fp, #68	; 0x44
  41606a:	dd03      	ble.n	416074 <.LCFI22>

0041606c <.LVL161>:
}
  41606c:	f50d 7d0d 	add.w	sp, sp, #564	; 0x234

00416070 <.LCFI21>:
  416070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00416074 <.LCFI22>:
  416074:	4691      	mov	r9, r2
  416076:	4688      	mov	r8, r1
  416078:	4604      	mov	r4, r0
  41607a:	9000      	str	r0, [sp, #0]
   XMEMSET(c, 0, sizeof(c));
  41607c:	f44f 7209 	mov.w	r2, #548	; 0x224

00416080 <.LVL163>:
  416080:	2100      	movs	r1, #0

00416082 <.LVL164>:
  416082:	a803      	add	r0, sp, #12

00416084 <.LVL165>:
  416084:	f004 fab4 	bl	41a5f0 <.LFE157>

00416088 <.LVL166>:
   oldused = a->used;
  416088:	6823      	ldr	r3, [r4, #0]
  41608a:	4619      	mov	r1, r3
  41608c:	9301      	str	r3, [sp, #4]

0041608e <.LVL167>:
   for (x = 0; x < oldused; x++) {
  41608e:	2b00      	cmp	r3, #0
  416090:	dd0b      	ble.n	4160aa <.LVL169>
  416092:	4623      	mov	r3, r4
  416094:	3304      	adds	r3, #4
  416096:	aa02      	add	r2, sp, #8
  416098:	1c48      	adds	r0, r1, #1
  41609a:	eb04 0080 	add.w	r0, r4, r0, lsl #2

0041609e <.LVL168>:
       c[x] = a->dp[x];
  41609e:	f853 1f04 	ldr.w	r1, [r3, #4]!
  4160a2:	f842 1f04 	str.w	r1, [r2, #4]!
   for (x = 0; x < oldused; x++) {
  4160a6:	4283      	cmp	r3, r0
  4160a8:	d1f9      	bne.n	41609e <.LVL168>

004160aa <.LVL169>:
   for (x = 0; x < pa; x++) {
  4160aa:	f1bb 0f00 	cmp.w	fp, #0
  4160ae:	dd30      	ble.n	416112 <.LBE9>
  4160b0:	af02      	add	r7, sp, #8
  4160b2:	ea4f 038b 	mov.w	r3, fp, lsl #2
  4160b6:	aa03      	add	r2, sp, #12
  4160b8:	eb02 0e03 	add.w	lr, r2, r3
  4160bc:	3b04      	subs	r3, #4
  4160be:	eb02 0c03 	add.w	ip, r2, r3

004160c2 <.LBB6>:
           PROPCARRY;
  4160c2:	f04f 0a01 	mov.w	sl, #1
  4160c6:	e00a      	b.n	4160de <.LBB9>

004160c8 <.LVL170>:
  4160c8:	4652      	mov	r2, sl

004160ca <.LVL171>:
  4160ca:	680b      	ldr	r3, [r1, #0]
  4160cc:	4413      	add	r3, r2
  4160ce:	f841 3b04 	str.w	r3, [r1], #4

004160d2 <.LBE7>:
       while (cy) {
  4160d2:	4293      	cmp	r3, r2
  4160d4:	d3f8      	bcc.n	4160c8 <.LVL170>

004160d6 <.LVL173>:
  4160d6:	f10e 0e04 	add.w	lr, lr, #4

004160da <.LBE6>:
   for (x = 0; x < pa; x++) {
  4160da:	4567      	cmp	r7, ip
  4160dc:	d019      	beq.n	416112 <.LBE9>

004160de <.LBB9>:
       LOOP_START;
  4160de:	f857 5f04 	ldr.w	r5, [r7, #4]!
  4160e2:	fb05 f509 	mul.w	r5, r5, r9

004160e6 <.LVL175>:
       tmpm = m->dp;
  4160e6:	f108 0008 	add.w	r0, r8, #8

004160ea <.LVL176>:
  4160ea:	4676      	mov	r6, lr
  4160ec:	4639      	mov	r1, r7
  4160ee:	2200      	movs	r2, #0

004160f0 <.LBB8>:
          INNERMUL;
  4160f0:	f850 4b04 	ldr.w	r4, [r0], #4

004160f4 <.LVL178>:
  4160f4:	2300      	movs	r3, #0
  4160f6:	fbe5 2304 	umlal	r2, r3, r5, r4

004160fa <.LVL179>:
  4160fa:	680c      	ldr	r4, [r1, #0]
  4160fc:	1912      	adds	r2, r2, r4
  4160fe:	f143 0300 	adc.w	r3, r3, #0

00416102 <.LVL180>:
  416102:	f841 2b04 	str.w	r2, [r1], #4

00416106 <.LVL181>:
  416106:	461a      	mov	r2, r3

00416108 <.LBE8>:
       for (; y < pa; y++) {
  416108:	42b1      	cmp	r1, r6
  41610a:	d1f1      	bne.n	4160f0 <.LBB8>

0041610c <.LVL183>:
       while (cy) {
  41610c:	2b00      	cmp	r3, #0
  41610e:	d1dc      	bne.n	4160ca <.LVL171>
  416110:	e7e1      	b.n	4160d6 <.LVL173>

00416112 <.LBE9>:
  _c   = c + pa;
  416112:	ea4f 018b 	mov.w	r1, fp, lsl #2
  416116:	ab03      	add	r3, sp, #12
  416118:	1858      	adds	r0, r3, r1

0041611a <.LVL185>:
  tmpm = a->dp;
  41611a:	9c00      	ldr	r4, [sp, #0]
  41611c:	4623      	mov	r3, r4
  41611e:	f104 0208 	add.w	r2, r4, #8

00416122 <.LVL186>:
  for (x = 0; x < pa+1; x++) {
  416122:	f10b 0601 	add.w	r6, fp, #1
  416126:	2e00      	cmp	r6, #0
  416128:	dd22      	ble.n	416170 <.LVL198>
  41612a:	3304      	adds	r3, #4
  41612c:	1855      	adds	r5, r2, r1

0041612e <.LVL187>:
     *tmpm++ = *_c++;
  41612e:	f850 4b04 	ldr.w	r4, [r0], #4

00416132 <.LVL188>:
  416132:	f843 4f04 	str.w	r4, [r3, #4]!

00416136 <.LVL189>:
  for (x = 0; x < pa+1; x++) {
  416136:	42ab      	cmp	r3, r5
  416138:	d1f9      	bne.n	41612e <.LVL187>
  41613a:	1d0b      	adds	r3, r1, #4
  41613c:	441a      	add	r2, r3

0041613e <.LVL190>:
  for (; x < oldused; x++) {
  41613e:	9b01      	ldr	r3, [sp, #4]
  416140:	42b3      	cmp	r3, r6
  416142:	dd3a      	ble.n	4161ba <.LVL202>
  for (x = 0; x < pa+1; x++) {
  416144:	4633      	mov	r3, r6

00416146 <.LVL191>:
     *tmpm++ = 0;
  416146:	2000      	movs	r0, #0

00416148 <.LVL192>:
  416148:	9c01      	ldr	r4, [sp, #4]

0041614a <.LVL193>:
  41614a:	f842 0b04 	str.w	r0, [r2], #4

0041614e <.LVL194>:
  for (; x < oldused; x++) {
  41614e:	3301      	adds	r3, #1

00416150 <.LVL195>:
  416150:	429c      	cmp	r4, r3
  416152:	d1fa      	bne.n	41614a <.LVL193>

00416154 <.LVL196>:
  a->used = pa+1;
  416154:	9b00      	ldr	r3, [sp, #0]
  416156:	601e      	str	r6, [r3, #0]
  fp_clamp(a);
  416158:	b1f6      	cbz	r6, 416198 <.LVL199+0x1e>
  41615a:	f10b 0302 	add.w	r3, fp, #2
  41615e:	9800      	ldr	r0, [sp, #0]
  416160:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  416164:	b993      	cbnz	r3, 41618c <.LVL199+0x12>
  416166:	f101 0308 	add.w	r3, r1, #8
  41616a:	4403      	add	r3, r0
  41616c:	465a      	mov	r2, fp

0041616e <.LVL197>:
  41616e:	e005      	b.n	41617c <.LVL199+0x2>

00416170 <.LVL198>:
  for (; x < oldused; x++) {
  416170:	9b01      	ldr	r3, [sp, #4]
  416172:	2b00      	cmp	r3, #0
  416174:	ddee      	ble.n	416154 <.LVL196>
  for (x = 0; x < pa+1; x++) {
  416176:	2300      	movs	r3, #0
  416178:	e7e5      	b.n	416146 <.LVL191>

0041617a <.LVL199>:
  fp_clamp(a);
  41617a:	4602      	mov	r2, r0
  41617c:	b14a      	cbz	r2, 416192 <.LVL199+0x18>
  41617e:	1e50      	subs	r0, r2, #1
  416180:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  416184:	2900      	cmp	r1, #0
  416186:	d0f8      	beq.n	41617a <.LVL199>
  416188:	9b00      	ldr	r3, [sp, #0]
  41618a:	601a      	str	r2, [r3, #0]
  41618c:	9b00      	ldr	r3, [sp, #0]
  41618e:	685b      	ldr	r3, [r3, #4]
  416190:	e003      	b.n	41619a <.LVL199+0x20>
  416192:	2300      	movs	r3, #0
  416194:	9a00      	ldr	r2, [sp, #0]
  416196:	6013      	str	r3, [r2, #0]
  416198:	2300      	movs	r3, #0
  41619a:	9c00      	ldr	r4, [sp, #0]
  41619c:	6063      	str	r3, [r4, #4]
  if (fp_cmp_mag (a, m) != FP_LT) {
  41619e:	4641      	mov	r1, r8
  4161a0:	4620      	mov	r0, r4
  4161a2:	f006 f9a0 	bl	41c4e6 <.LFE170>

004161a6 <.LVL200>:
  4161a6:	f1b0 3fff 	cmp.w	r0, #4294967295
  4161aa:	f43f af5f 	beq.w	41606c <.LVL161>
    s_fp_sub (a, m, a);
  4161ae:	4622      	mov	r2, r4
  4161b0:	4641      	mov	r1, r8
  4161b2:	4620      	mov	r0, r4
  4161b4:	f002 f81e 	bl	4181f4 <.LFE20>

004161b8 <.LVL201>:
  4161b8:	e758      	b.n	41606c <.LVL161>

004161ba <.LVL202>:
  a->used = pa+1;
  4161ba:	9b00      	ldr	r3, [sp, #0]
  4161bc:	601e      	str	r6, [r3, #0]
  4161be:	e7cc      	b.n	41615a <.LVL196+0x6>

Disassembly of section .text.rsa_test%118:

004161c0 <rsa_test>:
{
  4161c0:	b570      	push	{r4, r5, r6, lr}

004161c2 <.LCFI66>:
  4161c2:	f5ad 5d9c 	sub.w	sp, sp, #4992	; 0x1380

004161c6 <.LCFI67>:
  4161c6:	b084      	sub	sp, #16

004161c8 <.LCFI68>:
    word32 idx = 0;
  4161c8:	2200      	movs	r2, #0
  4161ca:	4b51      	ldr	r3, [pc, #324]	; (416310 <.LVL178>)
  4161cc:	f241 3190 	movw	r1, #5008	; 0x1390
  4161d0:	4469      	add	r1, sp
  4161d2:	50ca      	str	r2, [r1, r3]
    byte   in[] = "Everyone gets Friday off.";
  4161d4:	ac82      	add	r4, sp, #520	; 0x208
  4161d6:	4d4f      	ldr	r5, [pc, #316]	; (416314 <.LVL178+0x4>)
  4161d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4161da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4161dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  4161e0:	c403      	stmia	r4!, {r0, r1}
  4161e2:	8022      	strh	r2, [r4, #0]
    word32 inLen = (word32)strlen((char*)in);
  4161e4:	a882      	add	r0, sp, #520	; 0x208
  4161e6:	f002 f9cb 	bl	418580 <strlen>

004161ea <.LVL152>:
  4161ea:	4605      	mov	r5, r0

004161ec <.LVL153>:
    appData.rsa_test_result = 9;
  4161ec:	2209      	movs	r2, #9
  4161ee:	4b4a      	ldr	r3, [pc, #296]	; (416318 <.LVL178+0x8>)
  4161f0:	63da      	str	r2, [r3, #60]	; 0x3c
    tmp = (byte*)malloc(FOURK_BUF);
  4161f2:	f44f 5080 	mov.w	r0, #4096	; 0x1000

004161f6 <.LVL154>:
  4161f6:	f008 fd75 	bl	41ece4 <.LFE0>

004161fa <.LVL155>:
    if (tmp != NULL)
  4161fa:	4604      	mov	r4, r0
  4161fc:	b110      	cbz	r0, 416204 <.LVL155+0xa>
        appData.rsa_test_result--;
  4161fe:	2208      	movs	r2, #8
  416200:	4b45      	ldr	r3, [pc, #276]	; (416318 <.LVL178+0x8>)
  416202:	63da      	str	r2, [r3, #60]	; 0x3c
    XMEMCPY(tmp, client_key_der_2048, sizeof_client_key_der_2048);
  416204:	f44f 6695 	mov.w	r6, #1192	; 0x4a8
  416208:	4632      	mov	r2, r6
  41620a:	4944      	ldr	r1, [pc, #272]	; (41631c <.LVL178+0xc>)
  41620c:	4620      	mov	r0, r4

0041620e <.LVL156>:
  41620e:	f000 fb3b 	bl	416888 <memcpy>

00416212 <.LVL157>:
    wc_InitRsaKey(&key, 0);
  416212:	2100      	movs	r1, #0
  416214:	a88e      	add	r0, sp, #568	; 0x238
  416216:	f008 fdbb 	bl	41ed90 <.LFE14>

0041621a <.LVL158>:
    ret = wc_RsaPrivateKeyDecode(tmp, &idx, &key, (word32)bytes);
  41621a:	4633      	mov	r3, r6
  41621c:	aa8e      	add	r2, sp, #568	; 0x238
  41621e:	a989      	add	r1, sp, #548	; 0x224
  416220:	4620      	mov	r0, r4
  416222:	f001 fa99 	bl	417758 <.LFE28>

00416226 <.LVL159>:
    if (ret == 0) appData.rsa_test_result--;
  416226:	b918      	cbnz	r0, 416230 <.LVL159+0xa>
  416228:	4a3b      	ldr	r2, [pc, #236]	; (416318 <.LVL178+0x8>)
  41622a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  41622c:	3b01      	subs	r3, #1
  41622e:	63d3      	str	r3, [r2, #60]	; 0x3c
    ret = CRYPT_RNG_Initialize((CRYPT_RNG_CTX*)&rng);
  416230:	a88a      	add	r0, sp, #552	; 0x228

00416232 <.LVL160>:
  416232:	f008 fd17 	bl	41ec64 <.LFE169>

00416236 <.LVL161>:
    if (ret == 0) appData.rsa_test_result--;
  416236:	b918      	cbnz	r0, 416240 <.LVL161+0xa>
  416238:	4a37      	ldr	r2, [pc, #220]	; (416318 <.LVL178+0x8>)
  41623a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  41623c:	3b01      	subs	r3, #1
  41623e:	63d3      	str	r3, [r2, #60]	; 0x3c
    ret = wc_RsaPublicEncrypt(in, inLen, out, sizeof(out), &key, &rng);
  416240:	ab8a      	add	r3, sp, #552	; 0x228
  416242:	9301      	str	r3, [sp, #4]
  416244:	ab8e      	add	r3, sp, #568	; 0x238
  416246:	9300      	str	r3, [sp, #0]
  416248:	f44f 7380 	mov.w	r3, #256	; 0x100
  41624c:	aa42      	add	r2, sp, #264	; 0x108
  41624e:	4629      	mov	r1, r5
  416250:	a882      	add	r0, sp, #520	; 0x208

00416252 <.LVL162>:
  416252:	f008 f895 	bl	41e380 <wc_RsaPublicEncrypt>

00416256 <.LVL163>:
    if (ret >= 0) appData.rsa_test_result--;
  416256:	1e01      	subs	r1, r0, #0
  416258:	db03      	blt.n	416262 <.LVL163+0xc>
  41625a:	4a2f      	ldr	r2, [pc, #188]	; (416318 <.LVL178+0x8>)
  41625c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  41625e:	3b01      	subs	r3, #1
  416260:	63d3      	str	r3, [r2, #60]	; 0x3c
    ret = wc_RsaPrivateDecrypt(out, ret, plain, sizeof(plain), &key);
  416262:	ab8e      	add	r3, sp, #568	; 0x238
  416264:	9300      	str	r3, [sp, #0]
  416266:	f44f 7380 	mov.w	r3, #256	; 0x100
  41626a:	aa02      	add	r2, sp, #8
  41626c:	a842      	add	r0, sp, #264	; 0x108

0041626e <.LVL164>:
  41626e:	f007 ffe5 	bl	41e23c <.LFE210>

00416272 <.LVL165>:
    if (ret >= 0) appData.rsa_test_result--;
  416272:	2800      	cmp	r0, #0
  416274:	db03      	blt.n	41627e <.LVL165+0xc>
  416276:	4a28      	ldr	r2, [pc, #160]	; (416318 <.LVL178+0x8>)
  416278:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  41627a:	3b01      	subs	r3, #1
  41627c:	63d3      	str	r3, [r2, #60]	; 0x3c
    if (!(memcmp(plain, in, inLen))) appData.rsa_test_result--;
  41627e:	462a      	mov	r2, r5
  416280:	a982      	add	r1, sp, #520	; 0x208
  416282:	a802      	add	r0, sp, #8

00416284 <.LVL166>:
  416284:	f006 fbe0 	bl	41ca48 <memcmp>

00416288 <.LVL167>:
  416288:	b918      	cbnz	r0, 416292 <.LVL167+0xa>
  41628a:	4a23      	ldr	r2, [pc, #140]	; (416318 <.LVL178+0x8>)
  41628c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  41628e:	3b01      	subs	r3, #1
  416290:	63d3      	str	r3, [r2, #60]	; 0x3c
    ret = wc_RsaSSL_Sign(in, inLen, out, sizeof(out), &key, &rng);
  416292:	ab8a      	add	r3, sp, #552	; 0x228
  416294:	9301      	str	r3, [sp, #4]
  416296:	ab8e      	add	r3, sp, #568	; 0x238
  416298:	9300      	str	r3, [sp, #0]
  41629a:	f44f 7380 	mov.w	r3, #256	; 0x100
  41629e:	aa42      	add	r2, sp, #264	; 0x108
  4162a0:	4629      	mov	r1, r5
  4162a2:	a882      	add	r0, sp, #520	; 0x208
  4162a4:	f007 ffde 	bl	41e264 <.LFE188>

004162a8 <.LVL168>:
    if (ret >= 0) appData.rsa_test_result--;
  4162a8:	1e06      	subs	r6, r0, #0
  4162aa:	db03      	blt.n	4162b4 <.LVL168+0xc>
  4162ac:	4a1a      	ldr	r2, [pc, #104]	; (416318 <.LVL178+0x8>)
  4162ae:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  4162b0:	3b01      	subs	r3, #1
  4162b2:	63d3      	str	r3, [r2, #60]	; 0x3c
    memset(plain, 0, sizeof(plain));
  4162b4:	f44f 7580 	mov.w	r5, #256	; 0x100

004162b8 <.LVL169>:
  4162b8:	462a      	mov	r2, r5
  4162ba:	2100      	movs	r1, #0
  4162bc:	a802      	add	r0, sp, #8

004162be <.LVL170>:
  4162be:	f004 f997 	bl	41a5f0 <.LFE157>

004162c2 <.LVL171>:
    ret = wc_RsaSSL_Verify(out, ret, plain, sizeof(plain), &key);
  4162c2:	ab8e      	add	r3, sp, #568	; 0x238
  4162c4:	9300      	str	r3, [sp, #0]
  4162c6:	462b      	mov	r3, r5
  4162c8:	aa02      	add	r2, sp, #8
  4162ca:	4631      	mov	r1, r6
  4162cc:	a842      	add	r0, sp, #264	; 0x108
  4162ce:	f007 fe75 	bl	41dfbc <L0>

004162d2 <.LVL172>:
    if (ret >= 0) appData.rsa_test_result--;
  4162d2:	1e02      	subs	r2, r0, #0
  4162d4:	db03      	blt.n	4162de <.LVL172+0xc>
  4162d6:	4910      	ldr	r1, [pc, #64]	; (416318 <.LVL178+0x8>)
  4162d8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  4162da:	3b01      	subs	r3, #1
  4162dc:	63cb      	str	r3, [r1, #60]	; 0x3c
    if (!(memcmp(plain, in, ret))) appData.rsa_test_result--;
  4162de:	a982      	add	r1, sp, #520	; 0x208
  4162e0:	a802      	add	r0, sp, #8

004162e2 <.LVL173>:
  4162e2:	f006 fbb1 	bl	41ca48 <memcmp>

004162e6 <.LVL174>:
  4162e6:	b918      	cbnz	r0, 4162f0 <.LVL174+0xa>
  4162e8:	4a0b      	ldr	r2, [pc, #44]	; (416318 <.LVL178+0x8>)
  4162ea:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  4162ec:	3b01      	subs	r3, #1
  4162ee:	63d3      	str	r3, [r2, #60]	; 0x3c
    XMEMCPY(tmp, client_cert_der_2048, sizeof_client_cert_der_2048);
  4162f0:	f240 429c 	movw	r2, #1180	; 0x49c
  4162f4:	490a      	ldr	r1, [pc, #40]	; (416320 <.LVL178+0x10>)
  4162f6:	4620      	mov	r0, r4
  4162f8:	f000 fac6 	bl	416888 <memcpy>

004162fc <.LVL175>:
    wc_FreeRsaKey(&key);
  4162fc:	a88e      	add	r0, sp, #568	; 0x238
  4162fe:	f004 fbcb 	bl	41aa98 <.LFE156>

00416302 <.LVL176>:
    free(tmp);
  416302:	4620      	mov	r0, r4
  416304:	f008 fcf6 	bl	41ecf4 <.LFE0>

00416308 <.LVL177>:
}
  416308:	f50d 5d9c 	add.w	sp, sp, #4992	; 0x1380
  41630c:	b004      	add	sp, #16

0041630e <.LCFI69>:
  41630e:	bd70      	pop	{r4, r5, r6, pc}

00416310 <.LVL178>:
  416310:	ffffee94 	.word	0xffffee94
  416314:	0040b55c 	.word	0x0040b55c
  416318:	20417598 	.word	0x20417598
  41631c:	0040e4a8 	.word	0x0040e4a8
  416320:	0040edec 	.word	0x0040edec

Disassembly of section .text.DesSetKey%119:

00416324 <DesSetKey>:

        *left = rotrFixed(*left^work, 4U);
    }

    static int DesSetKey(const byte* key, int dir, word32* out)
    {
  416324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00416328 <.LCFI4>:
  416328:	b0a1      	sub	sp, #132	; 0x84

0041632a <.LCFI5>:
  41632a:	9101      	str	r1, [sp, #4]
  41632c:	9200      	str	r2, [sp, #0]

0041632e <.LVL85>:
  41632e:	4d51      	ldr	r5, [pc, #324]	; (416474 <.LBE156+0x8>)
  416330:	1e6a      	subs	r2, r5, #1

00416332 <.LVL86>:
  416332:	f10d 0107 	add.w	r1, sp, #7

00416336 <.LVL87>:
  416336:	3537      	adds	r5, #55	; 0x37

00416338 <.LBB155>:

            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
                l = pc1[j] - 1;                    /* integer bit location        */
                m = l & 07;                        /* find bit                    */
                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
                    bytebit[m])                    /* and which bit of that byte  */
  416338:	4e4f      	ldr	r6, [pc, #316]	; (416478 <.LBE156+0xc>)

0041633a <.LVL88>:
                l = pc1[j] - 1;                    /* integer bit location        */
  41633a:	f812 3f01 	ldrb.w	r3, [r2, #1]!

0041633e <.LVL89>:
  41633e:	3b01      	subs	r3, #1

00416340 <.LVL90>:
                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
  416340:	10dc      	asrs	r4, r3, #3
  416342:	5d04      	ldrb	r4, [r0, r4]
                m = l & 07;                        /* find bit                    */
  416344:	f003 0307 	and.w	r3, r3, #7

00416348 <.LVL91>:
                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
  416348:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]

0041634c <.LVL92>:
                    ? 1 : 0;                       /* and store 1-bit result      */
  41634c:	421c      	tst	r4, r3
  41634e:	bf14      	ite	ne
  416350:	2301      	movne	r3, #1
  416352:	2300      	moveq	r3, #0
  416354:	f801 3f01 	strb.w	r3, [r1, #1]!

00416358 <.LVL93>:
            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
  416358:	42aa      	cmp	r2, r5
  41635a:	d1ee      	bne.n	41633a <.LVL88>
  41635c:	4e47      	ldr	r6, [pc, #284]	; (41647c <.LBE156+0x10>)
  41635e:	9b00      	ldr	r3, [sp, #0]
  416360:	f103 0904 	add.w	r9, r3, #4
  416364:	f106 0810 	add.w	r8, r6, #16
  416368:	46ce      	mov	lr, r9
            }

            for (i = 0; i < 16; i++) {            /* key chunk for each iteration */
                XMEMSET(ks, 0, 8);                /* Clear key schedule */
  41636a:	a81e      	add	r0, sp, #120	; 0x78

0041636c <.LVL94>:
  41636c:	f8df c114 	ldr.w	ip, [pc, #276]	; 416484 <.LBE156+0x18>

                /* rotate left and right halves independently */
                for (j = 0; j < 48; j++) {        /* select bits individually     */
                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
                        l= j % 6;                 /* mask it in if it's there     */
                        ks[j/6] |= bytebit[l] >> 2;
  416370:	4d43      	ldr	r5, [pc, #268]	; (416480 <.LBE156+0x14>)
  416372:	4c41      	ldr	r4, [pc, #260]	; (416478 <.LBE156+0xc>)
  416374:	46b3      	mov	fp, r6
  416376:	e041      	b.n	4163fc <.LVL103+0x4>

00416378 <.LVL95>:
  416378:	f10c 37ff 	add.w	r7, ip, #4294967295
                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
  41637c:	2300      	movs	r3, #0
  41637e:	e002      	b.n	416386 <.LVL96+0x6>

00416380 <.LVL96>:
                for (j = 0; j < 48; j++) {        /* select bits individually     */
  416380:	3301      	adds	r3, #1
  416382:	2b30      	cmp	r3, #48	; 0x30
  416384:	d016      	beq.n	4163b4 <.LVL100>
                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
  416386:	f817 2f01 	ldrb.w	r2, [r7, #1]!
  41638a:	a920      	add	r1, sp, #128	; 0x80
  41638c:	440a      	add	r2, r1
  41638e:	f812 2c41 	ldrb.w	r2, [r2, #-65]
  416392:	2a00      	cmp	r2, #0
  416394:	d0f4      	beq.n	416380 <.LVL96>

00416396 <.LVL99>:
                        ks[j/6] |= bytebit[l] >> 2;
  416396:	fb85 1203 	smull	r1, r2, r5, r3
  41639a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
                        l= j % 6;                 /* mask it in if it's there     */
  41639e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
  4163a2:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
                        ks[j/6] |= bytebit[l] >> 2;
  4163a6:	f854 6021 	ldr.w	r6, [r4, r1, lsl #2]
  4163aa:	5c81      	ldrb	r1, [r0, r2]
  4163ac:	ea41 01a6 	orr.w	r1, r1, r6, asr #2
  4163b0:	5481      	strb	r1, [r0, r2]
  4163b2:	e7e5      	b.n	416380 <.LVL96>

004163b4 <.LVL100>:
                    }
                }

                /* Now convert to odd/even interleaved form for use in F */
                out[2*i] = ((word32) ks[0] << 24)
  4163b4:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
                         | ((word32) ks[2] << 16)
  4163b8:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a

004163bc <.LVL101>:
  4163bc:	041b      	lsls	r3, r3, #16
  4163be:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                         | ((word32) ks[4] << 8)
                         | ((word32) ks[6]);
  4163c2:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
  4163c6:	4313      	orrs	r3, r2
                         | ((word32) ks[4] << 8)
  4163c8:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
                         | ((word32) ks[6]);
  4163cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                out[2*i] = ((word32) ks[0] << 24)
  4163d0:	f84e 3c04 	str.w	r3, [lr, #-4]

                out[2*i + 1] = ((word32) ks[1] << 24)
  4163d4:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
                             | ((word32) ks[3] << 16)
  4163d8:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
  4163dc:	041b      	lsls	r3, r3, #16
  4163de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                             | ((word32) ks[5] << 8)
                             | ((word32) ks[7]);
  4163e2:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
  4163e6:	4313      	orrs	r3, r2
                             | ((word32) ks[5] << 8)
  4163e8:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
                             | ((word32) ks[7]);
  4163ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                out[2*i + 1] = ((word32) ks[1] << 24)
  4163f0:	f84e 3b08 	str.w	r3, [lr], #8

004163f4 <.LVL102>:
  4163f4:	f10b 0b01 	add.w	fp, fp, #1

004163f8 <.LVL103>:
            for (i = 0; i < 16; i++) {            /* key chunk for each iteration */
  4163f8:	45c3      	cmp	fp, r8
  4163fa:	d01e      	beq.n	41643a <.LVL111>
                XMEMSET(ks, 0, 8);                /* Clear key schedule */
  4163fc:	2300      	movs	r3, #0
  4163fe:	6003      	str	r3, [r0, #0]
  416400:	6043      	str	r3, [r0, #4]

00416402 <.LVL105>:
                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
  416402:	f89b 7000 	ldrb.w	r7, [fp]

00416406 <.LVL106>:
  416406:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
  41640a:	463b      	mov	r3, r7
                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
  41640c:	2200      	movs	r2, #0
                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
  41640e:	f04f 0a1c 	mov.w	sl, #28

00416412 <.LVL107>:
  416412:	459a      	cmp	sl, r3
  416414:	bfd8      	it	le
  416416:	3b1c      	suble	r3, #28

00416418 <.LVL108>:
  416418:	ae20      	add	r6, sp, #128	; 0x80
  41641a:	4433      	add	r3, r6
  41641c:	f813 3c78 	ldrb.w	r3, [r3, #-120]
                    pcr[j] =
  416420:	f801 3f01 	strb.w	r3, [r1, #1]!
                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
  416424:	3201      	adds	r2, #1

00416426 <.LVL109>:
  416426:	2a38      	cmp	r2, #56	; 0x38
  416428:	d0a6      	beq.n	416378 <.LVL95>
                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
  41642a:	18bb      	adds	r3, r7, r2

0041642c <.LVL110>:
  41642c:	2a1c      	cmp	r2, #28
  41642e:	bfb4      	ite	lt
  416430:	f04f 0a1c 	movlt.w	sl, #28
  416434:	f04f 0a38 	movge.w	sl, #56	; 0x38
  416438:	e7eb      	b.n	416412 <.LVL107>

0041643a <.LVL111>:
            }

            /* reverse key schedule order */
            if (dir == DES_DECRYPTION) {
  41643a:	9b01      	ldr	r3, [sp, #4]
  41643c:	2b01      	cmp	r3, #1
  41643e:	d003      	beq.n	416448 <.LCFI7>

00416440 <.LBE155>:
            XFREE(buffer, NULL, DYNAMIC_TYPE_TMP_BUFFER);
    #endif
        }

        return 0;
    }
  416440:	2000      	movs	r0, #0
  416442:	b021      	add	sp, #132	; 0x84

00416444 <.LCFI6>:
  416444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00416448 <.LCFI7>:
  416448:	9b00      	ldr	r3, [sp, #0]
  41644a:	461a      	mov	r2, r3
  41644c:	f103 0440 	add.w	r4, r3, #64	; 0x40

00416450 <.LBB156>:
                    word32 swap = out[i];
  416450:	f859 1c04 	ldr.w	r1, [r9, #-4]
                    out[i] = out[DES_KS_SIZE - 2 - i];
  416454:	6f98      	ldr	r0, [r3, #120]	; 0x78
  416456:	f849 0c04 	str.w	r0, [r9, #-4]
                    out[DES_KS_SIZE - 2 - i] = swap;
  41645a:	6799      	str	r1, [r3, #120]	; 0x78
                    swap = out[i + 1];
  41645c:	6851      	ldr	r1, [r2, #4]
                    out[i + 1] = out[DES_KS_SIZE - 1 - i];
  41645e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
  416460:	6050      	str	r0, [r2, #4]
                    out[DES_KS_SIZE - 1 - i] = swap;
  416462:	67d9      	str	r1, [r3, #124]	; 0x7c
  416464:	3208      	adds	r2, #8
  416466:	3b08      	subs	r3, #8
  416468:	f109 0908 	add.w	r9, r9, #8

0041646c <.LBE156>:
                for (i = 0; i < 16; i += 2) {
  41646c:	42a2      	cmp	r2, r4
  41646e:	d1ef      	bne.n	416450 <.LBB156>
  416470:	e7e6      	b.n	416440 <.LBE155>
  416472:	bf00      	nop
  416474:	0041db70 	.word	0x0041db70
  416478:	0041e550 	.word	0x0041e550
  41647c:	0041ec74 	.word	0x0041ec74
  416480:	2aaaaaab 	.word	0x2aaaaaab
  416484:	0041decc 	.word	0x0041decc

Disassembly of section .text.xQueueSemaphoreTake%120:

00416488 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
  416488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0041648c <.LCFI19>:
  41648c:	b084      	sub	sp, #16

0041648e <.LCFI20>:
  41648e:	4604      	mov	r4, r0
  416490:	9101      	str	r1, [sp, #4]

00416492 <.LVL159>:
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
  416492:	f04f 0800 	mov.w	r8, #0
BaseType_t xEntryTimeSet = pdFALSE;
  416496:	4646      	mov	r6, r8

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
  416498:	4645      	mov	r5, r8

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
  41649a:	4f51      	ldr	r7, [pc, #324]	; (4165e0 <.LBB69+0x6>)
  41649c:	e049      	b.n	416532 <.LVL181>

0041649e <.LBB62>:
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
  41649e:	3b01      	subs	r3, #1

004164a0 <.LVL161>:
  4164a0:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4164a2:	6823      	ldr	r3, [r4, #0]

004164a4 <.LVL162>:
  4164a4:	b14b      	cbz	r3, 4164ba <.LBB63>

004164a6 <.LVL163>:
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4164a6:	6923      	ldr	r3, [r4, #16]
  4164a8:	b95b      	cbnz	r3, 4164c2 <.LVL167+0x4>
				taskEXIT_CRITICAL();
  4164aa:	f008 fb2b 	bl	41eb04 <vPortExitCritical>

004164ae <.LVL164>:
				return pdPASS;
  4164ae:	f04f 0801 	mov.w	r8, #1

004164b2 <.LBE62>:
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
  4164b2:	4640      	mov	r0, r8
  4164b4:	b004      	add	sp, #16

004164b6 <.LCFI21>:
  4164b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004164ba <.LBB63>:
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  4164ba:	f008 f90f 	bl	41e6dc <.LFE27>

004164be <.LVL167>:
  4164be:	6060      	str	r0, [r4, #4]
  4164c0:	e7f1      	b.n	4164a6 <.LVL163>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4164c2:	f104 0010 	add.w	r0, r4, #16
  4164c6:	f005 fa51 	bl	41b96c <.LFE0>

004164ca <.LVL168>:
  4164ca:	2800      	cmp	r0, #0
  4164cc:	d0ed      	beq.n	4164aa <.LVL163+0x4>
						queueYIELD_IF_USING_PREEMPTION();
  4164ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4164d2:	4b43      	ldr	r3, [pc, #268]	; (4165e0 <.LBB69+0x6>)
  4164d4:	601a      	str	r2, [r3, #0]
  4164d6:	f3bf 8f4f 	dsb	sy
  4164da:	f3bf 8f6f 	isb	sy
  4164de:	e7e4      	b.n	4164aa <.LVL163+0x4>
					taskEXIT_CRITICAL();
  4164e0:	f008 fb10 	bl	41eb04 <vPortExitCritical>

004164e4 <.LVL169>:
					return errQUEUE_EMPTY;
  4164e4:	f04f 0800 	mov.w	r8, #0
  4164e8:	e7e3      	b.n	4164b2 <.LBE62>
					vTaskInternalSetTimeOutState( &xTimeOut );
  4164ea:	a802      	add	r0, sp, #8
  4164ec:	f008 f9c2 	bl	41e874 <.LFE6>

004164f0 <.LVL170>:
  4164f0:	e029      	b.n	416546 <.LBE64>

004164f2 <.LBE63>:
		prvLockQueue( pxQueue );
  4164f2:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
  4164f6:	e032      	b.n	41655e <.LVL188+0xc>
  4164f8:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
  4164fc:	e035      	b.n	41656a <.LVL188+0x18>
						taskENTER_CRITICAL();
  4164fe:	f007 ff89 	bl	41e414 <.LFE6>

00416502 <.LVL171>:
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  416502:	6860      	ldr	r0, [r4, #4]
  416504:	f004 f90e 	bl	41a724 <.LFE29>

00416508 <.LVL172>:
  416508:	4680      	mov	r8, r0

0041650a <.LVL173>:
						taskEXIT_CRITICAL();
  41650a:	f008 fafb 	bl	41eb04 <vPortExitCritical>

0041650e <.LVL174>:
  41650e:	e03c      	b.n	41658a <.LVL191+0xa>

00416510 <.LVL175>:
				prvUnlockQueue( pxQueue );
  416510:	4620      	mov	r0, r4
  416512:	f004 fff9 	bl	41b508 <.LFE19>

00416516 <.LVL176>:
				( void ) xTaskResumeAll();
  416516:	f001 fdfb 	bl	418110 <.LBE840>

0041651a <.LVL177>:
  41651a:	e009      	b.n	416530 <.LVL180+0x4>
			prvUnlockQueue( pxQueue );
  41651c:	4620      	mov	r0, r4
  41651e:	f004 fff3 	bl	41b508 <.LFE19>

00416522 <.LVL178>:
			( void ) xTaskResumeAll();
  416522:	f001 fdf5 	bl	418110 <.LBE840>

00416526 <.LVL179>:
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  416526:	4620      	mov	r0, r4
  416528:	f008 fab5 	bl	41ea96 <.LFE4>

0041652c <.LVL180>:
  41652c:	2800      	cmp	r0, #0
  41652e:	d140      	bne.n	4165b2 <.LVL194+0x14>
  416530:	2601      	movs	r6, #1

00416532 <.LVL181>:
		taskENTER_CRITICAL();
  416532:	f007 ff6f 	bl	41e414 <.LFE6>

00416536 <.LBB64>:
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
  416536:	6ba3      	ldr	r3, [r4, #56]	; 0x38

00416538 <.LVL183>:
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
  416538:	2b00      	cmp	r3, #0
  41653a:	d1b0      	bne.n	41649e <.LBB62>
				if( xTicksToWait == ( TickType_t ) 0 )
  41653c:	9b01      	ldr	r3, [sp, #4]

0041653e <.LVL184>:
  41653e:	2b00      	cmp	r3, #0
  416540:	d0ce      	beq.n	4164e0 <.LVL168+0x16>
				else if( xEntryTimeSet == pdFALSE )
  416542:	2e00      	cmp	r6, #0
  416544:	d0d1      	beq.n	4164ea <.LVL169+0x6>

00416546 <.LBE64>:
		taskEXIT_CRITICAL();
  416546:	f008 fadd 	bl	41eb04 <vPortExitCritical>

0041654a <.LVL186>:
		vTaskSuspendAll();
  41654a:	f002 f811 	bl	418570 <.LFE155>

0041654e <.LVL187>:
		prvLockQueue( pxQueue );
  41654e:	f007 ff61 	bl	41e414 <.LFE6>

00416552 <.LVL188>:
  416552:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  416556:	b25b      	sxtb	r3, r3
  416558:	f1b3 3fff 	cmp.w	r3, #4294967295
  41655c:	d0c9      	beq.n	4164f2 <.LBE63>
  41655e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  416562:	b25b      	sxtb	r3, r3
  416564:	f1b3 3fff 	cmp.w	r3, #4294967295
  416568:	d0c6      	beq.n	4164f8 <.LBE63+0x6>
  41656a:	f008 facb 	bl	41eb04 <vPortExitCritical>

0041656e <.LVL189>:
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  41656e:	a901      	add	r1, sp, #4
  416570:	a802      	add	r0, sp, #8
  416572:	f006 fbb3 	bl	41ccdc <.LFE158>

00416576 <.LVL190>:
  416576:	2800      	cmp	r0, #0
  416578:	d1d0      	bne.n	41651c <.LVL177+0x2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  41657a:	4620      	mov	r0, r4
  41657c:	f008 fa8b 	bl	41ea96 <.LFE4>

00416580 <.LVL191>:
  416580:	2800      	cmp	r0, #0
  416582:	d0c5      	beq.n	416510 <.LVL175>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  416584:	6823      	ldr	r3, [r4, #0]
  416586:	2b00      	cmp	r3, #0
  416588:	d0b9      	beq.n	4164fe <.LBE63+0xc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  41658a:	9901      	ldr	r1, [sp, #4]
  41658c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  416590:	f008 f896 	bl	41e6c0 <.LFE11>

00416594 <.LVL192>:
				prvUnlockQueue( pxQueue );
  416594:	4620      	mov	r0, r4
  416596:	f004 ffb7 	bl	41b508 <.LFE19>

0041659a <.LVL193>:
				if( xTaskResumeAll() == pdFALSE )
  41659a:	f001 fdb9 	bl	418110 <.LBE840>

0041659e <.LVL194>:
  41659e:	2800      	cmp	r0, #0
  4165a0:	d1c6      	bne.n	416530 <.LVL180+0x4>
					portYIELD_WITHIN_API();
  4165a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4165a6:	603b      	str	r3, [r7, #0]
  4165a8:	f3bf 8f4f 	dsb	sy
  4165ac:	f3bf 8f6f 	isb	sy
  4165b0:	e7be      	b.n	416530 <.LVL180+0x4>
					if( xInheritanceOccurred != pdFALSE )
  4165b2:	f1b8 0f00 	cmp.w	r8, #0
  4165b6:	f43f af7c 	beq.w	4164b2 <.LBE62>
						taskENTER_CRITICAL();
  4165ba:	f007 ff2b 	bl	41e414 <.LFE6>

004165be <.LBB65>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
  4165be:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4165c0:	b15b      	cbz	r3, 4165da <.LBB69>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
  4165c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4165c4:	6819      	ldr	r1, [r3, #0]
  4165c6:	f1c1 0105 	rsb	r1, r1, #5

004165ca <.LBE66>:
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
  4165ca:	6860      	ldr	r0, [r4, #4]
  4165cc:	f005 fe1a 	bl	41c204 <vTaskPriorityDisinheritAfterTimeout>

004165d0 <.LBE65>:
						taskEXIT_CRITICAL();
  4165d0:	f008 fa98 	bl	41eb04 <vPortExitCritical>

004165d4 <.LVL198>:
				return errQUEUE_EMPTY;
  4165d4:	f04f 0800 	mov.w	r8, #0
  4165d8:	e76b      	b.n	4164b2 <.LBE62>

004165da <.LBB69>:
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
  4165da:	2100      	movs	r1, #0
  4165dc:	e7f5      	b.n	4165ca <.LBE66>
  4165de:	bf00      	nop
  4165e0:	e000ed04 	.word	0xe000ed04

Disassembly of section .text.Console_UART_Tasks%121:

004165e4 <Console_UART_Tasks>:
        consUartData.isReadComplete = true;
    }
}

void Console_UART_Tasks(SYS_MODULE_OBJ object)
{
  4165e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

004165e8 <.LCFI5>:
    /* Update the application state machine based
     * on the current state */
    struct QPacket pkt;
    size_t *sizeRead;

    switch(consUartData.state)
  4165e8:	4b4c      	ldr	r3, [pc, #304]	; (41671c <.LVL45+0x4>)
  4165ea:	781b      	ldrb	r3, [r3, #0]
  4165ec:	2b08      	cmp	r3, #8
  4165ee:	f200 8093 	bhi.w	416718 <.LVL45>
  4165f2:	e8df f003 	tbb	[pc, r3]
  4165f6:	9105      	.short	0x9105
  4165f8:	6029124f 	.word	0x6029124f
  4165fc:	9191      	.short	0x9191
  4165fe:	8f          	.byte	0x8f
  4165ff:	00          	.byte	0x00
    {
        case CONSOLE_UART_STATE_INIT:

            /* Register a callback with device layer to get event notification (for end point 0) */
            USART1_WriteCallbackRegister(UARTDeviceWriteCallback, 0);
  416600:	2100      	movs	r1, #0
  416602:	4847      	ldr	r0, [pc, #284]	; (416720 <.LVL45+0x8>)

00416604 <.LVL19>:
  416604:	f008 fb56 	bl	41ecb4 <.LFE162>

00416608 <.LVL20>:
            USART1_ReadCallbackRegister(UARTDeviceReadCallback, 0);
  416608:	2100      	movs	r1, #0
  41660a:	4846      	ldr	r0, [pc, #280]	; (416724 <.LVL45+0xc>)
  41660c:	f008 fb5a 	bl	41ecc4 <.LFE150>

00416610 <.LVL21>:

            /* If the driver was opened, it is ready for operation */
            consUartData.state = CONSOLE_UART_STATE_READY;
  416610:	2202      	movs	r2, #2
  416612:	4b42      	ldr	r3, [pc, #264]	; (41671c <.LVL45+0x4>)
  416614:	701a      	strb	r2, [r3, #0]

            break;
  416616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041661a <.LVL22>:

        case CONSOLE_UART_STATE_SCHEDULE_READ:

            consUartData.state = CONSOLE_UART_STATE_WAIT_FOR_READ_COMPLETE;
  41661a:	2204      	movs	r2, #4
  41661c:	4b3f      	ldr	r3, [pc, #252]	; (41671c <.LVL45+0x4>)
  41661e:	701a      	strb	r2, [r3, #0]

            if (readQueue.numElem)
  416620:	4b41      	ldr	r3, [pc, #260]	; (416728 <.LVL45+0x10>)
  416622:	689b      	ldr	r3, [r3, #8]
  416624:	2b00      	cmp	r3, #0
  416626:	d077      	beq.n	416718 <.LVL45>
            {
                consUartData.isReadComplete = false;
  416628:	2200      	movs	r2, #0
  41662a:	4b3c      	ldr	r3, [pc, #240]	; (41671c <.LVL45+0x4>)
  41662c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                pkt = rdQueueElements[readQueue.tailPos];
  416630:	4b3e      	ldr	r3, [pc, #248]	; (41672c <.LVL45+0x14>)
  416632:	4a3d      	ldr	r2, [pc, #244]	; (416728 <.LVL45+0x10>)
  416634:	6812      	ldr	r2, [r2, #0]
  416636:	eb03 01c2 	add.w	r1, r3, r2, lsl #3

0041663a <.LVL23>:

                USART1_Read (pkt.data.buf, pkt.sz);
  41663a:	6849      	ldr	r1, [r1, #4]

0041663c <.LVL24>:
  41663c:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]

00416640 <.LVL25>:
  416640:	f007 fa06 	bl	41da50 <.LFE145>

00416644 <.LVL26>:
  416644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00416648 <.LVL27>:
            }
            break;

        case CONSOLE_UART_STATE_WAIT_FOR_READ_COMPLETE:

            if(consUartData.isReadComplete)
  416648:	4b34      	ldr	r3, [pc, #208]	; (41671c <.LVL45+0x4>)
  41664a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
  41664e:	b943      	cbnz	r3, 416662 <.LVL27+0x1a>
                    consUartData.state = CONSOLE_UART_STATE_SCHEDULE_READ;
                }
            }
            else
            {
                if (writeQueue.numElem)
  416650:	4b37      	ldr	r3, [pc, #220]	; (416730 <.LVL45+0x18>)
  416652:	689b      	ldr	r3, [r3, #8]
  416654:	2b00      	cmp	r3, #0
  416656:	d05f      	beq.n	416718 <.LVL45>
                {
                    consUartData.state = CONSOLE_UART_STATE_SCHEDULE_WRITE;
  416658:	2205      	movs	r2, #5
  41665a:	4b30      	ldr	r3, [pc, #192]	; (41671c <.LVL45+0x4>)
  41665c:	701a      	strb	r2, [r3, #0]
  41665e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                sizeRead = &rdQueueElements[readQueue.tailPos].sz;
  416662:	4c31      	ldr	r4, [pc, #196]	; (416728 <.LVL45+0x10>)
  416664:	6825      	ldr	r5, [r4, #0]

00416666 <.LVL28>:
                popQueue(&readQueue);
  416666:	4620      	mov	r0, r4

00416668 <.LVL29>:
  416668:	f008 f87e 	bl	41e768 <.LFE4>

0041666c <.LVL30>:
                if (readQueue.numElem == 0)
  41666c:	68a3      	ldr	r3, [r4, #8]
  41666e:	b963      	cbnz	r3, 41668a <.LVL31+0xa>
                    if (consUartData.rdCallback != NULL)
  416670:	4b2a      	ldr	r3, [pc, #168]	; (41671c <.LVL45+0x4>)
  416672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  416674:	b123      	cbz	r3, 416680 <.LVL31>
                sizeRead = &rdQueueElements[readQueue.tailPos].sz;
  416676:	482d      	ldr	r0, [pc, #180]	; (41672c <.LVL45+0x14>)
  416678:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
                        consUartData.rdCallback(sizeRead);
  41667c:	3004      	adds	r0, #4
  41667e:	4798      	blx	r3

00416680 <.LVL31>:
                    consUartData.state = CONSOLE_UART_STATE_READY;
  416680:	2202      	movs	r2, #2
  416682:	4b26      	ldr	r3, [pc, #152]	; (41671c <.LVL45+0x4>)
  416684:	701a      	strb	r2, [r3, #0]
  416686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    consUartData.state = CONSOLE_UART_STATE_SCHEDULE_READ;
  41668a:	2203      	movs	r2, #3
  41668c:	4b23      	ldr	r3, [pc, #140]	; (41671c <.LVL45+0x4>)
  41668e:	701a      	strb	r2, [r3, #0]
  416690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00416694 <.LVL33>:
            }
            break;

        case CONSOLE_UART_STATE_READY:

            if (readQueue.numElem)
  416694:	4b24      	ldr	r3, [pc, #144]	; (416728 <.LVL45+0x10>)
  416696:	689b      	ldr	r3, [r3, #8]
  416698:	b943      	cbnz	r3, 4166ac <.LVL33+0x18>
            {
                consUartData.state = CONSOLE_UART_STATE_SCHEDULE_READ;
            }
            else if (writeQueue.numElem)
  41669a:	4b25      	ldr	r3, [pc, #148]	; (416730 <.LVL45+0x18>)
  41669c:	689b      	ldr	r3, [r3, #8]
  41669e:	2b00      	cmp	r3, #0
  4166a0:	d03a      	beq.n	416718 <.LVL45>
            {
                /* If there is data to be written, then try writing it */
                consUartData.state = CONSOLE_UART_STATE_SCHEDULE_WRITE;
  4166a2:	2205      	movs	r2, #5
  4166a4:	4b1d      	ldr	r3, [pc, #116]	; (41671c <.LVL45+0x4>)
  4166a6:	701a      	strb	r2, [r3, #0]
  4166a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                consUartData.state = CONSOLE_UART_STATE_SCHEDULE_READ;
  4166ac:	2203      	movs	r2, #3
  4166ae:	4b1b      	ldr	r3, [pc, #108]	; (41671c <.LVL45+0x4>)
  4166b0:	701a      	strb	r2, [r3, #0]
  4166b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            }
            break;

        case CONSOLE_UART_STATE_SCHEDULE_WRITE:

            if (writeQueue.numElem)
  4166b6:	4b1e      	ldr	r3, [pc, #120]	; (416730 <.LVL45+0x18>)
  4166b8:	689b      	ldr	r3, [r3, #8]
  4166ba:	b36b      	cbz	r3, 416718 <.LVL45>
            {
                /* This means there is data to sent out */
                pkt = wrQueueElements[writeQueue.tailPos];
  4166bc:	4b1d      	ldr	r3, [pc, #116]	; (416734 <.LVL45+0x1c>)
  4166be:	4a1c      	ldr	r2, [pc, #112]	; (416730 <.LVL45+0x18>)
  4166c0:	6812      	ldr	r2, [r2, #0]
  4166c2:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
  4166c6:	f853 6032 	ldr.w	r6, [r3, r2, lsl #3]

004166ca <.LVL34>:
  4166ca:	684d      	ldr	r5, [r1, #4]

004166cc <.LBB6>:

                    if(status == true)
                    {
                        /* This means this buffer was added successfully to
                         * the PLIB. Do a callback. */
                        if (consUartData.wrCallback != NULL)
  4166cc:	f8df 804c 	ldr.w	r8, [pc, #76]	; 41671c <.LVL45+0x4>
                        {
                            consUartData.wrCallback((void *)wrQueueElements[writeQueue.tailPos].data.cbuf);
                        }

                        /* Remove this element from the write queue */
                        popQueue(&writeQueue);
  4166d0:	4c17      	ldr	r4, [pc, #92]	; (416730 <.LVL45+0x18>)
                        pkt = wrQueueElements[writeQueue.tailPos];
  4166d2:	461f      	mov	r7, r3
  4166d4:	e00e      	b.n	4166f4 <.LBB7>

004166d6 <.LVL36>:
                            consUartData.wrCallback((void *)wrQueueElements[writeQueue.tailPos].data.cbuf);
  4166d6:	6822      	ldr	r2, [r4, #0]
  4166d8:	f857 0032 	ldr.w	r0, [r7, r2, lsl #3]

004166dc <.LVL37>:
  4166dc:	4798      	blx	r3
                        popQueue(&writeQueue);
  4166de:	4620      	mov	r0, r4
  4166e0:	f008 f842 	bl	41e768 <.LFE4>

004166e4 <.LVL39>:
                        pkt = wrQueueElements[writeQueue.tailPos];
  4166e4:	6823      	ldr	r3, [r4, #0]
  4166e6:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
  4166ea:	f857 6033 	ldr.w	r6, [r7, r3, lsl #3]

004166ee <.LVL40>:
  4166ee:	6855      	ldr	r5, [r2, #4]

004166f0 <.LBE6>:
                    {
                        /* Got an invalid handle. This most likely means
                         * that the write buffer queue is full */
                    }

                } while(writeQueue.numElem);
  4166f0:	68a3      	ldr	r3, [r4, #8]
  4166f2:	b153      	cbz	r3, 41670a <.LBE7>

004166f4 <.LBB7>:
                    bool status = USART1_Write(pkt.data.buf, pkt.sz);
  4166f4:	4629      	mov	r1, r5
  4166f6:	4630      	mov	r0, r6
  4166f8:	f006 fe84 	bl	41d404 <.LFE156>

004166fc <.LVL42>:
                    if(status == true)
  4166fc:	2800      	cmp	r0, #0
  4166fe:	d0f7      	beq.n	4166f0 <.LBE6>
                        if (consUartData.wrCallback != NULL)
  416700:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
  416704:	2b00      	cmp	r3, #0
  416706:	d1e6      	bne.n	4166d6 <.LVL36>
  416708:	e7e9      	b.n	4166de <.LVL37+0x2>

0041670a <.LBE7>:
                /* If we are here, it either means there is nothing more to
                 * write of the write buffer queue is full. We cannot do much
                 * with respect to write at point. We move the state to
                 * ready */

                consUartData.state = CONSOLE_UART_STATE_READY;
  41670a:	2202      	movs	r2, #2
  41670c:	4b03      	ldr	r3, [pc, #12]	; (41671c <.LVL45+0x4>)
  41670e:	701a      	strb	r2, [r3, #0]
  416710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00416714 <.LVL44>:
        case CONSOLE_UART_STATE_OPERATIONAL_ERROR:

            /* We arrive at this state if the UART driver reports an error on a read or write operation
               We will attempt to recover by flushing the local buffers */

            Console_UART_Flush();
  416714:	f007 f906 	bl	41d924 <Console_UART_Flush>

00416718 <.LVL45>:
  416718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41671c:	20417638 	.word	0x20417638
  416720:	0041eca5 	.word	0x0041eca5
  416724:	0041ea25 	.word	0x0041ea25
  416728:	204177f4 	.word	0x204177f4
  41672c:	204175e8 	.word	0x204175e8
  416730:	20417808 	.word	0x20417808
  416734:	20417088 	.word	0x20417088

Disassembly of section .text.deflate_stored%122:

00416738 <deflate_stored>:
{
  416738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0041673c <.LCFI9>:
  41673c:	4604      	mov	r4, r0
  41673e:	4688      	mov	r8, r1

00416740 <.LVL208>:
    if (max_block_size > s->pending_buf_size - 5) {
  416740:	68c5      	ldr	r5, [r0, #12]
  416742:	3d05      	subs	r5, #5
    ulg max_block_size = 0xffff;
  416744:	f64f 73ff 	movw	r3, #65535	; 0xffff
  416748:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  41674c:	4295      	cmp	r5, r2
  41674e:	bf88      	it	hi
  416750:	461d      	movhi	r5, r3
        s->lookahead = 0;
  416752:	2600      	movs	r6, #0
  416754:	4637      	mov	r7, r6
  416756:	e049      	b.n	4167ec <.LVL216+0x1c>

00416758 <.LVL209>:
            fill_window(s);
  416758:	4620      	mov	r0, r4
  41675a:	f7fe faeb 	bl	414d34 <fill_window>

0041675e <.LVL210>:
            if (s->lookahead == 0 && flush == Z_NO_FLUSH) return need_more;
  41675e:	6f63      	ldr	r3, [r4, #116]	; 0x74
  416760:	b91b      	cbnz	r3, 41676a <.LVL210+0xc>
  416762:	f1b8 0f00 	cmp.w	r8, #0
  416766:	f000 8085 	beq.w	416874 <.LVL223+0x18>
            if (s->lookahead == 0) break; /* flush the current block */
  41676a:	2b00      	cmp	r3, #0
  41676c:	d141      	bne.n	4167f2 <.LVL216+0x22>
    s->insert = 0;
  41676e:	2200      	movs	r2, #0
  416770:	f241 63b4 	movw	r3, #5812	; 0x16b4
  416774:	50e2      	str	r2, [r4, r3]
    if (flush == Z_FINISH) {
  416776:	f1b8 0f04 	cmp.w	r8, #4
  41677a:	d05f      	beq.n	41683c <.LVL220+0x12>
    if ((long)s->strstart > s->block_start)
  41677c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  41677e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  416780:	4290      	cmp	r0, r2
  416782:	dd7d      	ble.n	416880 <.LVL223+0x24>
        FLUSH_BLOCK(s, 0);
  416784:	2a00      	cmp	r2, #0
  416786:	db73      	blt.n	416870 <.LVL223+0x14>
  416788:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  41678a:	4411      	add	r1, r2
  41678c:	2300      	movs	r3, #0
  41678e:	1a82      	subs	r2, r0, r2
  416790:	4620      	mov	r0, r4
  416792:	f7f8 fd79 	bl	40f288 <_tr_flush_block>

00416796 <.LVL211>:
  416796:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  416798:	65e3      	str	r3, [r4, #92]	; 0x5c
  41679a:	6820      	ldr	r0, [r4, #0]
  41679c:	f006 fc98 	bl	41d0d0 <.LFE41>

004167a0 <.LVL212>:
  4167a0:	6823      	ldr	r3, [r4, #0]
  4167a2:	6918      	ldr	r0, [r3, #16]
            if (s->lookahead == 0 && flush == Z_NO_FLUSH) return need_more;
  4167a4:	3000      	adds	r0, #0
  4167a6:	bf18      	it	ne
  4167a8:	2001      	movne	r0, #1
  4167aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004167ae <.LVL213>:
            s->lookahead = (uInt)(s->strstart - max_start);
  4167ae:	1a9b      	subs	r3, r3, r2
  4167b0:	6763      	str	r3, [r4, #116]	; 0x74
            s->strstart = (uInt)max_start;
  4167b2:	66e2      	str	r2, [r4, #108]	; 0x6c
            FLUSH_BLOCK(s, 0);
  4167b4:	2800      	cmp	r0, #0
  4167b6:	db28      	blt.n	41680a <.LVL217+0xa>
  4167b8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  4167ba:	4401      	add	r1, r0
  4167bc:	463b      	mov	r3, r7
  4167be:	1a12      	subs	r2, r2, r0

004167c0 <.LVL214>:
  4167c0:	4620      	mov	r0, r4
  4167c2:	f7f8 fd61 	bl	40f288 <_tr_flush_block>

004167c6 <.LVL215>:
  4167c6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  4167c8:	65e3      	str	r3, [r4, #92]	; 0x5c
  4167ca:	6820      	ldr	r0, [r4, #0]
  4167cc:	f006 fc80 	bl	41d0d0 <.LFE41>

004167d0 <.LVL216>:
  4167d0:	6823      	ldr	r3, [r4, #0]
  4167d2:	691b      	ldr	r3, [r3, #16]
  4167d4:	2b00      	cmp	r3, #0
  4167d6:	d050      	beq.n	41687a <.LVL223+0x1e>
        if (s->strstart - (uInt)s->block_start >= MAX_DIST(s)) {
  4167d8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  4167da:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  4167dc:	4611      	mov	r1, r2
  4167de:	eba0 0e02 	sub.w	lr, r0, r2
  4167e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4167e4:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
  4167e8:	459e      	cmp	lr, r3
  4167ea:	d210      	bcs.n	41680e <.LVL218>
        if (s->lookahead <= 1) {
  4167ec:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4167ee:	2b01      	cmp	r3, #1
  4167f0:	d9b2      	bls.n	416758 <.LVL209>
        s->strstart += s->lookahead;
  4167f2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  4167f4:	6f62      	ldr	r2, [r4, #116]	; 0x74
  4167f6:	4413      	add	r3, r2
  4167f8:	66e3      	str	r3, [r4, #108]	; 0x6c
        s->lookahead = 0;
  4167fa:	6766      	str	r6, [r4, #116]	; 0x74
        max_start = s->block_start + max_block_size;
  4167fc:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  4167fe:	182a      	adds	r2, r5, r0

00416800 <.LVL217>:
        if (s->strstart == 0 || (ulg)s->strstart >= max_start) {
  416800:	4293      	cmp	r3, r2
  416802:	d2d4      	bcs.n	4167ae <.LVL213>
  416804:	2b00      	cmp	r3, #0
  416806:	d1e7      	bne.n	4167d8 <.LVL216+0x8>
  416808:	e7d1      	b.n	4167ae <.LVL213>
            FLUSH_BLOCK(s, 0);
  41680a:	4639      	mov	r1, r7
  41680c:	e7d6      	b.n	4167bc <.LVL213+0xe>

0041680e <.LVL218>:
            FLUSH_BLOCK(s, 0);
  41680e:	2a00      	cmp	r2, #0
  416810:	db12      	blt.n	416838 <.LVL220+0xe>
  416812:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  416814:	4419      	add	r1, r3
  416816:	4633      	mov	r3, r6
  416818:	1a82      	subs	r2, r0, r2
  41681a:	4620      	mov	r0, r4
  41681c:	f7f8 fd34 	bl	40f288 <_tr_flush_block>

00416820 <.LVL219>:
  416820:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  416822:	65e3      	str	r3, [r4, #92]	; 0x5c
  416824:	6820      	ldr	r0, [r4, #0]
  416826:	f006 fc53 	bl	41d0d0 <.LFE41>

0041682a <.LVL220>:
  41682a:	6823      	ldr	r3, [r4, #0]
  41682c:	691b      	ldr	r3, [r3, #16]
  41682e:	2b00      	cmp	r3, #0
  416830:	d1dc      	bne.n	4167ec <.LVL216+0x1c>
  416832:	2000      	movs	r0, #0
  416834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  416838:	4631      	mov	r1, r6
  41683a:	e7ec      	b.n	416816 <.LVL218+0x8>
        FLUSH_BLOCK(s, 1);
  41683c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  41683e:	2a00      	cmp	r2, #0
  416840:	db14      	blt.n	41686c <.LVL223+0x10>
  416842:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  416844:	4411      	add	r1, r2
  416846:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  416848:	2301      	movs	r3, #1
  41684a:	1a82      	subs	r2, r0, r2
  41684c:	4620      	mov	r0, r4
  41684e:	f7f8 fd1b 	bl	40f288 <_tr_flush_block>

00416852 <.LVL222>:
  416852:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  416854:	65e3      	str	r3, [r4, #92]	; 0x5c
  416856:	6820      	ldr	r0, [r4, #0]
  416858:	f006 fc3a 	bl	41d0d0 <.LFE41>

0041685c <.LVL223>:
  41685c:	6823      	ldr	r3, [r4, #0]
  41685e:	691b      	ldr	r3, [r3, #16]
        return finish_done;
  416860:	2b00      	cmp	r3, #0
  416862:	bf0c      	ite	eq
  416864:	2002      	moveq	r0, #2
  416866:	2003      	movne	r0, #3
  416868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLUSH_BLOCK(s, 1);
  41686c:	2100      	movs	r1, #0
  41686e:	e7ea      	b.n	416846 <.LVL220+0x1c>
        FLUSH_BLOCK(s, 0);
  416870:	2100      	movs	r1, #0
  416872:	e78b      	b.n	41678c <.LVL210+0x2e>
            if (s->lookahead == 0 && flush == Z_NO_FLUSH) return need_more;
  416874:	2000      	movs	r0, #0
  416876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            FLUSH_BLOCK(s, 0);
  41687a:	2000      	movs	r0, #0
  41687c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return block_done;
  416880:	2001      	movs	r0, #1
}
  416882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section .text%123:

00416888 <memcpy>:
  416888:	4684      	mov	ip, r0
  41688a:	ea41 0300 	orr.w	r3, r1, r0
  41688e:	f013 0303 	ands.w	r3, r3, #3
  416892:	d16d      	bne.n	416970 <memcpy+0xe8>
  416894:	3a40      	subs	r2, #64	; 0x40
  416896:	d341      	bcc.n	41691c <memcpy+0x94>
  416898:	f851 3b04 	ldr.w	r3, [r1], #4
  41689c:	f840 3b04 	str.w	r3, [r0], #4
  4168a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4168a4:	f840 3b04 	str.w	r3, [r0], #4
  4168a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4168ac:	f840 3b04 	str.w	r3, [r0], #4
  4168b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4168b4:	f840 3b04 	str.w	r3, [r0], #4
  4168b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4168bc:	f840 3b04 	str.w	r3, [r0], #4
  4168c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4168c4:	f840 3b04 	str.w	r3, [r0], #4
  4168c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4168cc:	f840 3b04 	str.w	r3, [r0], #4
  4168d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4168d4:	f840 3b04 	str.w	r3, [r0], #4
  4168d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4168dc:	f840 3b04 	str.w	r3, [r0], #4
  4168e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4168e4:	f840 3b04 	str.w	r3, [r0], #4
  4168e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4168ec:	f840 3b04 	str.w	r3, [r0], #4
  4168f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4168f4:	f840 3b04 	str.w	r3, [r0], #4
  4168f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4168fc:	f840 3b04 	str.w	r3, [r0], #4
  416900:	f851 3b04 	ldr.w	r3, [r1], #4
  416904:	f840 3b04 	str.w	r3, [r0], #4
  416908:	f851 3b04 	ldr.w	r3, [r1], #4
  41690c:	f840 3b04 	str.w	r3, [r0], #4
  416910:	f851 3b04 	ldr.w	r3, [r1], #4
  416914:	f840 3b04 	str.w	r3, [r0], #4
  416918:	3a40      	subs	r2, #64	; 0x40
  41691a:	d2bd      	bcs.n	416898 <memcpy+0x10>
  41691c:	3230      	adds	r2, #48	; 0x30
  41691e:	d311      	bcc.n	416944 <memcpy+0xbc>
  416920:	f851 3b04 	ldr.w	r3, [r1], #4
  416924:	f840 3b04 	str.w	r3, [r0], #4
  416928:	f851 3b04 	ldr.w	r3, [r1], #4
  41692c:	f840 3b04 	str.w	r3, [r0], #4
  416930:	f851 3b04 	ldr.w	r3, [r1], #4
  416934:	f840 3b04 	str.w	r3, [r0], #4
  416938:	f851 3b04 	ldr.w	r3, [r1], #4
  41693c:	f840 3b04 	str.w	r3, [r0], #4
  416940:	3a10      	subs	r2, #16
  416942:	d2ed      	bcs.n	416920 <memcpy+0x98>
  416944:	320c      	adds	r2, #12
  416946:	d305      	bcc.n	416954 <memcpy+0xcc>
  416948:	f851 3b04 	ldr.w	r3, [r1], #4
  41694c:	f840 3b04 	str.w	r3, [r0], #4
  416950:	3a04      	subs	r2, #4
  416952:	d2f9      	bcs.n	416948 <memcpy+0xc0>
  416954:	3204      	adds	r2, #4
  416956:	d008      	beq.n	41696a <memcpy+0xe2>
  416958:	07d2      	lsls	r2, r2, #31
  41695a:	bf1c      	itt	ne
  41695c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  416960:	f800 3b01 	strbne.w	r3, [r0], #1
  416964:	d301      	bcc.n	41696a <memcpy+0xe2>
  416966:	880b      	ldrh	r3, [r1, #0]
  416968:	8003      	strh	r3, [r0, #0]
  41696a:	4660      	mov	r0, ip
  41696c:	4770      	bx	lr
  41696e:	bf00      	nop
  416970:	2a08      	cmp	r2, #8
  416972:	d313      	bcc.n	41699c <memcpy+0x114>
  416974:	078b      	lsls	r3, r1, #30
  416976:	d08d      	beq.n	416894 <memcpy+0xc>
  416978:	f010 0303 	ands.w	r3, r0, #3
  41697c:	d08a      	beq.n	416894 <memcpy+0xc>
  41697e:	f1c3 0304 	rsb	r3, r3, #4
  416982:	1ad2      	subs	r2, r2, r3
  416984:	07db      	lsls	r3, r3, #31
  416986:	bf1c      	itt	ne
  416988:	f811 3b01 	ldrbne.w	r3, [r1], #1
  41698c:	f800 3b01 	strbne.w	r3, [r0], #1
  416990:	d380      	bcc.n	416894 <memcpy+0xc>
  416992:	f831 3b02 	ldrh.w	r3, [r1], #2
  416996:	f820 3b02 	strh.w	r3, [r0], #2
  41699a:	e77b      	b.n	416894 <memcpy+0xc>
  41699c:	3a04      	subs	r2, #4
  41699e:	d3d9      	bcc.n	416954 <memcpy+0xcc>
  4169a0:	3a01      	subs	r2, #1
  4169a2:	f811 3b01 	ldrb.w	r3, [r1], #1
  4169a6:	f800 3b01 	strb.w	r3, [r0], #1
  4169aa:	d2f9      	bcs.n	4169a0 <memcpy+0x118>
  4169ac:	780b      	ldrb	r3, [r1, #0]
  4169ae:	7003      	strb	r3, [r0, #0]
  4169b0:	784b      	ldrb	r3, [r1, #1]
  4169b2:	7043      	strb	r3, [r0, #1]
  4169b4:	788b      	ldrb	r3, [r1, #2]
  4169b6:	7083      	strb	r3, [r0, #2]
  4169b8:	4660      	mov	r0, ip
  4169ba:	4770      	bx	lr

Disassembly of section .text.DesRawProcessBlock%124:

004169bc <DesRawProcessBlock>:

        return wc_Des3_SetIV(des, iv);
    }

    static void DesRawProcessBlock(word32* lIn, word32* rIn, const word32* kptr)
    {
  4169bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

004169c0 <.LCFI0>:
        word32 l = *lIn, r = *rIn, i;
  4169c0:	6807      	ldr	r7, [r0, #0]

004169c2 <.LVL1>:
  4169c2:	f8d1 e000 	ldr.w	lr, [r1]

004169c6 <.LVL2>:
  4169c6:	4616      	mov	r6, r2
  4169c8:	3280      	adds	r2, #128	; 0x80

004169ca <.LBB68>:

        for (i=0; i<8; i++)
        {
            word32 work = rotrFixed(r, 4U) ^ kptr[4*i+0];
            l ^= Spbox[6][(work) & 0x3f]
  4169ca:	4b47      	ldr	r3, [pc, #284]	; (416ae8 <.LVL21>)

004169cc <.LVL4>:
            word32 work = rotrFixed(r, 4U) ^ kptr[4*i+0];
  4169cc:	6834      	ldr	r4, [r6, #0]
  4169ce:	ea84 1c3e 	eor.w	ip, r4, lr, ror #4

004169d2 <.LVL5>:
              ^  Spbox[4][(work >> 8) & 0x3f]
              ^  Spbox[2][(work >> 16) & 0x3f]
              ^  Spbox[0][(work >> 24) & 0x3f];
            work = r ^ kptr[4*i+1];
  4169d2:	6874      	ldr	r4, [r6, #4]
  4169d4:	ea8e 0404 	eor.w	r4, lr, r4

004169d8 <.LVL6>:
            l ^= Spbox[6][(work) & 0x3f]
  4169d8:	f00c 053f 	and.w	r5, ip, #63	; 0x3f
  4169dc:	f505 75c0 	add.w	r5, r5, #384	; 0x180

004169e0 <.LVL7>:
            l ^= Spbox[7][(work) & 0x3f]
  4169e0:	f004 083f 	and.w	r8, r4, #63	; 0x3f
  4169e4:	f508 78e0 	add.w	r8, r8, #448	; 0x1c0
  4169e8:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]

004169ec <.LVL8>:
  4169ec:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
  4169f0:	ea85 0508 	eor.w	r5, r5, r8
              ^  Spbox[4][(work >> 8) & 0x3f]
  4169f4:	f3cc 2805 	ubfx	r8, ip, #8, #6
  4169f8:	f508 7880 	add.w	r8, r8, #256	; 0x100
            l ^= Spbox[7][(work) & 0x3f]
  4169fc:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
  416a00:	ea85 0508 	eor.w	r5, r5, r8
              ^  Spbox[2][(work >> 16) & 0x3f]
  416a04:	f3cc 4805 	ubfx	r8, ip, #16, #6
  416a08:	f108 0880 	add.w	r8, r8, #128	; 0x80
            l ^= Spbox[7][(work) & 0x3f]
  416a0c:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
  416a10:	ea85 0508 	eor.w	r5, r5, r8
              ^  Spbox[0][(work >> 24) & 0x3f];
  416a14:	f3cc 6c05 	ubfx	ip, ip, #24, #6

00416a18 <.LVL9>:
            l ^= Spbox[7][(work) & 0x3f]
  416a18:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
  416a1c:	ea85 050c 	eor.w	r5, r5, ip
              ^  Spbox[5][(work >> 8) & 0x3f]
  416a20:	f3c4 2c05 	ubfx	ip, r4, #8, #6
  416a24:	f50c 7ca0 	add.w	ip, ip, #320	; 0x140
            l ^= Spbox[7][(work) & 0x3f]
  416a28:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
  416a2c:	ea85 050c 	eor.w	r5, r5, ip
              ^  Spbox[3][(work >> 16) & 0x3f]
  416a30:	f3c4 4c05 	ubfx	ip, r4, #16, #6
  416a34:	f10c 0cc0 	add.w	ip, ip, #192	; 0xc0
            l ^= Spbox[7][(work) & 0x3f]
  416a38:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
  416a3c:	ea85 050c 	eor.w	r5, r5, ip
              ^  Spbox[1][(work >> 24) & 0x3f];
  416a40:	f3c4 6405 	ubfx	r4, r4, #24, #6

00416a44 <.LVL10>:
  416a44:	3440      	adds	r4, #64	; 0x40
            l ^= Spbox[7][(work) & 0x3f]
  416a46:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
  416a4a:	4065      	eors	r5, r4
  416a4c:	406f      	eors	r7, r5

00416a4e <.LVL11>:

            work = rotrFixed(l, 4U) ^ kptr[4*i+2];
  416a4e:	68b5      	ldr	r5, [r6, #8]
  416a50:	ea85 1537 	eor.w	r5, r5, r7, ror #4

00416a54 <.LVL12>:
            r ^= Spbox[6][(work) & 0x3f]
              ^  Spbox[4][(work >> 8) & 0x3f]
              ^  Spbox[2][(work >> 16) & 0x3f]
              ^  Spbox[0][(work >> 24) & 0x3f];
            work = l ^ kptr[4*i+3];
  416a54:	68f4      	ldr	r4, [r6, #12]
  416a56:	ea87 0c04 	eor.w	ip, r7, r4

00416a5a <.LVL13>:
            r ^= Spbox[6][(work) & 0x3f]
  416a5a:	f005 043f 	and.w	r4, r5, #63	; 0x3f
  416a5e:	f504 74c0 	add.w	r4, r4, #384	; 0x180

00416a62 <.LVL14>:
            r ^= Spbox[7][(work) & 0x3f]
  416a62:	f00c 083f 	and.w	r8, ip, #63	; 0x3f
  416a66:	f508 78e0 	add.w	r8, r8, #448	; 0x1c0
  416a6a:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]

00416a6e <.LVL15>:
  416a6e:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
  416a72:	ea84 0408 	eor.w	r4, r4, r8
  416a76:	ea84 040e 	eor.w	r4, r4, lr
              ^  Spbox[5][(work >> 8) & 0x3f]
  416a7a:	f3cc 2e05 	ubfx	lr, ip, #8, #6

00416a7e <.LVL16>:
  416a7e:	f50e 7ea0 	add.w	lr, lr, #320	; 0x140
  416a82:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
  416a86:	ea84 040e 	eor.w	r4, r4, lr
              ^  Spbox[3][(work >> 16) & 0x3f]
  416a8a:	f3cc 4e05 	ubfx	lr, ip, #16, #6
  416a8e:	f10e 0ec0 	add.w	lr, lr, #192	; 0xc0
  416a92:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
  416a96:	ea84 040e 	eor.w	r4, r4, lr
              ^  Spbox[1][(work >> 24) & 0x3f];
  416a9a:	f3cc 6c05 	ubfx	ip, ip, #24, #6

00416a9e <.LVL17>:
  416a9e:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
  416aa2:	f853 e02c 	ldr.w	lr, [r3, ip, lsl #2]
  416aa6:	ea84 040e 	eor.w	r4, r4, lr
              ^  Spbox[4][(work >> 8) & 0x3f]
  416aaa:	f3c5 2e05 	ubfx	lr, r5, #8, #6
  416aae:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
  416ab2:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
  416ab6:	ea84 040e 	eor.w	r4, r4, lr
              ^  Spbox[2][(work >> 16) & 0x3f]
  416aba:	f3c5 4e05 	ubfx	lr, r5, #16, #6
  416abe:	f10e 0e80 	add.w	lr, lr, #128	; 0x80
  416ac2:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
  416ac6:	ea84 040e 	eor.w	r4, r4, lr
              ^  Spbox[0][(work >> 24) & 0x3f];
  416aca:	f3c5 6505 	ubfx	r5, r5, #24, #6
            r ^= Spbox[7][(work) & 0x3f]
  416ace:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
  416ad2:	ea84 0e05 	eor.w	lr, r4, r5

00416ad6 <.LVL18>:
  416ad6:	3610      	adds	r6, #16

00416ad8 <.LBE68>:
        for (i=0; i<8; i++)
  416ad8:	42b2      	cmp	r2, r6
  416ada:	f47f af77 	bne.w	4169cc <.LVL4>
        }

        *lIn = l; *rIn = r;
  416ade:	6007      	str	r7, [r0, #0]

00416ae0 <.LVL20>:
  416ae0:	f8c1 e000 	str.w	lr, [r1]
  416ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00416ae8 <.LVL21>:
  416ae8:	0040c324 	.word	0x0040c324

Disassembly of section .text.Des3ProcessBlock%125:

00416aec <Des3ProcessBlock>:
        XMEMCPY(out, &r, sizeof(r));
        XMEMCPY(out + sizeof(r), &l, sizeof(l));
    }

    static void Des3ProcessBlock(Des3* des, const byte* in, byte* out)
    {
  416aec:	b5f0      	push	{r4, r5, r6, r7, lr}

00416aee <.LCFI1>:
  416aee:	b083      	sub	sp, #12

00416af0 <.LCFI2>:
  416af0:	4606      	mov	r6, r0
  416af2:	4614      	mov	r4, r2
        word32 l, r;

        XMEMCPY(&l, in, sizeof(l));
  416af4:	680b      	ldr	r3, [r1, #0]
        XMEMCPY(&r, in + sizeof(l), sizeof(r));
  416af6:	6849      	ldr	r1, [r1, #4]

00416af8 <.LBB113>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  416af8:	0a1a      	lsrs	r2, r3, #8

00416afa <.LVL24>:
  416afa:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
  416afe:	021b      	lsls	r3, r3, #8

00416b00 <.LVL25>:
  416b00:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  416b04:	431a      	orrs	r2, r3

00416b06 <.LBB115>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  416b06:	ea4f 4232 	mov.w	r2, r2, ror #16

00416b0a <.LBB117>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  416b0a:	0a0b      	lsrs	r3, r1, #8
  416b0c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  416b10:	0209      	lsls	r1, r1, #8

00416b12 <.LVL28>:
  416b12:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  416b16:	430b      	orrs	r3, r1

00416b18 <.LBB119>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  416b18:	ea4f 3333 	mov.w	r3, r3, ror #12

00416b1c <.LBE121>:
        work = (*left ^ *right) & 0xf0f0f0f0;
  416b1c:	ea82 0103 	eor.w	r1, r2, r3
  416b20:	f001 31f0 	and.w	r1, r1, #4042322160	; 0xf0f0f0f0

00416b24 <.LVL30>:
        *left ^= work;
  416b24:	404a      	eors	r2, r1

00416b26 <.LVL31>:
        *right = rotrFixed(*right^work, 20U);
  416b26:	404b      	eors	r3, r1

00416b28 <.LBB123>:
        return (x >> y) | (x << (sizeof(y) * 8 - y));
  416b28:	ea4f 5333 	mov.w	r3, r3, ror #20

00416b2c <.LBE123>:
        work = (*left ^ *right) & 0xffff0000;
  416b2c:	ea82 0103 	eor.w	r1, r2, r3

00416b30 <.LVL34>:
  416b30:	4d39      	ldr	r5, [pc, #228]	; (416c18 <.LVL83>)
  416b32:	4029      	ands	r1, r5

00416b34 <.LVL35>:
        *left ^= work;
  416b34:	404a      	eors	r2, r1

00416b36 <.LVL36>:
        *right = rotrFixed(*right^work, 18U);
  416b36:	404b      	eors	r3, r1

00416b38 <.LBB125>:
  416b38:	ea4f 43b3 	mov.w	r3, r3, ror #18

00416b3c <.LBE125>:
        work = (*left ^ *right) & 0x33333333;
  416b3c:	ea82 0103 	eor.w	r1, r2, r3

00416b40 <.LVL39>:
  416b40:	f001 3133 	and.w	r1, r1, #858993459	; 0x33333333

00416b44 <.LVL40>:
        *left ^= work;
  416b44:	404a      	eors	r2, r1

00416b46 <.LVL41>:
        *right = rotrFixed(*right^work, 6U);
  416b46:	404b      	eors	r3, r1

00416b48 <.LBB127>:
  416b48:	ea4f 13b3 	mov.w	r3, r3, ror #6

00416b4c <.LBE127>:
        work = (*left ^ *right) & 0x00ff00ff;
  416b4c:	ea82 0103 	eor.w	r1, r2, r3

00416b50 <.LVL44>:
  416b50:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff

00416b54 <.LVL45>:
        *left ^= work;
  416b54:	404a      	eors	r2, r1

00416b56 <.LVL46>:
        *right = rotlFixed(*right^work, 9U);
  416b56:	404b      	eors	r3, r1

00416b58 <.LBB129>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  416b58:	ea4f 53f3 	mov.w	r3, r3, ror #23

00416b5c <.LBE129>:
        work = (*left ^ *right) & 0xaaaaaaaa;
  416b5c:	ea82 0103 	eor.w	r1, r2, r3

00416b60 <.LVL49>:
  416b60:	f001 31aa 	and.w	r1, r1, #2863311530	; 0xaaaaaaaa

00416b64 <.LVL50>:
        *left = rotlFixed(*left^work, 1U);
  416b64:	404a      	eors	r2, r1

00416b66 <.LBB131>:
  416b66:	ea4f 72f2 	mov.w	r2, r2, ror #31

00416b6a <.LBE131>:
  416b6a:	9201      	str	r2, [sp, #4]
        *right ^= work;
  416b6c:	404b      	eors	r3, r1
  416b6e:	af02      	add	r7, sp, #8
  416b70:	f847 3d08 	str.w	r3, [r7, #-8]!

00416b74 <.LBE119>:
            l = ByteReverseWord32(l);
            r = ByteReverseWord32(r);
        #endif
        IPERM(&l,&r);

        DesRawProcessBlock(&l, &r, des->key[0]);
  416b74:	4602      	mov	r2, r0
  416b76:	4639      	mov	r1, r7
  416b78:	a801      	add	r0, sp, #4

00416b7a <.LVL52>:
  416b7a:	f7ff ff1f 	bl	4169bc <L0>

00416b7e <.LVL53>:
        DesRawProcessBlock(&r, &l, des->key[1]);
  416b7e:	f106 0280 	add.w	r2, r6, #128	; 0x80
  416b82:	a901      	add	r1, sp, #4
  416b84:	4638      	mov	r0, r7
  416b86:	f7ff ff19 	bl	4169bc <L0>

00416b8a <.LVL54>:
        DesRawProcessBlock(&l, &r, des->key[2]);
  416b8a:	f506 7280 	add.w	r2, r6, #256	; 0x100
  416b8e:	4639      	mov	r1, r7
  416b90:	a801      	add	r0, sp, #4
  416b92:	f7ff ff13 	bl	4169bc <L0>

00416b96 <.LBB133>:
        return (x >> y) | (x << (sizeof(y) * 8 - y));
  416b96:	9a00      	ldr	r2, [sp, #0]
  416b98:	ea4f 0272 	mov.w	r2, r2, ror #1

00416b9c <.LBE135>:
        work = (*left ^ *right) & 0xaaaaaaaa;
  416b9c:	9b01      	ldr	r3, [sp, #4]
  416b9e:	ea82 0103 	eor.w	r1, r2, r3
  416ba2:	f001 31aa 	and.w	r1, r1, #2863311530	; 0xaaaaaaaa

00416ba6 <.LVL57>:
        *right ^= work;
  416ba6:	404a      	eors	r2, r1

00416ba8 <.LVL58>:
        *left = rotrFixed(*left^work, 9U);
  416ba8:	404b      	eors	r3, r1

00416baa <.LBB137>:
  416baa:	ea4f 2373 	mov.w	r3, r3, ror #9

00416bae <.LBE137>:
        work = (*left ^ *right) & 0x00ff00ff;
  416bae:	ea82 0103 	eor.w	r1, r2, r3

00416bb2 <.LVL61>:
  416bb2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff

00416bb6 <.LVL62>:
        *right ^= work;
  416bb6:	404a      	eors	r2, r1

00416bb8 <.LVL63>:
        *left = rotlFixed(*left^work, 6U);
  416bb8:	404b      	eors	r3, r1

00416bba <.LBB139>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  416bba:	ea4f 63b3 	mov.w	r3, r3, ror #26

00416bbe <.LBE139>:
        work = (*left ^ *right) & 0x33333333;
  416bbe:	ea82 0103 	eor.w	r1, r2, r3

00416bc2 <.LVL66>:
  416bc2:	f001 3133 	and.w	r1, r1, #858993459	; 0x33333333

00416bc6 <.LVL67>:
        *right ^= work;
  416bc6:	404a      	eors	r2, r1

00416bc8 <.LVL68>:
        *left = rotlFixed(*left^work, 18U);
  416bc8:	404b      	eors	r3, r1

00416bca <.LBB141>:
  416bca:	ea4f 33b3 	mov.w	r3, r3, ror #14

00416bce <.LBE141>:
        work = (*left ^ *right) & 0xffff0000;
  416bce:	ea82 0103 	eor.w	r1, r2, r3

00416bd2 <.LVL71>:
  416bd2:	400d      	ands	r5, r1

00416bd4 <.LVL72>:
        *right ^= work;
  416bd4:	406a      	eors	r2, r5

00416bd6 <.LVL73>:
        *left = rotlFixed(*left^work, 20U);
  416bd6:	406b      	eors	r3, r5

00416bd8 <.LBB143>:
  416bd8:	ea4f 3333 	mov.w	r3, r3, ror #12

00416bdc <.LBE143>:
        work = (*left ^ *right) & 0xf0f0f0f0;
  416bdc:	ea82 0103 	eor.w	r1, r2, r3
  416be0:	f001 31f0 	and.w	r1, r1, #4042322160	; 0xf0f0f0f0

00416be4 <.LVL76>:
        *right ^= work;
  416be4:	404a      	eors	r2, r1

00416be6 <.LVL77>:
        *left = rotrFixed(*left^work, 4U);
  416be6:	404b      	eors	r3, r1

00416be8 <.LBB145>:
        return (x >> y) | (x << (sizeof(y) * 8 - y));
  416be8:	ea4f 1333 	mov.w	r3, r3, ror #4

00416bec <.LBB147>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  416bec:	0211      	lsls	r1, r2, #8
  416bee:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  416bf2:	0a12      	lsrs	r2, r2, #8

00416bf4 <.LVL80>:
  416bf4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
  416bf8:	430a      	orrs	r2, r1

00416bfa <.LBB149>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  416bfa:	ea4f 4232 	mov.w	r2, r2, ror #16

00416bfe <.LBE147>:
        FPERM(&l,&r);
        #ifdef LITTLE_ENDIAN_ORDER
            l = ByteReverseWord32(l);
            r = ByteReverseWord32(r);
        #endif
        XMEMCPY(out, &r, sizeof(r));
  416bfe:	6022      	str	r2, [r4, #0]

00416c00 <.LBB151>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  416c00:	0a1a      	lsrs	r2, r3, #8
  416c02:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
  416c06:	021b      	lsls	r3, r3, #8

00416c08 <.LVL81>:
  416c08:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  416c0c:	4313      	orrs	r3, r2

00416c0e <.LBB153>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  416c0e:	ea4f 4333 	mov.w	r3, r3, ror #16

00416c12 <.LBE151>:
        XMEMCPY(out + sizeof(r), &l, sizeof(l));
  416c12:	6063      	str	r3, [r4, #4]
    }
  416c14:	b003      	add	sp, #12

00416c16 <.LCFI3>:
  416c16:	bdf0      	pop	{r4, r5, r6, r7, pc}

00416c18 <.LVL83>:
  416c18:	ffff0000 	.word	0xffff0000

Disassembly of section .text.ecc_map%126:

00416c1c <ecc_map>:
{
  416c1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

00416c20 <.LCFI23>:
  416c20:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c

00416c24 <.LCFI24>:
   if (P == NULL || modulus == NULL)
  416c24:	2800      	cmp	r0, #0
  416c26:	f000 8088 	beq.w	416d3a <.LVL509>
  416c2a:	4604      	mov	r4, r0
  416c2c:	2900      	cmp	r1, #0
  416c2e:	f000 8084 	beq.w	416d3a <.LVL509>
  416c32:	4617      	mov	r7, r2
  416c34:	460d      	mov	r5, r1
   if (mp_cmp_d(P->z, 0) == MP_EQ) {
  416c36:	f500 688a 	add.w	r8, r0, #1104	; 0x450
  416c3a:	2100      	movs	r1, #0

00416c3c <.LVL463>:
  416c3c:	4640      	mov	r0, r8

00416c3e <.LVL464>:
  416c3e:	f008 f973 	bl	41ef28 <.LFE81>

00416c42 <.LVL465>:
  416c42:	b990      	cbnz	r0, 416c6a <.LVL472>
       err = mp_set(P->x, 0);
  416c44:	2100      	movs	r1, #0
  416c46:	4620      	mov	r0, r4
  416c48:	f008 f92b 	bl	41eea2 <.LFE113>

00416c4c <.LVL466>:
       if (err == MP_OKAY)
  416c4c:	4606      	mov	r6, r0
  416c4e:	bb40      	cbnz	r0, 416ca2 <.LVL480>
           err = mp_set(P->y, 0);
  416c50:	2100      	movs	r1, #0
  416c52:	f504 700a 	add.w	r0, r4, #552	; 0x228

00416c56 <.LVL467>:
  416c56:	f008 f924 	bl	41eea2 <.LFE113>

00416c5a <.LVL468>:
       if (err == MP_OKAY)
  416c5a:	4606      	mov	r6, r0
  416c5c:	bb08      	cbnz	r0, 416ca2 <.LVL480>
           err = mp_set(P->z, 1);
  416c5e:	2101      	movs	r1, #1
  416c60:	4640      	mov	r0, r8

00416c62 <.LVL469>:
  416c62:	f008 f91e 	bl	41eea2 <.LFE113>

00416c66 <.LVL470>:
  416c66:	4606      	mov	r6, r0

00416c68 <.LVL471>:
  416c68:	e01b      	b.n	416ca2 <.LVL480>

00416c6a <.LVL472>:
   if ((err = mp_init_multi(&t1, &t2, NULL, NULL, NULL, NULL)) != MP_OKAY) {
  416c6a:	2200      	movs	r2, #0
  416c6c:	9201      	str	r2, [sp, #4]
  416c6e:	9200      	str	r2, [sp, #0]
  416c70:	4613      	mov	r3, r2
  416c72:	a902      	add	r1, sp, #8
  416c74:	a88c      	add	r0, sp, #560	; 0x230
  416c76:	f006 fdf9 	bl	41d86c <mp_init_multi>

00416c7a <.LVL473>:
  416c7a:	2800      	cmp	r0, #0
  416c7c:	d160      	bne.n	416d40 <.LVL510>

00416c7e <.LVL474>:
   y = P->y;
  416c7e:	f504 790a 	add.w	r9, r4, #552	; 0x228

00416c82 <.LVL475>:
   err = mp_montgomery_reduce(z, modulus, mp);
  416c82:	463a      	mov	r2, r7
  416c84:	4629      	mov	r1, r5
  416c86:	4640      	mov	r0, r8

00416c88 <.LVL476>:
  416c88:	f008 f901 	bl	41ee8e <.LFE110>

00416c8c <.LVL477>:
   if (err == MP_OKAY)
  416c8c:	4606      	mov	r6, r0
  416c8e:	b168      	cbz	r0, 416cac <.LCFI26>
   if (err == MP_OKAY)
  416c90:	b33e      	cbz	r6, 416ce2 <.LVL490+0x2>
   if (err == MP_OKAY)
  416c92:	2e00      	cmp	r6, #0
  416c94:	d043      	beq.n	416d1e <.LVL502+0x2>
   mp_clear(&t1);
  416c96:	a88c      	add	r0, sp, #560	; 0x230

00416c98 <.LVL478>:
  416c98:	f008 f880 	bl	41ed9c <.LFE170>

00416c9c <.LVL479>:
   mp_clear(&t2);
  416c9c:	a802      	add	r0, sp, #8
  416c9e:	f008 f87d 	bl	41ed9c <.LFE170>

00416ca2 <.LVL480>:
}
  416ca2:	4630      	mov	r0, r6
  416ca4:	f20d 4d5c 	addw	sp, sp, #1116	; 0x45c

00416ca8 <.LCFI25>:
  416ca8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00416cac <.LCFI26>:
       err = mp_invmod(z, modulus, &t1);
  416cac:	aa8c      	add	r2, sp, #560	; 0x230
  416cae:	4629      	mov	r1, r5
  416cb0:	4640      	mov	r0, r8

00416cb2 <.LVL482>:
  416cb2:	f008 f941 	bl	41ef38 <.LFE83>

00416cb6 <.LVL483>:
   if (err == MP_OKAY)
  416cb6:	4606      	mov	r6, r0
  416cb8:	b9c8      	cbnz	r0, 416cee <.LVL493>
       err = mp_sqr(&t1, &t2);
  416cba:	a902      	add	r1, sp, #8
  416cbc:	a88c      	add	r0, sp, #560	; 0x230

00416cbe <.LVL484>:
  416cbe:	f008 f8e1 	bl	41ee84 <.LFE105>

00416cc2 <.LVL485>:
   if (err == MP_OKAY)
  416cc2:	4606      	mov	r6, r0
  416cc4:	b9d0      	cbnz	r0, 416cfc <.LVL496>
       err = mp_mod(&t2, modulus, &t2);
  416cc6:	aa02      	add	r2, sp, #8
  416cc8:	4629      	mov	r1, r5
  416cca:	4610      	mov	r0, r2

00416ccc <.LVL486>:
  416ccc:	f008 f93c 	bl	41ef48 <.LFE75>

00416cd0 <.LVL487>:
   if (err == MP_OKAY)
  416cd0:	4606      	mov	r6, r0
  416cd2:	b9d8      	cbnz	r0, 416d0c <.LVL499>
       err = mp_mul(&t1, &t2, &t1);
  416cd4:	aa8c      	add	r2, sp, #560	; 0x230
  416cd6:	a902      	add	r1, sp, #8
  416cd8:	4610      	mov	r0, r2

00416cda <.LVL488>:
  416cda:	f008 f8ba 	bl	41ee52 <.LFE86>

00416cde <.LVL489>:
  416cde:	4606      	mov	r6, r0

00416ce0 <.LVL490>:
  416ce0:	e7d6      	b.n	416c90 <.LVL477+0x4>
       err = mp_mod(&t1, modulus, &t1);
  416ce2:	aa8c      	add	r2, sp, #560	; 0x230
  416ce4:	4629      	mov	r1, r5
  416ce6:	4610      	mov	r0, r2

00416ce8 <.LVL491>:
  416ce8:	f008 f92e 	bl	41ef48 <.LFE75>

00416cec <.LVL492>:
  416cec:	4606      	mov	r6, r0

00416cee <.LVL493>:
   if (err == MP_OKAY)
  416cee:	b9e6      	cbnz	r6, 416d2a <.LVL505>
       err = mp_mul(x, &t2, x);
  416cf0:	4622      	mov	r2, r4
  416cf2:	a902      	add	r1, sp, #8
  416cf4:	4620      	mov	r0, r4

00416cf6 <.LVL494>:
  416cf6:	f008 f8ac 	bl	41ee52 <.LFE86>

00416cfa <.LVL495>:
  416cfa:	4606      	mov	r6, r0

00416cfc <.LVL496>:
   if (err == MP_OKAY)
  416cfc:	2e00      	cmp	r6, #0
  416cfe:	d1ca      	bne.n	416c96 <.LVL477+0xa>
       err = mp_montgomery_reduce(x, modulus, mp);
  416d00:	463a      	mov	r2, r7
  416d02:	4629      	mov	r1, r5
  416d04:	4620      	mov	r0, r4

00416d06 <.LVL497>:
  416d06:	f008 f8c2 	bl	41ee8e <.LFE110>

00416d0a <.LVL498>:
  416d0a:	4606      	mov	r6, r0

00416d0c <.LVL499>:
   if (err == MP_OKAY)
  416d0c:	2e00      	cmp	r6, #0
  416d0e:	d1c2      	bne.n	416c96 <.LVL477+0xa>
       err = mp_mul(y, &t1, y);
  416d10:	464a      	mov	r2, r9
  416d12:	a98c      	add	r1, sp, #560	; 0x230
  416d14:	4648      	mov	r0, r9

00416d16 <.LVL500>:
  416d16:	f008 f89c 	bl	41ee52 <.LFE86>

00416d1a <.LVL501>:
  416d1a:	4606      	mov	r6, r0

00416d1c <.LVL502>:
  416d1c:	e7b9      	b.n	416c92 <.LVL477+0x6>
       err = mp_montgomery_reduce(y, modulus, mp);
  416d1e:	463a      	mov	r2, r7
  416d20:	4629      	mov	r1, r5
  416d22:	4648      	mov	r0, r9

00416d24 <.LVL503>:
  416d24:	f008 f8b3 	bl	41ee8e <.LFE110>

00416d28 <.LVL504>:
  416d28:	4606      	mov	r6, r0

00416d2a <.LVL505>:
   if (err == MP_OKAY)
  416d2a:	2e00      	cmp	r6, #0
  416d2c:	d1b3      	bne.n	416c96 <.LVL477+0xa>
       err = mp_set(z, 1);
  416d2e:	2101      	movs	r1, #1
  416d30:	4640      	mov	r0, r8

00416d32 <.LVL506>:
  416d32:	f008 f8b6 	bl	41eea2 <.LFE113>

00416d36 <.LVL507>:
  416d36:	4606      	mov	r6, r0

00416d38 <.LVL508>:
  416d38:	e7ad      	b.n	416c96 <.LVL477+0xa>

00416d3a <.LVL509>:
       return ECC_BAD_ARG_E;
  416d3a:	f06f 06a9 	mvn.w	r6, #169	; 0xa9
  416d3e:	e7b0      	b.n	416ca2 <.LVL480>

00416d40 <.LVL510>:
      return MEMORY_E;
  416d40:	f06f 067c 	mvn.w	r6, #124	; 0x7c
  416d44:	e7ad      	b.n	416ca2 <.LVL480>

Disassembly of section .text.xQueueGenericSend%127:

00416d48 <xQueueGenericSend>:
{
  416d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

00416d4c <.LCFI8>:
  416d4c:	b084      	sub	sp, #16

00416d4e <.LCFI9>:
  416d4e:	4604      	mov	r4, r0
  416d50:	4688      	mov	r8, r1
  416d52:	9201      	str	r2, [sp, #4]
  416d54:	461d      	mov	r5, r3

00416d56 <.LVL65>:
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
  416d56:	f04f 0900 	mov.w	r9, #0
		prvLockQueue( pxQueue );
  416d5a:	464e      	mov	r6, r9
					portYIELD_WITHIN_API();
  416d5c:	4f43      	ldr	r7, [pc, #268]	; (416e6c <.LVL94+0x4>)
  416d5e:	e039      	b.n	416dd4 <.LVL78>

00416d60 <.LVL66>:
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  416d60:	462a      	mov	r2, r5
  416d62:	4641      	mov	r1, r8
  416d64:	4620      	mov	r0, r4
  416d66:	f005 f853 	bl	41be10 <prvCopyDataToQueue>

00416d6a <.LVL67>:
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  416d6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  416d6c:	b973      	cbnz	r3, 416d8c <.LCFI11>
					else if( xYieldRequired != pdFALSE )
  416d6e:	b138      	cbz	r0, 416d80 <.LVL68>
						queueYIELD_IF_USING_PREEMPTION();
  416d70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  416d74:	4b3d      	ldr	r3, [pc, #244]	; (416e6c <.LVL94+0x4>)
  416d76:	601a      	str	r2, [r3, #0]
  416d78:	f3bf 8f4f 	dsb	sy
  416d7c:	f3bf 8f6f 	isb	sy

00416d80 <.LVL68>:
				taskEXIT_CRITICAL();
  416d80:	f007 fec0 	bl	41eb04 <vPortExitCritical>

00416d84 <.LVL69>:
				return pdPASS;
  416d84:	2001      	movs	r0, #1

00416d86 <.LVL70>:
}
  416d86:	b004      	add	sp, #16

00416d88 <.LCFI10>:
  416d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00416d8c <.LCFI11>:
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  416d8c:	f104 0024 	add.w	r0, r4, #36	; 0x24

00416d90 <.LVL72>:
  416d90:	f004 fdec 	bl	41b96c <.LFE0>

00416d94 <.LVL73>:
  416d94:	2800      	cmp	r0, #0
  416d96:	d0f3      	beq.n	416d80 <.LVL68>
							queueYIELD_IF_USING_PREEMPTION();
  416d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  416d9c:	4b33      	ldr	r3, [pc, #204]	; (416e6c <.LVL94+0x4>)
  416d9e:	601a      	str	r2, [r3, #0]
  416da0:	f3bf 8f4f 	dsb	sy
  416da4:	f3bf 8f6f 	isb	sy
  416da8:	e7ea      	b.n	416d80 <.LVL68>
					taskEXIT_CRITICAL();
  416daa:	f007 feab 	bl	41eb04 <vPortExitCritical>

00416dae <.LVL74>:
					return errQUEUE_FULL;
  416dae:	2000      	movs	r0, #0
  416db0:	e7e9      	b.n	416d86 <.LVL70>
					vTaskInternalSetTimeOutState( &xTimeOut );
  416db2:	a802      	add	r0, sp, #8
  416db4:	f007 fd5e 	bl	41e874 <.LFE6>

00416db8 <.LVL75>:
  416db8:	e01a      	b.n	416df0 <.LVL80>
		prvLockQueue( pxQueue );
  416dba:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  416dbe:	e023      	b.n	416e08 <.LVL83+0xc>
  416dc0:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  416dc4:	e026      	b.n	416e14 <.LVL83+0x18>
				prvUnlockQueue( pxQueue );
  416dc6:	4620      	mov	r0, r4
  416dc8:	f004 fb9e 	bl	41b508 <.LFE19>

00416dcc <.LVL76>:
				( void ) xTaskResumeAll();
  416dcc:	f001 f9a0 	bl	418110 <.LBE840>

00416dd0 <.LVL77>:
  416dd0:	f04f 0901 	mov.w	r9, #1

00416dd4 <.LVL78>:
		taskENTER_CRITICAL();
  416dd4:	f007 fb1e 	bl	41e414 <.LFE6>

00416dd8 <.LVL79>:
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  416dd8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  416dda:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  416ddc:	429a      	cmp	r2, r3
  416dde:	d3bf      	bcc.n	416d60 <.LVL66>
  416de0:	2d02      	cmp	r5, #2
  416de2:	d0bd      	beq.n	416d60 <.LVL66>
				if( xTicksToWait == ( TickType_t ) 0 )
  416de4:	9b01      	ldr	r3, [sp, #4]
  416de6:	2b00      	cmp	r3, #0
  416de8:	d0df      	beq.n	416daa <.LVL73+0x16>
				else if( xEntryTimeSet == pdFALSE )
  416dea:	f1b9 0f00 	cmp.w	r9, #0
  416dee:	d0e0      	beq.n	416db2 <.LVL74+0x4>

00416df0 <.LVL80>:
		taskEXIT_CRITICAL();
  416df0:	f007 fe88 	bl	41eb04 <vPortExitCritical>

00416df4 <.LVL81>:
		vTaskSuspendAll();
  416df4:	f001 fbbc 	bl	418570 <.LFE155>

00416df8 <.LVL82>:
		prvLockQueue( pxQueue );
  416df8:	f007 fb0c 	bl	41e414 <.LFE6>

00416dfc <.LVL83>:
  416dfc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  416e00:	b25b      	sxtb	r3, r3
  416e02:	f1b3 3fff 	cmp.w	r3, #4294967295
  416e06:	d0d8      	beq.n	416dba <.LVL75+0x2>
  416e08:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  416e0c:	b25b      	sxtb	r3, r3
  416e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
  416e12:	d0d5      	beq.n	416dc0 <.LVL75+0x8>
  416e14:	f007 fe76 	bl	41eb04 <vPortExitCritical>

00416e18 <.LVL84>:
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  416e18:	a901      	add	r1, sp, #4
  416e1a:	a802      	add	r0, sp, #8
  416e1c:	f005 ff5e 	bl	41ccdc <.LFE158>

00416e20 <.LVL85>:
  416e20:	b9e8      	cbnz	r0, 416e5e <.LVL92+0x14>

00416e22 <.LBB35>:

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
  416e22:	f007 faf7 	bl	41e414 <.LFE6>

00416e26 <.LVL87>:
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  416e26:	f8d4 a038 	ldr.w	sl, [r4, #56]	; 0x38
  416e2a:	f8d4 903c 	ldr.w	r9, [r4, #60]	; 0x3c

00416e2e <.LVL88>:
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  416e2e:	f007 fe69 	bl	41eb04 <vPortExitCritical>

00416e32 <.LBE35>:
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  416e32:	45ca      	cmp	sl, r9
  416e34:	d1c7      	bne.n	416dc6 <.LVL75+0xe>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  416e36:	9901      	ldr	r1, [sp, #4]
  416e38:	f104 0010 	add.w	r0, r4, #16
  416e3c:	f007 fc40 	bl	41e6c0 <.LFE11>

00416e40 <.LVL90>:
				prvUnlockQueue( pxQueue );
  416e40:	4620      	mov	r0, r4
  416e42:	f004 fb61 	bl	41b508 <.LFE19>

00416e46 <.LVL91>:
				if( xTaskResumeAll() == pdFALSE )
  416e46:	f001 f963 	bl	418110 <.LBE840>

00416e4a <.LVL92>:
  416e4a:	2800      	cmp	r0, #0
  416e4c:	d1c0      	bne.n	416dd0 <.LVL77>
					portYIELD_WITHIN_API();
  416e4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  416e52:	603b      	str	r3, [r7, #0]
  416e54:	f3bf 8f4f 	dsb	sy
  416e58:	f3bf 8f6f 	isb	sy
  416e5c:	e7b8      	b.n	416dd0 <.LVL77>
			prvUnlockQueue( pxQueue );
  416e5e:	4620      	mov	r0, r4
  416e60:	f004 fb52 	bl	41b508 <.LFE19>

00416e64 <.LVL93>:
			( void ) xTaskResumeAll();
  416e64:	f001 f954 	bl	418110 <.LBE840>

00416e68 <.LVL94>:
			return errQUEUE_FULL;
  416e68:	2000      	movs	r0, #0
  416e6a:	e78c      	b.n	416d86 <.LVL70>
  416e6c:	e000ed04 	.word	0xe000ed04

Disassembly of section .text.quorem%128:

00416e70 <quorem>:
  416e70:	6902      	ldr	r2, [r0, #16]
  416e72:	690b      	ldr	r3, [r1, #16]

00416e74 <.LVL1>:
  416e74:	4293      	cmp	r3, r2
  416e76:	f300 808d 	bgt.w	416f94 <.LCFI3>
  416e7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00416e7e <.LCFI0>:
  416e7e:	f103 38ff 	add.w	r8, r3, #4294967295
  416e82:	f101 0714 	add.w	r7, r1, #20

00416e86 <.LVL2>:
  416e86:	f100 0b14 	add.w	fp, r0, #20
  416e8a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  416e8e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  416e92:	ea4f 0488 	mov.w	r4, r8, lsl #2
  416e96:	b083      	sub	sp, #12

00416e98 <.LCFI1>:
  416e98:	3201      	adds	r2, #1
  416e9a:	fbb3 f9f2 	udiv	r9, r3, r2
  416e9e:	eb0b 0304 	add.w	r3, fp, r4
  416ea2:	9400      	str	r4, [sp, #0]
  416ea4:	eb07 0a04 	add.w	sl, r7, r4

00416ea8 <.LVL3>:
  416ea8:	9301      	str	r3, [sp, #4]

00416eaa <.LVL4>:
  416eaa:	f1b9 0f00 	cmp.w	r9, #0
  416eae:	d039      	beq.n	416f24 <.LVL23>
  416eb0:	2500      	movs	r5, #0
  416eb2:	462e      	mov	r6, r5
  416eb4:	46bc      	mov	ip, r7
  416eb6:	46de      	mov	lr, fp

00416eb8 <.LVL5>:
  416eb8:	f85c 4b04 	ldr.w	r4, [ip], #4

00416ebc <.LVL6>:
  416ebc:	f8de 3000 	ldr.w	r3, [lr]
  416ec0:	b2a2      	uxth	r2, r4
  416ec2:	fb09 5502 	mla	r5, r9, r2, r5

00416ec6 <.LVL7>:
  416ec6:	0c22      	lsrs	r2, r4, #16
  416ec8:	0c2c      	lsrs	r4, r5, #16

00416eca <.LVL8>:
  416eca:	fb09 4202 	mla	r2, r9, r2, r4

00416ece <.LVL9>:
  416ece:	b2ad      	uxth	r5, r5

00416ed0 <.LVL10>:
  416ed0:	1b75      	subs	r5, r6, r5
  416ed2:	b296      	uxth	r6, r2

00416ed4 <.LVL11>:
  416ed4:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  416ed8:	fa15 f383 	uxtah	r3, r5, r3
  416edc:	eb06 4623 	add.w	r6, r6, r3, asr #16
  416ee0:	b29b      	uxth	r3, r3
  416ee2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  416ee6:	45e2      	cmp	sl, ip
  416ee8:	ea4f 4512 	mov.w	r5, r2, lsr #16

00416eec <.LVL12>:
  416eec:	f84e 3b04 	str.w	r3, [lr], #4

00416ef0 <.LVL13>:
  416ef0:	ea4f 4626 	mov.w	r6, r6, asr #16

00416ef4 <.LVL14>:
  416ef4:	d2e0      	bcs.n	416eb8 <.LVL5>
  416ef6:	9b00      	ldr	r3, [sp, #0]
  416ef8:	f85b 3003 	ldr.w	r3, [fp, r3]
  416efc:	b993      	cbnz	r3, 416f24 <.LVL23>

00416efe <.LVL15>:
  416efe:	9c01      	ldr	r4, [sp, #4]
  416f00:	1f23      	subs	r3, r4, #4

00416f02 <.LVL16>:
  416f02:	459b      	cmp	fp, r3
  416f04:	d20c      	bcs.n	416f20 <.LVL22>
  416f06:	f854 3c04 	ldr.w	r3, [r4, #-4]

00416f0a <.LVL17>:
  416f0a:	b94b      	cbnz	r3, 416f20 <.LVL22>
  416f0c:	f1a4 0308 	sub.w	r3, r4, #8
  416f10:	e002      	b.n	416f18 <.LVL19+0x2>

00416f12 <.LVL18>:
  416f12:	681a      	ldr	r2, [r3, #0]
  416f14:	3b04      	subs	r3, #4

00416f16 <.LVL19>:
  416f16:	b91a      	cbnz	r2, 416f20 <.LVL22>
  416f18:	459b      	cmp	fp, r3
  416f1a:	f108 38ff 	add.w	r8, r8, #4294967295

00416f1e <.LVL21>:
  416f1e:	d3f8      	bcc.n	416f12 <.LVL18>

00416f20 <.LVL22>:
  416f20:	f8c0 8010 	str.w	r8, [r0, #16]

00416f24 <.LVL23>:
  416f24:	4604      	mov	r4, r0
  416f26:	f006 feaf 	bl	41dc88 <.LFE147>

00416f2a <.LVL24>:
  416f2a:	2800      	cmp	r0, #0
  416f2c:	db2e      	blt.n	416f8c <.LVL46>
  416f2e:	f109 0901 	add.w	r9, r9, #1

00416f32 <.LVL25>:
  416f32:	465d      	mov	r5, fp
  416f34:	2300      	movs	r3, #0

00416f36 <.LVL26>:
  416f36:	f857 1b04 	ldr.w	r1, [r7], #4

00416f3a <.LVL27>:
  416f3a:	6828      	ldr	r0, [r5, #0]
  416f3c:	b28a      	uxth	r2, r1
  416f3e:	1a9a      	subs	r2, r3, r2
  416f40:	0c0b      	lsrs	r3, r1, #16

00416f42 <.LVL28>:
  416f42:	fa12 f280 	uxtah	r2, r2, r0

00416f46 <.LVL29>:
  416f46:	ebc3 4310 	rsb	r3, r3, r0, lsr #16

00416f4a <.LVL30>:
  416f4a:	eb03 4322 	add.w	r3, r3, r2, asr #16

00416f4e <.LVL31>:
  416f4e:	b292      	uxth	r2, r2

00416f50 <.LVL32>:
  416f50:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  416f54:	45ba      	cmp	sl, r7
  416f56:	f845 2b04 	str.w	r2, [r5], #4

00416f5a <.LVL33>:
  416f5a:	ea4f 4323 	mov.w	r3, r3, asr #16

00416f5e <.LVL34>:
  416f5e:	d2ea      	bcs.n	416f36 <.LVL26>

00416f60 <.LVL35>:
  416f60:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  416f64:	eb0b 0388 	add.w	r3, fp, r8, lsl #2

00416f68 <.LVL36>:
  416f68:	b982      	cbnz	r2, 416f8c <.LVL46>

00416f6a <.LVL37>:
  416f6a:	1f1a      	subs	r2, r3, #4

00416f6c <.LVL38>:
  416f6c:	4593      	cmp	fp, r2
  416f6e:	d20b      	bcs.n	416f88 <.LVL45>
  416f70:	f853 2c04 	ldr.w	r2, [r3, #-4]

00416f74 <.LVL39>:
  416f74:	b942      	cbnz	r2, 416f88 <.LVL45>
  416f76:	3b08      	subs	r3, #8

00416f78 <.LVL40>:
  416f78:	e002      	b.n	416f80 <.LVL42+0x2>

00416f7a <.LVL41>:
  416f7a:	681a      	ldr	r2, [r3, #0]
  416f7c:	3b04      	subs	r3, #4

00416f7e <.LVL42>:
  416f7e:	b91a      	cbnz	r2, 416f88 <.LVL45>
  416f80:	459b      	cmp	fp, r3
  416f82:	f108 38ff 	add.w	r8, r8, #4294967295

00416f86 <.LVL44>:
  416f86:	d3f8      	bcc.n	416f7a <.LVL41>

00416f88 <.LVL45>:
  416f88:	f8c4 8010 	str.w	r8, [r4, #16]

00416f8c <.LVL46>:
  416f8c:	4648      	mov	r0, r9
  416f8e:	b003      	add	sp, #12

00416f90 <.LCFI2>:
  416f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00416f94 <.LCFI3>:
  416f94:	2000      	movs	r0, #0

00416f96 <.LVL48>:
  416f96:	4770      	bx	lr

Disassembly of section .text._fp_exptmod%129:

00416f98 <_fp_exptmod>:
{
  416f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00416f9c <.LCFI110>:
  416f9c:	f2ad 6d94 	subw	sp, sp, #1684	; 0x694

00416fa0 <.LCFI111>:
  416fa0:	4604      	mov	r4, r0
  416fa2:	9102      	str	r1, [sp, #8]
  416fa4:	9200      	str	r2, [sp, #0]
  416fa6:	9303      	str	r3, [sp, #12]
  if ((err = fp_montgomery_setup (P, &mp)) != FP_OKAY) {
  416fa8:	a905      	add	r1, sp, #20

00416faa <.LVL757>:
  416faa:	4610      	mov	r0, r2

00416fac <.LVL758>:
  416fac:	f006 fb7e 	bl	41d6ac <.LFE179>

00416fb0 <.LVL759>:
  416fb0:	4606      	mov	r6, r0
  416fb2:	b120      	cbz	r0, 416fbe <.LBB176>

00416fb4 <.LVL760>:
}
  416fb4:	4630      	mov	r0, r6
  416fb6:	f20d 6d94 	addw	sp, sp, #1684	; 0x694

00416fba <.LCFI112>:
  416fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00416fbe <.LBB176>:
    fp_zero(a);
  416fbe:	a806      	add	r0, sp, #24

00416fc0 <.LVL763>:
  416fc0:	f007 fdb4 	bl	41eb2c <.LFE154>

00416fc4 <.LBB178>:
  416fc4:	a890      	add	r0, sp, #576	; 0x240

00416fc6 <.LVL765>:
  416fc6:	f007 fdb1 	bl	41eb2c <.LFE154>

00416fca <.LBB180>:
  416fca:	f50d 608d 	add.w	r0, sp, #1128	; 0x468

00416fce <.LVL767>:
  416fce:	f007 fdad 	bl	41eb2c <.LFE154>

00416fd2 <.LBE180>:
  fp_montgomery_calc_normalization (&R[0], P);
  416fd2:	9d00      	ldr	r5, [sp, #0]
  416fd4:	4629      	mov	r1, r5
  416fd6:	a806      	add	r0, sp, #24
  416fd8:	f004 f996 	bl	41b308 <.LFE16>

00416fdc <.LVL769>:
  if (fp_cmp_mag(P, G) != FP_GT) {
  416fdc:	4621      	mov	r1, r4
  416fde:	4628      	mov	r0, r5
  416fe0:	f005 fa81 	bl	41c4e6 <.LFE170>

00416fe4 <.LVL770>:
  416fe4:	2801      	cmp	r0, #1
  416fe6:	d015      	beq.n	417014 <.LVL775>
     fp_mod(G, P, &R[1]);
  416fe8:	aa90      	add	r2, sp, #576	; 0x240
  416fea:	4629      	mov	r1, r5
  416fec:	4620      	mov	r0, r4
  416fee:	f006 fa50 	bl	41d492 <.LFE171>

00416ff2 <.LVL771>:
  fp_mulmod (&R[1], &R[0], P, &R[1]);
  416ff2:	ab90      	add	r3, sp, #576	; 0x240
  416ff4:	9a00      	ldr	r2, [sp, #0]
  416ff6:	a906      	add	r1, sp, #24
  416ff8:	4618      	mov	r0, r3
  416ffa:	f006 fff6 	bl	41dfea <.LFE191>

00416ffe <.LVL772>:
  digidx = X->used - 1;
  416ffe:	9b02      	ldr	r3, [sp, #8]
  417000:	681b      	ldr	r3, [r3, #0]
  417002:	f103 39ff 	add.w	r9, r3, #4294967295

00417006 <.LVL773>:
  bitcnt = 1;
  417006:	2601      	movs	r6, #1

00417008 <.LVL774>:
  buf    = 0;
  417008:	2700      	movs	r7, #0
    fp_mul(&R[0], &R[1], &R[y^1]); fp_montgomery_reduce(&R[y^1], P, mp);
  41700a:	f10d 0818 	add.w	r8, sp, #24
    fp_copy((fp_int*) ( ((wolfssl_word)&R[0] & wc_off_on_addr[y^1]) +
  41700e:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 4170b8 <.LVL794+0x2>
  417012:	e039      	b.n	417088 <.LVL785>

00417014 <.LVL775>:
     fp_copy(G, &R[1]);
  417014:	a990      	add	r1, sp, #576	; 0x240
  417016:	4620      	mov	r0, r4
  417018:	f007 fa32 	bl	41e480 <.LFE185>

0041701c <.LVL776>:
  41701c:	e7e9      	b.n	416ff2 <.LVL771>

0041701e <.LVL777>:
    y     = (int)(buf >> (DIGIT_BIT - 1)) & 1;
  41701e:	0ffc      	lsrs	r4, r7, #31

00417020 <.LVL778>:
    fp_mul(&R[0], &R[1], &R[y^1]); fp_montgomery_reduce(&R[y^1], P, mp);
  417020:	f084 0501 	eor.w	r5, r4, #1
  417024:	007f      	lsls	r7, r7, #1

00417026 <.LVL779>:
  417026:	f44f 730a 	mov.w	r3, #552	; 0x228
  41702a:	fb03 8305 	mla	r3, r3, r5, r8
  41702e:	f50d 7a10 	add.w	sl, sp, #576	; 0x240
  417032:	9301      	str	r3, [sp, #4]
  417034:	461a      	mov	r2, r3
  417036:	4651      	mov	r1, sl
  417038:	4640      	mov	r0, r8
  41703a:	f007 f819 	bl	41e070 <.LFE4>

0041703e <.LVL780>:
  41703e:	9a05      	ldr	r2, [sp, #20]
  417040:	9900      	ldr	r1, [sp, #0]
  417042:	9801      	ldr	r0, [sp, #4]
  417044:	f7ff f809 	bl	41605a <.LFE39>

00417048 <.LVL781>:
    fp_copy((fp_int*) ( ((wolfssl_word)&R[0] & wc_off_on_addr[y^1]) +
  417048:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
  41704c:	ea08 0303 	and.w	r3, r8, r3
                        ((wolfssl_word)&R[1] & wc_off_on_addr[y]) ),
  417050:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
  417054:	ea0a 0404 	and.w	r4, sl, r4
    fp_copy((fp_int*) ( ((wolfssl_word)&R[0] & wc_off_on_addr[y^1]) +
  417058:	441c      	add	r4, r3
  41705a:	f50d 638d 	add.w	r3, sp, #1128	; 0x468
  41705e:	4619      	mov	r1, r3
  417060:	4620      	mov	r0, r4
  417062:	f007 fa0d 	bl	41e480 <.LFE185>

00417066 <.LVL782>:
    fp_sqr(&R[2], &R[2]);          fp_montgomery_reduce(&R[2], P, mp);
  417066:	f50d 638d 	add.w	r3, sp, #1128	; 0x468
  41706a:	4619      	mov	r1, r3
  41706c:	4618      	mov	r0, r3
  41706e:	f007 f857 	bl	41e120 <.LFE1>

00417072 <.LVL783>:
  417072:	9a05      	ldr	r2, [sp, #20]
  417074:	9900      	ldr	r1, [sp, #0]
  417076:	f50d 608d 	add.w	r0, sp, #1128	; 0x468
  41707a:	f7fe ffee 	bl	41605a <.LFE39>

0041707e <.LVL784>:
    fp_copy(&R[2],
  41707e:	4621      	mov	r1, r4
  417080:	f50d 608d 	add.w	r0, sp, #1128	; 0x468
  417084:	f007 f9fc 	bl	41e480 <.LFE185>

00417088 <.LVL785>:
    if (--bitcnt == 0) {
  417088:	3e01      	subs	r6, #1

0041708a <.LVL786>:
  41708a:	d1c8      	bne.n	41701e <.LVL777>

0041708c <.LVL787>:
      if (digidx == -1) {
  41708c:	f1b9 3fff 	cmp.w	r9, #4294967295
  417090:	d008      	beq.n	4170a4 <.LVL792>

00417092 <.LVL788>:
      buf    = X->dp[digidx--];
  417092:	f109 0302 	add.w	r3, r9, #2

00417096 <.LVL789>:
  417096:	9a02      	ldr	r2, [sp, #8]
  417098:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]

0041709c <.LVL790>:
  41709c:	f109 39ff 	add.w	r9, r9, #4294967295

004170a0 <.LVL791>:
      bitcnt = (int)DIGIT_BIT;
  4170a0:	2620      	movs	r6, #32
  4170a2:	e7bc      	b.n	41701e <.LVL777>

004170a4 <.LVL792>:
   fp_montgomery_reduce(&R[0], P, mp);
  4170a4:	9a05      	ldr	r2, [sp, #20]
  4170a6:	9900      	ldr	r1, [sp, #0]
  4170a8:	a806      	add	r0, sp, #24
  4170aa:	f7fe ffd6 	bl	41605a <.LFE39>

004170ae <.LVL793>:
   fp_copy(&R[0], Y);
  4170ae:	9903      	ldr	r1, [sp, #12]
  4170b0:	a806      	add	r0, sp, #24
  4170b2:	f007 f9e5 	bl	41e480 <.LFE185>

004170b6 <.LVL794>:
   return FP_OKAY;
  4170b6:	e77d      	b.n	416fb4 <.LVL760>
  4170b8:	0041ef78 	.word	0x0041ef78

Disassembly of section .text.USART1_InterruptHandler%130:

004170bc <USART1_InterruptHandler>:

    return;
}

void USART1_InterruptHandler( void )
{
  4170bc:	b570      	push	{r4, r5, r6, lr}

004170be <.LCFI0>:
    /* Error status */
    uint32_t errorStatus = (USART1_REGS->US_CSR & (US_CSR_OVRE_Msk | US_CSR_FRAME_Msk | US_CSR_PARE_Msk));
  4170be:	4b46      	ldr	r3, [pc, #280]	; (4171d8 <.LBB11+0xe>)
  4170c0:	695b      	ldr	r3, [r3, #20]

004170c2 <.LVL0>:

    if(errorStatus != 0)
  4170c2:	f013 0fe0 	tst.w	r3, #224	; 0xe0
  4170c6:	d00e      	beq.n	4170e6 <.LVL1+0x1c>
    {
        /* Client must call USARTx_ErrorGet() function to clear the errors */

        /* USART errors are normally associated with the receiver, hence calling
         * receiver context */
        if( usart1Obj.rxCallback != NULL )
  4170c8:	4b44      	ldr	r3, [pc, #272]	; (4171dc <.LBB11+0x12>)

004170ca <.LVL1>:
  4170ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4170cc:	b113      	cbz	r3, 4170d4 <.LVL1+0xa>
        {
            usart1Obj.rxCallback(usart1Obj.rxContext);
  4170ce:	4a43      	ldr	r2, [pc, #268]	; (4171dc <.LBB11+0x12>)
  4170d0:	6a90      	ldr	r0, [r2, #40]	; 0x28
  4170d2:	4798      	blx	r3
        }

        usart1Obj.rxBusyStatus = false;
  4170d4:	4b41      	ldr	r3, [pc, #260]	; (4171dc <.LBB11+0x12>)
  4170d6:	2200      	movs	r2, #0
  4170d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        usart1Obj.rxSize = 0;
  4170dc:	61da      	str	r2, [r3, #28]
        usart1Obj.rxProcessedSize = 0;
  4170de:	621a      	str	r2, [r3, #32]

        /* Disable Read, Overrun, Parity and Framing error interrupts */
        USART1_REGS->US_IDR = (US_IDR_RXRDY_Msk | US_IDR_FRAME_Msk | US_IDR_PARE_Msk | US_IDR_OVRE_Msk);
  4170e0:	22e1      	movs	r2, #225	; 0xe1
  4170e2:	4b3d      	ldr	r3, [pc, #244]	; (4171d8 <.LBB11+0xe>)
  4170e4:	60da      	str	r2, [r3, #12]
    }

    /* Receiver status */
    if(US_CSR_RXRDY_Msk == (USART1_REGS->US_CSR& US_CSR_RXRDY_Msk))
  4170e6:	4b3c      	ldr	r3, [pc, #240]	; (4171d8 <.LBB11+0xe>)
  4170e8:	695b      	ldr	r3, [r3, #20]
  4170ea:	f013 0f01 	tst.w	r3, #1
  4170ee:	d105      	bne.n	4170fc <.LBB6>
    {
        USART1_ISR_RX_Handler();
    }

    /* Transmitter status */
    if(US_CSR_TXEMPTY_Msk == (USART1_REGS->US_CSR& US_CSR_TXEMPTY_Msk))
  4170f0:	4b39      	ldr	r3, [pc, #228]	; (4171d8 <.LBB11+0xe>)
  4170f2:	695b      	ldr	r3, [r3, #20]
  4170f4:	f413 7f00 	tst.w	r3, #512	; 0x200
  4170f8:	d134      	bne.n	417164 <.LBB8>
  4170fa:	bd70      	pop	{r4, r5, r6, pc}

004170fc <.LBB6>:
    if(usart1Obj.rxBusyStatus == true)
  4170fc:	4b37      	ldr	r3, [pc, #220]	; (4171dc <.LBB11+0x12>)
  4170fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
  417102:	2b00      	cmp	r3, #0
  417104:	d0f4      	beq.n	4170f0 <.LVL1+0x26>
        while((US_CSR_RXRDY_Msk == (USART1_REGS->US_CSR& US_CSR_RXRDY_Msk)) && (usart1Obj.rxSize > usart1Obj.rxProcessedSize) )
  417106:	4b34      	ldr	r3, [pc, #208]	; (4171d8 <.LBB11+0xe>)
  417108:	695b      	ldr	r3, [r3, #20]
  41710a:	f013 0f01 	tst.w	r3, #1
  41710e:	d023      	beq.n	417158 <.LBB6+0x5c>
  417110:	4a32      	ldr	r2, [pc, #200]	; (4171dc <.LBB11+0x12>)
  417112:	6a13      	ldr	r3, [r2, #32]
  417114:	69d2      	ldr	r2, [r2, #28]
  417116:	429a      	cmp	r2, r3
  417118:	d90e      	bls.n	417138 <.LBB6+0x3c>
            usart1Obj.rxBuffer[usart1Obj.rxProcessedSize++] = (USART1_REGS->US_RHR& US_RHR_RXCHR_Msk);
  41711a:	4a30      	ldr	r2, [pc, #192]	; (4171dc <.LBB11+0x12>)
  41711c:	492e      	ldr	r1, [pc, #184]	; (4171d8 <.LBB11+0xe>)
  41711e:	6990      	ldr	r0, [r2, #24]
  417120:	1c5c      	adds	r4, r3, #1
  417122:	6214      	str	r4, [r2, #32]
  417124:	698c      	ldr	r4, [r1, #24]
  417126:	54c4      	strb	r4, [r0, r3]
        while((US_CSR_RXRDY_Msk == (USART1_REGS->US_CSR& US_CSR_RXRDY_Msk)) && (usart1Obj.rxSize > usart1Obj.rxProcessedSize) )
  417128:	694b      	ldr	r3, [r1, #20]
  41712a:	f013 0f01 	tst.w	r3, #1
  41712e:	d013      	beq.n	417158 <.LBB6+0x5c>
  417130:	6a13      	ldr	r3, [r2, #32]
  417132:	69d0      	ldr	r0, [r2, #28]
  417134:	4283      	cmp	r3, r0
  417136:	d3f2      	bcc.n	41711e <.LBB6+0x22>
            usart1Obj.rxBusyStatus = false;
  417138:	4b28      	ldr	r3, [pc, #160]	; (4171dc <.LBB11+0x12>)
  41713a:	2200      	movs	r2, #0
  41713c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            usart1Obj.rxSize = 0;
  417140:	61da      	str	r2, [r3, #28]
            usart1Obj.rxProcessedSize = 0;
  417142:	621a      	str	r2, [r3, #32]
            USART1_REGS->US_IDR = (US_IDR_RXRDY_Msk | US_IDR_FRAME_Msk | US_IDR_PARE_Msk | US_IDR_OVRE_Msk);
  417144:	21e1      	movs	r1, #225	; 0xe1
  417146:	4a24      	ldr	r2, [pc, #144]	; (4171d8 <.LBB11+0xe>)
  417148:	60d1      	str	r1, [r2, #12]
            if(usart1Obj.rxCallback != NULL)
  41714a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  41714c:	2b00      	cmp	r3, #0
  41714e:	d0cf      	beq.n	4170f0 <.LVL1+0x26>
                usart1Obj.rxCallback(usart1Obj.rxContext);
  417150:	4a22      	ldr	r2, [pc, #136]	; (4171dc <.LBB11+0x12>)
  417152:	6a90      	ldr	r0, [r2, #40]	; 0x28
  417154:	4798      	blx	r3
  417156:	e7cb      	b.n	4170f0 <.LVL1+0x26>
        if(usart1Obj.rxProcessedSize >= usart1Obj.rxSize)
  417158:	4b20      	ldr	r3, [pc, #128]	; (4171dc <.LBB11+0x12>)
  41715a:	6a1a      	ldr	r2, [r3, #32]
  41715c:	69db      	ldr	r3, [r3, #28]
  41715e:	429a      	cmp	r2, r3
  417160:	d3c6      	bcc.n	4170f0 <.LVL1+0x26>
  417162:	e7e9      	b.n	417138 <.LBB6+0x3c>

00417164 <.LBB8>:
    if(usart1Obj.txBusyStatus == true)
  417164:	4b1d      	ldr	r3, [pc, #116]	; (4171dc <.LBB11+0x12>)
  417166:	7d1b      	ldrb	r3, [r3, #20]
  417168:	2b00      	cmp	r3, #0
  41716a:	d0c6      	beq.n	4170fa <.LVL1+0x30>
        while((US_CSR_TXEMPTY_Msk == (USART1_REGS->US_CSR& US_CSR_TXEMPTY_Msk)) && (usart1Obj.txSize > usart1Obj.txProcessedSize) )
  41716c:	4b1a      	ldr	r3, [pc, #104]	; (4171d8 <.LBB11+0xe>)
  41716e:	695b      	ldr	r3, [r3, #20]
  417170:	f413 7f00 	tst.w	r3, #512	; 0x200
  417174:	d029      	beq.n	4171ca <.LBB11>
  417176:	4b19      	ldr	r3, [pc, #100]	; (4171dc <.LBB11+0x12>)
  417178:	685d      	ldr	r5, [r3, #4]
  41717a:	689b      	ldr	r3, [r3, #8]
  41717c:	429d      	cmp	r5, r3
  41717e:	d914      	bls.n	4171aa <.LBB8+0x46>
            USART1_REGS->US_THR|= usart1Obj.txBuffer[usart1Obj.txProcessedSize++];
  417180:	4a16      	ldr	r2, [pc, #88]	; (4171dc <.LBB11+0x12>)
  417182:	6814      	ldr	r4, [r2, #0]
  417184:	4423      	add	r3, r4
  417186:	4425      	add	r5, r4
  417188:	4616      	mov	r6, r2
  41718a:	f1c4 0401 	rsb	r4, r4, #1
  41718e:	4912      	ldr	r1, [pc, #72]	; (4171d8 <.LBB11+0xe>)
  417190:	18e2      	adds	r2, r4, r3
  417192:	60b2      	str	r2, [r6, #8]
  417194:	f813 2b01 	ldrb.w	r2, [r3], #1
  417198:	69c8      	ldr	r0, [r1, #28]
  41719a:	4302      	orrs	r2, r0
  41719c:	61ca      	str	r2, [r1, #28]
        while((US_CSR_TXEMPTY_Msk == (USART1_REGS->US_CSR& US_CSR_TXEMPTY_Msk)) && (usart1Obj.txSize > usart1Obj.txProcessedSize) )
  41719e:	694a      	ldr	r2, [r1, #20]
  4171a0:	f412 7f00 	tst.w	r2, #512	; 0x200
  4171a4:	d011      	beq.n	4171ca <.LBB11>
  4171a6:	429d      	cmp	r5, r3
  4171a8:	d1f2      	bne.n	417190 <.LBB8+0x2c>
            usart1Obj.txBusyStatus = false;
  4171aa:	4b0c      	ldr	r3, [pc, #48]	; (4171dc <.LBB11+0x12>)
  4171ac:	2200      	movs	r2, #0
  4171ae:	751a      	strb	r2, [r3, #20]
            usart1Obj.txSize = 0;
  4171b0:	605a      	str	r2, [r3, #4]
            usart1Obj.txProcessedSize = 0;
  4171b2:	609a      	str	r2, [r3, #8]
            USART1_REGS->US_IDR = US_IDR_TXEMPTY_Msk;
  4171b4:	f44f 7100 	mov.w	r1, #512	; 0x200
  4171b8:	4a07      	ldr	r2, [pc, #28]	; (4171d8 <.LBB11+0xe>)
  4171ba:	60d1      	str	r1, [r2, #12]
            if(usart1Obj.txCallback != NULL)
  4171bc:	68db      	ldr	r3, [r3, #12]
  4171be:	2b00      	cmp	r3, #0
  4171c0:	d09b      	beq.n	4170fa <.LVL1+0x30>
                usart1Obj.txCallback(usart1Obj.txContext);
  4171c2:	4a06      	ldr	r2, [pc, #24]	; (4171dc <.LBB11+0x12>)
  4171c4:	6910      	ldr	r0, [r2, #16]
  4171c6:	4798      	blx	r3

004171c8 <.LBE8>:
    {
        USART1_ISR_TX_Handler();
    }

    return;
  4171c8:	e797      	b.n	4170fa <.LVL1+0x30>

004171ca <.LBB11>:
        if(usart1Obj.txProcessedSize >= usart1Obj.txSize)
  4171ca:	4b04      	ldr	r3, [pc, #16]	; (4171dc <.LBB11+0x12>)
  4171cc:	689a      	ldr	r2, [r3, #8]
  4171ce:	685b      	ldr	r3, [r3, #4]
  4171d0:	429a      	cmp	r2, r3
  4171d2:	d392      	bcc.n	4170fa <.LVL1+0x30>
  4171d4:	e7e9      	b.n	4171aa <.LBB8+0x46>
  4171d6:	bf00      	nop
  4171d8:	40028000 	.word	0x40028000
  4171dc:	20400020 	.word	0x20400020

Disassembly of section .text.__multiply%131:

004171e0 <__multiply>:
  4171e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

004171e4 <.LCFI7>:
  4171e4:	690c      	ldr	r4, [r1, #16]
  4171e6:	6915      	ldr	r5, [r2, #16]
  4171e8:	42ac      	cmp	r4, r5
  4171ea:	b083      	sub	sp, #12

004171ec <.LCFI8>:
  4171ec:	468b      	mov	fp, r1
  4171ee:	4616      	mov	r6, r2
  4171f0:	da04      	bge.n	4171fc <.LVL110>
  4171f2:	4622      	mov	r2, r4

004171f4 <.LVL108>:
  4171f4:	46b3      	mov	fp, r6
  4171f6:	462c      	mov	r4, r5
  4171f8:	460e      	mov	r6, r1

004171fa <.LVL109>:
  4171fa:	4615      	mov	r5, r2

004171fc <.LVL110>:
  4171fc:	f8db 3008 	ldr.w	r3, [fp, #8]
  417200:	f8db 1004 	ldr.w	r1, [fp, #4]

00417204 <.LVL111>:
  417204:	eb04 0805 	add.w	r8, r4, r5

00417208 <.LVL112>:
  417208:	4598      	cmp	r8, r3
  41720a:	bfc8      	it	gt
  41720c:	3101      	addgt	r1, #1
  41720e:	f006 f81d 	bl	41d24c <.LFE2>

00417212 <.LVL114>:
  417212:	f100 0914 	add.w	r9, r0, #20
  417216:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  41721a:	45d1      	cmp	r9, sl
  41721c:	9000      	str	r0, [sp, #0]

0041721e <.LVL115>:
  41721e:	d205      	bcs.n	41722c <.LVL118>
  417220:	464b      	mov	r3, r9
  417222:	2100      	movs	r1, #0

00417224 <.LVL116>:
  417224:	f843 1b04 	str.w	r1, [r3], #4
  417228:	459a      	cmp	sl, r3
  41722a:	d8fb      	bhi.n	417224 <.LVL116>

0041722c <.LVL118>:
  41722c:	f106 0c14 	add.w	ip, r6, #20
  417230:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  417234:	f10b 0b14 	add.w	fp, fp, #20

00417238 <.LVL119>:
  417238:	459c      	cmp	ip, r3
  41723a:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2

0041723e <.LVL120>:
  41723e:	d24c      	bcs.n	4172da <.LVL144>
  417240:	f8cd a004 	str.w	sl, [sp, #4]
  417244:	469a      	mov	sl, r3

00417246 <.LVL121>:
  417246:	f8dc 5000 	ldr.w	r5, [ip]
  41724a:	b2af      	uxth	r7, r5

0041724c <.LVL122>:
  41724c:	b1ef      	cbz	r7, 41728a <.LVL130>
  41724e:	2100      	movs	r1, #0
  417250:	464d      	mov	r5, r9
  417252:	465e      	mov	r6, fp
  417254:	460c      	mov	r4, r1

00417256 <.LVL123>:
  417256:	f856 2b04 	ldr.w	r2, [r6], #4

0041725a <.LVL124>:
  41725a:	6828      	ldr	r0, [r5, #0]
  41725c:	b293      	uxth	r3, r2
  41725e:	b281      	uxth	r1, r0
  417260:	fb07 1303 	mla	r3, r7, r3, r1
  417264:	0c12      	lsrs	r2, r2, #16
  417266:	0c01      	lsrs	r1, r0, #16
  417268:	4423      	add	r3, r4

0041726a <.LVL125>:
  41726a:	fb07 1102 	mla	r1, r7, r2, r1
  41726e:	eb01 4113 	add.w	r1, r1, r3, lsr #16

00417272 <.LVL126>:
  417272:	b29b      	uxth	r3, r3

00417274 <.LVL127>:
  417274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  417278:	45b6      	cmp	lr, r6
  41727a:	f845 3b04 	str.w	r3, [r5], #4

0041727e <.LVL128>:
  41727e:	ea4f 4411 	mov.w	r4, r1, lsr #16

00417282 <.LVL129>:
  417282:	d8e8      	bhi.n	417256 <.LVL123>
  417284:	602c      	str	r4, [r5, #0]
  417286:	f8dc 5000 	ldr.w	r5, [ip]

0041728a <.LVL130>:
  41728a:	0c2d      	lsrs	r5, r5, #16

0041728c <.LVL131>:
  41728c:	d01d      	beq.n	4172ca <.LVL141>

0041728e <.LVL132>:
  41728e:	f8d9 3000 	ldr.w	r3, [r9]

00417292 <.LVL133>:
  417292:	4648      	mov	r0, r9
  417294:	461c      	mov	r4, r3
  417296:	4659      	mov	r1, fp
  417298:	2200      	movs	r2, #0

0041729a <.LVL134>:
  41729a:	880e      	ldrh	r6, [r1, #0]
  41729c:	0c24      	lsrs	r4, r4, #16
  41729e:	fb05 4406 	mla	r4, r5, r6, r4
  4172a2:	4422      	add	r2, r4

004172a4 <.LVL135>:
  4172a4:	b29b      	uxth	r3, r3

004172a6 <.LVL136>:
  4172a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4172aa:	f840 3b04 	str.w	r3, [r0], #4

004172ae <.LVL137>:
  4172ae:	f851 3b04 	ldr.w	r3, [r1], #4

004172b2 <.LVL138>:
  4172b2:	6804      	ldr	r4, [r0, #0]
  4172b4:	0c1b      	lsrs	r3, r3, #16
  4172b6:	b2a6      	uxth	r6, r4
  4172b8:	fb05 6303 	mla	r3, r5, r3, r6
  4172bc:	eb03 4312 	add.w	r3, r3, r2, lsr #16

004172c0 <.LVL139>:
  4172c0:	458e      	cmp	lr, r1
  4172c2:	ea4f 4213 	mov.w	r2, r3, lsr #16

004172c6 <.LVL140>:
  4172c6:	d8e8      	bhi.n	41729a <.LVL134>
  4172c8:	6003      	str	r3, [r0, #0]

004172ca <.LVL141>:
  4172ca:	f10c 0c04 	add.w	ip, ip, #4
  4172ce:	45e2      	cmp	sl, ip
  4172d0:	f109 0904 	add.w	r9, r9, #4
  4172d4:	d8b7      	bhi.n	417246 <.LVL121>
  4172d6:	f8dd a004 	ldr.w	sl, [sp, #4]

004172da <.LVL144>:
  4172da:	f1b8 0f00 	cmp.w	r8, #0
  4172de:	dd0b      	ble.n	4172f8 <.LVL149>
  4172e0:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  4172e4:	f1aa 0a04 	sub.w	sl, sl, #4
  4172e8:	b11b      	cbz	r3, 4172f2 <.LVL147>
  4172ea:	e005      	b.n	4172f8 <.LVL149>
  4172ec:	f85a 3d04 	ldr.w	r3, [sl, #-4]!

004172f0 <.LVL146>:
  4172f0:	b913      	cbnz	r3, 4172f8 <.LVL149>

004172f2 <.LVL147>:
  4172f2:	f1b8 0801 	subs.w	r8, r8, #1

004172f6 <.LVL148>:
  4172f6:	d1f9      	bne.n	4172ec <.LVL144+0x12>

004172f8 <.LVL149>:
  4172f8:	9800      	ldr	r0, [sp, #0]
  4172fa:	f8c0 8010 	str.w	r8, [r0, #16]
  4172fe:	b003      	add	sp, #12

00417300 <.LCFI9>:
  417300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section .text.fp_mul_comba%132:

00417304 <fp_mul_comba>:
{
  417304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00417308 <.LCFI64>:
  417308:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254

0041730c <.LCFI65>:
  41730c:	4605      	mov	r5, r0
  41730e:	9007      	str	r0, [sp, #28]
  417310:	460e      	mov	r6, r1
  417312:	9108      	str	r1, [sp, #32]
  417314:	9209      	str	r2, [sp, #36]	; 0x24

00417316 <.LVL421>:
   pa = A->used + B->used;
  417316:	6803      	ldr	r3, [r0, #0]
  417318:	680a      	ldr	r2, [r1, #0]

0041731a <.LVL422>:
  41731a:	4413      	add	r3, r2

0041731c <.LVL423>:
  41731c:	2b87      	cmp	r3, #135	; 0x87
  41731e:	bfa8      	it	ge
  417320:	2387      	movge	r3, #135	; 0x87

00417322 <.LVL424>:
  417322:	461c      	mov	r4, r3
  417324:	9302      	str	r3, [sp, #8]

00417326 <.LBB52>:
    fp_zero(a);
  417326:	a80a      	add	r0, sp, #40	; 0x28

00417328 <.LVL426>:
  417328:	f007 fc00 	bl	41eb2c <.LFE154>

0041732c <.LBE52>:
   for (ix = 0; ix < pa; ix++) {
  41732c:	2c00      	cmp	r4, #0
  41732e:	dd4b      	ble.n	4173c8 <.LVL451>
      ty = MIN(ix, B->used-1);
  417330:	4632      	mov	r2, r6
  417332:	f852 3b08 	ldr.w	r3, [r2], #8
  417336:	9206      	str	r2, [sp, #24]
  417338:	3b01      	subs	r3, #1
  41733a:	9303      	str	r3, [sp, #12]
      iy = MIN(A->used-tx, ty+1);
  41733c:	462b      	mov	r3, r5
  41733e:	f853 2b08 	ldr.w	r2, [r3], #8
  417342:	9204      	str	r2, [sp, #16]
  417344:	9305      	str	r3, [sp, #20]
  417346:	ab0b      	add	r3, sp, #44	; 0x2c
  417348:	9301      	str	r3, [sp, #4]
  41734a:	2500      	movs	r5, #0

0041734c <.LVL428>:
  41734c:	46ac      	mov	ip, r5
  41734e:	46ae      	mov	lr, r5
  417350:	e00b      	b.n	41736a <.LVL433>

00417352 <.LVL429>:
      for (iz = 0; iz < iy; ++iz) {
  417352:	4663      	mov	r3, ip
  417354:	46ac      	mov	ip, r5

00417356 <.LVL430>:
      COMBA_FORWARD;
  417356:	2500      	movs	r5, #0

00417358 <.LVL431>:
      COMBA_STORE(dst->dp[ix]);
  417358:	9a01      	ldr	r2, [sp, #4]
  41735a:	f842 3f04 	str.w	r3, [r2, #4]!
  41735e:	9201      	str	r2, [sp, #4]
   for (ix = 0; ix < pa; ix++) {
  417360:	f10e 0e01 	add.w	lr, lr, #1

00417364 <.LVL432>:
  417364:	9b02      	ldr	r3, [sp, #8]
  417366:	4573      	cmp	r3, lr
  417368:	d02e      	beq.n	4173c8 <.LVL451>

0041736a <.LVL433>:
      ty = MIN(ix, B->used-1);
  41736a:	9b03      	ldr	r3, [sp, #12]
  41736c:	4573      	cmp	r3, lr
  41736e:	bfa8      	it	ge
  417370:	4673      	movge	r3, lr
  417372:	461f      	mov	r7, r3

00417374 <.LVL434>:
      tx = ix - ty;
  417374:	ebae 0303 	sub.w	r3, lr, r3

00417378 <.LVL435>:
      tmpx = A->dp + tx;
  417378:	9a05      	ldr	r2, [sp, #20]
  41737a:	eb02 0483 	add.w	r4, r2, r3, lsl #2

0041737e <.LVL436>:
      tmpy = B->dp + ty;
  41737e:	9a06      	ldr	r2, [sp, #24]
  417380:	eb02 0687 	add.w	r6, r2, r7, lsl #2

00417384 <.LVL437>:
      iy = MIN(A->used-tx, ty+1);
  417384:	3701      	adds	r7, #1

00417386 <.LVL438>:
  417386:	9a04      	ldr	r2, [sp, #16]
  417388:	1ad3      	subs	r3, r2, r3

0041738a <.LVL439>:
  41738a:	429f      	cmp	r7, r3
  41738c:	bfa8      	it	ge
  41738e:	461f      	movge	r7, r3

00417390 <.LVL440>:
      for (iz = 0; iz < iy; ++iz) {
  417390:	2f00      	cmp	r7, #0
  417392:	ddde      	ble.n	417352 <.LVL429>
  417394:	2200      	movs	r2, #0
  417396:	4613      	mov	r3, r2

00417398 <.LBB54>:
          MULADD(_tmpx, _tmpy);
  417398:	f854 bb04 	ldr.w	fp, [r4], #4

0041739c <.LVL442>:
  41739c:	f856 a904 	ldr.w	sl, [r6], #-4

004173a0 <.LVL443>:
  4173a0:	4660      	mov	r0, ip
  4173a2:	2100      	movs	r1, #0
  4173a4:	fbea 010b 	umlal	r0, r1, sl, fp

004173a8 <.LVL444>:
  4173a8:	4684      	mov	ip, r0

004173aa <.LVL445>:
  4173aa:	f04f 0900 	mov.w	r9, #0
  4173ae:	eb11 0a05 	adds.w	sl, r1, r5
  4173b2:	f149 0b00 	adc.w	fp, r9, #0

004173b6 <.LVL446>:
  4173b6:	4655      	mov	r5, sl
  4173b8:	445a      	add	r2, fp

004173ba <.LBE54>:
      for (iz = 0; iz < iy; ++iz) {
  4173ba:	3301      	adds	r3, #1

004173bc <.LVL449>:
  4173bc:	429f      	cmp	r7, r3
  4173be:	d1eb      	bne.n	417398 <.LBB54>

004173c0 <.LBB57>:
          MULADD(_tmpx, _tmpy);
  4173c0:	4603      	mov	r3, r0

004173c2 <.LVL450>:
  4173c2:	46d4      	mov	ip, sl
  4173c4:	4615      	mov	r5, r2

004173c6 <.LBE57>:
  4173c6:	e7c7      	b.n	417358 <.LVL431>

004173c8 <.LVL451>:
  dst->used = pa;
  4173c8:	9902      	ldr	r1, [sp, #8]
  4173ca:	910a      	str	r1, [sp, #40]	; 0x28
  dst->sign = A->sign ^ B->sign;
  4173cc:	9b07      	ldr	r3, [sp, #28]
  4173ce:	685c      	ldr	r4, [r3, #4]
  4173d0:	9b08      	ldr	r3, [sp, #32]
  4173d2:	685b      	ldr	r3, [r3, #4]
  4173d4:	405c      	eors	r4, r3
  4173d6:	940b      	str	r4, [sp, #44]	; 0x2c
  fp_clamp(dst);
  4173d8:	460b      	mov	r3, r1
  4173da:	b1f1      	cbz	r1, 41741a <.LCFI67+0x4>
  4173dc:	1e4a      	subs	r2, r1, #1
  4173de:	3301      	adds	r3, #1
  4173e0:	a80a      	add	r0, sp, #40	; 0x28

004173e2 <.LVL452>:
  4173e2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  4173e6:	b96b      	cbnz	r3, 417404 <.LVL453+0x1a>
  4173e8:	a894      	add	r0, sp, #592	; 0x250

004173ea <.LVL453>:
  4173ea:	eb00 0381 	add.w	r3, r0, r1, lsl #2
  4173ee:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
  4173f2:	e000      	b.n	4173f6 <.LVL453+0xc>
  4173f4:	4602      	mov	r2, r0
  4173f6:	b172      	cbz	r2, 417416 <.LCFI67>
  4173f8:	1e50      	subs	r0, r2, #1
  4173fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  4173fe:	2900      	cmp	r1, #0
  417400:	d0f8      	beq.n	4173f4 <.LVL453+0xa>
  417402:	920a      	str	r2, [sp, #40]	; 0x28
  417404:	940b      	str	r4, [sp, #44]	; 0x2c
  fp_copy(dst, C);
  417406:	9909      	ldr	r1, [sp, #36]	; 0x24
  417408:	a80a      	add	r0, sp, #40	; 0x28

0041740a <.LVL454>:
  41740a:	f007 f839 	bl	41e480 <.LFE185>

0041740e <.LVL455>:
}
  41740e:	f50d 7d15 	add.w	sp, sp, #596	; 0x254

00417412 <.LCFI66>:
  417412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00417416 <.LCFI67>:
  417416:	2300      	movs	r3, #0
  417418:	930a      	str	r3, [sp, #40]	; 0x28
  fp_clamp(dst);
  41741a:	2400      	movs	r4, #0
  41741c:	e7f2      	b.n	417404 <.LVL453+0x1a>

Disassembly of section .text.Reset_Handler%133:

00417420 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void __attribute__((optimize("-O1"), section(".text.Reset_Handler"), long_call)) Reset_Handler(void)
{
  417420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

00417422 <.LCFI0>:
    uint32_t *pSrc;

    /* Call the optional application-provided _on_reset() function. */
    if (_on_reset)
  417422:	4b3e      	ldr	r3, [pc, #248]	; (41751c <.LVL15+0x2>)
  417424:	b103      	cbz	r3, 417428 <.LVL0>
    {
        _on_reset();
  417426:	4798      	blx	r3

00417428 <.LVL0>:
    }

    /* Reserved for use by MPLAB XC32. */
    if (__xc32_on_reset)
  417428:	4b3d      	ldr	r3, [pc, #244]	; (417520 <.LVL15+0x6>)
  41742a:	b103      	cbz	r3, 41742e <.LBB143>
        __xc32_on_reset();
  41742c:	4798      	blx	r3

0041742e <.LBB143>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  41742e:	f3ef 8110 	mrs	r1, PRIMASK

00417432 <.LBB147>:
  __ASM volatile ("cpsid i" : : : "memory");
  417432:	b672      	cpsid	i

00417434 <.LBE147>:
     SCB->CPACR |= (0xFu << 20);
  417434:	4a3b      	ldr	r2, [pc, #236]	; (417524 <.LVL15+0xa>)
  417436:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  41743a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  41743e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

00417442 <.LBB149>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  417442:	f3bf 8f4f 	dsb	sy

00417446 <.LBB151>:
  __ASM volatile ("isb 0xF":::"memory");
  417446:	f3bf 8f6f 	isb	sy

0041744a <.LBE151>:
    if (!prim)
  41744a:	b901      	cbnz	r1, 41744e <.LBB155>

0041744c <.LBB153>:
  __ASM volatile ("cpsie i" : : : "memory");
  41744c:	b662      	cpsie	i

0041744e <.LBB155>:
  __ASM volatile ("dsb 0xF":::"memory");
  41744e:	f3bf 8f4f 	dsb	sy

00417452 <.LBB159>:
  __ASM volatile ("isb 0xF":::"memory");
  417452:	f3bf 8f6f 	isb	sy

00417456 <.LBE159>:
    SCB->ITCMCR &= ~(uint32_t)SCB_ITCMCR_EN_Msk;
  417456:	4c33      	ldr	r4, [pc, #204]	; (417524 <.LVL15+0xa>)
  417458:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  41745c:	f023 0301 	bic.w	r3, r3, #1
  417460:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
    SCB->DTCMCR &= ~(uint32_t)SCB_ITCMCR_EN_Msk;
  417464:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
  417468:	f023 0301 	bic.w	r3, r3, #1
  41746c:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

00417470 <.LBB161>:
  __ASM volatile ("dsb 0xF":::"memory");
  417470:	f3bf 8f4f 	dsb	sy

00417474 <.LBB163>:
  __ASM volatile ("isb 0xF":::"memory");
  417474:	f3bf 8f6f 	isb	sy

00417478 <.LBE155>:
    /* Disable TCM  */
    TCM_Disable();

    /* Initialize data after TCM is enabled.
     * Data initialization from the XC32 .dinit template */
    __pic32c_data_initialization();
  417478:	f003 fa32 	bl	41a8e0 <.LFE154>

0041747c <.LVL2>:
	

#  ifdef SCB_VTOR_TBLOFF_Msk
    /*  Set the vector-table base address in FLASH */
    pSrc = (uint32_t *) & __svectors;
    SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  41747c:	4b2a      	ldr	r3, [pc, #168]	; (417528 <.LVL15+0xe>)
  41747e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  417482:	60a3      	str	r3, [r4, #8]
#  endif /* SCB_VTOR_TBLOFF_Msk */

    /* Initialize the C library */
    __libc_init_array();
  417484:	4b29      	ldr	r3, [pc, #164]	; (41752c <.LVL15+0x12>)
  417486:	4798      	blx	r3

00417488 <.LBB165>:
  __ASM volatile ("dsb 0xF":::"memory");
  417488:	f3bf 8f4f 	dsb	sy

0041748c <.LBB170>:
  __ASM volatile ("isb 0xF":::"memory");
  41748c:	f3bf 8f6f 	isb	sy

00417490 <.LBE170>:
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  417490:	2200      	movs	r2, #0
  417492:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250

00417496 <.LBB172>:
  __ASM volatile ("dsb 0xF":::"memory");
  417496:	f3bf 8f4f 	dsb	sy

0041749a <.LBB174>:
  __ASM volatile ("isb 0xF":::"memory");
  41749a:	f3bf 8f6f 	isb	sy

0041749e <.LBE174>:
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  41749e:	6963      	ldr	r3, [r4, #20]
  4174a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  4174a4:	6163      	str	r3, [r4, #20]

004174a6 <.LBB176>:
  __ASM volatile ("dsb 0xF":::"memory");
  4174a6:	f3bf 8f4f 	dsb	sy

004174aa <.LBB178>:
  __ASM volatile ("isb 0xF":::"memory");
  4174aa:	f3bf 8f6f 	isb	sy

004174ae <.LBB180>:
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  4174ae:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84

004174b2 <.LBB183>:
  __ASM volatile ("dsb 0xF":::"memory");
  4174b2:	f3bf 8f4f 	dsb	sy

004174b6 <.LBE183>:
    __DSB();

    ccsidr = SCB->CCSIDR;
  4174b6:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80

004174ba <.LVL4>:

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  4174ba:	f3c5 364e 	ubfx	r6, r5, #13, #15

004174be <.LVL5>:
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  4174be:	f3c5 05c9 	ubfx	r5, r5, #3, #10

004174c2 <.LVL6>:
  4174c2:	0177      	lsls	r7, r6, #5
  4174c4:	ea4f 7c85 	mov.w	ip, r5, lsl #30
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  4174c8:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  4174cc:	4620      	mov	r0, r4
  4174ce:	ea07 040e 	and.w	r4, r7, lr
  4174d2:	4662      	mov	r2, ip
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  4174d4:	462b      	mov	r3, r5

004174d6 <.LVL8>:
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  4174d6:	ea42 0104 	orr.w	r1, r2, r4
  4174da:	f8c0 1260 	str.w	r1, [r0, #608]	; 0x260
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
  4174de:	3b01      	subs	r3, #1
  4174e0:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
  4174e4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4174e8:	d1f5      	bne.n	4174d6 <.LVL8>
    } while(sets-- != 0U);
  4174ea:	3e01      	subs	r6, #1
  4174ec:	3f20      	subs	r7, #32
  4174ee:	f1b6 3fff 	cmp.w	r6, #4294967295
  4174f2:	d1ec      	bne.n	4174ce <.LVL6+0xc>

004174f4 <.LBB185>:
  4174f4:	f3bf 8f4f 	dsb	sy

004174f8 <.LBE185>:
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  4174f8:	4a0a      	ldr	r2, [pc, #40]	; (417524 <.LVL15+0xa>)
  4174fa:	6953      	ldr	r3, [r2, #20]

004174fc <.LVL11>:
  4174fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  417500:	6153      	str	r3, [r2, #20]

00417502 <.LBB187>:
  417502:	f3bf 8f4f 	dsb	sy

00417506 <.LBB189>:
  __ASM volatile ("isb 0xF":::"memory");
  417506:	f3bf 8f6f 	isb	sy

0041750a <.LBE180>:

    /* Enable Data Cache    */
    DCache_Enable();

    /* Call the optional application-provided _on_bootstrap() function. */
    if (_on_bootstrap)
  41750a:	4b09      	ldr	r3, [pc, #36]	; (417530 <.LVL15+0x16>)
  41750c:	b103      	cbz	r3, 417510 <.LVL13>
    {
        _on_bootstrap();
  41750e:	4798      	blx	r3

00417510 <.LVL13>:
    }

    /* Reserved for use by MPLAB XC32. */
    if (__xc32_on_bootstrap)
  417510:	4b08      	ldr	r3, [pc, #32]	; (417534 <.LVL15+0x1a>)
  417512:	b103      	cbz	r3, 417516 <.LVL14>
    {
        __xc32_on_bootstrap();
  417514:	4798      	blx	r3

00417516 <.LVL14>:
    }

    /* Branch to application's main function */
    main();
  417516:	f007 fc05 	bl	41ed24 <main>

0041751a <.LVL15>:
  41751a:	e7fe      	b.n	41751a <.LVL15>
	...
  417524:	e000ed00 	.word	0xe000ed00
  417528:	00400000 	.word	0x00400000
  41752c:	0041d035 	.word	0x0041d035
	...

Disassembly of section .text.DesProcessBlock%134:

00417538 <DesProcessBlock>:
    {
  417538:	b530      	push	{r4, r5, lr}

0041753a <.LCFI8>:
  41753a:	b083      	sub	sp, #12

0041753c <.LCFI9>:
  41753c:	4614      	mov	r4, r2
        XMEMCPY(&l, in, sizeof(l));
  41753e:	680b      	ldr	r3, [r1, #0]
        XMEMCPY(&r, in + sizeof(l), sizeof(r));
  417540:	6849      	ldr	r1, [r1, #4]

00417542 <.LBB202>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  417542:	0a1a      	lsrs	r2, r3, #8

00417544 <.LVL120>:
  417544:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
  417548:	021b      	lsls	r3, r3, #8

0041754a <.LVL121>:
  41754a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  41754e:	431a      	orrs	r2, r3

00417550 <.LBB204>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  417550:	ea4f 4232 	mov.w	r2, r2, ror #16

00417554 <.LBB206>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  417554:	0a0b      	lsrs	r3, r1, #8
  417556:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  41755a:	0209      	lsls	r1, r1, #8

0041755c <.LVL124>:
  41755c:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  417560:	430b      	orrs	r3, r1

00417562 <.LBB208>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  417562:	ea4f 3333 	mov.w	r3, r3, ror #12

00417566 <.LBE210>:
        work = (*left ^ *right) & 0xf0f0f0f0;
  417566:	ea82 0103 	eor.w	r1, r2, r3
  41756a:	f001 31f0 	and.w	r1, r1, #4042322160	; 0xf0f0f0f0

0041756e <.LVL126>:
        *left ^= work;
  41756e:	404a      	eors	r2, r1

00417570 <.LVL127>:
        *right = rotrFixed(*right^work, 20U);
  417570:	404b      	eors	r3, r1

00417572 <.LBB212>:
        return (x >> y) | (x << (sizeof(y) * 8 - y));
  417572:	ea4f 5333 	mov.w	r3, r3, ror #20

00417576 <.LBE212>:
        work = (*left ^ *right) & 0xffff0000;
  417576:	ea82 0103 	eor.w	r1, r2, r3

0041757a <.LVL130>:
  41757a:	4d34      	ldr	r5, [pc, #208]	; (41764c <.LVL178+0x2>)
  41757c:	4029      	ands	r1, r5

0041757e <.LVL131>:
        *left ^= work;
  41757e:	404a      	eors	r2, r1

00417580 <.LVL132>:
        *right = rotrFixed(*right^work, 18U);
  417580:	404b      	eors	r3, r1

00417582 <.LBB214>:
  417582:	ea4f 43b3 	mov.w	r3, r3, ror #18

00417586 <.LBE214>:
        work = (*left ^ *right) & 0x33333333;
  417586:	ea82 0103 	eor.w	r1, r2, r3

0041758a <.LVL135>:
  41758a:	f001 3133 	and.w	r1, r1, #858993459	; 0x33333333

0041758e <.LVL136>:
        *left ^= work;
  41758e:	404a      	eors	r2, r1

00417590 <.LVL137>:
        *right = rotrFixed(*right^work, 6U);
  417590:	404b      	eors	r3, r1

00417592 <.LBB216>:
  417592:	ea4f 13b3 	mov.w	r3, r3, ror #6

00417596 <.LBE216>:
        work = (*left ^ *right) & 0x00ff00ff;
  417596:	ea82 0103 	eor.w	r1, r2, r3

0041759a <.LVL140>:
  41759a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff

0041759e <.LVL141>:
        *left ^= work;
  41759e:	404a      	eors	r2, r1

004175a0 <.LVL142>:
        *right = rotlFixed(*right^work, 9U);
  4175a0:	404b      	eors	r3, r1

004175a2 <.LBB218>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  4175a2:	ea4f 53f3 	mov.w	r3, r3, ror #23

004175a6 <.LBE218>:
        work = (*left ^ *right) & 0xaaaaaaaa;
  4175a6:	ea82 0103 	eor.w	r1, r2, r3

004175aa <.LVL145>:
  4175aa:	f001 31aa 	and.w	r1, r1, #2863311530	; 0xaaaaaaaa

004175ae <.LVL146>:
        *left = rotlFixed(*left^work, 1U);
  4175ae:	404a      	eors	r2, r1

004175b0 <.LBB220>:
  4175b0:	ea4f 72f2 	mov.w	r2, r2, ror #31

004175b4 <.LBE220>:
  4175b4:	9201      	str	r2, [sp, #4]
        *right ^= work;
  4175b6:	404b      	eors	r3, r1
  4175b8:	a902      	add	r1, sp, #8

004175ba <.LVL147>:
  4175ba:	f841 3d08 	str.w	r3, [r1, #-8]!

004175be <.LBE208>:
        DesRawProcessBlock(&l, &r, des->key);
  4175be:	f100 0210 	add.w	r2, r0, #16
  4175c2:	a801      	add	r0, sp, #4

004175c4 <.LVL149>:
  4175c4:	f7ff f9fa 	bl	4169bc <L0>

004175c8 <.LBB222>:
        return (x >> y) | (x << (sizeof(y) * 8 - y));
  4175c8:	9a00      	ldr	r2, [sp, #0]
  4175ca:	ea4f 0272 	mov.w	r2, r2, ror #1

004175ce <.LBE224>:
        work = (*left ^ *right) & 0xaaaaaaaa;
  4175ce:	9b01      	ldr	r3, [sp, #4]
  4175d0:	ea82 0103 	eor.w	r1, r2, r3
  4175d4:	f001 31aa 	and.w	r1, r1, #2863311530	; 0xaaaaaaaa

004175d8 <.LVL152>:
        *right ^= work;
  4175d8:	404a      	eors	r2, r1

004175da <.LVL153>:
        *left = rotrFixed(*left^work, 9U);
  4175da:	404b      	eors	r3, r1

004175dc <.LBB226>:
  4175dc:	ea4f 2373 	mov.w	r3, r3, ror #9

004175e0 <.LBE226>:
        work = (*left ^ *right) & 0x00ff00ff;
  4175e0:	ea82 0103 	eor.w	r1, r2, r3

004175e4 <.LVL156>:
  4175e4:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff

004175e8 <.LVL157>:
        *right ^= work;
  4175e8:	404a      	eors	r2, r1

004175ea <.LVL158>:
        *left = rotlFixed(*left^work, 6U);
  4175ea:	404b      	eors	r3, r1

004175ec <.LBB228>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  4175ec:	ea4f 63b3 	mov.w	r3, r3, ror #26

004175f0 <.LBE228>:
        work = (*left ^ *right) & 0x33333333;
  4175f0:	ea82 0103 	eor.w	r1, r2, r3

004175f4 <.LVL161>:
  4175f4:	f001 3133 	and.w	r1, r1, #858993459	; 0x33333333

004175f8 <.LVL162>:
        *right ^= work;
  4175f8:	404a      	eors	r2, r1

004175fa <.LVL163>:
        *left = rotlFixed(*left^work, 18U);
  4175fa:	404b      	eors	r3, r1

004175fc <.LBB230>:
  4175fc:	ea4f 33b3 	mov.w	r3, r3, ror #14

00417600 <.LBE230>:
        work = (*left ^ *right) & 0xffff0000;
  417600:	ea82 0103 	eor.w	r1, r2, r3

00417604 <.LVL166>:
  417604:	400d      	ands	r5, r1

00417606 <.LVL167>:
        *right ^= work;
  417606:	406a      	eors	r2, r5

00417608 <.LVL168>:
        *left = rotlFixed(*left^work, 20U);
  417608:	406b      	eors	r3, r5

0041760a <.LBB232>:
  41760a:	ea4f 3333 	mov.w	r3, r3, ror #12

0041760e <.LBE232>:
        work = (*left ^ *right) & 0xf0f0f0f0;
  41760e:	ea82 0103 	eor.w	r1, r2, r3
  417612:	f001 31f0 	and.w	r1, r1, #4042322160	; 0xf0f0f0f0

00417616 <.LVL171>:
        *right ^= work;
  417616:	404a      	eors	r2, r1

00417618 <.LVL172>:
        *left = rotrFixed(*left^work, 4U);
  417618:	404b      	eors	r3, r1

0041761a <.LBB234>:
        return (x >> y) | (x << (sizeof(y) * 8 - y));
  41761a:	ea4f 1333 	mov.w	r3, r3, ror #4

0041761e <.LBB236>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  41761e:	0211      	lsls	r1, r2, #8
  417620:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  417624:	0a12      	lsrs	r2, r2, #8

00417626 <.LVL175>:
  417626:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
  41762a:	430a      	orrs	r2, r1

0041762c <.LBB238>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  41762c:	ea4f 4232 	mov.w	r2, r2, ror #16

00417630 <.LBE236>:
        XMEMCPY(out, &r, sizeof(r));
  417630:	6022      	str	r2, [r4, #0]

00417632 <.LBB240>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  417632:	0a1a      	lsrs	r2, r3, #8
  417634:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
  417638:	021b      	lsls	r3, r3, #8

0041763a <.LVL176>:
  41763a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  41763e:	4313      	orrs	r3, r2

00417640 <.LBB242>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  417640:	ea4f 4333 	mov.w	r3, r3, ror #16

00417644 <.LBE240>:
        XMEMCPY(out + sizeof(r), &l, sizeof(l));
  417644:	6063      	str	r3, [r4, #4]
    }
  417646:	b003      	add	sp, #12

00417648 <.LCFI10>:
  417648:	bd30      	pop	{r4, r5, pc}

0041764a <.LVL178>:
  41764a:	bf00      	nop
  41764c:	ffff0000 	.word	0xffff0000

Disassembly of section .text.__mdiff%135:

00417650 <__mdiff>:
  417650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

00417654 <.LBB30>:
  417654:	690f      	ldr	r7, [r1, #16]

00417656 <.LBE30>:
  417656:	460e      	mov	r6, r1

00417658 <.LBB35>:
  417658:	6911      	ldr	r1, [r2, #16]

0041765a <.LVL227>:
  41765a:	1a7f      	subs	r7, r7, r1

0041765c <.LVL228>:
  41765c:	2f00      	cmp	r7, #0

0041765e <.LBE35>:
  41765e:	4690      	mov	r8, r2

00417660 <.LBB36>:
  417660:	d117      	bne.n	417692 <.LVL243>
  417662:	0089      	lsls	r1, r1, #2
  417664:	f106 0514 	add.w	r5, r6, #20
  417668:	f102 0e14 	add.w	lr, r2, #20
  41766c:	186b      	adds	r3, r5, r1
  41766e:	4471      	add	r1, lr
  417670:	e001      	b.n	417676 <.LVL233+0x4>

00417672 <.LVL233>:
  417672:	429d      	cmp	r5, r3
  417674:	d25c      	bcs.n	417730 <.LVL274>
  417676:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  41767a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  41767e:	42a2      	cmp	r2, r4
  417680:	d0f7      	beq.n	417672 <.LVL233>
  417682:	d25e      	bcs.n	417742 <.LBB37>
  417684:	4633      	mov	r3, r6
  417686:	462c      	mov	r4, r5

00417688 <.LVL238>:
  417688:	4646      	mov	r6, r8

0041768a <.LVL239>:
  41768a:	4675      	mov	r5, lr
  41768c:	4698      	mov	r8, r3

0041768e <.LBE36>:
  41768e:	2701      	movs	r7, #1
  417690:	e005      	b.n	41769e <.LVL245>

00417692 <.LVL243>:
  417692:	db58      	blt.n	417746 <.LBE37>

00417694 <.LVL244>:
  417694:	f106 0514 	add.w	r5, r6, #20
  417698:	f108 0414 	add.w	r4, r8, #20
  41769c:	2700      	movs	r7, #0

0041769e <.LVL245>:
  41769e:	6871      	ldr	r1, [r6, #4]
  4176a0:	f005 fdd4 	bl	41d24c <.LFE2>

004176a4 <.LVL246>:
  4176a4:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4176a8:	6936      	ldr	r6, [r6, #16]

004176aa <.LVL247>:
  4176aa:	60c7      	str	r7, [r0, #12]
  4176ac:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  4176b0:	46a6      	mov	lr, r4
  4176b2:	eb05 0786 	add.w	r7, r5, r6, lsl #2

004176b6 <.LVL248>:
  4176b6:	f100 0414 	add.w	r4, r0, #20

004176ba <.LVL249>:
  4176ba:	2300      	movs	r3, #0

004176bc <.LVL250>:
  4176bc:	f85e 1b04 	ldr.w	r1, [lr], #4
  4176c0:	f855 8b04 	ldr.w	r8, [r5], #4

004176c4 <.LVL251>:
  4176c4:	b28a      	uxth	r2, r1
  4176c6:	fa13 f388 	uxtah	r3, r3, r8

004176ca <.LVL252>:
  4176ca:	0c09      	lsrs	r1, r1, #16
  4176cc:	1a9a      	subs	r2, r3, r2

004176ce <.LVL253>:
  4176ce:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  4176d2:	eb03 4322 	add.w	r3, r3, r2, asr #16

004176d6 <.LVL254>:
  4176d6:	b292      	uxth	r2, r2

004176d8 <.LVL255>:
  4176d8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4176dc:	45f4      	cmp	ip, lr
  4176de:	f844 2b04 	str.w	r2, [r4], #4

004176e2 <.LVL256>:
  4176e2:	ea4f 4323 	mov.w	r3, r3, asr #16

004176e6 <.LVL257>:
  4176e6:	d8e9      	bhi.n	4176bc <.LVL250>

004176e8 <.LVL258>:
  4176e8:	42af      	cmp	r7, r5
  4176ea:	d917      	bls.n	41771c <.LVL269>
  4176ec:	46a4      	mov	ip, r4

004176ee <.LVL259>:
  4176ee:	46ae      	mov	lr, r5

004176f0 <.LVL260>:
  4176f0:	f85e 2b04 	ldr.w	r2, [lr], #4

004176f4 <.LVL261>:
  4176f4:	fa13 f382 	uxtah	r3, r3, r2

004176f8 <.LVL262>:
  4176f8:	1419      	asrs	r1, r3, #16

004176fa <.LVL263>:
  4176fa:	eb01 4112 	add.w	r1, r1, r2, lsr #16

004176fe <.LVL264>:
  4176fe:	b29b      	uxth	r3, r3

00417700 <.LVL265>:
  417700:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  417704:	4577      	cmp	r7, lr
  417706:	f84c 2b04 	str.w	r2, [ip], #4

0041770a <.LVL266>:
  41770a:	ea4f 4321 	mov.w	r3, r1, asr #16

0041770e <.LVL267>:
  41770e:	d8ef      	bhi.n	4176f0 <.LVL260>
  417710:	43ed      	mvns	r5, r5
  417712:	442f      	add	r7, r5

00417714 <.LVL268>:
  417714:	f027 0703 	bic.w	r7, r7, #3
  417718:	3704      	adds	r7, #4
  41771a:	443c      	add	r4, r7

0041771c <.LVL269>:
  41771c:	3c04      	subs	r4, #4
  41771e:	b922      	cbnz	r2, 41772a <.LVL273+0x4>

00417720 <.LVL271>:
  417720:	f854 3d04 	ldr.w	r3, [r4, #-4]!

00417724 <.LVL272>:
  417724:	3e01      	subs	r6, #1

00417726 <.LVL273>:
  417726:	2b00      	cmp	r3, #0
  417728:	d0fa      	beq.n	417720 <.LVL271>
  41772a:	6106      	str	r6, [r0, #16]
  41772c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00417730 <.LVL274>:
  417730:	2100      	movs	r1, #0
  417732:	f005 fd8b 	bl	41d24c <.LFE2>

00417736 <.LVL275>:
  417736:	2201      	movs	r2, #1
  417738:	2300      	movs	r3, #0
  41773a:	6102      	str	r2, [r0, #16]
  41773c:	6143      	str	r3, [r0, #20]
  41773e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00417742 <.LBB37>:
  417742:	4674      	mov	r4, lr
  417744:	e7ab      	b.n	41769e <.LVL245>

00417746 <.LBE37>:
  417746:	4633      	mov	r3, r6
  417748:	f106 0414 	add.w	r4, r6, #20
  41774c:	f102 0514 	add.w	r5, r2, #20
  417750:	4616      	mov	r6, r2

00417752 <.LVL278>:
  417752:	2701      	movs	r7, #1
  417754:	4698      	mov	r8, r3
  417756:	e7a2      	b.n	41769e <.LVL245>

Disassembly of section .text.wc_RsaPrivateKeyDecode%136:

00417758 <wc_RsaPrivateKeyDecode>:
int wc_RsaPrivateKeyDecode(const byte* input, word32* inOutIdx, RsaKey* key,
                        word32 inSz)
{
    int version, length;

    if (inOutIdx == NULL) {
  417758:	2900      	cmp	r1, #0
  41775a:	d062      	beq.n	417822 <.LCFI60>
{
  41775c:	b5f0      	push	{r4, r5, r6, r7, lr}

0041775e <.LCFI57>:
  41775e:	b083      	sub	sp, #12

00417760 <.LCFI58>:
  417760:	460d      	mov	r5, r1
  417762:	461e      	mov	r6, r3
  417764:	4617      	mov	r7, r2
  417766:	4604      	mov	r4, r0
        return BAD_FUNC_ARG;
    }
    if (GetSequence(input, inOutIdx, &length, inSz) < 0)
  417768:	466a      	mov	r2, sp

0041776a <.LVL327>:
  41776a:	f007 f99f 	bl	41eaac <.LFE26>

0041776e <.LVL328>:
  41776e:	2800      	cmp	r0, #0
  417770:	db5a      	blt.n	417828 <.LCFI61>
        return ASN_PARSE_E;

    if (GetMyVersion(input, inOutIdx, &version, inSz) < 0)
  417772:	4633      	mov	r3, r6
  417774:	aa01      	add	r2, sp, #4
  417776:	4629      	mov	r1, r5
  417778:	4620      	mov	r0, r4
  41777a:	f006 f9dd 	bl	41db38 <.LFE155>

0041777e <.LVL329>:
  41777e:	2800      	cmp	r0, #0
  417780:	db55      	blt.n	41782e <.LCFI61+0x6>
        return ASN_PARSE_E;

    key->type = RSA_PRIVATE;
  417782:	2201      	movs	r2, #1
  417784:	f241 1348 	movw	r3, #4424	; 0x1148
  417788:	50fa      	str	r2, [r7, r3]

    if (GetInt(&key->n,  input, inOutIdx, inSz) < 0 ||
  41778a:	4633      	mov	r3, r6
  41778c:	462a      	mov	r2, r5
  41778e:	4621      	mov	r1, r4
  417790:	4638      	mov	r0, r7
  417792:	f005 fb53 	bl	41ce3c <.LFE144>

00417796 <.LVL330>:
  417796:	2800      	cmp	r0, #0
  417798:	db4c      	blt.n	417834 <.LCFI61+0xc>
        GetInt(&key->e,  input, inOutIdx, inSz) < 0 ||
  41779a:	4633      	mov	r3, r6
  41779c:	462a      	mov	r2, r5
  41779e:	4621      	mov	r1, r4
  4177a0:	f507 700a 	add.w	r0, r7, #552	; 0x228
  4177a4:	f005 fb4a 	bl	41ce3c <.LFE144>

004177a8 <.LVL331>:
    if (GetInt(&key->n,  input, inOutIdx, inSz) < 0 ||
  4177a8:	2800      	cmp	r0, #0
  4177aa:	db46      	blt.n	41783a <.LCFI61+0x12>
        GetInt(&key->d,  input, inOutIdx, inSz) < 0 ||
  4177ac:	4633      	mov	r3, r6
  4177ae:	462a      	mov	r2, r5
  4177b0:	4621      	mov	r1, r4
  4177b2:	f507 608a 	add.w	r0, r7, #1104	; 0x450
  4177b6:	f005 fb41 	bl	41ce3c <.LFE144>

004177ba <.LVL332>:
        GetInt(&key->e,  input, inOutIdx, inSz) < 0 ||
  4177ba:	2800      	cmp	r0, #0
  4177bc:	db40      	blt.n	417840 <.LCFI61+0x18>
        GetInt(&key->p,  input, inOutIdx, inSz) < 0 ||
  4177be:	4633      	mov	r3, r6
  4177c0:	462a      	mov	r2, r5
  4177c2:	4621      	mov	r1, r4
  4177c4:	f507 60cf 	add.w	r0, r7, #1656	; 0x678
  4177c8:	f005 fb38 	bl	41ce3c <.LFE144>

004177cc <.LVL333>:
        GetInt(&key->d,  input, inOutIdx, inSz) < 0 ||
  4177cc:	2800      	cmp	r0, #0
  4177ce:	db3a      	blt.n	417846 <.LCFI61+0x1e>
        GetInt(&key->q,  input, inOutIdx, inSz) < 0 ||
  4177d0:	4633      	mov	r3, r6
  4177d2:	462a      	mov	r2, r5
  4177d4:	4621      	mov	r1, r4
  4177d6:	f507 600a 	add.w	r0, r7, #2208	; 0x8a0
  4177da:	f005 fb2f 	bl	41ce3c <.LFE144>

004177de <.LVL334>:
        GetInt(&key->p,  input, inOutIdx, inSz) < 0 ||
  4177de:	2800      	cmp	r0, #0
  4177e0:	db34      	blt.n	41784c <.LCFI61+0x24>
        GetInt(&key->dP, input, inOutIdx, inSz) < 0 ||
  4177e2:	4633      	mov	r3, r6
  4177e4:	462a      	mov	r2, r5
  4177e6:	4621      	mov	r1, r4
  4177e8:	f607 20c8 	addw	r0, r7, #2760	; 0xac8
  4177ec:	f005 fb26 	bl	41ce3c <.LFE144>

004177f0 <.LVL335>:
        GetInt(&key->q,  input, inOutIdx, inSz) < 0 ||
  4177f0:	2800      	cmp	r0, #0
  4177f2:	db2e      	blt.n	417852 <.LCFI61+0x2a>
        GetInt(&key->dQ, input, inOutIdx, inSz) < 0 ||
  4177f4:	4633      	mov	r3, r6
  4177f6:	462a      	mov	r2, r5
  4177f8:	4621      	mov	r1, r4
  4177fa:	f507 604f 	add.w	r0, r7, #3312	; 0xcf0
  4177fe:	f005 fb1d 	bl	41ce3c <.LFE144>

00417802 <.LVL336>:
        GetInt(&key->dP, input, inOutIdx, inSz) < 0 ||
  417802:	2800      	cmp	r0, #0
  417804:	db28      	blt.n	417858 <.LCFI61+0x30>
        GetInt(&key->u,  input, inOutIdx, inSz) < 0 )  return ASN_RSA_KEY_E;
  417806:	4633      	mov	r3, r6
  417808:	462a      	mov	r2, r5
  41780a:	4621      	mov	r1, r4
  41780c:	f607 7018 	addw	r0, r7, #3864	; 0xf18
  417810:	f005 fb14 	bl	41ce3c <.LFE144>

00417814 <.LVL337>:
        GetInt(&key->dQ, input, inOutIdx, inSz) < 0 ||
  417814:	2800      	cmp	r0, #0
        GetInt(&key->u,  input, inOutIdx, inSz) < 0 )  return ASN_RSA_KEY_E;
  417816:	bfac      	ite	ge
  417818:	2000      	movge	r0, #0
  41781a:	f06f 008e 	mvnlt.w	r0, #142	; 0x8e
        return BAD_STATE_E;
    }
#endif

    return 0;
}
  41781e:	b003      	add	sp, #12

00417820 <.LCFI59>:
  417820:	bdf0      	pop	{r4, r5, r6, r7, pc}

00417822 <.LCFI60>:
        return BAD_FUNC_ARG;
  417822:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00417826 <.LVL339>:
  417826:	4770      	bx	lr

00417828 <.LCFI61>:
        return ASN_PARSE_E;
  417828:	f06f 008b 	mvn.w	r0, #139	; 0x8b
  41782c:	e7f7      	b.n	41781e <.LVL337+0xa>
        return ASN_PARSE_E;
  41782e:	f06f 008b 	mvn.w	r0, #139	; 0x8b
  417832:	e7f4      	b.n	41781e <.LVL337+0xa>
        GetInt(&key->u,  input, inOutIdx, inSz) < 0 )  return ASN_RSA_KEY_E;
  417834:	f06f 008e 	mvn.w	r0, #142	; 0x8e
  417838:	e7f1      	b.n	41781e <.LVL337+0xa>
  41783a:	f06f 008e 	mvn.w	r0, #142	; 0x8e
  41783e:	e7ee      	b.n	41781e <.LVL337+0xa>
  417840:	f06f 008e 	mvn.w	r0, #142	; 0x8e
  417844:	e7eb      	b.n	41781e <.LVL337+0xa>
  417846:	f06f 008e 	mvn.w	r0, #142	; 0x8e
  41784a:	e7e8      	b.n	41781e <.LVL337+0xa>
  41784c:	f06f 008e 	mvn.w	r0, #142	; 0x8e
  417850:	e7e5      	b.n	41781e <.LVL337+0xa>
  417852:	f06f 008e 	mvn.w	r0, #142	; 0x8e
  417856:	e7e2      	b.n	41781e <.LVL337+0xa>
  417858:	f06f 008e 	mvn.w	r0, #142	; 0x8e
  41785c:	e7df      	b.n	41781e <.LVL337+0xa>

Disassembly of section .rodata._ctype_%137:

00417860 <_ctype_>:
  417860:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  417870:	2020 2020 2020 2020 2020 2020 2020 2020                     
  417880:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  417890:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  4178a0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  4178b0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  4178c0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  4178d0:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  4178e0:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
  417960:	0000 bf00                                   ....

Disassembly of section .rodata._length_code%138:

00417964 <_length_code>:
  417964:	0100 0302 0504 0706 0808 0909 0a0a 0b0b     ................
  417974:	0c0c 0c0c 0d0d 0d0d 0e0e 0e0e 0f0f 0f0f     ................
  417984:	1010 1010 1010 1010 1111 1111 1111 1111     ................
  417994:	1212 1212 1212 1212 1313 1313 1313 1313     ................
  4179a4:	1414 1414 1414 1414 1414 1414 1414 1414     ................
  4179b4:	1515 1515 1515 1515 1515 1515 1515 1515     ................
  4179c4:	1616 1616 1616 1616 1616 1616 1616 1616     ................
  4179d4:	1717 1717 1717 1717 1717 1717 1717 1717     ................
  4179e4:	1818 1818 1818 1818 1818 1818 1818 1818     ................
  4179f4:	1818 1818 1818 1818 1818 1818 1818 1818     ................
  417a04:	1919 1919 1919 1919 1919 1919 1919 1919     ................
  417a14:	1919 1919 1919 1919 1919 1919 1919 1919     ................
  417a24:	1a1a 1a1a 1a1a 1a1a 1a1a 1a1a 1a1a 1a1a     ................
  417a34:	1a1a 1a1a 1a1a 1a1a 1a1a 1a1a 1a1a 1a1a     ................
  417a44:	1b1b 1b1b 1b1b 1b1b 1b1b 1b1b 1b1b 1b1b     ................
  417a54:	1b1b 1b1b 1b1b 1b1b 1b1b 1b1b 1b1b 1c1b     ................

Disassembly of section .text.xTaskIncrementTick%139:

00417a64 <xTaskIncrementTick>:
{
  417a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

00417a68 <.LCFI14>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  417a68:	4b32      	ldr	r3, [pc, #200]	; (417b34 <.LVL165>)
  417a6a:	681b      	ldr	r3, [r3, #0]
  417a6c:	2b00      	cmp	r3, #0
  417a6e:	d154      	bne.n	417b1a <.LBE68>

00417a70 <.LBB66>:
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
  417a70:	4b31      	ldr	r3, [pc, #196]	; (417b38 <.LVL165+0x4>)
  417a72:	681a      	ldr	r2, [r3, #0]
  417a74:	f102 0801 	add.w	r8, r2, #1

00417a78 <.LVL151>:
		xTickCount = xConstTickCount;
  417a78:	f8c3 8000 	str.w	r8, [r3]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
  417a7c:	f1b8 0f00 	cmp.w	r8, #0
  417a80:	d005      	beq.n	417a8e <.LBB67>
		if( xConstTickCount >= xNextTaskUnblockTime )
  417a82:	4b2e      	ldr	r3, [pc, #184]	; (417b3c <.LVL165+0x8>)
  417a84:	681b      	ldr	r3, [r3, #0]
  417a86:	4598      	cmp	r8, r3
  417a88:	d20e      	bcs.n	417aa8 <.LBE67+0x2>

00417a8a <.LBE66>:
BaseType_t xSwitchRequired = pdFALSE;
  417a8a:	2600      	movs	r6, #0
  417a8c:	e04a      	b.n	417b24 <.LVL164>

00417a8e <.LBB67>:
			taskSWITCH_DELAYED_LISTS();
  417a8e:	4a2c      	ldr	r2, [pc, #176]	; (417b40 <.LVL165+0xc>)
  417a90:	6811      	ldr	r1, [r2, #0]

00417a92 <.LVL152>:
  417a92:	4b2c      	ldr	r3, [pc, #176]	; (417b44 <.LVL165+0x10>)
  417a94:	6818      	ldr	r0, [r3, #0]
  417a96:	6010      	str	r0, [r2, #0]
  417a98:	6019      	str	r1, [r3, #0]
  417a9a:	4a2b      	ldr	r2, [pc, #172]	; (417b48 <.LVL165+0x14>)
  417a9c:	6813      	ldr	r3, [r2, #0]
  417a9e:	3301      	adds	r3, #1
  417aa0:	6013      	str	r3, [r2, #0]
  417aa2:	f006 fab9 	bl	41e018 <.LFE32>

00417aa6 <.LBE67>:
  417aa6:	e7ec      	b.n	417a82 <.LVL151+0xa>
  417aa8:	2600      	movs	r6, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  417aaa:	4f25      	ldr	r7, [pc, #148]	; (417b40 <.LVL165+0xc>)
					prvAddTaskToReadyList( pxTCB );
  417aac:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 417b58 <.LVL165+0x24>
  417ab0:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 417b5c <.LVL165+0x28>
  417ab4:	e015      	b.n	417ae2 <.LVL158>

00417ab6 <.LVL154>:
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  417ab6:	f04f 32ff 	mov.w	r2, #4294967295
  417aba:	4b20      	ldr	r3, [pc, #128]	; (417b3c <.LVL165+0x8>)
  417abc:	601a      	str	r2, [r3, #0]
					break;
  417abe:	e031      	b.n	417b24 <.LVL164>

00417ac0 <.LVL155>:
						xNextTaskUnblockTime = xItemValue;
  417ac0:	4a1e      	ldr	r2, [pc, #120]	; (417b3c <.LVL165+0x8>)
  417ac2:	6013      	str	r3, [r2, #0]
						break;
  417ac4:	e02e      	b.n	417b24 <.LVL164>

00417ac6 <.LVL156>:
					prvAddTaskToReadyList( pxTCB );
  417ac6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417aca:	4629      	mov	r1, r5
  417acc:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
  417ad0:	f006 fec4 	bl	41e85c <.LFE142>

00417ad4 <.LVL157>:
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  417ad4:	4b1d      	ldr	r3, [pc, #116]	; (417b4c <.LVL165+0x18>)
  417ad6:	681b      	ldr	r3, [r3, #0]
  417ad8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  417ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
  417adc:	429a      	cmp	r2, r3
  417ade:	bf28      	it	cs
  417ae0:	2601      	movcs	r6, #1

00417ae2 <.LVL158>:
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  417ae2:	683b      	ldr	r3, [r7, #0]
  417ae4:	681b      	ldr	r3, [r3, #0]
  417ae6:	2b00      	cmp	r3, #0
  417ae8:	d0e5      	beq.n	417ab6 <.LVL154>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  417aea:	683b      	ldr	r3, [r7, #0]
  417aec:	68db      	ldr	r3, [r3, #12]
  417aee:	68dc      	ldr	r4, [r3, #12]

00417af0 <.LVL159>:
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
  417af0:	6863      	ldr	r3, [r4, #4]

00417af2 <.LVL160>:
					if( xConstTickCount < xItemValue )
  417af2:	4598      	cmp	r8, r3
  417af4:	d3e4      	bcc.n	417ac0 <.LVL155>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  417af6:	1d25      	adds	r5, r4, #4
  417af8:	4628      	mov	r0, r5
  417afa:	f006 fb3b 	bl	41e174 <.LFE106>

00417afe <.LVL161>:
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  417afe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  417b00:	b11b      	cbz	r3, 417b0a <.LVL162>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  417b02:	f104 0018 	add.w	r0, r4, #24
  417b06:	f006 fb35 	bl	41e174 <.LFE106>

00417b0a <.LVL162>:
					prvAddTaskToReadyList( pxTCB );
  417b0a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  417b0c:	f8d9 3000 	ldr.w	r3, [r9]
  417b10:	4298      	cmp	r0, r3
  417b12:	d9d8      	bls.n	417ac6 <.LVL156>
  417b14:	f8c9 0000 	str.w	r0, [r9]
  417b18:	e7d5      	b.n	417ac6 <.LVL156>

00417b1a <.LBE68>:
		++uxPendedTicks;
  417b1a:	4a0d      	ldr	r2, [pc, #52]	; (417b50 <.LVL165+0x1c>)
  417b1c:	6813      	ldr	r3, [r2, #0]
  417b1e:	3301      	adds	r3, #1
  417b20:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
  417b22:	2600      	movs	r6, #0

00417b24 <.LVL164>:
		if( xYieldPending != pdFALSE )
  417b24:	4b0b      	ldr	r3, [pc, #44]	; (417b54 <.LVL165+0x20>)
  417b26:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  417b28:	2b00      	cmp	r3, #0
}
  417b2a:	bf0c      	ite	eq
  417b2c:	4630      	moveq	r0, r6
  417b2e:	2001      	movne	r0, #1
  417b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00417b34 <.LVL165>:
  417b34:	20417850 	.word	0x20417850
  417b38:	2041786c 	.word	0x2041786c
  417b3c:	20417860 	.word	0x20417860
  417b40:	2041783c 	.word	0x2041783c
  417b44:	20417840 	.word	0x20417840
  417b48:	20417864 	.word	0x20417864
  417b4c:	20417838 	.word	0x20417838
  417b50:	2041784c 	.word	0x2041784c
  417b54:	20417870 	.word	0x20417870
  417b58:	20417858 	.word	0x20417858
  417b5c:	20417534 	.word	0x20417534

Disassembly of section .text.wc_ecc_export_x963%140:

00417b60 <wc_ecc_export_x963>:
}


/* export public ECC key in ANSI X9.63 format */
int wc_ecc_export_x963(ecc_key* key, byte* out, word32* outLen)
{
  417b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00417b64 <.LCFI104>:
  417b64:	b0c1      	sub	sp, #260	; 0x104

00417b66 <.LCFI105>:
#endif
   word32 pubxlen, pubylen;
#endif /* WOLFSSL_ATECC508A */

   /* return length needed only */
   if (key != NULL && out == NULL && outLen != NULL) {
  417b66:	460f      	mov	r7, r1
  417b68:	fab1 f181 	clz	r1, r1

00417b6c <.LVL1248>:
  417b6c:	0949      	lsrs	r1, r1, #5
  417b6e:	4615      	mov	r5, r2
  417b70:	2a00      	cmp	r2, #0
  417b72:	bf0c      	ite	eq
  417b74:	2200      	moveq	r2, #0
  417b76:	f001 0201 	andne.w	r2, r1, #1

00417b7a <.LVL1249>:
  417b7a:	b10a      	cbz	r2, 417b80 <.LVL1249+0x6>
  417b7c:	2800      	cmp	r0, #0
  417b7e:	d13a      	bne.n	417bf6 <.LCFI107>
      numlen = key->dp->size;
      *outLen = 1 + 2*numlen;
      return LENGTH_ONLY_E;
   }

   if (key == NULL || out == NULL || outLen == NULL)
  417b80:	2d00      	cmp	r5, #0
  417b82:	bf08      	it	eq
  417b84:	f041 0101 	orreq.w	r1, r1, #1
  417b88:	2900      	cmp	r1, #0
  417b8a:	d15e      	bne.n	417c4a <.LVL1274>
  417b8c:	2800      	cmp	r0, #0
  417b8e:	d05c      	beq.n	417c4a <.LVL1274>
  417b90:	4604      	mov	r4, r0
      return ECC_BAD_ARG_E;

   if (wc_ecc_is_valid_idx(key->idx) == 0) {
  417b92:	6840      	ldr	r0, [r0, #4]

00417b94 <.LVL1250>:
  417b94:	f006 fc62 	bl	41e45c <.LBE24>

00417b98 <.LVL1251>:
  417b98:	2800      	cmp	r0, #0
  417b9a:	d059      	beq.n	417c50 <.LVL1275>
      return ECC_BAD_ARG_E;
   }
   numlen = key->dp->size;
  417b9c:	6923      	ldr	r3, [r4, #16]
  417b9e:	681e      	ldr	r6, [r3, #0]

00417ba0 <.LVL1252>:

    /* verify room in out buffer */
   if (*outLen < (1 + 2*numlen)) {
  417ba0:	ea4f 0946 	mov.w	r9, r6, lsl #1
  417ba4:	f109 0901 	add.w	r9, r9, #1
  417ba8:	682b      	ldr	r3, [r5, #0]
  417baa:	454b      	cmp	r3, r9
  417bac:	d32b      	bcc.n	417c06 <.LVL1266>
   ret = BAD_COND_E;

#else

   /* verify public key length is less than key size */
   pubxlen = mp_unsigned_bin_size(key->pubkey.x);
  417bae:	f104 0a18 	add.w	sl, r4, #24
  417bb2:	4650      	mov	r0, sl
  417bb4:	f007 f9bc 	bl	41ef30 <.LFE82>

00417bb8 <.LVL1253>:
  417bb8:	4680      	mov	r8, r0

00417bba <.LVL1254>:
   pubylen = mp_unsigned_bin_size(key->pubkey.y);
  417bba:	f504 7410 	add.w	r4, r4, #576	; 0x240

00417bbe <.LVL1255>:
  417bbe:	4620      	mov	r0, r4

00417bc0 <.LVL1256>:
  417bc0:	f007 f9b6 	bl	41ef30 <.LFE82>

00417bc4 <.LVL1257>:
  417bc4:	4683      	mov	fp, r0

00417bc6 <.LVL1258>:
   if ((pubxlen > numlen) || (pubylen > numlen)) {
  417bc6:	4546      	cmp	r6, r8
  417bc8:	d345      	bcc.n	417c56 <.LVL1276>
  417bca:	4286      	cmp	r6, r0
  417bcc:	d343      	bcc.n	417c56 <.LVL1276>
      WOLFSSL_MSG("Public key x/y invalid!");
      return BUFFER_E;
   }

   /* store byte 0x04 */
   out[0] = 0x04;
  417bce:	2304      	movs	r3, #4
  417bd0:	703b      	strb	r3, [r7, #0]
   if (buf == NULL)
      return MEMORY_E;
#endif

   /* pad and store x */
   XMEMSET(buf, 0, ECC_BUFSIZE);
  417bd2:	f44f 7280 	mov.w	r2, #256	; 0x100
  417bd6:	2100      	movs	r1, #0
  417bd8:	4668      	mov	r0, sp

00417bda <.LVL1259>:
  417bda:	f002 fd09 	bl	41a5f0 <.LFE157>

00417bde <.LVL1260>:
   ret = mp_to_unsigned_bin(key->pubkey.x, buf + (numlen - pubxlen));
  417bde:	eba6 0108 	sub.w	r1, r6, r8
  417be2:	4469      	add	r1, sp
  417be4:	4650      	mov	r0, sl
  417be6:	f007 f939 	bl	41ee5c <.LFE73>

00417bea <.LVL1261>:
   if (ret != MP_OKAY)
  417bea:	4680      	mov	r8, r0

00417bec <.LVL1262>:
  417bec:	b180      	cbz	r0, 417c10 <.LVL1267>

00417bee <.LVL1263>:
   XFREE(buf, NULL, DYNAMIC_TYPE_ECC_BUFFER);
#endif
#endif /* WOLFSSL_ATECC508A */

   return ret;
}
  417bee:	4640      	mov	r0, r8
  417bf0:	b041      	add	sp, #260	; 0x104

00417bf2 <.LCFI106>:
  417bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00417bf6 <.LCFI107>:
      numlen = key->dp->size;
  417bf6:	6903      	ldr	r3, [r0, #16]
      *outLen = 1 + 2*numlen;
  417bf8:	681b      	ldr	r3, [r3, #0]
  417bfa:	005b      	lsls	r3, r3, #1
  417bfc:	3301      	adds	r3, #1
  417bfe:	602b      	str	r3, [r5, #0]

00417c00 <.LVL1265>:
      return LENGTH_ONLY_E;
  417c00:	f06f 08c9 	mvn.w	r8, #201	; 0xc9
  417c04:	e7f3      	b.n	417bee <.LVL1263>

00417c06 <.LVL1266>:
      *outLen = 1 + 2*numlen;
  417c06:	f8c5 9000 	str.w	r9, [r5]
      return BUFFER_E;
  417c0a:	f06f 0883 	mvn.w	r8, #131	; 0x83
  417c0e:	e7ee      	b.n	417bee <.LVL1263>

00417c10 <.LVL1267>:
   XMEMCPY(out+1, buf, numlen);
  417c10:	4632      	mov	r2, r6
  417c12:	4669      	mov	r1, sp
  417c14:	1c78      	adds	r0, r7, #1

00417c16 <.LVL1268>:
  417c16:	f7fe fe37 	bl	416888 <memcpy>

00417c1a <.LVL1269>:
   XMEMSET(buf, 0, ECC_BUFSIZE);
  417c1a:	f44f 7280 	mov.w	r2, #256	; 0x100
  417c1e:	2100      	movs	r1, #0
  417c20:	4668      	mov	r0, sp
  417c22:	f002 fce5 	bl	41a5f0 <.LFE157>

00417c26 <.LVL1270>:
   ret = mp_to_unsigned_bin(key->pubkey.y, buf + (numlen - pubylen));
  417c26:	eba6 010b 	sub.w	r1, r6, fp
  417c2a:	4469      	add	r1, sp
  417c2c:	4620      	mov	r0, r4
  417c2e:	f007 f915 	bl	41ee5c <.LFE73>

00417c32 <.LVL1271>:
   if (ret != MP_OKAY)
  417c32:	4680      	mov	r8, r0
  417c34:	2800      	cmp	r0, #0
  417c36:	d1da      	bne.n	417bee <.LVL1263>
   XMEMCPY(out+1+numlen, buf, numlen);
  417c38:	1c70      	adds	r0, r6, #1

00417c3a <.LVL1272>:
  417c3a:	4632      	mov	r2, r6
  417c3c:	4669      	mov	r1, sp
  417c3e:	4438      	add	r0, r7
  417c40:	f7fe fe22 	bl	416888 <memcpy>

00417c44 <.LVL1273>:
   *outLen = 1 + 2*numlen;
  417c44:	f8c5 9000 	str.w	r9, [r5]
  417c48:	e7d1      	b.n	417bee <.LVL1263>

00417c4a <.LVL1274>:
      return ECC_BAD_ARG_E;
  417c4a:	f06f 08a9 	mvn.w	r8, #169	; 0xa9
  417c4e:	e7ce      	b.n	417bee <.LVL1263>

00417c50 <.LVL1275>:
      return ECC_BAD_ARG_E;
  417c50:	f06f 08a9 	mvn.w	r8, #169	; 0xa9
  417c54:	e7cb      	b.n	417bee <.LVL1263>

00417c56 <.LVL1276>:
      return BUFFER_E;
  417c56:	f06f 0883 	mvn.w	r8, #131	; 0x83

00417c5a <.LVL1277>:
  417c5a:	e7c8      	b.n	417bee <.LVL1263>

Disassembly of section .text.__ssprint_r%141:

00417c5c <__ssprint_r>:
  417c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00417c60 <.LCFI0>:
  417c60:	6893      	ldr	r3, [r2, #8]
  417c62:	b083      	sub	sp, #12

00417c64 <.LCFI1>:
  417c64:	4690      	mov	r8, r2

00417c66 <.LVL1>:
  417c66:	2b00      	cmp	r3, #0
  417c68:	d070      	beq.n	417d4c <.LCFI3>
  417c6a:	4682      	mov	sl, r0
  417c6c:	460c      	mov	r4, r1
  417c6e:	6817      	ldr	r7, [r2, #0]
  417c70:	688d      	ldr	r5, [r1, #8]
  417c72:	6808      	ldr	r0, [r1, #0]

00417c74 <.LVL2>:
  417c74:	e042      	b.n	417cfc <.LVL16>

00417c76 <.LVL3>:
  417c76:	89a3      	ldrh	r3, [r4, #12]
  417c78:	f413 6f90 	tst.w	r3, #1152	; 0x480
  417c7c:	d02e      	beq.n	417cdc <.LBE2>

00417c7e <.LBB2>:
  417c7e:	6965      	ldr	r5, [r4, #20]
  417c80:	6921      	ldr	r1, [r4, #16]
  417c82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  417c86:	eba0 0b01 	sub.w	fp, r0, r1

00417c8a <.LVL4>:
  417c8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  417c8e:	f10b 0001 	add.w	r0, fp, #1
  417c92:	106d      	asrs	r5, r5, #1

00417c94 <.LVL5>:
  417c94:	4430      	add	r0, r6
  417c96:	42a8      	cmp	r0, r5
  417c98:	462a      	mov	r2, r5
  417c9a:	bf84      	itt	hi
  417c9c:	4605      	movhi	r5, r0
  417c9e:	462a      	movhi	r2, r5
  417ca0:	055b      	lsls	r3, r3, #21
  417ca2:	d538      	bpl.n	417d16 <.LBB3>
  417ca4:	4611      	mov	r1, r2
  417ca6:	4650      	mov	r0, sl
  417ca8:	f7f6 f956 	bl	40df58 <.LFE174>

00417cac <.LVL7>:
  417cac:	2800      	cmp	r0, #0
  417cae:	d03c      	beq.n	417d2a <.L10>
  417cb0:	465a      	mov	r2, fp
  417cb2:	6921      	ldr	r1, [r4, #16]
  417cb4:	9001      	str	r0, [sp, #4]
  417cb6:	f7fe fde7 	bl	416888 <memcpy>

00417cba <.LVL8>:
  417cba:	89a2      	ldrh	r2, [r4, #12]
  417cbc:	9b01      	ldr	r3, [sp, #4]
  417cbe:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  417cc2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  417cc6:	81a2      	strh	r2, [r4, #12]

00417cc8 <.LVL9>:
  417cc8:	eba5 020b 	sub.w	r2, r5, fp
  417ccc:	eb03 000b 	add.w	r0, r3, fp
  417cd0:	6165      	str	r5, [r4, #20]
  417cd2:	6123      	str	r3, [r4, #16]
  417cd4:	6020      	str	r0, [r4, #0]
  417cd6:	60a2      	str	r2, [r4, #8]
  417cd8:	4635      	mov	r5, r6

00417cda <.LVL10>:
  417cda:	46b3      	mov	fp, r6

00417cdc <.LBE2>:
  417cdc:	465a      	mov	r2, fp
  417cde:	4649      	mov	r1, r9
  417ce0:	f001 f926 	bl	418f30 <.LFE155>

00417ce4 <.LVL12>:
  417ce4:	f8d8 3008 	ldr.w	r3, [r8, #8]
  417ce8:	68a2      	ldr	r2, [r4, #8]
  417cea:	6820      	ldr	r0, [r4, #0]
  417cec:	1b55      	subs	r5, r2, r5

00417cee <.LVL13>:
  417cee:	4458      	add	r0, fp
  417cf0:	1b9e      	subs	r6, r3, r6

00417cf2 <.LVL14>:
  417cf2:	60a5      	str	r5, [r4, #8]
  417cf4:	6020      	str	r0, [r4, #0]

00417cf6 <.LVL15>:
  417cf6:	f8c8 6008 	str.w	r6, [r8, #8]
  417cfa:	b33e      	cbz	r6, 417d4c <.LCFI3>

00417cfc <.LVL16>:
  417cfc:	687e      	ldr	r6, [r7, #4]

00417cfe <.LVL17>:
  417cfe:	463b      	mov	r3, r7
  417d00:	3708      	adds	r7, #8

00417d02 <.LVL18>:
  417d02:	2e00      	cmp	r6, #0
  417d04:	d0fa      	beq.n	417cfc <.LVL16>
  417d06:	42ae      	cmp	r6, r5
  417d08:	f8d3 9000 	ldr.w	r9, [r3]
  417d0c:	46ab      	mov	fp, r5
  417d0e:	d2b2      	bcs.n	417c76 <.LVL3>
  417d10:	4635      	mov	r5, r6

00417d12 <.LVL19>:
  417d12:	46b3      	mov	fp, r6
  417d14:	e7e2      	b.n	417cdc <.LBE2>

00417d16 <.LBB3>:
  417d16:	4650      	mov	r0, sl
  417d18:	f7fa fe06 	bl	412928 <.LFE175>

00417d1c <.LVL21>:
  417d1c:	4603      	mov	r3, r0
  417d1e:	2800      	cmp	r0, #0
  417d20:	d1d2      	bne.n	417cc8 <.LVL9>
  417d22:	6921      	ldr	r1, [r4, #16]
  417d24:	4650      	mov	r0, sl

00417d26 <.LVL22>:
  417d26:	f7fd fcbf 	bl	4156a8 <_free_r>

00417d2a <.L10>:
  417d2a:	230c      	movs	r3, #12
  417d2c:	f8ca 3000 	str.w	r3, [sl]

00417d30 <.LBE3>:
  417d30:	89a3      	ldrh	r3, [r4, #12]
  417d32:	2200      	movs	r2, #0
  417d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  417d38:	f04f 30ff 	mov.w	r0, #4294967295
  417d3c:	81a3      	strh	r3, [r4, #12]
  417d3e:	f8c8 2008 	str.w	r2, [r8, #8]
  417d42:	f8c8 2004 	str.w	r2, [r8, #4]
  417d46:	b003      	add	sp, #12

00417d48 <.LCFI2>:
  417d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00417d4c <.LCFI3>:
  417d4c:	2000      	movs	r0, #0
  417d4e:	f8c8 0004 	str.w	r0, [r8, #4]
  417d52:	b003      	add	sp, #12

00417d54 <.LCFI4>:
  417d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section .text.RsaMGF1%142:

00417d58 <RsaMGF1>:
{
  417d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00417d5c <.LCFI2>:
  417d5c:	b09b      	sub	sp, #108	; 0x6c

00417d5e <.LCFI3>:
  417d5e:	9004      	str	r0, [sp, #16]
  417d60:	9105      	str	r1, [sp, #20]
  417d62:	4692      	mov	sl, r2
  417d64:	9306      	str	r3, [sp, #24]
  417d66:	9d24      	ldr	r5, [sp, #144]	; 0x90
    hLen    = wc_HashGetDigestSize(hType);
  417d68:	f005 ffaa 	bl	41dcc0 <wc_HashGetDigestSize>

00417d6c <.LVL13>:
    if (hLen < 0) {
  417d6c:	1e06      	subs	r6, r0, #0
  417d6e:	db66      	blt.n	417e3e <.LBE18>
    if ((seedSz + 4) > sizeof(tmpA) || (word32)hLen > sizeof(tmpA)) {
  417d70:	f10a 0304 	add.w	r3, sl, #4
  417d74:	9303      	str	r3, [sp, #12]
  417d76:	2b44      	cmp	r3, #68	; 0x44
  417d78:	d801      	bhi.n	417d7e <.LVL13+0x12>
  417d7a:	2e44      	cmp	r6, #68	; 0x44
  417d7c:	d911      	bls.n	417da2 <.LBE14>
        tmpSz = ((seedSz + 4) > (word32)hLen)? seedSz + 4: (word32)hLen;
  417d7e:	9b03      	ldr	r3, [sp, #12]
  417d80:	42b3      	cmp	r3, r6
  417d82:	bf38      	it	cc
  417d84:	4633      	movcc	r3, r6
  417d86:	469b      	mov	fp, r3

00417d88 <.LVL14>:
        tmp = (byte*)XMALLOC(tmpSz, heap, DYNAMIC_TYPE_RSA_BUFFER);
  417d88:	4618      	mov	r0, r3

00417d8a <.LVL15>:
  417d8a:	f006 fe1b 	bl	41e9c4 <.LFE180>

00417d8e <.LVL16>:
        if (tmp == NULL) {
  417d8e:	4680      	mov	r8, r0
  417d90:	2800      	cmp	r0, #0
  417d92:	d059      	beq.n	417e48 <.LCFI5>
        tmpF = 1; /* make sure to free memory when done */
  417d94:	2301      	movs	r3, #1
  417d96:	9307      	str	r3, [sp, #28]

00417d98 <.LVL17>:
        tmp  = tmpA;
  417d98:	2400      	movs	r4, #0
  417d9a:	4627      	mov	r7, r4

00417d9c <.LBB14>:
        tmp[seedSz + 1] = (counter >> 16) & 0xFF;
  417d9c:	eb08 090a 	add.w	r9, r8, sl
  417da0:	e014      	b.n	417dcc <.LBB17>

00417da2 <.LBE14>:
        tmpSz = sizeof(tmpA);
  417da2:	f04f 0b44 	mov.w	fp, #68	; 0x44
        tmpF = 0; /* no need to free memory at end */
  417da6:	2300      	movs	r3, #0
  417da8:	9307      	str	r3, [sp, #28]
        tmp  = tmpA;
  417daa:	f10d 0824 	add.w	r8, sp, #36	; 0x24
  417dae:	e7f3      	b.n	417d98 <.LVL17>

00417db0 <.LVL19>:
  417db0:	4604      	mov	r4, r0

00417db2 <.LBB15>:
                XFREE(tmp, heap, DYNAMIC_TYPE_RSA_BUFFER);
  417db2:	9b07      	ldr	r3, [sp, #28]
  417db4:	2b00      	cmp	r3, #0
  417db6:	d043      	beq.n	417e40 <.LVL36>
  417db8:	f1b8 0f00 	cmp.w	r8, #0
  417dbc:	d040      	beq.n	417e40 <.LVL36>
  417dbe:	4640      	mov	r0, r8

00417dc0 <.LVL21>:
  417dc0:	f006 fe0c 	bl	41e9dc <.LFE2>

00417dc4 <.LVL22>:
  417dc4:	e03c      	b.n	417e40 <.LVL36>

00417dc6 <.LBE15>:
        counter++;
  417dc6:	3701      	adds	r7, #1

00417dc8 <.LBE16>:
    } while (idx < outSz);
  417dc8:	42a5      	cmp	r5, r4
  417dca:	d92e      	bls.n	417e2a <.LVL31>

00417dcc <.LBB17>:
        XMEMCPY(tmp, seed, seedSz);
  417dcc:	4652      	mov	r2, sl
  417dce:	9905      	ldr	r1, [sp, #20]
  417dd0:	4640      	mov	r0, r8
  417dd2:	f7fe fd59 	bl	416888 <memcpy>

00417dd6 <.LVL26>:
        tmp[seedSz]     = (counter >> 24) & 0xFF;
  417dd6:	0e3b      	lsrs	r3, r7, #24
  417dd8:	f808 300a 	strb.w	r3, [r8, sl]
        tmp[seedSz + 1] = (counter >> 16) & 0xFF;
  417ddc:	0c3b      	lsrs	r3, r7, #16
  417dde:	f889 3001 	strb.w	r3, [r9, #1]
        tmp[seedSz + 2] = (counter >>  8) & 0xFF;
  417de2:	0a3b      	lsrs	r3, r7, #8
  417de4:	f889 3002 	strb.w	r3, [r9, #2]
        tmp[seedSz + 3] = (counter)       & 0xFF;
  417de8:	f889 7003 	strb.w	r7, [r9, #3]
        if ((ret = wc_Hash(hType, tmp, (seedSz + 4), tmp, tmpSz)) != 0) {
  417dec:	f8cd b000 	str.w	fp, [sp]
  417df0:	4643      	mov	r3, r8
  417df2:	9a03      	ldr	r2, [sp, #12]
  417df4:	4641      	mov	r1, r8
  417df6:	9804      	ldr	r0, [sp, #16]
  417df8:	f002 fac1 	bl	41a37e <.LFE24>

00417dfc <.LVL27>:
  417dfc:	4686      	mov	lr, r0
  417dfe:	2800      	cmp	r0, #0
  417e00:	d1d6      	bne.n	417db0 <.LVL19>
        for (i = 0; i < hLen && idx < outSz; i++) {
  417e02:	2e00      	cmp	r6, #0
  417e04:	dddf      	ble.n	417dc6 <.LBE15>
  417e06:	42ac      	cmp	r4, r5
  417e08:	d2dd      	bcs.n	417dc6 <.LBE15>
  417e0a:	f108 31ff 	add.w	r1, r8, #4294967295
  417e0e:	9b06      	ldr	r3, [sp, #24]
  417e10:	191a      	adds	r2, r3, r4
  417e12:	4603      	mov	r3, r0

00417e14 <.LVL28>:
            out[idx++] = tmp[i];
  417e14:	3401      	adds	r4, #1
  417e16:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  417e1a:	f802 0b01 	strb.w	r0, [r2], #1
        for (i = 0; i < hLen && idx < outSz; i++) {
  417e1e:	3301      	adds	r3, #1
  417e20:	429e      	cmp	r6, r3
  417e22:	ddd0      	ble.n	417dc6 <.LBE15>
  417e24:	42a5      	cmp	r5, r4
  417e26:	d8f5      	bhi.n	417e14 <.LVL28>
  417e28:	e7cd      	b.n	417dc6 <.LBE15>

00417e2a <.LVL31>:
  417e2a:	4674      	mov	r4, lr

00417e2c <.LBB18>:
        XFREE(tmp, heap, DYNAMIC_TYPE_RSA_BUFFER);
  417e2c:	f1b8 0f00 	cmp.w	r8, #0
  417e30:	d006      	beq.n	417e40 <.LVL36>

00417e32 <.LVL33>:
  417e32:	9b07      	ldr	r3, [sp, #28]
  417e34:	b123      	cbz	r3, 417e40 <.LVL36>
  417e36:	4640      	mov	r0, r8
  417e38:	f006 fdd0 	bl	41e9dc <.LFE2>

00417e3c <.LVL34>:
  417e3c:	e000      	b.n	417e40 <.LVL36>

00417e3e <.LBE18>:
        return hLen;
  417e3e:	4634      	mov	r4, r6

00417e40 <.LVL36>:
}
  417e40:	4620      	mov	r0, r4
  417e42:	b01b      	add	sp, #108	; 0x6c

00417e44 <.LCFI4>:
  417e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00417e48 <.LCFI5>:
            return MEMORY_E;
  417e48:	f06f 037c 	mvn.w	r3, #124	; 0x7c
  417e4c:	461c      	mov	r4, r3
  417e4e:	e7f7      	b.n	417e40 <.LVL36>

Disassembly of section .text.des3_test%143:

00417e50 <des3_test>:
{
  417e50:	b570      	push	{r4, r5, r6, lr}

00417e52 <.LCFI63>:
  417e52:	f5ad 7d74 	sub.w	sp, sp, #976	; 0x3d0

00417e56 <.LCFI64>:
    const byte vector[] = { /* "Now is the time for all " w/o trailing 0 */
  417e56:	4c37      	ldr	r4, [pc, #220]	; (417f34 <.LCFI65+0x2>)
  417e58:	adee      	add	r5, sp, #952	; 0x3b8
  417e5a:	f8d4 0830 	ldr.w	r0, [r4, #2096]	; 0x830
  417e5e:	f8d4 1834 	ldr.w	r1, [r4, #2100]	; 0x834
  417e62:	f8d4 2838 	ldr.w	r2, [r4, #2104]	; 0x838
  417e66:	f8d4 383c 	ldr.w	r3, [r4, #2108]	; 0x83c
  417e6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  417e6c:	f8d4 0840 	ldr.w	r0, [r4, #2112]	; 0x840
  417e70:	f8d4 1844 	ldr.w	r1, [r4, #2116]	; 0x844
  417e74:	c503      	stmia	r5!, {r0, r1}
    const byte key3[] =
  417e76:	ad0c      	add	r5, sp, #48	; 0x30
  417e78:	f8d4 0848 	ldr.w	r0, [r4, #2120]	; 0x848
  417e7c:	f8d4 184c 	ldr.w	r1, [r4, #2124]	; 0x84c
  417e80:	f8d4 2850 	ldr.w	r2, [r4, #2128]	; 0x850
  417e84:	f8d4 3854 	ldr.w	r3, [r4, #2132]	; 0x854
  417e88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  417e8a:	f8d4 0858 	ldr.w	r0, [r4, #2136]	; 0x858
  417e8e:	f8d4 185c 	ldr.w	r1, [r4, #2140]	; 0x85c
  417e92:	c503      	stmia	r5!, {r0, r1}
    const byte iv3[] =
  417e94:	ad06      	add	r5, sp, #24
  417e96:	f8d4 0860 	ldr.w	r0, [r4, #2144]	; 0x860
  417e9a:	f8d4 1864 	ldr.w	r1, [r4, #2148]	; 0x864
  417e9e:	f8d4 2868 	ldr.w	r2, [r4, #2152]	; 0x868
  417ea2:	f8d4 386c 	ldr.w	r3, [r4, #2156]	; 0x86c
  417ea6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  417ea8:	f8d4 0870 	ldr.w	r0, [r4, #2160]	; 0x870
  417eac:	f8d4 1874 	ldr.w	r1, [r4, #2164]	; 0x874
  417eb0:	c503      	stmia	r5!, {r0, r1}
    const byte verify3[] =
  417eb2:	466d      	mov	r5, sp
  417eb4:	f8d4 0878 	ldr.w	r0, [r4, #2168]	; 0x878
  417eb8:	f8d4 187c 	ldr.w	r1, [r4, #2172]	; 0x87c
  417ebc:	f8d4 2880 	ldr.w	r2, [r4, #2176]	; 0x880
  417ec0:	f8d4 3884 	ldr.w	r3, [r4, #2180]	; 0x884
  417ec4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  417ec6:	f8d4 0888 	ldr.w	r0, [r4, #2184]	; 0x888
  417eca:	f8d4 188c 	ldr.w	r1, [r4, #2188]	; 0x88c
  417ece:	c503      	stmia	r5!, {r0, r1}
    appData.des3_test_result = numSubTests;
  417ed0:	2202      	movs	r2, #2
  417ed2:	4b19      	ldr	r3, [pc, #100]	; (417f38 <.LCFI65+0x6>)
  417ed4:	631a      	str	r2, [r3, #48]	; 0x30
    CRYPT_TDES_KeySet(&enc, key3, iv3, DES_ENCRYPTION);
  417ed6:	2300      	movs	r3, #0
  417ed8:	aa06      	add	r2, sp, #24
  417eda:	a90c      	add	r1, sp, #48	; 0x30
  417edc:	a87a      	add	r0, sp, #488	; 0x1e8
  417ede:	f006 fd65 	bl	41e9ac <.LFE171>

00417ee2 <.LVL146>:
    CRYPT_TDES_KeySet(&dec, key3, iv3, DES_DECRYPTION);
  417ee2:	2301      	movs	r3, #1
  417ee4:	aa06      	add	r2, sp, #24
  417ee6:	a90c      	add	r1, sp, #48	; 0x30
  417ee8:	a812      	add	r0, sp, #72	; 0x48
  417eea:	f006 fd5f 	bl	41e9ac <.LFE171>

00417eee <.LVL147>:
    CRYPT_TDES_CBC_Encrypt(&enc, cipher, vector, sizeof(vector));
  417eee:	2318      	movs	r3, #24
  417ef0:	aaee      	add	r2, sp, #952	; 0x3b8
  417ef2:	a9e2      	add	r1, sp, #904	; 0x388
  417ef4:	a87a      	add	r0, sp, #488	; 0x1e8
  417ef6:	f006 fb89 	bl	41e60c <.LFE179>

00417efa <.LVL148>:
    CRYPT_TDES_CBC_Decrypt(&dec, plain, verify3, sizeof(verify3));
  417efa:	2318      	movs	r3, #24
  417efc:	466a      	mov	r2, sp
  417efe:	a9e8      	add	r1, sp, #928	; 0x3a0
  417f00:	a812      	add	r0, sp, #72	; 0x48
  417f02:	f006 fb92 	bl	41e62a <.LFE182>

00417f06 <.LVL149>:
    if (!(memcmp(plain, vector, sizeof(plain))))
  417f06:	2218      	movs	r2, #24
  417f08:	a9ee      	add	r1, sp, #952	; 0x3b8
  417f0a:	a8e8      	add	r0, sp, #928	; 0x3a0
  417f0c:	f004 fd9c 	bl	41ca48 <memcmp>

00417f10 <.LVL150>:
  417f10:	b918      	cbnz	r0, 417f1a <.LVL150+0xa>
        appData.des3_test_result--;
  417f12:	4a09      	ldr	r2, [pc, #36]	; (417f38 <.LCFI65+0x6>)
  417f14:	6b13      	ldr	r3, [r2, #48]	; 0x30
  417f16:	3b01      	subs	r3, #1
  417f18:	6313      	str	r3, [r2, #48]	; 0x30
    if (!(memcmp(cipher, verify3, sizeof(cipher))))
  417f1a:	2218      	movs	r2, #24
  417f1c:	4669      	mov	r1, sp
  417f1e:	a8e2      	add	r0, sp, #904	; 0x388
  417f20:	f004 fd92 	bl	41ca48 <memcmp>

00417f24 <.LVL151>:
  417f24:	b918      	cbnz	r0, 417f2e <.LVL151+0xa>
        appData.des3_test_result--;
  417f26:	4a04      	ldr	r2, [pc, #16]	; (417f38 <.LCFI65+0x6>)
  417f28:	6b13      	ldr	r3, [r2, #48]	; 0x30
  417f2a:	3b01      	subs	r3, #1
  417f2c:	6313      	str	r3, [r2, #48]	; 0x30
}
  417f2e:	f50d 7d74 	add.w	sp, sp, #976	; 0x3d0

00417f32 <.LCFI65>:
  417f32:	bd70      	pop	{r4, r5, r6, pc}
  417f34:	0040accc 	.word	0x0040accc
  417f38:	20417598 	.word	0x20417598

Disassembly of section .text.wc_Sha512Update%144:

00417f3c <wc_Sha512Update>:
{
  417f3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

00417f40 <.LCFI6>:
    if (sha512 == NULL || (data == NULL && len > 0)) {
  417f40:	2800      	cmp	r0, #0
  417f42:	d065      	beq.n	418010 <.LVL43>
  417f44:	4689      	mov	r9, r1
  417f46:	4615      	mov	r5, r2
  417f48:	4680      	mov	r8, r0
  417f4a:	b909      	cbnz	r1, 417f50 <.LBB700>
  417f4c:	2a00      	cmp	r2, #0
  417f4e:	d162      	bne.n	418016 <.LVL43+0x6>

00417f50 <.LBB700>:
    byte* local = (byte*)sha512->buffer;
  417f50:	f108 0b58 	add.w	fp, r8, #88	; 0x58

00417f54 <.LVL25>:
    if (sha512->buffLen >= SHA512_BLOCK_SIZE)
  417f54:	f8d8 3000 	ldr.w	r3, [r8]
  417f58:	2b7f      	cmp	r3, #127	; 0x7f
  417f5a:	d85f      	bhi.n	41801c <.LBB719>
    while (len) {
  417f5c:	2d00      	cmp	r5, #0
  417f5e:	d060      	beq.n	418022 <.LBB719+0x6>
  417f60:	f108 0ad0 	add.w	sl, r8, #208	; 0xd0
  417f64:	e004      	b.n	417f70 <.LBB717>

00417f66 <.LBB702>:
            sha512->buffLen = 0;
  417f66:	2300      	movs	r3, #0
  417f68:	f8c8 3000 	str.w	r3, [r8]

00417f6c <.LBE702>:
    while (len) {
  417f6c:	2d00      	cmp	r5, #0
  417f6e:	d04b      	beq.n	418008 <.LBE715>

00417f70 <.LBB717>:
        word32 add = min(len, SHA512_BLOCK_SIZE - sha512->buffLen);
  417f70:	f8d8 0000 	ldr.w	r0, [r8]

00417f74 <.LVL28>:
  417f74:	f1c0 0480 	rsb	r4, r0, #128	; 0x80

00417f78 <.LBB703>:
    #if defined(HAVE_FIPS) && !defined(min) /* so ifdef check passes */
        #define min min
    #endif
    STATIC INLINE word32 min(word32 a, word32 b)
    {
        return a > b ? b : a;
  417f78:	42ac      	cmp	r4, r5
  417f7a:	bf28      	it	cs
  417f7c:	462c      	movcs	r4, r5

00417f7e <.LBE703>:
        XMEMCPY(&local[sha512->buffLen], data, add);
  417f7e:	4622      	mov	r2, r4
  417f80:	4649      	mov	r1, r9
  417f82:	4458      	add	r0, fp
  417f84:	f7fe fc80 	bl	416888 <memcpy>

00417f88 <.LVL31>:
        sha512->buffLen += add;
  417f88:	f8d8 3000 	ldr.w	r3, [r8]
  417f8c:	4423      	add	r3, r4
  417f8e:	f8c8 3000 	str.w	r3, [r8]
        data            += add;
  417f92:	44a1      	add	r9, r4
        len             -= add;
  417f94:	1b2d      	subs	r5, r5, r4
        if (sha512->buffLen == SHA512_BLOCK_SIZE) {
  417f96:	2b80      	cmp	r3, #128	; 0x80
  417f98:	d1e8      	bne.n	417f6c <.LBE702>
  417f9a:	f108 0250 	add.w	r2, r8, #80	; 0x50

00417f9e <.LBB705>:
        out[i] = ByteReverseWord64(in[i]);
  417f9e:	6893      	ldr	r3, [r2, #8]
  417fa0:	68d1      	ldr	r1, [r2, #12]

00417fa2 <.LBB707>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  417fa2:	0a18      	lsrs	r0, r3, #8
  417fa4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  417fa8:	021b      	lsls	r3, r3, #8
  417faa:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  417fae:	4303      	orrs	r3, r0

00417fb0 <.LBE709>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  417fb0:	ea4f 4733 	mov.w	r7, r3, ror #16
  417fb4:	2600      	movs	r6, #0

00417fb6 <.LBB711>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  417fb6:	0a0b      	lsrs	r3, r1, #8
  417fb8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  417fbc:	0209      	lsls	r1, r1, #8
  417fbe:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  417fc2:	430b      	orrs	r3, r1

00417fc4 <.LBB713>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  417fc4:	ea4f 4333 	mov.w	r3, r3, ror #16

00417fc8 <.LBE711>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  417fc8:	ea46 0003 	orr.w	r0, r6, r3
  417fcc:	4639      	mov	r1, r7

00417fce <.LBE707>:
        out[i] = ByteReverseWord64(in[i]);
  417fce:	e9e2 0102 	strd	r0, r1, [r2, #8]!
    for (i = 0; i < count; i++)
  417fd2:	4592      	cmp	sl, r2
  417fd4:	d1e3      	bne.n	417f9e <.LBB705>

00417fd6 <.LBE705>:
            ret = Transform(sha512);
  417fd6:	4640      	mov	r0, r8
  417fd8:	f7e8 f8dc 	bl	400194 <_etext>

00417fdc <.LVL35>:
            if (ret != 0)
  417fdc:	4603      	mov	r3, r0
  417fde:	b9a0      	cbnz	r0, 41800a <.LBE700>

00417fe0 <.LBB715>:
    word64 tmp = sha512->loLen;
  417fe0:	e9d8 2302 	ldrd	r2, r3, [r8, #8]

00417fe4 <.LVL37>:
    if ( (sha512->loLen += len) < tmp)
  417fe4:	f112 0080 	adds.w	r0, r2, #128	; 0x80

00417fe8 <.LVL38>:
  417fe8:	f143 0100 	adc.w	r1, r3, #0
  417fec:	e9c8 0102 	strd	r0, r1, [r8, #8]
  417ff0:	4299      	cmp	r1, r3
  417ff2:	bf08      	it	eq
  417ff4:	4290      	cmpeq	r0, r2
  417ff6:	d2b6      	bcs.n	417f66 <.LBB702>
        sha512->hiLen++;                       /* carry low to high */
  417ff8:	e9d8 2304 	ldrd	r2, r3, [r8, #16]

00417ffc <.LVL39>:
  417ffc:	3201      	adds	r2, #1
  417ffe:	f143 0300 	adc.w	r3, r3, #0

00418002 <.LVL40>:
  418002:	e9c8 2304 	strd	r2, r3, [r8, #16]
  418006:	e7ae      	b.n	417f66 <.LBB702>

00418008 <.LBE715>:
    while (len) {
  418008:	2300      	movs	r3, #0

0041800a <.LBE700>:
}
  41800a:	4618      	mov	r0, r3
  41800c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00418010 <.LVL43>:
        return BAD_FUNC_ARG;
  418010:	f06f 03ac 	mvn.w	r3, #172	; 0xac
  418014:	e7f9      	b.n	41800a <.LBE700>
  418016:	f06f 03ac 	mvn.w	r3, #172	; 0xac
  41801a:	e7f6      	b.n	41800a <.LBE700>

0041801c <.LBB719>:
        return BUFFER_E;
  41801c:	f06f 0383 	mvn.w	r3, #131	; 0x83
  418020:	e7f3      	b.n	41800a <.LBE700>
    while (len) {
  418022:	2300      	movs	r3, #0
  418024:	e7f1      	b.n	41800a <.LBE700>

Disassembly of section .text.wc_Sha384Update%145:

00418026 <wc_Sha384Update>:
{
  418026:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

0041802a <.LCFI13>:
    if (sha384 == NULL || (data == NULL && len > 0)) {
  41802a:	2800      	cmp	r0, #0
  41802c:	d065      	beq.n	4180fa <.LVL102>
  41802e:	4689      	mov	r9, r1
  418030:	4615      	mov	r5, r2
  418032:	4680      	mov	r8, r0
  418034:	b909      	cbnz	r1, 41803a <.LBB821>
  418036:	2a00      	cmp	r2, #0
  418038:	d162      	bne.n	418100 <.LVL102+0x6>

0041803a <.LBB821>:
    byte* local = (byte*)sha512->buffer;
  41803a:	f108 0b58 	add.w	fp, r8, #88	; 0x58

0041803e <.LVL84>:
    if (sha512->buffLen >= SHA512_BLOCK_SIZE)
  41803e:	f8d8 3000 	ldr.w	r3, [r8]
  418042:	2b7f      	cmp	r3, #127	; 0x7f
  418044:	d85f      	bhi.n	418106 <.LBB840>
    while (len) {
  418046:	2d00      	cmp	r5, #0
  418048:	d060      	beq.n	41810c <.LBB840+0x6>
  41804a:	f108 0ad0 	add.w	sl, r8, #208	; 0xd0
  41804e:	e004      	b.n	41805a <.LBB838>

00418050 <.LBB823>:
            sha512->buffLen = 0;
  418050:	2300      	movs	r3, #0
  418052:	f8c8 3000 	str.w	r3, [r8]

00418056 <.LBE823>:
    while (len) {
  418056:	2d00      	cmp	r5, #0
  418058:	d04b      	beq.n	4180f2 <.LBE836>

0041805a <.LBB838>:
        word32 add = min(len, SHA512_BLOCK_SIZE - sha512->buffLen);
  41805a:	f8d8 0000 	ldr.w	r0, [r8]

0041805e <.LVL87>:
  41805e:	f1c0 0480 	rsb	r4, r0, #128	; 0x80

00418062 <.LBB824>:
        return a > b ? b : a;
  418062:	42ac      	cmp	r4, r5
  418064:	bf28      	it	cs
  418066:	462c      	movcs	r4, r5

00418068 <.LBE824>:
        XMEMCPY(&local[sha512->buffLen], data, add);
  418068:	4622      	mov	r2, r4
  41806a:	4649      	mov	r1, r9
  41806c:	4458      	add	r0, fp
  41806e:	f7fe fc0b 	bl	416888 <memcpy>

00418072 <.LVL90>:
        sha512->buffLen += add;
  418072:	f8d8 3000 	ldr.w	r3, [r8]
  418076:	4423      	add	r3, r4
  418078:	f8c8 3000 	str.w	r3, [r8]
        data            += add;
  41807c:	44a1      	add	r9, r4
        len             -= add;
  41807e:	1b2d      	subs	r5, r5, r4
        if (sha512->buffLen == SHA512_BLOCK_SIZE) {
  418080:	2b80      	cmp	r3, #128	; 0x80
  418082:	d1e8      	bne.n	418056 <.LBE823>
  418084:	f108 0250 	add.w	r2, r8, #80	; 0x50

00418088 <.LBB826>:
        out[i] = ByteReverseWord64(in[i]);
  418088:	6893      	ldr	r3, [r2, #8]
  41808a:	68d1      	ldr	r1, [r2, #12]

0041808c <.LBB828>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  41808c:	0a18      	lsrs	r0, r3, #8
  41808e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  418092:	021b      	lsls	r3, r3, #8
  418094:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  418098:	4303      	orrs	r3, r0

0041809a <.LBE830>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  41809a:	ea4f 4733 	mov.w	r7, r3, ror #16
  41809e:	2600      	movs	r6, #0

004180a0 <.LBB832>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  4180a0:	0a0b      	lsrs	r3, r1, #8
  4180a2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  4180a6:	0209      	lsls	r1, r1, #8
  4180a8:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  4180ac:	430b      	orrs	r3, r1

004180ae <.LBB834>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  4180ae:	ea4f 4333 	mov.w	r3, r3, ror #16

004180b2 <.LBE832>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  4180b2:	ea46 0003 	orr.w	r0, r6, r3
  4180b6:	4639      	mov	r1, r7

004180b8 <.LBE828>:
        out[i] = ByteReverseWord64(in[i]);
  4180b8:	e9e2 0102 	strd	r0, r1, [r2, #8]!
    for (i = 0; i < count; i++)
  4180bc:	4592      	cmp	sl, r2
  4180be:	d1e3      	bne.n	418088 <.LBB826>

004180c0 <.LBE826>:
            ret = Transform(sha512);
  4180c0:	4640      	mov	r0, r8
  4180c2:	f7e8 f867 	bl	400194 <_etext>

004180c6 <.LVL94>:
            if (ret != 0)
  4180c6:	4603      	mov	r3, r0
  4180c8:	b9a0      	cbnz	r0, 4180f4 <.LBE821>

004180ca <.LBB836>:
    word64 tmp = sha512->loLen;
  4180ca:	e9d8 2302 	ldrd	r2, r3, [r8, #8]

004180ce <.LVL96>:
    if ( (sha512->loLen += len) < tmp)
  4180ce:	f112 0080 	adds.w	r0, r2, #128	; 0x80

004180d2 <.LVL97>:
  4180d2:	f143 0100 	adc.w	r1, r3, #0
  4180d6:	e9c8 0102 	strd	r0, r1, [r8, #8]
  4180da:	4299      	cmp	r1, r3
  4180dc:	bf08      	it	eq
  4180de:	4290      	cmpeq	r0, r2
  4180e0:	d2b6      	bcs.n	418050 <.LBB823>
        sha512->hiLen++;                       /* carry low to high */
  4180e2:	e9d8 2304 	ldrd	r2, r3, [r8, #16]

004180e6 <.LVL98>:
  4180e6:	3201      	adds	r2, #1
  4180e8:	f143 0300 	adc.w	r3, r3, #0

004180ec <.LVL99>:
  4180ec:	e9c8 2304 	strd	r2, r3, [r8, #16]
  4180f0:	e7ae      	b.n	418050 <.LBB823>

004180f2 <.LBE836>:
    while (len) {
  4180f2:	2300      	movs	r3, #0

004180f4 <.LBE821>:
}
  4180f4:	4618      	mov	r0, r3
  4180f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

004180fa <.LVL102>:
        return BAD_FUNC_ARG;
  4180fa:	f06f 03ac 	mvn.w	r3, #172	; 0xac
  4180fe:	e7f9      	b.n	4180f4 <.LBE821>
  418100:	f06f 03ac 	mvn.w	r3, #172	; 0xac
  418104:	e7f6      	b.n	4180f4 <.LBE821>

00418106 <.LBB840>:
        return BUFFER_E;
  418106:	f06f 0383 	mvn.w	r3, #131	; 0x83
  41810a:	e7f3      	b.n	4180f4 <.LBE821>
    while (len) {
  41810c:	2300      	movs	r3, #0
  41810e:	e7f1      	b.n	4180f4 <.LBE821>

Disassembly of section .text.xTaskResumeAll%146:

00418110 <xTaskResumeAll>:
{
  418110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

00418114 <.LCFI15>:
	taskENTER_CRITICAL();
  418114:	f006 f97e 	bl	41e414 <.LFE6>

00418118 <.LVL167>:
		--uxSchedulerSuspended;
  418118:	4b2d      	ldr	r3, [pc, #180]	; (4181d0 <.LVL186+0x2>)
  41811a:	681a      	ldr	r2, [r3, #0]
  41811c:	3a01      	subs	r2, #1
  41811e:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  418120:	681b      	ldr	r3, [r3, #0]
  418122:	2b00      	cmp	r3, #0
  418124:	d14c      	bne.n	4181c0 <.LVL182>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  418126:	4b2b      	ldr	r3, [pc, #172]	; (4181d4 <.LVL186+0x6>)
  418128:	681b      	ldr	r3, [r3, #0]
  41812a:	b333      	cbz	r3, 41817a <.LVL173>
  41812c:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  41812e:	4e2a      	ldr	r6, [pc, #168]	; (4181d8 <.LVL186+0xa>)
					prvAddTaskToReadyList( pxTCB );
  418130:	4f2a      	ldr	r7, [pc, #168]	; (4181dc <.LVL186+0xe>)
  418132:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 4181f0 <.LVL186+0x22>

00418136 <.LVL168>:
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  418136:	6833      	ldr	r3, [r6, #0]
  418138:	b30b      	cbz	r3, 41817e <.LVL174>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  41813a:	68f3      	ldr	r3, [r6, #12]
  41813c:	68dc      	ldr	r4, [r3, #12]

0041813e <.LVL169>:
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  41813e:	f104 0018 	add.w	r0, r4, #24
  418142:	f006 f817 	bl	41e174 <.LFE106>

00418146 <.LVL170>:
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  418146:	1d25      	adds	r5, r4, #4
  418148:	4628      	mov	r0, r5
  41814a:	f006 f813 	bl	41e174 <.LFE106>

0041814e <.LVL171>:
					prvAddTaskToReadyList( pxTCB );
  41814e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  418150:	683b      	ldr	r3, [r7, #0]
  418152:	4298      	cmp	r0, r3
  418154:	d900      	bls.n	418158 <.LVL171+0xa>
  418156:	6038      	str	r0, [r7, #0]
  418158:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41815c:	4629      	mov	r1, r5
  41815e:	eb08 0080 	add.w	r0, r8, r0, lsl #2
  418162:	f006 fb7b 	bl	41e85c <.LFE142>

00418166 <.LVL172>:
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  418166:	4b1e      	ldr	r3, [pc, #120]	; (4181e0 <.LVL186+0x12>)
  418168:	681b      	ldr	r3, [r3, #0]
  41816a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  41816c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  41816e:	429a      	cmp	r2, r3
  418170:	d3e1      	bcc.n	418136 <.LVL168>
						xYieldPending = pdTRUE;
  418172:	2201      	movs	r2, #1
  418174:	4b1b      	ldr	r3, [pc, #108]	; (4181e4 <.LVL186+0x16>)
  418176:	601a      	str	r2, [r3, #0]
  418178:	e7dd      	b.n	418136 <.LVL168>

0041817a <.LVL173>:
BaseType_t xAlreadyYielded = pdFALSE;
  41817a:	2400      	movs	r4, #0
  41817c:	e021      	b.n	4181c2 <.LVL183>

0041817e <.LVL174>:
				if( pxTCB != NULL )
  41817e:	b10c      	cbz	r4, 418184 <.LBB69>
					prvResetNextTaskUnblockTime();
  418180:	f005 ff4a 	bl	41e018 <.LFE32>

00418184 <.LBB69>:
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
  418184:	4b18      	ldr	r3, [pc, #96]	; (4181e8 <.LVL186+0x1a>)
  418186:	681c      	ldr	r4, [r3, #0]

00418188 <.LVL176>:
					if( uxPendedCounts > ( UBaseType_t ) 0U )
  418188:	b16c      	cbz	r4, 4181a6 <.LBE69>
								xYieldPending = pdTRUE;
  41818a:	4e16      	ldr	r6, [pc, #88]	; (4181e4 <.LVL186+0x16>)
  41818c:	2501      	movs	r5, #1
  41818e:	e001      	b.n	418194 <.LVL178+0x2>

00418190 <.LVL177>:
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
  418190:	3c01      	subs	r4, #1

00418192 <.LVL178>:
  418192:	d005      	beq.n	4181a0 <.LVL179+0x8>
							if( xTaskIncrementTick() != pdFALSE )
  418194:	f7ff fc66 	bl	417a64 <xTaskIncrementTick>

00418198 <.LVL179>:
  418198:	2800      	cmp	r0, #0
  41819a:	d0f9      	beq.n	418190 <.LVL177>
								xYieldPending = pdTRUE;
  41819c:	6035      	str	r5, [r6, #0]
  41819e:	e7f7      	b.n	418190 <.LVL177>
						uxPendedTicks = 0;
  4181a0:	2200      	movs	r2, #0
  4181a2:	4b11      	ldr	r3, [pc, #68]	; (4181e8 <.LVL186+0x1a>)
  4181a4:	601a      	str	r2, [r3, #0]

004181a6 <.LBE69>:
				if( xYieldPending != pdFALSE )
  4181a6:	4b0f      	ldr	r3, [pc, #60]	; (4181e4 <.LVL186+0x16>)
  4181a8:	681b      	ldr	r3, [r3, #0]
  4181aa:	b17b      	cbz	r3, 4181cc <.LVL185>

004181ac <.LVL180>:
					taskYIELD_IF_USING_PREEMPTION();
  4181ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4181b0:	4b0e      	ldr	r3, [pc, #56]	; (4181ec <.LVL186+0x1e>)
  4181b2:	601a      	str	r2, [r3, #0]
  4181b4:	f3bf 8f4f 	dsb	sy
  4181b8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  4181bc:	2401      	movs	r4, #1

004181be <.LVL181>:
  4181be:	e000      	b.n	4181c2 <.LVL183>

004181c0 <.LVL182>:
BaseType_t xAlreadyYielded = pdFALSE;
  4181c0:	2400      	movs	r4, #0

004181c2 <.LVL183>:
	taskEXIT_CRITICAL();
  4181c2:	f006 fc9f 	bl	41eb04 <vPortExitCritical>

004181c6 <.LVL184>:
}
  4181c6:	4620      	mov	r0, r4
  4181c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004181cc <.LVL185>:
BaseType_t xAlreadyYielded = pdFALSE;
  4181cc:	2400      	movs	r4, #0

004181ce <.LVL186>:
  4181ce:	e7f8      	b.n	4181c2 <.LVL183>
  4181d0:	20417850 	.word	0x20417850
  4181d4:	20417844 	.word	0x20417844
  4181d8:	20417768 	.word	0x20417768
  4181dc:	20417858 	.word	0x20417858
  4181e0:	20417838 	.word	0x20417838
  4181e4:	20417870 	.word	0x20417870
  4181e8:	2041784c 	.word	0x2041784c
  4181ec:	e000ed04 	.word	0xe000ed04
  4181f0:	20417534 	.word	0x20417534

Disassembly of section .text.s_fp_sub%147:

004181f4 <s_fp_sub>:
{
  4181f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

004181f8 <.LCFI1>:
  4181f8:	b085      	sub	sp, #20

004181fa <.LCFI2>:
  4181fa:	9201      	str	r2, [sp, #4]
  oldused  = c->used;
  4181fc:	6813      	ldr	r3, [r2, #0]
  4181fe:	9302      	str	r3, [sp, #8]

00418200 <.LVL20>:
  oldbused = b->used;
  418200:	f8d1 c000 	ldr.w	ip, [r1]
  c->used  = a->used;
  418204:	6803      	ldr	r3, [r0, #0]

00418206 <.LVL22>:
  418206:	461c      	mov	r4, r3
  418208:	9303      	str	r3, [sp, #12]
  41820a:	6014      	str	r4, [r2, #0]

0041820c <.LVL23>:
  for (x = 0; x < oldbused; x++) {
  41820c:	f1bc 0f00 	cmp.w	ip, #0
  418210:	dd4a      	ble.n	4182a8 <.LVL41>
  418212:	f100 0e04 	add.w	lr, r0, #4
  418216:	1d0e      	adds	r6, r1, #4
  418218:	1d17      	adds	r7, r2, #4
  41821a:	2200      	movs	r2, #0

0041821c <.LVL24>:
  41821c:	2300      	movs	r3, #0
  41821e:	2100      	movs	r1, #0

00418220 <.LVL25>:
     t         = ((fp_word)a->dp[x]) - (((fp_word)b->dp[x]) + t);
  418220:	f85e 4f04 	ldr.w	r4, [lr, #4]!
  418224:	2500      	movs	r5, #0
  418226:	1aa2      	subs	r2, r4, r2

00418228 <.LVL26>:
  418228:	eb65 0303 	sbc.w	r3, r5, r3
  41822c:	f856 4f04 	ldr.w	r4, [r6, #4]!
  418230:	1b12      	subs	r2, r2, r4
  418232:	f163 0300 	sbc.w	r3, r3, #0

00418236 <.LVL27>:
     c->dp[x]  = (fp_digit)t;
  418236:	f847 2f04 	str.w	r2, [r7, #4]!
     t         = (t >> DIGIT_BIT)&1;
  41823a:	f003 0201 	and.w	r2, r3, #1

0041823e <.LVL28>:
  41823e:	2300      	movs	r3, #0

00418240 <.LVL29>:
  for (x = 0; x < oldbused; x++) {
  418240:	3101      	adds	r1, #1
  418242:	458c      	cmp	ip, r1
  418244:	d1ec      	bne.n	418220 <.LVL25>
  for (; x < a->used; x++) {
  418246:	6804      	ldr	r4, [r0, #0]
  418248:	42a1      	cmp	r1, r4
  41824a:	da13      	bge.n	418274 <.LVL35+0x8>
  41824c:	008e      	lsls	r6, r1, #2
  41824e:	3604      	adds	r6, #4
  418250:	1987      	adds	r7, r0, r6
  418252:	9c01      	ldr	r4, [sp, #4]
  418254:	4426      	add	r6, r4
     t         = ((fp_word)a->dp[x]) - t;
  418256:	f857 4f04 	ldr.w	r4, [r7, #4]!
  41825a:	2500      	movs	r5, #0
  41825c:	1aa2      	subs	r2, r4, r2

0041825e <.LVL32>:
  41825e:	eb65 0303 	sbc.w	r3, r5, r3

00418262 <.LVL33>:
     c->dp[x]  = (fp_digit)t;
  418262:	f846 2f04 	str.w	r2, [r6, #4]!
     t         = (t >> DIGIT_BIT)&1;
  418266:	f003 0201 	and.w	r2, r3, #1

0041826a <.LVL34>:
  41826a:	2300      	movs	r3, #0

0041826c <.LVL35>:
  for (; x < a->used; x++) {
  41826c:	3101      	adds	r1, #1
  41826e:	6804      	ldr	r4, [r0, #0]
  418270:	428c      	cmp	r4, r1
  418272:	dcf0      	bgt.n	418256 <.LVL29+0x16>
  for (; x < oldused; x++) {
  418274:	9802      	ldr	r0, [sp, #8]

00418276 <.LVL37>:
  418276:	4288      	cmp	r0, r1
  418278:	dd09      	ble.n	41828e <.LVL38+0xa>
  41827a:	9b01      	ldr	r3, [sp, #4]
  41827c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  418280:	3304      	adds	r3, #4
     c->dp[x] = 0;
  418282:	2200      	movs	r2, #0

00418284 <.LVL38>:
  418284:	f843 2f04 	str.w	r2, [r3, #4]!
  for (; x < oldused; x++) {
  418288:	3101      	adds	r1, #1
  41828a:	4288      	cmp	r0, r1
  41828c:	d1fa      	bne.n	418284 <.LVL38>
  fp_clamp(c);
  41828e:	9903      	ldr	r1, [sp, #12]

00418290 <.LVL40>:
  418290:	b301      	cbz	r1, 4182d4 <.LCFI4+0x4>
  418292:	460a      	mov	r2, r1
  418294:	1e4b      	subs	r3, r1, #1
  418296:	3201      	adds	r2, #1
  418298:	9c01      	ldr	r4, [sp, #4]
  41829a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  41829e:	b982      	cbnz	r2, 4182c2 <.LVL44+0x12>
  4182a0:	eb04 0281 	add.w	r2, r4, r1, lsl #2
  4182a4:	3204      	adds	r2, #4
  4182a6:	e004      	b.n	4182b2 <.LVL44+0x2>

004182a8 <.LVL41>:
  t       = 0;
  4182a8:	2200      	movs	r2, #0

004182aa <.LVL42>:
  4182aa:	2300      	movs	r3, #0
  for (x = 0; x < oldbused; x++) {
  4182ac:	2100      	movs	r1, #0

004182ae <.LVL43>:
  4182ae:	e7ca      	b.n	418246 <.LVL29+0x6>

004182b0 <.LVL44>:
  fp_clamp(c);
  4182b0:	4603      	mov	r3, r0
  4182b2:	b16b      	cbz	r3, 4182d0 <.LCFI4>
  4182b4:	1e58      	subs	r0, r3, #1
  4182b6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  4182ba:	2900      	cmp	r1, #0
  4182bc:	d0f8      	beq.n	4182b0 <.LVL44>
  4182be:	9a01      	ldr	r2, [sp, #4]
  4182c0:	6013      	str	r3, [r2, #0]
  4182c2:	9b01      	ldr	r3, [sp, #4]
  4182c4:	685b      	ldr	r3, [r3, #4]
  4182c6:	9a01      	ldr	r2, [sp, #4]
  4182c8:	6053      	str	r3, [r2, #4]
}
  4182ca:	b005      	add	sp, #20

004182cc <.LCFI3>:
  4182cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004182d0 <.LCFI4>:
  4182d0:	9a01      	ldr	r2, [sp, #4]
  4182d2:	6013      	str	r3, [r2, #0]
  fp_clamp(c);
  4182d4:	2300      	movs	r3, #0
  4182d6:	e7f6      	b.n	4182c6 <.LVL44+0x16>

Disassembly of section .text.wc_ecc_import_x963_ex%148:

004182d8 <wc_ecc_import_x963_ex>:

#ifdef HAVE_ECC_KEY_IMPORT
/* import public ECC key in ANSI X9.63 format */
int wc_ecc_import_x963_ex(const byte* in, word32 inLen, ecc_key* key,
                          int curve_id)
{
  4182d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

004182dc <.LCFI118>:
  4182dc:	b083      	sub	sp, #12

004182de <.LCFI119>:
    int err = MP_OKAY;
#ifndef WOLFSSL_ATECC508A
    int compressed = 0;
#endif /* !WOLFSSL_ATECC508A */

    if (in == NULL || key == NULL)
  4182de:	2800      	cmp	r0, #0
  4182e0:	d03b      	beq.n	41835a <.LVL1419>
  4182e2:	4606      	mov	r6, r0
  4182e4:	b3ca      	cbz	r2, 41835a <.LVL1419>
        return BAD_FUNC_ARG;

    /* must be odd */
    if ((inLen & 1) == 0) {
  4182e6:	f011 0f01 	tst.w	r1, #1
  4182ea:	d039      	beq.n	418360 <.LVL1419+0x6>
  4182ec:	461f      	mov	r7, r3
  4182ee:	4614      	mov	r4, r2
  4182f0:	460d      	mov	r5, r1

004182f2 <.LBB114>:
    key->state = ECC_STATE_NONE;
  4182f2:	2300      	movs	r3, #0

004182f4 <.LVL1401>:
  4182f4:	6093      	str	r3, [r2, #8]

004182f6 <.LBE114>:
        alt_fp_init(key->pubkey.x);
        alt_fp_init(key->pubkey.y);
        alt_fp_init(key->pubkey.z);
        err = mp_init(&key->k);
    #else
        err = mp_init_multi(&key->k,
  4182f6:	f502 6bd2 	add.w	fp, r2, #1680	; 0x690
                    key->pubkey.x, key->pubkey.y, key->pubkey.z, NULL, NULL);
  4182fa:	f102 0818 	add.w	r8, r2, #24
  4182fe:	f502 7910 	add.w	r9, r2, #576	; 0x240
  418302:	f502 6a8d 	add.w	sl, r2, #1128	; 0x468
        err = mp_init_multi(&key->k,
  418306:	9301      	str	r3, [sp, #4]
  418308:	9300      	str	r3, [sp, #0]
  41830a:	4653      	mov	r3, sl
  41830c:	464a      	mov	r2, r9

0041830e <.LVL1403>:
  41830e:	4641      	mov	r1, r8

00418310 <.LVL1404>:
  418310:	4658      	mov	r0, fp

00418312 <.LVL1405>:
  418312:	f005 faab 	bl	41d86c <mp_init_multi>

00418316 <.LVL1406>:
    #endif
    if (err != MP_OKAY)
  418316:	bb30      	cbnz	r0, 418366 <.LVL1420>
        return MEMORY_E;

    /* check for 4, 2, or 3 */
    if (in[0] != 0x04 && in[0] != 0x02 && in[0] != 0x03) {
  418318:	7833      	ldrb	r3, [r6, #0]
  41831a:	3b02      	subs	r3, #2
  41831c:	b2db      	uxtb	r3, r3
  41831e:	2b02      	cmp	r3, #2
  418320:	d924      	bls.n	41836c <.LVL1422>

00418322 <.LVL1407>:
        err = ASN_PARSE_E;
    }

    if (in[0] == 0x02 || in[0] == 0x03) {
  418322:	2b01      	cmp	r3, #1
  418324:	d906      	bls.n	418334 <.LCFI121>
        err = ASN_PARSE_E;
  418326:	f06f 048b 	mvn.w	r4, #139	; 0x8b

0041832a <.LVL1408>:
#ifdef WOLFSSL_VALIDATE_ECC_IMPORT
    if (err == MP_OKAY)
        err = wc_ecc_check_key(key);
#endif

    if (err != MP_OKAY) {
  41832a:	b94c      	cbnz	r4, 418340 <.LVL1414>

0041832c <.LVL1409>:
        mp_clear(&key->k);
    }
#endif /* WOLFSSL_ATECC508A */

    return err;
}
  41832c:	4620      	mov	r0, r4
  41832e:	b003      	add	sp, #12

00418330 <.LCFI120>:
  418330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00418334 <.LCFI121>:
  418334:	f06f 04ad 	mvn.w	r4, #173	; 0xad

00418338 <.LVL1411>:
  418338:	e036      	b.n	4183a8 <.LVL1433>

0041833a <.LVL1412>:
    if (in[0] == 0x02 || in[0] == 0x03) {
  41833a:	f06f 04ad 	mvn.w	r4, #173	; 0xad

0041833e <.LVL1413>:
  41833e:	e033      	b.n	4183a8 <.LVL1433>

00418340 <.LVL1414>:
        mp_clear(key->pubkey.x);
  418340:	4640      	mov	r0, r8
  418342:	f006 fd2b 	bl	41ed9c <.LFE170>

00418346 <.LVL1415>:
        mp_clear(key->pubkey.y);
  418346:	4648      	mov	r0, r9
  418348:	f006 fd28 	bl	41ed9c <.LFE170>

0041834c <.LVL1416>:
        mp_clear(key->pubkey.z);
  41834c:	4650      	mov	r0, sl
  41834e:	f006 fd25 	bl	41ed9c <.LFE170>

00418352 <.LVL1417>:
        mp_clear(&key->k);
  418352:	4658      	mov	r0, fp
  418354:	f006 fd22 	bl	41ed9c <.LFE170>

00418358 <.LVL1418>:
  418358:	e7e8      	b.n	41832c <.LVL1409>

0041835a <.LVL1419>:
        return BAD_FUNC_ARG;
  41835a:	f06f 04ac 	mvn.w	r4, #172	; 0xac
  41835e:	e7e5      	b.n	41832c <.LVL1409>
        return ECC_BAD_ARG_E;
  418360:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
  418364:	e7e2      	b.n	41832c <.LVL1409>

00418366 <.LVL1420>:
        return MEMORY_E;
  418366:	f06f 047c 	mvn.w	r4, #124	; 0x7c

0041836a <.LVL1421>:
  41836a:	e7df      	b.n	41832c <.LVL1409>

0041836c <.LVL1422>:
    if (in[0] == 0x02 || in[0] == 0x03) {
  41836c:	2b01      	cmp	r3, #1
  41836e:	d9e4      	bls.n	41833a <.LVL1412>

00418370 <.LBB116>:
        keysize = ((inLen-1)>>1);
  418370:	1e69      	subs	r1, r5, #1
        err = wc_ecc_set_curve(key, keysize, curve_id);
  418372:	463a      	mov	r2, r7
  418374:	0849      	lsrs	r1, r1, #1

00418376 <.LVL1424>:
  418376:	4620      	mov	r0, r4
  418378:	f003 fe66 	bl	41c048 <.LFE35>

0041837c <.LVL1425>:
        key->type = ECC_PUBLICKEY;
  41837c:	2301      	movs	r3, #1
  41837e:	6023      	str	r3, [r4, #0]

00418380 <.LBE116>:
    if (err == MP_OKAY)
  418380:	4604      	mov	r4, r0

00418382 <.LVL1426>:
  418382:	2800      	cmp	r0, #0
  418384:	d1dc      	bne.n	418340 <.LVL1414>
        err = mp_read_unsigned_bin(key->pubkey.x, (byte*)in+1, (inLen-1)>>1);
  418386:	1e6a      	subs	r2, r5, #1
  418388:	40da      	lsrs	r2, r3

0041838a <.LVL1427>:
  41838a:	18f1      	adds	r1, r6, r3
  41838c:	4640      	mov	r0, r8

0041838e <.LVL1428>:
  41838e:	f006 fd5b 	bl	41ee48 <.LFE72>

00418392 <.LVL1429>:
    if (err == MP_OKAY && compressed == 0)
  418392:	4604      	mov	r4, r0
  418394:	2800      	cmp	r0, #0
  418396:	d1d3      	bne.n	418340 <.LVL1414>
        err = mp_read_unsigned_bin(key->pubkey.y, (byte*)in+1+((inLen-1)>>1),
  418398:	1e6a      	subs	r2, r5, #1
  41839a:	0852      	lsrs	r2, r2, #1

0041839c <.LVL1430>:
  41839c:	1c51      	adds	r1, r2, #1
  41839e:	4431      	add	r1, r6
  4183a0:	4648      	mov	r0, r9

004183a2 <.LVL1431>:
  4183a2:	f006 fd51 	bl	41ee48 <.LFE72>

004183a6 <.LVL1432>:
  4183a6:	4604      	mov	r4, r0

004183a8 <.LVL1433>:
    if (err == MP_OKAY)
  4183a8:	2c00      	cmp	r4, #0
  4183aa:	d1c9      	bne.n	418340 <.LVL1414>
        err = mp_set(key->pubkey.z, 1);
  4183ac:	2101      	movs	r1, #1
  4183ae:	4650      	mov	r0, sl
  4183b0:	f006 fd77 	bl	41eea2 <.LFE113>

004183b4 <.LVL1434>:
  4183b4:	4604      	mov	r4, r0

004183b6 <.LVL1435>:
  4183b6:	e7b8      	b.n	41832a <.LVL1408>

Disassembly of section .text.wc_ecc_shared_secret_gen%149:

004183b8 <wc_ecc_shared_secret_gen>:
{
  4183b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

004183bc <.LCFI57>:
  4183bc:	f5ad 6d92 	sub.w	sp, sp, #1168	; 0x490

004183c0 <.LCFI58>:
  4183c0:	4605      	mov	r5, r0
  4183c2:	460f      	mov	r7, r1
  4183c4:	4690      	mov	r8, r2
  4183c6:	461e      	mov	r6, r3
    DECLARE_CURVE_SPECS(2)
  4183c8:	ac06      	add	r4, sp, #24
  4183ca:	9405      	str	r4, [sp, #20]
  4183cc:	2228      	movs	r2, #40	; 0x28

004183ce <.LVL792>:
  4183ce:	2100      	movs	r1, #0

004183d0 <.LVL793>:
  4183d0:	4620      	mov	r0, r4

004183d2 <.LVL794>:
  4183d2:	f002 f90d 	bl	41a5f0 <.LFE157>

004183d6 <.LVL795>:
  4183d6:	ab10      	add	r3, sp, #64	; 0x40
  4183d8:	61a3      	str	r3, [r4, #24]
  4183da:	2302      	movs	r3, #2
  4183dc:	61e3      	str	r3, [r4, #28]
    if (private_key == NULL || point == NULL || out == NULL ||
  4183de:	2d00      	cmp	r5, #0
  4183e0:	d04f      	beq.n	418482 <.LBE35>
  4183e2:	2f00      	cmp	r7, #0
  4183e4:	d04d      	beq.n	418482 <.LBE35>
  4183e6:	f1b8 0f00 	cmp.w	r8, #0
  4183ea:	d04d      	beq.n	418488 <.LBE35+0x6>
  4183ec:	2e00      	cmp	r6, #0
  4183ee:	d04b      	beq.n	418488 <.LBE35+0x6>
    err = wc_ecc_curve_load(private_key->dp, &curve,
  4183f0:	2203      	movs	r2, #3
  4183f2:	a905      	add	r1, sp, #20
  4183f4:	6928      	ldr	r0, [r5, #16]
  4183f6:	f001 f9c1 	bl	41977c <.LFE155>

004183fa <.LVL796>:
    if (err != MP_OKAY)
  4183fa:	4604      	mov	r4, r0
  4183fc:	b120      	cbz	r0, 418408 <.LCFI60>

004183fe <.LVL797>:
}
  4183fe:	4620      	mov	r0, r4
  418400:	f50d 6d92 	add.w	sp, sp, #1168	; 0x490

00418404 <.LCFI59>:
  418404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00418408 <.LCFI60>:
        err = wc_ecc_shared_secret_gen_sync(private_key, point,
  418408:	f8dd a014 	ldr.w	sl, [sp, #20]

0041840c <.LBB29>:
    mp_int* k = &private_key->k;
  41840c:	f505 64d2 	add.w	r4, r5, #1680	; 0x690

00418410 <.LVL800>:
    result = wc_ecc_new_point_h(private_key->heap);
  418410:	6968      	ldr	r0, [r5, #20]

00418412 <.LVL801>:
  418412:	f005 f92b 	bl	41d66c <.LBE36>

00418416 <.LVL802>:
    if (result == NULL) {
  418416:	4681      	mov	r9, r0
  418418:	b380      	cbz	r0, 41847c <.LVL819>
    err = wc_ecc_mulmod_ex(k, point, result,
  41841a:	f8da 3008 	ldr.w	r3, [sl, #8]
  41841e:	696a      	ldr	r2, [r5, #20]
  418420:	9202      	str	r2, [sp, #8]
  418422:	2201      	movs	r2, #1
  418424:	9201      	str	r2, [sp, #4]
  418426:	f8da 2004 	ldr.w	r2, [sl, #4]
  41842a:	9200      	str	r2, [sp, #0]
  41842c:	4602      	mov	r2, r0
  41842e:	4639      	mov	r1, r7
  418430:	4620      	mov	r0, r4

00418432 <.LVL803>:
  418432:	f7f8 fe08 	bl	411046 <.LFE6>

00418436 <.LVL804>:
    if (err == MP_OKAY) {
  418436:	4604      	mov	r4, r0

00418438 <.LVL805>:
  418438:	b148      	cbz	r0, 41844e <.LBB35>
    word32 x = 0;
  41843a:	2700      	movs	r7, #0

0041843c <.LVL806>:
    *outlen = x;
  41843c:	6037      	str	r7, [r6, #0]
    wc_ecc_del_point_h(result, private_key->heap);
  41843e:	6969      	ldr	r1, [r5, #20]
  418440:	4648      	mov	r0, r9
  418442:	f005 fff9 	bl	41e438 <.LFE10>

00418446 <.LBB33>:
    _wc_ecc_curve_free(curve);
  418446:	9805      	ldr	r0, [sp, #20]
  418448:	f003 ff48 	bl	41c2dc <.LFE46>

0041844c <.LVL808>:
  41844c:	e7d7      	b.n	4183fe <.LVL797>

0041844e <.LBB35>:
        x = mp_unsigned_bin_size(curve->prime);
  41844e:	f8da 0004 	ldr.w	r0, [sl, #4]

00418452 <.LVL810>:
  418452:	f006 fd6d 	bl	41ef30 <.LFE82>

00418456 <.LVL811>:
  418456:	4607      	mov	r7, r0

00418458 <.LVL812>:
        if (*outlen < x) {
  418458:	6833      	ldr	r3, [r6, #0]
  41845a:	4298      	cmp	r0, r3
  41845c:	d817      	bhi.n	41848e <.LBB36>

0041845e <.LVL813>:
        XMEMSET(out, 0, x);
  41845e:	4602      	mov	r2, r0
  418460:	2100      	movs	r1, #0
  418462:	4640      	mov	r0, r8

00418464 <.LVL814>:
  418464:	f002 f8c4 	bl	41a5f0 <.LFE157>

00418468 <.LVL815>:
                                 (x - mp_unsigned_bin_size(result->x)));
  418468:	4648      	mov	r0, r9
  41846a:	f006 fd61 	bl	41ef30 <.LFE82>

0041846e <.LVL816>:
  41846e:	1a39      	subs	r1, r7, r0
        err = mp_to_unsigned_bin(result->x,out +
  418470:	4441      	add	r1, r8
  418472:	4648      	mov	r0, r9
  418474:	f006 fcf2 	bl	41ee5c <.LFE73>

00418478 <.LVL817>:
  418478:	4604      	mov	r4, r0

0041847a <.LVL818>:
  41847a:	e7df      	b.n	41843c <.LVL806>

0041847c <.LVL819>:
        return MEMORY_E;
  41847c:	f06f 047c 	mvn.w	r4, #124	; 0x7c

00418480 <.LVL820>:
  418480:	e7e1      	b.n	418446 <.LBB33>

00418482 <.LBE35>:
        return BAD_FUNC_ARG;
  418482:	f06f 04ac 	mvn.w	r4, #172	; 0xac
  418486:	e7ba      	b.n	4183fe <.LVL797>
  418488:	f06f 04ac 	mvn.w	r4, #172	; 0xac
  41848c:	e7b7      	b.n	4183fe <.LVL797>

0041848e <.LBB36>:
            err = BUFFER_E;
  41848e:	f06f 0483 	mvn.w	r4, #131	; 0x83

00418492 <.LVL823>:
  418492:	e7d3      	b.n	41843c <.LVL806>

Disassembly of section .text.Sha256Process%150:

00418494 <Sha256Process>:



/* length is in bytes */
static int32_t Sha256Process(Sha256* sha256, const uint8_t *input, word32 length)
{
  418494:	b410      	push	{r4}

00418496 <.LCFI0>:

    ICM_REGS->ICM_CTRL = ICM_CTRL_SWRST(1);
  418496:	2404      	movs	r4, #4
  418498:	4b33      	ldr	r3, [pc, #204]	; (418568 <.LCFI1+0x2>)
  41849a:	605c      	str	r4, [r3, #4]
    sha256->icm_descriptor.start_addr = (uint32_t)input;
  41849c:	6001      	str	r1, [r0, #0]

    /* Transfer size = (tran_size + 1) * 512bits */
    sha256->icm_descriptor.tran_size =  (length >> 6) - 1;
  41849e:	0994      	lsrs	r4, r2, #6
  4184a0:	3c01      	subs	r4, #1
  4184a2:	6084      	str	r4, [r0, #8]

004184a4 <.LBB50>:
  __ASM volatile ("dsb 0xF":::"memory");
  4184a4:	f3bf 8f4f 	dsb	sy

004184a8 <.LBE52>:
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
      SCB->DCCMVAC = op_addr;
  4184a8:	4c30      	ldr	r4, [pc, #192]	; (41856c <.LCFI1+0x6>)
  4184aa:	f8c4 0268 	str.w	r0, [r4, #616]	; 0x268

004184ae <.LBB54>:
  4184ae:	f3bf 8f4f 	dsb	sy

004184b2 <.LBB56>:
  __ASM volatile ("isb 0xF":::"memory");
  4184b2:	f3bf 8f6f 	isb	sy

004184b6 <.LBB58>:
  __ASM volatile ("dsb 0xF":::"memory");
  4184b6:	f3bf 8f4f 	dsb	sy

004184ba <.LBE60>:
    while (op_size > 0) {
  4184ba:	2a00      	cmp	r2, #0
  4184bc:	dd0b      	ble.n	4184d6 <.LBB62>
  4184be:	460b      	mov	r3, r1
  4184c0:	3a01      	subs	r2, #1

004184c2 <.LVL4>:
  4184c2:	f022 021f 	bic.w	r2, r2, #31

004184c6 <.LVL5>:
  4184c6:	3220      	adds	r2, #32
  4184c8:	4411      	add	r1, r2

004184ca <.LVL6>:
      SCB->DCCMVAC = op_addr;
  4184ca:	4622      	mov	r2, r4

004184cc <.LVL7>:
  4184cc:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
  4184d0:	3320      	adds	r3, #32
    while (op_size > 0) {
  4184d2:	4299      	cmp	r1, r3
  4184d4:	d1fa      	bne.n	4184cc <.LVL7>

004184d6 <.LBB62>:
  4184d6:	f3bf 8f4f 	dsb	sy

004184da <.LBB64>:
  __ASM volatile ("isb 0xF":::"memory");
  4184da:	f3bf 8f6f 	isb	sy

004184de <.LBE58>:
    
    SCB_CleanDCache_by_Addr((uint32_t *)(&(sha256->icm_descriptor)), sizeof(struct icm_descriptor));
    SCB_CleanDCache_by_Addr((uint32_t *)input, length);
    SCB_CleanInvalidateDCache_by_Addr((uint32_t *)&(sha256->digest), SHA256_DIGEST_SIZE);
  4184de:	f100 0180 	add.w	r1, r0, #128	; 0x80

004184e2 <.LBB66>:
  __ASM volatile ("dsb 0xF":::"memory");
  4184e2:	f3bf 8f4f 	dsb	sy

004184e6 <.LBE68>:
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
      SCB->DCCIMVAC = op_addr;
  4184e6:	4b21      	ldr	r3, [pc, #132]	; (41856c <.LCFI1+0x6>)
  4184e8:	f8c3 1270 	str.w	r1, [r3, #624]	; 0x270

004184ec <.LBB70>:
  4184ec:	f3bf 8f4f 	dsb	sy

004184f0 <.LBB72>:
  __ASM volatile ("isb 0xF":::"memory");
  4184f0:	f3bf 8f6f 	isb	sy

004184f4 <.LBE66>:


    /* ICM can set up FIPS default starting digest */
    ICM_REGS->ICM_DSCR = (uint32_t)&sha256->icm_descriptor;
  4184f4:	4b1c      	ldr	r3, [pc, #112]	; (418568 <.LCFI1+0x2>)
  4184f6:	6318      	str	r0, [r3, #48]	; 0x30
    ICM_REGS->ICM_CFG = ICM_CFG_SLBDIS(1) 
  4184f8:	f243 0204 	movw	r2, #12292	; 0x3004
  4184fc:	601a      	str	r2, [r3, #0]
                 | ICM_CFG_BBC(0)
                 | ICM_CFG_UALGO_SHA256
                 | ICM_CFG_UIHASH_Msk;

    /* MUST BE ALIGNED at 128! */
    ICM_REGS->ICM_HASH = (uint32_t)(&(sha256->digest));
  4184fe:	6359      	str	r1, [r3, #52]	; 0x34

    ICM_REGS->ICM_UIHVAL[0] = sha256->digest[0];
  418500:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  418504:	639a      	str	r2, [r3, #56]	; 0x38
    ICM_REGS->ICM_UIHVAL[1] = sha256->digest[1];
  418506:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
  41850a:	63da      	str	r2, [r3, #60]	; 0x3c
    ICM_REGS->ICM_UIHVAL[2] = sha256->digest[2];
  41850c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
  418510:	641a      	str	r2, [r3, #64]	; 0x40
    ICM_REGS->ICM_UIHVAL[3] = sha256->digest[3];
  418512:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
  418516:	645a      	str	r2, [r3, #68]	; 0x44
    ICM_REGS->ICM_UIHVAL[4] = sha256->digest[4];
  418518:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
  41851c:	649a      	str	r2, [r3, #72]	; 0x48
    ICM_REGS->ICM_UIHVAL[5] = sha256->digest[5];
  41851e:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
  418522:	64da      	str	r2, [r3, #76]	; 0x4c
    ICM_REGS->ICM_UIHVAL[6] = sha256->digest[6];
  418524:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
  418528:	651a      	str	r2, [r3, #80]	; 0x50
    ICM_REGS->ICM_UIHVAL[7] = sha256->digest[7];
  41852a:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
  41852e:	655a      	str	r2, [r3, #84]	; 0x54

00418530 <.LBB74>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  418530:	f3bf 8f5f 	dmb	sy

00418534 <.LBE74>:

    /* memory barrier - sync all before enable ICM */
    __DMB();

    ICM_REGS->ICM_IER = ICM_IER_RHC(1);
  418534:	2201      	movs	r2, #1
  418536:	611a      	str	r2, [r3, #16]
    
    /* enable the ICM and wait */
    ICM_REGS->ICM_CTRL = ICM_CTRL_ENABLE(1);
  418538:	605a      	str	r2, [r3, #4]
    while (!(ICM_REGS->ICM_ISR & ICM_ISR_RHC_Msk))
  41853a:	461a      	mov	r2, r3
  41853c:	69d3      	ldr	r3, [r2, #28]
  41853e:	f013 0f0f 	tst.w	r3, #15
  418542:	d0fb      	beq.n	41853c <.LBE74+0x8>
    {
        /* wait - when finished digest will be updated */
    }
    
    ICM_REGS->ICM_CTRL = ICM_CTRL_DISABLE(1);
  418544:	4b08      	ldr	r3, [pc, #32]	; (418568 <.LCFI1+0x2>)
  418546:	2202      	movs	r2, #2
  418548:	605a      	str	r2, [r3, #4]
    ICM_REGS->ICM_CTRL = ICM_CTRL_SWRST(1);
  41854a:	2204      	movs	r2, #4
  41854c:	605a      	str	r2, [r3, #4]

0041854e <.LBB76>:
  __ASM volatile ("dsb 0xF":::"memory");
  41854e:	f3bf 8f4f 	dsb	sy

00418552 <.LBE78>:
  418552:	4b06      	ldr	r3, [pc, #24]	; (41856c <.LCFI1+0x6>)
  418554:	f8c3 1270 	str.w	r1, [r3, #624]	; 0x270

00418558 <.LBB80>:
  418558:	f3bf 8f4f 	dsb	sy

0041855c <.LBB82>:
  __ASM volatile ("isb 0xF":::"memory");
  41855c:	f3bf 8f6f 	isb	sy

00418560 <.LBE76>:

    SCB_CleanInvalidateDCache_by_Addr((uint32_t *)&(sha256->digest), SHA256_DIGEST_SIZE);
    
    return 0;
}
  418560:	2000      	movs	r0, #0

00418562 <.LVL17>:
  418562:	f85d 4b04 	ldr.w	r4, [sp], #4

00418566 <.LCFI1>:
  418566:	4770      	bx	lr
  418568:	40048000 	.word	0x40048000
  41856c:	e000ed00 	.word	0xe000ed00

Disassembly of section .text%151:

00418580 <strlen>:
  418580:	f890 f000 	pld	[r0]
  418584:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  418588:	f020 0107 	bic.w	r1, r0, #7
  41858c:	f06f 0c00 	mvn.w	ip, #0
  418590:	f010 0407 	ands.w	r4, r0, #7
  418594:	f891 f020 	pld	[r1, #32]
  418598:	f040 8049 	bne.w	41862e <strlen+0xae>
  41859c:	f04f 0400 	mov.w	r4, #0
  4185a0:	f06f 0007 	mvn.w	r0, #7
  4185a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4185a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4185ac:	f100 0008 	add.w	r0, r0, #8
  4185b0:	fa82 f24c 	uadd8	r2, r2, ip
  4185b4:	faa4 f28c 	sel	r2, r4, ip
  4185b8:	fa83 f34c 	uadd8	r3, r3, ip
  4185bc:	faa2 f38c 	sel	r3, r2, ip
  4185c0:	bb4b      	cbnz	r3, 418616 <strlen+0x96>
  4185c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4185c6:	fa82 f24c 	uadd8	r2, r2, ip
  4185ca:	f100 0008 	add.w	r0, r0, #8
  4185ce:	faa4 f28c 	sel	r2, r4, ip
  4185d2:	fa83 f34c 	uadd8	r3, r3, ip
  4185d6:	faa2 f38c 	sel	r3, r2, ip
  4185da:	b9e3      	cbnz	r3, 418616 <strlen+0x96>
  4185dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4185e0:	fa82 f24c 	uadd8	r2, r2, ip
  4185e4:	f100 0008 	add.w	r0, r0, #8
  4185e8:	faa4 f28c 	sel	r2, r4, ip
  4185ec:	fa83 f34c 	uadd8	r3, r3, ip
  4185f0:	faa2 f38c 	sel	r3, r2, ip
  4185f4:	b97b      	cbnz	r3, 418616 <strlen+0x96>
  4185f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4185fa:	f101 0120 	add.w	r1, r1, #32
  4185fe:	fa82 f24c 	uadd8	r2, r2, ip
  418602:	f100 0008 	add.w	r0, r0, #8
  418606:	faa4 f28c 	sel	r2, r4, ip
  41860a:	fa83 f34c 	uadd8	r3, r3, ip
  41860e:	faa2 f38c 	sel	r3, r2, ip
  418612:	2b00      	cmp	r3, #0
  418614:	d0c6      	beq.n	4185a4 <strlen+0x24>
  418616:	2a00      	cmp	r2, #0
  418618:	bf04      	itt	eq
  41861a:	3004      	addeq	r0, #4
  41861c:	461a      	moveq	r2, r3
  41861e:	ba12      	rev	r2, r2
  418620:	fab2 f282 	clz	r2, r2
  418624:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  418628:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  41862c:	4770      	bx	lr
  41862e:	e9d1 2300 	ldrd	r2, r3, [r1]
  418632:	f004 0503 	and.w	r5, r4, #3
  418636:	f1c4 0000 	rsb	r0, r4, #0
  41863a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  41863e:	f014 0f04 	tst.w	r4, #4
  418642:	f891 f040 	pld	[r1, #64]	; 0x40
  418646:	fa0c f505 	lsl.w	r5, ip, r5
  41864a:	ea62 0205 	orn	r2, r2, r5
  41864e:	bf1c      	itt	ne
  418650:	ea63 0305 	ornne	r3, r3, r5
  418654:	4662      	movne	r2, ip
  418656:	f04f 0400 	mov.w	r4, #0
  41865a:	e7a9      	b.n	4185b0 <strlen+0x30>

Disassembly of section .text.wc_ecc_sign_hash%152:

0041865c <wc_ecc_sign_hash>:
{
  41865c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

00418660 <.LCFI84>:
  418660:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c

00418664 <.LCFI85>:
  418664:	f8dd 447c 	ldr.w	r4, [sp, #1148]	; 0x47c

00418668 <.LVL1011>:
    if (in == NULL || out == NULL || outlen == NULL || key == NULL ||
  418668:	2800      	cmp	r0, #0
  41866a:	d05e      	beq.n	41872a <.LVL1045>
  41866c:	4680      	mov	r8, r0
  41866e:	2a00      	cmp	r2, #0
  418670:	d05b      	beq.n	41872a <.LVL1045>
  418672:	2c00      	cmp	r4, #0
  418674:	bf18      	it	ne
  418676:	2b00      	cmpne	r3, #0
  418678:	d05a      	beq.n	418730 <.LVL1046>
  41867a:	f8dd 0478 	ldr.w	r0, [sp, #1144]	; 0x478

0041867e <.LVL1012>:
  41867e:	2800      	cmp	r0, #0
  418680:	d056      	beq.n	418730 <.LVL1046>
  418682:	461f      	mov	r7, r3
  418684:	4616      	mov	r6, r2
  418686:	4689      	mov	r9, r1
    switch(key->state) {
  418688:	68a5      	ldr	r5, [r4, #8]
  41868a:	2d03      	cmp	r5, #3
  41868c:	d005      	beq.n	41869a <.LVL1012+0x1c>
  41868e:	2d04      	cmp	r5, #4
  418690:	d028      	beq.n	4186e4 <.LVL1029>
  418692:	b115      	cbz	r5, 41869a <.LVL1012+0x1c>
            err = BAD_STATE_E;
  418694:	f06f 05bf 	mvn.w	r5, #191	; 0xbf
  418698:	e033      	b.n	418702 <.LVL1037>
            key->state = ECC_STATE_SIGN_DO;
  41869a:	2303      	movs	r3, #3

0041869c <.LVL1013>:
  41869c:	60a3      	str	r3, [r4, #8]

0041869e <.LBB70>:
        XMEMSET(*r, 0, sizeof(mp_int));
  41869e:	f44f 750a 	mov.w	r5, #552	; 0x228
  4186a2:	462a      	mov	r2, r5

004186a4 <.LVL1015>:
  4186a4:	2100      	movs	r1, #0

004186a6 <.LVL1016>:
  4186a6:	a88c      	add	r0, sp, #560	; 0x230

004186a8 <.LVL1017>:
  4186a8:	f001 ffa2 	bl	41a5f0 <.LFE157>

004186ac <.LVL1018>:
        XMEMSET(*s, 0, sizeof(mp_int));
  4186ac:	462a      	mov	r2, r5
  4186ae:	2100      	movs	r1, #0
  4186b0:	a802      	add	r0, sp, #8

004186b2 <.LVL1019>:
  4186b2:	f001 ff9d 	bl	41a5f0 <.LFE157>

004186b6 <.LBE70>:
            if ((err = mp_init_multi(r, s, NULL, NULL, NULL, NULL)) != MP_OKAY){
  4186b6:	2200      	movs	r2, #0
  4186b8:	9201      	str	r2, [sp, #4]
  4186ba:	9200      	str	r2, [sp, #0]
  4186bc:	4613      	mov	r3, r2
  4186be:	a902      	add	r1, sp, #8

004186c0 <.LVL1021>:
  4186c0:	a88c      	add	r0, sp, #560	; 0x230

004186c2 <.LVL1022>:
  4186c2:	f005 f8d3 	bl	41d86c <mp_init_multi>

004186c6 <.LVL1023>:
  4186c6:	4605      	mov	r5, r0
  4186c8:	b9d8      	cbnz	r0, 418702 <.LVL1037>
            err = wc_ecc_sign_hash_ex(in, inlen, rng, key, r, s);
  4186ca:	ab02      	add	r3, sp, #8

004186cc <.LVL1024>:
  4186cc:	9301      	str	r3, [sp, #4]
  4186ce:	ab8c      	add	r3, sp, #560	; 0x230

004186d0 <.LVL1025>:
  4186d0:	9300      	str	r3, [sp, #0]
  4186d2:	4623      	mov	r3, r4

004186d4 <.LVL1026>:
  4186d4:	f8dd 2478 	ldr.w	r2, [sp, #1144]	; 0x478
  4186d8:	4649      	mov	r1, r9
  4186da:	4640      	mov	r0, r8

004186dc <.LVL1027>:
  4186dc:	f7fc f928 	bl	414930 <wc_ecc_sign_hash_ex>

004186e0 <.LVL1028>:
            if (err < 0) {
  4186e0:	1e05      	subs	r5, r0, #0
  4186e2:	db0e      	blt.n	418702 <.LVL1037>

004186e4 <.LVL1029>:
            key->state = ECC_STATE_SIGN_ENCODE;
  4186e4:	2304      	movs	r3, #4
  4186e6:	60a3      	str	r3, [r4, #8]
            err = StoreECC_DSA_Sig(out, outlen, r, s);
  4186e8:	ab02      	add	r3, sp, #8

004186ea <.LVL1030>:
  4186ea:	aa8c      	add	r2, sp, #560	; 0x230

004186ec <.LVL1031>:
  4186ec:	4639      	mov	r1, r7
  4186ee:	4630      	mov	r0, r6
  4186f0:	f003 f8c0 	bl	41b874 <.LFE158>

004186f4 <.LVL1032>:
  4186f4:	4605      	mov	r5, r0

004186f6 <.LVL1033>:
            mp_clear(r);
  4186f6:	a88c      	add	r0, sp, #560	; 0x230

004186f8 <.LVL1034>:
  4186f8:	f006 fb50 	bl	41ed9c <.LFE170>

004186fc <.LVL1035>:
            mp_clear(s);
  4186fc:	a802      	add	r0, sp, #8

004186fe <.LVL1036>:
  4186fe:	f006 fb4d 	bl	41ed9c <.LFE170>

00418702 <.LVL1037>:
    if (err == WC_PENDING_E) {
  418702:	f115 0f6c 	cmn.w	r5, #108	; 0x6c
  418706:	d00c      	beq.n	418722 <.LCFI87>

00418708 <.LBB72>:
        mp_clear(*r);
  418708:	a88c      	add	r0, sp, #560	; 0x230

0041870a <.LVL1039>:
  41870a:	f006 fb47 	bl	41ed9c <.LFE170>

0041870e <.LVL1040>:
        mp_clear(*s);
  41870e:	a802      	add	r0, sp, #8

00418710 <.LVL1041>:
  418710:	f006 fb44 	bl	41ed9c <.LFE170>

00418714 <.LBE72>:
    key->state = ECC_STATE_NONE;
  418714:	2300      	movs	r3, #0
  418716:	60a3      	str	r3, [r4, #8]

00418718 <.LVL1043>:
}
  418718:	4628      	mov	r0, r5
  41871a:	f20d 4d5c 	addw	sp, sp, #1116	; 0x45c

0041871e <.LCFI86>:
  41871e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00418722 <.LCFI87>:
        key->state++;
  418722:	68a3      	ldr	r3, [r4, #8]
  418724:	3301      	adds	r3, #1
  418726:	60a3      	str	r3, [r4, #8]
        return err;
  418728:	e7f6      	b.n	418718 <.LVL1043>

0041872a <.LVL1045>:
        return ECC_BAD_ARG_E;
  41872a:	f06f 05a9 	mvn.w	r5, #169	; 0xa9
  41872e:	e7f3      	b.n	418718 <.LVL1043>

00418730 <.LVL1046>:
  418730:	f06f 05a9 	mvn.w	r5, #169	; 0xa9

00418734 <.LVL1047>:
  418734:	e7f0      	b.n	418718 <.LVL1043>

Disassembly of section .text.s_fp_add%153:

00418736 <s_fp_add>:
{
  418736:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

0041873a <.LCFI0>:
  41873a:	4690      	mov	r8, r2
  y       = MAX(a->used, b->used);
  41873c:	680a      	ldr	r2, [r1, #0]

0041873e <.LVL1>:
  41873e:	6803      	ldr	r3, [r0, #0]
  418740:	429a      	cmp	r2, r3
  418742:	bfb8      	it	lt
  418744:	461a      	movlt	r2, r3

00418746 <.LVL2>:
  oldused = MIN(c->used, FP_SIZE);   /* help static analysis w/ largest size */
  418746:	f8d8 3000 	ldr.w	r3, [r8]
  41874a:	2b88      	cmp	r3, #136	; 0x88
  41874c:	bfa8      	it	ge
  41874e:	2388      	movge	r3, #136	; 0x88
  418750:	469c      	mov	ip, r3

00418752 <.LVL3>:
  c->used = y;
  418752:	f8c8 2000 	str.w	r2, [r8]

00418756 <.LVL4>:
  for (x = 0; x < y; x++) {
  418756:	2a00      	cmp	r2, #0
  418758:	dd4f      	ble.n	4187fa <.LVL17>
  41875a:	4696      	mov	lr, r2
  41875c:	1d06      	adds	r6, r0, #4
  41875e:	1d0a      	adds	r2, r1, #4

00418760 <.LVL5>:
  418760:	f108 0704 	add.w	r7, r8, #4
  418764:	2400      	movs	r4, #0
  418766:	2500      	movs	r5, #0
  418768:	2300      	movs	r3, #0

0041876a <.LVL6>:
      t         += ((fp_word)a->dp[x]) + ((fp_word)b->dp[x]);
  41876a:	f856 9f04 	ldr.w	r9, [r6, #4]!
  41876e:	f852 0f04 	ldr.w	r0, [r2, #4]!
  418772:	2100      	movs	r1, #0
  418774:	eb10 0009 	adds.w	r0, r0, r9
  418778:	f141 0100 	adc.w	r1, r1, #0
  41877c:	1900      	adds	r0, r0, r4
  41877e:	4169      	adcs	r1, r5

00418780 <.LVL7>:
      c->dp[x]   = (fp_digit)t;
  418780:	f847 0f04 	str.w	r0, [r7, #4]!
      t        >>= DIGIT_BIT;
  418784:	460c      	mov	r4, r1
  418786:	2500      	movs	r5, #0

00418788 <.LVL8>:
  for (x = 0; x < y; x++) {
  418788:	3301      	adds	r3, #1
  41878a:	459e      	cmp	lr, r3
  41878c:	d1ed      	bne.n	41876a <.LVL6>
  41878e:	1e5a      	subs	r2, r3, #1
  if (t != 0 && x < FP_SIZE) {
  418790:	ea54 0105 	orrs.w	r1, r4, r5
  418794:	d005      	beq.n	4187a2 <.LVL11>
  418796:	2b87      	cmp	r3, #135	; 0x87
  418798:	dc03      	bgt.n	4187a2 <.LVL11>
     c->dp[c->used++] = (fp_digit)t;
  41879a:	3302      	adds	r3, #2

0041879c <.LVL10>:
  41879c:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
     ++x;
  4187a0:	1c93      	adds	r3, r2, #2

004187a2 <.LVL11>:
  c->used = x;
  4187a2:	f8c8 3000 	str.w	r3, [r8]
  for (; x < oldused; x++) {
  4187a6:	4563      	cmp	r3, ip
  4187a8:	da09      	bge.n	4187be <.LVL15>

004187aa <.LVL12>:
  4187aa:	eb08 0183 	add.w	r1, r8, r3, lsl #2
  4187ae:	3104      	adds	r1, #4
  for (x = 0; x < y; x++) {
  4187b0:	461a      	mov	r2, r3
     c->dp[x] = 0;
  4187b2:	2000      	movs	r0, #0

004187b4 <.LVL13>:
  4187b4:	f841 0f04 	str.w	r0, [r1, #4]!
  for (; x < oldused; x++) {
  4187b8:	3201      	adds	r2, #1
  4187ba:	4594      	cmp	ip, r2
  4187bc:	d1fa      	bne.n	4187b4 <.LVL13>

004187be <.LVL15>:
  fp_clamp(c);
  4187be:	b1d3      	cbz	r3, 4187f6 <.LVL15+0x38>
  4187c0:	1e5a      	subs	r2, r3, #1
  4187c2:	1c59      	adds	r1, r3, #1
  4187c4:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
  4187c8:	b961      	cbnz	r1, 4187e4 <.LVL15+0x26>
  4187ca:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  4187ce:	3304      	adds	r3, #4
  4187d0:	e000      	b.n	4187d4 <.LVL15+0x16>
  4187d2:	4602      	mov	r2, r0
  4187d4:	b162      	cbz	r2, 4187f0 <.LVL15+0x32>
  4187d6:	1e50      	subs	r0, r2, #1
  4187d8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  4187dc:	2900      	cmp	r1, #0
  4187de:	d0f8      	beq.n	4187d2 <.LVL15+0x14>
  4187e0:	f8c8 2000 	str.w	r2, [r8]
  4187e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
  4187e8:	f8c8 3004 	str.w	r3, [r8, #4]
}
  4187ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4187f0:	2300      	movs	r3, #0
  4187f2:	f8c8 3000 	str.w	r3, [r8]
  fp_clamp(c);
  4187f6:	2300      	movs	r3, #0
  4187f8:	e7f6      	b.n	4187e8 <.LVL15+0x2a>

004187fa <.LVL17>:
  c->used = x;
  4187fa:	2300      	movs	r3, #0

004187fc <.LVL18>:
  4187fc:	f8c8 3000 	str.w	r3, [r8]
  for (; x < oldused; x++) {
  418800:	459c      	cmp	ip, r3
  418802:	ddf8      	ble.n	4187f6 <.LVL15+0x38>
  for (x = 0; x < y; x++) {
  418804:	2300      	movs	r3, #0
  418806:	e7d0      	b.n	4187aa <.LVL12>

Disassembly of section .text.wc_ecc_verify_hash%154:

00418808 <wc_ecc_verify_hash>:
{
  418808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0041880c <.LCFI93>:
  41880c:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c

00418810 <.LCFI94>:
  418810:	f8dd 5480 	ldr.w	r5, [sp, #1152]	; 0x480
  418814:	f8dd 4484 	ldr.w	r4, [sp, #1156]	; 0x484

00418818 <.LVL1165>:
    if (sig == NULL || hash == NULL || res == NULL || key == NULL) {
  418818:	2800      	cmp	r0, #0
  41881a:	d057      	beq.n	4188cc <.LVL1196>
  41881c:	4607      	mov	r7, r0
  41881e:	2a00      	cmp	r2, #0
  418820:	d054      	beq.n	4188cc <.LVL1196>
  418822:	2d00      	cmp	r5, #0
  418824:	d055      	beq.n	4188d2 <.LVL1196+0x6>
  418826:	2c00      	cmp	r4, #0
  418828:	d053      	beq.n	4188d2 <.LVL1196+0x6>
  41882a:	461e      	mov	r6, r3
  41882c:	4690      	mov	r8, r2
  41882e:	4689      	mov	r9, r1
    switch(key->state) {
  418830:	68a3      	ldr	r3, [r4, #8]

00418832 <.LVL1166>:
  418832:	2b07      	cmp	r3, #7
  418834:	d841      	bhi.n	4188ba <.LCFI96>
  418836:	e8df f003 	tbb	[pc, r3]

0041883a <.LVL1167>:
  41883a:	4004      	.short	0x4004
  41883c:	04404040 	.word	0x04404040
  418840:	2a1e      	.short	0x2a1e
            key->state = ECC_STATE_VERIFY_DECODE;
  418842:	2305      	movs	r3, #5
  418844:	60a3      	str	r3, [r4, #8]
            *res = 0;
  418846:	f04f 0a00 	mov.w	sl, #0
  41884a:	f8c5 a000 	str.w	sl, [r5]

0041884e <.LBB90>:
        XMEMSET(*r, 0, sizeof(mp_int));
  41884e:	f44f 7b0a 	mov.w	fp, #552	; 0x228
  418852:	465a      	mov	r2, fp
  418854:	4651      	mov	r1, sl

00418856 <.LVL1169>:
  418856:	a88c      	add	r0, sp, #560	; 0x230

00418858 <.LVL1170>:
  418858:	f001 feca 	bl	41a5f0 <.LFE157>

0041885c <.LVL1171>:
        XMEMSET(*s, 0, sizeof(mp_int));
  41885c:	465a      	mov	r2, fp
  41885e:	4651      	mov	r1, sl
  418860:	a802      	add	r0, sp, #8

00418862 <.LVL1172>:
  418862:	f001 fec5 	bl	41a5f0 <.LFE157>

00418866 <.LBE90>:
            err = DecodeECC_DSA_Sig(sig, siglen, r, s);
  418866:	ab02      	add	r3, sp, #8

00418868 <.LVL1174>:
  418868:	aa8c      	add	r2, sp, #560	; 0x230

0041886a <.LVL1175>:
  41886a:	4649      	mov	r1, r9
  41886c:	4638      	mov	r0, r7
  41886e:	f003 fd9f 	bl	41c3b0 <.LFE17>

00418872 <.LVL1176>:
            if (err < 0) {
  418872:	1e07      	subs	r7, r0, #0

00418874 <.LVL1177>:
  418874:	db23      	blt.n	4188be <.LVL1195>

00418876 <.LVL1178>:
            key->state = ECC_STATE_VERIFY_DO;
  418876:	2306      	movs	r3, #6
  418878:	60a3      	str	r3, [r4, #8]
            err = wc_ecc_verify_hash_ex(r, s, hash, hashlen, res, key);
  41887a:	9401      	str	r4, [sp, #4]
  41887c:	9500      	str	r5, [sp, #0]
  41887e:	4633      	mov	r3, r6
  418880:	4642      	mov	r2, r8
  418882:	a902      	add	r1, sp, #8

00418884 <.LVL1179>:
  418884:	a88c      	add	r0, sp, #560	; 0x230

00418886 <.LVL1180>:
  418886:	f7f7 fde1 	bl	41044c <.LFE0>

0041888a <.LVL1181>:
            if (err < 0) {
  41888a:	1e07      	subs	r7, r0, #0
  41888c:	db17      	blt.n	4188be <.LVL1195>

0041888e <.LVL1182>:
            key->state = ECC_STATE_VERIFY_RES;
  41888e:	2307      	movs	r3, #7
  418890:	60a3      	str	r3, [r4, #8]

00418892 <.LVL1183>:
            mp_clear(r);
  418892:	a88c      	add	r0, sp, #560	; 0x230

00418894 <.LVL1184>:
  418894:	f006 fa82 	bl	41ed9c <.LFE170>

00418898 <.LVL1185>:
            mp_clear(s);
  418898:	a802      	add	r0, sp, #8

0041889a <.LVL1186>:
  41889a:	f006 fa7f 	bl	41ed9c <.LFE170>

0041889e <.LVL1187>:
            err = 0;
  41889e:	2700      	movs	r7, #0

004188a0 <.LBB92>:
        mp_clear(*r);
  4188a0:	a88c      	add	r0, sp, #560	; 0x230

004188a2 <.LVL1189>:
  4188a2:	f006 fa7b 	bl	41ed9c <.LFE170>

004188a6 <.LVL1190>:
        mp_clear(*s);
  4188a6:	a802      	add	r0, sp, #8

004188a8 <.LVL1191>:
  4188a8:	f006 fa78 	bl	41ed9c <.LFE170>

004188ac <.LBE92>:
    key->state = ECC_STATE_NONE;
  4188ac:	2300      	movs	r3, #0
  4188ae:	60a3      	str	r3, [r4, #8]

004188b0 <.LVL1193>:
}
  4188b0:	4638      	mov	r0, r7
  4188b2:	f20d 4d5c 	addw	sp, sp, #1116	; 0x45c

004188b6 <.LCFI95>:
  4188b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004188ba <.LCFI96>:
            err = BAD_STATE_E;
  4188ba:	f06f 07bf 	mvn.w	r7, #191	; 0xbf

004188be <.LVL1195>:
    if (err == WC_PENDING_E) {
  4188be:	f117 0f6c 	cmn.w	r7, #108	; 0x6c
  4188c2:	d1ed      	bne.n	4188a0 <.LBB92>
        key->state++;
  4188c4:	68a3      	ldr	r3, [r4, #8]
  4188c6:	3301      	adds	r3, #1
  4188c8:	60a3      	str	r3, [r4, #8]
        return err;
  4188ca:	e7f1      	b.n	4188b0 <.LVL1193>

004188cc <.LVL1196>:
        return ECC_BAD_ARG_E;
  4188cc:	f06f 07a9 	mvn.w	r7, #169	; 0xa9
  4188d0:	e7ee      	b.n	4188b0 <.LVL1193>
  4188d2:	f06f 07a9 	mvn.w	r7, #169	; 0xa9

004188d6 <.LVL1197>:
  4188d6:	e7eb      	b.n	4188b0 <.LVL1193>

Disassembly of section .text.hmac_md5_test%155:

004188d8 <hmac_md5_test>:
{
  4188d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

004188dc <.LCFI19>:
  4188dc:	b095      	sub	sp, #84	; 0x54

004188de <.LCFI20>:
  4188de:	af00      	add	r7, sp, #0

004188e0 <.LCFI21>:
  4188e0:	f5ad 7d40 	sub.w	sp, sp, #768	; 0x300
  4188e4:	f10d 067f 	add.w	r6, sp, #127	; 0x7f
  4188e8:	f026 067f 	bic.w	r6, r6, #127	; 0x7f
    const char* keys[]=
  4188ec:	4b2b      	ldr	r3, [pc, #172]	; (41899c <.LCFI23+0x6>)
  4188ee:	f107 0534 	add.w	r5, r7, #52	; 0x34
  4188f2:	f503 6287 	add.w	r2, r3, #1080	; 0x438
  4188f6:	ca07      	ldmia	r2, {r0, r1, r2}
  4188f8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    test_hmac[0] = a;
  4188fc:	f203 4244 	addw	r2, r3, #1092	; 0x444
  418900:	607a      	str	r2, [r7, #4]
  418902:	f503 628a 	add.w	r2, r3, #1104	; 0x450
  418906:	60ba      	str	r2, [r7, #8]
  418908:	2208      	movs	r2, #8
  41890a:	60fa      	str	r2, [r7, #12]
  41890c:	2210      	movs	r2, #16
  41890e:	613a      	str	r2, [r7, #16]
    test_hmac[1] = b;
  418910:	f203 4164 	addw	r1, r3, #1124	; 0x464
  418914:	6179      	str	r1, [r7, #20]
  418916:	f203 4184 	addw	r1, r3, #1156	; 0x484
  41891a:	61b9      	str	r1, [r7, #24]
  41891c:	211c      	movs	r1, #28
  41891e:	61f9      	str	r1, [r7, #28]
  418920:	623a      	str	r2, [r7, #32]
    test_hmac[2] = c;
  418922:	f503 6193 	add.w	r1, r3, #1176	; 0x498
  418926:	6279      	str	r1, [r7, #36]	; 0x24
  418928:	f203 43cc 	addw	r3, r3, #1228	; 0x4cc
  41892c:	62bb      	str	r3, [r7, #40]	; 0x28
  41892e:	2332      	movs	r3, #50	; 0x32
  418930:	62fb      	str	r3, [r7, #44]	; 0x2c
  418932:	633a      	str	r2, [r7, #48]	; 0x30
    appData.hmac_md5_test_result = times;
  418934:	2203      	movs	r2, #3
  418936:	4b1a      	ldr	r3, [pc, #104]	; (4189a0 <.LCFI23+0xa>)
  418938:	619a      	str	r2, [r3, #24]

0041893a <.LVL36>:
  41893a:	1d3c      	adds	r4, r7, #4
  41893c:	46ab      	mov	fp, r5
        wc_HmacSetKey(&hmac, MD5, (byte*)keys[i], (word32)strlen(keys[i]));
  41893e:	f04f 0a00 	mov.w	sl, #0
            appData.hmac_md5_test_result--;
  418942:	4699      	mov	r9, r3
  418944:	e002      	b.n	41894c <.LVL37+0x6>

00418946 <.LVL37>:
  418946:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  418948:	455c      	cmp	r4, fp
  41894a:	d022      	beq.n	418992 <.LVL42+0x10>
        wc_HmacSetKey(&hmac, MD5, (byte*)keys[i], (word32)strlen(keys[i]));
  41894c:	f855 8b04 	ldr.w	r8, [r5], #4
  418950:	4640      	mov	r0, r8
  418952:	f7ff fe15 	bl	418580 <strlen>

00418956 <.LVL38>:
  418956:	4603      	mov	r3, r0
  418958:	4642      	mov	r2, r8
  41895a:	4651      	mov	r1, sl
  41895c:	4630      	mov	r0, r6
  41895e:	f7fb fdc3 	bl	4144e8 <.LFE164>

00418962 <.LVL39>:
        wc_HmacUpdate(&hmac, (byte*)test_hmac[i].input,
  418962:	68a2      	ldr	r2, [r4, #8]
  418964:	6821      	ldr	r1, [r4, #0]
  418966:	4630      	mov	r0, r6
  418968:	f002 fb46 	bl	41aff8 <.LFE56>

0041896c <.LVL40>:
        wc_HmacFinal(&hmac, hash);
  41896c:	f107 0140 	add.w	r1, r7, #64	; 0x40
  418970:	4630      	mov	r0, r6
  418972:	f7fd f927 	bl	415bc4 <.LBE56>

00418976 <.LVL41>:
        if (memcmp(hash, test_hmac[i].output, MD5_DIGEST_SIZE) == 0)
  418976:	2210      	movs	r2, #16
  418978:	6861      	ldr	r1, [r4, #4]
  41897a:	f107 0040 	add.w	r0, r7, #64	; 0x40
  41897e:	f004 f863 	bl	41ca48 <memcmp>

00418982 <.LVL42>:
  418982:	2800      	cmp	r0, #0
  418984:	d1df      	bne.n	418946 <.LVL37>
            appData.hmac_md5_test_result--;
  418986:	f8d9 3018 	ldr.w	r3, [r9, #24]
  41898a:	3b01      	subs	r3, #1
  41898c:	f8c9 3018 	str.w	r3, [r9, #24]
  418990:	e7d9      	b.n	418946 <.LVL37>
}
  418992:	3754      	adds	r7, #84	; 0x54

00418994 <.LCFI22>:
  418994:	46bd      	mov	sp, r7

00418996 <.LCFI23>:
  418996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41899a:	bf00      	nop
  41899c:	0040accc 	.word	0x0040accc
  4189a0:	20417598 	.word	0x20417598

Disassembly of section .text.hmac_sha_test%156:

004189a4 <hmac_sha_test>:
{
  4189a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

004189a8 <.LCFI24>:
  4189a8:	b095      	sub	sp, #84	; 0x54

004189aa <.LCFI25>:
  4189aa:	af00      	add	r7, sp, #0

004189ac <.LCFI26>:
  4189ac:	f5ad 7d40 	sub.w	sp, sp, #768	; 0x300
  4189b0:	f10d 067f 	add.w	r6, sp, #127	; 0x7f
  4189b4:	f026 067f 	bic.w	r6, r6, #127	; 0x7f
    const char* keys[]=
  4189b8:	4b2b      	ldr	r3, [pc, #172]	; (418a68 <.LCFI28+0x6>)
  4189ba:	f107 0530 	add.w	r5, r7, #48	; 0x30
  4189be:	f503 629c 	add.w	r2, r3, #1248	; 0x4e0
  4189c2:	ca07      	ldmia	r2, {r0, r1, r2}
  4189c4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    test_hmac[0] = a;
  4189c8:	f203 4244 	addw	r2, r3, #1092	; 0x444
  4189cc:	603a      	str	r2, [r7, #0]
  4189ce:	f203 42ec 	addw	r2, r3, #1260	; 0x4ec
  4189d2:	607a      	str	r2, [r7, #4]
  4189d4:	2208      	movs	r2, #8
  4189d6:	60ba      	str	r2, [r7, #8]
  4189d8:	2214      	movs	r2, #20
  4189da:	60fa      	str	r2, [r7, #12]
    test_hmac[1] = b;
  4189dc:	f203 4164 	addw	r1, r3, #1124	; 0x464
  4189e0:	6139      	str	r1, [r7, #16]
  4189e2:	f203 5104 	addw	r1, r3, #1284	; 0x504
  4189e6:	6179      	str	r1, [r7, #20]
  4189e8:	211c      	movs	r1, #28
  4189ea:	61b9      	str	r1, [r7, #24]
  4189ec:	61fa      	str	r2, [r7, #28]
    test_hmac[2] = c;
  4189ee:	f503 6193 	add.w	r1, r3, #1176	; 0x498
  4189f2:	6239      	str	r1, [r7, #32]
  4189f4:	f203 531c 	addw	r3, r3, #1308	; 0x51c
  4189f8:	627b      	str	r3, [r7, #36]	; 0x24
  4189fa:	2332      	movs	r3, #50	; 0x32
  4189fc:	62bb      	str	r3, [r7, #40]	; 0x28
  4189fe:	62fa      	str	r2, [r7, #44]	; 0x2c
    appData.hmac_sha_test_result = times;
  418a00:	2203      	movs	r2, #3
  418a02:	4b1a      	ldr	r3, [pc, #104]	; (418a6c <.LCFI28+0xa>)
  418a04:	61da      	str	r2, [r3, #28]

00418a06 <.LVL44>:
  418a06:	463c      	mov	r4, r7
  418a08:	46ab      	mov	fp, r5
        wc_HmacSetKey(&hmac, SHA, (byte*)keys[i], (word32)strlen(keys[i]));
  418a0a:	f04f 0a01 	mov.w	sl, #1
            appData.hmac_sha_test_result--;
  418a0e:	4699      	mov	r9, r3
  418a10:	e002      	b.n	418a18 <.LVL45+0x6>

00418a12 <.LVL45>:
  418a12:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  418a14:	455c      	cmp	r4, fp
  418a16:	d022      	beq.n	418a5e <.LVL50+0x10>
        wc_HmacSetKey(&hmac, SHA, (byte*)keys[i], (word32)strlen(keys[i]));
  418a18:	f855 8b04 	ldr.w	r8, [r5], #4
  418a1c:	4640      	mov	r0, r8
  418a1e:	f7ff fdaf 	bl	418580 <strlen>

00418a22 <.LVL46>:
  418a22:	4603      	mov	r3, r0
  418a24:	4642      	mov	r2, r8
  418a26:	4651      	mov	r1, sl
  418a28:	4630      	mov	r0, r6
  418a2a:	f7fb fd5d 	bl	4144e8 <.LFE164>

00418a2e <.LVL47>:
        wc_HmacUpdate(&hmac, (byte*)test_hmac[i].input,
  418a2e:	68a2      	ldr	r2, [r4, #8]
  418a30:	6821      	ldr	r1, [r4, #0]
  418a32:	4630      	mov	r0, r6
  418a34:	f002 fae0 	bl	41aff8 <.LFE56>

00418a38 <.LVL48>:
        wc_HmacFinal(&hmac, hash);
  418a38:	f107 013c 	add.w	r1, r7, #60	; 0x3c
  418a3c:	4630      	mov	r0, r6
  418a3e:	f7fd f8c1 	bl	415bc4 <.LBE56>

00418a42 <.LVL49>:
        if (memcmp(hash, test_hmac[i].output, SHA_DIGEST_SIZE) == 0)
  418a42:	2214      	movs	r2, #20
  418a44:	6861      	ldr	r1, [r4, #4]
  418a46:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  418a4a:	f003 fffd 	bl	41ca48 <memcmp>

00418a4e <.LVL50>:
  418a4e:	2800      	cmp	r0, #0
  418a50:	d1df      	bne.n	418a12 <.LVL45>
            appData.hmac_sha_test_result--;
  418a52:	f8d9 301c 	ldr.w	r3, [r9, #28]
  418a56:	3b01      	subs	r3, #1
  418a58:	f8c9 301c 	str.w	r3, [r9, #28]
  418a5c:	e7d9      	b.n	418a12 <.LVL45>
}
  418a5e:	3754      	adds	r7, #84	; 0x54

00418a60 <.LCFI27>:
  418a60:	46bd      	mov	sp, r7

00418a62 <.LCFI28>:
  418a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  418a66:	bf00      	nop
  418a68:	0040accc 	.word	0x0040accc
  418a6c:	20417598 	.word	0x20417598

Disassembly of section .text.hmac_sha256_test%157:

00418a70 <hmac_sha256_test>:
{
  418a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00418a74 <.LCFI29>:
  418a74:	b099      	sub	sp, #100	; 0x64

00418a76 <.LCFI30>:
  418a76:	af00      	add	r7, sp, #0

00418a78 <.LCFI31>:
  418a78:	f5ad 7d40 	sub.w	sp, sp, #768	; 0x300
  418a7c:	f10d 067f 	add.w	r6, sp, #127	; 0x7f
  418a80:	f026 067f 	bic.w	r6, r6, #127	; 0x7f
    const char* keys[]=
  418a84:	4b2b      	ldr	r3, [pc, #172]	; (418b34 <.LCFI33+0x6>)
  418a86:	f107 0534 	add.w	r5, r7, #52	; 0x34
  418a8a:	f503 629c 	add.w	r2, r3, #1248	; 0x4e0
  418a8e:	ca07      	ldmia	r2, {r0, r1, r2}
  418a90:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    test_hmac[0] = a;
  418a94:	f203 4244 	addw	r2, r3, #1092	; 0x444
  418a98:	607a      	str	r2, [r7, #4]
  418a9a:	f203 5234 	addw	r2, r3, #1332	; 0x534
  418a9e:	60ba      	str	r2, [r7, #8]
  418aa0:	2208      	movs	r2, #8
  418aa2:	60fa      	str	r2, [r7, #12]
  418aa4:	2220      	movs	r2, #32
  418aa6:	613a      	str	r2, [r7, #16]
    test_hmac[1] = b;
  418aa8:	f203 4164 	addw	r1, r3, #1124	; 0x464
  418aac:	6179      	str	r1, [r7, #20]
  418aae:	f503 61ab 	add.w	r1, r3, #1368	; 0x558
  418ab2:	61b9      	str	r1, [r7, #24]
  418ab4:	211c      	movs	r1, #28
  418ab6:	61f9      	str	r1, [r7, #28]
  418ab8:	623a      	str	r2, [r7, #32]
    test_hmac[2] = c;
  418aba:	f503 6193 	add.w	r1, r3, #1176	; 0x498
  418abe:	6279      	str	r1, [r7, #36]	; 0x24
  418ac0:	f203 537c 	addw	r3, r3, #1404	; 0x57c
  418ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  418ac6:	2332      	movs	r3, #50	; 0x32
  418ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  418aca:	633a      	str	r2, [r7, #48]	; 0x30
    appData.hmac_sha256_test_result = times;
  418acc:	2203      	movs	r2, #3
  418ace:	4b1a      	ldr	r3, [pc, #104]	; (418b38 <.LCFI33+0xa>)
  418ad0:	621a      	str	r2, [r3, #32]

00418ad2 <.LVL52>:
  418ad2:	1d3c      	adds	r4, r7, #4
  418ad4:	46ab      	mov	fp, r5
        wc_HmacSetKey(&hmac, SHA256, (byte*)keys[i], (word32)strlen(keys[i]));
  418ad6:	f04f 0a02 	mov.w	sl, #2
            appData.hmac_sha256_test_result--;
  418ada:	4699      	mov	r9, r3
  418adc:	e002      	b.n	418ae4 <.LVL53+0x6>

00418ade <.LVL53>:
  418ade:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  418ae0:	455c      	cmp	r4, fp
  418ae2:	d022      	beq.n	418b2a <.LVL58+0x10>
        wc_HmacSetKey(&hmac, SHA256, (byte*)keys[i], (word32)strlen(keys[i]));
  418ae4:	f855 8b04 	ldr.w	r8, [r5], #4
  418ae8:	4640      	mov	r0, r8
  418aea:	f7ff fd49 	bl	418580 <strlen>

00418aee <.LVL54>:
  418aee:	4603      	mov	r3, r0
  418af0:	4642      	mov	r2, r8
  418af2:	4651      	mov	r1, sl
  418af4:	4630      	mov	r0, r6
  418af6:	f7fb fcf7 	bl	4144e8 <.LFE164>

00418afa <.LVL55>:
        wc_HmacUpdate(&hmac, (byte*)test_hmac[i].input,
  418afa:	68a2      	ldr	r2, [r4, #8]
  418afc:	6821      	ldr	r1, [r4, #0]
  418afe:	4630      	mov	r0, r6
  418b00:	f002 fa7a 	bl	41aff8 <.LFE56>

00418b04 <.LVL56>:
        wc_HmacFinal(&hmac, hash);
  418b04:	f107 0140 	add.w	r1, r7, #64	; 0x40
  418b08:	4630      	mov	r0, r6
  418b0a:	f7fd f85b 	bl	415bc4 <.LBE56>

00418b0e <.LVL57>:
        if (memcmp(hash, test_hmac[i].output, SHA256_DIGEST_SIZE) == 0)
  418b0e:	2220      	movs	r2, #32
  418b10:	6861      	ldr	r1, [r4, #4]
  418b12:	f107 0040 	add.w	r0, r7, #64	; 0x40
  418b16:	f003 ff97 	bl	41ca48 <memcmp>

00418b1a <.LVL58>:
  418b1a:	2800      	cmp	r0, #0
  418b1c:	d1df      	bne.n	418ade <.LVL53>
            appData.hmac_sha256_test_result--;
  418b1e:	f8d9 3020 	ldr.w	r3, [r9, #32]
  418b22:	3b01      	subs	r3, #1
  418b24:	f8c9 3020 	str.w	r3, [r9, #32]
  418b28:	e7d9      	b.n	418ade <.LVL53>
}
  418b2a:	3764      	adds	r7, #100	; 0x64

00418b2c <.LCFI32>:
  418b2c:	46bd      	mov	sp, r7

00418b2e <.LCFI33>:
  418b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  418b32:	bf00      	nop
  418b34:	0040accc 	.word	0x0040accc
  418b38:	20417598 	.word	0x20417598

Disassembly of section .text.hmac_sha384_test%158:

00418b3c <hmac_sha384_test>:
{
  418b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00418b40 <.LCFI34>:
  418b40:	b09d      	sub	sp, #116	; 0x74

00418b42 <.LCFI35>:
  418b42:	af00      	add	r7, sp, #0

00418b44 <.LCFI36>:
  418b44:	f5ad 7d40 	sub.w	sp, sp, #768	; 0x300
  418b48:	f10d 067f 	add.w	r6, sp, #127	; 0x7f
  418b4c:	f026 067f 	bic.w	r6, r6, #127	; 0x7f
    const char* keys[]=
  418b50:	4b2b      	ldr	r3, [pc, #172]	; (418c00 <.LCFI38+0x6>)
  418b52:	f107 0534 	add.w	r5, r7, #52	; 0x34
  418b56:	f503 629c 	add.w	r2, r3, #1248	; 0x4e0
  418b5a:	ca07      	ldmia	r2, {r0, r1, r2}
  418b5c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    test_hmac[0] = a;
  418b60:	f203 4244 	addw	r2, r3, #1092	; 0x444
  418b64:	607a      	str	r2, [r7, #4]
  418b66:	f503 62b4 	add.w	r2, r3, #1440	; 0x5a0
  418b6a:	60ba      	str	r2, [r7, #8]
  418b6c:	2208      	movs	r2, #8
  418b6e:	60fa      	str	r2, [r7, #12]
  418b70:	2230      	movs	r2, #48	; 0x30
  418b72:	613a      	str	r2, [r7, #16]
    test_hmac[1] = b;
  418b74:	f203 4164 	addw	r1, r3, #1124	; 0x464
  418b78:	6179      	str	r1, [r7, #20]
  418b7a:	f203 51d4 	addw	r1, r3, #1492	; 0x5d4
  418b7e:	61b9      	str	r1, [r7, #24]
  418b80:	211c      	movs	r1, #28
  418b82:	61f9      	str	r1, [r7, #28]
  418b84:	623a      	str	r2, [r7, #32]
    test_hmac[2] = c;
  418b86:	f503 6193 	add.w	r1, r3, #1176	; 0x498
  418b8a:	6279      	str	r1, [r7, #36]	; 0x24
  418b8c:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
  418b90:	62bb      	str	r3, [r7, #40]	; 0x28
  418b92:	2332      	movs	r3, #50	; 0x32
  418b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  418b96:	633a      	str	r2, [r7, #48]	; 0x30
    appData.hmac_sha384_test_result = times;
  418b98:	2203      	movs	r2, #3
  418b9a:	4b1a      	ldr	r3, [pc, #104]	; (418c04 <.LCFI38+0xa>)
  418b9c:	625a      	str	r2, [r3, #36]	; 0x24

00418b9e <.LVL60>:
  418b9e:	1d3c      	adds	r4, r7, #4
  418ba0:	46ab      	mov	fp, r5
        wc_HmacSetKey(&hmac, SHA384, (byte*)keys[i], (word32)strlen(keys[i]));
  418ba2:	f04f 0a05 	mov.w	sl, #5
            appData.hmac_sha384_test_result--;
  418ba6:	4699      	mov	r9, r3
  418ba8:	e002      	b.n	418bb0 <.LVL61+0x6>

00418baa <.LVL61>:
  418baa:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  418bac:	455c      	cmp	r4, fp
  418bae:	d022      	beq.n	418bf6 <.LVL66+0x10>
        wc_HmacSetKey(&hmac, SHA384, (byte*)keys[i], (word32)strlen(keys[i]));
  418bb0:	f855 8b04 	ldr.w	r8, [r5], #4
  418bb4:	4640      	mov	r0, r8
  418bb6:	f7ff fce3 	bl	418580 <strlen>

00418bba <.LVL62>:
  418bba:	4603      	mov	r3, r0
  418bbc:	4642      	mov	r2, r8
  418bbe:	4651      	mov	r1, sl
  418bc0:	4630      	mov	r0, r6
  418bc2:	f7fb fc91 	bl	4144e8 <.LFE164>

00418bc6 <.LVL63>:
        wc_HmacUpdate(&hmac, (byte*)test_hmac[i].input,
  418bc6:	68a2      	ldr	r2, [r4, #8]
  418bc8:	6821      	ldr	r1, [r4, #0]
  418bca:	4630      	mov	r0, r6
  418bcc:	f002 fa14 	bl	41aff8 <.LFE56>

00418bd0 <.LVL64>:
        wc_HmacFinal(&hmac, hash);
  418bd0:	f107 0140 	add.w	r1, r7, #64	; 0x40
  418bd4:	4630      	mov	r0, r6
  418bd6:	f7fc fff5 	bl	415bc4 <.LBE56>

00418bda <.LVL65>:
        if (memcmp(hash, test_hmac[i].output, SHA384_DIGEST_SIZE) == 0)
  418bda:	2230      	movs	r2, #48	; 0x30
  418bdc:	6861      	ldr	r1, [r4, #4]
  418bde:	f107 0040 	add.w	r0, r7, #64	; 0x40
  418be2:	f003 ff31 	bl	41ca48 <memcmp>

00418be6 <.LVL66>:
  418be6:	2800      	cmp	r0, #0
  418be8:	d1df      	bne.n	418baa <.LVL61>
            appData.hmac_sha384_test_result--;
  418bea:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
  418bee:	3b01      	subs	r3, #1
  418bf0:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
  418bf4:	e7d9      	b.n	418baa <.LVL61>
}
  418bf6:	3774      	adds	r7, #116	; 0x74

00418bf8 <.LCFI37>:
  418bf8:	46bd      	mov	sp, r7

00418bfa <.LCFI38>:
  418bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  418bfe:	bf00      	nop
  418c00:	0040accc 	.word	0x0040accc
  418c04:	20417598 	.word	0x20417598

Disassembly of section .text.wc_AesCbcEncrypt%159:

00418c08 <wc_AesCbcEncrypt>:
/* AES-CBC */
#ifdef HAVE_AES_CBC


int wc_AesCbcEncrypt(Aes* aes, byte* out, const byte* in, word32 sz)
{
  418c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

00418c0a <.LCFI8>:
  418c0a:	4606      	mov	r6, r0
  418c0c:	460f      	mov	r7, r1
  418c0e:	4614      	mov	r4, r2
  418c10:	461d      	mov	r5, r3
    /* set all the fields needed to set-up the AES engine */
    aes_configuration.lod = 0;
  418c12:	4b2d      	ldr	r3, [pc, #180]	; (418cc8 <.LVL45+0x10>)

00418c14 <.LVL28>:
  418c14:	2200      	movs	r2, #0

00418c16 <.LVL29>:
  418c16:	609a      	str	r2, [r3, #8]
    aes_configuration.gtag_en = 0;
  418c18:	60da      	str	r2, [r3, #12]
    aes_configuration.processing_delay = 0;
  418c1a:	611a      	str	r2, [r3, #16]
    aes_configuration.opmode = AES_CBC_MODE;
  418c1c:	2101      	movs	r1, #1

00418c1e <.LVL30>:
  418c1e:	70d9      	strb	r1, [r3, #3]
    aes_configuration.start_mode = AES_AUTO_START;
  418c20:	7099      	strb	r1, [r3, #2]
    aes_configuration.cfb_size = AES_CFB_SIZE_128;
  418c22:	711a      	strb	r2, [r3, #4]
    aes_configuration.encrypt_mode = AES_PIC32C_ENCRYPTION;
  418c24:	7019      	strb	r1, [r3, #0]

    /* keylen is in bytes from call - CMSIS is enum */
    switch (aes->keylen)
  418c26:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
  418c2a:	2b18      	cmp	r3, #24
  418c2c:	d044      	beq.n	418cb8 <.LVL45>
  418c2e:	2b20      	cmp	r3, #32
  418c30:	d046      	beq.n	418cc0 <.LVL45+0x8>
    {
        default:
        case 16: aes_configuration.key_size = AES_KEY_SIZE_128; break;
  418c32:	4b25      	ldr	r3, [pc, #148]	; (418cc8 <.LVL45+0x10>)
  418c34:	705a      	strb	r2, [r3, #1]

00418c36 <.LBB5>:
    ul_mode |= (p_cfg->key_size << AES_MR_KEYSIZE_Pos);
  418c36:	4b24      	ldr	r3, [pc, #144]	; (418cc8 <.LVL45+0x10>)
  418c38:	785a      	ldrb	r2, [r3, #1]
    ul_mode |= AES_MR_CKEY_PASSWD;
  418c3a:	4b24      	ldr	r3, [pc, #144]	; (418ccc <.LVL45+0x14>)
  418c3c:	ea43 2382 	orr.w	r3, r3, r2, lsl #10

00418c40 <.LVL32>:
    AES_REGS->AES_MR = ul_mode;
  418c40:	4a23      	ldr	r2, [pc, #140]	; (418cd0 <.LVL45+0x18>)
  418c42:	6053      	str	r3, [r2, #4]

00418c44 <.LBE5>:
        case 24: aes_configuration.key_size = AES_KEY_SIZE_192; break;
        case 32: aes_configuration.key_size = AES_KEY_SIZE_256; break;
    }

    AesConfigure(&aes_configuration);
    AesWriteKey(aes->key_ce, aes->keylen);
  418c44:	f8d6 10f4 	ldr.w	r1, [r6, #244]	; 0xf4
  418c48:	f506 7096 	add.w	r0, r6, #300	; 0x12c

00418c4c <.LVL34>:
  418c4c:	f004 ffe4 	bl	41dc18 <.LFE47>

00418c50 <.LVL35>:
    AesWriteIV(aes->iv_ce);
  418c50:	f506 70a6 	add.w	r0, r6, #332	; 0x14c
  418c54:	f005 fece 	bl	41e9f4 <.LFE3>

00418c58 <.LVL36>:
    /* set up pointers for input and output buffers */
    const uint32_t *inptr = (const uint32_t *)in;
    uint32_t *outptr = (uint32_t *)out;

    uint32_t block;   /* 16 bytes = 4 32bit block size */
    for (block = 0; block < sz; block += 16)
  418c58:	b335      	cbz	r5, 418ca8 <.LVL43>
  418c5a:	f104 0110 	add.w	r1, r4, #16
  418c5e:	f107 0010 	add.w	r0, r7, #16
  418c62:	2400      	movs	r4, #0

00418c64 <.LVL37>:
    {
        /* Write the data to be ciphered to the input data registers. */
        AES_REGS->AES_IDATAR[0] = *inptr++;
  418c64:	4a1a      	ldr	r2, [pc, #104]	; (418cd0 <.LVL45+0x18>)

00418c66 <.LVL38>:
  418c66:	f851 3c10 	ldr.w	r3, [r1, #-16]
  418c6a:	6413      	str	r3, [r2, #64]	; 0x40

00418c6c <.LVL39>:
        AES_REGS->AES_IDATAR[1] = *inptr++;
  418c6c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
  418c70:	6453      	str	r3, [r2, #68]	; 0x44

00418c72 <.LVL40>:
        AES_REGS->AES_IDATAR[2] = *inptr++;
  418c72:	f851 3c08 	ldr.w	r3, [r1, #-8]
  418c76:	6493      	str	r3, [r2, #72]	; 0x48

00418c78 <.LVL41>:
        AES_REGS->AES_IDATAR[3] = *inptr++;
  418c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
  418c7c:	64d3      	str	r3, [r2, #76]	; 0x4c

        /* Note the blocking here - state machine this? */
        while (!(AES_REGS->AES_ISR & AES_ISR_DATRDY_Msk))  ;
  418c7e:	69d3      	ldr	r3, [r2, #28]
  418c80:	f013 0f01 	tst.w	r3, #1
  418c84:	d0fb      	beq.n	418c7e <.LVL41+0x6>

        /* encrypt complete - read out the data */
        *outptr++ = AES_REGS->AES_ODATAR[0];
  418c86:	6d13      	ldr	r3, [r2, #80]	; 0x50
  418c88:	f840 3c10 	str.w	r3, [r0, #-16]
        *outptr++ = AES_REGS->AES_ODATAR[1];
  418c8c:	6d53      	ldr	r3, [r2, #84]	; 0x54
  418c8e:	f840 3c0c 	str.w	r3, [r0, #-12]
        *outptr++ = AES_REGS->AES_ODATAR[2];
  418c92:	6d93      	ldr	r3, [r2, #88]	; 0x58
  418c94:	f840 3c08 	str.w	r3, [r0, #-8]
        *outptr++ = AES_REGS->AES_ODATAR[3];
  418c98:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
  418c9a:	f840 3c04 	str.w	r3, [r0, #-4]
    for (block = 0; block < sz; block += 16)
  418c9e:	3410      	adds	r4, #16

00418ca0 <.LVL42>:
  418ca0:	3110      	adds	r1, #16
  418ca2:	3010      	adds	r0, #16
  418ca4:	42a5      	cmp	r5, r4
  418ca6:	d8de      	bhi.n	418c66 <.LVL38>

00418ca8 <.LVL43>:
    }

    /* Last IV equals last cipher text */
    wc_AesSetIV(aes, out + sz - 16);
  418ca8:	f1a5 0110 	sub.w	r1, r5, #16
  418cac:	4439      	add	r1, r7
  418cae:	4630      	mov	r0, r6
  418cb0:	f004 feec 	bl	41da8c <.LFE148>

00418cb4 <.LVL44>:

    return 0;
}
  418cb4:	2000      	movs	r0, #0
  418cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00418cb8 <.LVL45>:
        case 24: aes_configuration.key_size = AES_KEY_SIZE_192; break;
  418cb8:	2201      	movs	r2, #1
  418cba:	4b03      	ldr	r3, [pc, #12]	; (418cc8 <.LVL45+0x10>)
  418cbc:	705a      	strb	r2, [r3, #1]
  418cbe:	e7ba      	b.n	418c36 <.LBB5>
        case 32: aes_configuration.key_size = AES_KEY_SIZE_256; break;
  418cc0:	2202      	movs	r2, #2
  418cc2:	4b01      	ldr	r3, [pc, #4]	; (418cc8 <.LVL45+0x10>)
  418cc4:	705a      	strb	r2, [r3, #1]
  418cc6:	e7b6      	b.n	418c36 <.LBB5>
  418cc8:	204177e0 	.word	0x204177e0
  418ccc:	00e01101 	.word	0x00e01101
  418cd0:	4006c000 	.word	0x4006c000

Disassembly of section .text.SYS_TIME_PLIBCallback%160:

00418cd4 <SYS_TIME_PLIBCallback>:
        }
    }
}

static void SYS_TIME_PLIBCallback(uintptr_t context)
{
  418cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

00418cd8 <.LCFI24>:
    SYS_TIME_COUNTER_OBJ* counterObj = (SYS_TIME_COUNTER_OBJ *)&gSystemCounterObj;
    SYS_TIME_TIMER_OBJ* tmrActive = counterObj->tmrActive;
  418cd8:	4c2f      	ldr	r4, [pc, #188]	; (418d98 <.LVL234>)
  418cda:	6b25      	ldr	r5, [r4, #48]	; 0x30

00418cdc <.LVL210>:
    uint32_t elapsedCount = 0;
    bool interruptState;

    counterObj->hwTimerCurrentValue = counterObj->timePlib->timerCounterGet();
  418cdc:	6863      	ldr	r3, [r4, #4]
  418cde:	699b      	ldr	r3, [r3, #24]
  418ce0:	4798      	blx	r3

00418ce2 <.LVL211>:
  418ce2:	6160      	str	r0, [r4, #20]

    elapsedCount = SYS_TIME_GetElapsedCount(counterObj->hwTimerCurrentValue)                  ;
  418ce4:	f005 feaa 	bl	41ea3c <.LFE163>

00418ce8 <.LVL212>:
  418ce8:	4606      	mov	r6, r0

00418cea <.LVL213>:

    if (tmrActive != NULL)
  418cea:	2d00      	cmp	r5, #0
  418cec:	d047      	beq.n	418d7e <.LVL228>
    {
        counterObj->interruptNestingCount++;
  418cee:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  418cf2:	3301      	adds	r3, #1
  418cf4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

00418cf8 <.LBB31>:
    SYS_TIME_UpdateTimerList(elapsedCounts);
  418cf8:	f005 f9d0 	bl	41e09c <.LFE20>

00418cfc <.LBB33>:
    SYS_TIME_TIMER_OBJ* tmrActive = counterObj->tmrActive;
  418cfc:	6b24      	ldr	r4, [r4, #48]	; 0x30

00418cfe <.LVL216>:
    while (tmrActive != NULL)
  418cfe:	b134      	cbz	r4, 418d0e <.LVL218>
        if(tmrActive->relativeTimePending == 0)
  418d00:	68a3      	ldr	r3, [r4, #8]
  418d02:	b923      	cbnz	r3, 418d0e <.LVL218>
            tmrActive->tmrElapsedFlag = true;
  418d04:	2501      	movs	r5, #1

00418d06 <.LVL217>:
                    tmrActive->active = false;
  418d06:	f04f 0800 	mov.w	r8, #0
            tmrActive = counterObj->tmrActive;
  418d0a:	4f23      	ldr	r7, [pc, #140]	; (418d98 <.LVL234>)
  418d0c:	e011      	b.n	418d32 <.LVL221+0x14>

00418d0e <.LVL218>:
  418d0e:	4c23      	ldr	r4, [pc, #140]	; (418d9c <.LVL234+0x4>)

00418d10 <.LVL219>:
  418d10:	f504 75a0 	add.w	r5, r4, #320	; 0x140

00418d14 <.LBB36>:
            timers[i].tmrElapsed = false;
  418d14:	2700      	movs	r7, #0
  418d16:	e01f      	b.n	418d58 <.LBB38+0x4>

00418d18 <.LBB37>:
                SYS_TIME_TimerDestroy(tmrActive->tmrHandle);
  418d18:	69e0      	ldr	r0, [r4, #28]
  418d1a:	f004 fe5d 	bl	41d9d8 <.LFE148>

00418d1e <.LVL221>:
            if(tmrActive->callback != NULL)
  418d1e:	68e3      	ldr	r3, [r4, #12]
  418d20:	b10b      	cbz	r3, 418d26 <.LVL221+0x8>
                tmrActive->callback(tmrActive->context);
  418d22:	6920      	ldr	r0, [r4, #16]
  418d24:	4798      	blx	r3
            tmrActive = counterObj->tmrActive;
  418d26:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    while (tmrActive != NULL)
  418d28:	2c00      	cmp	r4, #0
  418d2a:	d0f0      	beq.n	418d0e <.LVL218>
        if(tmrActive->relativeTimePending == 0)
  418d2c:	68a3      	ldr	r3, [r4, #8]
  418d2e:	2b00      	cmp	r3, #0
  418d30:	d1ed      	bne.n	418d0e <.LVL218>
            tmrActive->tmrElapsedFlag = true;
  418d32:	7525      	strb	r5, [r4, #20]
            tmrActive->tmrElapsed = true;
  418d34:	7565      	strb	r5, [r4, #21]
            if ((tmrActive->type == SYS_TIME_SINGLE) && (tmrActive->callback != NULL))
  418d36:	78a3      	ldrb	r3, [r4, #2]
  418d38:	b913      	cbnz	r3, 418d40 <.LVL221+0x22>
  418d3a:	68e3      	ldr	r3, [r4, #12]
  418d3c:	2b00      	cmp	r3, #0
  418d3e:	d1eb      	bne.n	418d18 <.LBB37>
                SYS_TIME_RemoveFromList(tmrActive);
  418d40:	4620      	mov	r0, r4
  418d42:	f004 f925 	bl	41cf90 <SYS_TIME_RemoveFromList>

00418d46 <.LVL224>:
                if (tmrActive->type == SYS_TIME_SINGLE)
  418d46:	78a3      	ldrb	r3, [r4, #2]
  418d48:	2b00      	cmp	r3, #0
  418d4a:	d1e8      	bne.n	418d1e <.LVL221>
                    tmrActive->active = false;
  418d4c:	f884 8001 	strb.w	r8, [r4, #1]
  418d50:	e7e5      	b.n	418d1e <.LVL221>

00418d52 <.LVL225>:
  418d52:	3420      	adds	r4, #32

00418d54 <.LBB38>:
    for (uint8_t i = 0; i < SYS_TIME_MAX_TIMERS; i++)
  418d54:	42ac      	cmp	r4, r5
  418d56:	d00c      	beq.n	418d72 <.LBE31>
  418d58:	4620      	mov	r0, r4
        if (timers[i].tmrElapsed == true)
  418d5a:	7d63      	ldrb	r3, [r4, #21]
  418d5c:	2b00      	cmp	r3, #0
  418d5e:	d0f8      	beq.n	418d52 <.LVL225>
            timers[i].tmrElapsed = false;
  418d60:	7567      	strb	r7, [r4, #21]
            if (timers[i].type == SYS_TIME_PERIODIC)
  418d62:	78a3      	ldrb	r3, [r4, #2]
  418d64:	2b01      	cmp	r3, #1
  418d66:	d1f4      	bne.n	418d52 <.LVL225>
                timers[i].relativeTimePending = timers[i].requestedTime;
  418d68:	6863      	ldr	r3, [r4, #4]
  418d6a:	60a3      	str	r3, [r4, #8]
                SYS_TIME_AddToList(&timers[i]);
  418d6c:	f001 fd6e 	bl	41a84c <.LFE154>

00418d70 <.LVL226>:
  418d70:	e7ef      	b.n	418d52 <.LVL225>

00418d72 <.LBE31>:

        SYS_TIME_UpdateTime(elapsedCount);

        counterObj->interruptNestingCount--;
  418d72:	4a09      	ldr	r2, [pc, #36]	; (418d98 <.LVL234>)
  418d74:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
  418d78:	3b01      	subs	r3, #1
  418d7a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c

00418d7e <.LVL228>:
    }
    SYS_TIME_Counter64Update(elapsedCount);
  418d7e:	4630      	mov	r0, r6
  418d80:	f005 fd00 	bl	41e784 <.LFE155>

00418d84 <.LVL229>:

    interruptState = SYS_INT_Disable();
  418d84:	f005 ff22 	bl	41ebcc <SYS_INT_Disable>

00418d88 <.LVL230>:
  418d88:	4604      	mov	r4, r0

00418d8a <.LVL231>:
    SYS_TIME_HwTimerCompareUpdate();
  418d8a:	f002 f977 	bl	41b07c <.LFE172>

00418d8e <.LVL232>:
    SYS_INT_Restore(interruptState);
  418d8e:	4620      	mov	r0, r4
  418d90:	f005 ff25 	bl	41ebde <.LFE142>

00418d94 <.LVL233>:
  418d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00418d98 <.LVL234>:
  418d98:	20417688 	.word	0x20417688
  418d9c:	204173f4 	.word	0x204173f4

Disassembly of section .text.hmac_sha512_test%161:

00418da0 <hmac_sha512_test>:
{
  418da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00418da4 <.LCFI39>:
  418da4:	b0a1      	sub	sp, #132	; 0x84

00418da6 <.LCFI40>:
  418da6:	af00      	add	r7, sp, #0

00418da8 <.LCFI41>:
  418da8:	f5ad 7d40 	sub.w	sp, sp, #768	; 0x300
  418dac:	f10d 067f 	add.w	r6, sp, #127	; 0x7f
  418db0:	f026 067f 	bic.w	r6, r6, #127	; 0x7f
    const char* keys[]=
  418db4:	4b2a      	ldr	r3, [pc, #168]	; (418e60 <.LCFI43+0x4>)
  418db6:	f107 0534 	add.w	r5, r7, #52	; 0x34
  418dba:	f503 629c 	add.w	r2, r3, #1248	; 0x4e0
  418dbe:	ca07      	ldmia	r2, {r0, r1, r2}
  418dc0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    test_hmac[0] = a;
  418dc4:	f203 4244 	addw	r2, r3, #1092	; 0x444
  418dc8:	607a      	str	r2, [r7, #4]
  418dca:	f203 623c 	addw	r2, r3, #1596	; 0x63c
  418dce:	60ba      	str	r2, [r7, #8]
  418dd0:	2208      	movs	r2, #8
  418dd2:	60fa      	str	r2, [r7, #12]
  418dd4:	2240      	movs	r2, #64	; 0x40
  418dd6:	613a      	str	r2, [r7, #16]
    test_hmac[1] = b;
  418dd8:	f203 4164 	addw	r1, r3, #1124	; 0x464
  418ddc:	6179      	str	r1, [r7, #20]
  418dde:	f503 61d0 	add.w	r1, r3, #1664	; 0x680
  418de2:	61b9      	str	r1, [r7, #24]
  418de4:	211c      	movs	r1, #28
  418de6:	61f9      	str	r1, [r7, #28]
  418de8:	623a      	str	r2, [r7, #32]
    test_hmac[2] = c;
  418dea:	f503 6193 	add.w	r1, r3, #1176	; 0x498
  418dee:	6279      	str	r1, [r7, #36]	; 0x24
  418df0:	f203 63c4 	addw	r3, r3, #1732	; 0x6c4
  418df4:	62bb      	str	r3, [r7, #40]	; 0x28
  418df6:	2332      	movs	r3, #50	; 0x32
  418df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  418dfa:	633a      	str	r2, [r7, #48]	; 0x30
    appData.hmac_sha512_test_result = times;
  418dfc:	2203      	movs	r2, #3
  418dfe:	4b19      	ldr	r3, [pc, #100]	; (418e64 <.LCFI43+0x8>)
  418e00:	629a      	str	r2, [r3, #40]	; 0x28

00418e02 <.LVL68>:
  418e02:	1d3c      	adds	r4, r7, #4
  418e04:	46ab      	mov	fp, r5
        wc_HmacSetKey(&hmac, SHA512, (byte*)keys[i], (word32)strlen(keys[i]));
  418e06:	f04f 0a04 	mov.w	sl, #4
            appData.hmac_sha512_test_result--;
  418e0a:	4699      	mov	r9, r3
  418e0c:	e002      	b.n	418e14 <.LVL69+0x6>

00418e0e <.LVL69>:
  418e0e:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  418e10:	455c      	cmp	r4, fp
  418e12:	d021      	beq.n	418e58 <.LVL74+0x10>
        wc_HmacSetKey(&hmac, SHA512, (byte*)keys[i], (word32)strlen(keys[i]));
  418e14:	f855 8b04 	ldr.w	r8, [r5], #4
  418e18:	4640      	mov	r0, r8
  418e1a:	f7ff fbb1 	bl	418580 <strlen>

00418e1e <.LVL70>:
  418e1e:	4603      	mov	r3, r0
  418e20:	4642      	mov	r2, r8
  418e22:	4651      	mov	r1, sl
  418e24:	4630      	mov	r0, r6
  418e26:	f7fb fb5f 	bl	4144e8 <.LFE164>

00418e2a <.LVL71>:
        wc_HmacUpdate(&hmac, (byte*)test_hmac[i].input,
  418e2a:	68a2      	ldr	r2, [r4, #8]
  418e2c:	6821      	ldr	r1, [r4, #0]
  418e2e:	4630      	mov	r0, r6
  418e30:	f002 f8e2 	bl	41aff8 <.LFE56>

00418e34 <.LVL72>:
        wc_HmacFinal(&hmac, hash);
  418e34:	f107 0140 	add.w	r1, r7, #64	; 0x40
  418e38:	4630      	mov	r0, r6
  418e3a:	f7fc fec3 	bl	415bc4 <.LBE56>

00418e3e <.LVL73>:
        if (memcmp(hash, test_hmac[i].output, SHA512_DIGEST_SIZE) == 0)
  418e3e:	2240      	movs	r2, #64	; 0x40
  418e40:	6861      	ldr	r1, [r4, #4]
  418e42:	18b8      	adds	r0, r7, r2
  418e44:	f003 fe00 	bl	41ca48 <memcmp>

00418e48 <.LVL74>:
  418e48:	2800      	cmp	r0, #0
  418e4a:	d1e0      	bne.n	418e0e <.LVL69>
            appData.hmac_sha512_test_result--;
  418e4c:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
  418e50:	3b01      	subs	r3, #1
  418e52:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
  418e56:	e7da      	b.n	418e0e <.LVL69>
}
  418e58:	3784      	adds	r7, #132	; 0x84

00418e5a <.LCFI42>:
  418e5a:	46bd      	mov	sp, r7

00418e5c <.LCFI43>:
  418e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  418e60:	0040accc 	.word	0x0040accc
  418e64:	20417598 	.word	0x20417598

Disassembly of section .text.Sha1Process%162:

00418e68 <Sha1Process>:
}



static int32_t Sha1Process(Sha *sha, const uint8_t *input, word32 length)
{
  418e68:	b410      	push	{r4}

00418e6a <.LCFI0>:
	ICM_REGS->ICM_CTRL = ICM_CTRL_SWRST(1);
  418e6a:	2404      	movs	r4, #4
  418e6c:	4b2e      	ldr	r3, [pc, #184]	; (418f28 <.LCFI1+0x2>)
  418e6e:	605c      	str	r4, [r3, #4]
    sha->icm_descriptor.start_addr = (uint32_t)input;
  418e70:	6001      	str	r1, [r0, #0]

    /* Transfer size = (tran_size + 1) * 512bits */
    sha->icm_descriptor.tran_size =  (length >> 6) - 1;
  418e72:	0994      	lsrs	r4, r2, #6
  418e74:	3c01      	subs	r4, #1
  418e76:	6084      	str	r4, [r0, #8]

00418e78 <.LBB50>:
  __ASM volatile ("dsb 0xF":::"memory");
  418e78:	f3bf 8f4f 	dsb	sy

00418e7c <.LBE52>:
      SCB->DCCMVAC = op_addr;
  418e7c:	4c2b      	ldr	r4, [pc, #172]	; (418f2c <.LCFI1+0x6>)
  418e7e:	f8c4 0268 	str.w	r0, [r4, #616]	; 0x268

00418e82 <.LBB54>:
  418e82:	f3bf 8f4f 	dsb	sy

00418e86 <.LBB56>:
  __ASM volatile ("isb 0xF":::"memory");
  418e86:	f3bf 8f6f 	isb	sy

00418e8a <.LBB58>:
  __ASM volatile ("dsb 0xF":::"memory");
  418e8a:	f3bf 8f4f 	dsb	sy

00418e8e <.LBE60>:
    while (op_size > 0) {
  418e8e:	2a00      	cmp	r2, #0
  418e90:	dd0b      	ble.n	418eaa <.LBB62>
  418e92:	460b      	mov	r3, r1
  418e94:	3a01      	subs	r2, #1

00418e96 <.LVL4>:
  418e96:	f022 021f 	bic.w	r2, r2, #31

00418e9a <.LVL5>:
  418e9a:	3220      	adds	r2, #32
  418e9c:	4411      	add	r1, r2

00418e9e <.LVL6>:
      SCB->DCCMVAC = op_addr;
  418e9e:	4622      	mov	r2, r4

00418ea0 <.LVL7>:
  418ea0:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
  418ea4:	3320      	adds	r3, #32
    while (op_size > 0) {
  418ea6:	4299      	cmp	r1, r3
  418ea8:	d1fa      	bne.n	418ea0 <.LVL7>

00418eaa <.LBB62>:
  418eaa:	f3bf 8f4f 	dsb	sy

00418eae <.LBB64>:
  __ASM volatile ("isb 0xF":::"memory");
  418eae:	f3bf 8f6f 	isb	sy

00418eb2 <.LBE58>:

    SCB_CleanDCache_by_Addr((uint32_t *)(&(sha->icm_descriptor)), sizeof(struct icm_descriptor));
    SCB_CleanDCache_by_Addr((uint32_t *)input, length);
    SCB_CleanInvalidateDCache_by_Addr((uint32_t *)&(sha->digest), SHA_DIGEST_SIZE);
  418eb2:	f100 0180 	add.w	r1, r0, #128	; 0x80

00418eb6 <.LBB66>:
  __ASM volatile ("dsb 0xF":::"memory");
  418eb6:	f3bf 8f4f 	dsb	sy

00418eba <.LBE68>:
      SCB->DCCIMVAC = op_addr;
  418eba:	4b1c      	ldr	r3, [pc, #112]	; (418f2c <.LCFI1+0x6>)
  418ebc:	f8c3 1270 	str.w	r1, [r3, #624]	; 0x270

00418ec0 <.LBB70>:
  418ec0:	f3bf 8f4f 	dsb	sy

00418ec4 <.LBB72>:
  __ASM volatile ("isb 0xF":::"memory");
  418ec4:	f3bf 8f6f 	isb	sy

00418ec8 <.LBE66>:

    /* ICM can set up FIPS default starting digest */
    ICM_REGS->ICM_DSCR = (uint32_t)&sha->icm_descriptor;
  418ec8:	4b17      	ldr	r3, [pc, #92]	; (418f28 <.LCFI1+0x2>)
  418eca:	6318      	str	r0, [r3, #48]	; 0x30


    /* configured so initial hash digest is auto-loaded */
    ICM_REGS->ICM_CFG = ICM_CFG_SLBDIS(1)
  418ecc:	f241 0204 	movw	r2, #4100	; 0x1004
  418ed0:	601a      	str	r2, [r3, #0]
                 | ICM_CFG_BBC(0)
                 | ICM_CFG_UALGO_SHA1
                 | ICM_CFG_UIHASH_Msk;

    /* digest must be 128 aligned */
	ICM_REGS->ICM_HASH = (uint32_t)(&(sha->digest));
  418ed2:	6359      	str	r1, [r3, #52]	; 0x34
    ICM_REGS->ICM_UIHVAL[0] = sha->digest[0];
  418ed4:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  418ed8:	639a      	str	r2, [r3, #56]	; 0x38
    ICM_REGS->ICM_UIHVAL[1] = sha->digest[1];
  418eda:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
  418ede:	63da      	str	r2, [r3, #60]	; 0x3c
    ICM_REGS->ICM_UIHVAL[2] = sha->digest[2];
  418ee0:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
  418ee4:	641a      	str	r2, [r3, #64]	; 0x40
    ICM_REGS->ICM_UIHVAL[3] = sha->digest[3];
  418ee6:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
  418eea:	645a      	str	r2, [r3, #68]	; 0x44
    ICM_REGS->ICM_UIHVAL[4] = sha->digest[4];
  418eec:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
  418ef0:	649a      	str	r2, [r3, #72]	; 0x48

00418ef2 <.LBB74>:
  __ASM volatile ("dmb 0xF":::"memory");
  418ef2:	f3bf 8f5f 	dmb	sy

00418ef6 <.LBE74>:

    /* memory barrier */
    __DMB();

    /* enable the ICM and wait ICM CTRL is write only - don't OR it */
    ICM_REGS->ICM_CTRL = ICM_CTRL_ENABLE(1);
  418ef6:	2201      	movs	r2, #1
  418ef8:	605a      	str	r2, [r3, #4]
    while (!(ICM_REGS->ICM_ISR & ICM_ISR_RHC_Msk))
  418efa:	461a      	mov	r2, r3
  418efc:	69d3      	ldr	r3, [r2, #28]
  418efe:	f013 0f0f 	tst.w	r3, #15
  418f02:	d0fb      	beq.n	418efc <.LBE74+0x6>
    {
        /* wait - when finished digest will be updated */
    }
    ICM_REGS->ICM_CTRL = ICM_CTRL_DISABLE(1);
  418f04:	4b08      	ldr	r3, [pc, #32]	; (418f28 <.LCFI1+0x2>)
  418f06:	2202      	movs	r2, #2
  418f08:	605a      	str	r2, [r3, #4]
    ICM_REGS->ICM_CTRL = ICM_CTRL_SWRST(1);
  418f0a:	2204      	movs	r2, #4
  418f0c:	605a      	str	r2, [r3, #4]

00418f0e <.LBB76>:
  __ASM volatile ("dsb 0xF":::"memory");
  418f0e:	f3bf 8f4f 	dsb	sy

00418f12 <.LBE78>:
  418f12:	4b06      	ldr	r3, [pc, #24]	; (418f2c <.LCFI1+0x6>)
  418f14:	f8c3 1270 	str.w	r1, [r3, #624]	; 0x270

00418f18 <.LBB80>:
  418f18:	f3bf 8f4f 	dsb	sy

00418f1c <.LBB82>:
  __ASM volatile ("isb 0xF":::"memory");
  418f1c:	f3bf 8f6f 	isb	sy

00418f20 <.LBE76>:

    SCB_CleanInvalidateDCache_by_Addr((uint32_t *)&(sha->digest), SHA_DIGEST_SIZE);

    return 0;
}
  418f20:	2000      	movs	r0, #0

00418f22 <.LVL17>:
  418f22:	f85d 4b04 	ldr.w	r4, [sp], #4

00418f26 <.LCFI1>:
  418f26:	4770      	bx	lr
  418f28:	40048000 	.word	0x40048000
  418f2c:	e000ed00 	.word	0xe000ed00

Disassembly of section .text.memmove%163:

00418f30 <memmove>:
  418f30:	4288      	cmp	r0, r1
  418f32:	b5f0      	push	{r4, r5, r6, r7, lr}

00418f34 <.LCFI0>:
  418f34:	d90d      	bls.n	418f52 <.LVL6>
  418f36:	188b      	adds	r3, r1, r2
  418f38:	4298      	cmp	r0, r3
  418f3a:	d20a      	bcs.n	418f52 <.LVL6>

00418f3c <.LVL1>:
  418f3c:	1884      	adds	r4, r0, r2

00418f3e <.LVL2>:
  418f3e:	2a00      	cmp	r2, #0
  418f40:	d051      	beq.n	418fe6 <.LVL26>
  418f42:	4622      	mov	r2, r4

00418f44 <.LVL3>:
  418f44:	f813 4d01 	ldrb.w	r4, [r3, #-1]!

00418f48 <.LVL4>:
  418f48:	f802 4d01 	strb.w	r4, [r2, #-1]!

00418f4c <.LVL5>:
  418f4c:	4299      	cmp	r1, r3
  418f4e:	d1f9      	bne.n	418f44 <.LVL3>
  418f50:	bdf0      	pop	{r4, r5, r6, r7, pc}

00418f52 <.LVL6>:
  418f52:	2a0f      	cmp	r2, #15
  418f54:	d948      	bls.n	418fe8 <.LVL27>
  418f56:	ea41 0300 	orr.w	r3, r1, r0
  418f5a:	079b      	lsls	r3, r3, #30
  418f5c:	d146      	bne.n	418fec <.LVL27+0x4>
  418f5e:	f100 0410 	add.w	r4, r0, #16
  418f62:	f101 0310 	add.w	r3, r1, #16
  418f66:	4615      	mov	r5, r2

00418f68 <.LVL7>:
  418f68:	f853 6c10 	ldr.w	r6, [r3, #-16]
  418f6c:	f844 6c10 	str.w	r6, [r4, #-16]

00418f70 <.LVL8>:
  418f70:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  418f74:	f844 6c0c 	str.w	r6, [r4, #-12]

00418f78 <.LVL9>:
  418f78:	f853 6c08 	ldr.w	r6, [r3, #-8]
  418f7c:	f844 6c08 	str.w	r6, [r4, #-8]

00418f80 <.LVL10>:
  418f80:	3d10      	subs	r5, #16
  418f82:	f853 6c04 	ldr.w	r6, [r3, #-4]
  418f86:	f844 6c04 	str.w	r6, [r4, #-4]
  418f8a:	2d0f      	cmp	r5, #15
  418f8c:	f103 0310 	add.w	r3, r3, #16

00418f90 <.LVL12>:
  418f90:	f104 0410 	add.w	r4, r4, #16
  418f94:	d8e8      	bhi.n	418f68 <.LVL7>
  418f96:	f1a2 0310 	sub.w	r3, r2, #16

00418f9a <.LVL13>:
  418f9a:	f023 030f 	bic.w	r3, r3, #15
  418f9e:	f002 0e0f 	and.w	lr, r2, #15
  418fa2:	3310      	adds	r3, #16
  418fa4:	f1be 0f03 	cmp.w	lr, #3
  418fa8:	4419      	add	r1, r3

00418faa <.LVL14>:
  418faa:	4403      	add	r3, r0

00418fac <.LVL15>:
  418fac:	d921      	bls.n	418ff2 <.LVL29>
  418fae:	1f1e      	subs	r6, r3, #4
  418fb0:	460d      	mov	r5, r1
  418fb2:	4674      	mov	r4, lr

00418fb4 <.LVL16>:
  418fb4:	3c04      	subs	r4, #4

00418fb6 <.LVL17>:
  418fb6:	f855 7b04 	ldr.w	r7, [r5], #4

00418fba <.LVL18>:
  418fba:	f846 7f04 	str.w	r7, [r6, #4]!
  418fbe:	2c03      	cmp	r4, #3
  418fc0:	d8f8      	bhi.n	418fb4 <.LVL16>
  418fc2:	f1ae 0404 	sub.w	r4, lr, #4

00418fc6 <.LVL19>:
  418fc6:	f024 0403 	bic.w	r4, r4, #3
  418fca:	3404      	adds	r4, #4
  418fcc:	4421      	add	r1, r4
  418fce:	4423      	add	r3, r4
  418fd0:	f002 0203 	and.w	r2, r2, #3

00418fd4 <.LVL20>:
  418fd4:	b162      	cbz	r2, 418ff0 <.LVL28>

00418fd6 <.LVL21>:
  418fd6:	3b01      	subs	r3, #1

00418fd8 <.LVL22>:
  418fd8:	440a      	add	r2, r1

00418fda <.LVL23>:
  418fda:	f811 4b01 	ldrb.w	r4, [r1], #1

00418fde <.LVL24>:
  418fde:	f803 4f01 	strb.w	r4, [r3, #1]!

00418fe2 <.LVL25>:
  418fe2:	428a      	cmp	r2, r1
  418fe4:	d1f9      	bne.n	418fda <.LVL23>

00418fe6 <.LVL26>:
  418fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00418fe8 <.LVL27>:
  418fe8:	4603      	mov	r3, r0
  418fea:	e7f3      	b.n	418fd4 <.LVL20>
  418fec:	4603      	mov	r3, r0
  418fee:	e7f2      	b.n	418fd6 <.LVL21>

00418ff0 <.LVL28>:
  418ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00418ff2 <.LVL29>:
  418ff2:	4672      	mov	r2, lr
  418ff4:	e7ee      	b.n	418fd4 <.LVL20>

00418ff6 <.LFE17>:
  418ff6:	bf00      	nop

Disassembly of section .rodata.__mprec_tens%164:

00418ff8 <__mprec_tens>:
  418ff8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  419008:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  419018:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  419028:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  419038:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  419048:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  419058:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  419068:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  419078:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  419088:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  419098:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  4190a8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  4190b8:	9db4 79d9 7843 44ea                         ...yCx.D

Disassembly of section .text.des_test%165:

004190c0 <des_test>:
{
  4190c0:	b570      	push	{r4, r5, r6, lr}

004190c2 <.LCFI60>:
  4190c2:	b0e4      	sub	sp, #400	; 0x190

004190c4 <.LCFI61>:
    const byte exp_pt[] = { /* "now is the time for all " w/o trailing 0 */
  4190c4:	4c2d      	ldr	r4, [pc, #180]	; (41917c <.LCFI62+0x2>)
  4190c6:	ad5e      	add	r5, sp, #376	; 0x178
  4190c8:	f8d4 07f0 	ldr.w	r0, [r4, #2032]	; 0x7f0
  4190cc:	f8d4 17f4 	ldr.w	r1, [r4, #2036]	; 0x7f4
  4190d0:	f8d4 27f8 	ldr.w	r2, [r4, #2040]	; 0x7f8
  4190d4:	f8d4 37fc 	ldr.w	r3, [r4, #2044]	; 0x7fc
  4190d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  4190da:	f8d4 0800 	ldr.w	r0, [r4, #2048]	; 0x800
  4190de:	f8d4 1804 	ldr.w	r1, [r4, #2052]	; 0x804
  4190e2:	c503      	stmia	r5!, {r0, r1}
    const byte key[] =
  4190e4:	ab08      	add	r3, sp, #32
  4190e6:	f8d4 0808 	ldr.w	r0, [r4, #2056]	; 0x808
  4190ea:	f8d4 180c 	ldr.w	r1, [r4, #2060]	; 0x80c
  4190ee:	c303      	stmia	r3!, {r0, r1}
    const byte iv[] =
  4190f0:	ab06      	add	r3, sp, #24
  4190f2:	f8d4 0810 	ldr.w	r0, [r4, #2064]	; 0x810
  4190f6:	f8d4 1814 	ldr.w	r1, [r4, #2068]	; 0x814
  4190fa:	c303      	stmia	r3!, {r0, r1}
    const byte exp_ct[] =
  4190fc:	466d      	mov	r5, sp
  4190fe:	f8d4 0818 	ldr.w	r0, [r4, #2072]	; 0x818
  419102:	f8d4 181c 	ldr.w	r1, [r4, #2076]	; 0x81c
  419106:	f8d4 2820 	ldr.w	r2, [r4, #2080]	; 0x820
  41910a:	f8d4 3824 	ldr.w	r3, [r4, #2084]	; 0x824
  41910e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  419110:	f8d4 0828 	ldr.w	r0, [r4, #2088]	; 0x828
  419114:	f8d4 182c 	ldr.w	r1, [r4, #2092]	; 0x82c
  419118:	c503      	stmia	r5!, {r0, r1}
    appData.des_test_result = numSubTests;
  41911a:	2202      	movs	r2, #2
  41911c:	4b18      	ldr	r3, [pc, #96]	; (419180 <.LCFI62+0x6>)
  41911e:	62da      	str	r2, [r3, #44]	; 0x2c
    wc_Des_SetKey(&enc, key, iv, DES_ENCRYPTION);
  419120:	2300      	movs	r3, #0
  419122:	aa06      	add	r2, sp, #24
  419124:	a908      	add	r1, sp, #32
  419126:	a82e      	add	r0, sp, #184	; 0xb8
  419128:	f005 fae6 	bl	41e6f8 <.LFE45>

0041912c <.LVL139>:
    wc_Des_CbcEncrypt(&enc, gen_ct, exp_pt, sizeof(exp_pt));
  41912c:	2318      	movs	r3, #24
  41912e:	aa5e      	add	r2, sp, #376	; 0x178
  419130:	a952      	add	r1, sp, #328	; 0x148
  419132:	a82e      	add	r0, sp, #184	; 0xb8
  419134:	f002 fa27 	bl	41b586 <.LFE25>

00419138 <.LVL140>:
    wc_Des_SetKey(&dec, key, iv, DES_DECRYPTION);
  419138:	2301      	movs	r3, #1
  41913a:	aa06      	add	r2, sp, #24
  41913c:	a908      	add	r1, sp, #32
  41913e:	a80a      	add	r0, sp, #40	; 0x28
  419140:	f005 fada 	bl	41e6f8 <.LFE45>

00419144 <.LVL141>:
    wc_Des_CbcDecrypt(&dec, gen_pt, exp_ct, sizeof(exp_ct));
  419144:	2318      	movs	r3, #24
  419146:	466a      	mov	r2, sp
  419148:	a958      	add	r1, sp, #352	; 0x160
  41914a:	a80a      	add	r0, sp, #40	; 0x28
  41914c:	f001 fdbe 	bl	41accc <.LFE149>

00419150 <.LVL142>:
    if (!(memcmp(gen_pt, exp_pt, sizeof(gen_pt))))
  419150:	2218      	movs	r2, #24
  419152:	a95e      	add	r1, sp, #376	; 0x178
  419154:	a858      	add	r0, sp, #352	; 0x160
  419156:	f003 fc77 	bl	41ca48 <memcmp>

0041915a <.LVL143>:
  41915a:	b918      	cbnz	r0, 419164 <.LVL143+0xa>
        appData.des_test_result--;
  41915c:	4a08      	ldr	r2, [pc, #32]	; (419180 <.LCFI62+0x6>)
  41915e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  419160:	3b01      	subs	r3, #1
  419162:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (!(memcmp(gen_ct, exp_ct, sizeof(gen_ct))))
  419164:	2218      	movs	r2, #24
  419166:	4669      	mov	r1, sp
  419168:	a852      	add	r0, sp, #328	; 0x148
  41916a:	f003 fc6d 	bl	41ca48 <memcmp>

0041916e <.LVL144>:
  41916e:	b918      	cbnz	r0, 419178 <.LVL144+0xa>
        appData.des_test_result--;
  419170:	4a03      	ldr	r2, [pc, #12]	; (419180 <.LCFI62+0x6>)
  419172:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  419174:	3b01      	subs	r3, #1
  419176:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  419178:	b064      	add	sp, #400	; 0x190

0041917a <.LCFI62>:
  41917a:	bd70      	pop	{r4, r5, r6, pc}
  41917c:	0040accc 	.word	0x0040accc
  419180:	20417598 	.word	0x20417598

Disassembly of section .text.wc_Md5Final%166:

00419184 <wc_Md5Final>:

int wc_Md5Final(Md5* md5, byte* hash)
{
    byte* local;

    if (md5 == NULL || hash == NULL) {
  419184:	2800      	cmp	r0, #0
  419186:	d059      	beq.n	41923c <.LCFI7>
{
  419188:	b570      	push	{r4, r5, r6, lr}

0041918a <.LCFI6>:
  41918a:	4604      	mov	r4, r0
    if (md5 == NULL || hash == NULL) {
  41918c:	2900      	cmp	r1, #0
  41918e:	d052      	beq.n	419236 <.LVL364>
        return IntelQaSymMd5(&md5->asyncDev, hash, NULL, MD5_DIGEST_SIZE);
    #endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    local = (byte*)md5->buffer;
  419190:	f100 060c 	add.w	r6, r0, #12

00419194 <.LVL351>:

    AddMd5Length(md5, md5->buffLen);  /* before adding pads */
  419194:	6803      	ldr	r3, [r0, #0]

00419196 <.LBB151>:
    word32 tmp = md5->loLen;
  419196:	6840      	ldr	r0, [r0, #4]

00419198 <.LVL353>:
    if ((md5->loLen += len) < tmp) {
  419198:	181a      	adds	r2, r3, r0
  41919a:	6062      	str	r2, [r4, #4]
  41919c:	4290      	cmp	r0, r2
  41919e:	d902      	bls.n	4191a6 <.LVL353+0xe>
        md5->hiLen++;                       /* carry low to high */
  4191a0:	68a2      	ldr	r2, [r4, #8]
  4191a2:	3201      	adds	r2, #1
  4191a4:	60a2      	str	r2, [r4, #8]
  4191a6:	460d      	mov	r5, r1

004191a8 <.LBE151>:
    local[md5->buffLen++] = 0x80;  /* add 1 */
  4191a8:	1c5a      	adds	r2, r3, #1
  4191aa:	6022      	str	r2, [r4, #0]
  4191ac:	2280      	movs	r2, #128	; 0x80
  4191ae:	54f2      	strb	r2, [r6, r3]

    /* pad with zeros */
    if (md5->buffLen > MD5_PAD_SIZE) {
  4191b0:	6820      	ldr	r0, [r4, #0]
  4191b2:	2838      	cmp	r0, #56	; 0x38
  4191b4:	d831      	bhi.n	41921a <.LVL360>

004191b6 <.LVL355>:
        ByteReverseWords(md5->buffer, md5->buffer, MD5_BLOCK_SIZE);
    #endif
        XTRANSFORM(md5, local);
        md5->buffLen = 0;
    }
    XMEMSET(&local[md5->buffLen], 0, MD5_PAD_SIZE - md5->buffLen);
  4191b6:	6820      	ldr	r0, [r4, #0]
  4191b8:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
  4191bc:	2100      	movs	r1, #0
  4191be:	4430      	add	r0, r6
  4191c0:	f001 fa16 	bl	41a5f0 <.LFE157>

004191c4 <.LVL356>:
#if defined(BIG_ENDIAN_ORDER) && !defined(FREESCALE_MMCAU_SHA)
    ByteReverseWords(md5->buffer, md5->buffer, MD5_BLOCK_SIZE);
#endif

    /* put lengths in bits */
    md5->hiLen = (md5->loLen >> (8*sizeof(md5->loLen) - 3)) +
  4191c4:	6863      	ldr	r3, [r4, #4]
                 (md5->hiLen << 3);
  4191c6:	68a1      	ldr	r1, [r4, #8]
    md5->hiLen = (md5->loLen >> (8*sizeof(md5->loLen) - 3)) +
  4191c8:	0f5a      	lsrs	r2, r3, #29
  4191ca:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
  4191ce:	60a2      	str	r2, [r4, #8]
    md5->loLen = md5->loLen << 3;
  4191d0:	00db      	lsls	r3, r3, #3
  4191d2:	6063      	str	r3, [r4, #4]

    /* store lengths */
    /* ! length ordering dependent on digest endian type ! */
    XMEMCPY(&local[MD5_PAD_SIZE], &md5->loLen, sizeof(word32));
  4191d4:	6463      	str	r3, [r4, #68]	; 0x44
    XMEMCPY(&local[MD5_PAD_SIZE + sizeof(word32)], &md5->hiLen, sizeof(word32));
  4191d6:	64a2      	str	r2, [r4, #72]	; 0x48

    /* final transform and result to hash */
    XTRANSFORM(md5, local);
  4191d8:	4620      	mov	r0, r4
  4191da:	f7f4 f8a3 	bl	40d324 <Transform>

004191de <.LVL357>:
#ifdef BIG_ENDIAN_ORDER
    ByteReverseWords(md5->digest, md5->digest, MD5_DIGEST_SIZE);
#endif
    XMEMCPY(hash, md5->digest, MD5_DIGEST_SIZE);
  4191de:	4623      	mov	r3, r4
  4191e0:	f853 0f4c 	ldr.w	r0, [r3, #76]!
  4191e4:	6859      	ldr	r1, [r3, #4]
  4191e6:	689a      	ldr	r2, [r3, #8]
  4191e8:	68db      	ldr	r3, [r3, #12]
  4191ea:	6028      	str	r0, [r5, #0]
  4191ec:	6069      	str	r1, [r5, #4]
  4191ee:	60aa      	str	r2, [r5, #8]
  4191f0:	60eb      	str	r3, [r5, #12]

004191f2 <.LBB153>:
    md5->digest[0] = 0x67452301L;
  4191f2:	4b14      	ldr	r3, [pc, #80]	; (419244 <.LVL367+0x4>)
  4191f4:	64e3      	str	r3, [r4, #76]	; 0x4c
    md5->digest[1] = 0xefcdab89L;
  4191f6:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
  4191fa:	6523      	str	r3, [r4, #80]	; 0x50
    md5->digest[2] = 0x98badcfeL;
  4191fc:	f103 4329 	add.w	r3, r3, #2835349504	; 0xa9000000
  419200:	f5a3 1396 	sub.w	r3, r3, #1228800	; 0x12c000
  419204:	f6a3 638b 	subw	r3, r3, #3723	; 0xe8b
  419208:	6563      	str	r3, [r4, #84]	; 0x54
    md5->digest[3] = 0x10325476L;
  41920a:	f1a3 3388 	sub.w	r3, r3, #2290649224	; 0x88888888
  41920e:	65a3      	str	r3, [r4, #88]	; 0x58
    md5->buffLen = 0;
  419210:	2000      	movs	r0, #0
  419212:	6020      	str	r0, [r4, #0]
    md5->loLen   = 0;
  419214:	6060      	str	r0, [r4, #4]
    md5->hiLen   = 0;
  419216:	60a0      	str	r0, [r4, #8]

00419218 <.LBE153>:

    return _InitMd5(md5); /* reset state */
  419218:	bd70      	pop	{r4, r5, r6, pc}

0041921a <.LVL360>:
        XMEMSET(&local[md5->buffLen], 0, MD5_BLOCK_SIZE - md5->buffLen);
  41921a:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
  41921e:	2100      	movs	r1, #0

00419220 <.LVL361>:
  419220:	4430      	add	r0, r6
  419222:	f001 f9e5 	bl	41a5f0 <.LFE157>

00419226 <.LVL362>:
        md5->buffLen += MD5_BLOCK_SIZE - md5->buffLen;
  419226:	2340      	movs	r3, #64	; 0x40
  419228:	6023      	str	r3, [r4, #0]
        XTRANSFORM(md5, local);
  41922a:	4620      	mov	r0, r4
  41922c:	f7f4 f87a 	bl	40d324 <Transform>

00419230 <.LVL363>:
        md5->buffLen = 0;
  419230:	2300      	movs	r3, #0
  419232:	6023      	str	r3, [r4, #0]
  419234:	e7bf      	b.n	4191b6 <.LVL355>

00419236 <.LVL364>:
        return BAD_FUNC_ARG;
  419236:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041923a <.LVL365>:
}
  41923a:	bd70      	pop	{r4, r5, r6, pc}

0041923c <.LCFI7>:
        return BAD_FUNC_ARG;
  41923c:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00419240 <.LVL367>:
  419240:	4770      	bx	lr
  419242:	bf00      	nop
  419244:	67452301 	.word	0x67452301

Disassembly of section .text.scan_tree%167:

00419248 <scan_tree>:
{
  419248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

0041924c <.LCFI3>:
    int nextlen = tree[0].Len; /* length of next code */
  41924c:	884c      	ldrh	r4, [r1, #2]

0041924e <.LVL17>:
    if (nextlen == 0) max_count = 138, min_count = 3;
  41924e:	2c00      	cmp	r4, #0
  419250:	bf15      	itete	ne
  419252:	2704      	movne	r7, #4
  419254:	2703      	moveq	r7, #3
  419256:	f04f 0e07 	movne.w	lr, #7
  41925a:	f04f 0e8a 	moveq.w	lr, #138	; 0x8a

0041925e <.LVL18>:
    tree[max_code+1].Len = (ush)0xffff; /* guard */
  41925e:	eb01 0382 	add.w	r3, r1, r2, lsl #2
  419262:	f64f 75ff 	movw	r5, #65535	; 0xffff
  419266:	80dd      	strh	r5, [r3, #6]

00419268 <.LVL19>:
    for (n = 0; n <= max_code; n++) {
  419268:	2a00      	cmp	r2, #0
  41926a:	db4d      	blt.n	419308 <.LVL38>
  41926c:	2300      	movs	r3, #0
  41926e:	f04f 3cff 	mov.w	ip, #4294967295
  419272:	461e      	mov	r6, r3
            max_count = 138, min_count = 3;
  419274:	f04f 0903 	mov.w	r9, #3
  419278:	f04f 088a 	mov.w	r8, #138	; 0x8a
  41927c:	e01a      	b.n	4192b4 <.LVL28>

0041927e <.LVL20>:
        } else if (count < min_count) {
  41927e:	42bb      	cmp	r3, r7
  419280:	da1f      	bge.n	4192c2 <.LVL29+0xc>
  419282:	eb00 0784 	add.w	r7, r0, r4, lsl #2

00419286 <.LVL21>:
            s->bl_tree[curlen].Freq += count;
  419286:	f8b7 ea7c 	ldrh.w	lr, [r7, #2684]	; 0xa7c

0041928a <.LVL22>:
  41928a:	4473      	add	r3, lr

0041928c <.LVL23>:
  41928c:	f8a7 3a7c 	strh.w	r3, [r7, #2684]	; 0xa7c

00419290 <.LVL24>:
        if (nextlen == 0) {
  419290:	b3ad      	cbz	r5, 4192fe <.LVL37>
        } else if (curlen == nextlen) {
  419292:	46a4      	mov	ip, r4
  419294:	42a5      	cmp	r5, r4
  419296:	bf0c      	ite	eq
  419298:	2703      	moveq	r7, #3
  41929a:	2704      	movne	r7, #4
  41929c:	42a5      	cmp	r5, r4
  41929e:	bf0c      	ite	eq
  4192a0:	f04f 0e06 	moveq.w	lr, #6
  4192a4:	f04f 0e07 	movne.w	lr, #7
  4192a8:	2300      	movs	r3, #0

004192aa <.LVL25>:
    for (n = 0; n <= max_code; n++) {
  4192aa:	3601      	adds	r6, #1
  4192ac:	3104      	adds	r1, #4
        curlen = nextlen; nextlen = tree[n+1].Len;
  4192ae:	462c      	mov	r4, r5

004192b0 <.LVL27>:
    for (n = 0; n <= max_code; n++) {
  4192b0:	42b2      	cmp	r2, r6
  4192b2:	db29      	blt.n	419308 <.LVL38>

004192b4 <.LVL28>:
        curlen = nextlen; nextlen = tree[n+1].Len;
  4192b4:	88cd      	ldrh	r5, [r1, #6]

004192b6 <.LVL29>:
        if (++count < max_count && curlen == nextlen) {
  4192b6:	3301      	adds	r3, #1
  4192b8:	42a5      	cmp	r5, r4
  4192ba:	d1e0      	bne.n	41927e <.LVL20>
  4192bc:	4573      	cmp	r3, lr
  4192be:	dade      	bge.n	41927e <.LVL20>
  4192c0:	e7f3      	b.n	4192aa <.LVL25>
        } else if (curlen != 0) {
  4192c2:	b174      	cbz	r4, 4192e2 <.LVL33>
            if (curlen != prevlen) s->bl_tree[curlen].Freq++;
  4192c4:	45a4      	cmp	ip, r4
  4192c6:	d006      	beq.n	4192d6 <.LVL32+0x6>
  4192c8:	eb00 0784 	add.w	r7, r0, r4, lsl #2

004192cc <.LVL31>:
  4192cc:	f8b7 3a7c 	ldrh.w	r3, [r7, #2684]	; 0xa7c

004192d0 <.LVL32>:
  4192d0:	3301      	adds	r3, #1
  4192d2:	f8a7 3a7c 	strh.w	r3, [r7, #2684]	; 0xa7c
            s->bl_tree[REP_3_6].Freq++;
  4192d6:	f8b0 3abc 	ldrh.w	r3, [r0, #2748]	; 0xabc
  4192da:	3301      	adds	r3, #1
  4192dc:	f8a0 3abc 	strh.w	r3, [r0, #2748]	; 0xabc
  4192e0:	e7d6      	b.n	419290 <.LVL24>

004192e2 <.LVL33>:
        } else if (count <= 10) {
  4192e2:	2b0a      	cmp	r3, #10
  4192e4:	dc05      	bgt.n	4192f2 <.LVL35>
            s->bl_tree[REPZ_3_10].Freq++;
  4192e6:	f8b0 3ac0 	ldrh.w	r3, [r0, #2752]	; 0xac0

004192ea <.LVL34>:
  4192ea:	3301      	adds	r3, #1
  4192ec:	f8a0 3ac0 	strh.w	r3, [r0, #2752]	; 0xac0
  4192f0:	e7ce      	b.n	419290 <.LVL24>

004192f2 <.LVL35>:
            s->bl_tree[REPZ_11_138].Freq++;
  4192f2:	f8b0 3ac4 	ldrh.w	r3, [r0, #2756]	; 0xac4

004192f6 <.LVL36>:
  4192f6:	3301      	adds	r3, #1
  4192f8:	f8a0 3ac4 	strh.w	r3, [r0, #2756]	; 0xac4
  4192fc:	e7c8      	b.n	419290 <.LVL24>

004192fe <.LVL37>:
        count = 0; prevlen = curlen;
  4192fe:	462b      	mov	r3, r5
  419300:	46a4      	mov	ip, r4
            max_count = 138, min_count = 3;
  419302:	464f      	mov	r7, r9
  419304:	46c6      	mov	lr, r8
  419306:	e7d0      	b.n	4192aa <.LVL25>

00419308 <.LVL38>:
  419308:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

Disassembly of section .text.vTaskSwitchContext%168:

0041930c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  41930c:	4b2a      	ldr	r3, [pc, #168]	; (4193b8 <.LBB77+0x10>)
  41930e:	681b      	ldr	r3, [r3, #0]
  419310:	2b00      	cmp	r3, #0
  419312:	d138      	bne.n	419386 <.LBE75>
{
  419314:	b510      	push	{r4, lr}

00419316 <.LCFI18>:
		xYieldPending = pdFALSE;
  419316:	2200      	movs	r2, #0
  419318:	4b28      	ldr	r3, [pc, #160]	; (4193bc <.LBB77+0x14>)
  41931a:	601a      	str	r2, [r3, #0]

0041931c <.LBB74>:
		taskCHECK_FOR_STACK_OVERFLOW();
  41931c:	4b28      	ldr	r3, [pc, #160]	; (4193c0 <.LBB77+0x18>)
  41931e:	681b      	ldr	r3, [r3, #0]
  419320:	6b1b      	ldr	r3, [r3, #48]	; 0x30

00419322 <.LVL207>:
  419322:	681a      	ldr	r2, [r3, #0]
  419324:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  419328:	d031      	beq.n	41938e <.LBB78>

0041932a <.LVL208>:
  41932a:	4b25      	ldr	r3, [pc, #148]	; (4193c0 <.LBB77+0x18>)
  41932c:	6818      	ldr	r0, [r3, #0]
  41932e:	6819      	ldr	r1, [r3, #0]
  419330:	3134      	adds	r1, #52	; 0x34
  419332:	f005 fb8f 	bl	41ea54 <.LFE155>

00419336 <.LBB75>:
		taskSELECT_HIGHEST_PRIORITY_TASK();
  419336:	4b23      	ldr	r3, [pc, #140]	; (4193c4 <.LBB77+0x1c>)
  419338:	681b      	ldr	r3, [r3, #0]

0041933a <.LVL210>:
  41933a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  41933e:	0092      	lsls	r2, r2, #2
  419340:	4921      	ldr	r1, [pc, #132]	; (4193c8 <.LBB77+0x20>)
  419342:	588a      	ldr	r2, [r1, r2]
  419344:	b932      	cbnz	r2, 419354 <.LBB76>
  419346:	3b01      	subs	r3, #1
  419348:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  41934c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  419350:	2a00      	cmp	r2, #0
  419352:	d0f8      	beq.n	419346 <.LVL210+0xc>

00419354 <.LBB76>:
  419354:	4a1c      	ldr	r2, [pc, #112]	; (4193c8 <.LBB77+0x20>)
  419356:	0099      	lsls	r1, r3, #2
  419358:	18c8      	adds	r0, r1, r3
  41935a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  41935e:	6844      	ldr	r4, [r0, #4]
  419360:	6864      	ldr	r4, [r4, #4]
  419362:	6044      	str	r4, [r0, #4]
  419364:	4419      	add	r1, r3
  419366:	4602      	mov	r2, r0
  419368:	3208      	adds	r2, #8
  41936a:	4294      	cmp	r4, r2
  41936c:	d01c      	beq.n	4193a8 <.LBB77>
  41936e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  419372:	4a15      	ldr	r2, [pc, #84]	; (4193c8 <.LBB77+0x20>)
  419374:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  419378:	6852      	ldr	r2, [r2, #4]
  41937a:	68d1      	ldr	r1, [r2, #12]
  41937c:	4a10      	ldr	r2, [pc, #64]	; (4193c0 <.LBB77+0x18>)
  41937e:	6011      	str	r1, [r2, #0]

00419380 <.LBE76>:
  419380:	4a10      	ldr	r2, [pc, #64]	; (4193c4 <.LBB77+0x1c>)
  419382:	6013      	str	r3, [r2, #0]
  419384:	bd10      	pop	{r4, pc}

00419386 <.LBE75>:
		xYieldPending = pdTRUE;
  419386:	2201      	movs	r2, #1
  419388:	4b0c      	ldr	r3, [pc, #48]	; (4193bc <.LBB77+0x14>)
  41938a:	601a      	str	r2, [r3, #0]
  41938c:	4770      	bx	lr

0041938e <.LBB78>:
		taskCHECK_FOR_STACK_OVERFLOW();
  41938e:	685a      	ldr	r2, [r3, #4]
  419390:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  419394:	d1c9      	bne.n	41932a <.LVL208>
  419396:	689a      	ldr	r2, [r3, #8]
  419398:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  41939c:	d1c5      	bne.n	41932a <.LVL208>
  41939e:	68db      	ldr	r3, [r3, #12]

004193a0 <.LVL215>:
  4193a0:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  4193a4:	d1c1      	bne.n	41932a <.LVL208>
  4193a6:	e7c6      	b.n	419336 <.LBB75>

004193a8 <.LBB77>:
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4193a8:	6860      	ldr	r0, [r4, #4]
  4193aa:	460a      	mov	r2, r1
  4193ac:	4906      	ldr	r1, [pc, #24]	; (4193c8 <.LBB77+0x20>)
  4193ae:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4193b2:	6050      	str	r0, [r2, #4]
  4193b4:	e7db      	b.n	41936e <.LBB76+0x1a>
  4193b6:	bf00      	nop
  4193b8:	20417850 	.word	0x20417850
  4193bc:	20417870 	.word	0x20417870
  4193c0:	20417838 	.word	0x20417838
  4193c4:	20417858 	.word	0x20417858
  4193c8:	20417534 	.word	0x20417534

Disassembly of section .text.compress_test%169:

004193cc <compress_test>:
{
  4193cc:	b530      	push	{r4, r5, lr}

004193ce <.LCFI56>:
  4193ce:	b083      	sub	sp, #12

004193d0 <.LCFI57>:
    c = calloc(cSz, sizeof(byte));
  4193d0:	2101      	movs	r1, #1
  4193d2:	f241 10c7 	movw	r0, #4551	; 0x11c7
  4193d6:	f005 fc7d 	bl	41ecd4 <.LFE151>

004193da <.LVL123>:
  4193da:	4604      	mov	r4, r0

004193dc <.LVL124>:
    d = calloc(dSz, sizeof(byte));
  4193dc:	2101      	movs	r1, #1
  4193de:	f241 10b7 	movw	r0, #4535	; 0x11b7

004193e2 <.LVL125>:
  4193e2:	f005 fc77 	bl	41ecd4 <.LFE151>

004193e6 <.LVL126>:
  4193e6:	4605      	mov	r5, r0

004193e8 <.LVL127>:
    if (c != NULL && d != NULL)
  4193e8:	b1cc      	cbz	r4, 41941e <.LVL130>
  4193ea:	b1c0      	cbz	r0, 41941e <.LVL130>
        appData.compress_test_result--;
  4193ec:	2203      	movs	r2, #3
  4193ee:	4b25      	ldr	r3, [pc, #148]	; (419484 <.LVL137+0xe>)
  4193f0:	649a      	str	r2, [r3, #72]	; 0x48
    if ((appData.compress_test_result == numSubTests-1) && 
  4193f2:	2300      	movs	r3, #0
  4193f4:	9300      	str	r3, [sp, #0]
  4193f6:	f241 13b7 	movw	r3, #4535	; 0x11b7
  4193fa:	4a23      	ldr	r2, [pc, #140]	; (419488 <.LVL137+0x12>)
  4193fc:	f241 11c7 	movw	r1, #4551	; 0x11c7
  419400:	4620      	mov	r0, r4

00419402 <.LVL128>:
  419402:	f001 ff41 	bl	41b288 <wc_Compress>

00419406 <.LVL129>:
  419406:	1e03      	subs	r3, r0, #0
  419408:	db03      	blt.n	419412 <.LVL129+0xc>
        appData.compress_test_result--;
  41940a:	491e      	ldr	r1, [pc, #120]	; (419484 <.LVL137+0xe>)
  41940c:	6c8a      	ldr	r2, [r1, #72]	; 0x48
  41940e:	3a01      	subs	r2, #1
  419410:	648a      	str	r2, [r1, #72]	; 0x48
  419412:	f241 12c7 	movw	r2, #4551	; 0x11c7
  419416:	2b00      	cmp	r3, #0
  419418:	bfd8      	it	le
  41941a:	4613      	movle	r3, r2
  41941c:	e004      	b.n	419428 <.LVL131>

0041941e <.LVL130>:
    appData.compress_test_result = numSubTests;
  41941e:	2204      	movs	r2, #4
  419420:	4b18      	ldr	r3, [pc, #96]	; (419484 <.LVL137+0xe>)
  419422:	649a      	str	r2, [r3, #72]	; 0x48
  419424:	f241 13c7 	movw	r3, #4551	; 0x11c7

00419428 <.LVL131>:
    if ((appData.compress_test_result == numSubTests-2) && 
  419428:	4a16      	ldr	r2, [pc, #88]	; (419484 <.LVL137+0xe>)
  41942a:	6c92      	ldr	r2, [r2, #72]	; 0x48
  41942c:	2a02      	cmp	r2, #2
  41942e:	d00d      	beq.n	41944c <.LCFI59>

00419430 <.LVL132>:
    if ((appData.compress_test_result == numSubTests-3) && 
  419430:	4b14      	ldr	r3, [pc, #80]	; (419484 <.LVL137+0xe>)
  419432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  419434:	2b01      	cmp	r3, #1
  419436:	d018      	beq.n	41946a <.LVL136+0x12>
    if (c) free(c);
  419438:	b114      	cbz	r4, 419440 <.LVL133>
  41943a:	4620      	mov	r0, r4
  41943c:	f005 fc5a 	bl	41ecf4 <.LFE0>

00419440 <.LVL133>:
    if (d) free(d);
  419440:	b115      	cbz	r5, 419448 <.LVL134>
  419442:	4628      	mov	r0, r5
  419444:	f005 fc56 	bl	41ecf4 <.LFE0>

00419448 <.LVL134>:
}
  419448:	b003      	add	sp, #12

0041944a <.LCFI58>:
  41944a:	bd30      	pop	{r4, r5, pc}

0041944c <.LCFI59>:
         wc_DeCompress(d, dSz, c, cSz) == (int)dSz)
  41944c:	4622      	mov	r2, r4
  41944e:	f241 11b7 	movw	r1, #4535	; 0x11b7
  419452:	4628      	mov	r0, r5
  419454:	f002 ffe0 	bl	41c418 <.LFE261>

00419458 <.LVL136>:
    if ((appData.compress_test_result == numSubTests-2) && 
  419458:	f241 13b7 	movw	r3, #4535	; 0x11b7
  41945c:	4298      	cmp	r0, r3
  41945e:	d1e7      	bne.n	419430 <.LVL132>
        appData.compress_test_result--;
  419460:	4a08      	ldr	r2, [pc, #32]	; (419484 <.LVL137+0xe>)
  419462:	6c93      	ldr	r3, [r2, #72]	; 0x48
  419464:	3b01      	subs	r3, #1
  419466:	6493      	str	r3, [r2, #72]	; 0x48
  419468:	e7e2      	b.n	419430 <.LVL132>
         !(memcmp(d, sample_text, dSz)))
  41946a:	f241 12b7 	movw	r2, #4535	; 0x11b7
  41946e:	4906      	ldr	r1, [pc, #24]	; (419488 <.LVL137+0x12>)
  419470:	4628      	mov	r0, r5
  419472:	f003 fae9 	bl	41ca48 <memcmp>

00419476 <.LVL137>:
    if ((appData.compress_test_result == numSubTests-3) && 
  419476:	2800      	cmp	r0, #0
  419478:	d1de      	bne.n	419438 <.LVL132+0x8>
        appData.compress_test_result--;
  41947a:	2200      	movs	r2, #0
  41947c:	4b01      	ldr	r3, [pc, #4]	; (419484 <.LVL137+0xe>)
  41947e:	649a      	str	r2, [r3, #72]	; 0x48
  419480:	e7da      	b.n	419438 <.LVL132+0x8>
  419482:	bf00      	nop
  419484:	20417598 	.word	0x20417598
  419488:	004061d8 	.word	0x004061d8

Disassembly of section .text.fp_mul_d%170:

0041948c <fp_mul_d>:
{
  41948c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00419490 <.LCFI6>:
  419490:	b083      	sub	sp, #12

00419492 <.LCFI7>:
   oldused = c->used;
  419492:	f8d2 8000 	ldr.w	r8, [r2]
   c->used = a->used;
  419496:	6803      	ldr	r3, [r0, #0]
  419498:	9301      	str	r3, [sp, #4]
  41949a:	6013      	str	r3, [r2, #0]
   c->sign = a->sign;
  41949c:	6843      	ldr	r3, [r0, #4]
  41949e:	9300      	str	r3, [sp, #0]
  4194a0:	6053      	str	r3, [r2, #4]

004194a2 <.LVL61>:
   for (x = 0; x < a->used; x++) {
  4194a2:	6803      	ldr	r3, [r0, #0]
  4194a4:	2b00      	cmp	r3, #0
  4194a6:	dd3d      	ble.n	419524 <.LVL71>
  4194a8:	f100 0e04 	add.w	lr, r0, #4
  4194ac:	1d13      	adds	r3, r2, #4
  4194ae:	f04f 0c00 	mov.w	ip, #0
  4194b2:	2400      	movs	r4, #0
  4194b4:	2500      	movs	r5, #0
       w         = ((fp_word)a->dp[x]) * ((fp_word)b) + w;
  4194b6:	46e1      	mov	r9, ip
  4194b8:	e000      	b.n	4194bc <.LVL63>

004194ba <.LVL62>:
   for (x = 0; x < a->used; x++) {
  4194ba:	46b4      	mov	ip, r6

004194bc <.LVL63>:
       w         = ((fp_word)a->dp[x]) * ((fp_word)b) + w;
  4194bc:	f85e 6f04 	ldr.w	r6, [lr, #4]!
  4194c0:	46a2      	mov	sl, r4
  4194c2:	46ab      	mov	fp, r5
  4194c4:	fbe1 ab06 	umlal	sl, fp, r1, r6

004194c8 <.LVL64>:
       c->dp[x]  = (fp_digit)w;
  4194c8:	f843 af04 	str.w	sl, [r3, #4]!
       w         = w >> DIGIT_BIT;
  4194cc:	465c      	mov	r4, fp
  4194ce:	464d      	mov	r5, r9

004194d0 <.LVL65>:
   for (x = 0; x < a->used; x++) {
  4194d0:	f10c 0601 	add.w	r6, ip, #1

004194d4 <.LVL66>:
  4194d4:	6807      	ldr	r7, [r0, #0]
  4194d6:	42b7      	cmp	r7, r6
  4194d8:	dcef      	bgt.n	4194ba <.LVL62>
   if (w != 0 && (a->used != FP_SIZE)) {
  4194da:	2f88      	cmp	r7, #136	; 0x88
  4194dc:	d00c      	beq.n	4194f8 <.LVL68>
  4194de:	ea5b 0309 	orrs.w	r3, fp, r9
  4194e2:	d009      	beq.n	4194f8 <.LVL68>
      c->dp[c->used++] = (fp_digit) w;
  4194e4:	9901      	ldr	r1, [sp, #4]

004194e6 <.LVL67>:
  4194e6:	460b      	mov	r3, r1
  4194e8:	3301      	adds	r3, #1
  4194ea:	6013      	str	r3, [r2, #0]
  4194ec:	f101 0b02 	add.w	fp, r1, #2
  4194f0:	f842 402b 	str.w	r4, [r2, fp, lsl #2]
      ++x;
  4194f4:	f10c 0602 	add.w	r6, ip, #2

004194f8 <.LVL68>:
   for (; x < oldused; x++) {
  4194f8:	45b0      	cmp	r8, r6
  4194fa:	dd08      	ble.n	41950e <.LVL68+0x16>
  4194fc:	eb02 0386 	add.w	r3, r2, r6, lsl #2
  419500:	3304      	adds	r3, #4
      c->dp[x] = 0;
  419502:	2100      	movs	r1, #0
  419504:	f843 1f04 	str.w	r1, [r3, #4]!
   for (; x < oldused; x++) {
  419508:	3601      	adds	r6, #1
  41950a:	45b0      	cmp	r8, r6
  41950c:	d1fa      	bne.n	419504 <.LVL68+0xc>
   fp_clamp(c);
  41950e:	6811      	ldr	r1, [r2, #0]
  419510:	b1a1      	cbz	r1, 41953c <.LVL72+0x14>
  419512:	1e4b      	subs	r3, r1, #1
  419514:	1c48      	adds	r0, r1, #1

00419516 <.LVL70>:
  419516:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
  41951a:	b988      	cbnz	r0, 419540 <.LVL72+0x18>
  41951c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  419520:	3104      	adds	r1, #4
  419522:	e002      	b.n	41952a <.LVL72+0x2>

00419524 <.LVL71>:
   for (x = 0; x < a->used; x++) {
  419524:	2600      	movs	r6, #0
  419526:	e7e7      	b.n	4194f8 <.LVL68>

00419528 <.LVL72>:
   fp_clamp(c);
  419528:	4623      	mov	r3, r4
  41952a:	b133      	cbz	r3, 41953a <.LVL72+0x12>
  41952c:	1e5c      	subs	r4, r3, #1
  41952e:	f851 0d04 	ldr.w	r0, [r1, #-4]!
  419532:	2800      	cmp	r0, #0
  419534:	d0f8      	beq.n	419528 <.LVL72>
  419536:	6013      	str	r3, [r2, #0]
  419538:	e002      	b.n	419540 <.LVL72+0x18>
  41953a:	6013      	str	r3, [r2, #0]
  41953c:	2300      	movs	r3, #0
  41953e:	9300      	str	r3, [sp, #0]
  419540:	9b00      	ldr	r3, [sp, #0]
  419542:	6053      	str	r3, [r2, #4]
}
  419544:	b003      	add	sp, #12

00419546 <.LCFI8>:
  419546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section .text.__d2b%171:

0041954c <__d2b>:
  41954c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

00419550 <.LCFI17>:
  419550:	ec57 6b10 	vmov	r6, r7, d0
  419554:	b083      	sub	sp, #12

00419556 <.LCFI18>:
  419556:	4688      	mov	r8, r1
  419558:	2101      	movs	r1, #1

0041955a <.LVL324>:
  41955a:	463c      	mov	r4, r7
  41955c:	f3c7 550a 	ubfx	r5, r7, #20, #11
  419560:	4617      	mov	r7, r2
  419562:	f003 fe73 	bl	41d24c <.LFE2>

00419566 <.LVL326>:
  419566:	f3c4 0413 	ubfx	r4, r4, #0, #20
  41956a:	4681      	mov	r9, r0

0041956c <.LVL327>:
  41956c:	b10d      	cbz	r5, 419572 <.LVL327+0x6>
  41956e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  419572:	9401      	str	r4, [sp, #4]
  419574:	b31e      	cbz	r6, 4195be <.LCFI20>
  419576:	a802      	add	r0, sp, #8

00419578 <.LVL328>:
  419578:	f840 6d08 	str.w	r6, [r0, #-8]!
  41957c:	f003 fa94 	bl	41caa8 <__lo0bits>

00419580 <.LVL329>:
  419580:	2800      	cmp	r0, #0
  419582:	d134      	bne.n	4195ee <.LCFI22>
  419584:	e89d 000c 	ldmia.w	sp, {r2, r3}
  419588:	f8c9 2014 	str.w	r2, [r9, #20]
  41958c:	2b00      	cmp	r3, #0
  41958e:	bf0c      	ite	eq
  419590:	2101      	moveq	r1, #1
  419592:	2102      	movne	r1, #2
  419594:	f8c9 3018 	str.w	r3, [r9, #24]
  419598:	f8c9 1010 	str.w	r1, [r9, #16]

0041959c <.LVL330>:
  41959c:	b9dd      	cbnz	r5, 4195d6 <.LVL338+0x4>
  41959e:	eb09 0381 	add.w	r3, r9, r1, lsl #2
  4195a2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432

004195a6 <.LVL331>:
  4195a6:	f8c8 0000 	str.w	r0, [r8]
  4195aa:	6918      	ldr	r0, [r3, #16]

004195ac <.LVL332>:
  4195ac:	f004 f93e 	bl	41d82c <__hi0bits>

004195b0 <.LVL333>:
  4195b0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  4195b4:	6038      	str	r0, [r7, #0]
  4195b6:	4648      	mov	r0, r9
  4195b8:	b003      	add	sp, #12

004195ba <.LCFI19>:
  4195ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

004195be <.LCFI20>:
  4195be:	a801      	add	r0, sp, #4

004195c0 <.LVL335>:
  4195c0:	f003 fa72 	bl	41caa8 <__lo0bits>

004195c4 <.LVL336>:
  4195c4:	9b01      	ldr	r3, [sp, #4]
  4195c6:	f8c9 3014 	str.w	r3, [r9, #20]
  4195ca:	2101      	movs	r1, #1
  4195cc:	3020      	adds	r0, #32

004195ce <.LVL337>:
  4195ce:	f8c9 1010 	str.w	r1, [r9, #16]

004195d2 <.LVL338>:
  4195d2:	2d00      	cmp	r5, #0
  4195d4:	d0e3      	beq.n	41959e <.LVL330+0x2>
  4195d6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433

004195da <.LVL339>:
  4195da:	4405      	add	r5, r0

004195dc <.LVL340>:
  4195dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35

004195e0 <.LVL341>:
  4195e0:	f8c8 5000 	str.w	r5, [r8]
  4195e4:	6038      	str	r0, [r7, #0]
  4195e6:	4648      	mov	r0, r9
  4195e8:	b003      	add	sp, #12

004195ea <.LCFI21>:
  4195ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

004195ee <.LCFI22>:
  4195ee:	e89d 000a 	ldmia.w	sp, {r1, r3}
  4195f2:	f1c0 0220 	rsb	r2, r0, #32
  4195f6:	fa03 f202 	lsl.w	r2, r3, r2
  4195fa:	430a      	orrs	r2, r1
  4195fc:	40c3      	lsrs	r3, r0
  4195fe:	9301      	str	r3, [sp, #4]
  419600:	f8c9 2014 	str.w	r2, [r9, #20]
  419604:	e7c2      	b.n	41958c <.LVL329+0xc>

00419606 <.LFE31>:
  419606:	bf00      	nop

Disassembly of section .text._tr_stored_block%172:

00419608 <_tr_stored_block>:
{
  419608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041960a <.LCFI21>:
  41960a:	4604      	mov	r4, r0
  41960c:	460d      	mov	r5, r1
  41960e:	4616      	mov	r6, r2

00419610 <.LBB68>:
    send_bits(s, (STORED_BLOCK<<1)+last, 3);    /* send block type */
  419610:	f241 62bc 	movw	r2, #5820	; 0x16bc

00419614 <.LVL289>:
  419614:	5882      	ldr	r2, [r0, r2]
  419616:	2a0d      	cmp	r2, #13
  419618:	dc34      	bgt.n	419684 <.LVL300>
  41961a:	f241 61b8 	movw	r1, #5816	; 0x16b8

0041961e <.LVL290>:
  41961e:	b29b      	uxth	r3, r3

00419620 <.LVL291>:
  419620:	4093      	lsls	r3, r2
  419622:	5a40      	ldrh	r0, [r0, r1]

00419624 <.LVL292>:
  419624:	4303      	orrs	r3, r0
  419626:	5263      	strh	r3, [r4, r1]
  419628:	3203      	adds	r2, #3
  41962a:	f241 63bc 	movw	r3, #5820	; 0x16bc
  41962e:	50e2      	str	r2, [r4, r3]

00419630 <.LBB70>:
    deflate_state *s;
    charf    *buf;    /* the input data */
    unsigned len;     /* its length */
    int      header;  /* true if block header must be written */
{
    bi_windup(s);        /* align on byte boundary */
  419630:	4620      	mov	r0, r4
  419632:	f003 fc59 	bl	41cee8 <.LFE223>

00419636 <.LVL294>:

    if (header) {
        put_short(s, (ush)len);
  419636:	68a1      	ldr	r1, [r4, #8]
  419638:	6963      	ldr	r3, [r4, #20]
  41963a:	1c5a      	adds	r2, r3, #1
  41963c:	6162      	str	r2, [r4, #20]
  41963e:	b2f2      	uxtb	r2, r6
  419640:	54ca      	strb	r2, [r1, r3]
  419642:	68a0      	ldr	r0, [r4, #8]
  419644:	6961      	ldr	r1, [r4, #20]
  419646:	1c4b      	adds	r3, r1, #1
  419648:	6163      	str	r3, [r4, #20]
  41964a:	b2b3      	uxth	r3, r6
  41964c:	0a1f      	lsrs	r7, r3, #8
  41964e:	5447      	strb	r7, [r0, r1]
        put_short(s, (ush)~len);
  419650:	68a0      	ldr	r0, [r4, #8]
  419652:	6961      	ldr	r1, [r4, #20]
  419654:	1c4f      	adds	r7, r1, #1
  419656:	6167      	str	r7, [r4, #20]
  419658:	43d2      	mvns	r2, r2
  41965a:	5442      	strb	r2, [r0, r1]
  41965c:	68a1      	ldr	r1, [r4, #8]
  41965e:	6962      	ldr	r2, [r4, #20]
  419660:	1c50      	adds	r0, r2, #1
  419662:	6160      	str	r0, [r4, #20]
  419664:	43db      	mvns	r3, r3
  419666:	f3c3 2307 	ubfx	r3, r3, #8, #8
  41966a:	548b      	strb	r3, [r1, r2]

0041966c <.LVL295>:
#endif
    }
#ifdef DEBUG
    s->bits_sent += (ulg)len<<3;
#endif
    while (len--) {
  41966c:	b14e      	cbz	r6, 419682 <.LVL299>
  41966e:	19aa      	adds	r2, r5, r6

00419670 <.LVL296>:
        put_byte(s, *buf++);
  419670:	68a1      	ldr	r1, [r4, #8]
  419672:	6963      	ldr	r3, [r4, #20]
  419674:	1c58      	adds	r0, r3, #1
  419676:	6160      	str	r0, [r4, #20]
  419678:	f815 0b01 	ldrb.w	r0, [r5], #1

0041967c <.LVL297>:
  41967c:	54c8      	strb	r0, [r1, r3]

0041967e <.LVL298>:
    while (len--) {
  41967e:	42aa      	cmp	r2, r5
  419680:	d1f6      	bne.n	419670 <.LVL296>

00419682 <.LVL299>:
  419682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00419684 <.LVL300>:
  419684:	b29b      	uxth	r3, r3

00419686 <.LBB69>:
    send_bits(s, (STORED_BLOCK<<1)+last, 3);    /* send block type */
  419686:	f241 61b8 	movw	r1, #5816	; 0x16b8

0041968a <.LVL302>:
  41968a:	fa03 f202 	lsl.w	r2, r3, r2
  41968e:	5a40      	ldrh	r0, [r0, r1]

00419690 <.LVL303>:
  419690:	4302      	orrs	r2, r0
  419692:	b212      	sxth	r2, r2
  419694:	5262      	strh	r2, [r4, r1]
  419696:	6960      	ldr	r0, [r4, #20]
  419698:	1c47      	adds	r7, r0, #1
  41969a:	6167      	str	r7, [r4, #20]
  41969c:	68a7      	ldr	r7, [r4, #8]
  41969e:	543a      	strb	r2, [r7, r0]
  4196a0:	68a0      	ldr	r0, [r4, #8]
  4196a2:	6967      	ldr	r7, [r4, #20]
  4196a4:	1c7a      	adds	r2, r7, #1
  4196a6:	6162      	str	r2, [r4, #20]
  4196a8:	5a62      	ldrh	r2, [r4, r1]
  4196aa:	0a12      	lsrs	r2, r2, #8
  4196ac:	55c2      	strb	r2, [r0, r7]
  4196ae:	f241 60bc 	movw	r0, #5820	; 0x16bc
  4196b2:	5822      	ldr	r2, [r4, r0]
  4196b4:	f1c2 0710 	rsb	r7, r2, #16
  4196b8:	413b      	asrs	r3, r7
  4196ba:	5263      	strh	r3, [r4, r1]
  4196bc:	3a0d      	subs	r2, #13
  4196be:	5022      	str	r2, [r4, r0]

004196c0 <.LBE69>:
  4196c0:	e7b6      	b.n	419630 <.LBB70>

Disassembly of section .text.sha_test%173:

004196c4 <sha_test>:
{
  4196c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

004196c8 <.LCFI3>:
  4196c8:	b097      	sub	sp, #92	; 0x5c

004196ca <.LCFI4>:
  4196ca:	af00      	add	r7, sp, #0

004196cc <.LCFI5>:
  4196cc:	f5ad 7d20 	sub.w	sp, sp, #640	; 0x280
  4196d0:	f10d 057f 	add.w	r5, sp, #127	; 0x7f
  4196d4:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
    test_sha[0] = d;
  4196d8:	4b26      	ldr	r3, [pc, #152]	; (419774 <.LCFI7+0x4>)
  4196da:	f503 7294 	add.w	r2, r3, #296	; 0x128
  4196de:	607a      	str	r2, [r7, #4]
  4196e0:	f503 72d6 	add.w	r2, r3, #428	; 0x1ac
  4196e4:	60ba      	str	r2, [r7, #8]
  4196e6:	2280      	movs	r2, #128	; 0x80
  4196e8:	60fa      	str	r2, [r7, #12]
  4196ea:	2214      	movs	r2, #20
  4196ec:	613a      	str	r2, [r7, #16]
    test_sha[1] = b;
  4196ee:	f503 71e2 	add.w	r1, r3, #452	; 0x1c4
  4196f2:	6179      	str	r1, [r7, #20]
  4196f4:	f503 7100 	add.w	r1, r3, #512	; 0x200
  4196f8:	61b9      	str	r1, [r7, #24]
  4196fa:	2138      	movs	r1, #56	; 0x38
  4196fc:	61f9      	str	r1, [r7, #28]
  4196fe:	623a      	str	r2, [r7, #32]
    test_sha[2] = c;
  419700:	f503 7106 	add.w	r1, r3, #536	; 0x218
  419704:	6279      	str	r1, [r7, #36]	; 0x24
  419706:	f503 7117 	add.w	r1, r3, #604	; 0x25c
  41970a:	62b9      	str	r1, [r7, #40]	; 0x28
  41970c:	2140      	movs	r1, #64	; 0x40
  41970e:	62f9      	str	r1, [r7, #44]	; 0x2c
  419710:	633a      	str	r2, [r7, #48]	; 0x30
    test_sha[3] = a;
  419712:	637b      	str	r3, [r7, #52]	; 0x34
  419714:	f503 731d 	add.w	r3, r3, #628	; 0x274
  419718:	63bb      	str	r3, [r7, #56]	; 0x38
  41971a:	2303      	movs	r3, #3
  41971c:	63fb      	str	r3, [r7, #60]	; 0x3c
  41971e:	643a      	str	r2, [r7, #64]	; 0x40
    CRYPT_SHA_Initialize(&sha);
  419720:	4628      	mov	r0, r5
  419722:	f005 fa7f 	bl	41ec24 <.LFE224>

00419726 <.LVL8>:
    appData.sha_test_result = times;
  419726:	2204      	movs	r2, #4
  419728:	4b13      	ldr	r3, [pc, #76]	; (419778 <.LCFI7+0x8>)
  41972a:	609a      	str	r2, [r3, #8]

0041972c <.LVL9>:
  41972c:	18bc      	adds	r4, r7, r2
  41972e:	f107 0944 	add.w	r9, r7, #68	; 0x44
        if (memcmp(hash, test_sha[i].output, SHA_DIGEST_SIZE) == 0)
  419732:	f04f 0814 	mov.w	r8, #20
            appData.sha_test_result--;
  419736:	461e      	mov	r6, r3
  419738:	e002      	b.n	419740 <.LVL10+0x6>

0041973a <.LVL10>:
  41973a:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  41973c:	454c      	cmp	r4, r9
  41973e:	d015      	beq.n	41976c <.LVL13+0xc>
        CRYPT_SHA_DataAdd(&sha, (byte*)test_sha[i].input, (word32)test_sha[i].inLen);
  419740:	68a2      	ldr	r2, [r4, #8]
  419742:	6821      	ldr	r1, [r4, #0]
  419744:	4628      	mov	r0, r5
  419746:	f005 f8d1 	bl	41e8ec <.LFE157>

0041974a <.LVL11>:
        CRYPT_SHA_Finalize(&sha, hash);
  41974a:	f107 0144 	add.w	r1, r7, #68	; 0x44
  41974e:	4628      	mov	r0, r5
  419750:	f005 f8d8 	bl	41e904 <.LFE160>

00419754 <.LVL12>:
        if (memcmp(hash, test_sha[i].output, SHA_DIGEST_SIZE) == 0)
  419754:	4642      	mov	r2, r8
  419756:	6861      	ldr	r1, [r4, #4]
  419758:	f107 0044 	add.w	r0, r7, #68	; 0x44
  41975c:	f003 f974 	bl	41ca48 <memcmp>

00419760 <.LVL13>:
  419760:	2800      	cmp	r0, #0
  419762:	d1ea      	bne.n	41973a <.LVL10>
            appData.sha_test_result--;
  419764:	68b3      	ldr	r3, [r6, #8]
  419766:	3b01      	subs	r3, #1
  419768:	60b3      	str	r3, [r6, #8]
  41976a:	e7e6      	b.n	41973a <.LVL10>
}
  41976c:	375c      	adds	r7, #92	; 0x5c

0041976e <.LCFI6>:
  41976e:	46bd      	mov	sp, r7

00419770 <.LCFI7>:
  419770:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  419774:	0040accc 	.word	0x0040accc
  419778:	20417598 	.word	0x20417598

Disassembly of section .text.wc_ecc_curve_load%174:

0041977c <wc_ecc_curve_load>:
{
  41977c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041977e <.LCFI7>:
    if (dp == NULL || pCurve == NULL)
  41977e:	2800      	cmp	r0, #0
  419780:	d055      	beq.n	41982e <.LVL66>
  419782:	4606      	mov	r6, r0
  419784:	2900      	cmp	r1, #0
  419786:	d052      	beq.n	41982e <.LVL66>
    curve = *pCurve;
  419788:	680d      	ldr	r5, [r1, #0]

0041978a <.LVL43>:
    if (curve->dp != dp) {
  41978a:	682b      	ldr	r3, [r5, #0]
  41978c:	4298      	cmp	r0, r3
  41978e:	d002      	beq.n	419796 <.LVL43+0xc>
        curve->load_mask = 0;
  419790:	2300      	movs	r3, #0
  419792:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    curve->dp = dp; /* set dp info */
  419796:	602e      	str	r6, [r5, #0]
    load_items = (~curve->load_mask & load_mask);
  419798:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
  41979c:	ea22 0403 	bic.w	r4, r2, r3

004197a0 <.LVL44>:
    curve->load_mask |= load_items;
  4197a0:	4323      	orrs	r3, r4
  4197a2:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24

004197a6 <.LVL45>:
    if (load_items & ECC_CURVE_FIELD_PRIME)
  4197a6:	f014 0f01 	tst.w	r4, #1
  4197aa:	d10f      	bne.n	4197cc <.LVL48>
    x = 0;
  4197ac:	2700      	movs	r7, #0

004197ae <.LVL46>:
    if (load_items & ECC_CURVE_FIELD_AF)
  4197ae:	f014 0f02 	tst.w	r4, #2
  4197b2:	d113      	bne.n	4197dc <.LVL54>
    if (load_items & ECC_CURVE_FIELD_ORDER)
  4197b4:	f014 0f08 	tst.w	r4, #8
  4197b8:	d119      	bne.n	4197ee <.LVL55+0x4>
    if (load_items & ECC_CURVE_FIELD_GX)
  4197ba:	f014 0f10 	tst.w	r4, #16
  4197be:	d11f      	bne.n	419800 <.LVL57+0x4>
    if (load_items & ECC_CURVE_FIELD_GY)
  4197c0:	f014 0f20 	tst.w	r4, #32
  4197c4:	d124      	bne.n	419810 <.LVL59+0x4>
    if (x != 0) {
  4197c6:	bb67      	cbnz	r7, 419822 <.LBB15>

004197c8 <.LVL47>:
}
  4197c8:	4638      	mov	r0, r7
  4197ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

004197cc <.LVL48>:
        x += wc_ecc_curve_load_item(dp->prime, &curve->prime, curve,
  4197cc:	2301      	movs	r3, #1
  4197ce:	462a      	mov	r2, r5

004197d0 <.LVL49>:
  4197d0:	1d29      	adds	r1, r5, #4

004197d2 <.LVL50>:
  4197d2:	68f0      	ldr	r0, [r6, #12]

004197d4 <.LVL51>:
  4197d4:	f003 fc06 	bl	41cfe4 <.LFE153>

004197d8 <.LVL52>:
  4197d8:	4607      	mov	r7, r0

004197da <.LVL53>:
  4197da:	e7e8      	b.n	4197ae <.LVL46>

004197dc <.LVL54>:
        x += wc_ecc_curve_load_item(dp->Af, &curve->Af, curve,
  4197dc:	2302      	movs	r3, #2
  4197de:	462a      	mov	r2, r5
  4197e0:	f105 0108 	add.w	r1, r5, #8
  4197e4:	6930      	ldr	r0, [r6, #16]
  4197e6:	f003 fbfd 	bl	41cfe4 <.LFE153>

004197ea <.LVL55>:
  4197ea:	4407      	add	r7, r0
  4197ec:	e7e2      	b.n	4197b4 <.LVL46+0x6>
        x += wc_ecc_curve_load_item(dp->order, &curve->order, curve,
  4197ee:	2308      	movs	r3, #8
  4197f0:	462a      	mov	r2, r5
  4197f2:	f105 010c 	add.w	r1, r5, #12
  4197f6:	69b0      	ldr	r0, [r6, #24]
  4197f8:	f003 fbf4 	bl	41cfe4 <.LFE153>

004197fc <.LVL57>:
  4197fc:	4407      	add	r7, r0
  4197fe:	e7dc      	b.n	4197ba <.LVL46+0xc>
        x += wc_ecc_curve_load_item(dp->Gx, &curve->Gx, curve,
  419800:	2310      	movs	r3, #16
  419802:	462a      	mov	r2, r5
  419804:	18e9      	adds	r1, r5, r3
  419806:	69f0      	ldr	r0, [r6, #28]
  419808:	f003 fbec 	bl	41cfe4 <.LFE153>

0041980c <.LVL59>:
  41980c:	4407      	add	r7, r0
  41980e:	e7d7      	b.n	4197c0 <.LVL46+0x12>
        x += wc_ecc_curve_load_item(dp->Gy, &curve->Gy, curve,
  419810:	2320      	movs	r3, #32
  419812:	462a      	mov	r2, r5
  419814:	f105 0114 	add.w	r1, r5, #20
  419818:	6a30      	ldr	r0, [r6, #32]
  41981a:	f003 fbe3 	bl	41cfe4 <.LFE153>

0041981e <.LVL61>:
  41981e:	4407      	add	r7, r0
  419820:	e7d1      	b.n	4197c6 <.LVL46+0x18>

00419822 <.LBB15>:
    _wc_ecc_curve_free(curve);
  419822:	4628      	mov	r0, r5
  419824:	f002 fd5a 	bl	41c2dc <.LFE46>

00419828 <.LBE15>:
        ret = MP_READ_E;
  419828:	f06f 076e 	mvn.w	r7, #110	; 0x6e

0041982c <.LVL65>:
  41982c:	e7cc      	b.n	4197c8 <.LVL47>

0041982e <.LVL66>:
        return BAD_FUNC_ARG;
  41982e:	f06f 07ac 	mvn.w	r7, #172	; 0xac
  419832:	e7c9      	b.n	4197c8 <.LVL47>

Disassembly of section .text.wc_InitSha512_ex%175:

00419838 <wc_InitSha512_ex>:
        if (sha512 == NULL)
  419838:	2800      	cmp	r0, #0
  41983a:	d035      	beq.n	4198a8 <.LVL21>
    {
  41983c:	b430      	push	{r4, r5}

0041983e <.LCFI4>:
  41983e:	4603      	mov	r3, r0
        sha512->heap = heap;
  419840:	f8c0 10d8 	str.w	r1, [r0, #216]	; 0xd8

00419844 <.LBB679>:
    sha512->digest[0] = W64LIT(0x6a09e667f3bcc908);
  419844:	a11a      	add	r1, pc, #104	; (adr r1, 4198b0 <.LVL22+0x4>)
  419846:	e9d1 0100 	ldrd	r0, r1, [r1]

0041984a <.LVL19>:
  41984a:	e9c3 0106 	strd	r0, r1, [r3, #24]
    sha512->digest[1] = W64LIT(0xbb67ae8584caa73b);
  41984e:	a11a      	add	r1, pc, #104	; (adr r1, 4198b8 <.LVL22+0xc>)
  419850:	e9d1 0100 	ldrd	r0, r1, [r1]
  419854:	e9c3 0108 	strd	r0, r1, [r3, #32]
    sha512->digest[2] = W64LIT(0x3c6ef372fe94f82b);
  419858:	a119      	add	r1, pc, #100	; (adr r1, 4198c0 <.LVL22+0x14>)
  41985a:	e9d1 0100 	ldrd	r0, r1, [r1]
  41985e:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
    sha512->digest[3] = W64LIT(0xa54ff53a5f1d36f1);
  419862:	a119      	add	r1, pc, #100	; (adr r1, 4198c8 <.LVL22+0x1c>)
  419864:	e9d1 0100 	ldrd	r0, r1, [r1]
  419868:	e9c3 010c 	strd	r0, r1, [r3, #48]	; 0x30
    sha512->digest[4] = W64LIT(0x510e527fade682d1);
  41986c:	a118      	add	r1, pc, #96	; (adr r1, 4198d0 <.LVL22+0x24>)
  41986e:	e9d1 0100 	ldrd	r0, r1, [r1]
  419872:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
    sha512->digest[5] = W64LIT(0x9b05688c2b3e6c1f);
  419876:	a118      	add	r1, pc, #96	; (adr r1, 4198d8 <.LVL22+0x2c>)
  419878:	e9d1 0100 	ldrd	r0, r1, [r1]
  41987c:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
    sha512->digest[6] = W64LIT(0x1f83d9abfb41bd6b);
  419880:	a117      	add	r1, pc, #92	; (adr r1, 4198e0 <.LVL22+0x34>)
  419882:	e9d1 0100 	ldrd	r0, r1, [r1]
  419886:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
    sha512->digest[7] = W64LIT(0x5be0cd19137e2179);
  41988a:	a117      	add	r1, pc, #92	; (adr r1, 4198e8 <.LVL22+0x3c>)
  41988c:	e9d1 0100 	ldrd	r0, r1, [r1]
  419890:	e9c3 0114 	strd	r0, r1, [r3, #80]	; 0x50
    sha512->buffLen = 0;
  419894:	2000      	movs	r0, #0
  419896:	6018      	str	r0, [r3, #0]
    sha512->loLen   = 0;
  419898:	2400      	movs	r4, #0
  41989a:	2500      	movs	r5, #0
  41989c:	e9c3 4502 	strd	r4, r5, [r3, #8]
    sha512->hiLen   = 0;
  4198a0:	e9c3 4504 	strd	r4, r5, [r3, #16]

004198a4 <.LBE679>:
    }
  4198a4:	bc30      	pop	{r4, r5}

004198a6 <.LCFI5>:
  4198a6:	4770      	bx	lr

004198a8 <.LVL21>:
            return BAD_FUNC_ARG;
  4198a8:	f06f 00ac 	mvn.w	r0, #172	; 0xac

004198ac <.LVL22>:
  4198ac:	4770      	bx	lr
  4198ae:	bf00      	nop
  4198b0:	f3bcc908 	.word	0xf3bcc908
  4198b4:	6a09e667 	.word	0x6a09e667
  4198b8:	84caa73b 	.word	0x84caa73b
  4198bc:	bb67ae85 	.word	0xbb67ae85
  4198c0:	fe94f82b 	.word	0xfe94f82b
  4198c4:	3c6ef372 	.word	0x3c6ef372
  4198c8:	5f1d36f1 	.word	0x5f1d36f1
  4198cc:	a54ff53a 	.word	0xa54ff53a
  4198d0:	ade682d1 	.word	0xade682d1
  4198d4:	510e527f 	.word	0x510e527f
  4198d8:	2b3e6c1f 	.word	0x2b3e6c1f
  4198dc:	9b05688c 	.word	0x9b05688c
  4198e0:	fb41bd6b 	.word	0xfb41bd6b
  4198e4:	1f83d9ab 	.word	0x1f83d9ab
  4198e8:	137e2179 	.word	0x137e2179
  4198ec:	5be0cd19 	.word	0x5be0cd19

Disassembly of section .text.wc_InitSha384_ex%176:

004198f0 <wc_InitSha384_ex>:
#else
int wc_InitSha384_ex(Sha384* sha384, void* heap, int devId)
{
    int ret;

    if (sha384 == NULL) {
  4198f0:	2800      	cmp	r0, #0
  4198f2:	d035      	beq.n	419960 <.LVL142>
{
  4198f4:	b430      	push	{r4, r5}

004198f6 <.LCFI19>:
  4198f6:	4603      	mov	r3, r0
        return BAD_FUNC_ARG;
    }

    sha384->heap = heap;
  4198f8:	f8c0 10d8 	str.w	r1, [r0, #216]	; 0xd8

004198fc <.LBB925>:
    sha384->digest[0] = W64LIT(0xcbbb9d5dc1059ed8);
  4198fc:	a11a      	add	r1, pc, #104	; (adr r1, 419968 <.LVL143+0x4>)
  4198fe:	e9d1 0100 	ldrd	r0, r1, [r1]

00419902 <.LVL140>:
  419902:	e9c3 0106 	strd	r0, r1, [r3, #24]
    sha384->digest[1] = W64LIT(0x629a292a367cd507);
  419906:	a11a      	add	r1, pc, #104	; (adr r1, 419970 <.LVL143+0xc>)
  419908:	e9d1 0100 	ldrd	r0, r1, [r1]
  41990c:	e9c3 0108 	strd	r0, r1, [r3, #32]
    sha384->digest[2] = W64LIT(0x9159015a3070dd17);
  419910:	a119      	add	r1, pc, #100	; (adr r1, 419978 <.LVL143+0x14>)
  419912:	e9d1 0100 	ldrd	r0, r1, [r1]
  419916:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
    sha384->digest[3] = W64LIT(0x152fecd8f70e5939);
  41991a:	a119      	add	r1, pc, #100	; (adr r1, 419980 <.LVL143+0x1c>)
  41991c:	e9d1 0100 	ldrd	r0, r1, [r1]
  419920:	e9c3 010c 	strd	r0, r1, [r3, #48]	; 0x30
    sha384->digest[4] = W64LIT(0x67332667ffc00b31);
  419924:	a118      	add	r1, pc, #96	; (adr r1, 419988 <.LVL143+0x24>)
  419926:	e9d1 0100 	ldrd	r0, r1, [r1]
  41992a:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
    sha384->digest[5] = W64LIT(0x8eb44a8768581511);
  41992e:	a118      	add	r1, pc, #96	; (adr r1, 419990 <.LVL143+0x2c>)
  419930:	e9d1 0100 	ldrd	r0, r1, [r1]
  419934:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
    sha384->digest[6] = W64LIT(0xdb0c2e0d64f98fa7);
  419938:	a117      	add	r1, pc, #92	; (adr r1, 419998 <.LVL143+0x34>)
  41993a:	e9d1 0100 	ldrd	r0, r1, [r1]
  41993e:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
    sha384->digest[7] = W64LIT(0x47b5481dbefa4fa4);
  419942:	a117      	add	r1, pc, #92	; (adr r1, 4199a0 <.LVL143+0x3c>)
  419944:	e9d1 0100 	ldrd	r0, r1, [r1]
  419948:	e9c3 0114 	strd	r0, r1, [r3, #80]	; 0x50
    sha384->buffLen = 0;
  41994c:	2000      	movs	r0, #0
  41994e:	6018      	str	r0, [r3, #0]
    sha384->loLen   = 0;
  419950:	2400      	movs	r4, #0
  419952:	2500      	movs	r5, #0
  419954:	e9c3 4502 	strd	r4, r5, [r3, #8]
    sha384->hiLen   = 0;
  419958:	e9c3 4504 	strd	r4, r5, [r3, #16]

0041995c <.LBE925>:
#else
    (void)devId;
#endif /* WOLFSSL_ASYNC_CRYPT */

    return ret;
}
  41995c:	bc30      	pop	{r4, r5}

0041995e <.LCFI20>:
  41995e:	4770      	bx	lr

00419960 <.LVL142>:
        return BAD_FUNC_ARG;
  419960:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00419964 <.LVL143>:
  419964:	4770      	bx	lr
  419966:	bf00      	nop
  419968:	c1059ed8 	.word	0xc1059ed8
  41996c:	cbbb9d5d 	.word	0xcbbb9d5d
  419970:	367cd507 	.word	0x367cd507
  419974:	629a292a 	.word	0x629a292a
  419978:	3070dd17 	.word	0x3070dd17
  41997c:	9159015a 	.word	0x9159015a
  419980:	f70e5939 	.word	0xf70e5939
  419984:	152fecd8 	.word	0x152fecd8
  419988:	ffc00b31 	.word	0xffc00b31
  41998c:	67332667 	.word	0x67332667
  419990:	68581511 	.word	0x68581511
  419994:	8eb44a87 	.word	0x8eb44a87
  419998:	64f98fa7 	.word	0x64f98fa7
  41999c:	db0c2e0d 	.word	0xdb0c2e0d
  4199a0:	befa4fa4 	.word	0xbefa4fa4
  4199a4:	47b5481d 	.word	0x47b5481d

Disassembly of section .text.wc_Des3_CbcDecrypt%177:

004199a8 <wc_Des3_CbcDecrypt>:

    int wc_Des3_CbcDecrypt(Des3* des, byte* out, const byte* in, word32 sz)
    {
        word32 blocks;

        if (des == NULL || out == NULL || in == NULL) {
  4199a8:	2a00      	cmp	r2, #0
  4199aa:	bf18      	it	ne
  4199ac:	2900      	cmpne	r1, #0
  4199ae:	d051      	beq.n	419a54 <.LCFI16>
    {
  4199b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

004199b4 <.LCFI15>:
  4199b4:	4682      	mov	sl, r0
  4199b6:	460c      	mov	r4, r1
  4199b8:	4616      	mov	r6, r2
        if (des == NULL || out == NULL || in == NULL) {
  4199ba:	2800      	cmp	r0, #0
  4199bc:	d043      	beq.n	419a46 <.LVL240>
            }
        #endif
        }
    #endif /* WOLFSSL_ASYNC_CRYPT */

        blocks = sz / DES_BLOCK_SIZE;
  4199be:	08db      	lsrs	r3, r3, #3

004199c0 <.LVL229>:
        while (blocks--) {
  4199c0:	f103 38ff 	add.w	r8, r3, #4294967295

004199c4 <.LVL230>:
  4199c4:	2b00      	cmp	r3, #0
  4199c6:	d042      	beq.n	419a4e <.LVL242>
  4199c8:	1e4f      	subs	r7, r1, #1
            XMEMCPY(des->tmp, in, DES_BLOCK_SIZE);
  4199ca:	f500 75c4 	add.w	r5, r0, #392	; 0x188
            Des3ProcessBlock(des, (byte*)des->tmp, out);
            xorbuf(out, (byte*)des->reg, DES_BLOCK_SIZE);
  4199ce:	f500 79c0 	add.w	r9, r0, #384	; 0x180
  4199d2:	e019      	b.n	419a08 <.LBE285+0x1c>

004199d4 <.LBB285>:
    for (i = 0; i < n; i++) r[i] ^= a[i];
  4199d4:	f8d7 3001 	ldr.w	r3, [r7, #1]
  4199d8:	f8da 2180 	ldr.w	r2, [sl, #384]	; 0x180
  4199dc:	4053      	eors	r3, r2
  4199de:	f8c7 3001 	str.w	r3, [r7, #1]

004199e2 <.LVL232>:
  4199e2:	6863      	ldr	r3, [r4, #4]
  4199e4:	f8da 2184 	ldr.w	r2, [sl, #388]	; 0x184
  4199e8:	4053      	eors	r3, r2
  4199ea:	6063      	str	r3, [r4, #4]

004199ec <.LBE285>:
            XMEMCPY(des->reg, des->tmp, DES_BLOCK_SIZE);
  4199ec:	682a      	ldr	r2, [r5, #0]
  4199ee:	686b      	ldr	r3, [r5, #4]
  4199f0:	f8c9 2000 	str.w	r2, [r9]
  4199f4:	f8c9 3004 	str.w	r3, [r9, #4]

            out += DES_BLOCK_SIZE;
  4199f8:	3408      	adds	r4, #8
            in  += DES_BLOCK_SIZE;
  4199fa:	3608      	adds	r6, #8
        while (blocks--) {
  4199fc:	f108 38ff 	add.w	r8, r8, #4294967295
  419a00:	3708      	adds	r7, #8
  419a02:	f1b8 3fff 	cmp.w	r8, #4294967295
  419a06:	d01b      	beq.n	419a40 <.LBE289>
            XMEMCPY(des->tmp, in, DES_BLOCK_SIZE);
  419a08:	6832      	ldr	r2, [r6, #0]
  419a0a:	6873      	ldr	r3, [r6, #4]
  419a0c:	602a      	str	r2, [r5, #0]
  419a0e:	606b      	str	r3, [r5, #4]
            Des3ProcessBlock(des, (byte*)des->tmp, out);
  419a10:	4622      	mov	r2, r4
  419a12:	4629      	mov	r1, r5
  419a14:	4650      	mov	r0, sl
  419a16:	f7fd f869 	bl	416aec <.LFE19>

00419a1a <.LBB291>:
    if (((wolfssl_word)buf | (wolfssl_word)mask | count) % WOLFSSL_WORD_SIZE == 0)
  419a1a:	ea44 0309 	orr.w	r3, r4, r9
  419a1e:	f013 0f03 	tst.w	r3, #3
  419a22:	d0d7      	beq.n	4199d4 <.LBB285>
  419a24:	f20a 117f 	addw	r1, sl, #383	; 0x17f
  419a28:	f104 0e07 	add.w	lr, r4, #7
  419a2c:	463b      	mov	r3, r7

00419a2e <.LBB289>:
        for (i = 0; i < count; i++) b[i] ^= m[i];
  419a2e:	785a      	ldrb	r2, [r3, #1]
  419a30:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  419a34:	4042      	eors	r2, r0
  419a36:	f803 2f01 	strb.w	r2, [r3, #1]!
  419a3a:	4573      	cmp	r3, lr
  419a3c:	d1f7      	bne.n	419a2e <.LBB289>
  419a3e:	e7d5      	b.n	4199ec <.LBE285>

00419a40 <.LBE289>:
        }
        return 0;
  419a40:	2000      	movs	r0, #0
  419a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00419a46 <.LVL240>:
            return BAD_FUNC_ARG;
  419a46:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00419a4a <.LVL241>:
  419a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00419a4e <.LVL242>:
        return 0;
  419a4e:	2000      	movs	r0, #0

00419a50 <.LVL243>:
    }
  419a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00419a54 <.LCFI16>:
            return BAD_FUNC_ARG;
  419a54:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00419a58 <.LVL245>:
    }
  419a58:	4770      	bx	lr

Disassembly of section .text.md5_test%178:

00419a5c <md5_test>:
{
  419a5c:	b570      	push	{r4, r5, r6, lr}

00419a5e <.LCFI0>:
  419a5e:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218

00419a62 <.LCFI1>:
    test_md5[0] = a;
  419a62:	4b28      	ldr	r3, [pc, #160]	; (419b04 <.LCFI2+0x4>)
  419a64:	9300      	str	r3, [sp, #0]
  419a66:	1d1a      	adds	r2, r3, #4
  419a68:	9201      	str	r2, [sp, #4]
  419a6a:	2203      	movs	r2, #3
  419a6c:	9202      	str	r2, [sp, #8]
  419a6e:	2210      	movs	r2, #16
  419a70:	9203      	str	r2, [sp, #12]
    test_md5[1] = b;
  419a72:	f103 0118 	add.w	r1, r3, #24
  419a76:	9104      	str	r1, [sp, #16]
  419a78:	f103 0128 	add.w	r1, r3, #40	; 0x28
  419a7c:	9105      	str	r1, [sp, #20]
  419a7e:	210e      	movs	r1, #14
  419a80:	9106      	str	r1, [sp, #24]
  419a82:	9207      	str	r2, [sp, #28]
    test_md5[2] = c;
  419a84:	f103 013c 	add.w	r1, r3, #60	; 0x3c
  419a88:	9108      	str	r1, [sp, #32]
  419a8a:	f103 0158 	add.w	r1, r3, #88	; 0x58
  419a8e:	9109      	str	r1, [sp, #36]	; 0x24
  419a90:	211a      	movs	r1, #26
  419a92:	910a      	str	r1, [sp, #40]	; 0x28
  419a94:	920b      	str	r2, [sp, #44]	; 0x2c
    test_md5[3] = d;
  419a96:	f103 016c 	add.w	r1, r3, #108	; 0x6c
  419a9a:	910c      	str	r1, [sp, #48]	; 0x30
  419a9c:	f103 01ac 	add.w	r1, r3, #172	; 0xac
  419aa0:	910d      	str	r1, [sp, #52]	; 0x34
  419aa2:	213e      	movs	r1, #62	; 0x3e
  419aa4:	910e      	str	r1, [sp, #56]	; 0x38
  419aa6:	920f      	str	r2, [sp, #60]	; 0x3c
    test_md5[4] = e;
  419aa8:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
  419aac:	9110      	str	r1, [sp, #64]	; 0x40
  419aae:	f503 738a 	add.w	r3, r3, #276	; 0x114
  419ab2:	9311      	str	r3, [sp, #68]	; 0x44
  419ab4:	2350      	movs	r3, #80	; 0x50
  419ab6:	9312      	str	r3, [sp, #72]	; 0x48
  419ab8:	9213      	str	r2, [sp, #76]	; 0x4c
    CRYPT_MD5_Initialize(&md5);
  419aba:	a818      	add	r0, sp, #96	; 0x60
  419abc:	f005 f898 	bl	41ebf0 <.LBE48>

00419ac0 <.LVL1>:
    appData.md5_test_result = times;
  419ac0:	2205      	movs	r2, #5
  419ac2:	4b11      	ldr	r3, [pc, #68]	; (419b08 <.LCFI2+0x8>)
  419ac4:	605a      	str	r2, [r3, #4]

00419ac6 <.LVL2>:
  419ac6:	466c      	mov	r4, sp
  419ac8:	ad14      	add	r5, sp, #80	; 0x50
            appData.md5_test_result--;
  419aca:	461e      	mov	r6, r3
  419acc:	e002      	b.n	419ad4 <.LVL3+0x6>

00419ace <.LVL3>:
  419ace:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  419ad0:	42ac      	cmp	r4, r5
  419ad2:	d013      	beq.n	419afc <.LVL6+0xc>
        CRYPT_MD5_DataAdd(&md5, (byte*)test_md5[i].input, (word32)test_md5[i].inLen);
  419ad4:	68a2      	ldr	r2, [r4, #8]
  419ad6:	6821      	ldr	r1, [r4, #0]
  419ad8:	a818      	add	r0, sp, #96	; 0x60
  419ada:	f004 feef 	bl	41e8bc <.LFE15>

00419ade <.LVL4>:
        CRYPT_MD5_Finalize(&md5, hash);
  419ade:	a914      	add	r1, sp, #80	; 0x50
  419ae0:	a818      	add	r0, sp, #96	; 0x60
  419ae2:	f004 fef7 	bl	41e8d4 <.LFE156>

00419ae6 <.LVL5>:
        if (memcmp(hash, test_md5[i].output, MD5_DIGEST_SIZE) == 0)
  419ae6:	2210      	movs	r2, #16
  419ae8:	6861      	ldr	r1, [r4, #4]
  419aea:	a814      	add	r0, sp, #80	; 0x50
  419aec:	f002 ffac 	bl	41ca48 <memcmp>

00419af0 <.LVL6>:
  419af0:	2800      	cmp	r0, #0
  419af2:	d1ec      	bne.n	419ace <.LVL3>
            appData.md5_test_result--;
  419af4:	6873      	ldr	r3, [r6, #4]
  419af6:	3b01      	subs	r3, #1
  419af8:	6073      	str	r3, [r6, #4]
  419afa:	e7e8      	b.n	419ace <.LVL3>
}
  419afc:	f50d 7d06 	add.w	sp, sp, #536	; 0x218

00419b00 <.LCFI2>:
  419b00:	bd70      	pop	{r4, r5, r6, pc}
  419b02:	bf00      	nop
  419b04:	0040accc 	.word	0x0040accc
  419b08:	20417598 	.word	0x20417598

Disassembly of section .text.SYS_TIME_Initialize%179:

00419b0c <SYS_TIME_Initialize>:
// Section: System Interface Functions
// *****************************************************************************
// *****************************************************************************
SYS_MODULE_OBJ SYS_TIME_Initialize( const SYS_MODULE_INDEX index, const SYS_MODULE_INIT * const init )
{
    if(init == 0 || index != SYS_TIME_INDEX_0)
  419b0c:	2900      	cmp	r1, #0
  419b0e:	d047      	beq.n	419ba0 <.LCFI13>
{
  419b10:	b538      	push	{r3, r4, r5, lr}

00419b12 <.LCFI12>:
  419b12:	460c      	mov	r4, r1
    if(init == 0 || index != SYS_TIME_INDEX_0)
  419b14:	b110      	cbz	r0, 419b1c <.LVL124>
    {
        return SYS_MODULE_OBJ_INVALID;
  419b16:	f04f 30ff 	mov.w	r0, #4294967295

00419b1a <.LVL123>:
  419b1a:	bd38      	pop	{r3, r4, r5, pc}

00419b1c <.LVL124>:
    }
    /* Create mutex to guard from multiple contesting threads */
    if(OSAL_MUTEX_Create(&gSystemCounterObj.timerMutex) != OSAL_RESULT_TRUE)
  419b1c:	4822      	ldr	r0, [pc, #136]	; (419ba8 <.LVL138+0x4>)

00419b1e <.LVL125>:
  419b1e:	f004 feb5 	bl	41e88c <.LFE32>

00419b22 <.LVL126>:
  419b22:	2801      	cmp	r0, #1
  419b24:	d002      	beq.n	419b2c <.LBB20>
    {
        return SYS_MODULE_OBJ_INVALID;
  419b26:	f04f 30ff 	mov.w	r0, #4294967295
    memset(timers, 0, sizeof(timers));

    gSystemCounterObj.status = SYS_STATUS_READY;

    return (SYS_MODULE_OBJ)&gSystemCounterObj;
}
  419b2a:	bd38      	pop	{r3, r4, r5, pc}

00419b2c <.LBB20>:
    counterObj->timePlib = initData->timePlib;
  419b2c:	6823      	ldr	r3, [r4, #0]
  419b2e:	4d1f      	ldr	r5, [pc, #124]	; (419bac <.LVL138+0x8>)
  419b30:	606b      	str	r3, [r5, #4]
    counterObj->hwTimerFrequency = counterObj->timePlib->timerFrequencyGet();
  419b32:	689b      	ldr	r3, [r3, #8]
  419b34:	4798      	blx	r3
  419b36:	60e8      	str	r0, [r5, #12]

00419b38 <.LVL129>:
    cpuCyclesPerTimerClock=(SYS_TIME_CPU_CLOCK_FREQUENCY/counterObj->hwTimerFrequency);
  419b38:	4a1d      	ldr	r2, [pc, #116]	; (419bb0 <.LVL138+0xc>)
  419b3a:	fbb2 f2f0 	udiv	r2, r2, r0

00419b3e <.LVL130>:
    counterObj->hwTimerCompareMargin=(COMPARE_UPDATE_EXECUTION_CYCLES/cpuCyclesPerTimerClock) +2;
  419b3e:	f44f 7361 	mov.w	r3, #900	; 0x384
  419b42:	fb93 f3f2 	sdiv	r3, r3, r2
  419b46:	3302      	adds	r3, #2
  419b48:	622b      	str	r3, [r5, #32]
    counterObj->hwTimerIntNum = initData->hwTimerIntNum;
  419b4a:	f994 3004 	ldrsb.w	r3, [r4, #4]
  419b4e:	722b      	strb	r3, [r5, #8]
    counterObj->hwTimerPreviousValue = 0;
  419b50:	2100      	movs	r1, #0
  419b52:	6129      	str	r1, [r5, #16]
    counterObj->hwTimerPeriodValue = SYS_TIME_HW_COUNTER_PERIOD;
  419b54:	f64f 73ff 	movw	r3, #65535	; 0xffff
  419b58:	61ab      	str	r3, [r5, #24]
    counterObj->hwTimerCompareValue = SYS_TIME_HW_COUNTER_HALF_PERIOD;
  419b5a:	f647 73ff 	movw	r3, #32767	; 0x7fff
  419b5e:	61eb      	str	r3, [r5, #28]
    counterObj->swCounter64Low = 0;
  419b60:	6269      	str	r1, [r5, #36]	; 0x24
    counterObj->swCounter64High = 0;
  419b62:	62a9      	str	r1, [r5, #40]	; 0x28
    counterObj->tmrActive = NULL;
  419b64:	6329      	str	r1, [r5, #48]	; 0x30
    counterObj->interruptNestingCount = 0;
  419b66:	f885 102c 	strb.w	r1, [r5, #44]	; 0x2c
    counterObj->timePlib->timerCallbackSet(SYS_TIME_PLIBCallback, 0);
  419b6a:	686b      	ldr	r3, [r5, #4]
  419b6c:	681b      	ldr	r3, [r3, #0]
  419b6e:	4811      	ldr	r0, [pc, #68]	; (419bb4 <.LVL138+0x10>)
  419b70:	4798      	blx	r3

00419b72 <.LVL131>:
    if (counterObj->timePlib->timerPeriodSet != NULL)
  419b72:	686b      	ldr	r3, [r5, #4]
  419b74:	685b      	ldr	r3, [r3, #4]
  419b76:	b10b      	cbz	r3, 419b7c <.LVL131+0xa>
        counterObj->timePlib->timerPeriodSet(counterObj->hwTimerPeriodValue);
  419b78:	69a8      	ldr	r0, [r5, #24]
  419b7a:	4798      	blx	r3
    counterObj->timePlib->timerCompareSet(counterObj->hwTimerCompareValue);
  419b7c:	4c0b      	ldr	r4, [pc, #44]	; (419bac <.LVL138+0x8>)

00419b7e <.LVL133>:
  419b7e:	6863      	ldr	r3, [r4, #4]
  419b80:	68db      	ldr	r3, [r3, #12]
  419b82:	69e0      	ldr	r0, [r4, #28]
  419b84:	4798      	blx	r3
    counterObj->timePlib->timerStart();
  419b86:	6863      	ldr	r3, [r4, #4]
  419b88:	691b      	ldr	r3, [r3, #16]
  419b8a:	4798      	blx	r3

00419b8c <.LBE20>:
    memset(timers, 0, sizeof(timers));
  419b8c:	f44f 72a0 	mov.w	r2, #320	; 0x140
  419b90:	2100      	movs	r1, #0
  419b92:	4809      	ldr	r0, [pc, #36]	; (419bb8 <.LVL138+0x14>)
  419b94:	f000 fd2c 	bl	41a5f0 <.LFE157>

00419b98 <.LVL136>:
    gSystemCounterObj.status = SYS_STATUS_READY;
  419b98:	2302      	movs	r3, #2
  419b9a:	7023      	strb	r3, [r4, #0]
    return (SYS_MODULE_OBJ)&gSystemCounterObj;
  419b9c:	4620      	mov	r0, r4
  419b9e:	bd38      	pop	{r3, r4, r5, pc}

00419ba0 <.LCFI13>:
        return SYS_MODULE_OBJ_INVALID;
  419ba0:	f04f 30ff 	mov.w	r0, #4294967295

00419ba4 <.LVL138>:
}
  419ba4:	4770      	bx	lr
  419ba6:	bf00      	nop
  419ba8:	204176bc 	.word	0x204176bc
  419bac:	20417688 	.word	0x20417688
  419bb0:	11e1a300 	.word	0x11e1a300
  419bb4:	00418cd5 	.word	0x00418cd5
  419bb8:	204173f4 	.word	0x204173f4

Disassembly of section .text.updatewindow%180:

00419bbc <updatewindow>:
{
  419bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

00419bbe <.LCFI2>:
  419bbe:	4607      	mov	r7, r0
  419bc0:	460e      	mov	r6, r1
    state = (struct inflate_state FAR *)strm->state;
  419bc2:	69c4      	ldr	r4, [r0, #28]
    if (state->window == Z_NULL) {
  419bc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
  419bc6:	b343      	cbz	r3, 419c1a <.LVL26>

00419bc8 <.LVL19>:
    if (state->wsize == 0) {
  419bc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  419bca:	b933      	cbnz	r3, 419bda <.LVL19+0x12>
        state->wsize = 1U << state->wbits;
  419bcc:	6a62      	ldr	r2, [r4, #36]	; 0x24
  419bce:	2301      	movs	r3, #1
  419bd0:	4093      	lsls	r3, r2
  419bd2:	62a3      	str	r3, [r4, #40]	; 0x28
        state->wnext = 0;
  419bd4:	2300      	movs	r3, #0
  419bd6:	6323      	str	r3, [r4, #48]	; 0x30
        state->whave = 0;
  419bd8:	62e3      	str	r3, [r4, #44]	; 0x2c
    copy = out - strm->avail_out;
  419bda:	693b      	ldr	r3, [r7, #16]
  419bdc:	1af6      	subs	r6, r6, r3

00419bde <.LVL20>:
    if (copy >= state->wsize) {
  419bde:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  419be0:	42ae      	cmp	r6, r5
  419be2:	d227      	bcs.n	419c34 <.LVL30>
        dist = state->wsize - state->wnext;
  419be4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  419be6:	1aed      	subs	r5, r5, r3

00419be8 <.LVL21>:
  419be8:	42b5      	cmp	r5, r6
  419bea:	bf28      	it	cs
  419bec:	4635      	movcs	r5, r6
        zmemcpy(state->window + state->wnext, strm->next_out - copy, dist);
  419bee:	6b60      	ldr	r0, [r4, #52]	; 0x34
  419bf0:	68f9      	ldr	r1, [r7, #12]
  419bf2:	462a      	mov	r2, r5
  419bf4:	1b89      	subs	r1, r1, r6
  419bf6:	4418      	add	r0, r3
  419bf8:	f7fc fe46 	bl	416888 <memcpy>

00419bfc <.LVL23>:
        if (copy) {
  419bfc:	1b76      	subs	r6, r6, r5

00419bfe <.LVL24>:
  419bfe:	d124      	bne.n	419c4a <.LVL32>
            state->wnext += dist;
  419c00:	6b23      	ldr	r3, [r4, #48]	; 0x30
  419c02:	442b      	add	r3, r5
  419c04:	6323      	str	r3, [r4, #48]	; 0x30
            if (state->wnext == state->wsize) state->wnext = 0;
  419c06:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  419c08:	4293      	cmp	r3, r2
  419c0a:	d029      	beq.n	419c60 <.LVL33+0xa>
            if (state->whave < state->wsize) state->whave += dist;
  419c0c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  419c0e:	428a      	cmp	r2, r1
  419c10:	d929      	bls.n	419c66 <.LVL33+0x10>
  419c12:	440d      	add	r5, r1

00419c14 <.LVL25>:
  419c14:	62e5      	str	r5, [r4, #44]	; 0x2c
    return 0;
  419c16:	2000      	movs	r0, #0
  419c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00419c1a <.LVL26>:
                        ZALLOC(strm, 1U << state->wbits,
  419c1a:	2301      	movs	r3, #1
  419c1c:	6a61      	ldr	r1, [r4, #36]	; 0x24

00419c1e <.LVL27>:
  419c1e:	6a05      	ldr	r5, [r0, #32]
  419c20:	461a      	mov	r2, r3
  419c22:	fa03 f101 	lsl.w	r1, r3, r1
  419c26:	6a80      	ldr	r0, [r0, #40]	; 0x28

00419c28 <.LVL28>:
  419c28:	47a8      	blx	r5

00419c2a <.LVL29>:
        state->window = (unsigned char FAR *)
  419c2a:	6360      	str	r0, [r4, #52]	; 0x34
        if (state->window == Z_NULL) return 1;
  419c2c:	2800      	cmp	r0, #0
  419c2e:	d1cb      	bne.n	419bc8 <.LVL19>
  419c30:	2001      	movs	r0, #1
  419c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00419c34 <.LVL30>:
        zmemcpy(state->window, strm->next_out - state->wsize, state->wsize);
  419c34:	68f9      	ldr	r1, [r7, #12]
  419c36:	462a      	mov	r2, r5
  419c38:	1b49      	subs	r1, r1, r5
  419c3a:	6b60      	ldr	r0, [r4, #52]	; 0x34
  419c3c:	f7fc fe24 	bl	416888 <memcpy>

00419c40 <.LVL31>:
        state->wnext = 0;
  419c40:	2000      	movs	r0, #0
  419c42:	6320      	str	r0, [r4, #48]	; 0x30
        state->whave = state->wsize;
  419c44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  419c46:	62e3      	str	r3, [r4, #44]	; 0x2c
  419c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00419c4a <.LVL32>:
            zmemcpy(state->window, strm->next_out - copy, copy);
  419c4a:	68f9      	ldr	r1, [r7, #12]
  419c4c:	4632      	mov	r2, r6
  419c4e:	1b89      	subs	r1, r1, r6
  419c50:	6b60      	ldr	r0, [r4, #52]	; 0x34
  419c52:	f7fc fe19 	bl	416888 <memcpy>

00419c56 <.LVL33>:
            state->wnext = copy;
  419c56:	6326      	str	r6, [r4, #48]	; 0x30
            state->whave = state->wsize;
  419c58:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  419c5a:	62e3      	str	r3, [r4, #44]	; 0x2c
    return 0;
  419c5c:	2000      	movs	r0, #0
  419c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (state->wnext == state->wsize) state->wnext = 0;
  419c60:	2300      	movs	r3, #0
  419c62:	6323      	str	r3, [r4, #48]	; 0x30
  419c64:	e7d2      	b.n	419c0c <.LVL24+0xe>
    return 0;
  419c66:	2000      	movs	r0, #0
}
  419c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

Disassembly of section .text.fp_div_2d%181:

00419c6a <fp_div_2d>:
{
  419c6a:	b5f0      	push	{r4, r5, r6, r7, lr}

00419c6c <.LCFI71>:
  419c6c:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c

00419c70 <.LCFI72>:
  419c70:	4607      	mov	r7, r0
  419c72:	4614      	mov	r4, r2
  419c74:	461d      	mov	r5, r3
  if (b <= 0) {
  419c76:	1e0e      	subs	r6, r1, #0
  419c78:	dd21      	ble.n	419cbe <.LVL486>

00419c7a <.LBB60>:
    fp_zero(a);
  419c7a:	4668      	mov	r0, sp

00419c7c <.LVL480>:
  419c7c:	f004 ff56 	bl	41eb2c <.LFE154>

00419c80 <.LBE60>:
  if (d != NULL) {
  419c80:	b125      	cbz	r5, 419c8c <.LVL482>
    fp_mod_2d (a, b, &t);
  419c82:	466a      	mov	r2, sp
  419c84:	4631      	mov	r1, r6
  419c86:	4638      	mov	r0, r7
  419c88:	f000 fd00 	bl	41a68c <fp_mod_2d>

00419c8c <.LVL482>:
  fp_copy(a, c);
  419c8c:	4621      	mov	r1, r4
  419c8e:	4638      	mov	r0, r7
  419c90:	f004 fbf6 	bl	41e480 <.LFE185>

00419c94 <.LVL483>:
  if (b >= (int)DIGIT_BIT) {
  419c94:	2e1f      	cmp	r6, #31
  419c96:	dc1a      	bgt.n	419cce <.LVL489+0x2>
  D = (b % DIGIT_BIT);
  419c98:	4273      	negs	r3, r6
  419c9a:	f006 011f 	and.w	r1, r6, #31
  419c9e:	f003 031f 	and.w	r3, r3, #31
  419ca2:	bf58      	it	pl
  419ca4:	4259      	negpl	r1, r3

00419ca6 <.LVL484>:
  if (D != 0) {
  419ca6:	b9e1      	cbnz	r1, 419ce2 <.LVL491>

00419ca8 <.LVL485>:
  fp_clamp (c);
  419ca8:	6822      	ldr	r2, [r4, #0]
  419caa:	b34a      	cbz	r2, 419d00 <.LVL492+0x18>
  419cac:	1e53      	subs	r3, r2, #1
  419cae:	1c51      	adds	r1, r2, #1
  419cb0:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
  419cb4:	bb09      	cbnz	r1, 419cfa <.LVL492+0x12>
  419cb6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  419cba:	3204      	adds	r2, #4
  419cbc:	e016      	b.n	419cec <.LVL492+0x4>

00419cbe <.LVL486>:
    fp_copy (a, c);
  419cbe:	4611      	mov	r1, r2

00419cc0 <.LVL487>:
  419cc0:	f004 fbde 	bl	41e480 <.LFE185>

00419cc4 <.LVL488>:
    if (d != NULL) {
  419cc4:	b31d      	cbz	r5, 419d0e <.LVL493>
      fp_zero (d);
  419cc6:	4628      	mov	r0, r5
  419cc8:	f004 ff30 	bl	41eb2c <.LFE154>

00419ccc <.LVL489>:
  419ccc:	e01f      	b.n	419d0e <.LVL493>
    fp_rshd (c, b / DIGIT_BIT);
  419cce:	4631      	mov	r1, r6
  419cd0:	2e00      	cmp	r6, #0
  419cd2:	bfb8      	it	lt
  419cd4:	f106 011f 	addlt.w	r1, r6, #31
  419cd8:	1149      	asrs	r1, r1, #5
  419cda:	4620      	mov	r0, r4
  419cdc:	f001 fa10 	bl	41b100 <.LFE150>

00419ce0 <.LVL490>:
  419ce0:	e7da      	b.n	419c98 <.LVL483+0x4>

00419ce2 <.LVL491>:
    fp_rshb(c, D);
  419ce2:	4620      	mov	r0, r4
  419ce4:	f002 fa20 	bl	41c128 <.LFE194>

00419ce8 <.LVL492>:
  419ce8:	e7de      	b.n	419ca8 <.LVL485>
  fp_clamp (c);
  419cea:	4603      	mov	r3, r0
  419cec:	b13b      	cbz	r3, 419cfe <.LVL492+0x16>
  419cee:	1e58      	subs	r0, r3, #1
  419cf0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  419cf4:	2900      	cmp	r1, #0
  419cf6:	d0f8      	beq.n	419cea <.LVL492+0x2>
  419cf8:	6023      	str	r3, [r4, #0]
  419cfa:	6863      	ldr	r3, [r4, #4]
  419cfc:	e001      	b.n	419d02 <.LVL492+0x1a>
  419cfe:	6023      	str	r3, [r4, #0]
  419d00:	2300      	movs	r3, #0
  419d02:	6063      	str	r3, [r4, #4]
  if (d != NULL) {
  419d04:	b11d      	cbz	r5, 419d0e <.LVL493>
    fp_copy (&t, d);
  419d06:	4629      	mov	r1, r5
  419d08:	4668      	mov	r0, sp
  419d0a:	f004 fbb9 	bl	41e480 <.LFE185>

00419d0e <.LVL493>:
}
  419d0e:	f50d 7d0b 	add.w	sp, sp, #556	; 0x22c

00419d12 <.LCFI73>:
  419d12:	bdf0      	pop	{r4, r5, r6, r7, pc}

Disassembly of section .text.wc_AesCbcDecrypt%182:

00419d14 <wc_AesCbcDecrypt>:



#ifdef HAVE_AES_DECRYPT
int wc_AesCbcDecrypt(Aes* aes, byte* out, const byte* in, word32 sz)
{
  419d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

00419d16 <.LCFI10>:
  419d16:	4606      	mov	r6, r0
  419d18:	460c      	mov	r4, r1
  419d1a:	4617      	mov	r7, r2
  419d1c:	461d      	mov	r5, r3
    aes_configuration.encrypt_mode = AES_PIC32C_DECRYPTION;
  419d1e:	4b24      	ldr	r3, [pc, #144]	; (419db0 <.LVL66+0x2>)

00419d20 <.LVL49>:
  419d20:	2200      	movs	r2, #0

00419d22 <.LVL50>:
  419d22:	701a      	strb	r2, [r3, #0]
    aes_configuration.key_size = AES_KEY_SIZE_128;
  419d24:	705a      	strb	r2, [r3, #1]
    aes_configuration.start_mode = AES_AUTO_START;
  419d26:	2101      	movs	r1, #1

00419d28 <.LVL51>:
  419d28:	7099      	strb	r1, [r3, #2]
    aes_configuration.opmode = AES_CBC_MODE;
  419d2a:	70d9      	strb	r1, [r3, #3]
    aes_configuration.cfb_size = AES_CFB_SIZE_128;
  419d2c:	711a      	strb	r2, [r3, #4]
    aes_configuration.lod = 0;
  419d2e:	609a      	str	r2, [r3, #8]
    aes_configuration.gtag_en = 0;
  419d30:	60da      	str	r2, [r3, #12]
    aes_configuration.processing_delay = 0;
  419d32:	611a      	str	r2, [r3, #16]

00419d34 <.LBB10>:
    AES_REGS->AES_MR = ul_mode;
  419d34:	4a1f      	ldr	r2, [pc, #124]	; (419db4 <.LVL66+0x6>)
  419d36:	4b20      	ldr	r3, [pc, #128]	; (419db8 <.LVL66+0xa>)
  419d38:	605a      	str	r2, [r3, #4]

00419d3a <.LBE10>:

    AesConfigure(&aes_configuration);
    AesWriteKey(aes->key_ce, aes->keylen);
  419d3a:	f8d0 10f4 	ldr.w	r1, [r0, #244]	; 0xf4
  419d3e:	f500 7096 	add.w	r0, r0, #300	; 0x12c

00419d42 <.LVL54>:
  419d42:	f003 ff69 	bl	41dc18 <.LFE47>

00419d46 <.LVL55>:
    AesWriteIV(aes->iv_ce);
  419d46:	f506 70a6 	add.w	r0, r6, #332	; 0x14c
  419d4a:	f004 fe53 	bl	41e9f4 <.LFE3>

00419d4e <.LVL56>:
    /* set up pointers for input and output buffers */
    const uint32_t *inptr = (const uint32_t *)in;
    uint32_t *outptr = (uint32_t *)out;

    uint32_t block;   /* 16 bytes = 4 32bit block size */
    for (block = 0; block < sz; block += 16)
  419d4e:	b335      	cbz	r5, 419d9e <.LVL64>
  419d50:	f107 0010 	add.w	r0, r7, #16
  419d54:	f104 0110 	add.w	r1, r4, #16
  419d58:	2400      	movs	r4, #0

00419d5a <.LVL57>:
    {
        /* Write the data to be ciphered to the input data registers. */
        AES_REGS->AES_IDATAR[0] = *inptr++;
  419d5a:	4a17      	ldr	r2, [pc, #92]	; (419db8 <.LVL66+0xa>)

00419d5c <.LVL58>:
  419d5c:	f850 3c10 	ldr.w	r3, [r0, #-16]
  419d60:	6413      	str	r3, [r2, #64]	; 0x40
        AES_REGS->AES_IDATAR[1] = *inptr++;
  419d62:	f850 3c0c 	ldr.w	r3, [r0, #-12]
  419d66:	6453      	str	r3, [r2, #68]	; 0x44
        AES_REGS->AES_IDATAR[2] = *inptr++;
  419d68:	f850 3c08 	ldr.w	r3, [r0, #-8]
  419d6c:	6493      	str	r3, [r2, #72]	; 0x48
        AES_REGS->AES_IDATAR[3] = *inptr++;
  419d6e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  419d72:	64d3      	str	r3, [r2, #76]	; 0x4c

        /* Note the blocking here - state machine this? */
        while (!(AES_REGS->AES_ISR & AES_ISR_DATRDY_Msk))  ;
  419d74:	69d3      	ldr	r3, [r2, #28]
  419d76:	f013 0f01 	tst.w	r3, #1
  419d7a:	d0fb      	beq.n	419d74 <.LVL58+0x18>

00419d7c <.LVL59>:

        /* encrypt complete - read out the data */
        *outptr++ = AES_REGS->AES_ODATAR[0];
  419d7c:	6d13      	ldr	r3, [r2, #80]	; 0x50
  419d7e:	f841 3c10 	str.w	r3, [r1, #-16]

00419d82 <.LVL60>:
        *outptr++ = AES_REGS->AES_ODATAR[1];
  419d82:	6d53      	ldr	r3, [r2, #84]	; 0x54
  419d84:	f841 3c0c 	str.w	r3, [r1, #-12]

00419d88 <.LVL61>:
        *outptr++ = AES_REGS->AES_ODATAR[2];
  419d88:	6d93      	ldr	r3, [r2, #88]	; 0x58
  419d8a:	f841 3c08 	str.w	r3, [r1, #-8]

00419d8e <.LVL62>:
        *outptr++ = AES_REGS->AES_ODATAR[3];
  419d8e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
  419d90:	f841 3c04 	str.w	r3, [r1, #-4]
    for (block = 0; block < sz; block += 16)
  419d94:	3410      	adds	r4, #16

00419d96 <.LVL63>:
  419d96:	3010      	adds	r0, #16
  419d98:	3110      	adds	r1, #16
  419d9a:	42a5      	cmp	r5, r4
  419d9c:	d8de      	bhi.n	419d5c <.LVL58>

00419d9e <.LVL64>:
    }

    /* Last IV equals last cipher text */
    wc_AesSetIV(aes, in + sz - 16);
  419d9e:	f1a5 0110 	sub.w	r1, r5, #16
  419da2:	4439      	add	r1, r7
  419da4:	4630      	mov	r0, r6
  419da6:	f003 fe71 	bl	41da8c <.LFE148>

00419daa <.LVL65>:

    return 0;
}
  419daa:	2000      	movs	r0, #0
  419dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00419dae <.LVL66>:
  419dae:	bf00      	nop
  419db0:	204177e0 	.word	0x204177e0
  419db4:	00e01100 	.word	0x00e01100
  419db8:	4006c000 	.word	0x4006c000

Disassembly of section .text._tr_align%183:

00419dbc <_tr_align>:
{
  419dbc:	b570      	push	{r4, r5, r6, lr}

00419dbe <.LBB73>:
    send_bits(s, STATIC_TREES<<1, 3);
  419dbe:	f241 63bc 	movw	r3, #5820	; 0x16bc
  419dc2:	58c3      	ldr	r3, [r0, r3]
  419dc4:	2b0d      	cmp	r3, #13
  419dc6:	dd29      	ble.n	419e1c <.LBB77>

00419dc8 <.LBB74>:
  419dc8:	f241 62b8 	movw	r2, #5816	; 0x16b8
  419dcc:	2102      	movs	r1, #2
  419dce:	fa01 f303 	lsl.w	r3, r1, r3
  419dd2:	5a84      	ldrh	r4, [r0, r2]
  419dd4:	4323      	orrs	r3, r4
  419dd6:	b21b      	sxth	r3, r3
  419dd8:	5283      	strh	r3, [r0, r2]
  419dda:	6885      	ldr	r5, [r0, #8]
  419ddc:	6944      	ldr	r4, [r0, #20]
  419dde:	1c66      	adds	r6, r4, #1
  419de0:	6146      	str	r6, [r0, #20]
  419de2:	552b      	strb	r3, [r5, r4]
  419de4:	6885      	ldr	r5, [r0, #8]
  419de6:	6944      	ldr	r4, [r0, #20]
  419de8:	1c63      	adds	r3, r4, #1
  419dea:	6143      	str	r3, [r0, #20]
  419dec:	5a83      	ldrh	r3, [r0, r2]
  419dee:	0a1b      	lsrs	r3, r3, #8
  419df0:	552b      	strb	r3, [r5, r4]
  419df2:	f241 64bc 	movw	r4, #5820	; 0x16bc
  419df6:	5903      	ldr	r3, [r0, r4]
  419df8:	f1c3 0510 	rsb	r5, r3, #16
  419dfc:	4129      	asrs	r1, r5
  419dfe:	5281      	strh	r1, [r0, r2]
  419e00:	3b0d      	subs	r3, #13
  419e02:	5103      	str	r3, [r0, r4]

00419e04 <.LBB75>:
    send_code(s, END_BLOCK, static_ltree);
  419e04:	f241 63bc 	movw	r3, #5820	; 0x16bc
  419e08:	58c3      	ldr	r3, [r0, r3]
  419e0a:	2b09      	cmp	r3, #9
  419e0c:	dc12      	bgt.n	419e34 <.LBB76>
  419e0e:	3307      	adds	r3, #7
  419e10:	f241 62bc 	movw	r2, #5820	; 0x16bc
  419e14:	5083      	str	r3, [r0, r2]

00419e16 <.LBE75>:
    bi_flush(s);
  419e16:	f002 fd87 	bl	41c928 <.LFE223>

00419e1a <.LVL310>:
  419e1a:	bd70      	pop	{r4, r5, r6, pc}

00419e1c <.LBB77>:
    send_bits(s, STATIC_TREES<<1, 3);
  419e1c:	f241 61b8 	movw	r1, #5816	; 0x16b8
  419e20:	2202      	movs	r2, #2
  419e22:	409a      	lsls	r2, r3
  419e24:	5a44      	ldrh	r4, [r0, r1]
  419e26:	4322      	orrs	r2, r4
  419e28:	5242      	strh	r2, [r0, r1]
  419e2a:	3303      	adds	r3, #3
  419e2c:	f241 62bc 	movw	r2, #5820	; 0x16bc
  419e30:	5083      	str	r3, [r0, r2]
  419e32:	e7e7      	b.n	419e04 <.LBB75>

00419e34 <.LBB76>:
    send_code(s, END_BLOCK, static_ltree);
  419e34:	f241 62b8 	movw	r2, #5816	; 0x16b8
  419e38:	5a84      	ldrh	r4, [r0, r2]
  419e3a:	6881      	ldr	r1, [r0, #8]
  419e3c:	6943      	ldr	r3, [r0, #20]
  419e3e:	1c5d      	adds	r5, r3, #1
  419e40:	6145      	str	r5, [r0, #20]
  419e42:	54cc      	strb	r4, [r1, r3]
  419e44:	6884      	ldr	r4, [r0, #8]
  419e46:	6941      	ldr	r1, [r0, #20]
  419e48:	1c4b      	adds	r3, r1, #1
  419e4a:	6143      	str	r3, [r0, #20]
  419e4c:	5a83      	ldrh	r3, [r0, r2]
  419e4e:	0a1b      	lsrs	r3, r3, #8
  419e50:	5463      	strb	r3, [r4, r1]
  419e52:	f241 61bc 	movw	r1, #5820	; 0x16bc
  419e56:	5843      	ldr	r3, [r0, r1]
  419e58:	2400      	movs	r4, #0
  419e5a:	5284      	strh	r4, [r0, r2]
  419e5c:	3b09      	subs	r3, #9
  419e5e:	5043      	str	r3, [r0, r1]

00419e60 <.LBE76>:
  419e60:	e7d9      	b.n	419e16 <.LBE75>

Disassembly of section .text.fp_mul_2d%184:

00419e62 <fp_mul_2d>:
{
  419e62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

00419e64 <.LCFI61>:
  419e64:	460f      	mov	r7, r1
  419e66:	4614      	mov	r4, r2
   fp_copy(a, c);
  419e68:	4611      	mov	r1, r2

00419e6a <.LVL393>:
  419e6a:	f004 fb09 	bl	41e480 <.LFE185>

00419e6e <.LVL394>:
   if (b >= DIGIT_BIT) {
  419e6e:	2f1f      	cmp	r7, #31
  419e70:	dc12      	bgt.n	419e98 <.LVL399>
   b %= DIGIT_BIT;
  419e72:	427b      	negs	r3, r7
  419e74:	f007 071f 	and.w	r7, r7, #31

00419e78 <.LVL395>:
  419e78:	f003 031f 	and.w	r3, r3, #31
  419e7c:	bf58      	it	pl
  419e7e:	425f      	negpl	r7, r3

00419e80 <.LVL396>:
   if (b != 0) {
  419e80:	b347      	cbz	r7, 419ed4 <.LVL407>

00419e82 <.LVL397>:
      shift = DIGIT_BIT - b;
  419e82:	f1c7 0c20 	rsb	ip, r7, #32

00419e86 <.LVL398>:
      for (x = 0; x < c->used; x++) {
  419e86:	f8d4 e000 	ldr.w	lr, [r4]
  419e8a:	f1be 0f00 	cmp.w	lr, #0
  419e8e:	dd21      	ble.n	419ed4 <.LVL407>
  419e90:	1d21      	adds	r1, r4, #4
  419e92:	2000      	movs	r0, #0
  419e94:	4606      	mov	r6, r0
  419e96:	e00a      	b.n	419eae <.LVL402>

00419e98 <.LVL399>:
      fp_lshd(c, b/DIGIT_BIT);
  419e98:	4639      	mov	r1, r7
  419e9a:	2f00      	cmp	r7, #0
  419e9c:	bfb8      	it	lt
  419e9e:	f107 011f 	addlt.w	r1, r7, #31
  419ea2:	1149      	asrs	r1, r1, #5
  419ea4:	4620      	mov	r0, r4
  419ea6:	f001 f864 	bl	41af72 <.LFE26>

00419eaa <.LVL400>:
  419eaa:	e7e2      	b.n	419e72 <.LVL394+0x4>

00419eac <.LVL401>:
      for (x = 0; x < c->used; x++) {
  419eac:	4610      	mov	r0, r2

00419eae <.LVL402>:
          carrytmp = c->dp[x] >> shift;
  419eae:	684b      	ldr	r3, [r1, #4]
  419eb0:	fa23 f50c 	lsr.w	r5, r3, ip

00419eb4 <.LVL403>:
          c->dp[x] = (c->dp[x] << b) + carry;
  419eb4:	40bb      	lsls	r3, r7
  419eb6:	4433      	add	r3, r6
  419eb8:	f841 3f04 	str.w	r3, [r1, #4]!

00419ebc <.LVL404>:
      for (x = 0; x < c->used; x++) {
  419ebc:	1c42      	adds	r2, r0, #1

00419ebe <.LVL405>:
          carrytmp = c->dp[x] >> shift;
  419ebe:	462e      	mov	r6, r5
      for (x = 0; x < c->used; x++) {
  419ec0:	4572      	cmp	r2, lr
  419ec2:	d1f3      	bne.n	419eac <.LVL401>
      if (carry && x < FP_SIZE) {
  419ec4:	b135      	cbz	r5, 419ed4 <.LVL407>
  419ec6:	2a87      	cmp	r2, #135	; 0x87
  419ec8:	dc04      	bgt.n	419ed4 <.LVL407>
         c->dp[c->used++] = carry;
  419eca:	3002      	adds	r0, #2
  419ecc:	6020      	str	r0, [r4, #0]
  419ece:	3202      	adds	r2, #2

00419ed0 <.LVL406>:
  419ed0:	f844 5022 	str.w	r5, [r4, r2, lsl #2]

00419ed4 <.LVL407>:
   fp_clamp(c);
  419ed4:	6822      	ldr	r2, [r4, #0]
  419ed6:	b1a2      	cbz	r2, 419f02 <.LVL407+0x2e>
  419ed8:	1e53      	subs	r3, r2, #1
  419eda:	1c51      	adds	r1, r2, #1
  419edc:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
  419ee0:	b959      	cbnz	r1, 419efa <.LVL407+0x26>
  419ee2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  419ee6:	3204      	adds	r2, #4
  419ee8:	e000      	b.n	419eec <.LVL407+0x18>
  419eea:	4603      	mov	r3, r0
  419eec:	b143      	cbz	r3, 419f00 <.LVL407+0x2c>
  419eee:	1e58      	subs	r0, r3, #1
  419ef0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  419ef4:	2900      	cmp	r1, #0
  419ef6:	d0f8      	beq.n	419eea <.LVL407+0x16>
  419ef8:	6023      	str	r3, [r4, #0]
  419efa:	6863      	ldr	r3, [r4, #4]
  419efc:	6063      	str	r3, [r4, #4]
}
  419efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  419f00:	6023      	str	r3, [r4, #0]
   fp_clamp(c);
  419f02:	2300      	movs	r3, #0
  419f04:	e7fa      	b.n	419efc <.LVL407+0x28>

Disassembly of section .text.__lshift%185:

00419f08 <__lshift>:
  419f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

00419f0c <.LCFI11>:
  419f0c:	4691      	mov	r9, r2
  419f0e:	690a      	ldr	r2, [r1, #16]

00419f10 <.LVL184>:
  419f10:	688b      	ldr	r3, [r1, #8]
  419f12:	ea4f 1469 	mov.w	r4, r9, asr #5

00419f16 <.LVL185>:
  419f16:	eb04 0802 	add.w	r8, r4, r2
  419f1a:	f108 0501 	add.w	r5, r8, #1
  419f1e:	429d      	cmp	r5, r3
  419f20:	460e      	mov	r6, r1
  419f22:	4607      	mov	r7, r0
  419f24:	6849      	ldr	r1, [r1, #4]

00419f26 <.LVL186>:
  419f26:	dd04      	ble.n	419f32 <.LVL188+0x2>
  419f28:	005b      	lsls	r3, r3, #1

00419f2a <.LVL187>:
  419f2a:	429d      	cmp	r5, r3
  419f2c:	f101 0101 	add.w	r1, r1, #1

00419f30 <.LVL188>:
  419f30:	dcfa      	bgt.n	419f28 <.LVL186+0x2>
  419f32:	4638      	mov	r0, r7

00419f34 <.LVL189>:
  419f34:	f003 f98a 	bl	41d24c <.LFE2>

00419f38 <.LVL190>:
  419f38:	2c00      	cmp	r4, #0
  419f3a:	f100 0314 	add.w	r3, r0, #20

00419f3e <.LVL191>:
  419f3e:	dd06      	ble.n	419f4e <.LVL193+0x4>
  419f40:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  419f44:	2100      	movs	r1, #0

00419f46 <.LVL192>:
  419f46:	f843 1b04 	str.w	r1, [r3], #4

00419f4a <.LVL193>:
  419f4a:	429a      	cmp	r2, r3
  419f4c:	d1fb      	bne.n	419f46 <.LVL192>
  419f4e:	6934      	ldr	r4, [r6, #16]

00419f50 <.LVL194>:
  419f50:	f106 0114 	add.w	r1, r6, #20

00419f54 <.LVL195>:
  419f54:	f019 091f 	ands.w	r9, r9, #31

00419f58 <.LVL196>:
  419f58:	eb01 0e84 	add.w	lr, r1, r4, lsl #2

00419f5c <.LVL197>:
  419f5c:	d01d      	beq.n	419f9a <.LVL208>
  419f5e:	f1c9 0c20 	rsb	ip, r9, #32

00419f62 <.LVL198>:
  419f62:	2200      	movs	r2, #0

00419f64 <.LVL199>:
  419f64:	680c      	ldr	r4, [r1, #0]
  419f66:	fa04 f409 	lsl.w	r4, r4, r9
  419f6a:	4314      	orrs	r4, r2
  419f6c:	f843 4b04 	str.w	r4, [r3], #4

00419f70 <.LVL200>:
  419f70:	f851 2b04 	ldr.w	r2, [r1], #4

00419f74 <.LVL201>:
  419f74:	458e      	cmp	lr, r1
  419f76:	fa22 f20c 	lsr.w	r2, r2, ip

00419f7a <.LVL202>:
  419f7a:	d8f3      	bhi.n	419f64 <.LVL199>
  419f7c:	601a      	str	r2, [r3, #0]
  419f7e:	b10a      	cbz	r2, 419f84 <.LBB24>

00419f80 <.LVL203>:
  419f80:	f108 0502 	add.w	r5, r8, #2

00419f84 <.LBB24>:
  419f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  419f86:	6872      	ldr	r2, [r6, #4]

00419f88 <.LBE24>:
  419f88:	3d01      	subs	r5, #1

00419f8a <.LBB28>:
  419f8a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]

00419f8e <.LBE28>:
  419f8e:	6105      	str	r5, [r0, #16]

00419f90 <.LBB29>:
  419f90:	6031      	str	r1, [r6, #0]
  419f92:	f843 6022 	str.w	r6, [r3, r2, lsl #2]

00419f96 <.LBE29>:
  419f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00419f9a <.LVL208>:
  419f9a:	3b04      	subs	r3, #4

00419f9c <.LVL209>:
  419f9c:	f851 2b04 	ldr.w	r2, [r1], #4

00419fa0 <.LVL210>:
  419fa0:	f843 2f04 	str.w	r2, [r3, #4]!
  419fa4:	458e      	cmp	lr, r1
  419fa6:	d8f9      	bhi.n	419f9c <.LVL209>
  419fa8:	e7ec      	b.n	419f84 <.LBB24>

00419faa <.LFE26>:
  419faa:	bf00      	nop

Disassembly of section .text.__register_exitproc%186:

00419fac <__register_exitproc>:
  419fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

00419fb0 <.LCFI0>:
  419fb0:	4c25      	ldr	r4, [pc, #148]	; (41a048 <.LVL14+0x2>)
  419fb2:	6825      	ldr	r5, [r4, #0]
  419fb4:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148

00419fb8 <.LVL1>:
  419fb8:	4606      	mov	r6, r0
  419fba:	4688      	mov	r8, r1
  419fbc:	4692      	mov	sl, r2
  419fbe:	4699      	mov	r9, r3
  419fc0:	b3c4      	cbz	r4, 41a034 <.LVL11>
  419fc2:	6860      	ldr	r0, [r4, #4]

00419fc4 <.LVL2>:
  419fc4:	281f      	cmp	r0, #31
  419fc6:	dc17      	bgt.n	419ff8 <.LVL6>
  419fc8:	1c43      	adds	r3, r0, #1

00419fca <.LVL3>:
  419fca:	b176      	cbz	r6, 419fea <.LVL5>

00419fcc <.LVL4>:
  419fcc:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  419fd0:	2201      	movs	r2, #1
  419fd2:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  419fd6:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  419fda:	4082      	lsls	r2, r0
  419fdc:	4311      	orrs	r1, r2
  419fde:	2e02      	cmp	r6, #2
  419fe0:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  419fe4:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  419fe8:	d01e      	beq.n	41a028 <.LVL10>

00419fea <.LVL5>:
  419fea:	3002      	adds	r0, #2
  419fec:	6063      	str	r3, [r4, #4]
  419fee:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  419ff2:	2000      	movs	r0, #0
  419ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00419ff8 <.LVL6>:
  419ff8:	4b14      	ldr	r3, [pc, #80]	; (41a04c <.LVL14+0x6>)

00419ffa <.LVL7>:
  419ffa:	b303      	cbz	r3, 41a03e <.LVL13>
  419ffc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  41a000:	f004 fe70 	bl	41ece4 <.LFE0>

0041a004 <.LVL8>:
  41a004:	4604      	mov	r4, r0
  41a006:	b1d0      	cbz	r0, 41a03e <.LVL13>
  41a008:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  41a00c:	2700      	movs	r7, #0
  41a00e:	e880 0088 	stmia.w	r0, {r3, r7}
  41a012:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  41a016:	4638      	mov	r0, r7

0041a018 <.LVL9>:
  41a018:	2301      	movs	r3, #1
  41a01a:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  41a01e:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  41a022:	2e00      	cmp	r6, #0
  41a024:	d0e1      	beq.n	419fea <.LVL5>
  41a026:	e7d1      	b.n	419fcc <.LVL4>

0041a028 <.LVL10>:
  41a028:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  41a02c:	430a      	orrs	r2, r1
  41a02e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  41a032:	e7da      	b.n	419fea <.LVL5>

0041a034 <.LVL11>:
  41a034:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  41a038:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  41a03c:	e7c1      	b.n	419fc2 <.LVL1+0xa>

0041a03e <.LVL13>:
  41a03e:	f04f 30ff 	mov.w	r0, #4294967295
  41a042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0041a046 <.LVL14>:
  41a046:	bf00      	nop
  41a048:	00419834 	.word	0x00419834
  41a04c:	0041ece5 	.word	0x0041ece5

Disassembly of section .text.pqdownheap%187:

0041a050 <pqdownheap>:
{
  41a050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0041a054 <.LCFI2>:
    int v = s->heap[k];
  41a054:	eb00 0382 	add.w	r3, r0, r2, lsl #2
  41a058:	f8d3 8b5c 	ldr.w	r8, [r3, #2908]	; 0xb5c
    int j = k << 1;  /* left son of k */
  41a05c:	0053      	lsls	r3, r2, #1

0041a05e <.LVL6>:
    while (j <= s->heap_len) {
  41a05e:	f241 4450 	movw	r4, #5200	; 0x1450
  41a062:	5907      	ldr	r7, [r0, r4]
  41a064:	42bb      	cmp	r3, r7
  41a066:	dc3e      	bgt.n	41a0e6 <.LVL13>
        if (smaller(tree, v, s->heap[j], s->depth)) break;
  41a068:	eb01 0e88 	add.w	lr, r1, r8, lsl #2
            smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {
  41a06c:	f241 4c58 	movw	ip, #5208	; 0x1458
        if (smaller(tree, v, s->heap[j], s->depth)) break;
  41a070:	eb00 0908 	add.w	r9, r0, r8
  41a074:	44e1      	add	r9, ip
  41a076:	e01d      	b.n	41a0b4 <.LVL11>
            smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {
  41a078:	4482      	add	sl, r0
  41a07a:	4483      	add	fp, r0
  41a07c:	f81a 600c 	ldrb.w	r6, [sl, ip]
  41a080:	f81b 500c 	ldrb.w	r5, [fp, ip]
  41a084:	42ae      	cmp	r6, r5
  41a086:	bf88      	it	hi
  41a088:	461c      	movhi	r4, r3
  41a08a:	e000      	b.n	41a08e <.LVL7>
  41a08c:	461c      	mov	r4, r3

0041a08e <.LVL7>:
        if (smaller(tree, v, s->heap[j], s->depth)) break;
  41a08e:	f8be 6000 	ldrh.w	r6, [lr]
  41a092:	eb00 0384 	add.w	r3, r0, r4, lsl #2
  41a096:	f8d3 3b5c 	ldr.w	r3, [r3, #2908]	; 0xb5c
  41a09a:	f831 5023 	ldrh.w	r5, [r1, r3, lsl #2]
  41a09e:	42ae      	cmp	r6, r5
  41a0a0:	d321      	bcc.n	41a0e6 <.LVL13>
  41a0a2:	d019      	beq.n	41a0d8 <.LVL12>
        s->heap[k] = s->heap[j];  k = j;
  41a0a4:	eb00 0282 	add.w	r2, r0, r2, lsl #2

0041a0a8 <.LVL8>:
  41a0a8:	f8c2 3b5c 	str.w	r3, [r2, #2908]	; 0xb5c

0041a0ac <.LVL9>:
        j <<= 1;
  41a0ac:	0063      	lsls	r3, r4, #1

0041a0ae <.LVL10>:
  41a0ae:	4622      	mov	r2, r4
    while (j <= s->heap_len) {
  41a0b0:	42bb      	cmp	r3, r7
  41a0b2:	dc18      	bgt.n	41a0e6 <.LVL13>

0041a0b4 <.LVL11>:
        if (j < s->heap_len &&
  41a0b4:	429f      	cmp	r7, r3
  41a0b6:	dde9      	ble.n	41a08c <.LVL6+0x2e>
            smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {
  41a0b8:	1c5c      	adds	r4, r3, #1
  41a0ba:	eb00 0583 	add.w	r5, r0, r3, lsl #2
  41a0be:	f8d5 ab60 	ldr.w	sl, [r5, #2912]	; 0xb60
  41a0c2:	f831 602a 	ldrh.w	r6, [r1, sl, lsl #2]
  41a0c6:	f8d5 bb5c 	ldr.w	fp, [r5, #2908]	; 0xb5c
  41a0ca:	f831 502b 	ldrh.w	r5, [r1, fp, lsl #2]
        if (j < s->heap_len &&
  41a0ce:	42ae      	cmp	r6, r5
  41a0d0:	d3dd      	bcc.n	41a08e <.LVL7>
            smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {
  41a0d2:	d0d1      	beq.n	41a078 <.LVL6+0x1a>
  41a0d4:	461c      	mov	r4, r3
  41a0d6:	e7da      	b.n	41a08e <.LVL7>

0041a0d8 <.LVL12>:
        if (smaller(tree, v, s->heap[j], s->depth)) break;
  41a0d8:	18c5      	adds	r5, r0, r3
  41a0da:	f899 6000 	ldrb.w	r6, [r9]
  41a0de:	f815 500c 	ldrb.w	r5, [r5, ip]
  41a0e2:	42ae      	cmp	r6, r5
  41a0e4:	d8de      	bhi.n	41a0a4 <.LVL7+0x16>

0041a0e6 <.LVL13>:
    s->heap[k] = v;
  41a0e6:	eb00 0282 	add.w	r2, r0, r2, lsl #2

0041a0ea <.LVL14>:
  41a0ea:	f8c2 8b5c 	str.w	r8, [r2, #2908]	; 0xb5c
  41a0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section .text.mp_read_radix%188:

0041a0f4 <mp_read_radix>:
  return FP_OKAY;
}

/* fast math conversion */
int mp_read_radix(mp_int *a, const char *str, int radix)
{
  41a0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

0041a0f8 <.LCFI142>:
  41a0f8:	4606      	mov	r6, r0
  41a0fa:	4688      	mov	r8, r1
  41a0fc:	4617      	mov	r7, r2

0041a0fe <.LBB194>:
  fp_zero (a);
  41a0fe:	f004 fd15 	bl	41eb2c <.LFE154>

0041a102 <.LVL866>:
  if (radix < 2 || radix > 64) {
  41a102:	1ebb      	subs	r3, r7, #2
  41a104:	2b3e      	cmp	r3, #62	; 0x3e
  41a106:	d83f      	bhi.n	41a188 <.LVL883>
  41a108:	46b9      	mov	r9, r7
  if (*str == '-') {
  41a10a:	f898 3000 	ldrb.w	r3, [r8]
  41a10e:	2b2d      	cmp	r3, #45	; 0x2d
  41a110:	d00b      	beq.n	41a12a <.LVL869>
    neg = FP_ZPOS;
  41a112:	f04f 0a00 	mov.w	sl, #0

0041a116 <.LVL867>:
  while (*str) {
  41a116:	f898 5000 	ldrb.w	r5, [r8]
  41a11a:	bb3d      	cbnz	r5, 41a16c <.LVL879>

0041a11c <.LVL868>:
  if (fp_iszero(a) != FP_YES) {
  41a11c:	6830      	ldr	r0, [r6, #0]
  41a11e:	b3a8      	cbz	r0, 41a18c <.LBE194>
     a->sign = neg;
  41a120:	f8c6 a004 	str.w	sl, [r6, #4]
  return FP_OKAY;
  41a124:	2000      	movs	r0, #0
  41a126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0041a12a <.LVL869>:
    ++str;
  41a12a:	f108 0801 	add.w	r8, r8, #1

0041a12e <.LVL870>:
    neg = FP_NEG;
  41a12e:	f04f 0a01 	mov.w	sl, #1
  41a132:	e7f0      	b.n	41a116 <.LVL867>

0041a134 <.LBB196>:
    ch = (char)((radix <= 36) ? XTOUPPER((unsigned char)*str) : *str);
  41a134:	f004 fb34 	bl	41e7a0 <.LFE152>

0041a138 <.LVL872>:
  41a138:	4428      	add	r0, r5
  41a13a:	7843      	ldrb	r3, [r0, #1]
  41a13c:	f003 0303 	and.w	r3, r3, #3
  41a140:	2b02      	cmp	r3, #2
  41a142:	bf08      	it	eq
  41a144:	3d20      	subeq	r5, #32

0041a146 <.LBE196>:
  41a146:	b2ed      	uxtb	r5, r5
  41a148:	e012      	b.n	41a170 <.LVL880>

0041a14a <.LVL874>:
    for (y = 0; y < 64; y++) {
  41a14a:	2400      	movs	r4, #0

0041a14c <.LVL875>:
    if (y < radix) {
  41a14c:	42a7      	cmp	r7, r4
  41a14e:	dde5      	ble.n	41a11c <.LVL868>
      fp_mul_d (a, (fp_digit) radix, a);
  41a150:	4632      	mov	r2, r6
  41a152:	4649      	mov	r1, r9
  41a154:	4630      	mov	r0, r6
  41a156:	f7ff f999 	bl	41948c <.LFE167>

0041a15a <.LVL876>:
      fp_add_d (a, (fp_digit) y, a);
  41a15a:	4632      	mov	r2, r6
  41a15c:	4621      	mov	r1, r4
  41a15e:	4630      	mov	r0, r6
  41a160:	f003 fff3 	bl	41e14a <.LFE38>

0041a164 <.LVL877>:
  while (*str) {
  41a164:	f818 5f01 	ldrb.w	r5, [r8, #1]!

0041a168 <.LVL878>:
  41a168:	2d00      	cmp	r5, #0
  41a16a:	d0d7      	beq.n	41a11c <.LVL868>

0041a16c <.LVL879>:
    ch = (char)((radix <= 36) ? XTOUPPER((unsigned char)*str) : *str);
  41a16c:	2f24      	cmp	r7, #36	; 0x24
  41a16e:	dde1      	ble.n	41a134 <.LBB196>

0041a170 <.LVL880>:
      if (ch == fp_s_rmap[y]) {
  41a170:	2d30      	cmp	r5, #48	; 0x30
  41a172:	d0ea      	beq.n	41a14a <.LVL874>
  41a174:	4b06      	ldr	r3, [pc, #24]	; (41a190 <.LVL885>)
    for (y = 0; y < 64; y++) {
  41a176:	2401      	movs	r4, #1

0041a178 <.LVL881>:
      if (ch == fp_s_rmap[y]) {
  41a178:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  41a17c:	42aa      	cmp	r2, r5
  41a17e:	d0e5      	beq.n	41a14c <.LVL875>
    for (y = 0; y < 64; y++) {
  41a180:	3401      	adds	r4, #1
  41a182:	2c40      	cmp	r4, #64	; 0x40
  41a184:	d1f8      	bne.n	41a178 <.LVL881>
  41a186:	e7e1      	b.n	41a14c <.LVL875>

0041a188 <.LVL883>:
    return FP_VAL;
  41a188:	f04f 30ff 	mov.w	r0, #4294967295

0041a18c <.LBE194>:
    return fp_read_radix(a, str, radix);
}
  41a18c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0041a190 <.LVL885>:
  41a190:	0041c6dc 	.word	0x0041c6dc

Disassembly of section .text%189:

0041a1a0 <memchr>:
  41a1a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  41a1a4:	2a10      	cmp	r2, #16
  41a1a6:	db2b      	blt.n	41a200 <memchr+0x60>
  41a1a8:	f010 0f07 	tst.w	r0, #7
  41a1ac:	d008      	beq.n	41a1c0 <memchr+0x20>
  41a1ae:	f810 3b01 	ldrb.w	r3, [r0], #1
  41a1b2:	3a01      	subs	r2, #1
  41a1b4:	428b      	cmp	r3, r1
  41a1b6:	d02d      	beq.n	41a214 <memchr+0x74>
  41a1b8:	f010 0f07 	tst.w	r0, #7
  41a1bc:	b342      	cbz	r2, 41a210 <memchr+0x70>
  41a1be:	d1f6      	bne.n	41a1ae <memchr+0xe>
  41a1c0:	b4f0      	push	{r4, r5, r6, r7}
  41a1c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  41a1c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  41a1ca:	f022 0407 	bic.w	r4, r2, #7
  41a1ce:	f07f 0700 	mvns.w	r7, #0
  41a1d2:	2300      	movs	r3, #0
  41a1d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  41a1d8:	3c08      	subs	r4, #8
  41a1da:	ea85 0501 	eor.w	r5, r5, r1
  41a1de:	ea86 0601 	eor.w	r6, r6, r1
  41a1e2:	fa85 f547 	uadd8	r5, r5, r7
  41a1e6:	faa3 f587 	sel	r5, r3, r7
  41a1ea:	fa86 f647 	uadd8	r6, r6, r7
  41a1ee:	faa5 f687 	sel	r6, r5, r7
  41a1f2:	b98e      	cbnz	r6, 41a218 <memchr+0x78>
  41a1f4:	d1ee      	bne.n	41a1d4 <memchr+0x34>
  41a1f6:	bcf0      	pop	{r4, r5, r6, r7}
  41a1f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  41a1fc:	f002 0207 	and.w	r2, r2, #7
  41a200:	b132      	cbz	r2, 41a210 <memchr+0x70>
  41a202:	f810 3b01 	ldrb.w	r3, [r0], #1
  41a206:	3a01      	subs	r2, #1
  41a208:	ea83 0301 	eor.w	r3, r3, r1
  41a20c:	b113      	cbz	r3, 41a214 <memchr+0x74>
  41a20e:	d1f8      	bne.n	41a202 <memchr+0x62>
  41a210:	2000      	movs	r0, #0
  41a212:	4770      	bx	lr
  41a214:	3801      	subs	r0, #1
  41a216:	4770      	bx	lr
  41a218:	2d00      	cmp	r5, #0
  41a21a:	bf06      	itte	eq
  41a21c:	4635      	moveq	r5, r6
  41a21e:	3803      	subeq	r0, #3
  41a220:	3807      	subne	r0, #7
  41a222:	f015 0f01 	tst.w	r5, #1
  41a226:	d107      	bne.n	41a238 <memchr+0x98>
  41a228:	3001      	adds	r0, #1
  41a22a:	f415 7f80 	tst.w	r5, #256	; 0x100
  41a22e:	bf02      	ittt	eq
  41a230:	3001      	addeq	r0, #1
  41a232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  41a236:	3001      	addeq	r0, #1
  41a238:	bcf0      	pop	{r4, r5, r6, r7}
  41a23a:	3801      	subs	r0, #1
  41a23c:	4770      	bx	lr

0041a23e <L0>:
  41a23e:	bf00      	nop

Disassembly of section .text.__pow5mult%190:

0041a240 <__pow5mult>:
  41a240:	f012 0303 	ands.w	r3, r2, #3
  41a244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0041a248 <.LCFI10>:
  41a248:	4614      	mov	r4, r2

0041a24a <.LVL152>:
  41a24a:	4607      	mov	r7, r0
  41a24c:	d12e      	bne.n	41a2ac <.LVL173>
  41a24e:	460d      	mov	r5, r1

0041a250 <.LVL153>:
  41a250:	10a4      	asrs	r4, r4, #2

0041a252 <.LVL154>:
  41a252:	d01c      	beq.n	41a28e <.LVL165>
  41a254:	6cbe      	ldr	r6, [r7, #72]	; 0x48

0041a256 <.LVL155>:
  41a256:	b396      	cbz	r6, 41a2be <.LBB20>
  41a258:	07e3      	lsls	r3, r4, #31
  41a25a:	f04f 0800 	mov.w	r8, #0
  41a25e:	d406      	bmi.n	41a26e <.LVL161>

0041a260 <.LVL156>:
  41a260:	1064      	asrs	r4, r4, #1

0041a262 <.LVL157>:
  41a262:	d014      	beq.n	41a28e <.LVL165>

0041a264 <.LVL158>:
  41a264:	6830      	ldr	r0, [r6, #0]

0041a266 <.LVL159>:
  41a266:	b1a8      	cbz	r0, 41a294 <.LVL166>
  41a268:	4606      	mov	r6, r0

0041a26a <.LVL160>:
  41a26a:	07e3      	lsls	r3, r4, #31
  41a26c:	d5f8      	bpl.n	41a260 <.LVL156>

0041a26e <.LVL161>:
  41a26e:	4632      	mov	r2, r6
  41a270:	4629      	mov	r1, r5
  41a272:	4638      	mov	r0, r7
  41a274:	f7fc ffb4 	bl	4171e0 <.LBE11>

0041a278 <.LBB16>:
  41a278:	b1b5      	cbz	r5, 41a2a8 <.LVL171>
  41a27a:	686a      	ldr	r2, [r5, #4]
  41a27c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c

0041a27e <.LBE16>:
  41a27e:	1064      	asrs	r4, r4, #1

0041a280 <.LBB19>:
  41a280:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  41a284:	6029      	str	r1, [r5, #0]
  41a286:	f843 5022 	str.w	r5, [r3, r2, lsl #2]

0041a28a <.LBE19>:
  41a28a:	4605      	mov	r5, r0

0041a28c <.LVL164>:
  41a28c:	d1ea      	bne.n	41a264 <.LVL158>

0041a28e <.LVL165>:
  41a28e:	4628      	mov	r0, r5
  41a290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041a294 <.LVL166>:
  41a294:	4632      	mov	r2, r6
  41a296:	4631      	mov	r1, r6
  41a298:	4638      	mov	r0, r7

0041a29a <.LVL167>:
  41a29a:	f7fc ffa1 	bl	4171e0 <.LBE11>

0041a29e <.LVL168>:
  41a29e:	6030      	str	r0, [r6, #0]

0041a2a0 <.LVL169>:
  41a2a0:	f8c0 8000 	str.w	r8, [r0]
  41a2a4:	4606      	mov	r6, r0

0041a2a6 <.LVL170>:
  41a2a6:	e7e0      	b.n	41a26a <.LVL160>

0041a2a8 <.LVL171>:
  41a2a8:	4605      	mov	r5, r0

0041a2aa <.LVL172>:
  41a2aa:	e7d9      	b.n	41a260 <.LVL156>

0041a2ac <.LVL173>:
  41a2ac:	1e5a      	subs	r2, r3, #1

0041a2ae <.LVL174>:
  41a2ae:	4d0b      	ldr	r5, [pc, #44]	; (41a2dc <.LVL182+0x6>)
  41a2b0:	2300      	movs	r3, #0

0041a2b2 <.LVL175>:
  41a2b2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]

0041a2b6 <.LVL176>:
  41a2b6:	f001 f8e7 	bl	41b488 <__multadd>

0041a2ba <.LVL177>:
  41a2ba:	4605      	mov	r5, r0

0041a2bc <.LVL178>:
  41a2bc:	e7c8      	b.n	41a250 <.LVL153>

0041a2be <.LBB20>:
  41a2be:	2101      	movs	r1, #1
  41a2c0:	4638      	mov	r0, r7
  41a2c2:	f002 ffc3 	bl	41d24c <.LFE2>

0041a2c6 <.LVL180>:
  41a2c6:	f240 2171 	movw	r1, #625	; 0x271
  41a2ca:	2201      	movs	r2, #1

0041a2cc <.LBE20>:
  41a2cc:	2300      	movs	r3, #0

0041a2ce <.LBB23>:
  41a2ce:	6141      	str	r1, [r0, #20]
  41a2d0:	6102      	str	r2, [r0, #16]
  41a2d2:	4606      	mov	r6, r0

0041a2d4 <.LBE23>:
  41a2d4:	64b8      	str	r0, [r7, #72]	; 0x48

0041a2d6 <.LVL182>:
  41a2d6:	6003      	str	r3, [r0, #0]
  41a2d8:	e7be      	b.n	41a258 <.LVL155+0x2>
  41a2da:	bf00      	nop
  41a2dc:	0041ee14 	.word	0x0041ee14

Disassembly of section .text.wc_Des3_CbcEncrypt%191:

0041a2e0 <wc_Des3_CbcEncrypt>:
        if (des == NULL || out == NULL || in == NULL) {
  41a2e0:	2a00      	cmp	r2, #0
  41a2e2:	bf18      	it	ne
  41a2e4:	2900      	cmpne	r1, #0
  41a2e6:	d047      	beq.n	41a378 <.LCFI14>
    {
  41a2e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

0041a2ec <.LCFI13>:
  41a2ec:	4680      	mov	r8, r0
  41a2ee:	460f      	mov	r7, r1
        if (des == NULL || out == NULL || in == NULL) {
  41a2f0:	b3d8      	cbz	r0, 41a36a <.LVL222>
        blocks = sz / DES_BLOCK_SIZE;
  41a2f2:	08db      	lsrs	r3, r3, #3

0041a2f4 <.LVL208>:
        while (blocks--) {
  41a2f4:	f103 39ff 	add.w	r9, r3, #4294967295

0041a2f8 <.LVL209>:
  41a2f8:	b3db      	cbz	r3, 41a372 <.LVL224>
  41a2fa:	1e56      	subs	r6, r2, #1
            xorbuf((byte*)des->reg, in, DES_BLOCK_SIZE);
  41a2fc:	f500 75c0 	add.w	r5, r0, #384	; 0x180
  41a300:	f200 1487 	addw	r4, r0, #391	; 0x187
  41a304:	e01d      	b.n	41a342 <.LBB279>

0041a306 <.LBB273>:
    for (i = 0; i < n; i++) r[i] ^= a[i];
  41a306:	f8d8 3180 	ldr.w	r3, [r8, #384]	; 0x180
  41a30a:	f8d6 2001 	ldr.w	r2, [r6, #1]
  41a30e:	4053      	eors	r3, r2
  41a310:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180

0041a314 <.LVL211>:
  41a314:	f8d8 3184 	ldr.w	r3, [r8, #388]	; 0x184
  41a318:	f8d6 2005 	ldr.w	r2, [r6, #5]
  41a31c:	4053      	eors	r3, r2
  41a31e:	f8c8 3184 	str.w	r3, [r8, #388]	; 0x184

0041a322 <.LBE273>:
            Des3ProcessBlock(des, (byte*)des->reg, (byte*)des->reg);
  41a322:	462a      	mov	r2, r5
  41a324:	4629      	mov	r1, r5
  41a326:	4640      	mov	r0, r8
  41a328:	f7fc fbe0 	bl	416aec <.LFE19>

0041a32c <.LVL213>:
            XMEMCPY(out, des->reg, DES_BLOCK_SIZE);
  41a32c:	682a      	ldr	r2, [r5, #0]
  41a32e:	686b      	ldr	r3, [r5, #4]
  41a330:	603a      	str	r2, [r7, #0]
  41a332:	607b      	str	r3, [r7, #4]
            out += DES_BLOCK_SIZE;
  41a334:	3708      	adds	r7, #8

0041a336 <.LVL214>:
        while (blocks--) {
  41a336:	f109 39ff 	add.w	r9, r9, #4294967295
  41a33a:	3608      	adds	r6, #8

0041a33c <.LVL216>:
  41a33c:	f1b9 3fff 	cmp.w	r9, #4294967295
  41a340:	d010      	beq.n	41a364 <.LBE277>

0041a342 <.LBB279>:
    if (((wolfssl_word)buf | (wolfssl_word)mask | count) % WOLFSSL_WORD_SIZE == 0)
  41a342:	1c73      	adds	r3, r6, #1

0041a344 <.LVL218>:
  41a344:	432b      	orrs	r3, r5

0041a346 <.LVL219>:
  41a346:	f013 0f03 	tst.w	r3, #3
  41a34a:	d0dc      	beq.n	41a306 <.LBB273>
  41a34c:	f208 137f 	addw	r3, r8, #383	; 0x17f
  41a350:	4631      	mov	r1, r6

0041a352 <.LBB277>:
        for (i = 0; i < count; i++) b[i] ^= m[i];
  41a352:	785a      	ldrb	r2, [r3, #1]
  41a354:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  41a358:	4042      	eors	r2, r0
  41a35a:	f803 2f01 	strb.w	r2, [r3, #1]!
  41a35e:	42a3      	cmp	r3, r4
  41a360:	d1f7      	bne.n	41a352 <.LBB277>
  41a362:	e7de      	b.n	41a322 <.LBE273>

0041a364 <.LBE277>:
        return 0;
  41a364:	2000      	movs	r0, #0
  41a366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0041a36a <.LVL222>:
            return BAD_FUNC_ARG;
  41a36a:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041a36e <.LVL223>:
  41a36e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0041a372 <.LVL224>:
        return 0;
  41a372:	2000      	movs	r0, #0

0041a374 <.LVL225>:
    }
  41a374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0041a378 <.LCFI14>:
            return BAD_FUNC_ARG;
  41a378:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041a37c <.LVL227>:
    }
  41a37c:	4770      	bx	lr

Disassembly of section .text.wc_Hash%192:

0041a37e <wc_Hash>:
}

/* Generic Hashing Wrapper */
int wc_Hash(enum wc_HashType hash_type, const byte* data,
    word32 data_len, byte* hash, word32 hash_len)
{
  41a37e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041a380 <.LCFI27>:
  41a380:	4604      	mov	r4, r0
  41a382:	460d      	mov	r5, r1
  41a384:	4616      	mov	r6, r2
  41a386:	461f      	mov	r7, r3

0041a388 <.LVL130>:
    int ret = HASH_TYPE_E; /* Default to hash type error */
    word32 dig_size;

    /* Validate hash buffer size */
    dig_size = wc_HashGetDigestSize(hash_type);
  41a388:	f003 fc9a 	bl	41dcc0 <wc_HashGetDigestSize>

0041a38c <.LVL131>:
    if (hash_len < dig_size) {
  41a38c:	9b06      	ldr	r3, [sp, #24]
  41a38e:	4298      	cmp	r0, r3
  41a390:	d83d      	bhi.n	41a40e <.LVL152>
    (void)data;
    (void)data_len;
    (void)hash;
    (void)hash_len;

    switch(hash_type)
  41a392:	1ee0      	subs	r0, r4, #3

0041a394 <.LVL132>:
  41a394:	2806      	cmp	r0, #6
  41a396:	d805      	bhi.n	41a3a4 <.LVL132+0x10>
  41a398:	e8df f000 	tbb	[pc, r0]
  41a39c:	1c150e07 	.word	0x1c150e07
  41a3a0:	2a23      	.short	0x2a23
  41a3a2:	3c          	.byte	0x3c
  41a3a3:	00          	.byte	0x00
        /* Not Supported */
        case WC_HASH_TYPE_MD2:
        case WC_HASH_TYPE_MD4:
        case WC_HASH_TYPE_NONE:
        default:
            ret = BAD_FUNC_ARG;
  41a3a4:	f06f 03ac 	mvn.w	r3, #172	; 0xac
  41a3a8:	e036      	b.n	41a418 <.LVL154>
            ret = wc_Md5Hash(data, data_len, hash);
  41a3aa:	463a      	mov	r2, r7
  41a3ac:	4631      	mov	r1, r6
  41a3ae:	4628      	mov	r0, r5
  41a3b0:	f003 fca1 	bl	41dcf6 <.LFE155>

0041a3b4 <.LVL133>:
  41a3b4:	4603      	mov	r3, r0

0041a3b6 <.LVL134>:
            break;
  41a3b6:	e02f      	b.n	41a418 <.LVL154>

0041a3b8 <.LVL135>:
            ret = wc_ShaHash(data, data_len, hash);
  41a3b8:	463a      	mov	r2, r7
  41a3ba:	4631      	mov	r1, r6
  41a3bc:	4628      	mov	r0, r5
  41a3be:	f003 fa74 	bl	41d8aa <.LFE70>

0041a3c2 <.LVL136>:
  41a3c2:	4603      	mov	r3, r0

0041a3c4 <.LVL137>:
            break;
  41a3c4:	e028      	b.n	41a418 <.LVL154>

0041a3c6 <.LVL138>:
            ret = wc_Sha256Hash(data, data_len, hash);
  41a3c6:	463a      	mov	r2, r7
  41a3c8:	4631      	mov	r1, r6
  41a3ca:	4628      	mov	r0, r5
  41a3cc:	f003 f8a6 	bl	41d51c <.LFE144>

0041a3d0 <.LVL139>:
  41a3d0:	4603      	mov	r3, r0

0041a3d2 <.LVL140>:
            break;
  41a3d2:	e021      	b.n	41a418 <.LVL154>

0041a3d4 <.LVL141>:
            ret = wc_Sha384Hash(data, data_len, hash);
  41a3d4:	463a      	mov	r2, r7
  41a3d6:	4631      	mov	r1, r6
  41a3d8:	4628      	mov	r0, r5
  41a3da:	f003 fcc2 	bl	41dd62 <.LFE163>

0041a3de <.LVL142>:
  41a3de:	4603      	mov	r3, r0

0041a3e0 <.LVL143>:
            break;
  41a3e0:	e01a      	b.n	41a418 <.LVL154>

0041a3e2 <.LVL144>:
            ret = wc_Sha512Hash(data, data_len, hash);
  41a3e2:	463a      	mov	r2, r7
  41a3e4:	4631      	mov	r1, r6
  41a3e6:	4628      	mov	r0, r5
  41a3e8:	f003 fca0 	bl	41dd2c <.LFE160>

0041a3ec <.LVL145>:
  41a3ec:	4603      	mov	r3, r0

0041a3ee <.LVL146>:
            break;
  41a3ee:	e013      	b.n	41a418 <.LVL154>

0041a3f0 <.LVL147>:
            ret = wc_Md5Hash(data, data_len, hash);
  41a3f0:	463a      	mov	r2, r7
  41a3f2:	4631      	mov	r1, r6
  41a3f4:	4628      	mov	r0, r5
  41a3f6:	f003 fc7e 	bl	41dcf6 <.LFE155>

0041a3fa <.LVL148>:
            if (ret == 0) {
  41a3fa:	4603      	mov	r3, r0
  41a3fc:	b960      	cbnz	r0, 41a418 <.LVL154>
                ret = wc_ShaHash(data, data_len, &hash[MD5_DIGEST_SIZE]);
  41a3fe:	f107 0210 	add.w	r2, r7, #16
  41a402:	4631      	mov	r1, r6
  41a404:	4628      	mov	r0, r5

0041a406 <.LVL149>:
  41a406:	f003 fa50 	bl	41d8aa <.LFE70>

0041a40a <.LVL150>:
  41a40a:	4603      	mov	r3, r0

0041a40c <.LVL151>:
  41a40c:	e004      	b.n	41a418 <.LVL154>

0041a40e <.LVL152>:
        return BUFFER_E;
  41a40e:	f06f 0383 	mvn.w	r3, #131	; 0x83
  41a412:	e001      	b.n	41a418 <.LVL154>

0041a414 <.LVL153>:
    int ret = HASH_TYPE_E; /* Default to hash type error */
  41a414:	f06f 03e7 	mvn.w	r3, #231	; 0xe7

0041a418 <.LVL154>:
            break;
    }
    return ret;
}
  41a418:	4618      	mov	r0, r3
  41a41a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

Disassembly of section .text.deflateEnd%193:

0041a41c <deflateEnd>:
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  41a41c:	2800      	cmp	r0, #0
  41a41e:	d041      	beq.n	41a4a4 <.LCFI31>
{
  41a420:	b538      	push	{r3, r4, r5, lr}

0041a422 <.LCFI30>:
  41a422:	4604      	mov	r4, r0
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  41a424:	69c3      	ldr	r3, [r0, #28]
  41a426:	2b00      	cmp	r3, #0
  41a428:	d03f      	beq.n	41a4aa <.LCFI32>
    status = strm->state->status;
  41a42a:	685d      	ldr	r5, [r3, #4]

0041a42c <.LVL554>:
    if (status != INIT_STATE &&
  41a42c:	f1a5 012a 	sub.w	r1, r5, #42	; 0x2a
  41a430:	291f      	cmp	r1, #31
  41a432:	d827      	bhi.n	41a484 <.LVL561>
  41a434:	4a1e      	ldr	r2, [pc, #120]	; (41a4b0 <.LVL567>)
  41a436:	40ca      	lsrs	r2, r1
  41a438:	f012 0f01 	tst.w	r2, #1
  41a43c:	d022      	beq.n	41a484 <.LVL561>
    TRY_FREE(strm, strm->state->pending_buf);
  41a43e:	6899      	ldr	r1, [r3, #8]
  41a440:	b111      	cbz	r1, 41a448 <.LVL555+0x2>
  41a442:	6a63      	ldr	r3, [r4, #36]	; 0x24
  41a444:	6aa0      	ldr	r0, [r4, #40]	; 0x28

0041a446 <.LVL555>:
  41a446:	4798      	blx	r3
    TRY_FREE(strm, strm->state->head);
  41a448:	69e3      	ldr	r3, [r4, #28]
  41a44a:	6c59      	ldr	r1, [r3, #68]	; 0x44
  41a44c:	b111      	cbz	r1, 41a454 <.LVL555+0xe>
  41a44e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  41a450:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  41a452:	4798      	blx	r3
    TRY_FREE(strm, strm->state->prev);
  41a454:	69e3      	ldr	r3, [r4, #28]
  41a456:	6c19      	ldr	r1, [r3, #64]	; 0x40
  41a458:	b111      	cbz	r1, 41a460 <.LVL555+0x1a>
  41a45a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  41a45c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  41a45e:	4798      	blx	r3
    TRY_FREE(strm, strm->state->window);
  41a460:	69e3      	ldr	r3, [r4, #28]
  41a462:	6b99      	ldr	r1, [r3, #56]	; 0x38
  41a464:	b111      	cbz	r1, 41a46c <.LVL555+0x26>
  41a466:	6a63      	ldr	r3, [r4, #36]	; 0x24
  41a468:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  41a46a:	4798      	blx	r3
    ZFREE(strm, strm->state);
  41a46c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  41a46e:	69e1      	ldr	r1, [r4, #28]
  41a470:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  41a472:	4798      	blx	r3
    strm->state = Z_NULL;
  41a474:	2300      	movs	r3, #0
  41a476:	61e3      	str	r3, [r4, #28]
    return status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;
  41a478:	2d71      	cmp	r5, #113	; 0x71
  41a47a:	bf0c      	ite	eq
  41a47c:	f06f 0002 	mvneq.w	r0, #2
  41a480:	4618      	movne	r0, r3
  41a482:	bd38      	pop	{r3, r4, r5, pc}

0041a484 <.LVL561>:
        status != COMMENT_STATE &&
  41a484:	f1a5 015b 	sub.w	r1, r5, #91	; 0x5b
  41a488:	2916      	cmp	r1, #22
  41a48a:	d804      	bhi.n	41a496 <.LVL561+0x12>
  41a48c:	4a09      	ldr	r2, [pc, #36]	; (41a4b4 <.LVL567+0x4>)
  41a48e:	40ca      	lsrs	r2, r1
        status != NAME_STATE &&
  41a490:	f012 0f01 	tst.w	r2, #1
  41a494:	d1d3      	bne.n	41a43e <.LVL554+0x12>
        status != BUSY_STATE &&
  41a496:	f240 229a 	movw	r2, #666	; 0x29a
  41a49a:	4295      	cmp	r5, r2
  41a49c:	d0cf      	beq.n	41a43e <.LVL554+0x12>
      return Z_STREAM_ERROR;
  41a49e:	f06f 0001 	mvn.w	r0, #1

0041a4a2 <.LVL562>:
}
  41a4a2:	bd38      	pop	{r3, r4, r5, pc}

0041a4a4 <.LCFI31>:
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  41a4a4:	f06f 0001 	mvn.w	r0, #1

0041a4a8 <.LVL564>:
  41a4a8:	4770      	bx	lr

0041a4aa <.LCFI32>:
  41a4aa:	f06f 0001 	mvn.w	r0, #1

0041a4ae <.LVL566>:
  41a4ae:	bd38      	pop	{r3, r4, r5, pc}

0041a4b0 <.LVL567>:
  41a4b0:	88000001 	.word	0x88000001
  41a4b4:	00401001 	.word	0x00401001

Disassembly of section .text.wc_AesCtrEncrypt%194:

0041a4b8 <wc_AesCtrEncrypt>:

/* AES-CTR */
#ifdef WOLFSSL_AES_COUNTER

int wc_AesCtrEncrypt(Aes* aes, byte* out, const byte* in, word32 sz)
{
  41a4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041a4ba <.LCFI12>:
  41a4ba:	4606      	mov	r6, r0
  41a4bc:	460c      	mov	r4, r1
  41a4be:	4617      	mov	r7, r2
  41a4c0:	461d      	mov	r5, r3
    aes_configuration.encrypt_mode = AES_PIC32C_ENCRYPTION;
  41a4c2:	4b21      	ldr	r3, [pc, #132]	; (41a548 <.LVL89>)

0041a4c4 <.LVL70>:
  41a4c4:	2101      	movs	r1, #1

0041a4c6 <.LVL71>:
  41a4c6:	7019      	strb	r1, [r3, #0]
    aes_configuration.key_size = AES_KEY_SIZE_128;
  41a4c8:	2200      	movs	r2, #0

0041a4ca <.LVL72>:
  41a4ca:	705a      	strb	r2, [r3, #1]
    aes_configuration.start_mode = AES_AUTO_START;
  41a4cc:	7099      	strb	r1, [r3, #2]
    aes_configuration.opmode = AES_CTR_MODE;
  41a4ce:	2104      	movs	r1, #4
  41a4d0:	70d9      	strb	r1, [r3, #3]
    aes_configuration.cfb_size = AES_CFB_SIZE_128;
  41a4d2:	711a      	strb	r2, [r3, #4]
    aes_configuration.lod = 0;
  41a4d4:	609a      	str	r2, [r3, #8]
    aes_configuration.gtag_en = 0;
  41a4d6:	60da      	str	r2, [r3, #12]
    aes_configuration.processing_delay = 0;
  41a4d8:	611a      	str	r2, [r3, #16]

0041a4da <.LBB13>:
    AES_REGS->AES_MR = ul_mode;
  41a4da:	4a1c      	ldr	r2, [pc, #112]	; (41a54c <.LVL89+0x4>)
  41a4dc:	4b1c      	ldr	r3, [pc, #112]	; (41a550 <.LVL89+0x8>)
  41a4de:	605a      	str	r2, [r3, #4]

0041a4e0 <.LBE13>:

    AesConfigure(&aes_configuration);
    AesWriteKey(aes->key_ce, aes->keylen);
  41a4e0:	f8d0 10f4 	ldr.w	r1, [r0, #244]	; 0xf4
  41a4e4:	f500 7096 	add.w	r0, r0, #300	; 0x12c

0041a4e8 <.LVL75>:
  41a4e8:	f003 fb96 	bl	41dc18 <.LFE47>

0041a4ec <.LVL76>:
    AesWriteIV(aes->iv_ce);
  41a4ec:	f506 70a6 	add.w	r0, r6, #332	; 0x14c
  41a4f0:	f004 fa80 	bl	41e9f4 <.LFE3>

0041a4f4 <.LVL77>:
    /* set up pointers for input and output buffers */
    const uint32_t *inptr = (const uint32_t *)in;
    uint32_t *outptr = (uint32_t *)out;

    uint32_t block;   /* 16 bytes = 4 32bit block size */
    for (block = 0; block < sz; block += 16)
  41a4f4:	b335      	cbz	r5, 41a544 <.LVL88>
  41a4f6:	f107 0010 	add.w	r0, r7, #16
  41a4fa:	f104 0110 	add.w	r1, r4, #16
  41a4fe:	2400      	movs	r4, #0

0041a500 <.LVL78>:
    {
        /* Write the data to be ciphered to the input data registers. */
        AES_REGS->AES_IDATAR[0] = *inptr++;
  41a500:	4a13      	ldr	r2, [pc, #76]	; (41a550 <.LVL89+0x8>)

0041a502 <.LVL79>:
  41a502:	f850 3c10 	ldr.w	r3, [r0, #-16]
  41a506:	6413      	str	r3, [r2, #64]	; 0x40

0041a508 <.LVL80>:
        AES_REGS->AES_IDATAR[1] = *inptr++;
  41a508:	f850 3c0c 	ldr.w	r3, [r0, #-12]
  41a50c:	6453      	str	r3, [r2, #68]	; 0x44

0041a50e <.LVL81>:
        AES_REGS->AES_IDATAR[2] = *inptr++;
  41a50e:	f850 3c08 	ldr.w	r3, [r0, #-8]
  41a512:	6493      	str	r3, [r2, #72]	; 0x48

0041a514 <.LVL82>:
        AES_REGS->AES_IDATAR[3] = *inptr++;
  41a514:	f850 3c04 	ldr.w	r3, [r0, #-4]
  41a518:	64d3      	str	r3, [r2, #76]	; 0x4c

        /* Note the blocking here - state machine this? */
        while (!(AES_REGS->AES_ISR & AES_ISR_DATRDY_Msk))  ;
  41a51a:	69d3      	ldr	r3, [r2, #28]
  41a51c:	f013 0f01 	tst.w	r3, #1
  41a520:	d0fb      	beq.n	41a51a <.LVL82+0x6>

0041a522 <.LVL83>:

        /* encrypt complete - read out the data */
        *outptr++ = AES_REGS->AES_ODATAR[0];
  41a522:	6d13      	ldr	r3, [r2, #80]	; 0x50
  41a524:	f841 3c10 	str.w	r3, [r1, #-16]

0041a528 <.LVL84>:
        *outptr++ = AES_REGS->AES_ODATAR[1];
  41a528:	6d53      	ldr	r3, [r2, #84]	; 0x54
  41a52a:	f841 3c0c 	str.w	r3, [r1, #-12]

0041a52e <.LVL85>:
        *outptr++ = AES_REGS->AES_ODATAR[2];
  41a52e:	6d93      	ldr	r3, [r2, #88]	; 0x58
  41a530:	f841 3c08 	str.w	r3, [r1, #-8]

0041a534 <.LVL86>:
        *outptr++ = AES_REGS->AES_ODATAR[3];
  41a534:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
  41a536:	f841 3c04 	str.w	r3, [r1, #-4]
    for (block = 0; block < sz; block += 16)
  41a53a:	3410      	adds	r4, #16

0041a53c <.LVL87>:
  41a53c:	3010      	adds	r0, #16
  41a53e:	3110      	adds	r1, #16
  41a540:	42a5      	cmp	r5, r4
  41a542:	d8de      	bhi.n	41a502 <.LVL79>

0041a544 <.LVL88>:
    }
    
    return 0;
}
  41a544:	2000      	movs	r0, #0
  41a546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041a548 <.LVL89>:
  41a548:	204177e0 	.word	0x204177e0
  41a54c:	00e04101 	.word	0x00e04101
  41a550:	4006c000 	.word	0x4006c000

Disassembly of section .text.wc_Sha256Final%195:

0041a554 <wc_Sha256Final>:
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};


int wc_Sha256Final(Sha256* sha256, byte* hash)
{
  41a554:	b570      	push	{r4, r5, r6, lr}

0041a556 <.LCFI5>:
  41a556:	b082      	sub	sp, #8

0041a558 <.LCFI6>:
  41a558:	4605      	mov	r5, r0
  41a55a:	460c      	mov	r4, r1
    uint8_t  padn;
    uint8_t  msg_len[8];

    /* Get the number of bits */
    /* create the message bit length block */
    uint64_t total_bits = sha256->total_len << 3;
  41a55c:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
  41a560:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
  41a564:	00db      	lsls	r3, r3, #3
  41a566:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  41a56a:	00d1      	lsls	r1, r2, #3

0041a56c <.LVL43>:
    msg_len[0] = (uint8_t)(total_bits >> 56);
  41a56c:	0e18      	lsrs	r0, r3, #24

0041a56e <.LVL44>:
  41a56e:	f88d 0000 	strb.w	r0, [sp]
    msg_len[1] = (uint8_t)(total_bits >> 48);
  41a572:	0c18      	lsrs	r0, r3, #16
  41a574:	f88d 0001 	strb.w	r0, [sp, #1]
    msg_len[2] = (uint8_t)(total_bits >> 40);
  41a578:	0a18      	lsrs	r0, r3, #8
  41a57a:	f88d 0002 	strb.w	r0, [sp, #2]
    msg_len[3] = (uint8_t)(total_bits >> 32);
  41a57e:	f88d 3003 	strb.w	r3, [sp, #3]
    msg_len[4] = (uint8_t)(total_bits >> 24);
  41a582:	0e0b      	lsrs	r3, r1, #24

0041a584 <.LVL45>:
  41a584:	f88d 3004 	strb.w	r3, [sp, #4]
    msg_len[5] = (uint8_t)(total_bits >> 16);
  41a588:	0c0b      	lsrs	r3, r1, #16
  41a58a:	f88d 3005 	strb.w	r3, [sp, #5]
    msg_len[6] = (uint8_t)(total_bits >>  8);
  41a58e:	0a0b      	lsrs	r3, r1, #8
  41a590:	f88d 3006 	strb.w	r3, [sp, #6]
    msg_len[7] = (uint8_t)(total_bits);
  41a594:	f88d 1007 	strb.w	r1, [sp, #7]
    
    /* pad the last bits with bytes */
    last = sha256->total_len & 0x3F;
  41a598:	f002 023f 	and.w	r2, r2, #63	; 0x3f

0041a59c <.LVL46>:
    padn = (last < SHA256_PAD_SIZE) ? (SHA256_PAD_SIZE - last) : (120 - last);
  41a59c:	2a37      	cmp	r2, #55	; 0x37
  41a59e:	bf94      	ite	ls
  41a5a0:	f1c2 0238 	rsbls	r2, r2, #56	; 0x38

0041a5a4 <.LVL47>:
  41a5a4:	f1c2 0278 	rsbhi	r2, r2, #120	; 0x78
  41a5a8:	b2d2      	uxtb	r2, r2

0041a5aa <.LVL48>:

    /* future note: Capella will have auto padding with MSGSIZE != 0 */
    wc_Sha256Update(sha256, sha_padding, padn);
  41a5aa:	4910      	ldr	r1, [pc, #64]	; (41a5ec <.LVL53+0x2>)
  41a5ac:	4628      	mov	r0, r5
  41a5ae:	f000 fe29 	bl	41b204 <.LFE156>

0041a5b2 <.LVL50>:
    wc_Sha256Update(sha256, msg_len, 8);
  41a5b2:	2208      	movs	r2, #8
  41a5b4:	4669      	mov	r1, sp
  41a5b6:	4628      	mov	r0, r5
  41a5b8:	f000 fe24 	bl	41b204 <.LFE156>

0041a5bc <.LVL51>:

    memcpy(hash, (void *)sha256->digest, SHA256_DIGEST_SIZE);
  41a5bc:	462b      	mov	r3, r5
  41a5be:	f853 6f80 	ldr.w	r6, [r3, #128]!
  41a5c2:	6858      	ldr	r0, [r3, #4]
  41a5c4:	6899      	ldr	r1, [r3, #8]
  41a5c6:	68da      	ldr	r2, [r3, #12]
  41a5c8:	6026      	str	r6, [r4, #0]
  41a5ca:	6060      	str	r0, [r4, #4]
  41a5cc:	60a1      	str	r1, [r4, #8]
  41a5ce:	60e2      	str	r2, [r4, #12]
  41a5d0:	691e      	ldr	r6, [r3, #16]
  41a5d2:	6958      	ldr	r0, [r3, #20]
  41a5d4:	6999      	ldr	r1, [r3, #24]
  41a5d6:	69da      	ldr	r2, [r3, #28]
  41a5d8:	6126      	str	r6, [r4, #16]
  41a5da:	6160      	str	r0, [r4, #20]
  41a5dc:	61a1      	str	r1, [r4, #24]
  41a5de:	61e2      	str	r2, [r4, #28]

    return wc_InitSha256(sha256);
  41a5e0:	4628      	mov	r0, r5
  41a5e2:	f000 f8e9 	bl	41a7b8 <.LFE41>

0041a5e6 <.LVL52>:
}
  41a5e6:	b002      	add	sp, #8

0041a5e8 <.LCFI7>:
  41a5e8:	bd70      	pop	{r4, r5, r6, pc}

0041a5ea <.LVL53>:
  41a5ea:	bf00      	nop
  41a5ec:	0041b408 	.word	0x0041b408

Disassembly of section .text.memset%196:

0041a5f0 <memset>:
  41a5f0:	b470      	push	{r4, r5, r6}

0041a5f2 <.LCFI0>:
  41a5f2:	0786      	lsls	r6, r0, #30
  41a5f4:	d046      	beq.n	41a684 <.LCFI2>
  41a5f6:	1e54      	subs	r4, r2, #1

0041a5f8 <.LVL1>:
  41a5f8:	2a00      	cmp	r2, #0
  41a5fa:	d041      	beq.n	41a680 <.LVL25>
  41a5fc:	b2ca      	uxtb	r2, r1
  41a5fe:	4603      	mov	r3, r0
  41a600:	e002      	b.n	41a608 <.LVL4>

0041a602 <.LVL2>:
  41a602:	f114 34ff 	adds.w	r4, r4, #4294967295

0041a606 <.LVL3>:
  41a606:	d33b      	bcc.n	41a680 <.LVL25>

0041a608 <.LVL4>:
  41a608:	f803 2b01 	strb.w	r2, [r3], #1
  41a60c:	079d      	lsls	r5, r3, #30
  41a60e:	d1f8      	bne.n	41a602 <.LVL2>

0041a610 <.LVL6>:
  41a610:	2c03      	cmp	r4, #3
  41a612:	d92e      	bls.n	41a672 <.LVL22>
  41a614:	b2cd      	uxtb	r5, r1

0041a616 <.LVL7>:
  41a616:	ea45 2505 	orr.w	r5, r5, r5, lsl #8

0041a61a <.LVL8>:
  41a61a:	2c0f      	cmp	r4, #15
  41a61c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16

0041a620 <.LVL9>:
  41a620:	d919      	bls.n	41a656 <.LVL17+0x2>
  41a622:	f103 0210 	add.w	r2, r3, #16
  41a626:	4626      	mov	r6, r4

0041a628 <.LVL10>:
  41a628:	3e10      	subs	r6, #16

0041a62a <.LVL11>:
  41a62a:	2e0f      	cmp	r6, #15
  41a62c:	f842 5c10 	str.w	r5, [r2, #-16]

0041a630 <.LVL12>:
  41a630:	f842 5c0c 	str.w	r5, [r2, #-12]

0041a634 <.LVL13>:
  41a634:	f842 5c08 	str.w	r5, [r2, #-8]

0041a638 <.LVL14>:
  41a638:	f842 5c04 	str.w	r5, [r2, #-4]
  41a63c:	f102 0210 	add.w	r2, r2, #16

0041a640 <.LVL15>:
  41a640:	d8f2      	bhi.n	41a628 <.LVL10>
  41a642:	f1a4 0210 	sub.w	r2, r4, #16

0041a646 <.LVL16>:
  41a646:	f022 020f 	bic.w	r2, r2, #15
  41a64a:	f004 040f 	and.w	r4, r4, #15
  41a64e:	3210      	adds	r2, #16
  41a650:	2c03      	cmp	r4, #3
  41a652:	4413      	add	r3, r2

0041a654 <.LVL17>:
  41a654:	d90d      	bls.n	41a672 <.LVL22>
  41a656:	461e      	mov	r6, r3
  41a658:	4622      	mov	r2, r4

0041a65a <.LVL18>:
  41a65a:	3a04      	subs	r2, #4

0041a65c <.LVL19>:
  41a65c:	2a03      	cmp	r2, #3
  41a65e:	f846 5b04 	str.w	r5, [r6], #4

0041a662 <.LVL20>:
  41a662:	d8fa      	bhi.n	41a65a <.LVL18>
  41a664:	1f22      	subs	r2, r4, #4

0041a666 <.LVL21>:
  41a666:	f022 0203 	bic.w	r2, r2, #3
  41a66a:	3204      	adds	r2, #4
  41a66c:	4413      	add	r3, r2
  41a66e:	f004 0403 	and.w	r4, r4, #3

0041a672 <.LVL22>:
  41a672:	b12c      	cbz	r4, 41a680 <.LVL25>
  41a674:	b2c9      	uxtb	r1, r1

0041a676 <.LVL23>:
  41a676:	441c      	add	r4, r3
  41a678:	f803 1b01 	strb.w	r1, [r3], #1
  41a67c:	429c      	cmp	r4, r3
  41a67e:	d1fb      	bne.n	41a678 <.LVL23+0x2>

0041a680 <.LVL25>:
  41a680:	bc70      	pop	{r4, r5, r6}

0041a682 <.LCFI1>:
  41a682:	4770      	bx	lr

0041a684 <.LCFI2>:
  41a684:	4614      	mov	r4, r2
  41a686:	4603      	mov	r3, r0
  41a688:	e7c2      	b.n	41a610 <.LVL6>

0041a68a <.LFE17>:
  41a68a:	bf00      	nop

Disassembly of section .text.fp_mod_2d%197:

0041a68c <fp_mod_2d>:
{
  41a68c:	b570      	push	{r4, r5, r6, lr}

0041a68e <.LCFI70>:
  41a68e:	4614      	mov	r4, r2
   if (b <= 0) {
  41a690:	1e0d      	subs	r5, r1, #0
  41a692:	dd33      	ble.n	41a6fc <.LVL473>
  41a694:	4606      	mov	r6, r0
   fp_copy(a, c);
  41a696:	4611      	mov	r1, r2

0041a698 <.LVL466>:
  41a698:	f003 fef2 	bl	41e480 <.LFE185>

0041a69c <.LVL467>:
   if (b >= (DIGIT_BIT * a->used)) {
  41a69c:	6833      	ldr	r3, [r6, #0]
  41a69e:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
  41a6a2:	da3e      	bge.n	41a722 <.LVL477>
  for (x = (b / DIGIT_BIT) + ((b % DIGIT_BIT) == 0 ? 0 : 1); x < c->used; x++) {
  41a6a4:	462b      	mov	r3, r5
  41a6a6:	2d00      	cmp	r5, #0
  41a6a8:	bfb8      	it	lt
  41a6aa:	f105 031f 	addlt.w	r3, r5, #31
  41a6ae:	115e      	asrs	r6, r3, #5

0041a6b0 <.LVL468>:
  41a6b0:	f015 031f 	ands.w	r3, r5, #31
  41a6b4:	bf18      	it	ne
  41a6b6:	2301      	movne	r3, #1
  41a6b8:	4433      	add	r3, r6

0041a6ba <.LVL469>:
  41a6ba:	6821      	ldr	r1, [r4, #0]
  41a6bc:	428b      	cmp	r3, r1
  41a6be:	da08      	bge.n	41a6d2 <.LVL469+0x18>
  41a6c0:	eb04 0283 	add.w	r2, r4, r3, lsl #2
  41a6c4:	3204      	adds	r2, #4
    c->dp[x] = 0;
  41a6c6:	2000      	movs	r0, #0
  41a6c8:	f842 0f04 	str.w	r0, [r2, #4]!
  for (x = (b / DIGIT_BIT) + ((b % DIGIT_BIT) == 0 ? 0 : 1); x < c->used; x++) {
  41a6cc:	3301      	adds	r3, #1
  41a6ce:	428b      	cmp	r3, r1
  41a6d0:	d1fa      	bne.n	41a6c8 <.LVL469+0xe>
  41a6d2:	eb04 0386 	add.w	r3, r4, r6, lsl #2

0041a6d6 <.LVL471>:
  c->dp[b / DIGIT_BIT] &= ~((fp_digit)0) >> (DIGIT_BIT - b);
  41a6d6:	f1c5 0520 	rsb	r5, r5, #32

0041a6da <.LVL472>:
  41a6da:	f04f 32ff 	mov.w	r2, #4294967295
  41a6de:	fa22 f505 	lsr.w	r5, r2, r5
  41a6e2:	689a      	ldr	r2, [r3, #8]
  41a6e4:	402a      	ands	r2, r5
  41a6e6:	609a      	str	r2, [r3, #8]
  fp_clamp (c);
  41a6e8:	b1c1      	cbz	r1, 41a71c <.LVL476+0x18>
  41a6ea:	1e4a      	subs	r2, r1, #1
  41a6ec:	1c4b      	adds	r3, r1, #1
  41a6ee:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
  41a6f2:	b97b      	cbnz	r3, 41a714 <.LVL476+0x10>
  41a6f4:	eb04 0381 	add.w	r3, r4, r1, lsl #2
  41a6f8:	3304      	adds	r3, #4
  41a6fa:	e004      	b.n	41a706 <.LVL476+0x2>

0041a6fc <.LVL473>:
      fp_zero(c);
  41a6fc:	4610      	mov	r0, r2

0041a6fe <.LVL474>:
  41a6fe:	f004 fa15 	bl	41eb2c <.LFE154>

0041a702 <.LVL475>:
      return;
  41a702:	bd70      	pop	{r4, r5, r6, pc}

0041a704 <.LVL476>:
  fp_clamp (c);
  41a704:	4602      	mov	r2, r0
  41a706:	b13a      	cbz	r2, 41a718 <.LVL476+0x14>
  41a708:	1e50      	subs	r0, r2, #1
  41a70a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  41a70e:	2900      	cmp	r1, #0
  41a710:	d0f8      	beq.n	41a704 <.LVL476>
  41a712:	6022      	str	r2, [r4, #0]
  41a714:	6863      	ldr	r3, [r4, #4]
  41a716:	e002      	b.n	41a71e <.LVL476+0x1a>
  41a718:	2300      	movs	r3, #0
  41a71a:	6023      	str	r3, [r4, #0]
  41a71c:	2300      	movs	r3, #0
  41a71e:	6063      	str	r3, [r4, #4]
  41a720:	bd70      	pop	{r4, r5, r6, pc}

0041a722 <.LVL477>:
  41a722:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section .text.xTaskPriorityInherit%198:

0041a724 <xTaskPriorityInherit>:
	BaseType_t xReturn = pdFALSE;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
  41a724:	2800      	cmp	r0, #0
  41a726:	d03f      	beq.n	41a7a8 <.LCFI29>
	{
  41a728:	b538      	push	{r3, r4, r5, lr}

0041a72a <.LCFI28>:
  41a72a:	4605      	mov	r5, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
  41a72c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  41a72e:	491f      	ldr	r1, [pc, #124]	; (41a7ac <.LVL291+0x2>)
  41a730:	6809      	ldr	r1, [r1, #0]
  41a732:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  41a734:	428a      	cmp	r2, r1
  41a736:	d22e      	bcs.n	41a796 <.LVL288>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  41a738:	6981      	ldr	r1, [r0, #24]
  41a73a:	2900      	cmp	r1, #0
  41a73c:	db05      	blt.n	41a74a <.LCFI28+0x20>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  41a73e:	491b      	ldr	r1, [pc, #108]	; (41a7ac <.LVL291+0x2>)
  41a740:	6809      	ldr	r1, [r1, #0]
  41a742:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  41a744:	f1c1 0105 	rsb	r1, r1, #5
  41a748:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
  41a74a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  41a74e:	4918      	ldr	r1, [pc, #96]	; (41a7b0 <.LVL291+0x6>)
  41a750:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  41a754:	6969      	ldr	r1, [r5, #20]
  41a756:	4291      	cmp	r1, r2
  41a758:	d005      	beq.n	41a766 <.LVL284>
					prvAddTaskToReadyList( pxMutexHolderTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
  41a75a:	4a14      	ldr	r2, [pc, #80]	; (41a7ac <.LVL291+0x2>)
  41a75c:	6812      	ldr	r2, [r2, #0]
  41a75e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  41a760:	62ea      	str	r2, [r5, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
  41a762:	2001      	movs	r0, #1

0041a764 <.LVL283>:
  41a764:	bd38      	pop	{r3, r4, r5, pc}

0041a766 <.LVL284>:
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  41a766:	1d2c      	adds	r4, r5, #4
  41a768:	4620      	mov	r0, r4

0041a76a <.LVL285>:
  41a76a:	f003 fd03 	bl	41e174 <.LFE106>

0041a76e <.LVL286>:
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
  41a76e:	4b0f      	ldr	r3, [pc, #60]	; (41a7ac <.LVL291+0x2>)
  41a770:	681b      	ldr	r3, [r3, #0]
  41a772:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  41a774:	62e8      	str	r0, [r5, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
  41a776:	4b0f      	ldr	r3, [pc, #60]	; (41a7b4 <.LVL291+0xa>)
  41a778:	681b      	ldr	r3, [r3, #0]
  41a77a:	4298      	cmp	r0, r3
  41a77c:	d901      	bls.n	41a782 <.LVL286+0x14>
  41a77e:	4b0d      	ldr	r3, [pc, #52]	; (41a7b4 <.LVL291+0xa>)
  41a780:	6018      	str	r0, [r3, #0]
  41a782:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a786:	4621      	mov	r1, r4
  41a788:	4b09      	ldr	r3, [pc, #36]	; (41a7b0 <.LVL291+0x6>)
  41a78a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  41a78e:	f004 f865 	bl	41e85c <.LFE142>

0041a792 <.LVL287>:
				xReturn = pdTRUE;
  41a792:	2001      	movs	r0, #1
  41a794:	bd38      	pop	{r3, r4, r5, pc}

0041a796 <.LVL288>:
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
  41a796:	4a05      	ldr	r2, [pc, #20]	; (41a7ac <.LVL291+0x2>)
  41a798:	6812      	ldr	r2, [r2, #0]
  41a79a:	6c40      	ldr	r0, [r0, #68]	; 0x44

0041a79c <.LVL289>:
  41a79c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  41a79e:	4298      	cmp	r0, r3
  41a7a0:	bf2c      	ite	cs
  41a7a2:	2000      	movcs	r0, #0
  41a7a4:	2001      	movcc	r0, #1
  41a7a6:	bd38      	pop	{r3, r4, r5, pc}

0041a7a8 <.LCFI29>:
	BaseType_t xReturn = pdFALSE;
  41a7a8:	2000      	movs	r0, #0

0041a7aa <.LVL291>:
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
  41a7aa:	4770      	bx	lr
  41a7ac:	20417838 	.word	0x20417838
  41a7b0:	20417534 	.word	0x20417534
  41a7b4:	20417858 	.word	0x20417858

Disassembly of section .text.wc_InitSha256%199:

0041a7b8 <wc_InitSha256>:
{
  41a7b8:	b430      	push	{r4, r5}

0041a7ba <.LCFI2>:
  41a7ba:	4603      	mov	r3, r0
    if ((PMC_REGS->PMC_PCSR1 & PmcBit) != PmcBit)
  41a7bc:	4a1b      	ldr	r2, [pc, #108]	; (41a82c <.LCFI3+0x4>)
  41a7be:	f8d2 2108 	ldr.w	r2, [r2, #264]	; 0x108
  41a7c2:	f012 0f01 	tst.w	r2, #1
  41a7c6:	d103      	bne.n	41a7d0 <.LCFI2+0x16>
        PMC_REGS->PMC_PCER1 = PmcBit;
  41a7c8:	2101      	movs	r1, #1
  41a7ca:	4a18      	ldr	r2, [pc, #96]	; (41a82c <.LCFI3+0x4>)
  41a7cc:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    sha256->icm_descriptor.cfg.reg = 0x0;
  41a7d0:	2000      	movs	r0, #0

0041a7d2 <.LVL20>:
  41a7d2:	6058      	str	r0, [r3, #4]
    sha256->icm_descriptor.cfg.bit.is_end_mon = 1;
  41a7d4:	2204      	movs	r2, #4
  41a7d6:	711a      	strb	r2, [r3, #4]
    sha256->icm_descriptor.cfg.bit.algo = 1;
  41a7d8:	f04f 0200 	mov.w	r2, #0
  41a7dc:	2101      	movs	r1, #1
  41a7de:	f361 1206 	bfi	r2, r1, #4, #3
  41a7e2:	715a      	strb	r2, [r3, #5]
    sha256->digest[0] = 0x67E6096A;
  41a7e4:	4a12      	ldr	r2, [pc, #72]	; (41a830 <.LCFI3+0x8>)
  41a7e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    sha256->digest[1] = 0x85AE67BB;
  41a7ea:	f102 52ee 	add.w	r2, r2, #499122176	; 0x1dc00000
  41a7ee:	f502 2205 	add.w	r2, r2, #544768	; 0x85000
  41a7f2:	f602 6251 	addw	r2, r2, #3665	; 0xe51
  41a7f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    sha256->digest[2] = 0x72F36E3C;
  41a7fa:	4a0e      	ldr	r2, [pc, #56]	; (41a834 <.LCFI3+0xc>)
  41a7fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    sha256->digest[3] = 0x3AF54FA5;
  41a800:	4a0d      	ldr	r2, [pc, #52]	; (41a838 <.LCFI3+0x10>)
  41a802:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    sha256->digest[4] = 0x7F520E51;
  41a806:	4a0d      	ldr	r2, [pc, #52]	; (41a83c <.LCFI3+0x14>)
  41a808:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    sha256->digest[5] = 0x8C68059B;
  41a80c:	4a0c      	ldr	r2, [pc, #48]	; (41a840 <.LCFI3+0x18>)
  41a80e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    sha256->digest[6] = 0xABD9831F;
  41a812:	4a0c      	ldr	r2, [pc, #48]	; (41a844 <.LCFI3+0x1c>)
  41a814:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    sha256->digest[7] = 0x19CDE05B;
  41a818:	4a0b      	ldr	r2, [pc, #44]	; (41a848 <.LCFI3+0x20>)
  41a81a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    sha256->total_len = 0;
  41a81e:	2400      	movs	r4, #0
  41a820:	2500      	movs	r5, #0
  41a822:	e9c3 4528 	strd	r4, r5, [r3, #160]	; 0xa0
}
  41a826:	bc30      	pop	{r4, r5}

0041a828 <.LCFI3>:
  41a828:	4770      	bx	lr
  41a82a:	bf00      	nop
  41a82c:	400e0600 	.word	0x400e0600
  41a830:	67e6096a 	.word	0x67e6096a
  41a834:	72f36e3c 	.word	0x72f36e3c
  41a838:	3af54fa5 	.word	0x3af54fa5
  41a83c:	7f520e51 	.word	0x7f520e51
  41a840:	8c68059b 	.word	0x8c68059b
  41a844:	abd9831f 	.word	0xabd9831f
  41a848:	19cde05b 	.word	0x19cde05b

Disassembly of section .text.SYS_TIME_AddToList%200:

0041a84c <SYS_TIME_AddToList>:
    SYS_TIME_TIMER_OBJ* tmr = counter->tmrActive;
  41a84c:	4b23      	ldr	r3, [pc, #140]	; (41a8dc <.LVL66>)
  41a84e:	6b1a      	ldr	r2, [r3, #48]	; 0x30

0041a850 <.LVL47>:
    if (newTimer == NULL)
  41a850:	2800      	cmp	r0, #0
  41a852:	d03f      	beq.n	41a8d4 <.LCFI6>
{
  41a854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0041a858 <.LCFI5>:
  41a858:	4684      	mov	ip, r0
    newTimerTime = newTimer->relativeTimePending;
  41a85a:	f8d0 8008 	ldr.w	r8, [r0, #8]

0041a85e <.LVL48>:
    if (tmr == NULL)
  41a85e:	b1b2      	cbz	r2, 41a88e <.LVL53>
            if ((total_time + tmr->relativeTimePending) > newTimerTime)
  41a860:	6894      	ldr	r4, [r2, #8]
  41a862:	2500      	movs	r5, #0
  41a864:	4646      	mov	r6, r8
  41a866:	2700      	movs	r7, #0
  41a868:	42af      	cmp	r7, r5
  41a86a:	bf08      	it	eq
  41a86c:	45a0      	cmpeq	r8, r4
  41a86e:	d328      	bcc.n	41a8c2 <.LVL60>

0041a870 <.LVL49>:
            tmr = tmr->tmrNext;
  41a870:	6993      	ldr	r3, [r2, #24]

0041a872 <.LVL50>:
        while (tmr != NULL)
  41a872:	b18b      	cbz	r3, 41a898 <.LVL56>
            if ((total_time + tmr->relativeTimePending) > newTimerTime)
  41a874:	6899      	ldr	r1, [r3, #8]
  41a876:	468e      	mov	lr, r1
  41a878:	1860      	adds	r0, r4, r1
  41a87a:	f145 0100 	adc.w	r1, r5, #0
  41a87e:	428f      	cmp	r7, r1
  41a880:	bf08      	it	eq
  41a882:	4286      	cmpeq	r6, r0
  41a884:	d31b      	bcc.n	41a8be <.LVL59>
  41a886:	4604      	mov	r4, r0

0041a888 <.LVL51>:
  41a888:	460d      	mov	r5, r1
            tmr = tmr->tmrNext;
  41a88a:	461a      	mov	r2, r3

0041a88c <.LVL52>:
  41a88c:	e7f0      	b.n	41a870 <.LVL49>

0041a88e <.LVL53>:
        counter->tmrActive = newTimer;
  41a88e:	4b13      	ldr	r3, [pc, #76]	; (41a8dc <.LVL66>)
  41a890:	6318      	str	r0, [r3, #48]	; 0x30

0041a892 <.LVL54>:
        isHeadTimerUpdated = true;
  41a892:	2001      	movs	r0, #1

0041a894 <.LVL55>:
  41a894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041a898 <.LVL56>:
            tmr = tmr->tmrNext;
  41a898:	4619      	mov	r1, r3

0041a89a <.LVL57>:
        if (prevTmr == NULL)
  41a89a:	b1a2      	cbz	r2, 41a8c6 <.LVL61>
            newTimer->tmrNext = prevTmr->tmrNext;
  41a89c:	f8cc 3018 	str.w	r3, [ip, #24]
            prevTmr->tmrNext = newTimer;
  41a8a0:	f8c2 c018 	str.w	ip, [r2, #24]
    bool isHeadTimerUpdated = false;
  41a8a4:	2000      	movs	r0, #0

0041a8a6 <.LVL58>:
        newTimer->relativeTimePending = newTimerTime - total_time;
  41a8a6:	eba8 0404 	sub.w	r4, r8, r4
  41a8aa:	f8cc 4008 	str.w	r4, [ip, #8]
        if (newTimer->tmrNext != NULL)
  41a8ae:	f8dc 3018 	ldr.w	r3, [ip, #24]
  41a8b2:	b18b      	cbz	r3, 41a8d8 <.LCFI7>
            newTimer->tmrNext->relativeTimePending -= newTimer->relativeTimePending;
  41a8b4:	689a      	ldr	r2, [r3, #8]
  41a8b6:	1b14      	subs	r4, r2, r4
  41a8b8:	609c      	str	r4, [r3, #8]
  41a8ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041a8be <.LVL59>:
            tmr = tmr->tmrNext;
  41a8be:	4619      	mov	r1, r3
  41a8c0:	e7eb      	b.n	41a89a <.LVL57>

0041a8c2 <.LVL60>:
            if ((total_time + tmr->relativeTimePending) > newTimerTime)
  41a8c2:	4611      	mov	r1, r2
  41a8c4:	2400      	movs	r4, #0

0041a8c6 <.LVL61>:
            counter->tmrActive = newTimer;
  41a8c6:	4b05      	ldr	r3, [pc, #20]	; (41a8dc <.LVL66>)
  41a8c8:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
            newTimer->tmrNext = tmr;
  41a8cc:	f8cc 1018 	str.w	r1, [ip, #24]

0041a8d0 <.LVL62>:
            isHeadTimerUpdated = true;
  41a8d0:	2001      	movs	r0, #1
  41a8d2:	e7e8      	b.n	41a8a6 <.LVL58>

0041a8d4 <.LCFI6>:
        return isHeadTimerUpdated;
  41a8d4:	2000      	movs	r0, #0

0041a8d6 <.LVL64>:
  41a8d6:	4770      	bx	lr

0041a8d8 <.LCFI7>:
}
  41a8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041a8dc <.LVL66>:
  41a8dc:	20417688 	.word	0x20417688

Disassembly of section .text.__pic32c_data_initialization%201:

0041a8e0 <__pic32c_data_initialization>:
  41a8e0:	4921      	ldr	r1, [pc, #132]	; (41a968 <.LFE154+0x88>)
  41a8e2:	680b      	ldr	r3, [r1, #0]
  41a8e4:	b430      	push	{r4, r5}
  41a8e6:	b113      	cbz	r3, 41a8ee <__pic32c_data_initialization+0xe>
  41a8e8:	4b20      	ldr	r3, [pc, #128]	; (41a96c <.LFE154+0x8c>)
  41a8ea:	681a      	ldr	r2, [r3, #0]
  41a8ec:	bb72      	cbnz	r2, 41a94c <__pic32c_data_initialization+0x6c>
  41a8ee:	4820      	ldr	r0, [pc, #128]	; (41a970 <.LFE154+0x90>)
  41a8f0:	2500      	movs	r5, #0
  41a8f2:	6801      	ldr	r1, [r0, #0]
  41a8f4:	b9c1      	cbnz	r1, 41a928 <__pic32c_data_initialization+0x48>
  41a8f6:	6842      	ldr	r2, [r0, #4]
  41a8f8:	b332      	cbz	r2, 41a948 <__pic32c_data_initialization+0x68>
  41a8fa:	6883      	ldr	r3, [r0, #8]
  41a8fc:	300c      	adds	r0, #12
  41a8fe:	b1d3      	cbz	r3, 41a936 <__pic32c_data_initialization+0x56>
  41a900:	3901      	subs	r1, #1
  41a902:	4603      	mov	r3, r0
  41a904:	f813 4b01 	ldrb.w	r4, [r3], #1
  41a908:	f801 4f01 	strb.w	r4, [r1, #1]!
  41a90c:	1a1c      	subs	r4, r3, r0
  41a90e:	4294      	cmp	r4, r2
  41a910:	d3f8      	bcc.n	41a904 <__pic32c_data_initialization+0x24>
  41a912:	f012 0303 	ands.w	r3, r2, #3
  41a916:	bf18      	it	ne
  41a918:	2301      	movne	r3, #1
  41a91a:	eb03 0292 	add.w	r2, r3, r2, lsr #2
  41a91e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  41a922:	6801      	ldr	r1, [r0, #0]
  41a924:	2900      	cmp	r1, #0
  41a926:	d0e6      	beq.n	41a8f6 <__pic32c_data_initialization+0x16>
  41a928:	6884      	ldr	r4, [r0, #8]
  41a92a:	6842      	ldr	r2, [r0, #4]
  41a92c:	460b      	mov	r3, r1
  41a92e:	300c      	adds	r0, #12
  41a930:	b93c      	cbnz	r4, 41a942 <__pic32c_data_initialization+0x62>
  41a932:	2a00      	cmp	r2, #0
  41a934:	d0dd      	beq.n	41a8f2 <__pic32c_data_initialization+0x12>
  41a936:	441a      	add	r2, r3
  41a938:	f803 5b01 	strb.w	r5, [r3], #1
  41a93c:	4293      	cmp	r3, r2
  41a93e:	d1fb      	bne.n	41a938 <__pic32c_data_initialization+0x58>
  41a940:	e7d7      	b.n	41a8f2 <__pic32c_data_initialization+0x12>
  41a942:	2a00      	cmp	r2, #0
  41a944:	d1dc      	bne.n	41a900 <__pic32c_data_initialization+0x20>
  41a946:	e7e4      	b.n	41a912 <__pic32c_data_initialization+0x32>
  41a948:	bc30      	pop	{r4, r5}
  41a94a:	4770      	bx	lr
  41a94c:	428b      	cmp	r3, r1
  41a94e:	d2ce      	bcs.n	41a8ee <__pic32c_data_initialization+0xe>
  41a950:	43da      	mvns	r2, r3
  41a952:	440a      	add	r2, r1
  41a954:	f022 0203 	bic.w	r2, r2, #3
  41a958:	3204      	adds	r2, #4
  41a95a:	441a      	add	r2, r3
  41a95c:	2100      	movs	r1, #0
  41a95e:	f843 1b04 	str.w	r1, [r3], #4
  41a962:	4293      	cmp	r3, r2
  41a964:	d1fb      	bne.n	41a95e <__pic32c_data_initialization+0x7e>
  41a966:	e7c2      	b.n	41a8ee <__pic32c_data_initialization+0xe>
  41a968:	20400054 	.word	0x20400054
  41a96c:	20400000 	.word	0x20400000
  41a970:	00409270 	.word	0x00409270

Disassembly of section .text._malloc_trim_r%202:

0041a974 <_malloc_trim_r>:
  41a974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041a976 <.LCFI0>:
  41a976:	4f21      	ldr	r7, [pc, #132]	; (41a9fc <.LVL22+0x6>)
  41a978:	460c      	mov	r4, r1
  41a97a:	4606      	mov	r6, r0
  41a97c:	f003 fcea 	bl	41e354 <.LFE141>

0041a980 <.LVL1>:
  41a980:	68bb      	ldr	r3, [r7, #8]
  41a982:	685d      	ldr	r5, [r3, #4]
  41a984:	f1c4 046f 	rsb	r4, r4, #111	; 0x6f

0041a988 <.LVL2>:
  41a988:	f025 0503 	bic.w	r5, r5, #3

0041a98c <.LVL3>:
  41a98c:	442c      	add	r4, r5
  41a98e:	f024 047f 	bic.w	r4, r4, #127	; 0x7f
  41a992:	3c80      	subs	r4, #128	; 0x80

0041a994 <.LVL4>:
  41a994:	2c7f      	cmp	r4, #127	; 0x7f
  41a996:	dd07      	ble.n	41a9a8 <.LVL6>
  41a998:	2100      	movs	r1, #0
  41a99a:	4630      	mov	r0, r6
  41a99c:	f003 fd82 	bl	41e4a4 <.LFE91>

0041a9a0 <.LVL5>:
  41a9a0:	68bb      	ldr	r3, [r7, #8]
  41a9a2:	442b      	add	r3, r5
  41a9a4:	4298      	cmp	r0, r3
  41a9a6:	d004      	beq.n	41a9b2 <.LVL8>

0041a9a8 <.LVL6>:
  41a9a8:	4630      	mov	r0, r6
  41a9aa:	f004 faf5 	bl	41ef98 <__malloc_unlock>

0041a9ae <.LVL7>:
  41a9ae:	2000      	movs	r0, #0
  41a9b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041a9b2 <.LVL8>:
  41a9b2:	4261      	negs	r1, r4
  41a9b4:	4630      	mov	r0, r6

0041a9b6 <.LVL9>:
  41a9b6:	f003 fd75 	bl	41e4a4 <.LFE91>

0041a9ba <.LVL10>:
  41a9ba:	3001      	adds	r0, #1

0041a9bc <.LVL11>:
  41a9bc:	d00d      	beq.n	41a9da <.LVL16>
  41a9be:	4a10      	ldr	r2, [pc, #64]	; (41aa00 <.LVL22+0xa>)
  41a9c0:	68b9      	ldr	r1, [r7, #8]
  41a9c2:	6813      	ldr	r3, [r2, #0]
  41a9c4:	1b2d      	subs	r5, r5, r4

0041a9c6 <.LVL12>:
  41a9c6:	f045 0501 	orr.w	r5, r5, #1
  41a9ca:	4630      	mov	r0, r6

0041a9cc <.LVL13>:
  41a9cc:	1b1c      	subs	r4, r3, r4

0041a9ce <.LVL14>:
  41a9ce:	604d      	str	r5, [r1, #4]
  41a9d0:	6014      	str	r4, [r2, #0]
  41a9d2:	f004 fae1 	bl	41ef98 <__malloc_unlock>

0041a9d6 <.LVL15>:
  41a9d6:	2001      	movs	r0, #1
  41a9d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041a9da <.LVL16>:
  41a9da:	2100      	movs	r1, #0
  41a9dc:	4630      	mov	r0, r6

0041a9de <.LVL17>:
  41a9de:	f003 fd61 	bl	41e4a4 <.LFE91>

0041a9e2 <.LVL18>:
  41a9e2:	68ba      	ldr	r2, [r7, #8]
  41a9e4:	1a83      	subs	r3, r0, r2

0041a9e6 <.LVL19>:
  41a9e6:	2b0f      	cmp	r3, #15
  41a9e8:	ddde      	ble.n	41a9a8 <.LVL6>
  41a9ea:	4c06      	ldr	r4, [pc, #24]	; (41aa04 <.LVL22+0xe>)

0041a9ec <.LVL20>:
  41a9ec:	4904      	ldr	r1, [pc, #16]	; (41aa00 <.LVL22+0xa>)
  41a9ee:	6824      	ldr	r4, [r4, #0]
  41a9f0:	f043 0301 	orr.w	r3, r3, #1

0041a9f4 <.LVL21>:
  41a9f4:	1b00      	subs	r0, r0, r4

0041a9f6 <.LVL22>:
  41a9f6:	6053      	str	r3, [r2, #4]
  41a9f8:	6008      	str	r0, [r1, #0]
  41a9fa:	e7d5      	b.n	41a9a8 <.LVL6>
  41a9fc:	20416c80 	.word	0x20416c80
  41aa00:	204176c0 	.word	0x204176c0
  41aa04:	2041789c 	.word	0x2041789c

Disassembly of section .text.sha256_test%203:

0041aa08 <sha256_test>:
{
  41aa08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0041aa0c <.LCFI8>:
  41aa0c:	b090      	sub	sp, #64	; 0x40

0041aa0e <.LCFI9>:
  41aa0e:	af00      	add	r7, sp, #0

0041aa10 <.LCFI10>:
  41aa10:	f5ad 7d20 	sub.w	sp, sp, #640	; 0x280
  41aa14:	f10d 057f 	add.w	r5, sp, #127	; 0x7f
  41aa18:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
    test_sha[0] = a;
  41aa1c:	4b1c      	ldr	r3, [pc, #112]	; (41aa90 <.LCFI12+0x4>)
  41aa1e:	603b      	str	r3, [r7, #0]
  41aa20:	f503 7223 	add.w	r2, r3, #652	; 0x28c
  41aa24:	607a      	str	r2, [r7, #4]
  41aa26:	2203      	movs	r2, #3
  41aa28:	60ba      	str	r2, [r7, #8]
  41aa2a:	2220      	movs	r2, #32
  41aa2c:	60fa      	str	r2, [r7, #12]
    test_sha[1] = b;
  41aa2e:	f503 71e2 	add.w	r1, r3, #452	; 0x1c4
  41aa32:	6139      	str	r1, [r7, #16]
  41aa34:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
  41aa38:	617b      	str	r3, [r7, #20]
  41aa3a:	2338      	movs	r3, #56	; 0x38
  41aa3c:	61bb      	str	r3, [r7, #24]
  41aa3e:	61fa      	str	r2, [r7, #28]
    CRYPT_SHA256_Initialize(&sha);
  41aa40:	4628      	mov	r0, r5
  41aa42:	f004 f8f7 	bl	41ec34 <.LFE158>

0041aa46 <.LVL15>:
    appData.sha256_test_result = times;
  41aa46:	2202      	movs	r2, #2
  41aa48:	4b12      	ldr	r3, [pc, #72]	; (41aa94 <.LCFI12+0x8>)
  41aa4a:	60da      	str	r2, [r3, #12]

0041aa4c <.LVL16>:
  41aa4c:	2400      	movs	r4, #0
            appData.sha256_test_result--;
  41aa4e:	4698      	mov	r8, r3
  41aa50:	e002      	b.n	41aa58 <.LVL17+0x6>

0041aa52 <.LVL17>:
  41aa52:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  41aa54:	2c20      	cmp	r4, #32
  41aa56:	d017      	beq.n	41aa88 <.LVL20+0x10>
  41aa58:	193e      	adds	r6, r7, r4
        CRYPT_SHA256_DataAdd(&sha, (byte*)test_sha[i].input,(word32)test_sha[i].inLen);
  41aa5a:	68b2      	ldr	r2, [r6, #8]
  41aa5c:	5939      	ldr	r1, [r7, r4]
  41aa5e:	4628      	mov	r0, r5
  41aa60:	f003 ff5c 	bl	41e91c <.LFE161>

0041aa64 <.LVL18>:
        CRYPT_SHA256_Finalize(&sha, hash);
  41aa64:	f107 0120 	add.w	r1, r7, #32
  41aa68:	4628      	mov	r0, r5
  41aa6a:	f003 ff63 	bl	41e934 <.LFE164>

0041aa6e <.LVL19>:
        if (memcmp(hash, test_sha[i].output, SHA256_DIGEST_SIZE) == 0)
  41aa6e:	2220      	movs	r2, #32
  41aa70:	6871      	ldr	r1, [r6, #4]
  41aa72:	18b8      	adds	r0, r7, r2
  41aa74:	f001 ffe8 	bl	41ca48 <memcmp>

0041aa78 <.LVL20>:
  41aa78:	2800      	cmp	r0, #0
  41aa7a:	d1ea      	bne.n	41aa52 <.LVL17>
            appData.sha256_test_result--;
  41aa7c:	f8d8 300c 	ldr.w	r3, [r8, #12]
  41aa80:	3b01      	subs	r3, #1
  41aa82:	f8c8 300c 	str.w	r3, [r8, #12]
  41aa86:	e7e4      	b.n	41aa52 <.LVL17>
}
  41aa88:	3740      	adds	r7, #64	; 0x40

0041aa8a <.LCFI11>:
  41aa8a:	46bd      	mov	sp, r7

0041aa8c <.LCFI12>:
  41aa8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41aa90:	0040accc 	.word	0x0040accc
  41aa94:	20417598 	.word	0x20417598

Disassembly of section .text.wc_FreeRsaKey%204:

0041aa98 <wc_FreeRsaKey>:
    if (key == NULL) {
  41aa98:	2800      	cmp	r0, #0
  41aa9a:	d042      	beq.n	41ab22 <.LCFI16>
{
  41aa9c:	b510      	push	{r4, lr}

0041aa9e <.LCFI15>:
  41aa9e:	4604      	mov	r4, r0
    wc_RsaCleanup(key);
  41aaa0:	f001 fdb8 	bl	41c614 <.LFE12>

0041aaa4 <.LVL66>:
    if (key->type == RSA_PRIVATE) {
  41aaa4:	f241 1348 	movw	r3, #4424	; 0x1148
  41aaa8:	58e3      	ldr	r3, [r4, r3]
  41aaaa:	2b01      	cmp	r3, #1
  41aaac:	d020      	beq.n	41aaf0 <.LVL74+0x4>
    mp_clear(&key->u);
  41aaae:	f604 7018 	addw	r0, r4, #3864	; 0xf18
  41aab2:	f004 f973 	bl	41ed9c <.LFE170>

0041aab6 <.LVL67>:
    mp_clear(&key->dQ);
  41aab6:	f504 604f 	add.w	r0, r4, #3312	; 0xcf0
  41aaba:	f004 f96f 	bl	41ed9c <.LFE170>

0041aabe <.LVL68>:
    mp_clear(&key->dP);
  41aabe:	f604 20c8 	addw	r0, r4, #2760	; 0xac8
  41aac2:	f004 f96b 	bl	41ed9c <.LFE170>

0041aac6 <.LVL69>:
    mp_clear(&key->q);
  41aac6:	f504 600a 	add.w	r0, r4, #2208	; 0x8a0
  41aaca:	f004 f967 	bl	41ed9c <.LFE170>

0041aace <.LVL70>:
    mp_clear(&key->p);
  41aace:	f504 60cf 	add.w	r0, r4, #1656	; 0x678
  41aad2:	f004 f963 	bl	41ed9c <.LFE170>

0041aad6 <.LVL71>:
    mp_clear(&key->d);
  41aad6:	f504 608a 	add.w	r0, r4, #1104	; 0x450
  41aada:	f004 f95f 	bl	41ed9c <.LFE170>

0041aade <.LVL72>:
    mp_clear(&key->e);
  41aade:	f504 700a 	add.w	r0, r4, #552	; 0x228
  41aae2:	f004 f95b 	bl	41ed9c <.LFE170>

0041aae6 <.LVL73>:
    mp_clear(&key->n);
  41aae6:	4620      	mov	r0, r4
  41aae8:	f004 f958 	bl	41ed9c <.LFE170>

0041aaec <.LVL74>:
    return ret;
  41aaec:	2000      	movs	r0, #0
  41aaee:	bd10      	pop	{r4, pc}
        mp_forcezero(&key->u);
  41aaf0:	f604 7018 	addw	r0, r4, #3864	; 0xf18
  41aaf4:	f004 fa10 	bl	41ef18 <mp_forcezero>

0041aaf8 <.LVL76>:
        mp_forcezero(&key->dQ);
  41aaf8:	f504 604f 	add.w	r0, r4, #3312	; 0xcf0
  41aafc:	f004 fa0c 	bl	41ef18 <mp_forcezero>

0041ab00 <.LVL77>:
        mp_forcezero(&key->dP);
  41ab00:	f604 20c8 	addw	r0, r4, #2760	; 0xac8
  41ab04:	f004 fa08 	bl	41ef18 <mp_forcezero>

0041ab08 <.LVL78>:
        mp_forcezero(&key->q);
  41ab08:	f504 600a 	add.w	r0, r4, #2208	; 0x8a0
  41ab0c:	f004 fa04 	bl	41ef18 <mp_forcezero>

0041ab10 <.LVL79>:
        mp_forcezero(&key->p);
  41ab10:	f504 60cf 	add.w	r0, r4, #1656	; 0x678
  41ab14:	f004 fa00 	bl	41ef18 <mp_forcezero>

0041ab18 <.LVL80>:
        mp_forcezero(&key->d);
  41ab18:	f504 608a 	add.w	r0, r4, #1104	; 0x450
  41ab1c:	f004 f9fc 	bl	41ef18 <mp_forcezero>

0041ab20 <.LVL81>:
  41ab20:	e7c5      	b.n	41aaae <.LVL66+0xa>

0041ab22 <.LCFI16>:
        return BAD_FUNC_ARG;
  41ab22:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041ab26 <.LVL83>:
  41ab26:	4770      	bx	lr

Disassembly of section .text.wc_ShaFinal%205:

0041ab28 <wc_ShaFinal>:
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };



int wc_ShaFinal(Sha* sha, byte* hash)
{
  41ab28:	b570      	push	{r4, r5, r6, lr}

0041ab2a <.LCFI5>:
  41ab2a:	b082      	sub	sp, #8

0041ab2c <.LCFI6>:
  41ab2c:	4604      	mov	r4, r0
  41ab2e:	460d      	mov	r5, r1
    uint8_t  padn;
    uint8_t  msg_len[8];

    /* Get the number of bits */
    /* create the message bit length block */
    uint64_t total_bits = sha->total_len << 3;
  41ab30:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
  41ab34:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
  41ab38:	00db      	lsls	r3, r3, #3
  41ab3a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  41ab3e:	00d1      	lsls	r1, r2, #3

0041ab40 <.LVL43>:
    msg_len[0] = (uint8_t)(total_bits >> 56);
  41ab40:	0e18      	lsrs	r0, r3, #24

0041ab42 <.LVL44>:
  41ab42:	f88d 0000 	strb.w	r0, [sp]
    msg_len[1] = (uint8_t)(total_bits >> 48);
  41ab46:	0c18      	lsrs	r0, r3, #16
  41ab48:	f88d 0001 	strb.w	r0, [sp, #1]
    msg_len[2] = (uint8_t)(total_bits >> 40);
  41ab4c:	0a18      	lsrs	r0, r3, #8
  41ab4e:	f88d 0002 	strb.w	r0, [sp, #2]
    msg_len[3] = (uint8_t)(total_bits >> 32);
  41ab52:	f88d 3003 	strb.w	r3, [sp, #3]
    msg_len[4] = (uint8_t)(total_bits >> 24);
  41ab56:	0e0b      	lsrs	r3, r1, #24

0041ab58 <.LVL45>:
  41ab58:	f88d 3004 	strb.w	r3, [sp, #4]
    msg_len[5] = (uint8_t)(total_bits >> 16);
  41ab5c:	0c0b      	lsrs	r3, r1, #16
  41ab5e:	f88d 3005 	strb.w	r3, [sp, #5]
    msg_len[6] = (uint8_t)(total_bits >>  8);
  41ab62:	0a0b      	lsrs	r3, r1, #8
  41ab64:	f88d 3006 	strb.w	r3, [sp, #6]
    msg_len[7] = (uint8_t)(total_bits);
  41ab68:	f88d 1007 	strb.w	r1, [sp, #7]

    last = sha->total_len & 0x3F;
  41ab6c:	f002 023f 	and.w	r2, r2, #63	; 0x3f

0041ab70 <.LVL46>:
    padn = (last < SHA_PAD_SIZE) ? (SHA_PAD_SIZE - last) : (120 - last);
  41ab70:	2a37      	cmp	r2, #55	; 0x37
  41ab72:	bf94      	ite	ls
  41ab74:	f1c2 0238 	rsbls	r2, r2, #56	; 0x38

0041ab78 <.LVL47>:
  41ab78:	f1c2 0278 	rsbhi	r2, r2, #120	; 0x78
  41ab7c:	b2d2      	uxtb	r2, r2

0041ab7e <.LVL48>:

    wc_ShaUpdate(sha, sha_padding, padn);
  41ab7e:	490d      	ldr	r1, [pc, #52]	; (41abb4 <.LVL53+0x2>)
  41ab80:	4620      	mov	r0, r4
  41ab82:	f000 fafe 	bl	41b182 <.LFE58>

0041ab86 <.LVL50>:

    wc_ShaUpdate(sha, msg_len, 8);
  41ab86:	2208      	movs	r2, #8
  41ab88:	4669      	mov	r1, sp
  41ab8a:	4620      	mov	r0, r4
  41ab8c:	f000 faf9 	bl	41b182 <.LFE58>

0041ab90 <.LVL51>:

    memcpy(hash, sha->digest, SHA_DIGEST_SIZE);
  41ab90:	4623      	mov	r3, r4
  41ab92:	f853 2f80 	ldr.w	r2, [r3, #128]!
  41ab96:	685e      	ldr	r6, [r3, #4]
  41ab98:	6898      	ldr	r0, [r3, #8]
  41ab9a:	68d9      	ldr	r1, [r3, #12]
  41ab9c:	602a      	str	r2, [r5, #0]
  41ab9e:	606e      	str	r6, [r5, #4]
  41aba0:	60a8      	str	r0, [r5, #8]
  41aba2:	60e9      	str	r1, [r5, #12]
  41aba4:	691a      	ldr	r2, [r3, #16]
  41aba6:	612a      	str	r2, [r5, #16]

    return wc_InitSha(sha);
  41aba8:	4620      	mov	r0, r4
  41abaa:	f001 feed 	bl	41c988 <.LFE19>

0041abae <.LVL52>:
}
  41abae:	b002      	add	sp, #8

0041abb0 <.LCFI7>:
  41abb0:	bd70      	pop	{r4, r5, r6, pc}

0041abb2 <.LVL53>:
  41abb2:	bf00      	nop
  41abb4:	0041d7ec 	.word	0x0041d7ec

Disassembly of section .rodata%206:

0041abb8 <.rodata%206>:
  41abb8:	2e322e31 	.word	0x2e322e31
  41abbc:	00000037 	.word	0x00000037
  41abc0:	6465656e 	.word	0x6465656e
  41abc4:	63696420 	.word	0x63696420
  41abc8:	6e6f6974 	.word	0x6e6f6974
  41abcc:	00797261 	.word	0x00797261
  41abd0:	65727473 	.word	0x65727473
  41abd4:	65206d61 	.word	0x65206d61
  41abd8:	0000646e 	.word	0x0000646e
  41abdc:	00000000 	.word	0x00000000
  41abe0:	656c6966 	.word	0x656c6966
  41abe4:	72726520 	.word	0x72726520
  41abe8:	0000726f 	.word	0x0000726f
  41abec:	65727473 	.word	0x65727473
  41abf0:	65206d61 	.word	0x65206d61
  41abf4:	726f7272 	.word	0x726f7272
  41abf8:	00000000 	.word	0x00000000
  41abfc:	61746164 	.word	0x61746164
  41ac00:	72726520 	.word	0x72726520
  41ac04:	0000726f 	.word	0x0000726f
  41ac08:	75736e69 	.word	0x75736e69
  41ac0c:	63696666 	.word	0x63696666
  41ac10:	746e6569 	.word	0x746e6569
  41ac14:	6d656d20 	.word	0x6d656d20
  41ac18:	0079726f 	.word	0x0079726f
  41ac1c:	66667562 	.word	0x66667562
  41ac20:	65207265 	.word	0x65207265
  41ac24:	726f7272 	.word	0x726f7272
  41ac28:	00000000 	.word	0x00000000
  41ac2c:	6f636e69 	.word	0x6f636e69
  41ac30:	7461706d 	.word	0x7461706d
  41ac34:	656c6269 	.word	0x656c6269
  41ac38:	72657620 	.word	0x72657620
  41ac3c:	6e6f6973 	.word	0x6e6f6973
  41ac40:	00          	.byte	0x00
  41ac41:	00          	.byte	0x00
  41ac42:	bf00      	nop

Disassembly of section .text.PIO_Initialize%207:

0041ac44 <PIO_Initialize>:
    See plib_pio.h for more details.
*/
void PIO_Initialize ( void )
{
    /* Selected System IO pins are configured as GPIO */
    MATRIX_REGS->CCFG_SYSIO |= 0x10;
  41ac44:	4a20      	ldr	r2, [pc, #128]	; (41acc8 <PIO_Initialize+0x84>)
  41ac46:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  41ac4a:	f043 0310 	orr.w	r3, r3, #16
  41ac4e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    /************************ PIO A Initialization ************************/
    /* PORTA PIO Disable and Peripheral Enable*/
    ((pio_registers_t*)PIO_PORT_A)->PIO_PDR = 0x200000;
  41ac52:	f502 22b1 	add.w	r2, r2, #362496	; 0x58800
  41ac56:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
  41ac5a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  41ac5e:	6053      	str	r3, [r2, #4]
    /* PORTA Pull Up Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_A)->PIO_PUDR = ~0x800;
  41ac60:	f46f 6300 	mvn.w	r3, #2048	; 0x800
  41ac64:	6613      	str	r3, [r2, #96]	; 0x60
    ((pio_registers_t*)PIO_PORT_A)->PIO_PUER = 0x800;
  41ac66:	f44f 6300 	mov.w	r3, #2048	; 0x800
  41ac6a:	6653      	str	r3, [r2, #100]	; 0x64
    /* PORTA Pull Down Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_A)->PIO_PPDDR = 0xFFFFFFFF;
  41ac6c:	f04f 33ff 	mov.w	r3, #4294967295
  41ac70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* PORTA Output Write Enable */
    ((pio_registers_t*)PIO_PORT_A)->PIO_OWER = PIO_OWER_Msk;
  41ac74:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    /* PORTA Output Direction Enable */
    ((pio_registers_t*)PIO_PORT_A)->PIO_OER = 0x20;
  41ac78:	2120      	movs	r1, #32
  41ac7a:	6111      	str	r1, [r2, #16]
    /* PORTA Initial state High */
    ((pio_registers_t*)PIO_PORT_A)->PIO_SODR = 0x20;
  41ac7c:	6311      	str	r1, [r2, #48]	; 0x30

    /************************ PIO B Initialization ************************/
    /* PORTB Peripheral Function Selection */
    ((pio_registers_t*)PIO_PORT_B)->PIO_ABCDSR[0]= 0x10;
  41ac7e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  41ac82:	2110      	movs	r1, #16
  41ac84:	6711      	str	r1, [r2, #112]	; 0x70
    ((pio_registers_t*)PIO_PORT_B)->PIO_ABCDSR[1]= 0x10;
  41ac86:	6751      	str	r1, [r2, #116]	; 0x74
    /* PORTB PIO Disable and Peripheral Enable*/
    ((pio_registers_t*)PIO_PORT_B)->PIO_PDR = 0x10;
  41ac88:	6051      	str	r1, [r2, #4]
    /* PORTB Pull Up Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_B)->PIO_PUDR = 0xFFFFFFFF;
  41ac8a:	6613      	str	r3, [r2, #96]	; 0x60
    /* PORTB Pull Down Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_B)->PIO_PPDDR = 0xFFFFFFFF;
  41ac8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* PORTB Output Write Enable */
    ((pio_registers_t*)PIO_PORT_B)->PIO_OWER = PIO_OWER_Msk;
  41ac90:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    /* PORTB Output Direction Enable */
    ((pio_registers_t*)PIO_PORT_B)->PIO_OER = 0x100;
  41ac94:	f44f 7180 	mov.w	r1, #256	; 0x100
  41ac98:	6111      	str	r1, [r2, #16]
    /* PORTB Initial state High */
    ((pio_registers_t*)PIO_PORT_B)->PIO_SODR = 0x100;
  41ac9a:	6311      	str	r1, [r2, #48]	; 0x30

    /************************ PIO C Initialization ************************/
    /* PORTC Pull Up Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_C)->PIO_PUDR = 0xFFFFFFFF;
  41ac9c:	f502 7200 	add.w	r2, r2, #512	; 0x200
  41aca0:	6613      	str	r3, [r2, #96]	; 0x60
    /* PORTC Pull Down Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_C)->PIO_PPDDR = 0xFFFFFFFF;
  41aca2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* PORTC Output Write Enable */
    ((pio_registers_t*)PIO_PORT_C)->PIO_OWER = PIO_OWER_Msk;
  41aca6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    /************************ PIO D Initialization ************************/
    /* PORTD Pull Up Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_D)->PIO_PUDR = 0xFFFFFFFF;
  41acaa:	f502 7200 	add.w	r2, r2, #512	; 0x200
  41acae:	6613      	str	r3, [r2, #96]	; 0x60
    /* PORTD Pull Down Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_D)->PIO_PPDDR = 0xFFFFFFFF;
  41acb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* PORTD Output Write Enable */
    ((pio_registers_t*)PIO_PORT_D)->PIO_OWER = PIO_OWER_Msk;
  41acb4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    /************************ PIO E Initialization ************************/
    /* PORTE Pull Up Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_E)->PIO_PUDR = 0xFFFFFFFF;
  41acb8:	f502 7200 	add.w	r2, r2, #512	; 0x200
  41acbc:	6613      	str	r3, [r2, #96]	; 0x60
    /* PORTE Pull Down Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_E)->PIO_PPDDR = 0xFFFFFFFF;
  41acbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* PORTE Output Write Enable */
    ((pio_registers_t*)PIO_PORT_E)->PIO_OWER = PIO_OWER_Msk;
  41acc2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  41acc6:	4770      	bx	lr
  41acc8:	40088000 	.word	0x40088000

Disassembly of section .text.wc_Des_CbcDecrypt%208:

0041accc <wc_Des_CbcDecrypt>:
    {
  41accc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

0041acd0 <.LCFI12>:
        word32 blocks = sz / DES_BLOCK_SIZE;
  41acd0:	08db      	lsrs	r3, r3, #3

0041acd2 <.LVL195>:
        while (blocks--) {
  41acd2:	2b00      	cmp	r3, #0
  41acd4:	d03b      	beq.n	41ad4e <.LBE265>
  41acd6:	4604      	mov	r4, r0
  41acd8:	460d      	mov	r5, r1
  41acda:	4617      	mov	r7, r2
  41acdc:	f103 39ff 	add.w	r9, r3, #4294967295

0041ace0 <.LVL196>:
  41ace0:	f101 38ff 	add.w	r8, r1, #4294967295
            XMEMCPY(des->tmp, in, DES_BLOCK_SIZE);
  41ace4:	f100 0608 	add.w	r6, r0, #8
  41ace8:	e016      	b.n	41ad18 <.LBE261+0x1a>

0041acea <.LBB261>:
    for (i = 0; i < n; i++) r[i] ^= a[i];
  41acea:	f8d8 3001 	ldr.w	r3, [r8, #1]
  41acee:	6822      	ldr	r2, [r4, #0]
  41acf0:	4053      	eors	r3, r2
  41acf2:	f8c8 3001 	str.w	r3, [r8, #1]

0041acf6 <.LVL198>:
  41acf6:	686b      	ldr	r3, [r5, #4]
  41acf8:	6862      	ldr	r2, [r4, #4]
  41acfa:	4053      	eors	r3, r2
  41acfc:	606b      	str	r3, [r5, #4]

0041acfe <.LBE261>:
            XMEMCPY(des->reg, des->tmp, DES_BLOCK_SIZE);
  41acfe:	6832      	ldr	r2, [r6, #0]
  41ad00:	6873      	ldr	r3, [r6, #4]
  41ad02:	6022      	str	r2, [r4, #0]
  41ad04:	6063      	str	r3, [r4, #4]
            out += DES_BLOCK_SIZE;
  41ad06:	3508      	adds	r5, #8
            in  += DES_BLOCK_SIZE;
  41ad08:	3708      	adds	r7, #8
        while (blocks--) {
  41ad0a:	f109 39ff 	add.w	r9, r9, #4294967295
  41ad0e:	f108 0808 	add.w	r8, r8, #8
  41ad12:	f1b9 3fff 	cmp.w	r9, #4294967295
  41ad16:	d01a      	beq.n	41ad4e <.LBE265>
            XMEMCPY(des->tmp, in, DES_BLOCK_SIZE);
  41ad18:	683a      	ldr	r2, [r7, #0]
  41ad1a:	687b      	ldr	r3, [r7, #4]
  41ad1c:	6032      	str	r2, [r6, #0]
  41ad1e:	6073      	str	r3, [r6, #4]
            DesProcessBlock(des, (byte*)des->tmp, out);
  41ad20:	462a      	mov	r2, r5
  41ad22:	4631      	mov	r1, r6
  41ad24:	4620      	mov	r0, r4
  41ad26:	f7fc fc07 	bl	417538 <.LFE160>

0041ad2a <.LBB267>:
    if (((wolfssl_word)buf | (wolfssl_word)mask | count) % WOLFSSL_WORD_SIZE == 0)
  41ad2a:	ea45 0304 	orr.w	r3, r5, r4
  41ad2e:	f013 0f03 	tst.w	r3, #3
  41ad32:	d0da      	beq.n	41acea <.LBB261>
  41ad34:	1e61      	subs	r1, r4, #1
  41ad36:	f105 0e07 	add.w	lr, r5, #7
  41ad3a:	4643      	mov	r3, r8

0041ad3c <.LBB265>:
        for (i = 0; i < count; i++) b[i] ^= m[i];
  41ad3c:	785a      	ldrb	r2, [r3, #1]
  41ad3e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  41ad42:	4042      	eors	r2, r0
  41ad44:	f803 2f01 	strb.w	r2, [r3, #1]!
  41ad48:	4573      	cmp	r3, lr
  41ad4a:	d1f7      	bne.n	41ad3c <.LBB265>
  41ad4c:	e7d7      	b.n	41acfe <.LBE261>

0041ad4e <.LBE265>:
    }
  41ad4e:	2000      	movs	r0, #0
  41ad50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

Disassembly of section .text.wc_Md5Update%209:

0041ad54 <wc_Md5Update>:
    if (md5 == NULL || (data == NULL && len > 0)) {
  41ad54:	b3a0      	cbz	r0, 41adc0 <.LCFI4>
{
  41ad56:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

0041ad5a <.LCFI3>:
  41ad5a:	460f      	mov	r7, r1
  41ad5c:	4615      	mov	r5, r2
  41ad5e:	4606      	mov	r6, r0
    if (md5 == NULL || (data == NULL && len > 0)) {
  41ad60:	b901      	cbnz	r1, 41ad64 <.LCFI3+0xa>
  41ad62:	bb82      	cbnz	r2, 41adc6 <.LCFI5>
    local = (byte*)md5->buffer;
  41ad64:	f106 080c 	add.w	r8, r6, #12

0041ad68 <.LVL331>:
    if (md5->buffLen >= MD5_BLOCK_SIZE)
  41ad68:	6833      	ldr	r3, [r6, #0]
  41ad6a:	2b3f      	cmp	r3, #63	; 0x3f
  41ad6c:	d82f      	bhi.n	41adce <.LVL346>
    while (len) {
  41ad6e:	b395      	cbz	r5, 41add6 <.LVL348>

0041ad70 <.LBB141>:
            md5->buffLen = 0;
  41ad70:	f04f 0900 	mov.w	r9, #0
  41ad74:	e002      	b.n	41ad7c <.LBB146>

0041ad76 <.LVL332>:
  41ad76:	f8c6 9000 	str.w	r9, [r6]

0041ad7a <.LBE141>:
    while (len) {
  41ad7a:	b1f5      	cbz	r5, 41adba <.LBE144>

0041ad7c <.LBB146>:
        word32 add = min(len, MD5_BLOCK_SIZE - md5->buffLen);
  41ad7c:	6830      	ldr	r0, [r6, #0]

0041ad7e <.LVL333>:
  41ad7e:	f1c0 0440 	rsb	r4, r0, #64	; 0x40

0041ad82 <.LBB142>:
        return a > b ? b : a;
  41ad82:	42ac      	cmp	r4, r5
  41ad84:	bf28      	it	cs
  41ad86:	462c      	movcs	r4, r5

0041ad88 <.LBE142>:
        XMEMCPY(&local[md5->buffLen], data, add);
  41ad88:	4622      	mov	r2, r4
  41ad8a:	4639      	mov	r1, r7
  41ad8c:	4440      	add	r0, r8
  41ad8e:	f7fb fd7b 	bl	416888 <memcpy>

0041ad92 <.LVL336>:
        md5->buffLen += add;
  41ad92:	6833      	ldr	r3, [r6, #0]
  41ad94:	4423      	add	r3, r4
  41ad96:	6033      	str	r3, [r6, #0]
        data         += add;
  41ad98:	4427      	add	r7, r4
        len          -= add;
  41ad9a:	1b2d      	subs	r5, r5, r4
        if (md5->buffLen == MD5_BLOCK_SIZE) {
  41ad9c:	2b40      	cmp	r3, #64	; 0x40
  41ad9e:	d1ec      	bne.n	41ad7a <.LBE141>
            XTRANSFORM(md5, local);
  41ada0:	4630      	mov	r0, r6
  41ada2:	f7f2 fabf 	bl	40d324 <Transform>

0041ada6 <.LBB144>:
    word32 tmp = md5->loLen;
  41ada6:	6872      	ldr	r2, [r6, #4]

0041ada8 <.LVL340>:
    if ((md5->loLen += len) < tmp) {
  41ada8:	f102 0340 	add.w	r3, r2, #64	; 0x40
  41adac:	6073      	str	r3, [r6, #4]
  41adae:	429a      	cmp	r2, r3
  41adb0:	d9e1      	bls.n	41ad76 <.LVL332>
        md5->hiLen++;                       /* carry low to high */
  41adb2:	68b3      	ldr	r3, [r6, #8]
  41adb4:	3301      	adds	r3, #1
  41adb6:	60b3      	str	r3, [r6, #8]
  41adb8:	e7dd      	b.n	41ad76 <.LVL332>

0041adba <.LBE144>:
    return ret;
  41adba:	2000      	movs	r0, #0
  41adbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0041adc0 <.LCFI4>:
        return BAD_FUNC_ARG;
  41adc0:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041adc4 <.LVL343>:
  41adc4:	4770      	bx	lr

0041adc6 <.LCFI5>:
  41adc6:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041adca <.LVL345>:
  41adca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0041adce <.LVL346>:
        return BUFFER_E;
  41adce:	f06f 0083 	mvn.w	r0, #131	; 0x83

0041add2 <.LVL347>:
  41add2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0041add6 <.LVL348>:
    return ret;
  41add6:	2000      	movs	r0, #0

0041add8 <.LVL349>:
}
  41add8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

Disassembly of section .text.wc_InitRsaKey_ex%210:

0041addc <wc_InitRsaKey_ex>:
{
  41addc:	b570      	push	{r4, r5, r6, lr}

0041adde <.LCFI10>:
  41adde:	b082      	sub	sp, #8

0041ade0 <.LCFI11>:
    if (key == NULL) {
  41ade0:	2800      	cmp	r0, #0
  41ade2:	d03c      	beq.n	41ae5e <.LVL62>
  41ade4:	4604      	mov	r4, r0
    key->type = RSA_TYPE_UNKNOWN;
  41ade6:	f04f 32ff 	mov.w	r2, #4294967295

0041adea <.LVL52>:
  41adea:	f241 1348 	movw	r3, #4424	; 0x1148
  41adee:	50c2      	str	r2, [r0, r3]
    key->state = RSA_STATE_NONE;
  41adf0:	2200      	movs	r2, #0
  41adf2:	f241 134c 	movw	r3, #4428	; 0x114c
  41adf6:	50c2      	str	r2, [r0, r3]
    key->heap = heap;
  41adf8:	f500 538a 	add.w	r3, r0, #4416	; 0x1140
  41adfc:	6019      	str	r1, [r3, #0]
    key->data = NULL;
  41adfe:	f241 1344 	movw	r3, #4420	; 0x1144
  41ae02:	50c2      	str	r2, [r0, r3]
    key->dataLen = 0;
  41ae04:	f241 1350 	movw	r3, #4432	; 0x1150
  41ae08:	50c2      	str	r2, [r0, r3]
    key->dataIsAlloc = 0;
  41ae0a:	f241 1354 	movw	r3, #4436	; 0x1154
  41ae0e:	54c2      	strb	r2, [r0, r3]
    ret = mp_init_multi(&key->n, &key->e, NULL, NULL, NULL, NULL);
  41ae10:	f500 760a 	add.w	r6, r0, #552	; 0x228
  41ae14:	9201      	str	r2, [sp, #4]
  41ae16:	9200      	str	r2, [sp, #0]
  41ae18:	4613      	mov	r3, r2
  41ae1a:	4631      	mov	r1, r6

0041ae1c <.LVL53>:
  41ae1c:	f002 fd26 	bl	41d86c <mp_init_multi>

0041ae20 <.LVL54>:
    if (ret != MP_OKAY)
  41ae20:	4605      	mov	r5, r0
  41ae22:	b110      	cbz	r0, 41ae2a <.LCFI13>

0041ae24 <.LVL55>:
}
  41ae24:	4628      	mov	r0, r5
  41ae26:	b002      	add	sp, #8

0041ae28 <.LCFI12>:
  41ae28:	bd70      	pop	{r4, r5, r6, pc}

0041ae2a <.LCFI13>:
    ret = mp_init_multi(&key->d, &key->p, &key->q, &key->dP, &key->dQ, &key->u);
  41ae2a:	f604 7318 	addw	r3, r4, #3864	; 0xf18
  41ae2e:	9301      	str	r3, [sp, #4]
  41ae30:	f504 634f 	add.w	r3, r4, #3312	; 0xcf0
  41ae34:	9300      	str	r3, [sp, #0]
  41ae36:	f604 23c8 	addw	r3, r4, #2760	; 0xac8
  41ae3a:	f504 620a 	add.w	r2, r4, #2208	; 0x8a0
  41ae3e:	f504 61cf 	add.w	r1, r4, #1656	; 0x678
  41ae42:	f504 608a 	add.w	r0, r4, #1104	; 0x450

0041ae46 <.LVL57>:
  41ae46:	f002 fd11 	bl	41d86c <mp_init_multi>

0041ae4a <.LVL58>:
    if (ret != MP_OKAY) {
  41ae4a:	4605      	mov	r5, r0
  41ae4c:	2800      	cmp	r0, #0
  41ae4e:	d0e9      	beq.n	41ae24 <.LVL55>
        mp_clear(&key->n);
  41ae50:	4620      	mov	r0, r4

0041ae52 <.LVL59>:
  41ae52:	f003 ffa3 	bl	41ed9c <.LFE170>

0041ae56 <.LVL60>:
        mp_clear(&key->e);
  41ae56:	4630      	mov	r0, r6
  41ae58:	f003 ffa0 	bl	41ed9c <.LFE170>

0041ae5c <.LVL61>:
        return ret;
  41ae5c:	e7e2      	b.n	41ae24 <.LVL55>

0041ae5e <.LVL62>:
        return BAD_FUNC_ARG;
  41ae5e:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  41ae62:	e7df      	b.n	41ae24 <.LVL55>

Disassembly of section .text.inflateInit2_%211:

0041ae64 <inflateInit2_>:
{
  41ae64:	b570      	push	{r4, r5, r6, lr}

0041ae66 <.LCFI9>:
    if (version == Z_NULL || version[0] != ZLIB_VERSION[0] ||
  41ae66:	2a00      	cmp	r2, #0
  41ae68:	d030      	beq.n	41aecc <.LVL79>
  41ae6a:	7812      	ldrb	r2, [r2, #0]

0041ae6c <.LVL66>:
  41ae6c:	2a31      	cmp	r2, #49	; 0x31
  41ae6e:	d130      	bne.n	41aed2 <.LVL80>
  41ae70:	2b38      	cmp	r3, #56	; 0x38
  41ae72:	d12e      	bne.n	41aed2 <.LVL80>
    if (strm == Z_NULL) return Z_STREAM_ERROR;
  41ae74:	2800      	cmp	r0, #0
  41ae76:	d02f      	beq.n	41aed8 <.LVL80+0x6>
    strm->msg = Z_NULL;                 /* in case we return an error */
  41ae78:	2300      	movs	r3, #0

0041ae7a <.LVL67>:
  41ae7a:	6183      	str	r3, [r0, #24]
    if (strm->zalloc == (alloc_func)0) {
  41ae7c:	6a03      	ldr	r3, [r0, #32]
  41ae7e:	b1b3      	cbz	r3, 41aeae <.LVL75>
    if (strm->zfree == (free_func)0)
  41ae80:	6a43      	ldr	r3, [r0, #36]	; 0x24
  41ae82:	b1cb      	cbz	r3, 41aeb8 <.LVL75+0xa>
  41ae84:	460d      	mov	r5, r1
  41ae86:	4604      	mov	r4, r0
    state = (struct inflate_state FAR *)
  41ae88:	6a03      	ldr	r3, [r0, #32]
  41ae8a:	f641 32cc 	movw	r2, #7116	; 0x1bcc
  41ae8e:	2101      	movs	r1, #1

0041ae90 <.LVL68>:
  41ae90:	6a80      	ldr	r0, [r0, #40]	; 0x28

0041ae92 <.LVL69>:
  41ae92:	4798      	blx	r3

0041ae94 <.LVL70>:
    if (state == Z_NULL) return Z_MEM_ERROR;
  41ae94:	4606      	mov	r6, r0
  41ae96:	b310      	cbz	r0, 41aede <.LVL81>
    strm->state = (struct internal_state FAR *)state;
  41ae98:	61e0      	str	r0, [r4, #28]
    state->window = Z_NULL;
  41ae9a:	2300      	movs	r3, #0
  41ae9c:	6343      	str	r3, [r0, #52]	; 0x34
    ret = inflateReset2(strm, windowBits);
  41ae9e:	4629      	mov	r1, r5
  41aea0:	4620      	mov	r0, r4

0041aea2 <.LVL71>:
  41aea2:	f001 fe60 	bl	41cb66 <.LFE171>

0041aea6 <.LVL72>:
    if (ret != Z_OK) {
  41aea6:	4605      	mov	r5, r0

0041aea8 <.LVL73>:
  41aea8:	b948      	cbnz	r0, 41aebe <.LVL76>

0041aeaa <.LVL74>:
}
  41aeaa:	4628      	mov	r0, r5
  41aeac:	bd70      	pop	{r4, r5, r6, pc}

0041aeae <.LVL75>:
        strm->zalloc = zcalloc;
  41aeae:	4b0d      	ldr	r3, [pc, #52]	; (41aee4 <.LVL82+0x2>)
  41aeb0:	6203      	str	r3, [r0, #32]
        strm->opaque = (voidpf)0;
  41aeb2:	2300      	movs	r3, #0
  41aeb4:	6283      	str	r3, [r0, #40]	; 0x28
  41aeb6:	e7e3      	b.n	41ae80 <.LVL67+0x6>
        strm->zfree = zcfree;
  41aeb8:	4b0b      	ldr	r3, [pc, #44]	; (41aee8 <.LVL82+0x6>)
  41aeba:	6243      	str	r3, [r0, #36]	; 0x24
  41aebc:	e7e2      	b.n	41ae84 <.LVL67+0xa>

0041aebe <.LVL76>:
        ZFREE(strm, state);
  41aebe:	6a63      	ldr	r3, [r4, #36]	; 0x24
  41aec0:	4631      	mov	r1, r6
  41aec2:	6aa0      	ldr	r0, [r4, #40]	; 0x28

0041aec4 <.LVL77>:
  41aec4:	4798      	blx	r3

0041aec6 <.LVL78>:
        strm->state = Z_NULL;
  41aec6:	2300      	movs	r3, #0
  41aec8:	61e3      	str	r3, [r4, #28]
  41aeca:	e7ee      	b.n	41aeaa <.LVL74>

0041aecc <.LVL79>:
        return Z_VERSION_ERROR;
  41aecc:	f06f 0505 	mvn.w	r5, #5
  41aed0:	e7eb      	b.n	41aeaa <.LVL74>

0041aed2 <.LVL80>:
  41aed2:	f06f 0505 	mvn.w	r5, #5
  41aed6:	e7e8      	b.n	41aeaa <.LVL74>
    if (strm == Z_NULL) return Z_STREAM_ERROR;
  41aed8:	f06f 0501 	mvn.w	r5, #1
  41aedc:	e7e5      	b.n	41aeaa <.LVL74>

0041aede <.LVL81>:
    if (state == Z_NULL) return Z_MEM_ERROR;
  41aede:	f06f 0503 	mvn.w	r5, #3

0041aee2 <.LVL82>:
  41aee2:	e7e2      	b.n	41aeaa <.LVL74>
  41aee4:	0041eda9 	.word	0x0041eda9
  41aee8:	0041eeb7 	.word	0x0041eeb7

Disassembly of section .text.fp_div_2%212:

0041aeec <fp_div_2>:
{
  41aeec:	b5f0      	push	{r4, r5, r6, r7, lr}

0041aeee <.LCFI9>:
  oldused = b->used;
  41aeee:	680e      	ldr	r6, [r1, #0]
  b->used = a->used;
  41aef0:	4686      	mov	lr, r0
  41aef2:	f85e 2b08 	ldr.w	r2, [lr], #8
  41aef6:	460f      	mov	r7, r1
  41aef8:	f847 2b08 	str.w	r2, [r7], #8

0041aefc <.LBB5>:
    tmpa = a->dp + b->used - 1;
  41aefc:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
  41af00:	4415      	add	r5, r2
  41af02:	00ad      	lsls	r5, r5, #2
  41af04:	44ae      	add	lr, r5
    tmpb = b->dp + b->used - 1;
  41af06:	443d      	add	r5, r7

0041af08 <.LVL76>:
    for (x = b->used - 1; x >= 0; x--) {
  41af08:	3a01      	subs	r2, #1

0041af0a <.LVL77>:
  41af0a:	d40d      	bmi.n	41af28 <.LVL84>
  41af0c:	2300      	movs	r3, #0

0041af0e <.LVL78>:
      rr = *tmpa & 1;
  41af0e:	f85e 4904 	ldr.w	r4, [lr], #-4

0041af12 <.LVL79>:
      *tmpb-- = (*tmpa-- >> 1) | (r << (DIGIT_BIT - 1));
  41af12:	07db      	lsls	r3, r3, #31

0041af14 <.LVL80>:
  41af14:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
  41af18:	f845 3904 	str.w	r3, [r5], #-4

0041af1c <.LVL81>:
    for (x = b->used - 1; x >= 0; x--) {
  41af1c:	3a01      	subs	r2, #1

0041af1e <.LVL82>:
      rr = *tmpa & 1;
  41af1e:	f004 0301 	and.w	r3, r4, #1

0041af22 <.LVL83>:
    for (x = b->used - 1; x >= 0; x--) {
  41af22:	f1b2 3fff 	cmp.w	r2, #4294967295
  41af26:	d1f2      	bne.n	41af0e <.LVL78>

0041af28 <.LVL84>:
    tmpb = b->dp + b->used;
  41af28:	680b      	ldr	r3, [r1, #0]
  41af2a:	eb07 0283 	add.w	r2, r7, r3, lsl #2

0041af2e <.LVL85>:
    for (x = b->used; x < oldused; x++) {
  41af2e:	429e      	cmp	r6, r3
  41af30:	dd05      	ble.n	41af3e <.LBE5>
      *tmpb++ = 0;
  41af32:	2400      	movs	r4, #0
  41af34:	f842 4b04 	str.w	r4, [r2], #4

0041af38 <.LVL86>:
    for (x = b->used; x < oldused; x++) {
  41af38:	3301      	adds	r3, #1

0041af3a <.LVL87>:
  41af3a:	429e      	cmp	r6, r3
  41af3c:	d1fa      	bne.n	41af34 <.LVL85+0x6>

0041af3e <.LBE5>:
  b->sign = a->sign;
  41af3e:	6845      	ldr	r5, [r0, #4]
  41af40:	604d      	str	r5, [r1, #4]
  fp_clamp (b);
  41af42:	680a      	ldr	r2, [r1, #0]

0041af44 <.LVL88>:
  41af44:	b192      	cbz	r2, 41af6c <.LVL90+0x22>
  41af46:	1e53      	subs	r3, r2, #1

0041af48 <.LVL89>:
  41af48:	1c50      	adds	r0, r2, #1

0041af4a <.LVL90>:
  41af4a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
  41af4e:	b970      	cbnz	r0, 41af6e <.LVL90+0x24>
  41af50:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  41af54:	3204      	adds	r2, #4
  41af56:	e000      	b.n	41af5a <.LVL90+0x10>
  41af58:	4623      	mov	r3, r4
  41af5a:	b133      	cbz	r3, 41af6a <.LVL90+0x20>
  41af5c:	1e5c      	subs	r4, r3, #1
  41af5e:	f852 0d04 	ldr.w	r0, [r2, #-4]!
  41af62:	2800      	cmp	r0, #0
  41af64:	d0f8      	beq.n	41af58 <.LVL90+0xe>
  41af66:	600b      	str	r3, [r1, #0]
  41af68:	e001      	b.n	41af6e <.LVL90+0x24>
  41af6a:	600b      	str	r3, [r1, #0]
  41af6c:	2500      	movs	r5, #0
  41af6e:	604d      	str	r5, [r1, #4]
}
  41af70:	bdf0      	pop	{r4, r5, r6, r7, pc}

Disassembly of section .text.fp_lshd%213:

0041af72 <fp_lshd>:
{
  41af72:	b4f0      	push	{r4, r5, r6, r7}

0041af74 <.LCFI26>:
    y = MIN(a->used + x - 1, (int)(FP_SIZE-1));
  41af74:	6803      	ldr	r3, [r0, #0]
  41af76:	440b      	add	r3, r1
  41af78:	1e5e      	subs	r6, r3, #1
  41af7a:	2e87      	cmp	r6, #135	; 0x87
  41af7c:	bfa8      	it	ge
  41af7e:	2687      	movge	r6, #135	; 0x87

0041af80 <.LVL238>:
    a->used = y + 1;
  41af80:	1c77      	adds	r7, r6, #1
  41af82:	6007      	str	r7, [r0, #0]
    for (; y >= x; y--) {
  41af84:	42b1      	cmp	r1, r6
  41af86:	dc25      	bgt.n	41afd4 <.LVL244>
  41af88:	f1c1 0202 	rsb	r2, r1, #2
  41af8c:	4432      	add	r2, r6
  41af8e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  41af92:	3204      	adds	r2, #4
  41af94:	eb00 0486 	add.w	r4, r0, r6, lsl #2
  41af98:	340c      	adds	r4, #12
  41af9a:	4633      	mov	r3, r6

0041af9c <.LVL239>:
        a->dp[y] = a->dp[y-x];
  41af9c:	f852 5d04 	ldr.w	r5, [r2, #-4]!
  41afa0:	f844 5d04 	str.w	r5, [r4, #-4]!
    for (; y >= x; y--) {
  41afa4:	3b01      	subs	r3, #1
  41afa6:	4299      	cmp	r1, r3
  41afa8:	ddf8      	ble.n	41af9c <.LVL239>
    for (; y >= 0; y--) {
  41afaa:	2b00      	cmp	r3, #0
  41afac:	db09      	blt.n	41afc2 <.LVL241+0xc>
  41afae:	eb00 0283 	add.w	r2, r0, r3, lsl #2
  41afb2:	320c      	adds	r2, #12
        a->dp[y] = 0;
  41afb4:	2100      	movs	r1, #0

0041afb6 <.LVL241>:
  41afb6:	f842 1d04 	str.w	r1, [r2, #-4]!
    for (; y >= 0; y--) {
  41afba:	3b01      	subs	r3, #1
  41afbc:	f1b3 3fff 	cmp.w	r3, #4294967295
  41afc0:	d1f9      	bne.n	41afb6 <.LVL241>
    fp_clamp(a);
  41afc2:	b1bf      	cbz	r7, 41aff4 <.LCFI28+0x4>
  41afc4:	1cb3      	adds	r3, r6, #2

0041afc6 <.LVL243>:
  41afc6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  41afca:	b96b      	cbnz	r3, 41afe8 <.LVL245+0x10>
  41afcc:	eb00 0386 	add.w	r3, r0, r6, lsl #2
  41afd0:	3308      	adds	r3, #8
  41afd2:	e002      	b.n	41afda <.LVL245+0x2>

0041afd4 <.LVL244>:
    y = MIN(a->used + x - 1, (int)(FP_SIZE-1));
  41afd4:	4633      	mov	r3, r6
  41afd6:	e7e8      	b.n	41afaa <.LVL239+0xe>

0041afd8 <.LVL245>:
    fp_clamp(a);
  41afd8:	460e      	mov	r6, r1
  41afda:	b14e      	cbz	r6, 41aff0 <.LCFI28>
  41afdc:	1e71      	subs	r1, r6, #1
  41afde:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  41afe2:	2a00      	cmp	r2, #0
  41afe4:	d0f8      	beq.n	41afd8 <.LVL245>
  41afe6:	6006      	str	r6, [r0, #0]
  41afe8:	6843      	ldr	r3, [r0, #4]
  41afea:	6043      	str	r3, [r0, #4]
}
  41afec:	bcf0      	pop	{r4, r5, r6, r7}

0041afee <.LCFI27>:
  41afee:	4770      	bx	lr

0041aff0 <.LCFI28>:
  41aff0:	2300      	movs	r3, #0
  41aff2:	6003      	str	r3, [r0, #0]
    fp_clamp(a);
  41aff4:	2300      	movs	r3, #0
  41aff6:	e7f8      	b.n	41afea <.LVL245+0x12>

Disassembly of section .text.wc_HmacUpdate%214:

0041aff8 <wc_HmacUpdate>:
    if (hmac == NULL) {
  41aff8:	2800      	cmp	r0, #0
  41affa:	d039      	beq.n	41b070 <.LCFI3>
{
  41affc:	b570      	push	{r4, r5, r6, lr}

0041affe <.LCFI2>:
  41affe:	4604      	mov	r4, r0
  41b000:	4616      	mov	r6, r2
  41b002:	460d      	mov	r5, r1
    if (!hmac->innerHashKeyed) {
  41b004:	f890 3245 	ldrb.w	r3, [r0, #581]	; 0x245
  41b008:	b143      	cbz	r3, 41b01c <.LVL124>

0041b00a <.LVL123>:
    switch (hmac->macType) {
  41b00a:	f894 3244 	ldrb.w	r3, [r4, #580]	; 0x244
  41b00e:	2b05      	cmp	r3, #5
  41b010:	d832      	bhi.n	41b078 <.LCFI4>
  41b012:	e8df f003 	tbb	[pc, r3]
  41b016:	1109      	.short	0x1109
  41b018:	1f263118 	.word	0x1f263118

0041b01c <.LVL124>:
        ret = HmacKeyInnerHash(hmac);
  41b01c:	f001 fd74 	bl	41cb08 <HmacKeyInnerHash>

0041b020 <.LVL125>:
        if (ret != 0)
  41b020:	4603      	mov	r3, r0
  41b022:	2800      	cmp	r0, #0
  41b024:	d0f1      	beq.n	41b00a <.LVL123>
  41b026:	e005      	b.n	41b034 <.LVL128>

0041b028 <.LVL126>:
            ret = wc_Md5Update(&hmac->hash.md5, msg, length);
  41b028:	4632      	mov	r2, r6
  41b02a:	4629      	mov	r1, r5
  41b02c:	4620      	mov	r0, r4
  41b02e:	f7ff fe91 	bl	41ad54 <.LFE23>

0041b032 <.LVL127>:
  41b032:	4603      	mov	r3, r0

0041b034 <.LVL128>:
}
  41b034:	4618      	mov	r0, r3
  41b036:	bd70      	pop	{r4, r5, r6, pc}

0041b038 <.LVL129>:
            ret = wc_ShaUpdate(&hmac->hash.sha, msg, length);
  41b038:	4632      	mov	r2, r6
  41b03a:	4629      	mov	r1, r5
  41b03c:	4620      	mov	r0, r4
  41b03e:	f000 f8a0 	bl	41b182 <.LFE58>

0041b042 <.LVL130>:
  41b042:	4603      	mov	r3, r0

0041b044 <.LVL131>:
            break;
  41b044:	e7f6      	b.n	41b034 <.LVL128>

0041b046 <.LVL132>:
            ret = wc_Sha256Update(&hmac->hash.sha256, msg, length);
  41b046:	4632      	mov	r2, r6
  41b048:	4629      	mov	r1, r5
  41b04a:	4620      	mov	r0, r4
  41b04c:	f000 f8da 	bl	41b204 <.LFE156>

0041b050 <.LVL133>:
  41b050:	4603      	mov	r3, r0

0041b052 <.LVL134>:
            break;
  41b052:	e7ef      	b.n	41b034 <.LVL128>

0041b054 <.LVL135>:
            ret = wc_Sha384Update(&hmac->hash.sha384, msg, length);
  41b054:	4632      	mov	r2, r6
  41b056:	4629      	mov	r1, r5
  41b058:	4620      	mov	r0, r4
  41b05a:	f7fc ffe4 	bl	418026 <.LBE719>

0041b05e <.LVL136>:
  41b05e:	4603      	mov	r3, r0

0041b060 <.LVL137>:
            break;
  41b060:	e7e8      	b.n	41b034 <.LVL128>

0041b062 <.LVL138>:
            ret = wc_Sha512Update(&hmac->hash.sha512, msg, length);
  41b062:	4632      	mov	r2, r6
  41b064:	4629      	mov	r1, r5
  41b066:	4620      	mov	r0, r4
  41b068:	f7fc ff68 	bl	417f3c <.LFE169>

0041b06c <.LVL139>:
  41b06c:	4603      	mov	r3, r0

0041b06e <.LVL140>:
            break;
  41b06e:	e7e1      	b.n	41b034 <.LVL128>

0041b070 <.LCFI3>:
        return BAD_FUNC_ARG;
  41b070:	f06f 03ac 	mvn.w	r3, #172	; 0xac
}
  41b074:	4618      	mov	r0, r3

0041b076 <.LVL142>:
  41b076:	4770      	bx	lr

0041b078 <.LCFI4>:
    switch (hmac->macType) {
  41b078:	2300      	movs	r3, #0
  41b07a:	e7db      	b.n	41b034 <.LVL128>

Disassembly of section .text.SYS_TIME_HwTimerCompareUpdate%215:

0041b07c <SYS_TIME_HwTimerCompareUpdate>:
{
  41b07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041b07e <.LCFI0>:
    SYS_TIME_TIMER_OBJ* tmrActive = counterObj->tmrActive;
  41b07e:	4b1f      	ldr	r3, [pc, #124]	; (41b0fc <.LVL24+0x8>)
  41b080:	6b19      	ldr	r1, [r3, #48]	; 0x30

0041b082 <.LVL14>:
    counterObj->hwTimerPreviousValue = counterObj->hwTimerCurrentValue;
  41b082:	695a      	ldr	r2, [r3, #20]
  41b084:	611a      	str	r2, [r3, #16]
    if (tmrActive != NULL)
  41b086:	2900      	cmp	r1, #0
  41b088:	d02f      	beq.n	41b0ea <.LVL22>
        if (tmrActive->relativeTimePending > SYS_TIME_HW_COUNTER_HALF_PERIOD)
  41b08a:	688c      	ldr	r4, [r1, #8]
  41b08c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
            nextHwCounterValue = counterObj->hwTimerCurrentValue + SYS_TIME_HW_COUNTER_HALF_PERIOD;
  41b090:	bf28      	it	cs
  41b092:	f647 74ff 	movwcs	r4, #32767	; 0x7fff
            nextHwCounterValue = counterObj->hwTimerCurrentValue + tmrActive->relativeTimePending;
  41b096:	4414      	add	r4, r2
  41b098:	2500      	movs	r5, #0

0041b09a <.LVL15>:
    currHwCounterValue = counterObj->timePlib->timerCounterGet();
  41b09a:	4e18      	ldr	r6, [pc, #96]	; (41b0fc <.LVL24+0x8>)
  41b09c:	6873      	ldr	r3, [r6, #4]
  41b09e:	699b      	ldr	r3, [r3, #24]
  41b0a0:	4798      	blx	r3

0041b0a2 <.LVL16>:
  41b0a2:	2100      	movs	r1, #0

0041b0a4 <.LVL17>:
    if (currHwCounterValue < counterObj->hwTimerPreviousValue)
  41b0a4:	6932      	ldr	r2, [r6, #16]
  41b0a6:	2300      	movs	r3, #0
  41b0a8:	4299      	cmp	r1, r3
  41b0aa:	bf08      	it	eq
  41b0ac:	4290      	cmpeq	r0, r2
  41b0ae:	d204      	bcs.n	41b0ba <.LVL19>
        currHwCounterValue = SYS_TIME_HW_COUNTER_PERIOD + currHwCounterValue;
  41b0b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
  41b0b4:	2300      	movs	r3, #0
  41b0b6:	1880      	adds	r0, r0, r2

0041b0b8 <.LVL18>:
  41b0b8:	4159      	adcs	r1, r3

0041b0ba <.LVL19>:
    if (nextHwCounterValue  < (currHwCounterValue + counterObj->hwTimerCompareMargin))
  41b0ba:	4b10      	ldr	r3, [pc, #64]	; (41b0fc <.LVL24+0x8>)
  41b0bc:	6a1b      	ldr	r3, [r3, #32]
  41b0be:	18c6      	adds	r6, r0, r3
  41b0c0:	f141 0700 	adc.w	r7, r1, #0
  41b0c4:	42bd      	cmp	r5, r7
  41b0c6:	bf08      	it	eq
  41b0c8:	42b4      	cmpeq	r4, r6
  41b0ca:	d213      	bcs.n	41b0f4 <.LVL24>
        counterObj->hwTimerCompareValue = currHwCounterValue + counterObj->hwTimerCompareMargin;
  41b0cc:	4418      	add	r0, r3

0041b0ce <.LVL20>:
  41b0ce:	4b0b      	ldr	r3, [pc, #44]	; (41b0fc <.LVL24+0x8>)
  41b0d0:	61d8      	str	r0, [r3, #28]
    if ((counterObj->hwTimerCompareValue & SYS_TIME_HW_COUNTER_PERIOD) == 0)
  41b0d2:	4b0a      	ldr	r3, [pc, #40]	; (41b0fc <.LVL24+0x8>)
  41b0d4:	8b9b      	ldrh	r3, [r3, #28]
  41b0d6:	b913      	cbnz	r3, 41b0de <.LVL20+0x10>
        counterObj->hwTimerCompareValue = 1;
  41b0d8:	2201      	movs	r2, #1
  41b0da:	4b08      	ldr	r3, [pc, #32]	; (41b0fc <.LVL24+0x8>)
  41b0dc:	61da      	str	r2, [r3, #28]
    counterObj->timePlib->timerCompareSet(counterObj->hwTimerCompareValue);
  41b0de:	4b07      	ldr	r3, [pc, #28]	; (41b0fc <.LVL24+0x8>)
  41b0e0:	685a      	ldr	r2, [r3, #4]
  41b0e2:	68d2      	ldr	r2, [r2, #12]
  41b0e4:	69d8      	ldr	r0, [r3, #28]
  41b0e6:	4790      	blx	r2
  41b0e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041b0ea <.LVL22>:
        nextHwCounterValue = counterObj->hwTimerCurrentValue + SYS_TIME_HW_COUNTER_HALF_PERIOD;
  41b0ea:	f647 74ff 	movw	r4, #32767	; 0x7fff
  41b0ee:	4414      	add	r4, r2
  41b0f0:	2500      	movs	r5, #0

0041b0f2 <.LVL23>:
  41b0f2:	e7d2      	b.n	41b09a <.LVL15>

0041b0f4 <.LVL24>:
        counterObj->hwTimerCompareValue = nextHwCounterValue;
  41b0f4:	4b01      	ldr	r3, [pc, #4]	; (41b0fc <.LVL24+0x8>)
  41b0f6:	61dc      	str	r4, [r3, #28]
  41b0f8:	e7eb      	b.n	41b0d2 <.LVL20+0x4>
  41b0fa:	bf00      	nop
  41b0fc:	20417688 	.word	0x20417688

Disassembly of section .text.fp_rshd%216:

0041b100 <fp_rshd>:
{
  41b100:	b570      	push	{r4, r5, r6, lr}

0041b102 <.LCFI37>:
  if (x >= a->used) {
  41b102:	6806      	ldr	r6, [r0, #0]
  41b104:	428e      	cmp	r6, r1
  41b106:	dd25      	ble.n	41b154 <.LVL322>

0041b108 <.LVL313>:
   for (y = 0; y < a->used - x; y++) {
  41b108:	1a75      	subs	r5, r6, r1
  41b10a:	2d00      	cmp	r5, #0
  41b10c:	dd25      	ble.n	41b15a <.LVL324>
  41b10e:	eb00 0281 	add.w	r2, r0, r1, lsl #2
  41b112:	3204      	adds	r2, #4
  41b114:	1d01      	adds	r1, r0, #4

0041b116 <.LVL314>:
  41b116:	2300      	movs	r3, #0

0041b118 <.LVL315>:
      a->dp[y] = a->dp[y+x];
  41b118:	f852 4f04 	ldr.w	r4, [r2, #4]!
  41b11c:	f841 4f04 	str.w	r4, [r1, #4]!
   for (y = 0; y < a->used - x; y++) {
  41b120:	3301      	adds	r3, #1
  41b122:	42ab      	cmp	r3, r5
  41b124:	d1f8      	bne.n	41b118 <.LVL315>

0041b126 <.LVL317>:
   for (; y < a->used; y++) {
  41b126:	42ae      	cmp	r6, r5
  41b128:	dd29      	ble.n	41b17e <.LVL326>
   for (y = 0; y < a->used - x; y++) {
  41b12a:	462b      	mov	r3, r5

0041b12c <.LVL318>:
  41b12c:	eb00 0283 	add.w	r2, r0, r3, lsl #2
  41b130:	3204      	adds	r2, #4
      a->dp[y] = 0;
  41b132:	2100      	movs	r1, #0

0041b134 <.LVL319>:
  41b134:	f842 1f04 	str.w	r1, [r2, #4]!
   for (; y < a->used; y++) {
  41b138:	3301      	adds	r3, #1
  41b13a:	429e      	cmp	r6, r3
  41b13c:	d1fa      	bne.n	41b134 <.LVL319>

0041b13e <.LVL321>:
   a->used -= x;
  41b13e:	6005      	str	r5, [r0, #0]
   fp_clamp(a);
  41b140:	b1d5      	cbz	r5, 41b178 <.LVL325+0x16>
  41b142:	1e6b      	subs	r3, r5, #1
  41b144:	1c6a      	adds	r2, r5, #1
  41b146:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  41b14a:	b992      	cbnz	r2, 41b172 <.LVL325+0x10>
  41b14c:	eb00 0285 	add.w	r2, r0, r5, lsl #2
  41b150:	3204      	adds	r2, #4
  41b152:	e007      	b.n	41b164 <.LVL325+0x2>

0041b154 <.LVL322>:
     fp_zero(a);
  41b154:	f003 fcea 	bl	41eb2c <.LFE154>

0041b158 <.LVL323>:
     return;
  41b158:	bd70      	pop	{r4, r5, r6, pc}

0041b15a <.LVL324>:
   for (; y < a->used; y++) {
  41b15a:	2e00      	cmp	r6, #0
  41b15c:	ddef      	ble.n	41b13e <.LVL321>
  41b15e:	2300      	movs	r3, #0
  41b160:	e7e4      	b.n	41b12c <.LVL318>

0041b162 <.LVL325>:
   fp_clamp(a);
  41b162:	4623      	mov	r3, r4
  41b164:	b13b      	cbz	r3, 41b176 <.LVL325+0x14>
  41b166:	1e5c      	subs	r4, r3, #1
  41b168:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  41b16c:	2900      	cmp	r1, #0
  41b16e:	d0f8      	beq.n	41b162 <.LVL325>
  41b170:	6003      	str	r3, [r0, #0]
  41b172:	6843      	ldr	r3, [r0, #4]
  41b174:	e001      	b.n	41b17a <.LVL325+0x18>
  41b176:	6003      	str	r3, [r0, #0]
  41b178:	2300      	movs	r3, #0
  41b17a:	6043      	str	r3, [r0, #4]
  41b17c:	bd70      	pop	{r4, r5, r6, pc}

0041b17e <.LVL326>:
   a->used -= x;
  41b17e:	6005      	str	r5, [r0, #0]
  41b180:	e7df      	b.n	41b142 <.LVL321+0x4>

Disassembly of section .text.wc_ShaUpdate%217:

0041b182 <wc_ShaUpdate>:
{
  41b182:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

0041b186 <.LCFI4>:
  41b186:	4605      	mov	r5, r0
  41b188:	460f      	mov	r7, r1
  41b18a:	4614      	mov	r4, r2

0041b18c <.LVL22>:
    left = sha->total_len & 0x3F;
  41b18c:	e9d0 2326 	ldrd	r2, r3, [r0, #152]	; 0x98

0041b190 <.LVL23>:
  41b190:	f002 063f 	and.w	r6, r2, #63	; 0x3f

0041b194 <.LVL24>:
    sha->total_len += len;
  41b194:	1912      	adds	r2, r2, r4
  41b196:	f143 0300 	adc.w	r3, r3, #0
  41b19a:	e9c0 2326 	strd	r2, r3, [r0, #152]	; 0x98
    if (left && len >= fill)
  41b19e:	b11e      	cbz	r6, 41b1a8 <.LVL26>
  41b1a0:	f1c6 0840 	rsb	r8, r6, #64	; 0x40

0041b1a4 <.LVL25>:
  41b1a4:	45a0      	cmp	r8, r4
  41b1a6:	d907      	bls.n	41b1b8 <.LVL28>

0041b1a8 <.LVL26>:
    uint32_t result = 0;
  41b1a8:	f04f 0900 	mov.w	r9, #0

0041b1ac <.LVL27>:
    if (len >= SHA_BLOCK_SIZE)
  41b1ac:	2c3f      	cmp	r4, #63	; 0x3f
  41b1ae:	d815      	bhi.n	41b1dc <.LVL35>
    if( len > 0 )
  41b1b0:	bb04      	cbnz	r4, 41b1f4 <.LVL40>
}
  41b1b2:	4648      	mov	r0, r9
  41b1b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0041b1b8 <.LVL28>:
        memcpy((void *)(sha->buffer + left), data, fill);
  41b1b8:	f100 0940 	add.w	r9, r0, #64	; 0x40
  41b1bc:	4642      	mov	r2, r8
  41b1be:	eb09 0006 	add.w	r0, r9, r6

0041b1c2 <.LVL29>:
  41b1c2:	f7fb fb61 	bl	416888 <memcpy>

0041b1c6 <.LVL30>:
        result = Sha1Process(sha, sha->buffer, SHA_BLOCK_SIZE);
  41b1c6:	2240      	movs	r2, #64	; 0x40
  41b1c8:	4649      	mov	r1, r9
  41b1ca:	4628      	mov	r0, r5
  41b1cc:	f7fd fe4c 	bl	418e68 <.LFE163>

0041b1d0 <.LVL31>:
  41b1d0:	4681      	mov	r9, r0

0041b1d2 <.LVL32>:
        data += fill;
  41b1d2:	4447      	add	r7, r8
        len -= fill;
  41b1d4:	eba4 0408 	sub.w	r4, r4, r8

0041b1d8 <.LVL34>:
        left = 0;
  41b1d8:	2600      	movs	r6, #0
  41b1da:	e7e7      	b.n	41b1ac <.LVL27>

0041b1dc <.LVL35>:
        result = Sha1Process(sha, data, len & 0xFFFFFFC0);
  41b1dc:	f024 083f 	bic.w	r8, r4, #63	; 0x3f
  41b1e0:	4642      	mov	r2, r8
  41b1e2:	4639      	mov	r1, r7
  41b1e4:	4628      	mov	r0, r5
  41b1e6:	f7fd fe3f 	bl	418e68 <.LFE163>

0041b1ea <.LVL36>:
  41b1ea:	4681      	mov	r9, r0

0041b1ec <.LVL37>:
        data += (len & 0xFFFFFFC0);
  41b1ec:	4447      	add	r7, r8
        len &= 0x3F;
  41b1ee:	f004 043f 	and.w	r4, r4, #63	; 0x3f
  41b1f2:	e7dd      	b.n	41b1b0 <.LVL27+0x4>

0041b1f4 <.LVL40>:
        memcpy((void *)(sha->buffer + left), data, len);
  41b1f4:	f105 0040 	add.w	r0, r5, #64	; 0x40
  41b1f8:	4622      	mov	r2, r4
  41b1fa:	4639      	mov	r1, r7
  41b1fc:	4430      	add	r0, r6
  41b1fe:	f7fb fb43 	bl	416888 <memcpy>

0041b202 <.LVL41>:
  41b202:	e7d6      	b.n	41b1b2 <.LVL27+0x6>

Disassembly of section .text.wc_Sha256Update%218:

0041b204 <wc_Sha256Update>:
{
  41b204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

0041b208 <.LCFI4>:
  41b208:	4605      	mov	r5, r0
  41b20a:	460f      	mov	r7, r1
  41b20c:	4614      	mov	r4, r2

0041b20e <.LVL22>:
    left = sha256->total_len & 0x3F;
  41b20e:	e9d0 2328 	ldrd	r2, r3, [r0, #160]	; 0xa0

0041b212 <.LVL23>:
  41b212:	f002 063f 	and.w	r6, r2, #63	; 0x3f

0041b216 <.LVL24>:
    sha256->total_len += len;
  41b216:	1912      	adds	r2, r2, r4
  41b218:	f143 0300 	adc.w	r3, r3, #0
  41b21c:	e9c0 2328 	strd	r2, r3, [r0, #160]	; 0xa0
    if (left && len >= fill)
  41b220:	b11e      	cbz	r6, 41b22a <.LVL26>
  41b222:	f1c6 0840 	rsb	r8, r6, #64	; 0x40

0041b226 <.LVL25>:
  41b226:	45a0      	cmp	r8, r4
  41b228:	d907      	bls.n	41b23a <.LVL28>

0041b22a <.LVL26>:
    int result = 0;
  41b22a:	f04f 0900 	mov.w	r9, #0

0041b22e <.LVL27>:
    if (len >= SHA256_BLOCK_SIZE)
  41b22e:	2c3f      	cmp	r4, #63	; 0x3f
  41b230:	d815      	bhi.n	41b25e <.LVL35>
    if (len > 0)
  41b232:	bb04      	cbnz	r4, 41b276 <.LVL40>
}
  41b234:	4648      	mov	r0, r9
  41b236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0041b23a <.LVL28>:
        memcpy((void *)(sha256->buffer + left), data, fill);
  41b23a:	f100 0940 	add.w	r9, r0, #64	; 0x40
  41b23e:	4642      	mov	r2, r8
  41b240:	eb09 0006 	add.w	r0, r9, r6

0041b244 <.LVL29>:
  41b244:	f7fb fb20 	bl	416888 <memcpy>

0041b248 <.LVL30>:
        result = Sha256Process(sha256, sha256->buffer, SHA256_BLOCK_SIZE);
  41b248:	2240      	movs	r2, #64	; 0x40
  41b24a:	4649      	mov	r1, r9
  41b24c:	4628      	mov	r0, r5
  41b24e:	f7fd f921 	bl	418494 <.LBE36>

0041b252 <.LVL31>:
  41b252:	4681      	mov	r9, r0

0041b254 <.LVL32>:
        data += fill;
  41b254:	4447      	add	r7, r8
        len -= fill;
  41b256:	eba4 0408 	sub.w	r4, r4, r8

0041b25a <.LVL34>:
        left = 0;
  41b25a:	2600      	movs	r6, #0
  41b25c:	e7e7      	b.n	41b22e <.LVL27>

0041b25e <.LVL35>:
        result = Sha256Process(sha256, data, len & 0xFFFFFFC0);
  41b25e:	f024 083f 	bic.w	r8, r4, #63	; 0x3f
  41b262:	4642      	mov	r2, r8
  41b264:	4639      	mov	r1, r7
  41b266:	4628      	mov	r0, r5
  41b268:	f7fd f914 	bl	418494 <.LBE36>

0041b26c <.LVL36>:
  41b26c:	4681      	mov	r9, r0

0041b26e <.LVL37>:
        data += (len & 0xFFFFFFC0);
  41b26e:	4447      	add	r7, r8
        len &= 0x3F;
  41b270:	f004 043f 	and.w	r4, r4, #63	; 0x3f
  41b274:	e7dd      	b.n	41b232 <.LVL27+0x4>

0041b276 <.LVL40>:
        memcpy((void *)(sha256->buffer + left), data, len);
  41b276:	f105 0040 	add.w	r0, r5, #64	; 0x40
  41b27a:	4622      	mov	r2, r4
  41b27c:	4639      	mov	r1, r7
  41b27e:	4430      	add	r0, r6
  41b280:	f7fb fb02 	bl	416888 <memcpy>

0041b284 <.LVL41>:
    return result;
  41b284:	e7d6      	b.n	41b234 <.LVL27+0x6>

Disassembly of section .text.wc_Compress%219:

0041b288 <wc_Compress>:
 * Note, the output buffer still needs to be larger than the input buffer.
 * The right chunk of data won't compress at all, and the lookup table will
 * add to the size of the output. The libz code says the compressed
 * buffer should be srcSz + 0.1% + 12.
 */
{
  41b288:	b510      	push	{r4, lr}

0041b28a <.LCFI3>:
  41b28a:	b092      	sub	sp, #72	; 0x48

0041b28c <.LCFI4>:
    z_stream stream;
    int result = 0;

    stream.next_in = (Bytef*)in;
  41b28c:	9204      	str	r2, [sp, #16]
    stream.avail_in = (uInt)inSz;
  41b28e:	9305      	str	r3, [sp, #20]
#ifdef MAXSEG_64K
    /* Check for source > 64K on 16-bit machine: */
    if ((uLong)stream.avail_in != inSz) return COMPRESS_INIT_E;
#endif
    stream.next_out = out;
  41b290:	9007      	str	r0, [sp, #28]
    stream.avail_out = (uInt)outSz;
  41b292:	9108      	str	r1, [sp, #32]
    if ((uLong)stream.avail_out != outSz) return COMPRESS_INIT_E;

    stream.zalloc = (alloc_func)myAlloc;
  41b294:	4b19      	ldr	r3, [pc, #100]	; (41b2fc <.LVL19+0xc>)

0041b296 <.LVL9>:
  41b296:	930c      	str	r3, [sp, #48]	; 0x30
    stream.zfree = (free_func)myFree;
  41b298:	4b19      	ldr	r3, [pc, #100]	; (41b300 <.LVL19+0x10>)
  41b29a:	930d      	str	r3, [sp, #52]	; 0x34
    stream.opaque = (voidpf)0;
  41b29c:	2300      	movs	r3, #0
  41b29e:	930e      	str	r3, [sp, #56]	; 0x38

    if (deflateInit2(&stream, Z_DEFAULT_COMPRESSION, Z_DEFLATED,
  41b2a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
  41b2a2:	2b00      	cmp	r3, #0
  41b2a4:	bf14      	ite	ne
  41b2a6:	2304      	movne	r3, #4
  41b2a8:	2300      	moveq	r3, #0
  41b2aa:	2238      	movs	r2, #56	; 0x38

0041b2ac <.LVL10>:
  41b2ac:	9203      	str	r2, [sp, #12]
  41b2ae:	4a15      	ldr	r2, [pc, #84]	; (41b304 <.LVL19+0x14>)
  41b2b0:	9202      	str	r2, [sp, #8]
  41b2b2:	9301      	str	r3, [sp, #4]
  41b2b4:	2301      	movs	r3, #1
  41b2b6:	9300      	str	r3, [sp, #0]
  41b2b8:	230b      	movs	r3, #11
  41b2ba:	2208      	movs	r2, #8
  41b2bc:	f04f 31ff 	mov.w	r1, #4294967295

0041b2c0 <.LVL11>:
  41b2c0:	a804      	add	r0, sp, #16

0041b2c2 <.LVL12>:
  41b2c2:	f7f9 ff21 	bl	415108 <deflateInit2_>

0041b2c6 <.LVL13>:
  41b2c6:	b9b0      	cbnz	r0, 41b2f6 <.LVL19+0x6>
                     DEFLATE_DEFAULT_WINDOWBITS, DEFLATE_DEFAULT_MEMLEVEL,
                     flags ? Z_FIXED : Z_DEFAULT_STRATEGY) != Z_OK)
        return COMPRESS_INIT_E;

    if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {
  41b2c8:	2104      	movs	r1, #4
  41b2ca:	a804      	add	r0, sp, #16
  41b2cc:	f7f0 face 	bl	40b86c <deflate>

0041b2d0 <.LVL14>:
  41b2d0:	2801      	cmp	r0, #1
  41b2d2:	d10a      	bne.n	41b2ea <.LCFI6>
        deflateEnd(&stream);
        return COMPRESS_E;
    }

    result = (int)stream.total_out;
  41b2d4:	9c09      	ldr	r4, [sp, #36]	; 0x24

0041b2d6 <.LVL15>:

    if (deflateEnd(&stream) != Z_OK)
  41b2d6:	a804      	add	r0, sp, #16
  41b2d8:	f7ff f8a0 	bl	41a41c <.LFE156>

0041b2dc <.LVL16>:
  41b2dc:	2800      	cmp	r0, #0
        result = COMPRESS_E;
  41b2de:	bf18      	it	ne
  41b2e0:	f06f 04b7 	mvnne.w	r4, #183	; 0xb7

0041b2e4 <.LVL17>:

    return result;
}
  41b2e4:	4620      	mov	r0, r4
  41b2e6:	b012      	add	sp, #72	; 0x48

0041b2e8 <.LCFI5>:
  41b2e8:	bd10      	pop	{r4, pc}

0041b2ea <.LCFI6>:
        deflateEnd(&stream);
  41b2ea:	a804      	add	r0, sp, #16
  41b2ec:	f7ff f896 	bl	41a41c <.LFE156>

0041b2f0 <.LVL19>:
        return COMPRESS_E;
  41b2f0:	f06f 04b7 	mvn.w	r4, #183	; 0xb7
  41b2f4:	e7f6      	b.n	41b2e4 <.LVL17>
        return COMPRESS_INIT_E;
  41b2f6:	f06f 04b6 	mvn.w	r4, #182	; 0xb6
  41b2fa:	e7f3      	b.n	41b2e4 <.LVL17>
  41b2fc:	0041ed85 	.word	0x0041ed85
  41b300:	0041ed33 	.word	0x0041ed33
  41b304:	0041eec8 	.word	0x0041eec8

Disassembly of section .text.fp_montgomery_calc_normalization%220:

0041b308 <fp_montgomery_calc_normalization>:
{
  41b308:	b570      	push	{r4, r5, r6, lr}

0041b30a <.LCFI36>:
  41b30a:	4604      	mov	r4, r0
  41b30c:	460e      	mov	r6, r1
  bits = fp_count_bits (b) % DIGIT_BIT;
  41b30e:	4608      	mov	r0, r1

0041b310 <.LVL296>:
  41b310:	f003 fa7d 	bl	41e80e <.LFE26>

0041b314 <.LVL297>:
  41b314:	4243      	negs	r3, r0
  41b316:	f000 051f 	and.w	r5, r0, #31
  41b31a:	f003 031f 	and.w	r3, r3, #31
  41b31e:	bf58      	it	pl
  41b320:	425d      	negpl	r5, r3

0041b322 <.LVL298>:
  if (!bits) bits = DIGIT_BIT;
  41b322:	b33d      	cbz	r5, 41b374 <.LVL309>
  if (b->used > 1) {
  41b324:	6831      	ldr	r1, [r6, #0]
  41b326:	2901      	cmp	r1, #1
  41b328:	dd09      	ble.n	41b33e <.LVL301>
     fp_2expt (a, (b->used - 1) * DIGIT_BIT + bits - 1);
  41b32a:	eb05 1141 	add.w	r1, r5, r1, lsl #5
  41b32e:	3921      	subs	r1, #33	; 0x21
  41b330:	4620      	mov	r0, r4
  41b332:	f002 fad8 	bl	41d8e6 <.LFE161>

0041b336 <.LVL299>:
  for (x = bits - 1; x < (int)DIGIT_BIT; x++) {
  41b336:	3d01      	subs	r5, #1

0041b338 <.LVL300>:
  41b338:	2d1f      	cmp	r5, #31
  41b33a:	dd09      	ble.n	41b350 <.LVL303+0x6>
  41b33c:	bd70      	pop	{r4, r5, r6, pc}

0041b33e <.LVL301>:
     fp_set(a, 1);
  41b33e:	2101      	movs	r1, #1
  41b340:	4620      	mov	r0, r4
  41b342:	f003 fbc9 	bl	41ead8 <.LFE20>

0041b346 <.LVL302>:
  for (x = bits - 1; x < (int)DIGIT_BIT; x++) {
  41b346:	2500      	movs	r5, #0
  41b348:	e002      	b.n	41b350 <.LVL303+0x6>

0041b34a <.LVL303>:
  41b34a:	3501      	adds	r5, #1
  41b34c:	2d1f      	cmp	r5, #31
  41b34e:	dc10      	bgt.n	41b372 <.LVL308+0x2>
    fp_mul_2 (a, a);
  41b350:	4621      	mov	r1, r4
  41b352:	4620      	mov	r0, r4
  41b354:	f001 f990 	bl	41c678 <.LBE13>

0041b358 <.LVL306>:
    if (fp_cmp_mag (a, b) != FP_LT) {
  41b358:	4631      	mov	r1, r6
  41b35a:	4620      	mov	r0, r4
  41b35c:	f001 f8c3 	bl	41c4e6 <.LFE170>

0041b360 <.LVL307>:
  41b360:	f1b0 3fff 	cmp.w	r0, #4294967295
  41b364:	d0f1      	beq.n	41b34a <.LVL303>
      s_fp_sub (a, b, a);
  41b366:	4622      	mov	r2, r4
  41b368:	4631      	mov	r1, r6
  41b36a:	4620      	mov	r0, r4
  41b36c:	f7fc ff42 	bl	4181f4 <.LFE20>

0041b370 <.LVL308>:
  41b370:	e7eb      	b.n	41b34a <.LVL303>
  41b372:	bd70      	pop	{r4, r5, r6, pc}

0041b374 <.LVL309>:
  if (b->used > 1) {
  41b374:	6831      	ldr	r1, [r6, #0]
  41b376:	2901      	cmp	r1, #1
  41b378:	dde1      	ble.n	41b33e <.LVL301>
     fp_2expt (a, (b->used - 1) * DIGIT_BIT + bits - 1);
  41b37a:	0149      	lsls	r1, r1, #5
  41b37c:	3901      	subs	r1, #1
  41b37e:	4620      	mov	r0, r4
  41b380:	f002 fab1 	bl	41d8e6 <.LFE161>

0041b384 <.LVL310>:
  for (x = bits - 1; x < (int)DIGIT_BIT; x++) {
  41b384:	251f      	movs	r5, #31

0041b386 <.LVL311>:
  41b386:	e7e3      	b.n	41b350 <.LVL303+0x6>

Disassembly of section .rodata.distfix.6568%221:

0041b388 <distfix.6568>:
  41b388:	0510 0001 0517 0101 0513 0011 051b 1001     ................
  41b398:	0511 0005 0519 0401 0515 0041 051d 4001     ..........A....@
  41b3a8:	0510 0003 0518 0201 0514 0021 051c 2001     ..........!.... 
  41b3b8:	0512 0009 051a 0801 0516 0081 0540 0000     ............@...
  41b3c8:	0510 0002 0517 0181 0513 0019 051b 1801     ................
  41b3d8:	0511 0007 0519 0601 0515 0061 051d 6001     ..........a....`
  41b3e8:	0510 0004 0518 0301 0514 0031 051c 3001     ..........1....0
  41b3f8:	0512 000d 051a 0c01 0516 00c1 0540 0000     ............@...

Disassembly of section .rodata.sha_padding%222:

0041b408 <sha_padding>:
  41b408:	0080 0000 0000 0000 0000 0000 0000 0000     ................
	...

Disassembly of section .text.__multadd%223:

0041b488 <__multadd>:
  41b488:	b5f0      	push	{r4, r5, r6, r7, lr}

0041b48a <.LCFI1>:
  41b48a:	690c      	ldr	r4, [r1, #16]
  41b48c:	b083      	sub	sp, #12

0041b48e <.LCFI2>:
  41b48e:	460d      	mov	r5, r1
  41b490:	4606      	mov	r6, r0

0041b492 <.LVL13>:
  41b492:	f101 0e14 	add.w	lr, r1, #20

0041b496 <.LVL14>:
  41b496:	2700      	movs	r7, #0

0041b498 <.LVL15>:
  41b498:	f8de 0000 	ldr.w	r0, [lr]

0041b49c <.LVL16>:
  41b49c:	b281      	uxth	r1, r0
  41b49e:	fb02 3301 	mla	r3, r2, r1, r3

0041b4a2 <.LVL17>:
  41b4a2:	0c01      	lsrs	r1, r0, #16
  41b4a4:	0c18      	lsrs	r0, r3, #16

0041b4a6 <.LVL18>:
  41b4a6:	fb02 0101 	mla	r1, r2, r1, r0

0041b4aa <.LVL19>:
  41b4aa:	b29b      	uxth	r3, r3

0041b4ac <.LVL20>:
  41b4ac:	3701      	adds	r7, #1

0041b4ae <.LVL21>:
  41b4ae:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  41b4b2:	42bc      	cmp	r4, r7
  41b4b4:	f84e 3b04 	str.w	r3, [lr], #4

0041b4b8 <.LVL22>:
  41b4b8:	ea4f 4311 	mov.w	r3, r1, lsr #16

0041b4bc <.LVL23>:
  41b4bc:	dcec      	bgt.n	41b498 <.LVL15>
  41b4be:	b13b      	cbz	r3, 41b4d0 <.LVL26+0x4>
  41b4c0:	68aa      	ldr	r2, [r5, #8]

0041b4c2 <.LVL24>:
  41b4c2:	4294      	cmp	r4, r2
  41b4c4:	da07      	bge.n	41b4d6 <.LCFI4>

0041b4c6 <.LVL25>:
  41b4c6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  41b4ca:	3401      	adds	r4, #1

0041b4cc <.LVL26>:
  41b4cc:	6153      	str	r3, [r2, #20]
  41b4ce:	612c      	str	r4, [r5, #16]
  41b4d0:	4628      	mov	r0, r5
  41b4d2:	b003      	add	sp, #12

0041b4d4 <.LCFI3>:
  41b4d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0041b4d6 <.LCFI4>:
  41b4d6:	6869      	ldr	r1, [r5, #4]

0041b4d8 <.LVL28>:
  41b4d8:	9301      	str	r3, [sp, #4]
  41b4da:	3101      	adds	r1, #1
  41b4dc:	4630      	mov	r0, r6
  41b4de:	f001 feb5 	bl	41d24c <.LFE2>

0041b4e2 <.LVL29>:
  41b4e2:	692a      	ldr	r2, [r5, #16]
  41b4e4:	3202      	adds	r2, #2
  41b4e6:	f105 010c 	add.w	r1, r5, #12
  41b4ea:	4607      	mov	r7, r0

0041b4ec <.LVL30>:
  41b4ec:	0092      	lsls	r2, r2, #2
  41b4ee:	300c      	adds	r0, #12

0041b4f0 <.LVL31>:
  41b4f0:	f7fb f9ca 	bl	416888 <memcpy>

0041b4f4 <.LBB12>:
  41b4f4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  41b4f6:	6869      	ldr	r1, [r5, #4]

0041b4f8 <.LBE12>:
  41b4f8:	9b01      	ldr	r3, [sp, #4]

0041b4fa <.LBB15>:
  41b4fa:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  41b4fe:	6028      	str	r0, [r5, #0]
  41b500:	f842 5021 	str.w	r5, [r2, r1, lsl #2]

0041b504 <.LBE15>:
  41b504:	463d      	mov	r5, r7

0041b506 <.LVL34>:
  41b506:	e7de      	b.n	41b4c6 <.LVL25>

Disassembly of section .text.prvUnlockQueue%224:

0041b508 <prvUnlockQueue>:
{
  41b508:	b570      	push	{r4, r5, r6, lr}

0041b50a <.LCFI4>:
  41b50a:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
  41b50c:	f002 ff82 	bl	41e414 <.LFE6>

0041b510 <.LBB23>:
		int8_t cTxLock = pxQueue->cTxLock;
  41b510:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
  41b514:	b264      	sxtb	r4, r4

0041b516 <.LVL27>:
		while( cTxLock > queueLOCKED_UNMODIFIED )
  41b516:	2c00      	cmp	r4, #0
  41b518:	dd11      	ble.n	41b53e <.LVL31+0x2>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  41b51a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  41b51c:	b17b      	cbz	r3, 41b53e <.LVL31+0x2>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  41b51e:	f105 0624 	add.w	r6, r5, #36	; 0x24
  41b522:	e004      	b.n	41b52e <.LVL29+0x6>
  41b524:	3c01      	subs	r4, #1

0041b526 <.LVL28>:
  41b526:	b264      	sxtb	r4, r4

0041b528 <.LVL29>:
		while( cTxLock > queueLOCKED_UNMODIFIED )
  41b528:	b14c      	cbz	r4, 41b53e <.LVL31+0x2>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  41b52a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  41b52c:	b13b      	cbz	r3, 41b53e <.LVL31+0x2>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  41b52e:	4630      	mov	r0, r6
  41b530:	f000 fa1c 	bl	41b96c <.LFE0>

0041b534 <.LVL30>:
  41b534:	2800      	cmp	r0, #0
  41b536:	d0f5      	beq.n	41b524 <.LVL27+0xe>
						vTaskMissedYield();
  41b538:	f7fe fe2c 	bl	41a194 <.LFE109>

0041b53c <.LVL31>:
  41b53c:	e7f2      	b.n	41b524 <.LVL27+0xe>
		pxQueue->cTxLock = queueUNLOCKED;
  41b53e:	23ff      	movs	r3, #255	; 0xff
  41b540:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45

0041b544 <.LBE23>:
	taskEXIT_CRITICAL();
  41b544:	f003 fade 	bl	41eb04 <vPortExitCritical>

0041b548 <.LVL32>:
	taskENTER_CRITICAL();
  41b548:	f002 ff64 	bl	41e414 <.LFE6>

0041b54c <.LBB24>:
		int8_t cRxLock = pxQueue->cRxLock;
  41b54c:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44

0041b550 <.LVL34>:
  41b550:	b264      	sxtb	r4, r4

0041b552 <.LVL35>:
		while( cRxLock > queueLOCKED_UNMODIFIED )
  41b552:	2c00      	cmp	r4, #0
  41b554:	dd11      	ble.n	41b57a <.LVL39+0x2>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  41b556:	692b      	ldr	r3, [r5, #16]
  41b558:	b17b      	cbz	r3, 41b57a <.LVL39+0x2>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  41b55a:	f105 0610 	add.w	r6, r5, #16
  41b55e:	e004      	b.n	41b56a <.LVL37+0x6>
  41b560:	3c01      	subs	r4, #1

0041b562 <.LVL36>:
  41b562:	b264      	sxtb	r4, r4

0041b564 <.LVL37>:
		while( cRxLock > queueLOCKED_UNMODIFIED )
  41b564:	b14c      	cbz	r4, 41b57a <.LVL39+0x2>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  41b566:	692b      	ldr	r3, [r5, #16]
  41b568:	b13b      	cbz	r3, 41b57a <.LVL39+0x2>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  41b56a:	4630      	mov	r0, r6
  41b56c:	f000 f9fe 	bl	41b96c <.LFE0>

0041b570 <.LVL38>:
  41b570:	2800      	cmp	r0, #0
  41b572:	d0f5      	beq.n	41b560 <.LVL35+0xe>
					vTaskMissedYield();
  41b574:	f7fe fe0e 	bl	41a194 <.LFE109>

0041b578 <.LVL39>:
  41b578:	e7f2      	b.n	41b560 <.LVL35+0xe>
		pxQueue->cRxLock = queueUNLOCKED;
  41b57a:	23ff      	movs	r3, #255	; 0xff
  41b57c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44

0041b580 <.LBE24>:
	taskEXIT_CRITICAL();
  41b580:	f003 fac0 	bl	41eb04 <vPortExitCritical>

0041b584 <.LVL40>:
  41b584:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section .text.wc_Des_CbcEncrypt%225:

0041b586 <wc_Des_CbcEncrypt>:
    {
  41b586:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

0041b58a <.LCFI11>:
        word32 blocks = sz / DES_BLOCK_SIZE;
  41b58a:	08db      	lsrs	r3, r3, #3

0041b58c <.LVL180>:
        while (blocks--) {
  41b58c:	b3bb      	cbz	r3, 41b5fe <.LBE253>
  41b58e:	4680      	mov	r8, r0
  41b590:	460f      	mov	r7, r1
  41b592:	f103 39ff 	add.w	r9, r3, #4294967295

0041b596 <.LVL181>:
  41b596:	1e56      	subs	r6, r2, #1
            xorbuf((byte*)des->reg, in, DES_BLOCK_SIZE);
  41b598:	4605      	mov	r5, r0
  41b59a:	1dc4      	adds	r4, r0, #7
  41b59c:	e01d      	b.n	41b5da <.LBB255>

0041b59e <.LBB249>:
    for (i = 0; i < n; i++) r[i] ^= a[i];
  41b59e:	f8d8 3000 	ldr.w	r3, [r8]
  41b5a2:	f8d6 2001 	ldr.w	r2, [r6, #1]
  41b5a6:	4053      	eors	r3, r2
  41b5a8:	f8c8 3000 	str.w	r3, [r8]

0041b5ac <.LVL183>:
  41b5ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
  41b5b0:	f8d6 2005 	ldr.w	r2, [r6, #5]
  41b5b4:	4053      	eors	r3, r2
  41b5b6:	f8c8 3004 	str.w	r3, [r8, #4]

0041b5ba <.LBE249>:
            DesProcessBlock(des, (byte*)des->reg, (byte*)des->reg);
  41b5ba:	462a      	mov	r2, r5
  41b5bc:	4629      	mov	r1, r5
  41b5be:	4628      	mov	r0, r5
  41b5c0:	f7fb ffba 	bl	417538 <.LFE160>

0041b5c4 <.LVL185>:
            XMEMCPY(out, des->reg, DES_BLOCK_SIZE);
  41b5c4:	682a      	ldr	r2, [r5, #0]
  41b5c6:	686b      	ldr	r3, [r5, #4]
  41b5c8:	603a      	str	r2, [r7, #0]
  41b5ca:	607b      	str	r3, [r7, #4]
            out += DES_BLOCK_SIZE;
  41b5cc:	3708      	adds	r7, #8

0041b5ce <.LVL186>:
        while (blocks--) {
  41b5ce:	f109 39ff 	add.w	r9, r9, #4294967295
  41b5d2:	3608      	adds	r6, #8

0041b5d4 <.LVL188>:
  41b5d4:	f1b9 3fff 	cmp.w	r9, #4294967295
  41b5d8:	d011      	beq.n	41b5fe <.LBE253>

0041b5da <.LBB255>:
    if (((wolfssl_word)buf | (wolfssl_word)mask | count) % WOLFSSL_WORD_SIZE == 0)
  41b5da:	1c73      	adds	r3, r6, #1

0041b5dc <.LVL190>:
  41b5dc:	ea48 0303 	orr.w	r3, r8, r3

0041b5e0 <.LVL191>:
  41b5e0:	f013 0f03 	tst.w	r3, #3
  41b5e4:	d0db      	beq.n	41b59e <.LBB249>
  41b5e6:	f108 33ff 	add.w	r3, r8, #4294967295
  41b5ea:	4632      	mov	r2, r6

0041b5ec <.LBB253>:
        for (i = 0; i < count; i++) b[i] ^= m[i];
  41b5ec:	7859      	ldrb	r1, [r3, #1]
  41b5ee:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  41b5f2:	4041      	eors	r1, r0
  41b5f4:	f803 1f01 	strb.w	r1, [r3, #1]!
  41b5f8:	42a3      	cmp	r3, r4
  41b5fa:	d1f7      	bne.n	41b5ec <.LBB253>
  41b5fc:	e7dd      	b.n	41b5ba <.LBE249>

0041b5fe <.LBE253>:
    }
  41b5fe:	2000      	movs	r0, #0
  41b600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

Disassembly of section .text.wc_ecc_shared_secret_ex%226:

0041b604 <wc_ecc_shared_secret_ex>:
    if (private_key == NULL || point == NULL || out == NULL ||
  41b604:	2800      	cmp	r0, #0
  41b606:	d039      	beq.n	41b67c <.LCFI62>
{
  41b608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041b60a <.LCFI61>:
  41b60a:	4604      	mov	r4, r0
    if (private_key == NULL || point == NULL || out == NULL ||
  41b60c:	b351      	cbz	r1, 41b664 <.LVL833>
  41b60e:	b362      	cbz	r2, 41b66a <.LVL835>
  41b610:	b35b      	cbz	r3, 41b66a <.LVL835>
    if (private_key->type != ECC_PRIVATEKEY) {
  41b612:	6800      	ldr	r0, [r0, #0]

0041b614 <.LVL825>:
  41b614:	2802      	cmp	r0, #2
  41b616:	d12b      	bne.n	41b670 <.LVL836+0x2>
  41b618:	461f      	mov	r7, r3
  41b61a:	4616      	mov	r6, r2
  41b61c:	460d      	mov	r5, r1
    if (wc_ecc_is_valid_idx(private_key->idx) == 0)
  41b61e:	6860      	ldr	r0, [r4, #4]
  41b620:	f002 ff1c 	bl	41e45c <.LBE24>

0041b624 <.LVL826>:
  41b624:	b338      	cbz	r0, 41b676 <.LVL838>
    switch(private_key->state) {
  41b626:	68a3      	ldr	r3, [r4, #8]
  41b628:	2b00      	cmp	r3, #0
  41b62a:	db12      	blt.n	41b652 <.LVL831>
  41b62c:	2b01      	cmp	r3, #1
  41b62e:	dd05      	ble.n	41b63c <.LVL829>
  41b630:	2b02      	cmp	r3, #2
  41b632:	d10e      	bne.n	41b652 <.LVL831>

0041b634 <.LVL827>:
            err = 0;
  41b634:	2000      	movs	r0, #0

0041b636 <.LVL828>:
    private_key->state = ECC_STATE_NONE;
  41b636:	2300      	movs	r3, #0
  41b638:	60a3      	str	r3, [r4, #8]
    return err;
  41b63a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041b63c <.LVL829>:
            private_key->state = ECC_STATE_SHARED_SEC_GEN;
  41b63c:	2301      	movs	r3, #1
  41b63e:	60a3      	str	r3, [r4, #8]
            err = wc_ecc_shared_secret_gen(private_key, point, out, outlen);
  41b640:	463b      	mov	r3, r7
  41b642:	4632      	mov	r2, r6
  41b644:	4629      	mov	r1, r5
  41b646:	4620      	mov	r0, r4
  41b648:	f7fc feb6 	bl	4183b8 <.LFE221>

0041b64c <.LVL830>:
            if (err < 0) {
  41b64c:	2800      	cmp	r0, #0
  41b64e:	daf1      	bge.n	41b634 <.LVL827>
  41b650:	e001      	b.n	41b656 <.LVL832>

0041b652 <.LVL831>:
            err = BAD_STATE_E;
  41b652:	f06f 00bf 	mvn.w	r0, #191	; 0xbf

0041b656 <.LVL832>:
    if (err == WC_PENDING_E) {
  41b656:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
  41b65a:	d1ec      	bne.n	41b636 <.LVL828>
        private_key->state++;
  41b65c:	68a3      	ldr	r3, [r4, #8]
  41b65e:	3301      	adds	r3, #1
  41b660:	60a3      	str	r3, [r4, #8]
        return err;
  41b662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041b664 <.LVL833>:
        return BAD_FUNC_ARG;
  41b664:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041b668 <.LVL834>:
  41b668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041b66a <.LVL835>:
  41b66a:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041b66e <.LVL836>:
  41b66e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return ECC_BAD_ARG_E;
  41b670:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
  41b674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041b676 <.LVL838>:
        return ECC_BAD_ARG_E;
  41b676:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
}
  41b67a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041b67c <.LCFI62>:
        return BAD_FUNC_ARG;
  41b67c:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041b680 <.LVL840>:
}
  41b680:	4770      	bx	lr

Disassembly of section .text.deflateResetKeep%227:

0041b682 <deflateResetKeep>:
    if (strm == Z_NULL || strm->state == Z_NULL ||
  41b682:	b310      	cbz	r0, 41b6ca <.LCFI14>
{
  41b684:	b538      	push	{r3, r4, r5, lr}

0041b686 <.LCFI13>:
  41b686:	4604      	mov	r4, r0
    if (strm == Z_NULL || strm->state == Z_NULL ||
  41b688:	69c5      	ldr	r5, [r0, #28]
  41b68a:	b30d      	cbz	r5, 41b6d0 <.LCFI15>
  41b68c:	6a02      	ldr	r2, [r0, #32]
  41b68e:	b312      	cbz	r2, 41b6d6 <.LVL274>
        strm->zalloc == (alloc_func)0 || strm->zfree == (free_func)0) {
  41b690:	6a42      	ldr	r2, [r0, #36]	; 0x24
  41b692:	b31a      	cbz	r2, 41b6dc <.LVL276>
    strm->total_in = strm->total_out = 0;
  41b694:	2200      	movs	r2, #0
  41b696:	6142      	str	r2, [r0, #20]
  41b698:	6082      	str	r2, [r0, #8]
    strm->msg = Z_NULL; /* use zfree if we ever allocate msg dynamically */
  41b69a:	6182      	str	r2, [r0, #24]
    strm->data_type = Z_UNKNOWN;
  41b69c:	2102      	movs	r1, #2
  41b69e:	62c1      	str	r1, [r0, #44]	; 0x2c

0041b6a0 <.LVL266>:
    s->pending = 0;
  41b6a0:	616a      	str	r2, [r5, #20]
    s->pending_out = s->pending_buf;
  41b6a2:	68aa      	ldr	r2, [r5, #8]
  41b6a4:	612a      	str	r2, [r5, #16]
    if (s->wrap < 0) {
  41b6a6:	69aa      	ldr	r2, [r5, #24]
  41b6a8:	2a00      	cmp	r2, #0
  41b6aa:	db0b      	blt.n	41b6c4 <.LVL269>
    s->status = s->wrap ? INIT_STATE : BUSY_STATE;
  41b6ac:	69ab      	ldr	r3, [r5, #24]
  41b6ae:	b1c3      	cbz	r3, 41b6e2 <.LVL278>
  41b6b0:	222a      	movs	r2, #42	; 0x2a
  41b6b2:	606a      	str	r2, [r5, #4]
        s->wrap == 2 ? crc32(0L, Z_NULL, 0) :
  41b6b4:	2b02      	cmp	r3, #2
  41b6b6:	d116      	bne.n	41b6e6 <.LVL278+0x4>
  41b6b8:	2200      	movs	r2, #0
  41b6ba:	4611      	mov	r1, r2
  41b6bc:	4610      	mov	r0, r2

0041b6be <.LVL267>:
  41b6be:	f7f8 f8b9 	bl	413834 <.LFE21>

0041b6c2 <.LVL268>:
  41b6c2:	e015      	b.n	41b6f0 <.LVL280>

0041b6c4 <.LVL269>:
        s->wrap = -s->wrap; /* was made negative by deflate(..., Z_FINISH); */
  41b6c4:	4252      	negs	r2, r2
  41b6c6:	61aa      	str	r2, [r5, #24]
  41b6c8:	e7f0      	b.n	41b6ac <.LVL266+0xc>

0041b6ca <.LCFI14>:
        return Z_STREAM_ERROR;
  41b6ca:	f06f 0001 	mvn.w	r0, #1

0041b6ce <.LVL271>:
  41b6ce:	4770      	bx	lr

0041b6d0 <.LCFI15>:
  41b6d0:	f06f 0001 	mvn.w	r0, #1

0041b6d4 <.LVL273>:
  41b6d4:	bd38      	pop	{r3, r4, r5, pc}

0041b6d6 <.LVL274>:
  41b6d6:	f06f 0001 	mvn.w	r0, #1

0041b6da <.LVL275>:
  41b6da:	bd38      	pop	{r3, r4, r5, pc}

0041b6dc <.LVL276>:
  41b6dc:	f06f 0001 	mvn.w	r0, #1

0041b6e0 <.LVL277>:
  41b6e0:	bd38      	pop	{r3, r4, r5, pc}

0041b6e2 <.LVL278>:
    s->status = s->wrap ? INIT_STATE : BUSY_STATE;
  41b6e2:	2371      	movs	r3, #113	; 0x71
  41b6e4:	606b      	str	r3, [r5, #4]
        s->wrap == 2 ? crc32(0L, Z_NULL, 0) :
  41b6e6:	2200      	movs	r2, #0
  41b6e8:	4611      	mov	r1, r2
  41b6ea:	4610      	mov	r0, r2

0041b6ec <.LVL279>:
  41b6ec:	f7f7 fc64 	bl	412fb8 <.LBE46>

0041b6f0 <.LVL280>:
    strm->adler =
  41b6f0:	6320      	str	r0, [r4, #48]	; 0x30
    s->last_flush = Z_NO_FLUSH;
  41b6f2:	2400      	movs	r4, #0

0041b6f4 <.LVL281>:
  41b6f4:	62ac      	str	r4, [r5, #40]	; 0x28
    _tr_init(s);
  41b6f6:	4628      	mov	r0, r5
  41b6f8:	f001 fd10 	bl	41d11c <.LFE12>

0041b6fc <.LVL282>:
    return Z_OK;
  41b6fc:	4620      	mov	r0, r4
  41b6fe:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section .text.prvAddCurrentTaskToDelayedList%228:

0041b700 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
  41b700:	b570      	push	{r4, r5, r6, lr}

0041b702 <.LCFI1>:
  41b702:	4604      	mov	r4, r0
  41b704:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
  41b706:	4b17      	ldr	r3, [pc, #92]	; (41b764 <.LVL27+0x2>)
  41b708:	681d      	ldr	r5, [r3, #0]

0041b70a <.LVL18>:
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  41b70a:	4b17      	ldr	r3, [pc, #92]	; (41b768 <.LVL27+0x6>)
  41b70c:	6818      	ldr	r0, [r3, #0]

0041b70e <.LVL19>:
  41b70e:	3004      	adds	r0, #4
  41b710:	f002 fd30 	bl	41e174 <.LFE106>

0041b714 <.LVL20>:
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  41b714:	f1b4 3fff 	cmp.w	r4, #4294967295
  41b718:	d100      	bne.n	41b71c <.LVL20+0x8>
  41b71a:	b99e      	cbnz	r6, 41b744 <.LVL23>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
  41b71c:	442c      	add	r4, r5

0041b71e <.LVL21>:

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
  41b71e:	4b12      	ldr	r3, [pc, #72]	; (41b768 <.LVL27+0x6>)
  41b720:	681b      	ldr	r3, [r3, #0]
  41b722:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
  41b724:	42a5      	cmp	r5, r4
  41b726:	d814      	bhi.n	41b752 <.LVL25>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  41b728:	4b10      	ldr	r3, [pc, #64]	; (41b76c <.LVL27+0xa>)
  41b72a:	6818      	ldr	r0, [r3, #0]
  41b72c:	4b0e      	ldr	r3, [pc, #56]	; (41b768 <.LVL27+0x6>)
  41b72e:	6819      	ldr	r1, [r3, #0]
  41b730:	3104      	adds	r1, #4
  41b732:	f002 fb4c 	bl	41ddce <.LFE9>

0041b736 <.LVL22>:

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
  41b736:	4b0e      	ldr	r3, [pc, #56]	; (41b770 <.LVL27+0xe>)
  41b738:	681b      	ldr	r3, [r3, #0]
  41b73a:	429c      	cmp	r4, r3
  41b73c:	d201      	bcs.n	41b742 <.LVL22+0xc>
				{
					xNextTaskUnblockTime = xTimeToWake;
  41b73e:	4b0c      	ldr	r3, [pc, #48]	; (41b770 <.LVL27+0xe>)
  41b740:	601c      	str	r4, [r3, #0]
  41b742:	bd70      	pop	{r4, r5, r6, pc}

0041b744 <.LVL23>:
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
  41b744:	4b08      	ldr	r3, [pc, #32]	; (41b768 <.LVL27+0x6>)
  41b746:	6819      	ldr	r1, [r3, #0]
  41b748:	3104      	adds	r1, #4
  41b74a:	480a      	ldr	r0, [pc, #40]	; (41b774 <.LVL27+0x12>)
  41b74c:	f003 f886 	bl	41e85c <.LFE142>

0041b750 <.LVL24>:
  41b750:	bd70      	pop	{r4, r5, r6, pc}

0041b752 <.LVL25>:
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  41b752:	4b09      	ldr	r3, [pc, #36]	; (41b778 <.LVL27+0x16>)
  41b754:	6818      	ldr	r0, [r3, #0]
  41b756:	4b04      	ldr	r3, [pc, #16]	; (41b768 <.LVL27+0x6>)
  41b758:	6819      	ldr	r1, [r3, #0]
  41b75a:	3104      	adds	r1, #4
  41b75c:	f002 fb37 	bl	41ddce <.LFE9>

0041b760 <.LVL26>:
  41b760:	bd70      	pop	{r4, r5, r6, pc}

0041b762 <.LVL27>:
  41b762:	bf00      	nop
  41b764:	2041786c 	.word	0x2041786c
  41b768:	20417838 	.word	0x20417838
  41b76c:	2041783c 	.word	0x2041783c
  41b770:	20417860 	.word	0x20417860
  41b774:	2041777c 	.word	0x2041777c
  41b778:	20417840 	.word	0x20417840

Disassembly of section .text.sha384_test%229:

0041b77c <sha384_test>:
{
  41b77c:	b570      	push	{r4, r5, r6, lr}

0041b77e <.LCFI13>:
  41b77e:	b0d4      	sub	sp, #336	; 0x150

0041b780 <.LCFI14>:
    test_sha[0] = a;
  41b780:	4b1b      	ldr	r3, [pc, #108]	; (41b7f0 <.LCFI15+0x4>)
  41b782:	9300      	str	r3, [sp, #0]
  41b784:	f503 7235 	add.w	r2, r3, #724	; 0x2d4
  41b788:	9201      	str	r2, [sp, #4]
  41b78a:	2203      	movs	r2, #3
  41b78c:	9202      	str	r2, [sp, #8]
  41b78e:	2230      	movs	r2, #48	; 0x30
  41b790:	9203      	str	r2, [sp, #12]
    test_sha[1] = b;
  41b792:	f503 7142 	add.w	r1, r3, #776	; 0x308
  41b796:	9104      	str	r1, [sp, #16]
  41b798:	f503 735f 	add.w	r3, r3, #892	; 0x37c
  41b79c:	9305      	str	r3, [sp, #20]
  41b79e:	2370      	movs	r3, #112	; 0x70
  41b7a0:	9306      	str	r3, [sp, #24]
  41b7a2:	9207      	str	r2, [sp, #28]
    CRYPT_SHA384_Initialize(&sha);
  41b7a4:	a814      	add	r0, sp, #80	; 0x50
  41b7a6:	f003 fa4d 	bl	41ec44 <.LFE162>

0041b7aa <.LVL22>:
    appData.sha384_test_result = times;
  41b7aa:	2202      	movs	r2, #2
  41b7ac:	4b11      	ldr	r3, [pc, #68]	; (41b7f4 <.LCFI15+0x8>)
  41b7ae:	611a      	str	r2, [r3, #16]

0041b7b0 <.LVL23>:
  41b7b0:	2400      	movs	r4, #0
            appData.sha384_test_result--;
  41b7b2:	461e      	mov	r6, r3
  41b7b4:	e002      	b.n	41b7bc <.LVL24+0x6>

0041b7b6 <.LVL24>:
  41b7b6:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  41b7b8:	2c20      	cmp	r4, #32
  41b7ba:	d016      	beq.n	41b7ea <.LVL27+0xc>
  41b7bc:	eb0d 0504 	add.w	r5, sp, r4
        CRYPT_SHA384_DataAdd(&sha, (byte*)test_sha[i].input,(word32)test_sha[i].inLen);
  41b7c0:	68aa      	ldr	r2, [r5, #8]
  41b7c2:	f85d 1004 	ldr.w	r1, [sp, r4]
  41b7c6:	a814      	add	r0, sp, #80	; 0x50
  41b7c8:	f003 f8c0 	bl	41e94c <.LFE165>

0041b7cc <.LVL25>:
        CRYPT_SHA384_Finalize(&sha, hash);
  41b7cc:	a908      	add	r1, sp, #32
  41b7ce:	a814      	add	r0, sp, #80	; 0x50
  41b7d0:	f003 f8c8 	bl	41e964 <.LFE167>

0041b7d4 <.LVL26>:
        if (memcmp(hash, test_sha[i].output, SHA384_DIGEST_SIZE) == 0)
  41b7d4:	2230      	movs	r2, #48	; 0x30
  41b7d6:	6869      	ldr	r1, [r5, #4]
  41b7d8:	a808      	add	r0, sp, #32
  41b7da:	f001 f935 	bl	41ca48 <memcmp>

0041b7de <.LVL27>:
  41b7de:	2800      	cmp	r0, #0
  41b7e0:	d1e9      	bne.n	41b7b6 <.LVL24>
            appData.sha384_test_result--;
  41b7e2:	6933      	ldr	r3, [r6, #16]
  41b7e4:	3b01      	subs	r3, #1
  41b7e6:	6133      	str	r3, [r6, #16]
  41b7e8:	e7e5      	b.n	41b7b6 <.LVL24>
}
  41b7ea:	b054      	add	sp, #336	; 0x150

0041b7ec <.LCFI15>:
  41b7ec:	bd70      	pop	{r4, r5, r6, pc}
  41b7ee:	bf00      	nop
  41b7f0:	0040accc 	.word	0x0040accc
  41b7f4:	20417598 	.word	0x20417598

Disassembly of section .text.sha512_test%230:

0041b7f8 <sha512_test>:
{
  41b7f8:	b570      	push	{r4, r5, r6, lr}

0041b7fa <.LCFI16>:
  41b7fa:	b0e0      	sub	sp, #384	; 0x180

0041b7fc <.LCFI17>:
    test_sha[0] = a;
  41b7fc:	4b1b      	ldr	r3, [pc, #108]	; (41b86c <.LCFI18+0x4>)
  41b7fe:	9300      	str	r3, [sp, #0]
  41b800:	f503 726c 	add.w	r2, r3, #944	; 0x3b0
  41b804:	9201      	str	r2, [sp, #4]
  41b806:	2203      	movs	r2, #3
  41b808:	9202      	str	r2, [sp, #8]
  41b80a:	2240      	movs	r2, #64	; 0x40
  41b80c:	9203      	str	r2, [sp, #12]
    test_sha[1] = b;
  41b80e:	f503 7142 	add.w	r1, r3, #776	; 0x308
  41b812:	9104      	str	r1, [sp, #16]
  41b814:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
  41b818:	9305      	str	r3, [sp, #20]
  41b81a:	2370      	movs	r3, #112	; 0x70
  41b81c:	9306      	str	r3, [sp, #24]
  41b81e:	9207      	str	r2, [sp, #28]
    CRYPT_SHA512_Initialize(&sha);
  41b820:	a818      	add	r0, sp, #96	; 0x60
  41b822:	f003 fa17 	bl	41ec54 <.LFE166>

0041b826 <.LVL29>:
    appData.sha512_test_result = times;
  41b826:	2202      	movs	r2, #2
  41b828:	4b11      	ldr	r3, [pc, #68]	; (41b870 <.LCFI18+0x8>)
  41b82a:	615a      	str	r2, [r3, #20]

0041b82c <.LVL30>:
  41b82c:	2400      	movs	r4, #0
            appData.sha512_test_result--;
  41b82e:	461e      	mov	r6, r3
  41b830:	e002      	b.n	41b838 <.LVL31+0x6>

0041b832 <.LVL31>:
  41b832:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  41b834:	2c20      	cmp	r4, #32
  41b836:	d016      	beq.n	41b866 <.LVL34+0xc>
  41b838:	eb0d 0504 	add.w	r5, sp, r4
        CRYPT_SHA512_DataAdd(&sha, (byte*)test_sha[i].input,(word32)test_sha[i].inLen);
  41b83c:	68aa      	ldr	r2, [r5, #8]
  41b83e:	f85d 1004 	ldr.w	r1, [sp, r4]
  41b842:	a818      	add	r0, sp, #96	; 0x60
  41b844:	f003 f89a 	bl	41e97c <.LFE168>

0041b848 <.LVL32>:
        CRYPT_SHA512_Finalize(&sha, hash);
  41b848:	a908      	add	r1, sp, #32
  41b84a:	a818      	add	r0, sp, #96	; 0x60
  41b84c:	f003 f8a2 	bl	41e994 <.LFE170>

0041b850 <.LVL33>:
        if (memcmp(hash, test_sha[i].output, SHA512_DIGEST_SIZE) == 0)
  41b850:	2240      	movs	r2, #64	; 0x40
  41b852:	6869      	ldr	r1, [r5, #4]
  41b854:	a808      	add	r0, sp, #32
  41b856:	f001 f8f7 	bl	41ca48 <memcmp>

0041b85a <.LVL34>:
  41b85a:	2800      	cmp	r0, #0
  41b85c:	d1e9      	bne.n	41b832 <.LVL31>
            appData.sha512_test_result--;
  41b85e:	6973      	ldr	r3, [r6, #20]
  41b860:	3b01      	subs	r3, #1
  41b862:	6173      	str	r3, [r6, #20]
  41b864:	e7e5      	b.n	41b832 <.LVL31>
}
  41b866:	b060      	add	sp, #384	; 0x180

0041b868 <.LCFI18>:
  41b868:	bd70      	pop	{r4, r5, r6, pc}
  41b86a:	bf00      	nop
  41b86c:	0040accc 	.word	0x0040accc
  41b870:	20417598 	.word	0x20417598

Disassembly of section .text.StoreECC_DSA_Sig%231:

0041b874 <StoreECC_DSA_Sig>:

#ifdef HAVE_ECC

/* Der Encode r & s ints into out, outLen is (in/out) size */
int StoreECC_DSA_Sig(byte* out, word32* outLen, mp_int* r, mp_int* s)
{
  41b874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

0041b878 <.LCFI148>:
  41b878:	4607      	mov	r7, r0
  41b87a:	4688      	mov	r8, r1
  41b87c:	4615      	mov	r5, r2
  41b87e:	461e      	mov	r6, r3

0041b880 <.LVL1187>:
    int    rSz;                           /* encoding size */
    int    sSz;
    word32 headerSz = 4;   /* 2*ASN_TAG + 2*LEN(ENUM) */

    /* If the leading bit on the INTEGER is a 1, add a leading zero */
    int rLeadingZero = mp_leading_bit(r);
  41b880:	4610      	mov	r0, r2

0041b882 <.LVL1188>:
  41b882:	f003 fb6d 	bl	41ef60 <.LFE96>

0041b886 <.LVL1189>:
  41b886:	4604      	mov	r4, r0

0041b888 <.LVL1190>:
    int sLeadingZero = mp_leading_bit(s);
  41b888:	4630      	mov	r0, r6

0041b88a <.LVL1191>:
  41b88a:	f003 fb69 	bl	41ef60 <.LFE96>

0041b88e <.LVL1192>:
  41b88e:	4681      	mov	r9, r0

0041b890 <.LVL1193>:
    int rLen = mp_unsigned_bin_size(r);   /* big int size */
  41b890:	4628      	mov	r0, r5

0041b892 <.LVL1194>:
  41b892:	f003 fb4d 	bl	41ef30 <.LFE82>

0041b896 <.LVL1195>:
  41b896:	4682      	mov	sl, r0

0041b898 <.LVL1196>:
    int sLen = mp_unsigned_bin_size(s);
  41b898:	4630      	mov	r0, r6

0041b89a <.LVL1197>:
  41b89a:	f003 fb49 	bl	41ef30 <.LFE82>

0041b89e <.LVL1198>:

    if (*outLen < (rLen + rLeadingZero + sLen + sLeadingZero +
  41b89e:	4454      	add	r4, sl

0041b8a0 <.LVL1199>:
  41b8a0:	4404      	add	r4, r0
  41b8a2:	eb04 0309 	add.w	r3, r4, r9
  41b8a6:	1d18      	adds	r0, r3, #4

0041b8a8 <.LVL1200>:
                   headerSz + 2))  /* SEQ_TAG + LEN(ENUM) */
  41b8a8:	3306      	adds	r3, #6
    if (*outLen < (rLen + rLeadingZero + sLen + sLeadingZero +
  41b8aa:	f8d8 2000 	ldr.w	r2, [r8]
  41b8ae:	429a      	cmp	r2, r3
  41b8b0:	d31a      	bcc.n	41b8e8 <.LVL1211>
        return BUFFER_E;

    idx = SetSequence(rLen + rLeadingZero + sLen+sLeadingZero + headerSz, out);
  41b8b2:	4639      	mov	r1, r7
  41b8b4:	f003 f9ae 	bl	41ec14 <.LFE94>

0041b8b8 <.LVL1201>:
  41b8b8:	4604      	mov	r4, r0

0041b8ba <.LVL1202>:

    /* store r */
    rSz = SetASNIntMP(r, -1, &out[idx]);
  41b8ba:	183a      	adds	r2, r7, r0
  41b8bc:	f04f 31ff 	mov.w	r1, #4294967295
  41b8c0:	4628      	mov	r0, r5

0041b8c2 <.LVL1203>:
  41b8c2:	f000 fade 	bl	41be82 <.LFE23>

0041b8c6 <.LVL1204>:
    if (rSz < 0)
  41b8c6:	2800      	cmp	r0, #0
  41b8c8:	db10      	blt.n	41b8ec <.LVL1212>
        return rSz;
    idx += rSz;
  41b8ca:	4404      	add	r4, r0

    /* store s */
    sSz = SetASNIntMP(s, -1, &out[idx]);
  41b8cc:	193a      	adds	r2, r7, r4
  41b8ce:	f04f 31ff 	mov.w	r1, #4294967295
  41b8d2:	4630      	mov	r0, r6

0041b8d4 <.LVL1206>:
  41b8d4:	f000 fad5 	bl	41be82 <.LFE23>

0041b8d8 <.LVL1207>:
    if (sSz < 0)
  41b8d8:	2800      	cmp	r0, #0
  41b8da:	db07      	blt.n	41b8ec <.LVL1212>

0041b8dc <.LVL1208>:
        return sSz;
    idx += sSz;
  41b8dc:	4420      	add	r0, r4

0041b8de <.LVL1209>:

    *outLen = idx;
  41b8de:	f8c8 0000 	str.w	r0, [r8]

    return 0;
  41b8e2:	2000      	movs	r0, #0

0041b8e4 <.LVL1210>:
  41b8e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0041b8e8 <.LVL1211>:
        return BUFFER_E;
  41b8e8:	f06f 0083 	mvn.w	r0, #131	; 0x83

0041b8ec <.LVL1212>:
}
  41b8ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

Disassembly of section .text.frexp%232:

0041b8f0 <frexp>:
  41b8f0:	b430      	push	{r4, r5}

0041b8f2 <.LCFI0>:
  41b8f2:	b082      	sub	sp, #8

0041b8f4 <.LCFI1>:
  41b8f4:	ed8d 0b00 	vstr	d0, [sp]

0041b8f8 <.LBB2>:
  41b8f8:	9b01      	ldr	r3, [sp, #4]

0041b8fa <.LBE2>:
  41b8fa:	4c1b      	ldr	r4, [pc, #108]	; (41b968 <.LVL14+0x12>)

0041b8fc <.LBB3>:
  41b8fc:	9d00      	ldr	r5, [sp, #0]

0041b8fe <.LBE3>:
  41b8fe:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000

0041b902 <.LVL3>:
  41b902:	2200      	movs	r2, #0
  41b904:	42a1      	cmp	r1, r4
  41b906:	6002      	str	r2, [r0, #0]
  41b908:	dc17      	bgt.n	41b93a <.LBE6+0x4>
  41b90a:	ea55 0401 	orrs.w	r4, r5, r1
  41b90e:	d014      	beq.n	41b93a <.LBE6+0x4>
  41b910:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  41b914:	db16      	blt.n	41b944 <.LCFI4>
  41b916:	4615      	mov	r5, r2

0041b918 <.LVL4>:
  41b918:	f023 44ff 	bic.w	r4, r3, #2139095040	; 0x7f800000
  41b91c:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000

0041b920 <.LBB4>:
  41b920:	e9dd 2300 	ldrd	r2, r3, [sp]
  41b924:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000

0041b928 <.LBE4>:
  41b928:	1509      	asrs	r1, r1, #20

0041b92a <.LBB5>:
  41b92a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000

0041b92e <.LBE5>:
  41b92e:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe

0041b932 <.LBB6>:
  41b932:	e9cd 2300 	strd	r2, r3, [sp]

0041b936 <.LBE6>:
  41b936:	4429      	add	r1, r5
  41b938:	6001      	str	r1, [r0, #0]
  41b93a:	ed9d 0b00 	vldr	d0, [sp]
  41b93e:	b002      	add	sp, #8

0041b940 <.LCFI2>:
  41b940:	bc30      	pop	{r4, r5}

0041b942 <.LCFI3>:
  41b942:	4770      	bx	lr

0041b944 <.LCFI4>:
  41b944:	ed9f 7b06 	vldr	d7, [pc, #24]	; 41b960 <.LVL14+0xa>
  41b948:	ee20 7b07 	vmul.f64	d7, d0, d7
  41b94c:	ed8d 7b00 	vstr	d7, [sp]

0041b950 <.LBB7>:
  41b950:	9b01      	ldr	r3, [sp, #4]

0041b952 <.LBE7>:
  41b952:	f06f 0535 	mvn.w	r5, #53	; 0x35

0041b956 <.LVL14>:
  41b956:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
  41b95a:	e7dd      	b.n	41b918 <.LVL4>
  41b95c:	f3af 8000 	nop.w
  41b960:	00000000 	.word	0x00000000
  41b964:	43500000 	.word	0x43500000
  41b968:	7fefffff 	.word	0x7fefffff

Disassembly of section .text.xTaskRemoveFromEventList%233:

0041b96c <xTaskRemoveFromEventList>:
{
  41b96c:	b538      	push	{r3, r4, r5, lr}

0041b96e <.LCFI24>:
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  41b96e:	68c3      	ldr	r3, [r0, #12]
  41b970:	68dc      	ldr	r4, [r3, #12]

0041b972 <.LVL245>:
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  41b972:	f104 0518 	add.w	r5, r4, #24
  41b976:	4628      	mov	r0, r5

0041b978 <.LVL246>:
  41b978:	f002 fbfc 	bl	41e174 <.LFE106>

0041b97c <.LVL247>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  41b97c:	4b13      	ldr	r3, [pc, #76]	; (41b9cc <.LVL254+0x2>)
  41b97e:	681b      	ldr	r3, [r3, #0]
  41b980:	b9e3      	cbnz	r3, 41b9bc <.LVL251>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
  41b982:	1d25      	adds	r5, r4, #4
  41b984:	4628      	mov	r0, r5
  41b986:	f002 fbf5 	bl	41e174 <.LFE106>

0041b98a <.LVL248>:
		prvAddTaskToReadyList( pxUnblockedTCB );
  41b98a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  41b98c:	4b10      	ldr	r3, [pc, #64]	; (41b9d0 <.LVL254+0x6>)
  41b98e:	681b      	ldr	r3, [r3, #0]
  41b990:	4298      	cmp	r0, r3
  41b992:	d901      	bls.n	41b998 <.LVL248+0xe>
  41b994:	4b0e      	ldr	r3, [pc, #56]	; (41b9d0 <.LVL254+0x6>)
  41b996:	6018      	str	r0, [r3, #0]
  41b998:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b99c:	4629      	mov	r1, r5
  41b99e:	4b0d      	ldr	r3, [pc, #52]	; (41b9d4 <.LVL254+0xa>)
  41b9a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  41b9a4:	f002 ff5a 	bl	41e85c <.LFE142>

0041b9a8 <.LVL249>:
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  41b9a8:	4b0b      	ldr	r3, [pc, #44]	; (41b9d8 <.LVL254+0xe>)
  41b9aa:	681b      	ldr	r3, [r3, #0]
  41b9ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  41b9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  41b9b0:	429a      	cmp	r2, r3
  41b9b2:	d908      	bls.n	41b9c6 <.LVL252+0x2>

0041b9b4 <.LVL250>:
		xYieldPending = pdTRUE;
  41b9b4:	2001      	movs	r0, #1
  41b9b6:	4b09      	ldr	r3, [pc, #36]	; (41b9dc <.LVL254+0x12>)
  41b9b8:	6018      	str	r0, [r3, #0]
  41b9ba:	bd38      	pop	{r3, r4, r5, pc}

0041b9bc <.LVL251>:
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  41b9bc:	4629      	mov	r1, r5
  41b9be:	4808      	ldr	r0, [pc, #32]	; (41b9e0 <.LVL254+0x16>)
  41b9c0:	f002 ff4c 	bl	41e85c <.LFE142>

0041b9c4 <.LVL252>:
  41b9c4:	e7f0      	b.n	41b9a8 <.LVL249>
		xReturn = pdFALSE;
  41b9c6:	2000      	movs	r0, #0

0041b9c8 <.LVL253>:
}
  41b9c8:	bd38      	pop	{r3, r4, r5, pc}

0041b9ca <.LVL254>:
  41b9ca:	bf00      	nop
  41b9cc:	20417850 	.word	0x20417850
  41b9d0:	20417858 	.word	0x20417858
  41b9d4:	20417534 	.word	0x20417534
  41b9d8:	20417838 	.word	0x20417838
  41b9dc:	20417870 	.word	0x20417870
  41b9e0:	20417768 	.word	0x20417768

Disassembly of section .text.deflateReset%234:

0041b9e4 <deflateReset>:
{
  41b9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041b9e6 <.LCFI16>:
  41b9e6:	4604      	mov	r4, r0
    ret = deflateResetKeep(strm);
  41b9e8:	f7ff fe4b 	bl	41b682 <.LFE197>

0041b9ec <.LVL284>:
    if (ret == Z_OK)
  41b9ec:	4606      	mov	r6, r0
  41b9ee:	b108      	cbz	r0, 41b9f4 <.LVL286>

0041b9f0 <.LVL285>:
}
  41b9f0:	4630      	mov	r0, r6
  41b9f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041b9f4 <.LVL286>:
        lm_init(strm->state);
  41b9f4:	69e4      	ldr	r4, [r4, #28]

0041b9f6 <.LBB28>:
    s->window_size = (ulg)2L*s->w_size;
  41b9f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  41b9f8:	005b      	lsls	r3, r3, #1
  41b9fa:	63e3      	str	r3, [r4, #60]	; 0x3c
    CLEAR_HASH(s);
  41b9fc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
  41ba00:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  41ba02:	4413      	add	r3, r2
  41ba04:	6c61      	ldr	r1, [r4, #68]	; 0x44
  41ba06:	2500      	movs	r5, #0
  41ba08:	f821 5013 	strh.w	r5, [r1, r3, lsl #1]
  41ba0c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  41ba0e:	441a      	add	r2, r3
  41ba10:	0052      	lsls	r2, r2, #1
  41ba12:	4629      	mov	r1, r5
  41ba14:	6c60      	ldr	r0, [r4, #68]	; 0x44

0041ba16 <.LVL288>:
  41ba16:	f7fe fdeb 	bl	41a5f0 <.LFE157>

0041ba1a <.LVL289>:
    s->max_lazy_match   = configuration_table[s->level].max_lazy;
  41ba1a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  41ba1e:	4b0e      	ldr	r3, [pc, #56]	; (41ba58 <.LBE28+0x2>)
  41ba20:	0042      	lsls	r2, r0, #1
  41ba22:	1811      	adds	r1, r2, r0
  41ba24:	0089      	lsls	r1, r1, #2
  41ba26:	185f      	adds	r7, r3, r1
  41ba28:	f8b7 e002 	ldrh.w	lr, [r7, #2]
  41ba2c:	f8c4 e080 	str.w	lr, [r4, #128]	; 0x80
    s->good_match       = configuration_table[s->level].good_length;
  41ba30:	5a59      	ldrh	r1, [r3, r1]
  41ba32:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    s->nice_match       = configuration_table[s->level].nice_length;
  41ba36:	88b9      	ldrh	r1, [r7, #4]
  41ba38:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    s->max_chain_length = configuration_table[s->level].max_chain;
  41ba3c:	88fb      	ldrh	r3, [r7, #6]
  41ba3e:	67e3      	str	r3, [r4, #124]	; 0x7c
    s->strstart = 0;
  41ba40:	66e5      	str	r5, [r4, #108]	; 0x6c
    s->block_start = 0L;
  41ba42:	65e5      	str	r5, [r4, #92]	; 0x5c
    s->lookahead = 0;
  41ba44:	6765      	str	r5, [r4, #116]	; 0x74
    s->insert = 0;
  41ba46:	f241 63b4 	movw	r3, #5812	; 0x16b4
  41ba4a:	50e5      	str	r5, [r4, r3]
    s->match_length = s->prev_length = MIN_MATCH-1;
  41ba4c:	2302      	movs	r3, #2
  41ba4e:	67a3      	str	r3, [r4, #120]	; 0x78
  41ba50:	6623      	str	r3, [r4, #96]	; 0x60
    s->match_available = 0;
  41ba52:	66a5      	str	r5, [r4, #104]	; 0x68
    s->ins_h = 0;
  41ba54:	64a5      	str	r5, [r4, #72]	; 0x48

0041ba56 <.LBE28>:
    return ret;
  41ba56:	e7cb      	b.n	41b9f0 <.LVL285>
  41ba58:	0041ba5c 	.word	0x0041ba5c

Disassembly of section .rodata.configuration_table%235:

0041ba5c <configuration_table>:
	...
  41ba64:	00416739 00040004 00040008 00413579     9gA.........y5A.
  41ba74:	00050004 00080010 00413579 00060004     ........y5A.....
  41ba84:	00200020 00413579 00040004 00100010      . .y5A.........
  41ba94:	00411ef9 00100008 00200020 00411ef9     ..A..... . ...A.
  41baa4:	00100008 00800080 00411ef9 00200008     ..........A... .
  41bab4:	01000080 00411ef9 00800020 04000102     ......A. .......
  41bac4:	00411ef9 01020020 10000102 00411ef9     ..A. .........A.

Disassembly of section .rodata.base_dist%236:

0041bad4 <base_dist>:
  41bad4:	00000000 00000001 00000002 00000003     ................
  41bae4:	00000004 00000006 00000008 0000000c     ................
  41baf4:	00000010 00000018 00000020 00000030     ........ ...0...
  41bb04:	00000040 00000060 00000080 000000c0     @...`...........
  41bb14:	00000100 00000180 00000200 00000300     ................
  41bb24:	00000400 00000600 00000800 00000c00     ................
  41bb34:	00001000 00001800 00002000 00003000     ......... ...0..
  41bb44:	00004000 00006000                       .@...`..

Disassembly of section .rodata.extra_dbits%237:

0041bb4c <extra_dbits>:
	...
  41bb5c:	00000001 00000001 00000002 00000002     ................
  41bb6c:	00000003 00000003 00000004 00000004     ................
  41bb7c:	00000005 00000005 00000006 00000006     ................
  41bb8c:	00000007 00000007 00000008 00000008     ................
  41bb9c:	00000009 00000009 0000000a 0000000a     ................
  41bbac:	0000000b 0000000b 0000000c 0000000c     ................
  41bbbc:	0000000d 0000000d                       ........

Disassembly of section .rodata.static_dtree%238:

0041bbc4 <static_dtree>:
  41bbc4:	00050000 00050010 00050008 00050018     ................
  41bbd4:	00050004 00050014 0005000c 0005001c     ................
  41bbe4:	00050002 00050012 0005000a 0005001a     ................
  41bbf4:	00050006 00050016 0005000e 0005001e     ................
  41bc04:	00050001 00050011 00050009 00050019     ................
  41bc14:	00050005 00050015 0005000d 0005001d     ................
  41bc24:	00050003 00050013 0005000b 0005001b     ................
  41bc34:	00050007 00050017                       ........

Disassembly of section .text.wc_Des3_SetKey%239:

0041bc3c <wc_Des3_SetKey>:
    {
  41bc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041bc3e <.LCFI18>:
        if (des == NULL || key == NULL || dir < 0) {
  41bc3e:	460f      	mov	r7, r1
  41bc40:	fab1 f181 	clz	r1, r1

0041bc44 <.LVL259>:
  41bc44:	0949      	lsrs	r1, r1, #5
  41bc46:	ea51 71d3 	orrs.w	r1, r1, r3, lsr #31
  41bc4a:	d12f      	bne.n	41bcac <.LVL271>
  41bc4c:	b370      	cbz	r0, 41bcac <.LVL271>
  41bc4e:	461c      	mov	r4, r3
  41bc50:	4616      	mov	r6, r2
  41bc52:	4605      	mov	r5, r0
        ret = DesSetKey(key + (dir == DES_ENCRYPTION ? 0:16), dir, des->key[0]);
  41bc54:	2b00      	cmp	r3, #0
  41bc56:	bf0c      	ite	eq
  41bc58:	2000      	moveq	r0, #0

0041bc5a <.LVL260>:
  41bc5a:	2010      	movne	r0, #16
  41bc5c:	462a      	mov	r2, r5

0041bc5e <.LVL261>:
  41bc5e:	4619      	mov	r1, r3
  41bc60:	4438      	add	r0, r7
  41bc62:	f7fa fb5f 	bl	416324 <.LFE170>

0041bc66 <.LVL262>:
        if (ret != 0)
  41bc66:	4603      	mov	r3, r0
  41bc68:	b108      	cbz	r0, 41bc6e <.LVL264>

0041bc6a <.LVL263>:
    }
  41bc6a:	4618      	mov	r0, r3
  41bc6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041bc6e <.LVL264>:
        ret = DesSetKey(key + 8, !dir, des->key[1]);
  41bc6e:	f105 0280 	add.w	r2, r5, #128	; 0x80
  41bc72:	fab4 f184 	clz	r1, r4
  41bc76:	0949      	lsrs	r1, r1, #5
  41bc78:	f107 0008 	add.w	r0, r7, #8

0041bc7c <.LVL265>:
  41bc7c:	f7fa fb52 	bl	416324 <.LFE170>

0041bc80 <.LVL266>:
        if (ret != 0)
  41bc80:	4603      	mov	r3, r0
  41bc82:	2800      	cmp	r0, #0
  41bc84:	d1f1      	bne.n	41bc6a <.LVL263>
        ret = DesSetKey(key + (dir == DES_DECRYPTION ? 0:16), dir, des->key[2]);
  41bc86:	2c01      	cmp	r4, #1
  41bc88:	bf0c      	ite	eq
  41bc8a:	2000      	moveq	r0, #0

0041bc8c <.LVL267>:
  41bc8c:	2010      	movne	r0, #16
  41bc8e:	f505 7280 	add.w	r2, r5, #256	; 0x100
  41bc92:	4621      	mov	r1, r4
  41bc94:	4438      	add	r0, r7
  41bc96:	f7fa fb45 	bl	416324 <.LFE170>

0041bc9a <.LVL268>:
        if (ret != 0)
  41bc9a:	4603      	mov	r3, r0
  41bc9c:	2800      	cmp	r0, #0
  41bc9e:	d1e4      	bne.n	41bc6a <.LVL263>
        return wc_Des3_SetIV(des, iv);
  41bca0:	4631      	mov	r1, r6
  41bca2:	4628      	mov	r0, r5

0041bca4 <.LVL269>:
  41bca4:	f002 faa2 	bl	41e1ec <.LFE14>

0041bca8 <.LVL270>:
  41bca8:	4603      	mov	r3, r0
  41bcaa:	e7de      	b.n	41bc6a <.LVL263>

0041bcac <.LVL271>:
            return BAD_FUNC_ARG;
  41bcac:	f06f 03ac 	mvn.w	r3, #172	; 0xac

0041bcb0 <.LVL272>:
  41bcb0:	e7db      	b.n	41bc6a <.LVL263>

Disassembly of section .text.CLK_Initialize%240:

0041bcb4 <CLK_Initialize>:
Clock Initialize
*********************************************************************************/
void CLK_Initialize( void )
{
    /* Set Flash Wait States and  Enable Code Loop Optimization */
    EFC_REGS->EEFC_FMR = EEFC_FMR_FWS(6) | EEFC_FMR_CLOE_Msk;
  41bcb4:	4a17      	ldr	r2, [pc, #92]	; (41bd14 <.LBE8+0xa>)
  41bcb6:	4b18      	ldr	r3, [pc, #96]	; (41bd18 <.LBE8+0xe>)
  41bcb8:	601a      	str	r2, [r3, #0]

0041bcba <.LBB6>:
    PMC_REGS->CKGR_PLLAR = CKGR_PLLAR_ONE_Msk | CKGR_PLLAR_PLLACOUNT(0x3f) |
  41bcba:	4a18      	ldr	r2, [pc, #96]	; (41bd1c <.LBE8+0x12>)
  41bcbc:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  41bcc0:	629a      	str	r2, [r3, #40]	; 0x28
    while ( (PMC_REGS->PMC_SR & PMC_SR_LOCKA_Msk) != PMC_SR_LOCKA_Msk);
  41bcc2:	461a      	mov	r2, r3
  41bcc4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  41bcc6:	f013 0f02 	tst.w	r3, #2
  41bcca:	d0fb      	beq.n	41bcc4 <.LBB6+0xa>

0041bccc <.LBB8>:
    PMC_REGS->PMC_MCKR = (PMC_REGS->PMC_MCKR & ~PMC_MCKR_PRES_Msk) | PMC_MCKR_PRES_CLK_1;
  41bccc:	4a14      	ldr	r2, [pc, #80]	; (41bd20 <.LBE8+0x16>)
  41bcce:	6b13      	ldr	r3, [r2, #48]	; 0x30
  41bcd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  41bcd4:	6313      	str	r3, [r2, #48]	; 0x30
    while ((PMC_REGS->PMC_SR & PMC_SR_MCKRDY_Msk) != PMC_SR_MCKRDY_Msk);
  41bcd6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  41bcd8:	f013 0f08 	tst.w	r3, #8
  41bcdc:	d0fb      	beq.n	41bcd6 <.LBB8+0xa>
    PMC_REGS->PMC_MCKR = (PMC_REGS->PMC_MCKR & ~PMC_MCKR_MDIV_Msk) | PMC_MCKR_MDIV_PCK_DIV2;
  41bcde:	4a10      	ldr	r2, [pc, #64]	; (41bd20 <.LBE8+0x16>)
  41bce0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  41bce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  41bce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  41bcea:	6313      	str	r3, [r2, #48]	; 0x30
    while ((PMC_REGS->PMC_SR & PMC_SR_MCKRDY_Msk) != PMC_SR_MCKRDY_Msk);
  41bcec:	6e93      	ldr	r3, [r2, #104]	; 0x68
  41bcee:	f013 0f08 	tst.w	r3, #8
  41bcf2:	d0fb      	beq.n	41bcec <.LBB8+0x20>
    PMC_REGS->PMC_MCKR = (PMC_REGS->PMC_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_PLLA_CLK;
  41bcf4:	4a0a      	ldr	r2, [pc, #40]	; (41bd20 <.LBE8+0x16>)
  41bcf6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  41bcf8:	f023 0303 	bic.w	r3, r3, #3
  41bcfc:	f043 0302 	orr.w	r3, r3, #2
  41bd00:	6313      	str	r3, [r2, #48]	; 0x30
    while ((PMC_REGS->PMC_SR & PMC_SR_MCKRDY_Msk) != PMC_SR_MCKRDY_Msk);
  41bd02:	6e93      	ldr	r3, [r2, #104]	; 0x68
  41bd04:	f013 0f08 	tst.w	r3, #8
  41bd08:	d0fb      	beq.n	41bd02 <.LBB8+0x36>

0041bd0a <.LBE8>:




    /* Enable Peripheral Clock */
    PMC_REGS->PMC_PCER0=0x835c00;
  41bd0a:	4a06      	ldr	r2, [pc, #24]	; (41bd24 <.LBE8+0x1a>)
  41bd0c:	4b04      	ldr	r3, [pc, #16]	; (41bd20 <.LBE8+0x16>)
  41bd0e:	611a      	str	r2, [r3, #16]
  41bd10:	4770      	bx	lr
  41bd12:	bf00      	nop
  41bd14:	04000600 	.word	0x04000600
  41bd18:	400e0c00 	.word	0x400e0c00
  41bd1c:	20183f01 	.word	0x20183f01
  41bd20:	400e0600 	.word	0x400e0600
  41bd24:	00835c00 	.word	0x00835c00

Disassembly of section .rodata.base_length%241:

0041bd28 <base_length>:
  41bd28:	00000000 00000001 00000002 00000003     ................
  41bd38:	00000004 00000005 00000006 00000007     ................
  41bd48:	00000008 0000000a 0000000c 0000000e     ................
  41bd58:	00000010 00000014 00000018 0000001c     ................
  41bd68:	00000020 00000028 00000030 00000038      ...(...0...8...
  41bd78:	00000040 00000050 00000060 00000070     @...P...`...p...
  41bd88:	00000080 000000a0 000000c0 000000e0     ................
  41bd98:	00000000                                ....

Disassembly of section .rodata.extra_lbits%242:

0041bd9c <extra_lbits>:
	...
  41bdbc:	00000001 00000001 00000001 00000001     ................
  41bdcc:	00000002 00000002 00000002 00000002     ................
  41bddc:	00000003 00000003 00000003 00000003     ................
  41bdec:	00000004 00000004 00000004 00000004     ................
  41bdfc:	00000005 00000005 00000005 00000005     ................
  41be0c:	00000000                                ....

Disassembly of section .text.prvCopyDataToQueue%243:

0041be10 <prvCopyDataToQueue>:
{
  41be10:	b570      	push	{r4, r5, r6, lr}

0041be12 <.LCFI1>:
  41be12:	4604      	mov	r4, r0
  41be14:	4616      	mov	r6, r2

0041be16 <.LVL5>:
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  41be16:	6b85      	ldr	r5, [r0, #56]	; 0x38

0041be18 <.LVL6>:
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  41be18:	6c02      	ldr	r2, [r0, #64]	; 0x40

0041be1a <.LVL7>:
  41be1a:	b95a      	cbnz	r2, 41be34 <.LVL13>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  41be1c:	6803      	ldr	r3, [r0, #0]
  41be1e:	b11b      	cbz	r3, 41be28 <.LVL10>
BaseType_t xReturn = pdFALSE;
  41be20:	2000      	movs	r0, #0

0041be22 <.LVL8>:
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  41be22:	3501      	adds	r5, #1

0041be24 <.LVL9>:
  41be24:	63a5      	str	r5, [r4, #56]	; 0x38
}
  41be26:	bd70      	pop	{r4, r5, r6, pc}

0041be28 <.LVL10>:
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  41be28:	6840      	ldr	r0, [r0, #4]

0041be2a <.LVL11>:
  41be2a:	f000 ff83 	bl	41cd34 <.LBE81>

0041be2e <.LVL12>:
				pxQueue->pxMutexHolder = NULL;
  41be2e:	2300      	movs	r3, #0
  41be30:	6063      	str	r3, [r4, #4]
  41be32:	e7f6      	b.n	41be22 <.LVL8>

0041be34 <.LVL13>:
	else if( xPosition == queueSEND_TO_BACK )
  41be34:	b96e      	cbnz	r6, 41be52 <.LVL16>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  41be36:	6880      	ldr	r0, [r0, #8]

0041be38 <.LVL14>:
  41be38:	f7fa fd26 	bl	416888 <memcpy>

0041be3c <.LVL15>:
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  41be3c:	68a3      	ldr	r3, [r4, #8]
  41be3e:	6c22      	ldr	r2, [r4, #64]	; 0x40
  41be40:	4413      	add	r3, r2
  41be42:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  41be44:	6862      	ldr	r2, [r4, #4]
  41be46:	4293      	cmp	r3, r2
  41be48:	d317      	bcc.n	41be7a <.LVL18+0x22>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  41be4a:	6823      	ldr	r3, [r4, #0]
  41be4c:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  41be4e:	2000      	movs	r0, #0
  41be50:	e7e7      	b.n	41be22 <.LVL8>

0041be52 <.LVL16>:
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  41be52:	68c0      	ldr	r0, [r0, #12]

0041be54 <.LVL17>:
  41be54:	f7fa fd18 	bl	416888 <memcpy>

0041be58 <.LVL18>:
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  41be58:	6c22      	ldr	r2, [r4, #64]	; 0x40
  41be5a:	4252      	negs	r2, r2
  41be5c:	68e3      	ldr	r3, [r4, #12]
  41be5e:	4413      	add	r3, r2
  41be60:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  41be62:	6821      	ldr	r1, [r4, #0]
  41be64:	428b      	cmp	r3, r1
  41be66:	d202      	bcs.n	41be6e <.LVL18+0x16>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  41be68:	6863      	ldr	r3, [r4, #4]
  41be6a:	441a      	add	r2, r3
  41be6c:	60e2      	str	r2, [r4, #12]
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  41be6e:	b135      	cbz	r5, 41be7e <.LVL18+0x26>
  41be70:	2e02      	cmp	r6, #2
  41be72:	d104      	bne.n	41be7e <.LVL18+0x26>
				--uxMessagesWaiting;
  41be74:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
  41be76:	2000      	movs	r0, #0
  41be78:	e7d3      	b.n	41be22 <.LVL8>
  41be7a:	2000      	movs	r0, #0
  41be7c:	e7d1      	b.n	41be22 <.LVL8>
  41be7e:	2000      	movs	r0, #0
  41be80:	e7cf      	b.n	41be22 <.LVL8>

Disassembly of section .text.SetASNIntMP%244:

0041be82 <SetASNIntMP>:
{
  41be82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0041be86 <.LCFI105>:
  41be86:	4606      	mov	r6, r0
  41be88:	460f      	mov	r7, r1
  41be8a:	4615      	mov	r5, r2

0041be8c <.LVL552>:
    leadingBit = mp_leading_bit(n);
  41be8c:	f003 f868 	bl	41ef60 <.LFE96>

0041be90 <.LVL553>:
  41be90:	4680      	mov	r8, r0

0041be92 <.LVL554>:
    length = mp_unsigned_bin_size(n);
  41be92:	4630      	mov	r0, r6

0041be94 <.LVL555>:
  41be94:	f003 f84c 	bl	41ef30 <.LFE82>

0041be98 <.LVL556>:
  41be98:	4604      	mov	r4, r0

0041be9a <.LVL557>:
    idx = SetASNInt(length, leadingBit ? 0x80 : 0x00, output);
  41be9a:	f1b8 0f00 	cmp.w	r8, #0
  41be9e:	d11d      	bne.n	41bedc <.LBB177>

0041bea0 <.LBB174>:
    output[idx++] = ASN_INTEGER;
  41bea0:	4629      	mov	r1, r5
  41bea2:	2302      	movs	r3, #2
  41bea4:	f801 3b01 	strb.w	r3, [r1], #1
    idx += SetLength(len, output + idx);
  41bea8:	f000 fff3 	bl	41ce92 <.LFE184>

0041beac <.LVL559>:
  41beac:	1c41      	adds	r1, r0, #1

0041beae <.LVL560>:
    return idx;
  41beae:	4688      	mov	r8, r1

0041beb0 <.LBE174>:
    if (maxSz >= 0 && (idx + length) > maxSz)
  41beb0:	2f00      	cmp	r7, #0
  41beb2:	db02      	blt.n	41beba <.LBE174+0xa>
  41beb4:	1863      	adds	r3, r4, r1
  41beb6:	429f      	cmp	r7, r3
  41beb8:	db08      	blt.n	41becc <.LVL564>
    err = mp_to_unsigned_bin(n, output + idx);
  41beba:	4429      	add	r1, r5
  41bebc:	4630      	mov	r0, r6
  41bebe:	f002 ffcd 	bl	41ee5c <.LFE73>

0041bec2 <.LVL562>:
    if (err != MP_OKAY)
  41bec2:	b938      	cbnz	r0, 41bed4 <.LVL565>
    idx += length;
  41bec4:	eb04 0008 	add.w	r0, r4, r8

0041bec8 <.LVL563>:
    return idx;
  41bec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041becc <.LVL564>:
        return BUFFER_E;
  41becc:	f06f 0083 	mvn.w	r0, #131	; 0x83
  41bed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041bed4 <.LVL565>:
        return MP_TO_E;
  41bed4:	f06f 0070 	mvn.w	r0, #112	; 0x70

0041bed8 <.LVL566>:
  41bed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041bedc <.LBB177>:
    output[idx++] = ASN_INTEGER;
  41bedc:	4629      	mov	r1, r5
  41bede:	2302      	movs	r3, #2
  41bee0:	f801 3b01 	strb.w	r3, [r1], #1

0041bee4 <.LVL568>:
    idx += SetLength(len, output + idx);
  41bee4:	3001      	adds	r0, #1

0041bee6 <.LVL569>:
  41bee6:	f000 ffd4 	bl	41ce92 <.LFE184>

0041beea <.LVL570>:
        output[idx++] = 0x00;
  41beea:	1c81      	adds	r1, r0, #2

0041beec <.LVL571>:
  41beec:	4428      	add	r0, r5
  41beee:	2300      	movs	r3, #0
  41bef0:	7043      	strb	r3, [r0, #1]
  41bef2:	e7dc      	b.n	41beae <.LVL560>

Disassembly of section .text.RsaMGF%245:

0041bef4 <RsaMGF>:
{
  41bef4:	b500      	push	{lr}

0041bef6 <.LCFI6>:
  41bef6:	b083      	sub	sp, #12

0041bef8 <.LCFI7>:
    switch(type) {
  41bef8:	3801      	subs	r0, #1

0041befa <.LVL39>:
  41befa:	2819      	cmp	r0, #25
  41befc:	d830      	bhi.n	41bf60 <.LVL48>
  41befe:	e8df f000 	tbb	[pc, r0]
  41bf02:	1f17      	.short	0x1f17
  41bf04:	2f2f2f27 	.word	0x2f2f2f27
  41bf08:	2f2f2f2f 	.word	0x2f2f2f2f
  41bf0c:	2f2f2f2f 	.word	0x2f2f2f2f
  41bf10:	2f2f2f2f 	.word	0x2f2f2f2f
  41bf14:	2f2f2f2f 	.word	0x2f2f2f2f
  41bf18:	0d2f2f2f 	.word	0x0d2f2f2f
            ret = RsaMGF1(WC_HASH_TYPE_SHA, seed, seedSz, out, outSz, heap);
  41bf1c:	9805      	ldr	r0, [sp, #20]

0041bf1e <.LVL40>:
  41bf1e:	9001      	str	r0, [sp, #4]
  41bf20:	9804      	ldr	r0, [sp, #16]
  41bf22:	9000      	str	r0, [sp, #0]
  41bf24:	2004      	movs	r0, #4
  41bf26:	f7fb ff17 	bl	417d58 <.LFE18>

0041bf2a <.LVL41>:
}
  41bf2a:	b003      	add	sp, #12

0041bf2c <.LCFI8>:
  41bf2c:	f85d fb04 	ldr.w	pc, [sp], #4

0041bf30 <.LCFI9>:
            ret = RsaMGF1(WC_HASH_TYPE_SHA256, seed, seedSz, out, outSz, heap);
  41bf30:	9805      	ldr	r0, [sp, #20]
  41bf32:	9001      	str	r0, [sp, #4]
  41bf34:	9804      	ldr	r0, [sp, #16]
  41bf36:	9000      	str	r0, [sp, #0]
  41bf38:	2005      	movs	r0, #5
  41bf3a:	f7fb ff0d 	bl	417d58 <.LFE18>

0041bf3e <.LVL43>:
            break;
  41bf3e:	e7f4      	b.n	41bf2a <.LVL41>

0041bf40 <.LVL44>:
            ret = RsaMGF1(WC_HASH_TYPE_SHA384, seed, seedSz, out, outSz, heap);
  41bf40:	9805      	ldr	r0, [sp, #20]
  41bf42:	9001      	str	r0, [sp, #4]
  41bf44:	9804      	ldr	r0, [sp, #16]
  41bf46:	9000      	str	r0, [sp, #0]
  41bf48:	2006      	movs	r0, #6
  41bf4a:	f7fb ff05 	bl	417d58 <.LFE18>

0041bf4e <.LVL45>:
            break;
  41bf4e:	e7ec      	b.n	41bf2a <.LVL41>

0041bf50 <.LVL46>:
            ret = RsaMGF1(WC_HASH_TYPE_SHA512, seed, seedSz, out, outSz, heap);
  41bf50:	9805      	ldr	r0, [sp, #20]
  41bf52:	9001      	str	r0, [sp, #4]
  41bf54:	9804      	ldr	r0, [sp, #16]
  41bf56:	9000      	str	r0, [sp, #0]
  41bf58:	2007      	movs	r0, #7
  41bf5a:	f7fb fefd 	bl	417d58 <.LFE18>

0041bf5e <.LVL47>:
            break;
  41bf5e:	e7e4      	b.n	41bf2a <.LVL41>

0041bf60 <.LVL48>:
            ret = BAD_FUNC_ARG;
  41bf60:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041bf64 <.LVL49>:
    return ret;
  41bf64:	e7e1      	b.n	41bf2a <.LVL41>

Disassembly of section .text.xQueueGenericReset%246:

0041bf68 <xQueueGenericReset>:
{
  41bf68:	b538      	push	{r3, r4, r5, lr}

0041bf6a <.LCFI5>:
  41bf6a:	4604      	mov	r4, r0
  41bf6c:	460d      	mov	r5, r1

0041bf6e <.LVL42>:
	taskENTER_CRITICAL();
  41bf6e:	f002 fa51 	bl	41e414 <.LFE6>

0041bf72 <.LVL43>:
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  41bf72:	6822      	ldr	r2, [r4, #0]
  41bf74:	6c21      	ldr	r1, [r4, #64]	; 0x40
  41bf76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  41bf78:	fb03 f301 	mul.w	r3, r3, r1
  41bf7c:	18d0      	adds	r0, r2, r3
  41bf7e:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  41bf80:	2000      	movs	r0, #0
  41bf82:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  41bf84:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  41bf86:	1a5b      	subs	r3, r3, r1
  41bf88:	4413      	add	r3, r2
  41bf8a:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
  41bf8c:	23ff      	movs	r3, #255	; 0xff
  41bf8e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
  41bf92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
  41bf96:	b9a5      	cbnz	r5, 41bfc2 <.LVL46+0x16>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  41bf98:	6923      	ldr	r3, [r4, #16]
  41bf9a:	b91b      	cbnz	r3, 41bfa4 <.LVL44+0x4>
	taskEXIT_CRITICAL();
  41bf9c:	f002 fdb2 	bl	41eb04 <vPortExitCritical>

0041bfa0 <.LVL44>:
}
  41bfa0:	2001      	movs	r0, #1
  41bfa2:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  41bfa4:	f104 0010 	add.w	r0, r4, #16
  41bfa8:	f7ff fce0 	bl	41b96c <.LFE0>

0041bfac <.LVL46>:
  41bfac:	2800      	cmp	r0, #0
  41bfae:	d0f5      	beq.n	41bf9c <.LVL43+0x2a>
					queueYIELD_IF_USING_PREEMPTION();
  41bfb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  41bfb4:	4b07      	ldr	r3, [pc, #28]	; (41bfd4 <.LVL48+0x2>)
  41bfb6:	601a      	str	r2, [r3, #0]
  41bfb8:	f3bf 8f4f 	dsb	sy
  41bfbc:	f3bf 8f6f 	isb	sy
  41bfc0:	e7ec      	b.n	41bf9c <.LVL43+0x2a>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  41bfc2:	f104 0010 	add.w	r0, r4, #16
  41bfc6:	f002 fd5b 	bl	41ea80 <.LBE8>

0041bfca <.LVL47>:
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  41bfca:	f104 0024 	add.w	r0, r4, #36	; 0x24
  41bfce:	f002 fd57 	bl	41ea80 <.LBE8>

0041bfd2 <.LVL48>:
  41bfd2:	e7e3      	b.n	41bf9c <.LVL43+0x2a>
  41bfd4:	e000ed04 	.word	0xe000ed04

Disassembly of section .text.prvIdleTask%247:

0041bfd8 <prvIdleTask>:
{
  41bfd8:	b580      	push	{r7, lr}

0041bfda <.LBB27>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  41bfda:	4d16      	ldr	r5, [pc, #88]	; (41c034 <.LBE32+0x1c>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  41bfdc:	4f16      	ldr	r7, [pc, #88]	; (41c038 <.LBE32+0x20>)
				--uxCurrentNumberOfTasks;
  41bfde:	4e17      	ldr	r6, [pc, #92]	; (41c03c <.LBE32+0x24>)

0041bfe0 <.LBE27>:
				taskYIELD();
  41bfe0:	f8df 8060 	ldr.w	r8, [pc, #96]	; 41c044 <.LBE32+0x2c>

0041bfe4 <.LBB32>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  41bfe4:	682b      	ldr	r3, [r5, #0]
  41bfe6:	b1bb      	cbz	r3, 41c018 <.LBE32>
			taskENTER_CRITICAL();
  41bfe8:	f002 fa14 	bl	41e414 <.LFE6>

0041bfec <.LVL10>:
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  41bfec:	68fb      	ldr	r3, [r7, #12]
  41bfee:	68dc      	ldr	r4, [r3, #12]

0041bff0 <.LVL11>:
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  41bff0:	1d20      	adds	r0, r4, #4
  41bff2:	f002 f8bf 	bl	41e174 <.LFE106>

0041bff6 <.LVL12>:
				--uxCurrentNumberOfTasks;
  41bff6:	6833      	ldr	r3, [r6, #0]
  41bff8:	3b01      	subs	r3, #1
  41bffa:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
  41bffc:	682b      	ldr	r3, [r5, #0]
  41bffe:	3b01      	subs	r3, #1
  41c000:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
  41c002:	f002 fd7f 	bl	41eb04 <vPortExitCritical>

0041c006 <.LBB29>:
			vPortFree( pxTCB->pxStack );
  41c006:	6b20      	ldr	r0, [r4, #48]	; 0x30
  41c008:	f7fd fb5b 	bl	4196c2 <.LBE72>

0041c00c <.LVL14>:
			vPortFree( pxTCB );
  41c00c:	4620      	mov	r0, r4
  41c00e:	f7fd fb58 	bl	4196c2 <.LBE72>

0041c012 <.LBE29>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  41c012:	682b      	ldr	r3, [r5, #0]
  41c014:	2b00      	cmp	r3, #0
  41c016:	d1e7      	bne.n	41bfe8 <.LBB32+0x4>

0041c018 <.LBE32>:
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  41c018:	4b09      	ldr	r3, [pc, #36]	; (41c040 <.LBE32+0x28>)
  41c01a:	681b      	ldr	r3, [r3, #0]
  41c01c:	2b01      	cmp	r3, #1
  41c01e:	d9e1      	bls.n	41bfe4 <.LBB32>
				taskYIELD();
  41c020:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  41c024:	f8c8 3000 	str.w	r3, [r8]
  41c028:	f3bf 8f4f 	dsb	sy
  41c02c:	f3bf 8f6f 	isb	sy
  41c030:	e7d8      	b.n	41bfe4 <.LBB32>
  41c032:	bf00      	nop
  41c034:	20417848 	.word	0x20417848
  41c038:	20417790 	.word	0x20417790
  41c03c:	20417844 	.word	0x20417844
  41c040:	20417534 	.word	0x20417534
  41c044:	e000ed04 	.word	0xe000ed04

Disassembly of section .text.wc_ecc_set_curve%248:

0041c048 <wc_ecc_set_curve>:
{
  41c048:	b470      	push	{r4, r5, r6}

0041c04a <.LCFI8>:
    if (keysize <= 0 && curve_id < 0) {
  41c04a:	460e      	mov	r6, r1
  41c04c:	2900      	cmp	r1, #0
  41c04e:	dc01      	bgt.n	41c054 <.LCFI8+0xa>
  41c050:	2a00      	cmp	r2, #0
  41c052:	db23      	blt.n	41c09c <.LBE18>
    if (keysize > ECC_MAXSIZE) {
  41c054:	2e42      	cmp	r6, #66	; 0x42
  41c056:	dc24      	bgt.n	41c0a2 <.LVL81>
    if (key->idx != ECC_CUSTOM_IDX) {
  41c058:	6843      	ldr	r3, [r0, #4]
  41c05a:	f1b3 3fff 	cmp.w	r3, #4294967295
  41c05e:	d023      	beq.n	41c0a8 <.LVL83>

0041c060 <.LBB17>:
        key->idx = 0;
  41c060:	2100      	movs	r1, #0

0041c062 <.LVL68>:
  41c062:	6041      	str	r1, [r0, #4]
        key->dp = NULL;
  41c064:	6101      	str	r1, [r0, #16]

0041c066 <.LVL69>:
  41c066:	4b13      	ldr	r3, [pc, #76]	; (41c0b4 <.LVL86+0x4>)
  41c068:	240e      	movs	r4, #14
  41c06a:	e005      	b.n	41c078 <.LVL70+0xc>

0041c06c <.LVL70>:
            else if (keysize <= ecc_sets[x].size) {
  41c06c:	42a6      	cmp	r6, r4
  41c06e:	dd08      	ble.n	41c082 <.LVL70+0x16>
        for (x = 0; ecc_sets[x].size != 0; x++) {
  41c070:	3101      	adds	r1, #1
  41c072:	f853 4f34 	ldr.w	r4, [r3, #52]!
  41c076:	b174      	cbz	r4, 41c096 <.LBB18>
            if (curve_id > ECC_CURVE_DEF) {
  41c078:	2a00      	cmp	r2, #0
  41c07a:	ddf7      	ble.n	41c06c <.LVL70>
                if (curve_id == ecc_sets[x].id)
  41c07c:	685d      	ldr	r5, [r3, #4]
  41c07e:	42aa      	cmp	r2, r5
  41c080:	d1f6      	bne.n	41c070 <.LVL70+0x4>
        if (ecc_sets[x].size == 0) {
  41c082:	b19c      	cbz	r4, 41c0ac <.LBB19>
        key->idx = x;
  41c084:	6041      	str	r1, [r0, #4]
        key->dp  = &ecc_sets[x];
  41c086:	2234      	movs	r2, #52	; 0x34

0041c088 <.LVL73>:
  41c088:	4b0a      	ldr	r3, [pc, #40]	; (41c0b4 <.LVL86+0x4>)
  41c08a:	fb02 3101 	mla	r1, r2, r1, r3

0041c08e <.LVL74>:
  41c08e:	6101      	str	r1, [r0, #16]

0041c090 <.LBE17>:
    return 0;
  41c090:	2000      	movs	r0, #0

0041c092 <.LVL75>:
}
  41c092:	bc70      	pop	{r4, r5, r6}

0041c094 <.LCFI9>:
  41c094:	4770      	bx	lr

0041c096 <.LBB18>:
            return ECC_CURVE_OID_E;
  41c096:	f06f 00ab 	mvn.w	r0, #171	; 0xab

0041c09a <.LVL78>:
  41c09a:	e7fa      	b.n	41c092 <.LVL75>

0041c09c <.LBE18>:
        return BAD_FUNC_ARG;
  41c09c:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041c0a0 <.LVL80>:
  41c0a0:	e7f7      	b.n	41c092 <.LVL75>

0041c0a2 <.LVL81>:
        return ECC_BAD_ARG_E;
  41c0a2:	f06f 00a9 	mvn.w	r0, #169	; 0xa9

0041c0a6 <.LVL82>:
  41c0a6:	e7f4      	b.n	41c092 <.LVL75>

0041c0a8 <.LVL83>:
    return 0;
  41c0a8:	2000      	movs	r0, #0

0041c0aa <.LVL84>:
  41c0aa:	e7f2      	b.n	41c092 <.LVL75>

0041c0ac <.LBB19>:
            return ECC_CURVE_OID_E;
  41c0ac:	f06f 00ab 	mvn.w	r0, #171	; 0xab

0041c0b0 <.LVL86>:
  41c0b0:	e7ef      	b.n	41c092 <.LVL75>
  41c0b2:	bf00      	nop
  41c0b4:	00414728 	.word	0x00414728

Disassembly of section .text.wc_ecc_shared_secret%249:

0041c0b8 <wc_ecc_shared_secret>:
   if (private_key == NULL || public_key == NULL || out == NULL ||
  41c0b8:	2800      	cmp	r0, #0
  41c0ba:	d032      	beq.n	41c122 <.LCFI64>
{
  41c0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041c0be <.LCFI63>:
  41c0be:	4605      	mov	r5, r0
   if (private_key == NULL || public_key == NULL || out == NULL ||
  41c0c0:	b1e9      	cbz	r1, 41c0fe <.LVL846>
  41c0c2:	b1fa      	cbz	r2, 41c104 <.LVL848>
  41c0c4:	b1f3      	cbz	r3, 41c104 <.LVL848>
   if (private_key->type != ECC_PRIVATEKEY) {
  41c0c6:	6800      	ldr	r0, [r0, #0]

0041c0c8 <.LVL842>:
  41c0c8:	2802      	cmp	r0, #2
  41c0ca:	d11e      	bne.n	41c10a <.LVL849+0x2>
  41c0cc:	461f      	mov	r7, r3
  41c0ce:	4616      	mov	r6, r2
  41c0d0:	460c      	mov	r4, r1
   if (wc_ecc_is_valid_idx(private_key->idx) == 0 ||
  41c0d2:	6868      	ldr	r0, [r5, #4]
  41c0d4:	f002 f9c2 	bl	41e45c <.LBE24>

0041c0d8 <.LVL843>:
  41c0d8:	b1d0      	cbz	r0, 41c110 <.LVL851>
       wc_ecc_is_valid_idx(public_key->idx)  == 0) {
  41c0da:	6860      	ldr	r0, [r4, #4]
  41c0dc:	f002 f9be 	bl	41e45c <.LBE24>

0041c0e0 <.LVL844>:
   if (wc_ecc_is_valid_idx(private_key->idx) == 0 ||
  41c0e0:	b1c8      	cbz	r0, 41c116 <.LVL851+0x6>
   if (private_key->dp->id != public_key->dp->id) {
  41c0e2:	692a      	ldr	r2, [r5, #16]
  41c0e4:	6923      	ldr	r3, [r4, #16]
  41c0e6:	6852      	ldr	r2, [r2, #4]
  41c0e8:	685b      	ldr	r3, [r3, #4]
  41c0ea:	429a      	cmp	r2, r3
  41c0ec:	d116      	bne.n	41c11c <.LVL851+0xc>
   err = wc_ecc_shared_secret_ex(private_key, &public_key->pubkey, out, outlen);
  41c0ee:	463b      	mov	r3, r7
  41c0f0:	4632      	mov	r2, r6
  41c0f2:	f104 0118 	add.w	r1, r4, #24
  41c0f6:	4628      	mov	r0, r5
  41c0f8:	f7ff fa84 	bl	41b604 <.LFE22>

0041c0fc <.LVL845>:
   return err;
  41c0fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041c0fe <.LVL846>:
       return BAD_FUNC_ARG;
  41c0fe:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041c102 <.LVL847>:
  41c102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041c104 <.LVL848>:
  41c104:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041c108 <.LVL849>:
  41c108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return ECC_BAD_ARG_E;
  41c10a:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
  41c10e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041c110 <.LVL851>:
      return ECC_BAD_ARG_E;
  41c110:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
  41c114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41c116:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
  41c11a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return ECC_BAD_ARG_E;
  41c11c:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
}
  41c120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041c122 <.LCFI64>:
       return BAD_FUNC_ARG;
  41c122:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041c126 <.LVL855>:
}
  41c126:	4770      	bx	lr

Disassembly of section .text.fp_rshb%250:

0041c128 <fp_rshb>:
{
  41c128:	b5f0      	push	{r4, r5, r6, r7, lr}

0041c12a <.LCFI29>:
    mask = (((fp_digit)1) << D) - 1;
  41c12a:	2701      	movs	r7, #1
  41c12c:	408f      	lsls	r7, r1

0041c12e <.LVL248>:
    tmpc = c->dp + (c->used - 1);
  41c12e:	4604      	mov	r4, r0
  41c130:	f854 5b08 	ldr.w	r5, [r4], #8
  41c134:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
  41c138:	442b      	add	r3, r5
  41c13a:	eb04 0483 	add.w	r4, r4, r3, lsl #2

0041c13e <.LVL249>:
    for (x = c->used - 1; x >= 0; x--) {
  41c13e:	3d01      	subs	r5, #1

0041c140 <.LVL250>:
  41c140:	d411      	bmi.n	41c166 <.LVL259>
  41c142:	3f01      	subs	r7, #1

0041c144 <.LVL251>:
  41c144:	f1c1 0e20 	rsb	lr, r1, #32

0041c148 <.LVL252>:
  41c148:	2300      	movs	r3, #0

0041c14a <.LVL253>:
      rr = *tmpc & mask;
  41c14a:	6826      	ldr	r6, [r4, #0]

0041c14c <.LVL254>:
      *tmpc = (*tmpc >> D) | (r << shift);
  41c14c:	fa26 f201 	lsr.w	r2, r6, r1
  41c150:	fa03 f30e 	lsl.w	r3, r3, lr

0041c154 <.LVL255>:
  41c154:	4313      	orrs	r3, r2
  41c156:	f844 3904 	str.w	r3, [r4], #-4

0041c15a <.LVL256>:
    for (x = c->used - 1; x >= 0; x--) {
  41c15a:	3d01      	subs	r5, #1
      rr = *tmpc & mask;
  41c15c:	ea07 0306 	and.w	r3, r7, r6

0041c160 <.LVL258>:
    for (x = c->used - 1; x >= 0; x--) {
  41c160:	f1b5 3fff 	cmp.w	r5, #4294967295
  41c164:	d1f1      	bne.n	41c14a <.LVL253>

0041c166 <.LVL259>:
    fp_clamp(c);
  41c166:	6802      	ldr	r2, [r0, #0]
  41c168:	b1a2      	cbz	r2, 41c194 <.LVL261+0x18>
  41c16a:	1e53      	subs	r3, r2, #1
  41c16c:	1c51      	adds	r1, r2, #1

0041c16e <.LVL260>:
  41c16e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
  41c172:	b959      	cbnz	r1, 41c18c <.LVL261+0x10>
  41c174:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  41c178:	3204      	adds	r2, #4
  41c17a:	e000      	b.n	41c17e <.LVL261+0x2>

0041c17c <.LVL261>:
  41c17c:	4623      	mov	r3, r4
  41c17e:	b143      	cbz	r3, 41c192 <.LVL261+0x16>
  41c180:	1e5c      	subs	r4, r3, #1
  41c182:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  41c186:	2900      	cmp	r1, #0
  41c188:	d0f8      	beq.n	41c17c <.LVL261>
  41c18a:	6003      	str	r3, [r0, #0]
  41c18c:	6843      	ldr	r3, [r0, #4]
  41c18e:	6043      	str	r3, [r0, #4]
}
  41c190:	bdf0      	pop	{r4, r5, r6, r7, pc}
  41c192:	6003      	str	r3, [r0, #0]
    fp_clamp(c);
  41c194:	2300      	movs	r3, #0
  41c196:	e7fa      	b.n	41c18e <.LVL261+0x12>

Disassembly of section .text%251:

0041c198 <__do_global_dtors_aux>:
  41c198:	b510      	push	{r4, lr}
  41c19a:	4c05      	ldr	r4, [pc, #20]	; (41c1b0 <.LFE57+0x18>)
  41c19c:	7823      	ldrb	r3, [r4, #0]
  41c19e:	b933      	cbnz	r3, 41c1ae <__do_global_dtors_aux+0x16>
  41c1a0:	4b04      	ldr	r3, [pc, #16]	; (41c1b4 <.LFE57+0x1c>)
  41c1a2:	b113      	cbz	r3, 41c1aa <__do_global_dtors_aux+0x12>
  41c1a4:	4804      	ldr	r0, [pc, #16]	; (41c1b8 <.LFE57+0x20>)
  41c1a6:	f3af 8000 	nop.w
  41c1aa:	2301      	movs	r3, #1
  41c1ac:	7023      	strb	r3, [r4, #0]
  41c1ae:	bd10      	pop	{r4, pc}
  41c1b0:	20417708 	.word	0x20417708
	...

0041c1bc <frame_dummy>:
  41c1bc:	4b0c      	ldr	r3, [pc, #48]	; (41c1f0 <frame_dummy+0x34>)
  41c1be:	b143      	cbz	r3, 41c1d2 <frame_dummy+0x16>
  41c1c0:	480c      	ldr	r0, [pc, #48]	; (41c1f4 <frame_dummy+0x38>)
  41c1c2:	490d      	ldr	r1, [pc, #52]	; (41c1f8 <frame_dummy+0x3c>)
  41c1c4:	b510      	push	{r4, lr}
  41c1c6:	f3af 8000 	nop.w
  41c1ca:	480c      	ldr	r0, [pc, #48]	; (41c1fc <frame_dummy+0x40>)
  41c1cc:	6803      	ldr	r3, [r0, #0]
  41c1ce:	b923      	cbnz	r3, 41c1da <frame_dummy+0x1e>
  41c1d0:	bd10      	pop	{r4, pc}
  41c1d2:	480a      	ldr	r0, [pc, #40]	; (41c1fc <frame_dummy+0x40>)
  41c1d4:	6803      	ldr	r3, [r0, #0]
  41c1d6:	b933      	cbnz	r3, 41c1e6 <frame_dummy+0x2a>
  41c1d8:	4770      	bx	lr
  41c1da:	4b09      	ldr	r3, [pc, #36]	; (41c200 <frame_dummy+0x44>)
  41c1dc:	2b00      	cmp	r3, #0
  41c1de:	d0f7      	beq.n	41c1d0 <frame_dummy+0x14>
  41c1e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  41c1e4:	4718      	bx	r3
  41c1e6:	4b06      	ldr	r3, [pc, #24]	; (41c200 <frame_dummy+0x44>)
  41c1e8:	2b00      	cmp	r3, #0
  41c1ea:	d0f5      	beq.n	41c1d8 <frame_dummy+0x1c>
  41c1ec:	4718      	bx	r3
  41c1ee:	bf00      	nop
	...
  41c1f8:	2041770c 	.word	0x2041770c
	...

Disassembly of section .text.vTaskPriorityDisinheritAfterTimeout%252:

0041c204 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
  41c204:	b378      	cbz	r0, 41c266 <.LCFI34>
	{
  41c206:	b538      	push	{r3, r4, r5, lr}

0041c208 <.LCFI33>:
  41c208:	4604      	mov	r4, r0
  41c20a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  41c20c:	4291      	cmp	r1, r2
  41c20e:	bf38      	it	cc
  41c210:	4611      	movcc	r1, r2

0041c212 <.LVL301>:
			if( pxTCB->uxPriority != uxPriorityToUse )
  41c212:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  41c214:	428a      	cmp	r2, r1
  41c216:	d002      	beq.n	41c21e <.LVL303>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
  41c218:	6c80      	ldr	r0, [r0, #72]	; 0x48

0041c21a <.LVL302>:
  41c21a:	2801      	cmp	r0, #1
  41c21c:	d000      	beq.n	41c220 <.LVL304>

0041c21e <.LVL303>:
  41c21e:	bd38      	pop	{r3, r4, r5, pc}

0041c220 <.LVL304>:
					pxTCB->uxPriority = uxPriorityToUse;
  41c220:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  41c222:	69a0      	ldr	r0, [r4, #24]
  41c224:	2800      	cmp	r0, #0
  41c226:	db02      	blt.n	41c22e <.LVL305+0x2>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  41c228:	f1c1 0105 	rsb	r1, r1, #5

0041c22c <.LVL305>:
  41c22c:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
  41c22e:	eb02 0282 	add.w	r2, r2, r2, lsl #2

0041c232 <.LVL306>:
  41c232:	490d      	ldr	r1, [pc, #52]	; (41c268 <.LCFI34+0x2>)
  41c234:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  41c238:	6961      	ldr	r1, [r4, #20]
  41c23a:	4291      	cmp	r1, r2
  41c23c:	d1ef      	bne.n	41c21e <.LVL303>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  41c23e:	1d25      	adds	r5, r4, #4
  41c240:	4628      	mov	r0, r5
  41c242:	f001 ff97 	bl	41e174 <.LFE106>

0041c246 <.LVL307>:
						prvAddTaskToReadyList( pxTCB );
  41c246:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  41c248:	4b08      	ldr	r3, [pc, #32]	; (41c26c <.LCFI34+0x6>)
  41c24a:	681b      	ldr	r3, [r3, #0]
  41c24c:	4298      	cmp	r0, r3
  41c24e:	d901      	bls.n	41c254 <.LVL307+0xe>
  41c250:	4b06      	ldr	r3, [pc, #24]	; (41c26c <.LCFI34+0x6>)
  41c252:	6018      	str	r0, [r3, #0]
  41c254:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c258:	4629      	mov	r1, r5
  41c25a:	4b03      	ldr	r3, [pc, #12]	; (41c268 <.LCFI34+0x2>)
  41c25c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  41c260:	f002 fafc 	bl	41e85c <.LFE142>

0041c264 <.LVL308>:
	}
  41c264:	e7db      	b.n	41c21e <.LVL303>

0041c266 <.LCFI34>:
  41c266:	4770      	bx	lr
  41c268:	20417534 	.word	0x20417534
  41c26c:	20417858 	.word	0x20417858

Disassembly of section .text.fp_read_unsigned_bin%253:

0041c270 <fp_read_unsigned_bin>:
{
  41c270:	b570      	push	{r4, r5, r6, lr}

0041c272 <.LCFI34>:
  41c272:	4605      	mov	r5, r0
  41c274:	460c      	mov	r4, r1
  41c276:	4616      	mov	r6, r2
  fp_zero (a);
  41c278:	f002 fc58 	bl	41eb2c <.LFE154>

0041c27c <.LVL283>:
  if (c > 0 && (word32)c > maxC) {
  41c27c:	f5b6 7f08 	cmp.w	r6, #544	; 0x220
  41c280:	dd04      	ble.n	41c28c <.LBB13>

0041c282 <.LBB12>:
     int excess = (c - maxC);
  41c282:	f5a6 7308 	sub.w	r3, r6, #544	; 0x220

0041c286 <.LVL284>:
     c -= excess;
  41c286:	f44f 7608 	mov.w	r6, #544	; 0x220

0041c28a <.LVL285>:
     b += excess;
  41c28a:	441c      	add	r4, r3

0041c28c <.LBB13>:
     unsigned char *pd = (unsigned char *)a->dp;
  41c28c:	f105 0308 	add.w	r3, r5, #8

0041c290 <.LVL287>:
     a->used = (c + sizeof(fp_digit) - 1)/sizeof(fp_digit);
  41c290:	1cf2      	adds	r2, r6, #3
  41c292:	0892      	lsrs	r2, r2, #2
  41c294:	602a      	str	r2, [r5, #0]
     for (c -= 1; c >= 0; c -= 1) {
  41c296:	2e01      	cmp	r6, #1
  41c298:	d407      	bmi.n	41c2aa <.LBE13>
  41c29a:	4433      	add	r3, r6

0041c29c <.LVL288>:
  41c29c:	19a2      	adds	r2, r4, r6
       pd[c] = *b++;
  41c29e:	f814 1b01 	ldrb.w	r1, [r4], #1

0041c2a2 <.LVL289>:
  41c2a2:	f803 1d01 	strb.w	r1, [r3, #-1]!

0041c2a6 <.LVL290>:
     for (c -= 1; c >= 0; c -= 1) {
  41c2a6:	4294      	cmp	r4, r2
  41c2a8:	d1f9      	bne.n	41c29e <.LVL288+0x2>

0041c2aa <.LBE13>:
  fp_clamp (a);
  41c2aa:	682a      	ldr	r2, [r5, #0]
  41c2ac:	b1a2      	cbz	r2, 41c2d8 <.LBE13+0x2e>
  41c2ae:	1e53      	subs	r3, r2, #1
  41c2b0:	1c51      	adds	r1, r2, #1
  41c2b2:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
  41c2b6:	b959      	cbnz	r1, 41c2d0 <.LBE13+0x26>
  41c2b8:	eb05 0282 	add.w	r2, r5, r2, lsl #2
  41c2bc:	3204      	adds	r2, #4
  41c2be:	e000      	b.n	41c2c2 <.LBE13+0x18>
  41c2c0:	4603      	mov	r3, r0
  41c2c2:	b143      	cbz	r3, 41c2d6 <.LBE13+0x2c>
  41c2c4:	1e58      	subs	r0, r3, #1
  41c2c6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  41c2ca:	2900      	cmp	r1, #0
  41c2cc:	d0f8      	beq.n	41c2c0 <.LBE13+0x16>
  41c2ce:	602b      	str	r3, [r5, #0]
  41c2d0:	686b      	ldr	r3, [r5, #4]
  41c2d2:	606b      	str	r3, [r5, #4]
}
  41c2d4:	bd70      	pop	{r4, r5, r6, pc}
  41c2d6:	602b      	str	r3, [r5, #0]
  fp_clamp (a);
  41c2d8:	2300      	movs	r3, #0
  41c2da:	e7fa      	b.n	41c2d2 <.LBE13+0x28>

Disassembly of section .text._wc_ecc_curve_free%254:

0041c2dc <_wc_ecc_curve_free>:
    if (curve == NULL) {
  41c2dc:	b390      	cbz	r0, 41c344 <.LCFI1>
{
  41c2de:	b510      	push	{r4, lr}

0041c2e0 <.LCFI0>:
  41c2e0:	4604      	mov	r4, r0
    if (curve->load_mask & ECC_CURVE_FIELD_PRIME)
  41c2e2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
  41c2e6:	f013 0f01 	tst.w	r3, #1
  41c2ea:	d117      	bne.n	41c31c <.LVL2>

0041c2ec <.LVL1>:
    if (curve->load_mask & ECC_CURVE_FIELD_AF)
  41c2ec:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  41c2f0:	f013 0f02 	tst.w	r3, #2
  41c2f4:	d116      	bne.n	41c324 <.LVL4+0x2>
    if (curve->load_mask & ECC_CURVE_FIELD_ORDER)
  41c2f6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  41c2fa:	f013 0f08 	tst.w	r3, #8
  41c2fe:	d115      	bne.n	41c32c <.LVL5+0x2>
    if (curve->load_mask & ECC_CURVE_FIELD_GX)
  41c300:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  41c304:	f013 0f10 	tst.w	r3, #16
  41c308:	d114      	bne.n	41c334 <.LVL6+0x2>
    if (curve->load_mask & ECC_CURVE_FIELD_GY)
  41c30a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  41c30e:	f013 0f20 	tst.w	r3, #32
  41c312:	d113      	bne.n	41c33c <.LVL7+0x2>
    curve->load_mask = 0;
  41c314:	2300      	movs	r3, #0
  41c316:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  41c31a:	bd10      	pop	{r4, pc}

0041c31c <.LVL2>:
        mp_clear(curve->prime);
  41c31c:	6840      	ldr	r0, [r0, #4]

0041c31e <.LVL3>:
  41c31e:	f002 fd3d 	bl	41ed9c <.LFE170>

0041c322 <.LVL4>:
  41c322:	e7e3      	b.n	41c2ec <.LVL1>
        mp_clear(curve->Af);
  41c324:	68a0      	ldr	r0, [r4, #8]
  41c326:	f002 fd39 	bl	41ed9c <.LFE170>

0041c32a <.LVL5>:
  41c32a:	e7e4      	b.n	41c2f6 <.LVL1+0xa>
        mp_clear(curve->order);
  41c32c:	68e0      	ldr	r0, [r4, #12]
  41c32e:	f002 fd35 	bl	41ed9c <.LFE170>

0041c332 <.LVL6>:
  41c332:	e7e5      	b.n	41c300 <.LVL1+0x14>
        mp_clear(curve->Gx);
  41c334:	6920      	ldr	r0, [r4, #16]
  41c336:	f002 fd31 	bl	41ed9c <.LFE170>

0041c33a <.LVL7>:
  41c33a:	e7e6      	b.n	41c30a <.LVL1+0x1e>
        mp_clear(curve->Gy);
  41c33c:	6960      	ldr	r0, [r4, #20]
  41c33e:	f002 fd2d 	bl	41ed9c <.LFE170>

0041c342 <.LVL8>:
  41c342:	e7e7      	b.n	41c314 <.LVL1+0x28>

0041c344 <.LCFI1>:
  41c344:	4770      	bx	lr

Disassembly of section .text.vTaskStartScheduler%255:

0041c348 <vTaskStartScheduler>:
{
  41c348:	b500      	push	{lr}

0041c34a <.LCFI9>:
  41c34a:	b083      	sub	sp, #12

0041c34c <.LCFI10>:
		xReturn = xTaskCreate(	prvIdleTask,
  41c34c:	4b12      	ldr	r3, [pc, #72]	; (41c398 <.LVL141+0x4>)
  41c34e:	9301      	str	r3, [sp, #4]
  41c350:	2300      	movs	r3, #0
  41c352:	9300      	str	r3, [sp, #0]
  41c354:	2280      	movs	r2, #128	; 0x80
  41c356:	4911      	ldr	r1, [pc, #68]	; (41c39c <.LVL141+0x8>)
  41c358:	4811      	ldr	r0, [pc, #68]	; (41c3a0 <.LVL141+0xc>)
  41c35a:	f7f8 ffc7 	bl	4152ec <.LFE1>

0041c35e <.LVL138>:
	if( xReturn == pdPASS )
  41c35e:	2801      	cmp	r0, #1
  41c360:	d002      	beq.n	41c368 <.LBB62>

0041c362 <.LVL139>:
}
  41c362:	b003      	add	sp, #12

0041c364 <.LCFI11>:
  41c364:	f85d fb04 	ldr.w	pc, [sp], #4

0041c368 <.LBB62>:

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  41c368:	f04f 0320 	mov.w	r3, #32
  41c36c:	b672      	cpsid	i
  41c36e:	f383 8811 	msr	BASEPRI, r3
  41c372:	f3bf 8f6f 	isb	sy
  41c376:	f3bf 8f4f 	dsb	sy
  41c37a:	b662      	cpsie	i

0041c37c <.LBE62>:
		xNextTaskUnblockTime = portMAX_DELAY;
  41c37c:	f04f 32ff 	mov.w	r2, #4294967295
  41c380:	4b08      	ldr	r3, [pc, #32]	; (41c3a4 <.LVL141+0x10>)
  41c382:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  41c384:	2201      	movs	r2, #1
  41c386:	4b08      	ldr	r3, [pc, #32]	; (41c3a8 <.LVL141+0x14>)
  41c388:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  41c38a:	2200      	movs	r2, #0
  41c38c:	4b07      	ldr	r3, [pc, #28]	; (41c3ac <.LVL141+0x18>)
  41c38e:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  41c390:	f000 ffa8 	bl	41d2e4 <xPortStartScheduler>

0041c394 <.LVL141>:
}
  41c394:	e7e5      	b.n	41c362 <.LVL139>
  41c396:	bf00      	nop
  41c398:	2041785c 	.word	0x2041785c
  41c39c:	0041eec0 	.word	0x0041eec0
  41c3a0:	0041bfd9 	.word	0x0041bfd9
  41c3a4:	20417860 	.word	0x20417860
  41c3a8:	20417868 	.word	0x20417868
  41c3ac:	2041786c 	.word	0x2041786c

Disassembly of section .text.DecodeECC_DSA_Sig%256:

0041c3b0 <DecodeECC_DSA_Sig>:


/* Der Decode ECC-DSA Signature, r & s stored as big ints */
int DecodeECC_DSA_Sig(const byte* sig, word32 sigLen, mp_int* r, mp_int* s)
{
  41c3b0:	b5f0      	push	{r4, r5, r6, r7, lr}

0041c3b2 <.LCFI149>:
  41c3b2:	b083      	sub	sp, #12

0041c3b4 <.LCFI150>:
  41c3b4:	4605      	mov	r5, r0
  41c3b6:	460c      	mov	r4, r1
  41c3b8:	4616      	mov	r6, r2
  41c3ba:	461f      	mov	r7, r3
    word32 idx = 0;
  41c3bc:	2300      	movs	r3, #0

0041c3be <.LVL1214>:
  41c3be:	9301      	str	r3, [sp, #4]
    int    len = 0;
  41c3c0:	aa02      	add	r2, sp, #8

0041c3c2 <.LVL1215>:
  41c3c2:	f842 3d08 	str.w	r3, [r2, #-8]!

    if (GetSequence(sig, &idx, &len, sigLen) < 0) {
  41c3c6:	460b      	mov	r3, r1
  41c3c8:	a901      	add	r1, sp, #4

0041c3ca <.LVL1216>:
  41c3ca:	f002 fb6f 	bl	41eaac <.LFE26>

0041c3ce <.LVL1217>:
  41c3ce:	2800      	cmp	r0, #0
  41c3d0:	db19      	blt.n	41c406 <.LCFI152>
        return ASN_ECC_KEY_E;
    }

    if ((word32)len > (sigLen - idx)) {
  41c3d2:	9b01      	ldr	r3, [sp, #4]
  41c3d4:	1ae3      	subs	r3, r4, r3
  41c3d6:	9a00      	ldr	r2, [sp, #0]
  41c3d8:	4293      	cmp	r3, r2
  41c3da:	d317      	bcc.n	41c40c <.LCFI152+0x6>
        return ASN_ECC_KEY_E;
    }

    if (GetInt(r, sig, &idx, sigLen) < 0) {
  41c3dc:	4623      	mov	r3, r4
  41c3de:	aa01      	add	r2, sp, #4
  41c3e0:	4629      	mov	r1, r5
  41c3e2:	4630      	mov	r0, r6
  41c3e4:	f000 fd2a 	bl	41ce3c <.LFE144>

0041c3e8 <.LVL1218>:
  41c3e8:	2800      	cmp	r0, #0
  41c3ea:	db12      	blt.n	41c412 <.LCFI152+0xc>
        return ASN_ECC_KEY_E;
    }

    if (GetInt(s, sig, &idx, sigLen) < 0) {
  41c3ec:	4623      	mov	r3, r4
  41c3ee:	aa01      	add	r2, sp, #4
  41c3f0:	4629      	mov	r1, r5
  41c3f2:	4638      	mov	r0, r7
  41c3f4:	f000 fd22 	bl	41ce3c <.LFE144>

0041c3f8 <.LVL1219>:
  41c3f8:	2800      	cmp	r0, #0
        return ASN_ECC_KEY_E;
    }

    return 0;
  41c3fa:	bfb4      	ite	lt
  41c3fc:	f06f 00aa 	mvnlt.w	r0, #170	; 0xaa
  41c400:	2000      	movge	r0, #0
}
  41c402:	b003      	add	sp, #12

0041c404 <.LCFI151>:
  41c404:	bdf0      	pop	{r4, r5, r6, r7, pc}

0041c406 <.LCFI152>:
        return ASN_ECC_KEY_E;
  41c406:	f06f 00aa 	mvn.w	r0, #170	; 0xaa
  41c40a:	e7fa      	b.n	41c402 <.LVL1219+0xa>
        return ASN_ECC_KEY_E;
  41c40c:	f06f 00aa 	mvn.w	r0, #170	; 0xaa
  41c410:	e7f7      	b.n	41c402 <.LVL1219+0xa>
        return ASN_ECC_KEY_E;
  41c412:	f06f 00aa 	mvn.w	r0, #170	; 0xaa
  41c416:	e7f4      	b.n	41c402 <.LVL1219+0xa>

Disassembly of section .text.wc_DeCompress%257:

0041c418 <wc_DeCompress>:
 *
 * return:
 *    negative - error code
 *    positive - bytes stored in out buffer
 */ 
{
  41c418:	b510      	push	{r4, lr}

0041c41a <.LCFI7>:
  41c41a:	b08e      	sub	sp, #56	; 0x38

0041c41c <.LCFI8>:
    z_stream stream;
    int result = 0;

    stream.next_in = (Bytef*)in;
  41c41c:	9200      	str	r2, [sp, #0]
    stream.avail_in = (uInt)inSz;
  41c41e:	9301      	str	r3, [sp, #4]
    /* Check for source > 64K on 16-bit machine: */
    if ((uLong)stream.avail_in != inSz) return DECOMPRESS_INIT_E;

    stream.next_out = out;
  41c420:	9003      	str	r0, [sp, #12]
    stream.avail_out = (uInt)outSz;
  41c422:	9104      	str	r1, [sp, #16]
    if ((uLong)stream.avail_out != outSz) return DECOMPRESS_INIT_E;

    stream.zalloc = (alloc_func)myAlloc;
  41c424:	4b13      	ldr	r3, [pc, #76]	; (41c474 <.LVL32+0xe>)

0041c426 <.LVL22>:
  41c426:	9308      	str	r3, [sp, #32]
    stream.zfree = (free_func)myFree;
  41c428:	4b13      	ldr	r3, [pc, #76]	; (41c478 <.LVL32+0x12>)
  41c42a:	9309      	str	r3, [sp, #36]	; 0x24
    stream.opaque = (voidpf)0;
  41c42c:	2300      	movs	r3, #0
  41c42e:	930a      	str	r3, [sp, #40]	; 0x28

    if (inflateInit2(&stream, DEFLATE_DEFAULT_WINDOWBITS) != Z_OK)
  41c430:	2338      	movs	r3, #56	; 0x38
  41c432:	4a12      	ldr	r2, [pc, #72]	; (41c47c <.LVL32+0x16>)

0041c434 <.LVL23>:
  41c434:	210b      	movs	r1, #11

0041c436 <.LVL24>:
  41c436:	4668      	mov	r0, sp

0041c438 <.LVL25>:
  41c438:	f7fe fd14 	bl	41ae64 <.LFE169>

0041c43c <.LVL26>:
  41c43c:	b9b0      	cbnz	r0, 41c46c <.LVL32+0x6>
        return DECOMPRESS_INIT_E;

    if (inflate(&stream, Z_FINISH) != Z_STREAM_END) {
  41c43e:	2104      	movs	r1, #4
  41c440:	4668      	mov	r0, sp
  41c442:	f7ea ffa5 	bl	407390 <inflate>

0041c446 <.LVL27>:
  41c446:	2801      	cmp	r0, #1
  41c448:	d10a      	bne.n	41c460 <.LCFI10>
        inflateEnd(&stream);
        return DECOMPRESS_E;
    }
    
    result = (int)stream.total_out;
  41c44a:	9c05      	ldr	r4, [sp, #20]

0041c44c <.LVL28>:

    if (inflateEnd(&stream) != Z_OK)
  41c44c:	4668      	mov	r0, sp
  41c44e:	f001 fca3 	bl	41dd98 <.LFE164>

0041c452 <.LVL29>:
  41c452:	2800      	cmp	r0, #0
        result = DECOMPRESS_E;
  41c454:	bf18      	it	ne
  41c456:	f06f 04b9 	mvnne.w	r4, #185	; 0xb9

0041c45a <.LVL30>:

    return result;
}
  41c45a:	4620      	mov	r0, r4
  41c45c:	b00e      	add	sp, #56	; 0x38

0041c45e <.LCFI9>:
  41c45e:	bd10      	pop	{r4, pc}

0041c460 <.LCFI10>:
        inflateEnd(&stream);
  41c460:	4668      	mov	r0, sp
  41c462:	f001 fc99 	bl	41dd98 <.LFE164>

0041c466 <.LVL32>:
        return DECOMPRESS_E;
  41c466:	f06f 04b9 	mvn.w	r4, #185	; 0xb9
  41c46a:	e7f6      	b.n	41c45a <.LVL30>
        return DECOMPRESS_INIT_E;
  41c46c:	f06f 04b8 	mvn.w	r4, #184	; 0xb8
  41c470:	e7f3      	b.n	41c45a <.LVL30>
  41c472:	bf00      	nop
  41c474:	0041ed85 	.word	0x0041ed85
  41c478:	0041ed33 	.word	0x0041ed33
  41c47c:	0041eec8 	.word	0x0041eec8

Disassembly of section .text.GetLength%258:

0041c480 <GetLength>:
{
  41c480:	b5f0      	push	{r4, r5, r6, r7, lr}

0041c482 <.LCFI12>:
    word32  idx = *inOutIdx;
  41c482:	680e      	ldr	r6, [r1, #0]

0041c484 <.LVL94>:
    *len = 0;    /* default length */
  41c484:	2400      	movs	r4, #0
  41c486:	6014      	str	r4, [r2, #0]
    if ((idx + 1) > maxIdx) {   /* for first read */
  41c488:	1c77      	adds	r7, r6, #1
  41c48a:	429f      	cmp	r7, r3
  41c48c:	d81f      	bhi.n	41c4ce <.LBE69>

0041c48e <.LVL95>:
    b = input[idx++];
  41c48e:	1985      	adds	r5, r0, r6
  41c490:	5d84      	ldrb	r4, [r0, r6]

0041c492 <.LVL96>:
    if (b >= ASN_LONG_LENGTH) {
  41c492:	f014 0f80 	tst.w	r4, #128	; 0x80
  41c496:	d108      	bne.n	41c4aa <.LBB69>
        length = b;
  41c498:	4620      	mov	r0, r4

0041c49a <.LVL97>:
    if ((idx + length) > maxIdx) {   /* for user of length */
  41c49a:	19c4      	adds	r4, r0, r7
  41c49c:	42a3      	cmp	r3, r4
  41c49e:	d31c      	bcc.n	41c4da <.LBE70>
    *inOutIdx = idx;
  41c4a0:	600f      	str	r7, [r1, #0]
    if (length > 0)
  41c4a2:	2800      	cmp	r0, #0
  41c4a4:	dd1e      	ble.n	41c4e4 <.LVL114>
        *len = length;
  41c4a6:	6010      	str	r0, [r2, #0]
  41c4a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0041c4aa <.LBB69>:
        word32 bytes = b & 0x7F;
  41c4aa:	f004 047f 	and.w	r4, r4, #127	; 0x7f

0041c4ae <.LVL99>:
        if ((idx + bytes) > maxIdx) {   /* for reading bytes */
  41c4ae:	eb07 0e04 	add.w	lr, r7, r4
  41c4b2:	4573      	cmp	r3, lr
  41c4b4:	d30e      	bcc.n	41c4d4 <.LBB70>

0041c4b6 <.LVL100>:
        while (bytes--) {
  41c4b6:	b19c      	cbz	r4, 41c4e0 <.LVL112>
  41c4b8:	4434      	add	r4, r6

0041c4ba <.LVL101>:
  41c4ba:	4404      	add	r4, r0
  41c4bc:	2000      	movs	r0, #0

0041c4be <.LVL102>:
            length = (length << 8) | b;
  41c4be:	f815 6f01 	ldrb.w	r6, [r5, #1]!

0041c4c2 <.LVL103>:
  41c4c2:	ea46 2000 	orr.w	r0, r6, r0, lsl #8

0041c4c6 <.LVL104>:
        while (bytes--) {
  41c4c6:	42a5      	cmp	r5, r4
  41c4c8:	d1f9      	bne.n	41c4be <.LVL102>
            b = input[idx++];
  41c4ca:	4677      	mov	r7, lr

0041c4cc <.LVL105>:
  41c4cc:	e7e5      	b.n	41c49a <.LVL97>

0041c4ce <.LBE69>:
        return BUFFER_E;
  41c4ce:	f06f 0083 	mvn.w	r0, #131	; 0x83

0041c4d2 <.LVL107>:
  41c4d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0041c4d4 <.LBB70>:
            return BUFFER_E;
  41c4d4:	f06f 0083 	mvn.w	r0, #131	; 0x83

0041c4d8 <.LVL109>:
  41c4d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0041c4da <.LBE70>:
        return BUFFER_E;
  41c4da:	f06f 0083 	mvn.w	r0, #131	; 0x83

0041c4de <.LVL111>:
  41c4de:	bdf0      	pop	{r4, r5, r6, r7, pc}

0041c4e0 <.LVL112>:
    *inOutIdx = idx;
  41c4e0:	600f      	str	r7, [r1, #0]

0041c4e2 <.LVL113>:
  41c4e2:	2000      	movs	r0, #0

0041c4e4 <.LVL114>:
}
  41c4e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

Disassembly of section .text.fp_cmp_mag%259:

0041c4e6 <fp_cmp_mag>:
   if (a->used > b->used) {
  41c4e6:	6802      	ldr	r2, [r0, #0]
  41c4e8:	680b      	ldr	r3, [r1, #0]
  41c4ea:	429a      	cmp	r2, r3
  41c4ec:	dc20      	bgt.n	41c530 <.LVL107>
   } else if (a->used < b->used) {
  41c4ee:	db21      	blt.n	41c534 <.LVL109>

0041c4f0 <.LVL102>:
      for (x = a->used - 1; x >= 0; x--) {
  41c4f0:	1e53      	subs	r3, r2, #1

0041c4f2 <.LVL103>:
  41c4f2:	d422      	bmi.n	41c53a <.LVL111>
{
  41c4f4:	b430      	push	{r4, r5}

0041c4f6 <.LCFI13>:
          if (a->dp[x] > b->dp[x]) {
  41c4f6:	1c9c      	adds	r4, r3, #2
  41c4f8:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
  41c4fc:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
  41c500:	42a5      	cmp	r5, r4
  41c502:	d81c      	bhi.n	41c53e <.LCFI15>
          } else if (a->dp[x] < b->dp[x]) {
  41c504:	d31d      	bcc.n	41c542 <.LVL115>
  41c506:	0092      	lsls	r2, r2, #2
  41c508:	3204      	adds	r2, #4
  41c50a:	4410      	add	r0, r2

0041c50c <.LVL104>:
  41c50c:	4411      	add	r1, r2

0041c50e <.LVL105>:
      for (x = a->used - 1; x >= 0; x--) {
  41c50e:	3b01      	subs	r3, #1
  41c510:	f1b3 3fff 	cmp.w	r3, #4294967295
  41c514:	d009      	beq.n	41c52a <.LVL105+0x1c>
          if (a->dp[x] > b->dp[x]) {
  41c516:	f850 4d04 	ldr.w	r4, [r0, #-4]!
  41c51a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  41c51e:	4294      	cmp	r4, r2
  41c520:	d812      	bhi.n	41c548 <.LVL117>
          } else if (a->dp[x] < b->dp[x]) {
  41c522:	d2f4      	bcs.n	41c50e <.LVL105>
             return FP_LT;
  41c524:	f04f 30ff 	mov.w	r0, #4294967295
  41c528:	e000      	b.n	41c52c <.LVL105+0x1e>
   return FP_EQ;
  41c52a:	2000      	movs	r0, #0
}
  41c52c:	bc30      	pop	{r4, r5}

0041c52e <.LCFI14>:
  41c52e:	4770      	bx	lr

0041c530 <.LVL107>:
      return FP_GT;
  41c530:	2001      	movs	r0, #1

0041c532 <.LVL108>:
  41c532:	4770      	bx	lr

0041c534 <.LVL109>:
      return FP_LT;
  41c534:	f04f 30ff 	mov.w	r0, #4294967295

0041c538 <.LVL110>:
  41c538:	4770      	bx	lr

0041c53a <.LVL111>:
   return FP_EQ;
  41c53a:	2000      	movs	r0, #0

0041c53c <.LVL112>:
  41c53c:	4770      	bx	lr

0041c53e <.LCFI15>:
             return FP_GT;
  41c53e:	2001      	movs	r0, #1

0041c540 <.LVL114>:
  41c540:	e7f4      	b.n	41c52c <.LVL105+0x1e>

0041c542 <.LVL115>:
             return FP_LT;
  41c542:	f04f 30ff 	mov.w	r0, #4294967295

0041c546 <.LVL116>:
  41c546:	e7f1      	b.n	41c52c <.LVL105+0x1e>

0041c548 <.LVL117>:
             return FP_GT;
  41c548:	2001      	movs	r0, #1
  41c54a:	e7ef      	b.n	41c52c <.LVL105+0x1e>

Disassembly of section .text.pvPortMalloc%260:

0041c54c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  41c54c:	b538      	push	{r3, r4, r5, lr}

0041c54e <.LCFI0>:
  41c54e:	4604      	mov	r4, r0

0041c550 <.LVL1>:
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  41c550:	f010 0f07 	tst.w	r0, #7
  41c554:	d002      	beq.n	41c55c <.LVL2>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  41c556:	f020 0407 	bic.w	r4, r0, #7
  41c55a:	3408      	adds	r4, #8

0041c55c <.LVL2>:
		}
	}
	#endif

	vTaskSuspendAll();
  41c55c:	f7fc f808 	bl	418570 <.LFE155>

0041c560 <.LVL3>:
	{
		if( pucAlignedHeap == NULL )
  41c560:	4b10      	ldr	r3, [pc, #64]	; (41c5a4 <.LBE2+0x2>)
  41c562:	681b      	ldr	r3, [r3, #0]
  41c564:	b193      	cbz	r3, 41c58c <.LVL8>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  41c566:	4b10      	ldr	r3, [pc, #64]	; (41c5a8 <.LBE2+0x6>)
  41c568:	681b      	ldr	r3, [r3, #0]
  41c56a:	441c      	add	r4, r3

0041c56c <.LVL4>:
  41c56c:	42a3      	cmp	r3, r4
  41c56e:	d213      	bcs.n	41c598 <.LVL9>
  41c570:	f649 72f7 	movw	r2, #40951	; 0x9ff7
  41c574:	4294      	cmp	r4, r2
  41c576:	d80f      	bhi.n	41c598 <.LVL9>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  41c578:	4a0a      	ldr	r2, [pc, #40]	; (41c5a4 <.LBE2+0x2>)
  41c57a:	6815      	ldr	r5, [r2, #0]
  41c57c:	441d      	add	r5, r3

0041c57e <.LVL5>:
			xNextFreeByte += xWantedSize;
  41c57e:	4b0a      	ldr	r3, [pc, #40]	; (41c5a8 <.LBE2+0x6>)
  41c580:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  41c582:	f7fb fdc5 	bl	418110 <.LBE840>

0041c586 <.LVL6>:

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  41c586:	b14d      	cbz	r5, 41c59c <.LBB2>

0041c588 <.LVL7>:
		}
	}
	#endif

	return pvReturn;
}
  41c588:	4628      	mov	r0, r5
  41c58a:	bd38      	pop	{r3, r4, r5, pc}

0041c58c <.LVL8>:
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  41c58c:	4b07      	ldr	r3, [pc, #28]	; (41c5ac <.LBE2+0xa>)
  41c58e:	f023 0307 	bic.w	r3, r3, #7
  41c592:	4a04      	ldr	r2, [pc, #16]	; (41c5a4 <.LBE2+0x2>)
  41c594:	6013      	str	r3, [r2, #0]
  41c596:	e7e6      	b.n	41c566 <.LVL3+0x6>

0041c598 <.LVL9>:
	( void ) xTaskResumeAll();
  41c598:	f7fb fdba 	bl	418110 <.LBE840>

0041c59c <.LBB2>:
			vApplicationMallocFailedHook();
  41c59c:	f002 fa65 	bl	41ea6a <.LBE6>

0041c5a0 <.LVL11>:
  41c5a0:	2500      	movs	r5, #0

0041c5a2 <.LBE2>:
	return pvReturn;
  41c5a2:	e7f1      	b.n	41c588 <.LVL7>
  41c5a4:	20417874 	.word	0x20417874
  41c5a8:	20417878 	.word	0x20417878
  41c5ac:	2040c85c 	.word	0x2040c85c

Disassembly of section .text.PendSV_Handler%261:

0041c5b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
  41c5b0:	f3ef 8009 	mrs	r0, PSP
  41c5b4:	f3bf 8f6f 	isb	sy
  41c5b8:	4b15      	ldr	r3, [pc, #84]	; (41c610 <pxCurrentTCBConst>)
  41c5ba:	681a      	ldr	r2, [r3, #0]
  41c5bc:	f01e 0f10 	tst.w	lr, #16
  41c5c0:	bf08      	it	eq
  41c5c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  41c5c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41c5ca:	6010      	str	r0, [r2, #0]
  41c5cc:	e92d 0009 	stmdb	sp!, {r0, r3}
  41c5d0:	f04f 0020 	mov.w	r0, #32
  41c5d4:	b672      	cpsid	i
  41c5d6:	f380 8811 	msr	BASEPRI, r0
  41c5da:	f3bf 8f4f 	dsb	sy
  41c5de:	f3bf 8f6f 	isb	sy
  41c5e2:	b662      	cpsie	i
  41c5e4:	f7fc fe92 	bl	41930c <.LFE7>
  41c5e8:	f04f 0000 	mov.w	r0, #0
  41c5ec:	f380 8811 	msr	BASEPRI, r0
  41c5f0:	bc09      	pop	{r0, r3}
  41c5f2:	6819      	ldr	r1, [r3, #0]
  41c5f4:	6808      	ldr	r0, [r1, #0]
  41c5f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41c5fa:	f01e 0f10 	tst.w	lr, #16
  41c5fe:	bf08      	it	eq
  41c600:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  41c604:	f380 8809 	msr	PSP, r0
  41c608:	f3bf 8f6f 	isb	sy
  41c60c:	4770      	bx	lr
  41c60e:	bf00      	nop

0041c610 <pxCurrentTCBConst>:
  41c610:	20417838 	.word	0x20417838

Disassembly of section .text.wc_RsaCleanup%262:

0041c614 <wc_RsaCleanup>:
    if (key && key->data) {
  41c614:	b378      	cbz	r0, 41c676 <.LCFI1>
{
  41c616:	b510      	push	{r4, lr}

0041c618 <.LCFI0>:
  41c618:	4604      	mov	r4, r0
    if (key && key->data) {
  41c61a:	f241 1344 	movw	r3, #4420	; 0x1144
  41c61e:	58c0      	ldr	r0, [r0, r3]

0041c620 <.LVL1>:
  41c620:	b1b0      	cbz	r0, 41c650 <.LBE10+0x16>
        if (key->dataIsAlloc) {
  41c622:	f241 1354 	movw	r3, #4436	; 0x1154
  41c626:	5ce3      	ldrb	r3, [r4, r3]
  41c628:	b15b      	cbz	r3, 41c642 <.LBE10+0x8>
            if (key->type == RSA_PRIVATE_DECRYPT ||
  41c62a:	f241 1348 	movw	r3, #4424	; 0x1148
  41c62e:	58e3      	ldr	r3, [r4, r3]
  41c630:	3b02      	subs	r3, #2
  41c632:	2b01      	cmp	r3, #1
  41c634:	d90d      	bls.n	41c652 <.LBE10+0x18>

0041c636 <.LBB10>:
            XFREE(key->data, key->heap, DYNAMIC_TYPE_WOLF_BIGINT);
  41c636:	f002 f9d1 	bl	41e9dc <.LFE2>

0041c63a <.LBE10>:
            key->dataIsAlloc = 0;
  41c63a:	2200      	movs	r2, #0
  41c63c:	f241 1354 	movw	r3, #4436	; 0x1154
  41c640:	54e2      	strb	r2, [r4, r3]
        key->data = NULL;
  41c642:	2300      	movs	r3, #0
  41c644:	f241 1244 	movw	r2, #4420	; 0x1144
  41c648:	50a3      	str	r3, [r4, r2]
        key->dataLen = 0;
  41c64a:	f241 1250 	movw	r2, #4432	; 0x1150
  41c64e:	50a3      	str	r3, [r4, r2]
  41c650:	bd10      	pop	{r4, pc}
                ForceZero(key->data, key->dataLen);
  41c652:	f241 1350 	movw	r3, #4432	; 0x1150
  41c656:	58e2      	ldr	r2, [r4, r3]

0041c658 <.LBB11>:
    while (len--) *z++ = 0;
  41c658:	2a00      	cmp	r2, #0
  41c65a:	d0ec      	beq.n	41c636 <.LBB10>
  41c65c:	4402      	add	r2, r0

0041c65e <.LVL6>:
  41c65e:	2100      	movs	r1, #0

0041c660 <.LVL7>:
  41c660:	1c43      	adds	r3, r0, #1

0041c662 <.LVL8>:
  41c662:	7001      	strb	r1, [r0, #0]
  41c664:	4618      	mov	r0, r3
  41c666:	429a      	cmp	r2, r3
  41c668:	d1fa      	bne.n	41c660 <.LVL7>

0041c66a <.LBB13>:
            XFREE(key->data, key->heap, DYNAMIC_TYPE_WOLF_BIGINT);
  41c66a:	f241 1344 	movw	r3, #4420	; 0x1144

0041c66e <.LVL9>:
  41c66e:	58e0      	ldr	r0, [r4, r3]

0041c670 <.LVL10>:
  41c670:	2800      	cmp	r0, #0
  41c672:	d0e2      	beq.n	41c63a <.LBE10>
  41c674:	e7df      	b.n	41c636 <.LBB10>

0041c676 <.LCFI1>:
  41c676:	4770      	bx	lr

Disassembly of section .text.fp_mul_2%263:

0041c678 <fp_mul_2>:
{
  41c678:	b5f0      	push	{r4, r5, r6, r7, lr}

0041c67a <.LCFI5>:
  oldused = b->used;
  41c67a:	f8d1 c000 	ldr.w	ip, [r1]
  b->used = a->used;
  41c67e:	6803      	ldr	r3, [r0, #0]
  41c680:	460d      	mov	r5, r1
  41c682:	f845 3b08 	str.w	r3, [r5], #8

0041c686 <.LBB4>:
    for (x = 0; x < a->used; x++) {
  41c686:	6803      	ldr	r3, [r0, #0]
  41c688:	2b00      	cmp	r3, #0
  41c68a:	dd19      	ble.n	41c6c0 <.LVL54>
  41c68c:	f100 0e04 	add.w	lr, r0, #4
  41c690:	462e      	mov	r6, r5
  41c692:	2300      	movs	r3, #0
  41c694:	461a      	mov	r2, r3

0041c696 <.LVL49>:
      rr = *tmpa >> ((fp_digit)(DIGIT_BIT - 1));
  41c696:	f85e 4f04 	ldr.w	r4, [lr, #4]!
  41c69a:	0fe7      	lsrs	r7, r4, #31

0041c69c <.LVL50>:
      *tmpb++ = ((*tmpa++ << ((fp_digit)1)) | r);
  41c69c:	ea43 0344 	orr.w	r3, r3, r4, lsl #1

0041c6a0 <.LVL51>:
  41c6a0:	f846 3b04 	str.w	r3, [r6], #4

0041c6a4 <.LVL52>:
    for (x = 0; x < a->used; x++) {
  41c6a4:	3201      	adds	r2, #1

0041c6a6 <.LVL53>:
      rr = *tmpa >> ((fp_digit)(DIGIT_BIT - 1));
  41c6a6:	463b      	mov	r3, r7
    for (x = 0; x < a->used; x++) {
  41c6a8:	6804      	ldr	r4, [r0, #0]
  41c6aa:	4294      	cmp	r4, r2
  41c6ac:	dcf3      	bgt.n	41c696 <.LVL49>
    if (r != 0 && b->used != (FP_SIZE-1)) {
  41c6ae:	b13f      	cbz	r7, 41c6c0 <.LVL54>
  41c6b0:	680b      	ldr	r3, [r1, #0]
  41c6b2:	2b87      	cmp	r3, #135	; 0x87
  41c6b4:	d004      	beq.n	41c6c0 <.LVL54>
      *tmpb = 1;
  41c6b6:	2301      	movs	r3, #1
  41c6b8:	6033      	str	r3, [r6, #0]
      ++(b->used);
  41c6ba:	680b      	ldr	r3, [r1, #0]
  41c6bc:	3301      	adds	r3, #1
  41c6be:	600b      	str	r3, [r1, #0]

0041c6c0 <.LVL54>:
    tmpb = b->dp + b->used;
  41c6c0:	680b      	ldr	r3, [r1, #0]
  41c6c2:	eb05 0283 	add.w	r2, r5, r3, lsl #2

0041c6c6 <.LVL55>:
    for (x = b->used; x < oldused; x++) {
  41c6c6:	459c      	cmp	ip, r3
  41c6c8:	dd05      	ble.n	41c6d6 <.LBE4>
      *tmpb++ = 0;
  41c6ca:	2400      	movs	r4, #0
  41c6cc:	f842 4b04 	str.w	r4, [r2], #4

0041c6d0 <.LVL56>:
    for (x = b->used; x < oldused; x++) {
  41c6d0:	3301      	adds	r3, #1

0041c6d2 <.LVL57>:
  41c6d2:	459c      	cmp	ip, r3
  41c6d4:	d1fa      	bne.n	41c6cc <.LVL55+0x6>

0041c6d6 <.LBE4>:
  b->sign = a->sign;
  41c6d6:	6843      	ldr	r3, [r0, #4]

0041c6d8 <.LVL58>:
  41c6d8:	604b      	str	r3, [r1, #4]
  41c6da:	bdf0      	pop	{r4, r5, r6, r7, pc}

Disassembly of section .rodata%264:

0041c6dc <.rodata%264>:
  41c6dc:	33323130 	.word	0x33323130
  41c6e0:	37363534 	.word	0x37363534
  41c6e4:	42413938 	.word	0x42413938
  41c6e8:	46454443 	.word	0x46454443
  41c6ec:	4a494847 	.word	0x4a494847
  41c6f0:	4e4d4c4b 	.word	0x4e4d4c4b
  41c6f4:	5251504f 	.word	0x5251504f
  41c6f8:	56555453 	.word	0x56555453
  41c6fc:	5a595857 	.word	0x5a595857
  41c700:	20202020 	.word	0x20202020
  41c704:	20202020 	.word	0x20202020
  41c708:	20202020 	.word	0x20202020
  41c70c:	20202020 	.word	0x20202020
  41c710:	20202020 	.word	0x20202020
  41c714:	20202020 	.word	0x20202020
  41c718:	20202020 	.word	0x20202020
  41c71c:	20202020 	.word	0x20202020
  41c720:	64636261 	.word	0x64636261
  41c724:	68676665 	.word	0x68676665
  41c728:	6c6b6a69 	.word	0x6c6b6a69
  41c72c:	706f6e6d 	.word	0x706f6e6d
  41c730:	74737271 	.word	0x74737271
  41c734:	78777675 	.word	0x78777675
  41c738:	2f2b7a79 	.word	0x2f2b7a79
  41c73c:	00          	.byte	0x00
  41c73d:	00          	.byte	0x00
  41c73e:	bf00      	nop

Disassembly of section .text.strncpy%265:

0041c740 <strncpy>:
  41c740:	ea40 0301 	orr.w	r3, r0, r1
  41c744:	f013 0f03 	tst.w	r3, #3
  41c748:	b470      	push	{r4, r5, r6}

0041c74a <.LCFI0>:
  41c74a:	4603      	mov	r3, r0
  41c74c:	d024      	beq.n	41c798 <.LVL16>

0041c74e <.LVL1>:
  41c74e:	b1a2      	cbz	r2, 41c77a <.LVL11+0xa>
  41c750:	780c      	ldrb	r4, [r1, #0]
  41c752:	701c      	strb	r4, [r3, #0]
  41c754:	3a01      	subs	r2, #1

0041c756 <.LVL3>:
  41c756:	3301      	adds	r3, #1
  41c758:	3101      	adds	r1, #1
  41c75a:	b13c      	cbz	r4, 41c76c <.LVL10>

0041c75c <.LVL6>:
  41c75c:	b16a      	cbz	r2, 41c77a <.LVL11+0xa>
  41c75e:	f811 4b01 	ldrb.w	r4, [r1], #1

0041c762 <.LVL7>:
  41c762:	f803 4b01 	strb.w	r4, [r3], #1

0041c766 <.LVL8>:
  41c766:	3a01      	subs	r2, #1

0041c768 <.LVL9>:
  41c768:	2c00      	cmp	r4, #0
  41c76a:	d1f7      	bne.n	41c75c <.LVL6>

0041c76c <.LVL10>:
  41c76c:	b12a      	cbz	r2, 41c77a <.LVL11+0xa>
  41c76e:	441a      	add	r2, r3

0041c770 <.LVL11>:
  41c770:	2100      	movs	r1, #0
  41c772:	f803 1b01 	strb.w	r1, [r3], #1
  41c776:	429a      	cmp	r2, r3
  41c778:	d1fb      	bne.n	41c772 <.LVL11+0x2>
  41c77a:	bc70      	pop	{r4, r5, r6}

0041c77c <.LCFI1>:
  41c77c:	4770      	bx	lr

0041c77e <.LCFI2>:
  41c77e:	460e      	mov	r6, r1

0041c780 <.LVL14>:
  41c780:	f851 5b04 	ldr.w	r5, [r1], #4
  41c784:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
  41c788:	ea24 0405 	bic.w	r4, r4, r5
  41c78c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  41c790:	d105      	bne.n	41c79e <.LVL17>
  41c792:	f843 5b04 	str.w	r5, [r3], #4

0041c796 <.LVL15>:
  41c796:	3a04      	subs	r2, #4

0041c798 <.LVL16>:
  41c798:	2a03      	cmp	r2, #3
  41c79a:	d8f0      	bhi.n	41c77e <.LCFI2>
  41c79c:	e7d7      	b.n	41c74e <.LVL1>

0041c79e <.LVL17>:
  41c79e:	4631      	mov	r1, r6
  41c7a0:	e7d6      	b.n	41c750 <.LVL1+0x2>

0041c7a2 <.LFE0>:
  41c7a2:	bf00      	nop

Disassembly of section .text.fp_exptmod%266:

0041c7a4 <fp_exptmod>:
{
  41c7a4:	b570      	push	{r4, r5, r6, lr}

0041c7a6 <.LCFI116>:
  41c7a6:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228

0041c7aa <.LCFI117>:
   if (P->used > (FP_SIZE/2)) {
  41c7aa:	6815      	ldr	r5, [r2, #0]
  41c7ac:	2d44      	cmp	r5, #68	; 0x44
  41c7ae:	dc27      	bgt.n	41c800 <.LBE182>
  41c7b0:	461e      	mov	r6, r3
  41c7b2:	4615      	mov	r5, r2
  41c7b4:	460c      	mov	r4, r1
   if (X->sign == FP_NEG) {
  41c7b6:	684b      	ldr	r3, [r1, #4]

0041c7b8 <.LVL800>:
  41c7b8:	2b01      	cmp	r3, #1
  41c7ba:	d007      	beq.n	41c7cc <.LBB182>
      return _fp_exptmod(G, X, P, Y);
  41c7bc:	4633      	mov	r3, r6
  41c7be:	f7fa fbeb 	bl	416f98 <.LFE17>

0041c7c2 <.LVL801>:
  41c7c2:	4602      	mov	r2, r0

0041c7c4 <.LVL802>:
}
  41c7c4:	4610      	mov	r0, r2
  41c7c6:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228

0041c7ca <.LCFI118>:
  41c7ca:	bd70      	pop	{r4, r5, r6, pc}

0041c7cc <.LBB182>:
      fp_init_copy(&tmp, G);
  41c7cc:	4601      	mov	r1, r0

0041c7ce <.LVL804>:
  41c7ce:	4668      	mov	r0, sp

0041c7d0 <.LVL805>:
  41c7d0:	f002 f82a 	bl	41e828 <.LFE54>

0041c7d4 <.LVL806>:
      if ((err = fp_invmod(&tmp, P, &tmp)) != FP_OKAY) {
  41c7d4:	466a      	mov	r2, sp
  41c7d6:	4629      	mov	r1, r5
  41c7d8:	4668      	mov	r0, sp
  41c7da:	f7f3 f9d9 	bl	40fb90 <fp_invmod>

0041c7de <.LVL807>:
  41c7de:	4602      	mov	r2, r0
  41c7e0:	2800      	cmp	r0, #0
  41c7e2:	d1ef      	bne.n	41c7c4 <.LVL802>
      X->sign = FP_ZPOS;
  41c7e4:	2300      	movs	r3, #0
  41c7e6:	6063      	str	r3, [r4, #4]
      err =  _fp_exptmod(&tmp, X, P, Y);
  41c7e8:	4633      	mov	r3, r6
  41c7ea:	462a      	mov	r2, r5
  41c7ec:	4621      	mov	r1, r4
  41c7ee:	4668      	mov	r0, sp

0041c7f0 <.LVL808>:
  41c7f0:	f7fa fbd2 	bl	416f98 <.LFE17>

0041c7f4 <.LVL809>:
  41c7f4:	4602      	mov	r2, r0

0041c7f6 <.LVL810>:
      if (X != Y) {
  41c7f6:	42b4      	cmp	r4, r6
  41c7f8:	d0e4      	beq.n	41c7c4 <.LVL802>
         X->sign = FP_NEG;
  41c7fa:	2301      	movs	r3, #1
  41c7fc:	6063      	str	r3, [r4, #4]
  41c7fe:	e7e1      	b.n	41c7c4 <.LVL802>

0041c800 <.LBE182>:
      return FP_VAL;
  41c800:	f04f 32ff 	mov.w	r2, #4294967295

0041c804 <.LVL812>:
  41c804:	e7de      	b.n	41c7c4 <.LVL802>

Disassembly of section .text.SYS_Initialize%267:

0041c808 <SYS_Initialize>:

  Remarks:
 */

void SYS_Initialize ( void* data )
{
  41c808:	b510      	push	{r4, lr}

0041c80a <.LCFI0>:
    CLK_Initialize();
  41c80a:	f7ff fa53 	bl	41bcb4 <CLK_Initialize>

0041c80e <.LVL1>:
	PIO_Initialize();
  41c80e:	f7fe fa19 	bl	41ac44 <PIO_Initialize>

0041c812 <.LVL2>:


    NVIC_Initialize();
  41c812:	f000 ff0b 	bl	41d62c <NVIC_Initialize>

0041c816 <.LVL3>:
	RSWDT_REGS->RSWDT_MR = RSWDT_MR_WDDIS_Msk;	// Disable RSWDT 
  41c816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  41c81a:	4a0e      	ldr	r2, [pc, #56]	; (41c854 <.LVL10+0x2>)
  41c81c:	6053      	str	r3, [r2, #4]

	WDT_REGS->WDT_MR = WDT_MR_WDDIS_Msk; 		// Disable WDT 
  41c81e:	3ab0      	subs	r2, #176	; 0xb0
  41c820:	6053      	str	r3, [r2, #4]

	BSP_Initialize();
  41c822:	f002 f80f 	bl	41e844 <BSP_Initialize>

0041c826 <.LVL4>:
 
    TC0_CH0_TimerInitialize(); 
  41c826:	f001 fd81 	bl	41e32c <TC0_CH0_TimerInitialize>

0041c82a <.LVL5>:
     
    
	USART1_Initialize();
  41c82a:	f001 f8f3 	bl	41da14 <.LFE177>

0041c82e <.LVL6>:



    sysObj.sysConsole0 = SYS_CONSOLE_Initialize(SYS_CONSOLE_INDEX_0, (SYS_MODULE_INIT *)&consUsartInit0);
  41c82e:	490a      	ldr	r1, [pc, #40]	; (41c858 <.LVL10+0x6>)
  41c830:	2000      	movs	r0, #0
  41c832:	f000 fd9f 	bl	41d374 <.LFE205>

0041c836 <.LVL7>:
  41c836:	4c09      	ldr	r4, [pc, #36]	; (41c85c <.LVL10+0xa>)
  41c838:	6020      	str	r0, [r4, #0]
    sysObj.sysDebug = SYS_DEBUG_Initialize(SYS_DEBUG_INDEX_0, (SYS_MODULE_INIT*)&debugInit);
  41c83a:	4909      	ldr	r1, [pc, #36]	; (41c860 <.LVL10+0xe>)
  41c83c:	2000      	movs	r0, #0
  41c83e:	f001 fea7 	bl	41e590 <.LFE159>

0041c842 <.LVL8>:
  41c842:	6060      	str	r0, [r4, #4]

    sysObj.sysTime = SYS_TIME_Initialize(SYS_TIME_INDEX_0, (SYS_MODULE_INIT *)&sysTimeInitData);
  41c844:	4907      	ldr	r1, [pc, #28]	; (41c864 <.LVL10+0x12>)
  41c846:	2000      	movs	r0, #0
  41c848:	f7fd f960 	bl	419b0c <.LFE154>

0041c84c <.LVL9>:
  41c84c:	60a0      	str	r0, [r4, #8]


    APP_Initialize();
  41c84e:	f002 fa8d 	bl	41ed6c <APP_Initialize>

0041c852 <.LVL10>:
  41c852:	bd10      	pop	{r4, pc}
  41c854:	400e1900 	.word	0x400e1900
  41c858:	20417828 	.word	0x20417828
  41c85c:	20400000 	.word	0x20400000
  41c860:	20416854 	.word	0x20416854
  41c864:	20417830 	.word	0x20417830

Disassembly of section .text.GetASNInt%268:

0041c868 <GetASNInt>:
{
  41c868:	b570      	push	{r4, r5, r6, lr}

0041c86a <.LCFI17>:
  41c86a:	b082      	sub	sp, #8

0041c86c <.LCFI18>:
  41c86c:	4606      	mov	r6, r0
  41c86e:	460d      	mov	r5, r1
  41c870:	4614      	mov	r4, r2
    ret = GetASNHeader(input, ASN_INTEGER, inOutIdx, len, maxIdx);
  41c872:	9300      	str	r3, [sp, #0]
  41c874:	4613      	mov	r3, r2

0041c876 <.LVL129>:
  41c876:	460a      	mov	r2, r1

0041c878 <.LVL130>:
  41c878:	2102      	movs	r1, #2

0041c87a <.LVL131>:
  41c87a:	f000 fde7 	bl	41d44c <.LFE149>

0041c87e <.LVL132>:
    if (ret < 0)
  41c87e:	2800      	cmp	r0, #0
  41c880:	db1c      	blt.n	41c8bc <.LVL135+0x2>
    if (*len > 0) {
  41c882:	6822      	ldr	r2, [r4, #0]
  41c884:	2a00      	cmp	r2, #0
  41c886:	dd1b      	ble.n	41c8c0 <.LCFI20>
        if ((input[*inOutIdx] == 0x00) && (*len > 1)) {
  41c888:	6829      	ldr	r1, [r5, #0]
  41c88a:	5c73      	ldrb	r3, [r6, r1]
  41c88c:	2a01      	cmp	r2, #1
  41c88e:	dd0f      	ble.n	41c8b0 <.LVL134>
  41c890:	b973      	cbnz	r3, 41c8b0 <.LVL134>
            (*inOutIdx)++;
  41c892:	3101      	adds	r1, #1
  41c894:	6029      	str	r1, [r5, #0]
            (*len)--;
  41c896:	6823      	ldr	r3, [r4, #0]
  41c898:	3b01      	subs	r3, #1
  41c89a:	6023      	str	r3, [r4, #0]
            if (*len > 0 && (input[*inOutIdx] & 0x80) == 0)
  41c89c:	2b00      	cmp	r3, #0
  41c89e:	dd11      	ble.n	41c8c4 <.LVL138>
  41c8a0:	682b      	ldr	r3, [r5, #0]
  41c8a2:	56f3      	ldrsb	r3, [r6, r3]
    return 0;
  41c8a4:	2b00      	cmp	r3, #0
  41c8a6:	bfac      	ite	ge
  41c8a8:	f06f 008b 	mvnge.w	r0, #139	; 0x8b

0041c8ac <.LVL133>:
  41c8ac:	2000      	movlt	r0, #0
  41c8ae:	e005      	b.n	41c8bc <.LVL135+0x2>

0041c8b0 <.LVL134>:
        else if ((input[*inOutIdx] & 0x80) == 0x80)
  41c8b0:	b25b      	sxtb	r3, r3
    return 0;
  41c8b2:	2b00      	cmp	r3, #0
  41c8b4:	bfb4      	ite	lt
  41c8b6:	f06f 008b 	mvnlt.w	r0, #139	; 0x8b

0041c8ba <.LVL135>:
  41c8ba:	2000      	movge	r0, #0
}
  41c8bc:	b002      	add	sp, #8

0041c8be <.LCFI19>:
  41c8be:	bd70      	pop	{r4, r5, r6, pc}

0041c8c0 <.LCFI20>:
    return 0;
  41c8c0:	2000      	movs	r0, #0

0041c8c2 <.LVL137>:
  41c8c2:	e7fb      	b.n	41c8bc <.LVL135+0x2>

0041c8c4 <.LVL138>:
  41c8c4:	2000      	movs	r0, #0

0041c8c6 <.LVL139>:
  41c8c6:	e7f9      	b.n	41c8bc <.LVL135+0x2>

Disassembly of section .text.wc_ecc_export_private_only%269:

0041c8c8 <wc_ecc_export_private_only>:
   return MP_OKAY on success */
int wc_ecc_export_private_only(ecc_key* key, byte* out, word32* outLen)
{
    word32 numlen;

    if (key == NULL || out == NULL || outLen == NULL) {
  41c8c8:	2a00      	cmp	r2, #0
  41c8ca:	bf18      	it	ne
  41c8cc:	2900      	cmpne	r1, #0
  41c8ce:	d028      	beq.n	41c922 <.LCFI124>
{
  41c8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041c8d2 <.LCFI123>:
  41c8d2:	460f      	mov	r7, r1
  41c8d4:	4616      	mov	r6, r2
    if (key == NULL || out == NULL || outLen == NULL) {
  41c8d6:	b1f0      	cbz	r0, 41c916 <.LVL1447>
  41c8d8:	4604      	mov	r4, r0
        return BAD_FUNC_ARG;
    }

    if (wc_ecc_is_valid_idx(key->idx) == 0) {
  41c8da:	6840      	ldr	r0, [r0, #4]

0041c8dc <.LVL1439>:
  41c8dc:	f001 fdbe 	bl	41e45c <.LBE24>

0041c8e0 <.LVL1440>:
  41c8e0:	b1e0      	cbz	r0, 41c91c <.LVL1449>
        return ECC_BAD_ARG_E;
    }
    numlen = key->dp->size;
  41c8e2:	6923      	ldr	r3, [r4, #16]
  41c8e4:	681d      	ldr	r5, [r3, #0]

0041c8e6 <.LVL1441>:

    if (*outLen < numlen) {
  41c8e6:	6833      	ldr	r3, [r6, #0]
  41c8e8:	429d      	cmp	r5, r3
  41c8ea:	d810      	bhi.n	41c90e <.LVL1446>
        *outLen = numlen;
        return BUFFER_E;
    }
    *outLen = numlen;
  41c8ec:	6035      	str	r5, [r6, #0]
    XMEMSET(out, 0, *outLen);
  41c8ee:	462a      	mov	r2, r5
  41c8f0:	2100      	movs	r1, #0
  41c8f2:	4638      	mov	r0, r7
  41c8f4:	f7fd fe7c 	bl	41a5f0 <.LFE157>

0041c8f8 <.LVL1442>:
   /* TODO: Implement equiv call to ATECC508A */
   return BAD_COND_E;

#else

    return mp_to_unsigned_bin(&key->k, out + (numlen -
  41c8f8:	f504 64d2 	add.w	r4, r4, #1680	; 0x690

0041c8fc <.LVL1443>:
                                           mp_unsigned_bin_size(&key->k)));
  41c8fc:	4620      	mov	r0, r4
  41c8fe:	f002 fb17 	bl	41ef30 <.LFE82>

0041c902 <.LVL1444>:
    return mp_to_unsigned_bin(&key->k, out + (numlen -
  41c902:	1a28      	subs	r0, r5, r0
  41c904:	1839      	adds	r1, r7, r0
  41c906:	4620      	mov	r0, r4
  41c908:	f002 faa8 	bl	41ee5c <.LFE73>

0041c90c <.LVL1445>:
  41c90c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041c90e <.LVL1446>:
        *outLen = numlen;
  41c90e:	6035      	str	r5, [r6, #0]
        return BUFFER_E;
  41c910:	f06f 0083 	mvn.w	r0, #131	; 0x83
  41c914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041c916 <.LVL1447>:
        return BAD_FUNC_ARG;
  41c916:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041c91a <.LVL1448>:
  41c91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041c91c <.LVL1449>:
        return ECC_BAD_ARG_E;
  41c91c:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
#endif /* WOLFSSL_ATECC508A */
}
  41c920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041c922 <.LCFI124>:
        return BAD_FUNC_ARG;
  41c922:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041c926 <.LVL1451>:
}
  41c926:	4770      	bx	lr

Disassembly of section .text.bi_flush%270:

0041c928 <bi_flush>:
{
  41c928:	b410      	push	{r4}

0041c92a <.LCFI14>:
    if (s->bi_valid == 16) {
  41c92a:	f241 63bc 	movw	r3, #5820	; 0x16bc
  41c92e:	58c3      	ldr	r3, [r0, r3]
  41c930:	2b10      	cmp	r3, #16
  41c932:	d014      	beq.n	41c95e <.LCFI16>
    } else if (s->bi_valid >= 8) {
  41c934:	2b07      	cmp	r3, #7
  41c936:	dd0f      	ble.n	41c958 <.LCFI14+0x2e>
        put_byte(s, (Byte)s->bi_buf);
  41c938:	6881      	ldr	r1, [r0, #8]
  41c93a:	6942      	ldr	r2, [r0, #20]
  41c93c:	1c53      	adds	r3, r2, #1
  41c93e:	6143      	str	r3, [r0, #20]
  41c940:	f241 63b8 	movw	r3, #5816	; 0x16b8
  41c944:	5ac4      	ldrh	r4, [r0, r3]
  41c946:	548c      	strb	r4, [r1, r2]
        s->bi_buf >>= 8;
  41c948:	5ac2      	ldrh	r2, [r0, r3]
  41c94a:	0a12      	lsrs	r2, r2, #8
  41c94c:	52c2      	strh	r2, [r0, r3]
        s->bi_valid -= 8;
  41c94e:	f241 62bc 	movw	r2, #5820	; 0x16bc
  41c952:	5883      	ldr	r3, [r0, r2]
  41c954:	3b08      	subs	r3, #8
  41c956:	5083      	str	r3, [r0, r2]
}
  41c958:	f85d 4b04 	ldr.w	r4, [sp], #4

0041c95c <.LCFI15>:
  41c95c:	4770      	bx	lr

0041c95e <.LCFI16>:
        put_short(s, s->bi_buf);
  41c95e:	6881      	ldr	r1, [r0, #8]
  41c960:	6942      	ldr	r2, [r0, #20]
  41c962:	1c53      	adds	r3, r2, #1
  41c964:	6143      	str	r3, [r0, #20]
  41c966:	f241 63b8 	movw	r3, #5816	; 0x16b8
  41c96a:	5ac4      	ldrh	r4, [r0, r3]
  41c96c:	548c      	strb	r4, [r1, r2]
  41c96e:	6884      	ldr	r4, [r0, #8]
  41c970:	6941      	ldr	r1, [r0, #20]
  41c972:	1c4a      	adds	r2, r1, #1
  41c974:	6142      	str	r2, [r0, #20]
  41c976:	5ac2      	ldrh	r2, [r0, r3]
  41c978:	0a12      	lsrs	r2, r2, #8
  41c97a:	5462      	strb	r2, [r4, r1]
        s->bi_buf = 0;
  41c97c:	2200      	movs	r2, #0
  41c97e:	52c2      	strh	r2, [r0, r3]
        s->bi_valid = 0;
  41c980:	f241 63bc 	movw	r3, #5820	; 0x16bc
  41c984:	50c2      	str	r2, [r0, r3]
  41c986:	e7e7      	b.n	41c958 <.LCFI14+0x2e>

Disassembly of section .text.wc_InitSha%271:

0041c988 <wc_InitSha>:
{
  41c988:	b430      	push	{r4, r5}

0041c98a <.LCFI2>:
  41c98a:	4603      	mov	r3, r0
    if ((PMC_REGS->PMC_PCSR1 & PmcBit) != PmcBit)
  41c98c:	4a12      	ldr	r2, [pc, #72]	; (41c9d8 <.LCFI3+0x4>)
  41c98e:	f8d2 2108 	ldr.w	r2, [r2, #264]	; 0x108
  41c992:	f012 0f01 	tst.w	r2, #1
  41c996:	d103      	bne.n	41c9a0 <.LCFI2+0x16>
        PMC_REGS->PMC_PCER1 = PmcBit;
  41c998:	2101      	movs	r1, #1
  41c99a:	4a0f      	ldr	r2, [pc, #60]	; (41c9d8 <.LCFI3+0x4>)
  41c99c:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    sha->icm_descriptor.cfg.reg = 0x0;
  41c9a0:	2000      	movs	r0, #0

0041c9a2 <.LVL20>:
  41c9a2:	6058      	str	r0, [r3, #4]
    sha->icm_descriptor.cfg.bit.is_end_mon = 1;
  41c9a4:	2204      	movs	r2, #4
  41c9a6:	711a      	strb	r2, [r3, #4]
    sha->digest[0] = 0x01234567;
  41c9a8:	4a0c      	ldr	r2, [pc, #48]	; (41c9dc <.LCFI3+0x8>)
  41c9aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    sha->digest[1] = 0x89ABCDEF;
  41c9ae:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
  41c9b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    sha->digest[2] = 0xFEDCBA98;
  41c9b6:	4a0a      	ldr	r2, [pc, #40]	; (41c9e0 <.LCFI3+0xc>)
  41c9b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    sha->digest[3] = 0x76543210;
  41c9bc:	f1a2 3288 	sub.w	r2, r2, #2290649224	; 0x88888888
  41c9c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    sha->digest[4] = 0xF0E1D2C3;
  41c9c4:	4a07      	ldr	r2, [pc, #28]	; (41c9e4 <.LCFI3+0x10>)
  41c9c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    sha->total_len = 0;
  41c9ca:	2400      	movs	r4, #0
  41c9cc:	2500      	movs	r5, #0
  41c9ce:	e9c3 4526 	strd	r4, r5, [r3, #152]	; 0x98
}
  41c9d2:	bc30      	pop	{r4, r5}

0041c9d4 <.LCFI3>:
  41c9d4:	4770      	bx	lr
  41c9d6:	bf00      	nop
  41c9d8:	400e0600 	.word	0x400e0600
  41c9dc:	01234567 	.word	0x01234567
  41c9e0:	fedcba98 	.word	0xfedcba98
  41c9e4:	f0e1d2c3 	.word	0xf0e1d2c3

Disassembly of section .text._calloc_r%272:

0041c9e8 <_calloc_r>:
  41c9e8:	b510      	push	{r4, lr}

0041c9ea <.LCFI0>:
  41c9ea:	fb02 f101 	mul.w	r1, r2, r1

0041c9ee <.LVL1>:
  41c9ee:	f7f1 fab3 	bl	40df58 <.LFE174>

0041c9f2 <.LVL2>:
  41c9f2:	4604      	mov	r4, r0
  41c9f4:	b1d8      	cbz	r0, 41ca2e <.LBE2>

0041c9f6 <.LVL3>:
  41c9f6:	f850 2c04 	ldr.w	r2, [r0, #-4]
  41c9fa:	f022 0203 	bic.w	r2, r2, #3

0041c9fe <.LBB2>:
  41c9fe:	3a04      	subs	r2, #4

0041ca00 <.LVL5>:
  41ca00:	2a24      	cmp	r2, #36	; 0x24
  41ca02:	d818      	bhi.n	41ca36 <.LBE4>

0041ca04 <.LBB3>:
  41ca04:	2a13      	cmp	r2, #19
  41ca06:	d914      	bls.n	41ca32 <.LBB4>

0041ca08 <.LVL7>:
  41ca08:	2300      	movs	r3, #0
  41ca0a:	2a1b      	cmp	r2, #27
  41ca0c:	6003      	str	r3, [r0, #0]

0041ca0e <.LVL8>:
  41ca0e:	6043      	str	r3, [r0, #4]
  41ca10:	d916      	bls.n	41ca40 <.LBB5>

0041ca12 <.LVL9>:
  41ca12:	2a24      	cmp	r2, #36	; 0x24
  41ca14:	6083      	str	r3, [r0, #8]

0041ca16 <.LVL10>:
  41ca16:	60c3      	str	r3, [r0, #12]
  41ca18:	bf11      	iteee	ne
  41ca1a:	f100 0210 	addne.w	r2, r0, #16

0041ca1e <.LVL11>:
  41ca1e:	6103      	streq	r3, [r0, #16]
  41ca20:	6143      	streq	r3, [r0, #20]
  41ca22:	f100 0218 	addeq.w	r2, r0, #24

0041ca26 <.LVL12>:
  41ca26:	2300      	movs	r3, #0
  41ca28:	6013      	str	r3, [r2, #0]

0041ca2a <.LVL13>:
  41ca2a:	6053      	str	r3, [r2, #4]
  41ca2c:	6093      	str	r3, [r2, #8]

0041ca2e <.LBE2>:
  41ca2e:	4620      	mov	r0, r4

0041ca30 <.LVL15>:
  41ca30:	bd10      	pop	{r4, pc}

0041ca32 <.LBB4>:
  41ca32:	4602      	mov	r2, r0

0041ca34 <.LVL17>:
  41ca34:	e7f7      	b.n	41ca26 <.LVL12>

0041ca36 <.LBE4>:
  41ca36:	2100      	movs	r1, #0
  41ca38:	f7fd fdda 	bl	41a5f0 <.LFE157>

0041ca3c <.LBE6>:
  41ca3c:	4620      	mov	r0, r4
  41ca3e:	bd10      	pop	{r4, pc}

0041ca40 <.LBB5>:
  41ca40:	f100 0208 	add.w	r2, r0, #8

0041ca44 <.LVL21>:
  41ca44:	e7ef      	b.n	41ca26 <.LVL12>

0041ca46 <.LBE5>:
  41ca46:	bf00      	nop

Disassembly of section .text.memcmp%273:

0041ca48 <memcmp>:
  41ca48:	2a03      	cmp	r2, #3
  41ca4a:	b470      	push	{r4, r5, r6}

0041ca4c <.LCFI0>:
  41ca4c:	d922      	bls.n	41ca94 <.LVL11>
  41ca4e:	ea40 0301 	orr.w	r3, r0, r1
  41ca52:	079b      	lsls	r3, r3, #30
  41ca54:	d011      	beq.n	41ca7a <.LCFI2>

0041ca56 <.LVL1>:
  41ca56:	7803      	ldrb	r3, [r0, #0]
  41ca58:	780c      	ldrb	r4, [r1, #0]
  41ca5a:	42a3      	cmp	r3, r4
  41ca5c:	d11d      	bne.n	41ca9a <.LVL11+0x6>
  41ca5e:	440a      	add	r2, r1
  41ca60:	3101      	adds	r1, #1
  41ca62:	e005      	b.n	41ca70 <.LVL4>

0041ca64 <.LVL2>:
  41ca64:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  41ca68:	f811 4b01 	ldrb.w	r4, [r1], #1

0041ca6c <.LVL3>:
  41ca6c:	42a3      	cmp	r3, r4
  41ca6e:	d114      	bne.n	41ca9a <.LVL11+0x6>

0041ca70 <.LVL4>:
  41ca70:	4291      	cmp	r1, r2
  41ca72:	d1f7      	bne.n	41ca64 <.LVL2>

0041ca74 <.LVL5>:
  41ca74:	2000      	movs	r0, #0
  41ca76:	bc70      	pop	{r4, r5, r6}

0041ca78 <.LCFI1>:
  41ca78:	4770      	bx	lr

0041ca7a <.LCFI2>:
  41ca7a:	680d      	ldr	r5, [r1, #0]
  41ca7c:	6806      	ldr	r6, [r0, #0]
  41ca7e:	42ae      	cmp	r6, r5
  41ca80:	460c      	mov	r4, r1
  41ca82:	4603      	mov	r3, r0

0041ca84 <.LVL7>:
  41ca84:	f101 0104 	add.w	r1, r1, #4

0041ca88 <.LVL8>:
  41ca88:	f100 0004 	add.w	r0, r0, #4

0041ca8c <.LVL9>:
  41ca8c:	d108      	bne.n	41caa0 <.LCFI4>
  41ca8e:	3a04      	subs	r2, #4

0041ca90 <.LVL10>:
  41ca90:	2a03      	cmp	r2, #3
  41ca92:	d8f2      	bhi.n	41ca7a <.LCFI2>

0041ca94 <.LVL11>:
  41ca94:	2a00      	cmp	r2, #0
  41ca96:	d1de      	bne.n	41ca56 <.LVL1>
  41ca98:	e7ec      	b.n	41ca74 <.LVL5>
  41ca9a:	1b18      	subs	r0, r3, r4
  41ca9c:	bc70      	pop	{r4, r5, r6}

0041ca9e <.LCFI3>:
  41ca9e:	4770      	bx	lr

0041caa0 <.LCFI4>:
  41caa0:	4621      	mov	r1, r4

0041caa2 <.LVL13>:
  41caa2:	4618      	mov	r0, r3

0041caa4 <.LVL14>:
  41caa4:	e7d7      	b.n	41ca56 <.LVL1>

0041caa6 <.LFE0>:
  41caa6:	bf00      	nop

Disassembly of section .text.__lo0bits%274:

0041caa8 <__lo0bits>:
  41caa8:	6803      	ldr	r3, [r0, #0]

0041caaa <.LVL80>:
  41caaa:	f013 0207 	ands.w	r2, r3, #7
  41caae:	4601      	mov	r1, r0
  41cab0:	d007      	beq.n	41cac2 <.LVL84>
  41cab2:	07da      	lsls	r2, r3, #31
  41cab4:	d421      	bmi.n	41cafa <.LVL100>
  41cab6:	0798      	lsls	r0, r3, #30

0041cab8 <.LVL81>:
  41cab8:	d421      	bmi.n	41cafe <.LVL101+0x2>
  41caba:	089b      	lsrs	r3, r3, #2

0041cabc <.LVL82>:
  41cabc:	600b      	str	r3, [r1, #0]

0041cabe <.LVL83>:
  41cabe:	2002      	movs	r0, #2
  41cac0:	4770      	bx	lr

0041cac2 <.LVL84>:
  41cac2:	b298      	uxth	r0, r3

0041cac4 <.LVL85>:
  41cac4:	b198      	cbz	r0, 41caee <.LVL96>
  41cac6:	4610      	mov	r0, r2

0041cac8 <.LVL86>:
  41cac8:	f013 0fff 	tst.w	r3, #255	; 0xff
  41cacc:	bf04      	itt	eq
  41cace:	0a1b      	lsreq	r3, r3, #8

0041cad0 <.LVL87>:
  41cad0:	3008      	addeq	r0, #8

0041cad2 <.LVL88>:
  41cad2:	071a      	lsls	r2, r3, #28
  41cad4:	bf04      	itt	eq
  41cad6:	091b      	lsreq	r3, r3, #4

0041cad8 <.LVL89>:
  41cad8:	3004      	addeq	r0, #4

0041cada <.LVL90>:
  41cada:	079a      	lsls	r2, r3, #30
  41cadc:	bf04      	itt	eq
  41cade:	089b      	lsreq	r3, r3, #2

0041cae0 <.LVL91>:
  41cae0:	3002      	addeq	r0, #2

0041cae2 <.LVL92>:
  41cae2:	07da      	lsls	r2, r3, #31
  41cae4:	d407      	bmi.n	41caf6 <.LVL99>

0041cae6 <.LVL93>:
  41cae6:	085b      	lsrs	r3, r3, #1

0041cae8 <.LVL94>:
  41cae8:	d104      	bne.n	41caf4 <.LVL98>
  41caea:	2020      	movs	r0, #32

0041caec <.LVL95>:
  41caec:	4770      	bx	lr

0041caee <.LVL96>:
  41caee:	0c1b      	lsrs	r3, r3, #16
  41caf0:	2010      	movs	r0, #16
  41caf2:	e7e9      	b.n	41cac8 <.LVL86>

0041caf4 <.LVL98>:
  41caf4:	3001      	adds	r0, #1

0041caf6 <.LVL99>:
  41caf6:	600b      	str	r3, [r1, #0]
  41caf8:	4770      	bx	lr

0041cafa <.LVL100>:
  41cafa:	2000      	movs	r0, #0

0041cafc <.LVL101>:
  41cafc:	4770      	bx	lr
  41cafe:	085b      	lsrs	r3, r3, #1

0041cb00 <.LVL102>:
  41cb00:	600b      	str	r3, [r1, #0]

0041cb02 <.LVL103>:
  41cb02:	2001      	movs	r0, #1
  41cb04:	4770      	bx	lr

0041cb06 <.LFE22>:
  41cb06:	bf00      	nop

Disassembly of section .text.HmacKeyInnerHash%275:

0041cb08 <HmacKeyInnerHash>:
{
  41cb08:	b510      	push	{r4, lr}

0041cb0a <.LCFI0>:
  41cb0a:	4604      	mov	r4, r0

0041cb0c <.LVL1>:
    switch (hmac->macType) {
  41cb0c:	f890 3244 	ldrb.w	r3, [r0, #580]	; 0x244
  41cb10:	2b05      	cmp	r3, #5
  41cb12:	d826      	bhi.n	41cb62 <.LVL11>
  41cb14:	e8df f003 	tbb	[pc, r3]
  41cb18:	25130d03 	.word	0x25130d03
  41cb1c:	191f      	.short	0x191f
            ret = wc_Md5Update(&hmac->hash.md5, (byte*)hmac->ipad,
  41cb1e:	2240      	movs	r2, #64	; 0x40
  41cb20:	f500 7180 	add.w	r1, r0, #256	; 0x100
  41cb24:	f7fe f916 	bl	41ad54 <.LFE23>

0041cb28 <.LVL2>:
    if (ret == 0)
  41cb28:	b910      	cbnz	r0, 41cb30 <.LVL2+0x8>
        hmac->innerHashKeyed = 1;
  41cb2a:	2301      	movs	r3, #1
  41cb2c:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
}
  41cb30:	bd10      	pop	{r4, pc}

0041cb32 <.LVL3>:
            ret = wc_ShaUpdate(&hmac->hash.sha, (byte*)hmac->ipad,
  41cb32:	2240      	movs	r2, #64	; 0x40
  41cb34:	f500 7180 	add.w	r1, r0, #256	; 0x100
  41cb38:	f7fe fb23 	bl	41b182 <.LFE58>

0041cb3c <.LVL4>:
            break;
  41cb3c:	e7f4      	b.n	41cb28 <.LVL2>

0041cb3e <.LVL5>:
            ret = wc_Sha256Update(&hmac->hash.sha256, (byte*)hmac->ipad,
  41cb3e:	2240      	movs	r2, #64	; 0x40
  41cb40:	f500 7180 	add.w	r1, r0, #256	; 0x100
  41cb44:	f7fe fb5e 	bl	41b204 <.LFE156>

0041cb48 <.LVL6>:
            break;
  41cb48:	e7ee      	b.n	41cb28 <.LVL2>

0041cb4a <.LVL7>:
            ret = wc_Sha384Update(&hmac->hash.sha384, (byte*)hmac->ipad,
  41cb4a:	2280      	movs	r2, #128	; 0x80
  41cb4c:	f500 7180 	add.w	r1, r0, #256	; 0x100
  41cb50:	f7fb fa69 	bl	418026 <.LBE719>

0041cb54 <.LVL8>:
            break;
  41cb54:	e7e8      	b.n	41cb28 <.LVL2>

0041cb56 <.LVL9>:
            ret = wc_Sha512Update(&hmac->hash.sha512, (byte*)hmac->ipad,
  41cb56:	2280      	movs	r2, #128	; 0x80
  41cb58:	f500 7180 	add.w	r1, r0, #256	; 0x100
  41cb5c:	f7fb f9ee 	bl	417f3c <.LFE169>

0041cb60 <.LVL10>:
            break;
  41cb60:	e7e2      	b.n	41cb28 <.LVL2>

0041cb62 <.LVL11>:
    int ret = 0;
  41cb62:	2000      	movs	r0, #0

0041cb64 <.LVL12>:
  41cb64:	e7e0      	b.n	41cb28 <.LVL2>

Disassembly of section .text.inflateReset2%276:

0041cb66 <inflateReset2>:
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  41cb66:	b320      	cbz	r0, 41cbb2 <.LCFI7>
{
  41cb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041cb6a <.LCFI6>:
  41cb6a:	4605      	mov	r5, r0
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  41cb6c:	69c4      	ldr	r4, [r0, #28]
  41cb6e:	b31c      	cbz	r4, 41cbb8 <.LCFI8>

0041cb70 <.LVL50>:
    if (windowBits < 0) {
  41cb70:	2900      	cmp	r1, #0
  41cb72:	db1b      	blt.n	41cbac <.LVL57>
        wrap = (windowBits >> 4) + 1;
  41cb74:	110e      	asrs	r6, r1, #4
  41cb76:	3601      	adds	r6, #1

0041cb78 <.LVL51>:
        if (windowBits < 48)
  41cb78:	292f      	cmp	r1, #47	; 0x2f
            windowBits &= 15;
  41cb7a:	bfd8      	it	le
  41cb7c:	f001 010f 	andle.w	r1, r1, #15

0041cb80 <.LVL52>:
    if (windowBits && (windowBits < 8 || windowBits > 15))
  41cb80:	460f      	mov	r7, r1
  41cb82:	f1a1 0308 	sub.w	r3, r1, #8
  41cb86:	2b07      	cmp	r3, #7
  41cb88:	d900      	bls.n	41cb8c <.LVL52+0xc>
  41cb8a:	b9c1      	cbnz	r1, 41cbbe <.LVL63>
    if (state->window != Z_NULL && state->wbits != (unsigned)windowBits) {
  41cb8c:	6b61      	ldr	r1, [r4, #52]	; 0x34

0041cb8e <.LVL53>:
  41cb8e:	b139      	cbz	r1, 41cba0 <.LVL54+0x6>
  41cb90:	6a63      	ldr	r3, [r4, #36]	; 0x24
  41cb92:	429f      	cmp	r7, r3
  41cb94:	d004      	beq.n	41cba0 <.LVL54+0x6>
        ZFREE(strm, state->window);
  41cb96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  41cb98:	6aa8      	ldr	r0, [r5, #40]	; 0x28

0041cb9a <.LVL54>:
  41cb9a:	4798      	blx	r3
        state->window = Z_NULL;
  41cb9c:	2300      	movs	r3, #0
  41cb9e:	6363      	str	r3, [r4, #52]	; 0x34
    state->wrap = wrap;
  41cba0:	60a6      	str	r6, [r4, #8]
    state->wbits = (unsigned)windowBits;
  41cba2:	6267      	str	r7, [r4, #36]	; 0x24
    return inflateReset(strm);
  41cba4:	4628      	mov	r0, r5
  41cba6:	f001 fcb1 	bl	41e50c <.LFE65>

0041cbaa <.LVL56>:
  41cbaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041cbac <.LVL57>:
        windowBits = -windowBits;
  41cbac:	4249      	negs	r1, r1
        wrap = 0;
  41cbae:	2600      	movs	r6, #0
  41cbb0:	e7e6      	b.n	41cb80 <.LVL52>

0041cbb2 <.LCFI7>:
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  41cbb2:	f06f 0001 	mvn.w	r0, #1

0041cbb6 <.LVL60>:
  41cbb6:	4770      	bx	lr

0041cbb8 <.LCFI8>:
  41cbb8:	f06f 0001 	mvn.w	r0, #1

0041cbbc <.LVL62>:
  41cbbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041cbbe <.LVL63>:
        return Z_STREAM_ERROR;
  41cbbe:	f06f 0001 	mvn.w	r0, #1

0041cbc2 <.LVL64>:
}
  41cbc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

Disassembly of section .text.init_block%277:

0041cbc4 <init_block>:
{
  41cbc4:	b410      	push	{r4}

0041cbc6 <.LCFI0>:
  41cbc6:	4604      	mov	r4, r0
  41cbc8:	f500 618f 	add.w	r1, r0, #1144	; 0x478
  41cbcc:	4603      	mov	r3, r0
    for (n = 0; n < L_CODES;  n++) s->dyn_ltree[n].Freq = 0;
  41cbce:	2200      	movs	r2, #0

0041cbd0 <.LVL2>:
  41cbd0:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
  41cbd4:	3304      	adds	r3, #4
  41cbd6:	428b      	cmp	r3, r1
  41cbd8:	d1fa      	bne.n	41cbd0 <.LVL2>
  41cbda:	f100 0178 	add.w	r1, r0, #120	; 0x78
  41cbde:	4603      	mov	r3, r0
    for (n = 0; n < D_CODES;  n++) s->dyn_dtree[n].Freq = 0;
  41cbe0:	2200      	movs	r2, #0
  41cbe2:	f8a3 2988 	strh.w	r2, [r3, #2440]	; 0x988
  41cbe6:	3304      	adds	r3, #4
  41cbe8:	428b      	cmp	r3, r1
  41cbea:	d1fa      	bne.n	41cbe2 <.LVL2+0x12>
  41cbec:	f100 024c 	add.w	r2, r0, #76	; 0x4c
    for (n = 0; n < BL_CODES; n++) s->bl_tree[n].Freq = 0;
  41cbf0:	2300      	movs	r3, #0
  41cbf2:	f8a4 3a7c 	strh.w	r3, [r4, #2684]	; 0xa7c
  41cbf6:	3404      	adds	r4, #4
  41cbf8:	4294      	cmp	r4, r2
  41cbfa:	d1fa      	bne.n	41cbf2 <.LVL2+0x22>
    s->dyn_ltree[END_BLOCK].Freq = 1;
  41cbfc:	2301      	movs	r3, #1
  41cbfe:	f8a0 3494 	strh.w	r3, [r0, #1172]	; 0x494
    s->opt_len = s->static_len = 0L;
  41cc02:	2300      	movs	r3, #0
  41cc04:	f241 62ac 	movw	r2, #5804	; 0x16ac
  41cc08:	5083      	str	r3, [r0, r2]
  41cc0a:	f241 62a8 	movw	r2, #5800	; 0x16a8
  41cc0e:	5083      	str	r3, [r0, r2]
    s->last_lit = s->matches = 0;
  41cc10:	f241 62b0 	movw	r2, #5808	; 0x16b0
  41cc14:	5083      	str	r3, [r0, r2]
  41cc16:	f500 50b5 	add.w	r0, r0, #5792	; 0x16a0

0041cc1a <.LVL3>:
  41cc1a:	6003      	str	r3, [r0, #0]
}
  41cc1c:	f85d 4b04 	ldr.w	r4, [sp], #4

0041cc20 <.LCFI1>:
  41cc20:	4770      	bx	lr

Disassembly of section .text.wc_RsaFunction%278:

0041cc22 <wc_RsaFunction>:
{
  41cc22:	b570      	push	{r4, r5, r6, lr}

0041cc24 <.LCFI23>:
  41cc24:	b084      	sub	sp, #16

0041cc26 <.LCFI24>:
  41cc26:	9d08      	ldr	r5, [sp, #32]
  41cc28:	9c09      	ldr	r4, [sp, #36]	; 0x24
    if (key == NULL || in == NULL || inLen == 0 || out == NULL ||
  41cc2a:	b1fc      	cbz	r4, 41cc6c <.LCFI26>
  41cc2c:	b1f0      	cbz	r0, 41cc6c <.LCFI26>
  41cc2e:	2a00      	cmp	r2, #0
  41cc30:	bf18      	it	ne
  41cc32:	2900      	cmpne	r1, #0
  41cc34:	d01d      	beq.n	41cc72 <.LCFI26+0x6>
  41cc36:	b1e3      	cbz	r3, 41cc72 <.LCFI26+0x6>
            outLen == NULL || *outLen == 0 || type == RSA_TYPE_UNKNOWN) {
  41cc38:	681e      	ldr	r6, [r3, #0]
  41cc3a:	b1ee      	cbz	r6, 41cc78 <.LCFI26+0xc>
  41cc3c:	f1b5 3fff 	cmp.w	r5, #4294967295
  41cc40:	d01a      	beq.n	41cc78 <.LCFI26+0xc>
        ret = wc_RsaFunctionSync(in, inLen, out, outLen, type, key, rng);
  41cc42:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  41cc44:	9602      	str	r6, [sp, #8]
  41cc46:	9401      	str	r4, [sp, #4]
  41cc48:	9500      	str	r5, [sp, #0]
  41cc4a:	f7f8 fc3f 	bl	4154cc <.LFE4>

0041cc4e <.LVL144>:
    if (ret < 0 && ret != WC_PENDING_E) {
  41cc4e:	1e05      	subs	r5, r0, #0
  41cc50:	da09      	bge.n	41cc66 <.LVL146>
  41cc52:	f115 0f6c 	cmn.w	r5, #108	; 0x6c
  41cc56:	d006      	beq.n	41cc66 <.LVL146>
        key->state = RSA_STATE_NONE;
  41cc58:	2200      	movs	r2, #0
  41cc5a:	f241 134c 	movw	r3, #4428	; 0x114c
  41cc5e:	50e2      	str	r2, [r4, r3]
        wc_RsaCleanup(key);
  41cc60:	4620      	mov	r0, r4

0041cc62 <.LVL145>:
  41cc62:	f7ff fcd7 	bl	41c614 <.LFE12>

0041cc66 <.LVL146>:
}
  41cc66:	4628      	mov	r0, r5
  41cc68:	b004      	add	sp, #16

0041cc6a <.LCFI25>:
  41cc6a:	bd70      	pop	{r4, r5, r6, pc}

0041cc6c <.LCFI26>:
        return BAD_FUNC_ARG;
  41cc6c:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  41cc70:	e7f9      	b.n	41cc66 <.LVL146>
  41cc72:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  41cc76:	e7f6      	b.n	41cc66 <.LVL146>
  41cc78:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  41cc7c:	e7f3      	b.n	41cc66 <.LVL146>

Disassembly of section .text.Console_UART_Read%279:

0041cc80 <Console_UART_Read>:
    while ((readQueue.numElem < readQueue.elemArrSz) && (rdBytes < count))
  41cc80:	4b15      	ldr	r3, [pc, #84]	; (41ccd8 <.LCFI8+0x4>)
  41cc82:	6898      	ldr	r0, [r3, #8]

0041cc84 <.LVL47>:
  41cc84:	691b      	ldr	r3, [r3, #16]
  41cc86:	4298      	cmp	r0, r3
  41cc88:	d222      	bcs.n	41ccd0 <.LBE13>
  41cc8a:	b30a      	cbz	r2, 41ccd0 <.LBE13>
{
  41cc8c:	b5f0      	push	{r4, r5, r6, r7, lr}

0041cc8e <.LCFI6>:
    while ((readQueue.numElem < readQueue.elemArrSz) && (rdBytes < count))
  41cc8e:	2000      	movs	r0, #0

0041cc90 <.LBB10>:
    q->qPkts[q->nextPos] = pkt;
  41cc90:	4b11      	ldr	r3, [pc, #68]	; (41ccd8 <.LCFI8+0x4>)
  41cc92:	2701      	movs	r7, #1
    (q->nextPos < (q->elemArrSz - 1)) ? q->nextPos++ : (q->nextPos = 0);
  41cc94:	4686      	mov	lr, r0
  41cc96:	e009      	b.n	41ccac <.LBB13>

0041cc98 <.LVL48>:
  41cc98:	3401      	adds	r4, #1
  41cc9a:	605c      	str	r4, [r3, #4]
    q->numElem++;
  41cc9c:	689c      	ldr	r4, [r3, #8]
  41cc9e:	3401      	adds	r4, #1
  41cca0:	609c      	str	r4, [r3, #8]

0041cca2 <.LBE10>:
        rdBytes++;
  41cca2:	3001      	adds	r0, #1
    while ((readQueue.numElem < readQueue.elemArrSz) && (rdBytes < count))
  41cca4:	4282      	cmp	r2, r0
  41cca6:	d915      	bls.n	41ccd4 <.LCFI8>
  41cca8:	42a5      	cmp	r5, r4
  41ccaa:	d910      	bls.n	41ccce <.LVL53>

0041ccac <.LBB13>:
    q->qPkts[q->nextPos] = pkt;
  41ccac:	685d      	ldr	r5, [r3, #4]
  41ccae:	68dc      	ldr	r4, [r3, #12]
  41ccb0:	eb04 06c5 	add.w	r6, r4, r5, lsl #3
  41ccb4:	eb01 0c00 	add.w	ip, r1, r0

0041ccb8 <.LVL52>:
  41ccb8:	f844 c035 	str.w	ip, [r4, r5, lsl #3]
  41ccbc:	6077      	str	r7, [r6, #4]
    (q->nextPos < (q->elemArrSz - 1)) ? q->nextPos++ : (q->nextPos = 0);
  41ccbe:	685c      	ldr	r4, [r3, #4]
  41ccc0:	691d      	ldr	r5, [r3, #16]
  41ccc2:	1e6e      	subs	r6, r5, #1
  41ccc4:	42b4      	cmp	r4, r6
  41ccc6:	d3e7      	bcc.n	41cc98 <.LVL48>
  41ccc8:	f8c3 e004 	str.w	lr, [r3, #4]
  41cccc:	e7e6      	b.n	41cc9c <.LVL48+0x4>

0041ccce <.LVL53>:
  41ccce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0041ccd0 <.LBE13>:
    size_t rdBytes = 0;
  41ccd0:	2000      	movs	r0, #0
  41ccd2:	4770      	bx	lr

0041ccd4 <.LCFI8>:
}
  41ccd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  41ccd6:	bf00      	nop
  41ccd8:	204177f4 	.word	0x204177f4

Disassembly of section .text.xTaskCheckForTimeOut%280:

0041ccdc <xTaskCheckForTimeOut>:
{
  41ccdc:	b570      	push	{r4, r5, r6, lr}

0041ccde <.LCFI27>:
  41ccde:	4604      	mov	r4, r0
  41cce0:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  41cce2:	f001 fb97 	bl	41e414 <.LFE6>

0041cce6 <.LBB80>:
		const TickType_t xConstTickCount = xTickCount;
  41cce6:	4b11      	ldr	r3, [pc, #68]	; (41cd2c <.LVL280+0x2>)
  41cce8:	681b      	ldr	r3, [r3, #0]

0041ccea <.LVL269>:
			if( *pxTicksToWait == portMAX_DELAY )
  41ccea:	682a      	ldr	r2, [r5, #0]
  41ccec:	f1b2 3fff 	cmp.w	r2, #4294967295
  41ccf0:	d01a      	beq.n	41cd28 <.LVL279>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  41ccf2:	6861      	ldr	r1, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  41ccf4:	480e      	ldr	r0, [pc, #56]	; (41cd30 <.LVL280+0x6>)
  41ccf6:	6800      	ldr	r0, [r0, #0]
  41ccf8:	6826      	ldr	r6, [r4, #0]
  41ccfa:	4286      	cmp	r6, r0
  41ccfc:	d003      	beq.n	41cd06 <.LVL271>
  41ccfe:	428b      	cmp	r3, r1
  41cd00:	d301      	bcc.n	41cd06 <.LVL271>
			xReturn = pdTRUE;
  41cd02:	2401      	movs	r4, #1

0041cd04 <.LVL270>:
  41cd04:	e005      	b.n	41cd12 <.LBE80>

0041cd06 <.LVL271>:
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  41cd06:	1a5b      	subs	r3, r3, r1

0041cd08 <.LVL272>:
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
  41cd08:	4293      	cmp	r3, r2
  41cd0a:	d306      	bcc.n	41cd1a <.LBB81>
			*pxTicksToWait = 0;
  41cd0c:	2300      	movs	r3, #0
  41cd0e:	602b      	str	r3, [r5, #0]

0041cd10 <.LVL273>:
			xReturn = pdTRUE;
  41cd10:	2401      	movs	r4, #1

0041cd12 <.LBE80>:
	taskEXIT_CRITICAL();
  41cd12:	f001 fef7 	bl	41eb04 <vPortExitCritical>

0041cd16 <.LVL275>:
}
  41cd16:	4620      	mov	r0, r4
  41cd18:	bd70      	pop	{r4, r5, r6, pc}

0041cd1a <.LBB81>:
			*pxTicksToWait -= xElapsedTime;
  41cd1a:	1ad3      	subs	r3, r2, r3
  41cd1c:	602b      	str	r3, [r5, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
  41cd1e:	4620      	mov	r0, r4
  41cd20:	f001 fda8 	bl	41e874 <.LFE6>

0041cd24 <.LVL277>:
			xReturn = pdFALSE;
  41cd24:	2400      	movs	r4, #0

0041cd26 <.LVL278>:
  41cd26:	e7f4      	b.n	41cd12 <.LBE80>

0041cd28 <.LVL279>:
				xReturn = pdFALSE;
  41cd28:	2400      	movs	r4, #0

0041cd2a <.LVL280>:
  41cd2a:	e7f2      	b.n	41cd12 <.LBE80>
  41cd2c:	2041786c 	.word	0x2041786c
  41cd30:	20417864 	.word	0x20417864

Disassembly of section .text.xTaskPriorityDisinherit%281:

0041cd34 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
  41cd34:	b310      	cbz	r0, 41cd7c <.LCFI31>
	{
  41cd36:	b538      	push	{r3, r4, r5, lr}

0041cd38 <.LCFI30>:
  41cd38:	4604      	mov	r4, r0
			( pxTCB->uxMutexesHeld )--;
  41cd3a:	6c82      	ldr	r2, [r0, #72]	; 0x48
  41cd3c:	3a01      	subs	r2, #1
  41cd3e:	6482      	str	r2, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  41cd40:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

0041cd42 <.LVL293>:
  41cd42:	6c61      	ldr	r1, [r4, #68]	; 0x44
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  41cd44:	4288      	cmp	r0, r1
  41cd46:	d01b      	beq.n	41cd80 <.LCFI32>
  41cd48:	b9d2      	cbnz	r2, 41cd80 <.LCFI32>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  41cd4a:	1d25      	adds	r5, r4, #4
  41cd4c:	4628      	mov	r0, r5
  41cd4e:	f001 fa11 	bl	41e174 <.LFE106>

0041cd52 <.LVL294>:
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  41cd52:	6c60      	ldr	r0, [r4, #68]	; 0x44
  41cd54:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  41cd56:	f1c0 0305 	rsb	r3, r0, #5
  41cd5a:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  41cd5c:	4b09      	ldr	r3, [pc, #36]	; (41cd84 <.LVL299>)
  41cd5e:	681b      	ldr	r3, [r3, #0]
  41cd60:	4298      	cmp	r0, r3
  41cd62:	d901      	bls.n	41cd68 <.LVL294+0x16>
  41cd64:	4b07      	ldr	r3, [pc, #28]	; (41cd84 <.LVL299>)
  41cd66:	6018      	str	r0, [r3, #0]
  41cd68:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41cd6c:	4629      	mov	r1, r5
  41cd6e:	4b06      	ldr	r3, [pc, #24]	; (41cd88 <.LVL299+0x4>)
  41cd70:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  41cd74:	f001 fd72 	bl	41e85c <.LFE142>

0041cd78 <.LVL295>:
					xReturn = pdTRUE;
  41cd78:	2001      	movs	r0, #1
  41cd7a:	bd38      	pop	{r3, r4, r5, pc}

0041cd7c <.LCFI31>:
	BaseType_t xReturn = pdFALSE;
  41cd7c:	2000      	movs	r0, #0

0041cd7e <.LVL297>:
  41cd7e:	4770      	bx	lr

0041cd80 <.LCFI32>:
  41cd80:	2000      	movs	r0, #0
	}
  41cd82:	bd38      	pop	{r3, r4, r5, pc}

0041cd84 <.LVL299>:
  41cd84:	20417858 	.word	0x20417858
  41cd88:	20417534 	.word	0x20417534

Disassembly of section .text.inflateResetKeep%282:

0041cd8c <inflateResetKeep>:
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  41cd8c:	b320      	cbz	r0, 41cdd8 <.LVL38>
  41cd8e:	69c3      	ldr	r3, [r0, #28]
  41cd90:	b32b      	cbz	r3, 41cdde <.LVL40>

0041cd92 <.LVL36>:
    strm->total_in = strm->total_out = state->total = 0;
  41cd92:	2100      	movs	r1, #0
  41cd94:	61d9      	str	r1, [r3, #28]
  41cd96:	6141      	str	r1, [r0, #20]
  41cd98:	6081      	str	r1, [r0, #8]
    strm->msg = Z_NULL;
  41cd9a:	6181      	str	r1, [r0, #24]
    if (state->wrap)        /* to support ill-conceived Java test suite */
  41cd9c:	6899      	ldr	r1, [r3, #8]
  41cd9e:	b111      	cbz	r1, 41cda6 <.LVL36+0x14>
        strm->adler = state->wrap & 1;
  41cda0:	f001 0101 	and.w	r1, r1, #1
  41cda4:	6301      	str	r1, [r0, #48]	; 0x30
    state->mode = HEAD;
  41cda6:	2000      	movs	r0, #0

0041cda8 <.LVL37>:
  41cda8:	7018      	strb	r0, [r3, #0]
    state->last = 0;
  41cdaa:	6058      	str	r0, [r3, #4]
    state->havedict = 0;
  41cdac:	60d8      	str	r0, [r3, #12]
    state->dmax = 32768U;
  41cdae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  41cdb2:	615a      	str	r2, [r3, #20]
    state->head = Z_NULL;
  41cdb4:	6218      	str	r0, [r3, #32]
    state->hold = 0;
  41cdb6:	6398      	str	r0, [r3, #56]	; 0x38
    state->bits = 0;
  41cdb8:	63d8      	str	r0, [r3, #60]	; 0x3c
    state->lencode = state->distcode = state->next = state->codes;
  41cdba:	f503 62a6 	add.w	r2, r3, #1328	; 0x530
  41cdbe:	66da      	str	r2, [r3, #108]	; 0x6c
  41cdc0:	651a      	str	r2, [r3, #80]	; 0x50
  41cdc2:	64da      	str	r2, [r3, #76]	; 0x4c
    state->sane = 1;
  41cdc4:	f503 52de 	add.w	r2, r3, #7104	; 0x1bc0
  41cdc8:	2101      	movs	r1, #1
  41cdca:	6011      	str	r1, [r2, #0]
    state->back = -1;
  41cdcc:	f04f 31ff 	mov.w	r1, #4294967295
  41cdd0:	f641 32c4 	movw	r2, #7108	; 0x1bc4
  41cdd4:	5099      	str	r1, [r3, r2]
    return Z_OK;
  41cdd6:	4770      	bx	lr

0041cdd8 <.LVL38>:
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  41cdd8:	f06f 0001 	mvn.w	r0, #1

0041cddc <.LVL39>:
  41cddc:	4770      	bx	lr

0041cdde <.LVL40>:
  41cdde:	f06f 0001 	mvn.w	r0, #1

0041cde2 <.LVL41>:
}
  41cde2:	4770      	bx	lr

Disassembly of section .text.wc_AesSetKey%283:

0041cde4 <wc_AesSetKey>:
{
  41cde4:	b570      	push	{r4, r5, r6, lr}

0041cde6 <.LCFI4>:
    if (!((keylen == 16) || (keylen == 24) || (keylen == 32)))
  41cde6:	f022 0408 	bic.w	r4, r2, #8
  41cdea:	2c10      	cmp	r4, #16
  41cdec:	d001      	beq.n	41cdf2 <.LVL17>
  41cdee:	2a20      	cmp	r2, #32
  41cdf0:	d11d      	bne.n	41ce2e <.LVL22>

0041cdf2 <.LVL17>:
    if ((PMC_REGS->PMC_PCSR1 & (AesPmcBit)) != (AesPmcBit))
  41cdf2:	4c10      	ldr	r4, [pc, #64]	; (41ce34 <.LVL24>)
  41cdf4:	f8d4 4108 	ldr.w	r4, [r4, #264]	; 0x108
  41cdf8:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
  41cdfc:	d108      	bne.n	41ce10 <.LVL18+0x8>
        PMC_REGS->PMC_PCER1 = AesPmcBit;
  41cdfe:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
  41ce02:	4c0c      	ldr	r4, [pc, #48]	; (41ce34 <.LVL24>)
  41ce04:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100

0041ce08 <.LVL18>:
        AES_REGS->AES_CR = AES_CR_SWRST_Msk;
  41ce08:	f44f 7580 	mov.w	r5, #256	; 0x100
  41ce0c:	4c0a      	ldr	r4, [pc, #40]	; (41ce38 <.LVL24+0x4>)
  41ce0e:	6025      	str	r5, [r4, #0]
  41ce10:	461e      	mov	r6, r3
  41ce12:	4614      	mov	r4, r2
  41ce14:	4605      	mov	r5, r0
    memcpy(aes->key_ce, userKey, keylen);
  41ce16:	f500 7096 	add.w	r0, r0, #300	; 0x12c

0041ce1a <.LVL19>:
  41ce1a:	f7f9 fd35 	bl	416888 <memcpy>

0041ce1e <.LVL20>:
    aes->keylen = keylen;
  41ce1e:	f8c5 40f4 	str.w	r4, [r5, #244]	; 0xf4
    wc_AesSetIV(aes, iv);
  41ce22:	4631      	mov	r1, r6
  41ce24:	4628      	mov	r0, r5
  41ce26:	f000 fe31 	bl	41da8c <.LFE148>

0041ce2a <.LVL21>:
    return 0;
  41ce2a:	2000      	movs	r0, #0
  41ce2c:	bd70      	pop	{r4, r5, r6, pc}

0041ce2e <.LVL22>:
        return BAD_FUNC_ARG;
  41ce2e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041ce32 <.LVL23>:
}
  41ce32:	bd70      	pop	{r4, r5, r6, pc}

0041ce34 <.LVL24>:
  41ce34:	400e0600 	.word	0x400e0600
  41ce38:	4006c000 	.word	0x4006c000

Disassembly of section .text.GetInt%284:

0041ce3c <GetInt>:
{
  41ce3c:	b570      	push	{r4, r5, r6, lr}

0041ce3e <.LCFI45>:
  41ce3e:	b082      	sub	sp, #8

0041ce40 <.LCFI46>:
  41ce40:	4606      	mov	r6, r0
  41ce42:	460c      	mov	r4, r1
  41ce44:	4615      	mov	r5, r2
    word32 idx = *inOutIdx;
  41ce46:	6812      	ldr	r2, [r2, #0]

0041ce48 <.LVL283>:
  41ce48:	9201      	str	r2, [sp, #4]
    ret = GetASNInt(input, &idx, &length, maxIdx);
  41ce4a:	466a      	mov	r2, sp
  41ce4c:	a901      	add	r1, sp, #4

0041ce4e <.LVL284>:
  41ce4e:	4620      	mov	r0, r4

0041ce50 <.LVL285>:
  41ce50:	f7ff fd0a 	bl	41c868 <.LFE154>

0041ce54 <.LVL286>:
    if (ret != 0)
  41ce54:	4603      	mov	r3, r0
  41ce56:	b110      	cbz	r0, 41ce5e <.LCFI48>

0041ce58 <.LVL287>:
}
  41ce58:	4618      	mov	r0, r3
  41ce5a:	b002      	add	sp, #8

0041ce5c <.LCFI47>:
  41ce5c:	bd70      	pop	{r4, r5, r6, pc}

0041ce5e <.LCFI48>:
    if (mp_init(mpi) != MP_OKAY)
  41ce5e:	4630      	mov	r0, r6

0041ce60 <.LVL289>:
  41ce60:	f001 ff18 	bl	41ec94 <.LFE193>

0041ce64 <.LVL290>:
  41ce64:	b990      	cbnz	r0, 41ce8c <.LVL292+0x6>
    if (mp_read_unsigned_bin(mpi, (byte*)input + idx, length) != 0) {
  41ce66:	9a00      	ldr	r2, [sp, #0]
  41ce68:	9901      	ldr	r1, [sp, #4]
  41ce6a:	4421      	add	r1, r4
  41ce6c:	4630      	mov	r0, r6
  41ce6e:	f001 ffeb 	bl	41ee48 <.LFE72>

0041ce72 <.LVL291>:
  41ce72:	4603      	mov	r3, r0
  41ce74:	b920      	cbnz	r0, 41ce80 <.LVL291+0xe>
    *inOutIdx = idx + length;
  41ce76:	9900      	ldr	r1, [sp, #0]
  41ce78:	9a01      	ldr	r2, [sp, #4]
  41ce7a:	440a      	add	r2, r1
  41ce7c:	602a      	str	r2, [r5, #0]
    return 0;
  41ce7e:	e7eb      	b.n	41ce58 <.LVL287>
        mp_clear(mpi);
  41ce80:	4630      	mov	r0, r6
  41ce82:	f001 ff8b 	bl	41ed9c <.LFE170>

0041ce86 <.LVL292>:
        return ASN_GETINT_E;
  41ce86:	f06f 038d 	mvn.w	r3, #141	; 0x8d
  41ce8a:	e7e5      	b.n	41ce58 <.LVL287>
        return MP_INIT_E;
  41ce8c:	f06f 036d 	mvn.w	r3, #109	; 0x6d
  41ce90:	e7e2      	b.n	41ce58 <.LVL287>

Disassembly of section .text.SetLength%285:

0041ce92 <SetLength>:
    if (length < ASN_LONG_LENGTH)
  41ce92:	287f      	cmp	r0, #127	; 0x7f
  41ce94:	d90b      	bls.n	41ceae <.LCFI102>
{
  41ce96:	b430      	push	{r4, r5}

0041ce98 <.LBB168>:
        if (value >> ((i - 1) * WOLFSSL_BIT_SIZE))
  41ce98:	0e03      	lsrs	r3, r0, #24
  41ce9a:	d111      	bne.n	41cec0 <.LVL545>

0041ce9c <.LVL534>:
  41ce9c:	0c03      	lsrs	r3, r0, #16
  41ce9e:	d10b      	bne.n	41ceb8 <.LVL543>

0041cea0 <.LVL535>:
  41cea0:	0a03      	lsrs	r3, r0, #8
  41cea2:	d10b      	bne.n	41cebc <.LVL544>

0041cea4 <.LVL536>:
  41cea4:	b930      	cbnz	r0, 41ceb4 <.LBB171>

0041cea6 <.LBE168>:
        output[i++] = (byte)(BytePrecision(length) | ASN_LONG_LENGTH);
  41cea6:	2380      	movs	r3, #128	; 0x80
  41cea8:	700b      	strb	r3, [r1, #0]

0041ceaa <.LVL538>:
  41ceaa:	2001      	movs	r0, #1

0041ceac <.LVL539>:
  41ceac:	e01a      	b.n	41cee4 <.LVL550>

0041ceae <.LCFI102>:
        output[i++] = (byte)length;
  41ceae:	7008      	strb	r0, [r1, #0]
  41ceb0:	2001      	movs	r0, #1

0041ceb2 <.LVL541>:
  41ceb2:	4770      	bx	lr

0041ceb4 <.LBB171>:
    for (i = sizeof(value); i; --i)
  41ceb4:	2501      	movs	r5, #1
  41ceb6:	e004      	b.n	41cec2 <.LBE171>

0041ceb8 <.LVL543>:
  41ceb8:	2503      	movs	r5, #3
  41ceba:	e002      	b.n	41cec2 <.LBE171>

0041cebc <.LVL544>:
  41cebc:	2502      	movs	r5, #2
  41cebe:	e000      	b.n	41cec2 <.LBE171>

0041cec0 <.LVL545>:
        if (value >> ((i - 1) * WOLFSSL_BIT_SIZE))
  41cec0:	2504      	movs	r5, #4

0041cec2 <.LBE171>:
        output[i++] = (byte)(BytePrecision(length) | ASN_LONG_LENGTH);
  41cec2:	f065 037f 	orn	r3, r5, #127	; 0x7f
  41cec6:	700b      	strb	r3, [r1, #0]

0041cec8 <.LVL547>:
  41cec8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
  41cecc:	442b      	add	r3, r5
  41cece:	00db      	lsls	r3, r3, #3
  41ced0:	460a      	mov	r2, r1
  41ced2:	4429      	add	r1, r5

0041ced4 <.LVL548>:
            output[i] = (byte)(length >> ((j - 1) * WOLFSSL_BIT_SIZE));
  41ced4:	fa20 f403 	lsr.w	r4, r0, r3
  41ced8:	f802 4f01 	strb.w	r4, [r2, #1]!
  41cedc:	3b08      	subs	r3, #8
        for (j = BytePrecision(length); j; --j) {
  41cede:	428a      	cmp	r2, r1
  41cee0:	d1f8      	bne.n	41ced4 <.LVL548>
  41cee2:	1c68      	adds	r0, r5, #1

0041cee4 <.LVL550>:
}
  41cee4:	bc30      	pop	{r4, r5}

0041cee6 <.LCFI104>:
  41cee6:	4770      	bx	lr

Disassembly of section .text.bi_windup%286:

0041cee8 <bi_windup>:
{
  41cee8:	b410      	push	{r4}

0041ceea <.LCFI17>:
    if (s->bi_valid > 8) {
  41ceea:	f241 63bc 	movw	r3, #5820	; 0x16bc
  41ceee:	58c3      	ldr	r3, [r0, r3]
  41cef0:	2b08      	cmp	r3, #8
  41cef2:	dc13      	bgt.n	41cf1c <.LCFI19>
    } else if (s->bi_valid > 0) {
  41cef4:	2b00      	cmp	r3, #0
  41cef6:	dd07      	ble.n	41cf08 <.LCFI17+0x1e>
        put_byte(s, (Byte)s->bi_buf);
  41cef8:	6882      	ldr	r2, [r0, #8]
  41cefa:	6943      	ldr	r3, [r0, #20]
  41cefc:	1c59      	adds	r1, r3, #1
  41cefe:	6141      	str	r1, [r0, #20]
  41cf00:	f241 61b8 	movw	r1, #5816	; 0x16b8
  41cf04:	5a41      	ldrh	r1, [r0, r1]
  41cf06:	54d1      	strb	r1, [r2, r3]
    s->bi_buf = 0;
  41cf08:	2300      	movs	r3, #0
  41cf0a:	f241 62b8 	movw	r2, #5816	; 0x16b8
  41cf0e:	5283      	strh	r3, [r0, r2]
    s->bi_valid = 0;
  41cf10:	f241 62bc 	movw	r2, #5820	; 0x16bc
  41cf14:	5083      	str	r3, [r0, r2]
}
  41cf16:	f85d 4b04 	ldr.w	r4, [sp], #4

0041cf1a <.LCFI18>:
  41cf1a:	4770      	bx	lr

0041cf1c <.LCFI19>:
        put_short(s, s->bi_buf);
  41cf1c:	6881      	ldr	r1, [r0, #8]
  41cf1e:	6942      	ldr	r2, [r0, #20]
  41cf20:	1c53      	adds	r3, r2, #1
  41cf22:	6143      	str	r3, [r0, #20]
  41cf24:	f241 63b8 	movw	r3, #5816	; 0x16b8
  41cf28:	5ac4      	ldrh	r4, [r0, r3]
  41cf2a:	548c      	strb	r4, [r1, r2]
  41cf2c:	6881      	ldr	r1, [r0, #8]
  41cf2e:	6942      	ldr	r2, [r0, #20]
  41cf30:	1c54      	adds	r4, r2, #1
  41cf32:	6144      	str	r4, [r0, #20]
  41cf34:	5ac3      	ldrh	r3, [r0, r3]
  41cf36:	0a1b      	lsrs	r3, r3, #8
  41cf38:	548b      	strb	r3, [r1, r2]
  41cf3a:	e7e5      	b.n	41cf08 <.LCFI17+0x1e>

Disassembly of section .rodata%287:

0041cf3c <.rodata%287>:
  41cf3c:	61766e69 	.word	0x61766e69
  41cf40:	2064696c 	.word	0x2064696c
  41cf44:	74736964 	.word	0x74736964
  41cf48:	65636e61 	.word	0x65636e61
  41cf4c:	6f6f7420 	.word	0x6f6f7420
  41cf50:	72616620 	.word	0x72616620
  41cf54:	63616220 	.word	0x63616220
  41cf58:	0000006b 	.word	0x0000006b
  41cf5c:	61766e69 	.word	0x61766e69
  41cf60:	2064696c 	.word	0x2064696c
  41cf64:	74736964 	.word	0x74736964
  41cf68:	65636e61 	.word	0x65636e61
  41cf6c:	646f6320 	.word	0x646f6320
  41cf70:	00000065 	.word	0x00000065
  41cf74:	61766e69 	.word	0x61766e69
  41cf78:	2064696c 	.word	0x2064696c
  41cf7c:	6574696c 	.word	0x6574696c
  41cf80:	2f6c6172 	.word	0x2f6c6172
  41cf84:	676e656c 	.word	0x676e656c
  41cf88:	63206874 	.word	0x63206874
  41cf8c:	0065646f 	.word	0x0065646f

Disassembly of section .text.SYS_TIME_RemoveFromList%288:

0041cf90 <SYS_TIME_RemoveFromList>:
{
  41cf90:	4601      	mov	r1, r0
    SYS_TIME_TIMER_OBJ* tmr = counter->tmrActive;
  41cf92:	4b13      	ldr	r3, [pc, #76]	; (41cfe0 <.LVL45+0x2>)
  41cf94:	6b1a      	ldr	r2, [r3, #48]	; 0x30

0041cf96 <.LVL33>:
    while ((tmr != NULL) && (tmr != delTimer))
  41cf96:	b10a      	cbz	r2, 41cf9c <.LVL33+0x6>
  41cf98:	4282      	cmp	r2, r0
  41cf9a:	d103      	bne.n	41cfa4 <.LVL36>
    tmr = counter->tmrActive;
  41cf9c:	4613      	mov	r3, r2
    SYS_TIME_TIMER_OBJ* prevTmr = NULL;
  41cf9e:	2200      	movs	r2, #0

0041cfa0 <.LVL34>:
  41cfa0:	e005      	b.n	41cfae <.LVL38>

0041cfa2 <.LVL35>:
        tmr = tmr->tmrNext;
  41cfa2:	461a      	mov	r2, r3

0041cfa4 <.LVL36>:
  41cfa4:	6993      	ldr	r3, [r2, #24]

0041cfa6 <.LVL37>:
    while ((tmr != NULL) && (tmr != delTimer))
  41cfa6:	2b00      	cmp	r3, #0
  41cfa8:	bf18      	it	ne
  41cfaa:	4299      	cmpne	r1, r3
  41cfac:	d1f9      	bne.n	41cfa2 <.LVL35>

0041cfae <.LVL38>:
    if (tmr == NULL)
  41cfae:	b1ab      	cbz	r3, 41cfdc <.LCFI4>
{
  41cfb0:	b410      	push	{r4}

0041cfb2 <.LCFI1>:
    if (delTimer->tmrNext != NULL)
  41cfb2:	698b      	ldr	r3, [r1, #24]

0041cfb4 <.LVL39>:
  41cfb4:	b11b      	cbz	r3, 41cfbe <.LVL40+0x6>
        delTimer->tmrNext->relativeTimePending += delTimer->relativeTimePending;
  41cfb6:	6898      	ldr	r0, [r3, #8]

0041cfb8 <.LVL40>:
  41cfb8:	688c      	ldr	r4, [r1, #8]
  41cfba:	4420      	add	r0, r4
  41cfbc:	6098      	str	r0, [r3, #8]
    if (prevTmr == NULL)
  41cfbe:	b13a      	cbz	r2, 41cfd0 <.LCFI3>
        prevTmr->tmrNext = delTimer->tmrNext;
  41cfc0:	698b      	ldr	r3, [r1, #24]
  41cfc2:	6193      	str	r3, [r2, #24]
    bool isHeadTimerUpdated = false;
  41cfc4:	2000      	movs	r0, #0

0041cfc6 <.LVL41>:
    delTimer->tmrNext = NULL;
  41cfc6:	2300      	movs	r3, #0
  41cfc8:	618b      	str	r3, [r1, #24]
}
  41cfca:	f85d 4b04 	ldr.w	r4, [sp], #4

0041cfce <.LCFI2>:
  41cfce:	4770      	bx	lr

0041cfd0 <.LCFI3>:
        counter->tmrActive = counter->tmrActive->tmrNext;
  41cfd0:	4b03      	ldr	r3, [pc, #12]	; (41cfe0 <.LVL45+0x2>)
  41cfd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  41cfd4:	6992      	ldr	r2, [r2, #24]
  41cfd6:	631a      	str	r2, [r3, #48]	; 0x30

0041cfd8 <.LVL43>:
        isHeadTimerUpdated = true;
  41cfd8:	2001      	movs	r0, #1
  41cfda:	e7f4      	b.n	41cfc6 <.LVL41>

0041cfdc <.LCFI4>:
        return isHeadTimerUpdated;
  41cfdc:	2000      	movs	r0, #0

0041cfde <.LVL45>:
  41cfde:	4770      	bx	lr
  41cfe0:	20417688 	.word	0x20417688

Disassembly of section .text.wc_ecc_curve_load_item%289:

0041cfe4 <wc_ecc_curve_load_item>:
{
  41cfe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0041cfe8 <.LCFI6>:
    if (curve->spec_use >= curve->spec_count) {
  41cfe8:	6a14      	ldr	r4, [r2, #32]
  41cfea:	69d6      	ldr	r6, [r2, #28]
  41cfec:	42b4      	cmp	r4, r6
  41cfee:	d21e      	bcs.n	41d02e <.LVL39>
  41cff0:	461f      	mov	r7, r3
  41cff2:	4616      	mov	r6, r2
  41cff4:	460d      	mov	r5, r1
  41cff6:	4680      	mov	r8, r0
    *dst = &curve->spec_ints[curve->spec_use++];
  41cff8:	6990      	ldr	r0, [r2, #24]

0041cffa <.LVL31>:
  41cffa:	1c63      	adds	r3, r4, #1

0041cffc <.LVL32>:
  41cffc:	6213      	str	r3, [r2, #32]
  41cffe:	f44f 730a 	mov.w	r3, #552	; 0x228
  41d002:	fb03 0004 	mla	r0, r3, r4, r0
  41d006:	6008      	str	r0, [r1, #0]
    err = mp_init(*dst);
  41d008:	f001 fe44 	bl	41ec94 <.LFE193>

0041d00c <.LVL33>:
    if (err == MP_OKAY) {
  41d00c:	4603      	mov	r3, r0
  41d00e:	b110      	cbz	r0, 41d016 <.LVL35>

0041d010 <.LVL34>:
}
  41d010:	4618      	mov	r0, r3
  41d012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041d016 <.LVL35>:
        curve->load_mask |= mask;
  41d016:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
  41d01a:	431f      	orrs	r7, r3
  41d01c:	f886 7024 	strb.w	r7, [r6, #36]	; 0x24
        err = mp_read_radix(*dst, src, 16);
  41d020:	2210      	movs	r2, #16
  41d022:	4641      	mov	r1, r8
  41d024:	6828      	ldr	r0, [r5, #0]

0041d026 <.LVL36>:
  41d026:	f7fd f865 	bl	41a0f4 <mp_read_radix>

0041d02a <.LVL37>:
  41d02a:	4603      	mov	r3, r0

0041d02c <.LVL38>:
  41d02c:	e7f0      	b.n	41d010 <.LVL34>

0041d02e <.LVL39>:
        return ECC_BAD_ARG_E;
  41d02e:	f06f 03a9 	mvn.w	r3, #169	; 0xa9

0041d032 <.LVL40>:
  41d032:	e7ed      	b.n	41d010 <.LVL34>

Disassembly of section .text.__libc_init_array%290:

0041d034 <__libc_init_array>:
  41d034:	b570      	push	{r4, r5, r6, lr}

0041d036 <.LCFI0>:
  41d036:	4e0f      	ldr	r6, [pc, #60]	; (41d074 <.LVL13+0x2>)
  41d038:	4d0f      	ldr	r5, [pc, #60]	; (41d078 <.LVL13+0x6>)
  41d03a:	1b76      	subs	r6, r6, r5

0041d03c <.LVL0>:
  41d03c:	10b6      	asrs	r6, r6, #2

0041d03e <.LVL1>:
  41d03e:	bf18      	it	ne
  41d040:	2400      	movne	r4, #0
  41d042:	d005      	beq.n	41d050 <.LVL5>

0041d044 <.LVL2>:
  41d044:	3401      	adds	r4, #1

0041d046 <.LVL3>:
  41d046:	f855 3b04 	ldr.w	r3, [r5], #4
  41d04a:	4798      	blx	r3

0041d04c <.LVL4>:
  41d04c:	42a6      	cmp	r6, r4
  41d04e:	d1f9      	bne.n	41d044 <.LVL2>

0041d050 <.LVL5>:
  41d050:	4e0a      	ldr	r6, [pc, #40]	; (41d07c <.LVL13+0xa>)

0041d052 <.LVL6>:
  41d052:	4d0b      	ldr	r5, [pc, #44]	; (41d080 <.LVL13+0xe>)
  41d054:	1b76      	subs	r6, r6, r5
  41d056:	f7e3 f887 	bl	400168 <_init>

0041d05a <.LVL7>:
  41d05a:	10b6      	asrs	r6, r6, #2

0041d05c <.LVL8>:
  41d05c:	bf18      	it	ne
  41d05e:	2400      	movne	r4, #0
  41d060:	d006      	beq.n	41d070 <.LVL12>

0041d062 <.LVL9>:
  41d062:	3401      	adds	r4, #1

0041d064 <.LVL10>:
  41d064:	f855 3b04 	ldr.w	r3, [r5], #4
  41d068:	4798      	blx	r3

0041d06a <.LVL11>:
  41d06a:	42a6      	cmp	r6, r4
  41d06c:	d1f9      	bne.n	41d062 <.LVL9>
  41d06e:	bd70      	pop	{r4, r5, r6, pc}

0041d070 <.LVL12>:
  41d070:	bd70      	pop	{r4, r5, r6, pc}

0041d072 <.LVL13>:
  41d072:	bf00      	nop
  41d074:	00400174 	.word	0x00400174
  41d078:	00400174 	.word	0x00400174
  41d07c:	0040017c 	.word	0x0040017c
  41d080:	00400174 	.word	0x00400174

Disassembly of section .text.fp_cmp_d%291:

0041d084 <fp_cmp_d>:
{
  41d084:	b410      	push	{r4}

0041d086 <.LCFI10>:
  if (a->used == 0 && b == 0)
  41d086:	6804      	ldr	r4, [r0, #0]
  41d088:	fab4 f284 	clz	r2, r4
  41d08c:	0952      	lsrs	r2, r2, #5
  41d08e:	460b      	mov	r3, r1
  41d090:	b911      	cbnz	r1, 41d098 <.LVL93>
  41d092:	b10a      	cbz	r2, 41d098 <.LVL93>
    return FP_EQ;
  41d094:	2000      	movs	r0, #0

0041d096 <.LVL92>:
  41d096:	e007      	b.n	41d0a8 <.LVL94>

0041d098 <.LVL93>:
  if ((b && a->used == 0) || a->sign == FP_NEG) {
  41d098:	b103      	cbz	r3, 41d09c <.LVL93+0x4>
  41d09a:	b98a      	cbnz	r2, 41d0c0 <.LVL97>
  41d09c:	6842      	ldr	r2, [r0, #4]
  41d09e:	2a01      	cmp	r2, #1
  41d0a0:	d011      	beq.n	41d0c6 <.LVL99>
  if (a->used > 1) {
  41d0a2:	2c01      	cmp	r4, #1
  41d0a4:	dd03      	ble.n	41d0ae <.LCFI12>
    return FP_GT;
  41d0a6:	2001      	movs	r0, #1

0041d0a8 <.LVL94>:
}
  41d0a8:	f85d 4b04 	ldr.w	r4, [sp], #4

0041d0ac <.LCFI11>:
  41d0ac:	4770      	bx	lr

0041d0ae <.LCFI12>:
  if (a->dp[0] > b) {
  41d0ae:	6880      	ldr	r0, [r0, #8]

0041d0b0 <.LVL96>:
  41d0b0:	4283      	cmp	r3, r0
  41d0b2:	d30b      	bcc.n	41d0cc <.LVL100+0x2>
  } else if (a->dp[0] < b) {
  41d0b4:	4283      	cmp	r3, r0
  41d0b6:	f04f 30ff 	mov.w	r0, #4294967295
  41d0ba:	bf98      	it	ls
  41d0bc:	2000      	movls	r0, #0
  41d0be:	e7f3      	b.n	41d0a8 <.LVL94>

0041d0c0 <.LVL97>:
    return FP_LT;
  41d0c0:	f04f 30ff 	mov.w	r0, #4294967295

0041d0c4 <.LVL98>:
  41d0c4:	e7f0      	b.n	41d0a8 <.LVL94>

0041d0c6 <.LVL99>:
  41d0c6:	f04f 30ff 	mov.w	r0, #4294967295

0041d0ca <.LVL100>:
  41d0ca:	e7ed      	b.n	41d0a8 <.LVL94>
    return FP_GT;
  41d0cc:	2001      	movs	r0, #1
  41d0ce:	e7eb      	b.n	41d0a8 <.LVL94>

Disassembly of section .text.flush_pending%292:

0041d0d0 <flush_pending>:
{
  41d0d0:	b570      	push	{r4, r5, r6, lr}

0041d0d2 <.LCFI6>:
  41d0d2:	4605      	mov	r5, r0
    deflate_state *s = strm->state;
  41d0d4:	69c6      	ldr	r6, [r0, #28]
    _tr_flush_bits(s);
  41d0d6:	4630      	mov	r0, r6

0041d0d8 <.LVL106>:
  41d0d8:	f001 ff52 	bl	41ef80 <_tr_flush_bits>

0041d0dc <.LVL107>:
    len = s->pending;
  41d0dc:	6974      	ldr	r4, [r6, #20]

0041d0de <.LVL108>:
  41d0de:	692b      	ldr	r3, [r5, #16]
  41d0e0:	429c      	cmp	r4, r3
  41d0e2:	bf28      	it	cs
  41d0e4:	461c      	movcs	r4, r3
    if (len == 0) return;
  41d0e6:	b904      	cbnz	r4, 41d0ea <.LVL111>

0041d0e8 <.LVL110>:
  41d0e8:	bd70      	pop	{r4, r5, r6, pc}

0041d0ea <.LVL111>:
    zmemcpy(strm->next_out, s->pending_out, len);
  41d0ea:	4622      	mov	r2, r4
  41d0ec:	6931      	ldr	r1, [r6, #16]
  41d0ee:	68e8      	ldr	r0, [r5, #12]
  41d0f0:	f7f9 fbca 	bl	416888 <memcpy>

0041d0f4 <.LVL112>:
    strm->next_out  += len;
  41d0f4:	68eb      	ldr	r3, [r5, #12]
  41d0f6:	4423      	add	r3, r4
  41d0f8:	60eb      	str	r3, [r5, #12]
    s->pending_out  += len;
  41d0fa:	6933      	ldr	r3, [r6, #16]
  41d0fc:	4423      	add	r3, r4
  41d0fe:	6133      	str	r3, [r6, #16]
    strm->total_out += len;
  41d100:	696b      	ldr	r3, [r5, #20]
  41d102:	4423      	add	r3, r4
  41d104:	616b      	str	r3, [r5, #20]
    strm->avail_out  -= len;
  41d106:	692b      	ldr	r3, [r5, #16]
  41d108:	1b1b      	subs	r3, r3, r4
  41d10a:	612b      	str	r3, [r5, #16]
    s->pending -= len;
  41d10c:	6973      	ldr	r3, [r6, #20]
  41d10e:	1b1c      	subs	r4, r3, r4

0041d110 <.LVL113>:
  41d110:	6174      	str	r4, [r6, #20]
    if (s->pending == 0) {
  41d112:	2c00      	cmp	r4, #0
  41d114:	d1e8      	bne.n	41d0e8 <.LVL110>
        s->pending_out = s->pending_buf;
  41d116:	68b3      	ldr	r3, [r6, #8]
  41d118:	6133      	str	r3, [r6, #16]
  41d11a:	e7e5      	b.n	41d0e8 <.LVL110>

Disassembly of section .text._tr_init%293:

0041d11c <_tr_init>:
{
  41d11c:	b508      	push	{r3, lr}

0041d11e <.LCFI20>:
    s->l_desc.dyn_tree = s->dyn_ltree;
  41d11e:	f100 0294 	add.w	r2, r0, #148	; 0x94
  41d122:	f8c0 2b18 	str.w	r2, [r0, #2840]	; 0xb18
    s->l_desc.stat_desc = &static_l_desc;
  41d126:	4a0d      	ldr	r2, [pc, #52]	; (41d15c <.LVL286+0x2>)
  41d128:	f8c0 2b20 	str.w	r2, [r0, #2848]	; 0xb20
    s->d_desc.dyn_tree = s->dyn_dtree;
  41d12c:	f600 1288 	addw	r2, r0, #2440	; 0x988
  41d130:	f8c0 2b24 	str.w	r2, [r0, #2852]	; 0xb24
    s->d_desc.stat_desc = &static_d_desc;
  41d134:	4a0a      	ldr	r2, [pc, #40]	; (41d160 <.LVL286+0x6>)
  41d136:	f8c0 2b2c 	str.w	r2, [r0, #2860]	; 0xb2c
    s->bl_desc.dyn_tree = s->bl_tree;
  41d13a:	f600 227c 	addw	r2, r0, #2684	; 0xa7c
  41d13e:	f8c0 2b30 	str.w	r2, [r0, #2864]	; 0xb30
    s->bl_desc.stat_desc = &static_bl_desc;
  41d142:	4a08      	ldr	r2, [pc, #32]	; (41d164 <.LVL286+0xa>)
  41d144:	f8c0 2b38 	str.w	r2, [r0, #2872]	; 0xb38
    s->bi_buf = 0;
  41d148:	2200      	movs	r2, #0
  41d14a:	f241 61b8 	movw	r1, #5816	; 0x16b8
  41d14e:	5242      	strh	r2, [r0, r1]
    s->bi_valid = 0;
  41d150:	f241 61bc 	movw	r1, #5820	; 0x16bc
  41d154:	5042      	str	r2, [r0, r1]
    init_block(s);
  41d156:	f7ff fd35 	bl	41cbc4 <.LFE2>

0041d15a <.LVL286>:
  41d15a:	bd08      	pop	{r3, pc}
  41d15c:	204177cc 	.word	0x204177cc
  41d160:	204177b8 	.word	0x204177b8
  41d164:	204177a4 	.word	0x204177a4

Disassembly of section .rodata.extra_blbits%294:

0041d168 <extra_blbits>:
	...
  41d1a8:	00000002 00000003 00000007              ............

Disassembly of section .text.Console_UART_Write%295:

0041d1b4 <Console_UART_Write>:
{
  41d1b4:	b538      	push	{r3, r4, r5, lr}

0041d1b6 <.LCFI0>:
  41d1b6:	460d      	mov	r5, r1
  41d1b8:	4614      	mov	r4, r2

0041d1ba <.LVL3>:
    if (writeQueue.numElem >= writeQueue.elemArrSz)
  41d1ba:	4b10      	ldr	r3, [pc, #64]	; (41d1fc <.LVL9+0x4>)
  41d1bc:	689a      	ldr	r2, [r3, #8]

0041d1be <.LVL4>:
  41d1be:	691b      	ldr	r3, [r3, #16]
  41d1c0:	429a      	cmp	r2, r3
  41d1c2:	d216      	bcs.n	41d1f2 <.LVL7>

0041d1c4 <.LBB4>:
    q->qPkts[q->nextPos] = pkt;
  41d1c4:	4b0d      	ldr	r3, [pc, #52]	; (41d1fc <.LVL9+0x4>)
  41d1c6:	6859      	ldr	r1, [r3, #4]
  41d1c8:	68da      	ldr	r2, [r3, #12]
  41d1ca:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
  41d1ce:	f842 5031 	str.w	r5, [r2, r1, lsl #3]
  41d1d2:	6044      	str	r4, [r0, #4]
    (q->nextPos < (q->elemArrSz - 1)) ? q->nextPos++ : (q->nextPos = 0);
  41d1d4:	685a      	ldr	r2, [r3, #4]
  41d1d6:	691b      	ldr	r3, [r3, #16]
  41d1d8:	3b01      	subs	r3, #1
  41d1da:	429a      	cmp	r2, r3
  41d1dc:	bf34      	ite	cc
  41d1de:	3201      	addcc	r2, #1
  41d1e0:	2200      	movcs	r2, #0
  41d1e2:	4b06      	ldr	r3, [pc, #24]	; (41d1fc <.LVL9+0x4>)
  41d1e4:	605a      	str	r2, [r3, #4]
    q->numElem++;
  41d1e6:	4a05      	ldr	r2, [pc, #20]	; (41d1fc <.LVL9+0x4>)
  41d1e8:	6893      	ldr	r3, [r2, #8]
  41d1ea:	3301      	adds	r3, #1
  41d1ec:	6093      	str	r3, [r2, #8]

0041d1ee <.LBE4>:
}
  41d1ee:	4620      	mov	r0, r4
  41d1f0:	bd38      	pop	{r3, r4, r5, pc}

0041d1f2 <.LVL7>:
        popQueue(&writeQueue);
  41d1f2:	4802      	ldr	r0, [pc, #8]	; (41d1fc <.LVL9+0x4>)

0041d1f4 <.LVL8>:
  41d1f4:	f001 fab8 	bl	41e768 <.LFE4>

0041d1f8 <.LVL9>:
  41d1f8:	e7e4      	b.n	41d1c4 <.LBB4>
  41d1fa:	bf00      	nop
  41d1fc:	20417808 	.word	0x20417808

Disassembly of section .text.sprintf%296:

0041d200 <sprintf>:
  41d200:	b40e      	push	{r1, r2, r3}

0041d202 <.LCFI6>:
  41d202:	b5f0      	push	{r4, r5, r6, r7, lr}

0041d204 <.LCFI7>:
  41d204:	b09c      	sub	sp, #112	; 0x70

0041d206 <.LCFI8>:
  41d206:	ab21      	add	r3, sp, #132	; 0x84
  41d208:	490f      	ldr	r1, [pc, #60]	; (41d248 <.LCFI11+0x4>)
  41d20a:	f853 2b04 	ldr.w	r2, [r3], #4
  41d20e:	9301      	str	r3, [sp, #4]
  41d210:	4605      	mov	r5, r0
  41d212:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  41d216:	6808      	ldr	r0, [r1, #0]

0041d218 <.LVL4>:
  41d218:	9502      	str	r5, [sp, #8]
  41d21a:	f44f 7702 	mov.w	r7, #520	; 0x208
  41d21e:	f64f 76ff 	movw	r6, #65535	; 0xffff
  41d222:	a902      	add	r1, sp, #8
  41d224:	9506      	str	r5, [sp, #24]
  41d226:	f8ad 7014 	strh.w	r7, [sp, #20]
  41d22a:	9404      	str	r4, [sp, #16]
  41d22c:	9407      	str	r4, [sp, #28]
  41d22e:	f8ad 6016 	strh.w	r6, [sp, #22]
  41d232:	f7e7 fb59 	bl	4048e8 <_svfprintf_r>

0041d236 <.LVL5>:
  41d236:	9b02      	ldr	r3, [sp, #8]
  41d238:	2200      	movs	r2, #0
  41d23a:	701a      	strb	r2, [r3, #0]
  41d23c:	b01c      	add	sp, #112	; 0x70

0041d23e <.LCFI9>:
  41d23e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

0041d242 <.LCFI10>:
  41d242:	b003      	add	sp, #12

0041d244 <.LCFI11>:
  41d244:	4770      	bx	lr
  41d246:	bf00      	nop
  41d248:	2041788c 	.word	0x2041788c

Disassembly of section .text._Balloc%297:

0041d24c <_Balloc>:
  41d24c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  41d24e:	b570      	push	{r4, r5, r6, lr}

0041d250 <.LCFI0>:
  41d250:	4605      	mov	r5, r0
  41d252:	460c      	mov	r4, r1
  41d254:	b14b      	cbz	r3, 41d26a <.LVL3>

0041d256 <.LVL1>:
  41d256:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]

0041d25a <.LVL2>:
  41d25a:	b180      	cbz	r0, 41d27e <.LVL6>
  41d25c:	6802      	ldr	r2, [r0, #0]
  41d25e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  41d262:	2300      	movs	r3, #0
  41d264:	6103      	str	r3, [r0, #16]
  41d266:	60c3      	str	r3, [r0, #12]
  41d268:	bd70      	pop	{r4, r5, r6, pc}

0041d26a <.LVL3>:
  41d26a:	2221      	movs	r2, #33	; 0x21
  41d26c:	2104      	movs	r1, #4

0041d26e <.LVL4>:
  41d26e:	f7ff fbbb 	bl	41c9e8 <.LFE154>

0041d272 <.LVL5>:
  41d272:	64e8      	str	r0, [r5, #76]	; 0x4c
  41d274:	4603      	mov	r3, r0
  41d276:	2800      	cmp	r0, #0
  41d278:	d1ed      	bne.n	41d256 <.LVL1>
  41d27a:	2000      	movs	r0, #0
  41d27c:	bd70      	pop	{r4, r5, r6, pc}

0041d27e <.LVL6>:
  41d27e:	2101      	movs	r1, #1
  41d280:	fa01 f604 	lsl.w	r6, r1, r4
  41d284:	1d72      	adds	r2, r6, #5
  41d286:	4628      	mov	r0, r5

0041d288 <.LVL8>:
  41d288:	0092      	lsls	r2, r2, #2
  41d28a:	f7ff fbad 	bl	41c9e8 <.LFE154>

0041d28e <.LVL9>:
  41d28e:	2800      	cmp	r0, #0
  41d290:	d0f3      	beq.n	41d27a <.LVL5+0x8>
  41d292:	6044      	str	r4, [r0, #4]
  41d294:	6086      	str	r6, [r0, #8]
  41d296:	e7e4      	b.n	41d262 <.LVL2+0x8>

Disassembly of section .text.fp_add%298:

0041d298 <fp_add>:
{
  41d298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0041d29c <.LCFI16>:
  41d29c:	4604      	mov	r4, r0
  41d29e:	460d      	mov	r5, r1
  41d2a0:	4616      	mov	r6, r2
  sa = a->sign;
  41d2a2:	6847      	ldr	r7, [r0, #4]
  sb = b->sign;
  41d2a4:	f8d1 8004 	ldr.w	r8, [r1, #4]
  if (sa == sb) {
  41d2a8:	4547      	cmp	r7, r8
  41d2aa:	d00c      	beq.n	41d2c6 <.LVL123>
    if (fp_cmp_mag (a, b) == FP_LT) {
  41d2ac:	f7ff f91b 	bl	41c4e6 <.LFE170>

0041d2b0 <.LVL121>:
  41d2b0:	f1b0 3fff 	cmp.w	r0, #4294967295
  41d2b4:	d00c      	beq.n	41d2d0 <.LVL124+0x4>
      c->sign = sa;
  41d2b6:	6077      	str	r7, [r6, #4]
      s_fp_sub (a, b, c);
  41d2b8:	4632      	mov	r2, r6
  41d2ba:	4629      	mov	r1, r5
  41d2bc:	4620      	mov	r0, r4
  41d2be:	f7fa ff99 	bl	4181f4 <.LFE20>

0041d2c2 <.LVL122>:
  41d2c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041d2c6 <.LVL123>:
    c->sign = sa;
  41d2c6:	6057      	str	r7, [r2, #4]
    s_fp_add (a, b, c);
  41d2c8:	f7fb fa35 	bl	418736 <.LFE208>

0041d2cc <.LVL124>:
  41d2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      c->sign = sb;
  41d2d0:	f8c6 8004 	str.w	r8, [r6, #4]
      s_fp_sub (b, a, c);
  41d2d4:	4632      	mov	r2, r6
  41d2d6:	4621      	mov	r1, r4
  41d2d8:	4628      	mov	r0, r5
  41d2da:	f7fa ff8b 	bl	4181f4 <.LFE20>

0041d2de <.LVL126>:
  41d2de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section .text.xPortStartScheduler%299:

0041d2e4 <xPortStartScheduler>:
{
  41d2e4:	b510      	push	{r4, lr}

0041d2e6 <.LCFI3>:
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  41d2e6:	4b0e      	ldr	r3, [pc, #56]	; (41d320 <.LVL18+0x4>)
  41d2e8:	681a      	ldr	r2, [r3, #0]
  41d2ea:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  41d2ee:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  41d2f0:	681a      	ldr	r2, [r3, #0]
  41d2f2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  41d2f6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  41d2f8:	f000 ff64 	bl	41e1c4 <vPortSetupTimerInterrupt>

0041d2fc <.LVL14>:
	uxCriticalNesting = 0;
  41d2fc:	2400      	movs	r4, #0
  41d2fe:	4b09      	ldr	r3, [pc, #36]	; (41d324 <.LVL18+0x8>)
  41d300:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
  41d302:	f001 fbf5 	bl	41eaf0 <vPortEnableVFP>

0041d306 <.LVL15>:
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  41d306:	4a08      	ldr	r2, [pc, #32]	; (41d328 <.LVL18+0xc>)
  41d308:	6813      	ldr	r3, [r2, #0]
  41d30a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  41d30e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  41d310:	f000 ff44 	bl	41e19c <.LFE8>

0041d314 <.LVL16>:
	vTaskSwitchContext();
  41d314:	f7fb fffa 	bl	41930c <.LFE7>

0041d318 <.LVL17>:
	prvTaskExitError();
  41d318:	f001 f857 	bl	41e3ca <.LFE8>

0041d31c <.LVL18>:
}
  41d31c:	4620      	mov	r0, r4
  41d31e:	bd10      	pop	{r4, pc}
  41d320:	e000ed20 	.word	0xe000ed20
  41d324:	2041787c 	.word	0x2041787c
  41d328:	e000ef34 	.word	0xe000ef34

Disassembly of section .text.wc_ecc_init_ex%300:

0041d32c <wc_ecc_init_ex>:
    if (key == NULL) {
  41d32c:	b1d8      	cbz	r0, 41d366 <.LCFI75>
{
  41d32e:	b530      	push	{r4, r5, lr}

0041d330 <.LCFI72>:
  41d330:	b083      	sub	sp, #12

0041d332 <.LCFI73>:
  41d332:	4604      	mov	r4, r0
  41d334:	460d      	mov	r5, r1
    XMEMSET(key, 0, sizeof(ecc_key));
  41d336:	f640 02b8 	movw	r2, #2232	; 0x8b8

0041d33a <.LVL932>:
  41d33a:	2100      	movs	r1, #0

0041d33c <.LVL933>:
  41d33c:	f7fd f958 	bl	41a5f0 <.LFE157>

0041d340 <.LVL934>:
    key->state = ECC_STATE_NONE;
  41d340:	2300      	movs	r3, #0
    ret = mp_init_multi(&key->k, key->pubkey.x, key->pubkey.y, key->pubkey.z,
  41d342:	9301      	str	r3, [sp, #4]
  41d344:	9300      	str	r3, [sp, #0]
  41d346:	f504 638d 	add.w	r3, r4, #1128	; 0x468
  41d34a:	f504 7210 	add.w	r2, r4, #576	; 0x240
  41d34e:	f104 0118 	add.w	r1, r4, #24
  41d352:	f504 60d2 	add.w	r0, r4, #1680	; 0x690
  41d356:	f000 fa89 	bl	41d86c <mp_init_multi>

0041d35a <.LVL935>:
    if (ret != MP_OKAY) {
  41d35a:	4603      	mov	r3, r0
  41d35c:	b938      	cbnz	r0, 41d36e <.LCFI76>
    key->heap = heap;
  41d35e:	6165      	str	r5, [r4, #20]
}
  41d360:	4618      	mov	r0, r3

0041d362 <.LVL936>:
  41d362:	b003      	add	sp, #12

0041d364 <.LCFI74>:
  41d364:	bd30      	pop	{r4, r5, pc}

0041d366 <.LCFI75>:
        return BAD_FUNC_ARG;
  41d366:	f06f 03ac 	mvn.w	r3, #172	; 0xac
}
  41d36a:	4618      	mov	r0, r3

0041d36c <.LVL938>:
  41d36c:	4770      	bx	lr

0041d36e <.LCFI76>:
        return MEMORY_E;
  41d36e:	f06f 037c 	mvn.w	r3, #124	; 0x7c
  41d372:	e7f5      	b.n	41d360 <.LVL935+0x6>

Disassembly of section .text.SYS_CONSOLE_Initialize%301:

0041d374 <SYS_CONSOLE_Initialize>:
SYS_MODULE_OBJ SYS_CONSOLE_Initialize( const SYS_MODULE_INDEX index, const SYS_MODULE_INIT * const init )
{
    SYS_CONSOLE_INIT *initConfig = (SYS_CONSOLE_INIT*)init;

    /* Confirm valid arguments */
    if (index >= SYS_CONSOLE_DEVICE_MAX_INSTANCES || init == NULL)
  41d374:	b908      	cbnz	r0, 41d37a <SYS_CONSOLE_Initialize+0x6>
  41d376:	4603      	mov	r3, r0
  41d378:	b911      	cbnz	r1, 41d380 <.LVL2>
        return SYS_MODULE_OBJ_INVALID;
  41d37a:	f04f 30ff 	mov.w	r0, #4294967295

0041d37e <.LVL1>:
  41d37e:	4770      	bx	lr

0041d380 <.LVL2>:

    if ((consoleDeviceInstance[index].consoleDeviceInstanceStatus == SYS_STATUS_UNINITIALIZED) && initConfig)
  41d380:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  41d384:	480c      	ldr	r0, [pc, #48]	; (41d3b8 <.LVL5+0x6>)

0041d386 <.LVL3>:
  41d386:	f910 2022 	ldrsb.w	r2, [r0, r2, lsl #2]
  41d38a:	b992      	cbnz	r2, 41d3b2 <.LVL5>
  41d38c:	b189      	cbz	r1, 41d3b2 <.LVL5>
{
  41d38e:	b430      	push	{r4, r5}

0041d390 <.LCFI0>:
    {
        consoleDeviceInstance[index].consoleDevHandle = CONSOLE_DEVICE_HANDLE_INVALID;
  41d390:	4604      	mov	r4, r0
  41d392:	005a      	lsls	r2, r3, #1
  41d394:	18d0      	adds	r0, r2, r3
  41d396:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  41d39a:	f04f 35ff 	mov.w	r5, #4294967295
  41d39e:	6085      	str	r5, [r0, #8]

        consoleDeviceInstance[index].consoleInstanceDevDesc = initConfig->consDevDesc;
  41d3a0:	6849      	ldr	r1, [r1, #4]

0041d3a2 <.LVL4>:
  41d3a2:	6041      	str	r1, [r0, #4]
        consoleDeviceInstance[index].consoleDeviceInstanceStatus = SYS_STATUS_READY;
  41d3a4:	441a      	add	r2, r3
  41d3a6:	2102      	movs	r1, #2
  41d3a8:	f804 1022 	strb.w	r1, [r4, r2, lsl #2]

        return index;
  41d3ac:	4618      	mov	r0, r3
    }

    return SYS_MODULE_OBJ_INVALID;
}
  41d3ae:	bc30      	pop	{r4, r5}

0041d3b0 <.LCFI1>:
  41d3b0:	4770      	bx	lr

0041d3b2 <.LVL5>:
    return SYS_MODULE_OBJ_INVALID;
  41d3b2:	f04f 30ff 	mov.w	r0, #4294967295
  41d3b6:	4770      	bx	lr
  41d3b8:	2041781c 	.word	0x2041781c

Disassembly of section .text.Console_UART_Status%302:

0041d3bc <Console_UART_Status>:
    if (consUartData.state == CONSOLE_UART_STATE_INIT)
  41d3bc:	4b0e      	ldr	r3, [pc, #56]	; (41d3f8 <.LFE0+0x3c>)
  41d3be:	781b      	ldrb	r3, [r3, #0]
  41d3c0:	b1ab      	cbz	r3, 41d3ee <Console_UART_Status+0x32>
    if (consUartData.state == CONSOLE_UART_STATE_CRITICAL_ERROR || consUartData.state == CONSOLE_UART_STATE_OPERATIONAL_ERROR || consUartData.overflowFlag)
  41d3c2:	3b07      	subs	r3, #7
  41d3c4:	b2db      	uxtb	r3, r3
  41d3c6:	2b01      	cmp	r3, #1
  41d3c8:	d913      	bls.n	41d3f2 <Console_UART_Status+0x36>
  41d3ca:	4b0b      	ldr	r3, [pc, #44]	; (41d3f8 <.LFE0+0x3c>)
  41d3cc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
  41d3d0:	b10b      	cbz	r3, 41d3d6 <Console_UART_Status+0x1a>
        status = SYS_CONSOLE_STATUS_ERROR;
  41d3d2:	2003      	movs	r0, #3
  41d3d4:	4770      	bx	lr
        status = (writeQueue.numElem || readQueue.numElem) ? SYS_CONSOLE_STATUS_BUSY : SYS_CONSOLE_STATUS_CONFIGURED;
  41d3d6:	4b09      	ldr	r3, [pc, #36]	; (41d3fc <.LFE0+0x40>)
  41d3d8:	689b      	ldr	r3, [r3, #8]
  41d3da:	b10b      	cbz	r3, 41d3e0 <Console_UART_Status+0x24>
  41d3dc:	2002      	movs	r0, #2
}
  41d3de:	4770      	bx	lr
        status = (writeQueue.numElem || readQueue.numElem) ? SYS_CONSOLE_STATUS_BUSY : SYS_CONSOLE_STATUS_CONFIGURED;
  41d3e0:	4b07      	ldr	r3, [pc, #28]	; (41d400 <.LFE0+0x44>)
  41d3e2:	689b      	ldr	r3, [r3, #8]
  41d3e4:	2b00      	cmp	r3, #0
  41d3e6:	bf14      	ite	ne
  41d3e8:	2002      	movne	r0, #2
  41d3ea:	2001      	moveq	r0, #1
  41d3ec:	4770      	bx	lr
        return status;
  41d3ee:	2000      	movs	r0, #0
  41d3f0:	4770      	bx	lr
        status = SYS_CONSOLE_STATUS_ERROR;
  41d3f2:	2003      	movs	r0, #3
  41d3f4:	4770      	bx	lr
  41d3f6:	bf00      	nop
  41d3f8:	20417638 	.word	0x20417638
  41d3fc:	20417808 	.word	0x20417808
  41d400:	204177f4 	.word	0x204177f4

Disassembly of section .text.USART1_Write%303:

0041d404 <USART1_Write>:
bool USART1_Write( void *buffer, const size_t size )
{
    bool status = false;
    uint8_t * lBuffer = (uint8_t *)buffer;

    if(NULL != lBuffer)
  41d404:	b1c8      	cbz	r0, 41d43a <.LVL38>
    {
        /* Check if transmit request is in progress */
        if(usart1Obj.txBusyStatus == false)
  41d406:	4b0f      	ldr	r3, [pc, #60]	; (41d444 <.LVL41+0x4>)
  41d408:	7d1b      	ldrb	r3, [r3, #20]
  41d40a:	b9c3      	cbnz	r3, 41d43e <.LVL40>
        {
            usart1Obj.txBuffer = lBuffer;
  41d40c:	4b0d      	ldr	r3, [pc, #52]	; (41d444 <.LVL41+0x4>)
  41d40e:	6018      	str	r0, [r3, #0]
            usart1Obj.txSize = size;
  41d410:	6059      	str	r1, [r3, #4]
            usart1Obj.txProcessedSize = 0;
  41d412:	2100      	movs	r1, #0

0041d414 <.LVL35>:
  41d414:	6099      	str	r1, [r3, #8]
            usart1Obj.txBusyStatus = true;
  41d416:	2101      	movs	r1, #1
  41d418:	7519      	strb	r1, [r3, #20]

0041d41a <.LVL36>:
            status = true;

            /* Initiate the transfer by sending first byte */
            if(US_CSR_TXEMPTY_Msk == (USART1_REGS->US_CSR& US_CSR_TXEMPTY_Msk))
  41d41a:	4b0b      	ldr	r3, [pc, #44]	; (41d448 <.LVL41+0x8>)
  41d41c:	695b      	ldr	r3, [r3, #20]
  41d41e:	f413 7f00 	tst.w	r3, #512	; 0x200
  41d422:	d004      	beq.n	41d42e <.LVL36+0x14>
            {
                USART1_REGS->US_THR = (US_THR_TXCHR(*lBuffer) & US_THR_TXCHR_Msk);
  41d424:	7802      	ldrb	r2, [r0, #0]
  41d426:	4b08      	ldr	r3, [pc, #32]	; (41d448 <.LVL41+0x8>)
  41d428:	61da      	str	r2, [r3, #28]
                usart1Obj.txProcessedSize++;
  41d42a:	4b06      	ldr	r3, [pc, #24]	; (41d444 <.LVL41+0x4>)
  41d42c:	6099      	str	r1, [r3, #8]
            }

            USART1_REGS->US_IER = US_IER_TXEMPTY_Msk;
  41d42e:	f44f 7200 	mov.w	r2, #512	; 0x200
  41d432:	4b05      	ldr	r3, [pc, #20]	; (41d448 <.LVL41+0x8>)
  41d434:	609a      	str	r2, [r3, #8]
            status = true;
  41d436:	2001      	movs	r0, #1

0041d438 <.LVL37>:
  41d438:	4770      	bx	lr

0041d43a <.LVL38>:
    bool status = false;
  41d43a:	2000      	movs	r0, #0

0041d43c <.LVL39>:
  41d43c:	4770      	bx	lr

0041d43e <.LVL40>:
  41d43e:	2000      	movs	r0, #0

0041d440 <.LVL41>:
        }
    }

    return status;
}
  41d440:	4770      	bx	lr
  41d442:	bf00      	nop
  41d444:	20400020 	.word	0x20400020
  41d448:	40028000 	.word	0x40028000

Disassembly of section .text.GetASNHeader%304:

0041d44c <GetASNHeader>:
{
  41d44c:	b570      	push	{r4, r5, r6, lr}

0041d44e <.LCFI13>:
  41d44e:	b082      	sub	sp, #8

0041d450 <.LCFI14>:
  41d450:	9e06      	ldr	r6, [sp, #24]
    word32 idx = *inOutIdx;
  41d452:	6814      	ldr	r4, [r2, #0]
    if ((idx + 1) > maxIdx)
  41d454:	1c65      	adds	r5, r4, #1
  41d456:	42b5      	cmp	r5, r6
  41d458:	d812      	bhi.n	41d480 <.LCFI16>
    b = input[idx++];
  41d45a:	9501      	str	r5, [sp, #4]

0041d45c <.LVL116>:
    if (b != tag)
  41d45c:	5d04      	ldrb	r4, [r0, r4]

0041d45e <.LVL117>:
  41d45e:	428c      	cmp	r4, r1
  41d460:	d111      	bne.n	41d486 <.LVL125>
  41d462:	461d      	mov	r5, r3
  41d464:	4614      	mov	r4, r2
    if (GetLength(input, &idx, &length, maxIdx) < 0)
  41d466:	4633      	mov	r3, r6

0041d468 <.LVL118>:
  41d468:	466a      	mov	r2, sp

0041d46a <.LVL119>:
  41d46a:	a901      	add	r1, sp, #4

0041d46c <.LVL120>:
  41d46c:	f7ff f808 	bl	41c480 <.LFE17>

0041d470 <.LVL121>:
  41d470:	2800      	cmp	r0, #0
  41d472:	db0b      	blt.n	41d48c <.LVL127>
    *len      = length;
  41d474:	9800      	ldr	r0, [sp, #0]
  41d476:	6028      	str	r0, [r5, #0]
    *inOutIdx = idx;
  41d478:	9b01      	ldr	r3, [sp, #4]
  41d47a:	6023      	str	r3, [r4, #0]

0041d47c <.LVL122>:
}
  41d47c:	b002      	add	sp, #8

0041d47e <.LCFI15>:
  41d47e:	bd70      	pop	{r4, r5, r6, pc}

0041d480 <.LCFI16>:
        return BUFFER_E;
  41d480:	f06f 0083 	mvn.w	r0, #131	; 0x83

0041d484 <.LVL124>:
  41d484:	e7fa      	b.n	41d47c <.LVL122>

0041d486 <.LVL125>:
        return ASN_PARSE_E;
  41d486:	f06f 008b 	mvn.w	r0, #139	; 0x8b

0041d48a <.LVL126>:
  41d48a:	e7f7      	b.n	41d47c <.LVL122>

0041d48c <.LVL127>:
        return ASN_PARSE_E;
  41d48c:	f06f 008b 	mvn.w	r0, #139	; 0x8b
  41d490:	e7f4      	b.n	41d47c <.LVL122>

Disassembly of section .text.fp_mod%305:

0041d492 <fp_mod>:
{
  41d492:	b570      	push	{r4, r5, r6, lr}

0041d494 <.LCFI88>:
  41d494:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228

0041d498 <.LCFI89>:
  41d498:	4605      	mov	r5, r0
  41d49a:	460c      	mov	r4, r1
  41d49c:	4616      	mov	r6, r2

0041d49e <.LBB94>:
    fp_zero(a);
  41d49e:	4668      	mov	r0, sp

0041d4a0 <.LVL630>:
  41d4a0:	f001 fb44 	bl	41eb2c <.LFE154>

0041d4a4 <.LBE94>:
   if ((err = fp_div(a, b, NULL, &t)) != FP_OKAY) {
  41d4a4:	466b      	mov	r3, sp
  41d4a6:	2200      	movs	r2, #0
  41d4a8:	4621      	mov	r1, r4
  41d4aa:	4628      	mov	r0, r5
  41d4ac:	f7f4 fede 	bl	41226c <.LFE22>

0041d4b0 <.LVL632>:
  41d4b0:	4605      	mov	r5, r0

0041d4b2 <.LVL633>:
  41d4b2:	b940      	cbnz	r0, 41d4c6 <.LVL635>
   if (t.sign != b->sign) {
  41d4b4:	9a01      	ldr	r2, [sp, #4]
  41d4b6:	6863      	ldr	r3, [r4, #4]
  41d4b8:	429a      	cmp	r2, r3
  41d4ba:	d008      	beq.n	41d4ce <.LCFI91>
      fp_add(&t, b, c);
  41d4bc:	4632      	mov	r2, r6
  41d4be:	4621      	mov	r1, r4
  41d4c0:	4668      	mov	r0, sp

0041d4c2 <.LVL634>:
  41d4c2:	f7ff fee9 	bl	41d298 <.LFE17>

0041d4c6 <.LVL635>:
}
  41d4c6:	4628      	mov	r0, r5
  41d4c8:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228

0041d4cc <.LCFI90>:
  41d4cc:	bd70      	pop	{r4, r5, r6, pc}

0041d4ce <.LCFI91>:
      fp_copy(&t, c);
  41d4ce:	4631      	mov	r1, r6
  41d4d0:	4668      	mov	r0, sp

0041d4d2 <.LVL637>:
  41d4d2:	f000 ffd5 	bl	41e480 <.LFE185>

0041d4d6 <.LVL638>:
  41d4d6:	e7f6      	b.n	41d4c6 <.LVL635>

Disassembly of section .text.SYS_INT_SourceDisable%306:

0041d4d8 <SYS_INT_SourceDisable>:

    return;
}

bool SYS_INT_SourceDisable( INT_SOURCE source )
{
  41d4d8:	b538      	push	{r3, r4, r5, lr}

0041d4da <.LCFI0>:
  41d4da:	4604      	mov	r4, r0
    bool processorStatus;
    bool intSrcStatus;

    processorStatus = SYS_INT_Disable();
  41d4dc:	f001 fb76 	bl	41ebcc <SYS_INT_Disable>

0041d4e0 <.LBB50>:
  if ((int32_t)(IRQn) >= 0)
  41d4e0:	2c00      	cmp	r4, #0
  41d4e2:	db16      	blt.n	41d512 <.LVL9>
    return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  41d4e4:	0963      	lsrs	r3, r4, #5
  41d4e6:	490c      	ldr	r1, [pc, #48]	; (41d518 <.LVL9+0x6>)
  41d4e8:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
  41d4ec:	f004 041f 	and.w	r4, r4, #31

0041d4f0 <.LVL5>:
  41d4f0:	40e5      	lsrs	r5, r4

0041d4f2 <.LBE50>:

    intSrcStatus = NVIC_GetEnableIRQ(source);
  41d4f2:	f005 0501 	and.w	r5, r5, #1

0041d4f6 <.LBB52>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  41d4f6:	2201      	movs	r2, #1
  41d4f8:	fa02 f404 	lsl.w	r4, r2, r4
  41d4fc:	3320      	adds	r3, #32
  41d4fe:	f841 4023 	str.w	r4, [r1, r3, lsl #2]

0041d502 <.LBB54>:
  __ASM volatile ("dsb 0xF":::"memory");
  41d502:	f3bf 8f4f 	dsb	sy

0041d506 <.LBB56>:
  __ASM volatile ("isb 0xF":::"memory");
  41d506:	f3bf 8f6f 	isb	sy

0041d50a <.LBE52>:

    NVIC_DisableIRQ( source );

    SYS_INT_Restore( processorStatus );
  41d50a:	f001 fb68 	bl	41ebde <.LFE142>

0041d50e <.LVL8>:

    /* return the source status */
    return intSrcStatus;
  41d50e:	4628      	mov	r0, r5
  41d510:	bd38      	pop	{r3, r4, r5, pc}

0041d512 <.LVL9>:
    intSrcStatus = NVIC_GetEnableIRQ(source);
  41d512:	2500      	movs	r5, #0
  41d514:	e7f9      	b.n	41d50a <.LBE52>
  41d516:	bf00      	nop
  41d518:	e000e100 	.word	0xe000e100

Disassembly of section .text.wc_Sha256Hash%307:

0041d51c <wc_Sha256Hash>:
}
#endif /* WOLFSSL_SHA224 */

#if !defined(NO_SHA256)
    int wc_Sha256Hash(const byte* data, word32 len, byte* hash)
    {
  41d51c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0041d520 <.LCFI15>:
  41d520:	af00      	add	r7, sp, #0

0041d522 <.LCFI16>:
  41d522:	4605      	mov	r5, r0
  41d524:	460e      	mov	r6, r1
  41d526:	4690      	mov	r8, r2
  41d528:	b0e0      	sub	sp, #384	; 0x180
  41d52a:	f10d 047f 	add.w	r4, sp, #127	; 0x7f
  41d52e:	f024 047f 	bic.w	r4, r4, #127	; 0x7f

0041d532 <.LVL97>:
        sha256 = (Sha256*)XMALLOC(sizeof(Sha256), NULL, DYNAMIC_TYPE_TMP_BUFFER);
        if (sha256 == NULL)
            return MEMORY_E;
    #endif

        if ((ret = wc_InitSha256(sha256)) != 0) {
  41d532:	4620      	mov	r0, r4

0041d534 <.LVL98>:
  41d534:	f7fd f940 	bl	41a7b8 <.LFE41>

0041d538 <.LVL99>:
  41d538:	4603      	mov	r3, r0
  41d53a:	b118      	cbz	r0, 41d544 <.LCFI18>
    #ifdef WOLFSSL_SMALL_STACK
        XFREE(sha256, NULL, DYNAMIC_TYPE_TMP_BUFFER);
    #endif

        return ret;
    }
  41d53c:	4618      	mov	r0, r3

0041d53e <.LVL100>:
  41d53e:	46bd      	mov	sp, r7

0041d540 <.LCFI17>:
  41d540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041d544 <.LCFI18>:
        else if ((ret = wc_Sha256Update(sha256, data, len)) != 0) {
  41d544:	4632      	mov	r2, r6
  41d546:	4629      	mov	r1, r5
  41d548:	4620      	mov	r0, r4

0041d54a <.LVL102>:
  41d54a:	f7fd fe5b 	bl	41b204 <.LFE156>

0041d54e <.LVL103>:
  41d54e:	4603      	mov	r3, r0
  41d550:	2800      	cmp	r0, #0
  41d552:	d1f3      	bne.n	41d53c <.LVL99+0x4>
        else if ((ret = wc_Sha256Final(sha256, hash)) != 0) {
  41d554:	4641      	mov	r1, r8
  41d556:	4620      	mov	r0, r4

0041d558 <.LVL104>:
  41d558:	f7fc fffc 	bl	41a554 <.LFE151>

0041d55c <.LVL105>:
  41d55c:	4603      	mov	r3, r0

0041d55e <.LVL106>:
        return ret;
  41d55e:	e7ed      	b.n	41d53c <.LVL99+0x4>

Disassembly of section .text.fp_sub%308:

0041d560 <fp_sub>:
{
  41d560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041d562 <.LCFI17>:
  41d562:	4606      	mov	r6, r0
  41d564:	460d      	mov	r5, r1
  41d566:	4617      	mov	r7, r2
  sa = a->sign;
  41d568:	6844      	ldr	r4, [r0, #4]

0041d56a <.LVL128>:
  if (sa != sb) {
  41d56a:	684b      	ldr	r3, [r1, #4]
  41d56c:	429c      	cmp	r4, r3
  41d56e:	d10b      	bne.n	41d588 <.LVL131>
    if (fp_cmp_mag (a, b) != FP_LT) {
  41d570:	f7fe ffb9 	bl	41c4e6 <.LFE170>

0041d574 <.LVL129>:
  41d574:	f1b0 3fff 	cmp.w	r0, #4294967295
  41d578:	d00a      	beq.n	41d590 <.LVL132+0x2>
      c->sign = sa;
  41d57a:	607c      	str	r4, [r7, #4]
      s_fp_sub (a, b, c);
  41d57c:	463a      	mov	r2, r7
  41d57e:	4629      	mov	r1, r5
  41d580:	4630      	mov	r0, r6
  41d582:	f7fa fe37 	bl	4181f4 <.LFE20>

0041d586 <.LVL130>:
  41d586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041d588 <.LVL131>:
    c->sign = sa;
  41d588:	6054      	str	r4, [r2, #4]
    s_fp_add (a, b, c);
  41d58a:	f7fb f8d4 	bl	418736 <.LFE208>

0041d58e <.LVL132>:
  41d58e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      c->sign = (sa == FP_ZPOS) ? FP_NEG : FP_ZPOS;
  41d590:	fab4 f484 	clz	r4, r4

0041d594 <.LVL134>:
  41d594:	0964      	lsrs	r4, r4, #5
  41d596:	607c      	str	r4, [r7, #4]
      s_fp_sub (b, a, c);
  41d598:	463a      	mov	r2, r7
  41d59a:	4631      	mov	r1, r6
  41d59c:	4628      	mov	r0, r5
  41d59e:	f7fa fe29 	bl	4181f4 <.LFE20>

0041d5a2 <.LVL135>:
  41d5a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

Disassembly of section .text.pic32c_RNG_GenerateBlock%309:

0041d5a4 <pic32c_RNG_GenerateBlock>:


/* sz is number of bytes */
int pic32c_RNG_GenerateBlock(byte* output, word32 sz)
{
    while (sz)
  41d5a4:	b1e1      	cbz	r1, 41d5e0 <.LCFI3>
{
  41d5a6:	b530      	push	{r4, r5, lr}

0041d5a8 <.LCFI0>:
  41d5a8:	b083      	sub	sp, #12

0041d5aa <.LCFI1>:
  41d5aa:	4605      	mov	r5, r0
  41d5ac:	460a      	mov	r2, r1

0041d5ae <.LBB11>:
    {
        /* get 32 bits - BLOCKING */
        while (!(TRNG_REGS->TRNG_ISR & TRNG_ISR_DATRDY_Msk))
  41d5ae:	4c0d      	ldr	r4, [pc, #52]	; (41d5e4 <.LVL8+0x2>)
  41d5b0:	e007      	b.n	41d5c2 <.LBB14>

0041d5b2 <.LVL2>:
        uint32_t result = TRNG_REGS->TRNG_ODATA;

        /* stuff the data into the output buffer. Watch for buffer overrun */
        if (sz < RNG_BYTES_AT_A_TIME)
        {
            memcpy((void *)output, (void*)&result, sz);
  41d5b2:	a901      	add	r1, sp, #4
  41d5b4:	4628      	mov	r0, r5
  41d5b6:	f7f9 f967 	bl	416888 <memcpy>

0041d5ba <.LVL3>:
            sz = 0;
  41d5ba:	2200      	movs	r2, #0

0041d5bc <.LBB12>:
  __ASM volatile ("dmb 0xF":::"memory");
  41d5bc:	f3bf 8f5f 	dmb	sy

0041d5c0 <.LBE11>:
    while (sz)
  41d5c0:	b15a      	cbz	r2, 41d5da <.LBE14>

0041d5c2 <.LBB14>:
        while (!(TRNG_REGS->TRNG_ISR & TRNG_ISR_DATRDY_Msk))
  41d5c2:	69e3      	ldr	r3, [r4, #28]
  41d5c4:	f013 0f01 	tst.w	r3, #1
  41d5c8:	d0fb      	beq.n	41d5c2 <.LBB14>
        uint32_t result = TRNG_REGS->TRNG_ODATA;
  41d5ca:	6d23      	ldr	r3, [r4, #80]	; 0x50
  41d5cc:	9301      	str	r3, [sp, #4]
        if (sz < RNG_BYTES_AT_A_TIME)
  41d5ce:	2a03      	cmp	r2, #3
  41d5d0:	d9ef      	bls.n	41d5b2 <.LVL2>
        }
        else
        {
            memcpy((void *)output, (void*)&result, RNG_BYTES_AT_A_TIME);
  41d5d2:	f845 3b04 	str.w	r3, [r5], #4
            sz -= RNG_BYTES_AT_A_TIME;
  41d5d6:	3a04      	subs	r2, #4

0041d5d8 <.LVL6>:
  41d5d8:	e7f0      	b.n	41d5bc <.LBB12>

0041d5da <.LBE14>:
        /* memory barrier */
        __DMB();
    }

    return 0;
}
  41d5da:	2000      	movs	r0, #0
  41d5dc:	b003      	add	sp, #12

0041d5de <.LCFI2>:
  41d5de:	bd30      	pop	{r4, r5, pc}

0041d5e0 <.LCFI3>:
  41d5e0:	2000      	movs	r0, #0

0041d5e2 <.LVL8>:
  41d5e2:	4770      	bx	lr
  41d5e4:	40070000 	.word	0x40070000

Disassembly of section .rodata%310:

0041d5e8 <.LC5-0x24>:
  41d5e8:	00464e49 	.word	0x00464e49
  41d5ec:	00666e69 	.word	0x00666e69
  41d5f0:	004e414e 	.word	0x004e414e
  41d5f4:	006e616e 	.word	0x006e616e
  41d5f8:	33323130 	.word	0x33323130
  41d5fc:	37363534 	.word	0x37363534
  41d600:	42413938 	.word	0x42413938
  41d604:	46454443 	.word	0x46454443
  41d608:	00000000 	.word	0x00000000

0041d60c <.LC5>:
  41d60c:	33323130 	.word	0x33323130
  41d610:	37363534 	.word	0x37363534
  41d614:	62613938 	.word	0x62613938
  41d618:	66656463 	.word	0x66656463
  41d61c:	00000000 	.word	0x00000000

0041d620 <.LC6>:
  41d620:	6c756e28 	.word	0x6c756e28
  41d624:	0000296c 	.word	0x0000296c
  41d628:	0030      	.short	0x0030
  41d62a:	bf00      	nop

Disassembly of section .text.NVIC_Initialize%311:

0041d62c <NVIC_Initialize>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  41d62c:	4b0d      	ldr	r3, [pc, #52]	; (41d664 <.LVL11+0x2>)
  41d62e:	68d9      	ldr	r1, [r3, #12]

0041d630 <.LVL1>:
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  41d630:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700

0041d634 <.LVL2>:
  41d634:	0409      	lsls	r1, r1, #16
  41d636:	0c09      	lsrs	r1, r1, #16

0041d638 <.LVL3>:
  reg_value  =  (reg_value                                   |
  41d638:	4a0b      	ldr	r2, [pc, #44]	; (41d668 <.LVL11+0x6>)
  41d63a:	430a      	orrs	r2, r1

0041d63c <.LVL4>:
  SCB->AIRCR =  reg_value;
  41d63c:	60da      	str	r2, [r3, #12]

0041d63e <.LBB24>:
  41d63e:	f3bf 8f5f 	dmb	sy

0041d642 <.LBB26>:
  __ASM volatile ("cpsie i" : : : "memory");
  41d642:	b662      	cpsie	i

0041d644 <.LBB28>:
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  41d644:	22e0      	movs	r2, #224	; 0xe0
  41d646:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

0041d64a <.LBB30>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  41d64a:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
  41d64e:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e

0041d652 <.LBB32>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  41d652:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  41d656:	6019      	str	r1, [r3, #0]

0041d658 <.LBB34>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  41d658:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317

0041d65c <.LBB36>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  41d65c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  41d660:	601a      	str	r2, [r3, #0]

0041d662 <.LVL11>:
  41d662:	4770      	bx	lr
  41d664:	e000ed00 	.word	0xe000ed00
  41d668:	05fa0400 	.word	0x05fa0400

Disassembly of section .text.wc_ecc_new_point_h%312:

0041d66c <wc_ecc_new_point_h>:
{
  41d66c:	b510      	push	{r4, lr}

0041d66e <.LCFI27>:
  41d66e:	b082      	sub	sp, #8

0041d670 <.LCFI28>:
   p = (ecc_point*)XMALLOC(sizeof(ecc_point), heap, DYNAMIC_TYPE_ECC);
  41d670:	f44f 60cf 	mov.w	r0, #1656	; 0x678

0041d674 <.LVL512>:
  41d674:	f001 f9a6 	bl	41e9c4 <.LFE180>

0041d678 <.LVL513>:
   if (p == NULL) {
  41d678:	4604      	mov	r4, r0
  41d67a:	b178      	cbz	r0, 41d69c <.LVL516>
   XMEMSET(p, 0, sizeof(ecc_point));
  41d67c:	f44f 62cf 	mov.w	r2, #1656	; 0x678
  41d680:	2100      	movs	r1, #0
  41d682:	f7fc ffb5 	bl	41a5f0 <.LFE157>

0041d686 <.LVL514>:
   if (mp_init_multi(p->x, p->y, p->z, NULL, NULL, NULL) != MP_OKAY) {
  41d686:	2300      	movs	r3, #0
  41d688:	9301      	str	r3, [sp, #4]
  41d68a:	9300      	str	r3, [sp, #0]
  41d68c:	f504 628a 	add.w	r2, r4, #1104	; 0x450
  41d690:	f504 710a 	add.w	r1, r4, #552	; 0x228
  41d694:	4620      	mov	r0, r4
  41d696:	f000 f8e9 	bl	41d86c <mp_init_multi>

0041d69a <.LVL515>:
  41d69a:	b910      	cbnz	r0, 41d6a2 <.LBB23>

0041d69c <.LVL516>:
}
  41d69c:	4620      	mov	r0, r4
  41d69e:	b002      	add	sp, #8

0041d6a0 <.LCFI29>:
  41d6a0:	bd10      	pop	{r4, pc}

0041d6a2 <.LBB23>:
      XFREE(p, heap, DYNAMIC_TYPE_ECC);
  41d6a2:	4620      	mov	r0, r4
  41d6a4:	f001 f99a 	bl	41e9dc <.LFE2>

0041d6a8 <.LBE23>:
      return NULL;
  41d6a8:	2400      	movs	r4, #0

0041d6aa <.LVL519>:
  41d6aa:	e7f7      	b.n	41d69c <.LVL516>

Disassembly of section .text.fp_montgomery_setup%313:

0041d6ac <fp_montgomery_setup>:
  b = a->dp[0];
  41d6ac:	6883      	ldr	r3, [r0, #8]

0041d6ae <.LVL148>:
  if ((b & 1) == 0) {
  41d6ae:	f013 0f01 	tst.w	r3, #1
  41d6b2:	d018      	beq.n	41d6e6 <.LVL157>
  x = (((b + 2) & 4) << 1) + b; /* here x*a==1 mod 2**4 */
  41d6b4:	1c9a      	adds	r2, r3, #2
  41d6b6:	0052      	lsls	r2, r2, #1
  41d6b8:	f002 0208 	and.w	r2, r2, #8
  41d6bc:	441a      	add	r2, r3

0041d6be <.LVL149>:
  x *= 2 - b * x;               /* here x*a==1 mod 2**8 */
  41d6be:	fb02 f003 	mul.w	r0, r2, r3

0041d6c2 <.LVL150>:
  41d6c2:	f1c0 0002 	rsb	r0, r0, #2
  41d6c6:	fb00 f002 	mul.w	r0, r0, r2

0041d6ca <.LVL151>:
  x *= 2 - b * x;               /* here x*a==1 mod 2**16 */
  41d6ca:	fb00 f203 	mul.w	r2, r0, r3
  41d6ce:	f1c2 0202 	rsb	r2, r2, #2
  41d6d2:	fb02 f200 	mul.w	r2, r2, r0

0041d6d6 <.LVL152>:
  x *= 2 - b * x;               /* here x*a==1 mod 2**32 */
  41d6d6:	fb02 f303 	mul.w	r3, r2, r3

0041d6da <.LVL153>:
  41d6da:	3b02      	subs	r3, #2

0041d6dc <.LVL154>:
  *rho = (fp_digit) (((fp_word) 1 << ((fp_word) DIGIT_BIT)) - ((fp_word)x));
  41d6dc:	fb03 f302 	mul.w	r3, r3, r2

0041d6e0 <.LVL155>:
  41d6e0:	600b      	str	r3, [r1, #0]

0041d6e2 <.LVL156>:
  return FP_OKAY;
  41d6e2:	2000      	movs	r0, #0
  41d6e4:	4770      	bx	lr

0041d6e6 <.LVL157>:
    return FP_VAL;
  41d6e6:	f04f 30ff 	mov.w	r0, #4294967295

0041d6ea <.LVL158>:
}
  41d6ea:	4770      	bx	lr

Disassembly of section .rodata.dbase.6482%314:

0041d6ec <dbase.6482>:
  41d6ec:	0001 0002 0003 0004 0005 0007 0009 000d     ................
  41d6fc:	0011 0019 0021 0031 0041 0061 0081 00c1     ....!.1.A.a.....
  41d70c:	0101 0181 0201 0301 0401 0601 0801 0c01     ................
  41d71c:	1001 1801 2001 3001 4001 6001 0000 0000     ..... .0.@.`....

Disassembly of section .rodata.dext.6483%315:

0041d72c <dext.6483>:
  41d72c:	0010 0010 0010 0010 0011 0011 0012 0012     ................
  41d73c:	0013 0013 0014 0014 0015 0015 0016 0016     ................
  41d74c:	0017 0017 0018 0018 0019 0019 001a 001a     ................
  41d75c:	001b 001b 001c 001c 001d 001d 0040 0040     ............@.@.

Disassembly of section .rodata.lbase.6480%316:

0041d76c <lbase.6480>:
  41d76c:	0003 0004 0005 0006 0007 0008 0009 000a     ................
  41d77c:	000b 000d 000f 0011 0013 0017 001b 001f     ................
  41d78c:	0023 002b 0033 003b 0043 0053 0063 0073     #.+.3.;.C.S.c.s.
  41d79c:	0083 00a3 00c3 00e3 0102 0000 0000 bf00     ................

Disassembly of section .rodata.lext.6481%317:

0041d7ac <lext.6481>:
  41d7ac:	0010 0010 0010 0010 0010 0010 0010 0010     ................
  41d7bc:	0011 0011 0011 0011 0012 0012 0012 0012     ................
  41d7cc:	0013 0013 0013 0013 0014 0014 0014 0014     ................
  41d7dc:	0015 0015 0015 0015 0010 004e 0044 bf00     ..........N.D...

Disassembly of section .rodata.sha_padding%318:

0041d7ec <sha_padding>:
  41d7ec:	0080 0000 0000 0000 0000 0000 0000 0000     ................
	...

Disassembly of section .text.__hi0bits%319:

0041d82c <__hi0bits>:
  41d82c:	0c02      	lsrs	r2, r0, #16
  41d82e:	0412      	lsls	r2, r2, #16
  41d830:	4603      	mov	r3, r0
  41d832:	b9b2      	cbnz	r2, 41d862 <.LVL75>

0041d834 <.LVL63>:
  41d834:	0403      	lsls	r3, r0, #16

0041d836 <.LVL64>:
  41d836:	2010      	movs	r0, #16

0041d838 <.LVL65>:
  41d838:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  41d83c:	bf04      	itt	eq
  41d83e:	021b      	lsleq	r3, r3, #8

0041d840 <.LVL66>:
  41d840:	3008      	addeq	r0, #8

0041d842 <.LVL67>:
  41d842:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  41d846:	bf04      	itt	eq
  41d848:	011b      	lsleq	r3, r3, #4

0041d84a <.LVL68>:
  41d84a:	3004      	addeq	r0, #4

0041d84c <.LVL69>:
  41d84c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  41d850:	bf04      	itt	eq
  41d852:	009b      	lsleq	r3, r3, #2

0041d854 <.LVL70>:
  41d854:	3002      	addeq	r0, #2

0041d856 <.LVL71>:
  41d856:	2b00      	cmp	r3, #0
  41d858:	db02      	blt.n	41d860 <.LVL74>

0041d85a <.LVL72>:
  41d85a:	005b      	lsls	r3, r3, #1

0041d85c <.LVL73>:
  41d85c:	d403      	bmi.n	41d866 <.LVL77>
  41d85e:	2020      	movs	r0, #32

0041d860 <.LVL74>:
  41d860:	4770      	bx	lr

0041d862 <.LVL75>:
  41d862:	2000      	movs	r0, #0

0041d864 <.LVL76>:
  41d864:	e7e8      	b.n	41d838 <.LVL65>

0041d866 <.LVL77>:
  41d866:	3001      	adds	r0, #1

0041d868 <.LVL78>:
  41d868:	4770      	bx	lr

0041d86a <.LFE21>:
  41d86a:	bf00      	nop

Disassembly of section .text.mp_init_multi%320:

0041d86c <mp_init_multi>:
{
  41d86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041d86e <.LCFI50>:
  41d86e:	460d      	mov	r5, r1
  41d870:	4617      	mov	r7, r2
  41d872:	461e      	mov	r6, r3
  41d874:	9c07      	ldr	r4, [sp, #28]
    if (a)
  41d876:	b108      	cbz	r0, 41d87c <.LBE36>

0041d878 <.LBB36>:
    fp_zero(a);
  41d878:	f001 f958 	bl	41eb2c <.LFE154>

0041d87c <.LBE36>:
    if (b)
  41d87c:	b115      	cbz	r5, 41d884 <.LBE38>

0041d87e <.LBB38>:
    fp_zero(a);
  41d87e:	4628      	mov	r0, r5
  41d880:	f001 f954 	bl	41eb2c <.LFE154>

0041d884 <.LBE38>:
    if (c)
  41d884:	b117      	cbz	r7, 41d88c <.LBE40>

0041d886 <.LBB40>:
    fp_zero(a);
  41d886:	4638      	mov	r0, r7
  41d888:	f001 f950 	bl	41eb2c <.LFE154>

0041d88c <.LBE40>:
    if (d)
  41d88c:	b116      	cbz	r6, 41d894 <.LBE42>

0041d88e <.LBB42>:
    fp_zero(a);
  41d88e:	4630      	mov	r0, r6
  41d890:	f001 f94c 	bl	41eb2c <.LFE154>

0041d894 <.LBE42>:
    if (e)
  41d894:	9b06      	ldr	r3, [sp, #24]
  41d896:	b113      	cbz	r3, 41d89e <.LBE44>

0041d898 <.LBB44>:
    fp_zero(a);
  41d898:	4618      	mov	r0, r3
  41d89a:	f001 f947 	bl	41eb2c <.LFE154>

0041d89e <.LBE44>:
    if (f)
  41d89e:	b114      	cbz	r4, 41d8a6 <.LBE46>

0041d8a0 <.LBB46>:
    fp_zero(a);
  41d8a0:	4620      	mov	r0, r4
  41d8a2:	f001 f943 	bl	41eb2c <.LFE154>

0041d8a6 <.LBE46>:
}
  41d8a6:	2000      	movs	r0, #0
  41d8a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

Disassembly of section .text.wc_ShaHash%321:

0041d8aa <wc_ShaHash>:
    {
  41d8aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

0041d8ae <.LCFI11>:
  41d8ae:	af00      	add	r7, sp, #0

0041d8b0 <.LCFI12>:
  41d8b0:	4680      	mov	r8, r0
  41d8b2:	4689      	mov	r9, r1
  41d8b4:	4616      	mov	r6, r2
  41d8b6:	b0e0      	sub	sp, #384	; 0x180
  41d8b8:	f10d 047f 	add.w	r4, sp, #127	; 0x7f
  41d8bc:	f024 047f 	bic.w	r4, r4, #127	; 0x7f

0041d8c0 <.LVL88>:
        if ((ret = wc_InitSha(sha)) != 0) {
  41d8c0:	4620      	mov	r0, r4

0041d8c2 <.LVL89>:
  41d8c2:	f7ff f861 	bl	41c988 <.LFE19>

0041d8c6 <.LVL90>:
  41d8c6:	4605      	mov	r5, r0
  41d8c8:	b118      	cbz	r0, 41d8d2 <.LCFI14>

0041d8ca <.LVL91>:
    }
  41d8ca:	4628      	mov	r0, r5
  41d8cc:	46bd      	mov	sp, r7

0041d8ce <.LCFI13>:
  41d8ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0041d8d2 <.LCFI14>:
            wc_ShaUpdate(sha, data, len);
  41d8d2:	464a      	mov	r2, r9
  41d8d4:	4641      	mov	r1, r8
  41d8d6:	4620      	mov	r0, r4

0041d8d8 <.LVL93>:
  41d8d8:	f7fd fc53 	bl	41b182 <.LFE58>

0041d8dc <.LVL94>:
            wc_ShaFinal(sha, hash);
  41d8dc:	4631      	mov	r1, r6
  41d8de:	4620      	mov	r0, r4
  41d8e0:	f7fd f922 	bl	41ab28 <.LFE171>

0041d8e4 <.LVL95>:
        return ret;
  41d8e4:	e7f1      	b.n	41d8ca <.LVL91>

Disassembly of section .text.fp_2expt%322:

0041d8e6 <fp_2expt>:
{
  41d8e6:	b538      	push	{r3, r4, r5, lr}

0041d8e8 <.LCFI33>:
  41d8e8:	4605      	mov	r5, r0
  41d8ea:	460c      	mov	r4, r1
   fp_zero (a);
  41d8ec:	f001 f91e 	bl	41eb2c <.LFE154>

0041d8f0 <.LVL276>:
   if (b < 0) {
  41d8f0:	2c00      	cmp	r4, #0
  41d8f2:	db15      	blt.n	41d920 <.LVL280>
   z = b / DIGIT_BIT;
  41d8f4:	4623      	mov	r3, r4
  41d8f6:	bfb8      	it	lt
  41d8f8:	f104 031f 	addlt.w	r3, r4, #31
  41d8fc:	115b      	asrs	r3, r3, #5

0041d8fe <.LVL277>:
   if (z >= FP_SIZE) {
  41d8fe:	2b87      	cmp	r3, #135	; 0x87
  41d900:	dc0e      	bgt.n	41d920 <.LVL280>
  a->used = z + 1;
  41d902:	1c5a      	adds	r2, r3, #1
  41d904:	602a      	str	r2, [r5, #0]
  a->dp[z] = ((fp_digit)1) << (b % DIGIT_BIT);
  41d906:	3302      	adds	r3, #2

0041d908 <.LVL278>:
  41d908:	4262      	negs	r2, r4
  41d90a:	f004 041f 	and.w	r4, r4, #31

0041d90e <.LVL279>:
  41d90e:	f002 021f 	and.w	r2, r2, #31
  41d912:	bf58      	it	pl
  41d914:	4254      	negpl	r4, r2
  41d916:	2201      	movs	r2, #1
  41d918:	fa02 f404 	lsl.w	r4, r2, r4
  41d91c:	f845 4023 	str.w	r4, [r5, r3, lsl #2]

0041d920 <.LVL280>:
  41d920:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section .text.Console_UART_Flush%323:

0041d924 <Console_UART_Flush>:
    if (consUartData.state != CONSOLE_UART_STATE_INIT)
  41d924:	4b0b      	ldr	r3, [pc, #44]	; (41d954 <Console_UART_Flush+0x30>)
  41d926:	781b      	ldrb	r3, [r3, #0]
  41d928:	b113      	cbz	r3, 41d930 <Console_UART_Flush+0xc>
        consUartData.state = CONSOLE_UART_STATE_READY;
  41d92a:	2202      	movs	r2, #2
  41d92c:	4b09      	ldr	r3, [pc, #36]	; (41d954 <Console_UART_Flush+0x30>)
  41d92e:	701a      	strb	r2, [r3, #0]
    consUartData.overflowFlag = false;
  41d930:	4a08      	ldr	r2, [pc, #32]	; (41d954 <Console_UART_Flush+0x30>)
  41d932:	2300      	movs	r3, #0
  41d934:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
    consUartData.isWriteComplete = true;
  41d938:	2001      	movs	r0, #1
  41d93a:	f882 0045 	strb.w	r0, [r2, #69]	; 0x45
    writeQueue.nextPos = 0;
  41d93e:	4906      	ldr	r1, [pc, #24]	; (41d958 <Console_UART_Flush+0x34>)
  41d940:	604b      	str	r3, [r1, #4]
    writeQueue.tailPos = 0;
  41d942:	600b      	str	r3, [r1, #0]
    writeQueue.numElem = 0;
  41d944:	608b      	str	r3, [r1, #8]
    consUartData.isReadComplete = true;
  41d946:	f882 0044 	strb.w	r0, [r2, #68]	; 0x44
    readQueue.nextPos = 0;
  41d94a:	4a04      	ldr	r2, [pc, #16]	; (41d95c <Console_UART_Flush+0x38>)
  41d94c:	6053      	str	r3, [r2, #4]
    readQueue.tailPos = 0;
  41d94e:	6013      	str	r3, [r2, #0]
    readQueue.numElem = 0;
  41d950:	6093      	str	r3, [r2, #8]
  41d952:	4770      	bx	lr
  41d954:	20417638 	.word	0x20417638
  41d958:	20417808 	.word	0x20417808
  41d95c:	204177f4 	.word	0x204177f4

Disassembly of section .text.SYS_TIME_GetTimerObject%324:

0041d960 <SYS_TIME_GetTimerObject>:
    if ((handle != SYS_TIME_HANDLE_INVALID) && (handle != 0))
  41d960:	1e43      	subs	r3, r0, #1
  41d962:	f113 0f03 	cmn.w	r3, #3
  41d966:	d80f      	bhi.n	41d988 <.LVL5>
        if ((handle & _SYS_TIME_INDEX_MASK) < SYS_TIME_MAX_TIMERS)
  41d968:	b283      	uxth	r3, r0
  41d96a:	2b09      	cmp	r3, #9
  41d96c:	d80e      	bhi.n	41d98c <.LVL7>

0041d96e <.LVL1>:
            if ((timerObj->tmrHandle == handle) && (timerObj->inUse == true))
  41d96e:	4a0a      	ldr	r2, [pc, #40]	; (41d998 <.LVL12+0x2>)
  41d970:	eb02 1243 	add.w	r2, r2, r3, lsl #5
  41d974:	69d2      	ldr	r2, [r2, #28]
  41d976:	4290      	cmp	r0, r2
  41d978:	d10a      	bne.n	41d990 <.LVL9>
  41d97a:	015a      	lsls	r2, r3, #5

0041d97c <.LVL2>:
  41d97c:	4906      	ldr	r1, [pc, #24]	; (41d998 <.LVL12+0x2>)
  41d97e:	5c8a      	ldrb	r2, [r1, r2]

0041d980 <.LVL3>:
  41d980:	b142      	cbz	r2, 41d994 <.LVL11>
            timerObj = &timers[handle & _SYS_TIME_INDEX_MASK];
  41d982:	eb01 1043 	add.w	r0, r1, r3, lsl #5

0041d986 <.LVL4>:
                return timerObj;
  41d986:	4770      	bx	lr

0041d988 <.LVL5>:
    return NULL;
  41d988:	2000      	movs	r0, #0

0041d98a <.LVL6>:
  41d98a:	4770      	bx	lr

0041d98c <.LVL7>:
  41d98c:	2000      	movs	r0, #0

0041d98e <.LVL8>:
  41d98e:	4770      	bx	lr

0041d990 <.LVL9>:
  41d990:	2000      	movs	r0, #0

0041d992 <.LVL10>:
  41d992:	4770      	bx	lr

0041d994 <.LVL11>:
  41d994:	2000      	movs	r0, #0

0041d996 <.LVL12>:
}
  41d996:	4770      	bx	lr
  41d998:	204173f4 	.word	0x204173f4

Disassembly of section .text.SYS_TIME_ResourceUnlock%325:

0041d99c <SYS_TIME_ResourceUnlock>:
{
  41d99c:	b508      	push	{r3, lr}

0041d99e <.LCFI10>:
    SYS_INT_SourceEnable(gSystemCounterObj.hwTimerIntNum);
  41d99e:	4b0b      	ldr	r3, [pc, #44]	; (41d9cc <.LVL96+0x2>)
  41d9a0:	f993 3008 	ldrsb.w	r3, [r3, #8]

0041d9a4 <.LBB12>:
  if ((int32_t)(IRQn) >= 0)
  41d9a4:	2b00      	cmp	r3, #0
  41d9a6:	db08      	blt.n	41d9ba <.LBE12>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  41d9a8:	0959      	lsrs	r1, r3, #5
  41d9aa:	f003 031f 	and.w	r3, r3, #31

0041d9ae <.LVL94>:
  41d9ae:	2201      	movs	r2, #1
  41d9b0:	fa02 f303 	lsl.w	r3, r2, r3
  41d9b4:	4a06      	ldr	r2, [pc, #24]	; (41d9d0 <.LVL96+0x6>)
  41d9b6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

0041d9ba <.LBE12>:
    if(gSystemCounterObj.interruptNestingCount == 0)
  41d9ba:	4b04      	ldr	r3, [pc, #16]	; (41d9cc <.LVL96+0x2>)
  41d9bc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
  41d9c0:	b103      	cbz	r3, 41d9c4 <.LBE12+0xa>
  41d9c2:	bd08      	pop	{r3, pc}
        OSAL_MUTEX_Unlock(&gSystemCounterObj.timerMutex);
  41d9c4:	4803      	ldr	r0, [pc, #12]	; (41d9d4 <.LVL96+0xa>)
  41d9c6:	f000 ff6d 	bl	41e8a4 <.LFE12>

0041d9ca <.LVL96>:
}
  41d9ca:	e7fa      	b.n	41d9c2 <.LBE12+0x8>
  41d9cc:	20417688 	.word	0x20417688
  41d9d0:	e000e100 	.word	0xe000e100
  41d9d4:	204176bc 	.word	0x204176bc

Disassembly of section .text.SYS_TIME_TimerDestroy%326:

0041d9d8 <SYS_TIME_TimerDestroy>:
    SYS_TIME_ResourceUnlock();
    return result;
}

SYS_TIME_RESULT SYS_TIME_TimerDestroy(SYS_TIME_HANDLE handle)
{
  41d9d8:	b510      	push	{r4, lr}

0041d9da <.LCFI23>:
  41d9da:	4604      	mov	r4, r0

0041d9dc <.LVL195>:
    SYS_TIME_TIMER_OBJ *tmr = NULL;
    SYS_TIME_RESULT result = SYS_TIME_ERROR;

    if (SYS_TIME_ResourceLock() == false)
  41d9dc:	f000 f938 	bl	41dc50 <.LFE142>

0041d9e0 <.LVL196>:
  41d9e0:	b1b0      	cbz	r0, 41da10 <.LVL206>
    {
        return result;
    }

    tmr = SYS_TIME_GetTimerObject(handle);
  41d9e2:	4620      	mov	r0, r4
  41d9e4:	f7ff ffbc 	bl	41d960 <.LFE161>

0041d9e8 <.LVL197>:

    if(tmr != NULL)
  41d9e8:	4604      	mov	r4, r0

0041d9ea <.LVL198>:
  41d9ea:	b178      	cbz	r0, 41da0c <.LVL205>
    {
        if(tmr->active == true)
  41d9ec:	7843      	ldrb	r3, [r0, #1]
  41d9ee:	b943      	cbnz	r3, 41da02 <.LVL203>

0041d9f0 <.LVL199>:
        {
            SYS_TIME_RemoveFromList(tmr);
            tmr->active = false;
        }
        tmr->tmrElapsedFlag = false;
  41d9f0:	2000      	movs	r0, #0
  41d9f2:	7520      	strb	r0, [r4, #20]
        tmr->tmrElapsed = false;
  41d9f4:	7560      	strb	r0, [r4, #21]
        tmr->inUse = false;
  41d9f6:	7020      	strb	r0, [r4, #0]

0041d9f8 <.LVL200>:
        result = SYS_TIME_SUCCESS;
  41d9f8:	4604      	mov	r4, r0

0041d9fa <.LVL201>:
    }

    SYS_TIME_ResourceUnlock();
  41d9fa:	f7ff ffcf 	bl	41d99c <.LFE149>

0041d9fe <.LVL202>:
    return result;
}
  41d9fe:	4620      	mov	r0, r4
  41da00:	bd10      	pop	{r4, pc}

0041da02 <.LVL203>:
            SYS_TIME_RemoveFromList(tmr);
  41da02:	f7ff fac5 	bl	41cf90 <SYS_TIME_RemoveFromList>

0041da06 <.LVL204>:
            tmr->active = false;
  41da06:	2300      	movs	r3, #0
  41da08:	7063      	strb	r3, [r4, #1]
  41da0a:	e7f1      	b.n	41d9f0 <.LVL199>

0041da0c <.LVL205>:
    SYS_TIME_RESULT result = SYS_TIME_ERROR;
  41da0c:	2401      	movs	r4, #1
  41da0e:	e7f4      	b.n	41d9fa <.LVL201>

0041da10 <.LVL206>:
        return result;
  41da10:	2401      	movs	r4, #1

0041da12 <.LVL207>:
  41da12:	e7f4      	b.n	41d9fe <.LVL202>

Disassembly of section .text.USART1_Initialize%327:

0041da14 <USART1_Initialize>:
    USART1_REGS->US_CR = (US_CR_RSTRX_Msk | US_CR_RSTTX_Msk | US_CR_RSTSTA_Msk);
  41da14:	4b0c      	ldr	r3, [pc, #48]	; (41da48 <.LFE177+0x34>)
  41da16:	f44f 7286 	mov.w	r2, #268	; 0x10c
  41da1a:	601a      	str	r2, [r3, #0]
    USART1_REGS->US_CR = (US_CR_TXEN_Msk | US_CR_RXEN_Msk);
  41da1c:	2250      	movs	r2, #80	; 0x50
  41da1e:	601a      	str	r2, [r3, #0]
    USART1_REGS->US_MR = ((US_MR_USCLKS_MCK) | (0 << US_MR_MODE9_Pos) | US_MR_CHRL_8_BIT | US_MR_PAR_NO | US_MR_NBSTOP_1_BIT | (0 << US_MR_OVER_Pos));
  41da20:	f44f 620c 	mov.w	r2, #2240	; 0x8c0
  41da24:	605a      	str	r2, [r3, #4]
    USART1_REGS->US_BRGR = US_BRGR_CD(81);
  41da26:	2251      	movs	r2, #81	; 0x51
  41da28:	621a      	str	r2, [r3, #32]
    usart1Obj.rxBuffer = NULL;
  41da2a:	4b08      	ldr	r3, [pc, #32]	; (41da4c <.LFE177+0x38>)
  41da2c:	2200      	movs	r2, #0
  41da2e:	619a      	str	r2, [r3, #24]
    usart1Obj.rxSize = 0;
  41da30:	61da      	str	r2, [r3, #28]
    usart1Obj.rxProcessedSize = 0;
  41da32:	621a      	str	r2, [r3, #32]
    usart1Obj.rxBusyStatus = false;
  41da34:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    usart1Obj.rxCallback = NULL;
  41da38:	625a      	str	r2, [r3, #36]	; 0x24
    usart1Obj.txBuffer = NULL;
  41da3a:	601a      	str	r2, [r3, #0]
    usart1Obj.txSize = 0;
  41da3c:	605a      	str	r2, [r3, #4]
    usart1Obj.txProcessedSize = 0;
  41da3e:	609a      	str	r2, [r3, #8]
    usart1Obj.txBusyStatus = false;
  41da40:	751a      	strb	r2, [r3, #20]
    usart1Obj.txCallback = NULL;
  41da42:	60da      	str	r2, [r3, #12]
  41da44:	4770      	bx	lr
  41da46:	bf00      	nop
  41da48:	40028000 	.word	0x40028000
  41da4c:	20400020 	.word	0x20400020

Disassembly of section .text.USART1_Read%328:

0041da50 <USART1_Read>:
    if(NULL != lBuffer)
  41da50:	b1a0      	cbz	r0, 41da7c <.LCFI6>
{
  41da52:	b538      	push	{r3, r4, r5, lr}

0041da54 <.LCFI5>:
  41da54:	4605      	mov	r5, r0
  41da56:	460c      	mov	r4, r1
        USART1_ErrorGet();
  41da58:	f000 fa80 	bl	41df5c <.LFE6>

0041da5c <.LVL27>:
        if(usart1Obj.rxBusyStatus == false)
  41da5c:	4b09      	ldr	r3, [pc, #36]	; (41da84 <.LVL33>)
  41da5e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
  41da62:	b96b      	cbnz	r3, 41da80 <.LCFI7>
            usart1Obj.rxBuffer = lBuffer;
  41da64:	4b07      	ldr	r3, [pc, #28]	; (41da84 <.LVL33>)
  41da66:	619d      	str	r5, [r3, #24]
            usart1Obj.rxSize = size;
  41da68:	61dc      	str	r4, [r3, #28]
            usart1Obj.rxProcessedSize = 0;
  41da6a:	2200      	movs	r2, #0
  41da6c:	621a      	str	r2, [r3, #32]
            usart1Obj.rxBusyStatus = true;
  41da6e:	2001      	movs	r0, #1
  41da70:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c

0041da74 <.LVL28>:
            USART1_REGS->US_IER = (US_IER_RXRDY_Msk | US_IER_FRAME_Msk | US_IER_PARE_Msk | US_IER_OVRE_Msk);
  41da74:	22e1      	movs	r2, #225	; 0xe1
  41da76:	4b04      	ldr	r3, [pc, #16]	; (41da88 <.LVL33+0x4>)
  41da78:	609a      	str	r2, [r3, #8]
  41da7a:	bd38      	pop	{r3, r4, r5, pc}

0041da7c <.LCFI6>:
    bool status = false;
  41da7c:	2000      	movs	r0, #0

0041da7e <.LVL30>:
  41da7e:	4770      	bx	lr

0041da80 <.LCFI7>:
  41da80:	2000      	movs	r0, #0

0041da82 <.LVL32>:
}
  41da82:	bd38      	pop	{r3, r4, r5, pc}

0041da84 <.LVL33>:
  41da84:	20400020 	.word	0x20400020
  41da88:	40028000 	.word	0x40028000

Disassembly of section .text.wc_AesSetIV%329:

0041da8c <wc_AesSetIV>:
    if (iv)
  41da8c:	b181      	cbz	r1, 41dab0 <.LVL14>
{
  41da8e:	b430      	push	{r4, r5}

0041da90 <.LCFI2>:
  41da90:	460b      	mov	r3, r1
        memcpy((void*)aes->iv_ce, (void*)iv, AES_BLOCK_SIZE);
  41da92:	680d      	ldr	r5, [r1, #0]
  41da94:	684c      	ldr	r4, [r1, #4]
  41da96:	6889      	ldr	r1, [r1, #8]

0041da98 <.LVL11>:
  41da98:	68db      	ldr	r3, [r3, #12]

0041da9a <.LVL12>:
  41da9a:	f8c0 514c 	str.w	r5, [r0, #332]	; 0x14c
  41da9e:	f8c0 4150 	str.w	r4, [r0, #336]	; 0x150
  41daa2:	f8c0 1154 	str.w	r1, [r0, #340]	; 0x154
  41daa6:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
}
  41daaa:	2000      	movs	r0, #0

0041daac <.LVL13>:
  41daac:	bc30      	pop	{r4, r5}

0041daae <.LCFI3>:
  41daae:	4770      	bx	lr

0041dab0 <.LVL14>:
        memset((void*)aes->iv_ce, 0, AES_BLOCK_SIZE);
  41dab0:	2300      	movs	r3, #0
  41dab2:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
  41dab6:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
  41daba:	f8c0 3154 	str.w	r3, [r0, #340]	; 0x154
  41dabe:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
}
  41dac2:	2000      	movs	r0, #0

0041dac4 <.LVL15>:
  41dac4:	4770      	bx	lr

Disassembly of section .text.random_test%330:

0041dac8 <random_test>:
{
  41dac8:	b500      	push	{lr}

0041daca <.LCFI49>:
  41daca:	b0cb      	sub	sp, #300	; 0x12c

0041dacc <.LCFI50>:
    appData.random_test_result = 1;
  41dacc:	2201      	movs	r2, #1
  41dace:	4b0b      	ldr	r3, [pc, #44]	; (41dafc <.LVL109+0x10>)
  41dad0:	641a      	str	r2, [r3, #64]	; 0x40
    ret = CRYPT_RNG_Initialize(&rng);
  41dad2:	a808      	add	r0, sp, #32
  41dad4:	f001 f8c6 	bl	41ec64 <.LFE169>

0041dad8 <.LVL107>:
    if (ret == 0) 
  41dad8:	b110      	cbz	r0, 41dae0 <.LCFI52>
}
  41dada:	b04b      	add	sp, #300	; 0x12c

0041dadc <.LCFI51>:
  41dadc:	f85d fb04 	ldr.w	pc, [sp], #4

0041dae0 <.LCFI52>:
        ret = CRYPT_RNG_BlockGenerate(&rng, block, sizeof(block));   
  41dae0:	2220      	movs	r2, #32
  41dae2:	4669      	mov	r1, sp
  41dae4:	eb0d 0002 	add.w	r0, sp, r2

0041dae8 <.LVL108>:
  41dae8:	f000 fd81 	bl	41e5ee <.LFE14>

0041daec <.LVL109>:
        if (ret == 0) 
  41daec:	2800      	cmp	r0, #0
  41daee:	d1f4      	bne.n	41dada <.LVL107+0x2>
            appData.random_test_result--;
  41daf0:	4a02      	ldr	r2, [pc, #8]	; (41dafc <.LVL109+0x10>)
  41daf2:	6c13      	ldr	r3, [r2, #64]	; 0x40
  41daf4:	3b01      	subs	r3, #1
  41daf6:	6413      	str	r3, [r2, #64]	; 0x40
}
  41daf8:	e7ef      	b.n	41dada <.LVL107+0x2>
  41dafa:	bf00      	nop
  41dafc:	20417598 	.word	0x20417598

Disassembly of section .text.SYS_Tasks%331:

0041db00 <SYS_Tasks>:
  Remarks:
    See prototype in system/common/sys_module.h.
*/

void SYS_Tasks ( void )
{
  41db00:	b500      	push	{lr}

0041db02 <.LCFI1>:
  41db02:	b083      	sub	sp, #12

0041db04 <.LCFI2>:
    /* Maintain system services */
    SYS_CONSOLE_Tasks(sysObj.sysConsole0);
  41db04:	4b09      	ldr	r3, [pc, #36]	; (41db2c <.LCFI3+0x6>)
  41db06:	6818      	ldr	r0, [r3, #0]
  41db08:	f000 fe20 	bl	41e74c <.LFE15>

0041db0c <.LVL4>:
    /* Maintain Middleware & Other Libraries */
    

    /* Maintain the application's state machine. */
        /* Create OS Thread for APP_Tasks. */
    xTaskCreate((TaskFunction_t) _APP_Tasks,
  41db0c:	2300      	movs	r3, #0
  41db0e:	9301      	str	r3, [sp, #4]
  41db10:	2201      	movs	r2, #1
  41db12:	9200      	str	r2, [sp, #0]
  41db14:	f44f 6280 	mov.w	r2, #1024	; 0x400
  41db18:	4905      	ldr	r1, [pc, #20]	; (41db30 <.LCFI3+0xa>)
  41db1a:	4806      	ldr	r0, [pc, #24]	; (41db34 <.LCFI3+0xe>)
  41db1c:	f7f7 fbe6 	bl	4152ec <.LFE1>

0041db20 <.LVL5>:
    /* Start RTOS Scheduler. */
    
     /**********************************************************************
     * Create all Threads for APP Tasks before starting FreeRTOS Scheduler *
     ***********************************************************************/
    vTaskStartScheduler(); /* This function never returns. */
  41db20:	f7fe fc12 	bl	41c348 <vTaskStartScheduler>

0041db24 <.LVL6>:

}
  41db24:	b003      	add	sp, #12

0041db26 <.LCFI3>:
  41db26:	f85d fb04 	ldr.w	pc, [sp], #4
  41db2a:	bf00      	nop
  41db2c:	20400000 	.word	0x20400000
  41db30:	0041ed78 	.word	0x0041ed78
  41db34:	0041eb19 	.word	0x0041eb19

Disassembly of section .text.GetMyVersion%332:

0041db38 <GetMyVersion>:
{
  41db38:	b470      	push	{r4, r5, r6}

0041db3a <.LCFI42>:
    word32 idx = *inOutIdx;
  41db3a:	680c      	ldr	r4, [r1, #0]

0041db3c <.LVL270>:
    if ((idx + MIN_VERSION_SZ) > maxIdx)
  41db3c:	1ce5      	adds	r5, r4, #3
  41db3e:	429d      	cmp	r5, r3
  41db40:	d80d      	bhi.n	41db5e <.LCFI44>
    if (input[idx++] != ASN_INTEGER)
  41db42:	1c66      	adds	r6, r4, #1

0041db44 <.LVL271>:
  41db44:	5d03      	ldrb	r3, [r0, r4]

0041db46 <.LVL272>:
  41db46:	2b02      	cmp	r3, #2
  41db48:	d10c      	bne.n	41db64 <.LVL278>
    if (input[idx++] != 0x01)
  41db4a:	3402      	adds	r4, #2

0041db4c <.LVL273>:
  41db4c:	5d83      	ldrb	r3, [r0, r6]
  41db4e:	2b01      	cmp	r3, #1
  41db50:	d10b      	bne.n	41db6a <.LVL280>

0041db52 <.LVL274>:
    *version  = input[idx++];
  41db52:	5d03      	ldrb	r3, [r0, r4]
  41db54:	6013      	str	r3, [r2, #0]
    *inOutIdx = idx;
  41db56:	600d      	str	r5, [r1, #0]
    return *version;
  41db58:	6810      	ldr	r0, [r2, #0]

0041db5a <.LVL275>:
}
  41db5a:	bc70      	pop	{r4, r5, r6}

0041db5c <.LCFI43>:
  41db5c:	4770      	bx	lr

0041db5e <.LCFI44>:
        return ASN_PARSE_E;
  41db5e:	f06f 008b 	mvn.w	r0, #139	; 0x8b

0041db62 <.LVL277>:
  41db62:	e7fa      	b.n	41db5a <.LVL275>

0041db64 <.LVL278>:
        return ASN_PARSE_E;
  41db64:	f06f 008b 	mvn.w	r0, #139	; 0x8b

0041db68 <.LVL279>:
  41db68:	e7f7      	b.n	41db5a <.LVL275>

0041db6a <.LVL280>:
        return ASN_VERSION_E;
  41db6a:	f06f 008c 	mvn.w	r0, #140	; 0x8c

0041db6e <.LVL281>:
  41db6e:	e7f4      	b.n	41db5a <.LVL275>

Disassembly of section .rodata.pc1%333:

0041db70 <pc1>:
  41db70:	3139 2129 1119 0109 323a 222a 121a 020a     91)!....:2*"....
  41db80:	333b 232b 131b 030b 343c 242c 373f 272f     ;3+#....<4,$?7/'
  41db90:	171f 070f 363e 262e 161e 060e 353d 252d     ....>6.&....=5-%
  41dba0:	151d 050d 141c 040c                         ........

Disassembly of section .text.wc_InitMd5_ex%334:

0041dba8 <wc_InitMd5_ex>:
    if (md5 == NULL)
  41dba8:	4603      	mov	r3, r0
  41dbaa:	b1a0      	cbz	r0, 41dbd6 <.LVL328>
    md5->heap = heap;
  41dbac:	65c1      	str	r1, [r0, #92]	; 0x5c

0041dbae <.LBB139>:
    md5->digest[0] = 0x67452301L;
  41dbae:	4a0b      	ldr	r2, [pc, #44]	; (41dbdc <.LVL329+0x2>)

0041dbb0 <.LVL325>:
  41dbb0:	64c2      	str	r2, [r0, #76]	; 0x4c
    md5->digest[1] = 0xefcdab89L;
  41dbb2:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
  41dbb6:	6502      	str	r2, [r0, #80]	; 0x50
    md5->digest[2] = 0x98badcfeL;
  41dbb8:	f102 4229 	add.w	r2, r2, #2835349504	; 0xa9000000
  41dbbc:	f5a2 1296 	sub.w	r2, r2, #1228800	; 0x12c000
  41dbc0:	f6a2 628b 	subw	r2, r2, #3723	; 0xe8b
  41dbc4:	6542      	str	r2, [r0, #84]	; 0x54
    md5->digest[3] = 0x10325476L;
  41dbc6:	f1a2 3288 	sub.w	r2, r2, #2290649224	; 0x88888888
  41dbca:	6582      	str	r2, [r0, #88]	; 0x58
    md5->buffLen = 0;
  41dbcc:	2000      	movs	r0, #0

0041dbce <.LVL326>:
  41dbce:	6018      	str	r0, [r3, #0]
    md5->loLen   = 0;
  41dbd0:	6058      	str	r0, [r3, #4]
    md5->hiLen   = 0;
  41dbd2:	6098      	str	r0, [r3, #8]

0041dbd4 <.LBE139>:
  41dbd4:	4770      	bx	lr

0041dbd6 <.LVL328>:
        return BAD_FUNC_ARG;
  41dbd6:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041dbda <.LVL329>:
}
  41dbda:	4770      	bx	lr
  41dbdc:	67452301 	.word	0x67452301

Disassembly of section .text.fp_to_unsigned_bin_at_pos%335:

0041dbe0 <fp_to_unsigned_bin_at_pos>:
{
  41dbe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0041dbe4 <.LCFI74>:
   while (fp_iszero (t) == FP_NO) {
  41dbe4:	680b      	ldr	r3, [r1, #0]
  41dbe6:	b1ab      	cbz	r3, 41dc14 <.LVL499>
  41dbe8:	460c      	mov	r4, r1
  41dbea:	4605      	mov	r5, r0
  41dbec:	1816      	adds	r6, r2, r0
      fp_div_2d (t, 8, t, NULL);
  41dbee:	f04f 0800 	mov.w	r8, #0
  41dbf2:	2708      	movs	r7, #8

0041dbf4 <.LVL495>:
      b[x++] = (unsigned char) (t->dp[0] & 255);
  41dbf4:	3501      	adds	r5, #1
  41dbf6:	68a3      	ldr	r3, [r4, #8]
  41dbf8:	f806 3b01 	strb.w	r3, [r6], #1
      fp_div_2d (t, 8, t, NULL);
  41dbfc:	4643      	mov	r3, r8
  41dbfe:	4622      	mov	r2, r4
  41dc00:	4639      	mov	r1, r7
  41dc02:	4620      	mov	r0, r4
  41dc04:	f7fc f831 	bl	419c6a <.LFE7>

0041dc08 <.LVL497>:
   while (fp_iszero (t) == FP_NO) {
  41dc08:	6823      	ldr	r3, [r4, #0]
  41dc0a:	2b00      	cmp	r3, #0
  41dc0c:	d1f2      	bne.n	41dbf4 <.LVL495>

0041dc0e <.LVL498>:
}
  41dc0e:	4628      	mov	r0, r5
  41dc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041dc14 <.LVL499>:
   while (fp_iszero (t) == FP_NO) {
  41dc14:	4605      	mov	r5, r0
  return x;
  41dc16:	e7fa      	b.n	41dc0e <.LVL498>

Disassembly of section .text.AesWriteKey%336:

0041dc18 <AesWriteKey>:
    if (AesKey)
  41dc18:	b1b0      	cbz	r0, 41dc48 <.LCFI1>
{
  41dc1a:	b430      	push	{r4, r5}

0041dc1c <.LCFI0>:
  41dc1c:	4604      	mov	r4, r0

0041dc1e <.LBB2>:
        key_length /= 4;
  41dc1e:	4608      	mov	r0, r1

0041dc20 <.LVL1>:
  41dc20:	2900      	cmp	r1, #0
  41dc22:	bfb8      	it	lt
  41dc24:	1cc8      	addlt	r0, r1, #3
  41dc26:	1080      	asrs	r0, r0, #2

0041dc28 <.LVL2>:
        for (i = 0; i < key_length; i++)
  41dc28:	2800      	cmp	r0, #0
  41dc2a:	dd0c      	ble.n	41dc46 <.LBE2>
  41dc2c:	2200      	movs	r2, #0
  41dc2e:	4613      	mov	r3, r2
            AES_REGS->AES_KEYWR[i] = *AesKey++;
  41dc30:	4d06      	ldr	r5, [pc, #24]	; (41dc4c <.LCFI1+0x4>)

0041dc32 <.LVL3>:
  41dc32:	f854 1b04 	ldr.w	r1, [r4], #4

0041dc36 <.LVL4>:
  41dc36:	3208      	adds	r2, #8
  41dc38:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
        for (i = 0; i < key_length; i++)
  41dc3c:	3301      	adds	r3, #1

0041dc3e <.LVL5>:
  41dc3e:	b2db      	uxtb	r3, r3

0041dc40 <.LVL6>:
  41dc40:	461a      	mov	r2, r3
  41dc42:	4298      	cmp	r0, r3
  41dc44:	dcf5      	bgt.n	41dc32 <.LVL3>

0041dc46 <.LBE2>:
}
  41dc46:	bc30      	pop	{r4, r5}

0041dc48 <.LCFI1>:
  41dc48:	4770      	bx	lr
  41dc4a:	bf00      	nop
  41dc4c:	4006c000 	.word	0x4006c000

Disassembly of section .text.SYS_TIME_ResourceLock%337:

0041dc50 <SYS_TIME_ResourceLock>:
{
  41dc50:	b508      	push	{r3, lr}

0041dc52 <.LCFI9>:
    if (gSystemCounterObj.interruptNestingCount == 0)
  41dc52:	4b0b      	ldr	r3, [pc, #44]	; (41dc80 <.LVL92+0x6>)
  41dc54:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
  41dc58:	b10b      	cbz	r3, 41dc5e <.LCFI9+0xc>
    return true;
  41dc5a:	2001      	movs	r0, #1
  41dc5c:	bd08      	pop	{r3, pc}
        if(OSAL_MUTEX_Lock(&gSystemCounterObj.timerMutex, OSAL_WAIT_FOREVER) == OSAL_RESULT_TRUE)
  41dc5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
  41dc62:	4808      	ldr	r0, [pc, #32]	; (41dc84 <.LVL92+0xa>)
  41dc64:	f000 fcb4 	bl	41e5d0 <.LFE150>

0041dc68 <.LVL91>:
  41dc68:	2801      	cmp	r0, #1
  41dc6a:	d001      	beq.n	41dc70 <.LVL91+0x8>
            return false;
  41dc6c:	2000      	movs	r0, #0
}
  41dc6e:	bd08      	pop	{r3, pc}
            SYS_INT_SourceDisable(gSystemCounterObj.hwTimerIntNum);
  41dc70:	4b03      	ldr	r3, [pc, #12]	; (41dc80 <.LVL92+0x6>)
  41dc72:	f993 0008 	ldrsb.w	r0, [r3, #8]
  41dc76:	f7ff fc2f 	bl	41d4d8 <.LFE28>

0041dc7a <.LVL92>:
            return true;
  41dc7a:	2001      	movs	r0, #1
  41dc7c:	bd08      	pop	{r3, pc}
  41dc7e:	bf00      	nop
  41dc80:	20417688 	.word	0x20417688
  41dc84:	204176bc 	.word	0x204176bc

Disassembly of section .text.__mcmp%338:

0041dc88 <__mcmp>:
  41dc88:	b430      	push	{r4, r5}

0041dc8a <.LCFI12>:
  41dc8a:	690b      	ldr	r3, [r1, #16]
  41dc8c:	4605      	mov	r5, r0
  41dc8e:	6900      	ldr	r0, [r0, #16]

0041dc90 <.LVL212>:
  41dc90:	1ac0      	subs	r0, r0, r3

0041dc92 <.LVL213>:
  41dc92:	d10f      	bne.n	41dcb4 <.LVL223>
  41dc94:	009b      	lsls	r3, r3, #2

0041dc96 <.LVL214>:
  41dc96:	3514      	adds	r5, #20

0041dc98 <.LVL215>:
  41dc98:	3114      	adds	r1, #20

0041dc9a <.LVL216>:
  41dc9a:	4419      	add	r1, r3

0041dc9c <.LVL217>:
  41dc9c:	442b      	add	r3, r5

0041dc9e <.LVL218>:
  41dc9e:	e001      	b.n	41dca4 <.LVL220>

0041dca0 <.LVL219>:
  41dca0:	429d      	cmp	r5, r3
  41dca2:	d207      	bcs.n	41dcb4 <.LVL223>

0041dca4 <.LVL220>:
  41dca4:	f853 4d04 	ldr.w	r4, [r3, #-4]!

0041dca8 <.LVL221>:
  41dca8:	f851 2d04 	ldr.w	r2, [r1, #-4]!

0041dcac <.LVL222>:
  41dcac:	4294      	cmp	r4, r2
  41dcae:	d0f7      	beq.n	41dca0 <.LVL219>
  41dcb0:	d302      	bcc.n	41dcb8 <.LCFI14>
  41dcb2:	2001      	movs	r0, #1

0041dcb4 <.LVL223>:
  41dcb4:	bc30      	pop	{r4, r5}

0041dcb6 <.LCFI13>:
  41dcb6:	4770      	bx	lr

0041dcb8 <.LCFI14>:
  41dcb8:	f04f 30ff 	mov.w	r0, #4294967295

0041dcbc <.LVL225>:
  41dcbc:	e7fa      	b.n	41dcb4 <.LVL223>

0041dcbe <.LFE27>:
  41dcbe:	bf00      	nop

Disassembly of section .text.wc_HashGetDigestSize%339:

0041dcc0 <wc_HashGetDigestSize>:
    switch(hash_type)
  41dcc0:	3803      	subs	r0, #3

0041dcc2 <.LVL9>:
  41dcc2:	2806      	cmp	r0, #6
  41dcc4:	d811      	bhi.n	41dcea <.LVL15>
  41dcc6:	e8df f000 	tbb	[pc, r0]
  41dcca:	0604      	.short	0x0604
  41dccc:	0e0c0a08 	.word	0x0e0c0a08
  41dcd0:	13          	.byte	0x13
  41dcd1:	00          	.byte	0x00
            dig_size = MD5_DIGEST_SIZE;
  41dcd2:	2010      	movs	r0, #16
  41dcd4:	4770      	bx	lr

0041dcd6 <.LVL10>:
            dig_size = SHA_DIGEST_SIZE;
  41dcd6:	2014      	movs	r0, #20
            break;
  41dcd8:	4770      	bx	lr

0041dcda <.LVL11>:
            dig_size = SHA256_DIGEST_SIZE;
  41dcda:	2020      	movs	r0, #32
            break;
  41dcdc:	4770      	bx	lr

0041dcde <.LVL12>:
            dig_size = SHA384_DIGEST_SIZE;
  41dcde:	2030      	movs	r0, #48	; 0x30
            break;
  41dce0:	4770      	bx	lr

0041dce2 <.LVL13>:
            dig_size = SHA512_DIGEST_SIZE;
  41dce2:	2040      	movs	r0, #64	; 0x40
            break;
  41dce4:	4770      	bx	lr

0041dce6 <.LVL14>:
            dig_size = MD5_DIGEST_SIZE + SHA_DIGEST_SIZE;
  41dce6:	2024      	movs	r0, #36	; 0x24
            break;
  41dce8:	4770      	bx	lr

0041dcea <.LVL15>:
            dig_size = BAD_FUNC_ARG;
  41dcea:	f06f 00ac 	mvn.w	r0, #172	; 0xac
            break;
  41dcee:	4770      	bx	lr

0041dcf0 <.LVL16>:
    int dig_size = HASH_TYPE_E; /* Default to hash type error */
  41dcf0:	f06f 00e7 	mvn.w	r0, #231	; 0xe7
}
  41dcf4:	4770      	bx	lr

Disassembly of section .text.wc_Md5Hash%340:

0041dcf6 <wc_Md5Hash>:
    {
  41dcf6:	b570      	push	{r4, r5, r6, lr}

0041dcf8 <.LCFI7>:
  41dcf8:	b098      	sub	sp, #96	; 0x60

0041dcfa <.LCFI8>:
  41dcfa:	4604      	mov	r4, r0
  41dcfc:	460d      	mov	r5, r1
  41dcfe:	4616      	mov	r6, r2
        ret = wc_InitMd5(md5);
  41dd00:	4668      	mov	r0, sp

0041dd02 <.LVL78>:
  41dd02:	f000 fede 	bl	41eac2 <.LFE172>

0041dd06 <.LVL79>:
        if (ret == 0) {
  41dd06:	4603      	mov	r3, r0
  41dd08:	b110      	cbz	r0, 41dd10 <.LCFI10>
    }
  41dd0a:	4618      	mov	r0, r3

0041dd0c <.LVL80>:
  41dd0c:	b018      	add	sp, #96	; 0x60

0041dd0e <.LCFI9>:
  41dd0e:	bd70      	pop	{r4, r5, r6, pc}

0041dd10 <.LCFI10>:
            ret = wc_Md5Update(md5, data, len);
  41dd10:	462a      	mov	r2, r5
  41dd12:	4621      	mov	r1, r4
  41dd14:	4668      	mov	r0, sp

0041dd16 <.LVL82>:
  41dd16:	f7fd f81d 	bl	41ad54 <.LFE23>

0041dd1a <.LVL83>:
            if (ret == 0) {
  41dd1a:	4603      	mov	r3, r0
  41dd1c:	2800      	cmp	r0, #0
  41dd1e:	d1f4      	bne.n	41dd0a <.LVL79+0x4>
                ret = wc_Md5Final(md5, hash);
  41dd20:	4631      	mov	r1, r6
  41dd22:	4668      	mov	r0, sp

0041dd24 <.LVL84>:
  41dd24:	f7fb fa2e 	bl	419184 <.LFE168>

0041dd28 <.LVL85>:
  41dd28:	4603      	mov	r3, r0

0041dd2a <.LVL86>:
        return ret;
  41dd2a:	e7ee      	b.n	41dd0a <.LVL79+0x4>

Disassembly of section .text.wc_Sha512Hash%341:

0041dd2c <wc_Sha512Hash>:
#endif /* !defined(WOLFSSL_TI_HASH) */


#if defined(WOLFSSL_SHA512)
    int wc_Sha512Hash(const byte* data, word32 len, byte* hash)
    {
  41dd2c:	b570      	push	{r4, r5, r6, lr}

0041dd2e <.LCFI19>:
  41dd2e:	b0b8      	sub	sp, #224	; 0xe0

0041dd30 <.LCFI20>:
  41dd30:	4604      	mov	r4, r0
  41dd32:	460d      	mov	r5, r1
  41dd34:	4616      	mov	r6, r2

0041dd36 <.LVL108>:
        sha512 = (Sha512*)XMALLOC(sizeof(Sha512), NULL, DYNAMIC_TYPE_TMP_BUFFER);
        if (sha512 == NULL)
            return MEMORY_E;
    #endif

        if ((ret = wc_InitSha512(sha512)) != 0) {
  41dd36:	4668      	mov	r0, sp

0041dd38 <.LVL109>:
  41dd38:	f001 f809 	bl	41ed4e <.LFE206>

0041dd3c <.LVL110>:
  41dd3c:	4603      	mov	r3, r0
  41dd3e:	b110      	cbz	r0, 41dd46 <.LCFI22>
    #ifdef WOLFSSL_SMALL_STACK
        XFREE(sha512, NULL, DYNAMIC_TYPE_TMP_BUFFER);
    #endif

        return ret;
    }
  41dd40:	4618      	mov	r0, r3

0041dd42 <.LVL111>:
  41dd42:	b038      	add	sp, #224	; 0xe0

0041dd44 <.LCFI21>:
  41dd44:	bd70      	pop	{r4, r5, r6, pc}

0041dd46 <.LCFI22>:
        else if ((ret = wc_Sha512Update(sha512, data, len)) != 0) {
  41dd46:	462a      	mov	r2, r5
  41dd48:	4621      	mov	r1, r4
  41dd4a:	4668      	mov	r0, sp

0041dd4c <.LVL113>:
  41dd4c:	f7fa f8f6 	bl	417f3c <.LFE169>

0041dd50 <.LVL114>:
  41dd50:	4603      	mov	r3, r0
  41dd52:	2800      	cmp	r0, #0
  41dd54:	d1f4      	bne.n	41dd40 <.LVL110+0x4>
        else if ((ret = wc_Sha512Final(sha512, hash)) != 0) {
  41dd56:	4631      	mov	r1, r6
  41dd58:	4668      	mov	r0, sp

0041dd5a <.LVL115>:
  41dd5a:	f7f5 fec1 	bl	413ae0 <wc_Sha512Final>

0041dd5e <.LVL116>:
  41dd5e:	4603      	mov	r3, r0

0041dd60 <.LVL117>:
        return ret;
  41dd60:	e7ee      	b.n	41dd40 <.LVL110+0x4>

Disassembly of section .text.wc_Sha384Hash%342:

0041dd62 <wc_Sha384Hash>:

    #if defined(WOLFSSL_SHA384)
        int wc_Sha384Hash(const byte* data, word32 len, byte* hash)
        {
  41dd62:	b570      	push	{r4, r5, r6, lr}

0041dd64 <.LCFI23>:
  41dd64:	b0b8      	sub	sp, #224	; 0xe0

0041dd66 <.LCFI24>:
  41dd66:	4604      	mov	r4, r0
  41dd68:	460d      	mov	r5, r1
  41dd6a:	4616      	mov	r6, r2

0041dd6c <.LVL119>:
            sha384 = (Sha384*)XMALLOC(sizeof(Sha384), NULL, DYNAMIC_TYPE_TMP_BUFFER);
            if (sha384 == NULL)
                return MEMORY_E;
        #endif

            if ((ret = wc_InitSha384(sha384)) != 0) {
  41dd6c:	4668      	mov	r0, sp

0041dd6e <.LVL120>:
  41dd6e:	f000 fff5 	bl	41ed5c <.LFE22>

0041dd72 <.LVL121>:
  41dd72:	4603      	mov	r3, r0
  41dd74:	b110      	cbz	r0, 41dd7c <.LCFI26>
        #ifdef WOLFSSL_SMALL_STACK
            XFREE(sha384, NULL, DYNAMIC_TYPE_TMP_BUFFER);
        #endif

            return ret;
        }
  41dd76:	4618      	mov	r0, r3

0041dd78 <.LVL122>:
  41dd78:	b038      	add	sp, #224	; 0xe0

0041dd7a <.LCFI25>:
  41dd7a:	bd70      	pop	{r4, r5, r6, pc}

0041dd7c <.LCFI26>:
            else if ((ret = wc_Sha384Update(sha384, data, len)) != 0) {
  41dd7c:	462a      	mov	r2, r5
  41dd7e:	4621      	mov	r1, r4
  41dd80:	4668      	mov	r0, sp

0041dd82 <.LVL124>:
  41dd82:	f7fa f950 	bl	418026 <.LBE719>

0041dd86 <.LVL125>:
  41dd86:	4603      	mov	r3, r0
  41dd88:	2800      	cmp	r0, #0
  41dd8a:	d1f4      	bne.n	41dd76 <.LVL121+0x4>
            else if ((ret = wc_Sha384Final(sha384, hash)) != 0) {
  41dd8c:	4631      	mov	r1, r6
  41dd8e:	4668      	mov	r0, sp

0041dd90 <.LVL126>:
  41dd90:	f7f5 ffee 	bl	413d70 <.LFE21>

0041dd94 <.LVL127>:
  41dd94:	4603      	mov	r3, r0

0041dd96 <.LVL128>:
            return ret;
  41dd96:	e7ee      	b.n	41dd76 <.LVL121+0x4>

Disassembly of section .text.inflateEnd%343:

0041dd98 <inflateEnd>:

int ZEXPORT inflateEnd(strm)
z_streamp strm;
{
    struct inflate_state FAR *state;
    if (strm == Z_NULL || strm->state == Z_NULL || strm->zfree == (free_func)0)
  41dd98:	b180      	cbz	r0, 41ddbc <.LCFI21>
{
  41dd9a:	b510      	push	{r4, lr}

0041dd9c <.LCFI20>:
  41dd9c:	4604      	mov	r4, r0
    if (strm == Z_NULL || strm->state == Z_NULL || strm->zfree == (free_func)0)
  41dd9e:	69c3      	ldr	r3, [r0, #28]
  41dda0:	b17b      	cbz	r3, 41ddc2 <.LCFI22>
  41dda2:	6a42      	ldr	r2, [r0, #36]	; 0x24
  41dda4:	b182      	cbz	r2, 41ddc8 <.LVL496>

0041dda6 <.LVL488>:
        return Z_STREAM_ERROR;
    state = (struct inflate_state FAR *)strm->state;
    if (state->window != Z_NULL) ZFREE(strm, state->window);
  41dda6:	6b59      	ldr	r1, [r3, #52]	; 0x34
  41dda8:	b109      	cbz	r1, 41ddae <.LVL490>
  41ddaa:	6a80      	ldr	r0, [r0, #40]	; 0x28

0041ddac <.LVL489>:
  41ddac:	4790      	blx	r2

0041ddae <.LVL490>:
    ZFREE(strm, strm->state);
  41ddae:	6a63      	ldr	r3, [r4, #36]	; 0x24
  41ddb0:	69e1      	ldr	r1, [r4, #28]
  41ddb2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  41ddb4:	4798      	blx	r3
    strm->state = Z_NULL;
  41ddb6:	2000      	movs	r0, #0
  41ddb8:	61e0      	str	r0, [r4, #28]
    Tracev((stderr, "inflate: end\n"));
    return Z_OK;
  41ddba:	bd10      	pop	{r4, pc}

0041ddbc <.LCFI21>:
        return Z_STREAM_ERROR;
  41ddbc:	f06f 0001 	mvn.w	r0, #1

0041ddc0 <.LVL493>:
  41ddc0:	4770      	bx	lr

0041ddc2 <.LCFI22>:
  41ddc2:	f06f 0001 	mvn.w	r0, #1

0041ddc6 <.LVL495>:
  41ddc6:	bd10      	pop	{r4, pc}

0041ddc8 <.LVL496>:
  41ddc8:	f06f 0001 	mvn.w	r0, #1

0041ddcc <.LVL497>:
}
  41ddcc:	bd10      	pop	{r4, pc}

Disassembly of section .text.vListInsert%344:

0041ddce <vListInsert>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  41ddce:	b430      	push	{r4, r5}

0041ddd0 <.LCFI0>:
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  41ddd0:	680d      	ldr	r5, [r1, #0]

0041ddd2 <.LVL6>:
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  41ddd2:	f1b5 3fff 	cmp.w	r5, #4294967295
  41ddd6:	d002      	beq.n	41ddde <.LVL8>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  41ddd8:	f100 0208 	add.w	r2, r0, #8

0041dddc <.LVL7>:
  41dddc:	e002      	b.n	41dde4 <.LVL9+0x4>

0041ddde <.LVL8>:
		pxIterator = pxList->xListEnd.pxPrevious;
  41ddde:	6902      	ldr	r2, [r0, #16]

0041dde0 <.LVL9>:
  41dde0:	e004      	b.n	41ddec <.LVL9+0xc>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  41dde2:	461a      	mov	r2, r3
  41dde4:	6853      	ldr	r3, [r2, #4]
  41dde6:	681c      	ldr	r4, [r3, #0]
  41dde8:	42a5      	cmp	r5, r4
  41ddea:	d2fa      	bcs.n	41dde2 <.LVL9+0x2>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  41ddec:	6853      	ldr	r3, [r2, #4]
  41ddee:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  41ddf0:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  41ddf2:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  41ddf4:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  41ddf6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  41ddf8:	6803      	ldr	r3, [r0, #0]
  41ddfa:	3301      	adds	r3, #1
  41ddfc:	6003      	str	r3, [r0, #0]
}
  41ddfe:	bc30      	pop	{r4, r5}

0041de00 <.LCFI1>:
  41de00:	4770      	bx	lr

Disassembly of section .text.fp_cmp%345:

0041de02 <fp_cmp>:
{
  41de02:	b510      	push	{r4, lr}

0041de04 <.LCFI18>:
  41de04:	4603      	mov	r3, r0
  41de06:	460c      	mov	r4, r1
   if (a->sign == FP_NEG && b->sign == FP_ZPOS) {
  41de08:	6842      	ldr	r2, [r0, #4]
  41de0a:	2a01      	cmp	r2, #1
  41de0c:	d008      	beq.n	41de20 <.LVL140>
   } else if (a->sign == FP_ZPOS && b->sign == FP_NEG) {
  41de0e:	b912      	cbnz	r2, 41de16 <.LVL137+0x4>
  41de10:	6860      	ldr	r0, [r4, #4]

0041de12 <.LVL137>:
  41de12:	2801      	cmp	r0, #1
  41de14:	d00b      	beq.n	41de2e <.LVL144>
         return fp_cmp_mag(a, b);
  41de16:	4621      	mov	r1, r4

0041de18 <.LVL138>:
  41de18:	4618      	mov	r0, r3
  41de1a:	f7fe fb64 	bl	41c4e6 <.LFE170>

0041de1e <.LVL139>:
  41de1e:	bd10      	pop	{r4, pc}

0041de20 <.LVL140>:
   if (a->sign == FP_NEG && b->sign == FP_ZPOS) {
  41de20:	684a      	ldr	r2, [r1, #4]
  41de22:	b12a      	cbz	r2, 41de30 <.LVL145>
         return fp_cmp_mag(b, a);
  41de24:	4601      	mov	r1, r0

0041de26 <.LVL141>:
  41de26:	4620      	mov	r0, r4

0041de28 <.LVL142>:
  41de28:	f7fe fb5d 	bl	41c4e6 <.LFE170>

0041de2c <.LVL143>:
  41de2c:	bd10      	pop	{r4, pc}

0041de2e <.LVL144>:
  41de2e:	bd10      	pop	{r4, pc}

0041de30 <.LVL145>:
      return FP_LT;
  41de30:	f04f 30ff 	mov.w	r0, #4294967295

0041de34 <.LVL146>:
  41de34:	bd10      	pop	{r4, pc}

Disassembly of section .text.__libc_fini_array%346:

0041de38 <__libc_fini_array>:
  41de38:	b538      	push	{r3, r4, r5, lr}

0041de3a <.LCFI0>:
  41de3a:	4c0a      	ldr	r4, [pc, #40]	; (41de64 <.LVL6+0x2>)
  41de3c:	4d0a      	ldr	r5, [pc, #40]	; (41de68 <.LVL6+0x6>)
  41de3e:	1b64      	subs	r4, r4, r5

0041de40 <.LVL0>:
  41de40:	10a4      	asrs	r4, r4, #2

0041de42 <.LVL1>:
  41de42:	d00a      	beq.n	41de5a <.LVL4+0x4>
  41de44:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  41de48:	3b01      	subs	r3, #1
  41de4a:	eb05 0583 	add.w	r5, r5, r3, lsl #2

0041de4e <.LVL2>:
  41de4e:	3c01      	subs	r4, #1

0041de50 <.LVL3>:
  41de50:	f855 3904 	ldr.w	r3, [r5], #-4
  41de54:	4798      	blx	r3

0041de56 <.LVL4>:
  41de56:	2c00      	cmp	r4, #0
  41de58:	d1f9      	bne.n	41de4e <.LVL2>
  41de5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

0041de5e <.LCFI1>:
  41de5e:	f7e2 b98d 	b.w	40017c <_fini>

0041de62 <.LVL6>:
  41de62:	bf00      	nop
  41de64:	0040018c 	.word	0x0040018c
  41de68:	00400188 	.word	0x00400188

Disassembly of section .text.xQueueGenericCreate%347:

0041de6c <xQueueGenericCreate>:
	{
  41de6c:	b570      	push	{r4, r5, r6, lr}

0041de6e <.LCFI6>:
  41de6e:	4606      	mov	r6, r0
  41de70:	460d      	mov	r5, r1

0041de72 <.LVL50>:
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  41de72:	fb00 f001 	mul.w	r0, r0, r1

0041de76 <.LVL51>:
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  41de76:	3048      	adds	r0, #72	; 0x48

0041de78 <.LVL52>:
  41de78:	f7fe fb68 	bl	41c54c <.LFE42>

0041de7c <.LVL53>:
		if( pxNewQueue != NULL )
  41de7c:	4604      	mov	r4, r0
  41de7e:	b148      	cbz	r0, 41de94 <.LBE31>

0041de80 <.LBB27>:
	if( uxItemSize == ( UBaseType_t ) 0 )
  41de80:	b155      	cbz	r5, 41de98 <.LBB32>

0041de82 <.LBE27>:
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
  41de82:	f100 0348 	add.w	r3, r0, #72	; 0x48

0041de86 <.LBB31>:
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
  41de86:	6003      	str	r3, [r0, #0]

0041de88 <.LVL56>:
	pxNewQueue->uxLength = uxQueueLength;
  41de88:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
  41de8a:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  41de8c:	2101      	movs	r1, #1
  41de8e:	4620      	mov	r0, r4

0041de90 <.LVL57>:
  41de90:	f7fe f86a 	bl	41bf68 <xQueueGenericReset>

0041de94 <.LBE31>:
	}
  41de94:	4620      	mov	r0, r4
  41de96:	bd70      	pop	{r4, r5, r6, pc}

0041de98 <.LBB32>:
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  41de98:	6020      	str	r0, [r4, #0]
  41de9a:	e7f5      	b.n	41de88 <.LVL56>

Disassembly of section .text.xPortSysTickHandler%348:

0041de9c <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
  41de9c:	b508      	push	{r3, lr}

0041de9e <.LBB18>:
  41de9e:	f04f 0320 	mov.w	r3, #32
  41dea2:	b672      	cpsid	i
  41dea4:	f383 8811 	msr	BASEPRI, r3
  41dea8:	f3bf 8f6f 	isb	sy
  41deac:	f3bf 8f4f 	dsb	sy
  41deb0:	b662      	cpsie	i

0041deb2 <.LBE18>:
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
  41deb2:	f7f9 fdd7 	bl	417a64 <xTaskIncrementTick>

0041deb6 <.LVL11>:
  41deb6:	b118      	cbz	r0, 41dec0 <.LBB20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  41deb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  41debc:	4b02      	ldr	r3, [pc, #8]	; (41dec8 <.LVL13+0x2>)
  41debe:	601a      	str	r2, [r3, #0]

0041dec0 <.LBB20>:
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  41dec0:	2300      	movs	r3, #0
  41dec2:	f383 8811 	msr	BASEPRI, r3

0041dec6 <.LVL13>:
  41dec6:	bd08      	pop	{r3, pc}
  41dec8:	e000ed04 	.word	0xe000ed04

Disassembly of section .rodata.pc2%349:

0041decc <pc2>:
  41decc:	180b110e 1c030501 0a15060f 040c1317     ................
  41dedc:	0710081a 020d141b 251f3429 281e372f     ........)4.%/7.(
  41deec:	30212d33 3827312c 2a2e3522 201d2432     3-!0,1'8"5.*2$. 

Disassembly of section .text.pic32c_InitRng%350:

0041defc <pic32c_InitRng>:
    if ((PMC_REGS->PMC_PCSR1 & PmcBit) != PmcBit)
  41defc:	4b08      	ldr	r3, [pc, #32]	; (41df20 <.LBE9+0x4>)
  41defe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  41df02:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  41df06:	d109      	bne.n	41df1c <.LBE9>
        PMC_REGS->PMC_PCER1 = PmcBit;
  41df08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  41df0c:	4b04      	ldr	r3, [pc, #16]	; (41df20 <.LBE9+0x4>)
  41df0e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        TRNG_REGS->TRNG_CR = TRNG_CR_KEY_PASSWD | TRNG_CR_ENABLE_Msk;
  41df12:	4a04      	ldr	r2, [pc, #16]	; (41df24 <.LBE9+0x8>)
  41df14:	4b04      	ldr	r3, [pc, #16]	; (41df28 <.LBE9+0xc>)
  41df16:	601a      	str	r2, [r3, #0]

0041df18 <.LBB9>:
  __ASM volatile ("dmb 0xF":::"memory");
  41df18:	f3bf 8f5f 	dmb	sy

0041df1c <.LBE9>:
}
  41df1c:	2000      	movs	r0, #0
  41df1e:	4770      	bx	lr
  41df20:	400e0600 	.word	0x400e0600
  41df24:	524e4701 	.word	0x524e4701
  41df28:	40070000 	.word	0x40070000

Disassembly of section .text.SYS_CONSOLE_Write%351:

0041df2c <SYS_CONSOLE_Write>:
    None.
*/

ssize_t SYS_CONSOLE_Write(const SYS_MODULE_INDEX index, int fd, const char *buf, size_t count )
{
    if (index >= SYS_CONSOLE_DEVICE_MAX_INSTANCES)
  41df2c:	b970      	cbnz	r0, 41df4c <.LCFI9>
        return 0;

    if (consoleDeviceInstance[index].consoleDeviceInstanceStatus == SYS_STATUS_UNINITIALIZED
  41df2e:	480a      	ldr	r0, [pc, #40]	; (41df58 <.LVL48>)

0041df30 <.LVL42>:
  41df30:	f990 0000 	ldrsb.w	r0, [r0]
  41df34:	b160      	cbz	r0, 41df50 <.LVL47+0x2>
{
  41df36:	b538      	push	{r3, r4, r5, lr}

0041df38 <.LCFI8>:
            || consoleDeviceInstance[index].consoleInstanceDevDesc == NULL)
  41df38:	4807      	ldr	r0, [pc, #28]	; (41df58 <.LVL48>)
  41df3a:	6845      	ldr	r5, [r0, #4]
  41df3c:	b155      	cbz	r5, 41df54 <.LCFI10>
  41df3e:	4614      	mov	r4, r2
  41df40:	4608      	mov	r0, r1
    {
        return 0;
    }

    return consoleDeviceInstance[index].consoleInstanceDevDesc->sysConsoleWrite(fd, buf, count);
  41df42:	68ed      	ldr	r5, [r5, #12]
  41df44:	461a      	mov	r2, r3

0041df46 <.LVL43>:
  41df46:	4621      	mov	r1, r4

0041df48 <.LVL44>:
  41df48:	47a8      	blx	r5

0041df4a <.LVL45>:
  41df4a:	bd38      	pop	{r3, r4, r5, pc}

0041df4c <.LCFI9>:
        return 0;
  41df4c:	2000      	movs	r0, #0

0041df4e <.LVL47>:
  41df4e:	4770      	bx	lr
        return 0;
  41df50:	2000      	movs	r0, #0
  41df52:	4770      	bx	lr

0041df54 <.LCFI10>:
  41df54:	2000      	movs	r0, #0
}
  41df56:	bd38      	pop	{r3, r4, r5, pc}

0041df58 <.LVL48>:
  41df58:	2041781c 	.word	0x2041781c

Disassembly of section .text.USART1_ErrorGet%352:

0041df5c <USART1_ErrorGet>:
    uint32_t status = USART1_REGS->US_CSR;
  41df5c:	4b0a      	ldr	r3, [pc, #40]	; (41df88 <.LVL9+0xe>)
  41df5e:	6958      	ldr	r0, [r3, #20]

0041df60 <.LVL6>:
    if(errors != USART_ERROR_NONE)
  41df60:	f010 00e0 	ands.w	r0, r0, #224	; 0xe0

0041df64 <.LVL7>:
  41df64:	d100      	bne.n	41df68 <.LBB14>
}
  41df66:	4770      	bx	lr

0041df68 <.LBB14>:
    USART1_REGS->US_CR|= US_CR_RSTSTA_Msk;
  41df68:	681a      	ldr	r2, [r3, #0]
  41df6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  41df6e:	601a      	str	r2, [r3, #0]
    while( US_CSR_RXRDY_Msk == (USART1_REGS->US_CSR& US_CSR_RXRDY_Msk) )
  41df70:	695b      	ldr	r3, [r3, #20]
  41df72:	f013 0f01 	tst.w	r3, #1
  41df76:	d0f6      	beq.n	41df66 <.LVL7+0x2>
        dummyData = (USART1_REGS->US_RHR& US_RHR_RXCHR_Msk);
  41df78:	4b03      	ldr	r3, [pc, #12]	; (41df88 <.LVL9+0xe>)

0041df7a <.LVL9>:
  41df7a:	699a      	ldr	r2, [r3, #24]
    while( US_CSR_RXRDY_Msk == (USART1_REGS->US_CSR& US_CSR_RXRDY_Msk) )
  41df7c:	695a      	ldr	r2, [r3, #20]
  41df7e:	f012 0f01 	tst.w	r2, #1
  41df82:	d1fa      	bne.n	41df7a <.LVL9>
  41df84:	e7ef      	b.n	41df66 <.LVL7+0x2>
  41df86:	bf00      	nop
  41df88:	40028000 	.word	0x40028000

Disassembly of section .text%353:

0041df8c <__aeabi_uldivmod>:
  41df8c:	b953      	cbnz	r3, 41dfa4 <__aeabi_uldivmod+0x18>
  41df8e:	b94a      	cbnz	r2, 41dfa4 <__aeabi_uldivmod+0x18>
  41df90:	2900      	cmp	r1, #0
  41df92:	bf08      	it	eq
  41df94:	2800      	cmpeq	r0, #0
  41df96:	bf1c      	itt	ne
  41df98:	f04f 31ff 	movne.w	r1, #4294967295
  41df9c:	f04f 30ff 	movne.w	r0, #4294967295
  41dfa0:	f7f5 bd9c 	b.w	413adc <.LBE10>
  41dfa4:	f1ad 0c08 	sub.w	ip, sp, #8
  41dfa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  41dfac:	f7f5 f976 	bl	41329c <.LFE0>
  41dfb0:	f8dd e004 	ldr.w	lr, [sp, #4]
  41dfb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  41dfb8:	b004      	add	sp, #16
  41dfba:	4770      	bx	lr

Disassembly of section .text.wc_RsaSSL_Verify%354:

0041dfbc <wc_RsaSSL_Verify>:
        WC_HASH_TYPE_NONE, WC_MGF1NONE, NULL, 0, rng);
}

int wc_RsaSSL_Verify(const byte* in, word32 inLen, byte* out, word32 outLen,
                                                                 RsaKey* key)
{
  41dfbc:	b570      	push	{r4, r5, r6, lr}

0041dfbe <.LCFI46>:
  41dfbe:	b08a      	sub	sp, #40	; 0x28

0041dfc0 <.LCFI47>:
  41dfc0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    WC_RNG* rng;

    if (key == NULL) {
  41dfc2:	b17d      	cbz	r5, 41dfe4 <.LCFI49>

0041dfc4 <.LVL288>:

    rng = NULL;
#ifdef WC_RSA_BLINDING
    rng = key->rng;
#endif
    return RsaPrivateDecryptEx((byte*)in, inLen, out, outLen, NULL, key,
  41dfc4:	2400      	movs	r4, #0
  41dfc6:	9409      	str	r4, [sp, #36]	; 0x24
  41dfc8:	9408      	str	r4, [sp, #32]
  41dfca:	9407      	str	r4, [sp, #28]
  41dfcc:	9406      	str	r4, [sp, #24]
  41dfce:	9405      	str	r4, [sp, #20]
  41dfd0:	9404      	str	r4, [sp, #16]
  41dfd2:	2601      	movs	r6, #1
  41dfd4:	9603      	str	r6, [sp, #12]
  41dfd6:	9602      	str	r6, [sp, #8]
  41dfd8:	9501      	str	r5, [sp, #4]
  41dfda:	9400      	str	r4, [sp, #0]
  41dfdc:	f7f2 fc4e 	bl	41087c <.LFE212>

0041dfe0 <.LVL289>:
        RSA_PUBLIC_DECRYPT, RSA_BLOCK_TYPE_1, WC_RSA_PKCSV15_PAD,
        WC_HASH_TYPE_NONE, WC_MGF1NONE, NULL, 0, rng);
}
  41dfe0:	b00a      	add	sp, #40	; 0x28

0041dfe2 <.LCFI48>:
  41dfe2:	bd70      	pop	{r4, r5, r6, pc}

0041dfe4 <.LCFI49>:
        return BAD_FUNC_ARG;
  41dfe4:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041dfe8 <.LVL291>:
  41dfe8:	e7fa      	b.n	41dfe0 <.LVL289>

Disassembly of section .text.fp_mulmod%355:

0041dfea <fp_mulmod>:
{
  41dfea:	b5f0      	push	{r4, r5, r6, r7, lr}

0041dfec <.LCFI98>:
  41dfec:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c

0041dff0 <.LCFI99>:
  41dff0:	4606      	mov	r6, r0
  41dff2:	460f      	mov	r7, r1
  41dff4:	4614      	mov	r4, r2
  41dff6:	461d      	mov	r5, r3

0041dff8 <.LBB160>:
    fp_zero(a);
  41dff8:	4668      	mov	r0, sp

0041dffa <.LVL734>:
  41dffa:	f000 fd97 	bl	41eb2c <.LFE154>

0041dffe <.LBE160>:
  fp_mul(a, b, &t);
  41dffe:	466a      	mov	r2, sp
  41e000:	4639      	mov	r1, r7
  41e002:	4630      	mov	r0, r6
  41e004:	f000 f834 	bl	41e070 <.LFE4>

0041e008 <.LVL736>:
    err = fp_mod(&t, c, d);
  41e008:	462a      	mov	r2, r5
  41e00a:	4621      	mov	r1, r4
  41e00c:	4668      	mov	r0, sp
  41e00e:	f7ff fa40 	bl	41d492 <.LFE171>

0041e012 <.LVL737>:
}
  41e012:	f50d 7d0b 	add.w	sp, sp, #556	; 0x22c

0041e016 <.LCFI100>:
  41e016:	bdf0      	pop	{r4, r5, r6, r7, pc}

Disassembly of section .text.prvResetNextTaskUnblockTime%356:

0041e018 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  41e018:	4b08      	ldr	r3, [pc, #32]	; (41e03c <.LVL7+0x10>)
  41e01a:	681b      	ldr	r3, [r3, #0]
  41e01c:	681b      	ldr	r3, [r3, #0]
  41e01e:	b13b      	cbz	r3, 41e030 <.LVL7+0x4>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  41e020:	4b06      	ldr	r3, [pc, #24]	; (41e03c <.LVL7+0x10>)
  41e022:	681b      	ldr	r3, [r3, #0]

0041e024 <.LVL4>:
  41e024:	68db      	ldr	r3, [r3, #12]

0041e026 <.LVL5>:
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
  41e026:	68db      	ldr	r3, [r3, #12]

0041e028 <.LVL6>:
  41e028:	685a      	ldr	r2, [r3, #4]
  41e02a:	4b05      	ldr	r3, [pc, #20]	; (41e040 <.LVL7+0x14>)

0041e02c <.LVL7>:
  41e02c:	601a      	str	r2, [r3, #0]
  41e02e:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  41e030:	f04f 32ff 	mov.w	r2, #4294967295
  41e034:	4b02      	ldr	r3, [pc, #8]	; (41e040 <.LVL7+0x14>)
  41e036:	601a      	str	r2, [r3, #0]
  41e038:	4770      	bx	lr
  41e03a:	bf00      	nop
  41e03c:	2041783c 	.word	0x2041783c
  41e040:	20417860 	.word	0x20417860

Disassembly of section .text.pxPortInitialiseStack%357:

0041e044 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  41e044:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  41e048:	f840 3c04 	str.w	r3, [r0, #-4]

0041e04c <.LVL2>:
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
  41e04c:	f021 0101 	bic.w	r1, r1, #1

0041e050 <.LVL3>:
  41e050:	f840 1c08 	str.w	r1, [r0, #-8]

0041e054 <.LVL4>:
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  41e054:	4b05      	ldr	r3, [pc, #20]	; (41e06c <.LVL8+0x4>)
  41e056:	f840 3c0c 	str.w	r3, [r0, #-12]

0041e05a <.LVL5>:
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  41e05a:	f840 2c20 	str.w	r2, [r0, #-32]

0041e05e <.LVL6>:
	*pxTopOfStack = portINITIAL_EXC_RETURN;
  41e05e:	f06f 0302 	mvn.w	r3, #2
  41e062:	f840 3c24 	str.w	r3, [r0, #-36]

0041e066 <.LVL7>:
}
  41e066:	3844      	subs	r0, #68	; 0x44

0041e068 <.LVL8>:
  41e068:	4770      	bx	lr
  41e06a:	bf00      	nop
  41e06c:	0041e3cb 	.word	0x0041e3cb

Disassembly of section .text.fp_mul%358:

0041e070 <fp_mul>:
{
  41e070:	b570      	push	{r4, r5, r6, lr}

0041e072 <.LCFI68>:
  41e072:	4614      	mov	r4, r2
    oldused = C->used;
  41e074:	6815      	ldr	r5, [r2, #0]

0041e076 <.LVL458>:
        fp_mul_comba(A,B,C);
  41e076:	4622      	mov	r2, r4
  41e078:	f7f9 f944 	bl	417304 <.LFE24>

0041e07c <.L408>:
    for (y = C->used; y >= 0 && y < oldused; y++) {
  41e07c:	6823      	ldr	r3, [r4, #0]

0041e07e <.LVL460>:
  41e07e:	2b00      	cmp	r3, #0
  41e080:	db0b      	blt.n	41e09a <.LVL462+0x6>
  41e082:	429d      	cmp	r5, r3
  41e084:	dd09      	ble.n	41e09a <.LVL462+0x6>
  41e086:	eb04 0283 	add.w	r2, r4, r3, lsl #2
  41e08a:	3204      	adds	r2, #4
        C->dp[y] = 0;
  41e08c:	2100      	movs	r1, #0
  41e08e:	f842 1f04 	str.w	r1, [r2, #4]!

0041e092 <.LVL461>:
    for (y = C->used; y >= 0 && y < oldused; y++) {
  41e092:	3301      	adds	r3, #1

0041e094 <.LVL462>:
  41e094:	d401      	bmi.n	41e09a <.LVL462+0x6>
  41e096:	429d      	cmp	r5, r3
  41e098:	dcf9      	bgt.n	41e08e <.LVL460+0x10>
  41e09a:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section .text.SYS_TIME_UpdateTimerList%359:

0041e09c <SYS_TIME_UpdateTimerList>:
    tmr = counterObj->tmrActive;
  41e09c:	4b09      	ldr	r3, [pc, #36]	; (41e0c4 <.LVL76+0x8>)
  41e09e:	6b1a      	ldr	r2, [r3, #48]	; 0x30

0041e0a0 <.LVL72>:
    while ((tmr != NULL) && (elapsedCount > 0))
  41e0a0:	b162      	cbz	r2, 41e0bc <.LVL76>
  41e0a2:	b158      	cbz	r0, 41e0bc <.LVL76>
            tmr->relativeTimePending = 0;
  41e0a4:	2100      	movs	r1, #0
  41e0a6:	e004      	b.n	41e0b2 <.LVL75+0x4>
            elapsedCount -= tmr->relativeTimePending;
  41e0a8:	1ac0      	subs	r0, r0, r3

0041e0aa <.LVL73>:
            tmr->relativeTimePending = 0;
  41e0aa:	6091      	str	r1, [r2, #8]

0041e0ac <.LVL74>:
        tmr = tmr->tmrNext;
  41e0ac:	6992      	ldr	r2, [r2, #24]

0041e0ae <.LVL75>:
    while ((tmr != NULL) && (elapsedCount > 0))
  41e0ae:	b12a      	cbz	r2, 41e0bc <.LVL76>
  41e0b0:	b120      	cbz	r0, 41e0bc <.LVL76>
        if (tmr->relativeTimePending >= elapsedCount)
  41e0b2:	6893      	ldr	r3, [r2, #8]
  41e0b4:	4283      	cmp	r3, r0
  41e0b6:	d3f7      	bcc.n	41e0a8 <.LVL72+0x8>
            tmr->relativeTimePending -= elapsedCount;
  41e0b8:	1a1b      	subs	r3, r3, r0
  41e0ba:	6093      	str	r3, [r2, #8]

0041e0bc <.LVL76>:
    counterObj->hwTimerPreviousValue = counterObj->hwTimerCurrentValue;
  41e0bc:	4b01      	ldr	r3, [pc, #4]	; (41e0c4 <.LVL76+0x8>)
  41e0be:	695a      	ldr	r2, [r3, #20]
  41e0c0:	611a      	str	r2, [r3, #16]
  41e0c2:	4770      	bx	lr
  41e0c4:	20417688 	.word	0x20417688

Disassembly of section .text.__ascii_mbtowc%360:

0041e0c8 <__ascii_mbtowc>:
  41e0c8:	b082      	sub	sp, #8

0041e0ca <.LCFI2>:
  41e0ca:	b149      	cbz	r1, 41e0e0 <.LCFI4>
  41e0cc:	b15a      	cbz	r2, 41e0e6 <.LVL9+0x4>
  41e0ce:	b16b      	cbz	r3, 41e0ec <.LCFI6>
  41e0d0:	7813      	ldrb	r3, [r2, #0]

0041e0d2 <.LVL4>:
  41e0d2:	600b      	str	r3, [r1, #0]
  41e0d4:	7812      	ldrb	r2, [r2, #0]

0041e0d6 <.LVL5>:
  41e0d6:	1c10      	adds	r0, r2, #0

0041e0d8 <.LVL6>:
  41e0d8:	bf18      	it	ne
  41e0da:	2001      	movne	r0, #1
  41e0dc:	b002      	add	sp, #8

0041e0de <.LCFI3>:
  41e0de:	4770      	bx	lr

0041e0e0 <.LCFI4>:
  41e0e0:	a901      	add	r1, sp, #4

0041e0e2 <.LVL9>:
  41e0e2:	2a00      	cmp	r2, #0
  41e0e4:	d1f3      	bne.n	41e0ce <.LCFI2+0x4>
  41e0e6:	4610      	mov	r0, r2

0041e0e8 <.LVL10>:
  41e0e8:	b002      	add	sp, #8

0041e0ea <.LCFI5>:
  41e0ea:	4770      	bx	lr

0041e0ec <.LCFI6>:
  41e0ec:	f06f 0001 	mvn.w	r0, #1

0041e0f0 <.LVL13>:
  41e0f0:	e7f4      	b.n	41e0dc <.LVL6+0x4>

0041e0f2 <.LFE18>:
  41e0f2:	bf00      	nop

Disassembly of section .text._sbrk%361:

0041e0f4 <_sbrk>:
  41e0f4:	4a07      	ldr	r2, [pc, #28]	; (41e114 <_sbrk+0x20>)
  41e0f6:	6813      	ldr	r3, [r2, #0]
  41e0f8:	b143      	cbz	r3, 41e10c <_sbrk+0x18>
  41e0fa:	4907      	ldr	r1, [pc, #28]	; (41e118 <_sbrk+0x24>)
  41e0fc:	4418      	add	r0, r3
  41e0fe:	4288      	cmp	r0, r1
  41e100:	bf9a      	itte	ls
  41e102:	6010      	strls	r0, [r2, #0]
  41e104:	4618      	movls	r0, r3
  41e106:	f04f 30ff 	movhi.w	r0, #4294967295
  41e10a:	4770      	bx	lr
  41e10c:	4b03      	ldr	r3, [pc, #12]	; (41e11c <_sbrk+0x28>)
  41e10e:	6013      	str	r3, [r2, #0]
  41e110:	e7f3      	b.n	41e0fa <_sbrk+0x6>
  41e112:	bf00      	nop
  41e114:	204178a4 	.word	0x204178a4
  41e118:	20420d20 	.word	0x20420d20
  41e11c:	204178b0 	.word	0x204178b0

Disassembly of section .text.fp_sqr%362:

0041e120 <fp_sqr>:
{
  41e120:	b538      	push	{r3, r4, r5, lr}

0041e122 <.LCFI81>:
  41e122:	460c      	mov	r4, r1
    oldused = B->used;
  41e124:	680d      	ldr	r5, [r1, #0]

0041e126 <.LVL553>:
       fp_sqr_comba(A, B);
  41e126:	f7f7 fed9 	bl	415edc <.LFE166>

0041e12a <.L486>:
  for (y = B->used; y >= 0 && y < oldused; y++) {
  41e12a:	6823      	ldr	r3, [r4, #0]

0041e12c <.LVL555>:
  41e12c:	2b00      	cmp	r3, #0
  41e12e:	db0b      	blt.n	41e148 <.LVL557+0x6>
  41e130:	429d      	cmp	r5, r3
  41e132:	dd09      	ble.n	41e148 <.LVL557+0x6>
  41e134:	eb04 0283 	add.w	r2, r4, r3, lsl #2
  41e138:	3204      	adds	r2, #4
    B->dp[y] = 0;
  41e13a:	2100      	movs	r1, #0
  41e13c:	f842 1f04 	str.w	r1, [r2, #4]!

0041e140 <.LVL556>:
  for (y = B->used; y >= 0 && y < oldused; y++) {
  41e140:	3301      	adds	r3, #1

0041e142 <.LVL557>:
  41e142:	d401      	bmi.n	41e148 <.LVL557+0x6>
  41e144:	429d      	cmp	r5, r3
  41e146:	dcf9      	bgt.n	41e13c <.LVL555+0x10>
  41e148:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section .text.fp_add_d%363:

0041e14a <fp_add_d>:
{
  41e14a:	b570      	push	{r4, r5, r6, lr}

0041e14c <.LCFI138>:
  41e14c:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228

0041e150 <.LCFI139>:
  41e150:	4604      	mov	r4, r0
  41e152:	460e      	mov	r6, r1
  41e154:	4615      	mov	r5, r2

0041e156 <.LBB189>:
    fp_zero(a);
  41e156:	4668      	mov	r0, sp

0041e158 <.LVL858>:
  41e158:	f000 fce8 	bl	41eb2c <.LFE154>

0041e15c <.LBE189>:
   fp_set(&tmp, b);
  41e15c:	4631      	mov	r1, r6
  41e15e:	4668      	mov	r0, sp
  41e160:	f000 fcba 	bl	41ead8 <.LFE20>

0041e164 <.LVL860>:
   fp_add(a, &tmp, c);
  41e164:	462a      	mov	r2, r5
  41e166:	4669      	mov	r1, sp
  41e168:	4620      	mov	r0, r4
  41e16a:	f7ff f895 	bl	41d298 <.LFE17>

0041e16e <.LVL861>:
}
  41e16e:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228

0041e172 <.LCFI140>:
  41e172:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section .text.uxListRemove%364:

0041e174 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  41e174:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  41e176:	6842      	ldr	r2, [r0, #4]
  41e178:	6881      	ldr	r1, [r0, #8]
  41e17a:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  41e17c:	6882      	ldr	r2, [r0, #8]
  41e17e:	6841      	ldr	r1, [r0, #4]
  41e180:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  41e182:	685a      	ldr	r2, [r3, #4]
  41e184:	4290      	cmp	r0, r2
  41e186:	d006      	beq.n	41e196 <.LVL15>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  41e188:	2200      	movs	r2, #0
  41e18a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  41e18c:	681a      	ldr	r2, [r3, #0]
  41e18e:	3a01      	subs	r2, #1
  41e190:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  41e192:	6818      	ldr	r0, [r3, #0]

0041e194 <.LVL14>:
}
  41e194:	4770      	bx	lr

0041e196 <.LVL15>:
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  41e196:	6882      	ldr	r2, [r0, #8]
  41e198:	605a      	str	r2, [r3, #4]
  41e19a:	e7f5      	b.n	41e188 <uxListRemove+0x14>

Disassembly of section .text.prvPortStartFirstTask%365:

0041e19c <prvPortStartFirstTask>:
	__asm volatile(
  41e19c:	4808      	ldr	r0, [pc, #32]	; (41e1c0 <.LFE7+0x2>)
  41e19e:	6800      	ldr	r0, [r0, #0]
  41e1a0:	6800      	ldr	r0, [r0, #0]
  41e1a2:	f380 8808 	msr	MSP, r0
  41e1a6:	f04f 0000 	mov.w	r0, #0
  41e1aa:	f380 8814 	msr	CONTROL, r0
  41e1ae:	b662      	cpsie	i
  41e1b0:	b661      	cpsie	f
  41e1b2:	f3bf 8f4f 	dsb	sy
  41e1b6:	f3bf 8f6f 	isb	sy
  41e1ba:	df00      	svc	0
  41e1bc:	bf00      	nop

0041e1be <.LFE7>:
  41e1be:	0000      	.short	0x0000
  41e1c0:	e000ed08 	.word	0xe000ed08

Disassembly of section .text.vPortSetupTimerInterrupt%366:

0041e1c4 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
  41e1c4:	4b05      	ldr	r3, [pc, #20]	; (41e1dc <vPortSetupTimerInterrupt+0x18>)
  41e1c6:	2200      	movs	r2, #0
  41e1c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
  41e1ca:	4905      	ldr	r1, [pc, #20]	; (41e1e0 <vPortSetupTimerInterrupt+0x1c>)
  41e1cc:	600a      	str	r2, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  41e1ce:	4905      	ldr	r1, [pc, #20]	; (41e1e4 <vPortSetupTimerInterrupt+0x20>)
  41e1d0:	4a05      	ldr	r2, [pc, #20]	; (41e1e8 <vPortSetupTimerInterrupt+0x24>)
  41e1d2:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  41e1d4:	2207      	movs	r2, #7
  41e1d6:	601a      	str	r2, [r3, #0]
  41e1d8:	4770      	bx	lr
  41e1da:	bf00      	nop
  41e1dc:	e000e010 	.word	0xe000e010
  41e1e0:	e000e018 	.word	0xe000e018
  41e1e4:	000493df 	.word	0x000493df
  41e1e8:	e000e014 	.word	0xe000e014

Disassembly of section .text.wc_Des3_SetIV%367:

0041e1ec <wc_Des3_SetIV>:
        XMEMSET(des->reg,  0, DES_BLOCK_SIZE);
}

int wc_Des3_SetIV(Des3* des, const byte* iv)
{
    if (des == NULL) {
  41e1ec:	4603      	mov	r3, r0
  41e1ee:	b170      	cbz	r0, 41e20e <.LVL256>
        return BAD_FUNC_ARG;
    }
    if (des && iv)
  41e1f0:	b929      	cbnz	r1, 41e1fe <.LVL254>
        XMEMCPY(des->reg, iv, DES_BLOCK_SIZE);
    else if (des)
        XMEMSET(des->reg,  0, DES_BLOCK_SIZE);
  41e1f2:	2000      	movs	r0, #0

0041e1f4 <.LVL253>:
  41e1f4:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  41e1f8:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
  41e1fc:	4770      	bx	lr

0041e1fe <.LVL254>:
        XMEMCPY(des->reg, iv, DES_BLOCK_SIZE);
  41e1fe:	6808      	ldr	r0, [r1, #0]

0041e200 <.LVL255>:
  41e200:	684a      	ldr	r2, [r1, #4]
  41e202:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  41e206:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

    return 0;
  41e20a:	2000      	movs	r0, #0
  41e20c:	4770      	bx	lr

0041e20e <.LVL256>:
        return BAD_FUNC_ARG;
  41e20e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e212 <.LVL257>:
}
  41e212:	4770      	bx	lr

Disassembly of section .text.wc_ecc_free%368:

0041e214 <wc_ecc_free>:
    if (key == NULL) {
  41e214:	b188      	cbz	r0, 41e23a <.LCFI79>
{
  41e216:	b510      	push	{r4, lr}

0041e218 <.LCFI78>:
  41e218:	4604      	mov	r4, r0
    mp_clear(key->pubkey.x);
  41e21a:	3018      	adds	r0, #24

0041e21c <.LVL947>:
  41e21c:	f000 fdbe 	bl	41ed9c <.LFE170>

0041e220 <.LVL948>:
    mp_clear(key->pubkey.y);
  41e220:	f504 7010 	add.w	r0, r4, #576	; 0x240
  41e224:	f000 fdba 	bl	41ed9c <.LFE170>

0041e228 <.LVL949>:
    mp_clear(key->pubkey.z);
  41e228:	f504 608d 	add.w	r0, r4, #1128	; 0x468
  41e22c:	f000 fdb6 	bl	41ed9c <.LFE170>

0041e230 <.LVL950>:
    mp_forcezero(&key->k);
  41e230:	f504 60d2 	add.w	r0, r4, #1680	; 0x690
  41e234:	f000 fe70 	bl	41ef18 <mp_forcezero>

0041e238 <.LVL951>:
  41e238:	bd10      	pop	{r4, pc}

0041e23a <.LCFI79>:
  41e23a:	4770      	bx	lr

Disassembly of section .text.wc_RsaPrivateDecrypt%369:

0041e23c <wc_RsaPrivateDecrypt>:
{
  41e23c:	b530      	push	{r4, r5, lr}

0041e23e <.LCFI37>:
  41e23e:	b08b      	sub	sp, #44	; 0x2c

0041e240 <.LCFI38>:
    return RsaPrivateDecryptEx((byte*)in, inLen, out, outLen, NULL, key,
  41e240:	2400      	movs	r4, #0
  41e242:	9409      	str	r4, [sp, #36]	; 0x24
  41e244:	9408      	str	r4, [sp, #32]
  41e246:	9407      	str	r4, [sp, #28]
  41e248:	9406      	str	r4, [sp, #24]
  41e24a:	9405      	str	r4, [sp, #20]
  41e24c:	9404      	str	r4, [sp, #16]
  41e24e:	2502      	movs	r5, #2
  41e250:	9503      	str	r5, [sp, #12]
  41e252:	2503      	movs	r5, #3
  41e254:	9502      	str	r5, [sp, #8]
  41e256:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  41e258:	9501      	str	r5, [sp, #4]
  41e25a:	9400      	str	r4, [sp, #0]
  41e25c:	f7f2 fb0e 	bl	41087c <.LFE212>

0041e260 <.LVL278>:
}
  41e260:	b00b      	add	sp, #44	; 0x2c

0041e262 <.LCFI39>:
  41e262:	bd30      	pop	{r4, r5, pc}

Disassembly of section .text.wc_RsaSSL_Sign%370:

0041e264 <wc_RsaSSL_Sign>:
}
#endif

int wc_RsaSSL_Sign(const byte* in, word32 inLen, byte* out, word32 outLen,
                                                   RsaKey* key, WC_RNG* rng)
{
  41e264:	b510      	push	{r4, lr}

0041e266 <.LCFI60>:
  41e266:	b08a      	sub	sp, #40	; 0x28

0041e268 <.LCFI61>:
    return RsaPublicEncryptEx(in, inLen, out, outLen, key,
  41e268:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  41e26a:	9408      	str	r4, [sp, #32]
  41e26c:	2400      	movs	r4, #0
  41e26e:	9407      	str	r4, [sp, #28]
  41e270:	9406      	str	r4, [sp, #24]
  41e272:	9405      	str	r4, [sp, #20]
  41e274:	9404      	str	r4, [sp, #16]
  41e276:	9403      	str	r4, [sp, #12]
  41e278:	2401      	movs	r4, #1
  41e27a:	9402      	str	r4, [sp, #8]
  41e27c:	2402      	movs	r4, #2
  41e27e:	9401      	str	r4, [sp, #4]
  41e280:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  41e282:	9400      	str	r4, [sp, #0]
  41e284:	f7f3 faa4 	bl	4117d0 <.LFE0>

0041e288 <.LVL379>:
        RSA_PRIVATE_ENCRYPT, RSA_BLOCK_TYPE_1, WC_RSA_PKCSV15_PAD,
        WC_HASH_TYPE_NONE, WC_MGF1NONE, NULL, 0, rng);
}
  41e288:	b00a      	add	sp, #40	; 0x28

0041e28a <.LCFI62>:
  41e28a:	bd10      	pop	{r4, pc}

Disassembly of section .text.fp_reverse%371:

0041e28c <fp_reverse>:
  iy = len - 1;
  41e28c:	1e4b      	subs	r3, r1, #1
  while (ix < iy) {
  41e28e:	2b00      	cmp	r3, #0
  41e290:	dd0f      	ble.n	41e2b2 <.LCFI31>
{
  41e292:	b430      	push	{r4, r5}

0041e294 <.LCFI30>:
  41e294:	1e44      	subs	r4, r0, #1
  41e296:	4401      	add	r1, r0

0041e298 <.LVL265>:
  while (ix < iy) {
  41e298:	2200      	movs	r2, #0

0041e29a <.LVL266>:
    t     = s[ix];
  41e29a:	7860      	ldrb	r0, [r4, #1]

0041e29c <.LVL267>:
    s[ix] = s[iy];
  41e29c:	f811 5c01 	ldrb.w	r5, [r1, #-1]
  41e2a0:	f804 5f01 	strb.w	r5, [r4, #1]!
    s[iy] = t;
  41e2a4:	f801 0d01 	strb.w	r0, [r1, #-1]!
    ++ix;
  41e2a8:	3201      	adds	r2, #1
    --iy;
  41e2aa:	3b01      	subs	r3, #1
  while (ix < iy) {
  41e2ac:	429a      	cmp	r2, r3
  41e2ae:	dbf4      	blt.n	41e29a <.LVL266>
}
  41e2b0:	bc30      	pop	{r4, r5}

0041e2b2 <.LCFI31>:
  41e2b2:	4770      	bx	lr

Disassembly of section .text.fp_to_unsigned_bin%372:

0041e2b4 <fp_to_unsigned_bin>:
{
  41e2b4:	b510      	push	{r4, lr}

0041e2b6 <.LCFI121>:
  41e2b6:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228

0041e2ba <.LCFI122>:
  41e2ba:	460c      	mov	r4, r1
  fp_init_copy(&t, a);
  41e2bc:	4601      	mov	r1, r0

0041e2be <.LVL816>:
  41e2be:	4668      	mov	r0, sp

0041e2c0 <.LVL817>:
  41e2c0:	f000 fab2 	bl	41e828 <.LFE54>

0041e2c4 <.LVL818>:
  x = fp_to_unsigned_bin_at_pos(0, &t, b);
  41e2c4:	4622      	mov	r2, r4
  41e2c6:	4669      	mov	r1, sp
  41e2c8:	2000      	movs	r0, #0
  41e2ca:	f7ff fc89 	bl	41dbe0 <.LFE17>

0041e2ce <.LVL819>:
  fp_reverse (b, x);
  41e2ce:	4601      	mov	r1, r0
  41e2d0:	4620      	mov	r0, r4

0041e2d2 <.LVL820>:
  41e2d2:	f7ff ffdb 	bl	41e28c <.LFE192>

0041e2d6 <.LVL821>:
}
  41e2d6:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228

0041e2da <.LCFI123>:
  41e2da:	bd10      	pop	{r4, pc}

Disassembly of section .rodata.order.6596%373:

0041e2dc <order.6596>:
  41e2dc:	0010 0011 0012 0000 0008 0007 0009 0006     ................
  41e2ec:	000a 0005 000b 0004 000c 0003 000d 0002     ................
  41e2fc:	000e 0001 000f bf00                         ........

Disassembly of section .rodata.z_errmsg%374:

0041e304 <z_errmsg>:
  41e304:	abc0 0041 abd0 0041 abdc 0041 abe0 0041     ..A...A...A...A.
  41e314:	abec 0041 abfc 0041 ac08 0041 ac1c 0041     ..A...A...A...A.
  41e324:	ac2c 0041 abdc 0041                         ,.A...A.

Disassembly of section .text.TC0_CH0_TimerInitialize%375:

0041e32c <TC0_CH0_TimerInitialize>:

/* Initialize channel in timer mode */
void TC0_CH0_TimerInitialize (void)
{
    /* Use peripheral clock */
    TC0_REGS->TC_CHANNEL[0].TC_EMR = TC_EMR_NODIVCLK_Msk;
  41e32c:	4b07      	ldr	r3, [pc, #28]	; (41e34c <TC0_CH0_TimerInitialize+0x20>)
  41e32e:	f44f 7280 	mov.w	r2, #256	; 0x100
  41e332:	631a      	str	r2, [r3, #48]	; 0x30
    /* clock selection and waveform selection */
    TC0_REGS->TC_CHANNEL[0].TC_CMR =  TC_CMR_WAVSEL_UP_RC | TC_CMR_WAVE_Msk ;
  41e334:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  41e338:	605a      	str	r2, [r3, #4]

    /* write period */
    TC0_REGS->TC_CHANNEL[0].TC_RC = 60000U;
  41e33a:	f64e 2260 	movw	r2, #60000	; 0xea60
  41e33e:	61da      	str	r2, [r3, #28]


    /* enable interrupt */
    TC0_REGS->TC_CHANNEL[0].TC_IER = TC_IER_CPAS_Msk;
  41e340:	2204      	movs	r2, #4
  41e342:	625a      	str	r2, [r3, #36]	; 0x24
    TC0_CH0_CallbackObj.callback_fn = NULL;
  41e344:	2200      	movs	r2, #0
  41e346:	4b02      	ldr	r3, [pc, #8]	; (41e350 <TC0_CH0_TimerInitialize+0x24>)
  41e348:	601a      	str	r2, [r3, #0]
  41e34a:	4770      	bx	lr
  41e34c:	4000c000 	.word	0x4000c000
  41e350:	20400018 	.word	0x20400018

Disassembly of section .rodata.__mprec_bigtens%376:

0041e358 <__mprec_bigtens>:
  41e358:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  41e368:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  41e378:	7f73bf3c 75154fdd                       <.s..O.u

Disassembly of section .text.wc_RsaPublicEncrypt%377:

0041e380 <wc_RsaPublicEncrypt>:
{
  41e380:	b530      	push	{r4, r5, lr}

0041e382 <.LCFI54>:
  41e382:	b08b      	sub	sp, #44	; 0x2c

0041e384 <.LCFI55>:
    return RsaPublicEncryptEx(in, inLen, out, outLen, key,
  41e384:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  41e386:	9408      	str	r4, [sp, #32]
  41e388:	2400      	movs	r4, #0
  41e38a:	9407      	str	r4, [sp, #28]
  41e38c:	9406      	str	r4, [sp, #24]
  41e38e:	9405      	str	r4, [sp, #20]
  41e390:	9404      	str	r4, [sp, #16]
  41e392:	9403      	str	r4, [sp, #12]
  41e394:	2502      	movs	r5, #2
  41e396:	9502      	str	r5, [sp, #8]
  41e398:	9401      	str	r4, [sp, #4]
  41e39a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  41e39c:	9400      	str	r4, [sp, #0]
  41e39e:	f7f3 fa17 	bl	4117d0 <.LFE0>

0041e3a2 <.LVL375>:
}
  41e3a2:	b00b      	add	sp, #44	; 0x2c

0041e3a4 <.LCFI56>:
  41e3a4:	bd30      	pop	{r4, r5, pc}

Disassembly of section .text.xQueueCreateMutex%378:

0041e3a6 <xQueueCreateMutex>:
	{
  41e3a6:	b510      	push	{r4, lr}

0041e3a8 <.LCFI12>:
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
  41e3a8:	4602      	mov	r2, r0
  41e3aa:	2100      	movs	r1, #0
  41e3ac:	2001      	movs	r0, #1

0041e3ae <.LVL97>:
  41e3ae:	f7ff fd5d 	bl	41de6c <.LFE0>

0041e3b2 <.LBB39>:
		if( pxNewQueue != NULL )
  41e3b2:	4604      	mov	r4, r0
  41e3b4:	b138      	cbz	r0, 41e3c6 <.LBE39>
			pxNewQueue->pxMutexHolder = NULL;
  41e3b6:	2100      	movs	r1, #0
  41e3b8:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
  41e3ba:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
  41e3bc:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
  41e3be:	460b      	mov	r3, r1
  41e3c0:	460a      	mov	r2, r1
  41e3c2:	f7f8 fcc1 	bl	416d48 <xQueueGenericSend>

0041e3c6 <.LBE39>:
	}
  41e3c6:	4620      	mov	r0, r4
  41e3c8:	bd10      	pop	{r4, pc}

Disassembly of section .text.prvTaskExitError%379:

0041e3ca <prvTaskExitError>:
{
  41e3ca:	b082      	sub	sp, #8

0041e3cc <.LCFI0>:
volatile uint32_t ulDummy = 0;
  41e3cc:	2300      	movs	r3, #0
  41e3ce:	9301      	str	r3, [sp, #4]

0041e3d0 <.LBB12>:
	__asm volatile
  41e3d0:	f04f 0320 	mov.w	r3, #32
  41e3d4:	b672      	cpsid	i
  41e3d6:	f383 8811 	msr	BASEPRI, r3
  41e3da:	f3bf 8f6f 	isb	sy
  41e3de:	f3bf 8f4f 	dsb	sy
  41e3e2:	b662      	cpsie	i

0041e3e4 <.LBE12>:
	while( ulDummy == 0 )
  41e3e4:	9b01      	ldr	r3, [sp, #4]
  41e3e6:	2b00      	cmp	r3, #0
  41e3e8:	d0fc      	beq.n	41e3e4 <.LBE12>
}
  41e3ea:	b002      	add	sp, #8

0041e3ec <.LCFI1>:
  41e3ec:	4770      	bx	lr

Disassembly of section .text.SVCall_Handler%380:

0041e3f0 <SVCall_Handler>:
	__asm volatile (
  41e3f0:	4b07      	ldr	r3, [pc, #28]	; (41e410 <pxCurrentTCBConst2>)
  41e3f2:	6819      	ldr	r1, [r3, #0]
  41e3f4:	6808      	ldr	r0, [r1, #0]
  41e3f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41e3fa:	f380 8809 	msr	PSP, r0
  41e3fe:	f3bf 8f6f 	isb	sy
  41e402:	f04f 0000 	mov.w	r0, #0
  41e406:	f380 8811 	msr	BASEPRI, r0
  41e40a:	4770      	bx	lr
  41e40c:	f3af 8000 	nop.w

0041e410 <pxCurrentTCBConst2>:
  41e410:	20417838 	.word	0x20417838

Disassembly of section .text.vPortEnterCritical%381:

0041e414 <vPortEnterCritical>:
  41e414:	f04f 0320 	mov.w	r3, #32
  41e418:	b672      	cpsid	i
  41e41a:	f383 8811 	msr	BASEPRI, r3
  41e41e:	f3bf 8f6f 	isb	sy
  41e422:	f3bf 8f4f 	dsb	sy
  41e426:	b662      	cpsie	i

0041e428 <.LBE14>:
	uxCriticalNesting++;
  41e428:	4a02      	ldr	r2, [pc, #8]	; (41e434 <.LBE14+0xc>)
  41e42a:	6813      	ldr	r3, [r2, #0]
  41e42c:	3301      	adds	r3, #1
  41e42e:	6013      	str	r3, [r2, #0]
  41e430:	4770      	bx	lr
  41e432:	bf00      	nop
  41e434:	2041787c 	.word	0x2041787c

Disassembly of section .text.wc_ecc_del_point_h%382:

0041e438 <wc_ecc_del_point_h>:
   if (p != NULL) {
  41e438:	b178      	cbz	r0, 41e45a <.LCFI33>
{
  41e43a:	b510      	push	{r4, lr}

0041e43c <.LCFI32>:
  41e43c:	4604      	mov	r4, r0
      mp_clear(p->x);
  41e43e:	f000 fcad 	bl	41ed9c <.LFE170>

0041e442 <.LVL522>:
      mp_clear(p->y);
  41e442:	f504 700a 	add.w	r0, r4, #552	; 0x228
  41e446:	f000 fca9 	bl	41ed9c <.LFE170>

0041e44a <.LVL523>:
      mp_clear(p->z);
  41e44a:	f504 608a 	add.w	r0, r4, #1104	; 0x450
  41e44e:	f000 fca5 	bl	41ed9c <.LFE170>

0041e452 <.LBB24>:
      XFREE(p, heap, DYNAMIC_TYPE_ECC);
  41e452:	4620      	mov	r0, r4
  41e454:	f000 fac2 	bl	41e9dc <.LFE2>

0041e458 <.LVL525>:
  41e458:	bd10      	pop	{r4, pc}

0041e45a <.LCFI33>:
  41e45a:	4770      	bx	lr

Disassembly of section .text.wc_ecc_is_valid_idx%383:

0041e45c <wc_ecc_is_valid_idx>:
{
  41e45c:	4a07      	ldr	r2, [pc, #28]	; (41e47c <.LVL690+0x6>)
  41e45e:	2300      	movs	r3, #0

0041e460 <.LVL688>:
   for (x = 0; ecc_sets[x].size != 0; x++)
  41e460:	3301      	adds	r3, #1
  41e462:	f852 1f34 	ldr.w	r1, [r2, #52]!
  41e466:	2900      	cmp	r1, #0
  41e468:	d1fa      	bne.n	41e460 <.LVL688>
}
  41e46a:	f1b0 3fff 	cmp.w	r0, #4294967295
  41e46e:	bfa8      	it	ge
  41e470:	4283      	cmpge	r3, r0
  41e472:	bfcc      	ite	gt
  41e474:	2001      	movgt	r0, #1

0041e476 <.LVL690>:
  41e476:	2000      	movle	r0, #0
  41e478:	4770      	bx	lr
  41e47a:	bf00      	nop
  41e47c:	00414728 	.word	0x00414728

Disassembly of section .text.fp_copy%384:

0041e480 <fp_copy>:
    if (a != b) {
  41e480:	4288      	cmp	r0, r1
  41e482:	d00e      	beq.n	41e4a2 <.LCFI60>
{
  41e484:	b508      	push	{r3, lr}

0041e486 <.LCFI59>:
  41e486:	460b      	mov	r3, r1
        b->used = a->used;
  41e488:	6802      	ldr	r2, [r0, #0]
  41e48a:	600a      	str	r2, [r1, #0]
        b->sign = a->sign;
  41e48c:	6842      	ldr	r2, [r0, #4]
  41e48e:	604a      	str	r2, [r1, #4]
        XMEMCPY(b->dp, a->dp, FP_SIZE * sizeof(fp_digit));
  41e490:	f44f 7208 	mov.w	r2, #544	; 0x220
  41e494:	f100 0108 	add.w	r1, r0, #8

0041e498 <.LVL388>:
  41e498:	f103 0008 	add.w	r0, r3, #8

0041e49c <.LVL389>:
  41e49c:	f7f8 f9f4 	bl	416888 <memcpy>

0041e4a0 <.LVL390>:
  41e4a0:	bd08      	pop	{r3, pc}

0041e4a2 <.LCFI60>:
  41e4a2:	4770      	bx	lr

Disassembly of section .text._sbrk_r%385:

0041e4a4 <_sbrk_r>:
  41e4a4:	b538      	push	{r3, r4, r5, lr}

0041e4a6 <.LCFI0>:
  41e4a6:	4c07      	ldr	r4, [pc, #28]	; (41e4c4 <.LVL4>)
  41e4a8:	2300      	movs	r3, #0
  41e4aa:	4605      	mov	r5, r0
  41e4ac:	4608      	mov	r0, r1

0041e4ae <.LVL1>:
  41e4ae:	6023      	str	r3, [r4, #0]
  41e4b0:	f7ff fe20 	bl	41e0f4 <_sbrk>

0041e4b4 <.LVL2>:
  41e4b4:	1c43      	adds	r3, r0, #1
  41e4b6:	d000      	beq.n	41e4ba <.LVL2+0x6>
  41e4b8:	bd38      	pop	{r3, r4, r5, pc}
  41e4ba:	6823      	ldr	r3, [r4, #0]
  41e4bc:	2b00      	cmp	r3, #0
  41e4be:	d0fb      	beq.n	41e4b8 <.LVL2+0x4>
  41e4c0:	602b      	str	r3, [r5, #0]
  41e4c2:	bd38      	pop	{r3, r4, r5, pc}

0041e4c4 <.LVL4>:
  41e4c4:	20400050 	.word	0x20400050

Disassembly of section .text.fp_leading_bit%386:

0041e4c8 <fp_leading_bit>:
    if (a->used != 0) {
  41e4c8:	6801      	ldr	r1, [r0, #0]
  41e4ca:	b161      	cbz	r1, 41e4e6 <.LBE11>

0041e4cc <.LBB10>:
        fp_digit q = a->dp[a->used - 1];
  41e4cc:	3101      	adds	r1, #1
  41e4ce:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]

0041e4d2 <.LVL230>:
  41e4d2:	2204      	movs	r2, #4

0041e4d4 <.LBE10>:
    int bit = 0;
  41e4d4:	2100      	movs	r1, #0

0041e4d6 <.LBB11>:
            if ((unsigned char)q != 0)
  41e4d6:	f013 0fff 	tst.w	r3, #255	; 0xff
                bit = (q & 0x80) != 0;
  41e4da:	bf18      	it	ne
  41e4dc:	f3c3 11c0 	ubfxne	r1, r3, #7, #1
            q >>= 8;
  41e4e0:	0a1b      	lsrs	r3, r3, #8

0041e4e2 <.LVL233>:
        while (qSz > 0) {
  41e4e2:	3a01      	subs	r2, #1

0041e4e4 <.LVL234>:
  41e4e4:	d1f7      	bne.n	41e4d6 <.LBB11>

0041e4e6 <.LBE11>:
}
  41e4e6:	4608      	mov	r0, r1

0041e4e8 <.LVL236>:
  41e4e8:	4770      	bx	lr

Disassembly of section .text.fp_forcezero%387:

0041e4ea <fp_forcezero>:
{
  41e4ea:	b410      	push	{r4}

0041e4ec <.LCFI45>:
    a->used = 0;
  41e4ec:	2300      	movs	r3, #0
  41e4ee:	6003      	str	r3, [r0, #0]
    a->sign = FP_ZPOS;
  41e4f0:	6043      	str	r3, [r0, #4]

0041e4f2 <.LVL346>:
  41e4f2:	f500 740a 	add.w	r4, r0, #552	; 0x228

0041e4f6 <.LBB22>:
    volatile byte* z = (volatile byte*)mem;
  41e4f6:	f100 0308 	add.w	r3, r0, #8

0041e4fa <.LVL347>:
    while (len--) *z++ = 0;
  41e4fa:	2100      	movs	r1, #0

0041e4fc <.LVL348>:
  41e4fc:	1c5a      	adds	r2, r3, #1

0041e4fe <.LVL349>:
  41e4fe:	7019      	strb	r1, [r3, #0]

0041e500 <.LVL350>:
  41e500:	4613      	mov	r3, r2
  41e502:	42a2      	cmp	r2, r4
  41e504:	d1fa      	bne.n	41e4fc <.LVL348>

0041e506 <.LBE22>:
}
  41e506:	f85d 4b04 	ldr.w	r4, [sp], #4

0041e50a <.LCFI46>:
  41e50a:	4770      	bx	lr

Disassembly of section .text.inflateReset%388:

0041e50c <inflateReset>:
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  41e50c:	b148      	cbz	r0, 41e522 <.LCFI4>
{
  41e50e:	b508      	push	{r3, lr}

0041e510 <.LCFI3>:
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  41e510:	69c2      	ldr	r2, [r0, #28]
  41e512:	b14a      	cbz	r2, 41e528 <.LCFI5>

0041e514 <.LVL43>:
    state->wsize = 0;
  41e514:	2300      	movs	r3, #0
  41e516:	6293      	str	r3, [r2, #40]	; 0x28
    state->whave = 0;
  41e518:	62d3      	str	r3, [r2, #44]	; 0x2c
    state->wnext = 0;
  41e51a:	6313      	str	r3, [r2, #48]	; 0x30
    return inflateResetKeep(strm);
  41e51c:	f7fe fc36 	bl	41cd8c <.LFE42>

0041e520 <.LVL44>:
  41e520:	bd08      	pop	{r3, pc}

0041e522 <.LCFI4>:
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  41e522:	f06f 0001 	mvn.w	r0, #1

0041e526 <.LVL46>:
  41e526:	4770      	bx	lr

0041e528 <.LCFI5>:
  41e528:	f06f 0001 	mvn.w	r0, #1

0041e52c <.LVL48>:
}
  41e52c:	bd08      	pop	{r3, pc}

Disassembly of section .text.CRYPT_AES_KeySet%389:

0041e52e <CRYPT_AES_KeySet>:
                     unsigned int keyLen, const unsigned char* iv, int dir)
{
    typedef char aes_test[sizeof(CRYPT_AES_CTX) >= sizeof(Aes) ? 1 : -1];
    (void)sizeof(aes_test);

    if (aes == NULL || key == NULL)
  41e52e:	b158      	cbz	r0, 41e548 <.LCFI61>
{
  41e530:	b510      	push	{r4, lr}

0041e532 <.LCFI57>:
  41e532:	b082      	sub	sp, #8

0041e534 <.LCFI58>:
    if (aes == NULL || key == NULL)
  41e534:	b129      	cbz	r1, 41e542 <.LCFI60>
        return BAD_FUNC_ARG;

    return wc_AesSetKey((Aes*)aes, key, keyLen, iv, dir);
  41e536:	9c04      	ldr	r4, [sp, #16]
  41e538:	9400      	str	r4, [sp, #0]
  41e53a:	f7fe fc53 	bl	41cde4 <.LFE0>

0041e53e <.LVL161>:
}
  41e53e:	b002      	add	sp, #8

0041e540 <.LCFI59>:
  41e540:	bd10      	pop	{r4, pc}

0041e542 <.LCFI60>:
        return BAD_FUNC_ARG;
  41e542:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e546 <.LVL163>:
  41e546:	e7fa      	b.n	41e53e <.LVL161>

0041e548 <.LCFI61>:
  41e548:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e54c <.LVL165>:
  41e54c:	4770      	bx	lr

Disassembly of section .rodata.bytebit%390:

0041e550 <bytebit>:
  41e550:	0080 0000 0040 0000 0020 0000 0010 0000     ....@... .......
  41e560:	0008 0000 0004 0000 0002 0000 0001 0000     ................

Disassembly of section .text.Console_UART_ReadC%391:

0041e570 <Console_UART_ReadC>:
{
  41e570:	b500      	push	{lr}

0041e572 <.LCFI1>:
  41e572:	b083      	sub	sp, #12

0041e574 <.LCFI2>:
    USART1_Read(&readBuffer, 1);
  41e574:	2101      	movs	r1, #1
  41e576:	f10d 0007 	add.w	r0, sp, #7

0041e57a <.LVL13>:
  41e57a:	f7ff fa69 	bl	41da50 <.LFE145>

0041e57e <.LVL14>:
    while (USART1_ReadCountGet() == 0);
  41e57e:	f000 fc3d 	bl	41edfc <.LFE149>

0041e582 <.LVL15>:
  41e582:	2800      	cmp	r0, #0
  41e584:	d0fb      	beq.n	41e57e <.LVL14>
}
  41e586:	f89d 0007 	ldrb.w	r0, [sp, #7]
  41e58a:	b003      	add	sp, #12

0041e58c <.LCFI3>:
  41e58c:	f85d fb04 	ldr.w	pc, [sp], #4

Disassembly of section .text.SYS_DEBUG_Initialize%392:

0041e590 <SYS_DEBUG_Initialize>:

SYS_MODULE_OBJ SYS_DEBUG_Initialize(const SYS_MODULE_INDEX index, const SYS_MODULE_INIT * const init )
{
    SYS_DEBUG_INIT *initConfig = (SYS_DEBUG_INIT*)init;

    gblErrLvl = initConfig->errorLevel;
  41e590:	784a      	ldrb	r2, [r1, #1]
  41e592:	4b05      	ldr	r3, [pc, #20]	; (41e5a8 <.LVL1+0xa>)
  41e594:	701a      	strb	r2, [r3, #0]

    sysDebugInstance.debugConsole = initConfig->consoleIndex;
  41e596:	884a      	ldrh	r2, [r1, #2]
  41e598:	4b04      	ldr	r3, [pc, #16]	; (41e5ac <.LVL1+0xe>)
  41e59a:	805a      	strh	r2, [r3, #2]
    sysDebugInstance.state = SYS_DEBUG_STATE_IDLE;
  41e59c:	2000      	movs	r0, #0

0041e59e <.LVL1>:
  41e59e:	7058      	strb	r0, [r3, #1]
    sysDebugInstance.status = SYS_STATUS_READY;
  41e5a0:	2202      	movs	r2, #2
  41e5a2:	701a      	strb	r2, [r3, #0]
    sysDebugInstance.prtBufPtr = 0;
  41e5a4:	6058      	str	r0, [r3, #4]

    return SYS_MODULE_OBJ_STATIC;
}
  41e5a6:	4770      	bx	lr
  41e5a8:	20400014 	.word	0x20400014
  41e5ac:	2040000c 	.word	0x2040000c

Disassembly of section .text.TC0_CH0_InterruptHandler%393:

0041e5b0 <TC0_CH0_InterruptHandler>:
    TC0_CH0_CallbackObj.callback_fn = callback;
    TC0_CH0_CallbackObj.context = context;
}

void TC0_CH0_InterruptHandler(void)
{
  41e5b0:	b508      	push	{r3, lr}

0041e5b2 <.LCFI0>:
    TC_TIMER_STATUS timer_status = TC0_REGS->TC_CHANNEL[0].TC_SR & TC_TIMER_STATUS_MSK;
  41e5b2:	4b05      	ldr	r3, [pc, #20]	; (41e5c8 <.LVL4+0x8>)
  41e5b4:	6a18      	ldr	r0, [r3, #32]

0041e5b6 <.LVL3>:
    /* Call registered callback function */
    if (TC0_CH0_CallbackObj.callback_fn != NULL)
  41e5b6:	4b05      	ldr	r3, [pc, #20]	; (41e5cc <.LVL4+0xc>)
  41e5b8:	681b      	ldr	r3, [r3, #0]
  41e5ba:	b123      	cbz	r3, 41e5c6 <.LVL4+0x6>
  41e5bc:	f000 0014 	and.w	r0, r0, #20

0041e5c0 <.LVL4>:
    {
        TC0_CH0_CallbackObj.callback_fn(timer_status, TC0_CH0_CallbackObj.context);
  41e5c0:	4a02      	ldr	r2, [pc, #8]	; (41e5cc <.LVL4+0xc>)
  41e5c2:	6851      	ldr	r1, [r2, #4]
  41e5c4:	4798      	blx	r3
  41e5c6:	bd08      	pop	{r3, pc}
  41e5c8:	4000c000 	.word	0x4000c000
  41e5cc:	20400018 	.word	0x20400018

Disassembly of section .text.OSAL_MUTEX_Lock%394:

0041e5d0 <OSAL_MUTEX_Lock>:

  Remarks:

 */
OSAL_RESULT OSAL_MUTEX_Lock(OSAL_MUTEX_HANDLE_TYPE* mutexID, uint16_t waitMS)
{
  41e5d0:	b508      	push	{r3, lr}

0041e5d2 <.LCFI14>:
   }
   else
   {
      timeout = (TickType_t)(waitMS / portTICK_PERIOD_MS);
   }
   if (xSemaphoreTake(*(SemaphoreHandle_t*)mutexID, timeout) == pdTRUE)
  41e5d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41e5d6:	4299      	cmp	r1, r3
  41e5d8:	bf08      	it	eq
  41e5da:	f04f 31ff 	moveq.w	r1, #4294967295

0041e5de <.LVL52>:
  41e5de:	6800      	ldr	r0, [r0, #0]

0041e5e0 <.LVL53>:
  41e5e0:	f7f7 ff52 	bl	416488 <.LBE157>

0041e5e4 <.LVL54>:
      return OSAL_RESULT_TRUE;
   else
      return OSAL_RESULT_FALSE;
}
  41e5e4:	2801      	cmp	r0, #1
  41e5e6:	bf14      	ite	ne
  41e5e8:	2000      	movne	r0, #0
  41e5ea:	2001      	moveq	r0, #1
  41e5ec:	bd08      	pop	{r3, pc}

Disassembly of section .text.CRYPT_RNG_BlockGenerate%395:

0041e5ee <CRYPT_RNG_BlockGenerate>:
    if (rng == NULL || b == NULL)
  41e5ee:	b150      	cbz	r0, 41e606 <.LCFI48>
{
  41e5f0:	b508      	push	{r3, lr}

0041e5f2 <.LCFI47>:
  41e5f2:	460b      	mov	r3, r1
    if (rng == NULL || b == NULL)
  41e5f4:	b121      	cbz	r1, 41e600 <.LVL132>
  41e5f6:	4611      	mov	r1, r2

0041e5f8 <.LVL129>:
  41e5f8:	4618      	mov	r0, r3

0041e5fa <.LVL130>:
    return pic32c_RNG_GenerateBlock(b, sz);
  41e5fa:	f7fe ffd3 	bl	41d5a4 <.LFE18>

0041e5fe <.LVL131>:
  41e5fe:	bd08      	pop	{r3, pc}

0041e600 <.LVL132>:
        return BAD_FUNC_ARG;
  41e600:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e604 <.LVL133>:
}
  41e604:	bd08      	pop	{r3, pc}

0041e606 <.LCFI48>:
        return BAD_FUNC_ARG;
  41e606:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e60a <.LVL135>:
  41e60a:	4770      	bx	lr

Disassembly of section .text.CRYPT_TDES_CBC_Encrypt%396:

0041e60c <CRYPT_TDES_CBC_Encrypt>:
    if (tdes == NULL || out == NULL || in == NULL)
  41e60c:	2a00      	cmp	r2, #0
  41e60e:	bf18      	it	ne
  41e610:	2900      	cmpne	r1, #0
  41e612:	d007      	beq.n	41e624 <.LCFI54>
{
  41e614:	b538      	push	{r3, r4, r5, lr}

0041e616 <.LCFI53>:
    if (tdes == NULL || out == NULL || in == NULL)
  41e616:	b110      	cbz	r0, 41e61e <.LVL150>
    return wc_Des3_CbcEncrypt((Des3*)tdes, out, in, inSz);
  41e618:	f7fb fe62 	bl	41a2e0 <.LFE25>

0041e61c <.LVL149>:
  41e61c:	bd38      	pop	{r3, r4, r5, pc}

0041e61e <.LVL150>:
        return BAD_FUNC_ARG;
  41e61e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e622 <.LVL151>:
}
  41e622:	bd38      	pop	{r3, r4, r5, pc}

0041e624 <.LCFI54>:
        return BAD_FUNC_ARG;
  41e624:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e628 <.LVL153>:
  41e628:	4770      	bx	lr

Disassembly of section .text.CRYPT_TDES_CBC_Decrypt%397:

0041e62a <CRYPT_TDES_CBC_Decrypt>:
    if (tdes == NULL || out == NULL || in == NULL)
  41e62a:	2a00      	cmp	r2, #0
  41e62c:	bf18      	it	ne
  41e62e:	2900      	cmpne	r1, #0
  41e630:	d007      	beq.n	41e642 <.LCFI56>
{
  41e632:	b538      	push	{r3, r4, r5, lr}

0041e634 <.LCFI55>:
    if (tdes == NULL || out == NULL || in == NULL)
  41e634:	b110      	cbz	r0, 41e63c <.LVL156>
    return wc_Des3_CbcDecrypt((Des3*)tdes, out, in, inSz);
  41e636:	f7fb f9b7 	bl	4199a8 <.LFE27>

0041e63a <.LVL155>:
  41e63a:	bd38      	pop	{r3, r4, r5, pc}

0041e63c <.LVL156>:
        return BAD_FUNC_ARG;
  41e63c:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e640 <.LVL157>:
}
  41e640:	bd38      	pop	{r3, r4, r5, pc}

0041e642 <.LCFI56>:
        return BAD_FUNC_ARG;
  41e642:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e646 <.LVL159>:
  41e646:	4770      	bx	lr

Disassembly of section .text.CRYPT_AES_CBC_Encrypt%398:

0041e648 <CRYPT_AES_CBC_Encrypt>:

/* AES CBC Encrypt */
int CRYPT_AES_CBC_Encrypt(CRYPT_AES_CTX* aes, unsigned char* out,
                          const unsigned char* in, unsigned int inSz)
{
    if (aes == NULL || out == NULL || in == NULL)
  41e648:	2a00      	cmp	r2, #0
  41e64a:	bf18      	it	ne
  41e64c:	2900      	cmpne	r1, #0
  41e64e:	d007      	beq.n	41e660 <.LCFI65>
{
  41e650:	b538      	push	{r3, r4, r5, lr}

0041e652 <.LCFI64>:
    if (aes == NULL || out == NULL || in == NULL)
  41e652:	b110      	cbz	r0, 41e65a <.LVL174>
        return BAD_FUNC_ARG;

    return wc_AesCbcEncrypt((Aes*)aes, out, in, inSz);
  41e654:	f7fa fad8 	bl	418c08 <.LFE162>

0041e658 <.LVL173>:
  41e658:	bd38      	pop	{r3, r4, r5, pc}

0041e65a <.LVL174>:
        return BAD_FUNC_ARG;
  41e65a:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e65e <.LVL175>:
}
  41e65e:	bd38      	pop	{r3, r4, r5, pc}

0041e660 <.LCFI65>:
        return BAD_FUNC_ARG;
  41e660:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e664 <.LVL177>:
  41e664:	4770      	bx	lr

Disassembly of section .text.CRYPT_AES_CBC_Decrypt%399:

0041e666 <CRYPT_AES_CBC_Decrypt>:

/* AES CBC Decrypt */
int CRYPT_AES_CBC_Decrypt(CRYPT_AES_CTX* aes, unsigned char* out,
                          const unsigned char* in, unsigned int inSz)
{
    if (aes == NULL || out == NULL || in == NULL)
  41e666:	2a00      	cmp	r2, #0
  41e668:	bf18      	it	ne
  41e66a:	2900      	cmpne	r1, #0
  41e66c:	d007      	beq.n	41e67e <.LCFI67>
{
  41e66e:	b538      	push	{r3, r4, r5, lr}

0041e670 <.LCFI66>:
    if (aes == NULL || out == NULL || in == NULL)
  41e670:	b110      	cbz	r0, 41e678 <.LVL180>
        return BAD_FUNC_ARG;

    return wc_AesCbcDecrypt((Aes*)aes, out, in, inSz);
  41e672:	f7fb fb4f 	bl	419d14 <.LFE27>

0041e676 <.LVL179>:
  41e676:	bd38      	pop	{r3, r4, r5, pc}

0041e678 <.LVL180>:
        return BAD_FUNC_ARG;
  41e678:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e67c <.LVL181>:
}
  41e67c:	bd38      	pop	{r3, r4, r5, pc}

0041e67e <.LCFI67>:
        return BAD_FUNC_ARG;
  41e67e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e682 <.LVL183>:
  41e682:	4770      	bx	lr

Disassembly of section .text.CRYPT_AES_CTR_Encrypt%400:

0041e684 <CRYPT_AES_CTR_Encrypt>:

/* AES CTR Encrypt (used for decrypt too, with ENCRYPT key setup) */
int CRYPT_AES_CTR_Encrypt(CRYPT_AES_CTX* aes, unsigned char* out,
                          const unsigned char* in, unsigned int inSz)
{
    if (aes == NULL || out == NULL || in == NULL)
  41e684:	2a00      	cmp	r2, #0
  41e686:	bf18      	it	ne
  41e688:	2900      	cmpne	r1, #0
  41e68a:	d007      	beq.n	41e69c <.LCFI69>
{
  41e68c:	b538      	push	{r3, r4, r5, lr}

0041e68e <.LCFI68>:
    if (aes == NULL || out == NULL || in == NULL)
  41e68e:	b110      	cbz	r0, 41e696 <.LVL186>
        return BAD_FUNC_ARG;

    return wc_AesCtrEncrypt((Aes*)aes, out, in, inSz);
  41e690:	f7fb ff12 	bl	41a4b8 <.LFE14>

0041e694 <.LVL185>:
  41e694:	bd38      	pop	{r3, r4, r5, pc}

0041e696 <.LVL186>:
        return BAD_FUNC_ARG;
  41e696:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e69a <.LVL187>:
}
  41e69a:	bd38      	pop	{r3, r4, r5, pc}

0041e69c <.LCFI69>:
        return BAD_FUNC_ARG;
  41e69c:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e6a0 <.LVL189>:
  41e6a0:	4770      	bx	lr

Disassembly of section .text.putShortMSB%401:

0041e6a2 <putShortMSB>:
{
  41e6a2:	b410      	push	{r4}

0041e6a4 <.LCFI0>:
    put_byte(s, (Byte)(b >> 8));
  41e6a4:	6882      	ldr	r2, [r0, #8]
  41e6a6:	6943      	ldr	r3, [r0, #20]
  41e6a8:	1c5c      	adds	r4, r3, #1
  41e6aa:	6144      	str	r4, [r0, #20]
  41e6ac:	0a0c      	lsrs	r4, r1, #8
  41e6ae:	54d4      	strb	r4, [r2, r3]
    put_byte(s, (Byte)(b & 0xff));
  41e6b0:	6882      	ldr	r2, [r0, #8]
  41e6b2:	6943      	ldr	r3, [r0, #20]
  41e6b4:	1c5c      	adds	r4, r3, #1
  41e6b6:	6144      	str	r4, [r0, #20]
  41e6b8:	54d1      	strb	r1, [r2, r3]
}
  41e6ba:	f85d 4b04 	ldr.w	r4, [sp], #4

0041e6be <.LCFI1>:
  41e6be:	4770      	bx	lr

Disassembly of section .text.vTaskPlaceOnEventList%402:

0041e6c0 <vTaskPlaceOnEventList>:
{
  41e6c0:	b510      	push	{r4, lr}

0041e6c2 <.LCFI22>:
  41e6c2:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  41e6c4:	4b04      	ldr	r3, [pc, #16]	; (41e6d8 <.LVL237>)
  41e6c6:	6819      	ldr	r1, [r3, #0]

0041e6c8 <.LVL234>:
  41e6c8:	3118      	adds	r1, #24
  41e6ca:	f7ff fb80 	bl	41ddce <.LFE9>

0041e6ce <.LVL235>:
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
  41e6ce:	2101      	movs	r1, #1
  41e6d0:	4620      	mov	r0, r4
  41e6d2:	f7fd f815 	bl	41b700 <.LFE3>

0041e6d6 <.LVL236>:
  41e6d6:	bd10      	pop	{r4, pc}

0041e6d8 <.LVL237>:
  41e6d8:	20417838 	.word	0x20417838

Disassembly of section .text.pvTaskIncrementMutexHeldCount%403:

0041e6dc <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
  41e6dc:	4b05      	ldr	r3, [pc, #20]	; (41e6f4 <.LFE27+0x18>)
  41e6de:	681b      	ldr	r3, [r3, #0]
  41e6e0:	b123      	cbz	r3, 41e6ec <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
  41e6e2:	4b04      	ldr	r3, [pc, #16]	; (41e6f4 <.LFE27+0x18>)
  41e6e4:	681a      	ldr	r2, [r3, #0]
  41e6e6:	6c93      	ldr	r3, [r2, #72]	; 0x48
  41e6e8:	3301      	adds	r3, #1
  41e6ea:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
  41e6ec:	4b01      	ldr	r3, [pc, #4]	; (41e6f4 <.LFE27+0x18>)
  41e6ee:	6818      	ldr	r0, [r3, #0]
	}
  41e6f0:	4770      	bx	lr
  41e6f2:	bf00      	nop
  41e6f4:	20417838 	.word	0x20417838

Disassembly of section .text.wc_Des_SetKey%404:

0041e6f8 <wc_Des_SetKey>:
    {
  41e6f8:	b570      	push	{r4, r5, r6, lr}

0041e6fa <.LCFI17>:
  41e6fa:	4606      	mov	r6, r0
  41e6fc:	460c      	mov	r4, r1
  41e6fe:	461d      	mov	r5, r3
        wc_Des_SetIV(des, iv);
  41e700:	4611      	mov	r1, r2

0041e702 <.LVL249>:
  41e702:	f000 f877 	bl	41e7f4 <.LFE18>

0041e706 <.LVL250>:
        return DesSetKey(key, dir, des->key);
  41e706:	f106 0210 	add.w	r2, r6, #16
  41e70a:	4629      	mov	r1, r5
  41e70c:	4620      	mov	r0, r4
  41e70e:	f7f7 fe09 	bl	416324 <.LFE170>

0041e712 <.LVL251>:
    }
  41e712:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section .text.fp_unsigned_bin_size%405:

0041e714 <fp_unsigned_bin_size>:
{
  41e714:	b508      	push	{r3, lr}

0041e716 <.LCFI25>:
  int     size = fp_count_bits (a);
  41e716:	f000 f87a 	bl	41e80e <.LFE26>

0041e71a <.LVL227>:
  return (size / 8 + ((size & 7) != 0 ? 1 : 0));
  41e71a:	f010 0307 	ands.w	r3, r0, #7
  41e71e:	bf18      	it	ne
  41e720:	2301      	movne	r3, #1
  41e722:	4602      	mov	r2, r0
  41e724:	2800      	cmp	r0, #0
  41e726:	bfb8      	it	lt
  41e728:	1dc2      	addlt	r2, r0, #7
}
  41e72a:	eb03 00e2 	add.w	r0, r3, r2, asr #3

0041e72e <.LVL228>:
  41e72e:	bd08      	pop	{r3, pc}

Disassembly of section .text.get_digit%406:

0041e730 <get_digit>:
    return a->used;
}

mp_digit get_digit(mp_int* a, int n)
{
    if (a == NULL)
  41e730:	b140      	cbz	r0, 41e744 <.LVL7>
        return 0;

    return (n >= a->used || n < 0) ? 0 : a->dp[n];
  41e732:	6802      	ldr	r2, [r0, #0]
  41e734:	428a      	cmp	r2, r1
  41e736:	dd07      	ble.n	41e748 <.LVL9>
  41e738:	2900      	cmp	r1, #0
  41e73a:	db05      	blt.n	41e748 <.LVL9>
  41e73c:	3102      	adds	r1, #2

0041e73e <.LVL5>:
  41e73e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]

0041e742 <.LVL6>:
  41e742:	4770      	bx	lr

0041e744 <.LVL7>:
        return 0;
  41e744:	2000      	movs	r0, #0

0041e746 <.LVL8>:
  41e746:	4770      	bx	lr

0041e748 <.LVL9>:
    return (n >= a->used || n < 0) ? 0 : a->dp[n];
  41e748:	2000      	movs	r0, #0

0041e74a <.LVL10>:
}
  41e74a:	4770      	bx	lr

Disassembly of section .text.SYS_CONSOLE_Tasks%407:

0041e74c <SYS_CONSOLE_Tasks>:
{
  41e74c:	b508      	push	{r3, lr}

0041e74e <.LCFI6>:
    if (consoleDeviceInstance[(SYS_MODULE_INDEX)object].consoleInstanceDevDesc == NULL)
  41e74e:	b283      	uxth	r3, r0
  41e750:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  41e754:	4a03      	ldr	r2, [pc, #12]	; (41e764 <.LVL31+0x2>)
  41e756:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  41e75a:	685b      	ldr	r3, [r3, #4]
  41e75c:	b10b      	cbz	r3, 41e762 <.LVL31>
    consoleDeviceInstance[(SYS_MODULE_INDEX)object].consoleInstanceDevDesc->sysConsoleTasks(object);
  41e75e:	695b      	ldr	r3, [r3, #20]
  41e760:	4798      	blx	r3

0041e762 <.LVL31>:
  41e762:	bd08      	pop	{r3, pc}
  41e764:	2041781c 	.word	0x2041781c

Disassembly of section .text.popQueue%408:

0041e768 <popQueue>:
    (q->tailPos < (q->elemArrSz - 1)) ? q->tailPos++ : (q->tailPos = 0);
  41e768:	6802      	ldr	r2, [r0, #0]
  41e76a:	6903      	ldr	r3, [r0, #16]
  41e76c:	3b01      	subs	r3, #1
  41e76e:	429a      	cmp	r2, r3
  41e770:	d305      	bcc.n	41e77e <popQueue+0x16>
  41e772:	2300      	movs	r3, #0
  41e774:	6003      	str	r3, [r0, #0]
    q->numElem--;
  41e776:	6883      	ldr	r3, [r0, #8]
  41e778:	3b01      	subs	r3, #1
  41e77a:	6083      	str	r3, [r0, #8]
  41e77c:	4770      	bx	lr
    (q->tailPos < (q->elemArrSz - 1)) ? q->tailPos++ : (q->tailPos = 0);
  41e77e:	3201      	adds	r2, #1
  41e780:	6002      	str	r2, [r0, #0]
  41e782:	e7f8      	b.n	41e776 <popQueue+0xe>

Disassembly of section .text.SYS_TIME_Counter64Update%409:

0041e784 <SYS_TIME_Counter64Update>:
    uint32_t prevSwCounter32Bit = counterObj->swCounter64Low;
  41e784:	4a05      	ldr	r2, [pc, #20]	; (41e79c <.LVL30+0x8>)
  41e786:	6a53      	ldr	r3, [r2, #36]	; 0x24

0041e788 <.LVL26>:
    newSwCounter32Bit = prevSwCounter32Bit + elapsedCount;
  41e788:	4418      	add	r0, r3

0041e78a <.LBE10>:
    counterObj->swCounter64Low = SYS_TIME_Counter32Update(elapsedCount, &isSwCounter32Oveflow);
  41e78a:	6250      	str	r0, [r2, #36]	; 0x24
    if (isSwCounter32Oveflow == true)
  41e78c:	4283      	cmp	r3, r0
  41e78e:	d800      	bhi.n	41e792 <.LVL29>

0041e790 <.LVL28>:
  41e790:	4770      	bx	lr

0041e792 <.LVL29>:
        counterObj->swCounter64High++;
  41e792:	6a93      	ldr	r3, [r2, #40]	; 0x28

0041e794 <.LVL30>:
  41e794:	3301      	adds	r3, #1
  41e796:	6293      	str	r3, [r2, #40]	; 0x28
}
  41e798:	e7fa      	b.n	41e790 <.LVL28>
  41e79a:	bf00      	nop
  41e79c:	20417688 	.word	0x20417688

Disassembly of section .text.__locale_ctype_ptr%410:

0041e7a0 <__locale_ctype_ptr>:
  41e7a0:	4b04      	ldr	r3, [pc, #16]	; (41e7b4 <.LBE20+0x6>)
  41e7a2:	4a05      	ldr	r2, [pc, #20]	; (41e7b8 <.LBE20+0xa>)
  41e7a4:	681b      	ldr	r3, [r3, #0]
  41e7a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  41e7a8:	2b00      	cmp	r3, #0
  41e7aa:	bf08      	it	eq
  41e7ac:	4613      	moveq	r3, r2

0041e7ae <.LBE20>:
  41e7ae:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
  41e7b2:	4770      	bx	lr
  41e7b4:	2041788c 	.word	0x2041788c
  41e7b8:	20417288 	.word	0x20417288

Disassembly of section .text.__ascii_wctomb%411:

0041e7bc <__ascii_wctomb>:
  41e7bc:	b121      	cbz	r1, 41e7c8 <.LVL4>
  41e7be:	2aff      	cmp	r2, #255	; 0xff
  41e7c0:	d804      	bhi.n	41e7cc <.LVL6>
  41e7c2:	700a      	strb	r2, [r1, #0]
  41e7c4:	2001      	movs	r0, #1

0041e7c6 <.LVL3>:
  41e7c6:	4770      	bx	lr

0041e7c8 <.LVL4>:
  41e7c8:	4608      	mov	r0, r1

0041e7ca <.LVL5>:
  41e7ca:	4770      	bx	lr

0041e7cc <.LVL6>:
  41e7cc:	238a      	movs	r3, #138	; 0x8a

0041e7ce <.LVL7>:
  41e7ce:	6003      	str	r3, [r0, #0]
  41e7d0:	f04f 30ff 	mov.w	r0, #4294967295

0041e7d4 <.LVL8>:
  41e7d4:	4770      	bx	lr

0041e7d6 <.LFE18>:
  41e7d6:	bf00      	nop

Disassembly of section .text._localeconv_r%412:

0041e7d8 <_localeconv_r>:
  41e7d8:	4a04      	ldr	r2, [pc, #16]	; (41e7ec <.LBE19+0x6>)
  41e7da:	4b05      	ldr	r3, [pc, #20]	; (41e7f0 <.LBE19+0xa>)
  41e7dc:	6812      	ldr	r2, [r2, #0]
  41e7de:	6b50      	ldr	r0, [r2, #52]	; 0x34

0041e7e0 <.LVL3>:
  41e7e0:	2800      	cmp	r0, #0
  41e7e2:	bf08      	it	eq
  41e7e4:	4618      	moveq	r0, r3

0041e7e6 <.LBE19>:
  41e7e6:	30f0      	adds	r0, #240	; 0xf0
  41e7e8:	4770      	bx	lr
  41e7ea:	bf00      	nop
  41e7ec:	2041788c 	.word	0x2041788c
  41e7f0:	20417288 	.word	0x20417288

Disassembly of section .text.wc_Des_SetIV%413:

0041e7f4 <wc_Des_SetIV>:
    if (des && iv)
  41e7f4:	4603      	mov	r3, r0
  41e7f6:	b100      	cbz	r0, 41e7fa <wc_Des_SetIV+0x6>
  41e7f8:	b921      	cbnz	r1, 41e804 <wc_Des_SetIV+0x10>
    else if (des)
  41e7fa:	b113      	cbz	r3, 41e802 <wc_Des_SetIV+0xe>
        XMEMSET(des->reg,  0, DES_BLOCK_SIZE);
  41e7fc:	2200      	movs	r2, #0
  41e7fe:	601a      	str	r2, [r3, #0]
  41e800:	605a      	str	r2, [r3, #4]
  41e802:	4770      	bx	lr
        XMEMCPY(des->reg, iv, DES_BLOCK_SIZE);
  41e804:	6808      	ldr	r0, [r1, #0]

0041e806 <.LVL247>:
  41e806:	684a      	ldr	r2, [r1, #4]
  41e808:	6018      	str	r0, [r3, #0]
  41e80a:	605a      	str	r2, [r3, #4]
  41e80c:	4770      	bx	lr

Disassembly of section .text.fp_count_bits%414:

0041e80e <fp_count_bits>:
  if (a->used == 0) {
  41e80e:	6802      	ldr	r2, [r0, #0]
  41e810:	b142      	cbz	r2, 41e824 <.LVL224>
  r = (a->used - 1) * DIGIT_BIT;
  41e812:	1e53      	subs	r3, r2, #1
  41e814:	015a      	lsls	r2, r3, #5

0041e816 <.LVL220>:
  q = a->dp[a->used - 1];
  41e816:	3302      	adds	r3, #2
  41e818:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

0041e81c <.LVL221>:
  while (q > ((fp_digit) 0)) {
  41e81c:	b113      	cbz	r3, 41e824 <.LVL224>
    ++r;
  41e81e:	3201      	adds	r2, #1

0041e820 <.LVL222>:
  while (q > ((fp_digit) 0)) {
  41e820:	085b      	lsrs	r3, r3, #1

0041e822 <.LVL223>:
  41e822:	d1fc      	bne.n	41e81e <.LVL221+0x2>

0041e824 <.LVL224>:
}
  41e824:	4610      	mov	r0, r2

0041e826 <.LVL225>:
  41e826:	4770      	bx	lr

Disassembly of section .text.fp_init_copy%415:

0041e828 <fp_init_copy>:
    if (a != b) {
  41e828:	4288      	cmp	r0, r1
  41e82a:	d009      	beq.n	41e840 <.LCFI83>
{
  41e82c:	b538      	push	{r3, r4, r5, lr}

0041e82e <.LCFI82>:
  41e82e:	460d      	mov	r5, r1
  41e830:	4604      	mov	r4, r0

0041e832 <.LBB76>:
    fp_zero(a);
  41e832:	f000 f97b 	bl	41eb2c <.LFE154>

0041e836 <.LBE76>:
        fp_copy(b, a);
  41e836:	4621      	mov	r1, r4
  41e838:	4628      	mov	r0, r5
  41e83a:	f7ff fe21 	bl	41e480 <.LFE185>

0041e83e <.LVL561>:
  41e83e:	bd38      	pop	{r3, r4, r5, pc}

0041e840 <.LCFI83>:
  41e840:	4770      	bx	lr

Disassembly of section .text.BSP_Initialize%416:

0041e844 <BSP_Initialize>:
void BSP_Initialize(void )
{


    /* Switch off LEDs */
		LED1_Off(); 
  41e844:	2220      	movs	r2, #32
  41e846:	4b04      	ldr	r3, [pc, #16]	; (41e858 <BSP_Initialize+0x14>)
  41e848:	631a      	str	r2, [r3, #48]	; 0x30
		LED2_Off(); 
  41e84a:	f44f 7280 	mov.w	r2, #256	; 0x100
  41e84e:	f503 7300 	add.w	r3, r3, #512	; 0x200
  41e852:	631a      	str	r2, [r3, #48]	; 0x30
  41e854:	4770      	bx	lr
  41e856:	bf00      	nop
  41e858:	400e0e00 	.word	0x400e0e00

Disassembly of section .text.vListInsertEnd%417:

0041e85c <vListInsertEnd>:
ListItem_t * const pxIndex = pxList->pxIndex;
  41e85c:	6843      	ldr	r3, [r0, #4]

0041e85e <.LVL3>:
	pxNewListItem->pxNext = pxIndex;
  41e85e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  41e860:	689a      	ldr	r2, [r3, #8]
  41e862:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
  41e864:	689a      	ldr	r2, [r3, #8]
  41e866:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  41e868:	6099      	str	r1, [r3, #8]
	pxNewListItem->pvContainer = ( void * ) pxList;
  41e86a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
  41e86c:	6803      	ldr	r3, [r0, #0]

0041e86e <.LVL4>:
  41e86e:	3301      	adds	r3, #1
  41e870:	6003      	str	r3, [r0, #0]
  41e872:	4770      	bx	lr

Disassembly of section .text.vTaskInternalSetTimeOutState%418:

0041e874 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  41e874:	4b03      	ldr	r3, [pc, #12]	; (41e884 <.LFE6+0x10>)
  41e876:	681b      	ldr	r3, [r3, #0]
  41e878:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  41e87a:	4b03      	ldr	r3, [pc, #12]	; (41e888 <.LFE6+0x14>)
  41e87c:	681b      	ldr	r3, [r3, #0]
  41e87e:	6043      	str	r3, [r0, #4]
  41e880:	4770      	bx	lr
  41e882:	bf00      	nop
  41e884:	20417864 	.word	0x20417864
  41e888:	2041786c 	.word	0x2041786c

Disassembly of section .text.OSAL_MUTEX_Create%419:

0041e88c <OSAL_MUTEX_Create>:
    if (*(SemaphoreHandle_t*)mutexID != NULL)
  41e88c:	6803      	ldr	r3, [r0, #0]
  41e88e:	b10b      	cbz	r3, 41e894 <.LVL42>
        return OSAL_RESULT_FALSE;
  41e890:	2000      	movs	r0, #0

0041e892 <.LVL41>:
  41e892:	4770      	bx	lr

0041e894 <.LVL42>:
{
  41e894:	b510      	push	{r4, lr}

0041e896 <.LCFI11>:
  41e896:	4604      	mov	r4, r0
    *(SemaphoreHandle_t*)mutexID = xSemaphoreCreateMutex();
  41e898:	2001      	movs	r0, #1

0041e89a <.LVL43>:
  41e89a:	f7ff fd84 	bl	41e3a6 <.LFE184>

0041e89e <.LVL44>:
  41e89e:	6020      	str	r0, [r4, #0]
    return OSAL_RESULT_TRUE;
  41e8a0:	2001      	movs	r0, #1
  41e8a2:	bd10      	pop	{r4, pc}

Disassembly of section .text.OSAL_MUTEX_Unlock%420:

0041e8a4 <OSAL_MUTEX_Unlock>:

  Remarks:

 */
OSAL_RESULT OSAL_MUTEX_Unlock(OSAL_MUTEX_HANDLE_TYPE* mutexID)
{
  41e8a4:	b508      	push	{r3, lr}

0041e8a6 <.LCFI15>:

   if (xSemaphoreGive(*(SemaphoreHandle_t*)mutexID) == pdTRUE)
  41e8a6:	2300      	movs	r3, #0
  41e8a8:	461a      	mov	r2, r3
  41e8aa:	4619      	mov	r1, r3
  41e8ac:	6800      	ldr	r0, [r0, #0]

0041e8ae <.LVL56>:
  41e8ae:	f7f8 fa4b 	bl	416d48 <xQueueGenericSend>

0041e8b2 <.LVL57>:
   {
      return OSAL_RESULT_TRUE;
   }

   return OSAL_RESULT_FALSE;
}
  41e8b2:	2801      	cmp	r0, #1
  41e8b4:	bf14      	ite	ne
  41e8b6:	2000      	movne	r0, #0
  41e8b8:	2001      	moveq	r0, #1
  41e8ba:	bd08      	pop	{r3, pc}

Disassembly of section .text.CRYPT_MD5_DataAdd%421:

0041e8bc <CRYPT_MD5_DataAdd>:
    if (md5 == NULL || input == NULL)
  41e8bc:	b138      	cbz	r0, 41e8ce <.LCFI3>
{
  41e8be:	b508      	push	{r3, lr}

0041e8c0 <.LCFI2>:
    if (md5 == NULL || input == NULL)
  41e8c0:	b111      	cbz	r1, 41e8c8 <.LVL8>
    return wc_Md5Update((Md5*)md5, input, sz);
  41e8c2:	f7fc fa47 	bl	41ad54 <.LFE23>

0041e8c6 <.LVL7>:
  41e8c6:	bd08      	pop	{r3, pc}

0041e8c8 <.LVL8>:
        return BAD_FUNC_ARG;
  41e8c8:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e8cc <.LVL9>:
}
  41e8cc:	bd08      	pop	{r3, pc}

0041e8ce <.LCFI3>:
        return BAD_FUNC_ARG;
  41e8ce:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e8d2 <.LVL11>:
  41e8d2:	4770      	bx	lr

Disassembly of section .text.CRYPT_MD5_Finalize%422:

0041e8d4 <CRYPT_MD5_Finalize>:
    if (md5 == NULL || digest == NULL)
  41e8d4:	b138      	cbz	r0, 41e8e6 <.LCFI5>
{
  41e8d6:	b508      	push	{r3, lr}

0041e8d8 <.LCFI4>:
    if (md5 == NULL || digest == NULL)
  41e8d8:	b111      	cbz	r1, 41e8e0 <.LVL14>
    return wc_Md5Final((Md5*)md5, digest);
  41e8da:	f7fa fc53 	bl	419184 <.LFE168>

0041e8de <.LVL13>:
  41e8de:	bd08      	pop	{r3, pc}

0041e8e0 <.LVL14>:
        return BAD_FUNC_ARG;
  41e8e0:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e8e4 <.LVL15>:
}
  41e8e4:	bd08      	pop	{r3, pc}

0041e8e6 <.LCFI5>:
        return BAD_FUNC_ARG;
  41e8e6:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e8ea <.LVL17>:
  41e8ea:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA_DataAdd%423:

0041e8ec <CRYPT_SHA_DataAdd>:
    if (sha == NULL || input == NULL)
  41e8ec:	b138      	cbz	r0, 41e8fe <.LCFI9>
{
  41e8ee:	b508      	push	{r3, lr}

0041e8f0 <.LCFI8>:
    if (sha == NULL || input == NULL)
  41e8f0:	b111      	cbz	r1, 41e8f8 <.LVL26>
    return wc_ShaUpdate((Sha*)sha, input, sz);
  41e8f2:	f7fc fc46 	bl	41b182 <.LFE58>

0041e8f6 <.LVL25>:
  41e8f6:	bd08      	pop	{r3, pc}

0041e8f8 <.LVL26>:
        return BAD_FUNC_ARG;
  41e8f8:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e8fc <.LVL27>:
}
  41e8fc:	bd08      	pop	{r3, pc}

0041e8fe <.LCFI9>:
        return BAD_FUNC_ARG;
  41e8fe:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e902 <.LVL29>:
  41e902:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA_Finalize%424:

0041e904 <CRYPT_SHA_Finalize>:
    if (sha == NULL || digest == NULL)
  41e904:	b138      	cbz	r0, 41e916 <.LCFI11>
{
  41e906:	b508      	push	{r3, lr}

0041e908 <.LCFI10>:
    if (sha == NULL || digest == NULL)
  41e908:	b111      	cbz	r1, 41e910 <.LVL32>
    return wc_ShaFinal((Sha*)sha, digest);
  41e90a:	f7fc f90d 	bl	41ab28 <.LFE171>

0041e90e <.LVL31>:
  41e90e:	bd08      	pop	{r3, pc}

0041e910 <.LVL32>:
        return BAD_FUNC_ARG;
  41e910:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e914 <.LVL33>:
}
  41e914:	bd08      	pop	{r3, pc}

0041e916 <.LCFI11>:
        return BAD_FUNC_ARG;
  41e916:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e91a <.LVL35>:
  41e91a:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA256_DataAdd%425:

0041e91c <CRYPT_SHA256_DataAdd>:
    if (sha256 == NULL || input == NULL)
  41e91c:	b138      	cbz	r0, 41e92e <.LCFI15>
{
  41e91e:	b508      	push	{r3, lr}

0041e920 <.LCFI14>:
    if (sha256 == NULL || input == NULL)
  41e920:	b111      	cbz	r1, 41e928 <.LVL44>
    return wc_Sha256Update((Sha256*)sha256, input, sz);
  41e922:	f7fc fc6f 	bl	41b204 <.LFE156>

0041e926 <.LVL43>:
  41e926:	bd08      	pop	{r3, pc}

0041e928 <.LVL44>:
        return BAD_FUNC_ARG;
  41e928:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e92c <.LVL45>:
}
  41e92c:	bd08      	pop	{r3, pc}

0041e92e <.LCFI15>:
        return BAD_FUNC_ARG;
  41e92e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e932 <.LVL47>:
  41e932:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA256_Finalize%426:

0041e934 <CRYPT_SHA256_Finalize>:
    if (sha256 == NULL || digest == NULL)
  41e934:	b138      	cbz	r0, 41e946 <.LCFI17>
{
  41e936:	b508      	push	{r3, lr}

0041e938 <.LCFI16>:
    if (sha256 == NULL || digest == NULL)
  41e938:	b111      	cbz	r1, 41e940 <.LVL50>
    return wc_Sha256Final((Sha256*)sha256, digest);
  41e93a:	f7fb fe0b 	bl	41a554 <.LFE151>

0041e93e <.LVL49>:
  41e93e:	bd08      	pop	{r3, pc}

0041e940 <.LVL50>:
        return BAD_FUNC_ARG;
  41e940:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e944 <.LVL51>:
}
  41e944:	bd08      	pop	{r3, pc}

0041e946 <.LCFI17>:
        return BAD_FUNC_ARG;
  41e946:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e94a <.LVL53>:
  41e94a:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA384_DataAdd%427:

0041e94c <CRYPT_SHA384_DataAdd>:
    if (sha384 == NULL || input == NULL)
  41e94c:	b138      	cbz	r0, 41e95e <.LCFI21>
{
  41e94e:	b508      	push	{r3, lr}

0041e950 <.LCFI20>:
    if (sha384 == NULL || input == NULL)
  41e950:	b111      	cbz	r1, 41e958 <.LVL60>
    return wc_Sha384Update((Sha384*)sha384, input, sz);
  41e952:	f7f9 fb68 	bl	418026 <.LBE719>

0041e956 <.LVL59>:
  41e956:	bd08      	pop	{r3, pc}

0041e958 <.LVL60>:
        return BAD_FUNC_ARG;
  41e958:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e95c <.LVL61>:
}
  41e95c:	bd08      	pop	{r3, pc}

0041e95e <.LCFI21>:
        return BAD_FUNC_ARG;
  41e95e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e962 <.LVL63>:
  41e962:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA384_Finalize%428:

0041e964 <CRYPT_SHA384_Finalize>:
    if (sha384 == NULL || digest == NULL)
  41e964:	b138      	cbz	r0, 41e976 <.LCFI23>
{
  41e966:	b508      	push	{r3, lr}

0041e968 <.LCFI22>:
    if (sha384 == NULL || digest == NULL)
  41e968:	b111      	cbz	r1, 41e970 <.LVL66>
    return wc_Sha384Final((Sha384*)sha384, digest);
  41e96a:	f7f5 fa01 	bl	413d70 <.LFE21>

0041e96e <.LVL65>:
  41e96e:	bd08      	pop	{r3, pc}

0041e970 <.LVL66>:
        return BAD_FUNC_ARG;
  41e970:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e974 <.LVL67>:
}
  41e974:	bd08      	pop	{r3, pc}

0041e976 <.LCFI23>:
        return BAD_FUNC_ARG;
  41e976:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e97a <.LVL69>:
  41e97a:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA512_DataAdd%429:

0041e97c <CRYPT_SHA512_DataAdd>:
    if (sha512 == NULL || input == NULL)
  41e97c:	b138      	cbz	r0, 41e98e <.LCFI27>
{
  41e97e:	b508      	push	{r3, lr}

0041e980 <.LCFI26>:
    if (sha512 == NULL || input == NULL)
  41e980:	b111      	cbz	r1, 41e988 <.LVL76>
    return wc_Sha512Update((Sha512*)sha512, input, sz);
  41e982:	f7f9 fadb 	bl	417f3c <.LFE169>

0041e986 <.LVL75>:
  41e986:	bd08      	pop	{r3, pc}

0041e988 <.LVL76>:
        return BAD_FUNC_ARG;
  41e988:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e98c <.LVL77>:
}
  41e98c:	bd08      	pop	{r3, pc}

0041e98e <.LCFI27>:
        return BAD_FUNC_ARG;
  41e98e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e992 <.LVL79>:
  41e992:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA512_Finalize%430:

0041e994 <CRYPT_SHA512_Finalize>:
    if (sha512 == NULL || digest == NULL)
  41e994:	b138      	cbz	r0, 41e9a6 <.LCFI29>
{
  41e996:	b508      	push	{r3, lr}

0041e998 <.LCFI28>:
    if (sha512 == NULL || digest == NULL)
  41e998:	b111      	cbz	r1, 41e9a0 <.LVL82>
    return wc_Sha512Final((Sha512*)sha512, digest);
  41e99a:	f7f5 f8a1 	bl	413ae0 <wc_Sha512Final>

0041e99e <.LVL81>:
  41e99e:	bd08      	pop	{r3, pc}

0041e9a0 <.LVL82>:
        return BAD_FUNC_ARG;
  41e9a0:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e9a4 <.LVL83>:
}
  41e9a4:	bd08      	pop	{r3, pc}

0041e9a6 <.LCFI29>:
        return BAD_FUNC_ARG;
  41e9a6:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e9aa <.LVL85>:
  41e9aa:	4770      	bx	lr

Disassembly of section .text.CRYPT_TDES_KeySet%431:

0041e9ac <CRYPT_TDES_KeySet>:
    if (tdes == NULL || key == NULL)
  41e9ac:	b138      	cbz	r0, 41e9be <.LCFI50>
{
  41e9ae:	b510      	push	{r4, lr}

0041e9b0 <.LCFI49>:
    if (tdes == NULL || key == NULL)
  41e9b0:	b111      	cbz	r1, 41e9b8 <.LVL138>
    return wc_Des3_SetKey((Des3*)tdes, key, iv, dir);
  41e9b2:	f7fd f943 	bl	41bc3c <wc_Des3_SetKey>

0041e9b6 <.LVL137>:
  41e9b6:	bd10      	pop	{r4, pc}

0041e9b8 <.LVL138>:
        return BAD_FUNC_ARG;
  41e9b8:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e9bc <.LVL139>:
}
  41e9bc:	bd10      	pop	{r4, pc}

0041e9be <.LCFI50>:
        return BAD_FUNC_ARG;
  41e9be:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e9c2 <.LVL141>:
  41e9c2:	4770      	bx	lr

Disassembly of section .text.wolfSSL_Malloc%432:

0041e9c4 <wolfSSL_Malloc>:
#ifdef WOLFSSL_DEBUG_MEMORY
void* wolfSSL_Malloc(size_t size, const char* func, unsigned int line)
#else
void* wolfSSL_Malloc(size_t size)
#endif
{
  41e9c4:	b508      	push	{r3, lr}

0041e9c6 <.LCFI0>:
    void* res = 0;

    if (malloc_function) {
  41e9c6:	4b04      	ldr	r3, [pc, #16]	; (41e9d8 <.LVL18+0x4>)
  41e9c8:	681b      	ldr	r3, [r3, #0]
  41e9ca:	b10b      	cbz	r3, 41e9d0 <.LVL17>
    #ifdef WOLFSSL_DEBUG_MEMORY
        res = malloc_function(size, func, line);
    #else
        res = malloc_function(size);
  41e9cc:	4798      	blx	r3

0041e9ce <.LVL16>:
  41e9ce:	bd08      	pop	{r3, pc}

0041e9d0 <.LVL17>:
    #endif
    }
    else {
        res = malloc(size);
  41e9d0:	f000 f988 	bl	41ece4 <.LFE0>

0041e9d4 <.LVL18>:
        if (res == NULL)
            puts("wolfSSL_malloc failed");
    #endif

    return res;
}
  41e9d4:	bd08      	pop	{r3, pc}
  41e9d6:	bf00      	nop
  41e9d8:	20417888 	.word	0x20417888

Disassembly of section .text.wolfSSL_Free%433:

0041e9dc <wolfSSL_Free>:
#ifdef WOLFSSL_DEBUG_MEMORY
void wolfSSL_Free(void *ptr, const char* func, unsigned int line)
#else
void wolfSSL_Free(void *ptr)
#endif
{
  41e9dc:	b508      	push	{r3, lr}

0041e9de <.LCFI1>:
    if (free_function) {
  41e9de:	4b04      	ldr	r3, [pc, #16]	; (41e9f0 <.LVL22+0x4>)
  41e9e0:	681b      	ldr	r3, [r3, #0]
  41e9e2:	b10b      	cbz	r3, 41e9e8 <.LVL21>
    #ifdef WOLFSSL_DEBUG_MEMORY
        free_function(ptr, func, line);
    #else
        free_function(ptr);
  41e9e4:	4798      	blx	r3

0041e9e6 <.LVL20>:
  41e9e6:	bd08      	pop	{r3, pc}

0041e9e8 <.LVL21>:
    #endif
    }
    else {
        free(ptr);
  41e9e8:	f000 f984 	bl	41ecf4 <.LFE0>

0041e9ec <.LVL22>:
  41e9ec:	bd08      	pop	{r3, pc}
  41e9ee:	bf00      	nop
  41e9f0:	20417884 	.word	0x20417884

Disassembly of section .text.AesWriteIV%434:

0041e9f4 <AesWriteIV>:
    AES_REGS->AES_IVR[0] = iv[0];
  41e9f4:	6802      	ldr	r2, [r0, #0]
  41e9f6:	4b04      	ldr	r3, [pc, #16]	; (41ea08 <.LFE3+0x14>)
  41e9f8:	661a      	str	r2, [r3, #96]	; 0x60
    AES_REGS->AES_IVR[1] = iv[1];
  41e9fa:	6842      	ldr	r2, [r0, #4]
  41e9fc:	665a      	str	r2, [r3, #100]	; 0x64
    AES_REGS->AES_IVR[2] = iv[2];
  41e9fe:	6882      	ldr	r2, [r0, #8]
  41ea00:	669a      	str	r2, [r3, #104]	; 0x68
    AES_REGS->AES_IVR[3] = iv[3];
  41ea02:	68c2      	ldr	r2, [r0, #12]
  41ea04:	66da      	str	r2, [r3, #108]	; 0x6c
  41ea06:	4770      	bx	lr
  41ea08:	4006c000 	.word	0x4006c000

Disassembly of section .text.Console_UART_RegisterCallback%435:

0041ea0c <Console_UART_RegisterCallback>:
    switch (event)
  41ea0c:	b121      	cbz	r1, 41ea18 <Console_UART_RegisterCallback+0xc>
  41ea0e:	2901      	cmp	r1, #1
  41ea10:	d104      	bne.n	41ea1c <Console_UART_RegisterCallback+0x10>
            consUartData.rdCallback = consCallback;
  41ea12:	4b03      	ldr	r3, [pc, #12]	; (41ea20 <.LFE143+0x14>)
  41ea14:	6498      	str	r0, [r3, #72]	; 0x48
            break;
  41ea16:	4770      	bx	lr
            consUartData.wrCallback = consCallback;
  41ea18:	4b01      	ldr	r3, [pc, #4]	; (41ea20 <.LFE143+0x14>)
  41ea1a:	64d8      	str	r0, [r3, #76]	; 0x4c
  41ea1c:	4770      	bx	lr
  41ea1e:	bf00      	nop
  41ea20:	20417638 	.word	0x20417638

Disassembly of section .text.UARTDeviceReadCallback%436:

0041ea24 <UARTDeviceReadCallback>:
{
  41ea24:	b508      	push	{r3, lr}

0041ea26 <.LCFI4>:
    if (USART1_ErrorGet() == 0)
  41ea26:	f7ff fa99 	bl	41df5c <.LFE6>

0041ea2a <.LVL17>:
  41ea2a:	b918      	cbnz	r0, 41ea34 <.LVL17+0xa>
        consUartData.isReadComplete = true;
  41ea2c:	2201      	movs	r2, #1
  41ea2e:	4b02      	ldr	r3, [pc, #8]	; (41ea38 <.LVL17+0xe>)
  41ea30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  41ea34:	bd08      	pop	{r3, pc}
  41ea36:	bf00      	nop
  41ea38:	20417638 	.word	0x20417638

Disassembly of section .text.SYS_TIME_GetElapsedCount%437:

0041ea3c <SYS_TIME_GetElapsedCount>:
    if (hwTimerCurrentValue > counterObj->hwTimerPreviousValue)
  41ea3c:	4b04      	ldr	r3, [pc, #16]	; (41ea50 <.LVL70+0x2>)
  41ea3e:	691b      	ldr	r3, [r3, #16]
  41ea40:	4283      	cmp	r3, r0
  41ea42:	d303      	bcc.n	41ea4c <.LVL69>
        elapsedCount = (SYS_TIME_HW_COUNTER_PERIOD - counterObj->hwTimerPreviousValue) + hwTimerCurrentValue + 1;
  41ea44:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
  41ea48:	4418      	add	r0, r3

0041ea4a <.LVL68>:
}
  41ea4a:	4770      	bx	lr

0041ea4c <.LVL69>:
        elapsedCount = hwTimerCurrentValue - counterObj->hwTimerPreviousValue;
  41ea4c:	1ac0      	subs	r0, r0, r3

0041ea4e <.LVL70>:
  41ea4e:	4770      	bx	lr
  41ea50:	20417688 	.word	0x20417688

Disassembly of section .text.vApplicationStackOverflowHook%438:

0041ea54 <vApplicationStackOverflowHook>:
  41ea54:	f04f 0320 	mov.w	r3, #32
  41ea58:	b672      	cpsid	i
  41ea5a:	f383 8811 	msr	BASEPRI, r3
  41ea5e:	f3bf 8f6f 	isb	sy
  41ea62:	f3bf 8f4f 	dsb	sy
  41ea66:	b662      	cpsie	i
  41ea68:	e7fe      	b.n	41ea68 <vApplicationStackOverflowHook+0x14>

Disassembly of section .text.vApplicationMallocFailedHook%439:

0041ea6a <vApplicationMallocFailedHook>:
  41ea6a:	f04f 0320 	mov.w	r3, #32
  41ea6e:	b672      	cpsid	i
  41ea70:	f383 8811 	msr	BASEPRI, r3
  41ea74:	f3bf 8f6f 	isb	sy
  41ea78:	f3bf 8f4f 	dsb	sy
  41ea7c:	b662      	cpsie	i
  41ea7e:	e7fe      	b.n	41ea7e <vApplicationMallocFailedHook+0x14>

Disassembly of section .text.vListInitialise%440:

0041ea80 <vListInitialise>:
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  41ea80:	f100 0308 	add.w	r3, r0, #8
  41ea84:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  41ea86:	f04f 32ff 	mov.w	r2, #4294967295
  41ea8a:	6082      	str	r2, [r0, #8]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  41ea8c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  41ea8e:	6103      	str	r3, [r0, #16]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  41ea90:	2300      	movs	r3, #0
  41ea92:	6003      	str	r3, [r0, #0]
  41ea94:	4770      	bx	lr

Disassembly of section .text.prvIsQueueEmpty%441:

0041ea96 <prvIsQueueEmpty>:
{
  41ea96:	b510      	push	{r4, lr}

0041ea98 <.LCFI0>:
  41ea98:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  41ea9a:	f7ff fcbb 	bl	41e414 <.LFE6>

0041ea9e <.LVL1>:
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  41ea9e:	6ba4      	ldr	r4, [r4, #56]	; 0x38

0041eaa0 <.LVL2>:
	taskEXIT_CRITICAL();
  41eaa0:	f000 f830 	bl	41eb04 <vPortExitCritical>

0041eaa4 <.LVL3>:
}
  41eaa4:	fab4 f084 	clz	r0, r4
  41eaa8:	0940      	lsrs	r0, r0, #5
  41eaaa:	bd10      	pop	{r4, pc}

Disassembly of section .text.GetSequence%442:

0041eaac <GetSequence>:
{
  41eaac:	b500      	push	{lr}

0041eaae <.LCFI32>:
  41eaae:	b083      	sub	sp, #12

0041eab0 <.LCFI33>:
    return GetASNHeader(input, ASN_SEQUENCE | ASN_CONSTRUCTED, inOutIdx, len,
  41eab0:	9300      	str	r3, [sp, #0]
  41eab2:	4613      	mov	r3, r2

0041eab4 <.LVL173>:
  41eab4:	460a      	mov	r2, r1

0041eab6 <.LVL174>:
  41eab6:	2130      	movs	r1, #48	; 0x30

0041eab8 <.LVL175>:
  41eab8:	f7fe fcc8 	bl	41d44c <.LFE149>

0041eabc <.LVL176>:
}
  41eabc:	b003      	add	sp, #12

0041eabe <.LCFI34>:
  41eabe:	f85d fb04 	ldr.w	pc, [sp], #4

Disassembly of section .text.wc_InitMd5%443:

0041eac2 <wc_InitMd5>:
#endif /* !HAVE_MD5_CUST_API */


int wc_InitMd5(Md5* md5)
{
    if (md5 == NULL) {
  41eac2:	b130      	cbz	r0, 41ead2 <.LCFI9>
{
  41eac4:	b508      	push	{r3, lr}

0041eac6 <.LCFI8>:
        return BAD_FUNC_ARG;
    }
    return wc_InitMd5_ex(md5, NULL, INVALID_DEVID);
  41eac6:	f06f 0201 	mvn.w	r2, #1
  41eaca:	2100      	movs	r1, #0
  41eacc:	f7ff f86c 	bl	41dba8 <wc_InitMd5_ex>

0041ead0 <.LVL369>:
  41ead0:	bd08      	pop	{r3, pc}

0041ead2 <.LCFI9>:
        return BAD_FUNC_ARG;
  41ead2:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041ead6 <.LVL371>:
  41ead6:	4770      	bx	lr

Disassembly of section .text.fp_set%444:

0041ead8 <fp_set>:
{
  41ead8:	b538      	push	{r3, r4, r5, lr}

0041eada <.LCFI35>:
  41eada:	4605      	mov	r5, r0
  41eadc:	460c      	mov	r4, r1
   fp_zero(a);
  41eade:	f000 f825 	bl	41eb2c <.LFE154>

0041eae2 <.LVL293>:
   a->dp[0] = b;
  41eae2:	60ac      	str	r4, [r5, #8]
   a->used  = a->dp[0] ? 1 : 0;
  41eae4:	3400      	adds	r4, #0

0041eae6 <.LVL294>:
  41eae6:	bf18      	it	ne
  41eae8:	2401      	movne	r4, #1
  41eaea:	602c      	str	r4, [r5, #0]
  41eaec:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section .text.vPortEnableVFP%445:

0041eaf0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  41eaf0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 41eb00 <.LFE15+0x2>
  41eaf4:	6801      	ldr	r1, [r0, #0]
  41eaf6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  41eafa:	6001      	str	r1, [r0, #0]
  41eafc:	4770      	bx	lr

0041eafe <.LFE15>:
  41eafe:	0000      	.short	0x0000
  41eb00:	e000ed88 	.word	0xe000ed88

Disassembly of section .text.vPortExitCritical%446:

0041eb04 <vPortExitCritical>:
	uxCriticalNesting--;
  41eb04:	4a03      	ldr	r2, [pc, #12]	; (41eb14 <.LVL10+0x2>)
  41eb06:	6813      	ldr	r3, [r2, #0]
  41eb08:	3b01      	subs	r3, #1
  41eb0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  41eb0c:	b90b      	cbnz	r3, 41eb12 <.LVL10>

0041eb0e <.LBB16>:
	__asm volatile
  41eb0e:	f383 8811 	msr	BASEPRI, r3

0041eb12 <.LVL10>:
  41eb12:	4770      	bx	lr
  41eb14:	2041787c 	.word	0x2041787c

Disassembly of section .text._APP_Tasks%447:

0041eb18 <_APP_Tasks>:
{
  41eb18:	b508      	push	{r3, lr}

0041eb1a <.LCFI0>:
        SYS_CONSOLE_Tasks(sysObj.sysConsole0);
  41eb1a:	4c03      	ldr	r4, [pc, #12]	; (41eb28 <.LVL3+0x2>)

0041eb1c <.LVL1>:
  41eb1c:	6820      	ldr	r0, [r4, #0]
  41eb1e:	f7ff fe15 	bl	41e74c <.LFE15>

0041eb22 <.LVL2>:
        APP_Tasks();
  41eb22:	f7ef ff15 	bl	40e950 <APP_Tasks>

0041eb26 <.LVL3>:
  41eb26:	e7f9      	b.n	41eb1c <.LVL1>
  41eb28:	20400000 	.word	0x20400000

Disassembly of section .text.fp_zero%448:

0041eb2c <fp_zero>:
{
  41eb2c:	b508      	push	{r3, lr}

0041eb2e <.LCFI32>:
    a->used = 0;
  41eb2e:	2100      	movs	r1, #0
  41eb30:	6001      	str	r1, [r0, #0]
    a->sign = FP_ZPOS;
  41eb32:	6041      	str	r1, [r0, #4]
    XMEMSET(a->dp, 0, size * sizeof(fp_digit));
  41eb34:	f44f 7208 	mov.w	r2, #544	; 0x220
  41eb38:	3008      	adds	r0, #8

0041eb3a <.LVL273>:
  41eb3a:	f7fb fd59 	bl	41a5f0 <.LFE157>

0041eb3e <.LVL274>:
  41eb3e:	bd08      	pop	{r3, pc}

Disassembly of section .text.fp_clear%449:

0041eb40 <fp_clear>:
{
  41eb40:	b508      	push	{r3, lr}

0041eb42 <.LCFI44>:
    a->used = 0;
  41eb42:	2100      	movs	r1, #0
  41eb44:	6001      	str	r1, [r0, #0]
    a->sign = FP_ZPOS;
  41eb46:	6041      	str	r1, [r0, #4]
    XMEMSET(a->dp, 0, size * sizeof(fp_digit));
  41eb48:	f44f 7208 	mov.w	r2, #544	; 0x220
  41eb4c:	3008      	adds	r0, #8

0041eb4e <.LVL342>:
  41eb4e:	f7fb fd4f 	bl	41a5f0 <.LFE157>

0041eb52 <.LVL343>:
  41eb52:	bd08      	pop	{r3, pc}

Disassembly of section .rodata.bl_order%450:

0041eb54 <bl_order>:
  41eb54:	1110 0012 0708 0609 050a 040b 030c 020d     ................
  41eb64:	010e 000f                                   ....

Disassembly of section .rodata%451:

0041eb68 <.LANCHOR0>:
  41eb68:	00000043 	.word	0x00000043
  41eb6c:	49534f50 	.word	0x49534f50
  41eb70:	00000058 	.word	0x00000058
  41eb74:	00000000 	.word	0x00000000
  41eb78:	002e      	.short	0x002e
  41eb7a:	bf00      	nop

Disassembly of section .text.register_fini%452:

0041eb7c <register_fini>:
  41eb7c:	4b02      	ldr	r3, [pc, #8]	; (41eb88 <.LVL0+0x2>)
  41eb7e:	b113      	cbz	r3, 41eb86 <.LVL0>

0041eb80 <.LBB2>:
  41eb80:	4802      	ldr	r0, [pc, #8]	; (41eb8c <.LVL0+0x6>)
  41eb82:	f000 b941 	b.w	41ee08 <.LFE155>

0041eb86 <.LVL0>:
  41eb86:	4770      	bx	lr
  41eb88:	00000000 	.word	0x00000000
  41eb8c:	0041de39 	.word	0x0041de39

Disassembly of section .rodata%453:

0041eb90 <.LC0>:
  41eb90:	69666e49 	.word	0x69666e49
  41eb94:	7974696e 	.word	0x7974696e
  41eb98:	00000000 	.word	0x00000000

0041eb9c <.LC1>:
  41eb9c:	004e614e 	.word	0x004e614e

0041eba0 <.LC2>:
  41eba0:	0030      	.short	0x0030
  41eba2:	bf00      	nop

Disassembly of section .text._Bfree%454:

0041eba4 <_Bfree>:
  41eba4:	b131      	cbz	r1, 41ebb4 <.LVL11+0x6>
  41eba6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  41eba8:	684a      	ldr	r2, [r1, #4]
  41ebaa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]

0041ebae <.LVL11>:
  41ebae:	6008      	str	r0, [r1, #0]
  41ebb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  41ebb4:	4770      	bx	lr

0041ebb6 <.LFE18>:
  41ebb6:	bf00      	nop

Disassembly of section .text.__i2b%455:

0041ebb8 <__i2b>:
  41ebb8:	b510      	push	{r4, lr}

0041ebba <.LCFI6>:
  41ebba:	460c      	mov	r4, r1
  41ebbc:	2101      	movs	r1, #1

0041ebbe <.LVL105>:
  41ebbe:	f7fe fb45 	bl	41d24c <.LFE2>

0041ebc2 <.LVL106>:
  41ebc2:	2201      	movs	r2, #1
  41ebc4:	6144      	str	r4, [r0, #20]
  41ebc6:	6102      	str	r2, [r0, #16]
  41ebc8:	bd10      	pop	{r4, pc}

0041ebca <.LFE23>:
  41ebca:	bf00      	nop

Disassembly of section .text.SYS_INT_Disable%456:

0041ebcc <SYS_INT_Disable>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  41ebcc:	f3ef 8010 	mrs	r0, PRIMASK

0041ebd0 <.LBB38>:
  __ASM volatile ("cpsid i" : : : "memory");
  41ebd0:	b672      	cpsid	i

0041ebd2 <.LBB40>:
  __ASM volatile ("dmb 0xF":::"memory");
  41ebd2:	f3bf 8f5f 	dmb	sy

0041ebd6 <.LBE40>:
}
  41ebd6:	fab0 f080 	clz	r0, r0

0041ebda <.LVL1>:
  41ebda:	0940      	lsrs	r0, r0, #5
  41ebdc:	4770      	bx	lr

Disassembly of section .text.SYS_INT_Restore%457:

0041ebde <SYS_INT_Restore>:
    if( state == true )
  41ebde:	b918      	cbnz	r0, 41ebe8 <.LBB46>

0041ebe0 <.LBB42>:
  __ASM volatile ("cpsid i" : : : "memory");
  41ebe0:	b672      	cpsid	i

0041ebe2 <.LBB44>:
  __ASM volatile ("dmb 0xF":::"memory");
  41ebe2:	f3bf 8f5f 	dmb	sy
  41ebe6:	4770      	bx	lr

0041ebe8 <.LBB46>:
  41ebe8:	f3bf 8f5f 	dmb	sy

0041ebec <.LBB48>:
  __ASM volatile ("cpsie i" : : : "memory");
  41ebec:	b662      	cpsie	i
  41ebee:	4770      	bx	lr

Disassembly of section .text.CRYPT_MD5_Initialize%458:

0041ebf0 <CRYPT_MD5_Initialize>:
    if (md5 == NULL)
  41ebf0:	b120      	cbz	r0, 41ebfc <.LCFI1>
{
  41ebf2:	b508      	push	{r3, lr}

0041ebf4 <.LCFI0>:
    wc_InitMd5((Md5*)md5);
  41ebf4:	f7ff ff65 	bl	41eac2 <.LFE172>

0041ebf8 <.LVL1>:
    return 0;
  41ebf8:	2000      	movs	r0, #0
  41ebfa:	bd08      	pop	{r3, pc}

0041ebfc <.LCFI1>:
        return BAD_FUNC_ARG;
  41ebfc:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041ec00 <.LVL3>:
  41ec00:	4770      	bx	lr

Disassembly of section .text.mp_isodd%459:

0041ec02 <mp_isodd>:
    return fp_isodd(a);
  41ec02:	6803      	ldr	r3, [r0, #0]
  41ec04:	2b00      	cmp	r3, #0
  41ec06:	dd03      	ble.n	41ec10 <.LVL828>
  41ec08:	6880      	ldr	r0, [r0, #8]

0041ec0a <.LVL827>:
  41ec0a:	f000 0001 	and.w	r0, r0, #1
  41ec0e:	4770      	bx	lr

0041ec10 <.LVL828>:
  41ec10:	2000      	movs	r0, #0

0041ec12 <.LVL829>:
}
  41ec12:	4770      	bx	lr

Disassembly of section .text.vTaskSuspendAll%460:

00418570 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  418570:	68134a02 	.word	0x68134a02
  418574:	3301      	adds	r3, #1
  418576:	6013      	str	r3, [r2, #0]
  418578:	4770      	bx	lr
  41857a:	bf00      	nop
  41857c:	20417850 	.word	0x20417850

Disassembly of section .text.SetSequence%461:

0041ec14 <SetSequence>:
{
  41ec14:	b508      	push	{r3, lr}

0041ec16 <.LCFI106>:
    output[0] = ASN_SEQUENCE | ASN_CONSTRUCTED;
  41ec16:	2330      	movs	r3, #48	; 0x30
  41ec18:	f801 3b01 	strb.w	r3, [r1], #1

0041ec1c <.LVL573>:
    return SetLength(len, output + 1) + 1;
  41ec1c:	f7fe f939 	bl	41ce92 <.LFE184>

0041ec20 <.LVL574>:
}
  41ec20:	3001      	adds	r0, #1
  41ec22:	bd08      	pop	{r3, pc}

Disassembly of section .text.CRYPT_SHA_Initialize%462:

0041ec24 <CRYPT_SHA_Initialize>:
    if (sha == NULL)
  41ec24:	b118      	cbz	r0, 41ec2e <.LCFI7>
{
  41ec26:	b508      	push	{r3, lr}

0041ec28 <.LCFI6>:
    return wc_InitSha((Sha*)sha);
  41ec28:	f7fd feae 	bl	41c988 <.LFE19>

0041ec2c <.LVL19>:
  41ec2c:	bd08      	pop	{r3, pc}

0041ec2e <.LCFI7>:
        return BAD_FUNC_ARG;
  41ec2e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041ec32 <.LVL21>:
  41ec32:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA256_Initialize%463:

0041ec34 <CRYPT_SHA256_Initialize>:
    if (sha256 == NULL)
  41ec34:	b118      	cbz	r0, 41ec3e <.LCFI13>
{
  41ec36:	b508      	push	{r3, lr}

0041ec38 <.LCFI12>:
    return wc_InitSha256((Sha256*)sha256);
  41ec38:	f7fb fdbe 	bl	41a7b8 <.LFE41>

0041ec3c <.LVL37>:
  41ec3c:	bd08      	pop	{r3, pc}

0041ec3e <.LCFI13>:
        return BAD_FUNC_ARG;
  41ec3e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041ec42 <.LVL39>:
  41ec42:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA384_Initialize%464:

0041ec44 <CRYPT_SHA384_Initialize>:
    if (sha384 == NULL)
  41ec44:	b118      	cbz	r0, 41ec4e <.LCFI19>
{
  41ec46:	b508      	push	{r3, lr}

0041ec48 <.LCFI18>:
    return wc_InitSha384((Sha384*)sha384);
  41ec48:	f000 f888 	bl	41ed5c <.LFE22>

0041ec4c <.LVL55>:
  41ec4c:	bd08      	pop	{r3, pc}

0041ec4e <.LCFI19>:
        return BAD_FUNC_ARG;
  41ec4e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041ec52 <.LVL57>:
  41ec52:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA512_Initialize%465:

0041ec54 <CRYPT_SHA512_Initialize>:
    if (sha512 == NULL)
  41ec54:	b118      	cbz	r0, 41ec5e <.LCFI25>
{
  41ec56:	b508      	push	{r3, lr}

0041ec58 <.LCFI24>:
    return wc_InitSha512((Sha512*)sha512);
  41ec58:	f000 f879 	bl	41ed4e <.LFE206>

0041ec5c <.LVL71>:
  41ec5c:	bd08      	pop	{r3, pc}

0041ec5e <.LCFI25>:
        return BAD_FUNC_ARG;
  41ec5e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041ec62 <.LVL73>:
  41ec62:	4770      	bx	lr

Disassembly of section .text.CRYPT_RNG_Initialize%466:

0041ec64 <CRYPT_RNG_Initialize>:
    if (rng == NULL)
  41ec64:	b118      	cbz	r0, 41ec6e <.LCFI44>
{
  41ec66:	b508      	push	{r3, lr}

0041ec68 <.LCFI43>:
	return pic32c_InitRng();
  41ec68:	f7ff f948 	bl	41defc <pic32c_InitRng>

0041ec6c <.LVL119>:
  41ec6c:	bd08      	pop	{r3, pc}

0041ec6e <.LCFI44>:
        return BAD_FUNC_ARG;
  41ec6e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041ec72 <.LVL121>:
  41ec72:	4770      	bx	lr

Disassembly of section .rodata.totrot%467:

0041ec74 <totrot>:
  41ec74:	0201 0604 0a08 0e0c 110f 1513 1917 1c1b     ................

Disassembly of section .text.wc_RsaEncryptSize%468:

0041ec84 <wc_RsaEncryptSize>:
}
#endif

int wc_RsaEncryptSize(RsaKey* key)
{
    if (key == NULL) {
  41ec84:	b118      	cbz	r0, 41ec8e <.LCFI18>
{
  41ec86:	b508      	push	{r3, lr}

0041ec88 <.LCFI17>:
        return BAD_FUNC_ARG;
    }
    return mp_unsigned_bin_size(&key->n);
  41ec88:	f000 f952 	bl	41ef30 <.LFE82>

0041ec8c <.LVL85>:
  41ec8c:	bd08      	pop	{r3, pc}

0041ec8e <.LCFI18>:
        return BAD_FUNC_ARG;
  41ec8e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041ec92 <.LVL87>:
  41ec92:	4770      	bx	lr

Disassembly of section .text.mp_init%469:

0041ec94 <mp_init>:
  if (a)
  41ec94:	b120      	cbz	r0, 41eca0 <.LCFI40>
{
  41ec96:	b508      	push	{r3, lr}

0041ec98 <.LBB16>:
    fp_zero(a);
  41ec98:	f7ff ff48 	bl	41eb2c <.LFE154>

0041ec9c <.LBE16>:
}
  41ec9c:	2000      	movs	r0, #0
  41ec9e:	bd08      	pop	{r3, pc}

0041eca0 <.LCFI40>:
  41eca0:	2000      	movs	r0, #0

0041eca2 <.LVL333>:
  41eca2:	4770      	bx	lr

Disassembly of section .text.UARTDeviceWriteCallback%470:

0041eca4 <UARTDeviceWriteCallback>:
    consUartData.isWriteComplete = true;
  41eca4:	2201      	movs	r2, #1
  41eca6:	4b02      	ldr	r3, [pc, #8]	; (41ecb0 <.LFE61+0xc>)
  41eca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  41ecac:	4770      	bx	lr
  41ecae:	bf00      	nop
  41ecb0:	20417638 	.word	0x20417638

Disassembly of section .text.USART1_WriteCallbackRegister%471:

0041ecb4 <USART1_WriteCallbackRegister>:


bool USART1_WriteCallbackRegister( USART_CALLBACK callback, uintptr_t context )
{
    usart1Obj.txCallback = callback;
  41ecb4:	4b02      	ldr	r3, [pc, #8]	; (41ecc0 <.LVL43+0x4>)
  41ecb6:	60d8      	str	r0, [r3, #12]
    usart1Obj.txContext = context;
  41ecb8:	6119      	str	r1, [r3, #16]

    return true;
}
  41ecba:	2001      	movs	r0, #1

0041ecbc <.LVL43>:
  41ecbc:	4770      	bx	lr
  41ecbe:	bf00      	nop
  41ecc0:	20400020 	.word	0x20400020

Disassembly of section .text.USART1_ReadCallbackRegister%472:

0041ecc4 <USART1_ReadCallbackRegister>:

bool USART1_ReadCallbackRegister( USART_CALLBACK callback, uintptr_t context )
{
    usart1Obj.rxCallback = callback;
  41ecc4:	4b02      	ldr	r3, [pc, #8]	; (41ecd0 <.LVL45+0x4>)
  41ecc6:	6258      	str	r0, [r3, #36]	; 0x24
    usart1Obj.rxContext = context;
  41ecc8:	6299      	str	r1, [r3, #40]	; 0x28

    return true;
}
  41ecca:	2001      	movs	r0, #1

0041eccc <.LVL45>:
  41eccc:	4770      	bx	lr
  41ecce:	bf00      	nop
  41ecd0:	20400020 	.word	0x20400020

Disassembly of section .text.calloc%473:

0041ecd4 <calloc>:
  41ecd4:	4b02      	ldr	r3, [pc, #8]	; (41ece0 <.LVL3>)
  41ecd6:	460a      	mov	r2, r1
  41ecd8:	4601      	mov	r1, r0

0041ecda <.LVL1>:
  41ecda:	6818      	ldr	r0, [r3, #0]

0041ecdc <.LVL2>:
  41ecdc:	f7fd be84 	b.w	41c9e8 <.LFE154>

0041ece0 <.LVL3>:
  41ece0:	2041788c 	.word	0x2041788c

Disassembly of section .text.malloc%474:

0041ece4 <malloc>:
  41ece4:	4b02      	ldr	r3, [pc, #8]	; (41ecf0 <.LVL2+0x2>)
  41ece6:	4601      	mov	r1, r0
  41ece8:	6818      	ldr	r0, [r3, #0]

0041ecea <.LVL1>:
  41ecea:	f7ef b935 	b.w	40df58 <.LFE174>

0041ecee <.LVL2>:
  41ecee:	bf00      	nop
  41ecf0:	2041788c 	.word	0x2041788c

Disassembly of section .text.free%475:

0041ecf4 <free>:
  41ecf4:	4b02      	ldr	r3, [pc, #8]	; (41ed00 <.LVL5+0x2>)
  41ecf6:	4601      	mov	r1, r0
  41ecf8:	6818      	ldr	r0, [r3, #0]

0041ecfa <.LVL4>:
  41ecfa:	f7f6 bcd5 	b.w	4156a8 <_free_r>

0041ecfe <.LVL5>:
  41ecfe:	bf00      	nop
  41ed00:	2041788c 	.word	0x2041788c

Disassembly of section .rodata.blanks.8352%476:

0041ed04 <blanks.8352>:
  41ed04:	20202020 20202020 20202020 20202020                     

Disassembly of section .rodata.zeroes.8353%477:

0041ed14 <zeroes.8353>:
  41ed14:	30303030 30303030 30303030 30303030     0000000000000000

Disassembly of section .text.main%478:

0041ed24 <main>:
// Section: Main Entry Point
// *****************************************************************************
// *****************************************************************************

int main ( void )
{
  41ed24:	b508      	push	{r3, lr}

0041ed26 <.LCFI0>:
    /* Initialize all modules */
    SYS_Initialize ( NULL );
  41ed26:	2000      	movs	r0, #0
  41ed28:	f7fd fd6e 	bl	41c808 <SYS_Initialize>

0041ed2c <.LVL0>:

    while ( true )
    {
        /* Maintain state machines of all polled MPLAB Harmony modules. */
        SYS_Tasks ( );
  41ed2c:	f7fe fee8 	bl	41db00 <.LFE165>

0041ed30 <.LVL1>:
  41ed30:	e7fc      	b.n	41ed2c <.LVL0>

Disassembly of section .text.myFree%479:

0041ed32 <myFree>:
    XFREE(memory, opaque, DYNAMIC_TYPE_LIBZ);
  41ed32:	b121      	cbz	r1, 41ed3e <.LCFI1>

0041ed34 <.LBE2>:
{
  41ed34:	b508      	push	{r3, lr}

0041ed36 <.LCFI0>:
  41ed36:	4608      	mov	r0, r1

0041ed38 <.LBB3>:
    XFREE(memory, opaque, DYNAMIC_TYPE_LIBZ);
  41ed38:	f7ff fe50 	bl	41e9dc <.LFE2>

0041ed3c <.LVL2>:
  41ed3c:	bd08      	pop	{r3, pc}

0041ed3e <.LCFI1>:
  41ed3e:	4770      	bx	lr

Disassembly of section .text.wc_ecc_init%480:

0041ed40 <wc_ecc_init>:
{
  41ed40:	b508      	push	{r3, lr}

0041ed42 <.LCFI77>:
    return wc_ecc_init_ex(key, NULL, INVALID_DEVID);
  41ed42:	f06f 0201 	mvn.w	r2, #1
  41ed46:	2100      	movs	r1, #0
  41ed48:	f7fe faf0 	bl	41d32c <.LFE8>

0041ed4c <.LVL941>:
}
  41ed4c:	bd08      	pop	{r3, pc}

Disassembly of section .text.wc_InitSha512%481:

0041ed4e <wc_InitSha512>:
{
  41ed4e:	b508      	push	{r3, lr}

0041ed50 <.LCFI12>:
    return wc_InitSha512_ex(sha512, NULL, INVALID_DEVID);
  41ed50:	f06f 0201 	mvn.w	r2, #1
  41ed54:	2100      	movs	r1, #0
  41ed56:	f7fa fd6f 	bl	419838 <wc_InitSha512_ex>

0041ed5a <.LVL80>:
}
  41ed5a:	bd08      	pop	{r3, pc}

Disassembly of section .text.wc_InitSha384%482:

0041ed5c <wc_InitSha384>:
#endif

int wc_InitSha384(Sha384* sha384)
{
  41ed5c:	b508      	push	{r3, lr}

0041ed5e <.LCFI21>:
    return wc_InitSha384_ex(sha384, NULL, INVALID_DEVID);
  41ed5e:	f06f 0201 	mvn.w	r2, #1
  41ed62:	2100      	movs	r1, #0
  41ed64:	f7fa fdc4 	bl	4198f0 <.LFE15>

0041ed68 <.LVL145>:
}
  41ed68:	bd08      	pop	{r3, pc}

Disassembly of section .text.vTaskMissedYield%483:

0041a194 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  41a194:	4b012201 	.word	0x4b012201
  41a198:	601a      	str	r2, [r3, #0]
  41a19a:	4770      	bx	lr
  41a19c:	20417870 	.word	0x20417870

Disassembly of section .text.APP_Initialize%484:

0041ed6c <APP_Initialize>:
    appData.state = APP_STATE_INIT;
  41ed6c:	2200      	movs	r2, #0
  41ed6e:	4b01      	ldr	r3, [pc, #4]	; (41ed74 <APP_Initialize+0x8>)
  41ed70:	701a      	strb	r2, [r3, #0]
  41ed72:	4770      	bx	lr
  41ed74:	20417598 	.word	0x20417598

Disassembly of section .rodata%485:

0041ed78 <.LANCHOR0>:
  41ed78:	5f505041 	.word	0x5f505041
  41ed7c:	6b736154 	.word	0x6b736154
  41ed80:	0073      	.short	0x0073
  41ed82:	bf00      	nop

Disassembly of section .text.myAlloc%486:

0041ed84 <myAlloc>:
{
  41ed84:	b508      	push	{r3, lr}

0041ed86 <.LCFI2>:
    return XMALLOC(item * size, opaque, DYNAMIC_TYPE_LIBZ);
  41ed86:	fb02 f001 	mul.w	r0, r2, r1

0041ed8a <.LVL5>:
  41ed8a:	f7ff fe1b 	bl	41e9c4 <.LFE180>

0041ed8e <.LVL6>:
}
  41ed8e:	bd08      	pop	{r3, pc}

Disassembly of section .text.wc_InitRsaKey%487:

0041ed90 <wc_InitRsaKey>:
{
  41ed90:	b508      	push	{r3, lr}

0041ed92 <.LCFI14>:
    return wc_InitRsaKey_ex(key, heap, INVALID_DEVID);
  41ed92:	f06f 0201 	mvn.w	r2, #1
  41ed96:	f7fc f821 	bl	41addc <.LFE18>

0041ed9a <.LVL64>:
}
  41ed9a:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_clear%488:

0041ed9c <mp_clear>:
    if (a == NULL)
  41ed9c:	b118      	cbz	r0, 41eda6 <.LCFI49>
{
  41ed9e:	b508      	push	{r3, lr}

0041eda0 <.LCFI48>:
    fp_clear(a);
  41eda0:	f7ff fece 	bl	41eb40 <.LFE63>

0041eda4 <.LVL355>:
  41eda4:	bd08      	pop	{r3, pc}

0041eda6 <.LCFI49>:
  41eda6:	4770      	bx	lr

Disassembly of section .text.zcalloc%489:

0041eda8 <zcalloc>:

voidpf ZLIB_INTERNAL zcalloc (opaque, items, size)
    voidpf opaque;
    unsigned items;
    unsigned size;
{
  41eda8:	b508      	push	{r3, lr}

0041edaa <.LCFI0>:
    if (opaque) items += size - size; /* make compiler happy */
    return sizeof(uInt) > 2 ? (voidpf)malloc(items * size) :
  41edaa:	fb02 f001 	mul.w	r0, r2, r1

0041edae <.LVL4>:
  41edae:	f7ff ff99 	bl	41ece4 <.LFE0>

0041edb2 <.LVL5>:
                              (voidpf)calloc(items, size);
}
  41edb2:	bd08      	pop	{r3, pc}

Disassembly of section .text.TC0_CH0_TimerStart%490:

0041edb4 <TC0_CH0_TimerStart>:
    TC0_REGS->TC_CHANNEL[0].TC_CCR = (TC_CCR_CLKEN_Msk | TC_CCR_SWTRG_Msk);
  41edb4:	2205      	movs	r2, #5
  41edb6:	4b01      	ldr	r3, [pc, #4]	; (41edbc <.LFE4+0x8>)
  41edb8:	601a      	str	r2, [r3, #0]
  41edba:	4770      	bx	lr
  41edbc:	4000c000 	.word	0x4000c000

Disassembly of section .text.TC0_CH0_TimerStop%491:

0041edc0 <TC0_CH0_TimerStop>:
    TC0_REGS->TC_CHANNEL[0].TC_CCR = (TC_CCR_CLKDIS_Msk);
  41edc0:	2202      	movs	r2, #2
  41edc2:	4b01      	ldr	r3, [pc, #4]	; (41edc8 <.LFE142+0x8>)
  41edc4:	601a      	str	r2, [r3, #0]
  41edc6:	4770      	bx	lr
  41edc8:	4000c000 	.word	0x4000c000

Disassembly of section .text.TC0_CH0_TimerPeriodSet%492:

0041edcc <TC0_CH0_TimerPeriodSet>:
    TC0_REGS->TC_CHANNEL[0].TC_RC = period;
  41edcc:	4b01      	ldr	r3, [pc, #4]	; (41edd4 <.LFE143+0x8>)
  41edce:	61d8      	str	r0, [r3, #28]
  41edd0:	4770      	bx	lr
  41edd2:	bf00      	nop
  41edd4:	4000c000 	.word	0x4000c000

Disassembly of section .text.TC0_CH0_TimerCompareSet%493:

0041edd8 <TC0_CH0_TimerCompareSet>:
    TC0_REGS->TC_CHANNEL[0].TC_RA = compare;
  41edd8:	4b01      	ldr	r3, [pc, #4]	; (41ede0 <.LFE145+0x8>)
  41edda:	6158      	str	r0, [r3, #20]
  41eddc:	4770      	bx	lr
  41edde:	bf00      	nop
  41ede0:	4000c000 	.word	0x4000c000

Disassembly of section .text.TC0_CH0_TimerCounterGet%494:

0041ede4 <TC0_CH0_TimerCounterGet>:
    return TC0_REGS->TC_CHANNEL[0].TC_CV;
  41ede4:	4b01      	ldr	r3, [pc, #4]	; (41edec <.LFE146+0x8>)
  41ede6:	6918      	ldr	r0, [r3, #16]
}
  41ede8:	b280      	uxth	r0, r0
  41edea:	4770      	bx	lr
  41edec:	4000c000 	.word	0x4000c000

Disassembly of section .text.TC0_CH0_TimerCallbackRegister%495:

0041edf0 <TC0_CH0_TimerCallbackRegister>:
    TC0_CH0_CallbackObj.callback_fn = callback;
  41edf0:	4b01      	ldr	r3, [pc, #4]	; (41edf8 <.LFE148+0x8>)
  41edf2:	6018      	str	r0, [r3, #0]
    TC0_CH0_CallbackObj.context = context;
  41edf4:	6059      	str	r1, [r3, #4]
  41edf6:	4770      	bx	lr
  41edf8:	20400018 	.word	0x20400018

Disassembly of section .text.USART1_ReadCountGet%496:

0041edfc <USART1_ReadCountGet>:
}

size_t USART1_ReadCountGet( void )
{
    return usart1Obj.rxProcessedSize;
}
  41edfc:	4b01      	ldr	r3, [pc, #4]	; (41ee04 <.LFE149+0x8>)
  41edfe:	6a18      	ldr	r0, [r3, #32]
  41ee00:	4770      	bx	lr
  41ee02:	bf00      	nop
  41ee04:	20400020 	.word	0x20400020

Disassembly of section .text.atexit%497:

0041ee08 <atexit>:
  41ee08:	2300      	movs	r3, #0
  41ee0a:	4601      	mov	r1, r0
  41ee0c:	461a      	mov	r2, r3
  41ee0e:	4618      	mov	r0, r3

0041ee10 <.LVL1>:
  41ee10:	f7fb b8cc 	b.w	419fac <__register_exitproc>

Disassembly of section .rodata.p05.7179%498:

0041ee14 <p05.7179>:
  41ee14:	0005 0000 0019 0000 007d 0000               ........}...

Disassembly of section .text.wc_ecc_make_key%499:

0041ee20 <wc_ecc_make_key>:
{
  41ee20:	b508      	push	{r3, lr}

0041ee22 <.LCFI71>:
    return wc_ecc_make_key_ex(rng, keysize, key, ECC_CURVE_DEF);
  41ee22:	2300      	movs	r3, #0
  41ee24:	f7f6 fe04 	bl	415a30 <.LFE18>

0041ee28 <.LVL930>:
}
  41ee28:	bd08      	pop	{r3, pc}

Disassembly of section .text.wc_ecc_import_x963%500:

0041ee2a <wc_ecc_import_x963>:
{
  41ee2a:	b508      	push	{r3, lr}

0041ee2c <.LCFI122>:
    return wc_ecc_import_x963_ex(in, inLen, key, ECC_CURVE_DEF);
  41ee2c:	2300      	movs	r3, #0
  41ee2e:	f7f9 fa53 	bl	4182d8 <.LFE19>

0041ee32 <.LVL1437>:
}
  41ee32:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_add%501:

0041ee34 <mp_add>:
{
  41ee34:	b508      	push	{r3, lr}

0041ee36 <.LCFI51>:
  fp_add(a, b, c);
  41ee36:	f7fe fa2f 	bl	41d298 <.LFE17>

0041ee3a <.LVL372>:
}
  41ee3a:	2000      	movs	r0, #0
  41ee3c:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_sub%502:

0041ee3e <mp_sub>:
{
  41ee3e:	b508      	push	{r3, lr}

0041ee40 <.LCFI52>:
  fp_sub(a, b, c);
  41ee40:	f7fe fb8e 	bl	41d560 <.LFE162>

0041ee44 <.LVL374>:
}
  41ee44:	2000      	movs	r0, #0
  41ee46:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_read_unsigned_bin%503:

0041ee48 <mp_read_unsigned_bin>:
{
  41ee48:	b508      	push	{r3, lr}

0041ee4a <.LCFI57>:
  fp_read_unsigned_bin(a, b, c);
  41ee4a:	f7fd fa11 	bl	41c270 <.LFE43>

0041ee4e <.LVL384>:
}
  41ee4e:	2000      	movs	r0, #0
  41ee50:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_mul%504:

0041ee52 <mp_mul>:
{
  41ee52:	b508      	push	{r3, lr}

0041ee54 <.LCFI69>:
  fp_mul(a, b, c);
  41ee54:	f7ff f90c 	bl	41e070 <.LFE4>

0041ee58 <.LVL464>:
}
  41ee58:	2000      	movs	r0, #0
  41ee5a:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_to_unsigned_bin%505:

0041ee5c <mp_to_unsigned_bin>:
{
  41ee5c:	b508      	push	{r3, lr}

0041ee5e <.LCFI124>:
  fp_to_unsigned_bin(a,b);
  41ee5e:	f7ff fa29 	bl	41e2b4 <.LFE59>

0041ee62 <.LVL823>:
}
  41ee62:	2000      	movs	r0, #0
  41ee64:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_copy%506:

0041ee66 <mp_copy>:
{
  41ee66:	b508      	push	{r3, lr}

0041ee68 <.LCFI125>:
    fp_copy(a, b);
  41ee68:	f7ff fb0a 	bl	41e480 <.LFE185>

0041ee6c <.LVL825>:
}
  41ee6c:	2000      	movs	r0, #0
  41ee6e:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_iszero%507:

0041ee70 <mp_iszero>:
    return fp_iszero(a);
  41ee70:	6800      	ldr	r0, [r0, #0]

0041ee72 <.LVL831>:
}
  41ee72:	fab0 f080 	clz	r0, r0
  41ee76:	0940      	lsrs	r0, r0, #5
  41ee78:	4770      	bx	lr

Disassembly of section .text.mp_montgomery_calc_normalization%508:

0041ee7a <mp_montgomery_calc_normalization>:
{
  41ee7a:	b508      	push	{r3, lr}

0041ee7c <.LCFI137>:
    fp_montgomery_calc_normalization(a, b);
  41ee7c:	f7fc fa44 	bl	41b308 <.LFE16>

0041ee80 <.LVL855>:
}
  41ee80:	2000      	movs	r0, #0
  41ee82:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_sqr%509:

0041ee84 <mp_sqr>:

/* fast math conversion */
int mp_sqr(fp_int *A, fp_int *B)
{
  41ee84:	b508      	push	{r3, lr}

0041ee86 <.LCFI143>:
    fp_sqr(A, B);
  41ee86:	f7ff f94b 	bl	41e120 <.LFE1>

0041ee8a <.LVL887>:
    return MP_OKAY;
}
  41ee8a:	2000      	movs	r0, #0
  41ee8c:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_montgomery_reduce%510:

0041ee8e <mp_montgomery_reduce>:

/* fast math conversion */
int mp_montgomery_reduce(fp_int *a, fp_int *m, fp_digit mp)
{
  41ee8e:	b508      	push	{r3, lr}

0041ee90 <.LCFI144>:
    fp_montgomery_reduce(a, m, mp);
  41ee90:	f7f7 f8e3 	bl	41605a <.LFE39>

0041ee94 <.LVL889>:
    return MP_OKAY;
}
  41ee94:	2000      	movs	r0, #0
  41ee96:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_div_2%511:

0041ee98 <mp_div_2>:
{
    return fp_montgomery_setup(a, rho);
}

int mp_div_2(fp_int * a, fp_int * b)
{
  41ee98:	b508      	push	{r3, lr}

0041ee9a <.LCFI146>:
    fp_div_2(a, b);
  41ee9a:	f7fc f827 	bl	41aeec <.LFE3>

0041ee9e <.LVL893>:
    return MP_OKAY;
}
  41ee9e:	2000      	movs	r0, #0
  41eea0:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_set%512:

0041eea2 <mp_set>:
#endif /* HAVE_ECC */

#if defined(HAVE_ECC) || !defined(NO_RSA) || !defined(NO_DSA)
/* fast math conversion */
int mp_set(fp_int *a, fp_digit b)
{
  41eea2:	b508      	push	{r3, lr}

0041eea4 <.LCFI148>:
    fp_set(a,b);
  41eea4:	f7ff fe18 	bl	41ead8 <.LFE20>

0041eea8 <.LVL897>:
    return MP_OKAY;
}
  41eea8:	2000      	movs	r0, #0
  41eeaa:	bd08      	pop	{r3, pc}

Disassembly of section .text.get_digit_count%513:

0041eeac <get_digit_count>:
    if (a == NULL)
  41eeac:	b108      	cbz	r0, 41eeb2 <.LVL2>
    return a->used;
  41eeae:	6800      	ldr	r0, [r0, #0]

0041eeb0 <.LVL1>:
  41eeb0:	4770      	bx	lr

0041eeb2 <.LVL2>:
        return 0;
  41eeb2:	2000      	movs	r0, #0

0041eeb4 <.LVL3>:
}
  41eeb4:	4770      	bx	lr

Disassembly of section .text.zcfree%514:

0041eeb6 <zcfree>:

void ZLIB_INTERNAL zcfree (opaque, ptr)
    voidpf opaque;
    voidpf ptr;
{
  41eeb6:	b508      	push	{r3, lr}

0041eeb8 <.LCFI1>:
    free(ptr);
  41eeb8:	4608      	mov	r0, r1

0041eeba <.LVL7>:
  41eeba:	f7ff ff1b 	bl	41ecf4 <.LFE0>

0041eebe <.LVL8>:
  41eebe:	bd08      	pop	{r3, pc}

Disassembly of section .rodata%515:

0041eec0 <.LANCHOR17>:
  41eec0:	454c4449 	.word	0x454c4449
  41eec4:	00          	.byte	0x00
  41eec5:	00          	.byte	0x00
  41eec6:	bf00      	nop

0041eec8 <.LANCHOR0>:
  41eec8:	2e322e31 	.word	0x2e322e31
  41eecc:	0037      	.short	0x0037
  41eece:	bf00      	nop

Disassembly of section .rodata.ecc_oid_prime239v1%517:

0041eed0 <ecc_oid_prime239v1>:
  41eed0:	862a ce48 033d 0401                         *.H.=...

Disassembly of section .rodata.ecc_oid_secp112r1%518:

0041eed8 <ecc_oid_secp112r1>:
  41eed8:	812b 0004 0006 bf00                         +.......

Disassembly of section .rodata.ecc_oid_secp128r1%519:

0041eee0 <ecc_oid_secp128r1>:
  41eee0:	812b 0004 001c bf00                         +.......

Disassembly of section .rodata.ecc_oid_secp160r1%520:

0041eee8 <ecc_oid_secp160r1>:
  41eee8:	812b 0004 0008 bf00                         +.......

Disassembly of section .rodata.ecc_oid_secp192r1%521:

0041eef0 <ecc_oid_secp192r1>:
  41eef0:	862a ce48 033d 0101                         *.H.=...

Disassembly of section .rodata.ecc_oid_secp224r1%522:

0041eef8 <ecc_oid_secp224r1>:
  41eef8:	812b 0004 0021 bf00                         +...!...

Disassembly of section .rodata.ecc_oid_secp256r1%523:

0041ef00 <ecc_oid_secp256r1>:
  41ef00:	862a ce48 033d 0701                         *.H.=...

Disassembly of section .rodata.ecc_oid_secp384r1%524:

0041ef08 <ecc_oid_secp384r1>:
  41ef08:	812b 0004 0022 bf00                         +..."...

Disassembly of section .rodata.ecc_oid_secp521r1%525:

0041ef10 <ecc_oid_secp521r1>:
  41ef10:	812b 0004 0023 bf00                         +...#...

Disassembly of section .text.mp_forcezero%526:

0041ef18 <mp_forcezero>:
{
  41ef18:	b508      	push	{r3, lr}

0041ef1a <.LCFI47>:
    fp_forcezero(a);
  41ef1a:	f7ff fae6 	bl	41e4ea <.LFE55>

0041ef1e <.LVL352>:
  41ef1e:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_cmp%527:

0041ef20 <mp_cmp>:
{
  41ef20:	b508      	push	{r3, lr}

0041ef22 <.LCFI54>:
  return fp_cmp(a, b);
  41ef22:	f7fe ff6e 	bl	41de02 <.LFE7>

0041ef26 <.LVL378>:
}
  41ef26:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_cmp_d%528:

0041ef28 <mp_cmp_d>:
{
  41ef28:	b508      	push	{r3, lr}

0041ef2a <.LCFI55>:
  return fp_cmp_d(a, b);
  41ef2a:	f7fe f8ab 	bl	41d084 <.LFE0>

0041ef2e <.LVL380>:
}
  41ef2e:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_unsigned_bin_size%529:

0041ef30 <mp_unsigned_bin_size>:
{
  41ef30:	b508      	push	{r3, lr}

0041ef32 <.LCFI56>:
  return fp_unsigned_bin_size(a);
  41ef32:	f7ff fbef 	bl	41e714 <.LFE17>

0041ef36 <.LVL382>:
}
  41ef36:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_invmod%530:

0041ef38 <mp_invmod>:
{
  41ef38:	b508      	push	{r3, lr}

0041ef3a <.LCFI97>:
  return fp_invmod(a, b, c);
  41ef3a:	f7f0 fe29 	bl	40fb90 <fp_invmod>

0041ef3e <.LVL731>:
}
  41ef3e:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_mulmod%531:

0041ef40 <mp_mulmod>:
{
  41ef40:	b508      	push	{r3, lr}

0041ef42 <.LCFI101>:
  return fp_mulmod(a, b, c, d);
  41ef42:	f7ff f852 	bl	41dfea <.LFE191>

0041ef46 <.LVL739>:
}
  41ef46:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_mod%532:

0041ef48 <mp_mod>:
{
  41ef48:	b508      	push	{r3, lr}

0041ef4a <.LCFI114>:
  return fp_mod (a, b, c);
  41ef4a:	f7fe faa2 	bl	41d492 <.LFE171>

0041ef4e <.LVL796>:
}
  41ef4e:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_exptmod%533:

0041ef50 <mp_exptmod>:
{
  41ef50:	b508      	push	{r3, lr}

0041ef52 <.LCFI120>:
  return fp_exptmod(G, X, P, Y);
  41ef52:	f7fd fc27 	bl	41c7a4 <fp_exptmod>

0041ef56 <.LVL814>:
}
  41ef56:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_count_bits%534:

0041ef58 <mp_count_bits>:
{
  41ef58:	b508      	push	{r3, lr}

0041ef5a <.LCFI126>:
    return fp_count_bits(a);
  41ef5a:	f7ff fc58 	bl	41e80e <.LFE26>

0041ef5e <.LVL833>:
}
  41ef5e:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_leading_bit%535:

0041ef60 <mp_leading_bit>:
{
  41ef60:	b508      	push	{r3, lr}

0041ef62 <.LCFI127>:
    return fp_leading_bit(a);
  41ef62:	f7ff fab1 	bl	41e4c8 <.LFE0>

0041ef66 <.LVL835>:
}
  41ef66:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_rshb%536:

0041ef68 <mp_rshb>:
{
  41ef68:	b508      	push	{r3, lr}

0041ef6a <.LCFI128>:
    fp_rshb(a, x);
  41ef6a:	f7fd f8dd 	bl	41c128 <.LFE194>

0041ef6e <.LVL837>:
  41ef6e:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_montgomery_setup%537:

0041ef70 <mp_montgomery_setup>:
{
  41ef70:	b508      	push	{r3, lr}

0041ef72 <.LCFI145>:
    return fp_montgomery_setup(a, rho);
  41ef72:	f7fe fb9b 	bl	41d6ac <.LFE179>

0041ef76 <.LVL891>:
}
  41ef76:	bd08      	pop	{r3, pc}

Disassembly of section .rodata.wc_off_on_addr%538:

0041ef78 <wc_off_on_addr>:
  41ef78:	0000 0000 ffff ffff                         ........

Disassembly of section .text._tr_flush_bits%539:

0041ef80 <_tr_flush_bits>:
{
  41ef80:	b508      	push	{r3, lr}

0041ef82 <.LCFI22>:
    bi_flush(s);
  41ef82:	f7fd fcd1 	bl	41c928 <.LFE223>

0041ef86 <.LVL305>:
  41ef86:	bd08      	pop	{r3, pc}

Disassembly of section .text.TC0_CH0_TimerFrequencyGet%540:

0041ef88 <TC0_CH0_TimerFrequencyGet>:
}
  41ef88:	4800      	ldr	r0, [pc, #0]	; (41ef8c <.LFE12+0x4>)
  41ef8a:	4770      	bx	lr
  41ef8c:	08f0d180 	.word	0x08f0d180

Disassembly of section .text.vListInitialiseItem%541:

0041ef90 <vListInitialiseItem>:
	pxItem->pvContainer = NULL;
  41ef90:	2300      	movs	r3, #0
  41ef92:	6103      	str	r3, [r0, #16]
  41ef94:	4770      	bx	lr

Disassembly of section .text%542:

00413adc <__aeabi_idiv0>:
  413adc:	4770      	bx	lr

00413ade <L0>:
  413ade:	bf00      	nop

Disassembly of section .rodata._global_impure_ptr%543:

00419834 <_global_impure_ptr>:
  419834:	6858 2041                                   XhA 

Disassembly of section .text.__malloc_lock%544:

0041e354 <__malloc_lock>:
  41e354:	4770      	bx	lr
  41e356:	bf00      	nop

Disassembly of section .text.__malloc_unlock%545:

0041ef98 <__malloc_unlock>:
  41ef98:	4770      	bx	lr

0041ef9a <.LFE1>:
  41ef9a:	bf00      	nop

Disassembly of section .text.Dummy_Handler%546:

00414726 <Dummy_Handler>:

extern uint32_t _stack;

/* Brief default interrupt handler for unused IRQs.*/
void __attribute__((optimize("-O1"),section(".text.Dummy_Handler"),long_call))Dummy_Handler(void)
{
  414726:	e7fe      	b.n	414726 <Dummy_Handler>

Disassembly of section .text.NonMaskableInt_Handler%547:

004156a6 <NonMaskableInt_Handler>:
// *****************************************************************************

/* Brief default interrupt handlers for core IRQs.*/

void NonMaskableInt_Handler(void)
{
  4156a6:	e7fe      	b.n	4156a6 <NonMaskableInt_Handler>

Disassembly of section .text.HardFault_Handler%548:

00416886 <HardFault_Handler>:
    {
    }
}

void HardFault_Handler(void)
{
  416886:	e7fe      	b.n	416886 <HardFault_Handler>

Disassembly of section .text.DebugMonitor_Handler%549:

00416d46 <DebugMonitor_Handler>:
   {
   }
}

void DebugMonitor_Handler(void)
{
  416d46:	e7fe      	b.n	416d46 <DebugMonitor_Handler>

Disassembly of section .text.MemoryManagement_Handler%550:

0041741e <MemoryManagement_Handler>:
   {
   }
}

void MemoryManagement_Handler(void)
{
  41741e:	e7fe      	b.n	41741e <MemoryManagement_Handler>

Disassembly of section .text.BusFault_Handler%551:

0041785e <BusFault_Handler>:
   {
   }
}

void BusFault_Handler(void)
{
  41785e:	e7fe      	b.n	41785e <BusFault_Handler>

Disassembly of section .text.UsageFault_Handler%552:

0041954a <UsageFault_Handler>:
   {
   }
}

void UsageFault_Handler(void)
{
  41954a:	e7fe      	b.n	41954a <UsageFault_Handler>

Disassembly of section .text.vPortFree%553:

004196c2 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  4196c2:	4770      	bx	lr
