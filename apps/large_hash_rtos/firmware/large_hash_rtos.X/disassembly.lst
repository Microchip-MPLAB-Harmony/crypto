
dist\sam_e70_xplained_ultra\production\large_hash_rtos.X.production.elf:     file format elf32-littlearm


Disassembly of section .vectors:

00400000 <exception_table>:
  400000:	f0 ff 45 20 6d 85 40 00 33 a6 40 00 df b8 40 00     ..E m.@.3.@...@.
  400010:	c7 bc 40 00 a3 bd 40 00 67 be 40 00 00 00 00 00     ..@...@.g.@.....
	...
  40002c:	f1 b7 40 00 db bb 40 00 00 00 00 00 21 a9 40 00     ..@...@.....!.@.
  40003c:	11 b5 40 00 f3 a2 40 00 f3 a2 40 00 f3 a2 40 00     ..@...@...@...@.
  40004c:	f3 a2 40 00 f3 a2 40 00 f3 a2 40 00 f3 a2 40 00     ..@...@...@...@.
  40005c:	f3 a2 40 00 f3 a2 40 00 00 00 00 00 f3 a2 40 00     ..@...@.......@.
  40006c:	f3 a2 40 00 f3 a2 40 00 f3 a2 40 00 25 83 40 00     ..@...@...@.%.@.
  40007c:	f3 a2 40 00 f3 a2 40 00 f3 a2 40 00 f3 a2 40 00     ..@...@...@...@.
  40008c:	f3 a2 40 00 f3 a2 40 00 f3 a2 40 00 f3 a2 40 00     ..@...@...@...@.
  40009c:	a1 b8 40 00 f3 a2 40 00 f3 a2 40 00 f3 a2 40 00     ..@...@...@...@.
  4000ac:	f3 a2 40 00 f3 a2 40 00 f3 a2 40 00 f3 a2 40 00     ..@...@...@...@.
  4000bc:	f3 a2 40 00 f3 a2 40 00 f3 a2 40 00 f3 a2 40 00     ..@...@...@...@.
  4000cc:	f3 a2 40 00 f3 a2 40 00 f3 a2 40 00 f3 a2 40 00     ..@...@...@...@.
  4000dc:	f3 a2 40 00 f3 a2 40 00 f3 a2 40 00 f3 a2 40 00     ..@...@...@...@.
  4000ec:	f3 a2 40 00 f3 a2 40 00 f3 a2 40 00 f3 a2 40 00     ..@...@...@...@.
  4000fc:	f3 a2 40 00 f3 a2 40 00 f3 a2 40 00 f3 a2 40 00     ..@...@...@...@.
  40010c:	f3 a2 40 00 f3 a2 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 f3 a2 40 00 f3 a2 40 00 f3 a2 40 00     ......@...@...@.
  40012c:	f3 a2 40 00 f3 a2 40 00 f3 a2 40 00 f3 a2 40 00     ..@...@...@...@.
  40013c:	f3 a2 40 00 f3 a2 40 00 f3 a2 40 00 f3 a2 40 00     ..@...@...@...@.
  40014c:	f3 a2 40 00 f3 a2 40 00 f3 a2 40 00 f3 a2 40 00     ..@...@...@...@.
  40015c:	f3 a2 40 00 f3 a2 40 00 f3 a2 40 00                 ..@...@...@.

Disassembly of section .text:

00400168 <_init>:
  400168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40016a:	bf00      	nop
  40016c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40016e:	bc08      	pop	{r3}
  400170:	469e      	mov	lr, r3
  400172:	4770      	bx	lr

00400174 <__init_array_start>:
  400174:	0040bc41 	.word	0x0040bc41

00400178 <__frame_dummy_init_array_entry>:
  400178:	0040a739                                9.@.

0040017c <_fini>:
  40017c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40017e:	bf00      	nop
  400180:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400182:	bc08      	pop	{r3}
  400184:	469e      	mov	lr, r3
  400186:	4770      	bx	lr

00400188 <__fini_array_start>:
  400188:	0040a715 	.word	0x0040a715

Disassembly of section .ARM.exidx:

0040018c <.ARM.exidx>:
  40018c:	00006af4 	.word	0x00006af4
  400190:	00000001 	.word	0x00000001

Disassembly of section .text._Transform%54:

00400194 <_Transform>:

#define R(i) h(i)+=S1(e(i))+Ch(e(i),f(i),g(i))+K[i+j]+(j?blk2(i):blk0(i));\
    d(i)+=h(i);h(i)+=S0(a(i))+Maj(a(i),b(i),c(i))

static int _Transform(Sha512* sha512)
{
  400194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00400198 <.LCFI0>:
  400198:	f2ad 7d94 	subw	sp, sp, #1940	; 0x794

0040019c <.LCFI1>:
  40019c:	f8cd 06cc 	str.w	r0, [sp, #1740]	; 0x6cc
#else
    word64 W[16];
#endif

    /* Copy digest to working vars */
    XMEMCPY(T, sha512->digest, sizeof(T));
  4001a0:	f100 0418 	add.w	r4, r0, #24
  4001a4:	f50d 66ea 	add.w	r6, sp, #1872	; 0x750
  4001a8:	f100 0758 	add.w	r7, r0, #88	; 0x58

004001ac <.LVL2>:
  4001ac:	4635      	mov	r5, r6
  4001ae:	6820      	ldr	r0, [r4, #0]
  4001b0:	6861      	ldr	r1, [r4, #4]
  4001b2:	68a2      	ldr	r2, [r4, #8]
  4001b4:	68e3      	ldr	r3, [r4, #12]
  4001b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  4001b8:	3410      	adds	r4, #16
  4001ba:	462e      	mov	r6, r5
  4001bc:	42bc      	cmp	r4, r7
  4001be:	d1f5      	bne.n	4001ac <.LVL2>

004001c0 <.LVL3>:
  4001c0:	f50d 63da 	add.w	r3, sp, #1744	; 0x6d0
  4001c4:	e9d3 3400 	ldrd	r3, r4, [r3]
  4001c8:	e9cd 341c 	strd	r3, r4, [sp, #112]	; 0x70
  4001cc:	f50d 63ed 	add.w	r3, sp, #1896	; 0x768
  4001d0:	e9d3 ab00 	ldrd	sl, fp, [r3]
  4001d4:	f50d 63ea 	add.w	r3, sp, #1872	; 0x750
  4001d8:	e9d3 3400 	ldrd	r3, r4, [r3]
  4001dc:	4625      	mov	r5, r4
  4001de:	461c      	mov	r4, r3
  4001e0:	f50d 63eb 	add.w	r3, sp, #1880	; 0x758
  4001e4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4001e8:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  4001ec:	f50d 63ec 	add.w	r3, sp, #1888	; 0x760
  4001f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4001f4:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8
  4001f8:	f50d 63f1 	add.w	r3, sp, #1928	; 0x788
  4001fc:	e9d3 2300 	ldrd	r2, r3, [r3]
  400200:	e9cd 2306 	strd	r2, r3, [sp, #24]
  400204:	f50d 63dc 	add.w	r3, sp, #1760	; 0x6e0
  400208:	e9d3 2300 	ldrd	r2, r3, [r3]
  40020c:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  400210:	f50d 63dd 	add.w	r3, sp, #1768	; 0x6e8
  400214:	e9d3 2300 	ldrd	r2, r3, [r3]
  400218:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  40021c:	f50d 63db 	add.w	r3, sp, #1752	; 0x6d8
  400220:	e9d3 2300 	ldrd	r2, r3, [r3]
  400224:	e9cd 2308 	strd	r2, r3, [sp, #32]
  400228:	f50d 63de 	add.w	r3, sp, #1776	; 0x6f0
  40022c:	e9d3 2300 	ldrd	r2, r3, [r3]
  400230:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
  400234:	f50d 63df 	add.w	r3, sp, #1784	; 0x6f8
  400238:	e9d3 2300 	ldrd	r2, r3, [r3]
  40023c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  400240:	f50d 63e0 	add.w	r3, sp, #1792	; 0x700
  400244:	e9d3 2300 	ldrd	r2, r3, [r3]
  400248:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  40024c:	f50d 63e1 	add.w	r3, sp, #1800	; 0x708
  400250:	e9d3 2300 	ldrd	r2, r3, [r3]
  400254:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  400258:	f50d 63e3 	add.w	r3, sp, #1816	; 0x718
  40025c:	e9d3 2300 	ldrd	r2, r3, [r3]
  400260:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  400264:	f50d 63f0 	add.w	r3, sp, #1920	; 0x780
  400268:	e9d3 2300 	ldrd	r2, r3, [r3]
  40026c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  400270:	f50d 63e2 	add.w	r3, sp, #1808	; 0x710
  400274:	e9d3 2300 	ldrd	r2, r3, [r3]
  400278:	e9cd 2300 	strd	r2, r3, [sp]
  40027c:	f50d 63e4 	add.w	r3, sp, #1824	; 0x720
  400280:	e9d3 2300 	ldrd	r2, r3, [r3]
  400284:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
  400288:	f50d 63ef 	add.w	r3, sp, #1912	; 0x778
  40028c:	e9d3 8900 	ldrd	r8, r9, [r3]
  400290:	f50d 63e5 	add.w	r3, sp, #1832	; 0x728
  400294:	e9d3 2300 	ldrd	r2, r3, [r3]
  400298:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  40029c:	f50d 63ee 	add.w	r3, sp, #1904	; 0x770
  4002a0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4002a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4002a8:	f50d 63e6 	add.w	r3, sp, #1840	; 0x730
  4002ac:	e9d3 2300 	ldrd	r2, r3, [r3]
  4002b0:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  4002b4:	f50d 63e7 	add.w	r3, sp, #1848	; 0x738
  4002b8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4002bc:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
  4002c0:	f50d 63e8 	add.w	r3, sp, #1856	; 0x740
  4002c4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4002c8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  4002cc:	f50d 63e9 	add.w	r3, sp, #1864	; 0x748
  4002d0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4002d4:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
  4002d8:	4b5a      	ldr	r3, [pc, #360]	; (400444 <.LBE365+0x4e>)
            R(m);
        }
    }
#else
    /* 80 operations, partially loop unrolled */
    for (j = 0; j < 80; j += 16) {
  4002da:	f04f 0c00 	mov.w	ip, #0
  4002de:	469e      	mov	lr, r3
  4002e0:	4667      	mov	r7, ip

004002e2 <.LVL4>:
  4002e2:	f8dd c6cc 	ldr.w	ip, [sp, #1740]	; 0x6cc

004002e6 <.LBB353>:
}


STATIC INLINE word64 rotrFixed64(word64 x, word64 y)
{
    return (x >> y) | (x << (sizeof(y) * 8 - y));
  4002e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4002ea:	0b83      	lsrs	r3, r0, #14
  4002ec:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  4002f0:	9370      	str	r3, [sp, #448]	; 0x1c0
  4002f2:	0b8b      	lsrs	r3, r1, #14
  4002f4:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
  4002f8:	9371      	str	r3, [sp, #452]	; 0x1c4

004002fa <.LBB355>:
  4002fa:	0c83      	lsrs	r3, r0, #18
  4002fc:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
  400300:	9372      	str	r3, [sp, #456]	; 0x1c8
  400302:	0c8b      	lsrs	r3, r1, #18
  400304:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
  400308:	9373      	str	r3, [sp, #460]	; 0x1cc

0040030a <.LBE355>:
        R( 0); R( 1); R( 2); R( 3);
  40030a:	ab70      	add	r3, sp, #448	; 0x1c0
  40030c:	e9d3 2300 	ldrd	r2, r3, [r3]
  400310:	a972      	add	r1, sp, #456	; 0x1c8
  400312:	e9d1 0100 	ldrd	r0, r1, [r1]
  400316:	4042      	eors	r2, r0
  400318:	404b      	eors	r3, r1
  40031a:	4610      	mov	r0, r2
  40031c:	4619      	mov	r1, r3

0040031e <.LBB357>:
  40031e:	9b03      	ldr	r3, [sp, #12]
  400320:	05db      	lsls	r3, r3, #23
  400322:	9a02      	ldr	r2, [sp, #8]
  400324:	ea43 2352 	orr.w	r3, r3, r2, lsr #9
  400328:	9375      	str	r3, [sp, #468]	; 0x1d4
  40032a:	05d3      	lsls	r3, r2, #23
  40032c:	9a03      	ldr	r2, [sp, #12]
  40032e:	ea43 2352 	orr.w	r3, r3, r2, lsr #9
  400332:	9374      	str	r3, [sp, #464]	; 0x1d0

00400334 <.LBE357>:
  400334:	ab74      	add	r3, sp, #464	; 0x1d0
  400336:	e9d3 2300 	ldrd	r2, r3, [r3]
  40033a:	4042      	eors	r2, r0
  40033c:	404b      	eors	r3, r1
  40033e:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  400342:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  400346:	ea82 0208 	eor.w	r2, r2, r8
  40034a:	ea83 0309 	eor.w	r3, r3, r9
  40034e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  400352:	4010      	ands	r0, r2
  400354:	4019      	ands	r1, r3
  400356:	4602      	mov	r2, r0
  400358:	460b      	mov	r3, r1
  40035a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40035e:	4050      	eors	r0, r2
  400360:	4059      	eors	r1, r3
  400362:	4602      	mov	r2, r0
  400364:	460b      	mov	r3, r1
  400366:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  40036a:	1880      	adds	r0, r0, r2
  40036c:	4159      	adcs	r1, r3
  40036e:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  400372:	4676      	mov	r6, lr
  400374:	e9de 2300 	ldrd	r2, r3, [lr]
  400378:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
  40037c:	2f00      	cmp	r7, #0
  40037e:	f002 8255 	beq.w	40282c <.LCFI3>

00400382 <.LBB359>:
  400382:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  400386:	0cc3      	lsrs	r3, r0, #19
  400388:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
  40038c:	9376      	str	r3, [sp, #472]	; 0x1d8
  40038e:	0ccb      	lsrs	r3, r1, #19
  400390:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
  400394:	9377      	str	r3, [sp, #476]	; 0x1dc

00400396 <.LBB361>:
  400396:	00cb      	lsls	r3, r1, #3
  400398:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
  40039c:	9379      	str	r3, [sp, #484]	; 0x1e4
  40039e:	00c3      	lsls	r3, r0, #3
  4003a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
  4003a4:	9378      	str	r3, [sp, #480]	; 0x1e0

004003a6 <.LBE361>:
  4003a6:	ab76      	add	r3, sp, #472	; 0x1d8
  4003a8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4003ac:	a978      	add	r1, sp, #480	; 0x1e0
  4003ae:	e9d1 0100 	ldrd	r0, r1, [r1]
  4003b2:	4042      	eors	r2, r0
  4003b4:	404b      	eors	r3, r1
  4003b6:	990c      	ldr	r1, [sp, #48]	; 0x30
  4003b8:	0989      	lsrs	r1, r1, #6
  4003ba:	980d      	ldr	r0, [sp, #52]	; 0x34
  4003bc:	ea41 6180 	orr.w	r1, r1, r0, lsl #26
  4003c0:	9130      	str	r1, [sp, #192]	; 0xc0
  4003c2:	0981      	lsrs	r1, r0, #6
  4003c4:	9131      	str	r1, [sp, #196]	; 0xc4
  4003c6:	e9dd 0130 	ldrd	r0, r1, [sp, #192]	; 0xc0
  4003ca:	4050      	eors	r0, r2
  4003cc:	4059      	eors	r1, r3
  4003ce:	e9cd 012e 	strd	r0, r1, [sp, #184]	; 0xb8

004003d2 <.LBB363>:
  4003d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  4003d6:	0851      	lsrs	r1, r2, #1
  4003d8:	ea41 71c3 	orr.w	r1, r1, r3, lsl #31
  4003dc:	917a      	str	r1, [sp, #488]	; 0x1e8
  4003de:	0859      	lsrs	r1, r3, #1
  4003e0:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
  4003e4:	917b      	str	r1, [sp, #492]	; 0x1ec

004003e6 <.LBB365>:
  4003e6:	0a11      	lsrs	r1, r2, #8
  4003e8:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
  4003ec:	917c      	str	r1, [sp, #496]	; 0x1f0
  4003ee:	0a19      	lsrs	r1, r3, #8
  4003f0:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
  4003f4:	917d      	str	r1, [sp, #500]	; 0x1f4

004003f6 <.LBE365>:
  4003f6:	ab7a      	add	r3, sp, #488	; 0x1e8
  4003f8:	e9d3 0100 	ldrd	r0, r1, [r3]
  4003fc:	ab7c      	add	r3, sp, #496	; 0x1f0
  4003fe:	e9d3 2300 	ldrd	r2, r3, [r3]
  400402:	4050      	eors	r0, r2
  400404:	4059      	eors	r1, r3
  400406:	9b08      	ldr	r3, [sp, #32]
  400408:	09db      	lsrs	r3, r3, #7
  40040a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40040c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
  400410:	9332      	str	r3, [sp, #200]	; 0xc8
  400412:	09d3      	lsrs	r3, r2, #7
  400414:	9333      	str	r3, [sp, #204]	; 0xcc
  400416:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
  40041a:	4042      	eors	r2, r0
  40041c:	404b      	eors	r3, r1
  40041e:	4610      	mov	r0, r2
  400420:	4619      	mov	r1, r3
  400422:	e9dd 232e 	ldrd	r2, r3, [sp, #184]	; 0xb8
  400426:	1812      	adds	r2, r2, r0
  400428:	414b      	adcs	r3, r1
  40042a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40042e:	1880      	adds	r0, r0, r2
  400430:	4159      	adcs	r1, r3
  400432:	4602      	mov	r2, r0
  400434:	460b      	mov	r3, r1
  400436:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
  40043a:	1880      	adds	r0, r0, r2
  40043c:	4159      	adcs	r1, r3
  40043e:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
  400442:	e001      	b.n	400448 <.LBE365+0x52>
  400444:	00407480 	.word	0x00407480
  400448:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  40044c:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
  400450:	1812      	adds	r2, r2, r0
  400452:	414b      	adcs	r3, r1
  400454:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
  400458:	1880      	adds	r0, r0, r2
  40045a:	4159      	adcs	r1, r3
  40045c:	4602      	mov	r2, r0
  40045e:	460b      	mov	r3, r1
  400460:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  400464:	1880      	adds	r0, r0, r2
  400466:	4159      	adcs	r1, r3
  400468:	4602      	mov	r2, r0
  40046a:	460b      	mov	r3, r1
  40046c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  400470:	eb10 020a 	adds.w	r2, r0, sl
  400474:	eb41 030b 	adc.w	r3, r1, fp
  400478:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0

0040047c <.LBB367>:
  40047c:	0f23      	lsrs	r3, r4, #28
  40047e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  400482:	937e      	str	r3, [sp, #504]	; 0x1f8
  400484:	0f2b      	lsrs	r3, r5, #28
  400486:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  40048a:	937f      	str	r3, [sp, #508]	; 0x1fc

0040048c <.LBB369>:
  40048c:	07ab      	lsls	r3, r5, #30
  40048e:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  400492:	9381      	str	r3, [sp, #516]	; 0x204
  400494:	07a3      	lsls	r3, r4, #30
  400496:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  40049a:	9380      	str	r3, [sp, #512]	; 0x200

0040049c <.LBE369>:
  40049c:	ab7e      	add	r3, sp, #504	; 0x1f8
  40049e:	e9d3 1200 	ldrd	r1, r2, [r3]
  4004a2:	ab80      	add	r3, sp, #512	; 0x200
  4004a4:	e9d3 ab00 	ldrd	sl, fp, [r3]
  4004a8:	ea81 010a 	eor.w	r1, r1, sl
  4004ac:	ea82 020b 	eor.w	r2, r2, fp
  4004b0:	4613      	mov	r3, r2
  4004b2:	460a      	mov	r2, r1

004004b4 <.LBB371>:
  4004b4:	0669      	lsls	r1, r5, #25
  4004b6:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  4004ba:	9183      	str	r1, [sp, #524]	; 0x20c
  4004bc:	0661      	lsls	r1, r4, #25
  4004be:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  4004c2:	9182      	str	r1, [sp, #520]	; 0x208

004004c4 <.LBE371>:
  4004c4:	a982      	add	r1, sp, #520	; 0x208
  4004c6:	e9d1 0100 	ldrd	r0, r1, [r1]
  4004ca:	4050      	eors	r0, r2
  4004cc:	4059      	eors	r1, r3
  4004ce:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  4004d2:	e9dd ab18 	ldrd	sl, fp, [sp, #96]	; 0x60
  4004d6:	4650      	mov	r0, sl
  4004d8:	4659      	mov	r1, fp
  4004da:	4320      	orrs	r0, r4
  4004dc:	4329      	orrs	r1, r5
  4004de:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  4004e2:	4002      	ands	r2, r0
  4004e4:	400b      	ands	r3, r1
  4004e6:	4650      	mov	r0, sl
  4004e8:	4659      	mov	r1, fp
  4004ea:	4020      	ands	r0, r4
  4004ec:	4029      	ands	r1, r5
  4004ee:	4310      	orrs	r0, r2
  4004f0:	4319      	orrs	r1, r3
  4004f2:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  4004f6:	1812      	adds	r2, r2, r0
  4004f8:	414b      	adcs	r3, r1
  4004fa:	4610      	mov	r0, r2
  4004fc:	4619      	mov	r1, r3
  4004fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  400502:	1812      	adds	r2, r2, r0
  400504:	414b      	adcs	r3, r1
  400506:	e9cd 2306 	strd	r2, r3, [sp, #24]

0040050a <.LBB373>:
  40050a:	e9dd ab2c 	ldrd	sl, fp, [sp, #176]	; 0xb0
  40050e:	4653      	mov	r3, sl
  400510:	0b9b      	lsrs	r3, r3, #14
  400512:	465a      	mov	r2, fp
  400514:	ea43 438b 	orr.w	r3, r3, fp, lsl #18
  400518:	9384      	str	r3, [sp, #528]	; 0x210
  40051a:	0b93      	lsrs	r3, r2, #14
  40051c:	4652      	mov	r2, sl
  40051e:	ea43 438a 	orr.w	r3, r3, sl, lsl #18
  400522:	9385      	str	r3, [sp, #532]	; 0x214

00400524 <.LBB375>:
  400524:	0c93      	lsrs	r3, r2, #18
  400526:	465a      	mov	r2, fp
  400528:	ea43 338b 	orr.w	r3, r3, fp, lsl #14
  40052c:	9386      	str	r3, [sp, #536]	; 0x218
  40052e:	0c93      	lsrs	r3, r2, #18
  400530:	ea43 338a 	orr.w	r3, r3, sl, lsl #14
  400534:	9387      	str	r3, [sp, #540]	; 0x21c

00400536 <.LBE375>:
  400536:	ab84      	add	r3, sp, #528	; 0x210
  400538:	e9d3 2300 	ldrd	r2, r3, [r3]
  40053c:	a986      	add	r1, sp, #536	; 0x218
  40053e:	e9d1 0100 	ldrd	r0, r1, [r1]
  400542:	4042      	eors	r2, r0
  400544:	404b      	eors	r3, r1

00400546 <.LBB377>:
  400546:	4659      	mov	r1, fp
  400548:	05c9      	lsls	r1, r1, #23
  40054a:	4650      	mov	r0, sl
  40054c:	ea41 215a 	orr.w	r1, r1, sl, lsr #9
  400550:	9189      	str	r1, [sp, #548]	; 0x224
  400552:	05c1      	lsls	r1, r0, #23
  400554:	ea41 215b 	orr.w	r1, r1, fp, lsr #9
  400558:	9188      	str	r1, [sp, #544]	; 0x220

0040055a <.LBE377>:
  40055a:	a988      	add	r1, sp, #544	; 0x220
  40055c:	e9d1 0100 	ldrd	r0, r1, [r1]
  400560:	4050      	eors	r0, r2
  400562:	4059      	eors	r1, r3
  400564:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  400568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40056c:	ea80 0008 	eor.w	r0, r0, r8
  400570:	ea81 0109 	eor.w	r1, r1, r9
  400574:	4652      	mov	r2, sl
  400576:	465b      	mov	r3, fp
  400578:	4002      	ands	r2, r0
  40057a:	400b      	ands	r3, r1
  40057c:	ea82 0a08 	eor.w	sl, r2, r8
  400580:	ea83 0b09 	eor.w	fp, r3, r9
  400584:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
  400588:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40058c:	1880      	adds	r0, r0, r2
  40058e:	4159      	adcs	r1, r3
  400590:	eb1a 0000 	adds.w	r0, sl, r0
  400594:	eb4b 0101 	adc.w	r1, fp, r1
  400598:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40059c:	2f00      	cmp	r7, #0
  40059e:	f002 814b 	beq.w	402838 <.LCFI3+0xc>

004005a2 <.LBB379>:
  4005a2:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
  4005a6:	0cc3      	lsrs	r3, r0, #19
  4005a8:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
  4005ac:	938a      	str	r3, [sp, #552]	; 0x228
  4005ae:	0ccb      	lsrs	r3, r1, #19
  4005b0:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
  4005b4:	938b      	str	r3, [sp, #556]	; 0x22c

004005b6 <.LBB381>:
  4005b6:	00cb      	lsls	r3, r1, #3
  4005b8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
  4005bc:	938d      	str	r3, [sp, #564]	; 0x234
  4005be:	00c3      	lsls	r3, r0, #3
  4005c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
  4005c4:	938c      	str	r3, [sp, #560]	; 0x230

004005c6 <.LBE381>:
  4005c6:	ab8a      	add	r3, sp, #552	; 0x228
  4005c8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4005cc:	f50d 7a0c 	add.w	sl, sp, #560	; 0x230
  4005d0:	e9da ab00 	ldrd	sl, fp, [sl]
  4005d4:	ea82 020a 	eor.w	r2, r2, sl
  4005d8:	ea83 030b 	eor.w	r3, r3, fp
  4005dc:	468b      	mov	fp, r1
  4005de:	0981      	lsrs	r1, r0, #6
  4005e0:	4658      	mov	r0, fp
  4005e2:	ea41 618b 	orr.w	r1, r1, fp, lsl #26
  4005e6:	9134      	str	r1, [sp, #208]	; 0xd0
  4005e8:	0981      	lsrs	r1, r0, #6
  4005ea:	9135      	str	r1, [sp, #212]	; 0xd4
  4005ec:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
  4005f0:	4050      	eors	r0, r2
  4005f2:	4059      	eors	r1, r3
  4005f4:	4602      	mov	r2, r0
  4005f6:	460b      	mov	r3, r1
  4005f8:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
  4005fc:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
  400600:	eb10 000a 	adds.w	r0, r0, sl
  400604:	eb41 010b 	adc.w	r1, r1, fp
  400608:	eb12 0a00 	adds.w	sl, r2, r0
  40060c:	eb43 0b01 	adc.w	fp, r3, r1
  400610:	e9cd ab08 	strd	sl, fp, [sp, #32]

00400614 <.LBB383>:
  400614:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
  400618:	0851      	lsrs	r1, r2, #1
  40061a:	ea41 71c3 	orr.w	r1, r1, r3, lsl #31
  40061e:	918e      	str	r1, [sp, #568]	; 0x238
  400620:	0859      	lsrs	r1, r3, #1
  400622:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
  400626:	918f      	str	r1, [sp, #572]	; 0x23c

00400628 <.LBB385>:
  400628:	0a11      	lsrs	r1, r2, #8
  40062a:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
  40062e:	9190      	str	r1, [sp, #576]	; 0x240
  400630:	0a19      	lsrs	r1, r3, #8
  400632:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
  400636:	9191      	str	r1, [sp, #580]	; 0x244

00400638 <.LBE385>:
  400638:	a98e      	add	r1, sp, #568	; 0x238
  40063a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40063e:	f50d 7a10 	add.w	sl, sp, #576	; 0x240
  400642:	e9da ab00 	ldrd	sl, fp, [sl]
  400646:	ea80 000a 	eor.w	r0, r0, sl
  40064a:	ea81 010b 	eor.w	r1, r1, fp
  40064e:	469b      	mov	fp, r3
  400650:	09d3      	lsrs	r3, r2, #7
  400652:	465a      	mov	r2, fp
  400654:	ea43 634b 	orr.w	r3, r3, fp, lsl #25
  400658:	9336      	str	r3, [sp, #216]	; 0xd8
  40065a:	09d3      	lsrs	r3, r2, #7
  40065c:	9337      	str	r3, [sp, #220]	; 0xdc
  40065e:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
  400662:	4042      	eors	r2, r0
  400664:	404b      	eors	r3, r1
  400666:	4610      	mov	r0, r2
  400668:	4619      	mov	r1, r3
  40066a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  40066e:	1812      	adds	r2, r2, r0
  400670:	414b      	adcs	r3, r1
  400672:	e9cd 2308 	strd	r2, r3, [sp, #32]
  400676:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  40067a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40067e:	1812      	adds	r2, r2, r0
  400680:	414b      	adcs	r3, r1
  400682:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  400686:	1880      	adds	r0, r0, r2
  400688:	4159      	adcs	r1, r3
  40068a:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  40068e:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  400692:	1812      	adds	r2, r2, r0
  400694:	414b      	adcs	r3, r1
  400696:	e9cd 2304 	strd	r2, r3, [sp, #16]

0040069a <.LBB387>:
  40069a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40069e:	0f03      	lsrs	r3, r0, #28
  4006a0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  4006a4:	9392      	str	r3, [sp, #584]	; 0x248
  4006a6:	0f0b      	lsrs	r3, r1, #28
  4006a8:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  4006ac:	9393      	str	r3, [sp, #588]	; 0x24c

004006ae <.LBB389>:
  4006ae:	078b      	lsls	r3, r1, #30
  4006b0:	ea43 0390 	orr.w	r3, r3, r0, lsr #2
  4006b4:	9395      	str	r3, [sp, #596]	; 0x254
  4006b6:	0783      	lsls	r3, r0, #30
  4006b8:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  4006bc:	9394      	str	r3, [sp, #592]	; 0x250

004006be <.LBE389>:
  4006be:	ab92      	add	r3, sp, #584	; 0x248
  4006c0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4006c4:	f50d 7a14 	add.w	sl, sp, #592	; 0x250
  4006c8:	e9da ab00 	ldrd	sl, fp, [sl]
  4006cc:	ea82 020a 	eor.w	r2, r2, sl
  4006d0:	ea83 030b 	eor.w	r3, r3, fp

004006d4 <.LBB391>:
  4006d4:	4682      	mov	sl, r0
  4006d6:	0649      	lsls	r1, r1, #25
  4006d8:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
  4006dc:	9197      	str	r1, [sp, #604]	; 0x25c
  4006de:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
  4006e2:	4651      	mov	r1, sl
  4006e4:	0649      	lsls	r1, r1, #25
  4006e6:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
  4006ea:	9196      	str	r1, [sp, #600]	; 0x258

004006ec <.LBE391>:
  4006ec:	a996      	add	r1, sp, #600	; 0x258
  4006ee:	e9d1 0100 	ldrd	r0, r1, [r1]
  4006f2:	4050      	eors	r0, r2
  4006f4:	4059      	eors	r1, r3
  4006f6:	e9cd 012a 	strd	r0, r1, [sp, #168]	; 0xa8
  4006fa:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
  4006fe:	4650      	mov	r0, sl
  400700:	4659      	mov	r1, fp
  400702:	4320      	orrs	r0, r4
  400704:	4329      	orrs	r1, r5
  400706:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  40070a:	4002      	ands	r2, r0
  40070c:	400b      	ands	r3, r1
  40070e:	4610      	mov	r0, r2
  400710:	4619      	mov	r1, r3
  400712:	4652      	mov	r2, sl
  400714:	465b      	mov	r3, fp
  400716:	4022      	ands	r2, r4
  400718:	402b      	ands	r3, r5
  40071a:	4302      	orrs	r2, r0
  40071c:	430b      	orrs	r3, r1
  40071e:	4610      	mov	r0, r2
  400720:	4619      	mov	r1, r3
  400722:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  400726:	1812      	adds	r2, r2, r0
  400728:	414b      	adcs	r3, r1
  40072a:	4610      	mov	r0, r2
  40072c:	4619      	mov	r1, r3
  40072e:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  400732:	1812      	adds	r2, r2, r0
  400734:	414b      	adcs	r3, r1
  400736:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8

0040073a <.LBB393>:
  40073a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40073e:	0b83      	lsrs	r3, r0, #14
  400740:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  400744:	9398      	str	r3, [sp, #608]	; 0x260
  400746:	0b8b      	lsrs	r3, r1, #14
  400748:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
  40074c:	9399      	str	r3, [sp, #612]	; 0x264

0040074e <.LBB395>:
  40074e:	0c83      	lsrs	r3, r0, #18
  400750:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
  400754:	939a      	str	r3, [sp, #616]	; 0x268
  400756:	0c8b      	lsrs	r3, r1, #18
  400758:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
  40075c:	939b      	str	r3, [sp, #620]	; 0x26c

0040075e <.LBE395>:
  40075e:	ab98      	add	r3, sp, #608	; 0x260
  400760:	e9d3 2300 	ldrd	r2, r3, [r3]
  400764:	f50d 7a1a 	add.w	sl, sp, #616	; 0x268
  400768:	e9da ab00 	ldrd	sl, fp, [sl]
  40076c:	ea82 020a 	eor.w	r2, r2, sl
  400770:	ea83 030b 	eor.w	r3, r3, fp

00400774 <.LBB397>:
  400774:	4682      	mov	sl, r0
  400776:	468b      	mov	fp, r1
  400778:	05c9      	lsls	r1, r1, #23
  40077a:	4650      	mov	r0, sl
  40077c:	ea41 215a 	orr.w	r1, r1, sl, lsr #9
  400780:	919d      	str	r1, [sp, #628]	; 0x274
  400782:	05c1      	lsls	r1, r0, #23
  400784:	ea41 215b 	orr.w	r1, r1, fp, lsr #9
  400788:	919c      	str	r1, [sp, #624]	; 0x270

0040078a <.LBE397>:
  40078a:	a99c      	add	r1, sp, #624	; 0x270
  40078c:	e9d1 0100 	ldrd	r0, r1, [r1]
  400790:	4050      	eors	r0, r2
  400792:	4059      	eors	r1, r3
  400794:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  400798:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  40079c:	4650      	mov	r0, sl
  40079e:	4659      	mov	r1, fp
  4007a0:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
  4007a4:	4042      	eors	r2, r0
  4007a6:	404b      	eors	r3, r1
  4007a8:	4610      	mov	r0, r2
  4007aa:	4619      	mov	r1, r3
  4007ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4007b0:	4002      	ands	r2, r0
  4007b2:	400b      	ands	r3, r1
  4007b4:	4610      	mov	r0, r2
  4007b6:	4619      	mov	r1, r3
  4007b8:	4652      	mov	r2, sl
  4007ba:	465b      	mov	r3, fp
  4007bc:	4042      	eors	r2, r0
  4007be:	404b      	eors	r3, r1
  4007c0:	4610      	mov	r0, r2
  4007c2:	4619      	mov	r1, r3
  4007c4:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
  4007c8:	eb18 0802 	adds.w	r8, r8, r2
  4007cc:	eb49 0903 	adc.w	r9, r9, r3
  4007d0:	eb18 0800 	adds.w	r8, r8, r0
  4007d4:	eb49 0901 	adc.w	r9, r9, r1
  4007d8:	2f00      	cmp	r7, #0
  4007da:	f002 8033 	beq.w	402844 <.LCFI3+0x18>

004007de <.LBB399>:
  4007de:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  4007e2:	0843      	lsrs	r3, r0, #1
  4007e4:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
  4007e8:	939e      	str	r3, [sp, #632]	; 0x278
  4007ea:	084b      	lsrs	r3, r1, #1
  4007ec:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
  4007f0:	939f      	str	r3, [sp, #636]	; 0x27c

004007f2 <.LBB401>:
  4007f2:	0a03      	lsrs	r3, r0, #8
  4007f4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  4007f8:	93a0      	str	r3, [sp, #640]	; 0x280
  4007fa:	0a0b      	lsrs	r3, r1, #8
  4007fc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  400800:	93a1      	str	r3, [sp, #644]	; 0x284

00400802 <.LBE401>:
  400802:	ab9e      	add	r3, sp, #632	; 0x278
  400804:	e9d3 2300 	ldrd	r2, r3, [r3]
  400808:	f50d 7a20 	add.w	sl, sp, #640	; 0x280
  40080c:	e9da ab00 	ldrd	sl, fp, [sl]
  400810:	ea82 020a 	eor.w	r2, r2, sl
  400814:	ea83 030b 	eor.w	r3, r3, fp
  400818:	468b      	mov	fp, r1
  40081a:	09c1      	lsrs	r1, r0, #7
  40081c:	4658      	mov	r0, fp
  40081e:	ea41 614b 	orr.w	r1, r1, fp, lsl #25
  400822:	9138      	str	r1, [sp, #224]	; 0xe0
  400824:	09c1      	lsrs	r1, r0, #7
  400826:	9139      	str	r1, [sp, #228]	; 0xe4
  400828:	e9dd 0138 	ldrd	r0, r1, [sp, #224]	; 0xe0
  40082c:	4050      	eors	r0, r2
  40082e:	4059      	eors	r1, r3
  400830:	4602      	mov	r2, r0
  400832:	460b      	mov	r3, r1
  400834:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
  400838:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
  40083c:	eb10 000a 	adds.w	r0, r0, sl
  400840:	eb41 010b 	adc.w	r1, r1, fp
  400844:	eb12 0a00 	adds.w	sl, r2, r0
  400848:	eb43 0b01 	adc.w	fp, r3, r1
  40084c:	e9cd ab1e 	strd	sl, fp, [sp, #120]	; 0x78

00400850 <.LBB403>:
  400850:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
  400854:	0cd1      	lsrs	r1, r2, #19
  400856:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
  40085a:	91a2      	str	r1, [sp, #648]	; 0x288
  40085c:	0cd9      	lsrs	r1, r3, #19
  40085e:	ea41 3142 	orr.w	r1, r1, r2, lsl #13
  400862:	91a3      	str	r1, [sp, #652]	; 0x28c

00400864 <.LBB405>:
  400864:	00d9      	lsls	r1, r3, #3
  400866:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
  40086a:	91a5      	str	r1, [sp, #660]	; 0x294
  40086c:	00d1      	lsls	r1, r2, #3
  40086e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
  400872:	91a4      	str	r1, [sp, #656]	; 0x290

00400874 <.LBE405>:
  400874:	a9a2      	add	r1, sp, #648	; 0x288
  400876:	e9d1 0100 	ldrd	r0, r1, [r1]
  40087a:	f50d 7a24 	add.w	sl, sp, #656	; 0x290
  40087e:	e9da ab00 	ldrd	sl, fp, [sl]
  400882:	ea80 000a 	eor.w	r0, r0, sl
  400886:	ea81 010b 	eor.w	r1, r1, fp
  40088a:	469b      	mov	fp, r3
  40088c:	0993      	lsrs	r3, r2, #6
  40088e:	465a      	mov	r2, fp
  400890:	ea43 638b 	orr.w	r3, r3, fp, lsl #26
  400894:	933a      	str	r3, [sp, #232]	; 0xe8
  400896:	0993      	lsrs	r3, r2, #6
  400898:	933b      	str	r3, [sp, #236]	; 0xec
  40089a:	e9dd 233a 	ldrd	r2, r3, [sp, #232]	; 0xe8
  40089e:	4042      	eors	r2, r0
  4008a0:	404b      	eors	r3, r1
  4008a2:	4610      	mov	r0, r2
  4008a4:	4619      	mov	r1, r3
  4008a6:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
  4008aa:	1812      	adds	r2, r2, r0
  4008ac:	414b      	adcs	r3, r1
  4008ae:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  4008b2:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  4008b6:	eb12 0208 	adds.w	r2, r2, r8
  4008ba:	eb43 0309 	adc.w	r3, r3, r9
  4008be:	4690      	mov	r8, r2
  4008c0:	4699      	mov	r9, r3
  4008c2:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
  4008c6:	eb12 0208 	adds.w	r2, r2, r8
  4008ca:	eb43 0309 	adc.w	r3, r3, r9
  4008ce:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
  4008d2:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  4008d6:	eb18 0802 	adds.w	r8, r8, r2
  4008da:	eb49 0903 	adc.w	r9, r9, r3
  4008de:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60

004008e2 <.LBB407>:
  4008e2:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
  4008e6:	0f03      	lsrs	r3, r0, #28
  4008e8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  4008ec:	93a6      	str	r3, [sp, #664]	; 0x298
  4008ee:	0f0b      	lsrs	r3, r1, #28
  4008f0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  4008f4:	93a7      	str	r3, [sp, #668]	; 0x29c

004008f6 <.LBB409>:
  4008f6:	078b      	lsls	r3, r1, #30
  4008f8:	ea43 0390 	orr.w	r3, r3, r0, lsr #2
  4008fc:	93a9      	str	r3, [sp, #676]	; 0x2a4
  4008fe:	0783      	lsls	r3, r0, #30
  400900:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  400904:	93a8      	str	r3, [sp, #672]	; 0x2a0

00400906 <.LBE409>:
  400906:	aba6      	add	r3, sp, #664	; 0x298
  400908:	e9d3 2300 	ldrd	r2, r3, [r3]
  40090c:	f50d 7828 	add.w	r8, sp, #672	; 0x2a0
  400910:	e9d8 ab00 	ldrd	sl, fp, [r8]
  400914:	ea82 020a 	eor.w	r2, r2, sl
  400918:	ea83 030b 	eor.w	r3, r3, fp

0040091c <.LBB411>:
  40091c:	4680      	mov	r8, r0
  40091e:	4689      	mov	r9, r1
  400920:	0649      	lsls	r1, r1, #25
  400922:	4640      	mov	r0, r8
  400924:	ea41 11d8 	orr.w	r1, r1, r8, lsr #7
  400928:	91ab      	str	r1, [sp, #684]	; 0x2ac
  40092a:	0641      	lsls	r1, r0, #25
  40092c:	ea41 11d9 	orr.w	r1, r1, r9, lsr #7
  400930:	91aa      	str	r1, [sp, #680]	; 0x2a8

00400932 <.LBE411>:
  400932:	a9aa      	add	r1, sp, #680	; 0x2a8
  400934:	e9d1 0100 	ldrd	r0, r1, [r1]
  400938:	4050      	eors	r0, r2
  40093a:	4059      	eors	r1, r3
  40093c:	e9cd 012e 	strd	r0, r1, [sp, #184]	; 0xb8
  400940:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
  400944:	4652      	mov	r2, sl
  400946:	465b      	mov	r3, fp
  400948:	4640      	mov	r0, r8
  40094a:	4649      	mov	r1, r9
  40094c:	4302      	orrs	r2, r0
  40094e:	430b      	orrs	r3, r1
  400950:	4022      	ands	r2, r4
  400952:	402b      	ands	r3, r5
  400954:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
  400958:	e9c1 2300 	strd	r2, r3, [r1]
  40095c:	4650      	mov	r0, sl
  40095e:	4659      	mov	r1, fp
  400960:	4642      	mov	r2, r8
  400962:	464b      	mov	r3, r9
  400964:	4010      	ands	r0, r2
  400966:	4019      	ands	r1, r3
  400968:	f50d 63d8 	add.w	r3, sp, #1728	; 0x6c0
  40096c:	e9d3 9a00 	ldrd	r9, sl, [r3]
  400970:	ea49 0900 	orr.w	r9, r9, r0
  400974:	ea4a 0a01 	orr.w	sl, sl, r1
  400978:	e9dd 232e 	ldrd	r2, r3, [sp, #184]	; 0xb8
  40097c:	eb12 0209 	adds.w	r2, r2, r9
  400980:	eb43 030a 	adc.w	r3, r3, sl
  400984:	4610      	mov	r0, r2
  400986:	4619      	mov	r1, r3
  400988:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  40098c:	1812      	adds	r2, r2, r0
  40098e:	414b      	adcs	r3, r1
  400990:	e9cd 232e 	strd	r2, r3, [sp, #184]	; 0xb8

00400994 <.LBB413>:
  400994:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
  400998:	4643      	mov	r3, r8
  40099a:	0b9b      	lsrs	r3, r3, #14
  40099c:	464a      	mov	r2, r9
  40099e:	ea43 4389 	orr.w	r3, r3, r9, lsl #18
  4009a2:	93ac      	str	r3, [sp, #688]	; 0x2b0
  4009a4:	0b93      	lsrs	r3, r2, #14
  4009a6:	4642      	mov	r2, r8
  4009a8:	ea43 4388 	orr.w	r3, r3, r8, lsl #18
  4009ac:	93ad      	str	r3, [sp, #692]	; 0x2b4

004009ae <.LBB415>:
  4009ae:	0c93      	lsrs	r3, r2, #18
  4009b0:	464a      	mov	r2, r9
  4009b2:	ea43 3389 	orr.w	r3, r3, r9, lsl #14
  4009b6:	93ae      	str	r3, [sp, #696]	; 0x2b8
  4009b8:	0c93      	lsrs	r3, r2, #18
  4009ba:	ea43 3388 	orr.w	r3, r3, r8, lsl #14
  4009be:	93af      	str	r3, [sp, #700]	; 0x2bc

004009c0 <.LBE415>:
  4009c0:	abac      	add	r3, sp, #688	; 0x2b0
  4009c2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4009c6:	a9ae      	add	r1, sp, #696	; 0x2b8
  4009c8:	e9d1 0100 	ldrd	r0, r1, [r1]
  4009cc:	4042      	eors	r2, r0
  4009ce:	404b      	eors	r3, r1

004009d0 <.LBB417>:
  4009d0:	4649      	mov	r1, r9
  4009d2:	05c9      	lsls	r1, r1, #23
  4009d4:	4640      	mov	r0, r8
  4009d6:	ea41 2158 	orr.w	r1, r1, r8, lsr #9
  4009da:	91b1      	str	r1, [sp, #708]	; 0x2c4
  4009dc:	05c1      	lsls	r1, r0, #23
  4009de:	ea41 2159 	orr.w	r1, r1, r9, lsr #9
  4009e2:	91b0      	str	r1, [sp, #704]	; 0x2c0

004009e4 <.LBE417>:
  4009e4:	a9b0      	add	r1, sp, #704	; 0x2c0
  4009e6:	e9d1 0100 	ldrd	r0, r1, [r1]
  4009ea:	4050      	eors	r0, r2
  4009ec:	4059      	eors	r1, r3
  4009ee:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  4009f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4009f6:	e9dd ab2c 	ldrd	sl, fp, [sp, #176]	; 0xb0
  4009fa:	4652      	mov	r2, sl
  4009fc:	465b      	mov	r3, fp
  4009fe:	4042      	eors	r2, r0
  400a00:	404b      	eors	r3, r1
  400a02:	4610      	mov	r0, r2
  400a04:	4619      	mov	r1, r3
  400a06:	4642      	mov	r2, r8
  400a08:	464b      	mov	r3, r9
  400a0a:	4002      	ands	r2, r0
  400a0c:	400b      	ands	r3, r1
  400a0e:	ea8a 0802 	eor.w	r8, sl, r2
  400a12:	ea8b 0903 	eor.w	r9, fp, r3
  400a16:	e9d6 2306 	ldrd	r2, r3, [r6, #24]
  400a1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  400a1e:	1880      	adds	r0, r0, r2
  400a20:	4159      	adcs	r1, r3
  400a22:	eb18 0000 	adds.w	r0, r8, r0
  400a26:	eb49 0101 	adc.w	r1, r9, r1
  400a2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400a2e:	2f00      	cmp	r7, #0
  400a30:	f001 870e 	beq.w	402850 <.LCFI3+0x24>

00400a34 <.LBB419>:
  400a34:	e9dd 8922 	ldrd	r8, r9, [sp, #136]	; 0x88
  400a38:	4643      	mov	r3, r8
  400a3a:	085b      	lsrs	r3, r3, #1
  400a3c:	464a      	mov	r2, r9
  400a3e:	ea43 73c9 	orr.w	r3, r3, r9, lsl #31
  400a42:	93b2      	str	r3, [sp, #712]	; 0x2c8
  400a44:	0853      	lsrs	r3, r2, #1
  400a46:	4642      	mov	r2, r8
  400a48:	ea43 73c8 	orr.w	r3, r3, r8, lsl #31
  400a4c:	93b3      	str	r3, [sp, #716]	; 0x2cc

00400a4e <.LBB421>:
  400a4e:	0a13      	lsrs	r3, r2, #8
  400a50:	464a      	mov	r2, r9
  400a52:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
  400a56:	93b4      	str	r3, [sp, #720]	; 0x2d0
  400a58:	0a13      	lsrs	r3, r2, #8
  400a5a:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
  400a5e:	93b5      	str	r3, [sp, #724]	; 0x2d4

00400a60 <.LBE421>:
  400a60:	abb2      	add	r3, sp, #712	; 0x2c8
  400a62:	e9d3 2300 	ldrd	r2, r3, [r3]
  400a66:	a9b4      	add	r1, sp, #720	; 0x2d0
  400a68:	e9d1 ab00 	ldrd	sl, fp, [r1]
  400a6c:	ea82 020a 	eor.w	r2, r2, sl
  400a70:	ea83 030b 	eor.w	r3, r3, fp
  400a74:	4641      	mov	r1, r8
  400a76:	09c9      	lsrs	r1, r1, #7
  400a78:	4648      	mov	r0, r9
  400a7a:	ea41 6149 	orr.w	r1, r1, r9, lsl #25
  400a7e:	913c      	str	r1, [sp, #240]	; 0xf0
  400a80:	09c1      	lsrs	r1, r0, #7
  400a82:	913d      	str	r1, [sp, #244]	; 0xf4
  400a84:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
  400a88:	4050      	eors	r0, r2
  400a8a:	4059      	eors	r1, r3
  400a8c:	4602      	mov	r2, r0
  400a8e:	460b      	mov	r3, r1
  400a90:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  400a94:	e9dd ab16 	ldrd	sl, fp, [sp, #88]	; 0x58
  400a98:	eb10 000a 	adds.w	r0, r0, sl
  400a9c:	eb41 010b 	adc.w	r1, r1, fp
  400aa0:	eb12 0800 	adds.w	r8, r2, r0
  400aa4:	eb43 0901 	adc.w	r9, r3, r1
  400aa8:	e9cd 8920 	strd	r8, r9, [sp, #128]	; 0x80

00400aac <.LBB423>:
  400aac:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  400ab0:	4641      	mov	r1, r8
  400ab2:	0cc9      	lsrs	r1, r1, #19
  400ab4:	4648      	mov	r0, r9
  400ab6:	ea41 3149 	orr.w	r1, r1, r9, lsl #13
  400aba:	91b6      	str	r1, [sp, #728]	; 0x2d8
  400abc:	0cc1      	lsrs	r1, r0, #19
  400abe:	4640      	mov	r0, r8
  400ac0:	ea41 3148 	orr.w	r1, r1, r8, lsl #13
  400ac4:	91b7      	str	r1, [sp, #732]	; 0x2dc

00400ac6 <.LBB425>:
  400ac6:	4649      	mov	r1, r9
  400ac8:	00c9      	lsls	r1, r1, #3
  400aca:	ea41 7158 	orr.w	r1, r1, r8, lsr #29
  400ace:	91b9      	str	r1, [sp, #740]	; 0x2e4
  400ad0:	00c1      	lsls	r1, r0, #3
  400ad2:	ea41 7159 	orr.w	r1, r1, r9, lsr #29
  400ad6:	91b8      	str	r1, [sp, #736]	; 0x2e0

00400ad8 <.LBE425>:
  400ad8:	abb6      	add	r3, sp, #728	; 0x2d8
  400ada:	e9d3 0100 	ldrd	r0, r1, [r3]
  400ade:	abb8      	add	r3, sp, #736	; 0x2e0
  400ae0:	e9d3 ab00 	ldrd	sl, fp, [r3]
  400ae4:	ea80 000a 	eor.w	r0, r0, sl
  400ae8:	ea81 010b 	eor.w	r1, r1, fp
  400aec:	4643      	mov	r3, r8
  400aee:	099b      	lsrs	r3, r3, #6
  400af0:	464a      	mov	r2, r9
  400af2:	ea43 6389 	orr.w	r3, r3, r9, lsl #26
  400af6:	933e      	str	r3, [sp, #248]	; 0xf8
  400af8:	0993      	lsrs	r3, r2, #6
  400afa:	933f      	str	r3, [sp, #252]	; 0xfc
  400afc:	e9dd 233e 	ldrd	r2, r3, [sp, #248]	; 0xf8
  400b00:	4042      	eors	r2, r0
  400b02:	404b      	eors	r3, r1
  400b04:	4610      	mov	r0, r2
  400b06:	4619      	mov	r1, r3
  400b08:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
  400b0c:	1812      	adds	r2, r2, r0
  400b0e:	414b      	adcs	r3, r1
  400b10:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  400b14:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  400b18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  400b1c:	1812      	adds	r2, r2, r0
  400b1e:	414b      	adcs	r3, r1
  400b20:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  400b24:	1880      	adds	r0, r0, r2
  400b26:	4159      	adcs	r1, r3
  400b28:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400b2c:	1902      	adds	r2, r0, r4
  400b2e:	eb41 0305 	adc.w	r3, r1, r5
  400b32:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68

00400b36 <.LBB427>:
  400b36:	e9dd 452e 	ldrd	r4, r5, [sp, #184]	; 0xb8
  400b3a:	0f23      	lsrs	r3, r4, #28
  400b3c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  400b40:	93ba      	str	r3, [sp, #744]	; 0x2e8
  400b42:	0f2b      	lsrs	r3, r5, #28
  400b44:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  400b48:	93bb      	str	r3, [sp, #748]	; 0x2ec

00400b4a <.LBB429>:
  400b4a:	07ab      	lsls	r3, r5, #30
  400b4c:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  400b50:	93bd      	str	r3, [sp, #756]	; 0x2f4
  400b52:	07a3      	lsls	r3, r4, #30
  400b54:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  400b58:	93bc      	str	r3, [sp, #752]	; 0x2f0

00400b5a <.LBE429>:
  400b5a:	abba      	add	r3, sp, #744	; 0x2e8
  400b5c:	e9d3 1200 	ldrd	r1, r2, [r3]
  400b60:	abbc      	add	r3, sp, #752	; 0x2f0
  400b62:	e9d3 ab00 	ldrd	sl, fp, [r3]
  400b66:	ea81 010a 	eor.w	r1, r1, sl
  400b6a:	ea82 020b 	eor.w	r2, r2, fp
  400b6e:	4613      	mov	r3, r2
  400b70:	460a      	mov	r2, r1

00400b72 <.LBB431>:
  400b72:	0669      	lsls	r1, r5, #25
  400b74:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  400b78:	91bf      	str	r1, [sp, #764]	; 0x2fc
  400b7a:	0661      	lsls	r1, r4, #25
  400b7c:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  400b80:	91be      	str	r1, [sp, #760]	; 0x2f8

00400b82 <.LBE431>:
  400b82:	a9be      	add	r1, sp, #760	; 0x2f8
  400b84:	e9d1 0100 	ldrd	r0, r1, [r1]
  400b88:	4050      	eors	r0, r2
  400b8a:	4059      	eors	r1, r3
  400b8c:	f50d 63d8 	add.w	r3, sp, #1728	; 0x6c0
  400b90:	e9c3 0100 	strd	r0, r1, [r3]
  400b94:	e9dd ab2a 	ldrd	sl, fp, [sp, #168]	; 0xa8
  400b98:	4650      	mov	r0, sl
  400b9a:	4659      	mov	r1, fp
  400b9c:	46a0      	mov	r8, r4
  400b9e:	4320      	orrs	r0, r4
  400ba0:	4329      	orrs	r1, r5
  400ba2:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
  400ba6:	4003      	ands	r3, r0
  400ba8:	400c      	ands	r4, r1
  400baa:	4618      	mov	r0, r3
  400bac:	4621      	mov	r1, r4
  400bae:	4652      	mov	r2, sl
  400bb0:	465b      	mov	r3, fp
  400bb2:	4644      	mov	r4, r8
  400bb4:	4022      	ands	r2, r4
  400bb6:	402b      	ands	r3, r5
  400bb8:	4310      	orrs	r0, r2
  400bba:	4319      	orrs	r1, r3
  400bbc:	f50d 63d8 	add.w	r3, sp, #1728	; 0x6c0
  400bc0:	e9d3 3400 	ldrd	r3, r4, [r3]
  400bc4:	181b      	adds	r3, r3, r0
  400bc6:	414c      	adcs	r4, r1
  400bc8:	4621      	mov	r1, r4
  400bca:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  400bce:	18e4      	adds	r4, r4, r3
  400bd0:	414d      	adcs	r5, r1

00400bd2 <.LBB433>:
  400bd2:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  400bd6:	0b83      	lsrs	r3, r0, #14
  400bd8:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  400bdc:	93c0      	str	r3, [sp, #768]	; 0x300
  400bde:	0b8b      	lsrs	r3, r1, #14
  400be0:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
  400be4:	93c1      	str	r3, [sp, #772]	; 0x304

00400be6 <.LBB435>:
  400be6:	0c83      	lsrs	r3, r0, #18
  400be8:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
  400bec:	93c2      	str	r3, [sp, #776]	; 0x308
  400bee:	0c8b      	lsrs	r3, r1, #18
  400bf0:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
  400bf4:	93c3      	str	r3, [sp, #780]	; 0x30c

00400bf6 <.LBE435>:
        R( 4); R( 5); R( 6); R( 7);
  400bf6:	abc0      	add	r3, sp, #768	; 0x300
  400bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
  400bfc:	f50d 7842 	add.w	r8, sp, #776	; 0x308
  400c00:	e9d8 ab00 	ldrd	sl, fp, [r8]
  400c04:	ea82 020a 	eor.w	r2, r2, sl
  400c08:	ea83 030b 	eor.w	r3, r3, fp

00400c0c <.LBB437>:
  400c0c:	4682      	mov	sl, r0
  400c0e:	468b      	mov	fp, r1
  400c10:	05c9      	lsls	r1, r1, #23
  400c12:	4650      	mov	r0, sl
  400c14:	ea41 215a 	orr.w	r1, r1, sl, lsr #9
  400c18:	91c5      	str	r1, [sp, #788]	; 0x314
  400c1a:	05c1      	lsls	r1, r0, #23
  400c1c:	ea41 215b 	orr.w	r1, r1, fp, lsr #9
  400c20:	91c4      	str	r1, [sp, #784]	; 0x310

00400c22 <.LBE437>:
  400c22:	a9c4      	add	r1, sp, #784	; 0x310
  400c24:	e9d1 0100 	ldrd	r0, r1, [r1]
  400c28:	4050      	eors	r0, r2
  400c2a:	4059      	eors	r1, r3
  400c2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400c30:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
  400c34:	4640      	mov	r0, r8
  400c36:	4649      	mov	r1, r9
  400c38:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  400c3c:	4042      	eors	r2, r0
  400c3e:	404b      	eors	r3, r1
  400c40:	4610      	mov	r0, r2
  400c42:	4619      	mov	r1, r3
  400c44:	4652      	mov	r2, sl
  400c46:	465b      	mov	r3, fp
  400c48:	4002      	ands	r2, r0
  400c4a:	400b      	ands	r3, r1
  400c4c:	4610      	mov	r0, r2
  400c4e:	4619      	mov	r1, r3
  400c50:	4642      	mov	r2, r8
  400c52:	464b      	mov	r3, r9
  400c54:	4042      	eors	r2, r0
  400c56:	404b      	eors	r3, r1
  400c58:	4610      	mov	r0, r2
  400c5a:	4619      	mov	r1, r3
  400c5c:	e9d6 2308 	ldrd	r2, r3, [r6, #32]
  400c60:	e9dd ab2c 	ldrd	sl, fp, [sp, #176]	; 0xb0
  400c64:	eb1a 0a02 	adds.w	sl, sl, r2
  400c68:	eb4b 0b03 	adc.w	fp, fp, r3
  400c6c:	eb1a 0200 	adds.w	r2, sl, r0
  400c70:	eb4b 0301 	adc.w	r3, fp, r1
  400c74:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
  400c78:	2f00      	cmp	r7, #0
  400c7a:	f001 85ef 	beq.w	40285c <.LCFI3+0x30>

00400c7e <.LBB439>:
  400c7e:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
  400c82:	4643      	mov	r3, r8
  400c84:	085b      	lsrs	r3, r3, #1
  400c86:	464a      	mov	r2, r9
  400c88:	ea43 73c9 	orr.w	r3, r3, r9, lsl #31
  400c8c:	93c6      	str	r3, [sp, #792]	; 0x318
  400c8e:	0853      	lsrs	r3, r2, #1
  400c90:	4642      	mov	r2, r8
  400c92:	ea43 73c8 	orr.w	r3, r3, r8, lsl #31
  400c96:	93c7      	str	r3, [sp, #796]	; 0x31c

00400c98 <.LBB441>:
  400c98:	0a13      	lsrs	r3, r2, #8
  400c9a:	464a      	mov	r2, r9
  400c9c:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
  400ca0:	93c8      	str	r3, [sp, #800]	; 0x320
  400ca2:	0a13      	lsrs	r3, r2, #8
  400ca4:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
  400ca8:	93c9      	str	r3, [sp, #804]	; 0x324

00400caa <.LBE441>:
  400caa:	abc6      	add	r3, sp, #792	; 0x318
  400cac:	e9d3 2300 	ldrd	r2, r3, [r3]
  400cb0:	a9c8      	add	r1, sp, #800	; 0x320
  400cb2:	e9d1 ab00 	ldrd	sl, fp, [r1]
  400cb6:	ea82 020a 	eor.w	r2, r2, sl
  400cba:	ea83 030b 	eor.w	r3, r3, fp
  400cbe:	4641      	mov	r1, r8
  400cc0:	09c9      	lsrs	r1, r1, #7
  400cc2:	4648      	mov	r0, r9
  400cc4:	ea41 6149 	orr.w	r1, r1, r9, lsl #25
  400cc8:	9140      	str	r1, [sp, #256]	; 0x100
  400cca:	09c1      	lsrs	r1, r0, #7
  400ccc:	9141      	str	r1, [sp, #260]	; 0x104
  400cce:	a940      	add	r1, sp, #256	; 0x100
  400cd0:	e9d1 0100 	ldrd	r0, r1, [r1]
  400cd4:	4050      	eors	r0, r2
  400cd6:	4059      	eors	r1, r3
  400cd8:	4602      	mov	r2, r0
  400cda:	460b      	mov	r3, r1
  400cdc:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
  400ce0:	e9dd ab26 	ldrd	sl, fp, [sp, #152]	; 0x98
  400ce4:	eb10 000a 	adds.w	r0, r0, sl
  400ce8:	eb41 010b 	adc.w	r1, r1, fp
  400cec:	eb12 0800 	adds.w	r8, r2, r0
  400cf0:	eb43 0901 	adc.w	r9, r3, r1
  400cf4:	e9cd 8922 	strd	r8, r9, [sp, #136]	; 0x88

00400cf8 <.LBB443>:
  400cf8:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
  400cfc:	4641      	mov	r1, r8
  400cfe:	0cc9      	lsrs	r1, r1, #19
  400d00:	4648      	mov	r0, r9
  400d02:	ea41 3149 	orr.w	r1, r1, r9, lsl #13
  400d06:	91ca      	str	r1, [sp, #808]	; 0x328
  400d08:	0cc1      	lsrs	r1, r0, #19
  400d0a:	4640      	mov	r0, r8
  400d0c:	ea41 3148 	orr.w	r1, r1, r8, lsl #13
  400d10:	91cb      	str	r1, [sp, #812]	; 0x32c

00400d12 <.LBB445>:
  400d12:	4649      	mov	r1, r9
  400d14:	00c9      	lsls	r1, r1, #3
  400d16:	ea41 7158 	orr.w	r1, r1, r8, lsr #29
  400d1a:	91cd      	str	r1, [sp, #820]	; 0x334
  400d1c:	00c1      	lsls	r1, r0, #3
  400d1e:	ea41 7159 	orr.w	r1, r1, r9, lsr #29
  400d22:	91cc      	str	r1, [sp, #816]	; 0x330

00400d24 <.LBE445>:
  400d24:	abca      	add	r3, sp, #808	; 0x328
  400d26:	e9d3 0100 	ldrd	r0, r1, [r3]
  400d2a:	abcc      	add	r3, sp, #816	; 0x330
  400d2c:	e9d3 ab00 	ldrd	sl, fp, [r3]
  400d30:	ea80 000a 	eor.w	r0, r0, sl
  400d34:	ea81 010b 	eor.w	r1, r1, fp
  400d38:	4643      	mov	r3, r8
  400d3a:	099b      	lsrs	r3, r3, #6
  400d3c:	464a      	mov	r2, r9
  400d3e:	ea43 6389 	orr.w	r3, r3, r9, lsl #26
  400d42:	9342      	str	r3, [sp, #264]	; 0x108
  400d44:	0993      	lsrs	r3, r2, #6
  400d46:	9343      	str	r3, [sp, #268]	; 0x10c
  400d48:	ab42      	add	r3, sp, #264	; 0x108
  400d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
  400d4e:	4042      	eors	r2, r0
  400d50:	404b      	eors	r3, r1
  400d52:	4610      	mov	r0, r2
  400d54:	4619      	mov	r1, r3
  400d56:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
  400d5a:	1812      	adds	r2, r2, r0
  400d5c:	414b      	adcs	r3, r1
  400d5e:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
  400d62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  400d66:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
  400d6a:	1880      	adds	r0, r0, r2
  400d6c:	4159      	adcs	r1, r3
  400d6e:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
  400d72:	1812      	adds	r2, r2, r0
  400d74:	414b      	adcs	r3, r1
  400d76:	4690      	mov	r8, r2
  400d78:	4699      	mov	r9, r3
  400d7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  400d7e:	eb12 0208 	adds.w	r2, r2, r8
  400d82:	eb43 0309 	adc.w	r3, r3, r9
  400d86:	e9cd 2306 	strd	r2, r3, [sp, #24]

00400d8a <.LBB447>:
  400d8a:	0f23      	lsrs	r3, r4, #28
  400d8c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  400d90:	93ce      	str	r3, [sp, #824]	; 0x338
  400d92:	0f2b      	lsrs	r3, r5, #28
  400d94:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  400d98:	93cf      	str	r3, [sp, #828]	; 0x33c

00400d9a <.LBB449>:
  400d9a:	07ab      	lsls	r3, r5, #30
  400d9c:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  400da0:	93d1      	str	r3, [sp, #836]	; 0x344
  400da2:	07a3      	lsls	r3, r4, #30
  400da4:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  400da8:	93d0      	str	r3, [sp, #832]	; 0x340

00400daa <.LBE449>:
  400daa:	abce      	add	r3, sp, #824	; 0x338
  400dac:	e9d3 2300 	ldrd	r2, r3, [r3]
  400db0:	a9d0      	add	r1, sp, #832	; 0x340
  400db2:	e9d1 ab00 	ldrd	sl, fp, [r1]
  400db6:	ea82 020a 	eor.w	r2, r2, sl
  400dba:	ea83 030b 	eor.w	r3, r3, fp

00400dbe <.LBB451>:
  400dbe:	0669      	lsls	r1, r5, #25
  400dc0:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  400dc4:	91d3      	str	r1, [sp, #844]	; 0x34c
  400dc6:	0661      	lsls	r1, r4, #25
  400dc8:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  400dcc:	91d2      	str	r1, [sp, #840]	; 0x348

00400dce <.LBE451>:
  400dce:	a9d2      	add	r1, sp, #840	; 0x348
  400dd0:	e9d1 ab00 	ldrd	sl, fp, [r1]
  400dd4:	ea8a 0a02 	eor.w	sl, sl, r2
  400dd8:	ea8b 0b03 	eor.w	fp, fp, r3
  400ddc:	e9cd ab02 	strd	sl, fp, [sp, #8]
  400de0:	e9dd ab2e 	ldrd	sl, fp, [sp, #184]	; 0xb8
  400de4:	4650      	mov	r0, sl
  400de6:	4659      	mov	r1, fp
  400de8:	4320      	orrs	r0, r4
  400dea:	4329      	orrs	r1, r5
  400dec:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  400df0:	4002      	ands	r2, r0
  400df2:	400b      	ands	r3, r1
  400df4:	ea0a 0a04 	and.w	sl, sl, r4
  400df8:	ea0b 0b05 	and.w	fp, fp, r5
  400dfc:	ea4a 0a02 	orr.w	sl, sl, r2
  400e00:	ea4b 0b03 	orr.w	fp, fp, r3
  400e04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  400e08:	eb12 020a 	adds.w	r2, r2, sl
  400e0c:	eb43 030b 	adc.w	r3, r3, fp
  400e10:	eb18 0a02 	adds.w	sl, r8, r2
  400e14:	eb49 0b03 	adc.w	fp, r9, r3

00400e18 <.LBB453>:
  400e18:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  400e1c:	4643      	mov	r3, r8
  400e1e:	0b9b      	lsrs	r3, r3, #14
  400e20:	464a      	mov	r2, r9
  400e22:	ea43 4389 	orr.w	r3, r3, r9, lsl #18
  400e26:	93d4      	str	r3, [sp, #848]	; 0x350
  400e28:	0b93      	lsrs	r3, r2, #14
  400e2a:	4642      	mov	r2, r8
  400e2c:	ea43 4388 	orr.w	r3, r3, r8, lsl #18
  400e30:	93d5      	str	r3, [sp, #852]	; 0x354

00400e32 <.LBB455>:
  400e32:	0c93      	lsrs	r3, r2, #18
  400e34:	464a      	mov	r2, r9
  400e36:	ea43 3389 	orr.w	r3, r3, r9, lsl #14
  400e3a:	93d6      	str	r3, [sp, #856]	; 0x358
  400e3c:	0c93      	lsrs	r3, r2, #18
  400e3e:	ea43 3388 	orr.w	r3, r3, r8, lsl #14
  400e42:	93d7      	str	r3, [sp, #860]	; 0x35c

00400e44 <.LBE455>:
  400e44:	abd4      	add	r3, sp, #848	; 0x350
  400e46:	e9d3 2300 	ldrd	r2, r3, [r3]
  400e4a:	a9d6      	add	r1, sp, #856	; 0x358
  400e4c:	e9d1 0100 	ldrd	r0, r1, [r1]
  400e50:	4042      	eors	r2, r0
  400e52:	404b      	eors	r3, r1

00400e54 <.LBB457>:
  400e54:	4649      	mov	r1, r9
  400e56:	05c9      	lsls	r1, r1, #23
  400e58:	4640      	mov	r0, r8
  400e5a:	ea41 2158 	orr.w	r1, r1, r8, lsr #9
  400e5e:	91d9      	str	r1, [sp, #868]	; 0x364
  400e60:	05c1      	lsls	r1, r0, #23
  400e62:	ea41 2159 	orr.w	r1, r1, r9, lsr #9
  400e66:	91d8      	str	r1, [sp, #864]	; 0x360

00400e68 <.LBE457>:
  400e68:	a9d8      	add	r1, sp, #864	; 0x360
  400e6a:	e9d1 0100 	ldrd	r0, r1, [r1]
  400e6e:	4050      	eors	r0, r2
  400e70:	4059      	eors	r1, r3
  400e72:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400e76:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  400e7a:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  400e7e:	4042      	eors	r2, r0
  400e80:	404b      	eors	r3, r1
  400e82:	4610      	mov	r0, r2
  400e84:	4619      	mov	r1, r3
  400e86:	4642      	mov	r2, r8
  400e88:	464b      	mov	r3, r9
  400e8a:	4002      	ands	r2, r0
  400e8c:	400b      	ands	r3, r1
  400e8e:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
  400e92:	ea88 0802 	eor.w	r8, r8, r2
  400e96:	ea89 0903 	eor.w	r9, r9, r3
  400e9a:	e9d6 230a 	ldrd	r2, r3, [r6, #40]	; 0x28
  400e9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  400ea2:	1880      	adds	r0, r0, r2
  400ea4:	4159      	adcs	r1, r3
  400ea6:	eb18 0000 	adds.w	r0, r8, r0
  400eaa:	eb49 0101 	adc.w	r1, r9, r1
  400eae:	e9cd 0104 	strd	r0, r1, [sp, #16]
  400eb2:	2f00      	cmp	r7, #0
  400eb4:	f001 84d8 	beq.w	402868 <.LCFI3+0x3c>

00400eb8 <.LBB459>:
  400eb8:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
  400ebc:	4643      	mov	r3, r8
  400ebe:	085b      	lsrs	r3, r3, #1
  400ec0:	464a      	mov	r2, r9
  400ec2:	ea43 73c9 	orr.w	r3, r3, r9, lsl #31
  400ec6:	93da      	str	r3, [sp, #872]	; 0x368
  400ec8:	0853      	lsrs	r3, r2, #1
  400eca:	4642      	mov	r2, r8
  400ecc:	ea43 73c8 	orr.w	r3, r3, r8, lsl #31
  400ed0:	93db      	str	r3, [sp, #876]	; 0x36c

00400ed2 <.LBB461>:
  400ed2:	0a13      	lsrs	r3, r2, #8
  400ed4:	464a      	mov	r2, r9
  400ed6:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
  400eda:	93dc      	str	r3, [sp, #880]	; 0x370
  400edc:	0a13      	lsrs	r3, r2, #8
  400ede:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
  400ee2:	93dd      	str	r3, [sp, #884]	; 0x374

00400ee4 <.LBE461>:
  400ee4:	abda      	add	r3, sp, #872	; 0x368
  400ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
  400eea:	a9dc      	add	r1, sp, #880	; 0x370
  400eec:	e9d1 0100 	ldrd	r0, r1, [r1]
  400ef0:	4042      	eors	r2, r0
  400ef2:	404b      	eors	r3, r1
  400ef4:	4641      	mov	r1, r8
  400ef6:	09c9      	lsrs	r1, r1, #7
  400ef8:	4648      	mov	r0, r9
  400efa:	ea41 6149 	orr.w	r1, r1, r9, lsl #25
  400efe:	9144      	str	r1, [sp, #272]	; 0x110
  400f00:	09c1      	lsrs	r1, r0, #7
  400f02:	9145      	str	r1, [sp, #276]	; 0x114
  400f04:	a944      	add	r1, sp, #272	; 0x110
  400f06:	e9d1 0100 	ldrd	r0, r1, [r1]
  400f0a:	4050      	eors	r0, r2
  400f0c:	4059      	eors	r1, r3
  400f0e:	4680      	mov	r8, r0
  400f10:	4689      	mov	r9, r1
  400f12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  400f16:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  400f1a:	1880      	adds	r0, r0, r2
  400f1c:	4159      	adcs	r1, r3
  400f1e:	eb18 0200 	adds.w	r2, r8, r0
  400f22:	eb49 0301 	adc.w	r3, r9, r1
  400f26:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28

00400f2a <.LBB463>:
  400f2a:	e9dd 8920 	ldrd	r8, r9, [sp, #128]	; 0x80
  400f2e:	4641      	mov	r1, r8
  400f30:	0cc9      	lsrs	r1, r1, #19
  400f32:	4648      	mov	r0, r9
  400f34:	ea41 3149 	orr.w	r1, r1, r9, lsl #13
  400f38:	91de      	str	r1, [sp, #888]	; 0x378
  400f3a:	0cc1      	lsrs	r1, r0, #19
  400f3c:	4640      	mov	r0, r8
  400f3e:	ea41 3148 	orr.w	r1, r1, r8, lsl #13
  400f42:	91df      	str	r1, [sp, #892]	; 0x37c

00400f44 <.LBB465>:
  400f44:	4649      	mov	r1, r9
  400f46:	00c9      	lsls	r1, r1, #3
  400f48:	ea41 7158 	orr.w	r1, r1, r8, lsr #29
  400f4c:	91e1      	str	r1, [sp, #900]	; 0x384
  400f4e:	00c1      	lsls	r1, r0, #3
  400f50:	ea41 7159 	orr.w	r1, r1, r9, lsr #29
  400f54:	91e0      	str	r1, [sp, #896]	; 0x380

00400f56 <.LBE465>:
  400f56:	abde      	add	r3, sp, #888	; 0x378
  400f58:	e9d3 0100 	ldrd	r0, r1, [r3]
  400f5c:	abe0      	add	r3, sp, #896	; 0x380
  400f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
  400f62:	4050      	eors	r0, r2
  400f64:	4059      	eors	r1, r3
  400f66:	4643      	mov	r3, r8
  400f68:	099b      	lsrs	r3, r3, #6
  400f6a:	464a      	mov	r2, r9
  400f6c:	ea43 6389 	orr.w	r3, r3, r9, lsl #26
  400f70:	9346      	str	r3, [sp, #280]	; 0x118
  400f72:	0993      	lsrs	r3, r2, #6
  400f74:	9347      	str	r3, [sp, #284]	; 0x11c
  400f76:	ab46      	add	r3, sp, #280	; 0x118
  400f78:	e9d3 2300 	ldrd	r2, r3, [r3]
  400f7c:	4042      	eors	r2, r0
  400f7e:	404b      	eors	r3, r1
  400f80:	4610      	mov	r0, r2
  400f82:	4619      	mov	r1, r3
  400f84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  400f88:	1812      	adds	r2, r2, r0
  400f8a:	414b      	adcs	r3, r1
  400f8c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  400f90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  400f94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  400f98:	1812      	adds	r2, r2, r0
  400f9a:	414b      	adcs	r3, r1
  400f9c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  400fa0:	1880      	adds	r0, r0, r2
  400fa2:	4159      	adcs	r1, r3
  400fa4:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  400fa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400fac:	1812      	adds	r2, r2, r0
  400fae:	414b      	adcs	r3, r1
  400fb0:	e9cd 2304 	strd	r2, r3, [sp, #16]

00400fb4 <.LBB467>:
  400fb4:	ea4f 731a 	mov.w	r3, sl, lsr #28
  400fb8:	ea43 130b 	orr.w	r3, r3, fp, lsl #4
  400fbc:	93e2      	str	r3, [sp, #904]	; 0x388
  400fbe:	ea4f 731b 	mov.w	r3, fp, lsr #28
  400fc2:	ea43 130a 	orr.w	r3, r3, sl, lsl #4
  400fc6:	93e3      	str	r3, [sp, #908]	; 0x38c

00400fc8 <.LBB469>:
  400fc8:	ea4f 738b 	mov.w	r3, fp, lsl #30
  400fcc:	ea43 039a 	orr.w	r3, r3, sl, lsr #2
  400fd0:	93e5      	str	r3, [sp, #916]	; 0x394
  400fd2:	ea4f 738a 	mov.w	r3, sl, lsl #30
  400fd6:	ea43 039b 	orr.w	r3, r3, fp, lsr #2
  400fda:	93e4      	str	r3, [sp, #912]	; 0x390

00400fdc <.LBE469>:
  400fdc:	abe2      	add	r3, sp, #904	; 0x388
  400fde:	e9d3 1200 	ldrd	r1, r2, [r3]
  400fe2:	abe4      	add	r3, sp, #912	; 0x390
  400fe4:	e9d3 8900 	ldrd	r8, r9, [r3]
  400fe8:	ea81 0108 	eor.w	r1, r1, r8
  400fec:	ea82 0209 	eor.w	r2, r2, r9
  400ff0:	4613      	mov	r3, r2
  400ff2:	460a      	mov	r2, r1

00400ff4 <.LBB471>:
  400ff4:	ea4f 614b 	mov.w	r1, fp, lsl #25
  400ff8:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
  400ffc:	91e7      	str	r1, [sp, #924]	; 0x39c
  400ffe:	ea4f 614a 	mov.w	r1, sl, lsl #25
  401002:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
  401006:	91e6      	str	r1, [sp, #920]	; 0x398

00401008 <.LBE471>:
  401008:	a9e6      	add	r1, sp, #920	; 0x398
  40100a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40100e:	4050      	eors	r0, r2
  401010:	4059      	eors	r1, r3
  401012:	4680      	mov	r8, r0
  401014:	4689      	mov	r9, r1
  401016:	ea44 000a 	orr.w	r0, r4, sl
  40101a:	ea45 010b 	orr.w	r1, r5, fp
  40101e:	e9dd 232e 	ldrd	r2, r3, [sp, #184]	; 0xb8
  401022:	4002      	ands	r2, r0
  401024:	400b      	ands	r3, r1
  401026:	4610      	mov	r0, r2
  401028:	4619      	mov	r1, r3
  40102a:	ea04 020a 	and.w	r2, r4, sl
  40102e:	ea05 030b 	and.w	r3, r5, fp
  401032:	4302      	orrs	r2, r0
  401034:	430b      	orrs	r3, r1
  401036:	eb12 0008 	adds.w	r0, r2, r8
  40103a:	eb43 0109 	adc.w	r1, r3, r9
  40103e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401042:	1812      	adds	r2, r2, r0
  401044:	414b      	adcs	r3, r1
  401046:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8

0040104a <.LBB473>:
  40104a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40104e:	0b83      	lsrs	r3, r0, #14
  401050:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  401054:	93e8      	str	r3, [sp, #928]	; 0x3a0
  401056:	0b8b      	lsrs	r3, r1, #14
  401058:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
  40105c:	93e9      	str	r3, [sp, #932]	; 0x3a4

0040105e <.LBB475>:
  40105e:	0c83      	lsrs	r3, r0, #18
  401060:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
  401064:	93ea      	str	r3, [sp, #936]	; 0x3a8
  401066:	0c8b      	lsrs	r3, r1, #18
  401068:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
  40106c:	93eb      	str	r3, [sp, #940]	; 0x3ac

0040106e <.LBE475>:
  40106e:	abe8      	add	r3, sp, #928	; 0x3a0
  401070:	e9d3 2300 	ldrd	r2, r3, [r3]
  401074:	f50d 786a 	add.w	r8, sp, #936	; 0x3a8
  401078:	e9d8 8900 	ldrd	r8, r9, [r8]
  40107c:	ea82 0208 	eor.w	r2, r2, r8
  401080:	ea83 0309 	eor.w	r3, r3, r9

00401084 <.LBB477>:
  401084:	4680      	mov	r8, r0
  401086:	4689      	mov	r9, r1
  401088:	05c9      	lsls	r1, r1, #23
  40108a:	4640      	mov	r0, r8
  40108c:	ea41 2158 	orr.w	r1, r1, r8, lsr #9
  401090:	91ed      	str	r1, [sp, #948]	; 0x3b4
  401092:	05c1      	lsls	r1, r0, #23
  401094:	ea41 2159 	orr.w	r1, r1, r9, lsr #9
  401098:	91ec      	str	r1, [sp, #944]	; 0x3b0

0040109a <.LBE477>:
  40109a:	a9ec      	add	r1, sp, #944	; 0x3b0
  40109c:	e9d1 0100 	ldrd	r0, r1, [r1]
  4010a0:	4050      	eors	r0, r2
  4010a2:	4059      	eors	r1, r3
  4010a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4010a8:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  4010ac:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  4010b0:	ea80 0008 	eor.w	r0, r0, r8
  4010b4:	ea81 0109 	eor.w	r1, r1, r9
  4010b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4010bc:	4002      	ands	r2, r0
  4010be:	400b      	ands	r3, r1
  4010c0:	4610      	mov	r0, r2
  4010c2:	4619      	mov	r1, r3
  4010c4:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  4010c8:	4042      	eors	r2, r0
  4010ca:	404b      	eors	r3, r1
  4010cc:	4610      	mov	r0, r2
  4010ce:	4619      	mov	r1, r3
  4010d0:	e9d6 230c 	ldrd	r2, r3, [r6, #48]	; 0x30
  4010d4:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
  4010d8:	eb18 0802 	adds.w	r8, r8, r2
  4010dc:	eb49 0903 	adc.w	r9, r9, r3
  4010e0:	eb18 0200 	adds.w	r2, r8, r0
  4010e4:	eb49 0301 	adc.w	r3, r9, r1
  4010e8:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  4010ec:	2f00      	cmp	r7, #0
  4010ee:	f001 83c1 	beq.w	402874 <.LCFI3+0x48>

004010f2 <.LBB479>:
  4010f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4010f6:	0843      	lsrs	r3, r0, #1
  4010f8:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
  4010fc:	93ee      	str	r3, [sp, #952]	; 0x3b8
  4010fe:	084b      	lsrs	r3, r1, #1
  401100:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
  401104:	93ef      	str	r3, [sp, #956]	; 0x3bc

00401106 <.LBB481>:
  401106:	0a03      	lsrs	r3, r0, #8
  401108:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  40110c:	93f0      	str	r3, [sp, #960]	; 0x3c0
  40110e:	0a0b      	lsrs	r3, r1, #8
  401110:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  401114:	93f1      	str	r3, [sp, #964]	; 0x3c4

00401116 <.LBE481>:
  401116:	abee      	add	r3, sp, #952	; 0x3b8
  401118:	e9d3 2300 	ldrd	r2, r3, [r3]
  40111c:	f50d 7870 	add.w	r8, sp, #960	; 0x3c0
  401120:	e9d8 8900 	ldrd	r8, r9, [r8]
  401124:	ea82 0208 	eor.w	r2, r2, r8
  401128:	ea83 0309 	eor.w	r3, r3, r9
  40112c:	4689      	mov	r9, r1
  40112e:	09c1      	lsrs	r1, r0, #7
  401130:	4648      	mov	r0, r9
  401132:	ea41 6149 	orr.w	r1, r1, r9, lsl #25
  401136:	9148      	str	r1, [sp, #288]	; 0x120
  401138:	09c1      	lsrs	r1, r0, #7
  40113a:	9149      	str	r1, [sp, #292]	; 0x124
  40113c:	a948      	add	r1, sp, #288	; 0x120
  40113e:	e9d1 0100 	ldrd	r0, r1, [r1]
  401142:	4050      	eors	r0, r2
  401144:	4059      	eors	r1, r3
  401146:	4602      	mov	r2, r0
  401148:	460b      	mov	r3, r1
  40114a:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
  40114e:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
  401152:	eb10 0008 	adds.w	r0, r0, r8
  401156:	eb41 0109 	adc.w	r1, r1, r9
  40115a:	eb12 0800 	adds.w	r8, r2, r0
  40115e:	eb43 0901 	adc.w	r9, r3, r1
  401162:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38

00401166 <.LBB483>:
  401166:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
  40116a:	0cd1      	lsrs	r1, r2, #19
  40116c:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
  401170:	91f2      	str	r1, [sp, #968]	; 0x3c8
  401172:	0cd9      	lsrs	r1, r3, #19
  401174:	ea41 3142 	orr.w	r1, r1, r2, lsl #13
  401178:	91f3      	str	r1, [sp, #972]	; 0x3cc

0040117a <.LBB485>:
  40117a:	00d9      	lsls	r1, r3, #3
  40117c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
  401180:	91f5      	str	r1, [sp, #980]	; 0x3d4
  401182:	00d1      	lsls	r1, r2, #3
  401184:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
  401188:	91f4      	str	r1, [sp, #976]	; 0x3d0

0040118a <.LBE485>:
  40118a:	a9f2      	add	r1, sp, #968	; 0x3c8
  40118c:	e9d1 0100 	ldrd	r0, r1, [r1]
  401190:	f50d 7874 	add.w	r8, sp, #976	; 0x3d0
  401194:	e9d8 8900 	ldrd	r8, r9, [r8]
  401198:	ea80 0008 	eor.w	r0, r0, r8
  40119c:	ea81 0109 	eor.w	r1, r1, r9
  4011a0:	4699      	mov	r9, r3
  4011a2:	0993      	lsrs	r3, r2, #6
  4011a4:	464a      	mov	r2, r9
  4011a6:	ea43 6389 	orr.w	r3, r3, r9, lsl #26
  4011aa:	934a      	str	r3, [sp, #296]	; 0x128
  4011ac:	0993      	lsrs	r3, r2, #6
  4011ae:	934b      	str	r3, [sp, #300]	; 0x12c
  4011b0:	ab4a      	add	r3, sp, #296	; 0x128
  4011b2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4011b6:	4042      	eors	r2, r0
  4011b8:	404b      	eors	r3, r1
  4011ba:	4610      	mov	r0, r2
  4011bc:	4619      	mov	r1, r3
  4011be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  4011c2:	1812      	adds	r2, r2, r0
  4011c4:	414b      	adcs	r3, r1
  4011c6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  4011ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4011ce:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
  4011d2:	1880      	adds	r0, r0, r2
  4011d4:	4159      	adcs	r1, r3
  4011d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  4011da:	1812      	adds	r2, r2, r0
  4011dc:	414b      	adcs	r3, r1
  4011de:	4610      	mov	r0, r2
  4011e0:	4619      	mov	r1, r3
  4011e2:	e9dd 232e 	ldrd	r2, r3, [sp, #184]	; 0xb8
  4011e6:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  4011ea:	1880      	adds	r0, r0, r2
  4011ec:	4159      	adcs	r1, r3
  4011ee:	4602      	mov	r2, r0
  4011f0:	460b      	mov	r3, r1
  4011f2:	e9cd 2302 	strd	r2, r3, [sp, #8]

004011f6 <.LBB487>:
  4011f6:	e9dd 892a 	ldrd	r8, r9, [sp, #168]	; 0xa8
  4011fa:	4643      	mov	r3, r8
  4011fc:	0f1b      	lsrs	r3, r3, #28
  4011fe:	464a      	mov	r2, r9
  401200:	ea43 1309 	orr.w	r3, r3, r9, lsl #4
  401204:	93f6      	str	r3, [sp, #984]	; 0x3d8
  401206:	0f13      	lsrs	r3, r2, #28
  401208:	4642      	mov	r2, r8
  40120a:	ea43 1308 	orr.w	r3, r3, r8, lsl #4
  40120e:	93f7      	str	r3, [sp, #988]	; 0x3dc

00401210 <.LBB489>:
  401210:	464b      	mov	r3, r9
  401212:	079b      	lsls	r3, r3, #30
  401214:	ea43 0398 	orr.w	r3, r3, r8, lsr #2
  401218:	93f9      	str	r3, [sp, #996]	; 0x3e4
  40121a:	0793      	lsls	r3, r2, #30
  40121c:	ea43 0399 	orr.w	r3, r3, r9, lsr #2
  401220:	93f8      	str	r3, [sp, #992]	; 0x3e0

00401222 <.LBE489>:
  401222:	abf6      	add	r3, sp, #984	; 0x3d8
  401224:	e9d3 2300 	ldrd	r2, r3, [r3]
  401228:	a9f8      	add	r1, sp, #992	; 0x3e0
  40122a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40122e:	4042      	eors	r2, r0
  401230:	404b      	eors	r3, r1

00401232 <.LBB491>:
  401232:	4649      	mov	r1, r9
  401234:	0649      	lsls	r1, r1, #25
  401236:	4640      	mov	r0, r8
  401238:	ea41 11d8 	orr.w	r1, r1, r8, lsr #7
  40123c:	91fb      	str	r1, [sp, #1004]	; 0x3ec
  40123e:	0641      	lsls	r1, r0, #25
  401240:	ea41 11d9 	orr.w	r1, r1, r9, lsr #7
  401244:	91fa      	str	r1, [sp, #1000]	; 0x3e8

00401246 <.LBE491>:
  401246:	a9fa      	add	r1, sp, #1000	; 0x3e8
  401248:	e9d1 0100 	ldrd	r0, r1, [r1]
  40124c:	4050      	eors	r0, r2
  40124e:	4059      	eors	r1, r3
  401250:	4602      	mov	r2, r0
  401252:	460b      	mov	r3, r1
  401254:	ea48 000a 	orr.w	r0, r8, sl
  401258:	ea49 010b 	orr.w	r1, r9, fp
  40125c:	4020      	ands	r0, r4
  40125e:	4029      	ands	r1, r5
  401260:	ea08 080a 	and.w	r8, r8, sl
  401264:	ea09 090b 	and.w	r9, r9, fp
  401268:	ea48 0800 	orr.w	r8, r8, r0
  40126c:	ea49 0901 	orr.w	r9, r9, r1
  401270:	eb18 0002 	adds.w	r0, r8, r2
  401274:	eb49 0103 	adc.w	r1, r9, r3
  401278:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
  40127c:	eb18 0800 	adds.w	r8, r8, r0
  401280:	eb49 0901 	adc.w	r9, r9, r1

00401284 <.LBB493>:
  401284:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  401288:	0b83      	lsrs	r3, r0, #14
  40128a:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  40128e:	93fc      	str	r3, [sp, #1008]	; 0x3f0
  401290:	0b8b      	lsrs	r3, r1, #14
  401292:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
  401296:	93fd      	str	r3, [sp, #1012]	; 0x3f4

00401298 <.LBB495>:
  401298:	0c83      	lsrs	r3, r0, #18
  40129a:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
  40129e:	93fe      	str	r3, [sp, #1016]	; 0x3f8
  4012a0:	0c8b      	lsrs	r3, r1, #18
  4012a2:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
  4012a6:	93ff      	str	r3, [sp, #1020]	; 0x3fc

004012a8 <.LBE495>:
  4012a8:	abfc      	add	r3, sp, #1008	; 0x3f0
  4012aa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4012ae:	a9fe      	add	r1, sp, #1016	; 0x3f8
  4012b0:	e9d1 0100 	ldrd	r0, r1, [r1]
  4012b4:	4042      	eors	r2, r0
  4012b6:	404b      	eors	r3, r1

004012b8 <.LBB497>:
  4012b8:	9903      	ldr	r1, [sp, #12]
  4012ba:	05c9      	lsls	r1, r1, #23
  4012bc:	9802      	ldr	r0, [sp, #8]
  4012be:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
  4012c2:	f8cd 1404 	str.w	r1, [sp, #1028]	; 0x404
  4012c6:	05c1      	lsls	r1, r0, #23
  4012c8:	9803      	ldr	r0, [sp, #12]
  4012ca:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
  4012ce:	f8cd 1400 	str.w	r1, [sp, #1024]	; 0x400

004012d2 <.LBE497>:
  4012d2:	f50d 6180 	add.w	r1, sp, #1024	; 0x400
  4012d6:	e9d1 0100 	ldrd	r0, r1, [r1]
  4012da:	4050      	eors	r0, r2
  4012dc:	4059      	eors	r1, r3
  4012de:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  4012e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4012e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4012ea:	4050      	eors	r0, r2
  4012ec:	4059      	eors	r1, r3
  4012ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4012f2:	4002      	ands	r2, r0
  4012f4:	400b      	ands	r3, r1
  4012f6:	4610      	mov	r0, r2
  4012f8:	4619      	mov	r1, r3
  4012fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  4012fe:	4042      	eors	r2, r0
  401300:	404b      	eors	r3, r1
  401302:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
  401306:	e9d6 230e 	ldrd	r2, r3, [r6, #56]	; 0x38
  40130a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  40130e:	1880      	adds	r0, r0, r2
  401310:	4159      	adcs	r1, r3
  401312:	4602      	mov	r2, r0
  401314:	460b      	mov	r3, r1
  401316:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
  40131a:	1880      	adds	r0, r0, r2
  40131c:	4159      	adcs	r1, r3
  40131e:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  401322:	2f00      	cmp	r7, #0
  401324:	f001 82ac 	beq.w	402880 <.LCFI3+0x54>

00401328 <.LBB499>:
  401328:	e9dd 0100 	ldrd	r0, r1, [sp]
  40132c:	0843      	lsrs	r3, r0, #1
  40132e:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
  401332:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
  401336:	084b      	lsrs	r3, r1, #1
  401338:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
  40133c:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c

00401340 <.LBB501>:
  401340:	0a03      	lsrs	r3, r0, #8
  401342:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  401346:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
  40134a:	0a0b      	lsrs	r3, r1, #8
  40134c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  401350:	f8cd 3414 	str.w	r3, [sp, #1044]	; 0x414

00401354 <.LBE501>:
  401354:	f50d 6381 	add.w	r3, sp, #1032	; 0x408
  401358:	e9d3 2300 	ldrd	r2, r3, [r3]
  40135c:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
  401360:	e9d1 0100 	ldrd	r0, r1, [r1]
  401364:	4042      	eors	r2, r0
  401366:	404b      	eors	r3, r1
  401368:	9900      	ldr	r1, [sp, #0]
  40136a:	09c9      	lsrs	r1, r1, #7
  40136c:	9801      	ldr	r0, [sp, #4]
  40136e:	ea41 6140 	orr.w	r1, r1, r0, lsl #25
  401372:	914c      	str	r1, [sp, #304]	; 0x130
  401374:	09c1      	lsrs	r1, r0, #7
  401376:	914d      	str	r1, [sp, #308]	; 0x134
  401378:	a94c      	add	r1, sp, #304	; 0x130
  40137a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40137e:	4050      	eors	r0, r2
  401380:	4059      	eors	r1, r3
  401382:	4602      	mov	r2, r0
  401384:	460b      	mov	r3, r1
  401386:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40138a:	1880      	adds	r0, r0, r2
  40138c:	4159      	adcs	r1, r3
  40138e:	4602      	mov	r2, r0
  401390:	460b      	mov	r3, r1
  401392:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
  401396:	1880      	adds	r0, r0, r2
  401398:	4159      	adcs	r1, r3
  40139a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40

0040139e <.LBB503>:
  40139e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4013a2:	0cd1      	lsrs	r1, r2, #19
  4013a4:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
  4013a8:	f8cd 1418 	str.w	r1, [sp, #1048]	; 0x418
  4013ac:	0cd9      	lsrs	r1, r3, #19
  4013ae:	ea41 3142 	orr.w	r1, r1, r2, lsl #13
  4013b2:	f8cd 141c 	str.w	r1, [sp, #1052]	; 0x41c

004013b6 <.LBB505>:
  4013b6:	00d9      	lsls	r1, r3, #3
  4013b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
  4013bc:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
  4013c0:	00d1      	lsls	r1, r2, #3
  4013c2:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
  4013c6:	f8cd 1420 	str.w	r1, [sp, #1056]	; 0x420

004013ca <.LBE505>:
  4013ca:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
  4013ce:	e9d3 0100 	ldrd	r0, r1, [r3]
  4013d2:	f50d 6384 	add.w	r3, sp, #1056	; 0x420
  4013d6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4013da:	4050      	eors	r0, r2
  4013dc:	4059      	eors	r1, r3
  4013de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4013e0:	099b      	lsrs	r3, r3, #6
  4013e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4013e4:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
  4013e8:	934e      	str	r3, [sp, #312]	; 0x138
  4013ea:	0993      	lsrs	r3, r2, #6
  4013ec:	934f      	str	r3, [sp, #316]	; 0x13c
  4013ee:	ab4e      	add	r3, sp, #312	; 0x138
  4013f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4013f4:	4042      	eors	r2, r0
  4013f6:	404b      	eors	r3, r1
  4013f8:	4610      	mov	r0, r2
  4013fa:	4619      	mov	r1, r3
  4013fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  401400:	1812      	adds	r2, r2, r0
  401402:	414b      	adcs	r3, r1
  401404:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  401408:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  40140c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  401410:	1812      	adds	r2, r2, r0
  401412:	414b      	adcs	r3, r1
  401414:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  401418:	1880      	adds	r0, r0, r2
  40141a:	4159      	adcs	r1, r3
  40141c:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  401420:	1902      	adds	r2, r0, r4
  401422:	eb41 0305 	adc.w	r3, r1, r5
  401426:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60

0040142a <.LBB507>:
  40142a:	ea4f 7318 	mov.w	r3, r8, lsr #28
  40142e:	ea43 1309 	orr.w	r3, r3, r9, lsl #4
  401432:	f8cd 3428 	str.w	r3, [sp, #1064]	; 0x428
  401436:	ea4f 7319 	mov.w	r3, r9, lsr #28
  40143a:	ea43 1308 	orr.w	r3, r3, r8, lsl #4
  40143e:	f8cd 342c 	str.w	r3, [sp, #1068]	; 0x42c

00401442 <.LBB509>:
  401442:	ea4f 7389 	mov.w	r3, r9, lsl #30
  401446:	ea43 0398 	orr.w	r3, r3, r8, lsr #2
  40144a:	f8cd 3434 	str.w	r3, [sp, #1076]	; 0x434
  40144e:	ea4f 7388 	mov.w	r3, r8, lsl #30
  401452:	ea43 0399 	orr.w	r3, r3, r9, lsr #2
  401456:	f8cd 3430 	str.w	r3, [sp, #1072]	; 0x430

0040145a <.LBE509>:
  40145a:	f50d 6385 	add.w	r3, sp, #1064	; 0x428
  40145e:	e9d3 1200 	ldrd	r1, r2, [r3]
  401462:	f50d 6386 	add.w	r3, sp, #1072	; 0x430
  401466:	e9d3 3400 	ldrd	r3, r4, [r3]
  40146a:	4059      	eors	r1, r3
  40146c:	4062      	eors	r2, r4
  40146e:	4613      	mov	r3, r2
  401470:	460a      	mov	r2, r1

00401472 <.LBB511>:
  401472:	ea4f 6149 	mov.w	r1, r9, lsl #25
  401476:	ea41 11d8 	orr.w	r1, r1, r8, lsr #7
  40147a:	f8cd 143c 	str.w	r1, [sp, #1084]	; 0x43c
  40147e:	ea4f 6148 	mov.w	r1, r8, lsl #25
  401482:	ea41 11d9 	orr.w	r1, r1, r9, lsr #7
  401486:	f8cd 1438 	str.w	r1, [sp, #1080]	; 0x438

0040148a <.LBE511>:
  40148a:	f50d 6187 	add.w	r1, sp, #1080	; 0x438
  40148e:	e9d1 0100 	ldrd	r0, r1, [r1]
  401492:	4050      	eors	r0, r2
  401494:	4059      	eors	r1, r3
  401496:	4602      	mov	r2, r0
  401498:	460b      	mov	r3, r1
  40149a:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
  40149e:	ea44 0008 	orr.w	r0, r4, r8
  4014a2:	ea45 0109 	orr.w	r1, r5, r9
  4014a6:	ea00 000a 	and.w	r0, r0, sl
  4014aa:	ea01 010b 	and.w	r1, r1, fp
  4014ae:	ea04 0408 	and.w	r4, r4, r8
  4014b2:	ea05 0509 	and.w	r5, r5, r9
  4014b6:	4320      	orrs	r0, r4
  4014b8:	4329      	orrs	r1, r5
  4014ba:	1880      	adds	r0, r0, r2
  4014bc:	4159      	adcs	r1, r3
  4014be:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
  4014c2:	181b      	adds	r3, r3, r0
  4014c4:	414c      	adcs	r4, r1
  4014c6:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68

004014ca <.LBB513>:
  4014ca:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
  4014ce:	0ba3      	lsrs	r3, r4, #14
  4014d0:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
  4014d4:	f8cd 3440 	str.w	r3, [sp, #1088]	; 0x440
  4014d8:	0bab      	lsrs	r3, r5, #14
  4014da:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
  4014de:	f8cd 3444 	str.w	r3, [sp, #1092]	; 0x444

004014e2 <.LBB515>:
  4014e2:	0ca3      	lsrs	r3, r4, #18
  4014e4:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
  4014e8:	f8cd 3448 	str.w	r3, [sp, #1096]	; 0x448
  4014ec:	0cab      	lsrs	r3, r5, #18
  4014ee:	ea43 3384 	orr.w	r3, r3, r4, lsl #14
  4014f2:	f8cd 344c 	str.w	r3, [sp, #1100]	; 0x44c

004014f6 <.LBE515>:
        R( 8); R( 9); R(10); R(11);
  4014f6:	f50d 6388 	add.w	r3, sp, #1088	; 0x440
  4014fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4014fe:	f50d 6189 	add.w	r1, sp, #1096	; 0x448
  401502:	e9d1 0100 	ldrd	r0, r1, [r1]
  401506:	4042      	eors	r2, r0
  401508:	404b      	eors	r3, r1

0040150a <.LBB517>:
  40150a:	05e9      	lsls	r1, r5, #23
  40150c:	ea41 2154 	orr.w	r1, r1, r4, lsr #9
  401510:	f8cd 1454 	str.w	r1, [sp, #1108]	; 0x454
  401514:	05e1      	lsls	r1, r4, #23
  401516:	ea41 2155 	orr.w	r1, r1, r5, lsr #9
  40151a:	f8cd 1450 	str.w	r1, [sp, #1104]	; 0x450

0040151e <.LBE517>:
  40151e:	f50d 618a 	add.w	r1, sp, #1104	; 0x450
  401522:	e9d1 0100 	ldrd	r0, r1, [r1]
  401526:	4050      	eors	r0, r2
  401528:	4059      	eors	r1, r3
  40152a:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  40152e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
  401532:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
  401536:	404b      	eors	r3, r1
  401538:	4054      	eors	r4, r2
  40153a:	4625      	mov	r5, r4
  40153c:	461c      	mov	r4, r3
  40153e:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  401542:	4022      	ands	r2, r4
  401544:	402b      	ands	r3, r5
  401546:	4614      	mov	r4, r2
  401548:	461d      	mov	r5, r3
  40154a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40154e:	4062      	eors	r2, r4
  401550:	406b      	eors	r3, r5
  401552:	4614      	mov	r4, r2
  401554:	461d      	mov	r5, r3
  401556:	e9d6 2310 	ldrd	r2, r3, [r6, #64]	; 0x40
  40155a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40155e:	1880      	adds	r0, r0, r2
  401560:	4159      	adcs	r1, r3
  401562:	1820      	adds	r0, r4, r0
  401564:	eb45 0101 	adc.w	r1, r5, r1
  401568:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40156c:	2f00      	cmp	r7, #0
  40156e:	f001 818d 	beq.w	40288c <.LCFI3+0x60>

00401572 <.LBB519>:
  401572:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
  401576:	0863      	lsrs	r3, r4, #1
  401578:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
  40157c:	f8cd 3458 	str.w	r3, [sp, #1112]	; 0x458
  401580:	086b      	lsrs	r3, r5, #1
  401582:	ea43 73c4 	orr.w	r3, r3, r4, lsl #31
  401586:	f8cd 345c 	str.w	r3, [sp, #1116]	; 0x45c

0040158a <.LBB521>:
  40158a:	0a23      	lsrs	r3, r4, #8
  40158c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  401590:	f8cd 3460 	str.w	r3, [sp, #1120]	; 0x460
  401594:	0a2b      	lsrs	r3, r5, #8
  401596:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  40159a:	f8cd 3464 	str.w	r3, [sp, #1124]	; 0x464

0040159e <.LBE521>:
  40159e:	f50d 638b 	add.w	r3, sp, #1112	; 0x458
  4015a2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4015a6:	f50d 618c 	add.w	r1, sp, #1120	; 0x460
  4015aa:	e9d1 0100 	ldrd	r0, r1, [r1]
  4015ae:	4042      	eors	r2, r0
  4015b0:	404b      	eors	r3, r1
  4015b2:	09e1      	lsrs	r1, r4, #7
  4015b4:	ea41 6145 	orr.w	r1, r1, r5, lsl #25
  4015b8:	9150      	str	r1, [sp, #320]	; 0x140
  4015ba:	09e9      	lsrs	r1, r5, #7
  4015bc:	9151      	str	r1, [sp, #324]	; 0x144
  4015be:	a950      	add	r1, sp, #320	; 0x140
  4015c0:	e9d1 0100 	ldrd	r0, r1, [r1]
  4015c4:	4050      	eors	r0, r2
  4015c6:	4059      	eors	r1, r3
  4015c8:	4602      	mov	r2, r0
  4015ca:	460b      	mov	r3, r1
  4015cc:	e9dd 0100 	ldrd	r0, r1, [sp]
  4015d0:	1880      	adds	r0, r0, r2
  4015d2:	4159      	adcs	r1, r3
  4015d4:	4602      	mov	r2, r0
  4015d6:	460b      	mov	r3, r1
  4015d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4015dc:	1880      	adds	r0, r0, r2
  4015de:	4159      	adcs	r1, r3
  4015e0:	e9cd 0100 	strd	r0, r1, [sp]

004015e4 <.LBB523>:
  4015e4:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
  4015e8:	0ce1      	lsrs	r1, r4, #19
  4015ea:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
  4015ee:	f8cd 1468 	str.w	r1, [sp, #1128]	; 0x468
  4015f2:	0ce9      	lsrs	r1, r5, #19
  4015f4:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
  4015f8:	f8cd 146c 	str.w	r1, [sp, #1132]	; 0x46c

004015fc <.LBB525>:
  4015fc:	00e9      	lsls	r1, r5, #3
  4015fe:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
  401602:	f8cd 1474 	str.w	r1, [sp, #1140]	; 0x474
  401606:	00e1      	lsls	r1, r4, #3
  401608:	ea41 7155 	orr.w	r1, r1, r5, lsr #29
  40160c:	f8cd 1470 	str.w	r1, [sp, #1136]	; 0x470

00401610 <.LBE525>:
  401610:	f50d 638d 	add.w	r3, sp, #1128	; 0x468
  401614:	e9d3 0100 	ldrd	r0, r1, [r3]
  401618:	f50d 638e 	add.w	r3, sp, #1136	; 0x470
  40161c:	e9d3 2300 	ldrd	r2, r3, [r3]
  401620:	4050      	eors	r0, r2
  401622:	4059      	eors	r1, r3
  401624:	09a4      	lsrs	r4, r4, #6
  401626:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  401628:	ea44 6485 	orr.w	r4, r4, r5, lsl #26
  40162c:	9452      	str	r4, [sp, #328]	; 0x148
  40162e:	09ac      	lsrs	r4, r5, #6
  401630:	9453      	str	r4, [sp, #332]	; 0x14c
  401632:	ab52      	add	r3, sp, #328	; 0x148
  401634:	e9d3 4500 	ldrd	r4, r5, [r3]
  401638:	4044      	eors	r4, r0
  40163a:	404d      	eors	r5, r1
  40163c:	4620      	mov	r0, r4
  40163e:	e9dd 3400 	ldrd	r3, r4, [sp]
  401642:	181b      	adds	r3, r3, r0
  401644:	416c      	adcs	r4, r5
  401646:	e9cd 3400 	strd	r3, r4, [sp]
  40164a:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  40164e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  401652:	1912      	adds	r2, r2, r4
  401654:	416b      	adcs	r3, r5
  401656:	4614      	mov	r4, r2
  401658:	461d      	mov	r5, r3
  40165a:	e9dd 2300 	ldrd	r2, r3, [sp]
  40165e:	1912      	adds	r2, r2, r4
  401660:	416b      	adcs	r3, r5
  401662:	461c      	mov	r4, r3
  401664:	4613      	mov	r3, r2
  401666:	e9cd 3406 	strd	r3, r4, [sp, #24]
  40166a:	eb12 020a 	adds.w	r2, r2, sl
  40166e:	eb44 030b 	adc.w	r3, r4, fp
  401672:	4692      	mov	sl, r2
  401674:	469b      	mov	fp, r3

00401676 <.LBB527>:
  401676:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
  40167a:	0f23      	lsrs	r3, r4, #28
  40167c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  401680:	f8cd 3478 	str.w	r3, [sp, #1144]	; 0x478
  401684:	0f2b      	lsrs	r3, r5, #28
  401686:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  40168a:	f8cd 347c 	str.w	r3, [sp, #1148]	; 0x47c

0040168e <.LBB529>:
  40168e:	07ab      	lsls	r3, r5, #30
  401690:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  401694:	f8cd 3484 	str.w	r3, [sp, #1156]	; 0x484
  401698:	07a3      	lsls	r3, r4, #30
  40169a:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  40169e:	f8cd 3480 	str.w	r3, [sp, #1152]	; 0x480

004016a2 <.LBE529>:
  4016a2:	f50d 638f 	add.w	r3, sp, #1144	; 0x478
  4016a6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4016aa:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
  4016ae:	e9d1 0100 	ldrd	r0, r1, [r1]
  4016b2:	4042      	eors	r2, r0
  4016b4:	404b      	eors	r3, r1

004016b6 <.LBB531>:
  4016b6:	0669      	lsls	r1, r5, #25
  4016b8:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  4016bc:	f8cd 148c 	str.w	r1, [sp, #1164]	; 0x48c
  4016c0:	0661      	lsls	r1, r4, #25
  4016c2:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  4016c6:	f8cd 1488 	str.w	r1, [sp, #1160]	; 0x488

004016ca <.LBE531>:
  4016ca:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
  4016ce:	e9d1 0100 	ldrd	r0, r1, [r1]
  4016d2:	4050      	eors	r0, r2
  4016d4:	4059      	eors	r1, r3
  4016d6:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  4016da:	ea44 0008 	orr.w	r0, r4, r8
  4016de:	ea45 0109 	orr.w	r1, r5, r9
  4016e2:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  4016e6:	4002      	ands	r2, r0
  4016e8:	400b      	ands	r3, r1
  4016ea:	ea04 0408 	and.w	r4, r4, r8
  4016ee:	ea05 0509 	and.w	r5, r5, r9
  4016f2:	4314      	orrs	r4, r2
  4016f4:	431d      	orrs	r5, r3
  4016f6:	4620      	mov	r0, r4
  4016f8:	4629      	mov	r1, r5
  4016fa:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  4016fe:	1824      	adds	r4, r4, r0
  401700:	414d      	adcs	r5, r1
  401702:	4620      	mov	r0, r4
  401704:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
  401708:	181b      	adds	r3, r3, r0
  40170a:	416c      	adcs	r4, r5
  40170c:	e9cd 3406 	strd	r3, r4, [sp, #24]

00401710 <.LBB533>:
  401710:	ea4f 339a 	mov.w	r3, sl, lsr #14
  401714:	ea43 438b 	orr.w	r3, r3, fp, lsl #18
  401718:	f8cd 3490 	str.w	r3, [sp, #1168]	; 0x490
  40171c:	ea4f 339b 	mov.w	r3, fp, lsr #14
  401720:	ea43 438a 	orr.w	r3, r3, sl, lsl #18
  401724:	f8cd 3494 	str.w	r3, [sp, #1172]	; 0x494

00401728 <.LBB535>:
  401728:	ea4f 439a 	mov.w	r3, sl, lsr #18
  40172c:	ea43 338b 	orr.w	r3, r3, fp, lsl #14
  401730:	f8cd 3498 	str.w	r3, [sp, #1176]	; 0x498
  401734:	ea4f 439b 	mov.w	r3, fp, lsr #18
  401738:	ea43 338a 	orr.w	r3, r3, sl, lsl #14
  40173c:	f8cd 349c 	str.w	r3, [sp, #1180]	; 0x49c

00401740 <.LBE535>:
  401740:	f50d 6392 	add.w	r3, sp, #1168	; 0x490
  401744:	e9d3 2300 	ldrd	r2, r3, [r3]
  401748:	f50d 6193 	add.w	r1, sp, #1176	; 0x498
  40174c:	e9d1 0100 	ldrd	r0, r1, [r1]
  401750:	4042      	eors	r2, r0
  401752:	404b      	eors	r3, r1

00401754 <.LBB537>:
  401754:	ea4f 51cb 	mov.w	r1, fp, lsl #23
  401758:	ea41 215a 	orr.w	r1, r1, sl, lsr #9
  40175c:	f8cd 14a4 	str.w	r1, [sp, #1188]	; 0x4a4
  401760:	ea4f 51ca 	mov.w	r1, sl, lsl #23
  401764:	ea41 215b 	orr.w	r1, r1, fp, lsr #9
  401768:	f8cd 14a0 	str.w	r1, [sp, #1184]	; 0x4a0

0040176c <.LBE537>:
  40176c:	f50d 6194 	add.w	r1, sp, #1184	; 0x4a0
  401770:	e9d1 0100 	ldrd	r0, r1, [r1]
  401774:	4050      	eors	r0, r2
  401776:	4059      	eors	r1, r3
  401778:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  40177c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401780:	4614      	mov	r4, r2
  401782:	461d      	mov	r5, r3
  401784:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
  401788:	4044      	eors	r4, r0
  40178a:	404d      	eors	r5, r1
  40178c:	ea04 040a 	and.w	r4, r4, sl
  401790:	ea05 050b 	and.w	r5, r5, fp
  401794:	4062      	eors	r2, r4
  401796:	406b      	eors	r3, r5
  401798:	4614      	mov	r4, r2
  40179a:	461d      	mov	r5, r3
  40179c:	e9d6 2312 	ldrd	r2, r3, [r6, #72]	; 0x48
  4017a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4017a4:	1880      	adds	r0, r0, r2
  4017a6:	4159      	adcs	r1, r3
  4017a8:	1820      	adds	r0, r4, r0
  4017aa:	eb45 0101 	adc.w	r1, r5, r1
  4017ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4017b2:	2f00      	cmp	r7, #0
  4017b4:	f001 8070 	beq.w	402898 <.LCFI3+0x6c>

004017b8 <.LBB539>:
  4017b8:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
  4017bc:	0863      	lsrs	r3, r4, #1
  4017be:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
  4017c2:	f8cd 34a8 	str.w	r3, [sp, #1192]	; 0x4a8
  4017c6:	086b      	lsrs	r3, r5, #1
  4017c8:	ea43 73c4 	orr.w	r3, r3, r4, lsl #31
  4017cc:	f8cd 34ac 	str.w	r3, [sp, #1196]	; 0x4ac

004017d0 <.LBB541>:
  4017d0:	0a23      	lsrs	r3, r4, #8
  4017d2:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  4017d6:	f8cd 34b0 	str.w	r3, [sp, #1200]	; 0x4b0
  4017da:	0a2b      	lsrs	r3, r5, #8
  4017dc:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  4017e0:	f8cd 34b4 	str.w	r3, [sp, #1204]	; 0x4b4

004017e4 <.LBE541>:
  4017e4:	f50d 6395 	add.w	r3, sp, #1192	; 0x4a8
  4017e8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4017ec:	f50d 6196 	add.w	r1, sp, #1200	; 0x4b0
  4017f0:	e9d1 0100 	ldrd	r0, r1, [r1]
  4017f4:	4042      	eors	r2, r0
  4017f6:	404b      	eors	r3, r1
  4017f8:	09e1      	lsrs	r1, r4, #7
  4017fa:	ea41 6145 	orr.w	r1, r1, r5, lsl #25
  4017fe:	9154      	str	r1, [sp, #336]	; 0x150
  401800:	09e9      	lsrs	r1, r5, #7
  401802:	9155      	str	r1, [sp, #340]	; 0x154
  401804:	a954      	add	r1, sp, #336	; 0x150
  401806:	e9d1 0100 	ldrd	r0, r1, [r1]
  40180a:	4050      	eors	r0, r2
  40180c:	4059      	eors	r1, r3
  40180e:	4602      	mov	r2, r0
  401810:	460b      	mov	r3, r1
  401812:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  401816:	1880      	adds	r0, r0, r2
  401818:	4159      	adcs	r1, r3
  40181a:	4602      	mov	r2, r0
  40181c:	460b      	mov	r3, r1
  40181e:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
  401822:	1880      	adds	r0, r0, r2
  401824:	4159      	adcs	r1, r3
  401826:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48

0040182a <.LBB543>:
  40182a:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
  40182e:	0ce1      	lsrs	r1, r4, #19
  401830:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
  401834:	f8cd 14b8 	str.w	r1, [sp, #1208]	; 0x4b8
  401838:	0ce9      	lsrs	r1, r5, #19
  40183a:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
  40183e:	f8cd 14bc 	str.w	r1, [sp, #1212]	; 0x4bc

00401842 <.LBB545>:
  401842:	00e9      	lsls	r1, r5, #3
  401844:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
  401848:	f8cd 14c4 	str.w	r1, [sp, #1220]	; 0x4c4
  40184c:	00e1      	lsls	r1, r4, #3
  40184e:	ea41 7155 	orr.w	r1, r1, r5, lsr #29
  401852:	f8cd 14c0 	str.w	r1, [sp, #1216]	; 0x4c0

00401856 <.LBE545>:
  401856:	f50d 6397 	add.w	r3, sp, #1208	; 0x4b8
  40185a:	e9d3 0100 	ldrd	r0, r1, [r3]
  40185e:	f50d 6398 	add.w	r3, sp, #1216	; 0x4c0
  401862:	e9d3 2300 	ldrd	r2, r3, [r3]
  401866:	4050      	eors	r0, r2
  401868:	4059      	eors	r1, r3
  40186a:	09a4      	lsrs	r4, r4, #6
  40186c:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40186e:	ea44 6485 	orr.w	r4, r4, r5, lsl #26
  401872:	9456      	str	r4, [sp, #344]	; 0x158
  401874:	09ac      	lsrs	r4, r5, #6
  401876:	9457      	str	r4, [sp, #348]	; 0x15c
  401878:	ab56      	add	r3, sp, #344	; 0x158
  40187a:	e9d3 4500 	ldrd	r4, r5, [r3]
  40187e:	4044      	eors	r4, r0
  401880:	404d      	eors	r5, r1
  401882:	4620      	mov	r0, r4
  401884:	e9dd 3412 	ldrd	r3, r4, [sp, #72]	; 0x48
  401888:	181b      	adds	r3, r3, r0
  40188a:	416c      	adcs	r4, r5
  40188c:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
  401890:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  401894:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  401898:	1912      	adds	r2, r2, r4
  40189a:	416b      	adcs	r3, r5
  40189c:	4614      	mov	r4, r2
  40189e:	461d      	mov	r5, r3
  4018a0:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  4018a4:	1912      	adds	r2, r2, r4
  4018a6:	416b      	adcs	r3, r5
  4018a8:	4610      	mov	r0, r2
  4018aa:	4619      	mov	r1, r3
  4018ac:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  4018b0:	e9cd 012a 	strd	r0, r1, [sp, #168]	; 0xa8
  4018b4:	1880      	adds	r0, r0, r2
  4018b6:	4159      	adcs	r1, r3
  4018b8:	4602      	mov	r2, r0
  4018ba:	460b      	mov	r3, r1
  4018bc:	e9cd 2304 	strd	r2, r3, [sp, #16]

004018c0 <.LBB547>:
  4018c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4018c4:	0f03      	lsrs	r3, r0, #28
  4018c6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  4018ca:	f8cd 34c8 	str.w	r3, [sp, #1224]	; 0x4c8
  4018ce:	0f0b      	lsrs	r3, r1, #28
  4018d0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  4018d4:	f8cd 34cc 	str.w	r3, [sp, #1228]	; 0x4cc

004018d8 <.LBB549>:
  4018d8:	078b      	lsls	r3, r1, #30
  4018da:	ea43 0390 	orr.w	r3, r3, r0, lsr #2
  4018de:	f8cd 34d4 	str.w	r3, [sp, #1236]	; 0x4d4
  4018e2:	0783      	lsls	r3, r0, #30
  4018e4:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  4018e8:	f8cd 34d0 	str.w	r3, [sp, #1232]	; 0x4d0

004018ec <.LBE549>:
  4018ec:	f50d 6399 	add.w	r3, sp, #1224	; 0x4c8
  4018f0:	e9d3 3400 	ldrd	r3, r4, [r3]
  4018f4:	f50d 629a 	add.w	r2, sp, #1232	; 0x4d0
  4018f8:	e9d2 1200 	ldrd	r1, r2, [r2]
  4018fc:	404b      	eors	r3, r1
  4018fe:	4054      	eors	r4, r2
  401900:	461a      	mov	r2, r3
  401902:	4623      	mov	r3, r4

00401904 <.LBB551>:
  401904:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
  401908:	0669      	lsls	r1, r5, #25
  40190a:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  40190e:	f8cd 14dc 	str.w	r1, [sp, #1244]	; 0x4dc
  401912:	0661      	lsls	r1, r4, #25
  401914:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  401918:	f8cd 14d8 	str.w	r1, [sp, #1240]	; 0x4d8

0040191c <.LBE551>:
  40191c:	f50d 619b 	add.w	r1, sp, #1240	; 0x4d8
  401920:	e9d1 0100 	ldrd	r0, r1, [r1]
  401924:	4050      	eors	r0, r2
  401926:	4059      	eors	r1, r3
  401928:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  40192c:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  401930:	4322      	orrs	r2, r4
  401932:	432b      	orrs	r3, r5
  401934:	ea02 0208 	and.w	r2, r2, r8
  401938:	ea03 0309 	and.w	r3, r3, r9
  40193c:	e9cd 232e 	strd	r2, r3, [sp, #184]	; 0xb8
  401940:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
  401944:	4623      	mov	r3, r4
  401946:	4019      	ands	r1, r3
  401948:	402a      	ands	r2, r5
  40194a:	4608      	mov	r0, r1
  40194c:	e9dd 452e 	ldrd	r4, r5, [sp, #184]	; 0xb8
  401950:	4304      	orrs	r4, r0
  401952:	4315      	orrs	r5, r2
  401954:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
  401958:	1912      	adds	r2, r2, r4
  40195a:	416b      	adcs	r3, r5
  40195c:	4619      	mov	r1, r3
  40195e:	e9dd 342a 	ldrd	r3, r4, [sp, #168]	; 0xa8
  401962:	189b      	adds	r3, r3, r2
  401964:	414c      	adcs	r4, r1
  401966:	e9cd 342a 	strd	r3, r4, [sp, #168]	; 0xa8

0040196a <.LBB553>:
  40196a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  40196e:	0ba3      	lsrs	r3, r4, #14
  401970:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
  401974:	f8cd 34e0 	str.w	r3, [sp, #1248]	; 0x4e0
  401978:	0bab      	lsrs	r3, r5, #14
  40197a:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
  40197e:	f8cd 34e4 	str.w	r3, [sp, #1252]	; 0x4e4

00401982 <.LBB555>:
  401982:	0ca3      	lsrs	r3, r4, #18
  401984:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
  401988:	f8cd 34e8 	str.w	r3, [sp, #1256]	; 0x4e8
  40198c:	0cab      	lsrs	r3, r5, #18
  40198e:	ea43 3384 	orr.w	r3, r3, r4, lsl #14
  401992:	f8cd 34ec 	str.w	r3, [sp, #1260]	; 0x4ec

00401996 <.LBE555>:
  401996:	f50d 639c 	add.w	r3, sp, #1248	; 0x4e0
  40199a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40199e:	f50d 619d 	add.w	r1, sp, #1256	; 0x4e8
  4019a2:	e9d1 0100 	ldrd	r0, r1, [r1]
  4019a6:	4042      	eors	r2, r0
  4019a8:	404b      	eors	r3, r1

004019aa <.LBB557>:
  4019aa:	05e9      	lsls	r1, r5, #23
  4019ac:	ea41 2154 	orr.w	r1, r1, r4, lsr #9
  4019b0:	f8cd 14f4 	str.w	r1, [sp, #1268]	; 0x4f4
  4019b4:	05e1      	lsls	r1, r4, #23
  4019b6:	ea41 2155 	orr.w	r1, r1, r5, lsr #9
  4019ba:	f8cd 14f0 	str.w	r1, [sp, #1264]	; 0x4f0

004019be <.LBE557>:
  4019be:	f50d 619e 	add.w	r1, sp, #1264	; 0x4f0
  4019c2:	e9d1 0100 	ldrd	r0, r1, [r1]
  4019c6:	4050      	eors	r0, r2
  4019c8:	4059      	eors	r1, r3
  4019ca:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  4019ce:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
  4019d2:	ea80 030a 	eor.w	r3, r0, sl
  4019d6:	ea81 040b 	eor.w	r4, r1, fp
  4019da:	4625      	mov	r5, r4
  4019dc:	461c      	mov	r4, r3
  4019de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4019e2:	4022      	ands	r2, r4
  4019e4:	402b      	ands	r3, r5
  4019e6:	4614      	mov	r4, r2
  4019e8:	461d      	mov	r5, r3
  4019ea:	4602      	mov	r2, r0
  4019ec:	460b      	mov	r3, r1
  4019ee:	4062      	eors	r2, r4
  4019f0:	406b      	eors	r3, r5
  4019f2:	4614      	mov	r4, r2
  4019f4:	461d      	mov	r5, r3
  4019f6:	e9d6 2314 	ldrd	r2, r3, [r6, #80]	; 0x50
  4019fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4019fe:	1880      	adds	r0, r0, r2
  401a00:	4159      	adcs	r1, r3
  401a02:	1820      	adds	r0, r4, r0
  401a04:	eb45 0101 	adc.w	r1, r5, r1
  401a08:	e9cd 0102 	strd	r0, r1, [sp, #8]
  401a0c:	2f00      	cmp	r7, #0
  401a0e:	f000 8749 	beq.w	4028a4 <.LCFI3+0x78>

00401a12 <.LBB559>:
  401a12:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
  401a16:	0863      	lsrs	r3, r4, #1
  401a18:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
  401a1c:	f8cd 34f8 	str.w	r3, [sp, #1272]	; 0x4f8
  401a20:	086b      	lsrs	r3, r5, #1
  401a22:	ea43 73c4 	orr.w	r3, r3, r4, lsl #31
  401a26:	f8cd 34fc 	str.w	r3, [sp, #1276]	; 0x4fc

00401a2a <.LBB561>:
  401a2a:	0a23      	lsrs	r3, r4, #8
  401a2c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  401a30:	f8cd 3500 	str.w	r3, [sp, #1280]	; 0x500
  401a34:	0a2b      	lsrs	r3, r5, #8
  401a36:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  401a3a:	f8cd 3504 	str.w	r3, [sp, #1284]	; 0x504

00401a3e <.LBE561>:
  401a3e:	f50d 639f 	add.w	r3, sp, #1272	; 0x4f8
  401a42:	e9d3 2300 	ldrd	r2, r3, [r3]
  401a46:	f50d 61a0 	add.w	r1, sp, #1280	; 0x500
  401a4a:	e9d1 0100 	ldrd	r0, r1, [r1]
  401a4e:	4042      	eors	r2, r0
  401a50:	404b      	eors	r3, r1
  401a52:	09e1      	lsrs	r1, r4, #7
  401a54:	ea41 6145 	orr.w	r1, r1, r5, lsl #25
  401a58:	9158      	str	r1, [sp, #352]	; 0x160
  401a5a:	09e9      	lsrs	r1, r5, #7
  401a5c:	9159      	str	r1, [sp, #356]	; 0x164
  401a5e:	a958      	add	r1, sp, #352	; 0x160
  401a60:	e9d1 0100 	ldrd	r0, r1, [r1]
  401a64:	4050      	eors	r0, r2
  401a66:	4059      	eors	r1, r3
  401a68:	4602      	mov	r2, r0
  401a6a:	460b      	mov	r3, r1
  401a6c:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
  401a70:	1880      	adds	r0, r0, r2
  401a72:	4159      	adcs	r1, r3
  401a74:	4602      	mov	r2, r0
  401a76:	460b      	mov	r3, r1
  401a78:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  401a7c:	1880      	adds	r0, r0, r2
  401a7e:	4159      	adcs	r1, r3
  401a80:	e9cd 0124 	strd	r0, r1, [sp, #144]	; 0x90

00401a84 <.LBB563>:
  401a84:	e9dd 4500 	ldrd	r4, r5, [sp]
  401a88:	0ce1      	lsrs	r1, r4, #19
  401a8a:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
  401a8e:	f8cd 1508 	str.w	r1, [sp, #1288]	; 0x508
  401a92:	0ce9      	lsrs	r1, r5, #19
  401a94:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
  401a98:	f8cd 150c 	str.w	r1, [sp, #1292]	; 0x50c

00401a9c <.LBB565>:
  401a9c:	00e9      	lsls	r1, r5, #3
  401a9e:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
  401aa2:	f8cd 1514 	str.w	r1, [sp, #1300]	; 0x514
  401aa6:	00e1      	lsls	r1, r4, #3
  401aa8:	ea41 7155 	orr.w	r1, r1, r5, lsr #29
  401aac:	f8cd 1510 	str.w	r1, [sp, #1296]	; 0x510

00401ab0 <.LBE565>:
  401ab0:	f50d 63a1 	add.w	r3, sp, #1288	; 0x508
  401ab4:	e9d3 0100 	ldrd	r0, r1, [r3]
  401ab8:	f50d 63a2 	add.w	r3, sp, #1296	; 0x510
  401abc:	e9d3 2300 	ldrd	r2, r3, [r3]
  401ac0:	4050      	eors	r0, r2
  401ac2:	4059      	eors	r1, r3
  401ac4:	09a4      	lsrs	r4, r4, #6
  401ac6:	9d01      	ldr	r5, [sp, #4]
  401ac8:	ea44 6485 	orr.w	r4, r4, r5, lsl #26
  401acc:	945a      	str	r4, [sp, #360]	; 0x168
  401ace:	09ac      	lsrs	r4, r5, #6
  401ad0:	945b      	str	r4, [sp, #364]	; 0x16c
  401ad2:	ab5a      	add	r3, sp, #360	; 0x168
  401ad4:	e9d3 4500 	ldrd	r4, r5, [r3]
  401ad8:	4044      	eors	r4, r0
  401ada:	404d      	eors	r5, r1
  401adc:	4620      	mov	r0, r4
  401ade:	e9dd 3424 	ldrd	r3, r4, [sp, #144]	; 0x90
  401ae2:	181b      	adds	r3, r3, r0
  401ae4:	416c      	adcs	r4, r5
  401ae6:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
  401aea:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  401aee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401af2:	1912      	adds	r2, r2, r4
  401af4:	416b      	adcs	r3, r5
  401af6:	4614      	mov	r4, r2
  401af8:	461d      	mov	r5, r3
  401afa:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
  401afe:	1912      	adds	r2, r2, r4
  401b00:	416b      	adcs	r3, r5
  401b02:	461c      	mov	r4, r3
  401b04:	4613      	mov	r3, r2
  401b06:	e9cd 3402 	strd	r3, r4, [sp, #8]
  401b0a:	eb12 0208 	adds.w	r2, r2, r8
  401b0e:	eb44 0309 	adc.w	r3, r4, r9
  401b12:	4690      	mov	r8, r2
  401b14:	4699      	mov	r9, r3

00401b16 <.LBB567>:
  401b16:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
  401b1a:	0f23      	lsrs	r3, r4, #28
  401b1c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  401b20:	f8cd 3518 	str.w	r3, [sp, #1304]	; 0x518
  401b24:	0f2b      	lsrs	r3, r5, #28
  401b26:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  401b2a:	f8cd 351c 	str.w	r3, [sp, #1308]	; 0x51c

00401b2e <.LBB569>:
  401b2e:	07ab      	lsls	r3, r5, #30
  401b30:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  401b34:	f8cd 3524 	str.w	r3, [sp, #1316]	; 0x524
  401b38:	07a3      	lsls	r3, r4, #30
  401b3a:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  401b3e:	f8cd 3520 	str.w	r3, [sp, #1312]	; 0x520

00401b42 <.LBE569>:
  401b42:	f50d 63a3 	add.w	r3, sp, #1304	; 0x518
  401b46:	e9d3 2300 	ldrd	r2, r3, [r3]
  401b4a:	f50d 61a4 	add.w	r1, sp, #1312	; 0x520
  401b4e:	e9d1 0100 	ldrd	r0, r1, [r1]
  401b52:	4042      	eors	r2, r0
  401b54:	404b      	eors	r3, r1

00401b56 <.LBB571>:
  401b56:	0669      	lsls	r1, r5, #25
  401b58:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  401b5c:	f8cd 152c 	str.w	r1, [sp, #1324]	; 0x52c
  401b60:	0661      	lsls	r1, r4, #25
  401b62:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  401b66:	f8cd 1528 	str.w	r1, [sp, #1320]	; 0x528

00401b6a <.LBE571>:
  401b6a:	f50d 61a5 	add.w	r1, sp, #1320	; 0x528
  401b6e:	e9d1 0100 	ldrd	r0, r1, [r1]
  401b72:	4050      	eors	r0, r2
  401b74:	4059      	eors	r1, r3
  401b76:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  401b7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  401b7e:	4322      	orrs	r2, r4
  401b80:	432b      	orrs	r3, r5
  401b82:	4610      	mov	r0, r2
  401b84:	4619      	mov	r1, r3
  401b86:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  401b8a:	4002      	ands	r2, r0
  401b8c:	400b      	ands	r3, r1
  401b8e:	4610      	mov	r0, r2
  401b90:	4619      	mov	r1, r3
  401b92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  401b96:	4022      	ands	r2, r4
  401b98:	402b      	ands	r3, r5
  401b9a:	4302      	orrs	r2, r0
  401b9c:	430b      	orrs	r3, r1
  401b9e:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  401ba2:	18a4      	adds	r4, r4, r2
  401ba4:	415d      	adcs	r5, r3
  401ba6:	4620      	mov	r0, r4
  401ba8:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
  401bac:	181b      	adds	r3, r3, r0
  401bae:	416c      	adcs	r4, r5
  401bb0:	e9cd 3402 	strd	r3, r4, [sp, #8]

00401bb4 <.LBB573>:
  401bb4:	ea4f 3398 	mov.w	r3, r8, lsr #14
  401bb8:	ea43 4389 	orr.w	r3, r3, r9, lsl #18
  401bbc:	f8cd 3530 	str.w	r3, [sp, #1328]	; 0x530
  401bc0:	ea4f 3399 	mov.w	r3, r9, lsr #14
  401bc4:	ea43 4388 	orr.w	r3, r3, r8, lsl #18
  401bc8:	f8cd 3534 	str.w	r3, [sp, #1332]	; 0x534

00401bcc <.LBB575>:
  401bcc:	ea4f 4398 	mov.w	r3, r8, lsr #18
  401bd0:	ea43 3389 	orr.w	r3, r3, r9, lsl #14
  401bd4:	f8cd 3538 	str.w	r3, [sp, #1336]	; 0x538
  401bd8:	ea4f 4399 	mov.w	r3, r9, lsr #18
  401bdc:	ea43 3388 	orr.w	r3, r3, r8, lsl #14
  401be0:	f8cd 353c 	str.w	r3, [sp, #1340]	; 0x53c

00401be4 <.LBE575>:
  401be4:	f50d 63a6 	add.w	r3, sp, #1328	; 0x530
  401be8:	e9d3 2300 	ldrd	r2, r3, [r3]
  401bec:	f50d 61a7 	add.w	r1, sp, #1336	; 0x538
  401bf0:	e9d1 0100 	ldrd	r0, r1, [r1]
  401bf4:	4042      	eors	r2, r0
  401bf6:	404b      	eors	r3, r1

00401bf8 <.LBB577>:
  401bf8:	ea4f 51c9 	mov.w	r1, r9, lsl #23
  401bfc:	ea41 2158 	orr.w	r1, r1, r8, lsr #9
  401c00:	f8cd 1544 	str.w	r1, [sp, #1348]	; 0x544
  401c04:	ea4f 51c8 	mov.w	r1, r8, lsl #23
  401c08:	ea41 2159 	orr.w	r1, r1, r9, lsr #9
  401c0c:	f8cd 1540 	str.w	r1, [sp, #1344]	; 0x540

00401c10 <.LBE577>:
  401c10:	f50d 61a8 	add.w	r1, sp, #1344	; 0x540
  401c14:	e9d1 0100 	ldrd	r0, r1, [r1]
  401c18:	4050      	eors	r0, r2
  401c1a:	4059      	eors	r1, r3
  401c1c:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  401c20:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  401c24:	ea84 040a 	eor.w	r4, r4, sl
  401c28:	ea85 050b 	eor.w	r5, r5, fp
  401c2c:	ea04 0408 	and.w	r4, r4, r8
  401c30:	ea05 0509 	and.w	r5, r5, r9
  401c34:	ea84 040a 	eor.w	r4, r4, sl
  401c38:	ea85 050b 	eor.w	r5, r5, fp
  401c3c:	e9d6 2316 	ldrd	r2, r3, [r6, #88]	; 0x58
  401c40:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
  401c44:	1880      	adds	r0, r0, r2
  401c46:	4159      	adcs	r1, r3
  401c48:	1820      	adds	r0, r4, r0
  401c4a:	eb45 0101 	adc.w	r1, r5, r1
  401c4e:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  401c52:	2f00      	cmp	r7, #0
  401c54:	f000 862c 	beq.w	4028b0 <.LCFI3+0x84>

00401c58 <.LBB579>:
  401c58:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  401c5c:	0863      	lsrs	r3, r4, #1
  401c5e:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
  401c62:	f8cd 3548 	str.w	r3, [sp, #1352]	; 0x548
  401c66:	086b      	lsrs	r3, r5, #1
  401c68:	ea43 73c4 	orr.w	r3, r3, r4, lsl #31
  401c6c:	f8cd 354c 	str.w	r3, [sp, #1356]	; 0x54c

00401c70 <.LBB581>:
  401c70:	0a23      	lsrs	r3, r4, #8
  401c72:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  401c76:	f8cd 3550 	str.w	r3, [sp, #1360]	; 0x550
  401c7a:	0a2b      	lsrs	r3, r5, #8
  401c7c:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  401c80:	f8cd 3554 	str.w	r3, [sp, #1364]	; 0x554

00401c84 <.LBE581>:
  401c84:	f50d 63a9 	add.w	r3, sp, #1352	; 0x548
  401c88:	e9d3 2300 	ldrd	r2, r3, [r3]
  401c8c:	f50d 61aa 	add.w	r1, sp, #1360	; 0x550
  401c90:	e9d1 0100 	ldrd	r0, r1, [r1]
  401c94:	4042      	eors	r2, r0
  401c96:	404b      	eors	r3, r1
  401c98:	09e1      	lsrs	r1, r4, #7
  401c9a:	ea41 6145 	orr.w	r1, r1, r5, lsl #25
  401c9e:	915c      	str	r1, [sp, #368]	; 0x170
  401ca0:	09e9      	lsrs	r1, r5, #7
  401ca2:	915d      	str	r1, [sp, #372]	; 0x174
  401ca4:	a95c      	add	r1, sp, #368	; 0x170
  401ca6:	e9d1 0100 	ldrd	r0, r1, [r1]
  401caa:	4050      	eors	r0, r2
  401cac:	4059      	eors	r1, r3
  401cae:	4602      	mov	r2, r0
  401cb0:	460b      	mov	r3, r1
  401cb2:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
  401cb6:	1880      	adds	r0, r0, r2
  401cb8:	4159      	adcs	r1, r3
  401cba:	4602      	mov	r2, r0
  401cbc:	460b      	mov	r3, r1
  401cbe:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
  401cc2:	1880      	adds	r0, r0, r2
  401cc4:	4159      	adcs	r1, r3
  401cc6:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50

00401cca <.LBB583>:
  401cca:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
  401cce:	0ce1      	lsrs	r1, r4, #19
  401cd0:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
  401cd4:	f8cd 1558 	str.w	r1, [sp, #1368]	; 0x558
  401cd8:	0ce9      	lsrs	r1, r5, #19
  401cda:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
  401cde:	f8cd 155c 	str.w	r1, [sp, #1372]	; 0x55c

00401ce2 <.LBB585>:
  401ce2:	00e9      	lsls	r1, r5, #3
  401ce4:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
  401ce8:	f8cd 1564 	str.w	r1, [sp, #1380]	; 0x564
  401cec:	00e1      	lsls	r1, r4, #3
  401cee:	ea41 7155 	orr.w	r1, r1, r5, lsr #29
  401cf2:	f8cd 1560 	str.w	r1, [sp, #1376]	; 0x560

00401cf6 <.LBE585>:
  401cf6:	f50d 63ab 	add.w	r3, sp, #1368	; 0x558
  401cfa:	e9d3 0100 	ldrd	r0, r1, [r3]
  401cfe:	f50d 63ac 	add.w	r3, sp, #1376	; 0x560
  401d02:	e9d3 2300 	ldrd	r2, r3, [r3]
  401d06:	4050      	eors	r0, r2
  401d08:	4059      	eors	r1, r3
  401d0a:	09a4      	lsrs	r4, r4, #6
  401d0c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  401d0e:	ea44 6485 	orr.w	r4, r4, r5, lsl #26
  401d12:	945e      	str	r4, [sp, #376]	; 0x178
  401d14:	09ac      	lsrs	r4, r5, #6
  401d16:	945f      	str	r4, [sp, #380]	; 0x17c
  401d18:	ab5e      	add	r3, sp, #376	; 0x178
  401d1a:	e9d3 4500 	ldrd	r4, r5, [r3]
  401d1e:	4044      	eors	r4, r0
  401d20:	404d      	eors	r5, r1
  401d22:	4620      	mov	r0, r4
  401d24:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
  401d28:	181b      	adds	r3, r3, r0
  401d2a:	416c      	adcs	r4, r5
  401d2c:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
  401d30:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  401d34:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  401d38:	1912      	adds	r2, r2, r4
  401d3a:	416b      	adcs	r3, r5
  401d3c:	4614      	mov	r4, r2
  401d3e:	461d      	mov	r5, r3
  401d40:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
  401d44:	1912      	adds	r2, r2, r4
  401d46:	416b      	adcs	r3, r5
  401d48:	4610      	mov	r0, r2
  401d4a:	4619      	mov	r1, r3
  401d4c:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  401d50:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  401d54:	1880      	adds	r0, r0, r2
  401d56:	4159      	adcs	r1, r3
  401d58:	4602      	mov	r2, r0
  401d5a:	460b      	mov	r3, r1
  401d5c:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68

00401d60 <.LBB587>:
  401d60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  401d64:	0f03      	lsrs	r3, r0, #28
  401d66:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  401d6a:	f8cd 3568 	str.w	r3, [sp, #1384]	; 0x568
  401d6e:	0f0b      	lsrs	r3, r1, #28
  401d70:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  401d74:	f8cd 356c 	str.w	r3, [sp, #1388]	; 0x56c

00401d78 <.LBB589>:
  401d78:	078b      	lsls	r3, r1, #30
  401d7a:	ea43 0390 	orr.w	r3, r3, r0, lsr #2
  401d7e:	f8cd 3574 	str.w	r3, [sp, #1396]	; 0x574
  401d82:	0783      	lsls	r3, r0, #30
  401d84:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  401d88:	f8cd 3570 	str.w	r3, [sp, #1392]	; 0x570

00401d8c <.LBE589>:
  401d8c:	f50d 63ad 	add.w	r3, sp, #1384	; 0x568
  401d90:	e9d3 3400 	ldrd	r3, r4, [r3]
  401d94:	f50d 62ae 	add.w	r2, sp, #1392	; 0x570
  401d98:	e9d2 1200 	ldrd	r1, r2, [r2]
  401d9c:	404b      	eors	r3, r1
  401d9e:	4054      	eors	r4, r2
  401da0:	461a      	mov	r2, r3
  401da2:	4623      	mov	r3, r4

00401da4 <.LBB591>:
  401da4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  401da8:	0669      	lsls	r1, r5, #25
  401daa:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  401dae:	f8cd 157c 	str.w	r1, [sp, #1404]	; 0x57c
  401db2:	0661      	lsls	r1, r4, #25
  401db4:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  401db8:	f8cd 1578 	str.w	r1, [sp, #1400]	; 0x578

00401dbc <.LBE591>:
  401dbc:	f50d 61af 	add.w	r1, sp, #1400	; 0x578
  401dc0:	e9d1 0100 	ldrd	r0, r1, [r1]
  401dc4:	4050      	eors	r0, r2
  401dc6:	4059      	eors	r1, r3
  401dc8:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  401dcc:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  401dd0:	4322      	orrs	r2, r4
  401dd2:	432b      	orrs	r3, r5
  401dd4:	4619      	mov	r1, r3
  401dd6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
  401dda:	4013      	ands	r3, r2
  401ddc:	400c      	ands	r4, r1
  401dde:	e9cd 342e 	strd	r3, r4, [sp, #184]	; 0xb8
  401de2:	e9dd 122a 	ldrd	r1, r2, [sp, #168]	; 0xa8
  401de6:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
  401dea:	4019      	ands	r1, r3
  401dec:	4022      	ands	r2, r4
  401dee:	4608      	mov	r0, r1
  401df0:	e9dd 452e 	ldrd	r4, r5, [sp, #184]	; 0xb8
  401df4:	4304      	orrs	r4, r0
  401df6:	4315      	orrs	r5, r2
  401df8:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
  401dfc:	1912      	adds	r2, r2, r4
  401dfe:	416b      	adcs	r3, r5
  401e00:	4619      	mov	r1, r3
  401e02:	e9dd 3418 	ldrd	r3, r4, [sp, #96]	; 0x60
  401e06:	189b      	adds	r3, r3, r2
  401e08:	414c      	adcs	r4, r1
  401e0a:	e9cd 342c 	strd	r3, r4, [sp, #176]	; 0xb0

00401e0e <.LBB593>:
  401e0e:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
  401e12:	0ba3      	lsrs	r3, r4, #14
  401e14:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
  401e18:	f8cd 3580 	str.w	r3, [sp, #1408]	; 0x580
  401e1c:	0bab      	lsrs	r3, r5, #14
  401e1e:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
  401e22:	f8cd 3584 	str.w	r3, [sp, #1412]	; 0x584

00401e26 <.LBB595>:
  401e26:	0ca3      	lsrs	r3, r4, #18
  401e28:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
  401e2c:	f8cd 3588 	str.w	r3, [sp, #1416]	; 0x588
  401e30:	0cab      	lsrs	r3, r5, #18
  401e32:	ea43 3384 	orr.w	r3, r3, r4, lsl #14
  401e36:	f8cd 358c 	str.w	r3, [sp, #1420]	; 0x58c

00401e3a <.LBE595>:
        R(12); R(13); R(14); R(15);
  401e3a:	f50d 63b0 	add.w	r3, sp, #1408	; 0x580
  401e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
  401e42:	f50d 61b1 	add.w	r1, sp, #1416	; 0x588
  401e46:	e9d1 0100 	ldrd	r0, r1, [r1]
  401e4a:	4042      	eors	r2, r0
  401e4c:	404b      	eors	r3, r1

00401e4e <.LBB597>:
  401e4e:	05e9      	lsls	r1, r5, #23
  401e50:	ea41 2154 	orr.w	r1, r1, r4, lsr #9
  401e54:	f8cd 1594 	str.w	r1, [sp, #1428]	; 0x594
  401e58:	05e1      	lsls	r1, r4, #23
  401e5a:	ea41 2155 	orr.w	r1, r1, r5, lsr #9
  401e5e:	f8cd 1590 	str.w	r1, [sp, #1424]	; 0x590

00401e62 <.LBE597>:
  401e62:	f50d 61b2 	add.w	r1, sp, #1424	; 0x590
  401e66:	e9d1 0100 	ldrd	r0, r1, [r1]
  401e6a:	4050      	eors	r0, r2
  401e6c:	4059      	eors	r1, r3
  401e6e:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  401e72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  401e76:	ea80 0308 	eor.w	r3, r0, r8
  401e7a:	ea81 0409 	eor.w	r4, r1, r9
  401e7e:	4625      	mov	r5, r4
  401e80:	461c      	mov	r4, r3
  401e82:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  401e86:	4022      	ands	r2, r4
  401e88:	402b      	ands	r3, r5
  401e8a:	4614      	mov	r4, r2
  401e8c:	461d      	mov	r5, r3
  401e8e:	4602      	mov	r2, r0
  401e90:	460b      	mov	r3, r1
  401e92:	4062      	eors	r2, r4
  401e94:	406b      	eors	r3, r5
  401e96:	4614      	mov	r4, r2
  401e98:	461d      	mov	r5, r3
  401e9a:	e9d6 2318 	ldrd	r2, r3, [r6, #96]	; 0x60
  401e9e:	eb12 020a 	adds.w	r2, r2, sl
  401ea2:	eb43 030b 	adc.w	r3, r3, fp
  401ea6:	18a4      	adds	r4, r4, r2
  401ea8:	415d      	adcs	r5, r3
  401eaa:	2f00      	cmp	r7, #0
  401eac:	f000 8506 	beq.w	4028bc <.LCFI3+0x90>

00401eb0 <.LBB599>:
  401eb0:	e9dd ab26 	ldrd	sl, fp, [sp, #152]	; 0x98
  401eb4:	4653      	mov	r3, sl
  401eb6:	085b      	lsrs	r3, r3, #1
  401eb8:	465a      	mov	r2, fp
  401eba:	ea43 73cb 	orr.w	r3, r3, fp, lsl #31
  401ebe:	f8cd 3598 	str.w	r3, [sp, #1432]	; 0x598
  401ec2:	0853      	lsrs	r3, r2, #1
  401ec4:	4652      	mov	r2, sl
  401ec6:	ea43 73ca 	orr.w	r3, r3, sl, lsl #31
  401eca:	f8cd 359c 	str.w	r3, [sp, #1436]	; 0x59c

00401ece <.LBB601>:
  401ece:	0a13      	lsrs	r3, r2, #8
  401ed0:	465a      	mov	r2, fp
  401ed2:	ea43 630b 	orr.w	r3, r3, fp, lsl #24
  401ed6:	f8cd 35a0 	str.w	r3, [sp, #1440]	; 0x5a0
  401eda:	0a13      	lsrs	r3, r2, #8
  401edc:	ea43 630a 	orr.w	r3, r3, sl, lsl #24
  401ee0:	f8cd 35a4 	str.w	r3, [sp, #1444]	; 0x5a4

00401ee4 <.LBE601>:
  401ee4:	f50d 63b3 	add.w	r3, sp, #1432	; 0x598
  401ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
  401eec:	f50d 61b4 	add.w	r1, sp, #1440	; 0x5a0
  401ef0:	e9d1 0100 	ldrd	r0, r1, [r1]
  401ef4:	4042      	eors	r2, r0
  401ef6:	404b      	eors	r3, r1
  401ef8:	4651      	mov	r1, sl
  401efa:	09c9      	lsrs	r1, r1, #7
  401efc:	4658      	mov	r0, fp
  401efe:	ea41 614b 	orr.w	r1, r1, fp, lsl #25
  401f02:	9160      	str	r1, [sp, #384]	; 0x180
  401f04:	09c1      	lsrs	r1, r0, #7
  401f06:	9161      	str	r1, [sp, #388]	; 0x184
  401f08:	a960      	add	r1, sp, #384	; 0x180
  401f0a:	e9d1 0100 	ldrd	r0, r1, [r1]
  401f0e:	4050      	eors	r0, r2
  401f10:	4059      	eors	r1, r3
  401f12:	4602      	mov	r2, r0
  401f14:	460b      	mov	r3, r1
  401f16:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  401f1a:	1880      	adds	r0, r0, r2
  401f1c:	4159      	adcs	r1, r3
  401f1e:	4602      	mov	r2, r0
  401f20:	460b      	mov	r3, r1
  401f22:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  401f26:	1880      	adds	r0, r0, r2
  401f28:	4159      	adcs	r1, r3
  401f2a:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58

00401f2e <.LBB603>:
  401f2e:	e9dd ab24 	ldrd	sl, fp, [sp, #144]	; 0x90
  401f32:	4651      	mov	r1, sl
  401f34:	0cc9      	lsrs	r1, r1, #19
  401f36:	4658      	mov	r0, fp
  401f38:	ea41 314b 	orr.w	r1, r1, fp, lsl #13
  401f3c:	f8cd 15a8 	str.w	r1, [sp, #1448]	; 0x5a8
  401f40:	0cc1      	lsrs	r1, r0, #19
  401f42:	4650      	mov	r0, sl
  401f44:	ea41 314a 	orr.w	r1, r1, sl, lsl #13
  401f48:	f8cd 15ac 	str.w	r1, [sp, #1452]	; 0x5ac

00401f4c <.LBB605>:
  401f4c:	4659      	mov	r1, fp
  401f4e:	00c9      	lsls	r1, r1, #3
  401f50:	ea41 715a 	orr.w	r1, r1, sl, lsr #29
  401f54:	f8cd 15b4 	str.w	r1, [sp, #1460]	; 0x5b4
  401f58:	00c1      	lsls	r1, r0, #3
  401f5a:	ea41 715b 	orr.w	r1, r1, fp, lsr #29
  401f5e:	f8cd 15b0 	str.w	r1, [sp, #1456]	; 0x5b0

00401f62 <.LBE605>:
  401f62:	f50d 63b5 	add.w	r3, sp, #1448	; 0x5a8
  401f66:	e9d3 0100 	ldrd	r0, r1, [r3]
  401f6a:	f50d 63b6 	add.w	r3, sp, #1456	; 0x5b0
  401f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
  401f72:	4050      	eors	r0, r2
  401f74:	4059      	eors	r1, r3
  401f76:	4653      	mov	r3, sl
  401f78:	099b      	lsrs	r3, r3, #6
  401f7a:	465a      	mov	r2, fp
  401f7c:	ea43 638b 	orr.w	r3, r3, fp, lsl #26
  401f80:	9362      	str	r3, [sp, #392]	; 0x188
  401f82:	0993      	lsrs	r3, r2, #6
  401f84:	9363      	str	r3, [sp, #396]	; 0x18c
  401f86:	ab62      	add	r3, sp, #392	; 0x188
  401f88:	e9d3 2300 	ldrd	r2, r3, [r3]
  401f8c:	4042      	eors	r2, r0
  401f8e:	404b      	eors	r3, r1
  401f90:	4610      	mov	r0, r2
  401f92:	4619      	mov	r1, r3
  401f94:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  401f98:	1812      	adds	r2, r2, r0
  401f9a:	414b      	adcs	r3, r1
  401f9c:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  401fa0:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  401fa4:	1912      	adds	r2, r2, r4
  401fa6:	416b      	adcs	r3, r5
  401fa8:	e9dd ab16 	ldrd	sl, fp, [sp, #88]	; 0x58
  401fac:	eb1a 0a02 	adds.w	sl, sl, r2
  401fb0:	eb4b 0b03 	adc.w	fp, fp, r3
  401fb4:	4651      	mov	r1, sl
  401fb6:	465a      	mov	r2, fp
  401fb8:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
  401fbc:	e9cd 1218 	strd	r1, r2, [sp, #96]	; 0x60
  401fc0:	eb1a 0103 	adds.w	r1, sl, r3
  401fc4:	eb4b 0204 	adc.w	r2, fp, r4
  401fc8:	460b      	mov	r3, r1
  401fca:	4614      	mov	r4, r2
  401fcc:	e9cd 3406 	strd	r3, r4, [sp, #24]

00401fd0 <.LBB607>:
  401fd0:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  401fd4:	0f23      	lsrs	r3, r4, #28
  401fd6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  401fda:	f8cd 35b8 	str.w	r3, [sp, #1464]	; 0x5b8
  401fde:	0f2b      	lsrs	r3, r5, #28
  401fe0:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  401fe4:	f8cd 35bc 	str.w	r3, [sp, #1468]	; 0x5bc

00401fe8 <.LBB609>:
  401fe8:	07ab      	lsls	r3, r5, #30
  401fea:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  401fee:	f8cd 35c4 	str.w	r3, [sp, #1476]	; 0x5c4
  401ff2:	07a3      	lsls	r3, r4, #30
  401ff4:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  401ff8:	f8cd 35c0 	str.w	r3, [sp, #1472]	; 0x5c0

00401ffc <.LBE609>:
  401ffc:	f50d 63b7 	add.w	r3, sp, #1464	; 0x5b8
  402000:	e9d3 2300 	ldrd	r2, r3, [r3]
  402004:	f50d 61b8 	add.w	r1, sp, #1472	; 0x5c0
  402008:	e9d1 ab00 	ldrd	sl, fp, [r1]
  40200c:	ea82 020a 	eor.w	r2, r2, sl
  402010:	ea83 030b 	eor.w	r3, r3, fp

00402014 <.LBB611>:
  402014:	0669      	lsls	r1, r5, #25
  402016:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  40201a:	f8cd 15cc 	str.w	r1, [sp, #1484]	; 0x5cc
  40201e:	0661      	lsls	r1, r4, #25
  402020:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  402024:	f8cd 15c8 	str.w	r1, [sp, #1480]	; 0x5c8

00402028 <.LBE611>:
  402028:	f50d 61b9 	add.w	r1, sp, #1480	; 0x5c8
  40202c:	e9d1 0100 	ldrd	r0, r1, [r1]
  402030:	4050      	eors	r0, r2
  402032:	4059      	eors	r1, r3
  402034:	e9cd 012e 	strd	r0, r1, [sp, #184]	; 0xb8
  402038:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40203c:	4610      	mov	r0, r2
  40203e:	4619      	mov	r1, r3
  402040:	4320      	orrs	r0, r4
  402042:	4329      	orrs	r1, r5
  402044:	e9dd ab2a 	ldrd	sl, fp, [sp, #168]	; 0xa8
  402048:	ea0a 0a00 	and.w	sl, sl, r0
  40204c:	ea0b 0b01 	and.w	fp, fp, r1
  402050:	4650      	mov	r0, sl
  402052:	4659      	mov	r1, fp
  402054:	4022      	ands	r2, r4
  402056:	402b      	ands	r3, r5
  402058:	4310      	orrs	r0, r2
  40205a:	4319      	orrs	r1, r3
  40205c:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
  402060:	181b      	adds	r3, r3, r0
  402062:	414c      	adcs	r4, r1
  402064:	e9dd ab18 	ldrd	sl, fp, [sp, #96]	; 0x60
  402068:	eb1a 0a03 	adds.w	sl, sl, r3
  40206c:	eb4b 0b04 	adc.w	fp, fp, r4

00402070 <.LBB613>:
  402070:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  402074:	0b83      	lsrs	r3, r0, #14
  402076:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  40207a:	f8cd 35d0 	str.w	r3, [sp, #1488]	; 0x5d0
  40207e:	0b8b      	lsrs	r3, r1, #14
  402080:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
  402084:	f8cd 35d4 	str.w	r3, [sp, #1492]	; 0x5d4

00402088 <.LBB615>:
  402088:	0c83      	lsrs	r3, r0, #18
  40208a:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
  40208e:	f8cd 35d8 	str.w	r3, [sp, #1496]	; 0x5d8
  402092:	0c8b      	lsrs	r3, r1, #18
  402094:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
  402098:	f8cd 35dc 	str.w	r3, [sp, #1500]	; 0x5dc

0040209c <.LBE615>:
  40209c:	f50d 63ba 	add.w	r3, sp, #1488	; 0x5d0
  4020a0:	e9d3 4500 	ldrd	r4, r5, [r3]
  4020a4:	f50d 63bb 	add.w	r3, sp, #1496	; 0x5d8
  4020a8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4020ac:	4054      	eors	r4, r2
  4020ae:	405d      	eors	r5, r3

004020b0 <.LBB617>:
  4020b0:	05c9      	lsls	r1, r1, #23
  4020b2:	9b06      	ldr	r3, [sp, #24]
  4020b4:	ea41 2353 	orr.w	r3, r1, r3, lsr #9
  4020b8:	f8cd 35e4 	str.w	r3, [sp, #1508]	; 0x5e4
  4020bc:	9b06      	ldr	r3, [sp, #24]
  4020be:	05d9      	lsls	r1, r3, #23
  4020c0:	9b07      	ldr	r3, [sp, #28]
  4020c2:	ea41 2353 	orr.w	r3, r1, r3, lsr #9
  4020c6:	f8cd 35e0 	str.w	r3, [sp, #1504]	; 0x5e0

004020ca <.LBE617>:
  4020ca:	f50d 63bc 	add.w	r3, sp, #1504	; 0x5e0
  4020ce:	e9d3 2300 	ldrd	r2, r3, [r3]
  4020d2:	4062      	eors	r2, r4
  4020d4:	406b      	eors	r3, r5
  4020d6:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  4020da:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  4020de:	ea80 0008 	eor.w	r0, r0, r8
  4020e2:	ea81 0109 	eor.w	r1, r1, r9
  4020e6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
  4020ea:	4003      	ands	r3, r0
  4020ec:	400c      	ands	r4, r1
  4020ee:	ea83 0008 	eor.w	r0, r3, r8
  4020f2:	ea84 0109 	eor.w	r1, r4, r9
  4020f6:	e9d6 231a 	ldrd	r2, r3, [r6, #104]	; 0x68
  4020fa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  4020fe:	18a4      	adds	r4, r4, r2
  402100:	415d      	adcs	r5, r3
  402102:	1904      	adds	r4, r0, r4
  402104:	eb41 0505 	adc.w	r5, r1, r5
  402108:	e9cd 4504 	strd	r4, r5, [sp, #16]
  40210c:	2f00      	cmp	r7, #0
  40210e:	f000 83db 	beq.w	4028c8 <.LCFI3+0x9c>

00402112 <.LBB619>:
  402112:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
  402116:	0863      	lsrs	r3, r4, #1
  402118:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
  40211c:	f8cd 35e8 	str.w	r3, [sp, #1512]	; 0x5e8
  402120:	086b      	lsrs	r3, r5, #1
  402122:	ea43 73c4 	orr.w	r3, r3, r4, lsl #31
  402126:	f8cd 35ec 	str.w	r3, [sp, #1516]	; 0x5ec

0040212a <.LBB621>:
  40212a:	0a23      	lsrs	r3, r4, #8
  40212c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  402130:	f8cd 35f0 	str.w	r3, [sp, #1520]	; 0x5f0
  402134:	0a2b      	lsrs	r3, r5, #8
  402136:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  40213a:	f8cd 35f4 	str.w	r3, [sp, #1524]	; 0x5f4

0040213e <.LBE621>:
  40213e:	f50d 63bd 	add.w	r3, sp, #1512	; 0x5e8
  402142:	e9d3 2300 	ldrd	r2, r3, [r3]
  402146:	f50d 61be 	add.w	r1, sp, #1520	; 0x5f0
  40214a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40214e:	4042      	eors	r2, r0
  402150:	404b      	eors	r3, r1
  402152:	09e1      	lsrs	r1, r4, #7
  402154:	ea41 6145 	orr.w	r1, r1, r5, lsl #25
  402158:	9164      	str	r1, [sp, #400]	; 0x190
  40215a:	09e9      	lsrs	r1, r5, #7
  40215c:	9165      	str	r1, [sp, #404]	; 0x194
  40215e:	a964      	add	r1, sp, #400	; 0x190
  402160:	e9d1 0100 	ldrd	r0, r1, [r1]
  402164:	4050      	eors	r0, r2
  402166:	4059      	eors	r1, r3
  402168:	4602      	mov	r2, r0
  40216a:	460b      	mov	r3, r1
  40216c:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
  402170:	1880      	adds	r0, r0, r2
  402172:	4159      	adcs	r1, r3
  402174:	4602      	mov	r2, r0
  402176:	460b      	mov	r3, r1
  402178:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40217c:	1880      	adds	r0, r0, r2
  40217e:	4159      	adcs	r1, r3
  402180:	e9cd 0126 	strd	r0, r1, [sp, #152]	; 0x98

00402184 <.LBB623>:
  402184:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
  402188:	0ce1      	lsrs	r1, r4, #19
  40218a:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
  40218e:	f8cd 15f8 	str.w	r1, [sp, #1528]	; 0x5f8
  402192:	0ce9      	lsrs	r1, r5, #19
  402194:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
  402198:	f8cd 15fc 	str.w	r1, [sp, #1532]	; 0x5fc

0040219c <.LBB625>:
  40219c:	00e9      	lsls	r1, r5, #3
  40219e:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
  4021a2:	f8cd 1604 	str.w	r1, [sp, #1540]	; 0x604
  4021a6:	00e1      	lsls	r1, r4, #3
  4021a8:	ea41 7155 	orr.w	r1, r1, r5, lsr #29
  4021ac:	f8cd 1600 	str.w	r1, [sp, #1536]	; 0x600

004021b0 <.LBE625>:
  4021b0:	f50d 63bf 	add.w	r3, sp, #1528	; 0x5f8
  4021b4:	e9d3 0100 	ldrd	r0, r1, [r3]
  4021b8:	f50d 63c0 	add.w	r3, sp, #1536	; 0x600
  4021bc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4021c0:	4050      	eors	r0, r2
  4021c2:	4059      	eors	r1, r3
  4021c4:	09a4      	lsrs	r4, r4, #6
  4021c6:	9d15      	ldr	r5, [sp, #84]	; 0x54
  4021c8:	ea44 6485 	orr.w	r4, r4, r5, lsl #26
  4021cc:	9466      	str	r4, [sp, #408]	; 0x198
  4021ce:	09ac      	lsrs	r4, r5, #6
  4021d0:	9467      	str	r4, [sp, #412]	; 0x19c
  4021d2:	ab66      	add	r3, sp, #408	; 0x198
  4021d4:	e9d3 4500 	ldrd	r4, r5, [r3]
  4021d8:	4044      	eors	r4, r0
  4021da:	404d      	eors	r5, r1
  4021dc:	4620      	mov	r0, r4
  4021de:	e9dd 3426 	ldrd	r3, r4, [sp, #152]	; 0x98
  4021e2:	181b      	adds	r3, r3, r0
  4021e4:	416c      	adcs	r4, r5
  4021e6:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
  4021ea:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  4021ee:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  4021f2:	1912      	adds	r2, r2, r4
  4021f4:	416b      	adcs	r3, r5
  4021f6:	4614      	mov	r4, r2
  4021f8:	461d      	mov	r5, r3
  4021fa:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
  4021fe:	1912      	adds	r2, r2, r4
  402200:	416b      	adcs	r3, r5
  402202:	4610      	mov	r0, r2
  402204:	4619      	mov	r1, r3
  402206:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  40220a:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  40220e:	1880      	adds	r0, r0, r2
  402210:	4159      	adcs	r1, r3
  402212:	4602      	mov	r2, r0
  402214:	460b      	mov	r3, r1
  402216:	e9cd 2304 	strd	r2, r3, [sp, #16]

0040221a <.LBB627>:
  40221a:	ea4f 731a 	mov.w	r3, sl, lsr #28
  40221e:	ea43 130b 	orr.w	r3, r3, fp, lsl #4
  402222:	f8cd 3608 	str.w	r3, [sp, #1544]	; 0x608
  402226:	ea4f 731b 	mov.w	r3, fp, lsr #28
  40222a:	ea43 130a 	orr.w	r3, r3, sl, lsl #4
  40222e:	f8cd 360c 	str.w	r3, [sp, #1548]	; 0x60c

00402232 <.LBB629>:
  402232:	ea4f 738b 	mov.w	r3, fp, lsl #30
  402236:	ea43 039a 	orr.w	r3, r3, sl, lsr #2
  40223a:	f8cd 3614 	str.w	r3, [sp, #1556]	; 0x614
  40223e:	ea4f 738a 	mov.w	r3, sl, lsl #30
  402242:	ea43 039b 	orr.w	r3, r3, fp, lsr #2
  402246:	f8cd 3610 	str.w	r3, [sp, #1552]	; 0x610

0040224a <.LBE629>:
  40224a:	f50d 63c1 	add.w	r3, sp, #1544	; 0x608
  40224e:	e9d3 3400 	ldrd	r3, r4, [r3]
  402252:	f50d 62c2 	add.w	r2, sp, #1552	; 0x610
  402256:	e9d2 1200 	ldrd	r1, r2, [r2]
  40225a:	404b      	eors	r3, r1
  40225c:	4054      	eors	r4, r2
  40225e:	461a      	mov	r2, r3
  402260:	4623      	mov	r3, r4

00402262 <.LBB631>:
  402262:	ea4f 614b 	mov.w	r1, fp, lsl #25
  402266:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
  40226a:	f8cd 161c 	str.w	r1, [sp, #1564]	; 0x61c
  40226e:	ea4f 614a 	mov.w	r1, sl, lsl #25
  402272:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
  402276:	f8cd 1618 	str.w	r1, [sp, #1560]	; 0x618

0040227a <.LBE631>:
  40227a:	f50d 61c3 	add.w	r1, sp, #1560	; 0x618
  40227e:	e9d1 4500 	ldrd	r4, r5, [r1]
  402282:	4054      	eors	r4, r2
  402284:	405d      	eors	r5, r3
  402286:	e9cd 452a 	strd	r4, r5, [sp, #168]	; 0xa8
  40228a:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  40228e:	ea44 000a 	orr.w	r0, r4, sl
  402292:	ea45 010b 	orr.w	r1, r5, fp
  402296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40229a:	4002      	ands	r2, r0
  40229c:	400b      	ands	r3, r1
  40229e:	ea04 040a 	and.w	r4, r4, sl
  4022a2:	ea05 050b 	and.w	r5, r5, fp
  4022a6:	4314      	orrs	r4, r2
  4022a8:	431d      	orrs	r5, r3
  4022aa:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  4022ae:	1912      	adds	r2, r2, r4
  4022b0:	416b      	adcs	r3, r5
  4022b2:	4619      	mov	r1, r3
  4022b4:	e9dd 3418 	ldrd	r3, r4, [sp, #96]	; 0x60
  4022b8:	189b      	adds	r3, r3, r2
  4022ba:	414c      	adcs	r4, r1
  4022bc:	e9cd 342a 	strd	r3, r4, [sp, #168]	; 0xa8

004022c0 <.LBB633>:
  4022c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4022c4:	0b83      	lsrs	r3, r0, #14
  4022c6:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  4022ca:	f8cd 3620 	str.w	r3, [sp, #1568]	; 0x620
  4022ce:	0b8b      	lsrs	r3, r1, #14
  4022d0:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
  4022d4:	f8cd 3624 	str.w	r3, [sp, #1572]	; 0x624

004022d8 <.LBB635>:
  4022d8:	0c83      	lsrs	r3, r0, #18
  4022da:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
  4022de:	f8cd 3628 	str.w	r3, [sp, #1576]	; 0x628
  4022e2:	0c8b      	lsrs	r3, r1, #18
  4022e4:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
  4022e8:	f8cd 362c 	str.w	r3, [sp, #1580]	; 0x62c

004022ec <.LBE635>:
  4022ec:	f50d 63c4 	add.w	r3, sp, #1568	; 0x620
  4022f0:	e9d3 4500 	ldrd	r4, r5, [r3]
  4022f4:	f50d 63c5 	add.w	r3, sp, #1576	; 0x628
  4022f8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4022fc:	4054      	eors	r4, r2
  4022fe:	405d      	eors	r5, r3

00402300 <.LBB637>:
  402300:	05c9      	lsls	r1, r1, #23
  402302:	9b04      	ldr	r3, [sp, #16]
  402304:	ea41 2353 	orr.w	r3, r1, r3, lsr #9
  402308:	f8cd 3634 	str.w	r3, [sp, #1588]	; 0x634
  40230c:	9b04      	ldr	r3, [sp, #16]
  40230e:	05d9      	lsls	r1, r3, #23
  402310:	9b05      	ldr	r3, [sp, #20]
  402312:	ea41 2353 	orr.w	r3, r1, r3, lsr #9
  402316:	f8cd 3630 	str.w	r3, [sp, #1584]	; 0x630

0040231a <.LBE637>:
  40231a:	f50d 63c6 	add.w	r3, sp, #1584	; 0x630
  40231e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402322:	4062      	eors	r2, r4
  402324:	406b      	eors	r3, r5
  402326:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  40232a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  40232e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  402332:	4050      	eors	r0, r2
  402334:	4059      	eors	r1, r3
  402336:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
  40233a:	4003      	ands	r3, r0
  40233c:	400c      	ands	r4, r1
  40233e:	4618      	mov	r0, r3
  402340:	4621      	mov	r1, r4
  402342:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
  402346:	4043      	eors	r3, r0
  402348:	404c      	eors	r4, r1
  40234a:	4618      	mov	r0, r3
  40234c:	e9d6 231c 	ldrd	r2, r3, [r6, #112]	; 0x70
  402350:	eb18 0802 	adds.w	r8, r8, r2
  402354:	eb49 0903 	adc.w	r9, r9, r3
  402358:	eb18 0800 	adds.w	r8, r8, r0
  40235c:	eb49 0904 	adc.w	r9, r9, r4
  402360:	2f00      	cmp	r7, #0
  402362:	f000 82b6 	beq.w	4028d2 <.LCFI3+0xa6>

00402366 <.LBB639>:
  402366:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
  40236a:	0863      	lsrs	r3, r4, #1
  40236c:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
  402370:	f8cd 3638 	str.w	r3, [sp, #1592]	; 0x638
  402374:	086b      	lsrs	r3, r5, #1
  402376:	ea43 73c4 	orr.w	r3, r3, r4, lsl #31
  40237a:	f8cd 363c 	str.w	r3, [sp, #1596]	; 0x63c

0040237e <.LBB641>:
  40237e:	0a23      	lsrs	r3, r4, #8
  402380:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  402384:	f8cd 3640 	str.w	r3, [sp, #1600]	; 0x640
  402388:	0a2b      	lsrs	r3, r5, #8
  40238a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  40238e:	f8cd 3644 	str.w	r3, [sp, #1604]	; 0x644

00402392 <.LBE641>:
  402392:	f50d 63c7 	add.w	r3, sp, #1592	; 0x638
  402396:	e9d3 2300 	ldrd	r2, r3, [r3]
  40239a:	f50d 61c8 	add.w	r1, sp, #1600	; 0x640
  40239e:	e9d1 0100 	ldrd	r0, r1, [r1]
  4023a2:	4042      	eors	r2, r0
  4023a4:	404b      	eors	r3, r1
  4023a6:	09e1      	lsrs	r1, r4, #7
  4023a8:	ea41 6145 	orr.w	r1, r1, r5, lsl #25
  4023ac:	9168      	str	r1, [sp, #416]	; 0x1a0
  4023ae:	09e9      	lsrs	r1, r5, #7
  4023b0:	9169      	str	r1, [sp, #420]	; 0x1a4
  4023b2:	a968      	add	r1, sp, #416	; 0x1a0
  4023b4:	e9d1 0100 	ldrd	r0, r1, [r1]
  4023b8:	4050      	eors	r0, r2
  4023ba:	4059      	eors	r1, r3
  4023bc:	4602      	mov	r2, r0
  4023be:	460b      	mov	r3, r1
  4023c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  4023c4:	1880      	adds	r0, r0, r2
  4023c6:	4159      	adcs	r1, r3
  4023c8:	4602      	mov	r2, r0
  4023ca:	460b      	mov	r3, r1
  4023cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4023d0:	1880      	adds	r0, r0, r2
  4023d2:	4159      	adcs	r1, r3
  4023d4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30

004023d8 <.LBB643>:
  4023d8:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  4023dc:	0ce1      	lsrs	r1, r4, #19
  4023de:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
  4023e2:	f8cd 1648 	str.w	r1, [sp, #1608]	; 0x648
  4023e6:	0ce9      	lsrs	r1, r5, #19
  4023e8:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
  4023ec:	f8cd 164c 	str.w	r1, [sp, #1612]	; 0x64c

004023f0 <.LBB645>:
  4023f0:	00e9      	lsls	r1, r5, #3
  4023f2:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
  4023f6:	f8cd 1654 	str.w	r1, [sp, #1620]	; 0x654
  4023fa:	00e1      	lsls	r1, r4, #3
  4023fc:	ea41 7155 	orr.w	r1, r1, r5, lsr #29
  402400:	f8cd 1650 	str.w	r1, [sp, #1616]	; 0x650

00402404 <.LBE645>:
  402404:	f50d 63c9 	add.w	r3, sp, #1608	; 0x648
  402408:	e9d3 0100 	ldrd	r0, r1, [r3]
  40240c:	f50d 63ca 	add.w	r3, sp, #1616	; 0x650
  402410:	e9d3 2300 	ldrd	r2, r3, [r3]
  402414:	4050      	eors	r0, r2
  402416:	4059      	eors	r1, r3
  402418:	09a4      	lsrs	r4, r4, #6
  40241a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
  40241c:	ea44 6485 	orr.w	r4, r4, r5, lsl #26
  402420:	946a      	str	r4, [sp, #424]	; 0x1a8
  402422:	09ac      	lsrs	r4, r5, #6
  402424:	946b      	str	r4, [sp, #428]	; 0x1ac
  402426:	ab6a      	add	r3, sp, #424	; 0x1a8
  402428:	e9d3 4500 	ldrd	r4, r5, [r3]
  40242c:	4044      	eors	r4, r0
  40242e:	404d      	eors	r5, r1
  402430:	4620      	mov	r0, r4
  402432:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
  402436:	181b      	adds	r3, r3, r0
  402438:	416c      	adcs	r4, r5
  40243a:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
  40243e:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
  402442:	eb14 0408 	adds.w	r4, r4, r8
  402446:	eb45 0509 	adc.w	r5, r5, r9
  40244a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  40244e:	1912      	adds	r2, r2, r4
  402450:	416b      	adcs	r3, r5
  402452:	461c      	mov	r4, r3
  402454:	4613      	mov	r3, r2
  402456:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  40245a:	e9cd 3402 	strd	r3, r4, [sp, #8]
  40245e:	eb12 0208 	adds.w	r2, r2, r8
  402462:	eb44 0309 	adc.w	r3, r4, r9
  402466:	4690      	mov	r8, r2
  402468:	4699      	mov	r9, r3

0040246a <.LBB647>:
  40246a:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
  40246e:	0f23      	lsrs	r3, r4, #28
  402470:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  402474:	f8cd 3658 	str.w	r3, [sp, #1624]	; 0x658
  402478:	0f2b      	lsrs	r3, r5, #28
  40247a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  40247e:	f8cd 365c 	str.w	r3, [sp, #1628]	; 0x65c

00402482 <.LBB649>:
  402482:	07ab      	lsls	r3, r5, #30
  402484:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  402488:	f8cd 3664 	str.w	r3, [sp, #1636]	; 0x664
  40248c:	07a3      	lsls	r3, r4, #30
  40248e:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  402492:	f8cd 3660 	str.w	r3, [sp, #1632]	; 0x660

00402496 <.LBE649>:
  402496:	f50d 63cb 	add.w	r3, sp, #1624	; 0x658
  40249a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40249e:	f50d 61cc 	add.w	r1, sp, #1632	; 0x660
  4024a2:	e9d1 0100 	ldrd	r0, r1, [r1]
  4024a6:	4042      	eors	r2, r0
  4024a8:	404b      	eors	r3, r1

004024aa <.LBB651>:
  4024aa:	0669      	lsls	r1, r5, #25
  4024ac:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  4024b0:	f8cd 166c 	str.w	r1, [sp, #1644]	; 0x66c
  4024b4:	0661      	lsls	r1, r4, #25
  4024b6:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  4024ba:	f8cd 1668 	str.w	r1, [sp, #1640]	; 0x668

004024be <.LBE651>:
  4024be:	f50d 61cd 	add.w	r1, sp, #1640	; 0x668
  4024c2:	e9d1 0100 	ldrd	r0, r1, [r1]
  4024c6:	4050      	eors	r0, r2
  4024c8:	4059      	eors	r1, r3
  4024ca:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  4024ce:	ea44 000a 	orr.w	r0, r4, sl
  4024d2:	ea45 010b 	orr.w	r1, r5, fp
  4024d6:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
  4024da:	4002      	ands	r2, r0
  4024dc:	400b      	ands	r3, r1
  4024de:	ea04 040a 	and.w	r4, r4, sl
  4024e2:	ea05 050b 	and.w	r5, r5, fp
  4024e6:	4314      	orrs	r4, r2
  4024e8:	431d      	orrs	r5, r3
  4024ea:	4620      	mov	r0, r4
  4024ec:	4629      	mov	r1, r5
  4024ee:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
  4024f2:	1824      	adds	r4, r4, r0
  4024f4:	414d      	adcs	r5, r1
  4024f6:	4620      	mov	r0, r4
  4024f8:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
  4024fc:	181b      	adds	r3, r3, r0
  4024fe:	416c      	adcs	r4, r5
  402500:	e9cd 3418 	strd	r3, r4, [sp, #96]	; 0x60

00402504 <.LBB653>:
  402504:	ea4f 3398 	mov.w	r3, r8, lsr #14
  402508:	ea43 4389 	orr.w	r3, r3, r9, lsl #18
  40250c:	f8cd 3670 	str.w	r3, [sp, #1648]	; 0x670
  402510:	ea4f 3399 	mov.w	r3, r9, lsr #14
  402514:	ea43 4388 	orr.w	r3, r3, r8, lsl #18
  402518:	f8cd 3674 	str.w	r3, [sp, #1652]	; 0x674

0040251c <.LBB655>:
  40251c:	ea4f 4398 	mov.w	r3, r8, lsr #18
  402520:	ea43 3389 	orr.w	r3, r3, r9, lsl #14
  402524:	f8cd 3678 	str.w	r3, [sp, #1656]	; 0x678
  402528:	ea4f 4399 	mov.w	r3, r9, lsr #18
  40252c:	ea43 3388 	orr.w	r3, r3, r8, lsl #14
  402530:	f8cd 367c 	str.w	r3, [sp, #1660]	; 0x67c

00402534 <.LBE655>:
  402534:	f50d 63ce 	add.w	r3, sp, #1648	; 0x670
  402538:	e9d3 2300 	ldrd	r2, r3, [r3]
  40253c:	f50d 61cf 	add.w	r1, sp, #1656	; 0x678
  402540:	e9d1 0100 	ldrd	r0, r1, [r1]
  402544:	4042      	eors	r2, r0
  402546:	404b      	eors	r3, r1

00402548 <.LBB657>:
  402548:	ea4f 51c9 	mov.w	r1, r9, lsl #23
  40254c:	ea41 2158 	orr.w	r1, r1, r8, lsr #9
  402550:	f8cd 1684 	str.w	r1, [sp, #1668]	; 0x684
  402554:	ea4f 51c8 	mov.w	r1, r8, lsl #23
  402558:	ea41 2159 	orr.w	r1, r1, r9, lsr #9
  40255c:	f8cd 1680 	str.w	r1, [sp, #1664]	; 0x680

00402560 <.LBE657>:
  402560:	f50d 61d0 	add.w	r1, sp, #1664	; 0x680
  402564:	e9d1 0100 	ldrd	r0, r1, [r1]
  402568:	4050      	eors	r0, r2
  40256a:	4059      	eors	r1, r3
  40256c:	e9cd 012e 	strd	r0, r1, [sp, #184]	; 0xb8
  402570:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  402574:	4602      	mov	r2, r0
  402576:	460b      	mov	r3, r1
  402578:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  40257c:	4062      	eors	r2, r4
  40257e:	406b      	eors	r3, r5
  402580:	ea02 0208 	and.w	r2, r2, r8
  402584:	ea03 0309 	and.w	r3, r3, r9
  402588:	4050      	eors	r0, r2
  40258a:	4059      	eors	r1, r3
  40258c:	4602      	mov	r2, r0
  40258e:	460b      	mov	r3, r1
  402590:	e9d6 011e 	ldrd	r0, r1, [r6, #120]	; 0x78
  402594:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
  402598:	1824      	adds	r4, r4, r0
  40259a:	414d      	adcs	r5, r1
  40259c:	1914      	adds	r4, r2, r4
  40259e:	eb43 0505 	adc.w	r5, r3, r5
  4025a2:	e9cd 4502 	strd	r4, r5, [sp, #8]
  4025a6:	2f00      	cmp	r7, #0
  4025a8:	f000 8198 	beq.w	4028dc <.LCFI3+0xb0>

004025ac <.LBB659>:
  4025ac:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
  4025b0:	0843      	lsrs	r3, r0, #1
  4025b2:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
  4025b6:	f8cd 3688 	str.w	r3, [sp, #1672]	; 0x688
  4025ba:	084b      	lsrs	r3, r1, #1
  4025bc:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
  4025c0:	f8cd 368c 	str.w	r3, [sp, #1676]	; 0x68c

004025c4 <.LBB661>:
  4025c4:	0a03      	lsrs	r3, r0, #8
  4025c6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  4025ca:	f8cd 3690 	str.w	r3, [sp, #1680]	; 0x690
  4025ce:	0a0b      	lsrs	r3, r1, #8
  4025d0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  4025d4:	f8cd 3694 	str.w	r3, [sp, #1684]	; 0x694

004025d8 <.LBE661>:
  4025d8:	f50d 63d1 	add.w	r3, sp, #1672	; 0x688
  4025dc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4025e0:	f50d 64d2 	add.w	r4, sp, #1680	; 0x690
  4025e4:	e9d4 4500 	ldrd	r4, r5, [r4]
  4025e8:	4062      	eors	r2, r4
  4025ea:	406b      	eors	r3, r5
  4025ec:	460d      	mov	r5, r1
  4025ee:	09c1      	lsrs	r1, r0, #7
  4025f0:	ea41 6145 	orr.w	r1, r1, r5, lsl #25
  4025f4:	916c      	str	r1, [sp, #432]	; 0x1b0
  4025f6:	09e9      	lsrs	r1, r5, #7
  4025f8:	916d      	str	r1, [sp, #436]	; 0x1b4
  4025fa:	a96c      	add	r1, sp, #432	; 0x1b0
  4025fc:	e9d1 0100 	ldrd	r0, r1, [r1]
  402600:	4050      	eors	r0, r2
  402602:	4059      	eors	r1, r3
  402604:	4602      	mov	r2, r0
  402606:	460b      	mov	r3, r1
  402608:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
  40260c:	1880      	adds	r0, r0, r2
  40260e:	4159      	adcs	r1, r3
  402610:	4602      	mov	r2, r0
  402612:	460b      	mov	r3, r1
  402614:	e9dd 0100 	ldrd	r0, r1, [sp]
  402618:	1880      	adds	r0, r0, r2
  40261a:	4159      	adcs	r1, r3
  40261c:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68

00402620 <.LBB663>:
  402620:	e9dd 5626 	ldrd	r5, r6, [sp, #152]	; 0x98
  402624:	0ce9      	lsrs	r1, r5, #19
  402626:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
  40262a:	f8cd 1698 	str.w	r1, [sp, #1688]	; 0x698
  40262e:	0cf1      	lsrs	r1, r6, #19
  402630:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
  402634:	f8cd 169c 	str.w	r1, [sp, #1692]	; 0x69c

00402638 <.LBB665>:
  402638:	00f1      	lsls	r1, r6, #3
  40263a:	ea41 7155 	orr.w	r1, r1, r5, lsr #29
  40263e:	f8cd 16a4 	str.w	r1, [sp, #1700]	; 0x6a4
  402642:	00e9      	lsls	r1, r5, #3
  402644:	ea41 7156 	orr.w	r1, r1, r6, lsr #29
  402648:	f8cd 16a0 	str.w	r1, [sp, #1696]	; 0x6a0

0040264c <.LBE665>:
  40264c:	f50d 63d3 	add.w	r3, sp, #1688	; 0x698
  402650:	e9d3 0100 	ldrd	r0, r1, [r3]
  402654:	f50d 63d4 	add.w	r3, sp, #1696	; 0x6a0
  402658:	e9d3 3400 	ldrd	r3, r4, [r3]
  40265c:	4058      	eors	r0, r3
  40265e:	4061      	eors	r1, r4
  402660:	462c      	mov	r4, r5
  402662:	4635      	mov	r5, r6
  402664:	09a6      	lsrs	r6, r4, #6
  402666:	4633      	mov	r3, r6
  402668:	ea43 6685 	orr.w	r6, r3, r5, lsl #26
  40266c:	966e      	str	r6, [sp, #440]	; 0x1b8
  40266e:	09ae      	lsrs	r6, r5, #6
  402670:	966f      	str	r6, [sp, #444]	; 0x1bc
  402672:	ab6e      	add	r3, sp, #440	; 0x1b8
  402674:	e9d3 3400 	ldrd	r3, r4, [r3]
  402678:	4043      	eors	r3, r0
  40267a:	404c      	eors	r4, r1
  40267c:	4618      	mov	r0, r3
  40267e:	4621      	mov	r1, r4
  402680:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
  402684:	181b      	adds	r3, r3, r0
  402686:	414c      	adcs	r4, r1
  402688:	e9cd 3428 	strd	r3, r4, [sp, #160]	; 0xa0
  40268c:	e9dd 452e 	ldrd	r4, r5, [sp, #184]	; 0xb8
  402690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402694:	1912      	adds	r2, r2, r4
  402696:	416b      	adcs	r3, r5
  402698:	4614      	mov	r4, r2
  40269a:	461d      	mov	r5, r3
  40269c:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
  4026a0:	1912      	adds	r2, r2, r4
  4026a2:	416b      	adcs	r3, r5
  4026a4:	4611      	mov	r1, r2
  4026a6:	461a      	mov	r2, r3
  4026a8:	e9dd 342c 	ldrd	r3, r4, [sp, #176]	; 0xb0
  4026ac:	e9cd 121a 	strd	r1, r2, [sp, #104]	; 0x68
  4026b0:	18c9      	adds	r1, r1, r3
  4026b2:	4162      	adcs	r2, r4
  4026b4:	460b      	mov	r3, r1
  4026b6:	4614      	mov	r4, r2
  4026b8:	e9cd 3402 	strd	r3, r4, [sp, #8]

004026bc <.LBB667>:
  4026bc:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
  4026c0:	0f23      	lsrs	r3, r4, #28
  4026c2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  4026c6:	f8cd 36a8 	str.w	r3, [sp, #1704]	; 0x6a8
  4026ca:	0f2b      	lsrs	r3, r5, #28
  4026cc:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  4026d0:	f8cd 36ac 	str.w	r3, [sp, #1708]	; 0x6ac

004026d4 <.LBB669>:
  4026d4:	07ab      	lsls	r3, r5, #30
  4026d6:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  4026da:	f8cd 36b4 	str.w	r3, [sp, #1716]	; 0x6b4
  4026de:	07a3      	lsls	r3, r4, #30
  4026e0:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  4026e4:	f8cd 36b0 	str.w	r3, [sp, #1712]	; 0x6b0

004026e8 <.LBE669>:
  4026e8:	f50d 63d5 	add.w	r3, sp, #1704	; 0x6a8
  4026ec:	e9d3 2300 	ldrd	r2, r3, [r3]
  4026f0:	f50d 61d6 	add.w	r1, sp, #1712	; 0x6b0
  4026f4:	e9d1 0100 	ldrd	r0, r1, [r1]
  4026f8:	4042      	eors	r2, r0
  4026fa:	404b      	eors	r3, r1

004026fc <.LBB671>:
  4026fc:	0669      	lsls	r1, r5, #25
  4026fe:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  402702:	f8cd 16bc 	str.w	r1, [sp, #1724]	; 0x6bc
  402706:	0661      	lsls	r1, r4, #25
  402708:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  40270c:	f8cd 16b8 	str.w	r1, [sp, #1720]	; 0x6b8

00402710 <.LBE671>:
  402710:	f50d 61d7 	add.w	r1, sp, #1720	; 0x6b8
  402714:	e9d1 4500 	ldrd	r4, r5, [r1]
  402718:	4054      	eors	r4, r2
  40271a:	405d      	eors	r5, r3
  40271c:	e9cd 452c 	strd	r4, r5, [sp, #176]	; 0xb0
  402720:	e9dd 562a 	ldrd	r5, r6, [sp, #168]	; 0xa8
  402724:	462a      	mov	r2, r5
  402726:	4633      	mov	r3, r6
  402728:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
  40272c:	4302      	orrs	r2, r0
  40272e:	430b      	orrs	r3, r1
  402730:	ea02 000a 	and.w	r0, r2, sl
  402734:	ea03 010b 	and.w	r1, r3, fp
  402738:	e9dd 3418 	ldrd	r3, r4, [sp, #96]	; 0x60
  40273c:	401d      	ands	r5, r3
  40273e:	4026      	ands	r6, r4
  402740:	4305      	orrs	r5, r0
  402742:	430e      	orrs	r6, r1
  402744:	e9dd 342c 	ldrd	r3, r4, [sp, #176]	; 0xb0
  402748:	195b      	adds	r3, r3, r5
  40274a:	4174      	adcs	r4, r6
  40274c:	4621      	mov	r1, r4
  40274e:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
  402752:	18e4      	adds	r4, r4, r3
  402754:	414d      	adcs	r5, r1
    for (j = 0; j < 80; j += 16) {
  402756:	3710      	adds	r7, #16
  402758:	f10e 0e80 	add.w	lr, lr, #128	; 0x80
  40275c:	2f50      	cmp	r7, #80	; 0x50
  40275e:	f47d adc2 	bne.w	4002e6 <.LBB353>
    }
#endif /* USE_SLOW_SHA2 */

    /* Add the working vars back into digest */

    sha512->digest[0] += a(0);
  402762:	f8dd 06cc 	ldr.w	r0, [sp, #1740]	; 0x6cc
  402766:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
  40276a:	18a4      	adds	r4, r4, r2
  40276c:	415d      	adcs	r5, r3
  40276e:	4622      	mov	r2, r4
  402770:	462b      	mov	r3, r5
  402772:	e9c0 2306 	strd	r2, r3, [r0, #24]
    sha512->digest[1] += b(0);
  402776:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
  40277a:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
  40277e:	18a4      	adds	r4, r4, r2
  402780:	415d      	adcs	r5, r3
  402782:	4622      	mov	r2, r4
  402784:	462b      	mov	r3, r5
  402786:	e9c0 2308 	strd	r2, r3, [r0, #32]
    sha512->digest[2] += c(0);
  40278a:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
  40278e:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
  402792:	18a4      	adds	r4, r4, r2
  402794:	415d      	adcs	r5, r3
  402796:	4622      	mov	r2, r4
  402798:	462b      	mov	r3, r5
  40279a:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
    sha512->digest[3] += d(0);
  40279e:	e9d0 230c 	ldrd	r2, r3, [r0, #48]	; 0x30
  4027a2:	eb12 020a 	adds.w	r2, r2, sl
  4027a6:	eb43 030b 	adc.w	r3, r3, fp
  4027aa:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
    sha512->digest[4] += e(0);
  4027ae:	e9d0 230e 	ldrd	r2, r3, [r0, #56]	; 0x38
  4027b2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  4027b6:	18a4      	adds	r4, r4, r2
  4027b8:	415d      	adcs	r5, r3
  4027ba:	4622      	mov	r2, r4
  4027bc:	462b      	mov	r3, r5
  4027be:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
    sha512->digest[5] += f(0);
  4027c2:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
  4027c6:	eb12 0208 	adds.w	r2, r2, r8
  4027ca:	eb43 0309 	adc.w	r3, r3, r9
  4027ce:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    sha512->digest[6] += g(0);
  4027d2:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
  4027d6:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  4027da:	18a4      	adds	r4, r4, r2
  4027dc:	415d      	adcs	r5, r3
  4027de:	4622      	mov	r2, r4
  4027e0:	462b      	mov	r3, r5
  4027e2:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
    sha512->digest[7] += h(0);
  4027e6:	e9d0 2314 	ldrd	r2, r3, [r0, #80]	; 0x50
  4027ea:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
  4027ee:	18a4      	adds	r4, r4, r2
  4027f0:	415d      	adcs	r5, r3
  4027f2:	4622      	mov	r2, r4
  4027f4:	462b      	mov	r3, r5
  4027f6:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50

004027fa <.LBB673>:


/* Make sure compiler doesn't skip */
STATIC INLINE void ForceZero(const void* mem, word32 len)
{
    volatile byte* z = (volatile byte*)mem;
  4027fa:	f50d 63da 	add.w	r3, sp, #1744	; 0x6d0

004027fe <.LVL8>:

    for (w = (volatile word64*)z; len >= sizeof(*w); len -= sizeof(*w))
        *w++ = 0;
    z = (volatile byte*)w;
#endif
    while (len--) *z++ = 0;
  4027fe:	2000      	movs	r0, #0
  402800:	f50d 61ea 	add.w	r1, sp, #1872	; 0x750

00402804 <.LVL9>:
  402804:	1c5a      	adds	r2, r3, #1

00402806 <.LVL10>:
  402806:	7018      	strb	r0, [r3, #0]

00402808 <.LVL11>:
  402808:	4613      	mov	r3, r2
  40280a:	428a      	cmp	r2, r1
  40280c:	d1fa      	bne.n	402804 <.LVL9>
  40280e:	f50d 63ea 	add.w	r3, sp, #1872	; 0x750

00402812 <.LBB675>:
  402812:	2100      	movs	r1, #0

00402814 <.LVL12>:
  402814:	1c5a      	adds	r2, r3, #1

00402816 <.LVL13>:
  402816:	7019      	strb	r1, [r3, #0]

00402818 <.LVL14>:
  402818:	4613      	mov	r3, r2
  40281a:	f50d 60f2 	add.w	r0, sp, #1936	; 0x790
  40281e:	4282      	cmp	r2, r0
  402820:	d1f8      	bne.n	402814 <.LVL12>

00402822 <.LBE675>:
#ifdef WOLFSSL_SMALL_STACK
    XFREE(W, NULL, DYNAMIC_TYPE_TMP_BUFFER);
#endif

    return 0;
}
  402822:	2000      	movs	r0, #0
  402824:	f20d 7d94 	addw	sp, sp, #1940	; 0x794

00402828 <.LCFI2>:
  402828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040282c <.LCFI3>:
        R( 0); R( 1); R( 2); R( 3);
  40282c:	e9dc 2316 	ldrd	r2, r3, [ip, #88]	; 0x58
  402830:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  402834:	f7fd be08 	b.w	400448 <.LBE365+0x52>
  402838:	e9dc 2318 	ldrd	r2, r3, [ip, #96]	; 0x60
  40283c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  402840:	f7fd bf19 	b.w	400676 <.LBE385+0x3e>
  402844:	e9dc 231a 	ldrd	r2, r3, [ip, #104]	; 0x68
  402848:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  40284c:	f7fe b831 	b.w	4008b2 <.LBE405+0x3e>
  402850:	e9dc 231c 	ldrd	r2, r3, [ip, #112]	; 0x70
  402854:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  402858:	f7fe b95c 	b.w	400b14 <.LBE425+0x3c>
        R( 4); R( 5); R( 6); R( 7);
  40285c:	e9dc 231e 	ldrd	r2, r3, [ip, #120]	; 0x78
  402860:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
  402864:	f7fe ba7d 	b.w	400d62 <.LBE445+0x3e>
  402868:	e9dc 2320 	ldrd	r2, r3, [ip, #128]	; 0x80
  40286c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  402870:	f7fe bb8e 	b.w	400f90 <.LBE465+0x3a>
  402874:	e9dc 2322 	ldrd	r2, r3, [ip, #136]	; 0x88
  402878:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  40287c:	f7fe bca5 	b.w	4011ca <.LBE485+0x40>
  402880:	e9dc 2324 	ldrd	r2, r3, [ip, #144]	; 0x90
  402884:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  402888:	f7fe bdbe 	b.w	401408 <.LBE505+0x3e>
        R( 8); R( 9); R(10); R(11);
  40288c:	e9dc 3426 	ldrd	r3, r4, [ip, #152]	; 0x98
  402890:	e9cd 3400 	strd	r3, r4, [sp]
  402894:	f7fe bed9 	b.w	40164a <.LBE525+0x3a>
  402898:	e9dc 3428 	ldrd	r3, r4, [ip, #160]	; 0xa0
  40289c:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
  4028a0:	f7fe bff6 	b.w	401890 <.LBE545+0x3a>
  4028a4:	e9dc 342a 	ldrd	r3, r4, [ip, #168]	; 0xa8
  4028a8:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
  4028ac:	f7ff b91d 	b.w	401aea <.LBE565+0x3a>
  4028b0:	e9dc 342c 	ldrd	r3, r4, [ip, #176]	; 0xb0
  4028b4:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
  4028b8:	f7ff ba3a 	b.w	401d30 <.LBE585+0x3a>
        R(12); R(13); R(14); R(15);
  4028bc:	e9dc 232e 	ldrd	r2, r3, [ip, #184]	; 0xb8
  4028c0:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  4028c4:	f7ff bb6c 	b.w	401fa0 <.LBE605+0x3e>
  4028c8:	e9dc 3430 	ldrd	r3, r4, [ip, #192]	; 0xc0
  4028cc:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
  4028d0:	e48b      	b.n	4021ea <.LBE625+0x3a>
  4028d2:	e9dc 3432 	ldrd	r3, r4, [ip, #200]	; 0xc8
  4028d6:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
  4028da:	e5b0      	b.n	40243e <.LBE645+0x3a>
  4028dc:	e9dc 3434 	ldrd	r3, r4, [ip, #208]	; 0xd0
  4028e0:	e9cd 3428 	strd	r3, r4, [sp, #160]	; 0xa0
  4028e4:	e6d2      	b.n	40268c <.LBE665+0x40>

004028e6 <.LFE16>:
  4028e6:	bf00      	nop

Disassembly of section .text._svfprintf_r%55:

004028e8 <_svfprintf_r>:
  4028e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

004028ec <.LCFI0>:
  4028ec:	ed2d 8b06 	vpush	{d8-d10}

004028f0 <.LCFI1>:
  4028f0:	b0cf      	sub	sp, #316	; 0x13c

004028f2 <.LCFI2>:
  4028f2:	460c      	mov	r4, r1
  4028f4:	9105      	str	r1, [sp, #20]
  4028f6:	4693      	mov	fp, r2
  4028f8:	930a      	str	r3, [sp, #40]	; 0x28

004028fa <.LVL1>:
  4028fa:	9011      	str	r0, [sp, #68]	; 0x44
  4028fc:	f009 f844 	bl	40b988 <_localeconv_r>

00402900 <.LVL2>:
  402900:	6803      	ldr	r3, [r0, #0]
  402902:	9317      	str	r3, [sp, #92]	; 0x5c

00402904 <.LVL3>:
  402904:	4618      	mov	r0, r3
  402906:	f006 fb1b 	bl	408f40 <strlen>

0040290a <.LVL4>:
  40290a:	89a3      	ldrh	r3, [r4, #12]
  40290c:	9015      	str	r0, [sp, #84]	; 0x54

0040290e <.LVL5>:
  40290e:	061d      	lsls	r5, r3, #24
  402910:	d503      	bpl.n	40291a <.LVL6>
  402912:	6923      	ldr	r3, [r4, #16]
  402914:	2b00      	cmp	r3, #0
  402916:	f001 8151 	beq.w	403bbc <.LBE47>

0040291a <.LVL6>:
  40291a:	2300      	movs	r3, #0
  40291c:	ed9f 8b7a 	vldr	d8, [pc, #488]	; 402b08 <.LVL46+0x4>
  402920:	ed9f 9b7b 	vldr	d9, [pc, #492]	; 402b10 <.LVL46+0xc>
  402924:	930f      	str	r3, [sp, #60]	; 0x3c
  402926:	9324      	str	r3, [sp, #144]	; 0x90
  402928:	9323      	str	r3, [sp, #140]	; 0x8c

0040292a <.LVL7>:
  40292a:	9314      	str	r3, [sp, #80]	; 0x50
  40292c:	9319      	str	r3, [sp, #100]	; 0x64
  40292e:	9312      	str	r3, [sp, #72]	; 0x48
  402930:	9318      	str	r3, [sp, #96]	; 0x60
  402932:	9316      	str	r3, [sp, #88]	; 0x58
  402934:	9303      	str	r3, [sp, #12]
  402936:	465e      	mov	r6, fp
  402938:	ab25      	add	r3, sp, #148	; 0x94

0040293a <.LVL8>:
  40293a:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 402b18 <.LVL46+0x14>
  40293e:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44

00402942 <.LVL9>:
  402942:	9322      	str	r3, [sp, #136]	; 0x88
  402944:	4699      	mov	r9, r3

00402946 <.LVL10>:
  402946:	7833      	ldrb	r3, [r6, #0]
  402948:	4634      	mov	r4, r6
  40294a:	b1e3      	cbz	r3, 402986 <.LVL18>
  40294c:	2b25      	cmp	r3, #37	; 0x25
  40294e:	d102      	bne.n	402956 <.LVL12>
  402950:	e019      	b.n	402986 <.LVL18>

00402952 <.LVL11>:
  402952:	2b25      	cmp	r3, #37	; 0x25
  402954:	d003      	beq.n	40295e <.LVL14>

00402956 <.LVL12>:
  402956:	f814 3f01 	ldrb.w	r3, [r4, #1]!

0040295a <.LVL13>:
  40295a:	2b00      	cmp	r3, #0
  40295c:	d1f9      	bne.n	402952 <.LVL11>

0040295e <.LVL14>:
  40295e:	1ba5      	subs	r5, r4, r6
  402960:	b18d      	cbz	r5, 402986 <.LVL18>
  402962:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  402964:	9a24      	ldr	r2, [sp, #144]	; 0x90
  402966:	f8c9 6000 	str.w	r6, [r9]
  40296a:	3301      	adds	r3, #1
  40296c:	442a      	add	r2, r5
  40296e:	2b07      	cmp	r3, #7
  402970:	f8c9 5004 	str.w	r5, [r9, #4]
  402974:	9224      	str	r2, [sp, #144]	; 0x90

00402976 <.LVL15>:
  402976:	9323      	str	r3, [sp, #140]	; 0x8c
  402978:	f300 809d 	bgt.w	402ab6 <.LVL36>

0040297c <.LVL16>:
  40297c:	f109 0908 	add.w	r9, r9, #8

00402980 <.LVL17>:
  402980:	9b03      	ldr	r3, [sp, #12]
  402982:	442b      	add	r3, r5
  402984:	9303      	str	r3, [sp, #12]

00402986 <.LVL18>:
  402986:	7823      	ldrb	r3, [r4, #0]
  402988:	2b00      	cmp	r3, #0
  40298a:	f001 80ca 	beq.w	403b22 <.LDL1>

0040298e <.LVL19>:
  40298e:	2300      	movs	r3, #0
  402990:	f04f 32ff 	mov.w	r2, #4294967295
  402994:	4698      	mov	r8, r3
  402996:	9307      	str	r3, [sp, #28]
  402998:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
  40299c:	1c67      	adds	r7, r4, #1

0040299e <.LVL20>:
  40299e:	7863      	ldrb	r3, [r4, #1]
  4029a0:	9204      	str	r2, [sp, #16]
  4029a2:	242b      	movs	r4, #43	; 0x2b

004029a4 <.LVL21>:
  4029a4:	2520      	movs	r5, #32

004029a6 <.LVL22>:
  4029a6:	3701      	adds	r7, #1
  4029a8:	f1a3 0220 	sub.w	r2, r3, #32
  4029ac:	2a5a      	cmp	r2, #90	; 0x5a
  4029ae:	f200 83e4 	bhi.w	40317a <.LVL218>
  4029b2:	e8df f012 	tbh	[pc, r2, lsl #1]
  4029b6:	02a5      	.short	0x02a5
  4029b8:	03e203e2 	.word	0x03e203e2
  4029bc:	03e202ae 	.word	0x03e202ae
  4029c0:	03e203e2 	.word	0x03e203e2
  4029c4:	03e2005f 	.word	0x03e2005f
  4029c8:	02b203e2 	.word	0x02b203e2
  4029cc:	03e202bf 	.word	0x03e202bf
  4029d0:	02cd007c 	.word	0x02cd007c
  4029d4:	02e703e2 	.word	0x02e703e2
  4029d8:	03d203d2 	.word	0x03d203d2
  4029dc:	03d203d2 	.word	0x03d203d2
  4029e0:	03d203d2 	.word	0x03d203d2
  4029e4:	03d203d2 	.word	0x03d203d2
  4029e8:	03e203d2 	.word	0x03e203d2
  4029ec:	03e203e2 	.word	0x03e203e2
  4029f0:	03e203e2 	.word	0x03e203e2
  4029f4:	03e203e2 	.word	0x03e203e2
  4029f8:	03e2034a 	.word	0x03e2034a
  4029fc:	0392037c 	.word	0x0392037c
  402a00:	034a034a 	.word	0x034a034a
  402a04:	03e2034a 	.word	0x03e2034a
  402a08:	03e203e2 	.word	0x03e203e2
  402a0c:	02eb03e2 	.word	0x02eb03e2
  402a10:	03e203e2 	.word	0x03e203e2
  402a14:	03e202ef 	.word	0x03e202ef
  402a18:	03e203e2 	.word	0x03e203e2
  402a1c:	03e20300 	.word	0x03e20300
  402a20:	03e20327 	.word	0x03e20327
  402a24:	029403e2 	.word	0x029403e2
  402a28:	03e203e2 	.word	0x03e203e2
  402a2c:	03e203e2 	.word	0x03e203e2
  402a30:	03e203e2 	.word	0x03e203e2
  402a34:	03e203e2 	.word	0x03e203e2
  402a38:	03e2034a 	.word	0x03e2034a
  402a3c:	0254037c 	.word	0x0254037c
  402a40:	034a034a 	.word	0x034a034a
  402a44:	02c3034a 	.word	0x02c3034a
  402a48:	005b0254 	.word	0x005b0254
  402a4c:	03b003e2 	.word	0x03b003e2
  402a50:	03ba03e2 	.word	0x03ba03e2
  402a54:	03380223 	.word	0x03380223
  402a58:	03e2005b 	.word	0x03e2005b
  402a5c:	00760300 	.word	0x00760300
  402a60:	03e2023e 	.word	0x03e2023e
  402a64:	00b303e2 	.word	0x00b303e2
  402a68:	007603e2 	.word	0x007603e2
  402a6c:	f048 0820 	orr.w	r8, r8, #32
  402a70:	783b      	ldrb	r3, [r7, #0]
  402a72:	e798      	b.n	4029a6 <.LVL22>
  402a74:	4658      	mov	r0, fp
  402a76:	f008 ff87 	bl	40b988 <_localeconv_r>

00402a7a <.LVL25>:
  402a7a:	6843      	ldr	r3, [r0, #4]
  402a7c:	9316      	str	r3, [sp, #88]	; 0x58

00402a7e <.LVL26>:
  402a7e:	4618      	mov	r0, r3
  402a80:	f006 fa5e 	bl	408f40 <strlen>

00402a84 <.LVL27>:
  402a84:	9018      	str	r0, [sp, #96]	; 0x60

00402a86 <.LVL28>:
  402a86:	4658      	mov	r0, fp
  402a88:	f008 ff7e 	bl	40b988 <_localeconv_r>

00402a8c <.LVL29>:
  402a8c:	6883      	ldr	r3, [r0, #8]
  402a8e:	9312      	str	r3, [sp, #72]	; 0x48

00402a90 <.LVL30>:
  402a90:	9b18      	ldr	r3, [sp, #96]	; 0x60

00402a92 <.LVL31>:
  402a92:	b133      	cbz	r3, 402aa2 <.LVL32>
  402a94:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402a96:	b123      	cbz	r3, 402aa2 <.LVL32>
  402a98:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402a9a:	781b      	ldrb	r3, [r3, #0]
  402a9c:	2b00      	cmp	r3, #0
  402a9e:	f041 8083 	bne.w	403ba8 <.LVL513>

00402aa2 <.LVL32>:
  402aa2:	783b      	ldrb	r3, [r7, #0]
  402aa4:	e77f      	b.n	4029a6 <.LVL22>

00402aa6 <.LVL33>:
  402aa6:	9a07      	ldr	r2, [sp, #28]
  402aa8:	930a      	str	r3, [sp, #40]	; 0x28
  402aaa:	4252      	negs	r2, r2
  402aac:	9207      	str	r2, [sp, #28]

00402aae <.LVL34>:
  402aae:	f048 0804 	orr.w	r8, r8, #4
  402ab2:	783b      	ldrb	r3, [r7, #0]
  402ab4:	e777      	b.n	4029a6 <.LVL22>

00402ab6 <.LVL36>:
  402ab6:	aa22      	add	r2, sp, #136	; 0x88
  402ab8:	9905      	ldr	r1, [sp, #20]
  402aba:	4658      	mov	r0, fp
  402abc:	f005 ffe8 	bl	408a90 <.LFE25>

00402ac0 <.LVL37>:
  402ac0:	b980      	cbnz	r0, 402ae4 <.LVL44>

00402ac2 <.LVL38>:
  402ac2:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00402ac6 <.LVL39>:
  402ac6:	e75b      	b.n	402980 <.LVL17>

00402ac8 <.LVL40>:
  402ac8:	aa22      	add	r2, sp, #136	; 0x88

00402aca <.LVL41>:
  402aca:	9905      	ldr	r1, [sp, #20]
  402acc:	4658      	mov	r0, fp
  402ace:	f005 ffdf 	bl	408a90 <.LFE25>

00402ad2 <.LVL42>:
  402ad2:	2800      	cmp	r0, #0
  402ad4:	f000 8182 	beq.w	402ddc <.LVL119>

00402ad8 <.L189>:
  402ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402ada:	b11b      	cbz	r3, 402ae4 <.LVL44>
  402adc:	9909      	ldr	r1, [sp, #36]	; 0x24
  402ade:	9811      	ldr	r0, [sp, #68]	; 0x44
  402ae0:	f005 f820 	bl	407b24 <.LFE4>

00402ae4 <.LVL44>:
  402ae4:	9b05      	ldr	r3, [sp, #20]
  402ae6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
  402aea:	f013 0f40 	tst.w	r3, #64	; 0x40
  402aee:	9b03      	ldr	r3, [sp, #12]
  402af0:	bf18      	it	ne
  402af2:	f04f 33ff 	movne.w	r3, #4294967295
  402af6:	9303      	str	r3, [sp, #12]

00402af8 <.LVL45>:
  402af8:	9803      	ldr	r0, [sp, #12]
  402afa:	b04f      	add	sp, #316	; 0x13c

00402afc <.LCFI3>:
  402afc:	ecbd 8b06 	vpop	{d8-d10}

00402b00 <.LCFI4>:
  402b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00402b04 <.LVL46>:
  402b04:	f3af 8000 	nop.w
	...
  402b10:	ffffffff 	.word	0xffffffff
  402b14:	7fefffff 	.word	0x7fefffff
  402b18:	0040bd68 	.word	0x0040bd68

00402b1c <.L45>:
  402b1c:	930d      	str	r3, [sp, #52]	; 0x34
  402b1e:	f018 0f20 	tst.w	r8, #32
  402b22:	4bb4      	ldr	r3, [pc, #720]	; (402df4 <.LVL122+0x4>)
  402b24:	9314      	str	r3, [sp, #80]	; 0x50

00402b26 <.LVL48>:
  402b26:	f040 81e1 	bne.w	402eec <.LVL150>
  402b2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  402b2c:	f018 0f10 	tst.w	r8, #16
  402b30:	4613      	mov	r3, r2
  402b32:	f040 859d 	bne.w	403670 <.LVL365>
  402b36:	f018 0f40 	tst.w	r8, #64	; 0x40
  402b3a:	f041 801d 	bne.w	403b78 <.LVL506>
  402b3e:	f418 7f00 	tst.w	r8, #512	; 0x200
  402b42:	f000 8595 	beq.w	403670 <.LVL365>

00402b46 <.LVL49>:
  402b46:	3304      	adds	r3, #4

00402b48 <.LVL50>:
  402b48:	7814      	ldrb	r4, [r2, #0]
  402b4a:	930a      	str	r3, [sp, #40]	; 0x28
  402b4c:	2500      	movs	r5, #0

00402b4e <.LVL51>:
  402b4e:	f018 0f01 	tst.w	r8, #1
  402b52:	d00b      	beq.n	402b6c <.LVL51+0x1e>
  402b54:	ea54 0305 	orrs.w	r3, r4, r5
  402b58:	d008      	beq.n	402b6c <.LVL51+0x1e>
  402b5a:	2330      	movs	r3, #48	; 0x30
  402b5c:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
  402b60:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
  402b64:	f048 0802 	orr.w	r8, r8, #2
  402b68:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
  402b6c:	f428 6180 	bic.w	r1, r8, #1024	; 0x400

00402b70 <.LVL53>:
  402b70:	2302      	movs	r3, #2

00402b72 <.L150>:
  402b72:	2200      	movs	r2, #0
  402b74:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b

00402b78 <.L65>:
  402b78:	9804      	ldr	r0, [sp, #16]
  402b7a:	1c42      	adds	r2, r0, #1
  402b7c:	f000 8190 	beq.w	402ea0 <.LVL139>

00402b80 <.LVL56>:
  402b80:	ea54 0205 	orrs.w	r2, r4, r5
  402b84:	f021 0880 	bic.w	r8, r1, #128	; 0x80

00402b88 <.LVL57>:
  402b88:	f040 818f 	bne.w	402eaa <.LVL140>
  402b8c:	2800      	cmp	r0, #0
  402b8e:	f040 8409 	bne.w	4033a4 <.LVL271>
  402b92:	2b00      	cmp	r3, #0
  402b94:	f040 84a2 	bne.w	4034dc <.LBE13>
  402b98:	f011 0301 	ands.w	r3, r1, #1

00402b9c <.LVL58>:
  402b9c:	ae4e      	add	r6, sp, #312	; 0x138

00402b9e <.LVL59>:
  402b9e:	9308      	str	r3, [sp, #32]
  402ba0:	d002      	beq.n	402ba8 <.LVL61>

00402ba2 <.LVL60>:
  402ba2:	2330      	movs	r3, #48	; 0x30
  402ba4:	f806 3d01 	strb.w	r3, [r6, #-1]!

00402ba8 <.LVL61>:
  402ba8:	2300      	movs	r3, #0
  402baa:	9a08      	ldr	r2, [sp, #32]
  402bac:	9309      	str	r3, [sp, #36]	; 0x24
  402bae:	9313      	str	r3, [sp, #76]	; 0x4c
  402bb0:	9310      	str	r3, [sp, #64]	; 0x40
  402bb2:	930e      	str	r3, [sp, #56]	; 0x38
  402bb4:	9b04      	ldr	r3, [sp, #16]
  402bb6:	4293      	cmp	r3, r2
  402bb8:	bfb8      	it	lt
  402bba:	4613      	movlt	r3, r2
  402bbc:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  402bc0:	9302      	str	r3, [sp, #8]

00402bc2 <.L59>:
  402bc2:	b112      	cbz	r2, 402bca <.LVL64>

00402bc4 <.LVL63>:
  402bc4:	9b02      	ldr	r3, [sp, #8]
  402bc6:	3301      	adds	r3, #1
  402bc8:	9302      	str	r3, [sp, #8]

00402bca <.LVL64>:
  402bca:	f018 0302 	ands.w	r3, r8, #2
  402bce:	930b      	str	r3, [sp, #44]	; 0x2c
  402bd0:	d002      	beq.n	402bd8 <.LVL64+0xe>
  402bd2:	9b02      	ldr	r3, [sp, #8]
  402bd4:	3302      	adds	r3, #2
  402bd6:	9302      	str	r3, [sp, #8]
  402bd8:	f018 0384 	ands.w	r3, r8, #132	; 0x84
  402bdc:	930c      	str	r3, [sp, #48]	; 0x30
  402bde:	f040 82ea 	bne.w	4031b6 <.LVL227>
  402be2:	9b07      	ldr	r3, [sp, #28]
  402be4:	9902      	ldr	r1, [sp, #8]
  402be6:	1a5c      	subs	r4, r3, r1

00402be8 <.LVL66>:
  402be8:	2c00      	cmp	r4, #0
  402bea:	f340 82e4 	ble.w	4031b6 <.LVL227>
  402bee:	2c10      	cmp	r4, #16
  402bf0:	9924      	ldr	r1, [sp, #144]	; 0x90
  402bf2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  402bf4:	4d80      	ldr	r5, [pc, #512]	; (402df8 <.LVL122+0x8>)
  402bf6:	dd25      	ble.n	402c44 <.LVL80>
  402bf8:	4648      	mov	r0, r9
  402bfa:	2310      	movs	r3, #16
  402bfc:	46c1      	mov	r9, r8
  402bfe:	46b0      	mov	r8, r6

00402c00 <.LVL67>:
  402c00:	9e05      	ldr	r6, [sp, #20]
  402c02:	e004      	b.n	402c0e <.LVL71>

00402c04 <.LVL68>:
  402c04:	3c10      	subs	r4, #16

00402c06 <.LVL69>:
  402c06:	2c10      	cmp	r4, #16
  402c08:	f100 0008 	add.w	r0, r0, #8

00402c0c <.LVL70>:
  402c0c:	dd17      	ble.n	402c3e <.LVL79>

00402c0e <.LVL71>:
  402c0e:	3201      	adds	r2, #1
  402c10:	3110      	adds	r1, #16
  402c12:	2a07      	cmp	r2, #7
  402c14:	9124      	str	r1, [sp, #144]	; 0x90

00402c16 <.LVL72>:
  402c16:	9223      	str	r2, [sp, #140]	; 0x8c
  402c18:	6005      	str	r5, [r0, #0]
  402c1a:	6043      	str	r3, [r0, #4]
  402c1c:	ddf2      	ble.n	402c04 <.LVL68>
  402c1e:	aa22      	add	r2, sp, #136	; 0x88
  402c20:	4631      	mov	r1, r6
  402c22:	4658      	mov	r0, fp

00402c24 <.LVL73>:
  402c24:	9306      	str	r3, [sp, #24]
  402c26:	f005 ff33 	bl	408a90 <.LFE25>

00402c2a <.LVL74>:
  402c2a:	2800      	cmp	r0, #0
  402c2c:	f47f af54 	bne.w	402ad8 <.L189>
  402c30:	3c10      	subs	r4, #16

00402c32 <.LVL75>:
  402c32:	2c10      	cmp	r4, #16
  402c34:	9924      	ldr	r1, [sp, #144]	; 0x90
  402c36:	9a23      	ldr	r2, [sp, #140]	; 0x8c

00402c38 <.LVL76>:
  402c38:	9b06      	ldr	r3, [sp, #24]

00402c3a <.LVL77>:
  402c3a:	a825      	add	r0, sp, #148	; 0x94

00402c3c <.LVL78>:
  402c3c:	dce7      	bgt.n	402c0e <.LVL71>

00402c3e <.LVL79>:
  402c3e:	4646      	mov	r6, r8
  402c40:	46c8      	mov	r8, r9
  402c42:	4681      	mov	r9, r0

00402c44 <.LVL80>:
  402c44:	3201      	adds	r2, #1
  402c46:	1863      	adds	r3, r4, r1
  402c48:	2a07      	cmp	r2, #7
  402c4a:	9324      	str	r3, [sp, #144]	; 0x90
  402c4c:	9223      	str	r2, [sp, #140]	; 0x8c
  402c4e:	f8c9 5000 	str.w	r5, [r9]
  402c52:	f8c9 4004 	str.w	r4, [r9, #4]
  402c56:	f300 848f 	bgt.w	403578 <.LVL333>

00402c5a <.LVL81>:
  402c5a:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  402c5e:	f109 0908 	add.w	r9, r9, #8

00402c62 <.LVL82>:
  402c62:	b172      	cbz	r2, 402c82 <.LVL84>
  402c64:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  402c66:	3201      	adds	r2, #1
  402c68:	3301      	adds	r3, #1
  402c6a:	f10d 006b 	add.w	r0, sp, #107	; 0x6b
  402c6e:	2101      	movs	r1, #1
  402c70:	2a07      	cmp	r2, #7
  402c72:	9324      	str	r3, [sp, #144]	; 0x90
  402c74:	9223      	str	r2, [sp, #140]	; 0x8c
  402c76:	e889 0003 	stmia.w	r9, {r0, r1}
  402c7a:	f300 83a9 	bgt.w	4033d0 <.LVL278>

00402c7e <.LVL83>:
  402c7e:	f109 0908 	add.w	r9, r9, #8

00402c82 <.LVL84>:
  402c82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  402c84:	b16a      	cbz	r2, 402ca2 <.LVL86>
  402c86:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  402c88:	3201      	adds	r2, #1
  402c8a:	3302      	adds	r3, #2
  402c8c:	a81b      	add	r0, sp, #108	; 0x6c
  402c8e:	2102      	movs	r1, #2
  402c90:	2a07      	cmp	r2, #7
  402c92:	9324      	str	r3, [sp, #144]	; 0x90
  402c94:	9223      	str	r2, [sp, #140]	; 0x8c
  402c96:	e889 0003 	stmia.w	r9, {r0, r1}
  402c9a:	f300 83a5 	bgt.w	4033e8 <.LVL282>

00402c9e <.LVL85>:
  402c9e:	f109 0908 	add.w	r9, r9, #8

00402ca2 <.LVL86>:
  402ca2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  402ca4:	2a80      	cmp	r2, #128	; 0x80
  402ca6:	f000 82eb 	beq.w	403280 <.LVL243>
  402caa:	9a04      	ldr	r2, [sp, #16]
  402cac:	9908      	ldr	r1, [sp, #32]
  402cae:	1a54      	subs	r4, r2, r1

00402cb0 <.LVL87>:
  402cb0:	2c00      	cmp	r4, #0
  402cb2:	dd36      	ble.n	402d22 <.LVL102>
  402cb4:	2c10      	cmp	r4, #16
  402cb6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  402cb8:	dd26      	ble.n	402d08 <.LVL100>
  402cba:	4649      	mov	r1, r9
  402cbc:	2510      	movs	r5, #16
  402cbe:	46a1      	mov	r9, r4
  402cc0:	9c05      	ldr	r4, [sp, #20]

00402cc2 <.LVL88>:
  402cc2:	e006      	b.n	402cd2 <.LVL92>

00402cc4 <.LVL89>:
  402cc4:	f1a9 0910 	sub.w	r9, r9, #16

00402cc8 <.LVL90>:
  402cc8:	f1b9 0f10 	cmp.w	r9, #16
  402ccc:	f101 0108 	add.w	r1, r1, #8

00402cd0 <.LVL91>:
  402cd0:	dd18      	ble.n	402d04 <.LVL99>

00402cd2 <.LVL92>:
  402cd2:	3201      	adds	r2, #1
  402cd4:	3310      	adds	r3, #16
  402cd6:	2a07      	cmp	r2, #7
  402cd8:	9324      	str	r3, [sp, #144]	; 0x90

00402cda <.LVL93>:
  402cda:	9223      	str	r2, [sp, #140]	; 0x8c
  402cdc:	f8c1 a000 	str.w	sl, [r1]
  402ce0:	604d      	str	r5, [r1, #4]
  402ce2:	ddef      	ble.n	402cc4 <.LVL89>
  402ce4:	aa22      	add	r2, sp, #136	; 0x88
  402ce6:	4621      	mov	r1, r4

00402ce8 <.LVL94>:
  402ce8:	4658      	mov	r0, fp
  402cea:	f005 fed1 	bl	408a90 <.LFE25>

00402cee <.LVL95>:
  402cee:	2800      	cmp	r0, #0
  402cf0:	f47f aef2 	bne.w	402ad8 <.L189>
  402cf4:	f1a9 0910 	sub.w	r9, r9, #16

00402cf8 <.LVL96>:
  402cf8:	f1b9 0f10 	cmp.w	r9, #16
  402cfc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402cfe:	9a23      	ldr	r2, [sp, #140]	; 0x8c

00402d00 <.LVL97>:
  402d00:	a925      	add	r1, sp, #148	; 0x94

00402d02 <.LVL98>:
  402d02:	dce6      	bgt.n	402cd2 <.LVL92>

00402d04 <.LVL99>:
  402d04:	464c      	mov	r4, r9
  402d06:	4689      	mov	r9, r1

00402d08 <.LVL100>:
  402d08:	3201      	adds	r2, #1
  402d0a:	4423      	add	r3, r4
  402d0c:	2a07      	cmp	r2, #7
  402d0e:	9324      	str	r3, [sp, #144]	; 0x90
  402d10:	9223      	str	r2, [sp, #140]	; 0x8c
  402d12:	f8c9 a000 	str.w	sl, [r9]
  402d16:	f8c9 4004 	str.w	r4, [r9, #4]
  402d1a:	f300 834d 	bgt.w	4033b8 <.LVL274>

00402d1e <.LVL101>:
  402d1e:	f109 0908 	add.w	r9, r9, #8

00402d22 <.LVL102>:
  402d22:	f418 7f80 	tst.w	r8, #256	; 0x100
  402d26:	f040 824f 	bne.w	4031c8 <.LVL228>
  402d2a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  402d2c:	9808      	ldr	r0, [sp, #32]
  402d2e:	f8c9 6000 	str.w	r6, [r9]
  402d32:	3201      	adds	r2, #1
  402d34:	4403      	add	r3, r0
  402d36:	2a07      	cmp	r2, #7
  402d38:	9324      	str	r3, [sp, #144]	; 0x90
  402d3a:	f8c9 0004 	str.w	r0, [r9, #4]
  402d3e:	9223      	str	r2, [sp, #140]	; 0x8c
  402d40:	f300 8324 	bgt.w	40338c <.LVL269>

00402d44 <.LVL103>:
  402d44:	f109 0908 	add.w	r9, r9, #8

00402d48 <.LVL104>:
  402d48:	f018 0f04 	tst.w	r8, #4
  402d4c:	d03b      	beq.n	402dc6 <.LVL117>
  402d4e:	9a07      	ldr	r2, [sp, #28]
  402d50:	9902      	ldr	r1, [sp, #8]
  402d52:	1a54      	subs	r4, r2, r1

00402d54 <.LVL105>:
  402d54:	2c00      	cmp	r4, #0
  402d56:	dd36      	ble.n	402dc6 <.LVL117>
  402d58:	2c10      	cmp	r4, #16
  402d5a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  402d5c:	4d26      	ldr	r5, [pc, #152]	; (402df8 <.LVL122+0x8>)
  402d5e:	dd1f      	ble.n	402da0 <.LVL115>
  402d60:	2610      	movs	r6, #16
  402d62:	f8dd 8014 	ldr.w	r8, [sp, #20]
  402d66:	e004      	b.n	402d72 <.LVL109>

00402d68 <.LVL106>:
  402d68:	3c10      	subs	r4, #16

00402d6a <.LVL107>:
  402d6a:	2c10      	cmp	r4, #16
  402d6c:	f109 0908 	add.w	r9, r9, #8

00402d70 <.LVL108>:
  402d70:	dd16      	ble.n	402da0 <.LVL115>

00402d72 <.LVL109>:
  402d72:	3201      	adds	r2, #1
  402d74:	3310      	adds	r3, #16
  402d76:	2a07      	cmp	r2, #7
  402d78:	9324      	str	r3, [sp, #144]	; 0x90

00402d7a <.LVL110>:
  402d7a:	9223      	str	r2, [sp, #140]	; 0x8c
  402d7c:	e889 0060 	stmia.w	r9, {r5, r6}
  402d80:	ddf2      	ble.n	402d68 <.LVL106>
  402d82:	aa22      	add	r2, sp, #136	; 0x88
  402d84:	4641      	mov	r1, r8
  402d86:	4658      	mov	r0, fp
  402d88:	f005 fe82 	bl	408a90 <.LFE25>

00402d8c <.LVL111>:
  402d8c:	2800      	cmp	r0, #0
  402d8e:	f47f aea3 	bne.w	402ad8 <.L189>
  402d92:	3c10      	subs	r4, #16

00402d94 <.LVL112>:
  402d94:	2c10      	cmp	r4, #16
  402d96:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402d98:	9a23      	ldr	r2, [sp, #140]	; 0x8c

00402d9a <.LVL113>:
  402d9a:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00402d9e <.LVL114>:
  402d9e:	dce8      	bgt.n	402d72 <.LVL109>

00402da0 <.LVL115>:
  402da0:	3201      	adds	r2, #1
  402da2:	4423      	add	r3, r4
  402da4:	2a07      	cmp	r2, #7
  402da6:	9324      	str	r3, [sp, #144]	; 0x90
  402da8:	9223      	str	r2, [sp, #140]	; 0x8c
  402daa:	f8c9 5000 	str.w	r5, [r9]
  402dae:	f8c9 4004 	str.w	r4, [r9, #4]
  402db2:	dd08      	ble.n	402dc6 <.LVL117>
  402db4:	aa22      	add	r2, sp, #136	; 0x88
  402db6:	9905      	ldr	r1, [sp, #20]
  402db8:	4658      	mov	r0, fp
  402dba:	f005 fe69 	bl	408a90 <.LFE25>

00402dbe <.LVL116>:
  402dbe:	2800      	cmp	r0, #0
  402dc0:	f47f ae8a 	bne.w	402ad8 <.L189>
  402dc4:	9b24      	ldr	r3, [sp, #144]	; 0x90

00402dc6 <.LVL117>:
  402dc6:	9a03      	ldr	r2, [sp, #12]
  402dc8:	9907      	ldr	r1, [sp, #28]
  402dca:	9802      	ldr	r0, [sp, #8]
  402dcc:	4281      	cmp	r1, r0
  402dce:	bfac      	ite	ge
  402dd0:	1852      	addge	r2, r2, r1
  402dd2:	1812      	addlt	r2, r2, r0
  402dd4:	9203      	str	r2, [sp, #12]

00402dd6 <.LVL118>:
  402dd6:	2b00      	cmp	r3, #0
  402dd8:	f47f ae76 	bne.w	402ac8 <.LVL40>

00402ddc <.LVL119>:
  402ddc:	2300      	movs	r3, #0
  402dde:	9323      	str	r3, [sp, #140]	; 0x8c

00402de0 <.LVL120>:
  402de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402de2:	b11b      	cbz	r3, 402dec <.LVL121>
  402de4:	9909      	ldr	r1, [sp, #36]	; 0x24
  402de6:	4658      	mov	r0, fp
  402de8:	f004 fe9c 	bl	407b24 <.LFE4>

00402dec <.LVL121>:
  402dec:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00402df0 <.LVL122>:
  402df0:	463e      	mov	r6, r7
  402df2:	e5a8      	b.n	402946 <.LVL10>
  402df4:	0040b0e0 	.word	0x0040b0e0
  402df8:	0040bd58 	.word	0x0040bd58

00402dfc <.LVL123>:
  402dfc:	f018 0f20 	tst.w	r8, #32
  402e00:	930d      	str	r3, [sp, #52]	; 0x34
  402e02:	f040 80ce 	bne.w	402fa2 <.LVL168+0x1e>
  402e06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  402e08:	f018 0f10 	tst.w	r8, #16
  402e0c:	4613      	mov	r3, r2
  402e0e:	f040 8419 	bne.w	403644 <.LVL358>
  402e12:	f018 0f40 	tst.w	r8, #64	; 0x40
  402e16:	f040 86a2 	bne.w	403b5e <.LVL502>
  402e1a:	f418 7f00 	tst.w	r8, #512	; 0x200
  402e1e:	f000 8411 	beq.w	403644 <.LVL358>

00402e22 <.LVL124>:
  402e22:	3304      	adds	r3, #4

00402e24 <.LVL125>:
  402e24:	7814      	ldrb	r4, [r2, #0]
  402e26:	930a      	str	r3, [sp, #40]	; 0x28
  402e28:	2500      	movs	r5, #0

00402e2a <.LVL126>:
  402e2a:	f428 6180 	bic.w	r1, r8, #1024	; 0x400

00402e2e <.LVL127>:
  402e2e:	2300      	movs	r3, #0
  402e30:	e69f      	b.n	402b72 <.L150>

00402e32 <.LVL128>:
  402e32:	4641      	mov	r1, r8

00402e34 <.LVL129>:
  402e34:	068e      	lsls	r6, r1, #26

00402e36 <.LVL130>:
  402e36:	930d      	str	r3, [sp, #52]	; 0x34
  402e38:	f100 80ea 	bmi.w	403010 <.LVL180+0x6>
  402e3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  402e3e:	06cd      	lsls	r5, r1, #27
  402e40:	4613      	mov	r3, r2
  402e42:	f100 8405 	bmi.w	403650 <.LVL360>
  402e46:	064c      	lsls	r4, r1, #25
  402e48:	f100 868f 	bmi.w	403b6a <.LVL504>
  402e4c:	0588      	lsls	r0, r1, #22
  402e4e:	f140 83ff 	bpl.w	403650 <.LVL360>

00402e52 <.LVL131>:
  402e52:	7814      	ldrb	r4, [r2, #0]
  402e54:	3204      	adds	r2, #4

00402e56 <.LVL132>:
  402e56:	2500      	movs	r5, #0
  402e58:	2301      	movs	r3, #1
  402e5a:	920a      	str	r2, [sp, #40]	; 0x28
  402e5c:	e689      	b.n	402b72 <.L150>

00402e5e <.LVL133>:
  402e5e:	4641      	mov	r1, r8

00402e60 <.LVL134>:
  402e60:	068c      	lsls	r4, r1, #26
  402e62:	930d      	str	r3, [sp, #52]	; 0x34
  402e64:	f100 813f 	bmi.w	4030e6 <.LVL198+0x8>
  402e68:	06c8      	lsls	r0, r1, #27
  402e6a:	f100 83f8 	bmi.w	40365e <.LVL362>
  402e6e:	064a      	lsls	r2, r1, #25
  402e70:	f100 8688 	bmi.w	403b84 <.LVL508>
  402e74:	058b      	lsls	r3, r1, #22
  402e76:	f140 83f2 	bpl.w	40365e <.LVL362>

00402e7a <.LVL135>:
  402e7a:	980a      	ldr	r0, [sp, #40]	; 0x28
  402e7c:	f990 4000 	ldrsb.w	r4, [r0]

00402e80 <.LVL136>:
  402e80:	17e5      	asrs	r5, r4, #31
  402e82:	3004      	adds	r0, #4
  402e84:	4622      	mov	r2, r4
  402e86:	462b      	mov	r3, r5
  402e88:	900a      	str	r0, [sp, #40]	; 0x28

00402e8a <.LVL137>:
  402e8a:	2a00      	cmp	r2, #0
  402e8c:	f173 0300 	sbcs.w	r3, r3, #0
  402e90:	f2c0 8139 	blt.w	403106 <.LVL201>
  402e94:	9804      	ldr	r0, [sp, #16]
  402e96:	1c42      	adds	r2, r0, #1
  402e98:	f04f 0301 	mov.w	r3, #1

00402e9c <.LVL138>:
  402e9c:	f47f ae70 	bne.w	402b80 <.LVL56>

00402ea0 <.LVL139>:
  402ea0:	ea54 0205 	orrs.w	r2, r4, r5
  402ea4:	f000 827f 	beq.w	4033a6 <.LVL272>
  402ea8:	4688      	mov	r8, r1

00402eaa <.LVL140>:
  402eaa:	2b01      	cmp	r3, #1
  402eac:	f000 831e 	beq.w	4034ec <.LVL316>
  402eb0:	2b02      	cmp	r3, #2
  402eb2:	f040 82a8 	bne.w	403406 <.LVL288>

00402eb6 <.LVL141>:
  402eb6:	9814      	ldr	r0, [sp, #80]	; 0x50

00402eb8 <.LVL142>:
  402eb8:	ae4e      	add	r6, sp, #312	; 0x138

00402eba <.LVL143>:
  402eba:	0923      	lsrs	r3, r4, #4
  402ebc:	f004 010f 	and.w	r1, r4, #15
  402ec0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  402ec4:	092a      	lsrs	r2, r5, #4
  402ec6:	461c      	mov	r4, r3

00402ec8 <.LVL144>:
  402ec8:	4615      	mov	r5, r2

00402eca <.LVL145>:
  402eca:	5c43      	ldrb	r3, [r0, r1]
  402ecc:	f806 3d01 	strb.w	r3, [r6, #-1]!

00402ed0 <.LVL146>:
  402ed0:	ea54 0305 	orrs.w	r3, r4, r5
  402ed4:	d1f1      	bne.n	402eba <.LVL143>

00402ed6 <.LVL147>:
  402ed6:	ab4e      	add	r3, sp, #312	; 0x138
  402ed8:	1b9b      	subs	r3, r3, r6
  402eda:	9308      	str	r3, [sp, #32]
  402edc:	e664      	b.n	402ba8 <.LVL61>

00402ede <.LVL148>:
  402ede:	930d      	str	r3, [sp, #52]	; 0x34
  402ee0:	f018 0f20 	tst.w	r8, #32
  402ee4:	4bb5      	ldr	r3, [pc, #724]	; (4031bc <.LVL227+0x6>)
  402ee6:	9314      	str	r3, [sp, #80]	; 0x50

00402ee8 <.LVL149>:
  402ee8:	f43f ae1f 	beq.w	402b2a <.LVL48+0x4>

00402eec <.LVL150>:
  402eec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  402eee:	3507      	adds	r5, #7
  402ef0:	f025 0307 	bic.w	r3, r5, #7
  402ef4:	f103 0208 	add.w	r2, r3, #8
  402ef8:	920a      	str	r2, [sp, #40]	; 0x28

00402efa <.LVL151>:
  402efa:	e9d3 4500 	ldrd	r4, r5, [r3]
  402efe:	e626      	b.n	402b4e <.LVL51>

00402f00 <.LVL152>:
  402f00:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
  402f04:	2b00      	cmp	r3, #0
  402f06:	f47f adcc 	bne.w	402aa2 <.LVL32>
  402f0a:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
  402f0e:	783b      	ldrb	r3, [r7, #0]
  402f10:	e549      	b.n	4029a6 <.LVL22>
  402f12:	f048 0801 	orr.w	r8, r8, #1
  402f16:	783b      	ldrb	r3, [r7, #0]
  402f18:	e545      	b.n	4029a6 <.LVL22>
  402f1a:	990a      	ldr	r1, [sp, #40]	; 0x28
  402f1c:	680b      	ldr	r3, [r1, #0]
  402f1e:	9307      	str	r3, [sp, #28]
  402f20:	461a      	mov	r2, r3
  402f22:	2a00      	cmp	r2, #0
  402f24:	460b      	mov	r3, r1
  402f26:	f103 0304 	add.w	r3, r3, #4

00402f2a <.LVL154>:
  402f2a:	f6ff adbc 	blt.w	402aa6 <.LVL33>
  402f2e:	930a      	str	r3, [sp, #40]	; 0x28
  402f30:	783b      	ldrb	r3, [r7, #0]

00402f32 <.LVL155>:
  402f32:	e538      	b.n	4029a6 <.LVL22>
  402f34:	f88d 406b 	strb.w	r4, [sp, #107]	; 0x6b
  402f38:	783b      	ldrb	r3, [r7, #0]
  402f3a:	e534      	b.n	4029a6 <.LVL22>

00402f3c <.LVL156>:
  402f3c:	783b      	ldrb	r3, [r7, #0]
  402f3e:	2b68      	cmp	r3, #104	; 0x68
  402f40:	bf03      	ittte	eq
  402f42:	787b      	ldrbeq	r3, [r7, #1]
  402f44:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
  402f48:	3701      	addeq	r7, #1

00402f4a <.LVL158>:
  402f4a:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
  402f4e:	e52a      	b.n	4029a6 <.LVL22>

00402f50 <.LVL160>:
  402f50:	783b      	ldrb	r3, [r7, #0]
  402f52:	2b2a      	cmp	r3, #42	; 0x2a
  402f54:	f107 0101 	add.w	r1, r7, #1

00402f58 <.LVL161>:
  402f58:	f001 811c 	beq.w	404194 <.LVL687>

00402f5c <.LVL162>:
  402f5c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  402f60:	2a09      	cmp	r2, #9
  402f62:	460f      	mov	r7, r1
  402f64:	f201 804a 	bhi.w	403ffc <.LVL637>
  402f68:	2300      	movs	r3, #0

00402f6a <.LVL163>:
  402f6a:	4619      	mov	r1, r3

00402f6c <.LVL164>:
  402f6c:	f817 3b01 	ldrb.w	r3, [r7], #1

00402f70 <.LVL165>:
  402f70:	eb01 0181 	add.w	r1, r1, r1, lsl #2

00402f74 <.LVL166>:
  402f74:	eb02 0141 	add.w	r1, r2, r1, lsl #1

00402f78 <.LVL167>:
  402f78:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  402f7c:	2a09      	cmp	r2, #9
  402f7e:	d9f5      	bls.n	402f6c <.LVL164>
  402f80:	9104      	str	r1, [sp, #16]
  402f82:	e511      	b.n	4029a8 <.LVL22+0x2>

00402f84 <.LVL168>:
  402f84:	f048 0880 	orr.w	r8, r8, #128	; 0x80
  402f88:	783b      	ldrb	r3, [r7, #0]
  402f8a:	e50c      	b.n	4029a6 <.LVL22>
  402f8c:	f048 0808 	orr.w	r8, r8, #8
  402f90:	783b      	ldrb	r3, [r7, #0]
  402f92:	e508      	b.n	4029a6 <.LVL22>
  402f94:	f048 0810 	orr.w	r8, r8, #16
  402f98:	f018 0f20 	tst.w	r8, #32
  402f9c:	930d      	str	r3, [sp, #52]	; 0x34
  402f9e:	f43f af32 	beq.w	402e06 <.LVL123+0xa>
  402fa2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  402fa4:	3507      	adds	r5, #7
  402fa6:	f025 0307 	bic.w	r3, r5, #7
  402faa:	f103 0208 	add.w	r2, r3, #8
  402fae:	920a      	str	r2, [sp, #40]	; 0x28

00402fb0 <.LVL172>:
  402fb0:	e9d3 4500 	ldrd	r4, r5, [r3]
  402fb4:	e739      	b.n	402e2a <.LVL126>

00402fb6 <.LVL173>:
  402fb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  402fb8:	930d      	str	r3, [sp, #52]	; 0x34
  402fba:	6816      	ldr	r6, [r2, #0]

00402fbc <.LVL174>:
  402fbc:	2400      	movs	r4, #0
  402fbe:	f88d 406b 	strb.w	r4, [sp, #107]	; 0x6b
  402fc2:	1d15      	adds	r5, r2, #4

00402fc4 <.LVL175>:
  402fc4:	2e00      	cmp	r6, #0
  402fc6:	f000 873d 	beq.w	403e44 <.LVL593>
  402fca:	9a04      	ldr	r2, [sp, #16]
  402fcc:	1c53      	adds	r3, r2, #1
  402fce:	f000 869b 	beq.w	403d08 <.LVL549>

00402fd2 <.LBB11>:
  402fd2:	4621      	mov	r1, r4
  402fd4:	4630      	mov	r0, r6
  402fd6:	f006 fc8b 	bl	4098f0 <memchr>

00402fda <.LVL176>:
  402fda:	9009      	str	r0, [sp, #36]	; 0x24
  402fdc:	2800      	cmp	r0, #0
  402fde:	f000 8782 	beq.w	403ee6 <.LBB63>
  402fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402fe4:	9404      	str	r4, [sp, #16]
  402fe6:	1b9b      	subs	r3, r3, r6
  402fe8:	461a      	mov	r2, r3
  402fea:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  402fee:	9308      	str	r3, [sp, #32]

00402ff0 <.LBE11>:
  402ff0:	950a      	str	r5, [sp, #40]	; 0x28

00402ff2 <.LBB12>:
  402ff2:	4623      	mov	r3, r4
  402ff4:	9202      	str	r2, [sp, #8]

00402ff6 <.LBE12>:
  402ff6:	9309      	str	r3, [sp, #36]	; 0x24
  402ff8:	9313      	str	r3, [sp, #76]	; 0x4c
  402ffa:	9310      	str	r3, [sp, #64]	; 0x40
  402ffc:	930e      	str	r3, [sp, #56]	; 0x38
  402ffe:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  403002:	e5de      	b.n	402bc2 <.L59>

00403004 <.LVL178>:
  403004:	f048 0110 	orr.w	r1, r8, #16

00403008 <.LVL179>:
  403008:	068e      	lsls	r6, r1, #26

0040300a <.LVL180>:
  40300a:	930d      	str	r3, [sp, #52]	; 0x34
  40300c:	f57f af16 	bpl.w	402e3c <.LVL130+0x6>
  403010:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  403012:	3507      	adds	r5, #7
  403014:	f025 0307 	bic.w	r3, r5, #7
  403018:	f103 0208 	add.w	r2, r3, #8
  40301c:	e9d3 4500 	ldrd	r4, r5, [r3]
  403020:	920a      	str	r2, [sp, #40]	; 0x28

00403022 <.LVL181>:
  403022:	2301      	movs	r3, #1
  403024:	e5a5      	b.n	402b72 <.L150>

00403026 <.LVL182>:
  403026:	980a      	ldr	r0, [sp, #40]	; 0x28
  403028:	4b65      	ldr	r3, [pc, #404]	; (4031c0 <.LVL227+0xa>)
  40302a:	6804      	ldr	r4, [r0, #0]
  40302c:	9314      	str	r3, [sp, #80]	; 0x50

0040302e <.LVL183>:
  40302e:	2230      	movs	r2, #48	; 0x30
  403030:	2378      	movs	r3, #120	; 0x78
  403032:	3004      	adds	r0, #4

00403034 <.LVL184>:
  403034:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
  403038:	930d      	str	r3, [sp, #52]	; 0x34
  40303a:	f048 0102 	orr.w	r1, r8, #2
  40303e:	900a      	str	r0, [sp, #40]	; 0x28
  403040:	2500      	movs	r5, #0

00403042 <.LVL185>:
  403042:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c

00403046 <.LVL186>:
  403046:	2302      	movs	r3, #2
  403048:	e593      	b.n	402b72 <.L150>

0040304a <.LVL187>:
  40304a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40304c:	930d      	str	r3, [sp, #52]	; 0x34
  40304e:	f018 0f08 	tst.w	r8, #8
  403052:	f105 0507 	add.w	r5, r5, #7
  403056:	f000 84ed 	beq.w	403a34 <.LVL468>
  40305a:	f025 0307 	bic.w	r3, r5, #7
  40305e:	ed93 8b00 	vldr	d8, [r3]

00403062 <.LVL188>:
  403062:	f103 0208 	add.w	r2, r3, #8
  403066:	920a      	str	r2, [sp, #40]	; 0x28

00403068 <.LVL189>:
  403068:	eeb0 7bc8 	vabs.f64	d7, d8
  40306c:	eeb4 7b49 	vcmp.f64	d7, d9
  403070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403074:	f340 8439 	ble.w	4038ea <.LBE27>
  403078:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
  40307c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403080:	f100 86f0 	bmi.w	403e64 <.LVL595>
  403084:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  403088:	4e4e      	ldr	r6, [pc, #312]	; (4031c4 <.LVL227+0xe>)

0040308a <.LVL190>:
  40308a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40308c:	2303      	movs	r3, #3
  40308e:	2100      	movs	r1, #0
  403090:	4618      	mov	r0, r3
  403092:	9302      	str	r3, [sp, #8]
  403094:	1f33      	subs	r3, r6, #4
  403096:	9109      	str	r1, [sp, #36]	; 0x24
  403098:	f028 0880 	bic.w	r8, r8, #128	; 0x80

0040309c <.LVL191>:
  40309c:	2c47      	cmp	r4, #71	; 0x47
  40309e:	bfd8      	it	le
  4030a0:	461e      	movle	r6, r3

004030a2 <.LVL192>:
  4030a2:	9008      	str	r0, [sp, #32]
  4030a4:	9104      	str	r1, [sp, #16]
  4030a6:	9113      	str	r1, [sp, #76]	; 0x4c
  4030a8:	9110      	str	r1, [sp, #64]	; 0x40
  4030aa:	910e      	str	r1, [sp, #56]	; 0x38
  4030ac:	e589      	b.n	402bc2 <.L59>

004030ae <.LVL193>:
  4030ae:	980a      	ldr	r0, [sp, #40]	; 0x28
  4030b0:	930d      	str	r3, [sp, #52]	; 0x34
  4030b2:	6801      	ldr	r1, [r0, #0]
  4030b4:	f88d 10d4 	strb.w	r1, [sp, #212]	; 0xd4

004030b8 <.LVL194>:
  4030b8:	2300      	movs	r3, #0
  4030ba:	4601      	mov	r1, r0
  4030bc:	461a      	mov	r2, r3
  4030be:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
  4030c2:	3104      	adds	r1, #4

004030c4 <.LVL195>:
  4030c4:	2301      	movs	r3, #1
  4030c6:	9302      	str	r3, [sp, #8]
  4030c8:	9209      	str	r2, [sp, #36]	; 0x24
  4030ca:	9204      	str	r2, [sp, #16]
  4030cc:	9213      	str	r2, [sp, #76]	; 0x4c
  4030ce:	9210      	str	r2, [sp, #64]	; 0x40
  4030d0:	920e      	str	r2, [sp, #56]	; 0x38
  4030d2:	910a      	str	r1, [sp, #40]	; 0x28
  4030d4:	9308      	str	r3, [sp, #32]
  4030d6:	ae35      	add	r6, sp, #212	; 0xd4

004030d8 <.LVL196>:
  4030d8:	e577      	b.n	402bca <.LVL64>

004030da <.LVL197>:
  4030da:	f048 0110 	orr.w	r1, r8, #16

004030de <.LVL198>:
  4030de:	068c      	lsls	r4, r1, #26
  4030e0:	930d      	str	r3, [sp, #52]	; 0x34
  4030e2:	f57f aec1 	bpl.w	402e68 <.LVL134+0x8>
  4030e6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4030e8:	3507      	adds	r5, #7
  4030ea:	f025 0507 	bic.w	r5, r5, #7
  4030ee:	e9d5 2300 	ldrd	r2, r3, [r5]
  4030f2:	2a00      	cmp	r2, #0
  4030f4:	f105 0008 	add.w	r0, r5, #8
  4030f8:	461d      	mov	r5, r3
  4030fa:	f173 0300 	sbcs.w	r3, r3, #0
  4030fe:	900a      	str	r0, [sp, #40]	; 0x28

00403100 <.LVL199>:
  403100:	4614      	mov	r4, r2

00403102 <.LVL200>:
  403102:	f6bf aec7 	bge.w	402e94 <.LVL137+0xa>

00403106 <.LVL201>:
  403106:	232d      	movs	r3, #45	; 0x2d
  403108:	4264      	negs	r4, r4

0040310a <.LVL202>:
  40310a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
  40310e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1

00403112 <.LVL203>:
  403112:	2301      	movs	r3, #1
  403114:	e530      	b.n	402b78 <.L65>

00403116 <.LVL204>:
  403116:	783b      	ldrb	r3, [r7, #0]
  403118:	2b6c      	cmp	r3, #108	; 0x6c
  40311a:	bf03      	ittte	eq
  40311c:	787b      	ldrbeq	r3, [r7, #1]
  40311e:	f048 0820 	orreq.w	r8, r8, #32
  403122:	3701      	addeq	r7, #1

00403124 <.LVL206>:
  403124:	f048 0810 	orrne.w	r8, r8, #16
  403128:	e43d      	b.n	4029a6 <.LVL22>

0040312a <.LVL208>:
  40312a:	f018 0f20 	tst.w	r8, #32
  40312e:	f040 8509 	bne.w	403b44 <.LVL499>
  403132:	f018 0f10 	tst.w	r8, #16
  403136:	d135      	bne.n	4031a4 <.LVL222>
  403138:	f018 0f40 	tst.w	r8, #64	; 0x40
  40313c:	f040 8678 	bne.w	403e30 <.LBE23>
  403140:	f418 7f00 	tst.w	r8, #512	; 0x200
  403144:	d02e      	beq.n	4031a4 <.LVL222>

00403146 <.LVL209>:
  403146:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403148:	6813      	ldr	r3, [r2, #0]
  40314a:	3204      	adds	r2, #4

0040314c <.LVL210>:
  40314c:	920a      	str	r2, [sp, #40]	; 0x28
  40314e:	f89d 200c 	ldrb.w	r2, [sp, #12]

00403152 <.LVL211>:
  403152:	701a      	strb	r2, [r3, #0]
  403154:	463e      	mov	r6, r7

00403156 <.LVL212>:
  403156:	f7ff bbf6 	b.w	402946 <.LVL10>

0040315a <.LVL213>:
  40315a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40315e:	2300      	movs	r3, #0
  403160:	4619      	mov	r1, r3

00403162 <.LVL214>:
  403162:	f817 3b01 	ldrb.w	r3, [r7], #1

00403166 <.LVL215>:
  403166:	eb01 0181 	add.w	r1, r1, r1, lsl #2

0040316a <.LVL216>:
  40316a:	eb02 0141 	add.w	r1, r2, r1, lsl #1

0040316e <.LVL217>:
  40316e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  403172:	2a09      	cmp	r2, #9
  403174:	d9f5      	bls.n	403162 <.LVL214>
  403176:	9107      	str	r1, [sp, #28]
  403178:	e416      	b.n	4029a8 <.LVL22+0x2>

0040317a <.LVL218>:
  40317a:	4619      	mov	r1, r3
  40317c:	930d      	str	r3, [sp, #52]	; 0x34
  40317e:	2b00      	cmp	r3, #0
  403180:	f000 84cf 	beq.w	403b22 <.LDL1>

00403184 <.LVL219>:
  403184:	2300      	movs	r3, #0
  403186:	2001      	movs	r0, #1
  403188:	461a      	mov	r2, r3
  40318a:	9002      	str	r0, [sp, #8]
  40318c:	f88d 10d4 	strb.w	r1, [sp, #212]	; 0xd4

00403190 <.LVL220>:
  403190:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
  403194:	9309      	str	r3, [sp, #36]	; 0x24
  403196:	9304      	str	r3, [sp, #16]
  403198:	9313      	str	r3, [sp, #76]	; 0x4c
  40319a:	9310      	str	r3, [sp, #64]	; 0x40
  40319c:	930e      	str	r3, [sp, #56]	; 0x38
  40319e:	9008      	str	r0, [sp, #32]
  4031a0:	ae35      	add	r6, sp, #212	; 0xd4

004031a2 <.LVL221>:
  4031a2:	e512      	b.n	402bca <.LVL64>

004031a4 <.LVL222>:
  4031a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4031a6:	6813      	ldr	r3, [r2, #0]
  4031a8:	3204      	adds	r2, #4

004031aa <.LVL223>:
  4031aa:	920a      	str	r2, [sp, #40]	; 0x28
  4031ac:	9a03      	ldr	r2, [sp, #12]

004031ae <.LVL224>:
  4031ae:	601a      	str	r2, [r3, #0]

004031b0 <.LVL225>:
  4031b0:	463e      	mov	r6, r7

004031b2 <.LVL226>:
  4031b2:	f7ff bbc8 	b.w	402946 <.LVL10>

004031b6 <.LVL227>:
  4031b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4031b8:	e553      	b.n	402c62 <.LVL82>
  4031ba:	bf00      	nop
  4031bc:	0040b0cc 	.word	0x0040b0cc
  4031c0:	0040b0e0 	.word	0x0040b0e0
  4031c4:	0040b0c0 	.word	0x0040b0c0

004031c8 <.LVL228>:
  4031c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4031ca:	2a65      	cmp	r2, #101	; 0x65
  4031cc:	f340 8096 	ble.w	4032fc <.LVL260>
  4031d0:	eeb5 8b40 	vcmp.f64	d8, #0.0
  4031d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4031d8:	f040 8139 	bne.w	40344e <.LVL295>
  4031dc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  4031de:	49c2      	ldr	r1, [pc, #776]	; (4034e8 <.LVL315+0x6>)
  4031e0:	f8c9 1000 	str.w	r1, [r9]
  4031e4:	3201      	adds	r2, #1
  4031e6:	3301      	adds	r3, #1
  4031e8:	2101      	movs	r1, #1
  4031ea:	2a07      	cmp	r2, #7
  4031ec:	9324      	str	r3, [sp, #144]	; 0x90
  4031ee:	9223      	str	r2, [sp, #140]	; 0x8c
  4031f0:	f8c9 1004 	str.w	r1, [r9, #4]
  4031f4:	f300 8444 	bgt.w	403a80 <.LBE21>

004031f8 <.LVL229>:
  4031f8:	f109 0908 	add.w	r9, r9, #8

004031fc <.LVL230>:
  4031fc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  4031fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403200:	4293      	cmp	r3, r2
  403202:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403204:	db03      	blt.n	40320e <.LVL230+0x12>
  403206:	f018 0f01 	tst.w	r8, #1
  40320a:	f43f ad9d 	beq.w	402d48 <.LVL104>
  40320e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  403210:	9815      	ldr	r0, [sp, #84]	; 0x54
  403212:	9917      	ldr	r1, [sp, #92]	; 0x5c
  403214:	f8c9 1000 	str.w	r1, [r9]
  403218:	3201      	adds	r2, #1
  40321a:	4403      	add	r3, r0
  40321c:	2a07      	cmp	r2, #7
  40321e:	f8c9 0004 	str.w	r0, [r9, #4]
  403222:	9324      	str	r3, [sp, #144]	; 0x90

00403224 <.LVL231>:
  403224:	9223      	str	r2, [sp, #140]	; 0x8c
  403226:	f300 84b2 	bgt.w	403b8e <.LVL509>

0040322a <.LVL232>:
  40322a:	f109 0908 	add.w	r9, r9, #8

0040322e <.LVL233>:
  40322e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403230:	1e54      	subs	r4, r2, #1
  403232:	2c00      	cmp	r4, #0
  403234:	f77f ad88 	ble.w	402d48 <.LVL104>
  403238:	2c10      	cmp	r4, #16
  40323a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40323c:	f340 8308 	ble.w	403850 <.LVL421>
  403240:	2510      	movs	r5, #16
  403242:	9e05      	ldr	r6, [sp, #20]
  403244:	e005      	b.n	403252 <.LVL238>

00403246 <.LVL235>:
  403246:	f109 0908 	add.w	r9, r9, #8

0040324a <.LVL236>:
  40324a:	3c10      	subs	r4, #16
  40324c:	2c10      	cmp	r4, #16
  40324e:	f340 82ff 	ble.w	403850 <.LVL421>

00403252 <.LVL238>:
  403252:	3201      	adds	r2, #1
  403254:	3310      	adds	r3, #16
  403256:	2a07      	cmp	r2, #7
  403258:	9324      	str	r3, [sp, #144]	; 0x90

0040325a <.LVL239>:
  40325a:	9223      	str	r2, [sp, #140]	; 0x8c
  40325c:	f8c9 a000 	str.w	sl, [r9]
  403260:	f8c9 5004 	str.w	r5, [r9, #4]
  403264:	ddef      	ble.n	403246 <.LVL235>
  403266:	aa22      	add	r2, sp, #136	; 0x88
  403268:	4631      	mov	r1, r6
  40326a:	4658      	mov	r0, fp
  40326c:	f005 fc10 	bl	408a90 <.LFE25>

00403270 <.LVL240>:
  403270:	2800      	cmp	r0, #0
  403272:	f47f ac31 	bne.w	402ad8 <.L189>
  403276:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403278:	9a23      	ldr	r2, [sp, #140]	; 0x8c

0040327a <.LVL241>:
  40327a:	f10d 0994 	add.w	r9, sp, #148	; 0x94

0040327e <.LVL242>:
  40327e:	e7e4      	b.n	40324a <.LVL236>

00403280 <.LVL243>:
  403280:	9a07      	ldr	r2, [sp, #28]
  403282:	9902      	ldr	r1, [sp, #8]
  403284:	1a54      	subs	r4, r2, r1

00403286 <.LVL244>:
  403286:	2c00      	cmp	r4, #0
  403288:	f77f ad0f 	ble.w	402caa <.LVL86+0x8>
  40328c:	2c10      	cmp	r4, #16
  40328e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  403290:	dd26      	ble.n	4032e0 <.LVL257>
  403292:	4649      	mov	r1, r9
  403294:	2510      	movs	r5, #16
  403296:	46a1      	mov	r9, r4
  403298:	9c05      	ldr	r4, [sp, #20]

0040329a <.LVL245>:
  40329a:	e006      	b.n	4032aa <.LVL249>

0040329c <.LVL246>:
  40329c:	f1a9 0910 	sub.w	r9, r9, #16

004032a0 <.LVL247>:
  4032a0:	f1b9 0f10 	cmp.w	r9, #16
  4032a4:	f101 0108 	add.w	r1, r1, #8

004032a8 <.LVL248>:
  4032a8:	dd18      	ble.n	4032dc <.LVL256>

004032aa <.LVL249>:
  4032aa:	3201      	adds	r2, #1
  4032ac:	3310      	adds	r3, #16
  4032ae:	2a07      	cmp	r2, #7
  4032b0:	9324      	str	r3, [sp, #144]	; 0x90

004032b2 <.LVL250>:
  4032b2:	9223      	str	r2, [sp, #140]	; 0x8c
  4032b4:	f8c1 a000 	str.w	sl, [r1]
  4032b8:	604d      	str	r5, [r1, #4]
  4032ba:	ddef      	ble.n	40329c <.LVL246>
  4032bc:	aa22      	add	r2, sp, #136	; 0x88
  4032be:	4621      	mov	r1, r4

004032c0 <.LVL251>:
  4032c0:	4658      	mov	r0, fp
  4032c2:	f005 fbe5 	bl	408a90 <.LFE25>

004032c6 <.LVL252>:
  4032c6:	2800      	cmp	r0, #0
  4032c8:	f47f ac06 	bne.w	402ad8 <.L189>
  4032cc:	f1a9 0910 	sub.w	r9, r9, #16

004032d0 <.LVL253>:
  4032d0:	f1b9 0f10 	cmp.w	r9, #16
  4032d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4032d6:	9a23      	ldr	r2, [sp, #140]	; 0x8c

004032d8 <.LVL254>:
  4032d8:	a925      	add	r1, sp, #148	; 0x94

004032da <.LVL255>:
  4032da:	dce6      	bgt.n	4032aa <.LVL249>

004032dc <.LVL256>:
  4032dc:	464c      	mov	r4, r9
  4032de:	4689      	mov	r9, r1

004032e0 <.LVL257>:
  4032e0:	3201      	adds	r2, #1
  4032e2:	4423      	add	r3, r4
  4032e4:	2a07      	cmp	r2, #7
  4032e6:	9324      	str	r3, [sp, #144]	; 0x90
  4032e8:	9223      	str	r2, [sp, #140]	; 0x8c
  4032ea:	f8c9 a000 	str.w	sl, [r9]
  4032ee:	f8c9 4004 	str.w	r4, [r9, #4]
  4032f2:	f300 82e6 	bgt.w	4038c2 <.LVL432>

004032f6 <.LVL258>:
  4032f6:	f109 0908 	add.w	r9, r9, #8

004032fa <.LVL259>:
  4032fa:	e4d6      	b.n	402caa <.LVL86+0x8>

004032fc <.LVL260>:
  4032fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4032fe:	f8c9 6000 	str.w	r6, [r9]
  403302:	2a01      	cmp	r2, #1
  403304:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  403306:	f103 0301 	add.w	r3, r3, #1
  40330a:	f102 0201 	add.w	r2, r2, #1
  40330e:	f04f 0101 	mov.w	r1, #1
  403312:	9324      	str	r3, [sp, #144]	; 0x90
  403314:	9223      	str	r2, [sp, #140]	; 0x8c
  403316:	f8c9 1004 	str.w	r1, [r9, #4]
  40331a:	f340 82a5 	ble.w	403868 <.LBE19>
  40331e:	2a07      	cmp	r2, #7
  403320:	f300 82b5 	bgt.w	40388e <.LBE26>
  403324:	f109 0908 	add.w	r9, r9, #8

00403328 <.LVL261>:
  403328:	9815      	ldr	r0, [sp, #84]	; 0x54
  40332a:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40332c:	f8c9 1000 	str.w	r1, [r9]
  403330:	3201      	adds	r2, #1
  403332:	4403      	add	r3, r0
  403334:	2a07      	cmp	r2, #7
  403336:	9324      	str	r3, [sp, #144]	; 0x90

00403338 <.LVL262>:
  403338:	9223      	str	r2, [sp, #140]	; 0x8c
  40333a:	f8c9 0004 	str.w	r0, [r9, #4]
  40333e:	f300 82b3 	bgt.w	4038a8 <.LVL429>
  403342:	f109 0908 	add.w	r9, r9, #8

00403346 <.LVL263>:
  403346:	eeb5 8b40 	vcmp.f64	d8, #0.0
  40334a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40334e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403350:	f000 8121 	beq.w	403596 <.LVL337>
  403354:	3901      	subs	r1, #1
  403356:	3201      	adds	r2, #1
  403358:	3601      	adds	r6, #1

0040335a <.LVL264>:
  40335a:	440b      	add	r3, r1
  40335c:	2a07      	cmp	r2, #7
  40335e:	f8c9 6000 	str.w	r6, [r9]
  403362:	9223      	str	r2, [sp, #140]	; 0x8c
  403364:	9324      	str	r3, [sp, #144]	; 0x90

00403366 <.LVL265>:
  403366:	f8c9 1004 	str.w	r1, [r9, #4]
  40336a:	f300 8146 	bgt.w	4035fa <.LVL348>

0040336e <.LVL266>:
  40336e:	f109 0908 	add.w	r9, r9, #8

00403372 <.LVL267>:
  403372:	9819      	ldr	r0, [sp, #100]	; 0x64
  403374:	f8c9 0004 	str.w	r0, [r9, #4]
  403378:	3201      	adds	r2, #1
  40337a:	4403      	add	r3, r0
  40337c:	a91e      	add	r1, sp, #120	; 0x78
  40337e:	2a07      	cmp	r2, #7
  403380:	9324      	str	r3, [sp, #144]	; 0x90

00403382 <.LVL268>:
  403382:	9223      	str	r2, [sp, #140]	; 0x8c
  403384:	f8c9 1000 	str.w	r1, [r9]
  403388:	f77f acdc 	ble.w	402d44 <.LVL103>

0040338c <.LVL269>:
  40338c:	aa22      	add	r2, sp, #136	; 0x88
  40338e:	9905      	ldr	r1, [sp, #20]
  403390:	4658      	mov	r0, fp
  403392:	f005 fb7d 	bl	408a90 <.LFE25>

00403396 <.LVL270>:
  403396:	2800      	cmp	r0, #0
  403398:	f47f ab9e 	bne.w	402ad8 <.L189>
  40339c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40339e:	f10d 0994 	add.w	r9, sp, #148	; 0x94
  4033a2:	e4d1      	b.n	402d48 <.LVL104>

004033a4 <.LVL271>:
  4033a4:	4641      	mov	r1, r8

004033a6 <.LVL272>:
  4033a6:	2b01      	cmp	r3, #1
  4033a8:	f000 8135 	beq.w	403616 <.LVL351>
  4033ac:	2b02      	cmp	r3, #2
  4033ae:	d127      	bne.n	403400 <.LVL286>
  4033b0:	4688      	mov	r8, r1
  4033b2:	2400      	movs	r4, #0

004033b4 <.LVL273>:
  4033b4:	2500      	movs	r5, #0
  4033b6:	e57e      	b.n	402eb6 <.LVL141>

004033b8 <.LVL274>:
  4033b8:	aa22      	add	r2, sp, #136	; 0x88
  4033ba:	9905      	ldr	r1, [sp, #20]
  4033bc:	4658      	mov	r0, fp
  4033be:	f005 fb67 	bl	408a90 <.LFE25>

004033c2 <.LVL275>:
  4033c2:	2800      	cmp	r0, #0
  4033c4:	f47f ab88 	bne.w	402ad8 <.L189>
  4033c8:	9b24      	ldr	r3, [sp, #144]	; 0x90

004033ca <.LVL276>:
  4033ca:	f10d 0994 	add.w	r9, sp, #148	; 0x94

004033ce <.LVL277>:
  4033ce:	e4a8      	b.n	402d22 <.LVL102>

004033d0 <.LVL278>:
  4033d0:	aa22      	add	r2, sp, #136	; 0x88
  4033d2:	9905      	ldr	r1, [sp, #20]
  4033d4:	4658      	mov	r0, fp
  4033d6:	f005 fb5b 	bl	408a90 <.LFE25>

004033da <.LVL279>:
  4033da:	2800      	cmp	r0, #0
  4033dc:	f47f ab7c 	bne.w	402ad8 <.L189>
  4033e0:	9b24      	ldr	r3, [sp, #144]	; 0x90

004033e2 <.LVL280>:
  4033e2:	f10d 0994 	add.w	r9, sp, #148	; 0x94

004033e6 <.LVL281>:
  4033e6:	e44c      	b.n	402c82 <.LVL84>

004033e8 <.LVL282>:
  4033e8:	aa22      	add	r2, sp, #136	; 0x88
  4033ea:	9905      	ldr	r1, [sp, #20]
  4033ec:	4658      	mov	r0, fp
  4033ee:	f005 fb4f 	bl	408a90 <.LFE25>

004033f2 <.LVL283>:
  4033f2:	2800      	cmp	r0, #0
  4033f4:	f47f ab70 	bne.w	402ad8 <.L189>
  4033f8:	9b24      	ldr	r3, [sp, #144]	; 0x90

004033fa <.LVL284>:
  4033fa:	f10d 0994 	add.w	r9, sp, #148	; 0x94

004033fe <.LVL285>:
  4033fe:	e450      	b.n	402ca2 <.LVL86>

00403400 <.LVL286>:
  403400:	4688      	mov	r8, r1
  403402:	2400      	movs	r4, #0

00403404 <.LVL287>:
  403404:	2500      	movs	r5, #0

00403406 <.LVL288>:
  403406:	a94e      	add	r1, sp, #312	; 0x138

00403408 <.LVL289>:
  403408:	e000      	b.n	40340c <.LVL291>

0040340a <.LVL290>:
  40340a:	4631      	mov	r1, r6

0040340c <.LVL291>:
  40340c:	08e2      	lsrs	r2, r4, #3
  40340e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  403412:	08e8      	lsrs	r0, r5, #3
  403414:	f004 0307 	and.w	r3, r4, #7
  403418:	4605      	mov	r5, r0
  40341a:	4614      	mov	r4, r2

0040341c <.LVL292>:
  40341c:	3330      	adds	r3, #48	; 0x30
  40341e:	ea54 0205 	orrs.w	r2, r4, r5
  403422:	f801 3c01 	strb.w	r3, [r1, #-1]
  403426:	f101 36ff 	add.w	r6, r1, #4294967295

0040342a <.LVL293>:
  40342a:	d1ee      	bne.n	40340a <.LVL290>
  40342c:	f018 0f01 	tst.w	r8, #1
  403430:	f43f ad51 	beq.w	402ed6 <.LVL147>
  403434:	2b30      	cmp	r3, #48	; 0x30
  403436:	f43f ad4e 	beq.w	402ed6 <.LVL147>
  40343a:	2330      	movs	r3, #48	; 0x30
  40343c:	3902      	subs	r1, #2

0040343e <.LVL294>:
  40343e:	f806 3c01 	strb.w	r3, [r6, #-1]
  403442:	ab4e      	add	r3, sp, #312	; 0x138
  403444:	1a5b      	subs	r3, r3, r1
  403446:	9308      	str	r3, [sp, #32]
  403448:	460e      	mov	r6, r1
  40344a:	f7ff bbad 	b.w	402ba8 <.LVL61>

0040344e <.LVL295>:
  40344e:	991c      	ldr	r1, [sp, #112]	; 0x70
  403450:	2900      	cmp	r1, #0
  403452:	f340 832f 	ble.w	403ab4 <.LBE46>

00403456 <.LVL296>:
  403456:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403458:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40345a:	428a      	cmp	r2, r1
  40345c:	bfa8      	it	ge
  40345e:	460a      	movge	r2, r1

00403460 <.LBB13>:
  403460:	2a00      	cmp	r2, #0
  403462:	4614      	mov	r4, r2

00403464 <.LVL297>:
  403464:	dd0d      	ble.n	403482 <.LVL300>
  403466:	9a23      	ldr	r2, [sp, #140]	; 0x8c

00403468 <.LVL298>:
  403468:	f8c9 6000 	str.w	r6, [r9]
  40346c:	3201      	adds	r2, #1
  40346e:	4423      	add	r3, r4
  403470:	2a07      	cmp	r2, #7
  403472:	9324      	str	r3, [sp, #144]	; 0x90
  403474:	f8c9 4004 	str.w	r4, [r9, #4]
  403478:	9223      	str	r2, [sp, #140]	; 0x8c
  40347a:	f300 84cc 	bgt.w	403e16 <.LBB23>

0040347e <.LVL299>:
  40347e:	f109 0908 	add.w	r9, r9, #8

00403482 <.LVL300>:
  403482:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403484:	2c00      	cmp	r4, #0
  403486:	bfa8      	it	ge
  403488:	1b12      	subge	r2, r2, r4
  40348a:	2a00      	cmp	r2, #0
  40348c:	4614      	mov	r4, r2

0040348e <.LVL301>:
  40348e:	f340 8100 	ble.w	403692 <.LBE15>
  403492:	2c10      	cmp	r4, #16
  403494:	9a23      	ldr	r2, [sp, #140]	; 0x8c

00403496 <.LVL302>:
  403496:	f340 82d8 	ble.w	403a4a <.LBB20>
  40349a:	4649      	mov	r1, r9
  40349c:	2510      	movs	r5, #16
  40349e:	46a1      	mov	r9, r4
  4034a0:	9c05      	ldr	r4, [sp, #20]

004034a2 <.LVL303>:
  4034a2:	e006      	b.n	4034b2 <.LVL307>

004034a4 <.LVL304>:
  4034a4:	3108      	adds	r1, #8

004034a6 <.LVL305>:
  4034a6:	f1a9 0910 	sub.w	r9, r9, #16
  4034aa:	f1b9 0f10 	cmp.w	r9, #16
  4034ae:	f340 82ca 	ble.w	403a46 <.LVL471>

004034b2 <.LVL307>:
  4034b2:	3201      	adds	r2, #1
  4034b4:	3310      	adds	r3, #16
  4034b6:	2a07      	cmp	r2, #7
  4034b8:	9324      	str	r3, [sp, #144]	; 0x90

004034ba <.LVL308>:
  4034ba:	9223      	str	r2, [sp, #140]	; 0x8c
  4034bc:	f8c1 a000 	str.w	sl, [r1]
  4034c0:	604d      	str	r5, [r1, #4]
  4034c2:	ddef      	ble.n	4034a4 <.LVL304>
  4034c4:	aa22      	add	r2, sp, #136	; 0x88
  4034c6:	4621      	mov	r1, r4

004034c8 <.LVL309>:
  4034c8:	4658      	mov	r0, fp
  4034ca:	f005 fae1 	bl	408a90 <.LFE25>

004034ce <.LVL310>:
  4034ce:	2800      	cmp	r0, #0
  4034d0:	f47f ab02 	bne.w	402ad8 <.L189>
  4034d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4034d6:	9a23      	ldr	r2, [sp, #140]	; 0x8c

004034d8 <.LVL311>:
  4034d8:	a925      	add	r1, sp, #148	; 0x94

004034da <.LVL312>:
  4034da:	e7e4      	b.n	4034a6 <.LVL305>

004034dc <.LBE13>:
  4034dc:	9b04      	ldr	r3, [sp, #16]

004034de <.LVL314>:
  4034de:	9308      	str	r3, [sp, #32]
  4034e0:	ae4e      	add	r6, sp, #312	; 0x138

004034e2 <.LVL315>:
  4034e2:	f7ff bb61 	b.w	402ba8 <.LVL61>
  4034e6:	bf00      	nop
  4034e8:	0040b0fc 	.word	0x0040b0fc

004034ec <.LVL316>:
  4034ec:	2d00      	cmp	r5, #0
  4034ee:	bf08      	it	eq
  4034f0:	2c0a      	cmpeq	r4, #10
  4034f2:	f0c0 808f 	bcc.w	403614 <.LVL350>
  4034f6:	f408 6380 	and.w	r3, r8, #1024	; 0x400

004034fa <.LVL317>:
  4034fa:	2200      	movs	r2, #0
  4034fc:	9702      	str	r7, [sp, #8]
  4034fe:	f8cd 9018 	str.w	r9, [sp, #24]
  403502:	f8cd b020 	str.w	fp, [sp, #32]
  403506:	ae4e      	add	r6, sp, #312	; 0x138

00403508 <.LVL318>:
  403508:	46c3      	mov	fp, r8
  40350a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48

0040350e <.LVL319>:
  40350e:	4617      	mov	r7, r2

00403510 <.LVL320>:
  403510:	4698      	mov	r8, r3

00403512 <.LVL321>:
  403512:	e00a      	b.n	40352a <.LVL325+0x6>

00403514 <.LVL322>:
  403514:	2300      	movs	r3, #0
  403516:	4620      	mov	r0, r4
  403518:	4629      	mov	r1, r5
  40351a:	220a      	movs	r2, #10
  40351c:	f008 f840 	bl	40b5a0 <.LBE14>
  403520:	4604      	mov	r4, r0

00403522 <.LVL324>:
  403522:	460d      	mov	r5, r1

00403524 <.LVL325>:
  403524:	ea54 0305 	orrs.w	r3, r4, r5
  403528:	d07e      	beq.n	403628 <.LVL354>
  40352a:	220a      	movs	r2, #10
  40352c:	2300      	movs	r3, #0
  40352e:	4620      	mov	r0, r4
  403530:	4629      	mov	r1, r5
  403532:	f008 f835 	bl	40b5a0 <.LBE14>
  403536:	3230      	adds	r2, #48	; 0x30
  403538:	f806 2c01 	strb.w	r2, [r6, #-1]
  40353c:	3701      	adds	r7, #1

0040353e <.LVL328>:
  40353e:	3e01      	subs	r6, #1

00403540 <.LVL329>:
  403540:	f1b8 0f00 	cmp.w	r8, #0
  403544:	d0e6      	beq.n	403514 <.LVL322>
  403546:	f899 3000 	ldrb.w	r3, [r9]
  40354a:	429f      	cmp	r7, r3
  40354c:	d1e2      	bne.n	403514 <.LVL322>
  40354e:	2fff      	cmp	r7, #255	; 0xff
  403550:	d0e0      	beq.n	403514 <.LVL322>
  403552:	2d00      	cmp	r5, #0
  403554:	bf08      	it	eq
  403556:	2c0a      	cmpeq	r4, #10
  403558:	d3dc      	bcc.n	403514 <.LVL322>
  40355a:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40355c:	9916      	ldr	r1, [sp, #88]	; 0x58
  40355e:	1af6      	subs	r6, r6, r3
  403560:	4630      	mov	r0, r6
  403562:	461a      	mov	r2, r3
  403564:	f007 fa0e 	bl	40a984 <.LFE12>

00403568 <.LVL331>:
  403568:	f899 7001 	ldrb.w	r7, [r9, #1]
  40356c:	2f00      	cmp	r7, #0
  40356e:	d0d1      	beq.n	403514 <.LVL322>
  403570:	f109 0901 	add.w	r9, r9, #1
  403574:	2700      	movs	r7, #0
  403576:	e7cd      	b.n	403514 <.LVL322>

00403578 <.LVL333>:
  403578:	aa22      	add	r2, sp, #136	; 0x88
  40357a:	9905      	ldr	r1, [sp, #20]
  40357c:	4658      	mov	r0, fp
  40357e:	f005 fa87 	bl	408a90 <.LFE25>

00403582 <.LVL334>:
  403582:	2800      	cmp	r0, #0
  403584:	f47f aaa8 	bne.w	402ad8 <.L189>
  403588:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  40358c:	9b24      	ldr	r3, [sp, #144]	; 0x90

0040358e <.LVL335>:
  40358e:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00403592 <.LVL336>:
  403592:	f7ff bb66 	b.w	402c62 <.LVL82>

00403596 <.LVL337>:
  403596:	1e4c      	subs	r4, r1, #1
  403598:	2c00      	cmp	r4, #0
  40359a:	f77f aeea 	ble.w	403372 <.LVL267>
  40359e:	2c10      	cmp	r4, #16
  4035a0:	dd20      	ble.n	4035e4 <.LVL346+0x2>
  4035a2:	2510      	movs	r5, #16
  4035a4:	9e05      	ldr	r6, [sp, #20]

004035a6 <.LVL339>:
  4035a6:	e004      	b.n	4035b2 <.LVL342+0x2>

004035a8 <.LVL340>:
  4035a8:	3c10      	subs	r4, #16

004035aa <.LVL341>:
  4035aa:	2c10      	cmp	r4, #16
  4035ac:	f109 0908 	add.w	r9, r9, #8

004035b0 <.LVL342>:
  4035b0:	dd18      	ble.n	4035e4 <.LVL346+0x2>
  4035b2:	3201      	adds	r2, #1
  4035b4:	3310      	adds	r3, #16
  4035b6:	2a07      	cmp	r2, #7
  4035b8:	9324      	str	r3, [sp, #144]	; 0x90

004035ba <.LVL343>:
  4035ba:	9223      	str	r2, [sp, #140]	; 0x8c
  4035bc:	f8c9 a000 	str.w	sl, [r9]
  4035c0:	f8c9 5004 	str.w	r5, [r9, #4]
  4035c4:	ddf0      	ble.n	4035a8 <.LVL340>
  4035c6:	aa22      	add	r2, sp, #136	; 0x88
  4035c8:	4631      	mov	r1, r6
  4035ca:	4658      	mov	r0, fp
  4035cc:	f005 fa60 	bl	408a90 <.LFE25>

004035d0 <.LVL344>:
  4035d0:	2800      	cmp	r0, #0
  4035d2:	f47f aa81 	bne.w	402ad8 <.L189>
  4035d6:	3c10      	subs	r4, #16

004035d8 <.LVL345>:
  4035d8:	2c10      	cmp	r4, #16
  4035da:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4035dc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  4035de:	f10d 0994 	add.w	r9, sp, #148	; 0x94

004035e2 <.LVL346>:
  4035e2:	dce6      	bgt.n	4035b2 <.LVL342+0x2>
  4035e4:	3201      	adds	r2, #1
  4035e6:	4423      	add	r3, r4
  4035e8:	2a07      	cmp	r2, #7
  4035ea:	9324      	str	r3, [sp, #144]	; 0x90

004035ec <.LVL347>:
  4035ec:	9223      	str	r2, [sp, #140]	; 0x8c
  4035ee:	f8c9 a000 	str.w	sl, [r9]
  4035f2:	f8c9 4004 	str.w	r4, [r9, #4]
  4035f6:	f77f aeba 	ble.w	40336e <.LVL266>

004035fa <.LVL348>:
  4035fa:	aa22      	add	r2, sp, #136	; 0x88
  4035fc:	9905      	ldr	r1, [sp, #20]
  4035fe:	4658      	mov	r0, fp
  403600:	f005 fa46 	bl	408a90 <.LFE25>

00403604 <.LVL349>:
  403604:	2800      	cmp	r0, #0
  403606:	f47f aa67 	bne.w	402ad8 <.L189>
  40360a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40360c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40360e:	f10d 0994 	add.w	r9, sp, #148	; 0x94
  403612:	e6ae      	b.n	403372 <.LVL267>

00403614 <.LVL350>:
  403614:	4641      	mov	r1, r8

00403616 <.LVL351>:
  403616:	ae4e      	add	r6, sp, #312	; 0x138
  403618:	3430      	adds	r4, #48	; 0x30

0040361a <.LVL352>:
  40361a:	2301      	movs	r3, #1

0040361c <.LVL353>:
  40361c:	4688      	mov	r8, r1
  40361e:	f806 4d01 	strb.w	r4, [r6, #-1]!
  403622:	9308      	str	r3, [sp, #32]
  403624:	f7ff bac0 	b.w	402ba8 <.LVL61>

00403628 <.LVL354>:
  403628:	ab4e      	add	r3, sp, #312	; 0x138
  40362a:	1b9b      	subs	r3, r3, r6
  40362c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  403630:	46d8      	mov	r8, fp
  403632:	970f      	str	r7, [sp, #60]	; 0x3c
  403634:	f8dd b020 	ldr.w	fp, [sp, #32]

00403638 <.LVL355>:
  403638:	f8dd 9018 	ldr.w	r9, [sp, #24]

0040363c <.LVL356>:
  40363c:	9f02      	ldr	r7, [sp, #8]

0040363e <.LVL357>:
  40363e:	9308      	str	r3, [sp, #32]
  403640:	f7ff bab2 	b.w	402ba8 <.LVL61>

00403644 <.LVL358>:
  403644:	681c      	ldr	r4, [r3, #0]
  403646:	3304      	adds	r3, #4
  403648:	930a      	str	r3, [sp, #40]	; 0x28

0040364a <.LVL359>:
  40364a:	2500      	movs	r5, #0
  40364c:	f7ff bbed 	b.w	402e2a <.LVL126>

00403650 <.LVL360>:
  403650:	3204      	adds	r2, #4
  403652:	681c      	ldr	r4, [r3, #0]
  403654:	920a      	str	r2, [sp, #40]	; 0x28

00403656 <.LVL361>:
  403656:	2301      	movs	r3, #1
  403658:	2500      	movs	r5, #0
  40365a:	f7ff ba8a 	b.w	402b72 <.L150>

0040365e <.LVL362>:
  40365e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403660:	6814      	ldr	r4, [r2, #0]
  403662:	4613      	mov	r3, r2
  403664:	3304      	adds	r3, #4

00403666 <.LVL363>:
  403666:	17e5      	asrs	r5, r4, #31
  403668:	930a      	str	r3, [sp, #40]	; 0x28
  40366a:	4622      	mov	r2, r4
  40366c:	462b      	mov	r3, r5

0040366e <.LVL364>:
  40366e:	e40c      	b.n	402e8a <.LVL137>

00403670 <.LVL365>:
  403670:	681c      	ldr	r4, [r3, #0]
  403672:	3304      	adds	r3, #4
  403674:	930a      	str	r3, [sp, #40]	; 0x28

00403676 <.LVL366>:
  403676:	2500      	movs	r5, #0
  403678:	f7ff ba69 	b.w	402b4e <.LVL51>

0040367c <.LBB15>:
  40367c:	aa22      	add	r2, sp, #136	; 0x88
  40367e:	9905      	ldr	r1, [sp, #20]
  403680:	4658      	mov	r0, fp
  403682:	f005 fa05 	bl	408a90 <.LFE25>

00403686 <.LVL368>:
  403686:	2800      	cmp	r0, #0
  403688:	f47f aa26 	bne.w	402ad8 <.L189>
  40368c:	9b24      	ldr	r3, [sp, #144]	; 0x90

0040368e <.LVL369>:
  40368e:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00403692 <.LBE15>:
  403692:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403694:	f418 6f80 	tst.w	r8, #1024	; 0x400
  403698:	4432      	add	r2, r6
  40369a:	4615      	mov	r5, r2

0040369c <.LVL371>:
  40369c:	f000 8083 	beq.w	4037a6 <.LVL403>

004036a0 <.LBB16>:
  4036a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4036a2:	9608      	str	r6, [sp, #32]
  4036a4:	4618      	mov	r0, r3

004036a6 <.LBE16>:
  4036a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4036a8:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c

004036ac <.LBB17>:
  4036ac:	1871      	adds	r1, r6, r1
  4036ae:	9104      	str	r1, [sp, #16]
  4036b0:	9706      	str	r7, [sp, #24]
  4036b2:	4649      	mov	r1, r9
  4036b4:	4616      	mov	r6, r2

004036b6 <.LVL372>:
  4036b6:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
  4036ba:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c

004036be <.LVL373>:
  4036be:	9d05      	ldr	r5, [sp, #20]

004036c0 <.LBE17>:
  4036c0:	2b00      	cmp	r3, #0
  4036c2:	d05f      	beq.n	403784 <.LVL399>

004036c4 <.LVL374>:
  4036c4:	f1b8 0f00 	cmp.w	r8, #0
  4036c8:	f000 8108 	beq.w	4038dc <.LBB27>
  4036cc:	f108 38ff 	add.w	r8, r8, #4294967295

004036d0 <.LVL375>:
  4036d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4036d2:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4036d4:	600a      	str	r2, [r1, #0]
  4036d6:	3301      	adds	r3, #1
  4036d8:	4448      	add	r0, r9
  4036da:	2b07      	cmp	r3, #7
  4036dc:	9024      	str	r0, [sp, #144]	; 0x90
  4036de:	f8c1 9004 	str.w	r9, [r1, #4]
  4036e2:	9323      	str	r3, [sp, #140]	; 0x8c
  4036e4:	f300 80c8 	bgt.w	403878 <.LBB26>

004036e8 <.LVL376>:
  4036e8:	3108      	adds	r1, #8

004036ea <.LBB18>:
  4036ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4036ec:	9c04      	ldr	r4, [sp, #16]
  4036ee:	7813      	ldrb	r3, [r2, #0]
  4036f0:	1ba4      	subs	r4, r4, r6

004036f2 <.LVL378>:
  4036f2:	429c      	cmp	r4, r3
  4036f4:	bfa8      	it	ge
  4036f6:	461c      	movge	r4, r3
  4036f8:	2c00      	cmp	r4, #0
  4036fa:	dd0b      	ble.n	403714 <.LVL382>
  4036fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4036fe:	600e      	str	r6, [r1, #0]
  403700:	3301      	adds	r3, #1
  403702:	4420      	add	r0, r4
  403704:	2b07      	cmp	r3, #7
  403706:	9024      	str	r0, [sp, #144]	; 0x90

00403708 <.LVL380>:
  403708:	604c      	str	r4, [r1, #4]
  40370a:	9323      	str	r3, [sp, #140]	; 0x8c
  40370c:	f300 81ab 	bgt.w	403a66 <.LBB21>

00403710 <.LVL381>:
  403710:	7813      	ldrb	r3, [r2, #0]
  403712:	3108      	adds	r1, #8

00403714 <.LVL382>:
  403714:	2c00      	cmp	r4, #0
  403716:	bfac      	ite	ge
  403718:	1b1c      	subge	r4, r3, r4

0040371a <.LVL383>:
  40371a:	461c      	movlt	r4, r3

0040371c <.LVL384>:
  40371c:	2c00      	cmp	r4, #0
  40371e:	dd2d      	ble.n	40377c <.LBE18>
  403720:	2c10      	cmp	r4, #16
  403722:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  403724:	dd1d      	ble.n	403762 <.LVL395>
  403726:	2710      	movs	r7, #16
  403728:	e004      	b.n	403734 <.LVL388>

0040372a <.LVL385>:
  40372a:	3c10      	subs	r4, #16

0040372c <.LVL386>:
  40372c:	2c10      	cmp	r4, #16
  40372e:	f101 0108 	add.w	r1, r1, #8

00403732 <.LVL387>:
  403732:	dd16      	ble.n	403762 <.LVL395>

00403734 <.LVL388>:
  403734:	3201      	adds	r2, #1
  403736:	3010      	adds	r0, #16
  403738:	2a07      	cmp	r2, #7
  40373a:	9024      	str	r0, [sp, #144]	; 0x90

0040373c <.LVL389>:
  40373c:	9223      	str	r2, [sp, #140]	; 0x8c
  40373e:	f8c1 a000 	str.w	sl, [r1]
  403742:	604f      	str	r7, [r1, #4]
  403744:	ddf1      	ble.n	40372a <.LVL385>
  403746:	aa22      	add	r2, sp, #136	; 0x88
  403748:	4629      	mov	r1, r5

0040374a <.LVL390>:
  40374a:	4658      	mov	r0, fp
  40374c:	f005 f9a0 	bl	408a90 <.LFE25>

00403750 <.LVL391>:
  403750:	2800      	cmp	r0, #0
  403752:	f47f a9c1 	bne.w	402ad8 <.L189>
  403756:	3c10      	subs	r4, #16

00403758 <.LVL392>:
  403758:	2c10      	cmp	r4, #16
  40375a:	9824      	ldr	r0, [sp, #144]	; 0x90
  40375c:	9a23      	ldr	r2, [sp, #140]	; 0x8c

0040375e <.LVL393>:
  40375e:	a925      	add	r1, sp, #148	; 0x94

00403760 <.LVL394>:
  403760:	dce8      	bgt.n	403734 <.LVL388>

00403762 <.LVL395>:
  403762:	3201      	adds	r2, #1
  403764:	4420      	add	r0, r4
  403766:	2a07      	cmp	r2, #7
  403768:	9024      	str	r0, [sp, #144]	; 0x90
  40376a:	9223      	str	r2, [sp, #140]	; 0x8c
  40376c:	f8c1 a000 	str.w	sl, [r1]
  403770:	604c      	str	r4, [r1, #4]
  403772:	f300 8191 	bgt.w	403a98 <.LBB22>

00403776 <.LVL396>:
  403776:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403778:	781b      	ldrb	r3, [r3, #0]
  40377a:	3108      	adds	r1, #8

0040377c <.LBE18>:
  40377c:	441e      	add	r6, r3
  40377e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403780:	2b00      	cmp	r3, #0
  403782:	d19f      	bne.n	4036c4 <.LVL374>

00403784 <.LVL399>:
  403784:	f1b8 0f00 	cmp.w	r8, #0
  403788:	d1a0      	bne.n	4036cc <.LVL374+0x8>
  40378a:	4634      	mov	r4, r6
  40378c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40378e:	9e08      	ldr	r6, [sp, #32]

00403790 <.LVL400>:
  403790:	9f06      	ldr	r7, [sp, #24]
  403792:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c

00403796 <.LVL401>:
  403796:	18b2      	adds	r2, r6, r2
  403798:	4294      	cmp	r4, r2
  40379a:	4689      	mov	r9, r1
  40379c:	4621      	mov	r1, r4
  40379e:	bf28      	it	cs
  4037a0:	4611      	movcs	r1, r2
  4037a2:	4603      	mov	r3, r0

004037a4 <.LVL402>:
  4037a4:	460d      	mov	r5, r1

004037a6 <.LVL403>:
  4037a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  4037a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4037aa:	428a      	cmp	r2, r1
  4037ac:	f280 8201 	bge.w	403bb2 <.LBB47>
  4037b0:	9923      	ldr	r1, [sp, #140]	; 0x8c
  4037b2:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4037b4:	9817      	ldr	r0, [sp, #92]	; 0x5c
  4037b6:	f8c9 0000 	str.w	r0, [r9]
  4037ba:	3101      	adds	r1, #1
  4037bc:	4423      	add	r3, r4
  4037be:	2907      	cmp	r1, #7
  4037c0:	9324      	str	r3, [sp, #144]	; 0x90
  4037c2:	f8c9 4004 	str.w	r4, [r9, #4]
  4037c6:	9123      	str	r1, [sp, #140]	; 0x8c
  4037c8:	f300 828d 	bgt.w	403ce6 <.LBB50>

004037cc <.LVL404>:
  4037cc:	f109 0908 	add.w	r9, r9, #8

004037d0 <.LBB19>:
  4037d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4037d2:	1874      	adds	r4, r6, r1
  4037d4:	1b64      	subs	r4, r4, r5

004037d6 <.LVL406>:
  4037d6:	1a8a      	subs	r2, r1, r2
  4037d8:	4294      	cmp	r4, r2
  4037da:	bfa8      	it	ge
  4037dc:	4614      	movge	r4, r2
  4037de:	2c00      	cmp	r4, #0
  4037e0:	dd0d      	ble.n	4037fe <.LVL409>
  4037e2:	9923      	ldr	r1, [sp, #140]	; 0x8c
  4037e4:	f8c9 5000 	str.w	r5, [r9]
  4037e8:	3101      	adds	r1, #1
  4037ea:	4423      	add	r3, r4
  4037ec:	2907      	cmp	r1, #7
  4037ee:	9324      	str	r3, [sp, #144]	; 0x90
  4037f0:	f8c9 4004 	str.w	r4, [r9, #4]
  4037f4:	9123      	str	r1, [sp, #140]	; 0x8c
  4037f6:	f300 83bc 	bgt.w	403f72 <.LBB24>

004037fa <.LVL408>:
  4037fa:	f109 0908 	add.w	r9, r9, #8

004037fe <.LVL409>:
  4037fe:	2c00      	cmp	r4, #0
  403800:	bfac      	ite	ge
  403802:	1b14      	subge	r4, r2, r4

00403804 <.LVL410>:
  403804:	4614      	movlt	r4, r2

00403806 <.LVL411>:
  403806:	2c00      	cmp	r4, #0
  403808:	f77f aa9e 	ble.w	402d48 <.LVL104>
  40380c:	2c10      	cmp	r4, #16
  40380e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  403810:	dd1e      	ble.n	403850 <.LVL421>
  403812:	2510      	movs	r5, #16

00403814 <.LVL412>:
  403814:	9e05      	ldr	r6, [sp, #20]
  403816:	e004      	b.n	403822 <.LVL416>

00403818 <.LVL413>:
  403818:	f109 0908 	add.w	r9, r9, #8

0040381c <.LVL414>:
  40381c:	3c10      	subs	r4, #16
  40381e:	2c10      	cmp	r4, #16
  403820:	dd16      	ble.n	403850 <.LVL421>

00403822 <.LVL416>:
  403822:	3201      	adds	r2, #1
  403824:	3310      	adds	r3, #16
  403826:	2a07      	cmp	r2, #7
  403828:	9324      	str	r3, [sp, #144]	; 0x90

0040382a <.LVL417>:
  40382a:	9223      	str	r2, [sp, #140]	; 0x8c
  40382c:	f8c9 a000 	str.w	sl, [r9]
  403830:	f8c9 5004 	str.w	r5, [r9, #4]
  403834:	ddf0      	ble.n	403818 <.LVL413>
  403836:	aa22      	add	r2, sp, #136	; 0x88
  403838:	4631      	mov	r1, r6
  40383a:	4658      	mov	r0, fp
  40383c:	f005 f928 	bl	408a90 <.LFE25>

00403840 <.LVL418>:
  403840:	2800      	cmp	r0, #0
  403842:	f47f a949 	bne.w	402ad8 <.L189>
  403846:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403848:	9a23      	ldr	r2, [sp, #140]	; 0x8c

0040384a <.LVL419>:
  40384a:	f10d 0994 	add.w	r9, sp, #148	; 0x94

0040384e <.LVL420>:
  40384e:	e7e5      	b.n	40381c <.LVL414>

00403850 <.LVL421>:
  403850:	3201      	adds	r2, #1
  403852:	4423      	add	r3, r4
  403854:	2a07      	cmp	r2, #7
  403856:	9324      	str	r3, [sp, #144]	; 0x90
  403858:	9223      	str	r2, [sp, #140]	; 0x8c
  40385a:	f8c9 a000 	str.w	sl, [r9]
  40385e:	f8c9 4004 	str.w	r4, [r9, #4]
  403862:	f77f aa6f 	ble.w	402d44 <.LVL103>
  403866:	e591      	b.n	40338c <.LVL269>

00403868 <.LBE19>:
  403868:	f018 0f01 	tst.w	r8, #1
  40386c:	f47f ad57 	bne.w	40331e <.LVL260+0x22>
  403870:	2a07      	cmp	r2, #7
  403872:	f77f ad7c 	ble.w	40336e <.LVL266>
  403876:	e6c0      	b.n	4035fa <.LVL348>

00403878 <.LBB26>:
  403878:	aa22      	add	r2, sp, #136	; 0x88
  40387a:	4629      	mov	r1, r5
  40387c:	4658      	mov	r0, fp
  40387e:	f005 f907 	bl	408a90 <.LFE25>

00403882 <.LVL424>:
  403882:	2800      	cmp	r0, #0
  403884:	f47f a928 	bne.w	402ad8 <.L189>
  403888:	9824      	ldr	r0, [sp, #144]	; 0x90

0040388a <.LVL425>:
  40388a:	a925      	add	r1, sp, #148	; 0x94

0040388c <.LVL426>:
  40388c:	e72d      	b.n	4036ea <.LBB18>

0040388e <.LBE26>:
  40388e:	aa22      	add	r2, sp, #136	; 0x88
  403890:	9905      	ldr	r1, [sp, #20]
  403892:	4658      	mov	r0, fp
  403894:	f005 f8fc 	bl	408a90 <.LFE25>

00403898 <.LVL428>:
  403898:	2800      	cmp	r0, #0
  40389a:	f47f a91d 	bne.w	402ad8 <.L189>
  40389e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4038a0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  4038a2:	f10d 0994 	add.w	r9, sp, #148	; 0x94
  4038a6:	e53f      	b.n	403328 <.LVL261>

004038a8 <.LVL429>:
  4038a8:	aa22      	add	r2, sp, #136	; 0x88
  4038aa:	9905      	ldr	r1, [sp, #20]
  4038ac:	4658      	mov	r0, fp
  4038ae:	f005 f8ef 	bl	408a90 <.LFE25>

004038b2 <.LVL430>:
  4038b2:	2800      	cmp	r0, #0
  4038b4:	f47f a910 	bne.w	402ad8 <.L189>
  4038b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4038ba:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  4038bc:	f10d 0994 	add.w	r9, sp, #148	; 0x94

004038c0 <.LVL431>:
  4038c0:	e541      	b.n	403346 <.LVL263>

004038c2 <.LVL432>:
  4038c2:	aa22      	add	r2, sp, #136	; 0x88
  4038c4:	9905      	ldr	r1, [sp, #20]
  4038c6:	4658      	mov	r0, fp
  4038c8:	f005 f8e2 	bl	408a90 <.LFE25>

004038cc <.LVL433>:
  4038cc:	2800      	cmp	r0, #0
  4038ce:	f47f a903 	bne.w	402ad8 <.L189>
  4038d2:	9b24      	ldr	r3, [sp, #144]	; 0x90

004038d4 <.LVL434>:
  4038d4:	f10d 0994 	add.w	r9, sp, #148	; 0x94

004038d8 <.LVL435>:
  4038d8:	f7ff b9e7 	b.w	402caa <.LVL86+0x8>

004038dc <.LBB27>:
  4038dc:	9b12      	ldr	r3, [sp, #72]	; 0x48

004038de <.LVL437>:
  4038de:	3b01      	subs	r3, #1
  4038e0:	9312      	str	r3, [sp, #72]	; 0x48

004038e2 <.LVL438>:
  4038e2:	9b10      	ldr	r3, [sp, #64]	; 0x40

004038e4 <.LVL439>:
  4038e4:	3b01      	subs	r3, #1
  4038e6:	9310      	str	r3, [sp, #64]	; 0x40

004038e8 <.LVL440>:
  4038e8:	e6f2      	b.n	4036d0 <.LVL375>

004038ea <.LBE27>:
  4038ea:	eeb4 8b48 	vcmp.f64	d8, d8
  4038ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4038f2:	f180 83e3 	bvs.w	4040bc <.LBE70>
  4038f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4038f8:	2b61      	cmp	r3, #97	; 0x61
  4038fa:	f000 82b8 	beq.w	403e6e <.LVL595+0xa>
  4038fe:	2b41      	cmp	r3, #65	; 0x41
  403900:	f000 8178 	beq.w	403bf4 <.LVL523>
  403904:	9b04      	ldr	r3, [sp, #16]
  403906:	3301      	adds	r3, #1
  403908:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40390a:	f023 0520 	bic.w	r5, r3, #32
  40390e:	f000 839d 	beq.w	40404c <.LBE69>
  403912:	2d47      	cmp	r5, #71	; 0x47
  403914:	d104      	bne.n	403920 <.LBB28>
  403916:	9b04      	ldr	r3, [sp, #16]
  403918:	2b00      	cmp	r3, #0
  40391a:	bf08      	it	eq
  40391c:	2301      	moveq	r3, #1
  40391e:	9304      	str	r3, [sp, #16]

00403920 <.LBB28>:
  403920:	ee18 3a90 	vmov	r3, s17

00403924 <.LBE28>:
  403924:	f448 7280 	orr.w	r2, r8, #256	; 0x100

00403928 <.LBB43>:
  403928:	2b00      	cmp	r3, #0

0040392a <.LBE43>:
  40392a:	9202      	str	r2, [sp, #8]

0040392c <.LBB44>:
  40392c:	f04f 0300 	mov.w	r3, #0
  403930:	f2c0 82b8 	blt.w	403ea4 <.LBB62>
  403934:	eeb0 ab48 	vmov.f64	d10, d8
  403938:	9306      	str	r3, [sp, #24]
  40393a:	9309      	str	r3, [sp, #36]	; 0x24

0040393c <.LVL445>:
  40393c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40393e:	2b66      	cmp	r3, #102	; 0x66
  403940:	f000 82ef 	beq.w	403f22 <.LBB64>
  403944:	2b46      	cmp	r3, #70	; 0x46
  403946:	f000 83d8 	beq.w	4040fa <.LBB71>
  40394a:	eeb0 0b4a 	vmov.f64	d0, d10
  40394e:	2d45      	cmp	r5, #69	; 0x45
  403950:	bf0a      	itet	eq
  403952:	9b04      	ldreq	r3, [sp, #16]
  403954:	9c04      	ldrne	r4, [sp, #16]
  403956:	1c5c      	addeq	r4, r3, #1

00403958 <.LVL446>:
  403958:	aa20      	add	r2, sp, #128	; 0x80

0040395a <.LVL447>:
  40395a:	ab1d      	add	r3, sp, #116	; 0x74
  40395c:	9201      	str	r2, [sp, #4]
  40395e:	9300      	str	r3, [sp, #0]
  403960:	4622      	mov	r2, r4
  403962:	ab1c      	add	r3, sp, #112	; 0x70

00403964 <.LVL448>:
  403964:	2102      	movs	r1, #2
  403966:	4658      	mov	r0, fp
  403968:	f001 fba6 	bl	4050b8 <_dtoa_r>

0040396c <.LVL449>:
  40396c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40396e:	2b67      	cmp	r3, #103	; 0x67
  403970:	4606      	mov	r6, r0

00403972 <.LVL450>:
  403972:	f040 8395 	bne.w	4040a0 <.LBB70>
  403976:	f018 0f01 	tst.w	r8, #1
  40397a:	f040 8343 	bne.w	404004 <.LBB66>

0040397e <.LVL451>:
  40397e:	9b20      	ldr	r3, [sp, #128]	; 0x80

00403980 <.LVL452>:
  403980:	46c6      	mov	lr, r8
  403982:	1b9b      	subs	r3, r3, r6
  403984:	f8dd 8008 	ldr.w	r8, [sp, #8]
  403988:	930f      	str	r3, [sp, #60]	; 0x3c

0040398a <.LBE44>:
  40398a:	2d47      	cmp	r5, #71	; 0x47
  40398c:	f000 81cf 	beq.w	403d2e <.LVL554>
  403990:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403992:	2b46      	cmp	r3, #70	; 0x46
  403994:	f000 82b3 	beq.w	403efe <.LVL607>
  403998:	2b65      	cmp	r3, #101	; 0x65
  40399a:	f340 8412 	ble.w	4041c2 <.LVL694>
  40399e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4039a0:	2b66      	cmp	r3, #102	; 0x66
  4039a2:	f000 82ac 	beq.w	403efe <.LVL607>
  4039a6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  4039a8:	930e      	str	r3, [sp, #56]	; 0x38

004039aa <.LVL454>:
  4039aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4039ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4039ae:	4619      	mov	r1, r3
  4039b0:	4291      	cmp	r1, r2
  4039b2:	4613      	mov	r3, r2
  4039b4:	f300 8260 	bgt.w	403e78 <.LVL596>

004039b8 <.LVL455>:
  4039b8:	f01e 0f01 	tst.w	lr, #1
  4039bc:	f000 8363 	beq.w	404086 <.LVL655>
  4039c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4039c2:	4413      	add	r3, r2
  4039c4:	9308      	str	r3, [sp, #32]

004039c6 <.LVL456>:
  4039c6:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  4039ca:	f000 8310 	beq.w	403fee <.LVL635>
  4039ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4039d0:	2b00      	cmp	r3, #0
  4039d2:	f340 830c 	ble.w	403fee <.LVL635>
  4039d6:	2367      	movs	r3, #103	; 0x67
  4039d8:	930d      	str	r3, [sp, #52]	; 0x34

004039da <.LVL457>:
  4039da:	9812      	ldr	r0, [sp, #72]	; 0x48
  4039dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4039de:	2300      	movs	r3, #0
  4039e0:	9313      	str	r3, [sp, #76]	; 0x4c
  4039e2:	9310      	str	r3, [sp, #64]	; 0x40
  4039e4:	7803      	ldrb	r3, [r0, #0]

004039e6 <.LVL458>:
  4039e6:	2bff      	cmp	r3, #255	; 0xff
  4039e8:	d00e      	beq.n	403a08 <.LVL461+0x8>
  4039ea:	429a      	cmp	r2, r3
  4039ec:	dd0c      	ble.n	403a08 <.LVL461+0x8>
  4039ee:	7841      	ldrb	r1, [r0, #1]
  4039f0:	1ad2      	subs	r2, r2, r3
  4039f2:	2900      	cmp	r1, #0
  4039f4:	f000 8184 	beq.w	403d00 <.LBE50>
  4039f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4039fa:	3301      	adds	r3, #1
  4039fc:	9310      	str	r3, [sp, #64]	; 0x40

004039fe <.LVL460>:
  4039fe:	460b      	mov	r3, r1

00403a00 <.LVL461>:
  403a00:	2bff      	cmp	r3, #255	; 0xff
  403a02:	f100 0001 	add.w	r0, r0, #1
  403a06:	d1f0      	bne.n	4039ea <.LVL458+0x4>
  403a08:	920e      	str	r2, [sp, #56]	; 0x38
  403a0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403a0c:	9a13      	ldr	r2, [sp, #76]	; 0x4c

00403a0e <.LVL463>:
  403a0e:	9908      	ldr	r1, [sp, #32]
  403a10:	9012      	str	r0, [sp, #72]	; 0x48
  403a12:	4413      	add	r3, r2
  403a14:	9a18      	ldr	r2, [sp, #96]	; 0x60
  403a16:	fb02 1303 	mla	r3, r2, r3, r1
  403a1a:	9308      	str	r3, [sp, #32]

00403a1c <.LVL464>:
  403a1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31

00403a20 <.LVL465>:
  403a20:	9302      	str	r3, [sp, #8]

00403a22 <.LVL466>:
  403a22:	9b06      	ldr	r3, [sp, #24]
  403a24:	2b00      	cmp	r3, #0
  403a26:	f040 817b 	bne.w	403d20 <.LVL552>
  403a2a:	9304      	str	r3, [sp, #16]

00403a2c <.LVL467>:
  403a2c:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  403a30:	f7ff b8c7 	b.w	402bc2 <.L59>

00403a34 <.LVL468>:
  403a34:	f025 0507 	bic.w	r5, r5, #7
  403a38:	f105 0308 	add.w	r3, r5, #8
  403a3c:	ed95 8b00 	vldr	d8, [r5]

00403a40 <.LVL469>:
  403a40:	930a      	str	r3, [sp, #40]	; 0x28

00403a42 <.LVL470>:
  403a42:	f7ff bb11 	b.w	403068 <.LVL189>

00403a46 <.LVL471>:
  403a46:	464c      	mov	r4, r9
  403a48:	4689      	mov	r9, r1

00403a4a <.LBB20>:
  403a4a:	3201      	adds	r2, #1
  403a4c:	4423      	add	r3, r4
  403a4e:	2a07      	cmp	r2, #7
  403a50:	9324      	str	r3, [sp, #144]	; 0x90
  403a52:	9223      	str	r2, [sp, #140]	; 0x8c
  403a54:	f8c9 a000 	str.w	sl, [r9]
  403a58:	f8c9 4004 	str.w	r4, [r9, #4]
  403a5c:	f73f ae0e 	bgt.w	40367c <.LBB15>

00403a60 <.LVL473>:
  403a60:	f109 0908 	add.w	r9, r9, #8

00403a64 <.LVL474>:
  403a64:	e615      	b.n	403692 <.LBE15>

00403a66 <.LBB21>:
  403a66:	aa22      	add	r2, sp, #136	; 0x88
  403a68:	4629      	mov	r1, r5

00403a6a <.LVL476>:
  403a6a:	4658      	mov	r0, fp
  403a6c:	f005 f810 	bl	408a90 <.LFE25>

00403a70 <.LVL477>:
  403a70:	2800      	cmp	r0, #0
  403a72:	f47f a831 	bne.w	402ad8 <.L189>
  403a76:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403a78:	9824      	ldr	r0, [sp, #144]	; 0x90

00403a7a <.LVL478>:
  403a7a:	781b      	ldrb	r3, [r3, #0]
  403a7c:	a925      	add	r1, sp, #148	; 0x94

00403a7e <.LVL479>:
  403a7e:	e649      	b.n	403714 <.LVL382>

00403a80 <.LBE21>:
  403a80:	aa22      	add	r2, sp, #136	; 0x88
  403a82:	9905      	ldr	r1, [sp, #20]
  403a84:	4658      	mov	r0, fp
  403a86:	f005 f803 	bl	408a90 <.LFE25>

00403a8a <.LVL481>:
  403a8a:	2800      	cmp	r0, #0
  403a8c:	f47f a824 	bne.w	402ad8 <.L189>

00403a90 <.LVL482>:
  403a90:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00403a94 <.LVL483>:
  403a94:	f7ff bbb2 	b.w	4031fc <.LVL230>

00403a98 <.LBB22>:
  403a98:	aa22      	add	r2, sp, #136	; 0x88
  403a9a:	4629      	mov	r1, r5
  403a9c:	4658      	mov	r0, fp
  403a9e:	f004 fff7 	bl	408a90 <.LFE25>

00403aa2 <.LVL485>:
  403aa2:	2800      	cmp	r0, #0
  403aa4:	f47f a818 	bne.w	402ad8 <.L189>
  403aa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403aaa:	9824      	ldr	r0, [sp, #144]	; 0x90

00403aac <.LVL486>:
  403aac:	781b      	ldrb	r3, [r3, #0]
  403aae:	a925      	add	r1, sp, #148	; 0x94

00403ab0 <.LBE22>:
  403ab0:	441e      	add	r6, r3
  403ab2:	e664      	b.n	40377e <.LBE18+0x2>

00403ab4 <.LBE46>:
  403ab4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  403ab6:	48c2      	ldr	r0, [pc, #776]	; (403dc0 <.LVL571+0x2>)
  403ab8:	f8c9 0000 	str.w	r0, [r9]
  403abc:	3201      	adds	r2, #1
  403abe:	3301      	adds	r3, #1
  403ac0:	2001      	movs	r0, #1
  403ac2:	2a07      	cmp	r2, #7
  403ac4:	9324      	str	r3, [sp, #144]	; 0x90
  403ac6:	9223      	str	r2, [sp, #140]	; 0x8c
  403ac8:	f8c9 0004 	str.w	r0, [r9, #4]
  403acc:	f300 8085 	bgt.w	403bda <.LVL519>

00403ad0 <.LVL490>:
  403ad0:	f109 0908 	add.w	r9, r9, #8

00403ad4 <.LVL491>:
  403ad4:	b929      	cbnz	r1, 403ae2 <.LVL491+0xe>
  403ad6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403ad8:	b91a      	cbnz	r2, 403ae2 <.LVL491+0xe>
  403ada:	f018 0f01 	tst.w	r8, #1
  403ade:	f43f a933 	beq.w	402d48 <.LVL104>
  403ae2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  403ae4:	9c15      	ldr	r4, [sp, #84]	; 0x54

00403ae6 <.LVL492>:
  403ae6:	9817      	ldr	r0, [sp, #92]	; 0x5c
  403ae8:	f8c9 0000 	str.w	r0, [r9]
  403aec:	3201      	adds	r2, #1
  403aee:	4423      	add	r3, r4
  403af0:	2a07      	cmp	r2, #7
  403af2:	9324      	str	r3, [sp, #144]	; 0x90

00403af4 <.LVL493>:
  403af4:	f8c9 4004 	str.w	r4, [r9, #4]
  403af8:	9223      	str	r2, [sp, #140]	; 0x8c
  403afa:	f300 826a 	bgt.w	403fd2 <.LVL632>
  403afe:	f109 0908 	add.w	r9, r9, #8

00403b02 <.LVL494>:
  403b02:	2900      	cmp	r1, #0
  403b04:	f2c0 8244 	blt.w	403f90 <.LBE24>

00403b08 <.LVL495>:
  403b08:	980f      	ldr	r0, [sp, #60]	; 0x3c
  403b0a:	f8c9 6000 	str.w	r6, [r9]
  403b0e:	3201      	adds	r2, #1
  403b10:	4403      	add	r3, r0
  403b12:	2a07      	cmp	r2, #7
  403b14:	9324      	str	r3, [sp, #144]	; 0x90

00403b16 <.LVL496>:
  403b16:	9223      	str	r2, [sp, #140]	; 0x8c
  403b18:	f8c9 0004 	str.w	r0, [r9, #4]
  403b1c:	f77f a912 	ble.w	402d44 <.LVL103>
  403b20:	e434      	b.n	40338c <.LVL269>

00403b22 <.LDL1>:
  403b22:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403b24:	2b00      	cmp	r3, #0
  403b26:	f43e afdd 	beq.w	402ae4 <.LVL44>
  403b2a:	9c05      	ldr	r4, [sp, #20]
  403b2c:	9811      	ldr	r0, [sp, #68]	; 0x44
  403b2e:	aa22      	add	r2, sp, #136	; 0x88
  403b30:	4621      	mov	r1, r4
  403b32:	f004 ffad 	bl	408a90 <.LFE25>

00403b36 <.LVL498>:
  403b36:	2800      	cmp	r0, #0
  403b38:	f43e afd4 	beq.w	402ae4 <.LVL44>
  403b3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403b40:	f7fe bfd3 	b.w	402aea <.LVL44+0x6>

00403b44 <.LVL499>:
  403b44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403b46:	9903      	ldr	r1, [sp, #12]
  403b48:	6813      	ldr	r3, [r2, #0]
  403b4a:	17cd      	asrs	r5, r1, #31
  403b4c:	4608      	mov	r0, r1
  403b4e:	3204      	adds	r2, #4

00403b50 <.LVL500>:
  403b50:	4629      	mov	r1, r5
  403b52:	920a      	str	r2, [sp, #40]	; 0x28
  403b54:	e9c3 0100 	strd	r0, r1, [r3]
  403b58:	463e      	mov	r6, r7

00403b5a <.LVL501>:
  403b5a:	f7fe bef4 	b.w	402946 <.LVL10>

00403b5e <.LVL502>:
  403b5e:	3304      	adds	r3, #4
  403b60:	8814      	ldrh	r4, [r2, #0]
  403b62:	930a      	str	r3, [sp, #40]	; 0x28

00403b64 <.LVL503>:
  403b64:	2500      	movs	r5, #0
  403b66:	f7ff b960 	b.w	402e2a <.LVL126>

00403b6a <.LVL504>:
  403b6a:	8814      	ldrh	r4, [r2, #0]
  403b6c:	3204      	adds	r2, #4
  403b6e:	2500      	movs	r5, #0
  403b70:	2301      	movs	r3, #1
  403b72:	920a      	str	r2, [sp, #40]	; 0x28

00403b74 <.LVL505>:
  403b74:	f7fe bffd 	b.w	402b72 <.L150>

00403b78 <.LVL506>:
  403b78:	3304      	adds	r3, #4
  403b7a:	8814      	ldrh	r4, [r2, #0]
  403b7c:	930a      	str	r3, [sp, #40]	; 0x28

00403b7e <.LVL507>:
  403b7e:	2500      	movs	r5, #0
  403b80:	f7fe bfe5 	b.w	402b4e <.LVL51>

00403b84 <.LVL508>:
  403b84:	980a      	ldr	r0, [sp, #40]	; 0x28
  403b86:	f9b0 4000 	ldrsh.w	r4, [r0]
  403b8a:	f7ff b979 	b.w	402e80 <.LVL136>

00403b8e <.LVL509>:
  403b8e:	aa22      	add	r2, sp, #136	; 0x88
  403b90:	9905      	ldr	r1, [sp, #20]
  403b92:	4658      	mov	r0, fp
  403b94:	f004 ff7c 	bl	408a90 <.LFE25>

00403b98 <.LVL510>:
  403b98:	2800      	cmp	r0, #0
  403b9a:	f47e af9d 	bne.w	402ad8 <.L189>
  403b9e:	9b24      	ldr	r3, [sp, #144]	; 0x90

00403ba0 <.LVL511>:
  403ba0:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00403ba4 <.LVL512>:
  403ba4:	f7ff bb43 	b.w	40322e <.LVL233>

00403ba8 <.LVL513>:
  403ba8:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
  403bac:	783b      	ldrb	r3, [r7, #0]
  403bae:	f7fe befa 	b.w	4029a6 <.LVL22>

00403bb2 <.LBB47>:
  403bb2:	f018 0f01 	tst.w	r8, #1
  403bb6:	f43f ae0b 	beq.w	4037d0 <.LBB19>
  403bba:	e5f9      	b.n	4037b0 <.LVL403+0xa>

00403bbc <.LBE47>:
  403bbc:	2140      	movs	r1, #64	; 0x40
  403bbe:	9811      	ldr	r0, [sp, #68]	; 0x44

00403bc0 <.LVL517>:
  403bc0:	f002 fc10 	bl	4063e4 <.LFE14>

00403bc4 <.LVL518>:
  403bc4:	9a05      	ldr	r2, [sp, #20]
  403bc6:	6010      	str	r0, [r2, #0]
  403bc8:	6110      	str	r0, [r2, #16]
  403bca:	2800      	cmp	r0, #0
  403bcc:	f000 82f1 	beq.w	4041b2 <.LBE76>
  403bd0:	9a05      	ldr	r2, [sp, #20]
  403bd2:	2340      	movs	r3, #64	; 0x40
  403bd4:	6153      	str	r3, [r2, #20]
  403bd6:	f7fe bea0 	b.w	40291a <.LVL6>

00403bda <.LVL519>:
  403bda:	aa22      	add	r2, sp, #136	; 0x88
  403bdc:	9905      	ldr	r1, [sp, #20]
  403bde:	4658      	mov	r0, fp
  403be0:	f004 ff56 	bl	408a90 <.LFE25>

00403be4 <.LVL520>:
  403be4:	2800      	cmp	r0, #0
  403be6:	f47e af77 	bne.w	402ad8 <.L189>
  403bea:	991c      	ldr	r1, [sp, #112]	; 0x70
  403bec:	9b24      	ldr	r3, [sp, #144]	; 0x90

00403bee <.LVL521>:
  403bee:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00403bf2 <.LVL522>:
  403bf2:	e76f      	b.n	403ad4 <.LVL491>

00403bf4 <.LVL523>:
  403bf4:	2330      	movs	r3, #48	; 0x30
  403bf6:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
  403bfa:	2358      	movs	r3, #88	; 0x58
  403bfc:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
  403c00:	9b04      	ldr	r3, [sp, #16]
  403c02:	2b63      	cmp	r3, #99	; 0x63
  403c04:	f048 0402 	orr.w	r4, r8, #2

00403c08 <.LVL524>:
  403c08:	f300 8240 	bgt.w	40408c <.LVL656>
  403c0c:	2300      	movs	r3, #0
  403c0e:	9309      	str	r3, [sp, #36]	; 0x24
  403c10:	ae35      	add	r6, sp, #212	; 0xd4

00403c12 <.LBB48>:
  403c12:	ee18 3a90 	vmov	r3, s17
  403c16:	2b00      	cmp	r3, #0
  403c18:	9b0d      	ldr	r3, [sp, #52]	; 0x34

00403c1a <.LBE48>:
  403c1a:	f448 7281 	orr.w	r2, r8, #258	; 0x102
  403c1e:	9202      	str	r2, [sp, #8]

00403c20 <.LBB49>:
  403c20:	46a0      	mov	r8, r4
  403c22:	f023 0520 	bic.w	r5, r3, #32
  403c26:	f2c0 813e 	blt.w	403ea6 <.LVL602>
  403c2a:	eeb0 ab48 	vmov.f64	d10, d8
  403c2e:	2300      	movs	r3, #0
  403c30:	9306      	str	r3, [sp, #24]

00403c32 <.LVL527>:
  403c32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403c34:	2b61      	cmp	r3, #97	; 0x61
  403c36:	f000 81ec 	beq.w	404012 <.LBB68>
  403c3a:	2b41      	cmp	r3, #65	; 0x41
  403c3c:	f47f ae7e 	bne.w	40393c <.LVL445>
  403c40:	eeb0 0b4a 	vmov.f64	d0, d10
  403c44:	a81c      	add	r0, sp, #112	; 0x70

00403c46 <.LVL528>:
  403c46:	f006 fb93 	bl	40a370 <.LFE52>

00403c4a <.LVL529>:
  403c4a:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
  403c4e:	ee20 0b07 	vmul.f64	d0, d0, d7

00403c52 <.LVL530>:
  403c52:	eeb5 0b40 	vcmp.f64	d0, #0.0
  403c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403c5a:	d101      	bne.n	403c60 <.LVL530+0xe>
  403c5c:	2301      	movs	r3, #1
  403c5e:	931c      	str	r3, [sp, #112]	; 0x70
  403c60:	4c58      	ldr	r4, [pc, #352]	; (403dc4 <.LVL571+0x6>)

00403c62 <.LVL531>:
  403c62:	9b04      	ldr	r3, [sp, #16]
  403c64:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
  403c68:	3b01      	subs	r3, #1
  403c6a:	4631      	mov	r1, r6
  403c6c:	e005      	b.n	403c7a <.LVL533>

00403c6e <.LVL532>:
  403c6e:	eeb5 0b40 	vcmp.f64	d0, #0.0
  403c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403c76:	d014      	beq.n	403ca2 <.LVL536+0x6>
  403c78:	4611      	mov	r1, r2

00403c7a <.LVL533>:
  403c7a:	ee20 0b05 	vmul.f64	d0, d0, d5
  403c7e:	eefd 6bc0 	vcvt.s32.f64	s13, d0

00403c82 <.LVL535>:
  403c82:	460a      	mov	r2, r1
  403c84:	ee16 0a90 	vmov	r0, s13
  403c88:	f1b3 3fff 	cmp.w	r3, #4294967295
  403c8c:	5c20      	ldrb	r0, [r4, r0]
  403c8e:	f802 0b01 	strb.w	r0, [r2], #1
  403c92:	eeb8 7be6 	vcvt.f64.s32	d7, s13
  403c96:	4618      	mov	r0, r3
  403c98:	ee30 0b47 	vsub.f64	d0, d0, d7

00403c9c <.LVL536>:
  403c9c:	f103 33ff 	add.w	r3, r3, #4294967295
  403ca0:	d1e5      	bne.n	403c6e <.LVL532>
  403ca2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
  403ca6:	eeb4 0bc7 	vcmpe.f64	d0, d7
  403caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403cae:	f300 80ff 	bgt.w	403eb0 <.LVL604>
  403cb2:	eeb4 0b47 	vcmp.f64	d0, d7
  403cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403cba:	d104      	bne.n	403cc6 <.LVL537>
  403cbc:	ee16 3a90 	vmov	r3, s13
  403cc0:	07db      	lsls	r3, r3, #31
  403cc2:	f100 80f5 	bmi.w	403eb0 <.LVL604>

00403cc6 <.LVL537>:
  403cc6:	2800      	cmp	r0, #0
  403cc8:	db07      	blt.n	403cda <.LVL541>
  403cca:	1814      	adds	r4, r2, r0

00403ccc <.LVL538>:
  403ccc:	2330      	movs	r3, #48	; 0x30

00403cce <.LVL539>:
  403cce:	f801 3f01 	strb.w	r3, [r1, #1]!

00403cd2 <.LVL540>:
  403cd2:	42a1      	cmp	r1, r4
  403cd4:	d1fb      	bne.n	403cce <.LVL539>
  403cd6:	3001      	adds	r0, #1
  403cd8:	4402      	add	r2, r0

00403cda <.LVL541>:
  403cda:	1b93      	subs	r3, r2, r6
  403cdc:	46c6      	mov	lr, r8
  403cde:	930f      	str	r3, [sp, #60]	; 0x3c

00403ce0 <.LVL542>:
  403ce0:	f8dd 8008 	ldr.w	r8, [sp, #8]
  403ce4:	e651      	b.n	40398a <.LBE44>

00403ce6 <.LBB50>:
  403ce6:	aa22      	add	r2, sp, #136	; 0x88
  403ce8:	9905      	ldr	r1, [sp, #20]
  403cea:	4658      	mov	r0, fp
  403cec:	f004 fed0 	bl	408a90 <.LFE25>

00403cf0 <.LVL544>:
  403cf0:	2800      	cmp	r0, #0
  403cf2:	f47e aef1 	bne.w	402ad8 <.L189>
  403cf6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  403cf8:	9b24      	ldr	r3, [sp, #144]	; 0x90

00403cfa <.LVL545>:
  403cfa:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00403cfe <.LVL546>:
  403cfe:	e567      	b.n	4037d0 <.LBB19>

00403d00 <.LBE50>:
  403d00:	9913      	ldr	r1, [sp, #76]	; 0x4c
  403d02:	3101      	adds	r1, #1
  403d04:	9113      	str	r1, [sp, #76]	; 0x4c

00403d06 <.LVL548>:
  403d06:	e66e      	b.n	4039e6 <.LVL458>

00403d08 <.LVL549>:
  403d08:	4630      	mov	r0, r6
  403d0a:	9404      	str	r4, [sp, #16]
  403d0c:	f005 f918 	bl	408f40 <strlen>

00403d10 <.LVL550>:
  403d10:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
  403d14:	9008      	str	r0, [sp, #32]

00403d16 <.LVL551>:
  403d16:	950a      	str	r5, [sp, #40]	; 0x28
  403d18:	9202      	str	r2, [sp, #8]
  403d1a:	4623      	mov	r3, r4
  403d1c:	f7ff b96b 	b.w	402ff6 <.LBE12>

00403d20 <.LVL552>:
  403d20:	222d      	movs	r2, #45	; 0x2d
  403d22:	2300      	movs	r3, #0
  403d24:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
  403d28:	9304      	str	r3, [sp, #16]

00403d2a <.LVL553>:
  403d2a:	f7fe bf4b 	b.w	402bc4 <.LVL63>

00403d2e <.LVL554>:
  403d2e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  403d30:	930e      	str	r3, [sp, #56]	; 0x38
  403d32:	1cda      	adds	r2, r3, #3
  403d34:	db03      	blt.n	403d3e <.LVL555>
  403d36:	9a04      	ldr	r2, [sp, #16]
  403d38:	4293      	cmp	r3, r2
  403d3a:	f77f ae36 	ble.w	4039aa <.LVL454>

00403d3e <.LVL555>:
  403d3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403d40:	3b02      	subs	r3, #2

00403d42 <.LVL556>:
  403d42:	930d      	str	r3, [sp, #52]	; 0x34
  403d44:	f023 0520 	bic.w	r5, r3, #32

00403d48 <.LVL557>:
  403d48:	9b0e      	ldr	r3, [sp, #56]	; 0x38

00403d4a <.LBB51>:
  403d4a:	2d41      	cmp	r5, #65	; 0x41

00403d4c <.LBE51>:
  403d4c:	f103 33ff 	add.w	r3, r3, #4294967295
  403d50:	931c      	str	r3, [sp, #112]	; 0x70

00403d52 <.LBB59>:
  403d52:	f000 8159 	beq.w	404008 <.LBB67>

00403d56 <.LVL559>:
  403d56:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
  403d5a:	2100      	movs	r1, #0

00403d5c <.LVL560>:
  403d5c:	2b00      	cmp	r3, #0
  403d5e:	bfb8      	it	lt
  403d60:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38

00403d62 <.LVL561>:
  403d62:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  403d66:	bfba      	itte	lt
  403d68:	f1c3 0301 	rsblt	r3, r3, #1

00403d6c <.LVL562>:
  403d6c:	222d      	movlt	r2, #45	; 0x2d
  403d6e:	222b      	movge	r2, #43	; 0x2b
  403d70:	2b09      	cmp	r3, #9
  403d72:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79

00403d76 <.LVL563>:
  403d76:	f340 815d 	ble.w	404034 <.LBB69>
  403d7a:	f10d 0487 	add.w	r4, sp, #135	; 0x87

00403d7e <.LVL564>:
  403d7e:	4620      	mov	r0, r4
  403d80:	4d11      	ldr	r5, [pc, #68]	; (403dc8 <.LVL571+0xa>)
  403d82:	e000      	b.n	403d86 <.LVL566>

00403d84 <.LVL565>:
  403d84:	4610      	mov	r0, r2

00403d86 <.LVL566>:
  403d86:	fb85 1203 	smull	r1, r2, r5, r3
  403d8a:	17d9      	asrs	r1, r3, #31
  403d8c:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  403d90:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  403d94:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  403d98:	3230      	adds	r2, #48	; 0x30
  403d9a:	2909      	cmp	r1, #9
  403d9c:	f800 2c01 	strb.w	r2, [r0, #-1]
  403da0:	460b      	mov	r3, r1

00403da2 <.LVL567>:
  403da2:	f100 32ff 	add.w	r2, r0, #4294967295

00403da6 <.LVL568>:
  403da6:	dced      	bgt.n	403d84 <.LVL565>

00403da8 <.LVL569>:
  403da8:	3330      	adds	r3, #48	; 0x30
  403daa:	3802      	subs	r0, #2
  403dac:	b2db      	uxtb	r3, r3
  403dae:	4284      	cmp	r4, r0
  403db0:	f802 3c01 	strb.w	r3, [r2, #-1]
  403db4:	f240 81fa 	bls.w	4041ac <.LBB76>
  403db8:	f10d 007a 	add.w	r0, sp, #122	; 0x7a

00403dbc <.LVL570>:
  403dbc:	4611      	mov	r1, r2

00403dbe <.LVL571>:
  403dbe:	e007      	b.n	403dd0 <.LVL573>
  403dc0:	0040b0fc 	.word	0x0040b0fc
  403dc4:	0040b0cc 	.word	0x0040b0cc
  403dc8:	66666667 	.word	0x66666667

00403dcc <.LVL572>:
  403dcc:	f811 3b01 	ldrb.w	r3, [r1], #1

00403dd0 <.LVL573>:
  403dd0:	f800 3b01 	strb.w	r3, [r0], #1

00403dd4 <.LVL574>:
  403dd4:	428c      	cmp	r4, r1
  403dd6:	d1f9      	bne.n	403dcc <.LVL572>
  403dd8:	3401      	adds	r4, #1
  403dda:	1aa2      	subs	r2, r4, r2

00403ddc <.LVL575>:
  403ddc:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
  403de0:	441a      	add	r2, r3

00403de2 <.LVL576>:
  403de2:	ab1e      	add	r3, sp, #120	; 0x78

00403de4 <.LVL577>:
  403de4:	1ad3      	subs	r3, r2, r3

00403de6 <.LBE59>:
  403de6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c

00403de8 <.LBB60>:
  403de8:	9319      	str	r3, [sp, #100]	; 0x64

00403dea <.LBE60>:
  403dea:	2a01      	cmp	r2, #1
  403dec:	4413      	add	r3, r2
  403dee:	9308      	str	r3, [sp, #32]

00403df0 <.LVL581>:
  403df0:	f340 81ad 	ble.w	40414e <.LBE72>
  403df4:	9b08      	ldr	r3, [sp, #32]

00403df6 <.LVL582>:
  403df6:	9a15      	ldr	r2, [sp, #84]	; 0x54
  403df8:	4413      	add	r3, r2
  403dfa:	9308      	str	r3, [sp, #32]
  403dfc:	2300      	movs	r3, #0
  403dfe:	9313      	str	r3, [sp, #76]	; 0x4c
  403e00:	9310      	str	r3, [sp, #64]	; 0x40
  403e02:	930e      	str	r3, [sp, #56]	; 0x38
  403e04:	9b08      	ldr	r3, [sp, #32]
  403e06:	f42e 6e80 	bic.w	lr, lr, #1024	; 0x400
  403e0a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403e0e:	f44e 7880 	orr.w	r8, lr, #256	; 0x100

00403e12 <.LVL584>:
  403e12:	9302      	str	r3, [sp, #8]
  403e14:	e605      	b.n	403a22 <.LVL466>

00403e16 <.LBB23>:
  403e16:	aa22      	add	r2, sp, #136	; 0x88
  403e18:	9905      	ldr	r1, [sp, #20]
  403e1a:	4658      	mov	r0, fp
  403e1c:	f004 fe38 	bl	408a90 <.LFE25>

00403e20 <.LVL586>:
  403e20:	2800      	cmp	r0, #0
  403e22:	f47e ae59 	bne.w	402ad8 <.L189>
  403e26:	9b24      	ldr	r3, [sp, #144]	; 0x90

00403e28 <.LVL587>:
  403e28:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00403e2c <.LVL588>:
  403e2c:	f7ff bb29 	b.w	403482 <.LVL300>

00403e30 <.LBE23>:
  403e30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403e32:	6813      	ldr	r3, [r2, #0]
  403e34:	3204      	adds	r2, #4

00403e36 <.LVL590>:
  403e36:	920a      	str	r2, [sp, #40]	; 0x28
  403e38:	f8bd 200c 	ldrh.w	r2, [sp, #12]

00403e3c <.LVL591>:
  403e3c:	801a      	strh	r2, [r3, #0]
  403e3e:	463e      	mov	r6, r7

00403e40 <.LVL592>:
  403e40:	f7fe bd81 	b.w	402946 <.LVL10>

00403e44 <.LVL593>:
  403e44:	9b04      	ldr	r3, [sp, #16]
  403e46:	9613      	str	r6, [sp, #76]	; 0x4c
  403e48:	2b06      	cmp	r3, #6
  403e4a:	bf28      	it	cs
  403e4c:	2306      	movcs	r3, #6
  403e4e:	4632      	mov	r2, r6
  403e50:	9604      	str	r6, [sp, #16]
  403e52:	9610      	str	r6, [sp, #64]	; 0x40
  403e54:	960e      	str	r6, [sp, #56]	; 0x38
  403e56:	9609      	str	r6, [sp, #36]	; 0x24
  403e58:	9302      	str	r3, [sp, #8]

00403e5a <.LVL594>:
  403e5a:	950a      	str	r5, [sp, #40]	; 0x28
  403e5c:	9308      	str	r3, [sp, #32]
  403e5e:	4eae      	ldr	r6, [pc, #696]	; (404118 <.LVL671+0x2>)
  403e60:	f7fe beaf 	b.w	402bc2 <.L59>

00403e64 <.LVL595>:
  403e64:	222d      	movs	r2, #45	; 0x2d
  403e66:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
  403e6a:	f7ff b90d 	b.w	403088 <.LVL189+0x20>
  403e6e:	2330      	movs	r3, #48	; 0x30
  403e70:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
  403e74:	2378      	movs	r3, #120	; 0x78
  403e76:	e6c1      	b.n	403bfc <.LVL523+0x8>

00403e78 <.LVL596>:
  403e78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  403e7a:	9a15      	ldr	r2, [sp, #84]	; 0x54
  403e7c:	4413      	add	r3, r2
  403e7e:	9308      	str	r3, [sp, #32]

00403e80 <.LVL597>:
  403e80:	9b0e      	ldr	r3, [sp, #56]	; 0x38

00403e82 <.LVL598>:
  403e82:	2b00      	cmp	r3, #0
  403e84:	f340 814e 	ble.w	404124 <.LBE71>
  403e88:	2367      	movs	r3, #103	; 0x67
  403e8a:	930d      	str	r3, [sp, #52]	; 0x34

00403e8c <.LVL599>:
  403e8c:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  403e90:	f47f ada3 	bne.w	4039da <.LVL457>
  403e94:	9b08      	ldr	r3, [sp, #32]
  403e96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403e9a:	9302      	str	r3, [sp, #8]

00403e9c <.LVL600>:
  403e9c:	2300      	movs	r3, #0
  403e9e:	9313      	str	r3, [sp, #76]	; 0x4c
  403ea0:	9310      	str	r3, [sp, #64]	; 0x40
  403ea2:	e5be      	b.n	403a22 <.LVL466>

00403ea4 <.LBB62>:
  403ea4:	9309      	str	r3, [sp, #36]	; 0x24

00403ea6 <.LVL602>:
  403ea6:	232d      	movs	r3, #45	; 0x2d
  403ea8:	9306      	str	r3, [sp, #24]
  403eaa:	eeb1 ab48 	vneg.f64	d10, d8

00403eae <.LVL603>:
  403eae:	e6c0      	b.n	403c32 <.LVL527>

00403eb0 <.LVL604>:
  403eb0:	9120      	str	r1, [sp, #128]	; 0x80
  403eb2:	f812 0c01 	ldrb.w	r0, [r2, #-1]

00403eb6 <.LVL605>:
  403eb6:	7be3      	ldrb	r3, [r4, #15]
  403eb8:	4283      	cmp	r3, r0
  403eba:	f040 8150 	bne.w	40415e <.LBB74>
  403ebe:	4613      	mov	r3, r2
  403ec0:	f04f 0e30 	mov.w	lr, #48	; 0x30
  403ec4:	f803 ec01 	strb.w	lr, [r3, #-1]
  403ec8:	9b20      	ldr	r3, [sp, #128]	; 0x80
  403eca:	1e59      	subs	r1, r3, #1
  403ecc:	9120      	str	r1, [sp, #128]	; 0x80
  403ece:	f813 1c01 	ldrb.w	r1, [r3, #-1]
  403ed2:	4281      	cmp	r1, r0
  403ed4:	d0f6      	beq.n	403ec4 <.LVL605+0xe>
  403ed6:	2939      	cmp	r1, #57	; 0x39
  403ed8:	bf16      	itet	ne
  403eda:	3101      	addne	r1, #1
  403edc:	7aa1      	ldrbeq	r1, [r4, #10]
  403ede:	b2c9      	uxtbne	r1, r1
  403ee0:	f803 1c01 	strb.w	r1, [r3, #-1]
  403ee4:	e6f9      	b.n	403cda <.LVL541>

00403ee6 <.LBB63>:
  403ee6:	9b04      	ldr	r3, [sp, #16]
  403ee8:	9302      	str	r3, [sp, #8]
  403eea:	9308      	str	r3, [sp, #32]

00403eec <.LBE63>:
  403eec:	9004      	str	r0, [sp, #16]
  403eee:	950a      	str	r5, [sp, #40]	; 0x28
  403ef0:	9013      	str	r0, [sp, #76]	; 0x4c
  403ef2:	9010      	str	r0, [sp, #64]	; 0x40
  403ef4:	900e      	str	r0, [sp, #56]	; 0x38
  403ef6:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  403efa:	f7fe be62 	b.w	402bc2 <.L59>

00403efe <.LVL607>:
  403efe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  403f00:	930e      	str	r3, [sp, #56]	; 0x38
  403f02:	2b00      	cmp	r3, #0
  403f04:	9b04      	ldr	r3, [sp, #16]
  403f06:	f340 812d 	ble.w	404164 <.LBE74>

00403f0a <.LVL608>:
  403f0a:	2b00      	cmp	r3, #0
  403f0c:	f040 80ec 	bne.w	4040e8 <.LVL665>
  403f10:	f01e 0f01 	tst.w	lr, #1
  403f14:	f040 80e8 	bne.w	4040e8 <.LVL665>
  403f18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403f1a:	9308      	str	r3, [sp, #32]
  403f1c:	2366      	movs	r3, #102	; 0x66
  403f1e:	930d      	str	r3, [sp, #52]	; 0x34
  403f20:	e7b4      	b.n	403e8c <.LVL599>

00403f22 <.LBB64>:
  403f22:	9c04      	ldr	r4, [sp, #16]
  403f24:	eeb0 0b4a 	vmov.f64	d0, d10
  403f28:	aa20      	add	r2, sp, #128	; 0x80

00403f2a <.LVL610>:
  403f2a:	ab1d      	add	r3, sp, #116	; 0x74
  403f2c:	9201      	str	r2, [sp, #4]
  403f2e:	9300      	str	r3, [sp, #0]
  403f30:	2103      	movs	r1, #3
  403f32:	ab1c      	add	r3, sp, #112	; 0x70

00403f34 <.LVL611>:
  403f34:	4622      	mov	r2, r4
  403f36:	4658      	mov	r0, fp
  403f38:	f001 f8be 	bl	4050b8 <_dtoa_r>

00403f3c <.LVL612>:
  403f3c:	4606      	mov	r6, r0

00403f3e <.LVL613>:
  403f3e:	1901      	adds	r1, r0, r4

00403f40 <.LVL614>:
  403f40:	7833      	ldrb	r3, [r6, #0]
  403f42:	2b30      	cmp	r3, #48	; 0x30
  403f44:	f000 80f9 	beq.w	40413a <.LBB72>
  403f48:	9c1c      	ldr	r4, [sp, #112]	; 0x70

00403f4a <.LVL615>:
  403f4a:	4421      	add	r1, r4
  403f4c:	eeb5 ab40 	vcmp.f64	d10, #0.0
  403f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403f54:	d00b      	beq.n	403f6e <.LVL618>
  403f56:	9b20      	ldr	r3, [sp, #128]	; 0x80
  403f58:	4299      	cmp	r1, r3
  403f5a:	f67f ad11 	bls.w	403980 <.LVL452>
  403f5e:	2030      	movs	r0, #48	; 0x30

00403f60 <.LVL617>:
  403f60:	1c5a      	adds	r2, r3, #1
  403f62:	9220      	str	r2, [sp, #128]	; 0x80
  403f64:	7018      	strb	r0, [r3, #0]
  403f66:	9b20      	ldr	r3, [sp, #128]	; 0x80
  403f68:	4299      	cmp	r1, r3
  403f6a:	d8f9      	bhi.n	403f60 <.LVL617>
  403f6c:	e508      	b.n	403980 <.LVL452>

00403f6e <.LVL618>:
  403f6e:	460b      	mov	r3, r1
  403f70:	e506      	b.n	403980 <.LVL452>

00403f72 <.LBB24>:
  403f72:	aa22      	add	r2, sp, #136	; 0x88
  403f74:	9905      	ldr	r1, [sp, #20]
  403f76:	4658      	mov	r0, fp
  403f78:	f004 fd8a 	bl	408a90 <.LFE25>

00403f7c <.LVL620>:
  403f7c:	2800      	cmp	r0, #0
  403f7e:	f47e adab 	bne.w	402ad8 <.L189>
  403f82:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  403f84:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403f86:	9b24      	ldr	r3, [sp, #144]	; 0x90

00403f88 <.LVL621>:
  403f88:	1a8a      	subs	r2, r1, r2
  403f8a:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00403f8e <.LVL622>:
  403f8e:	e436      	b.n	4037fe <.LVL409>

00403f90 <.LBE24>:
  403f90:	424c      	negs	r4, r1
  403f92:	3110      	adds	r1, #16

00403f94 <.LVL624>:
  403f94:	da5d      	bge.n	404052 <.LVL651>
  403f96:	2510      	movs	r5, #16
  403f98:	e004      	b.n	403fa4 <.LVL626+0x6>

00403f9a <.LVL625>:
  403f9a:	f109 0908 	add.w	r9, r9, #8

00403f9e <.LVL626>:
  403f9e:	3c10      	subs	r4, #16
  403fa0:	2c10      	cmp	r4, #16
  403fa2:	dd56      	ble.n	404052 <.LVL651>
  403fa4:	3201      	adds	r2, #1
  403fa6:	3310      	adds	r3, #16
  403fa8:	2a07      	cmp	r2, #7
  403faa:	9324      	str	r3, [sp, #144]	; 0x90

00403fac <.LVL629>:
  403fac:	9223      	str	r2, [sp, #140]	; 0x8c
  403fae:	f8c9 a000 	str.w	sl, [r9]
  403fb2:	f8c9 5004 	str.w	r5, [r9, #4]
  403fb6:	ddf0      	ble.n	403f9a <.LVL625>
  403fb8:	aa22      	add	r2, sp, #136	; 0x88
  403fba:	9905      	ldr	r1, [sp, #20]
  403fbc:	4658      	mov	r0, fp
  403fbe:	f004 fd67 	bl	408a90 <.LFE25>

00403fc2 <.LVL630>:
  403fc2:	2800      	cmp	r0, #0
  403fc4:	f47e ad88 	bne.w	402ad8 <.L189>
  403fc8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403fca:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  403fcc:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00403fd0 <.LVL631>:
  403fd0:	e7e5      	b.n	403f9e <.LVL626>

00403fd2 <.LVL632>:
  403fd2:	aa22      	add	r2, sp, #136	; 0x88
  403fd4:	9905      	ldr	r1, [sp, #20]
  403fd6:	4658      	mov	r0, fp
  403fd8:	f004 fd5a 	bl	408a90 <.LFE25>

00403fdc <.LVL633>:
  403fdc:	2800      	cmp	r0, #0
  403fde:	f47e ad7b 	bne.w	402ad8 <.L189>
  403fe2:	991c      	ldr	r1, [sp, #112]	; 0x70
  403fe4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403fe6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  403fe8:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00403fec <.LVL634>:
  403fec:	e589      	b.n	403b02 <.LVL494>

00403fee <.LVL635>:
  403fee:	9b08      	ldr	r3, [sp, #32]
  403ff0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403ff4:	9302      	str	r3, [sp, #8]

00403ff6 <.LVL636>:
  403ff6:	2367      	movs	r3, #103	; 0x67
  403ff8:	930d      	str	r3, [sp, #52]	; 0x34
  403ffa:	e74f      	b.n	403e9c <.LVL600>

00403ffc <.LVL637>:
  403ffc:	2200      	movs	r2, #0
  403ffe:	9204      	str	r2, [sp, #16]
  404000:	f7fe bcd2 	b.w	4029a8 <.LVL22+0x2>

00404004 <.LBB66>:
  404004:	1931      	adds	r1, r6, r4

00404006 <.LVL639>:
  404006:	e7a1      	b.n	403f4c <.LVL615+0x2>

00404008 <.LBB67>:
  404008:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40400a:	320f      	adds	r2, #15
  40400c:	b2d2      	uxtb	r2, r2
  40400e:	2101      	movs	r1, #1
  404010:	e6a4      	b.n	403d5c <.LVL560>

00404012 <.LBB68>:
  404012:	eeb0 0b4a 	vmov.f64	d0, d10
  404016:	a81c      	add	r0, sp, #112	; 0x70

00404018 <.LVL642>:
  404018:	f006 f9aa 	bl	40a370 <.LFE52>

0040401c <.LVL643>:
  40401c:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
  404020:	ee20 0b07 	vmul.f64	d0, d0, d7

00404024 <.LVL644>:
  404024:	eeb5 0b40 	vcmp.f64	d0, #0.0
  404028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40402c:	f000 80af 	beq.w	40418e <.LBB75>
  404030:	4c3a      	ldr	r4, [pc, #232]	; (40411c <.LVL671+0x6>)
  404032:	e616      	b.n	403c62 <.LVL531>

00404034 <.LBB69>:
  404034:	2900      	cmp	r1, #0
  404036:	f040 808f 	bne.w	404158 <.LBB73>

0040403a <.LVL646>:
  40403a:	2230      	movs	r2, #48	; 0x30
  40403c:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
  404040:	f10d 027b 	add.w	r2, sp, #123	; 0x7b

00404044 <.LVL647>:
  404044:	3330      	adds	r3, #48	; 0x30

00404046 <.LVL648>:
  404046:	7013      	strb	r3, [r2, #0]
  404048:	3201      	adds	r2, #1
  40404a:	e6ca      	b.n	403de2 <.LVL576>

0040404c <.LBE69>:
  40404c:	2306      	movs	r3, #6
  40404e:	9304      	str	r3, [sp, #16]
  404050:	e466      	b.n	403920 <.LBB28>

00404052 <.LVL651>:
  404052:	3201      	adds	r2, #1
  404054:	4423      	add	r3, r4
  404056:	2a07      	cmp	r2, #7
  404058:	f8c9 a000 	str.w	sl, [r9]
  40405c:	f8c9 4004 	str.w	r4, [r9, #4]
  404060:	9324      	str	r3, [sp, #144]	; 0x90
  404062:	9223      	str	r2, [sp, #140]	; 0x8c
  404064:	f109 0908 	add.w	r9, r9, #8
  404068:	f77f ad4e 	ble.w	403b08 <.LVL495>
  40406c:	aa22      	add	r2, sp, #136	; 0x88
  40406e:	9905      	ldr	r1, [sp, #20]
  404070:	4658      	mov	r0, fp
  404072:	f004 fd0d 	bl	408a90 <.LFE25>

00404076 <.LVL653>:
  404076:	2800      	cmp	r0, #0
  404078:	f47e ad2e 	bne.w	402ad8 <.L189>
  40407c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40407e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  404080:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00404084 <.LVL654>:
  404084:	e540      	b.n	403b08 <.LVL495>

00404086 <.LVL655>:
  404086:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404088:	9308      	str	r3, [sp, #32]
  40408a:	e49c      	b.n	4039c6 <.LVL456>

0040408c <.LVL656>:
  40408c:	1c59      	adds	r1, r3, #1
  40408e:	4658      	mov	r0, fp
  404090:	f002 f9a8 	bl	4063e4 <.LFE14>

00404094 <.LVL657>:
  404094:	4606      	mov	r6, r0

00404096 <.LVL658>:
  404096:	2800      	cmp	r0, #0
  404098:	f000 8096 	beq.w	4041c8 <.LVL695>
  40409c:	9009      	str	r0, [sp, #36]	; 0x24
  40409e:	e5b8      	b.n	403c12 <.LBB48>

004040a0 <.LBB70>:
  4040a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4040a2:	2b47      	cmp	r3, #71	; 0x47
  4040a4:	d1ae      	bne.n	404004 <.LBB66>
  4040a6:	f018 0f01 	tst.w	r8, #1
  4040aa:	f43f ac68 	beq.w	40397e <.LVL451>
  4040ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4040b0:	2b46      	cmp	r3, #70	; 0x46
  4040b2:	eb06 0104 	add.w	r1, r6, r4

004040b6 <.LVL660>:
  4040b6:	f43f af43 	beq.w	403f40 <.LVL614>
  4040ba:	e747      	b.n	403f4c <.LVL615+0x2>

004040bc <.LBE70>:
  4040bc:	4e18      	ldr	r6, [pc, #96]	; (404120 <.LVL671+0xa>)

004040be <.LVL662>:
  4040be:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  4040c0:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  4040c4:	2300      	movs	r3, #0
  4040c6:	4619      	mov	r1, r3
  4040c8:	2003      	movs	r0, #3
  4040ca:	9309      	str	r3, [sp, #36]	; 0x24
  4040cc:	1f33      	subs	r3, r6, #4
  4040ce:	9104      	str	r1, [sp, #16]
  4040d0:	9002      	str	r0, [sp, #8]
  4040d2:	f028 0880 	bic.w	r8, r8, #128	; 0x80

004040d6 <.LVL663>:
  4040d6:	2c47      	cmp	r4, #71	; 0x47
  4040d8:	bfd8      	it	le
  4040da:	461e      	movle	r6, r3

004040dc <.LVL664>:
  4040dc:	9113      	str	r1, [sp, #76]	; 0x4c
  4040de:	9110      	str	r1, [sp, #64]	; 0x40
  4040e0:	910e      	str	r1, [sp, #56]	; 0x38
  4040e2:	9008      	str	r0, [sp, #32]
  4040e4:	f7fe bd6d 	b.w	402bc2 <.L59>

004040e8 <.LVL665>:
  4040e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4040ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4040ec:	4413      	add	r3, r2
  4040ee:	9a04      	ldr	r2, [sp, #16]
  4040f0:	441a      	add	r2, r3
  4040f2:	2366      	movs	r3, #102	; 0x66
  4040f4:	9208      	str	r2, [sp, #32]

004040f6 <.LVL666>:
  4040f6:	930d      	str	r3, [sp, #52]	; 0x34
  4040f8:	e6c8      	b.n	403e8c <.LVL599>

004040fa <.LBB71>:
  4040fa:	9c04      	ldr	r4, [sp, #16]
  4040fc:	eeb0 0b4a 	vmov.f64	d0, d10
  404100:	aa20      	add	r2, sp, #128	; 0x80

00404102 <.LVL668>:
  404102:	ab1d      	add	r3, sp, #116	; 0x74
  404104:	9201      	str	r2, [sp, #4]
  404106:	9300      	str	r3, [sp, #0]
  404108:	4622      	mov	r2, r4
  40410a:	ab1c      	add	r3, sp, #112	; 0x70

0040410c <.LVL669>:
  40410c:	2103      	movs	r1, #3
  40410e:	4658      	mov	r0, fp
  404110:	f000 ffd2 	bl	4050b8 <_dtoa_r>

00404114 <.LVL670>:
  404114:	4606      	mov	r6, r0

00404116 <.LVL671>:
  404116:	e7ca      	b.n	4040ae <.LBB70+0xe>
  404118:	0040b0f4 	.word	0x0040b0f4
  40411c:	0040b0e0 	.word	0x0040b0e0
  404120:	0040b0c8 	.word	0x0040b0c8

00404124 <.LBE71>:
  404124:	9a08      	ldr	r2, [sp, #32]
  404126:	f1c3 0301 	rsb	r3, r3, #1
  40412a:	441a      	add	r2, r3
  40412c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404130:	9302      	str	r3, [sp, #8]

00404132 <.LVL673>:
  404132:	2367      	movs	r3, #103	; 0x67
  404134:	9208      	str	r2, [sp, #32]

00404136 <.LVL674>:
  404136:	930d      	str	r3, [sp, #52]	; 0x34
  404138:	e6b0      	b.n	403e9c <.LVL600>

0040413a <.LBB72>:
  40413a:	eeb5 ab40 	vcmp.f64	d10, #0.0
  40413e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  404142:	f43f af01 	beq.w	403f48 <.LVL614+0x8>
  404146:	f1c4 0401 	rsb	r4, r4, #1

0040414a <.LVL676>:
  40414a:	941c      	str	r4, [sp, #112]	; 0x70
  40414c:	e6fd      	b.n	403f4a <.LVL615>

0040414e <.LBE72>:
  40414e:	f01e 0f01 	tst.w	lr, #1
  404152:	f43f ae53 	beq.w	403dfc <.LVL582+0x6>
  404156:	e64d      	b.n	403df4 <.LVL581+0x4>

00404158 <.LBB73>:
  404158:	f10d 027a 	add.w	r2, sp, #122	; 0x7a

0040415c <.LVL679>:
  40415c:	e772      	b.n	404044 <.LVL647>

0040415e <.LBB74>:
  40415e:	4601      	mov	r1, r0
  404160:	4613      	mov	r3, r2
  404162:	e6b8      	b.n	403ed6 <.LVL605+0x20>

00404164 <.LBE74>:
  404164:	b913      	cbnz	r3, 40416c <.LBE74+0x8>
  404166:	f01e 0f01 	tst.w	lr, #1
  40416a:	d00a      	beq.n	404182 <.LVL683>
  40416c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40416e:	9a04      	ldr	r2, [sp, #16]
  404170:	3301      	adds	r3, #1
  404172:	441a      	add	r2, r3
  404174:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404178:	9302      	str	r3, [sp, #8]

0040417a <.LVL682>:
  40417a:	2366      	movs	r3, #102	; 0x66
  40417c:	9208      	str	r2, [sp, #32]
  40417e:	930d      	str	r3, [sp, #52]	; 0x34
  404180:	e68c      	b.n	403e9c <.LVL600>

00404182 <.LVL683>:
  404182:	2301      	movs	r3, #1
  404184:	9302      	str	r3, [sp, #8]

00404186 <.LVL684>:
  404186:	9308      	str	r3, [sp, #32]

00404188 <.LVL685>:
  404188:	2366      	movs	r3, #102	; 0x66
  40418a:	930d      	str	r3, [sp, #52]	; 0x34
  40418c:	e686      	b.n	403e9c <.LVL600>

0040418e <.LBB75>:
  40418e:	2301      	movs	r3, #1
  404190:	931c      	str	r3, [sp, #112]	; 0x70
  404192:	e74d      	b.n	404030 <.LVL644+0xc>

00404194 <.LVL687>:
  404194:	980a      	ldr	r0, [sp, #40]	; 0x28
  404196:	787b      	ldrb	r3, [r7, #1]

00404198 <.LVL688>:
  404198:	6802      	ldr	r2, [r0, #0]
  40419a:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
  40419e:	9204      	str	r2, [sp, #16]

004041a0 <.LBE75>:
  4041a0:	4602      	mov	r2, r0
  4041a2:	3204      	adds	r2, #4

004041a4 <.LVL689>:
  4041a4:	460f      	mov	r7, r1

004041a6 <.LVL690>:
  4041a6:	920a      	str	r2, [sp, #40]	; 0x28
  4041a8:	f7fe bbfd 	b.w	4029a6 <.LVL22>

004041ac <.LBB76>:
  4041ac:	f10d 027a 	add.w	r2, sp, #122	; 0x7a

004041b0 <.LVL692>:
  4041b0:	e617      	b.n	403de2 <.LVL576>

004041b2 <.LBE76>:
  4041b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4041b4:	230c      	movs	r3, #12
  4041b6:	6013      	str	r3, [r2, #0]
  4041b8:	f04f 33ff 	mov.w	r3, #4294967295
  4041bc:	9303      	str	r3, [sp, #12]
  4041be:	f7fe bc9b 	b.w	402af8 <.LVL45>

004041c2 <.LVL694>:
  4041c2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  4041c4:	930e      	str	r3, [sp, #56]	; 0x38
  4041c6:	e5bf      	b.n	403d48 <.LVL557>

004041c8 <.LVL695>:
  4041c8:	9a05      	ldr	r2, [sp, #20]
  4041ca:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4041ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4041d2:	8193      	strh	r3, [r2, #12]
  4041d4:	f7fe bc89 	b.w	402aea <.LVL44+0x6>

Disassembly of section .dinit%56:

004041d8 <.dinit>:
  4041d8:	20417c80 	.word	0x20417c80
  4041dc:	0000001c 	.word	0x0000001c
  4041e0:	00000000 	.word	0x00000000
  4041e4:	20417d50 	.word	0x20417d50
  4041e8:	00000008 	.word	0x00000008
  4041ec:	00000001 	.word	0x00000001
  4041f0:	00000000 	.word	0x00000000
  4041f4:	20417c60 	.word	0x20417c60
  4041f8:	20417d60 	.word	0x20417d60
  4041fc:	00000004 	.word	0x00000004
  404200:	00000001 	.word	0x00000001
  404204:	00000400 	.word	0x00000400
  404208:	20417d58 	.word	0x20417d58
  40420c:	00000008 	.word	0x00000008
  404210:	00000001 	.word	0x00000001
  404214:	20417c9c 	.word	0x20417c9c
  404218:	00000017 	.word	0x00000017
  40421c:	20417c9c 	.word	0x20417c9c
  404220:	0000001c 	.word	0x0000001c
  404224:	00000001 	.word	0x00000001
  404228:	0040be29 	.word	0x0040be29
  40422c:	0040be05 	.word	0x0040be05
  404230:	0040be59 	.word	0x0040be59
  404234:	0040be11 	.word	0x0040be11
  404238:	0040bded 	.word	0x0040bded
  40423c:	0040bdf9 	.word	0x0040bdf9
  404240:	0040be1d 	.word	0x0040be1d
  404244:	20400000 	.word	0x20400000
  404248:	0000000c 	.word	0x0000000c
  40424c:	00000000 	.word	0x00000000
  404250:	20417d64 	.word	0x20417d64
  404254:	00000004 	.word	0x00000004
  404258:	00000000 	.word	0x00000000
  40425c:	20417d68 	.word	0x20417d68
  404260:	00000004 	.word	0x00000004
  404264:	00000000 	.word	0x00000000
  404268:	20417d6c 	.word	0x20417d6c
  40426c:	00000004 	.word	0x00000004
  404270:	00000000 	.word	0x00000000
  404274:	20417afc 	.word	0x20417afc
  404278:	00000064 	.word	0x00000064
  40427c:	00000000 	.word	0x00000000
  404280:	20417d70 	.word	0x20417d70
  404284:	00000004 	.word	0x00000004
  404288:	00000000 	.word	0x00000000
  40428c:	20417d74 	.word	0x20417d74
  404290:	00000004 	.word	0x00000004
  404294:	00000000 	.word	0x00000000
  404298:	20417d78 	.word	0x20417d78
  40429c:	00000004 	.word	0x00000004
  4042a0:	00000000 	.word	0x00000000
  4042a4:	20417d7c 	.word	0x20417d7c
  4042a8:	00000004 	.word	0x00000004
  4042ac:	00000000 	.word	0x00000000
  4042b0:	20417d80 	.word	0x20417d80
  4042b4:	00000004 	.word	0x00000004
  4042b8:	00000000 	.word	0x00000000
  4042bc:	20417d84 	.word	0x20417d84
  4042c0:	00000004 	.word	0x00000004
  4042c4:	00000000 	.word	0x00000000
  4042c8:	20417cb8 	.word	0x20417cb8
  4042cc:	00000014 	.word	0x00000014
  4042d0:	00000000 	.word	0x00000000
  4042d4:	20417ccc 	.word	0x20417ccc
  4042d8:	00000014 	.word	0x00000014
  4042dc:	00000000 	.word	0x00000000
  4042e0:	20417d88 	.word	0x20417d88
  4042e4:	00000004 	.word	0x00000004
  4042e8:	00000000 	.word	0x00000000
  4042ec:	20417d8c 	.word	0x20417d8c
  4042f0:	00000004 	.word	0x00000004
  4042f4:	00000000 	.word	0x00000000
  4042f8:	20417d90 	.word	0x20417d90
  4042fc:	00000004 	.word	0x00000004
  404300:	00000000 	.word	0x00000000
  404304:	20417ce0 	.word	0x20417ce0
  404308:	00000014 	.word	0x00000014
  40430c:	00000000 	.word	0x00000000
  404310:	20417d94 	.word	0x20417d94
  404314:	00000004 	.word	0x00000004
  404318:	00000000 	.word	0x00000000
  40431c:	20417cf4 	.word	0x20417cf4
  404320:	00000014 	.word	0x00000014
  404324:	00000000 	.word	0x00000000
  404328:	20417d08 	.word	0x20417d08
  40432c:	00000014 	.word	0x00000014
  404330:	00000000 	.word	0x00000000
  404334:	20417d98 	.word	0x20417d98
  404338:	00000004 	.word	0x00000004
  40433c:	00000000 	.word	0x00000000
  404340:	20417d9c 	.word	0x20417d9c
  404344:	00000004 	.word	0x00000004
  404348:	00000000 	.word	0x00000000
  40434c:	20417da0 	.word	0x20417da0
  404350:	00000004 	.word	0x00000004
  404354:	00000000 	.word	0x00000000
  404358:	2040cc88 	.word	0x2040cc88
  40435c:	0000a000 	.word	0x0000a000
  404360:	00000000 	.word	0x00000000
  404364:	20417da4 	.word	0x20417da4
  404368:	00000004 	.word	0x00000004
  40436c:	00000000 	.word	0x00000000
  404370:	20417da8 	.word	0x20417da8
  404374:	00000004 	.word	0x00000004
  404378:	00000001 	.word	0x00000001
  40437c:	aaaaaaaa 	.word	0xaaaaaaaa
  404380:	20417dac 	.word	0x20417dac
  404384:	00000004 	.word	0x00000004
  404388:	00000000 	.word	0x00000000
  40438c:	20400488 	.word	0x20400488
  404390:	0000c800 	.word	0x0000c800
  404394:	00000000 	.word	0x00000000
  404398:	204176b8 	.word	0x204176b8
  40439c:	00000198 	.word	0x00000198
  4043a0:	00000001 	.word	0x00000001
  4043a4:	00010100 	.word	0x00010100
	...
  40453c:	20400040 	.word	0x20400040
  404540:	00000400 	.word	0x00000400
  404544:	00000000 	.word	0x00000000
  404548:	20417d44 	.word	0x20417d44
  40454c:	0000000c 	.word	0x0000000c
  404550:	00000000 	.word	0x00000000
  404554:	20417b60 	.word	0x20417b60
  404558:	00000050 	.word	0x00000050
  40455c:	00000000 	.word	0x00000000
  404560:	204174b8 	.word	0x204174b8
  404564:	00000200 	.word	0x00000200
  404568:	00000000 	.word	0x00000000
  40456c:	20417bb0 	.word	0x20417bb0
  404570:	00000050 	.word	0x00000050
  404574:	00000001 	.word	0x00000001
	...
  4045bc:	00000101 	.word	0x00000101
	...
  4045c8:	20417c60 	.word	0x20417c60
  4045cc:	00000020 	.word	0x00000020
  4045d0:	00000001 	.word	0x00000001
  4045d4:	00000300 	.word	0x00000300
  4045d8:	00408f21 	.word	0x00408f21
  4045dc:	0040ac81 	.word	0x0040ac81
  4045e0:	0040ae31 	.word	0x0040ae31
  4045e4:	0040bb25 	.word	0x0040bb25
  4045e8:	00407e4d 	.word	0x00407e4d
  4045ec:	0040afa5 	.word	0x0040afa5
  4045f0:	0040b1c1 	.word	0x0040b1c1
  4045f4:	20417d1c 	.word	0x20417d1c
  4045f8:	00000014 	.word	0x00000014
  4045fc:	00000001 	.word	0x00000001
	...
  40460c:	20417b60 	.word	0x20417b60
  404610:	0000000a 	.word	0x0000000a
  404614:	20417d30 	.word	0x20417d30
  404618:	00000014 	.word	0x00000014
  40461c:	00000001 	.word	0x00000001
	...
  40462c:	204174b8 	.word	0x204174b8
  404630:	00000040 	.word	0x00000040
  404634:	20400440 	.word	0x20400440
  404638:	00000009 	.word	0x00000009
  40463c:	00000000 	.word	0x00000000
  404640:	20417c00 	.word	0x20417c00
  404644:	00000038 	.word	0x00000038
  404648:	00000000 	.word	0x00000000
  40464c:	204179bc 	.word	0x204179bc
  404650:	00000140 	.word	0x00000140
  404654:	00000000 	.word	0x00000000
  404658:	2040044c 	.word	0x2040044c
  40465c:	00000008 	.word	0x00000008
  404660:	00000000 	.word	0x00000000
  404664:	20400454 	.word	0x20400454
  404668:	00000030 	.word	0x00000030
  40466c:	00000000 	.word	0x00000000
  404670:	20417db0 	.word	0x20417db0
  404674:	00000004 	.word	0x00000004
  404678:	00000001 	.word	0x00000001
  40467c:	20416c88 	.word	0x20416c88
  404680:	20416c88 	.word	0x20416c88
  404684:	00000428 	.word	0x00000428
  404688:	00000001 	.word	0x00000001
  40468c:	00000000 	.word	0x00000000
  404690:	20416f74 	.word	0x20416f74
  404694:	20416fdc 	.word	0x20416fdc
  404698:	20417044 	.word	0x20417044
	...
  404734:	00000001 	.word	0x00000001
  404738:	00000000 	.word	0x00000000
  40473c:	abcd330e 	.word	0xabcd330e
  404740:	e66d1234 	.word	0xe66d1234
  404744:	0005deec 	.word	0x0005deec
  404748:	0000000b 	.word	0x0000000b
	...
  404ab4:	20417850 	.word	0x20417850
  404ab8:	0000016c 	.word	0x0000016c
  404abc:	00000001 	.word	0x00000001
  404ac0:	00000043 	.word	0x00000043
	...
  404ae0:	00000043 	.word	0x00000043
	...
  404b00:	00000043 	.word	0x00000043
	...
  404b20:	00000043 	.word	0x00000043
	...
  404b40:	00000043 	.word	0x00000043
	...
  404b60:	00000043 	.word	0x00000043
	...
  404b80:	00000043 	.word	0x00000043
	...
  404ba0:	0040b96d 	.word	0x0040b96d
  404ba4:	0040b681 	.word	0x0040b681
  404ba8:	00000000 	.word	0x00000000
  404bac:	00408890 	.word	0x00408890
  404bb0:	0040bc3c 	.word	0x0040bc3c
  404bb4:	0040bc38 	.word	0x0040bc38
  404bb8:	0040bc38 	.word	0x0040bc38
  404bbc:	0040bc38 	.word	0x0040bc38
  404bc0:	0040bc38 	.word	0x0040bc38
  404bc4:	0040bc38 	.word	0x0040bc38
  404bc8:	0040bc38 	.word	0x0040bc38
  404bcc:	0040bc38 	.word	0x0040bc38
  404bd0:	0040bc38 	.word	0x0040bc38
  404bd4:	0040bc38 	.word	0x0040bc38
  404bd8:	ffffffff 	.word	0xffffffff
  404bdc:	ffffffff 	.word	0xffffffff
  404be0:	ffffffff 	.word	0xffffffff
  404be4:	0000ffff 	.word	0x0000ffff
  404be8:	53410001 	.word	0x53410001
  404bec:	00494943 	.word	0x00494943
	...
  404c08:	53410000 	.word	0x53410000
  404c0c:	00494943 	.word	0x00494943
	...
  404c2c:	20417c38 	.word	0x20417c38
  404c30:	00000028 	.word	0x00000028
  404c34:	00000000 	.word	0x00000000
  404c38:	20417db4 	.word	0x20417db4
  404c3c:	00000004 	.word	0x00000004
  404c40:	00000000 	.word	0x00000000
  404c44:	20417db8 	.word	0x20417db8
  404c48:	00000004 	.word	0x00000004
  404c4c:	00000000 	.word	0x00000000
  404c50:	20417dbc 	.word	0x20417dbc
  404c54:	00000004 	.word	0x00000004
  404c58:	00000000 	.word	0x00000000
  404c5c:	204170b0 	.word	0x204170b0
  404c60:	00000408 	.word	0x00000408
  404c64:	00000001 	.word	0x00000001
	...
  404c70:	204170b0 	.word	0x204170b0
  404c74:	204170b0 	.word	0x204170b0
  404c78:	204170b8 	.word	0x204170b8
  404c7c:	204170b8 	.word	0x204170b8
  404c80:	204170c0 	.word	0x204170c0
  404c84:	204170c0 	.word	0x204170c0
  404c88:	204170c8 	.word	0x204170c8
  404c8c:	204170c8 	.word	0x204170c8
  404c90:	204170d0 	.word	0x204170d0
  404c94:	204170d0 	.word	0x204170d0
  404c98:	204170d8 	.word	0x204170d8
  404c9c:	204170d8 	.word	0x204170d8
  404ca0:	204170e0 	.word	0x204170e0
  404ca4:	204170e0 	.word	0x204170e0
  404ca8:	204170e8 	.word	0x204170e8
  404cac:	204170e8 	.word	0x204170e8
  404cb0:	204170f0 	.word	0x204170f0
  404cb4:	204170f0 	.word	0x204170f0
  404cb8:	204170f8 	.word	0x204170f8
  404cbc:	204170f8 	.word	0x204170f8
  404cc0:	20417100 	.word	0x20417100
  404cc4:	20417100 	.word	0x20417100
  404cc8:	20417108 	.word	0x20417108
  404ccc:	20417108 	.word	0x20417108
  404cd0:	20417110 	.word	0x20417110
  404cd4:	20417110 	.word	0x20417110
  404cd8:	20417118 	.word	0x20417118
  404cdc:	20417118 	.word	0x20417118
  404ce0:	20417120 	.word	0x20417120
  404ce4:	20417120 	.word	0x20417120
  404ce8:	20417128 	.word	0x20417128
  404cec:	20417128 	.word	0x20417128
  404cf0:	20417130 	.word	0x20417130
  404cf4:	20417130 	.word	0x20417130
  404cf8:	20417138 	.word	0x20417138
  404cfc:	20417138 	.word	0x20417138
  404d00:	20417140 	.word	0x20417140
  404d04:	20417140 	.word	0x20417140
  404d08:	20417148 	.word	0x20417148
  404d0c:	20417148 	.word	0x20417148
  404d10:	20417150 	.word	0x20417150
  404d14:	20417150 	.word	0x20417150
  404d18:	20417158 	.word	0x20417158
  404d1c:	20417158 	.word	0x20417158
  404d20:	20417160 	.word	0x20417160
  404d24:	20417160 	.word	0x20417160
  404d28:	20417168 	.word	0x20417168
  404d2c:	20417168 	.word	0x20417168
  404d30:	20417170 	.word	0x20417170
  404d34:	20417170 	.word	0x20417170
  404d38:	20417178 	.word	0x20417178
  404d3c:	20417178 	.word	0x20417178
  404d40:	20417180 	.word	0x20417180
  404d44:	20417180 	.word	0x20417180
  404d48:	20417188 	.word	0x20417188
  404d4c:	20417188 	.word	0x20417188
  404d50:	20417190 	.word	0x20417190
  404d54:	20417190 	.word	0x20417190
  404d58:	20417198 	.word	0x20417198
  404d5c:	20417198 	.word	0x20417198
  404d60:	204171a0 	.word	0x204171a0
  404d64:	204171a0 	.word	0x204171a0
  404d68:	204171a8 	.word	0x204171a8
  404d6c:	204171a8 	.word	0x204171a8
  404d70:	204171b0 	.word	0x204171b0
  404d74:	204171b0 	.word	0x204171b0
  404d78:	204171b8 	.word	0x204171b8
  404d7c:	204171b8 	.word	0x204171b8
  404d80:	204171c0 	.word	0x204171c0
  404d84:	204171c0 	.word	0x204171c0
  404d88:	204171c8 	.word	0x204171c8
  404d8c:	204171c8 	.word	0x204171c8
  404d90:	204171d0 	.word	0x204171d0
  404d94:	204171d0 	.word	0x204171d0
  404d98:	204171d8 	.word	0x204171d8
  404d9c:	204171d8 	.word	0x204171d8
  404da0:	204171e0 	.word	0x204171e0
  404da4:	204171e0 	.word	0x204171e0
  404da8:	204171e8 	.word	0x204171e8
  404dac:	204171e8 	.word	0x204171e8
  404db0:	204171f0 	.word	0x204171f0
  404db4:	204171f0 	.word	0x204171f0
  404db8:	204171f8 	.word	0x204171f8
  404dbc:	204171f8 	.word	0x204171f8
  404dc0:	20417200 	.word	0x20417200
  404dc4:	20417200 	.word	0x20417200
  404dc8:	20417208 	.word	0x20417208
  404dcc:	20417208 	.word	0x20417208
  404dd0:	20417210 	.word	0x20417210
  404dd4:	20417210 	.word	0x20417210
  404dd8:	20417218 	.word	0x20417218
  404ddc:	20417218 	.word	0x20417218
  404de0:	20417220 	.word	0x20417220
  404de4:	20417220 	.word	0x20417220
  404de8:	20417228 	.word	0x20417228
  404dec:	20417228 	.word	0x20417228
  404df0:	20417230 	.word	0x20417230
  404df4:	20417230 	.word	0x20417230
  404df8:	20417238 	.word	0x20417238
  404dfc:	20417238 	.word	0x20417238
  404e00:	20417240 	.word	0x20417240
  404e04:	20417240 	.word	0x20417240
  404e08:	20417248 	.word	0x20417248
  404e0c:	20417248 	.word	0x20417248
  404e10:	20417250 	.word	0x20417250
  404e14:	20417250 	.word	0x20417250
  404e18:	20417258 	.word	0x20417258
  404e1c:	20417258 	.word	0x20417258
  404e20:	20417260 	.word	0x20417260
  404e24:	20417260 	.word	0x20417260
  404e28:	20417268 	.word	0x20417268
  404e2c:	20417268 	.word	0x20417268
  404e30:	20417270 	.word	0x20417270
  404e34:	20417270 	.word	0x20417270
  404e38:	20417278 	.word	0x20417278
  404e3c:	20417278 	.word	0x20417278
  404e40:	20417280 	.word	0x20417280
  404e44:	20417280 	.word	0x20417280
  404e48:	20417288 	.word	0x20417288
  404e4c:	20417288 	.word	0x20417288
  404e50:	20417290 	.word	0x20417290
  404e54:	20417290 	.word	0x20417290
  404e58:	20417298 	.word	0x20417298
  404e5c:	20417298 	.word	0x20417298
  404e60:	204172a0 	.word	0x204172a0
  404e64:	204172a0 	.word	0x204172a0
  404e68:	204172a8 	.word	0x204172a8
  404e6c:	204172a8 	.word	0x204172a8
  404e70:	204172b0 	.word	0x204172b0
  404e74:	204172b0 	.word	0x204172b0
  404e78:	204172b8 	.word	0x204172b8
  404e7c:	204172b8 	.word	0x204172b8
  404e80:	204172c0 	.word	0x204172c0
  404e84:	204172c0 	.word	0x204172c0
  404e88:	204172c8 	.word	0x204172c8
  404e8c:	204172c8 	.word	0x204172c8
  404e90:	204172d0 	.word	0x204172d0
  404e94:	204172d0 	.word	0x204172d0
  404e98:	204172d8 	.word	0x204172d8
  404e9c:	204172d8 	.word	0x204172d8
  404ea0:	204172e0 	.word	0x204172e0
  404ea4:	204172e0 	.word	0x204172e0
  404ea8:	204172e8 	.word	0x204172e8
  404eac:	204172e8 	.word	0x204172e8
  404eb0:	204172f0 	.word	0x204172f0
  404eb4:	204172f0 	.word	0x204172f0
  404eb8:	204172f8 	.word	0x204172f8
  404ebc:	204172f8 	.word	0x204172f8
  404ec0:	20417300 	.word	0x20417300
  404ec4:	20417300 	.word	0x20417300
  404ec8:	20417308 	.word	0x20417308
  404ecc:	20417308 	.word	0x20417308
  404ed0:	20417310 	.word	0x20417310
  404ed4:	20417310 	.word	0x20417310
  404ed8:	20417318 	.word	0x20417318
  404edc:	20417318 	.word	0x20417318
  404ee0:	20417320 	.word	0x20417320
  404ee4:	20417320 	.word	0x20417320
  404ee8:	20417328 	.word	0x20417328
  404eec:	20417328 	.word	0x20417328
  404ef0:	20417330 	.word	0x20417330
  404ef4:	20417330 	.word	0x20417330
  404ef8:	20417338 	.word	0x20417338
  404efc:	20417338 	.word	0x20417338
  404f00:	20417340 	.word	0x20417340
  404f04:	20417340 	.word	0x20417340
  404f08:	20417348 	.word	0x20417348
  404f0c:	20417348 	.word	0x20417348
  404f10:	20417350 	.word	0x20417350
  404f14:	20417350 	.word	0x20417350
  404f18:	20417358 	.word	0x20417358
  404f1c:	20417358 	.word	0x20417358
  404f20:	20417360 	.word	0x20417360
  404f24:	20417360 	.word	0x20417360
  404f28:	20417368 	.word	0x20417368
  404f2c:	20417368 	.word	0x20417368
  404f30:	20417370 	.word	0x20417370
  404f34:	20417370 	.word	0x20417370
  404f38:	20417378 	.word	0x20417378
  404f3c:	20417378 	.word	0x20417378
  404f40:	20417380 	.word	0x20417380
  404f44:	20417380 	.word	0x20417380
  404f48:	20417388 	.word	0x20417388
  404f4c:	20417388 	.word	0x20417388
  404f50:	20417390 	.word	0x20417390
  404f54:	20417390 	.word	0x20417390
  404f58:	20417398 	.word	0x20417398
  404f5c:	20417398 	.word	0x20417398
  404f60:	204173a0 	.word	0x204173a0
  404f64:	204173a0 	.word	0x204173a0
  404f68:	204173a8 	.word	0x204173a8
  404f6c:	204173a8 	.word	0x204173a8
  404f70:	204173b0 	.word	0x204173b0
  404f74:	204173b0 	.word	0x204173b0
  404f78:	204173b8 	.word	0x204173b8
  404f7c:	204173b8 	.word	0x204173b8
  404f80:	204173c0 	.word	0x204173c0
  404f84:	204173c0 	.word	0x204173c0
  404f88:	204173c8 	.word	0x204173c8
  404f8c:	204173c8 	.word	0x204173c8
  404f90:	204173d0 	.word	0x204173d0
  404f94:	204173d0 	.word	0x204173d0
  404f98:	204173d8 	.word	0x204173d8
  404f9c:	204173d8 	.word	0x204173d8
  404fa0:	204173e0 	.word	0x204173e0
  404fa4:	204173e0 	.word	0x204173e0
  404fa8:	204173e8 	.word	0x204173e8
  404fac:	204173e8 	.word	0x204173e8
  404fb0:	204173f0 	.word	0x204173f0
  404fb4:	204173f0 	.word	0x204173f0
  404fb8:	204173f8 	.word	0x204173f8
  404fbc:	204173f8 	.word	0x204173f8
  404fc0:	20417400 	.word	0x20417400
  404fc4:	20417400 	.word	0x20417400
  404fc8:	20417408 	.word	0x20417408
  404fcc:	20417408 	.word	0x20417408
  404fd0:	20417410 	.word	0x20417410
  404fd4:	20417410 	.word	0x20417410
  404fd8:	20417418 	.word	0x20417418
  404fdc:	20417418 	.word	0x20417418
  404fe0:	20417420 	.word	0x20417420
  404fe4:	20417420 	.word	0x20417420
  404fe8:	20417428 	.word	0x20417428
  404fec:	20417428 	.word	0x20417428
  404ff0:	20417430 	.word	0x20417430
  404ff4:	20417430 	.word	0x20417430
  404ff8:	20417438 	.word	0x20417438
  404ffc:	20417438 	.word	0x20417438
  405000:	20417440 	.word	0x20417440
  405004:	20417440 	.word	0x20417440
  405008:	20417448 	.word	0x20417448
  40500c:	20417448 	.word	0x20417448
  405010:	20417450 	.word	0x20417450
  405014:	20417450 	.word	0x20417450
  405018:	20417458 	.word	0x20417458
  40501c:	20417458 	.word	0x20417458
  405020:	20417460 	.word	0x20417460
  405024:	20417460 	.word	0x20417460
  405028:	20417468 	.word	0x20417468
  40502c:	20417468 	.word	0x20417468
  405030:	20417470 	.word	0x20417470
  405034:	20417470 	.word	0x20417470
  405038:	20417478 	.word	0x20417478
  40503c:	20417478 	.word	0x20417478
  405040:	20417480 	.word	0x20417480
  405044:	20417480 	.word	0x20417480
  405048:	20417488 	.word	0x20417488
  40504c:	20417488 	.word	0x20417488
  405050:	20417490 	.word	0x20417490
  405054:	20417490 	.word	0x20417490
  405058:	20417498 	.word	0x20417498
  40505c:	20417498 	.word	0x20417498
  405060:	204174a0 	.word	0x204174a0
  405064:	204174a0 	.word	0x204174a0
  405068:	204174a8 	.word	0x204174a8
  40506c:	204174a8 	.word	0x204174a8
  405070:	20417dc0 	.word	0x20417dc0
  405074:	00000004 	.word	0x00000004
  405078:	00000001 	.word	0x00000001
  40507c:	ffffffff 	.word	0xffffffff
  405080:	20417dc4 	.word	0x20417dc4
  405084:	00000004 	.word	0x00000004
  405088:	00000001 	.word	0x00000001
  40508c:	00020000 	.word	0x00020000
  405090:	20400484 	.word	0x20400484
  405094:	00000004 	.word	0x00000004
  405098:	00000000 	.word	0x00000000
  40509c:	20417dc8 	.word	0x20417dc8
  4050a0:	00000004 	.word	0x00000004
	...
  4050b0:	22222222 	.word	0x22222222
  4050b4:	22222222 	.word	0x22222222

Disassembly of section .text._dtoa_r%57:

004050b8 <_dtoa_r>:
  4050b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

004050bc <.LCFI4>:
  4050bc:	6c05      	ldr	r5, [r0, #64]	; 0x40
  4050be:	b093      	sub	sp, #76	; 0x4c

004050c0 <.LCFI5>:
  4050c0:	4604      	mov	r4, r0
  4050c2:	ec5b ab10 	vmov	sl, fp, d0
  4050c6:	9f1c      	ldr	r7, [sp, #112]	; 0x70
  4050c8:	9101      	str	r1, [sp, #4]
  4050ca:	4691      	mov	r9, r2
  4050cc:	9304      	str	r3, [sp, #16]
  4050ce:	b14d      	cbz	r5, 4050e4 <.LVL53+0x4>
  4050d0:	6c42      	ldr	r2, [r0, #68]	; 0x44

004050d2 <.LVL50>:
  4050d2:	606a      	str	r2, [r5, #4]
  4050d4:	2301      	movs	r3, #1

004050d6 <.LVL51>:
  4050d6:	4093      	lsls	r3, r2
  4050d8:	60ab      	str	r3, [r5, #8]
  4050da:	4629      	mov	r1, r5

004050dc <.LVL52>:
  4050dc:	f006 fdc4 	bl	40bc68 <_Bfree>

004050e0 <.LVL53>:
  4050e0:	2300      	movs	r3, #0
  4050e2:	6423      	str	r3, [r4, #64]	; 0x40
  4050e4:	f1bb 0f00 	cmp.w	fp, #0
  4050e8:	465e      	mov	r6, fp
  4050ea:	db35      	blt.n	405158 <.LVL63>
  4050ec:	2300      	movs	r3, #0
  4050ee:	603b      	str	r3, [r7, #0]
  4050f0:	4bc1      	ldr	r3, [pc, #772]	; (4053f8 <.LVL134+0x20>)
  4050f2:	43b3      	bics	r3, r6
  4050f4:	d015      	beq.n	405122 <.LCFI7>
  4050f6:	ec4b ab17 	vmov	d7, sl, fp
  4050fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
  4050fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr

00405102 <.LVL55>:
  405102:	e9cd ab02 	strd	sl, fp, [sp, #8]
  405106:	d12d      	bne.n	405164 <.LVL64>
  405108:	9a04      	ldr	r2, [sp, #16]
  40510a:	2301      	movs	r3, #1
  40510c:	6013      	str	r3, [r2, #0]

0040510e <.LVL56>:
  40510e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405110:	2b00      	cmp	r3, #0
  405112:	f000 80b3 	beq.w	40527c <.LVL99>
  405116:	48b9      	ldr	r0, [pc, #740]	; (4053fc <.LVL134+0x24>)
  405118:	6018      	str	r0, [r3, #0]
  40511a:	3801      	subs	r0, #1

0040511c <.LVL57>:
  40511c:	b013      	add	sp, #76	; 0x4c

0040511e <.LCFI6>:
  40511e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00405122 <.LCFI7>:
  405122:	9a04      	ldr	r2, [sp, #16]
  405124:	f242 730f 	movw	r3, #9999	; 0x270f
  405128:	6013      	str	r3, [r2, #0]

0040512a <.LVL59>:
  40512a:	f1ba 0f00 	cmp.w	sl, #0
  40512e:	d10d      	bne.n	40514c <.LCFI9>
  405130:	f3c6 0613 	ubfx	r6, r6, #0, #20
  405134:	b956      	cbnz	r6, 40514c <.LCFI9>

00405136 <.LVL60>:
  405136:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405138:	48b1      	ldr	r0, [pc, #708]	; (405400 <.LVL134+0x28>)
  40513a:	2b00      	cmp	r3, #0
  40513c:	d0ee      	beq.n	40511c <.LVL57>
  40513e:	f100 0308 	add.w	r3, r0, #8

00405142 <.LVL61>:
  405142:	9a1d      	ldr	r2, [sp, #116]	; 0x74
  405144:	6013      	str	r3, [r2, #0]
  405146:	b013      	add	sp, #76	; 0x4c

00405148 <.LCFI8>:
  405148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040514c <.LCFI9>:
  40514c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40514e:	48ad      	ldr	r0, [pc, #692]	; (405404 <.LVL134+0x2c>)
  405150:	2b00      	cmp	r3, #0
  405152:	d0e3      	beq.n	40511c <.LVL57>
  405154:	1cc3      	adds	r3, r0, #3
  405156:	e7f4      	b.n	405142 <.LVL61>

00405158 <.LVL63>:
  405158:	2301      	movs	r3, #1
  40515a:	f02b 4600 	bic.w	r6, fp, #2147483648	; 0x80000000
  40515e:	603b      	str	r3, [r7, #0]
  405160:	46b3      	mov	fp, r6
  405162:	e7c5      	b.n	4050f0 <.LVL53+0x10>

00405164 <.LVL64>:
  405164:	a911      	add	r1, sp, #68	; 0x44
  405166:	aa10      	add	r2, sp, #64	; 0x40
  405168:	ed9d 0b02 	vldr	d0, [sp, #8]
  40516c:	4620      	mov	r0, r4
  40516e:	f004 f9a9 	bl	4094c4 <.LBE77>

00405172 <.LVL65>:
  405172:	0d31      	lsrs	r1, r6, #20
  405174:	4680      	mov	r8, r0

00405176 <.LVL66>:
  405176:	d065      	beq.n	405244 <.LVL92>
  405178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40517c:	f3c3 0013 	ubfx	r0, r3, #0, #20

00405180 <.LVL68>:
  405180:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
  405184:	2500      	movs	r5, #0
  405186:	9810      	ldr	r0, [sp, #64]	; 0x40
  405188:	950d      	str	r5, [sp, #52]	; 0x34
  40518a:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff

0040518e <.LVL69>:
  40518e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000

00405192 <.LVL70>:
  405192:	ec43 2b17 	vmov	d7, r2, r3
  405196:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
  40519a:	ed9f 4b91 	vldr	d4, [pc, #580]	; 4053e0 <.LVL134+0x8>
  40519e:	ee37 6b46 	vsub.f64	d6, d7, d6
  4051a2:	ed9f 7b91 	vldr	d7, [pc, #580]	; 4053e8 <.LVL134+0x10>
  4051a6:	ed9f 5b92 	vldr	d5, [pc, #584]	; 4053f0 <.LVL134+0x18>
  4051aa:	eea6 7b04 	vfma.f64	d7, d6, d4
  4051ae:	ee06 1a90 	vmov	s13, r1
  4051b2:	eeb8 6be6 	vcvt.f64.s32	d6, s13
  4051b6:	eea6 7b05 	vfma.f64	d7, d6, d5

004051ba <.LVL71>:
  4051ba:	eefd 6bc7 	vcvt.s32.f64	s13, d7
  4051be:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
  4051c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4051c6:	edcd 6a02 	vstr	s13, [sp, #8]

004051ca <.LVL72>:
  4051ca:	f100 8130 	bmi.w	40542e <.LVL143>

004051ce <.LVL73>:
  4051ce:	9d02      	ldr	r5, [sp, #8]
  4051d0:	2d16      	cmp	r5, #22
  4051d2:	f200 8101 	bhi.w	4053d8 <.LVL134>
  4051d6:	4b8c      	ldr	r3, [pc, #560]	; (405408 <.LVL134+0x30>)
  4051d8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  4051dc:	ed93 7b00 	vldr	d7, [r3]

004051e0 <.LVL74>:
  4051e0:	ec4b ab16 	vmov	d6, sl, fp
  4051e4:	eeb4 7bc6 	vcmpe.f64	d7, d6
  4051e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4051ec:	f340 8183 	ble.w	4054f6 <.LVL173>
  4051f0:	1e6b      	subs	r3, r5, #1
  4051f2:	9302      	str	r3, [sp, #8]

004051f4 <.LVL75>:
  4051f4:	2300      	movs	r3, #0

004051f6 <.LVL76>:
  4051f6:	930b      	str	r3, [sp, #44]	; 0x2c

004051f8 <.LVL77>:
  4051f8:	1a41      	subs	r1, r0, r1

004051fa <.LVL78>:
  4051fa:	1e4b      	subs	r3, r1, #1

004051fc <.LVL79>:
  4051fc:	9306      	str	r3, [sp, #24]
  4051fe:	f100 8110 	bmi.w	405422 <.LVL138>
  405202:	2300      	movs	r3, #0

00405204 <.LVL80>:
  405204:	9307      	str	r3, [sp, #28]

00405206 <.LVL81>:
  405206:	9b02      	ldr	r3, [sp, #8]
  405208:	2b00      	cmp	r3, #0
  40520a:	f2c0 8101 	blt.w	405410 <.LVL135>

0040520e <.LVL82>:
  40520e:	9a06      	ldr	r2, [sp, #24]

00405210 <.LVL83>:
  405210:	930a      	str	r3, [sp, #40]	; 0x28
  405212:	4611      	mov	r1, r2

00405214 <.LVL84>:
  405214:	4419      	add	r1, r3
  405216:	2300      	movs	r3, #0

00405218 <.LVL85>:
  405218:	9106      	str	r1, [sp, #24]

0040521a <.LVL86>:
  40521a:	9305      	str	r3, [sp, #20]

0040521c <.LVL87>:
  40521c:	9b01      	ldr	r3, [sp, #4]
  40521e:	2b09      	cmp	r3, #9
  405220:	d82e      	bhi.n	405280 <.LVL100>

00405222 <.LVL88>:
  405222:	2b05      	cmp	r3, #5
  405224:	f340 8550 	ble.w	405cc8 <.LVL445>
  405228:	3b04      	subs	r3, #4

0040522a <.LVL89>:
  40522a:	9301      	str	r3, [sp, #4]

0040522c <.LVL90>:
  40522c:	2500      	movs	r5, #0

0040522e <.LVL91>:
  40522e:	9b01      	ldr	r3, [sp, #4]
  405230:	3b02      	subs	r3, #2
  405232:	2b03      	cmp	r3, #3
  405234:	f200 8550 	bhi.w	405cd8 <.LVL447>
  405238:	e8df f013 	tbh	[pc, r3, lsl #1]
  40523c:	02860349 	.word	0x02860349
  405240:	03d80356 	.word	0x03d80356

00405244 <.LVL92>:
  405244:	9810      	ldr	r0, [sp, #64]	; 0x40

00405246 <.LVL93>:
  405246:	9911      	ldr	r1, [sp, #68]	; 0x44

00405248 <.LVL94>:
  405248:	4401      	add	r1, r0
  40524a:	f201 4332 	addw	r3, r1, #1074	; 0x432

0040524e <.LVL95>:
  40524e:	2b20      	cmp	r3, #32
  405250:	f340 814a 	ble.w	4054e8 <.LVL171>
  405254:	f1c3 0340 	rsb	r3, r3, #64	; 0x40

00405258 <.LVL96>:
  405258:	f201 4212 	addw	r2, r1, #1042	; 0x412
  40525c:	409e      	lsls	r6, r3
  40525e:	fa2a f302 	lsr.w	r3, sl, r2
  405262:	4333      	orrs	r3, r6
  405264:	ee07 3a90 	vmov	s15, r3

00405268 <.LVL97>:
  405268:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  40526c:	2501      	movs	r5, #1
  40526e:	ec53 2b17 	vmov	r2, r3, d7
  405272:	3901      	subs	r1, #1

00405274 <.LVL98>:
  405274:	f1a3 73f8 	sub.w	r3, r3, #32505856	; 0x1f00000
  405278:	950d      	str	r5, [sp, #52]	; 0x34
  40527a:	e78a      	b.n	405192 <.LVL70>

0040527c <.LVL99>:
  40527c:	4863      	ldr	r0, [pc, #396]	; (40540c <.LVL134+0x34>)
  40527e:	e74d      	b.n	40511c <.LVL57>

00405280 <.LVL100>:
  405280:	2100      	movs	r1, #0
  405282:	6461      	str	r1, [r4, #68]	; 0x44
  405284:	4620      	mov	r0, r4
  405286:	4689      	mov	r9, r1
  405288:	f005 fe1e 	bl	40aec8 <.LFE2>

0040528c <.LVL101>:
  40528c:	f04f 36ff 	mov.w	r6, #4294967295
  405290:	2301      	movs	r3, #1
  405292:	9008      	str	r0, [sp, #32]
  405294:	6420      	str	r0, [r4, #64]	; 0x40

00405296 <.LVL102>:
  405296:	f8cd 9004 	str.w	r9, [sp, #4]

0040529a <.LVL103>:
  40529a:	960c      	str	r6, [sp, #48]	; 0x30
  40529c:	9309      	str	r3, [sp, #36]	; 0x24

0040529e <.LVL104>:
  40529e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4052a0:	2b00      	cmp	r3, #0
  4052a2:	db7a      	blt.n	40539a <.LCFI11>
  4052a4:	9a02      	ldr	r2, [sp, #8]
  4052a6:	2a0e      	cmp	r2, #14
  4052a8:	dc77      	bgt.n	40539a <.LCFI11>
  4052aa:	4b57      	ldr	r3, [pc, #348]	; (405408 <.LVL134+0x30>)
  4052ac:	f1b9 0f00 	cmp.w	r9, #0
  4052b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4052b4:	ed93 4b00 	vldr	d4, [r3]

004052b8 <.LVL105>:
  4052b8:	f2c0 8332 	blt.w	405920 <.LVL300>

004052bc <.LVL106>:
  4052bc:	ec4b ab17 	vmov	d7, sl, fp
  4052c0:	ee87 6b04 	vdiv.f64	d6, d7, d4
  4052c4:	eebd 6bc6 	vcvt.s32.f64	s12, d6

004052c8 <.LVL107>:
  4052c8:	9a08      	ldr	r2, [sp, #32]
  4052ca:	ee16 3a10 	vmov	r3, s12
  4052ce:	2e01      	cmp	r6, #1
  4052d0:	f103 0330 	add.w	r3, r3, #48	; 0x30
  4052d4:	eeb8 5bc6 	vcvt.f64.s32	d5, s12
  4052d8:	f102 0b01 	add.w	fp, r2, #1

004052dc <.LVL108>:
  4052dc:	7013      	strb	r3, [r2, #0]
  4052de:	eea5 7b44 	vfms.f64	d7, d5, d4
  4052e2:	d024      	beq.n	40532e <.LVL115>
  4052e4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
  4052e8:	ee27 7b03 	vmul.f64	d7, d7, d3
  4052ec:	eeb5 7b40 	vcmp.f64	d7, #0.0
  4052f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4052f4:	d03c      	beq.n	405370 <.L76>
  4052f6:	eeb1 2b44 	vneg.f64	d2, d4
  4052fa:	9a08      	ldr	r2, [sp, #32]
  4052fc:	e006      	b.n	40530c <.LVL110>

004052fe <.LVL109>:
  4052fe:	ee27 7b03 	vmul.f64	d7, d7, d3
  405302:	eeb5 7b40 	vcmp.f64	d7, #0.0
  405306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40530a:	d031      	beq.n	405370 <.L76>

0040530c <.LVL110>:
  40530c:	ee87 6b04 	vdiv.f64	d6, d7, d4

00405310 <.LVL111>:
  405310:	eebd 6bc6 	vcvt.s32.f64	s12, d6

00405314 <.LVL112>:
  405314:	ee16 3a10 	vmov	r3, s12
  405318:	3330      	adds	r3, #48	; 0x30
  40531a:	f80b 3b01 	strb.w	r3, [fp], #1

0040531e <.LVL113>:
  40531e:	ebab 0302 	sub.w	r3, fp, r2
  405322:	42b3      	cmp	r3, r6
  405324:	eeb8 5bc6 	vcvt.f64.s32	d5, s12
  405328:	eea2 7b05 	vfma.f64	d7, d2, d5

0040532c <.LVL114>:
  40532c:	d1e7      	bne.n	4052fe <.LVL109>

0040532e <.LVL115>:
  40532e:	ee37 7b07 	vadd.f64	d7, d7, d7
  405332:	eeb4 4bc7 	vcmpe.f64	d4, d7
  405336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40533a:	d408      	bmi.n	40534e <.LVL115+0x20>
  40533c:	eeb4 4b47 	vcmp.f64	d4, d7
  405340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405344:	d114      	bne.n	405370 <.L76>
  405346:	ee16 3a10 	vmov	r3, s12
  40534a:	07db      	lsls	r3, r3, #31
  40534c:	d510      	bpl.n	405370 <.L76>
  40534e:	f81b 3c01 	ldrb.w	r3, [fp, #-1]

00405352 <.L77>:
  405352:	9908      	ldr	r1, [sp, #32]
  405354:	f10b 32ff 	add.w	r2, fp, #4294967295
  405358:	e004      	b.n	405364 <.LVL118>

0040535a <.LVL117>:
  40535a:	4291      	cmp	r1, r2
  40535c:	f000 83da 	beq.w	405b14 <.LVL375>
  405360:	f812 3d01 	ldrb.w	r3, [r2, #-1]!

00405364 <.LVL118>:
  405364:	2b39      	cmp	r3, #57	; 0x39
  405366:	f102 0b01 	add.w	fp, r2, #1

0040536a <.LVL119>:
  40536a:	d0f6      	beq.n	40535a <.LVL117>

0040536c <.LVL120>:
  40536c:	3301      	adds	r3, #1
  40536e:	7013      	strb	r3, [r2, #0]

00405370 <.L76>:
  405370:	4641      	mov	r1, r8
  405372:	4620      	mov	r0, r4

00405374 <.LVL122>:
  405374:	f006 fc78 	bl	40bc68 <_Bfree>

00405378 <.LVL123>:
  405378:	2200      	movs	r2, #0
  40537a:	9b02      	ldr	r3, [sp, #8]
  40537c:	f88b 2000 	strb.w	r2, [fp]
  405380:	9a04      	ldr	r2, [sp, #16]
  405382:	3301      	adds	r3, #1
  405384:	6013      	str	r3, [r2, #0]
  405386:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405388:	2b00      	cmp	r3, #0
  40538a:	f000 8355 	beq.w	405a38 <.LVL340>
  40538e:	9808      	ldr	r0, [sp, #32]
  405390:	f8c3 b000 	str.w	fp, [r3]
  405394:	b013      	add	sp, #76	; 0x4c

00405396 <.LCFI10>:
  405396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040539a <.LCFI11>:
  40539a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40539c:	2a00      	cmp	r2, #0
  40539e:	d052      	beq.n	405446 <.LVL145>
  4053a0:	9a01      	ldr	r2, [sp, #4]
  4053a2:	2a01      	cmp	r2, #1
  4053a4:	f340 82e2 	ble.w	40596c <.LVL312>
  4053a8:	9905      	ldr	r1, [sp, #20]
  4053aa:	1e72      	subs	r2, r6, #1

004053ac <.LVL125>:
  4053ac:	4291      	cmp	r1, r2
  4053ae:	f2c0 8346 	blt.w	405a3e <.LVL341>
  4053b2:	1a8b      	subs	r3, r1, r2
  4053b4:	930d      	str	r3, [sp, #52]	; 0x34

004053b6 <.LVL126>:
  4053b6:	2e00      	cmp	r6, #0
  4053b8:	f2c0 8415 	blt.w	405be6 <.LVL411>
  4053bc:	9f07      	ldr	r7, [sp, #28]
  4053be:	4633      	mov	r3, r6

004053c0 <.LVL127>:
  4053c0:	9a07      	ldr	r2, [sp, #28]
  4053c2:	441a      	add	r2, r3
  4053c4:	9207      	str	r2, [sp, #28]

004053c6 <.LVL128>:
  4053c6:	9a06      	ldr	r2, [sp, #24]

004053c8 <.LVL129>:
  4053c8:	2101      	movs	r1, #1
  4053ca:	441a      	add	r2, r3
  4053cc:	4620      	mov	r0, r4

004053ce <.LVL130>:
  4053ce:	9206      	str	r2, [sp, #24]

004053d0 <.LVL131>:
  4053d0:	f006 fc54 	bl	40bc7c <__i2b>

004053d4 <.LVL132>:
  4053d4:	4605      	mov	r5, r0

004053d6 <.LVL133>:
  4053d6:	e03a      	b.n	40544e <.LVL146>

004053d8 <.LVL134>:
  4053d8:	2301      	movs	r3, #1
  4053da:	930b      	str	r3, [sp, #44]	; 0x2c
  4053dc:	e70c      	b.n	4051f8 <.LVL77>
  4053de:	bf00      	nop
  4053e0:	636f4361 	.word	0x636f4361
  4053e4:	3fd287a7 	.word	0x3fd287a7
  4053e8:	8b60c8b3 	.word	0x8b60c8b3
  4053ec:	3fc68a28 	.word	0x3fc68a28
  4053f0:	509f79fb 	.word	0x509f79fb
  4053f4:	3fd34413 	.word	0x3fd34413
  4053f8:	7ff00000 	.word	0x7ff00000
  4053fc:	0040bc65 	.word	0x0040bc65
  405400:	0040bc54 	.word	0x0040bc54
  405404:	0040bc60 	.word	0x0040bc60
  405408:	00409278 	.word	0x00409278
  40540c:	0040bc64 	.word	0x0040bc64

00405410 <.LVL135>:
  405410:	9a07      	ldr	r2, [sp, #28]

00405412 <.LVL136>:
  405412:	9b02      	ldr	r3, [sp, #8]
  405414:	1ad2      	subs	r2, r2, r3
  405416:	425b      	negs	r3, r3
  405418:	9305      	str	r3, [sp, #20]
  40541a:	2300      	movs	r3, #0
  40541c:	9207      	str	r2, [sp, #28]

0040541e <.LVL137>:
  40541e:	930a      	str	r3, [sp, #40]	; 0x28
  405420:	e6fc      	b.n	40521c <.LVL87>

00405422 <.LVL138>:
  405422:	f1c1 0301 	rsb	r3, r1, #1

00405426 <.LVL139>:
  405426:	9307      	str	r3, [sp, #28]

00405428 <.LVL140>:
  405428:	2300      	movs	r3, #0

0040542a <.LVL141>:
  40542a:	9306      	str	r3, [sp, #24]

0040542c <.LVL142>:
  40542c:	e6eb      	b.n	405206 <.LVL81>

0040542e <.LVL143>:
  40542e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
  405432:	eeb4 7b46 	vcmp.f64	d7, d6
  405436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40543a:	f43f aec8 	beq.w	4051ce <.LVL73>
  40543e:	9b02      	ldr	r3, [sp, #8]
  405440:	3b01      	subs	r3, #1
  405442:	9302      	str	r3, [sp, #8]

00405444 <.LVL144>:
  405444:	e6c3      	b.n	4051ce <.LVL73>

00405446 <.LVL145>:
  405446:	9b05      	ldr	r3, [sp, #20]
  405448:	9f07      	ldr	r7, [sp, #28]
  40544a:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40544c:	930d      	str	r3, [sp, #52]	; 0x34

0040544e <.LVL146>:
  40544e:	2f00      	cmp	r7, #0
  405450:	dd0c      	ble.n	40546c <.LVL151>
  405452:	9906      	ldr	r1, [sp, #24]
  405454:	2900      	cmp	r1, #0
  405456:	460b      	mov	r3, r1
  405458:	dd08      	ble.n	40546c <.LVL151>
  40545a:	42b9      	cmp	r1, r7
  40545c:	9a07      	ldr	r2, [sp, #28]
  40545e:	bfa8      	it	ge
  405460:	463b      	movge	r3, r7

00405462 <.LVL147>:
  405462:	1ad2      	subs	r2, r2, r3
  405464:	1aff      	subs	r7, r7, r3

00405466 <.LVL148>:
  405466:	1acb      	subs	r3, r1, r3

00405468 <.LVL149>:
  405468:	9207      	str	r2, [sp, #28]

0040546a <.LVL150>:
  40546a:	9306      	str	r3, [sp, #24]

0040546c <.LVL151>:
  40546c:	9b05      	ldr	r3, [sp, #20]
  40546e:	b1eb      	cbz	r3, 4054ac <.LVL162>
  405470:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405472:	2b00      	cmp	r3, #0
  405474:	f000 8273 	beq.w	40595e <.LVL308>
  405478:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40547a:	2b00      	cmp	r3, #0
  40547c:	dd11      	ble.n	4054a2 <.LVL160>
  40547e:	461a      	mov	r2, r3
  405480:	4629      	mov	r1, r5
  405482:	4620      	mov	r0, r4

00405484 <.LVL152>:
  405484:	f004 fa84 	bl	409990 <__pow5mult>

00405488 <.LVL153>:
  405488:	4642      	mov	r2, r8
  40548a:	4601      	mov	r1, r0
  40548c:	4605      	mov	r5, r0

0040548e <.LVL154>:
  40548e:	4620      	mov	r0, r4

00405490 <.LVL155>:
  405490:	f002 ffda 	bl	408448 <.LBE11>

00405494 <.LVL156>:
  405494:	4641      	mov	r1, r8
  405496:	900e      	str	r0, [sp, #56]	; 0x38

00405498 <.LVL157>:
  405498:	4620      	mov	r0, r4

0040549a <.LVL158>:
  40549a:	f006 fbe5 	bl	40bc68 <_Bfree>

0040549e <.LVL159>:
  40549e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4054a0:	4698      	mov	r8, r3

004054a2 <.LVL160>:
  4054a2:	9b05      	ldr	r3, [sp, #20]
  4054a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4054a6:	1a9a      	subs	r2, r3, r2

004054a8 <.LVL161>:
  4054a8:	f040 825a 	bne.w	405960 <.LVL308+0x2>

004054ac <.LVL162>:
  4054ac:	2101      	movs	r1, #1
  4054ae:	4620      	mov	r0, r4

004054b0 <.LVL163>:
  4054b0:	f006 fbe4 	bl	40bc7c <__i2b>

004054b4 <.LVL164>:
  4054b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4054b6:	9005      	str	r0, [sp, #20]

004054b8 <.LVL165>:
  4054b8:	2b00      	cmp	r3, #0
  4054ba:	dd1f      	ble.n	4054fc <.LVL174>
  4054bc:	4601      	mov	r1, r0
  4054be:	461a      	mov	r2, r3
  4054c0:	4620      	mov	r0, r4

004054c2 <.LVL166>:
  4054c2:	f004 fa65 	bl	409990 <__pow5mult>

004054c6 <.LVL167>:
  4054c6:	9b01      	ldr	r3, [sp, #4]
  4054c8:	9005      	str	r0, [sp, #20]

004054ca <.LVL168>:
  4054ca:	2b01      	cmp	r3, #1
  4054cc:	f340 820f 	ble.w	4058ee <.LVL293>
  4054d0:	2300      	movs	r3, #0
  4054d2:	930d      	str	r3, [sp, #52]	; 0x34

004054d4 <.LVL169>:
  4054d4:	9a05      	ldr	r2, [sp, #20]
  4054d6:	6913      	ldr	r3, [r2, #16]
  4054d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4054dc:	6918      	ldr	r0, [r3, #16]
  4054de:	f005 fe4f 	bl	40b180 <__hi0bits>

004054e2 <.LVL170>:
  4054e2:	f1c0 0020 	rsb	r0, r0, #32
  4054e6:	e013      	b.n	405510 <.LVL175+0x8>

004054e8 <.LVL171>:
  4054e8:	f1c3 0320 	rsb	r3, r3, #32

004054ec <.LVL172>:
  4054ec:	fa0a f303 	lsl.w	r3, sl, r3
  4054f0:	ee07 3a90 	vmov	s15, r3
  4054f4:	e6b8      	b.n	405268 <.LVL97>

004054f6 <.LVL173>:
  4054f6:	2300      	movs	r3, #0
  4054f8:	930b      	str	r3, [sp, #44]	; 0x2c
  4054fa:	e67d      	b.n	4051f8 <.LVL77>

004054fc <.LVL174>:
  4054fc:	9b01      	ldr	r3, [sp, #4]
  4054fe:	2b01      	cmp	r3, #1
  405500:	f340 823e 	ble.w	405980 <.LVL314>
  405504:	2300      	movs	r3, #0
  405506:	930d      	str	r3, [sp, #52]	; 0x34

00405508 <.LVL175>:
  405508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40550a:	2001      	movs	r0, #1
  40550c:	2b00      	cmp	r3, #0
  40550e:	d1e1      	bne.n	4054d4 <.LVL169>
  405510:	9a06      	ldr	r2, [sp, #24]
  405512:	4410      	add	r0, r2

00405514 <.LVL176>:
  405514:	f010 001f 	ands.w	r0, r0, #31

00405518 <.LVL177>:
  405518:	f000 809e 	beq.w	405658 <.LVL217>
  40551c:	f1c0 0320 	rsb	r3, r0, #32

00405520 <.LVL178>:
  405520:	2b04      	cmp	r3, #4
  405522:	f340 83d4 	ble.w	405cce <.LVL446>
  405526:	9b07      	ldr	r3, [sp, #28]

00405528 <.LVL179>:
  405528:	f1c0 001c 	rsb	r0, r0, #28

0040552c <.LVL180>:
  40552c:	4403      	add	r3, r0
  40552e:	9307      	str	r3, [sp, #28]

00405530 <.LVL181>:
  405530:	4613      	mov	r3, r2

00405532 <.LVL182>:
  405532:	4403      	add	r3, r0
  405534:	4407      	add	r7, r0
  405536:	9306      	str	r3, [sp, #24]

00405538 <.LVL184>:
  405538:	9b07      	ldr	r3, [sp, #28]
  40553a:	2b00      	cmp	r3, #0
  40553c:	dd05      	ble.n	40554a <.LVL185+0x2>
  40553e:	4641      	mov	r1, r8
  405540:	461a      	mov	r2, r3
  405542:	4620      	mov	r0, r4
  405544:	f004 f92c 	bl	4097a0 <.LFE164>

00405548 <.LVL185>:
  405548:	4680      	mov	r8, r0
  40554a:	9b06      	ldr	r3, [sp, #24]
  40554c:	2b00      	cmp	r3, #0
  40554e:	dd05      	ble.n	40555c <.LVL187+0x2>
  405550:	461a      	mov	r2, r3
  405552:	9905      	ldr	r1, [sp, #20]
  405554:	4620      	mov	r0, r4
  405556:	f004 f923 	bl	4097a0 <.LFE164>

0040555a <.LVL187>:
  40555a:	9005      	str	r0, [sp, #20]
  40555c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40555e:	2b00      	cmp	r3, #0
  405560:	f040 8083 	bne.w	40566a <.LVL223>
  405564:	2e00      	cmp	r6, #0
  405566:	f340 821e 	ble.w	4059a6 <.LVL322>
  40556a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40556c:	2b00      	cmp	r3, #0
  40556e:	f000 8096 	beq.w	40569e <.LVL230>

00405572 <.LVL189>:
  405572:	2f00      	cmp	r7, #0
  405574:	dd05      	ble.n	405582 <.LVL191>
  405576:	4629      	mov	r1, r5
  405578:	463a      	mov	r2, r7
  40557a:	4620      	mov	r0, r4
  40557c:	f004 f910 	bl	4097a0 <.LFE164>

00405580 <.LVL190>:
  405580:	4605      	mov	r5, r0

00405582 <.LVL191>:
  405582:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405584:	2b00      	cmp	r3, #0
  405586:	f040 82ce 	bne.w	405b26 <.LVL378>
  40558a:	462f      	mov	r7, r5

0040558c <.LVL192>:
  40558c:	9b08      	ldr	r3, [sp, #32]
  40558e:	3e01      	subs	r6, #1
  405590:	199a      	adds	r2, r3, r6
  405592:	9209      	str	r2, [sp, #36]	; 0x24
  405594:	f00a 0201 	and.w	r2, sl, #1
  405598:	920a      	str	r2, [sp, #40]	; 0x28

0040559a <.LVL193>:
  40559a:	461e      	mov	r6, r3

0040559c <.LVL194>:
  40559c:	f8dd b014 	ldr.w	fp, [sp, #20]
  4055a0:	4640      	mov	r0, r8
  4055a2:	4659      	mov	r1, fp
  4055a4:	f002 fe2a 	bl	4081fc <.LFE10>

004055a8 <.LVL195>:
  4055a8:	4629      	mov	r1, r5
  4055aa:	4682      	mov	sl, r0

004055ac <.LVL196>:
  4055ac:	4640      	mov	r0, r8
  4055ae:	f005 ff2d 	bl	40b40c <.LFE147>

004055b2 <.LVL197>:
  4055b2:	463a      	mov	r2, r7
  4055b4:	4659      	mov	r1, fp
  4055b6:	4681      	mov	r9, r0
  4055b8:	4620      	mov	r0, r4
  4055ba:	f003 f863 	bl	408684 <.LFE160>

004055be <.LVL198>:
  4055be:	68c3      	ldr	r3, [r0, #12]
  4055c0:	4683      	mov	fp, r0
  4055c2:	f10a 0230 	add.w	r2, sl, #48	; 0x30

004055c6 <.LVL199>:
  4055c6:	2b00      	cmp	r3, #0
  4055c8:	f040 81e5 	bne.w	405996 <.LVL318>
  4055cc:	4601      	mov	r1, r0
  4055ce:	4640      	mov	r0, r8

004055d0 <.LVL200>:
  4055d0:	9207      	str	r2, [sp, #28]
  4055d2:	f005 ff1b 	bl	40b40c <.LFE147>

004055d6 <.LVL201>:
  4055d6:	4659      	mov	r1, fp
  4055d8:	9006      	str	r0, [sp, #24]

004055da <.LVL202>:
  4055da:	4620      	mov	r0, r4

004055dc <.LVL203>:
  4055dc:	f006 fb44 	bl	40bc68 <_Bfree>

004055e0 <.LVL204>:
  4055e0:	9b06      	ldr	r3, [sp, #24]
  4055e2:	9a07      	ldr	r2, [sp, #28]
  4055e4:	b933      	cbnz	r3, 4055f4 <.LVL205>
  4055e6:	9901      	ldr	r1, [sp, #4]
  4055e8:	b921      	cbnz	r1, 4055f4 <.LVL205>
  4055ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4055ec:	2b00      	cmp	r3, #0
  4055ee:	f000 8343 	beq.w	405c78 <.LVL432>
  4055f2:	9b01      	ldr	r3, [sp, #4]

004055f4 <.LVL205>:
  4055f4:	f1b9 0f00 	cmp.w	r9, #0
  4055f8:	f2c0 823b 	blt.w	405a72 <.LVL352>
  4055fc:	d105      	bne.n	40560a <.LVL205+0x16>
  4055fe:	9901      	ldr	r1, [sp, #4]
  405600:	b919      	cbnz	r1, 40560a <.LVL205+0x16>
  405602:	990a      	ldr	r1, [sp, #40]	; 0x28
  405604:	2900      	cmp	r1, #0
  405606:	f000 8234 	beq.w	405a72 <.LVL352>
  40560a:	2b00      	cmp	r3, #0
  40560c:	f300 829f 	bgt.w	405b4e <.LVL385>
  405610:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405612:	7032      	strb	r2, [r6, #0]
  405614:	f106 0901 	add.w	r9, r6, #1

00405618 <.LVL206>:
  405618:	429e      	cmp	r6, r3
  40561a:	46cb      	mov	fp, r9

0040561c <.LVL207>:
  40561c:	f000 82a2 	beq.w	405b64 <.LVL390>
  405620:	4641      	mov	r1, r8
  405622:	2300      	movs	r3, #0
  405624:	220a      	movs	r2, #10
  405626:	4620      	mov	r0, r4
  405628:	f004 fde4 	bl	40a1f4 <__multadd>

0040562c <.LVL208>:
  40562c:	42bd      	cmp	r5, r7
  40562e:	4680      	mov	r8, r0

00405630 <.LVL209>:
  405630:	4629      	mov	r1, r5
  405632:	f04f 0300 	mov.w	r3, #0
  405636:	f04f 020a 	mov.w	r2, #10
  40563a:	4620      	mov	r0, r4

0040563c <.LVL210>:
  40563c:	f000 81a5 	beq.w	40598a <.LVL315>

00405640 <.LVL211>:
  405640:	f004 fdd8 	bl	40a1f4 <__multadd>

00405644 <.LVL212>:
  405644:	4639      	mov	r1, r7
  405646:	4605      	mov	r5, r0

00405648 <.LVL213>:
  405648:	2300      	movs	r3, #0
  40564a:	220a      	movs	r2, #10
  40564c:	4620      	mov	r0, r4

0040564e <.LVL214>:
  40564e:	f004 fdd1 	bl	40a1f4 <__multadd>

00405652 <.LVL215>:
  405652:	464e      	mov	r6, r9
  405654:	4607      	mov	r7, r0

00405656 <.LVL216>:
  405656:	e7a1      	b.n	40559c <.LVL194>

00405658 <.LVL217>:
  405658:	201c      	movs	r0, #28

0040565a <.LVL218>:
  40565a:	9b07      	ldr	r3, [sp, #28]
  40565c:	4403      	add	r3, r0
  40565e:	9307      	str	r3, [sp, #28]

00405660 <.LVL219>:
  405660:	9b06      	ldr	r3, [sp, #24]

00405662 <.LVL220>:
  405662:	4403      	add	r3, r0
  405664:	4407      	add	r7, r0
  405666:	9306      	str	r3, [sp, #24]

00405668 <.LVL222>:
  405668:	e766      	b.n	405538 <.LVL184>

0040566a <.LVL223>:
  40566a:	9905      	ldr	r1, [sp, #20]
  40566c:	4640      	mov	r0, r8
  40566e:	f005 fecd 	bl	40b40c <.LFE147>

00405672 <.LVL224>:
  405672:	2800      	cmp	r0, #0
  405674:	f6bf af76 	bge.w	405564 <.LVL187+0xa>
  405678:	9e02      	ldr	r6, [sp, #8]

0040567a <.LVL225>:
  40567a:	4641      	mov	r1, r8
  40567c:	2300      	movs	r3, #0
  40567e:	220a      	movs	r2, #10
  405680:	4620      	mov	r0, r4
  405682:	3e01      	subs	r6, #1
  405684:	9602      	str	r6, [sp, #8]

00405686 <.LVL226>:
  405686:	f004 fdb5 	bl	40a1f4 <__multadd>

0040568a <.LVL227>:
  40568a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40568c:	4680      	mov	r8, r0

0040568e <.LVL228>:
  40568e:	2b00      	cmp	r3, #0
  405690:	f040 8302 	bne.w	405c98 <.LVL436>

00405694 <.LVL229>:
  405694:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405696:	2b00      	cmp	r3, #0
  405698:	f340 830a 	ble.w	405cb0 <.LVL440>
  40569c:	461e      	mov	r6, r3

0040569e <.LVL230>:
  40569e:	f8dd a020 	ldr.w	sl, [sp, #32]

004056a2 <.LVL231>:
  4056a2:	f8dd b014 	ldr.w	fp, [sp, #20]
  4056a6:	4657      	mov	r7, sl

004056a8 <.LVL232>:
  4056a8:	e002      	b.n	4056b0 <.LVL235>

004056aa <.LVL233>:
  4056aa:	f004 fda3 	bl	40a1f4 <__multadd>

004056ae <.LVL234>:
  4056ae:	4680      	mov	r8, r0

004056b0 <.LVL235>:
  4056b0:	4659      	mov	r1, fp
  4056b2:	4640      	mov	r0, r8
  4056b4:	f002 fda2 	bl	4081fc <.LFE10>

004056b8 <.LVL236>:
  4056b8:	f100 0930 	add.w	r9, r0, #48	; 0x30

004056bc <.LVL237>:
  4056bc:	f807 9b01 	strb.w	r9, [r7], #1

004056c0 <.LVL238>:
  4056c0:	eba7 030a 	sub.w	r3, r7, sl
  4056c4:	42b3      	cmp	r3, r6
  4056c6:	f04f 020a 	mov.w	r2, #10
  4056ca:	f04f 0300 	mov.w	r3, #0
  4056ce:	4641      	mov	r1, r8
  4056d0:	4620      	mov	r0, r4
  4056d2:	dbea      	blt.n	4056aa <.LVL233>

004056d4 <.LVL239>:
  4056d4:	9b08      	ldr	r3, [sp, #32]
  4056d6:	2e01      	cmp	r6, #1
  4056d8:	bfac      	ite	ge
  4056da:	199b      	addge	r3, r3, r6
  4056dc:	3301      	addlt	r3, #1
  4056de:	469b      	mov	fp, r3
  4056e0:	f04f 0a00 	mov.w	sl, #0

004056e4 <.LVL240>:
  4056e4:	4641      	mov	r1, r8
  4056e6:	2201      	movs	r2, #1
  4056e8:	4620      	mov	r0, r4
  4056ea:	f004 f859 	bl	4097a0 <.LFE164>

004056ee <.LVL241>:
  4056ee:	9905      	ldr	r1, [sp, #20]
  4056f0:	4680      	mov	r8, r0

004056f2 <.LVL242>:
  4056f2:	f005 fe8b 	bl	40b40c <.LFE147>

004056f6 <.LVL243>:
  4056f6:	2800      	cmp	r0, #0
  4056f8:	f340 81d7 	ble.w	405aaa <.LVL362>
  4056fc:	f81b 2c01 	ldrb.w	r2, [fp, #-1]

00405700 <.L142>:
  405700:	9908      	ldr	r1, [sp, #32]
  405702:	f10b 33ff 	add.w	r3, fp, #4294967295
  405706:	e004      	b.n	405712 <.LVL246>

00405708 <.LVL245>:
  405708:	428b      	cmp	r3, r1
  40570a:	f000 8168 	beq.w	4059de <.LVL331>
  40570e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!

00405712 <.LVL246>:
  405712:	2a39      	cmp	r2, #57	; 0x39
  405714:	f103 0b01 	add.w	fp, r3, #1

00405718 <.LVL247>:
  405718:	d0f6      	beq.n	405708 <.LVL245>

0040571a <.LVL248>:
  40571a:	3201      	adds	r2, #1
  40571c:	701a      	strb	r2, [r3, #0]

0040571e <.L135>:
  40571e:	9905      	ldr	r1, [sp, #20]
  405720:	4620      	mov	r0, r4
  405722:	f006 faa1 	bl	40bc68 <_Bfree>

00405726 <.LVL250>:
  405726:	2d00      	cmp	r5, #0
  405728:	f43f ae22 	beq.w	405370 <.L76>
  40572c:	f1ba 0f00 	cmp.w	sl, #0
  405730:	d005      	beq.n	40573e <.LVL251>
  405732:	45aa      	cmp	sl, r5
  405734:	d003      	beq.n	40573e <.LVL251>
  405736:	4651      	mov	r1, sl
  405738:	4620      	mov	r0, r4
  40573a:	f006 fa95 	bl	40bc68 <_Bfree>

0040573e <.LVL251>:
  40573e:	4629      	mov	r1, r5
  405740:	4620      	mov	r0, r4
  405742:	f006 fa91 	bl	40bc68 <_Bfree>

00405746 <.LVL252>:
  405746:	e613      	b.n	405370 <.L76>

00405748 <.LVL253>:
  405748:	2300      	movs	r3, #0
  40574a:	9309      	str	r3, [sp, #36]	; 0x24

0040574c <.LVL254>:
  40574c:	9b02      	ldr	r3, [sp, #8]
  40574e:	444b      	add	r3, r9
  405750:	1c5e      	adds	r6, r3, #1

00405752 <.LVL255>:
  405752:	2e01      	cmp	r6, #1
  405754:	4637      	mov	r7, r6
  405756:	930c      	str	r3, [sp, #48]	; 0x30

00405758 <.LVL256>:
  405758:	bfb8      	it	lt
  40575a:	2701      	movlt	r7, #1
  40575c:	960e      	str	r6, [sp, #56]	; 0x38

0040575e <.LVL257>:
  40575e:	2100      	movs	r1, #0
  405760:	2f17      	cmp	r7, #23
  405762:	6461      	str	r1, [r4, #68]	; 0x44
  405764:	d90a      	bls.n	40577c <.LVL260>
  405766:	2201      	movs	r2, #1
  405768:	2304      	movs	r3, #4

0040576a <.LVL258>:
  40576a:	005b      	lsls	r3, r3, #1
  40576c:	f103 0014 	add.w	r0, r3, #20
  405770:	4287      	cmp	r7, r0
  405772:	4611      	mov	r1, r2
  405774:	f102 0201 	add.w	r2, r2, #1
  405778:	d2f7      	bcs.n	40576a <.LVL258>
  40577a:	6461      	str	r1, [r4, #68]	; 0x44

0040577c <.LVL260>:
  40577c:	4620      	mov	r0, r4
  40577e:	f005 fba3 	bl	40aec8 <.LFE2>

00405782 <.LVL261>:
  405782:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405784:	9008      	str	r0, [sp, #32]
  405786:	2b0e      	cmp	r3, #14
  405788:	6420      	str	r0, [r4, #64]	; 0x40

0040578a <.LVL262>:
  40578a:	f63f ad88 	bhi.w	40529e <.LVL104>

0040578e <.LVL263>:
  40578e:	2d00      	cmp	r5, #0
  405790:	f43f ad85 	beq.w	40529e <.LVL104>

00405794 <.LVL264>:
  405794:	9802      	ldr	r0, [sp, #8]
  405796:	2800      	cmp	r0, #0
  405798:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38

0040579c <.LVL265>:
  40579c:	f340 819a 	ble.w	405ad4 <.LVL368>
  4057a0:	4ac8      	ldr	r2, [pc, #800]	; (405ac4 <.LVL365+0x4>)
  4057a2:	f000 030f 	and.w	r3, r0, #15
  4057a6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  4057aa:	1103      	asrs	r3, r0, #4
  4057ac:	06df      	lsls	r7, r3, #27
  4057ae:	ed92 7b00 	vldr	d7, [r2]

004057b2 <.LVL266>:
  4057b2:	f140 814d 	bpl.w	405a50 <.LVL348>
  4057b6:	4ac4      	ldr	r2, [pc, #784]	; (405ac8 <.LVL365+0x8>)
  4057b8:	ed92 6b08 	vldr	d6, [r2, #32]
  4057bc:	ec4b ab14 	vmov	d4, sl, fp

004057c0 <.LVL267>:
  4057c0:	f003 030f 	and.w	r3, r3, #15
  4057c4:	2103      	movs	r1, #3
  4057c6:	ee84 5b06 	vdiv.f64	d5, d4, d6

004057ca <.LVL269>:
  4057ca:	b15b      	cbz	r3, 4057e4 <.LVL273+0x6>
  4057cc:	4abe      	ldr	r2, [pc, #760]	; (405ac8 <.LVL365+0x8>)

004057ce <.LVL270>:
  4057ce:	07dd      	lsls	r5, r3, #31
  4057d0:	d504      	bpl.n	4057dc <.LVL272>
  4057d2:	ed92 6b00 	vldr	d6, [r2]
  4057d6:	3101      	adds	r1, #1
  4057d8:	ee27 7b06 	vmul.f64	d7, d7, d6

004057dc <.LVL272>:
  4057dc:	105b      	asrs	r3, r3, #1

004057de <.LVL273>:
  4057de:	f102 0208 	add.w	r2, r2, #8
  4057e2:	d1f4      	bne.n	4057ce <.LVL270>
  4057e4:	ee85 6b07 	vdiv.f64	d6, d5, d7

004057e8 <.LVL274>:
  4057e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4057ea:	b13b      	cbz	r3, 4057fc <.LVL275>
  4057ec:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
  4057f0:	eeb4 6bc7 	vcmpe.f64	d6, d7
  4057f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4057f8:	f100 8206 	bmi.w	405c08 <.LVL416>

004057fc <.LVL275>:
  4057fc:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
  405800:	ee07 1a90 	vmov	s15, r1
  405804:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  405808:	eea7 5b06 	vfma.f64	d5, d7, d6
  40580c:	ec51 0b15 	vmov	r0, r1, d5
  405810:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000

00405814 <.LVL276>:
  405814:	2e00      	cmp	r6, #0
  405816:	f000 80f8 	beq.w	405a0a <.LVL336>
  40581a:	9a02      	ldr	r2, [sp, #8]
  40581c:	4635      	mov	r5, r6

0040581e <.LVL277>:
  40581e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405820:	2b00      	cmp	r3, #0
  405822:	f000 81a7 	beq.w	405b74 <.LVL396>
  405826:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
  40582a:	4ba6      	ldr	r3, [pc, #664]	; (405ac4 <.LVL365+0x4>)
  40582c:	9f08      	ldr	r7, [sp, #32]
  40582e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  405832:	ed13 4b02 	vldr	d4, [r3, #-8]
  405836:	eebd 7bc6 	vcvt.s32.f64	s14, d6
  40583a:	ee83 5b04 	vdiv.f64	d5, d3, d4
  40583e:	ee17 3a10 	vmov	r3, s14

00405842 <.LVL278>:
  405842:	ec41 0b14 	vmov	d4, r0, r1
  405846:	3330      	adds	r3, #48	; 0x30
  405848:	b2db      	uxtb	r3, r3
  40584a:	ee35 5b44 	vsub.f64	d5, d5, d4

0040584e <.LVL279>:
  40584e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14

00405852 <.LVL280>:
  405852:	ee36 7b47 	vsub.f64	d7, d6, d7
  405856:	eeb4 5bc7 	vcmpe.f64	d5, d7
  40585a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40585e:	703b      	strb	r3, [r7, #0]
  405860:	f107 0b01 	add.w	fp, r7, #1

00405864 <.LVL281>:
  405864:	dc31      	bgt.n	4058ca <.LVL288+0xe>
  405866:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
  40586a:	ee33 6b47 	vsub.f64	d6, d3, d7

0040586e <.LVL282>:
  40586e:	eeb4 5bc6 	vcmpe.f64	d5, d6
  405872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405876:	f300 81fa 	bgt.w	405c6e <.LVL428>

0040587a <.LVL283>:
  40587a:	2d01      	cmp	r5, #1
  40587c:	f000 8126 	beq.w	405acc <.LDL1>
  405880:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
  405884:	9b08      	ldr	r3, [sp, #32]
  405886:	1959      	adds	r1, r3, r5
  405888:	e00a      	b.n	4058a0 <.LVL285>

0040588a <.LVL284>:
  40588a:	ee33 6b47 	vsub.f64	d6, d3, d7
  40588e:	eeb4 6bc5 	vcmpe.f64	d6, d5
  405892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405896:	f100 81ea 	bmi.w	405c6e <.LVL428>
  40589a:	458b      	cmp	fp, r1
  40589c:	f000 8116 	beq.w	405acc <.LDL1>

004058a0 <.LVL285>:
  4058a0:	ee27 7b04 	vmul.f64	d7, d7, d4
  4058a4:	ee25 5b04 	vmul.f64	d5, d5, d4
  4058a8:	eebd 6bc7 	vcvt.s32.f64	s12, d7

004058ac <.LVL286>:
  4058ac:	ee16 3a10 	vmov	r3, s12
  4058b0:	3330      	adds	r3, #48	; 0x30
  4058b2:	b2db      	uxtb	r3, r3
  4058b4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12

004058b8 <.LVL287>:
  4058b8:	ee37 7b46 	vsub.f64	d7, d7, d6

004058bc <.LVL288>:
  4058bc:	eeb4 7bc5 	vcmpe.f64	d7, d5
  4058c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4058c4:	f80b 3b01 	strb.w	r3, [fp], #1
  4058c8:	d5df      	bpl.n	40588a <.LVL284>
  4058ca:	9202      	str	r2, [sp, #8]

004058cc <.LVL289>:
  4058cc:	e550      	b.n	405370 <.L76>

004058ce <.LVL290>:
  4058ce:	2300      	movs	r3, #0
  4058d0:	9309      	str	r3, [sp, #36]	; 0x24

004058d2 <.LVL291>:
  4058d2:	f1b9 0f00 	cmp.w	r9, #0
  4058d6:	f340 80bf 	ble.w	405a58 <.LVL349>
  4058da:	464f      	mov	r7, r9
  4058dc:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  4058e0:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  4058e4:	464e      	mov	r6, r9
  4058e6:	e73a      	b.n	40575e <.LVL257>

004058e8 <.LVL292>:
  4058e8:	2301      	movs	r3, #1
  4058ea:	9309      	str	r3, [sp, #36]	; 0x24
  4058ec:	e7f1      	b.n	4058d2 <.LVL291>

004058ee <.LVL293>:
  4058ee:	f1ba 0f00 	cmp.w	sl, #0
  4058f2:	f47f aded 	bne.w	4054d0 <.LVL168+0x6>

004058f6 <.LVL294>:
  4058f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4058fa:	2b00      	cmp	r3, #0
  4058fc:	f47f ae02 	bne.w	405504 <.LVL174+0x8>
  405900:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
  405904:	0d1b      	lsrs	r3, r3, #20
  405906:	051b      	lsls	r3, r3, #20
  405908:	2b00      	cmp	r3, #0
  40590a:	f000 81b3 	beq.w	405c74 <.LVL430>
  40590e:	9b07      	ldr	r3, [sp, #28]
  405910:	3301      	adds	r3, #1
  405912:	9307      	str	r3, [sp, #28]

00405914 <.LVL295>:
  405914:	9b06      	ldr	r3, [sp, #24]

00405916 <.LVL296>:
  405916:	3301      	adds	r3, #1
  405918:	9306      	str	r3, [sp, #24]

0040591a <.LVL297>:
  40591a:	2301      	movs	r3, #1

0040591c <.LVL298>:
  40591c:	930d      	str	r3, [sp, #52]	; 0x34

0040591e <.LVL299>:
  40591e:	e5f3      	b.n	405508 <.LVL175>

00405920 <.LVL300>:
  405920:	2e00      	cmp	r6, #0
  405922:	f73f accb 	bgt.w	4052bc <.LVL106>

00405926 <.LVL301>:
  405926:	f040 8083 	bne.w	405a30 <.LVL338>
  40592a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
  40592e:	ee24 4b07 	vmul.f64	d4, d4, d7

00405932 <.LVL302>:
  405932:	ec4b ab17 	vmov	d7, sl, fp
  405936:	eeb4 4bc7 	vcmpe.f64	d4, d7
  40593a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40593e:	4635      	mov	r5, r6
  405940:	9605      	str	r6, [sp, #20]

00405942 <.LVL303>:
  405942:	db43      	blt.n	4059cc <.L73>

00405944 <.L74>:
  405944:	ea6f 0309 	mvn.w	r3, r9
  405948:	f8dd b020 	ldr.w	fp, [sp, #32]
  40594c:	9302      	str	r3, [sp, #8]

0040594e <.LVL305>:
  40594e:	9905      	ldr	r1, [sp, #20]
  405950:	4620      	mov	r0, r4

00405952 <.LVL306>:
  405952:	f006 f989 	bl	40bc68 <_Bfree>

00405956 <.LVL307>:
  405956:	2d00      	cmp	r5, #0
  405958:	f43f ad0a 	beq.w	405370 <.L76>
  40595c:	e6ef      	b.n	40573e <.LVL251>

0040595e <.LVL308>:
  40595e:	9a05      	ldr	r2, [sp, #20]
  405960:	4641      	mov	r1, r8
  405962:	4620      	mov	r0, r4

00405964 <.LVL309>:
  405964:	f004 f814 	bl	409990 <__pow5mult>

00405968 <.LVL310>:
  405968:	4680      	mov	r8, r0

0040596a <.LVL311>:
  40596a:	e59f      	b.n	4054ac <.LVL162>

0040596c <.LVL312>:
  40596c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40596e:	2a00      	cmp	r2, #0
  405970:	f000 813e 	beq.w	405bf0 <.LVL413>
  405974:	9a05      	ldr	r2, [sp, #20]
  405976:	920d      	str	r2, [sp, #52]	; 0x34

00405978 <.LVL313>:
  405978:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40597c:	9f07      	ldr	r7, [sp, #28]
  40597e:	e51f      	b.n	4053c0 <.LVL127>

00405980 <.LVL314>:
  405980:	f1ba 0f00 	cmp.w	sl, #0
  405984:	f47f adbe 	bne.w	405504 <.LVL174+0x8>
  405988:	e7b5      	b.n	4058f6 <.LVL294>

0040598a <.LVL315>:
  40598a:	f004 fc33 	bl	40a1f4 <__multadd>

0040598e <.LVL316>:
  40598e:	464e      	mov	r6, r9
  405990:	4605      	mov	r5, r0

00405992 <.LVL317>:
  405992:	4607      	mov	r7, r0
  405994:	e602      	b.n	40559c <.LVL194>

00405996 <.LVL318>:
  405996:	4601      	mov	r1, r0
  405998:	4620      	mov	r0, r4

0040599a <.LVL319>:
  40599a:	9206      	str	r2, [sp, #24]

0040599c <.LVL320>:
  40599c:	f006 f964 	bl	40bc68 <_Bfree>

004059a0 <.LVL321>:
  4059a0:	2301      	movs	r3, #1
  4059a2:	9a06      	ldr	r2, [sp, #24]
  4059a4:	e626      	b.n	4055f4 <.LVL205>

004059a6 <.LVL322>:
  4059a6:	9b01      	ldr	r3, [sp, #4]
  4059a8:	2b02      	cmp	r3, #2
  4059aa:	f77f adde 	ble.w	40556a <.LVL187+0x10>

004059ae <.LVL323>:
  4059ae:	2e00      	cmp	r6, #0
  4059b0:	d1c8      	bne.n	405944 <.L74>
  4059b2:	4633      	mov	r3, r6
  4059b4:	9905      	ldr	r1, [sp, #20]
  4059b6:	2205      	movs	r2, #5
  4059b8:	4620      	mov	r0, r4
  4059ba:	f004 fc1b 	bl	40a1f4 <__multadd>

004059be <.LVL324>:
  4059be:	4601      	mov	r1, r0
  4059c0:	9005      	str	r0, [sp, #20]

004059c2 <.LVL325>:
  4059c2:	4640      	mov	r0, r8

004059c4 <.LVL326>:
  4059c4:	f005 fd22 	bl	40b40c <.LFE147>

004059c8 <.LVL327>:
  4059c8:	2800      	cmp	r0, #0
  4059ca:	ddbb      	ble.n	405944 <.L74>

004059cc <.L73>:
  4059cc:	9a02      	ldr	r2, [sp, #8]
  4059ce:	9908      	ldr	r1, [sp, #32]
  4059d0:	2331      	movs	r3, #49	; 0x31
  4059d2:	3201      	adds	r2, #1
  4059d4:	9202      	str	r2, [sp, #8]

004059d6 <.LVL329>:
  4059d6:	700b      	strb	r3, [r1, #0]
  4059d8:	f101 0b01 	add.w	fp, r1, #1

004059dc <.LVL330>:
  4059dc:	e7b7      	b.n	40594e <.LVL305>

004059de <.LVL331>:
  4059de:	9a02      	ldr	r2, [sp, #8]
  4059e0:	3201      	adds	r2, #1
  4059e2:	9202      	str	r2, [sp, #8]

004059e4 <.LVL332>:
  4059e4:	9a08      	ldr	r2, [sp, #32]

004059e6 <.LVL333>:
  4059e6:	2331      	movs	r3, #49	; 0x31
  4059e8:	7013      	strb	r3, [r2, #0]
  4059ea:	e698      	b.n	40571e <.L135>

004059ec <.LVL334>:
  4059ec:	2301      	movs	r3, #1
  4059ee:	9309      	str	r3, [sp, #36]	; 0x24
  4059f0:	e6ac      	b.n	40574c <.LVL254>

004059f2 <.LVL335>:
  4059f2:	ee07 1a90 	vmov	s15, r1
  4059f6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
  4059fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  4059fe:	eea6 5b07 	vfma.f64	d5, d6, d7
  405a02:	ec51 0b15 	vmov	r0, r1, d5
  405a06:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000

00405a0a <.LVL336>:
  405a0a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
  405a0e:	ee36 7b47 	vsub.f64	d7, d6, d7

00405a12 <.LVL337>:
  405a12:	ec41 0b16 	vmov	d6, r0, r1
  405a16:	eeb4 7bc6 	vcmpe.f64	d7, d6
  405a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405a1e:	f300 80a5 	bgt.w	405b6c <.LVL394>
  405a22:	eeb1 6b46 	vneg.f64	d6, d6
  405a26:	eeb4 7bc6 	vcmpe.f64	d7, d6
  405a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405a2e:	d54d      	bpl.n	405acc <.LDL1>

00405a30 <.LVL338>:
  405a30:	2300      	movs	r3, #0
  405a32:	9305      	str	r3, [sp, #20]

00405a34 <.LVL339>:
  405a34:	461d      	mov	r5, r3
  405a36:	e785      	b.n	405944 <.L74>

00405a38 <.LVL340>:
  405a38:	9808      	ldr	r0, [sp, #32]
  405a3a:	f7ff bb6f 	b.w	40511c <.LVL57>

00405a3e <.LVL341>:
  405a3e:	9b05      	ldr	r3, [sp, #20]
  405a40:	990a      	ldr	r1, [sp, #40]	; 0x28

00405a42 <.LVL342>:
  405a42:	9205      	str	r2, [sp, #20]

00405a44 <.LVL343>:
  405a44:	1ad3      	subs	r3, r2, r3

00405a46 <.LVL344>:
  405a46:	4419      	add	r1, r3
  405a48:	2300      	movs	r3, #0

00405a4a <.LVL345>:
  405a4a:	910a      	str	r1, [sp, #40]	; 0x28

00405a4c <.LVL346>:
  405a4c:	930d      	str	r3, [sp, #52]	; 0x34

00405a4e <.LVL347>:
  405a4e:	e4b2      	b.n	4053b6 <.LVL126>

00405a50 <.LVL348>:
  405a50:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
  405a54:	2102      	movs	r1, #2
  405a56:	e6b8      	b.n	4057ca <.LVL269>

00405a58 <.LVL349>:
  405a58:	2100      	movs	r1, #0
  405a5a:	6461      	str	r1, [r4, #68]	; 0x44
  405a5c:	4620      	mov	r0, r4
  405a5e:	f005 fa33 	bl	40aec8 <.LFE2>

00405a62 <.LVL350>:
  405a62:	f04f 0901 	mov.w	r9, #1
  405a66:	9008      	str	r0, [sp, #32]
  405a68:	6420      	str	r0, [r4, #64]	; 0x40

00405a6a <.LVL351>:
  405a6a:	464e      	mov	r6, r9
  405a6c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  405a70:	e68d      	b.n	40578e <.LVL263>

00405a72 <.LVL352>:
  405a72:	2b00      	cmp	r3, #0
  405a74:	4691      	mov	r9, r2

00405a76 <.LVL353>:
  405a76:	dd11      	ble.n	405a9c <.LVL359>
  405a78:	4641      	mov	r1, r8
  405a7a:	2201      	movs	r2, #1
  405a7c:	4620      	mov	r0, r4
  405a7e:	f003 fe8f 	bl	4097a0 <.LFE164>

00405a82 <.LVL354>:
  405a82:	9905      	ldr	r1, [sp, #20]
  405a84:	4680      	mov	r8, r0

00405a86 <.LVL355>:
  405a86:	f005 fcc1 	bl	40b40c <.LFE147>

00405a8a <.LVL356>:
  405a8a:	2800      	cmp	r0, #0
  405a8c:	f340 80fd 	ble.w	405c8a <.LVL435>

00405a90 <.LVL357>:
  405a90:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  405a94:	f000 80d4 	beq.w	405c40 <.L133>

00405a98 <.LVL358>:
  405a98:	f10a 0931 	add.w	r9, sl, #49	; 0x31

00405a9c <.LVL359>:
  405a9c:	46aa      	mov	sl, r5
  405a9e:	f886 9000 	strb.w	r9, [r6]
  405aa2:	f106 0b01 	add.w	fp, r6, #1

00405aa6 <.LVL360>:
  405aa6:	463d      	mov	r5, r7

00405aa8 <.LVL361>:
  405aa8:	e639      	b.n	40571e <.L135>

00405aaa <.LVL362>:
  405aaa:	d104      	bne.n	405ab6 <.LVL364>
  405aac:	f019 0f01 	tst.w	r9, #1
  405ab0:	d001      	beq.n	405ab6 <.LVL364>
  405ab2:	e623      	b.n	4056fc <.LVL243+0x6>

00405ab4 <.LVL363>:
  405ab4:	4693      	mov	fp, r2

00405ab6 <.LVL364>:
  405ab6:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
  405aba:	2b30      	cmp	r3, #48	; 0x30
  405abc:	f10b 32ff 	add.w	r2, fp, #4294967295

00405ac0 <.LVL365>:
  405ac0:	d0f8      	beq.n	405ab4 <.LVL363>
  405ac2:	e62c      	b.n	40571e <.L135>
  405ac4:	00409278 	.word	0x00409278
  405ac8:	0040b778 	.word	0x0040b778

00405acc <.LDL1>:
  405acc:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38

00405ad0 <.LVL367>:
  405ad0:	f7ff bbe5 	b.w	40529e <.LVL104>

00405ad4 <.LVL368>:
  405ad4:	f000 8094 	beq.w	405c00 <.LVL415>
  405ad8:	9b02      	ldr	r3, [sp, #8]
  405ada:	4a88      	ldr	r2, [pc, #544]	; (405cfc <.LVL451+0x4>)
  405adc:	425b      	negs	r3, r3

00405ade <.LVL369>:
  405ade:	f003 010f 	and.w	r1, r3, #15
  405ae2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
  405ae6:	ed92 6b00 	vldr	d6, [r2]
  405aea:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
  405aee:	111b      	asrs	r3, r3, #4

00405af0 <.LVL370>:
  405af0:	ee27 6b06 	vmul.f64	d6, d7, d6
  405af4:	f000 80e1 	beq.w	405cba <.LVL442>
  405af8:	4a81      	ldr	r2, [pc, #516]	; (405d00 <.LVL451+0x8>)
  405afa:	2102      	movs	r1, #2

00405afc <.LVL371>:
  405afc:	07d8      	lsls	r0, r3, #31
  405afe:	d504      	bpl.n	405b0a <.LVL373>
  405b00:	ed92 7b00 	vldr	d7, [r2]
  405b04:	3101      	adds	r1, #1
  405b06:	ee26 6b07 	vmul.f64	d6, d6, d7

00405b0a <.LVL373>:
  405b0a:	105b      	asrs	r3, r3, #1

00405b0c <.LVL374>:
  405b0c:	f102 0208 	add.w	r2, r2, #8
  405b10:	d1f4      	bne.n	405afc <.LVL371>
  405b12:	e669      	b.n	4057e8 <.LVL274>

00405b14 <.LVL375>:
  405b14:	9908      	ldr	r1, [sp, #32]
  405b16:	2330      	movs	r3, #48	; 0x30
  405b18:	700b      	strb	r3, [r1, #0]
  405b1a:	9b02      	ldr	r3, [sp, #8]
  405b1c:	3301      	adds	r3, #1
  405b1e:	9302      	str	r3, [sp, #8]

00405b20 <.LVL376>:
  405b20:	f81b 3c01 	ldrb.w	r3, [fp, #-1]

00405b24 <.LVL377>:
  405b24:	e422      	b.n	40536c <.LVL120>

00405b26 <.LVL378>:
  405b26:	6869      	ldr	r1, [r5, #4]
  405b28:	4620      	mov	r0, r4
  405b2a:	f005 f9cd 	bl	40aec8 <.LFE2>

00405b2e <.LVL379>:
  405b2e:	692b      	ldr	r3, [r5, #16]
  405b30:	3302      	adds	r3, #2
  405b32:	4607      	mov	r7, r0

00405b34 <.LVL380>:
  405b34:	009a      	lsls	r2, r3, #2
  405b36:	f105 010c 	add.w	r1, r5, #12
  405b3a:	300c      	adds	r0, #12

00405b3c <.LVL381>:
  405b3c:	f002 fa30 	bl	407fa0 <.LFE164>

00405b40 <.LVL382>:
  405b40:	4639      	mov	r1, r7
  405b42:	2201      	movs	r2, #1
  405b44:	4620      	mov	r0, r4
  405b46:	f003 fe2b 	bl	4097a0 <.LFE164>

00405b4a <.LVL383>:
  405b4a:	4607      	mov	r7, r0

00405b4c <.LVL384>:
  405b4c:	e51e      	b.n	40558c <.LVL192>

00405b4e <.LVL385>:
  405b4e:	2a39      	cmp	r2, #57	; 0x39
  405b50:	d076      	beq.n	405c40 <.L133>
  405b52:	f102 0901 	add.w	r9, r2, #1

00405b56 <.LVL386>:
  405b56:	46aa      	mov	sl, r5

00405b58 <.LVL387>:
  405b58:	f886 9000 	strb.w	r9, [r6]
  405b5c:	f106 0b01 	add.w	fp, r6, #1

00405b60 <.LVL388>:
  405b60:	463d      	mov	r5, r7

00405b62 <.LVL389>:
  405b62:	e5dc      	b.n	40571e <.L135>

00405b64 <.LVL390>:
  405b64:	46aa      	mov	sl, r5

00405b66 <.LVL391>:
  405b66:	4691      	mov	r9, r2

00405b68 <.LVL392>:
  405b68:	463d      	mov	r5, r7

00405b6a <.LVL393>:
  405b6a:	e5bb      	b.n	4056e4 <.LVL240>

00405b6c <.LVL394>:
  405b6c:	2300      	movs	r3, #0
  405b6e:	9305      	str	r3, [sp, #20]

00405b70 <.LVL395>:
  405b70:	461d      	mov	r5, r3
  405b72:	e72b      	b.n	4059cc <.L73>

00405b74 <.LVL396>:
  405b74:	4b61      	ldr	r3, [pc, #388]	; (405cfc <.LVL451+0x4>)
  405b76:	eebd 7bc6 	vcvt.s32.f64	s14, d6
  405b7a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  405b7e:	ed13 4b02 	vldr	d4, [r3, #-8]
  405b82:	ee17 3a10 	vmov	r3, s14

00405b86 <.LVL397>:
  405b86:	ec41 0b15 	vmov	d5, r0, r1
  405b8a:	9808      	ldr	r0, [sp, #32]

00405b8c <.LVL398>:
  405b8c:	ee24 4b05 	vmul.f64	d4, d4, d5

00405b90 <.LVL399>:
  405b90:	3330      	adds	r3, #48	; 0x30

00405b92 <.LVL400>:
  405b92:	2d01      	cmp	r5, #1
  405b94:	eeb8 7bc7 	vcvt.f64.s32	d7, s14

00405b98 <.LVL401>:
  405b98:	7003      	strb	r3, [r0, #0]
  405b9a:	f100 0b01 	add.w	fp, r0, #1

00405b9e <.LVL402>:
  405b9e:	ee36 7b47 	vsub.f64	d7, d6, d7
  405ba2:	d012      	beq.n	405bca <.LVL409>
  405ba4:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
  405ba8:	9b08      	ldr	r3, [sp, #32]

00405baa <.LVL403>:
  405baa:	1959      	adds	r1, r3, r5

00405bac <.LVL404>:
  405bac:	ee27 7b05 	vmul.f64	d7, d7, d5
  405bb0:	eebd 6bc7 	vcvt.s32.f64	s12, d7

00405bb4 <.LVL405>:
  405bb4:	ee16 3a10 	vmov	r3, s12
  405bb8:	3330      	adds	r3, #48	; 0x30
  405bba:	f80b 3b01 	strb.w	r3, [fp], #1

00405bbe <.LVL406>:
  405bbe:	458b      	cmp	fp, r1
  405bc0:	eeb8 6bc6 	vcvt.f64.s32	d6, s12

00405bc4 <.LVL407>:
  405bc4:	ee37 7b46 	vsub.f64	d7, d7, d6

00405bc8 <.LVL408>:
  405bc8:	d1f0      	bne.n	405bac <.LVL404>

00405bca <.LVL409>:
  405bca:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
  405bce:	ee34 5b06 	vadd.f64	d5, d4, d6
  405bd2:	eeb4 5bc7 	vcmpe.f64	d5, d7
  405bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405bda:	d538      	bpl.n	405c4e <.LVL424>
  405bdc:	9202      	str	r2, [sp, #8]

00405bde <.LVL410>:
  405bde:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
  405be2:	f7ff bbb6 	b.w	405352 <.L77>

00405be6 <.LVL411>:
  405be6:	9b07      	ldr	r3, [sp, #28]
  405be8:	1b9f      	subs	r7, r3, r6

00405bea <.LVL412>:
  405bea:	2300      	movs	r3, #0
  405bec:	f7ff bbe8 	b.w	4053c0 <.LVL127>

00405bf0 <.LVL413>:
  405bf0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405bf2:	9a05      	ldr	r2, [sp, #20]
  405bf4:	920d      	str	r2, [sp, #52]	; 0x34

00405bf6 <.LVL414>:
  405bf6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  405bfa:	9f07      	ldr	r7, [sp, #28]
  405bfc:	f7ff bbe0 	b.w	4053c0 <.LVL127>

00405c00 <.LVL415>:
  405c00:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
  405c04:	2102      	movs	r1, #2
  405c06:	e5ef      	b.n	4057e8 <.LVL274>

00405c08 <.LVL416>:
  405c08:	2e00      	cmp	r6, #0
  405c0a:	f43f aef2 	beq.w	4059f2 <.LVL335>
  405c0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405c10:	2b00      	cmp	r3, #0
  405c12:	f77f af5b 	ble.w	405acc <.LDL1>

00405c16 <.LVL417>:
  405c16:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
  405c1a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
  405c1e:	3101      	adds	r1, #1

00405c20 <.LVL418>:
  405c20:	ee07 1a90 	vmov	s15, r1
  405c24:	ee26 6b04 	vmul.f64	d6, d6, d4
  405c28:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  405c2c:	9a02      	ldr	r2, [sp, #8]
  405c2e:	eea6 5b07 	vfma.f64	d5, d6, d7
  405c32:	ec51 0b15 	vmov	r0, r1, d5
  405c36:	3a01      	subs	r2, #1

00405c38 <.LVL419>:
  405c38:	461d      	mov	r5, r3
  405c3a:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000

00405c3e <.LVL420>:
  405c3e:	e5ee      	b.n	40581e <.LVL277>

00405c40 <.L133>:
  405c40:	2239      	movs	r2, #57	; 0x39
  405c42:	46aa      	mov	sl, r5
  405c44:	7032      	strb	r2, [r6, #0]
  405c46:	463d      	mov	r5, r7

00405c48 <.LVL422>:
  405c48:	f106 0b01 	add.w	fp, r6, #1

00405c4c <.LVL423>:
  405c4c:	e558      	b.n	405700 <.L142>

00405c4e <.LVL424>:
  405c4e:	ee36 6b44 	vsub.f64	d6, d6, d4
  405c52:	eeb4 6bc7 	vcmpe.f64	d6, d7
  405c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405c5a:	dc01      	bgt.n	405c60 <.LVL426>
  405c5c:	e736      	b.n	405acc <.LDL1>

00405c5e <.LVL425>:
  405c5e:	468b      	mov	fp, r1

00405c60 <.LVL426>:
  405c60:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
  405c64:	2b30      	cmp	r3, #48	; 0x30
  405c66:	f10b 31ff 	add.w	r1, fp, #4294967295

00405c6a <.LVL427>:
  405c6a:	d0f8      	beq.n	405c5e <.LVL425>
  405c6c:	e62d      	b.n	4058ca <.LVL288+0xe>

00405c6e <.LVL428>:
  405c6e:	9202      	str	r2, [sp, #8]

00405c70 <.LVL429>:
  405c70:	f7ff bb6f 	b.w	405352 <.L77>

00405c74 <.LVL430>:
  405c74:	930d      	str	r3, [sp, #52]	; 0x34

00405c76 <.LVL431>:
  405c76:	e447      	b.n	405508 <.LVL175>

00405c78 <.LVL432>:
  405c78:	2a39      	cmp	r2, #57	; 0x39
  405c7a:	46cb      	mov	fp, r9

00405c7c <.LVL433>:
  405c7c:	4691      	mov	r9, r2

00405c7e <.LVL434>:
  405c7e:	d0df      	beq.n	405c40 <.L133>
  405c80:	f1bb 0f00 	cmp.w	fp, #0
  405c84:	f73f af08 	bgt.w	405a98 <.LVL358>
  405c88:	e708      	b.n	405a9c <.LVL359>

00405c8a <.LVL435>:
  405c8a:	f47f af07 	bne.w	405a9c <.LVL359>
  405c8e:	f019 0f01 	tst.w	r9, #1
  405c92:	f43f af03 	beq.w	405a9c <.LVL359>
  405c96:	e6fb      	b.n	405a90 <.LVL357>

00405c98 <.LVL436>:
  405c98:	4629      	mov	r1, r5
  405c9a:	2300      	movs	r3, #0
  405c9c:	220a      	movs	r2, #10
  405c9e:	4620      	mov	r0, r4

00405ca0 <.LVL437>:
  405ca0:	f004 faa8 	bl	40a1f4 <__multadd>

00405ca4 <.LVL438>:
  405ca4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405ca6:	2b00      	cmp	r3, #0
  405ca8:	4605      	mov	r5, r0

00405caa <.LVL439>:
  405caa:	dd08      	ble.n	405cbe <.LVL443>
  405cac:	461e      	mov	r6, r3
  405cae:	e460      	b.n	405572 <.LVL189>

00405cb0 <.LVL440>:
  405cb0:	9b01      	ldr	r3, [sp, #4]

00405cb2 <.LVL441>:
  405cb2:	2b02      	cmp	r3, #2
  405cb4:	dc20      	bgt.n	405cf8 <.LVL451>
  405cb6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  405cb8:	e4f1      	b.n	40569e <.LVL230>

00405cba <.LVL442>:
  405cba:	2102      	movs	r1, #2
  405cbc:	e594      	b.n	4057e8 <.LVL274>

00405cbe <.LVL443>:
  405cbe:	9b01      	ldr	r3, [sp, #4]

00405cc0 <.LVL444>:
  405cc0:	2b02      	cmp	r3, #2
  405cc2:	dc19      	bgt.n	405cf8 <.LVL451>
  405cc4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  405cc6:	e454      	b.n	405572 <.LVL189>

00405cc8 <.LVL445>:
  405cc8:	2501      	movs	r5, #1
  405cca:	f7ff bab0 	b.w	40522e <.LVL91>

00405cce <.LVL446>:
  405cce:	f43f ac33 	beq.w	405538 <.LVL184>
  405cd2:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  405cd6:	e4c0      	b.n	40565a <.LVL218>

00405cd8 <.LVL447>:
  405cd8:	2500      	movs	r5, #0

00405cda <.LVL448>:
  405cda:	6465      	str	r5, [r4, #68]	; 0x44
  405cdc:	4629      	mov	r1, r5
  405cde:	4620      	mov	r0, r4
  405ce0:	f005 f8f2 	bl	40aec8 <.LFE2>

00405ce4 <.LVL449>:
  405ce4:	f04f 36ff 	mov.w	r6, #4294967295
  405ce8:	2301      	movs	r3, #1
  405cea:	9008      	str	r0, [sp, #32]
  405cec:	46a9      	mov	r9, r5
  405cee:	6420      	str	r0, [r4, #64]	; 0x40

00405cf0 <.LVL450>:
  405cf0:	960c      	str	r6, [sp, #48]	; 0x30
  405cf2:	9309      	str	r3, [sp, #36]	; 0x24
  405cf4:	f7ff bad3 	b.w	40529e <.LVL104>

00405cf8 <.LVL451>:
  405cf8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  405cfa:	e658      	b.n	4059ae <.LVL323>
  405cfc:	00409278 	.word	0x00409278
  405d00:	0040b778 	.word	0x0040b778

Disassembly of section .text.Transform%58:

00405d04 <Transform>:

    #define MD5STEP(f, w, x, y, z, data, s) \
        w = rotlFixed(w + f(x, y, z) + data, s) + x

    static int Transform(Md5* md5)
    {
  405d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00405d08 <.LCFI0>:
  405d08:	b083      	sub	sp, #12

00405d0a <.LCFI1>:
        /* Copy context->state[] to working vars  */
        word32 a = md5->digest[0];
        word32 b = md5->digest[1];
  405d0a:	6d05      	ldr	r5, [r0, #80]	; 0x50

00405d0c <.LVL2>:
        word32 c = md5->digest[2];
  405d0c:	6d44      	ldr	r4, [r0, #84]	; 0x54
  405d0e:	4627      	mov	r7, r4

00405d10 <.LVL3>:
        word32 d = md5->digest[3];

        MD5STEP(F1, a, b, c, d, md5->buffer[0]  + 0xd76aa478,  7);
  405d10:	6d83      	ldr	r3, [r0, #88]	; 0x58
  405d12:	ea84 0903 	eor.w	r9, r4, r3
  405d16:	ea09 0905 	and.w	r9, r9, r5
  405d1a:	ea89 0903 	eor.w	r9, r9, r3
  405d1e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  405d20:	68c2      	ldr	r2, [r0, #12]
  405d22:	189a      	adds	r2, r3, r2
  405d24:	4bdf      	ldr	r3, [pc, #892]	; (4060a4 <.LVL188+0x10>)
  405d26:	4413      	add	r3, r2
  405d28:	4499      	add	r9, r3
  405d2a:	eb05 6979 	add.w	r9, r5, r9, ror #25

00405d2e <.LVL7>:
        MD5STEP(F1, d, a, b, c, md5->buffer[1]  + 0xe8c7b756, 12);
  405d2e:	ea85 0c04 	eor.w	ip, r5, r4
  405d32:	ea0c 0c09 	and.w	ip, ip, r9
  405d36:	ea8c 0c04 	eor.w	ip, ip, r4
  405d3a:	6d83      	ldr	r3, [r0, #88]	; 0x58
  405d3c:	6902      	ldr	r2, [r0, #16]
  405d3e:	4413      	add	r3, r2
  405d40:	4cd9      	ldr	r4, [pc, #868]	; (4060a8 <.LVL188+0x14>)

00405d42 <.LVL10>:
  405d42:	441c      	add	r4, r3
  405d44:	44a4      	add	ip, r4
  405d46:	eb09 5c3c 	add.w	ip, r9, ip, ror #20

00405d4a <.LVL12>:
        MD5STEP(F1, c, d, a, b, md5->buffer[2]  + 0x242070db, 17);
  405d4a:	ea85 0609 	eor.w	r6, r5, r9
  405d4e:	ea06 060c 	and.w	r6, r6, ip
  405d52:	406e      	eors	r6, r5
  405d54:	6943      	ldr	r3, [r0, #20]
  405d56:	9701      	str	r7, [sp, #4]
  405d58:	443b      	add	r3, r7
  405d5a:	4ad4      	ldr	r2, [pc, #848]	; (4060ac <.LVL188+0x18>)
  405d5c:	441a      	add	r2, r3
  405d5e:	4416      	add	r6, r2
  405d60:	eb0c 36f6 	add.w	r6, ip, r6, ror #15

00405d64 <.LVL16>:
        MD5STEP(F1, b, c, d, a, md5->buffer[3]  + 0xc1bdceee, 22);
  405d64:	ea89 010c 	eor.w	r1, r9, ip
  405d68:	4031      	ands	r1, r6
  405d6a:	ea81 0109 	eor.w	r1, r1, r9
  405d6e:	6983      	ldr	r3, [r0, #24]
  405d70:	18ea      	adds	r2, r5, r3
  405d72:	4bcf      	ldr	r3, [pc, #828]	; (4060b0 <.LVL188+0x1c>)
  405d74:	4413      	add	r3, r2
  405d76:	4419      	add	r1, r3
  405d78:	eb06 21b1 	add.w	r1, r6, r1, ror #10

00405d7c <.LVL20>:
        MD5STEP(F1, a, b, c, d, md5->buffer[4]  + 0xf57c0faf,  7);
  405d7c:	ea8c 0306 	eor.w	r3, ip, r6
  405d80:	400b      	ands	r3, r1
  405d82:	ea83 030c 	eor.w	r3, r3, ip
  405d86:	4acb      	ldr	r2, [pc, #812]	; (4060b4 <.LVL188+0x20>)
  405d88:	69c4      	ldr	r4, [r0, #28]
  405d8a:	4422      	add	r2, r4
  405d8c:	4491      	add	r9, r2

00405d8e <.LVL23>:
  405d8e:	444b      	add	r3, r9
  405d90:	eb01 6373 	add.w	r3, r1, r3, ror #25

00405d94 <.LVL25>:
        MD5STEP(F1, d, a, b, c, md5->buffer[5]  + 0x4787c62a, 12);
  405d94:	ea86 0401 	eor.w	r4, r6, r1
  405d98:	401c      	ands	r4, r3
  405d9a:	4074      	eors	r4, r6
  405d9c:	4ac6      	ldr	r2, [pc, #792]	; (4060b8 <.LVL188+0x24>)
  405d9e:	6a07      	ldr	r7, [r0, #32]
  405da0:	443a      	add	r2, r7
  405da2:	4494      	add	ip, r2

00405da4 <.LVL28>:
  405da4:	4464      	add	r4, ip
  405da6:	eb03 5434 	add.w	r4, r3, r4, ror #20

00405daa <.LVL30>:
        MD5STEP(F1, c, d, a, b, md5->buffer[6]  + 0xa8304613, 17);
  405daa:	ea81 0203 	eor.w	r2, r1, r3
  405dae:	4022      	ands	r2, r4
  405db0:	404a      	eors	r2, r1
  405db2:	f8df e36c 	ldr.w	lr, [pc, #876]	; 406120 <.LVL188+0x8c>
  405db6:	6a47      	ldr	r7, [r0, #36]	; 0x24
  405db8:	44be      	add	lr, r7
  405dba:	4476      	add	r6, lr

00405dbc <.LVL33>:
  405dbc:	4432      	add	r2, r6
  405dbe:	eb04 32f2 	add.w	r2, r4, r2, ror #15

00405dc2 <.LVL35>:
        MD5STEP(F1, b, c, d, a, md5->buffer[7]  + 0xfd469501, 22);
  405dc2:	f8d0 a028 	ldr.w	sl, [r0, #40]	; 0x28
  405dc6:	ea83 0804 	eor.w	r8, r3, r4
  405dca:	ea08 0802 	and.w	r8, r8, r2
  405dce:	ea88 0803 	eor.w	r8, r8, r3
  405dd2:	4eba      	ldr	r6, [pc, #744]	; (4060bc <.LVL188+0x28>)
  405dd4:	4456      	add	r6, sl
  405dd6:	4431      	add	r1, r6

00405dd8 <.LVL39>:
  405dd8:	4488      	add	r8, r1
  405dda:	eb02 28b8 	add.w	r8, r2, r8, ror #10

00405dde <.LVL41>:
        MD5STEP(F1, a, b, c, d, md5->buffer[8]  + 0x698098d8,  7);
  405dde:	ea84 0e02 	eor.w	lr, r4, r2
  405de2:	ea0e 0e08 	and.w	lr, lr, r8
  405de6:	ea8e 0e04 	eor.w	lr, lr, r4
  405dea:	49b5      	ldr	r1, [pc, #724]	; (4060c0 <.LVL188+0x2c>)
  405dec:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  405dee:	4431      	add	r1, r6
  405df0:	440b      	add	r3, r1

00405df2 <.LVL44>:
  405df2:	449e      	add	lr, r3
  405df4:	eb08 6e7e 	add.w	lr, r8, lr, ror #25

00405df8 <.LVL46>:
        MD5STEP(F1, d, a, b, c, md5->buffer[9]  + 0x8b44f7af, 12);
  405df8:	ea82 0908 	eor.w	r9, r2, r8
  405dfc:	ea09 090e 	and.w	r9, r9, lr
  405e00:	ea89 0902 	eor.w	r9, r9, r2
  405e04:	4baf      	ldr	r3, [pc, #700]	; (4060c4 <.LVL188+0x30>)
  405e06:	6b01      	ldr	r1, [r0, #48]	; 0x30
  405e08:	440b      	add	r3, r1
  405e0a:	441c      	add	r4, r3

00405e0c <.LVL49>:
  405e0c:	44a1      	add	r9, r4
  405e0e:	eb0e 5939 	add.w	r9, lr, r9, ror #20

00405e12 <.LVL51>:
        MD5STEP(F1, c, d, a, b, md5->buffer[10] + 0xffff5bb1, 17);
  405e12:	ea88 0c0e 	eor.w	ip, r8, lr
  405e16:	ea0c 0c09 	and.w	ip, ip, r9
  405e1a:	ea8c 0c08 	eor.w	ip, ip, r8
  405e1e:	4baa      	ldr	r3, [pc, #680]	; (4060c8 <.LVL188+0x34>)
  405e20:	6b41      	ldr	r1, [r0, #52]	; 0x34
  405e22:	440b      	add	r3, r1
  405e24:	441a      	add	r2, r3

00405e26 <.LVL54>:
  405e26:	4494      	add	ip, r2
  405e28:	eb09 3cfc 	add.w	ip, r9, ip, ror #15

00405e2c <.LVL56>:
        MD5STEP(F1, b, c, d, a, md5->buffer[11] + 0x895cd7be, 22);
  405e2c:	ea8e 0609 	eor.w	r6, lr, r9
  405e30:	ea06 060c 	and.w	r6, r6, ip
  405e34:	ea86 060e 	eor.w	r6, r6, lr
  405e38:	4ba4      	ldr	r3, [pc, #656]	; (4060cc <.LVL188+0x38>)
  405e3a:	6b82      	ldr	r2, [r0, #56]	; 0x38
  405e3c:	4413      	add	r3, r2
  405e3e:	4498      	add	r8, r3

00405e40 <.LVL59>:
  405e40:	4446      	add	r6, r8
  405e42:	eb0c 26b6 	add.w	r6, ip, r6, ror #10

00405e46 <.LVL61>:
        MD5STEP(F1, a, b, c, d, md5->buffer[12] + 0x6b901122,  7);
  405e46:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
  405e4a:	ea89 010c 	eor.w	r1, r9, ip
  405e4e:	4031      	ands	r1, r6
  405e50:	ea81 0109 	eor.w	r1, r1, r9
  405e54:	4b9e      	ldr	r3, [pc, #632]	; (4060d0 <.LVL188+0x3c>)
  405e56:	4443      	add	r3, r8
  405e58:	449e      	add	lr, r3

00405e5a <.LVL65>:
  405e5a:	4471      	add	r1, lr
  405e5c:	eb06 6171 	add.w	r1, r6, r1, ror #25

00405e60 <.LVL67>:
        MD5STEP(F1, d, a, b, c, md5->buffer[13] + 0xfd987193, 12);
  405e60:	ea8c 0306 	eor.w	r3, ip, r6
  405e64:	400b      	ands	r3, r1
  405e66:	ea83 030c 	eor.w	r3, r3, ip
  405e6a:	4a9a      	ldr	r2, [pc, #616]	; (4060d4 <.LVL188+0x40>)
  405e6c:	6c04      	ldr	r4, [r0, #64]	; 0x40
  405e6e:	4422      	add	r2, r4
  405e70:	4491      	add	r9, r2

00405e72 <.LVL70>:
  405e72:	444b      	add	r3, r9
  405e74:	eb01 5333 	add.w	r3, r1, r3, ror #20

00405e78 <.LVL72>:
        MD5STEP(F1, c, d, a, b, md5->buffer[14] + 0xa679438e, 17);
  405e78:	f8d0 9044 	ldr.w	r9, [r0, #68]	; 0x44
  405e7c:	ea86 0401 	eor.w	r4, r6, r1
  405e80:	401c      	ands	r4, r3
  405e82:	4074      	eors	r4, r6
  405e84:	4a94      	ldr	r2, [pc, #592]	; (4060d8 <.LVL188+0x44>)
  405e86:	444a      	add	r2, r9
  405e88:	4494      	add	ip, r2

00405e8a <.LVL76>:
  405e8a:	4464      	add	r4, ip
  405e8c:	eb03 34f4 	add.w	r4, r3, r4, ror #15

00405e90 <.LVL78>:
        MD5STEP(F1, b, c, d, a, md5->buffer[15] + 0x49b40821, 22);
  405e90:	f8d0 c048 	ldr.w	ip, [r0, #72]	; 0x48
  405e94:	ea81 0203 	eor.w	r2, r1, r3
  405e98:	4022      	ands	r2, r4
  405e9a:	404a      	eors	r2, r1
  405e9c:	f8df e284 	ldr.w	lr, [pc, #644]	; 406124 <.LVL188+0x90>
  405ea0:	44e6      	add	lr, ip
  405ea2:	4476      	add	r6, lr

00405ea4 <.LVL82>:
  405ea4:	4432      	add	r2, r6
  405ea6:	eb04 22b2 	add.w	r2, r4, r2, ror #10

00405eaa <.LVL84>:

        MD5STEP(F2, a, b, c, d, md5->buffer[1]  + 0xf61e2562,  5);
  405eaa:	ea84 0b02 	eor.w	fp, r4, r2
  405eae:	ea0b 0b03 	and.w	fp, fp, r3
  405eb2:	ea8b 0b04 	eor.w	fp, fp, r4
  405eb6:	4e89      	ldr	r6, [pc, #548]	; (4060dc <.LVL188+0x48>)
  405eb8:	6907      	ldr	r7, [r0, #16]
  405eba:	443e      	add	r6, r7
  405ebc:	4431      	add	r1, r6

00405ebe <.LVL87>:
  405ebe:	448b      	add	fp, r1
  405ec0:	eb02 6bfb 	add.w	fp, r2, fp, ror #27

00405ec4 <.LVL89>:
        MD5STEP(F2, d, a, b, c, md5->buffer[6]  + 0xc040b340,  9);
  405ec4:	ea82 0e0b 	eor.w	lr, r2, fp
  405ec8:	ea0e 0e04 	and.w	lr, lr, r4
  405ecc:	ea8e 0e02 	eor.w	lr, lr, r2
  405ed0:	4983      	ldr	r1, [pc, #524]	; (4060e0 <.LVL188+0x4c>)
  405ed2:	6a46      	ldr	r6, [r0, #36]	; 0x24
  405ed4:	4431      	add	r1, r6
  405ed6:	440b      	add	r3, r1

00405ed8 <.LVL92>:
  405ed8:	449e      	add	lr, r3
  405eda:	eb0b 5efe 	add.w	lr, fp, lr, ror #23

00405ede <.LVL94>:
        MD5STEP(F2, c, d, a, b, md5->buffer[11] + 0x265e5a51, 14);
  405ede:	ea8b 030e 	eor.w	r3, fp, lr
  405ee2:	4013      	ands	r3, r2
  405ee4:	ea83 030b 	eor.w	r3, r3, fp
  405ee8:	497e      	ldr	r1, [pc, #504]	; (4060e4 <.LVL188+0x50>)
  405eea:	6b86      	ldr	r6, [r0, #56]	; 0x38
  405eec:	4431      	add	r1, r6
  405eee:	440c      	add	r4, r1

00405ef0 <.LVL97>:
  405ef0:	4423      	add	r3, r4
  405ef2:	eb0e 43b3 	add.w	r3, lr, r3, ror #18

00405ef6 <.LVL99>:
        MD5STEP(F2, b, c, d, a, md5->buffer[0]  + 0xe9b6c7aa, 20);
  405ef6:	ea8e 0603 	eor.w	r6, lr, r3
  405efa:	ea06 060b 	and.w	r6, r6, fp
  405efe:	ea86 060e 	eor.w	r6, r6, lr
  405f02:	4979      	ldr	r1, [pc, #484]	; (4060e8 <.LVL188+0x54>)
  405f04:	68c4      	ldr	r4, [r0, #12]
  405f06:	4421      	add	r1, r4
  405f08:	440a      	add	r2, r1

00405f0a <.LVL102>:
  405f0a:	4416      	add	r6, r2
  405f0c:	eb03 3636 	add.w	r6, r3, r6, ror #12

00405f10 <.LVL104>:
        MD5STEP(F2, a, b, c, d, md5->buffer[5]  + 0xd62f105d,  5);
  405f10:	ea83 0206 	eor.w	r2, r3, r6
  405f14:	ea02 020e 	and.w	r2, r2, lr
  405f18:	405a      	eors	r2, r3
  405f1a:	4974      	ldr	r1, [pc, #464]	; (4060ec <.LVL188+0x58>)
  405f1c:	6a04      	ldr	r4, [r0, #32]
  405f1e:	4421      	add	r1, r4
  405f20:	448b      	add	fp, r1

00405f22 <.LVL107>:
  405f22:	445a      	add	r2, fp
  405f24:	eb06 62f2 	add.w	r2, r6, r2, ror #27

00405f28 <.LVL109>:
        MD5STEP(F2, d, a, b, c, md5->buffer[10] + 0x02441453,  9);
  405f28:	ea86 0102 	eor.w	r1, r6, r2
  405f2c:	4019      	ands	r1, r3
  405f2e:	4071      	eors	r1, r6
  405f30:	4c6f      	ldr	r4, [pc, #444]	; (4060f0 <.LVL188+0x5c>)
  405f32:	6b47      	ldr	r7, [r0, #52]	; 0x34
  405f34:	443c      	add	r4, r7
  405f36:	44a6      	add	lr, r4

00405f38 <.LVL112>:
  405f38:	4471      	add	r1, lr
  405f3a:	eb02 51f1 	add.w	r1, r2, r1, ror #23

00405f3e <.LVL114>:
        MD5STEP(F2, c, d, a, b, md5->buffer[15] + 0xd8a1e681, 14);
  405f3e:	ea82 0401 	eor.w	r4, r2, r1
  405f42:	4034      	ands	r4, r6
  405f44:	4054      	eors	r4, r2
  405f46:	f8df e1e0 	ldr.w	lr, [pc, #480]	; 406128 <.LVL188+0x94>
  405f4a:	44e6      	add	lr, ip
  405f4c:	4473      	add	r3, lr

00405f4e <.LVL117>:
  405f4e:	441c      	add	r4, r3
  405f50:	eb01 44b4 	add.w	r4, r1, r4, ror #18

00405f54 <.LVL119>:
        MD5STEP(F2, b, c, d, a, md5->buffer[4]  + 0xe7d3fbc8, 20);
  405f54:	ea81 0304 	eor.w	r3, r1, r4
  405f58:	4013      	ands	r3, r2
  405f5a:	404b      	eors	r3, r1
  405f5c:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 40612c <.LVL188+0x98>
  405f60:	69c7      	ldr	r7, [r0, #28]
  405f62:	44be      	add	lr, r7
  405f64:	4476      	add	r6, lr

00405f66 <.LVL122>:
  405f66:	4433      	add	r3, r6
  405f68:	eb04 3333 	add.w	r3, r4, r3, ror #12

00405f6c <.LVL124>:
        MD5STEP(F2, a, b, c, d, md5->buffer[9]  + 0x21e1cde6,  5);
  405f6c:	ea84 0b03 	eor.w	fp, r4, r3
  405f70:	ea0b 0b01 	and.w	fp, fp, r1
  405f74:	ea8b 0b04 	eor.w	fp, fp, r4
  405f78:	4e5e      	ldr	r6, [pc, #376]	; (4060f4 <.LVL188+0x60>)
  405f7a:	6b07      	ldr	r7, [r0, #48]	; 0x30
  405f7c:	443e      	add	r6, r7
  405f7e:	4432      	add	r2, r6

00405f80 <.LVL127>:
  405f80:	4493      	add	fp, r2
  405f82:	eb03 6bfb 	add.w	fp, r3, fp, ror #27

00405f86 <.LVL129>:
        MD5STEP(F2, d, a, b, c, md5->buffer[14] + 0xc33707d6,  9);
  405f86:	ea83 0e0b 	eor.w	lr, r3, fp
  405f8a:	ea0e 0e04 	and.w	lr, lr, r4
  405f8e:	ea8e 0e03 	eor.w	lr, lr, r3
  405f92:	4a59      	ldr	r2, [pc, #356]	; (4060f8 <.LVL188+0x64>)
  405f94:	444a      	add	r2, r9
  405f96:	4411      	add	r1, r2

00405f98 <.LVL132>:
  405f98:	448e      	add	lr, r1
  405f9a:	eb0b 5efe 	add.w	lr, fp, lr, ror #23

00405f9e <.LVL134>:
        MD5STEP(F2, c, d, a, b, md5->buffer[3]  + 0xf4d50d87, 14);
  405f9e:	ea8b 060e 	eor.w	r6, fp, lr
  405fa2:	401e      	ands	r6, r3
  405fa4:	ea86 060b 	eor.w	r6, r6, fp
  405fa8:	4a54      	ldr	r2, [pc, #336]	; (4060fc <.LVL188+0x68>)
  405faa:	6981      	ldr	r1, [r0, #24]
  405fac:	440a      	add	r2, r1
  405fae:	4414      	add	r4, r2

00405fb0 <.LVL137>:
  405fb0:	4426      	add	r6, r4
  405fb2:	eb0e 46b6 	add.w	r6, lr, r6, ror #18

00405fb6 <.LVL139>:
        MD5STEP(F2, b, c, d, a, md5->buffer[8]  + 0x455a14ed, 20);
  405fb6:	ea8e 0206 	eor.w	r2, lr, r6
  405fba:	ea02 020b 	and.w	r2, r2, fp
  405fbe:	ea82 020e 	eor.w	r2, r2, lr
  405fc2:	494f      	ldr	r1, [pc, #316]	; (406100 <.LVL188+0x6c>)
  405fc4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  405fc6:	4421      	add	r1, r4
  405fc8:	440b      	add	r3, r1

00405fca <.LVL142>:
  405fca:	441a      	add	r2, r3
  405fcc:	eb06 3232 	add.w	r2, r6, r2, ror #12

00405fd0 <.LVL144>:
        MD5STEP(F2, a, b, c, d, md5->buffer[13] + 0xa9e3e905,  5);
  405fd0:	ea86 0302 	eor.w	r3, r6, r2
  405fd4:	ea03 030e 	and.w	r3, r3, lr
  405fd8:	4073      	eors	r3, r6
  405fda:	494a      	ldr	r1, [pc, #296]	; (406104 <.LVL188+0x70>)
  405fdc:	6c04      	ldr	r4, [r0, #64]	; 0x40
  405fde:	4421      	add	r1, r4
  405fe0:	448b      	add	fp, r1

00405fe2 <.LVL147>:
  405fe2:	445b      	add	r3, fp
  405fe4:	eb02 63f3 	add.w	r3, r2, r3, ror #27

00405fe8 <.LVL149>:
        MD5STEP(F2, d, a, b, c, md5->buffer[2]  + 0xfcefa3f8,  9);
  405fe8:	ea82 0103 	eor.w	r1, r2, r3
  405fec:	4031      	ands	r1, r6
  405fee:	4051      	eors	r1, r2
  405ff0:	4c45      	ldr	r4, [pc, #276]	; (406108 <.LVL188+0x74>)
  405ff2:	6947      	ldr	r7, [r0, #20]
  405ff4:	443c      	add	r4, r7
  405ff6:	44a6      	add	lr, r4

00405ff8 <.LVL152>:
  405ff8:	4471      	add	r1, lr
  405ffa:	eb03 51f1 	add.w	r1, r3, r1, ror #23

00405ffe <.LVL154>:
        MD5STEP(F2, c, d, a, b, md5->buffer[7]  + 0x676f02d9, 14);
  405ffe:	ea83 0401 	eor.w	r4, r3, r1
  406002:	4014      	ands	r4, r2
  406004:	405c      	eors	r4, r3
  406006:	f8df e128 	ldr.w	lr, [pc, #296]	; 406130 <.LVL188+0x9c>
  40600a:	44d6      	add	lr, sl
  40600c:	4476      	add	r6, lr

0040600e <.LVL157>:
  40600e:	4434      	add	r4, r6
  406010:	eb01 44b4 	add.w	r4, r1, r4, ror #18

00406014 <.LVL159>:
        MD5STEP(F2, b, c, d, a, md5->buffer[12] + 0x8d2a4c8a, 20);
  406014:	ea81 0b04 	eor.w	fp, r1, r4
  406018:	ea03 060b 	and.w	r6, r3, fp
  40601c:	404e      	eors	r6, r1
  40601e:	f8df e114 	ldr.w	lr, [pc, #276]	; 406134 <.LVL188+0xa0>
  406022:	44c6      	add	lr, r8
  406024:	4472      	add	r2, lr

00406026 <.LVL163>:
  406026:	4416      	add	r6, r2
  406028:	eb04 3636 	add.w	r6, r4, r6, ror #12

0040602c <.LVL165>:

        MD5STEP(F3, a, b, c, d, md5->buffer[5]  + 0xfffa3942,  4);
  40602c:	4a37      	ldr	r2, [pc, #220]	; (40610c <.LVL188+0x78>)
  40602e:	6a07      	ldr	r7, [r0, #32]
  406030:	443a      	add	r2, r7
  406032:	4413      	add	r3, r2

00406034 <.LVL166>:
  406034:	ea8b 0b06 	eor.w	fp, fp, r6
  406038:	445b      	add	r3, fp
  40603a:	eb06 7333 	add.w	r3, r6, r3, ror #28

0040603e <.LVL168>:
        MD5STEP(F3, d, a, b, c, md5->buffer[8]  + 0x8771f681, 11);
  40603e:	ea84 0206 	eor.w	r2, r4, r6
  406042:	405a      	eors	r2, r3
  406044:	f8df e0f0 	ldr.w	lr, [pc, #240]	; 406138 <.LVL188+0xa4>
  406048:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  40604a:	44be      	add	lr, r7
  40604c:	4471      	add	r1, lr

0040604e <.LVL171>:
  40604e:	4411      	add	r1, r2
  406050:	eb03 5171 	add.w	r1, r3, r1, ror #21

00406054 <.LVL173>:
        MD5STEP(F3, c, d, a, b, md5->buffer[11] + 0x6d9d6122, 16);
  406054:	ea86 0b03 	eor.w	fp, r6, r3
  406058:	ea8b 0b01 	eor.w	fp, fp, r1
  40605c:	4a2c      	ldr	r2, [pc, #176]	; (406110 <.LVL188+0x7c>)
  40605e:	6b87      	ldr	r7, [r0, #56]	; 0x38
  406060:	443a      	add	r2, r7
  406062:	4414      	add	r4, r2

00406064 <.LVL176>:
  406064:	445c      	add	r4, fp
  406066:	eb01 4434 	add.w	r4, r1, r4, ror #16

0040606a <.LVL178>:
        MD5STEP(F3, b, c, d, a, md5->buffer[14] + 0xfde5380c, 23);
  40606a:	ea83 0e01 	eor.w	lr, r3, r1
  40606e:	ea8e 0e04 	eor.w	lr, lr, r4
  406072:	4a28      	ldr	r2, [pc, #160]	; (406114 <.LVL188+0x80>)
  406074:	444a      	add	r2, r9
  406076:	4416      	add	r6, r2

00406078 <.LVL181>:
  406078:	44b6      	add	lr, r6
  40607a:	eb04 2e7e 	add.w	lr, r4, lr, ror #9

0040607e <.LVL183>:
        MD5STEP(F3, a, b, c, d, md5->buffer[1]  + 0xa4beea44,  4);
  40607e:	ea81 0204 	eor.w	r2, r1, r4
  406082:	ea82 020e 	eor.w	r2, r2, lr
  406086:	4e24      	ldr	r6, [pc, #144]	; (406118 <.LVL188+0x84>)
  406088:	6907      	ldr	r7, [r0, #16]
  40608a:	443e      	add	r6, r7
  40608c:	4433      	add	r3, r6

0040608e <.LVL186>:
  40608e:	4413      	add	r3, r2
  406090:	eb0e 7333 	add.w	r3, lr, r3, ror #28

00406094 <.LVL188>:
        MD5STEP(F3, d, a, b, c, md5->buffer[4]  + 0x4bdecfa9, 11);
  406094:	ea84 020e 	eor.w	r2, r4, lr
  406098:	405a      	eors	r2, r3
  40609a:	4e20      	ldr	r6, [pc, #128]	; (40611c <.LVL188+0x88>)
  40609c:	69c7      	ldr	r7, [r0, #28]
  40609e:	443e      	add	r6, r7
  4060a0:	4431      	add	r1, r6
  4060a2:	e04b      	b.n	40613c <.LVL191>
  4060a4:	d76aa478 	.word	0xd76aa478
  4060a8:	e8c7b756 	.word	0xe8c7b756
  4060ac:	242070db 	.word	0x242070db
  4060b0:	c1bdceee 	.word	0xc1bdceee
  4060b4:	f57c0faf 	.word	0xf57c0faf
  4060b8:	4787c62a 	.word	0x4787c62a
  4060bc:	fd469501 	.word	0xfd469501
  4060c0:	698098d8 	.word	0x698098d8
  4060c4:	8b44f7af 	.word	0x8b44f7af
  4060c8:	ffff5bb1 	.word	0xffff5bb1
  4060cc:	895cd7be 	.word	0x895cd7be
  4060d0:	6b901122 	.word	0x6b901122
  4060d4:	fd987193 	.word	0xfd987193
  4060d8:	a679438e 	.word	0xa679438e
  4060dc:	f61e2562 	.word	0xf61e2562
  4060e0:	c040b340 	.word	0xc040b340
  4060e4:	265e5a51 	.word	0x265e5a51
  4060e8:	e9b6c7aa 	.word	0xe9b6c7aa
  4060ec:	d62f105d 	.word	0xd62f105d
  4060f0:	02441453 	.word	0x02441453
  4060f4:	21e1cde6 	.word	0x21e1cde6
  4060f8:	c33707d6 	.word	0xc33707d6
  4060fc:	f4d50d87 	.word	0xf4d50d87
  406100:	455a14ed 	.word	0x455a14ed
  406104:	a9e3e905 	.word	0xa9e3e905
  406108:	fcefa3f8 	.word	0xfcefa3f8
  40610c:	fffa3942 	.word	0xfffa3942
  406110:	6d9d6122 	.word	0x6d9d6122
  406114:	fde5380c 	.word	0xfde5380c
  406118:	a4beea44 	.word	0xa4beea44
  40611c:	4bdecfa9 	.word	0x4bdecfa9
  406120:	a8304613 	.word	0xa8304613
  406124:	49b40821 	.word	0x49b40821
  406128:	d8a1e681 	.word	0xd8a1e681
  40612c:	e7d3fbc8 	.word	0xe7d3fbc8
  406130:	676f02d9 	.word	0x676f02d9
  406134:	8d2a4c8a 	.word	0x8d2a4c8a
  406138:	8771f681 	.word	0x8771f681

0040613c <.LVL191>:
  40613c:	4411      	add	r1, r2
  40613e:	eb03 5171 	add.w	r1, r3, r1, ror #21

00406142 <.LVL193>:
        MD5STEP(F3, c, d, a, b, md5->buffer[7]  + 0xf6bb4b60, 16);
  406142:	ea8e 0b03 	eor.w	fp, lr, r3
  406146:	ea8b 0b01 	eor.w	fp, fp, r1
  40614a:	4a8c      	ldr	r2, [pc, #560]	; (40637c <.LVL322>)
  40614c:	4452      	add	r2, sl
  40614e:	4414      	add	r4, r2

00406150 <.LVL196>:
  406150:	44a3      	add	fp, r4
  406152:	eb01 4b3b 	add.w	fp, r1, fp, ror #16

00406156 <.LVL198>:
        MD5STEP(F3, b, c, d, a, md5->buffer[10] + 0xbebfbc70, 23);
  406156:	ea83 0201 	eor.w	r2, r3, r1
  40615a:	ea82 020b 	eor.w	r2, r2, fp
  40615e:	4c88      	ldr	r4, [pc, #544]	; (406380 <.LVL322+0x4>)
  406160:	6b46      	ldr	r6, [r0, #52]	; 0x34
  406162:	4434      	add	r4, r6
  406164:	44a6      	add	lr, r4

00406166 <.LVL201>:
  406166:	4472      	add	r2, lr
  406168:	eb0b 2272 	add.w	r2, fp, r2, ror #9

0040616c <.LVL203>:
        MD5STEP(F3, a, b, c, d, md5->buffer[13] + 0x289b7ec6,  4);
  40616c:	ea81 040b 	eor.w	r4, r1, fp
  406170:	4054      	eors	r4, r2
  406172:	4e84      	ldr	r6, [pc, #528]	; (406384 <.LVL322+0x8>)
  406174:	6c07      	ldr	r7, [r0, #64]	; 0x40
  406176:	443e      	add	r6, r7
  406178:	4433      	add	r3, r6

0040617a <.LVL206>:
  40617a:	4423      	add	r3, r4
  40617c:	eb02 7333 	add.w	r3, r2, r3, ror #28

00406180 <.LVL208>:
        MD5STEP(F3, d, a, b, c, md5->buffer[0]  + 0xeaa127fa, 11);
  406180:	ea8b 0e02 	eor.w	lr, fp, r2
  406184:	ea8e 0e03 	eor.w	lr, lr, r3
  406188:	4c7f      	ldr	r4, [pc, #508]	; (406388 <.LVL322+0xc>)
  40618a:	68c6      	ldr	r6, [r0, #12]
  40618c:	4434      	add	r4, r6
  40618e:	4421      	add	r1, r4

00406190 <.LVL211>:
  406190:	448e      	add	lr, r1
  406192:	eb03 5e7e 	add.w	lr, r3, lr, ror #21

00406196 <.LVL213>:
        MD5STEP(F3, c, d, a, b, md5->buffer[3]  + 0xd4ef3085, 16);
  406196:	ea82 0603 	eor.w	r6, r2, r3
  40619a:	ea86 060e 	eor.w	r6, r6, lr
  40619e:	497b      	ldr	r1, [pc, #492]	; (40638c <.LVL322+0x10>)
  4061a0:	6984      	ldr	r4, [r0, #24]
  4061a2:	4421      	add	r1, r4
  4061a4:	448b      	add	fp, r1

004061a6 <.LVL216>:
  4061a6:	445e      	add	r6, fp
  4061a8:	eb0e 4636 	add.w	r6, lr, r6, ror #16

004061ac <.LVL218>:
        MD5STEP(F3, b, c, d, a, md5->buffer[6]  + 0x04881d05, 23);
  4061ac:	ea83 0b0e 	eor.w	fp, r3, lr
  4061b0:	ea8b 0b06 	eor.w	fp, fp, r6
  4061b4:	4976      	ldr	r1, [pc, #472]	; (406390 <.LVL322+0x14>)
  4061b6:	6a44      	ldr	r4, [r0, #36]	; 0x24
  4061b8:	4421      	add	r1, r4
  4061ba:	440a      	add	r2, r1

004061bc <.LVL221>:
  4061bc:	4493      	add	fp, r2
  4061be:	eb06 2b7b 	add.w	fp, r6, fp, ror #9

004061c2 <.LVL223>:
        MD5STEP(F3, a, b, c, d, md5->buffer[9]  + 0xd9d4d039,  4);
  4061c2:	ea8e 0406 	eor.w	r4, lr, r6
  4061c6:	ea84 040b 	eor.w	r4, r4, fp
  4061ca:	4a72      	ldr	r2, [pc, #456]	; (406394 <.LVL322+0x18>)
  4061cc:	6b01      	ldr	r1, [r0, #48]	; 0x30
  4061ce:	440a      	add	r2, r1
  4061d0:	4413      	add	r3, r2

004061d2 <.LVL226>:
  4061d2:	441c      	add	r4, r3
  4061d4:	eb0b 7434 	add.w	r4, fp, r4, ror #28

004061d8 <.LVL228>:
        MD5STEP(F3, d, a, b, c, md5->buffer[12] + 0xe6db99e5, 11);
  4061d8:	ea86 010b 	eor.w	r1, r6, fp
  4061dc:	4061      	eors	r1, r4
  4061de:	4b6e      	ldr	r3, [pc, #440]	; (406398 <.LVL322+0x1c>)
  4061e0:	4443      	add	r3, r8
  4061e2:	449e      	add	lr, r3

004061e4 <.LVL231>:
  4061e4:	4471      	add	r1, lr
  4061e6:	eb04 5171 	add.w	r1, r4, r1, ror #21

004061ea <.LVL233>:
        MD5STEP(F3, c, d, a, b, md5->buffer[15] + 0x1fa27cf8, 16);
  4061ea:	ea8b 0304 	eor.w	r3, fp, r4
  4061ee:	404b      	eors	r3, r1
  4061f0:	4a6a      	ldr	r2, [pc, #424]	; (40639c <.LVL322+0x20>)
  4061f2:	4462      	add	r2, ip
  4061f4:	4416      	add	r6, r2

004061f6 <.LVL236>:
  4061f6:	441e      	add	r6, r3
  4061f8:	eb01 4636 	add.w	r6, r1, r6, ror #16

004061fc <.LVL238>:
        MD5STEP(F3, b, c, d, a, md5->buffer[2]  + 0xc4ac5665, 23);
  4061fc:	ea84 0201 	eor.w	r2, r4, r1
  406200:	4072      	eors	r2, r6
  406202:	4b67      	ldr	r3, [pc, #412]	; (4063a0 <.LVL322+0x24>)
  406204:	6947      	ldr	r7, [r0, #20]
  406206:	443b      	add	r3, r7
  406208:	449b      	add	fp, r3

0040620a <.LVL241>:
  40620a:	445a      	add	r2, fp
  40620c:	eb06 2272 	add.w	r2, r6, r2, ror #9

00406210 <.LVL243>:

        MD5STEP(F4, a, b, c, d, md5->buffer[0]  + 0xf4292244,  6);
  406210:	ea62 0301 	orn	r3, r2, r1
  406214:	4073      	eors	r3, r6
  406216:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 4063e0 <.LVL322+0x64>
  40621a:	68c7      	ldr	r7, [r0, #12]
  40621c:	44be      	add	lr, r7
  40621e:	4474      	add	r4, lr

00406220 <.LVL246>:
  406220:	4423      	add	r3, r4
  406222:	eb02 63b3 	add.w	r3, r2, r3, ror #26

00406226 <.LVL248>:
        MD5STEP(F4, d, a, b, c, md5->buffer[7]  + 0x432aff97, 10);
  406226:	ea63 0b06 	orn	fp, r3, r6
  40622a:	ea8b 0b02 	eor.w	fp, fp, r2
  40622e:	4c5d      	ldr	r4, [pc, #372]	; (4063a4 <.LVL322+0x28>)
  406230:	4454      	add	r4, sl
  406232:	4421      	add	r1, r4

00406234 <.LVL251>:
  406234:	448b      	add	fp, r1
  406236:	eb03 5bbb 	add.w	fp, r3, fp, ror #22

0040623a <.LVL253>:
        MD5STEP(F4, c, d, a, b, md5->buffer[14] + 0xab9423a7, 15);
  40623a:	ea6b 0e02 	orn	lr, fp, r2
  40623e:	ea8e 0e03 	eor.w	lr, lr, r3
  406242:	4959      	ldr	r1, [pc, #356]	; (4063a8 <.LVL322+0x2c>)
  406244:	4449      	add	r1, r9
  406246:	440e      	add	r6, r1

00406248 <.LVL256>:
  406248:	44b6      	add	lr, r6
  40624a:	eb0b 4e7e 	add.w	lr, fp, lr, ror #17

0040624e <.LVL258>:
        MD5STEP(F4, b, c, d, a, md5->buffer[5]  + 0xfc93a039, 21);
  40624e:	ea6e 0403 	orn	r4, lr, r3
  406252:	ea84 040b 	eor.w	r4, r4, fp
  406256:	4955      	ldr	r1, [pc, #340]	; (4063ac <.LVL322+0x30>)
  406258:	6a06      	ldr	r6, [r0, #32]
  40625a:	4431      	add	r1, r6
  40625c:	440a      	add	r2, r1

0040625e <.LVL261>:
  40625e:	4414      	add	r4, r2
  406260:	eb0e 24f4 	add.w	r4, lr, r4, ror #11

00406264 <.LVL263>:
        MD5STEP(F4, a, b, c, d, md5->buffer[12] + 0x655b59c3,  6);
  406264:	ea64 060b 	orn	r6, r4, fp
  406268:	ea86 060e 	eor.w	r6, r6, lr
  40626c:	4a50      	ldr	r2, [pc, #320]	; (4063b0 <.LVL322+0x34>)
  40626e:	4442      	add	r2, r8
  406270:	4413      	add	r3, r2

00406272 <.LVL266>:
  406272:	441e      	add	r6, r3
  406274:	eb04 66b6 	add.w	r6, r4, r6, ror #26

00406278 <.LVL268>:
        MD5STEP(F4, d, a, b, c, md5->buffer[3]  + 0x8f0ccc92, 10);
  406278:	ea66 080e 	orn	r8, r6, lr
  40627c:	ea88 0804 	eor.w	r8, r8, r4
  406280:	4b4c      	ldr	r3, [pc, #304]	; (4063b4 <.LVL322+0x38>)
  406282:	6982      	ldr	r2, [r0, #24]
  406284:	4413      	add	r3, r2
  406286:	449b      	add	fp, r3

00406288 <.LVL271>:
  406288:	44d8      	add	r8, fp
  40628a:	eb06 58b8 	add.w	r8, r6, r8, ror #22

0040628e <.LVL273>:
        MD5STEP(F4, c, d, a, b, md5->buffer[10] + 0xffeff47d, 15);
  40628e:	ea68 0204 	orn	r2, r8, r4
  406292:	4072      	eors	r2, r6
  406294:	4948      	ldr	r1, [pc, #288]	; (4063b8 <.LVL322+0x3c>)
  406296:	6b43      	ldr	r3, [r0, #52]	; 0x34
  406298:	4419      	add	r1, r3
  40629a:	448e      	add	lr, r1

0040629c <.LVL276>:
  40629c:	4472      	add	r2, lr
  40629e:	eb08 4272 	add.w	r2, r8, r2, ror #17

004062a2 <.LVL278>:
        MD5STEP(F4, b, c, d, a, md5->buffer[1]  + 0x85845dd1, 21);
  4062a2:	ea62 0306 	orn	r3, r2, r6
  4062a6:	ea83 0308 	eor.w	r3, r3, r8
  4062aa:	4944      	ldr	r1, [pc, #272]	; (4063bc <.LVL322+0x40>)
  4062ac:	6907      	ldr	r7, [r0, #16]
  4062ae:	4439      	add	r1, r7
  4062b0:	440c      	add	r4, r1

004062b2 <.LVL281>:
  4062b2:	4423      	add	r3, r4
  4062b4:	eb02 23f3 	add.w	r3, r2, r3, ror #11

004062b8 <.LVL283>:
        MD5STEP(F4, a, b, c, d, md5->buffer[8]  + 0x6fa87e4f,  6);
  4062b8:	ea63 0e08 	orn	lr, r3, r8
  4062bc:	ea8e 0e02 	eor.w	lr, lr, r2
  4062c0:	493f      	ldr	r1, [pc, #252]	; (4063c0 <.LVL322+0x44>)
  4062c2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  4062c4:	4421      	add	r1, r4
  4062c6:	440e      	add	r6, r1

004062c8 <.LVL286>:
  4062c8:	44b6      	add	lr, r6
  4062ca:	eb03 6ebe 	add.w	lr, r3, lr, ror #26

004062ce <.LVL288>:
        MD5STEP(F4, d, a, b, c, md5->buffer[15] + 0xfe2ce6e0, 10);
  4062ce:	ea6e 0402 	orn	r4, lr, r2
  4062d2:	405c      	eors	r4, r3
  4062d4:	493b      	ldr	r1, [pc, #236]	; (4063c4 <.LVL322+0x48>)
  4062d6:	4461      	add	r1, ip
  4062d8:	4488      	add	r8, r1

004062da <.LVL291>:
  4062da:	4444      	add	r4, r8
  4062dc:	eb0e 54b4 	add.w	r4, lr, r4, ror #22

004062e0 <.LVL293>:
        MD5STEP(F4, c, d, a, b, md5->buffer[6]  + 0xa3014314, 15);
  4062e0:	ea64 0603 	orn	r6, r4, r3
  4062e4:	ea86 060e 	eor.w	r6, r6, lr
  4062e8:	4937      	ldr	r1, [pc, #220]	; (4063c8 <.LVL322+0x4c>)
  4062ea:	6a47      	ldr	r7, [r0, #36]	; 0x24
  4062ec:	4439      	add	r1, r7
  4062ee:	440a      	add	r2, r1

004062f0 <.LVL296>:
  4062f0:	4416      	add	r6, r2
  4062f2:	eb04 4676 	add.w	r6, r4, r6, ror #17

004062f6 <.LVL298>:
        MD5STEP(F4, b, c, d, a, md5->buffer[13] + 0x4e0811a1, 21);
  4062f6:	ea66 0c0e 	orn	ip, r6, lr
  4062fa:	ea8c 0c04 	eor.w	ip, ip, r4
  4062fe:	4933      	ldr	r1, [pc, #204]	; (4063cc <.LVL322+0x50>)
  406300:	6c02      	ldr	r2, [r0, #64]	; 0x40
  406302:	4411      	add	r1, r2
  406304:	440b      	add	r3, r1

00406306 <.LVL301>:
  406306:	449c      	add	ip, r3
  406308:	eb06 2cfc 	add.w	ip, r6, ip, ror #11

0040630c <.LVL303>:
        MD5STEP(F4, a, b, c, d, md5->buffer[4]  + 0xf7537e82,  6);
  40630c:	ea6c 0204 	orn	r2, ip, r4
  406310:	4072      	eors	r2, r6
  406312:	492f      	ldr	r1, [pc, #188]	; (4063d0 <.LVL322+0x54>)
  406314:	69c3      	ldr	r3, [r0, #28]
  406316:	4419      	add	r1, r3
  406318:	448e      	add	lr, r1

0040631a <.LVL306>:
  40631a:	4472      	add	r2, lr
  40631c:	eb0c 62b2 	add.w	r2, ip, r2, ror #26

00406320 <.LVL308>:
        MD5STEP(F4, d, a, b, c, md5->buffer[11] + 0xbd3af235, 10);
  406320:	ea62 0306 	orn	r3, r2, r6
  406324:	ea83 030c 	eor.w	r3, r3, ip
  406328:	492a      	ldr	r1, [pc, #168]	; (4063d4 <.LVL322+0x58>)
  40632a:	6b87      	ldr	r7, [r0, #56]	; 0x38
  40632c:	4439      	add	r1, r7
  40632e:	440c      	add	r4, r1

00406330 <.LVL311>:
  406330:	441c      	add	r4, r3
  406332:	eb02 54b4 	add.w	r4, r2, r4, ror #22

00406336 <.LVL313>:
        MD5STEP(F4, c, d, a, b, md5->buffer[2]  + 0x2ad7d2bb, 15);
  406336:	ea64 030c 	orn	r3, r4, ip
  40633a:	4053      	eors	r3, r2
  40633c:	4926      	ldr	r1, [pc, #152]	; (4063d8 <.LVL322+0x5c>)
  40633e:	6947      	ldr	r7, [r0, #20]
  406340:	4439      	add	r1, r7
  406342:	440e      	add	r6, r1

00406344 <.LVL316>:
  406344:	441e      	add	r6, r3
  406346:	eb04 4676 	add.w	r6, r4, r6, ror #17

0040634a <.LVL318>:
        MD5STEP(F4, b, c, d, a, md5->buffer[9]  + 0xeb86d391, 21);

        /* Add the working vars back into digest state[]  */
        md5->digest[0] += a;
  40634a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40634c:	4413      	add	r3, r2
  40634e:	64c3      	str	r3, [r0, #76]	; 0x4c
        MD5STEP(F4, b, c, d, a, md5->buffer[9]  + 0xeb86d391, 21);
  406350:	ea66 0202 	orn	r2, r6, r2

00406354 <.LVL319>:
  406354:	4062      	eors	r2, r4
  406356:	4921      	ldr	r1, [pc, #132]	; (4063dc <.LVL322+0x60>)
  406358:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40635a:	4419      	add	r1, r3
  40635c:	448c      	add	ip, r1
  40635e:	4494      	add	ip, r2
        md5->digest[1] += b;
  406360:	4435      	add	r5, r6
  406362:	eb05 25fc 	add.w	r5, r5, ip, ror #11
  406366:	6505      	str	r5, [r0, #80]	; 0x50
        md5->digest[2] += c;
  406368:	9b01      	ldr	r3, [sp, #4]
  40636a:	4433      	add	r3, r6
  40636c:	6543      	str	r3, [r0, #84]	; 0x54
        md5->digest[3] += d;
  40636e:	6d83      	ldr	r3, [r0, #88]	; 0x58
  406370:	441c      	add	r4, r3

00406372 <.LVL320>:
  406372:	6584      	str	r4, [r0, #88]	; 0x58

        return 0;
    }
  406374:	2000      	movs	r0, #0

00406376 <.LVL321>:
  406376:	b003      	add	sp, #12

00406378 <.LCFI2>:
  406378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040637c <.LVL322>:
  40637c:	f6bb4b60 	.word	0xf6bb4b60
  406380:	bebfbc70 	.word	0xbebfbc70
  406384:	289b7ec6 	.word	0x289b7ec6
  406388:	eaa127fa 	.word	0xeaa127fa
  40638c:	d4ef3085 	.word	0xd4ef3085
  406390:	04881d05 	.word	0x04881d05
  406394:	d9d4d039 	.word	0xd9d4d039
  406398:	e6db99e5 	.word	0xe6db99e5
  40639c:	1fa27cf8 	.word	0x1fa27cf8
  4063a0:	c4ac5665 	.word	0xc4ac5665
  4063a4:	432aff97 	.word	0x432aff97
  4063a8:	ab9423a7 	.word	0xab9423a7
  4063ac:	fc93a039 	.word	0xfc93a039
  4063b0:	655b59c3 	.word	0x655b59c3
  4063b4:	8f0ccc92 	.word	0x8f0ccc92
  4063b8:	ffeff47d 	.word	0xffeff47d
  4063bc:	85845dd1 	.word	0x85845dd1
  4063c0:	6fa87e4f 	.word	0x6fa87e4f
  4063c4:	fe2ce6e0 	.word	0xfe2ce6e0
  4063c8:	a3014314 	.word	0xa3014314
  4063cc:	4e0811a1 	.word	0x4e0811a1
  4063d0:	f7537e82 	.word	0xf7537e82
  4063d4:	bd3af235 	.word	0xbd3af235
  4063d8:	2ad7d2bb 	.word	0x2ad7d2bb
  4063dc:	eb86d391 	.word	0xeb86d391
  4063e0:	f4292244 	.word	0xf4292244

Disassembly of section .text._malloc_r%59:

004063e4 <_malloc_r>:
  4063e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

004063e8 <.LCFI0>:
  4063e8:	f101 060b 	add.w	r6, r1, #11
  4063ec:	2e16      	cmp	r6, #22
  4063ee:	b083      	sub	sp, #12

004063f0 <.LCFI1>:
  4063f0:	4605      	mov	r5, r0
  4063f2:	f240 809e 	bls.w	406532 <.LVL46>

004063f6 <.LVL1>:
  4063f6:	f036 0607 	bics.w	r6, r6, #7

004063fa <.LVL2>:
  4063fa:	f100 80bd 	bmi.w	406578 <.LCFI3>
  4063fe:	42b1      	cmp	r1, r6
  406400:	f200 80ba 	bhi.w	406578 <.LCFI3>
  406404:	f005 fd32 	bl	40be6c <__malloc_lock>

00406408 <.LVL3>:
  406408:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40640c:	f0c0 828b 	bcc.w	406926 <.LVL171>
  406410:	0a73      	lsrs	r3, r6, #9
  406412:	f000 80b8 	beq.w	406586 <.LCFI5>
  406416:	2b04      	cmp	r3, #4
  406418:	f200 816e 	bhi.w	4066f8 <.LCFI11>
  40641c:	09b3      	lsrs	r3, r6, #6
  40641e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  406422:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  406426:	00c3      	lsls	r3, r0, #3

00406428 <.LVL4>:
  406428:	4fb9      	ldr	r7, [pc, #740]	; (406710 <.LCFI11+0x18>)
  40642a:	443b      	add	r3, r7
  40642c:	f1a3 0108 	sub.w	r1, r3, #8

00406430 <.LVL5>:
  406430:	685c      	ldr	r4, [r3, #4]

00406432 <.LVL6>:
  406432:	42a1      	cmp	r1, r4
  406434:	d106      	bne.n	406444 <.LVL10>
  406436:	e00c      	b.n	406452 <.LVL14>

00406438 <.LVL7>:
  406438:	2a00      	cmp	r2, #0
  40643a:	f280 80aa 	bge.w	406592 <.LVL62>

0040643e <.LVL8>:
  40643e:	68e4      	ldr	r4, [r4, #12]
  406440:	42a1      	cmp	r1, r4
  406442:	d006      	beq.n	406452 <.LVL14>

00406444 <.LVL10>:
  406444:	6863      	ldr	r3, [r4, #4]
  406446:	f023 0303 	bic.w	r3, r3, #3

0040644a <.LVL11>:
  40644a:	1b9a      	subs	r2, r3, r6

0040644c <.LVL12>:
  40644c:	2a0f      	cmp	r2, #15
  40644e:	ddf3      	ble.n	406438 <.LVL7>

00406450 <.LVL13>:
  406450:	4670      	mov	r0, lr

00406452 <.LVL14>:
  406452:	693c      	ldr	r4, [r7, #16]
  406454:	f8df e2d0 	ldr.w	lr, [pc, #720]	; 406728 <.LCFI11+0x30>
  406458:	4574      	cmp	r4, lr
  40645a:	f000 819f 	beq.w	40679c <.LVL115>
  40645e:	6863      	ldr	r3, [r4, #4]
  406460:	f023 0303 	bic.w	r3, r3, #3

00406464 <.LVL16>:
  406464:	1b9a      	subs	r2, r3, r6

00406466 <.LVL17>:
  406466:	2a0f      	cmp	r2, #15
  406468:	f300 8184 	bgt.w	406774 <.LVL110>
  40646c:	2a00      	cmp	r2, #0
  40646e:	f8c7 e014 	str.w	lr, [r7, #20]
  406472:	f8c7 e010 	str.w	lr, [r7, #16]
  406476:	f280 809d 	bge.w	4065b4 <.LCFI7>
  40647a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40647e:	f080 8155 	bcs.w	40672c <.LVL101>
  406482:	08db      	lsrs	r3, r3, #3

00406484 <.LVL18>:
  406484:	f103 0c01 	add.w	ip, r3, #1
  406488:	1099      	asrs	r1, r3, #2
  40648a:	687a      	ldr	r2, [r7, #4]

0040648c <.LVL19>:
  40648c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  406490:	f8c4 8008 	str.w	r8, [r4, #8]
  406494:	2301      	movs	r3, #1

00406496 <.LVL20>:
  406496:	408b      	lsls	r3, r1
  406498:	eb07 01cc 	add.w	r1, r7, ip, lsl #3

0040649c <.LVL21>:
  40649c:	4313      	orrs	r3, r2
  40649e:	3908      	subs	r1, #8

004064a0 <.LVL22>:
  4064a0:	60e1      	str	r1, [r4, #12]
  4064a2:	607b      	str	r3, [r7, #4]

004064a4 <.LVL23>:
  4064a4:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4064a8:	f8c8 400c 	str.w	r4, [r8, #12]

004064ac <.LVL24>:
  4064ac:	1082      	asrs	r2, r0, #2
  4064ae:	2401      	movs	r4, #1

004064b0 <.LVL25>:
  4064b0:	4094      	lsls	r4, r2

004064b2 <.LVL26>:
  4064b2:	429c      	cmp	r4, r3
  4064b4:	f200 808b 	bhi.w	4065ce <.LCFI9>
  4064b8:	421c      	tst	r4, r3
  4064ba:	d106      	bne.n	4064ca <.LVL30>
  4064bc:	f020 0003 	bic.w	r0, r0, #3

004064c0 <.LVL27>:
  4064c0:	0064      	lsls	r4, r4, #1

004064c2 <.LVL28>:
  4064c2:	421c      	tst	r4, r3
  4064c4:	f100 0004 	add.w	r0, r0, #4

004064c8 <.LVL29>:
  4064c8:	d0fa      	beq.n	4064c0 <.LVL27>

004064ca <.LVL30>:
  4064ca:	eb07 09c0 	add.w	r9, r7, r0, lsl #3

004064ce <.LVL31>:
  4064ce:	46cc      	mov	ip, r9
  4064d0:	4680      	mov	r8, r0

004064d2 <.LVL32>:
  4064d2:	f8dc 300c 	ldr.w	r3, [ip, #12]

004064d6 <.LVL33>:
  4064d6:	459c      	cmp	ip, r3
  4064d8:	d107      	bne.n	4064ea <.LVL36>
  4064da:	e161      	b.n	4067a0 <.LVL116>

004064dc <.LVL34>:
  4064dc:	2a00      	cmp	r2, #0
  4064de:	f280 816f 	bge.w	4067c0 <.LVL121>
  4064e2:	68db      	ldr	r3, [r3, #12]
  4064e4:	459c      	cmp	ip, r3
  4064e6:	f000 815b 	beq.w	4067a0 <.LVL116>

004064ea <.LVL36>:
  4064ea:	6859      	ldr	r1, [r3, #4]
  4064ec:	f021 0103 	bic.w	r1, r1, #3

004064f0 <.LVL37>:
  4064f0:	1b8a      	subs	r2, r1, r6

004064f2 <.LVL38>:
  4064f2:	2a0f      	cmp	r2, #15
  4064f4:	ddf2      	ble.n	4064dc <.LVL34>
  4064f6:	f8d3 c00c 	ldr.w	ip, [r3, #12]

004064fa <.LVL39>:
  4064fa:	f8d3 8008 	ldr.w	r8, [r3, #8]

004064fe <.LVL40>:
  4064fe:	9301      	str	r3, [sp, #4]
  406500:	199c      	adds	r4, r3, r6

00406502 <.LVL41>:
  406502:	4628      	mov	r0, r5

00406504 <.LVL42>:
  406504:	f046 0601 	orr.w	r6, r6, #1
  406508:	f042 0501 	orr.w	r5, r2, #1

0040650c <.LVL43>:
  40650c:	605e      	str	r6, [r3, #4]
  40650e:	f8c8 c00c 	str.w	ip, [r8, #12]
  406512:	f8cc 8008 	str.w	r8, [ip, #8]
  406516:	617c      	str	r4, [r7, #20]
  406518:	613c      	str	r4, [r7, #16]
  40651a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40651e:	f8c4 e008 	str.w	lr, [r4, #8]
  406522:	6065      	str	r5, [r4, #4]
  406524:	505a      	str	r2, [r3, r1]
  406526:	f005 fca3 	bl	40be70 <__malloc_unlock>

0040652a <.LVL44>:
  40652a:	9b01      	ldr	r3, [sp, #4]
  40652c:	f103 0408 	add.w	r4, r3, #8

00406530 <.LVL45>:
  406530:	e01e      	b.n	406570 <.LVL58>

00406532 <.LVL46>:
  406532:	2910      	cmp	r1, #16
  406534:	d820      	bhi.n	406578 <.LCFI3>
  406536:	f005 fc99 	bl	40be6c <__malloc_lock>

0040653a <.LVL47>:
  40653a:	2610      	movs	r6, #16

0040653c <.LVL48>:
  40653c:	2318      	movs	r3, #24
  40653e:	2002      	movs	r0, #2

00406540 <.LVL49>:
  406540:	4f73      	ldr	r7, [pc, #460]	; (406710 <.LCFI11+0x18>)
  406542:	443b      	add	r3, r7

00406544 <.LVL50>:
  406544:	f1a3 0208 	sub.w	r2, r3, #8

00406548 <.LVL51>:
  406548:	685c      	ldr	r4, [r3, #4]

0040654a <.LVL52>:
  40654a:	4294      	cmp	r4, r2
  40654c:	f000 8131 	beq.w	4067b2 <.LVL119>

00406550 <.LVL53>:
  406550:	6863      	ldr	r3, [r4, #4]
  406552:	68e1      	ldr	r1, [r4, #12]
  406554:	68a6      	ldr	r6, [r4, #8]
  406556:	f023 0303 	bic.w	r3, r3, #3

0040655a <.LVL54>:
  40655a:	4423      	add	r3, r4

0040655c <.LVL55>:
  40655c:	4628      	mov	r0, r5
  40655e:	685a      	ldr	r2, [r3, #4]
  406560:	60f1      	str	r1, [r6, #12]
  406562:	f042 0201 	orr.w	r2, r2, #1
  406566:	608e      	str	r6, [r1, #8]
  406568:	605a      	str	r2, [r3, #4]

0040656a <.LVL56>:
  40656a:	f005 fc81 	bl	40be70 <__malloc_unlock>

0040656e <.LVL57>:
  40656e:	3408      	adds	r4, #8

00406570 <.LVL58>:
  406570:	4620      	mov	r0, r4
  406572:	b003      	add	sp, #12

00406574 <.LCFI2>:
  406574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406578 <.LCFI3>:
  406578:	2400      	movs	r4, #0
  40657a:	230c      	movs	r3, #12
  40657c:	4620      	mov	r0, r4

0040657e <.LVL60>:
  40657e:	602b      	str	r3, [r5, #0]
  406580:	b003      	add	sp, #12

00406582 <.LCFI4>:
  406582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406586 <.LCFI5>:
  406586:	2040      	movs	r0, #64	; 0x40
  406588:	f44f 7300 	mov.w	r3, #512	; 0x200
  40658c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  406590:	e74a      	b.n	406428 <.LVL4>

00406592 <.LVL62>:
  406592:	4423      	add	r3, r4

00406594 <.LVL63>:
  406594:	68e1      	ldr	r1, [r4, #12]

00406596 <.LVL64>:
  406596:	685a      	ldr	r2, [r3, #4]

00406598 <.LVL65>:
  406598:	68a6      	ldr	r6, [r4, #8]

0040659a <.LVL66>:
  40659a:	f042 0201 	orr.w	r2, r2, #1
  40659e:	60f1      	str	r1, [r6, #12]
  4065a0:	4628      	mov	r0, r5
  4065a2:	608e      	str	r6, [r1, #8]
  4065a4:	605a      	str	r2, [r3, #4]

004065a6 <.LVL67>:
  4065a6:	f005 fc63 	bl	40be70 <__malloc_unlock>

004065aa <.LVL68>:
  4065aa:	3408      	adds	r4, #8

004065ac <.LVL69>:
  4065ac:	4620      	mov	r0, r4
  4065ae:	b003      	add	sp, #12

004065b0 <.LCFI6>:
  4065b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004065b4 <.LCFI7>:
  4065b4:	4423      	add	r3, r4

004065b6 <.LVL71>:
  4065b6:	4628      	mov	r0, r5

004065b8 <.LVL72>:
  4065b8:	685a      	ldr	r2, [r3, #4]

004065ba <.LVL73>:
  4065ba:	f042 0201 	orr.w	r2, r2, #1
  4065be:	605a      	str	r2, [r3, #4]

004065c0 <.LVL74>:
  4065c0:	f005 fc56 	bl	40be70 <__malloc_unlock>

004065c4 <.LVL75>:
  4065c4:	3408      	adds	r4, #8

004065c6 <.LVL76>:
  4065c6:	4620      	mov	r0, r4
  4065c8:	b003      	add	sp, #12

004065ca <.LCFI8>:
  4065ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004065ce <.LCFI9>:
  4065ce:	68bc      	ldr	r4, [r7, #8]

004065d0 <.LVL78>:
  4065d0:	6863      	ldr	r3, [r4, #4]
  4065d2:	f023 0a03 	bic.w	sl, r3, #3
  4065d6:	45b2      	cmp	sl, r6
  4065d8:	d303      	bcc.n	4065e2 <.LBB4>
  4065da:	ebaa 0306 	sub.w	r3, sl, r6
  4065de:	2b0f      	cmp	r3, #15
  4065e0:	dc7a      	bgt.n	4066d8 <.LBE4>

004065e2 <.LBB4>:
  4065e2:	4b4c      	ldr	r3, [pc, #304]	; (406714 <.LCFI11+0x1c>)
  4065e4:	4a4c      	ldr	r2, [pc, #304]	; (406718 <.LCFI11+0x20>)
  4065e6:	9301      	str	r3, [sp, #4]
  4065e8:	6811      	ldr	r1, [r2, #0]
  4065ea:	681a      	ldr	r2, [r3, #0]
  4065ec:	eb06 0801 	add.w	r8, r6, r1
  4065f0:	3201      	adds	r2, #1
  4065f2:	bf16      	itet	ne
  4065f4:	f108 088f 	addne.w	r8, r8, #143	; 0x8f
  4065f8:	f108 0810 	addeq.w	r8, r8, #16
  4065fc:	f028 087f 	bicne.w	r8, r8, #127	; 0x7f
  406600:	4641      	mov	r1, r8
  406602:	4628      	mov	r0, r5
  406604:	f005 f92a 	bl	40b85c <_sbrk_r>

00406608 <.LVL80>:
  406608:	f1b0 3fff 	cmp.w	r0, #4294967295
  40660c:	eb04 0b0a 	add.w	fp, r4, sl

00406610 <.LVL81>:
  406610:	4681      	mov	r9, r0

00406612 <.LVL82>:
  406612:	9b01      	ldr	r3, [sp, #4]
  406614:	f000 80f1 	beq.w	4067fa <.LBB10+0x4>
  406618:	4583      	cmp	fp, r0
  40661a:	f200 80ec 	bhi.w	4067f6 <.LBB10>
  40661e:	4a3f      	ldr	r2, [pc, #252]	; (40671c <.LCFI11+0x24>)
  406620:	6811      	ldr	r1, [r2, #0]
  406622:	4441      	add	r1, r8
  406624:	6011      	str	r1, [r2, #0]
  406626:	f000 8147 	beq.w	4068b8 <.LBB12+0xa>

0040662a <.LVL83>:
  40662a:	6818      	ldr	r0, [r3, #0]

0040662c <.LVL84>:
  40662c:	9201      	str	r2, [sp, #4]
  40662e:	3001      	adds	r0, #1
  406630:	bf1b      	ittet	ne
  406632:	eba9 0b0b 	subne.w	fp, r9, fp

00406636 <.LVL85>:
  406636:	4459      	addne	r1, fp
  406638:	f8c3 9000 	streq.w	r9, [r3]
  40663c:	6011      	strne	r1, [r2, #0]
  40663e:	f019 0107 	ands.w	r1, r9, #7

00406642 <.LVL86>:
  406642:	bf1c      	itt	ne
  406644:	f1c1 0308 	rsbne	r3, r1, #8
  406648:	4499      	addne	r9, r3

0040664a <.LVL87>:
  40664a:	eb09 0308 	add.w	r3, r9, r8
  40664e:	bf14      	ite	ne
  406650:	f1c1 0188 	rsbne	r1, r1, #136	; 0x88

00406654 <.LVL88>:
  406654:	2180      	moveq	r1, #128	; 0x80
  406656:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  40665a:	eba1 0803 	sub.w	r8, r1, r3

0040665e <.LVL89>:
  40665e:	4641      	mov	r1, r8
  406660:	4628      	mov	r0, r5
  406662:	f005 f8fb 	bl	40b85c <_sbrk_r>

00406666 <.LVL90>:
  406666:	1c43      	adds	r3, r0, #1
  406668:	9a01      	ldr	r2, [sp, #4]
  40666a:	f000 813f 	beq.w	4068ec <.LVL167>
  40666e:	eba0 0309 	sub.w	r3, r0, r9
  406672:	4443      	add	r3, r8
  406674:	f043 0301 	orr.w	r3, r3, #1

00406678 <.LVL91>:
  406678:	6811      	ldr	r1, [r2, #0]
  40667a:	f8c7 9008 	str.w	r9, [r7, #8]
  40667e:	4441      	add	r1, r8
  406680:	42bc      	cmp	r4, r7
  406682:	f8c9 3004 	str.w	r3, [r9, #4]
  406686:	6011      	str	r1, [r2, #0]
  406688:	d017      	beq.n	4066ba <.LVL94>
  40668a:	f1ba 0f0f 	cmp.w	sl, #15
  40668e:	f240 80ee 	bls.w	40686e <.LBB11>
  406692:	6860      	ldr	r0, [r4, #4]
  406694:	f1aa 030c 	sub.w	r3, sl, #12
  406698:	f023 0307 	bic.w	r3, r3, #7

0040669c <.LVL93>:
  40669c:	eb04 0e03 	add.w	lr, r4, r3
  4066a0:	f000 0001 	and.w	r0, r0, #1
  4066a4:	f04f 0c05 	mov.w	ip, #5
  4066a8:	4318      	orrs	r0, r3
  4066aa:	2b0f      	cmp	r3, #15
  4066ac:	6060      	str	r0, [r4, #4]
  4066ae:	f8ce c004 	str.w	ip, [lr, #4]
  4066b2:	f8ce c008 	str.w	ip, [lr, #8]
  4066b6:	f200 8110 	bhi.w	4068da <.LBB13>

004066ba <.LVL94>:
  4066ba:	4b19      	ldr	r3, [pc, #100]	; (406720 <.LCFI11+0x28>)
  4066bc:	68bc      	ldr	r4, [r7, #8]

004066be <.LVL95>:
  4066be:	681a      	ldr	r2, [r3, #0]
  4066c0:	4291      	cmp	r1, r2
  4066c2:	bf88      	it	hi
  4066c4:	6019      	strhi	r1, [r3, #0]
  4066c6:	4b17      	ldr	r3, [pc, #92]	; (406724 <.LCFI11+0x2c>)
  4066c8:	681a      	ldr	r2, [r3, #0]
  4066ca:	4291      	cmp	r1, r2
  4066cc:	6862      	ldr	r2, [r4, #4]
  4066ce:	bf88      	it	hi
  4066d0:	6019      	strhi	r1, [r3, #0]
  4066d2:	f022 0203 	bic.w	r2, r2, #3
  4066d6:	e094      	b.n	406802 <.LBE10>

004066d8 <.LBE4>:
  4066d8:	19a2      	adds	r2, r4, r6
  4066da:	f043 0301 	orr.w	r3, r3, #1

004066de <.LVL97>:
  4066de:	f046 0601 	orr.w	r6, r6, #1
  4066e2:	6066      	str	r6, [r4, #4]
  4066e4:	4628      	mov	r0, r5
  4066e6:	60ba      	str	r2, [r7, #8]

004066e8 <.LVL98>:
  4066e8:	6053      	str	r3, [r2, #4]
  4066ea:	f005 fbc1 	bl	40be70 <__malloc_unlock>

004066ee <.LVL99>:
  4066ee:	3408      	adds	r4, #8
  4066f0:	4620      	mov	r0, r4
  4066f2:	b003      	add	sp, #12

004066f4 <.LCFI10>:
  4066f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004066f8 <.LCFI11>:
  4066f8:	2b14      	cmp	r3, #20
  4066fa:	d970      	bls.n	4067de <.LVL130>
  4066fc:	2b54      	cmp	r3, #84	; 0x54
  4066fe:	f200 80ac 	bhi.w	40685a <.LVL150>
  406702:	0b33      	lsrs	r3, r6, #12
  406704:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  406708:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40670c:	00c3      	lsls	r3, r0, #3
  40670e:	e68b      	b.n	406428 <.LVL4>
  406710:	204170b0 	.word	0x204170b0
  406714:	20417dc0 	.word	0x20417dc0
  406718:	20417dbc 	.word	0x20417dbc
  40671c:	20417c38 	.word	0x20417c38
  406720:	20417db4 	.word	0x20417db4
  406724:	20417db8 	.word	0x20417db8
  406728:	204170b8 	.word	0x204170b8

0040672c <.LVL101>:
  40672c:	0a5a      	lsrs	r2, r3, #9

0040672e <.LVL102>:
  40672e:	2a04      	cmp	r2, #4
  406730:	d95b      	bls.n	4067ea <.LVL131>
  406732:	2a14      	cmp	r2, #20
  406734:	f200 80b3 	bhi.w	40689e <.LVL159>
  406738:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40673c:	00c9      	lsls	r1, r1, #3
  40673e:	325b      	adds	r2, #91	; 0x5b

00406740 <.LVL103>:
  406740:	eb07 0c01 	add.w	ip, r7, r1
  406744:	5879      	ldr	r1, [r7, r1]
  406746:	f1ac 0c08 	sub.w	ip, ip, #8

0040674a <.LVL104>:
  40674a:	458c      	cmp	ip, r1
  40674c:	f000 8093 	beq.w	406876 <.LBE11>

00406750 <.LVL105>:
  406750:	684a      	ldr	r2, [r1, #4]
  406752:	f022 0203 	bic.w	r2, r2, #3
  406756:	4293      	cmp	r3, r2
  406758:	d27d      	bcs.n	406856 <.LVL148>
  40675a:	6889      	ldr	r1, [r1, #8]
  40675c:	458c      	cmp	ip, r1
  40675e:	d1f7      	bne.n	406750 <.LVL105>

00406760 <.LVL107>:
  406760:	f8dc 200c 	ldr.w	r2, [ip, #12]

00406764 <.LVL108>:
  406764:	687b      	ldr	r3, [r7, #4]

00406766 <.LVL109>:
  406766:	60e2      	str	r2, [r4, #12]
  406768:	f8c4 c008 	str.w	ip, [r4, #8]
  40676c:	6094      	str	r4, [r2, #8]
  40676e:	f8cc 400c 	str.w	r4, [ip, #12]
  406772:	e69b      	b.n	4064ac <.LVL24>

00406774 <.LVL110>:
  406774:	19a1      	adds	r1, r4, r6

00406776 <.LVL111>:
  406776:	f046 0c01 	orr.w	ip, r6, #1
  40677a:	f042 0601 	orr.w	r6, r2, #1
  40677e:	f8c4 c004 	str.w	ip, [r4, #4]
  406782:	4628      	mov	r0, r5

00406784 <.LVL112>:
  406784:	6179      	str	r1, [r7, #20]
  406786:	6139      	str	r1, [r7, #16]
  406788:	f8c1 e00c 	str.w	lr, [r1, #12]
  40678c:	f8c1 e008 	str.w	lr, [r1, #8]
  406790:	604e      	str	r6, [r1, #4]
  406792:	50e2      	str	r2, [r4, r3]
  406794:	f005 fb6c 	bl	40be70 <__malloc_unlock>

00406798 <.LVL113>:
  406798:	3408      	adds	r4, #8

0040679a <.LVL114>:
  40679a:	e6e9      	b.n	406570 <.LVL58>

0040679c <.LVL115>:
  40679c:	687b      	ldr	r3, [r7, #4]
  40679e:	e685      	b.n	4064ac <.LVL24>

004067a0 <.LVL116>:
  4067a0:	f108 0801 	add.w	r8, r8, #1

004067a4 <.LVL117>:
  4067a4:	f018 0f03 	tst.w	r8, #3
  4067a8:	f10c 0c08 	add.w	ip, ip, #8

004067ac <.LVL118>:
  4067ac:	f47f ae91 	bne.w	4064d2 <.LVL32>
  4067b0:	e037      	b.n	406822 <.LVL140>

004067b2 <.LVL119>:
  4067b2:	68dc      	ldr	r4, [r3, #12]
  4067b4:	42a3      	cmp	r3, r4
  4067b6:	bf08      	it	eq
  4067b8:	3002      	addeq	r0, #2
  4067ba:	f43f ae4a 	beq.w	406452 <.LVL14>
  4067be:	e6c7      	b.n	406550 <.LVL53>

004067c0 <.LVL121>:
  4067c0:	4419      	add	r1, r3

004067c2 <.LVL122>:
  4067c2:	461c      	mov	r4, r3

004067c4 <.LVL123>:
  4067c4:	684a      	ldr	r2, [r1, #4]

004067c6 <.LVL124>:
  4067c6:	68db      	ldr	r3, [r3, #12]

004067c8 <.LVL125>:
  4067c8:	f854 6f08 	ldr.w	r6, [r4, #8]!

004067cc <.LVL126>:
  4067cc:	f042 0201 	orr.w	r2, r2, #1
  4067d0:	604a      	str	r2, [r1, #4]

004067d2 <.LVL127>:
  4067d2:	4628      	mov	r0, r5

004067d4 <.LVL128>:
  4067d4:	60f3      	str	r3, [r6, #12]
  4067d6:	609e      	str	r6, [r3, #8]
  4067d8:	f005 fb4a 	bl	40be70 <__malloc_unlock>

004067dc <.LVL129>:
  4067dc:	e6c8      	b.n	406570 <.LVL58>

004067de <.LVL130>:
  4067de:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4067e2:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4067e6:	00c3      	lsls	r3, r0, #3
  4067e8:	e61e      	b.n	406428 <.LVL4>

004067ea <.LVL131>:
  4067ea:	099a      	lsrs	r2, r3, #6
  4067ec:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4067f0:	00c9      	lsls	r1, r1, #3
  4067f2:	3238      	adds	r2, #56	; 0x38
  4067f4:	e7a4      	b.n	406740 <.LVL103>

004067f6 <.LBB10>:
  4067f6:	42bc      	cmp	r4, r7
  4067f8:	d059      	beq.n	4068ae <.LBB12>
  4067fa:	68bc      	ldr	r4, [r7, #8]

004067fc <.LVL133>:
  4067fc:	6862      	ldr	r2, [r4, #4]
  4067fe:	f022 0203 	bic.w	r2, r2, #3

00406802 <.LBE10>:
  406802:	4296      	cmp	r6, r2
  406804:	eba2 0306 	sub.w	r3, r2, r6

00406808 <.LVL135>:
  406808:	d802      	bhi.n	406810 <.LVL136>
  40680a:	2b0f      	cmp	r3, #15
  40680c:	f73f af64 	bgt.w	4066d8 <.LBE4>

00406810 <.LVL136>:
  406810:	4628      	mov	r0, r5
  406812:	f005 fb2d 	bl	40be70 <__malloc_unlock>

00406816 <.LVL137>:
  406816:	2400      	movs	r4, #0
  406818:	e6aa      	b.n	406570 <.LVL58>

0040681a <.LVL138>:
  40681a:	f859 3908 	ldr.w	r3, [r9], #-8

0040681e <.LVL139>:
  40681e:	4599      	cmp	r9, r3
  406820:	d17f      	bne.n	406922 <.LVL170>

00406822 <.LVL140>:
  406822:	f010 0f03 	tst.w	r0, #3
  406826:	f100 30ff 	add.w	r0, r0, #4294967295
  40682a:	d1f6      	bne.n	40681a <.LVL138>
  40682c:	687b      	ldr	r3, [r7, #4]
  40682e:	ea23 0304 	bic.w	r3, r3, r4
  406832:	607b      	str	r3, [r7, #4]

00406834 <.LVL142>:
  406834:	0064      	lsls	r4, r4, #1
  406836:	429c      	cmp	r4, r3
  406838:	f63f aec9 	bhi.w	4065ce <.LCFI9>
  40683c:	2c00      	cmp	r4, #0
  40683e:	f43f aec6 	beq.w	4065ce <.LCFI9>
  406842:	421c      	tst	r4, r3
  406844:	4640      	mov	r0, r8

00406846 <.LVL144>:
  406846:	f47f ae40 	bne.w	4064ca <.LVL30>

0040684a <.LVL145>:
  40684a:	0064      	lsls	r4, r4, #1

0040684c <.LVL146>:
  40684c:	421c      	tst	r4, r3
  40684e:	f100 0004 	add.w	r0, r0, #4

00406852 <.LVL147>:
  406852:	d0fa      	beq.n	40684a <.LVL145>
  406854:	e639      	b.n	4064ca <.LVL30>

00406856 <.LVL148>:
  406856:	468c      	mov	ip, r1

00406858 <.LVL149>:
  406858:	e782      	b.n	406760 <.LVL107>

0040685a <.LVL150>:
  40685a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40685e:	d813      	bhi.n	406888 <.LVL158>
  406860:	0bf3      	lsrs	r3, r6, #15
  406862:	f103 0078 	add.w	r0, r3, #120	; 0x78
  406866:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40686a:	00c3      	lsls	r3, r0, #3
  40686c:	e5dc      	b.n	406428 <.LVL4>

0040686e <.LBB11>:
  40686e:	2301      	movs	r3, #1
  406870:	f8c9 3004 	str.w	r3, [r9, #4]

00406874 <.LVL152>:
  406874:	e7cc      	b.n	406810 <.LVL136>

00406876 <.LBE11>:
  406876:	687b      	ldr	r3, [r7, #4]

00406878 <.LVL154>:
  406878:	1092      	asrs	r2, r2, #2

0040687a <.LVL155>:
  40687a:	2101      	movs	r1, #1

0040687c <.LVL156>:
  40687c:	fa01 f202 	lsl.w	r2, r1, r2
  406880:	4313      	orrs	r3, r2
  406882:	607b      	str	r3, [r7, #4]

00406884 <.LVL157>:
  406884:	4662      	mov	r2, ip
  406886:	e76e      	b.n	406766 <.LVL109>

00406888 <.LVL158>:
  406888:	f240 5254 	movw	r2, #1364	; 0x554
  40688c:	4293      	cmp	r3, r2
  40688e:	d81e      	bhi.n	4068ce <.LBE12>
  406890:	0cb3      	lsrs	r3, r6, #18
  406892:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  406896:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40689a:	00c3      	lsls	r3, r0, #3
  40689c:	e5c4      	b.n	406428 <.LVL4>

0040689e <.LVL159>:
  40689e:	2a54      	cmp	r2, #84	; 0x54
  4068a0:	d828      	bhi.n	4068f4 <.LBE13>
  4068a2:	0b1a      	lsrs	r2, r3, #12
  4068a4:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4068a8:	00c9      	lsls	r1, r1, #3
  4068aa:	326e      	adds	r2, #110	; 0x6e
  4068ac:	e748      	b.n	406740 <.LVL103>

004068ae <.LBB12>:
  4068ae:	4a20      	ldr	r2, [pc, #128]	; (406930 <.LVL171+0xa>)
  4068b0:	6811      	ldr	r1, [r2, #0]
  4068b2:	4441      	add	r1, r8
  4068b4:	6011      	str	r1, [r2, #0]
  4068b6:	e6b8      	b.n	40662a <.LVL83>
  4068b8:	f01b 0f7f 	tst.w	fp, #127	; 0x7f
  4068bc:	f47f aeb5 	bne.w	40662a <.LVL83>

004068c0 <.LVL161>:
  4068c0:	eb0a 0308 	add.w	r3, sl, r8

004068c4 <.LVL162>:
  4068c4:	68ba      	ldr	r2, [r7, #8]
  4068c6:	f043 0301 	orr.w	r3, r3, #1

004068ca <.LVL163>:
  4068ca:	6053      	str	r3, [r2, #4]
  4068cc:	e6f5      	b.n	4066ba <.LVL94>

004068ce <.LBE12>:
  4068ce:	207f      	movs	r0, #127	; 0x7f
  4068d0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4068d4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4068d8:	e5a6      	b.n	406428 <.LVL4>

004068da <.LBB13>:
  4068da:	f104 0108 	add.w	r1, r4, #8
  4068de:	4628      	mov	r0, r5
  4068e0:	9201      	str	r2, [sp, #4]
  4068e2:	f001 f91f 	bl	407b24 <.LFE4>

004068e6 <.LVL166>:
  4068e6:	9a01      	ldr	r2, [sp, #4]
  4068e8:	6811      	ldr	r1, [r2, #0]
  4068ea:	e6e6      	b.n	4066ba <.LVL94>

004068ec <.LVL167>:
  4068ec:	2301      	movs	r3, #1

004068ee <.LVL168>:
  4068ee:	f04f 0800 	mov.w	r8, #0
  4068f2:	e6c1      	b.n	406678 <.LVL91>

004068f4 <.LBE13>:
  4068f4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4068f8:	d805      	bhi.n	406906 <.LBE13+0x12>
  4068fa:	0bda      	lsrs	r2, r3, #15
  4068fc:	f102 0178 	add.w	r1, r2, #120	; 0x78
  406900:	00c9      	lsls	r1, r1, #3
  406902:	3277      	adds	r2, #119	; 0x77
  406904:	e71c      	b.n	406740 <.LVL103>
  406906:	f240 5154 	movw	r1, #1364	; 0x554
  40690a:	428a      	cmp	r2, r1
  40690c:	d805      	bhi.n	40691a <.LBE13+0x26>
  40690e:	0c9a      	lsrs	r2, r3, #18
  406910:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  406914:	00c9      	lsls	r1, r1, #3
  406916:	327c      	adds	r2, #124	; 0x7c
  406918:	e712      	b.n	406740 <.LVL103>
  40691a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40691e:	227e      	movs	r2, #126	; 0x7e
  406920:	e70e      	b.n	406740 <.LVL103>

00406922 <.LVL170>:
  406922:	687b      	ldr	r3, [r7, #4]
  406924:	e786      	b.n	406834 <.LVL142>

00406926 <.LVL171>:
  406926:	08f0      	lsrs	r0, r6, #3
  406928:	f106 0308 	add.w	r3, r6, #8
  40692c:	e608      	b.n	406540 <.LVL49>
  40692e:	bf00      	nop
  406930:	20417c38 	.word	0x20417c38

Disassembly of section .text._realloc_r%60:

00406934 <_realloc_r>:
  406934:	2900      	cmp	r1, #0
  406936:	f000 8095 	beq.w	406a64 <.LCFI6>
  40693a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0040693e <.LCFI0>:
  40693e:	460d      	mov	r5, r1
  406940:	4616      	mov	r6, r2
  406942:	b083      	sub	sp, #12

00406944 <.LCFI1>:
  406944:	4680      	mov	r8, r0
  406946:	f106 070b 	add.w	r7, r6, #11
  40694a:	f005 fa8f 	bl	40be6c <__malloc_lock>

0040694e <.LVL1>:
  40694e:	f855 ec04 	ldr.w	lr, [r5, #-4]
  406952:	2f16      	cmp	r7, #22
  406954:	f02e 0403 	bic.w	r4, lr, #3
  406958:	f1a5 0908 	sub.w	r9, r5, #8

0040695c <.LVL2>:
  40695c:	d83c      	bhi.n	4069d8 <.LVL18>
  40695e:	2210      	movs	r2, #16
  406960:	4617      	mov	r7, r2

00406962 <.LVL3>:
  406962:	42be      	cmp	r6, r7
  406964:	d83d      	bhi.n	4069e2 <.LVL19+0x6>
  406966:	4294      	cmp	r4, r2
  406968:	da43      	bge.n	4069f2 <.LCFI3>
  40696a:	4bc4      	ldr	r3, [pc, #784]	; (406c7c <.LVL142+0x2>)
  40696c:	6899      	ldr	r1, [r3, #8]
  40696e:	eb09 0004 	add.w	r0, r9, r4

00406972 <.LVL4>:
  406972:	4288      	cmp	r0, r1
  406974:	f000 80b4 	beq.w	406ae0 <.LVL65>
  406978:	6843      	ldr	r3, [r0, #4]
  40697a:	f023 0101 	bic.w	r1, r3, #1
  40697e:	4401      	add	r1, r0
  406980:	6849      	ldr	r1, [r1, #4]
  406982:	07c9      	lsls	r1, r1, #31
  406984:	d54c      	bpl.n	406a20 <.LCFI5>

00406986 <.LVL5>:
  406986:	f01e 0f01 	tst.w	lr, #1
  40698a:	f000 809b 	beq.w	406ac4 <.LBE12>

0040698e <.LVL6>:
  40698e:	4631      	mov	r1, r6
  406990:	4640      	mov	r0, r8
  406992:	f7ff fd27 	bl	4063e4 <.LFE14>

00406996 <.LVL7>:
  406996:	4606      	mov	r6, r0

00406998 <.LVL8>:
  406998:	2800      	cmp	r0, #0
  40699a:	d03a      	beq.n	406a12 <.LVL26>

0040699c <.LVL9>:
  40699c:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4069a0:	f023 0301 	bic.w	r3, r3, #1
  4069a4:	444b      	add	r3, r9
  4069a6:	f1a0 0208 	sub.w	r2, r0, #8

004069aa <.LVL10>:
  4069aa:	429a      	cmp	r2, r3
  4069ac:	f000 8121 	beq.w	406bf2 <.LBE24>

004069b0 <.LBB2>:
  4069b0:	1f22      	subs	r2, r4, #4

004069b2 <.LVL11>:
  4069b2:	2a24      	cmp	r2, #36	; 0x24
  4069b4:	f200 8107 	bhi.w	406bc6 <.LBB21>

004069b8 <.LBB3>:
  4069b8:	2a13      	cmp	r2, #19
  4069ba:	f200 80db 	bhi.w	406b74 <.LBB18>
  4069be:	4603      	mov	r3, r0
  4069c0:	462a      	mov	r2, r5

004069c2 <.LVL13>:
  4069c2:	6811      	ldr	r1, [r2, #0]
  4069c4:	6019      	str	r1, [r3, #0]

004069c6 <.LVL14>:
  4069c6:	6851      	ldr	r1, [r2, #4]
  4069c8:	6059      	str	r1, [r3, #4]
  4069ca:	6892      	ldr	r2, [r2, #8]

004069cc <.LVL15>:
  4069cc:	609a      	str	r2, [r3, #8]

004069ce <.LBE2>:
  4069ce:	4629      	mov	r1, r5
  4069d0:	4640      	mov	r0, r8
  4069d2:	f001 f8a7 	bl	407b24 <.LFE4>

004069d6 <.LVL17>:
  4069d6:	e01c      	b.n	406a12 <.LVL26>

004069d8 <.LVL18>:
  4069d8:	f027 0707 	bic.w	r7, r7, #7

004069dc <.LVL19>:
  4069dc:	2f00      	cmp	r7, #0
  4069de:	463a      	mov	r2, r7
  4069e0:	dabf      	bge.n	406962 <.LVL3>
  4069e2:	2600      	movs	r6, #0

004069e4 <.LVL20>:
  4069e4:	230c      	movs	r3, #12
  4069e6:	4630      	mov	r0, r6
  4069e8:	f8c8 3000 	str.w	r3, [r8]
  4069ec:	b003      	add	sp, #12

004069ee <.LCFI2>:
  4069ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004069f2 <.LCFI3>:
  4069f2:	462e      	mov	r6, r5

004069f4 <.L11>:
  4069f4:	1be3      	subs	r3, r4, r7

004069f6 <.LVL23>:
  4069f6:	2b0f      	cmp	r3, #15
  4069f8:	d81e      	bhi.n	406a38 <.LVL35>
  4069fa:	f8d9 3004 	ldr.w	r3, [r9, #4]

004069fe <.LVL24>:
  4069fe:	f003 0301 	and.w	r3, r3, #1
  406a02:	4323      	orrs	r3, r4
  406a04:	444c      	add	r4, r9

00406a06 <.LVL25>:
  406a06:	f8c9 3004 	str.w	r3, [r9, #4]
  406a0a:	6863      	ldr	r3, [r4, #4]
  406a0c:	f043 0301 	orr.w	r3, r3, #1
  406a10:	6063      	str	r3, [r4, #4]

00406a12 <.LVL26>:
  406a12:	4640      	mov	r0, r8
  406a14:	f005 fa2c 	bl	40be70 <__malloc_unlock>

00406a18 <.LVL27>:
  406a18:	4630      	mov	r0, r6
  406a1a:	b003      	add	sp, #12

00406a1c <.LCFI4>:
  406a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406a20 <.LCFI5>:
  406a20:	f023 0303 	bic.w	r3, r3, #3

00406a24 <.LVL29>:
  406a24:	18e1      	adds	r1, r4, r3
  406a26:	4291      	cmp	r1, r2
  406a28:	db1f      	blt.n	406a6a <.LCFI7>
  406a2a:	68c3      	ldr	r3, [r0, #12]

00406a2c <.LVL30>:
  406a2c:	6882      	ldr	r2, [r0, #8]

00406a2e <.LVL31>:
  406a2e:	462e      	mov	r6, r5

00406a30 <.LVL32>:
  406a30:	60d3      	str	r3, [r2, #12]
  406a32:	460c      	mov	r4, r1

00406a34 <.LVL33>:
  406a34:	609a      	str	r2, [r3, #8]

00406a36 <.LVL34>:
  406a36:	e7dd      	b.n	4069f4 <.L11>

00406a38 <.LVL35>:
  406a38:	f8d9 2004 	ldr.w	r2, [r9, #4]
  406a3c:	eb09 0107 	add.w	r1, r9, r7

00406a40 <.LVL36>:
  406a40:	f002 0201 	and.w	r2, r2, #1
  406a44:	444c      	add	r4, r9

00406a46 <.LVL37>:
  406a46:	f043 0301 	orr.w	r3, r3, #1

00406a4a <.LVL38>:
  406a4a:	4317      	orrs	r7, r2

00406a4c <.LVL39>:
  406a4c:	f8c9 7004 	str.w	r7, [r9, #4]
  406a50:	604b      	str	r3, [r1, #4]
  406a52:	6863      	ldr	r3, [r4, #4]
  406a54:	f043 0301 	orr.w	r3, r3, #1
  406a58:	3108      	adds	r1, #8

00406a5a <.LVL40>:
  406a5a:	6063      	str	r3, [r4, #4]
  406a5c:	4640      	mov	r0, r8
  406a5e:	f001 f861 	bl	407b24 <.LFE4>

00406a62 <.LVL41>:
  406a62:	e7d6      	b.n	406a12 <.LVL26>

00406a64 <.LCFI6>:
  406a64:	4611      	mov	r1, r2

00406a66 <.LVL43>:
  406a66:	f7ff bcbd 	b.w	4063e4 <.LFE14>

00406a6a <.LCFI7>:
  406a6a:	f01e 0f01 	tst.w	lr, #1
  406a6e:	d18e      	bne.n	40698e <.LVL6>
  406a70:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406a74:	eba9 0a01 	sub.w	sl, r9, r1

00406a78 <.LVL45>:
  406a78:	f8da 1004 	ldr.w	r1, [sl, #4]
  406a7c:	f021 0103 	bic.w	r1, r1, #3

00406a80 <.LVL46>:
  406a80:	440b      	add	r3, r1

00406a82 <.LVL47>:
  406a82:	4423      	add	r3, r4
  406a84:	4293      	cmp	r3, r2
  406a86:	db25      	blt.n	406ad4 <.LVL63>
  406a88:	68c2      	ldr	r2, [r0, #12]

00406a8a <.LVL48>:
  406a8a:	6881      	ldr	r1, [r0, #8]

00406a8c <.LVL49>:
  406a8c:	4656      	mov	r6, sl

00406a8e <.LVL50>:
  406a8e:	60ca      	str	r2, [r1, #12]
  406a90:	6091      	str	r1, [r2, #8]

00406a92 <.LVL51>:
  406a92:	f8da 100c 	ldr.w	r1, [sl, #12]

00406a96 <.LVL52>:
  406a96:	f856 0f08 	ldr.w	r0, [r6, #8]!

00406a9a <.LBB7>:
  406a9a:	1f22      	subs	r2, r4, #4
  406a9c:	2a24      	cmp	r2, #36	; 0x24

00406a9e <.LBE7>:
  406a9e:	60c1      	str	r1, [r0, #12]
  406aa0:	6088      	str	r0, [r1, #8]

00406aa2 <.LBB12>:
  406aa2:	f200 8094 	bhi.w	406bce <.LBB22>

00406aa6 <.LBB8>:
  406aa6:	2a13      	cmp	r2, #19
  406aa8:	d96f      	bls.n	406b8a <.LBB19>

00406aaa <.LVL56>:
  406aaa:	6829      	ldr	r1, [r5, #0]

00406aac <.LVL57>:
  406aac:	f8ca 1008 	str.w	r1, [sl, #8]

00406ab0 <.LVL58>:
  406ab0:	6869      	ldr	r1, [r5, #4]
  406ab2:	f8ca 100c 	str.w	r1, [sl, #12]
  406ab6:	2a1b      	cmp	r2, #27
  406ab8:	f200 80a2 	bhi.w	406c00 <.LBB10>
  406abc:	3508      	adds	r5, #8

00406abe <.LVL59>:
  406abe:	f10a 0210 	add.w	r2, sl, #16

00406ac2 <.LVL60>:
  406ac2:	e063      	b.n	406b8c <.LVL92>

00406ac4 <.LBE12>:
  406ac4:	f855 3c08 	ldr.w	r3, [r5, #-8]
  406ac8:	eba9 0a03 	sub.w	sl, r9, r3

00406acc <.LVL62>:
  406acc:	f8da 1004 	ldr.w	r1, [sl, #4]
  406ad0:	f021 0103 	bic.w	r1, r1, #3

00406ad4 <.LVL63>:
  406ad4:	1863      	adds	r3, r4, r1
  406ad6:	4293      	cmp	r3, r2
  406ad8:	f6ff af59 	blt.w	40698e <.LVL6>
  406adc:	4656      	mov	r6, sl

00406ade <.LVL64>:
  406ade:	e7d8      	b.n	406a92 <.LVL51>

00406ae0 <.LVL65>:
  406ae0:	6841      	ldr	r1, [r0, #4]
  406ae2:	f021 0b03 	bic.w	fp, r1, #3

00406ae6 <.LVL66>:
  406ae6:	44a3      	add	fp, r4

00406ae8 <.LVL67>:
  406ae8:	f107 0010 	add.w	r0, r7, #16

00406aec <.LVL68>:
  406aec:	4583      	cmp	fp, r0
  406aee:	da56      	bge.n	406b9e <.LBE20>

00406af0 <.LVL69>:
  406af0:	f01e 0f01 	tst.w	lr, #1
  406af4:	f47f af4b 	bne.w	40698e <.LVL6>
  406af8:	f855 1c08 	ldr.w	r1, [r5, #-8]

00406afc <.LVL70>:
  406afc:	eba9 0a01 	sub.w	sl, r9, r1

00406b00 <.LVL71>:
  406b00:	f8da 1004 	ldr.w	r1, [sl, #4]
  406b04:	f021 0103 	bic.w	r1, r1, #3

00406b08 <.LVL72>:
  406b08:	448b      	add	fp, r1
  406b0a:	4558      	cmp	r0, fp
  406b0c:	dce2      	bgt.n	406ad4 <.LVL63>
  406b0e:	4656      	mov	r6, sl

00406b10 <.LVL73>:
  406b10:	f8da 100c 	ldr.w	r1, [sl, #12]

00406b14 <.LVL74>:
  406b14:	f856 0f08 	ldr.w	r0, [r6, #8]!

00406b18 <.LBB13>:
  406b18:	1f22      	subs	r2, r4, #4
  406b1a:	2a24      	cmp	r2, #36	; 0x24

00406b1c <.LBE13>:
  406b1c:	60c1      	str	r1, [r0, #12]
  406b1e:	6088      	str	r0, [r1, #8]

00406b20 <.LBB17>:
  406b20:	f200 808f 	bhi.w	406c42 <.LBE15>

00406b24 <.LBB14>:
  406b24:	2a13      	cmp	r2, #19
  406b26:	f240 808a 	bls.w	406c3e <.LBB15>

00406b2a <.LVL78>:
  406b2a:	6829      	ldr	r1, [r5, #0]

00406b2c <.LVL79>:
  406b2c:	f8ca 1008 	str.w	r1, [sl, #8]

00406b30 <.LVL80>:
  406b30:	6869      	ldr	r1, [r5, #4]
  406b32:	f8ca 100c 	str.w	r1, [sl, #12]
  406b36:	2a1b      	cmp	r2, #27
  406b38:	f200 808a 	bhi.w	406c50 <.LBB16>
  406b3c:	3508      	adds	r5, #8

00406b3e <.LVL81>:
  406b3e:	f10a 0210 	add.w	r2, sl, #16

00406b42 <.LVL82>:
  406b42:	6829      	ldr	r1, [r5, #0]
  406b44:	6011      	str	r1, [r2, #0]

00406b46 <.LVL83>:
  406b46:	6869      	ldr	r1, [r5, #4]
  406b48:	6051      	str	r1, [r2, #4]
  406b4a:	68a9      	ldr	r1, [r5, #8]
  406b4c:	6091      	str	r1, [r2, #8]

00406b4e <.LBE14>:
  406b4e:	eb0a 0107 	add.w	r1, sl, r7
  406b52:	ebab 0207 	sub.w	r2, fp, r7
  406b56:	f042 0201 	orr.w	r2, r2, #1
  406b5a:	6099      	str	r1, [r3, #8]
  406b5c:	604a      	str	r2, [r1, #4]
  406b5e:	f8da 3004 	ldr.w	r3, [sl, #4]
  406b62:	f003 0301 	and.w	r3, r3, #1
  406b66:	431f      	orrs	r7, r3

00406b68 <.LVL85>:
  406b68:	4640      	mov	r0, r8
  406b6a:	f8ca 7004 	str.w	r7, [sl, #4]
  406b6e:	f005 f97f 	bl	40be70 <__malloc_unlock>

00406b72 <.LVL86>:
  406b72:	e751      	b.n	406a18 <.LVL27>

00406b74 <.LBB18>:
  406b74:	682b      	ldr	r3, [r5, #0]
  406b76:	6003      	str	r3, [r0, #0]

00406b78 <.LVL88>:
  406b78:	686b      	ldr	r3, [r5, #4]
  406b7a:	6043      	str	r3, [r0, #4]
  406b7c:	2a1b      	cmp	r2, #27
  406b7e:	d82d      	bhi.n	406bdc <.LBB24>
  406b80:	f100 0308 	add.w	r3, r0, #8

00406b84 <.LVL89>:
  406b84:	f105 0208 	add.w	r2, r5, #8

00406b88 <.LVL90>:
  406b88:	e71b      	b.n	4069c2 <.LVL13>

00406b8a <.LBB19>:
  406b8a:	4632      	mov	r2, r6

00406b8c <.LVL92>:
  406b8c:	6829      	ldr	r1, [r5, #0]
  406b8e:	6011      	str	r1, [r2, #0]

00406b90 <.LVL93>:
  406b90:	6869      	ldr	r1, [r5, #4]
  406b92:	6051      	str	r1, [r2, #4]
  406b94:	68a9      	ldr	r1, [r5, #8]
  406b96:	6091      	str	r1, [r2, #8]

00406b98 <.LBE19>:
  406b98:	461c      	mov	r4, r3

00406b9a <.LBB20>:
  406b9a:	46d1      	mov	r9, sl

00406b9c <.LVL95>:
  406b9c:	e72a      	b.n	4069f4 <.L11>

00406b9e <.LBE20>:
  406b9e:	eb09 0107 	add.w	r1, r9, r7

00406ba2 <.LVL97>:
  406ba2:	ebab 0b07 	sub.w	fp, fp, r7

00406ba6 <.LVL98>:
  406ba6:	f04b 0201 	orr.w	r2, fp, #1
  406baa:	6099      	str	r1, [r3, #8]
  406bac:	604a      	str	r2, [r1, #4]

00406bae <.LVL99>:
  406bae:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406bb2:	f003 0301 	and.w	r3, r3, #1
  406bb6:	431f      	orrs	r7, r3

00406bb8 <.LVL100>:
  406bb8:	4640      	mov	r0, r8

00406bba <.LVL101>:
  406bba:	f845 7c04 	str.w	r7, [r5, #-4]
  406bbe:	f005 f957 	bl	40be70 <__malloc_unlock>

00406bc2 <.LVL102>:
  406bc2:	462e      	mov	r6, r5

00406bc4 <.LVL103>:
  406bc4:	e728      	b.n	406a18 <.LVL27>

00406bc6 <.LBB21>:
  406bc6:	4629      	mov	r1, r5
  406bc8:	f002 faf2 	bl	4091b0 <.LFE155>

00406bcc <.LVL105>:
  406bcc:	e6ff      	b.n	4069ce <.LBE2>

00406bce <.LBB22>:
  406bce:	4629      	mov	r1, r5

00406bd0 <.LVL107>:
  406bd0:	4630      	mov	r0, r6

00406bd2 <.LBE22>:
  406bd2:	461c      	mov	r4, r3

00406bd4 <.LBB23>:
  406bd4:	46d1      	mov	r9, sl

00406bd6 <.LVL110>:
  406bd6:	f002 faeb 	bl	4091b0 <.LFE155>

00406bda <.LVL111>:
  406bda:	e70b      	b.n	4069f4 <.L11>

00406bdc <.LBB24>:
  406bdc:	68ab      	ldr	r3, [r5, #8]
  406bde:	6083      	str	r3, [r0, #8]

00406be0 <.LVL113>:
  406be0:	68eb      	ldr	r3, [r5, #12]
  406be2:	60c3      	str	r3, [r0, #12]
  406be4:	2a24      	cmp	r2, #36	; 0x24
  406be6:	d017      	beq.n	406c18 <.LBB26>
  406be8:	f100 0310 	add.w	r3, r0, #16

00406bec <.LVL114>:
  406bec:	f105 0210 	add.w	r2, r5, #16

00406bf0 <.LVL115>:
  406bf0:	e6e7      	b.n	4069c2 <.LVL13>

00406bf2 <.LBE24>:
  406bf2:	f850 3c04 	ldr.w	r3, [r0, #-4]
  406bf6:	f023 0303 	bic.w	r3, r3, #3
  406bfa:	441c      	add	r4, r3

00406bfc <.LVL117>:
  406bfc:	462e      	mov	r6, r5
  406bfe:	e6f9      	b.n	4069f4 <.L11>

00406c00 <.LBB10>:
  406c00:	68a9      	ldr	r1, [r5, #8]
  406c02:	f8ca 1010 	str.w	r1, [sl, #16]

00406c06 <.LVL119>:
  406c06:	68e9      	ldr	r1, [r5, #12]
  406c08:	f8ca 1014 	str.w	r1, [sl, #20]
  406c0c:	2a24      	cmp	r2, #36	; 0x24
  406c0e:	d00c      	beq.n	406c2a <.LBB11>
  406c10:	3510      	adds	r5, #16

00406c12 <.LVL120>:
  406c12:	f10a 0218 	add.w	r2, sl, #24

00406c16 <.LVL121>:
  406c16:	e7b9      	b.n	406b8c <.LVL92>

00406c18 <.LBB26>:
  406c18:	692b      	ldr	r3, [r5, #16]
  406c1a:	6103      	str	r3, [r0, #16]
  406c1c:	696b      	ldr	r3, [r5, #20]
  406c1e:	6143      	str	r3, [r0, #20]
  406c20:	f105 0218 	add.w	r2, r5, #24

00406c24 <.LVL123>:
  406c24:	f100 0318 	add.w	r3, r0, #24

00406c28 <.LVL124>:
  406c28:	e6cb      	b.n	4069c2 <.LVL13>

00406c2a <.LBB11>:
  406c2a:	692a      	ldr	r2, [r5, #16]

00406c2c <.LVL126>:
  406c2c:	f8ca 2018 	str.w	r2, [sl, #24]
  406c30:	696a      	ldr	r2, [r5, #20]
  406c32:	f8ca 201c 	str.w	r2, [sl, #28]
  406c36:	3518      	adds	r5, #24

00406c38 <.LVL127>:
  406c38:	f10a 0220 	add.w	r2, sl, #32

00406c3c <.LVL128>:
  406c3c:	e7a6      	b.n	406b8c <.LVL92>

00406c3e <.LBB15>:
  406c3e:	4632      	mov	r2, r6

00406c40 <.LVL130>:
  406c40:	e77f      	b.n	406b42 <.LVL82>

00406c42 <.LBE15>:
  406c42:	4629      	mov	r1, r5

00406c44 <.LVL132>:
  406c44:	4630      	mov	r0, r6

00406c46 <.LVL133>:
  406c46:	9301      	str	r3, [sp, #4]
  406c48:	f002 fab2 	bl	4091b0 <.LFE155>

00406c4c <.LVL134>:
  406c4c:	9b01      	ldr	r3, [sp, #4]
  406c4e:	e77e      	b.n	406b4e <.LBE14>

00406c50 <.LBB16>:
  406c50:	68a9      	ldr	r1, [r5, #8]
  406c52:	f8ca 1010 	str.w	r1, [sl, #16]

00406c56 <.LVL136>:
  406c56:	68e9      	ldr	r1, [r5, #12]
  406c58:	f8ca 1014 	str.w	r1, [sl, #20]
  406c5c:	2a24      	cmp	r2, #36	; 0x24
  406c5e:	d003      	beq.n	406c68 <.LVL139>
  406c60:	3510      	adds	r5, #16

00406c62 <.LVL137>:
  406c62:	f10a 0218 	add.w	r2, sl, #24

00406c66 <.LVL138>:
  406c66:	e76c      	b.n	406b42 <.LVL82>

00406c68 <.LVL139>:
  406c68:	692a      	ldr	r2, [r5, #16]

00406c6a <.LVL140>:
  406c6a:	f8ca 2018 	str.w	r2, [sl, #24]
  406c6e:	696a      	ldr	r2, [r5, #20]
  406c70:	f8ca 201c 	str.w	r2, [sl, #28]
  406c74:	3518      	adds	r5, #24

00406c76 <.LVL141>:
  406c76:	f10a 0220 	add.w	r2, sl, #32

00406c7a <.LVL142>:
  406c7a:	e762      	b.n	406b42 <.LVL82>
  406c7c:	204170b0 	.word	0x204170b0

Disassembly of section .text%61:

00406c80 <__udivmoddi4>:
  406c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406c84:	468c      	mov	ip, r1
  406c86:	460d      	mov	r5, r1
  406c88:	4604      	mov	r4, r0
  406c8a:	9e08      	ldr	r6, [sp, #32]
  406c8c:	2b00      	cmp	r3, #0
  406c8e:	d151      	bne.n	406d34 <__udivmoddi4+0xb4>
  406c90:	428a      	cmp	r2, r1
  406c92:	4617      	mov	r7, r2
  406c94:	d96d      	bls.n	406d72 <__udivmoddi4+0xf2>
  406c96:	fab2 fe82 	clz	lr, r2
  406c9a:	f1be 0f00 	cmp.w	lr, #0
  406c9e:	d00b      	beq.n	406cb8 <__udivmoddi4+0x38>
  406ca0:	f1ce 0c20 	rsb	ip, lr, #32
  406ca4:	fa01 f50e 	lsl.w	r5, r1, lr
  406ca8:	fa20 fc0c 	lsr.w	ip, r0, ip
  406cac:	fa02 f70e 	lsl.w	r7, r2, lr
  406cb0:	ea4c 0c05 	orr.w	ip, ip, r5
  406cb4:	fa00 f40e 	lsl.w	r4, r0, lr
  406cb8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  406cbc:	0c25      	lsrs	r5, r4, #16
  406cbe:	fbbc f8fa 	udiv	r8, ip, sl
  406cc2:	fa1f f987 	uxth.w	r9, r7
  406cc6:	fb0a cc18 	mls	ip, sl, r8, ip
  406cca:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  406cce:	fb08 f309 	mul.w	r3, r8, r9
  406cd2:	42ab      	cmp	r3, r5
  406cd4:	d90a      	bls.n	406cec <__udivmoddi4+0x6c>
  406cd6:	19ed      	adds	r5, r5, r7
  406cd8:	f108 32ff 	add.w	r2, r8, #4294967295
  406cdc:	f080 8123 	bcs.w	406f26 <__udivmoddi4+0x2a6>
  406ce0:	42ab      	cmp	r3, r5
  406ce2:	f240 8120 	bls.w	406f26 <__udivmoddi4+0x2a6>
  406ce6:	f1a8 0802 	sub.w	r8, r8, #2
  406cea:	443d      	add	r5, r7
  406cec:	1aed      	subs	r5, r5, r3
  406cee:	b2a4      	uxth	r4, r4
  406cf0:	fbb5 f0fa 	udiv	r0, r5, sl
  406cf4:	fb0a 5510 	mls	r5, sl, r0, r5
  406cf8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  406cfc:	fb00 f909 	mul.w	r9, r0, r9
  406d00:	45a1      	cmp	r9, r4
  406d02:	d909      	bls.n	406d18 <__udivmoddi4+0x98>
  406d04:	19e4      	adds	r4, r4, r7
  406d06:	f100 33ff 	add.w	r3, r0, #4294967295
  406d0a:	f080 810a 	bcs.w	406f22 <__udivmoddi4+0x2a2>
  406d0e:	45a1      	cmp	r9, r4
  406d10:	f240 8107 	bls.w	406f22 <__udivmoddi4+0x2a2>
  406d14:	3802      	subs	r0, #2
  406d16:	443c      	add	r4, r7
  406d18:	eba4 0409 	sub.w	r4, r4, r9
  406d1c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406d20:	2100      	movs	r1, #0
  406d22:	2e00      	cmp	r6, #0
  406d24:	d061      	beq.n	406dea <__udivmoddi4+0x16a>
  406d26:	fa24 f40e 	lsr.w	r4, r4, lr
  406d2a:	2300      	movs	r3, #0
  406d2c:	6034      	str	r4, [r6, #0]
  406d2e:	6073      	str	r3, [r6, #4]
  406d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406d34:	428b      	cmp	r3, r1
  406d36:	d907      	bls.n	406d48 <__udivmoddi4+0xc8>
  406d38:	2e00      	cmp	r6, #0
  406d3a:	d054      	beq.n	406de6 <__udivmoddi4+0x166>
  406d3c:	2100      	movs	r1, #0
  406d3e:	e886 0021 	stmia.w	r6, {r0, r5}
  406d42:	4608      	mov	r0, r1
  406d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406d48:	fab3 f183 	clz	r1, r3
  406d4c:	2900      	cmp	r1, #0
  406d4e:	f040 808e 	bne.w	406e6e <__udivmoddi4+0x1ee>
  406d52:	42ab      	cmp	r3, r5
  406d54:	d302      	bcc.n	406d5c <__udivmoddi4+0xdc>
  406d56:	4282      	cmp	r2, r0
  406d58:	f200 80fa 	bhi.w	406f50 <__udivmoddi4+0x2d0>
  406d5c:	1a84      	subs	r4, r0, r2
  406d5e:	eb65 0503 	sbc.w	r5, r5, r3
  406d62:	2001      	movs	r0, #1
  406d64:	46ac      	mov	ip, r5
  406d66:	2e00      	cmp	r6, #0
  406d68:	d03f      	beq.n	406dea <__udivmoddi4+0x16a>
  406d6a:	e886 1010 	stmia.w	r6, {r4, ip}
  406d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406d72:	b912      	cbnz	r2, 406d7a <__udivmoddi4+0xfa>
  406d74:	2701      	movs	r7, #1
  406d76:	fbb7 f7f2 	udiv	r7, r7, r2
  406d7a:	fab7 fe87 	clz	lr, r7
  406d7e:	f1be 0f00 	cmp.w	lr, #0
  406d82:	d134      	bne.n	406dee <__udivmoddi4+0x16e>
  406d84:	1beb      	subs	r3, r5, r7
  406d86:	0c3a      	lsrs	r2, r7, #16
  406d88:	fa1f fc87 	uxth.w	ip, r7
  406d8c:	2101      	movs	r1, #1
  406d8e:	fbb3 f8f2 	udiv	r8, r3, r2
  406d92:	0c25      	lsrs	r5, r4, #16
  406d94:	fb02 3318 	mls	r3, r2, r8, r3
  406d98:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406d9c:	fb0c f308 	mul.w	r3, ip, r8
  406da0:	42ab      	cmp	r3, r5
  406da2:	d907      	bls.n	406db4 <__udivmoddi4+0x134>
  406da4:	19ed      	adds	r5, r5, r7
  406da6:	f108 30ff 	add.w	r0, r8, #4294967295
  406daa:	d202      	bcs.n	406db2 <__udivmoddi4+0x132>
  406dac:	42ab      	cmp	r3, r5
  406dae:	f200 80d1 	bhi.w	406f54 <__udivmoddi4+0x2d4>
  406db2:	4680      	mov	r8, r0
  406db4:	1aed      	subs	r5, r5, r3
  406db6:	b2a3      	uxth	r3, r4
  406db8:	fbb5 f0f2 	udiv	r0, r5, r2
  406dbc:	fb02 5510 	mls	r5, r2, r0, r5
  406dc0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  406dc4:	fb0c fc00 	mul.w	ip, ip, r0
  406dc8:	45a4      	cmp	ip, r4
  406dca:	d907      	bls.n	406ddc <__udivmoddi4+0x15c>
  406dcc:	19e4      	adds	r4, r4, r7
  406dce:	f100 33ff 	add.w	r3, r0, #4294967295
  406dd2:	d202      	bcs.n	406dda <__udivmoddi4+0x15a>
  406dd4:	45a4      	cmp	ip, r4
  406dd6:	f200 80b8 	bhi.w	406f4a <__udivmoddi4+0x2ca>
  406dda:	4618      	mov	r0, r3
  406ddc:	eba4 040c 	sub.w	r4, r4, ip
  406de0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406de4:	e79d      	b.n	406d22 <__udivmoddi4+0xa2>
  406de6:	4631      	mov	r1, r6
  406de8:	4630      	mov	r0, r6
  406dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406dee:	f1ce 0420 	rsb	r4, lr, #32
  406df2:	fa05 f30e 	lsl.w	r3, r5, lr
  406df6:	fa07 f70e 	lsl.w	r7, r7, lr
  406dfa:	fa20 f804 	lsr.w	r8, r0, r4
  406dfe:	0c3a      	lsrs	r2, r7, #16
  406e00:	fa25 f404 	lsr.w	r4, r5, r4
  406e04:	ea48 0803 	orr.w	r8, r8, r3
  406e08:	fbb4 f1f2 	udiv	r1, r4, r2
  406e0c:	ea4f 4518 	mov.w	r5, r8, lsr #16
  406e10:	fb02 4411 	mls	r4, r2, r1, r4
  406e14:	fa1f fc87 	uxth.w	ip, r7
  406e18:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  406e1c:	fb01 f30c 	mul.w	r3, r1, ip
  406e20:	42ab      	cmp	r3, r5
  406e22:	fa00 f40e 	lsl.w	r4, r0, lr
  406e26:	d909      	bls.n	406e3c <__udivmoddi4+0x1bc>
  406e28:	19ed      	adds	r5, r5, r7
  406e2a:	f101 30ff 	add.w	r0, r1, #4294967295
  406e2e:	f080 808a 	bcs.w	406f46 <__udivmoddi4+0x2c6>
  406e32:	42ab      	cmp	r3, r5
  406e34:	f240 8087 	bls.w	406f46 <__udivmoddi4+0x2c6>
  406e38:	3902      	subs	r1, #2
  406e3a:	443d      	add	r5, r7
  406e3c:	1aeb      	subs	r3, r5, r3
  406e3e:	fa1f f588 	uxth.w	r5, r8
  406e42:	fbb3 f0f2 	udiv	r0, r3, r2
  406e46:	fb02 3310 	mls	r3, r2, r0, r3
  406e4a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406e4e:	fb00 f30c 	mul.w	r3, r0, ip
  406e52:	42ab      	cmp	r3, r5
  406e54:	d907      	bls.n	406e66 <__udivmoddi4+0x1e6>
  406e56:	19ed      	adds	r5, r5, r7
  406e58:	f100 38ff 	add.w	r8, r0, #4294967295
  406e5c:	d26f      	bcs.n	406f3e <__udivmoddi4+0x2be>
  406e5e:	42ab      	cmp	r3, r5
  406e60:	d96d      	bls.n	406f3e <__udivmoddi4+0x2be>
  406e62:	3802      	subs	r0, #2
  406e64:	443d      	add	r5, r7
  406e66:	1aeb      	subs	r3, r5, r3
  406e68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  406e6c:	e78f      	b.n	406d8e <__udivmoddi4+0x10e>
  406e6e:	f1c1 0720 	rsb	r7, r1, #32
  406e72:	fa22 f807 	lsr.w	r8, r2, r7
  406e76:	408b      	lsls	r3, r1
  406e78:	fa05 f401 	lsl.w	r4, r5, r1
  406e7c:	ea48 0303 	orr.w	r3, r8, r3
  406e80:	fa20 fe07 	lsr.w	lr, r0, r7
  406e84:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  406e88:	40fd      	lsrs	r5, r7
  406e8a:	ea4e 0e04 	orr.w	lr, lr, r4
  406e8e:	fbb5 f9fc 	udiv	r9, r5, ip
  406e92:	ea4f 441e 	mov.w	r4, lr, lsr #16
  406e96:	fb0c 5519 	mls	r5, ip, r9, r5
  406e9a:	fa1f f883 	uxth.w	r8, r3
  406e9e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  406ea2:	fb09 f408 	mul.w	r4, r9, r8
  406ea6:	42ac      	cmp	r4, r5
  406ea8:	fa02 f201 	lsl.w	r2, r2, r1
  406eac:	fa00 fa01 	lsl.w	sl, r0, r1
  406eb0:	d908      	bls.n	406ec4 <__udivmoddi4+0x244>
  406eb2:	18ed      	adds	r5, r5, r3
  406eb4:	f109 30ff 	add.w	r0, r9, #4294967295
  406eb8:	d243      	bcs.n	406f42 <__udivmoddi4+0x2c2>
  406eba:	42ac      	cmp	r4, r5
  406ebc:	d941      	bls.n	406f42 <__udivmoddi4+0x2c2>
  406ebe:	f1a9 0902 	sub.w	r9, r9, #2
  406ec2:	441d      	add	r5, r3
  406ec4:	1b2d      	subs	r5, r5, r4
  406ec6:	fa1f fe8e 	uxth.w	lr, lr
  406eca:	fbb5 f0fc 	udiv	r0, r5, ip
  406ece:	fb0c 5510 	mls	r5, ip, r0, r5
  406ed2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  406ed6:	fb00 f808 	mul.w	r8, r0, r8
  406eda:	45a0      	cmp	r8, r4
  406edc:	d907      	bls.n	406eee <__udivmoddi4+0x26e>
  406ede:	18e4      	adds	r4, r4, r3
  406ee0:	f100 35ff 	add.w	r5, r0, #4294967295
  406ee4:	d229      	bcs.n	406f3a <__udivmoddi4+0x2ba>
  406ee6:	45a0      	cmp	r8, r4
  406ee8:	d927      	bls.n	406f3a <__udivmoddi4+0x2ba>
  406eea:	3802      	subs	r0, #2
  406eec:	441c      	add	r4, r3
  406eee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  406ef2:	eba4 0408 	sub.w	r4, r4, r8
  406ef6:	fba0 8902 	umull	r8, r9, r0, r2
  406efa:	454c      	cmp	r4, r9
  406efc:	46c6      	mov	lr, r8
  406efe:	464d      	mov	r5, r9
  406f00:	d315      	bcc.n	406f2e <__udivmoddi4+0x2ae>
  406f02:	d012      	beq.n	406f2a <__udivmoddi4+0x2aa>
  406f04:	b156      	cbz	r6, 406f1c <__udivmoddi4+0x29c>
  406f06:	ebba 030e 	subs.w	r3, sl, lr
  406f0a:	eb64 0405 	sbc.w	r4, r4, r5
  406f0e:	fa04 f707 	lsl.w	r7, r4, r7
  406f12:	40cb      	lsrs	r3, r1
  406f14:	431f      	orrs	r7, r3
  406f16:	40cc      	lsrs	r4, r1
  406f18:	6037      	str	r7, [r6, #0]
  406f1a:	6074      	str	r4, [r6, #4]
  406f1c:	2100      	movs	r1, #0
  406f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406f22:	4618      	mov	r0, r3
  406f24:	e6f8      	b.n	406d18 <__udivmoddi4+0x98>
  406f26:	4690      	mov	r8, r2
  406f28:	e6e0      	b.n	406cec <__udivmoddi4+0x6c>
  406f2a:	45c2      	cmp	sl, r8
  406f2c:	d2ea      	bcs.n	406f04 <__udivmoddi4+0x284>
  406f2e:	ebb8 0e02 	subs.w	lr, r8, r2
  406f32:	eb69 0503 	sbc.w	r5, r9, r3
  406f36:	3801      	subs	r0, #1
  406f38:	e7e4      	b.n	406f04 <__udivmoddi4+0x284>
  406f3a:	4628      	mov	r0, r5
  406f3c:	e7d7      	b.n	406eee <__udivmoddi4+0x26e>
  406f3e:	4640      	mov	r0, r8
  406f40:	e791      	b.n	406e66 <__udivmoddi4+0x1e6>
  406f42:	4681      	mov	r9, r0
  406f44:	e7be      	b.n	406ec4 <__udivmoddi4+0x244>
  406f46:	4601      	mov	r1, r0
  406f48:	e778      	b.n	406e3c <__udivmoddi4+0x1bc>
  406f4a:	3802      	subs	r0, #2
  406f4c:	443c      	add	r4, r7
  406f4e:	e745      	b.n	406ddc <__udivmoddi4+0x15c>
  406f50:	4608      	mov	r0, r1
  406f52:	e708      	b.n	406d66 <__udivmoddi4+0xe6>
  406f54:	f1a8 0802 	sub.w	r8, r8, #2
  406f58:	443d      	add	r5, r7
  406f5a:	e72b      	b.n	406db4 <__udivmoddi4+0x134>

Disassembly of section .text.wc_Sha512Final%62:

00406f60 <wc_Sha512Final>:

int wc_Sha512Final(Sha512* sha512, byte* hash)
{
    int ret;

    if (sha512 == NULL || hash == NULL) {
  406f60:	2800      	cmp	r0, #0
  406f62:	f000 8120 	beq.w	4071a6 <.LBE801>
{
  406f66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00406f6a <.LCFI7>:
  406f6a:	b083      	sub	sp, #12

00406f6c <.LCFI8>:
  406f6c:	468e      	mov	lr, r1
  406f6e:	4601      	mov	r1, r0

00406f70 <.LVL46>:
    if (sha512 == NULL || hash == NULL) {
  406f70:	f1be 0f00 	cmp.w	lr, #0
  406f74:	f000 8111 	beq.w	40719a <.LBE799>

00406f78 <.LBB762>:
    byte* local = (byte*)sha512->buffer;
  406f78:	f100 0358 	add.w	r3, r0, #88	; 0x58
  406f7c:	9301      	str	r3, [sp, #4]

00406f7e <.LVL48>:
    if (sha512 == NULL) {
  406f7e:	2800      	cmp	r0, #0
  406f80:	f000 810e 	beq.w	4071a0 <.LBB801>
    AddLength(sha512, sha512->buffLen);               /* before adding pads */
  406f84:	6800      	ldr	r0, [r0, #0]

00406f86 <.LBB764>:
    word64 tmp = sha512->loLen;
  406f86:	e9d1 2302 	ldrd	r2, r3, [r1, #8]

00406f8a <.LVL50>:
    if ( (sha512->loLen += len) < tmp)
  406f8a:	eb12 0a00 	adds.w	sl, r2, r0
  406f8e:	f143 0b00 	adc.w	fp, r3, #0
  406f92:	e9c1 ab02 	strd	sl, fp, [r1, #8]
  406f96:	459b      	cmp	fp, r3
  406f98:	bf08      	it	eq
  406f9a:	4592      	cmpeq	sl, r2
  406f9c:	d206      	bcs.n	406fac <.LVL52+0x4>
        sha512->hiLen++;                       /* carry low to high */
  406f9e:	e9d1 2304 	ldrd	r2, r3, [r1, #16]

00406fa2 <.LVL51>:
  406fa2:	3201      	adds	r2, #1
  406fa4:	f143 0300 	adc.w	r3, r3, #0

00406fa8 <.LVL52>:
  406fa8:	e9c1 2304 	strd	r2, r3, [r1, #16]
  406fac:	468a      	mov	sl, r1
  406fae:	46f3      	mov	fp, lr

00406fb0 <.LBE764>:
    local[sha512->buffLen++] = 0x80;  /* add 1 */
  406fb0:	1c43      	adds	r3, r0, #1
  406fb2:	600b      	str	r3, [r1, #0]
  406fb4:	2380      	movs	r3, #128	; 0x80
  406fb6:	9a01      	ldr	r2, [sp, #4]
  406fb8:	5413      	strb	r3, [r2, r0]
    if (sha512->buffLen > SHA512_PAD_SIZE) {
  406fba:	6808      	ldr	r0, [r1, #0]
  406fbc:	2870      	cmp	r0, #112	; 0x70
  406fbe:	d92f      	bls.n	407020 <.LVL61>

00406fc0 <.LVL54>:
        XMEMSET(&local[sha512->buffLen], 0, SHA512_BLOCK_SIZE - sha512->buffLen);
  406fc0:	1a1a      	subs	r2, r3, r0
  406fc2:	2100      	movs	r1, #0

00406fc4 <.LVL55>:
  406fc4:	9b01      	ldr	r3, [sp, #4]
  406fc6:	4418      	add	r0, r3
  406fc8:	f002 fd80 	bl	409acc <.LFE157>

00406fcc <.LVL56>:
        sha512->buffLen += SHA512_BLOCK_SIZE - sha512->buffLen;
  406fcc:	4652      	mov	r2, sl
  406fce:	2380      	movs	r3, #128	; 0x80
  406fd0:	f842 3b50 	str.w	r3, [r2], #80

00406fd4 <.LVL57>:
  406fd4:	f10a 0ed0 	add.w	lr, sl, #208	; 0xd0

00406fd8 <.LBB766>:
        out[i] = ByteReverseWord64(in[i]);
  406fd8:	6893      	ldr	r3, [r2, #8]
  406fda:	68d1      	ldr	r1, [r2, #12]

00406fdc <.LBB768>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  406fdc:	0a18      	lsrs	r0, r3, #8
  406fde:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  406fe2:	021b      	lsls	r3, r3, #8
  406fe4:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  406fe8:	4303      	orrs	r3, r0

00406fea <.LBE770>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  406fea:	ea4f 4733 	mov.w	r7, r3, ror #16
  406fee:	2600      	movs	r6, #0

00406ff0 <.LBB772>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  406ff0:	0a0b      	lsrs	r3, r1, #8
  406ff2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  406ff6:	0209      	lsls	r1, r1, #8
  406ff8:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  406ffc:	430b      	orrs	r3, r1

00406ffe <.LBB774>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  406ffe:	ea4f 4333 	mov.w	r3, r3, ror #16

00407002 <.LBE772>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  407002:	ea46 0003 	orr.w	r0, r6, r3
  407006:	4639      	mov	r1, r7

00407008 <.LBE768>:
        out[i] = ByteReverseWord64(in[i]);
  407008:	e9e2 0102 	strd	r0, r1, [r2, #8]!
    for (i = 0; i < count; i++)
  40700c:	4572      	cmp	r2, lr
  40700e:	d1e3      	bne.n	406fd8 <.LBB766>

00407010 <.LBE766>:
        ret = Transform(sha512);
  407010:	4650      	mov	r0, sl
  407012:	f7f9 f8bf 	bl	400194 <_etext>

00407016 <.LVL60>:
        if (ret != 0)
  407016:	4602      	mov	r2, r0
  407018:	2800      	cmp	r0, #0
  40701a:	d151      	bne.n	4070c0 <.LBE762>
        sha512->buffLen = 0;
  40701c:	f8ca 6000 	str.w	r6, [sl]

00407020 <.LVL61>:
    XMEMSET(&local[sha512->buffLen], 0, SHA512_PAD_SIZE - sha512->buffLen);
  407020:	f8da 0000 	ldr.w	r0, [sl]
  407024:	f1c0 0270 	rsb	r2, r0, #112	; 0x70
  407028:	2100      	movs	r1, #0
  40702a:	9b01      	ldr	r3, [sp, #4]
  40702c:	4418      	add	r0, r3
  40702e:	f002 fd4d 	bl	409acc <.LFE157>

00407032 <.LVL62>:
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
  407032:	f8da 7008 	ldr.w	r7, [sl, #8]
  407036:	f8da 600c 	ldr.w	r6, [sl, #12]
                                                         (sha512->hiLen << 3);
  40703a:	f8da 2010 	ldr.w	r2, [sl, #16]
  40703e:	f8da 3014 	ldr.w	r3, [sl, #20]
  407042:	00d9      	lsls	r1, r3, #3
  407044:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
  407048:	00d0      	lsls	r0, r2, #3
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
  40704a:	0f72      	lsrs	r2, r6, #29
  40704c:	2300      	movs	r3, #0
  40704e:	1812      	adds	r2, r2, r0
  407050:	414b      	adcs	r3, r1
  407052:	e9ca 2304 	strd	r2, r3, [sl, #16]
    sha512->loLen = sha512->loLen << 3;
  407056:	00f6      	lsls	r6, r6, #3
  407058:	ea46 7657 	orr.w	r6, r6, r7, lsr #29
  40705c:	00ff      	lsls	r7, r7, #3
  40705e:	f8ca 7008 	str.w	r7, [sl, #8]
  407062:	f8ca 600c 	str.w	r6, [sl, #12]

00407066 <.LVL63>:
  407066:	f10a 0250 	add.w	r2, sl, #80	; 0x50
  40706a:	f10a 06c0 	add.w	r6, sl, #192	; 0xc0

0040706e <.LBB776>:
        out[i] = ByteReverseWord64(in[i]);
  40706e:	6893      	ldr	r3, [r2, #8]
  407070:	68d1      	ldr	r1, [r2, #12]

00407072 <.LBB778>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  407072:	0a18      	lsrs	r0, r3, #8
  407074:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  407078:	021b      	lsls	r3, r3, #8
  40707a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  40707e:	4303      	orrs	r3, r0

00407080 <.LBE780>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  407080:	ea4f 4533 	mov.w	r5, r3, ror #16
  407084:	2400      	movs	r4, #0

00407086 <.LBB782>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  407086:	0a0b      	lsrs	r3, r1, #8
  407088:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  40708c:	0209      	lsls	r1, r1, #8
  40708e:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  407092:	430b      	orrs	r3, r1

00407094 <.LBB784>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  407094:	ea4f 4333 	mov.w	r3, r3, ror #16

00407098 <.LBE782>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  407098:	ea44 0003 	orr.w	r0, r4, r3
  40709c:	4629      	mov	r1, r5

0040709e <.LBE778>:
        out[i] = ByteReverseWord64(in[i]);
  40709e:	e9e2 0102 	strd	r0, r1, [r2, #8]!
    for (i = 0; i < count; i++)
  4070a2:	42b2      	cmp	r2, r6
  4070a4:	d1e3      	bne.n	40706e <.LBB776>

004070a6 <.LBE776>:
    sha512->buffer[SHA512_BLOCK_SIZE / sizeof(word64) - 2] = sha512->hiLen;
  4070a6:	e9da 2304 	ldrd	r2, r3, [sl, #16]
  4070aa:	e9ca 2332 	strd	r2, r3, [sl, #200]	; 0xc8
    sha512->buffer[SHA512_BLOCK_SIZE / sizeof(word64) - 1] = sha512->loLen;
  4070ae:	e9da 2302 	ldrd	r2, r3, [sl, #8]
  4070b2:	e9ca 2334 	strd	r2, r3, [sl, #208]	; 0xd0
    ret = Transform(sha512);
  4070b6:	4650      	mov	r0, sl
  4070b8:	f7f9 f86c 	bl	400194 <_etext>

004070bc <.LVL66>:
    if (ret != 0)
  4070bc:	4602      	mov	r2, r0
  4070be:	b118      	cbz	r0, 4070c8 <.LBB798>

004070c0 <.LBE762>:
        return ret;

    XMEMCPY(hash, sha512->digest, SHA512_DIGEST_SIZE);

    return InitSha512(sha512);  /* reset state */
}
  4070c0:	4610      	mov	r0, r2
  4070c2:	b003      	add	sp, #12

004070c4 <.LCFI9>:
  4070c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004070c8 <.LBB798>:
        ByteReverseWords64(sha512->digest, sha512->digest, SHA512_DIGEST_SIZE);
  4070c8:	f10a 0618 	add.w	r6, sl, #24

004070cc <.LVL69>:
  4070cc:	f10a 0410 	add.w	r4, sl, #16
  4070d0:	f10a 0550 	add.w	r5, sl, #80	; 0x50

004070d4 <.LBB786>:
        out[i] = ByteReverseWord64(in[i]);
  4070d4:	68a3      	ldr	r3, [r4, #8]
  4070d6:	68e1      	ldr	r1, [r4, #12]

004070d8 <.LBB788>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  4070d8:	0a18      	lsrs	r0, r3, #8
  4070da:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  4070de:	021b      	lsls	r3, r3, #8
  4070e0:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  4070e4:	4303      	orrs	r3, r0

004070e6 <.LBE790>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  4070e6:	ea4f 4933 	mov.w	r9, r3, ror #16
  4070ea:	f04f 0800 	mov.w	r8, #0

004070ee <.LBB792>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  4070ee:	0a0b      	lsrs	r3, r1, #8
  4070f0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  4070f4:	0209      	lsls	r1, r1, #8
  4070f6:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  4070fa:	430b      	orrs	r3, r1

004070fc <.LBB794>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  4070fc:	ea4f 4333 	mov.w	r3, r3, ror #16

00407100 <.LBE792>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  407100:	ea48 0003 	orr.w	r0, r8, r3
  407104:	4649      	mov	r1, r9

00407106 <.LBE788>:
        out[i] = ByteReverseWord64(in[i]);
  407106:	e9e4 0102 	strd	r0, r1, [r4, #8]!
    for (i = 0; i < count; i++)
  40710a:	42ac      	cmp	r4, r5
  40710c:	d1e2      	bne.n	4070d4 <.LBB786>

0040710e <.LBE786>:
    XMEMCPY(hash, sha512->digest, SHA512_DIGEST_SIZE);
  40710e:	4633      	mov	r3, r6
  407110:	46de      	mov	lr, fp
  407112:	3640      	adds	r6, #64	; 0x40

00407114 <.LVL72>:
  407114:	681d      	ldr	r5, [r3, #0]
  407116:	685c      	ldr	r4, [r3, #4]
  407118:	6898      	ldr	r0, [r3, #8]
  40711a:	68d9      	ldr	r1, [r3, #12]
  40711c:	f8ce 5000 	str.w	r5, [lr]
  407120:	f8ce 4004 	str.w	r4, [lr, #4]
  407124:	f8ce 0008 	str.w	r0, [lr, #8]
  407128:	f8ce 100c 	str.w	r1, [lr, #12]
  40712c:	3310      	adds	r3, #16
  40712e:	f10e 0e10 	add.w	lr, lr, #16
  407132:	42b3      	cmp	r3, r6
  407134:	d1ee      	bne.n	407114 <.LVL72>

00407136 <.LBB799>:
    sha512->digest[0] = W64LIT(0x6a09e667f3bcc908);
  407136:	a11e      	add	r1, pc, #120	; (adr r1, 4071b0 <.LVL78+0x4>)
  407138:	e9d1 0100 	ldrd	r0, r1, [r1]
  40713c:	e9ca 0106 	strd	r0, r1, [sl, #24]
    sha512->digest[1] = W64LIT(0xbb67ae8584caa73b);
  407140:	a11d      	add	r1, pc, #116	; (adr r1, 4071b8 <.LVL78+0xc>)
  407142:	e9d1 0100 	ldrd	r0, r1, [r1]
  407146:	e9ca 0108 	strd	r0, r1, [sl, #32]
    sha512->digest[2] = W64LIT(0x3c6ef372fe94f82b);
  40714a:	a11d      	add	r1, pc, #116	; (adr r1, 4071c0 <.LVL78+0x14>)
  40714c:	e9d1 0100 	ldrd	r0, r1, [r1]
  407150:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
    sha512->digest[3] = W64LIT(0xa54ff53a5f1d36f1);
  407154:	a11c      	add	r1, pc, #112	; (adr r1, 4071c8 <.LVL78+0x1c>)
  407156:	e9d1 0100 	ldrd	r0, r1, [r1]
  40715a:	e9ca 010c 	strd	r0, r1, [sl, #48]	; 0x30
    sha512->digest[4] = W64LIT(0x510e527fade682d1);
  40715e:	a11c      	add	r1, pc, #112	; (adr r1, 4071d0 <.LVL78+0x24>)
  407160:	e9d1 0100 	ldrd	r0, r1, [r1]
  407164:	e9ca 010e 	strd	r0, r1, [sl, #56]	; 0x38
    sha512->digest[5] = W64LIT(0x9b05688c2b3e6c1f);
  407168:	a11b      	add	r1, pc, #108	; (adr r1, 4071d8 <.LVL78+0x2c>)
  40716a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40716e:	e9ca 0110 	strd	r0, r1, [sl, #64]	; 0x40
    sha512->digest[6] = W64LIT(0x1f83d9abfb41bd6b);
  407172:	a11b      	add	r1, pc, #108	; (adr r1, 4071e0 <.LVL78+0x34>)
  407174:	e9d1 0100 	ldrd	r0, r1, [r1]
  407178:	e9ca 0112 	strd	r0, r1, [sl, #72]	; 0x48
    sha512->digest[7] = W64LIT(0x5be0cd19137e2179);
  40717c:	a11a      	add	r1, pc, #104	; (adr r1, 4071e8 <.LVL78+0x3c>)
  40717e:	e9d1 0100 	ldrd	r0, r1, [r1]
  407182:	e9ca 0114 	strd	r0, r1, [sl, #80]	; 0x50
    sha512->buffLen = 0;
  407186:	2300      	movs	r3, #0
  407188:	f8ca 3000 	str.w	r3, [sl]
    sha512->loLen   = 0;
  40718c:	2000      	movs	r0, #0
  40718e:	2100      	movs	r1, #0
  407190:	e9ca 0102 	strd	r0, r1, [sl, #8]
    sha512->hiLen   = 0;
  407194:	e9ca 0104 	strd	r0, r1, [sl, #16]
  407198:	e792      	b.n	4070c0 <.LBE762>

0040719a <.LBE799>:
        return BAD_FUNC_ARG;
  40719a:	f06f 02ac 	mvn.w	r2, #172	; 0xac
  40719e:	e78f      	b.n	4070c0 <.LBE762>

004071a0 <.LBB801>:
        return BAD_FUNC_ARG;
  4071a0:	f06f 02ac 	mvn.w	r2, #172	; 0xac

004071a4 <.LVL76>:
  4071a4:	e78c      	b.n	4070c0 <.LBE762>

004071a6 <.LBE801>:
        return BAD_FUNC_ARG;
  4071a6:	f06f 02ac 	mvn.w	r2, #172	; 0xac
}
  4071aa:	4610      	mov	r0, r2

004071ac <.LVL78>:
  4071ac:	4770      	bx	lr
  4071ae:	bf00      	nop
  4071b0:	f3bcc908 	.word	0xf3bcc908
  4071b4:	6a09e667 	.word	0x6a09e667
  4071b8:	84caa73b 	.word	0x84caa73b
  4071bc:	bb67ae85 	.word	0xbb67ae85
  4071c0:	fe94f82b 	.word	0xfe94f82b
  4071c4:	3c6ef372 	.word	0x3c6ef372
  4071c8:	5f1d36f1 	.word	0x5f1d36f1
  4071cc:	a54ff53a 	.word	0xa54ff53a
  4071d0:	ade682d1 	.word	0xade682d1
  4071d4:	510e527f 	.word	0x510e527f
  4071d8:	2b3e6c1f 	.word	0x2b3e6c1f
  4071dc:	9b05688c 	.word	0x9b05688c
  4071e0:	fb41bd6b 	.word	0xfb41bd6b
  4071e4:	1f83d9ab 	.word	0x1f83d9ab
  4071e8:	137e2179 	.word	0x137e2179
  4071ec:	5be0cd19 	.word	0x5be0cd19

Disassembly of section .text.wc_Sha384Final%63:

004071f0 <wc_Sha384Final>:

int wc_Sha384Final(Sha384* sha384, byte* hash)
{
    int ret;

    if (sha384 == NULL || hash == NULL) {
  4071f0:	2800      	cmp	r0, #0
  4071f2:	f000 8120 	beq.w	407436 <.LBE922>
{
  4071f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

004071fa <.LCFI14>:
  4071fa:	b083      	sub	sp, #12

004071fc <.LCFI15>:
  4071fc:	468e      	mov	lr, r1
  4071fe:	4601      	mov	r1, r0

00407200 <.LVL105>:
    if (sha384 == NULL || hash == NULL) {
  407200:	f1be 0f00 	cmp.w	lr, #0
  407204:	f000 8111 	beq.w	40742a <.LBE920>

00407208 <.LBB883>:
    byte* local = (byte*)sha512->buffer;
  407208:	f100 0358 	add.w	r3, r0, #88	; 0x58
  40720c:	9301      	str	r3, [sp, #4]

0040720e <.LVL107>:
    if (sha512 == NULL) {
  40720e:	2800      	cmp	r0, #0
  407210:	f000 810e 	beq.w	407430 <.LBB922>
    AddLength(sha512, sha512->buffLen);               /* before adding pads */
  407214:	6800      	ldr	r0, [r0, #0]

00407216 <.LBB885>:
    word64 tmp = sha512->loLen;
  407216:	e9d1 2302 	ldrd	r2, r3, [r1, #8]

0040721a <.LVL109>:
    if ( (sha512->loLen += len) < tmp)
  40721a:	eb12 0a00 	adds.w	sl, r2, r0
  40721e:	f143 0b00 	adc.w	fp, r3, #0
  407222:	e9c1 ab02 	strd	sl, fp, [r1, #8]
  407226:	459b      	cmp	fp, r3
  407228:	bf08      	it	eq
  40722a:	4592      	cmpeq	sl, r2
  40722c:	d206      	bcs.n	40723c <.LVL111+0x4>
        sha512->hiLen++;                       /* carry low to high */
  40722e:	e9d1 2304 	ldrd	r2, r3, [r1, #16]

00407232 <.LVL110>:
  407232:	3201      	adds	r2, #1
  407234:	f143 0300 	adc.w	r3, r3, #0

00407238 <.LVL111>:
  407238:	e9c1 2304 	strd	r2, r3, [r1, #16]
  40723c:	468a      	mov	sl, r1
  40723e:	46f3      	mov	fp, lr

00407240 <.LBE885>:
    local[sha512->buffLen++] = 0x80;  /* add 1 */
  407240:	1c43      	adds	r3, r0, #1
  407242:	600b      	str	r3, [r1, #0]
  407244:	2380      	movs	r3, #128	; 0x80
  407246:	9a01      	ldr	r2, [sp, #4]
  407248:	5413      	strb	r3, [r2, r0]
    if (sha512->buffLen > SHA512_PAD_SIZE) {
  40724a:	6808      	ldr	r0, [r1, #0]
  40724c:	2870      	cmp	r0, #112	; 0x70
  40724e:	d92f      	bls.n	4072b0 <.LVL120>

00407250 <.LVL113>:
        XMEMSET(&local[sha512->buffLen], 0, SHA512_BLOCK_SIZE - sha512->buffLen);
  407250:	1a1a      	subs	r2, r3, r0
  407252:	2100      	movs	r1, #0

00407254 <.LVL114>:
  407254:	9b01      	ldr	r3, [sp, #4]
  407256:	4418      	add	r0, r3
  407258:	f002 fc38 	bl	409acc <.LFE157>

0040725c <.LVL115>:
        sha512->buffLen += SHA512_BLOCK_SIZE - sha512->buffLen;
  40725c:	4652      	mov	r2, sl
  40725e:	2380      	movs	r3, #128	; 0x80
  407260:	f842 3b50 	str.w	r3, [r2], #80

00407264 <.LVL116>:
  407264:	f10a 0ed0 	add.w	lr, sl, #208	; 0xd0

00407268 <.LBB887>:
        out[i] = ByteReverseWord64(in[i]);
  407268:	6893      	ldr	r3, [r2, #8]
  40726a:	68d1      	ldr	r1, [r2, #12]

0040726c <.LBB889>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40726c:	0a18      	lsrs	r0, r3, #8
  40726e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  407272:	021b      	lsls	r3, r3, #8
  407274:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  407278:	4303      	orrs	r3, r0

0040727a <.LBE891>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  40727a:	ea4f 4733 	mov.w	r7, r3, ror #16
  40727e:	2600      	movs	r6, #0

00407280 <.LBB893>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  407280:	0a0b      	lsrs	r3, r1, #8
  407282:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  407286:	0209      	lsls	r1, r1, #8
  407288:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  40728c:	430b      	orrs	r3, r1

0040728e <.LBB895>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40728e:	ea4f 4333 	mov.w	r3, r3, ror #16

00407292 <.LBE893>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  407292:	ea46 0003 	orr.w	r0, r6, r3
  407296:	4639      	mov	r1, r7

00407298 <.LBE889>:
        out[i] = ByteReverseWord64(in[i]);
  407298:	e9e2 0102 	strd	r0, r1, [r2, #8]!
    for (i = 0; i < count; i++)
  40729c:	4572      	cmp	r2, lr
  40729e:	d1e3      	bne.n	407268 <.LBB887>

004072a0 <.LBE887>:
        ret = Transform(sha512);
  4072a0:	4650      	mov	r0, sl
  4072a2:	f7f8 ff77 	bl	400194 <_etext>

004072a6 <.LVL119>:
        if (ret != 0)
  4072a6:	4602      	mov	r2, r0
  4072a8:	2800      	cmp	r0, #0
  4072aa:	d151      	bne.n	407350 <.LBE883>
        sha512->buffLen = 0;
  4072ac:	f8ca 6000 	str.w	r6, [sl]

004072b0 <.LVL120>:
    XMEMSET(&local[sha512->buffLen], 0, SHA512_PAD_SIZE - sha512->buffLen);
  4072b0:	f8da 0000 	ldr.w	r0, [sl]
  4072b4:	f1c0 0270 	rsb	r2, r0, #112	; 0x70
  4072b8:	2100      	movs	r1, #0
  4072ba:	9b01      	ldr	r3, [sp, #4]
  4072bc:	4418      	add	r0, r3
  4072be:	f002 fc05 	bl	409acc <.LFE157>

004072c2 <.LVL121>:
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
  4072c2:	f8da 7008 	ldr.w	r7, [sl, #8]
  4072c6:	f8da 600c 	ldr.w	r6, [sl, #12]
                                                         (sha512->hiLen << 3);
  4072ca:	f8da 2010 	ldr.w	r2, [sl, #16]
  4072ce:	f8da 3014 	ldr.w	r3, [sl, #20]
  4072d2:	00d9      	lsls	r1, r3, #3
  4072d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
  4072d8:	00d0      	lsls	r0, r2, #3
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
  4072da:	0f72      	lsrs	r2, r6, #29
  4072dc:	2300      	movs	r3, #0
  4072de:	1812      	adds	r2, r2, r0
  4072e0:	414b      	adcs	r3, r1
  4072e2:	e9ca 2304 	strd	r2, r3, [sl, #16]
    sha512->loLen = sha512->loLen << 3;
  4072e6:	00f6      	lsls	r6, r6, #3
  4072e8:	ea46 7657 	orr.w	r6, r6, r7, lsr #29
  4072ec:	00ff      	lsls	r7, r7, #3
  4072ee:	f8ca 7008 	str.w	r7, [sl, #8]
  4072f2:	f8ca 600c 	str.w	r6, [sl, #12]

004072f6 <.LVL122>:
  4072f6:	f10a 0250 	add.w	r2, sl, #80	; 0x50
  4072fa:	f10a 06c0 	add.w	r6, sl, #192	; 0xc0

004072fe <.LBB897>:
        out[i] = ByteReverseWord64(in[i]);
  4072fe:	6893      	ldr	r3, [r2, #8]
  407300:	68d1      	ldr	r1, [r2, #12]

00407302 <.LBB899>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  407302:	0a18      	lsrs	r0, r3, #8
  407304:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  407308:	021b      	lsls	r3, r3, #8
  40730a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  40730e:	4303      	orrs	r3, r0

00407310 <.LBE901>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  407310:	ea4f 4533 	mov.w	r5, r3, ror #16
  407314:	2400      	movs	r4, #0

00407316 <.LBB903>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  407316:	0a0b      	lsrs	r3, r1, #8
  407318:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  40731c:	0209      	lsls	r1, r1, #8
  40731e:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  407322:	430b      	orrs	r3, r1

00407324 <.LBB905>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  407324:	ea4f 4333 	mov.w	r3, r3, ror #16

00407328 <.LBE903>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  407328:	ea44 0003 	orr.w	r0, r4, r3
  40732c:	4629      	mov	r1, r5

0040732e <.LBE899>:
        out[i] = ByteReverseWord64(in[i]);
  40732e:	e9e2 0102 	strd	r0, r1, [r2, #8]!
    for (i = 0; i < count; i++)
  407332:	42b2      	cmp	r2, r6
  407334:	d1e3      	bne.n	4072fe <.LBB897>

00407336 <.LBE897>:
    sha512->buffer[SHA512_BLOCK_SIZE / sizeof(word64) - 2] = sha512->hiLen;
  407336:	e9da 2304 	ldrd	r2, r3, [sl, #16]
  40733a:	e9ca 2332 	strd	r2, r3, [sl, #200]	; 0xc8
    sha512->buffer[SHA512_BLOCK_SIZE / sizeof(word64) - 1] = sha512->loLen;
  40733e:	e9da 2302 	ldrd	r2, r3, [sl, #8]
  407342:	e9ca 2334 	strd	r2, r3, [sl, #208]	; 0xd0
    ret = Transform(sha512);
  407346:	4650      	mov	r0, sl
  407348:	f7f8 ff24 	bl	400194 <_etext>

0040734c <.LVL125>:
    if (ret != 0)
  40734c:	4602      	mov	r2, r0
  40734e:	b118      	cbz	r0, 407358 <.LBB919>

00407350 <.LBE883>:
        return ret;

    XMEMCPY(hash, sha384->digest, SHA384_DIGEST_SIZE);

    return InitSha384(sha384);  /* reset state */
}
  407350:	4610      	mov	r0, r2
  407352:	b003      	add	sp, #12

00407354 <.LCFI16>:
  407354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00407358 <.LBB919>:
        ByteReverseWords64(sha512->digest, sha512->digest, SHA512_DIGEST_SIZE);
  407358:	f10a 0618 	add.w	r6, sl, #24

0040735c <.LVL128>:
  40735c:	f10a 0410 	add.w	r4, sl, #16
  407360:	f10a 0550 	add.w	r5, sl, #80	; 0x50

00407364 <.LBB907>:
        out[i] = ByteReverseWord64(in[i]);
  407364:	68a3      	ldr	r3, [r4, #8]
  407366:	68e1      	ldr	r1, [r4, #12]

00407368 <.LBB909>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  407368:	0a18      	lsrs	r0, r3, #8
  40736a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  40736e:	021b      	lsls	r3, r3, #8
  407370:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  407374:	4303      	orrs	r3, r0

00407376 <.LBE911>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  407376:	ea4f 4933 	mov.w	r9, r3, ror #16
  40737a:	f04f 0800 	mov.w	r8, #0

0040737e <.LBB913>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40737e:	0a0b      	lsrs	r3, r1, #8
  407380:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  407384:	0209      	lsls	r1, r1, #8
  407386:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  40738a:	430b      	orrs	r3, r1

0040738c <.LBB915>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40738c:	ea4f 4333 	mov.w	r3, r3, ror #16

00407390 <.LBE913>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  407390:	ea48 0003 	orr.w	r0, r8, r3
  407394:	4649      	mov	r1, r9

00407396 <.LBE909>:
        out[i] = ByteReverseWord64(in[i]);
  407396:	e9e4 0102 	strd	r0, r1, [r4, #8]!
    for (i = 0; i < count; i++)
  40739a:	42ac      	cmp	r4, r5
  40739c:	d1e2      	bne.n	407364 <.LBB907>

0040739e <.LBE907>:
    XMEMCPY(hash, sha384->digest, SHA384_DIGEST_SIZE);
  40739e:	4633      	mov	r3, r6
  4073a0:	46de      	mov	lr, fp
  4073a2:	3630      	adds	r6, #48	; 0x30

004073a4 <.LVL131>:
  4073a4:	681d      	ldr	r5, [r3, #0]
  4073a6:	685c      	ldr	r4, [r3, #4]
  4073a8:	6898      	ldr	r0, [r3, #8]
  4073aa:	68d9      	ldr	r1, [r3, #12]
  4073ac:	f8ce 5000 	str.w	r5, [lr]
  4073b0:	f8ce 4004 	str.w	r4, [lr, #4]
  4073b4:	f8ce 0008 	str.w	r0, [lr, #8]
  4073b8:	f8ce 100c 	str.w	r1, [lr, #12]
  4073bc:	3310      	adds	r3, #16
  4073be:	f10e 0e10 	add.w	lr, lr, #16
  4073c2:	42b3      	cmp	r3, r6
  4073c4:	d1ee      	bne.n	4073a4 <.LVL131>

004073c6 <.LBB920>:
    sha384->digest[0] = W64LIT(0xcbbb9d5dc1059ed8);
  4073c6:	a11e      	add	r1, pc, #120	; (adr r1, 407440 <.LVL137+0x4>)
  4073c8:	e9d1 0100 	ldrd	r0, r1, [r1]
  4073cc:	e9ca 0106 	strd	r0, r1, [sl, #24]
    sha384->digest[1] = W64LIT(0x629a292a367cd507);
  4073d0:	a11d      	add	r1, pc, #116	; (adr r1, 407448 <.LVL137+0xc>)
  4073d2:	e9d1 0100 	ldrd	r0, r1, [r1]
  4073d6:	e9ca 0108 	strd	r0, r1, [sl, #32]
    sha384->digest[2] = W64LIT(0x9159015a3070dd17);
  4073da:	a11d      	add	r1, pc, #116	; (adr r1, 407450 <.LVL137+0x14>)
  4073dc:	e9d1 0100 	ldrd	r0, r1, [r1]
  4073e0:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
    sha384->digest[3] = W64LIT(0x152fecd8f70e5939);
  4073e4:	a11c      	add	r1, pc, #112	; (adr r1, 407458 <.LVL137+0x1c>)
  4073e6:	e9d1 0100 	ldrd	r0, r1, [r1]
  4073ea:	e9ca 010c 	strd	r0, r1, [sl, #48]	; 0x30
    sha384->digest[4] = W64LIT(0x67332667ffc00b31);
  4073ee:	a11c      	add	r1, pc, #112	; (adr r1, 407460 <.LVL137+0x24>)
  4073f0:	e9d1 0100 	ldrd	r0, r1, [r1]
  4073f4:	e9ca 010e 	strd	r0, r1, [sl, #56]	; 0x38
    sha384->digest[5] = W64LIT(0x8eb44a8768581511);
  4073f8:	a11b      	add	r1, pc, #108	; (adr r1, 407468 <.LVL137+0x2c>)
  4073fa:	e9d1 0100 	ldrd	r0, r1, [r1]
  4073fe:	e9ca 0110 	strd	r0, r1, [sl, #64]	; 0x40
    sha384->digest[6] = W64LIT(0xdb0c2e0d64f98fa7);
  407402:	a11b      	add	r1, pc, #108	; (adr r1, 407470 <.LVL137+0x34>)
  407404:	e9d1 0100 	ldrd	r0, r1, [r1]
  407408:	e9ca 0112 	strd	r0, r1, [sl, #72]	; 0x48
    sha384->digest[7] = W64LIT(0x47b5481dbefa4fa4);
  40740c:	a11a      	add	r1, pc, #104	; (adr r1, 407478 <.LVL137+0x3c>)
  40740e:	e9d1 0100 	ldrd	r0, r1, [r1]
  407412:	e9ca 0114 	strd	r0, r1, [sl, #80]	; 0x50
    sha384->buffLen = 0;
  407416:	2300      	movs	r3, #0
  407418:	f8ca 3000 	str.w	r3, [sl]
    sha384->loLen   = 0;
  40741c:	2000      	movs	r0, #0
  40741e:	2100      	movs	r1, #0
  407420:	e9ca 0102 	strd	r0, r1, [sl, #8]
    sha384->hiLen   = 0;
  407424:	e9ca 0104 	strd	r0, r1, [sl, #16]
  407428:	e792      	b.n	407350 <.LBE883>

0040742a <.LBE920>:
        return BAD_FUNC_ARG;
  40742a:	f06f 02ac 	mvn.w	r2, #172	; 0xac
  40742e:	e78f      	b.n	407350 <.LBE883>

00407430 <.LBB922>:
        return BAD_FUNC_ARG;
  407430:	f06f 02ac 	mvn.w	r2, #172	; 0xac

00407434 <.LVL135>:
  407434:	e78c      	b.n	407350 <.LBE883>

00407436 <.LBE922>:
        return BAD_FUNC_ARG;
  407436:	f06f 02ac 	mvn.w	r2, #172	; 0xac
}
  40743a:	4610      	mov	r0, r2

0040743c <.LVL137>:
  40743c:	4770      	bx	lr
  40743e:	bf00      	nop
  407440:	c1059ed8 	.word	0xc1059ed8
  407444:	cbbb9d5d 	.word	0xcbbb9d5d
  407448:	367cd507 	.word	0x367cd507
  40744c:	629a292a 	.word	0x629a292a
  407450:	3070dd17 	.word	0x3070dd17
  407454:	9159015a 	.word	0x9159015a
  407458:	f70e5939 	.word	0xf70e5939
  40745c:	152fecd8 	.word	0x152fecd8
  407460:	ffc00b31 	.word	0xffc00b31
  407464:	67332667 	.word	0x67332667
  407468:	68581511 	.word	0x68581511
  40746c:	8eb44a87 	.word	0x8eb44a87
  407470:	64f98fa7 	.word	0x64f98fa7
  407474:	db0c2e0d 	.word	0xdb0c2e0d
  407478:	befa4fa4 	.word	0xbefa4fa4
  40747c:	47b5481d 	.word	0x47b5481d

Disassembly of section .rodata.K512%64:

00407480 <K512>:
  407480:	d728ae22 428a2f98 23ef65cd 71374491     ".(../.B.e.#.D7q
  407490:	ec4d3b2f b5c0fbcf 8189dbbc e9b5dba5     /;M.............
  4074a0:	f348b538 3956c25b b605d019 59f111f1     8.H.[.V9.......Y
  4074b0:	af194f9b 923f82a4 da6d8118 ab1c5ed5     .O....?...m..^..
  4074c0:	a3030242 d807aa98 45706fbe 12835b01     B........opE.[..
  4074d0:	4ee4b28c 243185be d5ffb4e2 550c7dc3     ...N..1$.....}.U
  4074e0:	f27b896f 72be5d74 3b1696b1 80deb1fe     o.{.t].r...;....
  4074f0:	25c71235 9bdc06a7 cf692694 c19bf174     5..%.....&i.t...
  407500:	9ef14ad2 e49b69c1 384f25e3 efbe4786     .J...i...%O8.G..
  407510:	8b8cd5b5 0fc19dc6 77ac9c65 240ca1cc     ........e..w...$
  407520:	592b0275 2de92c6f 6ea6e483 4a7484aa     u.+Yo,.-...n..tJ
  407530:	bd41fbd4 5cb0a9dc 831153b5 76f988da     ..A....\.S.....v
  407540:	ee66dfab 983e5152 2db43210 a831c66d     ..f.RQ>..2.-m.1.
  407550:	98fb213f b00327c8 beef0ee4 bf597fc7     ?!...'........Y.
  407560:	3da88fc2 c6e00bf3 930aa725 d5a79147     ...=....%...G...
  407570:	e003826f 06ca6351 0a0e6e70 14292967     o...Qc..pn..g)).
  407580:	46d22ffc 27b70a85 5c26c926 2e1b2138     ./.F...'&.&\8!..
  407590:	5ac42aed 4d2c6dfc 9d95b3df 53380d13     .*.Z.m,M......8S
  4075a0:	8baf63de 650a7354 3c77b2a8 766a0abb     .c..Ts.e..w<..jv
  4075b0:	47edaee6 81c2c92e 1482353b 92722c85     ...G....;5...,r.
  4075c0:	4cf10364 a2bfe8a1 bc423001 a81a664b     d..L.....0B.Kf..
  4075d0:	d0f89791 c24b8b70 0654be30 c76c51a3     ....p.K.0.T..Ql.
  4075e0:	d6ef5218 d192e819 5565a910 d6990624     .R........eU$...
  4075f0:	5771202a f40e3585 32bbd1b8 106aa070     * qW.5.....2p.j.
  407600:	b8d2d0c8 19a4c116 5141ab53 1e376c08     ........S.AQ.l7.
  407610:	df8eeb99 2748774c e19b48a8 34b0bcb5     ....LwH'.H.....4
  407620:	c5c95a63 391c0cb3 e3418acb 4ed8aa4a     cZ.....9..A.J..N
  407630:	7763e373 5b9cca4f d6b2b8a3 682e6ff3     s.cwO..[.....o.h
  407640:	5defb2fc 748f82ee 43172f60 78a5636f     ...]...t`/.Coc.x
  407650:	a1f0ab72 84c87814 1a6439ec 8cc70208     r....x...9d.....
  407660:	23631e28 90befffa de82bde9 a4506ceb     (.c#.........lP.
  407670:	b2c67915 bef9a3f7 e372532b c67178f2     .y......+Sr..xq.
  407680:	ea26619c ca273ece 21c0c207 d186b8c7     .a&..>'....!....
  407690:	cde0eb1e eada7dd6 ee6ed178 f57d4f7f     .....}..x.n..O}.
  4076a0:	72176fba 06f067aa a2c898a6 0a637dc5     .o.r.g.......}c.
  4076b0:	bef90dae 113f9804 131c471b 1b710b35     ......?..G..5.q.
  4076c0:	23047d84 28db77f5 40c72493 32caab7b     .}.#.w.(.$.@{..2
  4076d0:	15c9bebc 3c9ebe0a 9c100d4c 431d67c4     .......<L....g.C
  4076e0:	cb3e42b6 4cc5d4be fc657e2a 597f299c     .B>....L*~e..).Y
  4076f0:	3ad6faec 5fcb6fab 4a475817 6c44198c     ...:.o._.XGJ..Dl

Disassembly of section .text.APP_Tasks%65:

00407700 <APP_Tasks>:

  Remarks:
    See prototype in app.h.
 */

void APP_Tasks(void) {
  407700:	b570      	push	{r4, r5, r6, lr}

00407702 <.LCFI18>:

    static int i;

    /* Check the application's current state. */
    switch (appData.state) {
  407702:	4b80      	ldr	r3, [pc, #512]	; (407904 <.LBE44+0xe>)
  407704:	781b      	ldrb	r3, [r3, #0]
  407706:	2b08      	cmp	r3, #8
  407708:	f200 80fa 	bhi.w	407900 <.LBE44+0xa>
  40770c:	e8df f013 	tbh	[pc, r3, lsl #1]
  407710:	000d0009 	.word	0x000d0009
  407714:	00190013 	.word	0x00190013
  407718:	0025001f 	.word	0x0025001f
  40771c:	00ee002e 	.word	0x00ee002e
  407720:	00b7      	.short	0x00b7
            //            SYS_MESSAGE("SYS_MESSAGE:" "\r\n Application created " __DATE__ " " __TIME__ " initialized!\r\n");            
            //            SYS_DEBUG(SYS_ERROR_INFO,"SYS_DEBUG:" "\r\n Application created " __DATE__ " " __TIME__ " initialized!\r\n");
            // SYS_CONSOLE_Write(SYS_CONSOLE_INDEX_0, STDOUT_FILENO, msgBuffer, strlen(msgBuffer));            


            appData.state = APP_STATE_RUN_MD5_FEED;
  407722:	2201      	movs	r2, #1
  407724:	4b77      	ldr	r3, [pc, #476]	; (407904 <.LBE44+0xe>)
  407726:	701a      	strb	r2, [r3, #0]
            break;
  407728:	bd70      	pop	{r4, r5, r6, pc}
            appData.state = APP_STATE_RUN_MD5_FEED;
            break;
#endif

        case APP_STATE_RUN_MD5_FEED:
            APP_Md5Run_Feed();
  40772a:	f003 f893 	bl	40a854 <.LFE17>

0040772e <.LVL61>:
            appData.state = APP_STATE_RUN_SHA1_FEED;
  40772e:	2202      	movs	r2, #2
  407730:	4b74      	ldr	r3, [pc, #464]	; (407904 <.LBE44+0xe>)
  407732:	701a      	strb	r2, [r3, #0]
            break;
  407734:	bd70      	pop	{r4, r5, r6, pc}

        case APP_STATE_RUN_SHA1_FEED:
            APP_ShaRun_Feed();
  407736:	f002 fecf 	bl	40a4d8 <.LFE143>

0040773a <.LVL62>:
            appData.state = APP_STATE_RUN_SHA256_FEED;
  40773a:	2203      	movs	r2, #3
  40773c:	4b71      	ldr	r3, [pc, #452]	; (407904 <.LBE44+0xe>)
  40773e:	701a      	strb	r2, [r3, #0]
            break;
  407740:	bd70      	pop	{r4, r5, r6, pc}

        case APP_STATE_RUN_SHA256_FEED:
            APP_Sha256Run_Feed();
  407742:	f002 ff03 	bl	40a54c <.LFE157>

00407746 <.LVL63>:
            appData.state = APP_STATE_RUN_SHA384_FEED;
  407746:	2204      	movs	r2, #4
  407748:	4b6e      	ldr	r3, [pc, #440]	; (407904 <.LBE44+0xe>)
  40774a:	701a      	strb	r2, [r3, #0]
            break;
  40774c:	bd70      	pop	{r4, r5, r6, pc}

        case APP_STATE_RUN_SHA384_FEED:
            APP_Sha384Run_Feed();
  40774e:	f003 fa3b 	bl	40abc8 <APP_Sha384Run_Feed>

00407752 <.LVL64>:
            appData.state = APP_STATE_RUN_SHA512_FEED;
  407752:	2205      	movs	r2, #5
  407754:	4b6b      	ldr	r3, [pc, #428]	; (407904 <.LBE44+0xe>)
  407756:	701a      	strb	r2, [r3, #0]
            break;
  407758:	bd70      	pop	{r4, r5, r6, pc}

        case APP_STATE_RUN_SHA512_FEED:
            APP_Sha512Run_Feed();
  40775a:	f003 fa63 	bl	40ac24 <.LFE159>

0040775e <.LVL65>:
            i = 0;
  40775e:	2200      	movs	r2, #0
  407760:	4b69      	ldr	r3, [pc, #420]	; (407908 <.LBE44+0x12>)
  407762:	601a      	str	r2, [r3, #0]
            appData.state = APP_STATE_DISPLAY_RESULTS;
  407764:	2206      	movs	r2, #6
  407766:	4b67      	ldr	r3, [pc, #412]	; (407904 <.LBE44+0xe>)
  407768:	701a      	strb	r2, [r3, #0]
            break;
  40776a:	bd70      	pop	{r4, r5, r6, pc}

        case APP_STATE_DISPLAY_RESULTS:
            switch (i) {
  40776c:	4b66      	ldr	r3, [pc, #408]	; (407908 <.LBE44+0x12>)
  40776e:	681b      	ldr	r3, [r3, #0]
  407770:	3b01      	subs	r3, #1
  407772:	2b08      	cmp	r3, #8
  407774:	d81c      	bhi.n	4077b0 <.LVL68>
  407776:	e8df f003 	tbb	[pc, r3]
  40777a:	1b05      	.short	0x1b05
  40777c:	1b3d1b26 	.word	0x1b3d1b26
  407780:	1b54      	.short	0x1b54
  407782:	6b          	.byte	0x6b
  407783:	00          	.byte	0x00
                    sprintf(printBuffer, "%s\t took %d clock cycles", printBuffer, (int) appData.md5_timing);
#endif
                    break;

                case 1:
                    sprintf(printBuffer, "%s\n\rMD5 from feed:     ", printBuffer);
  407784:	4c61      	ldr	r4, [pc, #388]	; (40790c <.LBE44+0x16>)
  407786:	4d62      	ldr	r5, [pc, #392]	; (407910 <.LBE44+0x1a>)
  407788:	4622      	mov	r2, r4
  40778a:	f105 0108 	add.w	r1, r5, #8
  40778e:	4620      	mov	r0, r4
  407790:	f003 fb74 	bl	40ae7c <.LFE157>

00407794 <.LVL66>:
                    APP_DisplayHash(appData.md5_feed_result, CRYPT_MD5_DIGEST_SIZE);
  407794:	4e5b      	ldr	r6, [pc, #364]	; (407904 <.LBE44+0xe>)
  407796:	2110      	movs	r1, #16
  407798:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
  40779c:	f003 ff44 	bl	40b628 <.LFE4>

004077a0 <.LVL67>:
                    sprintf(printBuffer, "%s\t took %d clock cycles", printBuffer, (int) appData.md5_feed_timing);
  4077a0:	f8d6 30dc 	ldr.w	r3, [r6, #220]	; 0xdc
  4077a4:	4622      	mov	r2, r4
  4077a6:	f105 0120 	add.w	r1, r5, #32
  4077aa:	4620      	mov	r0, r4
  4077ac:	f003 fb66 	bl	40ae7c <.LFE157>

004077b0 <.LVL68>:
                    sprintf(printBuffer, "%s\n\rSHA512 from feed:  ", printBuffer);
                    APP_DisplayHash(appData.sha512_feed_result, CRYPT_SHA512_DIGEST_SIZE);
                    sprintf(printBuffer, "%s\t took %d clock cycles", printBuffer, (int) appData.sha512_feed_timing);
                    break;
            }
            i++;
  4077b0:	4a55      	ldr	r2, [pc, #340]	; (407908 <.LBE44+0x12>)
  4077b2:	6813      	ldr	r3, [r2, #0]
  4077b4:	3301      	adds	r3, #1
  4077b6:	6013      	str	r3, [r2, #0]
            if (i > 9)
  4077b8:	2b09      	cmp	r3, #9
                appData.state = APP_STATE_CHECK_RESULTS;
  4077ba:	bfcc      	ite	gt
  4077bc:	2208      	movgt	r2, #8
            else {
                appData.state = APP_STATE_WAIT_FOR_CONSOLE;
  4077be:	2207      	movle	r2, #7
  4077c0:	4b50      	ldr	r3, [pc, #320]	; (407904 <.LBE44+0xe>)
  4077c2:	701a      	strb	r2, [r3, #0]
  4077c4:	bd70      	pop	{r4, r5, r6, pc}
                    sprintf(printBuffer, "%s\n\rSHA from feed:     ", printBuffer);
  4077c6:	4c51      	ldr	r4, [pc, #324]	; (40790c <.LBE44+0x16>)
  4077c8:	4d51      	ldr	r5, [pc, #324]	; (407910 <.LBE44+0x1a>)
  4077ca:	4622      	mov	r2, r4
  4077cc:	f105 013c 	add.w	r1, r5, #60	; 0x3c
  4077d0:	4620      	mov	r0, r4
  4077d2:	f003 fb53 	bl	40ae7c <.LFE157>

004077d6 <.LVL69>:
                    APP_DisplayHash(appData.sha1_feed_result, CRYPT_SHA_DIGEST_SIZE);
  4077d6:	4e4b      	ldr	r6, [pc, #300]	; (407904 <.LBE44+0xe>)
  4077d8:	2114      	movs	r1, #20
  4077da:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
  4077de:	f003 ff23 	bl	40b628 <.LFE4>

004077e2 <.LVL70>:
                    sprintf(printBuffer, "%s\t took %d clock cycles", printBuffer, (int) appData.sha1_feed_timing);
  4077e2:	f8d6 30f4 	ldr.w	r3, [r6, #244]	; 0xf4
  4077e6:	4622      	mov	r2, r4
  4077e8:	f105 0120 	add.w	r1, r5, #32
  4077ec:	4620      	mov	r0, r4
  4077ee:	f003 fb45 	bl	40ae7c <.LFE157>

004077f2 <.LVL71>:
                    break;
  4077f2:	e7dd      	b.n	4077b0 <.LVL68>
                    sprintf(printBuffer, "%s\n\rSHA256 from feed:  ", printBuffer);
  4077f4:	4c45      	ldr	r4, [pc, #276]	; (40790c <.LBE44+0x16>)
  4077f6:	4d46      	ldr	r5, [pc, #280]	; (407910 <.LBE44+0x1a>)
  4077f8:	4622      	mov	r2, r4
  4077fa:	f105 0154 	add.w	r1, r5, #84	; 0x54
  4077fe:	4620      	mov	r0, r4
  407800:	f003 fb3c 	bl	40ae7c <.LFE157>

00407804 <.LVL72>:
                    APP_DisplayHash(appData.sha256_feed_result, CRYPT_SHA256_DIGEST_SIZE);
  407804:	4e3f      	ldr	r6, [pc, #252]	; (407904 <.LBE44+0xe>)
  407806:	2120      	movs	r1, #32
  407808:	f106 00f8 	add.w	r0, r6, #248	; 0xf8
  40780c:	f003 ff0c 	bl	40b628 <.LFE4>

00407810 <.LVL73>:
                    sprintf(printBuffer, "%s\t took %d clock cycles", printBuffer, (int) appData.sha256_feed_timing);
  407810:	f8d6 3118 	ldr.w	r3, [r6, #280]	; 0x118
  407814:	4622      	mov	r2, r4
  407816:	f105 0120 	add.w	r1, r5, #32
  40781a:	4620      	mov	r0, r4
  40781c:	f003 fb2e 	bl	40ae7c <.LFE157>

00407820 <.LVL74>:
                    break;
  407820:	e7c6      	b.n	4077b0 <.LVL68>
                    sprintf(printBuffer, "%s\n\rSHA384 from feed:  ", printBuffer);
  407822:	4c3a      	ldr	r4, [pc, #232]	; (40790c <.LBE44+0x16>)
  407824:	4d3a      	ldr	r5, [pc, #232]	; (407910 <.LBE44+0x1a>)
  407826:	4622      	mov	r2, r4
  407828:	f105 016c 	add.w	r1, r5, #108	; 0x6c
  40782c:	4620      	mov	r0, r4
  40782e:	f003 fb25 	bl	40ae7c <.LFE157>

00407832 <.LVL75>:
                    APP_DisplayHash(appData.sha384_feed_result, CRYPT_SHA384_DIGEST_SIZE);
  407832:	4e34      	ldr	r6, [pc, #208]	; (407904 <.LBE44+0xe>)
  407834:	2130      	movs	r1, #48	; 0x30
  407836:	f506 708e 	add.w	r0, r6, #284	; 0x11c
  40783a:	f003 fef5 	bl	40b628 <.LFE4>

0040783e <.LVL76>:
                    sprintf(printBuffer, "%s\t took %d clock cycles", printBuffer, (int) appData.sha384_feed_timing);
  40783e:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
  407842:	4622      	mov	r2, r4
  407844:	f105 0120 	add.w	r1, r5, #32
  407848:	4620      	mov	r0, r4
  40784a:	f003 fb17 	bl	40ae7c <.LFE157>

0040784e <.LVL77>:
                    break;
  40784e:	e7af      	b.n	4077b0 <.LVL68>
                    sprintf(printBuffer, "%s\n\rSHA512 from feed:  ", printBuffer);
  407850:	4c2e      	ldr	r4, [pc, #184]	; (40790c <.LBE44+0x16>)
  407852:	4d2f      	ldr	r5, [pc, #188]	; (407910 <.LBE44+0x1a>)
  407854:	4622      	mov	r2, r4
  407856:	f105 0184 	add.w	r1, r5, #132	; 0x84
  40785a:	4620      	mov	r0, r4
  40785c:	f003 fb0e 	bl	40ae7c <.LFE157>

00407860 <.LVL78>:
                    APP_DisplayHash(appData.sha512_feed_result, CRYPT_SHA512_DIGEST_SIZE);
  407860:	4e28      	ldr	r6, [pc, #160]	; (407904 <.LBE44+0xe>)
  407862:	2140      	movs	r1, #64	; 0x40
  407864:	f506 70a8 	add.w	r0, r6, #336	; 0x150
  407868:	f003 fede 	bl	40b628 <.LFE4>

0040786c <.LVL79>:
                    sprintf(printBuffer, "%s\t took %d clock cycles", printBuffer, (int) appData.sha512_feed_timing);
  40786c:	f8d6 3190 	ldr.w	r3, [r6, #400]	; 0x190
  407870:	4622      	mov	r2, r4
  407872:	f105 0120 	add.w	r1, r5, #32
  407876:	4620      	mov	r0, r4
  407878:	f003 fb00 	bl	40ae7c <.LFE157>

0040787c <.LVL80>:
                    break;
  40787c:	e798      	b.n	4077b0 <.LVL68>
                    memcmp(SHAExpected, appData.sha1_result, CRYPT_SHA_DIGEST_SIZE) ||
                    memcmp(SHA256Expected, appData.sha256_result, CRYPT_SHA256_DIGEST_SIZE) ||
                    memcmp(SHA384Expected, appData.sha384_result, CRYPT_SHA384_DIGEST_SIZE) ||
                    memcmp(SHA512Expected, appData.sha512_result, CRYPT_SHA512_DIGEST_SIZE) ||
#endif
                    memcmp(MD5Expected, appData.md5_feed_result, CRYPT_MD5_DIGEST_SIZE) ||
  40787e:	2210      	movs	r2, #16
  407880:	4924      	ldr	r1, [pc, #144]	; (407914 <.LBE44+0x1e>)
  407882:	4825      	ldr	r0, [pc, #148]	; (407918 <.LBE44+0x22>)
  407884:	f003 f910 	bl	40aaa8 <.LFE154>

00407888 <.LVL81>:
            if (
  407888:	b9b8      	cbnz	r0, 4078ba <.LVL85+0x2>
                    memcmp(SHAExpected, appData.sha1_feed_result, CRYPT_SHA_DIGEST_SIZE) ||
  40788a:	2214      	movs	r2, #20
  40788c:	4923      	ldr	r1, [pc, #140]	; (40791c <.LBE44+0x26>)
  40788e:	4824      	ldr	r0, [pc, #144]	; (407920 <.LBE44+0x2a>)
  407890:	f003 f90a 	bl	40aaa8 <.LFE154>

00407894 <.LVL82>:
                    memcmp(MD5Expected, appData.md5_feed_result, CRYPT_MD5_DIGEST_SIZE) ||
  407894:	b988      	cbnz	r0, 4078ba <.LVL85+0x2>
                    memcmp(SHA256Expected, appData.sha256_feed_result, CRYPT_SHA256_DIGEST_SIZE) ||
  407896:	2220      	movs	r2, #32
  407898:	4922      	ldr	r1, [pc, #136]	; (407924 <.LBE44+0x2e>)
  40789a:	4823      	ldr	r0, [pc, #140]	; (407928 <.LBE44+0x32>)
  40789c:	f003 f904 	bl	40aaa8 <.LFE154>

004078a0 <.LVL83>:
                    memcmp(SHAExpected, appData.sha1_feed_result, CRYPT_SHA_DIGEST_SIZE) ||
  4078a0:	b958      	cbnz	r0, 4078ba <.LVL85+0x2>
                    memcmp(SHA384Expected, appData.sha384_feed_result, CRYPT_SHA384_DIGEST_SIZE) ||
  4078a2:	2230      	movs	r2, #48	; 0x30
  4078a4:	4921      	ldr	r1, [pc, #132]	; (40792c <.LBE44+0x36>)
  4078a6:	4822      	ldr	r0, [pc, #136]	; (407930 <.LBE44+0x3a>)
  4078a8:	f003 f8fe 	bl	40aaa8 <.LFE154>

004078ac <.LVL84>:
                    memcmp(SHA256Expected, appData.sha256_feed_result, CRYPT_SHA256_DIGEST_SIZE) ||
  4078ac:	b928      	cbnz	r0, 4078ba <.LVL85+0x2>
                    memcmp(SHA512Expected, appData.sha512_feed_result, CRYPT_SHA512_DIGEST_SIZE)) {
  4078ae:	2240      	movs	r2, #64	; 0x40
  4078b0:	4920      	ldr	r1, [pc, #128]	; (407934 <.LBE44+0x3e>)
  4078b2:	4821      	ldr	r0, [pc, #132]	; (407938 <.LBE44+0x42>)
  4078b4:	f003 f8f8 	bl	40aaa8 <.LFE154>

004078b8 <.LVL85>:
                    memcmp(SHA384Expected, appData.sha384_feed_result, CRYPT_SHA384_DIGEST_SIZE) ||
  4078b8:	b190      	cbz	r0, 4078e0 <.LVL88+0x8>
                // We had an error during comparions
                sprintf(printBuffer, "%s\n\rA test failed.", printBuffer);
  4078ba:	4814      	ldr	r0, [pc, #80]	; (40790c <.LBE44+0x16>)
  4078bc:	4602      	mov	r2, r0
  4078be:	491f      	ldr	r1, [pc, #124]	; (40793c <.LBE44+0x46>)
  4078c0:	f003 fadc 	bl	40ae7c <.LFE157>

004078c4 <.LVL86>:
                //BSP_LEDOn(BSP_LED_1);
            } else {
                sprintf(printBuffer, "%s\n\rAll tests passed.", printBuffer);
                //BSP_LEDOn(BSP_LED_3);
            }
            SYS_CONSOLE_Write(SYS_CONSOLE_INDEX_0, STDOUT_FILENO, printBuffer, strlen(printBuffer));
  4078c4:	4c11      	ldr	r4, [pc, #68]	; (40790c <.LBE44+0x16>)
  4078c6:	4620      	mov	r0, r4
  4078c8:	f001 fb3a 	bl	408f40 <strlen>

004078cc <.LVL87>:
  4078cc:	4603      	mov	r3, r0
  4078ce:	4622      	mov	r2, r4
  4078d0:	2101      	movs	r1, #1
  4078d2:	2000      	movs	r0, #0
  4078d4:	f003 fe34 	bl	40b540 <.LBE20>

004078d8 <.LVL88>:
            appData.state = APP_SPIN;
  4078d8:	2209      	movs	r2, #9
  4078da:	4b0a      	ldr	r3, [pc, #40]	; (407904 <.LBE44+0xe>)
  4078dc:	701a      	strb	r2, [r3, #0]
            break;
  4078de:	bd70      	pop	{r4, r5, r6, pc}
                sprintf(printBuffer, "%s\n\rAll tests passed.", printBuffer);
  4078e0:	480a      	ldr	r0, [pc, #40]	; (40790c <.LBE44+0x16>)
  4078e2:	4602      	mov	r2, r0
  4078e4:	4916      	ldr	r1, [pc, #88]	; (407940 <.LBE44+0x4a>)
  4078e6:	f003 fac9 	bl	40ae7c <.LFE157>

004078ea <.LVL89>:
  4078ea:	e7eb      	b.n	4078c4 <.LVL86>

        case APP_STATE_WAIT_FOR_CONSOLE:
            //            if (appData.wrComplete)
            if (appData.wallTime <= APP_getTicks())
  4078ec:	4b05      	ldr	r3, [pc, #20]	; (407904 <.LBE44+0xe>)
  4078ee:	f8d3 4194 	ldr.w	r4, [r3, #404]	; 0x194

004078f2 <.LBB44>:
    return SYS_TIME_CounterGet();
  4078f2:	f003 ff79 	bl	40b7e8 <.LFE5>

004078f6 <.LBE44>:
            if (appData.wallTime <= APP_getTicks())
  4078f6:	4284      	cmp	r4, r0
  4078f8:	d802      	bhi.n	407900 <.LBE44+0xa>
                appData.state = APP_STATE_DISPLAY_RESULTS;
  4078fa:	2206      	movs	r2, #6
  4078fc:	4b01      	ldr	r3, [pc, #4]	; (407904 <.LBE44+0xe>)
  4078fe:	701a      	strb	r2, [r3, #0]
  407900:	bd70      	pop	{r4, r5, r6, pc}
  407902:	bf00      	nop
  407904:	204176b8 	.word	0x204176b8
  407908:	20417dac 	.word	0x20417dac
  40790c:	20400488 	.word	0x20400488
  407910:	0040878c 	.word	0x0040878c
  407914:	20417784 	.word	0x20417784
  407918:	0040bc04 	.word	0x0040bc04
  40791c:	20417798 	.word	0x20417798
  407920:	0040ba1c 	.word	0x0040ba1c
  407924:	204177b0 	.word	0x204177b0
  407928:	0040b838 	.word	0x0040b838
  40792c:	204177d4 	.word	0x204177d4
  407930:	0040b478 	.word	0x0040b478
  407934:	20417808 	.word	0x20417808
  407938:	0040b078 	.word	0x0040b078
  40793c:	00408828 	.word	0x00408828
  407940:	0040883c 	.word	0x0040883c

Disassembly of section .text.xTaskCreate%66:

00407944 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
  407944:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

00407948 <.LCFI2>:
  407948:	4682      	mov	sl, r0
  40794a:	4689      	mov	r9, r1
  40794c:	4698      	mov	r8, r3
  40794e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c

00407950 <.LBB40>:
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  407950:	0095      	lsls	r5, r2, #2
  407952:	4628      	mov	r0, r5

00407954 <.LVL29>:
  407954:	f002 ffb2 	bl	40a8bc <.LFE156>

00407958 <.LVL30>:

			if( pxStack != NULL )
  407958:	2800      	cmp	r0, #0
  40795a:	f000 808d 	beq.w	407a78 <.LBE48>
  40795e:	4607      	mov	r7, r0
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
  407960:	2054      	movs	r0, #84	; 0x54

00407962 <.LVL31>:
  407962:	f002 ffab 	bl	40a8bc <.LFE156>

00407966 <.LVL32>:

				if( pxNewTCB != NULL )
  407966:	4604      	mov	r4, r0
  407968:	2800      	cmp	r0, #0
  40796a:	f000 8082 	beq.w	407a72 <.LBB48>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
  40796e:	6307      	str	r7, [r0, #48]	; 0x30

00407970 <.LBB41>:

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
  407970:	462a      	mov	r2, r5
  407972:	21a5      	movs	r1, #165	; 0xa5
  407974:	4638      	mov	r0, r7

00407976 <.LVL34>:
  407976:	f002 f8a9 	bl	409acc <.LFE157>

0040797a <.LVL35>:
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
  40797a:	3d04      	subs	r5, #4

0040797c <.LVL36>:
  40797c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40797e:	441d      	add	r5, r3

00407980 <.LVL37>:
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  407980:	f025 0507 	bic.w	r5, r5, #7

00407984 <.LVL38>:
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  407984:	f899 3000 	ldrb.w	r3, [r9]
  407988:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  40798c:	f899 3000 	ldrb.w	r3, [r9]
  407990:	b163      	cbz	r3, 4079ac <.LVL42>
  407992:	464b      	mov	r3, r9
  407994:	f104 0234 	add.w	r2, r4, #52	; 0x34
  407998:	f109 010f 	add.w	r1, r9, #15

0040799c <.LVL39>:
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  40799c:	7858      	ldrb	r0, [r3, #1]
  40799e:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  4079a2:	f813 0f01 	ldrb.w	r0, [r3, #1]!

004079a6 <.LVL40>:
  4079a6:	b108      	cbz	r0, 4079ac <.LVL42>

004079a8 <.LVL41>:
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  4079a8:	428b      	cmp	r3, r1
  4079aa:	d1f7      	bne.n	40799c <.LVL39>

004079ac <.LVL42>:
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  4079ac:	2700      	movs	r7, #0

004079ae <.LVL43>:
  4079ae:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
  4079b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4079b4:	2b04      	cmp	r3, #4
  4079b6:	bf28      	it	cs
  4079b8:	2304      	movcs	r3, #4
  4079ba:	4699      	mov	r9, r3

004079bc <.LVL44>:
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
  4079bc:	62e3      	str	r3, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
  4079be:	6463      	str	r3, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
  4079c0:	64a7      	str	r7, [r4, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
  4079c2:	f104 0b04 	add.w	fp, r4, #4
  4079c6:	4658      	mov	r0, fp
  4079c8:	f004 fa4a 	bl	40be60 <.LFE144>

004079cc <.LVL45>:
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
  4079cc:	f104 0018 	add.w	r0, r4, #24
  4079d0:	f004 fa46 	bl	40be60 <.LFE144>

004079d4 <.LVL46>:

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
  4079d4:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4079d6:	f1c9 0305 	rsb	r3, r9, #5
  4079da:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
  4079dc:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
  4079de:	64e7      	str	r7, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
  4079e0:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4079e4:	4642      	mov	r2, r8
  4079e6:	4651      	mov	r1, sl
  4079e8:	4628      	mov	r0, r5
  4079ea:	f003 fe07 	bl	40b5fc <.LFE39>

004079ee <.LVL47>:
  4079ee:	6020      	str	r0, [r4, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
  4079f0:	b106      	cbz	r6, 4079f4 <.LBB43>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  4079f2:	6034      	str	r4, [r6, #0]

004079f4 <.LBB43>:

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
  4079f4:	f003 ff0e 	bl	40b814 <.LFE6>

004079f8 <.LVL49>:
	{
		uxCurrentNumberOfTasks++;
  4079f8:	4a3c      	ldr	r2, [pc, #240]	; (407aec <.LVL71+0x2>)
  4079fa:	6813      	ldr	r3, [r2, #0]
  4079fc:	3301      	adds	r3, #1
  4079fe:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
  407a00:	4b3b      	ldr	r3, [pc, #236]	; (407af0 <.LVL71+0x6>)
  407a02:	681b      	ldr	r3, [r3, #0]
  407a04:	2b00      	cmp	r3, #0
  407a06:	d03b      	beq.n	407a80 <.LBB49>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
  407a08:	4b3a      	ldr	r3, [pc, #232]	; (407af4 <.LVL71+0xa>)
  407a0a:	681b      	ldr	r3, [r3, #0]
  407a0c:	b93b      	cbnz	r3, 407a1e <.LVL49+0x26>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
  407a0e:	4b38      	ldr	r3, [pc, #224]	; (407af0 <.LVL71+0x6>)
  407a10:	681b      	ldr	r3, [r3, #0]
  407a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  407a14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  407a16:	429a      	cmp	r2, r3
  407a18:	d801      	bhi.n	407a1e <.LVL49+0x26>
				{
					pxCurrentTCB = pxNewTCB;
  407a1a:	4b35      	ldr	r3, [pc, #212]	; (407af0 <.LVL71+0x6>)
  407a1c:	601c      	str	r4, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
  407a1e:	4a36      	ldr	r2, [pc, #216]	; (407af8 <.LVL71+0xe>)
  407a20:	6813      	ldr	r3, [r2, #0]
  407a22:	3301      	adds	r3, #1
  407a24:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
  407a26:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  407a28:	4b34      	ldr	r3, [pc, #208]	; (407afc <.LVL71+0x12>)
  407a2a:	681b      	ldr	r3, [r3, #0]
  407a2c:	4298      	cmp	r0, r3
  407a2e:	d901      	bls.n	407a34 <.LVL49+0x3c>
  407a30:	4b32      	ldr	r3, [pc, #200]	; (407afc <.LVL71+0x12>)
  407a32:	6018      	str	r0, [r3, #0]
  407a34:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  407a38:	4659      	mov	r1, fp
  407a3a:	4b31      	ldr	r3, [pc, #196]	; (407b00 <.LVL71+0x16>)
  407a3c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  407a40:	f003 ffbc 	bl	40b9bc <.LFE142>

00407a44 <.LVL50>:

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
  407a44:	f004 f8d4 	bl	40bbf0 <vPortExitCritical>

00407a48 <.LVL51>:

	if( xSchedulerRunning != pdFALSE )
  407a48:	4b2a      	ldr	r3, [pc, #168]	; (407af4 <.LVL71+0xa>)
  407a4a:	681b      	ldr	r3, [r3, #0]
  407a4c:	2b00      	cmp	r3, #0
  407a4e:	d046      	beq.n	407ade <.LBE45>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
  407a50:	4b27      	ldr	r3, [pc, #156]	; (407af0 <.LVL71+0x6>)
  407a52:	681b      	ldr	r3, [r3, #0]
  407a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  407a56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  407a58:	429a      	cmp	r2, r3
  407a5a:	d243      	bcs.n	407ae4 <.LBE45+0x6>
		{
			taskYIELD_IF_USING_PREEMPTION();
  407a5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  407a60:	4b28      	ldr	r3, [pc, #160]	; (407b04 <.LVL71+0x1a>)
  407a62:	601a      	str	r2, [r3, #0]

00407a64 <.LVL52>:
  407a64:	f3bf 8f4f 	dsb	sy
  407a68:	f3bf 8f6f 	isb	sy

00407a6c <.LBE43>:
			xReturn = pdPASS;
  407a6c:	2001      	movs	r0, #1
  407a6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00407a72 <.LBB48>:
					vPortFree( pxStack );
  407a72:	4638      	mov	r0, r7

00407a74 <.LVL54>:
  407a74:	f004 f9fe 	bl	40be74 <vPortFree>

00407a78 <.LBE48>:
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  407a78:	f04f 30ff 	mov.w	r0, #4294967295
	}
  407a7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00407a80 <.LBB49>:
			pxCurrentTCB = pxNewTCB;
  407a80:	4b1b      	ldr	r3, [pc, #108]	; (407af0 <.LVL71+0x6>)
  407a82:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  407a84:	6813      	ldr	r3, [r2, #0]
  407a86:	2b01      	cmp	r3, #1
  407a88:	d1c9      	bne.n	407a1e <.LVL49+0x26>

00407a8a <.LBB45>:
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  407a8a:	4d1d      	ldr	r5, [pc, #116]	; (407b00 <.LVL71+0x16>)
  407a8c:	4628      	mov	r0, r5
  407a8e:	f004 f883 	bl	40bb98 <.LBE8>

00407a92 <.LVL58>:
  407a92:	f105 0014 	add.w	r0, r5, #20
  407a96:	f004 f87f 	bl	40bb98 <.LBE8>

00407a9a <.LVL59>:
  407a9a:	f105 0028 	add.w	r0, r5, #40	; 0x28
  407a9e:	f004 f87b 	bl	40bb98 <.LBE8>

00407aa2 <.LVL60>:
  407aa2:	f105 003c 	add.w	r0, r5, #60	; 0x3c
  407aa6:	f004 f877 	bl	40bb98 <.LBE8>

00407aaa <.LVL61>:
  407aaa:	f105 0050 	add.w	r0, r5, #80	; 0x50
  407aae:	f004 f873 	bl	40bb98 <.LBE8>

00407ab2 <.LVL62>:
	}

	vListInitialise( &xDelayedTaskList1 );
  407ab2:	4e15      	ldr	r6, [pc, #84]	; (407b08 <.LVL71+0x1e>)
  407ab4:	4630      	mov	r0, r6
  407ab6:	f004 f86f 	bl	40bb98 <.LBE8>

00407aba <.LVL63>:
	vListInitialise( &xDelayedTaskList2 );
  407aba:	4d14      	ldr	r5, [pc, #80]	; (407b0c <.LVL71+0x22>)
  407abc:	4628      	mov	r0, r5
  407abe:	f004 f86b 	bl	40bb98 <.LBE8>

00407ac2 <.LVL64>:
	vListInitialise( &xPendingReadyList );
  407ac2:	4813      	ldr	r0, [pc, #76]	; (407b10 <.LVL71+0x26>)
  407ac4:	f004 f868 	bl	40bb98 <.LBE8>

00407ac8 <.LVL65>:

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
  407ac8:	4812      	ldr	r0, [pc, #72]	; (407b14 <.LVL71+0x2a>)
  407aca:	f004 f865 	bl	40bb98 <.LBE8>

00407ace <.LVL66>:
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
  407ace:	4812      	ldr	r0, [pc, #72]	; (407b18 <.LVL71+0x2e>)
  407ad0:	f004 f862 	bl	40bb98 <.LBE8>

00407ad4 <.LVL67>:
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  407ad4:	4b11      	ldr	r3, [pc, #68]	; (407b1c <.LVL71+0x32>)
  407ad6:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  407ad8:	4b11      	ldr	r3, [pc, #68]	; (407b20 <.LVL71+0x36>)
  407ada:	601d      	str	r5, [r3, #0]
  407adc:	e79f      	b.n	407a1e <.LVL49+0x26>

00407ade <.LBE45>:
			xReturn = pdPASS;
  407ade:	2001      	movs	r0, #1
  407ae0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407ae4:	2001      	movs	r0, #1
		return xReturn;
  407ae6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00407aea <.LVL71>:
  407aea:	bf00      	nop
  407aec:	20417d70 	.word	0x20417d70
  407af0:	20417d64 	.word	0x20417d64
  407af4:	20417d94 	.word	0x20417d94
  407af8:	20417d80 	.word	0x20417d80
  407afc:	20417d84 	.word	0x20417d84
  407b00:	20417afc 	.word	0x20417afc
  407b04:	e000ed04 	.word	0xe000ed04
  407b08:	20417cb8 	.word	0x20417cb8
  407b0c:	20417ccc 	.word	0x20417ccc
  407b10:	20417ce0 	.word	0x20417ce0
  407b14:	20417d08 	.word	0x20417d08
  407b18:	20417cf4 	.word	0x20417cf4
  407b1c:	20417d68 	.word	0x20417d68
  407b20:	20417d6c 	.word	0x20417d6c

Disassembly of section .text._free_r%67:

00407b24 <_free_r>:
  407b24:	2900      	cmp	r1, #0
  407b26:	d044      	beq.n	407bb2 <.LVL43>
  407b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

00407b2c <.LCFI1>:
  407b2c:	460d      	mov	r5, r1
  407b2e:	4680      	mov	r8, r0
  407b30:	f004 f99c 	bl	40be6c <__malloc_lock>

00407b34 <.LVL24>:
  407b34:	f855 7c04 	ldr.w	r7, [r5, #-4]
  407b38:	4969      	ldr	r1, [pc, #420]	; (407ce0 <.LVL82+0xa>)
  407b3a:	f027 0301 	bic.w	r3, r7, #1
  407b3e:	f1a5 0408 	sub.w	r4, r5, #8

00407b42 <.LVL25>:
  407b42:	18e2      	adds	r2, r4, r3

00407b44 <.LVL26>:
  407b44:	688e      	ldr	r6, [r1, #8]
  407b46:	6850      	ldr	r0, [r2, #4]
  407b48:	42b2      	cmp	r2, r6
  407b4a:	f020 0003 	bic.w	r0, r0, #3

00407b4e <.LVL27>:
  407b4e:	d05e      	beq.n	407c0e <.LVL56>
  407b50:	07fe      	lsls	r6, r7, #31
  407b52:	6050      	str	r0, [r2, #4]

00407b54 <.LVL28>:
  407b54:	d40b      	bmi.n	407b6e <.LVL34>
  407b56:	f855 7c08 	ldr.w	r7, [r5, #-8]

00407b5a <.LVL29>:
  407b5a:	1be4      	subs	r4, r4, r7
  407b5c:	f101 0e08 	add.w	lr, r1, #8
  407b60:	68a5      	ldr	r5, [r4, #8]

00407b62 <.LVL31>:
  407b62:	4575      	cmp	r5, lr
  407b64:	443b      	add	r3, r7
  407b66:	d06d      	beq.n	407c44 <.LVL70>
  407b68:	68e7      	ldr	r7, [r4, #12]

00407b6a <.LVL33>:
  407b6a:	60ef      	str	r7, [r5, #12]
  407b6c:	60bd      	str	r5, [r7, #8]

00407b6e <.LVL34>:
  407b6e:	1815      	adds	r5, r2, r0
  407b70:	686d      	ldr	r5, [r5, #4]
  407b72:	07ed      	lsls	r5, r5, #31
  407b74:	d53e      	bpl.n	407bf4 <.LCFI5>
  407b76:	f043 0201 	orr.w	r2, r3, #1

00407b7a <.LVL35>:
  407b7a:	6062      	str	r2, [r4, #4]
  407b7c:	50e3      	str	r3, [r4, r3]

00407b7e <.LVL36>:
  407b7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  407b82:	d217      	bcs.n	407bb4 <.LCFI3>
  407b84:	08db      	lsrs	r3, r3, #3

00407b86 <.LVL37>:
  407b86:	1c58      	adds	r0, r3, #1
  407b88:	109a      	asrs	r2, r3, #2
  407b8a:	684d      	ldr	r5, [r1, #4]
  407b8c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  407b90:	60a7      	str	r7, [r4, #8]
  407b92:	2301      	movs	r3, #1

00407b94 <.LVL38>:
  407b94:	4093      	lsls	r3, r2
  407b96:	eb01 02c0 	add.w	r2, r1, r0, lsl #3

00407b9a <.LVL39>:
  407b9a:	432b      	orrs	r3, r5
  407b9c:	3a08      	subs	r2, #8

00407b9e <.LVL40>:
  407b9e:	60e2      	str	r2, [r4, #12]
  407ba0:	604b      	str	r3, [r1, #4]
  407ba2:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  407ba6:	60fc      	str	r4, [r7, #12]

00407ba8 <.LVL41>:
  407ba8:	4640      	mov	r0, r8
  407baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

00407bae <.LCFI2>:
  407bae:	f004 b95f 	b.w	40be70 <__malloc_unlock>

00407bb2 <.LVL43>:
  407bb2:	4770      	bx	lr

00407bb4 <.LCFI3>:
  407bb4:	0a5a      	lsrs	r2, r3, #9
  407bb6:	2a04      	cmp	r2, #4
  407bb8:	d852      	bhi.n	407c60 <.LVL74>
  407bba:	099a      	lsrs	r2, r3, #6
  407bbc:	f102 0739 	add.w	r7, r2, #57	; 0x39
  407bc0:	00ff      	lsls	r7, r7, #3
  407bc2:	f102 0538 	add.w	r5, r2, #56	; 0x38

00407bc6 <.LVL45>:
  407bc6:	19c8      	adds	r0, r1, r7
  407bc8:	59ca      	ldr	r2, [r1, r7]
  407bca:	3808      	subs	r0, #8

00407bcc <.LVL46>:
  407bcc:	4290      	cmp	r0, r2
  407bce:	d04f      	beq.n	407c70 <.LVL75>
  407bd0:	6851      	ldr	r1, [r2, #4]
  407bd2:	f021 0103 	bic.w	r1, r1, #3
  407bd6:	428b      	cmp	r3, r1
  407bd8:	d232      	bcs.n	407c40 <.LVL68>
  407bda:	6892      	ldr	r2, [r2, #8]
  407bdc:	4290      	cmp	r0, r2
  407bde:	d1f7      	bne.n	407bd0 <.LVL46+0x4>

00407be0 <.LVL48>:
  407be0:	68c3      	ldr	r3, [r0, #12]

00407be2 <.LVL49>:
  407be2:	60a0      	str	r0, [r4, #8]
  407be4:	60e3      	str	r3, [r4, #12]
  407be6:	609c      	str	r4, [r3, #8]
  407be8:	60c4      	str	r4, [r0, #12]
  407bea:	4640      	mov	r0, r8

00407bec <.LVL50>:
  407bec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

00407bf0 <.LCFI4>:
  407bf0:	f004 b93e 	b.w	40be70 <__malloc_unlock>

00407bf4 <.LCFI5>:
  407bf4:	6895      	ldr	r5, [r2, #8]
  407bf6:	4f3b      	ldr	r7, [pc, #236]	; (407ce4 <.LVL82+0xe>)
  407bf8:	42bd      	cmp	r5, r7
  407bfa:	4403      	add	r3, r0
  407bfc:	d040      	beq.n	407c80 <.LVL79>
  407bfe:	68d0      	ldr	r0, [r2, #12]

00407c00 <.LVL54>:
  407c00:	60e8      	str	r0, [r5, #12]
  407c02:	f043 0201 	orr.w	r2, r3, #1

00407c06 <.LVL55>:
  407c06:	6085      	str	r5, [r0, #8]
  407c08:	6062      	str	r2, [r4, #4]
  407c0a:	50e3      	str	r3, [r4, r3]
  407c0c:	e7b7      	b.n	407b7e <.LVL36>

00407c0e <.LVL56>:
  407c0e:	07ff      	lsls	r7, r7, #31

00407c10 <.LVL57>:
  407c10:	4403      	add	r3, r0
  407c12:	d407      	bmi.n	407c24 <.LVL64>
  407c14:	f855 2c08 	ldr.w	r2, [r5, #-8]

00407c18 <.LVL59>:
  407c18:	1aa4      	subs	r4, r4, r2

00407c1a <.LVL60>:
  407c1a:	4413      	add	r3, r2
  407c1c:	68a0      	ldr	r0, [r4, #8]

00407c1e <.LVL62>:
  407c1e:	68e2      	ldr	r2, [r4, #12]

00407c20 <.LVL63>:
  407c20:	60c2      	str	r2, [r0, #12]
  407c22:	6090      	str	r0, [r2, #8]

00407c24 <.LVL64>:
  407c24:	4a30      	ldr	r2, [pc, #192]	; (407ce8 <.LVL82+0x12>)
  407c26:	6812      	ldr	r2, [r2, #0]
  407c28:	f043 0001 	orr.w	r0, r3, #1
  407c2c:	4293      	cmp	r3, r2
  407c2e:	6060      	str	r0, [r4, #4]

00407c30 <.LVL65>:
  407c30:	608c      	str	r4, [r1, #8]
  407c32:	d3b9      	bcc.n	407ba8 <.LVL41>
  407c34:	4b2d      	ldr	r3, [pc, #180]	; (407cec <.LVL82+0x16>)

00407c36 <.LVL66>:
  407c36:	4640      	mov	r0, r8
  407c38:	6819      	ldr	r1, [r3, #0]
  407c3a:	f002 f8bd 	bl	409db8 <.LFE0>

00407c3e <.LVL67>:
  407c3e:	e7b3      	b.n	407ba8 <.LVL41>

00407c40 <.LVL68>:
  407c40:	4610      	mov	r0, r2

00407c42 <.LVL69>:
  407c42:	e7cd      	b.n	407be0 <.LVL48>

00407c44 <.LVL70>:
  407c44:	1811      	adds	r1, r2, r0
  407c46:	6849      	ldr	r1, [r1, #4]
  407c48:	07c9      	lsls	r1, r1, #31
  407c4a:	d444      	bmi.n	407cd6 <.LVL82>
  407c4c:	6891      	ldr	r1, [r2, #8]
  407c4e:	68d2      	ldr	r2, [r2, #12]

00407c50 <.LVL71>:
  407c50:	60ca      	str	r2, [r1, #12]
  407c52:	4403      	add	r3, r0

00407c54 <.LVL72>:
  407c54:	f043 0001 	orr.w	r0, r3, #1

00407c58 <.LVL73>:
  407c58:	6091      	str	r1, [r2, #8]
  407c5a:	6060      	str	r0, [r4, #4]
  407c5c:	50e3      	str	r3, [r4, r3]
  407c5e:	e7a3      	b.n	407ba8 <.LVL41>

00407c60 <.LVL74>:
  407c60:	2a14      	cmp	r2, #20
  407c62:	d816      	bhi.n	407c92 <.LVL81>
  407c64:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  407c68:	00ff      	lsls	r7, r7, #3
  407c6a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  407c6e:	e7aa      	b.n	407bc6 <.LVL45>

00407c70 <.LVL75>:
  407c70:	10aa      	asrs	r2, r5, #2

00407c72 <.LVL76>:
  407c72:	2301      	movs	r3, #1

00407c74 <.LVL77>:
  407c74:	684d      	ldr	r5, [r1, #4]

00407c76 <.LVL78>:
  407c76:	4093      	lsls	r3, r2
  407c78:	432b      	orrs	r3, r5
  407c7a:	604b      	str	r3, [r1, #4]
  407c7c:	4603      	mov	r3, r0
  407c7e:	e7b0      	b.n	407be2 <.LVL49>

00407c80 <.LVL79>:
  407c80:	f043 0201 	orr.w	r2, r3, #1

00407c84 <.LVL80>:
  407c84:	614c      	str	r4, [r1, #20]
  407c86:	610c      	str	r4, [r1, #16]
  407c88:	60e5      	str	r5, [r4, #12]
  407c8a:	60a5      	str	r5, [r4, #8]
  407c8c:	6062      	str	r2, [r4, #4]
  407c8e:	50e3      	str	r3, [r4, r3]
  407c90:	e78a      	b.n	407ba8 <.LVL41>

00407c92 <.LVL81>:
  407c92:	2a54      	cmp	r2, #84	; 0x54
  407c94:	d806      	bhi.n	407ca4 <.LVL81+0x12>
  407c96:	0b1a      	lsrs	r2, r3, #12
  407c98:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  407c9c:	00ff      	lsls	r7, r7, #3
  407c9e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  407ca2:	e790      	b.n	407bc6 <.LVL45>
  407ca4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407ca8:	d806      	bhi.n	407cb8 <.LVL81+0x26>
  407caa:	0bda      	lsrs	r2, r3, #15
  407cac:	f102 0778 	add.w	r7, r2, #120	; 0x78
  407cb0:	00ff      	lsls	r7, r7, #3
  407cb2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  407cb6:	e786      	b.n	407bc6 <.LVL45>
  407cb8:	f240 5054 	movw	r0, #1364	; 0x554
  407cbc:	4282      	cmp	r2, r0
  407cbe:	d806      	bhi.n	407cce <.LVL81+0x3c>
  407cc0:	0c9a      	lsrs	r2, r3, #18
  407cc2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  407cc6:	00ff      	lsls	r7, r7, #3
  407cc8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  407ccc:	e77b      	b.n	407bc6 <.LVL45>
  407cce:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  407cd2:	257e      	movs	r5, #126	; 0x7e
  407cd4:	e777      	b.n	407bc6 <.LVL45>

00407cd6 <.LVL82>:
  407cd6:	f043 0101 	orr.w	r1, r3, #1
  407cda:	6061      	str	r1, [r4, #4]
  407cdc:	6013      	str	r3, [r2, #0]
  407cde:	e763      	b.n	407ba8 <.LVL41>
  407ce0:	204170b0 	.word	0x204170b0
  407ce4:	204170b8 	.word	0x204170b8
  407ce8:	20417dc4 	.word	0x20417dc4
  407cec:	20417dbc 	.word	0x20417dbc

Disassembly of section .text.xQueueSemaphoreTake%68:

00407cf0 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
  407cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

00407cf4 <.LCFI19>:
  407cf4:	b084      	sub	sp, #16

00407cf6 <.LCFI20>:
  407cf6:	4604      	mov	r4, r0
  407cf8:	9101      	str	r1, [sp, #4]

00407cfa <.LVL159>:
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
  407cfa:	f04f 0800 	mov.w	r8, #0
BaseType_t xEntryTimeSet = pdFALSE;
  407cfe:	4646      	mov	r6, r8

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
  407d00:	4645      	mov	r5, r8

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
  407d02:	4f51      	ldr	r7, [pc, #324]	; (407e48 <.LBB69+0x6>)
  407d04:	e049      	b.n	407d9a <.LVL181>

00407d06 <.LBB62>:
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
  407d06:	3b01      	subs	r3, #1

00407d08 <.LVL161>:
  407d08:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  407d0a:	6823      	ldr	r3, [r4, #0]

00407d0c <.LVL162>:
  407d0c:	b14b      	cbz	r3, 407d22 <.LBB63>

00407d0e <.LVL163>:
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  407d0e:	6923      	ldr	r3, [r4, #16]
  407d10:	b95b      	cbnz	r3, 407d2a <.LVL167+0x4>
				taskEXIT_CRITICAL();
  407d12:	f003 ff6d 	bl	40bbf0 <vPortExitCritical>

00407d16 <.LVL164>:
				return pdPASS;
  407d16:	f04f 0801 	mov.w	r8, #1

00407d1a <.LBE62>:
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
  407d1a:	4640      	mov	r0, r8
  407d1c:	b004      	add	sp, #16

00407d1e <.LCFI21>:
  407d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00407d22 <.LBB63>:
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  407d22:	f003 fdeb 	bl	40b8fc <.LFE27>

00407d26 <.LVL167>:
  407d26:	6060      	str	r0, [r4, #4]
  407d28:	e7f1      	b.n	407d0e <.LVL163>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  407d2a:	f104 0010 	add.w	r0, r4, #16
  407d2e:	f002 fb5d 	bl	40a3ec <.LFE0>

00407d32 <.LVL168>:
  407d32:	2800      	cmp	r0, #0
  407d34:	d0ed      	beq.n	407d12 <.LVL163+0x4>
						queueYIELD_IF_USING_PREEMPTION();
  407d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  407d3a:	4b43      	ldr	r3, [pc, #268]	; (407e48 <.LBB69+0x6>)
  407d3c:	601a      	str	r2, [r3, #0]
  407d3e:	f3bf 8f4f 	dsb	sy
  407d42:	f3bf 8f6f 	isb	sy
  407d46:	e7e4      	b.n	407d12 <.LVL163+0x4>
					taskEXIT_CRITICAL();
  407d48:	f003 ff52 	bl	40bbf0 <vPortExitCritical>

00407d4c <.LVL169>:
					return errQUEUE_EMPTY;
  407d4c:	f04f 0800 	mov.w	r8, #0
  407d50:	e7e3      	b.n	407d1a <.LBE62>
					vTaskInternalSetTimeOutState( &xTimeOut );
  407d52:	a802      	add	r0, sp, #8
  407d54:	f003 fe3e 	bl	40b9d4 <.LFE6>

00407d58 <.LVL170>:
  407d58:	e029      	b.n	407dae <.LBE64>

00407d5a <.LBE63>:
		prvLockQueue( pxQueue );
  407d5a:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
  407d5e:	e032      	b.n	407dc6 <.LVL188+0xc>
  407d60:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
  407d64:	e035      	b.n	407dd2 <.LVL188+0x18>
						taskENTER_CRITICAL();
  407d66:	f003 fd55 	bl	40b814 <.LFE6>

00407d6a <.LVL171>:
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  407d6a:	6860      	ldr	r0, [r4, #4]
  407d6c:	f001 fefc 	bl	409b68 <xTaskPriorityInherit>

00407d70 <.LVL172>:
  407d70:	4680      	mov	r8, r0

00407d72 <.LVL173>:
						taskEXIT_CRITICAL();
  407d72:	f003 ff3d 	bl	40bbf0 <vPortExitCritical>

00407d76 <.LVL174>:
  407d76:	e03c      	b.n	407df2 <.LVL191+0xa>

00407d78 <.LVL175>:
				prvUnlockQueue( pxQueue );
  407d78:	4620      	mov	r0, r4
  407d7a:	f002 fa7b 	bl	40a274 <.LFE19>

00407d7e <.LVL176>:
				( void ) xTaskResumeAll();
  407d7e:	f000 ffef 	bl	408d60 <.LBE840>

00407d82 <.LVL177>:
  407d82:	e009      	b.n	407d98 <.LVL180+0x4>
			prvUnlockQueue( pxQueue );
  407d84:	4620      	mov	r0, r4
  407d86:	f002 fa75 	bl	40a274 <.LFE19>

00407d8a <.LVL178>:
			( void ) xTaskResumeAll();
  407d8a:	f000 ffe9 	bl	408d60 <.LBE840>

00407d8e <.LVL179>:
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  407d8e:	4620      	mov	r0, r4
  407d90:	f003 ff0d 	bl	40bbae <.LFE4>

00407d94 <.LVL180>:
  407d94:	2800      	cmp	r0, #0
  407d96:	d140      	bne.n	407e1a <.LVL194+0x14>
  407d98:	2601      	movs	r6, #1

00407d9a <.LVL181>:
		taskENTER_CRITICAL();
  407d9a:	f003 fd3b 	bl	40b814 <.LFE6>

00407d9e <.LBB64>:
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
  407d9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38

00407da0 <.LVL183>:
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
  407da0:	2b00      	cmp	r3, #0
  407da2:	d1b0      	bne.n	407d06 <.LBB62>
				if( xTicksToWait == ( TickType_t ) 0 )
  407da4:	9b01      	ldr	r3, [sp, #4]

00407da6 <.LVL184>:
  407da6:	2b00      	cmp	r3, #0
  407da8:	d0ce      	beq.n	407d48 <.LVL168+0x16>
				else if( xEntryTimeSet == pdFALSE )
  407daa:	2e00      	cmp	r6, #0
  407dac:	d0d1      	beq.n	407d52 <.LVL169+0x6>

00407dae <.LBE64>:
		taskEXIT_CRITICAL();
  407dae:	f003 ff1f 	bl	40bbf0 <vPortExitCritical>

00407db2 <.LVL186>:
		vTaskSuspendAll();
  407db2:	f003 ff89 	bl	40bcc8 <vTaskSuspendAll>

00407db6 <.LVL187>:
		prvLockQueue( pxQueue );
  407db6:	f003 fd2d 	bl	40b814 <.LFE6>

00407dba <.LVL188>:
  407dba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  407dbe:	b25b      	sxtb	r3, r3
  407dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
  407dc4:	d0c9      	beq.n	407d5a <.LBE63>
  407dc6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  407dca:	b25b      	sxtb	r3, r3
  407dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
  407dd0:	d0c6      	beq.n	407d60 <.LBE63+0x6>
  407dd2:	f003 ff0d 	bl	40bbf0 <vPortExitCritical>

00407dd6 <.LVL189>:
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  407dd6:	a901      	add	r1, sp, #4
  407dd8:	a802      	add	r0, sp, #8
  407dda:	f002 ff7f 	bl	40acdc <.LFE158>

00407dde <.LVL190>:
  407dde:	2800      	cmp	r0, #0
  407de0:	d1d0      	bne.n	407d84 <.LVL177+0x2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  407de2:	4620      	mov	r0, r4
  407de4:	f003 fee3 	bl	40bbae <.LFE4>

00407de8 <.LVL191>:
  407de8:	2800      	cmp	r0, #0
  407dea:	d0c5      	beq.n	407d78 <.LVL175>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  407dec:	6823      	ldr	r3, [r4, #0]
  407dee:	2b00      	cmp	r3, #0
  407df0:	d0b9      	beq.n	407d66 <.LBE63+0xc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  407df2:	9901      	ldr	r1, [sp, #4]
  407df4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  407df8:	f003 fd72 	bl	40b8e0 <vTaskPlaceOnEventList>

00407dfc <.LVL192>:
				prvUnlockQueue( pxQueue );
  407dfc:	4620      	mov	r0, r4
  407dfe:	f002 fa39 	bl	40a274 <.LFE19>

00407e02 <.LVL193>:
				if( xTaskResumeAll() == pdFALSE )
  407e02:	f000 ffad 	bl	408d60 <.LBE840>

00407e06 <.LVL194>:
  407e06:	2800      	cmp	r0, #0
  407e08:	d1c6      	bne.n	407d98 <.LVL180+0x4>
					portYIELD_WITHIN_API();
  407e0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  407e0e:	603b      	str	r3, [r7, #0]
  407e10:	f3bf 8f4f 	dsb	sy
  407e14:	f3bf 8f6f 	isb	sy
  407e18:	e7be      	b.n	407d98 <.LVL180+0x4>
					if( xInheritanceOccurred != pdFALSE )
  407e1a:	f1b8 0f00 	cmp.w	r8, #0
  407e1e:	f43f af7c 	beq.w	407d1a <.LBE62>
						taskENTER_CRITICAL();
  407e22:	f003 fcf7 	bl	40b814 <.LFE6>

00407e26 <.LBB65>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
  407e26:	6a63      	ldr	r3, [r4, #36]	; 0x24
  407e28:	b15b      	cbz	r3, 407e42 <.LBB69>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
  407e2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  407e2c:	6819      	ldr	r1, [r3, #0]
  407e2e:	f1c1 0105 	rsb	r1, r1, #5

00407e32 <.LBE66>:
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
  407e32:	6860      	ldr	r0, [r4, #4]
  407e34:	f002 fca4 	bl	40a780 <vTaskPriorityDisinheritAfterTimeout>

00407e38 <.LBE65>:
						taskEXIT_CRITICAL();
  407e38:	f003 feda 	bl	40bbf0 <vPortExitCritical>

00407e3c <.LVL198>:
				return errQUEUE_EMPTY;
  407e3c:	f04f 0800 	mov.w	r8, #0
  407e40:	e76b      	b.n	407d1a <.LBE62>

00407e42 <.LBB69>:
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
  407e42:	2100      	movs	r1, #0
  407e44:	e7f5      	b.n	407e32 <.LBE66>
  407e46:	bf00      	nop
  407e48:	e000ed04 	.word	0xe000ed04

Disassembly of section .text.Console_UART_Tasks%69:

00407e4c <Console_UART_Tasks>:
        consUartData.isReadComplete = true;
    }
}

void Console_UART_Tasks(SYS_MODULE_OBJ object)
{
  407e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

00407e50 <.LCFI5>:
    /* Update the application state machine based
     * on the current state */
    struct QPacket pkt;
    size_t *sizeRead;

    switch(consUartData.state)
  407e50:	4b4c      	ldr	r3, [pc, #304]	; (407f84 <.LVL45+0x4>)
  407e52:	781b      	ldrb	r3, [r3, #0]
  407e54:	2b08      	cmp	r3, #8
  407e56:	f200 8093 	bhi.w	407f80 <.LVL45>
  407e5a:	e8df f003 	tbb	[pc, r3]
  407e5e:	9105      	.short	0x9105
  407e60:	6029124f 	.word	0x6029124f
  407e64:	9191      	.short	0x9191
  407e66:	8f          	.byte	0x8f
  407e67:	00          	.byte	0x00
    {
        case CONSOLE_UART_STATE_INIT:

            /* Register a callback with device layer to get event notification (for end point 0) */
            USART1_WriteCallbackRegister(UARTDeviceWriteCallback, 0);
  407e68:	2100      	movs	r1, #0
  407e6a:	4847      	ldr	r0, [pc, #284]	; (407f88 <.LVL45+0x8>)

00407e6c <.LVL19>:
  407e6c:	f003 ff5c 	bl	40bd28 <.LFE162>

00407e70 <.LVL20>:
            USART1_ReadCallbackRegister(UARTDeviceReadCallback, 0);
  407e70:	2100      	movs	r1, #0
  407e72:	4846      	ldr	r0, [pc, #280]	; (407f8c <.LVL45+0xc>)
  407e74:	f003 ff60 	bl	40bd38 <.LFE150>

00407e78 <.LVL21>:

            /* If the driver was opened, it is ready for operation */
            consUartData.state = CONSOLE_UART_STATE_READY;
  407e78:	2202      	movs	r2, #2
  407e7a:	4b42      	ldr	r3, [pc, #264]	; (407f84 <.LVL45+0x4>)
  407e7c:	701a      	strb	r2, [r3, #0]

            break;
  407e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00407e82 <.LVL22>:

        case CONSOLE_UART_STATE_SCHEDULE_READ:

            consUartData.state = CONSOLE_UART_STATE_WAIT_FOR_READ_COMPLETE;
  407e82:	2204      	movs	r2, #4
  407e84:	4b3f      	ldr	r3, [pc, #252]	; (407f84 <.LVL45+0x4>)
  407e86:	701a      	strb	r2, [r3, #0]

            if (readQueue.numElem)
  407e88:	4b41      	ldr	r3, [pc, #260]	; (407f90 <.LVL45+0x10>)
  407e8a:	689b      	ldr	r3, [r3, #8]
  407e8c:	2b00      	cmp	r3, #0
  407e8e:	d077      	beq.n	407f80 <.LVL45>
            {
                consUartData.isReadComplete = false;
  407e90:	2200      	movs	r2, #0
  407e92:	4b3c      	ldr	r3, [pc, #240]	; (407f84 <.LVL45+0x4>)
  407e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                pkt = rdQueueElements[readQueue.tailPos];
  407e98:	4b3e      	ldr	r3, [pc, #248]	; (407f94 <.LVL45+0x14>)
  407e9a:	4a3d      	ldr	r2, [pc, #244]	; (407f90 <.LVL45+0x10>)
  407e9c:	6812      	ldr	r2, [r2, #0]
  407e9e:	eb03 01c2 	add.w	r1, r3, r2, lsl #3

00407ea2 <.LVL23>:

                USART1_Read (pkt.data.buf, pkt.sz);
  407ea2:	6849      	ldr	r1, [r1, #4]

00407ea4 <.LVL24>:
  407ea4:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]

00407ea8 <.LVL25>:
  407ea8:	f003 fa3e 	bl	40b328 <.LFE145>

00407eac <.LVL26>:
  407eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00407eb0 <.LVL27>:
            }
            break;

        case CONSOLE_UART_STATE_WAIT_FOR_READ_COMPLETE:

            if(consUartData.isReadComplete)
  407eb0:	4b34      	ldr	r3, [pc, #208]	; (407f84 <.LVL45+0x4>)
  407eb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
  407eb6:	b943      	cbnz	r3, 407eca <.LVL27+0x1a>
                    consUartData.state = CONSOLE_UART_STATE_SCHEDULE_READ;
                }
            }
            else
            {
                if (writeQueue.numElem)
  407eb8:	4b37      	ldr	r3, [pc, #220]	; (407f98 <.LVL45+0x18>)
  407eba:	689b      	ldr	r3, [r3, #8]
  407ebc:	2b00      	cmp	r3, #0
  407ebe:	d05f      	beq.n	407f80 <.LVL45>
                {
                    consUartData.state = CONSOLE_UART_STATE_SCHEDULE_WRITE;
  407ec0:	2205      	movs	r2, #5
  407ec2:	4b30      	ldr	r3, [pc, #192]	; (407f84 <.LVL45+0x4>)
  407ec4:	701a      	strb	r2, [r3, #0]
  407ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                sizeRead = &rdQueueElements[readQueue.tailPos].sz;
  407eca:	4c31      	ldr	r4, [pc, #196]	; (407f90 <.LVL45+0x10>)
  407ecc:	6825      	ldr	r5, [r4, #0]

00407ece <.LVL28>:
                popQueue(&readQueue);
  407ece:	4620      	mov	r0, r4

00407ed0 <.LVL29>:
  407ed0:	f003 fd30 	bl	40b934 <.LFE4>

00407ed4 <.LVL30>:
                if (readQueue.numElem == 0)
  407ed4:	68a3      	ldr	r3, [r4, #8]
  407ed6:	b963      	cbnz	r3, 407ef2 <.LVL31+0xa>
                    if (consUartData.rdCallback != NULL)
  407ed8:	4b2a      	ldr	r3, [pc, #168]	; (407f84 <.LVL45+0x4>)
  407eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  407edc:	b123      	cbz	r3, 407ee8 <.LVL31>
                sizeRead = &rdQueueElements[readQueue.tailPos].sz;
  407ede:	482d      	ldr	r0, [pc, #180]	; (407f94 <.LVL45+0x14>)
  407ee0:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
                        consUartData.rdCallback(sizeRead);
  407ee4:	3004      	adds	r0, #4
  407ee6:	4798      	blx	r3

00407ee8 <.LVL31>:
                    consUartData.state = CONSOLE_UART_STATE_READY;
  407ee8:	2202      	movs	r2, #2
  407eea:	4b26      	ldr	r3, [pc, #152]	; (407f84 <.LVL45+0x4>)
  407eec:	701a      	strb	r2, [r3, #0]
  407eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    consUartData.state = CONSOLE_UART_STATE_SCHEDULE_READ;
  407ef2:	2203      	movs	r2, #3
  407ef4:	4b23      	ldr	r3, [pc, #140]	; (407f84 <.LVL45+0x4>)
  407ef6:	701a      	strb	r2, [r3, #0]
  407ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00407efc <.LVL33>:
            }
            break;

        case CONSOLE_UART_STATE_READY:

            if (readQueue.numElem)
  407efc:	4b24      	ldr	r3, [pc, #144]	; (407f90 <.LVL45+0x10>)
  407efe:	689b      	ldr	r3, [r3, #8]
  407f00:	b943      	cbnz	r3, 407f14 <.LVL33+0x18>
            {
                consUartData.state = CONSOLE_UART_STATE_SCHEDULE_READ;
            }
            else if (writeQueue.numElem)
  407f02:	4b25      	ldr	r3, [pc, #148]	; (407f98 <.LVL45+0x18>)
  407f04:	689b      	ldr	r3, [r3, #8]
  407f06:	2b00      	cmp	r3, #0
  407f08:	d03a      	beq.n	407f80 <.LVL45>
            {
                /* If there is data to be written, then try writing it */
                consUartData.state = CONSOLE_UART_STATE_SCHEDULE_WRITE;
  407f0a:	2205      	movs	r2, #5
  407f0c:	4b1d      	ldr	r3, [pc, #116]	; (407f84 <.LVL45+0x4>)
  407f0e:	701a      	strb	r2, [r3, #0]
  407f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                consUartData.state = CONSOLE_UART_STATE_SCHEDULE_READ;
  407f14:	2203      	movs	r2, #3
  407f16:	4b1b      	ldr	r3, [pc, #108]	; (407f84 <.LVL45+0x4>)
  407f18:	701a      	strb	r2, [r3, #0]
  407f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            }
            break;

        case CONSOLE_UART_STATE_SCHEDULE_WRITE:

            if (writeQueue.numElem)
  407f1e:	4b1e      	ldr	r3, [pc, #120]	; (407f98 <.LVL45+0x18>)
  407f20:	689b      	ldr	r3, [r3, #8]
  407f22:	b36b      	cbz	r3, 407f80 <.LVL45>
            {
                /* This means there is data to sent out */
                pkt = wrQueueElements[writeQueue.tailPos];
  407f24:	4b1d      	ldr	r3, [pc, #116]	; (407f9c <.LVL45+0x1c>)
  407f26:	4a1c      	ldr	r2, [pc, #112]	; (407f98 <.LVL45+0x18>)
  407f28:	6812      	ldr	r2, [r2, #0]
  407f2a:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
  407f2e:	f853 6032 	ldr.w	r6, [r3, r2, lsl #3]

00407f32 <.LVL34>:
  407f32:	684d      	ldr	r5, [r1, #4]

00407f34 <.LBB6>:

                    if(status == true)
                    {
                        /* This means this buffer was added successfully to
                         * the PLIB. Do a callback. */
                        if (consUartData.wrCallback != NULL)
  407f34:	f8df 804c 	ldr.w	r8, [pc, #76]	; 407f84 <.LVL45+0x4>
                        {
                            consUartData.wrCallback((void *)wrQueueElements[writeQueue.tailPos].data.cbuf);
                        }

                        /* Remove this element from the write queue */
                        popQueue(&writeQueue);
  407f38:	4c17      	ldr	r4, [pc, #92]	; (407f98 <.LVL45+0x18>)
                        pkt = wrQueueElements[writeQueue.tailPos];
  407f3a:	461f      	mov	r7, r3
  407f3c:	e00e      	b.n	407f5c <.LBB7>

00407f3e <.LVL36>:
                            consUartData.wrCallback((void *)wrQueueElements[writeQueue.tailPos].data.cbuf);
  407f3e:	6822      	ldr	r2, [r4, #0]
  407f40:	f857 0032 	ldr.w	r0, [r7, r2, lsl #3]

00407f44 <.LVL37>:
  407f44:	4798      	blx	r3
                        popQueue(&writeQueue);
  407f46:	4620      	mov	r0, r4
  407f48:	f003 fcf4 	bl	40b934 <.LFE4>

00407f4c <.LVL39>:
                        pkt = wrQueueElements[writeQueue.tailPos];
  407f4c:	6823      	ldr	r3, [r4, #0]
  407f4e:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
  407f52:	f857 6033 	ldr.w	r6, [r7, r3, lsl #3]

00407f56 <.LVL40>:
  407f56:	6855      	ldr	r5, [r2, #4]

00407f58 <.LBE6>:
                    {
                        /* Got an invalid handle. This most likely means
                         * that the write buffer queue is full */
                    }

                } while(writeQueue.numElem);
  407f58:	68a3      	ldr	r3, [r4, #8]
  407f5a:	b153      	cbz	r3, 407f72 <.LBE7>

00407f5c <.LBB7>:
                    bool status = USART1_Write(pkt.data.buf, pkt.sz);
  407f5c:	4629      	mov	r1, r5
  407f5e:	4630      	mov	r0, r6
  407f60:	f003 f844 	bl	40afec <.LFE156>

00407f64 <.LVL42>:
                    if(status == true)
  407f64:	2800      	cmp	r0, #0
  407f66:	d0f7      	beq.n	407f58 <.LBE6>
                        if (consUartData.wrCallback != NULL)
  407f68:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
  407f6c:	2b00      	cmp	r3, #0
  407f6e:	d1e6      	bne.n	407f3e <.LVL36>
  407f70:	e7e9      	b.n	407f46 <.LVL37+0x2>

00407f72 <.LBE7>:
                /* If we are here, it either means there is nothing more to
                 * write of the write buffer queue is full. We cannot do much
                 * with respect to write at point. We move the state to
                 * ready */

                consUartData.state = CONSOLE_UART_STATE_READY;
  407f72:	2202      	movs	r2, #2
  407f74:	4b03      	ldr	r3, [pc, #12]	; (407f84 <.LVL45+0x4>)
  407f76:	701a      	strb	r2, [r3, #0]
  407f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00407f7c <.LVL44>:
        case CONSOLE_UART_STATE_OPERATIONAL_ERROR:

            /* We arrive at this state if the UART driver reports an error on a read or write operation
               We will attempt to recover by flushing the local buffers */

            Console_UART_Flush();
  407f7c:	f003 f920 	bl	40b1c0 <Console_UART_Flush>

00407f80 <.LVL45>:
  407f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407f84:	20417bb0 	.word	0x20417bb0
  407f88:	0040bd19 	.word	0x0040bd19
  407f8c:	0040bb3d 	.word	0x0040bb3d
  407f90:	20417d1c 	.word	0x20417d1c
  407f94:	20417b60 	.word	0x20417b60
  407f98:	20417d30 	.word	0x20417d30
  407f9c:	204174b8 	.word	0x204174b8

Disassembly of section .text%70:

00407fa0 <memcpy>:
  407fa0:	4684      	mov	ip, r0
  407fa2:	ea41 0300 	orr.w	r3, r1, r0
  407fa6:	f013 0303 	ands.w	r3, r3, #3
  407faa:	d16d      	bne.n	408088 <memcpy+0xe8>
  407fac:	3a40      	subs	r2, #64	; 0x40
  407fae:	d341      	bcc.n	408034 <memcpy+0x94>
  407fb0:	f851 3b04 	ldr.w	r3, [r1], #4
  407fb4:	f840 3b04 	str.w	r3, [r0], #4
  407fb8:	f851 3b04 	ldr.w	r3, [r1], #4
  407fbc:	f840 3b04 	str.w	r3, [r0], #4
  407fc0:	f851 3b04 	ldr.w	r3, [r1], #4
  407fc4:	f840 3b04 	str.w	r3, [r0], #4
  407fc8:	f851 3b04 	ldr.w	r3, [r1], #4
  407fcc:	f840 3b04 	str.w	r3, [r0], #4
  407fd0:	f851 3b04 	ldr.w	r3, [r1], #4
  407fd4:	f840 3b04 	str.w	r3, [r0], #4
  407fd8:	f851 3b04 	ldr.w	r3, [r1], #4
  407fdc:	f840 3b04 	str.w	r3, [r0], #4
  407fe0:	f851 3b04 	ldr.w	r3, [r1], #4
  407fe4:	f840 3b04 	str.w	r3, [r0], #4
  407fe8:	f851 3b04 	ldr.w	r3, [r1], #4
  407fec:	f840 3b04 	str.w	r3, [r0], #4
  407ff0:	f851 3b04 	ldr.w	r3, [r1], #4
  407ff4:	f840 3b04 	str.w	r3, [r0], #4
  407ff8:	f851 3b04 	ldr.w	r3, [r1], #4
  407ffc:	f840 3b04 	str.w	r3, [r0], #4
  408000:	f851 3b04 	ldr.w	r3, [r1], #4
  408004:	f840 3b04 	str.w	r3, [r0], #4
  408008:	f851 3b04 	ldr.w	r3, [r1], #4
  40800c:	f840 3b04 	str.w	r3, [r0], #4
  408010:	f851 3b04 	ldr.w	r3, [r1], #4
  408014:	f840 3b04 	str.w	r3, [r0], #4
  408018:	f851 3b04 	ldr.w	r3, [r1], #4
  40801c:	f840 3b04 	str.w	r3, [r0], #4
  408020:	f851 3b04 	ldr.w	r3, [r1], #4
  408024:	f840 3b04 	str.w	r3, [r0], #4
  408028:	f851 3b04 	ldr.w	r3, [r1], #4
  40802c:	f840 3b04 	str.w	r3, [r0], #4
  408030:	3a40      	subs	r2, #64	; 0x40
  408032:	d2bd      	bcs.n	407fb0 <memcpy+0x10>
  408034:	3230      	adds	r2, #48	; 0x30
  408036:	d311      	bcc.n	40805c <memcpy+0xbc>
  408038:	f851 3b04 	ldr.w	r3, [r1], #4
  40803c:	f840 3b04 	str.w	r3, [r0], #4
  408040:	f851 3b04 	ldr.w	r3, [r1], #4
  408044:	f840 3b04 	str.w	r3, [r0], #4
  408048:	f851 3b04 	ldr.w	r3, [r1], #4
  40804c:	f840 3b04 	str.w	r3, [r0], #4
  408050:	f851 3b04 	ldr.w	r3, [r1], #4
  408054:	f840 3b04 	str.w	r3, [r0], #4
  408058:	3a10      	subs	r2, #16
  40805a:	d2ed      	bcs.n	408038 <memcpy+0x98>
  40805c:	320c      	adds	r2, #12
  40805e:	d305      	bcc.n	40806c <memcpy+0xcc>
  408060:	f851 3b04 	ldr.w	r3, [r1], #4
  408064:	f840 3b04 	str.w	r3, [r0], #4
  408068:	3a04      	subs	r2, #4
  40806a:	d2f9      	bcs.n	408060 <memcpy+0xc0>
  40806c:	3204      	adds	r2, #4
  40806e:	d008      	beq.n	408082 <memcpy+0xe2>
  408070:	07d2      	lsls	r2, r2, #31
  408072:	bf1c      	itt	ne
  408074:	f811 3b01 	ldrbne.w	r3, [r1], #1
  408078:	f800 3b01 	strbne.w	r3, [r0], #1
  40807c:	d301      	bcc.n	408082 <memcpy+0xe2>
  40807e:	880b      	ldrh	r3, [r1, #0]
  408080:	8003      	strh	r3, [r0, #0]
  408082:	4660      	mov	r0, ip
  408084:	4770      	bx	lr
  408086:	bf00      	nop
  408088:	2a08      	cmp	r2, #8
  40808a:	d313      	bcc.n	4080b4 <memcpy+0x114>
  40808c:	078b      	lsls	r3, r1, #30
  40808e:	d08d      	beq.n	407fac <memcpy+0xc>
  408090:	f010 0303 	ands.w	r3, r0, #3
  408094:	d08a      	beq.n	407fac <memcpy+0xc>
  408096:	f1c3 0304 	rsb	r3, r3, #4
  40809a:	1ad2      	subs	r2, r2, r3
  40809c:	07db      	lsls	r3, r3, #31
  40809e:	bf1c      	itt	ne
  4080a0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4080a4:	f800 3b01 	strbne.w	r3, [r0], #1
  4080a8:	d380      	bcc.n	407fac <memcpy+0xc>
  4080aa:	f831 3b02 	ldrh.w	r3, [r1], #2
  4080ae:	f820 3b02 	strh.w	r3, [r0], #2
  4080b2:	e77b      	b.n	407fac <memcpy+0xc>
  4080b4:	3a04      	subs	r2, #4
  4080b6:	d3d9      	bcc.n	40806c <memcpy+0xcc>
  4080b8:	3a01      	subs	r2, #1
  4080ba:	f811 3b01 	ldrb.w	r3, [r1], #1
  4080be:	f800 3b01 	strb.w	r3, [r0], #1
  4080c2:	d2f9      	bcs.n	4080b8 <memcpy+0x118>
  4080c4:	780b      	ldrb	r3, [r1, #0]
  4080c6:	7003      	strb	r3, [r0, #0]
  4080c8:	784b      	ldrb	r3, [r1, #1]
  4080ca:	7043      	strb	r3, [r0, #1]
  4080cc:	788b      	ldrb	r3, [r1, #2]
  4080ce:	7083      	strb	r3, [r0, #2]
  4080d0:	4660      	mov	r0, ip
  4080d2:	4770      	bx	lr

Disassembly of section .text.xQueueGenericSend%71:

004080d4 <xQueueGenericSend>:
{
  4080d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

004080d8 <.LCFI8>:
  4080d8:	b084      	sub	sp, #16

004080da <.LCFI9>:
  4080da:	4604      	mov	r4, r0
  4080dc:	4688      	mov	r8, r1
  4080de:	9201      	str	r2, [sp, #4]
  4080e0:	461d      	mov	r5, r3

004080e2 <.LVL65>:
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
  4080e2:	f04f 0900 	mov.w	r9, #0
		prvLockQueue( pxQueue );
  4080e6:	464e      	mov	r6, r9
					portYIELD_WITHIN_API();
  4080e8:	4f43      	ldr	r7, [pc, #268]	; (4081f8 <.LVL94+0x4>)
  4080ea:	e039      	b.n	408160 <.LVL78>

004080ec <.LVL66>:
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4080ec:	462a      	mov	r2, r5
  4080ee:	4641      	mov	r1, r8
  4080f0:	4620      	mov	r0, r4
  4080f2:	f002 fa65 	bl	40a5c0 <.LFE158>

004080f6 <.LVL67>:
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4080f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4080f8:	b973      	cbnz	r3, 408118 <.LCFI11>
					else if( xYieldRequired != pdFALSE )
  4080fa:	b138      	cbz	r0, 40810c <.LVL68>
						queueYIELD_IF_USING_PREEMPTION();
  4080fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  408100:	4b3d      	ldr	r3, [pc, #244]	; (4081f8 <.LVL94+0x4>)
  408102:	601a      	str	r2, [r3, #0]
  408104:	f3bf 8f4f 	dsb	sy
  408108:	f3bf 8f6f 	isb	sy

0040810c <.LVL68>:
				taskEXIT_CRITICAL();
  40810c:	f003 fd70 	bl	40bbf0 <vPortExitCritical>

00408110 <.LVL69>:
				return pdPASS;
  408110:	2001      	movs	r0, #1

00408112 <.LVL70>:
}
  408112:	b004      	add	sp, #16

00408114 <.LCFI10>:
  408114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00408118 <.LCFI11>:
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  408118:	f104 0024 	add.w	r0, r4, #36	; 0x24

0040811c <.LVL72>:
  40811c:	f002 f966 	bl	40a3ec <.LFE0>

00408120 <.LVL73>:
  408120:	2800      	cmp	r0, #0
  408122:	d0f3      	beq.n	40810c <.LVL68>
							queueYIELD_IF_USING_PREEMPTION();
  408124:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  408128:	4b33      	ldr	r3, [pc, #204]	; (4081f8 <.LVL94+0x4>)
  40812a:	601a      	str	r2, [r3, #0]
  40812c:	f3bf 8f4f 	dsb	sy
  408130:	f3bf 8f6f 	isb	sy
  408134:	e7ea      	b.n	40810c <.LVL68>
					taskEXIT_CRITICAL();
  408136:	f003 fd5b 	bl	40bbf0 <vPortExitCritical>

0040813a <.LVL74>:
					return errQUEUE_FULL;
  40813a:	2000      	movs	r0, #0
  40813c:	e7e9      	b.n	408112 <.LVL70>
					vTaskInternalSetTimeOutState( &xTimeOut );
  40813e:	a802      	add	r0, sp, #8
  408140:	f003 fc48 	bl	40b9d4 <.LFE6>

00408144 <.LVL75>:
  408144:	e01a      	b.n	40817c <.LVL80>
		prvLockQueue( pxQueue );
  408146:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  40814a:	e023      	b.n	408194 <.LVL83+0xc>
  40814c:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  408150:	e026      	b.n	4081a0 <.LVL83+0x18>
				prvUnlockQueue( pxQueue );
  408152:	4620      	mov	r0, r4
  408154:	f002 f88e 	bl	40a274 <.LFE19>

00408158 <.LVL76>:
				( void ) xTaskResumeAll();
  408158:	f000 fe02 	bl	408d60 <.LBE840>

0040815c <.LVL77>:
  40815c:	f04f 0901 	mov.w	r9, #1

00408160 <.LVL78>:
		taskENTER_CRITICAL();
  408160:	f003 fb58 	bl	40b814 <.LFE6>

00408164 <.LVL79>:
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  408164:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  408166:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  408168:	429a      	cmp	r2, r3
  40816a:	d3bf      	bcc.n	4080ec <.LVL66>
  40816c:	2d02      	cmp	r5, #2
  40816e:	d0bd      	beq.n	4080ec <.LVL66>
				if( xTicksToWait == ( TickType_t ) 0 )
  408170:	9b01      	ldr	r3, [sp, #4]
  408172:	2b00      	cmp	r3, #0
  408174:	d0df      	beq.n	408136 <.LVL73+0x16>
				else if( xEntryTimeSet == pdFALSE )
  408176:	f1b9 0f00 	cmp.w	r9, #0
  40817a:	d0e0      	beq.n	40813e <.LVL74+0x4>

0040817c <.LVL80>:
		taskEXIT_CRITICAL();
  40817c:	f003 fd38 	bl	40bbf0 <vPortExitCritical>

00408180 <.LVL81>:
		vTaskSuspendAll();
  408180:	f003 fda2 	bl	40bcc8 <vTaskSuspendAll>

00408184 <.LVL82>:
		prvLockQueue( pxQueue );
  408184:	f003 fb46 	bl	40b814 <.LFE6>

00408188 <.LVL83>:
  408188:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  40818c:	b25b      	sxtb	r3, r3
  40818e:	f1b3 3fff 	cmp.w	r3, #4294967295
  408192:	d0d8      	beq.n	408146 <.LVL75+0x2>
  408194:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  408198:	b25b      	sxtb	r3, r3
  40819a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40819e:	d0d5      	beq.n	40814c <.LVL75+0x8>
  4081a0:	f003 fd26 	bl	40bbf0 <vPortExitCritical>

004081a4 <.LVL84>:
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4081a4:	a901      	add	r1, sp, #4
  4081a6:	a802      	add	r0, sp, #8
  4081a8:	f002 fd98 	bl	40acdc <.LFE158>

004081ac <.LVL85>:
  4081ac:	b9e8      	cbnz	r0, 4081ea <.LVL92+0x14>

004081ae <.LBB35>:

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
  4081ae:	f003 fb31 	bl	40b814 <.LFE6>

004081b2 <.LVL87>:
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  4081b2:	f8d4 a038 	ldr.w	sl, [r4, #56]	; 0x38
  4081b6:	f8d4 903c 	ldr.w	r9, [r4, #60]	; 0x3c

004081ba <.LVL88>:
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  4081ba:	f003 fd19 	bl	40bbf0 <vPortExitCritical>

004081be <.LBE35>:
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  4081be:	45ca      	cmp	sl, r9
  4081c0:	d1c7      	bne.n	408152 <.LVL75+0xe>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  4081c2:	9901      	ldr	r1, [sp, #4]
  4081c4:	f104 0010 	add.w	r0, r4, #16
  4081c8:	f003 fb8a 	bl	40b8e0 <vTaskPlaceOnEventList>

004081cc <.LVL90>:
				prvUnlockQueue( pxQueue );
  4081cc:	4620      	mov	r0, r4
  4081ce:	f002 f851 	bl	40a274 <.LFE19>

004081d2 <.LVL91>:
				if( xTaskResumeAll() == pdFALSE )
  4081d2:	f000 fdc5 	bl	408d60 <.LBE840>

004081d6 <.LVL92>:
  4081d6:	2800      	cmp	r0, #0
  4081d8:	d1c0      	bne.n	40815c <.LVL77>
					portYIELD_WITHIN_API();
  4081da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4081de:	603b      	str	r3, [r7, #0]
  4081e0:	f3bf 8f4f 	dsb	sy
  4081e4:	f3bf 8f6f 	isb	sy
  4081e8:	e7b8      	b.n	40815c <.LVL77>
			prvUnlockQueue( pxQueue );
  4081ea:	4620      	mov	r0, r4
  4081ec:	f002 f842 	bl	40a274 <.LFE19>

004081f0 <.LVL93>:
			( void ) xTaskResumeAll();
  4081f0:	f000 fdb6 	bl	408d60 <.LBE840>

004081f4 <.LVL94>:
			return errQUEUE_FULL;
  4081f4:	2000      	movs	r0, #0
  4081f6:	e78c      	b.n	408112 <.LVL70>
  4081f8:	e000ed04 	.word	0xe000ed04

Disassembly of section .text.quorem%72:

004081fc <quorem>:
  4081fc:	6902      	ldr	r2, [r0, #16]
  4081fe:	690b      	ldr	r3, [r1, #16]

00408200 <.LVL1>:
  408200:	4293      	cmp	r3, r2
  408202:	f300 808d 	bgt.w	408320 <.LCFI3>
  408206:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0040820a <.LCFI0>:
  40820a:	f103 38ff 	add.w	r8, r3, #4294967295
  40820e:	f101 0714 	add.w	r7, r1, #20

00408212 <.LVL2>:
  408212:	f100 0b14 	add.w	fp, r0, #20
  408216:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40821a:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  40821e:	ea4f 0488 	mov.w	r4, r8, lsl #2
  408222:	b083      	sub	sp, #12

00408224 <.LCFI1>:
  408224:	3201      	adds	r2, #1
  408226:	fbb3 f9f2 	udiv	r9, r3, r2
  40822a:	eb0b 0304 	add.w	r3, fp, r4
  40822e:	9400      	str	r4, [sp, #0]
  408230:	eb07 0a04 	add.w	sl, r7, r4

00408234 <.LVL3>:
  408234:	9301      	str	r3, [sp, #4]

00408236 <.LVL4>:
  408236:	f1b9 0f00 	cmp.w	r9, #0
  40823a:	d039      	beq.n	4082b0 <.LVL23>
  40823c:	2500      	movs	r5, #0
  40823e:	462e      	mov	r6, r5
  408240:	46bc      	mov	ip, r7
  408242:	46de      	mov	lr, fp

00408244 <.LVL5>:
  408244:	f85c 4b04 	ldr.w	r4, [ip], #4

00408248 <.LVL6>:
  408248:	f8de 3000 	ldr.w	r3, [lr]
  40824c:	b2a2      	uxth	r2, r4
  40824e:	fb09 5502 	mla	r5, r9, r2, r5

00408252 <.LVL7>:
  408252:	0c22      	lsrs	r2, r4, #16
  408254:	0c2c      	lsrs	r4, r5, #16

00408256 <.LVL8>:
  408256:	fb09 4202 	mla	r2, r9, r2, r4

0040825a <.LVL9>:
  40825a:	b2ad      	uxth	r5, r5

0040825c <.LVL10>:
  40825c:	1b75      	subs	r5, r6, r5
  40825e:	b296      	uxth	r6, r2

00408260 <.LVL11>:
  408260:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  408264:	fa15 f383 	uxtah	r3, r5, r3
  408268:	eb06 4623 	add.w	r6, r6, r3, asr #16
  40826c:	b29b      	uxth	r3, r3
  40826e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  408272:	45e2      	cmp	sl, ip
  408274:	ea4f 4512 	mov.w	r5, r2, lsr #16

00408278 <.LVL12>:
  408278:	f84e 3b04 	str.w	r3, [lr], #4

0040827c <.LVL13>:
  40827c:	ea4f 4626 	mov.w	r6, r6, asr #16

00408280 <.LVL14>:
  408280:	d2e0      	bcs.n	408244 <.LVL5>
  408282:	9b00      	ldr	r3, [sp, #0]
  408284:	f85b 3003 	ldr.w	r3, [fp, r3]
  408288:	b993      	cbnz	r3, 4082b0 <.LVL23>

0040828a <.LVL15>:
  40828a:	9c01      	ldr	r4, [sp, #4]
  40828c:	1f23      	subs	r3, r4, #4

0040828e <.LVL16>:
  40828e:	459b      	cmp	fp, r3
  408290:	d20c      	bcs.n	4082ac <.LVL22>
  408292:	f854 3c04 	ldr.w	r3, [r4, #-4]

00408296 <.LVL17>:
  408296:	b94b      	cbnz	r3, 4082ac <.LVL22>
  408298:	f1a4 0308 	sub.w	r3, r4, #8
  40829c:	e002      	b.n	4082a4 <.LVL19+0x2>

0040829e <.LVL18>:
  40829e:	681a      	ldr	r2, [r3, #0]
  4082a0:	3b04      	subs	r3, #4

004082a2 <.LVL19>:
  4082a2:	b91a      	cbnz	r2, 4082ac <.LVL22>
  4082a4:	459b      	cmp	fp, r3
  4082a6:	f108 38ff 	add.w	r8, r8, #4294967295

004082aa <.LVL21>:
  4082aa:	d3f8      	bcc.n	40829e <.LVL18>

004082ac <.LVL22>:
  4082ac:	f8c0 8010 	str.w	r8, [r0, #16]

004082b0 <.LVL23>:
  4082b0:	4604      	mov	r4, r0
  4082b2:	f003 f8ab 	bl	40b40c <.LFE147>

004082b6 <.LVL24>:
  4082b6:	2800      	cmp	r0, #0
  4082b8:	db2e      	blt.n	408318 <.LVL46>
  4082ba:	f109 0901 	add.w	r9, r9, #1

004082be <.LVL25>:
  4082be:	465d      	mov	r5, fp
  4082c0:	2300      	movs	r3, #0

004082c2 <.LVL26>:
  4082c2:	f857 1b04 	ldr.w	r1, [r7], #4

004082c6 <.LVL27>:
  4082c6:	6828      	ldr	r0, [r5, #0]
  4082c8:	b28a      	uxth	r2, r1
  4082ca:	1a9a      	subs	r2, r3, r2
  4082cc:	0c0b      	lsrs	r3, r1, #16

004082ce <.LVL28>:
  4082ce:	fa12 f280 	uxtah	r2, r2, r0

004082d2 <.LVL29>:
  4082d2:	ebc3 4310 	rsb	r3, r3, r0, lsr #16

004082d6 <.LVL30>:
  4082d6:	eb03 4322 	add.w	r3, r3, r2, asr #16

004082da <.LVL31>:
  4082da:	b292      	uxth	r2, r2

004082dc <.LVL32>:
  4082dc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4082e0:	45ba      	cmp	sl, r7
  4082e2:	f845 2b04 	str.w	r2, [r5], #4

004082e6 <.LVL33>:
  4082e6:	ea4f 4323 	mov.w	r3, r3, asr #16

004082ea <.LVL34>:
  4082ea:	d2ea      	bcs.n	4082c2 <.LVL26>

004082ec <.LVL35>:
  4082ec:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  4082f0:	eb0b 0388 	add.w	r3, fp, r8, lsl #2

004082f4 <.LVL36>:
  4082f4:	b982      	cbnz	r2, 408318 <.LVL46>

004082f6 <.LVL37>:
  4082f6:	1f1a      	subs	r2, r3, #4

004082f8 <.LVL38>:
  4082f8:	4593      	cmp	fp, r2
  4082fa:	d20b      	bcs.n	408314 <.LVL45>
  4082fc:	f853 2c04 	ldr.w	r2, [r3, #-4]

00408300 <.LVL39>:
  408300:	b942      	cbnz	r2, 408314 <.LVL45>
  408302:	3b08      	subs	r3, #8

00408304 <.LVL40>:
  408304:	e002      	b.n	40830c <.LVL42+0x2>

00408306 <.LVL41>:
  408306:	681a      	ldr	r2, [r3, #0]
  408308:	3b04      	subs	r3, #4

0040830a <.LVL42>:
  40830a:	b91a      	cbnz	r2, 408314 <.LVL45>
  40830c:	459b      	cmp	fp, r3
  40830e:	f108 38ff 	add.w	r8, r8, #4294967295

00408312 <.LVL44>:
  408312:	d3f8      	bcc.n	408306 <.LVL41>

00408314 <.LVL45>:
  408314:	f8c4 8010 	str.w	r8, [r4, #16]

00408318 <.LVL46>:
  408318:	4648      	mov	r0, r9
  40831a:	b003      	add	sp, #12

0040831c <.LCFI2>:
  40831c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00408320 <.LCFI3>:
  408320:	2000      	movs	r0, #0

00408322 <.LVL48>:
  408322:	4770      	bx	lr

Disassembly of section .text.USART1_InterruptHandler%73:

00408324 <USART1_InterruptHandler>:

    return;
}

void USART1_InterruptHandler( void )
{
  408324:	b570      	push	{r4, r5, r6, lr}

00408326 <.LCFI0>:
    /* Error status */
    uint32_t errorStatus = (USART1_REGS->US_CSR & (US_CSR_OVRE_Msk | US_CSR_FRAME_Msk | US_CSR_PARE_Msk));
  408326:	4b46      	ldr	r3, [pc, #280]	; (408440 <.LBB11+0xe>)
  408328:	695b      	ldr	r3, [r3, #20]

0040832a <.LVL0>:

    if(errorStatus != 0)
  40832a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
  40832e:	d00e      	beq.n	40834e <.LVL1+0x1c>
    {
        /* Client must call USARTx_ErrorGet() function to clear the errors */

        /* USART errors are normally associated with the receiver, hence calling
         * receiver context */
        if( usart1Obj.rxCallback != NULL )
  408330:	4b44      	ldr	r3, [pc, #272]	; (408444 <.LBB11+0x12>)

00408332 <.LVL1>:
  408332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  408334:	b113      	cbz	r3, 40833c <.LVL1+0xa>
        {
            usart1Obj.rxCallback(usart1Obj.rxContext);
  408336:	4a43      	ldr	r2, [pc, #268]	; (408444 <.LBB11+0x12>)
  408338:	6a90      	ldr	r0, [r2, #40]	; 0x28
  40833a:	4798      	blx	r3
        }

        usart1Obj.rxBusyStatus = false;
  40833c:	4b41      	ldr	r3, [pc, #260]	; (408444 <.LBB11+0x12>)
  40833e:	2200      	movs	r2, #0
  408340:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        usart1Obj.rxSize = 0;
  408344:	61da      	str	r2, [r3, #28]
        usart1Obj.rxProcessedSize = 0;
  408346:	621a      	str	r2, [r3, #32]

        /* Disable Read, Overrun, Parity and Framing error interrupts */
        USART1_REGS->US_IDR = (US_IDR_RXRDY_Msk | US_IDR_FRAME_Msk | US_IDR_PARE_Msk | US_IDR_OVRE_Msk);
  408348:	22e1      	movs	r2, #225	; 0xe1
  40834a:	4b3d      	ldr	r3, [pc, #244]	; (408440 <.LBB11+0xe>)
  40834c:	60da      	str	r2, [r3, #12]
    }

    /* Receiver status */
    if(US_CSR_RXRDY_Msk == (USART1_REGS->US_CSR& US_CSR_RXRDY_Msk))
  40834e:	4b3c      	ldr	r3, [pc, #240]	; (408440 <.LBB11+0xe>)
  408350:	695b      	ldr	r3, [r3, #20]
  408352:	f013 0f01 	tst.w	r3, #1
  408356:	d105      	bne.n	408364 <.LBB6>
    {
        USART1_ISR_RX_Handler();
    }

    /* Transmitter status */
    if(US_CSR_TXEMPTY_Msk == (USART1_REGS->US_CSR& US_CSR_TXEMPTY_Msk))
  408358:	4b39      	ldr	r3, [pc, #228]	; (408440 <.LBB11+0xe>)
  40835a:	695b      	ldr	r3, [r3, #20]
  40835c:	f413 7f00 	tst.w	r3, #512	; 0x200
  408360:	d134      	bne.n	4083cc <.LBB8>
  408362:	bd70      	pop	{r4, r5, r6, pc}

00408364 <.LBB6>:
    if(usart1Obj.rxBusyStatus == true)
  408364:	4b37      	ldr	r3, [pc, #220]	; (408444 <.LBB11+0x12>)
  408366:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
  40836a:	2b00      	cmp	r3, #0
  40836c:	d0f4      	beq.n	408358 <.LVL1+0x26>
        while((US_CSR_RXRDY_Msk == (USART1_REGS->US_CSR& US_CSR_RXRDY_Msk)) && (usart1Obj.rxSize > usart1Obj.rxProcessedSize) )
  40836e:	4b34      	ldr	r3, [pc, #208]	; (408440 <.LBB11+0xe>)
  408370:	695b      	ldr	r3, [r3, #20]
  408372:	f013 0f01 	tst.w	r3, #1
  408376:	d023      	beq.n	4083c0 <.LBB6+0x5c>
  408378:	4a32      	ldr	r2, [pc, #200]	; (408444 <.LBB11+0x12>)
  40837a:	6a13      	ldr	r3, [r2, #32]
  40837c:	69d2      	ldr	r2, [r2, #28]
  40837e:	429a      	cmp	r2, r3
  408380:	d90e      	bls.n	4083a0 <.LBB6+0x3c>
            usart1Obj.rxBuffer[usart1Obj.rxProcessedSize++] = (USART1_REGS->US_RHR& US_RHR_RXCHR_Msk);
  408382:	4a30      	ldr	r2, [pc, #192]	; (408444 <.LBB11+0x12>)
  408384:	492e      	ldr	r1, [pc, #184]	; (408440 <.LBB11+0xe>)
  408386:	6990      	ldr	r0, [r2, #24]
  408388:	1c5c      	adds	r4, r3, #1
  40838a:	6214      	str	r4, [r2, #32]
  40838c:	698c      	ldr	r4, [r1, #24]
  40838e:	54c4      	strb	r4, [r0, r3]
        while((US_CSR_RXRDY_Msk == (USART1_REGS->US_CSR& US_CSR_RXRDY_Msk)) && (usart1Obj.rxSize > usart1Obj.rxProcessedSize) )
  408390:	694b      	ldr	r3, [r1, #20]
  408392:	f013 0f01 	tst.w	r3, #1
  408396:	d013      	beq.n	4083c0 <.LBB6+0x5c>
  408398:	6a13      	ldr	r3, [r2, #32]
  40839a:	69d0      	ldr	r0, [r2, #28]
  40839c:	4283      	cmp	r3, r0
  40839e:	d3f2      	bcc.n	408386 <.LBB6+0x22>
            usart1Obj.rxBusyStatus = false;
  4083a0:	4b28      	ldr	r3, [pc, #160]	; (408444 <.LBB11+0x12>)
  4083a2:	2200      	movs	r2, #0
  4083a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            usart1Obj.rxSize = 0;
  4083a8:	61da      	str	r2, [r3, #28]
            usart1Obj.rxProcessedSize = 0;
  4083aa:	621a      	str	r2, [r3, #32]
            USART1_REGS->US_IDR = (US_IDR_RXRDY_Msk | US_IDR_FRAME_Msk | US_IDR_PARE_Msk | US_IDR_OVRE_Msk);
  4083ac:	21e1      	movs	r1, #225	; 0xe1
  4083ae:	4a24      	ldr	r2, [pc, #144]	; (408440 <.LBB11+0xe>)
  4083b0:	60d1      	str	r1, [r2, #12]
            if(usart1Obj.rxCallback != NULL)
  4083b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4083b4:	2b00      	cmp	r3, #0
  4083b6:	d0cf      	beq.n	408358 <.LVL1+0x26>
                usart1Obj.rxCallback(usart1Obj.rxContext);
  4083b8:	4a22      	ldr	r2, [pc, #136]	; (408444 <.LBB11+0x12>)
  4083ba:	6a90      	ldr	r0, [r2, #40]	; 0x28
  4083bc:	4798      	blx	r3
  4083be:	e7cb      	b.n	408358 <.LVL1+0x26>
        if(usart1Obj.rxProcessedSize >= usart1Obj.rxSize)
  4083c0:	4b20      	ldr	r3, [pc, #128]	; (408444 <.LBB11+0x12>)
  4083c2:	6a1a      	ldr	r2, [r3, #32]
  4083c4:	69db      	ldr	r3, [r3, #28]
  4083c6:	429a      	cmp	r2, r3
  4083c8:	d3c6      	bcc.n	408358 <.LVL1+0x26>
  4083ca:	e7e9      	b.n	4083a0 <.LBB6+0x3c>

004083cc <.LBB8>:
    if(usart1Obj.txBusyStatus == true)
  4083cc:	4b1d      	ldr	r3, [pc, #116]	; (408444 <.LBB11+0x12>)
  4083ce:	7d1b      	ldrb	r3, [r3, #20]
  4083d0:	2b00      	cmp	r3, #0
  4083d2:	d0c6      	beq.n	408362 <.LVL1+0x30>
        while((US_CSR_TXEMPTY_Msk == (USART1_REGS->US_CSR& US_CSR_TXEMPTY_Msk)) && (usart1Obj.txSize > usart1Obj.txProcessedSize) )
  4083d4:	4b1a      	ldr	r3, [pc, #104]	; (408440 <.LBB11+0xe>)
  4083d6:	695b      	ldr	r3, [r3, #20]
  4083d8:	f413 7f00 	tst.w	r3, #512	; 0x200
  4083dc:	d029      	beq.n	408432 <.LBB11>
  4083de:	4b19      	ldr	r3, [pc, #100]	; (408444 <.LBB11+0x12>)
  4083e0:	685d      	ldr	r5, [r3, #4]
  4083e2:	689b      	ldr	r3, [r3, #8]
  4083e4:	429d      	cmp	r5, r3
  4083e6:	d914      	bls.n	408412 <.LBB8+0x46>
            USART1_REGS->US_THR|= usart1Obj.txBuffer[usart1Obj.txProcessedSize++];
  4083e8:	4a16      	ldr	r2, [pc, #88]	; (408444 <.LBB11+0x12>)
  4083ea:	6814      	ldr	r4, [r2, #0]
  4083ec:	4423      	add	r3, r4
  4083ee:	4425      	add	r5, r4
  4083f0:	4616      	mov	r6, r2
  4083f2:	f1c4 0401 	rsb	r4, r4, #1
  4083f6:	4912      	ldr	r1, [pc, #72]	; (408440 <.LBB11+0xe>)
  4083f8:	18e2      	adds	r2, r4, r3
  4083fa:	60b2      	str	r2, [r6, #8]
  4083fc:	f813 2b01 	ldrb.w	r2, [r3], #1
  408400:	69c8      	ldr	r0, [r1, #28]
  408402:	4302      	orrs	r2, r0
  408404:	61ca      	str	r2, [r1, #28]
        while((US_CSR_TXEMPTY_Msk == (USART1_REGS->US_CSR& US_CSR_TXEMPTY_Msk)) && (usart1Obj.txSize > usart1Obj.txProcessedSize) )
  408406:	694a      	ldr	r2, [r1, #20]
  408408:	f412 7f00 	tst.w	r2, #512	; 0x200
  40840c:	d011      	beq.n	408432 <.LBB11>
  40840e:	429d      	cmp	r5, r3
  408410:	d1f2      	bne.n	4083f8 <.LBB8+0x2c>
            usart1Obj.txBusyStatus = false;
  408412:	4b0c      	ldr	r3, [pc, #48]	; (408444 <.LBB11+0x12>)
  408414:	2200      	movs	r2, #0
  408416:	751a      	strb	r2, [r3, #20]
            usart1Obj.txSize = 0;
  408418:	605a      	str	r2, [r3, #4]
            usart1Obj.txProcessedSize = 0;
  40841a:	609a      	str	r2, [r3, #8]
            USART1_REGS->US_IDR = US_IDR_TXEMPTY_Msk;
  40841c:	f44f 7100 	mov.w	r1, #512	; 0x200
  408420:	4a07      	ldr	r2, [pc, #28]	; (408440 <.LBB11+0xe>)
  408422:	60d1      	str	r1, [r2, #12]
            if(usart1Obj.txCallback != NULL)
  408424:	68db      	ldr	r3, [r3, #12]
  408426:	2b00      	cmp	r3, #0
  408428:	d09b      	beq.n	408362 <.LVL1+0x30>
                usart1Obj.txCallback(usart1Obj.txContext);
  40842a:	4a06      	ldr	r2, [pc, #24]	; (408444 <.LBB11+0x12>)
  40842c:	6910      	ldr	r0, [r2, #16]
  40842e:	4798      	blx	r3

00408430 <.LBE8>:
    {
        USART1_ISR_TX_Handler();
    }

    return;
  408430:	e797      	b.n	408362 <.LVL1+0x30>

00408432 <.LBB11>:
        if(usart1Obj.txProcessedSize >= usart1Obj.txSize)
  408432:	4b04      	ldr	r3, [pc, #16]	; (408444 <.LBB11+0x12>)
  408434:	689a      	ldr	r2, [r3, #8]
  408436:	685b      	ldr	r3, [r3, #4]
  408438:	429a      	cmp	r2, r3
  40843a:	d392      	bcc.n	408362 <.LVL1+0x30>
  40843c:	e7e9      	b.n	408412 <.LBB8+0x46>
  40843e:	bf00      	nop
  408440:	40028000 	.word	0x40028000
  408444:	20400454 	.word	0x20400454

Disassembly of section .text.__multiply%74:

00408448 <__multiply>:
  408448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0040844c <.LCFI7>:
  40844c:	690c      	ldr	r4, [r1, #16]
  40844e:	6915      	ldr	r5, [r2, #16]
  408450:	42ac      	cmp	r4, r5
  408452:	b083      	sub	sp, #12

00408454 <.LCFI8>:
  408454:	468b      	mov	fp, r1
  408456:	4616      	mov	r6, r2
  408458:	da04      	bge.n	408464 <.LVL110>
  40845a:	4622      	mov	r2, r4

0040845c <.LVL108>:
  40845c:	46b3      	mov	fp, r6
  40845e:	462c      	mov	r4, r5
  408460:	460e      	mov	r6, r1

00408462 <.LVL109>:
  408462:	4615      	mov	r5, r2

00408464 <.LVL110>:
  408464:	f8db 3008 	ldr.w	r3, [fp, #8]
  408468:	f8db 1004 	ldr.w	r1, [fp, #4]

0040846c <.LVL111>:
  40846c:	eb04 0805 	add.w	r8, r4, r5

00408470 <.LVL112>:
  408470:	4598      	cmp	r8, r3
  408472:	bfc8      	it	gt
  408474:	3101      	addgt	r1, #1
  408476:	f002 fd27 	bl	40aec8 <.LFE2>

0040847a <.LVL114>:
  40847a:	f100 0914 	add.w	r9, r0, #20
  40847e:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  408482:	45d1      	cmp	r9, sl
  408484:	9000      	str	r0, [sp, #0]

00408486 <.LVL115>:
  408486:	d205      	bcs.n	408494 <.LVL118>
  408488:	464b      	mov	r3, r9
  40848a:	2100      	movs	r1, #0

0040848c <.LVL116>:
  40848c:	f843 1b04 	str.w	r1, [r3], #4
  408490:	459a      	cmp	sl, r3
  408492:	d8fb      	bhi.n	40848c <.LVL116>

00408494 <.LVL118>:
  408494:	f106 0c14 	add.w	ip, r6, #20
  408498:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  40849c:	f10b 0b14 	add.w	fp, fp, #20

004084a0 <.LVL119>:
  4084a0:	459c      	cmp	ip, r3
  4084a2:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2

004084a6 <.LVL120>:
  4084a6:	d24c      	bcs.n	408542 <.LVL144>
  4084a8:	f8cd a004 	str.w	sl, [sp, #4]
  4084ac:	469a      	mov	sl, r3

004084ae <.LVL121>:
  4084ae:	f8dc 5000 	ldr.w	r5, [ip]
  4084b2:	b2af      	uxth	r7, r5

004084b4 <.LVL122>:
  4084b4:	b1ef      	cbz	r7, 4084f2 <.LVL130>
  4084b6:	2100      	movs	r1, #0
  4084b8:	464d      	mov	r5, r9
  4084ba:	465e      	mov	r6, fp
  4084bc:	460c      	mov	r4, r1

004084be <.LVL123>:
  4084be:	f856 2b04 	ldr.w	r2, [r6], #4

004084c2 <.LVL124>:
  4084c2:	6828      	ldr	r0, [r5, #0]
  4084c4:	b293      	uxth	r3, r2
  4084c6:	b281      	uxth	r1, r0
  4084c8:	fb07 1303 	mla	r3, r7, r3, r1
  4084cc:	0c12      	lsrs	r2, r2, #16
  4084ce:	0c01      	lsrs	r1, r0, #16
  4084d0:	4423      	add	r3, r4

004084d2 <.LVL125>:
  4084d2:	fb07 1102 	mla	r1, r7, r2, r1
  4084d6:	eb01 4113 	add.w	r1, r1, r3, lsr #16

004084da <.LVL126>:
  4084da:	b29b      	uxth	r3, r3

004084dc <.LVL127>:
  4084dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  4084e0:	45b6      	cmp	lr, r6
  4084e2:	f845 3b04 	str.w	r3, [r5], #4

004084e6 <.LVL128>:
  4084e6:	ea4f 4411 	mov.w	r4, r1, lsr #16

004084ea <.LVL129>:
  4084ea:	d8e8      	bhi.n	4084be <.LVL123>
  4084ec:	602c      	str	r4, [r5, #0]
  4084ee:	f8dc 5000 	ldr.w	r5, [ip]

004084f2 <.LVL130>:
  4084f2:	0c2d      	lsrs	r5, r5, #16

004084f4 <.LVL131>:
  4084f4:	d01d      	beq.n	408532 <.LVL141>

004084f6 <.LVL132>:
  4084f6:	f8d9 3000 	ldr.w	r3, [r9]

004084fa <.LVL133>:
  4084fa:	4648      	mov	r0, r9
  4084fc:	461c      	mov	r4, r3
  4084fe:	4659      	mov	r1, fp
  408500:	2200      	movs	r2, #0

00408502 <.LVL134>:
  408502:	880e      	ldrh	r6, [r1, #0]
  408504:	0c24      	lsrs	r4, r4, #16
  408506:	fb05 4406 	mla	r4, r5, r6, r4
  40850a:	4422      	add	r2, r4

0040850c <.LVL135>:
  40850c:	b29b      	uxth	r3, r3

0040850e <.LVL136>:
  40850e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  408512:	f840 3b04 	str.w	r3, [r0], #4

00408516 <.LVL137>:
  408516:	f851 3b04 	ldr.w	r3, [r1], #4

0040851a <.LVL138>:
  40851a:	6804      	ldr	r4, [r0, #0]
  40851c:	0c1b      	lsrs	r3, r3, #16
  40851e:	b2a6      	uxth	r6, r4
  408520:	fb05 6303 	mla	r3, r5, r3, r6
  408524:	eb03 4312 	add.w	r3, r3, r2, lsr #16

00408528 <.LVL139>:
  408528:	458e      	cmp	lr, r1
  40852a:	ea4f 4213 	mov.w	r2, r3, lsr #16

0040852e <.LVL140>:
  40852e:	d8e8      	bhi.n	408502 <.LVL134>
  408530:	6003      	str	r3, [r0, #0]

00408532 <.LVL141>:
  408532:	f10c 0c04 	add.w	ip, ip, #4
  408536:	45e2      	cmp	sl, ip
  408538:	f109 0904 	add.w	r9, r9, #4
  40853c:	d8b7      	bhi.n	4084ae <.LVL121>
  40853e:	f8dd a004 	ldr.w	sl, [sp, #4]

00408542 <.LVL144>:
  408542:	f1b8 0f00 	cmp.w	r8, #0
  408546:	dd0b      	ble.n	408560 <.LVL149>
  408548:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  40854c:	f1aa 0a04 	sub.w	sl, sl, #4
  408550:	b11b      	cbz	r3, 40855a <.LVL147>
  408552:	e005      	b.n	408560 <.LVL149>
  408554:	f85a 3d04 	ldr.w	r3, [sl, #-4]!

00408558 <.LVL146>:
  408558:	b913      	cbnz	r3, 408560 <.LVL149>

0040855a <.LVL147>:
  40855a:	f1b8 0801 	subs.w	r8, r8, #1

0040855e <.LVL148>:
  40855e:	d1f9      	bne.n	408554 <.LVL144+0x12>

00408560 <.LVL149>:
  408560:	9800      	ldr	r0, [sp, #0]
  408562:	f8c0 8010 	str.w	r8, [r0, #16]
  408566:	b003      	add	sp, #12

00408568 <.LCFI9>:
  408568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section .text.Reset_Handler%75:

0040856c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void __attribute__((optimize("-O1"), section(".text.Reset_Handler"), long_call)) Reset_Handler(void)
{
  40856c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0040856e <.LCFI0>:
    uint32_t *pSrc;

    /* Call the optional application-provided _on_reset() function. */
    if (_on_reset)
  40856e:	4b3e      	ldr	r3, [pc, #248]	; (408668 <.LVL15+0x2>)
  408570:	b103      	cbz	r3, 408574 <.LVL0>
    {
        _on_reset();
  408572:	4798      	blx	r3

00408574 <.LVL0>:
    }

    /* Reserved for use by MPLAB XC32. */
    if (__xc32_on_reset)
  408574:	4b3d      	ldr	r3, [pc, #244]	; (40866c <.LVL15+0x6>)
  408576:	b103      	cbz	r3, 40857a <.LBB143>
        __xc32_on_reset();
  408578:	4798      	blx	r3

0040857a <.LBB143>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40857a:	f3ef 8110 	mrs	r1, PRIMASK

0040857e <.LBB147>:
  __ASM volatile ("cpsid i" : : : "memory");
  40857e:	b672      	cpsid	i

00408580 <.LBE147>:
     SCB->CPACR |= (0xFu << 20);
  408580:	4a3b      	ldr	r2, [pc, #236]	; (408670 <.LVL15+0xa>)
  408582:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  408586:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40858a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

0040858e <.LBB149>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  40858e:	f3bf 8f4f 	dsb	sy

00408592 <.LBB151>:
  __ASM volatile ("isb 0xF":::"memory");
  408592:	f3bf 8f6f 	isb	sy

00408596 <.LBE151>:
    if (!prim)
  408596:	b901      	cbnz	r1, 40859a <.LBB155>

00408598 <.LBB153>:
  __ASM volatile ("cpsie i" : : : "memory");
  408598:	b662      	cpsie	i

0040859a <.LBB155>:
  __ASM volatile ("dsb 0xF":::"memory");
  40859a:	f3bf 8f4f 	dsb	sy

0040859e <.LBB159>:
  __ASM volatile ("isb 0xF":::"memory");
  40859e:	f3bf 8f6f 	isb	sy

004085a2 <.LBE159>:
    SCB->ITCMCR &= ~(uint32_t)SCB_ITCMCR_EN_Msk;
  4085a2:	4c33      	ldr	r4, [pc, #204]	; (408670 <.LVL15+0xa>)
  4085a4:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  4085a8:	f023 0301 	bic.w	r3, r3, #1
  4085ac:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
    SCB->DTCMCR &= ~(uint32_t)SCB_ITCMCR_EN_Msk;
  4085b0:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
  4085b4:	f023 0301 	bic.w	r3, r3, #1
  4085b8:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

004085bc <.LBB161>:
  __ASM volatile ("dsb 0xF":::"memory");
  4085bc:	f3bf 8f4f 	dsb	sy

004085c0 <.LBB163>:
  __ASM volatile ("isb 0xF":::"memory");
  4085c0:	f3bf 8f6f 	isb	sy

004085c4 <.LBE155>:
    /* Disable TCM  */
    TCM_Disable();

    /* Initialize data after TCM is enabled.
     * Data initialization from the XC32 .dinit template */
    __pic32c_data_initialization();
  4085c4:	f001 fbae 	bl	409d24 <.LFE154>

004085c8 <.LVL2>:
	

#  ifdef SCB_VTOR_TBLOFF_Msk
    /*  Set the vector-table base address in FLASH */
    pSrc = (uint32_t *) & __svectors;
    SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4085c8:	4b2a      	ldr	r3, [pc, #168]	; (408674 <.LVL15+0xe>)
  4085ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4085ce:	60a3      	str	r3, [r4, #8]
#  endif /* SCB_VTOR_TBLOFF_Msk */

    /* Initialize the C library */
    __libc_init_array();
  4085d0:	4b29      	ldr	r3, [pc, #164]	; (408678 <.LVL15+0x12>)
  4085d2:	4798      	blx	r3

004085d4 <.LBB165>:
  __ASM volatile ("dsb 0xF":::"memory");
  4085d4:	f3bf 8f4f 	dsb	sy

004085d8 <.LBB170>:
  __ASM volatile ("isb 0xF":::"memory");
  4085d8:	f3bf 8f6f 	isb	sy

004085dc <.LBE170>:
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  4085dc:	2200      	movs	r2, #0
  4085de:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250

004085e2 <.LBB172>:
  __ASM volatile ("dsb 0xF":::"memory");
  4085e2:	f3bf 8f4f 	dsb	sy

004085e6 <.LBB174>:
  __ASM volatile ("isb 0xF":::"memory");
  4085e6:	f3bf 8f6f 	isb	sy

004085ea <.LBE174>:
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  4085ea:	6963      	ldr	r3, [r4, #20]
  4085ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  4085f0:	6163      	str	r3, [r4, #20]

004085f2 <.LBB176>:
  __ASM volatile ("dsb 0xF":::"memory");
  4085f2:	f3bf 8f4f 	dsb	sy

004085f6 <.LBB178>:
  __ASM volatile ("isb 0xF":::"memory");
  4085f6:	f3bf 8f6f 	isb	sy

004085fa <.LBB180>:
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  4085fa:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84

004085fe <.LBB183>:
  __ASM volatile ("dsb 0xF":::"memory");
  4085fe:	f3bf 8f4f 	dsb	sy

00408602 <.LBE183>:
    __DSB();

    ccsidr = SCB->CCSIDR;
  408602:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80

00408606 <.LVL4>:

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  408606:	f3c5 364e 	ubfx	r6, r5, #13, #15

0040860a <.LVL5>:
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  40860a:	f3c5 05c9 	ubfx	r5, r5, #3, #10

0040860e <.LVL6>:
  40860e:	0177      	lsls	r7, r6, #5
  408610:	ea4f 7c85 	mov.w	ip, r5, lsl #30
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  408614:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  408618:	4620      	mov	r0, r4
  40861a:	ea07 040e 	and.w	r4, r7, lr
  40861e:	4662      	mov	r2, ip
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  408620:	462b      	mov	r3, r5

00408622 <.LVL8>:
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  408622:	ea42 0104 	orr.w	r1, r2, r4
  408626:	f8c0 1260 	str.w	r1, [r0, #608]	; 0x260
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
  40862a:	3b01      	subs	r3, #1
  40862c:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
  408630:	f1b3 3fff 	cmp.w	r3, #4294967295
  408634:	d1f5      	bne.n	408622 <.LVL8>
    } while(sets-- != 0U);
  408636:	3e01      	subs	r6, #1
  408638:	3f20      	subs	r7, #32
  40863a:	f1b6 3fff 	cmp.w	r6, #4294967295
  40863e:	d1ec      	bne.n	40861a <.LVL6+0xc>

00408640 <.LBB185>:
  408640:	f3bf 8f4f 	dsb	sy

00408644 <.LBE185>:
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  408644:	4a0a      	ldr	r2, [pc, #40]	; (408670 <.LVL15+0xa>)
  408646:	6953      	ldr	r3, [r2, #20]

00408648 <.LVL11>:
  408648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40864c:	6153      	str	r3, [r2, #20]

0040864e <.LBB187>:
  40864e:	f3bf 8f4f 	dsb	sy

00408652 <.LBB189>:
  __ASM volatile ("isb 0xF":::"memory");
  408652:	f3bf 8f6f 	isb	sy

00408656 <.LBE180>:

    /* Enable Data Cache    */
    DCache_Enable();

    /* Call the optional application-provided _on_bootstrap() function. */
    if (_on_bootstrap)
  408656:	4b09      	ldr	r3, [pc, #36]	; (40867c <.LVL15+0x16>)
  408658:	b103      	cbz	r3, 40865c <.LVL13>
    {
        _on_bootstrap();
  40865a:	4798      	blx	r3

0040865c <.LVL13>:
    }

    /* Reserved for use by MPLAB XC32. */
    if (__xc32_on_bootstrap)
  40865c:	4b08      	ldr	r3, [pc, #32]	; (408680 <.LVL15+0x1a>)
  40865e:	b103      	cbz	r3, 408662 <.LVL14>
    {
        __xc32_on_bootstrap();
  408660:	4798      	blx	r3

00408662 <.LVL14>:
    }

    /* Branch to application's main function */
    main();
  408662:	f003 fb89 	bl	40bd78 <main>

00408666 <.LVL15>:
  408666:	e7fe      	b.n	408666 <.LVL15>
	...
  408670:	e000ed00 	.word	0xe000ed00
  408674:	00400000 	.word	0x00400000
  408678:	0040ade1 	.word	0x0040ade1
	...

Disassembly of section .text.__mdiff%76:

00408684 <__mdiff>:
  408684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

00408688 <.LBB30>:
  408688:	690f      	ldr	r7, [r1, #16]

0040868a <.LBE30>:
  40868a:	460e      	mov	r6, r1

0040868c <.LBB35>:
  40868c:	6911      	ldr	r1, [r2, #16]

0040868e <.LVL227>:
  40868e:	1a7f      	subs	r7, r7, r1

00408690 <.LVL228>:
  408690:	2f00      	cmp	r7, #0

00408692 <.LBE35>:
  408692:	4690      	mov	r8, r2

00408694 <.LBB36>:
  408694:	d117      	bne.n	4086c6 <.LVL243>
  408696:	0089      	lsls	r1, r1, #2
  408698:	f106 0514 	add.w	r5, r6, #20
  40869c:	f102 0e14 	add.w	lr, r2, #20
  4086a0:	186b      	adds	r3, r5, r1
  4086a2:	4471      	add	r1, lr
  4086a4:	e001      	b.n	4086aa <.LVL233+0x4>

004086a6 <.LVL233>:
  4086a6:	429d      	cmp	r5, r3
  4086a8:	d25c      	bcs.n	408764 <.LVL274>
  4086aa:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  4086ae:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  4086b2:	42a2      	cmp	r2, r4
  4086b4:	d0f7      	beq.n	4086a6 <.LVL233>
  4086b6:	d25e      	bcs.n	408776 <.LBB37>
  4086b8:	4633      	mov	r3, r6
  4086ba:	462c      	mov	r4, r5

004086bc <.LVL238>:
  4086bc:	4646      	mov	r6, r8

004086be <.LVL239>:
  4086be:	4675      	mov	r5, lr
  4086c0:	4698      	mov	r8, r3

004086c2 <.LBE36>:
  4086c2:	2701      	movs	r7, #1
  4086c4:	e005      	b.n	4086d2 <.LVL245>

004086c6 <.LVL243>:
  4086c6:	db58      	blt.n	40877a <.LBE37>

004086c8 <.LVL244>:
  4086c8:	f106 0514 	add.w	r5, r6, #20
  4086cc:	f108 0414 	add.w	r4, r8, #20
  4086d0:	2700      	movs	r7, #0

004086d2 <.LVL245>:
  4086d2:	6871      	ldr	r1, [r6, #4]
  4086d4:	f002 fbf8 	bl	40aec8 <.LFE2>

004086d8 <.LVL246>:
  4086d8:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4086dc:	6936      	ldr	r6, [r6, #16]

004086de <.LVL247>:
  4086de:	60c7      	str	r7, [r0, #12]
  4086e0:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  4086e4:	46a6      	mov	lr, r4
  4086e6:	eb05 0786 	add.w	r7, r5, r6, lsl #2

004086ea <.LVL248>:
  4086ea:	f100 0414 	add.w	r4, r0, #20

004086ee <.LVL249>:
  4086ee:	2300      	movs	r3, #0

004086f0 <.LVL250>:
  4086f0:	f85e 1b04 	ldr.w	r1, [lr], #4
  4086f4:	f855 8b04 	ldr.w	r8, [r5], #4

004086f8 <.LVL251>:
  4086f8:	b28a      	uxth	r2, r1
  4086fa:	fa13 f388 	uxtah	r3, r3, r8

004086fe <.LVL252>:
  4086fe:	0c09      	lsrs	r1, r1, #16
  408700:	1a9a      	subs	r2, r3, r2

00408702 <.LVL253>:
  408702:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  408706:	eb03 4322 	add.w	r3, r3, r2, asr #16

0040870a <.LVL254>:
  40870a:	b292      	uxth	r2, r2

0040870c <.LVL255>:
  40870c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  408710:	45f4      	cmp	ip, lr
  408712:	f844 2b04 	str.w	r2, [r4], #4

00408716 <.LVL256>:
  408716:	ea4f 4323 	mov.w	r3, r3, asr #16

0040871a <.LVL257>:
  40871a:	d8e9      	bhi.n	4086f0 <.LVL250>

0040871c <.LVL258>:
  40871c:	42af      	cmp	r7, r5
  40871e:	d917      	bls.n	408750 <.LVL269>
  408720:	46a4      	mov	ip, r4

00408722 <.LVL259>:
  408722:	46ae      	mov	lr, r5

00408724 <.LVL260>:
  408724:	f85e 2b04 	ldr.w	r2, [lr], #4

00408728 <.LVL261>:
  408728:	fa13 f382 	uxtah	r3, r3, r2

0040872c <.LVL262>:
  40872c:	1419      	asrs	r1, r3, #16

0040872e <.LVL263>:
  40872e:	eb01 4112 	add.w	r1, r1, r2, lsr #16

00408732 <.LVL264>:
  408732:	b29b      	uxth	r3, r3

00408734 <.LVL265>:
  408734:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  408738:	4577      	cmp	r7, lr
  40873a:	f84c 2b04 	str.w	r2, [ip], #4

0040873e <.LVL266>:
  40873e:	ea4f 4321 	mov.w	r3, r1, asr #16

00408742 <.LVL267>:
  408742:	d8ef      	bhi.n	408724 <.LVL260>
  408744:	43ed      	mvns	r5, r5
  408746:	442f      	add	r7, r5

00408748 <.LVL268>:
  408748:	f027 0703 	bic.w	r7, r7, #3
  40874c:	3704      	adds	r7, #4
  40874e:	443c      	add	r4, r7

00408750 <.LVL269>:
  408750:	3c04      	subs	r4, #4
  408752:	b922      	cbnz	r2, 40875e <.LVL273+0x4>

00408754 <.LVL271>:
  408754:	f854 3d04 	ldr.w	r3, [r4, #-4]!

00408758 <.LVL272>:
  408758:	3e01      	subs	r6, #1

0040875a <.LVL273>:
  40875a:	2b00      	cmp	r3, #0
  40875c:	d0fa      	beq.n	408754 <.LVL271>
  40875e:	6106      	str	r6, [r0, #16]
  408760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00408764 <.LVL274>:
  408764:	2100      	movs	r1, #0
  408766:	f002 fbaf 	bl	40aec8 <.LFE2>

0040876a <.LVL275>:
  40876a:	2201      	movs	r2, #1
  40876c:	2300      	movs	r3, #0
  40876e:	6102      	str	r2, [r0, #16]
  408770:	6143      	str	r3, [r0, #20]
  408772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00408776 <.LBB37>:
  408776:	4674      	mov	r4, lr
  408778:	e7ab      	b.n	4086d2 <.LVL245>

0040877a <.LBE37>:
  40877a:	4633      	mov	r3, r6
  40877c:	f106 0414 	add.w	r4, r6, #20
  408780:	f102 0514 	add.w	r5, r2, #20
  408784:	4616      	mov	r6, r2

00408786 <.LVL278>:
  408786:	2701      	movs	r7, #1
  408788:	4698      	mov	r8, r3
  40878a:	e7a2      	b.n	4086d2 <.LVL245>

Disassembly of section .rodata%77:

0040878c <.LANCHOR1>:
  40878c:	30257325 	.word	0x30257325
  408790:	00005832 	.word	0x00005832
  408794:	0d0a7325 	.word	0x0d0a7325
  408798:	2035444d 	.word	0x2035444d
  40879c:	6d6f7266 	.word	0x6d6f7266
  4087a0:	65656620 	.word	0x65656620
  4087a4:	20203a64 	.word	0x20203a64
  4087a8:	00202020 	.word	0x00202020
  4087ac:	20097325 	.word	0x20097325
  4087b0:	6b6f6f74 	.word	0x6b6f6f74
  4087b4:	20642520 	.word	0x20642520
  4087b8:	636f6c63 	.word	0x636f6c63
  4087bc:	7963206b 	.word	0x7963206b
  4087c0:	73656c63 	.word	0x73656c63
  4087c4:	00000000 	.word	0x00000000
  4087c8:	0d0a7325 	.word	0x0d0a7325
  4087cc:	20414853 	.word	0x20414853
  4087d0:	6d6f7266 	.word	0x6d6f7266
  4087d4:	65656620 	.word	0x65656620
  4087d8:	20203a64 	.word	0x20203a64
  4087dc:	00202020 	.word	0x00202020
  4087e0:	0d0a7325 	.word	0x0d0a7325
  4087e4:	32414853 	.word	0x32414853
  4087e8:	66203635 	.word	0x66203635
  4087ec:	206d6f72 	.word	0x206d6f72
  4087f0:	64656566 	.word	0x64656566
  4087f4:	0020203a 	.word	0x0020203a
  4087f8:	0d0a7325 	.word	0x0d0a7325
  4087fc:	33414853 	.word	0x33414853
  408800:	66203438 	.word	0x66203438
  408804:	206d6f72 	.word	0x206d6f72
  408808:	64656566 	.word	0x64656566
  40880c:	0020203a 	.word	0x0020203a
  408810:	0d0a7325 	.word	0x0d0a7325
  408814:	35414853 	.word	0x35414853
  408818:	66203231 	.word	0x66203231
  40881c:	206d6f72 	.word	0x206d6f72
  408820:	64656566 	.word	0x64656566
  408824:	0020203a 	.word	0x0020203a
  408828:	0d0a7325 	.word	0x0d0a7325
  40882c:	65742041 	.word	0x65742041
  408830:	66207473 	.word	0x66207473
  408834:	656c6961 	.word	0x656c6961
  408838:	00002e64 	.word	0x00002e64
  40883c:	0d0a7325 	.word	0x0d0a7325
  408840:	206c6c41 	.word	0x206c6c41
  408844:	74736574 	.word	0x74736574
  408848:	61702073 	.word	0x61702073
  40884c:	64657373 	.word	0x64657373
  408850:	0000002e 	.word	0x0000002e
  408854:	41200a0d 	.word	0x41200a0d
  408858:	696c7070 	.word	0x696c7070
  40885c:	69746163 	.word	0x69746163
  408860:	63206e6f 	.word	0x63206e6f
  408864:	74616572 	.word	0x74616572
  408868:	4f206465 	.word	0x4f206465
  40886c:	31207463 	.word	0x31207463
  408870:	30322038 	.word	0x30322038
  408874:	30203831 	.word	0x30203831
  408878:	36313a39 	.word	0x36313a39
  40887c:	2033333a 	.word	0x2033333a
  408880:	74696e69 	.word	0x74696e69
  408884:	696c6169 	.word	0x696c6169
  408888:	2164657a 	.word	0x2164657a
  40888c:	0a0d      	.short	0x0a0d
	...

Disassembly of section .rodata._ctype_%78:

00408890 <_ctype_>:
  408890:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  4088a0:	2020 2020 2020 2020 2020 2020 2020 2020                     
  4088b0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  4088c0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  4088d0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  4088e0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  4088f0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  408900:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  408910:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
  408990:	0000 bf00                                   ....

Disassembly of section .text.xTaskIncrementTick%79:

00408994 <xTaskIncrementTick>:
{
  408994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

00408998 <.LCFI14>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  408998:	4b32      	ldr	r3, [pc, #200]	; (408a64 <.LVL165>)
  40899a:	681b      	ldr	r3, [r3, #0]
  40899c:	2b00      	cmp	r3, #0
  40899e:	d154      	bne.n	408a4a <.LBE68>

004089a0 <.LBB66>:
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
  4089a0:	4b31      	ldr	r3, [pc, #196]	; (408a68 <.LVL165+0x4>)
  4089a2:	681a      	ldr	r2, [r3, #0]
  4089a4:	f102 0801 	add.w	r8, r2, #1

004089a8 <.LVL151>:
		xTickCount = xConstTickCount;
  4089a8:	f8c3 8000 	str.w	r8, [r3]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
  4089ac:	f1b8 0f00 	cmp.w	r8, #0
  4089b0:	d005      	beq.n	4089be <.LBB67>
		if( xConstTickCount >= xNextTaskUnblockTime )
  4089b2:	4b2e      	ldr	r3, [pc, #184]	; (408a6c <.LVL165+0x8>)
  4089b4:	681b      	ldr	r3, [r3, #0]
  4089b6:	4598      	cmp	r8, r3
  4089b8:	d20e      	bcs.n	4089d8 <.LBE67+0x2>

004089ba <.LBE66>:
BaseType_t xSwitchRequired = pdFALSE;
  4089ba:	2600      	movs	r6, #0
  4089bc:	e04a      	b.n	408a54 <.LVL164>

004089be <.LBB67>:
			taskSWITCH_DELAYED_LISTS();
  4089be:	4a2c      	ldr	r2, [pc, #176]	; (408a70 <.LVL165+0xc>)
  4089c0:	6811      	ldr	r1, [r2, #0]

004089c2 <.LVL152>:
  4089c2:	4b2c      	ldr	r3, [pc, #176]	; (408a74 <.LVL165+0x10>)
  4089c4:	6818      	ldr	r0, [r3, #0]
  4089c6:	6010      	str	r0, [r2, #0]
  4089c8:	6019      	str	r1, [r3, #0]
  4089ca:	4a2b      	ldr	r2, [pc, #172]	; (408a78 <.LVL165+0x14>)
  4089cc:	6813      	ldr	r3, [r2, #0]
  4089ce:	3301      	adds	r3, #1
  4089d0:	6013      	str	r3, [r2, #0]
  4089d2:	f002 fdfd 	bl	40b5d0 <L0>

004089d6 <.LBE67>:
  4089d6:	e7ec      	b.n	4089b2 <.LVL151+0xa>
  4089d8:	2600      	movs	r6, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4089da:	4f25      	ldr	r7, [pc, #148]	; (408a70 <.LVL165+0xc>)
					prvAddTaskToReadyList( pxTCB );
  4089dc:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 408a88 <.LVL165+0x24>
  4089e0:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 408a8c <.LVL165+0x28>
  4089e4:	e015      	b.n	408a12 <.LVL158>

004089e6 <.LVL154>:
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4089e6:	f04f 32ff 	mov.w	r2, #4294967295
  4089ea:	4b20      	ldr	r3, [pc, #128]	; (408a6c <.LVL165+0x8>)
  4089ec:	601a      	str	r2, [r3, #0]
					break;
  4089ee:	e031      	b.n	408a54 <.LVL164>

004089f0 <.LVL155>:
						xNextTaskUnblockTime = xItemValue;
  4089f0:	4a1e      	ldr	r2, [pc, #120]	; (408a6c <.LVL165+0x8>)
  4089f2:	6013      	str	r3, [r2, #0]
						break;
  4089f4:	e02e      	b.n	408a54 <.LVL164>

004089f6 <.LVL156>:
					prvAddTaskToReadyList( pxTCB );
  4089f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4089fa:	4629      	mov	r1, r5
  4089fc:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
  408a00:	f002 ffdc 	bl	40b9bc <.LFE142>

00408a04 <.LVL157>:
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  408a04:	4b1d      	ldr	r3, [pc, #116]	; (408a7c <.LVL165+0x18>)
  408a06:	681b      	ldr	r3, [r3, #0]
  408a08:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  408a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
  408a0c:	429a      	cmp	r2, r3
  408a0e:	bf28      	it	cs
  408a10:	2601      	movcs	r6, #1

00408a12 <.LVL158>:
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  408a12:	683b      	ldr	r3, [r7, #0]
  408a14:	681b      	ldr	r3, [r3, #0]
  408a16:	2b00      	cmp	r3, #0
  408a18:	d0e5      	beq.n	4089e6 <.LVL154>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  408a1a:	683b      	ldr	r3, [r7, #0]
  408a1c:	68db      	ldr	r3, [r3, #12]
  408a1e:	68dc      	ldr	r4, [r3, #12]

00408a20 <.LVL159>:
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
  408a20:	6863      	ldr	r3, [r4, #4]

00408a22 <.LVL160>:
					if( xConstTickCount < xItemValue )
  408a22:	4598      	cmp	r8, r3
  408a24:	d3e4      	bcc.n	4089f0 <.LVL155>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  408a26:	1d25      	adds	r5, r4, #4
  408a28:	4628      	mov	r0, r5
  408a2a:	f002 fe55 	bl	40b6d8 <.LFE1>

00408a2e <.LVL161>:
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  408a2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  408a30:	b11b      	cbz	r3, 408a3a <.LVL162>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  408a32:	f104 0018 	add.w	r0, r4, #24
  408a36:	f002 fe4f 	bl	40b6d8 <.LFE1>

00408a3a <.LVL162>:
					prvAddTaskToReadyList( pxTCB );
  408a3a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  408a3c:	f8d9 3000 	ldr.w	r3, [r9]
  408a40:	4298      	cmp	r0, r3
  408a42:	d9d8      	bls.n	4089f6 <.LVL156>
  408a44:	f8c9 0000 	str.w	r0, [r9]
  408a48:	e7d5      	b.n	4089f6 <.LVL156>

00408a4a <.LBE68>:
		++uxPendedTicks;
  408a4a:	4a0d      	ldr	r2, [pc, #52]	; (408a80 <.LVL165+0x1c>)
  408a4c:	6813      	ldr	r3, [r2, #0]
  408a4e:	3301      	adds	r3, #1
  408a50:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
  408a52:	2600      	movs	r6, #0

00408a54 <.LVL164>:
		if( xYieldPending != pdFALSE )
  408a54:	4b0b      	ldr	r3, [pc, #44]	; (408a84 <.LVL165+0x20>)
  408a56:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  408a58:	2b00      	cmp	r3, #0
}
  408a5a:	bf0c      	ite	eq
  408a5c:	4630      	moveq	r0, r6
  408a5e:	2001      	movne	r0, #1
  408a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00408a64 <.LVL165>:
  408a64:	20417d7c 	.word	0x20417d7c
  408a68:	20417d98 	.word	0x20417d98
  408a6c:	20417d8c 	.word	0x20417d8c
  408a70:	20417d68 	.word	0x20417d68
  408a74:	20417d6c 	.word	0x20417d6c
  408a78:	20417d90 	.word	0x20417d90
  408a7c:	20417d64 	.word	0x20417d64
  408a80:	20417d78 	.word	0x20417d78
  408a84:	20417d9c 	.word	0x20417d9c
  408a88:	20417d84 	.word	0x20417d84
  408a8c:	20417afc 	.word	0x20417afc

Disassembly of section .text.__ssprint_r%80:

00408a90 <__ssprint_r>:
  408a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00408a94 <.LCFI0>:
  408a94:	6893      	ldr	r3, [r2, #8]
  408a96:	b083      	sub	sp, #12

00408a98 <.LCFI1>:
  408a98:	4690      	mov	r8, r2

00408a9a <.LVL1>:
  408a9a:	2b00      	cmp	r3, #0
  408a9c:	d070      	beq.n	408b80 <.LCFI3>
  408a9e:	4682      	mov	sl, r0
  408aa0:	460c      	mov	r4, r1
  408aa2:	6817      	ldr	r7, [r2, #0]
  408aa4:	688d      	ldr	r5, [r1, #8]
  408aa6:	6808      	ldr	r0, [r1, #0]

00408aa8 <.LVL2>:
  408aa8:	e042      	b.n	408b30 <.LVL16>

00408aaa <.LVL3>:
  408aaa:	89a3      	ldrh	r3, [r4, #12]
  408aac:	f413 6f90 	tst.w	r3, #1152	; 0x480
  408ab0:	d02e      	beq.n	408b10 <.LBE2>

00408ab2 <.LBB2>:
  408ab2:	6965      	ldr	r5, [r4, #20]
  408ab4:	6921      	ldr	r1, [r4, #16]
  408ab6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  408aba:	eba0 0b01 	sub.w	fp, r0, r1

00408abe <.LVL4>:
  408abe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  408ac2:	f10b 0001 	add.w	r0, fp, #1
  408ac6:	106d      	asrs	r5, r5, #1

00408ac8 <.LVL5>:
  408ac8:	4430      	add	r0, r6
  408aca:	42a8      	cmp	r0, r5
  408acc:	462a      	mov	r2, r5
  408ace:	bf84      	itt	hi
  408ad0:	4605      	movhi	r5, r0
  408ad2:	462a      	movhi	r2, r5
  408ad4:	055b      	lsls	r3, r3, #21
  408ad6:	d538      	bpl.n	408b4a <.LBB3>
  408ad8:	4611      	mov	r1, r2
  408ada:	4650      	mov	r0, sl
  408adc:	f7fd fc82 	bl	4063e4 <.LFE14>

00408ae0 <.LVL7>:
  408ae0:	2800      	cmp	r0, #0
  408ae2:	d03c      	beq.n	408b5e <.L10>
  408ae4:	465a      	mov	r2, fp
  408ae6:	6921      	ldr	r1, [r4, #16]
  408ae8:	9001      	str	r0, [sp, #4]
  408aea:	f7ff fa59 	bl	407fa0 <.LFE164>

00408aee <.LVL8>:
  408aee:	89a2      	ldrh	r2, [r4, #12]
  408af0:	9b01      	ldr	r3, [sp, #4]
  408af2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  408af6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  408afa:	81a2      	strh	r2, [r4, #12]

00408afc <.LVL9>:
  408afc:	eba5 020b 	sub.w	r2, r5, fp
  408b00:	eb03 000b 	add.w	r0, r3, fp
  408b04:	6165      	str	r5, [r4, #20]
  408b06:	6123      	str	r3, [r4, #16]
  408b08:	6020      	str	r0, [r4, #0]
  408b0a:	60a2      	str	r2, [r4, #8]
  408b0c:	4635      	mov	r5, r6

00408b0e <.LVL10>:
  408b0e:	46b3      	mov	fp, r6

00408b10 <.LBE2>:
  408b10:	465a      	mov	r2, fp
  408b12:	4649      	mov	r1, r9
  408b14:	f000 fb4c 	bl	4091b0 <.LFE155>

00408b18 <.LVL12>:
  408b18:	f8d8 3008 	ldr.w	r3, [r8, #8]
  408b1c:	68a2      	ldr	r2, [r4, #8]
  408b1e:	6820      	ldr	r0, [r4, #0]
  408b20:	1b55      	subs	r5, r2, r5

00408b22 <.LVL13>:
  408b22:	4458      	add	r0, fp
  408b24:	1b9e      	subs	r6, r3, r6

00408b26 <.LVL14>:
  408b26:	60a5      	str	r5, [r4, #8]
  408b28:	6020      	str	r0, [r4, #0]

00408b2a <.LVL15>:
  408b2a:	f8c8 6008 	str.w	r6, [r8, #8]
  408b2e:	b33e      	cbz	r6, 408b80 <.LCFI3>

00408b30 <.LVL16>:
  408b30:	687e      	ldr	r6, [r7, #4]

00408b32 <.LVL17>:
  408b32:	463b      	mov	r3, r7
  408b34:	3708      	adds	r7, #8

00408b36 <.LVL18>:
  408b36:	2e00      	cmp	r6, #0
  408b38:	d0fa      	beq.n	408b30 <.LVL16>
  408b3a:	42ae      	cmp	r6, r5
  408b3c:	f8d3 9000 	ldr.w	r9, [r3]
  408b40:	46ab      	mov	fp, r5
  408b42:	d2b2      	bcs.n	408aaa <.LVL3>
  408b44:	4635      	mov	r5, r6

00408b46 <.LVL19>:
  408b46:	46b3      	mov	fp, r6
  408b48:	e7e2      	b.n	408b10 <.LBE2>

00408b4a <.LBB3>:
  408b4a:	4650      	mov	r0, sl
  408b4c:	f7fd fef2 	bl	406934 <.LFE2>

00408b50 <.LVL21>:
  408b50:	4603      	mov	r3, r0
  408b52:	2800      	cmp	r0, #0
  408b54:	d1d2      	bne.n	408afc <.LVL9>
  408b56:	6921      	ldr	r1, [r4, #16]
  408b58:	4650      	mov	r0, sl

00408b5a <.LVL22>:
  408b5a:	f7fe ffe3 	bl	407b24 <.LFE4>

00408b5e <.L10>:
  408b5e:	230c      	movs	r3, #12
  408b60:	f8ca 3000 	str.w	r3, [sl]

00408b64 <.LBE3>:
  408b64:	89a3      	ldrh	r3, [r4, #12]
  408b66:	2200      	movs	r2, #0
  408b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408b6c:	f04f 30ff 	mov.w	r0, #4294967295
  408b70:	81a3      	strh	r3, [r4, #12]
  408b72:	f8c8 2008 	str.w	r2, [r8, #8]
  408b76:	f8c8 2004 	str.w	r2, [r8, #4]
  408b7a:	b003      	add	sp, #12

00408b7c <.LCFI2>:
  408b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00408b80 <.LCFI3>:
  408b80:	2000      	movs	r0, #0
  408b82:	f8c8 0004 	str.w	r0, [r8, #4]
  408b86:	b003      	add	sp, #12

00408b88 <.LCFI4>:
  408b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section .text.wc_Sha512Update%81:

00408b8c <wc_Sha512Update>:
{
  408b8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

00408b90 <.LCFI6>:
    if (sha512 == NULL || (data == NULL && len > 0)) {
  408b90:	2800      	cmp	r0, #0
  408b92:	d065      	beq.n	408c60 <.LVL43>
  408b94:	4689      	mov	r9, r1
  408b96:	4615      	mov	r5, r2
  408b98:	4680      	mov	r8, r0
  408b9a:	b909      	cbnz	r1, 408ba0 <.LBB700>
  408b9c:	2a00      	cmp	r2, #0
  408b9e:	d162      	bne.n	408c66 <.LVL43+0x6>

00408ba0 <.LBB700>:
    byte* local = (byte*)sha512->buffer;
  408ba0:	f108 0b58 	add.w	fp, r8, #88	; 0x58

00408ba4 <.LVL25>:
    if (sha512->buffLen >= SHA512_BLOCK_SIZE)
  408ba4:	f8d8 3000 	ldr.w	r3, [r8]
  408ba8:	2b7f      	cmp	r3, #127	; 0x7f
  408baa:	d85f      	bhi.n	408c6c <.LBB719>
    while (len) {
  408bac:	2d00      	cmp	r5, #0
  408bae:	d060      	beq.n	408c72 <.LBB719+0x6>
  408bb0:	f108 0ad0 	add.w	sl, r8, #208	; 0xd0
  408bb4:	e004      	b.n	408bc0 <.LBB717>

00408bb6 <.LBB702>:
            sha512->buffLen = 0;
  408bb6:	2300      	movs	r3, #0
  408bb8:	f8c8 3000 	str.w	r3, [r8]

00408bbc <.LBE702>:
    while (len) {
  408bbc:	2d00      	cmp	r5, #0
  408bbe:	d04b      	beq.n	408c58 <.LBE715>

00408bc0 <.LBB717>:
        word32 add = min(len, SHA512_BLOCK_SIZE - sha512->buffLen);
  408bc0:	f8d8 0000 	ldr.w	r0, [r8]

00408bc4 <.LVL28>:
  408bc4:	f1c0 0480 	rsb	r4, r0, #128	; 0x80

00408bc8 <.LBB703>:
    #if defined(HAVE_FIPS) && !defined(min) /* so ifdef check passes */
        #define min min
    #endif
    STATIC INLINE word32 min(word32 a, word32 b)
    {
        return a > b ? b : a;
  408bc8:	42ac      	cmp	r4, r5
  408bca:	bf28      	it	cs
  408bcc:	462c      	movcs	r4, r5

00408bce <.LBE703>:
        XMEMCPY(&local[sha512->buffLen], data, add);
  408bce:	4622      	mov	r2, r4
  408bd0:	4649      	mov	r1, r9
  408bd2:	4458      	add	r0, fp
  408bd4:	f7ff f9e4 	bl	407fa0 <.LFE164>

00408bd8 <.LVL31>:
        sha512->buffLen += add;
  408bd8:	f8d8 3000 	ldr.w	r3, [r8]
  408bdc:	4423      	add	r3, r4
  408bde:	f8c8 3000 	str.w	r3, [r8]
        data            += add;
  408be2:	44a1      	add	r9, r4
        len             -= add;
  408be4:	1b2d      	subs	r5, r5, r4
        if (sha512->buffLen == SHA512_BLOCK_SIZE) {
  408be6:	2b80      	cmp	r3, #128	; 0x80
  408be8:	d1e8      	bne.n	408bbc <.LBE702>
  408bea:	f108 0250 	add.w	r2, r8, #80	; 0x50

00408bee <.LBB705>:
        out[i] = ByteReverseWord64(in[i]);
  408bee:	6893      	ldr	r3, [r2, #8]
  408bf0:	68d1      	ldr	r1, [r2, #12]

00408bf2 <.LBB707>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  408bf2:	0a18      	lsrs	r0, r3, #8
  408bf4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  408bf8:	021b      	lsls	r3, r3, #8
  408bfa:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  408bfe:	4303      	orrs	r3, r0

00408c00 <.LBE709>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  408c00:	ea4f 4733 	mov.w	r7, r3, ror #16
  408c04:	2600      	movs	r6, #0

00408c06 <.LBB711>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  408c06:	0a0b      	lsrs	r3, r1, #8
  408c08:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  408c0c:	0209      	lsls	r1, r1, #8
  408c0e:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  408c12:	430b      	orrs	r3, r1

00408c14 <.LBB713>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  408c14:	ea4f 4333 	mov.w	r3, r3, ror #16

00408c18 <.LBE711>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  408c18:	ea46 0003 	orr.w	r0, r6, r3
  408c1c:	4639      	mov	r1, r7

00408c1e <.LBE707>:
        out[i] = ByteReverseWord64(in[i]);
  408c1e:	e9e2 0102 	strd	r0, r1, [r2, #8]!
    for (i = 0; i < count; i++)
  408c22:	4592      	cmp	sl, r2
  408c24:	d1e3      	bne.n	408bee <.LBB705>

00408c26 <.LBE705>:
            ret = Transform(sha512);
  408c26:	4640      	mov	r0, r8
  408c28:	f7f7 fab4 	bl	400194 <_etext>

00408c2c <.LVL35>:
            if (ret != 0)
  408c2c:	4603      	mov	r3, r0
  408c2e:	b9a0      	cbnz	r0, 408c5a <.LBE700>

00408c30 <.LBB715>:
    word64 tmp = sha512->loLen;
  408c30:	e9d8 2302 	ldrd	r2, r3, [r8, #8]

00408c34 <.LVL37>:
    if ( (sha512->loLen += len) < tmp)
  408c34:	f112 0080 	adds.w	r0, r2, #128	; 0x80

00408c38 <.LVL38>:
  408c38:	f143 0100 	adc.w	r1, r3, #0
  408c3c:	e9c8 0102 	strd	r0, r1, [r8, #8]
  408c40:	4299      	cmp	r1, r3
  408c42:	bf08      	it	eq
  408c44:	4290      	cmpeq	r0, r2
  408c46:	d2b6      	bcs.n	408bb6 <.LBB702>
        sha512->hiLen++;                       /* carry low to high */
  408c48:	e9d8 2304 	ldrd	r2, r3, [r8, #16]

00408c4c <.LVL39>:
  408c4c:	3201      	adds	r2, #1
  408c4e:	f143 0300 	adc.w	r3, r3, #0

00408c52 <.LVL40>:
  408c52:	e9c8 2304 	strd	r2, r3, [r8, #16]
  408c56:	e7ae      	b.n	408bb6 <.LBB702>

00408c58 <.LBE715>:
    while (len) {
  408c58:	2300      	movs	r3, #0

00408c5a <.LBE700>:
}
  408c5a:	4618      	mov	r0, r3
  408c5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00408c60 <.LVL43>:
        return BAD_FUNC_ARG;
  408c60:	f06f 03ac 	mvn.w	r3, #172	; 0xac
  408c64:	e7f9      	b.n	408c5a <.LBE700>
  408c66:	f06f 03ac 	mvn.w	r3, #172	; 0xac
  408c6a:	e7f6      	b.n	408c5a <.LBE700>

00408c6c <.LBB719>:
        return BUFFER_E;
  408c6c:	f06f 0383 	mvn.w	r3, #131	; 0x83
  408c70:	e7f3      	b.n	408c5a <.LBE700>
    while (len) {
  408c72:	2300      	movs	r3, #0
  408c74:	e7f1      	b.n	408c5a <.LBE700>

Disassembly of section .text.wc_Sha384Update%82:

00408c76 <wc_Sha384Update>:
{
  408c76:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

00408c7a <.LCFI13>:
    if (sha384 == NULL || (data == NULL && len > 0)) {
  408c7a:	2800      	cmp	r0, #0
  408c7c:	d065      	beq.n	408d4a <.LVL102>
  408c7e:	4689      	mov	r9, r1
  408c80:	4615      	mov	r5, r2
  408c82:	4680      	mov	r8, r0
  408c84:	b909      	cbnz	r1, 408c8a <.LBB821>
  408c86:	2a00      	cmp	r2, #0
  408c88:	d162      	bne.n	408d50 <.LVL102+0x6>

00408c8a <.LBB821>:
    byte* local = (byte*)sha512->buffer;
  408c8a:	f108 0b58 	add.w	fp, r8, #88	; 0x58

00408c8e <.LVL84>:
    if (sha512->buffLen >= SHA512_BLOCK_SIZE)
  408c8e:	f8d8 3000 	ldr.w	r3, [r8]
  408c92:	2b7f      	cmp	r3, #127	; 0x7f
  408c94:	d85f      	bhi.n	408d56 <.LBB840>
    while (len) {
  408c96:	2d00      	cmp	r5, #0
  408c98:	d060      	beq.n	408d5c <.LBB840+0x6>
  408c9a:	f108 0ad0 	add.w	sl, r8, #208	; 0xd0
  408c9e:	e004      	b.n	408caa <.LBB838>

00408ca0 <.LBB823>:
            sha512->buffLen = 0;
  408ca0:	2300      	movs	r3, #0
  408ca2:	f8c8 3000 	str.w	r3, [r8]

00408ca6 <.LBE823>:
    while (len) {
  408ca6:	2d00      	cmp	r5, #0
  408ca8:	d04b      	beq.n	408d42 <.LBE836>

00408caa <.LBB838>:
        word32 add = min(len, SHA512_BLOCK_SIZE - sha512->buffLen);
  408caa:	f8d8 0000 	ldr.w	r0, [r8]

00408cae <.LVL87>:
  408cae:	f1c0 0480 	rsb	r4, r0, #128	; 0x80

00408cb2 <.LBB824>:
        return a > b ? b : a;
  408cb2:	42ac      	cmp	r4, r5
  408cb4:	bf28      	it	cs
  408cb6:	462c      	movcs	r4, r5

00408cb8 <.LBE824>:
        XMEMCPY(&local[sha512->buffLen], data, add);
  408cb8:	4622      	mov	r2, r4
  408cba:	4649      	mov	r1, r9
  408cbc:	4458      	add	r0, fp
  408cbe:	f7ff f96f 	bl	407fa0 <.LFE164>

00408cc2 <.LVL90>:
        sha512->buffLen += add;
  408cc2:	f8d8 3000 	ldr.w	r3, [r8]
  408cc6:	4423      	add	r3, r4
  408cc8:	f8c8 3000 	str.w	r3, [r8]
        data            += add;
  408ccc:	44a1      	add	r9, r4
        len             -= add;
  408cce:	1b2d      	subs	r5, r5, r4
        if (sha512->buffLen == SHA512_BLOCK_SIZE) {
  408cd0:	2b80      	cmp	r3, #128	; 0x80
  408cd2:	d1e8      	bne.n	408ca6 <.LBE823>
  408cd4:	f108 0250 	add.w	r2, r8, #80	; 0x50

00408cd8 <.LBB826>:
        out[i] = ByteReverseWord64(in[i]);
  408cd8:	6893      	ldr	r3, [r2, #8]
  408cda:	68d1      	ldr	r1, [r2, #12]

00408cdc <.LBB828>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  408cdc:	0a18      	lsrs	r0, r3, #8
  408cde:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  408ce2:	021b      	lsls	r3, r3, #8
  408ce4:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  408ce8:	4303      	orrs	r3, r0

00408cea <.LBE830>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  408cea:	ea4f 4733 	mov.w	r7, r3, ror #16
  408cee:	2600      	movs	r6, #0

00408cf0 <.LBB832>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  408cf0:	0a0b      	lsrs	r3, r1, #8
  408cf2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  408cf6:	0209      	lsls	r1, r1, #8
  408cf8:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  408cfc:	430b      	orrs	r3, r1

00408cfe <.LBB834>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  408cfe:	ea4f 4333 	mov.w	r3, r3, ror #16

00408d02 <.LBE832>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  408d02:	ea46 0003 	orr.w	r0, r6, r3
  408d06:	4639      	mov	r1, r7

00408d08 <.LBE828>:
        out[i] = ByteReverseWord64(in[i]);
  408d08:	e9e2 0102 	strd	r0, r1, [r2, #8]!
    for (i = 0; i < count; i++)
  408d0c:	4592      	cmp	sl, r2
  408d0e:	d1e3      	bne.n	408cd8 <.LBB826>

00408d10 <.LBE826>:
            ret = Transform(sha512);
  408d10:	4640      	mov	r0, r8
  408d12:	f7f7 fa3f 	bl	400194 <_etext>

00408d16 <.LVL94>:
            if (ret != 0)
  408d16:	4603      	mov	r3, r0
  408d18:	b9a0      	cbnz	r0, 408d44 <.LBE821>

00408d1a <.LBB836>:
    word64 tmp = sha512->loLen;
  408d1a:	e9d8 2302 	ldrd	r2, r3, [r8, #8]

00408d1e <.LVL96>:
    if ( (sha512->loLen += len) < tmp)
  408d1e:	f112 0080 	adds.w	r0, r2, #128	; 0x80

00408d22 <.LVL97>:
  408d22:	f143 0100 	adc.w	r1, r3, #0
  408d26:	e9c8 0102 	strd	r0, r1, [r8, #8]
  408d2a:	4299      	cmp	r1, r3
  408d2c:	bf08      	it	eq
  408d2e:	4290      	cmpeq	r0, r2
  408d30:	d2b6      	bcs.n	408ca0 <.LBB823>
        sha512->hiLen++;                       /* carry low to high */
  408d32:	e9d8 2304 	ldrd	r2, r3, [r8, #16]

00408d36 <.LVL98>:
  408d36:	3201      	adds	r2, #1
  408d38:	f143 0300 	adc.w	r3, r3, #0

00408d3c <.LVL99>:
  408d3c:	e9c8 2304 	strd	r2, r3, [r8, #16]
  408d40:	e7ae      	b.n	408ca0 <.LBB823>

00408d42 <.LBE836>:
    while (len) {
  408d42:	2300      	movs	r3, #0

00408d44 <.LBE821>:
}
  408d44:	4618      	mov	r0, r3
  408d46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00408d4a <.LVL102>:
        return BAD_FUNC_ARG;
  408d4a:	f06f 03ac 	mvn.w	r3, #172	; 0xac
  408d4e:	e7f9      	b.n	408d44 <.LBE821>
  408d50:	f06f 03ac 	mvn.w	r3, #172	; 0xac
  408d54:	e7f6      	b.n	408d44 <.LBE821>

00408d56 <.LBB840>:
        return BUFFER_E;
  408d56:	f06f 0383 	mvn.w	r3, #131	; 0x83
  408d5a:	e7f3      	b.n	408d44 <.LBE821>
    while (len) {
  408d5c:	2300      	movs	r3, #0
  408d5e:	e7f1      	b.n	408d44 <.LBE821>

Disassembly of section .text.xTaskResumeAll%83:

00408d60 <xTaskResumeAll>:
{
  408d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

00408d64 <.LCFI15>:
	taskENTER_CRITICAL();
  408d64:	f002 fd56 	bl	40b814 <.LFE6>

00408d68 <.LVL167>:
		--uxSchedulerSuspended;
  408d68:	4b2d      	ldr	r3, [pc, #180]	; (408e20 <.LVL186+0x2>)
  408d6a:	681a      	ldr	r2, [r3, #0]
  408d6c:	3a01      	subs	r2, #1
  408d6e:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  408d70:	681b      	ldr	r3, [r3, #0]
  408d72:	2b00      	cmp	r3, #0
  408d74:	d14c      	bne.n	408e10 <.LVL182>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  408d76:	4b2b      	ldr	r3, [pc, #172]	; (408e24 <.LVL186+0x6>)
  408d78:	681b      	ldr	r3, [r3, #0]
  408d7a:	b333      	cbz	r3, 408dca <.LVL173>
  408d7c:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  408d7e:	4e2a      	ldr	r6, [pc, #168]	; (408e28 <.LVL186+0xa>)
					prvAddTaskToReadyList( pxTCB );
  408d80:	4f2a      	ldr	r7, [pc, #168]	; (408e2c <.LVL186+0xe>)
  408d82:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 408e40 <.LVL186+0x22>

00408d86 <.LVL168>:
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  408d86:	6833      	ldr	r3, [r6, #0]
  408d88:	b30b      	cbz	r3, 408dce <.LVL174>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  408d8a:	68f3      	ldr	r3, [r6, #12]
  408d8c:	68dc      	ldr	r4, [r3, #12]

00408d8e <.LVL169>:
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  408d8e:	f104 0018 	add.w	r0, r4, #24
  408d92:	f002 fca1 	bl	40b6d8 <.LFE1>

00408d96 <.LVL170>:
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  408d96:	1d25      	adds	r5, r4, #4
  408d98:	4628      	mov	r0, r5
  408d9a:	f002 fc9d 	bl	40b6d8 <.LFE1>

00408d9e <.LVL171>:
					prvAddTaskToReadyList( pxTCB );
  408d9e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  408da0:	683b      	ldr	r3, [r7, #0]
  408da2:	4298      	cmp	r0, r3
  408da4:	d900      	bls.n	408da8 <.LVL171+0xa>
  408da6:	6038      	str	r0, [r7, #0]
  408da8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  408dac:	4629      	mov	r1, r5
  408dae:	eb08 0080 	add.w	r0, r8, r0, lsl #2
  408db2:	f002 fe03 	bl	40b9bc <.LFE142>

00408db6 <.LVL172>:
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  408db6:	4b1e      	ldr	r3, [pc, #120]	; (408e30 <.LVL186+0x12>)
  408db8:	681b      	ldr	r3, [r3, #0]
  408dba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  408dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  408dbe:	429a      	cmp	r2, r3
  408dc0:	d3e1      	bcc.n	408d86 <.LVL168>
						xYieldPending = pdTRUE;
  408dc2:	2201      	movs	r2, #1
  408dc4:	4b1b      	ldr	r3, [pc, #108]	; (408e34 <.LVL186+0x16>)
  408dc6:	601a      	str	r2, [r3, #0]
  408dc8:	e7dd      	b.n	408d86 <.LVL168>

00408dca <.LVL173>:
BaseType_t xAlreadyYielded = pdFALSE;
  408dca:	2400      	movs	r4, #0
  408dcc:	e021      	b.n	408e12 <.LVL183>

00408dce <.LVL174>:
				if( pxTCB != NULL )
  408dce:	b10c      	cbz	r4, 408dd4 <.LBB69>
					prvResetNextTaskUnblockTime();
  408dd0:	f002 fbfe 	bl	40b5d0 <L0>

00408dd4 <.LBB69>:
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
  408dd4:	4b18      	ldr	r3, [pc, #96]	; (408e38 <.LVL186+0x1a>)
  408dd6:	681c      	ldr	r4, [r3, #0]

00408dd8 <.LVL176>:
					if( uxPendedCounts > ( UBaseType_t ) 0U )
  408dd8:	b16c      	cbz	r4, 408df6 <.LBE69>
								xYieldPending = pdTRUE;
  408dda:	4e16      	ldr	r6, [pc, #88]	; (408e34 <.LVL186+0x16>)
  408ddc:	2501      	movs	r5, #1
  408dde:	e001      	b.n	408de4 <.LVL178+0x2>

00408de0 <.LVL177>:
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
  408de0:	3c01      	subs	r4, #1

00408de2 <.LVL178>:
  408de2:	d005      	beq.n	408df0 <.LVL179+0x8>
							if( xTaskIncrementTick() != pdFALSE )
  408de4:	f7ff fdd6 	bl	408994 <xTaskIncrementTick>

00408de8 <.LVL179>:
  408de8:	2800      	cmp	r0, #0
  408dea:	d0f9      	beq.n	408de0 <.LVL177>
								xYieldPending = pdTRUE;
  408dec:	6035      	str	r5, [r6, #0]
  408dee:	e7f7      	b.n	408de0 <.LVL177>
						uxPendedTicks = 0;
  408df0:	2200      	movs	r2, #0
  408df2:	4b11      	ldr	r3, [pc, #68]	; (408e38 <.LVL186+0x1a>)
  408df4:	601a      	str	r2, [r3, #0]

00408df6 <.LBE69>:
				if( xYieldPending != pdFALSE )
  408df6:	4b0f      	ldr	r3, [pc, #60]	; (408e34 <.LVL186+0x16>)
  408df8:	681b      	ldr	r3, [r3, #0]
  408dfa:	b17b      	cbz	r3, 408e1c <.LVL185>

00408dfc <.LVL180>:
					taskYIELD_IF_USING_PREEMPTION();
  408dfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  408e00:	4b0e      	ldr	r3, [pc, #56]	; (408e3c <.LVL186+0x1e>)
  408e02:	601a      	str	r2, [r3, #0]
  408e04:	f3bf 8f4f 	dsb	sy
  408e08:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  408e0c:	2401      	movs	r4, #1

00408e0e <.LVL181>:
  408e0e:	e000      	b.n	408e12 <.LVL183>

00408e10 <.LVL182>:
BaseType_t xAlreadyYielded = pdFALSE;
  408e10:	2400      	movs	r4, #0

00408e12 <.LVL183>:
	taskEXIT_CRITICAL();
  408e12:	f002 feed 	bl	40bbf0 <vPortExitCritical>

00408e16 <.LVL184>:
}
  408e16:	4620      	mov	r0, r4
  408e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00408e1c <.LVL185>:
BaseType_t xAlreadyYielded = pdFALSE;
  408e1c:	2400      	movs	r4, #0

00408e1e <.LVL186>:
  408e1e:	e7f8      	b.n	408e12 <.LVL183>
  408e20:	20417d7c 	.word	0x20417d7c
  408e24:	20417d70 	.word	0x20417d70
  408e28:	20417ce0 	.word	0x20417ce0
  408e2c:	20417d84 	.word	0x20417d84
  408e30:	20417d64 	.word	0x20417d64
  408e34:	20417d9c 	.word	0x20417d9c
  408e38:	20417d78 	.word	0x20417d78
  408e3c:	e000ed04 	.word	0xe000ed04
  408e40:	20417afc 	.word	0x20417afc

Disassembly of section .text.Sha256Process%84:

00408e44 <Sha256Process>:



/* length is in bytes */
static int32_t Sha256Process(Sha256* sha256, const uint8_t *input, word32 length)
{
  408e44:	b410      	push	{r4}

00408e46 <.LCFI0>:

    ICM_REGS->ICM_CTRL = ICM_CTRL_SWRST(1);
  408e46:	2404      	movs	r4, #4
  408e48:	4b33      	ldr	r3, [pc, #204]	; (408f18 <.LCFI1+0x2>)
  408e4a:	605c      	str	r4, [r3, #4]
    sha256->icm_descriptor.start_addr = (uint32_t)input;
  408e4c:	6001      	str	r1, [r0, #0]

    /* Transfer size = (tran_size + 1) * 512bits */
    sha256->icm_descriptor.tran_size =  (length >> 6) - 1;
  408e4e:	0994      	lsrs	r4, r2, #6
  408e50:	3c01      	subs	r4, #1
  408e52:	6084      	str	r4, [r0, #8]

00408e54 <.LBB50>:
  __ASM volatile ("dsb 0xF":::"memory");
  408e54:	f3bf 8f4f 	dsb	sy

00408e58 <.LBE52>:
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
      SCB->DCCMVAC = op_addr;
  408e58:	4c30      	ldr	r4, [pc, #192]	; (408f1c <.LCFI1+0x6>)
  408e5a:	f8c4 0268 	str.w	r0, [r4, #616]	; 0x268

00408e5e <.LBB54>:
  408e5e:	f3bf 8f4f 	dsb	sy

00408e62 <.LBB56>:
  __ASM volatile ("isb 0xF":::"memory");
  408e62:	f3bf 8f6f 	isb	sy

00408e66 <.LBB58>:
  __ASM volatile ("dsb 0xF":::"memory");
  408e66:	f3bf 8f4f 	dsb	sy

00408e6a <.LBE60>:
    while (op_size > 0) {
  408e6a:	2a00      	cmp	r2, #0
  408e6c:	dd0b      	ble.n	408e86 <.LBB62>
  408e6e:	460b      	mov	r3, r1
  408e70:	3a01      	subs	r2, #1

00408e72 <.LVL4>:
  408e72:	f022 021f 	bic.w	r2, r2, #31

00408e76 <.LVL5>:
  408e76:	3220      	adds	r2, #32
  408e78:	4411      	add	r1, r2

00408e7a <.LVL6>:
      SCB->DCCMVAC = op_addr;
  408e7a:	4622      	mov	r2, r4

00408e7c <.LVL7>:
  408e7c:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
  408e80:	3320      	adds	r3, #32
    while (op_size > 0) {
  408e82:	4299      	cmp	r1, r3
  408e84:	d1fa      	bne.n	408e7c <.LVL7>

00408e86 <.LBB62>:
  408e86:	f3bf 8f4f 	dsb	sy

00408e8a <.LBB64>:
  __ASM volatile ("isb 0xF":::"memory");
  408e8a:	f3bf 8f6f 	isb	sy

00408e8e <.LBE58>:
    
    SCB_CleanDCache_by_Addr((uint32_t *)(&(sha256->icm_descriptor)), sizeof(struct icm_descriptor));
    SCB_CleanDCache_by_Addr((uint32_t *)input, length);
    SCB_CleanInvalidateDCache_by_Addr((uint32_t *)&(sha256->digest), SHA256_DIGEST_SIZE);
  408e8e:	f100 0180 	add.w	r1, r0, #128	; 0x80

00408e92 <.LBB66>:
  __ASM volatile ("dsb 0xF":::"memory");
  408e92:	f3bf 8f4f 	dsb	sy

00408e96 <.LBE68>:
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
      SCB->DCCIMVAC = op_addr;
  408e96:	4b21      	ldr	r3, [pc, #132]	; (408f1c <.LCFI1+0x6>)
  408e98:	f8c3 1270 	str.w	r1, [r3, #624]	; 0x270

00408e9c <.LBB70>:
  408e9c:	f3bf 8f4f 	dsb	sy

00408ea0 <.LBB72>:
  __ASM volatile ("isb 0xF":::"memory");
  408ea0:	f3bf 8f6f 	isb	sy

00408ea4 <.LBE66>:


    /* ICM can set up FIPS default starting digest */
    ICM_REGS->ICM_DSCR = (uint32_t)&sha256->icm_descriptor;
  408ea4:	4b1c      	ldr	r3, [pc, #112]	; (408f18 <.LCFI1+0x2>)
  408ea6:	6318      	str	r0, [r3, #48]	; 0x30
    ICM_REGS->ICM_CFG = ICM_CFG_SLBDIS(1) 
  408ea8:	f243 0204 	movw	r2, #12292	; 0x3004
  408eac:	601a      	str	r2, [r3, #0]
                 | ICM_CFG_BBC(0)
                 | ICM_CFG_UALGO_SHA256
                 | ICM_CFG_UIHASH_Msk;

    /* MUST BE ALIGNED at 128! */
    ICM_REGS->ICM_HASH = (uint32_t)(&(sha256->digest));
  408eae:	6359      	str	r1, [r3, #52]	; 0x34

    ICM_REGS->ICM_UIHVAL[0] = sha256->digest[0];
  408eb0:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  408eb4:	639a      	str	r2, [r3, #56]	; 0x38
    ICM_REGS->ICM_UIHVAL[1] = sha256->digest[1];
  408eb6:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
  408eba:	63da      	str	r2, [r3, #60]	; 0x3c
    ICM_REGS->ICM_UIHVAL[2] = sha256->digest[2];
  408ebc:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
  408ec0:	641a      	str	r2, [r3, #64]	; 0x40
    ICM_REGS->ICM_UIHVAL[3] = sha256->digest[3];
  408ec2:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
  408ec6:	645a      	str	r2, [r3, #68]	; 0x44
    ICM_REGS->ICM_UIHVAL[4] = sha256->digest[4];
  408ec8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
  408ecc:	649a      	str	r2, [r3, #72]	; 0x48
    ICM_REGS->ICM_UIHVAL[5] = sha256->digest[5];
  408ece:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
  408ed2:	64da      	str	r2, [r3, #76]	; 0x4c
    ICM_REGS->ICM_UIHVAL[6] = sha256->digest[6];
  408ed4:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
  408ed8:	651a      	str	r2, [r3, #80]	; 0x50
    ICM_REGS->ICM_UIHVAL[7] = sha256->digest[7];
  408eda:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
  408ede:	655a      	str	r2, [r3, #84]	; 0x54

00408ee0 <.LBB74>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  408ee0:	f3bf 8f5f 	dmb	sy

00408ee4 <.LBE74>:

    /* memory barrier - sync all before enable ICM */
    __DMB();

    ICM_REGS->ICM_IER = ICM_IER_RHC(1);
  408ee4:	2201      	movs	r2, #1
  408ee6:	611a      	str	r2, [r3, #16]
    
    /* enable the ICM and wait */
    ICM_REGS->ICM_CTRL = ICM_CTRL_ENABLE(1);
  408ee8:	605a      	str	r2, [r3, #4]
    while (!(ICM_REGS->ICM_ISR & ICM_ISR_RHC_Msk))
  408eea:	461a      	mov	r2, r3
  408eec:	69d3      	ldr	r3, [r2, #28]
  408eee:	f013 0f0f 	tst.w	r3, #15
  408ef2:	d0fb      	beq.n	408eec <.LBE74+0x8>
    {
        /* wait - when finished digest will be updated */
    }
    
    ICM_REGS->ICM_CTRL = ICM_CTRL_DISABLE(1);
  408ef4:	4b08      	ldr	r3, [pc, #32]	; (408f18 <.LCFI1+0x2>)
  408ef6:	2202      	movs	r2, #2
  408ef8:	605a      	str	r2, [r3, #4]
    ICM_REGS->ICM_CTRL = ICM_CTRL_SWRST(1);
  408efa:	2204      	movs	r2, #4
  408efc:	605a      	str	r2, [r3, #4]

00408efe <.LBB76>:
  __ASM volatile ("dsb 0xF":::"memory");
  408efe:	f3bf 8f4f 	dsb	sy

00408f02 <.LBE78>:
  408f02:	4b06      	ldr	r3, [pc, #24]	; (408f1c <.LCFI1+0x6>)
  408f04:	f8c3 1270 	str.w	r1, [r3, #624]	; 0x270

00408f08 <.LBB80>:
  408f08:	f3bf 8f4f 	dsb	sy

00408f0c <.LBB82>:
  __ASM volatile ("isb 0xF":::"memory");
  408f0c:	f3bf 8f6f 	isb	sy

00408f10 <.LBE76>:

    SCB_CleanInvalidateDCache_by_Addr((uint32_t *)&(sha256->digest), SHA256_DIGEST_SIZE);
    
    return 0;
}
  408f10:	2000      	movs	r0, #0

00408f12 <.LVL17>:
  408f12:	f85d 4b04 	ldr.w	r4, [sp], #4

00408f16 <.LCFI1>:
  408f16:	4770      	bx	lr
  408f18:	40048000 	.word	0x40048000
  408f1c:	e000ed00 	.word	0xe000ed00

Disassembly of section .text%85:

00408f40 <strlen>:
  408f40:	f890 f000 	pld	[r0]
  408f44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  408f48:	f020 0107 	bic.w	r1, r0, #7
  408f4c:	f06f 0c00 	mvn.w	ip, #0
  408f50:	f010 0407 	ands.w	r4, r0, #7
  408f54:	f891 f020 	pld	[r1, #32]
  408f58:	f040 8049 	bne.w	408fee <strlen+0xae>
  408f5c:	f04f 0400 	mov.w	r4, #0
  408f60:	f06f 0007 	mvn.w	r0, #7
  408f64:	e9d1 2300 	ldrd	r2, r3, [r1]
  408f68:	f891 f040 	pld	[r1, #64]	; 0x40
  408f6c:	f100 0008 	add.w	r0, r0, #8
  408f70:	fa82 f24c 	uadd8	r2, r2, ip
  408f74:	faa4 f28c 	sel	r2, r4, ip
  408f78:	fa83 f34c 	uadd8	r3, r3, ip
  408f7c:	faa2 f38c 	sel	r3, r2, ip
  408f80:	bb4b      	cbnz	r3, 408fd6 <strlen+0x96>
  408f82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  408f86:	fa82 f24c 	uadd8	r2, r2, ip
  408f8a:	f100 0008 	add.w	r0, r0, #8
  408f8e:	faa4 f28c 	sel	r2, r4, ip
  408f92:	fa83 f34c 	uadd8	r3, r3, ip
  408f96:	faa2 f38c 	sel	r3, r2, ip
  408f9a:	b9e3      	cbnz	r3, 408fd6 <strlen+0x96>
  408f9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  408fa0:	fa82 f24c 	uadd8	r2, r2, ip
  408fa4:	f100 0008 	add.w	r0, r0, #8
  408fa8:	faa4 f28c 	sel	r2, r4, ip
  408fac:	fa83 f34c 	uadd8	r3, r3, ip
  408fb0:	faa2 f38c 	sel	r3, r2, ip
  408fb4:	b97b      	cbnz	r3, 408fd6 <strlen+0x96>
  408fb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  408fba:	f101 0120 	add.w	r1, r1, #32
  408fbe:	fa82 f24c 	uadd8	r2, r2, ip
  408fc2:	f100 0008 	add.w	r0, r0, #8
  408fc6:	faa4 f28c 	sel	r2, r4, ip
  408fca:	fa83 f34c 	uadd8	r3, r3, ip
  408fce:	faa2 f38c 	sel	r3, r2, ip
  408fd2:	2b00      	cmp	r3, #0
  408fd4:	d0c6      	beq.n	408f64 <strlen+0x24>
  408fd6:	2a00      	cmp	r2, #0
  408fd8:	bf04      	itt	eq
  408fda:	3004      	addeq	r0, #4
  408fdc:	461a      	moveq	r2, r3
  408fde:	ba12      	rev	r2, r2
  408fe0:	fab2 f282 	clz	r2, r2
  408fe4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  408fe8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  408fec:	4770      	bx	lr
  408fee:	e9d1 2300 	ldrd	r2, r3, [r1]
  408ff2:	f004 0503 	and.w	r5, r4, #3
  408ff6:	f1c4 0000 	rsb	r0, r4, #0
  408ffa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  408ffe:	f014 0f04 	tst.w	r4, #4
  409002:	f891 f040 	pld	[r1, #64]	; 0x40
  409006:	fa0c f505 	lsl.w	r5, ip, r5
  40900a:	ea62 0205 	orn	r2, r2, r5
  40900e:	bf1c      	itt	ne
  409010:	ea63 0305 	ornne	r3, r3, r5
  409014:	4662      	movne	r2, ip
  409016:	f04f 0400 	mov.w	r4, #0
  40901a:	e7a9      	b.n	408f70 <strlen+0x30>

Disassembly of section .text.SYS_TIME_PLIBCallback%86:

0040901c <SYS_TIME_PLIBCallback>:
        }
    }
}

static void SYS_TIME_PLIBCallback(uintptr_t context)
{
  40901c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

00409020 <.LCFI24>:
    SYS_TIME_COUNTER_OBJ* counterObj = (SYS_TIME_COUNTER_OBJ *)&gSystemCounterObj;
    SYS_TIME_TIMER_OBJ* tmrActive = counterObj->tmrActive;
  409020:	4c2f      	ldr	r4, [pc, #188]	; (4090e0 <.LVL234>)
  409022:	6b25      	ldr	r5, [r4, #48]	; 0x30

00409024 <.LVL210>:
    uint32_t elapsedCount = 0;
    bool interruptState;

    counterObj->hwTimerCurrentValue = counterObj->timePlib->timerCounterGet();
  409024:	6863      	ldr	r3, [r4, #4]
  409026:	699b      	ldr	r3, [r3, #24]
  409028:	4798      	blx	r3

0040902a <.LVL211>:
  40902a:	6160      	str	r0, [r4, #20]

    elapsedCount = SYS_TIME_GetElapsedCount(counterObj->hwTimerCurrentValue)                  ;
  40902c:	f002 fd92 	bl	40bb54 <.LFE163>

00409030 <.LVL212>:
  409030:	4606      	mov	r6, r0

00409032 <.LVL213>:

    if (tmrActive != NULL)
  409032:	2d00      	cmp	r5, #0
  409034:	d047      	beq.n	4090c6 <.LVL228>
    {
        counterObj->interruptNestingCount++;
  409036:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  40903a:	3301      	adds	r3, #1
  40903c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

00409040 <.LBB31>:
    SYS_TIME_UpdateTimerList(elapsedCounts);
  409040:	f002 fb08 	bl	40b654 <.LFE155>

00409044 <.LBB33>:
    SYS_TIME_TIMER_OBJ* tmrActive = counterObj->tmrActive;
  409044:	6b24      	ldr	r4, [r4, #48]	; 0x30

00409046 <.LVL216>:
    while (tmrActive != NULL)
  409046:	b134      	cbz	r4, 409056 <.LVL218>
        if(tmrActive->relativeTimePending == 0)
  409048:	68a3      	ldr	r3, [r4, #8]
  40904a:	b923      	cbnz	r3, 409056 <.LVL218>
            tmrActive->tmrElapsedFlag = true;
  40904c:	2501      	movs	r5, #1

0040904e <.LVL217>:
                    tmrActive->active = false;
  40904e:	f04f 0800 	mov.w	r8, #0
            tmrActive = counterObj->tmrActive;
  409052:	4f23      	ldr	r7, [pc, #140]	; (4090e0 <.LVL234>)
  409054:	e011      	b.n	40907a <.LVL221+0x14>

00409056 <.LVL218>:
  409056:	4c23      	ldr	r4, [pc, #140]	; (4090e4 <.LVL234+0x4>)

00409058 <.LVL219>:
  409058:	f504 75a0 	add.w	r5, r4, #320	; 0x140

0040905c <.LBB36>:
            timers[i].tmrElapsed = false;
  40905c:	2700      	movs	r7, #0
  40905e:	e01f      	b.n	4090a0 <.LBB38+0x4>

00409060 <.LBB37>:
                SYS_TIME_TimerDestroy(tmrActive->tmrHandle);
  409060:	69e0      	ldr	r0, [r4, #28]
  409062:	f002 f925 	bl	40b2b0 <.LFE168>

00409066 <.LVL221>:
            if(tmrActive->callback != NULL)
  409066:	68e3      	ldr	r3, [r4, #12]
  409068:	b10b      	cbz	r3, 40906e <.LVL221+0x8>
                tmrActive->callback(tmrActive->context);
  40906a:	6920      	ldr	r0, [r4, #16]
  40906c:	4798      	blx	r3
            tmrActive = counterObj->tmrActive;
  40906e:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    while (tmrActive != NULL)
  409070:	2c00      	cmp	r4, #0
  409072:	d0f0      	beq.n	409056 <.LVL218>
        if(tmrActive->relativeTimePending == 0)
  409074:	68a3      	ldr	r3, [r4, #8]
  409076:	2b00      	cmp	r3, #0
  409078:	d1ed      	bne.n	409056 <.LVL218>
            tmrActive->tmrElapsedFlag = true;
  40907a:	7525      	strb	r5, [r4, #20]
            tmrActive->tmrElapsed = true;
  40907c:	7565      	strb	r5, [r4, #21]
            if ((tmrActive->type == SYS_TIME_SINGLE) && (tmrActive->callback != NULL))
  40907e:	78a3      	ldrb	r3, [r4, #2]
  409080:	b913      	cbnz	r3, 409088 <.LVL221+0x22>
  409082:	68e3      	ldr	r3, [r4, #12]
  409084:	2b00      	cmp	r3, #0
  409086:	d1eb      	bne.n	409060 <.LBB37>
                SYS_TIME_RemoveFromList(tmrActive);
  409088:	4620      	mov	r0, r4
  40908a:	f001 fe7f 	bl	40ad8c <.LFE42>

0040908e <.LVL224>:
                if (tmrActive->type == SYS_TIME_SINGLE)
  40908e:	78a3      	ldrb	r3, [r4, #2]
  409090:	2b00      	cmp	r3, #0
  409092:	d1e8      	bne.n	409066 <.LVL221>
                    tmrActive->active = false;
  409094:	f884 8001 	strb.w	r8, [r4, #1]
  409098:	e7e5      	b.n	409066 <.LVL221>

0040909a <.LVL225>:
  40909a:	3420      	adds	r4, #32

0040909c <.LBB38>:
    for (uint8_t i = 0; i < SYS_TIME_MAX_TIMERS; i++)
  40909c:	42ac      	cmp	r4, r5
  40909e:	d00c      	beq.n	4090ba <.LBE31>
  4090a0:	4620      	mov	r0, r4
        if (timers[i].tmrElapsed == true)
  4090a2:	7d63      	ldrb	r3, [r4, #21]
  4090a4:	2b00      	cmp	r3, #0
  4090a6:	d0f8      	beq.n	40909a <.LVL225>
            timers[i].tmrElapsed = false;
  4090a8:	7567      	strb	r7, [r4, #21]
            if (timers[i].type == SYS_TIME_PERIODIC)
  4090aa:	78a3      	ldrb	r3, [r4, #2]
  4090ac:	2b01      	cmp	r3, #1
  4090ae:	d1f4      	bne.n	40909a <.LVL225>
                timers[i].relativeTimePending = timers[i].requestedTime;
  4090b0:	6863      	ldr	r3, [r4, #4]
  4090b2:	60a3      	str	r3, [r4, #8]
                SYS_TIME_AddToList(&timers[i]);
  4090b4:	f000 fdec 	bl	409c90 <.LFE154>

004090b8 <.LVL226>:
  4090b8:	e7ef      	b.n	40909a <.LVL225>

004090ba <.LBE31>:

        SYS_TIME_UpdateTime(elapsedCount);

        counterObj->interruptNestingCount--;
  4090ba:	4a09      	ldr	r2, [pc, #36]	; (4090e0 <.LVL234>)
  4090bc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
  4090c0:	3b01      	subs	r3, #1
  4090c2:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c

004090c6 <.LVL228>:
    }
    SYS_TIME_Counter64Update(elapsedCount);
  4090c6:	4630      	mov	r0, r6
  4090c8:	f002 fc42 	bl	40b950 <.LFE155>

004090cc <.LVL229>:

    interruptState = SYS_INT_Disable();
  4090cc:	f002 fde0 	bl	40bc90 <SYS_INT_Disable>

004090d0 <.LVL230>:
  4090d0:	4604      	mov	r4, r0

004090d2 <.LVL231>:
    SYS_TIME_HwTimerCompareUpdate();
  4090d2:	f000 ff8b 	bl	409fec <.LFE18>

004090d6 <.LVL232>:
    SYS_INT_Restore(interruptState);
  4090d6:	4620      	mov	r0, r4
  4090d8:	f002 fde3 	bl	40bca2 <.LFE142>

004090dc <.LVL233>:
  4090dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004090e0 <.LVL234>:
  4090e0:	20417c00 	.word	0x20417c00
  4090e4:	204179bc 	.word	0x204179bc

Disassembly of section .text.Sha1Process%87:

004090e8 <Sha1Process>:
}



static int32_t Sha1Process(Sha *sha, const uint8_t *input, word32 length)
{
  4090e8:	b410      	push	{r4}

004090ea <.LCFI0>:
	ICM_REGS->ICM_CTRL = ICM_CTRL_SWRST(1);
  4090ea:	2404      	movs	r4, #4
  4090ec:	4b2e      	ldr	r3, [pc, #184]	; (4091a8 <.LCFI1+0x2>)
  4090ee:	605c      	str	r4, [r3, #4]
    sha->icm_descriptor.start_addr = (uint32_t)input;
  4090f0:	6001      	str	r1, [r0, #0]

    /* Transfer size = (tran_size + 1) * 512bits */
    sha->icm_descriptor.tran_size =  (length >> 6) - 1;
  4090f2:	0994      	lsrs	r4, r2, #6
  4090f4:	3c01      	subs	r4, #1
  4090f6:	6084      	str	r4, [r0, #8]

004090f8 <.LBB50>:
  __ASM volatile ("dsb 0xF":::"memory");
  4090f8:	f3bf 8f4f 	dsb	sy

004090fc <.LBE52>:
      SCB->DCCMVAC = op_addr;
  4090fc:	4c2b      	ldr	r4, [pc, #172]	; (4091ac <.LCFI1+0x6>)
  4090fe:	f8c4 0268 	str.w	r0, [r4, #616]	; 0x268

00409102 <.LBB54>:
  409102:	f3bf 8f4f 	dsb	sy

00409106 <.LBB56>:
  __ASM volatile ("isb 0xF":::"memory");
  409106:	f3bf 8f6f 	isb	sy

0040910a <.LBB58>:
  __ASM volatile ("dsb 0xF":::"memory");
  40910a:	f3bf 8f4f 	dsb	sy

0040910e <.LBE60>:
    while (op_size > 0) {
  40910e:	2a00      	cmp	r2, #0
  409110:	dd0b      	ble.n	40912a <.LBB62>
  409112:	460b      	mov	r3, r1
  409114:	3a01      	subs	r2, #1

00409116 <.LVL4>:
  409116:	f022 021f 	bic.w	r2, r2, #31

0040911a <.LVL5>:
  40911a:	3220      	adds	r2, #32
  40911c:	4411      	add	r1, r2

0040911e <.LVL6>:
      SCB->DCCMVAC = op_addr;
  40911e:	4622      	mov	r2, r4

00409120 <.LVL7>:
  409120:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
  409124:	3320      	adds	r3, #32
    while (op_size > 0) {
  409126:	4299      	cmp	r1, r3
  409128:	d1fa      	bne.n	409120 <.LVL7>

0040912a <.LBB62>:
  40912a:	f3bf 8f4f 	dsb	sy

0040912e <.LBB64>:
  __ASM volatile ("isb 0xF":::"memory");
  40912e:	f3bf 8f6f 	isb	sy

00409132 <.LBE58>:

    SCB_CleanDCache_by_Addr((uint32_t *)(&(sha->icm_descriptor)), sizeof(struct icm_descriptor));
    SCB_CleanDCache_by_Addr((uint32_t *)input, length);
    SCB_CleanInvalidateDCache_by_Addr((uint32_t *)&(sha->digest), SHA_DIGEST_SIZE);
  409132:	f100 0180 	add.w	r1, r0, #128	; 0x80

00409136 <.LBB66>:
  __ASM volatile ("dsb 0xF":::"memory");
  409136:	f3bf 8f4f 	dsb	sy

0040913a <.LBE68>:
      SCB->DCCIMVAC = op_addr;
  40913a:	4b1c      	ldr	r3, [pc, #112]	; (4091ac <.LCFI1+0x6>)
  40913c:	f8c3 1270 	str.w	r1, [r3, #624]	; 0x270

00409140 <.LBB70>:
  409140:	f3bf 8f4f 	dsb	sy

00409144 <.LBB72>:
  __ASM volatile ("isb 0xF":::"memory");
  409144:	f3bf 8f6f 	isb	sy

00409148 <.LBE66>:

    /* ICM can set up FIPS default starting digest */
    ICM_REGS->ICM_DSCR = (uint32_t)&sha->icm_descriptor;
  409148:	4b17      	ldr	r3, [pc, #92]	; (4091a8 <.LCFI1+0x2>)
  40914a:	6318      	str	r0, [r3, #48]	; 0x30


    /* configured so initial hash digest is auto-loaded */
    ICM_REGS->ICM_CFG = ICM_CFG_SLBDIS(1)
  40914c:	f241 0204 	movw	r2, #4100	; 0x1004
  409150:	601a      	str	r2, [r3, #0]
                 | ICM_CFG_BBC(0)
                 | ICM_CFG_UALGO_SHA1
                 | ICM_CFG_UIHASH_Msk;

    /* digest must be 128 aligned */
	ICM_REGS->ICM_HASH = (uint32_t)(&(sha->digest));
  409152:	6359      	str	r1, [r3, #52]	; 0x34
    ICM_REGS->ICM_UIHVAL[0] = sha->digest[0];
  409154:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  409158:	639a      	str	r2, [r3, #56]	; 0x38
    ICM_REGS->ICM_UIHVAL[1] = sha->digest[1];
  40915a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
  40915e:	63da      	str	r2, [r3, #60]	; 0x3c
    ICM_REGS->ICM_UIHVAL[2] = sha->digest[2];
  409160:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
  409164:	641a      	str	r2, [r3, #64]	; 0x40
    ICM_REGS->ICM_UIHVAL[3] = sha->digest[3];
  409166:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
  40916a:	645a      	str	r2, [r3, #68]	; 0x44
    ICM_REGS->ICM_UIHVAL[4] = sha->digest[4];
  40916c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
  409170:	649a      	str	r2, [r3, #72]	; 0x48

00409172 <.LBB74>:
  __ASM volatile ("dmb 0xF":::"memory");
  409172:	f3bf 8f5f 	dmb	sy

00409176 <.LBE74>:

    /* memory barrier */
    __DMB();

    /* enable the ICM and wait ICM CTRL is write only - don't OR it */
    ICM_REGS->ICM_CTRL = ICM_CTRL_ENABLE(1);
  409176:	2201      	movs	r2, #1
  409178:	605a      	str	r2, [r3, #4]
    while (!(ICM_REGS->ICM_ISR & ICM_ISR_RHC_Msk))
  40917a:	461a      	mov	r2, r3
  40917c:	69d3      	ldr	r3, [r2, #28]
  40917e:	f013 0f0f 	tst.w	r3, #15
  409182:	d0fb      	beq.n	40917c <.LBE74+0x6>
    {
        /* wait - when finished digest will be updated */
    }
    ICM_REGS->ICM_CTRL = ICM_CTRL_DISABLE(1);
  409184:	4b08      	ldr	r3, [pc, #32]	; (4091a8 <.LCFI1+0x2>)
  409186:	2202      	movs	r2, #2
  409188:	605a      	str	r2, [r3, #4]
    ICM_REGS->ICM_CTRL = ICM_CTRL_SWRST(1);
  40918a:	2204      	movs	r2, #4
  40918c:	605a      	str	r2, [r3, #4]

0040918e <.LBB76>:
  __ASM volatile ("dsb 0xF":::"memory");
  40918e:	f3bf 8f4f 	dsb	sy

00409192 <.LBE78>:
  409192:	4b06      	ldr	r3, [pc, #24]	; (4091ac <.LCFI1+0x6>)
  409194:	f8c3 1270 	str.w	r1, [r3, #624]	; 0x270

00409198 <.LBB80>:
  409198:	f3bf 8f4f 	dsb	sy

0040919c <.LBB82>:
  __ASM volatile ("isb 0xF":::"memory");
  40919c:	f3bf 8f6f 	isb	sy

004091a0 <.LBE76>:

    SCB_CleanInvalidateDCache_by_Addr((uint32_t *)&(sha->digest), SHA_DIGEST_SIZE);

    return 0;
}
  4091a0:	2000      	movs	r0, #0

004091a2 <.LVL17>:
  4091a2:	f85d 4b04 	ldr.w	r4, [sp], #4

004091a6 <.LCFI1>:
  4091a6:	4770      	bx	lr
  4091a8:	40048000 	.word	0x40048000
  4091ac:	e000ed00 	.word	0xe000ed00

Disassembly of section .text.memmove%88:

004091b0 <memmove>:
  4091b0:	4288      	cmp	r0, r1
  4091b2:	b5f0      	push	{r4, r5, r6, r7, lr}

004091b4 <.LCFI0>:
  4091b4:	d90d      	bls.n	4091d2 <.LVL6>
  4091b6:	188b      	adds	r3, r1, r2
  4091b8:	4298      	cmp	r0, r3
  4091ba:	d20a      	bcs.n	4091d2 <.LVL6>

004091bc <.LVL1>:
  4091bc:	1884      	adds	r4, r0, r2

004091be <.LVL2>:
  4091be:	2a00      	cmp	r2, #0
  4091c0:	d051      	beq.n	409266 <.LVL26>
  4091c2:	4622      	mov	r2, r4

004091c4 <.LVL3>:
  4091c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!

004091c8 <.LVL4>:
  4091c8:	f802 4d01 	strb.w	r4, [r2, #-1]!

004091cc <.LVL5>:
  4091cc:	4299      	cmp	r1, r3
  4091ce:	d1f9      	bne.n	4091c4 <.LVL3>
  4091d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

004091d2 <.LVL6>:
  4091d2:	2a0f      	cmp	r2, #15
  4091d4:	d948      	bls.n	409268 <.LVL27>
  4091d6:	ea41 0300 	orr.w	r3, r1, r0
  4091da:	079b      	lsls	r3, r3, #30
  4091dc:	d146      	bne.n	40926c <.LVL27+0x4>
  4091de:	f100 0410 	add.w	r4, r0, #16
  4091e2:	f101 0310 	add.w	r3, r1, #16
  4091e6:	4615      	mov	r5, r2

004091e8 <.LVL7>:
  4091e8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4091ec:	f844 6c10 	str.w	r6, [r4, #-16]

004091f0 <.LVL8>:
  4091f0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4091f4:	f844 6c0c 	str.w	r6, [r4, #-12]

004091f8 <.LVL9>:
  4091f8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4091fc:	f844 6c08 	str.w	r6, [r4, #-8]

00409200 <.LVL10>:
  409200:	3d10      	subs	r5, #16
  409202:	f853 6c04 	ldr.w	r6, [r3, #-4]
  409206:	f844 6c04 	str.w	r6, [r4, #-4]
  40920a:	2d0f      	cmp	r5, #15
  40920c:	f103 0310 	add.w	r3, r3, #16

00409210 <.LVL12>:
  409210:	f104 0410 	add.w	r4, r4, #16
  409214:	d8e8      	bhi.n	4091e8 <.LVL7>
  409216:	f1a2 0310 	sub.w	r3, r2, #16

0040921a <.LVL13>:
  40921a:	f023 030f 	bic.w	r3, r3, #15
  40921e:	f002 0e0f 	and.w	lr, r2, #15
  409222:	3310      	adds	r3, #16
  409224:	f1be 0f03 	cmp.w	lr, #3
  409228:	4419      	add	r1, r3

0040922a <.LVL14>:
  40922a:	4403      	add	r3, r0

0040922c <.LVL15>:
  40922c:	d921      	bls.n	409272 <.LVL29>
  40922e:	1f1e      	subs	r6, r3, #4
  409230:	460d      	mov	r5, r1
  409232:	4674      	mov	r4, lr

00409234 <.LVL16>:
  409234:	3c04      	subs	r4, #4

00409236 <.LVL17>:
  409236:	f855 7b04 	ldr.w	r7, [r5], #4

0040923a <.LVL18>:
  40923a:	f846 7f04 	str.w	r7, [r6, #4]!
  40923e:	2c03      	cmp	r4, #3
  409240:	d8f8      	bhi.n	409234 <.LVL16>
  409242:	f1ae 0404 	sub.w	r4, lr, #4

00409246 <.LVL19>:
  409246:	f024 0403 	bic.w	r4, r4, #3
  40924a:	3404      	adds	r4, #4
  40924c:	4421      	add	r1, r4
  40924e:	4423      	add	r3, r4
  409250:	f002 0203 	and.w	r2, r2, #3

00409254 <.LVL20>:
  409254:	b162      	cbz	r2, 409270 <.LVL28>

00409256 <.LVL21>:
  409256:	3b01      	subs	r3, #1

00409258 <.LVL22>:
  409258:	440a      	add	r2, r1

0040925a <.LVL23>:
  40925a:	f811 4b01 	ldrb.w	r4, [r1], #1

0040925e <.LVL24>:
  40925e:	f803 4f01 	strb.w	r4, [r3, #1]!

00409262 <.LVL25>:
  409262:	428a      	cmp	r2, r1
  409264:	d1f9      	bne.n	40925a <.LVL23>

00409266 <.LVL26>:
  409266:	bdf0      	pop	{r4, r5, r6, r7, pc}

00409268 <.LVL27>:
  409268:	4603      	mov	r3, r0
  40926a:	e7f3      	b.n	409254 <.LVL20>
  40926c:	4603      	mov	r3, r0
  40926e:	e7f2      	b.n	409256 <.LVL21>

00409270 <.LVL28>:
  409270:	bdf0      	pop	{r4, r5, r6, r7, pc}

00409272 <.LVL29>:
  409272:	4672      	mov	r2, lr
  409274:	e7ee      	b.n	409254 <.LVL20>

00409276 <.LFE17>:
  409276:	bf00      	nop

Disassembly of section .rodata.__mprec_tens%89:

00409278 <__mprec_tens>:
  409278:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  409288:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  409298:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  4092a8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  4092b8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  4092c8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  4092d8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  4092e8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  4092f8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  409308:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  409318:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  409328:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  409338:	9db4 79d9 7843 44ea                         ...yCx.D

Disassembly of section .text.wc_Md5Final%90:

00409340 <wc_Md5Final>:

int wc_Md5Final(Md5* md5, byte* hash)
{
    byte* local;

    if (md5 == NULL || hash == NULL) {
  409340:	2800      	cmp	r0, #0
  409342:	d059      	beq.n	4093f8 <.LCFI7>
{
  409344:	b570      	push	{r4, r5, r6, lr}

00409346 <.LCFI6>:
  409346:	4604      	mov	r4, r0
    if (md5 == NULL || hash == NULL) {
  409348:	2900      	cmp	r1, #0
  40934a:	d052      	beq.n	4093f2 <.LVL364>
        return IntelQaSymMd5(&md5->asyncDev, hash, NULL, MD5_DIGEST_SIZE);
    #endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    local = (byte*)md5->buffer;
  40934c:	f100 060c 	add.w	r6, r0, #12

00409350 <.LVL351>:

    AddMd5Length(md5, md5->buffLen);  /* before adding pads */
  409350:	6803      	ldr	r3, [r0, #0]

00409352 <.LBB151>:
    word32 tmp = md5->loLen;
  409352:	6840      	ldr	r0, [r0, #4]

00409354 <.LVL353>:
    if ((md5->loLen += len) < tmp) {
  409354:	181a      	adds	r2, r3, r0
  409356:	6062      	str	r2, [r4, #4]
  409358:	4290      	cmp	r0, r2
  40935a:	d902      	bls.n	409362 <.LVL353+0xe>
        md5->hiLen++;                       /* carry low to high */
  40935c:	68a2      	ldr	r2, [r4, #8]
  40935e:	3201      	adds	r2, #1
  409360:	60a2      	str	r2, [r4, #8]
  409362:	460d      	mov	r5, r1

00409364 <.LBE151>:
    local[md5->buffLen++] = 0x80;  /* add 1 */
  409364:	1c5a      	adds	r2, r3, #1
  409366:	6022      	str	r2, [r4, #0]
  409368:	2280      	movs	r2, #128	; 0x80
  40936a:	54f2      	strb	r2, [r6, r3]

    /* pad with zeros */
    if (md5->buffLen > MD5_PAD_SIZE) {
  40936c:	6820      	ldr	r0, [r4, #0]
  40936e:	2838      	cmp	r0, #56	; 0x38
  409370:	d831      	bhi.n	4093d6 <.LVL360>

00409372 <.LVL355>:
        ByteReverseWords(md5->buffer, md5->buffer, MD5_BLOCK_SIZE);
    #endif
        XTRANSFORM(md5, local);
        md5->buffLen = 0;
    }
    XMEMSET(&local[md5->buffLen], 0, MD5_PAD_SIZE - md5->buffLen);
  409372:	6820      	ldr	r0, [r4, #0]
  409374:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
  409378:	2100      	movs	r1, #0
  40937a:	4430      	add	r0, r6
  40937c:	f000 fba6 	bl	409acc <.LFE157>

00409380 <.LVL356>:
#if defined(BIG_ENDIAN_ORDER) && !defined(FREESCALE_MMCAU_SHA)
    ByteReverseWords(md5->buffer, md5->buffer, MD5_BLOCK_SIZE);
#endif

    /* put lengths in bits */
    md5->hiLen = (md5->loLen >> (8*sizeof(md5->loLen) - 3)) +
  409380:	6863      	ldr	r3, [r4, #4]
                 (md5->hiLen << 3);
  409382:	68a1      	ldr	r1, [r4, #8]
    md5->hiLen = (md5->loLen >> (8*sizeof(md5->loLen) - 3)) +
  409384:	0f5a      	lsrs	r2, r3, #29
  409386:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
  40938a:	60a2      	str	r2, [r4, #8]
    md5->loLen = md5->loLen << 3;
  40938c:	00db      	lsls	r3, r3, #3
  40938e:	6063      	str	r3, [r4, #4]

    /* store lengths */
    /* ! length ordering dependent on digest endian type ! */
    XMEMCPY(&local[MD5_PAD_SIZE], &md5->loLen, sizeof(word32));
  409390:	6463      	str	r3, [r4, #68]	; 0x44
    XMEMCPY(&local[MD5_PAD_SIZE + sizeof(word32)], &md5->hiLen, sizeof(word32));
  409392:	64a2      	str	r2, [r4, #72]	; 0x48

    /* final transform and result to hash */
    XTRANSFORM(md5, local);
  409394:	4620      	mov	r0, r4
  409396:	f7fc fcb5 	bl	405d04 <.LFE18>

0040939a <.LVL357>:
#ifdef BIG_ENDIAN_ORDER
    ByteReverseWords(md5->digest, md5->digest, MD5_DIGEST_SIZE);
#endif
    XMEMCPY(hash, md5->digest, MD5_DIGEST_SIZE);
  40939a:	4623      	mov	r3, r4
  40939c:	f853 0f4c 	ldr.w	r0, [r3, #76]!
  4093a0:	6859      	ldr	r1, [r3, #4]
  4093a2:	689a      	ldr	r2, [r3, #8]
  4093a4:	68db      	ldr	r3, [r3, #12]
  4093a6:	6028      	str	r0, [r5, #0]
  4093a8:	6069      	str	r1, [r5, #4]
  4093aa:	60aa      	str	r2, [r5, #8]
  4093ac:	60eb      	str	r3, [r5, #12]

004093ae <.LBB153>:
    md5->digest[0] = 0x67452301L;
  4093ae:	4b14      	ldr	r3, [pc, #80]	; (409400 <.LVL367+0x4>)
  4093b0:	64e3      	str	r3, [r4, #76]	; 0x4c
    md5->digest[1] = 0xefcdab89L;
  4093b2:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
  4093b6:	6523      	str	r3, [r4, #80]	; 0x50
    md5->digest[2] = 0x98badcfeL;
  4093b8:	f103 4329 	add.w	r3, r3, #2835349504	; 0xa9000000
  4093bc:	f5a3 1396 	sub.w	r3, r3, #1228800	; 0x12c000
  4093c0:	f6a3 638b 	subw	r3, r3, #3723	; 0xe8b
  4093c4:	6563      	str	r3, [r4, #84]	; 0x54
    md5->digest[3] = 0x10325476L;
  4093c6:	f1a3 3388 	sub.w	r3, r3, #2290649224	; 0x88888888
  4093ca:	65a3      	str	r3, [r4, #88]	; 0x58
    md5->buffLen = 0;
  4093cc:	2000      	movs	r0, #0
  4093ce:	6020      	str	r0, [r4, #0]
    md5->loLen   = 0;
  4093d0:	6060      	str	r0, [r4, #4]
    md5->hiLen   = 0;
  4093d2:	60a0      	str	r0, [r4, #8]

004093d4 <.LBE153>:

    return _InitMd5(md5); /* reset state */
  4093d4:	bd70      	pop	{r4, r5, r6, pc}

004093d6 <.LVL360>:
        XMEMSET(&local[md5->buffLen], 0, MD5_BLOCK_SIZE - md5->buffLen);
  4093d6:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
  4093da:	2100      	movs	r1, #0

004093dc <.LVL361>:
  4093dc:	4430      	add	r0, r6
  4093de:	f000 fb75 	bl	409acc <.LFE157>

004093e2 <.LVL362>:
        md5->buffLen += MD5_BLOCK_SIZE - md5->buffLen;
  4093e2:	2340      	movs	r3, #64	; 0x40
  4093e4:	6023      	str	r3, [r4, #0]
        XTRANSFORM(md5, local);
  4093e6:	4620      	mov	r0, r4
  4093e8:	f7fc fc8c 	bl	405d04 <.LFE18>

004093ec <.LVL363>:
        md5->buffLen = 0;
  4093ec:	2300      	movs	r3, #0
  4093ee:	6023      	str	r3, [r4, #0]
  4093f0:	e7bf      	b.n	409372 <.LVL355>

004093f2 <.LVL364>:
        return BAD_FUNC_ARG;
  4093f2:	f06f 00ac 	mvn.w	r0, #172	; 0xac

004093f6 <.LVL365>:
}
  4093f6:	bd70      	pop	{r4, r5, r6, pc}

004093f8 <.LCFI7>:
        return BAD_FUNC_ARG;
  4093f8:	f06f 00ac 	mvn.w	r0, #172	; 0xac

004093fc <.LVL367>:
  4093fc:	4770      	bx	lr
  4093fe:	bf00      	nop
  409400:	67452301 	.word	0x67452301

Disassembly of section .text.vTaskSwitchContext%91:

00409404 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  409404:	4b2a      	ldr	r3, [pc, #168]	; (4094b0 <.LBB77+0x10>)
  409406:	681b      	ldr	r3, [r3, #0]
  409408:	2b00      	cmp	r3, #0
  40940a:	d138      	bne.n	40947e <.LBE75>
{
  40940c:	b510      	push	{r4, lr}

0040940e <.LCFI18>:
		xYieldPending = pdFALSE;
  40940e:	2200      	movs	r2, #0
  409410:	4b28      	ldr	r3, [pc, #160]	; (4094b4 <.LBB77+0x14>)
  409412:	601a      	str	r2, [r3, #0]

00409414 <.LBB74>:
		taskCHECK_FOR_STACK_OVERFLOW();
  409414:	4b28      	ldr	r3, [pc, #160]	; (4094b8 <.LBB77+0x18>)
  409416:	681b      	ldr	r3, [r3, #0]
  409418:	6b1b      	ldr	r3, [r3, #48]	; 0x30

0040941a <.LVL207>:
  40941a:	681a      	ldr	r2, [r3, #0]
  40941c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  409420:	d031      	beq.n	409486 <.LBB78>

00409422 <.LVL208>:
  409422:	4b25      	ldr	r3, [pc, #148]	; (4094b8 <.LBB77+0x18>)
  409424:	6818      	ldr	r0, [r3, #0]
  409426:	6819      	ldr	r1, [r3, #0]
  409428:	3134      	adds	r1, #52	; 0x34
  40942a:	f002 fb9f 	bl	40bb6c <.LFE155>

0040942e <.LBB75>:
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40942e:	4b23      	ldr	r3, [pc, #140]	; (4094bc <.LBB77+0x1c>)
  409430:	681b      	ldr	r3, [r3, #0]

00409432 <.LVL210>:
  409432:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  409436:	0092      	lsls	r2, r2, #2
  409438:	4921      	ldr	r1, [pc, #132]	; (4094c0 <.LBB77+0x20>)
  40943a:	588a      	ldr	r2, [r1, r2]
  40943c:	b932      	cbnz	r2, 40944c <.LBB76>
  40943e:	3b01      	subs	r3, #1
  409440:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  409444:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  409448:	2a00      	cmp	r2, #0
  40944a:	d0f8      	beq.n	40943e <.LVL210+0xc>

0040944c <.LBB76>:
  40944c:	4a1c      	ldr	r2, [pc, #112]	; (4094c0 <.LBB77+0x20>)
  40944e:	0099      	lsls	r1, r3, #2
  409450:	18c8      	adds	r0, r1, r3
  409452:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  409456:	6844      	ldr	r4, [r0, #4]
  409458:	6864      	ldr	r4, [r4, #4]
  40945a:	6044      	str	r4, [r0, #4]
  40945c:	4419      	add	r1, r3
  40945e:	4602      	mov	r2, r0
  409460:	3208      	adds	r2, #8
  409462:	4294      	cmp	r4, r2
  409464:	d01c      	beq.n	4094a0 <.LBB77>
  409466:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  40946a:	4a15      	ldr	r2, [pc, #84]	; (4094c0 <.LBB77+0x20>)
  40946c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  409470:	6852      	ldr	r2, [r2, #4]
  409472:	68d1      	ldr	r1, [r2, #12]
  409474:	4a10      	ldr	r2, [pc, #64]	; (4094b8 <.LBB77+0x18>)
  409476:	6011      	str	r1, [r2, #0]

00409478 <.LBE76>:
  409478:	4a10      	ldr	r2, [pc, #64]	; (4094bc <.LBB77+0x1c>)
  40947a:	6013      	str	r3, [r2, #0]
  40947c:	bd10      	pop	{r4, pc}

0040947e <.LBE75>:
		xYieldPending = pdTRUE;
  40947e:	2201      	movs	r2, #1
  409480:	4b0c      	ldr	r3, [pc, #48]	; (4094b4 <.LBB77+0x14>)
  409482:	601a      	str	r2, [r3, #0]
  409484:	4770      	bx	lr

00409486 <.LBB78>:
		taskCHECK_FOR_STACK_OVERFLOW();
  409486:	685a      	ldr	r2, [r3, #4]
  409488:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40948c:	d1c9      	bne.n	409422 <.LVL208>
  40948e:	689a      	ldr	r2, [r3, #8]
  409490:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  409494:	d1c5      	bne.n	409422 <.LVL208>
  409496:	68db      	ldr	r3, [r3, #12]

00409498 <.LVL215>:
  409498:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  40949c:	d1c1      	bne.n	409422 <.LVL208>
  40949e:	e7c6      	b.n	40942e <.LBB75>

004094a0 <.LBB77>:
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4094a0:	6860      	ldr	r0, [r4, #4]
  4094a2:	460a      	mov	r2, r1
  4094a4:	4906      	ldr	r1, [pc, #24]	; (4094c0 <.LBB77+0x20>)
  4094a6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4094aa:	6050      	str	r0, [r2, #4]
  4094ac:	e7db      	b.n	409466 <.LBB76+0x1a>
  4094ae:	bf00      	nop
  4094b0:	20417d7c 	.word	0x20417d7c
  4094b4:	20417d9c 	.word	0x20417d9c
  4094b8:	20417d64 	.word	0x20417d64
  4094bc:	20417d84 	.word	0x20417d84
  4094c0:	20417afc 	.word	0x20417afc

Disassembly of section .text.__d2b%92:

004094c4 <__d2b>:
  4094c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

004094c8 <.LCFI17>:
  4094c8:	ec57 6b10 	vmov	r6, r7, d0
  4094cc:	b083      	sub	sp, #12

004094ce <.LCFI18>:
  4094ce:	4688      	mov	r8, r1
  4094d0:	2101      	movs	r1, #1

004094d2 <.LVL324>:
  4094d2:	463c      	mov	r4, r7
  4094d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
  4094d8:	4617      	mov	r7, r2
  4094da:	f001 fcf5 	bl	40aec8 <.LFE2>

004094de <.LVL326>:
  4094de:	f3c4 0413 	ubfx	r4, r4, #0, #20
  4094e2:	4681      	mov	r9, r0

004094e4 <.LVL327>:
  4094e4:	b10d      	cbz	r5, 4094ea <.LVL327+0x6>
  4094e6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  4094ea:	9401      	str	r4, [sp, #4]
  4094ec:	b31e      	cbz	r6, 409536 <.LCFI20>
  4094ee:	a802      	add	r0, sp, #8

004094f0 <.LVL328>:
  4094f0:	f840 6d08 	str.w	r6, [r0, #-8]!
  4094f4:	f001 fb08 	bl	40ab08 <__lo0bits>

004094f8 <.LVL329>:
  4094f8:	2800      	cmp	r0, #0
  4094fa:	d134      	bne.n	409566 <.LCFI22>
  4094fc:	e89d 000c 	ldmia.w	sp, {r2, r3}
  409500:	f8c9 2014 	str.w	r2, [r9, #20]
  409504:	2b00      	cmp	r3, #0
  409506:	bf0c      	ite	eq
  409508:	2101      	moveq	r1, #1
  40950a:	2102      	movne	r1, #2
  40950c:	f8c9 3018 	str.w	r3, [r9, #24]
  409510:	f8c9 1010 	str.w	r1, [r9, #16]

00409514 <.LVL330>:
  409514:	b9dd      	cbnz	r5, 40954e <.LVL338+0x4>
  409516:	eb09 0381 	add.w	r3, r9, r1, lsl #2
  40951a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432

0040951e <.LVL331>:
  40951e:	f8c8 0000 	str.w	r0, [r8]
  409522:	6918      	ldr	r0, [r3, #16]

00409524 <.LVL332>:
  409524:	f001 fe2c 	bl	40b180 <__hi0bits>

00409528 <.LVL333>:
  409528:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40952c:	6038      	str	r0, [r7, #0]
  40952e:	4648      	mov	r0, r9
  409530:	b003      	add	sp, #12

00409532 <.LCFI19>:
  409532:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00409536 <.LCFI20>:
  409536:	a801      	add	r0, sp, #4

00409538 <.LVL335>:
  409538:	f001 fae6 	bl	40ab08 <__lo0bits>

0040953c <.LVL336>:
  40953c:	9b01      	ldr	r3, [sp, #4]
  40953e:	f8c9 3014 	str.w	r3, [r9, #20]
  409542:	2101      	movs	r1, #1
  409544:	3020      	adds	r0, #32

00409546 <.LVL337>:
  409546:	f8c9 1010 	str.w	r1, [r9, #16]

0040954a <.LVL338>:
  40954a:	2d00      	cmp	r5, #0
  40954c:	d0e3      	beq.n	409516 <.LVL330+0x2>
  40954e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433

00409552 <.LVL339>:
  409552:	4405      	add	r5, r0

00409554 <.LVL340>:
  409554:	f1c0 0035 	rsb	r0, r0, #53	; 0x35

00409558 <.LVL341>:
  409558:	f8c8 5000 	str.w	r5, [r8]
  40955c:	6038      	str	r0, [r7, #0]
  40955e:	4648      	mov	r0, r9
  409560:	b003      	add	sp, #12

00409562 <.LCFI21>:
  409562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00409566 <.LCFI22>:
  409566:	e89d 000a 	ldmia.w	sp, {r1, r3}
  40956a:	f1c0 0220 	rsb	r2, r0, #32
  40956e:	fa03 f202 	lsl.w	r2, r3, r2
  409572:	430a      	orrs	r2, r1
  409574:	40c3      	lsrs	r3, r0
  409576:	9301      	str	r3, [sp, #4]
  409578:	f8c9 2014 	str.w	r2, [r9, #20]
  40957c:	e7c2      	b.n	409504 <.LVL329+0xc>

0040957e <.LFE31>:
  40957e:	bf00      	nop

Disassembly of section .text.wc_InitSha512_ex%93:

00409580 <wc_InitSha512_ex>:
        if (sha512 == NULL)
  409580:	2800      	cmp	r0, #0
  409582:	d035      	beq.n	4095f0 <.LVL21>
    {
  409584:	b430      	push	{r4, r5}

00409586 <.LCFI4>:
  409586:	4603      	mov	r3, r0
        sha512->heap = heap;
  409588:	f8c0 10d8 	str.w	r1, [r0, #216]	; 0xd8

0040958c <.LBB679>:
    sha512->digest[0] = W64LIT(0x6a09e667f3bcc908);
  40958c:	a11a      	add	r1, pc, #104	; (adr r1, 4095f8 <.LVL22+0x4>)
  40958e:	e9d1 0100 	ldrd	r0, r1, [r1]

00409592 <.LVL19>:
  409592:	e9c3 0106 	strd	r0, r1, [r3, #24]
    sha512->digest[1] = W64LIT(0xbb67ae8584caa73b);
  409596:	a11a      	add	r1, pc, #104	; (adr r1, 409600 <.LVL22+0xc>)
  409598:	e9d1 0100 	ldrd	r0, r1, [r1]
  40959c:	e9c3 0108 	strd	r0, r1, [r3, #32]
    sha512->digest[2] = W64LIT(0x3c6ef372fe94f82b);
  4095a0:	a119      	add	r1, pc, #100	; (adr r1, 409608 <.LVL22+0x14>)
  4095a2:	e9d1 0100 	ldrd	r0, r1, [r1]
  4095a6:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
    sha512->digest[3] = W64LIT(0xa54ff53a5f1d36f1);
  4095aa:	a119      	add	r1, pc, #100	; (adr r1, 409610 <.LVL22+0x1c>)
  4095ac:	e9d1 0100 	ldrd	r0, r1, [r1]
  4095b0:	e9c3 010c 	strd	r0, r1, [r3, #48]	; 0x30
    sha512->digest[4] = W64LIT(0x510e527fade682d1);
  4095b4:	a118      	add	r1, pc, #96	; (adr r1, 409618 <.LVL22+0x24>)
  4095b6:	e9d1 0100 	ldrd	r0, r1, [r1]
  4095ba:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
    sha512->digest[5] = W64LIT(0x9b05688c2b3e6c1f);
  4095be:	a118      	add	r1, pc, #96	; (adr r1, 409620 <.LVL22+0x2c>)
  4095c0:	e9d1 0100 	ldrd	r0, r1, [r1]
  4095c4:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
    sha512->digest[6] = W64LIT(0x1f83d9abfb41bd6b);
  4095c8:	a117      	add	r1, pc, #92	; (adr r1, 409628 <.LVL22+0x34>)
  4095ca:	e9d1 0100 	ldrd	r0, r1, [r1]
  4095ce:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
    sha512->digest[7] = W64LIT(0x5be0cd19137e2179);
  4095d2:	a117      	add	r1, pc, #92	; (adr r1, 409630 <.LVL22+0x3c>)
  4095d4:	e9d1 0100 	ldrd	r0, r1, [r1]
  4095d8:	e9c3 0114 	strd	r0, r1, [r3, #80]	; 0x50
    sha512->buffLen = 0;
  4095dc:	2000      	movs	r0, #0
  4095de:	6018      	str	r0, [r3, #0]
    sha512->loLen   = 0;
  4095e0:	2400      	movs	r4, #0
  4095e2:	2500      	movs	r5, #0
  4095e4:	e9c3 4502 	strd	r4, r5, [r3, #8]
    sha512->hiLen   = 0;
  4095e8:	e9c3 4504 	strd	r4, r5, [r3, #16]

004095ec <.LBE679>:
    }
  4095ec:	bc30      	pop	{r4, r5}

004095ee <.LCFI5>:
  4095ee:	4770      	bx	lr

004095f0 <.LVL21>:
            return BAD_FUNC_ARG;
  4095f0:	f06f 00ac 	mvn.w	r0, #172	; 0xac

004095f4 <.LVL22>:
  4095f4:	4770      	bx	lr
  4095f6:	bf00      	nop
  4095f8:	f3bcc908 	.word	0xf3bcc908
  4095fc:	6a09e667 	.word	0x6a09e667
  409600:	84caa73b 	.word	0x84caa73b
  409604:	bb67ae85 	.word	0xbb67ae85
  409608:	fe94f82b 	.word	0xfe94f82b
  40960c:	3c6ef372 	.word	0x3c6ef372
  409610:	5f1d36f1 	.word	0x5f1d36f1
  409614:	a54ff53a 	.word	0xa54ff53a
  409618:	ade682d1 	.word	0xade682d1
  40961c:	510e527f 	.word	0x510e527f
  409620:	2b3e6c1f 	.word	0x2b3e6c1f
  409624:	9b05688c 	.word	0x9b05688c
  409628:	fb41bd6b 	.word	0xfb41bd6b
  40962c:	1f83d9ab 	.word	0x1f83d9ab
  409630:	137e2179 	.word	0x137e2179
  409634:	5be0cd19 	.word	0x5be0cd19

Disassembly of section .text.wc_InitSha384_ex%94:

00409638 <wc_InitSha384_ex>:
#else
int wc_InitSha384_ex(Sha384* sha384, void* heap, int devId)
{
    int ret;

    if (sha384 == NULL) {
  409638:	2800      	cmp	r0, #0
  40963a:	d035      	beq.n	4096a8 <.LVL142>
{
  40963c:	b430      	push	{r4, r5}

0040963e <.LCFI19>:
  40963e:	4603      	mov	r3, r0
        return BAD_FUNC_ARG;
    }

    sha384->heap = heap;
  409640:	f8c0 10d8 	str.w	r1, [r0, #216]	; 0xd8

00409644 <.LBB925>:
    sha384->digest[0] = W64LIT(0xcbbb9d5dc1059ed8);
  409644:	a11a      	add	r1, pc, #104	; (adr r1, 4096b0 <.LVL143+0x4>)
  409646:	e9d1 0100 	ldrd	r0, r1, [r1]

0040964a <.LVL140>:
  40964a:	e9c3 0106 	strd	r0, r1, [r3, #24]
    sha384->digest[1] = W64LIT(0x629a292a367cd507);
  40964e:	a11a      	add	r1, pc, #104	; (adr r1, 4096b8 <.LVL143+0xc>)
  409650:	e9d1 0100 	ldrd	r0, r1, [r1]
  409654:	e9c3 0108 	strd	r0, r1, [r3, #32]
    sha384->digest[2] = W64LIT(0x9159015a3070dd17);
  409658:	a119      	add	r1, pc, #100	; (adr r1, 4096c0 <.LVL143+0x14>)
  40965a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40965e:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
    sha384->digest[3] = W64LIT(0x152fecd8f70e5939);
  409662:	a119      	add	r1, pc, #100	; (adr r1, 4096c8 <.LVL143+0x1c>)
  409664:	e9d1 0100 	ldrd	r0, r1, [r1]
  409668:	e9c3 010c 	strd	r0, r1, [r3, #48]	; 0x30
    sha384->digest[4] = W64LIT(0x67332667ffc00b31);
  40966c:	a118      	add	r1, pc, #96	; (adr r1, 4096d0 <.LVL143+0x24>)
  40966e:	e9d1 0100 	ldrd	r0, r1, [r1]
  409672:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
    sha384->digest[5] = W64LIT(0x8eb44a8768581511);
  409676:	a118      	add	r1, pc, #96	; (adr r1, 4096d8 <.LVL143+0x2c>)
  409678:	e9d1 0100 	ldrd	r0, r1, [r1]
  40967c:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
    sha384->digest[6] = W64LIT(0xdb0c2e0d64f98fa7);
  409680:	a117      	add	r1, pc, #92	; (adr r1, 4096e0 <.LVL143+0x34>)
  409682:	e9d1 0100 	ldrd	r0, r1, [r1]
  409686:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
    sha384->digest[7] = W64LIT(0x47b5481dbefa4fa4);
  40968a:	a117      	add	r1, pc, #92	; (adr r1, 4096e8 <.LVL143+0x3c>)
  40968c:	e9d1 0100 	ldrd	r0, r1, [r1]
  409690:	e9c3 0114 	strd	r0, r1, [r3, #80]	; 0x50
    sha384->buffLen = 0;
  409694:	2000      	movs	r0, #0
  409696:	6018      	str	r0, [r3, #0]
    sha384->loLen   = 0;
  409698:	2400      	movs	r4, #0
  40969a:	2500      	movs	r5, #0
  40969c:	e9c3 4502 	strd	r4, r5, [r3, #8]
    sha384->hiLen   = 0;
  4096a0:	e9c3 4504 	strd	r4, r5, [r3, #16]

004096a4 <.LBE925>:
#else
    (void)devId;
#endif /* WOLFSSL_ASYNC_CRYPT */

    return ret;
}
  4096a4:	bc30      	pop	{r4, r5}

004096a6 <.LCFI20>:
  4096a6:	4770      	bx	lr

004096a8 <.LVL142>:
        return BAD_FUNC_ARG;
  4096a8:	f06f 00ac 	mvn.w	r0, #172	; 0xac

004096ac <.LVL143>:
  4096ac:	4770      	bx	lr
  4096ae:	bf00      	nop
  4096b0:	c1059ed8 	.word	0xc1059ed8
  4096b4:	cbbb9d5d 	.word	0xcbbb9d5d
  4096b8:	367cd507 	.word	0x367cd507
  4096bc:	629a292a 	.word	0x629a292a
  4096c0:	3070dd17 	.word	0x3070dd17
  4096c4:	9159015a 	.word	0x9159015a
  4096c8:	f70e5939 	.word	0xf70e5939
  4096cc:	152fecd8 	.word	0x152fecd8
  4096d0:	ffc00b31 	.word	0xffc00b31
  4096d4:	67332667 	.word	0x67332667
  4096d8:	68581511 	.word	0x68581511
  4096dc:	8eb44a87 	.word	0x8eb44a87
  4096e0:	64f98fa7 	.word	0x64f98fa7
  4096e4:	db0c2e0d 	.word	0xdb0c2e0d
  4096e8:	befa4fa4 	.word	0xbefa4fa4
  4096ec:	47b5481d 	.word	0x47b5481d

Disassembly of section .text.SYS_TIME_Initialize%95:

004096f0 <SYS_TIME_Initialize>:
// Section: System Interface Functions
// *****************************************************************************
// *****************************************************************************
SYS_MODULE_OBJ SYS_TIME_Initialize( const SYS_MODULE_INDEX index, const SYS_MODULE_INIT * const init )
{
    if(init == 0 || index != SYS_TIME_INDEX_0)
  4096f0:	2900      	cmp	r1, #0
  4096f2:	d047      	beq.n	409784 <.LCFI13>
{
  4096f4:	b538      	push	{r3, r4, r5, lr}

004096f6 <.LCFI12>:
  4096f6:	460c      	mov	r4, r1
    if(init == 0 || index != SYS_TIME_INDEX_0)
  4096f8:	b110      	cbz	r0, 409700 <.LVL124>
    {
        return SYS_MODULE_OBJ_INVALID;
  4096fa:	f04f 30ff 	mov.w	r0, #4294967295

004096fe <.LVL123>:
  4096fe:	bd38      	pop	{r3, r4, r5, pc}

00409700 <.LVL124>:
    }
    /* Create mutex to guard from multiple contesting threads */
    if(OSAL_MUTEX_Create(&gSystemCounterObj.timerMutex) != OSAL_RESULT_TRUE)
  409700:	4822      	ldr	r0, [pc, #136]	; (40978c <.LVL138+0x4>)

00409702 <.LVL125>:
  409702:	f002 f973 	bl	40b9ec <.LFE32>

00409706 <.LVL126>:
  409706:	2801      	cmp	r0, #1
  409708:	d002      	beq.n	409710 <.LBB20>
    {
        return SYS_MODULE_OBJ_INVALID;
  40970a:	f04f 30ff 	mov.w	r0, #4294967295
    memset(timers, 0, sizeof(timers));

    gSystemCounterObj.status = SYS_STATUS_READY;

    return (SYS_MODULE_OBJ)&gSystemCounterObj;
}
  40970e:	bd38      	pop	{r3, r4, r5, pc}

00409710 <.LBB20>:
    counterObj->timePlib = initData->timePlib;
  409710:	6823      	ldr	r3, [r4, #0]
  409712:	4d1f      	ldr	r5, [pc, #124]	; (409790 <.LVL138+0x8>)
  409714:	606b      	str	r3, [r5, #4]
    counterObj->hwTimerFrequency = counterObj->timePlib->timerFrequencyGet();
  409716:	689b      	ldr	r3, [r3, #8]
  409718:	4798      	blx	r3
  40971a:	60e8      	str	r0, [r5, #12]

0040971c <.LVL129>:
    cpuCyclesPerTimerClock=(SYS_TIME_CPU_CLOCK_FREQUENCY/counterObj->hwTimerFrequency);
  40971c:	4a1d      	ldr	r2, [pc, #116]	; (409794 <.LVL138+0xc>)
  40971e:	fbb2 f2f0 	udiv	r2, r2, r0

00409722 <.LVL130>:
    counterObj->hwTimerCompareMargin=(COMPARE_UPDATE_EXECUTION_CYCLES/cpuCyclesPerTimerClock) +2;
  409722:	f44f 7361 	mov.w	r3, #900	; 0x384
  409726:	fb93 f3f2 	sdiv	r3, r3, r2
  40972a:	3302      	adds	r3, #2
  40972c:	622b      	str	r3, [r5, #32]
    counterObj->hwTimerIntNum = initData->hwTimerIntNum;
  40972e:	f994 3004 	ldrsb.w	r3, [r4, #4]
  409732:	722b      	strb	r3, [r5, #8]
    counterObj->hwTimerPreviousValue = 0;
  409734:	2100      	movs	r1, #0
  409736:	6129      	str	r1, [r5, #16]
    counterObj->hwTimerPeriodValue = SYS_TIME_HW_COUNTER_PERIOD;
  409738:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40973c:	61ab      	str	r3, [r5, #24]
    counterObj->hwTimerCompareValue = SYS_TIME_HW_COUNTER_HALF_PERIOD;
  40973e:	f647 73ff 	movw	r3, #32767	; 0x7fff
  409742:	61eb      	str	r3, [r5, #28]
    counterObj->swCounter64Low = 0;
  409744:	6269      	str	r1, [r5, #36]	; 0x24
    counterObj->swCounter64High = 0;
  409746:	62a9      	str	r1, [r5, #40]	; 0x28
    counterObj->tmrActive = NULL;
  409748:	6329      	str	r1, [r5, #48]	; 0x30
    counterObj->interruptNestingCount = 0;
  40974a:	f885 102c 	strb.w	r1, [r5, #44]	; 0x2c
    counterObj->timePlib->timerCallbackSet(SYS_TIME_PLIBCallback, 0);
  40974e:	686b      	ldr	r3, [r5, #4]
  409750:	681b      	ldr	r3, [r3, #0]
  409752:	4811      	ldr	r0, [pc, #68]	; (409798 <.LVL138+0x10>)
  409754:	4798      	blx	r3

00409756 <.LVL131>:
    if (counterObj->timePlib->timerPeriodSet != NULL)
  409756:	686b      	ldr	r3, [r5, #4]
  409758:	685b      	ldr	r3, [r3, #4]
  40975a:	b10b      	cbz	r3, 409760 <.LVL131+0xa>
        counterObj->timePlib->timerPeriodSet(counterObj->hwTimerPeriodValue);
  40975c:	69a8      	ldr	r0, [r5, #24]
  40975e:	4798      	blx	r3
    counterObj->timePlib->timerCompareSet(counterObj->hwTimerCompareValue);
  409760:	4c0b      	ldr	r4, [pc, #44]	; (409790 <.LVL138+0x8>)

00409762 <.LVL133>:
  409762:	6863      	ldr	r3, [r4, #4]
  409764:	68db      	ldr	r3, [r3, #12]
  409766:	69e0      	ldr	r0, [r4, #28]
  409768:	4798      	blx	r3
    counterObj->timePlib->timerStart();
  40976a:	6863      	ldr	r3, [r4, #4]
  40976c:	691b      	ldr	r3, [r3, #16]
  40976e:	4798      	blx	r3

00409770 <.LBE20>:
    memset(timers, 0, sizeof(timers));
  409770:	f44f 72a0 	mov.w	r2, #320	; 0x140
  409774:	2100      	movs	r1, #0
  409776:	4809      	ldr	r0, [pc, #36]	; (40979c <.LVL138+0x14>)
  409778:	f000 f9a8 	bl	409acc <.LFE157>

0040977c <.LVL136>:
    gSystemCounterObj.status = SYS_STATUS_READY;
  40977c:	2302      	movs	r3, #2
  40977e:	7023      	strb	r3, [r4, #0]
    return (SYS_MODULE_OBJ)&gSystemCounterObj;
  409780:	4620      	mov	r0, r4
  409782:	bd38      	pop	{r3, r4, r5, pc}

00409784 <.LCFI13>:
        return SYS_MODULE_OBJ_INVALID;
  409784:	f04f 30ff 	mov.w	r0, #4294967295

00409788 <.LVL138>:
}
  409788:	4770      	bx	lr
  40978a:	bf00      	nop
  40978c:	20417c34 	.word	0x20417c34
  409790:	20417c00 	.word	0x20417c00
  409794:	11e1a300 	.word	0x11e1a300
  409798:	0040901d 	.word	0x0040901d
  40979c:	204179bc 	.word	0x204179bc

Disassembly of section .text.__lshift%96:

004097a0 <__lshift>:
  4097a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

004097a4 <.LCFI11>:
  4097a4:	4691      	mov	r9, r2
  4097a6:	690a      	ldr	r2, [r1, #16]

004097a8 <.LVL184>:
  4097a8:	688b      	ldr	r3, [r1, #8]
  4097aa:	ea4f 1469 	mov.w	r4, r9, asr #5

004097ae <.LVL185>:
  4097ae:	eb04 0802 	add.w	r8, r4, r2
  4097b2:	f108 0501 	add.w	r5, r8, #1
  4097b6:	429d      	cmp	r5, r3
  4097b8:	460e      	mov	r6, r1
  4097ba:	4607      	mov	r7, r0
  4097bc:	6849      	ldr	r1, [r1, #4]

004097be <.LVL186>:
  4097be:	dd04      	ble.n	4097ca <.LVL188+0x2>
  4097c0:	005b      	lsls	r3, r3, #1

004097c2 <.LVL187>:
  4097c2:	429d      	cmp	r5, r3
  4097c4:	f101 0101 	add.w	r1, r1, #1

004097c8 <.LVL188>:
  4097c8:	dcfa      	bgt.n	4097c0 <.LVL186+0x2>
  4097ca:	4638      	mov	r0, r7

004097cc <.LVL189>:
  4097cc:	f001 fb7c 	bl	40aec8 <.LFE2>

004097d0 <.LVL190>:
  4097d0:	2c00      	cmp	r4, #0
  4097d2:	f100 0314 	add.w	r3, r0, #20

004097d6 <.LVL191>:
  4097d6:	dd06      	ble.n	4097e6 <.LVL193+0x4>
  4097d8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  4097dc:	2100      	movs	r1, #0

004097de <.LVL192>:
  4097de:	f843 1b04 	str.w	r1, [r3], #4

004097e2 <.LVL193>:
  4097e2:	429a      	cmp	r2, r3
  4097e4:	d1fb      	bne.n	4097de <.LVL192>
  4097e6:	6934      	ldr	r4, [r6, #16]

004097e8 <.LVL194>:
  4097e8:	f106 0114 	add.w	r1, r6, #20

004097ec <.LVL195>:
  4097ec:	f019 091f 	ands.w	r9, r9, #31

004097f0 <.LVL196>:
  4097f0:	eb01 0e84 	add.w	lr, r1, r4, lsl #2

004097f4 <.LVL197>:
  4097f4:	d01d      	beq.n	409832 <.LVL208>
  4097f6:	f1c9 0c20 	rsb	ip, r9, #32

004097fa <.LVL198>:
  4097fa:	2200      	movs	r2, #0

004097fc <.LVL199>:
  4097fc:	680c      	ldr	r4, [r1, #0]
  4097fe:	fa04 f409 	lsl.w	r4, r4, r9
  409802:	4314      	orrs	r4, r2
  409804:	f843 4b04 	str.w	r4, [r3], #4

00409808 <.LVL200>:
  409808:	f851 2b04 	ldr.w	r2, [r1], #4

0040980c <.LVL201>:
  40980c:	458e      	cmp	lr, r1
  40980e:	fa22 f20c 	lsr.w	r2, r2, ip

00409812 <.LVL202>:
  409812:	d8f3      	bhi.n	4097fc <.LVL199>
  409814:	601a      	str	r2, [r3, #0]
  409816:	b10a      	cbz	r2, 40981c <.LBB24>

00409818 <.LVL203>:
  409818:	f108 0502 	add.w	r5, r8, #2

0040981c <.LBB24>:
  40981c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40981e:	6872      	ldr	r2, [r6, #4]

00409820 <.LBE24>:
  409820:	3d01      	subs	r5, #1

00409822 <.LBB28>:
  409822:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]

00409826 <.LBE28>:
  409826:	6105      	str	r5, [r0, #16]

00409828 <.LBB29>:
  409828:	6031      	str	r1, [r6, #0]
  40982a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]

0040982e <.LBE29>:
  40982e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00409832 <.LVL208>:
  409832:	3b04      	subs	r3, #4

00409834 <.LVL209>:
  409834:	f851 2b04 	ldr.w	r2, [r1], #4

00409838 <.LVL210>:
  409838:	f843 2f04 	str.w	r2, [r3, #4]!
  40983c:	458e      	cmp	lr, r1
  40983e:	d8f9      	bhi.n	409834 <.LVL209>
  409840:	e7ec      	b.n	40981c <.LBB24>

00409842 <.LFE26>:
  409842:	bf00      	nop

Disassembly of section .text.__register_exitproc%97:

00409844 <__register_exitproc>:
  409844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

00409848 <.LCFI0>:
  409848:	4c25      	ldr	r4, [pc, #148]	; (4098e0 <.LVL14+0x2>)
  40984a:	6825      	ldr	r5, [r4, #0]
  40984c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148

00409850 <.LVL1>:
  409850:	4606      	mov	r6, r0
  409852:	4688      	mov	r8, r1
  409854:	4692      	mov	sl, r2
  409856:	4699      	mov	r9, r3
  409858:	b3c4      	cbz	r4, 4098cc <.LVL11>
  40985a:	6860      	ldr	r0, [r4, #4]

0040985c <.LVL2>:
  40985c:	281f      	cmp	r0, #31
  40985e:	dc17      	bgt.n	409890 <.LVL6>
  409860:	1c43      	adds	r3, r0, #1

00409862 <.LVL3>:
  409862:	b176      	cbz	r6, 409882 <.LVL5>

00409864 <.LVL4>:
  409864:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  409868:	2201      	movs	r2, #1
  40986a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40986e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  409872:	4082      	lsls	r2, r0
  409874:	4311      	orrs	r1, r2
  409876:	2e02      	cmp	r6, #2
  409878:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  40987c:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  409880:	d01e      	beq.n	4098c0 <.LVL10>

00409882 <.LVL5>:
  409882:	3002      	adds	r0, #2
  409884:	6063      	str	r3, [r4, #4]
  409886:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40988a:	2000      	movs	r0, #0
  40988c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00409890 <.LVL6>:
  409890:	4b14      	ldr	r3, [pc, #80]	; (4098e4 <.LVL14+0x6>)

00409892 <.LVL7>:
  409892:	b303      	cbz	r3, 4098d6 <.LVL13>
  409894:	f44f 70c8 	mov.w	r0, #400	; 0x190
  409898:	f002 fa56 	bl	40bd48 <.LFE151>

0040989c <.LVL8>:
  40989c:	4604      	mov	r4, r0
  40989e:	b1d0      	cbz	r0, 4098d6 <.LVL13>
  4098a0:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4098a4:	2700      	movs	r7, #0
  4098a6:	e880 0088 	stmia.w	r0, {r3, r7}
  4098aa:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4098ae:	4638      	mov	r0, r7

004098b0 <.LVL9>:
  4098b0:	2301      	movs	r3, #1
  4098b2:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4098b6:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  4098ba:	2e00      	cmp	r6, #0
  4098bc:	d0e1      	beq.n	409882 <.LVL5>
  4098be:	e7d1      	b.n	409864 <.LVL4>

004098c0 <.LVL10>:
  4098c0:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  4098c4:	430a      	orrs	r2, r1
  4098c6:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4098ca:	e7da      	b.n	409882 <.LVL5>

004098cc <.LVL11>:
  4098cc:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4098d0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4098d4:	e7c1      	b.n	40985a <.LVL1+0xa>

004098d6 <.LVL13>:
  4098d6:	f04f 30ff 	mov.w	r0, #4294967295
  4098da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004098de <.LVL14>:
  4098de:	bf00      	nop
  4098e0:	0040be68 	.word	0x0040be68
  4098e4:	0040bd49 	.word	0x0040bd49

Disassembly of section .text%98:

004098f0 <memchr>:
  4098f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4098f4:	2a10      	cmp	r2, #16
  4098f6:	db2b      	blt.n	409950 <memchr+0x60>
  4098f8:	f010 0f07 	tst.w	r0, #7
  4098fc:	d008      	beq.n	409910 <memchr+0x20>
  4098fe:	f810 3b01 	ldrb.w	r3, [r0], #1
  409902:	3a01      	subs	r2, #1
  409904:	428b      	cmp	r3, r1
  409906:	d02d      	beq.n	409964 <memchr+0x74>
  409908:	f010 0f07 	tst.w	r0, #7
  40990c:	b342      	cbz	r2, 409960 <memchr+0x70>
  40990e:	d1f6      	bne.n	4098fe <memchr+0xe>
  409910:	b4f0      	push	{r4, r5, r6, r7}
  409912:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  409916:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40991a:	f022 0407 	bic.w	r4, r2, #7
  40991e:	f07f 0700 	mvns.w	r7, #0
  409922:	2300      	movs	r3, #0
  409924:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  409928:	3c08      	subs	r4, #8
  40992a:	ea85 0501 	eor.w	r5, r5, r1
  40992e:	ea86 0601 	eor.w	r6, r6, r1
  409932:	fa85 f547 	uadd8	r5, r5, r7
  409936:	faa3 f587 	sel	r5, r3, r7
  40993a:	fa86 f647 	uadd8	r6, r6, r7
  40993e:	faa5 f687 	sel	r6, r5, r7
  409942:	b98e      	cbnz	r6, 409968 <memchr+0x78>
  409944:	d1ee      	bne.n	409924 <memchr+0x34>
  409946:	bcf0      	pop	{r4, r5, r6, r7}
  409948:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40994c:	f002 0207 	and.w	r2, r2, #7
  409950:	b132      	cbz	r2, 409960 <memchr+0x70>
  409952:	f810 3b01 	ldrb.w	r3, [r0], #1
  409956:	3a01      	subs	r2, #1
  409958:	ea83 0301 	eor.w	r3, r3, r1
  40995c:	b113      	cbz	r3, 409964 <memchr+0x74>
  40995e:	d1f8      	bne.n	409952 <memchr+0x62>
  409960:	2000      	movs	r0, #0
  409962:	4770      	bx	lr
  409964:	3801      	subs	r0, #1
  409966:	4770      	bx	lr
  409968:	2d00      	cmp	r5, #0
  40996a:	bf06      	itte	eq
  40996c:	4635      	moveq	r5, r6
  40996e:	3803      	subeq	r0, #3
  409970:	3807      	subne	r0, #7
  409972:	f015 0f01 	tst.w	r5, #1
  409976:	d107      	bne.n	409988 <memchr+0x98>
  409978:	3001      	adds	r0, #1
  40997a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40997e:	bf02      	ittt	eq
  409980:	3001      	addeq	r0, #1
  409982:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  409986:	3001      	addeq	r0, #1
  409988:	bcf0      	pop	{r4, r5, r6, r7}
  40998a:	3801      	subs	r0, #1
  40998c:	4770      	bx	lr

0040998e <L0>:
  40998e:	bf00      	nop

Disassembly of section .text.__pow5mult%99:

00409990 <__pow5mult>:
  409990:	f012 0303 	ands.w	r3, r2, #3
  409994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

00409998 <.LCFI10>:
  409998:	4614      	mov	r4, r2

0040999a <.LVL152>:
  40999a:	4607      	mov	r7, r0
  40999c:	d12e      	bne.n	4099fc <.LVL173>
  40999e:	460d      	mov	r5, r1

004099a0 <.LVL153>:
  4099a0:	10a4      	asrs	r4, r4, #2

004099a2 <.LVL154>:
  4099a2:	d01c      	beq.n	4099de <.LVL165>
  4099a4:	6cbe      	ldr	r6, [r7, #72]	; 0x48

004099a6 <.LVL155>:
  4099a6:	b396      	cbz	r6, 409a0e <.LBB20>
  4099a8:	07e3      	lsls	r3, r4, #31
  4099aa:	f04f 0800 	mov.w	r8, #0
  4099ae:	d406      	bmi.n	4099be <.LVL161>

004099b0 <.LVL156>:
  4099b0:	1064      	asrs	r4, r4, #1

004099b2 <.LVL157>:
  4099b2:	d014      	beq.n	4099de <.LVL165>

004099b4 <.LVL158>:
  4099b4:	6830      	ldr	r0, [r6, #0]

004099b6 <.LVL159>:
  4099b6:	b1a8      	cbz	r0, 4099e4 <.LVL166>
  4099b8:	4606      	mov	r6, r0

004099ba <.LVL160>:
  4099ba:	07e3      	lsls	r3, r4, #31
  4099bc:	d5f8      	bpl.n	4099b0 <.LVL156>

004099be <.LVL161>:
  4099be:	4632      	mov	r2, r6
  4099c0:	4629      	mov	r1, r5
  4099c2:	4638      	mov	r0, r7
  4099c4:	f7fe fd40 	bl	408448 <.LBE11>

004099c8 <.LBB16>:
  4099c8:	b1b5      	cbz	r5, 4099f8 <.LVL171>
  4099ca:	686a      	ldr	r2, [r5, #4]
  4099cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c

004099ce <.LBE16>:
  4099ce:	1064      	asrs	r4, r4, #1

004099d0 <.LBB19>:
  4099d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4099d4:	6029      	str	r1, [r5, #0]
  4099d6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]

004099da <.LBE19>:
  4099da:	4605      	mov	r5, r0

004099dc <.LVL164>:
  4099dc:	d1ea      	bne.n	4099b4 <.LVL158>

004099de <.LVL165>:
  4099de:	4628      	mov	r0, r5
  4099e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004099e4 <.LVL166>:
  4099e4:	4632      	mov	r2, r6
  4099e6:	4631      	mov	r1, r6
  4099e8:	4638      	mov	r0, r7

004099ea <.LVL167>:
  4099ea:	f7fe fd2d 	bl	408448 <.LBE11>

004099ee <.LVL168>:
  4099ee:	6030      	str	r0, [r6, #0]

004099f0 <.LVL169>:
  4099f0:	f8c0 8000 	str.w	r8, [r0]
  4099f4:	4606      	mov	r6, r0

004099f6 <.LVL170>:
  4099f6:	e7e0      	b.n	4099ba <.LVL160>

004099f8 <.LVL171>:
  4099f8:	4605      	mov	r5, r0

004099fa <.LVL172>:
  4099fa:	e7d9      	b.n	4099b0 <.LVL156>

004099fc <.LVL173>:
  4099fc:	1e5a      	subs	r2, r3, #1

004099fe <.LVL174>:
  4099fe:	4d0b      	ldr	r5, [pc, #44]	; (409a2c <.LVL182+0x6>)
  409a00:	2300      	movs	r3, #0

00409a02 <.LVL175>:
  409a02:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]

00409a06 <.LVL176>:
  409a06:	f000 fbf5 	bl	40a1f4 <__multadd>

00409a0a <.LVL177>:
  409a0a:	4605      	mov	r5, r0

00409a0c <.LVL178>:
  409a0c:	e7c8      	b.n	4099a0 <.LVL153>

00409a0e <.LBB20>:
  409a0e:	2101      	movs	r1, #1
  409a10:	4638      	mov	r0, r7
  409a12:	f001 fa59 	bl	40aec8 <.LFE2>

00409a16 <.LVL180>:
  409a16:	f240 2171 	movw	r1, #625	; 0x271
  409a1a:	2201      	movs	r2, #1

00409a1c <.LBE20>:
  409a1c:	2300      	movs	r3, #0

00409a1e <.LBB23>:
  409a1e:	6141      	str	r1, [r0, #20]
  409a20:	6102      	str	r2, [r0, #16]
  409a22:	4606      	mov	r6, r0

00409a24 <.LBE23>:
  409a24:	64b8      	str	r0, [r7, #72]	; 0x48

00409a26 <.LVL182>:
  409a26:	6003      	str	r3, [r0, #0]
  409a28:	e7be      	b.n	4099a8 <.LVL155+0x2>
  409a2a:	bf00      	nop
  409a2c:	0040be4c 	.word	0x0040be4c

Disassembly of section .text.wc_Sha256Final%100:

00409a30 <wc_Sha256Final>:
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};


int wc_Sha256Final(Sha256* sha256, byte* hash)
{
  409a30:	b570      	push	{r4, r5, r6, lr}

00409a32 <.LCFI5>:
  409a32:	b082      	sub	sp, #8

00409a34 <.LCFI6>:
  409a34:	4605      	mov	r5, r0
  409a36:	460c      	mov	r4, r1
    uint8_t  padn;
    uint8_t  msg_len[8];

    /* Get the number of bits */
    /* create the message bit length block */
    uint64_t total_bits = sha256->total_len << 3;
  409a38:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
  409a3c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
  409a40:	00db      	lsls	r3, r3, #3
  409a42:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  409a46:	00d1      	lsls	r1, r2, #3

00409a48 <.LVL43>:
    msg_len[0] = (uint8_t)(total_bits >> 56);
  409a48:	0e18      	lsrs	r0, r3, #24

00409a4a <.LVL44>:
  409a4a:	f88d 0000 	strb.w	r0, [sp]
    msg_len[1] = (uint8_t)(total_bits >> 48);
  409a4e:	0c18      	lsrs	r0, r3, #16
  409a50:	f88d 0001 	strb.w	r0, [sp, #1]
    msg_len[2] = (uint8_t)(total_bits >> 40);
  409a54:	0a18      	lsrs	r0, r3, #8
  409a56:	f88d 0002 	strb.w	r0, [sp, #2]
    msg_len[3] = (uint8_t)(total_bits >> 32);
  409a5a:	f88d 3003 	strb.w	r3, [sp, #3]
    msg_len[4] = (uint8_t)(total_bits >> 24);
  409a5e:	0e0b      	lsrs	r3, r1, #24

00409a60 <.LVL45>:
  409a60:	f88d 3004 	strb.w	r3, [sp, #4]
    msg_len[5] = (uint8_t)(total_bits >> 16);
  409a64:	0c0b      	lsrs	r3, r1, #16
  409a66:	f88d 3005 	strb.w	r3, [sp, #5]
    msg_len[6] = (uint8_t)(total_bits >>  8);
  409a6a:	0a0b      	lsrs	r3, r1, #8
  409a6c:	f88d 3006 	strb.w	r3, [sp, #6]
    msg_len[7] = (uint8_t)(total_bits);
  409a70:	f88d 1007 	strb.w	r1, [sp, #7]
    
    /* pad the last bits with bytes */
    last = sha256->total_len & 0x3F;
  409a74:	f002 023f 	and.w	r2, r2, #63	; 0x3f

00409a78 <.LVL46>:
    padn = (last < SHA256_PAD_SIZE) ? (SHA256_PAD_SIZE - last) : (120 - last);
  409a78:	2a37      	cmp	r2, #55	; 0x37
  409a7a:	bf94      	ite	ls
  409a7c:	f1c2 0238 	rsbls	r2, r2, #56	; 0x38

00409a80 <.LVL47>:
  409a80:	f1c2 0278 	rsbhi	r2, r2, #120	; 0x78
  409a84:	b2d2      	uxtb	r2, r2

00409a86 <.LVL48>:

    /* future note: Capella will have auto padding with MSGSIZE != 0 */
    wc_Sha256Update(sha256, sha_padding, padn);
  409a86:	4910      	ldr	r1, [pc, #64]	; (409ac8 <.LVL53+0x2>)
  409a88:	4628      	mov	r0, r5
  409a8a:	f000 fb32 	bl	40a0f2 <.LFE156>

00409a8e <.LVL50>:
    wc_Sha256Update(sha256, msg_len, 8);
  409a8e:	2208      	movs	r2, #8
  409a90:	4669      	mov	r1, sp
  409a92:	4628      	mov	r0, r5
  409a94:	f000 fb2d 	bl	40a0f2 <.LFE156>

00409a98 <.LVL51>:

    memcpy(hash, (void *)sha256->digest, SHA256_DIGEST_SIZE);
  409a98:	462b      	mov	r3, r5
  409a9a:	f853 6f80 	ldr.w	r6, [r3, #128]!
  409a9e:	6858      	ldr	r0, [r3, #4]
  409aa0:	6899      	ldr	r1, [r3, #8]
  409aa2:	68da      	ldr	r2, [r3, #12]
  409aa4:	6026      	str	r6, [r4, #0]
  409aa6:	6060      	str	r0, [r4, #4]
  409aa8:	60a1      	str	r1, [r4, #8]
  409aaa:	60e2      	str	r2, [r4, #12]
  409aac:	691e      	ldr	r6, [r3, #16]
  409aae:	6958      	ldr	r0, [r3, #20]
  409ab0:	6999      	ldr	r1, [r3, #24]
  409ab2:	69da      	ldr	r2, [r3, #28]
  409ab4:	6126      	str	r6, [r4, #16]
  409ab6:	6160      	str	r0, [r4, #20]
  409ab8:	61a1      	str	r1, [r4, #24]
  409aba:	61e2      	str	r2, [r4, #28]

    return wc_InitSha256(sha256);
  409abc:	4628      	mov	r0, r5
  409abe:	f000 f89d 	bl	409bfc <.LFE41>

00409ac2 <.LVL52>:
}
  409ac2:	b002      	add	sp, #8

00409ac4 <.LCFI7>:
  409ac4:	bd70      	pop	{r4, r5, r6, pc}

00409ac6 <.LVL53>:
  409ac6:	bf00      	nop
  409ac8:	0040a174 	.word	0x0040a174

Disassembly of section .text.memset%101:

00409acc <memset>:
  409acc:	b470      	push	{r4, r5, r6}

00409ace <.LCFI0>:
  409ace:	0786      	lsls	r6, r0, #30
  409ad0:	d046      	beq.n	409b60 <.LCFI2>
  409ad2:	1e54      	subs	r4, r2, #1

00409ad4 <.LVL1>:
  409ad4:	2a00      	cmp	r2, #0
  409ad6:	d041      	beq.n	409b5c <.LVL25>
  409ad8:	b2ca      	uxtb	r2, r1
  409ada:	4603      	mov	r3, r0
  409adc:	e002      	b.n	409ae4 <.LVL4>

00409ade <.LVL2>:
  409ade:	f114 34ff 	adds.w	r4, r4, #4294967295

00409ae2 <.LVL3>:
  409ae2:	d33b      	bcc.n	409b5c <.LVL25>

00409ae4 <.LVL4>:
  409ae4:	f803 2b01 	strb.w	r2, [r3], #1
  409ae8:	079d      	lsls	r5, r3, #30
  409aea:	d1f8      	bne.n	409ade <.LVL2>

00409aec <.LVL6>:
  409aec:	2c03      	cmp	r4, #3
  409aee:	d92e      	bls.n	409b4e <.LVL22>
  409af0:	b2cd      	uxtb	r5, r1

00409af2 <.LVL7>:
  409af2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8

00409af6 <.LVL8>:
  409af6:	2c0f      	cmp	r4, #15
  409af8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16

00409afc <.LVL9>:
  409afc:	d919      	bls.n	409b32 <.LVL17+0x2>
  409afe:	f103 0210 	add.w	r2, r3, #16
  409b02:	4626      	mov	r6, r4

00409b04 <.LVL10>:
  409b04:	3e10      	subs	r6, #16

00409b06 <.LVL11>:
  409b06:	2e0f      	cmp	r6, #15
  409b08:	f842 5c10 	str.w	r5, [r2, #-16]

00409b0c <.LVL12>:
  409b0c:	f842 5c0c 	str.w	r5, [r2, #-12]

00409b10 <.LVL13>:
  409b10:	f842 5c08 	str.w	r5, [r2, #-8]

00409b14 <.LVL14>:
  409b14:	f842 5c04 	str.w	r5, [r2, #-4]
  409b18:	f102 0210 	add.w	r2, r2, #16

00409b1c <.LVL15>:
  409b1c:	d8f2      	bhi.n	409b04 <.LVL10>
  409b1e:	f1a4 0210 	sub.w	r2, r4, #16

00409b22 <.LVL16>:
  409b22:	f022 020f 	bic.w	r2, r2, #15
  409b26:	f004 040f 	and.w	r4, r4, #15
  409b2a:	3210      	adds	r2, #16
  409b2c:	2c03      	cmp	r4, #3
  409b2e:	4413      	add	r3, r2

00409b30 <.LVL17>:
  409b30:	d90d      	bls.n	409b4e <.LVL22>
  409b32:	461e      	mov	r6, r3
  409b34:	4622      	mov	r2, r4

00409b36 <.LVL18>:
  409b36:	3a04      	subs	r2, #4

00409b38 <.LVL19>:
  409b38:	2a03      	cmp	r2, #3
  409b3a:	f846 5b04 	str.w	r5, [r6], #4

00409b3e <.LVL20>:
  409b3e:	d8fa      	bhi.n	409b36 <.LVL18>
  409b40:	1f22      	subs	r2, r4, #4

00409b42 <.LVL21>:
  409b42:	f022 0203 	bic.w	r2, r2, #3
  409b46:	3204      	adds	r2, #4
  409b48:	4413      	add	r3, r2
  409b4a:	f004 0403 	and.w	r4, r4, #3

00409b4e <.LVL22>:
  409b4e:	b12c      	cbz	r4, 409b5c <.LVL25>
  409b50:	b2c9      	uxtb	r1, r1

00409b52 <.LVL23>:
  409b52:	441c      	add	r4, r3
  409b54:	f803 1b01 	strb.w	r1, [r3], #1
  409b58:	429c      	cmp	r4, r3
  409b5a:	d1fb      	bne.n	409b54 <.LVL23+0x2>

00409b5c <.LVL25>:
  409b5c:	bc70      	pop	{r4, r5, r6}

00409b5e <.LCFI1>:
  409b5e:	4770      	bx	lr

00409b60 <.LCFI2>:
  409b60:	4614      	mov	r4, r2
  409b62:	4603      	mov	r3, r0
  409b64:	e7c2      	b.n	409aec <.LVL6>

00409b66 <.LFE17>:
  409b66:	bf00      	nop

Disassembly of section .text.xTaskPriorityInherit%102:

00409b68 <xTaskPriorityInherit>:
	BaseType_t xReturn = pdFALSE;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
  409b68:	2800      	cmp	r0, #0
  409b6a:	d03f      	beq.n	409bec <.LCFI29>
	{
  409b6c:	b538      	push	{r3, r4, r5, lr}

00409b6e <.LCFI28>:
  409b6e:	4605      	mov	r5, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
  409b70:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  409b72:	491f      	ldr	r1, [pc, #124]	; (409bf0 <.LVL291+0x2>)
  409b74:	6809      	ldr	r1, [r1, #0]
  409b76:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  409b78:	428a      	cmp	r2, r1
  409b7a:	d22e      	bcs.n	409bda <.LVL288>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  409b7c:	6981      	ldr	r1, [r0, #24]
  409b7e:	2900      	cmp	r1, #0
  409b80:	db05      	blt.n	409b8e <.LCFI28+0x20>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  409b82:	491b      	ldr	r1, [pc, #108]	; (409bf0 <.LVL291+0x2>)
  409b84:	6809      	ldr	r1, [r1, #0]
  409b86:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  409b88:	f1c1 0105 	rsb	r1, r1, #5
  409b8c:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
  409b8e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  409b92:	4918      	ldr	r1, [pc, #96]	; (409bf4 <.LVL291+0x6>)
  409b94:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  409b98:	6969      	ldr	r1, [r5, #20]
  409b9a:	4291      	cmp	r1, r2
  409b9c:	d005      	beq.n	409baa <.LVL284>
					prvAddTaskToReadyList( pxMutexHolderTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
  409b9e:	4a14      	ldr	r2, [pc, #80]	; (409bf0 <.LVL291+0x2>)
  409ba0:	6812      	ldr	r2, [r2, #0]
  409ba2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  409ba4:	62ea      	str	r2, [r5, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
  409ba6:	2001      	movs	r0, #1

00409ba8 <.LVL283>:
  409ba8:	bd38      	pop	{r3, r4, r5, pc}

00409baa <.LVL284>:
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  409baa:	1d2c      	adds	r4, r5, #4
  409bac:	4620      	mov	r0, r4

00409bae <.LVL285>:
  409bae:	f001 fd93 	bl	40b6d8 <.LFE1>

00409bb2 <.LVL286>:
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
  409bb2:	4b0f      	ldr	r3, [pc, #60]	; (409bf0 <.LVL291+0x2>)
  409bb4:	681b      	ldr	r3, [r3, #0]
  409bb6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  409bb8:	62e8      	str	r0, [r5, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
  409bba:	4b0f      	ldr	r3, [pc, #60]	; (409bf8 <.LVL291+0xa>)
  409bbc:	681b      	ldr	r3, [r3, #0]
  409bbe:	4298      	cmp	r0, r3
  409bc0:	d901      	bls.n	409bc6 <.LVL286+0x14>
  409bc2:	4b0d      	ldr	r3, [pc, #52]	; (409bf8 <.LVL291+0xa>)
  409bc4:	6018      	str	r0, [r3, #0]
  409bc6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  409bca:	4621      	mov	r1, r4
  409bcc:	4b09      	ldr	r3, [pc, #36]	; (409bf4 <.LVL291+0x6>)
  409bce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  409bd2:	f001 fef3 	bl	40b9bc <.LFE142>

00409bd6 <.LVL287>:
				xReturn = pdTRUE;
  409bd6:	2001      	movs	r0, #1
  409bd8:	bd38      	pop	{r3, r4, r5, pc}

00409bda <.LVL288>:
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
  409bda:	4a05      	ldr	r2, [pc, #20]	; (409bf0 <.LVL291+0x2>)
  409bdc:	6812      	ldr	r2, [r2, #0]
  409bde:	6c40      	ldr	r0, [r0, #68]	; 0x44

00409be0 <.LVL289>:
  409be0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  409be2:	4298      	cmp	r0, r3
  409be4:	bf2c      	ite	cs
  409be6:	2000      	movcs	r0, #0
  409be8:	2001      	movcc	r0, #1
  409bea:	bd38      	pop	{r3, r4, r5, pc}

00409bec <.LCFI29>:
	BaseType_t xReturn = pdFALSE;
  409bec:	2000      	movs	r0, #0

00409bee <.LVL291>:
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
  409bee:	4770      	bx	lr
  409bf0:	20417d64 	.word	0x20417d64
  409bf4:	20417afc 	.word	0x20417afc
  409bf8:	20417d84 	.word	0x20417d84

Disassembly of section .text.wc_InitSha256%103:

00409bfc <wc_InitSha256>:
{
  409bfc:	b430      	push	{r4, r5}

00409bfe <.LCFI2>:
  409bfe:	4603      	mov	r3, r0
    if ((PMC_REGS->PMC_PCSR1 & PmcBit) != PmcBit)
  409c00:	4a1b      	ldr	r2, [pc, #108]	; (409c70 <.LCFI3+0x4>)
  409c02:	f8d2 2108 	ldr.w	r2, [r2, #264]	; 0x108
  409c06:	f012 0f01 	tst.w	r2, #1
  409c0a:	d103      	bne.n	409c14 <.LCFI2+0x16>
        PMC_REGS->PMC_PCER1 = PmcBit;
  409c0c:	2101      	movs	r1, #1
  409c0e:	4a18      	ldr	r2, [pc, #96]	; (409c70 <.LCFI3+0x4>)
  409c10:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    sha256->icm_descriptor.cfg.reg = 0x0;
  409c14:	2000      	movs	r0, #0

00409c16 <.LVL20>:
  409c16:	6058      	str	r0, [r3, #4]
    sha256->icm_descriptor.cfg.bit.is_end_mon = 1;
  409c18:	2204      	movs	r2, #4
  409c1a:	711a      	strb	r2, [r3, #4]
    sha256->icm_descriptor.cfg.bit.algo = 1;
  409c1c:	f04f 0200 	mov.w	r2, #0
  409c20:	2101      	movs	r1, #1
  409c22:	f361 1206 	bfi	r2, r1, #4, #3
  409c26:	715a      	strb	r2, [r3, #5]
    sha256->digest[0] = 0x67E6096A;
  409c28:	4a12      	ldr	r2, [pc, #72]	; (409c74 <.LCFI3+0x8>)
  409c2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    sha256->digest[1] = 0x85AE67BB;
  409c2e:	f102 52ee 	add.w	r2, r2, #499122176	; 0x1dc00000
  409c32:	f502 2205 	add.w	r2, r2, #544768	; 0x85000
  409c36:	f602 6251 	addw	r2, r2, #3665	; 0xe51
  409c3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    sha256->digest[2] = 0x72F36E3C;
  409c3e:	4a0e      	ldr	r2, [pc, #56]	; (409c78 <.LCFI3+0xc>)
  409c40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    sha256->digest[3] = 0x3AF54FA5;
  409c44:	4a0d      	ldr	r2, [pc, #52]	; (409c7c <.LCFI3+0x10>)
  409c46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    sha256->digest[4] = 0x7F520E51;
  409c4a:	4a0d      	ldr	r2, [pc, #52]	; (409c80 <.LCFI3+0x14>)
  409c4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    sha256->digest[5] = 0x8C68059B;
  409c50:	4a0c      	ldr	r2, [pc, #48]	; (409c84 <.LCFI3+0x18>)
  409c52:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    sha256->digest[6] = 0xABD9831F;
  409c56:	4a0c      	ldr	r2, [pc, #48]	; (409c88 <.LCFI3+0x1c>)
  409c58:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    sha256->digest[7] = 0x19CDE05B;
  409c5c:	4a0b      	ldr	r2, [pc, #44]	; (409c8c <.LCFI3+0x20>)
  409c5e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    sha256->total_len = 0;
  409c62:	2400      	movs	r4, #0
  409c64:	2500      	movs	r5, #0
  409c66:	e9c3 4528 	strd	r4, r5, [r3, #160]	; 0xa0
}
  409c6a:	bc30      	pop	{r4, r5}

00409c6c <.LCFI3>:
  409c6c:	4770      	bx	lr
  409c6e:	bf00      	nop
  409c70:	400e0600 	.word	0x400e0600
  409c74:	67e6096a 	.word	0x67e6096a
  409c78:	72f36e3c 	.word	0x72f36e3c
  409c7c:	3af54fa5 	.word	0x3af54fa5
  409c80:	7f520e51 	.word	0x7f520e51
  409c84:	8c68059b 	.word	0x8c68059b
  409c88:	abd9831f 	.word	0xabd9831f
  409c8c:	19cde05b 	.word	0x19cde05b

Disassembly of section .text.SYS_TIME_AddToList%104:

00409c90 <SYS_TIME_AddToList>:
    SYS_TIME_TIMER_OBJ* tmr = counter->tmrActive;
  409c90:	4b23      	ldr	r3, [pc, #140]	; (409d20 <.LVL66>)
  409c92:	6b1a      	ldr	r2, [r3, #48]	; 0x30

00409c94 <.LVL47>:
    if (newTimer == NULL)
  409c94:	2800      	cmp	r0, #0
  409c96:	d03f      	beq.n	409d18 <.LCFI6>
{
  409c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

00409c9c <.LCFI5>:
  409c9c:	4684      	mov	ip, r0
    newTimerTime = newTimer->relativeTimePending;
  409c9e:	f8d0 8008 	ldr.w	r8, [r0, #8]

00409ca2 <.LVL48>:
    if (tmr == NULL)
  409ca2:	b1b2      	cbz	r2, 409cd2 <.LVL53>
            if ((total_time + tmr->relativeTimePending) > newTimerTime)
  409ca4:	6894      	ldr	r4, [r2, #8]
  409ca6:	2500      	movs	r5, #0
  409ca8:	4646      	mov	r6, r8
  409caa:	2700      	movs	r7, #0
  409cac:	42af      	cmp	r7, r5
  409cae:	bf08      	it	eq
  409cb0:	45a0      	cmpeq	r8, r4
  409cb2:	d328      	bcc.n	409d06 <.LVL60>

00409cb4 <.LVL49>:
            tmr = tmr->tmrNext;
  409cb4:	6993      	ldr	r3, [r2, #24]

00409cb6 <.LVL50>:
        while (tmr != NULL)
  409cb6:	b18b      	cbz	r3, 409cdc <.LVL56>
            if ((total_time + tmr->relativeTimePending) > newTimerTime)
  409cb8:	6899      	ldr	r1, [r3, #8]
  409cba:	468e      	mov	lr, r1
  409cbc:	1860      	adds	r0, r4, r1
  409cbe:	f145 0100 	adc.w	r1, r5, #0
  409cc2:	428f      	cmp	r7, r1
  409cc4:	bf08      	it	eq
  409cc6:	4286      	cmpeq	r6, r0
  409cc8:	d31b      	bcc.n	409d02 <.LVL59>
  409cca:	4604      	mov	r4, r0

00409ccc <.LVL51>:
  409ccc:	460d      	mov	r5, r1
            tmr = tmr->tmrNext;
  409cce:	461a      	mov	r2, r3

00409cd0 <.LVL52>:
  409cd0:	e7f0      	b.n	409cb4 <.LVL49>

00409cd2 <.LVL53>:
        counter->tmrActive = newTimer;
  409cd2:	4b13      	ldr	r3, [pc, #76]	; (409d20 <.LVL66>)
  409cd4:	6318      	str	r0, [r3, #48]	; 0x30

00409cd6 <.LVL54>:
        isHeadTimerUpdated = true;
  409cd6:	2001      	movs	r0, #1

00409cd8 <.LVL55>:
  409cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00409cdc <.LVL56>:
            tmr = tmr->tmrNext;
  409cdc:	4619      	mov	r1, r3

00409cde <.LVL57>:
        if (prevTmr == NULL)
  409cde:	b1a2      	cbz	r2, 409d0a <.LVL61>
            newTimer->tmrNext = prevTmr->tmrNext;
  409ce0:	f8cc 3018 	str.w	r3, [ip, #24]
            prevTmr->tmrNext = newTimer;
  409ce4:	f8c2 c018 	str.w	ip, [r2, #24]
    bool isHeadTimerUpdated = false;
  409ce8:	2000      	movs	r0, #0

00409cea <.LVL58>:
        newTimer->relativeTimePending = newTimerTime - total_time;
  409cea:	eba8 0404 	sub.w	r4, r8, r4
  409cee:	f8cc 4008 	str.w	r4, [ip, #8]
        if (newTimer->tmrNext != NULL)
  409cf2:	f8dc 3018 	ldr.w	r3, [ip, #24]
  409cf6:	b18b      	cbz	r3, 409d1c <.LCFI7>
            newTimer->tmrNext->relativeTimePending -= newTimer->relativeTimePending;
  409cf8:	689a      	ldr	r2, [r3, #8]
  409cfa:	1b14      	subs	r4, r2, r4
  409cfc:	609c      	str	r4, [r3, #8]
  409cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00409d02 <.LVL59>:
            tmr = tmr->tmrNext;
  409d02:	4619      	mov	r1, r3
  409d04:	e7eb      	b.n	409cde <.LVL57>

00409d06 <.LVL60>:
            if ((total_time + tmr->relativeTimePending) > newTimerTime)
  409d06:	4611      	mov	r1, r2
  409d08:	2400      	movs	r4, #0

00409d0a <.LVL61>:
            counter->tmrActive = newTimer;
  409d0a:	4b05      	ldr	r3, [pc, #20]	; (409d20 <.LVL66>)
  409d0c:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
            newTimer->tmrNext = tmr;
  409d10:	f8cc 1018 	str.w	r1, [ip, #24]

00409d14 <.LVL62>:
            isHeadTimerUpdated = true;
  409d14:	2001      	movs	r0, #1
  409d16:	e7e8      	b.n	409cea <.LVL58>

00409d18 <.LCFI6>:
        return isHeadTimerUpdated;
  409d18:	2000      	movs	r0, #0

00409d1a <.LVL64>:
  409d1a:	4770      	bx	lr

00409d1c <.LCFI7>:
}
  409d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00409d20 <.LVL66>:
  409d20:	20417c00 	.word	0x20417c00

Disassembly of section .text.__pic32c_data_initialization%105:

00409d24 <__pic32c_data_initialization>:
  409d24:	4921      	ldr	r1, [pc, #132]	; (409dac <.LFE154+0x88>)
  409d26:	680b      	ldr	r3, [r1, #0]
  409d28:	b430      	push	{r4, r5}
  409d2a:	b113      	cbz	r3, 409d32 <__pic32c_data_initialization+0xe>
  409d2c:	4b20      	ldr	r3, [pc, #128]	; (409db0 <.LFE154+0x8c>)
  409d2e:	681a      	ldr	r2, [r3, #0]
  409d30:	bb72      	cbnz	r2, 409d90 <__pic32c_data_initialization+0x6c>
  409d32:	4820      	ldr	r0, [pc, #128]	; (409db4 <.LFE154+0x90>)
  409d34:	2500      	movs	r5, #0
  409d36:	6801      	ldr	r1, [r0, #0]
  409d38:	b9c1      	cbnz	r1, 409d6c <__pic32c_data_initialization+0x48>
  409d3a:	6842      	ldr	r2, [r0, #4]
  409d3c:	b332      	cbz	r2, 409d8c <__pic32c_data_initialization+0x68>
  409d3e:	6883      	ldr	r3, [r0, #8]
  409d40:	300c      	adds	r0, #12
  409d42:	b1d3      	cbz	r3, 409d7a <__pic32c_data_initialization+0x56>
  409d44:	3901      	subs	r1, #1
  409d46:	4603      	mov	r3, r0
  409d48:	f813 4b01 	ldrb.w	r4, [r3], #1
  409d4c:	f801 4f01 	strb.w	r4, [r1, #1]!
  409d50:	1a1c      	subs	r4, r3, r0
  409d52:	4294      	cmp	r4, r2
  409d54:	d3f8      	bcc.n	409d48 <__pic32c_data_initialization+0x24>
  409d56:	f012 0303 	ands.w	r3, r2, #3
  409d5a:	bf18      	it	ne
  409d5c:	2301      	movne	r3, #1
  409d5e:	eb03 0292 	add.w	r2, r3, r2, lsr #2
  409d62:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  409d66:	6801      	ldr	r1, [r0, #0]
  409d68:	2900      	cmp	r1, #0
  409d6a:	d0e6      	beq.n	409d3a <__pic32c_data_initialization+0x16>
  409d6c:	6884      	ldr	r4, [r0, #8]
  409d6e:	6842      	ldr	r2, [r0, #4]
  409d70:	460b      	mov	r3, r1
  409d72:	300c      	adds	r0, #12
  409d74:	b93c      	cbnz	r4, 409d86 <__pic32c_data_initialization+0x62>
  409d76:	2a00      	cmp	r2, #0
  409d78:	d0dd      	beq.n	409d36 <__pic32c_data_initialization+0x12>
  409d7a:	441a      	add	r2, r3
  409d7c:	f803 5b01 	strb.w	r5, [r3], #1
  409d80:	4293      	cmp	r3, r2
  409d82:	d1fb      	bne.n	409d7c <__pic32c_data_initialization+0x58>
  409d84:	e7d7      	b.n	409d36 <__pic32c_data_initialization+0x12>
  409d86:	2a00      	cmp	r2, #0
  409d88:	d1dc      	bne.n	409d44 <__pic32c_data_initialization+0x20>
  409d8a:	e7e4      	b.n	409d56 <__pic32c_data_initialization+0x32>
  409d8c:	bc30      	pop	{r4, r5}
  409d8e:	4770      	bx	lr
  409d90:	428b      	cmp	r3, r1
  409d92:	d2ce      	bcs.n	409d32 <__pic32c_data_initialization+0xe>
  409d94:	43da      	mvns	r2, r3
  409d96:	440a      	add	r2, r1
  409d98:	f022 0203 	bic.w	r2, r2, #3
  409d9c:	3204      	adds	r2, #4
  409d9e:	441a      	add	r2, r3
  409da0:	2100      	movs	r1, #0
  409da2:	f843 1b04 	str.w	r1, [r3], #4
  409da6:	4293      	cmp	r3, r2
  409da8:	d1fb      	bne.n	409da2 <__pic32c_data_initialization+0x7e>
  409daa:	e7c2      	b.n	409d32 <__pic32c_data_initialization+0xe>
  409dac:	20400488 	.word	0x20400488
  409db0:	20400000 	.word	0x20400000
  409db4:	004041d8 	.word	0x004041d8

Disassembly of section .text._malloc_trim_r%106:

00409db8 <_malloc_trim_r>:
  409db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

00409dba <.LCFI0>:
  409dba:	4f21      	ldr	r7, [pc, #132]	; (409e40 <.LVL22+0x6>)
  409dbc:	460c      	mov	r4, r1
  409dbe:	4606      	mov	r6, r0
  409dc0:	f002 f854 	bl	40be6c <__malloc_lock>

00409dc4 <.LVL1>:
  409dc4:	68bb      	ldr	r3, [r7, #8]
  409dc6:	685d      	ldr	r5, [r3, #4]
  409dc8:	f1c4 046f 	rsb	r4, r4, #111	; 0x6f

00409dcc <.LVL2>:
  409dcc:	f025 0503 	bic.w	r5, r5, #3

00409dd0 <.LVL3>:
  409dd0:	442c      	add	r4, r5
  409dd2:	f024 047f 	bic.w	r4, r4, #127	; 0x7f
  409dd6:	3c80      	subs	r4, #128	; 0x80

00409dd8 <.LVL4>:
  409dd8:	2c7f      	cmp	r4, #127	; 0x7f
  409dda:	dd07      	ble.n	409dec <.LVL6>
  409ddc:	2100      	movs	r1, #0
  409dde:	4630      	mov	r0, r6
  409de0:	f001 fd3c 	bl	40b85c <_sbrk_r>

00409de4 <.LVL5>:
  409de4:	68bb      	ldr	r3, [r7, #8]
  409de6:	442b      	add	r3, r5
  409de8:	4298      	cmp	r0, r3
  409dea:	d004      	beq.n	409df6 <.LVL8>

00409dec <.LVL6>:
  409dec:	4630      	mov	r0, r6
  409dee:	f002 f83f 	bl	40be70 <__malloc_unlock>

00409df2 <.LVL7>:
  409df2:	2000      	movs	r0, #0
  409df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00409df6 <.LVL8>:
  409df6:	4261      	negs	r1, r4
  409df8:	4630      	mov	r0, r6

00409dfa <.LVL9>:
  409dfa:	f001 fd2f 	bl	40b85c <_sbrk_r>

00409dfe <.LVL10>:
  409dfe:	3001      	adds	r0, #1

00409e00 <.LVL11>:
  409e00:	d00d      	beq.n	409e1e <.LVL16>
  409e02:	4a10      	ldr	r2, [pc, #64]	; (409e44 <.LVL22+0xa>)
  409e04:	68b9      	ldr	r1, [r7, #8]
  409e06:	6813      	ldr	r3, [r2, #0]
  409e08:	1b2d      	subs	r5, r5, r4

00409e0a <.LVL12>:
  409e0a:	f045 0501 	orr.w	r5, r5, #1
  409e0e:	4630      	mov	r0, r6

00409e10 <.LVL13>:
  409e10:	1b1c      	subs	r4, r3, r4

00409e12 <.LVL14>:
  409e12:	604d      	str	r5, [r1, #4]
  409e14:	6014      	str	r4, [r2, #0]
  409e16:	f002 f82b 	bl	40be70 <__malloc_unlock>

00409e1a <.LVL15>:
  409e1a:	2001      	movs	r0, #1
  409e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00409e1e <.LVL16>:
  409e1e:	2100      	movs	r1, #0
  409e20:	4630      	mov	r0, r6

00409e22 <.LVL17>:
  409e22:	f001 fd1b 	bl	40b85c <_sbrk_r>

00409e26 <.LVL18>:
  409e26:	68ba      	ldr	r2, [r7, #8]
  409e28:	1a83      	subs	r3, r0, r2

00409e2a <.LVL19>:
  409e2a:	2b0f      	cmp	r3, #15
  409e2c:	ddde      	ble.n	409dec <.LVL6>
  409e2e:	4c06      	ldr	r4, [pc, #24]	; (409e48 <.LVL22+0xe>)

00409e30 <.LVL20>:
  409e30:	4904      	ldr	r1, [pc, #16]	; (409e44 <.LVL22+0xa>)
  409e32:	6824      	ldr	r4, [r4, #0]
  409e34:	f043 0301 	orr.w	r3, r3, #1

00409e38 <.LVL21>:
  409e38:	1b00      	subs	r0, r0, r4

00409e3a <.LVL22>:
  409e3a:	6053      	str	r3, [r2, #4]
  409e3c:	6008      	str	r0, [r1, #0]
  409e3e:	e7d5      	b.n	409dec <.LVL6>
  409e40:	204170b0 	.word	0x204170b0
  409e44:	20417c38 	.word	0x20417c38
  409e48:	20417dc0 	.word	0x20417dc0

Disassembly of section .text.wc_ShaFinal%107:

00409e4c <wc_ShaFinal>:
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };



int wc_ShaFinal(Sha* sha, byte* hash)
{
  409e4c:	b570      	push	{r4, r5, r6, lr}

00409e4e <.LCFI5>:
  409e4e:	b082      	sub	sp, #8

00409e50 <.LCFI6>:
  409e50:	4604      	mov	r4, r0
  409e52:	460d      	mov	r5, r1
    uint8_t  padn;
    uint8_t  msg_len[8];

    /* Get the number of bits */
    /* create the message bit length block */
    uint64_t total_bits = sha->total_len << 3;
  409e54:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
  409e58:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
  409e5c:	00db      	lsls	r3, r3, #3
  409e5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  409e62:	00d1      	lsls	r1, r2, #3

00409e64 <.LVL43>:
    msg_len[0] = (uint8_t)(total_bits >> 56);
  409e64:	0e18      	lsrs	r0, r3, #24

00409e66 <.LVL44>:
  409e66:	f88d 0000 	strb.w	r0, [sp]
    msg_len[1] = (uint8_t)(total_bits >> 48);
  409e6a:	0c18      	lsrs	r0, r3, #16
  409e6c:	f88d 0001 	strb.w	r0, [sp, #1]
    msg_len[2] = (uint8_t)(total_bits >> 40);
  409e70:	0a18      	lsrs	r0, r3, #8
  409e72:	f88d 0002 	strb.w	r0, [sp, #2]
    msg_len[3] = (uint8_t)(total_bits >> 32);
  409e76:	f88d 3003 	strb.w	r3, [sp, #3]
    msg_len[4] = (uint8_t)(total_bits >> 24);
  409e7a:	0e0b      	lsrs	r3, r1, #24

00409e7c <.LVL45>:
  409e7c:	f88d 3004 	strb.w	r3, [sp, #4]
    msg_len[5] = (uint8_t)(total_bits >> 16);
  409e80:	0c0b      	lsrs	r3, r1, #16
  409e82:	f88d 3005 	strb.w	r3, [sp, #5]
    msg_len[6] = (uint8_t)(total_bits >>  8);
  409e86:	0a0b      	lsrs	r3, r1, #8
  409e88:	f88d 3006 	strb.w	r3, [sp, #6]
    msg_len[7] = (uint8_t)(total_bits);
  409e8c:	f88d 1007 	strb.w	r1, [sp, #7]

    last = sha->total_len & 0x3F;
  409e90:	f002 023f 	and.w	r2, r2, #63	; 0x3f

00409e94 <.LVL46>:
    padn = (last < SHA_PAD_SIZE) ? (SHA_PAD_SIZE - last) : (120 - last);
  409e94:	2a37      	cmp	r2, #55	; 0x37
  409e96:	bf94      	ite	ls
  409e98:	f1c2 0238 	rsbls	r2, r2, #56	; 0x38

00409e9c <.LVL47>:
  409e9c:	f1c2 0278 	rsbhi	r2, r2, #120	; 0x78
  409ea0:	b2d2      	uxtb	r2, r2

00409ea2 <.LVL48>:

    wc_ShaUpdate(sha, sha_padding, padn);
  409ea2:	490d      	ldr	r1, [pc, #52]	; (409ed8 <.LVL53+0x2>)
  409ea4:	4620      	mov	r0, r4
  409ea6:	f000 f8e3 	bl	40a070 <.LFE150>

00409eaa <.LVL50>:

    wc_ShaUpdate(sha, msg_len, 8);
  409eaa:	2208      	movs	r2, #8
  409eac:	4669      	mov	r1, sp
  409eae:	4620      	mov	r0, r4
  409eb0:	f000 f8de 	bl	40a070 <.LFE150>

00409eb4 <.LVL51>:

    memcpy(hash, sha->digest, SHA_DIGEST_SIZE);
  409eb4:	4623      	mov	r3, r4
  409eb6:	f853 2f80 	ldr.w	r2, [r3, #128]!
  409eba:	685e      	ldr	r6, [r3, #4]
  409ebc:	6898      	ldr	r0, [r3, #8]
  409ebe:	68d9      	ldr	r1, [r3, #12]
  409ec0:	602a      	str	r2, [r5, #0]
  409ec2:	606e      	str	r6, [r5, #4]
  409ec4:	60a8      	str	r0, [r5, #8]
  409ec6:	60e9      	str	r1, [r5, #12]
  409ec8:	691a      	ldr	r2, [r3, #16]
  409eca:	612a      	str	r2, [r5, #16]

    return wc_InitSha(sha);
  409ecc:	4620      	mov	r0, r4
  409ece:	f000 fdbb 	bl	40aa48 <.LFE154>

00409ed2 <.LVL52>:
}
  409ed2:	b002      	add	sp, #8

00409ed4 <.LCFI7>:
  409ed4:	bd70      	pop	{r4, r5, r6, pc}

00409ed6 <.LVL53>:
  409ed6:	bf00      	nop
  409ed8:	0040b140 	.word	0x0040b140

Disassembly of section .text.PIO_Initialize%108:

00409edc <PIO_Initialize>:
    See plib_pio.h for more details.
*/
void PIO_Initialize ( void )
{
    /* Selected System IO pins are configured as GPIO */
    MATRIX_REGS->CCFG_SYSIO |= 0x10;
  409edc:	4a20      	ldr	r2, [pc, #128]	; (409f60 <.LFE157+0x84>)
  409ede:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  409ee2:	f043 0310 	orr.w	r3, r3, #16
  409ee6:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    /************************ PIO A Initialization ************************/
    /* PORTA PIO Disable and Peripheral Enable*/
    ((pio_registers_t*)PIO_PORT_A)->PIO_PDR = 0x200000;
  409eea:	f502 22b1 	add.w	r2, r2, #362496	; 0x58800
  409eee:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
  409ef2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  409ef6:	6053      	str	r3, [r2, #4]
    /* PORTA Pull Up Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_A)->PIO_PUDR = ~0x800;
  409ef8:	f46f 6300 	mvn.w	r3, #2048	; 0x800
  409efc:	6613      	str	r3, [r2, #96]	; 0x60
    ((pio_registers_t*)PIO_PORT_A)->PIO_PUER = 0x800;
  409efe:	f44f 6300 	mov.w	r3, #2048	; 0x800
  409f02:	6653      	str	r3, [r2, #100]	; 0x64
    /* PORTA Pull Down Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_A)->PIO_PPDDR = 0xFFFFFFFF;
  409f04:	f04f 33ff 	mov.w	r3, #4294967295
  409f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* PORTA Output Write Enable */
    ((pio_registers_t*)PIO_PORT_A)->PIO_OWER = PIO_OWER_Msk;
  409f0c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    /* PORTA Output Direction Enable */
    ((pio_registers_t*)PIO_PORT_A)->PIO_OER = 0x20;
  409f10:	2120      	movs	r1, #32
  409f12:	6111      	str	r1, [r2, #16]
    /* PORTA Initial state High */
    ((pio_registers_t*)PIO_PORT_A)->PIO_SODR = 0x20;
  409f14:	6311      	str	r1, [r2, #48]	; 0x30

    /************************ PIO B Initialization ************************/
    /* PORTB Peripheral Function Selection */
    ((pio_registers_t*)PIO_PORT_B)->PIO_ABCDSR[0]= 0x10;
  409f16:	f502 7200 	add.w	r2, r2, #512	; 0x200
  409f1a:	2110      	movs	r1, #16
  409f1c:	6711      	str	r1, [r2, #112]	; 0x70
    ((pio_registers_t*)PIO_PORT_B)->PIO_ABCDSR[1]= 0x10;
  409f1e:	6751      	str	r1, [r2, #116]	; 0x74
    /* PORTB PIO Disable and Peripheral Enable*/
    ((pio_registers_t*)PIO_PORT_B)->PIO_PDR = 0x10;
  409f20:	6051      	str	r1, [r2, #4]
    /* PORTB Pull Up Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_B)->PIO_PUDR = 0xFFFFFFFF;
  409f22:	6613      	str	r3, [r2, #96]	; 0x60
    /* PORTB Pull Down Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_B)->PIO_PPDDR = 0xFFFFFFFF;
  409f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* PORTB Output Write Enable */
    ((pio_registers_t*)PIO_PORT_B)->PIO_OWER = PIO_OWER_Msk;
  409f28:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    /* PORTB Output Direction Enable */
    ((pio_registers_t*)PIO_PORT_B)->PIO_OER = 0x100;
  409f2c:	f44f 7180 	mov.w	r1, #256	; 0x100
  409f30:	6111      	str	r1, [r2, #16]
    /* PORTB Initial state High */
    ((pio_registers_t*)PIO_PORT_B)->PIO_SODR = 0x100;
  409f32:	6311      	str	r1, [r2, #48]	; 0x30

    /************************ PIO C Initialization ************************/
    /* PORTC Pull Up Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_C)->PIO_PUDR = 0xFFFFFFFF;
  409f34:	f502 7200 	add.w	r2, r2, #512	; 0x200
  409f38:	6613      	str	r3, [r2, #96]	; 0x60
    /* PORTC Pull Down Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_C)->PIO_PPDDR = 0xFFFFFFFF;
  409f3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* PORTC Output Write Enable */
    ((pio_registers_t*)PIO_PORT_C)->PIO_OWER = PIO_OWER_Msk;
  409f3e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    /************************ PIO D Initialization ************************/
    /* PORTD Pull Up Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_D)->PIO_PUDR = 0xFFFFFFFF;
  409f42:	f502 7200 	add.w	r2, r2, #512	; 0x200
  409f46:	6613      	str	r3, [r2, #96]	; 0x60
    /* PORTD Pull Down Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_D)->PIO_PPDDR = 0xFFFFFFFF;
  409f48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* PORTD Output Write Enable */
    ((pio_registers_t*)PIO_PORT_D)->PIO_OWER = PIO_OWER_Msk;
  409f4c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    /************************ PIO E Initialization ************************/
    /* PORTE Pull Up Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_E)->PIO_PUDR = 0xFFFFFFFF;
  409f50:	f502 7200 	add.w	r2, r2, #512	; 0x200
  409f54:	6613      	str	r3, [r2, #96]	; 0x60
    /* PORTE Pull Down Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_E)->PIO_PPDDR = 0xFFFFFFFF;
  409f56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* PORTE Output Write Enable */
    ((pio_registers_t*)PIO_PORT_E)->PIO_OWER = PIO_OWER_Msk;
  409f5a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  409f5e:	4770      	bx	lr
  409f60:	40088000 	.word	0x40088000

Disassembly of section .text.wc_Md5Update%109:

00409f64 <wc_Md5Update>:
    if (md5 == NULL || (data == NULL && len > 0)) {
  409f64:	b3a0      	cbz	r0, 409fd0 <.LCFI4>
{
  409f66:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

00409f6a <.LCFI3>:
  409f6a:	460f      	mov	r7, r1
  409f6c:	4615      	mov	r5, r2
  409f6e:	4606      	mov	r6, r0
    if (md5 == NULL || (data == NULL && len > 0)) {
  409f70:	b901      	cbnz	r1, 409f74 <.LCFI3+0xa>
  409f72:	bb82      	cbnz	r2, 409fd6 <.LCFI5>
    local = (byte*)md5->buffer;
  409f74:	f106 080c 	add.w	r8, r6, #12

00409f78 <.LVL331>:
    if (md5->buffLen >= MD5_BLOCK_SIZE)
  409f78:	6833      	ldr	r3, [r6, #0]
  409f7a:	2b3f      	cmp	r3, #63	; 0x3f
  409f7c:	d82f      	bhi.n	409fde <.LVL346>
    while (len) {
  409f7e:	b395      	cbz	r5, 409fe6 <.LVL348>

00409f80 <.LBB141>:
            md5->buffLen = 0;
  409f80:	f04f 0900 	mov.w	r9, #0
  409f84:	e002      	b.n	409f8c <.LBB146>

00409f86 <.LVL332>:
  409f86:	f8c6 9000 	str.w	r9, [r6]

00409f8a <.LBE141>:
    while (len) {
  409f8a:	b1f5      	cbz	r5, 409fca <.LBE144>

00409f8c <.LBB146>:
        word32 add = min(len, MD5_BLOCK_SIZE - md5->buffLen);
  409f8c:	6830      	ldr	r0, [r6, #0]

00409f8e <.LVL333>:
  409f8e:	f1c0 0440 	rsb	r4, r0, #64	; 0x40

00409f92 <.LBB142>:
        return a > b ? b : a;
  409f92:	42ac      	cmp	r4, r5
  409f94:	bf28      	it	cs
  409f96:	462c      	movcs	r4, r5

00409f98 <.LBE142>:
        XMEMCPY(&local[md5->buffLen], data, add);
  409f98:	4622      	mov	r2, r4
  409f9a:	4639      	mov	r1, r7
  409f9c:	4440      	add	r0, r8
  409f9e:	f7fd ffff 	bl	407fa0 <.LFE164>

00409fa2 <.LVL336>:
        md5->buffLen += add;
  409fa2:	6833      	ldr	r3, [r6, #0]
  409fa4:	4423      	add	r3, r4
  409fa6:	6033      	str	r3, [r6, #0]
        data         += add;
  409fa8:	4427      	add	r7, r4
        len          -= add;
  409faa:	1b2d      	subs	r5, r5, r4
        if (md5->buffLen == MD5_BLOCK_SIZE) {
  409fac:	2b40      	cmp	r3, #64	; 0x40
  409fae:	d1ec      	bne.n	409f8a <.LBE141>
            XTRANSFORM(md5, local);
  409fb0:	4630      	mov	r0, r6
  409fb2:	f7fb fea7 	bl	405d04 <.LFE18>

00409fb6 <.LBB144>:
    word32 tmp = md5->loLen;
  409fb6:	6872      	ldr	r2, [r6, #4]

00409fb8 <.LVL340>:
    if ((md5->loLen += len) < tmp) {
  409fb8:	f102 0340 	add.w	r3, r2, #64	; 0x40
  409fbc:	6073      	str	r3, [r6, #4]
  409fbe:	429a      	cmp	r2, r3
  409fc0:	d9e1      	bls.n	409f86 <.LVL332>
        md5->hiLen++;                       /* carry low to high */
  409fc2:	68b3      	ldr	r3, [r6, #8]
  409fc4:	3301      	adds	r3, #1
  409fc6:	60b3      	str	r3, [r6, #8]
  409fc8:	e7dd      	b.n	409f86 <.LVL332>

00409fca <.LBE144>:
    return ret;
  409fca:	2000      	movs	r0, #0
  409fcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00409fd0 <.LCFI4>:
        return BAD_FUNC_ARG;
  409fd0:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00409fd4 <.LVL343>:
  409fd4:	4770      	bx	lr

00409fd6 <.LCFI5>:
  409fd6:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00409fda <.LVL345>:
  409fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00409fde <.LVL346>:
        return BUFFER_E;
  409fde:	f06f 0083 	mvn.w	r0, #131	; 0x83

00409fe2 <.LVL347>:
  409fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00409fe6 <.LVL348>:
    return ret;
  409fe6:	2000      	movs	r0, #0

00409fe8 <.LVL349>:
}
  409fe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

Disassembly of section .text.SYS_TIME_HwTimerCompareUpdate%110:

00409fec <SYS_TIME_HwTimerCompareUpdate>:
{
  409fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

00409fee <.LCFI0>:
    SYS_TIME_TIMER_OBJ* tmrActive = counterObj->tmrActive;
  409fee:	4b1f      	ldr	r3, [pc, #124]	; (40a06c <.LVL24+0x8>)
  409ff0:	6b19      	ldr	r1, [r3, #48]	; 0x30

00409ff2 <.LVL14>:
    counterObj->hwTimerPreviousValue = counterObj->hwTimerCurrentValue;
  409ff2:	695a      	ldr	r2, [r3, #20]
  409ff4:	611a      	str	r2, [r3, #16]
    if (tmrActive != NULL)
  409ff6:	2900      	cmp	r1, #0
  409ff8:	d02f      	beq.n	40a05a <.LVL22>
        if (tmrActive->relativeTimePending > SYS_TIME_HW_COUNTER_HALF_PERIOD)
  409ffa:	688c      	ldr	r4, [r1, #8]
  409ffc:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
            nextHwCounterValue = counterObj->hwTimerCurrentValue + SYS_TIME_HW_COUNTER_HALF_PERIOD;
  40a000:	bf28      	it	cs
  40a002:	f647 74ff 	movwcs	r4, #32767	; 0x7fff
            nextHwCounterValue = counterObj->hwTimerCurrentValue + tmrActive->relativeTimePending;
  40a006:	4414      	add	r4, r2
  40a008:	2500      	movs	r5, #0

0040a00a <.LVL15>:
    currHwCounterValue = counterObj->timePlib->timerCounterGet();
  40a00a:	4e18      	ldr	r6, [pc, #96]	; (40a06c <.LVL24+0x8>)
  40a00c:	6873      	ldr	r3, [r6, #4]
  40a00e:	699b      	ldr	r3, [r3, #24]
  40a010:	4798      	blx	r3

0040a012 <.LVL16>:
  40a012:	2100      	movs	r1, #0

0040a014 <.LVL17>:
    if (currHwCounterValue < counterObj->hwTimerPreviousValue)
  40a014:	6932      	ldr	r2, [r6, #16]
  40a016:	2300      	movs	r3, #0
  40a018:	4299      	cmp	r1, r3
  40a01a:	bf08      	it	eq
  40a01c:	4290      	cmpeq	r0, r2
  40a01e:	d204      	bcs.n	40a02a <.LVL19>
        currHwCounterValue = SYS_TIME_HW_COUNTER_PERIOD + currHwCounterValue;
  40a020:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40a024:	2300      	movs	r3, #0
  40a026:	1880      	adds	r0, r0, r2

0040a028 <.LVL18>:
  40a028:	4159      	adcs	r1, r3

0040a02a <.LVL19>:
    if (nextHwCounterValue  < (currHwCounterValue + counterObj->hwTimerCompareMargin))
  40a02a:	4b10      	ldr	r3, [pc, #64]	; (40a06c <.LVL24+0x8>)
  40a02c:	6a1b      	ldr	r3, [r3, #32]
  40a02e:	18c6      	adds	r6, r0, r3
  40a030:	f141 0700 	adc.w	r7, r1, #0
  40a034:	42bd      	cmp	r5, r7
  40a036:	bf08      	it	eq
  40a038:	42b4      	cmpeq	r4, r6
  40a03a:	d213      	bcs.n	40a064 <.LVL24>
        counterObj->hwTimerCompareValue = currHwCounterValue + counterObj->hwTimerCompareMargin;
  40a03c:	4418      	add	r0, r3

0040a03e <.LVL20>:
  40a03e:	4b0b      	ldr	r3, [pc, #44]	; (40a06c <.LVL24+0x8>)
  40a040:	61d8      	str	r0, [r3, #28]
    if ((counterObj->hwTimerCompareValue & SYS_TIME_HW_COUNTER_PERIOD) == 0)
  40a042:	4b0a      	ldr	r3, [pc, #40]	; (40a06c <.LVL24+0x8>)
  40a044:	8b9b      	ldrh	r3, [r3, #28]
  40a046:	b913      	cbnz	r3, 40a04e <.LVL20+0x10>
        counterObj->hwTimerCompareValue = 1;
  40a048:	2201      	movs	r2, #1
  40a04a:	4b08      	ldr	r3, [pc, #32]	; (40a06c <.LVL24+0x8>)
  40a04c:	61da      	str	r2, [r3, #28]
    counterObj->timePlib->timerCompareSet(counterObj->hwTimerCompareValue);
  40a04e:	4b07      	ldr	r3, [pc, #28]	; (40a06c <.LVL24+0x8>)
  40a050:	685a      	ldr	r2, [r3, #4]
  40a052:	68d2      	ldr	r2, [r2, #12]
  40a054:	69d8      	ldr	r0, [r3, #28]
  40a056:	4790      	blx	r2
  40a058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0040a05a <.LVL22>:
        nextHwCounterValue = counterObj->hwTimerCurrentValue + SYS_TIME_HW_COUNTER_HALF_PERIOD;
  40a05a:	f647 74ff 	movw	r4, #32767	; 0x7fff
  40a05e:	4414      	add	r4, r2
  40a060:	2500      	movs	r5, #0

0040a062 <.LVL23>:
  40a062:	e7d2      	b.n	40a00a <.LVL15>

0040a064 <.LVL24>:
        counterObj->hwTimerCompareValue = nextHwCounterValue;
  40a064:	4b01      	ldr	r3, [pc, #4]	; (40a06c <.LVL24+0x8>)
  40a066:	61dc      	str	r4, [r3, #28]
  40a068:	e7eb      	b.n	40a042 <.LVL20+0x4>
  40a06a:	bf00      	nop
  40a06c:	20417c00 	.word	0x20417c00

Disassembly of section .text.wc_ShaUpdate%111:

0040a070 <wc_ShaUpdate>:
{
  40a070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

0040a074 <.LCFI4>:
  40a074:	4605      	mov	r5, r0
  40a076:	460f      	mov	r7, r1
  40a078:	4614      	mov	r4, r2

0040a07a <.LVL22>:
    left = sha->total_len & 0x3F;
  40a07a:	e9d0 2326 	ldrd	r2, r3, [r0, #152]	; 0x98

0040a07e <.LVL23>:
  40a07e:	f002 063f 	and.w	r6, r2, #63	; 0x3f

0040a082 <.LVL24>:
    sha->total_len += len;
  40a082:	1912      	adds	r2, r2, r4
  40a084:	f143 0300 	adc.w	r3, r3, #0
  40a088:	e9c0 2326 	strd	r2, r3, [r0, #152]	; 0x98
    if (left && len >= fill)
  40a08c:	b11e      	cbz	r6, 40a096 <.LVL26>
  40a08e:	f1c6 0840 	rsb	r8, r6, #64	; 0x40

0040a092 <.LVL25>:
  40a092:	45a0      	cmp	r8, r4
  40a094:	d907      	bls.n	40a0a6 <.LVL28>

0040a096 <.LVL26>:
    uint32_t result = 0;
  40a096:	f04f 0900 	mov.w	r9, #0

0040a09a <.LVL27>:
    if (len >= SHA_BLOCK_SIZE)
  40a09a:	2c3f      	cmp	r4, #63	; 0x3f
  40a09c:	d815      	bhi.n	40a0ca <.LVL35>
    if( len > 0 )
  40a09e:	bb04      	cbnz	r4, 40a0e2 <.LVL40>
}
  40a0a0:	4648      	mov	r0, r9
  40a0a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040a0a6 <.LVL28>:
        memcpy((void *)(sha->buffer + left), data, fill);
  40a0a6:	f100 0940 	add.w	r9, r0, #64	; 0x40
  40a0aa:	4642      	mov	r2, r8
  40a0ac:	eb09 0006 	add.w	r0, r9, r6

0040a0b0 <.LVL29>:
  40a0b0:	f7fd ff76 	bl	407fa0 <.LFE164>

0040a0b4 <.LVL30>:
        result = Sha1Process(sha, sha->buffer, SHA_BLOCK_SIZE);
  40a0b4:	2240      	movs	r2, #64	; 0x40
  40a0b6:	4649      	mov	r1, r9
  40a0b8:	4628      	mov	r0, r5
  40a0ba:	f7ff f815 	bl	4090e8 <.LFE161>

0040a0be <.LVL31>:
  40a0be:	4681      	mov	r9, r0

0040a0c0 <.LVL32>:
        data += fill;
  40a0c0:	4447      	add	r7, r8
        len -= fill;
  40a0c2:	eba4 0408 	sub.w	r4, r4, r8

0040a0c6 <.LVL34>:
        left = 0;
  40a0c6:	2600      	movs	r6, #0
  40a0c8:	e7e7      	b.n	40a09a <.LVL27>

0040a0ca <.LVL35>:
        result = Sha1Process(sha, data, len & 0xFFFFFFC0);
  40a0ca:	f024 083f 	bic.w	r8, r4, #63	; 0x3f
  40a0ce:	4642      	mov	r2, r8
  40a0d0:	4639      	mov	r1, r7
  40a0d2:	4628      	mov	r0, r5
  40a0d4:	f7ff f808 	bl	4090e8 <.LFE161>

0040a0d8 <.LVL36>:
  40a0d8:	4681      	mov	r9, r0

0040a0da <.LVL37>:
        data += (len & 0xFFFFFFC0);
  40a0da:	4447      	add	r7, r8
        len &= 0x3F;
  40a0dc:	f004 043f 	and.w	r4, r4, #63	; 0x3f
  40a0e0:	e7dd      	b.n	40a09e <.LVL27+0x4>

0040a0e2 <.LVL40>:
        memcpy((void *)(sha->buffer + left), data, len);
  40a0e2:	f105 0040 	add.w	r0, r5, #64	; 0x40
  40a0e6:	4622      	mov	r2, r4
  40a0e8:	4639      	mov	r1, r7
  40a0ea:	4430      	add	r0, r6
  40a0ec:	f7fd ff58 	bl	407fa0 <.LFE164>

0040a0f0 <.LVL41>:
  40a0f0:	e7d6      	b.n	40a0a0 <.LVL27+0x6>

Disassembly of section .text.wc_Sha256Update%112:

0040a0f2 <wc_Sha256Update>:
{
  40a0f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

0040a0f6 <.LCFI4>:
  40a0f6:	4605      	mov	r5, r0
  40a0f8:	460f      	mov	r7, r1
  40a0fa:	4614      	mov	r4, r2

0040a0fc <.LVL22>:
    left = sha256->total_len & 0x3F;
  40a0fc:	e9d0 2328 	ldrd	r2, r3, [r0, #160]	; 0xa0

0040a100 <.LVL23>:
  40a100:	f002 063f 	and.w	r6, r2, #63	; 0x3f

0040a104 <.LVL24>:
    sha256->total_len += len;
  40a104:	1912      	adds	r2, r2, r4
  40a106:	f143 0300 	adc.w	r3, r3, #0
  40a10a:	e9c0 2328 	strd	r2, r3, [r0, #160]	; 0xa0
    if (left && len >= fill)
  40a10e:	b11e      	cbz	r6, 40a118 <.LVL26>
  40a110:	f1c6 0840 	rsb	r8, r6, #64	; 0x40

0040a114 <.LVL25>:
  40a114:	45a0      	cmp	r8, r4
  40a116:	d907      	bls.n	40a128 <.LVL28>

0040a118 <.LVL26>:
    int result = 0;
  40a118:	f04f 0900 	mov.w	r9, #0

0040a11c <.LVL27>:
    if (len >= SHA256_BLOCK_SIZE)
  40a11c:	2c3f      	cmp	r4, #63	; 0x3f
  40a11e:	d815      	bhi.n	40a14c <.LVL35>
    if (len > 0)
  40a120:	bb04      	cbnz	r4, 40a164 <.LVL40>
}
  40a122:	4648      	mov	r0, r9
  40a124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040a128 <.LVL28>:
        memcpy((void *)(sha256->buffer + left), data, fill);
  40a128:	f100 0940 	add.w	r9, r0, #64	; 0x40
  40a12c:	4642      	mov	r2, r8
  40a12e:	eb09 0006 	add.w	r0, r9, r6

0040a132 <.LVL29>:
  40a132:	f7fd ff35 	bl	407fa0 <.LFE164>

0040a136 <.LVL30>:
        result = Sha256Process(sha256, sha256->buffer, SHA256_BLOCK_SIZE);
  40a136:	2240      	movs	r2, #64	; 0x40
  40a138:	4649      	mov	r1, r9
  40a13a:	4628      	mov	r0, r5
  40a13c:	f7fe fe82 	bl	408e44 <.LFE20>

0040a140 <.LVL31>:
  40a140:	4681      	mov	r9, r0

0040a142 <.LVL32>:
        data += fill;
  40a142:	4447      	add	r7, r8
        len -= fill;
  40a144:	eba4 0408 	sub.w	r4, r4, r8

0040a148 <.LVL34>:
        left = 0;
  40a148:	2600      	movs	r6, #0
  40a14a:	e7e7      	b.n	40a11c <.LVL27>

0040a14c <.LVL35>:
        result = Sha256Process(sha256, data, len & 0xFFFFFFC0);
  40a14c:	f024 083f 	bic.w	r8, r4, #63	; 0x3f
  40a150:	4642      	mov	r2, r8
  40a152:	4639      	mov	r1, r7
  40a154:	4628      	mov	r0, r5
  40a156:	f7fe fe75 	bl	408e44 <.LFE20>

0040a15a <.LVL36>:
  40a15a:	4681      	mov	r9, r0

0040a15c <.LVL37>:
        data += (len & 0xFFFFFFC0);
  40a15c:	4447      	add	r7, r8
        len &= 0x3F;
  40a15e:	f004 043f 	and.w	r4, r4, #63	; 0x3f
  40a162:	e7dd      	b.n	40a120 <.LVL27+0x4>

0040a164 <.LVL40>:
        memcpy((void *)(sha256->buffer + left), data, len);
  40a164:	f105 0040 	add.w	r0, r5, #64	; 0x40
  40a168:	4622      	mov	r2, r4
  40a16a:	4639      	mov	r1, r7
  40a16c:	4430      	add	r0, r6
  40a16e:	f7fd ff17 	bl	407fa0 <.LFE164>

0040a172 <.LVL41>:
    return result;
  40a172:	e7d6      	b.n	40a122 <.LVL27+0x6>

Disassembly of section .rodata.sha_padding%113:

0040a174 <sha_padding>:
  40a174:	0080 0000 0000 0000 0000 0000 0000 0000     ................
	...

Disassembly of section .text.__multadd%114:

0040a1f4 <__multadd>:
  40a1f4:	b5f0      	push	{r4, r5, r6, r7, lr}

0040a1f6 <.LCFI1>:
  40a1f6:	690c      	ldr	r4, [r1, #16]
  40a1f8:	b083      	sub	sp, #12

0040a1fa <.LCFI2>:
  40a1fa:	460d      	mov	r5, r1
  40a1fc:	4606      	mov	r6, r0

0040a1fe <.LVL13>:
  40a1fe:	f101 0e14 	add.w	lr, r1, #20

0040a202 <.LVL14>:
  40a202:	2700      	movs	r7, #0

0040a204 <.LVL15>:
  40a204:	f8de 0000 	ldr.w	r0, [lr]

0040a208 <.LVL16>:
  40a208:	b281      	uxth	r1, r0
  40a20a:	fb02 3301 	mla	r3, r2, r1, r3

0040a20e <.LVL17>:
  40a20e:	0c01      	lsrs	r1, r0, #16
  40a210:	0c18      	lsrs	r0, r3, #16

0040a212 <.LVL18>:
  40a212:	fb02 0101 	mla	r1, r2, r1, r0

0040a216 <.LVL19>:
  40a216:	b29b      	uxth	r3, r3

0040a218 <.LVL20>:
  40a218:	3701      	adds	r7, #1

0040a21a <.LVL21>:
  40a21a:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  40a21e:	42bc      	cmp	r4, r7
  40a220:	f84e 3b04 	str.w	r3, [lr], #4

0040a224 <.LVL22>:
  40a224:	ea4f 4311 	mov.w	r3, r1, lsr #16

0040a228 <.LVL23>:
  40a228:	dcec      	bgt.n	40a204 <.LVL15>
  40a22a:	b13b      	cbz	r3, 40a23c <.LVL26+0x4>
  40a22c:	68aa      	ldr	r2, [r5, #8]

0040a22e <.LVL24>:
  40a22e:	4294      	cmp	r4, r2
  40a230:	da07      	bge.n	40a242 <.LCFI4>

0040a232 <.LVL25>:
  40a232:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40a236:	3401      	adds	r4, #1

0040a238 <.LVL26>:
  40a238:	6153      	str	r3, [r2, #20]
  40a23a:	612c      	str	r4, [r5, #16]
  40a23c:	4628      	mov	r0, r5
  40a23e:	b003      	add	sp, #12

0040a240 <.LCFI3>:
  40a240:	bdf0      	pop	{r4, r5, r6, r7, pc}

0040a242 <.LCFI4>:
  40a242:	6869      	ldr	r1, [r5, #4]

0040a244 <.LVL28>:
  40a244:	9301      	str	r3, [sp, #4]
  40a246:	3101      	adds	r1, #1
  40a248:	4630      	mov	r0, r6
  40a24a:	f000 fe3d 	bl	40aec8 <.LFE2>

0040a24e <.LVL29>:
  40a24e:	692a      	ldr	r2, [r5, #16]
  40a250:	3202      	adds	r2, #2
  40a252:	f105 010c 	add.w	r1, r5, #12
  40a256:	4607      	mov	r7, r0

0040a258 <.LVL30>:
  40a258:	0092      	lsls	r2, r2, #2
  40a25a:	300c      	adds	r0, #12

0040a25c <.LVL31>:
  40a25c:	f7fd fea0 	bl	407fa0 <.LFE164>

0040a260 <.LBB12>:
  40a260:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40a262:	6869      	ldr	r1, [r5, #4]

0040a264 <.LBE12>:
  40a264:	9b01      	ldr	r3, [sp, #4]

0040a266 <.LBB15>:
  40a266:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40a26a:	6028      	str	r0, [r5, #0]
  40a26c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]

0040a270 <.LBE15>:
  40a270:	463d      	mov	r5, r7

0040a272 <.LVL34>:
  40a272:	e7de      	b.n	40a232 <.LVL25>

Disassembly of section .text.prvUnlockQueue%115:

0040a274 <prvUnlockQueue>:
{
  40a274:	b570      	push	{r4, r5, r6, lr}

0040a276 <.LCFI4>:
  40a276:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
  40a278:	f001 facc 	bl	40b814 <.LFE6>

0040a27c <.LBB23>:
		int8_t cTxLock = pxQueue->cTxLock;
  40a27c:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
  40a280:	b264      	sxtb	r4, r4

0040a282 <.LVL27>:
		while( cTxLock > queueLOCKED_UNMODIFIED )
  40a282:	2c00      	cmp	r4, #0
  40a284:	dd11      	ble.n	40a2aa <.LVL31+0x2>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40a286:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  40a288:	b17b      	cbz	r3, 40a2aa <.LVL31+0x2>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40a28a:	f105 0624 	add.w	r6, r5, #36	; 0x24
  40a28e:	e004      	b.n	40a29a <.LVL29+0x6>
  40a290:	3c01      	subs	r4, #1

0040a292 <.LVL28>:
  40a292:	b264      	sxtb	r4, r4

0040a294 <.LVL29>:
		while( cTxLock > queueLOCKED_UNMODIFIED )
  40a294:	b14c      	cbz	r4, 40a2aa <.LVL31+0x2>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40a296:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  40a298:	b13b      	cbz	r3, 40a2aa <.LVL31+0x2>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40a29a:	4630      	mov	r0, r6
  40a29c:	f000 f8a6 	bl	40a3ec <.LFE0>

0040a2a0 <.LVL30>:
  40a2a0:	2800      	cmp	r0, #0
  40a2a2:	d0f5      	beq.n	40a290 <.LVL27+0xe>
						vTaskMissedYield();
  40a2a4:	f001 fd7e 	bl	40bda4 <vTaskMissedYield>

0040a2a8 <.LVL31>:
  40a2a8:	e7f2      	b.n	40a290 <.LVL27+0xe>
		pxQueue->cTxLock = queueUNLOCKED;
  40a2aa:	23ff      	movs	r3, #255	; 0xff
  40a2ac:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45

0040a2b0 <.LBE23>:
	taskEXIT_CRITICAL();
  40a2b0:	f001 fc9e 	bl	40bbf0 <vPortExitCritical>

0040a2b4 <.LVL32>:
	taskENTER_CRITICAL();
  40a2b4:	f001 faae 	bl	40b814 <.LFE6>

0040a2b8 <.LBB24>:
		int8_t cRxLock = pxQueue->cRxLock;
  40a2b8:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44

0040a2bc <.LVL34>:
  40a2bc:	b264      	sxtb	r4, r4

0040a2be <.LVL35>:
		while( cRxLock > queueLOCKED_UNMODIFIED )
  40a2be:	2c00      	cmp	r4, #0
  40a2c0:	dd11      	ble.n	40a2e6 <.LVL39+0x2>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40a2c2:	692b      	ldr	r3, [r5, #16]
  40a2c4:	b17b      	cbz	r3, 40a2e6 <.LVL39+0x2>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40a2c6:	f105 0610 	add.w	r6, r5, #16
  40a2ca:	e004      	b.n	40a2d6 <.LVL37+0x6>
  40a2cc:	3c01      	subs	r4, #1

0040a2ce <.LVL36>:
  40a2ce:	b264      	sxtb	r4, r4

0040a2d0 <.LVL37>:
		while( cRxLock > queueLOCKED_UNMODIFIED )
  40a2d0:	b14c      	cbz	r4, 40a2e6 <.LVL39+0x2>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40a2d2:	692b      	ldr	r3, [r5, #16]
  40a2d4:	b13b      	cbz	r3, 40a2e6 <.LVL39+0x2>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40a2d6:	4630      	mov	r0, r6
  40a2d8:	f000 f888 	bl	40a3ec <.LFE0>

0040a2dc <.LVL38>:
  40a2dc:	2800      	cmp	r0, #0
  40a2de:	d0f5      	beq.n	40a2cc <.LVL35+0xe>
					vTaskMissedYield();
  40a2e0:	f001 fd60 	bl	40bda4 <vTaskMissedYield>

0040a2e4 <.LVL39>:
  40a2e4:	e7f2      	b.n	40a2cc <.LVL35+0xe>
		pxQueue->cRxLock = queueUNLOCKED;
  40a2e6:	23ff      	movs	r3, #255	; 0xff
  40a2e8:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44

0040a2ec <.LBE24>:
	taskEXIT_CRITICAL();
  40a2ec:	f001 fc80 	bl	40bbf0 <vPortExitCritical>

0040a2f0 <.LVL40>:
  40a2f0:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section .text.prvAddCurrentTaskToDelayedList%116:

0040a2f4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
  40a2f4:	b570      	push	{r4, r5, r6, lr}

0040a2f6 <.LCFI1>:
  40a2f6:	4604      	mov	r4, r0
  40a2f8:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
  40a2fa:	4b17      	ldr	r3, [pc, #92]	; (40a358 <.LVL27+0x2>)
  40a2fc:	681d      	ldr	r5, [r3, #0]

0040a2fe <.LVL18>:
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  40a2fe:	4b17      	ldr	r3, [pc, #92]	; (40a35c <.LVL27+0x6>)
  40a300:	6818      	ldr	r0, [r3, #0]

0040a302 <.LVL19>:
  40a302:	3004      	adds	r0, #4
  40a304:	f001 f9e8 	bl	40b6d8 <.LFE1>

0040a308 <.LVL20>:
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  40a308:	f1b4 3fff 	cmp.w	r4, #4294967295
  40a30c:	d100      	bne.n	40a310 <.LVL20+0x8>
  40a30e:	b99e      	cbnz	r6, 40a338 <.LVL23>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
  40a310:	442c      	add	r4, r5

0040a312 <.LVL21>:

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
  40a312:	4b12      	ldr	r3, [pc, #72]	; (40a35c <.LVL27+0x6>)
  40a314:	681b      	ldr	r3, [r3, #0]
  40a316:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
  40a318:	42a5      	cmp	r5, r4
  40a31a:	d814      	bhi.n	40a346 <.LVL25>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  40a31c:	4b10      	ldr	r3, [pc, #64]	; (40a360 <.LVL27+0xa>)
  40a31e:	6818      	ldr	r0, [r3, #0]
  40a320:	4b0e      	ldr	r3, [pc, #56]	; (40a35c <.LVL27+0x6>)
  40a322:	6819      	ldr	r1, [r3, #0]
  40a324:	3104      	adds	r1, #4
  40a326:	f001 f88d 	bl	40b444 <vListInsert>

0040a32a <.LVL22>:

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
  40a32a:	4b0e      	ldr	r3, [pc, #56]	; (40a364 <.LVL27+0xe>)
  40a32c:	681b      	ldr	r3, [r3, #0]
  40a32e:	429c      	cmp	r4, r3
  40a330:	d201      	bcs.n	40a336 <.LVL22+0xc>
				{
					xNextTaskUnblockTime = xTimeToWake;
  40a332:	4b0c      	ldr	r3, [pc, #48]	; (40a364 <.LVL27+0xe>)
  40a334:	601c      	str	r4, [r3, #0]
  40a336:	bd70      	pop	{r4, r5, r6, pc}

0040a338 <.LVL23>:
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
  40a338:	4b08      	ldr	r3, [pc, #32]	; (40a35c <.LVL27+0x6>)
  40a33a:	6819      	ldr	r1, [r3, #0]
  40a33c:	3104      	adds	r1, #4
  40a33e:	480a      	ldr	r0, [pc, #40]	; (40a368 <.LVL27+0x12>)
  40a340:	f001 fb3c 	bl	40b9bc <.LFE142>

0040a344 <.LVL24>:
  40a344:	bd70      	pop	{r4, r5, r6, pc}

0040a346 <.LVL25>:
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  40a346:	4b09      	ldr	r3, [pc, #36]	; (40a36c <.LVL27+0x16>)
  40a348:	6818      	ldr	r0, [r3, #0]
  40a34a:	4b04      	ldr	r3, [pc, #16]	; (40a35c <.LVL27+0x6>)
  40a34c:	6819      	ldr	r1, [r3, #0]
  40a34e:	3104      	adds	r1, #4
  40a350:	f001 f878 	bl	40b444 <vListInsert>

0040a354 <.LVL26>:
  40a354:	bd70      	pop	{r4, r5, r6, pc}

0040a356 <.LVL27>:
  40a356:	bf00      	nop
  40a358:	20417d98 	.word	0x20417d98
  40a35c:	20417d64 	.word	0x20417d64
  40a360:	20417d68 	.word	0x20417d68
  40a364:	20417d8c 	.word	0x20417d8c
  40a368:	20417cf4 	.word	0x20417cf4
  40a36c:	20417d6c 	.word	0x20417d6c

Disassembly of section .text.frexp%117:

0040a370 <frexp>:
  40a370:	b430      	push	{r4, r5}

0040a372 <.LCFI0>:
  40a372:	b082      	sub	sp, #8

0040a374 <.LCFI1>:
  40a374:	ed8d 0b00 	vstr	d0, [sp]

0040a378 <.LBB2>:
  40a378:	9b01      	ldr	r3, [sp, #4]

0040a37a <.LBE2>:
  40a37a:	4c1b      	ldr	r4, [pc, #108]	; (40a3e8 <.LVL14+0x12>)

0040a37c <.LBB3>:
  40a37c:	9d00      	ldr	r5, [sp, #0]

0040a37e <.LBE3>:
  40a37e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000

0040a382 <.LVL3>:
  40a382:	2200      	movs	r2, #0
  40a384:	42a1      	cmp	r1, r4
  40a386:	6002      	str	r2, [r0, #0]
  40a388:	dc17      	bgt.n	40a3ba <.LBE6+0x4>
  40a38a:	ea55 0401 	orrs.w	r4, r5, r1
  40a38e:	d014      	beq.n	40a3ba <.LBE6+0x4>
  40a390:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40a394:	db16      	blt.n	40a3c4 <.LCFI4>
  40a396:	4615      	mov	r5, r2

0040a398 <.LVL4>:
  40a398:	f023 44ff 	bic.w	r4, r3, #2139095040	; 0x7f800000
  40a39c:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000

0040a3a0 <.LBB4>:
  40a3a0:	e9dd 2300 	ldrd	r2, r3, [sp]
  40a3a4:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000

0040a3a8 <.LBE4>:
  40a3a8:	1509      	asrs	r1, r1, #20

0040a3aa <.LBB5>:
  40a3aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000

0040a3ae <.LBE5>:
  40a3ae:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe

0040a3b2 <.LBB6>:
  40a3b2:	e9cd 2300 	strd	r2, r3, [sp]

0040a3b6 <.LBE6>:
  40a3b6:	4429      	add	r1, r5
  40a3b8:	6001      	str	r1, [r0, #0]
  40a3ba:	ed9d 0b00 	vldr	d0, [sp]
  40a3be:	b002      	add	sp, #8

0040a3c0 <.LCFI2>:
  40a3c0:	bc30      	pop	{r4, r5}

0040a3c2 <.LCFI3>:
  40a3c2:	4770      	bx	lr

0040a3c4 <.LCFI4>:
  40a3c4:	ed9f 7b06 	vldr	d7, [pc, #24]	; 40a3e0 <.LVL14+0xa>
  40a3c8:	ee20 7b07 	vmul.f64	d7, d0, d7
  40a3cc:	ed8d 7b00 	vstr	d7, [sp]

0040a3d0 <.LBB7>:
  40a3d0:	9b01      	ldr	r3, [sp, #4]

0040a3d2 <.LBE7>:
  40a3d2:	f06f 0535 	mvn.w	r5, #53	; 0x35

0040a3d6 <.LVL14>:
  40a3d6:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
  40a3da:	e7dd      	b.n	40a398 <.LVL4>
  40a3dc:	f3af 8000 	nop.w
  40a3e0:	00000000 	.word	0x00000000
  40a3e4:	43500000 	.word	0x43500000
  40a3e8:	7fefffff 	.word	0x7fefffff

Disassembly of section .text.xTaskRemoveFromEventList%118:

0040a3ec <xTaskRemoveFromEventList>:
{
  40a3ec:	b538      	push	{r3, r4, r5, lr}

0040a3ee <.LCFI24>:
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  40a3ee:	68c3      	ldr	r3, [r0, #12]
  40a3f0:	68dc      	ldr	r4, [r3, #12]

0040a3f2 <.LVL245>:
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  40a3f2:	f104 0518 	add.w	r5, r4, #24
  40a3f6:	4628      	mov	r0, r5

0040a3f8 <.LVL246>:
  40a3f8:	f001 f96e 	bl	40b6d8 <.LFE1>

0040a3fc <.LVL247>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40a3fc:	4b13      	ldr	r3, [pc, #76]	; (40a44c <.LVL254+0x2>)
  40a3fe:	681b      	ldr	r3, [r3, #0]
  40a400:	b9e3      	cbnz	r3, 40a43c <.LVL251>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
  40a402:	1d25      	adds	r5, r4, #4
  40a404:	4628      	mov	r0, r5
  40a406:	f001 f967 	bl	40b6d8 <.LFE1>

0040a40a <.LVL248>:
		prvAddTaskToReadyList( pxUnblockedTCB );
  40a40a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40a40c:	4b10      	ldr	r3, [pc, #64]	; (40a450 <.LVL254+0x6>)
  40a40e:	681b      	ldr	r3, [r3, #0]
  40a410:	4298      	cmp	r0, r3
  40a412:	d901      	bls.n	40a418 <.LVL248+0xe>
  40a414:	4b0e      	ldr	r3, [pc, #56]	; (40a450 <.LVL254+0x6>)
  40a416:	6018      	str	r0, [r3, #0]
  40a418:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40a41c:	4629      	mov	r1, r5
  40a41e:	4b0d      	ldr	r3, [pc, #52]	; (40a454 <.LVL254+0xa>)
  40a420:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40a424:	f001 faca 	bl	40b9bc <.LFE142>

0040a428 <.LVL249>:
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  40a428:	4b0b      	ldr	r3, [pc, #44]	; (40a458 <.LVL254+0xe>)
  40a42a:	681b      	ldr	r3, [r3, #0]
  40a42c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40a42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40a430:	429a      	cmp	r2, r3
  40a432:	d908      	bls.n	40a446 <.LVL252+0x2>

0040a434 <.LVL250>:
		xYieldPending = pdTRUE;
  40a434:	2001      	movs	r0, #1
  40a436:	4b09      	ldr	r3, [pc, #36]	; (40a45c <.LVL254+0x12>)
  40a438:	6018      	str	r0, [r3, #0]
  40a43a:	bd38      	pop	{r3, r4, r5, pc}

0040a43c <.LVL251>:
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  40a43c:	4629      	mov	r1, r5
  40a43e:	4808      	ldr	r0, [pc, #32]	; (40a460 <.LVL254+0x16>)
  40a440:	f001 fabc 	bl	40b9bc <.LFE142>

0040a444 <.LVL252>:
  40a444:	e7f0      	b.n	40a428 <.LVL249>
		xReturn = pdFALSE;
  40a446:	2000      	movs	r0, #0

0040a448 <.LVL253>:
}
  40a448:	bd38      	pop	{r3, r4, r5, pc}

0040a44a <.LVL254>:
  40a44a:	bf00      	nop
  40a44c:	20417d7c 	.word	0x20417d7c
  40a450:	20417d84 	.word	0x20417d84
  40a454:	20417afc 	.word	0x20417afc
  40a458:	20417d64 	.word	0x20417d64
  40a45c:	20417d9c 	.word	0x20417d9c
  40a460:	20417ce0 	.word	0x20417ce0

Disassembly of section .text.CLK_Initialize%119:

0040a464 <CLK_Initialize>:
Clock Initialize
*********************************************************************************/
void CLK_Initialize( void )
{
    /* Set Flash Wait States and  Enable Code Loop Optimization */
    EFC_REGS->EEFC_FMR = EEFC_FMR_FWS(6) | EEFC_FMR_CLOE_Msk;
  40a464:	4a17      	ldr	r2, [pc, #92]	; (40a4c4 <.LBE8+0xa>)
  40a466:	4b18      	ldr	r3, [pc, #96]	; (40a4c8 <.LBE8+0xe>)
  40a468:	601a      	str	r2, [r3, #0]

0040a46a <.LBB6>:
    PMC_REGS->CKGR_PLLAR = CKGR_PLLAR_ONE_Msk | CKGR_PLLAR_PLLACOUNT(0x3f) |
  40a46a:	4a18      	ldr	r2, [pc, #96]	; (40a4cc <.LBE8+0x12>)
  40a46c:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  40a470:	629a      	str	r2, [r3, #40]	; 0x28
    while ( (PMC_REGS->PMC_SR & PMC_SR_LOCKA_Msk) != PMC_SR_LOCKA_Msk);
  40a472:	461a      	mov	r2, r3
  40a474:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40a476:	f013 0f02 	tst.w	r3, #2
  40a47a:	d0fb      	beq.n	40a474 <.LBB6+0xa>

0040a47c <.LBB8>:
    PMC_REGS->PMC_MCKR = (PMC_REGS->PMC_MCKR & ~PMC_MCKR_PRES_Msk) | PMC_MCKR_PRES_CLK_1;
  40a47c:	4a14      	ldr	r2, [pc, #80]	; (40a4d0 <.LBE8+0x16>)
  40a47e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40a480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40a484:	6313      	str	r3, [r2, #48]	; 0x30
    while ((PMC_REGS->PMC_SR & PMC_SR_MCKRDY_Msk) != PMC_SR_MCKRDY_Msk);
  40a486:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40a488:	f013 0f08 	tst.w	r3, #8
  40a48c:	d0fb      	beq.n	40a486 <.LBB8+0xa>
    PMC_REGS->PMC_MCKR = (PMC_REGS->PMC_MCKR & ~PMC_MCKR_MDIV_Msk) | PMC_MCKR_MDIV_PCK_DIV2;
  40a48e:	4a10      	ldr	r2, [pc, #64]	; (40a4d0 <.LBE8+0x16>)
  40a490:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40a492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40a496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40a49a:	6313      	str	r3, [r2, #48]	; 0x30
    while ((PMC_REGS->PMC_SR & PMC_SR_MCKRDY_Msk) != PMC_SR_MCKRDY_Msk);
  40a49c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40a49e:	f013 0f08 	tst.w	r3, #8
  40a4a2:	d0fb      	beq.n	40a49c <.LBB8+0x20>
    PMC_REGS->PMC_MCKR = (PMC_REGS->PMC_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_PLLA_CLK;
  40a4a4:	4a0a      	ldr	r2, [pc, #40]	; (40a4d0 <.LBE8+0x16>)
  40a4a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40a4a8:	f023 0303 	bic.w	r3, r3, #3
  40a4ac:	f043 0302 	orr.w	r3, r3, #2
  40a4b0:	6313      	str	r3, [r2, #48]	; 0x30
    while ((PMC_REGS->PMC_SR & PMC_SR_MCKRDY_Msk) != PMC_SR_MCKRDY_Msk);
  40a4b2:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40a4b4:	f013 0f08 	tst.w	r3, #8
  40a4b8:	d0fb      	beq.n	40a4b2 <.LBB8+0x36>

0040a4ba <.LBE8>:




    /* Enable Peripheral Clock */
    PMC_REGS->PMC_PCER0=0x835c00;
  40a4ba:	4a06      	ldr	r2, [pc, #24]	; (40a4d4 <.LBE8+0x1a>)
  40a4bc:	4b04      	ldr	r3, [pc, #16]	; (40a4d0 <.LBE8+0x16>)
  40a4be:	611a      	str	r2, [r3, #16]
  40a4c0:	4770      	bx	lr
  40a4c2:	bf00      	nop
  40a4c4:	04000600 	.word	0x04000600
  40a4c8:	400e0c00 	.word	0x400e0c00
  40a4cc:	20183f01 	.word	0x20183f01
  40a4d0:	400e0600 	.word	0x400e0600
  40a4d4:	00835c00 	.word	0x00835c00

Disassembly of section .text.APP_ShaRun_Feed%120:

0040a4d8 <APP_ShaRun_Feed>:
void APP_ShaRun_Feed(void) {
  40a4d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

0040a4dc <.LCFI6>:
  40a4dc:	af00      	add	r7, sp, #0

0040a4de <.LCFI7>:
  40a4de:	f5ad 7d20 	sub.w	sp, sp, #640	; 0x280
  40a4e2:	f10d 057f 	add.w	r5, sp, #127	; 0x7f
  40a4e6:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
    CRYPT_SHA_Initialize(&sha);
  40a4ea:	4628      	mov	r0, r5
  40a4ec:	f001 fbf4 	bl	40bcd8 <.LFE19>

0040a4f0 <.LVL17>:
    memset(myBuf, 'a', sizeof (myBuf));
  40a4f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40a4f4:	2161      	movs	r1, #97	; 0x61
  40a4f6:	4813      	ldr	r0, [pc, #76]	; (40a544 <.LCFI8+0x4>)
  40a4f8:	f7ff fae8 	bl	409acc <.LFE157>

0040a4fc <.LVL18>:
    CRYPT_SHA_DataSizeSet(&sha, 512 * 1024);
  40a4fc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  40a500:	4628      	mov	r0, r5
  40a502:	f001 fc67 	bl	40bdd4 <.LFE155>

0040a506 <.LBB14>:
    return SYS_TIME_CounterGet();
  40a506:	f001 f96f 	bl	40b7e8 <.LFE5>

0040a50a <.LVL20>:
  40a50a:	4681      	mov	r9, r0

0040a50c <.LVL21>:
  40a50c:	f44f 7400 	mov.w	r4, #512	; 0x200

0040a510 <.LBE14>:
        CRYPT_SHA_DataAdd(&sha, myBuf, sizeof (myBuf));
  40a510:	f8df 8030 	ldr.w	r8, [pc, #48]	; 40a544 <.LCFI8+0x4>
  40a514:	f44f 6680 	mov.w	r6, #1024	; 0x400

0040a518 <.LVL22>:
  40a518:	4632      	mov	r2, r6
  40a51a:	4641      	mov	r1, r8
  40a51c:	4628      	mov	r0, r5
  40a51e:	f001 faa1 	bl	40ba64 <.LFE157>

0040a522 <.LVL23>:
    for (i = 0; i < 512; i++)
  40a522:	3c01      	subs	r4, #1

0040a524 <.LVL24>:
  40a524:	d1f8      	bne.n	40a518 <.LVL22>
    CRYPT_SHA_Finalize(&sha, appData.sha1_feed_result);
  40a526:	4c08      	ldr	r4, [pc, #32]	; (40a548 <.LCFI8+0x8>)

0040a528 <.LVL25>:
  40a528:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
  40a52c:	4628      	mov	r0, r5
  40a52e:	f001 faa5 	bl	40ba7c <.LFE160>

0040a532 <.LBB16>:
    return SYS_TIME_CounterGet();
  40a532:	f001 f959 	bl	40b7e8 <.LFE5>

0040a536 <.LBE16>:
    appData.sha1_feed_timing = hashStop - hashStart;
  40a536:	eba0 0009 	sub.w	r0, r0, r9
  40a53a:	f8c4 00f4 	str.w	r0, [r4, #244]	; 0xf4
}
  40a53e:	46bd      	mov	sp, r7

0040a540 <.LCFI8>:
  40a540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a544:	20400040 	.word	0x20400040
  40a548:	204176b8 	.word	0x204176b8

Disassembly of section .text.APP_Sha256Run_Feed%121:

0040a54c <APP_Sha256Run_Feed>:
void APP_Sha256Run_Feed(void) {
  40a54c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

0040a550 <.LCFI9>:
  40a550:	af00      	add	r7, sp, #0

0040a552 <.LCFI10>:
  40a552:	f5ad 7d20 	sub.w	sp, sp, #640	; 0x280
  40a556:	f10d 057f 	add.w	r5, sp, #127	; 0x7f
  40a55a:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
    CRYPT_SHA256_Initialize(&sha256);
  40a55e:	4628      	mov	r0, r5
  40a560:	f001 fbc2 	bl	40bce8 <.LFE158>

0040a564 <.LVL28>:
    memset(myBuf, 'a', sizeof (myBuf));
  40a564:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40a568:	2161      	movs	r1, #97	; 0x61
  40a56a:	4813      	ldr	r0, [pc, #76]	; (40a5b8 <.LCFI11+0x4>)
  40a56c:	f7ff faae 	bl	409acc <.LFE157>

0040a570 <.LVL29>:
    CRYPT_SHA256_DataSizeSet(&sha256, 512 * 1024);
  40a570:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  40a574:	4628      	mov	r0, r5
  40a576:	f001 fc33 	bl	40bde0 <.LFE159>

0040a57a <.LBB22>:
    return SYS_TIME_CounterGet();
  40a57a:	f001 f935 	bl	40b7e8 <.LFE5>

0040a57e <.LVL31>:
  40a57e:	4681      	mov	r9, r0

0040a580 <.LVL32>:
  40a580:	f44f 7400 	mov.w	r4, #512	; 0x200

0040a584 <.LBE22>:
        CRYPT_SHA256_DataAdd(&sha256, myBuf, sizeof (myBuf));
  40a584:	f8df 8030 	ldr.w	r8, [pc, #48]	; 40a5b8 <.LCFI11+0x4>
  40a588:	f44f 6680 	mov.w	r6, #1024	; 0x400

0040a58c <.LVL33>:
  40a58c:	4632      	mov	r2, r6
  40a58e:	4641      	mov	r1, r8
  40a590:	4628      	mov	r0, r5
  40a592:	f001 fa7f 	bl	40ba94 <.LFE161>

0040a596 <.LVL34>:
    for (i = 0; i < 512; i++) {
  40a596:	3c01      	subs	r4, #1

0040a598 <.LVL35>:
  40a598:	d1f8      	bne.n	40a58c <.LVL33>
    CRYPT_SHA256_Finalize(&sha256, appData.sha256_feed_result);
  40a59a:	4c08      	ldr	r4, [pc, #32]	; (40a5bc <.LCFI11+0x8>)

0040a59c <.LVL36>:
  40a59c:	f104 01f8 	add.w	r1, r4, #248	; 0xf8
  40a5a0:	4628      	mov	r0, r5
  40a5a2:	f001 fa83 	bl	40baac <.LFE164>

0040a5a6 <.LBB24>:
    return SYS_TIME_CounterGet();
  40a5a6:	f001 f91f 	bl	40b7e8 <.LFE5>

0040a5aa <.LBE24>:
    appData.sha256_feed_timing = hashStop - hashStart;
  40a5aa:	eba0 0009 	sub.w	r0, r0, r9
  40a5ae:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
}
  40a5b2:	46bd      	mov	sp, r7

0040a5b4 <.LCFI11>:
  40a5b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a5b8:	20400040 	.word	0x20400040
  40a5bc:	204176b8 	.word	0x204176b8

Disassembly of section .text.prvCopyDataToQueue%122:

0040a5c0 <prvCopyDataToQueue>:
{
  40a5c0:	b570      	push	{r4, r5, r6, lr}

0040a5c2 <.LCFI1>:
  40a5c2:	4604      	mov	r4, r0
  40a5c4:	4616      	mov	r6, r2

0040a5c6 <.LVL5>:
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  40a5c6:	6b85      	ldr	r5, [r0, #56]	; 0x38

0040a5c8 <.LVL6>:
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  40a5c8:	6c02      	ldr	r2, [r0, #64]	; 0x40

0040a5ca <.LVL7>:
  40a5ca:	b95a      	cbnz	r2, 40a5e4 <.LVL13>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40a5cc:	6803      	ldr	r3, [r0, #0]
  40a5ce:	b11b      	cbz	r3, 40a5d8 <.LVL10>
BaseType_t xReturn = pdFALSE;
  40a5d0:	2000      	movs	r0, #0

0040a5d2 <.LVL8>:
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  40a5d2:	3501      	adds	r5, #1

0040a5d4 <.LVL9>:
  40a5d4:	63a5      	str	r5, [r4, #56]	; 0x38
}
  40a5d6:	bd70      	pop	{r4, r5, r6, pc}

0040a5d8 <.LVL10>:
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  40a5d8:	6840      	ldr	r0, [r0, #4]

0040a5da <.LVL11>:
  40a5da:	f000 fbab 	bl	40ad34 <.LBE81>

0040a5de <.LVL12>:
				pxQueue->pxMutexHolder = NULL;
  40a5de:	2300      	movs	r3, #0
  40a5e0:	6063      	str	r3, [r4, #4]
  40a5e2:	e7f6      	b.n	40a5d2 <.LVL8>

0040a5e4 <.LVL13>:
	else if( xPosition == queueSEND_TO_BACK )
  40a5e4:	b96e      	cbnz	r6, 40a602 <.LVL16>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  40a5e6:	6880      	ldr	r0, [r0, #8]

0040a5e8 <.LVL14>:
  40a5e8:	f7fd fcda 	bl	407fa0 <.LFE164>

0040a5ec <.LVL15>:
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  40a5ec:	68a3      	ldr	r3, [r4, #8]
  40a5ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
  40a5f0:	4413      	add	r3, r2
  40a5f2:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  40a5f4:	6862      	ldr	r2, [r4, #4]
  40a5f6:	4293      	cmp	r3, r2
  40a5f8:	d317      	bcc.n	40a62a <.LVL18+0x22>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  40a5fa:	6823      	ldr	r3, [r4, #0]
  40a5fc:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  40a5fe:	2000      	movs	r0, #0
  40a600:	e7e7      	b.n	40a5d2 <.LVL8>

0040a602 <.LVL16>:
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40a602:	68c0      	ldr	r0, [r0, #12]

0040a604 <.LVL17>:
  40a604:	f7fd fccc 	bl	407fa0 <.LFE164>

0040a608 <.LVL18>:
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  40a608:	6c22      	ldr	r2, [r4, #64]	; 0x40
  40a60a:	4252      	negs	r2, r2
  40a60c:	68e3      	ldr	r3, [r4, #12]
  40a60e:	4413      	add	r3, r2
  40a610:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  40a612:	6821      	ldr	r1, [r4, #0]
  40a614:	428b      	cmp	r3, r1
  40a616:	d202      	bcs.n	40a61e <.LVL18+0x16>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  40a618:	6863      	ldr	r3, [r4, #4]
  40a61a:	441a      	add	r2, r3
  40a61c:	60e2      	str	r2, [r4, #12]
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  40a61e:	b135      	cbz	r5, 40a62e <.LVL18+0x26>
  40a620:	2e02      	cmp	r6, #2
  40a622:	d104      	bne.n	40a62e <.LVL18+0x26>
				--uxMessagesWaiting;
  40a624:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
  40a626:	2000      	movs	r0, #0
  40a628:	e7d3      	b.n	40a5d2 <.LVL8>
  40a62a:	2000      	movs	r0, #0
  40a62c:	e7d1      	b.n	40a5d2 <.LVL8>
  40a62e:	2000      	movs	r0, #0
  40a630:	e7cf      	b.n	40a5d2 <.LVL8>

Disassembly of section .text.xQueueGenericReset%123:

0040a634 <xQueueGenericReset>:
{
  40a634:	b538      	push	{r3, r4, r5, lr}

0040a636 <.LCFI5>:
  40a636:	4604      	mov	r4, r0
  40a638:	460d      	mov	r5, r1

0040a63a <.LVL42>:
	taskENTER_CRITICAL();
  40a63a:	f001 f8eb 	bl	40b814 <.LFE6>

0040a63e <.LVL43>:
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  40a63e:	6822      	ldr	r2, [r4, #0]
  40a640:	6c21      	ldr	r1, [r4, #64]	; 0x40
  40a642:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40a644:	fb03 f301 	mul.w	r3, r3, r1
  40a648:	18d0      	adds	r0, r2, r3
  40a64a:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  40a64c:	2000      	movs	r0, #0
  40a64e:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  40a650:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  40a652:	1a5b      	subs	r3, r3, r1
  40a654:	4413      	add	r3, r2
  40a656:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
  40a658:	23ff      	movs	r3, #255	; 0xff
  40a65a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
  40a65e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
  40a662:	b9a5      	cbnz	r5, 40a68e <.LVL46+0x16>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40a664:	6923      	ldr	r3, [r4, #16]
  40a666:	b91b      	cbnz	r3, 40a670 <.LVL44+0x4>
	taskEXIT_CRITICAL();
  40a668:	f001 fac2 	bl	40bbf0 <vPortExitCritical>

0040a66c <.LVL44>:
}
  40a66c:	2001      	movs	r0, #1
  40a66e:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40a670:	f104 0010 	add.w	r0, r4, #16
  40a674:	f7ff feba 	bl	40a3ec <.LFE0>

0040a678 <.LVL46>:
  40a678:	2800      	cmp	r0, #0
  40a67a:	d0f5      	beq.n	40a668 <.LVL43+0x2a>
					queueYIELD_IF_USING_PREEMPTION();
  40a67c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40a680:	4b07      	ldr	r3, [pc, #28]	; (40a6a0 <.LVL48+0x2>)
  40a682:	601a      	str	r2, [r3, #0]
  40a684:	f3bf 8f4f 	dsb	sy
  40a688:	f3bf 8f6f 	isb	sy
  40a68c:	e7ec      	b.n	40a668 <.LVL43+0x2a>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  40a68e:	f104 0010 	add.w	r0, r4, #16
  40a692:	f001 fa81 	bl	40bb98 <.LBE8>

0040a696 <.LVL47>:
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  40a696:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40a69a:	f001 fa7d 	bl	40bb98 <.LBE8>

0040a69e <.LVL48>:
  40a69e:	e7e3      	b.n	40a668 <.LVL43+0x2a>
  40a6a0:	e000ed04 	.word	0xe000ed04

Disassembly of section .text.prvIdleTask%124:

0040a6a4 <prvIdleTask>:
{
  40a6a4:	b580      	push	{r7, lr}

0040a6a6 <.LBB27>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  40a6a6:	4d16      	ldr	r5, [pc, #88]	; (40a700 <.LBE32+0x1c>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  40a6a8:	4f16      	ldr	r7, [pc, #88]	; (40a704 <.LBE32+0x20>)
				--uxCurrentNumberOfTasks;
  40a6aa:	4e17      	ldr	r6, [pc, #92]	; (40a708 <.LBE32+0x24>)

0040a6ac <.LBE27>:
				taskYIELD();
  40a6ac:	f8df 8060 	ldr.w	r8, [pc, #96]	; 40a710 <.LBE32+0x2c>

0040a6b0 <.LBB32>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  40a6b0:	682b      	ldr	r3, [r5, #0]
  40a6b2:	b1bb      	cbz	r3, 40a6e4 <.LBE32>
			taskENTER_CRITICAL();
  40a6b4:	f001 f8ae 	bl	40b814 <.LFE6>

0040a6b8 <.LVL10>:
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  40a6b8:	68fb      	ldr	r3, [r7, #12]
  40a6ba:	68dc      	ldr	r4, [r3, #12]

0040a6bc <.LVL11>:
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  40a6bc:	1d20      	adds	r0, r4, #4
  40a6be:	f001 f80b 	bl	40b6d8 <.LFE1>

0040a6c2 <.LVL12>:
				--uxCurrentNumberOfTasks;
  40a6c2:	6833      	ldr	r3, [r6, #0]
  40a6c4:	3b01      	subs	r3, #1
  40a6c6:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
  40a6c8:	682b      	ldr	r3, [r5, #0]
  40a6ca:	3b01      	subs	r3, #1
  40a6cc:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
  40a6ce:	f001 fa8f 	bl	40bbf0 <vPortExitCritical>

0040a6d2 <.LBB29>:
			vPortFree( pxTCB->pxStack );
  40a6d2:	6b20      	ldr	r0, [r4, #48]	; 0x30
  40a6d4:	f001 fbce 	bl	40be74 <vPortFree>

0040a6d8 <.LVL14>:
			vPortFree( pxTCB );
  40a6d8:	4620      	mov	r0, r4
  40a6da:	f001 fbcb 	bl	40be74 <vPortFree>

0040a6de <.LBE29>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  40a6de:	682b      	ldr	r3, [r5, #0]
  40a6e0:	2b00      	cmp	r3, #0
  40a6e2:	d1e7      	bne.n	40a6b4 <.LBB32+0x4>

0040a6e4 <.LBE32>:
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  40a6e4:	4b09      	ldr	r3, [pc, #36]	; (40a70c <.LBE32+0x28>)
  40a6e6:	681b      	ldr	r3, [r3, #0]
  40a6e8:	2b01      	cmp	r3, #1
  40a6ea:	d9e1      	bls.n	40a6b0 <.LBB32>
				taskYIELD();
  40a6ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40a6f0:	f8c8 3000 	str.w	r3, [r8]
  40a6f4:	f3bf 8f4f 	dsb	sy
  40a6f8:	f3bf 8f6f 	isb	sy
  40a6fc:	e7d8      	b.n	40a6b0 <.LBB32>
  40a6fe:	bf00      	nop
  40a700:	20417d74 	.word	0x20417d74
  40a704:	20417d08 	.word	0x20417d08
  40a708:	20417d70 	.word	0x20417d70
  40a70c:	20417afc 	.word	0x20417afc
  40a710:	e000ed04 	.word	0xe000ed04

Disassembly of section .text%125:

0040a714 <__do_global_dtors_aux>:
  40a714:	b510      	push	{r4, lr}
  40a716:	4c05      	ldr	r4, [pc, #20]	; (40a72c <.LFE35+0x18>)
  40a718:	7823      	ldrb	r3, [r4, #0]
  40a71a:	b933      	cbnz	r3, 40a72a <__do_global_dtors_aux+0x16>
  40a71c:	4b04      	ldr	r3, [pc, #16]	; (40a730 <.LFE35+0x1c>)
  40a71e:	b113      	cbz	r3, 40a726 <__do_global_dtors_aux+0x12>
  40a720:	4804      	ldr	r0, [pc, #16]	; (40a734 <.LFE35+0x20>)
  40a722:	f3af 8000 	nop.w
  40a726:	2301      	movs	r3, #1
  40a728:	7023      	strb	r3, [r4, #0]
  40a72a:	bd10      	pop	{r4, pc}
  40a72c:	20417c80 	.word	0x20417c80
	...

0040a738 <frame_dummy>:
  40a738:	4b0c      	ldr	r3, [pc, #48]	; (40a76c <frame_dummy+0x34>)
  40a73a:	b143      	cbz	r3, 40a74e <frame_dummy+0x16>
  40a73c:	480c      	ldr	r0, [pc, #48]	; (40a770 <frame_dummy+0x38>)
  40a73e:	490d      	ldr	r1, [pc, #52]	; (40a774 <frame_dummy+0x3c>)
  40a740:	b510      	push	{r4, lr}
  40a742:	f3af 8000 	nop.w
  40a746:	480c      	ldr	r0, [pc, #48]	; (40a778 <frame_dummy+0x40>)
  40a748:	6803      	ldr	r3, [r0, #0]
  40a74a:	b923      	cbnz	r3, 40a756 <frame_dummy+0x1e>
  40a74c:	bd10      	pop	{r4, pc}
  40a74e:	480a      	ldr	r0, [pc, #40]	; (40a778 <frame_dummy+0x40>)
  40a750:	6803      	ldr	r3, [r0, #0]
  40a752:	b933      	cbnz	r3, 40a762 <frame_dummy+0x2a>
  40a754:	4770      	bx	lr
  40a756:	4b09      	ldr	r3, [pc, #36]	; (40a77c <frame_dummy+0x44>)
  40a758:	2b00      	cmp	r3, #0
  40a75a:	d0f7      	beq.n	40a74c <frame_dummy+0x14>
  40a75c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40a760:	4718      	bx	r3
  40a762:	4b06      	ldr	r3, [pc, #24]	; (40a77c <frame_dummy+0x44>)
  40a764:	2b00      	cmp	r3, #0
  40a766:	d0f5      	beq.n	40a754 <frame_dummy+0x1c>
  40a768:	4718      	bx	r3
  40a76a:	bf00      	nop
	...
  40a774:	20417c84 	.word	0x20417c84
	...

Disassembly of section .text.vTaskPriorityDisinheritAfterTimeout%126:

0040a780 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
  40a780:	b378      	cbz	r0, 40a7e2 <.LCFI34>
	{
  40a782:	b538      	push	{r3, r4, r5, lr}

0040a784 <.LCFI33>:
  40a784:	4604      	mov	r4, r0
  40a786:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40a788:	4291      	cmp	r1, r2
  40a78a:	bf38      	it	cc
  40a78c:	4611      	movcc	r1, r2

0040a78e <.LVL301>:
			if( pxTCB->uxPriority != uxPriorityToUse )
  40a78e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  40a790:	428a      	cmp	r2, r1
  40a792:	d002      	beq.n	40a79a <.LVL303>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
  40a794:	6c80      	ldr	r0, [r0, #72]	; 0x48

0040a796 <.LVL302>:
  40a796:	2801      	cmp	r0, #1
  40a798:	d000      	beq.n	40a79c <.LVL304>

0040a79a <.LVL303>:
  40a79a:	bd38      	pop	{r3, r4, r5, pc}

0040a79c <.LVL304>:
					pxTCB->uxPriority = uxPriorityToUse;
  40a79c:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  40a79e:	69a0      	ldr	r0, [r4, #24]
  40a7a0:	2800      	cmp	r0, #0
  40a7a2:	db02      	blt.n	40a7aa <.LVL305+0x2>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40a7a4:	f1c1 0105 	rsb	r1, r1, #5

0040a7a8 <.LVL305>:
  40a7a8:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
  40a7aa:	eb02 0282 	add.w	r2, r2, r2, lsl #2

0040a7ae <.LVL306>:
  40a7ae:	490d      	ldr	r1, [pc, #52]	; (40a7e4 <.LCFI34+0x2>)
  40a7b0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  40a7b4:	6961      	ldr	r1, [r4, #20]
  40a7b6:	4291      	cmp	r1, r2
  40a7b8:	d1ef      	bne.n	40a79a <.LVL303>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  40a7ba:	1d25      	adds	r5, r4, #4
  40a7bc:	4628      	mov	r0, r5
  40a7be:	f000 ff8b 	bl	40b6d8 <.LFE1>

0040a7c2 <.LVL307>:
						prvAddTaskToReadyList( pxTCB );
  40a7c2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40a7c4:	4b08      	ldr	r3, [pc, #32]	; (40a7e8 <.LCFI34+0x6>)
  40a7c6:	681b      	ldr	r3, [r3, #0]
  40a7c8:	4298      	cmp	r0, r3
  40a7ca:	d901      	bls.n	40a7d0 <.LVL307+0xe>
  40a7cc:	4b06      	ldr	r3, [pc, #24]	; (40a7e8 <.LCFI34+0x6>)
  40a7ce:	6018      	str	r0, [r3, #0]
  40a7d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40a7d4:	4629      	mov	r1, r5
  40a7d6:	4b03      	ldr	r3, [pc, #12]	; (40a7e4 <.LCFI34+0x2>)
  40a7d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40a7dc:	f001 f8ee 	bl	40b9bc <.LFE142>

0040a7e0 <.LVL308>:
	}
  40a7e0:	e7db      	b.n	40a79a <.LVL303>

0040a7e2 <.LCFI34>:
  40a7e2:	4770      	bx	lr
  40a7e4:	20417afc 	.word	0x20417afc
  40a7e8:	20417d84 	.word	0x20417d84

Disassembly of section .text.vTaskStartScheduler%127:

0040a7ec <vTaskStartScheduler>:
{
  40a7ec:	b500      	push	{lr}

0040a7ee <.LCFI9>:
  40a7ee:	b083      	sub	sp, #12

0040a7f0 <.LCFI10>:
		xReturn = xTaskCreate(	prvIdleTask,
  40a7f0:	4b12      	ldr	r3, [pc, #72]	; (40a83c <.LVL141+0x4>)
  40a7f2:	9301      	str	r3, [sp, #4]
  40a7f4:	2300      	movs	r3, #0
  40a7f6:	9300      	str	r3, [sp, #0]
  40a7f8:	2280      	movs	r2, #128	; 0x80
  40a7fa:	4911      	ldr	r1, [pc, #68]	; (40a840 <.LVL141+0x8>)
  40a7fc:	4811      	ldr	r0, [pc, #68]	; (40a844 <.LVL141+0xc>)
  40a7fe:	f7fd f8a1 	bl	407944 <.LFE165>

0040a802 <.LVL138>:
	if( xReturn == pdPASS )
  40a802:	2801      	cmp	r0, #1
  40a804:	d002      	beq.n	40a80c <.LBB62>

0040a806 <.LVL139>:
}
  40a806:	b003      	add	sp, #12

0040a808 <.LCFI11>:
  40a808:	f85d fb04 	ldr.w	pc, [sp], #4

0040a80c <.LBB62>:

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  40a80c:	f04f 0320 	mov.w	r3, #32
  40a810:	b672      	cpsid	i
  40a812:	f383 8811 	msr	BASEPRI, r3
  40a816:	f3bf 8f6f 	isb	sy
  40a81a:	f3bf 8f4f 	dsb	sy
  40a81e:	b662      	cpsie	i

0040a820 <.LBE62>:
		xNextTaskUnblockTime = portMAX_DELAY;
  40a820:	f04f 32ff 	mov.w	r2, #4294967295
  40a824:	4b08      	ldr	r3, [pc, #32]	; (40a848 <.LVL141+0x10>)
  40a826:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  40a828:	2201      	movs	r2, #1
  40a82a:	4b08      	ldr	r3, [pc, #32]	; (40a84c <.LVL141+0x14>)
  40a82c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  40a82e:	2200      	movs	r2, #0
  40a830:	4b07      	ldr	r3, [pc, #28]	; (40a850 <.LVL141+0x18>)
  40a832:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  40a834:	f000 fb6e 	bl	40af14 <.LFE17>

0040a838 <.LVL141>:
}
  40a838:	e7e5      	b.n	40a806 <.LVL139>
  40a83a:	bf00      	nop
  40a83c:	20417d88 	.word	0x20417d88
  40a840:	004098e8 	.word	0x004098e8
  40a844:	0040a6a5 	.word	0x0040a6a5
  40a848:	20417d8c 	.word	0x20417d8c
  40a84c:	20417d94 	.word	0x20417d94
  40a850:	20417d98 	.word	0x20417d98

Disassembly of section .text.APP_Md5Run_Feed%128:

0040a854 <APP_Md5Run_Feed>:
void APP_Md5Run_Feed(void) {
  40a854:	b570      	push	{r4, r5, r6, lr}

0040a856 <.LCFI3>:
  40a856:	f5ad 6db7 	sub.w	sp, sp, #1464	; 0x5b8

0040a85a <.LCFI4>:
    CRYPT_MD5_Initialize(&md5);
  40a85a:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
  40a85e:	f001 fa29 	bl	40bcb4 <.LBE48>

0040a862 <.LVL6>:
    memset(myBuf, 'a', 1024);
  40a862:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40a866:	2161      	movs	r1, #97	; 0x61
  40a868:	4668      	mov	r0, sp
  40a86a:	f7ff f92f 	bl	409acc <.LFE157>

0040a86e <.LVL7>:
    CRYPT_MD5_DataSizeSet(&md5, 512 * 1024);
  40a86e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  40a872:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
  40a876:	f001 faa7 	bl	40bdc8 <CRYPT_MD5_DataSizeSet>

0040a87a <.LBB6>:
    return SYS_TIME_CounterGet();
  40a87a:	f000 ffb5 	bl	40b7e8 <.LFE5>

0040a87e <.LVL9>:
  40a87e:	4606      	mov	r6, r0

0040a880 <.LVL10>:
  40a880:	f44f 7400 	mov.w	r4, #512	; 0x200

0040a884 <.LBE6>:
        CRYPT_MD5_DataAdd(&md5, myBuf, sizeof (myBuf));
  40a884:	f44f 6580 	mov.w	r5, #1024	; 0x400

0040a888 <.LVL11>:
  40a888:	462a      	mov	r2, r5
  40a88a:	4669      	mov	r1, sp
  40a88c:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
  40a890:	f001 f8d0 	bl	40ba34 <CRYPT_MD5_DataAdd>

0040a894 <.LVL12>:
    for (i = 0; i < 512; i++)
  40a894:	3c01      	subs	r4, #1

0040a896 <.LVL13>:
  40a896:	d1f7      	bne.n	40a888 <.LVL11>
    CRYPT_MD5_Finalize(&md5, appData.md5_feed_result);
  40a898:	4c07      	ldr	r4, [pc, #28]	; (40a8b8 <.LCFI5+0x4>)

0040a89a <.LVL14>:
  40a89a:	f104 01cc 	add.w	r1, r4, #204	; 0xcc
  40a89e:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
  40a8a2:	f001 f8d3 	bl	40ba4c <.LFE156>

0040a8a6 <.LBB8>:
    return SYS_TIME_CounterGet();
  40a8a6:	f000 ff9f 	bl	40b7e8 <.LFE5>

0040a8aa <.LBE8>:
    appData.md5_feed_timing = hashStop - hashStart;
  40a8aa:	1b80      	subs	r0, r0, r6
  40a8ac:	f8c4 00dc 	str.w	r0, [r4, #220]	; 0xdc
}
  40a8b0:	f50d 6db7 	add.w	sp, sp, #1464	; 0x5b8

0040a8b4 <.LCFI5>:
  40a8b4:	bd70      	pop	{r4, r5, r6, pc}
  40a8b6:	bf00      	nop
  40a8b8:	204176b8 	.word	0x204176b8

Disassembly of section .text.pvPortMalloc%129:

0040a8bc <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  40a8bc:	b538      	push	{r3, r4, r5, lr}

0040a8be <.LCFI0>:
  40a8be:	4604      	mov	r4, r0

0040a8c0 <.LVL1>:
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  40a8c0:	f010 0f07 	tst.w	r0, #7
  40a8c4:	d002      	beq.n	40a8cc <.LVL2>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  40a8c6:	f020 0407 	bic.w	r4, r0, #7
  40a8ca:	3408      	adds	r4, #8

0040a8cc <.LVL2>:
		}
	}
	#endif

	vTaskSuspendAll();
  40a8cc:	f001 f9fc 	bl	40bcc8 <vTaskSuspendAll>

0040a8d0 <.LVL3>:
	{
		if( pucAlignedHeap == NULL )
  40a8d0:	4b10      	ldr	r3, [pc, #64]	; (40a914 <.LBE2+0x2>)
  40a8d2:	681b      	ldr	r3, [r3, #0]
  40a8d4:	b193      	cbz	r3, 40a8fc <.LVL8>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  40a8d6:	4b10      	ldr	r3, [pc, #64]	; (40a918 <.LBE2+0x6>)
  40a8d8:	681b      	ldr	r3, [r3, #0]
  40a8da:	441c      	add	r4, r3

0040a8dc <.LVL4>:
  40a8dc:	42a3      	cmp	r3, r4
  40a8de:	d213      	bcs.n	40a908 <.LVL9>
  40a8e0:	f649 72f7 	movw	r2, #40951	; 0x9ff7
  40a8e4:	4294      	cmp	r4, r2
  40a8e6:	d80f      	bhi.n	40a908 <.LVL9>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  40a8e8:	4a0a      	ldr	r2, [pc, #40]	; (40a914 <.LBE2+0x2>)
  40a8ea:	6815      	ldr	r5, [r2, #0]
  40a8ec:	441d      	add	r5, r3

0040a8ee <.LVL5>:
			xNextFreeByte += xWantedSize;
  40a8ee:	4b0a      	ldr	r3, [pc, #40]	; (40a918 <.LBE2+0x6>)
  40a8f0:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  40a8f2:	f7fe fa35 	bl	408d60 <.LBE840>

0040a8f6 <.LVL6>:

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  40a8f6:	b14d      	cbz	r5, 40a90c <.LBB2>

0040a8f8 <.LVL7>:
		}
	}
	#endif

	return pvReturn;
}
  40a8f8:	4628      	mov	r0, r5
  40a8fa:	bd38      	pop	{r3, r4, r5, pc}

0040a8fc <.LVL8>:
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  40a8fc:	4b07      	ldr	r3, [pc, #28]	; (40a91c <.LBE2+0xa>)
  40a8fe:	f023 0307 	bic.w	r3, r3, #7
  40a902:	4a04      	ldr	r2, [pc, #16]	; (40a914 <.LBE2+0x2>)
  40a904:	6013      	str	r3, [r2, #0]
  40a906:	e7e6      	b.n	40a8d6 <.LVL3+0x6>

0040a908 <.LVL9>:
	( void ) xTaskResumeAll();
  40a908:	f7fe fa2a 	bl	408d60 <.LBE840>

0040a90c <.LBB2>:
			vApplicationMallocFailedHook();
  40a90c:	f001 f939 	bl	40bb82 <.LBE6>

0040a910 <.LVL11>:
  40a910:	2500      	movs	r5, #0

0040a912 <.LBE2>:
	return pvReturn;
  40a912:	e7f1      	b.n	40a8f8 <.LVL7>
  40a914:	20417da0 	.word	0x20417da0
  40a918:	20417da4 	.word	0x20417da4
  40a91c:	2040cc90 	.word	0x2040cc90

Disassembly of section .text.PendSV_Handler%130:

0040a920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
  40a920:	f3ef 8009 	mrs	r0, PSP
  40a924:	f3bf 8f6f 	isb	sy
  40a928:	4b15      	ldr	r3, [pc, #84]	; (40a980 <pxCurrentTCBConst>)
  40a92a:	681a      	ldr	r2, [r3, #0]
  40a92c:	f01e 0f10 	tst.w	lr, #16
  40a930:	bf08      	it	eq
  40a932:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  40a936:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a93a:	6010      	str	r0, [r2, #0]
  40a93c:	e92d 0009 	stmdb	sp!, {r0, r3}
  40a940:	f04f 0020 	mov.w	r0, #32
  40a944:	b672      	cpsid	i
  40a946:	f380 8811 	msr	BASEPRI, r0
  40a94a:	f3bf 8f4f 	dsb	sy
  40a94e:	f3bf 8f6f 	isb	sy
  40a952:	b662      	cpsie	i
  40a954:	f7fe fd56 	bl	409404 <.LFE19>
  40a958:	f04f 0000 	mov.w	r0, #0
  40a95c:	f380 8811 	msr	BASEPRI, r0
  40a960:	bc09      	pop	{r0, r3}
  40a962:	6819      	ldr	r1, [r3, #0]
  40a964:	6808      	ldr	r0, [r1, #0]
  40a966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a96a:	f01e 0f10 	tst.w	lr, #16
  40a96e:	bf08      	it	eq
  40a970:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  40a974:	f380 8809 	msr	PSP, r0
  40a978:	f3bf 8f6f 	isb	sy
  40a97c:	4770      	bx	lr
  40a97e:	bf00      	nop

0040a980 <pxCurrentTCBConst>:
  40a980:	20417d64 	.word	0x20417d64

Disassembly of section .text.strncpy%131:

0040a984 <strncpy>:
  40a984:	ea40 0301 	orr.w	r3, r0, r1
  40a988:	f013 0f03 	tst.w	r3, #3
  40a98c:	b470      	push	{r4, r5, r6}

0040a98e <.LCFI0>:
  40a98e:	4603      	mov	r3, r0
  40a990:	d024      	beq.n	40a9dc <.LVL16>

0040a992 <.LVL1>:
  40a992:	b1a2      	cbz	r2, 40a9be <.LVL11+0xa>
  40a994:	780c      	ldrb	r4, [r1, #0]
  40a996:	701c      	strb	r4, [r3, #0]
  40a998:	3a01      	subs	r2, #1

0040a99a <.LVL3>:
  40a99a:	3301      	adds	r3, #1
  40a99c:	3101      	adds	r1, #1
  40a99e:	b13c      	cbz	r4, 40a9b0 <.LVL10>

0040a9a0 <.LVL6>:
  40a9a0:	b16a      	cbz	r2, 40a9be <.LVL11+0xa>
  40a9a2:	f811 4b01 	ldrb.w	r4, [r1], #1

0040a9a6 <.LVL7>:
  40a9a6:	f803 4b01 	strb.w	r4, [r3], #1

0040a9aa <.LVL8>:
  40a9aa:	3a01      	subs	r2, #1

0040a9ac <.LVL9>:
  40a9ac:	2c00      	cmp	r4, #0
  40a9ae:	d1f7      	bne.n	40a9a0 <.LVL6>

0040a9b0 <.LVL10>:
  40a9b0:	b12a      	cbz	r2, 40a9be <.LVL11+0xa>
  40a9b2:	441a      	add	r2, r3

0040a9b4 <.LVL11>:
  40a9b4:	2100      	movs	r1, #0
  40a9b6:	f803 1b01 	strb.w	r1, [r3], #1
  40a9ba:	429a      	cmp	r2, r3
  40a9bc:	d1fb      	bne.n	40a9b6 <.LVL11+0x2>
  40a9be:	bc70      	pop	{r4, r5, r6}

0040a9c0 <.LCFI1>:
  40a9c0:	4770      	bx	lr

0040a9c2 <.LCFI2>:
  40a9c2:	460e      	mov	r6, r1

0040a9c4 <.LVL14>:
  40a9c4:	f851 5b04 	ldr.w	r5, [r1], #4
  40a9c8:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
  40a9cc:	ea24 0405 	bic.w	r4, r4, r5
  40a9d0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  40a9d4:	d105      	bne.n	40a9e2 <.LVL17>
  40a9d6:	f843 5b04 	str.w	r5, [r3], #4

0040a9da <.LVL15>:
  40a9da:	3a04      	subs	r2, #4

0040a9dc <.LVL16>:
  40a9dc:	2a03      	cmp	r2, #3
  40a9de:	d8f0      	bhi.n	40a9c2 <.LCFI2>
  40a9e0:	e7d7      	b.n	40a992 <.LVL1>

0040a9e2 <.LVL17>:
  40a9e2:	4631      	mov	r1, r6
  40a9e4:	e7d6      	b.n	40a994 <.LVL1+0x2>

0040a9e6 <.LFE0>:
  40a9e6:	bf00      	nop

Disassembly of section .text.SYS_Initialize%132:

0040a9e8 <SYS_Initialize>:

  Remarks:
 */

void SYS_Initialize ( void* data )
{
  40a9e8:	b510      	push	{r4, lr}

0040a9ea <.LCFI0>:
    CLK_Initialize();
  40a9ea:	f7ff fd3b 	bl	40a464 <.LFE29>

0040a9ee <.LVL1>:
	PIO_Initialize();
  40a9ee:	f7ff fa75 	bl	409edc <.LFE157>

0040a9f2 <.LVL2>:

    NVIC_Initialize();
  40a9f2:	f000 fb85 	bl	40b100 <NVIC_Initialize>

0040a9f6 <.LVL3>:
	RSWDT_REGS->RSWDT_MR = RSWDT_MR_WDDIS_Msk;	// Disable RSWDT 
  40a9f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40a9fa:	4a0e      	ldr	r2, [pc, #56]	; (40aa34 <.LVL10+0x2>)
  40a9fc:	6053      	str	r3, [r2, #4]

	WDT_REGS->WDT_MR = WDT_MR_WDDIS_Msk; 		// Disable WDT 
  40a9fe:	3ab0      	subs	r2, #176	; 0xb0
  40aa00:	6053      	str	r3, [r2, #4]

	BSP_Initialize();
  40aa02:	f000 ffcf 	bl	40b9a4 <.LFE18>

0040aa06 <.LVL4>:
 
    TC0_CH0_TimerInitialize(); 
  40aa06:	f000 fea3 	bl	40b750 <.LFE14>

0040aa0a <.LVL5>:
     
    
	USART1_Initialize();
  40aa0a:	f000 fc6f 	bl	40b2ec <.LFE177>

0040aa0e <.LVL6>:



    sysObj.sysConsole0 = SYS_CONSOLE_Initialize(SYS_CONSOLE_INDEX_0, (SYS_MODULE_INIT *)&consUsartInit0);
  40aa0e:	490a      	ldr	r1, [pc, #40]	; (40aa38 <.LVL10+0x6>)
  40aa10:	2000      	movs	r0, #0
  40aa12:	f000 faa3 	bl	40af5c <.LFE8>

0040aa16 <.LVL7>:
  40aa16:	4c09      	ldr	r4, [pc, #36]	; (40aa3c <.LVL10+0xa>)
  40aa18:	6020      	str	r0, [r4, #0]
    sysObj.sysDebug = SYS_DEBUG_Initialize(SYS_DEBUG_INDEX_0, (SYS_MODULE_INIT*)&debugInit);
  40aa1a:	4909      	ldr	r1, [pc, #36]	; (40aa40 <.LVL10+0xe>)
  40aa1c:	2000      	movs	r0, #0
  40aa1e:	f000 ff2f 	bl	40b880 <.LFE0>

0040aa22 <.LVL8>:
  40aa22:	6060      	str	r0, [r4, #4]

    sysObj.sysTime = SYS_TIME_Initialize(SYS_TIME_INDEX_0, (SYS_MODULE_INIT *)&sysTimeInitData);
  40aa24:	4907      	ldr	r1, [pc, #28]	; (40aa44 <.LVL10+0x12>)
  40aa26:	2000      	movs	r0, #0
  40aa28:	f7fe fe62 	bl	4096f0 <.LFE27>

0040aa2c <.LVL9>:
  40aa2c:	60a0      	str	r0, [r4, #8]


    APP_Initialize();
  40aa2e:	f001 f9bf 	bl	40bdb0 <.LFE34>

0040aa32 <.LVL10>:
  40aa32:	bd10      	pop	{r4, pc}
  40aa34:	400e1900 	.word	0x400e1900
  40aa38:	20417d50 	.word	0x20417d50
  40aa3c:	20400000 	.word	0x20400000
  40aa40:	20417d60 	.word	0x20417d60
  40aa44:	20417d58 	.word	0x20417d58

Disassembly of section .text.wc_InitSha%133:

0040aa48 <wc_InitSha>:
{
  40aa48:	b430      	push	{r4, r5}

0040aa4a <.LCFI2>:
  40aa4a:	4603      	mov	r3, r0
    if ((PMC_REGS->PMC_PCSR1 & PmcBit) != PmcBit)
  40aa4c:	4a12      	ldr	r2, [pc, #72]	; (40aa98 <.LCFI3+0x4>)
  40aa4e:	f8d2 2108 	ldr.w	r2, [r2, #264]	; 0x108
  40aa52:	f012 0f01 	tst.w	r2, #1
  40aa56:	d103      	bne.n	40aa60 <.LCFI2+0x16>
        PMC_REGS->PMC_PCER1 = PmcBit;
  40aa58:	2101      	movs	r1, #1
  40aa5a:	4a0f      	ldr	r2, [pc, #60]	; (40aa98 <.LCFI3+0x4>)
  40aa5c:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    sha->icm_descriptor.cfg.reg = 0x0;
  40aa60:	2000      	movs	r0, #0

0040aa62 <.LVL20>:
  40aa62:	6058      	str	r0, [r3, #4]
    sha->icm_descriptor.cfg.bit.is_end_mon = 1;
  40aa64:	2204      	movs	r2, #4
  40aa66:	711a      	strb	r2, [r3, #4]
    sha->digest[0] = 0x01234567;
  40aa68:	4a0c      	ldr	r2, [pc, #48]	; (40aa9c <.LCFI3+0x8>)
  40aa6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    sha->digest[1] = 0x89ABCDEF;
  40aa6e:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
  40aa72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    sha->digest[2] = 0xFEDCBA98;
  40aa76:	4a0a      	ldr	r2, [pc, #40]	; (40aaa0 <.LCFI3+0xc>)
  40aa78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    sha->digest[3] = 0x76543210;
  40aa7c:	f1a2 3288 	sub.w	r2, r2, #2290649224	; 0x88888888
  40aa80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    sha->digest[4] = 0xF0E1D2C3;
  40aa84:	4a07      	ldr	r2, [pc, #28]	; (40aaa4 <.LCFI3+0x10>)
  40aa86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    sha->total_len = 0;
  40aa8a:	2400      	movs	r4, #0
  40aa8c:	2500      	movs	r5, #0
  40aa8e:	e9c3 4526 	strd	r4, r5, [r3, #152]	; 0x98
}
  40aa92:	bc30      	pop	{r4, r5}

0040aa94 <.LCFI3>:
  40aa94:	4770      	bx	lr
  40aa96:	bf00      	nop
  40aa98:	400e0600 	.word	0x400e0600
  40aa9c:	01234567 	.word	0x01234567
  40aaa0:	fedcba98 	.word	0xfedcba98
  40aaa4:	f0e1d2c3 	.word	0xf0e1d2c3

Disassembly of section .text.memcmp%134:

0040aaa8 <memcmp>:
  40aaa8:	2a03      	cmp	r2, #3
  40aaaa:	b470      	push	{r4, r5, r6}

0040aaac <.LCFI0>:
  40aaac:	d922      	bls.n	40aaf4 <.LVL11>
  40aaae:	ea40 0301 	orr.w	r3, r0, r1
  40aab2:	079b      	lsls	r3, r3, #30
  40aab4:	d011      	beq.n	40aada <.LCFI2>

0040aab6 <.LVL1>:
  40aab6:	7803      	ldrb	r3, [r0, #0]
  40aab8:	780c      	ldrb	r4, [r1, #0]
  40aaba:	42a3      	cmp	r3, r4
  40aabc:	d11d      	bne.n	40aafa <.LVL11+0x6>
  40aabe:	440a      	add	r2, r1
  40aac0:	3101      	adds	r1, #1
  40aac2:	e005      	b.n	40aad0 <.LVL4>

0040aac4 <.LVL2>:
  40aac4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  40aac8:	f811 4b01 	ldrb.w	r4, [r1], #1

0040aacc <.LVL3>:
  40aacc:	42a3      	cmp	r3, r4
  40aace:	d114      	bne.n	40aafa <.LVL11+0x6>

0040aad0 <.LVL4>:
  40aad0:	4291      	cmp	r1, r2
  40aad2:	d1f7      	bne.n	40aac4 <.LVL2>

0040aad4 <.LVL5>:
  40aad4:	2000      	movs	r0, #0
  40aad6:	bc70      	pop	{r4, r5, r6}

0040aad8 <.LCFI1>:
  40aad8:	4770      	bx	lr

0040aada <.LCFI2>:
  40aada:	680d      	ldr	r5, [r1, #0]
  40aadc:	6806      	ldr	r6, [r0, #0]
  40aade:	42ae      	cmp	r6, r5
  40aae0:	460c      	mov	r4, r1
  40aae2:	4603      	mov	r3, r0

0040aae4 <.LVL7>:
  40aae4:	f101 0104 	add.w	r1, r1, #4

0040aae8 <.LVL8>:
  40aae8:	f100 0004 	add.w	r0, r0, #4

0040aaec <.LVL9>:
  40aaec:	d108      	bne.n	40ab00 <.LCFI4>
  40aaee:	3a04      	subs	r2, #4

0040aaf0 <.LVL10>:
  40aaf0:	2a03      	cmp	r2, #3
  40aaf2:	d8f2      	bhi.n	40aada <.LCFI2>

0040aaf4 <.LVL11>:
  40aaf4:	2a00      	cmp	r2, #0
  40aaf6:	d1de      	bne.n	40aab6 <.LVL1>
  40aaf8:	e7ec      	b.n	40aad4 <.LVL5>
  40aafa:	1b18      	subs	r0, r3, r4
  40aafc:	bc70      	pop	{r4, r5, r6}

0040aafe <.LCFI3>:
  40aafe:	4770      	bx	lr

0040ab00 <.LCFI4>:
  40ab00:	4621      	mov	r1, r4

0040ab02 <.LVL13>:
  40ab02:	4618      	mov	r0, r3

0040ab04 <.LVL14>:
  40ab04:	e7d7      	b.n	40aab6 <.LVL1>

0040ab06 <.LFE0>:
  40ab06:	bf00      	nop

Disassembly of section .text.__lo0bits%135:

0040ab08 <__lo0bits>:
  40ab08:	6803      	ldr	r3, [r0, #0]

0040ab0a <.LVL80>:
  40ab0a:	f013 0207 	ands.w	r2, r3, #7
  40ab0e:	4601      	mov	r1, r0
  40ab10:	d007      	beq.n	40ab22 <.LVL84>
  40ab12:	07da      	lsls	r2, r3, #31
  40ab14:	d421      	bmi.n	40ab5a <.LVL100>
  40ab16:	0798      	lsls	r0, r3, #30

0040ab18 <.LVL81>:
  40ab18:	d421      	bmi.n	40ab5e <.LVL101+0x2>
  40ab1a:	089b      	lsrs	r3, r3, #2

0040ab1c <.LVL82>:
  40ab1c:	600b      	str	r3, [r1, #0]

0040ab1e <.LVL83>:
  40ab1e:	2002      	movs	r0, #2
  40ab20:	4770      	bx	lr

0040ab22 <.LVL84>:
  40ab22:	b298      	uxth	r0, r3

0040ab24 <.LVL85>:
  40ab24:	b198      	cbz	r0, 40ab4e <.LVL96>
  40ab26:	4610      	mov	r0, r2

0040ab28 <.LVL86>:
  40ab28:	f013 0fff 	tst.w	r3, #255	; 0xff
  40ab2c:	bf04      	itt	eq
  40ab2e:	0a1b      	lsreq	r3, r3, #8

0040ab30 <.LVL87>:
  40ab30:	3008      	addeq	r0, #8

0040ab32 <.LVL88>:
  40ab32:	071a      	lsls	r2, r3, #28
  40ab34:	bf04      	itt	eq
  40ab36:	091b      	lsreq	r3, r3, #4

0040ab38 <.LVL89>:
  40ab38:	3004      	addeq	r0, #4

0040ab3a <.LVL90>:
  40ab3a:	079a      	lsls	r2, r3, #30
  40ab3c:	bf04      	itt	eq
  40ab3e:	089b      	lsreq	r3, r3, #2

0040ab40 <.LVL91>:
  40ab40:	3002      	addeq	r0, #2

0040ab42 <.LVL92>:
  40ab42:	07da      	lsls	r2, r3, #31
  40ab44:	d407      	bmi.n	40ab56 <.LVL99>

0040ab46 <.LVL93>:
  40ab46:	085b      	lsrs	r3, r3, #1

0040ab48 <.LVL94>:
  40ab48:	d104      	bne.n	40ab54 <.LVL98>
  40ab4a:	2020      	movs	r0, #32

0040ab4c <.LVL95>:
  40ab4c:	4770      	bx	lr

0040ab4e <.LVL96>:
  40ab4e:	0c1b      	lsrs	r3, r3, #16
  40ab50:	2010      	movs	r0, #16
  40ab52:	e7e9      	b.n	40ab28 <.LVL86>

0040ab54 <.LVL98>:
  40ab54:	3001      	adds	r0, #1

0040ab56 <.LVL99>:
  40ab56:	600b      	str	r3, [r1, #0]
  40ab58:	4770      	bx	lr

0040ab5a <.LVL100>:
  40ab5a:	2000      	movs	r0, #0

0040ab5c <.LVL101>:
  40ab5c:	4770      	bx	lr
  40ab5e:	085b      	lsrs	r3, r3, #1

0040ab60 <.LVL102>:
  40ab60:	600b      	str	r3, [r1, #0]

0040ab62 <.LVL103>:
  40ab62:	2001      	movs	r0, #1
  40ab64:	4770      	bx	lr

0040ab66 <.LFE22>:
  40ab66:	bf00      	nop

Disassembly of section .text._calloc_r%136:

0040ab68 <_calloc_r>:
  40ab68:	b510      	push	{r4, lr}

0040ab6a <.LCFI0>:
  40ab6a:	fb02 f101 	mul.w	r1, r2, r1

0040ab6e <.LVL1>:
  40ab6e:	f7fb fc39 	bl	4063e4 <.LFE14>

0040ab72 <.LVL2>:
  40ab72:	4604      	mov	r4, r0
  40ab74:	b1d8      	cbz	r0, 40abae <.LBE2>

0040ab76 <.LVL3>:
  40ab76:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40ab7a:	f022 0203 	bic.w	r2, r2, #3

0040ab7e <.LBB2>:
  40ab7e:	3a04      	subs	r2, #4

0040ab80 <.LVL5>:
  40ab80:	2a24      	cmp	r2, #36	; 0x24
  40ab82:	d818      	bhi.n	40abb6 <.LBE4>

0040ab84 <.LBB3>:
  40ab84:	2a13      	cmp	r2, #19
  40ab86:	d914      	bls.n	40abb2 <.LBB4>

0040ab88 <.LVL7>:
  40ab88:	2300      	movs	r3, #0
  40ab8a:	2a1b      	cmp	r2, #27
  40ab8c:	6003      	str	r3, [r0, #0]

0040ab8e <.LVL8>:
  40ab8e:	6043      	str	r3, [r0, #4]
  40ab90:	d916      	bls.n	40abc0 <.LBB5>

0040ab92 <.LVL9>:
  40ab92:	2a24      	cmp	r2, #36	; 0x24
  40ab94:	6083      	str	r3, [r0, #8]

0040ab96 <.LVL10>:
  40ab96:	60c3      	str	r3, [r0, #12]
  40ab98:	bf11      	iteee	ne
  40ab9a:	f100 0210 	addne.w	r2, r0, #16

0040ab9e <.LVL11>:
  40ab9e:	6103      	streq	r3, [r0, #16]
  40aba0:	6143      	streq	r3, [r0, #20]
  40aba2:	f100 0218 	addeq.w	r2, r0, #24

0040aba6 <.LVL12>:
  40aba6:	2300      	movs	r3, #0
  40aba8:	6013      	str	r3, [r2, #0]

0040abaa <.LVL13>:
  40abaa:	6053      	str	r3, [r2, #4]
  40abac:	6093      	str	r3, [r2, #8]

0040abae <.LBE2>:
  40abae:	4620      	mov	r0, r4

0040abb0 <.LVL15>:
  40abb0:	bd10      	pop	{r4, pc}

0040abb2 <.LBB4>:
  40abb2:	4602      	mov	r2, r0

0040abb4 <.LVL17>:
  40abb4:	e7f7      	b.n	40aba6 <.LVL12>

0040abb6 <.LBE4>:
  40abb6:	2100      	movs	r1, #0
  40abb8:	f7fe ff88 	bl	409acc <.LFE157>

0040abbc <.LBE6>:
  40abbc:	4620      	mov	r0, r4
  40abbe:	bd10      	pop	{r4, pc}

0040abc0 <.LBB5>:
  40abc0:	f100 0208 	add.w	r2, r0, #8

0040abc4 <.LVL21>:
  40abc4:	e7ef      	b.n	40aba6 <.LVL12>

0040abc6 <.LBE5>:
  40abc6:	bf00      	nop

Disassembly of section .text.APP_Sha384Run_Feed%137:

0040abc8 <APP_Sha384Run_Feed>:
void APP_Sha384Run_Feed(void) {
  40abc8:	b570      	push	{r4, r5, r6, lr}

0040abca <.LCFI12>:
  40abca:	f5ad 6da0 	sub.w	sp, sp, #1280	; 0x500

0040abce <.LCFI13>:
    CRYPT_SHA384_Initialize(&sha384);
  40abce:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
  40abd2:	f001 f891 	bl	40bcf8 <.LFE162>

0040abd6 <.LVL39>:
    memset(myBuf, 'a', 1024);
  40abd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40abda:	2161      	movs	r1, #97	; 0x61
  40abdc:	4668      	mov	r0, sp
  40abde:	f7fe ff75 	bl	409acc <.LFE157>

0040abe2 <.LBB30>:
    return SYS_TIME_CounterGet();
  40abe2:	f000 fe01 	bl	40b7e8 <.LFE5>

0040abe6 <.LVL41>:
  40abe6:	4606      	mov	r6, r0

0040abe8 <.LVL42>:
  40abe8:	f44f 7400 	mov.w	r4, #512	; 0x200

0040abec <.LBE30>:
        CRYPT_SHA384_DataAdd(&sha384, myBuf, sizeof (myBuf));
  40abec:	f44f 6580 	mov.w	r5, #1024	; 0x400

0040abf0 <.LVL43>:
  40abf0:	462a      	mov	r2, r5
  40abf2:	4669      	mov	r1, sp
  40abf4:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
  40abf8:	f000 ff64 	bl	40bac4 <.LFE165>

0040abfc <.LVL44>:
    for (i = 0; i < 512; i++)
  40abfc:	3c01      	subs	r4, #1

0040abfe <.LVL45>:
  40abfe:	d1f7      	bne.n	40abf0 <.LVL43>
    CRYPT_SHA384_Finalize(&sha384, appData.sha384_feed_result);
  40ac00:	4c07      	ldr	r4, [pc, #28]	; (40ac20 <.LCFI14+0x4>)

0040ac02 <.LVL46>:
  40ac02:	f504 718e 	add.w	r1, r4, #284	; 0x11c
  40ac06:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
  40ac0a:	f000 ff67 	bl	40badc <.LFE167>

0040ac0e <.LBB32>:
    return SYS_TIME_CounterGet();
  40ac0e:	f000 fdeb 	bl	40b7e8 <.LFE5>

0040ac12 <.LBE32>:
    appData.sha384_feed_timing = hashStop - hashStart;
  40ac12:	1b80      	subs	r0, r0, r6
  40ac14:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
}
  40ac18:	f50d 6da0 	add.w	sp, sp, #1280	; 0x500

0040ac1c <.LCFI14>:
  40ac1c:	bd70      	pop	{r4, r5, r6, pc}
  40ac1e:	bf00      	nop
  40ac20:	204176b8 	.word	0x204176b8

Disassembly of section .text.APP_Sha512Run_Feed%138:

0040ac24 <APP_Sha512Run_Feed>:
void APP_Sha512Run_Feed(void) {
  40ac24:	b570      	push	{r4, r5, r6, lr}

0040ac26 <.LCFI15>:
  40ac26:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520

0040ac2a <.LCFI16>:
    CRYPT_SHA512_Initialize(&sha512);
  40ac2a:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
  40ac2e:	f001 f86b 	bl	40bd08 <.LFE166>

0040ac32 <.LVL49>:
    memset(myBuf, 'a', 1024);
  40ac32:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40ac36:	2161      	movs	r1, #97	; 0x61
  40ac38:	4668      	mov	r0, sp
  40ac3a:	f7fe ff47 	bl	409acc <.LFE157>

0040ac3e <.LBB38>:
    return SYS_TIME_CounterGet();
  40ac3e:	f000 fdd3 	bl	40b7e8 <.LFE5>

0040ac42 <.LVL51>:
  40ac42:	4606      	mov	r6, r0

0040ac44 <.LVL52>:
  40ac44:	f44f 7400 	mov.w	r4, #512	; 0x200

0040ac48 <.LBE38>:
        CRYPT_SHA512_DataAdd(&sha512, myBuf, sizeof (myBuf));
  40ac48:	f44f 6580 	mov.w	r5, #1024	; 0x400

0040ac4c <.LVL53>:
  40ac4c:	462a      	mov	r2, r5
  40ac4e:	4669      	mov	r1, sp
  40ac50:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
  40ac54:	f000 ff4e 	bl	40baf4 <.LFE168>

0040ac58 <.LVL54>:
    for (i = 0; i < 512; i++)
  40ac58:	3c01      	subs	r4, #1

0040ac5a <.LVL55>:
  40ac5a:	d1f7      	bne.n	40ac4c <.LVL53>
    CRYPT_SHA512_Finalize(&sha512, appData.sha512_feed_result);
  40ac5c:	4c07      	ldr	r4, [pc, #28]	; (40ac7c <.LCFI17+0x4>)

0040ac5e <.LVL56>:
  40ac5e:	f504 71a8 	add.w	r1, r4, #336	; 0x150
  40ac62:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
  40ac66:	f000 ff51 	bl	40bb0c <.LFE170>

0040ac6a <.LBB40>:
    return SYS_TIME_CounterGet();
  40ac6a:	f000 fdbd 	bl	40b7e8 <.LFE5>

0040ac6e <.LBE40>:
    appData.sha512_feed_timing = hashStop - hashStart;
  40ac6e:	1b80      	subs	r0, r0, r6
  40ac70:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
}
  40ac74:	f50d 6da4 	add.w	sp, sp, #1312	; 0x520

0040ac78 <.LCFI17>:
  40ac78:	bd70      	pop	{r4, r5, r6, pc}
  40ac7a:	bf00      	nop
  40ac7c:	204176b8 	.word	0x204176b8

Disassembly of section .text.Console_UART_Read%139:

0040ac80 <Console_UART_Read>:
    while ((readQueue.numElem < readQueue.elemArrSz) && (rdBytes < count))
  40ac80:	4b15      	ldr	r3, [pc, #84]	; (40acd8 <.LCFI8+0x4>)
  40ac82:	6898      	ldr	r0, [r3, #8]

0040ac84 <.LVL47>:
  40ac84:	691b      	ldr	r3, [r3, #16]
  40ac86:	4298      	cmp	r0, r3
  40ac88:	d222      	bcs.n	40acd0 <.LBE13>
  40ac8a:	b30a      	cbz	r2, 40acd0 <.LBE13>
{
  40ac8c:	b5f0      	push	{r4, r5, r6, r7, lr}

0040ac8e <.LCFI6>:
    while ((readQueue.numElem < readQueue.elemArrSz) && (rdBytes < count))
  40ac8e:	2000      	movs	r0, #0

0040ac90 <.LBB10>:
    q->qPkts[q->nextPos] = pkt;
  40ac90:	4b11      	ldr	r3, [pc, #68]	; (40acd8 <.LCFI8+0x4>)
  40ac92:	2701      	movs	r7, #1
    (q->nextPos < (q->elemArrSz - 1)) ? q->nextPos++ : (q->nextPos = 0);
  40ac94:	4686      	mov	lr, r0
  40ac96:	e009      	b.n	40acac <.LBB13>

0040ac98 <.LVL48>:
  40ac98:	3401      	adds	r4, #1
  40ac9a:	605c      	str	r4, [r3, #4]
    q->numElem++;
  40ac9c:	689c      	ldr	r4, [r3, #8]
  40ac9e:	3401      	adds	r4, #1
  40aca0:	609c      	str	r4, [r3, #8]

0040aca2 <.LBE10>:
        rdBytes++;
  40aca2:	3001      	adds	r0, #1
    while ((readQueue.numElem < readQueue.elemArrSz) && (rdBytes < count))
  40aca4:	4282      	cmp	r2, r0
  40aca6:	d915      	bls.n	40acd4 <.LCFI8>
  40aca8:	42a5      	cmp	r5, r4
  40acaa:	d910      	bls.n	40acce <.LVL53>

0040acac <.LBB13>:
    q->qPkts[q->nextPos] = pkt;
  40acac:	685d      	ldr	r5, [r3, #4]
  40acae:	68dc      	ldr	r4, [r3, #12]
  40acb0:	eb04 06c5 	add.w	r6, r4, r5, lsl #3
  40acb4:	eb01 0c00 	add.w	ip, r1, r0

0040acb8 <.LVL52>:
  40acb8:	f844 c035 	str.w	ip, [r4, r5, lsl #3]
  40acbc:	6077      	str	r7, [r6, #4]
    (q->nextPos < (q->elemArrSz - 1)) ? q->nextPos++ : (q->nextPos = 0);
  40acbe:	685c      	ldr	r4, [r3, #4]
  40acc0:	691d      	ldr	r5, [r3, #16]
  40acc2:	1e6e      	subs	r6, r5, #1
  40acc4:	42b4      	cmp	r4, r6
  40acc6:	d3e7      	bcc.n	40ac98 <.LVL48>
  40acc8:	f8c3 e004 	str.w	lr, [r3, #4]
  40accc:	e7e6      	b.n	40ac9c <.LVL48+0x4>

0040acce <.LVL53>:
  40acce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0040acd0 <.LBE13>:
    size_t rdBytes = 0;
  40acd0:	2000      	movs	r0, #0
  40acd2:	4770      	bx	lr

0040acd4 <.LCFI8>:
}
  40acd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40acd6:	bf00      	nop
  40acd8:	20417d1c 	.word	0x20417d1c

Disassembly of section .text.xTaskCheckForTimeOut%140:

0040acdc <xTaskCheckForTimeOut>:
{
  40acdc:	b570      	push	{r4, r5, r6, lr}

0040acde <.LCFI27>:
  40acde:	4604      	mov	r4, r0
  40ace0:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  40ace2:	f000 fd97 	bl	40b814 <.LFE6>

0040ace6 <.LBB80>:
		const TickType_t xConstTickCount = xTickCount;
  40ace6:	4b11      	ldr	r3, [pc, #68]	; (40ad2c <.LVL280+0x2>)
  40ace8:	681b      	ldr	r3, [r3, #0]

0040acea <.LVL269>:
			if( *pxTicksToWait == portMAX_DELAY )
  40acea:	682a      	ldr	r2, [r5, #0]
  40acec:	f1b2 3fff 	cmp.w	r2, #4294967295
  40acf0:	d01a      	beq.n	40ad28 <.LVL279>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  40acf2:	6861      	ldr	r1, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  40acf4:	480e      	ldr	r0, [pc, #56]	; (40ad30 <.LVL280+0x6>)
  40acf6:	6800      	ldr	r0, [r0, #0]
  40acf8:	6826      	ldr	r6, [r4, #0]
  40acfa:	4286      	cmp	r6, r0
  40acfc:	d003      	beq.n	40ad06 <.LVL271>
  40acfe:	428b      	cmp	r3, r1
  40ad00:	d301      	bcc.n	40ad06 <.LVL271>
			xReturn = pdTRUE;
  40ad02:	2401      	movs	r4, #1

0040ad04 <.LVL270>:
  40ad04:	e005      	b.n	40ad12 <.LBE80>

0040ad06 <.LVL271>:
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  40ad06:	1a5b      	subs	r3, r3, r1

0040ad08 <.LVL272>:
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
  40ad08:	4293      	cmp	r3, r2
  40ad0a:	d306      	bcc.n	40ad1a <.LBB81>
			*pxTicksToWait = 0;
  40ad0c:	2300      	movs	r3, #0
  40ad0e:	602b      	str	r3, [r5, #0]

0040ad10 <.LVL273>:
			xReturn = pdTRUE;
  40ad10:	2401      	movs	r4, #1

0040ad12 <.LBE80>:
	taskEXIT_CRITICAL();
  40ad12:	f000 ff6d 	bl	40bbf0 <vPortExitCritical>

0040ad16 <.LVL275>:
}
  40ad16:	4620      	mov	r0, r4
  40ad18:	bd70      	pop	{r4, r5, r6, pc}

0040ad1a <.LBB81>:
			*pxTicksToWait -= xElapsedTime;
  40ad1a:	1ad3      	subs	r3, r2, r3
  40ad1c:	602b      	str	r3, [r5, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
  40ad1e:	4620      	mov	r0, r4
  40ad20:	f000 fe58 	bl	40b9d4 <.LFE6>

0040ad24 <.LVL277>:
			xReturn = pdFALSE;
  40ad24:	2400      	movs	r4, #0

0040ad26 <.LVL278>:
  40ad26:	e7f4      	b.n	40ad12 <.LBE80>

0040ad28 <.LVL279>:
				xReturn = pdFALSE;
  40ad28:	2400      	movs	r4, #0

0040ad2a <.LVL280>:
  40ad2a:	e7f2      	b.n	40ad12 <.LBE80>
  40ad2c:	20417d98 	.word	0x20417d98
  40ad30:	20417d90 	.word	0x20417d90

Disassembly of section .text.xTaskPriorityDisinherit%141:

0040ad34 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
  40ad34:	b310      	cbz	r0, 40ad7c <.LCFI31>
	{
  40ad36:	b538      	push	{r3, r4, r5, lr}

0040ad38 <.LCFI30>:
  40ad38:	4604      	mov	r4, r0
			( pxTCB->uxMutexesHeld )--;
  40ad3a:	6c82      	ldr	r2, [r0, #72]	; 0x48
  40ad3c:	3a01      	subs	r2, #1
  40ad3e:	6482      	str	r2, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  40ad40:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

0040ad42 <.LVL293>:
  40ad42:	6c61      	ldr	r1, [r4, #68]	; 0x44
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  40ad44:	4288      	cmp	r0, r1
  40ad46:	d01b      	beq.n	40ad80 <.LCFI32>
  40ad48:	b9d2      	cbnz	r2, 40ad80 <.LCFI32>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  40ad4a:	1d25      	adds	r5, r4, #4
  40ad4c:	4628      	mov	r0, r5
  40ad4e:	f000 fcc3 	bl	40b6d8 <.LFE1>

0040ad52 <.LVL294>:
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  40ad52:	6c60      	ldr	r0, [r4, #68]	; 0x44
  40ad54:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40ad56:	f1c0 0305 	rsb	r3, r0, #5
  40ad5a:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  40ad5c:	4b09      	ldr	r3, [pc, #36]	; (40ad84 <.LVL299>)
  40ad5e:	681b      	ldr	r3, [r3, #0]
  40ad60:	4298      	cmp	r0, r3
  40ad62:	d901      	bls.n	40ad68 <.LVL294+0x16>
  40ad64:	4b07      	ldr	r3, [pc, #28]	; (40ad84 <.LVL299>)
  40ad66:	6018      	str	r0, [r3, #0]
  40ad68:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40ad6c:	4629      	mov	r1, r5
  40ad6e:	4b06      	ldr	r3, [pc, #24]	; (40ad88 <.LVL299+0x4>)
  40ad70:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40ad74:	f000 fe22 	bl	40b9bc <.LFE142>

0040ad78 <.LVL295>:
					xReturn = pdTRUE;
  40ad78:	2001      	movs	r0, #1
  40ad7a:	bd38      	pop	{r3, r4, r5, pc}

0040ad7c <.LCFI31>:
	BaseType_t xReturn = pdFALSE;
  40ad7c:	2000      	movs	r0, #0

0040ad7e <.LVL297>:
  40ad7e:	4770      	bx	lr

0040ad80 <.LCFI32>:
  40ad80:	2000      	movs	r0, #0
	}
  40ad82:	bd38      	pop	{r3, r4, r5, pc}

0040ad84 <.LVL299>:
  40ad84:	20417d84 	.word	0x20417d84
  40ad88:	20417afc 	.word	0x20417afc

Disassembly of section .text.SYS_TIME_RemoveFromList%142:

0040ad8c <SYS_TIME_RemoveFromList>:
{
  40ad8c:	4601      	mov	r1, r0
    SYS_TIME_TIMER_OBJ* tmr = counter->tmrActive;
  40ad8e:	4b13      	ldr	r3, [pc, #76]	; (40addc <.LVL45+0x2>)
  40ad90:	6b1a      	ldr	r2, [r3, #48]	; 0x30

0040ad92 <.LVL33>:
    while ((tmr != NULL) && (tmr != delTimer))
  40ad92:	b10a      	cbz	r2, 40ad98 <.LVL33+0x6>
  40ad94:	4282      	cmp	r2, r0
  40ad96:	d103      	bne.n	40ada0 <.LVL36>
    tmr = counter->tmrActive;
  40ad98:	4613      	mov	r3, r2
    SYS_TIME_TIMER_OBJ* prevTmr = NULL;
  40ad9a:	2200      	movs	r2, #0

0040ad9c <.LVL34>:
  40ad9c:	e005      	b.n	40adaa <.LVL38>

0040ad9e <.LVL35>:
        tmr = tmr->tmrNext;
  40ad9e:	461a      	mov	r2, r3

0040ada0 <.LVL36>:
  40ada0:	6993      	ldr	r3, [r2, #24]

0040ada2 <.LVL37>:
    while ((tmr != NULL) && (tmr != delTimer))
  40ada2:	2b00      	cmp	r3, #0
  40ada4:	bf18      	it	ne
  40ada6:	4299      	cmpne	r1, r3
  40ada8:	d1f9      	bne.n	40ad9e <.LVL35>

0040adaa <.LVL38>:
    if (tmr == NULL)
  40adaa:	b1ab      	cbz	r3, 40add8 <.LCFI4>
{
  40adac:	b410      	push	{r4}

0040adae <.LCFI1>:
    if (delTimer->tmrNext != NULL)
  40adae:	698b      	ldr	r3, [r1, #24]

0040adb0 <.LVL39>:
  40adb0:	b11b      	cbz	r3, 40adba <.LVL40+0x6>
        delTimer->tmrNext->relativeTimePending += delTimer->relativeTimePending;
  40adb2:	6898      	ldr	r0, [r3, #8]

0040adb4 <.LVL40>:
  40adb4:	688c      	ldr	r4, [r1, #8]
  40adb6:	4420      	add	r0, r4
  40adb8:	6098      	str	r0, [r3, #8]
    if (prevTmr == NULL)
  40adba:	b13a      	cbz	r2, 40adcc <.LCFI3>
        prevTmr->tmrNext = delTimer->tmrNext;
  40adbc:	698b      	ldr	r3, [r1, #24]
  40adbe:	6193      	str	r3, [r2, #24]
    bool isHeadTimerUpdated = false;
  40adc0:	2000      	movs	r0, #0

0040adc2 <.LVL41>:
    delTimer->tmrNext = NULL;
  40adc2:	2300      	movs	r3, #0
  40adc4:	618b      	str	r3, [r1, #24]
}
  40adc6:	f85d 4b04 	ldr.w	r4, [sp], #4

0040adca <.LCFI2>:
  40adca:	4770      	bx	lr

0040adcc <.LCFI3>:
        counter->tmrActive = counter->tmrActive->tmrNext;
  40adcc:	4b03      	ldr	r3, [pc, #12]	; (40addc <.LVL45+0x2>)
  40adce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40add0:	6992      	ldr	r2, [r2, #24]
  40add2:	631a      	str	r2, [r3, #48]	; 0x30

0040add4 <.LVL43>:
        isHeadTimerUpdated = true;
  40add4:	2001      	movs	r0, #1
  40add6:	e7f4      	b.n	40adc2 <.LVL41>

0040add8 <.LCFI4>:
        return isHeadTimerUpdated;
  40add8:	2000      	movs	r0, #0

0040adda <.LVL45>:
  40adda:	4770      	bx	lr
  40addc:	20417c00 	.word	0x20417c00

Disassembly of section .text.__libc_init_array%143:

0040ade0 <__libc_init_array>:
  40ade0:	b570      	push	{r4, r5, r6, lr}

0040ade2 <.LCFI0>:
  40ade2:	4e0f      	ldr	r6, [pc, #60]	; (40ae20 <.LVL13+0x2>)
  40ade4:	4d0f      	ldr	r5, [pc, #60]	; (40ae24 <.LVL13+0x6>)
  40ade6:	1b76      	subs	r6, r6, r5

0040ade8 <.LVL0>:
  40ade8:	10b6      	asrs	r6, r6, #2

0040adea <.LVL1>:
  40adea:	bf18      	it	ne
  40adec:	2400      	movne	r4, #0
  40adee:	d005      	beq.n	40adfc <.LVL5>

0040adf0 <.LVL2>:
  40adf0:	3401      	adds	r4, #1

0040adf2 <.LVL3>:
  40adf2:	f855 3b04 	ldr.w	r3, [r5], #4
  40adf6:	4798      	blx	r3

0040adf8 <.LVL4>:
  40adf8:	42a6      	cmp	r6, r4
  40adfa:	d1f9      	bne.n	40adf0 <.LVL2>

0040adfc <.LVL5>:
  40adfc:	4e0a      	ldr	r6, [pc, #40]	; (40ae28 <.LVL13+0xa>)

0040adfe <.LVL6>:
  40adfe:	4d0b      	ldr	r5, [pc, #44]	; (40ae2c <.LVL13+0xe>)
  40ae00:	1b76      	subs	r6, r6, r5
  40ae02:	f7f5 f9b1 	bl	400168 <_init>

0040ae06 <.LVL7>:
  40ae06:	10b6      	asrs	r6, r6, #2

0040ae08 <.LVL8>:
  40ae08:	bf18      	it	ne
  40ae0a:	2400      	movne	r4, #0
  40ae0c:	d006      	beq.n	40ae1c <.LVL12>

0040ae0e <.LVL9>:
  40ae0e:	3401      	adds	r4, #1

0040ae10 <.LVL10>:
  40ae10:	f855 3b04 	ldr.w	r3, [r5], #4
  40ae14:	4798      	blx	r3

0040ae16 <.LVL11>:
  40ae16:	42a6      	cmp	r6, r4
  40ae18:	d1f9      	bne.n	40ae0e <.LVL9>
  40ae1a:	bd70      	pop	{r4, r5, r6, pc}

0040ae1c <.LVL12>:
  40ae1c:	bd70      	pop	{r4, r5, r6, pc}

0040ae1e <.LVL13>:
  40ae1e:	bf00      	nop
  40ae20:	00400174 	.word	0x00400174
  40ae24:	00400174 	.word	0x00400174
  40ae28:	0040017c 	.word	0x0040017c
  40ae2c:	00400174 	.word	0x00400174

Disassembly of section .text.Console_UART_Write%144:

0040ae30 <Console_UART_Write>:
{
  40ae30:	b538      	push	{r3, r4, r5, lr}

0040ae32 <.LCFI0>:
  40ae32:	460d      	mov	r5, r1
  40ae34:	4614      	mov	r4, r2

0040ae36 <.LVL3>:
    if (writeQueue.numElem >= writeQueue.elemArrSz)
  40ae36:	4b10      	ldr	r3, [pc, #64]	; (40ae78 <.LVL9+0x4>)
  40ae38:	689a      	ldr	r2, [r3, #8]

0040ae3a <.LVL4>:
  40ae3a:	691b      	ldr	r3, [r3, #16]
  40ae3c:	429a      	cmp	r2, r3
  40ae3e:	d216      	bcs.n	40ae6e <.LVL7>

0040ae40 <.LBB4>:
    q->qPkts[q->nextPos] = pkt;
  40ae40:	4b0d      	ldr	r3, [pc, #52]	; (40ae78 <.LVL9+0x4>)
  40ae42:	6859      	ldr	r1, [r3, #4]
  40ae44:	68da      	ldr	r2, [r3, #12]
  40ae46:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
  40ae4a:	f842 5031 	str.w	r5, [r2, r1, lsl #3]
  40ae4e:	6044      	str	r4, [r0, #4]
    (q->nextPos < (q->elemArrSz - 1)) ? q->nextPos++ : (q->nextPos = 0);
  40ae50:	685a      	ldr	r2, [r3, #4]
  40ae52:	691b      	ldr	r3, [r3, #16]
  40ae54:	3b01      	subs	r3, #1
  40ae56:	429a      	cmp	r2, r3
  40ae58:	bf34      	ite	cc
  40ae5a:	3201      	addcc	r2, #1
  40ae5c:	2200      	movcs	r2, #0
  40ae5e:	4b06      	ldr	r3, [pc, #24]	; (40ae78 <.LVL9+0x4>)
  40ae60:	605a      	str	r2, [r3, #4]
    q->numElem++;
  40ae62:	4a05      	ldr	r2, [pc, #20]	; (40ae78 <.LVL9+0x4>)
  40ae64:	6893      	ldr	r3, [r2, #8]
  40ae66:	3301      	adds	r3, #1
  40ae68:	6093      	str	r3, [r2, #8]

0040ae6a <.LBE4>:
}
  40ae6a:	4620      	mov	r0, r4
  40ae6c:	bd38      	pop	{r3, r4, r5, pc}

0040ae6e <.LVL7>:
        popQueue(&writeQueue);
  40ae6e:	4802      	ldr	r0, [pc, #8]	; (40ae78 <.LVL9+0x4>)

0040ae70 <.LVL8>:
  40ae70:	f000 fd60 	bl	40b934 <.LFE4>

0040ae74 <.LVL9>:
  40ae74:	e7e4      	b.n	40ae40 <.LBB4>
  40ae76:	bf00      	nop
  40ae78:	20417d30 	.word	0x20417d30

Disassembly of section .text.sprintf%145:

0040ae7c <sprintf>:
  40ae7c:	b40e      	push	{r1, r2, r3}

0040ae7e <.LCFI6>:
  40ae7e:	b5f0      	push	{r4, r5, r6, r7, lr}

0040ae80 <.LCFI7>:
  40ae80:	b09c      	sub	sp, #112	; 0x70

0040ae82 <.LCFI8>:
  40ae82:	ab21      	add	r3, sp, #132	; 0x84
  40ae84:	490f      	ldr	r1, [pc, #60]	; (40aec4 <.LCFI11+0x4>)
  40ae86:	f853 2b04 	ldr.w	r2, [r3], #4
  40ae8a:	9301      	str	r3, [sp, #4]
  40ae8c:	4605      	mov	r5, r0
  40ae8e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40ae92:	6808      	ldr	r0, [r1, #0]

0040ae94 <.LVL4>:
  40ae94:	9502      	str	r5, [sp, #8]
  40ae96:	f44f 7702 	mov.w	r7, #520	; 0x208
  40ae9a:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40ae9e:	a902      	add	r1, sp, #8
  40aea0:	9506      	str	r5, [sp, #24]
  40aea2:	f8ad 7014 	strh.w	r7, [sp, #20]
  40aea6:	9404      	str	r4, [sp, #16]
  40aea8:	9407      	str	r4, [sp, #28]
  40aeaa:	f8ad 6016 	strh.w	r6, [sp, #22]
  40aeae:	f7f7 fd1b 	bl	4028e8 <_svfprintf_r>

0040aeb2 <.LVL5>:
  40aeb2:	9b02      	ldr	r3, [sp, #8]
  40aeb4:	2200      	movs	r2, #0
  40aeb6:	701a      	strb	r2, [r3, #0]
  40aeb8:	b01c      	add	sp, #112	; 0x70

0040aeba <.LCFI9>:
  40aeba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

0040aebe <.LCFI10>:
  40aebe:	b003      	add	sp, #12

0040aec0 <.LCFI11>:
  40aec0:	4770      	bx	lr
  40aec2:	bf00      	nop
  40aec4:	20417db0 	.word	0x20417db0

Disassembly of section .text._Balloc%146:

0040aec8 <_Balloc>:
  40aec8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40aeca:	b570      	push	{r4, r5, r6, lr}

0040aecc <.LCFI0>:
  40aecc:	4605      	mov	r5, r0
  40aece:	460c      	mov	r4, r1
  40aed0:	b14b      	cbz	r3, 40aee6 <.LVL3>

0040aed2 <.LVL1>:
  40aed2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]

0040aed6 <.LVL2>:
  40aed6:	b180      	cbz	r0, 40aefa <.LVL6>
  40aed8:	6802      	ldr	r2, [r0, #0]
  40aeda:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40aede:	2300      	movs	r3, #0
  40aee0:	6103      	str	r3, [r0, #16]
  40aee2:	60c3      	str	r3, [r0, #12]
  40aee4:	bd70      	pop	{r4, r5, r6, pc}

0040aee6 <.LVL3>:
  40aee6:	2221      	movs	r2, #33	; 0x21
  40aee8:	2104      	movs	r1, #4

0040aeea <.LVL4>:
  40aeea:	f7ff fe3d 	bl	40ab68 <_calloc_r>

0040aeee <.LVL5>:
  40aeee:	64e8      	str	r0, [r5, #76]	; 0x4c
  40aef0:	4603      	mov	r3, r0
  40aef2:	2800      	cmp	r0, #0
  40aef4:	d1ed      	bne.n	40aed2 <.LVL1>
  40aef6:	2000      	movs	r0, #0
  40aef8:	bd70      	pop	{r4, r5, r6, pc}

0040aefa <.LVL6>:
  40aefa:	2101      	movs	r1, #1
  40aefc:	fa01 f604 	lsl.w	r6, r1, r4
  40af00:	1d72      	adds	r2, r6, #5
  40af02:	4628      	mov	r0, r5

0040af04 <.LVL8>:
  40af04:	0092      	lsls	r2, r2, #2
  40af06:	f7ff fe2f 	bl	40ab68 <_calloc_r>

0040af0a <.LVL9>:
  40af0a:	2800      	cmp	r0, #0
  40af0c:	d0f3      	beq.n	40aef6 <.LVL5+0x8>
  40af0e:	6044      	str	r4, [r0, #4]
  40af10:	6086      	str	r6, [r0, #8]
  40af12:	e7e4      	b.n	40aede <.LVL2+0x8>

Disassembly of section .text.xPortStartScheduler%147:

0040af14 <xPortStartScheduler>:
{
  40af14:	b510      	push	{r4, lr}

0040af16 <.LCFI3>:
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  40af16:	4b0e      	ldr	r3, [pc, #56]	; (40af50 <.LVL18+0x4>)
  40af18:	681a      	ldr	r2, [r3, #0]
  40af1a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  40af1e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  40af20:	681a      	ldr	r2, [r3, #0]
  40af22:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  40af26:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  40af28:	f000 fbfe 	bl	40b728 <vPortSetupTimerInterrupt>

0040af2c <.LVL14>:
	uxCriticalNesting = 0;
  40af2c:	2400      	movs	r4, #0
  40af2e:	4b09      	ldr	r3, [pc, #36]	; (40af54 <.LVL18+0x8>)
  40af30:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
  40af32:	f000 fe53 	bl	40bbdc <vPortEnableVFP>

0040af36 <.LVL15>:
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  40af36:	4a08      	ldr	r2, [pc, #32]	; (40af58 <.LVL18+0xc>)
  40af38:	6813      	ldr	r3, [r2, #0]
  40af3a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  40af3e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  40af40:	f000 fbde 	bl	40b700 <.LFE8>

0040af44 <.LVL16>:
	vTaskSwitchContext();
  40af44:	f7fe fa5e 	bl	409404 <.LFE19>

0040af48 <.LVL17>:
	prvTaskExitError();
  40af48:	f000 fc3c 	bl	40b7c4 <.LFE8>

0040af4c <.LVL18>:
}
  40af4c:	4620      	mov	r0, r4
  40af4e:	bd10      	pop	{r4, pc}
  40af50:	e000ed20 	.word	0xe000ed20
  40af54:	20417da8 	.word	0x20417da8
  40af58:	e000ef34 	.word	0xe000ef34

Disassembly of section .text.SYS_CONSOLE_Initialize%148:

0040af5c <SYS_CONSOLE_Initialize>:
SYS_MODULE_OBJ SYS_CONSOLE_Initialize( const SYS_MODULE_INDEX index, const SYS_MODULE_INIT * const init )
{
    SYS_CONSOLE_INIT *initConfig = (SYS_CONSOLE_INIT*)init;

    /* Confirm valid arguments */
    if (index >= SYS_CONSOLE_DEVICE_MAX_INSTANCES || init == NULL)
  40af5c:	b908      	cbnz	r0, 40af62 <SYS_CONSOLE_Initialize+0x6>
  40af5e:	4603      	mov	r3, r0
  40af60:	b911      	cbnz	r1, 40af68 <.LVL2>
        return SYS_MODULE_OBJ_INVALID;
  40af62:	f04f 30ff 	mov.w	r0, #4294967295

0040af66 <.LVL1>:
  40af66:	4770      	bx	lr

0040af68 <.LVL2>:

    if ((consoleDeviceInstance[index].consoleDeviceInstanceStatus == SYS_STATUS_UNINITIALIZED) && initConfig)
  40af68:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  40af6c:	480c      	ldr	r0, [pc, #48]	; (40afa0 <.LVL5+0x6>)

0040af6e <.LVL3>:
  40af6e:	f910 2022 	ldrsb.w	r2, [r0, r2, lsl #2]
  40af72:	b992      	cbnz	r2, 40af9a <.LVL5>
  40af74:	b189      	cbz	r1, 40af9a <.LVL5>
{
  40af76:	b430      	push	{r4, r5}

0040af78 <.LCFI0>:
    {
        consoleDeviceInstance[index].consoleDevHandle = CONSOLE_DEVICE_HANDLE_INVALID;
  40af78:	4604      	mov	r4, r0
  40af7a:	005a      	lsls	r2, r3, #1
  40af7c:	18d0      	adds	r0, r2, r3
  40af7e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  40af82:	f04f 35ff 	mov.w	r5, #4294967295
  40af86:	6085      	str	r5, [r0, #8]

        consoleDeviceInstance[index].consoleInstanceDevDesc = initConfig->consDevDesc;
  40af88:	6849      	ldr	r1, [r1, #4]

0040af8a <.LVL4>:
  40af8a:	6041      	str	r1, [r0, #4]
        consoleDeviceInstance[index].consoleDeviceInstanceStatus = SYS_STATUS_READY;
  40af8c:	441a      	add	r2, r3
  40af8e:	2102      	movs	r1, #2
  40af90:	f804 1022 	strb.w	r1, [r4, r2, lsl #2]

        return index;
  40af94:	4618      	mov	r0, r3
    }

    return SYS_MODULE_OBJ_INVALID;
}
  40af96:	bc30      	pop	{r4, r5}

0040af98 <.LCFI1>:
  40af98:	4770      	bx	lr

0040af9a <.LVL5>:
    return SYS_MODULE_OBJ_INVALID;
  40af9a:	f04f 30ff 	mov.w	r0, #4294967295
  40af9e:	4770      	bx	lr
  40afa0:	20417d44 	.word	0x20417d44

Disassembly of section .text.Console_UART_Status%149:

0040afa4 <Console_UART_Status>:
    if (consUartData.state == CONSOLE_UART_STATE_INIT)
  40afa4:	4b0e      	ldr	r3, [pc, #56]	; (40afe0 <.LFE0+0x3c>)
  40afa6:	781b      	ldrb	r3, [r3, #0]
  40afa8:	b1ab      	cbz	r3, 40afd6 <Console_UART_Status+0x32>
    if (consUartData.state == CONSOLE_UART_STATE_CRITICAL_ERROR || consUartData.state == CONSOLE_UART_STATE_OPERATIONAL_ERROR || consUartData.overflowFlag)
  40afaa:	3b07      	subs	r3, #7
  40afac:	b2db      	uxtb	r3, r3
  40afae:	2b01      	cmp	r3, #1
  40afb0:	d913      	bls.n	40afda <Console_UART_Status+0x36>
  40afb2:	4b0b      	ldr	r3, [pc, #44]	; (40afe0 <.LFE0+0x3c>)
  40afb4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
  40afb8:	b10b      	cbz	r3, 40afbe <Console_UART_Status+0x1a>
        status = SYS_CONSOLE_STATUS_ERROR;
  40afba:	2003      	movs	r0, #3
  40afbc:	4770      	bx	lr
        status = (writeQueue.numElem || readQueue.numElem) ? SYS_CONSOLE_STATUS_BUSY : SYS_CONSOLE_STATUS_CONFIGURED;
  40afbe:	4b09      	ldr	r3, [pc, #36]	; (40afe4 <.LFE0+0x40>)
  40afc0:	689b      	ldr	r3, [r3, #8]
  40afc2:	b10b      	cbz	r3, 40afc8 <Console_UART_Status+0x24>
  40afc4:	2002      	movs	r0, #2
}
  40afc6:	4770      	bx	lr
        status = (writeQueue.numElem || readQueue.numElem) ? SYS_CONSOLE_STATUS_BUSY : SYS_CONSOLE_STATUS_CONFIGURED;
  40afc8:	4b07      	ldr	r3, [pc, #28]	; (40afe8 <.LFE0+0x44>)
  40afca:	689b      	ldr	r3, [r3, #8]
  40afcc:	2b00      	cmp	r3, #0
  40afce:	bf14      	ite	ne
  40afd0:	2002      	movne	r0, #2
  40afd2:	2001      	moveq	r0, #1
  40afd4:	4770      	bx	lr
        return status;
  40afd6:	2000      	movs	r0, #0
  40afd8:	4770      	bx	lr
        status = SYS_CONSOLE_STATUS_ERROR;
  40afda:	2003      	movs	r0, #3
  40afdc:	4770      	bx	lr
  40afde:	bf00      	nop
  40afe0:	20417bb0 	.word	0x20417bb0
  40afe4:	20417d30 	.word	0x20417d30
  40afe8:	20417d1c 	.word	0x20417d1c

Disassembly of section .text.USART1_Write%150:

0040afec <USART1_Write>:
bool USART1_Write( void *buffer, const size_t size )
{
    bool status = false;
    uint8_t * lBuffer = (uint8_t *)buffer;

    if(NULL != lBuffer)
  40afec:	b1c8      	cbz	r0, 40b022 <.LVL38>
    {
        /* Check if transmit request is in progress */
        if(usart1Obj.txBusyStatus == false)
  40afee:	4b0f      	ldr	r3, [pc, #60]	; (40b02c <.LVL41+0x4>)
  40aff0:	7d1b      	ldrb	r3, [r3, #20]
  40aff2:	b9c3      	cbnz	r3, 40b026 <.LVL40>
        {
            usart1Obj.txBuffer = lBuffer;
  40aff4:	4b0d      	ldr	r3, [pc, #52]	; (40b02c <.LVL41+0x4>)
  40aff6:	6018      	str	r0, [r3, #0]
            usart1Obj.txSize = size;
  40aff8:	6059      	str	r1, [r3, #4]
            usart1Obj.txProcessedSize = 0;
  40affa:	2100      	movs	r1, #0

0040affc <.LVL35>:
  40affc:	6099      	str	r1, [r3, #8]
            usart1Obj.txBusyStatus = true;
  40affe:	2101      	movs	r1, #1
  40b000:	7519      	strb	r1, [r3, #20]

0040b002 <.LVL36>:
            status = true;

            /* Initiate the transfer by sending first byte */
            if(US_CSR_TXEMPTY_Msk == (USART1_REGS->US_CSR& US_CSR_TXEMPTY_Msk))
  40b002:	4b0b      	ldr	r3, [pc, #44]	; (40b030 <.LVL41+0x8>)
  40b004:	695b      	ldr	r3, [r3, #20]
  40b006:	f413 7f00 	tst.w	r3, #512	; 0x200
  40b00a:	d004      	beq.n	40b016 <.LVL36+0x14>
            {
                USART1_REGS->US_THR = (US_THR_TXCHR(*lBuffer) & US_THR_TXCHR_Msk);
  40b00c:	7802      	ldrb	r2, [r0, #0]
  40b00e:	4b08      	ldr	r3, [pc, #32]	; (40b030 <.LVL41+0x8>)
  40b010:	61da      	str	r2, [r3, #28]
                usart1Obj.txProcessedSize++;
  40b012:	4b06      	ldr	r3, [pc, #24]	; (40b02c <.LVL41+0x4>)
  40b014:	6099      	str	r1, [r3, #8]
            }

            USART1_REGS->US_IER = US_IER_TXEMPTY_Msk;
  40b016:	f44f 7200 	mov.w	r2, #512	; 0x200
  40b01a:	4b05      	ldr	r3, [pc, #20]	; (40b030 <.LVL41+0x8>)
  40b01c:	609a      	str	r2, [r3, #8]
            status = true;
  40b01e:	2001      	movs	r0, #1

0040b020 <.LVL37>:
  40b020:	4770      	bx	lr

0040b022 <.LVL38>:
    bool status = false;
  40b022:	2000      	movs	r0, #0

0040b024 <.LVL39>:
  40b024:	4770      	bx	lr

0040b026 <.LVL40>:
  40b026:	2000      	movs	r0, #0

0040b028 <.LVL41>:
        }
    }

    return status;
}
  40b028:	4770      	bx	lr
  40b02a:	bf00      	nop
  40b02c:	20400454 	.word	0x20400454
  40b030:	40028000 	.word	0x40028000

Disassembly of section .text.SYS_INT_SourceDisable%151:

0040b034 <SYS_INT_SourceDisable>:

    return;
}

bool SYS_INT_SourceDisable( INT_SOURCE source )
{
  40b034:	b538      	push	{r3, r4, r5, lr}

0040b036 <.LCFI0>:
  40b036:	4604      	mov	r4, r0
    bool processorStatus;
    bool intSrcStatus;

    processorStatus = SYS_INT_Disable();
  40b038:	f000 fe2a 	bl	40bc90 <SYS_INT_Disable>

0040b03c <.LBB50>:
  if ((int32_t)(IRQn) >= 0)
  40b03c:	2c00      	cmp	r4, #0
  40b03e:	db16      	blt.n	40b06e <.LVL9>
    return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  40b040:	0963      	lsrs	r3, r4, #5
  40b042:	490c      	ldr	r1, [pc, #48]	; (40b074 <.LVL9+0x6>)
  40b044:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
  40b048:	f004 041f 	and.w	r4, r4, #31

0040b04c <.LVL5>:
  40b04c:	40e5      	lsrs	r5, r4

0040b04e <.LBE50>:

    intSrcStatus = NVIC_GetEnableIRQ(source);
  40b04e:	f005 0501 	and.w	r5, r5, #1

0040b052 <.LBB52>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40b052:	2201      	movs	r2, #1
  40b054:	fa02 f404 	lsl.w	r4, r2, r4
  40b058:	3320      	adds	r3, #32
  40b05a:	f841 4023 	str.w	r4, [r1, r3, lsl #2]

0040b05e <.LBB54>:
  __ASM volatile ("dsb 0xF":::"memory");
  40b05e:	f3bf 8f4f 	dsb	sy

0040b062 <.LBB56>:
  __ASM volatile ("isb 0xF":::"memory");
  40b062:	f3bf 8f6f 	isb	sy

0040b066 <.LBE52>:

    NVIC_DisableIRQ( source );

    SYS_INT_Restore( processorStatus );
  40b066:	f000 fe1c 	bl	40bca2 <.LFE142>

0040b06a <.LVL8>:

    /* return the source status */
    return intSrcStatus;
  40b06a:	4628      	mov	r0, r5
  40b06c:	bd38      	pop	{r3, r4, r5, pc}

0040b06e <.LVL9>:
    intSrcStatus = NVIC_GetEnableIRQ(source);
  40b06e:	2500      	movs	r5, #0
  40b070:	e7f9      	b.n	40b066 <.LBE52>
  40b072:	bf00      	nop
  40b074:	e000e100 	.word	0xe000e100

Disassembly of section .rodata.SHA512Expected%152:

0040b078 <SHA512Expected>:
  40b078:	7f15497f 9eb359b3 4d93daa6 0907a1c9     .I...Y.....M....
  40b088:	4688dffe e6d039d1 fcc0a337 426f3b83     ...F.9..7....;oB
  40b098:	db583870 f428eeac 955e9b48 65e5b5fa     p8X...(.H.^....e
  40b0a8:	38f8255a f37bdcb0 c07c4cc8 4f6a4f26     Z%.8..{..L|.&OjO
  40b0b8:	bf000000                                ....

Disassembly of section .rodata%153:

0040b0bc <.LC5-0x24>:
  40b0bc:	00464e49 	.word	0x00464e49
  40b0c0:	00666e69 	.word	0x00666e69
  40b0c4:	004e414e 	.word	0x004e414e
  40b0c8:	006e616e 	.word	0x006e616e
  40b0cc:	33323130 	.word	0x33323130
  40b0d0:	37363534 	.word	0x37363534
  40b0d4:	42413938 	.word	0x42413938
  40b0d8:	46454443 	.word	0x46454443
  40b0dc:	00000000 	.word	0x00000000

0040b0e0 <.LC5>:
  40b0e0:	33323130 	.word	0x33323130
  40b0e4:	37363534 	.word	0x37363534
  40b0e8:	62613938 	.word	0x62613938
  40b0ec:	66656463 	.word	0x66656463
  40b0f0:	00000000 	.word	0x00000000

0040b0f4 <.LC6>:
  40b0f4:	6c756e28 	.word	0x6c756e28
  40b0f8:	0000296c 	.word	0x0000296c
  40b0fc:	0030      	.short	0x0030
  40b0fe:	bf00      	nop

Disassembly of section .text.NVIC_Initialize%154:

0040b100 <NVIC_Initialize>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  40b100:	4b0d      	ldr	r3, [pc, #52]	; (40b138 <.LVL11+0x2>)
  40b102:	68d9      	ldr	r1, [r3, #12]

0040b104 <.LVL1>:
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  40b104:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700

0040b108 <.LVL2>:
  40b108:	0409      	lsls	r1, r1, #16
  40b10a:	0c09      	lsrs	r1, r1, #16

0040b10c <.LVL3>:
  reg_value  =  (reg_value                                   |
  40b10c:	4a0b      	ldr	r2, [pc, #44]	; (40b13c <.LVL11+0x6>)
  40b10e:	430a      	orrs	r2, r1

0040b110 <.LVL4>:
  SCB->AIRCR =  reg_value;
  40b110:	60da      	str	r2, [r3, #12]

0040b112 <.LBB24>:
  __ASM volatile ("dmb 0xF":::"memory");
  40b112:	f3bf 8f5f 	dmb	sy

0040b116 <.LBB26>:
  __ASM volatile ("cpsie i" : : : "memory");
  40b116:	b662      	cpsie	i

0040b118 <.LBB28>:
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40b118:	22e0      	movs	r2, #224	; 0xe0
  40b11a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

0040b11e <.LBB30>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40b11e:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
  40b122:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e

0040b126 <.LBB32>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40b126:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  40b12a:	6019      	str	r1, [r3, #0]

0040b12c <.LBB34>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40b12c:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317

0040b130 <.LBB36>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40b130:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40b134:	601a      	str	r2, [r3, #0]

0040b136 <.LVL11>:
  40b136:	4770      	bx	lr
  40b138:	e000ed00 	.word	0xe000ed00
  40b13c:	05fa0400 	.word	0x05fa0400

Disassembly of section .rodata.sha_padding%155:

0040b140 <sha_padding>:
  40b140:	00000080 00000000 00000000 00000000     ................
	...

Disassembly of section .text.__hi0bits%156:

0040b180 <__hi0bits>:
  40b180:	0c02      	lsrs	r2, r0, #16
  40b182:	0412      	lsls	r2, r2, #16
  40b184:	4603      	mov	r3, r0
  40b186:	b9b2      	cbnz	r2, 40b1b6 <.LVL75>

0040b188 <.LVL63>:
  40b188:	0403      	lsls	r3, r0, #16

0040b18a <.LVL64>:
  40b18a:	2010      	movs	r0, #16

0040b18c <.LVL65>:
  40b18c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40b190:	bf04      	itt	eq
  40b192:	021b      	lsleq	r3, r3, #8

0040b194 <.LVL66>:
  40b194:	3008      	addeq	r0, #8

0040b196 <.LVL67>:
  40b196:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  40b19a:	bf04      	itt	eq
  40b19c:	011b      	lsleq	r3, r3, #4

0040b19e <.LVL68>:
  40b19e:	3004      	addeq	r0, #4

0040b1a0 <.LVL69>:
  40b1a0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40b1a4:	bf04      	itt	eq
  40b1a6:	009b      	lsleq	r3, r3, #2

0040b1a8 <.LVL70>:
  40b1a8:	3002      	addeq	r0, #2

0040b1aa <.LVL71>:
  40b1aa:	2b00      	cmp	r3, #0
  40b1ac:	db02      	blt.n	40b1b4 <.LVL74>

0040b1ae <.LVL72>:
  40b1ae:	005b      	lsls	r3, r3, #1

0040b1b0 <.LVL73>:
  40b1b0:	d403      	bmi.n	40b1ba <.LVL77>
  40b1b2:	2020      	movs	r0, #32

0040b1b4 <.LVL74>:
  40b1b4:	4770      	bx	lr

0040b1b6 <.LVL75>:
  40b1b6:	2000      	movs	r0, #0

0040b1b8 <.LVL76>:
  40b1b8:	e7e8      	b.n	40b18c <.LVL65>

0040b1ba <.LVL77>:
  40b1ba:	3001      	adds	r0, #1

0040b1bc <.LVL78>:
  40b1bc:	4770      	bx	lr

0040b1be <.LFE21>:
  40b1be:	bf00      	nop

Disassembly of section .text.Console_UART_Flush%157:

0040b1c0 <Console_UART_Flush>:
    if (consUartData.state != CONSOLE_UART_STATE_INIT)
  40b1c0:	4b0b      	ldr	r3, [pc, #44]	; (40b1f0 <Console_UART_Flush+0x30>)
  40b1c2:	781b      	ldrb	r3, [r3, #0]
  40b1c4:	b113      	cbz	r3, 40b1cc <Console_UART_Flush+0xc>
        consUartData.state = CONSOLE_UART_STATE_READY;
  40b1c6:	2202      	movs	r2, #2
  40b1c8:	4b09      	ldr	r3, [pc, #36]	; (40b1f0 <Console_UART_Flush+0x30>)
  40b1ca:	701a      	strb	r2, [r3, #0]
    consUartData.overflowFlag = false;
  40b1cc:	4a08      	ldr	r2, [pc, #32]	; (40b1f0 <Console_UART_Flush+0x30>)
  40b1ce:	2300      	movs	r3, #0
  40b1d0:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
    consUartData.isWriteComplete = true;
  40b1d4:	2001      	movs	r0, #1
  40b1d6:	f882 0045 	strb.w	r0, [r2, #69]	; 0x45
    writeQueue.nextPos = 0;
  40b1da:	4906      	ldr	r1, [pc, #24]	; (40b1f4 <Console_UART_Flush+0x34>)
  40b1dc:	604b      	str	r3, [r1, #4]
    writeQueue.tailPos = 0;
  40b1de:	600b      	str	r3, [r1, #0]
    writeQueue.numElem = 0;
  40b1e0:	608b      	str	r3, [r1, #8]
    consUartData.isReadComplete = true;
  40b1e2:	f882 0044 	strb.w	r0, [r2, #68]	; 0x44
    readQueue.nextPos = 0;
  40b1e6:	4a04      	ldr	r2, [pc, #16]	; (40b1f8 <Console_UART_Flush+0x38>)
  40b1e8:	6053      	str	r3, [r2, #4]
    readQueue.tailPos = 0;
  40b1ea:	6013      	str	r3, [r2, #0]
    readQueue.numElem = 0;
  40b1ec:	6093      	str	r3, [r2, #8]
  40b1ee:	4770      	bx	lr
  40b1f0:	20417bb0 	.word	0x20417bb0
  40b1f4:	20417d30 	.word	0x20417d30
  40b1f8:	20417d1c 	.word	0x20417d1c

Disassembly of section .text.SYS_TIME_GetTimerObject%158:

0040b1fc <SYS_TIME_GetTimerObject>:
    if ((handle != SYS_TIME_HANDLE_INVALID) && (handle != 0))
  40b1fc:	1e43      	subs	r3, r0, #1
  40b1fe:	f113 0f03 	cmn.w	r3, #3
  40b202:	d80f      	bhi.n	40b224 <.LVL5>
        if ((handle & _SYS_TIME_INDEX_MASK) < SYS_TIME_MAX_TIMERS)
  40b204:	b283      	uxth	r3, r0
  40b206:	2b09      	cmp	r3, #9
  40b208:	d80e      	bhi.n	40b228 <.LVL7>

0040b20a <.LVL1>:
            if ((timerObj->tmrHandle == handle) && (timerObj->inUse == true))
  40b20a:	4a0a      	ldr	r2, [pc, #40]	; (40b234 <.LVL12+0x2>)
  40b20c:	eb02 1243 	add.w	r2, r2, r3, lsl #5
  40b210:	69d2      	ldr	r2, [r2, #28]
  40b212:	4290      	cmp	r0, r2
  40b214:	d10a      	bne.n	40b22c <.LVL9>
  40b216:	015a      	lsls	r2, r3, #5

0040b218 <.LVL2>:
  40b218:	4906      	ldr	r1, [pc, #24]	; (40b234 <.LVL12+0x2>)
  40b21a:	5c8a      	ldrb	r2, [r1, r2]

0040b21c <.LVL3>:
  40b21c:	b142      	cbz	r2, 40b230 <.LVL11>
            timerObj = &timers[handle & _SYS_TIME_INDEX_MASK];
  40b21e:	eb01 1043 	add.w	r0, r1, r3, lsl #5

0040b222 <.LVL4>:
                return timerObj;
  40b222:	4770      	bx	lr

0040b224 <.LVL5>:
    return NULL;
  40b224:	2000      	movs	r0, #0

0040b226 <.LVL6>:
  40b226:	4770      	bx	lr

0040b228 <.LVL7>:
  40b228:	2000      	movs	r0, #0

0040b22a <.LVL8>:
  40b22a:	4770      	bx	lr

0040b22c <.LVL9>:
  40b22c:	2000      	movs	r0, #0

0040b22e <.LVL10>:
  40b22e:	4770      	bx	lr

0040b230 <.LVL11>:
  40b230:	2000      	movs	r0, #0

0040b232 <.LVL12>:
}
  40b232:	4770      	bx	lr
  40b234:	204179bc 	.word	0x204179bc

Disassembly of section .text.SYS_TIME_ResourceUnlock%159:

0040b238 <SYS_TIME_ResourceUnlock>:
{
  40b238:	b508      	push	{r3, lr}

0040b23a <.LCFI10>:
    SYS_INT_SourceEnable(gSystemCounterObj.hwTimerIntNum);
  40b23a:	4b0b      	ldr	r3, [pc, #44]	; (40b268 <.LVL96+0x2>)
  40b23c:	f993 3008 	ldrsb.w	r3, [r3, #8]

0040b240 <.LBB12>:
  if ((int32_t)(IRQn) >= 0)
  40b240:	2b00      	cmp	r3, #0
  40b242:	db08      	blt.n	40b256 <.LBE12>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40b244:	0959      	lsrs	r1, r3, #5
  40b246:	f003 031f 	and.w	r3, r3, #31

0040b24a <.LVL94>:
  40b24a:	2201      	movs	r2, #1
  40b24c:	fa02 f303 	lsl.w	r3, r2, r3
  40b250:	4a06      	ldr	r2, [pc, #24]	; (40b26c <.LVL96+0x6>)
  40b252:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

0040b256 <.LBE12>:
    if(gSystemCounterObj.interruptNestingCount == 0)
  40b256:	4b04      	ldr	r3, [pc, #16]	; (40b268 <.LVL96+0x2>)
  40b258:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
  40b25c:	b103      	cbz	r3, 40b260 <.LBE12+0xa>
  40b25e:	bd08      	pop	{r3, pc}
        OSAL_MUTEX_Unlock(&gSystemCounterObj.timerMutex);
  40b260:	4803      	ldr	r0, [pc, #12]	; (40b270 <.LVL96+0xa>)
  40b262:	f000 fbcf 	bl	40ba04 <.LFE12>

0040b266 <.LVL96>:
}
  40b266:	e7fa      	b.n	40b25e <.LBE12+0x8>
  40b268:	20417c00 	.word	0x20417c00
  40b26c:	e000e100 	.word	0xe000e100
  40b270:	20417c34 	.word	0x20417c34

Disassembly of section .text.SYS_TIME_Counter64Get%160:

0040b274 <SYS_TIME_Counter64Get>:
{
    return gSystemCounterObj.hwTimerFrequency;
}

uint64_t SYS_TIME_Counter64Get ( void )
{
  40b274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0040b276 <.LCFI15>:
    uint64_t counter64 = 0;
    uint32_t counter32 = 0;
    uint32_t elapsedCount;
    uint8_t isSwCounter32Oveflow = false;

    if (SYS_TIME_ResourceLock() == false)
  40b276:	f000 f8ad 	bl	40b3d4 <.LFE17>

0040b27a <.LVL147>:
  40b27a:	b920      	cbnz	r0, 40b286 <.LVL149>
    {
        return counter64;
  40b27c:	2400      	movs	r4, #0
  40b27e:	2500      	movs	r5, #0

0040b280 <.LVL148>:
    counter64 = ((counter64 << 32) + counter32);

    SYS_TIME_ResourceUnlock();

    return counter64;
}
  40b280:	4620      	mov	r0, r4
  40b282:	4629      	mov	r1, r5
  40b284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0040b286 <.LVL149>:
    elapsedCount = SYS_TIME_GetElapsedCount(counterObj->timePlib->timerCounterGet());
  40b286:	4c09      	ldr	r4, [pc, #36]	; (40b2ac <.LVL157+0x4>)
  40b288:	6863      	ldr	r3, [r4, #4]
  40b28a:	699b      	ldr	r3, [r3, #24]
  40b28c:	4798      	blx	r3
  40b28e:	f000 fc61 	bl	40bb54 <.LFE163>

0040b292 <.LBB24>:
    uint32_t prevSwCounter32Bit = counterObj->swCounter64Low;
  40b292:	6a63      	ldr	r3, [r4, #36]	; 0x24

0040b294 <.LBE24>:
    counter64 = counterObj->swCounter64High;
  40b294:	6aa6      	ldr	r6, [r4, #40]	; 0x28

0040b296 <.LVL153>:
    if (isSwCounter32Oveflow == true)
  40b296:	18c0      	adds	r0, r0, r3

0040b298 <.LVL154>:
  40b298:	d206      	bcs.n	40b2a8 <.LVL157>
    counter64 = ((counter64 << 32) + counter32);
  40b29a:	2400      	movs	r4, #0
  40b29c:	1824      	adds	r4, r4, r0
  40b29e:	f146 0500 	adc.w	r5, r6, #0

0040b2a2 <.LVL155>:
    SYS_TIME_ResourceUnlock();
  40b2a2:	f7ff ffc9 	bl	40b238 <.LFE149>

0040b2a6 <.LVL156>:
    return counter64;
  40b2a6:	e7eb      	b.n	40b280 <.LVL148>

0040b2a8 <.LVL157>:
        counter64++;
  40b2a8:	3601      	adds	r6, #1
  40b2aa:	e7f6      	b.n	40b29a <.LVL154+0x2>
  40b2ac:	20417c00 	.word	0x20417c00

Disassembly of section .text.SYS_TIME_TimerDestroy%161:

0040b2b0 <SYS_TIME_TimerDestroy>:
    SYS_TIME_ResourceUnlock();
    return result;
}

SYS_TIME_RESULT SYS_TIME_TimerDestroy(SYS_TIME_HANDLE handle)
{
  40b2b0:	b510      	push	{r4, lr}

0040b2b2 <.LCFI23>:
  40b2b2:	4604      	mov	r4, r0

0040b2b4 <.LVL195>:
    SYS_TIME_TIMER_OBJ *tmr = NULL;
    SYS_TIME_RESULT result = SYS_TIME_ERROR;

    if (SYS_TIME_ResourceLock() == false)
  40b2b4:	f000 f88e 	bl	40b3d4 <.LFE17>

0040b2b8 <.LVL196>:
  40b2b8:	b1b0      	cbz	r0, 40b2e8 <.LVL206>
    {
        return result;
    }

    tmr = SYS_TIME_GetTimerObject(handle);
  40b2ba:	4620      	mov	r0, r4
  40b2bc:	f7ff ff9e 	bl	40b1fc <.LFE161>

0040b2c0 <.LVL197>:

    if(tmr != NULL)
  40b2c0:	4604      	mov	r4, r0

0040b2c2 <.LVL198>:
  40b2c2:	b178      	cbz	r0, 40b2e4 <.LVL205>
    {
        if(tmr->active == true)
  40b2c4:	7843      	ldrb	r3, [r0, #1]
  40b2c6:	b943      	cbnz	r3, 40b2da <.LVL203>

0040b2c8 <.LVL199>:
        {
            SYS_TIME_RemoveFromList(tmr);
            tmr->active = false;
        }
        tmr->tmrElapsedFlag = false;
  40b2c8:	2000      	movs	r0, #0
  40b2ca:	7520      	strb	r0, [r4, #20]
        tmr->tmrElapsed = false;
  40b2cc:	7560      	strb	r0, [r4, #21]
        tmr->inUse = false;
  40b2ce:	7020      	strb	r0, [r4, #0]

0040b2d0 <.LVL200>:
        result = SYS_TIME_SUCCESS;
  40b2d0:	4604      	mov	r4, r0

0040b2d2 <.LVL201>:
    }

    SYS_TIME_ResourceUnlock();
  40b2d2:	f7ff ffb1 	bl	40b238 <.LFE149>

0040b2d6 <.LVL202>:
    return result;
}
  40b2d6:	4620      	mov	r0, r4
  40b2d8:	bd10      	pop	{r4, pc}

0040b2da <.LVL203>:
            SYS_TIME_RemoveFromList(tmr);
  40b2da:	f7ff fd57 	bl	40ad8c <.LFE42>

0040b2de <.LVL204>:
            tmr->active = false;
  40b2de:	2300      	movs	r3, #0
  40b2e0:	7063      	strb	r3, [r4, #1]
  40b2e2:	e7f1      	b.n	40b2c8 <.LVL199>

0040b2e4 <.LVL205>:
    SYS_TIME_RESULT result = SYS_TIME_ERROR;
  40b2e4:	2401      	movs	r4, #1
  40b2e6:	e7f4      	b.n	40b2d2 <.LVL201>

0040b2e8 <.LVL206>:
        return result;
  40b2e8:	2401      	movs	r4, #1

0040b2ea <.LVL207>:
  40b2ea:	e7f4      	b.n	40b2d6 <.LVL202>

Disassembly of section .text.USART1_Initialize%162:

0040b2ec <USART1_Initialize>:
    USART1_REGS->US_CR = (US_CR_RSTRX_Msk | US_CR_RSTTX_Msk | US_CR_RSTSTA_Msk);
  40b2ec:	4b0c      	ldr	r3, [pc, #48]	; (40b320 <.LFE177+0x34>)
  40b2ee:	f44f 7286 	mov.w	r2, #268	; 0x10c
  40b2f2:	601a      	str	r2, [r3, #0]
    USART1_REGS->US_CR = (US_CR_TXEN_Msk | US_CR_RXEN_Msk);
  40b2f4:	2250      	movs	r2, #80	; 0x50
  40b2f6:	601a      	str	r2, [r3, #0]
    USART1_REGS->US_MR = ((US_MR_USCLKS_MCK) | (0 << US_MR_MODE9_Pos) | US_MR_CHRL_8_BIT | US_MR_PAR_NO | US_MR_NBSTOP_1_BIT | (0 << US_MR_OVER_Pos));
  40b2f8:	f44f 620c 	mov.w	r2, #2240	; 0x8c0
  40b2fc:	605a      	str	r2, [r3, #4]
    USART1_REGS->US_BRGR = US_BRGR_CD(81);
  40b2fe:	2251      	movs	r2, #81	; 0x51
  40b300:	621a      	str	r2, [r3, #32]
    usart1Obj.rxBuffer = NULL;
  40b302:	4b08      	ldr	r3, [pc, #32]	; (40b324 <.LFE177+0x38>)
  40b304:	2200      	movs	r2, #0
  40b306:	619a      	str	r2, [r3, #24]
    usart1Obj.rxSize = 0;
  40b308:	61da      	str	r2, [r3, #28]
    usart1Obj.rxProcessedSize = 0;
  40b30a:	621a      	str	r2, [r3, #32]
    usart1Obj.rxBusyStatus = false;
  40b30c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    usart1Obj.rxCallback = NULL;
  40b310:	625a      	str	r2, [r3, #36]	; 0x24
    usart1Obj.txBuffer = NULL;
  40b312:	601a      	str	r2, [r3, #0]
    usart1Obj.txSize = 0;
  40b314:	605a      	str	r2, [r3, #4]
    usart1Obj.txProcessedSize = 0;
  40b316:	609a      	str	r2, [r3, #8]
    usart1Obj.txBusyStatus = false;
  40b318:	751a      	strb	r2, [r3, #20]
    usart1Obj.txCallback = NULL;
  40b31a:	60da      	str	r2, [r3, #12]
  40b31c:	4770      	bx	lr
  40b31e:	bf00      	nop
  40b320:	40028000 	.word	0x40028000
  40b324:	20400454 	.word	0x20400454

Disassembly of section .text.USART1_Read%163:

0040b328 <USART1_Read>:
    if(NULL != lBuffer)
  40b328:	b1a0      	cbz	r0, 40b354 <.LCFI6>
{
  40b32a:	b538      	push	{r3, r4, r5, lr}

0040b32c <.LCFI5>:
  40b32c:	4605      	mov	r5, r0
  40b32e:	460c      	mov	r4, r1
        USART1_ErrorGet();
  40b330:	f000 f91e 	bl	40b570 <.LFE6>

0040b334 <.LVL27>:
        if(usart1Obj.rxBusyStatus == false)
  40b334:	4b09      	ldr	r3, [pc, #36]	; (40b35c <.LVL33>)
  40b336:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
  40b33a:	b96b      	cbnz	r3, 40b358 <.LCFI7>
            usart1Obj.rxBuffer = lBuffer;
  40b33c:	4b07      	ldr	r3, [pc, #28]	; (40b35c <.LVL33>)
  40b33e:	619d      	str	r5, [r3, #24]
            usart1Obj.rxSize = size;
  40b340:	61dc      	str	r4, [r3, #28]
            usart1Obj.rxProcessedSize = 0;
  40b342:	2200      	movs	r2, #0
  40b344:	621a      	str	r2, [r3, #32]
            usart1Obj.rxBusyStatus = true;
  40b346:	2001      	movs	r0, #1
  40b348:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c

0040b34c <.LVL28>:
            USART1_REGS->US_IER = (US_IER_RXRDY_Msk | US_IER_FRAME_Msk | US_IER_PARE_Msk | US_IER_OVRE_Msk);
  40b34c:	22e1      	movs	r2, #225	; 0xe1
  40b34e:	4b04      	ldr	r3, [pc, #16]	; (40b360 <.LVL33+0x4>)
  40b350:	609a      	str	r2, [r3, #8]
  40b352:	bd38      	pop	{r3, r4, r5, pc}

0040b354 <.LCFI6>:
    bool status = false;
  40b354:	2000      	movs	r0, #0

0040b356 <.LVL30>:
  40b356:	4770      	bx	lr

0040b358 <.LCFI7>:
  40b358:	2000      	movs	r0, #0

0040b35a <.LVL32>:
}
  40b35a:	bd38      	pop	{r3, r4, r5, pc}

0040b35c <.LVL33>:
  40b35c:	20400454 	.word	0x20400454
  40b360:	40028000 	.word	0x40028000

Disassembly of section .text.SYS_Tasks%164:

0040b364 <SYS_Tasks>:
  Remarks:
    See prototype in system/common/sys_module.h.
*/

void SYS_Tasks ( void )
{
  40b364:	b500      	push	{lr}

0040b366 <.LCFI1>:
  40b366:	b083      	sub	sp, #12

0040b368 <.LCFI2>:
    /* Maintain system services */
    SYS_CONSOLE_Tasks(sysObj.sysConsole0);
  40b368:	4b09      	ldr	r3, [pc, #36]	; (40b390 <.LCFI3+0x6>)
  40b36a:	6818      	ldr	r0, [r3, #0]
  40b36c:	f000 fad4 	bl	40b918 <.LFE45>

0040b370 <.LVL4>:
    /* Maintain Middleware & Other Libraries */
    

    /* Maintain the application's state machine. */
        /* Create OS Thread for APP_Tasks. */
    xTaskCreate((TaskFunction_t) _APP_Tasks,
  40b370:	2300      	movs	r3, #0
  40b372:	9301      	str	r3, [sp, #4]
  40b374:	2201      	movs	r2, #1
  40b376:	9200      	str	r2, [sp, #0]
  40b378:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40b37c:	4905      	ldr	r1, [pc, #20]	; (40b394 <.LCFI3+0xa>)
  40b37e:	4806      	ldr	r0, [pc, #24]	; (40b398 <.LCFI3+0xe>)
  40b380:	f7fc fae0 	bl	407944 <.LFE165>

0040b384 <.LVL5>:
    /* Start RTOS Scheduler. */
    
     /**********************************************************************
     * Create all Threads for APP Tasks before starting FreeRTOS Scheduler *
     ***********************************************************************/
    vTaskStartScheduler(); /* This function never returns. */
  40b384:	f7ff fa32 	bl	40a7ec <.LFE43>

0040b388 <.LVL6>:

}
  40b388:	b003      	add	sp, #12

0040b38a <.LCFI3>:
  40b38a:	f85d fb04 	ldr.w	pc, [sp], #4
  40b38e:	bf00      	nop
  40b390:	20400000 	.word	0x20400000
  40b394:	0040bdbc 	.word	0x0040bdbc
  40b398:	0040bc19 	.word	0x0040bc19

Disassembly of section .text.wc_InitMd5_ex%165:

0040b39c <wc_InitMd5_ex>:
    if (md5 == NULL)
  40b39c:	4603      	mov	r3, r0
  40b39e:	b1a0      	cbz	r0, 40b3ca <.LVL328>
    md5->heap = heap;
  40b3a0:	65c1      	str	r1, [r0, #92]	; 0x5c

0040b3a2 <.LBB139>:
    md5->digest[0] = 0x67452301L;
  40b3a2:	4a0b      	ldr	r2, [pc, #44]	; (40b3d0 <.LVL329+0x2>)

0040b3a4 <.LVL325>:
  40b3a4:	64c2      	str	r2, [r0, #76]	; 0x4c
    md5->digest[1] = 0xefcdab89L;
  40b3a6:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
  40b3aa:	6502      	str	r2, [r0, #80]	; 0x50
    md5->digest[2] = 0x98badcfeL;
  40b3ac:	f102 4229 	add.w	r2, r2, #2835349504	; 0xa9000000
  40b3b0:	f5a2 1296 	sub.w	r2, r2, #1228800	; 0x12c000
  40b3b4:	f6a2 628b 	subw	r2, r2, #3723	; 0xe8b
  40b3b8:	6542      	str	r2, [r0, #84]	; 0x54
    md5->digest[3] = 0x10325476L;
  40b3ba:	f1a2 3288 	sub.w	r2, r2, #2290649224	; 0x88888888
  40b3be:	6582      	str	r2, [r0, #88]	; 0x58
    md5->buffLen = 0;
  40b3c0:	2000      	movs	r0, #0

0040b3c2 <.LVL326>:
  40b3c2:	6018      	str	r0, [r3, #0]
    md5->loLen   = 0;
  40b3c4:	6058      	str	r0, [r3, #4]
    md5->hiLen   = 0;
  40b3c6:	6098      	str	r0, [r3, #8]

0040b3c8 <.LBE139>:
  40b3c8:	4770      	bx	lr

0040b3ca <.LVL328>:
        return BAD_FUNC_ARG;
  40b3ca:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040b3ce <.LVL329>:
}
  40b3ce:	4770      	bx	lr
  40b3d0:	67452301 	.word	0x67452301

Disassembly of section .text.SYS_TIME_ResourceLock%166:

0040b3d4 <SYS_TIME_ResourceLock>:
{
  40b3d4:	b508      	push	{r3, lr}

0040b3d6 <.LCFI9>:
    if (gSystemCounterObj.interruptNestingCount == 0)
  40b3d6:	4b0b      	ldr	r3, [pc, #44]	; (40b404 <.LVL92+0x6>)
  40b3d8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
  40b3dc:	b10b      	cbz	r3, 40b3e2 <.LCFI9+0xc>
    return true;
  40b3de:	2001      	movs	r0, #1
  40b3e0:	bd08      	pop	{r3, pc}
        if(OSAL_MUTEX_Lock(&gSystemCounterObj.timerMutex, OSAL_WAIT_FOREVER) == OSAL_RESULT_TRUE)
  40b3e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
  40b3e6:	4808      	ldr	r0, [pc, #32]	; (40b408 <.LVL92+0xa>)
  40b3e8:	f000 fa6a 	bl	40b8c0 <.LFE150>

0040b3ec <.LVL91>:
  40b3ec:	2801      	cmp	r0, #1
  40b3ee:	d001      	beq.n	40b3f4 <.LVL91+0x8>
            return false;
  40b3f0:	2000      	movs	r0, #0
}
  40b3f2:	bd08      	pop	{r3, pc}
            SYS_INT_SourceDisable(gSystemCounterObj.hwTimerIntNum);
  40b3f4:	4b03      	ldr	r3, [pc, #12]	; (40b404 <.LVL92+0x6>)
  40b3f6:	f993 0008 	ldrsb.w	r0, [r3, #8]
  40b3fa:	f7ff fe1b 	bl	40b034 <.LFE149>

0040b3fe <.LVL92>:
            return true;
  40b3fe:	2001      	movs	r0, #1
  40b400:	bd08      	pop	{r3, pc}
  40b402:	bf00      	nop
  40b404:	20417c00 	.word	0x20417c00
  40b408:	20417c34 	.word	0x20417c34

Disassembly of section .text.__mcmp%167:

0040b40c <__mcmp>:
  40b40c:	b430      	push	{r4, r5}

0040b40e <.LCFI12>:
  40b40e:	690b      	ldr	r3, [r1, #16]
  40b410:	4605      	mov	r5, r0
  40b412:	6900      	ldr	r0, [r0, #16]

0040b414 <.LVL212>:
  40b414:	1ac0      	subs	r0, r0, r3

0040b416 <.LVL213>:
  40b416:	d10f      	bne.n	40b438 <.LVL223>
  40b418:	009b      	lsls	r3, r3, #2

0040b41a <.LVL214>:
  40b41a:	3514      	adds	r5, #20

0040b41c <.LVL215>:
  40b41c:	3114      	adds	r1, #20

0040b41e <.LVL216>:
  40b41e:	4419      	add	r1, r3

0040b420 <.LVL217>:
  40b420:	442b      	add	r3, r5

0040b422 <.LVL218>:
  40b422:	e001      	b.n	40b428 <.LVL220>

0040b424 <.LVL219>:
  40b424:	429d      	cmp	r5, r3
  40b426:	d207      	bcs.n	40b438 <.LVL223>

0040b428 <.LVL220>:
  40b428:	f853 4d04 	ldr.w	r4, [r3, #-4]!

0040b42c <.LVL221>:
  40b42c:	f851 2d04 	ldr.w	r2, [r1, #-4]!

0040b430 <.LVL222>:
  40b430:	4294      	cmp	r4, r2
  40b432:	d0f7      	beq.n	40b424 <.LVL219>
  40b434:	d302      	bcc.n	40b43c <.LCFI14>
  40b436:	2001      	movs	r0, #1

0040b438 <.LVL223>:
  40b438:	bc30      	pop	{r4, r5}

0040b43a <.LCFI13>:
  40b43a:	4770      	bx	lr

0040b43c <.LCFI14>:
  40b43c:	f04f 30ff 	mov.w	r0, #4294967295

0040b440 <.LVL225>:
  40b440:	e7fa      	b.n	40b438 <.LVL223>

0040b442 <.LFE27>:
  40b442:	bf00      	nop

Disassembly of section .text.vListInsert%168:

0040b444 <vListInsert>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  40b444:	b430      	push	{r4, r5}

0040b446 <.LCFI0>:
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  40b446:	680d      	ldr	r5, [r1, #0]

0040b448 <.LVL6>:
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  40b448:	f1b5 3fff 	cmp.w	r5, #4294967295
  40b44c:	d002      	beq.n	40b454 <.LVL8>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40b44e:	f100 0208 	add.w	r2, r0, #8

0040b452 <.LVL7>:
  40b452:	e002      	b.n	40b45a <.LVL9+0x4>

0040b454 <.LVL8>:
		pxIterator = pxList->xListEnd.pxPrevious;
  40b454:	6902      	ldr	r2, [r0, #16]

0040b456 <.LVL9>:
  40b456:	e004      	b.n	40b462 <.LVL9+0xc>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40b458:	461a      	mov	r2, r3
  40b45a:	6853      	ldr	r3, [r2, #4]
  40b45c:	681c      	ldr	r4, [r3, #0]
  40b45e:	42a5      	cmp	r5, r4
  40b460:	d2fa      	bcs.n	40b458 <.LVL9+0x2>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  40b462:	6853      	ldr	r3, [r2, #4]
  40b464:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  40b466:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  40b468:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  40b46a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40b46c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  40b46e:	6803      	ldr	r3, [r0, #0]
  40b470:	3301      	adds	r3, #1
  40b472:	6003      	str	r3, [r0, #0]
}
  40b474:	bc30      	pop	{r4, r5}

0040b476 <.LCFI1>:
  40b476:	4770      	bx	lr

Disassembly of section .rodata.SHA384Expected%169:

0040b478 <SHA384Expected>:
  40b478:	50a5 1a56 3063 8e04 82fe 976a fee5 43d8     .PV.c0....j....C
  40b488:	1cfa 46e6 bfa9 6c54 43cb 2f3c 0ecb 8254     ...F..Tl.C</..T.
  40b498:	4c1c 5e94 9aed 2b59 f45b 5731 12e2 77f2     .L.^..Y+[.1W...w
  40b4a8:	0000 bf00                                   ....

Disassembly of section .text.__libc_fini_array%170:

0040b4ac <__libc_fini_array>:
  40b4ac:	b538      	push	{r3, r4, r5, lr}

0040b4ae <.LCFI0>:
  40b4ae:	4c0a      	ldr	r4, [pc, #40]	; (40b4d8 <.LVL6+0x2>)
  40b4b0:	4d0a      	ldr	r5, [pc, #40]	; (40b4dc <.LVL6+0x6>)
  40b4b2:	1b64      	subs	r4, r4, r5

0040b4b4 <.LVL0>:
  40b4b4:	10a4      	asrs	r4, r4, #2

0040b4b6 <.LVL1>:
  40b4b6:	d00a      	beq.n	40b4ce <.LVL4+0x4>
  40b4b8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40b4bc:	3b01      	subs	r3, #1
  40b4be:	eb05 0583 	add.w	r5, r5, r3, lsl #2

0040b4c2 <.LVL2>:
  40b4c2:	3c01      	subs	r4, #1

0040b4c4 <.LVL3>:
  40b4c4:	f855 3904 	ldr.w	r3, [r5], #-4
  40b4c8:	4798      	blx	r3

0040b4ca <.LVL4>:
  40b4ca:	2c00      	cmp	r4, #0
  40b4cc:	d1f9      	bne.n	40b4c2 <.LVL2>
  40b4ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

0040b4d2 <.LCFI1>:
  40b4d2:	f7f4 be53 	b.w	40017c <_fini>

0040b4d6 <.LVL6>:
  40b4d6:	bf00      	nop
  40b4d8:	0040018c 	.word	0x0040018c
  40b4dc:	00400188 	.word	0x00400188

Disassembly of section .text.xQueueGenericCreate%171:

0040b4e0 <xQueueGenericCreate>:
	{
  40b4e0:	b570      	push	{r4, r5, r6, lr}

0040b4e2 <.LCFI6>:
  40b4e2:	4606      	mov	r6, r0
  40b4e4:	460d      	mov	r5, r1

0040b4e6 <.LVL50>:
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40b4e6:	fb00 f001 	mul.w	r0, r0, r1

0040b4ea <.LVL51>:
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  40b4ea:	3048      	adds	r0, #72	; 0x48

0040b4ec <.LVL52>:
  40b4ec:	f7ff f9e6 	bl	40a8bc <.LFE156>

0040b4f0 <.LVL53>:
		if( pxNewQueue != NULL )
  40b4f0:	4604      	mov	r4, r0
  40b4f2:	b148      	cbz	r0, 40b508 <.LBE31>

0040b4f4 <.LBB27>:
	if( uxItemSize == ( UBaseType_t ) 0 )
  40b4f4:	b155      	cbz	r5, 40b50c <.LBB32>

0040b4f6 <.LBE27>:
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
  40b4f6:	f100 0348 	add.w	r3, r0, #72	; 0x48

0040b4fa <.LBB31>:
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
  40b4fa:	6003      	str	r3, [r0, #0]

0040b4fc <.LVL56>:
	pxNewQueue->uxLength = uxQueueLength;
  40b4fc:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
  40b4fe:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  40b500:	2101      	movs	r1, #1
  40b502:	4620      	mov	r0, r4

0040b504 <.LVL57>:
  40b504:	f7ff f896 	bl	40a634 <xQueueGenericReset>

0040b508 <.LBE31>:
	}
  40b508:	4620      	mov	r0, r4
  40b50a:	bd70      	pop	{r4, r5, r6, pc}

0040b50c <.LBB32>:
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  40b50c:	6020      	str	r0, [r4, #0]
  40b50e:	e7f5      	b.n	40b4fc <.LVL56>

Disassembly of section .text.xPortSysTickHandler%172:

0040b510 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
  40b510:	b508      	push	{r3, lr}

0040b512 <.LBB18>:
  40b512:	f04f 0320 	mov.w	r3, #32
  40b516:	b672      	cpsid	i
  40b518:	f383 8811 	msr	BASEPRI, r3
  40b51c:	f3bf 8f6f 	isb	sy
  40b520:	f3bf 8f4f 	dsb	sy
  40b524:	b662      	cpsie	i

0040b526 <.LBE18>:
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
  40b526:	f7fd fa35 	bl	408994 <xTaskIncrementTick>

0040b52a <.LVL11>:
  40b52a:	b118      	cbz	r0, 40b534 <.LBB20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  40b52c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40b530:	4b02      	ldr	r3, [pc, #8]	; (40b53c <.LVL13+0x2>)
  40b532:	601a      	str	r2, [r3, #0]

0040b534 <.LBB20>:
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  40b534:	2300      	movs	r3, #0
  40b536:	f383 8811 	msr	BASEPRI, r3

0040b53a <.LVL13>:
  40b53a:	bd08      	pop	{r3, pc}
  40b53c:	e000ed04 	.word	0xe000ed04

Disassembly of section .text.SYS_CONSOLE_Write%173:

0040b540 <SYS_CONSOLE_Write>:
    None.
*/

ssize_t SYS_CONSOLE_Write(const SYS_MODULE_INDEX index, int fd, const char *buf, size_t count )
{
    if (index >= SYS_CONSOLE_DEVICE_MAX_INSTANCES)
  40b540:	b970      	cbnz	r0, 40b560 <.LCFI9>
        return 0;

    if (consoleDeviceInstance[index].consoleDeviceInstanceStatus == SYS_STATUS_UNINITIALIZED
  40b542:	480a      	ldr	r0, [pc, #40]	; (40b56c <.LVL48>)

0040b544 <.LVL42>:
  40b544:	f990 0000 	ldrsb.w	r0, [r0]
  40b548:	b160      	cbz	r0, 40b564 <.LVL47+0x2>
{
  40b54a:	b538      	push	{r3, r4, r5, lr}

0040b54c <.LCFI8>:
            || consoleDeviceInstance[index].consoleInstanceDevDesc == NULL)
  40b54c:	4807      	ldr	r0, [pc, #28]	; (40b56c <.LVL48>)
  40b54e:	6845      	ldr	r5, [r0, #4]
  40b550:	b155      	cbz	r5, 40b568 <.LCFI10>
  40b552:	4614      	mov	r4, r2
  40b554:	4608      	mov	r0, r1
    {
        return 0;
    }

    return consoleDeviceInstance[index].consoleInstanceDevDesc->sysConsoleWrite(fd, buf, count);
  40b556:	68ed      	ldr	r5, [r5, #12]
  40b558:	461a      	mov	r2, r3

0040b55a <.LVL43>:
  40b55a:	4621      	mov	r1, r4

0040b55c <.LVL44>:
  40b55c:	47a8      	blx	r5

0040b55e <.LVL45>:
  40b55e:	bd38      	pop	{r3, r4, r5, pc}

0040b560 <.LCFI9>:
        return 0;
  40b560:	2000      	movs	r0, #0

0040b562 <.LVL47>:
  40b562:	4770      	bx	lr
        return 0;
  40b564:	2000      	movs	r0, #0
  40b566:	4770      	bx	lr

0040b568 <.LCFI10>:
  40b568:	2000      	movs	r0, #0
}
  40b56a:	bd38      	pop	{r3, r4, r5, pc}

0040b56c <.LVL48>:
  40b56c:	20417d44 	.word	0x20417d44

Disassembly of section .text.USART1_ErrorGet%174:

0040b570 <USART1_ErrorGet>:
    uint32_t status = USART1_REGS->US_CSR;
  40b570:	4b0a      	ldr	r3, [pc, #40]	; (40b59c <.LVL9+0xe>)
  40b572:	6958      	ldr	r0, [r3, #20]

0040b574 <.LVL6>:
    if(errors != USART_ERROR_NONE)
  40b574:	f010 00e0 	ands.w	r0, r0, #224	; 0xe0

0040b578 <.LVL7>:
  40b578:	d100      	bne.n	40b57c <.LBB14>
}
  40b57a:	4770      	bx	lr

0040b57c <.LBB14>:
    USART1_REGS->US_CR|= US_CR_RSTSTA_Msk;
  40b57c:	681a      	ldr	r2, [r3, #0]
  40b57e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  40b582:	601a      	str	r2, [r3, #0]
    while( US_CSR_RXRDY_Msk == (USART1_REGS->US_CSR& US_CSR_RXRDY_Msk) )
  40b584:	695b      	ldr	r3, [r3, #20]
  40b586:	f013 0f01 	tst.w	r3, #1
  40b58a:	d0f6      	beq.n	40b57a <.LVL7+0x2>
        dummyData = (USART1_REGS->US_RHR& US_RHR_RXCHR_Msk);
  40b58c:	4b03      	ldr	r3, [pc, #12]	; (40b59c <.LVL9+0xe>)

0040b58e <.LVL9>:
  40b58e:	699a      	ldr	r2, [r3, #24]
    while( US_CSR_RXRDY_Msk == (USART1_REGS->US_CSR& US_CSR_RXRDY_Msk) )
  40b590:	695a      	ldr	r2, [r3, #20]
  40b592:	f012 0f01 	tst.w	r2, #1
  40b596:	d1fa      	bne.n	40b58e <.LVL9>
  40b598:	e7ef      	b.n	40b57a <.LVL7+0x2>
  40b59a:	bf00      	nop
  40b59c:	40028000 	.word	0x40028000

Disassembly of section .text%175:

0040b5a0 <__aeabi_uldivmod>:
  40b5a0:	b953      	cbnz	r3, 40b5b8 <__aeabi_uldivmod+0x18>
  40b5a2:	b94a      	cbnz	r2, 40b5b8 <__aeabi_uldivmod+0x18>
  40b5a4:	2900      	cmp	r1, #0
  40b5a6:	bf08      	it	eq
  40b5a8:	2800      	cmpeq	r0, #0
  40b5aa:	bf1c      	itt	ne
  40b5ac:	f04f 31ff 	movne.w	r1, #4294967295
  40b5b0:	f04f 30ff 	movne.w	r0, #4294967295
  40b5b4:	f7fb bcd2 	b.w	406f5c <.LFE1>
  40b5b8:	f1ad 0c08 	sub.w	ip, sp, #8
  40b5bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40b5c0:	f7fb fb5e 	bl	406c80 <.LBE16>
  40b5c4:	f8dd e004 	ldr.w	lr, [sp, #4]
  40b5c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40b5cc:	b004      	add	sp, #16
  40b5ce:	4770      	bx	lr

Disassembly of section .text.prvResetNextTaskUnblockTime%176:

0040b5d0 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40b5d0:	4b08      	ldr	r3, [pc, #32]	; (40b5f4 <.LVL7+0x10>)
  40b5d2:	681b      	ldr	r3, [r3, #0]
  40b5d4:	681b      	ldr	r3, [r3, #0]
  40b5d6:	b13b      	cbz	r3, 40b5e8 <.LVL7+0x4>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  40b5d8:	4b06      	ldr	r3, [pc, #24]	; (40b5f4 <.LVL7+0x10>)
  40b5da:	681b      	ldr	r3, [r3, #0]

0040b5dc <.LVL4>:
  40b5dc:	68db      	ldr	r3, [r3, #12]

0040b5de <.LVL5>:
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
  40b5de:	68db      	ldr	r3, [r3, #12]

0040b5e0 <.LVL6>:
  40b5e0:	685a      	ldr	r2, [r3, #4]
  40b5e2:	4b05      	ldr	r3, [pc, #20]	; (40b5f8 <.LVL7+0x14>)

0040b5e4 <.LVL7>:
  40b5e4:	601a      	str	r2, [r3, #0]
  40b5e6:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  40b5e8:	f04f 32ff 	mov.w	r2, #4294967295
  40b5ec:	4b02      	ldr	r3, [pc, #8]	; (40b5f8 <.LVL7+0x14>)
  40b5ee:	601a      	str	r2, [r3, #0]
  40b5f0:	4770      	bx	lr
  40b5f2:	bf00      	nop
  40b5f4:	20417d68 	.word	0x20417d68
  40b5f8:	20417d8c 	.word	0x20417d8c

Disassembly of section .text.pxPortInitialiseStack%177:

0040b5fc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  40b5fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  40b600:	f840 3c04 	str.w	r3, [r0, #-4]

0040b604 <.LVL2>:
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
  40b604:	f021 0101 	bic.w	r1, r1, #1

0040b608 <.LVL3>:
  40b608:	f840 1c08 	str.w	r1, [r0, #-8]

0040b60c <.LVL4>:
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  40b60c:	4b05      	ldr	r3, [pc, #20]	; (40b624 <.LVL8+0x4>)
  40b60e:	f840 3c0c 	str.w	r3, [r0, #-12]

0040b612 <.LVL5>:
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  40b612:	f840 2c20 	str.w	r2, [r0, #-32]

0040b616 <.LVL6>:
	*pxTopOfStack = portINITIAL_EXC_RETURN;
  40b616:	f06f 0302 	mvn.w	r3, #2
  40b61a:	f840 3c24 	str.w	r3, [r0, #-36]

0040b61e <.LVL7>:
}
  40b61e:	3844      	subs	r0, #68	; 0x44

0040b620 <.LVL8>:
  40b620:	4770      	bx	lr
  40b622:	bf00      	nop
  40b624:	0040b7c5 	.word	0x0040b7c5

Disassembly of section .text.APP_DisplayHash%178:

0040b628 <APP_DisplayHash>:
    while (hashSz--) {
  40b628:	b179      	cbz	r1, 40b64a <.LCFI2>
void APP_DisplayHash(uint8_t *hash, uint32_t hashSz) {
  40b62a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0040b62c <.LCFI1>:
  40b62c:	4604      	mov	r4, r0
  40b62e:	460e      	mov	r6, r1
  40b630:	4406      	add	r6, r0
        sprintf(printBuffer, "%s%02X", printBuffer, *hash++);
  40b632:	4d06      	ldr	r5, [pc, #24]	; (40b64c <.LCFI2+0x2>)
  40b634:	4f06      	ldr	r7, [pc, #24]	; (40b650 <.LCFI2+0x6>)

0040b636 <.LVL2>:
  40b636:	f814 3b01 	ldrb.w	r3, [r4], #1

0040b63a <.LVL3>:
  40b63a:	462a      	mov	r2, r5
  40b63c:	4639      	mov	r1, r7
  40b63e:	4628      	mov	r0, r5
  40b640:	f7ff fc1c 	bl	40ae7c <.LFE157>

0040b644 <.LVL4>:
    while (hashSz--) {
  40b644:	42a6      	cmp	r6, r4
  40b646:	d1f6      	bne.n	40b636 <.LVL2>
  40b648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0040b64a <.LCFI2>:
  40b64a:	4770      	bx	lr
  40b64c:	20400488 	.word	0x20400488
  40b650:	0040878c 	.word	0x0040878c

Disassembly of section .text.SYS_TIME_UpdateTimerList%179:

0040b654 <SYS_TIME_UpdateTimerList>:
    tmr = counterObj->tmrActive;
  40b654:	4b09      	ldr	r3, [pc, #36]	; (40b67c <.LVL76+0x8>)
  40b656:	6b1a      	ldr	r2, [r3, #48]	; 0x30

0040b658 <.LVL72>:
    while ((tmr != NULL) && (elapsedCount > 0))
  40b658:	b162      	cbz	r2, 40b674 <.LVL76>
  40b65a:	b158      	cbz	r0, 40b674 <.LVL76>
            tmr->relativeTimePending = 0;
  40b65c:	2100      	movs	r1, #0
  40b65e:	e004      	b.n	40b66a <.LVL75+0x4>
            elapsedCount -= tmr->relativeTimePending;
  40b660:	1ac0      	subs	r0, r0, r3

0040b662 <.LVL73>:
            tmr->relativeTimePending = 0;
  40b662:	6091      	str	r1, [r2, #8]

0040b664 <.LVL74>:
        tmr = tmr->tmrNext;
  40b664:	6992      	ldr	r2, [r2, #24]

0040b666 <.LVL75>:
    while ((tmr != NULL) && (elapsedCount > 0))
  40b666:	b12a      	cbz	r2, 40b674 <.LVL76>
  40b668:	b120      	cbz	r0, 40b674 <.LVL76>
        if (tmr->relativeTimePending >= elapsedCount)
  40b66a:	6893      	ldr	r3, [r2, #8]
  40b66c:	4283      	cmp	r3, r0
  40b66e:	d3f7      	bcc.n	40b660 <.LVL72+0x8>
            tmr->relativeTimePending -= elapsedCount;
  40b670:	1a1b      	subs	r3, r3, r0
  40b672:	6093      	str	r3, [r2, #8]

0040b674 <.LVL76>:
    counterObj->hwTimerPreviousValue = counterObj->hwTimerCurrentValue;
  40b674:	4b01      	ldr	r3, [pc, #4]	; (40b67c <.LVL76+0x8>)
  40b676:	695a      	ldr	r2, [r3, #20]
  40b678:	611a      	str	r2, [r3, #16]
  40b67a:	4770      	bx	lr
  40b67c:	20417c00 	.word	0x20417c00

Disassembly of section .text.__ascii_mbtowc%180:

0040b680 <__ascii_mbtowc>:
  40b680:	b082      	sub	sp, #8

0040b682 <.LCFI2>:
  40b682:	b149      	cbz	r1, 40b698 <.LCFI4>
  40b684:	b15a      	cbz	r2, 40b69e <.LVL9+0x4>
  40b686:	b16b      	cbz	r3, 40b6a4 <.LCFI6>
  40b688:	7813      	ldrb	r3, [r2, #0]

0040b68a <.LVL4>:
  40b68a:	600b      	str	r3, [r1, #0]
  40b68c:	7812      	ldrb	r2, [r2, #0]

0040b68e <.LVL5>:
  40b68e:	1c10      	adds	r0, r2, #0

0040b690 <.LVL6>:
  40b690:	bf18      	it	ne
  40b692:	2001      	movne	r0, #1
  40b694:	b002      	add	sp, #8

0040b696 <.LCFI3>:
  40b696:	4770      	bx	lr

0040b698 <.LCFI4>:
  40b698:	a901      	add	r1, sp, #4

0040b69a <.LVL9>:
  40b69a:	2a00      	cmp	r2, #0
  40b69c:	d1f3      	bne.n	40b686 <.LCFI2+0x4>
  40b69e:	4610      	mov	r0, r2

0040b6a0 <.LVL10>:
  40b6a0:	b002      	add	sp, #8

0040b6a2 <.LCFI5>:
  40b6a2:	4770      	bx	lr

0040b6a4 <.LCFI6>:
  40b6a4:	f06f 0001 	mvn.w	r0, #1

0040b6a8 <.LVL13>:
  40b6a8:	e7f4      	b.n	40b694 <.LVL6+0x4>

0040b6aa <.LFE18>:
  40b6aa:	bf00      	nop

Disassembly of section .text._sbrk%181:

0040b6ac <_sbrk>:
  40b6ac:	4a07      	ldr	r2, [pc, #28]	; (40b6cc <_sbrk+0x20>)
  40b6ae:	6813      	ldr	r3, [r2, #0]
  40b6b0:	b143      	cbz	r3, 40b6c4 <_sbrk+0x18>
  40b6b2:	4907      	ldr	r1, [pc, #28]	; (40b6d0 <_sbrk+0x24>)
  40b6b4:	4418      	add	r0, r3
  40b6b6:	4288      	cmp	r0, r1
  40b6b8:	bf9a      	itte	ls
  40b6ba:	6010      	strls	r0, [r2, #0]
  40b6bc:	4618      	movls	r0, r3
  40b6be:	f04f 30ff 	movhi.w	r0, #4294967295
  40b6c2:	4770      	bx	lr
  40b6c4:	4b03      	ldr	r3, [pc, #12]	; (40b6d4 <_sbrk+0x28>)
  40b6c6:	6013      	str	r3, [r2, #0]
  40b6c8:	e7f3      	b.n	40b6b2 <_sbrk+0x6>
  40b6ca:	bf00      	nop
  40b6cc:	20417dc8 	.word	0x20417dc8
  40b6d0:	20417dd0 	.word	0x20417dd0
  40b6d4:	20417dd0 	.word	0x20417dd0

Disassembly of section .text.uxListRemove%182:

0040b6d8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  40b6d8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  40b6da:	6842      	ldr	r2, [r0, #4]
  40b6dc:	6881      	ldr	r1, [r0, #8]
  40b6de:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  40b6e0:	6882      	ldr	r2, [r0, #8]
  40b6e2:	6841      	ldr	r1, [r0, #4]
  40b6e4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  40b6e6:	685a      	ldr	r2, [r3, #4]
  40b6e8:	4290      	cmp	r0, r2
  40b6ea:	d006      	beq.n	40b6fa <.LVL15>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  40b6ec:	2200      	movs	r2, #0
  40b6ee:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  40b6f0:	681a      	ldr	r2, [r3, #0]
  40b6f2:	3a01      	subs	r2, #1
  40b6f4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  40b6f6:	6818      	ldr	r0, [r3, #0]

0040b6f8 <.LVL14>:
}
  40b6f8:	4770      	bx	lr

0040b6fa <.LVL15>:
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  40b6fa:	6882      	ldr	r2, [r0, #8]
  40b6fc:	605a      	str	r2, [r3, #4]
  40b6fe:	e7f5      	b.n	40b6ec <uxListRemove+0x14>

Disassembly of section .text.prvPortStartFirstTask%183:

0040b700 <prvPortStartFirstTask>:
	__asm volatile(
  40b700:	4808      	ldr	r0, [pc, #32]	; (40b724 <.LFE7+0x2>)
  40b702:	6800      	ldr	r0, [r0, #0]
  40b704:	6800      	ldr	r0, [r0, #0]
  40b706:	f380 8808 	msr	MSP, r0
  40b70a:	f04f 0000 	mov.w	r0, #0
  40b70e:	f380 8814 	msr	CONTROL, r0
  40b712:	b662      	cpsie	i
  40b714:	b661      	cpsie	f
  40b716:	f3bf 8f4f 	dsb	sy
  40b71a:	f3bf 8f6f 	isb	sy
  40b71e:	df00      	svc	0
  40b720:	bf00      	nop

0040b722 <.LFE7>:
  40b722:	0000      	.short	0x0000
  40b724:	e000ed08 	.word	0xe000ed08

Disassembly of section .text.vPortSetupTimerInterrupt%184:

0040b728 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
  40b728:	4b05      	ldr	r3, [pc, #20]	; (40b740 <vPortSetupTimerInterrupt+0x18>)
  40b72a:	2200      	movs	r2, #0
  40b72c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
  40b72e:	4905      	ldr	r1, [pc, #20]	; (40b744 <vPortSetupTimerInterrupt+0x1c>)
  40b730:	600a      	str	r2, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  40b732:	4905      	ldr	r1, [pc, #20]	; (40b748 <vPortSetupTimerInterrupt+0x20>)
  40b734:	4a05      	ldr	r2, [pc, #20]	; (40b74c <vPortSetupTimerInterrupt+0x24>)
  40b736:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  40b738:	2207      	movs	r2, #7
  40b73a:	601a      	str	r2, [r3, #0]
  40b73c:	4770      	bx	lr
  40b73e:	bf00      	nop
  40b740:	e000e010 	.word	0xe000e010
  40b744:	e000e018 	.word	0xe000e018
  40b748:	000493df 	.word	0x000493df
  40b74c:	e000e014 	.word	0xe000e014

Disassembly of section .text.TC0_CH0_TimerInitialize%185:

0040b750 <TC0_CH0_TimerInitialize>:

/* Initialize channel in timer mode */
void TC0_CH0_TimerInitialize (void)
{
    /* Use peripheral clock */
    TC0_REGS->TC_CHANNEL[0].TC_EMR = TC_EMR_NODIVCLK_Msk;
  40b750:	4b07      	ldr	r3, [pc, #28]	; (40b770 <.LFE14+0x20>)
  40b752:	f44f 7280 	mov.w	r2, #256	; 0x100
  40b756:	631a      	str	r2, [r3, #48]	; 0x30
    /* clock selection and waveform selection */
    TC0_REGS->TC_CHANNEL[0].TC_CMR =  TC_CMR_WAVSEL_UP_RC | TC_CMR_WAVE_Msk ;
  40b758:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  40b75c:	605a      	str	r2, [r3, #4]

    /* write period */
    TC0_REGS->TC_CHANNEL[0].TC_RC = 60000U;
  40b75e:	f64e 2260 	movw	r2, #60000	; 0xea60
  40b762:	61da      	str	r2, [r3, #28]


    /* enable interrupt */
    TC0_REGS->TC_CHANNEL[0].TC_IER = TC_IER_CPAS_Msk;
  40b764:	2204      	movs	r2, #4
  40b766:	625a      	str	r2, [r3, #36]	; 0x24
    TC0_CH0_CallbackObj.callback_fn = NULL;
  40b768:	2200      	movs	r2, #0
  40b76a:	4b02      	ldr	r3, [pc, #8]	; (40b774 <.LFE14+0x24>)
  40b76c:	601a      	str	r2, [r3, #0]
  40b76e:	4770      	bx	lr
  40b770:	4000c000 	.word	0x4000c000
  40b774:	2040044c 	.word	0x2040044c

Disassembly of section .rodata.__mprec_bigtens%186:

0040b778 <__mprec_bigtens>:
  40b778:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40b788:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40b798:	7f73bf3c 75154fdd                       <.s..O.u

Disassembly of section .text.xQueueCreateMutex%187:

0040b7a0 <xQueueCreateMutex>:
	{
  40b7a0:	b510      	push	{r4, lr}

0040b7a2 <.LCFI12>:
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
  40b7a2:	4602      	mov	r2, r0
  40b7a4:	2100      	movs	r1, #0
  40b7a6:	2001      	movs	r0, #1

0040b7a8 <.LVL97>:
  40b7a8:	f7ff fe9a 	bl	40b4e0 <.LFE0>

0040b7ac <.LBB39>:
		if( pxNewQueue != NULL )
  40b7ac:	4604      	mov	r4, r0
  40b7ae:	b138      	cbz	r0, 40b7c0 <.LBE39>
			pxNewQueue->pxMutexHolder = NULL;
  40b7b0:	2100      	movs	r1, #0
  40b7b2:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
  40b7b4:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
  40b7b6:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
  40b7b8:	460b      	mov	r3, r1
  40b7ba:	460a      	mov	r2, r1
  40b7bc:	f7fc fc8a 	bl	4080d4 <L0>

0040b7c0 <.LBE39>:
	}
  40b7c0:	4620      	mov	r0, r4
  40b7c2:	bd10      	pop	{r4, pc}

Disassembly of section .text.prvTaskExitError%188:

0040b7c4 <prvTaskExitError>:
{
  40b7c4:	b082      	sub	sp, #8

0040b7c6 <.LCFI0>:
volatile uint32_t ulDummy = 0;
  40b7c6:	2300      	movs	r3, #0
  40b7c8:	9301      	str	r3, [sp, #4]

0040b7ca <.LBB12>:
	__asm volatile
  40b7ca:	f04f 0320 	mov.w	r3, #32
  40b7ce:	b672      	cpsid	i
  40b7d0:	f383 8811 	msr	BASEPRI, r3
  40b7d4:	f3bf 8f6f 	isb	sy
  40b7d8:	f3bf 8f4f 	dsb	sy
  40b7dc:	b662      	cpsie	i

0040b7de <.LBE12>:
	while( ulDummy == 0 )
  40b7de:	9b01      	ldr	r3, [sp, #4]
  40b7e0:	2b00      	cmp	r3, #0
  40b7e2:	d0fc      	beq.n	40b7de <.LBE12>
}
  40b7e4:	b002      	add	sp, #8

0040b7e6 <.LCFI1>:
  40b7e6:	4770      	bx	lr

Disassembly of section .text.SVCall_Handler%189:

0040b7f0 <SVCall_Handler>:
	__asm volatile (
  40b7f0:	4b07      	ldr	r3, [pc, #28]	; (40b810 <pxCurrentTCBConst2>)
  40b7f2:	6819      	ldr	r1, [r3, #0]
  40b7f4:	6808      	ldr	r0, [r1, #0]
  40b7f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b7fa:	f380 8809 	msr	PSP, r0
  40b7fe:	f3bf 8f6f 	isb	sy
  40b802:	f04f 0000 	mov.w	r0, #0
  40b806:	f380 8811 	msr	BASEPRI, r0
  40b80a:	4770      	bx	lr
  40b80c:	f3af 8000 	nop.w

0040b810 <pxCurrentTCBConst2>:
  40b810:	20417d64 	.word	0x20417d64

Disassembly of section .text.vPortEnterCritical%190:

0040b814 <vPortEnterCritical>:
  40b814:	f04f 0320 	mov.w	r3, #32
  40b818:	b672      	cpsid	i
  40b81a:	f383 8811 	msr	BASEPRI, r3
  40b81e:	f3bf 8f6f 	isb	sy
  40b822:	f3bf 8f4f 	dsb	sy
  40b826:	b662      	cpsie	i

0040b828 <.LBE14>:
	uxCriticalNesting++;
  40b828:	4a02      	ldr	r2, [pc, #8]	; (40b834 <.LBE14+0xc>)
  40b82a:	6813      	ldr	r3, [r2, #0]
  40b82c:	3301      	adds	r3, #1
  40b82e:	6013      	str	r3, [r2, #0]
  40b830:	4770      	bx	lr
  40b832:	bf00      	nop
  40b834:	20417da8 	.word	0x20417da8

Disassembly of section .rodata.SHA256Expected%191:

0040b838 <SHA256Expected>:
  40b838:	754aa885 528a6e88 e1c4be6d fa75336e     ..Ju.n.Rm...n3u.
  40b848:	aeb407a3 edc979ad 47c06432 ba6e6f7a     .....y..2d.Gzon.
  40b858:	bf000000                                ....

Disassembly of section .text._sbrk_r%192:

0040b85c <_sbrk_r>:
  40b85c:	b538      	push	{r3, r4, r5, lr}

0040b85e <.LCFI0>:
  40b85e:	4c07      	ldr	r4, [pc, #28]	; (40b87c <.LVL4>)
  40b860:	2300      	movs	r3, #0
  40b862:	4605      	mov	r5, r0
  40b864:	4608      	mov	r0, r1

0040b866 <.LVL1>:
  40b866:	6023      	str	r3, [r4, #0]
  40b868:	f7ff ff20 	bl	40b6ac <_sbrk>

0040b86c <.LVL2>:
  40b86c:	1c43      	adds	r3, r0, #1
  40b86e:	d000      	beq.n	40b872 <.LVL2+0x6>
  40b870:	bd38      	pop	{r3, r4, r5, pc}
  40b872:	6823      	ldr	r3, [r4, #0]
  40b874:	2b00      	cmp	r3, #0
  40b876:	d0fb      	beq.n	40b870 <.LVL2+0x4>
  40b878:	602b      	str	r3, [r5, #0]
  40b87a:	bd38      	pop	{r3, r4, r5, pc}

0040b87c <.LVL4>:
  40b87c:	20400484 	.word	0x20400484

Disassembly of section .text.Console_UART_ReadC%193:

00408f20 <Console_UART_ReadC>:
{
  408f20:	b500      	push	{lr}

00408f22 <.LCFI1>:
  408f22:	b083      	sub	sp, #12

00408f24 <.LCFI2>:
    USART1_Read(&readBuffer, 1);
  408f24:	2101      	movs	r1, #1
  408f26:	f10d 0007 	add.w	r0, sp, #7

00408f2a <.LVL13>:
  408f2a:	f002 f9fd 	bl	40b328 <.LFE145>

00408f2e <.LVL14>:
    while (USART1_ReadCountGet() == 0);
  408f2e:	f002 ff81 	bl	40be34 <.LFE149>

00408f32 <.LVL15>:
  408f32:	2800      	cmp	r0, #0
  408f34:	d0fb      	beq.n	408f2e <.LVL14>
}
  408f36:	f89d 0007 	ldrb.w	r0, [sp, #7]
  408f3a:	b003      	add	sp, #12

00408f3c <.LCFI3>:
  408f3c:	f85d fb04 	ldr.w	pc, [sp], #4

Disassembly of section .text.SYS_DEBUG_Initialize%194:

0040b880 <SYS_DEBUG_Initialize>:

SYS_MODULE_OBJ SYS_DEBUG_Initialize(const SYS_MODULE_INDEX index, const SYS_MODULE_INIT * const init )
{
    SYS_DEBUG_INIT *initConfig = (SYS_DEBUG_INIT*)init;

    gblErrLvl = initConfig->errorLevel;
  40b880:	784a      	ldrb	r2, [r1, #1]
  40b882:	4b05      	ldr	r3, [pc, #20]	; (40b898 <.LVL1+0xa>)
  40b884:	701a      	strb	r2, [r3, #0]

    sysDebugInstance.debugConsole = initConfig->consoleIndex;
  40b886:	884a      	ldrh	r2, [r1, #2]
  40b888:	4b04      	ldr	r3, [pc, #16]	; (40b89c <.LVL1+0xe>)
  40b88a:	805a      	strh	r2, [r3, #2]
    sysDebugInstance.state = SYS_DEBUG_STATE_IDLE;
  40b88c:	2000      	movs	r0, #0

0040b88e <.LVL1>:
  40b88e:	7058      	strb	r0, [r3, #1]
    sysDebugInstance.status = SYS_STATUS_READY;
  40b890:	2202      	movs	r2, #2
  40b892:	701a      	strb	r2, [r3, #0]
    sysDebugInstance.prtBufPtr = 0;
  40b894:	6058      	str	r0, [r3, #4]

    return SYS_MODULE_OBJ_STATIC;
}
  40b896:	4770      	bx	lr
  40b898:	20400448 	.word	0x20400448
  40b89c:	20400440 	.word	0x20400440

Disassembly of section .text.TC0_CH0_InterruptHandler%195:

0040b8a0 <TC0_CH0_InterruptHandler>:
    TC0_CH0_CallbackObj.callback_fn = callback;
    TC0_CH0_CallbackObj.context = context;
}

void TC0_CH0_InterruptHandler(void)
{
  40b8a0:	b508      	push	{r3, lr}

0040b8a2 <.LCFI0>:
    TC_TIMER_STATUS timer_status = TC0_REGS->TC_CHANNEL[0].TC_SR & TC_TIMER_STATUS_MSK;
  40b8a2:	4b05      	ldr	r3, [pc, #20]	; (40b8b8 <.LVL4+0x8>)
  40b8a4:	6a18      	ldr	r0, [r3, #32]

0040b8a6 <.LVL3>:
    /* Call registered callback function */
    if (TC0_CH0_CallbackObj.callback_fn != NULL)
  40b8a6:	4b05      	ldr	r3, [pc, #20]	; (40b8bc <.LVL4+0xc>)
  40b8a8:	681b      	ldr	r3, [r3, #0]
  40b8aa:	b123      	cbz	r3, 40b8b6 <.LVL4+0x6>
  40b8ac:	f000 0014 	and.w	r0, r0, #20

0040b8b0 <.LVL4>:
    {
        TC0_CH0_CallbackObj.callback_fn(timer_status, TC0_CH0_CallbackObj.context);
  40b8b0:	4a02      	ldr	r2, [pc, #8]	; (40b8bc <.LVL4+0xc>)
  40b8b2:	6851      	ldr	r1, [r2, #4]
  40b8b4:	4798      	blx	r3
  40b8b6:	bd08      	pop	{r3, pc}
  40b8b8:	4000c000 	.word	0x4000c000
  40b8bc:	2040044c 	.word	0x2040044c

Disassembly of section .text.OSAL_MUTEX_Lock%196:

0040b8c0 <OSAL_MUTEX_Lock>:

  Remarks:

 */
OSAL_RESULT OSAL_MUTEX_Lock(OSAL_MUTEX_HANDLE_TYPE* mutexID, uint16_t waitMS)
{
  40b8c0:	b508      	push	{r3, lr}

0040b8c2 <.LCFI14>:
   }
   else
   {
      timeout = (TickType_t)(waitMS / portTICK_PERIOD_MS);
   }
   if (xSemaphoreTake(*(SemaphoreHandle_t*)mutexID, timeout) == pdTRUE)
  40b8c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40b8c6:	4299      	cmp	r1, r3
  40b8c8:	bf08      	it	eq
  40b8ca:	f04f 31ff 	moveq.w	r1, #4294967295

0040b8ce <.LVL52>:
  40b8ce:	6800      	ldr	r0, [r0, #0]

0040b8d0 <.LVL53>:
  40b8d0:	f7fc fa0e 	bl	407cf0 <.LFE1>

0040b8d4 <.LVL54>:
      return OSAL_RESULT_TRUE;
   else
      return OSAL_RESULT_FALSE;
}
  40b8d4:	2801      	cmp	r0, #1
  40b8d6:	bf14      	ite	ne
  40b8d8:	2000      	movne	r0, #0
  40b8da:	2001      	moveq	r0, #1
  40b8dc:	bd08      	pop	{r3, pc}

Disassembly of section .text.vTaskPlaceOnEventList%197:

0040b8e0 <vTaskPlaceOnEventList>:
{
  40b8e0:	b510      	push	{r4, lr}

0040b8e2 <.LCFI22>:
  40b8e2:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40b8e4:	4b04      	ldr	r3, [pc, #16]	; (40b8f8 <.LVL237>)
  40b8e6:	6819      	ldr	r1, [r3, #0]

0040b8e8 <.LVL234>:
  40b8e8:	3118      	adds	r1, #24
  40b8ea:	f7ff fdab 	bl	40b444 <vListInsert>

0040b8ee <.LVL235>:
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
  40b8ee:	2101      	movs	r1, #1
  40b8f0:	4620      	mov	r0, r4
  40b8f2:	f7fe fcff 	bl	40a2f4 <prvAddCurrentTaskToDelayedList>

0040b8f6 <.LVL236>:
  40b8f6:	bd10      	pop	{r4, pc}

0040b8f8 <.LVL237>:
  40b8f8:	20417d64 	.word	0x20417d64

Disassembly of section .text.pvTaskIncrementMutexHeldCount%198:

0040b8fc <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
  40b8fc:	4b05      	ldr	r3, [pc, #20]	; (40b914 <.LFE27+0x18>)
  40b8fe:	681b      	ldr	r3, [r3, #0]
  40b900:	b123      	cbz	r3, 40b90c <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
  40b902:	4b04      	ldr	r3, [pc, #16]	; (40b914 <.LFE27+0x18>)
  40b904:	681a      	ldr	r2, [r3, #0]
  40b906:	6c93      	ldr	r3, [r2, #72]	; 0x48
  40b908:	3301      	adds	r3, #1
  40b90a:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
  40b90c:	4b01      	ldr	r3, [pc, #4]	; (40b914 <.LFE27+0x18>)
  40b90e:	6818      	ldr	r0, [r3, #0]
	}
  40b910:	4770      	bx	lr
  40b912:	bf00      	nop
  40b914:	20417d64 	.word	0x20417d64

Disassembly of section .text.SYS_CONSOLE_Tasks%199:

0040b918 <SYS_CONSOLE_Tasks>:
{
  40b918:	b508      	push	{r3, lr}

0040b91a <.LCFI6>:
    if (consoleDeviceInstance[(SYS_MODULE_INDEX)object].consoleInstanceDevDesc == NULL)
  40b91a:	b283      	uxth	r3, r0
  40b91c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40b920:	4a03      	ldr	r2, [pc, #12]	; (40b930 <.LVL31+0x2>)
  40b922:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40b926:	685b      	ldr	r3, [r3, #4]
  40b928:	b10b      	cbz	r3, 40b92e <.LVL31>
    consoleDeviceInstance[(SYS_MODULE_INDEX)object].consoleInstanceDevDesc->sysConsoleTasks(object);
  40b92a:	695b      	ldr	r3, [r3, #20]
  40b92c:	4798      	blx	r3

0040b92e <.LVL31>:
  40b92e:	bd08      	pop	{r3, pc}
  40b930:	20417d44 	.word	0x20417d44

Disassembly of section .text.popQueue%200:

0040b934 <popQueue>:
    (q->tailPos < (q->elemArrSz - 1)) ? q->tailPos++ : (q->tailPos = 0);
  40b934:	6802      	ldr	r2, [r0, #0]
  40b936:	6903      	ldr	r3, [r0, #16]
  40b938:	3b01      	subs	r3, #1
  40b93a:	429a      	cmp	r2, r3
  40b93c:	d305      	bcc.n	40b94a <popQueue+0x16>
  40b93e:	2300      	movs	r3, #0
  40b940:	6003      	str	r3, [r0, #0]
    q->numElem--;
  40b942:	6883      	ldr	r3, [r0, #8]
  40b944:	3b01      	subs	r3, #1
  40b946:	6083      	str	r3, [r0, #8]
  40b948:	4770      	bx	lr
    (q->tailPos < (q->elemArrSz - 1)) ? q->tailPos++ : (q->tailPos = 0);
  40b94a:	3201      	adds	r2, #1
  40b94c:	6002      	str	r2, [r0, #0]
  40b94e:	e7f8      	b.n	40b942 <popQueue+0xe>

Disassembly of section .text.SYS_TIME_Counter64Update%201:

0040b950 <SYS_TIME_Counter64Update>:
    uint32_t prevSwCounter32Bit = counterObj->swCounter64Low;
  40b950:	4a05      	ldr	r2, [pc, #20]	; (40b968 <.LVL30+0x8>)
  40b952:	6a53      	ldr	r3, [r2, #36]	; 0x24

0040b954 <.LVL26>:
    newSwCounter32Bit = prevSwCounter32Bit + elapsedCount;
  40b954:	4418      	add	r0, r3

0040b956 <.LBE10>:
    counterObj->swCounter64Low = SYS_TIME_Counter32Update(elapsedCount, &isSwCounter32Oveflow);
  40b956:	6250      	str	r0, [r2, #36]	; 0x24
    if (isSwCounter32Oveflow == true)
  40b958:	4283      	cmp	r3, r0
  40b95a:	d800      	bhi.n	40b95e <.LVL29>

0040b95c <.LVL28>:
  40b95c:	4770      	bx	lr

0040b95e <.LVL29>:
        counterObj->swCounter64High++;
  40b95e:	6a93      	ldr	r3, [r2, #40]	; 0x28

0040b960 <.LVL30>:
  40b960:	3301      	adds	r3, #1
  40b962:	6293      	str	r3, [r2, #40]	; 0x28
}
  40b964:	e7fa      	b.n	40b95c <.LVL28>
  40b966:	bf00      	nop
  40b968:	20417c00 	.word	0x20417c00

Disassembly of section .text.__ascii_wctomb%202:

0040b96c <__ascii_wctomb>:
  40b96c:	b121      	cbz	r1, 40b978 <.LVL4>
  40b96e:	2aff      	cmp	r2, #255	; 0xff
  40b970:	d804      	bhi.n	40b97c <.LVL6>
  40b972:	700a      	strb	r2, [r1, #0]
  40b974:	2001      	movs	r0, #1

0040b976 <.LVL3>:
  40b976:	4770      	bx	lr

0040b978 <.LVL4>:
  40b978:	4608      	mov	r0, r1

0040b97a <.LVL5>:
  40b97a:	4770      	bx	lr

0040b97c <.LVL6>:
  40b97c:	238a      	movs	r3, #138	; 0x8a

0040b97e <.LVL7>:
  40b97e:	6003      	str	r3, [r0, #0]
  40b980:	f04f 30ff 	mov.w	r0, #4294967295

0040b984 <.LVL8>:
  40b984:	4770      	bx	lr

0040b986 <.LFE18>:
  40b986:	bf00      	nop

Disassembly of section .text._localeconv_r%203:

0040b988 <_localeconv_r>:
  40b988:	4a04      	ldr	r2, [pc, #16]	; (40b99c <.LBE19+0x6>)
  40b98a:	4b05      	ldr	r3, [pc, #20]	; (40b9a0 <.LBE19+0xa>)
  40b98c:	6812      	ldr	r2, [r2, #0]
  40b98e:	6b50      	ldr	r0, [r2, #52]	; 0x34

0040b990 <.LVL3>:
  40b990:	2800      	cmp	r0, #0
  40b992:	bf08      	it	eq
  40b994:	4618      	moveq	r0, r3

0040b996 <.LBE19>:
  40b996:	30f0      	adds	r0, #240	; 0xf0
  40b998:	4770      	bx	lr
  40b99a:	bf00      	nop
  40b99c:	20417db0 	.word	0x20417db0
  40b9a0:	20417850 	.word	0x20417850

Disassembly of section .text.BSP_Initialize%204:

0040b9a4 <BSP_Initialize>:
void BSP_Initialize(void )
{


    /* Switch off LEDs */
		LED1_Off(); 
  40b9a4:	2220      	movs	r2, #32
  40b9a6:	4b04      	ldr	r3, [pc, #16]	; (40b9b8 <.LFE18+0x14>)
  40b9a8:	631a      	str	r2, [r3, #48]	; 0x30
		LED2_Off(); 
  40b9aa:	f44f 7280 	mov.w	r2, #256	; 0x100
  40b9ae:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40b9b2:	631a      	str	r2, [r3, #48]	; 0x30
  40b9b4:	4770      	bx	lr
  40b9b6:	bf00      	nop
  40b9b8:	400e0e00 	.word	0x400e0e00

Disassembly of section .text.vListInsertEnd%205:

0040b9bc <vListInsertEnd>:
ListItem_t * const pxIndex = pxList->pxIndex;
  40b9bc:	6843      	ldr	r3, [r0, #4]

0040b9be <.LVL3>:
	pxNewListItem->pxNext = pxIndex;
  40b9be:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  40b9c0:	689a      	ldr	r2, [r3, #8]
  40b9c2:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
  40b9c4:	689a      	ldr	r2, [r3, #8]
  40b9c6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  40b9c8:	6099      	str	r1, [r3, #8]
	pxNewListItem->pvContainer = ( void * ) pxList;
  40b9ca:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
  40b9cc:	6803      	ldr	r3, [r0, #0]

0040b9ce <.LVL4>:
  40b9ce:	3301      	adds	r3, #1
  40b9d0:	6003      	str	r3, [r0, #0]
  40b9d2:	4770      	bx	lr

Disassembly of section .text.vTaskInternalSetTimeOutState%206:

0040b9d4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  40b9d4:	4b03      	ldr	r3, [pc, #12]	; (40b9e4 <.LFE6+0x10>)
  40b9d6:	681b      	ldr	r3, [r3, #0]
  40b9d8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  40b9da:	4b03      	ldr	r3, [pc, #12]	; (40b9e8 <.LFE6+0x14>)
  40b9dc:	681b      	ldr	r3, [r3, #0]
  40b9de:	6043      	str	r3, [r0, #4]
  40b9e0:	4770      	bx	lr
  40b9e2:	bf00      	nop
  40b9e4:	20417d90 	.word	0x20417d90
  40b9e8:	20417d98 	.word	0x20417d98

Disassembly of section .text.OSAL_MUTEX_Create%207:

0040b9ec <OSAL_MUTEX_Create>:
    if (*(SemaphoreHandle_t*)mutexID != NULL)
  40b9ec:	6803      	ldr	r3, [r0, #0]
  40b9ee:	b10b      	cbz	r3, 40b9f4 <.LVL42>
        return OSAL_RESULT_FALSE;
  40b9f0:	2000      	movs	r0, #0

0040b9f2 <.LVL41>:
  40b9f2:	4770      	bx	lr

0040b9f4 <.LVL42>:
{
  40b9f4:	b510      	push	{r4, lr}

0040b9f6 <.LCFI11>:
  40b9f6:	4604      	mov	r4, r0
    *(SemaphoreHandle_t*)mutexID = xSemaphoreCreateMutex();
  40b9f8:	2001      	movs	r0, #1

0040b9fa <.LVL43>:
  40b9fa:	f7ff fed1 	bl	40b7a0 <xQueueCreateMutex>

0040b9fe <.LVL44>:
  40b9fe:	6020      	str	r0, [r4, #0]
    return OSAL_RESULT_TRUE;
  40ba00:	2001      	movs	r0, #1
  40ba02:	bd10      	pop	{r4, pc}

Disassembly of section .text.OSAL_MUTEX_Unlock%208:

0040ba04 <OSAL_MUTEX_Unlock>:

  Remarks:

 */
OSAL_RESULT OSAL_MUTEX_Unlock(OSAL_MUTEX_HANDLE_TYPE* mutexID)
{
  40ba04:	b508      	push	{r3, lr}

0040ba06 <.LCFI15>:

   if (xSemaphoreGive(*(SemaphoreHandle_t*)mutexID) == pdTRUE)
  40ba06:	2300      	movs	r3, #0
  40ba08:	461a      	mov	r2, r3
  40ba0a:	4619      	mov	r1, r3
  40ba0c:	6800      	ldr	r0, [r0, #0]

0040ba0e <.LVL56>:
  40ba0e:	f7fc fb61 	bl	4080d4 <L0>

0040ba12 <.LVL57>:
   {
      return OSAL_RESULT_TRUE;
   }

   return OSAL_RESULT_FALSE;
}
  40ba12:	2801      	cmp	r0, #1
  40ba14:	bf14      	ite	ne
  40ba16:	2000      	movne	r0, #0
  40ba18:	2001      	moveq	r0, #1
  40ba1a:	bd08      	pop	{r3, pc}

Disassembly of section .rodata.SHAExpected%209:

0040ba1c <SHAExpected>:
  40ba1c:	fef7 28c1 fcd7 92d5 ba22 3637 3b8d 1072     ...(....".76.;r.
  40ba2c:	c7d4 efb6 0000 bf00                         ........

Disassembly of section .text.CRYPT_MD5_DataAdd%210:

0040ba34 <CRYPT_MD5_DataAdd>:

/* Add data to MD5 */
int CRYPT_MD5_DataAdd(CRYPT_MD5_CTX* md5, const unsigned char* input,
                      unsigned int sz)
{
    if (md5 == NULL || input == NULL)
  40ba34:	b138      	cbz	r0, 40ba46 <.LCFI3>
{
  40ba36:	b508      	push	{r3, lr}

0040ba38 <.LCFI2>:
    if (md5 == NULL || input == NULL)
  40ba38:	b111      	cbz	r1, 40ba40 <.LVL8>
        return BAD_FUNC_ARG;

    return wc_Md5Update((Md5*)md5, input, sz);
  40ba3a:	f7fe fa93 	bl	409f64 <.LFE149>

0040ba3e <.LVL7>:
  40ba3e:	bd08      	pop	{r3, pc}

0040ba40 <.LVL8>:
        return BAD_FUNC_ARG;
  40ba40:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040ba44 <.LVL9>:
}
  40ba44:	bd08      	pop	{r3, pc}

0040ba46 <.LCFI3>:
        return BAD_FUNC_ARG;
  40ba46:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040ba4a <.LVL11>:
  40ba4a:	4770      	bx	lr

Disassembly of section .text.CRYPT_MD5_Finalize%211:

0040ba4c <CRYPT_MD5_Finalize>:


/* Get MD5 Final into digest */
int CRYPT_MD5_Finalize(CRYPT_MD5_CTX* md5, unsigned char* digest)
{
    if (md5 == NULL || digest == NULL)
  40ba4c:	b138      	cbz	r0, 40ba5e <.LCFI5>
{
  40ba4e:	b508      	push	{r3, lr}

0040ba50 <.LCFI4>:
    if (md5 == NULL || digest == NULL)
  40ba50:	b111      	cbz	r1, 40ba58 <.LVL14>
        return BAD_FUNC_ARG;

    return wc_Md5Final((Md5*)md5, digest);
  40ba52:	f7fd fc75 	bl	409340 <wc_Md5Final>

0040ba56 <.LVL13>:
  40ba56:	bd08      	pop	{r3, pc}

0040ba58 <.LVL14>:
        return BAD_FUNC_ARG;
  40ba58:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040ba5c <.LVL15>:
}
  40ba5c:	bd08      	pop	{r3, pc}

0040ba5e <.LCFI5>:
        return BAD_FUNC_ARG;
  40ba5e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040ba62 <.LVL17>:
  40ba62:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA_DataAdd%212:

0040ba64 <CRYPT_SHA_DataAdd>:

/* Add data to SHA */
int CRYPT_SHA_DataAdd(CRYPT_SHA_CTX* sha, const unsigned char* input,
                       unsigned int sz)
{
    if (sha == NULL || input == NULL)
  40ba64:	b138      	cbz	r0, 40ba76 <.LCFI9>
{
  40ba66:	b508      	push	{r3, lr}

0040ba68 <.LCFI8>:
    if (sha == NULL || input == NULL)
  40ba68:	b111      	cbz	r1, 40ba70 <.LVL26>
        return BAD_FUNC_ARG;

    return wc_ShaUpdate((Sha*)sha, input, sz);
  40ba6a:	f7fe fb01 	bl	40a070 <.LFE150>

0040ba6e <.LVL25>:
  40ba6e:	bd08      	pop	{r3, pc}

0040ba70 <.LVL26>:
        return BAD_FUNC_ARG;
  40ba70:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040ba74 <.LVL27>:
}
  40ba74:	bd08      	pop	{r3, pc}

0040ba76 <.LCFI9>:
        return BAD_FUNC_ARG;
  40ba76:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040ba7a <.LVL29>:
  40ba7a:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA_Finalize%213:

0040ba7c <CRYPT_SHA_Finalize>:


/* Get SHA Final into digest */
int CRYPT_SHA_Finalize(CRYPT_SHA_CTX* sha, unsigned char* digest)
{
    if (sha == NULL || digest == NULL)
  40ba7c:	b138      	cbz	r0, 40ba8e <.LCFI11>
{
  40ba7e:	b508      	push	{r3, lr}

0040ba80 <.LCFI10>:
    if (sha == NULL || digest == NULL)
  40ba80:	b111      	cbz	r1, 40ba88 <.LVL32>
        return BAD_FUNC_ARG;

    return wc_ShaFinal((Sha*)sha, digest);
  40ba82:	f7fe f9e3 	bl	409e4c <.LFE2>

0040ba86 <.LVL31>:
  40ba86:	bd08      	pop	{r3, pc}

0040ba88 <.LVL32>:
        return BAD_FUNC_ARG;
  40ba88:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040ba8c <.LVL33>:
}
  40ba8c:	bd08      	pop	{r3, pc}

0040ba8e <.LCFI11>:
        return BAD_FUNC_ARG;
  40ba8e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040ba92 <.LVL35>:
  40ba92:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA256_DataAdd%214:

0040ba94 <CRYPT_SHA256_DataAdd>:

/* Add data to SHA-256 */
int CRYPT_SHA256_DataAdd(CRYPT_SHA256_CTX* sha256, const unsigned char* input,
                         unsigned int sz)
{
    if (sha256 == NULL || input == NULL)
  40ba94:	b138      	cbz	r0, 40baa6 <.LCFI15>
{
  40ba96:	b508      	push	{r3, lr}

0040ba98 <.LCFI14>:
    if (sha256 == NULL || input == NULL)
  40ba98:	b111      	cbz	r1, 40baa0 <.LVL44>
        return BAD_FUNC_ARG;

    return wc_Sha256Update((Sha256*)sha256, input, sz);
  40ba9a:	f7fe fb2a 	bl	40a0f2 <.LFE156>

0040ba9e <.LVL43>:
  40ba9e:	bd08      	pop	{r3, pc}

0040baa0 <.LVL44>:
        return BAD_FUNC_ARG;
  40baa0:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040baa4 <.LVL45>:
}
  40baa4:	bd08      	pop	{r3, pc}

0040baa6 <.LCFI15>:
        return BAD_FUNC_ARG;
  40baa6:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040baaa <.LVL47>:
  40baaa:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA256_Finalize%215:

0040baac <CRYPT_SHA256_Finalize>:


/* Get SHA-256 Final into digest */
int CRYPT_SHA256_Finalize(CRYPT_SHA256_CTX* sha256, unsigned char* digest)
{
    if (sha256 == NULL || digest == NULL)
  40baac:	b138      	cbz	r0, 40babe <.LCFI17>
{
  40baae:	b508      	push	{r3, lr}

0040bab0 <.LCFI16>:
    if (sha256 == NULL || digest == NULL)
  40bab0:	b111      	cbz	r1, 40bab8 <.LVL50>
        return BAD_FUNC_ARG;

    return wc_Sha256Final((Sha256*)sha256, digest);
  40bab2:	f7fd ffbd 	bl	409a30 <.LFE25>

0040bab6 <.LVL49>:
  40bab6:	bd08      	pop	{r3, pc}

0040bab8 <.LVL50>:
        return BAD_FUNC_ARG;
  40bab8:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040babc <.LVL51>:
}
  40babc:	bd08      	pop	{r3, pc}

0040babe <.LCFI17>:
        return BAD_FUNC_ARG;
  40babe:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040bac2 <.LVL53>:
  40bac2:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA384_DataAdd%216:

0040bac4 <CRYPT_SHA384_DataAdd>:

/* Add data to SHA-384 */
int CRYPT_SHA384_DataAdd(CRYPT_SHA384_CTX* sha384, const unsigned char* input,
                         unsigned int sz)
{
    if (sha384 == NULL || input == NULL)
  40bac4:	b138      	cbz	r0, 40bad6 <.LCFI21>
{
  40bac6:	b508      	push	{r3, lr}

0040bac8 <.LCFI20>:
    if (sha384 == NULL || input == NULL)
  40bac8:	b111      	cbz	r1, 40bad0 <.LVL60>
        return BAD_FUNC_ARG;

    return wc_Sha384Update((Sha384*)sha384, input, sz);
  40baca:	f7fd f8d4 	bl	408c76 <.LBE719>

0040bace <.LVL59>:
  40bace:	bd08      	pop	{r3, pc}

0040bad0 <.LVL60>:
        return BAD_FUNC_ARG;
  40bad0:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040bad4 <.LVL61>:
}
  40bad4:	bd08      	pop	{r3, pc}

0040bad6 <.LCFI21>:
        return BAD_FUNC_ARG;
  40bad6:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040bada <.LVL63>:
  40bada:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA384_Finalize%217:

0040badc <CRYPT_SHA384_Finalize>:


/* Get SHA-384 Final into digest */
int CRYPT_SHA384_Finalize(CRYPT_SHA384_CTX* sha384, unsigned char* digest)
{
    if (sha384 == NULL || digest == NULL)
  40badc:	b138      	cbz	r0, 40baee <.LCFI23>
{
  40bade:	b508      	push	{r3, lr}

0040bae0 <.LCFI22>:
    if (sha384 == NULL || digest == NULL)
  40bae0:	b111      	cbz	r1, 40bae8 <.LVL66>
        return BAD_FUNC_ARG;

    return wc_Sha384Final((Sha384*)sha384, digest);
  40bae2:	f7fb fb85 	bl	4071f0 <.LFE21>

0040bae6 <.LVL65>:
  40bae6:	bd08      	pop	{r3, pc}

0040bae8 <.LVL66>:
        return BAD_FUNC_ARG;
  40bae8:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040baec <.LVL67>:
}
  40baec:	bd08      	pop	{r3, pc}

0040baee <.LCFI23>:
        return BAD_FUNC_ARG;
  40baee:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040baf2 <.LVL69>:
  40baf2:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA512_DataAdd%218:

0040baf4 <CRYPT_SHA512_DataAdd>:

/* Add data to SHA-512 */
int CRYPT_SHA512_DataAdd(CRYPT_SHA512_CTX* sha512, const unsigned char* input,
                         unsigned int sz)
{
    if (sha512 == NULL || input == NULL)
  40baf4:	b138      	cbz	r0, 40bb06 <.LCFI27>
{
  40baf6:	b508      	push	{r3, lr}

0040baf8 <.LCFI26>:
    if (sha512 == NULL || input == NULL)
  40baf8:	b111      	cbz	r1, 40bb00 <.LVL76>
        return BAD_FUNC_ARG;

    return wc_Sha512Update((Sha512*)sha512, input, sz);
  40bafa:	f7fd f847 	bl	408b8c <.LFE18>

0040bafe <.LVL75>:
  40bafe:	bd08      	pop	{r3, pc}

0040bb00 <.LVL76>:
        return BAD_FUNC_ARG;
  40bb00:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040bb04 <.LVL77>:
}
  40bb04:	bd08      	pop	{r3, pc}

0040bb06 <.LCFI27>:
        return BAD_FUNC_ARG;
  40bb06:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040bb0a <.LVL79>:
  40bb0a:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA512_Finalize%219:

0040bb0c <CRYPT_SHA512_Finalize>:


/* Get SHA-512 Final into digest */
int CRYPT_SHA512_Finalize(CRYPT_SHA512_CTX* sha512, unsigned char* digest)
{
    if (sha512 == NULL || digest == NULL)
  40bb0c:	b138      	cbz	r0, 40bb1e <.LCFI29>
{
  40bb0e:	b508      	push	{r3, lr}

0040bb10 <.LCFI28>:
    if (sha512 == NULL || digest == NULL)
  40bb10:	b111      	cbz	r1, 40bb18 <.LVL82>
        return BAD_FUNC_ARG;

    return wc_Sha512Final((Sha512*)sha512, digest);
  40bb12:	f7fb fa25 	bl	406f60 <wc_Sha512Final>

0040bb16 <.LVL81>:
  40bb16:	bd08      	pop	{r3, pc}

0040bb18 <.LVL82>:
        return BAD_FUNC_ARG;
  40bb18:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040bb1c <.LVL83>:
}
  40bb1c:	bd08      	pop	{r3, pc}

0040bb1e <.LCFI29>:
        return BAD_FUNC_ARG;
  40bb1e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040bb22 <.LVL85>:
  40bb22:	4770      	bx	lr

Disassembly of section .text.Console_UART_RegisterCallback%220:

0040bb24 <Console_UART_RegisterCallback>:
    switch (event)
  40bb24:	b121      	cbz	r1, 40bb30 <Console_UART_RegisterCallback+0xc>
  40bb26:	2901      	cmp	r1, #1
  40bb28:	d104      	bne.n	40bb34 <Console_UART_RegisterCallback+0x10>
            consUartData.rdCallback = consCallback;
  40bb2a:	4b03      	ldr	r3, [pc, #12]	; (40bb38 <.LFE171+0x14>)
  40bb2c:	6498      	str	r0, [r3, #72]	; 0x48
            break;
  40bb2e:	4770      	bx	lr
            consUartData.wrCallback = consCallback;
  40bb30:	4b01      	ldr	r3, [pc, #4]	; (40bb38 <.LFE171+0x14>)
  40bb32:	64d8      	str	r0, [r3, #76]	; 0x4c
  40bb34:	4770      	bx	lr
  40bb36:	bf00      	nop
  40bb38:	20417bb0 	.word	0x20417bb0

Disassembly of section .text.UARTDeviceReadCallback%221:

0040bb3c <UARTDeviceReadCallback>:
{
  40bb3c:	b508      	push	{r3, lr}

0040bb3e <.LCFI4>:
    if (USART1_ErrorGet() == 0)
  40bb3e:	f7ff fd17 	bl	40b570 <.LFE6>

0040bb42 <.LVL17>:
  40bb42:	b918      	cbnz	r0, 40bb4c <.LVL17+0xa>
        consUartData.isReadComplete = true;
  40bb44:	2201      	movs	r2, #1
  40bb46:	4b02      	ldr	r3, [pc, #8]	; (40bb50 <.LVL17+0xe>)
  40bb48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  40bb4c:	bd08      	pop	{r3, pc}
  40bb4e:	bf00      	nop
  40bb50:	20417bb0 	.word	0x20417bb0

Disassembly of section .text.SYS_TIME_GetElapsedCount%222:

0040bb54 <SYS_TIME_GetElapsedCount>:
    if (hwTimerCurrentValue > counterObj->hwTimerPreviousValue)
  40bb54:	4b04      	ldr	r3, [pc, #16]	; (40bb68 <.LVL70+0x2>)
  40bb56:	691b      	ldr	r3, [r3, #16]
  40bb58:	4283      	cmp	r3, r0
  40bb5a:	d303      	bcc.n	40bb64 <.LVL69>
        elapsedCount = (SYS_TIME_HW_COUNTER_PERIOD - counterObj->hwTimerPreviousValue) + hwTimerCurrentValue + 1;
  40bb5c:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
  40bb60:	4418      	add	r0, r3

0040bb62 <.LVL68>:
}
  40bb62:	4770      	bx	lr

0040bb64 <.LVL69>:
        elapsedCount = hwTimerCurrentValue - counterObj->hwTimerPreviousValue;
  40bb64:	1ac0      	subs	r0, r0, r3

0040bb66 <.LVL70>:
  40bb66:	4770      	bx	lr
  40bb68:	20417c00 	.word	0x20417c00

Disassembly of section .text.vApplicationStackOverflowHook%223:

0040bb6c <vApplicationStackOverflowHook>:
  40bb6c:	f04f 0320 	mov.w	r3, #32
  40bb70:	b672      	cpsid	i
  40bb72:	f383 8811 	msr	BASEPRI, r3
  40bb76:	f3bf 8f6f 	isb	sy
  40bb7a:	f3bf 8f4f 	dsb	sy
  40bb7e:	b662      	cpsie	i
  40bb80:	e7fe      	b.n	40bb80 <vApplicationStackOverflowHook+0x14>

Disassembly of section .text.vApplicationMallocFailedHook%224:

0040bb82 <vApplicationMallocFailedHook>:
  40bb82:	f04f 0320 	mov.w	r3, #32
  40bb86:	b672      	cpsid	i
  40bb88:	f383 8811 	msr	BASEPRI, r3
  40bb8c:	f3bf 8f6f 	isb	sy
  40bb90:	f3bf 8f4f 	dsb	sy
  40bb94:	b662      	cpsie	i
  40bb96:	e7fe      	b.n	40bb96 <vApplicationMallocFailedHook+0x14>

Disassembly of section .text.vListInitialise%225:

0040bb98 <vListInitialise>:
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40bb98:	f100 0308 	add.w	r3, r0, #8
  40bb9c:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  40bb9e:	f04f 32ff 	mov.w	r2, #4294967295
  40bba2:	6082      	str	r2, [r0, #8]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40bba4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40bba6:	6103      	str	r3, [r0, #16]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  40bba8:	2300      	movs	r3, #0
  40bbaa:	6003      	str	r3, [r0, #0]
  40bbac:	4770      	bx	lr

Disassembly of section .text.prvIsQueueEmpty%226:

0040bbae <prvIsQueueEmpty>:
{
  40bbae:	b510      	push	{r4, lr}

0040bbb0 <.LCFI0>:
  40bbb0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  40bbb2:	f7ff fe2f 	bl	40b814 <.LFE6>

0040bbb6 <.LVL1>:
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  40bbb6:	6ba4      	ldr	r4, [r4, #56]	; 0x38

0040bbb8 <.LVL2>:
	taskEXIT_CRITICAL();
  40bbb8:	f000 f81a 	bl	40bbf0 <vPortExitCritical>

0040bbbc <.LVL3>:
}
  40bbbc:	fab4 f084 	clz	r0, r4
  40bbc0:	0940      	lsrs	r0, r0, #5
  40bbc2:	bd10      	pop	{r4, pc}

Disassembly of section .text.wc_InitMd5%227:

0040bbc4 <wc_InitMd5>:
#endif /* !HAVE_MD5_CUST_API */


int wc_InitMd5(Md5* md5)
{
    if (md5 == NULL) {
  40bbc4:	b130      	cbz	r0, 40bbd4 <.LCFI9>
{
  40bbc6:	b508      	push	{r3, lr}

0040bbc8 <.LCFI8>:
        return BAD_FUNC_ARG;
    }
    return wc_InitMd5_ex(md5, NULL, INVALID_DEVID);
  40bbc8:	f06f 0201 	mvn.w	r2, #1
  40bbcc:	2100      	movs	r1, #0
  40bbce:	f7ff fbe5 	bl	40b39c <.LFE155>

0040bbd2 <.LVL369>:
  40bbd2:	bd08      	pop	{r3, pc}

0040bbd4 <.LCFI9>:
        return BAD_FUNC_ARG;
  40bbd4:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040bbd8 <.LVL371>:
  40bbd8:	4770      	bx	lr

Disassembly of section .text.vPortEnableVFP%228:

0040bbdc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  40bbdc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 40bbec <.LFE15+0x2>
  40bbe0:	6801      	ldr	r1, [r0, #0]
  40bbe2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40bbe6:	6001      	str	r1, [r0, #0]
  40bbe8:	4770      	bx	lr

0040bbea <.LFE15>:
  40bbea:	0000      	.short	0x0000
  40bbec:	e000ed88 	.word	0xe000ed88

Disassembly of section .text.vPortExitCritical%229:

0040bbf0 <vPortExitCritical>:
	uxCriticalNesting--;
  40bbf0:	4a03      	ldr	r2, [pc, #12]	; (40bc00 <.LVL10+0x2>)
  40bbf2:	6813      	ldr	r3, [r2, #0]
  40bbf4:	3b01      	subs	r3, #1
  40bbf6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  40bbf8:	b90b      	cbnz	r3, 40bbfe <.LVL10>

0040bbfa <.LBB16>:
	__asm volatile
  40bbfa:	f383 8811 	msr	BASEPRI, r3

0040bbfe <.LVL10>:
  40bbfe:	4770      	bx	lr
  40bc00:	20417da8 	.word	0x20417da8

Disassembly of section .rodata.MD5Expected%230:

0040bc04 <MD5Expected>:
  40bc04:	7e55c230 bea50283 15c790b2 427fd820     0.U~........ ..B
  40bc14:	bf000000                                ....

Disassembly of section .text._APP_Tasks%231:

0040bc18 <_APP_Tasks>:
{
  40bc18:	b508      	push	{r3, lr}

0040bc1a <.LCFI0>:
        SYS_CONSOLE_Tasks(sysObj.sysConsole0);
  40bc1a:	4c03      	ldr	r4, [pc, #12]	; (40bc28 <.LVL3+0x2>)

0040bc1c <.LVL1>:
  40bc1c:	6820      	ldr	r0, [r4, #0]
  40bc1e:	f7ff fe7b 	bl	40b918 <.LFE45>

0040bc22 <.LVL2>:
        APP_Tasks();
  40bc22:	f7fb fd6d 	bl	407700 <APP_Tasks>

0040bc26 <.LVL3>:
  40bc26:	e7f9      	b.n	40bc1c <.LVL1>
  40bc28:	20400000 	.word	0x20400000

Disassembly of section .rodata%232:

0040bc2c <.LANCHOR0>:
  40bc2c:	00000043 	.word	0x00000043
  40bc30:	49534f50 	.word	0x49534f50
  40bc34:	00000058 	.word	0x00000058
  40bc38:	00000000 	.word	0x00000000
  40bc3c:	002e      	.short	0x002e
  40bc3e:	bf00      	nop

Disassembly of section .text.register_fini%233:

0040bc40 <register_fini>:
  40bc40:	4b02      	ldr	r3, [pc, #8]	; (40bc4c <.LVL0+0x2>)
  40bc42:	b113      	cbz	r3, 40bc4a <.LVL0>

0040bc44 <.LBB2>:
  40bc44:	4802      	ldr	r0, [pc, #8]	; (40bc50 <.LVL0+0x6>)
  40bc46:	f000 b8fb 	b.w	40be40 <.LFE155>

0040bc4a <.LVL0>:
  40bc4a:	4770      	bx	lr
  40bc4c:	00000000 	.word	0x00000000
  40bc50:	0040b4ad 	.word	0x0040b4ad

Disassembly of section .rodata%234:

0040bc54 <.LC0>:
  40bc54:	69666e49 	.word	0x69666e49
  40bc58:	7974696e 	.word	0x7974696e
  40bc5c:	00000000 	.word	0x00000000

0040bc60 <.LC1>:
  40bc60:	004e614e 	.word	0x004e614e

0040bc64 <.LC2>:
  40bc64:	0030      	.short	0x0030
  40bc66:	bf00      	nop

Disassembly of section .text._Bfree%235:

0040bc68 <_Bfree>:
  40bc68:	b131      	cbz	r1, 40bc78 <.LVL11+0x6>
  40bc6a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40bc6c:	684a      	ldr	r2, [r1, #4]
  40bc6e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]

0040bc72 <.LVL11>:
  40bc72:	6008      	str	r0, [r1, #0]
  40bc74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40bc78:	4770      	bx	lr

0040bc7a <.LFE18>:
  40bc7a:	bf00      	nop

Disassembly of section .text.__i2b%236:

0040bc7c <__i2b>:
  40bc7c:	b510      	push	{r4, lr}

0040bc7e <.LCFI6>:
  40bc7e:	460c      	mov	r4, r1
  40bc80:	2101      	movs	r1, #1

0040bc82 <.LVL105>:
  40bc82:	f7ff f921 	bl	40aec8 <.LFE2>

0040bc86 <.LVL106>:
  40bc86:	2201      	movs	r2, #1
  40bc88:	6144      	str	r4, [r0, #20]
  40bc8a:	6102      	str	r2, [r0, #16]
  40bc8c:	bd10      	pop	{r4, pc}

0040bc8e <.LFE23>:
  40bc8e:	bf00      	nop

Disassembly of section .text.SYS_INT_Disable%237:

0040bc90 <SYS_INT_Disable>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40bc90:	f3ef 8010 	mrs	r0, PRIMASK

0040bc94 <.LBB38>:
  __ASM volatile ("cpsid i" : : : "memory");
  40bc94:	b672      	cpsid	i

0040bc96 <.LBB40>:
  __ASM volatile ("dmb 0xF":::"memory");
  40bc96:	f3bf 8f5f 	dmb	sy

0040bc9a <.LBE40>:
}
  40bc9a:	fab0 f080 	clz	r0, r0

0040bc9e <.LVL1>:
  40bc9e:	0940      	lsrs	r0, r0, #5
  40bca0:	4770      	bx	lr

Disassembly of section .text.SYS_INT_Restore%238:

0040bca2 <SYS_INT_Restore>:
    if( state == true )
  40bca2:	b918      	cbnz	r0, 40bcac <.LBB46>

0040bca4 <.LBB42>:
  __ASM volatile ("cpsid i" : : : "memory");
  40bca4:	b672      	cpsid	i

0040bca6 <.LBB44>:
  __ASM volatile ("dmb 0xF":::"memory");
  40bca6:	f3bf 8f5f 	dmb	sy
  40bcaa:	4770      	bx	lr

0040bcac <.LBB46>:
  40bcac:	f3bf 8f5f 	dmb	sy

0040bcb0 <.LBB48>:
  __ASM volatile ("cpsie i" : : : "memory");
  40bcb0:	b662      	cpsie	i
  40bcb2:	4770      	bx	lr

Disassembly of section .text.CRYPT_MD5_Initialize%239:

0040bcb4 <CRYPT_MD5_Initialize>:
    if (md5 == NULL)
  40bcb4:	b120      	cbz	r0, 40bcc0 <.LCFI1>
{
  40bcb6:	b508      	push	{r3, lr}

0040bcb8 <.LCFI0>:
    wc_InitMd5((Md5*)md5);
  40bcb8:	f7ff ff84 	bl	40bbc4 <.LFE26>

0040bcbc <.LVL1>:
    return 0;
  40bcbc:	2000      	movs	r0, #0
  40bcbe:	bd08      	pop	{r3, pc}

0040bcc0 <.LCFI1>:
        return BAD_FUNC_ARG;
  40bcc0:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040bcc4 <.LVL3>:
  40bcc4:	4770      	bx	lr

Disassembly of section .text.vTaskSuspendAll%240:

0040bcc8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  40bcc8:	4a02      	ldr	r2, [pc, #8]	; (40bcd4 <vTaskSuspendAll+0xc>)
  40bcca:	6813      	ldr	r3, [r2, #0]
  40bccc:	3301      	adds	r3, #1
  40bcce:	6013      	str	r3, [r2, #0]
  40bcd0:	4770      	bx	lr
  40bcd2:	bf00      	nop
  40bcd4:	20417d7c 	.word	0x20417d7c

Disassembly of section .text.CRYPT_SHA_Initialize%241:

0040bcd8 <CRYPT_SHA_Initialize>:
    if (sha == NULL)
  40bcd8:	b118      	cbz	r0, 40bce2 <.LCFI7>
{
  40bcda:	b508      	push	{r3, lr}

0040bcdc <.LCFI6>:
    return wc_InitSha((Sha*)sha);
  40bcdc:	f7fe feb4 	bl	40aa48 <.LFE154>

0040bce0 <.LVL19>:
  40bce0:	bd08      	pop	{r3, pc}

0040bce2 <.LCFI7>:
        return BAD_FUNC_ARG;
  40bce2:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040bce6 <.LVL21>:
  40bce6:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA256_Initialize%242:

0040bce8 <CRYPT_SHA256_Initialize>:
    if (sha256 == NULL)
  40bce8:	b118      	cbz	r0, 40bcf2 <.LCFI13>
{
  40bcea:	b508      	push	{r3, lr}

0040bcec <.LCFI12>:
    return wc_InitSha256((Sha256*)sha256);
  40bcec:	f7fd ff86 	bl	409bfc <.LFE41>

0040bcf0 <.LVL37>:
  40bcf0:	bd08      	pop	{r3, pc}

0040bcf2 <.LCFI13>:
        return BAD_FUNC_ARG;
  40bcf2:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040bcf6 <.LVL39>:
  40bcf6:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA384_Initialize%243:

0040bcf8 <CRYPT_SHA384_Initialize>:
    if (sha384 == NULL)
  40bcf8:	b118      	cbz	r0, 40bd02 <.LCFI19>
{
  40bcfa:	b508      	push	{r3, lr}

0040bcfc <.LCFI18>:
    return wc_InitSha384((Sha384*)sha384);
  40bcfc:	f000 f84a 	bl	40bd94 <.LFE22>

0040bd00 <.LVL55>:
  40bd00:	bd08      	pop	{r3, pc}

0040bd02 <.LCFI19>:
        return BAD_FUNC_ARG;
  40bd02:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040bd06 <.LVL57>:
  40bd06:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA512_Initialize%244:

0040bd08 <CRYPT_SHA512_Initialize>:
    if (sha512 == NULL)
  40bd08:	b118      	cbz	r0, 40bd12 <.LCFI25>
{
  40bd0a:	b508      	push	{r3, lr}

0040bd0c <.LCFI24>:
    return wc_InitSha512((Sha512*)sha512);
  40bd0c:	f000 f83b 	bl	40bd86 <.LFE154>

0040bd10 <.LVL71>:
  40bd10:	bd08      	pop	{r3, pc}

0040bd12 <.LCFI25>:
        return BAD_FUNC_ARG;
  40bd12:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040bd16 <.LVL73>:
  40bd16:	4770      	bx	lr

Disassembly of section .text.UARTDeviceWriteCallback%245:

0040bd18 <UARTDeviceWriteCallback>:
    consUartData.isWriteComplete = true;
  40bd18:	2201      	movs	r2, #1
  40bd1a:	4b02      	ldr	r3, [pc, #8]	; (40bd24 <.LFE169+0xc>)
  40bd1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  40bd20:	4770      	bx	lr
  40bd22:	bf00      	nop
  40bd24:	20417bb0 	.word	0x20417bb0

Disassembly of section .text.USART1_WriteCallbackRegister%246:

0040bd28 <USART1_WriteCallbackRegister>:


bool USART1_WriteCallbackRegister( USART_CALLBACK callback, uintptr_t context )
{
    usart1Obj.txCallback = callback;
  40bd28:	4b02      	ldr	r3, [pc, #8]	; (40bd34 <.LVL43+0x4>)
  40bd2a:	60d8      	str	r0, [r3, #12]
    usart1Obj.txContext = context;
  40bd2c:	6119      	str	r1, [r3, #16]

    return true;
}
  40bd2e:	2001      	movs	r0, #1

0040bd30 <.LVL43>:
  40bd30:	4770      	bx	lr
  40bd32:	bf00      	nop
  40bd34:	20400454 	.word	0x20400454

Disassembly of section .text.USART1_ReadCallbackRegister%247:

0040bd38 <USART1_ReadCallbackRegister>:

bool USART1_ReadCallbackRegister( USART_CALLBACK callback, uintptr_t context )
{
    usart1Obj.rxCallback = callback;
  40bd38:	4b02      	ldr	r3, [pc, #8]	; (40bd44 <.LVL45+0x4>)
  40bd3a:	6258      	str	r0, [r3, #36]	; 0x24
    usart1Obj.rxContext = context;
  40bd3c:	6299      	str	r1, [r3, #40]	; 0x28

    return true;
}
  40bd3e:	2001      	movs	r0, #1

0040bd40 <.LVL45>:
  40bd40:	4770      	bx	lr
  40bd42:	bf00      	nop
  40bd44:	20400454 	.word	0x20400454

Disassembly of section .text.malloc%248:

0040bd48 <malloc>:
  40bd48:	4b02      	ldr	r3, [pc, #8]	; (40bd54 <.LVL2+0x2>)
  40bd4a:	4601      	mov	r1, r0
  40bd4c:	6818      	ldr	r0, [r3, #0]

0040bd4e <.LVL1>:
  40bd4e:	f7fa bb49 	b.w	4063e4 <.LFE14>

0040bd52 <.LVL2>:
  40bd52:	bf00      	nop
  40bd54:	20417db0 	.word	0x20417db0

Disassembly of section .rodata.blanks.8352%249:

0040bd58 <blanks.8352>:
  40bd58:	20202020 20202020 20202020 20202020                     

Disassembly of section .rodata.zeroes.8353%250:

0040bd68 <zeroes.8353>:
  40bd68:	30303030 30303030 30303030 30303030     0000000000000000

Disassembly of section .text.main%251:

0040bd78 <main>:
// Section: Main Entry Point
// *****************************************************************************
// *****************************************************************************

int main ( void )
{
  40bd78:	b508      	push	{r3, lr}

0040bd7a <.LCFI0>:
    /* Initialize all modules */
    SYS_Initialize ( NULL );
  40bd7a:	2000      	movs	r0, #0
  40bd7c:	f7fe fe34 	bl	40a9e8 <SYS_Initialize>

0040bd80 <.LVL0>:

    while ( true )
    {
        /* Maintain state machines of all polled MPLAB Harmony modules. */
        SYS_Tasks ( );
  40bd80:	f7ff faf0 	bl	40b364 <.LFE148>

0040bd84 <.LVL1>:
  40bd84:	e7fc      	b.n	40bd80 <.LVL0>

Disassembly of section .text.wc_InitSha512%252:

0040bd86 <wc_InitSha512>:
{
  40bd86:	b508      	push	{r3, lr}

0040bd88 <.LCFI12>:
    return wc_InitSha512_ex(sha512, NULL, INVALID_DEVID);
  40bd88:	f06f 0201 	mvn.w	r2, #1
  40bd8c:	2100      	movs	r1, #0
  40bd8e:	f7fd fbf7 	bl	409580 <wc_InitSha512_ex>

0040bd92 <.LVL80>:
}
  40bd92:	bd08      	pop	{r3, pc}

Disassembly of section .text.wc_InitSha384%253:

0040bd94 <wc_InitSha384>:
#endif

int wc_InitSha384(Sha384* sha384)
{
  40bd94:	b508      	push	{r3, lr}

0040bd96 <.LCFI21>:
    return wc_InitSha384_ex(sha384, NULL, INVALID_DEVID);
  40bd96:	f06f 0201 	mvn.w	r2, #1
  40bd9a:	2100      	movs	r1, #0
  40bd9c:	f7fd fc4c 	bl	409638 <.LFE15>

0040bda0 <.LVL145>:
}
  40bda0:	bd08      	pop	{r3, pc}

Disassembly of section .text.vTaskMissedYield%254:

0040bda4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  40bda4:	2201      	movs	r2, #1
  40bda6:	4b01      	ldr	r3, [pc, #4]	; (40bdac <vTaskMissedYield+0x8>)
  40bda8:	601a      	str	r2, [r3, #0]
  40bdaa:	4770      	bx	lr
  40bdac:	20417d9c 	.word	0x20417d9c

Disassembly of section .text.APP_Initialize%255:

0040bdb0 <APP_Initialize>:
    appData.state = APP_STATE_INIT;
  40bdb0:	2200      	movs	r2, #0
  40bdb2:	4b01      	ldr	r3, [pc, #4]	; (40bdb8 <.LFE34+0x8>)
  40bdb4:	701a      	strb	r2, [r3, #0]
  40bdb6:	4770      	bx	lr
  40bdb8:	204176b8 	.word	0x204176b8

Disassembly of section .rodata%256:

0040bdbc <.LANCHOR0>:
  40bdbc:	5f505041 	.word	0x5f505041
  40bdc0:	6b736154 	.word	0x6b736154
  40bdc4:	0073      	.short	0x0073
  40bdc6:	bf00      	nop

Disassembly of section .text.CRYPT_MD5_DataSizeSet%257:

0040bdc8 <CRYPT_MD5_DataSizeSet>:
    if (md5 == NULL)
  40bdc8:	2800      	cmp	r0, #0
}
  40bdca:	bf0c      	ite	eq
  40bdcc:	f06f 00ac 	mvneq.w	r0, #172	; 0xac

0040bdd0 <.LVL5>:
  40bdd0:	2000      	movne	r0, #0
  40bdd2:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA_DataSizeSet%258:

0040bdd4 <CRYPT_SHA_DataSizeSet>:
    if (sha == NULL)
  40bdd4:	2800      	cmp	r0, #0
}
  40bdd6:	bf0c      	ite	eq
  40bdd8:	f06f 00ac 	mvneq.w	r0, #172	; 0xac

0040bddc <.LVL23>:
  40bddc:	2000      	movne	r0, #0
  40bdde:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA256_DataSizeSet%259:

0040bde0 <CRYPT_SHA256_DataSizeSet>:
    if (sha256 == NULL)
  40bde0:	2800      	cmp	r0, #0
}
  40bde2:	bf0c      	ite	eq
  40bde4:	f06f 00ac 	mvneq.w	r0, #172	; 0xac

0040bde8 <.LVL41>:
  40bde8:	2000      	movne	r0, #0
  40bdea:	4770      	bx	lr

Disassembly of section .text.TC0_CH0_TimerStart%260:

0040bdec <TC0_CH0_TimerStart>:
    TC0_REGS->TC_CHANNEL[0].TC_CCR = (TC_CCR_CLKEN_Msk | TC_CCR_SWTRG_Msk);
  40bdec:	2205      	movs	r2, #5
  40bdee:	4b01      	ldr	r3, [pc, #4]	; (40bdf4 <.LFE163+0x8>)
  40bdf0:	601a      	str	r2, [r3, #0]
  40bdf2:	4770      	bx	lr
  40bdf4:	4000c000 	.word	0x4000c000

Disassembly of section .text.TC0_CH0_TimerStop%261:

0040bdf8 <TC0_CH0_TimerStop>:
    TC0_REGS->TC_CHANNEL[0].TC_CCR = (TC_CCR_CLKDIS_Msk);
  40bdf8:	2202      	movs	r2, #2
  40bdfa:	4b01      	ldr	r3, [pc, #4]	; (40be00 <.LFE142+0x8>)
  40bdfc:	601a      	str	r2, [r3, #0]
  40bdfe:	4770      	bx	lr
  40be00:	4000c000 	.word	0x4000c000

Disassembly of section .text.TC0_CH0_TimerPeriodSet%262:

0040be04 <TC0_CH0_TimerPeriodSet>:
    TC0_REGS->TC_CHANNEL[0].TC_RC = period;
  40be04:	4b01      	ldr	r3, [pc, #4]	; (40be0c <.LFE143+0x8>)
  40be06:	61d8      	str	r0, [r3, #28]
  40be08:	4770      	bx	lr
  40be0a:	bf00      	nop
  40be0c:	4000c000 	.word	0x4000c000

Disassembly of section .text.TC0_CH0_TimerCompareSet%263:

0040be10 <TC0_CH0_TimerCompareSet>:
    TC0_REGS->TC_CHANNEL[0].TC_RA = compare;
  40be10:	4b01      	ldr	r3, [pc, #4]	; (40be18 <.LFE145+0x8>)
  40be12:	6158      	str	r0, [r3, #20]
  40be14:	4770      	bx	lr
  40be16:	bf00      	nop
  40be18:	4000c000 	.word	0x4000c000

Disassembly of section .text.TC0_CH0_TimerCounterGet%264:

0040be1c <TC0_CH0_TimerCounterGet>:
    return TC0_REGS->TC_CHANNEL[0].TC_CV;
  40be1c:	4b01      	ldr	r3, [pc, #4]	; (40be24 <.LFE146+0x8>)
  40be1e:	6918      	ldr	r0, [r3, #16]
}
  40be20:	b280      	uxth	r0, r0
  40be22:	4770      	bx	lr
  40be24:	4000c000 	.word	0x4000c000

Disassembly of section .text.TC0_CH0_TimerCallbackRegister%265:

0040be28 <TC0_CH0_TimerCallbackRegister>:
    TC0_CH0_CallbackObj.callback_fn = callback;
  40be28:	4b01      	ldr	r3, [pc, #4]	; (40be30 <.LFE148+0x8>)
  40be2a:	6018      	str	r0, [r3, #0]
    TC0_CH0_CallbackObj.context = context;
  40be2c:	6059      	str	r1, [r3, #4]
  40be2e:	4770      	bx	lr
  40be30:	2040044c 	.word	0x2040044c

Disassembly of section .text.USART1_ReadCountGet%266:

0040be34 <USART1_ReadCountGet>:
}

size_t USART1_ReadCountGet( void )
{
    return usart1Obj.rxProcessedSize;
}
  40be34:	4b01      	ldr	r3, [pc, #4]	; (40be3c <.LFE149+0x8>)
  40be36:	6a18      	ldr	r0, [r3, #32]
  40be38:	4770      	bx	lr
  40be3a:	bf00      	nop
  40be3c:	20400454 	.word	0x20400454

Disassembly of section .text.atexit%267:

0040be40 <atexit>:
  40be40:	2300      	movs	r3, #0
  40be42:	4601      	mov	r1, r0
  40be44:	461a      	mov	r2, r3
  40be46:	4618      	mov	r0, r3

0040be48 <.LVL1>:
  40be48:	f7fd bcfc 	b.w	409844 <__register_exitproc>

Disassembly of section .rodata.p05.7179%268:

0040be4c <p05.7179>:
  40be4c:	0005 0000 0019 0000 007d 0000               ........}...

Disassembly of section .rodata%269:

004098e8 <.LANCHOR17>:
  4098e8:	4449      	add	r1, r9
  4098ea:	454c      	.short	0x454c
  4098ec:	00          	.byte	0x00
  4098ed:	00          	.byte	0x00
  4098ee:	bf00      	nop

Disassembly of section .text.SYS_TIME_CounterGet%270:

0040b7e8 <SYS_TIME_CounterGet>:
{
  40b7e8:	b508      	push	{r3, lr}

0040b7ea <.LCFI16>:
    counter32 = (uint32_t)SYS_TIME_Counter64Get();
  40b7ea:	f7ff fd43 	bl	40b274 <.LFE148>

0040b7ee <.LVL158>:
}
  40b7ee:	bd08      	pop	{r3, pc}

Disassembly of section .text.TC0_CH0_TimerFrequencyGet%271:

0040be58 <TC0_CH0_TimerFrequencyGet>:
}
  40be58:	4800      	ldr	r0, [pc, #0]	; (40be5c <TC0_CH0_TimerFrequencyGet+0x4>)
  40be5a:	4770      	bx	lr
  40be5c:	08f0d180 	.word	0x08f0d180

Disassembly of section .text.vListInitialiseItem%272:

0040be60 <vListInitialiseItem>:
	pxItem->pvContainer = NULL;
  40be60:	2300      	movs	r3, #0
  40be62:	6103      	str	r3, [r0, #16]
  40be64:	4770      	bx	lr

Disassembly of section .text%273:

00406f5c <__aeabi_idiv0>:
  406f5c:	4770      	bx	lr

00406f5e <L0>:
  406f5e:	bf00      	nop

Disassembly of section .rodata._global_impure_ptr%274:

0040be68 <_global_impure_ptr>:
  40be68:	6c88 2041                                   .lA 

Disassembly of section .text.__malloc_lock%275:

0040be6c <__malloc_lock>:
  40be6c:	4770      	bx	lr
  40be6e:	bf00      	nop

Disassembly of section .text.__malloc_unlock%276:

0040be70 <__malloc_unlock>:
  40be70:	4770      	bx	lr

0040be72 <.LFE1>:
  40be72:	bf00      	nop

Disassembly of section .text.Dummy_Handler%277:

0040a2f2 <Dummy_Handler>:

extern uint32_t _stack;

/* Brief default interrupt handler for unused IRQs.*/
void __attribute__((optimize("-O1"),section(".text.Dummy_Handler"),long_call))Dummy_Handler(void)
{
  40a2f2:	e7fe      	b.n	40a2f2 <Dummy_Handler>

Disassembly of section .text.NonMaskableInt_Handler%278:

0040a632 <NonMaskableInt_Handler>:
// *****************************************************************************

/* Brief default interrupt handlers for core IRQs.*/

void NonMaskableInt_Handler(void)
{
  40a632:	e7fe      	b.n	40a632 <NonMaskableInt_Handler>

Disassembly of section .text.HardFault_Handler%279:

0040b8de <HardFault_Handler>:
    {
    }
}

void HardFault_Handler(void)
{
  40b8de:	e7fe      	b.n	40b8de <HardFault_Handler>

Disassembly of section .text.DebugMonitor_Handler%280:

0040bbda <DebugMonitor_Handler>:
    {
    }
}

void DebugMonitor_Handler(void)
{
  40bbda:	e7fe      	b.n	40bbda <DebugMonitor_Handler>

Disassembly of section .text.MemoryManagement_Handler%281:

0040bcc6 <MemoryManagement_Handler>:
    }
}

#if (defined __CM7_REV) || (defined __CM4_REV)
void MemoryManagement_Handler(void)
{
  40bcc6:	e7fe      	b.n	40bcc6 <MemoryManagement_Handler>

Disassembly of section .text.BusFault_Handler%282:

0040bda2 <BusFault_Handler>:
    {
    }
}

void BusFault_Handler(void)
{
  40bda2:	e7fe      	b.n	40bda2 <BusFault_Handler>

Disassembly of section .text.UsageFault_Handler%283:

0040be66 <UsageFault_Handler>:
    {
    }
}

void UsageFault_Handler(void)
{
  40be66:	e7fe      	b.n	40be66 <UsageFault_Handler>

Disassembly of section .text.vPortFree%284:

0040be74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  40be74:	4770      	bx	lr
