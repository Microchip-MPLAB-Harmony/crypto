
dist\sam_e70_xplained_ultra\production\sam_e70_xplained_ultra.X.production.elf:     file format elf32-littlearm


Disassembly of section .vectors:

00400000 <exception_table>:
  400000:	f8 ff 45 20 8d 6e 41 00 97 53 41 00 1b 64 41 00     ..E .nA..SA..dA.
  400010:	8b 6e 41 00 cb 72 41 00 0b 8d 41 00 00 00 00 00     .nA..rA...A.....
	...
  40002c:	f7 45 41 00 db 68 41 00 00 00 00 00 f7 45 41 00     .EA..hA......EA.
  40003c:	f7 45 41 00 f7 45 41 00 f7 45 41 00 f7 45 41 00     .EA..EA..EA..EA.
  40004c:	f7 45 41 00 f7 45 41 00 f7 45 41 00 f7 45 41 00     .EA..EA..EA..EA.
  40005c:	f7 45 41 00 f7 45 41 00 00 00 00 00 f7 45 41 00     .EA..EA......EA.
  40006c:	f7 45 41 00 f7 45 41 00 f7 45 41 00 29 6b 41 00     .EA..EA..EA.)kA.
  40007c:	f7 45 41 00 f7 45 41 00 f7 45 41 00 f7 45 41 00     .EA..EA..EA..EA.
  40008c:	f7 45 41 00 f7 45 41 00 f7 45 41 00 f7 45 41 00     .EA..EA..EA..EA.
  40009c:	41 d5 41 00 f7 45 41 00 f7 45 41 00 f7 45 41 00     A.A..EA..EA..EA.
  4000ac:	f7 45 41 00 f7 45 41 00 f7 45 41 00 f7 45 41 00     .EA..EA..EA..EA.
  4000bc:	f7 45 41 00 f7 45 41 00 f7 45 41 00 f7 45 41 00     .EA..EA..EA..EA.
  4000cc:	f7 45 41 00 f7 45 41 00 f7 45 41 00 f7 45 41 00     .EA..EA..EA..EA.
  4000dc:	f7 45 41 00 f7 45 41 00 f7 45 41 00 f7 45 41 00     .EA..EA..EA..EA.
  4000ec:	f7 45 41 00 f7 45 41 00 f7 45 41 00 f7 45 41 00     .EA..EA..EA..EA.
  4000fc:	f7 45 41 00 f7 45 41 00 f7 45 41 00 f7 45 41 00     .EA..EA..EA..EA.
  40010c:	f7 45 41 00 f7 45 41 00 00 00 00 00 00 00 00 00     .EA..EA.........
  40011c:	00 00 00 00 f7 45 41 00 f7 45 41 00 f7 45 41 00     .....EA..EA..EA.
  40012c:	f7 45 41 00 f7 45 41 00 f7 45 41 00 f7 45 41 00     .EA..EA..EA..EA.
  40013c:	f7 45 41 00 f7 45 41 00 f7 45 41 00 f7 45 41 00     .EA..EA..EA..EA.
  40014c:	f7 45 41 00 f7 45 41 00 f7 45 41 00 f7 45 41 00     .EA..EA..EA..EA.
  40015c:	f7 45 41 00 f7 45 41 00 f7 45 41 00                 .EA..EA..EA.

Disassembly of section .text:

00400168 <_init>:
  400168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40016a:	bf00      	nop
  40016c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40016e:	bc08      	pop	{r3}
  400170:	469e      	mov	lr, r3
  400172:	4770      	bx	lr

00400174 <__init_array_start>:
  400174:	0041d9d9 	.word	0x0041d9d9

00400178 <__frame_dummy_init_array_entry>:
  400178:	0041b619                                ..A.

0040017c <_fini>:
  40017c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40017e:	bf00      	nop
  400180:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400182:	bc08      	pop	{r3}
  400184:	469e      	mov	lr, r3
  400186:	4770      	bx	lr

00400188 <__fini_array_start>:
  400188:	0041b5f5 	.word	0x0041b5f5

Disassembly of section .ARM.exidx:

0040018c <.ARM.exidx>:
  40018c:	00012fe0 	.word	0x00012fe0
  400190:	00000001 	.word	0x00000001

Disassembly of section .text._Transform%35:

00400194 <_Transform>:

#define R(i) h(i)+=S1(e(i))+Ch(e(i),f(i),g(i))+K[i+j]+(j?blk2(i):blk0(i));\
    d(i)+=h(i);h(i)+=S0(a(i))+Maj(a(i),b(i),c(i))

static int _Transform(Sha512* sha512)
{
  400194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00400198 <.LCFI0>:
  400198:	f2ad 7d94 	subw	sp, sp, #1940	; 0x794

0040019c <.LCFI1>:
  40019c:	f8cd 06cc 	str.w	r0, [sp, #1740]	; 0x6cc
#else
    word64 W[16];
#endif

    /* Copy digest to working vars */
    XMEMCPY(T, sha512->digest, sizeof(T));
  4001a0:	f100 0418 	add.w	r4, r0, #24
  4001a4:	f50d 66ea 	add.w	r6, sp, #1872	; 0x750
  4001a8:	f100 0758 	add.w	r7, r0, #88	; 0x58

004001ac <.LVL2>:
  4001ac:	4635      	mov	r5, r6
  4001ae:	6820      	ldr	r0, [r4, #0]
  4001b0:	6861      	ldr	r1, [r4, #4]
  4001b2:	68a2      	ldr	r2, [r4, #8]
  4001b4:	68e3      	ldr	r3, [r4, #12]
  4001b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  4001b8:	3410      	adds	r4, #16
  4001ba:	462e      	mov	r6, r5
  4001bc:	42bc      	cmp	r4, r7
  4001be:	d1f5      	bne.n	4001ac <.LVL2>

004001c0 <.LVL3>:
  4001c0:	f50d 63da 	add.w	r3, sp, #1744	; 0x6d0
  4001c4:	e9d3 3400 	ldrd	r3, r4, [r3]
  4001c8:	e9cd 341c 	strd	r3, r4, [sp, #112]	; 0x70
  4001cc:	f50d 63ed 	add.w	r3, sp, #1896	; 0x768
  4001d0:	e9d3 ab00 	ldrd	sl, fp, [r3]
  4001d4:	f50d 63ea 	add.w	r3, sp, #1872	; 0x750
  4001d8:	e9d3 3400 	ldrd	r3, r4, [r3]
  4001dc:	4625      	mov	r5, r4
  4001de:	461c      	mov	r4, r3
  4001e0:	f50d 63eb 	add.w	r3, sp, #1880	; 0x758
  4001e4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4001e8:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  4001ec:	f50d 63ec 	add.w	r3, sp, #1888	; 0x760
  4001f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4001f4:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8
  4001f8:	f50d 63f1 	add.w	r3, sp, #1928	; 0x788
  4001fc:	e9d3 2300 	ldrd	r2, r3, [r3]
  400200:	e9cd 2306 	strd	r2, r3, [sp, #24]
  400204:	f50d 63dc 	add.w	r3, sp, #1760	; 0x6e0
  400208:	e9d3 2300 	ldrd	r2, r3, [r3]
  40020c:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  400210:	f50d 63dd 	add.w	r3, sp, #1768	; 0x6e8
  400214:	e9d3 2300 	ldrd	r2, r3, [r3]
  400218:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  40021c:	f50d 63db 	add.w	r3, sp, #1752	; 0x6d8
  400220:	e9d3 2300 	ldrd	r2, r3, [r3]
  400224:	e9cd 2308 	strd	r2, r3, [sp, #32]
  400228:	f50d 63de 	add.w	r3, sp, #1776	; 0x6f0
  40022c:	e9d3 2300 	ldrd	r2, r3, [r3]
  400230:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
  400234:	f50d 63df 	add.w	r3, sp, #1784	; 0x6f8
  400238:	e9d3 2300 	ldrd	r2, r3, [r3]
  40023c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  400240:	f50d 63e0 	add.w	r3, sp, #1792	; 0x700
  400244:	e9d3 2300 	ldrd	r2, r3, [r3]
  400248:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  40024c:	f50d 63e1 	add.w	r3, sp, #1800	; 0x708
  400250:	e9d3 2300 	ldrd	r2, r3, [r3]
  400254:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  400258:	f50d 63e3 	add.w	r3, sp, #1816	; 0x718
  40025c:	e9d3 2300 	ldrd	r2, r3, [r3]
  400260:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  400264:	f50d 63f0 	add.w	r3, sp, #1920	; 0x780
  400268:	e9d3 2300 	ldrd	r2, r3, [r3]
  40026c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  400270:	f50d 63e2 	add.w	r3, sp, #1808	; 0x710
  400274:	e9d3 2300 	ldrd	r2, r3, [r3]
  400278:	e9cd 2300 	strd	r2, r3, [sp]
  40027c:	f50d 63e4 	add.w	r3, sp, #1824	; 0x720
  400280:	e9d3 2300 	ldrd	r2, r3, [r3]
  400284:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
  400288:	f50d 63ef 	add.w	r3, sp, #1912	; 0x778
  40028c:	e9d3 8900 	ldrd	r8, r9, [r3]
  400290:	f50d 63e5 	add.w	r3, sp, #1832	; 0x728
  400294:	e9d3 2300 	ldrd	r2, r3, [r3]
  400298:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  40029c:	f50d 63ee 	add.w	r3, sp, #1904	; 0x770
  4002a0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4002a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4002a8:	f50d 63e6 	add.w	r3, sp, #1840	; 0x730
  4002ac:	e9d3 2300 	ldrd	r2, r3, [r3]
  4002b0:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  4002b4:	f50d 63e7 	add.w	r3, sp, #1848	; 0x738
  4002b8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4002bc:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
  4002c0:	f50d 63e8 	add.w	r3, sp, #1856	; 0x740
  4002c4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4002c8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  4002cc:	f50d 63e9 	add.w	r3, sp, #1864	; 0x748
  4002d0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4002d4:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
  4002d8:	4b5a      	ldr	r3, [pc, #360]	; (400444 <.LBE365+0x4e>)
            R(m);
        }
    }
#else
    /* 80 operations, partially loop unrolled */
    for (j = 0; j < 80; j += 16) {
  4002da:	f04f 0c00 	mov.w	ip, #0
  4002de:	469e      	mov	lr, r3
  4002e0:	4667      	mov	r7, ip

004002e2 <.LVL4>:
  4002e2:	f8dd c6cc 	ldr.w	ip, [sp, #1740]	; 0x6cc

004002e6 <.LBB353>:
}


STATIC INLINE word64 rotrFixed64(word64 x, word64 y)
{
    return (x >> y) | (x << (sizeof(y) * 8 - y));
  4002e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4002ea:	0b83      	lsrs	r3, r0, #14
  4002ec:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  4002f0:	9370      	str	r3, [sp, #448]	; 0x1c0
  4002f2:	0b8b      	lsrs	r3, r1, #14
  4002f4:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
  4002f8:	9371      	str	r3, [sp, #452]	; 0x1c4

004002fa <.LBB355>:
  4002fa:	0c83      	lsrs	r3, r0, #18
  4002fc:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
  400300:	9372      	str	r3, [sp, #456]	; 0x1c8
  400302:	0c8b      	lsrs	r3, r1, #18
  400304:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
  400308:	9373      	str	r3, [sp, #460]	; 0x1cc

0040030a <.LBE355>:
        R( 0); R( 1); R( 2); R( 3);
  40030a:	ab70      	add	r3, sp, #448	; 0x1c0
  40030c:	e9d3 2300 	ldrd	r2, r3, [r3]
  400310:	a972      	add	r1, sp, #456	; 0x1c8
  400312:	e9d1 0100 	ldrd	r0, r1, [r1]
  400316:	4042      	eors	r2, r0
  400318:	404b      	eors	r3, r1
  40031a:	4610      	mov	r0, r2
  40031c:	4619      	mov	r1, r3

0040031e <.LBB357>:
  40031e:	9b03      	ldr	r3, [sp, #12]
  400320:	05db      	lsls	r3, r3, #23
  400322:	9a02      	ldr	r2, [sp, #8]
  400324:	ea43 2352 	orr.w	r3, r3, r2, lsr #9
  400328:	9375      	str	r3, [sp, #468]	; 0x1d4
  40032a:	05d3      	lsls	r3, r2, #23
  40032c:	9a03      	ldr	r2, [sp, #12]
  40032e:	ea43 2352 	orr.w	r3, r3, r2, lsr #9
  400332:	9374      	str	r3, [sp, #464]	; 0x1d0

00400334 <.LBE357>:
  400334:	ab74      	add	r3, sp, #464	; 0x1d0
  400336:	e9d3 2300 	ldrd	r2, r3, [r3]
  40033a:	4042      	eors	r2, r0
  40033c:	404b      	eors	r3, r1
  40033e:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  400342:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  400346:	ea82 0208 	eor.w	r2, r2, r8
  40034a:	ea83 0309 	eor.w	r3, r3, r9
  40034e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  400352:	4010      	ands	r0, r2
  400354:	4019      	ands	r1, r3
  400356:	4602      	mov	r2, r0
  400358:	460b      	mov	r3, r1
  40035a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40035e:	4050      	eors	r0, r2
  400360:	4059      	eors	r1, r3
  400362:	4602      	mov	r2, r0
  400364:	460b      	mov	r3, r1
  400366:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  40036a:	1880      	adds	r0, r0, r2
  40036c:	4159      	adcs	r1, r3
  40036e:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  400372:	4676      	mov	r6, lr
  400374:	e9de 2300 	ldrd	r2, r3, [lr]
  400378:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
  40037c:	2f00      	cmp	r7, #0
  40037e:	f002 8255 	beq.w	40282c <.LCFI3>

00400382 <.LBB359>:
  400382:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  400386:	0cc3      	lsrs	r3, r0, #19
  400388:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
  40038c:	9376      	str	r3, [sp, #472]	; 0x1d8
  40038e:	0ccb      	lsrs	r3, r1, #19
  400390:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
  400394:	9377      	str	r3, [sp, #476]	; 0x1dc

00400396 <.LBB361>:
  400396:	00cb      	lsls	r3, r1, #3
  400398:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
  40039c:	9379      	str	r3, [sp, #484]	; 0x1e4
  40039e:	00c3      	lsls	r3, r0, #3
  4003a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
  4003a4:	9378      	str	r3, [sp, #480]	; 0x1e0

004003a6 <.LBE361>:
  4003a6:	ab76      	add	r3, sp, #472	; 0x1d8
  4003a8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4003ac:	a978      	add	r1, sp, #480	; 0x1e0
  4003ae:	e9d1 0100 	ldrd	r0, r1, [r1]
  4003b2:	4042      	eors	r2, r0
  4003b4:	404b      	eors	r3, r1
  4003b6:	990c      	ldr	r1, [sp, #48]	; 0x30
  4003b8:	0989      	lsrs	r1, r1, #6
  4003ba:	980d      	ldr	r0, [sp, #52]	; 0x34
  4003bc:	ea41 6180 	orr.w	r1, r1, r0, lsl #26
  4003c0:	9130      	str	r1, [sp, #192]	; 0xc0
  4003c2:	0981      	lsrs	r1, r0, #6
  4003c4:	9131      	str	r1, [sp, #196]	; 0xc4
  4003c6:	e9dd 0130 	ldrd	r0, r1, [sp, #192]	; 0xc0
  4003ca:	4050      	eors	r0, r2
  4003cc:	4059      	eors	r1, r3
  4003ce:	e9cd 012e 	strd	r0, r1, [sp, #184]	; 0xb8

004003d2 <.LBB363>:
  4003d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  4003d6:	0851      	lsrs	r1, r2, #1
  4003d8:	ea41 71c3 	orr.w	r1, r1, r3, lsl #31
  4003dc:	917a      	str	r1, [sp, #488]	; 0x1e8
  4003de:	0859      	lsrs	r1, r3, #1
  4003e0:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
  4003e4:	917b      	str	r1, [sp, #492]	; 0x1ec

004003e6 <.LBB365>:
  4003e6:	0a11      	lsrs	r1, r2, #8
  4003e8:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
  4003ec:	917c      	str	r1, [sp, #496]	; 0x1f0
  4003ee:	0a19      	lsrs	r1, r3, #8
  4003f0:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
  4003f4:	917d      	str	r1, [sp, #500]	; 0x1f4

004003f6 <.LBE365>:
  4003f6:	ab7a      	add	r3, sp, #488	; 0x1e8
  4003f8:	e9d3 0100 	ldrd	r0, r1, [r3]
  4003fc:	ab7c      	add	r3, sp, #496	; 0x1f0
  4003fe:	e9d3 2300 	ldrd	r2, r3, [r3]
  400402:	4050      	eors	r0, r2
  400404:	4059      	eors	r1, r3
  400406:	9b08      	ldr	r3, [sp, #32]
  400408:	09db      	lsrs	r3, r3, #7
  40040a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40040c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
  400410:	9332      	str	r3, [sp, #200]	; 0xc8
  400412:	09d3      	lsrs	r3, r2, #7
  400414:	9333      	str	r3, [sp, #204]	; 0xcc
  400416:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
  40041a:	4042      	eors	r2, r0
  40041c:	404b      	eors	r3, r1
  40041e:	4610      	mov	r0, r2
  400420:	4619      	mov	r1, r3
  400422:	e9dd 232e 	ldrd	r2, r3, [sp, #184]	; 0xb8
  400426:	1812      	adds	r2, r2, r0
  400428:	414b      	adcs	r3, r1
  40042a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40042e:	1880      	adds	r0, r0, r2
  400430:	4159      	adcs	r1, r3
  400432:	4602      	mov	r2, r0
  400434:	460b      	mov	r3, r1
  400436:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
  40043a:	1880      	adds	r0, r0, r2
  40043c:	4159      	adcs	r1, r3
  40043e:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
  400442:	e001      	b.n	400448 <.LBE365+0x52>
  400444:	00413ed0 	.word	0x00413ed0
  400448:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  40044c:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
  400450:	1812      	adds	r2, r2, r0
  400452:	414b      	adcs	r3, r1
  400454:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
  400458:	1880      	adds	r0, r0, r2
  40045a:	4159      	adcs	r1, r3
  40045c:	4602      	mov	r2, r0
  40045e:	460b      	mov	r3, r1
  400460:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  400464:	1880      	adds	r0, r0, r2
  400466:	4159      	adcs	r1, r3
  400468:	4602      	mov	r2, r0
  40046a:	460b      	mov	r3, r1
  40046c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  400470:	eb10 020a 	adds.w	r2, r0, sl
  400474:	eb41 030b 	adc.w	r3, r1, fp
  400478:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0

0040047c <.LBB367>:
  40047c:	0f23      	lsrs	r3, r4, #28
  40047e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  400482:	937e      	str	r3, [sp, #504]	; 0x1f8
  400484:	0f2b      	lsrs	r3, r5, #28
  400486:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  40048a:	937f      	str	r3, [sp, #508]	; 0x1fc

0040048c <.LBB369>:
  40048c:	07ab      	lsls	r3, r5, #30
  40048e:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  400492:	9381      	str	r3, [sp, #516]	; 0x204
  400494:	07a3      	lsls	r3, r4, #30
  400496:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  40049a:	9380      	str	r3, [sp, #512]	; 0x200

0040049c <.LBE369>:
  40049c:	ab7e      	add	r3, sp, #504	; 0x1f8
  40049e:	e9d3 1200 	ldrd	r1, r2, [r3]
  4004a2:	ab80      	add	r3, sp, #512	; 0x200
  4004a4:	e9d3 ab00 	ldrd	sl, fp, [r3]
  4004a8:	ea81 010a 	eor.w	r1, r1, sl
  4004ac:	ea82 020b 	eor.w	r2, r2, fp
  4004b0:	4613      	mov	r3, r2
  4004b2:	460a      	mov	r2, r1

004004b4 <.LBB371>:
  4004b4:	0669      	lsls	r1, r5, #25
  4004b6:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  4004ba:	9183      	str	r1, [sp, #524]	; 0x20c
  4004bc:	0661      	lsls	r1, r4, #25
  4004be:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  4004c2:	9182      	str	r1, [sp, #520]	; 0x208

004004c4 <.LBE371>:
  4004c4:	a982      	add	r1, sp, #520	; 0x208
  4004c6:	e9d1 0100 	ldrd	r0, r1, [r1]
  4004ca:	4050      	eors	r0, r2
  4004cc:	4059      	eors	r1, r3
  4004ce:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  4004d2:	e9dd ab18 	ldrd	sl, fp, [sp, #96]	; 0x60
  4004d6:	4650      	mov	r0, sl
  4004d8:	4659      	mov	r1, fp
  4004da:	4320      	orrs	r0, r4
  4004dc:	4329      	orrs	r1, r5
  4004de:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  4004e2:	4002      	ands	r2, r0
  4004e4:	400b      	ands	r3, r1
  4004e6:	4650      	mov	r0, sl
  4004e8:	4659      	mov	r1, fp
  4004ea:	4020      	ands	r0, r4
  4004ec:	4029      	ands	r1, r5
  4004ee:	4310      	orrs	r0, r2
  4004f0:	4319      	orrs	r1, r3
  4004f2:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  4004f6:	1812      	adds	r2, r2, r0
  4004f8:	414b      	adcs	r3, r1
  4004fa:	4610      	mov	r0, r2
  4004fc:	4619      	mov	r1, r3
  4004fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  400502:	1812      	adds	r2, r2, r0
  400504:	414b      	adcs	r3, r1
  400506:	e9cd 2306 	strd	r2, r3, [sp, #24]

0040050a <.LBB373>:
  40050a:	e9dd ab2c 	ldrd	sl, fp, [sp, #176]	; 0xb0
  40050e:	4653      	mov	r3, sl
  400510:	0b9b      	lsrs	r3, r3, #14
  400512:	465a      	mov	r2, fp
  400514:	ea43 438b 	orr.w	r3, r3, fp, lsl #18
  400518:	9384      	str	r3, [sp, #528]	; 0x210
  40051a:	0b93      	lsrs	r3, r2, #14
  40051c:	4652      	mov	r2, sl
  40051e:	ea43 438a 	orr.w	r3, r3, sl, lsl #18
  400522:	9385      	str	r3, [sp, #532]	; 0x214

00400524 <.LBB375>:
  400524:	0c93      	lsrs	r3, r2, #18
  400526:	465a      	mov	r2, fp
  400528:	ea43 338b 	orr.w	r3, r3, fp, lsl #14
  40052c:	9386      	str	r3, [sp, #536]	; 0x218
  40052e:	0c93      	lsrs	r3, r2, #18
  400530:	ea43 338a 	orr.w	r3, r3, sl, lsl #14
  400534:	9387      	str	r3, [sp, #540]	; 0x21c

00400536 <.LBE375>:
  400536:	ab84      	add	r3, sp, #528	; 0x210
  400538:	e9d3 2300 	ldrd	r2, r3, [r3]
  40053c:	a986      	add	r1, sp, #536	; 0x218
  40053e:	e9d1 0100 	ldrd	r0, r1, [r1]
  400542:	4042      	eors	r2, r0
  400544:	404b      	eors	r3, r1

00400546 <.LBB377>:
  400546:	4659      	mov	r1, fp
  400548:	05c9      	lsls	r1, r1, #23
  40054a:	4650      	mov	r0, sl
  40054c:	ea41 215a 	orr.w	r1, r1, sl, lsr #9
  400550:	9189      	str	r1, [sp, #548]	; 0x224
  400552:	05c1      	lsls	r1, r0, #23
  400554:	ea41 215b 	orr.w	r1, r1, fp, lsr #9
  400558:	9188      	str	r1, [sp, #544]	; 0x220

0040055a <.LBE377>:
  40055a:	a988      	add	r1, sp, #544	; 0x220
  40055c:	e9d1 0100 	ldrd	r0, r1, [r1]
  400560:	4050      	eors	r0, r2
  400562:	4059      	eors	r1, r3
  400564:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  400568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40056c:	ea80 0008 	eor.w	r0, r0, r8
  400570:	ea81 0109 	eor.w	r1, r1, r9
  400574:	4652      	mov	r2, sl
  400576:	465b      	mov	r3, fp
  400578:	4002      	ands	r2, r0
  40057a:	400b      	ands	r3, r1
  40057c:	ea82 0a08 	eor.w	sl, r2, r8
  400580:	ea83 0b09 	eor.w	fp, r3, r9
  400584:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
  400588:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40058c:	1880      	adds	r0, r0, r2
  40058e:	4159      	adcs	r1, r3
  400590:	eb1a 0000 	adds.w	r0, sl, r0
  400594:	eb4b 0101 	adc.w	r1, fp, r1
  400598:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40059c:	2f00      	cmp	r7, #0
  40059e:	f002 814b 	beq.w	402838 <.LCFI3+0xc>

004005a2 <.LBB379>:
  4005a2:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
  4005a6:	0cc3      	lsrs	r3, r0, #19
  4005a8:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
  4005ac:	938a      	str	r3, [sp, #552]	; 0x228
  4005ae:	0ccb      	lsrs	r3, r1, #19
  4005b0:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
  4005b4:	938b      	str	r3, [sp, #556]	; 0x22c

004005b6 <.LBB381>:
  4005b6:	00cb      	lsls	r3, r1, #3
  4005b8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
  4005bc:	938d      	str	r3, [sp, #564]	; 0x234
  4005be:	00c3      	lsls	r3, r0, #3
  4005c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
  4005c4:	938c      	str	r3, [sp, #560]	; 0x230

004005c6 <.LBE381>:
  4005c6:	ab8a      	add	r3, sp, #552	; 0x228
  4005c8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4005cc:	f50d 7a0c 	add.w	sl, sp, #560	; 0x230
  4005d0:	e9da ab00 	ldrd	sl, fp, [sl]
  4005d4:	ea82 020a 	eor.w	r2, r2, sl
  4005d8:	ea83 030b 	eor.w	r3, r3, fp
  4005dc:	468b      	mov	fp, r1
  4005de:	0981      	lsrs	r1, r0, #6
  4005e0:	4658      	mov	r0, fp
  4005e2:	ea41 618b 	orr.w	r1, r1, fp, lsl #26
  4005e6:	9134      	str	r1, [sp, #208]	; 0xd0
  4005e8:	0981      	lsrs	r1, r0, #6
  4005ea:	9135      	str	r1, [sp, #212]	; 0xd4
  4005ec:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
  4005f0:	4050      	eors	r0, r2
  4005f2:	4059      	eors	r1, r3
  4005f4:	4602      	mov	r2, r0
  4005f6:	460b      	mov	r3, r1
  4005f8:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
  4005fc:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
  400600:	eb10 000a 	adds.w	r0, r0, sl
  400604:	eb41 010b 	adc.w	r1, r1, fp
  400608:	eb12 0a00 	adds.w	sl, r2, r0
  40060c:	eb43 0b01 	adc.w	fp, r3, r1
  400610:	e9cd ab08 	strd	sl, fp, [sp, #32]

00400614 <.LBB383>:
  400614:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
  400618:	0851      	lsrs	r1, r2, #1
  40061a:	ea41 71c3 	orr.w	r1, r1, r3, lsl #31
  40061e:	918e      	str	r1, [sp, #568]	; 0x238
  400620:	0859      	lsrs	r1, r3, #1
  400622:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
  400626:	918f      	str	r1, [sp, #572]	; 0x23c

00400628 <.LBB385>:
  400628:	0a11      	lsrs	r1, r2, #8
  40062a:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
  40062e:	9190      	str	r1, [sp, #576]	; 0x240
  400630:	0a19      	lsrs	r1, r3, #8
  400632:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
  400636:	9191      	str	r1, [sp, #580]	; 0x244

00400638 <.LBE385>:
  400638:	a98e      	add	r1, sp, #568	; 0x238
  40063a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40063e:	f50d 7a10 	add.w	sl, sp, #576	; 0x240
  400642:	e9da ab00 	ldrd	sl, fp, [sl]
  400646:	ea80 000a 	eor.w	r0, r0, sl
  40064a:	ea81 010b 	eor.w	r1, r1, fp
  40064e:	469b      	mov	fp, r3
  400650:	09d3      	lsrs	r3, r2, #7
  400652:	465a      	mov	r2, fp
  400654:	ea43 634b 	orr.w	r3, r3, fp, lsl #25
  400658:	9336      	str	r3, [sp, #216]	; 0xd8
  40065a:	09d3      	lsrs	r3, r2, #7
  40065c:	9337      	str	r3, [sp, #220]	; 0xdc
  40065e:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
  400662:	4042      	eors	r2, r0
  400664:	404b      	eors	r3, r1
  400666:	4610      	mov	r0, r2
  400668:	4619      	mov	r1, r3
  40066a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  40066e:	1812      	adds	r2, r2, r0
  400670:	414b      	adcs	r3, r1
  400672:	e9cd 2308 	strd	r2, r3, [sp, #32]
  400676:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  40067a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40067e:	1812      	adds	r2, r2, r0
  400680:	414b      	adcs	r3, r1
  400682:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  400686:	1880      	adds	r0, r0, r2
  400688:	4159      	adcs	r1, r3
  40068a:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  40068e:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  400692:	1812      	adds	r2, r2, r0
  400694:	414b      	adcs	r3, r1
  400696:	e9cd 2304 	strd	r2, r3, [sp, #16]

0040069a <.LBB387>:
  40069a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40069e:	0f03      	lsrs	r3, r0, #28
  4006a0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  4006a4:	9392      	str	r3, [sp, #584]	; 0x248
  4006a6:	0f0b      	lsrs	r3, r1, #28
  4006a8:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  4006ac:	9393      	str	r3, [sp, #588]	; 0x24c

004006ae <.LBB389>:
  4006ae:	078b      	lsls	r3, r1, #30
  4006b0:	ea43 0390 	orr.w	r3, r3, r0, lsr #2
  4006b4:	9395      	str	r3, [sp, #596]	; 0x254
  4006b6:	0783      	lsls	r3, r0, #30
  4006b8:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  4006bc:	9394      	str	r3, [sp, #592]	; 0x250

004006be <.LBE389>:
  4006be:	ab92      	add	r3, sp, #584	; 0x248
  4006c0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4006c4:	f50d 7a14 	add.w	sl, sp, #592	; 0x250
  4006c8:	e9da ab00 	ldrd	sl, fp, [sl]
  4006cc:	ea82 020a 	eor.w	r2, r2, sl
  4006d0:	ea83 030b 	eor.w	r3, r3, fp

004006d4 <.LBB391>:
  4006d4:	4682      	mov	sl, r0
  4006d6:	0649      	lsls	r1, r1, #25
  4006d8:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
  4006dc:	9197      	str	r1, [sp, #604]	; 0x25c
  4006de:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
  4006e2:	4651      	mov	r1, sl
  4006e4:	0649      	lsls	r1, r1, #25
  4006e6:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
  4006ea:	9196      	str	r1, [sp, #600]	; 0x258

004006ec <.LBE391>:
  4006ec:	a996      	add	r1, sp, #600	; 0x258
  4006ee:	e9d1 0100 	ldrd	r0, r1, [r1]
  4006f2:	4050      	eors	r0, r2
  4006f4:	4059      	eors	r1, r3
  4006f6:	e9cd 012a 	strd	r0, r1, [sp, #168]	; 0xa8
  4006fa:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
  4006fe:	4650      	mov	r0, sl
  400700:	4659      	mov	r1, fp
  400702:	4320      	orrs	r0, r4
  400704:	4329      	orrs	r1, r5
  400706:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  40070a:	4002      	ands	r2, r0
  40070c:	400b      	ands	r3, r1
  40070e:	4610      	mov	r0, r2
  400710:	4619      	mov	r1, r3
  400712:	4652      	mov	r2, sl
  400714:	465b      	mov	r3, fp
  400716:	4022      	ands	r2, r4
  400718:	402b      	ands	r3, r5
  40071a:	4302      	orrs	r2, r0
  40071c:	430b      	orrs	r3, r1
  40071e:	4610      	mov	r0, r2
  400720:	4619      	mov	r1, r3
  400722:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  400726:	1812      	adds	r2, r2, r0
  400728:	414b      	adcs	r3, r1
  40072a:	4610      	mov	r0, r2
  40072c:	4619      	mov	r1, r3
  40072e:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  400732:	1812      	adds	r2, r2, r0
  400734:	414b      	adcs	r3, r1
  400736:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8

0040073a <.LBB393>:
  40073a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40073e:	0b83      	lsrs	r3, r0, #14
  400740:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  400744:	9398      	str	r3, [sp, #608]	; 0x260
  400746:	0b8b      	lsrs	r3, r1, #14
  400748:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
  40074c:	9399      	str	r3, [sp, #612]	; 0x264

0040074e <.LBB395>:
  40074e:	0c83      	lsrs	r3, r0, #18
  400750:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
  400754:	939a      	str	r3, [sp, #616]	; 0x268
  400756:	0c8b      	lsrs	r3, r1, #18
  400758:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
  40075c:	939b      	str	r3, [sp, #620]	; 0x26c

0040075e <.LBE395>:
  40075e:	ab98      	add	r3, sp, #608	; 0x260
  400760:	e9d3 2300 	ldrd	r2, r3, [r3]
  400764:	f50d 7a1a 	add.w	sl, sp, #616	; 0x268
  400768:	e9da ab00 	ldrd	sl, fp, [sl]
  40076c:	ea82 020a 	eor.w	r2, r2, sl
  400770:	ea83 030b 	eor.w	r3, r3, fp

00400774 <.LBB397>:
  400774:	4682      	mov	sl, r0
  400776:	468b      	mov	fp, r1
  400778:	05c9      	lsls	r1, r1, #23
  40077a:	4650      	mov	r0, sl
  40077c:	ea41 215a 	orr.w	r1, r1, sl, lsr #9
  400780:	919d      	str	r1, [sp, #628]	; 0x274
  400782:	05c1      	lsls	r1, r0, #23
  400784:	ea41 215b 	orr.w	r1, r1, fp, lsr #9
  400788:	919c      	str	r1, [sp, #624]	; 0x270

0040078a <.LBE397>:
  40078a:	a99c      	add	r1, sp, #624	; 0x270
  40078c:	e9d1 0100 	ldrd	r0, r1, [r1]
  400790:	4050      	eors	r0, r2
  400792:	4059      	eors	r1, r3
  400794:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  400798:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  40079c:	4650      	mov	r0, sl
  40079e:	4659      	mov	r1, fp
  4007a0:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
  4007a4:	4042      	eors	r2, r0
  4007a6:	404b      	eors	r3, r1
  4007a8:	4610      	mov	r0, r2
  4007aa:	4619      	mov	r1, r3
  4007ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4007b0:	4002      	ands	r2, r0
  4007b2:	400b      	ands	r3, r1
  4007b4:	4610      	mov	r0, r2
  4007b6:	4619      	mov	r1, r3
  4007b8:	4652      	mov	r2, sl
  4007ba:	465b      	mov	r3, fp
  4007bc:	4042      	eors	r2, r0
  4007be:	404b      	eors	r3, r1
  4007c0:	4610      	mov	r0, r2
  4007c2:	4619      	mov	r1, r3
  4007c4:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
  4007c8:	eb18 0802 	adds.w	r8, r8, r2
  4007cc:	eb49 0903 	adc.w	r9, r9, r3
  4007d0:	eb18 0800 	adds.w	r8, r8, r0
  4007d4:	eb49 0901 	adc.w	r9, r9, r1
  4007d8:	2f00      	cmp	r7, #0
  4007da:	f002 8033 	beq.w	402844 <.LCFI3+0x18>

004007de <.LBB399>:
  4007de:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  4007e2:	0843      	lsrs	r3, r0, #1
  4007e4:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
  4007e8:	939e      	str	r3, [sp, #632]	; 0x278
  4007ea:	084b      	lsrs	r3, r1, #1
  4007ec:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
  4007f0:	939f      	str	r3, [sp, #636]	; 0x27c

004007f2 <.LBB401>:
  4007f2:	0a03      	lsrs	r3, r0, #8
  4007f4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  4007f8:	93a0      	str	r3, [sp, #640]	; 0x280
  4007fa:	0a0b      	lsrs	r3, r1, #8
  4007fc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  400800:	93a1      	str	r3, [sp, #644]	; 0x284

00400802 <.LBE401>:
  400802:	ab9e      	add	r3, sp, #632	; 0x278
  400804:	e9d3 2300 	ldrd	r2, r3, [r3]
  400808:	f50d 7a20 	add.w	sl, sp, #640	; 0x280
  40080c:	e9da ab00 	ldrd	sl, fp, [sl]
  400810:	ea82 020a 	eor.w	r2, r2, sl
  400814:	ea83 030b 	eor.w	r3, r3, fp
  400818:	468b      	mov	fp, r1
  40081a:	09c1      	lsrs	r1, r0, #7
  40081c:	4658      	mov	r0, fp
  40081e:	ea41 614b 	orr.w	r1, r1, fp, lsl #25
  400822:	9138      	str	r1, [sp, #224]	; 0xe0
  400824:	09c1      	lsrs	r1, r0, #7
  400826:	9139      	str	r1, [sp, #228]	; 0xe4
  400828:	e9dd 0138 	ldrd	r0, r1, [sp, #224]	; 0xe0
  40082c:	4050      	eors	r0, r2
  40082e:	4059      	eors	r1, r3
  400830:	4602      	mov	r2, r0
  400832:	460b      	mov	r3, r1
  400834:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
  400838:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
  40083c:	eb10 000a 	adds.w	r0, r0, sl
  400840:	eb41 010b 	adc.w	r1, r1, fp
  400844:	eb12 0a00 	adds.w	sl, r2, r0
  400848:	eb43 0b01 	adc.w	fp, r3, r1
  40084c:	e9cd ab1e 	strd	sl, fp, [sp, #120]	; 0x78

00400850 <.LBB403>:
  400850:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
  400854:	0cd1      	lsrs	r1, r2, #19
  400856:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
  40085a:	91a2      	str	r1, [sp, #648]	; 0x288
  40085c:	0cd9      	lsrs	r1, r3, #19
  40085e:	ea41 3142 	orr.w	r1, r1, r2, lsl #13
  400862:	91a3      	str	r1, [sp, #652]	; 0x28c

00400864 <.LBB405>:
  400864:	00d9      	lsls	r1, r3, #3
  400866:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
  40086a:	91a5      	str	r1, [sp, #660]	; 0x294
  40086c:	00d1      	lsls	r1, r2, #3
  40086e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
  400872:	91a4      	str	r1, [sp, #656]	; 0x290

00400874 <.LBE405>:
  400874:	a9a2      	add	r1, sp, #648	; 0x288
  400876:	e9d1 0100 	ldrd	r0, r1, [r1]
  40087a:	f50d 7a24 	add.w	sl, sp, #656	; 0x290
  40087e:	e9da ab00 	ldrd	sl, fp, [sl]
  400882:	ea80 000a 	eor.w	r0, r0, sl
  400886:	ea81 010b 	eor.w	r1, r1, fp
  40088a:	469b      	mov	fp, r3
  40088c:	0993      	lsrs	r3, r2, #6
  40088e:	465a      	mov	r2, fp
  400890:	ea43 638b 	orr.w	r3, r3, fp, lsl #26
  400894:	933a      	str	r3, [sp, #232]	; 0xe8
  400896:	0993      	lsrs	r3, r2, #6
  400898:	933b      	str	r3, [sp, #236]	; 0xec
  40089a:	e9dd 233a 	ldrd	r2, r3, [sp, #232]	; 0xe8
  40089e:	4042      	eors	r2, r0
  4008a0:	404b      	eors	r3, r1
  4008a2:	4610      	mov	r0, r2
  4008a4:	4619      	mov	r1, r3
  4008a6:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
  4008aa:	1812      	adds	r2, r2, r0
  4008ac:	414b      	adcs	r3, r1
  4008ae:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  4008b2:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  4008b6:	eb12 0208 	adds.w	r2, r2, r8
  4008ba:	eb43 0309 	adc.w	r3, r3, r9
  4008be:	4690      	mov	r8, r2
  4008c0:	4699      	mov	r9, r3
  4008c2:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
  4008c6:	eb12 0208 	adds.w	r2, r2, r8
  4008ca:	eb43 0309 	adc.w	r3, r3, r9
  4008ce:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
  4008d2:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  4008d6:	eb18 0802 	adds.w	r8, r8, r2
  4008da:	eb49 0903 	adc.w	r9, r9, r3
  4008de:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60

004008e2 <.LBB407>:
  4008e2:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
  4008e6:	0f03      	lsrs	r3, r0, #28
  4008e8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  4008ec:	93a6      	str	r3, [sp, #664]	; 0x298
  4008ee:	0f0b      	lsrs	r3, r1, #28
  4008f0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  4008f4:	93a7      	str	r3, [sp, #668]	; 0x29c

004008f6 <.LBB409>:
  4008f6:	078b      	lsls	r3, r1, #30
  4008f8:	ea43 0390 	orr.w	r3, r3, r0, lsr #2
  4008fc:	93a9      	str	r3, [sp, #676]	; 0x2a4
  4008fe:	0783      	lsls	r3, r0, #30
  400900:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  400904:	93a8      	str	r3, [sp, #672]	; 0x2a0

00400906 <.LBE409>:
  400906:	aba6      	add	r3, sp, #664	; 0x298
  400908:	e9d3 2300 	ldrd	r2, r3, [r3]
  40090c:	f50d 7828 	add.w	r8, sp, #672	; 0x2a0
  400910:	e9d8 ab00 	ldrd	sl, fp, [r8]
  400914:	ea82 020a 	eor.w	r2, r2, sl
  400918:	ea83 030b 	eor.w	r3, r3, fp

0040091c <.LBB411>:
  40091c:	4680      	mov	r8, r0
  40091e:	4689      	mov	r9, r1
  400920:	0649      	lsls	r1, r1, #25
  400922:	4640      	mov	r0, r8
  400924:	ea41 11d8 	orr.w	r1, r1, r8, lsr #7
  400928:	91ab      	str	r1, [sp, #684]	; 0x2ac
  40092a:	0641      	lsls	r1, r0, #25
  40092c:	ea41 11d9 	orr.w	r1, r1, r9, lsr #7
  400930:	91aa      	str	r1, [sp, #680]	; 0x2a8

00400932 <.LBE411>:
  400932:	a9aa      	add	r1, sp, #680	; 0x2a8
  400934:	e9d1 0100 	ldrd	r0, r1, [r1]
  400938:	4050      	eors	r0, r2
  40093a:	4059      	eors	r1, r3
  40093c:	e9cd 012e 	strd	r0, r1, [sp, #184]	; 0xb8
  400940:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
  400944:	4652      	mov	r2, sl
  400946:	465b      	mov	r3, fp
  400948:	4640      	mov	r0, r8
  40094a:	4649      	mov	r1, r9
  40094c:	4302      	orrs	r2, r0
  40094e:	430b      	orrs	r3, r1
  400950:	4022      	ands	r2, r4
  400952:	402b      	ands	r3, r5
  400954:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
  400958:	e9c1 2300 	strd	r2, r3, [r1]
  40095c:	4650      	mov	r0, sl
  40095e:	4659      	mov	r1, fp
  400960:	4642      	mov	r2, r8
  400962:	464b      	mov	r3, r9
  400964:	4010      	ands	r0, r2
  400966:	4019      	ands	r1, r3
  400968:	f50d 63d8 	add.w	r3, sp, #1728	; 0x6c0
  40096c:	e9d3 9a00 	ldrd	r9, sl, [r3]
  400970:	ea49 0900 	orr.w	r9, r9, r0
  400974:	ea4a 0a01 	orr.w	sl, sl, r1
  400978:	e9dd 232e 	ldrd	r2, r3, [sp, #184]	; 0xb8
  40097c:	eb12 0209 	adds.w	r2, r2, r9
  400980:	eb43 030a 	adc.w	r3, r3, sl
  400984:	4610      	mov	r0, r2
  400986:	4619      	mov	r1, r3
  400988:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  40098c:	1812      	adds	r2, r2, r0
  40098e:	414b      	adcs	r3, r1
  400990:	e9cd 232e 	strd	r2, r3, [sp, #184]	; 0xb8

00400994 <.LBB413>:
  400994:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
  400998:	4643      	mov	r3, r8
  40099a:	0b9b      	lsrs	r3, r3, #14
  40099c:	464a      	mov	r2, r9
  40099e:	ea43 4389 	orr.w	r3, r3, r9, lsl #18
  4009a2:	93ac      	str	r3, [sp, #688]	; 0x2b0
  4009a4:	0b93      	lsrs	r3, r2, #14
  4009a6:	4642      	mov	r2, r8
  4009a8:	ea43 4388 	orr.w	r3, r3, r8, lsl #18
  4009ac:	93ad      	str	r3, [sp, #692]	; 0x2b4

004009ae <.LBB415>:
  4009ae:	0c93      	lsrs	r3, r2, #18
  4009b0:	464a      	mov	r2, r9
  4009b2:	ea43 3389 	orr.w	r3, r3, r9, lsl #14
  4009b6:	93ae      	str	r3, [sp, #696]	; 0x2b8
  4009b8:	0c93      	lsrs	r3, r2, #18
  4009ba:	ea43 3388 	orr.w	r3, r3, r8, lsl #14
  4009be:	93af      	str	r3, [sp, #700]	; 0x2bc

004009c0 <.LBE415>:
  4009c0:	abac      	add	r3, sp, #688	; 0x2b0
  4009c2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4009c6:	a9ae      	add	r1, sp, #696	; 0x2b8
  4009c8:	e9d1 0100 	ldrd	r0, r1, [r1]
  4009cc:	4042      	eors	r2, r0
  4009ce:	404b      	eors	r3, r1

004009d0 <.LBB417>:
  4009d0:	4649      	mov	r1, r9
  4009d2:	05c9      	lsls	r1, r1, #23
  4009d4:	4640      	mov	r0, r8
  4009d6:	ea41 2158 	orr.w	r1, r1, r8, lsr #9
  4009da:	91b1      	str	r1, [sp, #708]	; 0x2c4
  4009dc:	05c1      	lsls	r1, r0, #23
  4009de:	ea41 2159 	orr.w	r1, r1, r9, lsr #9
  4009e2:	91b0      	str	r1, [sp, #704]	; 0x2c0

004009e4 <.LBE417>:
  4009e4:	a9b0      	add	r1, sp, #704	; 0x2c0
  4009e6:	e9d1 0100 	ldrd	r0, r1, [r1]
  4009ea:	4050      	eors	r0, r2
  4009ec:	4059      	eors	r1, r3
  4009ee:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  4009f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4009f6:	e9dd ab2c 	ldrd	sl, fp, [sp, #176]	; 0xb0
  4009fa:	4652      	mov	r2, sl
  4009fc:	465b      	mov	r3, fp
  4009fe:	4042      	eors	r2, r0
  400a00:	404b      	eors	r3, r1
  400a02:	4610      	mov	r0, r2
  400a04:	4619      	mov	r1, r3
  400a06:	4642      	mov	r2, r8
  400a08:	464b      	mov	r3, r9
  400a0a:	4002      	ands	r2, r0
  400a0c:	400b      	ands	r3, r1
  400a0e:	ea8a 0802 	eor.w	r8, sl, r2
  400a12:	ea8b 0903 	eor.w	r9, fp, r3
  400a16:	e9d6 2306 	ldrd	r2, r3, [r6, #24]
  400a1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  400a1e:	1880      	adds	r0, r0, r2
  400a20:	4159      	adcs	r1, r3
  400a22:	eb18 0000 	adds.w	r0, r8, r0
  400a26:	eb49 0101 	adc.w	r1, r9, r1
  400a2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400a2e:	2f00      	cmp	r7, #0
  400a30:	f001 870e 	beq.w	402850 <.LCFI3+0x24>

00400a34 <.LBB419>:
  400a34:	e9dd 8922 	ldrd	r8, r9, [sp, #136]	; 0x88
  400a38:	4643      	mov	r3, r8
  400a3a:	085b      	lsrs	r3, r3, #1
  400a3c:	464a      	mov	r2, r9
  400a3e:	ea43 73c9 	orr.w	r3, r3, r9, lsl #31
  400a42:	93b2      	str	r3, [sp, #712]	; 0x2c8
  400a44:	0853      	lsrs	r3, r2, #1
  400a46:	4642      	mov	r2, r8
  400a48:	ea43 73c8 	orr.w	r3, r3, r8, lsl #31
  400a4c:	93b3      	str	r3, [sp, #716]	; 0x2cc

00400a4e <.LBB421>:
  400a4e:	0a13      	lsrs	r3, r2, #8
  400a50:	464a      	mov	r2, r9
  400a52:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
  400a56:	93b4      	str	r3, [sp, #720]	; 0x2d0
  400a58:	0a13      	lsrs	r3, r2, #8
  400a5a:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
  400a5e:	93b5      	str	r3, [sp, #724]	; 0x2d4

00400a60 <.LBE421>:
  400a60:	abb2      	add	r3, sp, #712	; 0x2c8
  400a62:	e9d3 2300 	ldrd	r2, r3, [r3]
  400a66:	a9b4      	add	r1, sp, #720	; 0x2d0
  400a68:	e9d1 ab00 	ldrd	sl, fp, [r1]
  400a6c:	ea82 020a 	eor.w	r2, r2, sl
  400a70:	ea83 030b 	eor.w	r3, r3, fp
  400a74:	4641      	mov	r1, r8
  400a76:	09c9      	lsrs	r1, r1, #7
  400a78:	4648      	mov	r0, r9
  400a7a:	ea41 6149 	orr.w	r1, r1, r9, lsl #25
  400a7e:	913c      	str	r1, [sp, #240]	; 0xf0
  400a80:	09c1      	lsrs	r1, r0, #7
  400a82:	913d      	str	r1, [sp, #244]	; 0xf4
  400a84:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
  400a88:	4050      	eors	r0, r2
  400a8a:	4059      	eors	r1, r3
  400a8c:	4602      	mov	r2, r0
  400a8e:	460b      	mov	r3, r1
  400a90:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  400a94:	e9dd ab16 	ldrd	sl, fp, [sp, #88]	; 0x58
  400a98:	eb10 000a 	adds.w	r0, r0, sl
  400a9c:	eb41 010b 	adc.w	r1, r1, fp
  400aa0:	eb12 0800 	adds.w	r8, r2, r0
  400aa4:	eb43 0901 	adc.w	r9, r3, r1
  400aa8:	e9cd 8920 	strd	r8, r9, [sp, #128]	; 0x80

00400aac <.LBB423>:
  400aac:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  400ab0:	4641      	mov	r1, r8
  400ab2:	0cc9      	lsrs	r1, r1, #19
  400ab4:	4648      	mov	r0, r9
  400ab6:	ea41 3149 	orr.w	r1, r1, r9, lsl #13
  400aba:	91b6      	str	r1, [sp, #728]	; 0x2d8
  400abc:	0cc1      	lsrs	r1, r0, #19
  400abe:	4640      	mov	r0, r8
  400ac0:	ea41 3148 	orr.w	r1, r1, r8, lsl #13
  400ac4:	91b7      	str	r1, [sp, #732]	; 0x2dc

00400ac6 <.LBB425>:
  400ac6:	4649      	mov	r1, r9
  400ac8:	00c9      	lsls	r1, r1, #3
  400aca:	ea41 7158 	orr.w	r1, r1, r8, lsr #29
  400ace:	91b9      	str	r1, [sp, #740]	; 0x2e4
  400ad0:	00c1      	lsls	r1, r0, #3
  400ad2:	ea41 7159 	orr.w	r1, r1, r9, lsr #29
  400ad6:	91b8      	str	r1, [sp, #736]	; 0x2e0

00400ad8 <.LBE425>:
  400ad8:	abb6      	add	r3, sp, #728	; 0x2d8
  400ada:	e9d3 0100 	ldrd	r0, r1, [r3]
  400ade:	abb8      	add	r3, sp, #736	; 0x2e0
  400ae0:	e9d3 ab00 	ldrd	sl, fp, [r3]
  400ae4:	ea80 000a 	eor.w	r0, r0, sl
  400ae8:	ea81 010b 	eor.w	r1, r1, fp
  400aec:	4643      	mov	r3, r8
  400aee:	099b      	lsrs	r3, r3, #6
  400af0:	464a      	mov	r2, r9
  400af2:	ea43 6389 	orr.w	r3, r3, r9, lsl #26
  400af6:	933e      	str	r3, [sp, #248]	; 0xf8
  400af8:	0993      	lsrs	r3, r2, #6
  400afa:	933f      	str	r3, [sp, #252]	; 0xfc
  400afc:	e9dd 233e 	ldrd	r2, r3, [sp, #248]	; 0xf8
  400b00:	4042      	eors	r2, r0
  400b02:	404b      	eors	r3, r1
  400b04:	4610      	mov	r0, r2
  400b06:	4619      	mov	r1, r3
  400b08:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
  400b0c:	1812      	adds	r2, r2, r0
  400b0e:	414b      	adcs	r3, r1
  400b10:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  400b14:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  400b18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  400b1c:	1812      	adds	r2, r2, r0
  400b1e:	414b      	adcs	r3, r1
  400b20:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  400b24:	1880      	adds	r0, r0, r2
  400b26:	4159      	adcs	r1, r3
  400b28:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400b2c:	1902      	adds	r2, r0, r4
  400b2e:	eb41 0305 	adc.w	r3, r1, r5
  400b32:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68

00400b36 <.LBB427>:
  400b36:	e9dd 452e 	ldrd	r4, r5, [sp, #184]	; 0xb8
  400b3a:	0f23      	lsrs	r3, r4, #28
  400b3c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  400b40:	93ba      	str	r3, [sp, #744]	; 0x2e8
  400b42:	0f2b      	lsrs	r3, r5, #28
  400b44:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  400b48:	93bb      	str	r3, [sp, #748]	; 0x2ec

00400b4a <.LBB429>:
  400b4a:	07ab      	lsls	r3, r5, #30
  400b4c:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  400b50:	93bd      	str	r3, [sp, #756]	; 0x2f4
  400b52:	07a3      	lsls	r3, r4, #30
  400b54:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  400b58:	93bc      	str	r3, [sp, #752]	; 0x2f0

00400b5a <.LBE429>:
  400b5a:	abba      	add	r3, sp, #744	; 0x2e8
  400b5c:	e9d3 1200 	ldrd	r1, r2, [r3]
  400b60:	abbc      	add	r3, sp, #752	; 0x2f0
  400b62:	e9d3 ab00 	ldrd	sl, fp, [r3]
  400b66:	ea81 010a 	eor.w	r1, r1, sl
  400b6a:	ea82 020b 	eor.w	r2, r2, fp
  400b6e:	4613      	mov	r3, r2
  400b70:	460a      	mov	r2, r1

00400b72 <.LBB431>:
  400b72:	0669      	lsls	r1, r5, #25
  400b74:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  400b78:	91bf      	str	r1, [sp, #764]	; 0x2fc
  400b7a:	0661      	lsls	r1, r4, #25
  400b7c:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  400b80:	91be      	str	r1, [sp, #760]	; 0x2f8

00400b82 <.LBE431>:
  400b82:	a9be      	add	r1, sp, #760	; 0x2f8
  400b84:	e9d1 0100 	ldrd	r0, r1, [r1]
  400b88:	4050      	eors	r0, r2
  400b8a:	4059      	eors	r1, r3
  400b8c:	f50d 63d8 	add.w	r3, sp, #1728	; 0x6c0
  400b90:	e9c3 0100 	strd	r0, r1, [r3]
  400b94:	e9dd ab2a 	ldrd	sl, fp, [sp, #168]	; 0xa8
  400b98:	4650      	mov	r0, sl
  400b9a:	4659      	mov	r1, fp
  400b9c:	46a0      	mov	r8, r4
  400b9e:	4320      	orrs	r0, r4
  400ba0:	4329      	orrs	r1, r5
  400ba2:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
  400ba6:	4003      	ands	r3, r0
  400ba8:	400c      	ands	r4, r1
  400baa:	4618      	mov	r0, r3
  400bac:	4621      	mov	r1, r4
  400bae:	4652      	mov	r2, sl
  400bb0:	465b      	mov	r3, fp
  400bb2:	4644      	mov	r4, r8
  400bb4:	4022      	ands	r2, r4
  400bb6:	402b      	ands	r3, r5
  400bb8:	4310      	orrs	r0, r2
  400bba:	4319      	orrs	r1, r3
  400bbc:	f50d 63d8 	add.w	r3, sp, #1728	; 0x6c0
  400bc0:	e9d3 3400 	ldrd	r3, r4, [r3]
  400bc4:	181b      	adds	r3, r3, r0
  400bc6:	414c      	adcs	r4, r1
  400bc8:	4621      	mov	r1, r4
  400bca:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  400bce:	18e4      	adds	r4, r4, r3
  400bd0:	414d      	adcs	r5, r1

00400bd2 <.LBB433>:
  400bd2:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  400bd6:	0b83      	lsrs	r3, r0, #14
  400bd8:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  400bdc:	93c0      	str	r3, [sp, #768]	; 0x300
  400bde:	0b8b      	lsrs	r3, r1, #14
  400be0:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
  400be4:	93c1      	str	r3, [sp, #772]	; 0x304

00400be6 <.LBB435>:
  400be6:	0c83      	lsrs	r3, r0, #18
  400be8:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
  400bec:	93c2      	str	r3, [sp, #776]	; 0x308
  400bee:	0c8b      	lsrs	r3, r1, #18
  400bf0:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
  400bf4:	93c3      	str	r3, [sp, #780]	; 0x30c

00400bf6 <.LBE435>:
        R( 4); R( 5); R( 6); R( 7);
  400bf6:	abc0      	add	r3, sp, #768	; 0x300
  400bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
  400bfc:	f50d 7842 	add.w	r8, sp, #776	; 0x308
  400c00:	e9d8 ab00 	ldrd	sl, fp, [r8]
  400c04:	ea82 020a 	eor.w	r2, r2, sl
  400c08:	ea83 030b 	eor.w	r3, r3, fp

00400c0c <.LBB437>:
  400c0c:	4682      	mov	sl, r0
  400c0e:	468b      	mov	fp, r1
  400c10:	05c9      	lsls	r1, r1, #23
  400c12:	4650      	mov	r0, sl
  400c14:	ea41 215a 	orr.w	r1, r1, sl, lsr #9
  400c18:	91c5      	str	r1, [sp, #788]	; 0x314
  400c1a:	05c1      	lsls	r1, r0, #23
  400c1c:	ea41 215b 	orr.w	r1, r1, fp, lsr #9
  400c20:	91c4      	str	r1, [sp, #784]	; 0x310

00400c22 <.LBE437>:
  400c22:	a9c4      	add	r1, sp, #784	; 0x310
  400c24:	e9d1 0100 	ldrd	r0, r1, [r1]
  400c28:	4050      	eors	r0, r2
  400c2a:	4059      	eors	r1, r3
  400c2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400c30:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
  400c34:	4640      	mov	r0, r8
  400c36:	4649      	mov	r1, r9
  400c38:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  400c3c:	4042      	eors	r2, r0
  400c3e:	404b      	eors	r3, r1
  400c40:	4610      	mov	r0, r2
  400c42:	4619      	mov	r1, r3
  400c44:	4652      	mov	r2, sl
  400c46:	465b      	mov	r3, fp
  400c48:	4002      	ands	r2, r0
  400c4a:	400b      	ands	r3, r1
  400c4c:	4610      	mov	r0, r2
  400c4e:	4619      	mov	r1, r3
  400c50:	4642      	mov	r2, r8
  400c52:	464b      	mov	r3, r9
  400c54:	4042      	eors	r2, r0
  400c56:	404b      	eors	r3, r1
  400c58:	4610      	mov	r0, r2
  400c5a:	4619      	mov	r1, r3
  400c5c:	e9d6 2308 	ldrd	r2, r3, [r6, #32]
  400c60:	e9dd ab2c 	ldrd	sl, fp, [sp, #176]	; 0xb0
  400c64:	eb1a 0a02 	adds.w	sl, sl, r2
  400c68:	eb4b 0b03 	adc.w	fp, fp, r3
  400c6c:	eb1a 0200 	adds.w	r2, sl, r0
  400c70:	eb4b 0301 	adc.w	r3, fp, r1
  400c74:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
  400c78:	2f00      	cmp	r7, #0
  400c7a:	f001 85ef 	beq.w	40285c <.LCFI3+0x30>

00400c7e <.LBB439>:
  400c7e:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
  400c82:	4643      	mov	r3, r8
  400c84:	085b      	lsrs	r3, r3, #1
  400c86:	464a      	mov	r2, r9
  400c88:	ea43 73c9 	orr.w	r3, r3, r9, lsl #31
  400c8c:	93c6      	str	r3, [sp, #792]	; 0x318
  400c8e:	0853      	lsrs	r3, r2, #1
  400c90:	4642      	mov	r2, r8
  400c92:	ea43 73c8 	orr.w	r3, r3, r8, lsl #31
  400c96:	93c7      	str	r3, [sp, #796]	; 0x31c

00400c98 <.LBB441>:
  400c98:	0a13      	lsrs	r3, r2, #8
  400c9a:	464a      	mov	r2, r9
  400c9c:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
  400ca0:	93c8      	str	r3, [sp, #800]	; 0x320
  400ca2:	0a13      	lsrs	r3, r2, #8
  400ca4:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
  400ca8:	93c9      	str	r3, [sp, #804]	; 0x324

00400caa <.LBE441>:
  400caa:	abc6      	add	r3, sp, #792	; 0x318
  400cac:	e9d3 2300 	ldrd	r2, r3, [r3]
  400cb0:	a9c8      	add	r1, sp, #800	; 0x320
  400cb2:	e9d1 ab00 	ldrd	sl, fp, [r1]
  400cb6:	ea82 020a 	eor.w	r2, r2, sl
  400cba:	ea83 030b 	eor.w	r3, r3, fp
  400cbe:	4641      	mov	r1, r8
  400cc0:	09c9      	lsrs	r1, r1, #7
  400cc2:	4648      	mov	r0, r9
  400cc4:	ea41 6149 	orr.w	r1, r1, r9, lsl #25
  400cc8:	9140      	str	r1, [sp, #256]	; 0x100
  400cca:	09c1      	lsrs	r1, r0, #7
  400ccc:	9141      	str	r1, [sp, #260]	; 0x104
  400cce:	a940      	add	r1, sp, #256	; 0x100
  400cd0:	e9d1 0100 	ldrd	r0, r1, [r1]
  400cd4:	4050      	eors	r0, r2
  400cd6:	4059      	eors	r1, r3
  400cd8:	4602      	mov	r2, r0
  400cda:	460b      	mov	r3, r1
  400cdc:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
  400ce0:	e9dd ab26 	ldrd	sl, fp, [sp, #152]	; 0x98
  400ce4:	eb10 000a 	adds.w	r0, r0, sl
  400ce8:	eb41 010b 	adc.w	r1, r1, fp
  400cec:	eb12 0800 	adds.w	r8, r2, r0
  400cf0:	eb43 0901 	adc.w	r9, r3, r1
  400cf4:	e9cd 8922 	strd	r8, r9, [sp, #136]	; 0x88

00400cf8 <.LBB443>:
  400cf8:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
  400cfc:	4641      	mov	r1, r8
  400cfe:	0cc9      	lsrs	r1, r1, #19
  400d00:	4648      	mov	r0, r9
  400d02:	ea41 3149 	orr.w	r1, r1, r9, lsl #13
  400d06:	91ca      	str	r1, [sp, #808]	; 0x328
  400d08:	0cc1      	lsrs	r1, r0, #19
  400d0a:	4640      	mov	r0, r8
  400d0c:	ea41 3148 	orr.w	r1, r1, r8, lsl #13
  400d10:	91cb      	str	r1, [sp, #812]	; 0x32c

00400d12 <.LBB445>:
  400d12:	4649      	mov	r1, r9
  400d14:	00c9      	lsls	r1, r1, #3
  400d16:	ea41 7158 	orr.w	r1, r1, r8, lsr #29
  400d1a:	91cd      	str	r1, [sp, #820]	; 0x334
  400d1c:	00c1      	lsls	r1, r0, #3
  400d1e:	ea41 7159 	orr.w	r1, r1, r9, lsr #29
  400d22:	91cc      	str	r1, [sp, #816]	; 0x330

00400d24 <.LBE445>:
  400d24:	abca      	add	r3, sp, #808	; 0x328
  400d26:	e9d3 0100 	ldrd	r0, r1, [r3]
  400d2a:	abcc      	add	r3, sp, #816	; 0x330
  400d2c:	e9d3 ab00 	ldrd	sl, fp, [r3]
  400d30:	ea80 000a 	eor.w	r0, r0, sl
  400d34:	ea81 010b 	eor.w	r1, r1, fp
  400d38:	4643      	mov	r3, r8
  400d3a:	099b      	lsrs	r3, r3, #6
  400d3c:	464a      	mov	r2, r9
  400d3e:	ea43 6389 	orr.w	r3, r3, r9, lsl #26
  400d42:	9342      	str	r3, [sp, #264]	; 0x108
  400d44:	0993      	lsrs	r3, r2, #6
  400d46:	9343      	str	r3, [sp, #268]	; 0x10c
  400d48:	ab42      	add	r3, sp, #264	; 0x108
  400d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
  400d4e:	4042      	eors	r2, r0
  400d50:	404b      	eors	r3, r1
  400d52:	4610      	mov	r0, r2
  400d54:	4619      	mov	r1, r3
  400d56:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
  400d5a:	1812      	adds	r2, r2, r0
  400d5c:	414b      	adcs	r3, r1
  400d5e:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
  400d62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  400d66:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
  400d6a:	1880      	adds	r0, r0, r2
  400d6c:	4159      	adcs	r1, r3
  400d6e:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
  400d72:	1812      	adds	r2, r2, r0
  400d74:	414b      	adcs	r3, r1
  400d76:	4690      	mov	r8, r2
  400d78:	4699      	mov	r9, r3
  400d7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  400d7e:	eb12 0208 	adds.w	r2, r2, r8
  400d82:	eb43 0309 	adc.w	r3, r3, r9
  400d86:	e9cd 2306 	strd	r2, r3, [sp, #24]

00400d8a <.LBB447>:
  400d8a:	0f23      	lsrs	r3, r4, #28
  400d8c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  400d90:	93ce      	str	r3, [sp, #824]	; 0x338
  400d92:	0f2b      	lsrs	r3, r5, #28
  400d94:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  400d98:	93cf      	str	r3, [sp, #828]	; 0x33c

00400d9a <.LBB449>:
  400d9a:	07ab      	lsls	r3, r5, #30
  400d9c:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  400da0:	93d1      	str	r3, [sp, #836]	; 0x344
  400da2:	07a3      	lsls	r3, r4, #30
  400da4:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  400da8:	93d0      	str	r3, [sp, #832]	; 0x340

00400daa <.LBE449>:
  400daa:	abce      	add	r3, sp, #824	; 0x338
  400dac:	e9d3 2300 	ldrd	r2, r3, [r3]
  400db0:	a9d0      	add	r1, sp, #832	; 0x340
  400db2:	e9d1 ab00 	ldrd	sl, fp, [r1]
  400db6:	ea82 020a 	eor.w	r2, r2, sl
  400dba:	ea83 030b 	eor.w	r3, r3, fp

00400dbe <.LBB451>:
  400dbe:	0669      	lsls	r1, r5, #25
  400dc0:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  400dc4:	91d3      	str	r1, [sp, #844]	; 0x34c
  400dc6:	0661      	lsls	r1, r4, #25
  400dc8:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  400dcc:	91d2      	str	r1, [sp, #840]	; 0x348

00400dce <.LBE451>:
  400dce:	a9d2      	add	r1, sp, #840	; 0x348
  400dd0:	e9d1 ab00 	ldrd	sl, fp, [r1]
  400dd4:	ea8a 0a02 	eor.w	sl, sl, r2
  400dd8:	ea8b 0b03 	eor.w	fp, fp, r3
  400ddc:	e9cd ab02 	strd	sl, fp, [sp, #8]
  400de0:	e9dd ab2e 	ldrd	sl, fp, [sp, #184]	; 0xb8
  400de4:	4650      	mov	r0, sl
  400de6:	4659      	mov	r1, fp
  400de8:	4320      	orrs	r0, r4
  400dea:	4329      	orrs	r1, r5
  400dec:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  400df0:	4002      	ands	r2, r0
  400df2:	400b      	ands	r3, r1
  400df4:	ea0a 0a04 	and.w	sl, sl, r4
  400df8:	ea0b 0b05 	and.w	fp, fp, r5
  400dfc:	ea4a 0a02 	orr.w	sl, sl, r2
  400e00:	ea4b 0b03 	orr.w	fp, fp, r3
  400e04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  400e08:	eb12 020a 	adds.w	r2, r2, sl
  400e0c:	eb43 030b 	adc.w	r3, r3, fp
  400e10:	eb18 0a02 	adds.w	sl, r8, r2
  400e14:	eb49 0b03 	adc.w	fp, r9, r3

00400e18 <.LBB453>:
  400e18:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  400e1c:	4643      	mov	r3, r8
  400e1e:	0b9b      	lsrs	r3, r3, #14
  400e20:	464a      	mov	r2, r9
  400e22:	ea43 4389 	orr.w	r3, r3, r9, lsl #18
  400e26:	93d4      	str	r3, [sp, #848]	; 0x350
  400e28:	0b93      	lsrs	r3, r2, #14
  400e2a:	4642      	mov	r2, r8
  400e2c:	ea43 4388 	orr.w	r3, r3, r8, lsl #18
  400e30:	93d5      	str	r3, [sp, #852]	; 0x354

00400e32 <.LBB455>:
  400e32:	0c93      	lsrs	r3, r2, #18
  400e34:	464a      	mov	r2, r9
  400e36:	ea43 3389 	orr.w	r3, r3, r9, lsl #14
  400e3a:	93d6      	str	r3, [sp, #856]	; 0x358
  400e3c:	0c93      	lsrs	r3, r2, #18
  400e3e:	ea43 3388 	orr.w	r3, r3, r8, lsl #14
  400e42:	93d7      	str	r3, [sp, #860]	; 0x35c

00400e44 <.LBE455>:
  400e44:	abd4      	add	r3, sp, #848	; 0x350
  400e46:	e9d3 2300 	ldrd	r2, r3, [r3]
  400e4a:	a9d6      	add	r1, sp, #856	; 0x358
  400e4c:	e9d1 0100 	ldrd	r0, r1, [r1]
  400e50:	4042      	eors	r2, r0
  400e52:	404b      	eors	r3, r1

00400e54 <.LBB457>:
  400e54:	4649      	mov	r1, r9
  400e56:	05c9      	lsls	r1, r1, #23
  400e58:	4640      	mov	r0, r8
  400e5a:	ea41 2158 	orr.w	r1, r1, r8, lsr #9
  400e5e:	91d9      	str	r1, [sp, #868]	; 0x364
  400e60:	05c1      	lsls	r1, r0, #23
  400e62:	ea41 2159 	orr.w	r1, r1, r9, lsr #9
  400e66:	91d8      	str	r1, [sp, #864]	; 0x360

00400e68 <.LBE457>:
  400e68:	a9d8      	add	r1, sp, #864	; 0x360
  400e6a:	e9d1 0100 	ldrd	r0, r1, [r1]
  400e6e:	4050      	eors	r0, r2
  400e70:	4059      	eors	r1, r3
  400e72:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400e76:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  400e7a:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  400e7e:	4042      	eors	r2, r0
  400e80:	404b      	eors	r3, r1
  400e82:	4610      	mov	r0, r2
  400e84:	4619      	mov	r1, r3
  400e86:	4642      	mov	r2, r8
  400e88:	464b      	mov	r3, r9
  400e8a:	4002      	ands	r2, r0
  400e8c:	400b      	ands	r3, r1
  400e8e:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
  400e92:	ea88 0802 	eor.w	r8, r8, r2
  400e96:	ea89 0903 	eor.w	r9, r9, r3
  400e9a:	e9d6 230a 	ldrd	r2, r3, [r6, #40]	; 0x28
  400e9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  400ea2:	1880      	adds	r0, r0, r2
  400ea4:	4159      	adcs	r1, r3
  400ea6:	eb18 0000 	adds.w	r0, r8, r0
  400eaa:	eb49 0101 	adc.w	r1, r9, r1
  400eae:	e9cd 0104 	strd	r0, r1, [sp, #16]
  400eb2:	2f00      	cmp	r7, #0
  400eb4:	f001 84d8 	beq.w	402868 <.LCFI3+0x3c>

00400eb8 <.LBB459>:
  400eb8:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
  400ebc:	4643      	mov	r3, r8
  400ebe:	085b      	lsrs	r3, r3, #1
  400ec0:	464a      	mov	r2, r9
  400ec2:	ea43 73c9 	orr.w	r3, r3, r9, lsl #31
  400ec6:	93da      	str	r3, [sp, #872]	; 0x368
  400ec8:	0853      	lsrs	r3, r2, #1
  400eca:	4642      	mov	r2, r8
  400ecc:	ea43 73c8 	orr.w	r3, r3, r8, lsl #31
  400ed0:	93db      	str	r3, [sp, #876]	; 0x36c

00400ed2 <.LBB461>:
  400ed2:	0a13      	lsrs	r3, r2, #8
  400ed4:	464a      	mov	r2, r9
  400ed6:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
  400eda:	93dc      	str	r3, [sp, #880]	; 0x370
  400edc:	0a13      	lsrs	r3, r2, #8
  400ede:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
  400ee2:	93dd      	str	r3, [sp, #884]	; 0x374

00400ee4 <.LBE461>:
  400ee4:	abda      	add	r3, sp, #872	; 0x368
  400ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
  400eea:	a9dc      	add	r1, sp, #880	; 0x370
  400eec:	e9d1 0100 	ldrd	r0, r1, [r1]
  400ef0:	4042      	eors	r2, r0
  400ef2:	404b      	eors	r3, r1
  400ef4:	4641      	mov	r1, r8
  400ef6:	09c9      	lsrs	r1, r1, #7
  400ef8:	4648      	mov	r0, r9
  400efa:	ea41 6149 	orr.w	r1, r1, r9, lsl #25
  400efe:	9144      	str	r1, [sp, #272]	; 0x110
  400f00:	09c1      	lsrs	r1, r0, #7
  400f02:	9145      	str	r1, [sp, #276]	; 0x114
  400f04:	a944      	add	r1, sp, #272	; 0x110
  400f06:	e9d1 0100 	ldrd	r0, r1, [r1]
  400f0a:	4050      	eors	r0, r2
  400f0c:	4059      	eors	r1, r3
  400f0e:	4680      	mov	r8, r0
  400f10:	4689      	mov	r9, r1
  400f12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  400f16:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  400f1a:	1880      	adds	r0, r0, r2
  400f1c:	4159      	adcs	r1, r3
  400f1e:	eb18 0200 	adds.w	r2, r8, r0
  400f22:	eb49 0301 	adc.w	r3, r9, r1
  400f26:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28

00400f2a <.LBB463>:
  400f2a:	e9dd 8920 	ldrd	r8, r9, [sp, #128]	; 0x80
  400f2e:	4641      	mov	r1, r8
  400f30:	0cc9      	lsrs	r1, r1, #19
  400f32:	4648      	mov	r0, r9
  400f34:	ea41 3149 	orr.w	r1, r1, r9, lsl #13
  400f38:	91de      	str	r1, [sp, #888]	; 0x378
  400f3a:	0cc1      	lsrs	r1, r0, #19
  400f3c:	4640      	mov	r0, r8
  400f3e:	ea41 3148 	orr.w	r1, r1, r8, lsl #13
  400f42:	91df      	str	r1, [sp, #892]	; 0x37c

00400f44 <.LBB465>:
  400f44:	4649      	mov	r1, r9
  400f46:	00c9      	lsls	r1, r1, #3
  400f48:	ea41 7158 	orr.w	r1, r1, r8, lsr #29
  400f4c:	91e1      	str	r1, [sp, #900]	; 0x384
  400f4e:	00c1      	lsls	r1, r0, #3
  400f50:	ea41 7159 	orr.w	r1, r1, r9, lsr #29
  400f54:	91e0      	str	r1, [sp, #896]	; 0x380

00400f56 <.LBE465>:
  400f56:	abde      	add	r3, sp, #888	; 0x378
  400f58:	e9d3 0100 	ldrd	r0, r1, [r3]
  400f5c:	abe0      	add	r3, sp, #896	; 0x380
  400f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
  400f62:	4050      	eors	r0, r2
  400f64:	4059      	eors	r1, r3
  400f66:	4643      	mov	r3, r8
  400f68:	099b      	lsrs	r3, r3, #6
  400f6a:	464a      	mov	r2, r9
  400f6c:	ea43 6389 	orr.w	r3, r3, r9, lsl #26
  400f70:	9346      	str	r3, [sp, #280]	; 0x118
  400f72:	0993      	lsrs	r3, r2, #6
  400f74:	9347      	str	r3, [sp, #284]	; 0x11c
  400f76:	ab46      	add	r3, sp, #280	; 0x118
  400f78:	e9d3 2300 	ldrd	r2, r3, [r3]
  400f7c:	4042      	eors	r2, r0
  400f7e:	404b      	eors	r3, r1
  400f80:	4610      	mov	r0, r2
  400f82:	4619      	mov	r1, r3
  400f84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  400f88:	1812      	adds	r2, r2, r0
  400f8a:	414b      	adcs	r3, r1
  400f8c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  400f90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  400f94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  400f98:	1812      	adds	r2, r2, r0
  400f9a:	414b      	adcs	r3, r1
  400f9c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  400fa0:	1880      	adds	r0, r0, r2
  400fa2:	4159      	adcs	r1, r3
  400fa4:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  400fa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400fac:	1812      	adds	r2, r2, r0
  400fae:	414b      	adcs	r3, r1
  400fb0:	e9cd 2304 	strd	r2, r3, [sp, #16]

00400fb4 <.LBB467>:
  400fb4:	ea4f 731a 	mov.w	r3, sl, lsr #28
  400fb8:	ea43 130b 	orr.w	r3, r3, fp, lsl #4
  400fbc:	93e2      	str	r3, [sp, #904]	; 0x388
  400fbe:	ea4f 731b 	mov.w	r3, fp, lsr #28
  400fc2:	ea43 130a 	orr.w	r3, r3, sl, lsl #4
  400fc6:	93e3      	str	r3, [sp, #908]	; 0x38c

00400fc8 <.LBB469>:
  400fc8:	ea4f 738b 	mov.w	r3, fp, lsl #30
  400fcc:	ea43 039a 	orr.w	r3, r3, sl, lsr #2
  400fd0:	93e5      	str	r3, [sp, #916]	; 0x394
  400fd2:	ea4f 738a 	mov.w	r3, sl, lsl #30
  400fd6:	ea43 039b 	orr.w	r3, r3, fp, lsr #2
  400fda:	93e4      	str	r3, [sp, #912]	; 0x390

00400fdc <.LBE469>:
  400fdc:	abe2      	add	r3, sp, #904	; 0x388
  400fde:	e9d3 1200 	ldrd	r1, r2, [r3]
  400fe2:	abe4      	add	r3, sp, #912	; 0x390
  400fe4:	e9d3 8900 	ldrd	r8, r9, [r3]
  400fe8:	ea81 0108 	eor.w	r1, r1, r8
  400fec:	ea82 0209 	eor.w	r2, r2, r9
  400ff0:	4613      	mov	r3, r2
  400ff2:	460a      	mov	r2, r1

00400ff4 <.LBB471>:
  400ff4:	ea4f 614b 	mov.w	r1, fp, lsl #25
  400ff8:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
  400ffc:	91e7      	str	r1, [sp, #924]	; 0x39c
  400ffe:	ea4f 614a 	mov.w	r1, sl, lsl #25
  401002:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
  401006:	91e6      	str	r1, [sp, #920]	; 0x398

00401008 <.LBE471>:
  401008:	a9e6      	add	r1, sp, #920	; 0x398
  40100a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40100e:	4050      	eors	r0, r2
  401010:	4059      	eors	r1, r3
  401012:	4680      	mov	r8, r0
  401014:	4689      	mov	r9, r1
  401016:	ea44 000a 	orr.w	r0, r4, sl
  40101a:	ea45 010b 	orr.w	r1, r5, fp
  40101e:	e9dd 232e 	ldrd	r2, r3, [sp, #184]	; 0xb8
  401022:	4002      	ands	r2, r0
  401024:	400b      	ands	r3, r1
  401026:	4610      	mov	r0, r2
  401028:	4619      	mov	r1, r3
  40102a:	ea04 020a 	and.w	r2, r4, sl
  40102e:	ea05 030b 	and.w	r3, r5, fp
  401032:	4302      	orrs	r2, r0
  401034:	430b      	orrs	r3, r1
  401036:	eb12 0008 	adds.w	r0, r2, r8
  40103a:	eb43 0109 	adc.w	r1, r3, r9
  40103e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401042:	1812      	adds	r2, r2, r0
  401044:	414b      	adcs	r3, r1
  401046:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8

0040104a <.LBB473>:
  40104a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40104e:	0b83      	lsrs	r3, r0, #14
  401050:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  401054:	93e8      	str	r3, [sp, #928]	; 0x3a0
  401056:	0b8b      	lsrs	r3, r1, #14
  401058:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
  40105c:	93e9      	str	r3, [sp, #932]	; 0x3a4

0040105e <.LBB475>:
  40105e:	0c83      	lsrs	r3, r0, #18
  401060:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
  401064:	93ea      	str	r3, [sp, #936]	; 0x3a8
  401066:	0c8b      	lsrs	r3, r1, #18
  401068:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
  40106c:	93eb      	str	r3, [sp, #940]	; 0x3ac

0040106e <.LBE475>:
  40106e:	abe8      	add	r3, sp, #928	; 0x3a0
  401070:	e9d3 2300 	ldrd	r2, r3, [r3]
  401074:	f50d 786a 	add.w	r8, sp, #936	; 0x3a8
  401078:	e9d8 8900 	ldrd	r8, r9, [r8]
  40107c:	ea82 0208 	eor.w	r2, r2, r8
  401080:	ea83 0309 	eor.w	r3, r3, r9

00401084 <.LBB477>:
  401084:	4680      	mov	r8, r0
  401086:	4689      	mov	r9, r1
  401088:	05c9      	lsls	r1, r1, #23
  40108a:	4640      	mov	r0, r8
  40108c:	ea41 2158 	orr.w	r1, r1, r8, lsr #9
  401090:	91ed      	str	r1, [sp, #948]	; 0x3b4
  401092:	05c1      	lsls	r1, r0, #23
  401094:	ea41 2159 	orr.w	r1, r1, r9, lsr #9
  401098:	91ec      	str	r1, [sp, #944]	; 0x3b0

0040109a <.LBE477>:
  40109a:	a9ec      	add	r1, sp, #944	; 0x3b0
  40109c:	e9d1 0100 	ldrd	r0, r1, [r1]
  4010a0:	4050      	eors	r0, r2
  4010a2:	4059      	eors	r1, r3
  4010a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4010a8:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  4010ac:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  4010b0:	ea80 0008 	eor.w	r0, r0, r8
  4010b4:	ea81 0109 	eor.w	r1, r1, r9
  4010b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4010bc:	4002      	ands	r2, r0
  4010be:	400b      	ands	r3, r1
  4010c0:	4610      	mov	r0, r2
  4010c2:	4619      	mov	r1, r3
  4010c4:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  4010c8:	4042      	eors	r2, r0
  4010ca:	404b      	eors	r3, r1
  4010cc:	4610      	mov	r0, r2
  4010ce:	4619      	mov	r1, r3
  4010d0:	e9d6 230c 	ldrd	r2, r3, [r6, #48]	; 0x30
  4010d4:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
  4010d8:	eb18 0802 	adds.w	r8, r8, r2
  4010dc:	eb49 0903 	adc.w	r9, r9, r3
  4010e0:	eb18 0200 	adds.w	r2, r8, r0
  4010e4:	eb49 0301 	adc.w	r3, r9, r1
  4010e8:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  4010ec:	2f00      	cmp	r7, #0
  4010ee:	f001 83c1 	beq.w	402874 <.LCFI3+0x48>

004010f2 <.LBB479>:
  4010f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4010f6:	0843      	lsrs	r3, r0, #1
  4010f8:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
  4010fc:	93ee      	str	r3, [sp, #952]	; 0x3b8
  4010fe:	084b      	lsrs	r3, r1, #1
  401100:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
  401104:	93ef      	str	r3, [sp, #956]	; 0x3bc

00401106 <.LBB481>:
  401106:	0a03      	lsrs	r3, r0, #8
  401108:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  40110c:	93f0      	str	r3, [sp, #960]	; 0x3c0
  40110e:	0a0b      	lsrs	r3, r1, #8
  401110:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  401114:	93f1      	str	r3, [sp, #964]	; 0x3c4

00401116 <.LBE481>:
  401116:	abee      	add	r3, sp, #952	; 0x3b8
  401118:	e9d3 2300 	ldrd	r2, r3, [r3]
  40111c:	f50d 7870 	add.w	r8, sp, #960	; 0x3c0
  401120:	e9d8 8900 	ldrd	r8, r9, [r8]
  401124:	ea82 0208 	eor.w	r2, r2, r8
  401128:	ea83 0309 	eor.w	r3, r3, r9
  40112c:	4689      	mov	r9, r1
  40112e:	09c1      	lsrs	r1, r0, #7
  401130:	4648      	mov	r0, r9
  401132:	ea41 6149 	orr.w	r1, r1, r9, lsl #25
  401136:	9148      	str	r1, [sp, #288]	; 0x120
  401138:	09c1      	lsrs	r1, r0, #7
  40113a:	9149      	str	r1, [sp, #292]	; 0x124
  40113c:	a948      	add	r1, sp, #288	; 0x120
  40113e:	e9d1 0100 	ldrd	r0, r1, [r1]
  401142:	4050      	eors	r0, r2
  401144:	4059      	eors	r1, r3
  401146:	4602      	mov	r2, r0
  401148:	460b      	mov	r3, r1
  40114a:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
  40114e:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
  401152:	eb10 0008 	adds.w	r0, r0, r8
  401156:	eb41 0109 	adc.w	r1, r1, r9
  40115a:	eb12 0800 	adds.w	r8, r2, r0
  40115e:	eb43 0901 	adc.w	r9, r3, r1
  401162:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38

00401166 <.LBB483>:
  401166:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
  40116a:	0cd1      	lsrs	r1, r2, #19
  40116c:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
  401170:	91f2      	str	r1, [sp, #968]	; 0x3c8
  401172:	0cd9      	lsrs	r1, r3, #19
  401174:	ea41 3142 	orr.w	r1, r1, r2, lsl #13
  401178:	91f3      	str	r1, [sp, #972]	; 0x3cc

0040117a <.LBB485>:
  40117a:	00d9      	lsls	r1, r3, #3
  40117c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
  401180:	91f5      	str	r1, [sp, #980]	; 0x3d4
  401182:	00d1      	lsls	r1, r2, #3
  401184:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
  401188:	91f4      	str	r1, [sp, #976]	; 0x3d0

0040118a <.LBE485>:
  40118a:	a9f2      	add	r1, sp, #968	; 0x3c8
  40118c:	e9d1 0100 	ldrd	r0, r1, [r1]
  401190:	f50d 7874 	add.w	r8, sp, #976	; 0x3d0
  401194:	e9d8 8900 	ldrd	r8, r9, [r8]
  401198:	ea80 0008 	eor.w	r0, r0, r8
  40119c:	ea81 0109 	eor.w	r1, r1, r9
  4011a0:	4699      	mov	r9, r3
  4011a2:	0993      	lsrs	r3, r2, #6
  4011a4:	464a      	mov	r2, r9
  4011a6:	ea43 6389 	orr.w	r3, r3, r9, lsl #26
  4011aa:	934a      	str	r3, [sp, #296]	; 0x128
  4011ac:	0993      	lsrs	r3, r2, #6
  4011ae:	934b      	str	r3, [sp, #300]	; 0x12c
  4011b0:	ab4a      	add	r3, sp, #296	; 0x128
  4011b2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4011b6:	4042      	eors	r2, r0
  4011b8:	404b      	eors	r3, r1
  4011ba:	4610      	mov	r0, r2
  4011bc:	4619      	mov	r1, r3
  4011be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  4011c2:	1812      	adds	r2, r2, r0
  4011c4:	414b      	adcs	r3, r1
  4011c6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  4011ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4011ce:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
  4011d2:	1880      	adds	r0, r0, r2
  4011d4:	4159      	adcs	r1, r3
  4011d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  4011da:	1812      	adds	r2, r2, r0
  4011dc:	414b      	adcs	r3, r1
  4011de:	4610      	mov	r0, r2
  4011e0:	4619      	mov	r1, r3
  4011e2:	e9dd 232e 	ldrd	r2, r3, [sp, #184]	; 0xb8
  4011e6:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  4011ea:	1880      	adds	r0, r0, r2
  4011ec:	4159      	adcs	r1, r3
  4011ee:	4602      	mov	r2, r0
  4011f0:	460b      	mov	r3, r1
  4011f2:	e9cd 2302 	strd	r2, r3, [sp, #8]

004011f6 <.LBB487>:
  4011f6:	e9dd 892a 	ldrd	r8, r9, [sp, #168]	; 0xa8
  4011fa:	4643      	mov	r3, r8
  4011fc:	0f1b      	lsrs	r3, r3, #28
  4011fe:	464a      	mov	r2, r9
  401200:	ea43 1309 	orr.w	r3, r3, r9, lsl #4
  401204:	93f6      	str	r3, [sp, #984]	; 0x3d8
  401206:	0f13      	lsrs	r3, r2, #28
  401208:	4642      	mov	r2, r8
  40120a:	ea43 1308 	orr.w	r3, r3, r8, lsl #4
  40120e:	93f7      	str	r3, [sp, #988]	; 0x3dc

00401210 <.LBB489>:
  401210:	464b      	mov	r3, r9
  401212:	079b      	lsls	r3, r3, #30
  401214:	ea43 0398 	orr.w	r3, r3, r8, lsr #2
  401218:	93f9      	str	r3, [sp, #996]	; 0x3e4
  40121a:	0793      	lsls	r3, r2, #30
  40121c:	ea43 0399 	orr.w	r3, r3, r9, lsr #2
  401220:	93f8      	str	r3, [sp, #992]	; 0x3e0

00401222 <.LBE489>:
  401222:	abf6      	add	r3, sp, #984	; 0x3d8
  401224:	e9d3 2300 	ldrd	r2, r3, [r3]
  401228:	a9f8      	add	r1, sp, #992	; 0x3e0
  40122a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40122e:	4042      	eors	r2, r0
  401230:	404b      	eors	r3, r1

00401232 <.LBB491>:
  401232:	4649      	mov	r1, r9
  401234:	0649      	lsls	r1, r1, #25
  401236:	4640      	mov	r0, r8
  401238:	ea41 11d8 	orr.w	r1, r1, r8, lsr #7
  40123c:	91fb      	str	r1, [sp, #1004]	; 0x3ec
  40123e:	0641      	lsls	r1, r0, #25
  401240:	ea41 11d9 	orr.w	r1, r1, r9, lsr #7
  401244:	91fa      	str	r1, [sp, #1000]	; 0x3e8

00401246 <.LBE491>:
  401246:	a9fa      	add	r1, sp, #1000	; 0x3e8
  401248:	e9d1 0100 	ldrd	r0, r1, [r1]
  40124c:	4050      	eors	r0, r2
  40124e:	4059      	eors	r1, r3
  401250:	4602      	mov	r2, r0
  401252:	460b      	mov	r3, r1
  401254:	ea48 000a 	orr.w	r0, r8, sl
  401258:	ea49 010b 	orr.w	r1, r9, fp
  40125c:	4020      	ands	r0, r4
  40125e:	4029      	ands	r1, r5
  401260:	ea08 080a 	and.w	r8, r8, sl
  401264:	ea09 090b 	and.w	r9, r9, fp
  401268:	ea48 0800 	orr.w	r8, r8, r0
  40126c:	ea49 0901 	orr.w	r9, r9, r1
  401270:	eb18 0002 	adds.w	r0, r8, r2
  401274:	eb49 0103 	adc.w	r1, r9, r3
  401278:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
  40127c:	eb18 0800 	adds.w	r8, r8, r0
  401280:	eb49 0901 	adc.w	r9, r9, r1

00401284 <.LBB493>:
  401284:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  401288:	0b83      	lsrs	r3, r0, #14
  40128a:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  40128e:	93fc      	str	r3, [sp, #1008]	; 0x3f0
  401290:	0b8b      	lsrs	r3, r1, #14
  401292:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
  401296:	93fd      	str	r3, [sp, #1012]	; 0x3f4

00401298 <.LBB495>:
  401298:	0c83      	lsrs	r3, r0, #18
  40129a:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
  40129e:	93fe      	str	r3, [sp, #1016]	; 0x3f8
  4012a0:	0c8b      	lsrs	r3, r1, #18
  4012a2:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
  4012a6:	93ff      	str	r3, [sp, #1020]	; 0x3fc

004012a8 <.LBE495>:
  4012a8:	abfc      	add	r3, sp, #1008	; 0x3f0
  4012aa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4012ae:	a9fe      	add	r1, sp, #1016	; 0x3f8
  4012b0:	e9d1 0100 	ldrd	r0, r1, [r1]
  4012b4:	4042      	eors	r2, r0
  4012b6:	404b      	eors	r3, r1

004012b8 <.LBB497>:
  4012b8:	9903      	ldr	r1, [sp, #12]
  4012ba:	05c9      	lsls	r1, r1, #23
  4012bc:	9802      	ldr	r0, [sp, #8]
  4012be:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
  4012c2:	f8cd 1404 	str.w	r1, [sp, #1028]	; 0x404
  4012c6:	05c1      	lsls	r1, r0, #23
  4012c8:	9803      	ldr	r0, [sp, #12]
  4012ca:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
  4012ce:	f8cd 1400 	str.w	r1, [sp, #1024]	; 0x400

004012d2 <.LBE497>:
  4012d2:	f50d 6180 	add.w	r1, sp, #1024	; 0x400
  4012d6:	e9d1 0100 	ldrd	r0, r1, [r1]
  4012da:	4050      	eors	r0, r2
  4012dc:	4059      	eors	r1, r3
  4012de:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  4012e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4012e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4012ea:	4050      	eors	r0, r2
  4012ec:	4059      	eors	r1, r3
  4012ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4012f2:	4002      	ands	r2, r0
  4012f4:	400b      	ands	r3, r1
  4012f6:	4610      	mov	r0, r2
  4012f8:	4619      	mov	r1, r3
  4012fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  4012fe:	4042      	eors	r2, r0
  401300:	404b      	eors	r3, r1
  401302:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
  401306:	e9d6 230e 	ldrd	r2, r3, [r6, #56]	; 0x38
  40130a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  40130e:	1880      	adds	r0, r0, r2
  401310:	4159      	adcs	r1, r3
  401312:	4602      	mov	r2, r0
  401314:	460b      	mov	r3, r1
  401316:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
  40131a:	1880      	adds	r0, r0, r2
  40131c:	4159      	adcs	r1, r3
  40131e:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  401322:	2f00      	cmp	r7, #0
  401324:	f001 82ac 	beq.w	402880 <.LCFI3+0x54>

00401328 <.LBB499>:
  401328:	e9dd 0100 	ldrd	r0, r1, [sp]
  40132c:	0843      	lsrs	r3, r0, #1
  40132e:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
  401332:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
  401336:	084b      	lsrs	r3, r1, #1
  401338:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
  40133c:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c

00401340 <.LBB501>:
  401340:	0a03      	lsrs	r3, r0, #8
  401342:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  401346:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
  40134a:	0a0b      	lsrs	r3, r1, #8
  40134c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  401350:	f8cd 3414 	str.w	r3, [sp, #1044]	; 0x414

00401354 <.LBE501>:
  401354:	f50d 6381 	add.w	r3, sp, #1032	; 0x408
  401358:	e9d3 2300 	ldrd	r2, r3, [r3]
  40135c:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
  401360:	e9d1 0100 	ldrd	r0, r1, [r1]
  401364:	4042      	eors	r2, r0
  401366:	404b      	eors	r3, r1
  401368:	9900      	ldr	r1, [sp, #0]
  40136a:	09c9      	lsrs	r1, r1, #7
  40136c:	9801      	ldr	r0, [sp, #4]
  40136e:	ea41 6140 	orr.w	r1, r1, r0, lsl #25
  401372:	914c      	str	r1, [sp, #304]	; 0x130
  401374:	09c1      	lsrs	r1, r0, #7
  401376:	914d      	str	r1, [sp, #308]	; 0x134
  401378:	a94c      	add	r1, sp, #304	; 0x130
  40137a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40137e:	4050      	eors	r0, r2
  401380:	4059      	eors	r1, r3
  401382:	4602      	mov	r2, r0
  401384:	460b      	mov	r3, r1
  401386:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40138a:	1880      	adds	r0, r0, r2
  40138c:	4159      	adcs	r1, r3
  40138e:	4602      	mov	r2, r0
  401390:	460b      	mov	r3, r1
  401392:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
  401396:	1880      	adds	r0, r0, r2
  401398:	4159      	adcs	r1, r3
  40139a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40

0040139e <.LBB503>:
  40139e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4013a2:	0cd1      	lsrs	r1, r2, #19
  4013a4:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
  4013a8:	f8cd 1418 	str.w	r1, [sp, #1048]	; 0x418
  4013ac:	0cd9      	lsrs	r1, r3, #19
  4013ae:	ea41 3142 	orr.w	r1, r1, r2, lsl #13
  4013b2:	f8cd 141c 	str.w	r1, [sp, #1052]	; 0x41c

004013b6 <.LBB505>:
  4013b6:	00d9      	lsls	r1, r3, #3
  4013b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
  4013bc:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
  4013c0:	00d1      	lsls	r1, r2, #3
  4013c2:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
  4013c6:	f8cd 1420 	str.w	r1, [sp, #1056]	; 0x420

004013ca <.LBE505>:
  4013ca:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
  4013ce:	e9d3 0100 	ldrd	r0, r1, [r3]
  4013d2:	f50d 6384 	add.w	r3, sp, #1056	; 0x420
  4013d6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4013da:	4050      	eors	r0, r2
  4013dc:	4059      	eors	r1, r3
  4013de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4013e0:	099b      	lsrs	r3, r3, #6
  4013e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4013e4:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
  4013e8:	934e      	str	r3, [sp, #312]	; 0x138
  4013ea:	0993      	lsrs	r3, r2, #6
  4013ec:	934f      	str	r3, [sp, #316]	; 0x13c
  4013ee:	ab4e      	add	r3, sp, #312	; 0x138
  4013f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4013f4:	4042      	eors	r2, r0
  4013f6:	404b      	eors	r3, r1
  4013f8:	4610      	mov	r0, r2
  4013fa:	4619      	mov	r1, r3
  4013fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  401400:	1812      	adds	r2, r2, r0
  401402:	414b      	adcs	r3, r1
  401404:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  401408:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  40140c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  401410:	1812      	adds	r2, r2, r0
  401412:	414b      	adcs	r3, r1
  401414:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  401418:	1880      	adds	r0, r0, r2
  40141a:	4159      	adcs	r1, r3
  40141c:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  401420:	1902      	adds	r2, r0, r4
  401422:	eb41 0305 	adc.w	r3, r1, r5
  401426:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60

0040142a <.LBB507>:
  40142a:	ea4f 7318 	mov.w	r3, r8, lsr #28
  40142e:	ea43 1309 	orr.w	r3, r3, r9, lsl #4
  401432:	f8cd 3428 	str.w	r3, [sp, #1064]	; 0x428
  401436:	ea4f 7319 	mov.w	r3, r9, lsr #28
  40143a:	ea43 1308 	orr.w	r3, r3, r8, lsl #4
  40143e:	f8cd 342c 	str.w	r3, [sp, #1068]	; 0x42c

00401442 <.LBB509>:
  401442:	ea4f 7389 	mov.w	r3, r9, lsl #30
  401446:	ea43 0398 	orr.w	r3, r3, r8, lsr #2
  40144a:	f8cd 3434 	str.w	r3, [sp, #1076]	; 0x434
  40144e:	ea4f 7388 	mov.w	r3, r8, lsl #30
  401452:	ea43 0399 	orr.w	r3, r3, r9, lsr #2
  401456:	f8cd 3430 	str.w	r3, [sp, #1072]	; 0x430

0040145a <.LBE509>:
  40145a:	f50d 6385 	add.w	r3, sp, #1064	; 0x428
  40145e:	e9d3 1200 	ldrd	r1, r2, [r3]
  401462:	f50d 6386 	add.w	r3, sp, #1072	; 0x430
  401466:	e9d3 3400 	ldrd	r3, r4, [r3]
  40146a:	4059      	eors	r1, r3
  40146c:	4062      	eors	r2, r4
  40146e:	4613      	mov	r3, r2
  401470:	460a      	mov	r2, r1

00401472 <.LBB511>:
  401472:	ea4f 6149 	mov.w	r1, r9, lsl #25
  401476:	ea41 11d8 	orr.w	r1, r1, r8, lsr #7
  40147a:	f8cd 143c 	str.w	r1, [sp, #1084]	; 0x43c
  40147e:	ea4f 6148 	mov.w	r1, r8, lsl #25
  401482:	ea41 11d9 	orr.w	r1, r1, r9, lsr #7
  401486:	f8cd 1438 	str.w	r1, [sp, #1080]	; 0x438

0040148a <.LBE511>:
  40148a:	f50d 6187 	add.w	r1, sp, #1080	; 0x438
  40148e:	e9d1 0100 	ldrd	r0, r1, [r1]
  401492:	4050      	eors	r0, r2
  401494:	4059      	eors	r1, r3
  401496:	4602      	mov	r2, r0
  401498:	460b      	mov	r3, r1
  40149a:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
  40149e:	ea44 0008 	orr.w	r0, r4, r8
  4014a2:	ea45 0109 	orr.w	r1, r5, r9
  4014a6:	ea00 000a 	and.w	r0, r0, sl
  4014aa:	ea01 010b 	and.w	r1, r1, fp
  4014ae:	ea04 0408 	and.w	r4, r4, r8
  4014b2:	ea05 0509 	and.w	r5, r5, r9
  4014b6:	4320      	orrs	r0, r4
  4014b8:	4329      	orrs	r1, r5
  4014ba:	1880      	adds	r0, r0, r2
  4014bc:	4159      	adcs	r1, r3
  4014be:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
  4014c2:	181b      	adds	r3, r3, r0
  4014c4:	414c      	adcs	r4, r1
  4014c6:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68

004014ca <.LBB513>:
  4014ca:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
  4014ce:	0ba3      	lsrs	r3, r4, #14
  4014d0:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
  4014d4:	f8cd 3440 	str.w	r3, [sp, #1088]	; 0x440
  4014d8:	0bab      	lsrs	r3, r5, #14
  4014da:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
  4014de:	f8cd 3444 	str.w	r3, [sp, #1092]	; 0x444

004014e2 <.LBB515>:
  4014e2:	0ca3      	lsrs	r3, r4, #18
  4014e4:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
  4014e8:	f8cd 3448 	str.w	r3, [sp, #1096]	; 0x448
  4014ec:	0cab      	lsrs	r3, r5, #18
  4014ee:	ea43 3384 	orr.w	r3, r3, r4, lsl #14
  4014f2:	f8cd 344c 	str.w	r3, [sp, #1100]	; 0x44c

004014f6 <.LBE515>:
        R( 8); R( 9); R(10); R(11);
  4014f6:	f50d 6388 	add.w	r3, sp, #1088	; 0x440
  4014fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4014fe:	f50d 6189 	add.w	r1, sp, #1096	; 0x448
  401502:	e9d1 0100 	ldrd	r0, r1, [r1]
  401506:	4042      	eors	r2, r0
  401508:	404b      	eors	r3, r1

0040150a <.LBB517>:
  40150a:	05e9      	lsls	r1, r5, #23
  40150c:	ea41 2154 	orr.w	r1, r1, r4, lsr #9
  401510:	f8cd 1454 	str.w	r1, [sp, #1108]	; 0x454
  401514:	05e1      	lsls	r1, r4, #23
  401516:	ea41 2155 	orr.w	r1, r1, r5, lsr #9
  40151a:	f8cd 1450 	str.w	r1, [sp, #1104]	; 0x450

0040151e <.LBE517>:
  40151e:	f50d 618a 	add.w	r1, sp, #1104	; 0x450
  401522:	e9d1 0100 	ldrd	r0, r1, [r1]
  401526:	4050      	eors	r0, r2
  401528:	4059      	eors	r1, r3
  40152a:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  40152e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
  401532:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
  401536:	404b      	eors	r3, r1
  401538:	4054      	eors	r4, r2
  40153a:	4625      	mov	r5, r4
  40153c:	461c      	mov	r4, r3
  40153e:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  401542:	4022      	ands	r2, r4
  401544:	402b      	ands	r3, r5
  401546:	4614      	mov	r4, r2
  401548:	461d      	mov	r5, r3
  40154a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40154e:	4062      	eors	r2, r4
  401550:	406b      	eors	r3, r5
  401552:	4614      	mov	r4, r2
  401554:	461d      	mov	r5, r3
  401556:	e9d6 2310 	ldrd	r2, r3, [r6, #64]	; 0x40
  40155a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40155e:	1880      	adds	r0, r0, r2
  401560:	4159      	adcs	r1, r3
  401562:	1820      	adds	r0, r4, r0
  401564:	eb45 0101 	adc.w	r1, r5, r1
  401568:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40156c:	2f00      	cmp	r7, #0
  40156e:	f001 818d 	beq.w	40288c <.LCFI3+0x60>

00401572 <.LBB519>:
  401572:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
  401576:	0863      	lsrs	r3, r4, #1
  401578:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
  40157c:	f8cd 3458 	str.w	r3, [sp, #1112]	; 0x458
  401580:	086b      	lsrs	r3, r5, #1
  401582:	ea43 73c4 	orr.w	r3, r3, r4, lsl #31
  401586:	f8cd 345c 	str.w	r3, [sp, #1116]	; 0x45c

0040158a <.LBB521>:
  40158a:	0a23      	lsrs	r3, r4, #8
  40158c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  401590:	f8cd 3460 	str.w	r3, [sp, #1120]	; 0x460
  401594:	0a2b      	lsrs	r3, r5, #8
  401596:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  40159a:	f8cd 3464 	str.w	r3, [sp, #1124]	; 0x464

0040159e <.LBE521>:
  40159e:	f50d 638b 	add.w	r3, sp, #1112	; 0x458
  4015a2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4015a6:	f50d 618c 	add.w	r1, sp, #1120	; 0x460
  4015aa:	e9d1 0100 	ldrd	r0, r1, [r1]
  4015ae:	4042      	eors	r2, r0
  4015b0:	404b      	eors	r3, r1
  4015b2:	09e1      	lsrs	r1, r4, #7
  4015b4:	ea41 6145 	orr.w	r1, r1, r5, lsl #25
  4015b8:	9150      	str	r1, [sp, #320]	; 0x140
  4015ba:	09e9      	lsrs	r1, r5, #7
  4015bc:	9151      	str	r1, [sp, #324]	; 0x144
  4015be:	a950      	add	r1, sp, #320	; 0x140
  4015c0:	e9d1 0100 	ldrd	r0, r1, [r1]
  4015c4:	4050      	eors	r0, r2
  4015c6:	4059      	eors	r1, r3
  4015c8:	4602      	mov	r2, r0
  4015ca:	460b      	mov	r3, r1
  4015cc:	e9dd 0100 	ldrd	r0, r1, [sp]
  4015d0:	1880      	adds	r0, r0, r2
  4015d2:	4159      	adcs	r1, r3
  4015d4:	4602      	mov	r2, r0
  4015d6:	460b      	mov	r3, r1
  4015d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4015dc:	1880      	adds	r0, r0, r2
  4015de:	4159      	adcs	r1, r3
  4015e0:	e9cd 0100 	strd	r0, r1, [sp]

004015e4 <.LBB523>:
  4015e4:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
  4015e8:	0ce1      	lsrs	r1, r4, #19
  4015ea:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
  4015ee:	f8cd 1468 	str.w	r1, [sp, #1128]	; 0x468
  4015f2:	0ce9      	lsrs	r1, r5, #19
  4015f4:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
  4015f8:	f8cd 146c 	str.w	r1, [sp, #1132]	; 0x46c

004015fc <.LBB525>:
  4015fc:	00e9      	lsls	r1, r5, #3
  4015fe:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
  401602:	f8cd 1474 	str.w	r1, [sp, #1140]	; 0x474
  401606:	00e1      	lsls	r1, r4, #3
  401608:	ea41 7155 	orr.w	r1, r1, r5, lsr #29
  40160c:	f8cd 1470 	str.w	r1, [sp, #1136]	; 0x470

00401610 <.LBE525>:
  401610:	f50d 638d 	add.w	r3, sp, #1128	; 0x468
  401614:	e9d3 0100 	ldrd	r0, r1, [r3]
  401618:	f50d 638e 	add.w	r3, sp, #1136	; 0x470
  40161c:	e9d3 2300 	ldrd	r2, r3, [r3]
  401620:	4050      	eors	r0, r2
  401622:	4059      	eors	r1, r3
  401624:	09a4      	lsrs	r4, r4, #6
  401626:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  401628:	ea44 6485 	orr.w	r4, r4, r5, lsl #26
  40162c:	9452      	str	r4, [sp, #328]	; 0x148
  40162e:	09ac      	lsrs	r4, r5, #6
  401630:	9453      	str	r4, [sp, #332]	; 0x14c
  401632:	ab52      	add	r3, sp, #328	; 0x148
  401634:	e9d3 4500 	ldrd	r4, r5, [r3]
  401638:	4044      	eors	r4, r0
  40163a:	404d      	eors	r5, r1
  40163c:	4620      	mov	r0, r4
  40163e:	e9dd 3400 	ldrd	r3, r4, [sp]
  401642:	181b      	adds	r3, r3, r0
  401644:	416c      	adcs	r4, r5
  401646:	e9cd 3400 	strd	r3, r4, [sp]
  40164a:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  40164e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  401652:	1912      	adds	r2, r2, r4
  401654:	416b      	adcs	r3, r5
  401656:	4614      	mov	r4, r2
  401658:	461d      	mov	r5, r3
  40165a:	e9dd 2300 	ldrd	r2, r3, [sp]
  40165e:	1912      	adds	r2, r2, r4
  401660:	416b      	adcs	r3, r5
  401662:	461c      	mov	r4, r3
  401664:	4613      	mov	r3, r2
  401666:	e9cd 3406 	strd	r3, r4, [sp, #24]
  40166a:	eb12 020a 	adds.w	r2, r2, sl
  40166e:	eb44 030b 	adc.w	r3, r4, fp
  401672:	4692      	mov	sl, r2
  401674:	469b      	mov	fp, r3

00401676 <.LBB527>:
  401676:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
  40167a:	0f23      	lsrs	r3, r4, #28
  40167c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  401680:	f8cd 3478 	str.w	r3, [sp, #1144]	; 0x478
  401684:	0f2b      	lsrs	r3, r5, #28
  401686:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  40168a:	f8cd 347c 	str.w	r3, [sp, #1148]	; 0x47c

0040168e <.LBB529>:
  40168e:	07ab      	lsls	r3, r5, #30
  401690:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  401694:	f8cd 3484 	str.w	r3, [sp, #1156]	; 0x484
  401698:	07a3      	lsls	r3, r4, #30
  40169a:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  40169e:	f8cd 3480 	str.w	r3, [sp, #1152]	; 0x480

004016a2 <.LBE529>:
  4016a2:	f50d 638f 	add.w	r3, sp, #1144	; 0x478
  4016a6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4016aa:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
  4016ae:	e9d1 0100 	ldrd	r0, r1, [r1]
  4016b2:	4042      	eors	r2, r0
  4016b4:	404b      	eors	r3, r1

004016b6 <.LBB531>:
  4016b6:	0669      	lsls	r1, r5, #25
  4016b8:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  4016bc:	f8cd 148c 	str.w	r1, [sp, #1164]	; 0x48c
  4016c0:	0661      	lsls	r1, r4, #25
  4016c2:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  4016c6:	f8cd 1488 	str.w	r1, [sp, #1160]	; 0x488

004016ca <.LBE531>:
  4016ca:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
  4016ce:	e9d1 0100 	ldrd	r0, r1, [r1]
  4016d2:	4050      	eors	r0, r2
  4016d4:	4059      	eors	r1, r3
  4016d6:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  4016da:	ea44 0008 	orr.w	r0, r4, r8
  4016de:	ea45 0109 	orr.w	r1, r5, r9
  4016e2:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  4016e6:	4002      	ands	r2, r0
  4016e8:	400b      	ands	r3, r1
  4016ea:	ea04 0408 	and.w	r4, r4, r8
  4016ee:	ea05 0509 	and.w	r5, r5, r9
  4016f2:	4314      	orrs	r4, r2
  4016f4:	431d      	orrs	r5, r3
  4016f6:	4620      	mov	r0, r4
  4016f8:	4629      	mov	r1, r5
  4016fa:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  4016fe:	1824      	adds	r4, r4, r0
  401700:	414d      	adcs	r5, r1
  401702:	4620      	mov	r0, r4
  401704:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
  401708:	181b      	adds	r3, r3, r0
  40170a:	416c      	adcs	r4, r5
  40170c:	e9cd 3406 	strd	r3, r4, [sp, #24]

00401710 <.LBB533>:
  401710:	ea4f 339a 	mov.w	r3, sl, lsr #14
  401714:	ea43 438b 	orr.w	r3, r3, fp, lsl #18
  401718:	f8cd 3490 	str.w	r3, [sp, #1168]	; 0x490
  40171c:	ea4f 339b 	mov.w	r3, fp, lsr #14
  401720:	ea43 438a 	orr.w	r3, r3, sl, lsl #18
  401724:	f8cd 3494 	str.w	r3, [sp, #1172]	; 0x494

00401728 <.LBB535>:
  401728:	ea4f 439a 	mov.w	r3, sl, lsr #18
  40172c:	ea43 338b 	orr.w	r3, r3, fp, lsl #14
  401730:	f8cd 3498 	str.w	r3, [sp, #1176]	; 0x498
  401734:	ea4f 439b 	mov.w	r3, fp, lsr #18
  401738:	ea43 338a 	orr.w	r3, r3, sl, lsl #14
  40173c:	f8cd 349c 	str.w	r3, [sp, #1180]	; 0x49c

00401740 <.LBE535>:
  401740:	f50d 6392 	add.w	r3, sp, #1168	; 0x490
  401744:	e9d3 2300 	ldrd	r2, r3, [r3]
  401748:	f50d 6193 	add.w	r1, sp, #1176	; 0x498
  40174c:	e9d1 0100 	ldrd	r0, r1, [r1]
  401750:	4042      	eors	r2, r0
  401752:	404b      	eors	r3, r1

00401754 <.LBB537>:
  401754:	ea4f 51cb 	mov.w	r1, fp, lsl #23
  401758:	ea41 215a 	orr.w	r1, r1, sl, lsr #9
  40175c:	f8cd 14a4 	str.w	r1, [sp, #1188]	; 0x4a4
  401760:	ea4f 51ca 	mov.w	r1, sl, lsl #23
  401764:	ea41 215b 	orr.w	r1, r1, fp, lsr #9
  401768:	f8cd 14a0 	str.w	r1, [sp, #1184]	; 0x4a0

0040176c <.LBE537>:
  40176c:	f50d 6194 	add.w	r1, sp, #1184	; 0x4a0
  401770:	e9d1 0100 	ldrd	r0, r1, [r1]
  401774:	4050      	eors	r0, r2
  401776:	4059      	eors	r1, r3
  401778:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  40177c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401780:	4614      	mov	r4, r2
  401782:	461d      	mov	r5, r3
  401784:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
  401788:	4044      	eors	r4, r0
  40178a:	404d      	eors	r5, r1
  40178c:	ea04 040a 	and.w	r4, r4, sl
  401790:	ea05 050b 	and.w	r5, r5, fp
  401794:	4062      	eors	r2, r4
  401796:	406b      	eors	r3, r5
  401798:	4614      	mov	r4, r2
  40179a:	461d      	mov	r5, r3
  40179c:	e9d6 2312 	ldrd	r2, r3, [r6, #72]	; 0x48
  4017a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4017a4:	1880      	adds	r0, r0, r2
  4017a6:	4159      	adcs	r1, r3
  4017a8:	1820      	adds	r0, r4, r0
  4017aa:	eb45 0101 	adc.w	r1, r5, r1
  4017ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4017b2:	2f00      	cmp	r7, #0
  4017b4:	f001 8070 	beq.w	402898 <.LCFI3+0x6c>

004017b8 <.LBB539>:
  4017b8:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
  4017bc:	0863      	lsrs	r3, r4, #1
  4017be:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
  4017c2:	f8cd 34a8 	str.w	r3, [sp, #1192]	; 0x4a8
  4017c6:	086b      	lsrs	r3, r5, #1
  4017c8:	ea43 73c4 	orr.w	r3, r3, r4, lsl #31
  4017cc:	f8cd 34ac 	str.w	r3, [sp, #1196]	; 0x4ac

004017d0 <.LBB541>:
  4017d0:	0a23      	lsrs	r3, r4, #8
  4017d2:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  4017d6:	f8cd 34b0 	str.w	r3, [sp, #1200]	; 0x4b0
  4017da:	0a2b      	lsrs	r3, r5, #8
  4017dc:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  4017e0:	f8cd 34b4 	str.w	r3, [sp, #1204]	; 0x4b4

004017e4 <.LBE541>:
  4017e4:	f50d 6395 	add.w	r3, sp, #1192	; 0x4a8
  4017e8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4017ec:	f50d 6196 	add.w	r1, sp, #1200	; 0x4b0
  4017f0:	e9d1 0100 	ldrd	r0, r1, [r1]
  4017f4:	4042      	eors	r2, r0
  4017f6:	404b      	eors	r3, r1
  4017f8:	09e1      	lsrs	r1, r4, #7
  4017fa:	ea41 6145 	orr.w	r1, r1, r5, lsl #25
  4017fe:	9154      	str	r1, [sp, #336]	; 0x150
  401800:	09e9      	lsrs	r1, r5, #7
  401802:	9155      	str	r1, [sp, #340]	; 0x154
  401804:	a954      	add	r1, sp, #336	; 0x150
  401806:	e9d1 0100 	ldrd	r0, r1, [r1]
  40180a:	4050      	eors	r0, r2
  40180c:	4059      	eors	r1, r3
  40180e:	4602      	mov	r2, r0
  401810:	460b      	mov	r3, r1
  401812:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  401816:	1880      	adds	r0, r0, r2
  401818:	4159      	adcs	r1, r3
  40181a:	4602      	mov	r2, r0
  40181c:	460b      	mov	r3, r1
  40181e:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
  401822:	1880      	adds	r0, r0, r2
  401824:	4159      	adcs	r1, r3
  401826:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48

0040182a <.LBB543>:
  40182a:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
  40182e:	0ce1      	lsrs	r1, r4, #19
  401830:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
  401834:	f8cd 14b8 	str.w	r1, [sp, #1208]	; 0x4b8
  401838:	0ce9      	lsrs	r1, r5, #19
  40183a:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
  40183e:	f8cd 14bc 	str.w	r1, [sp, #1212]	; 0x4bc

00401842 <.LBB545>:
  401842:	00e9      	lsls	r1, r5, #3
  401844:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
  401848:	f8cd 14c4 	str.w	r1, [sp, #1220]	; 0x4c4
  40184c:	00e1      	lsls	r1, r4, #3
  40184e:	ea41 7155 	orr.w	r1, r1, r5, lsr #29
  401852:	f8cd 14c0 	str.w	r1, [sp, #1216]	; 0x4c0

00401856 <.LBE545>:
  401856:	f50d 6397 	add.w	r3, sp, #1208	; 0x4b8
  40185a:	e9d3 0100 	ldrd	r0, r1, [r3]
  40185e:	f50d 6398 	add.w	r3, sp, #1216	; 0x4c0
  401862:	e9d3 2300 	ldrd	r2, r3, [r3]
  401866:	4050      	eors	r0, r2
  401868:	4059      	eors	r1, r3
  40186a:	09a4      	lsrs	r4, r4, #6
  40186c:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40186e:	ea44 6485 	orr.w	r4, r4, r5, lsl #26
  401872:	9456      	str	r4, [sp, #344]	; 0x158
  401874:	09ac      	lsrs	r4, r5, #6
  401876:	9457      	str	r4, [sp, #348]	; 0x15c
  401878:	ab56      	add	r3, sp, #344	; 0x158
  40187a:	e9d3 4500 	ldrd	r4, r5, [r3]
  40187e:	4044      	eors	r4, r0
  401880:	404d      	eors	r5, r1
  401882:	4620      	mov	r0, r4
  401884:	e9dd 3412 	ldrd	r3, r4, [sp, #72]	; 0x48
  401888:	181b      	adds	r3, r3, r0
  40188a:	416c      	adcs	r4, r5
  40188c:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
  401890:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  401894:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  401898:	1912      	adds	r2, r2, r4
  40189a:	416b      	adcs	r3, r5
  40189c:	4614      	mov	r4, r2
  40189e:	461d      	mov	r5, r3
  4018a0:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  4018a4:	1912      	adds	r2, r2, r4
  4018a6:	416b      	adcs	r3, r5
  4018a8:	4610      	mov	r0, r2
  4018aa:	4619      	mov	r1, r3
  4018ac:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  4018b0:	e9cd 012a 	strd	r0, r1, [sp, #168]	; 0xa8
  4018b4:	1880      	adds	r0, r0, r2
  4018b6:	4159      	adcs	r1, r3
  4018b8:	4602      	mov	r2, r0
  4018ba:	460b      	mov	r3, r1
  4018bc:	e9cd 2304 	strd	r2, r3, [sp, #16]

004018c0 <.LBB547>:
  4018c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4018c4:	0f03      	lsrs	r3, r0, #28
  4018c6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  4018ca:	f8cd 34c8 	str.w	r3, [sp, #1224]	; 0x4c8
  4018ce:	0f0b      	lsrs	r3, r1, #28
  4018d0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  4018d4:	f8cd 34cc 	str.w	r3, [sp, #1228]	; 0x4cc

004018d8 <.LBB549>:
  4018d8:	078b      	lsls	r3, r1, #30
  4018da:	ea43 0390 	orr.w	r3, r3, r0, lsr #2
  4018de:	f8cd 34d4 	str.w	r3, [sp, #1236]	; 0x4d4
  4018e2:	0783      	lsls	r3, r0, #30
  4018e4:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  4018e8:	f8cd 34d0 	str.w	r3, [sp, #1232]	; 0x4d0

004018ec <.LBE549>:
  4018ec:	f50d 6399 	add.w	r3, sp, #1224	; 0x4c8
  4018f0:	e9d3 3400 	ldrd	r3, r4, [r3]
  4018f4:	f50d 629a 	add.w	r2, sp, #1232	; 0x4d0
  4018f8:	e9d2 1200 	ldrd	r1, r2, [r2]
  4018fc:	404b      	eors	r3, r1
  4018fe:	4054      	eors	r4, r2
  401900:	461a      	mov	r2, r3
  401902:	4623      	mov	r3, r4

00401904 <.LBB551>:
  401904:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
  401908:	0669      	lsls	r1, r5, #25
  40190a:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  40190e:	f8cd 14dc 	str.w	r1, [sp, #1244]	; 0x4dc
  401912:	0661      	lsls	r1, r4, #25
  401914:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  401918:	f8cd 14d8 	str.w	r1, [sp, #1240]	; 0x4d8

0040191c <.LBE551>:
  40191c:	f50d 619b 	add.w	r1, sp, #1240	; 0x4d8
  401920:	e9d1 0100 	ldrd	r0, r1, [r1]
  401924:	4050      	eors	r0, r2
  401926:	4059      	eors	r1, r3
  401928:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  40192c:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  401930:	4322      	orrs	r2, r4
  401932:	432b      	orrs	r3, r5
  401934:	ea02 0208 	and.w	r2, r2, r8
  401938:	ea03 0309 	and.w	r3, r3, r9
  40193c:	e9cd 232e 	strd	r2, r3, [sp, #184]	; 0xb8
  401940:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
  401944:	4623      	mov	r3, r4
  401946:	4019      	ands	r1, r3
  401948:	402a      	ands	r2, r5
  40194a:	4608      	mov	r0, r1
  40194c:	e9dd 452e 	ldrd	r4, r5, [sp, #184]	; 0xb8
  401950:	4304      	orrs	r4, r0
  401952:	4315      	orrs	r5, r2
  401954:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
  401958:	1912      	adds	r2, r2, r4
  40195a:	416b      	adcs	r3, r5
  40195c:	4619      	mov	r1, r3
  40195e:	e9dd 342a 	ldrd	r3, r4, [sp, #168]	; 0xa8
  401962:	189b      	adds	r3, r3, r2
  401964:	414c      	adcs	r4, r1
  401966:	e9cd 342a 	strd	r3, r4, [sp, #168]	; 0xa8

0040196a <.LBB553>:
  40196a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  40196e:	0ba3      	lsrs	r3, r4, #14
  401970:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
  401974:	f8cd 34e0 	str.w	r3, [sp, #1248]	; 0x4e0
  401978:	0bab      	lsrs	r3, r5, #14
  40197a:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
  40197e:	f8cd 34e4 	str.w	r3, [sp, #1252]	; 0x4e4

00401982 <.LBB555>:
  401982:	0ca3      	lsrs	r3, r4, #18
  401984:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
  401988:	f8cd 34e8 	str.w	r3, [sp, #1256]	; 0x4e8
  40198c:	0cab      	lsrs	r3, r5, #18
  40198e:	ea43 3384 	orr.w	r3, r3, r4, lsl #14
  401992:	f8cd 34ec 	str.w	r3, [sp, #1260]	; 0x4ec

00401996 <.LBE555>:
  401996:	f50d 639c 	add.w	r3, sp, #1248	; 0x4e0
  40199a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40199e:	f50d 619d 	add.w	r1, sp, #1256	; 0x4e8
  4019a2:	e9d1 0100 	ldrd	r0, r1, [r1]
  4019a6:	4042      	eors	r2, r0
  4019a8:	404b      	eors	r3, r1

004019aa <.LBB557>:
  4019aa:	05e9      	lsls	r1, r5, #23
  4019ac:	ea41 2154 	orr.w	r1, r1, r4, lsr #9
  4019b0:	f8cd 14f4 	str.w	r1, [sp, #1268]	; 0x4f4
  4019b4:	05e1      	lsls	r1, r4, #23
  4019b6:	ea41 2155 	orr.w	r1, r1, r5, lsr #9
  4019ba:	f8cd 14f0 	str.w	r1, [sp, #1264]	; 0x4f0

004019be <.LBE557>:
  4019be:	f50d 619e 	add.w	r1, sp, #1264	; 0x4f0
  4019c2:	e9d1 0100 	ldrd	r0, r1, [r1]
  4019c6:	4050      	eors	r0, r2
  4019c8:	4059      	eors	r1, r3
  4019ca:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  4019ce:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
  4019d2:	ea80 030a 	eor.w	r3, r0, sl
  4019d6:	ea81 040b 	eor.w	r4, r1, fp
  4019da:	4625      	mov	r5, r4
  4019dc:	461c      	mov	r4, r3
  4019de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4019e2:	4022      	ands	r2, r4
  4019e4:	402b      	ands	r3, r5
  4019e6:	4614      	mov	r4, r2
  4019e8:	461d      	mov	r5, r3
  4019ea:	4602      	mov	r2, r0
  4019ec:	460b      	mov	r3, r1
  4019ee:	4062      	eors	r2, r4
  4019f0:	406b      	eors	r3, r5
  4019f2:	4614      	mov	r4, r2
  4019f4:	461d      	mov	r5, r3
  4019f6:	e9d6 2314 	ldrd	r2, r3, [r6, #80]	; 0x50
  4019fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4019fe:	1880      	adds	r0, r0, r2
  401a00:	4159      	adcs	r1, r3
  401a02:	1820      	adds	r0, r4, r0
  401a04:	eb45 0101 	adc.w	r1, r5, r1
  401a08:	e9cd 0102 	strd	r0, r1, [sp, #8]
  401a0c:	2f00      	cmp	r7, #0
  401a0e:	f000 8749 	beq.w	4028a4 <.LCFI3+0x78>

00401a12 <.LBB559>:
  401a12:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
  401a16:	0863      	lsrs	r3, r4, #1
  401a18:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
  401a1c:	f8cd 34f8 	str.w	r3, [sp, #1272]	; 0x4f8
  401a20:	086b      	lsrs	r3, r5, #1
  401a22:	ea43 73c4 	orr.w	r3, r3, r4, lsl #31
  401a26:	f8cd 34fc 	str.w	r3, [sp, #1276]	; 0x4fc

00401a2a <.LBB561>:
  401a2a:	0a23      	lsrs	r3, r4, #8
  401a2c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  401a30:	f8cd 3500 	str.w	r3, [sp, #1280]	; 0x500
  401a34:	0a2b      	lsrs	r3, r5, #8
  401a36:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  401a3a:	f8cd 3504 	str.w	r3, [sp, #1284]	; 0x504

00401a3e <.LBE561>:
  401a3e:	f50d 639f 	add.w	r3, sp, #1272	; 0x4f8
  401a42:	e9d3 2300 	ldrd	r2, r3, [r3]
  401a46:	f50d 61a0 	add.w	r1, sp, #1280	; 0x500
  401a4a:	e9d1 0100 	ldrd	r0, r1, [r1]
  401a4e:	4042      	eors	r2, r0
  401a50:	404b      	eors	r3, r1
  401a52:	09e1      	lsrs	r1, r4, #7
  401a54:	ea41 6145 	orr.w	r1, r1, r5, lsl #25
  401a58:	9158      	str	r1, [sp, #352]	; 0x160
  401a5a:	09e9      	lsrs	r1, r5, #7
  401a5c:	9159      	str	r1, [sp, #356]	; 0x164
  401a5e:	a958      	add	r1, sp, #352	; 0x160
  401a60:	e9d1 0100 	ldrd	r0, r1, [r1]
  401a64:	4050      	eors	r0, r2
  401a66:	4059      	eors	r1, r3
  401a68:	4602      	mov	r2, r0
  401a6a:	460b      	mov	r3, r1
  401a6c:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
  401a70:	1880      	adds	r0, r0, r2
  401a72:	4159      	adcs	r1, r3
  401a74:	4602      	mov	r2, r0
  401a76:	460b      	mov	r3, r1
  401a78:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  401a7c:	1880      	adds	r0, r0, r2
  401a7e:	4159      	adcs	r1, r3
  401a80:	e9cd 0124 	strd	r0, r1, [sp, #144]	; 0x90

00401a84 <.LBB563>:
  401a84:	e9dd 4500 	ldrd	r4, r5, [sp]
  401a88:	0ce1      	lsrs	r1, r4, #19
  401a8a:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
  401a8e:	f8cd 1508 	str.w	r1, [sp, #1288]	; 0x508
  401a92:	0ce9      	lsrs	r1, r5, #19
  401a94:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
  401a98:	f8cd 150c 	str.w	r1, [sp, #1292]	; 0x50c

00401a9c <.LBB565>:
  401a9c:	00e9      	lsls	r1, r5, #3
  401a9e:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
  401aa2:	f8cd 1514 	str.w	r1, [sp, #1300]	; 0x514
  401aa6:	00e1      	lsls	r1, r4, #3
  401aa8:	ea41 7155 	orr.w	r1, r1, r5, lsr #29
  401aac:	f8cd 1510 	str.w	r1, [sp, #1296]	; 0x510

00401ab0 <.LBE565>:
  401ab0:	f50d 63a1 	add.w	r3, sp, #1288	; 0x508
  401ab4:	e9d3 0100 	ldrd	r0, r1, [r3]
  401ab8:	f50d 63a2 	add.w	r3, sp, #1296	; 0x510
  401abc:	e9d3 2300 	ldrd	r2, r3, [r3]
  401ac0:	4050      	eors	r0, r2
  401ac2:	4059      	eors	r1, r3
  401ac4:	09a4      	lsrs	r4, r4, #6
  401ac6:	9d01      	ldr	r5, [sp, #4]
  401ac8:	ea44 6485 	orr.w	r4, r4, r5, lsl #26
  401acc:	945a      	str	r4, [sp, #360]	; 0x168
  401ace:	09ac      	lsrs	r4, r5, #6
  401ad0:	945b      	str	r4, [sp, #364]	; 0x16c
  401ad2:	ab5a      	add	r3, sp, #360	; 0x168
  401ad4:	e9d3 4500 	ldrd	r4, r5, [r3]
  401ad8:	4044      	eors	r4, r0
  401ada:	404d      	eors	r5, r1
  401adc:	4620      	mov	r0, r4
  401ade:	e9dd 3424 	ldrd	r3, r4, [sp, #144]	; 0x90
  401ae2:	181b      	adds	r3, r3, r0
  401ae4:	416c      	adcs	r4, r5
  401ae6:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
  401aea:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  401aee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401af2:	1912      	adds	r2, r2, r4
  401af4:	416b      	adcs	r3, r5
  401af6:	4614      	mov	r4, r2
  401af8:	461d      	mov	r5, r3
  401afa:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
  401afe:	1912      	adds	r2, r2, r4
  401b00:	416b      	adcs	r3, r5
  401b02:	461c      	mov	r4, r3
  401b04:	4613      	mov	r3, r2
  401b06:	e9cd 3402 	strd	r3, r4, [sp, #8]
  401b0a:	eb12 0208 	adds.w	r2, r2, r8
  401b0e:	eb44 0309 	adc.w	r3, r4, r9
  401b12:	4690      	mov	r8, r2
  401b14:	4699      	mov	r9, r3

00401b16 <.LBB567>:
  401b16:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
  401b1a:	0f23      	lsrs	r3, r4, #28
  401b1c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  401b20:	f8cd 3518 	str.w	r3, [sp, #1304]	; 0x518
  401b24:	0f2b      	lsrs	r3, r5, #28
  401b26:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  401b2a:	f8cd 351c 	str.w	r3, [sp, #1308]	; 0x51c

00401b2e <.LBB569>:
  401b2e:	07ab      	lsls	r3, r5, #30
  401b30:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  401b34:	f8cd 3524 	str.w	r3, [sp, #1316]	; 0x524
  401b38:	07a3      	lsls	r3, r4, #30
  401b3a:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  401b3e:	f8cd 3520 	str.w	r3, [sp, #1312]	; 0x520

00401b42 <.LBE569>:
  401b42:	f50d 63a3 	add.w	r3, sp, #1304	; 0x518
  401b46:	e9d3 2300 	ldrd	r2, r3, [r3]
  401b4a:	f50d 61a4 	add.w	r1, sp, #1312	; 0x520
  401b4e:	e9d1 0100 	ldrd	r0, r1, [r1]
  401b52:	4042      	eors	r2, r0
  401b54:	404b      	eors	r3, r1

00401b56 <.LBB571>:
  401b56:	0669      	lsls	r1, r5, #25
  401b58:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  401b5c:	f8cd 152c 	str.w	r1, [sp, #1324]	; 0x52c
  401b60:	0661      	lsls	r1, r4, #25
  401b62:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  401b66:	f8cd 1528 	str.w	r1, [sp, #1320]	; 0x528

00401b6a <.LBE571>:
  401b6a:	f50d 61a5 	add.w	r1, sp, #1320	; 0x528
  401b6e:	e9d1 0100 	ldrd	r0, r1, [r1]
  401b72:	4050      	eors	r0, r2
  401b74:	4059      	eors	r1, r3
  401b76:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  401b7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  401b7e:	4322      	orrs	r2, r4
  401b80:	432b      	orrs	r3, r5
  401b82:	4610      	mov	r0, r2
  401b84:	4619      	mov	r1, r3
  401b86:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  401b8a:	4002      	ands	r2, r0
  401b8c:	400b      	ands	r3, r1
  401b8e:	4610      	mov	r0, r2
  401b90:	4619      	mov	r1, r3
  401b92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  401b96:	4022      	ands	r2, r4
  401b98:	402b      	ands	r3, r5
  401b9a:	4302      	orrs	r2, r0
  401b9c:	430b      	orrs	r3, r1
  401b9e:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  401ba2:	18a4      	adds	r4, r4, r2
  401ba4:	415d      	adcs	r5, r3
  401ba6:	4620      	mov	r0, r4
  401ba8:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
  401bac:	181b      	adds	r3, r3, r0
  401bae:	416c      	adcs	r4, r5
  401bb0:	e9cd 3402 	strd	r3, r4, [sp, #8]

00401bb4 <.LBB573>:
  401bb4:	ea4f 3398 	mov.w	r3, r8, lsr #14
  401bb8:	ea43 4389 	orr.w	r3, r3, r9, lsl #18
  401bbc:	f8cd 3530 	str.w	r3, [sp, #1328]	; 0x530
  401bc0:	ea4f 3399 	mov.w	r3, r9, lsr #14
  401bc4:	ea43 4388 	orr.w	r3, r3, r8, lsl #18
  401bc8:	f8cd 3534 	str.w	r3, [sp, #1332]	; 0x534

00401bcc <.LBB575>:
  401bcc:	ea4f 4398 	mov.w	r3, r8, lsr #18
  401bd0:	ea43 3389 	orr.w	r3, r3, r9, lsl #14
  401bd4:	f8cd 3538 	str.w	r3, [sp, #1336]	; 0x538
  401bd8:	ea4f 4399 	mov.w	r3, r9, lsr #18
  401bdc:	ea43 3388 	orr.w	r3, r3, r8, lsl #14
  401be0:	f8cd 353c 	str.w	r3, [sp, #1340]	; 0x53c

00401be4 <.LBE575>:
  401be4:	f50d 63a6 	add.w	r3, sp, #1328	; 0x530
  401be8:	e9d3 2300 	ldrd	r2, r3, [r3]
  401bec:	f50d 61a7 	add.w	r1, sp, #1336	; 0x538
  401bf0:	e9d1 0100 	ldrd	r0, r1, [r1]
  401bf4:	4042      	eors	r2, r0
  401bf6:	404b      	eors	r3, r1

00401bf8 <.LBB577>:
  401bf8:	ea4f 51c9 	mov.w	r1, r9, lsl #23
  401bfc:	ea41 2158 	orr.w	r1, r1, r8, lsr #9
  401c00:	f8cd 1544 	str.w	r1, [sp, #1348]	; 0x544
  401c04:	ea4f 51c8 	mov.w	r1, r8, lsl #23
  401c08:	ea41 2159 	orr.w	r1, r1, r9, lsr #9
  401c0c:	f8cd 1540 	str.w	r1, [sp, #1344]	; 0x540

00401c10 <.LBE577>:
  401c10:	f50d 61a8 	add.w	r1, sp, #1344	; 0x540
  401c14:	e9d1 0100 	ldrd	r0, r1, [r1]
  401c18:	4050      	eors	r0, r2
  401c1a:	4059      	eors	r1, r3
  401c1c:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  401c20:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  401c24:	ea84 040a 	eor.w	r4, r4, sl
  401c28:	ea85 050b 	eor.w	r5, r5, fp
  401c2c:	ea04 0408 	and.w	r4, r4, r8
  401c30:	ea05 0509 	and.w	r5, r5, r9
  401c34:	ea84 040a 	eor.w	r4, r4, sl
  401c38:	ea85 050b 	eor.w	r5, r5, fp
  401c3c:	e9d6 2316 	ldrd	r2, r3, [r6, #88]	; 0x58
  401c40:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
  401c44:	1880      	adds	r0, r0, r2
  401c46:	4159      	adcs	r1, r3
  401c48:	1820      	adds	r0, r4, r0
  401c4a:	eb45 0101 	adc.w	r1, r5, r1
  401c4e:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  401c52:	2f00      	cmp	r7, #0
  401c54:	f000 862c 	beq.w	4028b0 <.LCFI3+0x84>

00401c58 <.LBB579>:
  401c58:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  401c5c:	0863      	lsrs	r3, r4, #1
  401c5e:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
  401c62:	f8cd 3548 	str.w	r3, [sp, #1352]	; 0x548
  401c66:	086b      	lsrs	r3, r5, #1
  401c68:	ea43 73c4 	orr.w	r3, r3, r4, lsl #31
  401c6c:	f8cd 354c 	str.w	r3, [sp, #1356]	; 0x54c

00401c70 <.LBB581>:
  401c70:	0a23      	lsrs	r3, r4, #8
  401c72:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  401c76:	f8cd 3550 	str.w	r3, [sp, #1360]	; 0x550
  401c7a:	0a2b      	lsrs	r3, r5, #8
  401c7c:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  401c80:	f8cd 3554 	str.w	r3, [sp, #1364]	; 0x554

00401c84 <.LBE581>:
  401c84:	f50d 63a9 	add.w	r3, sp, #1352	; 0x548
  401c88:	e9d3 2300 	ldrd	r2, r3, [r3]
  401c8c:	f50d 61aa 	add.w	r1, sp, #1360	; 0x550
  401c90:	e9d1 0100 	ldrd	r0, r1, [r1]
  401c94:	4042      	eors	r2, r0
  401c96:	404b      	eors	r3, r1
  401c98:	09e1      	lsrs	r1, r4, #7
  401c9a:	ea41 6145 	orr.w	r1, r1, r5, lsl #25
  401c9e:	915c      	str	r1, [sp, #368]	; 0x170
  401ca0:	09e9      	lsrs	r1, r5, #7
  401ca2:	915d      	str	r1, [sp, #372]	; 0x174
  401ca4:	a95c      	add	r1, sp, #368	; 0x170
  401ca6:	e9d1 0100 	ldrd	r0, r1, [r1]
  401caa:	4050      	eors	r0, r2
  401cac:	4059      	eors	r1, r3
  401cae:	4602      	mov	r2, r0
  401cb0:	460b      	mov	r3, r1
  401cb2:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
  401cb6:	1880      	adds	r0, r0, r2
  401cb8:	4159      	adcs	r1, r3
  401cba:	4602      	mov	r2, r0
  401cbc:	460b      	mov	r3, r1
  401cbe:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
  401cc2:	1880      	adds	r0, r0, r2
  401cc4:	4159      	adcs	r1, r3
  401cc6:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50

00401cca <.LBB583>:
  401cca:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
  401cce:	0ce1      	lsrs	r1, r4, #19
  401cd0:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
  401cd4:	f8cd 1558 	str.w	r1, [sp, #1368]	; 0x558
  401cd8:	0ce9      	lsrs	r1, r5, #19
  401cda:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
  401cde:	f8cd 155c 	str.w	r1, [sp, #1372]	; 0x55c

00401ce2 <.LBB585>:
  401ce2:	00e9      	lsls	r1, r5, #3
  401ce4:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
  401ce8:	f8cd 1564 	str.w	r1, [sp, #1380]	; 0x564
  401cec:	00e1      	lsls	r1, r4, #3
  401cee:	ea41 7155 	orr.w	r1, r1, r5, lsr #29
  401cf2:	f8cd 1560 	str.w	r1, [sp, #1376]	; 0x560

00401cf6 <.LBE585>:
  401cf6:	f50d 63ab 	add.w	r3, sp, #1368	; 0x558
  401cfa:	e9d3 0100 	ldrd	r0, r1, [r3]
  401cfe:	f50d 63ac 	add.w	r3, sp, #1376	; 0x560
  401d02:	e9d3 2300 	ldrd	r2, r3, [r3]
  401d06:	4050      	eors	r0, r2
  401d08:	4059      	eors	r1, r3
  401d0a:	09a4      	lsrs	r4, r4, #6
  401d0c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  401d0e:	ea44 6485 	orr.w	r4, r4, r5, lsl #26
  401d12:	945e      	str	r4, [sp, #376]	; 0x178
  401d14:	09ac      	lsrs	r4, r5, #6
  401d16:	945f      	str	r4, [sp, #380]	; 0x17c
  401d18:	ab5e      	add	r3, sp, #376	; 0x178
  401d1a:	e9d3 4500 	ldrd	r4, r5, [r3]
  401d1e:	4044      	eors	r4, r0
  401d20:	404d      	eors	r5, r1
  401d22:	4620      	mov	r0, r4
  401d24:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
  401d28:	181b      	adds	r3, r3, r0
  401d2a:	416c      	adcs	r4, r5
  401d2c:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
  401d30:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  401d34:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  401d38:	1912      	adds	r2, r2, r4
  401d3a:	416b      	adcs	r3, r5
  401d3c:	4614      	mov	r4, r2
  401d3e:	461d      	mov	r5, r3
  401d40:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
  401d44:	1912      	adds	r2, r2, r4
  401d46:	416b      	adcs	r3, r5
  401d48:	4610      	mov	r0, r2
  401d4a:	4619      	mov	r1, r3
  401d4c:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  401d50:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  401d54:	1880      	adds	r0, r0, r2
  401d56:	4159      	adcs	r1, r3
  401d58:	4602      	mov	r2, r0
  401d5a:	460b      	mov	r3, r1
  401d5c:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68

00401d60 <.LBB587>:
  401d60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  401d64:	0f03      	lsrs	r3, r0, #28
  401d66:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  401d6a:	f8cd 3568 	str.w	r3, [sp, #1384]	; 0x568
  401d6e:	0f0b      	lsrs	r3, r1, #28
  401d70:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  401d74:	f8cd 356c 	str.w	r3, [sp, #1388]	; 0x56c

00401d78 <.LBB589>:
  401d78:	078b      	lsls	r3, r1, #30
  401d7a:	ea43 0390 	orr.w	r3, r3, r0, lsr #2
  401d7e:	f8cd 3574 	str.w	r3, [sp, #1396]	; 0x574
  401d82:	0783      	lsls	r3, r0, #30
  401d84:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  401d88:	f8cd 3570 	str.w	r3, [sp, #1392]	; 0x570

00401d8c <.LBE589>:
  401d8c:	f50d 63ad 	add.w	r3, sp, #1384	; 0x568
  401d90:	e9d3 3400 	ldrd	r3, r4, [r3]
  401d94:	f50d 62ae 	add.w	r2, sp, #1392	; 0x570
  401d98:	e9d2 1200 	ldrd	r1, r2, [r2]
  401d9c:	404b      	eors	r3, r1
  401d9e:	4054      	eors	r4, r2
  401da0:	461a      	mov	r2, r3
  401da2:	4623      	mov	r3, r4

00401da4 <.LBB591>:
  401da4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  401da8:	0669      	lsls	r1, r5, #25
  401daa:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  401dae:	f8cd 157c 	str.w	r1, [sp, #1404]	; 0x57c
  401db2:	0661      	lsls	r1, r4, #25
  401db4:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  401db8:	f8cd 1578 	str.w	r1, [sp, #1400]	; 0x578

00401dbc <.LBE591>:
  401dbc:	f50d 61af 	add.w	r1, sp, #1400	; 0x578
  401dc0:	e9d1 0100 	ldrd	r0, r1, [r1]
  401dc4:	4050      	eors	r0, r2
  401dc6:	4059      	eors	r1, r3
  401dc8:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  401dcc:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  401dd0:	4322      	orrs	r2, r4
  401dd2:	432b      	orrs	r3, r5
  401dd4:	4619      	mov	r1, r3
  401dd6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
  401dda:	4013      	ands	r3, r2
  401ddc:	400c      	ands	r4, r1
  401dde:	e9cd 342e 	strd	r3, r4, [sp, #184]	; 0xb8
  401de2:	e9dd 122a 	ldrd	r1, r2, [sp, #168]	; 0xa8
  401de6:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
  401dea:	4019      	ands	r1, r3
  401dec:	4022      	ands	r2, r4
  401dee:	4608      	mov	r0, r1
  401df0:	e9dd 452e 	ldrd	r4, r5, [sp, #184]	; 0xb8
  401df4:	4304      	orrs	r4, r0
  401df6:	4315      	orrs	r5, r2
  401df8:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
  401dfc:	1912      	adds	r2, r2, r4
  401dfe:	416b      	adcs	r3, r5
  401e00:	4619      	mov	r1, r3
  401e02:	e9dd 3418 	ldrd	r3, r4, [sp, #96]	; 0x60
  401e06:	189b      	adds	r3, r3, r2
  401e08:	414c      	adcs	r4, r1
  401e0a:	e9cd 342c 	strd	r3, r4, [sp, #176]	; 0xb0

00401e0e <.LBB593>:
  401e0e:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
  401e12:	0ba3      	lsrs	r3, r4, #14
  401e14:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
  401e18:	f8cd 3580 	str.w	r3, [sp, #1408]	; 0x580
  401e1c:	0bab      	lsrs	r3, r5, #14
  401e1e:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
  401e22:	f8cd 3584 	str.w	r3, [sp, #1412]	; 0x584

00401e26 <.LBB595>:
  401e26:	0ca3      	lsrs	r3, r4, #18
  401e28:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
  401e2c:	f8cd 3588 	str.w	r3, [sp, #1416]	; 0x588
  401e30:	0cab      	lsrs	r3, r5, #18
  401e32:	ea43 3384 	orr.w	r3, r3, r4, lsl #14
  401e36:	f8cd 358c 	str.w	r3, [sp, #1420]	; 0x58c

00401e3a <.LBE595>:
        R(12); R(13); R(14); R(15);
  401e3a:	f50d 63b0 	add.w	r3, sp, #1408	; 0x580
  401e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
  401e42:	f50d 61b1 	add.w	r1, sp, #1416	; 0x588
  401e46:	e9d1 0100 	ldrd	r0, r1, [r1]
  401e4a:	4042      	eors	r2, r0
  401e4c:	404b      	eors	r3, r1

00401e4e <.LBB597>:
  401e4e:	05e9      	lsls	r1, r5, #23
  401e50:	ea41 2154 	orr.w	r1, r1, r4, lsr #9
  401e54:	f8cd 1594 	str.w	r1, [sp, #1428]	; 0x594
  401e58:	05e1      	lsls	r1, r4, #23
  401e5a:	ea41 2155 	orr.w	r1, r1, r5, lsr #9
  401e5e:	f8cd 1590 	str.w	r1, [sp, #1424]	; 0x590

00401e62 <.LBE597>:
  401e62:	f50d 61b2 	add.w	r1, sp, #1424	; 0x590
  401e66:	e9d1 0100 	ldrd	r0, r1, [r1]
  401e6a:	4050      	eors	r0, r2
  401e6c:	4059      	eors	r1, r3
  401e6e:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  401e72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  401e76:	ea80 0308 	eor.w	r3, r0, r8
  401e7a:	ea81 0409 	eor.w	r4, r1, r9
  401e7e:	4625      	mov	r5, r4
  401e80:	461c      	mov	r4, r3
  401e82:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  401e86:	4022      	ands	r2, r4
  401e88:	402b      	ands	r3, r5
  401e8a:	4614      	mov	r4, r2
  401e8c:	461d      	mov	r5, r3
  401e8e:	4602      	mov	r2, r0
  401e90:	460b      	mov	r3, r1
  401e92:	4062      	eors	r2, r4
  401e94:	406b      	eors	r3, r5
  401e96:	4614      	mov	r4, r2
  401e98:	461d      	mov	r5, r3
  401e9a:	e9d6 2318 	ldrd	r2, r3, [r6, #96]	; 0x60
  401e9e:	eb12 020a 	adds.w	r2, r2, sl
  401ea2:	eb43 030b 	adc.w	r3, r3, fp
  401ea6:	18a4      	adds	r4, r4, r2
  401ea8:	415d      	adcs	r5, r3
  401eaa:	2f00      	cmp	r7, #0
  401eac:	f000 8506 	beq.w	4028bc <.LCFI3+0x90>

00401eb0 <.LBB599>:
  401eb0:	e9dd ab26 	ldrd	sl, fp, [sp, #152]	; 0x98
  401eb4:	4653      	mov	r3, sl
  401eb6:	085b      	lsrs	r3, r3, #1
  401eb8:	465a      	mov	r2, fp
  401eba:	ea43 73cb 	orr.w	r3, r3, fp, lsl #31
  401ebe:	f8cd 3598 	str.w	r3, [sp, #1432]	; 0x598
  401ec2:	0853      	lsrs	r3, r2, #1
  401ec4:	4652      	mov	r2, sl
  401ec6:	ea43 73ca 	orr.w	r3, r3, sl, lsl #31
  401eca:	f8cd 359c 	str.w	r3, [sp, #1436]	; 0x59c

00401ece <.LBB601>:
  401ece:	0a13      	lsrs	r3, r2, #8
  401ed0:	465a      	mov	r2, fp
  401ed2:	ea43 630b 	orr.w	r3, r3, fp, lsl #24
  401ed6:	f8cd 35a0 	str.w	r3, [sp, #1440]	; 0x5a0
  401eda:	0a13      	lsrs	r3, r2, #8
  401edc:	ea43 630a 	orr.w	r3, r3, sl, lsl #24
  401ee0:	f8cd 35a4 	str.w	r3, [sp, #1444]	; 0x5a4

00401ee4 <.LBE601>:
  401ee4:	f50d 63b3 	add.w	r3, sp, #1432	; 0x598
  401ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
  401eec:	f50d 61b4 	add.w	r1, sp, #1440	; 0x5a0
  401ef0:	e9d1 0100 	ldrd	r0, r1, [r1]
  401ef4:	4042      	eors	r2, r0
  401ef6:	404b      	eors	r3, r1
  401ef8:	4651      	mov	r1, sl
  401efa:	09c9      	lsrs	r1, r1, #7
  401efc:	4658      	mov	r0, fp
  401efe:	ea41 614b 	orr.w	r1, r1, fp, lsl #25
  401f02:	9160      	str	r1, [sp, #384]	; 0x180
  401f04:	09c1      	lsrs	r1, r0, #7
  401f06:	9161      	str	r1, [sp, #388]	; 0x184
  401f08:	a960      	add	r1, sp, #384	; 0x180
  401f0a:	e9d1 0100 	ldrd	r0, r1, [r1]
  401f0e:	4050      	eors	r0, r2
  401f10:	4059      	eors	r1, r3
  401f12:	4602      	mov	r2, r0
  401f14:	460b      	mov	r3, r1
  401f16:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  401f1a:	1880      	adds	r0, r0, r2
  401f1c:	4159      	adcs	r1, r3
  401f1e:	4602      	mov	r2, r0
  401f20:	460b      	mov	r3, r1
  401f22:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  401f26:	1880      	adds	r0, r0, r2
  401f28:	4159      	adcs	r1, r3
  401f2a:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58

00401f2e <.LBB603>:
  401f2e:	e9dd ab24 	ldrd	sl, fp, [sp, #144]	; 0x90
  401f32:	4651      	mov	r1, sl
  401f34:	0cc9      	lsrs	r1, r1, #19
  401f36:	4658      	mov	r0, fp
  401f38:	ea41 314b 	orr.w	r1, r1, fp, lsl #13
  401f3c:	f8cd 15a8 	str.w	r1, [sp, #1448]	; 0x5a8
  401f40:	0cc1      	lsrs	r1, r0, #19
  401f42:	4650      	mov	r0, sl
  401f44:	ea41 314a 	orr.w	r1, r1, sl, lsl #13
  401f48:	f8cd 15ac 	str.w	r1, [sp, #1452]	; 0x5ac

00401f4c <.LBB605>:
  401f4c:	4659      	mov	r1, fp
  401f4e:	00c9      	lsls	r1, r1, #3
  401f50:	ea41 715a 	orr.w	r1, r1, sl, lsr #29
  401f54:	f8cd 15b4 	str.w	r1, [sp, #1460]	; 0x5b4
  401f58:	00c1      	lsls	r1, r0, #3
  401f5a:	ea41 715b 	orr.w	r1, r1, fp, lsr #29
  401f5e:	f8cd 15b0 	str.w	r1, [sp, #1456]	; 0x5b0

00401f62 <.LBE605>:
  401f62:	f50d 63b5 	add.w	r3, sp, #1448	; 0x5a8
  401f66:	e9d3 0100 	ldrd	r0, r1, [r3]
  401f6a:	f50d 63b6 	add.w	r3, sp, #1456	; 0x5b0
  401f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
  401f72:	4050      	eors	r0, r2
  401f74:	4059      	eors	r1, r3
  401f76:	4653      	mov	r3, sl
  401f78:	099b      	lsrs	r3, r3, #6
  401f7a:	465a      	mov	r2, fp
  401f7c:	ea43 638b 	orr.w	r3, r3, fp, lsl #26
  401f80:	9362      	str	r3, [sp, #392]	; 0x188
  401f82:	0993      	lsrs	r3, r2, #6
  401f84:	9363      	str	r3, [sp, #396]	; 0x18c
  401f86:	ab62      	add	r3, sp, #392	; 0x188
  401f88:	e9d3 2300 	ldrd	r2, r3, [r3]
  401f8c:	4042      	eors	r2, r0
  401f8e:	404b      	eors	r3, r1
  401f90:	4610      	mov	r0, r2
  401f92:	4619      	mov	r1, r3
  401f94:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  401f98:	1812      	adds	r2, r2, r0
  401f9a:	414b      	adcs	r3, r1
  401f9c:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  401fa0:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  401fa4:	1912      	adds	r2, r2, r4
  401fa6:	416b      	adcs	r3, r5
  401fa8:	e9dd ab16 	ldrd	sl, fp, [sp, #88]	; 0x58
  401fac:	eb1a 0a02 	adds.w	sl, sl, r2
  401fb0:	eb4b 0b03 	adc.w	fp, fp, r3
  401fb4:	4651      	mov	r1, sl
  401fb6:	465a      	mov	r2, fp
  401fb8:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
  401fbc:	e9cd 1218 	strd	r1, r2, [sp, #96]	; 0x60
  401fc0:	eb1a 0103 	adds.w	r1, sl, r3
  401fc4:	eb4b 0204 	adc.w	r2, fp, r4
  401fc8:	460b      	mov	r3, r1
  401fca:	4614      	mov	r4, r2
  401fcc:	e9cd 3406 	strd	r3, r4, [sp, #24]

00401fd0 <.LBB607>:
  401fd0:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  401fd4:	0f23      	lsrs	r3, r4, #28
  401fd6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  401fda:	f8cd 35b8 	str.w	r3, [sp, #1464]	; 0x5b8
  401fde:	0f2b      	lsrs	r3, r5, #28
  401fe0:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  401fe4:	f8cd 35bc 	str.w	r3, [sp, #1468]	; 0x5bc

00401fe8 <.LBB609>:
  401fe8:	07ab      	lsls	r3, r5, #30
  401fea:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  401fee:	f8cd 35c4 	str.w	r3, [sp, #1476]	; 0x5c4
  401ff2:	07a3      	lsls	r3, r4, #30
  401ff4:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  401ff8:	f8cd 35c0 	str.w	r3, [sp, #1472]	; 0x5c0

00401ffc <.LBE609>:
  401ffc:	f50d 63b7 	add.w	r3, sp, #1464	; 0x5b8
  402000:	e9d3 2300 	ldrd	r2, r3, [r3]
  402004:	f50d 61b8 	add.w	r1, sp, #1472	; 0x5c0
  402008:	e9d1 ab00 	ldrd	sl, fp, [r1]
  40200c:	ea82 020a 	eor.w	r2, r2, sl
  402010:	ea83 030b 	eor.w	r3, r3, fp

00402014 <.LBB611>:
  402014:	0669      	lsls	r1, r5, #25
  402016:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  40201a:	f8cd 15cc 	str.w	r1, [sp, #1484]	; 0x5cc
  40201e:	0661      	lsls	r1, r4, #25
  402020:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  402024:	f8cd 15c8 	str.w	r1, [sp, #1480]	; 0x5c8

00402028 <.LBE611>:
  402028:	f50d 61b9 	add.w	r1, sp, #1480	; 0x5c8
  40202c:	e9d1 0100 	ldrd	r0, r1, [r1]
  402030:	4050      	eors	r0, r2
  402032:	4059      	eors	r1, r3
  402034:	e9cd 012e 	strd	r0, r1, [sp, #184]	; 0xb8
  402038:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40203c:	4610      	mov	r0, r2
  40203e:	4619      	mov	r1, r3
  402040:	4320      	orrs	r0, r4
  402042:	4329      	orrs	r1, r5
  402044:	e9dd ab2a 	ldrd	sl, fp, [sp, #168]	; 0xa8
  402048:	ea0a 0a00 	and.w	sl, sl, r0
  40204c:	ea0b 0b01 	and.w	fp, fp, r1
  402050:	4650      	mov	r0, sl
  402052:	4659      	mov	r1, fp
  402054:	4022      	ands	r2, r4
  402056:	402b      	ands	r3, r5
  402058:	4310      	orrs	r0, r2
  40205a:	4319      	orrs	r1, r3
  40205c:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
  402060:	181b      	adds	r3, r3, r0
  402062:	414c      	adcs	r4, r1
  402064:	e9dd ab18 	ldrd	sl, fp, [sp, #96]	; 0x60
  402068:	eb1a 0a03 	adds.w	sl, sl, r3
  40206c:	eb4b 0b04 	adc.w	fp, fp, r4

00402070 <.LBB613>:
  402070:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  402074:	0b83      	lsrs	r3, r0, #14
  402076:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  40207a:	f8cd 35d0 	str.w	r3, [sp, #1488]	; 0x5d0
  40207e:	0b8b      	lsrs	r3, r1, #14
  402080:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
  402084:	f8cd 35d4 	str.w	r3, [sp, #1492]	; 0x5d4

00402088 <.LBB615>:
  402088:	0c83      	lsrs	r3, r0, #18
  40208a:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
  40208e:	f8cd 35d8 	str.w	r3, [sp, #1496]	; 0x5d8
  402092:	0c8b      	lsrs	r3, r1, #18
  402094:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
  402098:	f8cd 35dc 	str.w	r3, [sp, #1500]	; 0x5dc

0040209c <.LBE615>:
  40209c:	f50d 63ba 	add.w	r3, sp, #1488	; 0x5d0
  4020a0:	e9d3 4500 	ldrd	r4, r5, [r3]
  4020a4:	f50d 63bb 	add.w	r3, sp, #1496	; 0x5d8
  4020a8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4020ac:	4054      	eors	r4, r2
  4020ae:	405d      	eors	r5, r3

004020b0 <.LBB617>:
  4020b0:	05c9      	lsls	r1, r1, #23
  4020b2:	9b06      	ldr	r3, [sp, #24]
  4020b4:	ea41 2353 	orr.w	r3, r1, r3, lsr #9
  4020b8:	f8cd 35e4 	str.w	r3, [sp, #1508]	; 0x5e4
  4020bc:	9b06      	ldr	r3, [sp, #24]
  4020be:	05d9      	lsls	r1, r3, #23
  4020c0:	9b07      	ldr	r3, [sp, #28]
  4020c2:	ea41 2353 	orr.w	r3, r1, r3, lsr #9
  4020c6:	f8cd 35e0 	str.w	r3, [sp, #1504]	; 0x5e0

004020ca <.LBE617>:
  4020ca:	f50d 63bc 	add.w	r3, sp, #1504	; 0x5e0
  4020ce:	e9d3 2300 	ldrd	r2, r3, [r3]
  4020d2:	4062      	eors	r2, r4
  4020d4:	406b      	eors	r3, r5
  4020d6:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  4020da:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  4020de:	ea80 0008 	eor.w	r0, r0, r8
  4020e2:	ea81 0109 	eor.w	r1, r1, r9
  4020e6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
  4020ea:	4003      	ands	r3, r0
  4020ec:	400c      	ands	r4, r1
  4020ee:	ea83 0008 	eor.w	r0, r3, r8
  4020f2:	ea84 0109 	eor.w	r1, r4, r9
  4020f6:	e9d6 231a 	ldrd	r2, r3, [r6, #104]	; 0x68
  4020fa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  4020fe:	18a4      	adds	r4, r4, r2
  402100:	415d      	adcs	r5, r3
  402102:	1904      	adds	r4, r0, r4
  402104:	eb41 0505 	adc.w	r5, r1, r5
  402108:	e9cd 4504 	strd	r4, r5, [sp, #16]
  40210c:	2f00      	cmp	r7, #0
  40210e:	f000 83db 	beq.w	4028c8 <.LCFI3+0x9c>

00402112 <.LBB619>:
  402112:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
  402116:	0863      	lsrs	r3, r4, #1
  402118:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
  40211c:	f8cd 35e8 	str.w	r3, [sp, #1512]	; 0x5e8
  402120:	086b      	lsrs	r3, r5, #1
  402122:	ea43 73c4 	orr.w	r3, r3, r4, lsl #31
  402126:	f8cd 35ec 	str.w	r3, [sp, #1516]	; 0x5ec

0040212a <.LBB621>:
  40212a:	0a23      	lsrs	r3, r4, #8
  40212c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  402130:	f8cd 35f0 	str.w	r3, [sp, #1520]	; 0x5f0
  402134:	0a2b      	lsrs	r3, r5, #8
  402136:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  40213a:	f8cd 35f4 	str.w	r3, [sp, #1524]	; 0x5f4

0040213e <.LBE621>:
  40213e:	f50d 63bd 	add.w	r3, sp, #1512	; 0x5e8
  402142:	e9d3 2300 	ldrd	r2, r3, [r3]
  402146:	f50d 61be 	add.w	r1, sp, #1520	; 0x5f0
  40214a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40214e:	4042      	eors	r2, r0
  402150:	404b      	eors	r3, r1
  402152:	09e1      	lsrs	r1, r4, #7
  402154:	ea41 6145 	orr.w	r1, r1, r5, lsl #25
  402158:	9164      	str	r1, [sp, #400]	; 0x190
  40215a:	09e9      	lsrs	r1, r5, #7
  40215c:	9165      	str	r1, [sp, #404]	; 0x194
  40215e:	a964      	add	r1, sp, #400	; 0x190
  402160:	e9d1 0100 	ldrd	r0, r1, [r1]
  402164:	4050      	eors	r0, r2
  402166:	4059      	eors	r1, r3
  402168:	4602      	mov	r2, r0
  40216a:	460b      	mov	r3, r1
  40216c:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
  402170:	1880      	adds	r0, r0, r2
  402172:	4159      	adcs	r1, r3
  402174:	4602      	mov	r2, r0
  402176:	460b      	mov	r3, r1
  402178:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40217c:	1880      	adds	r0, r0, r2
  40217e:	4159      	adcs	r1, r3
  402180:	e9cd 0126 	strd	r0, r1, [sp, #152]	; 0x98

00402184 <.LBB623>:
  402184:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
  402188:	0ce1      	lsrs	r1, r4, #19
  40218a:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
  40218e:	f8cd 15f8 	str.w	r1, [sp, #1528]	; 0x5f8
  402192:	0ce9      	lsrs	r1, r5, #19
  402194:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
  402198:	f8cd 15fc 	str.w	r1, [sp, #1532]	; 0x5fc

0040219c <.LBB625>:
  40219c:	00e9      	lsls	r1, r5, #3
  40219e:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
  4021a2:	f8cd 1604 	str.w	r1, [sp, #1540]	; 0x604
  4021a6:	00e1      	lsls	r1, r4, #3
  4021a8:	ea41 7155 	orr.w	r1, r1, r5, lsr #29
  4021ac:	f8cd 1600 	str.w	r1, [sp, #1536]	; 0x600

004021b0 <.LBE625>:
  4021b0:	f50d 63bf 	add.w	r3, sp, #1528	; 0x5f8
  4021b4:	e9d3 0100 	ldrd	r0, r1, [r3]
  4021b8:	f50d 63c0 	add.w	r3, sp, #1536	; 0x600
  4021bc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4021c0:	4050      	eors	r0, r2
  4021c2:	4059      	eors	r1, r3
  4021c4:	09a4      	lsrs	r4, r4, #6
  4021c6:	9d15      	ldr	r5, [sp, #84]	; 0x54
  4021c8:	ea44 6485 	orr.w	r4, r4, r5, lsl #26
  4021cc:	9466      	str	r4, [sp, #408]	; 0x198
  4021ce:	09ac      	lsrs	r4, r5, #6
  4021d0:	9467      	str	r4, [sp, #412]	; 0x19c
  4021d2:	ab66      	add	r3, sp, #408	; 0x198
  4021d4:	e9d3 4500 	ldrd	r4, r5, [r3]
  4021d8:	4044      	eors	r4, r0
  4021da:	404d      	eors	r5, r1
  4021dc:	4620      	mov	r0, r4
  4021de:	e9dd 3426 	ldrd	r3, r4, [sp, #152]	; 0x98
  4021e2:	181b      	adds	r3, r3, r0
  4021e4:	416c      	adcs	r4, r5
  4021e6:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
  4021ea:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  4021ee:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  4021f2:	1912      	adds	r2, r2, r4
  4021f4:	416b      	adcs	r3, r5
  4021f6:	4614      	mov	r4, r2
  4021f8:	461d      	mov	r5, r3
  4021fa:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
  4021fe:	1912      	adds	r2, r2, r4
  402200:	416b      	adcs	r3, r5
  402202:	4610      	mov	r0, r2
  402204:	4619      	mov	r1, r3
  402206:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  40220a:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  40220e:	1880      	adds	r0, r0, r2
  402210:	4159      	adcs	r1, r3
  402212:	4602      	mov	r2, r0
  402214:	460b      	mov	r3, r1
  402216:	e9cd 2304 	strd	r2, r3, [sp, #16]

0040221a <.LBB627>:
  40221a:	ea4f 731a 	mov.w	r3, sl, lsr #28
  40221e:	ea43 130b 	orr.w	r3, r3, fp, lsl #4
  402222:	f8cd 3608 	str.w	r3, [sp, #1544]	; 0x608
  402226:	ea4f 731b 	mov.w	r3, fp, lsr #28
  40222a:	ea43 130a 	orr.w	r3, r3, sl, lsl #4
  40222e:	f8cd 360c 	str.w	r3, [sp, #1548]	; 0x60c

00402232 <.LBB629>:
  402232:	ea4f 738b 	mov.w	r3, fp, lsl #30
  402236:	ea43 039a 	orr.w	r3, r3, sl, lsr #2
  40223a:	f8cd 3614 	str.w	r3, [sp, #1556]	; 0x614
  40223e:	ea4f 738a 	mov.w	r3, sl, lsl #30
  402242:	ea43 039b 	orr.w	r3, r3, fp, lsr #2
  402246:	f8cd 3610 	str.w	r3, [sp, #1552]	; 0x610

0040224a <.LBE629>:
  40224a:	f50d 63c1 	add.w	r3, sp, #1544	; 0x608
  40224e:	e9d3 3400 	ldrd	r3, r4, [r3]
  402252:	f50d 62c2 	add.w	r2, sp, #1552	; 0x610
  402256:	e9d2 1200 	ldrd	r1, r2, [r2]
  40225a:	404b      	eors	r3, r1
  40225c:	4054      	eors	r4, r2
  40225e:	461a      	mov	r2, r3
  402260:	4623      	mov	r3, r4

00402262 <.LBB631>:
  402262:	ea4f 614b 	mov.w	r1, fp, lsl #25
  402266:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
  40226a:	f8cd 161c 	str.w	r1, [sp, #1564]	; 0x61c
  40226e:	ea4f 614a 	mov.w	r1, sl, lsl #25
  402272:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
  402276:	f8cd 1618 	str.w	r1, [sp, #1560]	; 0x618

0040227a <.LBE631>:
  40227a:	f50d 61c3 	add.w	r1, sp, #1560	; 0x618
  40227e:	e9d1 4500 	ldrd	r4, r5, [r1]
  402282:	4054      	eors	r4, r2
  402284:	405d      	eors	r5, r3
  402286:	e9cd 452a 	strd	r4, r5, [sp, #168]	; 0xa8
  40228a:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  40228e:	ea44 000a 	orr.w	r0, r4, sl
  402292:	ea45 010b 	orr.w	r1, r5, fp
  402296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40229a:	4002      	ands	r2, r0
  40229c:	400b      	ands	r3, r1
  40229e:	ea04 040a 	and.w	r4, r4, sl
  4022a2:	ea05 050b 	and.w	r5, r5, fp
  4022a6:	4314      	orrs	r4, r2
  4022a8:	431d      	orrs	r5, r3
  4022aa:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  4022ae:	1912      	adds	r2, r2, r4
  4022b0:	416b      	adcs	r3, r5
  4022b2:	4619      	mov	r1, r3
  4022b4:	e9dd 3418 	ldrd	r3, r4, [sp, #96]	; 0x60
  4022b8:	189b      	adds	r3, r3, r2
  4022ba:	414c      	adcs	r4, r1
  4022bc:	e9cd 342a 	strd	r3, r4, [sp, #168]	; 0xa8

004022c0 <.LBB633>:
  4022c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4022c4:	0b83      	lsrs	r3, r0, #14
  4022c6:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  4022ca:	f8cd 3620 	str.w	r3, [sp, #1568]	; 0x620
  4022ce:	0b8b      	lsrs	r3, r1, #14
  4022d0:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
  4022d4:	f8cd 3624 	str.w	r3, [sp, #1572]	; 0x624

004022d8 <.LBB635>:
  4022d8:	0c83      	lsrs	r3, r0, #18
  4022da:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
  4022de:	f8cd 3628 	str.w	r3, [sp, #1576]	; 0x628
  4022e2:	0c8b      	lsrs	r3, r1, #18
  4022e4:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
  4022e8:	f8cd 362c 	str.w	r3, [sp, #1580]	; 0x62c

004022ec <.LBE635>:
  4022ec:	f50d 63c4 	add.w	r3, sp, #1568	; 0x620
  4022f0:	e9d3 4500 	ldrd	r4, r5, [r3]
  4022f4:	f50d 63c5 	add.w	r3, sp, #1576	; 0x628
  4022f8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4022fc:	4054      	eors	r4, r2
  4022fe:	405d      	eors	r5, r3

00402300 <.LBB637>:
  402300:	05c9      	lsls	r1, r1, #23
  402302:	9b04      	ldr	r3, [sp, #16]
  402304:	ea41 2353 	orr.w	r3, r1, r3, lsr #9
  402308:	f8cd 3634 	str.w	r3, [sp, #1588]	; 0x634
  40230c:	9b04      	ldr	r3, [sp, #16]
  40230e:	05d9      	lsls	r1, r3, #23
  402310:	9b05      	ldr	r3, [sp, #20]
  402312:	ea41 2353 	orr.w	r3, r1, r3, lsr #9
  402316:	f8cd 3630 	str.w	r3, [sp, #1584]	; 0x630

0040231a <.LBE637>:
  40231a:	f50d 63c6 	add.w	r3, sp, #1584	; 0x630
  40231e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402322:	4062      	eors	r2, r4
  402324:	406b      	eors	r3, r5
  402326:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  40232a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  40232e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  402332:	4050      	eors	r0, r2
  402334:	4059      	eors	r1, r3
  402336:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
  40233a:	4003      	ands	r3, r0
  40233c:	400c      	ands	r4, r1
  40233e:	4618      	mov	r0, r3
  402340:	4621      	mov	r1, r4
  402342:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
  402346:	4043      	eors	r3, r0
  402348:	404c      	eors	r4, r1
  40234a:	4618      	mov	r0, r3
  40234c:	e9d6 231c 	ldrd	r2, r3, [r6, #112]	; 0x70
  402350:	eb18 0802 	adds.w	r8, r8, r2
  402354:	eb49 0903 	adc.w	r9, r9, r3
  402358:	eb18 0800 	adds.w	r8, r8, r0
  40235c:	eb49 0904 	adc.w	r9, r9, r4
  402360:	2f00      	cmp	r7, #0
  402362:	f000 82b6 	beq.w	4028d2 <.LCFI3+0xa6>

00402366 <.LBB639>:
  402366:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
  40236a:	0863      	lsrs	r3, r4, #1
  40236c:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
  402370:	f8cd 3638 	str.w	r3, [sp, #1592]	; 0x638
  402374:	086b      	lsrs	r3, r5, #1
  402376:	ea43 73c4 	orr.w	r3, r3, r4, lsl #31
  40237a:	f8cd 363c 	str.w	r3, [sp, #1596]	; 0x63c

0040237e <.LBB641>:
  40237e:	0a23      	lsrs	r3, r4, #8
  402380:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  402384:	f8cd 3640 	str.w	r3, [sp, #1600]	; 0x640
  402388:	0a2b      	lsrs	r3, r5, #8
  40238a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  40238e:	f8cd 3644 	str.w	r3, [sp, #1604]	; 0x644

00402392 <.LBE641>:
  402392:	f50d 63c7 	add.w	r3, sp, #1592	; 0x638
  402396:	e9d3 2300 	ldrd	r2, r3, [r3]
  40239a:	f50d 61c8 	add.w	r1, sp, #1600	; 0x640
  40239e:	e9d1 0100 	ldrd	r0, r1, [r1]
  4023a2:	4042      	eors	r2, r0
  4023a4:	404b      	eors	r3, r1
  4023a6:	09e1      	lsrs	r1, r4, #7
  4023a8:	ea41 6145 	orr.w	r1, r1, r5, lsl #25
  4023ac:	9168      	str	r1, [sp, #416]	; 0x1a0
  4023ae:	09e9      	lsrs	r1, r5, #7
  4023b0:	9169      	str	r1, [sp, #420]	; 0x1a4
  4023b2:	a968      	add	r1, sp, #416	; 0x1a0
  4023b4:	e9d1 0100 	ldrd	r0, r1, [r1]
  4023b8:	4050      	eors	r0, r2
  4023ba:	4059      	eors	r1, r3
  4023bc:	4602      	mov	r2, r0
  4023be:	460b      	mov	r3, r1
  4023c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  4023c4:	1880      	adds	r0, r0, r2
  4023c6:	4159      	adcs	r1, r3
  4023c8:	4602      	mov	r2, r0
  4023ca:	460b      	mov	r3, r1
  4023cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4023d0:	1880      	adds	r0, r0, r2
  4023d2:	4159      	adcs	r1, r3
  4023d4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30

004023d8 <.LBB643>:
  4023d8:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  4023dc:	0ce1      	lsrs	r1, r4, #19
  4023de:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
  4023e2:	f8cd 1648 	str.w	r1, [sp, #1608]	; 0x648
  4023e6:	0ce9      	lsrs	r1, r5, #19
  4023e8:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
  4023ec:	f8cd 164c 	str.w	r1, [sp, #1612]	; 0x64c

004023f0 <.LBB645>:
  4023f0:	00e9      	lsls	r1, r5, #3
  4023f2:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
  4023f6:	f8cd 1654 	str.w	r1, [sp, #1620]	; 0x654
  4023fa:	00e1      	lsls	r1, r4, #3
  4023fc:	ea41 7155 	orr.w	r1, r1, r5, lsr #29
  402400:	f8cd 1650 	str.w	r1, [sp, #1616]	; 0x650

00402404 <.LBE645>:
  402404:	f50d 63c9 	add.w	r3, sp, #1608	; 0x648
  402408:	e9d3 0100 	ldrd	r0, r1, [r3]
  40240c:	f50d 63ca 	add.w	r3, sp, #1616	; 0x650
  402410:	e9d3 2300 	ldrd	r2, r3, [r3]
  402414:	4050      	eors	r0, r2
  402416:	4059      	eors	r1, r3
  402418:	09a4      	lsrs	r4, r4, #6
  40241a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
  40241c:	ea44 6485 	orr.w	r4, r4, r5, lsl #26
  402420:	946a      	str	r4, [sp, #424]	; 0x1a8
  402422:	09ac      	lsrs	r4, r5, #6
  402424:	946b      	str	r4, [sp, #428]	; 0x1ac
  402426:	ab6a      	add	r3, sp, #424	; 0x1a8
  402428:	e9d3 4500 	ldrd	r4, r5, [r3]
  40242c:	4044      	eors	r4, r0
  40242e:	404d      	eors	r5, r1
  402430:	4620      	mov	r0, r4
  402432:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
  402436:	181b      	adds	r3, r3, r0
  402438:	416c      	adcs	r4, r5
  40243a:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
  40243e:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
  402442:	eb14 0408 	adds.w	r4, r4, r8
  402446:	eb45 0509 	adc.w	r5, r5, r9
  40244a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  40244e:	1912      	adds	r2, r2, r4
  402450:	416b      	adcs	r3, r5
  402452:	461c      	mov	r4, r3
  402454:	4613      	mov	r3, r2
  402456:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  40245a:	e9cd 3402 	strd	r3, r4, [sp, #8]
  40245e:	eb12 0208 	adds.w	r2, r2, r8
  402462:	eb44 0309 	adc.w	r3, r4, r9
  402466:	4690      	mov	r8, r2
  402468:	4699      	mov	r9, r3

0040246a <.LBB647>:
  40246a:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
  40246e:	0f23      	lsrs	r3, r4, #28
  402470:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  402474:	f8cd 3658 	str.w	r3, [sp, #1624]	; 0x658
  402478:	0f2b      	lsrs	r3, r5, #28
  40247a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  40247e:	f8cd 365c 	str.w	r3, [sp, #1628]	; 0x65c

00402482 <.LBB649>:
  402482:	07ab      	lsls	r3, r5, #30
  402484:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  402488:	f8cd 3664 	str.w	r3, [sp, #1636]	; 0x664
  40248c:	07a3      	lsls	r3, r4, #30
  40248e:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  402492:	f8cd 3660 	str.w	r3, [sp, #1632]	; 0x660

00402496 <.LBE649>:
  402496:	f50d 63cb 	add.w	r3, sp, #1624	; 0x658
  40249a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40249e:	f50d 61cc 	add.w	r1, sp, #1632	; 0x660
  4024a2:	e9d1 0100 	ldrd	r0, r1, [r1]
  4024a6:	4042      	eors	r2, r0
  4024a8:	404b      	eors	r3, r1

004024aa <.LBB651>:
  4024aa:	0669      	lsls	r1, r5, #25
  4024ac:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  4024b0:	f8cd 166c 	str.w	r1, [sp, #1644]	; 0x66c
  4024b4:	0661      	lsls	r1, r4, #25
  4024b6:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  4024ba:	f8cd 1668 	str.w	r1, [sp, #1640]	; 0x668

004024be <.LBE651>:
  4024be:	f50d 61cd 	add.w	r1, sp, #1640	; 0x668
  4024c2:	e9d1 0100 	ldrd	r0, r1, [r1]
  4024c6:	4050      	eors	r0, r2
  4024c8:	4059      	eors	r1, r3
  4024ca:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  4024ce:	ea44 000a 	orr.w	r0, r4, sl
  4024d2:	ea45 010b 	orr.w	r1, r5, fp
  4024d6:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
  4024da:	4002      	ands	r2, r0
  4024dc:	400b      	ands	r3, r1
  4024de:	ea04 040a 	and.w	r4, r4, sl
  4024e2:	ea05 050b 	and.w	r5, r5, fp
  4024e6:	4314      	orrs	r4, r2
  4024e8:	431d      	orrs	r5, r3
  4024ea:	4620      	mov	r0, r4
  4024ec:	4629      	mov	r1, r5
  4024ee:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
  4024f2:	1824      	adds	r4, r4, r0
  4024f4:	414d      	adcs	r5, r1
  4024f6:	4620      	mov	r0, r4
  4024f8:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
  4024fc:	181b      	adds	r3, r3, r0
  4024fe:	416c      	adcs	r4, r5
  402500:	e9cd 3418 	strd	r3, r4, [sp, #96]	; 0x60

00402504 <.LBB653>:
  402504:	ea4f 3398 	mov.w	r3, r8, lsr #14
  402508:	ea43 4389 	orr.w	r3, r3, r9, lsl #18
  40250c:	f8cd 3670 	str.w	r3, [sp, #1648]	; 0x670
  402510:	ea4f 3399 	mov.w	r3, r9, lsr #14
  402514:	ea43 4388 	orr.w	r3, r3, r8, lsl #18
  402518:	f8cd 3674 	str.w	r3, [sp, #1652]	; 0x674

0040251c <.LBB655>:
  40251c:	ea4f 4398 	mov.w	r3, r8, lsr #18
  402520:	ea43 3389 	orr.w	r3, r3, r9, lsl #14
  402524:	f8cd 3678 	str.w	r3, [sp, #1656]	; 0x678
  402528:	ea4f 4399 	mov.w	r3, r9, lsr #18
  40252c:	ea43 3388 	orr.w	r3, r3, r8, lsl #14
  402530:	f8cd 367c 	str.w	r3, [sp, #1660]	; 0x67c

00402534 <.LBE655>:
  402534:	f50d 63ce 	add.w	r3, sp, #1648	; 0x670
  402538:	e9d3 2300 	ldrd	r2, r3, [r3]
  40253c:	f50d 61cf 	add.w	r1, sp, #1656	; 0x678
  402540:	e9d1 0100 	ldrd	r0, r1, [r1]
  402544:	4042      	eors	r2, r0
  402546:	404b      	eors	r3, r1

00402548 <.LBB657>:
  402548:	ea4f 51c9 	mov.w	r1, r9, lsl #23
  40254c:	ea41 2158 	orr.w	r1, r1, r8, lsr #9
  402550:	f8cd 1684 	str.w	r1, [sp, #1668]	; 0x684
  402554:	ea4f 51c8 	mov.w	r1, r8, lsl #23
  402558:	ea41 2159 	orr.w	r1, r1, r9, lsr #9
  40255c:	f8cd 1680 	str.w	r1, [sp, #1664]	; 0x680

00402560 <.LBE657>:
  402560:	f50d 61d0 	add.w	r1, sp, #1664	; 0x680
  402564:	e9d1 0100 	ldrd	r0, r1, [r1]
  402568:	4050      	eors	r0, r2
  40256a:	4059      	eors	r1, r3
  40256c:	e9cd 012e 	strd	r0, r1, [sp, #184]	; 0xb8
  402570:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  402574:	4602      	mov	r2, r0
  402576:	460b      	mov	r3, r1
  402578:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  40257c:	4062      	eors	r2, r4
  40257e:	406b      	eors	r3, r5
  402580:	ea02 0208 	and.w	r2, r2, r8
  402584:	ea03 0309 	and.w	r3, r3, r9
  402588:	4050      	eors	r0, r2
  40258a:	4059      	eors	r1, r3
  40258c:	4602      	mov	r2, r0
  40258e:	460b      	mov	r3, r1
  402590:	e9d6 011e 	ldrd	r0, r1, [r6, #120]	; 0x78
  402594:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
  402598:	1824      	adds	r4, r4, r0
  40259a:	414d      	adcs	r5, r1
  40259c:	1914      	adds	r4, r2, r4
  40259e:	eb43 0505 	adc.w	r5, r3, r5
  4025a2:	e9cd 4502 	strd	r4, r5, [sp, #8]
  4025a6:	2f00      	cmp	r7, #0
  4025a8:	f000 8198 	beq.w	4028dc <.LCFI3+0xb0>

004025ac <.LBB659>:
  4025ac:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
  4025b0:	0843      	lsrs	r3, r0, #1
  4025b2:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
  4025b6:	f8cd 3688 	str.w	r3, [sp, #1672]	; 0x688
  4025ba:	084b      	lsrs	r3, r1, #1
  4025bc:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
  4025c0:	f8cd 368c 	str.w	r3, [sp, #1676]	; 0x68c

004025c4 <.LBB661>:
  4025c4:	0a03      	lsrs	r3, r0, #8
  4025c6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  4025ca:	f8cd 3690 	str.w	r3, [sp, #1680]	; 0x690
  4025ce:	0a0b      	lsrs	r3, r1, #8
  4025d0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  4025d4:	f8cd 3694 	str.w	r3, [sp, #1684]	; 0x694

004025d8 <.LBE661>:
  4025d8:	f50d 63d1 	add.w	r3, sp, #1672	; 0x688
  4025dc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4025e0:	f50d 64d2 	add.w	r4, sp, #1680	; 0x690
  4025e4:	e9d4 4500 	ldrd	r4, r5, [r4]
  4025e8:	4062      	eors	r2, r4
  4025ea:	406b      	eors	r3, r5
  4025ec:	460d      	mov	r5, r1
  4025ee:	09c1      	lsrs	r1, r0, #7
  4025f0:	ea41 6145 	orr.w	r1, r1, r5, lsl #25
  4025f4:	916c      	str	r1, [sp, #432]	; 0x1b0
  4025f6:	09e9      	lsrs	r1, r5, #7
  4025f8:	916d      	str	r1, [sp, #436]	; 0x1b4
  4025fa:	a96c      	add	r1, sp, #432	; 0x1b0
  4025fc:	e9d1 0100 	ldrd	r0, r1, [r1]
  402600:	4050      	eors	r0, r2
  402602:	4059      	eors	r1, r3
  402604:	4602      	mov	r2, r0
  402606:	460b      	mov	r3, r1
  402608:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
  40260c:	1880      	adds	r0, r0, r2
  40260e:	4159      	adcs	r1, r3
  402610:	4602      	mov	r2, r0
  402612:	460b      	mov	r3, r1
  402614:	e9dd 0100 	ldrd	r0, r1, [sp]
  402618:	1880      	adds	r0, r0, r2
  40261a:	4159      	adcs	r1, r3
  40261c:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68

00402620 <.LBB663>:
  402620:	e9dd 5626 	ldrd	r5, r6, [sp, #152]	; 0x98
  402624:	0ce9      	lsrs	r1, r5, #19
  402626:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
  40262a:	f8cd 1698 	str.w	r1, [sp, #1688]	; 0x698
  40262e:	0cf1      	lsrs	r1, r6, #19
  402630:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
  402634:	f8cd 169c 	str.w	r1, [sp, #1692]	; 0x69c

00402638 <.LBB665>:
  402638:	00f1      	lsls	r1, r6, #3
  40263a:	ea41 7155 	orr.w	r1, r1, r5, lsr #29
  40263e:	f8cd 16a4 	str.w	r1, [sp, #1700]	; 0x6a4
  402642:	00e9      	lsls	r1, r5, #3
  402644:	ea41 7156 	orr.w	r1, r1, r6, lsr #29
  402648:	f8cd 16a0 	str.w	r1, [sp, #1696]	; 0x6a0

0040264c <.LBE665>:
  40264c:	f50d 63d3 	add.w	r3, sp, #1688	; 0x698
  402650:	e9d3 0100 	ldrd	r0, r1, [r3]
  402654:	f50d 63d4 	add.w	r3, sp, #1696	; 0x6a0
  402658:	e9d3 3400 	ldrd	r3, r4, [r3]
  40265c:	4058      	eors	r0, r3
  40265e:	4061      	eors	r1, r4
  402660:	462c      	mov	r4, r5
  402662:	4635      	mov	r5, r6
  402664:	09a6      	lsrs	r6, r4, #6
  402666:	4633      	mov	r3, r6
  402668:	ea43 6685 	orr.w	r6, r3, r5, lsl #26
  40266c:	966e      	str	r6, [sp, #440]	; 0x1b8
  40266e:	09ae      	lsrs	r6, r5, #6
  402670:	966f      	str	r6, [sp, #444]	; 0x1bc
  402672:	ab6e      	add	r3, sp, #440	; 0x1b8
  402674:	e9d3 3400 	ldrd	r3, r4, [r3]
  402678:	4043      	eors	r3, r0
  40267a:	404c      	eors	r4, r1
  40267c:	4618      	mov	r0, r3
  40267e:	4621      	mov	r1, r4
  402680:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
  402684:	181b      	adds	r3, r3, r0
  402686:	414c      	adcs	r4, r1
  402688:	e9cd 3428 	strd	r3, r4, [sp, #160]	; 0xa0
  40268c:	e9dd 452e 	ldrd	r4, r5, [sp, #184]	; 0xb8
  402690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402694:	1912      	adds	r2, r2, r4
  402696:	416b      	adcs	r3, r5
  402698:	4614      	mov	r4, r2
  40269a:	461d      	mov	r5, r3
  40269c:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
  4026a0:	1912      	adds	r2, r2, r4
  4026a2:	416b      	adcs	r3, r5
  4026a4:	4611      	mov	r1, r2
  4026a6:	461a      	mov	r2, r3
  4026a8:	e9dd 342c 	ldrd	r3, r4, [sp, #176]	; 0xb0
  4026ac:	e9cd 121a 	strd	r1, r2, [sp, #104]	; 0x68
  4026b0:	18c9      	adds	r1, r1, r3
  4026b2:	4162      	adcs	r2, r4
  4026b4:	460b      	mov	r3, r1
  4026b6:	4614      	mov	r4, r2
  4026b8:	e9cd 3402 	strd	r3, r4, [sp, #8]

004026bc <.LBB667>:
  4026bc:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
  4026c0:	0f23      	lsrs	r3, r4, #28
  4026c2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  4026c6:	f8cd 36a8 	str.w	r3, [sp, #1704]	; 0x6a8
  4026ca:	0f2b      	lsrs	r3, r5, #28
  4026cc:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  4026d0:	f8cd 36ac 	str.w	r3, [sp, #1708]	; 0x6ac

004026d4 <.LBB669>:
  4026d4:	07ab      	lsls	r3, r5, #30
  4026d6:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  4026da:	f8cd 36b4 	str.w	r3, [sp, #1716]	; 0x6b4
  4026de:	07a3      	lsls	r3, r4, #30
  4026e0:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  4026e4:	f8cd 36b0 	str.w	r3, [sp, #1712]	; 0x6b0

004026e8 <.LBE669>:
  4026e8:	f50d 63d5 	add.w	r3, sp, #1704	; 0x6a8
  4026ec:	e9d3 2300 	ldrd	r2, r3, [r3]
  4026f0:	f50d 61d6 	add.w	r1, sp, #1712	; 0x6b0
  4026f4:	e9d1 0100 	ldrd	r0, r1, [r1]
  4026f8:	4042      	eors	r2, r0
  4026fa:	404b      	eors	r3, r1

004026fc <.LBB671>:
  4026fc:	0669      	lsls	r1, r5, #25
  4026fe:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  402702:	f8cd 16bc 	str.w	r1, [sp, #1724]	; 0x6bc
  402706:	0661      	lsls	r1, r4, #25
  402708:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  40270c:	f8cd 16b8 	str.w	r1, [sp, #1720]	; 0x6b8

00402710 <.LBE671>:
  402710:	f50d 61d7 	add.w	r1, sp, #1720	; 0x6b8
  402714:	e9d1 4500 	ldrd	r4, r5, [r1]
  402718:	4054      	eors	r4, r2
  40271a:	405d      	eors	r5, r3
  40271c:	e9cd 452c 	strd	r4, r5, [sp, #176]	; 0xb0
  402720:	e9dd 562a 	ldrd	r5, r6, [sp, #168]	; 0xa8
  402724:	462a      	mov	r2, r5
  402726:	4633      	mov	r3, r6
  402728:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
  40272c:	4302      	orrs	r2, r0
  40272e:	430b      	orrs	r3, r1
  402730:	ea02 000a 	and.w	r0, r2, sl
  402734:	ea03 010b 	and.w	r1, r3, fp
  402738:	e9dd 3418 	ldrd	r3, r4, [sp, #96]	; 0x60
  40273c:	401d      	ands	r5, r3
  40273e:	4026      	ands	r6, r4
  402740:	4305      	orrs	r5, r0
  402742:	430e      	orrs	r6, r1
  402744:	e9dd 342c 	ldrd	r3, r4, [sp, #176]	; 0xb0
  402748:	195b      	adds	r3, r3, r5
  40274a:	4174      	adcs	r4, r6
  40274c:	4621      	mov	r1, r4
  40274e:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
  402752:	18e4      	adds	r4, r4, r3
  402754:	414d      	adcs	r5, r1
    for (j = 0; j < 80; j += 16) {
  402756:	3710      	adds	r7, #16
  402758:	f10e 0e80 	add.w	lr, lr, #128	; 0x80
  40275c:	2f50      	cmp	r7, #80	; 0x50
  40275e:	f47d adc2 	bne.w	4002e6 <.LBB353>
    }
#endif /* USE_SLOW_SHA2 */

    /* Add the working vars back into digest */

    sha512->digest[0] += a(0);
  402762:	f8dd 06cc 	ldr.w	r0, [sp, #1740]	; 0x6cc
  402766:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
  40276a:	18a4      	adds	r4, r4, r2
  40276c:	415d      	adcs	r5, r3
  40276e:	4622      	mov	r2, r4
  402770:	462b      	mov	r3, r5
  402772:	e9c0 2306 	strd	r2, r3, [r0, #24]
    sha512->digest[1] += b(0);
  402776:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
  40277a:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
  40277e:	18a4      	adds	r4, r4, r2
  402780:	415d      	adcs	r5, r3
  402782:	4622      	mov	r2, r4
  402784:	462b      	mov	r3, r5
  402786:	e9c0 2308 	strd	r2, r3, [r0, #32]
    sha512->digest[2] += c(0);
  40278a:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
  40278e:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
  402792:	18a4      	adds	r4, r4, r2
  402794:	415d      	adcs	r5, r3
  402796:	4622      	mov	r2, r4
  402798:	462b      	mov	r3, r5
  40279a:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
    sha512->digest[3] += d(0);
  40279e:	e9d0 230c 	ldrd	r2, r3, [r0, #48]	; 0x30
  4027a2:	eb12 020a 	adds.w	r2, r2, sl
  4027a6:	eb43 030b 	adc.w	r3, r3, fp
  4027aa:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
    sha512->digest[4] += e(0);
  4027ae:	e9d0 230e 	ldrd	r2, r3, [r0, #56]	; 0x38
  4027b2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  4027b6:	18a4      	adds	r4, r4, r2
  4027b8:	415d      	adcs	r5, r3
  4027ba:	4622      	mov	r2, r4
  4027bc:	462b      	mov	r3, r5
  4027be:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
    sha512->digest[5] += f(0);
  4027c2:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
  4027c6:	eb12 0208 	adds.w	r2, r2, r8
  4027ca:	eb43 0309 	adc.w	r3, r3, r9
  4027ce:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    sha512->digest[6] += g(0);
  4027d2:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
  4027d6:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  4027da:	18a4      	adds	r4, r4, r2
  4027dc:	415d      	adcs	r5, r3
  4027de:	4622      	mov	r2, r4
  4027e0:	462b      	mov	r3, r5
  4027e2:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
    sha512->digest[7] += h(0);
  4027e6:	e9d0 2314 	ldrd	r2, r3, [r0, #80]	; 0x50
  4027ea:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
  4027ee:	18a4      	adds	r4, r4, r2
  4027f0:	415d      	adcs	r5, r3
  4027f2:	4622      	mov	r2, r4
  4027f4:	462b      	mov	r3, r5
  4027f6:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50

004027fa <.LBB673>:


/* Make sure compiler doesn't skip */
STATIC INLINE void ForceZero(const void* mem, word32 len)
{
    volatile byte* z = (volatile byte*)mem;
  4027fa:	f50d 63da 	add.w	r3, sp, #1744	; 0x6d0

004027fe <.LVL8>:

    for (w = (volatile word64*)z; len >= sizeof(*w); len -= sizeof(*w))
        *w++ = 0;
    z = (volatile byte*)w;
#endif
    while (len--) *z++ = 0;
  4027fe:	2000      	movs	r0, #0
  402800:	f50d 61ea 	add.w	r1, sp, #1872	; 0x750

00402804 <.LVL9>:
  402804:	1c5a      	adds	r2, r3, #1

00402806 <.LVL10>:
  402806:	7018      	strb	r0, [r3, #0]

00402808 <.LVL11>:
  402808:	4613      	mov	r3, r2
  40280a:	428a      	cmp	r2, r1
  40280c:	d1fa      	bne.n	402804 <.LVL9>
  40280e:	f50d 63ea 	add.w	r3, sp, #1872	; 0x750

00402812 <.LBB675>:
  402812:	2100      	movs	r1, #0

00402814 <.LVL12>:
  402814:	1c5a      	adds	r2, r3, #1

00402816 <.LVL13>:
  402816:	7019      	strb	r1, [r3, #0]

00402818 <.LVL14>:
  402818:	4613      	mov	r3, r2
  40281a:	f50d 60f2 	add.w	r0, sp, #1936	; 0x790
  40281e:	4282      	cmp	r2, r0
  402820:	d1f8      	bne.n	402814 <.LVL12>

00402822 <.LBE675>:
#ifdef WOLFSSL_SMALL_STACK
    XFREE(W, NULL, DYNAMIC_TYPE_TMP_BUFFER);
#endif

    return 0;
}
  402822:	2000      	movs	r0, #0
  402824:	f20d 7d94 	addw	sp, sp, #1940	; 0x794

00402828 <.LCFI2>:
  402828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040282c <.LCFI3>:
        R( 0); R( 1); R( 2); R( 3);
  40282c:	e9dc 2316 	ldrd	r2, r3, [ip, #88]	; 0x58
  402830:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  402834:	f7fd be08 	b.w	400448 <.LBE365+0x52>
  402838:	e9dc 2318 	ldrd	r2, r3, [ip, #96]	; 0x60
  40283c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  402840:	f7fd bf19 	b.w	400676 <.LBE385+0x3e>
  402844:	e9dc 231a 	ldrd	r2, r3, [ip, #104]	; 0x68
  402848:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  40284c:	f7fe b831 	b.w	4008b2 <.LBE405+0x3e>
  402850:	e9dc 231c 	ldrd	r2, r3, [ip, #112]	; 0x70
  402854:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  402858:	f7fe b95c 	b.w	400b14 <.LBE425+0x3c>
        R( 4); R( 5); R( 6); R( 7);
  40285c:	e9dc 231e 	ldrd	r2, r3, [ip, #120]	; 0x78
  402860:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
  402864:	f7fe ba7d 	b.w	400d62 <.LBE445+0x3e>
  402868:	e9dc 2320 	ldrd	r2, r3, [ip, #128]	; 0x80
  40286c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  402870:	f7fe bb8e 	b.w	400f90 <.LBE465+0x3a>
  402874:	e9dc 2322 	ldrd	r2, r3, [ip, #136]	; 0x88
  402878:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  40287c:	f7fe bca5 	b.w	4011ca <.LBE485+0x40>
  402880:	e9dc 2324 	ldrd	r2, r3, [ip, #144]	; 0x90
  402884:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  402888:	f7fe bdbe 	b.w	401408 <.LBE505+0x3e>
        R( 8); R( 9); R(10); R(11);
  40288c:	e9dc 3426 	ldrd	r3, r4, [ip, #152]	; 0x98
  402890:	e9cd 3400 	strd	r3, r4, [sp]
  402894:	f7fe bed9 	b.w	40164a <.LBE525+0x3a>
  402898:	e9dc 3428 	ldrd	r3, r4, [ip, #160]	; 0xa0
  40289c:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
  4028a0:	f7fe bff6 	b.w	401890 <.LBE545+0x3a>
  4028a4:	e9dc 342a 	ldrd	r3, r4, [ip, #168]	; 0xa8
  4028a8:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
  4028ac:	f7ff b91d 	b.w	401aea <.LBE565+0x3a>
  4028b0:	e9dc 342c 	ldrd	r3, r4, [ip, #176]	; 0xb0
  4028b4:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
  4028b8:	f7ff ba3a 	b.w	401d30 <.LBE585+0x3a>
        R(12); R(13); R(14); R(15);
  4028bc:	e9dc 232e 	ldrd	r2, r3, [ip, #184]	; 0xb8
  4028c0:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  4028c4:	f7ff bb6c 	b.w	401fa0 <.LBE605+0x3e>
  4028c8:	e9dc 3430 	ldrd	r3, r4, [ip, #192]	; 0xc0
  4028cc:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
  4028d0:	e48b      	b.n	4021ea <.LBE625+0x3a>
  4028d2:	e9dc 3432 	ldrd	r3, r4, [ip, #200]	; 0xc8
  4028d6:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
  4028da:	e5b0      	b.n	40243e <.LBE645+0x3a>
  4028dc:	e9dc 3434 	ldrd	r3, r4, [ip, #208]	; 0xd0
  4028e0:	e9cd 3428 	strd	r3, r4, [sp, #160]	; 0xa0
  4028e4:	e6d2      	b.n	40268c <.LBE665+0x40>

004028e6 <.LFE16>:
  4028e6:	bf00      	nop

Disassembly of section .rodata.crc_table%36:

004028e8 <crc_table>:
  4028e8:	0000 0000 3096 7707 612c ee0e 51ba 9909     .....0.w,a...Q..
  4028f8:	c419 076d f48f 706a a535 e963 95a3 9e64     ..m...jp5.c...d.
  402908:	8832 0edb b8a4 79dc e91e e0d5 d988 97d2     2......y........
  402918:	4c2b 09b6 7cbd 7eb1 2d07 e7b8 1d91 90bf     +L...|.~.-......
  402928:	1064 1db7 20f2 6ab0 7148 f3b9 41de 84be     d.... .jHq...A..
  402938:	d47d 1ada e4eb 6ddd b551 f4d4 85c7 83d3     }......mQ.......
  402948:	9856 136c a8c0 646b f97a fd62 c9ec 8a65     V.l...kdz.b...e.
  402958:	5c4f 1401 6cd9 6306 3d63 fa0f 0df5 8d08     O\...l.cc=......
  402968:	20c8 3b6e 105e 4c69 41e4 d560 7172 a267     . n;^.iL.A`.rqg.
  402978:	e4d1 3c03 d447 4b04 85fd d20d b56b a50a     ...<G..K....k...
  402988:	a8fa 35b5 986c 42b2 c9d6 dbbb f940 acbc     ...5l..B....@...
  402998:	6ce3 32d8 5c75 45df 0dcf dcd6 3d59 abd1     .l.2u\.E....Y=..
  4029a8:	30ac 26d9 003a 51de 5180 c8d7 6116 bfd0     .0.&:..Q.Q...a..
  4029b8:	f4b5 21b4 c423 56b3 9599 cfba a50f b8bd     ...!#..V........
  4029c8:	b89e 2802 8808 5f05 d9b2 c60c e924 b10b     ...(..._....$...
  4029d8:	7c87 2f6f 4c11 5868 1dab c161 2d3d b666     .|o/.LhX..a.=-f.
  4029e8:	4190 76dc 7106 01db 20bc 98d2 102a efd5     .A.v.q... ..*...
  4029f8:	8589 71b1 b51f 06b6 e4a5 9fbf d433 e8b8     ...q........3...
  402a08:	c9a2 7807 f934 0f00 a88e 9609 9818 e10e     ...x4...........
  402a18:	0dbb 7f6a 3d2d 086d 6c97 9164 5c01 e663     ..j.-=m..ld..\c.
  402a28:	51f4 6b6b 6162 1c6c 30d8 8565 004e f262     .Qkkbal..0e.N.b.
  402a38:	95ed 6c06 a57b 1b01 f4c1 8208 c457 f50f     ...l{.......W...
  402a48:	d9c6 65b0 e950 12b7 b8ea 8bbe 887c fcb9     ...eP.......|...
  402a58:	1ddf 62dd 2d49 15da 7cf3 8cd3 4c65 fbd4     ...bI-...|..eL..
  402a68:	6158 4db2 51ce 3ab5 0074 a3bc 30e2 d4bb     Xa.M.Q.:t....0..
  402a78:	a541 4adf 95d7 3dd8 c46d a4d1 f4fb d3d6     A..J...=m.......
  402a88:	e96a 4369 d9fc 346e 8846 ad67 b8d0 da60     j.iC..n4F.g...`.
  402a98:	2d73 4404 1de5 3303 4c5f aa0a 7cc9 dd0d     s-.D...3_L...|..
  402aa8:	713c 5005 41aa 2702 1010 be0b 2086 c90c     <q.P.A.'..... ..
  402ab8:	b525 5768 85b3 206f d409 b966 e49f ce61     %.hW..o ..f...a.
  402ac8:	f90e 5ede c998 29d9 9822 b0d0 a8b4 c7d7     ...^...)".......
  402ad8:	3d17 59b3 0d81 2eb4 5c3b b7bd 6cad c0ba     .=.Y....;\...l..
  402ae8:	8320 edb8 b3b6 9abf e20c 03b6 d29a 74b1      ..............t
  402af8:	4739 ead5 77af 9dd2 2615 04db 1683 73dc     9G...w...&.....s
  402b08:	0b12 e363 3b84 9464 6a3e 0d6d 5aa8 7a6a     ..c..;d.>jm..Zjz
  402b18:	cf0b e40e ff9d 9309 ae27 0a00 9eb1 7d07     ........'......}
  402b28:	9344 f00f a3d2 8708 f268 1e01 c2fe 6906     D.......h......i
  402b38:	575d f762 67cb 8065 3671 196c 06e7 6e6b     ]Wb..ge.q6l...kn
  402b48:	1b76 fed4 2be0 89d3 7a5a 10da 4acc 67dd     v....+..Zz...J.g
  402b58:	df6f f9b9 eff9 8ebe be43 17b7 8ed5 60b0     o.......C......`
  402b68:	a3e8 d6d6 937e a1d1 c2c4 38d8 f252 4fdf     ....~......8R..O
  402b78:	67f1 d1bb 5767 a6bc 06dd 3fb5 364b 48b2     .g..gW.....?K6.H
  402b88:	2bda d80d 1b4c af0a 4af6 3603 7a60 4104     .+..L....J.6`z.A
  402b98:	efc3 df60 df55 a867 8eef 316e be79 4669     ..`.U.g...n1y.iF
  402ba8:	b38c cb61 831a bc66 d2a0 256f e236 5268     ..a...f...o%6.hR
  402bb8:	7795 cc0c 4703 bb0b 16b9 2202 262f 5505     .w...G....."/&.U
  402bc8:	3bbe c5ba 0b28 b2bd 5a92 2bb4 6a04 5cb3     .;..(....Z.+.j.\
  402bd8:	ffa7 c2d7 cf31 b5d0 9e8b 2cd9 ae1d 5bde     ....1......,...[
  402be8:	c2b0 9b64 f226 ec63 a39c 756a 930a 026d     ..d.&.c...ju..m.
  402bf8:	06a9 9c09 363f eb0e 6785 7207 5713 0500     ....?6...g.r.W..
  402c08:	4a82 95bf 7a14 e2b8 2bae 7bb1 1b38 0cb6     .J...z...+.{8...
  402c18:	8e9b 92d2 be0d e5d5 efb7 7cdc df21 0bdb     ...........|!...
  402c28:	d2d4 86d3 e242 f1d4 b3f8 68dd 836e 1fda     ....B......hn...
  402c38:	16cd 81be 265b f6b9 77e1 6fb0 4777 18b7     ....[&...w.owG..
  402c48:	5ae6 8808 6a70 ff0f 3bca 6606 0b5c 1101     .Z..pj...;.f\...
  402c58:	9eff 8f65 ae69 f862 ffd3 616b cf45 166c     ..e.i.b...kaE.l.
  402c68:	e278 a00a d2ee d70d 8354 4e04 b3c2 3903     x.......T..N...9
  402c78:	2661 a767 16f7 d060 474d 4969 77db 3e6e     a&g...`.MGiI.wn>
  402c88:	6a4a aed1 5adc d9d6 0b66 40df 3bf0 37d8     Jj...Z..f..@.;.7
  402c98:	ae53 a9bc 9ec5 debb cf7f 47b2 ffe9 30b5     S..........G...0
  402ca8:	f21c bdbd c28a caba 9330 53b3 a3a6 24b4     ........0..S...$
  402cb8:	3605 bad0 0693 cdd7 5729 54de 67bf 23d9     .6......)W.T.g.#
  402cc8:	7a2e b366 4ab8 c461 1b02 5d68 2b94 2a6f     .zf..Ja...h].+o*
  402cd8:	be37 b40b 8ea1 c30c df1b 5a05 ef8d 2d02     7..........Z...-
  402ce8:	0000 0000 3141 191b 6282 3236 53c3 2b2d     ....A1...b62.S-+
  402cf8:	c504 646c f445 7d77 a786 565a 96c7 4f41     ..ldE.w}..ZV..AO
  402d08:	8a08 c8d9 bb49 d1c2 e88a faef d9cb e3f4     ....I...........
  402d18:	4f0c acb5 7e4d b5ae 2d8e 9e83 1ccf 8798     .O..M~...-......
  402d28:	1251 4ac2 2310 53d9 70d3 78f4 4192 61ef     Q..J.#.S.p.x.A.a
  402d38:	d755 2eae e614 37b5 b5d7 1c98 8496 0583     U......7........
  402d48:	9859 821b a918 9b00 fadb b02d cb9a a936     Y.........-...6.
  402d58:	5d5d e677 6c1c ff6c 3fdf d441 0e9e cd5a     ]]w..ll..?A...Z.
  402d68:	24a2 9584 15e3 8c9f 4620 a7b2 7761 bea9     .$...... F..aw..
  402d78:	e1a6 f1e8 d0e7 e8f3 8324 c3de b265 dac5     ........$...e...
  402d88:	aeaa 5d5d 9feb 4446 cc28 6f6b fd69 7670     ..]]..FD(.koi.pv
  402d98:	6bae 3931 5aef 202a 092c 0b07 386d 121c     .k19.Z* ,...m8..
  402da8:	36f3 df46 07b2 c65d 5471 ed70 6530 f46b     .6F...].qTp.0ek.
  402db8:	f3f7 bb2a c2b6 a231 9175 891c a034 9007     ..*...1.u...4...
  402dc8:	bcfb 179f 8dba 0e84 de79 25a9 ef38 3cb2     ........y..%8..<
  402dd8:	79ff 73f3 48be 6ae8 1b7d 41c5 2a3c 58de     .y.s.H.j}..A<*.X
  402de8:	4f05 f079 7e44 e962 2d87 c24f 1cc6 db54     .Oy.D~b..-O...T.
  402df8:	8a01 9415 bb40 8d0e e883 a623 d9c2 bf38     ....@.....#...8.
  402e08:	c50d 38a0 f44c 21bb a78f 0a96 96ce 138d     ...8L..!........
  402e18:	0009 5ccc 3148 45d7 628b 6efa 53ca 77e1     ...\H1.E.b.n.S.w
  402e28:	5d54 babb 6c15 a3a0 3fd6 888d 0e97 9196     T]...l...?......
  402e38:	9850 ded7 a911 c7cc fad2 ece1 cb93 f5fa     P...............
  402e48:	d75c 7262 e61d 6b79 b5de 4054 849f 594f     \.br..yk..T@..OY
  402e58:	1258 160e 2319 0f15 70da 2438 419b 3d23     X....#...p8$.A#=
  402e68:	6ba7 65fd 5ae6 7ce6 0925 57cb 3864 4ed0     .k.e.Z.|%..Wd8.N
  402e78:	aea3 0191 9fe2 188a cc21 33a7 fd60 2abc     ........!..3`..*
  402e88:	e1af ad24 d0ee b43f 832d 9f12 b26c 8609     ..$...?.-...l...
  402e98:	24ab c948 15ea d053 4629 fb7e 7768 e265     .$H...S.)F~.hwe.
  402ea8:	79f6 2f3f 48b7 3624 1b74 1d09 2a35 0412     .y?/.H$6t...5*..
  402eb8:	bcf2 4b53 8db3 5248 de70 7965 ef31 607e     ..SK..HRp.ey1.~`
  402ec8:	f3fe e7e6 c2bf fefd 917c d5d0 a03d cccb     ........|...=...
  402ed8:	36fa 838a 07bb 9a91 5478 b1bc 6539 a8a7     .6......xT..9e..
  402ee8:	984b 3b83 a90a 2298 fac9 09b5 cb88 10ae     K..;..."........
  402ef8:	5d4f 5fef 6c0e 46f4 3fcd 6dd9 0e8c 74c2     O]._.l.F.?.m...t
  402f08:	1243 f35a 2302 ea41 70c1 c16c 4180 d877     C.Z..#A..pl..Aw.
  402f18:	d747 9736 e606 8e2d b5c5 a500 8484 bc1b     G.6...-.........
  402f28:	8a1a 7141 bb5b 685a e898 4377 d9d9 5a6c     ..Aq[.Zh..wC..lZ
  402f38:	4f1e 152d 7e5f 0c36 2d9c 271b 1cdd 3e00     .O-._~6..-.'...>
  402f48:	0012 b998 3153 a083 6290 8bae 53d1 92b5     ....S1...b...S..
  402f58:	c516 ddf4 f457 c4ef a794 efc2 96d5 f6d9     ....W...........
  402f68:	bce9 ae07 8da8 b71c de6b 9c31 ef2a 852a     ........k.1.*.*.
  402f78:	79ed ca6b 48ac d370 1b6f f85d 2a2e e146     .yk..Hp.o.]..*F.
  402f88:	36e1 66de 07a0 7fc5 5463 54e8 6522 4df3     .6.f....cT.T"e.M
  402f98:	f3e5 02b2 c2a4 1ba9 9167 3084 a026 299f     ........g..0&..)
  402fa8:	aeb8 e4c5 9ff9 fdde cc3a d6f3 fd7b cfe8     ........:...{...
  402fb8:	6bbc 80a9 5afd 99b2 093e b29f 387f ab84     .k...Z..>....8..
  402fc8:	24b0 2c1c 15f1 3507 4632 1e2a 7773 0731     .$.,...52F*.sw1.
  402fd8:	e1b4 4870 d0f5 516b 8336 7a46 b277 635d     ..pH..kQ6.Fzw.]c
  402fe8:	d74e cbfa e60f d2e1 b5cc f9cc 848d e0d7     N...............
  402ff8:	124a af96 230b b68d 70c8 9da0 4189 84bb     J....#...p...A..
  403008:	5d46 0323 6c07 1a38 3fc4 3115 0e85 280e     F]#..l8..?.1...(
  403018:	9842 674f a903 7e54 fac0 5579 cb81 4c62     B.Og..T~..yU..bL
  403028:	c51f 8138 f45e 9823 a79d b30e 96dc aa15     ..8.^.#.........
  403038:	001b e554 315a fc4f 6299 d762 53d8 ce79     ..T.Z1O..bb..Sy.
  403048:	4f17 49e1 7e56 50fa 2d95 7bd7 1cd4 62cc     .O.IV~.P.-.{...b
  403058:	8a13 2d8d bb52 3496 e891 1fbb d9d0 06a0     ...-R..4........
  403068:	f3ec 5e7e c2ad 4765 916e 6c48 a02f 7553     ..~^..eGn.Hl/.Su
  403078:	36e8 3a12 07a9 2309 546a 0824 652b 113f     .6.:...#jT$.+e?.
  403088:	79e4 96a7 48a5 8fbc 1b66 a491 2a27 bd8a     .y...H..f...'*..
  403098:	bce0 f2cb 8da1 ebd0 de62 c0fd ef23 d9e6     ........b...#...
  4030a8:	e1bd 14bc d0fc 0da7 833f 268a b27e 3f91     ........?..&~..?
  4030b8:	24b9 70d0 15f8 69cb 463b 42e6 777a 5bfd     .$.p...i;F.Bzw.[
  4030c8:	6bb5 dc65 5af4 c57e 0937 ee53 3876 f748     .ke..Z~.7.S.v8H.
  4030d8:	aeb1 b809 9ff0 a112 cc33 8a3f fd72 9324     ........3.?.r.$.
  4030e8:	0000 0000 6a37 01c2 d46e 0384 be59 0246     ....7j..n...Y.F.
  4030f8:	a8dc 0709 c2eb 06cb 7cb2 048d 1685 054f     .........|....O.
  403108:	51b8 0e13 3b8f 0fd1 85d6 0d97 efe1 0c55     .Q...;........U.
  403118:	f964 091a 9353 08d8 2d0a 0a9e 473d 0b5c     d...S....-..=G\.
  403128:	a370 1c26 c947 1de4 771e 1fa2 1d29 1e60     p.&.G....w..).`.
  403138:	0bac 1b2f 619b 1aed dfc2 18ab b5f5 1969     ../..a........i.
  403148:	f2c8 1235 98ff 13f7 26a6 11b1 4c91 1073     ..5......&...Ls.
  403158:	5a14 153c 3023 14fe 8e7a 16b8 e44d 177a     .Z<.#0..z...M.z.
  403168:	46e0 384d 2cd7 398f 928e 3bc9 f8b9 3a0b     .FM8.,.9...;...:
  403178:	ee3c 3f44 840b 3e86 3a52 3cc0 5065 3d02     <.D?...>R:.<eP.=
  403188:	1758 365e 7d6f 379c c336 35da a901 3418     X.^6o}.76..5...4
  403198:	bf84 3157 d5b3 3095 6bea 32d3 01dd 3311     ..W1...0.k.2...3
  4031a8:	e590 246b 8fa7 25a9 31fe 27ef 5bc9 262d     ..k$...%.1.'.[-&
  4031b8:	4d4c 2362 277b 22a0 9922 20e6 f315 2124     LMb#{'."".. ..$!
  4031c8:	b428 2a78 de1f 2bba 6046 29fc 0a71 283e     (.x*...+F`.)q.>(
  4031d8:	1cf4 2d71 76c3 2cb3 c89a 2ef5 a2ad 2f37     ..q-.v.,......7/
  4031e8:	8dc0 709a e7f7 7158 59ae 731e 3399 72dc     ...p..Xq.Y.s.3.r
  4031f8:	251c 7793 4f2b 7651 f172 7417 9b45 75d5     .%.w+OQvr..tE..u
  403208:	dc78 7e89 b64f 7f4b 0816 7d0d 6221 7ccf     x..~O.K....}!b.|
  403218:	74a4 7980 1e93 7842 a0ca 7a04 cafd 7bc6     .t.y..Bx...z...{
  403228:	2eb0 6cbc 4487 6d7e fade 6f38 90e9 6efa     ...l.D~m..8o...n
  403238:	866c 6bb5 ec5b 6a77 5202 6831 3835 69f3     l..k[.wj.R1h58.i
  403248:	7f08 62af 153f 636d ab66 612b c151 60e9     ...b?.mcf.+aQ..`
  403258:	d7d4 65a6 bde3 6464 03ba 6622 698d 67e0     ...e..dd.."f.i.g
  403268:	cb20 48d7 a117 4915 1f4e 4b53 7579 4a91      ..H...IN.SKyu.J
  403278:	63fc 4fde 09cb 4e1c b792 4c5a dda5 4d98     .c.O...N..ZL...M
  403288:	9a98 46c4 f0af 4706 4ef6 4540 24c1 4482     ...F...G.N@E.$.D
  403298:	3244 41cd 5873 400f e62a 4249 8c1d 438b     D2.AsX.@*.IB...C
  4032a8:	6850 54f1 0267 5533 bc3e 5775 d609 56b7     Ph.Tg.3U>.uW...V
  4032b8:	c08c 53f8 aabb 523a 14e2 507c 7ed5 51be     ...S..:R..|P.~.Q
  4032c8:	39e8 5ae2 53df 5b20 ed86 5966 87b1 58a4     .9.Z.S [..fY...X
  4032d8:	9134 5deb fb03 5c29 455a 5e6f 2f6d 5fad     4..]..)\ZEo^m/._
  4032e8:	1b80 e135 71b7 e0f7 cfee e2b1 a5d9 e373     ..5..q........s.
  4032f8:	b35c e63c d96b e7fe 6732 e5b8 0d05 e47a     \.<.k...2g....z.
  403308:	4a38 ef26 200f eee4 9e56 eca2 f461 ed60     8J&.. ..V...a.`.
  403318:	e2e4 e82f 88d3 e9ed 368a ebab 5cbd ea69     ../......6...\i.
  403328:	b8f0 fd13 d2c7 fcd1 6c9e fe97 06a9 ff55     .........l....U.
  403338:	102c fa1a 7a1b fbd8 c442 f99e ae75 f85c     ,....z..B...u.\.
  403348:	e948 f300 837f f2c2 3d26 f084 5711 f146     H.......&=...WF.
  403358:	4194 f409 2ba3 f5cb 95fa f78d ffcd f64f     .A...+........O.
  403368:	5d60 d978 3757 d8ba 890e dafc e339 db3e     `]x.W7......9.>.
  403378:	f5bc de71 9f8b dfb3 21d2 ddf5 4be5 dc37     ..q......!...K7.
  403388:	0cd8 d76b 66ef d6a9 d8b6 d4ef b281 d52d     ..k..f........-.
  403398:	a404 d062 ce33 d1a0 706a d3e6 1a5d d224     ..b.3...jp..].$.
  4033a8:	fe10 c55e 9427 c49c 2a7e c6da 4049 c718     ..^.'...~*..I@..
  4033b8:	56cc c257 3cfb c395 82a2 c1d3 e895 c011     .VW..<..........
  4033c8:	afa8 cb4d c59f ca8f 7bc6 c8c9 11f1 c90b     ..M......{......
  4033d8:	0774 cc44 6d43 cd86 d31a cfc0 b92d ce02     t.D.Cm......-...
  4033e8:	9640 91af fc77 906d 422e 922b 2819 93e9     @...w.m..B+..(..
  4033f8:	3e9c 96a6 54ab 9764 eaf2 9522 80c5 94e0     .>...Td...".....
  403408:	c7f8 9fbc adcf 9e7e 1396 9c38 79a1 9dfa     ......~...8..y..
  403418:	6f24 98b5 0513 9977 bb4a 9b31 d17d 9af3     $o....w.J.1.}...
  403428:	3530 8d89 5f07 8c4b e15e 8e0d 8b69 8fcf     05..._K.^...i...
  403438:	9dec 8a80 f7db 8b42 4982 8904 23b5 88c6     ......B..I...#..
  403448:	6488 839a 0ebf 8258 b0e6 801e dad1 81dc     .d....X.........
  403458:	cc54 8493 a663 8551 183a 8717 720d 86d5     T...c.Q.:....r..
  403468:	d0a0 a9e2 ba97 a820 04ce aa66 6ef9 aba4     ...... ...f..n..
  403478:	787c aeeb 124b af29 ac12 ad6f c625 acad     |x..K.)...o.%...
  403488:	8118 a7f1 eb2f a633 5576 a475 3f41 a5b7     ..../.3.vUu.A?..
  403498:	29c4 a0f8 43f3 a13a fdaa a37c 979d a2be     .)...C:...|.....
  4034a8:	73d0 b5c4 19e7 b406 a7be b640 cd89 b782     .s........@.....
  4034b8:	db0c b2cd b13b b30f 0f62 b149 6555 b08b     ....;...b.I.Ue..
  4034c8:	2268 bbd7 485f ba15 f606 b853 9c31 b991     h".._H....S.1...
  4034d8:	8ab4 bcde e083 bd1c 5eda bf5a 34ed be98     .........^Z..4..
  4034e8:	0000 0000 6765 b8bc c88b aa09 afee 12b5     ....eg..........
  4034f8:	9757 8f62 f032 37de 5fdc 256b 38b9 9dd7     W.b.2..7._k%.8..
  403508:	28ef c5b4 4f8a 7d08 e064 6fbd 8701 d701     .(...O.}d..o....
  403518:	bfb8 4ad6 d8dd f26a 7733 e0df 1056 5863     ...J..j.3w..V.cX
  403528:	579f 5019 30fa e8a5 9f14 fa10 f871 42ac     .W.P.0......q..B
  403538:	c0c8 df7b a7ad 67c7 0843 7572 6f26 cdce     ..{....gC.ru&o..
  403548:	7f70 95ad 1815 2d11 b7fb 3fa4 d09e 8718     p......-...?....
  403558:	e827 1acf 8f42 a273 20ac b0c6 47c9 087a     '...B.s.. ...Gz.
  403568:	af3e a032 c85b 188e 67b5 0a3b 00d0 b287     >.2.[....g;.....
  403578:	3869 2f50 5f0c 97ec f0e2 8559 9787 3de5     i8P/._....Y....=
  403588:	87d1 6586 e0b4 dd3a 4f5a cf8f 283f 7733     ...e..:.ZO..?(3w
  403598:	1086 eae4 77e3 5258 d80d 40ed bf68 f851     .....wXR...@h.Q.
  4035a8:	f8a1 f02b 9fc4 4897 302a 5a22 574f e29e     ..+....H*0"ZOW..
  4035b8:	6ff6 7f49 0893 c7f5 a77d d540 c018 6dfc     .oI.....}.@....m
  4035c8:	d04e 359f b72b 8d23 18c5 9f96 7fa0 272a     N..5+.#.......*'
  4035d8:	4719 bafd 207c 0241 8f92 10f4 e8f7 a848     .G..| A.......H.
  4035e8:	583d 9b14 3f58 23a8 90b6 311d f7d3 89a1     =X..X?.#...1....
  4035f8:	cf6a 1476 a80f acca 07e1 be7f 6084 06c3     j.v..........`..
  403608:	70d2 5ea0 17b7 e61c b859 f4a9 df3c 4c15     .p.^....Y...<..L
  403618:	e785 d1c2 80e0 697e 2f0e 7bcb 486b c377     ......~i./.{kHw.
  403628:	0fa2 cb0d 68c7 73b1 c729 6104 a04c d9b8     .....h.s)..aL...
  403638:	98f5 446f ff90 fcd3 507e ee66 371b 56da     ..oD....~Pf..7.V
  403648:	274d 0eb9 4028 b605 efc6 a4b0 88a3 1c0c     M'..(@..........
  403658:	b01a 81db d77f 3967 7891 2bd2 1ff4 936e     ......g9.x.+..n.
  403668:	f703 3b26 9066 839a 3f88 912f 58ed 2993     ..&;f....?/..X.)
  403678:	6054 b444 0731 0cf8 a8df 1e4d cfba a6f1     T`D.1.....M.....
  403688:	dfec fe92 b889 462e 1767 549b 7002 ec27     .......Fg..T.p'.
  403698:	48bb 71f0 2fde c94c 8030 dbf9 e755 6345     .H.q./L.0...U.Ec
  4036a8:	a09c 6b3f c7f9 d383 6817 c136 0f72 798a     ..?k.....h6.r..y
  4036b8:	37cb e45d 50ae 5ce1 ff40 4e54 9825 f6e8     .7]..P.\@.TN%...
  4036c8:	8873 ae8b ef16 1637 40f8 0482 279d bc3e     s.....7..@...'>.
  4036d8:	1f24 21e9 7841 9955 d7af 8be0 b0ca 335c     $..!AxU.......\3
  4036e8:	b63b ed59 d15e 55e5 7eb0 4750 19d5 ffec     ;.Y.^..U.~PG....
  4036f8:	216c 623b 4609 da87 e9e7 c832 8e82 708e     l!;b.F....2....p
  403708:	9ed4 28ed f9b1 9051 565f 82e4 313a 3a58     ...(..Q._V..:1X:
  403718:	0983 a78f 6ee6 1f33 c108 0d86 a66d b53a     .....n3.....m.:.
  403728:	e1a4 bd40 86c1 05fc 292f 1749 4e4a aff5     ..@...../)I.JN..
  403738:	76f3 3222 1196 8a9e be78 982b d91d 2097     .v"2....x.+.... 
  403748:	c94b 78f4 ae2e c048 01c0 d2fd 66a5 6a41     K..x..H......fAj
  403758:	5e1c f796 3979 4f2a 9697 5d9f f1f2 e523     .^..y9*O...]..#.
  403768:	1905 4d6b 7e60 f5d7 d18e e762 b6eb 5fde     ..kM`~....b...._
  403778:	8e52 c209 e937 7ab5 46d9 6800 21bc d0bc     R...7..z.F.h.!..
  403788:	31ea 88df 568f 3063 f961 22d6 9e04 9a6a     .1...Vc0a.."..j.
  403798:	a6bd 07bd c1d8 bf01 6e36 adb4 0953 1508     ........6n..S...
  4037a8:	4e9a 1d72 29ff a5ce 8611 b77b e174 0fc7     .Nr..)....{.t...
  4037b8:	d9cd 9210 bea8 2aac 1146 3819 7623 80a5     .......*F..8#v..
  4037c8:	6675 d8c6 0110 607a aefe 72cf c99b ca73     uf....z`...r..s.
  4037d8:	f122 57a4 9647 ef18 39a9 fdad 5ecc 4511     "..WG....9...^.E
  4037e8:	ee06 764d 8963 cef1 268d dc44 41e8 64f8     ..Mvc....&D..A.d
  4037f8:	7951 f92f 1e34 4193 b1da 5326 d6bf eb9a     Qy/.4..A..&S....
  403808:	c6e9 b3f9 a18c 0b45 0e62 19f0 6907 a14c     ......E.b....iL.
  403818:	51be 3c9b 36db 8427 9935 9692 fe50 2e2e     .Q.<.6'.5...P...
  403828:	b999 2654 defc 9ee8 7112 8c5d 1677 34e1     ..T&.....q].w..4
  403838:	2ece a936 49ab 118a e645 033f 8120 bb83     ..6..I..E.?. ...
  403848:	9176 e3e0 f613 5b5c 59fd 49e9 3e98 f155     v.....\[.Y.I.>U.
  403858:	0621 6c82 6144 d43e ceaa c68b a9cf 7e37     !..lDa>.......7~
  403868:	4138 d67f 265d 6ec3 89b3 7c76 eed6 c4ca     8A..]&.n..v|....
  403878:	d66f 591d b10a e1a1 1ee4 f314 7981 4ba8     o..Y.........y.K
  403888:	69d7 13cb 0eb2 ab77 a15c b9c2 c639 017e     .i....w.\...9.~.
  403898:	fe80 9ca9 99e5 2415 360b 36a0 516e 8e1c     .......$.6.6nQ..
  4038a8:	16a7 8666 71c2 3eda de2c 2c6f b949 94d3     ..f..q.>,.o,I...
  4038b8:	81f0 0904 e695 b1b8 497b a30d 2e1e 1bb1     ........{I......
  4038c8:	3e48 43d2 592d fb6e f6c3 e9db 91a6 5167     H>.C-Yn.......gQ
  4038d8:	a91f ccb0 ce7a 740c 6194 66b9 06f1 de05     ....z..t.a.f....
  4038e8:	0000 0000 0777 9630 0eee 2c61 0999 ba51     ....w.0...a,..Q.
  4038f8:	6d07 19c4 6a70 8ff4 63e9 35a5 649e a395     .m..pj...c.5.d..
  403908:	db0e 3288 dc79 a4b8 d5e0 1ee9 d297 88d9     ...2y...........
  403918:	b609 2b4c b17e bd7c b8e7 072d bf90 911d     ..L+~.|...-.....
  403928:	b71d 6410 b06a f220 b9f3 4871 be84 de41     ...dj. ...qH..A.
  403938:	da1a 7dd4 dd6d ebe4 d4f4 51b5 d383 c785     ...}m......Q....
  403948:	6c13 5698 6b64 c0a8 62fd 7af9 658a ecc9     .l.Vdk...b.z.e..
  403958:	0114 4f5c 0663 d96c 0ffa 633d 088d f50d     ..\Oc.l...=c....
  403968:	6e3b c820 694c 5e10 60d5 e441 67a2 7271     ;n .Li.^.`A..gqr
  403978:	033c d1e4 044b 47d4 0dd2 fd85 0aa5 6bb5     <...K..G.......k
  403988:	b535 faa8 b242 6c98 bbdb d6c9 bcac 40f9     5...B..l.......@
  403998:	d832 e36c df45 755c d6dc cf0d d1ab 593d     2.l.E.\u......=Y
  4039a8:	d926 ac30 de51 3a00 d7c8 8051 d0bf 1661     &.0.Q..:..Q...a.
  4039b8:	b421 b5f4 b356 23c4 bacf 9995 bdb8 0fa5     !...V..#........
  4039c8:	0228 9eb8 055f 0888 0cc6 b2d9 0bb1 24e9     (..._..........$
  4039d8:	6f2f 877c 6858 114c 61c1 ab1d 66b6 3d2d     /o|.XhL..a...f-=
  4039e8:	dc76 9041 db01 0671 d298 bc20 d5ef 2a10     v.A...q... ....*
  4039f8:	b171 8985 b606 1fb5 bf9f a5e4 b8e8 33d4     q..............3
  403a08:	0778 a2c9 000f 34f9 0996 8ea8 0ee1 1898     x......4........
  403a18:	6a7f bb0d 6d08 2d3d 6491 976c 63e6 015c     .j...m=-.dl..c\.
  403a28:	6b6b f451 6c1c 6261 6585 d830 62f2 4e00     kkQ..lab.e0..b.N
  403a38:	066c ed95 011b 7ba5 0882 c1f4 0ff5 57c4     l......{.......W
  403a48:	b065 c6d9 b712 50e9 be8b eab8 b9fc 7c88     e......P.......|
  403a58:	dd62 df1d da15 492d d38c f37c d4fb 654c     b.....-I..|...Le
  403a68:	b24d 5861 b53a ce51 bca3 7400 bbd4 e230     M.aX:.Q....t..0.
  403a78:	df4a 41a5 d83d d795 d1a4 6dc4 d6d3 fbf4     J..A=......m....
  403a88:	6943 6ae9 6e34 fcd9 67ad 4688 60da d0b8     Ci.j4n...g.F.`..
  403a98:	0444 732d 0333 e51d 0aaa 5f4c 0ddd c97c     D.-s3.....L_..|.
  403aa8:	0550 3c71 0227 aa41 0bbe 1010 0cc9 8620     P.q<'.A....... .
  403ab8:	6857 25b5 6f20 b385 66b9 09d4 61ce 9fe4     Wh.% o...f...a..
  403ac8:	de5e 0ef9 d929 98c9 d0b0 2298 d7c7 b4a8     ^...)......"....
  403ad8:	b359 173d b42e 810d bdb7 3b5c bac0 ad6c     Y.=.......\;..l.
  403ae8:	b8ed 2083 bf9a b6b3 b603 0ce2 b174 9ad2     ... ........t...
  403af8:	d5ea 3947 d29d af77 db04 1526 dc73 8316     ..G9..w...&.s...
  403b08:	63e3 120b 6494 843b 6d0d 3e6a 6a7a a85a     .c...d;..mj>zjZ.
  403b18:	0ee4 0bcf 0993 9dff 000a 27ae 077d b19e     ...........'}...
  403b28:	0ff0 4493 0887 d2a3 011e 68f2 0669 fec2     ...D.......hi...
  403b38:	62f7 5d57 6580 cb67 6c19 7136 6b6e e706     .bW].eg..l6qnk..
  403b48:	d4fe 761b d389 e02b da10 5a7a dd67 cc4a     ...v..+...zZg.J.
  403b58:	b9f9 6fdf be8e f9ef b717 43be b060 d58e     ...o.......C`...
  403b68:	d6d6 e8a3 d1a1 7e93 d838 c4c2 df4f 52f2     .......~8...O..R
  403b78:	bbd1 f167 bca6 6757 b53f dd06 b248 4b36     ..g...Wg?...H.6K
  403b88:	0dd8 da2b 0aaf 4c1b 0336 f64a 0441 607a     ..+....L6.J.A.z`
  403b98:	60df c3ef 67a8 55df 6e31 ef8e 6946 79be     .`...g.U1n..Fi.y
  403ba8:	61cb 8cb3 66bc 1a83 6f25 a0d2 6852 36e2     .a...f..%o..Rh.6
  403bb8:	0ccc 9577 0bbb 0347 0222 b916 0555 2f26     ..w...G."...U.&/
  403bc8:	bac5 be3b bdb2 280b b42b 925a b35c 046a     ..;....(+.Z.\.j.
  403bd8:	d7c2 a7ff d0b5 31cf d92c 8b9e de5b 1dae     .......1,...[...
  403be8:	649b b0c2 63ec 26f2 6a75 9ca3 6d02 0a93     .d...c.&uj...m..
  403bf8:	099c a906 0eeb 3f36 0772 8567 0005 1357     ......6?r.g...W.
  403c08:	bf95 824a b8e2 147a b17b ae2b b60c 381b     ..J...z.{.+....8
  403c18:	d292 9b8e d5e5 0dbe dc7c b7ef db0b 21df     ........|......!
  403c28:	d386 d4d2 d4f1 42e2 dd68 f8b3 da1f 6e83     .......Bh......n
  403c38:	be81 cd16 b9f6 5b26 b06f e177 b718 7747     ......&[o.w...Gw
  403c48:	0888 e65a 0fff 706a 0666 ca3b 0111 5c0b     ..Z...jpf.;....\
  403c58:	658f ff9e 62f8 69ae 6b61 d3ff 6c16 45cf     .e...b.iak...l.E
  403c68:	0aa0 78e2 0dd7 eed2 044e 5483 0339 c2b3     ...x....N..T9...
  403c78:	67a7 6126 60d0 f716 6949 4d47 6e3e db77     .g&a.`..IiGM>nw.
  403c88:	d1ae 4a6a d6d9 dc5a df40 660b d837 f03b     ..jJ..Z.@..f7.;.
  403c98:	bca9 53ae bbde c59e b247 7fcf b530 e9ff     ...S....G...0...
  403ca8:	bdbd 1cf2 baca 8ac2 b353 3093 b424 a6a3     ........S..0$...
  403cb8:	d0ba 0536 d7cd 9306 de54 2957 d923 bf67     ..6.....T.W)#.g.
  403cc8:	66b3 2e7a 61c4 b84a 685d 021b 6f2a 942b     .fz..aJ.]h..*o+.
  403cd8:	0bb4 37be 0cc3 a18e 055a 1bdf 022d 8def     ...7....Z...-...
  403ce8:	0000 0000 1b19 4131 3632 8262 2d2b c353     ......1A26b.+-S.
  403cf8:	6c64 04c5 777d 45f4 5a56 86a7 414f c796     dl..}w.EVZ..OA..
  403d08:	d9c8 088a c2d1 49bb effa 8ae8 f4e3 cbd9     .......I........
  403d18:	b5ac 0c4f aeb5 4d7e 839e 8e2d 9887 cf1c     ..O...~M..-.....
  403d28:	c24a 5112 d953 1023 f478 d370 ef61 9241     J..QS.#.x.p.a.A.
  403d38:	ae2e 55d7 b537 14e6 981c d7b5 8305 9684     ...U7...........
  403d48:	1b82 5998 009b 18a9 2db0 dbfa 36a9 9acb     ...Y.....-...6..
  403d58:	77e6 5d5d 6cff 1c6c 41d4 df3f 5acd 9e0e     .w]].ll..A?..Z..
  403d68:	8495 a224 9f8c e315 b2a7 2046 a9be 6177     ..$.......F ..wa
  403d78:	e8f1 a6e1 f3e8 e7d0 dec3 2483 c5da 65b2     ...........$...e
  403d88:	5d5d aaae 4644 eb9f 6b6f 28cc 7076 69fd     ]]..DF..ok.(vp.i
  403d98:	3139 ae6b 2a20 ef5a 070b 2c09 1c12 6d38     91k. *Z....,..8m
  403da8:	46df f336 5dc6 b207 70ed 7154 6bf4 3065     .F6..]...pTq.ke0
  403db8:	2abb f7f3 31a2 b6c2 1c89 7591 0790 34a0     .*...1.....u...4
  403dc8:	9f17 fbbc 840e ba8d a925 79de b23c 38ef     ........%..y<..8
  403dd8:	f373 ff79 e86a be48 c541 7d1b de58 3c2a     s.y.j.H.A..}X.*<
  403de8:	79f0 054f 62e9 447e 4fc2 872d 54db c61c     .yO..b~D.O-..T..
  403df8:	1594 018a 0e8d 40bb 23a6 83e8 38bf c2d9     .......@.#...8..
  403e08:	a038 0dc5 bb21 4cf4 960a 8fa7 8d13 ce96     8...!..L........
  403e18:	cc5c 0900 d745 4831 fa6e 8b62 e177 ca53     \...E.1Hn.b.w.S.
  403e28:	bbba 545d a0a3 156c 8d88 d63f 9691 970e     ..]T..l...?.....
  403e38:	d7de 5098 ccc7 11a9 e1ec d2fa faf5 93cb     ...P............
  403e48:	6272 5cd7 796b 1de6 5440 deb5 4f59 9f84     rb.\ky..@T..YO..
  403e58:	0e16 5812 150f 1923 3824 da70 233d 9b41     ...X..#.$8p.=#A.
  403e68:	fd65 a76b e67c e65a cb57 2509 d04e 6438     e.k.|.Z.W..%N.8d
  403e78:	9101 a3ae 8a18 e29f a733 21cc bc2a 60fd     ........3..!*..`
  403e88:	24ad afe1 3fb4 eed0 129f 2d83 0986 6cb2     .$...?.....-...l
  403e98:	48c9 ab24 53d0 ea15 7efb 2946 65e2 6877     .H$..S...~F).ewh
  403ea8:	3f2f f679 2436 b748 091d 741b 1204 352a     /?y.6$H....t..*5
  403eb8:	534b f2bc 4852 b38d 6579 70de 7e60 31ef     KS..RH..ye.p`~.1
  403ec8:	e6e7 fef3 fdfe bfc2 d0d5 7c91 cbcc 3da0     ...........|...=
  403ed8:	8a83 fa36 919a bb07 bcb1 7854 a7a8 3965     ..6.......Tx..e9
  403ee8:	833b 4b98 9822 0aa9 b509 c9fa ae10 88cb     ;..K"...........
  403ef8:	ef5f 4f5d f446 0e6c d96d cd3f c274 8c0e     _.]OF.l.m.?.t...
  403f08:	5af3 4312 41ea 0223 6cc1 c170 77d8 8041     .Z.C.A#..lp..wA.
  403f18:	3697 47d7 2d8e 06e6 00a5 c5b5 1bbc 8484     .6.G.-..........
  403f28:	4171 1a8a 5a68 5bbb 7743 98e8 6c5a d9d9     qA..hZ.[Cw..Zl..
  403f38:	2d15 1e4f 360c 5f7e 1b27 9c2d 003e dd1c     .-O..6~_'.-.>...
  403f48:	98b9 1200 83a0 5331 ae8b 9062 b592 d153     ......1S..b...S.
  403f58:	f4dd 16c5 efc4 57f4 c2ef 94a7 d9f6 d596     .......W........
  403f68:	07ae e9bc 1cb7 a88d 319c 6bde 2a85 2aef     .........1.k.*.*
  403f78:	6bca ed79 70d3 ac48 5df8 6f1b 46e1 2e2a     .ky..pH..].o.F*.
  403f88:	de66 e136 c57f a007 e854 6354 f34d 2265     f.6.....T.TcM.e"
  403f98:	b202 e5f3 a91b a4c2 8430 6791 9f29 26a0     ........0..g)..&
  403fa8:	c5e4 b8ae defd f99f f3d6 3acc e8cf 7bfd     ...........:...{
  403fb8:	a980 bc6b b299 fd5a 9fb2 3e09 84ab 7f38     ..k...Z....>..8.
  403fc8:	1c2c b024 0735 f115 2a1e 3246 3107 7377     ,.$.5....*F2.1ws
  403fd8:	7048 b4e1 6b51 f5d0 467a 3683 5d63 77b2     Hp..Qk..zF.6c].w
  403fe8:	facb 4ed7 e1d2 0fe6 ccf9 ccb5 d7e0 8d84     ...N............
  403ff8:	96af 4a12 8db6 0b23 a09d c870 bb84 8941     ...J..#...p...A.
  404008:	2303 465d 381a 076c 1531 c43f 0e28 850e     .#]F.8l.1.?.(...
  404018:	4f67 4298 547e 03a9 7955 c0fa 624c 81cb     gO.B~T..Uy..Lb..
  404028:	3881 1fc5 2398 5ef4 0eb3 9da7 15aa dc96     .8...#.^........
  404038:	54e5 1b00 4ffc 5a31 62d7 9962 79ce d853     .T...O1Z.bb..yS.
  404048:	e149 174f fa50 567e d77b 952d cc62 d41c     I.O.P.~V{.-.b...
  404058:	8d2d 138a 9634 52bb bb1f 91e8 a006 d0d9     -...4..R........
  404068:	7e5e ecf3 6547 adc2 486c 6e91 5375 2fa0     ^~..Ge..lH.nuS./
  404078:	123a e836 0923 a907 2408 6a54 3f11 2b65     :.6.#....$Tj.?e+
  404088:	a796 e479 bc8f a548 91a4 661b 8abd 272a     ..y...H....f..*'
  404098:	cbf2 e0bc d0eb a18d fdc0 62de e6d9 23ef     ...........b...#
  4040a8:	bc14 bde1 a70d fcd0 8a26 3f83 913f 7eb2     ........&..??..~
  4040b8:	d070 b924 cb69 f815 e642 3b46 fd5b 7a77     p.$.i...B.F;[.wz
  4040c8:	65dc b56b 7ec5 f45a 53ee 3709 48f7 7638     .ek..~Z..S.7.H8v
  4040d8:	09b8 b1ae 12a1 f09f 3f8a 33cc 2493 72fd     .........?.3.$.r
  4040e8:	0000 0000 c201 376a 8403 6ed4 4602 59be     ......j7...n.F.Y
  4040f8:	0907 dca8 cb06 ebc2 8d04 b27c 4f05 8516     ..........|..O..
  404108:	130e b851 d10f 8f3b 970d d685 550c e1ef     ..Q...;......U..
  404118:	1a09 64f9 d808 5393 9e0a 0a2d 5c0b 3d47     ...d...S..-..\G=
  404128:	261c 70a3 e41d 47c9 a21f 1e77 601e 291d     .&.p...G..w..`.)
  404138:	2f1b ac0b ed1a 9b61 ab18 c2df 6919 f5b5     ./....a......i..
  404148:	3512 c8f2 f713 ff98 b111 a626 7310 914c     .5........&..sL.
  404158:	3c15 145a fe14 2330 b816 7a8e 7a17 4de4     .<Z...0#...z.z.M
  404168:	4d38 e046 8f39 d72c c93b 8e92 0b3a b9f8     8MF.9.,.;...:...
  404178:	443f 3cee 863e 0b84 c03c 523a 023d 6550     ?D.<>...<.:R=.Pe
  404188:	5e36 5817 9c37 6f7d da35 36c3 1834 01a9     6^.X7.}o5..64...
  404198:	5731 84bf 9530 b3d5 d332 ea6b 1133 dd01     1W..0...2.k.3...
  4041a8:	6b24 90e5 a925 a78f ef27 fe31 2d26 c95b     $k..%...'.1.&-[.
  4041b8:	6223 4c4d a022 7b27 e620 2299 2421 15f3     #bML".'{ .."!$..
  4041c8:	782a 28b4 ba2b 1fde fc29 4660 3e28 710a     *x.(+...).`F(>.q
  4041d8:	712d f41c b32c c376 f52e 9ac8 372f ada2     -q..,.v...../7..
  4041e8:	9a70 c08d 5871 f7e7 1e73 ae59 dc72 9933     p...qX..s.Y.r.3.
  4041f8:	9377 1c25 5176 2b4f 1774 72f1 d575 459b     w.%.vQO+t..ru..E
  404208:	897e 78dc 4b7f 4fb6 0d7d 1608 cf7c 2162     ~..x.K.O}...|.b!
  404218:	8079 a474 4278 931e 047a caa0 c67b fdca     y.t.xB..z...{...
  404228:	bc6c b02e 7e6d 8744 386f defa fa6e e990     l...m~D.o8..n...
  404238:	b56b 6c86 776a 5bec 3168 0252 f369 3538     k..ljw.[h1R.i.85
  404248:	af62 087f 6d63 3f15 2b61 66ab e960 51c1     b...cm.?a+.f`..Q
  404258:	a665 d4d7 6464 e3bd 2266 ba03 e067 8d69     e...dd..f"..g.i.
  404268:	d748 20cb 1549 17a1 534b 4e1f 914a 7975     H.. I...KS.NJ.uy
  404278:	de4f fc63 1c4e cb09 5a4c 92b7 984d a5dd     O.c.N...LZ..M...
  404288:	c446 989a 0647 aff0 4045 f64e 8244 c124     F...G...E@N.D.$.
  404298:	cd41 4432 0f40 7358 4942 2ae6 8b43 1d8c     A.2D@.XsBI.*C...
  4042a8:	f154 5068 3355 6702 7557 3ebc b756 09d6     T.hPU3.gWu.>V...
  4042b8:	f853 8cc0 3a52 bbaa 7c50 e214 be51 d57e     S...R:..P|..Q.~.
  4042c8:	e25a e839 205b df53 6659 86ed a458 b187     Z.9.[ S.Yf..X...
  4042d8:	eb5d 3491 295c 03fb 6f5e 5a45 ad5f 6d2f     ]..4\)..^oEZ_./m
  4042e8:	35e1 801b f7e0 b771 b1e2 eecf 73e3 d9a5     .5....q......s..
  4042f8:	3ce6 5cb3 fee7 6bd9 b8e5 3267 7ae4 050d     .<.\...k..g2.z..
  404308:	26ef 384a e4ee 0f20 a2ec 569e 60ed 61f4     .&J8.. ....V.`.a
  404318:	2fe8 e4e2 ede9 d388 abeb 8a36 69ea bd5c     ./........6..i\.
  404328:	13fd f0b8 d1fc c7d2 97fe 9e6c 55ff a906     ..........l..U..
  404338:	1afa 2c10 d8fb 1b7a 9ef9 42c4 5cf8 75ae     ...,..z....B.\.u
  404348:	00f3 48e9 c2f2 7f83 84f0 263d 46f1 1157     ...H......=&.FW.
  404358:	09f4 9441 cbf5 a32b 8df7 fa95 4ff6 cdff     ..A...+......O..
  404368:	78d9 605d bad8 5737 fcda 0e89 3edb 39e3     .x]`..7W.....>.9
  404378:	71de bcf5 b3df 8b9f f5dd d221 37dc e54b     .q........!..7K.
  404388:	6bd7 d80c a9d6 ef66 efd4 b6d8 2dd5 81b2     .k....f......-..
  404398:	62d0 04a4 a0d1 33ce e6d3 6a70 24d2 5d1a     .b.....3..pj.$.]
  4043a8:	5ec5 10fe 9cc4 2794 dac6 7e2a 18c7 4940     .^.....'..*~..@I
  4043b8:	57c2 cc56 95c3 fb3c d3c1 a282 11c0 95e8     .WV...<.........
  4043c8:	4dcb a8af 8fca 9fc5 c9c8 c67b 0bc9 f111     .M........{.....
  4043d8:	44cc 7407 86cd 436d c0cf 1ad3 02ce 2db9     .D.t..mC.......-
  4043e8:	af91 4096 6d90 77fc 2b92 2e42 e993 1928     ...@.m.w.+B...(.
  4043f8:	a696 9c3e 6497 ab54 2295 f2ea e094 c580     ..>..dT.."......
  404408:	bc9f f8c7 7e9e cfad 389c 9613 fa9d a179     .....~...8....y.
  404418:	b598 246f 7799 1305 319b 4abb f39a 7dd1     ..o$.w...1.J...}
  404428:	898d 3035 4b8c 075f 0d8e 5ee1 cf8f 698b     ..50.K_....^...i
  404438:	808a ec9d 428b dbf7 0489 8249 c688 b523     .....B....I...#.
  404448:	9a83 8864 5882 bf0e 1e80 e6b0 dc81 d1da     ..d..X..........
  404458:	9384 54cc 5185 63a6 1787 3a18 d586 0d72     ...T.Q.c...:..r.
  404468:	e2a9 a0d0 20a8 97ba 66aa ce04 a4ab f96e     ..... ...f....n.
  404478:	ebae 7c78 29af 4b12 6fad 12ac adac 25c6     ..x|.).K.o.....%
  404488:	f1a7 1881 33a6 2feb 75a4 7655 b7a5 413f     .....3./.uUv..?A
  404498:	f8a0 c429 3aa1 f343 7ca3 aafd bea2 9d97     ..)..:C..|......
  4044a8:	c4b5 d073 06b4 e719 40b6 bea7 82b7 89cd     ..s......@......
  4044b8:	cdb2 0cdb 0fb3 3bb1 49b1 620f 8bb0 5565     .......;.I.b..eU
  4044c8:	d7bb 6822 15ba 5f48 53b8 06f6 91b9 319c     .."h..H_.S.....1
  4044d8:	debc b48a 1cbd 83e0 5abf da5e 98be ed34     .........Z^...4.
  4044e8:	0000 0000 bcb8 6567 09aa 8bc8 b512 eeaf     ......ge........
  4044f8:	628f 5797 de37 32f0 6b25 dc5f d79d b938     .b.W7..2%k_...8.
  404508:	b4c5 ef28 087d 8a4f bd6f 64e0 01d7 0187     ..(.}.O.o..d....
  404518:	d64a b8bf 6af2 ddd8 dfe0 3377 6358 5610     J....j....w3Xc.V
  404528:	1950 9f57 a5e8 fa30 10fa 149f ac42 71f8     P.W...0.....B..q
  404538:	7bdf c8c0 c767 ada7 7275 4308 cecd 266f     .{..g...ur.C..o&
  404548:	ad95 707f 112d 1518 a43f fbb7 1887 9ed0     ...p-...?.......
  404558:	cf1a 27e8 73a2 428f c6b0 ac20 7a08 c947     ...'.s.B.. ..zG.
  404568:	32a0 3eaf 8e18 5bc8 3b0a b567 87b2 d000     .2.>...[.;g.....
  404578:	502f 6938 ec97 0c5f 5985 e2f0 e53d 8797     /P8i.._..Y..=...
  404588:	8665 d187 3add b4e0 8fcf 5a4f 3377 3f28     e....:....OZw3(?
  404598:	e4ea 8610 5852 e377 ed40 0dd8 51f8 68bf     ....RXw.@....Q.h
  4045a8:	2bf0 a1f8 9748 c49f 225a 2a30 9ee2 4f57     .+..H...Z"0*..WO
  4045b8:	497f f66f f5c7 9308 40d5 7da7 fc6d 18c0     .Io......@.}m...
  4045c8:	9f35 4ed0 238d 2bb7 969f c518 2a27 a07f     5..N.#.+....'*..
  4045d8:	fdba 1947 4102 7c20 f410 928f 48a8 f7e8     ..G..A |.....H..
  4045e8:	149b 3d58 a823 583f 1d31 b690 a189 d3f7     ..X=#.?X1.......
  4045f8:	7614 6acf caac 0fa8 7fbe e107 c306 8460     .v.j..........`.
  404608:	a05e d270 1ce6 b717 a9f4 59b8 154c 3cdf     ^.p........YL..<
  404618:	c2d1 85e7 7e69 e080 cb7b 0e2f 77c3 6b48     ....i~..{./..wHk
  404628:	0dcb a20f b173 c768 0461 29c7 b8d9 4ca0     ....s.h.a..)...L
  404638:	6f44 f598 d3fc 90ff 66ee 7e50 da56 1b37     Do.......fP~V.7.
  404648:	b90e 4d27 05b6 2840 b0a4 c6ef 0c1c a388     ..'M..@(........
  404658:	db81 1ab0 6739 7fd7 d22b 9178 6e93 f41f     ....9g..+.x..n..
  404668:	263b 03f7 9a83 6690 2f91 883f 9329 ed58     ;&.....f./?.).X.
  404678:	44b4 5460 f80c 3107 4d1e dfa8 f1a6 bacf     .D`T...1.M......
  404688:	92fe ecdf 2e46 89b8 9b54 6717 27ec 0270     ....F...T..g.'p.
  404698:	f071 bb48 4cc9 de2f f9db 3080 4563 55e7     q.H..L/....0cE.U
  4046a8:	3f6b 9ca0 83d3 f9c7 36c1 1768 8a79 720f     k?.......6h.y..r
  4046b8:	5de4 cb37 e15c ae50 544e 40ff e8f6 2598     .]7.\.P.NT.@...%
  4046c8:	8bae 7388 3716 16ef 8204 f840 3ebc 9d27     ...s.7....@..>'.
  4046d8:	e921 241f 5599 4178 e08b afd7 5c33 cab0     !..$.UxA....3\..
  4046e8:	59ed 3bb6 e555 5ed1 5047 b07e ecff d519     .Y.;U..^GP~.....
  4046f8:	3b62 6c21 87da 0946 32c8 e7e9 8e70 828e     b;!l..F..2..p...
  404708:	ed28 d49e 5190 b1f9 e482 5f56 583a 3a31     (....Q....V_:X1:
  404718:	8fa7 8309 331f e66e 860d 08c1 3ab5 6da6     .....3n......:.m
  404728:	40bd a4e1 fc05 c186 4917 2f29 f5af 4a4e     .@.......I)/..NJ
  404738:	2232 f376 9e8a 9611 2b98 78be 9720 1dd9     2"v......+.x ...
  404748:	f478 4bc9 48c0 2eae fdd2 c001 416a a566     x..K.H......jAf.
  404758:	96f7 1c5e 2a4f 7939 9f5d 9796 23e5 f2f1     ..^.O*9y]....#..
  404768:	6b4d 0519 d7f5 607e 62e7 8ed1 de5f ebb6     Mk....~`.b.._...
  404778:	09c2 528e b57a 37e9 0068 d946 bcd0 bc21     ...Rz..7h.F...!.
  404788:	df88 ea31 6330 8f56 d622 61f9 6a9a 049e     ..1.0cV."..a.j..
  404798:	bd07 bda6 01bf d8c1 b4ad 366e 0815 5309     ..........n6...S
  4047a8:	721d 9a4e cea5 ff29 7bb7 1186 c70f 74e1     .rN...)..{.....t
  4047b8:	1092 cdd9 ac2a a8be 1938 4611 a580 2376     ....*...8..F..v#
  4047c8:	c6d8 7566 7a60 1001 cf72 feae 73ca 9bc9     ..fu`z..r....s..
  4047d8:	a457 22f1 18ef 4796 adfd a939 1145 cc5e     W.."...G..9.E.^.
  4047e8:	4d76 06ee f1ce 6389 44dc 8d26 f864 e841     vM.....c.D&.d.A.
  4047f8:	2ff9 5179 9341 341e 2653 dab1 9aeb bfd6     ./yQA..4S&......
  404808:	f9b3 e9c6 450b 8ca1 f019 620e 4ca1 0769     .....E.....b.Li.
  404818:	9b3c be51 2784 db36 9296 3599 2e2e 50fe     <.Q..'6....5...P
  404828:	5426 99b9 e89e fcde 5d8c 1271 e134 7716     &T.......]q.4..w
  404838:	36a9 ce2e 8a11 ab49 3f03 45e6 83bb 2081     .6....I..?.E... 
  404848:	e0e3 7691 5c5b 13f6 e949 fd59 55f1 983e     ...v[\..I.Y..U>.
  404858:	826c 2106 3ed4 4461 8bc6 aace 377e cfa9     l..!.>aD....~7..
  404868:	7fd6 3841 c36e 5d26 767c b389 cac4 d6ee     ..A8n.&]|v......
  404878:	1d59 6fd6 a1e1 0ab1 14f3 e41e a84b 8179     Y..o........K.y.
  404888:	cb13 d769 77ab b20e c2b9 5ca1 7e01 39c6     ..i..w.....\.~.9
  404898:	a99c 80fe 1524 e599 a036 0b36 1c8e 6e51     ....$...6.6...Qn
  4048a8:	6686 a716 da3e c271 6f2c 2cde d394 49b9     .f..>.q.,o.,...I
  4048b8:	0409 f081 b8b1 95e6 0da3 7b49 b11b 1e2e     ..........I{....
  4048c8:	d243 483e 6efb 2d59 dbe9 c3f6 6751 a691     C.>H.nY-....Qg..
  4048d8:	b0cc 1fa9 0c74 7ace b966 9461 05de f106     ....t..zf.a.....

Disassembly of section .text._svfprintf_r%37:

004048e8 <_svfprintf_r>:
  4048e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

004048ec <.LCFI0>:
  4048ec:	ed2d 8b06 	vpush	{d8-d10}

004048f0 <.LCFI1>:
  4048f0:	b0cf      	sub	sp, #316	; 0x13c

004048f2 <.LCFI2>:
  4048f2:	460c      	mov	r4, r1
  4048f4:	9105      	str	r1, [sp, #20]
  4048f6:	4693      	mov	fp, r2
  4048f8:	930a      	str	r3, [sp, #40]	; 0x28

004048fa <.LVL1>:
  4048fa:	9011      	str	r0, [sp, #68]	; 0x44
  4048fc:	f018 ff0a 	bl	41d714 <_localeconv_r>

00404900 <.LVL2>:
  404900:	6803      	ldr	r3, [r0, #0]
  404902:	9317      	str	r3, [sp, #92]	; 0x5c

00404904 <.LVL3>:
  404904:	4618      	mov	r0, r3
  404906:	f013 fa7b 	bl	417e00 <strlen>

0040490a <.LVL4>:
  40490a:	89a3      	ldrh	r3, [r4, #12]
  40490c:	9015      	str	r0, [sp, #84]	; 0x54

0040490e <.LVL5>:
  40490e:	061d      	lsls	r5, r3, #24
  404910:	d503      	bpl.n	40491a <.LVL6>
  404912:	6923      	ldr	r3, [r4, #16]
  404914:	2b00      	cmp	r3, #0
  404916:	f001 8151 	beq.w	405bbc <.LBE47>

0040491a <.LVL6>:
  40491a:	2300      	movs	r3, #0
  40491c:	ed9f 8b7a 	vldr	d8, [pc, #488]	; 404b08 <.LVL46+0x4>
  404920:	ed9f 9b7b 	vldr	d9, [pc, #492]	; 404b10 <.LVL46+0xc>
  404924:	930f      	str	r3, [sp, #60]	; 0x3c
  404926:	9324      	str	r3, [sp, #144]	; 0x90
  404928:	9323      	str	r3, [sp, #140]	; 0x8c

0040492a <.LVL7>:
  40492a:	9314      	str	r3, [sp, #80]	; 0x50
  40492c:	9319      	str	r3, [sp, #100]	; 0x64
  40492e:	9312      	str	r3, [sp, #72]	; 0x48
  404930:	9318      	str	r3, [sp, #96]	; 0x60
  404932:	9316      	str	r3, [sp, #88]	; 0x58
  404934:	9303      	str	r3, [sp, #12]
  404936:	465e      	mov	r6, fp
  404938:	ab25      	add	r3, sp, #148	; 0x94

0040493a <.LVL8>:
  40493a:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 404b18 <.LVL46+0x14>
  40493e:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44

00404942 <.LVL9>:
  404942:	9322      	str	r3, [sp, #136]	; 0x88
  404944:	4699      	mov	r9, r3

00404946 <.LVL10>:
  404946:	7833      	ldrb	r3, [r6, #0]
  404948:	4634      	mov	r4, r6
  40494a:	b1e3      	cbz	r3, 404986 <.LVL18>
  40494c:	2b25      	cmp	r3, #37	; 0x25
  40494e:	d102      	bne.n	404956 <.LVL12>
  404950:	e019      	b.n	404986 <.LVL18>

00404952 <.LVL11>:
  404952:	2b25      	cmp	r3, #37	; 0x25
  404954:	d003      	beq.n	40495e <.LVL14>

00404956 <.LVL12>:
  404956:	f814 3f01 	ldrb.w	r3, [r4, #1]!

0040495a <.LVL13>:
  40495a:	2b00      	cmp	r3, #0
  40495c:	d1f9      	bne.n	404952 <.LVL11>

0040495e <.LVL14>:
  40495e:	1ba5      	subs	r5, r4, r6
  404960:	b18d      	cbz	r5, 404986 <.LVL18>
  404962:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404964:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404966:	f8c9 6000 	str.w	r6, [r9]
  40496a:	3301      	adds	r3, #1
  40496c:	442a      	add	r2, r5
  40496e:	2b07      	cmp	r3, #7
  404970:	f8c9 5004 	str.w	r5, [r9, #4]
  404974:	9224      	str	r2, [sp, #144]	; 0x90

00404976 <.LVL15>:
  404976:	9323      	str	r3, [sp, #140]	; 0x8c
  404978:	f300 809d 	bgt.w	404ab6 <.LVL36>

0040497c <.LVL16>:
  40497c:	f109 0908 	add.w	r9, r9, #8

00404980 <.LVL17>:
  404980:	9b03      	ldr	r3, [sp, #12]
  404982:	442b      	add	r3, r5
  404984:	9303      	str	r3, [sp, #12]

00404986 <.LVL18>:
  404986:	7823      	ldrb	r3, [r4, #0]
  404988:	2b00      	cmp	r3, #0
  40498a:	f001 80ca 	beq.w	405b22 <.LDL1>

0040498e <.LVL19>:
  40498e:	2300      	movs	r3, #0
  404990:	f04f 32ff 	mov.w	r2, #4294967295
  404994:	4698      	mov	r8, r3
  404996:	9307      	str	r3, [sp, #28]
  404998:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
  40499c:	1c67      	adds	r7, r4, #1

0040499e <.LVL20>:
  40499e:	7863      	ldrb	r3, [r4, #1]
  4049a0:	9204      	str	r2, [sp, #16]
  4049a2:	242b      	movs	r4, #43	; 0x2b

004049a4 <.LVL21>:
  4049a4:	2520      	movs	r5, #32

004049a6 <.LVL22>:
  4049a6:	3701      	adds	r7, #1
  4049a8:	f1a3 0220 	sub.w	r2, r3, #32
  4049ac:	2a5a      	cmp	r2, #90	; 0x5a
  4049ae:	f200 83e4 	bhi.w	40517a <.LVL218>
  4049b2:	e8df f012 	tbh	[pc, r2, lsl #1]
  4049b6:	02a5      	.short	0x02a5
  4049b8:	03e203e2 	.word	0x03e203e2
  4049bc:	03e202ae 	.word	0x03e202ae
  4049c0:	03e203e2 	.word	0x03e203e2
  4049c4:	03e2005f 	.word	0x03e2005f
  4049c8:	02b203e2 	.word	0x02b203e2
  4049cc:	03e202bf 	.word	0x03e202bf
  4049d0:	02cd007c 	.word	0x02cd007c
  4049d4:	02e703e2 	.word	0x02e703e2
  4049d8:	03d203d2 	.word	0x03d203d2
  4049dc:	03d203d2 	.word	0x03d203d2
  4049e0:	03d203d2 	.word	0x03d203d2
  4049e4:	03d203d2 	.word	0x03d203d2
  4049e8:	03e203d2 	.word	0x03e203d2
  4049ec:	03e203e2 	.word	0x03e203e2
  4049f0:	03e203e2 	.word	0x03e203e2
  4049f4:	03e203e2 	.word	0x03e203e2
  4049f8:	03e2034a 	.word	0x03e2034a
  4049fc:	0392037c 	.word	0x0392037c
  404a00:	034a034a 	.word	0x034a034a
  404a04:	03e2034a 	.word	0x03e2034a
  404a08:	03e203e2 	.word	0x03e203e2
  404a0c:	02eb03e2 	.word	0x02eb03e2
  404a10:	03e203e2 	.word	0x03e203e2
  404a14:	03e202ef 	.word	0x03e202ef
  404a18:	03e203e2 	.word	0x03e203e2
  404a1c:	03e20300 	.word	0x03e20300
  404a20:	03e20327 	.word	0x03e20327
  404a24:	029403e2 	.word	0x029403e2
  404a28:	03e203e2 	.word	0x03e203e2
  404a2c:	03e203e2 	.word	0x03e203e2
  404a30:	03e203e2 	.word	0x03e203e2
  404a34:	03e203e2 	.word	0x03e203e2
  404a38:	03e2034a 	.word	0x03e2034a
  404a3c:	0254037c 	.word	0x0254037c
  404a40:	034a034a 	.word	0x034a034a
  404a44:	02c3034a 	.word	0x02c3034a
  404a48:	005b0254 	.word	0x005b0254
  404a4c:	03b003e2 	.word	0x03b003e2
  404a50:	03ba03e2 	.word	0x03ba03e2
  404a54:	03380223 	.word	0x03380223
  404a58:	03e2005b 	.word	0x03e2005b
  404a5c:	00760300 	.word	0x00760300
  404a60:	03e2023e 	.word	0x03e2023e
  404a64:	00b303e2 	.word	0x00b303e2
  404a68:	007603e2 	.word	0x007603e2
  404a6c:	f048 0820 	orr.w	r8, r8, #32
  404a70:	783b      	ldrb	r3, [r7, #0]
  404a72:	e798      	b.n	4049a6 <.LVL22>
  404a74:	4658      	mov	r0, fp
  404a76:	f018 fe4d 	bl	41d714 <_localeconv_r>

00404a7a <.LVL25>:
  404a7a:	6843      	ldr	r3, [r0, #4]
  404a7c:	9316      	str	r3, [sp, #88]	; 0x58

00404a7e <.LVL26>:
  404a7e:	4618      	mov	r0, r3
  404a80:	f013 f9be 	bl	417e00 <strlen>

00404a84 <.LVL27>:
  404a84:	9018      	str	r0, [sp, #96]	; 0x60

00404a86 <.LVL28>:
  404a86:	4658      	mov	r0, fp
  404a88:	f018 fe44 	bl	41d714 <_localeconv_r>

00404a8c <.LVL29>:
  404a8c:	6883      	ldr	r3, [r0, #8]
  404a8e:	9312      	str	r3, [sp, #72]	; 0x48

00404a90 <.LVL30>:
  404a90:	9b18      	ldr	r3, [sp, #96]	; 0x60

00404a92 <.LVL31>:
  404a92:	b133      	cbz	r3, 404aa2 <.LVL32>
  404a94:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404a96:	b123      	cbz	r3, 404aa2 <.LVL32>
  404a98:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404a9a:	781b      	ldrb	r3, [r3, #0]
  404a9c:	2b00      	cmp	r3, #0
  404a9e:	f041 8083 	bne.w	405ba8 <.LVL513>

00404aa2 <.LVL32>:
  404aa2:	783b      	ldrb	r3, [r7, #0]
  404aa4:	e77f      	b.n	4049a6 <.LVL22>

00404aa6 <.LVL33>:
  404aa6:	9a07      	ldr	r2, [sp, #28]
  404aa8:	930a      	str	r3, [sp, #40]	; 0x28
  404aaa:	4252      	negs	r2, r2
  404aac:	9207      	str	r2, [sp, #28]

00404aae <.LVL34>:
  404aae:	f048 0804 	orr.w	r8, r8, #4
  404ab2:	783b      	ldrb	r3, [r7, #0]
  404ab4:	e777      	b.n	4049a6 <.LVL22>

00404ab6 <.LVL36>:
  404ab6:	aa22      	add	r2, sp, #136	; 0x88
  404ab8:	9905      	ldr	r1, [sp, #20]
  404aba:	4658      	mov	r0, fp
  404abc:	f012 fd86 	bl	4175cc <.LFE224>

00404ac0 <.LVL37>:
  404ac0:	b980      	cbnz	r0, 404ae4 <.LVL44>

00404ac2 <.LVL38>:
  404ac2:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00404ac6 <.LVL39>:
  404ac6:	e75b      	b.n	404980 <.LVL17>

00404ac8 <.LVL40>:
  404ac8:	aa22      	add	r2, sp, #136	; 0x88

00404aca <.LVL41>:
  404aca:	9905      	ldr	r1, [sp, #20]
  404acc:	4658      	mov	r0, fp
  404ace:	f012 fd7d 	bl	4175cc <.LFE224>

00404ad2 <.LVL42>:
  404ad2:	2800      	cmp	r0, #0
  404ad4:	f000 8182 	beq.w	404ddc <.LVL119>

00404ad8 <.L189>:
  404ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404ada:	b11b      	cbz	r3, 404ae4 <.LVL44>
  404adc:	9909      	ldr	r1, [sp, #36]	; 0x24
  404ade:	9811      	ldr	r0, [sp, #68]	; 0x44
  404ae0:	f010 fc5a 	bl	415398 <_free_r>

00404ae4 <.LVL44>:
  404ae4:	9b05      	ldr	r3, [sp, #20]
  404ae6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
  404aea:	f013 0f40 	tst.w	r3, #64	; 0x40
  404aee:	9b03      	ldr	r3, [sp, #12]
  404af0:	bf18      	it	ne
  404af2:	f04f 33ff 	movne.w	r3, #4294967295
  404af6:	9303      	str	r3, [sp, #12]

00404af8 <.LVL45>:
  404af8:	9803      	ldr	r0, [sp, #12]
  404afa:	b04f      	add	sp, #316	; 0x13c

00404afc <.LCFI3>:
  404afc:	ecbd 8b06 	vpop	{d8-d10}

00404b00 <.LCFI4>:
  404b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00404b04 <.LVL46>:
  404b04:	f3af 8000 	nop.w
	...
  404b10:	ffffffff 	.word	0xffffffff
  404b14:	7fefffff 	.word	0x7fefffff
  404b18:	0041db70 	.word	0x0041db70

00404b1c <.L45>:
  404b1c:	930d      	str	r3, [sp, #52]	; 0x34
  404b1e:	f018 0f20 	tst.w	r8, #32
  404b22:	4bb4      	ldr	r3, [pc, #720]	; (404df4 <.LVL122+0x4>)
  404b24:	9314      	str	r3, [sp, #80]	; 0x50

00404b26 <.LVL48>:
  404b26:	f040 81e1 	bne.w	404eec <.LVL150>
  404b2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404b2c:	f018 0f10 	tst.w	r8, #16
  404b30:	4613      	mov	r3, r2
  404b32:	f040 859d 	bne.w	405670 <.LVL365>
  404b36:	f018 0f40 	tst.w	r8, #64	; 0x40
  404b3a:	f041 801d 	bne.w	405b78 <.LVL506>
  404b3e:	f418 7f00 	tst.w	r8, #512	; 0x200
  404b42:	f000 8595 	beq.w	405670 <.LVL365>

00404b46 <.LVL49>:
  404b46:	3304      	adds	r3, #4

00404b48 <.LVL50>:
  404b48:	7814      	ldrb	r4, [r2, #0]
  404b4a:	930a      	str	r3, [sp, #40]	; 0x28
  404b4c:	2500      	movs	r5, #0

00404b4e <.LVL51>:
  404b4e:	f018 0f01 	tst.w	r8, #1
  404b52:	d00b      	beq.n	404b6c <.LVL51+0x1e>
  404b54:	ea54 0305 	orrs.w	r3, r4, r5
  404b58:	d008      	beq.n	404b6c <.LVL51+0x1e>
  404b5a:	2330      	movs	r3, #48	; 0x30
  404b5c:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
  404b60:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
  404b64:	f048 0802 	orr.w	r8, r8, #2
  404b68:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
  404b6c:	f428 6180 	bic.w	r1, r8, #1024	; 0x400

00404b70 <.LVL53>:
  404b70:	2302      	movs	r3, #2

00404b72 <.L150>:
  404b72:	2200      	movs	r2, #0
  404b74:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b

00404b78 <.L65>:
  404b78:	9804      	ldr	r0, [sp, #16]
  404b7a:	1c42      	adds	r2, r0, #1
  404b7c:	f000 8190 	beq.w	404ea0 <.LVL139>

00404b80 <.LVL56>:
  404b80:	ea54 0205 	orrs.w	r2, r4, r5
  404b84:	f021 0880 	bic.w	r8, r1, #128	; 0x80

00404b88 <.LVL57>:
  404b88:	f040 818f 	bne.w	404eaa <.LVL140>
  404b8c:	2800      	cmp	r0, #0
  404b8e:	f040 8409 	bne.w	4053a4 <.LVL271>
  404b92:	2b00      	cmp	r3, #0
  404b94:	f040 84a2 	bne.w	4054dc <.LBE13>
  404b98:	f011 0301 	ands.w	r3, r1, #1

00404b9c <.LVL58>:
  404b9c:	ae4e      	add	r6, sp, #312	; 0x138

00404b9e <.LVL59>:
  404b9e:	9308      	str	r3, [sp, #32]
  404ba0:	d002      	beq.n	404ba8 <.LVL61>

00404ba2 <.LVL60>:
  404ba2:	2330      	movs	r3, #48	; 0x30
  404ba4:	f806 3d01 	strb.w	r3, [r6, #-1]!

00404ba8 <.LVL61>:
  404ba8:	2300      	movs	r3, #0
  404baa:	9a08      	ldr	r2, [sp, #32]
  404bac:	9309      	str	r3, [sp, #36]	; 0x24
  404bae:	9313      	str	r3, [sp, #76]	; 0x4c
  404bb0:	9310      	str	r3, [sp, #64]	; 0x40
  404bb2:	930e      	str	r3, [sp, #56]	; 0x38
  404bb4:	9b04      	ldr	r3, [sp, #16]
  404bb6:	4293      	cmp	r3, r2
  404bb8:	bfb8      	it	lt
  404bba:	4613      	movlt	r3, r2
  404bbc:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  404bc0:	9302      	str	r3, [sp, #8]

00404bc2 <.L59>:
  404bc2:	b112      	cbz	r2, 404bca <.LVL64>

00404bc4 <.LVL63>:
  404bc4:	9b02      	ldr	r3, [sp, #8]
  404bc6:	3301      	adds	r3, #1
  404bc8:	9302      	str	r3, [sp, #8]

00404bca <.LVL64>:
  404bca:	f018 0302 	ands.w	r3, r8, #2
  404bce:	930b      	str	r3, [sp, #44]	; 0x2c
  404bd0:	d002      	beq.n	404bd8 <.LVL64+0xe>
  404bd2:	9b02      	ldr	r3, [sp, #8]
  404bd4:	3302      	adds	r3, #2
  404bd6:	9302      	str	r3, [sp, #8]
  404bd8:	f018 0384 	ands.w	r3, r8, #132	; 0x84
  404bdc:	930c      	str	r3, [sp, #48]	; 0x30
  404bde:	f040 82ea 	bne.w	4051b6 <.LVL227>
  404be2:	9b07      	ldr	r3, [sp, #28]
  404be4:	9902      	ldr	r1, [sp, #8]
  404be6:	1a5c      	subs	r4, r3, r1

00404be8 <.LVL66>:
  404be8:	2c00      	cmp	r4, #0
  404bea:	f340 82e4 	ble.w	4051b6 <.LVL227>
  404bee:	2c10      	cmp	r4, #16
  404bf0:	9924      	ldr	r1, [sp, #144]	; 0x90
  404bf2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  404bf4:	4d80      	ldr	r5, [pc, #512]	; (404df8 <.LVL122+0x8>)
  404bf6:	dd25      	ble.n	404c44 <.LVL80>
  404bf8:	4648      	mov	r0, r9
  404bfa:	2310      	movs	r3, #16
  404bfc:	46c1      	mov	r9, r8
  404bfe:	46b0      	mov	r8, r6

00404c00 <.LVL67>:
  404c00:	9e05      	ldr	r6, [sp, #20]
  404c02:	e004      	b.n	404c0e <.LVL71>

00404c04 <.LVL68>:
  404c04:	3c10      	subs	r4, #16

00404c06 <.LVL69>:
  404c06:	2c10      	cmp	r4, #16
  404c08:	f100 0008 	add.w	r0, r0, #8

00404c0c <.LVL70>:
  404c0c:	dd17      	ble.n	404c3e <.LVL79>

00404c0e <.LVL71>:
  404c0e:	3201      	adds	r2, #1
  404c10:	3110      	adds	r1, #16
  404c12:	2a07      	cmp	r2, #7
  404c14:	9124      	str	r1, [sp, #144]	; 0x90

00404c16 <.LVL72>:
  404c16:	9223      	str	r2, [sp, #140]	; 0x8c
  404c18:	6005      	str	r5, [r0, #0]
  404c1a:	6043      	str	r3, [r0, #4]
  404c1c:	ddf2      	ble.n	404c04 <.LVL68>
  404c1e:	aa22      	add	r2, sp, #136	; 0x88
  404c20:	4631      	mov	r1, r6
  404c22:	4658      	mov	r0, fp

00404c24 <.LVL73>:
  404c24:	9306      	str	r3, [sp, #24]
  404c26:	f012 fcd1 	bl	4175cc <.LFE224>

00404c2a <.LVL74>:
  404c2a:	2800      	cmp	r0, #0
  404c2c:	f47f af54 	bne.w	404ad8 <.L189>
  404c30:	3c10      	subs	r4, #16

00404c32 <.LVL75>:
  404c32:	2c10      	cmp	r4, #16
  404c34:	9924      	ldr	r1, [sp, #144]	; 0x90
  404c36:	9a23      	ldr	r2, [sp, #140]	; 0x8c

00404c38 <.LVL76>:
  404c38:	9b06      	ldr	r3, [sp, #24]

00404c3a <.LVL77>:
  404c3a:	a825      	add	r0, sp, #148	; 0x94

00404c3c <.LVL78>:
  404c3c:	dce7      	bgt.n	404c0e <.LVL71>

00404c3e <.LVL79>:
  404c3e:	4646      	mov	r6, r8
  404c40:	46c8      	mov	r8, r9
  404c42:	4681      	mov	r9, r0

00404c44 <.LVL80>:
  404c44:	3201      	adds	r2, #1
  404c46:	1863      	adds	r3, r4, r1
  404c48:	2a07      	cmp	r2, #7
  404c4a:	9324      	str	r3, [sp, #144]	; 0x90
  404c4c:	9223      	str	r2, [sp, #140]	; 0x8c
  404c4e:	f8c9 5000 	str.w	r5, [r9]
  404c52:	f8c9 4004 	str.w	r4, [r9, #4]
  404c56:	f300 848f 	bgt.w	405578 <.LVL333>

00404c5a <.LVL81>:
  404c5a:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  404c5e:	f109 0908 	add.w	r9, r9, #8

00404c62 <.LVL82>:
  404c62:	b172      	cbz	r2, 404c82 <.LVL84>
  404c64:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  404c66:	3201      	adds	r2, #1
  404c68:	3301      	adds	r3, #1
  404c6a:	f10d 006b 	add.w	r0, sp, #107	; 0x6b
  404c6e:	2101      	movs	r1, #1
  404c70:	2a07      	cmp	r2, #7
  404c72:	9324      	str	r3, [sp, #144]	; 0x90
  404c74:	9223      	str	r2, [sp, #140]	; 0x8c
  404c76:	e889 0003 	stmia.w	r9, {r0, r1}
  404c7a:	f300 83a9 	bgt.w	4053d0 <.LVL278>

00404c7e <.LVL83>:
  404c7e:	f109 0908 	add.w	r9, r9, #8

00404c82 <.LVL84>:
  404c82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404c84:	b16a      	cbz	r2, 404ca2 <.LVL86>
  404c86:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  404c88:	3201      	adds	r2, #1
  404c8a:	3302      	adds	r3, #2
  404c8c:	a81b      	add	r0, sp, #108	; 0x6c
  404c8e:	2102      	movs	r1, #2
  404c90:	2a07      	cmp	r2, #7
  404c92:	9324      	str	r3, [sp, #144]	; 0x90
  404c94:	9223      	str	r2, [sp, #140]	; 0x8c
  404c96:	e889 0003 	stmia.w	r9, {r0, r1}
  404c9a:	f300 83a5 	bgt.w	4053e8 <.LVL282>

00404c9e <.LVL85>:
  404c9e:	f109 0908 	add.w	r9, r9, #8

00404ca2 <.LVL86>:
  404ca2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404ca4:	2a80      	cmp	r2, #128	; 0x80
  404ca6:	f000 82eb 	beq.w	405280 <.LVL243>
  404caa:	9a04      	ldr	r2, [sp, #16]
  404cac:	9908      	ldr	r1, [sp, #32]
  404cae:	1a54      	subs	r4, r2, r1

00404cb0 <.LVL87>:
  404cb0:	2c00      	cmp	r4, #0
  404cb2:	dd36      	ble.n	404d22 <.LVL102>
  404cb4:	2c10      	cmp	r4, #16
  404cb6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  404cb8:	dd26      	ble.n	404d08 <.LVL100>
  404cba:	4649      	mov	r1, r9
  404cbc:	2510      	movs	r5, #16
  404cbe:	46a1      	mov	r9, r4
  404cc0:	9c05      	ldr	r4, [sp, #20]

00404cc2 <.LVL88>:
  404cc2:	e006      	b.n	404cd2 <.LVL92>

00404cc4 <.LVL89>:
  404cc4:	f1a9 0910 	sub.w	r9, r9, #16

00404cc8 <.LVL90>:
  404cc8:	f1b9 0f10 	cmp.w	r9, #16
  404ccc:	f101 0108 	add.w	r1, r1, #8

00404cd0 <.LVL91>:
  404cd0:	dd18      	ble.n	404d04 <.LVL99>

00404cd2 <.LVL92>:
  404cd2:	3201      	adds	r2, #1
  404cd4:	3310      	adds	r3, #16
  404cd6:	2a07      	cmp	r2, #7
  404cd8:	9324      	str	r3, [sp, #144]	; 0x90

00404cda <.LVL93>:
  404cda:	9223      	str	r2, [sp, #140]	; 0x8c
  404cdc:	f8c1 a000 	str.w	sl, [r1]
  404ce0:	604d      	str	r5, [r1, #4]
  404ce2:	ddef      	ble.n	404cc4 <.LVL89>
  404ce4:	aa22      	add	r2, sp, #136	; 0x88
  404ce6:	4621      	mov	r1, r4

00404ce8 <.LVL94>:
  404ce8:	4658      	mov	r0, fp
  404cea:	f012 fc6f 	bl	4175cc <.LFE224>

00404cee <.LVL95>:
  404cee:	2800      	cmp	r0, #0
  404cf0:	f47f aef2 	bne.w	404ad8 <.L189>
  404cf4:	f1a9 0910 	sub.w	r9, r9, #16

00404cf8 <.LVL96>:
  404cf8:	f1b9 0f10 	cmp.w	r9, #16
  404cfc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404cfe:	9a23      	ldr	r2, [sp, #140]	; 0x8c

00404d00 <.LVL97>:
  404d00:	a925      	add	r1, sp, #148	; 0x94

00404d02 <.LVL98>:
  404d02:	dce6      	bgt.n	404cd2 <.LVL92>

00404d04 <.LVL99>:
  404d04:	464c      	mov	r4, r9
  404d06:	4689      	mov	r9, r1

00404d08 <.LVL100>:
  404d08:	3201      	adds	r2, #1
  404d0a:	4423      	add	r3, r4
  404d0c:	2a07      	cmp	r2, #7
  404d0e:	9324      	str	r3, [sp, #144]	; 0x90
  404d10:	9223      	str	r2, [sp, #140]	; 0x8c
  404d12:	f8c9 a000 	str.w	sl, [r9]
  404d16:	f8c9 4004 	str.w	r4, [r9, #4]
  404d1a:	f300 834d 	bgt.w	4053b8 <.LVL274>

00404d1e <.LVL101>:
  404d1e:	f109 0908 	add.w	r9, r9, #8

00404d22 <.LVL102>:
  404d22:	f418 7f80 	tst.w	r8, #256	; 0x100
  404d26:	f040 824f 	bne.w	4051c8 <.LVL228>
  404d2a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  404d2c:	9808      	ldr	r0, [sp, #32]
  404d2e:	f8c9 6000 	str.w	r6, [r9]
  404d32:	3201      	adds	r2, #1
  404d34:	4403      	add	r3, r0
  404d36:	2a07      	cmp	r2, #7
  404d38:	9324      	str	r3, [sp, #144]	; 0x90
  404d3a:	f8c9 0004 	str.w	r0, [r9, #4]
  404d3e:	9223      	str	r2, [sp, #140]	; 0x8c
  404d40:	f300 8324 	bgt.w	40538c <.LVL269>

00404d44 <.LVL103>:
  404d44:	f109 0908 	add.w	r9, r9, #8

00404d48 <.LVL104>:
  404d48:	f018 0f04 	tst.w	r8, #4
  404d4c:	d03b      	beq.n	404dc6 <.LVL117>
  404d4e:	9a07      	ldr	r2, [sp, #28]
  404d50:	9902      	ldr	r1, [sp, #8]
  404d52:	1a54      	subs	r4, r2, r1

00404d54 <.LVL105>:
  404d54:	2c00      	cmp	r4, #0
  404d56:	dd36      	ble.n	404dc6 <.LVL117>
  404d58:	2c10      	cmp	r4, #16
  404d5a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  404d5c:	4d26      	ldr	r5, [pc, #152]	; (404df8 <.LVL122+0x8>)
  404d5e:	dd1f      	ble.n	404da0 <.LVL115>
  404d60:	2610      	movs	r6, #16
  404d62:	f8dd 8014 	ldr.w	r8, [sp, #20]
  404d66:	e004      	b.n	404d72 <.LVL109>

00404d68 <.LVL106>:
  404d68:	3c10      	subs	r4, #16

00404d6a <.LVL107>:
  404d6a:	2c10      	cmp	r4, #16
  404d6c:	f109 0908 	add.w	r9, r9, #8

00404d70 <.LVL108>:
  404d70:	dd16      	ble.n	404da0 <.LVL115>

00404d72 <.LVL109>:
  404d72:	3201      	adds	r2, #1
  404d74:	3310      	adds	r3, #16
  404d76:	2a07      	cmp	r2, #7
  404d78:	9324      	str	r3, [sp, #144]	; 0x90

00404d7a <.LVL110>:
  404d7a:	9223      	str	r2, [sp, #140]	; 0x8c
  404d7c:	e889 0060 	stmia.w	r9, {r5, r6}
  404d80:	ddf2      	ble.n	404d68 <.LVL106>
  404d82:	aa22      	add	r2, sp, #136	; 0x88
  404d84:	4641      	mov	r1, r8
  404d86:	4658      	mov	r0, fp
  404d88:	f012 fc20 	bl	4175cc <.LFE224>

00404d8c <.LVL111>:
  404d8c:	2800      	cmp	r0, #0
  404d8e:	f47f aea3 	bne.w	404ad8 <.L189>
  404d92:	3c10      	subs	r4, #16

00404d94 <.LVL112>:
  404d94:	2c10      	cmp	r4, #16
  404d96:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404d98:	9a23      	ldr	r2, [sp, #140]	; 0x8c

00404d9a <.LVL113>:
  404d9a:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00404d9e <.LVL114>:
  404d9e:	dce8      	bgt.n	404d72 <.LVL109>

00404da0 <.LVL115>:
  404da0:	3201      	adds	r2, #1
  404da2:	4423      	add	r3, r4
  404da4:	2a07      	cmp	r2, #7
  404da6:	9324      	str	r3, [sp, #144]	; 0x90
  404da8:	9223      	str	r2, [sp, #140]	; 0x8c
  404daa:	f8c9 5000 	str.w	r5, [r9]
  404dae:	f8c9 4004 	str.w	r4, [r9, #4]
  404db2:	dd08      	ble.n	404dc6 <.LVL117>
  404db4:	aa22      	add	r2, sp, #136	; 0x88
  404db6:	9905      	ldr	r1, [sp, #20]
  404db8:	4658      	mov	r0, fp
  404dba:	f012 fc07 	bl	4175cc <.LFE224>

00404dbe <.LVL116>:
  404dbe:	2800      	cmp	r0, #0
  404dc0:	f47f ae8a 	bne.w	404ad8 <.L189>
  404dc4:	9b24      	ldr	r3, [sp, #144]	; 0x90

00404dc6 <.LVL117>:
  404dc6:	9a03      	ldr	r2, [sp, #12]
  404dc8:	9907      	ldr	r1, [sp, #28]
  404dca:	9802      	ldr	r0, [sp, #8]
  404dcc:	4281      	cmp	r1, r0
  404dce:	bfac      	ite	ge
  404dd0:	1852      	addge	r2, r2, r1
  404dd2:	1812      	addlt	r2, r2, r0
  404dd4:	9203      	str	r2, [sp, #12]

00404dd6 <.LVL118>:
  404dd6:	2b00      	cmp	r3, #0
  404dd8:	f47f ae76 	bne.w	404ac8 <.LVL40>

00404ddc <.LVL119>:
  404ddc:	2300      	movs	r3, #0
  404dde:	9323      	str	r3, [sp, #140]	; 0x8c

00404de0 <.LVL120>:
  404de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404de2:	b11b      	cbz	r3, 404dec <.LVL121>
  404de4:	9909      	ldr	r1, [sp, #36]	; 0x24
  404de6:	4658      	mov	r0, fp
  404de8:	f010 fad6 	bl	415398 <_free_r>

00404dec <.LVL121>:
  404dec:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00404df0 <.LVL122>:
  404df0:	463e      	mov	r6, r7
  404df2:	e5a8      	b.n	404946 <.LVL10>
  404df4:	0041c7d4 	.word	0x0041c7d4
  404df8:	0041db60 	.word	0x0041db60

00404dfc <.LVL123>:
  404dfc:	f018 0f20 	tst.w	r8, #32
  404e00:	930d      	str	r3, [sp, #52]	; 0x34
  404e02:	f040 80ce 	bne.w	404fa2 <.LVL168+0x1e>
  404e06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404e08:	f018 0f10 	tst.w	r8, #16
  404e0c:	4613      	mov	r3, r2
  404e0e:	f040 8419 	bne.w	405644 <.LVL358>
  404e12:	f018 0f40 	tst.w	r8, #64	; 0x40
  404e16:	f040 86a2 	bne.w	405b5e <.LVL502>
  404e1a:	f418 7f00 	tst.w	r8, #512	; 0x200
  404e1e:	f000 8411 	beq.w	405644 <.LVL358>

00404e22 <.LVL124>:
  404e22:	3304      	adds	r3, #4

00404e24 <.LVL125>:
  404e24:	7814      	ldrb	r4, [r2, #0]
  404e26:	930a      	str	r3, [sp, #40]	; 0x28
  404e28:	2500      	movs	r5, #0

00404e2a <.LVL126>:
  404e2a:	f428 6180 	bic.w	r1, r8, #1024	; 0x400

00404e2e <.LVL127>:
  404e2e:	2300      	movs	r3, #0
  404e30:	e69f      	b.n	404b72 <.L150>

00404e32 <.LVL128>:
  404e32:	4641      	mov	r1, r8

00404e34 <.LVL129>:
  404e34:	068e      	lsls	r6, r1, #26

00404e36 <.LVL130>:
  404e36:	930d      	str	r3, [sp, #52]	; 0x34
  404e38:	f100 80ea 	bmi.w	405010 <.LVL180+0x6>
  404e3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404e3e:	06cd      	lsls	r5, r1, #27
  404e40:	4613      	mov	r3, r2
  404e42:	f100 8405 	bmi.w	405650 <.LVL360>
  404e46:	064c      	lsls	r4, r1, #25
  404e48:	f100 868f 	bmi.w	405b6a <.LVL504>
  404e4c:	0588      	lsls	r0, r1, #22
  404e4e:	f140 83ff 	bpl.w	405650 <.LVL360>

00404e52 <.LVL131>:
  404e52:	7814      	ldrb	r4, [r2, #0]
  404e54:	3204      	adds	r2, #4

00404e56 <.LVL132>:
  404e56:	2500      	movs	r5, #0
  404e58:	2301      	movs	r3, #1
  404e5a:	920a      	str	r2, [sp, #40]	; 0x28
  404e5c:	e689      	b.n	404b72 <.L150>

00404e5e <.LVL133>:
  404e5e:	4641      	mov	r1, r8

00404e60 <.LVL134>:
  404e60:	068c      	lsls	r4, r1, #26
  404e62:	930d      	str	r3, [sp, #52]	; 0x34
  404e64:	f100 813f 	bmi.w	4050e6 <.LVL198+0x8>
  404e68:	06c8      	lsls	r0, r1, #27
  404e6a:	f100 83f8 	bmi.w	40565e <.LVL362>
  404e6e:	064a      	lsls	r2, r1, #25
  404e70:	f100 8688 	bmi.w	405b84 <.LVL508>
  404e74:	058b      	lsls	r3, r1, #22
  404e76:	f140 83f2 	bpl.w	40565e <.LVL362>

00404e7a <.LVL135>:
  404e7a:	980a      	ldr	r0, [sp, #40]	; 0x28
  404e7c:	f990 4000 	ldrsb.w	r4, [r0]

00404e80 <.LVL136>:
  404e80:	17e5      	asrs	r5, r4, #31
  404e82:	3004      	adds	r0, #4
  404e84:	4622      	mov	r2, r4
  404e86:	462b      	mov	r3, r5
  404e88:	900a      	str	r0, [sp, #40]	; 0x28

00404e8a <.LVL137>:
  404e8a:	2a00      	cmp	r2, #0
  404e8c:	f173 0300 	sbcs.w	r3, r3, #0
  404e90:	f2c0 8139 	blt.w	405106 <.LVL201>
  404e94:	9804      	ldr	r0, [sp, #16]
  404e96:	1c42      	adds	r2, r0, #1
  404e98:	f04f 0301 	mov.w	r3, #1

00404e9c <.LVL138>:
  404e9c:	f47f ae70 	bne.w	404b80 <.LVL56>

00404ea0 <.LVL139>:
  404ea0:	ea54 0205 	orrs.w	r2, r4, r5
  404ea4:	f000 827f 	beq.w	4053a6 <.LVL272>
  404ea8:	4688      	mov	r8, r1

00404eaa <.LVL140>:
  404eaa:	2b01      	cmp	r3, #1
  404eac:	f000 831e 	beq.w	4054ec <.LVL316>
  404eb0:	2b02      	cmp	r3, #2
  404eb2:	f040 82a8 	bne.w	405406 <.LVL288>

00404eb6 <.LVL141>:
  404eb6:	9814      	ldr	r0, [sp, #80]	; 0x50

00404eb8 <.LVL142>:
  404eb8:	ae4e      	add	r6, sp, #312	; 0x138

00404eba <.LVL143>:
  404eba:	0923      	lsrs	r3, r4, #4
  404ebc:	f004 010f 	and.w	r1, r4, #15
  404ec0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  404ec4:	092a      	lsrs	r2, r5, #4
  404ec6:	461c      	mov	r4, r3

00404ec8 <.LVL144>:
  404ec8:	4615      	mov	r5, r2

00404eca <.LVL145>:
  404eca:	5c43      	ldrb	r3, [r0, r1]
  404ecc:	f806 3d01 	strb.w	r3, [r6, #-1]!

00404ed0 <.LVL146>:
  404ed0:	ea54 0305 	orrs.w	r3, r4, r5
  404ed4:	d1f1      	bne.n	404eba <.LVL143>

00404ed6 <.LVL147>:
  404ed6:	ab4e      	add	r3, sp, #312	; 0x138
  404ed8:	1b9b      	subs	r3, r3, r6
  404eda:	9308      	str	r3, [sp, #32]
  404edc:	e664      	b.n	404ba8 <.LVL61>

00404ede <.LVL148>:
  404ede:	930d      	str	r3, [sp, #52]	; 0x34
  404ee0:	f018 0f20 	tst.w	r8, #32
  404ee4:	4bb5      	ldr	r3, [pc, #724]	; (4051bc <.LVL227+0x6>)
  404ee6:	9314      	str	r3, [sp, #80]	; 0x50

00404ee8 <.LVL149>:
  404ee8:	f43f ae1f 	beq.w	404b2a <.LVL48+0x4>

00404eec <.LVL150>:
  404eec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404eee:	3507      	adds	r5, #7
  404ef0:	f025 0307 	bic.w	r3, r5, #7
  404ef4:	f103 0208 	add.w	r2, r3, #8
  404ef8:	920a      	str	r2, [sp, #40]	; 0x28

00404efa <.LVL151>:
  404efa:	e9d3 4500 	ldrd	r4, r5, [r3]
  404efe:	e626      	b.n	404b4e <.LVL51>

00404f00 <.LVL152>:
  404f00:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
  404f04:	2b00      	cmp	r3, #0
  404f06:	f47f adcc 	bne.w	404aa2 <.LVL32>
  404f0a:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
  404f0e:	783b      	ldrb	r3, [r7, #0]
  404f10:	e549      	b.n	4049a6 <.LVL22>
  404f12:	f048 0801 	orr.w	r8, r8, #1
  404f16:	783b      	ldrb	r3, [r7, #0]
  404f18:	e545      	b.n	4049a6 <.LVL22>
  404f1a:	990a      	ldr	r1, [sp, #40]	; 0x28
  404f1c:	680b      	ldr	r3, [r1, #0]
  404f1e:	9307      	str	r3, [sp, #28]
  404f20:	461a      	mov	r2, r3
  404f22:	2a00      	cmp	r2, #0
  404f24:	460b      	mov	r3, r1
  404f26:	f103 0304 	add.w	r3, r3, #4

00404f2a <.LVL154>:
  404f2a:	f6ff adbc 	blt.w	404aa6 <.LVL33>
  404f2e:	930a      	str	r3, [sp, #40]	; 0x28
  404f30:	783b      	ldrb	r3, [r7, #0]

00404f32 <.LVL155>:
  404f32:	e538      	b.n	4049a6 <.LVL22>
  404f34:	f88d 406b 	strb.w	r4, [sp, #107]	; 0x6b
  404f38:	783b      	ldrb	r3, [r7, #0]
  404f3a:	e534      	b.n	4049a6 <.LVL22>

00404f3c <.LVL156>:
  404f3c:	783b      	ldrb	r3, [r7, #0]
  404f3e:	2b68      	cmp	r3, #104	; 0x68
  404f40:	bf03      	ittte	eq
  404f42:	787b      	ldrbeq	r3, [r7, #1]
  404f44:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
  404f48:	3701      	addeq	r7, #1

00404f4a <.LVL158>:
  404f4a:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
  404f4e:	e52a      	b.n	4049a6 <.LVL22>

00404f50 <.LVL160>:
  404f50:	783b      	ldrb	r3, [r7, #0]
  404f52:	2b2a      	cmp	r3, #42	; 0x2a
  404f54:	f107 0101 	add.w	r1, r7, #1

00404f58 <.LVL161>:
  404f58:	f001 811c 	beq.w	406194 <.LVL687>

00404f5c <.LVL162>:
  404f5c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  404f60:	2a09      	cmp	r2, #9
  404f62:	460f      	mov	r7, r1
  404f64:	f201 804a 	bhi.w	405ffc <.LVL637>
  404f68:	2300      	movs	r3, #0

00404f6a <.LVL163>:
  404f6a:	4619      	mov	r1, r3

00404f6c <.LVL164>:
  404f6c:	f817 3b01 	ldrb.w	r3, [r7], #1

00404f70 <.LVL165>:
  404f70:	eb01 0181 	add.w	r1, r1, r1, lsl #2

00404f74 <.LVL166>:
  404f74:	eb02 0141 	add.w	r1, r2, r1, lsl #1

00404f78 <.LVL167>:
  404f78:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  404f7c:	2a09      	cmp	r2, #9
  404f7e:	d9f5      	bls.n	404f6c <.LVL164>
  404f80:	9104      	str	r1, [sp, #16]
  404f82:	e511      	b.n	4049a8 <.LVL22+0x2>

00404f84 <.LVL168>:
  404f84:	f048 0880 	orr.w	r8, r8, #128	; 0x80
  404f88:	783b      	ldrb	r3, [r7, #0]
  404f8a:	e50c      	b.n	4049a6 <.LVL22>
  404f8c:	f048 0808 	orr.w	r8, r8, #8
  404f90:	783b      	ldrb	r3, [r7, #0]
  404f92:	e508      	b.n	4049a6 <.LVL22>
  404f94:	f048 0810 	orr.w	r8, r8, #16
  404f98:	f018 0f20 	tst.w	r8, #32
  404f9c:	930d      	str	r3, [sp, #52]	; 0x34
  404f9e:	f43f af32 	beq.w	404e06 <.LVL123+0xa>
  404fa2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404fa4:	3507      	adds	r5, #7
  404fa6:	f025 0307 	bic.w	r3, r5, #7
  404faa:	f103 0208 	add.w	r2, r3, #8
  404fae:	920a      	str	r2, [sp, #40]	; 0x28

00404fb0 <.LVL172>:
  404fb0:	e9d3 4500 	ldrd	r4, r5, [r3]
  404fb4:	e739      	b.n	404e2a <.LVL126>

00404fb6 <.LVL173>:
  404fb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404fb8:	930d      	str	r3, [sp, #52]	; 0x34
  404fba:	6816      	ldr	r6, [r2, #0]

00404fbc <.LVL174>:
  404fbc:	2400      	movs	r4, #0
  404fbe:	f88d 406b 	strb.w	r4, [sp, #107]	; 0x6b
  404fc2:	1d15      	adds	r5, r2, #4

00404fc4 <.LVL175>:
  404fc4:	2e00      	cmp	r6, #0
  404fc6:	f000 873d 	beq.w	405e44 <.LVL593>
  404fca:	9a04      	ldr	r2, [sp, #16]
  404fcc:	1c53      	adds	r3, r2, #1
  404fce:	f000 869b 	beq.w	405d08 <.LVL549>

00404fd2 <.LBB11>:
  404fd2:	4621      	mov	r1, r4
  404fd4:	4630      	mov	r0, r6
  404fd6:	f014 fcbb 	bl	419950 <memchr>

00404fda <.LVL176>:
  404fda:	9009      	str	r0, [sp, #36]	; 0x24
  404fdc:	2800      	cmp	r0, #0
  404fde:	f000 8782 	beq.w	405ee6 <.LBB63>
  404fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404fe4:	9404      	str	r4, [sp, #16]
  404fe6:	1b9b      	subs	r3, r3, r6
  404fe8:	461a      	mov	r2, r3
  404fea:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  404fee:	9308      	str	r3, [sp, #32]

00404ff0 <.LBE11>:
  404ff0:	950a      	str	r5, [sp, #40]	; 0x28

00404ff2 <.LBB12>:
  404ff2:	4623      	mov	r3, r4
  404ff4:	9202      	str	r2, [sp, #8]

00404ff6 <.LBE12>:
  404ff6:	9309      	str	r3, [sp, #36]	; 0x24
  404ff8:	9313      	str	r3, [sp, #76]	; 0x4c
  404ffa:	9310      	str	r3, [sp, #64]	; 0x40
  404ffc:	930e      	str	r3, [sp, #56]	; 0x38
  404ffe:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  405002:	e5de      	b.n	404bc2 <.L59>

00405004 <.LVL178>:
  405004:	f048 0110 	orr.w	r1, r8, #16

00405008 <.LVL179>:
  405008:	068e      	lsls	r6, r1, #26

0040500a <.LVL180>:
  40500a:	930d      	str	r3, [sp, #52]	; 0x34
  40500c:	f57f af16 	bpl.w	404e3c <.LVL130+0x6>
  405010:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  405012:	3507      	adds	r5, #7
  405014:	f025 0307 	bic.w	r3, r5, #7
  405018:	f103 0208 	add.w	r2, r3, #8
  40501c:	e9d3 4500 	ldrd	r4, r5, [r3]
  405020:	920a      	str	r2, [sp, #40]	; 0x28

00405022 <.LVL181>:
  405022:	2301      	movs	r3, #1
  405024:	e5a5      	b.n	404b72 <.L150>

00405026 <.LVL182>:
  405026:	980a      	ldr	r0, [sp, #40]	; 0x28
  405028:	4b65      	ldr	r3, [pc, #404]	; (4051c0 <.LVL227+0xa>)
  40502a:	6804      	ldr	r4, [r0, #0]
  40502c:	9314      	str	r3, [sp, #80]	; 0x50

0040502e <.LVL183>:
  40502e:	2230      	movs	r2, #48	; 0x30
  405030:	2378      	movs	r3, #120	; 0x78
  405032:	3004      	adds	r0, #4

00405034 <.LVL184>:
  405034:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
  405038:	930d      	str	r3, [sp, #52]	; 0x34
  40503a:	f048 0102 	orr.w	r1, r8, #2
  40503e:	900a      	str	r0, [sp, #40]	; 0x28
  405040:	2500      	movs	r5, #0

00405042 <.LVL185>:
  405042:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c

00405046 <.LVL186>:
  405046:	2302      	movs	r3, #2
  405048:	e593      	b.n	404b72 <.L150>

0040504a <.LVL187>:
  40504a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40504c:	930d      	str	r3, [sp, #52]	; 0x34
  40504e:	f018 0f08 	tst.w	r8, #8
  405052:	f105 0507 	add.w	r5, r5, #7
  405056:	f000 84ed 	beq.w	405a34 <.LVL468>
  40505a:	f025 0307 	bic.w	r3, r5, #7
  40505e:	ed93 8b00 	vldr	d8, [r3]

00405062 <.LVL188>:
  405062:	f103 0208 	add.w	r2, r3, #8
  405066:	920a      	str	r2, [sp, #40]	; 0x28

00405068 <.LVL189>:
  405068:	eeb0 7bc8 	vabs.f64	d7, d8
  40506c:	eeb4 7b49 	vcmp.f64	d7, d9
  405070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405074:	f340 8439 	ble.w	4058ea <.LBE27>
  405078:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
  40507c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405080:	f100 86f0 	bmi.w	405e64 <.LVL595>
  405084:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  405088:	4e4e      	ldr	r6, [pc, #312]	; (4051c4 <.LVL227+0xe>)

0040508a <.LVL190>:
  40508a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40508c:	2303      	movs	r3, #3
  40508e:	2100      	movs	r1, #0
  405090:	4618      	mov	r0, r3
  405092:	9302      	str	r3, [sp, #8]
  405094:	1f33      	subs	r3, r6, #4
  405096:	9109      	str	r1, [sp, #36]	; 0x24
  405098:	f028 0880 	bic.w	r8, r8, #128	; 0x80

0040509c <.LVL191>:
  40509c:	2c47      	cmp	r4, #71	; 0x47
  40509e:	bfd8      	it	le
  4050a0:	461e      	movle	r6, r3

004050a2 <.LVL192>:
  4050a2:	9008      	str	r0, [sp, #32]
  4050a4:	9104      	str	r1, [sp, #16]
  4050a6:	9113      	str	r1, [sp, #76]	; 0x4c
  4050a8:	9110      	str	r1, [sp, #64]	; 0x40
  4050aa:	910e      	str	r1, [sp, #56]	; 0x38
  4050ac:	e589      	b.n	404bc2 <.L59>

004050ae <.LVL193>:
  4050ae:	980a      	ldr	r0, [sp, #40]	; 0x28
  4050b0:	930d      	str	r3, [sp, #52]	; 0x34
  4050b2:	6801      	ldr	r1, [r0, #0]
  4050b4:	f88d 10d4 	strb.w	r1, [sp, #212]	; 0xd4

004050b8 <.LVL194>:
  4050b8:	2300      	movs	r3, #0
  4050ba:	4601      	mov	r1, r0
  4050bc:	461a      	mov	r2, r3
  4050be:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
  4050c2:	3104      	adds	r1, #4

004050c4 <.LVL195>:
  4050c4:	2301      	movs	r3, #1
  4050c6:	9302      	str	r3, [sp, #8]
  4050c8:	9209      	str	r2, [sp, #36]	; 0x24
  4050ca:	9204      	str	r2, [sp, #16]
  4050cc:	9213      	str	r2, [sp, #76]	; 0x4c
  4050ce:	9210      	str	r2, [sp, #64]	; 0x40
  4050d0:	920e      	str	r2, [sp, #56]	; 0x38
  4050d2:	910a      	str	r1, [sp, #40]	; 0x28
  4050d4:	9308      	str	r3, [sp, #32]
  4050d6:	ae35      	add	r6, sp, #212	; 0xd4

004050d8 <.LVL196>:
  4050d8:	e577      	b.n	404bca <.LVL64>

004050da <.LVL197>:
  4050da:	f048 0110 	orr.w	r1, r8, #16

004050de <.LVL198>:
  4050de:	068c      	lsls	r4, r1, #26
  4050e0:	930d      	str	r3, [sp, #52]	; 0x34
  4050e2:	f57f aec1 	bpl.w	404e68 <.LVL134+0x8>
  4050e6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4050e8:	3507      	adds	r5, #7
  4050ea:	f025 0507 	bic.w	r5, r5, #7
  4050ee:	e9d5 2300 	ldrd	r2, r3, [r5]
  4050f2:	2a00      	cmp	r2, #0
  4050f4:	f105 0008 	add.w	r0, r5, #8
  4050f8:	461d      	mov	r5, r3
  4050fa:	f173 0300 	sbcs.w	r3, r3, #0
  4050fe:	900a      	str	r0, [sp, #40]	; 0x28

00405100 <.LVL199>:
  405100:	4614      	mov	r4, r2

00405102 <.LVL200>:
  405102:	f6bf aec7 	bge.w	404e94 <.LVL137+0xa>

00405106 <.LVL201>:
  405106:	232d      	movs	r3, #45	; 0x2d
  405108:	4264      	negs	r4, r4

0040510a <.LVL202>:
  40510a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
  40510e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1

00405112 <.LVL203>:
  405112:	2301      	movs	r3, #1
  405114:	e530      	b.n	404b78 <.L65>

00405116 <.LVL204>:
  405116:	783b      	ldrb	r3, [r7, #0]
  405118:	2b6c      	cmp	r3, #108	; 0x6c
  40511a:	bf03      	ittte	eq
  40511c:	787b      	ldrbeq	r3, [r7, #1]
  40511e:	f048 0820 	orreq.w	r8, r8, #32
  405122:	3701      	addeq	r7, #1

00405124 <.LVL206>:
  405124:	f048 0810 	orrne.w	r8, r8, #16
  405128:	e43d      	b.n	4049a6 <.LVL22>

0040512a <.LVL208>:
  40512a:	f018 0f20 	tst.w	r8, #32
  40512e:	f040 8509 	bne.w	405b44 <.LVL499>
  405132:	f018 0f10 	tst.w	r8, #16
  405136:	d135      	bne.n	4051a4 <.LVL222>
  405138:	f018 0f40 	tst.w	r8, #64	; 0x40
  40513c:	f040 8678 	bne.w	405e30 <.LBE23>
  405140:	f418 7f00 	tst.w	r8, #512	; 0x200
  405144:	d02e      	beq.n	4051a4 <.LVL222>

00405146 <.LVL209>:
  405146:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405148:	6813      	ldr	r3, [r2, #0]
  40514a:	3204      	adds	r2, #4

0040514c <.LVL210>:
  40514c:	920a      	str	r2, [sp, #40]	; 0x28
  40514e:	f89d 200c 	ldrb.w	r2, [sp, #12]

00405152 <.LVL211>:
  405152:	701a      	strb	r2, [r3, #0]
  405154:	463e      	mov	r6, r7

00405156 <.LVL212>:
  405156:	f7ff bbf6 	b.w	404946 <.LVL10>

0040515a <.LVL213>:
  40515a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40515e:	2300      	movs	r3, #0
  405160:	4619      	mov	r1, r3

00405162 <.LVL214>:
  405162:	f817 3b01 	ldrb.w	r3, [r7], #1

00405166 <.LVL215>:
  405166:	eb01 0181 	add.w	r1, r1, r1, lsl #2

0040516a <.LVL216>:
  40516a:	eb02 0141 	add.w	r1, r2, r1, lsl #1

0040516e <.LVL217>:
  40516e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  405172:	2a09      	cmp	r2, #9
  405174:	d9f5      	bls.n	405162 <.LVL214>
  405176:	9107      	str	r1, [sp, #28]
  405178:	e416      	b.n	4049a8 <.LVL22+0x2>

0040517a <.LVL218>:
  40517a:	4619      	mov	r1, r3
  40517c:	930d      	str	r3, [sp, #52]	; 0x34
  40517e:	2b00      	cmp	r3, #0
  405180:	f000 84cf 	beq.w	405b22 <.LDL1>

00405184 <.LVL219>:
  405184:	2300      	movs	r3, #0
  405186:	2001      	movs	r0, #1
  405188:	461a      	mov	r2, r3
  40518a:	9002      	str	r0, [sp, #8]
  40518c:	f88d 10d4 	strb.w	r1, [sp, #212]	; 0xd4

00405190 <.LVL220>:
  405190:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
  405194:	9309      	str	r3, [sp, #36]	; 0x24
  405196:	9304      	str	r3, [sp, #16]
  405198:	9313      	str	r3, [sp, #76]	; 0x4c
  40519a:	9310      	str	r3, [sp, #64]	; 0x40
  40519c:	930e      	str	r3, [sp, #56]	; 0x38
  40519e:	9008      	str	r0, [sp, #32]
  4051a0:	ae35      	add	r6, sp, #212	; 0xd4

004051a2 <.LVL221>:
  4051a2:	e512      	b.n	404bca <.LVL64>

004051a4 <.LVL222>:
  4051a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4051a6:	6813      	ldr	r3, [r2, #0]
  4051a8:	3204      	adds	r2, #4

004051aa <.LVL223>:
  4051aa:	920a      	str	r2, [sp, #40]	; 0x28
  4051ac:	9a03      	ldr	r2, [sp, #12]

004051ae <.LVL224>:
  4051ae:	601a      	str	r2, [r3, #0]

004051b0 <.LVL225>:
  4051b0:	463e      	mov	r6, r7

004051b2 <.LVL226>:
  4051b2:	f7ff bbc8 	b.w	404946 <.LVL10>

004051b6 <.LVL227>:
  4051b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4051b8:	e553      	b.n	404c62 <.LVL82>
  4051ba:	bf00      	nop
  4051bc:	0041c7c0 	.word	0x0041c7c0
  4051c0:	0041c7d4 	.word	0x0041c7d4
  4051c4:	0041c7b4 	.word	0x0041c7b4

004051c8 <.LVL228>:
  4051c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4051ca:	2a65      	cmp	r2, #101	; 0x65
  4051cc:	f340 8096 	ble.w	4052fc <.LVL260>
  4051d0:	eeb5 8b40 	vcmp.f64	d8, #0.0
  4051d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4051d8:	f040 8139 	bne.w	40544e <.LVL295>
  4051dc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  4051de:	49c2      	ldr	r1, [pc, #776]	; (4054e8 <.LVL315+0x6>)
  4051e0:	f8c9 1000 	str.w	r1, [r9]
  4051e4:	3201      	adds	r2, #1
  4051e6:	3301      	adds	r3, #1
  4051e8:	2101      	movs	r1, #1
  4051ea:	2a07      	cmp	r2, #7
  4051ec:	9324      	str	r3, [sp, #144]	; 0x90
  4051ee:	9223      	str	r2, [sp, #140]	; 0x8c
  4051f0:	f8c9 1004 	str.w	r1, [r9, #4]
  4051f4:	f300 8444 	bgt.w	405a80 <.LBE21>

004051f8 <.LVL229>:
  4051f8:	f109 0908 	add.w	r9, r9, #8

004051fc <.LVL230>:
  4051fc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  4051fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405200:	4293      	cmp	r3, r2
  405202:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405204:	db03      	blt.n	40520e <.LVL230+0x12>
  405206:	f018 0f01 	tst.w	r8, #1
  40520a:	f43f ad9d 	beq.w	404d48 <.LVL104>
  40520e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  405210:	9815      	ldr	r0, [sp, #84]	; 0x54
  405212:	9917      	ldr	r1, [sp, #92]	; 0x5c
  405214:	f8c9 1000 	str.w	r1, [r9]
  405218:	3201      	adds	r2, #1
  40521a:	4403      	add	r3, r0
  40521c:	2a07      	cmp	r2, #7
  40521e:	f8c9 0004 	str.w	r0, [r9, #4]
  405222:	9324      	str	r3, [sp, #144]	; 0x90

00405224 <.LVL231>:
  405224:	9223      	str	r2, [sp, #140]	; 0x8c
  405226:	f300 84b2 	bgt.w	405b8e <.LVL509>

0040522a <.LVL232>:
  40522a:	f109 0908 	add.w	r9, r9, #8

0040522e <.LVL233>:
  40522e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405230:	1e54      	subs	r4, r2, #1
  405232:	2c00      	cmp	r4, #0
  405234:	f77f ad88 	ble.w	404d48 <.LVL104>
  405238:	2c10      	cmp	r4, #16
  40523a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40523c:	f340 8308 	ble.w	405850 <.LVL421>
  405240:	2510      	movs	r5, #16
  405242:	9e05      	ldr	r6, [sp, #20]
  405244:	e005      	b.n	405252 <.LVL238>

00405246 <.LVL235>:
  405246:	f109 0908 	add.w	r9, r9, #8

0040524a <.LVL236>:
  40524a:	3c10      	subs	r4, #16
  40524c:	2c10      	cmp	r4, #16
  40524e:	f340 82ff 	ble.w	405850 <.LVL421>

00405252 <.LVL238>:
  405252:	3201      	adds	r2, #1
  405254:	3310      	adds	r3, #16
  405256:	2a07      	cmp	r2, #7
  405258:	9324      	str	r3, [sp, #144]	; 0x90

0040525a <.LVL239>:
  40525a:	9223      	str	r2, [sp, #140]	; 0x8c
  40525c:	f8c9 a000 	str.w	sl, [r9]
  405260:	f8c9 5004 	str.w	r5, [r9, #4]
  405264:	ddef      	ble.n	405246 <.LVL235>
  405266:	aa22      	add	r2, sp, #136	; 0x88
  405268:	4631      	mov	r1, r6
  40526a:	4658      	mov	r0, fp
  40526c:	f012 f9ae 	bl	4175cc <.LFE224>

00405270 <.LVL240>:
  405270:	2800      	cmp	r0, #0
  405272:	f47f ac31 	bne.w	404ad8 <.L189>
  405276:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405278:	9a23      	ldr	r2, [sp, #140]	; 0x8c

0040527a <.LVL241>:
  40527a:	f10d 0994 	add.w	r9, sp, #148	; 0x94

0040527e <.LVL242>:
  40527e:	e7e4      	b.n	40524a <.LVL236>

00405280 <.LVL243>:
  405280:	9a07      	ldr	r2, [sp, #28]
  405282:	9902      	ldr	r1, [sp, #8]
  405284:	1a54      	subs	r4, r2, r1

00405286 <.LVL244>:
  405286:	2c00      	cmp	r4, #0
  405288:	f77f ad0f 	ble.w	404caa <.LVL86+0x8>
  40528c:	2c10      	cmp	r4, #16
  40528e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  405290:	dd26      	ble.n	4052e0 <.LVL257>
  405292:	4649      	mov	r1, r9
  405294:	2510      	movs	r5, #16
  405296:	46a1      	mov	r9, r4
  405298:	9c05      	ldr	r4, [sp, #20]

0040529a <.LVL245>:
  40529a:	e006      	b.n	4052aa <.LVL249>

0040529c <.LVL246>:
  40529c:	f1a9 0910 	sub.w	r9, r9, #16

004052a0 <.LVL247>:
  4052a0:	f1b9 0f10 	cmp.w	r9, #16
  4052a4:	f101 0108 	add.w	r1, r1, #8

004052a8 <.LVL248>:
  4052a8:	dd18      	ble.n	4052dc <.LVL256>

004052aa <.LVL249>:
  4052aa:	3201      	adds	r2, #1
  4052ac:	3310      	adds	r3, #16
  4052ae:	2a07      	cmp	r2, #7
  4052b0:	9324      	str	r3, [sp, #144]	; 0x90

004052b2 <.LVL250>:
  4052b2:	9223      	str	r2, [sp, #140]	; 0x8c
  4052b4:	f8c1 a000 	str.w	sl, [r1]
  4052b8:	604d      	str	r5, [r1, #4]
  4052ba:	ddef      	ble.n	40529c <.LVL246>
  4052bc:	aa22      	add	r2, sp, #136	; 0x88
  4052be:	4621      	mov	r1, r4

004052c0 <.LVL251>:
  4052c0:	4658      	mov	r0, fp
  4052c2:	f012 f983 	bl	4175cc <.LFE224>

004052c6 <.LVL252>:
  4052c6:	2800      	cmp	r0, #0
  4052c8:	f47f ac06 	bne.w	404ad8 <.L189>
  4052cc:	f1a9 0910 	sub.w	r9, r9, #16

004052d0 <.LVL253>:
  4052d0:	f1b9 0f10 	cmp.w	r9, #16
  4052d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4052d6:	9a23      	ldr	r2, [sp, #140]	; 0x8c

004052d8 <.LVL254>:
  4052d8:	a925      	add	r1, sp, #148	; 0x94

004052da <.LVL255>:
  4052da:	dce6      	bgt.n	4052aa <.LVL249>

004052dc <.LVL256>:
  4052dc:	464c      	mov	r4, r9
  4052de:	4689      	mov	r9, r1

004052e0 <.LVL257>:
  4052e0:	3201      	adds	r2, #1
  4052e2:	4423      	add	r3, r4
  4052e4:	2a07      	cmp	r2, #7
  4052e6:	9324      	str	r3, [sp, #144]	; 0x90
  4052e8:	9223      	str	r2, [sp, #140]	; 0x8c
  4052ea:	f8c9 a000 	str.w	sl, [r9]
  4052ee:	f8c9 4004 	str.w	r4, [r9, #4]
  4052f2:	f300 82e6 	bgt.w	4058c2 <.LVL432>

004052f6 <.LVL258>:
  4052f6:	f109 0908 	add.w	r9, r9, #8

004052fa <.LVL259>:
  4052fa:	e4d6      	b.n	404caa <.LVL86+0x8>

004052fc <.LVL260>:
  4052fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4052fe:	f8c9 6000 	str.w	r6, [r9]
  405302:	2a01      	cmp	r2, #1
  405304:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  405306:	f103 0301 	add.w	r3, r3, #1
  40530a:	f102 0201 	add.w	r2, r2, #1
  40530e:	f04f 0101 	mov.w	r1, #1
  405312:	9324      	str	r3, [sp, #144]	; 0x90
  405314:	9223      	str	r2, [sp, #140]	; 0x8c
  405316:	f8c9 1004 	str.w	r1, [r9, #4]
  40531a:	f340 82a5 	ble.w	405868 <.LBE19>
  40531e:	2a07      	cmp	r2, #7
  405320:	f300 82b5 	bgt.w	40588e <.LBE26>
  405324:	f109 0908 	add.w	r9, r9, #8

00405328 <.LVL261>:
  405328:	9815      	ldr	r0, [sp, #84]	; 0x54
  40532a:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40532c:	f8c9 1000 	str.w	r1, [r9]
  405330:	3201      	adds	r2, #1
  405332:	4403      	add	r3, r0
  405334:	2a07      	cmp	r2, #7
  405336:	9324      	str	r3, [sp, #144]	; 0x90

00405338 <.LVL262>:
  405338:	9223      	str	r2, [sp, #140]	; 0x8c
  40533a:	f8c9 0004 	str.w	r0, [r9, #4]
  40533e:	f300 82b3 	bgt.w	4058a8 <.LVL429>
  405342:	f109 0908 	add.w	r9, r9, #8

00405346 <.LVL263>:
  405346:	eeb5 8b40 	vcmp.f64	d8, #0.0
  40534a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40534e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405350:	f000 8121 	beq.w	405596 <.LVL337>
  405354:	3901      	subs	r1, #1
  405356:	3201      	adds	r2, #1
  405358:	3601      	adds	r6, #1

0040535a <.LVL264>:
  40535a:	440b      	add	r3, r1
  40535c:	2a07      	cmp	r2, #7
  40535e:	f8c9 6000 	str.w	r6, [r9]
  405362:	9223      	str	r2, [sp, #140]	; 0x8c
  405364:	9324      	str	r3, [sp, #144]	; 0x90

00405366 <.LVL265>:
  405366:	f8c9 1004 	str.w	r1, [r9, #4]
  40536a:	f300 8146 	bgt.w	4055fa <.LVL348>

0040536e <.LVL266>:
  40536e:	f109 0908 	add.w	r9, r9, #8

00405372 <.LVL267>:
  405372:	9819      	ldr	r0, [sp, #100]	; 0x64
  405374:	f8c9 0004 	str.w	r0, [r9, #4]
  405378:	3201      	adds	r2, #1
  40537a:	4403      	add	r3, r0
  40537c:	a91e      	add	r1, sp, #120	; 0x78
  40537e:	2a07      	cmp	r2, #7
  405380:	9324      	str	r3, [sp, #144]	; 0x90

00405382 <.LVL268>:
  405382:	9223      	str	r2, [sp, #140]	; 0x8c
  405384:	f8c9 1000 	str.w	r1, [r9]
  405388:	f77f acdc 	ble.w	404d44 <.LVL103>

0040538c <.LVL269>:
  40538c:	aa22      	add	r2, sp, #136	; 0x88
  40538e:	9905      	ldr	r1, [sp, #20]
  405390:	4658      	mov	r0, fp
  405392:	f012 f91b 	bl	4175cc <.LFE224>

00405396 <.LVL270>:
  405396:	2800      	cmp	r0, #0
  405398:	f47f ab9e 	bne.w	404ad8 <.L189>
  40539c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40539e:	f10d 0994 	add.w	r9, sp, #148	; 0x94
  4053a2:	e4d1      	b.n	404d48 <.LVL104>

004053a4 <.LVL271>:
  4053a4:	4641      	mov	r1, r8

004053a6 <.LVL272>:
  4053a6:	2b01      	cmp	r3, #1
  4053a8:	f000 8135 	beq.w	405616 <.LVL351>
  4053ac:	2b02      	cmp	r3, #2
  4053ae:	d127      	bne.n	405400 <.LVL286>
  4053b0:	4688      	mov	r8, r1
  4053b2:	2400      	movs	r4, #0

004053b4 <.LVL273>:
  4053b4:	2500      	movs	r5, #0
  4053b6:	e57e      	b.n	404eb6 <.LVL141>

004053b8 <.LVL274>:
  4053b8:	aa22      	add	r2, sp, #136	; 0x88
  4053ba:	9905      	ldr	r1, [sp, #20]
  4053bc:	4658      	mov	r0, fp
  4053be:	f012 f905 	bl	4175cc <.LFE224>

004053c2 <.LVL275>:
  4053c2:	2800      	cmp	r0, #0
  4053c4:	f47f ab88 	bne.w	404ad8 <.L189>
  4053c8:	9b24      	ldr	r3, [sp, #144]	; 0x90

004053ca <.LVL276>:
  4053ca:	f10d 0994 	add.w	r9, sp, #148	; 0x94

004053ce <.LVL277>:
  4053ce:	e4a8      	b.n	404d22 <.LVL102>

004053d0 <.LVL278>:
  4053d0:	aa22      	add	r2, sp, #136	; 0x88
  4053d2:	9905      	ldr	r1, [sp, #20]
  4053d4:	4658      	mov	r0, fp
  4053d6:	f012 f8f9 	bl	4175cc <.LFE224>

004053da <.LVL279>:
  4053da:	2800      	cmp	r0, #0
  4053dc:	f47f ab7c 	bne.w	404ad8 <.L189>
  4053e0:	9b24      	ldr	r3, [sp, #144]	; 0x90

004053e2 <.LVL280>:
  4053e2:	f10d 0994 	add.w	r9, sp, #148	; 0x94

004053e6 <.LVL281>:
  4053e6:	e44c      	b.n	404c82 <.LVL84>

004053e8 <.LVL282>:
  4053e8:	aa22      	add	r2, sp, #136	; 0x88
  4053ea:	9905      	ldr	r1, [sp, #20]
  4053ec:	4658      	mov	r0, fp
  4053ee:	f012 f8ed 	bl	4175cc <.LFE224>

004053f2 <.LVL283>:
  4053f2:	2800      	cmp	r0, #0
  4053f4:	f47f ab70 	bne.w	404ad8 <.L189>
  4053f8:	9b24      	ldr	r3, [sp, #144]	; 0x90

004053fa <.LVL284>:
  4053fa:	f10d 0994 	add.w	r9, sp, #148	; 0x94

004053fe <.LVL285>:
  4053fe:	e450      	b.n	404ca2 <.LVL86>

00405400 <.LVL286>:
  405400:	4688      	mov	r8, r1
  405402:	2400      	movs	r4, #0

00405404 <.LVL287>:
  405404:	2500      	movs	r5, #0

00405406 <.LVL288>:
  405406:	a94e      	add	r1, sp, #312	; 0x138

00405408 <.LVL289>:
  405408:	e000      	b.n	40540c <.LVL291>

0040540a <.LVL290>:
  40540a:	4631      	mov	r1, r6

0040540c <.LVL291>:
  40540c:	08e2      	lsrs	r2, r4, #3
  40540e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  405412:	08e8      	lsrs	r0, r5, #3
  405414:	f004 0307 	and.w	r3, r4, #7
  405418:	4605      	mov	r5, r0
  40541a:	4614      	mov	r4, r2

0040541c <.LVL292>:
  40541c:	3330      	adds	r3, #48	; 0x30
  40541e:	ea54 0205 	orrs.w	r2, r4, r5
  405422:	f801 3c01 	strb.w	r3, [r1, #-1]
  405426:	f101 36ff 	add.w	r6, r1, #4294967295

0040542a <.LVL293>:
  40542a:	d1ee      	bne.n	40540a <.LVL290>
  40542c:	f018 0f01 	tst.w	r8, #1
  405430:	f43f ad51 	beq.w	404ed6 <.LVL147>
  405434:	2b30      	cmp	r3, #48	; 0x30
  405436:	f43f ad4e 	beq.w	404ed6 <.LVL147>
  40543a:	2330      	movs	r3, #48	; 0x30
  40543c:	3902      	subs	r1, #2

0040543e <.LVL294>:
  40543e:	f806 3c01 	strb.w	r3, [r6, #-1]
  405442:	ab4e      	add	r3, sp, #312	; 0x138
  405444:	1a5b      	subs	r3, r3, r1
  405446:	9308      	str	r3, [sp, #32]
  405448:	460e      	mov	r6, r1
  40544a:	f7ff bbad 	b.w	404ba8 <.LVL61>

0040544e <.LVL295>:
  40544e:	991c      	ldr	r1, [sp, #112]	; 0x70
  405450:	2900      	cmp	r1, #0
  405452:	f340 832f 	ble.w	405ab4 <.LBE46>

00405456 <.LVL296>:
  405456:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405458:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40545a:	428a      	cmp	r2, r1
  40545c:	bfa8      	it	ge
  40545e:	460a      	movge	r2, r1

00405460 <.LBB13>:
  405460:	2a00      	cmp	r2, #0
  405462:	4614      	mov	r4, r2

00405464 <.LVL297>:
  405464:	dd0d      	ble.n	405482 <.LVL300>
  405466:	9a23      	ldr	r2, [sp, #140]	; 0x8c

00405468 <.LVL298>:
  405468:	f8c9 6000 	str.w	r6, [r9]
  40546c:	3201      	adds	r2, #1
  40546e:	4423      	add	r3, r4
  405470:	2a07      	cmp	r2, #7
  405472:	9324      	str	r3, [sp, #144]	; 0x90
  405474:	f8c9 4004 	str.w	r4, [r9, #4]
  405478:	9223      	str	r2, [sp, #140]	; 0x8c
  40547a:	f300 84cc 	bgt.w	405e16 <.LBB23>

0040547e <.LVL299>:
  40547e:	f109 0908 	add.w	r9, r9, #8

00405482 <.LVL300>:
  405482:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405484:	2c00      	cmp	r4, #0
  405486:	bfa8      	it	ge
  405488:	1b12      	subge	r2, r2, r4
  40548a:	2a00      	cmp	r2, #0
  40548c:	4614      	mov	r4, r2

0040548e <.LVL301>:
  40548e:	f340 8100 	ble.w	405692 <.LBE15>
  405492:	2c10      	cmp	r4, #16
  405494:	9a23      	ldr	r2, [sp, #140]	; 0x8c

00405496 <.LVL302>:
  405496:	f340 82d8 	ble.w	405a4a <.LBB20>
  40549a:	4649      	mov	r1, r9
  40549c:	2510      	movs	r5, #16
  40549e:	46a1      	mov	r9, r4
  4054a0:	9c05      	ldr	r4, [sp, #20]

004054a2 <.LVL303>:
  4054a2:	e006      	b.n	4054b2 <.LVL307>

004054a4 <.LVL304>:
  4054a4:	3108      	adds	r1, #8

004054a6 <.LVL305>:
  4054a6:	f1a9 0910 	sub.w	r9, r9, #16
  4054aa:	f1b9 0f10 	cmp.w	r9, #16
  4054ae:	f340 82ca 	ble.w	405a46 <.LVL471>

004054b2 <.LVL307>:
  4054b2:	3201      	adds	r2, #1
  4054b4:	3310      	adds	r3, #16
  4054b6:	2a07      	cmp	r2, #7
  4054b8:	9324      	str	r3, [sp, #144]	; 0x90

004054ba <.LVL308>:
  4054ba:	9223      	str	r2, [sp, #140]	; 0x8c
  4054bc:	f8c1 a000 	str.w	sl, [r1]
  4054c0:	604d      	str	r5, [r1, #4]
  4054c2:	ddef      	ble.n	4054a4 <.LVL304>
  4054c4:	aa22      	add	r2, sp, #136	; 0x88
  4054c6:	4621      	mov	r1, r4

004054c8 <.LVL309>:
  4054c8:	4658      	mov	r0, fp
  4054ca:	f012 f87f 	bl	4175cc <.LFE224>

004054ce <.LVL310>:
  4054ce:	2800      	cmp	r0, #0
  4054d0:	f47f ab02 	bne.w	404ad8 <.L189>
  4054d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4054d6:	9a23      	ldr	r2, [sp, #140]	; 0x8c

004054d8 <.LVL311>:
  4054d8:	a925      	add	r1, sp, #148	; 0x94

004054da <.LVL312>:
  4054da:	e7e4      	b.n	4054a6 <.LVL305>

004054dc <.LBE13>:
  4054dc:	9b04      	ldr	r3, [sp, #16]

004054de <.LVL314>:
  4054de:	9308      	str	r3, [sp, #32]
  4054e0:	ae4e      	add	r6, sp, #312	; 0x138

004054e2 <.LVL315>:
  4054e2:	f7ff bb61 	b.w	404ba8 <.LVL61>
  4054e6:	bf00      	nop
  4054e8:	0041c7f0 	.word	0x0041c7f0

004054ec <.LVL316>:
  4054ec:	2d00      	cmp	r5, #0
  4054ee:	bf08      	it	eq
  4054f0:	2c0a      	cmpeq	r4, #10
  4054f2:	f0c0 808f 	bcc.w	405614 <.LVL350>
  4054f6:	f408 6380 	and.w	r3, r8, #1024	; 0x400

004054fa <.LVL317>:
  4054fa:	2200      	movs	r2, #0
  4054fc:	9702      	str	r7, [sp, #8]
  4054fe:	f8cd 9018 	str.w	r9, [sp, #24]
  405502:	f8cd b020 	str.w	fp, [sp, #32]
  405506:	ae4e      	add	r6, sp, #312	; 0x138

00405508 <.LVL318>:
  405508:	46c3      	mov	fp, r8
  40550a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48

0040550e <.LVL319>:
  40550e:	4617      	mov	r7, r2

00405510 <.LVL320>:
  405510:	4698      	mov	r8, r3

00405512 <.LVL321>:
  405512:	e00a      	b.n	40552a <.LVL325+0x6>

00405514 <.LVL322>:
  405514:	2300      	movs	r3, #0
  405516:	4620      	mov	r0, r4
  405518:	4629      	mov	r1, r5
  40551a:	220a      	movs	r2, #10
  40551c:	f017 fdb0 	bl	41d080 <.LBE14>
  405520:	4604      	mov	r4, r0

00405522 <.LVL324>:
  405522:	460d      	mov	r5, r1

00405524 <.LVL325>:
  405524:	ea54 0305 	orrs.w	r3, r4, r5
  405528:	d07e      	beq.n	405628 <.LVL354>
  40552a:	220a      	movs	r2, #10
  40552c:	2300      	movs	r3, #0
  40552e:	4620      	mov	r0, r4
  405530:	4629      	mov	r1, r5
  405532:	f017 fda5 	bl	41d080 <.LBE14>
  405536:	3230      	adds	r2, #48	; 0x30
  405538:	f806 2c01 	strb.w	r2, [r6, #-1]
  40553c:	3701      	adds	r7, #1

0040553e <.LVL328>:
  40553e:	3e01      	subs	r6, #1

00405540 <.LVL329>:
  405540:	f1b8 0f00 	cmp.w	r8, #0
  405544:	d0e6      	beq.n	405514 <.LVL322>
  405546:	f899 3000 	ldrb.w	r3, [r9]
  40554a:	429f      	cmp	r7, r3
  40554c:	d1e2      	bne.n	405514 <.LVL322>
  40554e:	2fff      	cmp	r7, #255	; 0xff
  405550:	d0e0      	beq.n	405514 <.LVL322>
  405552:	2d00      	cmp	r5, #0
  405554:	bf08      	it	eq
  405556:	2c0a      	cmpeq	r4, #10
  405558:	d3dc      	bcc.n	405514 <.LVL322>
  40555a:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40555c:	9916      	ldr	r1, [sp, #88]	; 0x58
  40555e:	1af6      	subs	r6, r6, r3
  405560:	4630      	mov	r0, r6
  405562:	461a      	mov	r2, r3
  405564:	f016 fa4c 	bl	41ba00 <strncpy>

00405568 <.LVL331>:
  405568:	f899 7001 	ldrb.w	r7, [r9, #1]
  40556c:	2f00      	cmp	r7, #0
  40556e:	d0d1      	beq.n	405514 <.LVL322>
  405570:	f109 0901 	add.w	r9, r9, #1
  405574:	2700      	movs	r7, #0
  405576:	e7cd      	b.n	405514 <.LVL322>

00405578 <.LVL333>:
  405578:	aa22      	add	r2, sp, #136	; 0x88
  40557a:	9905      	ldr	r1, [sp, #20]
  40557c:	4658      	mov	r0, fp
  40557e:	f012 f825 	bl	4175cc <.LFE224>

00405582 <.LVL334>:
  405582:	2800      	cmp	r0, #0
  405584:	f47f aaa8 	bne.w	404ad8 <.L189>
  405588:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  40558c:	9b24      	ldr	r3, [sp, #144]	; 0x90

0040558e <.LVL335>:
  40558e:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00405592 <.LVL336>:
  405592:	f7ff bb66 	b.w	404c62 <.LVL82>

00405596 <.LVL337>:
  405596:	1e4c      	subs	r4, r1, #1
  405598:	2c00      	cmp	r4, #0
  40559a:	f77f aeea 	ble.w	405372 <.LVL267>
  40559e:	2c10      	cmp	r4, #16
  4055a0:	dd20      	ble.n	4055e4 <.LVL346+0x2>
  4055a2:	2510      	movs	r5, #16
  4055a4:	9e05      	ldr	r6, [sp, #20]

004055a6 <.LVL339>:
  4055a6:	e004      	b.n	4055b2 <.LVL342+0x2>

004055a8 <.LVL340>:
  4055a8:	3c10      	subs	r4, #16

004055aa <.LVL341>:
  4055aa:	2c10      	cmp	r4, #16
  4055ac:	f109 0908 	add.w	r9, r9, #8

004055b0 <.LVL342>:
  4055b0:	dd18      	ble.n	4055e4 <.LVL346+0x2>
  4055b2:	3201      	adds	r2, #1
  4055b4:	3310      	adds	r3, #16
  4055b6:	2a07      	cmp	r2, #7
  4055b8:	9324      	str	r3, [sp, #144]	; 0x90

004055ba <.LVL343>:
  4055ba:	9223      	str	r2, [sp, #140]	; 0x8c
  4055bc:	f8c9 a000 	str.w	sl, [r9]
  4055c0:	f8c9 5004 	str.w	r5, [r9, #4]
  4055c4:	ddf0      	ble.n	4055a8 <.LVL340>
  4055c6:	aa22      	add	r2, sp, #136	; 0x88
  4055c8:	4631      	mov	r1, r6
  4055ca:	4658      	mov	r0, fp
  4055cc:	f011 fffe 	bl	4175cc <.LFE224>

004055d0 <.LVL344>:
  4055d0:	2800      	cmp	r0, #0
  4055d2:	f47f aa81 	bne.w	404ad8 <.L189>
  4055d6:	3c10      	subs	r4, #16

004055d8 <.LVL345>:
  4055d8:	2c10      	cmp	r4, #16
  4055da:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4055dc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  4055de:	f10d 0994 	add.w	r9, sp, #148	; 0x94

004055e2 <.LVL346>:
  4055e2:	dce6      	bgt.n	4055b2 <.LVL342+0x2>
  4055e4:	3201      	adds	r2, #1
  4055e6:	4423      	add	r3, r4
  4055e8:	2a07      	cmp	r2, #7
  4055ea:	9324      	str	r3, [sp, #144]	; 0x90

004055ec <.LVL347>:
  4055ec:	9223      	str	r2, [sp, #140]	; 0x8c
  4055ee:	f8c9 a000 	str.w	sl, [r9]
  4055f2:	f8c9 4004 	str.w	r4, [r9, #4]
  4055f6:	f77f aeba 	ble.w	40536e <.LVL266>

004055fa <.LVL348>:
  4055fa:	aa22      	add	r2, sp, #136	; 0x88
  4055fc:	9905      	ldr	r1, [sp, #20]
  4055fe:	4658      	mov	r0, fp
  405600:	f011 ffe4 	bl	4175cc <.LFE224>

00405604 <.LVL349>:
  405604:	2800      	cmp	r0, #0
  405606:	f47f aa67 	bne.w	404ad8 <.L189>
  40560a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40560c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40560e:	f10d 0994 	add.w	r9, sp, #148	; 0x94
  405612:	e6ae      	b.n	405372 <.LVL267>

00405614 <.LVL350>:
  405614:	4641      	mov	r1, r8

00405616 <.LVL351>:
  405616:	ae4e      	add	r6, sp, #312	; 0x138
  405618:	3430      	adds	r4, #48	; 0x30

0040561a <.LVL352>:
  40561a:	2301      	movs	r3, #1

0040561c <.LVL353>:
  40561c:	4688      	mov	r8, r1
  40561e:	f806 4d01 	strb.w	r4, [r6, #-1]!
  405622:	9308      	str	r3, [sp, #32]
  405624:	f7ff bac0 	b.w	404ba8 <.LVL61>

00405628 <.LVL354>:
  405628:	ab4e      	add	r3, sp, #312	; 0x138
  40562a:	1b9b      	subs	r3, r3, r6
  40562c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  405630:	46d8      	mov	r8, fp
  405632:	970f      	str	r7, [sp, #60]	; 0x3c
  405634:	f8dd b020 	ldr.w	fp, [sp, #32]

00405638 <.LVL355>:
  405638:	f8dd 9018 	ldr.w	r9, [sp, #24]

0040563c <.LVL356>:
  40563c:	9f02      	ldr	r7, [sp, #8]

0040563e <.LVL357>:
  40563e:	9308      	str	r3, [sp, #32]
  405640:	f7ff bab2 	b.w	404ba8 <.LVL61>

00405644 <.LVL358>:
  405644:	681c      	ldr	r4, [r3, #0]
  405646:	3304      	adds	r3, #4
  405648:	930a      	str	r3, [sp, #40]	; 0x28

0040564a <.LVL359>:
  40564a:	2500      	movs	r5, #0
  40564c:	f7ff bbed 	b.w	404e2a <.LVL126>

00405650 <.LVL360>:
  405650:	3204      	adds	r2, #4
  405652:	681c      	ldr	r4, [r3, #0]
  405654:	920a      	str	r2, [sp, #40]	; 0x28

00405656 <.LVL361>:
  405656:	2301      	movs	r3, #1
  405658:	2500      	movs	r5, #0
  40565a:	f7ff ba8a 	b.w	404b72 <.L150>

0040565e <.LVL362>:
  40565e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405660:	6814      	ldr	r4, [r2, #0]
  405662:	4613      	mov	r3, r2
  405664:	3304      	adds	r3, #4

00405666 <.LVL363>:
  405666:	17e5      	asrs	r5, r4, #31
  405668:	930a      	str	r3, [sp, #40]	; 0x28
  40566a:	4622      	mov	r2, r4
  40566c:	462b      	mov	r3, r5

0040566e <.LVL364>:
  40566e:	e40c      	b.n	404e8a <.LVL137>

00405670 <.LVL365>:
  405670:	681c      	ldr	r4, [r3, #0]
  405672:	3304      	adds	r3, #4
  405674:	930a      	str	r3, [sp, #40]	; 0x28

00405676 <.LVL366>:
  405676:	2500      	movs	r5, #0
  405678:	f7ff ba69 	b.w	404b4e <.LVL51>

0040567c <.LBB15>:
  40567c:	aa22      	add	r2, sp, #136	; 0x88
  40567e:	9905      	ldr	r1, [sp, #20]
  405680:	4658      	mov	r0, fp
  405682:	f011 ffa3 	bl	4175cc <.LFE224>

00405686 <.LVL368>:
  405686:	2800      	cmp	r0, #0
  405688:	f47f aa26 	bne.w	404ad8 <.L189>
  40568c:	9b24      	ldr	r3, [sp, #144]	; 0x90

0040568e <.LVL369>:
  40568e:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00405692 <.LBE15>:
  405692:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405694:	f418 6f80 	tst.w	r8, #1024	; 0x400
  405698:	4432      	add	r2, r6
  40569a:	4615      	mov	r5, r2

0040569c <.LVL371>:
  40569c:	f000 8083 	beq.w	4057a6 <.LVL403>

004056a0 <.LBB16>:
  4056a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4056a2:	9608      	str	r6, [sp, #32]
  4056a4:	4618      	mov	r0, r3

004056a6 <.LBE16>:
  4056a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4056a8:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c

004056ac <.LBB17>:
  4056ac:	1871      	adds	r1, r6, r1
  4056ae:	9104      	str	r1, [sp, #16]
  4056b0:	9706      	str	r7, [sp, #24]
  4056b2:	4649      	mov	r1, r9
  4056b4:	4616      	mov	r6, r2

004056b6 <.LVL372>:
  4056b6:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
  4056ba:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c

004056be <.LVL373>:
  4056be:	9d05      	ldr	r5, [sp, #20]

004056c0 <.LBE17>:
  4056c0:	2b00      	cmp	r3, #0
  4056c2:	d05f      	beq.n	405784 <.LVL399>

004056c4 <.LVL374>:
  4056c4:	f1b8 0f00 	cmp.w	r8, #0
  4056c8:	f000 8108 	beq.w	4058dc <.LBB27>
  4056cc:	f108 38ff 	add.w	r8, r8, #4294967295

004056d0 <.LVL375>:
  4056d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4056d2:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4056d4:	600a      	str	r2, [r1, #0]
  4056d6:	3301      	adds	r3, #1
  4056d8:	4448      	add	r0, r9
  4056da:	2b07      	cmp	r3, #7
  4056dc:	9024      	str	r0, [sp, #144]	; 0x90
  4056de:	f8c1 9004 	str.w	r9, [r1, #4]
  4056e2:	9323      	str	r3, [sp, #140]	; 0x8c
  4056e4:	f300 80c8 	bgt.w	405878 <.LBB26>

004056e8 <.LVL376>:
  4056e8:	3108      	adds	r1, #8

004056ea <.LBB18>:
  4056ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4056ec:	9c04      	ldr	r4, [sp, #16]
  4056ee:	7813      	ldrb	r3, [r2, #0]
  4056f0:	1ba4      	subs	r4, r4, r6

004056f2 <.LVL378>:
  4056f2:	429c      	cmp	r4, r3
  4056f4:	bfa8      	it	ge
  4056f6:	461c      	movge	r4, r3
  4056f8:	2c00      	cmp	r4, #0
  4056fa:	dd0b      	ble.n	405714 <.LVL382>
  4056fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4056fe:	600e      	str	r6, [r1, #0]
  405700:	3301      	adds	r3, #1
  405702:	4420      	add	r0, r4
  405704:	2b07      	cmp	r3, #7
  405706:	9024      	str	r0, [sp, #144]	; 0x90

00405708 <.LVL380>:
  405708:	604c      	str	r4, [r1, #4]
  40570a:	9323      	str	r3, [sp, #140]	; 0x8c
  40570c:	f300 81ab 	bgt.w	405a66 <.LBB21>

00405710 <.LVL381>:
  405710:	7813      	ldrb	r3, [r2, #0]
  405712:	3108      	adds	r1, #8

00405714 <.LVL382>:
  405714:	2c00      	cmp	r4, #0
  405716:	bfac      	ite	ge
  405718:	1b1c      	subge	r4, r3, r4

0040571a <.LVL383>:
  40571a:	461c      	movlt	r4, r3

0040571c <.LVL384>:
  40571c:	2c00      	cmp	r4, #0
  40571e:	dd2d      	ble.n	40577c <.LBE18>
  405720:	2c10      	cmp	r4, #16
  405722:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  405724:	dd1d      	ble.n	405762 <.LVL395>
  405726:	2710      	movs	r7, #16
  405728:	e004      	b.n	405734 <.LVL388>

0040572a <.LVL385>:
  40572a:	3c10      	subs	r4, #16

0040572c <.LVL386>:
  40572c:	2c10      	cmp	r4, #16
  40572e:	f101 0108 	add.w	r1, r1, #8

00405732 <.LVL387>:
  405732:	dd16      	ble.n	405762 <.LVL395>

00405734 <.LVL388>:
  405734:	3201      	adds	r2, #1
  405736:	3010      	adds	r0, #16
  405738:	2a07      	cmp	r2, #7
  40573a:	9024      	str	r0, [sp, #144]	; 0x90

0040573c <.LVL389>:
  40573c:	9223      	str	r2, [sp, #140]	; 0x8c
  40573e:	f8c1 a000 	str.w	sl, [r1]
  405742:	604f      	str	r7, [r1, #4]
  405744:	ddf1      	ble.n	40572a <.LVL385>
  405746:	aa22      	add	r2, sp, #136	; 0x88
  405748:	4629      	mov	r1, r5

0040574a <.LVL390>:
  40574a:	4658      	mov	r0, fp
  40574c:	f011 ff3e 	bl	4175cc <.LFE224>

00405750 <.LVL391>:
  405750:	2800      	cmp	r0, #0
  405752:	f47f a9c1 	bne.w	404ad8 <.L189>
  405756:	3c10      	subs	r4, #16

00405758 <.LVL392>:
  405758:	2c10      	cmp	r4, #16
  40575a:	9824      	ldr	r0, [sp, #144]	; 0x90
  40575c:	9a23      	ldr	r2, [sp, #140]	; 0x8c

0040575e <.LVL393>:
  40575e:	a925      	add	r1, sp, #148	; 0x94

00405760 <.LVL394>:
  405760:	dce8      	bgt.n	405734 <.LVL388>

00405762 <.LVL395>:
  405762:	3201      	adds	r2, #1
  405764:	4420      	add	r0, r4
  405766:	2a07      	cmp	r2, #7
  405768:	9024      	str	r0, [sp, #144]	; 0x90
  40576a:	9223      	str	r2, [sp, #140]	; 0x8c
  40576c:	f8c1 a000 	str.w	sl, [r1]
  405770:	604c      	str	r4, [r1, #4]
  405772:	f300 8191 	bgt.w	405a98 <.LBB22>

00405776 <.LVL396>:
  405776:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405778:	781b      	ldrb	r3, [r3, #0]
  40577a:	3108      	adds	r1, #8

0040577c <.LBE18>:
  40577c:	441e      	add	r6, r3
  40577e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405780:	2b00      	cmp	r3, #0
  405782:	d19f      	bne.n	4056c4 <.LVL374>

00405784 <.LVL399>:
  405784:	f1b8 0f00 	cmp.w	r8, #0
  405788:	d1a0      	bne.n	4056cc <.LVL374+0x8>
  40578a:	4634      	mov	r4, r6
  40578c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40578e:	9e08      	ldr	r6, [sp, #32]

00405790 <.LVL400>:
  405790:	9f06      	ldr	r7, [sp, #24]
  405792:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c

00405796 <.LVL401>:
  405796:	18b2      	adds	r2, r6, r2
  405798:	4294      	cmp	r4, r2
  40579a:	4689      	mov	r9, r1
  40579c:	4621      	mov	r1, r4
  40579e:	bf28      	it	cs
  4057a0:	4611      	movcs	r1, r2
  4057a2:	4603      	mov	r3, r0

004057a4 <.LVL402>:
  4057a4:	460d      	mov	r5, r1

004057a6 <.LVL403>:
  4057a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  4057a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4057aa:	428a      	cmp	r2, r1
  4057ac:	f280 8201 	bge.w	405bb2 <.LBB47>
  4057b0:	9923      	ldr	r1, [sp, #140]	; 0x8c
  4057b2:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4057b4:	9817      	ldr	r0, [sp, #92]	; 0x5c
  4057b6:	f8c9 0000 	str.w	r0, [r9]
  4057ba:	3101      	adds	r1, #1
  4057bc:	4423      	add	r3, r4
  4057be:	2907      	cmp	r1, #7
  4057c0:	9324      	str	r3, [sp, #144]	; 0x90
  4057c2:	f8c9 4004 	str.w	r4, [r9, #4]
  4057c6:	9123      	str	r1, [sp, #140]	; 0x8c
  4057c8:	f300 828d 	bgt.w	405ce6 <.LBB50>

004057cc <.LVL404>:
  4057cc:	f109 0908 	add.w	r9, r9, #8

004057d0 <.LBB19>:
  4057d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4057d2:	1874      	adds	r4, r6, r1
  4057d4:	1b64      	subs	r4, r4, r5

004057d6 <.LVL406>:
  4057d6:	1a8a      	subs	r2, r1, r2
  4057d8:	4294      	cmp	r4, r2
  4057da:	bfa8      	it	ge
  4057dc:	4614      	movge	r4, r2
  4057de:	2c00      	cmp	r4, #0
  4057e0:	dd0d      	ble.n	4057fe <.LVL409>
  4057e2:	9923      	ldr	r1, [sp, #140]	; 0x8c
  4057e4:	f8c9 5000 	str.w	r5, [r9]
  4057e8:	3101      	adds	r1, #1
  4057ea:	4423      	add	r3, r4
  4057ec:	2907      	cmp	r1, #7
  4057ee:	9324      	str	r3, [sp, #144]	; 0x90
  4057f0:	f8c9 4004 	str.w	r4, [r9, #4]
  4057f4:	9123      	str	r1, [sp, #140]	; 0x8c
  4057f6:	f300 83bc 	bgt.w	405f72 <.LBB24>

004057fa <.LVL408>:
  4057fa:	f109 0908 	add.w	r9, r9, #8

004057fe <.LVL409>:
  4057fe:	2c00      	cmp	r4, #0
  405800:	bfac      	ite	ge
  405802:	1b14      	subge	r4, r2, r4

00405804 <.LVL410>:
  405804:	4614      	movlt	r4, r2

00405806 <.LVL411>:
  405806:	2c00      	cmp	r4, #0
  405808:	f77f aa9e 	ble.w	404d48 <.LVL104>
  40580c:	2c10      	cmp	r4, #16
  40580e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  405810:	dd1e      	ble.n	405850 <.LVL421>
  405812:	2510      	movs	r5, #16

00405814 <.LVL412>:
  405814:	9e05      	ldr	r6, [sp, #20]
  405816:	e004      	b.n	405822 <.LVL416>

00405818 <.LVL413>:
  405818:	f109 0908 	add.w	r9, r9, #8

0040581c <.LVL414>:
  40581c:	3c10      	subs	r4, #16
  40581e:	2c10      	cmp	r4, #16
  405820:	dd16      	ble.n	405850 <.LVL421>

00405822 <.LVL416>:
  405822:	3201      	adds	r2, #1
  405824:	3310      	adds	r3, #16
  405826:	2a07      	cmp	r2, #7
  405828:	9324      	str	r3, [sp, #144]	; 0x90

0040582a <.LVL417>:
  40582a:	9223      	str	r2, [sp, #140]	; 0x8c
  40582c:	f8c9 a000 	str.w	sl, [r9]
  405830:	f8c9 5004 	str.w	r5, [r9, #4]
  405834:	ddf0      	ble.n	405818 <.LVL413>
  405836:	aa22      	add	r2, sp, #136	; 0x88
  405838:	4631      	mov	r1, r6
  40583a:	4658      	mov	r0, fp
  40583c:	f011 fec6 	bl	4175cc <.LFE224>

00405840 <.LVL418>:
  405840:	2800      	cmp	r0, #0
  405842:	f47f a949 	bne.w	404ad8 <.L189>
  405846:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405848:	9a23      	ldr	r2, [sp, #140]	; 0x8c

0040584a <.LVL419>:
  40584a:	f10d 0994 	add.w	r9, sp, #148	; 0x94

0040584e <.LVL420>:
  40584e:	e7e5      	b.n	40581c <.LVL414>

00405850 <.LVL421>:
  405850:	3201      	adds	r2, #1
  405852:	4423      	add	r3, r4
  405854:	2a07      	cmp	r2, #7
  405856:	9324      	str	r3, [sp, #144]	; 0x90
  405858:	9223      	str	r2, [sp, #140]	; 0x8c
  40585a:	f8c9 a000 	str.w	sl, [r9]
  40585e:	f8c9 4004 	str.w	r4, [r9, #4]
  405862:	f77f aa6f 	ble.w	404d44 <.LVL103>
  405866:	e591      	b.n	40538c <.LVL269>

00405868 <.LBE19>:
  405868:	f018 0f01 	tst.w	r8, #1
  40586c:	f47f ad57 	bne.w	40531e <.LVL260+0x22>
  405870:	2a07      	cmp	r2, #7
  405872:	f77f ad7c 	ble.w	40536e <.LVL266>
  405876:	e6c0      	b.n	4055fa <.LVL348>

00405878 <.LBB26>:
  405878:	aa22      	add	r2, sp, #136	; 0x88
  40587a:	4629      	mov	r1, r5
  40587c:	4658      	mov	r0, fp
  40587e:	f011 fea5 	bl	4175cc <.LFE224>

00405882 <.LVL424>:
  405882:	2800      	cmp	r0, #0
  405884:	f47f a928 	bne.w	404ad8 <.L189>
  405888:	9824      	ldr	r0, [sp, #144]	; 0x90

0040588a <.LVL425>:
  40588a:	a925      	add	r1, sp, #148	; 0x94

0040588c <.LVL426>:
  40588c:	e72d      	b.n	4056ea <.LBB18>

0040588e <.LBE26>:
  40588e:	aa22      	add	r2, sp, #136	; 0x88
  405890:	9905      	ldr	r1, [sp, #20]
  405892:	4658      	mov	r0, fp
  405894:	f011 fe9a 	bl	4175cc <.LFE224>

00405898 <.LVL428>:
  405898:	2800      	cmp	r0, #0
  40589a:	f47f a91d 	bne.w	404ad8 <.L189>
  40589e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4058a0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  4058a2:	f10d 0994 	add.w	r9, sp, #148	; 0x94
  4058a6:	e53f      	b.n	405328 <.LVL261>

004058a8 <.LVL429>:
  4058a8:	aa22      	add	r2, sp, #136	; 0x88
  4058aa:	9905      	ldr	r1, [sp, #20]
  4058ac:	4658      	mov	r0, fp
  4058ae:	f011 fe8d 	bl	4175cc <.LFE224>

004058b2 <.LVL430>:
  4058b2:	2800      	cmp	r0, #0
  4058b4:	f47f a910 	bne.w	404ad8 <.L189>
  4058b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4058ba:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  4058bc:	f10d 0994 	add.w	r9, sp, #148	; 0x94

004058c0 <.LVL431>:
  4058c0:	e541      	b.n	405346 <.LVL263>

004058c2 <.LVL432>:
  4058c2:	aa22      	add	r2, sp, #136	; 0x88
  4058c4:	9905      	ldr	r1, [sp, #20]
  4058c6:	4658      	mov	r0, fp
  4058c8:	f011 fe80 	bl	4175cc <.LFE224>

004058cc <.LVL433>:
  4058cc:	2800      	cmp	r0, #0
  4058ce:	f47f a903 	bne.w	404ad8 <.L189>
  4058d2:	9b24      	ldr	r3, [sp, #144]	; 0x90

004058d4 <.LVL434>:
  4058d4:	f10d 0994 	add.w	r9, sp, #148	; 0x94

004058d8 <.LVL435>:
  4058d8:	f7ff b9e7 	b.w	404caa <.LVL86+0x8>

004058dc <.LBB27>:
  4058dc:	9b12      	ldr	r3, [sp, #72]	; 0x48

004058de <.LVL437>:
  4058de:	3b01      	subs	r3, #1
  4058e0:	9312      	str	r3, [sp, #72]	; 0x48

004058e2 <.LVL438>:
  4058e2:	9b10      	ldr	r3, [sp, #64]	; 0x40

004058e4 <.LVL439>:
  4058e4:	3b01      	subs	r3, #1
  4058e6:	9310      	str	r3, [sp, #64]	; 0x40

004058e8 <.LVL440>:
  4058e8:	e6f2      	b.n	4056d0 <.LVL375>

004058ea <.LBE27>:
  4058ea:	eeb4 8b48 	vcmp.f64	d8, d8
  4058ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4058f2:	f180 83e3 	bvs.w	4060bc <.LBE70>
  4058f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4058f8:	2b61      	cmp	r3, #97	; 0x61
  4058fa:	f000 82b8 	beq.w	405e6e <.LVL595+0xa>
  4058fe:	2b41      	cmp	r3, #65	; 0x41
  405900:	f000 8178 	beq.w	405bf4 <.LVL523>
  405904:	9b04      	ldr	r3, [sp, #16]
  405906:	3301      	adds	r3, #1
  405908:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40590a:	f023 0520 	bic.w	r5, r3, #32
  40590e:	f000 839d 	beq.w	40604c <.LBE69>
  405912:	2d47      	cmp	r5, #71	; 0x47
  405914:	d104      	bne.n	405920 <.LBB28>
  405916:	9b04      	ldr	r3, [sp, #16]
  405918:	2b00      	cmp	r3, #0
  40591a:	bf08      	it	eq
  40591c:	2301      	moveq	r3, #1
  40591e:	9304      	str	r3, [sp, #16]

00405920 <.LBB28>:
  405920:	ee18 3a90 	vmov	r3, s17

00405924 <.LBE28>:
  405924:	f448 7280 	orr.w	r2, r8, #256	; 0x100

00405928 <.LBB43>:
  405928:	2b00      	cmp	r3, #0

0040592a <.LBE43>:
  40592a:	9202      	str	r2, [sp, #8]

0040592c <.LBB44>:
  40592c:	f04f 0300 	mov.w	r3, #0
  405930:	f2c0 82b8 	blt.w	405ea4 <.LBB62>
  405934:	eeb0 ab48 	vmov.f64	d10, d8
  405938:	9306      	str	r3, [sp, #24]
  40593a:	9309      	str	r3, [sp, #36]	; 0x24

0040593c <.LVL445>:
  40593c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40593e:	2b66      	cmp	r3, #102	; 0x66
  405940:	f000 82ef 	beq.w	405f22 <.LBB64>
  405944:	2b46      	cmp	r3, #70	; 0x46
  405946:	f000 83d8 	beq.w	4060fa <.LBB71>
  40594a:	eeb0 0b4a 	vmov.f64	d0, d10
  40594e:	2d45      	cmp	r5, #69	; 0x45
  405950:	bf0a      	itet	eq
  405952:	9b04      	ldreq	r3, [sp, #16]
  405954:	9c04      	ldrne	r4, [sp, #16]
  405956:	1c5c      	addeq	r4, r3, #1

00405958 <.LVL446>:
  405958:	aa20      	add	r2, sp, #128	; 0x80

0040595a <.LVL447>:
  40595a:	ab1d      	add	r3, sp, #116	; 0x74
  40595c:	9201      	str	r2, [sp, #4]
  40595e:	9300      	str	r3, [sp, #0]
  405960:	4622      	mov	r2, r4
  405962:	ab1c      	add	r3, sp, #112	; 0x70

00405964 <.LVL448>:
  405964:	2102      	movs	r1, #2
  405966:	4658      	mov	r0, fp
  405968:	f004 faf2 	bl	409f50 <_dtoa_r>

0040596c <.LVL449>:
  40596c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40596e:	2b67      	cmp	r3, #103	; 0x67
  405970:	4606      	mov	r6, r0

00405972 <.LVL450>:
  405972:	f040 8395 	bne.w	4060a0 <.LBB70>
  405976:	f018 0f01 	tst.w	r8, #1
  40597a:	f040 8343 	bne.w	406004 <.LBB66>

0040597e <.LVL451>:
  40597e:	9b20      	ldr	r3, [sp, #128]	; 0x80

00405980 <.LVL452>:
  405980:	46c6      	mov	lr, r8
  405982:	1b9b      	subs	r3, r3, r6
  405984:	f8dd 8008 	ldr.w	r8, [sp, #8]
  405988:	930f      	str	r3, [sp, #60]	; 0x3c

0040598a <.LBE44>:
  40598a:	2d47      	cmp	r5, #71	; 0x47
  40598c:	f000 81cf 	beq.w	405d2e <.LVL554>
  405990:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405992:	2b46      	cmp	r3, #70	; 0x46
  405994:	f000 82b3 	beq.w	405efe <.LVL607>
  405998:	2b65      	cmp	r3, #101	; 0x65
  40599a:	f340 8412 	ble.w	4061c2 <.LVL694>
  40599e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4059a0:	2b66      	cmp	r3, #102	; 0x66
  4059a2:	f000 82ac 	beq.w	405efe <.LVL607>
  4059a6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  4059a8:	930e      	str	r3, [sp, #56]	; 0x38

004059aa <.LVL454>:
  4059aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4059ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4059ae:	4619      	mov	r1, r3
  4059b0:	4291      	cmp	r1, r2
  4059b2:	4613      	mov	r3, r2
  4059b4:	f300 8260 	bgt.w	405e78 <.LVL596>

004059b8 <.LVL455>:
  4059b8:	f01e 0f01 	tst.w	lr, #1
  4059bc:	f000 8363 	beq.w	406086 <.LVL655>
  4059c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4059c2:	4413      	add	r3, r2
  4059c4:	9308      	str	r3, [sp, #32]

004059c6 <.LVL456>:
  4059c6:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  4059ca:	f000 8310 	beq.w	405fee <.LVL635>
  4059ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4059d0:	2b00      	cmp	r3, #0
  4059d2:	f340 830c 	ble.w	405fee <.LVL635>
  4059d6:	2367      	movs	r3, #103	; 0x67
  4059d8:	930d      	str	r3, [sp, #52]	; 0x34

004059da <.LVL457>:
  4059da:	9812      	ldr	r0, [sp, #72]	; 0x48
  4059dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4059de:	2300      	movs	r3, #0
  4059e0:	9313      	str	r3, [sp, #76]	; 0x4c
  4059e2:	9310      	str	r3, [sp, #64]	; 0x40
  4059e4:	7803      	ldrb	r3, [r0, #0]

004059e6 <.LVL458>:
  4059e6:	2bff      	cmp	r3, #255	; 0xff
  4059e8:	d00e      	beq.n	405a08 <.LVL461+0x8>
  4059ea:	429a      	cmp	r2, r3
  4059ec:	dd0c      	ble.n	405a08 <.LVL461+0x8>
  4059ee:	7841      	ldrb	r1, [r0, #1]
  4059f0:	1ad2      	subs	r2, r2, r3
  4059f2:	2900      	cmp	r1, #0
  4059f4:	f000 8184 	beq.w	405d00 <.LBE50>
  4059f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4059fa:	3301      	adds	r3, #1
  4059fc:	9310      	str	r3, [sp, #64]	; 0x40

004059fe <.LVL460>:
  4059fe:	460b      	mov	r3, r1

00405a00 <.LVL461>:
  405a00:	2bff      	cmp	r3, #255	; 0xff
  405a02:	f100 0001 	add.w	r0, r0, #1
  405a06:	d1f0      	bne.n	4059ea <.LVL458+0x4>
  405a08:	920e      	str	r2, [sp, #56]	; 0x38
  405a0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405a0c:	9a13      	ldr	r2, [sp, #76]	; 0x4c

00405a0e <.LVL463>:
  405a0e:	9908      	ldr	r1, [sp, #32]
  405a10:	9012      	str	r0, [sp, #72]	; 0x48
  405a12:	4413      	add	r3, r2
  405a14:	9a18      	ldr	r2, [sp, #96]	; 0x60
  405a16:	fb02 1303 	mla	r3, r2, r3, r1
  405a1a:	9308      	str	r3, [sp, #32]

00405a1c <.LVL464>:
  405a1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31

00405a20 <.LVL465>:
  405a20:	9302      	str	r3, [sp, #8]

00405a22 <.LVL466>:
  405a22:	9b06      	ldr	r3, [sp, #24]
  405a24:	2b00      	cmp	r3, #0
  405a26:	f040 817b 	bne.w	405d20 <.LVL552>
  405a2a:	9304      	str	r3, [sp, #16]

00405a2c <.LVL467>:
  405a2c:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  405a30:	f7ff b8c7 	b.w	404bc2 <.L59>

00405a34 <.LVL468>:
  405a34:	f025 0507 	bic.w	r5, r5, #7
  405a38:	f105 0308 	add.w	r3, r5, #8
  405a3c:	ed95 8b00 	vldr	d8, [r5]

00405a40 <.LVL469>:
  405a40:	930a      	str	r3, [sp, #40]	; 0x28

00405a42 <.LVL470>:
  405a42:	f7ff bb11 	b.w	405068 <.LVL189>

00405a46 <.LVL471>:
  405a46:	464c      	mov	r4, r9
  405a48:	4689      	mov	r9, r1

00405a4a <.LBB20>:
  405a4a:	3201      	adds	r2, #1
  405a4c:	4423      	add	r3, r4
  405a4e:	2a07      	cmp	r2, #7
  405a50:	9324      	str	r3, [sp, #144]	; 0x90
  405a52:	9223      	str	r2, [sp, #140]	; 0x8c
  405a54:	f8c9 a000 	str.w	sl, [r9]
  405a58:	f8c9 4004 	str.w	r4, [r9, #4]
  405a5c:	f73f ae0e 	bgt.w	40567c <.LBB15>

00405a60 <.LVL473>:
  405a60:	f109 0908 	add.w	r9, r9, #8

00405a64 <.LVL474>:
  405a64:	e615      	b.n	405692 <.LBE15>

00405a66 <.LBB21>:
  405a66:	aa22      	add	r2, sp, #136	; 0x88
  405a68:	4629      	mov	r1, r5

00405a6a <.LVL476>:
  405a6a:	4658      	mov	r0, fp
  405a6c:	f011 fdae 	bl	4175cc <.LFE224>

00405a70 <.LVL477>:
  405a70:	2800      	cmp	r0, #0
  405a72:	f47f a831 	bne.w	404ad8 <.L189>
  405a76:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405a78:	9824      	ldr	r0, [sp, #144]	; 0x90

00405a7a <.LVL478>:
  405a7a:	781b      	ldrb	r3, [r3, #0]
  405a7c:	a925      	add	r1, sp, #148	; 0x94

00405a7e <.LVL479>:
  405a7e:	e649      	b.n	405714 <.LVL382>

00405a80 <.LBE21>:
  405a80:	aa22      	add	r2, sp, #136	; 0x88
  405a82:	9905      	ldr	r1, [sp, #20]
  405a84:	4658      	mov	r0, fp
  405a86:	f011 fda1 	bl	4175cc <.LFE224>

00405a8a <.LVL481>:
  405a8a:	2800      	cmp	r0, #0
  405a8c:	f47f a824 	bne.w	404ad8 <.L189>

00405a90 <.LVL482>:
  405a90:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00405a94 <.LVL483>:
  405a94:	f7ff bbb2 	b.w	4051fc <.LVL230>

00405a98 <.LBB22>:
  405a98:	aa22      	add	r2, sp, #136	; 0x88
  405a9a:	4629      	mov	r1, r5
  405a9c:	4658      	mov	r0, fp
  405a9e:	f011 fd95 	bl	4175cc <.LFE224>

00405aa2 <.LVL485>:
  405aa2:	2800      	cmp	r0, #0
  405aa4:	f47f a818 	bne.w	404ad8 <.L189>
  405aa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405aaa:	9824      	ldr	r0, [sp, #144]	; 0x90

00405aac <.LVL486>:
  405aac:	781b      	ldrb	r3, [r3, #0]
  405aae:	a925      	add	r1, sp, #148	; 0x94

00405ab0 <.LBE22>:
  405ab0:	441e      	add	r6, r3
  405ab2:	e664      	b.n	40577e <.LBE18+0x2>

00405ab4 <.LBE46>:
  405ab4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  405ab6:	48c2      	ldr	r0, [pc, #776]	; (405dc0 <.LVL571+0x2>)
  405ab8:	f8c9 0000 	str.w	r0, [r9]
  405abc:	3201      	adds	r2, #1
  405abe:	3301      	adds	r3, #1
  405ac0:	2001      	movs	r0, #1
  405ac2:	2a07      	cmp	r2, #7
  405ac4:	9324      	str	r3, [sp, #144]	; 0x90
  405ac6:	9223      	str	r2, [sp, #140]	; 0x8c
  405ac8:	f8c9 0004 	str.w	r0, [r9, #4]
  405acc:	f300 8085 	bgt.w	405bda <.LVL519>

00405ad0 <.LVL490>:
  405ad0:	f109 0908 	add.w	r9, r9, #8

00405ad4 <.LVL491>:
  405ad4:	b929      	cbnz	r1, 405ae2 <.LVL491+0xe>
  405ad6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405ad8:	b91a      	cbnz	r2, 405ae2 <.LVL491+0xe>
  405ada:	f018 0f01 	tst.w	r8, #1
  405ade:	f43f a933 	beq.w	404d48 <.LVL104>
  405ae2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  405ae4:	9c15      	ldr	r4, [sp, #84]	; 0x54

00405ae6 <.LVL492>:
  405ae6:	9817      	ldr	r0, [sp, #92]	; 0x5c
  405ae8:	f8c9 0000 	str.w	r0, [r9]
  405aec:	3201      	adds	r2, #1
  405aee:	4423      	add	r3, r4
  405af0:	2a07      	cmp	r2, #7
  405af2:	9324      	str	r3, [sp, #144]	; 0x90

00405af4 <.LVL493>:
  405af4:	f8c9 4004 	str.w	r4, [r9, #4]
  405af8:	9223      	str	r2, [sp, #140]	; 0x8c
  405afa:	f300 826a 	bgt.w	405fd2 <.LVL632>
  405afe:	f109 0908 	add.w	r9, r9, #8

00405b02 <.LVL494>:
  405b02:	2900      	cmp	r1, #0
  405b04:	f2c0 8244 	blt.w	405f90 <.LBE24>

00405b08 <.LVL495>:
  405b08:	980f      	ldr	r0, [sp, #60]	; 0x3c
  405b0a:	f8c9 6000 	str.w	r6, [r9]
  405b0e:	3201      	adds	r2, #1
  405b10:	4403      	add	r3, r0
  405b12:	2a07      	cmp	r2, #7
  405b14:	9324      	str	r3, [sp, #144]	; 0x90

00405b16 <.LVL496>:
  405b16:	9223      	str	r2, [sp, #140]	; 0x8c
  405b18:	f8c9 0004 	str.w	r0, [r9, #4]
  405b1c:	f77f a912 	ble.w	404d44 <.LVL103>
  405b20:	e434      	b.n	40538c <.LVL269>

00405b22 <.LDL1>:
  405b22:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405b24:	2b00      	cmp	r3, #0
  405b26:	f43e afdd 	beq.w	404ae4 <.LVL44>
  405b2a:	9c05      	ldr	r4, [sp, #20]
  405b2c:	9811      	ldr	r0, [sp, #68]	; 0x44
  405b2e:	aa22      	add	r2, sp, #136	; 0x88
  405b30:	4621      	mov	r1, r4
  405b32:	f011 fd4b 	bl	4175cc <.LFE224>

00405b36 <.LVL498>:
  405b36:	2800      	cmp	r0, #0
  405b38:	f43e afd4 	beq.w	404ae4 <.LVL44>
  405b3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405b40:	f7fe bfd3 	b.w	404aea <.LVL44+0x6>

00405b44 <.LVL499>:
  405b44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405b46:	9903      	ldr	r1, [sp, #12]
  405b48:	6813      	ldr	r3, [r2, #0]
  405b4a:	17cd      	asrs	r5, r1, #31
  405b4c:	4608      	mov	r0, r1
  405b4e:	3204      	adds	r2, #4

00405b50 <.LVL500>:
  405b50:	4629      	mov	r1, r5
  405b52:	920a      	str	r2, [sp, #40]	; 0x28
  405b54:	e9c3 0100 	strd	r0, r1, [r3]
  405b58:	463e      	mov	r6, r7

00405b5a <.LVL501>:
  405b5a:	f7fe bef4 	b.w	404946 <.LVL10>

00405b5e <.LVL502>:
  405b5e:	3304      	adds	r3, #4
  405b60:	8814      	ldrh	r4, [r2, #0]
  405b62:	930a      	str	r3, [sp, #40]	; 0x28

00405b64 <.LVL503>:
  405b64:	2500      	movs	r5, #0
  405b66:	f7ff b960 	b.w	404e2a <.LVL126>

00405b6a <.LVL504>:
  405b6a:	8814      	ldrh	r4, [r2, #0]
  405b6c:	3204      	adds	r2, #4
  405b6e:	2500      	movs	r5, #0
  405b70:	2301      	movs	r3, #1
  405b72:	920a      	str	r2, [sp, #40]	; 0x28

00405b74 <.LVL505>:
  405b74:	f7fe bffd 	b.w	404b72 <.L150>

00405b78 <.LVL506>:
  405b78:	3304      	adds	r3, #4
  405b7a:	8814      	ldrh	r4, [r2, #0]
  405b7c:	930a      	str	r3, [sp, #40]	; 0x28

00405b7e <.LVL507>:
  405b7e:	2500      	movs	r5, #0
  405b80:	f7fe bfe5 	b.w	404b4e <.LVL51>

00405b84 <.LVL508>:
  405b84:	980a      	ldr	r0, [sp, #40]	; 0x28
  405b86:	f9b0 4000 	ldrsh.w	r4, [r0]
  405b8a:	f7ff b979 	b.w	404e80 <.LVL136>

00405b8e <.LVL509>:
  405b8e:	aa22      	add	r2, sp, #136	; 0x88
  405b90:	9905      	ldr	r1, [sp, #20]
  405b92:	4658      	mov	r0, fp
  405b94:	f011 fd1a 	bl	4175cc <.LFE224>

00405b98 <.LVL510>:
  405b98:	2800      	cmp	r0, #0
  405b9a:	f47e af9d 	bne.w	404ad8 <.L189>
  405b9e:	9b24      	ldr	r3, [sp, #144]	; 0x90

00405ba0 <.LVL511>:
  405ba0:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00405ba4 <.LVL512>:
  405ba4:	f7ff bb43 	b.w	40522e <.LVL233>

00405ba8 <.LVL513>:
  405ba8:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
  405bac:	783b      	ldrb	r3, [r7, #0]
  405bae:	f7fe befa 	b.w	4049a6 <.LVL22>

00405bb2 <.LBB47>:
  405bb2:	f018 0f01 	tst.w	r8, #1
  405bb6:	f43f ae0b 	beq.w	4057d0 <.LBB19>
  405bba:	e5f9      	b.n	4057b0 <.LVL403+0xa>

00405bbc <.LBE47>:
  405bbc:	2140      	movs	r1, #64	; 0x40
  405bbe:	9811      	ldr	r0, [sp, #68]	; 0x44

00405bc0 <.LVL517>:
  405bc0:	f008 f932 	bl	40de28 <.LFE183>

00405bc4 <.LVL518>:
  405bc4:	9a05      	ldr	r2, [sp, #20]
  405bc6:	6010      	str	r0, [r2, #0]
  405bc8:	6110      	str	r0, [r2, #16]
  405bca:	2800      	cmp	r0, #0
  405bcc:	f000 82f1 	beq.w	4061b2 <.LBE76>
  405bd0:	9a05      	ldr	r2, [sp, #20]
  405bd2:	2340      	movs	r3, #64	; 0x40
  405bd4:	6153      	str	r3, [r2, #20]
  405bd6:	f7fe bea0 	b.w	40491a <.LVL6>

00405bda <.LVL519>:
  405bda:	aa22      	add	r2, sp, #136	; 0x88
  405bdc:	9905      	ldr	r1, [sp, #20]
  405bde:	4658      	mov	r0, fp
  405be0:	f011 fcf4 	bl	4175cc <.LFE224>

00405be4 <.LVL520>:
  405be4:	2800      	cmp	r0, #0
  405be6:	f47e af77 	bne.w	404ad8 <.L189>
  405bea:	991c      	ldr	r1, [sp, #112]	; 0x70
  405bec:	9b24      	ldr	r3, [sp, #144]	; 0x90

00405bee <.LVL521>:
  405bee:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00405bf2 <.LVL522>:
  405bf2:	e76f      	b.n	405ad4 <.LVL491>

00405bf4 <.LVL523>:
  405bf4:	2330      	movs	r3, #48	; 0x30
  405bf6:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
  405bfa:	2358      	movs	r3, #88	; 0x58
  405bfc:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
  405c00:	9b04      	ldr	r3, [sp, #16]
  405c02:	2b63      	cmp	r3, #99	; 0x63
  405c04:	f048 0402 	orr.w	r4, r8, #2

00405c08 <.LVL524>:
  405c08:	f300 8240 	bgt.w	40608c <.LVL656>
  405c0c:	2300      	movs	r3, #0
  405c0e:	9309      	str	r3, [sp, #36]	; 0x24
  405c10:	ae35      	add	r6, sp, #212	; 0xd4

00405c12 <.LBB48>:
  405c12:	ee18 3a90 	vmov	r3, s17
  405c16:	2b00      	cmp	r3, #0
  405c18:	9b0d      	ldr	r3, [sp, #52]	; 0x34

00405c1a <.LBE48>:
  405c1a:	f448 7281 	orr.w	r2, r8, #258	; 0x102
  405c1e:	9202      	str	r2, [sp, #8]

00405c20 <.LBB49>:
  405c20:	46a0      	mov	r8, r4
  405c22:	f023 0520 	bic.w	r5, r3, #32
  405c26:	f2c0 813e 	blt.w	405ea6 <.LVL602>
  405c2a:	eeb0 ab48 	vmov.f64	d10, d8
  405c2e:	2300      	movs	r3, #0
  405c30:	9306      	str	r3, [sp, #24]

00405c32 <.LVL527>:
  405c32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405c34:	2b61      	cmp	r3, #97	; 0x61
  405c36:	f000 81ec 	beq.w	406012 <.LBB68>
  405c3a:	2b41      	cmp	r3, #65	; 0x41
  405c3c:	f47f ae7e 	bne.w	40593c <.LVL445>
  405c40:	eeb0 0b4a 	vmov.f64	d0, d10
  405c44:	a81c      	add	r0, sp, #112	; 0x70

00405c46 <.LVL528>:
  405c46:	f015 f967 	bl	41af18 <frexp>

00405c4a <.LVL529>:
  405c4a:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
  405c4e:	ee20 0b07 	vmul.f64	d0, d0, d7

00405c52 <.LVL530>:
  405c52:	eeb5 0b40 	vcmp.f64	d0, #0.0
  405c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405c5a:	d101      	bne.n	405c60 <.LVL530+0xe>
  405c5c:	2301      	movs	r3, #1
  405c5e:	931c      	str	r3, [sp, #112]	; 0x70
  405c60:	4c58      	ldr	r4, [pc, #352]	; (405dc4 <.LVL571+0x6>)

00405c62 <.LVL531>:
  405c62:	9b04      	ldr	r3, [sp, #16]
  405c64:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
  405c68:	3b01      	subs	r3, #1
  405c6a:	4631      	mov	r1, r6
  405c6c:	e005      	b.n	405c7a <.LVL533>

00405c6e <.LVL532>:
  405c6e:	eeb5 0b40 	vcmp.f64	d0, #0.0
  405c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405c76:	d014      	beq.n	405ca2 <.LVL536+0x6>
  405c78:	4611      	mov	r1, r2

00405c7a <.LVL533>:
  405c7a:	ee20 0b05 	vmul.f64	d0, d0, d5
  405c7e:	eefd 6bc0 	vcvt.s32.f64	s13, d0

00405c82 <.LVL535>:
  405c82:	460a      	mov	r2, r1
  405c84:	ee16 0a90 	vmov	r0, s13
  405c88:	f1b3 3fff 	cmp.w	r3, #4294967295
  405c8c:	5c20      	ldrb	r0, [r4, r0]
  405c8e:	f802 0b01 	strb.w	r0, [r2], #1
  405c92:	eeb8 7be6 	vcvt.f64.s32	d7, s13
  405c96:	4618      	mov	r0, r3
  405c98:	ee30 0b47 	vsub.f64	d0, d0, d7

00405c9c <.LVL536>:
  405c9c:	f103 33ff 	add.w	r3, r3, #4294967295
  405ca0:	d1e5      	bne.n	405c6e <.LVL532>
  405ca2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
  405ca6:	eeb4 0bc7 	vcmpe.f64	d0, d7
  405caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405cae:	f300 80ff 	bgt.w	405eb0 <.LVL604>
  405cb2:	eeb4 0b47 	vcmp.f64	d0, d7
  405cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405cba:	d104      	bne.n	405cc6 <.LVL537>
  405cbc:	ee16 3a90 	vmov	r3, s13
  405cc0:	07db      	lsls	r3, r3, #31
  405cc2:	f100 80f5 	bmi.w	405eb0 <.LVL604>

00405cc6 <.LVL537>:
  405cc6:	2800      	cmp	r0, #0
  405cc8:	db07      	blt.n	405cda <.LVL541>
  405cca:	1814      	adds	r4, r2, r0

00405ccc <.LVL538>:
  405ccc:	2330      	movs	r3, #48	; 0x30

00405cce <.LVL539>:
  405cce:	f801 3f01 	strb.w	r3, [r1, #1]!

00405cd2 <.LVL540>:
  405cd2:	42a1      	cmp	r1, r4
  405cd4:	d1fb      	bne.n	405cce <.LVL539>
  405cd6:	3001      	adds	r0, #1
  405cd8:	4402      	add	r2, r0

00405cda <.LVL541>:
  405cda:	1b93      	subs	r3, r2, r6
  405cdc:	46c6      	mov	lr, r8
  405cde:	930f      	str	r3, [sp, #60]	; 0x3c

00405ce0 <.LVL542>:
  405ce0:	f8dd 8008 	ldr.w	r8, [sp, #8]
  405ce4:	e651      	b.n	40598a <.LBE44>

00405ce6 <.LBB50>:
  405ce6:	aa22      	add	r2, sp, #136	; 0x88
  405ce8:	9905      	ldr	r1, [sp, #20]
  405cea:	4658      	mov	r0, fp
  405cec:	f011 fc6e 	bl	4175cc <.LFE224>

00405cf0 <.LVL544>:
  405cf0:	2800      	cmp	r0, #0
  405cf2:	f47e aef1 	bne.w	404ad8 <.L189>
  405cf6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  405cf8:	9b24      	ldr	r3, [sp, #144]	; 0x90

00405cfa <.LVL545>:
  405cfa:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00405cfe <.LVL546>:
  405cfe:	e567      	b.n	4057d0 <.LBB19>

00405d00 <.LBE50>:
  405d00:	9913      	ldr	r1, [sp, #76]	; 0x4c
  405d02:	3101      	adds	r1, #1
  405d04:	9113      	str	r1, [sp, #76]	; 0x4c

00405d06 <.LVL548>:
  405d06:	e66e      	b.n	4059e6 <.LVL458>

00405d08 <.LVL549>:
  405d08:	4630      	mov	r0, r6
  405d0a:	9404      	str	r4, [sp, #16]
  405d0c:	f012 f878 	bl	417e00 <strlen>

00405d10 <.LVL550>:
  405d10:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
  405d14:	9008      	str	r0, [sp, #32]

00405d16 <.LVL551>:
  405d16:	950a      	str	r5, [sp, #40]	; 0x28
  405d18:	9202      	str	r2, [sp, #8]
  405d1a:	4623      	mov	r3, r4
  405d1c:	f7ff b96b 	b.w	404ff6 <.LBE12>

00405d20 <.LVL552>:
  405d20:	222d      	movs	r2, #45	; 0x2d
  405d22:	2300      	movs	r3, #0
  405d24:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
  405d28:	9304      	str	r3, [sp, #16]

00405d2a <.LVL553>:
  405d2a:	f7fe bf4b 	b.w	404bc4 <.LVL63>

00405d2e <.LVL554>:
  405d2e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  405d30:	930e      	str	r3, [sp, #56]	; 0x38
  405d32:	1cda      	adds	r2, r3, #3
  405d34:	db03      	blt.n	405d3e <.LVL555>
  405d36:	9a04      	ldr	r2, [sp, #16]
  405d38:	4293      	cmp	r3, r2
  405d3a:	f77f ae36 	ble.w	4059aa <.LVL454>

00405d3e <.LVL555>:
  405d3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405d40:	3b02      	subs	r3, #2

00405d42 <.LVL556>:
  405d42:	930d      	str	r3, [sp, #52]	; 0x34
  405d44:	f023 0520 	bic.w	r5, r3, #32

00405d48 <.LVL557>:
  405d48:	9b0e      	ldr	r3, [sp, #56]	; 0x38

00405d4a <.LBB51>:
  405d4a:	2d41      	cmp	r5, #65	; 0x41

00405d4c <.LBE51>:
  405d4c:	f103 33ff 	add.w	r3, r3, #4294967295
  405d50:	931c      	str	r3, [sp, #112]	; 0x70

00405d52 <.LBB59>:
  405d52:	f000 8159 	beq.w	406008 <.LBB67>

00405d56 <.LVL559>:
  405d56:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
  405d5a:	2100      	movs	r1, #0

00405d5c <.LVL560>:
  405d5c:	2b00      	cmp	r3, #0
  405d5e:	bfb8      	it	lt
  405d60:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38

00405d62 <.LVL561>:
  405d62:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  405d66:	bfba      	itte	lt
  405d68:	f1c3 0301 	rsblt	r3, r3, #1

00405d6c <.LVL562>:
  405d6c:	222d      	movlt	r2, #45	; 0x2d
  405d6e:	222b      	movge	r2, #43	; 0x2b
  405d70:	2b09      	cmp	r3, #9
  405d72:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79

00405d76 <.LVL563>:
  405d76:	f340 815d 	ble.w	406034 <.LBB69>
  405d7a:	f10d 0487 	add.w	r4, sp, #135	; 0x87

00405d7e <.LVL564>:
  405d7e:	4620      	mov	r0, r4
  405d80:	4d11      	ldr	r5, [pc, #68]	; (405dc8 <.LVL571+0xa>)
  405d82:	e000      	b.n	405d86 <.LVL566>

00405d84 <.LVL565>:
  405d84:	4610      	mov	r0, r2

00405d86 <.LVL566>:
  405d86:	fb85 1203 	smull	r1, r2, r5, r3
  405d8a:	17d9      	asrs	r1, r3, #31
  405d8c:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  405d90:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  405d94:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  405d98:	3230      	adds	r2, #48	; 0x30
  405d9a:	2909      	cmp	r1, #9
  405d9c:	f800 2c01 	strb.w	r2, [r0, #-1]
  405da0:	460b      	mov	r3, r1

00405da2 <.LVL567>:
  405da2:	f100 32ff 	add.w	r2, r0, #4294967295

00405da6 <.LVL568>:
  405da6:	dced      	bgt.n	405d84 <.LVL565>

00405da8 <.LVL569>:
  405da8:	3330      	adds	r3, #48	; 0x30
  405daa:	3802      	subs	r0, #2
  405dac:	b2db      	uxtb	r3, r3
  405dae:	4284      	cmp	r4, r0
  405db0:	f802 3c01 	strb.w	r3, [r2, #-1]
  405db4:	f240 81fa 	bls.w	4061ac <.LBB76>
  405db8:	f10d 007a 	add.w	r0, sp, #122	; 0x7a

00405dbc <.LVL570>:
  405dbc:	4611      	mov	r1, r2

00405dbe <.LVL571>:
  405dbe:	e007      	b.n	405dd0 <.LVL573>
  405dc0:	0041c7f0 	.word	0x0041c7f0
  405dc4:	0041c7c0 	.word	0x0041c7c0
  405dc8:	66666667 	.word	0x66666667

00405dcc <.LVL572>:
  405dcc:	f811 3b01 	ldrb.w	r3, [r1], #1

00405dd0 <.LVL573>:
  405dd0:	f800 3b01 	strb.w	r3, [r0], #1

00405dd4 <.LVL574>:
  405dd4:	428c      	cmp	r4, r1
  405dd6:	d1f9      	bne.n	405dcc <.LVL572>
  405dd8:	3401      	adds	r4, #1
  405dda:	1aa2      	subs	r2, r4, r2

00405ddc <.LVL575>:
  405ddc:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
  405de0:	441a      	add	r2, r3

00405de2 <.LVL576>:
  405de2:	ab1e      	add	r3, sp, #120	; 0x78

00405de4 <.LVL577>:
  405de4:	1ad3      	subs	r3, r2, r3

00405de6 <.LBE59>:
  405de6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c

00405de8 <.LBB60>:
  405de8:	9319      	str	r3, [sp, #100]	; 0x64

00405dea <.LBE60>:
  405dea:	2a01      	cmp	r2, #1
  405dec:	4413      	add	r3, r2
  405dee:	9308      	str	r3, [sp, #32]

00405df0 <.LVL581>:
  405df0:	f340 81ad 	ble.w	40614e <.LBE72>
  405df4:	9b08      	ldr	r3, [sp, #32]

00405df6 <.LVL582>:
  405df6:	9a15      	ldr	r2, [sp, #84]	; 0x54
  405df8:	4413      	add	r3, r2
  405dfa:	9308      	str	r3, [sp, #32]
  405dfc:	2300      	movs	r3, #0
  405dfe:	9313      	str	r3, [sp, #76]	; 0x4c
  405e00:	9310      	str	r3, [sp, #64]	; 0x40
  405e02:	930e      	str	r3, [sp, #56]	; 0x38
  405e04:	9b08      	ldr	r3, [sp, #32]
  405e06:	f42e 6e80 	bic.w	lr, lr, #1024	; 0x400
  405e0a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405e0e:	f44e 7880 	orr.w	r8, lr, #256	; 0x100

00405e12 <.LVL584>:
  405e12:	9302      	str	r3, [sp, #8]
  405e14:	e605      	b.n	405a22 <.LVL466>

00405e16 <.LBB23>:
  405e16:	aa22      	add	r2, sp, #136	; 0x88
  405e18:	9905      	ldr	r1, [sp, #20]
  405e1a:	4658      	mov	r0, fp
  405e1c:	f011 fbd6 	bl	4175cc <.LFE224>

00405e20 <.LVL586>:
  405e20:	2800      	cmp	r0, #0
  405e22:	f47e ae59 	bne.w	404ad8 <.L189>
  405e26:	9b24      	ldr	r3, [sp, #144]	; 0x90

00405e28 <.LVL587>:
  405e28:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00405e2c <.LVL588>:
  405e2c:	f7ff bb29 	b.w	405482 <.LVL300>

00405e30 <.LBE23>:
  405e30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405e32:	6813      	ldr	r3, [r2, #0]
  405e34:	3204      	adds	r2, #4

00405e36 <.LVL590>:
  405e36:	920a      	str	r2, [sp, #40]	; 0x28
  405e38:	f8bd 200c 	ldrh.w	r2, [sp, #12]

00405e3c <.LVL591>:
  405e3c:	801a      	strh	r2, [r3, #0]
  405e3e:	463e      	mov	r6, r7

00405e40 <.LVL592>:
  405e40:	f7fe bd81 	b.w	404946 <.LVL10>

00405e44 <.LVL593>:
  405e44:	9b04      	ldr	r3, [sp, #16]
  405e46:	9613      	str	r6, [sp, #76]	; 0x4c
  405e48:	2b06      	cmp	r3, #6
  405e4a:	bf28      	it	cs
  405e4c:	2306      	movcs	r3, #6
  405e4e:	4632      	mov	r2, r6
  405e50:	9604      	str	r6, [sp, #16]
  405e52:	9610      	str	r6, [sp, #64]	; 0x40
  405e54:	960e      	str	r6, [sp, #56]	; 0x38
  405e56:	9609      	str	r6, [sp, #36]	; 0x24
  405e58:	9302      	str	r3, [sp, #8]

00405e5a <.LVL594>:
  405e5a:	950a      	str	r5, [sp, #40]	; 0x28
  405e5c:	9308      	str	r3, [sp, #32]
  405e5e:	4eae      	ldr	r6, [pc, #696]	; (406118 <.LVL671+0x2>)
  405e60:	f7fe beaf 	b.w	404bc2 <.L59>

00405e64 <.LVL595>:
  405e64:	222d      	movs	r2, #45	; 0x2d
  405e66:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
  405e6a:	f7ff b90d 	b.w	405088 <.LVL189+0x20>
  405e6e:	2330      	movs	r3, #48	; 0x30
  405e70:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
  405e74:	2378      	movs	r3, #120	; 0x78
  405e76:	e6c1      	b.n	405bfc <.LVL523+0x8>

00405e78 <.LVL596>:
  405e78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405e7a:	9a15      	ldr	r2, [sp, #84]	; 0x54
  405e7c:	4413      	add	r3, r2
  405e7e:	9308      	str	r3, [sp, #32]

00405e80 <.LVL597>:
  405e80:	9b0e      	ldr	r3, [sp, #56]	; 0x38

00405e82 <.LVL598>:
  405e82:	2b00      	cmp	r3, #0
  405e84:	f340 814e 	ble.w	406124 <.LBE71>
  405e88:	2367      	movs	r3, #103	; 0x67
  405e8a:	930d      	str	r3, [sp, #52]	; 0x34

00405e8c <.LVL599>:
  405e8c:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  405e90:	f47f ada3 	bne.w	4059da <.LVL457>
  405e94:	9b08      	ldr	r3, [sp, #32]
  405e96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405e9a:	9302      	str	r3, [sp, #8]

00405e9c <.LVL600>:
  405e9c:	2300      	movs	r3, #0
  405e9e:	9313      	str	r3, [sp, #76]	; 0x4c
  405ea0:	9310      	str	r3, [sp, #64]	; 0x40
  405ea2:	e5be      	b.n	405a22 <.LVL466>

00405ea4 <.LBB62>:
  405ea4:	9309      	str	r3, [sp, #36]	; 0x24

00405ea6 <.LVL602>:
  405ea6:	232d      	movs	r3, #45	; 0x2d
  405ea8:	9306      	str	r3, [sp, #24]
  405eaa:	eeb1 ab48 	vneg.f64	d10, d8

00405eae <.LVL603>:
  405eae:	e6c0      	b.n	405c32 <.LVL527>

00405eb0 <.LVL604>:
  405eb0:	9120      	str	r1, [sp, #128]	; 0x80
  405eb2:	f812 0c01 	ldrb.w	r0, [r2, #-1]

00405eb6 <.LVL605>:
  405eb6:	7be3      	ldrb	r3, [r4, #15]
  405eb8:	4283      	cmp	r3, r0
  405eba:	f040 8150 	bne.w	40615e <.LBB74>
  405ebe:	4613      	mov	r3, r2
  405ec0:	f04f 0e30 	mov.w	lr, #48	; 0x30
  405ec4:	f803 ec01 	strb.w	lr, [r3, #-1]
  405ec8:	9b20      	ldr	r3, [sp, #128]	; 0x80
  405eca:	1e59      	subs	r1, r3, #1
  405ecc:	9120      	str	r1, [sp, #128]	; 0x80
  405ece:	f813 1c01 	ldrb.w	r1, [r3, #-1]
  405ed2:	4281      	cmp	r1, r0
  405ed4:	d0f6      	beq.n	405ec4 <.LVL605+0xe>
  405ed6:	2939      	cmp	r1, #57	; 0x39
  405ed8:	bf16      	itet	ne
  405eda:	3101      	addne	r1, #1
  405edc:	7aa1      	ldrbeq	r1, [r4, #10]
  405ede:	b2c9      	uxtbne	r1, r1
  405ee0:	f803 1c01 	strb.w	r1, [r3, #-1]
  405ee4:	e6f9      	b.n	405cda <.LVL541>

00405ee6 <.LBB63>:
  405ee6:	9b04      	ldr	r3, [sp, #16]
  405ee8:	9302      	str	r3, [sp, #8]
  405eea:	9308      	str	r3, [sp, #32]

00405eec <.LBE63>:
  405eec:	9004      	str	r0, [sp, #16]
  405eee:	950a      	str	r5, [sp, #40]	; 0x28
  405ef0:	9013      	str	r0, [sp, #76]	; 0x4c
  405ef2:	9010      	str	r0, [sp, #64]	; 0x40
  405ef4:	900e      	str	r0, [sp, #56]	; 0x38
  405ef6:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  405efa:	f7fe be62 	b.w	404bc2 <.L59>

00405efe <.LVL607>:
  405efe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  405f00:	930e      	str	r3, [sp, #56]	; 0x38
  405f02:	2b00      	cmp	r3, #0
  405f04:	9b04      	ldr	r3, [sp, #16]
  405f06:	f340 812d 	ble.w	406164 <.LBE74>

00405f0a <.LVL608>:
  405f0a:	2b00      	cmp	r3, #0
  405f0c:	f040 80ec 	bne.w	4060e8 <.LVL665>
  405f10:	f01e 0f01 	tst.w	lr, #1
  405f14:	f040 80e8 	bne.w	4060e8 <.LVL665>
  405f18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405f1a:	9308      	str	r3, [sp, #32]
  405f1c:	2366      	movs	r3, #102	; 0x66
  405f1e:	930d      	str	r3, [sp, #52]	; 0x34
  405f20:	e7b4      	b.n	405e8c <.LVL599>

00405f22 <.LBB64>:
  405f22:	9c04      	ldr	r4, [sp, #16]
  405f24:	eeb0 0b4a 	vmov.f64	d0, d10
  405f28:	aa20      	add	r2, sp, #128	; 0x80

00405f2a <.LVL610>:
  405f2a:	ab1d      	add	r3, sp, #116	; 0x74
  405f2c:	9201      	str	r2, [sp, #4]
  405f2e:	9300      	str	r3, [sp, #0]
  405f30:	2103      	movs	r1, #3
  405f32:	ab1c      	add	r3, sp, #112	; 0x70

00405f34 <.LVL611>:
  405f34:	4622      	mov	r2, r4
  405f36:	4658      	mov	r0, fp
  405f38:	f004 f80a 	bl	409f50 <_dtoa_r>

00405f3c <.LVL612>:
  405f3c:	4606      	mov	r6, r0

00405f3e <.LVL613>:
  405f3e:	1901      	adds	r1, r0, r4

00405f40 <.LVL614>:
  405f40:	7833      	ldrb	r3, [r6, #0]
  405f42:	2b30      	cmp	r3, #48	; 0x30
  405f44:	f000 80f9 	beq.w	40613a <.LBB72>
  405f48:	9c1c      	ldr	r4, [sp, #112]	; 0x70

00405f4a <.LVL615>:
  405f4a:	4421      	add	r1, r4
  405f4c:	eeb5 ab40 	vcmp.f64	d10, #0.0
  405f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405f54:	d00b      	beq.n	405f6e <.LVL618>
  405f56:	9b20      	ldr	r3, [sp, #128]	; 0x80
  405f58:	4299      	cmp	r1, r3
  405f5a:	f67f ad11 	bls.w	405980 <.LVL452>
  405f5e:	2030      	movs	r0, #48	; 0x30

00405f60 <.LVL617>:
  405f60:	1c5a      	adds	r2, r3, #1
  405f62:	9220      	str	r2, [sp, #128]	; 0x80
  405f64:	7018      	strb	r0, [r3, #0]
  405f66:	9b20      	ldr	r3, [sp, #128]	; 0x80
  405f68:	4299      	cmp	r1, r3
  405f6a:	d8f9      	bhi.n	405f60 <.LVL617>
  405f6c:	e508      	b.n	405980 <.LVL452>

00405f6e <.LVL618>:
  405f6e:	460b      	mov	r3, r1
  405f70:	e506      	b.n	405980 <.LVL452>

00405f72 <.LBB24>:
  405f72:	aa22      	add	r2, sp, #136	; 0x88
  405f74:	9905      	ldr	r1, [sp, #20]
  405f76:	4658      	mov	r0, fp
  405f78:	f011 fb28 	bl	4175cc <.LFE224>

00405f7c <.LVL620>:
  405f7c:	2800      	cmp	r0, #0
  405f7e:	f47e adab 	bne.w	404ad8 <.L189>
  405f82:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  405f84:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405f86:	9b24      	ldr	r3, [sp, #144]	; 0x90

00405f88 <.LVL621>:
  405f88:	1a8a      	subs	r2, r1, r2
  405f8a:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00405f8e <.LVL622>:
  405f8e:	e436      	b.n	4057fe <.LVL409>

00405f90 <.LBE24>:
  405f90:	424c      	negs	r4, r1
  405f92:	3110      	adds	r1, #16

00405f94 <.LVL624>:
  405f94:	da5d      	bge.n	406052 <.LVL651>
  405f96:	2510      	movs	r5, #16
  405f98:	e004      	b.n	405fa4 <.LVL626+0x6>

00405f9a <.LVL625>:
  405f9a:	f109 0908 	add.w	r9, r9, #8

00405f9e <.LVL626>:
  405f9e:	3c10      	subs	r4, #16
  405fa0:	2c10      	cmp	r4, #16
  405fa2:	dd56      	ble.n	406052 <.LVL651>
  405fa4:	3201      	adds	r2, #1
  405fa6:	3310      	adds	r3, #16
  405fa8:	2a07      	cmp	r2, #7
  405faa:	9324      	str	r3, [sp, #144]	; 0x90

00405fac <.LVL629>:
  405fac:	9223      	str	r2, [sp, #140]	; 0x8c
  405fae:	f8c9 a000 	str.w	sl, [r9]
  405fb2:	f8c9 5004 	str.w	r5, [r9, #4]
  405fb6:	ddf0      	ble.n	405f9a <.LVL625>
  405fb8:	aa22      	add	r2, sp, #136	; 0x88
  405fba:	9905      	ldr	r1, [sp, #20]
  405fbc:	4658      	mov	r0, fp
  405fbe:	f011 fb05 	bl	4175cc <.LFE224>

00405fc2 <.LVL630>:
  405fc2:	2800      	cmp	r0, #0
  405fc4:	f47e ad88 	bne.w	404ad8 <.L189>
  405fc8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405fca:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  405fcc:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00405fd0 <.LVL631>:
  405fd0:	e7e5      	b.n	405f9e <.LVL626>

00405fd2 <.LVL632>:
  405fd2:	aa22      	add	r2, sp, #136	; 0x88
  405fd4:	9905      	ldr	r1, [sp, #20]
  405fd6:	4658      	mov	r0, fp
  405fd8:	f011 faf8 	bl	4175cc <.LFE224>

00405fdc <.LVL633>:
  405fdc:	2800      	cmp	r0, #0
  405fde:	f47e ad7b 	bne.w	404ad8 <.L189>
  405fe2:	991c      	ldr	r1, [sp, #112]	; 0x70
  405fe4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405fe6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  405fe8:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00405fec <.LVL634>:
  405fec:	e589      	b.n	405b02 <.LVL494>

00405fee <.LVL635>:
  405fee:	9b08      	ldr	r3, [sp, #32]
  405ff0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405ff4:	9302      	str	r3, [sp, #8]

00405ff6 <.LVL636>:
  405ff6:	2367      	movs	r3, #103	; 0x67
  405ff8:	930d      	str	r3, [sp, #52]	; 0x34
  405ffa:	e74f      	b.n	405e9c <.LVL600>

00405ffc <.LVL637>:
  405ffc:	2200      	movs	r2, #0
  405ffe:	9204      	str	r2, [sp, #16]
  406000:	f7fe bcd2 	b.w	4049a8 <.LVL22+0x2>

00406004 <.LBB66>:
  406004:	1931      	adds	r1, r6, r4

00406006 <.LVL639>:
  406006:	e7a1      	b.n	405f4c <.LVL615+0x2>

00406008 <.LBB67>:
  406008:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40600a:	320f      	adds	r2, #15
  40600c:	b2d2      	uxtb	r2, r2
  40600e:	2101      	movs	r1, #1
  406010:	e6a4      	b.n	405d5c <.LVL560>

00406012 <.LBB68>:
  406012:	eeb0 0b4a 	vmov.f64	d0, d10
  406016:	a81c      	add	r0, sp, #112	; 0x70

00406018 <.LVL642>:
  406018:	f014 ff7e 	bl	41af18 <frexp>

0040601c <.LVL643>:
  40601c:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
  406020:	ee20 0b07 	vmul.f64	d0, d0, d7

00406024 <.LVL644>:
  406024:	eeb5 0b40 	vcmp.f64	d0, #0.0
  406028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40602c:	f000 80af 	beq.w	40618e <.LBB75>
  406030:	4c3a      	ldr	r4, [pc, #232]	; (40611c <.LVL671+0x6>)
  406032:	e616      	b.n	405c62 <.LVL531>

00406034 <.LBB69>:
  406034:	2900      	cmp	r1, #0
  406036:	f040 808f 	bne.w	406158 <.LBB73>

0040603a <.LVL646>:
  40603a:	2230      	movs	r2, #48	; 0x30
  40603c:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
  406040:	f10d 027b 	add.w	r2, sp, #123	; 0x7b

00406044 <.LVL647>:
  406044:	3330      	adds	r3, #48	; 0x30

00406046 <.LVL648>:
  406046:	7013      	strb	r3, [r2, #0]
  406048:	3201      	adds	r2, #1
  40604a:	e6ca      	b.n	405de2 <.LVL576>

0040604c <.LBE69>:
  40604c:	2306      	movs	r3, #6
  40604e:	9304      	str	r3, [sp, #16]
  406050:	e466      	b.n	405920 <.LBB28>

00406052 <.LVL651>:
  406052:	3201      	adds	r2, #1
  406054:	4423      	add	r3, r4
  406056:	2a07      	cmp	r2, #7
  406058:	f8c9 a000 	str.w	sl, [r9]
  40605c:	f8c9 4004 	str.w	r4, [r9, #4]
  406060:	9324      	str	r3, [sp, #144]	; 0x90
  406062:	9223      	str	r2, [sp, #140]	; 0x8c
  406064:	f109 0908 	add.w	r9, r9, #8
  406068:	f77f ad4e 	ble.w	405b08 <.LVL495>
  40606c:	aa22      	add	r2, sp, #136	; 0x88
  40606e:	9905      	ldr	r1, [sp, #20]
  406070:	4658      	mov	r0, fp
  406072:	f011 faab 	bl	4175cc <.LFE224>

00406076 <.LVL653>:
  406076:	2800      	cmp	r0, #0
  406078:	f47e ad2e 	bne.w	404ad8 <.L189>
  40607c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40607e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  406080:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00406084 <.LVL654>:
  406084:	e540      	b.n	405b08 <.LVL495>

00406086 <.LVL655>:
  406086:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406088:	9308      	str	r3, [sp, #32]
  40608a:	e49c      	b.n	4059c6 <.LVL456>

0040608c <.LVL656>:
  40608c:	1c59      	adds	r1, r3, #1
  40608e:	4658      	mov	r0, fp
  406090:	f007 feca 	bl	40de28 <.LFE183>

00406094 <.LVL657>:
  406094:	4606      	mov	r6, r0

00406096 <.LVL658>:
  406096:	2800      	cmp	r0, #0
  406098:	f000 8096 	beq.w	4061c8 <.LVL695>
  40609c:	9009      	str	r0, [sp, #36]	; 0x24
  40609e:	e5b8      	b.n	405c12 <.LBB48>

004060a0 <.LBB70>:
  4060a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4060a2:	2b47      	cmp	r3, #71	; 0x47
  4060a4:	d1ae      	bne.n	406004 <.LBB66>
  4060a6:	f018 0f01 	tst.w	r8, #1
  4060aa:	f43f ac68 	beq.w	40597e <.LVL451>
  4060ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4060b0:	2b46      	cmp	r3, #70	; 0x46
  4060b2:	eb06 0104 	add.w	r1, r6, r4

004060b6 <.LVL660>:
  4060b6:	f43f af43 	beq.w	405f40 <.LVL614>
  4060ba:	e747      	b.n	405f4c <.LVL615+0x2>

004060bc <.LBE70>:
  4060bc:	4e18      	ldr	r6, [pc, #96]	; (406120 <.LVL671+0xa>)

004060be <.LVL662>:
  4060be:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  4060c0:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  4060c4:	2300      	movs	r3, #0
  4060c6:	4619      	mov	r1, r3
  4060c8:	2003      	movs	r0, #3
  4060ca:	9309      	str	r3, [sp, #36]	; 0x24
  4060cc:	1f33      	subs	r3, r6, #4
  4060ce:	9104      	str	r1, [sp, #16]
  4060d0:	9002      	str	r0, [sp, #8]
  4060d2:	f028 0880 	bic.w	r8, r8, #128	; 0x80

004060d6 <.LVL663>:
  4060d6:	2c47      	cmp	r4, #71	; 0x47
  4060d8:	bfd8      	it	le
  4060da:	461e      	movle	r6, r3

004060dc <.LVL664>:
  4060dc:	9113      	str	r1, [sp, #76]	; 0x4c
  4060de:	9110      	str	r1, [sp, #64]	; 0x40
  4060e0:	910e      	str	r1, [sp, #56]	; 0x38
  4060e2:	9008      	str	r0, [sp, #32]
  4060e4:	f7fe bd6d 	b.w	404bc2 <.L59>

004060e8 <.LVL665>:
  4060e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4060ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4060ec:	4413      	add	r3, r2
  4060ee:	9a04      	ldr	r2, [sp, #16]
  4060f0:	441a      	add	r2, r3
  4060f2:	2366      	movs	r3, #102	; 0x66
  4060f4:	9208      	str	r2, [sp, #32]

004060f6 <.LVL666>:
  4060f6:	930d      	str	r3, [sp, #52]	; 0x34
  4060f8:	e6c8      	b.n	405e8c <.LVL599>

004060fa <.LBB71>:
  4060fa:	9c04      	ldr	r4, [sp, #16]
  4060fc:	eeb0 0b4a 	vmov.f64	d0, d10
  406100:	aa20      	add	r2, sp, #128	; 0x80

00406102 <.LVL668>:
  406102:	ab1d      	add	r3, sp, #116	; 0x74
  406104:	9201      	str	r2, [sp, #4]
  406106:	9300      	str	r3, [sp, #0]
  406108:	4622      	mov	r2, r4
  40610a:	ab1c      	add	r3, sp, #112	; 0x70

0040610c <.LVL669>:
  40610c:	2103      	movs	r1, #3
  40610e:	4658      	mov	r0, fp
  406110:	f003 ff1e 	bl	409f50 <_dtoa_r>

00406114 <.LVL670>:
  406114:	4606      	mov	r6, r0

00406116 <.LVL671>:
  406116:	e7ca      	b.n	4060ae <.LBB70+0xe>
  406118:	0041c7e8 	.word	0x0041c7e8
  40611c:	0041c7d4 	.word	0x0041c7d4
  406120:	0041c7bc 	.word	0x0041c7bc

00406124 <.LBE71>:
  406124:	9a08      	ldr	r2, [sp, #32]
  406126:	f1c3 0301 	rsb	r3, r3, #1
  40612a:	441a      	add	r2, r3
  40612c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  406130:	9302      	str	r3, [sp, #8]

00406132 <.LVL673>:
  406132:	2367      	movs	r3, #103	; 0x67
  406134:	9208      	str	r2, [sp, #32]

00406136 <.LVL674>:
  406136:	930d      	str	r3, [sp, #52]	; 0x34
  406138:	e6b0      	b.n	405e9c <.LVL600>

0040613a <.LBB72>:
  40613a:	eeb5 ab40 	vcmp.f64	d10, #0.0
  40613e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  406142:	f43f af01 	beq.w	405f48 <.LVL614+0x8>
  406146:	f1c4 0401 	rsb	r4, r4, #1

0040614a <.LVL676>:
  40614a:	941c      	str	r4, [sp, #112]	; 0x70
  40614c:	e6fd      	b.n	405f4a <.LVL615>

0040614e <.LBE72>:
  40614e:	f01e 0f01 	tst.w	lr, #1
  406152:	f43f ae53 	beq.w	405dfc <.LVL582+0x6>
  406156:	e64d      	b.n	405df4 <.LVL581+0x4>

00406158 <.LBB73>:
  406158:	f10d 027a 	add.w	r2, sp, #122	; 0x7a

0040615c <.LVL679>:
  40615c:	e772      	b.n	406044 <.LVL647>

0040615e <.LBB74>:
  40615e:	4601      	mov	r1, r0
  406160:	4613      	mov	r3, r2
  406162:	e6b8      	b.n	405ed6 <.LVL605+0x20>

00406164 <.LBE74>:
  406164:	b913      	cbnz	r3, 40616c <.LBE74+0x8>
  406166:	f01e 0f01 	tst.w	lr, #1
  40616a:	d00a      	beq.n	406182 <.LVL683>
  40616c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40616e:	9a04      	ldr	r2, [sp, #16]
  406170:	3301      	adds	r3, #1
  406172:	441a      	add	r2, r3
  406174:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  406178:	9302      	str	r3, [sp, #8]

0040617a <.LVL682>:
  40617a:	2366      	movs	r3, #102	; 0x66
  40617c:	9208      	str	r2, [sp, #32]
  40617e:	930d      	str	r3, [sp, #52]	; 0x34
  406180:	e68c      	b.n	405e9c <.LVL600>

00406182 <.LVL683>:
  406182:	2301      	movs	r3, #1
  406184:	9302      	str	r3, [sp, #8]

00406186 <.LVL684>:
  406186:	9308      	str	r3, [sp, #32]

00406188 <.LVL685>:
  406188:	2366      	movs	r3, #102	; 0x66
  40618a:	930d      	str	r3, [sp, #52]	; 0x34
  40618c:	e686      	b.n	405e9c <.LVL600>

0040618e <.LBB75>:
  40618e:	2301      	movs	r3, #1
  406190:	931c      	str	r3, [sp, #112]	; 0x70
  406192:	e74d      	b.n	406030 <.LVL644+0xc>

00406194 <.LVL687>:
  406194:	980a      	ldr	r0, [sp, #40]	; 0x28
  406196:	787b      	ldrb	r3, [r7, #1]

00406198 <.LVL688>:
  406198:	6802      	ldr	r2, [r0, #0]
  40619a:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
  40619e:	9204      	str	r2, [sp, #16]

004061a0 <.LBE75>:
  4061a0:	4602      	mov	r2, r0
  4061a2:	3204      	adds	r2, #4

004061a4 <.LVL689>:
  4061a4:	460f      	mov	r7, r1

004061a6 <.LVL690>:
  4061a6:	920a      	str	r2, [sp, #40]	; 0x28
  4061a8:	f7fe bbfd 	b.w	4049a6 <.LVL22>

004061ac <.LBB76>:
  4061ac:	f10d 027a 	add.w	r2, sp, #122	; 0x7a

004061b0 <.LVL692>:
  4061b0:	e617      	b.n	405de2 <.LVL576>

004061b2 <.LBE76>:
  4061b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4061b4:	230c      	movs	r3, #12
  4061b6:	6013      	str	r3, [r2, #0]
  4061b8:	f04f 33ff 	mov.w	r3, #4294967295
  4061bc:	9303      	str	r3, [sp, #12]
  4061be:	f7fe bc9b 	b.w	404af8 <.LVL45>

004061c2 <.LVL694>:
  4061c2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  4061c4:	930e      	str	r3, [sp, #56]	; 0x38
  4061c6:	e5bf      	b.n	405d48 <.LVL557>

004061c8 <.LVL695>:
  4061c8:	9a05      	ldr	r2, [sp, #20]
  4061ca:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4061ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4061d2:	8193      	strh	r3, [r2, #12]
  4061d4:	f7fe bc89 	b.w	404aea <.LVL44+0x6>

Disassembly of section .rodata.sample_text%38:

004061d8 <sample_text>:
  4061d8:	6942 646f 6569 6573 206c 7563 6970 6164     Biodiesel cupida
  4061e8:	6174 2074 616d 6672 2c61 6320 696c 6863     tat marfa, clich
  4061f8:	2065 7561 6574 7020 7475 6120 6220 7269     e aute put a bir
  406208:	2064 6e6f 6920 2074 6e69 6963 6964 7564     d on it incididu
  406218:	746e 6520 696c 0a74 6f70 616c 6f72 6469     nt elit.polaroid
  406228:	202e 7553 746e 7420 7461 6f74 656f 2064     . Sunt tattooed 
  406238:	6562 7073 6b6f 2065 6572 7270 6865 6e65     bespoke reprehen
  406248:	6564 6972 2e74 5320 6e69 2074 7774 6565     derit. Sint twee
  406258:	6f20 6772 6e61 6369 6920 0a64 616d 6672      organic id.marf
  406268:	2e61 4320 6d6f 6f6d 6f64 7620 6e65 6169     a. Commodo venia
  406278:	206d 6461 6520 7373 2065 6167 7473 6f72     m ad esse gastro
  406288:	7570 2e62 3320 7720 6c6f 2066 6f6d 6e6f     pub. 3 wolf moon
  406298:	7320 7261 6f74 6972 6c61 7620 7265 2c6f      sartorial vero,
  4062a8:	700a 616c 6469 6420 6c65 6365 7574 2073     .plaid delectus 
  4062b8:	6962 646f 6569 6573 206c 7173 6975 2064     biodiesel squid 
  4062c8:	312b 7620 6369 2e65 5020 736f 2d74 7269     +1 vice. Post-ir
  4062d8:	6e6f 6369 6b20 6665 6966 6579 2068 656c     onic keffiyeh le
  4062e8:	6767 6e69 7367 730a 6c65 6966 7365 6320     ggings.selfies c
  4062f8:	6172 2079 6166 2070 6f68 646f 6569 202c     ray fap hoodie, 
  406308:	6f66 6172 6567 6120 696e 2e6d 4320 7261     forage anim. Car
  406318:	656c 2073 7563 6970 6164 6174 2074 6873     les cupidatat sh
  406328:	726f 6465 7469 6863 202c 4856 0a53 6d73     oreditch, VHS.sm
  406338:	6c61 206c 6162 6374 2068 656d 6767 6e69     all batch meggin
  406348:	7367 6b20 676f 2069 6f64 6f6c 6572 6620     gs kogi dolore f
  406358:	6f6f 2064 7274 6375 206b 6562 7073 6b6f     ood truck bespok
  406368:	2065 6167 7473 6f72 7570 2e62 0a0a 6554     e gastropub...Te
  406378:	7272 2079 6972 6863 7261 7364 6e6f 6120     rry richardson a
  406388:	6964 6970 6973 6963 676e 6120 7463 6175     dipisicing actua
  406398:	6c6c 2079 7974 6570 7277 7469 7265 7420     lly typewriter t
  4063a8:	6d75 6c62 2c72 7420 6577 2065 6877 7461     umblr, twee what
  4063b8:	7665 7265 660a 756f 2072 6f6c 6f6b 7920     ever.four loko y
  4063c8:	756f 7020 6f72 6162 6c62 2079 6168 6576     ou probably have
  4063d8:	276e 2074 6568 7261 2064 666f 7420 6568     n't heard of the
  4063e8:	206d 6968 6867 6c20 6669 2e65 4d20 7365     m high life. Mes
  4063f8:	6573 676e 7265 6220 6761 770a 6168 6574     senger bag.whate
  406408:	6576 2072 6174 7474 6f6f 6465 6420 6565     ver tattooed dee
  406418:	2070 2076 6c6d 736b 6b68 202e 7242 6f6f     p v mlkshk. Broo
  406428:	6c6b 6e79 7020 6e69 6574 6572 7473 6120     klyn pinterest a
  406438:	7373 6d75 6e65 6164 6320 6968 6c6c 6177     ssumenda chillwa
  406448:	6576 650a 2c74 6220 6e61 736b 2079 6c75     ve.et, banksy ul
  406458:	616c 636d 206f 656d 7373 6e65 6567 2072     lamco messenger 
  406468:	6162 2067 6d75 6d61 2069 6170 6972 7461     bag umami pariat
  406478:	7275 6420 7269 6365 2074 7274 6461 2065     ur direct trade 
  406488:	6f66 6172 6567 0a2e 7954 6570 7277 7469     forage..Typewrit
  406498:	7265 6320 6c75 6170 7420 7972 682d 7261     er culpa try-har
  4064a8:	2c64 7020 7261 6169 7574 2072 6973 746e     d, pariatur sint
  4064b8:	6220 6f72 6b6f 796c 206e 656d 6767 6e69      brooklyn meggin
  4064c8:	7367 202e 6547 746e 6972 7966 660a 6f6f     gs. Gentrify.foo
  4064d8:	2064 7274 6375 206b 656e 7478 6c20 7665     d truck next lev
  4064e8:	6c65 202c 6f74 7375 656c 2064 7269 6e6f     el, tousled iron
  4064f8:	2079 6f6e 206e 6573 696d 746f 6369 2073     y non semiotics 
  406508:	4250 2052 7465 6968 6163 206c 6e61 6d69     PBR ethical anim
  406518:	6320 6572 0a64 6572 6461 6d79 6461 2e65      cred.readymade.
  406528:	4d20 6d75 6c62 6365 726f 2065 7262 6e75      Mumblecore brun
  406538:	6863 6c20 6d6f 206f 646f 2064 7566 7574     ch lomo odd futu
  406548:	6572 202c 6f70 7472 616c 646e 6f20 6772     re, portland org
  406558:	6e61 6369 7420 7265 7972 720a 6369 6168     anic terry.richa
  406568:	6472 6f73 206e 6c65 7469 6c20 6765 6967     rdson elit leggi
  406578:	676e 2073 6461 7069 7369 6369 6e69 2067     ngs adipisicing 
  406588:	6e65 756e 2069 6172 2077 6564 696e 206d     ennui raw denim 
  406598:	6162 6a6e 206f 6568 6c6c 2e61 4720 646f     banjo hella. God
  4065a8:	7261 0a64 696d 7478 7061 2065 6f70 616c     ard.mixtape pola
  4065b8:	6f72 6469 202c 6f70 6b72 6220 6c65 796c     roid, pork belly
  4065c8:	7220 6165 7964 616d 6564 6f20 6772 6e61      readymade organ
  4065d8:	6369 6320 6172 2079 7974 6570 7277 7469     ic cray typewrit
  4065e8:	7265 6820 6c65 6576 6974 6163 660a 756f     er helvetica.fou
  4065f8:	2072 6f6c 6f6b 7720 6168 6574 6576 2072     r loko whatever 
  406608:	7473 6572 7465 6120 7472 7920 2072 6166     street art yr fa
  406618:	6d72 742d 2d6f 6174 6c62 2e65 0a0a 6956     rm-to-table...Vi
  406628:	796e 206c 656b 7479 7261 7620 6369 2065     nyl keytar vice 
  406638:	6f74 7566 202e 6f4c 6163 6f76 6572 7920     tofu. Locavore y
  406648:	756f 7020 6f72 6162 6c62 2079 6168 6576     ou probably have
  406658:	276e 2074 6568 7261 2064 666f 7420 6568     n't heard of the
  406668:	206d 7570 0a67 6970 6b63 656c 2c64 6820     m pug.pickled, h
  406678:	6c65 616c 7420 6e6f 2078 616c 6f62 6572     ella tonx labore
  406688:	7420 7572 6666 7561 2074 4944 2059 6c6d      truffaut DIY ml
  406698:	736b 6b68 6520 696c 2074 6f63 6273 2079     kshk elit cosby 
  4066a8:	7773 6165 6574 2072 6973 746e 650a 2074     sweater sint.et 
  4066b8:	756d 626d 656c 6f63 6572 202e 6c45 7469     mumblecore. Elit
  4066c8:	7320 6177 2067 6573 696d 746f 6369 2c73      swag semiotics,
  4066d8:	7220 7065 6572 6568 646e 7265 7469 4420      reprehenderit D
  4066e8:	5949 7320 7261 6f74 6972 6c61 6e20 7369     IY sartorial nis
  4066f8:	2069 6775 0a68 656e 6373 7569 746e 7020     i ugh.nesciunt p
  406708:	6775 7020 726f 206b 6562 6c6c 2079 6177     ug pork belly wa
  406718:	6679 7261 7265 2073 6573 666c 6569 2073     yfarers selfies 
  406728:	6564 656c 7463 7375 202e 7445 6968 6163     delectus. Ethica
  406738:	206c 6f68 646f 6569 730a 6965 6174 206e     l hoodie.seitan 
  406748:	6966 676e 7265 7473 6361 6568 6b20 6c61     fingerstache kal
  406758:	2065 6863 7069 2e73 5420 7265 7972 7220     e chips. Terry r
  406768:	6369 6168 6472 6f73 206e 7261 6974 6173     ichardson artisa
  406778:	206e 6977 6c6c 6169 736d 7562 6772 0a2c     n williamsburg,.
  406788:	6965 7375 6f6d 2064 6166 6e6e 2079 6170     eiusmod fanny pa
  406798:	6b63 6920 6f72 796e 7420 6e6f 2078 6e65     ck irony tonx en
  4067a8:	756e 2069 6f6c 662d 2069 6e69 6963 6964     nui lo-fi incidi
  4067b8:	7564 746e 7420 666f 2075 4f59 4f4c 720a     dunt tofu YOLO.r
  4067c8:	6165 7964 616d 6564 202e 2d38 6962 2074     eadymade. 8-bit 
  4067d8:	6573 2064 7465 6e68 6369 6220 6165 6472     sed ethnic beard
  4067e8:	6f20 6666 6369 6169 202e 6f50 7275 6f2d      officia. Pour-o
  4067f8:	6576 2072 7069 6f68 656e 4420 5949 6220     ver iphone DIY b
  406808:	7475 6863 7265 0a2c 7465 6e68 6369 6120     utcher,.ethnic a
  406818:	7472 7020 7261 7974 7120 6975 6c20 7465     rt party qui let
  406828:	6574 7072 6572 7373 6e20 7369 2069 7270     terpress nisi pr
  406838:	696f 6564 746e 6a20 6165 206e 6873 726f     oident jean shor
  406848:	7374 6d20 6b6c 6873 0a6b 6f6c 6163 6f76     ts mlkshk.locavo
  406858:	6572 0a2e 4e0a 7261 6877 6c61 6620 656c     re...Narwhal fle
  406868:	6978 6174 6972 6e61 6c20 7465 6574 7072     xitarian letterp
  406878:	6572 7373 202c 6f64 6720 756c 6574 2d6e     ress, do gluten-
  406888:	7266 6565 7620 6c6f 7075 6174 6574 6e20     free voluptate n
  406898:	7865 2074 656c 6576 0a6c 6162 686e 6d20     ext level.banh m
  4068a8:	2069 6f74 786e 6920 636e 6469 6469 6e75     i tonx incididun
  4068b8:	2074 6163 6c72 7365 4420 5949 202e 644f     t carles DIY. Od
  4068c8:	2064 7566 7574 6572 6e20 6c75 616c 3820     d future nulla 8
  4068d8:	622d 7469 6220 6165 6472 7520 0a74 6963     -bit beard ut.ci
  4068e8:	6c6c 6d75 7020 6369 6c6b 6465 7620 6c65     llum pickled vel
  4068f8:	7469 202c 4f59 4f4c 6f20 6666 6369 6169     it, YOLO officia
  406908:	7920 756f 7020 6f72 6162 6c62 2079 6168      you probably ha
  406918:	6576 276e 2074 6568 7261 2064 666f 7420     ven't heard of t
  406928:	6568 0a6d 7274 7375 2074 7566 646e 6720     hem.trust fund g
  406938:	7361 7274 706f 6275 202e 694e 6973 6120     astropub. Nisi a
  406948:	6964 6970 6973 6963 676e 7420 7461 6f74     dipisicing tatto
  406958:	656f 2c64 4120 7375 6974 206e 6c6d 736b     oed, Austin mlks
  406968:	6b68 3920 2730 0a73 6d73 6c61 206c 6162     hk 90's.small ba
  406978:	6374 2068 6d61 7265 6369 6e61 6120 7070     tch american app
  406988:	7261 6c65 202e 7550 2074 2061 6962 6472     arel. Put a bird
  406998:	6f20 206e 7469 6320 736f 7962 7320 6577      on it cosby swe
  4069a8:	7461 7265 6220 6665 726f 2065 6874 7965     ater before they
  4069b8:	730a 6c6f 2064 756f 2074 6f70 6b72 6220     .sold out pork b
  4069c8:	6c65 796c 6b20 676f 2069 6568 6c6c 2e61     elly kogi hella.
  4069d8:	5320 7274 6565 2074 7261 2074 6f6d 6c6c      Street art moll
  4069e8:	7469 7320 7375 6174 6e69 6261 656c 7020     it sustainable p
  4069f8:	6c6f 7261 696f 2c64 440a 5949 6520 6874     olaroid,.DIY eth
  406a08:	696e 2063 6165 7020 6775 6220 6165 6472     nic ea pug beard
  406a18:	6420 6572 6d61 6163 6374 6568 2072 6f63      dreamcatcher co
  406a28:	6273 2079 7773 6165 6574 2072 616d 6e67     sby sweater magn
  406a38:	2061 6373 6e65 7365 6574 2072 696e 6973     a scenester nisi
  406a48:	0a2e 6553 2064 6f70 6b72 6220 6c65 796c     ..Sed pork belly
  406a58:	7320 616b 6574 6f62 7261 2064 6f6d 6c6c      skateboard moll
  406a68:	7469 202c 616c 6f62 6572 7020 6f72 6469     it, labore proid
  406a78:	6e65 2074 6965 7375 6f6d 2e64 5320 6972     ent eiusmod. Sri
  406a88:	6172 6863 0a61 7865 6563 7470 7565 2072     racha.excepteur 
  406a98:	6f63 6273 2079 7773 6165 6574 2c72 6120     cosby sweater, a
  406aa8:	696e 206d 6564 6573 7572 746e 6c20 6261     nim deserunt lab
  406ab8:	726f 6d75 6520 2075 6c61 7169 6975 2070     orum eu aliquip 
  406ac8:	7465 6968 6163 206c 7465 6e0a 7565 7274     ethical et.neutr
  406ad8:	2061 4250 2052 6573 766c 6761 2e65 0a0a     a PBR selvage...
  406ae8:	6152 2077 6564 696e 206d 6f70 6b72 6220     Raw denim pork b
  406af8:	6c65 796c 7420 7572 6666 7561 2c74 6920     elly truffaut, i
  406b08:	6f72 796e 7020 616c 6469 7320 7375 6174     rony plaid susta
  406b18:	6e69 6261 656c 7020 7475 6120 6220 7269     inable put a bir
  406b28:	2064 6e6f 6920 0a74 656e 7478 6c20 7665     d on it.next lev
  406b38:	6c65 6a20 6165 206e 6873 726f 7374 6520     el jean shorts e
  406b48:	6578 6372 7469 7461 6f69 2e6e 4820 7361     xercitation. Has
  406b58:	7468 6761 6b20 7965 6174 2072 6877 7461     htag keytar what
  406b68:	7665 7265 202c 696e 6968 0a6c 7561 6874     ever, nihil.auth
  406b78:	6e65 6974 2063 6c61 7169 6975 2070 6964     entic aliquip di
  406b88:	7273 7075 2074 616c 6f62 7572 2e6d 5420     srupt laborum. T
  406b98:	7461 6f74 656f 2064 6573 666c 6569 2073     attooed selfies 
  406ba8:	6564 6573 7572 746e 7420 7572 7473 6620     deserunt trust f
  406bb8:	6e75 0a64 6177 6679 7261 7265 2e73 3320     und.wayfarers. 3
  406bc8:	7720 6c6f 2066 6f6d 6e6f 7320 6e79 6874      wolf moon synth
  406bd8:	6320 7568 6372 2d68 656b 2079 6173 7472      church-key sart
  406be8:	726f 6169 2c6c 6720 7361 7274 706f 6275     orial, gastropub
  406bf8:	6c20 6765 6967 676e 0a73 6174 7474 6f6f      leggings.tattoo
  406c08:	6465 202e 614c 6f62 6572 6820 6769 2068     ed. Labore high 
  406c18:	696c 6566 6320 6d6f 6f6d 6f64 202c 656d     life commodo, me
  406c28:	6767 6e69 7367 7220 7761 6420 6e65 6d69     ggings raw denim
  406c38:	6620 6e69 6567 7372 6174 6863 2065 7570      fingerstache pu
  406c48:	0a67 7274 7375 2074 7566 646e 6c20 6765     g.trust fund leg
  406c58:	6967 676e 2073 6573 7469 6e61 6620 726f     gings seitan for
  406c68:	6761 2e65 4e20 736f 7274 6475 7520 6c6c     age. Nostrud ull
  406c78:	6d61 6f63 6420 6975 2c73 7220 7065 6572     amco duis, repre
  406c88:	6568 646e 7265 7469 690a 636e 6469 6469     henderit.incidid
  406c98:	6e75 2074 6c66 6e61 656e 206c 7573 7473     unt flannel sust
  406ca8:	6961 616e 6c62 2065 6568 766c 7465 6369     ainable helvetic
  406cb8:	2061 6f70 6b72 6220 6c65 796c 7020 6775     a pork belly pug
  406cc8:	6220 6e61 736b 2079 6f79 0a75 7270 626f      banksy you.prob
  406cd8:	6261 796c 6820 7661 6e65 7427 6820 6165     ably haven't hea
  406ce8:	6472 6f20 2066 6874 6d65 6e20 7365 6963     rd of them nesci
  406cf8:	6e75 2074 6166 6d72 742d 2d6f 6174 6c62     unt farm-to-tabl
  406d08:	2e65 4420 7369 7572 7470 6e20 736f 7274     e. Disrupt nostr
  406d18:	6475 6d0a 6c6f 696c 2074 616d 6e67 2c61     ud.mollit magna,
  406d28:	7320 6972 6172 6863 2061 6173 7472 726f      sriracha sartor
  406d38:	6169 206c 6568 766c 7465 6369 2e61 0a0a     ial helvetica...
  406d48:	754e 6c6c 2061 6f6b 6967 7220 7065 6572     Nulla kogi repre
  406d58:	6568 646e 7265 7469 202c 6b73 7461 6265     henderit, skateb
  406d68:	616f 6472 7320 7375 6174 6e69 6261 656c     oard sustainable
  406d78:	6420 6975 2073 6461 7069 7369 6369 6e69      duis adipisicin
  406d88:	2067 6976 6172 0a6c 6461 6620 6e61 796e     g viral.ad fanny
  406d98:	7020 6361 206b 6173 766c 6169 202e 6146      pack salvia. Fa
  406da8:	6e6e 2079 6170 6b63 7420 7572 7473 6620     nny pack trust f
  406db8:	6e75 2064 6f79 2075 7270 626f 6261 796c     und you probably
  406dc8:	6820 7661 6e65 7427 6820 6165 6472 6f0a      haven't heard.o
  406dd8:	2066 6874 6d65 5920 4c4f 204f 6976 6563     f them YOLO vice
  406de8:	6e20 6869 6c69 202e 654b 6666 7969 6865      nihil. Keffiyeh
  406df8:	6320 6172 2079 6f6c 662d 2069 6970 746e      cray lo-fi pint
  406e08:	7265 7365 2074 6163 6472 6769 6e61 6120     erest cardigan a
  406e18:	696c 7571 2c61 720a 7065 6572 6568 646e     liqua,.reprehend
  406e28:	7265 7469 6120 7475 2e65 4320 6c75 6170     erit aute. Culpa
  406e38:	7420 756f 6c73 6465 7720 6c69 696c 6d61      tousled william
  406e48:	6273 7275 2c67 6d20 7261 6166 6c20 6d6f     sburg, marfa lom
  406e58:	206f 6361 7574 6c61 796c 6120 696e 0a6d     o actually anim.
  406e68:	6b73 7461 6265 616f 6472 202e 7049 6f68     skateboard. Ipho
  406e78:	656e 6120 696c 7571 2061 6775 2c68 7320     ne aliqua ugh, s
  406e88:	6d65 6f69 6974 7363 7020 7261 6169 7574     emiotics pariatu
  406e98:	2072 6576 6f72 7220 6165 7964 616d 6564     r vero readymade
  406ea8:	6f0a 6772 6e61 6369 202e 614d 6672 2061     .organic. Marfa 
  406eb8:	7173 6975 2064 756e 6c6c 2c61 6920 206e     squid nulla, in 
  406ec8:	616c 6f62 7572 206d 6964 7273 7075 2074     laborum disrupt 
  406ed8:	616c 6f62 6972 2073 7269 7275 2065 6167     laboris irure ga
  406ee8:	7473 6f72 7570 2e62 560a 6e65 6169 206d     stropub..Veniam 
  406ef8:	7573 746e 6620 6f6f 2064 7274 6375 206b     sunt food truck 
  406f08:	656c 6767 6e69 7367 202c 6973 746e 7620     leggings, sint v
  406f18:	6e69 6c79 6620 7061 0a2e 480a 6c65 616c     inyl fap...Hella
  406f28:	6420 6c6f 726f 2065 6f70 6b72 6220 6c65      dolore pork bel
  406f38:	796c 202c 7274 6675 6166 7475 6320 7261     ly, truffaut car
  406f48:	656c 2073 6f79 2075 7270 626f 6261 796c     les you probably
  406f58:	6820 7661 6e65 7427 6820 6165 6472 6f20      haven't heard o
  406f68:	0a66 6874 6d65 5020 5242 6820 6c65 6576     f.them PBR helve
  406f78:	6974 6163 6920 206e 6173 6970 6e65 6574     tica in sapiente
  406f88:	202e 6146 6873 6f69 206e 7861 2065 6775     . Fashion axe ug
  406f98:	2068 7562 6873 6977 6b63 6120 656d 6972     h bushwick ameri
  406fa8:	6163 0a6e 7061 6170 6572 2e6c 4620 6e69     can.apparel. Fin
  406fb8:	6567 7372 6174 6863 2065 6573 2064 7069     gerstache sed ip
  406fc8:	6f68 656e 202c 656a 6e61 7320 6f68 7472     hone, jean short
  406fd8:	2073 6c62 6575 6220 746f 6c74 2065 696e     s blue bottle ni
  406fe8:	6973 6220 7375 7768 6369 0a6b 6c66 7865     si bushwick.flex
  406ff8:	7469 7261 6169 206e 666f 6966 6963 2061     itarian officia 
  407008:	6576 696e 6d61 7020 616c 6469 6220 7365     veniam plaid bes
  407018:	6f70 656b 6620 7061 5920 4c4f 204f 6f6c     poke fap YOLO lo
  407028:	662d 2e69 4220 6f6c 0a67 656c 7474 7265     -fi. Blog.letter
  407038:	7270 7365 2073 756d 626d 656c 6f63 6572     press mumblecore
  407048:	202c 6f66 646f 7420 7572 6b63 6920 2064     , food truck id 
  407058:	7263 7961 6220 6f72 6b6f 796c 206e 6963     cray brooklyn ci
  407068:	6c6c 6d75 6120 2064 6573 2e64 410a 7373     llum ad sed..Ass
  407078:	6d75 6e65 6164 6320 6168 626d 6172 2079     umenda chambray 
  407088:	6177 6679 7261 7265 2073 6976 796e 206c     wayfarers vinyl 
  407098:	696d 7478 7061 2065 7573 7473 6961 616e     mixtape sustaina
  4070a8:	6c62 2e65 5620 5348 7620 6e69 6c79 640a     ble. VHS vinyl.d
  4070b8:	6c65 6365 7574 2c73 6320 6c75 6170 7720     electus, culpa w
  4070c8:	6c69 696c 6d61 6273 7275 2067 6f70 616c     illiamsburg pola
  4070d8:	6f72 6469 6320 696c 6863 2065 7773 6761     roid cliche swag
  4070e8:	6320 7568 6372 2d68 656b 2079 7973 746e      church-key synt
  4070f8:	2068 6f6b 6967 6d0a 6761 616e 7020 706f     h kogi.magna pop
  407108:	752d 2070 696c 6574 6172 6c6c 2e79 5320     -up literally. S
  407118:	6177 2067 6874 6e75 6564 6372 7461 2073     wag thundercats 
  407128:	6e65 756e 2069 6873 726f 6465 7469 6863     ennui shoreditch
  407138:	7620 6765 6e61 700a 7469 6863 6f66 6b72      vegan.pitchfork
  407148:	6e20 7565 7274 2061 7274 6675 6166 7475      neutra truffaut
  407158:	6520 7374 2c79 7320 6465 7320 6e69 6c67      etsy, sed singl
  407168:	2d65 726f 6769 6e69 6320 666f 6566 2065     e-origin coffee 
  407178:	7263 6661 2074 6562 7265 0a2e 4f0a 6964     craft beer...Odi
  407188:	206f 656c 7474 7265 7270 7365 2073 7262     o letterpress br
  407198:	6f6f 6c6b 6e79 6520 696c 2e74 4e20 6c75     ooklyn elit. Nul
  4071a8:	616c 7320 6e69 6c67 2d65 726f 6769 6e69     la single-origin
  4071b8:	6320 666f 6566 2065 6e69 6f20 6363 6561      coffee in occae
  4071c8:	6163 0a74 656d 6767 6e69 7367 202e 7249     cat.meggings. Ir
  4071d8:	6e6f 2079 656d 6767 6e69 7367 3820 622d     ony meggings 8-b
  4071e8:	7469 202c 6863 6c69 776c 7661 2065 6f6c     it, chillwave lo
  4071f8:	662d 2069 6461 7069 7369 6369 6e69 2067     -fi adipisicing 
  407208:	7263 6465 640a 6572 6d61 6163 6374 6568     cred.dreamcatche
  407218:	2072 6576 696e 6d61 202e 7550 2074 2061     r veniam. Put a 
  407228:	6962 6472 6f20 206e 7469 6920 6f72 796e     bird on it irony
  407238:	7520 616d 696d 202c 7274 7375 2074 7566      umami, trust fu
  407248:	646e 6220 7375 7768 6369 0a6b 6f6c 6163     nd bushwick.loca
  407258:	6f76 6572 6b20 6c61 2065 6863 7069 2e73     vore kale chips.
  407268:	5320 6972 6172 6863 2061 7773 6761 7420      Sriracha swag t
  407278:	7568 646e 7265 6163 7374 202c 6863 6c69     hundercats, chil
  407288:	776c 7661 2065 6964 7273 7075 0a74 6f74     lwave disrupt.to
  407298:	7375 656c 2064 6562 7261 2064 6f6d 6c6c     usled beard moll
  4072a8:	7469 6d20 7375 6174 6863 2065 656c 6767     it mustache legg
  4072b8:	6e69 7367 7020 726f 6c74 6e61 2064 656e     ings portland ne
  4072c8:	7478 6c20 7665 6c65 202e 694e 6968 206c     xt level. Nihil 
  4072d8:	7365 6573 650a 7473 202c 6b73 7461 6265     esse.est, skateb
  4072e8:	616f 6472 6120 7472 7020 7261 7974 6520     oard art party e
  4072f8:	7374 2079 6874 6e75 6564 6372 7461 2073     tsy thundercats 
  407308:	6573 2064 7264 6165 636d 7461 6863 7265     sed dreamcatcher
  407318:	7520 2074 7069 6f68 656e 730a 6177 2067      ut iphone.swag 
  407328:	6f63 736e 6365 6574 7574 2072 7465 202e     consectetur et. 
  407338:	7249 7275 2065 6b73 7461 6265 616f 6472     Irure skateboard
  407348:	6220 6e61 6f6a 202c 756e 6c6c 2061 6564      banjo, nulla de
  407358:	6573 7572 746e 6d20 7365 6573 676e 7265     serunt messenger
  407368:	620a 6761 6420 6c6f 726f 7420 7265 7972     .bag dolor terry
  407378:	7220 6369 6168 6472 6f73 206e 6173 6970      richardson sapi
  407388:	6e65 6574 0a2e 0000                         ente....

Disassembly of section .text.inflate%39:

00407390 <inflate>:
 */

int ZEXPORT inflate(strm, flush)
z_streamp strm;
int flush;
{
  407390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00407394 <.LCFI16>:
  407394:	b08f      	sub	sp, #60	; 0x3c

00407396 <.LCFI17>:
    unsigned char hbuf[4];      /* buffer for gzip header crc calculation */
#endif
    static const unsigned short order[19] = /* permutation of code lengths */
        {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};

    if (strm == Z_NULL || strm->state == Z_NULL || strm->next_out == Z_NULL ||
  407396:	2800      	cmp	r0, #0
  407398:	f001 803a 	beq.w	408410 <.LVL483>
  40739c:	4681      	mov	r9, r0
  40739e:	69c6      	ldr	r6, [r0, #28]
  4073a0:	2e00      	cmp	r6, #0
  4073a2:	f001 803a 	beq.w	40841a <.LVL483+0xa>
  4073a6:	68c2      	ldr	r2, [r0, #12]
  4073a8:	2a00      	cmp	r2, #0
  4073aa:	f001 803b 	beq.w	408424 <.LVL483+0x14>
  4073ae:	6802      	ldr	r2, [r0, #0]
  4073b0:	2a00      	cmp	r2, #0
  4073b2:	d040      	beq.n	407436 <.LVL114>

004073b4 <.LVL104>:
        (strm->next_in == Z_NULL && strm->avail_in != 0))
        return Z_STREAM_ERROR;

    state = (struct inflate_state FAR *)strm->state;
    if (state->mode == TYPE) state->mode = TYPEDO;      /* skip check */
  4073b4:	7832      	ldrb	r2, [r6, #0]
  4073b6:	2a0b      	cmp	r2, #11
  4073b8:	d044      	beq.n	407444 <.LVL115>
  4073ba:	9107      	str	r1, [sp, #28]
    LOAD();
  4073bc:	f8d9 300c 	ldr.w	r3, [r9, #12]
  4073c0:	9306      	str	r3, [sp, #24]

004073c2 <.LVL105>:
  4073c2:	f8d9 3010 	ldr.w	r3, [r9, #16]

004073c6 <.LVL106>:
  4073c6:	9305      	str	r3, [sp, #20]

004073c8 <.LVL107>:
  4073c8:	f8d9 a000 	ldr.w	sl, [r9]

004073cc <.LVL108>:
  4073cc:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4073d0:	9208      	str	r2, [sp, #32]

004073d2 <.LVL109>:
  4073d2:	f8d6 b038 	ldr.w	fp, [r6, #56]	; 0x38

004073d6 <.LVL110>:
  4073d6:	6bf4      	ldr	r4, [r6, #60]	; 0x3c

004073d8 <.LVL111>:
    in = have;
    out = left;
  4073d8:	9304      	str	r3, [sp, #16]
    LOAD();
  4073da:	4615      	mov	r5, r2
    ret = Z_OK;
  4073dc:	2300      	movs	r3, #0

004073de <.LVL112>:
  4073de:	9303      	str	r3, [sp, #12]
            state->mode = LENGTH;
        case LENGTH:
            if (state->wrap && state->flags) {
                NEEDBITS(32);
                if (hold != (state->total & 0xffffffffUL)) {
                    strm->msg = (char *)"incorrect length check";
  4073e0:	4baf      	ldr	r3, [pc, #700]	; (4076a0 <.LVL161+0x6>)
  4073e2:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
  4073e6:	9309      	str	r3, [sp, #36]	; 0x24
  4073e8:	4bae      	ldr	r3, [pc, #696]	; (4076a4 <.LVL161+0xa>)
  4073ea:	3324      	adds	r3, #36	; 0x24
  4073ec:	930a      	str	r3, [sp, #40]	; 0x28

004073ee <.LVL113>:
        switch (state->mode) {
  4073ee:	7833      	ldrb	r3, [r6, #0]
  4073f0:	2b1e      	cmp	r3, #30
  4073f2:	d82d      	bhi.n	407450 <.LVL116+0x6>
  4073f4:	e8df f013 	tbh	[pc, r3, lsl #1]
  4073f8:	00540066 	.word	0x00540066
  4073fc:	015a0120 	.word	0x015a0120
  407400:	018501ca 	.word	0x018501ca
  407404:	022701b0 	.word	0x022701b0
  407408:	00420261 	.word	0x00420261
  40740c:	03320326 	.word	0x03320326
  407410:	038f0337 	.word	0x038f0337
  407414:	03bf03bd 	.word	0x03bf03bd
  407418:	03fa0030 	.word	0x03fa0030
  40741c:	05830468 	.word	0x05830468
  407420:	06480585 	.word	0x06480585
  407424:	06f60672 	.word	0x06f60672
  407428:	0762071b 	.word	0x0762071b
  40742c:	07c90771 	.word	0x07c90771
  407430:	07f00029 	.word	0x07f00029
  407434:	081b      	.short	0x081b

00407436 <.LVL114>:
        (strm->next_in == Z_NULL && strm->avail_in != 0))
  407436:	6842      	ldr	r2, [r0, #4]
  407438:	2a00      	cmp	r2, #0
  40743a:	d0bb      	beq.n	4073b4 <.LVL104>
        return Z_STREAM_ERROR;
  40743c:	f06f 0301 	mvn.w	r3, #1
  407440:	9303      	str	r3, [sp, #12]
  407442:	e2b8      	b.n	4079b6 <.LVL227>

00407444 <.LVL115>:
    if (state->mode == TYPE) state->mode = TYPEDO;      /* skip check */
  407444:	220c      	movs	r2, #12
  407446:	7032      	strb	r2, [r6, #0]
  407448:	e7b7      	b.n	4073ba <.LVL104+0x6>

0040744a <.LVL116>:
                Tracev((stderr, "inflate:   length matches trailer\n"));
            }
#endif
            state->mode = DONE;
        case DONE:
            ret = Z_STREAM_END;
  40744a:	2301      	movs	r3, #1
  40744c:	9303      	str	r3, [sp, #12]
  40744e:	e247      	b.n	4078e0 <.L124>
            goto inf_leave;
        case MEM:
            return Z_MEM_ERROR;
        case SYNC:
        default:
            return Z_STREAM_ERROR;
  407450:	f06f 0301 	mvn.w	r3, #1
  407454:	9303      	str	r3, [sp, #12]
  407456:	e2ae      	b.n	4079b6 <.LVL227>
            NEEDBITS(14);
  407458:	2c0d      	cmp	r4, #13
  40745a:	f200 83ae 	bhi.w	407bba <.LVL276>
  40745e:	2d00      	cmp	r5, #0
  407460:	f000 823e 	beq.w	4078e0 <.L124>
  407464:	3d01      	subs	r5, #1
  407466:	f81a 3b01 	ldrb.w	r3, [sl], #1

0040746a <.LVL118>:
  40746a:	40a3      	lsls	r3, r4
  40746c:	449b      	add	fp, r3
  40746e:	3408      	adds	r4, #8

00407470 <.LVL120>:
  407470:	2c0d      	cmp	r4, #13
  407472:	f200 83a2 	bhi.w	407bba <.LVL276>
  407476:	2d00      	cmp	r5, #0
  407478:	d1f4      	bne.n	407464 <.LVL116+0x1a>
  40747a:	e231      	b.n	4078e0 <.L124>
            NEEDBITS(32);
  40747c:	2c1f      	cmp	r4, #31
  40747e:	f200 82cb 	bhi.w	407a18 <.LVL234+0xc>
  407482:	2d00      	cmp	r5, #0
  407484:	f000 822c 	beq.w	4078e0 <.L124>
  407488:	3d01      	subs	r5, #1
  40748a:	f81a 3b01 	ldrb.w	r3, [sl], #1

0040748e <.LVL122>:
  40748e:	40a3      	lsls	r3, r4
  407490:	449b      	add	fp, r3
  407492:	3408      	adds	r4, #8

00407494 <.LVL124>:
  407494:	2c1f      	cmp	r4, #31
  407496:	f200 82bf 	bhi.w	407a18 <.LVL234+0xc>
  40749a:	2d00      	cmp	r5, #0
  40749c:	d1f4      	bne.n	407488 <.LVL120+0x18>
  40749e:	e21f      	b.n	4078e0 <.L124>
            NEEDBITS(16);
  4074a0:	2c0f      	cmp	r4, #15
  4074a2:	f200 8097 	bhi.w	4075d4 <.LVL147>
  4074a6:	2d00      	cmp	r5, #0
  4074a8:	f000 821a 	beq.w	4078e0 <.L124>
  4074ac:	3d01      	subs	r5, #1
  4074ae:	f81a 3b01 	ldrb.w	r3, [sl], #1

004074b2 <.LVL126>:
  4074b2:	40a3      	lsls	r3, r4
  4074b4:	449b      	add	fp, r3
  4074b6:	3408      	adds	r4, #8

004074b8 <.LVL128>:
  4074b8:	2c0f      	cmp	r4, #15
  4074ba:	f200 808b 	bhi.w	4075d4 <.LVL147>
  4074be:	2d00      	cmp	r5, #0
  4074c0:	d1f4      	bne.n	4074ac <.LVL124+0x18>
  4074c2:	e20d      	b.n	4078e0 <.L124>
            if (state->wrap == 0) {
  4074c4:	68b2      	ldr	r2, [r6, #8]
  4074c6:	b17a      	cbz	r2, 4074e8 <.LVL132+0xa>
            NEEDBITS(16);
  4074c8:	2c0f      	cmp	r4, #15
  4074ca:	d810      	bhi.n	4074ee <.LVL132+0x10>
  4074cc:	2d00      	cmp	r5, #0
  4074ce:	f000 8207 	beq.w	4078e0 <.L124>
  4074d2:	3d01      	subs	r5, #1
  4074d4:	f81a 3b01 	ldrb.w	r3, [sl], #1

004074d8 <.LVL130>:
  4074d8:	40a3      	lsls	r3, r4
  4074da:	449b      	add	fp, r3
  4074dc:	3408      	adds	r4, #8

004074de <.LVL132>:
  4074de:	2c0f      	cmp	r4, #15
  4074e0:	d805      	bhi.n	4074ee <.LVL132+0x10>
  4074e2:	2d00      	cmp	r5, #0
  4074e4:	d1f5      	bne.n	4074d2 <.LVL128+0x1a>
  4074e6:	e1fb      	b.n	4078e0 <.L124>
                state->mode = TYPEDO;
  4074e8:	230c      	movs	r3, #12
  4074ea:	7033      	strb	r3, [r6, #0]
                break;
  4074ec:	e77f      	b.n	4073ee <.LVL113>
            if ((state->wrap & 2) && hold == 0x8b1f) {  /* gzip header */
  4074ee:	f012 0f02 	tst.w	r2, #2
  4074f2:	d003      	beq.n	4074fc <.LVL132+0x1e>
  4074f4:	f648 331f 	movw	r3, #35615	; 0x8b1f
  4074f8:	459b      	cmp	fp, r3
  4074fa:	d020      	beq.n	40753e <.LVL132+0x60>
            state->flags = 0;           /* expect zlib header */
  4074fc:	2300      	movs	r3, #0
  4074fe:	6133      	str	r3, [r6, #16]
            if (state->head != Z_NULL)
  407500:	6a33      	ldr	r3, [r6, #32]
  407502:	b113      	cbz	r3, 40750a <.LVL132+0x2c>
                state->head->done = -1;
  407504:	f04f 32ff 	mov.w	r2, #4294967295
  407508:	631a      	str	r2, [r3, #48]	; 0x30
            if (!(state->wrap & 1) ||   /* check if zlib header allowed */
  40750a:	68b3      	ldr	r3, [r6, #8]
  40750c:	f013 0f01 	tst.w	r3, #1
  407510:	d00f      	beq.n	407532 <.LVL132+0x54>
                ((BITS(8) << 8) + (hold >> 8)) % 31) {
  407512:	ea4f 230b 	mov.w	r3, fp, lsl #8
  407516:	b29b      	uxth	r3, r3
  407518:	eb03 231b 	add.w	r3, r3, fp, lsr #8
  40751c:	4a62      	ldr	r2, [pc, #392]	; (4076a8 <.LVL161+0xe>)
  40751e:	fba2 1203 	umull	r1, r2, r2, r3
  407522:	1a9f      	subs	r7, r3, r2
  407524:	eb02 0257 	add.w	r2, r2, r7, lsr #1
  407528:	0917      	lsrs	r7, r2, #4
  40752a:	ebc7 1747 	rsb	r7, r7, r7, lsl #5
            if (!(state->wrap & 1) ||   /* check if zlib header allowed */
  40752e:	1bdf      	subs	r7, r3, r7
  407530:	d01c      	beq.n	40756c <.LVL137>
                strm->msg = (char *)"incorrect header check";
  407532:	4b5b      	ldr	r3, [pc, #364]	; (4076a0 <.LVL161+0x6>)
  407534:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  407538:	231d      	movs	r3, #29
  40753a:	7033      	strb	r3, [r6, #0]
                break;
  40753c:	e757      	b.n	4073ee <.LVL113>
                state->check = crc32(0L, Z_NULL, 0);
  40753e:	2200      	movs	r2, #0
  407540:	4611      	mov	r1, r2
  407542:	4610      	mov	r0, r2
  407544:	f00c f8de 	bl	413704 <.LFE21>

00407548 <.LVL133>:
  407548:	61b0      	str	r0, [r6, #24]
                CRC2(state->check, hold);
  40754a:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
  40754e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8

00407552 <.LVL134>:
  407552:	f88d b035 	strb.w	fp, [sp, #53]	; 0x35
  407556:	2202      	movs	r2, #2
  407558:	a90d      	add	r1, sp, #52	; 0x34
  40755a:	f00c f8d3 	bl	413704 <.LFE21>

0040755e <.LVL135>:
  40755e:	61b0      	str	r0, [r6, #24]

00407560 <.LVL136>:
                state->mode = FLAGS;
  407560:	2301      	movs	r3, #1
  407562:	7033      	strb	r3, [r6, #0]
                INITBITS();
  407564:	f04f 0b00 	mov.w	fp, #0
  407568:	465c      	mov	r4, fp
                break;
  40756a:	e740      	b.n	4073ee <.LVL113>

0040756c <.LVL137>:
            if (BITS(4) != Z_DEFLATED) {
  40756c:	f00b 030f 	and.w	r3, fp, #15
  407570:	2b08      	cmp	r3, #8
  407572:	d006      	beq.n	407582 <.LVL137+0x16>
                strm->msg = (char *)"unknown compression method";
  407574:	4b4a      	ldr	r3, [pc, #296]	; (4076a0 <.LVL161+0x6>)
  407576:	3318      	adds	r3, #24
  407578:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  40757c:	231d      	movs	r3, #29
  40757e:	7033      	strb	r3, [r6, #0]
                break;
  407580:	e735      	b.n	4073ee <.LVL113>
            DROPBITS(4);
  407582:	ea4f 1b1b 	mov.w	fp, fp, lsr #4

00407586 <.LVL138>:
            len = BITS(4) + 8;
  407586:	f00b 030f 	and.w	r3, fp, #15
  40758a:	3308      	adds	r3, #8

0040758c <.LVL139>:
            if (state->wbits == 0)
  40758c:	6a72      	ldr	r2, [r6, #36]	; 0x24
  40758e:	b9ba      	cbnz	r2, 4075c0 <.LVL144>
                state->wbits = len;
  407590:	6273      	str	r3, [r6, #36]	; 0x24
            state->dmax = 1U << len;
  407592:	2201      	movs	r2, #1
  407594:	fa02 f303 	lsl.w	r3, r2, r3

00407598 <.LVL140>:
  407598:	6173      	str	r3, [r6, #20]
            strm->adler = state->check = adler32(0L, Z_NULL, 0);
  40759a:	2200      	movs	r2, #0
  40759c:	4611      	mov	r1, r2
  40759e:	4610      	mov	r0, r2
  4075a0:	f00b fc72 	bl	412e88 <.LBE46>

004075a4 <.LVL141>:
  4075a4:	61b0      	str	r0, [r6, #24]
  4075a6:	f8c9 0030 	str.w	r0, [r9, #48]	; 0x30
            state->mode = hold & 0x200 ? DICTID : TYPE;
  4075aa:	f40b 7b00 	and.w	fp, fp, #512	; 0x200

004075ae <.LVL142>:
  4075ae:	f1bb 0f00 	cmp.w	fp, #0
  4075b2:	bf14      	ite	ne
  4075b4:	2309      	movne	r3, #9
  4075b6:	230b      	moveq	r3, #11
  4075b8:	7033      	strb	r3, [r6, #0]

004075ba <.LVL143>:
            INITBITS();
  4075ba:	46bb      	mov	fp, r7
  4075bc:	2400      	movs	r4, #0
            break;
  4075be:	e716      	b.n	4073ee <.LVL113>

004075c0 <.LVL144>:
            else if (len > state->wbits) {
  4075c0:	4293      	cmp	r3, r2
  4075c2:	d9e6      	bls.n	407592 <.LVL139+0x6>
            DROPBITS(4);
  4075c4:	3c04      	subs	r4, #4

004075c6 <.LVL145>:
                strm->msg = (char *)"invalid window size";
  4075c6:	4b36      	ldr	r3, [pc, #216]	; (4076a0 <.LVL161+0x6>)

004075c8 <.LVL146>:
  4075c8:	3334      	adds	r3, #52	; 0x34
  4075ca:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  4075ce:	231d      	movs	r3, #29
  4075d0:	7033      	strb	r3, [r6, #0]
                break;
  4075d2:	e70c      	b.n	4073ee <.LVL113>

004075d4 <.LVL147>:
            state->flags = (int)(hold);
  4075d4:	f8c6 b010 	str.w	fp, [r6, #16]
            if ((state->flags & 0xff) != Z_DEFLATED) {
  4075d8:	fa5f f38b 	uxtb.w	r3, fp
  4075dc:	2b08      	cmp	r3, #8
  4075de:	d006      	beq.n	4075ee <.LVL147+0x1a>
                strm->msg = (char *)"unknown compression method";
  4075e0:	4b2f      	ldr	r3, [pc, #188]	; (4076a0 <.LVL161+0x6>)
  4075e2:	3318      	adds	r3, #24
  4075e4:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  4075e8:	231d      	movs	r3, #29
  4075ea:	7033      	strb	r3, [r6, #0]
                break;
  4075ec:	e6ff      	b.n	4073ee <.LVL113>
            if (state->flags & 0xe000) {
  4075ee:	f41b 4f60 	tst.w	fp, #57344	; 0xe000
  4075f2:	d006      	beq.n	407602 <.LVL147+0x2e>
                strm->msg = (char *)"unknown header flags set";
  4075f4:	4b2a      	ldr	r3, [pc, #168]	; (4076a0 <.LVL161+0x6>)
  4075f6:	3348      	adds	r3, #72	; 0x48
  4075f8:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  4075fc:	231d      	movs	r3, #29
  4075fe:	7033      	strb	r3, [r6, #0]
                break;
  407600:	e6f5      	b.n	4073ee <.LVL113>
            if (state->head != Z_NULL)
  407602:	6a33      	ldr	r3, [r6, #32]
  407604:	b113      	cbz	r3, 40760c <.LVL147+0x38>
                state->head->text = (int)((hold >> 8) & 1);
  407606:	f3cb 2200 	ubfx	r2, fp, #8, #1
  40760a:	601a      	str	r2, [r3, #0]
            if (state->flags & 0x0200) CRC2(state->check, hold);
  40760c:	6933      	ldr	r3, [r6, #16]
  40760e:	f413 7f00 	tst.w	r3, #512	; 0x200
  407612:	d104      	bne.n	40761e <.LVL149>

00407614 <.LVL148>:
            state->mode = TIME;
  407614:	2302      	movs	r3, #2
  407616:	7033      	strb	r3, [r6, #0]
            INITBITS();
  407618:	2400      	movs	r4, #0
  40761a:	46a3      	mov	fp, r4
  40761c:	e00e      	b.n	40763c <.LVL152+0x4>

0040761e <.LVL149>:
            if (state->flags & 0x0200) CRC2(state->check, hold);
  40761e:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
  407622:	ea4f 2b1b 	mov.w	fp, fp, lsr #8

00407626 <.LVL150>:
  407626:	f88d b035 	strb.w	fp, [sp, #53]	; 0x35
  40762a:	2202      	movs	r2, #2
  40762c:	a90d      	add	r1, sp, #52	; 0x34
  40762e:	69b0      	ldr	r0, [r6, #24]
  407630:	f00c f868 	bl	413704 <.LFE21>

00407634 <.LVL151>:
  407634:	61b0      	str	r0, [r6, #24]
  407636:	e7ed      	b.n	407614 <.LVL148>

00407638 <.LVL152>:
            NEEDBITS(32);
  407638:	2c1f      	cmp	r4, #31
  40763a:	d80d      	bhi.n	407658 <.LVL157+0xa>
  40763c:	2d00      	cmp	r5, #0
  40763e:	f000 814f 	beq.w	4078e0 <.L124>
  407642:	3d01      	subs	r5, #1
  407644:	f81a 3b01 	ldrb.w	r3, [sl], #1

00407648 <.LVL155>:
  407648:	40a3      	lsls	r3, r4
  40764a:	449b      	add	fp, r3
  40764c:	3408      	adds	r4, #8

0040764e <.LVL157>:
  40764e:	2c1f      	cmp	r4, #31
  407650:	d802      	bhi.n	407658 <.LVL157+0xa>
  407652:	2d00      	cmp	r5, #0
  407654:	d1f5      	bne.n	407642 <.LVL152+0xa>
  407656:	e143      	b.n	4078e0 <.L124>
            if (state->head != Z_NULL)
  407658:	6a33      	ldr	r3, [r6, #32]
  40765a:	b10b      	cbz	r3, 407660 <.LVL157+0x12>
                state->head->time = hold;
  40765c:	f8c3 b004 	str.w	fp, [r3, #4]
            if (state->flags & 0x0200) CRC4(state->check, hold);
  407660:	6933      	ldr	r3, [r6, #16]
  407662:	f413 7f00 	tst.w	r3, #512	; 0x200
  407666:	d105      	bne.n	407674 <.LVL159>

00407668 <.LVL158>:
            state->mode = OS;
  407668:	2303      	movs	r3, #3
  40766a:	7033      	strb	r3, [r6, #0]
            INITBITS();
  40766c:	f04f 0b00 	mov.w	fp, #0
  407670:	465c      	mov	r4, fp
  407672:	e01d      	b.n	4076b0 <.LVL162+0x4>

00407674 <.LVL159>:
            if (state->flags & 0x0200) CRC4(state->check, hold);
  407674:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
  407678:	ea4f 231b 	mov.w	r3, fp, lsr #8
  40767c:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
  407680:	ea4f 431b 	mov.w	r3, fp, lsr #16
  407684:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  407688:	ea4f 6b1b 	mov.w	fp, fp, lsr #24

0040768c <.LVL160>:
  40768c:	f88d b037 	strb.w	fp, [sp, #55]	; 0x37
  407690:	2204      	movs	r2, #4
  407692:	a90d      	add	r1, sp, #52	; 0x34
  407694:	69b0      	ldr	r0, [r6, #24]
  407696:	f00c f835 	bl	413704 <.LFE21>

0040769a <.LVL161>:
  40769a:	61b0      	str	r0, [r6, #24]
  40769c:	e7e4      	b.n	407668 <.LVL158>
  40769e:	bf00      	nop
  4076a0:	00414df0 	.word	0x00414df0
  4076a4:	0041d300 	.word	0x0041d300
  4076a8:	08421085 	.word	0x08421085

004076ac <.LVL162>:
            NEEDBITS(16);
  4076ac:	2c0f      	cmp	r4, #15
  4076ae:	d80d      	bhi.n	4076cc <.LVL167+0xa>
  4076b0:	2d00      	cmp	r5, #0
  4076b2:	f000 8115 	beq.w	4078e0 <.L124>
  4076b6:	3d01      	subs	r5, #1
  4076b8:	f81a 3b01 	ldrb.w	r3, [sl], #1

004076bc <.LVL165>:
  4076bc:	40a3      	lsls	r3, r4
  4076be:	449b      	add	fp, r3
  4076c0:	3408      	adds	r4, #8

004076c2 <.LVL167>:
  4076c2:	2c0f      	cmp	r4, #15
  4076c4:	d802      	bhi.n	4076cc <.LVL167+0xa>
  4076c6:	2d00      	cmp	r5, #0
  4076c8:	d1f5      	bne.n	4076b6 <.LVL162+0xa>
  4076ca:	e109      	b.n	4078e0 <.L124>
            if (state->head != Z_NULL) {
  4076cc:	6a33      	ldr	r3, [r6, #32]
  4076ce:	b133      	cbz	r3, 4076de <.LVL167+0x1c>
                state->head->xflags = (int)(hold & 0xff);
  4076d0:	fa5f f28b 	uxtb.w	r2, fp
  4076d4:	609a      	str	r2, [r3, #8]
                state->head->os = (int)(hold >> 8);
  4076d6:	6a33      	ldr	r3, [r6, #32]
  4076d8:	ea4f 221b 	mov.w	r2, fp, lsr #8
  4076dc:	60da      	str	r2, [r3, #12]
            if (state->flags & 0x0200) CRC2(state->check, hold);
  4076de:	6933      	ldr	r3, [r6, #16]
  4076e0:	f413 7f00 	tst.w	r3, #512	; 0x200
  4076e4:	d145      	bne.n	407772 <.LVL177+0x2c>

004076e6 <.LVL168>:
            state->mode = EXLEN;
  4076e6:	2304      	movs	r3, #4
  4076e8:	7033      	strb	r3, [r6, #0]
            if (state->flags & 0x0400) {
  4076ea:	6933      	ldr	r3, [r6, #16]
  4076ec:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4076f0:	d160      	bne.n	4077b4 <.LVL186>
            INITBITS();
  4076f2:	2400      	movs	r4, #0
  4076f4:	46a3      	mov	fp, r4

004076f6 <.LVL169>:
            else if (state->head != Z_NULL)
  4076f6:	6a33      	ldr	r3, [r6, #32]
  4076f8:	b10b      	cbz	r3, 4076fe <.LVL170>
                state->head->extra = Z_NULL;
  4076fa:	2200      	movs	r2, #0
  4076fc:	611a      	str	r2, [r3, #16]

004076fe <.LVL170>:
            state->mode = EXTRA;
  4076fe:	2305      	movs	r3, #5
  407700:	7033      	strb	r3, [r6, #0]
            if (state->flags & 0x0400) {
  407702:	6933      	ldr	r3, [r6, #16]
  407704:	f413 6f80 	tst.w	r3, #1024	; 0x400
  407708:	d022      	beq.n	407750 <.LVL177+0xa>
                copy = state->length;
  40770a:	6c33      	ldr	r3, [r6, #64]	; 0x40

0040770c <.LVL171>:
  40770c:	462f      	mov	r7, r5
  40770e:	429d      	cmp	r5, r3
  407710:	bf28      	it	cs
  407712:	461f      	movcs	r7, r3

00407714 <.LVL172>:
                if (copy) {
  407714:	b1c7      	cbz	r7, 407748 <.LVL177+0x2>
                    if (state->head != Z_NULL &&
  407716:	6a32      	ldr	r2, [r6, #32]
  407718:	b16a      	cbz	r2, 407736 <.LVL174>
                        state->head->extra != Z_NULL) {
  40771a:	6910      	ldr	r0, [r2, #16]
                    if (state->head != Z_NULL &&
  40771c:	b158      	cbz	r0, 407736 <.LVL174>
                        len = state->head->extra_len - state->length;
  40771e:	6951      	ldr	r1, [r2, #20]
  407720:	1acb      	subs	r3, r1, r3

00407722 <.LVL173>:
                        zmemcpy(state->head->extra + len, next,
  407722:	4418      	add	r0, r3
                                len + copy > state->head->extra_max ?
  407724:	6992      	ldr	r2, [r2, #24]
  407726:	18f9      	adds	r1, r7, r3
                        zmemcpy(state->head->extra + len, next,
  407728:	4291      	cmp	r1, r2
  40772a:	bf8c      	ite	hi
  40772c:	1ad2      	subhi	r2, r2, r3
  40772e:	463a      	movls	r2, r7
  407730:	4651      	mov	r1, sl
  407732:	f00e fe73 	bl	41641c <memcpy>

00407736 <.LVL174>:
                    if (state->flags & 0x0200)
  407736:	6933      	ldr	r3, [r6, #16]
  407738:	f413 7f00 	tst.w	r3, #512	; 0x200
  40773c:	d15a      	bne.n	4077f4 <.LVL194>
                    have -= copy;
  40773e:	1bed      	subs	r5, r5, r7
                    next += copy;
  407740:	44ba      	add	sl, r7
                    state->length -= copy;
  407742:	6c33      	ldr	r3, [r6, #64]	; 0x40
  407744:	1bdf      	subs	r7, r3, r7

00407746 <.LVL177>:
  407746:	6437      	str	r7, [r6, #64]	; 0x40
                if (state->length) goto inf_leave;
  407748:	6c33      	ldr	r3, [r6, #64]	; 0x40
  40774a:	2b00      	cmp	r3, #0
  40774c:	f040 80c8 	bne.w	4078e0 <.L124>
            state->length = 0;
  407750:	2300      	movs	r3, #0
  407752:	6433      	str	r3, [r6, #64]	; 0x40
            state->mode = NAME;
  407754:	2306      	movs	r3, #6
  407756:	7033      	strb	r3, [r6, #0]
            if (state->flags & 0x0800) {
  407758:	6933      	ldr	r3, [r6, #16]
  40775a:	f413 6f00 	tst.w	r3, #2048	; 0x800
  40775e:	f000 8085 	beq.w	40786c <.LVL207>
                if (have == 0) goto inf_leave;
  407762:	2d00      	cmp	r5, #0
  407764:	f000 80bc 	beq.w	4078e0 <.L124>
  407768:	f10a 31ff 	add.w	r1, sl, #4294967295
  40776c:	2700      	movs	r7, #0
  40776e:	468e      	mov	lr, r1
  407770:	e04a      	b.n	407808 <.LVL197>
            if (state->flags & 0x0200) CRC2(state->check, hold);
  407772:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
  407776:	ea4f 2b1b 	mov.w	fp, fp, lsr #8

0040777a <.LVL178>:
  40777a:	f88d b035 	strb.w	fp, [sp, #53]	; 0x35
  40777e:	2202      	movs	r2, #2
  407780:	a90d      	add	r1, sp, #52	; 0x34
  407782:	69b0      	ldr	r0, [r6, #24]
  407784:	f00b ffbe 	bl	413704 <.LFE21>

00407788 <.LVL179>:
  407788:	61b0      	str	r0, [r6, #24]
  40778a:	e7ac      	b.n	4076e6 <.LVL168>

0040778c <.LVL180>:
            if (state->flags & 0x0400) {
  40778c:	6933      	ldr	r3, [r6, #16]
  40778e:	f413 6f80 	tst.w	r3, #1024	; 0x400
  407792:	d0b0      	beq.n	4076f6 <.LVL169>
                NEEDBITS(16);
  407794:	2c0f      	cmp	r4, #15
  407796:	d810      	bhi.n	4077ba <.LVL187>
  407798:	2d00      	cmp	r5, #0
  40779a:	f000 80a1 	beq.w	4078e0 <.L124>
  40779e:	3d01      	subs	r5, #1
  4077a0:	f81a 3b01 	ldrb.w	r3, [sl], #1

004077a4 <.LVL183>:
  4077a4:	40a3      	lsls	r3, r4
  4077a6:	449b      	add	fp, r3
  4077a8:	3408      	adds	r4, #8

004077aa <.LVL185>:
  4077aa:	2c0f      	cmp	r4, #15
  4077ac:	d805      	bhi.n	4077ba <.LVL187>
  4077ae:	2d00      	cmp	r5, #0
  4077b0:	d1f5      	bne.n	40779e <.LVL180+0x12>
  4077b2:	e095      	b.n	4078e0 <.L124>

004077b4 <.LVL186>:
            INITBITS();
  4077b4:	2400      	movs	r4, #0
  4077b6:	46a3      	mov	fp, r4
  4077b8:	e7ee      	b.n	407798 <.LVL180+0xc>

004077ba <.LVL187>:
                state->length = (unsigned)(hold);
  4077ba:	f8c6 b040 	str.w	fp, [r6, #64]	; 0x40
                if (state->head != Z_NULL)
  4077be:	6a33      	ldr	r3, [r6, #32]
  4077c0:	b10b      	cbz	r3, 4077c6 <.LVL187+0xc>
                    state->head->extra_len = (unsigned)hold;
  4077c2:	f8c3 b014 	str.w	fp, [r3, #20]
                if (state->flags & 0x0200) CRC2(state->check, hold);
  4077c6:	6933      	ldr	r3, [r6, #16]
  4077c8:	f413 7f00 	tst.w	r3, #512	; 0x200
  4077cc:	d102      	bne.n	4077d4 <.LVL190>
                INITBITS();
  4077ce:	2400      	movs	r4, #0

004077d0 <.LVL188>:
  4077d0:	46a3      	mov	fp, r4

004077d2 <.LVL189>:
  4077d2:	e794      	b.n	4076fe <.LVL170>

004077d4 <.LVL190>:
                if (state->flags & 0x0200) CRC2(state->check, hold);
  4077d4:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
  4077d8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8

004077dc <.LVL191>:
  4077dc:	f88d b035 	strb.w	fp, [sp, #53]	; 0x35
  4077e0:	2202      	movs	r2, #2
  4077e2:	a90d      	add	r1, sp, #52	; 0x34
  4077e4:	69b0      	ldr	r0, [r6, #24]
  4077e6:	f00b ff8d 	bl	413704 <.LFE21>

004077ea <.LVL192>:
  4077ea:	61b0      	str	r0, [r6, #24]
                INITBITS();
  4077ec:	f04f 0b00 	mov.w	fp, #0
  4077f0:	465c      	mov	r4, fp

004077f2 <.LVL193>:
  4077f2:	e784      	b.n	4076fe <.LVL170>

004077f4 <.LVL194>:
                        state->check = crc32(state->check, next, copy);
  4077f4:	463a      	mov	r2, r7
  4077f6:	4651      	mov	r1, sl
  4077f8:	69b0      	ldr	r0, [r6, #24]
  4077fa:	f00b ff83 	bl	413704 <.LFE21>

004077fe <.LVL195>:
  4077fe:	61b0      	str	r0, [r6, #24]
  407800:	e79d      	b.n	40773e <.LVL174+0x8>

00407802 <.LVL196>:
                } while (len && copy < have);
  407802:	b192      	cbz	r2, 40782a <.LVL199+0x1c>
  407804:	42bd      	cmp	r5, r7
  407806:	d910      	bls.n	40782a <.LVL199+0x1c>

00407808 <.LVL197>:
                    len = (unsigned)(next[copy++]);
  407808:	3701      	adds	r7, #1
  40780a:	f81e 2f01 	ldrb.w	r2, [lr, #1]!

0040780e <.LVL199>:
                    if (state->head != Z_NULL &&
  40780e:	6a33      	ldr	r3, [r6, #32]
  407810:	2b00      	cmp	r3, #0
  407812:	d0f6      	beq.n	407802 <.LVL196>
                            state->head->name != Z_NULL &&
  407814:	69d9      	ldr	r1, [r3, #28]
                    if (state->head != Z_NULL &&
  407816:	2900      	cmp	r1, #0
  407818:	d0f3      	beq.n	407802 <.LVL196>
                            state->length < state->head->name_max)
  40781a:	6c30      	ldr	r0, [r6, #64]	; 0x40
                            state->head->name != Z_NULL &&
  40781c:	6a1b      	ldr	r3, [r3, #32]
  40781e:	4298      	cmp	r0, r3
  407820:	d2ef      	bcs.n	407802 <.LVL196>
                        state->head->name[state->length++] = len;
  407822:	1c43      	adds	r3, r0, #1
  407824:	6433      	str	r3, [r6, #64]	; 0x40
  407826:	540a      	strb	r2, [r1, r0]
  407828:	e7eb      	b.n	407802 <.LVL196>
  40782a:	4690      	mov	r8, r2
                if (state->flags & 0x0200)
  40782c:	6933      	ldr	r3, [r6, #16]
  40782e:	f413 7f00 	tst.w	r3, #512	; 0x200
  407832:	d114      	bne.n	40785e <.LVL204>

00407834 <.LVL200>:
                have -= copy;
  407834:	1bed      	subs	r5, r5, r7
                next += copy;
  407836:	44ba      	add	sl, r7
                if (len) goto inf_leave;
  407838:	f1b8 0f00 	cmp.w	r8, #0
  40783c:	d150      	bne.n	4078e0 <.L124>

0040783e <.LVL203>:
            state->length = 0;
  40783e:	2300      	movs	r3, #0
  407840:	6433      	str	r3, [r6, #64]	; 0x40
            state->mode = COMMENT;
  407842:	2307      	movs	r3, #7
  407844:	7033      	strb	r3, [r6, #0]
            if (state->flags & 0x1000) {
  407846:	6933      	ldr	r3, [r6, #16]
  407848:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  40784c:	f000 80be 	beq.w	4079cc <.LVL231>
                if (have == 0) goto inf_leave;
  407850:	2d00      	cmp	r5, #0
  407852:	d045      	beq.n	4078e0 <.L124>
  407854:	f10a 31ff 	add.w	r1, sl, #4294967295
  407858:	2700      	movs	r7, #0
  40785a:	468e      	mov	lr, r1
  40785c:	e00f      	b.n	40787e <.LVL209>

0040785e <.LVL204>:
                    state->check = crc32(state->check, next, copy);
  40785e:	463a      	mov	r2, r7

00407860 <.LVL205>:
  407860:	4651      	mov	r1, sl
  407862:	69b0      	ldr	r0, [r6, #24]
  407864:	f00b ff4e 	bl	413704 <.LFE21>

00407868 <.LVL206>:
  407868:	61b0      	str	r0, [r6, #24]
  40786a:	e7e3      	b.n	407834 <.LVL200>

0040786c <.LVL207>:
            else if (state->head != Z_NULL)
  40786c:	6a33      	ldr	r3, [r6, #32]
  40786e:	2b00      	cmp	r3, #0
  407870:	d0e5      	beq.n	40783e <.LVL203>
                state->head->name = Z_NULL;
  407872:	2200      	movs	r2, #0
  407874:	61da      	str	r2, [r3, #28]
  407876:	e7e2      	b.n	40783e <.LVL203>

00407878 <.LVL208>:
                } while (len && copy < have);
  407878:	b192      	cbz	r2, 4078a0 <.LVL211+0x1c>
  40787a:	42bd      	cmp	r5, r7
  40787c:	d910      	bls.n	4078a0 <.LVL211+0x1c>

0040787e <.LVL209>:
                    len = (unsigned)(next[copy++]);
  40787e:	3701      	adds	r7, #1
  407880:	f81e 2f01 	ldrb.w	r2, [lr, #1]!

00407884 <.LVL211>:
                    if (state->head != Z_NULL &&
  407884:	6a33      	ldr	r3, [r6, #32]
  407886:	2b00      	cmp	r3, #0
  407888:	d0f6      	beq.n	407878 <.LVL208>
                            state->head->comment != Z_NULL &&
  40788a:	6a59      	ldr	r1, [r3, #36]	; 0x24
                    if (state->head != Z_NULL &&
  40788c:	2900      	cmp	r1, #0
  40788e:	d0f3      	beq.n	407878 <.LVL208>
                            state->length < state->head->comm_max)
  407890:	6c30      	ldr	r0, [r6, #64]	; 0x40
                            state->head->comment != Z_NULL &&
  407892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  407894:	4298      	cmp	r0, r3
  407896:	d2ef      	bcs.n	407878 <.LVL208>
                        state->head->comment[state->length++] = len;
  407898:	1c43      	adds	r3, r0, #1
  40789a:	6433      	str	r3, [r6, #64]	; 0x40
  40789c:	540a      	strb	r2, [r1, r0]
  40789e:	e7eb      	b.n	407878 <.LVL208>
  4078a0:	4690      	mov	r8, r2
                if (state->flags & 0x0200)
  4078a2:	6933      	ldr	r3, [r6, #16]
  4078a4:	f413 7f00 	tst.w	r3, #512	; 0x200
  4078a8:	f040 8089 	bne.w	4079be <.LCFI19>

004078ac <.LVL212>:
                have -= copy;
  4078ac:	1bed      	subs	r5, r5, r7
                next += copy;
  4078ae:	44ba      	add	sl, r7
                if (len) goto inf_leave;
  4078b0:	f1b8 0f00 	cmp.w	r8, #0
  4078b4:	d114      	bne.n	4078e0 <.L124>

004078b6 <.LVL215>:
            state->mode = HCRC;
  4078b6:	2308      	movs	r3, #8
  4078b8:	7033      	strb	r3, [r6, #0]
            if (state->flags & 0x0200) {
  4078ba:	6932      	ldr	r2, [r6, #16]
  4078bc:	f412 7f00 	tst.w	r2, #512	; 0x200
  4078c0:	f000 8097 	beq.w	4079f2 <.LVL233>
                NEEDBITS(16);
  4078c4:	2c0f      	cmp	r4, #15
  4078c6:	f200 8088 	bhi.w	4079da <.LVL231+0xe>
  4078ca:	b14d      	cbz	r5, 4078e0 <.L124>
  4078cc:	3d01      	subs	r5, #1
  4078ce:	f81a 3b01 	ldrb.w	r3, [sl], #1

004078d2 <.LVL217>:
  4078d2:	40a3      	lsls	r3, r4
  4078d4:	449b      	add	fp, r3
  4078d6:	3408      	adds	r4, #8

004078d8 <.LVL219>:
  4078d8:	2c0f      	cmp	r4, #15
  4078da:	d87e      	bhi.n	4079da <.LVL231+0xe>
  4078dc:	2d00      	cmp	r5, #0
  4078de:	d1f5      	bne.n	4078cc <.LVL215+0x16>

004078e0 <.L124>:
       If there was no progress during the inflate() call, return a buffer
       error.  Call updatewindow() to create and/or update the window state.
       Note: a memory error from inflate() is non-recoverable.
     */
  inf_leave:
    RESTORE();
  4078e0:	9b06      	ldr	r3, [sp, #24]
  4078e2:	f8c9 300c 	str.w	r3, [r9, #12]
  4078e6:	9b05      	ldr	r3, [sp, #20]
  4078e8:	f8c9 3010 	str.w	r3, [r9, #16]
  4078ec:	f8c9 a000 	str.w	sl, [r9]
  4078f0:	f8c9 5004 	str.w	r5, [r9, #4]
  4078f4:	f8c6 b038 	str.w	fp, [r6, #56]	; 0x38
  4078f8:	63f4      	str	r4, [r6, #60]	; 0x3c
    if (state->wsize || (out != strm->avail_out && state->mode < BAD &&
  4078fa:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  4078fc:	b963      	cbnz	r3, 407918 <.L124+0x38>
  4078fe:	f8d9 3010 	ldr.w	r3, [r9, #16]
  407902:	9a04      	ldr	r2, [sp, #16]
  407904:	429a      	cmp	r2, r3
  407906:	d00e      	beq.n	407926 <.LVL221+0x6>
  407908:	7833      	ldrb	r3, [r6, #0]
  40790a:	2b1c      	cmp	r3, #28
  40790c:	d80b      	bhi.n	407926 <.LVL221+0x6>
            (state->mode < CHECK || flush != Z_FINISH)))
  40790e:	9a07      	ldr	r2, [sp, #28]
  407910:	2a04      	cmp	r2, #4
  407912:	d101      	bne.n	407918 <.L124+0x38>
  407914:	2b19      	cmp	r3, #25
  407916:	d806      	bhi.n	407926 <.LVL221+0x6>
        if (updatewindow(strm, out)) {
  407918:	9904      	ldr	r1, [sp, #16]
  40791a:	4648      	mov	r0, r9
  40791c:	f011 fcd6 	bl	4192cc <.LFE163>

00407920 <.LVL221>:
  407920:	2800      	cmp	r0, #0
  407922:	f040 8562 	bne.w	4083ea <.LVL479>
            state->mode = MEM;
            return Z_MEM_ERROR;
        }
    in -= strm->avail_in;
  407926:	f8d9 5004 	ldr.w	r5, [r9, #4]

0040792a <.LVL222>:
  40792a:	9b08      	ldr	r3, [sp, #32]
  40792c:	1b5d      	subs	r5, r3, r5

0040792e <.LVL223>:
    out -= strm->avail_out;
  40792e:	f8d9 4010 	ldr.w	r4, [r9, #16]

00407932 <.LVL224>:
  407932:	9b04      	ldr	r3, [sp, #16]
  407934:	1b1c      	subs	r4, r3, r4

00407936 <.LVL225>:
    strm->total_in += in;
  407936:	f8d9 3008 	ldr.w	r3, [r9, #8]
  40793a:	442b      	add	r3, r5
  40793c:	f8c9 3008 	str.w	r3, [r9, #8]
    strm->total_out += out;
  407940:	f8d9 3014 	ldr.w	r3, [r9, #20]
  407944:	4423      	add	r3, r4
  407946:	f8c9 3014 	str.w	r3, [r9, #20]
    state->total += out;
  40794a:	69f3      	ldr	r3, [r6, #28]
  40794c:	4423      	add	r3, r4
  40794e:	61f3      	str	r3, [r6, #28]
    if (state->wrap && out)
  407950:	68b3      	ldr	r3, [r6, #8]
  407952:	b173      	cbz	r3, 407972 <.LVL226+0x6>
  407954:	b16c      	cbz	r4, 407972 <.LVL226+0x6>
        strm->adler = state->check =
            UPDATE(state->check, strm->next_out - out, out);
  407956:	6933      	ldr	r3, [r6, #16]
  407958:	2b00      	cmp	r3, #0
  40795a:	f000 854d 	beq.w	4083f8 <.LVL481>
  40795e:	f8d9 100c 	ldr.w	r1, [r9, #12]
  407962:	4622      	mov	r2, r4
  407964:	1b09      	subs	r1, r1, r4
  407966:	69b0      	ldr	r0, [r6, #24]
  407968:	f00b fecc 	bl	413704 <.LFE21>

0040796c <.LVL226>:
        strm->adler = state->check =
  40796c:	61b0      	str	r0, [r6, #24]
  40796e:	f8c9 0030 	str.w	r0, [r9, #48]	; 0x30
    strm->data_type = state->bits + (state->last ? 64 : 0) +
  407972:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
  407974:	6873      	ldr	r3, [r6, #4]
  407976:	2b00      	cmp	r3, #0
  407978:	bf14      	ite	ne
  40797a:	2340      	movne	r3, #64	; 0x40
  40797c:	2300      	moveq	r3, #0
  40797e:	4413      	add	r3, r2
                      (state->mode == TYPE ? 128 : 0) +
  407980:	7832      	ldrb	r2, [r6, #0]
  407982:	2a0b      	cmp	r2, #11
  407984:	f000 8558 	beq.w	408438 <.LVL486>
                      (state->mode == LEN_ || state->mode == COPY_ ? 256 : 0);
  407988:	2a13      	cmp	r2, #19
  40798a:	d002      	beq.n	407992 <.LVL226+0x26>
  40798c:	2a0e      	cmp	r2, #14
  40798e:	f040 853c 	bne.w	40840a <.LVL482+0x4>
  407992:	f44f 7280 	mov.w	r2, #256	; 0x100
                      (state->mode == TYPE ? 128 : 0) +
  407996:	4413      	add	r3, r2
    strm->data_type = state->bits + (state->last ? 64 : 0) +
  407998:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
    if (((in == 0 && out == 0) || flush == Z_FINISH) && ret == Z_OK)
  40799c:	2d00      	cmp	r5, #0
  40799e:	bf08      	it	eq
  4079a0:	2c00      	cmpeq	r4, #0
  4079a2:	d002      	beq.n	4079aa <.LVL226+0x3e>
  4079a4:	9b07      	ldr	r3, [sp, #28]
  4079a6:	2b04      	cmp	r3, #4
  4079a8:	d105      	bne.n	4079b6 <.LVL227>
        ret = Z_BUF_ERROR;
  4079aa:	9b03      	ldr	r3, [sp, #12]
  4079ac:	2b00      	cmp	r3, #0
  4079ae:	bf08      	it	eq
  4079b0:	f06f 0304 	mvneq.w	r3, #4
  4079b4:	9303      	str	r3, [sp, #12]

004079b6 <.LVL227>:
    return ret;
}
  4079b6:	9803      	ldr	r0, [sp, #12]
  4079b8:	b00f      	add	sp, #60	; 0x3c

004079ba <.LCFI18>:
  4079ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004079be <.LCFI19>:
                    state->check = crc32(state->check, next, copy);
  4079be:	463a      	mov	r2, r7

004079c0 <.LVL229>:
  4079c0:	4651      	mov	r1, sl
  4079c2:	69b0      	ldr	r0, [r6, #24]
  4079c4:	f00b fe9e 	bl	413704 <.LFE21>

004079c8 <.LVL230>:
  4079c8:	61b0      	str	r0, [r6, #24]
  4079ca:	e76f      	b.n	4078ac <.LVL212>

004079cc <.LVL231>:
            else if (state->head != Z_NULL)
  4079cc:	6a33      	ldr	r3, [r6, #32]
  4079ce:	2b00      	cmp	r3, #0
  4079d0:	f43f af71 	beq.w	4078b6 <.LVL215>
                state->head->comment = Z_NULL;
  4079d4:	2200      	movs	r2, #0
  4079d6:	625a      	str	r2, [r3, #36]	; 0x24
  4079d8:	e76d      	b.n	4078b6 <.LVL215>
                if (hold != (state->check & 0xffff)) {
  4079da:	8b33      	ldrh	r3, [r6, #24]
  4079dc:	455b      	cmp	r3, fp
  4079de:	d006      	beq.n	4079ee <.LVL231+0x22>
                    strm->msg = (char *)"header crc mismatch";
  4079e0:	4bb3      	ldr	r3, [pc, #716]	; (407cb0 <.LVL290+0x14>)
  4079e2:	3364      	adds	r3, #100	; 0x64
  4079e4:	f8c9 3018 	str.w	r3, [r9, #24]
                    state->mode = BAD;
  4079e8:	231d      	movs	r3, #29
  4079ea:	7033      	strb	r3, [r6, #0]
                    break;
  4079ec:	e4ff      	b.n	4073ee <.LVL113>
                INITBITS();
  4079ee:	2400      	movs	r4, #0

004079f0 <.LVL232>:
  4079f0:	46a3      	mov	fp, r4

004079f2 <.LVL233>:
            if (state->head != Z_NULL) {
  4079f2:	6a33      	ldr	r3, [r6, #32]
  4079f4:	b12b      	cbz	r3, 407a02 <.LVL233+0x10>
                state->head->hcrc = (int)((state->flags >> 9) & 1);
  4079f6:	f3c2 2240 	ubfx	r2, r2, #9, #1
  4079fa:	62da      	str	r2, [r3, #44]	; 0x2c
                state->head->done = 1;
  4079fc:	6a33      	ldr	r3, [r6, #32]
  4079fe:	2201      	movs	r2, #1
  407a00:	631a      	str	r2, [r3, #48]	; 0x30
            strm->adler = state->check = crc32(0L, Z_NULL, 0);
  407a02:	2200      	movs	r2, #0
  407a04:	4611      	mov	r1, r2
  407a06:	4610      	mov	r0, r2
  407a08:	f00b fe7c 	bl	413704 <.LFE21>

00407a0c <.LVL234>:
  407a0c:	61b0      	str	r0, [r6, #24]
  407a0e:	f8c9 0030 	str.w	r0, [r9, #48]	; 0x30
            state->mode = TYPE;
  407a12:	230b      	movs	r3, #11
  407a14:	7033      	strb	r3, [r6, #0]
            break;
  407a16:	e4ea      	b.n	4073ee <.LVL113>
            strm->adler = state->check = ZSWAP32(hold);
  407a18:	ea4f 630b 	mov.w	r3, fp, lsl #24
  407a1c:	eb03 631b 	add.w	r3, r3, fp, lsr #24
  407a20:	ea4f 221b 	mov.w	r2, fp, lsr #8
  407a24:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
  407a28:	4413      	add	r3, r2
  407a2a:	ea4f 2b0b 	mov.w	fp, fp, lsl #8

00407a2e <.LVL235>:
  407a2e:	f40b 0b7f 	and.w	fp, fp, #16711680	; 0xff0000
  407a32:	445b      	add	r3, fp
  407a34:	61b3      	str	r3, [r6, #24]
  407a36:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30

00407a3a <.LVL236>:
            state->mode = DICT;
  407a3a:	230a      	movs	r3, #10
  407a3c:	7033      	strb	r3, [r6, #0]
            INITBITS();
  407a3e:	f04f 0b00 	mov.w	fp, #0
  407a42:	465c      	mov	r4, fp

00407a44 <.LVL237>:
            if (state->havedict == 0) {
  407a44:	68f3      	ldr	r3, [r6, #12]
  407a46:	b343      	cbz	r3, 407a9a <.LVL244>
            strm->adler = state->check = adler32(0L, Z_NULL, 0);
  407a48:	2200      	movs	r2, #0
  407a4a:	4611      	mov	r1, r2
  407a4c:	4610      	mov	r0, r2
  407a4e:	f00b fa1b 	bl	412e88 <.LBE46>

00407a52 <.LVL238>:
  407a52:	61b0      	str	r0, [r6, #24]
  407a54:	f8c9 0030 	str.w	r0, [r9, #48]	; 0x30
            state->mode = TYPE;
  407a58:	230b      	movs	r3, #11
  407a5a:	7033      	strb	r3, [r6, #0]
            if (flush == Z_BLOCK || flush == Z_TREES) goto inf_leave;
  407a5c:	9b07      	ldr	r3, [sp, #28]
  407a5e:	3b05      	subs	r3, #5
  407a60:	2b01      	cmp	r3, #1
  407a62:	f67f af3d 	bls.w	4078e0 <.L124>
            if (state->last) {
  407a66:	6873      	ldr	r3, [r6, #4]
  407a68:	bb3b      	cbnz	r3, 407aba <.LVL244+0x20>
            NEEDBITS(3);
  407a6a:	2c02      	cmp	r4, #2
  407a6c:	d82e      	bhi.n	407acc <.LVL244+0x32>
  407a6e:	2d00      	cmp	r5, #0
  407a70:	f43f af36 	beq.w	4078e0 <.L124>
  407a74:	3d01      	subs	r5, #1
  407a76:	f10a 0201 	add.w	r2, sl, #1

00407a7a <.LVL240>:
  407a7a:	f89a 3000 	ldrb.w	r3, [sl]
  407a7e:	40a3      	lsls	r3, r4
  407a80:	449b      	add	fp, r3
  407a82:	3408      	adds	r4, #8
            state->last = BITS(1);
  407a84:	f00b 0301 	and.w	r3, fp, #1
  407a88:	6073      	str	r3, [r6, #4]

00407a8a <.LVL243>:
            switch (BITS(2)) {
  407a8a:	f3cb 0341 	ubfx	r3, fp, #1, #2
  407a8e:	2b03      	cmp	r3, #3
  407a90:	d820      	bhi.n	407ad4 <.LVL247+0x4>
  407a92:	e8df f003 	tbb	[pc, r3]
  407a96:	241d      	.short	0x241d
  407a98:	3936      	.short	0x3936

00407a9a <.LVL244>:
                RESTORE();
  407a9a:	9b06      	ldr	r3, [sp, #24]
  407a9c:	f8c9 300c 	str.w	r3, [r9, #12]
  407aa0:	9b05      	ldr	r3, [sp, #20]
  407aa2:	f8c9 3010 	str.w	r3, [r9, #16]
  407aa6:	f8c9 a000 	str.w	sl, [r9]
  407aaa:	f8c9 5004 	str.w	r5, [r9, #4]
  407aae:	f8c6 b038 	str.w	fp, [r6, #56]	; 0x38
  407ab2:	63f4      	str	r4, [r6, #60]	; 0x3c
                return Z_NEED_DICT;
  407ab4:	2302      	movs	r3, #2
  407ab6:	9303      	str	r3, [sp, #12]
  407ab8:	e77d      	b.n	4079b6 <.LVL227>
                BYTEBITS();
  407aba:	f004 0307 	and.w	r3, r4, #7
  407abe:	fa2b fb03 	lsr.w	fp, fp, r3
  407ac2:	f024 0407 	bic.w	r4, r4, #7
                state->mode = CHECK;
  407ac6:	231a      	movs	r3, #26
  407ac8:	7033      	strb	r3, [r6, #0]
                break;
  407aca:	e490      	b.n	4073ee <.LVL113>
            NEEDBITS(3);
  407acc:	4652      	mov	r2, sl
  407ace:	e7d9      	b.n	407a84 <.LVL240+0xa>

00407ad0 <.LVL247>:
                state->mode = STORED;
  407ad0:	230d      	movs	r3, #13
  407ad2:	7033      	strb	r3, [r6, #0]
            DROPBITS(2);
  407ad4:	ea4f 0bdb 	mov.w	fp, fp, lsr #3

00407ad8 <.LVL248>:
  407ad8:	3c03      	subs	r4, #3

00407ada <.LVL249>:
            break;
  407ada:	4692      	mov	sl, r2
  407adc:	e487      	b.n	4073ee <.LVL113>

00407ade <.LBB4>:
    state->lencode = lenfix;
  407ade:	4b75      	ldr	r3, [pc, #468]	; (407cb4 <.LVL290+0x18>)
  407ae0:	64f3      	str	r3, [r6, #76]	; 0x4c
    state->lenbits = 9;
  407ae2:	2309      	movs	r3, #9
  407ae4:	6573      	str	r3, [r6, #84]	; 0x54
    state->distcode = distfix;
  407ae6:	4b74      	ldr	r3, [pc, #464]	; (407cb8 <.LVL290+0x1c>)
  407ae8:	6533      	str	r3, [r6, #80]	; 0x50
    state->distbits = 5;
  407aea:	2305      	movs	r3, #5
  407aec:	65b3      	str	r3, [r6, #88]	; 0x58

00407aee <.LBE4>:
                state->mode = LEN_;             /* decode codes */
  407aee:	2313      	movs	r3, #19
  407af0:	7033      	strb	r3, [r6, #0]
                if (flush == Z_TREES) {
  407af2:	9b07      	ldr	r3, [sp, #28]
  407af4:	2b06      	cmp	r3, #6
  407af6:	d1ed      	bne.n	407ad4 <.LVL247+0x4>
                    DROPBITS(2);
  407af8:	ea4f 0bdb 	mov.w	fp, fp, lsr #3

00407afc <.LVL252>:
  407afc:	3c03      	subs	r4, #3

00407afe <.LVL253>:
                    goto inf_leave;
  407afe:	4692      	mov	sl, r2
  407b00:	e6ee      	b.n	4078e0 <.L124>

00407b02 <.LVL254>:
                state->mode = TABLE;
  407b02:	2310      	movs	r3, #16
  407b04:	7033      	strb	r3, [r6, #0]
                break;
  407b06:	e7e5      	b.n	407ad4 <.LVL247+0x4>
                strm->msg = (char *)"invalid block type";
  407b08:	4b69      	ldr	r3, [pc, #420]	; (407cb0 <.LVL290+0x14>)
  407b0a:	3378      	adds	r3, #120	; 0x78
  407b0c:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  407b10:	231d      	movs	r3, #29
  407b12:	7033      	strb	r3, [r6, #0]
  407b14:	e7de      	b.n	407ad4 <.LVL247+0x4>

00407b16 <.LVL255>:
            BYTEBITS();                         /* go to byte boundary */
  407b16:	f004 0307 	and.w	r3, r4, #7
  407b1a:	fa2b fb03 	lsr.w	fp, fp, r3
  407b1e:	f024 0407 	bic.w	r4, r4, #7
            NEEDBITS(32);
  407b22:	2c1f      	cmp	r4, #31
  407b24:	d80d      	bhi.n	407b42 <.LVL261+0xa>
  407b26:	2d00      	cmp	r5, #0
  407b28:	f43f aeda 	beq.w	4078e0 <.L124>
  407b2c:	3d01      	subs	r5, #1
  407b2e:	f81a 3b01 	ldrb.w	r3, [sl], #1

00407b32 <.LVL259>:
  407b32:	40a3      	lsls	r3, r4
  407b34:	449b      	add	fp, r3
  407b36:	3408      	adds	r4, #8

00407b38 <.LVL261>:
  407b38:	2c1f      	cmp	r4, #31
  407b3a:	d802      	bhi.n	407b42 <.LVL261+0xa>
  407b3c:	2d00      	cmp	r5, #0
  407b3e:	d1f5      	bne.n	407b2c <.LVL255+0x16>
  407b40:	e6ce      	b.n	4078e0 <.L124>
            if ((hold & 0xffff) != ((hold >> 16) ^ 0xffff)) {
  407b42:	fa1f f28b 	uxth.w	r2, fp
  407b46:	f64f 73ff 	movw	r3, #65535	; 0xffff
  407b4a:	ea83 431b 	eor.w	r3, r3, fp, lsr #16
  407b4e:	429a      	cmp	r2, r3
  407b50:	d006      	beq.n	407b60 <.LVL261+0x28>
                strm->msg = (char *)"invalid stored block lengths";
  407b52:	4b57      	ldr	r3, [pc, #348]	; (407cb0 <.LVL290+0x14>)
  407b54:	338c      	adds	r3, #140	; 0x8c
  407b56:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  407b5a:	231d      	movs	r3, #29
  407b5c:	7033      	strb	r3, [r6, #0]
                break;
  407b5e:	e446      	b.n	4073ee <.LVL113>
            state->length = (unsigned)hold & 0xffff;
  407b60:	6432      	str	r2, [r6, #64]	; 0x40

00407b62 <.LVL262>:
            state->mode = COPY_;
  407b62:	230e      	movs	r3, #14
  407b64:	7033      	strb	r3, [r6, #0]
            if (flush == Z_TREES) goto inf_leave;
  407b66:	9b07      	ldr	r3, [sp, #28]
  407b68:	2b06      	cmp	r3, #6
  407b6a:	f000 843a 	beq.w	4083e2 <.LVL478>
            INITBITS();
  407b6e:	2400      	movs	r4, #0
  407b70:	46a3      	mov	fp, r4

00407b72 <.LVL263>:
            state->mode = COPY;
  407b72:	230f      	movs	r3, #15
  407b74:	7033      	strb	r3, [r6, #0]
            copy = state->length;
  407b76:	6c37      	ldr	r7, [r6, #64]	; 0x40

00407b78 <.LVL264>:
            if (copy) {
  407b78:	b1e7      	cbz	r7, 407bb4 <.LVL275>
  407b7a:	9b05      	ldr	r3, [sp, #20]
  407b7c:	429f      	cmp	r7, r3
  407b7e:	bf28      	it	cs
  407b80:	461f      	movcs	r7, r3

00407b82 <.LVL265>:
  407b82:	42af      	cmp	r7, r5
  407b84:	bf28      	it	cs
  407b86:	462f      	movcs	r7, r5

00407b88 <.LVL266>:
                if (copy == 0) goto inf_leave;
  407b88:	2f00      	cmp	r7, #0
  407b8a:	f43f aea9 	beq.w	4078e0 <.L124>
                zmemcpy(put, next, copy);
  407b8e:	463a      	mov	r2, r7
  407b90:	4651      	mov	r1, sl
  407b92:	f8dd 8018 	ldr.w	r8, [sp, #24]
  407b96:	4640      	mov	r0, r8
  407b98:	f00e fc40 	bl	41641c <memcpy>

00407b9c <.LVL267>:
                have -= copy;
  407b9c:	1bed      	subs	r5, r5, r7
                next += copy;
  407b9e:	44ba      	add	sl, r7
                left -= copy;
  407ba0:	9b05      	ldr	r3, [sp, #20]
  407ba2:	1bdb      	subs	r3, r3, r7
  407ba4:	9305      	str	r3, [sp, #20]

00407ba6 <.LVL270>:
                put += copy;
  407ba6:	4643      	mov	r3, r8

00407ba8 <.LVL271>:
  407ba8:	443b      	add	r3, r7
  407baa:	9306      	str	r3, [sp, #24]

00407bac <.LVL272>:
                state->length -= copy;
  407bac:	6c33      	ldr	r3, [r6, #64]	; 0x40

00407bae <.LVL273>:
  407bae:	1bdf      	subs	r7, r3, r7

00407bb0 <.LVL274>:
  407bb0:	6437      	str	r7, [r6, #64]	; 0x40
                break;
  407bb2:	e41c      	b.n	4073ee <.LVL113>

00407bb4 <.LVL275>:
            state->mode = TYPE;
  407bb4:	230b      	movs	r3, #11
  407bb6:	7033      	strb	r3, [r6, #0]
            break;
  407bb8:	e419      	b.n	4073ee <.LVL113>

00407bba <.LVL276>:
            state->nlen = BITS(5) + 257;
  407bba:	f00b 021f 	and.w	r2, fp, #31
  407bbe:	f202 1201 	addw	r2, r2, #257	; 0x101
  407bc2:	6632      	str	r2, [r6, #96]	; 0x60

00407bc4 <.LVL277>:
            state->ndist = BITS(5) + 1;
  407bc4:	f3cb 1344 	ubfx	r3, fp, #5, #5
  407bc8:	3301      	adds	r3, #1
  407bca:	6673      	str	r3, [r6, #100]	; 0x64

00407bcc <.LVL278>:
            state->ncode = BITS(4) + 4;
  407bcc:	f3cb 2183 	ubfx	r1, fp, #10, #4
  407bd0:	3104      	adds	r1, #4
  407bd2:	65f1      	str	r1, [r6, #92]	; 0x5c
            DROPBITS(4);
  407bd4:	ea4f 3b9b 	mov.w	fp, fp, lsr #14

00407bd8 <.LVL279>:
  407bd8:	3c0e      	subs	r4, #14

00407bda <.LVL280>:
            if (state->nlen > 286 || state->ndist > 30) {
  407bda:	2b1e      	cmp	r3, #30
  407bdc:	d82d      	bhi.n	407c3a <.LVL287>
  407bde:	f5b2 7f8f 	cmp.w	r2, #286	; 0x11e
  407be2:	d82a      	bhi.n	407c3a <.LVL287>
            state->have = 0;
  407be4:	2300      	movs	r3, #0
  407be6:	66b3      	str	r3, [r6, #104]	; 0x68
            state->mode = LENLENS;
  407be8:	2311      	movs	r3, #17
  407bea:	7033      	strb	r3, [r6, #0]
            while (state->have < state->ncode) {
  407bec:	6eb3      	ldr	r3, [r6, #104]	; 0x68
  407bee:	6df7      	ldr	r7, [r6, #92]	; 0x5c
  407bf0:	42bb      	cmp	r3, r7
  407bf2:	d22d      	bcs.n	407c50 <.LVL289>
  407bf4:	1c58      	adds	r0, r3, #1
  407bf6:	4a31      	ldr	r2, [pc, #196]	; (407cbc <.LVL290+0x20>)
  407bf8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  407bfc:	1e99      	subs	r1, r3, #2
  407bfe:	3701      	adds	r7, #1
                NEEDBITS(3);
  407c00:	2c02      	cmp	r4, #2
  407c02:	d822      	bhi.n	407c4a <.LVL287+0x10>
  407c04:	2d00      	cmp	r5, #0
  407c06:	f43f ae6b 	beq.w	4078e0 <.L124>
  407c0a:	3d01      	subs	r5, #1
  407c0c:	f10a 0201 	add.w	r2, sl, #1

00407c10 <.LVL282>:
  407c10:	f89a 3000 	ldrb.w	r3, [sl]
  407c14:	40a3      	lsls	r3, r4
  407c16:	449b      	add	fp, r3
  407c18:	3408      	adds	r4, #8
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
  407c1a:	66b0      	str	r0, [r6, #104]	; 0x68
  407c1c:	f831 3f02 	ldrh.w	r3, [r1, #2]!
  407c20:	3338      	adds	r3, #56	; 0x38
  407c22:	f00b 0e07 	and.w	lr, fp, #7
  407c26:	f826 e013 	strh.w	lr, [r6, r3, lsl #1]
                DROPBITS(3);
  407c2a:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
  407c2e:	3c03      	subs	r4, #3
  407c30:	3001      	adds	r0, #1
            while (state->have < state->ncode) {
  407c32:	42b8      	cmp	r0, r7
  407c34:	d00b      	beq.n	407c4e <.LVL288>
  407c36:	4692      	mov	sl, r2
  407c38:	e7e2      	b.n	407c00 <.LVL280+0x26>

00407c3a <.LVL287>:
                strm->msg = (char *)"too many length or distance symbols";
  407c3a:	4b1d      	ldr	r3, [pc, #116]	; (407cb0 <.LVL290+0x14>)
  407c3c:	33ac      	adds	r3, #172	; 0xac
  407c3e:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  407c42:	231d      	movs	r3, #29
  407c44:	7033      	strb	r3, [r6, #0]
                break;
  407c46:	f7ff bbd2 	b.w	4073ee <.LVL113>
                NEEDBITS(3);
  407c4a:	4652      	mov	r2, sl
  407c4c:	e7e5      	b.n	407c1a <.LVL282+0xa>

00407c4e <.LVL288>:
  407c4e:	4692      	mov	sl, r2

00407c50 <.LVL289>:
            while (state->have < 19)
  407c50:	6eb3      	ldr	r3, [r6, #104]	; 0x68
  407c52:	2b12      	cmp	r3, #18
  407c54:	d80e      	bhi.n	407c74 <.LVL289+0x24>
  407c56:	4a19      	ldr	r2, [pc, #100]	; (407cbc <.LVL290+0x20>)
  407c58:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  407c5c:	1e9a      	subs	r2, r3, #2
                state->lens[order[state->have++]] = 0;
  407c5e:	2100      	movs	r1, #0
  407c60:	980a      	ldr	r0, [sp, #40]	; 0x28
  407c62:	f832 3f02 	ldrh.w	r3, [r2, #2]!
  407c66:	3338      	adds	r3, #56	; 0x38
  407c68:	f826 1013 	strh.w	r1, [r6, r3, lsl #1]
            while (state->have < 19)
  407c6c:	4290      	cmp	r0, r2
  407c6e:	d1f8      	bne.n	407c62 <.LVL289+0x12>
  407c70:	2313      	movs	r3, #19
  407c72:	66b3      	str	r3, [r6, #104]	; 0x68
            state->next = state->codes;
  407c74:	f506 63a6 	add.w	r3, r6, #1328	; 0x530
  407c78:	66f3      	str	r3, [r6, #108]	; 0x6c
            state->lencode = (code const FAR *)(state->next);
  407c7a:	64f3      	str	r3, [r6, #76]	; 0x4c
            state->lenbits = 7;
  407c7c:	2307      	movs	r3, #7
  407c7e:	6573      	str	r3, [r6, #84]	; 0x54
                                &(state->lenbits), state->work);
  407c80:	f506 733c 	add.w	r3, r6, #752	; 0x2f0
            ret = inflate_table(CODES, state->lens, 19, &(state->next),
  407c84:	9301      	str	r3, [sp, #4]
  407c86:	f106 0354 	add.w	r3, r6, #84	; 0x54
  407c8a:	9300      	str	r3, [sp, #0]
  407c8c:	f106 036c 	add.w	r3, r6, #108	; 0x6c
  407c90:	2213      	movs	r2, #19
  407c92:	f106 0170 	add.w	r1, r6, #112	; 0x70
  407c96:	2000      	movs	r0, #0
  407c98:	f009 fb20 	bl	4112dc <.LFE186>

00407c9c <.LVL290>:
            if (ret) {
  407c9c:	9003      	str	r0, [sp, #12]
  407c9e:	b178      	cbz	r0, 407cc0 <.LVL290+0x24>
                strm->msg = (char *)"invalid code lengths set";
  407ca0:	4b03      	ldr	r3, [pc, #12]	; (407cb0 <.LVL290+0x14>)
  407ca2:	33d0      	adds	r3, #208	; 0xd0
  407ca4:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  407ca8:	231d      	movs	r3, #29
  407caa:	7033      	strb	r3, [r6, #0]
                break;
  407cac:	f7ff bb9f 	b.w	4073ee <.LVL113>
  407cb0:	00414df0 	.word	0x00414df0
  407cb4:	0040c9f4 	.word	0x0040c9f4
  407cb8:	0041aaa4 	.word	0x0041aaa4
  407cbc:	0041d300 	.word	0x0041d300
            state->have = 0;
  407cc0:	2300      	movs	r3, #0
  407cc2:	66b3      	str	r3, [r6, #104]	; 0x68
            state->mode = CODELENS;
  407cc4:	2312      	movs	r3, #18
  407cc6:	7033      	strb	r3, [r6, #0]

00407cc8 <.LVL291>:
            while (state->have < state->nlen + state->ndist) {
  407cc8:	6e32      	ldr	r2, [r6, #96]	; 0x60
  407cca:	6e73      	ldr	r3, [r6, #100]	; 0x64
  407ccc:	eb02 0e03 	add.w	lr, r2, r3
                    here = state->lencode[BITS(state->lenbits)];
  407cd0:	f04f 0c01 	mov.w	ip, #1
            while (state->have < state->nlen + state->ndist) {
  407cd4:	6eb1      	ldr	r1, [r6, #104]	; 0x68
  407cd6:	4571      	cmp	r1, lr
  407cd8:	f080 80bb 	bcs.w	407e52 <.LVL342>
                    here = state->lencode[BITS(state->lenbits)];
  407cdc:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  407cde:	6d73      	ldr	r3, [r6, #84]	; 0x54
  407ce0:	fa0c f303 	lsl.w	r3, ip, r3
  407ce4:	1e58      	subs	r0, r3, #1
  407ce6:	ea0b 0300 	and.w	r3, fp, r0
  407cea:	eb02 0383 	add.w	r3, r2, r3, lsl #2

00407cee <.LVL292>:
  407cee:	785f      	ldrb	r7, [r3, #1]

00407cf0 <.LVL293>:
  407cf0:	885b      	ldrh	r3, [r3, #2]

00407cf2 <.LVL294>:
                    if ((unsigned)(here.bits) <= bits) break;
  407cf2:	46b8      	mov	r8, r7
  407cf4:	42bc      	cmp	r4, r7
  407cf6:	d214      	bcs.n	407d22 <.LVL303>
                    PULLBYTE();
  407cf8:	2d00      	cmp	r5, #0
  407cfa:	f43f adf1 	beq.w	4078e0 <.L124>

00407cfe <.LVL295>:
  407cfe:	3d01      	subs	r5, #1
  407d00:	f81a 3b01 	ldrb.w	r3, [sl], #1

00407d04 <.LVL297>:
  407d04:	40a3      	lsls	r3, r4
  407d06:	449b      	add	fp, r3
  407d08:	3408      	adds	r4, #8

00407d0a <.LVL299>:
                    here = state->lencode[BITS(state->lenbits)];
  407d0a:	ea0b 0300 	and.w	r3, fp, r0
  407d0e:	eb02 0383 	add.w	r3, r2, r3, lsl #2

00407d12 <.LVL300>:
  407d12:	785f      	ldrb	r7, [r3, #1]

00407d14 <.LVL301>:
  407d14:	885b      	ldrh	r3, [r3, #2]

00407d16 <.LVL302>:
                    if ((unsigned)(here.bits) <= bits) break;
  407d16:	46b8      	mov	r8, r7
  407d18:	42a7      	cmp	r7, r4
  407d1a:	d902      	bls.n	407d22 <.LVL303>
                    PULLBYTE();
  407d1c:	2d00      	cmp	r5, #0
  407d1e:	d1ee      	bne.n	407cfe <.LVL295>
  407d20:	e5de      	b.n	4078e0 <.L124>

00407d22 <.LVL303>:
                if (here.val < 16) {
  407d22:	2b0f      	cmp	r3, #15
  407d24:	d809      	bhi.n	407d3a <.LVL303+0x18>
                    DROPBITS(here.bits);
  407d26:	fa2b fb07 	lsr.w	fp, fp, r7
  407d2a:	eba4 0408 	sub.w	r4, r4, r8
                    state->lens[state->have++] = here.val;
  407d2e:	1c4a      	adds	r2, r1, #1
  407d30:	66b2      	str	r2, [r6, #104]	; 0x68
  407d32:	3138      	adds	r1, #56	; 0x38
  407d34:	f826 3011 	strh.w	r3, [r6, r1, lsl #1]
  407d38:	e7cc      	b.n	407cd4 <.LVL291+0xc>
                    if (here.val == 16) {
  407d3a:	2b10      	cmp	r3, #16
  407d3c:	d013      	beq.n	407d66 <.LVL309+0xa>
                    else if (here.val == 17) {
  407d3e:	2b11      	cmp	r3, #17
  407d40:	d03b      	beq.n	407dba <.LVL320+0x10>
                        NEEDBITS(here.bits + 7);
  407d42:	463a      	mov	r2, r7
  407d44:	3707      	adds	r7, #7
  407d46:	42a7      	cmp	r7, r4
  407d48:	d959      	bls.n	407dfe <.LVL331>
  407d4a:	2d00      	cmp	r5, #0
  407d4c:	f43f adc8 	beq.w	4078e0 <.L124>
  407d50:	3d01      	subs	r5, #1
  407d52:	f81a 3b01 	ldrb.w	r3, [sl], #1

00407d56 <.LVL307>:
  407d56:	40a3      	lsls	r3, r4
  407d58:	449b      	add	fp, r3
  407d5a:	3408      	adds	r4, #8

00407d5c <.LVL309>:
  407d5c:	42bc      	cmp	r4, r7
  407d5e:	d24e      	bcs.n	407dfe <.LVL331>
  407d60:	2d00      	cmp	r5, #0
  407d62:	d1f5      	bne.n	407d50 <.LVL303+0x2e>
  407d64:	e5bc      	b.n	4078e0 <.L124>
                        NEEDBITS(here.bits + 2);
  407d66:	463a      	mov	r2, r7
  407d68:	3702      	adds	r7, #2
  407d6a:	42a7      	cmp	r7, r4
  407d6c:	d90d      	bls.n	407d8a <.LVL313+0xa>
  407d6e:	2d00      	cmp	r5, #0
  407d70:	f43f adb6 	beq.w	4078e0 <.L124>
  407d74:	3d01      	subs	r5, #1
  407d76:	f81a 3b01 	ldrb.w	r3, [sl], #1

00407d7a <.LVL311>:
  407d7a:	40a3      	lsls	r3, r4
  407d7c:	449b      	add	fp, r3
  407d7e:	3408      	adds	r4, #8

00407d80 <.LVL313>:
  407d80:	42bc      	cmp	r4, r7
  407d82:	d202      	bcs.n	407d8a <.LVL313+0xa>
  407d84:	2d00      	cmp	r5, #0
  407d86:	d1f5      	bne.n	407d74 <.LVL309+0x18>
  407d88:	e5aa      	b.n	4078e0 <.L124>
                        DROPBITS(here.bits);
  407d8a:	fa2b fb02 	lsr.w	fp, fp, r2
  407d8e:	eba4 0408 	sub.w	r4, r4, r8
                        if (state->have == 0) {
  407d92:	b151      	cbz	r1, 407daa <.LVL320>
                        len = state->lens[state->have - 1];
  407d94:	f101 0337 	add.w	r3, r1, #55	; 0x37
  407d98:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]

00407d9c <.LVL316>:
                        copy = 3 + BITS(2);
  407d9c:	f00b 0203 	and.w	r2, fp, #3
  407da0:	3203      	adds	r2, #3

00407da2 <.LVL317>:
                        DROPBITS(2);
  407da2:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
  407da6:	3c02      	subs	r4, #2
  407da8:	e038      	b.n	407e1c <.LVL338>

00407daa <.LVL320>:
                            strm->msg = (char *)"invalid bit length repeat";
  407daa:	4bc0      	ldr	r3, [pc, #768]	; (4080ac <.LVL395+0xa>)
  407dac:	33ec      	adds	r3, #236	; 0xec
  407dae:	f8c9 3018 	str.w	r3, [r9, #24]
                            state->mode = BAD;
  407db2:	231d      	movs	r3, #29
  407db4:	7033      	strb	r3, [r6, #0]
                            break;
  407db6:	f7ff bb1a 	b.w	4073ee <.LVL113>
                        NEEDBITS(here.bits + 3);
  407dba:	463a      	mov	r2, r7
  407dbc:	3703      	adds	r7, #3
  407dbe:	42a7      	cmp	r7, r4
  407dc0:	d90d      	bls.n	407dde <.LVL324+0xa>
  407dc2:	2d00      	cmp	r5, #0
  407dc4:	f43f ad8c 	beq.w	4078e0 <.L124>
  407dc8:	3d01      	subs	r5, #1
  407dca:	f81a 3b01 	ldrb.w	r3, [sl], #1

00407dce <.LVL322>:
  407dce:	40a3      	lsls	r3, r4
  407dd0:	449b      	add	fp, r3
  407dd2:	3408      	adds	r4, #8

00407dd4 <.LVL324>:
  407dd4:	42bc      	cmp	r4, r7
  407dd6:	d202      	bcs.n	407dde <.LVL324+0xa>
  407dd8:	2d00      	cmp	r5, #0
  407dda:	d1f5      	bne.n	407dc8 <.LVL320+0x1e>
  407ddc:	e580      	b.n	4078e0 <.L124>
                        DROPBITS(here.bits);
  407dde:	fa2b fb02 	lsr.w	fp, fp, r2

00407de2 <.LVL325>:
                        copy = 3 + BITS(3);
  407de2:	f00b 0207 	and.w	r2, fp, #7

00407de6 <.LVL326>:
  407de6:	3203      	adds	r2, #3

00407de8 <.LVL327>:
                        DROPBITS(3);
  407de8:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
  407dec:	f1c8 28ff 	rsb	r8, r8, #4278255360	; 0xff00ff00

00407df0 <.LVL329>:
  407df0:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
  407df4:	f108 08fd 	add.w	r8, r8, #253	; 0xfd
  407df8:	4444      	add	r4, r8

00407dfa <.LVL330>:
                        len = 0;
  407dfa:	2000      	movs	r0, #0
  407dfc:	e00e      	b.n	407e1c <.LVL338>

00407dfe <.LVL331>:
                        DROPBITS(here.bits);
  407dfe:	fa2b fb02 	lsr.w	fp, fp, r2

00407e02 <.LVL332>:
                        copy = 11 + BITS(7);
  407e02:	f00b 027f 	and.w	r2, fp, #127	; 0x7f

00407e06 <.LVL333>:
  407e06:	320b      	adds	r2, #11

00407e08 <.LVL334>:
                        DROPBITS(7);
  407e08:	ea4f 1bdb 	mov.w	fp, fp, lsr #7
  407e0c:	f1c8 28ff 	rsb	r8, r8, #4278255360	; 0xff00ff00

00407e10 <.LVL336>:
  407e10:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
  407e14:	f108 08f9 	add.w	r8, r8, #249	; 0xf9
  407e18:	4444      	add	r4, r8

00407e1a <.LVL337>:
                        len = 0;
  407e1a:	2000      	movs	r0, #0

00407e1c <.LVL338>:
                    if (state->have + copy > state->nlen + state->ndist) {
  407e1c:	1857      	adds	r7, r2, r1
  407e1e:	45be      	cmp	lr, r7
  407e20:	d30f      	bcc.n	407e42 <.LVL341>

00407e22 <.LVL339>:
                    while (copy--)
  407e22:	2a00      	cmp	r2, #0
  407e24:	f43f af56 	beq.w	407cd4 <.LVL291+0xc>
  407e28:	eb06 0341 	add.w	r3, r6, r1, lsl #1
  407e2c:	336e      	adds	r3, #110	; 0x6e
  407e2e:	3137      	adds	r1, #55	; 0x37
  407e30:	440a      	add	r2, r1

00407e32 <.LVL340>:
  407e32:	eb06 0242 	add.w	r2, r6, r2, lsl #1
                        state->lens[state->have++] = (unsigned short)len;
  407e36:	f823 0f02 	strh.w	r0, [r3, #2]!
                    while (copy--)
  407e3a:	4293      	cmp	r3, r2
  407e3c:	d1fb      	bne.n	407e36 <.LVL340+0x4>
  407e3e:	66b7      	str	r7, [r6, #104]	; 0x68
  407e40:	e748      	b.n	407cd4 <.LVL291+0xc>

00407e42 <.LVL341>:
                        strm->msg = (char *)"invalid bit length repeat";
  407e42:	4b9a      	ldr	r3, [pc, #616]	; (4080ac <.LVL395+0xa>)
  407e44:	33ec      	adds	r3, #236	; 0xec
  407e46:	f8c9 3018 	str.w	r3, [r9, #24]
                        state->mode = BAD;
  407e4a:	231d      	movs	r3, #29
  407e4c:	7033      	strb	r3, [r6, #0]
                        break;
  407e4e:	f7ff bace 	b.w	4073ee <.LVL113>

00407e52 <.LVL342>:
            if (state->mode == BAD) break;
  407e52:	7833      	ldrb	r3, [r6, #0]
  407e54:	2b1d      	cmp	r3, #29
  407e56:	f43f aaca 	beq.w	4073ee <.LVL113>
            if (state->lens[256] == 0) {
  407e5a:	f8b6 3270 	ldrh.w	r3, [r6, #624]	; 0x270
  407e5e:	b943      	cbnz	r3, 407e72 <.LVL342+0x20>
                strm->msg = (char *)"invalid code -- missing end-of-block";
  407e60:	4b92      	ldr	r3, [pc, #584]	; (4080ac <.LVL395+0xa>)
  407e62:	f503 7384 	add.w	r3, r3, #264	; 0x108
  407e66:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  407e6a:	231d      	movs	r3, #29
  407e6c:	7033      	strb	r3, [r6, #0]
                break;
  407e6e:	f7ff babe 	b.w	4073ee <.LVL113>
            state->next = state->codes;
  407e72:	f506 63a6 	add.w	r3, r6, #1328	; 0x530
  407e76:	66f3      	str	r3, [r6, #108]	; 0x6c
            state->lencode = (code const FAR *)(state->next);
  407e78:	64f3      	str	r3, [r6, #76]	; 0x4c
            state->lenbits = 9;
  407e7a:	2309      	movs	r3, #9
  407e7c:	6573      	str	r3, [r6, #84]	; 0x54
            ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),
  407e7e:	f106 0770 	add.w	r7, r6, #112	; 0x70
  407e82:	f106 036c 	add.w	r3, r6, #108	; 0x6c
  407e86:	461a      	mov	r2, r3
  407e88:	930b      	str	r3, [sp, #44]	; 0x2c
                                &(state->lenbits), state->work);
  407e8a:	f506 783c 	add.w	r8, r6, #752	; 0x2f0
            ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),
  407e8e:	f8cd 8004 	str.w	r8, [sp, #4]
  407e92:	f106 0354 	add.w	r3, r6, #84	; 0x54
  407e96:	9300      	str	r3, [sp, #0]
  407e98:	4613      	mov	r3, r2
  407e9a:	6e32      	ldr	r2, [r6, #96]	; 0x60
  407e9c:	4639      	mov	r1, r7
  407e9e:	2001      	movs	r0, #1
  407ea0:	f009 fa1c 	bl	4112dc <.LFE186>

00407ea4 <.LVL343>:
            if (ret) {
  407ea4:	9003      	str	r0, [sp, #12]
  407ea6:	b140      	cbz	r0, 407eba <.LVL343+0x16>
                strm->msg = (char *)"invalid literal/lengths set";
  407ea8:	4b80      	ldr	r3, [pc, #512]	; (4080ac <.LVL395+0xa>)
  407eaa:	f503 7398 	add.w	r3, r3, #304	; 0x130
  407eae:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  407eb2:	231d      	movs	r3, #29
  407eb4:	7033      	strb	r3, [r6, #0]
                break;
  407eb6:	f7ff ba9a 	b.w	4073ee <.LVL113>
            state->distcode = (code const FAR *)(state->next);
  407eba:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
  407ebc:	6533      	str	r3, [r6, #80]	; 0x50
            state->distbits = 6;
  407ebe:	2306      	movs	r3, #6
  407ec0:	65b3      	str	r3, [r6, #88]	; 0x58
            ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,
  407ec2:	6e31      	ldr	r1, [r6, #96]	; 0x60
  407ec4:	f8cd 8004 	str.w	r8, [sp, #4]
  407ec8:	f106 0358 	add.w	r3, r6, #88	; 0x58
  407ecc:	9300      	str	r3, [sp, #0]
  407ece:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407ed0:	6e72      	ldr	r2, [r6, #100]	; 0x64
  407ed2:	eb07 0141 	add.w	r1, r7, r1, lsl #1
  407ed6:	2002      	movs	r0, #2

00407ed8 <.LVL344>:
  407ed8:	f009 fa00 	bl	4112dc <.LFE186>

00407edc <.LVL345>:
            if (ret) {
  407edc:	9003      	str	r0, [sp, #12]
  407ede:	b140      	cbz	r0, 407ef2 <.LVL345+0x16>
                strm->msg = (char *)"invalid distances set";
  407ee0:	4b72      	ldr	r3, [pc, #456]	; (4080ac <.LVL395+0xa>)
  407ee2:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
  407ee6:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  407eea:	231d      	movs	r3, #29
  407eec:	7033      	strb	r3, [r6, #0]
                break;
  407eee:	f7ff ba7e 	b.w	4073ee <.LVL113>
            state->mode = LEN_;
  407ef2:	2313      	movs	r3, #19
  407ef4:	7033      	strb	r3, [r6, #0]
            if (flush == Z_TREES) goto inf_leave;
  407ef6:	9b07      	ldr	r3, [sp, #28]
  407ef8:	2b06      	cmp	r3, #6
  407efa:	f43f acf1 	beq.w	4078e0 <.L124>

00407efe <.LVL346>:
            state->mode = LEN;
  407efe:	2314      	movs	r3, #20
  407f00:	7033      	strb	r3, [r6, #0]
            if (have >= 6 && left >= 258) {
  407f02:	2d05      	cmp	r5, #5
  407f04:	d903      	bls.n	407f0e <.LVL346+0x10>
  407f06:	9a05      	ldr	r2, [sp, #20]
  407f08:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
  407f0c:	d22a      	bcs.n	407f64 <.LVL359>
            state->back = 0;
  407f0e:	2200      	movs	r2, #0
  407f10:	f641 33c4 	movw	r3, #7108	; 0x1bc4
  407f14:	50f2      	str	r2, [r6, r3]
                here = state->lencode[BITS(state->lenbits)];
  407f16:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  407f18:	6d73      	ldr	r3, [r6, #84]	; 0x54
  407f1a:	2701      	movs	r7, #1
  407f1c:	409f      	lsls	r7, r3
  407f1e:	3f01      	subs	r7, #1
  407f20:	ea0b 0307 	and.w	r3, fp, r7
  407f24:	eb02 0083 	add.w	r0, r2, r3, lsl #2
  407f28:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]

00407f2c <.LVL347>:
  407f2c:	7843      	ldrb	r3, [r0, #1]

00407f2e <.LVL348>:
  407f2e:	8840      	ldrh	r0, [r0, #2]

00407f30 <.LVL349>:
                if ((unsigned)(here.bits) <= bits) break;
  407f30:	930b      	str	r3, [sp, #44]	; 0x2c
  407f32:	429c      	cmp	r4, r3
  407f34:	d23f      	bcs.n	407fb6 <.LVL370>
                PULLBYTE();
  407f36:	2d00      	cmp	r5, #0
  407f38:	f43f acd2 	beq.w	4078e0 <.L124>

00407f3c <.LVL350>:
  407f3c:	3d01      	subs	r5, #1
  407f3e:	f81a 3b01 	ldrb.w	r3, [sl], #1

00407f42 <.LVL352>:
  407f42:	40a3      	lsls	r3, r4
  407f44:	449b      	add	fp, r3
  407f46:	3408      	adds	r4, #8

00407f48 <.LVL354>:
                here = state->lencode[BITS(state->lenbits)];
  407f48:	ea0b 0307 	and.w	r3, fp, r7
  407f4c:	eb02 0083 	add.w	r0, r2, r3, lsl #2

00407f50 <.LVL355>:
  407f50:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]

00407f54 <.LVL356>:
  407f54:	7843      	ldrb	r3, [r0, #1]

00407f56 <.LVL357>:
  407f56:	8840      	ldrh	r0, [r0, #2]

00407f58 <.LVL358>:
                if ((unsigned)(here.bits) <= bits) break;
  407f58:	469e      	mov	lr, r3
  407f5a:	42a3      	cmp	r3, r4
  407f5c:	d92a      	bls.n	407fb4 <.LVL369>
                PULLBYTE();
  407f5e:	2d00      	cmp	r5, #0
  407f60:	d1ec      	bne.n	407f3c <.LVL350>
  407f62:	e4bd      	b.n	4078e0 <.L124>

00407f64 <.LVL359>:
                RESTORE();
  407f64:	9b06      	ldr	r3, [sp, #24]
  407f66:	f8c9 300c 	str.w	r3, [r9, #12]
  407f6a:	f8c9 2010 	str.w	r2, [r9, #16]
  407f6e:	f8c9 a000 	str.w	sl, [r9]
  407f72:	f8c9 5004 	str.w	r5, [r9, #4]
  407f76:	f8c6 b038 	str.w	fp, [r6, #56]	; 0x38
  407f7a:	63f4      	str	r4, [r6, #60]	; 0x3c
                inflate_fast(strm, out);
  407f7c:	9904      	ldr	r1, [sp, #16]
  407f7e:	4648      	mov	r0, r9
  407f80:	f007 ffac 	bl	40fedc <.LFE31>

00407f84 <.LVL360>:
                LOAD();
  407f84:	f8d9 300c 	ldr.w	r3, [r9, #12]
  407f88:	9306      	str	r3, [sp, #24]

00407f8a <.LVL361>:
  407f8a:	f8d9 3010 	ldr.w	r3, [r9, #16]

00407f8e <.LVL362>:
  407f8e:	9305      	str	r3, [sp, #20]

00407f90 <.LVL363>:
  407f90:	f8d9 a000 	ldr.w	sl, [r9]
  407f94:	f8d9 5004 	ldr.w	r5, [r9, #4]
  407f98:	f8d6 b038 	ldr.w	fp, [r6, #56]	; 0x38
  407f9c:	6bf4      	ldr	r4, [r6, #60]	; 0x3c
                if (state->mode == TYPE)
  407f9e:	7833      	ldrb	r3, [r6, #0]

00407fa0 <.LVL368>:
  407fa0:	2b0b      	cmp	r3, #11
  407fa2:	f47f aa24 	bne.w	4073ee <.LVL113>
                    state->back = -1;
  407fa6:	f04f 32ff 	mov.w	r2, #4294967295
  407faa:	f641 33c4 	movw	r3, #7108	; 0x1bc4
  407fae:	50f2      	str	r2, [r6, r3]
  407fb0:	f7ff ba1d 	b.w	4073ee <.LVL113>

00407fb4 <.LVL369>:
  407fb4:	930b      	str	r3, [sp, #44]	; 0x2c

00407fb6 <.LVL370>:
            if (here.op && (here.op & 0xf0) == 0) {
  407fb6:	2900      	cmp	r1, #0
  407fb8:	d03b      	beq.n	408032 <.LVL386>
  407fba:	f011 0ff0 	tst.w	r1, #240	; 0xf0
  407fbe:	d138      	bne.n	408032 <.LVL386>
                    here = state->lencode[last.val +
  407fc0:	4680      	mov	r8, r0
                            (BITS(last.bits + last.op) >> last.bits)];
  407fc2:	461f      	mov	r7, r3
  407fc4:	4419      	add	r1, r3
  407fc6:	f04f 0c01 	mov.w	ip, #1
  407fca:	fa0c fc01 	lsl.w	ip, ip, r1
  407fce:	f10c 3cff 	add.w	ip, ip, #4294967295
  407fd2:	ea0c 010b 	and.w	r1, ip, fp
  407fd6:	fa21 f303 	lsr.w	r3, r1, r3
                    here = state->lencode[last.val +
  407fda:	4403      	add	r3, r0
  407fdc:	eb02 0083 	add.w	r0, r2, r3, lsl #2
  407fe0:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]

00407fe4 <.LVL371>:
  407fe4:	7843      	ldrb	r3, [r0, #1]

00407fe6 <.LVL372>:
  407fe6:	8840      	ldrh	r0, [r0, #2]

00407fe8 <.LVL373>:
                    if ((unsigned)(last.bits + here.bits) <= bits) break;
  407fe8:	eb03 0e07 	add.w	lr, r3, r7
  407fec:	45a6      	cmp	lr, r4
  407fee:	d919      	bls.n	408024 <.LVL383>
                    PULLBYTE();
  407ff0:	2d00      	cmp	r5, #0
  407ff2:	f43f ac75 	beq.w	4078e0 <.L124>

00407ff6 <.LVL374>:
  407ff6:	3d01      	subs	r5, #1
  407ff8:	f81a 3b01 	ldrb.w	r3, [sl], #1

00407ffc <.LVL376>:
  407ffc:	40a3      	lsls	r3, r4
  407ffe:	449b      	add	fp, r3
  408000:	3408      	adds	r4, #8

00408002 <.LVL378>:
                            (BITS(last.bits + last.op) >> last.bits)];
  408002:	ea0b 030c 	and.w	r3, fp, ip
  408006:	40fb      	lsrs	r3, r7
                    here = state->lencode[last.val +
  408008:	4443      	add	r3, r8
  40800a:	eb02 0083 	add.w	r0, r2, r3, lsl #2

0040800e <.LVL379>:
  40800e:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]

00408012 <.LVL380>:
  408012:	7843      	ldrb	r3, [r0, #1]

00408014 <.LVL381>:
  408014:	8840      	ldrh	r0, [r0, #2]

00408016 <.LVL382>:
                    if ((unsigned)(last.bits + here.bits) <= bits) break;
  408016:	eb03 0e07 	add.w	lr, r3, r7
  40801a:	45a6      	cmp	lr, r4
  40801c:	d902      	bls.n	408024 <.LVL383>
                    PULLBYTE();
  40801e:	2d00      	cmp	r5, #0
  408020:	d1e9      	bne.n	407ff6 <.LVL374>
  408022:	e45d      	b.n	4078e0 <.L124>

00408024 <.LVL383>:
                DROPBITS(last.bits);
  408024:	fa2b fb07 	lsr.w	fp, fp, r7
  408028:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40802a:	1aa4      	subs	r4, r4, r2
                state->back += last.bits;
  40802c:	f641 32c4 	movw	r2, #7108	; 0x1bc4
  408030:	50b7      	str	r7, [r6, r2]

00408032 <.LVL386>:
            DROPBITS(here.bits);
  408032:	fa2b fb03 	lsr.w	fp, fp, r3
  408036:	1ae4      	subs	r4, r4, r3
            state->back += here.bits;
  408038:	f641 37c4 	movw	r7, #7108	; 0x1bc4
  40803c:	59f2      	ldr	r2, [r6, r7]
  40803e:	4413      	add	r3, r2

00408040 <.LVL389>:
  408040:	51f3      	str	r3, [r6, r7]
            state->length = (unsigned)here.val;
  408042:	6430      	str	r0, [r6, #64]	; 0x40
            if ((int)(here.op) == 0) {
  408044:	b919      	cbnz	r1, 40804e <.LVL389+0xe>
                state->mode = LIT;
  408046:	2319      	movs	r3, #25
  408048:	7033      	strb	r3, [r6, #0]
                break;
  40804a:	f7ff b9d0 	b.w	4073ee <.LVL113>
            if (here.op & 32) {
  40804e:	f011 0f20 	tst.w	r1, #32
  408052:	d008      	beq.n	408066 <.LVL389+0x26>
                state->back = -1;
  408054:	f04f 32ff 	mov.w	r2, #4294967295
  408058:	f641 33c4 	movw	r3, #7108	; 0x1bc4
  40805c:	50f2      	str	r2, [r6, r3]
                state->mode = TYPE;
  40805e:	230b      	movs	r3, #11
  408060:	7033      	strb	r3, [r6, #0]
                break;
  408062:	f7ff b9c4 	b.w	4073ee <.LVL113>
            if (here.op & 64) {
  408066:	f011 0f40 	tst.w	r1, #64	; 0x40
  40806a:	d008      	beq.n	40807e <.LVL389+0x3e>
                strm->msg = (char *)"invalid literal/length code";
  40806c:	4b0f      	ldr	r3, [pc, #60]	; (4080ac <.LVL395+0xa>)
  40806e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
  408072:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  408076:	231d      	movs	r3, #29
  408078:	7033      	strb	r3, [r6, #0]
                break;
  40807a:	f7ff b9b8 	b.w	4073ee <.LVL113>
            state->extra = (unsigned)(here.op) & 15;
  40807e:	f001 010f 	and.w	r1, r1, #15

00408082 <.LVL390>:
  408082:	64b1      	str	r1, [r6, #72]	; 0x48
            state->mode = LENEXT;
  408084:	2315      	movs	r3, #21
  408086:	7033      	strb	r3, [r6, #0]

00408088 <.LVL391>:
            if (state->extra) {
  408088:	6cb2      	ldr	r2, [r6, #72]	; 0x48
  40808a:	b30a      	cbz	r2, 4080d0 <.LVL395+0x2e>
                NEEDBITS(state->extra);
  40808c:	4294      	cmp	r4, r2
  40808e:	d20f      	bcs.n	4080b0 <.LVL395+0xe>
  408090:	2d00      	cmp	r5, #0
  408092:	f43f ac25 	beq.w	4078e0 <.L124>
  408096:	3d01      	subs	r5, #1
  408098:	f81a 3b01 	ldrb.w	r3, [sl], #1

0040809c <.LVL393>:
  40809c:	40a3      	lsls	r3, r4
  40809e:	449b      	add	fp, r3
  4080a0:	3408      	adds	r4, #8

004080a2 <.LVL395>:
  4080a2:	42a2      	cmp	r2, r4
  4080a4:	d904      	bls.n	4080b0 <.LVL395+0xe>
  4080a6:	2d00      	cmp	r5, #0
  4080a8:	d1f5      	bne.n	408096 <.LVL391+0xe>
  4080aa:	e419      	b.n	4078e0 <.L124>
  4080ac:	00414df0 	.word	0x00414df0
                state->length += BITS(state->extra);
  4080b0:	2301      	movs	r3, #1
  4080b2:	4093      	lsls	r3, r2
  4080b4:	3b01      	subs	r3, #1
  4080b6:	ea03 030b 	and.w	r3, r3, fp
  4080ba:	6c31      	ldr	r1, [r6, #64]	; 0x40
  4080bc:	440b      	add	r3, r1
  4080be:	6433      	str	r3, [r6, #64]	; 0x40
                DROPBITS(state->extra);
  4080c0:	fa2b fb02 	lsr.w	fp, fp, r2
  4080c4:	1aa4      	subs	r4, r4, r2
                state->back += state->extra;
  4080c6:	f641 31c4 	movw	r1, #7108	; 0x1bc4
  4080ca:	5873      	ldr	r3, [r6, r1]
  4080cc:	4413      	add	r3, r2
  4080ce:	5073      	str	r3, [r6, r1]
            state->was = state->length;
  4080d0:	6c32      	ldr	r2, [r6, #64]	; 0x40
  4080d2:	f641 33c8 	movw	r3, #7112	; 0x1bc8
  4080d6:	50f2      	str	r2, [r6, r3]
            state->mode = DIST;
  4080d8:	2316      	movs	r3, #22
  4080da:	7033      	strb	r3, [r6, #0]
                here = state->distcode[BITS(state->distbits)];
  4080dc:	6d32      	ldr	r2, [r6, #80]	; 0x50
  4080de:	6db3      	ldr	r3, [r6, #88]	; 0x58
  4080e0:	2701      	movs	r7, #1
  4080e2:	409f      	lsls	r7, r3
  4080e4:	3f01      	subs	r7, #1
  4080e6:	ea0b 0307 	and.w	r3, fp, r7
  4080ea:	eb02 0083 	add.w	r0, r2, r3, lsl #2
  4080ee:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]

004080f2 <.LVL398>:
  4080f2:	7843      	ldrb	r3, [r0, #1]

004080f4 <.LVL399>:
  4080f4:	8840      	ldrh	r0, [r0, #2]

004080f6 <.LVL400>:
                if ((unsigned)(here.bits) <= bits) break;
  4080f6:	930b      	str	r3, [sp, #44]	; 0x2c
  4080f8:	429c      	cmp	r4, r3
  4080fa:	d218      	bcs.n	40812e <.LVL410>
                PULLBYTE();
  4080fc:	2d00      	cmp	r5, #0
  4080fe:	f43f abef 	beq.w	4078e0 <.L124>

00408102 <.LVL401>:
  408102:	3d01      	subs	r5, #1
  408104:	f81a 3b01 	ldrb.w	r3, [sl], #1

00408108 <.LVL403>:
  408108:	40a3      	lsls	r3, r4
  40810a:	449b      	add	fp, r3
  40810c:	3408      	adds	r4, #8

0040810e <.LVL405>:
                here = state->distcode[BITS(state->distbits)];
  40810e:	ea0b 0307 	and.w	r3, fp, r7
  408112:	eb02 0083 	add.w	r0, r2, r3, lsl #2

00408116 <.LVL406>:
  408116:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]

0040811a <.LVL407>:
  40811a:	7843      	ldrb	r3, [r0, #1]

0040811c <.LVL408>:
  40811c:	8840      	ldrh	r0, [r0, #2]

0040811e <.LVL409>:
                if ((unsigned)(here.bits) <= bits) break;
  40811e:	469e      	mov	lr, r3
  408120:	42a3      	cmp	r3, r4
  408122:	d903      	bls.n	40812c <.LVL409+0xe>
                PULLBYTE();
  408124:	2d00      	cmp	r5, #0
  408126:	d1ec      	bne.n	408102 <.LVL401>
  408128:	f7ff bbda 	b.w	4078e0 <.L124>
  40812c:	930b      	str	r3, [sp, #44]	; 0x2c

0040812e <.LVL410>:
            if ((here.op & 0xf0) == 0) {
  40812e:	f011 0ff0 	tst.w	r1, #240	; 0xf0
  408132:	d13d      	bne.n	4081b0 <.LVL426>
                    here = state->distcode[last.val +
  408134:	4680      	mov	r8, r0
                            (BITS(last.bits + last.op) >> last.bits)];
  408136:	461f      	mov	r7, r3
  408138:	4419      	add	r1, r3
  40813a:	f04f 0c01 	mov.w	ip, #1
  40813e:	fa0c fc01 	lsl.w	ip, ip, r1
  408142:	f10c 3cff 	add.w	ip, ip, #4294967295
  408146:	ea0c 010b 	and.w	r1, ip, fp
  40814a:	fa21 f303 	lsr.w	r3, r1, r3
                    here = state->distcode[last.val +
  40814e:	4403      	add	r3, r0
  408150:	eb02 0083 	add.w	r0, r2, r3, lsl #2
  408154:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]

00408158 <.LVL411>:
  408158:	7843      	ldrb	r3, [r0, #1]

0040815a <.LVL412>:
  40815a:	8840      	ldrh	r0, [r0, #2]

0040815c <.LVL413>:
                    if ((unsigned)(last.bits + here.bits) <= bits) break;
  40815c:	eb03 0e07 	add.w	lr, r3, r7
  408160:	45a6      	cmp	lr, r4
  408162:	d91a      	bls.n	40819a <.LVL423>
                    PULLBYTE();
  408164:	2d00      	cmp	r5, #0
  408166:	f43f abbb 	beq.w	4078e0 <.L124>

0040816a <.LVL414>:
  40816a:	3d01      	subs	r5, #1
  40816c:	f81a 3b01 	ldrb.w	r3, [sl], #1

00408170 <.LVL416>:
  408170:	40a3      	lsls	r3, r4
  408172:	449b      	add	fp, r3
  408174:	3408      	adds	r4, #8

00408176 <.LVL418>:
                            (BITS(last.bits + last.op) >> last.bits)];
  408176:	ea0b 030c 	and.w	r3, fp, ip
  40817a:	40fb      	lsrs	r3, r7
                    here = state->distcode[last.val +
  40817c:	4443      	add	r3, r8
  40817e:	eb02 0083 	add.w	r0, r2, r3, lsl #2

00408182 <.LVL419>:
  408182:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]

00408186 <.LVL420>:
  408186:	7843      	ldrb	r3, [r0, #1]

00408188 <.LVL421>:
  408188:	8840      	ldrh	r0, [r0, #2]

0040818a <.LVL422>:
                    if ((unsigned)(last.bits + here.bits) <= bits) break;
  40818a:	eb03 0e07 	add.w	lr, r3, r7
  40818e:	45a6      	cmp	lr, r4
  408190:	d903      	bls.n	40819a <.LVL423>
                    PULLBYTE();
  408192:	2d00      	cmp	r5, #0
  408194:	d1e9      	bne.n	40816a <.LVL414>
  408196:	f7ff bba3 	b.w	4078e0 <.L124>

0040819a <.LVL423>:
                DROPBITS(last.bits);
  40819a:	fa2b fb07 	lsr.w	fp, fp, r7
  40819e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4081a0:	1aa4      	subs	r4, r4, r2
                state->back += last.bits;
  4081a2:	f641 3ec4 	movw	lr, #7108	; 0x1bc4
  4081a6:	f856 200e 	ldr.w	r2, [r6, lr]
  4081aa:	443a      	add	r2, r7
  4081ac:	f846 200e 	str.w	r2, [r6, lr]

004081b0 <.LVL426>:
            DROPBITS(here.bits);
  4081b0:	fa2b fb03 	lsr.w	fp, fp, r3
  4081b4:	1ae4      	subs	r4, r4, r3
            state->back += here.bits;
  4081b6:	f641 37c4 	movw	r7, #7108	; 0x1bc4
  4081ba:	59f2      	ldr	r2, [r6, r7]
  4081bc:	4413      	add	r3, r2

004081be <.LVL429>:
  4081be:	51f3      	str	r3, [r6, r7]
            if (here.op & 64) {
  4081c0:	f011 0f40 	tst.w	r1, #64	; 0x40
  4081c4:	d008      	beq.n	4081d8 <.LVL429+0x1a>
                strm->msg = (char *)"invalid distance code";
  4081c6:	4b9e      	ldr	r3, [pc, #632]	; (408440 <.LVL486+0x8>)
  4081c8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
  4081cc:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  4081d0:	231d      	movs	r3, #29
  4081d2:	7033      	strb	r3, [r6, #0]
                break;
  4081d4:	f7ff b90b 	b.w	4073ee <.LVL113>
            state->offset = (unsigned)here.val;
  4081d8:	6470      	str	r0, [r6, #68]	; 0x44
            state->extra = (unsigned)(here.op) & 15;
  4081da:	f001 010f 	and.w	r1, r1, #15

004081de <.LVL430>:
  4081de:	64b1      	str	r1, [r6, #72]	; 0x48
            state->mode = DISTEXT;
  4081e0:	2317      	movs	r3, #23
  4081e2:	7033      	strb	r3, [r6, #0]

004081e4 <.LVL431>:
            if (state->extra) {
  4081e4:	6cb2      	ldr	r2, [r6, #72]	; 0x48
  4081e6:	b302      	cbz	r2, 40822a <.LVL435+0x2c>
                NEEDBITS(state->extra);
  4081e8:	4294      	cmp	r4, r2
  4081ea:	d20e      	bcs.n	40820a <.LVL435+0xc>
  4081ec:	2d00      	cmp	r5, #0
  4081ee:	f43f ab77 	beq.w	4078e0 <.L124>
  4081f2:	3d01      	subs	r5, #1
  4081f4:	f81a 3b01 	ldrb.w	r3, [sl], #1

004081f8 <.LVL433>:
  4081f8:	40a3      	lsls	r3, r4
  4081fa:	449b      	add	fp, r3
  4081fc:	3408      	adds	r4, #8

004081fe <.LVL435>:
  4081fe:	42a2      	cmp	r2, r4
  408200:	d903      	bls.n	40820a <.LVL435+0xc>
  408202:	2d00      	cmp	r5, #0
  408204:	d1f5      	bne.n	4081f2 <.LVL431+0xe>
  408206:	f7ff bb6b 	b.w	4078e0 <.L124>
                state->offset += BITS(state->extra);
  40820a:	2301      	movs	r3, #1
  40820c:	4093      	lsls	r3, r2
  40820e:	3b01      	subs	r3, #1
  408210:	ea03 030b 	and.w	r3, r3, fp
  408214:	6c71      	ldr	r1, [r6, #68]	; 0x44
  408216:	440b      	add	r3, r1
  408218:	6473      	str	r3, [r6, #68]	; 0x44
                DROPBITS(state->extra);
  40821a:	fa2b fb02 	lsr.w	fp, fp, r2
  40821e:	1aa4      	subs	r4, r4, r2
                state->back += state->extra;
  408220:	f641 31c4 	movw	r1, #7108	; 0x1bc4
  408224:	5873      	ldr	r3, [r6, r1]
  408226:	4413      	add	r3, r2
  408228:	5073      	str	r3, [r6, r1]
            state->mode = MATCH;
  40822a:	2318      	movs	r3, #24
  40822c:	7033      	strb	r3, [r6, #0]
            if (left == 0) goto inf_leave;
  40822e:	9b05      	ldr	r3, [sp, #20]
  408230:	2b00      	cmp	r3, #0
  408232:	f43f ab55 	beq.w	4078e0 <.L124>
            copy = out - left;
  408236:	9a04      	ldr	r2, [sp, #16]
  408238:	1ad0      	subs	r0, r2, r3

0040823a <.LVL438>:
            if (state->offset > copy) {         /* copy from window */
  40823a:	6c73      	ldr	r3, [r6, #68]	; 0x44
  40823c:	4298      	cmp	r0, r3
  40823e:	d21d      	bcs.n	40827c <.LVL443>
                copy = state->offset - copy;
  408240:	1a18      	subs	r0, r3, r0
                if (copy > state->whave) {
  408242:	6af3      	ldr	r3, [r6, #44]	; 0x2c
  408244:	4298      	cmp	r0, r3
  408246:	d90c      	bls.n	408262 <.LVL438+0x28>
                    if (state->sane) {
  408248:	f506 53de 	add.w	r3, r6, #7104	; 0x1bc0
  40824c:	681b      	ldr	r3, [r3, #0]
  40824e:	b143      	cbz	r3, 408262 <.LVL438+0x28>
                        strm->msg = (char *)"invalid distance too far back";
  408250:	4b7b      	ldr	r3, [pc, #492]	; (408440 <.LVL486+0x8>)
  408252:	f503 73cc 	add.w	r3, r3, #408	; 0x198
  408256:	f8c9 3018 	str.w	r3, [r9, #24]
                        state->mode = BAD;
  40825a:	231d      	movs	r3, #29
  40825c:	7033      	strb	r3, [r6, #0]
                        break;
  40825e:	f7ff b8c6 	b.w	4073ee <.LVL113>
                if (copy > state->wnext) {
  408262:	6b33      	ldr	r3, [r6, #48]	; 0x30
  408264:	4298      	cmp	r0, r3
                    copy -= state->wnext;
  408266:	bf84      	itt	hi
  408268:	1ac0      	subhi	r0, r0, r3
                    from = state->window + (state->wsize - copy);
  40826a:	6ab3      	ldrhi	r3, [r6, #40]	; 0x28
                    from = state->window + (state->wnext - copy);
  40826c:	1a1b      	subs	r3, r3, r0
  40826e:	6b72      	ldr	r2, [r6, #52]	; 0x34
  408270:	4413      	add	r3, r2

00408272 <.LVL441>:
  408272:	6c32      	ldr	r2, [r6, #64]	; 0x40
  408274:	4290      	cmp	r0, r2
  408276:	bf28      	it	cs
  408278:	4610      	movcs	r0, r2

0040827a <.LVL442>:
  40827a:	e002      	b.n	408282 <.LVL444+0x2>

0040827c <.LVL443>:
                from = put - state->offset;
  40827c:	9a06      	ldr	r2, [sp, #24]
  40827e:	1ad3      	subs	r3, r2, r3

00408280 <.LVL444>:
                copy = state->length;
  408280:	6c30      	ldr	r0, [r6, #64]	; 0x40
  408282:	9905      	ldr	r1, [sp, #20]
  408284:	4288      	cmp	r0, r1
  408286:	bf28      	it	cs
  408288:	4608      	movcs	r0, r1
            left -= copy;
  40828a:	1a0a      	subs	r2, r1, r0
  40828c:	9205      	str	r2, [sp, #20]

0040828e <.LVL447>:
            state->length -= copy;
  40828e:	6c32      	ldr	r2, [r6, #64]	; 0x40

00408290 <.LVL448>:
  408290:	1a12      	subs	r2, r2, r0
  408292:	6432      	str	r2, [r6, #64]	; 0x40
  408294:	9a06      	ldr	r2, [sp, #24]
  408296:	3a01      	subs	r2, #1
  408298:	181f      	adds	r7, r3, r0

0040829a <.LVL449>:
                *put++ = *from++;
  40829a:	f813 1b01 	ldrb.w	r1, [r3], #1

0040829e <.LVL450>:
  40829e:	f802 1f01 	strb.w	r1, [r2, #1]!
            } while (--copy);
  4082a2:	42bb      	cmp	r3, r7
  4082a4:	d1f9      	bne.n	40829a <.LVL449>
  4082a6:	9b06      	ldr	r3, [sp, #24]

004082a8 <.LVL451>:
  4082a8:	4403      	add	r3, r0
  4082aa:	9306      	str	r3, [sp, #24]
            if (state->length == 0) state->mode = LEN;
  4082ac:	6c33      	ldr	r3, [r6, #64]	; 0x40
  4082ae:	2b00      	cmp	r3, #0
  4082b0:	f47f a89d 	bne.w	4073ee <.LVL113>
  4082b4:	2314      	movs	r3, #20
  4082b6:	7033      	strb	r3, [r6, #0]
  4082b8:	f7ff b899 	b.w	4073ee <.LVL113>

004082bc <.LVL452>:
            if (left == 0) goto inf_leave;
  4082bc:	9a05      	ldr	r2, [sp, #20]
  4082be:	2a00      	cmp	r2, #0
  4082c0:	f43f ab0e 	beq.w	4078e0 <.L124>

004082c4 <.LVL453>:
            *put++ = (unsigned char)(state->length);
  4082c4:	6c33      	ldr	r3, [r6, #64]	; 0x40
  4082c6:	9806      	ldr	r0, [sp, #24]
  4082c8:	7003      	strb	r3, [r0, #0]
            left--;
  4082ca:	1e53      	subs	r3, r2, #1
  4082cc:	9305      	str	r3, [sp, #20]

004082ce <.LVL454>:
            state->mode = LEN;
  4082ce:	2314      	movs	r3, #20

004082d0 <.LVL455>:
  4082d0:	7033      	strb	r3, [r6, #0]
            *put++ = (unsigned char)(state->length);
  4082d2:	1c43      	adds	r3, r0, #1

004082d4 <.LVL456>:
  4082d4:	9306      	str	r3, [sp, #24]
            break;
  4082d6:	f7ff b88a 	b.w	4073ee <.LVL113>

004082da <.LVL457>:
            if (state->wrap) {
  4082da:	68b3      	ldr	r3, [r6, #8]
  4082dc:	2b00      	cmp	r3, #0
  4082de:	d052      	beq.n	408386 <.LVL471>
                NEEDBITS(32);
  4082e0:	2c1f      	cmp	r4, #31
  4082e2:	d80e      	bhi.n	408302 <.LVL461+0xc>
  4082e4:	2d00      	cmp	r5, #0
  4082e6:	f43f aafb 	beq.w	4078e0 <.L124>
  4082ea:	3d01      	subs	r5, #1
  4082ec:	f81a 3b01 	ldrb.w	r3, [sl], #1

004082f0 <.LVL459>:
  4082f0:	40a3      	lsls	r3, r4
  4082f2:	449b      	add	fp, r3
  4082f4:	3408      	adds	r4, #8

004082f6 <.LVL461>:
  4082f6:	2c1f      	cmp	r4, #31
  4082f8:	d803      	bhi.n	408302 <.LVL461+0xc>
  4082fa:	2d00      	cmp	r5, #0
  4082fc:	d1f5      	bne.n	4082ea <.LVL457+0x10>
  4082fe:	f7ff baef 	b.w	4078e0 <.L124>
                out -= left;
  408302:	9b04      	ldr	r3, [sp, #16]
  408304:	9a05      	ldr	r2, [sp, #20]
  408306:	1a99      	subs	r1, r3, r2

00408308 <.LVL462>:
                strm->total_out += out;
  408308:	f8d9 3014 	ldr.w	r3, [r9, #20]
  40830c:	440b      	add	r3, r1
  40830e:	f8c9 3014 	str.w	r3, [r9, #20]
                state->total += out;
  408312:	69f3      	ldr	r3, [r6, #28]
  408314:	440b      	add	r3, r1
  408316:	61f3      	str	r3, [r6, #28]
                if (out)
  408318:	b151      	cbz	r1, 408330 <.LVL465>
                        UPDATE(state->check, put - out, out);
  40831a:	6933      	ldr	r3, [r6, #16]
  40831c:	b333      	cbz	r3, 40836c <.LVL466>
  40831e:	460a      	mov	r2, r1
  408320:	9b06      	ldr	r3, [sp, #24]
  408322:	1a59      	subs	r1, r3, r1

00408324 <.LVL463>:
  408324:	69b0      	ldr	r0, [r6, #24]
  408326:	f00b f9ed 	bl	413704 <.LFE21>

0040832a <.LVL464>:
                    strm->adler = state->check =
  40832a:	61b0      	str	r0, [r6, #24]
  40832c:	f8c9 0030 	str.w	r0, [r9, #48]	; 0x30

00408330 <.LVL465>:
                     state->flags ? hold :
  408330:	6933      	ldr	r3, [r6, #16]
  408332:	bb13      	cbnz	r3, 40837a <.LVL469>
                     ZSWAP32(hold)) != state->check) {
  408334:	ea4f 630b 	mov.w	r3, fp, lsl #24
                     state->flags ? hold :
  408338:	eb03 631b 	add.w	r3, r3, fp, lsr #24
                     ZSWAP32(hold)) != state->check) {
  40833c:	ea4f 221b 	mov.w	r2, fp, lsr #8
  408340:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
                     state->flags ? hold :
  408344:	4413      	add	r3, r2
                     ZSWAP32(hold)) != state->check) {
  408346:	ea4f 220b 	mov.w	r2, fp, lsl #8
  40834a:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
                     state->flags ? hold :
  40834e:	4413      	add	r3, r2
                if ((
  408350:	69b2      	ldr	r2, [r6, #24]
  408352:	4293      	cmp	r3, r2
  408354:	d013      	beq.n	40837e <.LVL469+0x4>
                    strm->msg = (char *)"incorrect data check";
  408356:	4b3a      	ldr	r3, [pc, #232]	; (408440 <.LVL486+0x8>)
  408358:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
  40835c:	f8c9 3018 	str.w	r3, [r9, #24]
                    state->mode = BAD;
  408360:	231d      	movs	r3, #29
  408362:	7033      	strb	r3, [r6, #0]
                    break;
  408364:	9b05      	ldr	r3, [sp, #20]
  408366:	9304      	str	r3, [sp, #16]
  408368:	f7ff b841 	b.w	4073ee <.LVL113>

0040836c <.LVL466>:
                        UPDATE(state->check, put - out, out);
  40836c:	460a      	mov	r2, r1
  40836e:	9b06      	ldr	r3, [sp, #24]
  408370:	1a59      	subs	r1, r3, r1

00408372 <.LVL467>:
  408372:	69b0      	ldr	r0, [r6, #24]
  408374:	f00a fd88 	bl	412e88 <.LBE46>

00408378 <.LVL468>:
  408378:	e7d7      	b.n	40832a <.LVL464>

0040837a <.LVL469>:
  40837a:	465b      	mov	r3, fp
  40837c:	e7e8      	b.n	408350 <.LVL465+0x20>
  40837e:	9b05      	ldr	r3, [sp, #20]
  408380:	9304      	str	r3, [sp, #16]
                INITBITS();
  408382:	2400      	movs	r4, #0

00408384 <.LVL470>:
  408384:	46a3      	mov	fp, r4

00408386 <.LVL471>:
            state->mode = LENGTH;
  408386:	231b      	movs	r3, #27
  408388:	7033      	strb	r3, [r6, #0]
            if (state->wrap && state->flags) {
  40838a:	68b3      	ldr	r3, [r6, #8]
  40838c:	b1f3      	cbz	r3, 4083cc <.LVL477>
  40838e:	6933      	ldr	r3, [r6, #16]
  408390:	b1e3      	cbz	r3, 4083cc <.LVL477>
                NEEDBITS(32);
  408392:	2c1f      	cmp	r4, #31
  408394:	d80e      	bhi.n	4083b4 <.LVL475+0xc>
  408396:	2d00      	cmp	r5, #0
  408398:	f43f aaa2 	beq.w	4078e0 <.L124>
  40839c:	3d01      	subs	r5, #1
  40839e:	f81a 3b01 	ldrb.w	r3, [sl], #1

004083a2 <.LVL473>:
  4083a2:	40a3      	lsls	r3, r4
  4083a4:	449b      	add	fp, r3
  4083a6:	3408      	adds	r4, #8

004083a8 <.LVL475>:
  4083a8:	2c1f      	cmp	r4, #31
  4083aa:	d803      	bhi.n	4083b4 <.LVL475+0xc>
  4083ac:	2d00      	cmp	r5, #0
  4083ae:	d1f5      	bne.n	40839c <.LVL471+0x16>
  4083b0:	f7ff ba96 	b.w	4078e0 <.L124>
                if (hold != (state->total & 0xffffffffUL)) {
  4083b4:	69f3      	ldr	r3, [r6, #28]
  4083b6:	455b      	cmp	r3, fp
  4083b8:	d006      	beq.n	4083c8 <.LVL475+0x20>
                    strm->msg = (char *)"incorrect length check";
  4083ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4083bc:	f8c9 3018 	str.w	r3, [r9, #24]
                    state->mode = BAD;
  4083c0:	231d      	movs	r3, #29
  4083c2:	7033      	strb	r3, [r6, #0]
                    break;
  4083c4:	f7ff b813 	b.w	4073ee <.LVL113>
                INITBITS();
  4083c8:	2400      	movs	r4, #0

004083ca <.LVL476>:
  4083ca:	46a3      	mov	fp, r4

004083cc <.LVL477>:
            state->mode = DONE;
  4083cc:	231c      	movs	r3, #28
  4083ce:	7033      	strb	r3, [r6, #0]
            ret = Z_STREAM_END;
  4083d0:	2301      	movs	r3, #1
  4083d2:	9303      	str	r3, [sp, #12]
  4083d4:	f7ff ba84 	b.w	4078e0 <.L124>
            ret = Z_DATA_ERROR;
  4083d8:	f06f 0302 	mvn.w	r3, #2
  4083dc:	9303      	str	r3, [sp, #12]
  4083de:	f7ff ba7f 	b.w	4078e0 <.L124>

004083e2 <.LVL478>:
            INITBITS();
  4083e2:	2400      	movs	r4, #0
  4083e4:	46a3      	mov	fp, r4
  4083e6:	f7ff ba7b 	b.w	4078e0 <.L124>

004083ea <.LVL479>:
            state->mode = MEM;
  4083ea:	231e      	movs	r3, #30
  4083ec:	7033      	strb	r3, [r6, #0]
            return Z_MEM_ERROR;
  4083ee:	f06f 0303 	mvn.w	r3, #3
  4083f2:	9303      	str	r3, [sp, #12]

004083f4 <.LVL480>:
  4083f4:	f7ff badf 	b.w	4079b6 <.LVL227>

004083f8 <.LVL481>:
            UPDATE(state->check, strm->next_out - out, out);
  4083f8:	f8d9 100c 	ldr.w	r1, [r9, #12]
  4083fc:	4622      	mov	r2, r4
  4083fe:	1b09      	subs	r1, r1, r4
  408400:	69b0      	ldr	r0, [r6, #24]
  408402:	f00a fd41 	bl	412e88 <.LBE46>

00408406 <.LVL482>:
  408406:	f7ff bab1 	b.w	40796c <.LVL226>
                      (state->mode == LEN_ || state->mode == COPY_ ? 256 : 0);
  40840a:	2200      	movs	r2, #0
  40840c:	f7ff bac3 	b.w	407996 <.LVL226+0x2a>

00408410 <.LVL483>:
        return Z_STREAM_ERROR;
  408410:	f06f 0301 	mvn.w	r3, #1
  408414:	9303      	str	r3, [sp, #12]
  408416:	f7ff bace 	b.w	4079b6 <.LVL227>
  40841a:	f06f 0301 	mvn.w	r3, #1
  40841e:	9303      	str	r3, [sp, #12]
  408420:	f7ff bac9 	b.w	4079b6 <.LVL227>
  408424:	f06f 0301 	mvn.w	r3, #1
  408428:	9303      	str	r3, [sp, #12]
  40842a:	f7ff bac4 	b.w	4079b6 <.LVL227>

0040842e <.LVL484>:
            return Z_MEM_ERROR;
  40842e:	f06f 0303 	mvn.w	r3, #3
  408432:	9303      	str	r3, [sp, #12]
  408434:	f7ff babf 	b.w	4079b6 <.LVL227>

00408438 <.LVL486>:
    strm->data_type = state->bits + (state->last ? 64 : 0) +
  408438:	3380      	adds	r3, #128	; 0x80
                      (state->mode == LEN_ || state->mode == COPY_ ? 256 : 0);
  40843a:	2200      	movs	r2, #0
  40843c:	f7ff baab 	b.w	407996 <.LVL226+0x2a>
  408440:	00414df0 	.word	0x00414df0

Disassembly of section .rodata%40:

00408444 <.rodata%40>:
  408444:	50434553 	.word	0x50434553
  408448:	52323131 	.word	0x52323131
  40844c:	00000031 	.word	0x00000031
  408450:	43374244 	.word	0x43374244
  408454:	46424132 	.word	0x46424132
  408458:	33453236 	.word	0x33453236
  40845c:	36364535 	.word	0x36364535
  408460:	36373038 	.word	0x36373038
  408464:	44414542 	.word	0x44414542
  408468:	42383032 	.word	0x42383032
  40846c:	00000000 	.word	0x00000000
  408470:	43374244 	.word	0x43374244
  408474:	46424132 	.word	0x46424132
  408478:	33453236 	.word	0x33453236
  40847c:	36364535 	.word	0x36364535
  408480:	36373038 	.word	0x36373038
  408484:	44414542 	.word	0x44414542
  408488:	38383032 	.word	0x38383032
  40848c:	00000000 	.word	0x00000000
  408490:	45393536 	.word	0x45393536
  408494:	41423846 	.word	0x41423846
  408498:	39333430 	.word	0x39333430
  40849c:	45453631 	.word	0x45453631
  4084a0:	39384544 	.word	0x39384544
  4084a4:	30373131 	.word	0x30373131
  4084a8:	32324232 	.word	0x32324232
  4084ac:	00000000 	.word	0x00000000
  4084b0:	43374244 	.word	0x43374244
  4084b4:	46424132 	.word	0x46424132
  4084b8:	33453236 	.word	0x33453236
  4084bc:	36374535 	.word	0x36374535
  4084c0:	46443832 	.word	0x46443832
  4084c4:	35364341 	.word	0x35364341
  4084c8:	35433136 	.word	0x35433136
  4084cc:	00000000 	.word	0x00000000
  4084d0:	37383439 	.word	0x37383439
  4084d4:	39393332 	.word	0x39393332
  4084d8:	35413539 	.word	0x35413539
  4084dc:	36374545 	.word	0x36374545
  4084e0:	46353542 	.word	0x46353542
  4084e4:	46324339 	.word	0x46324339
  4084e8:	00383930 	.word	0x00383930
  4084ec:	43393841 	.word	0x43393841
  4084f0:	46413545 	.word	0x46413545
  4084f4:	34323738 	.word	0x34323738
  4084f8:	32413043 	.word	0x32413043
  4084fc:	45304533 	.word	0x45304533
  408500:	37464630 	.word	0x37464630
  408504:	30303537 	.word	0x30303537
  408508:	00000000 	.word	0x00000000
  40850c:	50434553 	.word	0x50434553
  408510:	52383231 	.word	0x52383231
  408514:	00000031 	.word	0x00000031
  408518:	46464646 	.word	0x46464646
  40851c:	44464646 	.word	0x44464646
  408520:	46464646 	.word	0x46464646
  408524:	46464646 	.word	0x46464646
  408528:	46464646 	.word	0x46464646
  40852c:	46464646 	.word	0x46464646
  408530:	46464646 	.word	0x46464646
  408534:	46464646 	.word	0x46464646
  408538:	00000000 	.word	0x00000000
  40853c:	46464646 	.word	0x46464646
  408540:	44464646 	.word	0x44464646
  408544:	46464646 	.word	0x46464646
  408548:	46464646 	.word	0x46464646
  40854c:	46464646 	.word	0x46464646
  408550:	46464646 	.word	0x46464646
  408554:	46464646 	.word	0x46464646
  408558:	43464646 	.word	0x43464646
  40855c:	00000000 	.word	0x00000000
  408560:	35373845 	.word	0x35373845
  408564:	31433937 	.word	0x31433937
  408568:	39373031 	.word	0x39373031
  40856c:	44333446 	.word	0x44333446
  408570:	34323844 	.word	0x34323844
  408574:	43333939 	.word	0x43333939
  408578:	45454332 	.word	0x45454332
  40857c:	33444535 	.word	0x33444535
  408580:	00000000 	.word	0x00000000
  408584:	46464646 	.word	0x46464646
  408588:	45464646 	.word	0x45464646
  40858c:	30303030 	.word	0x30303030
  408590:	30303030 	.word	0x30303030
  408594:	33413537 	.word	0x33413537
  408598:	42314430 	.word	0x42314430
  40859c:	38333039 	.word	0x38333039
  4085a0:	35313141 	.word	0x35313141
  4085a4:	00000000 	.word	0x00000000
  4085a8:	46313631 	.word	0x46313631
  4085ac:	32353746 	.word	0x32353746
  4085b0:	39384238 	.word	0x39384238
  4085b4:	44324239 	.word	0x44324239
  4085b8:	38324330 	.word	0x38324330
  4085bc:	43373036 	.word	0x43373036
  4085c0:	43323541 	.word	0x43323541
  4085c4:	36384235 	.word	0x36384235
  4085c8:	00000000 	.word	0x00000000
  4085cc:	41354643 	.word	0x41354643
  4085d0:	39333843 	.word	0x39333843
  4085d4:	46414235 	.word	0x46414235
  4085d8:	33314245 	.word	0x33314245
  4085dc:	44323043 	.word	0x44323043
  4085e0:	32393241 	.word	0x32393241
  4085e4:	44454444 	.word	0x44454444
  4085e8:	33384137 	.word	0x33384137
  4085ec:	00000000 	.word	0x00000000
  4085f0:	50434553 	.word	0x50434553
  4085f4:	52303631 	.word	0x52303631
  4085f8:	00000031 	.word	0x00000031
  4085fc:	46464646 	.word	0x46464646
  408600:	46464646 	.word	0x46464646
  408604:	46464646 	.word	0x46464646
  408608:	46464646 	.word	0x46464646
  40860c:	46464646 	.word	0x46464646
  408610:	46464646 	.word	0x46464646
  408614:	46464646 	.word	0x46464646
  408618:	46464646 	.word	0x46464646
  40861c:	46464637 	.word	0x46464637
  408620:	46464646 	.word	0x46464646
  408624:	00000000 	.word	0x00000000
  408628:	46464646 	.word	0x46464646
  40862c:	46464646 	.word	0x46464646
  408630:	46464646 	.word	0x46464646
  408634:	46464646 	.word	0x46464646
  408638:	46464646 	.word	0x46464646
  40863c:	46464646 	.word	0x46464646
  408640:	46464646 	.word	0x46464646
  408644:	46464646 	.word	0x46464646
  408648:	46464637 	.word	0x46464637
  40864c:	43464646 	.word	0x43464646
  408650:	00000000 	.word	0x00000000
  408654:	37394331 	.word	0x37394331
  408658:	43464542 	.word	0x43464542
  40865c:	44423435 	.word	0x44423435
  408660:	42384137 	.word	0x42384137
  408664:	43413536 	.word	0x43413536
  408668:	46393846 	.word	0x46393846
  40866c:	34443138 	.word	0x34443138
  408670:	44413444 	.word	0x44413444
  408674:	35363543 	.word	0x35363543
  408678:	35344146 	.word	0x35344146
  40867c:	00000000 	.word	0x00000000
  408680:	30303031 	.word	0x30303031
  408684:	30303030 	.word	0x30303030
  408688:	30303030 	.word	0x30303030
  40868c:	30303030 	.word	0x30303030
  408690:	30303030 	.word	0x30303030
  408694:	43344631 	.word	0x43344631
  408698:	32394638 	.word	0x32394638
  40869c:	44454137 	.word	0x44454137
  4086a0:	37414333 	.word	0x37414333
  4086a4:	35323235 	.word	0x35323235
  4086a8:	00000037 	.word	0x00000037
  4086ac:	36394134 	.word	0x36394134
  4086b0:	38363542 	.word	0x38363542
  4086b4:	35464538 	.word	0x35464538
  4086b8:	38323337 	.word	0x38323337
  4086bc:	34363634 	.word	0x34363634
  4086c0:	39383936 	.word	0x39383936
  4086c4:	33433836 	.word	0x33433836
  4086c8:	39424238 	.word	0x39424238
  4086cc:	42433331 	.word	0x42433331
  4086d0:	32384346 	.word	0x32384346
  4086d4:	00000000 	.word	0x00000000
  4086d8:	36413332 	.word	0x36413332
  4086dc:	35353832 	.word	0x35353832
  4086e0:	38363133 	.word	0x38363133
  4086e4:	44373439 	.word	0x44373439
  4086e8:	43443935 	.word	0x43443935
  4086ec:	32313943 	.word	0x32313943
  4086f0:	33323430 	.word	0x33323430
  4086f4:	37333135 	.word	0x37333135
  4086f8:	35434137 	.word	0x35434137
  4086fc:	32334246 	.word	0x32334246
  408700:	00000000 	.word	0x00000000
  408704:	50434553 	.word	0x50434553
  408708:	52323931 	.word	0x52323931
  40870c:	00000031 	.word	0x00000031
  408710:	46464646 	.word	0x46464646
  408714:	46464646 	.word	0x46464646
  408718:	46464646 	.word	0x46464646
  40871c:	46464646 	.word	0x46464646
  408720:	46464646 	.word	0x46464646
  408724:	46464646 	.word	0x46464646
  408728:	46464646 	.word	0x46464646
  40872c:	45464646 	.word	0x45464646
  408730:	46464646 	.word	0x46464646
  408734:	46464646 	.word	0x46464646
  408738:	46464646 	.word	0x46464646
  40873c:	46464646 	.word	0x46464646
  408740:	00000000 	.word	0x00000000
  408744:	46464646 	.word	0x46464646
  408748:	46464646 	.word	0x46464646
  40874c:	46464646 	.word	0x46464646
  408750:	46464646 	.word	0x46464646
  408754:	46464646 	.word	0x46464646
  408758:	46464646 	.word	0x46464646
  40875c:	46464646 	.word	0x46464646
  408760:	45464646 	.word	0x45464646
  408764:	46464646 	.word	0x46464646
  408768:	46464646 	.word	0x46464646
  40876c:	46464646 	.word	0x46464646
  408770:	43464646 	.word	0x43464646
  408774:	00000000 	.word	0x00000000
  408778:	31323436 	.word	0x31323436
  40877c:	39313530 	.word	0x39313530
  408780:	43393545 	.word	0x43393545
  408784:	37453038 	.word	0x37453038
  408788:	37414630 	.word	0x37414630
  40878c:	42413945 	.word	0x42413945
  408790:	34323237 	.word	0x34323237
  408794:	39343033 	.word	0x39343033
  408798:	38424546 	.word	0x38424546
  40879c:	43454544 	.word	0x43454544
  4087a0:	36343143 	.word	0x36343143
  4087a4:	31423942 	.word	0x31423942
  4087a8:	00000000 	.word	0x00000000
  4087ac:	46464646 	.word	0x46464646
  4087b0:	46464646 	.word	0x46464646
  4087b4:	46464646 	.word	0x46464646
  4087b8:	46464646 	.word	0x46464646
  4087bc:	46464646 	.word	0x46464646
  4087c0:	46464646 	.word	0x46464646
  4087c4:	45443939 	.word	0x45443939
  4087c8:	36333846 	.word	0x36333846
  4087cc:	42363431 	.word	0x42363431
  4087d0:	31423943 	.word	0x31423943
  4087d4:	32443442 	.word	0x32443442
  4087d8:	31333832 	.word	0x31333832
  4087dc:	00000000 	.word	0x00000000
  4087e0:	44383831 	.word	0x44383831
  4087e4:	45303841 	.word	0x45303841
  4087e8:	30333042 	.word	0x30333042
  4087ec:	36463039 	.word	0x36463039
  4087f0:	46424337 	.word	0x46424337
  4087f4:	42453032 	.word	0x42453032
  4087f8:	31413334 	.word	0x31413334
  4087fc:	30303838 	.word	0x30303838
  408800:	46463446 	.word	0x46463446
  408804:	44464130 	.word	0x44464130
  408808:	46463238 	.word	0x46463238
  40880c:	32313031 	.word	0x32313031
  408810:	00000000 	.word	0x00000000
  408814:	32393137 	.word	0x32393137
  408818:	46353942 	.word	0x46353942
  40881c:	44384346 	.word	0x44384346
  408820:	36383741 	.word	0x36383741
  408824:	31303133 	.word	0x31303133
  408828:	36444531 	.word	0x36444531
  40882c:	43343242 	.word	0x43343242
  408830:	37354444 	.word	0x37354444
  408834:	37394633 	.word	0x37394633
  408838:	31314137 	.word	0x31314137
  40883c:	34393745 	.word	0x34393745
  408840:	00313138 	.word	0x00313138
  408844:	50434553 	.word	0x50434553
  408848:	52343232 	.word	0x52343232
  40884c:	00000031 	.word	0x00000031
  408850:	46464646 	.word	0x46464646
  408854:	46464646 	.word	0x46464646
  408858:	46464646 	.word	0x46464646
  40885c:	46464646 	.word	0x46464646
  408860:	46464646 	.word	0x46464646
  408864:	46464646 	.word	0x46464646
  408868:	46464646 	.word	0x46464646
  40886c:	46464646 	.word	0x46464646
  408870:	30303030 	.word	0x30303030
  408874:	30303030 	.word	0x30303030
  408878:	30303030 	.word	0x30303030
  40887c:	30303030 	.word	0x30303030
  408880:	30303030 	.word	0x30303030
  408884:	31303030 	.word	0x31303030
  408888:	00000000 	.word	0x00000000
  40888c:	46464646 	.word	0x46464646
  408890:	46464646 	.word	0x46464646
  408894:	46464646 	.word	0x46464646
  408898:	46464646 	.word	0x46464646
  40889c:	46464646 	.word	0x46464646
  4088a0:	46464646 	.word	0x46464646
  4088a4:	46464646 	.word	0x46464646
  4088a8:	45464646 	.word	0x45464646
  4088ac:	46464646 	.word	0x46464646
  4088b0:	46464646 	.word	0x46464646
  4088b4:	46464646 	.word	0x46464646
  4088b8:	46464646 	.word	0x46464646
  4088bc:	46464646 	.word	0x46464646
  4088c0:	45464646 	.word	0x45464646
  4088c4:	00000000 	.word	0x00000000
  4088c8:	35303442 	.word	0x35303442
  4088cc:	35384130 	.word	0x35384130
  4088d0:	34304330 	.word	0x34304330
  4088d4:	42413342 	.word	0x42413342
  4088d8:	31343546 	.word	0x31343546
  4088dc:	36353233 	.word	0x36353233
  4088e0:	34343035 	.word	0x34343035
  4088e4:	37423042 	.word	0x37423042
  4088e8:	46423744 	.word	0x46423744
  4088ec:	41423844 	.word	0x41423844
  4088f0:	42303732 	.word	0x42303732
  4088f4:	33343933 	.word	0x33343933
  4088f8:	35353332 	.word	0x35353332
  4088fc:	34424646 	.word	0x34424646
  408900:	00000000 	.word	0x00000000
  408904:	46464646 	.word	0x46464646
  408908:	46464646 	.word	0x46464646
  40890c:	46464646 	.word	0x46464646
  408910:	46464646 	.word	0x46464646
  408914:	46464646 	.word	0x46464646
  408918:	46464646 	.word	0x46464646
  40891c:	46464646 	.word	0x46464646
  408920:	32413631 	.word	0x32413631
  408924:	38423045 	.word	0x38423045
  408928:	45333046 	.word	0x45333046
  40892c:	44443331 	.word	0x44443331
  408930:	35343932 	.word	0x35343932
  408934:	43354335 	.word	0x43354335
  408938:	44334132 	.word	0x44334132
  40893c:	00000000 	.word	0x00000000
  408940:	45303742 	.word	0x45303742
  408944:	44424330 	.word	0x44424330
  408948:	34424236 	.word	0x34424236
  40894c:	46374642 	.word	0x46374642
  408950:	33313233 	.word	0x33313233
  408954:	39423039 	.word	0x39423039
  408958:	33304134 	.word	0x33304134
  40895c:	33443143 	.word	0x33443143
  408960:	32433635 	.word	0x32433635
  408964:	32323131 	.word	0x32323131
  408968:	32333433 	.word	0x32333433
  40896c:	36443038 	.word	0x36443038
  408970:	43353131 	.word	0x43353131
  408974:	31324431 	.word	0x31324431
  408978:	00000000 	.word	0x00000000
  40897c:	37334442 	.word	0x37334442
  408980:	38383336 	.word	0x38383336
  408984:	37463542 	.word	0x37463542
  408988:	42463332 	.word	0x42463332
  40898c:	32324334 	.word	0x32324334
  408990:	36454644 	.word	0x36454644
  408994:	33344443 	.word	0x33344443
  408998:	30413537 	.word	0x30413537
  40899c:	37304135 	.word	0x37304135
  4089a0:	34363734 	.word	0x34363734
  4089a4:	35443434 	.word	0x35443434
  4089a8:	39393138 	.word	0x39393138
  4089ac:	30303538 	.word	0x30303538
  4089b0:	34334537 	.word	0x34334537
  4089b4:	00000000 	.word	0x00000000
  4089b8:	4d495250 	.word	0x4d495250
  4089bc:	39333245 	.word	0x39333245
  4089c0:	00003156 	.word	0x00003156
  4089c4:	46464637 	.word	0x46464637
  4089c8:	46464646 	.word	0x46464646
  4089cc:	46464646 	.word	0x46464646
  4089d0:	46464646 	.word	0x46464646
  4089d4:	46464646 	.word	0x46464646
  4089d8:	46464646 	.word	0x46464646
  4089dc:	46464637 	.word	0x46464637
  4089e0:	46464646 	.word	0x46464646
  4089e4:	46464646 	.word	0x46464646
  4089e8:	30303038 	.word	0x30303038
  4089ec:	30303030 	.word	0x30303030
  4089f0:	30303030 	.word	0x30303030
  4089f4:	46464637 	.word	0x46464637
  4089f8:	46464646 	.word	0x46464646
  4089fc:	46464646 	.word	0x46464646
  408a00:	00000000 	.word	0x00000000
  408a04:	46464637 	.word	0x46464637
  408a08:	46464646 	.word	0x46464646
  408a0c:	46464646 	.word	0x46464646
  408a10:	46464646 	.word	0x46464646
  408a14:	46464646 	.word	0x46464646
  408a18:	46464646 	.word	0x46464646
  408a1c:	46464637 	.word	0x46464637
  408a20:	46464646 	.word	0x46464646
  408a24:	46464646 	.word	0x46464646
  408a28:	30303038 	.word	0x30303038
  408a2c:	30303030 	.word	0x30303030
  408a30:	30303030 	.word	0x30303030
  408a34:	46464637 	.word	0x46464637
  408a38:	46464646 	.word	0x46464646
  408a3c:	43464646 	.word	0x43464646
  408a40:	00000000 	.word	0x00000000
  408a44:	31304236 	.word	0x31304236
  408a48:	42334336 	.word	0x42334336
  408a4c:	31464344 	.word	0x31464344
  408a50:	31343938 	.word	0x31343938
  408a54:	36443044 	.word	0x36443044
  408a58:	32393435 	.word	0x32393435
  408a5c:	35373431 	.word	0x35373431
  408a60:	31374143 	.word	0x31374143
  408a64:	42443941 	.word	0x42443941
  408a68:	32424632 	.word	0x32424632
  408a6c:	44314437 	.word	0x44314437
  408a70:	39373733 	.word	0x39373733
  408a74:	35383136 	.word	0x35383136
  408a78:	34393243 	.word	0x34393243
  408a7c:	41304332 	.word	0x41304332
  408a80:	00000000 	.word	0x00000000
  408a84:	46464637 	.word	0x46464637
  408a88:	46464646 	.word	0x46464646
  408a8c:	46464646 	.word	0x46464646
  408a90:	46464646 	.word	0x46464646
  408a94:	46464646 	.word	0x46464646
  408a98:	46464646 	.word	0x46464646
  408a9c:	46464637 	.word	0x46464637
  408aa0:	45394646 	.word	0x45394646
  408aa4:	41394535 	.word	0x41394535
  408aa8:	44354639 	.word	0x44354639
  408aac:	31373039 	.word	0x31373039
  408ab0:	31444246 	.word	0x31444246
  408ab4:	36323235 	.word	0x36323235
  408ab8:	30393838 	.word	0x30393838
  408abc:	42304439 	.word	0x42304439
  408ac0:	00000000 	.word	0x00000000
  408ac4:	41464630 	.word	0x41464630
  408ac8:	43333639 	.word	0x43333639
  408acc:	38414344 	.word	0x38414344
  408ad0:	43363138 	.word	0x43363138
  408ad4:	33334343 	.word	0x33334343
  408ad8:	34363842 	.word	0x34363842
  408adc:	44454232 	.word	0x44454232
  408ae0:	35303946 	.word	0x35303946
  408ae4:	33443343 	.word	0x33443343
  408ae8:	37353835 	.word	0x37353835
  408aec:	46334433 	.word	0x46334433
  408af0:	42463732 	.word	0x42463732
  408af4:	42334442 	.word	0x42334442
  408af8:	39424333 	.word	0x39424333
  408afc:	46414141 	.word	0x46414141
  408b00:	00000000 	.word	0x00000000
  408b04:	42454437 	.word	0x42454437
  408b08:	34453845 	.word	0x34453845
  408b0c:	41303945 	.word	0x41303945
  408b10:	45414435 	.word	0x45414435
  408b14:	30344536 	.word	0x30344536
  408b18:	41433435 	.word	0x41433435
  408b1c:	42303335 	.word	0x42303335
  408b20:	36343041 	.word	0x36343041
  408b24:	33423435 	.word	0x33423435
  408b28:	38313836 	.word	0x38313836
  408b2c:	32324543 	.word	0x32324543
  408b30:	39334236 	.word	0x39334236
  408b34:	42434346 	.word	0x42434346
  408b38:	32304237 	.word	0x32304237
  408b3c:	45413146 	.word	0x45413146
  408b40:	00000000 	.word	0x00000000
  408b44:	50434553 	.word	0x50434553
  408b48:	52363532 	.word	0x52363532
  408b4c:	00000031 	.word	0x00000031
  408b50:	46464646 	.word	0x46464646
  408b54:	46464646 	.word	0x46464646
  408b58:	30303030 	.word	0x30303030
  408b5c:	31303030 	.word	0x31303030
  408b60:	30303030 	.word	0x30303030
  408b64:	30303030 	.word	0x30303030
  408b68:	30303030 	.word	0x30303030
  408b6c:	30303030 	.word	0x30303030
  408b70:	30303030 	.word	0x30303030
  408b74:	30303030 	.word	0x30303030
  408b78:	46464646 	.word	0x46464646
  408b7c:	46464646 	.word	0x46464646
  408b80:	46464646 	.word	0x46464646
  408b84:	46464646 	.word	0x46464646
  408b88:	46464646 	.word	0x46464646
  408b8c:	46464646 	.word	0x46464646
  408b90:	00000000 	.word	0x00000000
  408b94:	46464646 	.word	0x46464646
  408b98:	46464646 	.word	0x46464646
  408b9c:	30303030 	.word	0x30303030
  408ba0:	31303030 	.word	0x31303030
  408ba4:	30303030 	.word	0x30303030
  408ba8:	30303030 	.word	0x30303030
  408bac:	30303030 	.word	0x30303030
  408bb0:	30303030 	.word	0x30303030
  408bb4:	30303030 	.word	0x30303030
  408bb8:	30303030 	.word	0x30303030
  408bbc:	46464646 	.word	0x46464646
  408bc0:	46464646 	.word	0x46464646
  408bc4:	46464646 	.word	0x46464646
  408bc8:	46464646 	.word	0x46464646
  408bcc:	46464646 	.word	0x46464646
  408bd0:	43464646 	.word	0x43464646
  408bd4:	00000000 	.word	0x00000000
  408bd8:	36434135 	.word	0x36434135
  408bdc:	38443533 	.word	0x38443533
  408be0:	41334141 	.word	0x41334141
  408be4:	37453339 	.word	0x37453339
  408be8:	42453342 	.word	0x42453342
  408bec:	35354442 	.word	0x35354442
  408bf0:	38393637 	.word	0x38393637
  408bf4:	43423638 	.word	0x43423638
  408bf8:	44313536 	.word	0x44313536
  408bfc:	30423630 	.word	0x30423630
  408c00:	33354343 	.word	0x33354343
  408c04:	36463042 	.word	0x36463042
  408c08:	45434233 	.word	0x45434233
  408c0c:	45334333 	.word	0x45334333
  408c10:	32443732 	.word	0x32443732
  408c14:	42343036 	.word	0x42343036
  408c18:	00000000 	.word	0x00000000
  408c1c:	46464646 	.word	0x46464646
  408c20:	46464646 	.word	0x46464646
  408c24:	30303030 	.word	0x30303030
  408c28:	30303030 	.word	0x30303030
  408c2c:	46464646 	.word	0x46464646
  408c30:	46464646 	.word	0x46464646
  408c34:	46464646 	.word	0x46464646
  408c38:	46464646 	.word	0x46464646
  408c3c:	36454342 	.word	0x36454342
  408c40:	44414146 	.word	0x44414146
  408c44:	37313741 	.word	0x37313741
  408c48:	34384539 	.word	0x34384539
  408c4c:	39423346 	.word	0x39423346
  408c50:	32434143 	.word	0x32434143
  408c54:	33364346 	.word	0x33364346
  408c58:	31353532 	.word	0x31353532
  408c5c:	00000000 	.word	0x00000000
  408c60:	37314236 	.word	0x37314236
  408c64:	32463144 	.word	0x32463144
  408c68:	43323145 	.word	0x43323145
  408c6c:	37343234 	.word	0x37343234
  408c70:	43423846 	.word	0x43423846
  408c74:	35453645 	.word	0x35453645
  408c78:	34413336 	.word	0x34413336
  408c7c:	32463034 	.word	0x32463034
  408c80:	33303737 	.word	0x33303737
  408c84:	31384437 	.word	0x31384437
  408c88:	42454432 	.word	0x42454432
  408c8c:	30413333 	.word	0x30413333
  408c90:	31413446 	.word	0x31413446
  408c94:	35343933 	.word	0x35343933
  408c98:	38393844 	.word	0x38393844
  408c9c:	36393243 	.word	0x36393243
  408ca0:	00000000 	.word	0x00000000
  408ca4:	33454634 	.word	0x33454634
  408ca8:	32453234 	.word	0x32453234
  408cac:	41314546 	.word	0x41314546
  408cb0:	42394637 	.word	0x42394637
  408cb4:	37454538 	.word	0x37454538
  408cb8:	41344245 	.word	0x41344245
  408cbc:	46304337 	.word	0x46304337
  408cc0:	36314539 	.word	0x36314539
  408cc4:	45434232 	.word	0x45434232
  408cc8:	37353333 	.word	0x37353333
  408ccc:	31334236 	.word	0x31334236
  408cd0:	45434535 	.word	0x45434535
  408cd4:	36424243 	.word	0x36424243
  408cd8:	38363034 	.word	0x38363034
  408cdc:	46423733 	.word	0x46423733
  408ce0:	35463135 	.word	0x35463135
  408ce4:	00000000 	.word	0x00000000
  408ce8:	50434553 	.word	0x50434553
  408cec:	52343833 	.word	0x52343833
  408cf0:	00000031 	.word	0x00000031
  408cf4:	46464646 	.word	0x46464646
  408cf8:	46464646 	.word	0x46464646
  408cfc:	46464646 	.word	0x46464646
  408d00:	46464646 	.word	0x46464646
  408d04:	46464646 	.word	0x46464646
  408d08:	46464646 	.word	0x46464646
  408d0c:	46464646 	.word	0x46464646
  408d10:	46464646 	.word	0x46464646
  408d14:	46464646 	.word	0x46464646
  408d18:	46464646 	.word	0x46464646
  408d1c:	46464646 	.word	0x46464646
  408d20:	46464646 	.word	0x46464646
  408d24:	46464646 	.word	0x46464646
  408d28:	46464646 	.word	0x46464646
  408d2c:	46464646 	.word	0x46464646
  408d30:	45464646 	.word	0x45464646
  408d34:	46464646 	.word	0x46464646
  408d38:	46464646 	.word	0x46464646
  408d3c:	30303030 	.word	0x30303030
  408d40:	30303030 	.word	0x30303030
  408d44:	30303030 	.word	0x30303030
  408d48:	30303030 	.word	0x30303030
  408d4c:	46464646 	.word	0x46464646
  408d50:	46464646 	.word	0x46464646
  408d54:	00000000 	.word	0x00000000
  408d58:	46464646 	.word	0x46464646
  408d5c:	46464646 	.word	0x46464646
  408d60:	46464646 	.word	0x46464646
  408d64:	46464646 	.word	0x46464646
  408d68:	46464646 	.word	0x46464646
  408d6c:	46464646 	.word	0x46464646
  408d70:	46464646 	.word	0x46464646
  408d74:	46464646 	.word	0x46464646
  408d78:	46464646 	.word	0x46464646
  408d7c:	46464646 	.word	0x46464646
  408d80:	46464646 	.word	0x46464646
  408d84:	46464646 	.word	0x46464646
  408d88:	46464646 	.word	0x46464646
  408d8c:	46464646 	.word	0x46464646
  408d90:	46464646 	.word	0x46464646
  408d94:	45464646 	.word	0x45464646
  408d98:	46464646 	.word	0x46464646
  408d9c:	46464646 	.word	0x46464646
  408da0:	30303030 	.word	0x30303030
  408da4:	30303030 	.word	0x30303030
  408da8:	30303030 	.word	0x30303030
  408dac:	30303030 	.word	0x30303030
  408db0:	46464646 	.word	0x46464646
  408db4:	43464646 	.word	0x43464646
  408db8:	00000000 	.word	0x00000000
  408dbc:	31333342 	.word	0x31333342
  408dc0:	37414632 	.word	0x37414632
  408dc4:	45333245 	.word	0x45333245
  408dc8:	34453745 	.word	0x34453745
  408dcc:	45383839 	.word	0x45383839
  408dd0:	42363530 	.word	0x42363530
  408dd4:	38463345 	.word	0x38463345
  408dd8:	39314432 	.word	0x39314432
  408ddc:	44313831 	.word	0x44313831
  408de0:	45364339 	.word	0x45364339
  408de4:	31384546 	.word	0x31384546
  408de8:	32313134 	.word	0x32313134
  408dec:	34313330 	.word	0x34313330
  408df0:	46383830 	.word	0x46383830
  408df4:	33313035 	.word	0x33313035
  408df8:	41353738 	.word	0x41353738
  408dfc:	36353643 	.word	0x36353643
  408e00:	44383933 	.word	0x44383933
  408e04:	45324138 	.word	0x45324138
  408e08:	44393144 	.word	0x44393144
  408e0c:	35384132 	.word	0x35384132
  408e10:	44453843 	.word	0x44453843
  408e14:	43453344 	.word	0x43453344
  408e18:	46454132 	.word	0x46454132
  408e1c:	00000000 	.word	0x00000000
  408e20:	46464646 	.word	0x46464646
  408e24:	46464646 	.word	0x46464646
  408e28:	46464646 	.word	0x46464646
  408e2c:	46464646 	.word	0x46464646
  408e30:	46464646 	.word	0x46464646
  408e34:	46464646 	.word	0x46464646
  408e38:	46464646 	.word	0x46464646
  408e3c:	46464646 	.word	0x46464646
  408e40:	46464646 	.word	0x46464646
  408e44:	46464646 	.word	0x46464646
  408e48:	46464646 	.word	0x46464646
  408e4c:	46464646 	.word	0x46464646
  408e50:	33363743 	.word	0x33363743
  408e54:	31384434 	.word	0x31384434
  408e58:	37333446 	.word	0x37333446
  408e5c:	46444432 	.word	0x46444432
  408e60:	41313835 	.word	0x41313835
  408e64:	32424430 	.word	0x32424430
  408e68:	30423834 	.word	0x30423834
  408e6c:	41373741 	.word	0x41373741
  408e70:	43454345 	.word	0x43454345
  408e74:	41363931 	.word	0x41363931
  408e78:	35434343 	.word	0x35434343
  408e7c:	33373932 	.word	0x33373932
  408e80:	00000000 	.word	0x00000000
  408e84:	37384141 	.word	0x37384141
  408e88:	32324143 	.word	0x32324143
  408e8c:	42384542 	.word	0x42384542
  408e90:	37333530 	.word	0x37333530
  408e94:	31424538 	.word	0x31424538
  408e98:	45313743 	.word	0x45313743
  408e9c:	30323346 	.word	0x30323346
  408ea0:	34374441 	.word	0x34374441
  408ea4:	44314536 	.word	0x44314536
  408ea8:	32364233 	.word	0x32364233
  408eac:	37414238 	.word	0x37414238
  408eb0:	38394239 	.word	0x38394239
  408eb4:	37463935 	.word	0x37463935
  408eb8:	30453134 	.word	0x30453134
  408ebc:	34353238 	.word	0x34353238
  408ec0:	38334132 	.word	0x38334132
  408ec4:	32303535 	.word	0x32303535
  408ec8:	44353246 	.word	0x44353246
  408ecc:	35354642 	.word	0x35354642
  408ed0:	43363932 	.word	0x43363932
  408ed4:	34354133 	.word	0x34354133
  408ed8:	38334535 	.word	0x38334535
  408edc:	36373237 	.word	0x36373237
  408ee0:	37424130 	.word	0x37424130
  408ee4:	00000000 	.word	0x00000000
  408ee8:	37313633 	.word	0x37313633
  408eec:	41344544 	.word	0x41344544
  408ef0:	36323639 	.word	0x36323639
  408ef4:	46364332 	.word	0x46364332
  408ef8:	45394435 	.word	0x45394435
  408efc:	46423839 	.word	0x46423839
  408f00:	32393239 	.word	0x32393239
  408f04:	39324344 	.word	0x39324344
  408f08:	34463846 	.word	0x34463846
  408f0c:	44424431 	.word	0x44424431
  408f10:	41393832 	.word	0x41393832
  408f14:	43373431 	.word	0x43373431
  408f18:	41443945 	.word	0x41443945
  408f1c:	33313133 	.word	0x33313133
  408f20:	30463542 	.word	0x30463542
  408f24:	30433842 	.word	0x30433842
  408f28:	30364130 	.word	0x30364130
  408f2c:	45433142 	.word	0x45433142
  408f30:	45374431 	.word	0x45374431
  408f34:	44393138 	.word	0x44393138
  408f38:	33344137 	.word	0x33344137
  408f3c:	43374431 	.word	0x43374431
  408f40:	41453039 	.word	0x41453039
  408f44:	46354530 	.word	0x46354530
  408f48:	00000000 	.word	0x00000000
  408f4c:	50434553 	.word	0x50434553
  408f50:	52313235 	.word	0x52313235
  408f54:	00000031 	.word	0x00000031
  408f58:	46464631 	.word	0x46464631
  408f5c:	46464646 	.word	0x46464646
  408f60:	46464646 	.word	0x46464646
  408f64:	46464646 	.word	0x46464646
  408f68:	46464646 	.word	0x46464646
  408f6c:	46464646 	.word	0x46464646
  408f70:	46464646 	.word	0x46464646
  408f74:	46464646 	.word	0x46464646
  408f78:	46464646 	.word	0x46464646
  408f7c:	46464646 	.word	0x46464646
  408f80:	46464646 	.word	0x46464646
  408f84:	46464646 	.word	0x46464646
  408f88:	46464646 	.word	0x46464646
  408f8c:	46464646 	.word	0x46464646
  408f90:	46464646 	.word	0x46464646
  408f94:	46464646 	.word	0x46464646
  408f98:	46464646 	.word	0x46464646
  408f9c:	46464646 	.word	0x46464646
  408fa0:	46464646 	.word	0x46464646
  408fa4:	46464646 	.word	0x46464646
  408fa8:	46464646 	.word	0x46464646
  408fac:	46464646 	.word	0x46464646
  408fb0:	46464646 	.word	0x46464646
  408fb4:	46464646 	.word	0x46464646
  408fb8:	46464646 	.word	0x46464646
  408fbc:	46464646 	.word	0x46464646
  408fc0:	46464646 	.word	0x46464646
  408fc4:	46464646 	.word	0x46464646
  408fc8:	46464646 	.word	0x46464646
  408fcc:	46464646 	.word	0x46464646
  408fd0:	46464646 	.word	0x46464646
  408fd4:	46464646 	.word	0x46464646
  408fd8:	00464646 	.word	0x00464646
  408fdc:	46464631 	.word	0x46464631
  408fe0:	46464646 	.word	0x46464646
  408fe4:	46464646 	.word	0x46464646
  408fe8:	46464646 	.word	0x46464646
  408fec:	46464646 	.word	0x46464646
  408ff0:	46464646 	.word	0x46464646
  408ff4:	46464646 	.word	0x46464646
  408ff8:	46464646 	.word	0x46464646
  408ffc:	46464646 	.word	0x46464646
  409000:	46464646 	.word	0x46464646
  409004:	46464646 	.word	0x46464646
  409008:	46464646 	.word	0x46464646
  40900c:	46464646 	.word	0x46464646
  409010:	46464646 	.word	0x46464646
  409014:	46464646 	.word	0x46464646
  409018:	46464646 	.word	0x46464646
  40901c:	46464646 	.word	0x46464646
  409020:	46464646 	.word	0x46464646
  409024:	46464646 	.word	0x46464646
  409028:	46464646 	.word	0x46464646
  40902c:	46464646 	.word	0x46464646
  409030:	46464646 	.word	0x46464646
  409034:	46464646 	.word	0x46464646
  409038:	46464646 	.word	0x46464646
  40903c:	46464646 	.word	0x46464646
  409040:	46464646 	.word	0x46464646
  409044:	46464646 	.word	0x46464646
  409048:	46464646 	.word	0x46464646
  40904c:	46464646 	.word	0x46464646
  409050:	46464646 	.word	0x46464646
  409054:	46464646 	.word	0x46464646
  409058:	46464646 	.word	0x46464646
  40905c:	00434646 	.word	0x00434646
  409060:	35393135 	.word	0x35393135
  409064:	39424533 	.word	0x39424533
  409068:	45383136 	.word	0x45383136
  40906c:	41394331 	.word	0x41394331
  409070:	32394631 	.word	0x32394631
  409074:	31324139 	.word	0x31324139
  409078:	36423041 	.word	0x36423041
  40907c:	30343538 	.word	0x30343538
  409080:	32414545 	.word	0x32414545
  409084:	32374144 	.word	0x32374144
  409088:	39394235 	.word	0x39394235
  40908c:	35313342 	.word	0x35313342
  409090:	38423346 	.word	0x38423346
  409094:	39383442 	.word	0x39383442
  409098:	45383139 	.word	0x45383139
  40909c:	39303146 	.word	0x39303146
  4090a0:	36353145 	.word	0x36353145
  4090a4:	39333931 	.word	0x39333931
  4090a8:	43453135 	.word	0x43453135
  4090ac:	33394537 	.word	0x33394537
  4090b0:	36314237 	.word	0x36314237
  4090b4:	30433235 	.word	0x30433235
  4090b8:	42334442 	.word	0x42334442
  4090bc:	46423142 	.word	0x46423142
  4090c0:	35333730 	.word	0x35333730
  4090c4:	46443337 	.word	0x46443337
  4090c8:	44333838 	.word	0x44333838
  4090cc:	34334332 	.word	0x34334332
  4090d0:	46453146 	.word	0x46453146
  4090d4:	46313534 	.word	0x46313534
  4090d8:	42363444 	.word	0x42363444
  4090dc:	46333035 	.word	0x46333035
  4090e0:	00003030 	.word	0x00003030
  4090e4:	46464631 	.word	0x46464631
  4090e8:	46464646 	.word	0x46464646
  4090ec:	46464646 	.word	0x46464646
  4090f0:	46464646 	.word	0x46464646
  4090f4:	46464646 	.word	0x46464646
  4090f8:	46464646 	.word	0x46464646
  4090fc:	46464646 	.word	0x46464646
  409100:	46464646 	.word	0x46464646
  409104:	46464646 	.word	0x46464646
  409108:	46464646 	.word	0x46464646
  40910c:	46464646 	.word	0x46464646
  409110:	46464646 	.word	0x46464646
  409114:	46464646 	.word	0x46464646
  409118:	46464646 	.word	0x46464646
  40911c:	46464646 	.word	0x46464646
  409120:	46464646 	.word	0x46464646
  409124:	35414646 	.word	0x35414646
  409128:	38363831 	.word	0x38363831
  40912c:	42333837 	.word	0x42333837
  409130:	39463246 	.word	0x39463246
  409134:	37423636 	.word	0x37423636
  409138:	30434346 	.word	0x30434346
  40913c:	46383431 	.word	0x46383431
  409140:	41393037 	.word	0x41393037
  409144:	33304435 	.word	0x33304435
  409148:	43354242 	.word	0x43354242
  40914c:	38384239 	.word	0x38384239
  409150:	34433939 	.word	0x34433939
  409154:	42454137 	.word	0x42454137
  409158:	42463642 	.word	0x42463642
  40915c:	39453137 	.word	0x39453137
  409160:	36383331 	.word	0x36383331
  409164:	00393034 	.word	0x00393034
  409168:	35383643 	.word	0x35383643
  40916c:	36304538 	.word	0x36304538
  409170:	34303742 	.word	0x34303742
  409174:	39453430 	.word	0x39453430
  409178:	45394443 	.word	0x45394443
  40917c:	42434533 	.word	0x42434533
  409180:	33323636 	.word	0x33323636
  409184:	34423539 	.word	0x34423539
  409188:	43393234 	.word	0x43393234
  40918c:	31383436 	.word	0x31383436
  409190:	35303933 	.word	0x35303933
  409194:	35424633 	.word	0x35424633
  409198:	38463132 	.word	0x38463132
  40919c:	46413832 	.word	0x46413832
  4091a0:	42363036 	.word	0x42363036
  4091a4:	44334434 	.word	0x44334434
  4091a8:	31414142 	.word	0x31414142
  4091ac:	45354234 	.word	0x45354234
  4091b0:	46453737 	.word	0x46453737
  4091b4:	39353745 	.word	0x39353745
  4091b8:	45463832 	.word	0x45463832
  4091bc:	31434431 	.word	0x31434431
  4091c0:	32413732 	.word	0x32413732
  4091c4:	38414646 	.word	0x38414646
  4091c8:	33334544 	.word	0x33334544
  4091cc:	33423834 	.word	0x33423834
  4091d0:	35383143 	.word	0x35383143
  4091d4:	32344136 	.word	0x32344136
  4091d8:	39464239 	.word	0x39464239
  4091dc:	45374537 	.word	0x45374537
  4091e0:	32433133 	.word	0x32433133
  4091e4:	44423545 	.word	0x44423545
  4091e8:	00003636 	.word	0x00003636
  4091ec:	33383131 	.word	0x33383131
  4091f0:	36393239 	.word	0x36393239
  4091f4:	39383741 	.word	0x39383741
  4091f8:	43423341 	.word	0x43423341
  4091fc:	35343030 	.word	0x35343030
  409200:	35413843 	.word	0x35413843
  409204:	32344246 	.word	0x32344246
  409208:	31443743 	.word	0x31443743
  40920c:	39394442 	.word	0x39394442
  409210:	34354638 	.word	0x34354638
  409214:	35393434 	.word	0x35393434
  409218:	34423937 	.word	0x34423937
  40921c:	31383634 	.word	0x31383634
  409220:	42464137 	.word	0x42464137
  409224:	32373144 	.word	0x32373144
  409228:	36453337 	.word	0x36453337
  40922c:	39433236 	.word	0x39433236
  409230:	37454537 	.word	0x37454537
  409234:	35393932 	.word	0x35393932
  409238:	32344645 	.word	0x32344645
  40923c:	43303436 	.word	0x43303436
  409240:	42303535 	.word	0x42303535
  409244:	33313039 	.word	0x33313039
  409248:	30444146 	.word	0x30444146
  40924c:	33313637 	.word	0x33313637
  409250:	37433335 	.word	0x37433335
  409254:	41363830 	.word	0x41363830
  409258:	43323732 	.word	0x43323732
  40925c:	38303432 	.word	0x38303432
  409260:	39454238 	.word	0x39454238
  409264:	39363734 	.word	0x39363734
  409268:	36314446 	.word	0x36314446
  40926c:	00303536 	.word	0x00303536

Disassembly of section .dinit%41:

00409270 <.dinit>:
  409270:	2040d6a4 	.word	0x2040d6a4
  409274:	0000001c 	.word	0x0000001c
  409278:	00000000 	.word	0x00000000
  40927c:	2040d760 	.word	0x2040d760
  409280:	00000008 	.word	0x00000008
  409284:	00000001 	.word	0x00000001
  409288:	00000000 	.word	0x00000000
  40928c:	2040d684 	.word	0x2040d684
  409290:	2040c854 	.word	0x2040c854
  409294:	00000004 	.word	0x00000004
  409298:	00000001 	.word	0x00000001
  40929c:	00000400 	.word	0x00000400
  4092a0:	2040d768 	.word	0x2040d768
  4092a4:	00000008 	.word	0x00000008
  4092a8:	00000001 	.word	0x00000001
  4092ac:	2040d6c0 	.word	0x2040d6c0
  4092b0:	00000017 	.word	0x00000017
  4092b4:	2040d6c0 	.word	0x2040d6c0
  4092b8:	0000001c 	.word	0x0000001c
  4092bc:	00000001 	.word	0x00000001
  4092c0:	0041dc35 	.word	0x0041dc35
  4092c4:	0041dc11 	.word	0x0041dc11
  4092c8:	0041ddc5 	.word	0x0041ddc5
  4092cc:	0041dc1d 	.word	0x0041dc1d
  4092d0:	0041dbf9 	.word	0x0041dbf9
  4092d4:	0041dc05 	.word	0x0041dc05
  4092d8:	0041dc29 	.word	0x0041dc29
  4092dc:	20400000 	.word	0x20400000
  4092e0:	0000000c 	.word	0x0000000c
  4092e4:	00000000 	.word	0x00000000
  4092e8:	20400054 	.word	0x20400054
  4092ec:	0000c800 	.word	0x0000c800
  4092f0:	00000000 	.word	0x00000000
  4092f4:	2040d770 	.word	0x2040d770
  4092f8:	00000004 	.word	0x00000004
  4092fc:	00000000 	.word	0x00000000
  409300:	2040d534 	.word	0x2040d534
  409304:	00000050 	.word	0x00000050
  409308:	00000001 	.word	0x00000001
  40930c:	00010100 	.word	0x00010100
	...
  40935c:	2040d774 	.word	0x2040d774
  409360:	00000004 	.word	0x00000004
  409364:	00000000 	.word	0x00000000
  409368:	2040d778 	.word	0x2040d778
  40936c:	00000004 	.word	0x00000004
  409370:	00000000 	.word	0x00000000
  409374:	2040d6dc 	.word	0x2040d6dc
  409378:	00000014 	.word	0x00000014
  40937c:	00000001 	.word	0x00000001
  409380:	00000000 	.word	0x00000000
  409384:	0041c378 	.word	0x0041c378
  409388:	00000000 	.word	0x00000000
  40938c:	00000013 	.word	0x00000013
  409390:	00000007 	.word	0x00000007
  409394:	2040d6f0 	.word	0x2040d6f0
  409398:	00000014 	.word	0x00000014
  40939c:	00000001 	.word	0x00000001
  4093a0:	0041b174 	.word	0x0041b174
  4093a4:	0041b0fc 	.word	0x0041b0fc
  4093a8:	00000000 	.word	0x00000000
  4093ac:	0000001e 	.word	0x0000001e
  4093b0:	0000000f 	.word	0x0000000f
  4093b4:	2040d704 	.word	0x2040d704
  4093b8:	00000014 	.word	0x00000014
  4093bc:	00000001 	.word	0x00000001
  4093c0:	0040f5e0 	.word	0x0040f5e0
  4093c4:	0041b34c 	.word	0x0041b34c
  4093c8:	00000101 	.word	0x00000101
  4093cc:	0000011e 	.word	0x0000011e
  4093d0:	0000000f 	.word	0x0000000f
  4093d4:	2040d718 	.word	0x2040d718
  4093d8:	00000014 	.word	0x00000014
  4093dc:	00000000 	.word	0x00000000
  4093e0:	2040d754 	.word	0x2040d754
  4093e4:	0000000c 	.word	0x0000000c
  4093e8:	00000000 	.word	0x00000000
  4093ec:	2040d584 	.word	0x2040d584
  4093f0:	00000050 	.word	0x00000050
  4093f4:	00000000 	.word	0x00000000
  4093f8:	2040d088 	.word	0x2040d088
  4093fc:	00000200 	.word	0x00000200
  409400:	00000000 	.word	0x00000000
  409404:	2040d5d4 	.word	0x2040d5d4
  409408:	00000050 	.word	0x00000050
  40940c:	00000001 	.word	0x00000001
	...
  409454:	00000101 	.word	0x00000101
	...
  409460:	2040d684 	.word	0x2040d684
  409464:	00000020 	.word	0x00000020
  409468:	00000001 	.word	0x00000001
  40946c:	00000300 	.word	0x00000300
  409470:	0041d501 	.word	0x0041d501
  409474:	0041bf41 	.word	0x0041bf41
  409478:	0041c3c5 	.word	0x0041c3c5
  40947c:	0041d8e9 	.word	0x0041d8e9
  409480:	00416179 	.word	0x00416179
  409484:	0041c585 	.word	0x0041c585
  409488:	0041caed 	.word	0x0041caed
  40948c:	2040d72c 	.word	0x2040d72c
  409490:	00000014 	.word	0x00000014
  409494:	00000001 	.word	0x00000001
	...
  4094a4:	2040d584 	.word	0x2040d584
  4094a8:	0000000a 	.word	0x0000000a
  4094ac:	2040d740 	.word	0x2040d740
  4094b0:	00000014 	.word	0x00000014
  4094b4:	00000001 	.word	0x00000001
	...
  4094c4:	2040d088 	.word	0x2040d088
  4094c8:	00000040 	.word	0x00000040
  4094cc:	2040000c 	.word	0x2040000c
  4094d0:	00000009 	.word	0x00000009
  4094d4:	00000000 	.word	0x00000000
  4094d8:	2040d624 	.word	0x2040d624
  4094dc:	00000038 	.word	0x00000038
  4094e0:	00000000 	.word	0x00000000
  4094e4:	2040d3f4 	.word	0x2040d3f4
  4094e8:	00000140 	.word	0x00000140
  4094ec:	00000000 	.word	0x00000000
  4094f0:	20400018 	.word	0x20400018
  4094f4:	00000008 	.word	0x00000008
  4094f8:	00000000 	.word	0x00000000
  4094fc:	20400020 	.word	0x20400020
  409500:	00000030 	.word	0x00000030
  409504:	00000000 	.word	0x00000000
  409508:	2040d77c 	.word	0x2040d77c
  40950c:	00000004 	.word	0x00000004
  409510:	00000001 	.word	0x00000001
  409514:	2040c858 	.word	0x2040c858
  409518:	2040c858 	.word	0x2040c858
  40951c:	00000428 	.word	0x00000428
  409520:	00000001 	.word	0x00000001
  409524:	00000000 	.word	0x00000000
  409528:	2040cb44 	.word	0x2040cb44
  40952c:	2040cbac 	.word	0x2040cbac
  409530:	2040cc14 	.word	0x2040cc14
	...
  4095cc:	00000001 	.word	0x00000001
  4095d0:	00000000 	.word	0x00000000
  4095d4:	abcd330e 	.word	0xabcd330e
  4095d8:	e66d1234 	.word	0xe66d1234
  4095dc:	0005deec 	.word	0x0005deec
  4095e0:	0000000b 	.word	0x0000000b
	...
  40994c:	2040d288 	.word	0x2040d288
  409950:	0000016c 	.word	0x0000016c
  409954:	00000001 	.word	0x00000001
  409958:	00000043 	.word	0x00000043
	...
  409978:	00000043 	.word	0x00000043
	...
  409998:	00000043 	.word	0x00000043
	...
  4099b8:	00000043 	.word	0x00000043
	...
  4099d8:	00000043 	.word	0x00000043
	...
  4099f8:	00000043 	.word	0x00000043
	...
  409a18:	00000043 	.word	0x00000043
	...
  409a38:	0041d6f9 	.word	0x0041d6f9
  409a3c:	0041d165 	.word	0x0041d165
  409a40:	00000000 	.word	0x00000000
  409a44:	004172cc 	.word	0x004172cc
  409a48:	0041d9d4 	.word	0x0041d9d4
  409a4c:	0041d9d0 	.word	0x0041d9d0
  409a50:	0041d9d0 	.word	0x0041d9d0
  409a54:	0041d9d0 	.word	0x0041d9d0
  409a58:	0041d9d0 	.word	0x0041d9d0
  409a5c:	0041d9d0 	.word	0x0041d9d0
  409a60:	0041d9d0 	.word	0x0041d9d0
  409a64:	0041d9d0 	.word	0x0041d9d0
  409a68:	0041d9d0 	.word	0x0041d9d0
  409a6c:	0041d9d0 	.word	0x0041d9d0
  409a70:	ffffffff 	.word	0xffffffff
  409a74:	ffffffff 	.word	0xffffffff
  409a78:	ffffffff 	.word	0xffffffff
  409a7c:	0000ffff 	.word	0x0000ffff
  409a80:	53410001 	.word	0x53410001
  409a84:	00494943 	.word	0x00494943
	...
  409aa0:	53410000 	.word	0x53410000
  409aa4:	00494943 	.word	0x00494943
	...
  409ac4:	2040d65c 	.word	0x2040d65c
  409ac8:	00000028 	.word	0x00000028
  409acc:	00000000 	.word	0x00000000
  409ad0:	2040d780 	.word	0x2040d780
  409ad4:	00000004 	.word	0x00000004
  409ad8:	00000000 	.word	0x00000000
  409adc:	2040d784 	.word	0x2040d784
  409ae0:	00000004 	.word	0x00000004
  409ae4:	00000000 	.word	0x00000000
  409ae8:	2040d788 	.word	0x2040d788
  409aec:	00000004 	.word	0x00000004
  409af0:	00000000 	.word	0x00000000
  409af4:	2040cc80 	.word	0x2040cc80
  409af8:	00000408 	.word	0x00000408
  409afc:	00000001 	.word	0x00000001
	...
  409b08:	2040cc80 	.word	0x2040cc80
  409b0c:	2040cc80 	.word	0x2040cc80
  409b10:	2040cc88 	.word	0x2040cc88
  409b14:	2040cc88 	.word	0x2040cc88
  409b18:	2040cc90 	.word	0x2040cc90
  409b1c:	2040cc90 	.word	0x2040cc90
  409b20:	2040cc98 	.word	0x2040cc98
  409b24:	2040cc98 	.word	0x2040cc98
  409b28:	2040cca0 	.word	0x2040cca0
  409b2c:	2040cca0 	.word	0x2040cca0
  409b30:	2040cca8 	.word	0x2040cca8
  409b34:	2040cca8 	.word	0x2040cca8
  409b38:	2040ccb0 	.word	0x2040ccb0
  409b3c:	2040ccb0 	.word	0x2040ccb0
  409b40:	2040ccb8 	.word	0x2040ccb8
  409b44:	2040ccb8 	.word	0x2040ccb8
  409b48:	2040ccc0 	.word	0x2040ccc0
  409b4c:	2040ccc0 	.word	0x2040ccc0
  409b50:	2040ccc8 	.word	0x2040ccc8
  409b54:	2040ccc8 	.word	0x2040ccc8
  409b58:	2040ccd0 	.word	0x2040ccd0
  409b5c:	2040ccd0 	.word	0x2040ccd0
  409b60:	2040ccd8 	.word	0x2040ccd8
  409b64:	2040ccd8 	.word	0x2040ccd8
  409b68:	2040cce0 	.word	0x2040cce0
  409b6c:	2040cce0 	.word	0x2040cce0
  409b70:	2040cce8 	.word	0x2040cce8
  409b74:	2040cce8 	.word	0x2040cce8
  409b78:	2040ccf0 	.word	0x2040ccf0
  409b7c:	2040ccf0 	.word	0x2040ccf0
  409b80:	2040ccf8 	.word	0x2040ccf8
  409b84:	2040ccf8 	.word	0x2040ccf8
  409b88:	2040cd00 	.word	0x2040cd00
  409b8c:	2040cd00 	.word	0x2040cd00
  409b90:	2040cd08 	.word	0x2040cd08
  409b94:	2040cd08 	.word	0x2040cd08
  409b98:	2040cd10 	.word	0x2040cd10
  409b9c:	2040cd10 	.word	0x2040cd10
  409ba0:	2040cd18 	.word	0x2040cd18
  409ba4:	2040cd18 	.word	0x2040cd18
  409ba8:	2040cd20 	.word	0x2040cd20
  409bac:	2040cd20 	.word	0x2040cd20
  409bb0:	2040cd28 	.word	0x2040cd28
  409bb4:	2040cd28 	.word	0x2040cd28
  409bb8:	2040cd30 	.word	0x2040cd30
  409bbc:	2040cd30 	.word	0x2040cd30
  409bc0:	2040cd38 	.word	0x2040cd38
  409bc4:	2040cd38 	.word	0x2040cd38
  409bc8:	2040cd40 	.word	0x2040cd40
  409bcc:	2040cd40 	.word	0x2040cd40
  409bd0:	2040cd48 	.word	0x2040cd48
  409bd4:	2040cd48 	.word	0x2040cd48
  409bd8:	2040cd50 	.word	0x2040cd50
  409bdc:	2040cd50 	.word	0x2040cd50
  409be0:	2040cd58 	.word	0x2040cd58
  409be4:	2040cd58 	.word	0x2040cd58
  409be8:	2040cd60 	.word	0x2040cd60
  409bec:	2040cd60 	.word	0x2040cd60
  409bf0:	2040cd68 	.word	0x2040cd68
  409bf4:	2040cd68 	.word	0x2040cd68
  409bf8:	2040cd70 	.word	0x2040cd70
  409bfc:	2040cd70 	.word	0x2040cd70
  409c00:	2040cd78 	.word	0x2040cd78
  409c04:	2040cd78 	.word	0x2040cd78
  409c08:	2040cd80 	.word	0x2040cd80
  409c0c:	2040cd80 	.word	0x2040cd80
  409c10:	2040cd88 	.word	0x2040cd88
  409c14:	2040cd88 	.word	0x2040cd88
  409c18:	2040cd90 	.word	0x2040cd90
  409c1c:	2040cd90 	.word	0x2040cd90
  409c20:	2040cd98 	.word	0x2040cd98
  409c24:	2040cd98 	.word	0x2040cd98
  409c28:	2040cda0 	.word	0x2040cda0
  409c2c:	2040cda0 	.word	0x2040cda0
  409c30:	2040cda8 	.word	0x2040cda8
  409c34:	2040cda8 	.word	0x2040cda8
  409c38:	2040cdb0 	.word	0x2040cdb0
  409c3c:	2040cdb0 	.word	0x2040cdb0
  409c40:	2040cdb8 	.word	0x2040cdb8
  409c44:	2040cdb8 	.word	0x2040cdb8
  409c48:	2040cdc0 	.word	0x2040cdc0
  409c4c:	2040cdc0 	.word	0x2040cdc0
  409c50:	2040cdc8 	.word	0x2040cdc8
  409c54:	2040cdc8 	.word	0x2040cdc8
  409c58:	2040cdd0 	.word	0x2040cdd0
  409c5c:	2040cdd0 	.word	0x2040cdd0
  409c60:	2040cdd8 	.word	0x2040cdd8
  409c64:	2040cdd8 	.word	0x2040cdd8
  409c68:	2040cde0 	.word	0x2040cde0
  409c6c:	2040cde0 	.word	0x2040cde0
  409c70:	2040cde8 	.word	0x2040cde8
  409c74:	2040cde8 	.word	0x2040cde8
  409c78:	2040cdf0 	.word	0x2040cdf0
  409c7c:	2040cdf0 	.word	0x2040cdf0
  409c80:	2040cdf8 	.word	0x2040cdf8
  409c84:	2040cdf8 	.word	0x2040cdf8
  409c88:	2040ce00 	.word	0x2040ce00
  409c8c:	2040ce00 	.word	0x2040ce00
  409c90:	2040ce08 	.word	0x2040ce08
  409c94:	2040ce08 	.word	0x2040ce08
  409c98:	2040ce10 	.word	0x2040ce10
  409c9c:	2040ce10 	.word	0x2040ce10
  409ca0:	2040ce18 	.word	0x2040ce18
  409ca4:	2040ce18 	.word	0x2040ce18
  409ca8:	2040ce20 	.word	0x2040ce20
  409cac:	2040ce20 	.word	0x2040ce20
  409cb0:	2040ce28 	.word	0x2040ce28
  409cb4:	2040ce28 	.word	0x2040ce28
  409cb8:	2040ce30 	.word	0x2040ce30
  409cbc:	2040ce30 	.word	0x2040ce30
  409cc0:	2040ce38 	.word	0x2040ce38
  409cc4:	2040ce38 	.word	0x2040ce38
  409cc8:	2040ce40 	.word	0x2040ce40
  409ccc:	2040ce40 	.word	0x2040ce40
  409cd0:	2040ce48 	.word	0x2040ce48
  409cd4:	2040ce48 	.word	0x2040ce48
  409cd8:	2040ce50 	.word	0x2040ce50
  409cdc:	2040ce50 	.word	0x2040ce50
  409ce0:	2040ce58 	.word	0x2040ce58
  409ce4:	2040ce58 	.word	0x2040ce58
  409ce8:	2040ce60 	.word	0x2040ce60
  409cec:	2040ce60 	.word	0x2040ce60
  409cf0:	2040ce68 	.word	0x2040ce68
  409cf4:	2040ce68 	.word	0x2040ce68
  409cf8:	2040ce70 	.word	0x2040ce70
  409cfc:	2040ce70 	.word	0x2040ce70
  409d00:	2040ce78 	.word	0x2040ce78
  409d04:	2040ce78 	.word	0x2040ce78
  409d08:	2040ce80 	.word	0x2040ce80
  409d0c:	2040ce80 	.word	0x2040ce80
  409d10:	2040ce88 	.word	0x2040ce88
  409d14:	2040ce88 	.word	0x2040ce88
  409d18:	2040ce90 	.word	0x2040ce90
  409d1c:	2040ce90 	.word	0x2040ce90
  409d20:	2040ce98 	.word	0x2040ce98
  409d24:	2040ce98 	.word	0x2040ce98
  409d28:	2040cea0 	.word	0x2040cea0
  409d2c:	2040cea0 	.word	0x2040cea0
  409d30:	2040cea8 	.word	0x2040cea8
  409d34:	2040cea8 	.word	0x2040cea8
  409d38:	2040ceb0 	.word	0x2040ceb0
  409d3c:	2040ceb0 	.word	0x2040ceb0
  409d40:	2040ceb8 	.word	0x2040ceb8
  409d44:	2040ceb8 	.word	0x2040ceb8
  409d48:	2040cec0 	.word	0x2040cec0
  409d4c:	2040cec0 	.word	0x2040cec0
  409d50:	2040cec8 	.word	0x2040cec8
  409d54:	2040cec8 	.word	0x2040cec8
  409d58:	2040ced0 	.word	0x2040ced0
  409d5c:	2040ced0 	.word	0x2040ced0
  409d60:	2040ced8 	.word	0x2040ced8
  409d64:	2040ced8 	.word	0x2040ced8
  409d68:	2040cee0 	.word	0x2040cee0
  409d6c:	2040cee0 	.word	0x2040cee0
  409d70:	2040cee8 	.word	0x2040cee8
  409d74:	2040cee8 	.word	0x2040cee8
  409d78:	2040cef0 	.word	0x2040cef0
  409d7c:	2040cef0 	.word	0x2040cef0
  409d80:	2040cef8 	.word	0x2040cef8
  409d84:	2040cef8 	.word	0x2040cef8
  409d88:	2040cf00 	.word	0x2040cf00
  409d8c:	2040cf00 	.word	0x2040cf00
  409d90:	2040cf08 	.word	0x2040cf08
  409d94:	2040cf08 	.word	0x2040cf08
  409d98:	2040cf10 	.word	0x2040cf10
  409d9c:	2040cf10 	.word	0x2040cf10
  409da0:	2040cf18 	.word	0x2040cf18
  409da4:	2040cf18 	.word	0x2040cf18
  409da8:	2040cf20 	.word	0x2040cf20
  409dac:	2040cf20 	.word	0x2040cf20
  409db0:	2040cf28 	.word	0x2040cf28
  409db4:	2040cf28 	.word	0x2040cf28
  409db8:	2040cf30 	.word	0x2040cf30
  409dbc:	2040cf30 	.word	0x2040cf30
  409dc0:	2040cf38 	.word	0x2040cf38
  409dc4:	2040cf38 	.word	0x2040cf38
  409dc8:	2040cf40 	.word	0x2040cf40
  409dcc:	2040cf40 	.word	0x2040cf40
  409dd0:	2040cf48 	.word	0x2040cf48
  409dd4:	2040cf48 	.word	0x2040cf48
  409dd8:	2040cf50 	.word	0x2040cf50
  409ddc:	2040cf50 	.word	0x2040cf50
  409de0:	2040cf58 	.word	0x2040cf58
  409de4:	2040cf58 	.word	0x2040cf58
  409de8:	2040cf60 	.word	0x2040cf60
  409dec:	2040cf60 	.word	0x2040cf60
  409df0:	2040cf68 	.word	0x2040cf68
  409df4:	2040cf68 	.word	0x2040cf68
  409df8:	2040cf70 	.word	0x2040cf70
  409dfc:	2040cf70 	.word	0x2040cf70
  409e00:	2040cf78 	.word	0x2040cf78
  409e04:	2040cf78 	.word	0x2040cf78
  409e08:	2040cf80 	.word	0x2040cf80
  409e0c:	2040cf80 	.word	0x2040cf80
  409e10:	2040cf88 	.word	0x2040cf88
  409e14:	2040cf88 	.word	0x2040cf88
  409e18:	2040cf90 	.word	0x2040cf90
  409e1c:	2040cf90 	.word	0x2040cf90
  409e20:	2040cf98 	.word	0x2040cf98
  409e24:	2040cf98 	.word	0x2040cf98
  409e28:	2040cfa0 	.word	0x2040cfa0
  409e2c:	2040cfa0 	.word	0x2040cfa0
  409e30:	2040cfa8 	.word	0x2040cfa8
  409e34:	2040cfa8 	.word	0x2040cfa8
  409e38:	2040cfb0 	.word	0x2040cfb0
  409e3c:	2040cfb0 	.word	0x2040cfb0
  409e40:	2040cfb8 	.word	0x2040cfb8
  409e44:	2040cfb8 	.word	0x2040cfb8
  409e48:	2040cfc0 	.word	0x2040cfc0
  409e4c:	2040cfc0 	.word	0x2040cfc0
  409e50:	2040cfc8 	.word	0x2040cfc8
  409e54:	2040cfc8 	.word	0x2040cfc8
  409e58:	2040cfd0 	.word	0x2040cfd0
  409e5c:	2040cfd0 	.word	0x2040cfd0
  409e60:	2040cfd8 	.word	0x2040cfd8
  409e64:	2040cfd8 	.word	0x2040cfd8
  409e68:	2040cfe0 	.word	0x2040cfe0
  409e6c:	2040cfe0 	.word	0x2040cfe0
  409e70:	2040cfe8 	.word	0x2040cfe8
  409e74:	2040cfe8 	.word	0x2040cfe8
  409e78:	2040cff0 	.word	0x2040cff0
  409e7c:	2040cff0 	.word	0x2040cff0
  409e80:	2040cff8 	.word	0x2040cff8
  409e84:	2040cff8 	.word	0x2040cff8
  409e88:	2040d000 	.word	0x2040d000
  409e8c:	2040d000 	.word	0x2040d000
  409e90:	2040d008 	.word	0x2040d008
  409e94:	2040d008 	.word	0x2040d008
  409e98:	2040d010 	.word	0x2040d010
  409e9c:	2040d010 	.word	0x2040d010
  409ea0:	2040d018 	.word	0x2040d018
  409ea4:	2040d018 	.word	0x2040d018
  409ea8:	2040d020 	.word	0x2040d020
  409eac:	2040d020 	.word	0x2040d020
  409eb0:	2040d028 	.word	0x2040d028
  409eb4:	2040d028 	.word	0x2040d028
  409eb8:	2040d030 	.word	0x2040d030
  409ebc:	2040d030 	.word	0x2040d030
  409ec0:	2040d038 	.word	0x2040d038
  409ec4:	2040d038 	.word	0x2040d038
  409ec8:	2040d040 	.word	0x2040d040
  409ecc:	2040d040 	.word	0x2040d040
  409ed0:	2040d048 	.word	0x2040d048
  409ed4:	2040d048 	.word	0x2040d048
  409ed8:	2040d050 	.word	0x2040d050
  409edc:	2040d050 	.word	0x2040d050
  409ee0:	2040d058 	.word	0x2040d058
  409ee4:	2040d058 	.word	0x2040d058
  409ee8:	2040d060 	.word	0x2040d060
  409eec:	2040d060 	.word	0x2040d060
  409ef0:	2040d068 	.word	0x2040d068
  409ef4:	2040d068 	.word	0x2040d068
  409ef8:	2040d070 	.word	0x2040d070
  409efc:	2040d070 	.word	0x2040d070
  409f00:	2040d078 	.word	0x2040d078
  409f04:	2040d078 	.word	0x2040d078
  409f08:	2040d78c 	.word	0x2040d78c
  409f0c:	00000004 	.word	0x00000004
  409f10:	00000001 	.word	0x00000001
  409f14:	ffffffff 	.word	0xffffffff
  409f18:	2040d790 	.word	0x2040d790
  409f1c:	00000004 	.word	0x00000004
  409f20:	00000001 	.word	0x00000001
  409f24:	00020000 	.word	0x00020000
  409f28:	20400050 	.word	0x20400050
  409f2c:	00000004 	.word	0x00000004
  409f30:	00000000 	.word	0x00000000
  409f34:	2040d794 	.word	0x2040d794
  409f38:	00000004 	.word	0x00000004
	...
  409f48:	22222222 	.word	0x22222222
  409f4c:	22222222 	.word	0x22222222

Disassembly of section .text._dtoa_r%42:

00409f50 <_dtoa_r>:
  409f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00409f54 <.LCFI4>:
  409f54:	6c05      	ldr	r5, [r0, #64]	; 0x40
  409f56:	b093      	sub	sp, #76	; 0x4c

00409f58 <.LCFI5>:
  409f58:	4604      	mov	r4, r0
  409f5a:	ec5b ab10 	vmov	sl, fp, d0
  409f5e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
  409f60:	9101      	str	r1, [sp, #4]
  409f62:	4691      	mov	r9, r2
  409f64:	9304      	str	r3, [sp, #16]
  409f66:	b14d      	cbz	r5, 409f7c <.LVL53+0x4>
  409f68:	6c42      	ldr	r2, [r0, #68]	; 0x44

00409f6a <.LVL50>:
  409f6a:	606a      	str	r2, [r5, #4]
  409f6c:	2301      	movs	r3, #1

00409f6e <.LVL51>:
  409f6e:	4093      	lsls	r3, r2
  409f70:	60ab      	str	r3, [r5, #8]
  409f72:	4629      	mov	r1, r5

00409f74 <.LVL52>:
  409f74:	f013 fd44 	bl	41da00 <_Bfree>

00409f78 <.LVL53>:
  409f78:	2300      	movs	r3, #0
  409f7a:	6423      	str	r3, [r4, #64]	; 0x40
  409f7c:	f1bb 0f00 	cmp.w	fp, #0
  409f80:	465e      	mov	r6, fp
  409f82:	db35      	blt.n	409ff0 <.LVL63>
  409f84:	2300      	movs	r3, #0
  409f86:	603b      	str	r3, [r7, #0]
  409f88:	4bc1      	ldr	r3, [pc, #772]	; (40a290 <.LVL134+0x20>)
  409f8a:	43b3      	bics	r3, r6
  409f8c:	d015      	beq.n	409fba <.LCFI7>
  409f8e:	ec4b ab17 	vmov	d7, sl, fp
  409f92:	eeb5 7b40 	vcmp.f64	d7, #0.0
  409f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr

00409f9a <.LVL55>:
  409f9a:	e9cd ab02 	strd	sl, fp, [sp, #8]
  409f9e:	d12d      	bne.n	409ffc <.LVL64>
  409fa0:	9a04      	ldr	r2, [sp, #16]
  409fa2:	2301      	movs	r3, #1
  409fa4:	6013      	str	r3, [r2, #0]

00409fa6 <.LVL56>:
  409fa6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  409fa8:	2b00      	cmp	r3, #0
  409faa:	f000 80b3 	beq.w	40a114 <.LVL99>
  409fae:	48b9      	ldr	r0, [pc, #740]	; (40a294 <.LVL134+0x24>)
  409fb0:	6018      	str	r0, [r3, #0]
  409fb2:	3801      	subs	r0, #1

00409fb4 <.LVL57>:
  409fb4:	b013      	add	sp, #76	; 0x4c

00409fb6 <.LCFI6>:
  409fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00409fba <.LCFI7>:
  409fba:	9a04      	ldr	r2, [sp, #16]
  409fbc:	f242 730f 	movw	r3, #9999	; 0x270f
  409fc0:	6013      	str	r3, [r2, #0]

00409fc2 <.LVL59>:
  409fc2:	f1ba 0f00 	cmp.w	sl, #0
  409fc6:	d10d      	bne.n	409fe4 <.LCFI9>
  409fc8:	f3c6 0613 	ubfx	r6, r6, #0, #20
  409fcc:	b956      	cbnz	r6, 409fe4 <.LCFI9>

00409fce <.LVL60>:
  409fce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  409fd0:	48b1      	ldr	r0, [pc, #708]	; (40a298 <.LVL134+0x28>)
  409fd2:	2b00      	cmp	r3, #0
  409fd4:	d0ee      	beq.n	409fb4 <.LVL57>
  409fd6:	f100 0308 	add.w	r3, r0, #8

00409fda <.LVL61>:
  409fda:	9a1d      	ldr	r2, [sp, #116]	; 0x74
  409fdc:	6013      	str	r3, [r2, #0]
  409fde:	b013      	add	sp, #76	; 0x4c

00409fe0 <.LCFI8>:
  409fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00409fe4 <.LCFI9>:
  409fe4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  409fe6:	48ad      	ldr	r0, [pc, #692]	; (40a29c <.LVL134+0x2c>)
  409fe8:	2b00      	cmp	r3, #0
  409fea:	d0e3      	beq.n	409fb4 <.LVL57>
  409fec:	1cc3      	adds	r3, r0, #3
  409fee:	e7f4      	b.n	409fda <.LVL61>

00409ff0 <.LVL63>:
  409ff0:	2301      	movs	r3, #1
  409ff2:	f02b 4600 	bic.w	r6, fp, #2147483648	; 0x80000000
  409ff6:	603b      	str	r3, [r7, #0]
  409ff8:	46b3      	mov	fp, r6
  409ffa:	e7c5      	b.n	409f88 <.LVL53+0x10>

00409ffc <.LVL64>:
  409ffc:	a911      	add	r1, sp, #68	; 0x44
  409ffe:	aa10      	add	r2, sp, #64	; 0x40
  40a000:	ed9d 0b02 	vldr	d0, [sp, #8]
  40a004:	4620      	mov	r0, r4
  40a006:	f00e fe81 	bl	418d0c <__d2b>

0040a00a <.LVL65>:
  40a00a:	0d31      	lsrs	r1, r6, #20
  40a00c:	4680      	mov	r8, r0

0040a00e <.LVL66>:
  40a00e:	d065      	beq.n	40a0dc <.LVL92>
  40a010:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40a014:	f3c3 0013 	ubfx	r0, r3, #0, #20

0040a018 <.LVL68>:
  40a018:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
  40a01c:	2500      	movs	r5, #0
  40a01e:	9810      	ldr	r0, [sp, #64]	; 0x40
  40a020:	950d      	str	r5, [sp, #52]	; 0x34
  40a022:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff

0040a026 <.LVL69>:
  40a026:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000

0040a02a <.LVL70>:
  40a02a:	ec43 2b17 	vmov	d7, r2, r3
  40a02e:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
  40a032:	ed9f 4b91 	vldr	d4, [pc, #580]	; 40a278 <.LVL134+0x8>
  40a036:	ee37 6b46 	vsub.f64	d6, d7, d6
  40a03a:	ed9f 7b91 	vldr	d7, [pc, #580]	; 40a280 <.LVL134+0x10>
  40a03e:	ed9f 5b92 	vldr	d5, [pc, #584]	; 40a288 <.LVL134+0x18>
  40a042:	eea6 7b04 	vfma.f64	d7, d6, d4
  40a046:	ee06 1a90 	vmov	s13, r1
  40a04a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
  40a04e:	eea6 7b05 	vfma.f64	d7, d6, d5

0040a052 <.LVL71>:
  40a052:	eefd 6bc7 	vcvt.s32.f64	s13, d7
  40a056:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
  40a05a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40a05e:	edcd 6a02 	vstr	s13, [sp, #8]

0040a062 <.LVL72>:
  40a062:	f100 8130 	bmi.w	40a2c6 <.LVL143>

0040a066 <.LVL73>:
  40a066:	9d02      	ldr	r5, [sp, #8]
  40a068:	2d16      	cmp	r5, #22
  40a06a:	f200 8101 	bhi.w	40a270 <.LVL134>
  40a06e:	4b8c      	ldr	r3, [pc, #560]	; (40a2a0 <.LVL134+0x30>)
  40a070:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40a074:	ed93 7b00 	vldr	d7, [r3]

0040a078 <.LVL74>:
  40a078:	ec4b ab16 	vmov	d6, sl, fp
  40a07c:	eeb4 7bc6 	vcmpe.f64	d7, d6
  40a080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40a084:	f340 8183 	ble.w	40a38e <.LVL173>
  40a088:	1e6b      	subs	r3, r5, #1
  40a08a:	9302      	str	r3, [sp, #8]

0040a08c <.LVL75>:
  40a08c:	2300      	movs	r3, #0

0040a08e <.LVL76>:
  40a08e:	930b      	str	r3, [sp, #44]	; 0x2c

0040a090 <.LVL77>:
  40a090:	1a41      	subs	r1, r0, r1

0040a092 <.LVL78>:
  40a092:	1e4b      	subs	r3, r1, #1

0040a094 <.LVL79>:
  40a094:	9306      	str	r3, [sp, #24]
  40a096:	f100 8110 	bmi.w	40a2ba <.LVL138>
  40a09a:	2300      	movs	r3, #0

0040a09c <.LVL80>:
  40a09c:	9307      	str	r3, [sp, #28]

0040a09e <.LVL81>:
  40a09e:	9b02      	ldr	r3, [sp, #8]
  40a0a0:	2b00      	cmp	r3, #0
  40a0a2:	f2c0 8101 	blt.w	40a2a8 <.LVL135>

0040a0a6 <.LVL82>:
  40a0a6:	9a06      	ldr	r2, [sp, #24]

0040a0a8 <.LVL83>:
  40a0a8:	930a      	str	r3, [sp, #40]	; 0x28
  40a0aa:	4611      	mov	r1, r2

0040a0ac <.LVL84>:
  40a0ac:	4419      	add	r1, r3
  40a0ae:	2300      	movs	r3, #0

0040a0b0 <.LVL85>:
  40a0b0:	9106      	str	r1, [sp, #24]

0040a0b2 <.LVL86>:
  40a0b2:	9305      	str	r3, [sp, #20]

0040a0b4 <.LVL87>:
  40a0b4:	9b01      	ldr	r3, [sp, #4]
  40a0b6:	2b09      	cmp	r3, #9
  40a0b8:	d82e      	bhi.n	40a118 <.LVL100>

0040a0ba <.LVL88>:
  40a0ba:	2b05      	cmp	r3, #5
  40a0bc:	f340 8550 	ble.w	40ab60 <.LVL445>
  40a0c0:	3b04      	subs	r3, #4

0040a0c2 <.LVL89>:
  40a0c2:	9301      	str	r3, [sp, #4]

0040a0c4 <.LVL90>:
  40a0c4:	2500      	movs	r5, #0

0040a0c6 <.LVL91>:
  40a0c6:	9b01      	ldr	r3, [sp, #4]
  40a0c8:	3b02      	subs	r3, #2
  40a0ca:	2b03      	cmp	r3, #3
  40a0cc:	f200 8550 	bhi.w	40ab70 <.LVL447>
  40a0d0:	e8df f013 	tbh	[pc, r3, lsl #1]
  40a0d4:	02860349 	.word	0x02860349
  40a0d8:	03d80356 	.word	0x03d80356

0040a0dc <.LVL92>:
  40a0dc:	9810      	ldr	r0, [sp, #64]	; 0x40

0040a0de <.LVL93>:
  40a0de:	9911      	ldr	r1, [sp, #68]	; 0x44

0040a0e0 <.LVL94>:
  40a0e0:	4401      	add	r1, r0
  40a0e2:	f201 4332 	addw	r3, r1, #1074	; 0x432

0040a0e6 <.LVL95>:
  40a0e6:	2b20      	cmp	r3, #32
  40a0e8:	f340 814a 	ble.w	40a380 <.LVL171>
  40a0ec:	f1c3 0340 	rsb	r3, r3, #64	; 0x40

0040a0f0 <.LVL96>:
  40a0f0:	f201 4212 	addw	r2, r1, #1042	; 0x412
  40a0f4:	409e      	lsls	r6, r3
  40a0f6:	fa2a f302 	lsr.w	r3, sl, r2
  40a0fa:	4333      	orrs	r3, r6
  40a0fc:	ee07 3a90 	vmov	s15, r3

0040a100 <.LVL97>:
  40a100:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  40a104:	2501      	movs	r5, #1
  40a106:	ec53 2b17 	vmov	r2, r3, d7
  40a10a:	3901      	subs	r1, #1

0040a10c <.LVL98>:
  40a10c:	f1a3 73f8 	sub.w	r3, r3, #32505856	; 0x1f00000
  40a110:	950d      	str	r5, [sp, #52]	; 0x34
  40a112:	e78a      	b.n	40a02a <.LVL70>

0040a114 <.LVL99>:
  40a114:	4863      	ldr	r0, [pc, #396]	; (40a2a4 <.LVL134+0x34>)
  40a116:	e74d      	b.n	409fb4 <.LVL57>

0040a118 <.LVL100>:
  40a118:	2100      	movs	r1, #0
  40a11a:	6461      	str	r1, [r4, #68]	; 0x44
  40a11c:	4620      	mov	r0, r4
  40a11e:	4689      	mov	r9, r1
  40a120:	f012 f99c 	bl	41c45c <.LFE2>

0040a124 <.LVL101>:
  40a124:	f04f 36ff 	mov.w	r6, #4294967295
  40a128:	2301      	movs	r3, #1
  40a12a:	9008      	str	r0, [sp, #32]
  40a12c:	6420      	str	r0, [r4, #64]	; 0x40

0040a12e <.LVL102>:
  40a12e:	f8cd 9004 	str.w	r9, [sp, #4]

0040a132 <.LVL103>:
  40a132:	960c      	str	r6, [sp, #48]	; 0x30
  40a134:	9309      	str	r3, [sp, #36]	; 0x24

0040a136 <.LVL104>:
  40a136:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40a138:	2b00      	cmp	r3, #0
  40a13a:	db7a      	blt.n	40a232 <.LCFI11>
  40a13c:	9a02      	ldr	r2, [sp, #8]
  40a13e:	2a0e      	cmp	r2, #14
  40a140:	dc77      	bgt.n	40a232 <.LCFI11>
  40a142:	4b57      	ldr	r3, [pc, #348]	; (40a2a0 <.LVL134+0x30>)
  40a144:	f1b9 0f00 	cmp.w	r9, #0
  40a148:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40a14c:	ed93 4b00 	vldr	d4, [r3]

0040a150 <.LVL105>:
  40a150:	f2c0 8332 	blt.w	40a7b8 <.LVL300>

0040a154 <.LVL106>:
  40a154:	ec4b ab17 	vmov	d7, sl, fp
  40a158:	ee87 6b04 	vdiv.f64	d6, d7, d4
  40a15c:	eebd 6bc6 	vcvt.s32.f64	s12, d6

0040a160 <.LVL107>:
  40a160:	9a08      	ldr	r2, [sp, #32]
  40a162:	ee16 3a10 	vmov	r3, s12
  40a166:	2e01      	cmp	r6, #1
  40a168:	f103 0330 	add.w	r3, r3, #48	; 0x30
  40a16c:	eeb8 5bc6 	vcvt.f64.s32	d5, s12
  40a170:	f102 0b01 	add.w	fp, r2, #1

0040a174 <.LVL108>:
  40a174:	7013      	strb	r3, [r2, #0]
  40a176:	eea5 7b44 	vfms.f64	d7, d5, d4
  40a17a:	d024      	beq.n	40a1c6 <.LVL115>
  40a17c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
  40a180:	ee27 7b03 	vmul.f64	d7, d7, d3
  40a184:	eeb5 7b40 	vcmp.f64	d7, #0.0
  40a188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40a18c:	d03c      	beq.n	40a208 <.L76>
  40a18e:	eeb1 2b44 	vneg.f64	d2, d4
  40a192:	9a08      	ldr	r2, [sp, #32]
  40a194:	e006      	b.n	40a1a4 <.LVL110>

0040a196 <.LVL109>:
  40a196:	ee27 7b03 	vmul.f64	d7, d7, d3
  40a19a:	eeb5 7b40 	vcmp.f64	d7, #0.0
  40a19e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40a1a2:	d031      	beq.n	40a208 <.L76>

0040a1a4 <.LVL110>:
  40a1a4:	ee87 6b04 	vdiv.f64	d6, d7, d4

0040a1a8 <.LVL111>:
  40a1a8:	eebd 6bc6 	vcvt.s32.f64	s12, d6

0040a1ac <.LVL112>:
  40a1ac:	ee16 3a10 	vmov	r3, s12
  40a1b0:	3330      	adds	r3, #48	; 0x30
  40a1b2:	f80b 3b01 	strb.w	r3, [fp], #1

0040a1b6 <.LVL113>:
  40a1b6:	ebab 0302 	sub.w	r3, fp, r2
  40a1ba:	42b3      	cmp	r3, r6
  40a1bc:	eeb8 5bc6 	vcvt.f64.s32	d5, s12
  40a1c0:	eea2 7b05 	vfma.f64	d7, d2, d5

0040a1c4 <.LVL114>:
  40a1c4:	d1e7      	bne.n	40a196 <.LVL109>

0040a1c6 <.LVL115>:
  40a1c6:	ee37 7b07 	vadd.f64	d7, d7, d7
  40a1ca:	eeb4 4bc7 	vcmpe.f64	d4, d7
  40a1ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40a1d2:	d408      	bmi.n	40a1e6 <.LVL115+0x20>
  40a1d4:	eeb4 4b47 	vcmp.f64	d4, d7
  40a1d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40a1dc:	d114      	bne.n	40a208 <.L76>
  40a1de:	ee16 3a10 	vmov	r3, s12
  40a1e2:	07db      	lsls	r3, r3, #31
  40a1e4:	d510      	bpl.n	40a208 <.L76>
  40a1e6:	f81b 3c01 	ldrb.w	r3, [fp, #-1]

0040a1ea <.L77>:
  40a1ea:	9908      	ldr	r1, [sp, #32]
  40a1ec:	f10b 32ff 	add.w	r2, fp, #4294967295
  40a1f0:	e004      	b.n	40a1fc <.LVL118>

0040a1f2 <.LVL117>:
  40a1f2:	4291      	cmp	r1, r2
  40a1f4:	f000 83da 	beq.w	40a9ac <.LVL375>
  40a1f8:	f812 3d01 	ldrb.w	r3, [r2, #-1]!

0040a1fc <.LVL118>:
  40a1fc:	2b39      	cmp	r3, #57	; 0x39
  40a1fe:	f102 0b01 	add.w	fp, r2, #1

0040a202 <.LVL119>:
  40a202:	d0f6      	beq.n	40a1f2 <.LVL117>

0040a204 <.LVL120>:
  40a204:	3301      	adds	r3, #1
  40a206:	7013      	strb	r3, [r2, #0]

0040a208 <.L76>:
  40a208:	4641      	mov	r1, r8
  40a20a:	4620      	mov	r0, r4

0040a20c <.LVL122>:
  40a20c:	f013 fbf8 	bl	41da00 <_Bfree>

0040a210 <.LVL123>:
  40a210:	2200      	movs	r2, #0
  40a212:	9b02      	ldr	r3, [sp, #8]
  40a214:	f88b 2000 	strb.w	r2, [fp]
  40a218:	9a04      	ldr	r2, [sp, #16]
  40a21a:	3301      	adds	r3, #1
  40a21c:	6013      	str	r3, [r2, #0]
  40a21e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40a220:	2b00      	cmp	r3, #0
  40a222:	f000 8355 	beq.w	40a8d0 <.LVL340>
  40a226:	9808      	ldr	r0, [sp, #32]
  40a228:	f8c3 b000 	str.w	fp, [r3]
  40a22c:	b013      	add	sp, #76	; 0x4c

0040a22e <.LCFI10>:
  40a22e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040a232 <.LCFI11>:
  40a232:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40a234:	2a00      	cmp	r2, #0
  40a236:	d052      	beq.n	40a2de <.LVL145>
  40a238:	9a01      	ldr	r2, [sp, #4]
  40a23a:	2a01      	cmp	r2, #1
  40a23c:	f340 82e2 	ble.w	40a804 <.LVL312>
  40a240:	9905      	ldr	r1, [sp, #20]
  40a242:	1e72      	subs	r2, r6, #1

0040a244 <.LVL125>:
  40a244:	4291      	cmp	r1, r2
  40a246:	f2c0 8346 	blt.w	40a8d6 <.LVL341>
  40a24a:	1a8b      	subs	r3, r1, r2
  40a24c:	930d      	str	r3, [sp, #52]	; 0x34

0040a24e <.LVL126>:
  40a24e:	2e00      	cmp	r6, #0
  40a250:	f2c0 8415 	blt.w	40aa7e <.LVL411>
  40a254:	9f07      	ldr	r7, [sp, #28]
  40a256:	4633      	mov	r3, r6

0040a258 <.LVL127>:
  40a258:	9a07      	ldr	r2, [sp, #28]
  40a25a:	441a      	add	r2, r3
  40a25c:	9207      	str	r2, [sp, #28]

0040a25e <.LVL128>:
  40a25e:	9a06      	ldr	r2, [sp, #24]

0040a260 <.LVL129>:
  40a260:	2101      	movs	r1, #1
  40a262:	441a      	add	r2, r3
  40a264:	4620      	mov	r0, r4

0040a266 <.LVL130>:
  40a266:	9206      	str	r2, [sp, #24]

0040a268 <.LVL131>:
  40a268:	f013 fbd4 	bl	41da14 <__i2b>

0040a26c <.LVL132>:
  40a26c:	4605      	mov	r5, r0

0040a26e <.LVL133>:
  40a26e:	e03a      	b.n	40a2e6 <.LVL146>

0040a270 <.LVL134>:
  40a270:	2301      	movs	r3, #1
  40a272:	930b      	str	r3, [sp, #44]	; 0x2c
  40a274:	e70c      	b.n	40a090 <.LVL77>
  40a276:	bf00      	nop
  40a278:	636f4361 	.word	0x636f4361
  40a27c:	3fd287a7 	.word	0x3fd287a7
  40a280:	8b60c8b3 	.word	0x8b60c8b3
  40a284:	3fc68a28 	.word	0x3fc68a28
  40a288:	509f79fb 	.word	0x509f79fb
  40a28c:	3fd34413 	.word	0x3fd34413
  40a290:	7ff00000 	.word	0x7ff00000
  40a294:	0041d9fd 	.word	0x0041d9fd
  40a298:	0041d9ec 	.word	0x0041d9ec
  40a29c:	0041d9f8 	.word	0x0041d9f8
  40a2a0:	00418878 	.word	0x00418878
  40a2a4:	0041d9fc 	.word	0x0041d9fc

0040a2a8 <.LVL135>:
  40a2a8:	9a07      	ldr	r2, [sp, #28]

0040a2aa <.LVL136>:
  40a2aa:	9b02      	ldr	r3, [sp, #8]
  40a2ac:	1ad2      	subs	r2, r2, r3
  40a2ae:	425b      	negs	r3, r3
  40a2b0:	9305      	str	r3, [sp, #20]
  40a2b2:	2300      	movs	r3, #0
  40a2b4:	9207      	str	r2, [sp, #28]

0040a2b6 <.LVL137>:
  40a2b6:	930a      	str	r3, [sp, #40]	; 0x28
  40a2b8:	e6fc      	b.n	40a0b4 <.LVL87>

0040a2ba <.LVL138>:
  40a2ba:	f1c1 0301 	rsb	r3, r1, #1

0040a2be <.LVL139>:
  40a2be:	9307      	str	r3, [sp, #28]

0040a2c0 <.LVL140>:
  40a2c0:	2300      	movs	r3, #0

0040a2c2 <.LVL141>:
  40a2c2:	9306      	str	r3, [sp, #24]

0040a2c4 <.LVL142>:
  40a2c4:	e6eb      	b.n	40a09e <.LVL81>

0040a2c6 <.LVL143>:
  40a2c6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
  40a2ca:	eeb4 7b46 	vcmp.f64	d7, d6
  40a2ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40a2d2:	f43f aec8 	beq.w	40a066 <.LVL73>
  40a2d6:	9b02      	ldr	r3, [sp, #8]
  40a2d8:	3b01      	subs	r3, #1
  40a2da:	9302      	str	r3, [sp, #8]

0040a2dc <.LVL144>:
  40a2dc:	e6c3      	b.n	40a066 <.LVL73>

0040a2de <.LVL145>:
  40a2de:	9b05      	ldr	r3, [sp, #20]
  40a2e0:	9f07      	ldr	r7, [sp, #28]
  40a2e2:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40a2e4:	930d      	str	r3, [sp, #52]	; 0x34

0040a2e6 <.LVL146>:
  40a2e6:	2f00      	cmp	r7, #0
  40a2e8:	dd0c      	ble.n	40a304 <.LVL151>
  40a2ea:	9906      	ldr	r1, [sp, #24]
  40a2ec:	2900      	cmp	r1, #0
  40a2ee:	460b      	mov	r3, r1
  40a2f0:	dd08      	ble.n	40a304 <.LVL151>
  40a2f2:	42b9      	cmp	r1, r7
  40a2f4:	9a07      	ldr	r2, [sp, #28]
  40a2f6:	bfa8      	it	ge
  40a2f8:	463b      	movge	r3, r7

0040a2fa <.LVL147>:
  40a2fa:	1ad2      	subs	r2, r2, r3
  40a2fc:	1aff      	subs	r7, r7, r3

0040a2fe <.LVL148>:
  40a2fe:	1acb      	subs	r3, r1, r3

0040a300 <.LVL149>:
  40a300:	9207      	str	r2, [sp, #28]

0040a302 <.LVL150>:
  40a302:	9306      	str	r3, [sp, #24]

0040a304 <.LVL151>:
  40a304:	9b05      	ldr	r3, [sp, #20]
  40a306:	b1eb      	cbz	r3, 40a344 <.LVL162>
  40a308:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a30a:	2b00      	cmp	r3, #0
  40a30c:	f000 8273 	beq.w	40a7f6 <.LVL308>
  40a310:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40a312:	2b00      	cmp	r3, #0
  40a314:	dd11      	ble.n	40a33a <.LVL160>
  40a316:	461a      	mov	r2, r3
  40a318:	4629      	mov	r1, r5
  40a31a:	4620      	mov	r0, r4

0040a31c <.LVL152>:
  40a31c:	f00f fb68 	bl	4199f0 <__pow5mult>

0040a320 <.LVL153>:
  40a320:	4642      	mov	r2, r8
  40a322:	4601      	mov	r1, r0
  40a324:	4605      	mov	r5, r0

0040a326 <.LVL154>:
  40a326:	4620      	mov	r0, r4

0040a328 <.LVL155>:
  40a328:	f00c fc90 	bl	416c4c <.LBE11>

0040a32c <.LVL156>:
  40a32c:	4641      	mov	r1, r8
  40a32e:	900e      	str	r0, [sp, #56]	; 0x38

0040a330 <.LVL157>:
  40a330:	4620      	mov	r0, r4

0040a332 <.LVL158>:
  40a332:	f013 fb65 	bl	41da00 <_Bfree>

0040a336 <.LVL159>:
  40a336:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40a338:	4698      	mov	r8, r3

0040a33a <.LVL160>:
  40a33a:	9b05      	ldr	r3, [sp, #20]
  40a33c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40a33e:	1a9a      	subs	r2, r3, r2

0040a340 <.LVL161>:
  40a340:	f040 825a 	bne.w	40a7f8 <.LVL308+0x2>

0040a344 <.LVL162>:
  40a344:	2101      	movs	r1, #1
  40a346:	4620      	mov	r0, r4

0040a348 <.LVL163>:
  40a348:	f013 fb64 	bl	41da14 <__i2b>

0040a34c <.LVL164>:
  40a34c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a34e:	9005      	str	r0, [sp, #20]

0040a350 <.LVL165>:
  40a350:	2b00      	cmp	r3, #0
  40a352:	dd1f      	ble.n	40a394 <.LVL174>
  40a354:	4601      	mov	r1, r0
  40a356:	461a      	mov	r2, r3
  40a358:	4620      	mov	r0, r4

0040a35a <.LVL166>:
  40a35a:	f00f fb49 	bl	4199f0 <__pow5mult>

0040a35e <.LVL167>:
  40a35e:	9b01      	ldr	r3, [sp, #4]
  40a360:	9005      	str	r0, [sp, #20]

0040a362 <.LVL168>:
  40a362:	2b01      	cmp	r3, #1
  40a364:	f340 820f 	ble.w	40a786 <.LVL293>
  40a368:	2300      	movs	r3, #0
  40a36a:	930d      	str	r3, [sp, #52]	; 0x34

0040a36c <.LVL169>:
  40a36c:	9a05      	ldr	r2, [sp, #20]
  40a36e:	6913      	ldr	r3, [r2, #16]
  40a370:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40a374:	6918      	ldr	r0, [r3, #16]
  40a376:	f012 fb3d 	bl	41c9f4 <__hi0bits>

0040a37a <.LVL170>:
  40a37a:	f1c0 0020 	rsb	r0, r0, #32
  40a37e:	e013      	b.n	40a3a8 <.LVL175+0x8>

0040a380 <.LVL171>:
  40a380:	f1c3 0320 	rsb	r3, r3, #32

0040a384 <.LVL172>:
  40a384:	fa0a f303 	lsl.w	r3, sl, r3
  40a388:	ee07 3a90 	vmov	s15, r3
  40a38c:	e6b8      	b.n	40a100 <.LVL97>

0040a38e <.LVL173>:
  40a38e:	2300      	movs	r3, #0
  40a390:	930b      	str	r3, [sp, #44]	; 0x2c
  40a392:	e67d      	b.n	40a090 <.LVL77>

0040a394 <.LVL174>:
  40a394:	9b01      	ldr	r3, [sp, #4]
  40a396:	2b01      	cmp	r3, #1
  40a398:	f340 823e 	ble.w	40a818 <.LVL314>
  40a39c:	2300      	movs	r3, #0
  40a39e:	930d      	str	r3, [sp, #52]	; 0x34

0040a3a0 <.LVL175>:
  40a3a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a3a2:	2001      	movs	r0, #1
  40a3a4:	2b00      	cmp	r3, #0
  40a3a6:	d1e1      	bne.n	40a36c <.LVL169>
  40a3a8:	9a06      	ldr	r2, [sp, #24]
  40a3aa:	4410      	add	r0, r2

0040a3ac <.LVL176>:
  40a3ac:	f010 001f 	ands.w	r0, r0, #31

0040a3b0 <.LVL177>:
  40a3b0:	f000 809e 	beq.w	40a4f0 <.LVL217>
  40a3b4:	f1c0 0320 	rsb	r3, r0, #32

0040a3b8 <.LVL178>:
  40a3b8:	2b04      	cmp	r3, #4
  40a3ba:	f340 83d4 	ble.w	40ab66 <.LVL446>
  40a3be:	9b07      	ldr	r3, [sp, #28]

0040a3c0 <.LVL179>:
  40a3c0:	f1c0 001c 	rsb	r0, r0, #28

0040a3c4 <.LVL180>:
  40a3c4:	4403      	add	r3, r0
  40a3c6:	9307      	str	r3, [sp, #28]

0040a3c8 <.LVL181>:
  40a3c8:	4613      	mov	r3, r2

0040a3ca <.LVL182>:
  40a3ca:	4403      	add	r3, r0
  40a3cc:	4407      	add	r7, r0
  40a3ce:	9306      	str	r3, [sp, #24]

0040a3d0 <.LVL184>:
  40a3d0:	9b07      	ldr	r3, [sp, #28]
  40a3d2:	2b00      	cmp	r3, #0
  40a3d4:	dd05      	ble.n	40a3e2 <.LVL185+0x2>
  40a3d6:	4641      	mov	r1, r8
  40a3d8:	461a      	mov	r2, r3
  40a3da:	4620      	mov	r0, r4
  40a3dc:	f00f f91c 	bl	419618 <__lshift>

0040a3e0 <.LVL185>:
  40a3e0:	4680      	mov	r8, r0
  40a3e2:	9b06      	ldr	r3, [sp, #24]
  40a3e4:	2b00      	cmp	r3, #0
  40a3e6:	dd05      	ble.n	40a3f4 <.LVL187+0x2>
  40a3e8:	461a      	mov	r2, r3
  40a3ea:	9905      	ldr	r1, [sp, #20]
  40a3ec:	4620      	mov	r0, r4
  40a3ee:	f00f f913 	bl	419618 <__lshift>

0040a3f2 <.LVL187>:
  40a3f2:	9005      	str	r0, [sp, #20]
  40a3f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40a3f6:	2b00      	cmp	r3, #0
  40a3f8:	f040 8083 	bne.w	40a502 <.LVL223>
  40a3fc:	2e00      	cmp	r6, #0
  40a3fe:	f340 821e 	ble.w	40a83e <.LVL322>
  40a402:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a404:	2b00      	cmp	r3, #0
  40a406:	f000 8096 	beq.w	40a536 <.LVL230>

0040a40a <.LVL189>:
  40a40a:	2f00      	cmp	r7, #0
  40a40c:	dd05      	ble.n	40a41a <.LVL191>
  40a40e:	4629      	mov	r1, r5
  40a410:	463a      	mov	r2, r7
  40a412:	4620      	mov	r0, r4
  40a414:	f00f f900 	bl	419618 <__lshift>

0040a418 <.LVL190>:
  40a418:	4605      	mov	r5, r0

0040a41a <.LVL191>:
  40a41a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40a41c:	2b00      	cmp	r3, #0
  40a41e:	f040 82ce 	bne.w	40a9be <.LVL378>
  40a422:	462f      	mov	r7, r5

0040a424 <.LVL192>:
  40a424:	9b08      	ldr	r3, [sp, #32]
  40a426:	3e01      	subs	r6, #1
  40a428:	199a      	adds	r2, r3, r6
  40a42a:	9209      	str	r2, [sp, #36]	; 0x24
  40a42c:	f00a 0201 	and.w	r2, sl, #1
  40a430:	920a      	str	r2, [sp, #40]	; 0x28

0040a432 <.LVL193>:
  40a432:	461e      	mov	r6, r3

0040a434 <.LVL194>:
  40a434:	f8dd b014 	ldr.w	fp, [sp, #20]
  40a438:	4640      	mov	r0, r8
  40a43a:	4659      	mov	r1, fp
  40a43c:	f00c fa4e 	bl	4168dc <quorem>

0040a440 <.LVL195>:
  40a440:	4629      	mov	r1, r5
  40a442:	4682      	mov	sl, r0

0040a444 <.LVL196>:
  40a444:	4640      	mov	r0, r8
  40a446:	f012 fcc9 	bl	41cddc <.LBE18>

0040a44a <.LVL197>:
  40a44a:	463a      	mov	r2, r7
  40a44c:	4659      	mov	r1, fp
  40a44e:	4681      	mov	r9, r0
  40a450:	4620      	mov	r0, r4
  40a452:	f00c fe33 	bl	4170bc <.LFE20>

0040a456 <.LVL198>:
  40a456:	68c3      	ldr	r3, [r0, #12]
  40a458:	4683      	mov	fp, r0
  40a45a:	f10a 0230 	add.w	r2, sl, #48	; 0x30

0040a45e <.LVL199>:
  40a45e:	2b00      	cmp	r3, #0
  40a460:	f040 81e5 	bne.w	40a82e <.LVL318>
  40a464:	4601      	mov	r1, r0
  40a466:	4640      	mov	r0, r8

0040a468 <.LVL200>:
  40a468:	9207      	str	r2, [sp, #28]
  40a46a:	f012 fcb7 	bl	41cddc <.LBE18>

0040a46e <.LVL201>:
  40a46e:	4659      	mov	r1, fp
  40a470:	9006      	str	r0, [sp, #24]

0040a472 <.LVL202>:
  40a472:	4620      	mov	r0, r4

0040a474 <.LVL203>:
  40a474:	f013 fac4 	bl	41da00 <_Bfree>

0040a478 <.LVL204>:
  40a478:	9b06      	ldr	r3, [sp, #24]
  40a47a:	9a07      	ldr	r2, [sp, #28]
  40a47c:	b933      	cbnz	r3, 40a48c <.LVL205>
  40a47e:	9901      	ldr	r1, [sp, #4]
  40a480:	b921      	cbnz	r1, 40a48c <.LVL205>
  40a482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a484:	2b00      	cmp	r3, #0
  40a486:	f000 8343 	beq.w	40ab10 <.LVL432>
  40a48a:	9b01      	ldr	r3, [sp, #4]

0040a48c <.LVL205>:
  40a48c:	f1b9 0f00 	cmp.w	r9, #0
  40a490:	f2c0 823b 	blt.w	40a90a <.LVL352>
  40a494:	d105      	bne.n	40a4a2 <.LVL205+0x16>
  40a496:	9901      	ldr	r1, [sp, #4]
  40a498:	b919      	cbnz	r1, 40a4a2 <.LVL205+0x16>
  40a49a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a49c:	2900      	cmp	r1, #0
  40a49e:	f000 8234 	beq.w	40a90a <.LVL352>
  40a4a2:	2b00      	cmp	r3, #0
  40a4a4:	f300 829f 	bgt.w	40a9e6 <.LVL385>
  40a4a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a4aa:	7032      	strb	r2, [r6, #0]
  40a4ac:	f106 0901 	add.w	r9, r6, #1

0040a4b0 <.LVL206>:
  40a4b0:	429e      	cmp	r6, r3
  40a4b2:	46cb      	mov	fp, r9

0040a4b4 <.LVL207>:
  40a4b4:	f000 82a2 	beq.w	40a9fc <.LVL390>
  40a4b8:	4641      	mov	r1, r8
  40a4ba:	2300      	movs	r3, #0
  40a4bc:	220a      	movs	r2, #10
  40a4be:	4620      	mov	r0, r4
  40a4c0:	f010 fb70 	bl	41aba4 <__multadd>

0040a4c4 <.LVL208>:
  40a4c4:	42bd      	cmp	r5, r7
  40a4c6:	4680      	mov	r8, r0

0040a4c8 <.LVL209>:
  40a4c8:	4629      	mov	r1, r5
  40a4ca:	f04f 0300 	mov.w	r3, #0
  40a4ce:	f04f 020a 	mov.w	r2, #10
  40a4d2:	4620      	mov	r0, r4

0040a4d4 <.LVL210>:
  40a4d4:	f000 81a5 	beq.w	40a822 <.LVL315>

0040a4d8 <.LVL211>:
  40a4d8:	f010 fb64 	bl	41aba4 <__multadd>

0040a4dc <.LVL212>:
  40a4dc:	4639      	mov	r1, r7
  40a4de:	4605      	mov	r5, r0

0040a4e0 <.LVL213>:
  40a4e0:	2300      	movs	r3, #0
  40a4e2:	220a      	movs	r2, #10
  40a4e4:	4620      	mov	r0, r4

0040a4e6 <.LVL214>:
  40a4e6:	f010 fb5d 	bl	41aba4 <__multadd>

0040a4ea <.LVL215>:
  40a4ea:	464e      	mov	r6, r9
  40a4ec:	4607      	mov	r7, r0

0040a4ee <.LVL216>:
  40a4ee:	e7a1      	b.n	40a434 <.LVL194>

0040a4f0 <.LVL217>:
  40a4f0:	201c      	movs	r0, #28

0040a4f2 <.LVL218>:
  40a4f2:	9b07      	ldr	r3, [sp, #28]
  40a4f4:	4403      	add	r3, r0
  40a4f6:	9307      	str	r3, [sp, #28]

0040a4f8 <.LVL219>:
  40a4f8:	9b06      	ldr	r3, [sp, #24]

0040a4fa <.LVL220>:
  40a4fa:	4403      	add	r3, r0
  40a4fc:	4407      	add	r7, r0
  40a4fe:	9306      	str	r3, [sp, #24]

0040a500 <.LVL222>:
  40a500:	e766      	b.n	40a3d0 <.LVL184>

0040a502 <.LVL223>:
  40a502:	9905      	ldr	r1, [sp, #20]
  40a504:	4640      	mov	r0, r8
  40a506:	f012 fc69 	bl	41cddc <.LBE18>

0040a50a <.LVL224>:
  40a50a:	2800      	cmp	r0, #0
  40a50c:	f6bf af76 	bge.w	40a3fc <.LVL187+0xa>
  40a510:	9e02      	ldr	r6, [sp, #8]

0040a512 <.LVL225>:
  40a512:	4641      	mov	r1, r8
  40a514:	2300      	movs	r3, #0
  40a516:	220a      	movs	r2, #10
  40a518:	4620      	mov	r0, r4
  40a51a:	3e01      	subs	r6, #1
  40a51c:	9602      	str	r6, [sp, #8]

0040a51e <.LVL226>:
  40a51e:	f010 fb41 	bl	41aba4 <__multadd>

0040a522 <.LVL227>:
  40a522:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a524:	4680      	mov	r8, r0

0040a526 <.LVL228>:
  40a526:	2b00      	cmp	r3, #0
  40a528:	f040 8302 	bne.w	40ab30 <.LVL436>

0040a52c <.LVL229>:
  40a52c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40a52e:	2b00      	cmp	r3, #0
  40a530:	f340 830a 	ble.w	40ab48 <.LVL440>
  40a534:	461e      	mov	r6, r3

0040a536 <.LVL230>:
  40a536:	f8dd a020 	ldr.w	sl, [sp, #32]

0040a53a <.LVL231>:
  40a53a:	f8dd b014 	ldr.w	fp, [sp, #20]
  40a53e:	4657      	mov	r7, sl

0040a540 <.LVL232>:
  40a540:	e002      	b.n	40a548 <.LVL235>

0040a542 <.LVL233>:
  40a542:	f010 fb2f 	bl	41aba4 <__multadd>

0040a546 <.LVL234>:
  40a546:	4680      	mov	r8, r0

0040a548 <.LVL235>:
  40a548:	4659      	mov	r1, fp
  40a54a:	4640      	mov	r0, r8
  40a54c:	f00c f9c6 	bl	4168dc <quorem>

0040a550 <.LVL236>:
  40a550:	f100 0930 	add.w	r9, r0, #48	; 0x30

0040a554 <.LVL237>:
  40a554:	f807 9b01 	strb.w	r9, [r7], #1

0040a558 <.LVL238>:
  40a558:	eba7 030a 	sub.w	r3, r7, sl
  40a55c:	42b3      	cmp	r3, r6
  40a55e:	f04f 020a 	mov.w	r2, #10
  40a562:	f04f 0300 	mov.w	r3, #0
  40a566:	4641      	mov	r1, r8
  40a568:	4620      	mov	r0, r4
  40a56a:	dbea      	blt.n	40a542 <.LVL233>

0040a56c <.LVL239>:
  40a56c:	9b08      	ldr	r3, [sp, #32]
  40a56e:	2e01      	cmp	r6, #1
  40a570:	bfac      	ite	ge
  40a572:	199b      	addge	r3, r3, r6
  40a574:	3301      	addlt	r3, #1
  40a576:	469b      	mov	fp, r3
  40a578:	f04f 0a00 	mov.w	sl, #0

0040a57c <.LVL240>:
  40a57c:	4641      	mov	r1, r8
  40a57e:	2201      	movs	r2, #1
  40a580:	4620      	mov	r0, r4
  40a582:	f00f f849 	bl	419618 <__lshift>

0040a586 <.LVL241>:
  40a586:	9905      	ldr	r1, [sp, #20]
  40a588:	4680      	mov	r8, r0

0040a58a <.LVL242>:
  40a58a:	f012 fc27 	bl	41cddc <.LBE18>

0040a58e <.LVL243>:
  40a58e:	2800      	cmp	r0, #0
  40a590:	f340 81d7 	ble.w	40a942 <.LVL362>
  40a594:	f81b 2c01 	ldrb.w	r2, [fp, #-1]

0040a598 <.L142>:
  40a598:	9908      	ldr	r1, [sp, #32]
  40a59a:	f10b 33ff 	add.w	r3, fp, #4294967295
  40a59e:	e004      	b.n	40a5aa <.LVL246>

0040a5a0 <.LVL245>:
  40a5a0:	428b      	cmp	r3, r1
  40a5a2:	f000 8168 	beq.w	40a876 <.LVL331>
  40a5a6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!

0040a5aa <.LVL246>:
  40a5aa:	2a39      	cmp	r2, #57	; 0x39
  40a5ac:	f103 0b01 	add.w	fp, r3, #1

0040a5b0 <.LVL247>:
  40a5b0:	d0f6      	beq.n	40a5a0 <.LVL245>

0040a5b2 <.LVL248>:
  40a5b2:	3201      	adds	r2, #1
  40a5b4:	701a      	strb	r2, [r3, #0]

0040a5b6 <.L135>:
  40a5b6:	9905      	ldr	r1, [sp, #20]
  40a5b8:	4620      	mov	r0, r4
  40a5ba:	f013 fa21 	bl	41da00 <_Bfree>

0040a5be <.LVL250>:
  40a5be:	2d00      	cmp	r5, #0
  40a5c0:	f43f ae22 	beq.w	40a208 <.L76>
  40a5c4:	f1ba 0f00 	cmp.w	sl, #0
  40a5c8:	d005      	beq.n	40a5d6 <.LVL251>
  40a5ca:	45aa      	cmp	sl, r5
  40a5cc:	d003      	beq.n	40a5d6 <.LVL251>
  40a5ce:	4651      	mov	r1, sl
  40a5d0:	4620      	mov	r0, r4
  40a5d2:	f013 fa15 	bl	41da00 <_Bfree>

0040a5d6 <.LVL251>:
  40a5d6:	4629      	mov	r1, r5
  40a5d8:	4620      	mov	r0, r4
  40a5da:	f013 fa11 	bl	41da00 <_Bfree>

0040a5de <.LVL252>:
  40a5de:	e613      	b.n	40a208 <.L76>

0040a5e0 <.LVL253>:
  40a5e0:	2300      	movs	r3, #0
  40a5e2:	9309      	str	r3, [sp, #36]	; 0x24

0040a5e4 <.LVL254>:
  40a5e4:	9b02      	ldr	r3, [sp, #8]
  40a5e6:	444b      	add	r3, r9
  40a5e8:	1c5e      	adds	r6, r3, #1

0040a5ea <.LVL255>:
  40a5ea:	2e01      	cmp	r6, #1
  40a5ec:	4637      	mov	r7, r6
  40a5ee:	930c      	str	r3, [sp, #48]	; 0x30

0040a5f0 <.LVL256>:
  40a5f0:	bfb8      	it	lt
  40a5f2:	2701      	movlt	r7, #1
  40a5f4:	960e      	str	r6, [sp, #56]	; 0x38

0040a5f6 <.LVL257>:
  40a5f6:	2100      	movs	r1, #0
  40a5f8:	2f17      	cmp	r7, #23
  40a5fa:	6461      	str	r1, [r4, #68]	; 0x44
  40a5fc:	d90a      	bls.n	40a614 <.LVL260>
  40a5fe:	2201      	movs	r2, #1
  40a600:	2304      	movs	r3, #4

0040a602 <.LVL258>:
  40a602:	005b      	lsls	r3, r3, #1
  40a604:	f103 0014 	add.w	r0, r3, #20
  40a608:	4287      	cmp	r7, r0
  40a60a:	4611      	mov	r1, r2
  40a60c:	f102 0201 	add.w	r2, r2, #1
  40a610:	d2f7      	bcs.n	40a602 <.LVL258>
  40a612:	6461      	str	r1, [r4, #68]	; 0x44

0040a614 <.LVL260>:
  40a614:	4620      	mov	r0, r4
  40a616:	f011 ff21 	bl	41c45c <.LFE2>

0040a61a <.LVL261>:
  40a61a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40a61c:	9008      	str	r0, [sp, #32]
  40a61e:	2b0e      	cmp	r3, #14
  40a620:	6420      	str	r0, [r4, #64]	; 0x40

0040a622 <.LVL262>:
  40a622:	f63f ad88 	bhi.w	40a136 <.LVL104>

0040a626 <.LVL263>:
  40a626:	2d00      	cmp	r5, #0
  40a628:	f43f ad85 	beq.w	40a136 <.LVL104>

0040a62c <.LVL264>:
  40a62c:	9802      	ldr	r0, [sp, #8]
  40a62e:	2800      	cmp	r0, #0
  40a630:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38

0040a634 <.LVL265>:
  40a634:	f340 819a 	ble.w	40a96c <.LVL368>
  40a638:	4ac8      	ldr	r2, [pc, #800]	; (40a95c <.LVL365+0x4>)
  40a63a:	f000 030f 	and.w	r3, r0, #15
  40a63e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  40a642:	1103      	asrs	r3, r0, #4
  40a644:	06df      	lsls	r7, r3, #27
  40a646:	ed92 7b00 	vldr	d7, [r2]

0040a64a <.LVL266>:
  40a64a:	f140 814d 	bpl.w	40a8e8 <.LVL348>
  40a64e:	4ac4      	ldr	r2, [pc, #784]	; (40a960 <.LVL365+0x8>)
  40a650:	ed92 6b08 	vldr	d6, [r2, #32]
  40a654:	ec4b ab14 	vmov	d4, sl, fp

0040a658 <.LVL267>:
  40a658:	f003 030f 	and.w	r3, r3, #15
  40a65c:	2103      	movs	r1, #3
  40a65e:	ee84 5b06 	vdiv.f64	d5, d4, d6

0040a662 <.LVL269>:
  40a662:	b15b      	cbz	r3, 40a67c <.LVL273+0x6>
  40a664:	4abe      	ldr	r2, [pc, #760]	; (40a960 <.LVL365+0x8>)

0040a666 <.LVL270>:
  40a666:	07dd      	lsls	r5, r3, #31
  40a668:	d504      	bpl.n	40a674 <.LVL272>
  40a66a:	ed92 6b00 	vldr	d6, [r2]
  40a66e:	3101      	adds	r1, #1
  40a670:	ee27 7b06 	vmul.f64	d7, d7, d6

0040a674 <.LVL272>:
  40a674:	105b      	asrs	r3, r3, #1

0040a676 <.LVL273>:
  40a676:	f102 0208 	add.w	r2, r2, #8
  40a67a:	d1f4      	bne.n	40a666 <.LVL270>
  40a67c:	ee85 6b07 	vdiv.f64	d6, d5, d7

0040a680 <.LVL274>:
  40a680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40a682:	b13b      	cbz	r3, 40a694 <.LVL275>
  40a684:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
  40a688:	eeb4 6bc7 	vcmpe.f64	d6, d7
  40a68c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40a690:	f100 8206 	bmi.w	40aaa0 <.LVL416>

0040a694 <.LVL275>:
  40a694:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
  40a698:	ee07 1a90 	vmov	s15, r1
  40a69c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  40a6a0:	eea7 5b06 	vfma.f64	d5, d7, d6
  40a6a4:	ec51 0b15 	vmov	r0, r1, d5
  40a6a8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000

0040a6ac <.LVL276>:
  40a6ac:	2e00      	cmp	r6, #0
  40a6ae:	f000 80f8 	beq.w	40a8a2 <.LVL336>
  40a6b2:	9a02      	ldr	r2, [sp, #8]
  40a6b4:	4635      	mov	r5, r6

0040a6b6 <.LVL277>:
  40a6b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a6b8:	2b00      	cmp	r3, #0
  40a6ba:	f000 81a7 	beq.w	40aa0c <.LVL396>
  40a6be:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
  40a6c2:	4ba6      	ldr	r3, [pc, #664]	; (40a95c <.LVL365+0x4>)
  40a6c4:	9f08      	ldr	r7, [sp, #32]
  40a6c6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40a6ca:	ed13 4b02 	vldr	d4, [r3, #-8]
  40a6ce:	eebd 7bc6 	vcvt.s32.f64	s14, d6
  40a6d2:	ee83 5b04 	vdiv.f64	d5, d3, d4
  40a6d6:	ee17 3a10 	vmov	r3, s14

0040a6da <.LVL278>:
  40a6da:	ec41 0b14 	vmov	d4, r0, r1
  40a6de:	3330      	adds	r3, #48	; 0x30
  40a6e0:	b2db      	uxtb	r3, r3
  40a6e2:	ee35 5b44 	vsub.f64	d5, d5, d4

0040a6e6 <.LVL279>:
  40a6e6:	eeb8 7bc7 	vcvt.f64.s32	d7, s14

0040a6ea <.LVL280>:
  40a6ea:	ee36 7b47 	vsub.f64	d7, d6, d7
  40a6ee:	eeb4 5bc7 	vcmpe.f64	d5, d7
  40a6f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40a6f6:	703b      	strb	r3, [r7, #0]
  40a6f8:	f107 0b01 	add.w	fp, r7, #1

0040a6fc <.LVL281>:
  40a6fc:	dc31      	bgt.n	40a762 <.LVL288+0xe>
  40a6fe:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
  40a702:	ee33 6b47 	vsub.f64	d6, d3, d7

0040a706 <.LVL282>:
  40a706:	eeb4 5bc6 	vcmpe.f64	d5, d6
  40a70a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40a70e:	f300 81fa 	bgt.w	40ab06 <.LVL428>

0040a712 <.LVL283>:
  40a712:	2d01      	cmp	r5, #1
  40a714:	f000 8126 	beq.w	40a964 <.LDL1>
  40a718:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
  40a71c:	9b08      	ldr	r3, [sp, #32]
  40a71e:	1959      	adds	r1, r3, r5
  40a720:	e00a      	b.n	40a738 <.LVL285>

0040a722 <.LVL284>:
  40a722:	ee33 6b47 	vsub.f64	d6, d3, d7
  40a726:	eeb4 6bc5 	vcmpe.f64	d6, d5
  40a72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40a72e:	f100 81ea 	bmi.w	40ab06 <.LVL428>
  40a732:	458b      	cmp	fp, r1
  40a734:	f000 8116 	beq.w	40a964 <.LDL1>

0040a738 <.LVL285>:
  40a738:	ee27 7b04 	vmul.f64	d7, d7, d4
  40a73c:	ee25 5b04 	vmul.f64	d5, d5, d4
  40a740:	eebd 6bc7 	vcvt.s32.f64	s12, d7

0040a744 <.LVL286>:
  40a744:	ee16 3a10 	vmov	r3, s12
  40a748:	3330      	adds	r3, #48	; 0x30
  40a74a:	b2db      	uxtb	r3, r3
  40a74c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12

0040a750 <.LVL287>:
  40a750:	ee37 7b46 	vsub.f64	d7, d7, d6

0040a754 <.LVL288>:
  40a754:	eeb4 7bc5 	vcmpe.f64	d7, d5
  40a758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40a75c:	f80b 3b01 	strb.w	r3, [fp], #1
  40a760:	d5df      	bpl.n	40a722 <.LVL284>
  40a762:	9202      	str	r2, [sp, #8]

0040a764 <.LVL289>:
  40a764:	e550      	b.n	40a208 <.L76>

0040a766 <.LVL290>:
  40a766:	2300      	movs	r3, #0
  40a768:	9309      	str	r3, [sp, #36]	; 0x24

0040a76a <.LVL291>:
  40a76a:	f1b9 0f00 	cmp.w	r9, #0
  40a76e:	f340 80bf 	ble.w	40a8f0 <.LVL349>
  40a772:	464f      	mov	r7, r9
  40a774:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  40a778:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  40a77c:	464e      	mov	r6, r9
  40a77e:	e73a      	b.n	40a5f6 <.LVL257>

0040a780 <.LVL292>:
  40a780:	2301      	movs	r3, #1
  40a782:	9309      	str	r3, [sp, #36]	; 0x24
  40a784:	e7f1      	b.n	40a76a <.LVL291>

0040a786 <.LVL293>:
  40a786:	f1ba 0f00 	cmp.w	sl, #0
  40a78a:	f47f aded 	bne.w	40a368 <.LVL168+0x6>

0040a78e <.LVL294>:
  40a78e:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40a792:	2b00      	cmp	r3, #0
  40a794:	f47f ae02 	bne.w	40a39c <.LVL174+0x8>
  40a798:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
  40a79c:	0d1b      	lsrs	r3, r3, #20
  40a79e:	051b      	lsls	r3, r3, #20
  40a7a0:	2b00      	cmp	r3, #0
  40a7a2:	f000 81b3 	beq.w	40ab0c <.LVL430>
  40a7a6:	9b07      	ldr	r3, [sp, #28]
  40a7a8:	3301      	adds	r3, #1
  40a7aa:	9307      	str	r3, [sp, #28]

0040a7ac <.LVL295>:
  40a7ac:	9b06      	ldr	r3, [sp, #24]

0040a7ae <.LVL296>:
  40a7ae:	3301      	adds	r3, #1
  40a7b0:	9306      	str	r3, [sp, #24]

0040a7b2 <.LVL297>:
  40a7b2:	2301      	movs	r3, #1

0040a7b4 <.LVL298>:
  40a7b4:	930d      	str	r3, [sp, #52]	; 0x34

0040a7b6 <.LVL299>:
  40a7b6:	e5f3      	b.n	40a3a0 <.LVL175>

0040a7b8 <.LVL300>:
  40a7b8:	2e00      	cmp	r6, #0
  40a7ba:	f73f accb 	bgt.w	40a154 <.LVL106>

0040a7be <.LVL301>:
  40a7be:	f040 8083 	bne.w	40a8c8 <.LVL338>
  40a7c2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
  40a7c6:	ee24 4b07 	vmul.f64	d4, d4, d7

0040a7ca <.LVL302>:
  40a7ca:	ec4b ab17 	vmov	d7, sl, fp
  40a7ce:	eeb4 4bc7 	vcmpe.f64	d4, d7
  40a7d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40a7d6:	4635      	mov	r5, r6
  40a7d8:	9605      	str	r6, [sp, #20]

0040a7da <.LVL303>:
  40a7da:	db43      	blt.n	40a864 <.L73>

0040a7dc <.L74>:
  40a7dc:	ea6f 0309 	mvn.w	r3, r9
  40a7e0:	f8dd b020 	ldr.w	fp, [sp, #32]
  40a7e4:	9302      	str	r3, [sp, #8]

0040a7e6 <.LVL305>:
  40a7e6:	9905      	ldr	r1, [sp, #20]
  40a7e8:	4620      	mov	r0, r4

0040a7ea <.LVL306>:
  40a7ea:	f013 f909 	bl	41da00 <_Bfree>

0040a7ee <.LVL307>:
  40a7ee:	2d00      	cmp	r5, #0
  40a7f0:	f43f ad0a 	beq.w	40a208 <.L76>
  40a7f4:	e6ef      	b.n	40a5d6 <.LVL251>

0040a7f6 <.LVL308>:
  40a7f6:	9a05      	ldr	r2, [sp, #20]
  40a7f8:	4641      	mov	r1, r8
  40a7fa:	4620      	mov	r0, r4

0040a7fc <.LVL309>:
  40a7fc:	f00f f8f8 	bl	4199f0 <__pow5mult>

0040a800 <.LVL310>:
  40a800:	4680      	mov	r8, r0

0040a802 <.LVL311>:
  40a802:	e59f      	b.n	40a344 <.LVL162>

0040a804 <.LVL312>:
  40a804:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40a806:	2a00      	cmp	r2, #0
  40a808:	f000 813e 	beq.w	40aa88 <.LVL413>
  40a80c:	9a05      	ldr	r2, [sp, #20]
  40a80e:	920d      	str	r2, [sp, #52]	; 0x34

0040a810 <.LVL313>:
  40a810:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40a814:	9f07      	ldr	r7, [sp, #28]
  40a816:	e51f      	b.n	40a258 <.LVL127>

0040a818 <.LVL314>:
  40a818:	f1ba 0f00 	cmp.w	sl, #0
  40a81c:	f47f adbe 	bne.w	40a39c <.LVL174+0x8>
  40a820:	e7b5      	b.n	40a78e <.LVL294>

0040a822 <.LVL315>:
  40a822:	f010 f9bf 	bl	41aba4 <__multadd>

0040a826 <.LVL316>:
  40a826:	464e      	mov	r6, r9
  40a828:	4605      	mov	r5, r0

0040a82a <.LVL317>:
  40a82a:	4607      	mov	r7, r0
  40a82c:	e602      	b.n	40a434 <.LVL194>

0040a82e <.LVL318>:
  40a82e:	4601      	mov	r1, r0
  40a830:	4620      	mov	r0, r4

0040a832 <.LVL319>:
  40a832:	9206      	str	r2, [sp, #24]

0040a834 <.LVL320>:
  40a834:	f013 f8e4 	bl	41da00 <_Bfree>

0040a838 <.LVL321>:
  40a838:	2301      	movs	r3, #1
  40a83a:	9a06      	ldr	r2, [sp, #24]
  40a83c:	e626      	b.n	40a48c <.LVL205>

0040a83e <.LVL322>:
  40a83e:	9b01      	ldr	r3, [sp, #4]
  40a840:	2b02      	cmp	r3, #2
  40a842:	f77f adde 	ble.w	40a402 <.LVL187+0x10>

0040a846 <.LVL323>:
  40a846:	2e00      	cmp	r6, #0
  40a848:	d1c8      	bne.n	40a7dc <.L74>
  40a84a:	4633      	mov	r3, r6
  40a84c:	9905      	ldr	r1, [sp, #20]
  40a84e:	2205      	movs	r2, #5
  40a850:	4620      	mov	r0, r4
  40a852:	f010 f9a7 	bl	41aba4 <__multadd>

0040a856 <.LVL324>:
  40a856:	4601      	mov	r1, r0
  40a858:	9005      	str	r0, [sp, #20]

0040a85a <.LVL325>:
  40a85a:	4640      	mov	r0, r8

0040a85c <.LVL326>:
  40a85c:	f012 fabe 	bl	41cddc <.LBE18>

0040a860 <.LVL327>:
  40a860:	2800      	cmp	r0, #0
  40a862:	ddbb      	ble.n	40a7dc <.L74>

0040a864 <.L73>:
  40a864:	9a02      	ldr	r2, [sp, #8]
  40a866:	9908      	ldr	r1, [sp, #32]
  40a868:	2331      	movs	r3, #49	; 0x31
  40a86a:	3201      	adds	r2, #1
  40a86c:	9202      	str	r2, [sp, #8]

0040a86e <.LVL329>:
  40a86e:	700b      	strb	r3, [r1, #0]
  40a870:	f101 0b01 	add.w	fp, r1, #1

0040a874 <.LVL330>:
  40a874:	e7b7      	b.n	40a7e6 <.LVL305>

0040a876 <.LVL331>:
  40a876:	9a02      	ldr	r2, [sp, #8]
  40a878:	3201      	adds	r2, #1
  40a87a:	9202      	str	r2, [sp, #8]

0040a87c <.LVL332>:
  40a87c:	9a08      	ldr	r2, [sp, #32]

0040a87e <.LVL333>:
  40a87e:	2331      	movs	r3, #49	; 0x31
  40a880:	7013      	strb	r3, [r2, #0]
  40a882:	e698      	b.n	40a5b6 <.L135>

0040a884 <.LVL334>:
  40a884:	2301      	movs	r3, #1
  40a886:	9309      	str	r3, [sp, #36]	; 0x24
  40a888:	e6ac      	b.n	40a5e4 <.LVL254>

0040a88a <.LVL335>:
  40a88a:	ee07 1a90 	vmov	s15, r1
  40a88e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
  40a892:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  40a896:	eea6 5b07 	vfma.f64	d5, d6, d7
  40a89a:	ec51 0b15 	vmov	r0, r1, d5
  40a89e:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000

0040a8a2 <.LVL336>:
  40a8a2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
  40a8a6:	ee36 7b47 	vsub.f64	d7, d6, d7

0040a8aa <.LVL337>:
  40a8aa:	ec41 0b16 	vmov	d6, r0, r1
  40a8ae:	eeb4 7bc6 	vcmpe.f64	d7, d6
  40a8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40a8b6:	f300 80a5 	bgt.w	40aa04 <.LVL394>
  40a8ba:	eeb1 6b46 	vneg.f64	d6, d6
  40a8be:	eeb4 7bc6 	vcmpe.f64	d7, d6
  40a8c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40a8c6:	d54d      	bpl.n	40a964 <.LDL1>

0040a8c8 <.LVL338>:
  40a8c8:	2300      	movs	r3, #0
  40a8ca:	9305      	str	r3, [sp, #20]

0040a8cc <.LVL339>:
  40a8cc:	461d      	mov	r5, r3
  40a8ce:	e785      	b.n	40a7dc <.L74>

0040a8d0 <.LVL340>:
  40a8d0:	9808      	ldr	r0, [sp, #32]
  40a8d2:	f7ff bb6f 	b.w	409fb4 <.LVL57>

0040a8d6 <.LVL341>:
  40a8d6:	9b05      	ldr	r3, [sp, #20]
  40a8d8:	990a      	ldr	r1, [sp, #40]	; 0x28

0040a8da <.LVL342>:
  40a8da:	9205      	str	r2, [sp, #20]

0040a8dc <.LVL343>:
  40a8dc:	1ad3      	subs	r3, r2, r3

0040a8de <.LVL344>:
  40a8de:	4419      	add	r1, r3
  40a8e0:	2300      	movs	r3, #0

0040a8e2 <.LVL345>:
  40a8e2:	910a      	str	r1, [sp, #40]	; 0x28

0040a8e4 <.LVL346>:
  40a8e4:	930d      	str	r3, [sp, #52]	; 0x34

0040a8e6 <.LVL347>:
  40a8e6:	e4b2      	b.n	40a24e <.LVL126>

0040a8e8 <.LVL348>:
  40a8e8:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
  40a8ec:	2102      	movs	r1, #2
  40a8ee:	e6b8      	b.n	40a662 <.LVL269>

0040a8f0 <.LVL349>:
  40a8f0:	2100      	movs	r1, #0
  40a8f2:	6461      	str	r1, [r4, #68]	; 0x44
  40a8f4:	4620      	mov	r0, r4
  40a8f6:	f011 fdb1 	bl	41c45c <.LFE2>

0040a8fa <.LVL350>:
  40a8fa:	f04f 0901 	mov.w	r9, #1
  40a8fe:	9008      	str	r0, [sp, #32]
  40a900:	6420      	str	r0, [r4, #64]	; 0x40

0040a902 <.LVL351>:
  40a902:	464e      	mov	r6, r9
  40a904:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  40a908:	e68d      	b.n	40a626 <.LVL263>

0040a90a <.LVL352>:
  40a90a:	2b00      	cmp	r3, #0
  40a90c:	4691      	mov	r9, r2

0040a90e <.LVL353>:
  40a90e:	dd11      	ble.n	40a934 <.LVL359>
  40a910:	4641      	mov	r1, r8
  40a912:	2201      	movs	r2, #1
  40a914:	4620      	mov	r0, r4
  40a916:	f00e fe7f 	bl	419618 <__lshift>

0040a91a <.LVL354>:
  40a91a:	9905      	ldr	r1, [sp, #20]
  40a91c:	4680      	mov	r8, r0

0040a91e <.LVL355>:
  40a91e:	f012 fa5d 	bl	41cddc <.LBE18>

0040a922 <.LVL356>:
  40a922:	2800      	cmp	r0, #0
  40a924:	f340 80fd 	ble.w	40ab22 <.LVL435>

0040a928 <.LVL357>:
  40a928:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  40a92c:	f000 80d4 	beq.w	40aad8 <.L133>

0040a930 <.LVL358>:
  40a930:	f10a 0931 	add.w	r9, sl, #49	; 0x31

0040a934 <.LVL359>:
  40a934:	46aa      	mov	sl, r5
  40a936:	f886 9000 	strb.w	r9, [r6]
  40a93a:	f106 0b01 	add.w	fp, r6, #1

0040a93e <.LVL360>:
  40a93e:	463d      	mov	r5, r7

0040a940 <.LVL361>:
  40a940:	e639      	b.n	40a5b6 <.L135>

0040a942 <.LVL362>:
  40a942:	d104      	bne.n	40a94e <.LVL364>
  40a944:	f019 0f01 	tst.w	r9, #1
  40a948:	d001      	beq.n	40a94e <.LVL364>
  40a94a:	e623      	b.n	40a594 <.LVL243+0x6>

0040a94c <.LVL363>:
  40a94c:	4693      	mov	fp, r2

0040a94e <.LVL364>:
  40a94e:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
  40a952:	2b30      	cmp	r3, #48	; 0x30
  40a954:	f10b 32ff 	add.w	r2, fp, #4294967295

0040a958 <.LVL365>:
  40a958:	d0f8      	beq.n	40a94c <.LVL363>
  40a95a:	e62c      	b.n	40a5b6 <.L135>
  40a95c:	00418878 	.word	0x00418878
  40a960:	0041d378 	.word	0x0041d378

0040a964 <.LDL1>:
  40a964:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38

0040a968 <.LVL367>:
  40a968:	f7ff bbe5 	b.w	40a136 <.LVL104>

0040a96c <.LVL368>:
  40a96c:	f000 8094 	beq.w	40aa98 <.LVL415>
  40a970:	9b02      	ldr	r3, [sp, #8]
  40a972:	4a88      	ldr	r2, [pc, #544]	; (40ab94 <.LVL451+0x4>)
  40a974:	425b      	negs	r3, r3

0040a976 <.LVL369>:
  40a976:	f003 010f 	and.w	r1, r3, #15
  40a97a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
  40a97e:	ed92 6b00 	vldr	d6, [r2]
  40a982:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
  40a986:	111b      	asrs	r3, r3, #4

0040a988 <.LVL370>:
  40a988:	ee27 6b06 	vmul.f64	d6, d7, d6
  40a98c:	f000 80e1 	beq.w	40ab52 <.LVL442>
  40a990:	4a81      	ldr	r2, [pc, #516]	; (40ab98 <.LVL451+0x8>)
  40a992:	2102      	movs	r1, #2

0040a994 <.LVL371>:
  40a994:	07d8      	lsls	r0, r3, #31
  40a996:	d504      	bpl.n	40a9a2 <.LVL373>
  40a998:	ed92 7b00 	vldr	d7, [r2]
  40a99c:	3101      	adds	r1, #1
  40a99e:	ee26 6b07 	vmul.f64	d6, d6, d7

0040a9a2 <.LVL373>:
  40a9a2:	105b      	asrs	r3, r3, #1

0040a9a4 <.LVL374>:
  40a9a4:	f102 0208 	add.w	r2, r2, #8
  40a9a8:	d1f4      	bne.n	40a994 <.LVL371>
  40a9aa:	e669      	b.n	40a680 <.LVL274>

0040a9ac <.LVL375>:
  40a9ac:	9908      	ldr	r1, [sp, #32]
  40a9ae:	2330      	movs	r3, #48	; 0x30
  40a9b0:	700b      	strb	r3, [r1, #0]
  40a9b2:	9b02      	ldr	r3, [sp, #8]
  40a9b4:	3301      	adds	r3, #1
  40a9b6:	9302      	str	r3, [sp, #8]

0040a9b8 <.LVL376>:
  40a9b8:	f81b 3c01 	ldrb.w	r3, [fp, #-1]

0040a9bc <.LVL377>:
  40a9bc:	e422      	b.n	40a204 <.LVL120>

0040a9be <.LVL378>:
  40a9be:	6869      	ldr	r1, [r5, #4]
  40a9c0:	4620      	mov	r0, r4
  40a9c2:	f011 fd4b 	bl	41c45c <.LFE2>

0040a9c6 <.LVL379>:
  40a9c6:	692b      	ldr	r3, [r5, #16]
  40a9c8:	3302      	adds	r3, #2
  40a9ca:	4607      	mov	r7, r0

0040a9cc <.LVL380>:
  40a9cc:	009a      	lsls	r2, r3, #2
  40a9ce:	f105 010c 	add.w	r1, r5, #12
  40a9d2:	300c      	adds	r0, #12

0040a9d4 <.LVL381>:
  40a9d4:	f00b fd22 	bl	41641c <memcpy>

0040a9d8 <.LVL382>:
  40a9d8:	4639      	mov	r1, r7
  40a9da:	2201      	movs	r2, #1
  40a9dc:	4620      	mov	r0, r4
  40a9de:	f00e fe1b 	bl	419618 <__lshift>

0040a9e2 <.LVL383>:
  40a9e2:	4607      	mov	r7, r0

0040a9e4 <.LVL384>:
  40a9e4:	e51e      	b.n	40a424 <.LVL192>

0040a9e6 <.LVL385>:
  40a9e6:	2a39      	cmp	r2, #57	; 0x39
  40a9e8:	d076      	beq.n	40aad8 <.L133>
  40a9ea:	f102 0901 	add.w	r9, r2, #1

0040a9ee <.LVL386>:
  40a9ee:	46aa      	mov	sl, r5

0040a9f0 <.LVL387>:
  40a9f0:	f886 9000 	strb.w	r9, [r6]
  40a9f4:	f106 0b01 	add.w	fp, r6, #1

0040a9f8 <.LVL388>:
  40a9f8:	463d      	mov	r5, r7

0040a9fa <.LVL389>:
  40a9fa:	e5dc      	b.n	40a5b6 <.L135>

0040a9fc <.LVL390>:
  40a9fc:	46aa      	mov	sl, r5

0040a9fe <.LVL391>:
  40a9fe:	4691      	mov	r9, r2

0040aa00 <.LVL392>:
  40aa00:	463d      	mov	r5, r7

0040aa02 <.LVL393>:
  40aa02:	e5bb      	b.n	40a57c <.LVL240>

0040aa04 <.LVL394>:
  40aa04:	2300      	movs	r3, #0
  40aa06:	9305      	str	r3, [sp, #20]

0040aa08 <.LVL395>:
  40aa08:	461d      	mov	r5, r3
  40aa0a:	e72b      	b.n	40a864 <.L73>

0040aa0c <.LVL396>:
  40aa0c:	4b61      	ldr	r3, [pc, #388]	; (40ab94 <.LVL451+0x4>)
  40aa0e:	eebd 7bc6 	vcvt.s32.f64	s14, d6
  40aa12:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40aa16:	ed13 4b02 	vldr	d4, [r3, #-8]
  40aa1a:	ee17 3a10 	vmov	r3, s14

0040aa1e <.LVL397>:
  40aa1e:	ec41 0b15 	vmov	d5, r0, r1
  40aa22:	9808      	ldr	r0, [sp, #32]

0040aa24 <.LVL398>:
  40aa24:	ee24 4b05 	vmul.f64	d4, d4, d5

0040aa28 <.LVL399>:
  40aa28:	3330      	adds	r3, #48	; 0x30

0040aa2a <.LVL400>:
  40aa2a:	2d01      	cmp	r5, #1
  40aa2c:	eeb8 7bc7 	vcvt.f64.s32	d7, s14

0040aa30 <.LVL401>:
  40aa30:	7003      	strb	r3, [r0, #0]
  40aa32:	f100 0b01 	add.w	fp, r0, #1

0040aa36 <.LVL402>:
  40aa36:	ee36 7b47 	vsub.f64	d7, d6, d7
  40aa3a:	d012      	beq.n	40aa62 <.LVL409>
  40aa3c:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
  40aa40:	9b08      	ldr	r3, [sp, #32]

0040aa42 <.LVL403>:
  40aa42:	1959      	adds	r1, r3, r5

0040aa44 <.LVL404>:
  40aa44:	ee27 7b05 	vmul.f64	d7, d7, d5
  40aa48:	eebd 6bc7 	vcvt.s32.f64	s12, d7

0040aa4c <.LVL405>:
  40aa4c:	ee16 3a10 	vmov	r3, s12
  40aa50:	3330      	adds	r3, #48	; 0x30
  40aa52:	f80b 3b01 	strb.w	r3, [fp], #1

0040aa56 <.LVL406>:
  40aa56:	458b      	cmp	fp, r1
  40aa58:	eeb8 6bc6 	vcvt.f64.s32	d6, s12

0040aa5c <.LVL407>:
  40aa5c:	ee37 7b46 	vsub.f64	d7, d7, d6

0040aa60 <.LVL408>:
  40aa60:	d1f0      	bne.n	40aa44 <.LVL404>

0040aa62 <.LVL409>:
  40aa62:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
  40aa66:	ee34 5b06 	vadd.f64	d5, d4, d6
  40aa6a:	eeb4 5bc7 	vcmpe.f64	d5, d7
  40aa6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40aa72:	d538      	bpl.n	40aae6 <.LVL424>
  40aa74:	9202      	str	r2, [sp, #8]

0040aa76 <.LVL410>:
  40aa76:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
  40aa7a:	f7ff bbb6 	b.w	40a1ea <.L77>

0040aa7e <.LVL411>:
  40aa7e:	9b07      	ldr	r3, [sp, #28]
  40aa80:	1b9f      	subs	r7, r3, r6

0040aa82 <.LVL412>:
  40aa82:	2300      	movs	r3, #0
  40aa84:	f7ff bbe8 	b.w	40a258 <.LVL127>

0040aa88 <.LVL413>:
  40aa88:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40aa8a:	9a05      	ldr	r2, [sp, #20]
  40aa8c:	920d      	str	r2, [sp, #52]	; 0x34

0040aa8e <.LVL414>:
  40aa8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40aa92:	9f07      	ldr	r7, [sp, #28]
  40aa94:	f7ff bbe0 	b.w	40a258 <.LVL127>

0040aa98 <.LVL415>:
  40aa98:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
  40aa9c:	2102      	movs	r1, #2
  40aa9e:	e5ef      	b.n	40a680 <.LVL274>

0040aaa0 <.LVL416>:
  40aaa0:	2e00      	cmp	r6, #0
  40aaa2:	f43f aef2 	beq.w	40a88a <.LVL335>
  40aaa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40aaa8:	2b00      	cmp	r3, #0
  40aaaa:	f77f af5b 	ble.w	40a964 <.LDL1>

0040aaae <.LVL417>:
  40aaae:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
  40aab2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
  40aab6:	3101      	adds	r1, #1

0040aab8 <.LVL418>:
  40aab8:	ee07 1a90 	vmov	s15, r1
  40aabc:	ee26 6b04 	vmul.f64	d6, d6, d4
  40aac0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  40aac4:	9a02      	ldr	r2, [sp, #8]
  40aac6:	eea6 5b07 	vfma.f64	d5, d6, d7
  40aaca:	ec51 0b15 	vmov	r0, r1, d5
  40aace:	3a01      	subs	r2, #1

0040aad0 <.LVL419>:
  40aad0:	461d      	mov	r5, r3
  40aad2:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000

0040aad6 <.LVL420>:
  40aad6:	e5ee      	b.n	40a6b6 <.LVL277>

0040aad8 <.L133>:
  40aad8:	2239      	movs	r2, #57	; 0x39
  40aada:	46aa      	mov	sl, r5
  40aadc:	7032      	strb	r2, [r6, #0]
  40aade:	463d      	mov	r5, r7

0040aae0 <.LVL422>:
  40aae0:	f106 0b01 	add.w	fp, r6, #1

0040aae4 <.LVL423>:
  40aae4:	e558      	b.n	40a598 <.L142>

0040aae6 <.LVL424>:
  40aae6:	ee36 6b44 	vsub.f64	d6, d6, d4
  40aaea:	eeb4 6bc7 	vcmpe.f64	d6, d7
  40aaee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40aaf2:	dc01      	bgt.n	40aaf8 <.LVL426>
  40aaf4:	e736      	b.n	40a964 <.LDL1>

0040aaf6 <.LVL425>:
  40aaf6:	468b      	mov	fp, r1

0040aaf8 <.LVL426>:
  40aaf8:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
  40aafc:	2b30      	cmp	r3, #48	; 0x30
  40aafe:	f10b 31ff 	add.w	r1, fp, #4294967295

0040ab02 <.LVL427>:
  40ab02:	d0f8      	beq.n	40aaf6 <.LVL425>
  40ab04:	e62d      	b.n	40a762 <.LVL288+0xe>

0040ab06 <.LVL428>:
  40ab06:	9202      	str	r2, [sp, #8]

0040ab08 <.LVL429>:
  40ab08:	f7ff bb6f 	b.w	40a1ea <.L77>

0040ab0c <.LVL430>:
  40ab0c:	930d      	str	r3, [sp, #52]	; 0x34

0040ab0e <.LVL431>:
  40ab0e:	e447      	b.n	40a3a0 <.LVL175>

0040ab10 <.LVL432>:
  40ab10:	2a39      	cmp	r2, #57	; 0x39
  40ab12:	46cb      	mov	fp, r9

0040ab14 <.LVL433>:
  40ab14:	4691      	mov	r9, r2

0040ab16 <.LVL434>:
  40ab16:	d0df      	beq.n	40aad8 <.L133>
  40ab18:	f1bb 0f00 	cmp.w	fp, #0
  40ab1c:	f73f af08 	bgt.w	40a930 <.LVL358>
  40ab20:	e708      	b.n	40a934 <.LVL359>

0040ab22 <.LVL435>:
  40ab22:	f47f af07 	bne.w	40a934 <.LVL359>
  40ab26:	f019 0f01 	tst.w	r9, #1
  40ab2a:	f43f af03 	beq.w	40a934 <.LVL359>
  40ab2e:	e6fb      	b.n	40a928 <.LVL357>

0040ab30 <.LVL436>:
  40ab30:	4629      	mov	r1, r5
  40ab32:	2300      	movs	r3, #0
  40ab34:	220a      	movs	r2, #10
  40ab36:	4620      	mov	r0, r4

0040ab38 <.LVL437>:
  40ab38:	f010 f834 	bl	41aba4 <__multadd>

0040ab3c <.LVL438>:
  40ab3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40ab3e:	2b00      	cmp	r3, #0
  40ab40:	4605      	mov	r5, r0

0040ab42 <.LVL439>:
  40ab42:	dd08      	ble.n	40ab56 <.LVL443>
  40ab44:	461e      	mov	r6, r3
  40ab46:	e460      	b.n	40a40a <.LVL189>

0040ab48 <.LVL440>:
  40ab48:	9b01      	ldr	r3, [sp, #4]

0040ab4a <.LVL441>:
  40ab4a:	2b02      	cmp	r3, #2
  40ab4c:	dc20      	bgt.n	40ab90 <.LVL451>
  40ab4e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  40ab50:	e4f1      	b.n	40a536 <.LVL230>

0040ab52 <.LVL442>:
  40ab52:	2102      	movs	r1, #2
  40ab54:	e594      	b.n	40a680 <.LVL274>

0040ab56 <.LVL443>:
  40ab56:	9b01      	ldr	r3, [sp, #4]

0040ab58 <.LVL444>:
  40ab58:	2b02      	cmp	r3, #2
  40ab5a:	dc19      	bgt.n	40ab90 <.LVL451>
  40ab5c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  40ab5e:	e454      	b.n	40a40a <.LVL189>

0040ab60 <.LVL445>:
  40ab60:	2501      	movs	r5, #1
  40ab62:	f7ff bab0 	b.w	40a0c6 <.LVL91>

0040ab66 <.LVL446>:
  40ab66:	f43f ac33 	beq.w	40a3d0 <.LVL184>
  40ab6a:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  40ab6e:	e4c0      	b.n	40a4f2 <.LVL218>

0040ab70 <.LVL447>:
  40ab70:	2500      	movs	r5, #0

0040ab72 <.LVL448>:
  40ab72:	6465      	str	r5, [r4, #68]	; 0x44
  40ab74:	4629      	mov	r1, r5
  40ab76:	4620      	mov	r0, r4
  40ab78:	f011 fc70 	bl	41c45c <.LFE2>

0040ab7c <.LVL449>:
  40ab7c:	f04f 36ff 	mov.w	r6, #4294967295
  40ab80:	2301      	movs	r3, #1
  40ab82:	9008      	str	r0, [sp, #32]
  40ab84:	46a9      	mov	r9, r5
  40ab86:	6420      	str	r0, [r4, #64]	; 0x40

0040ab88 <.LVL450>:
  40ab88:	960c      	str	r6, [sp, #48]	; 0x30
  40ab8a:	9309      	str	r3, [sp, #36]	; 0x24
  40ab8c:	f7ff bad3 	b.w	40a136 <.LVL104>

0040ab90 <.LVL451>:
  40ab90:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  40ab92:	e658      	b.n	40a846 <.LVL323>
  40ab94:	00418878 	.word	0x00418878
  40ab98:	0041d378 	.word	0x0041d378

Disassembly of section .rodata%43:

0040ab9c <.LANCHOR0>:
  40ab9c:	00636261 	.word	0x00636261

0040aba0 <.LC25>:
  40aba0:	98500190 	.word	0x98500190
  40aba4:	b04fd23c 	.word	0xb04fd23c
  40aba8:	7d3f96d6 	.word	0x7d3f96d6
  40abac:	727fe128 	.word	0x727fe128
  40abb0:	00000000 	.word	0x00000000

0040abb4 <.LC26>:
  40abb4:	7373656d 	.word	0x7373656d
  40abb8:	20656761 	.word	0x20656761
  40abbc:	65676964 	.word	0x65676964
  40abc0:	00007473 	.word	0x00007473

0040abc4 <.LC27>:
  40abc4:	7d696bf9 	.word	0x7d696bf9
  40abc8:	8d93b77c 	.word	0x8d93b77c
  40abcc:	312f5a52 	.word	0x312f5a52
  40abd0:	d061f1aa 	.word	0xd061f1aa
  40abd4:	00000000 	.word	0x00000000

0040abd8 <.LC28>:
  40abd8:	64636261 	.word	0x64636261
  40abdc:	68676665 	.word	0x68676665
  40abe0:	6c6b6a69 	.word	0x6c6b6a69
  40abe4:	706f6e6d 	.word	0x706f6e6d
  40abe8:	74737271 	.word	0x74737271
  40abec:	78777675 	.word	0x78777675
  40abf0:	00007a79 	.word	0x00007a79

0040abf4 <.LC29>:
  40abf4:	d7d3fcc3 	.word	0xd7d3fcc3
  40abf8:	00e49261 	.word	0x00e49261
  40abfc:	6c49fb7d 	.word	0x6c49fb7d
  40ac00:	3be167ca 	.word	0x3be167ca
  40ac04:	00000000 	.word	0x00000000

0040ac08 <.LC30>:
  40ac08:	44434241 	.word	0x44434241
  40ac0c:	48474645 	.word	0x48474645
  40ac10:	4c4b4a49 	.word	0x4c4b4a49
  40ac14:	504f4e4d 	.word	0x504f4e4d
  40ac18:	54535251 	.word	0x54535251
  40ac1c:	58575655 	.word	0x58575655
  40ac20:	62615a59 	.word	0x62615a59
  40ac24:	66656463 	.word	0x66656463
  40ac28:	6a696867 	.word	0x6a696867
  40ac2c:	6e6d6c6b 	.word	0x6e6d6c6b
  40ac30:	7271706f 	.word	0x7271706f
  40ac34:	76757473 	.word	0x76757473
  40ac38:	7a797877 	.word	0x7a797877
  40ac3c:	33323130 	.word	0x33323130
  40ac40:	37363534 	.word	0x37363534
  40ac44:	00003938 	.word	0x00003938

0040ac48 <.LC31>:
  40ac48:	98ab74d1 	.word	0x98ab74d1
  40ac4c:	f5d977d2 	.word	0xf5d977d2
  40ac50:	2c1c61a5 	.word	0x2c1c61a5
  40ac54:	9f9d419f 	.word	0x9f9d419f
  40ac58:	00000000 	.word	0x00000000

0040ac5c <.LC32>:
  40ac5c:	34333231 	.word	0x34333231
  40ac60:	38373635 	.word	0x38373635
  40ac64:	32313039 	.word	0x32313039
  40ac68:	36353433 	.word	0x36353433
  40ac6c:	30393837 	.word	0x30393837
  40ac70:	34333231 	.word	0x34333231
  40ac74:	38373635 	.word	0x38373635
  40ac78:	32313039 	.word	0x32313039
  40ac7c:	36353433 	.word	0x36353433
  40ac80:	30393837 	.word	0x30393837
  40ac84:	34333231 	.word	0x34333231
  40ac88:	38373635 	.word	0x38373635
  40ac8c:	32313039 	.word	0x32313039
  40ac90:	36353433 	.word	0x36353433
  40ac94:	30393837 	.word	0x30393837
  40ac98:	34333231 	.word	0x34333231
  40ac9c:	38373635 	.word	0x38373635
  40aca0:	32313039 	.word	0x32313039
  40aca4:	36353433 	.word	0x36353433
  40aca8:	30393837 	.word	0x30393837
  40acac:	00000000 	.word	0x00000000

0040acb0 <.LC33>:
  40acb0:	a2f4ed57 	.word	0xa2f4ed57
  40acb4:	55c9e32b 	.word	0x55c9e32b
  40acb8:	2eda49ac 	.word	0x2eda49ac
  40acbc:	7ab60721 	.word	0x7ab60721
  40acc0:	00000000 	.word	0x00000000

0040acc4 <.LC34>:
  40acc4:	61616161 	.word	0x61616161
  40acc8:	61616161 	.word	0x61616161
  40accc:	61616161 	.word	0x61616161
  40acd0:	61616161 	.word	0x61616161
  40acd4:	61616161 	.word	0x61616161
  40acd8:	61616161 	.word	0x61616161
  40acdc:	61616161 	.word	0x61616161
  40ace0:	61616161 	.word	0x61616161
  40ace4:	61616161 	.word	0x61616161
  40ace8:	61616161 	.word	0x61616161
  40acec:	61616161 	.word	0x61616161
  40acf0:	61616161 	.word	0x61616161
  40acf4:	61616161 	.word	0x61616161
  40acf8:	61616161 	.word	0x61616161
  40acfc:	61616161 	.word	0x61616161
  40ad00:	61616161 	.word	0x61616161
  40ad04:	61616161 	.word	0x61616161
  40ad08:	61616161 	.word	0x61616161
  40ad0c:	61616161 	.word	0x61616161
  40ad10:	61616161 	.word	0x61616161
  40ad14:	61616161 	.word	0x61616161
  40ad18:	61616161 	.word	0x61616161
  40ad1c:	61616161 	.word	0x61616161
  40ad20:	61616161 	.word	0x61616161
  40ad24:	61616161 	.word	0x61616161
  40ad28:	61616161 	.word	0x61616161
  40ad2c:	61616161 	.word	0x61616161
  40ad30:	61616161 	.word	0x61616161
  40ad34:	61616161 	.word	0x61616161
  40ad38:	61616161 	.word	0x61616161
  40ad3c:	61616161 	.word	0x61616161
  40ad40:	61616161 	.word	0x61616161
  40ad44:	00000000 	.word	0x00000000

0040ad48 <.LC35>:
  40ad48:	db3f5bad 	.word	0xdb3f5bad
  40ad4c:	786752cb 	.word	0x786752cb
  40ad50:	2f9d83c2 	.word	0x2f9d83c2
  40ad54:	53a71e15 	.word	0x53a71e15
  40ad58:	a0265e99 	.word	0xa0265e99
  40ad5c:	00000000 	.word	0x00000000

0040ad60 <.LC36>:
  40ad60:	64636261 	.word	0x64636261
  40ad64:	65646362 	.word	0x65646362
  40ad68:	66656463 	.word	0x66656463
  40ad6c:	67666564 	.word	0x67666564
  40ad70:	68676665 	.word	0x68676665
  40ad74:	69686766 	.word	0x69686766
  40ad78:	6a696867 	.word	0x6a696867
  40ad7c:	6b6a6968 	.word	0x6b6a6968
  40ad80:	6c6b6a69 	.word	0x6c6b6a69
  40ad84:	6d6c6b6a 	.word	0x6d6c6b6a
  40ad88:	6e6d6c6b 	.word	0x6e6d6c6b
  40ad8c:	6f6e6d6c 	.word	0x6f6e6d6c
  40ad90:	706f6e6d 	.word	0x706f6e6d
  40ad94:	71706f6e 	.word	0x71706f6e
  40ad98:	00000000 	.word	0x00000000

0040ad9c <.LC37>:
  40ad9c:	443e9884 	.word	0x443e9884
  40ada0:	6ed23b1c 	.word	0x6ed23b1c
  40ada4:	a14aaeba 	.word	0xa14aaeba
  40ada8:	e52951f9 	.word	0xe52951f9
  40adac:	f17046e5 	.word	0xf17046e5
  40adb0:	00000000 	.word	0x00000000

0040adb4 <.LC38>:
  40adb4:	61616161 	.word	0x61616161
  40adb8:	61616161 	.word	0x61616161
  40adbc:	61616161 	.word	0x61616161
  40adc0:	61616161 	.word	0x61616161
  40adc4:	61616161 	.word	0x61616161
  40adc8:	61616161 	.word	0x61616161
  40adcc:	61616161 	.word	0x61616161
  40add0:	61616161 	.word	0x61616161
  40add4:	61616161 	.word	0x61616161
  40add8:	61616161 	.word	0x61616161
  40addc:	61616161 	.word	0x61616161
  40ade0:	61616161 	.word	0x61616161
  40ade4:	61616161 	.word	0x61616161
  40ade8:	61616161 	.word	0x61616161
  40adec:	61616161 	.word	0x61616161
  40adf0:	61616161 	.word	0x61616161
  40adf4:	00000000 	.word	0x00000000

0040adf8 <.LC39>:
  40adf8:	82ba9800 	.word	0x82ba9800
  40adfc:	42165c4b 	.word	0x42165c4b
  40ae00:	12a1d77b 	.word	0x12a1d77b
  40ae04:	2a445a2a 	.word	0x2a445a2a
  40ae08:	4d64ec25 	.word	0x4d64ec25
  40ae0c:	00000000 	.word	0x00000000

0040ae10 <.LC40>:
  40ae10:	363e99a9 	.word	0x363e99a9
  40ae14:	6a810647 	.word	0x6a810647
  40ae18:	71253eba 	.word	0x71253eba
  40ae1c:	6cc25078 	.word	0x6cc25078
  40ae20:	9dd8d09c 	.word	0x9dd8d09c
  40ae24:	00000000 	.word	0x00000000

0040ae28 <.LC41>:
  40ae28:	bf1678ba 	.word	0xbf1678ba
  40ae2c:	eacf018f 	.word	0xeacf018f
  40ae30:	de404141 	.word	0xde404141
  40ae34:	2322ae5d 	.word	0x2322ae5d
  40ae38:	a36103b0 	.word	0xa36103b0
  40ae3c:	9c7a1796 	.word	0x9c7a1796
  40ae40:	61ff10b4 	.word	0x61ff10b4
  40ae44:	ad1500f2 	.word	0xad1500f2
  40ae48:	00000000 	.word	0x00000000

0040ae4c <.LC42>:
  40ae4c:	616a8d24 	.word	0x616a8d24
  40ae50:	b83806d2 	.word	0xb83806d2
  40ae54:	9326c0e5 	.word	0x9326c0e5
  40ae58:	39603e0c 	.word	0x39603e0c
  40ae5c:	59e43ca3 	.word	0x59e43ca3
  40ae60:	6721ff64 	.word	0x6721ff64
  40ae64:	d4edecf6 	.word	0xd4edecf6
  40ae68:	c106db19 	.word	0xc106db19
  40ae6c:	00000000 	.word	0x00000000

0040ae70 <.LC43>:
  40ae70:	3f7500cb 	.word	0x3f7500cb
  40ae74:	8b5ea345 	.word	0x8b5ea345
  40ae78:	693da0b5 	.word	0x693da0b5
  40ae7c:	0750c69a 	.word	0x0750c69a
  40ae80:	ab322c27 	.word	0xab322c27
  40ae84:	63d1de0e 	.word	0x63d1de0e
  40ae88:	5a608b1a 	.word	0x5a608b1a
  40ae8c:	ed5bff43 	.word	0xed5bff43
  40ae90:	2b078680 	.word	0x2b078680
  40ae94:	23cce7a1 	.word	0x23cce7a1
  40ae98:	a1ecba58 	.word	0xa1ecba58
  40ae9c:	a725c834 	.word	0xa725c834
  40aea0:	00000000 	.word	0x00000000

0040aea4 <.LC44>:
  40aea4:	64636261 	.word	0x64636261
  40aea8:	68676665 	.word	0x68676665
  40aeac:	65646362 	.word	0x65646362
  40aeb0:	69686766 	.word	0x69686766
  40aeb4:	66656463 	.word	0x66656463
  40aeb8:	6a696867 	.word	0x6a696867
  40aebc:	67666564 	.word	0x67666564
  40aec0:	6b6a6968 	.word	0x6b6a6968
  40aec4:	68676665 	.word	0x68676665
  40aec8:	6c6b6a69 	.word	0x6c6b6a69
  40aecc:	69686766 	.word	0x69686766
  40aed0:	6d6c6b6a 	.word	0x6d6c6b6a
  40aed4:	6a696867 	.word	0x6a696867
  40aed8:	6e6d6c6b 	.word	0x6e6d6c6b
  40aedc:	6b6a6968 	.word	0x6b6a6968
  40aee0:	6f6e6d6c 	.word	0x6f6e6d6c
  40aee4:	6c6b6a69 	.word	0x6c6b6a69
  40aee8:	706f6e6d 	.word	0x706f6e6d
  40aeec:	6d6c6b6a 	.word	0x6d6c6b6a
  40aef0:	71706f6e 	.word	0x71706f6e
  40aef4:	6e6d6c6b 	.word	0x6e6d6c6b
  40aef8:	7271706f 	.word	0x7271706f
  40aefc:	6f6e6d6c 	.word	0x6f6e6d6c
  40af00:	73727170 	.word	0x73727170
  40af04:	706f6e6d 	.word	0x706f6e6d
  40af08:	74737271 	.word	0x74737271
  40af0c:	71706f6e 	.word	0x71706f6e
  40af10:	75747372 	.word	0x75747372
  40af14:	00000000 	.word	0x00000000

0040af18 <.LC45>:
  40af18:	330c3309 	.word	0x330c3309
  40af1c:	e84711f7 	.word	0xe84711f7
  40af20:	c72f193d 	.word	0xc72f193d
  40af24:	471bcd82 	.word	0x471bcd82
  40af28:	171b1153 	.word	0x171b1153
  40af2c:	d2053b3b 	.word	0xd2053b3b
  40af30:	8680a02f 	.word	0x8680a02f
  40af34:	12f7b0e3 	.word	0x12f7b0e3
  40af38:	1ac7c7fc 	.word	0x1ac7c7fc
  40af3c:	b92d7e55 	.word	0xb92d7e55
  40af40:	fae9c366 	.word	0xfae9c366
  40af44:	39607491 	.word	0x39607491
  40af48:	00000000 	.word	0x00000000

0040af4c <.LC46>:
  40af4c:	a135afdd 	.word	0xa135afdd
  40af50:	ba7a6193 	.word	0xba7a6193
  40af54:	497341cc 	.word	0x497341cc
  40af58:	314120ae 	.word	0x314120ae
  40af5c:	4efae612 	.word	0x4efae612
  40af60:	a27ea989 	.word	0xa27ea989
  40af64:	e6ee9e0a 	.word	0xe6ee9e0a
  40af68:	9ad3554b 	.word	0x9ad3554b
  40af6c:	2a999221 	.word	0x2a999221
  40af70:	a8c14f27 	.word	0xa8c14f27
  40af74:	233cba36 	.word	0x233cba36
  40af78:	bdebfea3 	.word	0xbdebfea3
  40af7c:	23444d45 	.word	0x23444d45
  40af80:	0ee83c64 	.word	0x0ee83c64
  40af84:	4fc99a2a 	.word	0x4fc99a2a
  40af88:	9fa44ca5 	.word	0x9fa44ca5
  40af8c:	00000000 	.word	0x00000000

0040af90 <.LC47>:
  40af90:	759b958e 	.word	0x759b958e
  40af94:	da13e3da 	.word	0xda13e3da
  40af98:	28f7f48c 	.word	0x28f7f48c
  40af9c:	3f14fc14 	.word	0x3f14fc14
  40afa0:	c679778f 	.word	0xc679778f
  40afa4:	a17f9feb 	.word	0xa17f9feb
  40afa8:	adae9972 	.word	0xadae9972
  40afac:	189088b6 	.word	0x189088b6
  40afb0:	9e281d50 	.word	0x9e281d50
  40afb4:	e4f70049 	.word	0xe4f70049
  40afb8:	de991b33 	.word	0xde991b33
  40afbc:	3a43b5c4 	.word	0x3a43b5c4
  40afc0:	ee29d3c7 	.word	0xee29d3c7
  40afc4:	5426ddb6 	.word	0x5426ddb6
  40afc8:	5be5965e 	.word	0x5be5965e
  40afcc:	09e94b87 	.word	0x09e94b87
  40afd0:	00000000 	.word	0x00000000
  40afd4:	0040b6d8 	.word	0x0040b6d8
  40afd8:	0040b6b8 	.word	0x0040b6b8
  40afdc:	0040b6ec 	.word	0x0040b6ec

0040afe0 <.LC49>:
  40afe0:	54206948 	.word	0x54206948
  40afe4:	65726568 	.word	0x65726568
  40afe8:	00000000 	.word	0x00000000

0040afec <.LC50>:
  40afec:	7a729492 	.word	0x7a729492
  40aff0:	1cbb3836 	.word	0x1cbb3836
  40aff4:	f88ef413 	.word	0xf88ef413
  40aff8:	9dfc8b15 	.word	0x9dfc8b15
  40affc:	00000000 	.word	0x00000000

0040b000 <.LC51>:
  40b000:	74616877 	.word	0x74616877
  40b004:	206f6420 	.word	0x206f6420
  40b008:	77206179 	.word	0x77206179
  40b00c:	20746e61 	.word	0x20746e61
  40b010:	20726f66 	.word	0x20726f66
  40b014:	68746f6e 	.word	0x68746f6e
  40b018:	3f676e69 	.word	0x3f676e69
  40b01c:	00000000 	.word	0x00000000

0040b020 <.LC52>:
  40b020:	3e780c75 	.word	0x3e780c75
  40b024:	03b5b06a 	.word	0x03b5b06a
  40b028:	316ea8ea 	.word	0x316ea8ea
  40b02c:	38b75d0a 	.word	0x38b75d0a
  40b030:	00000000 	.word	0x00000000

0040b034 <.LC53>:
  40b034:	dddddddd 	.word	0xdddddddd
  40b038:	dddddddd 	.word	0xdddddddd
  40b03c:	dddddddd 	.word	0xdddddddd
  40b040:	dddddddd 	.word	0xdddddddd
  40b044:	dddddddd 	.word	0xdddddddd
  40b048:	dddddddd 	.word	0xdddddddd
  40b04c:	dddddddd 	.word	0xdddddddd
  40b050:	dddddddd 	.word	0xdddddddd
  40b054:	dddddddd 	.word	0xdddddddd
  40b058:	dddddddd 	.word	0xdddddddd
  40b05c:	dddddddd 	.word	0xdddddddd
  40b060:	dddddddd 	.word	0xdddddddd
  40b064:	0000dddd 	.word	0x0000dddd

0040b068 <.LC54>:
  40b068:	5234be56 	.word	0x5234be56
  40b06c:	884c141d 	.word	0x884c141d
  40b070:	33c7b8db 	.word	0x33c7b8db
  40b074:	f6b3e8f0 	.word	0xf6b3e8f0
  40b078:	00000000 	.word	0x00000000
  40b07c:	0040b6a0 	.word	0x0040b6a0
  40b080:	0040b6b8 	.word	0x0040b6b8
  40b084:	0040b6c0 	.word	0x0040b6c0

0040b088 <.LC56>:
  40b088:	863117b6 	.word	0x863117b6
  40b08c:	64720555 	.word	0x64720555
  40b090:	b6c08be2 	.word	0xb6c08be2
  40b094:	8e8c37fb 	.word	0x8e8c37fb
  40b098:	00be46f1 	.word	0x00be46f1
  40b09c:	00000000 	.word	0x00000000

0040b0a0 <.LC57>:
  40b0a0:	6adffcef 	.word	0x6adffcef
  40b0a4:	a22febe5 	.word	0xa22febe5
  40b0a8:	d51674d2 	.word	0xd51674d2
  40b0ac:	9cdf84f1 	.word	0x9cdf84f1
  40b0b0:	797c9a25 	.word	0x797c9a25
  40b0b4:	00000000 	.word	0x00000000

0040b0b8 <.LC58>:
  40b0b8:	42735d12 	.word	0x42735d12
  40b0bc:	cd11acb9 	.word	0xcd11acb9
  40b0c0:	f49aa391 	.word	0xf49aa391
  40b0c4:	4f7ba18a 	.word	0x4f7ba18a
  40b0c8:	d375f163 	.word	0xd375f163
  40b0cc:	00000000 	.word	0x00000000

0040b0d0 <.LC59>:
  40b0d0:	614c34b0 	.word	0x614c34b0
  40b0d4:	5338dbd8 	.word	0x5338dbd8
  40b0d8:	ceafa85c 	.word	0xceafa85c
  40b0dc:	2bf10baf 	.word	0x2bf10baf
  40b0e0:	00c21d88 	.word	0x00c21d88
  40b0e4:	a73d83c9 	.word	0xa73d83c9
  40b0e8:	6c37e926 	.word	0x6c37e926
  40b0ec:	f7cf322e 	.word	0xf7cf322e
  40b0f0:	00000000 	.word	0x00000000

0040b0f4 <.LC60>:
  40b0f4:	46c1dc5b 	.word	0x46c1dc5b
  40b0f8:	4e7560bf 	.word	0x4e7560bf
  40b0fc:	2624046a 	.word	0x2624046a
  40b100:	c7759508 	.word	0xc7759508
  40b104:	083f005a 	.word	0x083f005a
  40b108:	8339279d 	.word	0x8339279d
  40b10c:	b958ec9d 	.word	0xb958ec9d
  40b110:	4338ec64 	.word	0x4338ec64
  40b114:	00000000 	.word	0x00000000

0040b118 <.LC61>:
  40b118:	1ea93e77 	.word	0x1ea93e77
  40b11c:	460e8036 	.word	0x460e8036
  40b120:	ebb84d85 	.word	0xebb84d85
  40b124:	a78191d0 	.word	0xa78191d0
  40b128:	8b095929 	.word	0x8b095929
  40b12c:	22c1f83e 	.word	0x22c1f83e
  40b130:	145563d9 	.word	0x145563d9
  40b134:	fe65d5ce 	.word	0xfe65d5ce
  40b138:	00000000 	.word	0x00000000

0040b13c <.LC62>:
  40b13c:	4439d0af 	.word	0x4439d0af
  40b140:	629548d8 	.word	0x629548d8
  40b144:	f425086b 	.word	0xf425086b
  40b148:	7f9046ab 	.word	0x7f9046ab
  40b14c:	dbdaf915 	.word	0xdbdaf915
  40b150:	c61e10e4 	.word	0xc61e10e4
  40b154:	4c03aa82 	.word	0x4c03aa82
  40b158:	9cc5eb7c 	.word	0x9cc5eb7c
  40b15c:	a99eeafa 	.word	0xa99eeafa
  40b160:	7fde6e07 	.word	0x7fde6e07
  40b164:	e852f14a 	.word	0xe852f14a
  40b168:	b69cfab2 	.word	0xb69cfab2
  40b16c:	00000000 	.word	0x00000000

0040b170 <.LC63>:
  40b170:	e3d245af 	.word	0xe3d245af
  40b174:	31404876 	.word	0x31404876
  40b178:	d2787f61 	.word	0xd2787f61
  40b17c:	1b6b8ab5 	.word	0x1b6b8ab5
  40b180:	64f47e9c 	.word	0x64f47e9c
  40b184:	471ba0f5 	.word	0x471ba0f5
  40b188:	73c32ee4 	.word	0x73c32ee4
  40b18c:	5e442263 	.word	0x5e442263
  40b190:	ca40228e 	.word	0xca40228e
  40b194:	c7e2695e 	.word	0xc7e2695e
  40b198:	ec39328b 	.word	0xec39328b
  40b19c:	4916b2fa 	.word	0x4916b2fa
  40b1a0:	00000000 	.word	0x00000000

0040b1a4 <.LC64>:
  40b1a4:	08260688 	.word	0x08260688
  40b1a8:	8aade6d3 	.word	0x8aade6d3
  40b1ac:	e0aca20a 	.word	0xe0aca20a
  40b1b0:	6fa8c814 	.word	0x6fa8c814
  40b1b4:	d935a60a 	.word	0xd935a60a
  40b1b8:	eb9fac47 	.word	0xeb9fac47
  40b1bc:	e5f43ee8 	.word	0xe5f43ee8
  40b1c0:	4b146659 	.word	0x4b146659
  40b1c4:	9db35a2a 	.word	0x9db35a2a
  40b1c8:	b91438c1 	.word	0xb91438c1
  40b1cc:	e1b63a4e 	.word	0xe1b63a4e
  40b1d0:	274fa301 	.word	0x274fa301
  40b1d4:	00000000 	.word	0x00000000

0040b1d8 <.LC65>:
  40b1d8:	de7caa87 	.word	0xde7caa87
  40b1dc:	9d61efa5 	.word	0x9d61efa5
  40b1e0:	24b4f04f 	.word	0x24b4f04f
  40b1e4:	b06c1d1a 	.word	0xb06c1d1a
  40b1e8:	e2f47923 	.word	0xe2f47923
  40b1ec:	78c24ece 	.word	0x78c24ece
  40b1f0:	05b3d07a 	.word	0x05b3d07a
  40b1f4:	de7ce145 	.word	0xde7ce145
  40b1f8:	b733a8da 	.word	0xb733a8da
  40b1fc:	02a7b8d6 	.word	0x02a7b8d6
  40b200:	4e278b03 	.word	0x4e278b03
  40b204:	e4f4a3ae 	.word	0xe4f4a3ae
  40b208:	4e919dbe 	.word	0x4e919dbe
  40b20c:	70f161eb 	.word	0x70f161eb
  40b210:	206c692e 	.word	0x206c692e
  40b214:	5468123a 	.word	0x5468123a
  40b218:	00000000 	.word	0x00000000

0040b21c <.LC66>:
  40b21c:	7b7a4b16 	.word	0x7b7a4b16
  40b220:	e219f8fc 	.word	0xe219f8fc
  40b224:	e7fb95e3 	.word	0xe7fb95e3
  40b228:	a3e0563b 	.word	0xa3e0563b
  40b22c:	2264bd87 	.word	0x2264bd87
  40b230:	d61f832e 	.word	0xd61f832e
  40b234:	d70c2710 	.word	0xd70c2710
  40b238:	540525ea 	.word	0x540525ea
  40b23c:	75bf5897 	.word	0x75bf5897
  40b240:	4a995ac0 	.word	0x4a995ac0
  40b244:	654f036d 	.word	0x654f036d
  40b248:	fde6f0f8 	.word	0xfde6f0f8
  40b24c:	a3b1eaca 	.word	0xa3b1eaca
  40b250:	4b6b4a4d 	.word	0x4b6b4a4d
  40b254:	0a076e63 	.word	0x0a076e63
  40b258:	37e7bc38 	.word	0x37e7bc38
  40b25c:	00000000 	.word	0x00000000

0040b260 <.LC67>:
  40b260:	08b073fa 	.word	0x08b073fa
  40b264:	84a2569d 	.word	0x84a2569d
  40b268:	75f0b0ef 	.word	0x75f0b0ef
  40b26c:	e90b896c 	.word	0xe90b896c
  40b270:	dddbb5b1 	.word	0xdddbb5b1
  40b274:	361ae88e 	.word	0x361ae88e
  40b278:	333ef855 	.word	0x333ef855
  40b27c:	399d27b2 	.word	0x399d27b2
  40b280:	82843ebf 	.word	0x82843ebf
  40b284:	c822a779 	.word	0xc822a779
  40b288:	a485b406 	.word	0xa485b406
  40b28c:	07c8677e 	.word	0x07c8677e
  40b290:	37a346b9 	.word	0x37a346b9
  40b294:	2694e8be 	.word	0x2694e8be
  40b298:	59882774 	.word	0x59882774
  40b29c:	fb9232e1 	.word	0xfb9232e1
  40b2a0:	00000000 	.word	0x00000000
  40b2a4:	20776f6e 	.word	0x20776f6e
  40b2a8:	74207369 	.word	0x74207369
  40b2ac:	74206568 	.word	0x74206568
  40b2b0:	20656d69 	.word	0x20656d69
  40b2b4:	57929495 	.word	0x57929495
  40b2b8:	5381425f 	.word	0x5381425f
  40b2bc:	469dcc2c 	.word	0x469dcc2c
  40b2c0:	cb33a277 	.word	0xcb33a277
  40b2c4:	33323130 	.word	0x33323130
  40b2c8:	37363534 	.word	0x37363534
  40b2cc:	62613938 	.word	0x62613938
  40b2d0:	66656463 	.word	0x66656463
  40b2d4:	00202020 	.word	0x00202020
  40b2d8:	34333231 	.word	0x34333231
  40b2dc:	38373635 	.word	0x38373635
  40b2e0:	62613039 	.word	0x62613039
  40b2e4:	66656463 	.word	0x66656463
  40b2e8:	00202020 	.word	0x00202020
  40b2ec:	16157e2b 	.word	0x16157e2b
  40b2f0:	a6d2ae28 	.word	0xa6d2ae28
  40b2f4:	8815f7ab 	.word	0x8815f7ab
  40b2f8:	3c4fcf09 	.word	0x3c4fcf09
  40b2fc:	f3f2f1f0 	.word	0xf3f2f1f0
  40b300:	f7f6f5f4 	.word	0xf7f6f5f4
  40b304:	fbfaf9f8 	.word	0xfbfaf9f8
  40b308:	fffefdfc 	.word	0xfffefdfc
  40b30c:	e2bec16b 	.word	0xe2bec16b
  40b310:	969f402e 	.word	0x969f402e
  40b314:	117e3de9 	.word	0x117e3de9
  40b318:	2a179373 	.word	0x2a179373
  40b31c:	578a2dae 	.word	0x578a2dae
  40b320:	9cac031e 	.word	0x9cac031e
  40b324:	ac6fb79e 	.word	0xac6fb79e
  40b328:	518eaf45 	.word	0x518eaf45
  40b32c:	461cc830 	.word	0x461cc830
  40b330:	11e45ca3 	.word	0x11e45ca3
  40b334:	19c1fbe5 	.word	0x19c1fbe5
  40b338:	ef520a1a 	.word	0xef520a1a
  40b33c:	45249ff6 	.word	0x45249ff6
  40b340:	179b4fdf 	.word	0x179b4fdf
  40b344:	7b412bad 	.word	0x7b412bad
  40b348:	10376ce6 	.word	0x10376ce6
  40b34c:	91614d87 	.word	0x91614d87
  40b350:	26e320b6 	.word	0x26e320b6
  40b354:	6468ef1b 	.word	0x6468ef1b
  40b358:	ceb60d99 	.word	0xceb60d99
  40b35c:	6bf60698 	.word	0x6bf60698
  40b360:	fffd7079 	.word	0xfffd7079
  40b364:	7b181786 	.word	0x7b181786
  40b368:	fffdffb9 	.word	0xfffdffb9
  40b36c:	3edfe45a 	.word	0x3edfe45a
  40b370:	5ed3d5db 	.word	0x5ed3d5db
  40b374:	02094f5b 	.word	0x02094f5b
  40b378:	ab3eb00d 	.word	0xab3eb00d
  40b37c:	da1d031e 	.word	0xda1d031e
  40b380:	d103be2f 	.word	0xd103be2f
  40b384:	a0702179 	.word	0xa0702179
  40b388:	ee9c00f3 	.word	0xee9c00f3
  40b38c:	20776f6e 	.word	0x20776f6e
  40b390:	74207369 	.word	0x74207369
  40b394:	74206568 	.word	0x74206568
  40b398:	20656d69 	.word	0x20656d69
  40b39c:	20726f66 	.word	0x20726f66
  40b3a0:	206c6c61 	.word	0x206c6c61
  40b3a4:	67452301 	.word	0x67452301
  40b3a8:	efcdab89 	.word	0xefcdab89
  40b3ac:	78563412 	.word	0x78563412
  40b3b0:	efcdab90 	.word	0xefcdab90
  40b3b4:	b0527c8b 	.word	0xb0527c8b
  40b3b8:	b86c2b01 	.word	0xb86c2b01
  40b3bc:	f3eb0f4f 	.word	0xf3eb0f4f
  40b3c0:	73865ffb 	.word	0x73865ffb
  40b3c4:	22b38515 	.word	0x22b38515
  40b3c8:	4b2b864b 	.word	0x4b2b864b
  40b3cc:	20776f4e 	.word	0x20776f4e
  40b3d0:	74207369 	.word	0x74207369
  40b3d4:	74206568 	.word	0x74206568
  40b3d8:	20656d69 	.word	0x20656d69
  40b3dc:	20726f66 	.word	0x20726f66
  40b3e0:	206c6c61 	.word	0x206c6c61
  40b3e4:	67452301 	.word	0x67452301
  40b3e8:	efcdab89 	.word	0xefcdab89
  40b3ec:	98badefe 	.word	0x98badefe
  40b3f0:	10325476 	.word	0x10325476
  40b3f4:	efcdab89 	.word	0xefcdab89
  40b3f8:	67452301 	.word	0x67452301
  40b3fc:	78563412 	.word	0x78563412
  40b400:	efcdab90 	.word	0xefcdab90
  40b404:	01010101 	.word	0x01010101
  40b408:	01010101 	.word	0x01010101
  40b40c:	41312111 	.word	0x41312111
  40b410:	81716151 	.word	0x81716151
  40b414:	7e29a043 	.word	0x7e29a043
  40b418:	0ef884d1 	.word	0x0ef884d1
  40b41c:	32846489 	.word	0x32846489
  40b420:	9808d512 	.word	0x9808d512
  40b424:	74159418 	.word	0x74159418
  40b428:	b07d1287 	.word	0xb07d1287
  40b42c:	72657645 	.word	0x72657645
  40b430:	656e6f79 	.word	0x656e6f79
  40b434:	74656720 	.word	0x74656720
  40b438:	72462073 	.word	0x72462073
  40b43c:	79616469 	.word	0x79616469
  40b440:	66666f20 	.word	0x66666f20
  40b444:	0000002e 	.word	0x0000002e
  40b448:	73736150 	.word	0x73736150
  40b44c:	00000000 	.word	0x00000000
  40b450:	6c696146 	.word	0x6c696146
  40b454:	00000000 	.word	0x00000000
  40b458:	0d0a7325 	.word	0x0d0a7325
  40b45c:	2035444d 	.word	0x2035444d
  40b460:	74736574 	.word	0x74736574
  40b464:	2020203a 	.word	0x2020203a
  40b468:	20202020 	.word	0x20202020
  40b46c:	25202020 	.word	0x25202020
  40b470:	00000073 	.word	0x00000073
  40b474:	0d0a7325 	.word	0x0d0a7325
  40b478:	20414853 	.word	0x20414853
  40b47c:	74736574 	.word	0x74736574
  40b480:	2020203a 	.word	0x2020203a
  40b484:	20202020 	.word	0x20202020
  40b488:	25202020 	.word	0x25202020
  40b48c:	00000073 	.word	0x00000073
  40b490:	0d0a7325 	.word	0x0d0a7325
  40b494:	32414853 	.word	0x32414853
  40b498:	74203635 	.word	0x74203635
  40b49c:	3a747365 	.word	0x3a747365
  40b4a0:	20202020 	.word	0x20202020
  40b4a4:	25202020 	.word	0x25202020
  40b4a8:	00000073 	.word	0x00000073
  40b4ac:	0d0a7325 	.word	0x0d0a7325
  40b4b0:	33414853 	.word	0x33414853
  40b4b4:	74203438 	.word	0x74203438
  40b4b8:	3a747365 	.word	0x3a747365
  40b4bc:	20202020 	.word	0x20202020
  40b4c0:	25202020 	.word	0x25202020
  40b4c4:	00000073 	.word	0x00000073
  40b4c8:	0d0a7325 	.word	0x0d0a7325
  40b4cc:	35414853 	.word	0x35414853
  40b4d0:	74203231 	.word	0x74203231
  40b4d4:	3a747365 	.word	0x3a747365
  40b4d8:	20202020 	.word	0x20202020
  40b4dc:	25202020 	.word	0x25202020
  40b4e0:	00000073 	.word	0x00000073
  40b4e4:	0d0a7325 	.word	0x0d0a7325
  40b4e8:	43414d48 	.word	0x43414d48
  40b4ec:	35444d5f 	.word	0x35444d5f
  40b4f0:	73657420 	.word	0x73657420
  40b4f4:	20203a74 	.word	0x20203a74
  40b4f8:	25202020 	.word	0x25202020
  40b4fc:	00000073 	.word	0x00000073
  40b500:	0d0a7325 	.word	0x0d0a7325
  40b504:	43414d48 	.word	0x43414d48
  40b508:	4148535f 	.word	0x4148535f
  40b50c:	73657420 	.word	0x73657420
  40b510:	20203a74 	.word	0x20203a74
  40b514:	25202020 	.word	0x25202020
  40b518:	00000073 	.word	0x00000073
  40b51c:	0d0a7325 	.word	0x0d0a7325
  40b520:	43414d48 	.word	0x43414d48
  40b524:	4148535f 	.word	0x4148535f
  40b528:	20363532 	.word	0x20363532
  40b52c:	74736574 	.word	0x74736574
  40b530:	2520203a 	.word	0x2520203a
  40b534:	00000073 	.word	0x00000073
  40b538:	0d0a7325 	.word	0x0d0a7325
  40b53c:	43414d48 	.word	0x43414d48
  40b540:	4148535f 	.word	0x4148535f
  40b544:	20343833 	.word	0x20343833
  40b548:	74736574 	.word	0x74736574
  40b54c:	2520203a 	.word	0x2520203a
  40b550:	00000073 	.word	0x00000073
  40b554:	0d0a7325 	.word	0x0d0a7325
  40b558:	43414d48 	.word	0x43414d48
  40b55c:	4148535f 	.word	0x4148535f
  40b560:	20323135 	.word	0x20323135
  40b564:	74736574 	.word	0x74736574
  40b568:	2520203a 	.word	0x2520203a
  40b56c:	00000073 	.word	0x00000073
  40b570:	0d0a7325 	.word	0x0d0a7325
  40b574:	20434345 	.word	0x20434345
  40b578:	74736574 	.word	0x74736574
  40b57c:	2020203a 	.word	0x2020203a
  40b580:	20202020 	.word	0x20202020
  40b584:	25202020 	.word	0x25202020
  40b588:	00000073 	.word	0x00000073
  40b58c:	0d0a7325 	.word	0x0d0a7325
  40b590:	444e4152 	.word	0x444e4152
  40b594:	74204d4f 	.word	0x74204d4f
  40b598:	3a747365 	.word	0x3a747365
  40b59c:	20202020 	.word	0x20202020
  40b5a0:	25202020 	.word	0x25202020
  40b5a4:	00000073 	.word	0x00000073
  40b5a8:	0d0a7325 	.word	0x0d0a7325
  40b5ac:	20534541 	.word	0x20534541
  40b5b0:	20434243 	.word	0x20434243
  40b5b4:	74736574 	.word	0x74736574
  40b5b8:	2020203a 	.word	0x2020203a
  40b5bc:	25202020 	.word	0x25202020
  40b5c0:	00000073 	.word	0x00000073
  40b5c4:	0d0a7325 	.word	0x0d0a7325
  40b5c8:	20534541 	.word	0x20534541
  40b5cc:	20525443 	.word	0x20525443
  40b5d0:	74736574 	.word	0x74736574
  40b5d4:	2020203a 	.word	0x2020203a
  40b5d8:	25202020 	.word	0x25202020
  40b5dc:	00000073 	.word	0x00000073
  40b5e0:	0d0a7325 	.word	0x0d0a7325
  40b5e4:	504d4f43 	.word	0x504d4f43
  40b5e8:	53534552 	.word	0x53534552
  40b5ec:	73657420 	.word	0x73657420
  40b5f0:	20203a74 	.word	0x20203a74
  40b5f4:	25202020 	.word	0x25202020
  40b5f8:	00000073 	.word	0x00000073
  40b5fc:	0d0a7325 	.word	0x0d0a7325
  40b600:	20534544 	.word	0x20534544
  40b604:	74736574 	.word	0x74736574
  40b608:	2020203a 	.word	0x2020203a
  40b60c:	20202020 	.word	0x20202020
  40b610:	25202020 	.word	0x25202020
  40b614:	00000073 	.word	0x00000073
  40b618:	0d0a7325 	.word	0x0d0a7325
  40b61c:	33534544 	.word	0x33534544
  40b620:	73657420 	.word	0x73657420
  40b624:	20203a74 	.word	0x20203a74
  40b628:	20202020 	.word	0x20202020
  40b62c:	25202020 	.word	0x25202020
  40b630:	00000073 	.word	0x00000073
  40b634:	0d0a7325 	.word	0x0d0a7325
  40b638:	20415352 	.word	0x20415352
  40b63c:	74736574 	.word	0x74736574
  40b640:	2020203a 	.word	0x2020203a
  40b644:	20202020 	.word	0x20202020
  40b648:	25202020 	.word	0x25202020
  40b64c:	00000073 	.word	0x00000073
  40b650:	0d0a7325 	.word	0x0d0a7325
  40b654:	74206f4e 	.word	0x74206f4e
  40b658:	73747365 	.word	0x73747365
  40b65c:	65786520 	.word	0x65786520
  40b660:	65747563 	.word	0x65747563
  40b664:	000d0a64 	.word	0x000d0a64
  40b668:	0d0a7325 	.word	0x0d0a7325
  40b66c:	20656e4f 	.word	0x20656e4f
  40b670:	6d20726f 	.word	0x6d20726f
  40b674:	2065726f 	.word	0x2065726f
  40b678:	74736574 	.word	0x74736574
  40b67c:	61662073 	.word	0x61662073
  40b680:	64656c69 	.word	0x64656c69
  40b684:	00000d0a 	.word	0x00000d0a
  40b688:	0d0a7325 	.word	0x0d0a7325
  40b68c:	206c6c41 	.word	0x206c6c41
  40b690:	74736574 	.word	0x74736574
  40b694:	61702073 	.word	0x61702073
  40b698:	64657373 	.word	0x64657373
  40b69c:	00000d0a 	.word	0x00000d0a
  40b6a0:	0b0b0b0b 	.word	0x0b0b0b0b
  40b6a4:	0b0b0b0b 	.word	0x0b0b0b0b
  40b6a8:	0b0b0b0b 	.word	0x0b0b0b0b
  40b6ac:	0b0b0b0b 	.word	0x0b0b0b0b
  40b6b0:	0b0b0b0b 	.word	0x0b0b0b0b
  40b6b4:	00000000 	.word	0x00000000
  40b6b8:	6566654a 	.word	0x6566654a
  40b6bc:	00000000 	.word	0x00000000
  40b6c0:	aaaaaaaa 	.word	0xaaaaaaaa
  40b6c4:	aaaaaaaa 	.word	0xaaaaaaaa
  40b6c8:	aaaaaaaa 	.word	0xaaaaaaaa
  40b6cc:	aaaaaaaa 	.word	0xaaaaaaaa
  40b6d0:	aaaaaaaa 	.word	0xaaaaaaaa
  40b6d4:	00000000 	.word	0x00000000
  40b6d8:	0b0b0b0b 	.word	0x0b0b0b0b
  40b6dc:	0b0b0b0b 	.word	0x0b0b0b0b
  40b6e0:	0b0b0b0b 	.word	0x0b0b0b0b
  40b6e4:	0b0b0b0b 	.word	0x0b0b0b0b
  40b6e8:	00000000 	.word	0x00000000
  40b6ec:	aaaaaaaa 	.word	0xaaaaaaaa
  40b6f0:	aaaaaaaa 	.word	0xaaaaaaaa
  40b6f4:	aaaaaaaa 	.word	0xaaaaaaaa
  40b6f8:	aaaaaaaa 	.word	0xaaaaaaaa
  40b6fc:	00000000 	.word	0x00000000
  40b700:	41200a0d 	.word	0x41200a0d
  40b704:	696c7070 	.word	0x696c7070
  40b708:	69746163 	.word	0x69746163
  40b70c:	63206e6f 	.word	0x63206e6f
  40b710:	74616572 	.word	0x74616572
  40b714:	4f206465 	.word	0x4f206465
  40b718:	32207463 	.word	0x32207463
  40b71c:	30322035 	.word	0x30322035
  40b720:	31203831 	.word	0x31203831
  40b724:	39303a36 	.word	0x39303a36
  40b728:	2039333a 	.word	0x2039333a
  40b72c:	74696e69 	.word	0x74696e69
  40b730:	696c6169 	.word	0x696c6169
  40b734:	2164657a 	.word	0x2164657a
  40b738:	0a0d      	.short	0x0a0d
	...

Disassembly of section .text.deflate%44:

0040b73c <deflate>:
    int flush;
{
    int old_flush; /* value of flush param for previous deflate call */
    deflate_state *s;

    if (strm == Z_NULL || strm->state == Z_NULL ||
  40b73c:	2800      	cmp	r0, #0
  40b73e:	f000 84e3 	beq.w	40c108 <.LCFI25>
{
  40b742:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

0040b746 <.LCFI24>:
  40b746:	4605      	mov	r5, r0
    if (strm == Z_NULL || strm->state == Z_NULL ||
  40b748:	69c4      	ldr	r4, [r0, #28]
  40b74a:	2c00      	cmp	r4, #0
  40b74c:	f000 84df 	beq.w	40c10e <.LCFI26>
        flush > Z_BLOCK || flush < 0) {
  40b750:	2905      	cmp	r1, #5
  40b752:	f200 84e0 	bhi.w	40c116 <.LVL520>

0040b756 <.LVL353>:
        return Z_STREAM_ERROR;
    }
    s = strm->state;

    if (strm->next_out == Z_NULL ||
  40b756:	68c3      	ldr	r3, [r0, #12]
  40b758:	2b00      	cmp	r3, #0
  40b75a:	d04b      	beq.n	40b7f4 <.LVL357+0x6>
  40b75c:	6803      	ldr	r3, [r0, #0]
  40b75e:	2b00      	cmp	r3, #0
  40b760:	d045      	beq.n	40b7ee <.LVL357>
        (strm->next_in == Z_NULL && strm->avail_in != 0) ||
        (s->status == FINISH_STATE && flush != Z_FINISH)) {
  40b762:	6863      	ldr	r3, [r4, #4]
  40b764:	1f0e      	subs	r6, r1, #4
  40b766:	bf18      	it	ne
  40b768:	2601      	movne	r6, #1
  40b76a:	f240 229a 	movw	r2, #666	; 0x29a
  40b76e:	4293      	cmp	r3, r2
  40b770:	d101      	bne.n	40b776 <.LVL353+0x20>
  40b772:	2e00      	cmp	r6, #0
  40b774:	d13e      	bne.n	40b7f4 <.LVL357+0x6>
        ERR_RETURN(strm, Z_STREAM_ERROR);
    }
    if (strm->avail_out == 0) ERR_RETURN(strm, Z_BUF_ERROR);
  40b776:	692a      	ldr	r2, [r5, #16]
  40b778:	2a00      	cmp	r2, #0
  40b77a:	d042      	beq.n	40b802 <.LVL359>
  40b77c:	460f      	mov	r7, r1

    s->strm = strm; /* just in case */
  40b77e:	6025      	str	r5, [r4, #0]
    old_flush = s->last_flush;
  40b780:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28

0040b784 <.LVL354>:
    s->last_flush = flush;
  40b784:	62a1      	str	r1, [r4, #40]	; 0x28

    /* Write the header */
    if (s->status == INIT_STATE) {
  40b786:	2b2a      	cmp	r3, #42	; 0x2a
  40b788:	d042      	beq.n	40b810 <.LVL361>

0040b78a <.LVL355>:
            }
            strm->adler = adler32(0L, Z_NULL, 0);
        }
    }
#ifdef GZIP
    if (s->status == EXTRA_STATE) {
  40b78a:	6863      	ldr	r3, [r4, #4]
  40b78c:	2b45      	cmp	r3, #69	; 0x45
  40b78e:	f000 80f6 	beq.w	40b97e <.LVL376+0x10a>
            }
        }
        else
            s->status = NAME_STATE;
    }
    if (s->status == NAME_STATE) {
  40b792:	6863      	ldr	r3, [r4, #4]
  40b794:	2b49      	cmp	r3, #73	; 0x49
  40b796:	f000 8192 	beq.w	40babe <.LBE45>
            }
        }
        else
            s->status = COMMENT_STATE;
    }
    if (s->status == COMMENT_STATE) {
  40b79a:	6863      	ldr	r3, [r4, #4]
  40b79c:	2b5b      	cmp	r3, #91	; 0x5b
  40b79e:	f000 84cd 	beq.w	40c13c <.LBE72>
                s->status = HCRC_STATE;
        }
        else
            s->status = HCRC_STATE;
    }
    if (s->status == HCRC_STATE) {
  40b7a2:	6863      	ldr	r3, [r4, #4]
  40b7a4:	2b67      	cmp	r3, #103	; 0x67
  40b7a6:	f000 84d7 	beq.w	40c158 <.LBE73>
            s->status = BUSY_STATE;
    }
#endif

    /* Flush as much pending output as possible */
    if (s->pending != 0) {
  40b7aa:	6963      	ldr	r3, [r4, #20]
  40b7ac:	2b00      	cmp	r3, #0
  40b7ae:	f040 8212 	bne.w	40bbd6 <.LVL420+0x14>

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
    } else if (strm->avail_in == 0 && RANK(flush) <= RANK(old_flush) &&
  40b7b2:	686b      	ldr	r3, [r5, #4]
  40b7b4:	2b00      	cmp	r3, #0
  40b7b6:	f040 84f0 	bne.w	40c19a <.LVL531+0xa>
  40b7ba:	2f04      	cmp	r7, #4
  40b7bc:	bfcc      	ite	gt
  40b7be:	2209      	movgt	r2, #9
  40b7c0:	2200      	movle	r2, #0
  40b7c2:	ebc2 0247 	rsb	r2, r2, r7, lsl #1
  40b7c6:	f1b8 0f04 	cmp.w	r8, #4
  40b7ca:	bfcc      	ite	gt
  40b7cc:	2309      	movgt	r3, #9
  40b7ce:	2300      	movle	r3, #0
  40b7d0:	ebc3 0848 	rsb	r8, r3, r8, lsl #1

0040b7d4 <.LVL356>:
  40b7d4:	4542      	cmp	r2, r8
  40b7d6:	f300 8203 	bgt.w	40bbe0 <.LVL422>
  40b7da:	2e00      	cmp	r6, #0
  40b7dc:	f000 8200 	beq.w	40bbe0 <.LVL422>
               flush != Z_FINISH) {
        ERR_RETURN(strm, Z_BUF_ERROR);
  40b7e0:	4b99      	ldr	r3, [pc, #612]	; (40ba48 <.LVL388+0x2>)
  40b7e2:	69db      	ldr	r3, [r3, #28]
  40b7e4:	61ab      	str	r3, [r5, #24]
  40b7e6:	f06f 0004 	mvn.w	r0, #4
  40b7ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040b7ee <.LVL357>:
        (strm->next_in == Z_NULL && strm->avail_in != 0) ||
  40b7ee:	6843      	ldr	r3, [r0, #4]
  40b7f0:	2b00      	cmp	r3, #0
  40b7f2:	d0b6      	beq.n	40b762 <.LVL353+0xc>
        ERR_RETURN(strm, Z_STREAM_ERROR);
  40b7f4:	4b94      	ldr	r3, [pc, #592]	; (40ba48 <.LVL388+0x2>)
  40b7f6:	691b      	ldr	r3, [r3, #16]
  40b7f8:	61ab      	str	r3, [r5, #24]
  40b7fa:	f06f 0001 	mvn.w	r0, #1

0040b7fe <.LVL358>:
  40b7fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040b802 <.LVL359>:
    if (strm->avail_out == 0) ERR_RETURN(strm, Z_BUF_ERROR);
  40b802:	4b91      	ldr	r3, [pc, #580]	; (40ba48 <.LVL388+0x2>)
  40b804:	69db      	ldr	r3, [r3, #28]
  40b806:	61ab      	str	r3, [r5, #24]
  40b808:	f06f 0004 	mvn.w	r0, #4

0040b80c <.LVL360>:
  40b80c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040b810 <.LVL361>:
        if (s->wrap == 2) {
  40b810:	69a3      	ldr	r3, [r4, #24]
  40b812:	2b02      	cmp	r3, #2
  40b814:	d029      	beq.n	40b86a <.LBE42>

0040b816 <.LBB42>:
            uInt header = (Z_DEFLATED + ((s->w_bits-8)<<4)) << 8;
  40b816:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40b818:	031b      	lsls	r3, r3, #12
  40b81a:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800

0040b81e <.LVL362>:
            if (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2)
  40b81e:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
  40b822:	2a01      	cmp	r2, #1
  40b824:	f340 80f8 	ble.w	40ba18 <.LBB44>
                level_flags = 0;
  40b828:	2100      	movs	r1, #0

0040b82a <.LVL363>:
            header |= (level_flags << 6);
  40b82a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
            if (s->strstart != 0) header |= PRESET_DICT;
  40b82e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  40b830:	b10a      	cbz	r2, 40b836 <.LVL363+0xc>
  40b832:	f043 0320 	orr.w	r3, r3, #32
            header += 31 - (header % 31);
  40b836:	4985      	ldr	r1, [pc, #532]	; (40ba4c <.LVL388+0x6>)

0040b838 <.LVL366>:
  40b838:	fba1 2103 	umull	r2, r1, r1, r3
  40b83c:	1a5b      	subs	r3, r3, r1

0040b83e <.LVL367>:
  40b83e:	eb01 0153 	add.w	r1, r1, r3, lsr #1
  40b842:	0909      	lsrs	r1, r1, #4
  40b844:	ebc1 1141 	rsb	r1, r1, r1, lsl #5

0040b848 <.LVL368>:
            s->status = BUSY_STATE;
  40b848:	2371      	movs	r3, #113	; 0x71
  40b84a:	6063      	str	r3, [r4, #4]
            putShortMSB(s, header);
  40b84c:	311f      	adds	r1, #31

0040b84e <.LVL369>:
  40b84e:	4620      	mov	r0, r4

0040b850 <.LVL370>:
  40b850:	f011 fee0 	bl	41d614 <.LFE197>

0040b854 <.LVL371>:
            if (s->strstart != 0) {
  40b854:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40b856:	2b00      	cmp	r3, #0
  40b858:	f040 80ed 	bne.w	40ba36 <.LVL386>
            strm->adler = adler32(0L, Z_NULL, 0);
  40b85c:	2200      	movs	r2, #0
  40b85e:	4611      	mov	r1, r2
  40b860:	4610      	mov	r0, r2
  40b862:	f007 fb11 	bl	412e88 <.LBE46>

0040b866 <.LVL372>:
  40b866:	6328      	str	r0, [r5, #48]	; 0x30
  40b868:	e78f      	b.n	40b78a <.LVL355>

0040b86a <.LBE42>:
            strm->adler = crc32(0L, Z_NULL, 0);
  40b86a:	2200      	movs	r2, #0
  40b86c:	4611      	mov	r1, r2

0040b86e <.LVL374>:
  40b86e:	4610      	mov	r0, r2

0040b870 <.LVL375>:
  40b870:	f007 ff48 	bl	413704 <.LFE21>

0040b874 <.LVL376>:
  40b874:	6328      	str	r0, [r5, #48]	; 0x30
            put_byte(s, 31);
  40b876:	68a2      	ldr	r2, [r4, #8]
  40b878:	6963      	ldr	r3, [r4, #20]
  40b87a:	1c59      	adds	r1, r3, #1
  40b87c:	6161      	str	r1, [r4, #20]
  40b87e:	211f      	movs	r1, #31
  40b880:	54d1      	strb	r1, [r2, r3]
            put_byte(s, 139);
  40b882:	68a2      	ldr	r2, [r4, #8]
  40b884:	6963      	ldr	r3, [r4, #20]
  40b886:	1c59      	adds	r1, r3, #1
  40b888:	6161      	str	r1, [r4, #20]
  40b88a:	218b      	movs	r1, #139	; 0x8b
  40b88c:	54d1      	strb	r1, [r2, r3]
            put_byte(s, 8);
  40b88e:	68a2      	ldr	r2, [r4, #8]
  40b890:	6963      	ldr	r3, [r4, #20]
  40b892:	1c59      	adds	r1, r3, #1
  40b894:	6161      	str	r1, [r4, #20]
  40b896:	2108      	movs	r1, #8
  40b898:	54d1      	strb	r1, [r2, r3]
            if (s->gzhead == Z_NULL) {
  40b89a:	69e2      	ldr	r2, [r4, #28]
  40b89c:	2a00      	cmp	r2, #0
  40b89e:	d079      	beq.n	40b994 <.LBE43>
                put_byte(s, (s->gzhead->text ? 1 : 0) +
  40b8a0:	6961      	ldr	r1, [r4, #20]
  40b8a2:	1c4b      	adds	r3, r1, #1
  40b8a4:	6163      	str	r3, [r4, #20]
  40b8a6:	6813      	ldr	r3, [r2, #0]
  40b8a8:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40b8aa:	2800      	cmp	r0, #0
  40b8ac:	bf14      	ite	ne
  40b8ae:	2002      	movne	r0, #2
  40b8b0:	2000      	moveq	r0, #0
  40b8b2:	2b00      	cmp	r3, #0
  40b8b4:	bf18      	it	ne
  40b8b6:	3001      	addne	r0, #1
  40b8b8:	6913      	ldr	r3, [r2, #16]
  40b8ba:	2b00      	cmp	r3, #0
  40b8bc:	bf0c      	ite	eq
  40b8be:	2300      	moveq	r3, #0
  40b8c0:	2304      	movne	r3, #4
  40b8c2:	4403      	add	r3, r0
  40b8c4:	69d0      	ldr	r0, [r2, #28]
  40b8c6:	2800      	cmp	r0, #0
  40b8c8:	bf0c      	ite	eq
  40b8ca:	2000      	moveq	r0, #0
  40b8cc:	2008      	movne	r0, #8
  40b8ce:	fa50 f383 	uxtab	r3, r0, r3
  40b8d2:	6a50      	ldr	r0, [r2, #36]	; 0x24
  40b8d4:	2800      	cmp	r0, #0
  40b8d6:	bf0c      	ite	eq
  40b8d8:	2000      	moveq	r0, #0
  40b8da:	2010      	movne	r0, #16
  40b8dc:	fa50 f383 	uxtab	r3, r0, r3
  40b8e0:	68a2      	ldr	r2, [r4, #8]
  40b8e2:	5453      	strb	r3, [r2, r1]
                put_byte(s, (Byte)(s->gzhead->time & 0xff));
  40b8e4:	68a2      	ldr	r2, [r4, #8]
  40b8e6:	6963      	ldr	r3, [r4, #20]
  40b8e8:	1c59      	adds	r1, r3, #1
  40b8ea:	6161      	str	r1, [r4, #20]
  40b8ec:	69e1      	ldr	r1, [r4, #28]
  40b8ee:	6849      	ldr	r1, [r1, #4]
  40b8f0:	54d1      	strb	r1, [r2, r3]
                put_byte(s, (Byte)((s->gzhead->time >> 8) & 0xff));
  40b8f2:	68a1      	ldr	r1, [r4, #8]
  40b8f4:	6962      	ldr	r2, [r4, #20]
  40b8f6:	1c53      	adds	r3, r2, #1
  40b8f8:	6163      	str	r3, [r4, #20]
  40b8fa:	69e3      	ldr	r3, [r4, #28]
  40b8fc:	685b      	ldr	r3, [r3, #4]
  40b8fe:	0a1b      	lsrs	r3, r3, #8
  40b900:	548b      	strb	r3, [r1, r2]
                put_byte(s, (Byte)((s->gzhead->time >> 16) & 0xff));
  40b902:	68a2      	ldr	r2, [r4, #8]
  40b904:	6963      	ldr	r3, [r4, #20]
  40b906:	1c59      	adds	r1, r3, #1
  40b908:	6161      	str	r1, [r4, #20]
  40b90a:	69e1      	ldr	r1, [r4, #28]
  40b90c:	88c9      	ldrh	r1, [r1, #6]
  40b90e:	54d1      	strb	r1, [r2, r3]
                put_byte(s, (Byte)((s->gzhead->time >> 24) & 0xff));
  40b910:	68a2      	ldr	r2, [r4, #8]
  40b912:	6963      	ldr	r3, [r4, #20]
  40b914:	1c59      	adds	r1, r3, #1
  40b916:	6161      	str	r1, [r4, #20]
  40b918:	69e1      	ldr	r1, [r4, #28]
  40b91a:	79c9      	ldrb	r1, [r1, #7]
  40b91c:	54d1      	strb	r1, [r2, r3]
                put_byte(s, s->level == 9 ? 2 :
  40b91e:	68a1      	ldr	r1, [r4, #8]
  40b920:	6963      	ldr	r3, [r4, #20]
  40b922:	1c5a      	adds	r2, r3, #1
  40b924:	6162      	str	r2, [r4, #20]
  40b926:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  40b92a:	2a09      	cmp	r2, #9
  40b92c:	d069      	beq.n	40ba02 <.LBE43+0x6e>
  40b92e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
  40b932:	2801      	cmp	r0, #1
  40b934:	dc67      	bgt.n	40ba06 <.LBE43+0x72>
  40b936:	2a01      	cmp	r2, #1
  40b938:	dd65      	ble.n	40ba06 <.LBE43+0x72>
  40b93a:	2200      	movs	r2, #0
  40b93c:	54ca      	strb	r2, [r1, r3]
                put_byte(s, s->gzhead->os & 0xff);
  40b93e:	68a2      	ldr	r2, [r4, #8]
  40b940:	6963      	ldr	r3, [r4, #20]
  40b942:	1c59      	adds	r1, r3, #1
  40b944:	6161      	str	r1, [r4, #20]
  40b946:	69e1      	ldr	r1, [r4, #28]
  40b948:	68c9      	ldr	r1, [r1, #12]
  40b94a:	54d1      	strb	r1, [r2, r3]
                if (s->gzhead->extra != Z_NULL) {
  40b94c:	69e2      	ldr	r2, [r4, #28]
  40b94e:	6913      	ldr	r3, [r2, #16]
  40b950:	b16b      	cbz	r3, 40b96e <.LVL376+0xfa>
                    put_byte(s, s->gzhead->extra_len & 0xff);
  40b952:	68a1      	ldr	r1, [r4, #8]
  40b954:	6963      	ldr	r3, [r4, #20]
  40b956:	1c58      	adds	r0, r3, #1
  40b958:	6160      	str	r0, [r4, #20]
  40b95a:	6952      	ldr	r2, [r2, #20]
  40b95c:	54ca      	strb	r2, [r1, r3]
                    put_byte(s, (s->gzhead->extra_len >> 8) & 0xff);
  40b95e:	68a1      	ldr	r1, [r4, #8]
  40b960:	6962      	ldr	r2, [r4, #20]
  40b962:	1c53      	adds	r3, r2, #1
  40b964:	6163      	str	r3, [r4, #20]
  40b966:	69e3      	ldr	r3, [r4, #28]
  40b968:	695b      	ldr	r3, [r3, #20]
  40b96a:	0a1b      	lsrs	r3, r3, #8
  40b96c:	548b      	strb	r3, [r1, r2]
                if (s->gzhead->hcrc)
  40b96e:	69e3      	ldr	r3, [r4, #28]
  40b970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40b972:	2b00      	cmp	r3, #0
  40b974:	d149      	bne.n	40ba0a <.LBE43+0x76>
                s->gzindex = 0;
  40b976:	2300      	movs	r3, #0
  40b978:	6223      	str	r3, [r4, #32]
                s->status = EXTRA_STATE;
  40b97a:	2345      	movs	r3, #69	; 0x45
  40b97c:	6063      	str	r3, [r4, #4]
        if (s->gzhead->extra != Z_NULL) {
  40b97e:	69e0      	ldr	r0, [r4, #28]
  40b980:	6903      	ldr	r3, [r0, #16]
  40b982:	2b00      	cmp	r3, #0
  40b984:	f000 80a9 	beq.w	40bada <.LBE47>

0040b988 <.LBB43>:
            uInt beg = s->pending;  /* start of bytes to update crc */
  40b988:	6961      	ldr	r1, [r4, #20]

0040b98a <.LVL377>:
            while (s->gzindex < (s->gzhead->extra_len & 0xffff)) {
  40b98a:	8a83      	ldrh	r3, [r0, #20]
  40b98c:	6a22      	ldr	r2, [r4, #32]
  40b98e:	429a      	cmp	r2, r3
  40b990:	d375      	bcc.n	40ba7e <.LVL390+0x26>
  40b992:	e08a      	b.n	40baaa <.LVL394>

0040b994 <.LBE43>:
                put_byte(s, 0);
  40b994:	68a1      	ldr	r1, [r4, #8]
  40b996:	6962      	ldr	r2, [r4, #20]
  40b998:	1c53      	adds	r3, r2, #1
  40b99a:	6163      	str	r3, [r4, #20]
  40b99c:	2300      	movs	r3, #0
  40b99e:	548b      	strb	r3, [r1, r2]
                put_byte(s, 0);
  40b9a0:	68a1      	ldr	r1, [r4, #8]
  40b9a2:	6962      	ldr	r2, [r4, #20]
  40b9a4:	1c50      	adds	r0, r2, #1
  40b9a6:	6160      	str	r0, [r4, #20]
  40b9a8:	548b      	strb	r3, [r1, r2]
                put_byte(s, 0);
  40b9aa:	68a1      	ldr	r1, [r4, #8]
  40b9ac:	6962      	ldr	r2, [r4, #20]
  40b9ae:	1c50      	adds	r0, r2, #1
  40b9b0:	6160      	str	r0, [r4, #20]
  40b9b2:	548b      	strb	r3, [r1, r2]
                put_byte(s, 0);
  40b9b4:	68a1      	ldr	r1, [r4, #8]
  40b9b6:	6962      	ldr	r2, [r4, #20]
  40b9b8:	1c50      	adds	r0, r2, #1
  40b9ba:	6160      	str	r0, [r4, #20]
  40b9bc:	548b      	strb	r3, [r1, r2]
                put_byte(s, 0);
  40b9be:	68a1      	ldr	r1, [r4, #8]
  40b9c0:	6962      	ldr	r2, [r4, #20]
  40b9c2:	1c50      	adds	r0, r2, #1
  40b9c4:	6160      	str	r0, [r4, #20]
  40b9c6:	548b      	strb	r3, [r1, r2]
                put_byte(s, s->level == 9 ? 2 :
  40b9c8:	68a1      	ldr	r1, [r4, #8]
  40b9ca:	6962      	ldr	r2, [r4, #20]
  40b9cc:	1c53      	adds	r3, r2, #1
  40b9ce:	6163      	str	r3, [r4, #20]
  40b9d0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
  40b9d4:	2b09      	cmp	r3, #9
  40b9d6:	d010      	beq.n	40b9fa <.LBE43+0x66>
  40b9d8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
  40b9dc:	2801      	cmp	r0, #1
  40b9de:	dc0e      	bgt.n	40b9fe <.LBE43+0x6a>
  40b9e0:	2b01      	cmp	r3, #1
  40b9e2:	dd0c      	ble.n	40b9fe <.LBE43+0x6a>
  40b9e4:	2300      	movs	r3, #0
  40b9e6:	548b      	strb	r3, [r1, r2]
                put_byte(s, OS_CODE);
  40b9e8:	68a2      	ldr	r2, [r4, #8]
  40b9ea:	6963      	ldr	r3, [r4, #20]
  40b9ec:	1c59      	adds	r1, r3, #1
  40b9ee:	6161      	str	r1, [r4, #20]
  40b9f0:	2103      	movs	r1, #3
  40b9f2:	54d1      	strb	r1, [r2, r3]
                s->status = BUSY_STATE;
  40b9f4:	2371      	movs	r3, #113	; 0x71
  40b9f6:	6063      	str	r3, [r4, #4]
  40b9f8:	e6cf      	b.n	40b79a <.LVL355+0x10>
                put_byte(s, s->level == 9 ? 2 :
  40b9fa:	2302      	movs	r3, #2
  40b9fc:	e7f3      	b.n	40b9e6 <.LBE43+0x52>
  40b9fe:	2304      	movs	r3, #4
  40ba00:	e7f1      	b.n	40b9e6 <.LBE43+0x52>
                put_byte(s, s->level == 9 ? 2 :
  40ba02:	2202      	movs	r2, #2
  40ba04:	e79a      	b.n	40b93c <.LVL376+0xc8>
  40ba06:	2204      	movs	r2, #4
  40ba08:	e798      	b.n	40b93c <.LVL376+0xc8>
                    strm->adler = crc32(strm->adler, s->pending_buf,
  40ba0a:	6962      	ldr	r2, [r4, #20]
  40ba0c:	68a1      	ldr	r1, [r4, #8]
  40ba0e:	6b28      	ldr	r0, [r5, #48]	; 0x30
  40ba10:	f007 fe78 	bl	413704 <.LFE21>

0040ba14 <.LVL379>:
  40ba14:	6328      	str	r0, [r5, #48]	; 0x30
  40ba16:	e7ae      	b.n	40b976 <.LVL376+0x102>

0040ba18 <.LBB44>:
            if (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2)
  40ba18:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  40ba1c:	2a01      	cmp	r2, #1
  40ba1e:	dd06      	ble.n	40ba2e <.LVL382>
            else if (s->level < 6)
  40ba20:	2a05      	cmp	r2, #5
  40ba22:	dd06      	ble.n	40ba32 <.LVL384>
                level_flags = 3;
  40ba24:	2a06      	cmp	r2, #6
  40ba26:	bf0c      	ite	eq
  40ba28:	2102      	moveq	r1, #2

0040ba2a <.LVL381>:
  40ba2a:	2103      	movne	r1, #3
  40ba2c:	e6fd      	b.n	40b82a <.LVL363>

0040ba2e <.LVL382>:
                level_flags = 0;
  40ba2e:	2100      	movs	r1, #0

0040ba30 <.LVL383>:
  40ba30:	e6fb      	b.n	40b82a <.LVL363>

0040ba32 <.LVL384>:
                level_flags = 1;
  40ba32:	2101      	movs	r1, #1

0040ba34 <.LVL385>:
  40ba34:	e6f9      	b.n	40b82a <.LVL363>

0040ba36 <.LVL386>:
                putShortMSB(s, (uInt)(strm->adler >> 16));
  40ba36:	8e69      	ldrh	r1, [r5, #50]	; 0x32
  40ba38:	4620      	mov	r0, r4
  40ba3a:	f011 fdeb 	bl	41d614 <.LFE197>

0040ba3e <.LVL387>:
                putShortMSB(s, (uInt)(strm->adler & 0xffff));
  40ba3e:	8e29      	ldrh	r1, [r5, #48]	; 0x30
  40ba40:	4620      	mov	r0, r4
  40ba42:	f011 fde7 	bl	41d614 <.LFE197>

0040ba46 <.LVL388>:
  40ba46:	e709      	b.n	40b85c <.LVL371+0x8>
  40ba48:	0041d328 	.word	0x0041d328
  40ba4c:	08421085 	.word	0x08421085

0040ba50 <.LBB45>:
                    flush_pending(strm);
  40ba50:	4628      	mov	r0, r5
  40ba52:	f010 fc45 	bl	41c2e0 <.LFE41>

0040ba56 <.LVL389>:
                    beg = s->pending;
  40ba56:	6961      	ldr	r1, [r4, #20]

0040ba58 <.LVL390>:
                    if (s->pending == s->pending_buf_size)
  40ba58:	68e3      	ldr	r3, [r4, #12]
  40ba5a:	4299      	cmp	r1, r3
  40ba5c:	d025      	beq.n	40baaa <.LVL394>
                put_byte(s, s->gzhead->extra[s->gzindex]);
  40ba5e:	6963      	ldr	r3, [r4, #20]
  40ba60:	1c58      	adds	r0, r3, #1
  40ba62:	6160      	str	r0, [r4, #20]
  40ba64:	69e0      	ldr	r0, [r4, #28]
  40ba66:	6902      	ldr	r2, [r0, #16]
  40ba68:	6a20      	ldr	r0, [r4, #32]
  40ba6a:	5c10      	ldrb	r0, [r2, r0]
  40ba6c:	68a2      	ldr	r2, [r4, #8]
  40ba6e:	54d0      	strb	r0, [r2, r3]
                s->gzindex++;
  40ba70:	6a23      	ldr	r3, [r4, #32]
  40ba72:	3301      	adds	r3, #1
  40ba74:	6223      	str	r3, [r4, #32]
            while (s->gzindex < (s->gzhead->extra_len & 0xffff)) {
  40ba76:	69e0      	ldr	r0, [r4, #28]
  40ba78:	8a82      	ldrh	r2, [r0, #20]
  40ba7a:	429a      	cmp	r2, r3
  40ba7c:	d910      	bls.n	40baa0 <.LVL393>
                if (s->pending == s->pending_buf_size) {
  40ba7e:	6962      	ldr	r2, [r4, #20]
  40ba80:	68e3      	ldr	r3, [r4, #12]
  40ba82:	429a      	cmp	r2, r3
  40ba84:	d1eb      	bne.n	40ba5e <.LVL390+0x6>
                    if (s->gzhead->hcrc && s->pending > beg)
  40ba86:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  40ba88:	2b00      	cmp	r3, #0
  40ba8a:	d0e1      	beq.n	40ba50 <.LBB45>
  40ba8c:	428a      	cmp	r2, r1
  40ba8e:	d9df      	bls.n	40ba50 <.LBB45>
                        strm->adler = crc32(strm->adler, s->pending_buf + beg,
  40ba90:	68a3      	ldr	r3, [r4, #8]
  40ba92:	1a52      	subs	r2, r2, r1
  40ba94:	4419      	add	r1, r3

0040ba96 <.LVL391>:
  40ba96:	6b28      	ldr	r0, [r5, #48]	; 0x30
  40ba98:	f007 fe34 	bl	413704 <.LFE21>

0040ba9c <.LVL392>:
  40ba9c:	6328      	str	r0, [r5, #48]	; 0x30
  40ba9e:	e7d7      	b.n	40ba50 <.LBB45>

0040baa0 <.LVL393>:
            if (s->gzhead->hcrc && s->pending > beg)
  40baa0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  40baa2:	b113      	cbz	r3, 40baaa <.LVL394>
  40baa4:	6962      	ldr	r2, [r4, #20]
  40baa6:	4291      	cmp	r1, r2
  40baa8:	d30f      	bcc.n	40baca <.LBB47>

0040baaa <.LVL394>:
            if (s->gzindex == s->gzhead->extra_len) {
  40baaa:	69e3      	ldr	r3, [r4, #28]
  40baac:	6a22      	ldr	r2, [r4, #32]
  40baae:	695b      	ldr	r3, [r3, #20]
  40bab0:	429a      	cmp	r2, r3
  40bab2:	f47f ae6e 	bne.w	40b792 <.LVL355+0x8>
                s->gzindex = 0;
  40bab6:	2300      	movs	r3, #0
  40bab8:	6223      	str	r3, [r4, #32]
                s->status = NAME_STATE;
  40baba:	2349      	movs	r3, #73	; 0x49
  40babc:	6063      	str	r3, [r4, #4]

0040babe <.LBE45>:
        if (s->gzhead->name != Z_NULL) {
  40babe:	69e3      	ldr	r3, [r4, #28]
  40bac0:	69db      	ldr	r3, [r3, #28]
  40bac2:	2b00      	cmp	r3, #0
  40bac4:	d040      	beq.n	40bb48 <.LBE48>

0040bac6 <.LBB46>:
            uInt beg = s->pending;  /* start of bytes to update crc */
  40bac6:	6960      	ldr	r0, [r4, #20]

0040bac8 <.LVL395>:
  40bac8:	e020      	b.n	40bb0c <.LVL402>

0040baca <.LBB47>:
                strm->adler = crc32(strm->adler, s->pending_buf + beg,
  40baca:	68a3      	ldr	r3, [r4, #8]
  40bacc:	1a52      	subs	r2, r2, r1
  40bace:	4419      	add	r1, r3

0040bad0 <.LVL397>:
  40bad0:	6b28      	ldr	r0, [r5, #48]	; 0x30
  40bad2:	f007 fe17 	bl	413704 <.LFE21>

0040bad6 <.LVL398>:
  40bad6:	6328      	str	r0, [r5, #48]	; 0x30
  40bad8:	e7e7      	b.n	40baaa <.LVL394>

0040bada <.LBE47>:
            s->status = NAME_STATE;
  40bada:	2349      	movs	r3, #73	; 0x49
  40badc:	6063      	str	r3, [r4, #4]
  40bade:	e7ee      	b.n	40babe <.LBE45>

0040bae0 <.LBB48>:
                    flush_pending(strm);
  40bae0:	4628      	mov	r0, r5
  40bae2:	f010 fbfd 	bl	41c2e0 <.LFE41>

0040bae6 <.LVL399>:
                    beg = s->pending;
  40bae6:	6960      	ldr	r0, [r4, #20]

0040bae8 <.LVL400>:
                    if (s->pending == s->pending_buf_size) {
  40bae8:	68e3      	ldr	r3, [r4, #12]
  40baea:	4298      	cmp	r0, r3
  40baec:	f43f ae55 	beq.w	40b79a <.LVL355+0x10>
                val = s->gzhead->name[s->gzindex++];
  40baf0:	69e3      	ldr	r3, [r4, #28]
  40baf2:	69da      	ldr	r2, [r3, #28]
  40baf4:	6a23      	ldr	r3, [r4, #32]
  40baf6:	1c59      	adds	r1, r3, #1
  40baf8:	6221      	str	r1, [r4, #32]
  40bafa:	5cd3      	ldrb	r3, [r2, r3]

0040bafc <.LVL401>:
                put_byte(s, val);
  40bafc:	6962      	ldr	r2, [r4, #20]
  40bafe:	1c51      	adds	r1, r2, #1
  40bb00:	6161      	str	r1, [r4, #20]
  40bb02:	68a1      	ldr	r1, [r4, #8]
  40bb04:	548b      	strb	r3, [r1, r2]
            } while (val != 0);
  40bb06:	2b00      	cmp	r3, #0
  40bb08:	f000 830f 	beq.w	40c12a <.LBB72>

0040bb0c <.LVL402>:
                if (s->pending == s->pending_buf_size) {
  40bb0c:	6962      	ldr	r2, [r4, #20]
  40bb0e:	68e3      	ldr	r3, [r4, #12]
  40bb10:	429a      	cmp	r2, r3
  40bb12:	d1ed      	bne.n	40baf0 <.LVL400+0x8>
                    if (s->gzhead->hcrc && s->pending > beg)
  40bb14:	69e3      	ldr	r3, [r4, #28]
  40bb16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40bb18:	2b00      	cmp	r3, #0
  40bb1a:	d0e1      	beq.n	40bae0 <.LBB48>
  40bb1c:	4290      	cmp	r0, r2
  40bb1e:	d2df      	bcs.n	40bae0 <.LBB48>
                        strm->adler = crc32(strm->adler, s->pending_buf + beg,
  40bb20:	68a1      	ldr	r1, [r4, #8]
  40bb22:	1a12      	subs	r2, r2, r0
  40bb24:	4401      	add	r1, r0
  40bb26:	6b28      	ldr	r0, [r5, #48]	; 0x30

0040bb28 <.LVL403>:
  40bb28:	f007 fdec 	bl	413704 <.LFE21>

0040bb2c <.LVL404>:
  40bb2c:	6328      	str	r0, [r5, #48]	; 0x30
  40bb2e:	e7d7      	b.n	40bae0 <.LBB48>

0040bb30 <.LVL405>:
            if (s->gzhead->hcrc && s->pending > beg)
  40bb30:	6962      	ldr	r2, [r4, #20]
  40bb32:	4290      	cmp	r0, r2
  40bb34:	f080 82fe 	bcs.w	40c134 <.LVL525>
                strm->adler = crc32(strm->adler, s->pending_buf + beg,
  40bb38:	68a1      	ldr	r1, [r4, #8]
  40bb3a:	1a12      	subs	r2, r2, r0
  40bb3c:	4401      	add	r1, r0
  40bb3e:	6b28      	ldr	r0, [r5, #48]	; 0x30

0040bb40 <.LVL406>:
  40bb40:	f007 fde0 	bl	413704 <.LFE21>

0040bb44 <.LVL407>:
  40bb44:	6328      	str	r0, [r5, #48]	; 0x30
  40bb46:	e2f5      	b.n	40c134 <.LVL525>

0040bb48 <.LBE48>:
            s->status = COMMENT_STATE;
  40bb48:	235b      	movs	r3, #91	; 0x5b
  40bb4a:	6063      	str	r3, [r4, #4]
  40bb4c:	e2f6      	b.n	40c13c <.LBE72>

0040bb4e <.LBB49>:
                    flush_pending(strm);
  40bb4e:	4628      	mov	r0, r5
  40bb50:	f010 fbc6 	bl	41c2e0 <.LFE41>

0040bb54 <.LVL410>:
                    beg = s->pending;
  40bb54:	6960      	ldr	r0, [r4, #20]

0040bb56 <.LVL411>:
                    if (s->pending == s->pending_buf_size) {
  40bb56:	68e3      	ldr	r3, [r4, #12]
  40bb58:	4298      	cmp	r0, r3
  40bb5a:	f43f ae22 	beq.w	40b7a2 <.LVL355+0x18>
                val = s->gzhead->comment[s->gzindex++];
  40bb5e:	69e3      	ldr	r3, [r4, #28]
  40bb60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  40bb62:	6a23      	ldr	r3, [r4, #32]
  40bb64:	1c59      	adds	r1, r3, #1
  40bb66:	6221      	str	r1, [r4, #32]
  40bb68:	5cd3      	ldrb	r3, [r2, r3]

0040bb6a <.LVL412>:
                put_byte(s, val);
  40bb6a:	6962      	ldr	r2, [r4, #20]
  40bb6c:	1c51      	adds	r1, r2, #1
  40bb6e:	6161      	str	r1, [r4, #20]
  40bb70:	68a1      	ldr	r1, [r4, #8]
  40bb72:	548b      	strb	r3, [r1, r2]
            } while (val != 0);
  40bb74:	2b00      	cmp	r3, #0
  40bb76:	f000 82e8 	beq.w	40c14a <.LVL528>

0040bb7a <.LVL413>:
                if (s->pending == s->pending_buf_size) {
  40bb7a:	6962      	ldr	r2, [r4, #20]
  40bb7c:	68e3      	ldr	r3, [r4, #12]
  40bb7e:	429a      	cmp	r2, r3
  40bb80:	d1ed      	bne.n	40bb5e <.LVL411+0x8>
                    if (s->gzhead->hcrc && s->pending > beg)
  40bb82:	69e3      	ldr	r3, [r4, #28]
  40bb84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40bb86:	2b00      	cmp	r3, #0
  40bb88:	d0e1      	beq.n	40bb4e <.LBB49>
  40bb8a:	4290      	cmp	r0, r2
  40bb8c:	d2df      	bcs.n	40bb4e <.LBB49>
                        strm->adler = crc32(strm->adler, s->pending_buf + beg,
  40bb8e:	68a1      	ldr	r1, [r4, #8]
  40bb90:	1a12      	subs	r2, r2, r0
  40bb92:	4401      	add	r1, r0
  40bb94:	6b28      	ldr	r0, [r5, #48]	; 0x30

0040bb96 <.LVL414>:
  40bb96:	f007 fdb5 	bl	413704 <.LFE21>

0040bb9a <.LVL415>:
  40bb9a:	6328      	str	r0, [r5, #48]	; 0x30
  40bb9c:	e7d7      	b.n	40bb4e <.LBB49>

0040bb9e <.LVL416>:
            if (s->gzhead->hcrc && s->pending > beg)
  40bb9e:	6962      	ldr	r2, [r4, #20]
  40bba0:	4290      	cmp	r0, r2
  40bba2:	f080 82d7 	bcs.w	40c154 <.LVL529>
                strm->adler = crc32(strm->adler, s->pending_buf + beg,
  40bba6:	68a1      	ldr	r1, [r4, #8]
  40bba8:	1a12      	subs	r2, r2, r0
  40bbaa:	4401      	add	r1, r0
  40bbac:	6b28      	ldr	r0, [r5, #48]	; 0x30

0040bbae <.LVL417>:
  40bbae:	f007 fda9 	bl	413704 <.LFE21>

0040bbb2 <.LVL418>:
  40bbb2:	6328      	str	r0, [r5, #48]	; 0x30
  40bbb4:	e2ce      	b.n	40c154 <.LVL529>

0040bbb6 <.LBE49>:
            s->status = HCRC_STATE;
  40bbb6:	2367      	movs	r3, #103	; 0x67
  40bbb8:	6063      	str	r3, [r4, #4]
  40bbba:	e2cd      	b.n	40c158 <.LBE73>
                flush_pending(strm);
  40bbbc:	4628      	mov	r0, r5
  40bbbe:	f010 fb8f 	bl	41c2e0 <.LFE41>

0040bbc2 <.LVL420>:
            if (s->pending + 2 <= s->pending_buf_size) {
  40bbc2:	6963      	ldr	r3, [r4, #20]
  40bbc4:	1c99      	adds	r1, r3, #2
  40bbc6:	68e2      	ldr	r2, [r4, #12]
  40bbc8:	4291      	cmp	r1, r2
  40bbca:	f63f adee 	bhi.w	40b7aa <.LVL355+0x20>
  40bbce:	e2ce      	b.n	40c16e <.LBE73+0x16>
            s->status = BUSY_STATE;
  40bbd0:	2371      	movs	r3, #113	; 0x71
  40bbd2:	6063      	str	r3, [r4, #4]
  40bbd4:	e5e9      	b.n	40b7aa <.LVL355+0x20>
        flush_pending(strm);
  40bbd6:	4628      	mov	r0, r5
  40bbd8:	f010 fb82 	bl	41c2e0 <.LFE41>

0040bbdc <.LVL421>:
        if (strm->avail_out == 0) {
  40bbdc:	692b      	ldr	r3, [r5, #16]
  40bbde:	b1ab      	cbz	r3, 40bc0c <.LBE50>

0040bbe0 <.LVL422>:
    }

    /* User must not provide more input after the first FINISH: */
    if (s->status == FINISH_STATE && strm->avail_in != 0) {
  40bbe0:	6863      	ldr	r3, [r4, #4]
  40bbe2:	f240 229a 	movw	r2, #666	; 0x29a
  40bbe6:	4293      	cmp	r3, r2
  40bbe8:	d016      	beq.n	40bc18 <.LVL424>
        ERR_RETURN(strm, Z_BUF_ERROR);
    }

    /* Start a new block or continue the current one.
     */
    if (strm->avail_in != 0 || s->lookahead != 0 ||
  40bbea:	686a      	ldr	r2, [r5, #4]
  40bbec:	2a00      	cmp	r2, #0
  40bbee:	f040 82da 	bne.w	40c1a6 <.LBB74>
  40bbf2:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40bbf4:	2a00      	cmp	r2, #0
  40bbf6:	f040 82d6 	bne.w	40c1a6 <.LBB74>
        (flush != Z_NO_FLUSH && s->status != FINISH_STATE)) {
  40bbfa:	f240 229a 	movw	r2, #666	; 0x29a
  40bbfe:	4293      	cmp	r3, r2
  40bc00:	f000 82f0 	beq.w	40c1e4 <.LBE74>
  40bc04:	2f00      	cmp	r7, #0
  40bc06:	f040 82ce 	bne.w	40c1a6 <.LBB74>

0040bc0a <.LBB50>:
  40bc0a:	e2eb      	b.n	40c1e4 <.LBE74>

0040bc0c <.LBE50>:
            s->last_flush = -1;
  40bc0c:	f04f 33ff 	mov.w	r3, #4294967295
  40bc10:	62a3      	str	r3, [r4, #40]	; 0x28
            return Z_OK;
  40bc12:	2000      	movs	r0, #0
  40bc14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040bc18 <.LVL424>:
    if (s->status == FINISH_STATE && strm->avail_in != 0) {
  40bc18:	686b      	ldr	r3, [r5, #4]
  40bc1a:	b923      	cbnz	r3, 40bc26 <.LVL424+0xe>
    if (strm->avail_in != 0 || s->lookahead != 0 ||
  40bc1c:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40bc1e:	2b00      	cmp	r3, #0
  40bc20:	f040 82c1 	bne.w	40c1a6 <.LBB74>
  40bc24:	e2de      	b.n	40c1e4 <.LBE74>
        ERR_RETURN(strm, Z_BUF_ERROR);
  40bc26:	4b86      	ldr	r3, [pc, #536]	; (40be40 <.LVL459+0x1e>)
  40bc28:	69db      	ldr	r3, [r3, #28]
  40bc2a:	61ab      	str	r3, [r5, #24]
  40bc2c:	f06f 0004 	mvn.w	r0, #4
  40bc30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040bc34 <.LBB51>:
        }

        /* Output a literal byte */
        s->match_length = 0;
        Tracevv((stderr,"%c", s->window[s->strstart]));
        _tr_tally_lit (s, s->window[s->strstart], bflush);
  40bc34:	f241 68a4 	movw	r8, #5796	; 0x16a4
  40bc38:	44a0      	add	r8, r4
  40bc3a:	e069      	b.n	40bd10 <.LVL439+0xa>

0040bc3c <.LBE53>:
        s->match_length = 0;
  40bc3c:	6626      	str	r6, [r4, #96]	; 0x60

0040bc3e <.LBB54>:
        _tr_tally_lit (s, s->window[s->strstart], bflush);
  40bc3e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40bc40:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40bc42:	5cd3      	ldrb	r3, [r2, r3]

0040bc44 <.LVL426>:
  40bc44:	f504 51b5 	add.w	r1, r4, #5792	; 0x16a0
  40bc48:	6808      	ldr	r0, [r1, #0]
  40bc4a:	f8d8 2000 	ldr.w	r2, [r8]
  40bc4e:	f822 6010 	strh.w	r6, [r2, r0, lsl #1]
  40bc52:	f241 6298 	movw	r2, #5784	; 0x1698
  40bc56:	58a0      	ldr	r0, [r4, r2]
  40bc58:	680a      	ldr	r2, [r1, #0]
  40bc5a:	f102 0e01 	add.w	lr, r2, #1
  40bc5e:	f8c1 e000 	str.w	lr, [r1]
  40bc62:	5483      	strb	r3, [r0, r2]
  40bc64:	eb04 0383 	add.w	r3, r4, r3, lsl #2

0040bc68 <.LVL427>:
  40bc68:	f8b3 2094 	ldrh.w	r2, [r3, #148]	; 0x94

0040bc6c <.LVL428>:
  40bc6c:	3201      	adds	r2, #1
  40bc6e:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

0040bc72 <.LVL429>:
  40bc72:	6809      	ldr	r1, [r1, #0]
  40bc74:	f241 639c 	movw	r3, #5788	; 0x169c
  40bc78:	58e3      	ldr	r3, [r4, r3]
  40bc7a:	3b01      	subs	r3, #1

0040bc7c <.LBE54>:
        s->lookahead--;
  40bc7c:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40bc7e:	3a01      	subs	r2, #1
  40bc80:	6762      	str	r2, [r4, #116]	; 0x74
        s->strstart++;
  40bc82:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  40bc84:	3201      	adds	r2, #1
  40bc86:	66e2      	str	r2, [r4, #108]	; 0x6c
        if (bflush) FLUSH_BLOCK(s, 0);
  40bc88:	4299      	cmp	r1, r3
  40bc8a:	d02d      	beq.n	40bce8 <.LVL435>

0040bc8c <.LVL431>:
        if (s->lookahead == 0) {
  40bc8c:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40bc8e:	2b00      	cmp	r3, #0
  40bc90:	d1d4      	bne.n	40bc3c <.LBE53>
            fill_window(s);
  40bc92:	4620      	mov	r0, r4
  40bc94:	f008 ffb6 	bl	414c04 <fill_window>

0040bc98 <.LVL432>:
            if (s->lookahead == 0) {
  40bc98:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40bc9a:	2b00      	cmp	r3, #0
  40bc9c:	d1ce      	bne.n	40bc3c <.LBE53>
                if (flush == Z_NO_FLUSH)
  40bc9e:	2f00      	cmp	r7, #0
  40bca0:	f000 817d 	beq.w	40bf9e <.LBE66>
    }
    s->insert = 0;
  40bca4:	2200      	movs	r2, #0
  40bca6:	f241 63b4 	movw	r3, #5812	; 0x16b4
  40bcaa:	50e2      	str	r2, [r4, r3]
    if (flush == Z_FINISH) {
  40bcac:	2f04      	cmp	r7, #4
  40bcae:	d033      	beq.n	40bd18 <.LVL442>
        FLUSH_BLOCK(s, 1);
        return finish_done;
    }
    if (s->last_lit)
  40bcb0:	f504 53b5 	add.w	r3, r4, #5792	; 0x16a0
  40bcb4:	681b      	ldr	r3, [r3, #0]
  40bcb6:	2b00      	cmp	r3, #0
  40bcb8:	f000 819b 	beq.w	40bff2 <.LBE68>
        FLUSH_BLOCK(s, 0);
  40bcbc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  40bcbe:	2a00      	cmp	r2, #0
  40bcc0:	db43      	blt.n	40bd4a <.LVL444+0x12>
  40bcc2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  40bcc4:	4411      	add	r1, r2
  40bcc6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  40bcc8:	2300      	movs	r3, #0
  40bcca:	1a82      	subs	r2, r0, r2
  40bccc:	4620      	mov	r0, r4
  40bcce:	f003 fa43 	bl	40f158 <_tr_flush_block>

0040bcd2 <.LVL433>:
  40bcd2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40bcd4:	65e3      	str	r3, [r4, #92]	; 0x5c
  40bcd6:	6820      	ldr	r0, [r4, #0]
  40bcd8:	f010 fb02 	bl	41c2e0 <.LFE41>

0040bcdc <.LVL434>:
  40bcdc:	6823      	ldr	r3, [r4, #0]
  40bcde:	6918      	ldr	r0, [r3, #16]
        if (bflush) FLUSH_BLOCK(s, 0);
  40bce0:	3000      	adds	r0, #0
  40bce2:	bf18      	it	ne
  40bce4:	2001      	movne	r0, #1
  40bce6:	e271      	b.n	40c1cc <.LVL533>

0040bce8 <.LVL435>:
  40bce8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  40bcea:	2800      	cmp	r0, #0
  40bcec:	db12      	blt.n	40bd14 <.LVL440>
  40bcee:	6ba1      	ldr	r1, [r4, #56]	; 0x38

0040bcf0 <.LVL436>:
  40bcf0:	4401      	add	r1, r0
  40bcf2:	2300      	movs	r3, #0

0040bcf4 <.LVL437>:
  40bcf4:	1a12      	subs	r2, r2, r0
  40bcf6:	4620      	mov	r0, r4
  40bcf8:	f003 fa2e 	bl	40f158 <_tr_flush_block>

0040bcfc <.LVL438>:
  40bcfc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40bcfe:	65e3      	str	r3, [r4, #92]	; 0x5c
  40bd00:	6820      	ldr	r0, [r4, #0]
  40bd02:	f010 faed 	bl	41c2e0 <.LFE41>

0040bd06 <.LVL439>:
  40bd06:	6823      	ldr	r3, [r4, #0]
  40bd08:	691b      	ldr	r3, [r3, #16]
  40bd0a:	2b00      	cmp	r3, #0
  40bd0c:	f000 8147 	beq.w	40bf9e <.LBE66>
        s->match_length = 0;
  40bd10:	2600      	movs	r6, #0
  40bd12:	e7bb      	b.n	40bc8c <.LVL431>

0040bd14 <.LVL440>:
        if (bflush) FLUSH_BLOCK(s, 0);
  40bd14:	2100      	movs	r1, #0

0040bd16 <.LVL441>:
  40bd16:	e7ec      	b.n	40bcf2 <.LVL436+0x2>

0040bd18 <.LVL442>:
        FLUSH_BLOCK(s, 1);
  40bd18:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  40bd1a:	2a00      	cmp	r2, #0
  40bd1c:	db13      	blt.n	40bd46 <.LVL444+0xe>
  40bd1e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  40bd20:	4411      	add	r1, r2
  40bd22:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  40bd24:	2301      	movs	r3, #1
  40bd26:	1a82      	subs	r2, r0, r2
  40bd28:	4620      	mov	r0, r4
  40bd2a:	f003 fa15 	bl	40f158 <_tr_flush_block>

0040bd2e <.LVL443>:
  40bd2e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40bd30:	65e3      	str	r3, [r4, #92]	; 0x5c
  40bd32:	6820      	ldr	r0, [r4, #0]
  40bd34:	f010 fad4 	bl	41c2e0 <.LFE41>

0040bd38 <.LVL444>:
  40bd38:	6823      	ldr	r3, [r4, #0]
  40bd3a:	691b      	ldr	r3, [r3, #16]
        return finish_done;
  40bd3c:	2b00      	cmp	r3, #0
  40bd3e:	bf0c      	ite	eq
  40bd40:	2002      	moveq	r0, #2
  40bd42:	2003      	movne	r0, #3
  40bd44:	e14d      	b.n	40bfe2 <.LBE67>
        FLUSH_BLOCK(s, 1);
  40bd46:	2100      	movs	r1, #0
  40bd48:	e7eb      	b.n	40bd22 <.LVL442+0xa>
        FLUSH_BLOCK(s, 0);
  40bd4a:	2100      	movs	r1, #0
  40bd4c:	e7bb      	b.n	40bcc6 <.LVL432+0x2e>

0040bd4e <.LBB56>:
            _tr_tally_lit (s, s->window[s->strstart], bflush);
  40bd4e:	f241 66a4 	movw	r6, #5796	; 0x16a4
  40bd52:	4426      	add	r6, r4

0040bd54 <.LBB59>:
            _tr_tally_dist(s, 1, s->match_length - MIN_MATCH, bflush);
  40bd54:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 40be44 <.LVL459+0x22>
  40bd58:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 40be48 <.LVL459+0x26>
  40bd5c:	e0b8      	b.n	40bed0 <.LVL473>

0040bd5e <.LBE59>:
            fill_window(s);
  40bd5e:	4620      	mov	r0, r4
  40bd60:	f008 ff50 	bl	414c04 <fill_window>

0040bd64 <.LVL445>:
            if (s->lookahead <= MAX_MATCH && flush == Z_NO_FLUSH) {
  40bd64:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40bd66:	b91f      	cbnz	r7, 40bd70 <.LVL445+0xc>
  40bd68:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
  40bd6c:	f240 8117 	bls.w	40bf9e <.LBE66>
            if (s->lookahead == 0) break; /* flush the current block */
  40bd70:	2b00      	cmp	r3, #0
  40bd72:	f040 80b2 	bne.w	40beda <.LVL473+0xa>
    s->insert = 0;
  40bd76:	2200      	movs	r2, #0
  40bd78:	f241 63b4 	movw	r3, #5812	; 0x16b4
  40bd7c:	50e2      	str	r2, [r4, r3]
    if (flush == Z_FINISH) {
  40bd7e:	2f04      	cmp	r7, #4
  40bd80:	f000 8119 	beq.w	40bfb6 <.LVL500>
    if (s->last_lit)
  40bd84:	f504 53b5 	add.w	r3, r4, #5792	; 0x16a0
  40bd88:	681b      	ldr	r3, [r3, #0]
  40bd8a:	2b00      	cmp	r3, #0
  40bd8c:	f000 8131 	beq.w	40bff2 <.LBE68>
        FLUSH_BLOCK(s, 0);
  40bd90:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  40bd92:	2a00      	cmp	r2, #0
  40bd94:	f2c0 812b 	blt.w	40bfee <.LBB68+0x4>
  40bd98:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  40bd9a:	4411      	add	r1, r2
  40bd9c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  40bd9e:	2300      	movs	r3, #0
  40bda0:	1a82      	subs	r2, r0, r2
  40bda2:	4620      	mov	r0, r4
  40bda4:	f003 f9d8 	bl	40f158 <_tr_flush_block>

0040bda8 <.LVL446>:
  40bda8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40bdaa:	65e3      	str	r3, [r4, #92]	; 0x5c
  40bdac:	6820      	ldr	r0, [r4, #0]
  40bdae:	f010 fa97 	bl	41c2e0 <.LFE41>

0040bdb2 <.LVL447>:
  40bdb2:	6823      	ldr	r3, [r4, #0]
  40bdb4:	6918      	ldr	r0, [r3, #16]

0040bdb6 <.LBB65>:
        if (bflush) FLUSH_BLOCK(s, 0);
  40bdb6:	3000      	adds	r0, #0
  40bdb8:	bf18      	it	ne
  40bdba:	2001      	movne	r0, #1
  40bdbc:	e206      	b.n	40c1cc <.LVL533>

0040bdbe <.LBB66>:
            if (prev == *++scan && prev == *++scan && prev == *++scan) {
  40bdbe:	f890 c002 	ldrb.w	ip, [r0, #2]
  40bdc2:	4561      	cmp	r1, ip
  40bdc4:	f040 809c 	bne.w	40bf00 <.LBB61>

0040bdc8 <.LVL449>:
  40bdc8:	f890 c003 	ldrb.w	ip, [r0, #3]
  40bdcc:	4561      	cmp	r1, ip
  40bdce:	f040 8097 	bne.w	40bf00 <.LBB61>
  40bdd2:	3003      	adds	r0, #3

0040bdd4 <.LVL450>:
                strend = s->window + s->strstart + MAX_MATCH;
  40bdd4:	f503 7381 	add.w	r3, r3, #258	; 0x102
  40bdd8:	4473      	add	r3, lr

0040bdda <.LVL451>:
                } while (prev == *++scan && prev == *++scan &&
  40bdda:	f890 e001 	ldrb.w	lr, [r0, #1]
                         scan < strend);
  40bdde:	4571      	cmp	r1, lr
  40bde0:	d134      	bne.n	40be4c <.LVL460>

0040bde2 <.LVL452>:
                } while (prev == *++scan && prev == *++scan &&
  40bde2:	f890 e002 	ldrb.w	lr, [r0, #2]
  40bde6:	4571      	cmp	r1, lr
  40bde8:	f040 80b5 	bne.w	40bf56 <.LVL482>

0040bdec <.LVL453>:
                         prev == *++scan && prev == *++scan &&
  40bdec:	f890 e003 	ldrb.w	lr, [r0, #3]
                } while (prev == *++scan && prev == *++scan &&
  40bdf0:	4571      	cmp	r1, lr
  40bdf2:	f040 80b2 	bne.w	40bf5a <.LVL484>

0040bdf6 <.LVL454>:
                         prev == *++scan && prev == *++scan &&
  40bdf6:	f890 e004 	ldrb.w	lr, [r0, #4]
  40bdfa:	4571      	cmp	r1, lr
  40bdfc:	f040 80af 	bne.w	40bf5e <.LVL486>

0040be00 <.LVL455>:
                         prev == *++scan && prev == *++scan &&
  40be00:	f890 e005 	ldrb.w	lr, [r0, #5]
                         prev == *++scan && prev == *++scan &&
  40be04:	4571      	cmp	r1, lr
  40be06:	f040 80ac 	bne.w	40bf62 <.LVL488>

0040be0a <.LVL456>:
                         prev == *++scan && prev == *++scan &&
  40be0a:	f890 e006 	ldrb.w	lr, [r0, #6]
  40be0e:	4571      	cmp	r1, lr
  40be10:	f040 80a9 	bne.w	40bf66 <.LVL490>

0040be14 <.LVL457>:
                         prev == *++scan && prev == *++scan &&
  40be14:	f890 e007 	ldrb.w	lr, [r0, #7]
                         prev == *++scan && prev == *++scan &&
  40be18:	4571      	cmp	r1, lr
  40be1a:	f040 80a6 	bne.w	40bf6a <.LVL492>

0040be1e <.LVL458>:
                         prev == *++scan && prev == *++scan &&
  40be1e:	f810 ef08 	ldrb.w	lr, [r0, #8]!

0040be22 <.LVL459>:
  40be22:	458e      	cmp	lr, r1
  40be24:	bf14      	ite	ne
  40be26:	f04f 0c00 	movne.w	ip, #0
  40be2a:	f04f 0c01 	moveq.w	ip, #1
  40be2e:	4298      	cmp	r0, r3
  40be30:	bf28      	it	cs
  40be32:	f04f 0c00 	movcs.w	ip, #0
  40be36:	f1bc 0f00 	cmp.w	ip, #0
  40be3a:	d1ce      	bne.n	40bdda <.LVL451>
  40be3c:	e007      	b.n	40be4e <.LVL461>
  40be3e:	bf00      	nop
  40be40:	0041d328 	.word	0x0041d328
  40be44:	004173d0 	.word	0x004173d0
  40be48:	00414a04 	.word	0x00414a04

0040be4c <.LVL460>:
                         scan < strend);
  40be4c:	3001      	adds	r0, #1

0040be4e <.LVL461>:
                s->match_length = MAX_MATCH - (int)(strend - scan);
  40be4e:	1a1b      	subs	r3, r3, r0

0040be50 <.LVL462>:
  40be50:	f5c3 7381 	rsb	r3, r3, #258	; 0x102
  40be54:	6623      	str	r3, [r4, #96]	; 0x60
                if (s->match_length > s->lookahead)
  40be56:	429a      	cmp	r2, r3
  40be58:	f080 8089 	bcs.w	40bf6e <.LVL494>
                    s->match_length = s->lookahead;
  40be5c:	6622      	str	r2, [r4, #96]	; 0x60
        if (s->match_length >= MIN_MATCH) {
  40be5e:	4613      	mov	r3, r2

0040be60 <.LBB60>:
            _tr_tally_dist(s, 1, s->match_length - MIN_MATCH, bflush);
  40be60:	3b03      	subs	r3, #3
  40be62:	b2db      	uxtb	r3, r3

0040be64 <.LVL463>:
  40be64:	f504 52b5 	add.w	r2, r4, #5792	; 0x16a0
  40be68:	6810      	ldr	r0, [r2, #0]

0040be6a <.LVL464>:
  40be6a:	6831      	ldr	r1, [r6, #0]

0040be6c <.LVL465>:
  40be6c:	f04f 0e01 	mov.w	lr, #1
  40be70:	f821 e010 	strh.w	lr, [r1, r0, lsl #1]

0040be74 <.LVL466>:
  40be74:	f241 6198 	movw	r1, #5784	; 0x1698
  40be78:	5860      	ldr	r0, [r4, r1]
  40be7a:	6811      	ldr	r1, [r2, #0]
  40be7c:	448e      	add	lr, r1
  40be7e:	f8c2 e000 	str.w	lr, [r2]
  40be82:	5443      	strb	r3, [r0, r1]

0040be84 <.LVL467>:
  40be84:	f819 3003 	ldrb.w	r3, [r9, r3]

0040be88 <.LVL468>:
  40be88:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  40be8c:	f8b3 1498 	ldrh.w	r1, [r3, #1176]	; 0x498

0040be90 <.LVL469>:
  40be90:	3101      	adds	r1, #1
  40be92:	f8a3 1498 	strh.w	r1, [r3, #1176]	; 0x498

0040be96 <.LVL470>:
  40be96:	f898 3000 	ldrb.w	r3, [r8]
  40be9a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  40be9e:	f8b3 1988 	ldrh.w	r1, [r3, #2440]	; 0x988
  40bea2:	3101      	adds	r1, #1
  40bea4:	f8a3 1988 	strh.w	r1, [r3, #2440]	; 0x988
  40bea8:	f241 639c 	movw	r3, #5788	; 0x169c
  40beac:	58e3      	ldr	r3, [r4, r3]
  40beae:	3b01      	subs	r3, #1
  40beb0:	6812      	ldr	r2, [r2, #0]
  40beb2:	4293      	cmp	r3, r2
  40beb4:	bf14      	ite	ne
  40beb6:	2300      	movne	r3, #0
  40beb8:	2301      	moveq	r3, #1

0040beba <.LBE60>:
            s->lookahead -= s->match_length;
  40beba:	6e20      	ldr	r0, [r4, #96]	; 0x60
  40bebc:	6f61      	ldr	r1, [r4, #116]	; 0x74
  40bebe:	1a09      	subs	r1, r1, r0
  40bec0:	6761      	str	r1, [r4, #116]	; 0x74
            s->strstart += s->match_length;
  40bec2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  40bec4:	4402      	add	r2, r0
  40bec6:	66e2      	str	r2, [r4, #108]	; 0x6c
            s->match_length = 0;
  40bec8:	2200      	movs	r2, #0
  40beca:	6622      	str	r2, [r4, #96]	; 0x60

0040becc <.LVL472>:
        if (bflush) FLUSH_BLOCK(s, 0);
  40becc:	2b00      	cmp	r3, #0
  40bece:	d152      	bne.n	40bf76 <.LVL495>

0040bed0 <.LVL473>:
        if (s->lookahead <= MAX_MATCH) {
  40bed0:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40bed2:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
  40bed6:	f67f af42 	bls.w	40bd5e <.LBE59>
        s->match_length = 0;
  40beda:	2300      	movs	r3, #0
  40bedc:	6623      	str	r3, [r4, #96]	; 0x60
        if (s->lookahead >= MIN_MATCH && s->strstart > 0) {
  40bede:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40bee0:	2a02      	cmp	r2, #2
  40bee2:	d90d      	bls.n	40bf00 <.LBB61>
  40bee4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40bee6:	b15b      	cbz	r3, 40bf00 <.LBB61>
            scan = s->window + s->strstart - 1;
  40bee8:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
  40beec:	1e59      	subs	r1, r3, #1
  40beee:	eb0e 0001 	add.w	r0, lr, r1

0040bef2 <.LVL474>:
            prev = *scan;
  40bef2:	f81e 1001 	ldrb.w	r1, [lr, r1]

0040bef6 <.LVL475>:
            if (prev == *++scan && prev == *++scan && prev == *++scan) {
  40bef6:	f890 c001 	ldrb.w	ip, [r0, #1]
  40befa:	4561      	cmp	r1, ip
  40befc:	f43f af5f 	beq.w	40bdbe <.LBB66>

0040bf00 <.LBB61>:
            _tr_tally_lit (s, s->window[s->strstart], bflush);
  40bf00:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40bf02:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40bf04:	5cd3      	ldrb	r3, [r2, r3]

0040bf06 <.LVL477>:
  40bf06:	f504 51b5 	add.w	r1, r4, #5792	; 0x16a0
  40bf0a:	6808      	ldr	r0, [r1, #0]
  40bf0c:	6832      	ldr	r2, [r6, #0]
  40bf0e:	f04f 0e00 	mov.w	lr, #0
  40bf12:	f822 e010 	strh.w	lr, [r2, r0, lsl #1]
  40bf16:	f241 6298 	movw	r2, #5784	; 0x1698
  40bf1a:	58a0      	ldr	r0, [r4, r2]
  40bf1c:	680a      	ldr	r2, [r1, #0]
  40bf1e:	f102 0e01 	add.w	lr, r2, #1
  40bf22:	f8c1 e000 	str.w	lr, [r1]
  40bf26:	5483      	strb	r3, [r0, r2]
  40bf28:	eb04 0383 	add.w	r3, r4, r3, lsl #2

0040bf2c <.LVL478>:
  40bf2c:	f8b3 2094 	ldrh.w	r2, [r3, #148]	; 0x94

0040bf30 <.LVL479>:
  40bf30:	3201      	adds	r2, #1
  40bf32:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

0040bf36 <.LVL480>:
  40bf36:	f241 639c 	movw	r3, #5788	; 0x169c
  40bf3a:	58e3      	ldr	r3, [r4, r3]
  40bf3c:	3b01      	subs	r3, #1
  40bf3e:	680a      	ldr	r2, [r1, #0]
  40bf40:	4293      	cmp	r3, r2
  40bf42:	bf14      	ite	ne
  40bf44:	2300      	movne	r3, #0
  40bf46:	2301      	moveq	r3, #1

0040bf48 <.LBE61>:
            s->lookahead--;
  40bf48:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40bf4a:	3a01      	subs	r2, #1
  40bf4c:	6762      	str	r2, [r4, #116]	; 0x74
            s->strstart++;
  40bf4e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  40bf50:	3201      	adds	r2, #1
  40bf52:	66e2      	str	r2, [r4, #108]	; 0x6c
  40bf54:	e7ba      	b.n	40becc <.LVL472>

0040bf56 <.LVL482>:
                } while (prev == *++scan && prev == *++scan &&
  40bf56:	3002      	adds	r0, #2

0040bf58 <.LVL483>:
  40bf58:	e779      	b.n	40be4e <.LVL461>

0040bf5a <.LVL484>:
  40bf5a:	3003      	adds	r0, #3

0040bf5c <.LVL485>:
  40bf5c:	e777      	b.n	40be4e <.LVL461>

0040bf5e <.LVL486>:
                         prev == *++scan && prev == *++scan &&
  40bf5e:	3004      	adds	r0, #4

0040bf60 <.LVL487>:
  40bf60:	e775      	b.n	40be4e <.LVL461>

0040bf62 <.LVL488>:
  40bf62:	3005      	adds	r0, #5

0040bf64 <.LVL489>:
  40bf64:	e773      	b.n	40be4e <.LVL461>

0040bf66 <.LVL490>:
                         prev == *++scan && prev == *++scan &&
  40bf66:	3006      	adds	r0, #6

0040bf68 <.LVL491>:
  40bf68:	e771      	b.n	40be4e <.LVL461>

0040bf6a <.LVL492>:
  40bf6a:	3007      	adds	r0, #7

0040bf6c <.LVL493>:
  40bf6c:	e76f      	b.n	40be4e <.LVL461>

0040bf6e <.LVL494>:
        if (s->match_length >= MIN_MATCH) {
  40bf6e:	2b02      	cmp	r3, #2
  40bf70:	f63f af76 	bhi.w	40be60 <.LBB60>
  40bf74:	e7c4      	b.n	40bf00 <.LBB61>

0040bf76 <.LVL495>:
        if (bflush) FLUSH_BLOCK(s, 0);
  40bf76:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  40bf78:	2a00      	cmp	r2, #0
  40bf7a:	db1a      	blt.n	40bfb2 <.LBB67>
  40bf7c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  40bf7e:	4411      	add	r1, r2
  40bf80:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  40bf82:	2300      	movs	r3, #0

0040bf84 <.LVL496>:
  40bf84:	1a82      	subs	r2, r0, r2
  40bf86:	4620      	mov	r0, r4
  40bf88:	f003 f8e6 	bl	40f158 <_tr_flush_block>

0040bf8c <.LVL497>:
  40bf8c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40bf8e:	65e3      	str	r3, [r4, #92]	; 0x5c
  40bf90:	6820      	ldr	r0, [r4, #0]
  40bf92:	f010 f9a5 	bl	41c2e0 <.LFE41>

0040bf96 <.LVL498>:
  40bf96:	6823      	ldr	r3, [r4, #0]
  40bf98:	691b      	ldr	r3, [r3, #16]
  40bf9a:	2b00      	cmp	r3, #0
  40bf9c:	d198      	bne.n	40bed0 <.LVL473>

0040bf9e <.LBE66>:
            if (strm->avail_out == 0) {
  40bf9e:	692b      	ldr	r3, [r5, #16]
  40bfa0:	2b00      	cmp	r3, #0
  40bfa2:	f040 80bc 	bne.w	40c11e <.LBB71>
                s->last_flush = -1; /* avoid BUF_ERROR next call, see above */
  40bfa6:	f04f 33ff 	mov.w	r3, #4294967295
  40bfaa:	62a3      	str	r3, [r4, #40]	; 0x28
            return Z_OK;
  40bfac:	2000      	movs	r0, #0
  40bfae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040bfb2 <.LBB67>:
        if (bflush) FLUSH_BLOCK(s, 0);
  40bfb2:	2100      	movs	r1, #0
  40bfb4:	e7e4      	b.n	40bf80 <.LVL495+0xa>

0040bfb6 <.LVL500>:
        FLUSH_BLOCK(s, 1);
  40bfb6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  40bfb8:	2a00      	cmp	r2, #0
  40bfba:	db16      	blt.n	40bfea <.LBB68>
  40bfbc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  40bfbe:	4411      	add	r1, r2
  40bfc0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  40bfc2:	2301      	movs	r3, #1
  40bfc4:	1a82      	subs	r2, r0, r2
  40bfc6:	4620      	mov	r0, r4
  40bfc8:	f003 f8c6 	bl	40f158 <_tr_flush_block>

0040bfcc <.LVL501>:
  40bfcc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40bfce:	65e3      	str	r3, [r4, #92]	; 0x5c
  40bfd0:	6820      	ldr	r0, [r4, #0]
  40bfd2:	f010 f985 	bl	41c2e0 <.LFE41>

0040bfd6 <.LVL502>:
  40bfd6:	6823      	ldr	r3, [r4, #0]
  40bfd8:	691b      	ldr	r3, [r3, #16]
        return finish_done;
  40bfda:	2b00      	cmp	r3, #0
  40bfdc:	bf0c      	ite	eq
  40bfde:	2002      	moveq	r0, #2
  40bfe0:	2003      	movne	r0, #3

0040bfe2 <.LBE67>:
            s->status = FINISH_STATE;
  40bfe2:	f240 239a 	movw	r3, #666	; 0x29a
  40bfe6:	6063      	str	r3, [r4, #4]
  40bfe8:	e0f5      	b.n	40c1d6 <.LVL533+0xa>

0040bfea <.LBB68>:
        FLUSH_BLOCK(s, 1);
  40bfea:	2100      	movs	r1, #0
  40bfec:	e7e8      	b.n	40bfc0 <.LVL500+0xa>
        FLUSH_BLOCK(s, 0);
  40bfee:	2100      	movs	r1, #0
  40bff0:	e6d4      	b.n	40bd9c <.LVL445+0x38>

0040bff2 <.LBE68>:
            if (flush == Z_PARTIAL_FLUSH) {
  40bff2:	2f01      	cmp	r7, #1
  40bff4:	d016      	beq.n	40c024 <.LVL506+0x14>
            } else if (flush != Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */
  40bff6:	2f05      	cmp	r7, #5
  40bff8:	d017      	beq.n	40c02a <.LVL508>
                _tr_stored_block(s, (char*)0, 0L, 0);
  40bffa:	2300      	movs	r3, #0
  40bffc:	461a      	mov	r2, r3
  40bffe:	4619      	mov	r1, r3
  40c000:	4620      	mov	r0, r4
  40c002:	f00c fee1 	bl	418dc8 <_tr_stored_block>

0040c006 <.LVL505>:
                if (flush == Z_FULL_FLUSH) {
  40c006:	2f03      	cmp	r7, #3
  40c008:	d018      	beq.n	40c03c <.LBB70>
            flush_pending(strm);
  40c00a:	4628      	mov	r0, r5
  40c00c:	f010 f968 	bl	41c2e0 <.LFE41>

0040c010 <.LVL506>:
            if (strm->avail_out == 0) {
  40c010:	692b      	ldr	r3, [r5, #16]
  40c012:	2b00      	cmp	r3, #0
  40c014:	f040 80e6 	bne.w	40c1e4 <.LBE74>
              s->last_flush = -1; /* avoid BUF_ERROR at next call, see above */
  40c018:	f04f 33ff 	mov.w	r3, #4294967295
  40c01c:	62a3      	str	r3, [r4, #40]	; 0x28
              return Z_OK;
  40c01e:	2000      	movs	r0, #0
  40c020:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                _tr_align(s);
  40c024:	4620      	mov	r0, r4
  40c026:	f00d fa51 	bl	4194cc <.LFE150>

0040c02a <.LVL508>:
            flush_pending(strm);
  40c02a:	4628      	mov	r0, r5
  40c02c:	f010 f958 	bl	41c2e0 <.LFE41>

0040c030 <.LVL509>:
            if (strm->avail_out == 0) {
  40c030:	692b      	ldr	r3, [r5, #16]
  40c032:	2b00      	cmp	r3, #0
  40c034:	d0f0      	beq.n	40c018 <.LVL506+0x8>

0040c036 <.LBE69>:
    if (flush != Z_FINISH) return Z_OK;
  40c036:	2000      	movs	r0, #0
  40c038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040c03c <.LBB70>:
                    CLEAR_HASH(s);             /* forget history */
  40c03c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  40c040:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
  40c042:	441a      	add	r2, r3
  40c044:	6c60      	ldr	r0, [r4, #68]	; 0x44
  40c046:	2100      	movs	r1, #0
  40c048:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
  40c04c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
  40c04e:	441a      	add	r2, r3
  40c050:	0052      	lsls	r2, r2, #1
  40c052:	6c60      	ldr	r0, [r4, #68]	; 0x44
  40c054:	f00d fea4 	bl	419da0 <.LFE166>

0040c058 <.LVL511>:
                    if (s->lookahead == 0) {
  40c058:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40c05a:	2b00      	cmp	r3, #0
  40c05c:	d1e5      	bne.n	40c02a <.LVL508>
                        s->strstart = 0;
  40c05e:	66e3      	str	r3, [r4, #108]	; 0x6c
                        s->block_start = 0L;
  40c060:	65e3      	str	r3, [r4, #92]	; 0x5c
                        s->insert = 0;
  40c062:	f241 62b4 	movw	r2, #5812	; 0x16b4
  40c066:	50a3      	str	r3, [r4, r2]
  40c068:	e7df      	b.n	40c02a <.LVL508>

0040c06a <.LBE70>:
    if (s->wrap <= 0) return Z_STREAM_END;
  40c06a:	69a3      	ldr	r3, [r4, #24]
  40c06c:	2b00      	cmp	r3, #0
  40c06e:	dd59      	ble.n	40c124 <.LBE71>
    if (s->wrap == 2) {
  40c070:	2b02      	cmp	r3, #2
  40c072:	d015      	beq.n	40c0a0 <.LVL514+0x16>
        putShortMSB(s, (uInt)(strm->adler >> 16));
  40c074:	8e69      	ldrh	r1, [r5, #50]	; 0x32
  40c076:	4620      	mov	r0, r4
  40c078:	f011 facc 	bl	41d614 <.LFE197>

0040c07c <.LVL512>:
        putShortMSB(s, (uInt)(strm->adler & 0xffff));
  40c07c:	8e29      	ldrh	r1, [r5, #48]	; 0x30
  40c07e:	4620      	mov	r0, r4
  40c080:	f011 fac8 	bl	41d614 <.LFE197>

0040c084 <.LVL513>:
    flush_pending(strm);
  40c084:	4628      	mov	r0, r5
  40c086:	f010 f92b 	bl	41c2e0 <.LFE41>

0040c08a <.LVL514>:
    if (s->wrap > 0) s->wrap = -s->wrap; /* write the trailer only once! */
  40c08a:	69a3      	ldr	r3, [r4, #24]
  40c08c:	2b00      	cmp	r3, #0
  40c08e:	dd01      	ble.n	40c094 <.LVL514+0xa>
  40c090:	425b      	negs	r3, r3
  40c092:	61a3      	str	r3, [r4, #24]
    return s->pending != 0 ? Z_OK : Z_STREAM_END;
  40c094:	6960      	ldr	r0, [r4, #20]
  40c096:	fab0 f080 	clz	r0, r0
  40c09a:	0940      	lsrs	r0, r0, #5
  40c09c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        put_byte(s, (Byte)(strm->adler & 0xff));
  40c0a0:	68a2      	ldr	r2, [r4, #8]
  40c0a2:	6963      	ldr	r3, [r4, #20]
  40c0a4:	1c59      	adds	r1, r3, #1
  40c0a6:	6161      	str	r1, [r4, #20]
  40c0a8:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40c0aa:	54d1      	strb	r1, [r2, r3]
        put_byte(s, (Byte)((strm->adler >> 8) & 0xff));
  40c0ac:	68a1      	ldr	r1, [r4, #8]
  40c0ae:	6962      	ldr	r2, [r4, #20]
  40c0b0:	1c53      	adds	r3, r2, #1
  40c0b2:	6163      	str	r3, [r4, #20]
  40c0b4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40c0b6:	0a1b      	lsrs	r3, r3, #8
  40c0b8:	548b      	strb	r3, [r1, r2]
        put_byte(s, (Byte)((strm->adler >> 16) & 0xff));
  40c0ba:	68a2      	ldr	r2, [r4, #8]
  40c0bc:	6963      	ldr	r3, [r4, #20]
  40c0be:	1c59      	adds	r1, r3, #1
  40c0c0:	6161      	str	r1, [r4, #20]
  40c0c2:	8e69      	ldrh	r1, [r5, #50]	; 0x32
  40c0c4:	54d1      	strb	r1, [r2, r3]
        put_byte(s, (Byte)((strm->adler >> 24) & 0xff));
  40c0c6:	68a2      	ldr	r2, [r4, #8]
  40c0c8:	6963      	ldr	r3, [r4, #20]
  40c0ca:	1c59      	adds	r1, r3, #1
  40c0cc:	6161      	str	r1, [r4, #20]
  40c0ce:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
  40c0d2:	54d1      	strb	r1, [r2, r3]
        put_byte(s, (Byte)(strm->total_in & 0xff));
  40c0d4:	68a2      	ldr	r2, [r4, #8]
  40c0d6:	6963      	ldr	r3, [r4, #20]
  40c0d8:	1c59      	adds	r1, r3, #1
  40c0da:	6161      	str	r1, [r4, #20]
  40c0dc:	68a9      	ldr	r1, [r5, #8]
  40c0de:	54d1      	strb	r1, [r2, r3]
        put_byte(s, (Byte)((strm->total_in >> 8) & 0xff));
  40c0e0:	68a1      	ldr	r1, [r4, #8]
  40c0e2:	6962      	ldr	r2, [r4, #20]
  40c0e4:	1c53      	adds	r3, r2, #1
  40c0e6:	6163      	str	r3, [r4, #20]
  40c0e8:	68ab      	ldr	r3, [r5, #8]
  40c0ea:	0a1b      	lsrs	r3, r3, #8
  40c0ec:	548b      	strb	r3, [r1, r2]
        put_byte(s, (Byte)((strm->total_in >> 16) & 0xff));
  40c0ee:	68a2      	ldr	r2, [r4, #8]
  40c0f0:	6963      	ldr	r3, [r4, #20]
  40c0f2:	1c59      	adds	r1, r3, #1
  40c0f4:	6161      	str	r1, [r4, #20]
  40c0f6:	8969      	ldrh	r1, [r5, #10]
  40c0f8:	54d1      	strb	r1, [r2, r3]
        put_byte(s, (Byte)((strm->total_in >> 24) & 0xff));
  40c0fa:	68a2      	ldr	r2, [r4, #8]
  40c0fc:	6963      	ldr	r3, [r4, #20]
  40c0fe:	1c59      	adds	r1, r3, #1
  40c100:	6161      	str	r1, [r4, #20]
  40c102:	7ae9      	ldrb	r1, [r5, #11]
  40c104:	54d1      	strb	r1, [r2, r3]
  40c106:	e7bd      	b.n	40c084 <.LVL513>

0040c108 <.LCFI25>:
        return Z_STREAM_ERROR;
  40c108:	f06f 0001 	mvn.w	r0, #1

0040c10c <.LVL517>:
  40c10c:	4770      	bx	lr

0040c10e <.LCFI26>:
  40c10e:	f06f 0001 	mvn.w	r0, #1

0040c112 <.LVL519>:
  40c112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040c116 <.LVL520>:
  40c116:	f06f 0001 	mvn.w	r0, #1

0040c11a <.LVL521>:
  40c11a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040c11e <.LBB71>:
            return Z_OK;
  40c11e:	2000      	movs	r0, #0
  40c120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040c124 <.LBE71>:
    if (s->wrap <= 0) return Z_STREAM_END;
  40c124:	2001      	movs	r0, #1
  40c126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040c12a <.LBB72>:
            if (s->gzhead->hcrc && s->pending > beg)
  40c12a:	69e3      	ldr	r3, [r4, #28]
  40c12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40c12e:	2b00      	cmp	r3, #0
  40c130:	f47f acfe 	bne.w	40bb30 <.LVL405>

0040c134 <.LVL525>:
                s->gzindex = 0;
  40c134:	2300      	movs	r3, #0
  40c136:	6223      	str	r3, [r4, #32]
                s->status = COMMENT_STATE;
  40c138:	235b      	movs	r3, #91	; 0x5b
  40c13a:	6063      	str	r3, [r4, #4]

0040c13c <.LBE72>:
        if (s->gzhead->comment != Z_NULL) {
  40c13c:	69e3      	ldr	r3, [r4, #28]
  40c13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40c140:	2b00      	cmp	r3, #0
  40c142:	f43f ad38 	beq.w	40bbb6 <.LBE49>

0040c146 <.LBB73>:
            uInt beg = s->pending;  /* start of bytes to update crc */
  40c146:	6960      	ldr	r0, [r4, #20]

0040c148 <.LVL527>:
  40c148:	e517      	b.n	40bb7a <.LVL413>

0040c14a <.LVL528>:
            if (s->gzhead->hcrc && s->pending > beg)
  40c14a:	69e3      	ldr	r3, [r4, #28]
  40c14c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40c14e:	2b00      	cmp	r3, #0
  40c150:	f47f ad25 	bne.w	40bb9e <.LVL416>

0040c154 <.LVL529>:
                s->status = HCRC_STATE;
  40c154:	2367      	movs	r3, #103	; 0x67
  40c156:	6063      	str	r3, [r4, #4]

0040c158 <.LBE73>:
        if (s->gzhead->hcrc) {
  40c158:	69e3      	ldr	r3, [r4, #28]
  40c15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40c15c:	2b00      	cmp	r3, #0
  40c15e:	f43f ad37 	beq.w	40bbd0 <.LVL420+0xe>
            if (s->pending + 2 > s->pending_buf_size)
  40c162:	6963      	ldr	r3, [r4, #20]
  40c164:	1c99      	adds	r1, r3, #2
  40c166:	68e2      	ldr	r2, [r4, #12]
  40c168:	4291      	cmp	r1, r2
  40c16a:	f63f ad27 	bhi.w	40bbbc <.LBE49+0x6>
                put_byte(s, (Byte)(strm->adler & 0xff));
  40c16e:	68a2      	ldr	r2, [r4, #8]
  40c170:	1c59      	adds	r1, r3, #1
  40c172:	6161      	str	r1, [r4, #20]
  40c174:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40c176:	54d1      	strb	r1, [r2, r3]
                put_byte(s, (Byte)((strm->adler >> 8) & 0xff));
  40c178:	68a1      	ldr	r1, [r4, #8]
  40c17a:	6962      	ldr	r2, [r4, #20]
  40c17c:	1c53      	adds	r3, r2, #1
  40c17e:	6163      	str	r3, [r4, #20]
  40c180:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40c182:	0a1b      	lsrs	r3, r3, #8
  40c184:	548b      	strb	r3, [r1, r2]
                strm->adler = crc32(0L, Z_NULL, 0);
  40c186:	2200      	movs	r2, #0
  40c188:	4611      	mov	r1, r2
  40c18a:	4610      	mov	r0, r2
  40c18c:	f007 faba 	bl	413704 <.LFE21>

0040c190 <.LVL531>:
  40c190:	6328      	str	r0, [r5, #48]	; 0x30
                s->status = BUSY_STATE;
  40c192:	2371      	movs	r3, #113	; 0x71
  40c194:	6063      	str	r3, [r4, #4]
  40c196:	f7ff bb08 	b.w	40b7aa <.LVL355+0x20>
    if (s->status == FINISH_STATE && strm->avail_in != 0) {
  40c19a:	6862      	ldr	r2, [r4, #4]
  40c19c:	f240 239a 	movw	r3, #666	; 0x29a
  40c1a0:	429a      	cmp	r2, r3
  40c1a2:	f43f ad40 	beq.w	40bc26 <.LVL424+0xe>

0040c1a6 <.LBB74>:
        bstate = s->strategy == Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :
  40c1a6:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
  40c1aa:	2b02      	cmp	r3, #2
  40c1ac:	f43f ad42 	beq.w	40bc34 <.LBB51>
  40c1b0:	2b03      	cmp	r3, #3
  40c1b2:	f43f adcc 	beq.w	40bd4e <.LBB56>
                        (*(configuration_table[s->level].func))(s, flush));
  40c1b6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
  40c1ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40c1be:	4a0c      	ldr	r2, [pc, #48]	; (40c1f0 <.LVL535>)
  40c1c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
        bstate = s->strategy == Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :
  40c1c4:	689b      	ldr	r3, [r3, #8]
  40c1c6:	4639      	mov	r1, r7
  40c1c8:	4620      	mov	r0, r4
  40c1ca:	4798      	blx	r3

0040c1cc <.LVL533>:
        if (bstate == finish_started || bstate == finish_done) {
  40c1cc:	1e83      	subs	r3, r0, #2
  40c1ce:	b2db      	uxtb	r3, r3
  40c1d0:	2b01      	cmp	r3, #1
  40c1d2:	f67f af06 	bls.w	40bfe2 <.LBE67>
        if (bstate == need_more || bstate == finish_started) {
  40c1d6:	f010 0ffd 	tst.w	r0, #253	; 0xfd
  40c1da:	f43f aee0 	beq.w	40bf9e <.LBE66>
        if (bstate == block_done) {
  40c1de:	2801      	cmp	r0, #1
  40c1e0:	f43f af07 	beq.w	40bff2 <.LBE68>

0040c1e4 <.LBE74>:
    if (flush != Z_FINISH) return Z_OK;
  40c1e4:	2f04      	cmp	r7, #4
  40c1e6:	f43f af40 	beq.w	40c06a <.LBE70>
  40c1ea:	2000      	movs	r0, #0
  40c1ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040c1f0 <.LVL535>:
  40c1f0:	0041b00c 	.word	0x0041b00c

Disassembly of section .rodata.Spbox%45:

0040c1f4 <Spbox>:
  40c1f4:	01010400 00000000 00010000 01010404     ................
  40c204:	01010004 00010404 00000004 00010000     ................
  40c214:	00000400 01010400 01010404 00000400     ................
  40c224:	01000404 01010004 01000000 00000004     ................
  40c234:	00000404 01000400 01000400 00010400     ................
  40c244:	00010400 01010000 01010000 01000404     ................
  40c254:	00010004 01000004 01000004 00010004     ................
  40c264:	00000000 00000404 00010404 01000000     ................
  40c274:	00010000 01010404 00000004 01010000     ................
  40c284:	01010400 01000000 01000000 00000400     ................
  40c294:	01010004 00010000 00010400 01000004     ................
  40c2a4:	00000400 00000004 01000404 00010404     ................
  40c2b4:	01010404 00010004 01010000 01000404     ................
  40c2c4:	01000004 00000404 00010404 01010400     ................
  40c2d4:	00000404 01000400 01000400 00000000     ................
  40c2e4:	00010004 00010400 00000000 01010004     ................
  40c2f4:	80108020 80008000 00008000 00108020      ........... ...
  40c304:	00100000 00000020 80100020 80008020     .... ... ... ...
  40c314:	80000020 80108020 80108000 80000000      ... ...........
  40c324:	80008000 00100000 00000020 80100020     ........ ... ...
  40c334:	00108000 00100020 80008020 00000000     .... ... .......
  40c344:	80000000 00008000 00108020 80100000     ........ .......
  40c354:	00100020 80000020 00000000 00108000      ... ...........
  40c364:	00008020 80108000 80100000 00008020      ........... ...
  40c374:	00000000 00108020 80100020 00100000     .... ... .......
  40c384:	80008020 80100000 80108000 00008000      ...............
  40c394:	80100000 80008000 00000020 80108020     ........ ... ...
  40c3a4:	00108020 00000020 00008000 80000000      ... ...........
  40c3b4:	00008020 80108000 00100000 80000020      ........... ...
  40c3c4:	00100020 80008020 80000020 00100020      ... ... ... ...
  40c3d4:	00108000 00000000 80008000 00008020     ............ ...
  40c3e4:	80000000 80100020 80108020 00108000     .... ... .......
  40c3f4:	00000208 08020200 00000000 08020008     ................
  40c404:	08000200 00000000 00020208 08000200     ................
  40c414:	00020008 08000008 08000008 00020000     ................
  40c424:	08020208 00020008 08020000 00000208     ................
  40c434:	08000000 00000008 08020200 00000200     ................
  40c444:	00020200 08020000 08020008 00020208     ................
  40c454:	08000208 00020200 00020000 08000208     ................
  40c464:	00000008 08020208 00000200 08000000     ................
  40c474:	08020200 08000000 00020008 00000208     ................
  40c484:	00020000 08020200 08000200 00000000     ................
  40c494:	00000200 00020008 08020208 08000200     ................
  40c4a4:	08000008 00000200 00000000 08020008     ................
  40c4b4:	08000208 00020000 08000000 08020208     ................
  40c4c4:	00000008 00020208 00020200 08000008     ................
  40c4d4:	08020000 08000208 00000208 08020000     ................
  40c4e4:	00020208 00000008 08020008 00020200     ................
  40c4f4:	00802001 00002081 00002081 00000080     . ... ... ......
  40c504:	00802080 00800081 00800001 00002001     . ........... ..
  40c514:	00000000 00802000 00802000 00802081     ..... ... ... ..
  40c524:	00000081 00000000 00800080 00800001     ................
  40c534:	00000001 00002000 00800000 00802001     ..... ....... ..
  40c544:	00000080 00800000 00002001 00002080     ......... ... ..
  40c554:	00800081 00000001 00002080 00800080     ......... ......
  40c564:	00002000 00802080 00802081 00000081     . ... ... ......
  40c574:	00800080 00800001 00802000 00802081     ......... ... ..
  40c584:	00000081 00000000 00000000 00802000     ............. ..
  40c594:	00002080 00800080 00800081 00000001     . ..............
  40c5a4:	00802001 00002081 00002081 00000080     . ... ... ......
  40c5b4:	00802081 00000081 00000001 00002000     . ........... ..
  40c5c4:	00800001 00002001 00802080 00800081     ..... ... ......
  40c5d4:	00002001 00002080 00800000 00802001     . ... ....... ..
  40c5e4:	00000080 00800000 00002000 00802080     ......... ... ..
  40c5f4:	00000100 02080100 02080000 42000100     ...............B
  40c604:	00080000 00000100 40000000 02080000     ...........@....
  40c614:	40080100 00080000 02000100 40080100     ...@...........@
  40c624:	42000100 42080000 00080100 40000000     ...B...B.......@
  40c634:	02000000 40080000 40080000 00000000     .......@...@....
  40c644:	40000100 42080100 42080100 02000100     ...@...B...B....
  40c654:	42080000 40000100 00000000 42000000     ...B...@.......B
  40c664:	02080100 02000000 42000000 00080100     ...........B....
  40c674:	00080000 42000100 00000100 02000000     .......B........
  40c684:	40000000 02080000 42000100 40080100     ...@.......B...@
  40c694:	02000100 40000000 42080000 02080100     .......@...B....
  40c6a4:	40080100 00000100 02000000 42080000     ...@...........B
  40c6b4:	42080100 00080100 42000000 42080100     ...B.......B...B
  40c6c4:	02080000 00000000 40080000 42000000     ...........@...B
  40c6d4:	00080100 02000100 40000100 00080000     ...........@....
  40c6e4:	00000000 40080000 02080100 40000100     .......@.......@
  40c6f4:	20000010 20400000 00004000 20404010     ... ..@ .@...@@ 
  40c704:	20400000 00000010 20404010 00400000     ..@ .....@@ ..@.
  40c714:	20004000 00404010 00400000 20000010     .@. .@@...@.... 
  40c724:	00400010 20004000 20000000 00004010     ..@..@. ... .@..
  40c734:	00000000 00400010 20004010 00004000     ......@..@. .@..
  40c744:	00404000 20004010 00000010 20400010     .@@..@. ......@ 
  40c754:	20400010 00000000 00404010 20404000     ..@ .....@@..@@ 
  40c764:	00004010 00404000 20404000 20000000     .@...@@..@@ ... 
  40c774:	20004000 00000010 20400010 00404000     .@. ......@ .@@.
  40c784:	20404010 00400000 00004010 20000010     .@@ ..@..@..... 
  40c794:	00400000 20004000 20000000 00004010     ..@..@. ... .@..
  40c7a4:	20000010 20404010 00404000 20400000     ... .@@ .@@...@ 
  40c7b4:	00404010 20404000 00000000 20400010     .@@..@@ ......@ 
  40c7c4:	00000010 00004000 20400000 00404010     .....@....@ .@@.
  40c7d4:	00004000 00400010 20004010 00000000     .@....@..@. ....
  40c7e4:	20404000 20000000 00400010 20004010     .@@ ... ..@..@. 
  40c7f4:	00200000 04200002 04000802 00000000     .. ... .........
  40c804:	00000800 04000802 00200802 04200800     .......... ... .
  40c814:	04200802 00200000 00000000 04000002     .. ... .........
  40c824:	00000002 04000000 04200002 00000802     .......... .....
  40c834:	04000800 00200802 00200002 04000800     ...... ... .....
  40c844:	04000002 04200000 04200800 00200002     ...... ... ... .
  40c854:	04200000 00000800 00000802 04200802     .. ........... .
  40c864:	00200800 00000002 04000000 00200800     .. ........... .
  40c874:	04000000 00200800 00200000 04000802     ...... ... .....
  40c884:	04000802 04200002 04200002 00000002     ...... ... .....
  40c894:	00200002 04000000 04000800 00200000     .. ........... .
  40c8a4:	04200800 00000802 00200802 04200800     .. ....... ... .
  40c8b4:	00000802 04000002 04200802 04200000     .......... ... .
  40c8c4:	00200800 00000000 00000002 04200802     .. ........... .
  40c8d4:	00000000 00200802 04200000 00000800     ...... ... .....
  40c8e4:	04000002 04000800 00000800 00200002     .............. .
  40c8f4:	10001040 00001000 00040000 10041040     @...........@...
  40c904:	10000000 10001040 00000040 10000000     ....@...@.......
  40c914:	00040040 10040000 10041040 00041000     @.......@.......
  40c924:	10041000 00041040 00001000 00000040     ....@.......@...
  40c934:	10040000 10000040 10001000 00001040     ....@.......@...
  40c944:	00041000 00040040 10040040 10041000     ....@...@.......
  40c954:	00001040 00000000 00000000 10040040     @...........@...
  40c964:	10000040 10001000 00041040 00040000     @.......@.......
  40c974:	00041040 00040000 10041000 00001000     @...............
  40c984:	00000040 10040040 00001000 00041040     @...@.......@...
  40c994:	10001000 00000040 10000040 10040000     ....@...@.......
  40c9a4:	10040040 10000000 00040000 10001040     @...........@...
  40c9b4:	00000000 10041040 00040040 10000040     ....@...@...@...
  40c9c4:	10040000 10001000 10001040 00000000     ........@.......
  40c9d4:	10041040 00041000 00041000 00001040     @...........@...
  40c9e4:	00001040 00040040 10000000 10041000     @...@...........

Disassembly of section .rodata.lenfix.6567%46:

0040c9f4 <lenfix.6567>:
  40c9f4:	00000760 00500800 00100800 00730814     `.....P.......s.
  40ca04:	001f0712 00700800 00300800 00c00900     ......p...0.....
  40ca14:	000a0710 00600800 00200800 00a00900     ......`... .....
  40ca24:	00000800 00800800 00400800 00e00900     ..........@.....
  40ca34:	00060710 00580800 00180800 00900900     ......X.........
  40ca44:	003b0713 00780800 00380800 00d00900     ..;...x...8.....
  40ca54:	00110711 00680800 00280800 00b00900     ......h...(.....
  40ca64:	00080800 00880800 00480800 00f00900     ..........H.....
  40ca74:	00040710 00540800 00140800 00e30815     ......T.........
  40ca84:	002b0713 00740800 00340800 00c80900     ..+...t...4.....
  40ca94:	000d0711 00640800 00240800 00a80900     ......d...$.....
  40caa4:	00040800 00840800 00440800 00e80900     ..........D.....
  40cab4:	00080710 005c0800 001c0800 00980900     ......\.........
  40cac4:	00530714 007c0800 003c0800 00d80900     ..S...|...<.....
  40cad4:	00170712 006c0800 002c0800 00b80900     ......l...,.....
  40cae4:	000c0800 008c0800 004c0800 00f80900     ..........L.....
  40caf4:	00030710 00520800 00120800 00a30815     ......R.........
  40cb04:	00230713 00720800 00320800 00c40900     ..#...r...2.....
  40cb14:	000b0711 00620800 00220800 00a40900     ......b...".....
  40cb24:	00020800 00820800 00420800 00e40900     ..........B.....
  40cb34:	00070710 005a0800 001a0800 00940900     ......Z.........
  40cb44:	00430714 007a0800 003a0800 00d40900     ..C...z...:.....
  40cb54:	00130712 006a0800 002a0800 00b40900     ......j...*.....
  40cb64:	000a0800 008a0800 004a0800 00f40900     ..........J.....
  40cb74:	00050710 00560800 00160800 00000840     ......V.....@...
  40cb84:	00330713 00760800 00360800 00cc0900     ..3...v...6.....
  40cb94:	000f0711 00660800 00260800 00ac0900     ......f...&.....
  40cba4:	00060800 00860800 00460800 00ec0900     ..........F.....
  40cbb4:	00090710 005e0800 001e0800 009c0900     ......^.........
  40cbc4:	00630714 007e0800 003e0800 00dc0900     ..c...~...>.....
  40cbd4:	001b0712 006e0800 002e0800 00bc0900     ......n.........
  40cbe4:	000e0800 008e0800 004e0800 00fc0900     ..........N.....
  40cbf4:	00000760 00510800 00110800 00830815     `.....Q.........
  40cc04:	001f0712 00710800 00310800 00c20900     ......q...1.....
  40cc14:	000a0710 00610800 00210800 00a20900     ......a...!.....
  40cc24:	00010800 00810800 00410800 00e20900     ..........A.....
  40cc34:	00060710 00590800 00190800 00920900     ......Y.........
  40cc44:	003b0713 00790800 00390800 00d20900     ..;...y...9.....
  40cc54:	00110711 00690800 00290800 00b20900     ......i...).....
  40cc64:	00090800 00890800 00490800 00f20900     ..........I.....
  40cc74:	00040710 00550800 00150800 01020810     ......U.........
  40cc84:	002b0713 00750800 00350800 00ca0900     ..+...u...5.....
  40cc94:	000d0711 00650800 00250800 00aa0900     ......e...%.....
  40cca4:	00050800 00850800 00450800 00ea0900     ..........E.....
  40ccb4:	00080710 005d0800 001d0800 009a0900     ......].........
  40ccc4:	00530714 007d0800 003d0800 00da0900     ..S...}...=.....
  40ccd4:	00170712 006d0800 002d0800 00ba0900     ......m...-.....
  40cce4:	000d0800 008d0800 004d0800 00fa0900     ..........M.....
  40ccf4:	00030710 00530800 00130800 00c30815     ......S.........
  40cd04:	00230713 00730800 00330800 00c60900     ..#...s...3.....
  40cd14:	000b0711 00630800 00230800 00a60900     ......c...#.....
  40cd24:	00030800 00830800 00430800 00e60900     ..........C.....
  40cd34:	00070710 005b0800 001b0800 00960900     ......[.........
  40cd44:	00430714 007b0800 003b0800 00d60900     ..C...{...;.....
  40cd54:	00130712 006b0800 002b0800 00b60900     ......k...+.....
  40cd64:	000b0800 008b0800 004b0800 00f60900     ..........K.....
  40cd74:	00050710 00570800 00170800 00000840     ......W.....@...
  40cd84:	00330713 00770800 00370800 00ce0900     ..3...w...7.....
  40cd94:	000f0711 00670800 00270800 00ae0900     ......g...'.....
  40cda4:	00070800 00870800 00470800 00ee0900     ..........G.....
  40cdb4:	00090710 005f0800 001f0800 009e0900     ......_.........
  40cdc4:	00630714 007f0800 003f0800 00de0900     ..c.......?.....
  40cdd4:	001b0712 006f0800 002f0800 00be0900     ......o.../.....
  40cde4:	000f0800 008f0800 004f0800 00fe0900     ..........O.....
  40cdf4:	00000760 00500800 00100800 00730814     `.....P.......s.
  40ce04:	001f0712 00700800 00300800 00c10900     ......p...0.....
  40ce14:	000a0710 00600800 00200800 00a10900     ......`... .....
  40ce24:	00000800 00800800 00400800 00e10900     ..........@.....
  40ce34:	00060710 00580800 00180800 00910900     ......X.........
  40ce44:	003b0713 00780800 00380800 00d10900     ..;...x...8.....
  40ce54:	00110711 00680800 00280800 00b10900     ......h...(.....
  40ce64:	00080800 00880800 00480800 00f10900     ..........H.....
  40ce74:	00040710 00540800 00140800 00e30815     ......T.........
  40ce84:	002b0713 00740800 00340800 00c90900     ..+...t...4.....
  40ce94:	000d0711 00640800 00240800 00a90900     ......d...$.....
  40cea4:	00040800 00840800 00440800 00e90900     ..........D.....
  40ceb4:	00080710 005c0800 001c0800 00990900     ......\.........
  40cec4:	00530714 007c0800 003c0800 00d90900     ..S...|...<.....
  40ced4:	00170712 006c0800 002c0800 00b90900     ......l...,.....
  40cee4:	000c0800 008c0800 004c0800 00f90900     ..........L.....
  40cef4:	00030710 00520800 00120800 00a30815     ......R.........
  40cf04:	00230713 00720800 00320800 00c50900     ..#...r...2.....
  40cf14:	000b0711 00620800 00220800 00a50900     ......b...".....
  40cf24:	00020800 00820800 00420800 00e50900     ..........B.....
  40cf34:	00070710 005a0800 001a0800 00950900     ......Z.........
  40cf44:	00430714 007a0800 003a0800 00d50900     ..C...z...:.....
  40cf54:	00130712 006a0800 002a0800 00b50900     ......j...*.....
  40cf64:	000a0800 008a0800 004a0800 00f50900     ..........J.....
  40cf74:	00050710 00560800 00160800 00000840     ......V.....@...
  40cf84:	00330713 00760800 00360800 00cd0900     ..3...v...6.....
  40cf94:	000f0711 00660800 00260800 00ad0900     ......f...&.....
  40cfa4:	00060800 00860800 00460800 00ed0900     ..........F.....
  40cfb4:	00090710 005e0800 001e0800 009d0900     ......^.........
  40cfc4:	00630714 007e0800 003e0800 00dd0900     ..c...~...>.....
  40cfd4:	001b0712 006e0800 002e0800 00bd0900     ......n.........
  40cfe4:	000e0800 008e0800 004e0800 00fd0900     ..........N.....
  40cff4:	00000760 00510800 00110800 00830815     `.....Q.........
  40d004:	001f0712 00710800 00310800 00c30900     ......q...1.....
  40d014:	000a0710 00610800 00210800 00a30900     ......a...!.....
  40d024:	00010800 00810800 00410800 00e30900     ..........A.....
  40d034:	00060710 00590800 00190800 00930900     ......Y.........
  40d044:	003b0713 00790800 00390800 00d30900     ..;...y...9.....
  40d054:	00110711 00690800 00290800 00b30900     ......i...).....
  40d064:	00090800 00890800 00490800 00f30900     ..........I.....
  40d074:	00040710 00550800 00150800 01020810     ......U.........
  40d084:	002b0713 00750800 00350800 00cb0900     ..+...u...5.....
  40d094:	000d0711 00650800 00250800 00ab0900     ......e...%.....
  40d0a4:	00050800 00850800 00450800 00eb0900     ..........E.....
  40d0b4:	00080710 005d0800 001d0800 009b0900     ......].........
  40d0c4:	00530714 007d0800 003d0800 00db0900     ..S...}...=.....
  40d0d4:	00170712 006d0800 002d0800 00bb0900     ......m...-.....
  40d0e4:	000d0800 008d0800 004d0800 00fb0900     ..........M.....
  40d0f4:	00030710 00530800 00130800 00c30815     ......S.........
  40d104:	00230713 00730800 00330800 00c70900     ..#...s...3.....
  40d114:	000b0711 00630800 00230800 00a70900     ......c...#.....
  40d124:	00030800 00830800 00430800 00e70900     ..........C.....
  40d134:	00070710 005b0800 001b0800 00970900     ......[.........
  40d144:	00430714 007b0800 003b0800 00d70900     ..C...{...;.....
  40d154:	00130712 006b0800 002b0800 00b70900     ......k...+.....
  40d164:	000b0800 008b0800 004b0800 00f70900     ..........K.....
  40d174:	00050710 00570800 00170800 00000840     ......W.....@...
  40d184:	00330713 00770800 00370800 00cf0900     ..3...w...7.....
  40d194:	000f0711 00670800 00270800 00af0900     ......g...'.....
  40d1a4:	00070800 00870800 00470800 00ef0900     ..........G.....
  40d1b4:	00090710 005f0800 001f0800 009f0900     ......_.........
  40d1c4:	00630714 007f0800 003f0800 00df0900     ..c.......?.....
  40d1d4:	001b0712 006f0800 002f0800 00bf0900     ......o.../.....
  40d1e4:	000f0800 008f0800 004f0800 00ff0900     ..........O.....

Disassembly of section .text.Transform%47:

0040d1f4 <Transform>:

    #define MD5STEP(f, w, x, y, z, data, s) \
        w = rotlFixed(w + f(x, y, z) + data, s) + x

    static int Transform(Md5* md5)
    {
  40d1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0040d1f8 <.LCFI0>:
  40d1f8:	b083      	sub	sp, #12

0040d1fa <.LCFI1>:
        /* Copy context->state[] to working vars  */
        word32 a = md5->digest[0];
        word32 b = md5->digest[1];
  40d1fa:	6d05      	ldr	r5, [r0, #80]	; 0x50

0040d1fc <.LVL2>:
        word32 c = md5->digest[2];
  40d1fc:	6d44      	ldr	r4, [r0, #84]	; 0x54
  40d1fe:	4627      	mov	r7, r4

0040d200 <.LVL3>:
        word32 d = md5->digest[3];

        MD5STEP(F1, a, b, c, d, md5->buffer[0]  + 0xd76aa478,  7);
  40d200:	6d83      	ldr	r3, [r0, #88]	; 0x58
  40d202:	ea84 0903 	eor.w	r9, r4, r3
  40d206:	ea09 0905 	and.w	r9, r9, r5
  40d20a:	ea89 0903 	eor.w	r9, r9, r3
  40d20e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40d210:	68c2      	ldr	r2, [r0, #12]
  40d212:	189a      	adds	r2, r3, r2
  40d214:	4bdf      	ldr	r3, [pc, #892]	; (40d594 <.LVL188+0x10>)
  40d216:	4413      	add	r3, r2
  40d218:	4499      	add	r9, r3
  40d21a:	eb05 6979 	add.w	r9, r5, r9, ror #25

0040d21e <.LVL7>:
        MD5STEP(F1, d, a, b, c, md5->buffer[1]  + 0xe8c7b756, 12);
  40d21e:	ea85 0c04 	eor.w	ip, r5, r4
  40d222:	ea0c 0c09 	and.w	ip, ip, r9
  40d226:	ea8c 0c04 	eor.w	ip, ip, r4
  40d22a:	6d83      	ldr	r3, [r0, #88]	; 0x58
  40d22c:	6902      	ldr	r2, [r0, #16]
  40d22e:	4413      	add	r3, r2
  40d230:	4cd9      	ldr	r4, [pc, #868]	; (40d598 <.LVL188+0x14>)

0040d232 <.LVL10>:
  40d232:	441c      	add	r4, r3
  40d234:	44a4      	add	ip, r4
  40d236:	eb09 5c3c 	add.w	ip, r9, ip, ror #20

0040d23a <.LVL12>:
        MD5STEP(F1, c, d, a, b, md5->buffer[2]  + 0x242070db, 17);
  40d23a:	ea85 0609 	eor.w	r6, r5, r9
  40d23e:	ea06 060c 	and.w	r6, r6, ip
  40d242:	406e      	eors	r6, r5
  40d244:	6943      	ldr	r3, [r0, #20]
  40d246:	9701      	str	r7, [sp, #4]
  40d248:	443b      	add	r3, r7
  40d24a:	4ad4      	ldr	r2, [pc, #848]	; (40d59c <.LVL188+0x18>)
  40d24c:	441a      	add	r2, r3
  40d24e:	4416      	add	r6, r2
  40d250:	eb0c 36f6 	add.w	r6, ip, r6, ror #15

0040d254 <.LVL16>:
        MD5STEP(F1, b, c, d, a, md5->buffer[3]  + 0xc1bdceee, 22);
  40d254:	ea89 010c 	eor.w	r1, r9, ip
  40d258:	4031      	ands	r1, r6
  40d25a:	ea81 0109 	eor.w	r1, r1, r9
  40d25e:	6983      	ldr	r3, [r0, #24]
  40d260:	18ea      	adds	r2, r5, r3
  40d262:	4bcf      	ldr	r3, [pc, #828]	; (40d5a0 <.LVL188+0x1c>)
  40d264:	4413      	add	r3, r2
  40d266:	4419      	add	r1, r3
  40d268:	eb06 21b1 	add.w	r1, r6, r1, ror #10

0040d26c <.LVL20>:
        MD5STEP(F1, a, b, c, d, md5->buffer[4]  + 0xf57c0faf,  7);
  40d26c:	ea8c 0306 	eor.w	r3, ip, r6
  40d270:	400b      	ands	r3, r1
  40d272:	ea83 030c 	eor.w	r3, r3, ip
  40d276:	4acb      	ldr	r2, [pc, #812]	; (40d5a4 <.LVL188+0x20>)
  40d278:	69c4      	ldr	r4, [r0, #28]
  40d27a:	4422      	add	r2, r4
  40d27c:	4491      	add	r9, r2

0040d27e <.LVL23>:
  40d27e:	444b      	add	r3, r9
  40d280:	eb01 6373 	add.w	r3, r1, r3, ror #25

0040d284 <.LVL25>:
        MD5STEP(F1, d, a, b, c, md5->buffer[5]  + 0x4787c62a, 12);
  40d284:	ea86 0401 	eor.w	r4, r6, r1
  40d288:	401c      	ands	r4, r3
  40d28a:	4074      	eors	r4, r6
  40d28c:	4ac6      	ldr	r2, [pc, #792]	; (40d5a8 <.LVL188+0x24>)
  40d28e:	6a07      	ldr	r7, [r0, #32]
  40d290:	443a      	add	r2, r7
  40d292:	4494      	add	ip, r2

0040d294 <.LVL28>:
  40d294:	4464      	add	r4, ip
  40d296:	eb03 5434 	add.w	r4, r3, r4, ror #20

0040d29a <.LVL30>:
        MD5STEP(F1, c, d, a, b, md5->buffer[6]  + 0xa8304613, 17);
  40d29a:	ea81 0203 	eor.w	r2, r1, r3
  40d29e:	4022      	ands	r2, r4
  40d2a0:	404a      	eors	r2, r1
  40d2a2:	f8df e36c 	ldr.w	lr, [pc, #876]	; 40d610 <.LVL188+0x8c>
  40d2a6:	6a47      	ldr	r7, [r0, #36]	; 0x24
  40d2a8:	44be      	add	lr, r7
  40d2aa:	4476      	add	r6, lr

0040d2ac <.LVL33>:
  40d2ac:	4432      	add	r2, r6
  40d2ae:	eb04 32f2 	add.w	r2, r4, r2, ror #15

0040d2b2 <.LVL35>:
        MD5STEP(F1, b, c, d, a, md5->buffer[7]  + 0xfd469501, 22);
  40d2b2:	f8d0 a028 	ldr.w	sl, [r0, #40]	; 0x28
  40d2b6:	ea83 0804 	eor.w	r8, r3, r4
  40d2ba:	ea08 0802 	and.w	r8, r8, r2
  40d2be:	ea88 0803 	eor.w	r8, r8, r3
  40d2c2:	4eba      	ldr	r6, [pc, #744]	; (40d5ac <.LVL188+0x28>)
  40d2c4:	4456      	add	r6, sl
  40d2c6:	4431      	add	r1, r6

0040d2c8 <.LVL39>:
  40d2c8:	4488      	add	r8, r1
  40d2ca:	eb02 28b8 	add.w	r8, r2, r8, ror #10

0040d2ce <.LVL41>:
        MD5STEP(F1, a, b, c, d, md5->buffer[8]  + 0x698098d8,  7);
  40d2ce:	ea84 0e02 	eor.w	lr, r4, r2
  40d2d2:	ea0e 0e08 	and.w	lr, lr, r8
  40d2d6:	ea8e 0e04 	eor.w	lr, lr, r4
  40d2da:	49b5      	ldr	r1, [pc, #724]	; (40d5b0 <.LVL188+0x2c>)
  40d2dc:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  40d2de:	4431      	add	r1, r6
  40d2e0:	440b      	add	r3, r1

0040d2e2 <.LVL44>:
  40d2e2:	449e      	add	lr, r3
  40d2e4:	eb08 6e7e 	add.w	lr, r8, lr, ror #25

0040d2e8 <.LVL46>:
        MD5STEP(F1, d, a, b, c, md5->buffer[9]  + 0x8b44f7af, 12);
  40d2e8:	ea82 0908 	eor.w	r9, r2, r8
  40d2ec:	ea09 090e 	and.w	r9, r9, lr
  40d2f0:	ea89 0902 	eor.w	r9, r9, r2
  40d2f4:	4baf      	ldr	r3, [pc, #700]	; (40d5b4 <.LVL188+0x30>)
  40d2f6:	6b01      	ldr	r1, [r0, #48]	; 0x30
  40d2f8:	440b      	add	r3, r1
  40d2fa:	441c      	add	r4, r3

0040d2fc <.LVL49>:
  40d2fc:	44a1      	add	r9, r4
  40d2fe:	eb0e 5939 	add.w	r9, lr, r9, ror #20

0040d302 <.LVL51>:
        MD5STEP(F1, c, d, a, b, md5->buffer[10] + 0xffff5bb1, 17);
  40d302:	ea88 0c0e 	eor.w	ip, r8, lr
  40d306:	ea0c 0c09 	and.w	ip, ip, r9
  40d30a:	ea8c 0c08 	eor.w	ip, ip, r8
  40d30e:	4baa      	ldr	r3, [pc, #680]	; (40d5b8 <.LVL188+0x34>)
  40d310:	6b41      	ldr	r1, [r0, #52]	; 0x34
  40d312:	440b      	add	r3, r1
  40d314:	441a      	add	r2, r3

0040d316 <.LVL54>:
  40d316:	4494      	add	ip, r2
  40d318:	eb09 3cfc 	add.w	ip, r9, ip, ror #15

0040d31c <.LVL56>:
        MD5STEP(F1, b, c, d, a, md5->buffer[11] + 0x895cd7be, 22);
  40d31c:	ea8e 0609 	eor.w	r6, lr, r9
  40d320:	ea06 060c 	and.w	r6, r6, ip
  40d324:	ea86 060e 	eor.w	r6, r6, lr
  40d328:	4ba4      	ldr	r3, [pc, #656]	; (40d5bc <.LVL188+0x38>)
  40d32a:	6b82      	ldr	r2, [r0, #56]	; 0x38
  40d32c:	4413      	add	r3, r2
  40d32e:	4498      	add	r8, r3

0040d330 <.LVL59>:
  40d330:	4446      	add	r6, r8
  40d332:	eb0c 26b6 	add.w	r6, ip, r6, ror #10

0040d336 <.LVL61>:
        MD5STEP(F1, a, b, c, d, md5->buffer[12] + 0x6b901122,  7);
  40d336:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
  40d33a:	ea89 010c 	eor.w	r1, r9, ip
  40d33e:	4031      	ands	r1, r6
  40d340:	ea81 0109 	eor.w	r1, r1, r9
  40d344:	4b9e      	ldr	r3, [pc, #632]	; (40d5c0 <.LVL188+0x3c>)
  40d346:	4443      	add	r3, r8
  40d348:	449e      	add	lr, r3

0040d34a <.LVL65>:
  40d34a:	4471      	add	r1, lr
  40d34c:	eb06 6171 	add.w	r1, r6, r1, ror #25

0040d350 <.LVL67>:
        MD5STEP(F1, d, a, b, c, md5->buffer[13] + 0xfd987193, 12);
  40d350:	ea8c 0306 	eor.w	r3, ip, r6
  40d354:	400b      	ands	r3, r1
  40d356:	ea83 030c 	eor.w	r3, r3, ip
  40d35a:	4a9a      	ldr	r2, [pc, #616]	; (40d5c4 <.LVL188+0x40>)
  40d35c:	6c04      	ldr	r4, [r0, #64]	; 0x40
  40d35e:	4422      	add	r2, r4
  40d360:	4491      	add	r9, r2

0040d362 <.LVL70>:
  40d362:	444b      	add	r3, r9
  40d364:	eb01 5333 	add.w	r3, r1, r3, ror #20

0040d368 <.LVL72>:
        MD5STEP(F1, c, d, a, b, md5->buffer[14] + 0xa679438e, 17);
  40d368:	f8d0 9044 	ldr.w	r9, [r0, #68]	; 0x44
  40d36c:	ea86 0401 	eor.w	r4, r6, r1
  40d370:	401c      	ands	r4, r3
  40d372:	4074      	eors	r4, r6
  40d374:	4a94      	ldr	r2, [pc, #592]	; (40d5c8 <.LVL188+0x44>)
  40d376:	444a      	add	r2, r9
  40d378:	4494      	add	ip, r2

0040d37a <.LVL76>:
  40d37a:	4464      	add	r4, ip
  40d37c:	eb03 34f4 	add.w	r4, r3, r4, ror #15

0040d380 <.LVL78>:
        MD5STEP(F1, b, c, d, a, md5->buffer[15] + 0x49b40821, 22);
  40d380:	f8d0 c048 	ldr.w	ip, [r0, #72]	; 0x48
  40d384:	ea81 0203 	eor.w	r2, r1, r3
  40d388:	4022      	ands	r2, r4
  40d38a:	404a      	eors	r2, r1
  40d38c:	f8df e284 	ldr.w	lr, [pc, #644]	; 40d614 <.LVL188+0x90>
  40d390:	44e6      	add	lr, ip
  40d392:	4476      	add	r6, lr

0040d394 <.LVL82>:
  40d394:	4432      	add	r2, r6
  40d396:	eb04 22b2 	add.w	r2, r4, r2, ror #10

0040d39a <.LVL84>:

        MD5STEP(F2, a, b, c, d, md5->buffer[1]  + 0xf61e2562,  5);
  40d39a:	ea84 0b02 	eor.w	fp, r4, r2
  40d39e:	ea0b 0b03 	and.w	fp, fp, r3
  40d3a2:	ea8b 0b04 	eor.w	fp, fp, r4
  40d3a6:	4e89      	ldr	r6, [pc, #548]	; (40d5cc <.LVL188+0x48>)
  40d3a8:	6907      	ldr	r7, [r0, #16]
  40d3aa:	443e      	add	r6, r7
  40d3ac:	4431      	add	r1, r6

0040d3ae <.LVL87>:
  40d3ae:	448b      	add	fp, r1
  40d3b0:	eb02 6bfb 	add.w	fp, r2, fp, ror #27

0040d3b4 <.LVL89>:
        MD5STEP(F2, d, a, b, c, md5->buffer[6]  + 0xc040b340,  9);
  40d3b4:	ea82 0e0b 	eor.w	lr, r2, fp
  40d3b8:	ea0e 0e04 	and.w	lr, lr, r4
  40d3bc:	ea8e 0e02 	eor.w	lr, lr, r2
  40d3c0:	4983      	ldr	r1, [pc, #524]	; (40d5d0 <.LVL188+0x4c>)
  40d3c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
  40d3c4:	4431      	add	r1, r6
  40d3c6:	440b      	add	r3, r1

0040d3c8 <.LVL92>:
  40d3c8:	449e      	add	lr, r3
  40d3ca:	eb0b 5efe 	add.w	lr, fp, lr, ror #23

0040d3ce <.LVL94>:
        MD5STEP(F2, c, d, a, b, md5->buffer[11] + 0x265e5a51, 14);
  40d3ce:	ea8b 030e 	eor.w	r3, fp, lr
  40d3d2:	4013      	ands	r3, r2
  40d3d4:	ea83 030b 	eor.w	r3, r3, fp
  40d3d8:	497e      	ldr	r1, [pc, #504]	; (40d5d4 <.LVL188+0x50>)
  40d3da:	6b86      	ldr	r6, [r0, #56]	; 0x38
  40d3dc:	4431      	add	r1, r6
  40d3de:	440c      	add	r4, r1

0040d3e0 <.LVL97>:
  40d3e0:	4423      	add	r3, r4
  40d3e2:	eb0e 43b3 	add.w	r3, lr, r3, ror #18

0040d3e6 <.LVL99>:
        MD5STEP(F2, b, c, d, a, md5->buffer[0]  + 0xe9b6c7aa, 20);
  40d3e6:	ea8e 0603 	eor.w	r6, lr, r3
  40d3ea:	ea06 060b 	and.w	r6, r6, fp
  40d3ee:	ea86 060e 	eor.w	r6, r6, lr
  40d3f2:	4979      	ldr	r1, [pc, #484]	; (40d5d8 <.LVL188+0x54>)
  40d3f4:	68c4      	ldr	r4, [r0, #12]
  40d3f6:	4421      	add	r1, r4
  40d3f8:	440a      	add	r2, r1

0040d3fa <.LVL102>:
  40d3fa:	4416      	add	r6, r2
  40d3fc:	eb03 3636 	add.w	r6, r3, r6, ror #12

0040d400 <.LVL104>:
        MD5STEP(F2, a, b, c, d, md5->buffer[5]  + 0xd62f105d,  5);
  40d400:	ea83 0206 	eor.w	r2, r3, r6
  40d404:	ea02 020e 	and.w	r2, r2, lr
  40d408:	405a      	eors	r2, r3
  40d40a:	4974      	ldr	r1, [pc, #464]	; (40d5dc <.LVL188+0x58>)
  40d40c:	6a04      	ldr	r4, [r0, #32]
  40d40e:	4421      	add	r1, r4
  40d410:	448b      	add	fp, r1

0040d412 <.LVL107>:
  40d412:	445a      	add	r2, fp
  40d414:	eb06 62f2 	add.w	r2, r6, r2, ror #27

0040d418 <.LVL109>:
        MD5STEP(F2, d, a, b, c, md5->buffer[10] + 0x02441453,  9);
  40d418:	ea86 0102 	eor.w	r1, r6, r2
  40d41c:	4019      	ands	r1, r3
  40d41e:	4071      	eors	r1, r6
  40d420:	4c6f      	ldr	r4, [pc, #444]	; (40d5e0 <.LVL188+0x5c>)
  40d422:	6b47      	ldr	r7, [r0, #52]	; 0x34
  40d424:	443c      	add	r4, r7
  40d426:	44a6      	add	lr, r4

0040d428 <.LVL112>:
  40d428:	4471      	add	r1, lr
  40d42a:	eb02 51f1 	add.w	r1, r2, r1, ror #23

0040d42e <.LVL114>:
        MD5STEP(F2, c, d, a, b, md5->buffer[15] + 0xd8a1e681, 14);
  40d42e:	ea82 0401 	eor.w	r4, r2, r1
  40d432:	4034      	ands	r4, r6
  40d434:	4054      	eors	r4, r2
  40d436:	f8df e1e0 	ldr.w	lr, [pc, #480]	; 40d618 <.LVL188+0x94>
  40d43a:	44e6      	add	lr, ip
  40d43c:	4473      	add	r3, lr

0040d43e <.LVL117>:
  40d43e:	441c      	add	r4, r3
  40d440:	eb01 44b4 	add.w	r4, r1, r4, ror #18

0040d444 <.LVL119>:
        MD5STEP(F2, b, c, d, a, md5->buffer[4]  + 0xe7d3fbc8, 20);
  40d444:	ea81 0304 	eor.w	r3, r1, r4
  40d448:	4013      	ands	r3, r2
  40d44a:	404b      	eors	r3, r1
  40d44c:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 40d61c <.LVL188+0x98>
  40d450:	69c7      	ldr	r7, [r0, #28]
  40d452:	44be      	add	lr, r7
  40d454:	4476      	add	r6, lr

0040d456 <.LVL122>:
  40d456:	4433      	add	r3, r6
  40d458:	eb04 3333 	add.w	r3, r4, r3, ror #12

0040d45c <.LVL124>:
        MD5STEP(F2, a, b, c, d, md5->buffer[9]  + 0x21e1cde6,  5);
  40d45c:	ea84 0b03 	eor.w	fp, r4, r3
  40d460:	ea0b 0b01 	and.w	fp, fp, r1
  40d464:	ea8b 0b04 	eor.w	fp, fp, r4
  40d468:	4e5e      	ldr	r6, [pc, #376]	; (40d5e4 <.LVL188+0x60>)
  40d46a:	6b07      	ldr	r7, [r0, #48]	; 0x30
  40d46c:	443e      	add	r6, r7
  40d46e:	4432      	add	r2, r6

0040d470 <.LVL127>:
  40d470:	4493      	add	fp, r2
  40d472:	eb03 6bfb 	add.w	fp, r3, fp, ror #27

0040d476 <.LVL129>:
        MD5STEP(F2, d, a, b, c, md5->buffer[14] + 0xc33707d6,  9);
  40d476:	ea83 0e0b 	eor.w	lr, r3, fp
  40d47a:	ea0e 0e04 	and.w	lr, lr, r4
  40d47e:	ea8e 0e03 	eor.w	lr, lr, r3
  40d482:	4a59      	ldr	r2, [pc, #356]	; (40d5e8 <.LVL188+0x64>)
  40d484:	444a      	add	r2, r9
  40d486:	4411      	add	r1, r2

0040d488 <.LVL132>:
  40d488:	448e      	add	lr, r1
  40d48a:	eb0b 5efe 	add.w	lr, fp, lr, ror #23

0040d48e <.LVL134>:
        MD5STEP(F2, c, d, a, b, md5->buffer[3]  + 0xf4d50d87, 14);
  40d48e:	ea8b 060e 	eor.w	r6, fp, lr
  40d492:	401e      	ands	r6, r3
  40d494:	ea86 060b 	eor.w	r6, r6, fp
  40d498:	4a54      	ldr	r2, [pc, #336]	; (40d5ec <.LVL188+0x68>)
  40d49a:	6981      	ldr	r1, [r0, #24]
  40d49c:	440a      	add	r2, r1
  40d49e:	4414      	add	r4, r2

0040d4a0 <.LVL137>:
  40d4a0:	4426      	add	r6, r4
  40d4a2:	eb0e 46b6 	add.w	r6, lr, r6, ror #18

0040d4a6 <.LVL139>:
        MD5STEP(F2, b, c, d, a, md5->buffer[8]  + 0x455a14ed, 20);
  40d4a6:	ea8e 0206 	eor.w	r2, lr, r6
  40d4aa:	ea02 020b 	and.w	r2, r2, fp
  40d4ae:	ea82 020e 	eor.w	r2, r2, lr
  40d4b2:	494f      	ldr	r1, [pc, #316]	; (40d5f0 <.LVL188+0x6c>)
  40d4b4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  40d4b6:	4421      	add	r1, r4
  40d4b8:	440b      	add	r3, r1

0040d4ba <.LVL142>:
  40d4ba:	441a      	add	r2, r3
  40d4bc:	eb06 3232 	add.w	r2, r6, r2, ror #12

0040d4c0 <.LVL144>:
        MD5STEP(F2, a, b, c, d, md5->buffer[13] + 0xa9e3e905,  5);
  40d4c0:	ea86 0302 	eor.w	r3, r6, r2
  40d4c4:	ea03 030e 	and.w	r3, r3, lr
  40d4c8:	4073      	eors	r3, r6
  40d4ca:	494a      	ldr	r1, [pc, #296]	; (40d5f4 <.LVL188+0x70>)
  40d4cc:	6c04      	ldr	r4, [r0, #64]	; 0x40
  40d4ce:	4421      	add	r1, r4
  40d4d0:	448b      	add	fp, r1

0040d4d2 <.LVL147>:
  40d4d2:	445b      	add	r3, fp
  40d4d4:	eb02 63f3 	add.w	r3, r2, r3, ror #27

0040d4d8 <.LVL149>:
        MD5STEP(F2, d, a, b, c, md5->buffer[2]  + 0xfcefa3f8,  9);
  40d4d8:	ea82 0103 	eor.w	r1, r2, r3
  40d4dc:	4031      	ands	r1, r6
  40d4de:	4051      	eors	r1, r2
  40d4e0:	4c45      	ldr	r4, [pc, #276]	; (40d5f8 <.LVL188+0x74>)
  40d4e2:	6947      	ldr	r7, [r0, #20]
  40d4e4:	443c      	add	r4, r7
  40d4e6:	44a6      	add	lr, r4

0040d4e8 <.LVL152>:
  40d4e8:	4471      	add	r1, lr
  40d4ea:	eb03 51f1 	add.w	r1, r3, r1, ror #23

0040d4ee <.LVL154>:
        MD5STEP(F2, c, d, a, b, md5->buffer[7]  + 0x676f02d9, 14);
  40d4ee:	ea83 0401 	eor.w	r4, r3, r1
  40d4f2:	4014      	ands	r4, r2
  40d4f4:	405c      	eors	r4, r3
  40d4f6:	f8df e128 	ldr.w	lr, [pc, #296]	; 40d620 <.LVL188+0x9c>
  40d4fa:	44d6      	add	lr, sl
  40d4fc:	4476      	add	r6, lr

0040d4fe <.LVL157>:
  40d4fe:	4434      	add	r4, r6
  40d500:	eb01 44b4 	add.w	r4, r1, r4, ror #18

0040d504 <.LVL159>:
        MD5STEP(F2, b, c, d, a, md5->buffer[12] + 0x8d2a4c8a, 20);
  40d504:	ea81 0b04 	eor.w	fp, r1, r4
  40d508:	ea03 060b 	and.w	r6, r3, fp
  40d50c:	404e      	eors	r6, r1
  40d50e:	f8df e114 	ldr.w	lr, [pc, #276]	; 40d624 <.LVL188+0xa0>
  40d512:	44c6      	add	lr, r8
  40d514:	4472      	add	r2, lr

0040d516 <.LVL163>:
  40d516:	4416      	add	r6, r2
  40d518:	eb04 3636 	add.w	r6, r4, r6, ror #12

0040d51c <.LVL165>:

        MD5STEP(F3, a, b, c, d, md5->buffer[5]  + 0xfffa3942,  4);
  40d51c:	4a37      	ldr	r2, [pc, #220]	; (40d5fc <.LVL188+0x78>)
  40d51e:	6a07      	ldr	r7, [r0, #32]
  40d520:	443a      	add	r2, r7
  40d522:	4413      	add	r3, r2

0040d524 <.LVL166>:
  40d524:	ea8b 0b06 	eor.w	fp, fp, r6
  40d528:	445b      	add	r3, fp
  40d52a:	eb06 7333 	add.w	r3, r6, r3, ror #28

0040d52e <.LVL168>:
        MD5STEP(F3, d, a, b, c, md5->buffer[8]  + 0x8771f681, 11);
  40d52e:	ea84 0206 	eor.w	r2, r4, r6
  40d532:	405a      	eors	r2, r3
  40d534:	f8df e0f0 	ldr.w	lr, [pc, #240]	; 40d628 <.LVL188+0xa4>
  40d538:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  40d53a:	44be      	add	lr, r7
  40d53c:	4471      	add	r1, lr

0040d53e <.LVL171>:
  40d53e:	4411      	add	r1, r2
  40d540:	eb03 5171 	add.w	r1, r3, r1, ror #21

0040d544 <.LVL173>:
        MD5STEP(F3, c, d, a, b, md5->buffer[11] + 0x6d9d6122, 16);
  40d544:	ea86 0b03 	eor.w	fp, r6, r3
  40d548:	ea8b 0b01 	eor.w	fp, fp, r1
  40d54c:	4a2c      	ldr	r2, [pc, #176]	; (40d600 <.LVL188+0x7c>)
  40d54e:	6b87      	ldr	r7, [r0, #56]	; 0x38
  40d550:	443a      	add	r2, r7
  40d552:	4414      	add	r4, r2

0040d554 <.LVL176>:
  40d554:	445c      	add	r4, fp
  40d556:	eb01 4434 	add.w	r4, r1, r4, ror #16

0040d55a <.LVL178>:
        MD5STEP(F3, b, c, d, a, md5->buffer[14] + 0xfde5380c, 23);
  40d55a:	ea83 0e01 	eor.w	lr, r3, r1
  40d55e:	ea8e 0e04 	eor.w	lr, lr, r4
  40d562:	4a28      	ldr	r2, [pc, #160]	; (40d604 <.LVL188+0x80>)
  40d564:	444a      	add	r2, r9
  40d566:	4416      	add	r6, r2

0040d568 <.LVL181>:
  40d568:	44b6      	add	lr, r6
  40d56a:	eb04 2e7e 	add.w	lr, r4, lr, ror #9

0040d56e <.LVL183>:
        MD5STEP(F3, a, b, c, d, md5->buffer[1]  + 0xa4beea44,  4);
  40d56e:	ea81 0204 	eor.w	r2, r1, r4
  40d572:	ea82 020e 	eor.w	r2, r2, lr
  40d576:	4e24      	ldr	r6, [pc, #144]	; (40d608 <.LVL188+0x84>)
  40d578:	6907      	ldr	r7, [r0, #16]
  40d57a:	443e      	add	r6, r7
  40d57c:	4433      	add	r3, r6

0040d57e <.LVL186>:
  40d57e:	4413      	add	r3, r2
  40d580:	eb0e 7333 	add.w	r3, lr, r3, ror #28

0040d584 <.LVL188>:
        MD5STEP(F3, d, a, b, c, md5->buffer[4]  + 0x4bdecfa9, 11);
  40d584:	ea84 020e 	eor.w	r2, r4, lr
  40d588:	405a      	eors	r2, r3
  40d58a:	4e20      	ldr	r6, [pc, #128]	; (40d60c <.LVL188+0x88>)
  40d58c:	69c7      	ldr	r7, [r0, #28]
  40d58e:	443e      	add	r6, r7
  40d590:	4431      	add	r1, r6
  40d592:	e04b      	b.n	40d62c <.LVL191>
  40d594:	d76aa478 	.word	0xd76aa478
  40d598:	e8c7b756 	.word	0xe8c7b756
  40d59c:	242070db 	.word	0x242070db
  40d5a0:	c1bdceee 	.word	0xc1bdceee
  40d5a4:	f57c0faf 	.word	0xf57c0faf
  40d5a8:	4787c62a 	.word	0x4787c62a
  40d5ac:	fd469501 	.word	0xfd469501
  40d5b0:	698098d8 	.word	0x698098d8
  40d5b4:	8b44f7af 	.word	0x8b44f7af
  40d5b8:	ffff5bb1 	.word	0xffff5bb1
  40d5bc:	895cd7be 	.word	0x895cd7be
  40d5c0:	6b901122 	.word	0x6b901122
  40d5c4:	fd987193 	.word	0xfd987193
  40d5c8:	a679438e 	.word	0xa679438e
  40d5cc:	f61e2562 	.word	0xf61e2562
  40d5d0:	c040b340 	.word	0xc040b340
  40d5d4:	265e5a51 	.word	0x265e5a51
  40d5d8:	e9b6c7aa 	.word	0xe9b6c7aa
  40d5dc:	d62f105d 	.word	0xd62f105d
  40d5e0:	02441453 	.word	0x02441453
  40d5e4:	21e1cde6 	.word	0x21e1cde6
  40d5e8:	c33707d6 	.word	0xc33707d6
  40d5ec:	f4d50d87 	.word	0xf4d50d87
  40d5f0:	455a14ed 	.word	0x455a14ed
  40d5f4:	a9e3e905 	.word	0xa9e3e905
  40d5f8:	fcefa3f8 	.word	0xfcefa3f8
  40d5fc:	fffa3942 	.word	0xfffa3942
  40d600:	6d9d6122 	.word	0x6d9d6122
  40d604:	fde5380c 	.word	0xfde5380c
  40d608:	a4beea44 	.word	0xa4beea44
  40d60c:	4bdecfa9 	.word	0x4bdecfa9
  40d610:	a8304613 	.word	0xa8304613
  40d614:	49b40821 	.word	0x49b40821
  40d618:	d8a1e681 	.word	0xd8a1e681
  40d61c:	e7d3fbc8 	.word	0xe7d3fbc8
  40d620:	676f02d9 	.word	0x676f02d9
  40d624:	8d2a4c8a 	.word	0x8d2a4c8a
  40d628:	8771f681 	.word	0x8771f681

0040d62c <.LVL191>:
  40d62c:	4411      	add	r1, r2
  40d62e:	eb03 5171 	add.w	r1, r3, r1, ror #21

0040d632 <.LVL193>:
        MD5STEP(F3, c, d, a, b, md5->buffer[7]  + 0xf6bb4b60, 16);
  40d632:	ea8e 0b03 	eor.w	fp, lr, r3
  40d636:	ea8b 0b01 	eor.w	fp, fp, r1
  40d63a:	4a8c      	ldr	r2, [pc, #560]	; (40d86c <.LVL322>)
  40d63c:	4452      	add	r2, sl
  40d63e:	4414      	add	r4, r2

0040d640 <.LVL196>:
  40d640:	44a3      	add	fp, r4
  40d642:	eb01 4b3b 	add.w	fp, r1, fp, ror #16

0040d646 <.LVL198>:
        MD5STEP(F3, b, c, d, a, md5->buffer[10] + 0xbebfbc70, 23);
  40d646:	ea83 0201 	eor.w	r2, r3, r1
  40d64a:	ea82 020b 	eor.w	r2, r2, fp
  40d64e:	4c88      	ldr	r4, [pc, #544]	; (40d870 <.LVL322+0x4>)
  40d650:	6b46      	ldr	r6, [r0, #52]	; 0x34
  40d652:	4434      	add	r4, r6
  40d654:	44a6      	add	lr, r4

0040d656 <.LVL201>:
  40d656:	4472      	add	r2, lr
  40d658:	eb0b 2272 	add.w	r2, fp, r2, ror #9

0040d65c <.LVL203>:
        MD5STEP(F3, a, b, c, d, md5->buffer[13] + 0x289b7ec6,  4);
  40d65c:	ea81 040b 	eor.w	r4, r1, fp
  40d660:	4054      	eors	r4, r2
  40d662:	4e84      	ldr	r6, [pc, #528]	; (40d874 <.LVL322+0x8>)
  40d664:	6c07      	ldr	r7, [r0, #64]	; 0x40
  40d666:	443e      	add	r6, r7
  40d668:	4433      	add	r3, r6

0040d66a <.LVL206>:
  40d66a:	4423      	add	r3, r4
  40d66c:	eb02 7333 	add.w	r3, r2, r3, ror #28

0040d670 <.LVL208>:
        MD5STEP(F3, d, a, b, c, md5->buffer[0]  + 0xeaa127fa, 11);
  40d670:	ea8b 0e02 	eor.w	lr, fp, r2
  40d674:	ea8e 0e03 	eor.w	lr, lr, r3
  40d678:	4c7f      	ldr	r4, [pc, #508]	; (40d878 <.LVL322+0xc>)
  40d67a:	68c6      	ldr	r6, [r0, #12]
  40d67c:	4434      	add	r4, r6
  40d67e:	4421      	add	r1, r4

0040d680 <.LVL211>:
  40d680:	448e      	add	lr, r1
  40d682:	eb03 5e7e 	add.w	lr, r3, lr, ror #21

0040d686 <.LVL213>:
        MD5STEP(F3, c, d, a, b, md5->buffer[3]  + 0xd4ef3085, 16);
  40d686:	ea82 0603 	eor.w	r6, r2, r3
  40d68a:	ea86 060e 	eor.w	r6, r6, lr
  40d68e:	497b      	ldr	r1, [pc, #492]	; (40d87c <.LVL322+0x10>)
  40d690:	6984      	ldr	r4, [r0, #24]
  40d692:	4421      	add	r1, r4
  40d694:	448b      	add	fp, r1

0040d696 <.LVL216>:
  40d696:	445e      	add	r6, fp
  40d698:	eb0e 4636 	add.w	r6, lr, r6, ror #16

0040d69c <.LVL218>:
        MD5STEP(F3, b, c, d, a, md5->buffer[6]  + 0x04881d05, 23);
  40d69c:	ea83 0b0e 	eor.w	fp, r3, lr
  40d6a0:	ea8b 0b06 	eor.w	fp, fp, r6
  40d6a4:	4976      	ldr	r1, [pc, #472]	; (40d880 <.LVL322+0x14>)
  40d6a6:	6a44      	ldr	r4, [r0, #36]	; 0x24
  40d6a8:	4421      	add	r1, r4
  40d6aa:	440a      	add	r2, r1

0040d6ac <.LVL221>:
  40d6ac:	4493      	add	fp, r2
  40d6ae:	eb06 2b7b 	add.w	fp, r6, fp, ror #9

0040d6b2 <.LVL223>:
        MD5STEP(F3, a, b, c, d, md5->buffer[9]  + 0xd9d4d039,  4);
  40d6b2:	ea8e 0406 	eor.w	r4, lr, r6
  40d6b6:	ea84 040b 	eor.w	r4, r4, fp
  40d6ba:	4a72      	ldr	r2, [pc, #456]	; (40d884 <.LVL322+0x18>)
  40d6bc:	6b01      	ldr	r1, [r0, #48]	; 0x30
  40d6be:	440a      	add	r2, r1
  40d6c0:	4413      	add	r3, r2

0040d6c2 <.LVL226>:
  40d6c2:	441c      	add	r4, r3
  40d6c4:	eb0b 7434 	add.w	r4, fp, r4, ror #28

0040d6c8 <.LVL228>:
        MD5STEP(F3, d, a, b, c, md5->buffer[12] + 0xe6db99e5, 11);
  40d6c8:	ea86 010b 	eor.w	r1, r6, fp
  40d6cc:	4061      	eors	r1, r4
  40d6ce:	4b6e      	ldr	r3, [pc, #440]	; (40d888 <.LVL322+0x1c>)
  40d6d0:	4443      	add	r3, r8
  40d6d2:	449e      	add	lr, r3

0040d6d4 <.LVL231>:
  40d6d4:	4471      	add	r1, lr
  40d6d6:	eb04 5171 	add.w	r1, r4, r1, ror #21

0040d6da <.LVL233>:
        MD5STEP(F3, c, d, a, b, md5->buffer[15] + 0x1fa27cf8, 16);
  40d6da:	ea8b 0304 	eor.w	r3, fp, r4
  40d6de:	404b      	eors	r3, r1
  40d6e0:	4a6a      	ldr	r2, [pc, #424]	; (40d88c <.LVL322+0x20>)
  40d6e2:	4462      	add	r2, ip
  40d6e4:	4416      	add	r6, r2

0040d6e6 <.LVL236>:
  40d6e6:	441e      	add	r6, r3
  40d6e8:	eb01 4636 	add.w	r6, r1, r6, ror #16

0040d6ec <.LVL238>:
        MD5STEP(F3, b, c, d, a, md5->buffer[2]  + 0xc4ac5665, 23);
  40d6ec:	ea84 0201 	eor.w	r2, r4, r1
  40d6f0:	4072      	eors	r2, r6
  40d6f2:	4b67      	ldr	r3, [pc, #412]	; (40d890 <.LVL322+0x24>)
  40d6f4:	6947      	ldr	r7, [r0, #20]
  40d6f6:	443b      	add	r3, r7
  40d6f8:	449b      	add	fp, r3

0040d6fa <.LVL241>:
  40d6fa:	445a      	add	r2, fp
  40d6fc:	eb06 2272 	add.w	r2, r6, r2, ror #9

0040d700 <.LVL243>:

        MD5STEP(F4, a, b, c, d, md5->buffer[0]  + 0xf4292244,  6);
  40d700:	ea62 0301 	orn	r3, r2, r1
  40d704:	4073      	eors	r3, r6
  40d706:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 40d8d0 <.LVL322+0x64>
  40d70a:	68c7      	ldr	r7, [r0, #12]
  40d70c:	44be      	add	lr, r7
  40d70e:	4474      	add	r4, lr

0040d710 <.LVL246>:
  40d710:	4423      	add	r3, r4
  40d712:	eb02 63b3 	add.w	r3, r2, r3, ror #26

0040d716 <.LVL248>:
        MD5STEP(F4, d, a, b, c, md5->buffer[7]  + 0x432aff97, 10);
  40d716:	ea63 0b06 	orn	fp, r3, r6
  40d71a:	ea8b 0b02 	eor.w	fp, fp, r2
  40d71e:	4c5d      	ldr	r4, [pc, #372]	; (40d894 <.LVL322+0x28>)
  40d720:	4454      	add	r4, sl
  40d722:	4421      	add	r1, r4

0040d724 <.LVL251>:
  40d724:	448b      	add	fp, r1
  40d726:	eb03 5bbb 	add.w	fp, r3, fp, ror #22

0040d72a <.LVL253>:
        MD5STEP(F4, c, d, a, b, md5->buffer[14] + 0xab9423a7, 15);
  40d72a:	ea6b 0e02 	orn	lr, fp, r2
  40d72e:	ea8e 0e03 	eor.w	lr, lr, r3
  40d732:	4959      	ldr	r1, [pc, #356]	; (40d898 <.LVL322+0x2c>)
  40d734:	4449      	add	r1, r9
  40d736:	440e      	add	r6, r1

0040d738 <.LVL256>:
  40d738:	44b6      	add	lr, r6
  40d73a:	eb0b 4e7e 	add.w	lr, fp, lr, ror #17

0040d73e <.LVL258>:
        MD5STEP(F4, b, c, d, a, md5->buffer[5]  + 0xfc93a039, 21);
  40d73e:	ea6e 0403 	orn	r4, lr, r3
  40d742:	ea84 040b 	eor.w	r4, r4, fp
  40d746:	4955      	ldr	r1, [pc, #340]	; (40d89c <.LVL322+0x30>)
  40d748:	6a06      	ldr	r6, [r0, #32]
  40d74a:	4431      	add	r1, r6
  40d74c:	440a      	add	r2, r1

0040d74e <.LVL261>:
  40d74e:	4414      	add	r4, r2
  40d750:	eb0e 24f4 	add.w	r4, lr, r4, ror #11

0040d754 <.LVL263>:
        MD5STEP(F4, a, b, c, d, md5->buffer[12] + 0x655b59c3,  6);
  40d754:	ea64 060b 	orn	r6, r4, fp
  40d758:	ea86 060e 	eor.w	r6, r6, lr
  40d75c:	4a50      	ldr	r2, [pc, #320]	; (40d8a0 <.LVL322+0x34>)
  40d75e:	4442      	add	r2, r8
  40d760:	4413      	add	r3, r2

0040d762 <.LVL266>:
  40d762:	441e      	add	r6, r3
  40d764:	eb04 66b6 	add.w	r6, r4, r6, ror #26

0040d768 <.LVL268>:
        MD5STEP(F4, d, a, b, c, md5->buffer[3]  + 0x8f0ccc92, 10);
  40d768:	ea66 080e 	orn	r8, r6, lr
  40d76c:	ea88 0804 	eor.w	r8, r8, r4
  40d770:	4b4c      	ldr	r3, [pc, #304]	; (40d8a4 <.LVL322+0x38>)
  40d772:	6982      	ldr	r2, [r0, #24]
  40d774:	4413      	add	r3, r2
  40d776:	449b      	add	fp, r3

0040d778 <.LVL271>:
  40d778:	44d8      	add	r8, fp
  40d77a:	eb06 58b8 	add.w	r8, r6, r8, ror #22

0040d77e <.LVL273>:
        MD5STEP(F4, c, d, a, b, md5->buffer[10] + 0xffeff47d, 15);
  40d77e:	ea68 0204 	orn	r2, r8, r4
  40d782:	4072      	eors	r2, r6
  40d784:	4948      	ldr	r1, [pc, #288]	; (40d8a8 <.LVL322+0x3c>)
  40d786:	6b43      	ldr	r3, [r0, #52]	; 0x34
  40d788:	4419      	add	r1, r3
  40d78a:	448e      	add	lr, r1

0040d78c <.LVL276>:
  40d78c:	4472      	add	r2, lr
  40d78e:	eb08 4272 	add.w	r2, r8, r2, ror #17

0040d792 <.LVL278>:
        MD5STEP(F4, b, c, d, a, md5->buffer[1]  + 0x85845dd1, 21);
  40d792:	ea62 0306 	orn	r3, r2, r6
  40d796:	ea83 0308 	eor.w	r3, r3, r8
  40d79a:	4944      	ldr	r1, [pc, #272]	; (40d8ac <.LVL322+0x40>)
  40d79c:	6907      	ldr	r7, [r0, #16]
  40d79e:	4439      	add	r1, r7
  40d7a0:	440c      	add	r4, r1

0040d7a2 <.LVL281>:
  40d7a2:	4423      	add	r3, r4
  40d7a4:	eb02 23f3 	add.w	r3, r2, r3, ror #11

0040d7a8 <.LVL283>:
        MD5STEP(F4, a, b, c, d, md5->buffer[8]  + 0x6fa87e4f,  6);
  40d7a8:	ea63 0e08 	orn	lr, r3, r8
  40d7ac:	ea8e 0e02 	eor.w	lr, lr, r2
  40d7b0:	493f      	ldr	r1, [pc, #252]	; (40d8b0 <.LVL322+0x44>)
  40d7b2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  40d7b4:	4421      	add	r1, r4
  40d7b6:	440e      	add	r6, r1

0040d7b8 <.LVL286>:
  40d7b8:	44b6      	add	lr, r6
  40d7ba:	eb03 6ebe 	add.w	lr, r3, lr, ror #26

0040d7be <.LVL288>:
        MD5STEP(F4, d, a, b, c, md5->buffer[15] + 0xfe2ce6e0, 10);
  40d7be:	ea6e 0402 	orn	r4, lr, r2
  40d7c2:	405c      	eors	r4, r3
  40d7c4:	493b      	ldr	r1, [pc, #236]	; (40d8b4 <.LVL322+0x48>)
  40d7c6:	4461      	add	r1, ip
  40d7c8:	4488      	add	r8, r1

0040d7ca <.LVL291>:
  40d7ca:	4444      	add	r4, r8
  40d7cc:	eb0e 54b4 	add.w	r4, lr, r4, ror #22

0040d7d0 <.LVL293>:
        MD5STEP(F4, c, d, a, b, md5->buffer[6]  + 0xa3014314, 15);
  40d7d0:	ea64 0603 	orn	r6, r4, r3
  40d7d4:	ea86 060e 	eor.w	r6, r6, lr
  40d7d8:	4937      	ldr	r1, [pc, #220]	; (40d8b8 <.LVL322+0x4c>)
  40d7da:	6a47      	ldr	r7, [r0, #36]	; 0x24
  40d7dc:	4439      	add	r1, r7
  40d7de:	440a      	add	r2, r1

0040d7e0 <.LVL296>:
  40d7e0:	4416      	add	r6, r2
  40d7e2:	eb04 4676 	add.w	r6, r4, r6, ror #17

0040d7e6 <.LVL298>:
        MD5STEP(F4, b, c, d, a, md5->buffer[13] + 0x4e0811a1, 21);
  40d7e6:	ea66 0c0e 	orn	ip, r6, lr
  40d7ea:	ea8c 0c04 	eor.w	ip, ip, r4
  40d7ee:	4933      	ldr	r1, [pc, #204]	; (40d8bc <.LVL322+0x50>)
  40d7f0:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40d7f2:	4411      	add	r1, r2
  40d7f4:	440b      	add	r3, r1

0040d7f6 <.LVL301>:
  40d7f6:	449c      	add	ip, r3
  40d7f8:	eb06 2cfc 	add.w	ip, r6, ip, ror #11

0040d7fc <.LVL303>:
        MD5STEP(F4, a, b, c, d, md5->buffer[4]  + 0xf7537e82,  6);
  40d7fc:	ea6c 0204 	orn	r2, ip, r4
  40d800:	4072      	eors	r2, r6
  40d802:	492f      	ldr	r1, [pc, #188]	; (40d8c0 <.LVL322+0x54>)
  40d804:	69c3      	ldr	r3, [r0, #28]
  40d806:	4419      	add	r1, r3
  40d808:	448e      	add	lr, r1

0040d80a <.LVL306>:
  40d80a:	4472      	add	r2, lr
  40d80c:	eb0c 62b2 	add.w	r2, ip, r2, ror #26

0040d810 <.LVL308>:
        MD5STEP(F4, d, a, b, c, md5->buffer[11] + 0xbd3af235, 10);
  40d810:	ea62 0306 	orn	r3, r2, r6
  40d814:	ea83 030c 	eor.w	r3, r3, ip
  40d818:	492a      	ldr	r1, [pc, #168]	; (40d8c4 <.LVL322+0x58>)
  40d81a:	6b87      	ldr	r7, [r0, #56]	; 0x38
  40d81c:	4439      	add	r1, r7
  40d81e:	440c      	add	r4, r1

0040d820 <.LVL311>:
  40d820:	441c      	add	r4, r3
  40d822:	eb02 54b4 	add.w	r4, r2, r4, ror #22

0040d826 <.LVL313>:
        MD5STEP(F4, c, d, a, b, md5->buffer[2]  + 0x2ad7d2bb, 15);
  40d826:	ea64 030c 	orn	r3, r4, ip
  40d82a:	4053      	eors	r3, r2
  40d82c:	4926      	ldr	r1, [pc, #152]	; (40d8c8 <.LVL322+0x5c>)
  40d82e:	6947      	ldr	r7, [r0, #20]
  40d830:	4439      	add	r1, r7
  40d832:	440e      	add	r6, r1

0040d834 <.LVL316>:
  40d834:	441e      	add	r6, r3
  40d836:	eb04 4676 	add.w	r6, r4, r6, ror #17

0040d83a <.LVL318>:
        MD5STEP(F4, b, c, d, a, md5->buffer[9]  + 0xeb86d391, 21);

        /* Add the working vars back into digest state[]  */
        md5->digest[0] += a;
  40d83a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40d83c:	4413      	add	r3, r2
  40d83e:	64c3      	str	r3, [r0, #76]	; 0x4c
        MD5STEP(F4, b, c, d, a, md5->buffer[9]  + 0xeb86d391, 21);
  40d840:	ea66 0202 	orn	r2, r6, r2

0040d844 <.LVL319>:
  40d844:	4062      	eors	r2, r4
  40d846:	4921      	ldr	r1, [pc, #132]	; (40d8cc <.LVL322+0x60>)
  40d848:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40d84a:	4419      	add	r1, r3
  40d84c:	448c      	add	ip, r1
  40d84e:	4494      	add	ip, r2
        md5->digest[1] += b;
  40d850:	4435      	add	r5, r6
  40d852:	eb05 25fc 	add.w	r5, r5, ip, ror #11
  40d856:	6505      	str	r5, [r0, #80]	; 0x50
        md5->digest[2] += c;
  40d858:	9b01      	ldr	r3, [sp, #4]
  40d85a:	4433      	add	r3, r6
  40d85c:	6543      	str	r3, [r0, #84]	; 0x54
        md5->digest[3] += d;
  40d85e:	6d83      	ldr	r3, [r0, #88]	; 0x58
  40d860:	441c      	add	r4, r3

0040d862 <.LVL320>:
  40d862:	6584      	str	r4, [r0, #88]	; 0x58

        return 0;
    }
  40d864:	2000      	movs	r0, #0

0040d866 <.LVL321>:
  40d866:	b003      	add	sp, #12

0040d868 <.LCFI2>:
  40d868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040d86c <.LVL322>:
  40d86c:	f6bb4b60 	.word	0xf6bb4b60
  40d870:	bebfbc70 	.word	0xbebfbc70
  40d874:	289b7ec6 	.word	0x289b7ec6
  40d878:	eaa127fa 	.word	0xeaa127fa
  40d87c:	d4ef3085 	.word	0xd4ef3085
  40d880:	04881d05 	.word	0x04881d05
  40d884:	d9d4d039 	.word	0xd9d4d039
  40d888:	e6db99e5 	.word	0xe6db99e5
  40d88c:	1fa27cf8 	.word	0x1fa27cf8
  40d890:	c4ac5665 	.word	0xc4ac5665
  40d894:	432aff97 	.word	0x432aff97
  40d898:	ab9423a7 	.word	0xab9423a7
  40d89c:	fc93a039 	.word	0xfc93a039
  40d8a0:	655b59c3 	.word	0x655b59c3
  40d8a4:	8f0ccc92 	.word	0x8f0ccc92
  40d8a8:	ffeff47d 	.word	0xffeff47d
  40d8ac:	85845dd1 	.word	0x85845dd1
  40d8b0:	6fa87e4f 	.word	0x6fa87e4f
  40d8b4:	fe2ce6e0 	.word	0xfe2ce6e0
  40d8b8:	a3014314 	.word	0xa3014314
  40d8bc:	4e0811a1 	.word	0x4e0811a1
  40d8c0:	f7537e82 	.word	0xf7537e82
  40d8c4:	bd3af235 	.word	0xbd3af235
  40d8c8:	2ad7d2bb 	.word	0x2ad7d2bb
  40d8cc:	eb86d391 	.word	0xeb86d391
  40d8d0:	f4292244 	.word	0xf4292244

Disassembly of section .text.ecc_projective_add_point%48:

0040d8d4 <ecc_projective_add_point>:
   mp       The "b" value from montgomery_setup()
   return   MP_OKAY on success
*/
int ecc_projective_add_point(ecc_point* P, ecc_point* Q, ecc_point* R,
                             mp_int* a, mp_int* modulus, mp_digit mp)
{
  40d8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0040d8d8 <.LCFI19>:
  40d8d8:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464

0040d8dc <.LCFI20>:
  40d8dc:	f8dd 7488 	ldr.w	r7, [sp, #1160]	; 0x488
   mp_int rx, ry, rz;
#endif
   mp_int *x, *y, *z;
   int    err;

   if (P == NULL || Q == NULL || R == NULL || modulus == NULL) {
  40d8e0:	2800      	cmp	r0, #0
  40d8e2:	f000 829b 	beq.w	40de1c <.LVL461>
  40d8e6:	460e      	mov	r6, r1
  40d8e8:	4615      	mov	r5, r2
  40d8ea:	469a      	mov	sl, r3
  40d8ec:	4680      	mov	r8, r0
  40d8ee:	2900      	cmp	r1, #0
  40d8f0:	f000 8294 	beq.w	40de1c <.LVL461>
  40d8f4:	2a00      	cmp	r2, #0
  40d8f6:	f000 8294 	beq.w	40de22 <.LVL461+0x6>
  40d8fa:	2f00      	cmp	r7, #0
  40d8fc:	f000 8291 	beq.w	40de22 <.LVL461+0x6>
       return ECC_BAD_ARG_E;
   }

   /* if Q == R then swap P and Q, so we don't require a local x,y,z */
   if (Q == R) {
  40d900:	4291      	cmp	r1, r2
  40d902:	d00e      	beq.n	40d922 <.LBB22>

0040d904 <.LVL257>:
      ecc_point* tPt  = P;
      P = Q;
      Q = tPt;
   }

   if ((err = mp_init_multi(&t1, &t2, NULL, NULL, NULL, NULL)) != MP_OKAY) {
  40d904:	2200      	movs	r2, #0

0040d906 <.LVL258>:
  40d906:	9201      	str	r2, [sp, #4]
  40d908:	9200      	str	r2, [sp, #0]
  40d90a:	4613      	mov	r3, r2

0040d90c <.LVL259>:
  40d90c:	a904      	add	r1, sp, #16
  40d90e:	a88e      	add	r0, sp, #568	; 0x238
  40d910:	f00f f890 	bl	41ca34 <mp_init_multi>

0040d914 <.LVL260>:
  40d914:	4604      	mov	r4, r0
  40d916:	b138      	cbz	r0, 40d928 <.LBE22>

0040d918 <.LVL261>:
   /* clean up */
   mp_clear(&t1);
   mp_clear(&t2);

   return err;
}
  40d918:	4620      	mov	r0, r4
  40d91a:	f20d 4d64 	addw	sp, sp, #1124	; 0x464

0040d91e <.LCFI21>:
  40d91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040d922 <.LBB22>:
      Q = tPt;
  40d922:	4606      	mov	r6, r0
      P = Q;
  40d924:	4690      	mov	r8, r2
  40d926:	e7ed      	b.n	40d904 <.LVL257>

0040d928 <.LBE22>:
       err = mp_sub(modulus, Q->y, &t1);
  40d928:	f506 790a 	add.w	r9, r6, #552	; 0x228
  40d92c:	aa8e      	add	r2, sp, #568	; 0x238
  40d92e:	4649      	mov	r1, r9
  40d930:	4638      	mov	r0, r7

0040d932 <.LVL264>:
  40d932:	f010 f9a6 	bl	41dc82 <.LFE71>

0040d936 <.LVL265>:
   if (err == MP_OKAY) {
  40d936:	4604      	mov	r4, r0
  40d938:	b130      	cbz	r0, 40d948 <.LVL270>

0040d93a <.L136>:
   mp_clear(&t1);
  40d93a:	a88e      	add	r0, sp, #568	; 0x238

0040d93c <.LVL267>:
  40d93c:	f010 f94f 	bl	41dbde <.LFE179>

0040d940 <.LVL268>:
   mp_clear(&t2);
  40d940:	a804      	add	r0, sp, #16
  40d942:	f010 f94c 	bl	41dbde <.LFE179>

0040d946 <.LVL269>:
   return err;
  40d946:	e7e7      	b.n	40d918 <.LVL261>

0040d948 <.LVL270>:
       if ( (mp_cmp(P->x, Q->x) == MP_EQ) &&
  40d948:	4644      	mov	r4, r8
  40d94a:	9603      	str	r6, [sp, #12]
  40d94c:	4631      	mov	r1, r6
  40d94e:	4640      	mov	r0, r8

0040d950 <.LVL271>:
  40d950:	f010 fa04 	bl	41dd5c <.LFE66>

0040d954 <.LVL272>:
  40d954:	2800      	cmp	r0, #0
  40d956:	d066      	beq.n	40da26 <.LVL298>

0040d958 <.LVL273>:
   y = R->y;
  40d958:	f505 7a0a 	add.w	sl, r5, #552	; 0x228

0040d95c <.LVL274>:
   z = R->z;
  40d95c:	f505 6b8a 	add.w	fp, r5, #1104	; 0x450

0040d960 <.LVL275>:
       err = mp_copy(P->x, x);
  40d960:	4629      	mov	r1, r5
  40d962:	4620      	mov	r0, r4
  40d964:	f010 f9a1 	bl	41dcaa <.LFE85>

0040d968 <.LVL276>:
   if (err == MP_OKAY)
  40d968:	4604      	mov	r4, r0

0040d96a <.LVL277>:
  40d96a:	2800      	cmp	r0, #0
  40d96c:	f000 8088 	beq.w	40da80 <.LVL307>

0040d970 <.LVL278>:
   if (err == MP_OKAY)
  40d970:	2c00      	cmp	r4, #0
  40d972:	f000 80e8 	beq.w	40db46 <.LVL337+0x2>
   if (err == MP_OKAY)
  40d976:	2c00      	cmp	r4, #0
  40d978:	f000 8103 	beq.w	40db82 <.LVL348+0x2>
   if (err == MP_OKAY) {
  40d97c:	bb1c      	cbnz	r4, 40d9c6 <.LVL288>
       if (mp_isneg(y))
  40d97e:	f8d5 322c 	ldr.w	r3, [r5, #556]	; 0x22c
  40d982:	2b00      	cmp	r3, #0
  40d984:	f040 811f 	bne.w	40dbc6 <.LVL360+0x2>

0040d988 <.LVL279>:
       err = mp_add(&t1, &t1, &t1);
  40d988:	aa8e      	add	r2, sp, #568	; 0x238
  40d98a:	4611      	mov	r1, r2
  40d98c:	4610      	mov	r0, r2
  40d98e:	f010 f973 	bl	41dc78 <.LFE231>

0040d992 <.LVL280>:
  40d992:	4604      	mov	r4, r0

0040d994 <.LVL281>:
   if (err == MP_OKAY) {
  40d994:	2c00      	cmp	r4, #0
  40d996:	f040 8132 	bne.w	40dbfe <.LVL370>
       if (mp_cmp(&t1, modulus) != MP_LT)
  40d99a:	4639      	mov	r1, r7
  40d99c:	a88e      	add	r0, sp, #568	; 0x238

0040d99e <.LVL282>:
  40d99e:	f010 f9dd 	bl	41dd5c <.LFE66>

0040d9a2 <.LVL283>:
  40d9a2:	f1b0 3fff 	cmp.w	r0, #4294967295
  40d9a6:	d008      	beq.n	40d9ba <.LVL286>
           err = mp_sub(&t1, modulus, &t1);
  40d9a8:	aa8e      	add	r2, sp, #568	; 0x238
  40d9aa:	4639      	mov	r1, r7
  40d9ac:	4610      	mov	r0, r2
  40d9ae:	f010 f968 	bl	41dc82 <.LFE71>

0040d9b2 <.LVL284>:
  40d9b2:	4604      	mov	r4, r0

0040d9b4 <.LVL285>:
   if (err == MP_OKAY)
  40d9b4:	2c00      	cmp	r4, #0
  40d9b6:	f040 8132 	bne.w	40dc1e <.LVL376>

0040d9ba <.LVL286>:
       err = mp_add(&t1, y, &t1);
  40d9ba:	aa8e      	add	r2, sp, #568	; 0x238
  40d9bc:	4651      	mov	r1, sl
  40d9be:	4610      	mov	r0, r2
  40d9c0:	f010 f95a 	bl	41dc78 <.LFE231>

0040d9c4 <.LVL287>:
  40d9c4:	4604      	mov	r4, r0

0040d9c6 <.LVL288>:
   if (err == MP_OKAY) {
  40d9c6:	2c00      	cmp	r4, #0
  40d9c8:	f000 8105 	beq.w	40dbd6 <.LVL363+0x4>
   if (err == MP_OKAY) {
  40d9cc:	2c00      	cmp	r4, #0
  40d9ce:	f000 8128 	beq.w	40dc22 <.LVL376+0x4>

0040d9d2 <.LVL289>:
   if (err == MP_OKAY)
  40d9d2:	2c00      	cmp	r4, #0
  40d9d4:	f000 8150 	beq.w	40dc78 <.LVL390+0x4>
   if (err == MP_OKAY)
  40d9d8:	2c00      	cmp	r4, #0
  40d9da:	f000 81ae 	beq.w	40dd3a <.LVL418+0x2>
   if (err == MP_OKAY)
  40d9de:	2c00      	cmp	r4, #0
  40d9e0:	f000 81c8 	beq.w	40dd74 <.LVL430+0x2>
   if (err == MP_OKAY)
  40d9e4:	2c00      	cmp	r4, #0
  40d9e6:	f000 81e3 	beq.w	40ddb0 <.LVL442+0x2>
   if (err == MP_OKAY)
  40d9ea:	2c00      	cmp	r4, #0
  40d9ec:	f000 8160 	beq.w	40dcb0 <.LVL397>
   if (err == MP_OKAY)
  40d9f0:	2c00      	cmp	r4, #0
  40d9f2:	d1a2      	bne.n	40d93a <.L136>
       err = mp_sub(&t2, &t1, y);
  40d9f4:	4652      	mov	r2, sl
  40d9f6:	a98e      	add	r1, sp, #568	; 0x238
  40d9f8:	a804      	add	r0, sp, #16

0040d9fa <.LVL290>:
  40d9fa:	f010 f942 	bl	41dc82 <.LFE71>

0040d9fe <.LVL291>:
  40d9fe:	4604      	mov	r4, r0

0040da00 <.LVL292>:
   if (err == MP_OKAY) {
  40da00:	2c00      	cmp	r4, #0
  40da02:	d19a      	bne.n	40d93a <.L136>
       if (mp_isneg(y))
  40da04:	f8d5 322c 	ldr.w	r3, [r5, #556]	; 0x22c
  40da08:	2b00      	cmp	r3, #0
  40da0a:	f040 81f6 	bne.w	40ddfa <.LVL454+0x2>

0040da0e <.LVL293>:
       if (mp_isodd(y) == MP_YES)
  40da0e:	4650      	mov	r0, sl
  40da10:	f010 f825 	bl	41da5e <.LFE163>

0040da14 <.LVL294>:
  40da14:	2801      	cmp	r0, #1
  40da16:	f000 81f7 	beq.w	40de08 <.LVL458>
       err = mp_div_2(y, y);
  40da1a:	4651      	mov	r1, sl
  40da1c:	4650      	mov	r0, sl
  40da1e:	f010 f95d 	bl	41dcdc <.LFE111>

0040da22 <.LVL296>:
  40da22:	4604      	mov	r4, r0

0040da24 <.LVL297>:
  40da24:	e789      	b.n	40d93a <.L136>

0040da26 <.LVL298>:
            (get_digit_count(Q->z) && mp_cmp(P->z, Q->z) == MP_EQ) &&
  40da26:	f506 6b8a 	add.w	fp, r6, #1104	; 0x450
  40da2a:	4658      	mov	r0, fp
  40da2c:	f010 f960 	bl	41dcf0 <.LFE115>

0040da30 <.LVL299>:
       if ( (mp_cmp(P->x, Q->x) == MP_EQ) &&
  40da30:	2800      	cmp	r0, #0
  40da32:	d091      	beq.n	40d958 <.LVL273>
            (get_digit_count(Q->z) && mp_cmp(P->z, Q->z) == MP_EQ) &&
  40da34:	4659      	mov	r1, fp
  40da36:	f508 608a 	add.w	r0, r8, #1104	; 0x450
  40da3a:	f010 f98f 	bl	41dd5c <.LFE66>

0040da3e <.LVL300>:
  40da3e:	2800      	cmp	r0, #0
  40da40:	d18a      	bne.n	40d958 <.LVL273>
            (mp_cmp(P->y, Q->y) == MP_EQ || mp_cmp(P->y, &t1) == MP_EQ)) {
  40da42:	f508 7b0a 	add.w	fp, r8, #552	; 0x228
  40da46:	4649      	mov	r1, r9
  40da48:	4658      	mov	r0, fp
  40da4a:	f010 f987 	bl	41dd5c <.LFE66>

0040da4e <.LVL301>:
            (get_digit_count(Q->z) && mp_cmp(P->z, Q->z) == MP_EQ) &&
  40da4e:	b130      	cbz	r0, 40da5e <.LVL302+0x6>
            (mp_cmp(P->y, Q->y) == MP_EQ || mp_cmp(P->y, &t1) == MP_EQ)) {
  40da50:	a98e      	add	r1, sp, #568	; 0x238
  40da52:	4658      	mov	r0, fp
  40da54:	f010 f982 	bl	41dd5c <.LFE66>

0040da58 <.LVL302>:
  40da58:	2800      	cmp	r0, #0
  40da5a:	f47f af7d 	bne.w	40d958 <.LVL273>
           mp_clear(&t1);
  40da5e:	a88e      	add	r0, sp, #568	; 0x238
  40da60:	f010 f8bd 	bl	41dbde <.LFE179>

0040da64 <.LVL303>:
           mp_clear(&t2);
  40da64:	a804      	add	r0, sp, #16
  40da66:	f010 f8ba 	bl	41dbde <.LFE179>

0040da6a <.LVL304>:
          return ecc_projective_dbl_point(P, R, a, modulus, mp);
  40da6a:	f8dd 348c 	ldr.w	r3, [sp, #1164]	; 0x48c
  40da6e:	9300      	str	r3, [sp, #0]
  40da70:	463b      	mov	r3, r7
  40da72:	4652      	mov	r2, sl
  40da74:	4629      	mov	r1, r5
  40da76:	4640      	mov	r0, r8
  40da78:	f004 fd16 	bl	4124a8 <.LFE25>

0040da7c <.LVL305>:
  40da7c:	4604      	mov	r4, r0

0040da7e <.LVL306>:
  40da7e:	e74b      	b.n	40d918 <.LVL261>

0040da80 <.LVL307>:
       err = mp_copy(P->y, y);
  40da80:	4651      	mov	r1, sl
  40da82:	f508 700a 	add.w	r0, r8, #552	; 0x228

0040da86 <.LVL308>:
  40da86:	f010 f910 	bl	41dcaa <.LFE85>

0040da8a <.LVL309>:
   if (err == MP_OKAY)
  40da8a:	4604      	mov	r4, r0
  40da8c:	2800      	cmp	r0, #0
  40da8e:	d161      	bne.n	40db54 <.LVL340>
       err = mp_copy(P->z, z);
  40da90:	4659      	mov	r1, fp
  40da92:	f508 608a 	add.w	r0, r8, #1104	; 0x450

0040da96 <.LVL310>:
  40da96:	f010 f908 	bl	41dcaa <.LFE85>

0040da9a <.LVL311>:
   if (err == MP_OKAY) {
  40da9a:	4604      	mov	r4, r0
  40da9c:	2800      	cmp	r0, #0
  40da9e:	f47f af67 	bne.w	40d970 <.LVL278>
       if (!mp_iszero(Q->z)) {
  40daa2:	f506 688a 	add.w	r8, r6, #1104	; 0x450

0040daa6 <.LVL312>:
  40daa6:	4640      	mov	r0, r8

0040daa8 <.LVL313>:
  40daa8:	f010 f904 	bl	41dcb4 <.LFE93>

0040daac <.LVL314>:
  40daac:	b128      	cbz	r0, 40daba <.LVL318>

0040daae <.LVL315>:
       err = mp_sqr(z, &t1);
  40daae:	a98e      	add	r1, sp, #568	; 0x238
  40dab0:	4658      	mov	r0, fp
  40dab2:	f010 f909 	bl	41dcc8 <.LFE105>

0040dab6 <.LVL316>:
  40dab6:	4604      	mov	r4, r0

0040dab8 <.LVL317>:
  40dab8:	e75a      	b.n	40d970 <.LVL278>

0040daba <.LVL318>:
           err = mp_sqr(Q->z, &t1);
  40daba:	a98e      	add	r1, sp, #568	; 0x238
  40dabc:	4640      	mov	r0, r8
  40dabe:	f010 f903 	bl	41dcc8 <.LFE105>

0040dac2 <.LVL319>:
           if (err == MP_OKAY)
  40dac2:	4604      	mov	r4, r0
  40dac4:	b1f0      	cbz	r0, 40db04 <.LVL328+0x6>
           if (err == MP_OKAY)
  40dac6:	2c00      	cmp	r4, #0
  40dac8:	f47f af52 	bne.w	40d970 <.LVL278>
               err = mp_montgomery_reduce(&t1, modulus, mp);
  40dacc:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  40dad0:	4639      	mov	r1, r7
  40dad2:	a88e      	add	r0, sp, #568	; 0x238

0040dad4 <.LVL320>:
  40dad4:	f010 f8fd 	bl	41dcd2 <.LFE110>

0040dad8 <.LVL321>:
  40dad8:	4604      	mov	r4, r0

0040dada <.LVL322>:
           if (err == MP_OKAY)
  40dada:	2c00      	cmp	r4, #0
  40dadc:	d13a      	bne.n	40db54 <.LVL340>
               err = mp_mul(&t1, y, y);
  40dade:	4652      	mov	r2, sl
  40dae0:	4651      	mov	r1, sl
  40dae2:	a88e      	add	r0, sp, #568	; 0x238

0040dae4 <.LVL323>:
  40dae4:	f010 f8d7 	bl	41dc96 <.LFE86>

0040dae8 <.LVL324>:
  40dae8:	4604      	mov	r4, r0

0040daea <.LVL325>:
           if (err == MP_OKAY)
  40daea:	2c00      	cmp	r4, #0
  40daec:	f47f af40 	bne.w	40d970 <.LVL278>
               err = mp_montgomery_reduce(y, modulus, mp);
  40daf0:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  40daf4:	4639      	mov	r1, r7
  40daf6:	4650      	mov	r0, sl

0040daf8 <.LVL326>:
  40daf8:	f010 f8eb 	bl	41dcd2 <.LFE110>

0040dafc <.LVL327>:
  40dafc:	4604      	mov	r4, r0

0040dafe <.LVL328>:
   if (err == MP_OKAY)
  40dafe:	2c00      	cmp	r4, #0
  40db00:	d0d5      	beq.n	40daae <.LVL315>
  40db02:	e036      	b.n	40db72 <.LVL345>
               err = mp_montgomery_reduce(&t1, modulus, mp);
  40db04:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  40db08:	4639      	mov	r1, r7
  40db0a:	a88e      	add	r0, sp, #568	; 0x238

0040db0c <.LVL329>:
  40db0c:	f010 f8e1 	bl	41dcd2 <.LFE110>

0040db10 <.LVL330>:
           if (err == MP_OKAY)
  40db10:	4604      	mov	r4, r0
  40db12:	2800      	cmp	r0, #0
  40db14:	d1e1      	bne.n	40dada <.LVL322>
               err = mp_mul(&t1, x, x);
  40db16:	462a      	mov	r2, r5
  40db18:	4629      	mov	r1, r5
  40db1a:	a88e      	add	r0, sp, #568	; 0x238

0040db1c <.LVL331>:
  40db1c:	f010 f8bb 	bl	41dc96 <.LFE86>

0040db20 <.LVL332>:
           if (err == MP_OKAY)
  40db20:	4604      	mov	r4, r0
  40db22:	2800      	cmp	r0, #0
  40db24:	d1e1      	bne.n	40daea <.LVL325>
               err = mp_montgomery_reduce(x, modulus, mp);
  40db26:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  40db2a:	4639      	mov	r1, r7
  40db2c:	4628      	mov	r0, r5

0040db2e <.LVL333>:
  40db2e:	f010 f8d0 	bl	41dcd2 <.LFE110>

0040db32 <.LVL334>:
           if (err == MP_OKAY)
  40db32:	4604      	mov	r4, r0
  40db34:	2800      	cmp	r0, #0
  40db36:	d1e2      	bne.n	40dafe <.LVL328>
               err = mp_mul(Q->z, &t1, &t1);
  40db38:	aa8e      	add	r2, sp, #568	; 0x238
  40db3a:	4611      	mov	r1, r2
  40db3c:	4640      	mov	r0, r8

0040db3e <.LVL335>:
  40db3e:	f010 f8aa 	bl	41dc96 <.LFE86>

0040db42 <.LVL336>:
  40db42:	4604      	mov	r4, r0

0040db44 <.LVL337>:
  40db44:	e7bf      	b.n	40dac6 <.LVL319+0x4>
       err = mp_montgomery_reduce(&t1, modulus, mp);
  40db46:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  40db4a:	4639      	mov	r1, r7
  40db4c:	a88e      	add	r0, sp, #568	; 0x238

0040db4e <.LVL338>:
  40db4e:	f010 f8c0 	bl	41dcd2 <.LFE110>

0040db52 <.LVL339>:
  40db52:	4604      	mov	r4, r0

0040db54 <.LVL340>:
   if (err == MP_OKAY)
  40db54:	b9e4      	cbnz	r4, 40db90 <.LVL351>
       err = mp_mul(Q->x, &t1, &t2);
  40db56:	aa04      	add	r2, sp, #16
  40db58:	a98e      	add	r1, sp, #568	; 0x238
  40db5a:	9803      	ldr	r0, [sp, #12]

0040db5c <.LVL341>:
  40db5c:	f010 f89b 	bl	41dc96 <.LFE86>

0040db60 <.LVL342>:
   if (err == MP_OKAY)
  40db60:	4604      	mov	r4, r0
  40db62:	b9e0      	cbnz	r0, 40db9e <.LVL354>
       err = mp_montgomery_reduce(&t2, modulus, mp);
  40db64:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  40db68:	4639      	mov	r1, r7
  40db6a:	a804      	add	r0, sp, #16

0040db6c <.LVL343>:
  40db6c:	f010 f8b1 	bl	41dcd2 <.LFE110>

0040db70 <.LVL344>:
  40db70:	4604      	mov	r4, r0

0040db72 <.LVL345>:
   if (err == MP_OKAY)
  40db72:	b9f4      	cbnz	r4, 40dbb2 <.LVL357>
       err = mp_mul(z, &t1, &t1);
  40db74:	aa8e      	add	r2, sp, #568	; 0x238
  40db76:	4611      	mov	r1, r2
  40db78:	4658      	mov	r0, fp

0040db7a <.LVL346>:
  40db7a:	f010 f88c 	bl	41dc96 <.LFE86>

0040db7e <.LVL347>:
  40db7e:	4604      	mov	r4, r0

0040db80 <.LVL348>:
  40db80:	e6f9      	b.n	40d976 <.LVL278+0x6>
       err = mp_montgomery_reduce(&t1, modulus, mp);
  40db82:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  40db86:	4639      	mov	r1, r7
  40db88:	a88e      	add	r0, sp, #568	; 0x238

0040db8a <.LVL349>:
  40db8a:	f010 f8a2 	bl	41dcd2 <.LFE110>

0040db8e <.LVL350>:
  40db8e:	4604      	mov	r4, r0

0040db90 <.LVL351>:
   if (err == MP_OKAY)
  40db90:	b9fc      	cbnz	r4, 40dbd2 <.LVL363>
       err = mp_mul(Q->y, &t1, &t1);
  40db92:	aa8e      	add	r2, sp, #568	; 0x238
  40db94:	4611      	mov	r1, r2
  40db96:	4648      	mov	r0, r9

0040db98 <.LVL352>:
  40db98:	f010 f87d 	bl	41dc96 <.LFE86>

0040db9c <.LVL353>:
  40db9c:	4604      	mov	r4, r0

0040db9e <.LVL354>:
   if (err == MP_OKAY)
  40db9e:	2c00      	cmp	r4, #0
  40dba0:	f47f aef8 	bne.w	40d994 <.LVL281>
       err = mp_montgomery_reduce(&t1, modulus, mp);
  40dba4:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  40dba8:	4639      	mov	r1, r7
  40dbaa:	a88e      	add	r0, sp, #568	; 0x238

0040dbac <.LVL355>:
  40dbac:	f010 f891 	bl	41dcd2 <.LFE110>

0040dbb0 <.LVL356>:
  40dbb0:	4604      	mov	r4, r0

0040dbb2 <.LVL357>:
   if (err == MP_OKAY)
  40dbb2:	2c00      	cmp	r4, #0
  40dbb4:	f47f aefe 	bne.w	40d9b4 <.LVL285>
       err = mp_sub(y, &t1, y);
  40dbb8:	4652      	mov	r2, sl
  40dbba:	a98e      	add	r1, sp, #568	; 0x238
  40dbbc:	4650      	mov	r0, sl

0040dbbe <.LVL358>:
  40dbbe:	f010 f860 	bl	41dc82 <.LFE71>

0040dbc2 <.LVL359>:
  40dbc2:	4604      	mov	r4, r0

0040dbc4 <.LVL360>:
  40dbc4:	e6da      	b.n	40d97c <.LVL278+0xc>
           err = mp_add(y, modulus, y);
  40dbc6:	4652      	mov	r2, sl
  40dbc8:	4639      	mov	r1, r7
  40dbca:	4650      	mov	r0, sl

0040dbcc <.LVL361>:
  40dbcc:	f010 f854 	bl	41dc78 <.LFE231>

0040dbd0 <.LVL362>:
  40dbd0:	4604      	mov	r4, r0

0040dbd2 <.LVL363>:
   if (err == MP_OKAY)
  40dbd2:	b96c      	cbnz	r4, 40dbf0 <.LVL367>
  40dbd4:	e6d8      	b.n	40d988 <.LVL279>
       if (mp_cmp(&t1, modulus) != MP_LT)
  40dbd6:	4639      	mov	r1, r7
  40dbd8:	a88e      	add	r0, sp, #568	; 0x238

0040dbda <.LVL364>:
  40dbda:	f010 f8bf 	bl	41dd5c <.LFE66>

0040dbde <.LVL365>:
  40dbde:	f1b0 3fff 	cmp.w	r0, #4294967295
  40dbe2:	d006      	beq.n	40dbf2 <.LVL368>
           err = mp_sub(&t1, modulus, &t1);
  40dbe4:	aa8e      	add	r2, sp, #568	; 0x238
  40dbe6:	4639      	mov	r1, r7
  40dbe8:	4610      	mov	r0, r2
  40dbea:	f010 f84a 	bl	41dc82 <.LFE71>

0040dbee <.LVL366>:
  40dbee:	4604      	mov	r4, r0

0040dbf0 <.LVL367>:
   if (err == MP_OKAY)
  40dbf0:	bb24      	cbnz	r4, 40dc3c <.LVL380>

0040dbf2 <.LVL368>:
       err = mp_sub(x, &t2, x);
  40dbf2:	462a      	mov	r2, r5
  40dbf4:	a904      	add	r1, sp, #16
  40dbf6:	4628      	mov	r0, r5
  40dbf8:	f010 f843 	bl	41dc82 <.LFE71>

0040dbfc <.LVL369>:
  40dbfc:	4604      	mov	r4, r0

0040dbfe <.LVL370>:
   if (err == MP_OKAY) {
  40dbfe:	bb24      	cbnz	r4, 40dc4a <.LVL383>
       if (mp_isneg(x))
  40dc00:	686b      	ldr	r3, [r5, #4]
  40dc02:	b933      	cbnz	r3, 40dc12 <.LVL373+0x2>

0040dc04 <.LVL371>:
       err = mp_add(&t2, &t2, &t2);
  40dc04:	aa04      	add	r2, sp, #16
  40dc06:	4611      	mov	r1, r2
  40dc08:	4610      	mov	r0, r2
  40dc0a:	f010 f835 	bl	41dc78 <.LFE231>

0040dc0e <.LVL372>:
  40dc0e:	4604      	mov	r4, r0

0040dc10 <.LVL373>:
  40dc10:	e6dc      	b.n	40d9cc <.LVL288+0x6>
           err = mp_add(x, modulus, x);
  40dc12:	462a      	mov	r2, r5
  40dc14:	4639      	mov	r1, r7
  40dc16:	4628      	mov	r0, r5

0040dc18 <.LVL374>:
  40dc18:	f010 f82e 	bl	41dc78 <.LFE231>

0040dc1c <.LVL375>:
  40dc1c:	4604      	mov	r4, r0

0040dc1e <.LVL376>:
   if (err == MP_OKAY)
  40dc1e:	bb1c      	cbnz	r4, 40dc68 <.LVL387>
  40dc20:	e7f0      	b.n	40dc04 <.LVL371>
       if (mp_cmp(&t2, modulus) != MP_LT)
  40dc22:	4639      	mov	r1, r7
  40dc24:	a804      	add	r0, sp, #16

0040dc26 <.LVL377>:
  40dc26:	f010 f899 	bl	41dd5c <.LFE66>

0040dc2a <.LVL378>:
  40dc2a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40dc2e:	d006      	beq.n	40dc3e <.LVL381>
           err = mp_sub(&t2, modulus, &t2);
  40dc30:	aa04      	add	r2, sp, #16
  40dc32:	4639      	mov	r1, r7
  40dc34:	4610      	mov	r0, r2
  40dc36:	f010 f824 	bl	41dc82 <.LFE71>

0040dc3a <.LVL379>:
  40dc3a:	4604      	mov	r4, r0

0040dc3c <.LVL380>:
   if (err == MP_OKAY)
  40dc3c:	bb14      	cbnz	r4, 40dc84 <.LVL393>

0040dc3e <.LVL381>:
       err = mp_add(&t2, x, &t2);
  40dc3e:	aa04      	add	r2, sp, #16
  40dc40:	4629      	mov	r1, r5
  40dc42:	4610      	mov	r0, r2
  40dc44:	f010 f818 	bl	41dc78 <.LFE231>

0040dc48 <.LVL382>:
  40dc48:	4604      	mov	r4, r0

0040dc4a <.LVL383>:
   if (err == MP_OKAY) {
  40dc4a:	2c00      	cmp	r4, #0
  40dc4c:	d165      	bne.n	40dd1a <.LVL413>
       if (mp_cmp(&t2, modulus) != MP_LT)
  40dc4e:	4639      	mov	r1, r7
  40dc50:	a804      	add	r0, sp, #16

0040dc52 <.LVL384>:
  40dc52:	f010 f883 	bl	41dd5c <.LFE66>

0040dc56 <.LVL385>:
  40dc56:	f1b0 3fff 	cmp.w	r0, #4294967295
  40dc5a:	d006      	beq.n	40dc6a <.LVL388>
           err = mp_sub(&t2, modulus, &t2);
  40dc5c:	aa04      	add	r2, sp, #16
  40dc5e:	4639      	mov	r1, r7
  40dc60:	4610      	mov	r0, r2
  40dc62:	f010 f80e 	bl	41dc82 <.LFE71>

0040dc66 <.LVL386>:
  40dc66:	4604      	mov	r4, r0

0040dc68 <.LVL387>:
   if (err == MP_OKAY) {
  40dc68:	b964      	cbnz	r4, 40dc84 <.LVL393>

0040dc6a <.LVL388>:
       if (!mp_iszero(Q->z)) {
  40dc6a:	f506 668a 	add.w	r6, r6, #1104	; 0x450

0040dc6e <.LVL389>:
  40dc6e:	4630      	mov	r0, r6
  40dc70:	f010 f820 	bl	41dcb4 <.LFE93>

0040dc74 <.LVL390>:
  40dc74:	2800      	cmp	r0, #0
  40dc76:	d039      	beq.n	40dcec <.LVL406>
       err = mp_mul(z, x, z);
  40dc78:	465a      	mov	r2, fp
  40dc7a:	4629      	mov	r1, r5
  40dc7c:	4658      	mov	r0, fp
  40dc7e:	f010 f80a 	bl	41dc96 <.LFE86>

0040dc82 <.LVL392>:
  40dc82:	4604      	mov	r4, r0

0040dc84 <.LVL393>:
   if (err == MP_OKAY)
  40dc84:	2c00      	cmp	r4, #0
  40dc86:	d041      	beq.n	40dd0c <.LVL410+0x2>
   if (err == MP_OKAY)
  40dc88:	2c00      	cmp	r4, #0
  40dc8a:	d05c      	beq.n	40dd46 <.LVL421+0x2>
   if (err == MP_OKAY)
  40dc8c:	2c00      	cmp	r4, #0
  40dc8e:	d078      	beq.n	40dd82 <.LVL433+0x2>
   if (err == MP_OKAY) {
  40dc90:	b9a4      	cbnz	r4, 40dcbc <.LVL399>
       if (mp_isneg(x))
  40dc92:	686b      	ldr	r3, [r5, #4]
  40dc94:	2b00      	cmp	r3, #0
  40dc96:	f040 8092 	bne.w	40ddbe <.LVL445+0x2>

0040dc9a <.LVL394>:
       err = mp_sub(&t2, x, &t2);
  40dc9a:	aa04      	add	r2, sp, #16
  40dc9c:	4629      	mov	r1, r5
  40dc9e:	4610      	mov	r0, r2
  40dca0:	f00f ffef 	bl	41dc82 <.LFE71>

0040dca4 <.LVL395>:
  40dca4:	4604      	mov	r4, r0

0040dca6 <.LVL396>:
   if (err == MP_OKAY) {
  40dca6:	b9b4      	cbnz	r4, 40dcd6 <.LVL402>
       if (mp_isneg(&t2))
  40dca8:	9b05      	ldr	r3, [sp, #20]
  40dcaa:	2b00      	cmp	r3, #0
  40dcac:	f040 8097 	bne.w	40ddde <.LVL448+0x14>

0040dcb0 <.LVL397>:
       err = mp_sub(&t2, x, &t2);
  40dcb0:	aa04      	add	r2, sp, #16
  40dcb2:	4629      	mov	r1, r5
  40dcb4:	4610      	mov	r0, r2
  40dcb6:	f00f ffe4 	bl	41dc82 <.LFE71>

0040dcba <.LVL398>:
  40dcba:	4604      	mov	r4, r0

0040dcbc <.LVL399>:
   if (err == MP_OKAY) {
  40dcbc:	2c00      	cmp	r4, #0
  40dcbe:	f47f ae9f 	bne.w	40da00 <.LVL292>
       if (mp_isneg(&t2))
  40dcc2:	9b05      	ldr	r3, [sp, #20]
  40dcc4:	2b00      	cmp	r3, #0
  40dcc6:	f040 8091 	bne.w	40ddec <.LVL451+0x2>

0040dcca <.LVL400>:
       err = mp_mul(&t2, y, &t2);
  40dcca:	aa04      	add	r2, sp, #16
  40dccc:	4651      	mov	r1, sl
  40dcce:	4610      	mov	r0, r2
  40dcd0:	f00f ffe1 	bl	41dc96 <.LFE86>

0040dcd4 <.LVL401>:
  40dcd4:	4604      	mov	r4, r0

0040dcd6 <.LVL402>:
   if (err == MP_OKAY)
  40dcd6:	2c00      	cmp	r4, #0
  40dcd8:	f040 809c 	bne.w	40de14 <.LVL460>
       err = mp_montgomery_reduce(&t2, modulus, mp);
  40dcdc:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  40dce0:	4639      	mov	r1, r7
  40dce2:	a804      	add	r0, sp, #16

0040dce4 <.LVL403>:
  40dce4:	f00f fff5 	bl	41dcd2 <.LFE110>

0040dce8 <.LVL404>:
  40dce8:	4604      	mov	r4, r0

0040dcea <.LVL405>:
  40dcea:	e681      	b.n	40d9f0 <.LVL289+0x1e>

0040dcec <.LVL406>:
           err = mp_mul(z, Q->z, z);
  40dcec:	465a      	mov	r2, fp
  40dcee:	4631      	mov	r1, r6
  40dcf0:	4658      	mov	r0, fp
  40dcf2:	f00f ffd0 	bl	41dc96 <.LFE86>

0040dcf6 <.LVL407>:
           if (err == MP_OKAY)
  40dcf6:	4604      	mov	r4, r0
  40dcf8:	2800      	cmp	r0, #0
  40dcfa:	d1c3      	bne.n	40dc84 <.LVL393>
               err = mp_montgomery_reduce(z, modulus, mp);
  40dcfc:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  40dd00:	4639      	mov	r1, r7
  40dd02:	4658      	mov	r0, fp

0040dd04 <.LVL408>:
  40dd04:	f00f ffe5 	bl	41dcd2 <.LFE110>

0040dd08 <.LVL409>:
  40dd08:	4604      	mov	r4, r0

0040dd0a <.LVL410>:
  40dd0a:	e662      	b.n	40d9d2 <.LVL289>
       err = mp_montgomery_reduce(z, modulus, mp);
  40dd0c:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  40dd10:	4639      	mov	r1, r7
  40dd12:	4658      	mov	r0, fp

0040dd14 <.LVL411>:
  40dd14:	f00f ffdd 	bl	41dcd2 <.LFE110>

0040dd18 <.LVL412>:
  40dd18:	4604      	mov	r4, r0

0040dd1a <.LVL413>:
   if (err == MP_OKAY)
  40dd1a:	b9dc      	cbnz	r4, 40dd54 <.LVL424>
       err = mp_mul(&t1, x, &t1);
  40dd1c:	aa8e      	add	r2, sp, #568	; 0x238
  40dd1e:	4629      	mov	r1, r5
  40dd20:	4610      	mov	r0, r2

0040dd22 <.LVL414>:
  40dd22:	f00f ffb8 	bl	41dc96 <.LFE86>

0040dd26 <.LVL415>:
   if (err == MP_OKAY)
  40dd26:	4604      	mov	r4, r0
  40dd28:	b9d8      	cbnz	r0, 40dd62 <.LVL427>
       err = mp_montgomery_reduce(&t1, modulus, mp);
  40dd2a:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  40dd2e:	4639      	mov	r1, r7
  40dd30:	a88e      	add	r0, sp, #568	; 0x238

0040dd32 <.LVL416>:
  40dd32:	f00f ffce 	bl	41dcd2 <.LFE110>

0040dd36 <.LVL417>:
  40dd36:	4604      	mov	r4, r0

0040dd38 <.LVL418>:
  40dd38:	e64e      	b.n	40d9d8 <.LVL289+0x6>
       err = mp_sqr(x, x);
  40dd3a:	4629      	mov	r1, r5
  40dd3c:	4628      	mov	r0, r5

0040dd3e <.LVL419>:
  40dd3e:	f00f ffc3 	bl	41dcc8 <.LFE105>

0040dd42 <.LVL420>:
  40dd42:	4604      	mov	r4, r0

0040dd44 <.LVL421>:
  40dd44:	e7a0      	b.n	40dc88 <.LVL393+0x4>
       err = mp_montgomery_reduce(x, modulus, mp);
  40dd46:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  40dd4a:	4639      	mov	r1, r7
  40dd4c:	4628      	mov	r0, r5

0040dd4e <.LVL422>:
  40dd4e:	f00f ffc0 	bl	41dcd2 <.LFE110>

0040dd52 <.LVL423>:
  40dd52:	4604      	mov	r4, r0

0040dd54 <.LVL424>:
   if (err == MP_OKAY)
  40dd54:	b9e4      	cbnz	r4, 40dd90 <.LVL436>
       err = mp_mul(&t2, x, &t2);
  40dd56:	aa04      	add	r2, sp, #16
  40dd58:	4629      	mov	r1, r5
  40dd5a:	4610      	mov	r0, r2

0040dd5c <.LVL425>:
  40dd5c:	f00f ff9b 	bl	41dc96 <.LFE86>

0040dd60 <.LVL426>:
  40dd60:	4604      	mov	r4, r0

0040dd62 <.LVL427>:
   if (err == MP_OKAY)
  40dd62:	b9dc      	cbnz	r4, 40dd9c <.LVL439>
       err = mp_montgomery_reduce(&t2, modulus, mp);
  40dd64:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  40dd68:	4639      	mov	r1, r7
  40dd6a:	a804      	add	r0, sp, #16

0040dd6c <.LVL428>:
  40dd6c:	f00f ffb1 	bl	41dcd2 <.LFE110>

0040dd70 <.LVL429>:
  40dd70:	4604      	mov	r4, r0

0040dd72 <.LVL430>:
  40dd72:	e634      	b.n	40d9de <.LVL289+0xc>
       err = mp_mul(&t1, x, &t1);
  40dd74:	aa8e      	add	r2, sp, #568	; 0x238
  40dd76:	4629      	mov	r1, r5
  40dd78:	4610      	mov	r0, r2

0040dd7a <.LVL431>:
  40dd7a:	f00f ff8c 	bl	41dc96 <.LFE86>

0040dd7e <.LVL432>:
  40dd7e:	4604      	mov	r4, r0

0040dd80 <.LVL433>:
  40dd80:	e784      	b.n	40dc8c <.LVL393+0x8>
       err = mp_montgomery_reduce(&t1, modulus, mp);
  40dd82:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  40dd86:	4639      	mov	r1, r7
  40dd88:	a88e      	add	r0, sp, #568	; 0x238

0040dd8a <.LVL434>:
  40dd8a:	f00f ffa2 	bl	41dcd2 <.LFE110>

0040dd8e <.LVL435>:
  40dd8e:	4604      	mov	r4, r0

0040dd90 <.LVL436>:
   if (err == MP_OKAY)
  40dd90:	b9dc      	cbnz	r4, 40ddca <.LVL448>
       err = mp_sqr(y, x);
  40dd92:	4629      	mov	r1, r5
  40dd94:	4650      	mov	r0, sl

0040dd96 <.LVL437>:
  40dd96:	f00f ff97 	bl	41dcc8 <.LFE105>

0040dd9a <.LVL438>:
  40dd9a:	4604      	mov	r4, r0

0040dd9c <.LVL439>:
   if (err == MP_OKAY)
  40dd9c:	2c00      	cmp	r4, #0
  40dd9e:	d182      	bne.n	40dca6 <.LVL396>
       err = mp_montgomery_reduce(x, modulus, mp);
  40dda0:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  40dda4:	4639      	mov	r1, r7
  40dda6:	4628      	mov	r0, r5

0040dda8 <.LVL440>:
  40dda8:	f00f ff93 	bl	41dcd2 <.LFE110>

0040ddac <.LVL441>:
  40ddac:	4604      	mov	r4, r0

0040ddae <.LVL442>:
  40ddae:	e619      	b.n	40d9e4 <.LVL289+0x12>
       err = mp_sub(x, &t2, x);
  40ddb0:	462a      	mov	r2, r5
  40ddb2:	a904      	add	r1, sp, #16
  40ddb4:	4628      	mov	r0, r5

0040ddb6 <.LVL443>:
  40ddb6:	f00f ff64 	bl	41dc82 <.LFE71>

0040ddba <.LVL444>:
  40ddba:	4604      	mov	r4, r0

0040ddbc <.LVL445>:
  40ddbc:	e768      	b.n	40dc90 <.LVL393+0xc>
           err = mp_add(x, modulus, x);
  40ddbe:	462a      	mov	r2, r5
  40ddc0:	4639      	mov	r1, r7
  40ddc2:	4628      	mov	r0, r5

0040ddc4 <.LVL446>:
  40ddc4:	f00f ff58 	bl	41dc78 <.LFE231>

0040ddc8 <.LVL447>:
  40ddc8:	4604      	mov	r4, r0

0040ddca <.LVL448>:
   if (err == MP_OKAY)
  40ddca:	2c00      	cmp	r4, #0
  40ddcc:	f43f af65 	beq.w	40dc9a <.LVL394>
   if (err == MP_OKAY)
  40ddd0:	2c00      	cmp	r4, #0
  40ddd2:	f43f af7a 	beq.w	40dcca <.LVL400>
   if (err == MP_OKAY) {
  40ddd6:	2c00      	cmp	r4, #0
  40ddd8:	f47f adaf 	bne.w	40d93a <.L136>
  40dddc:	e617      	b.n	40da0e <.LVL293>
           err = mp_add(&t2, modulus, &t2);
  40ddde:	aa04      	add	r2, sp, #16
  40dde0:	4639      	mov	r1, r7
  40dde2:	4610      	mov	r0, r2

0040dde4 <.LVL449>:
  40dde4:	f00f ff48 	bl	41dc78 <.LFE231>

0040dde8 <.LVL450>:
  40dde8:	4604      	mov	r4, r0

0040ddea <.LVL451>:
  40ddea:	e5fe      	b.n	40d9ea <.LVL289+0x18>
           err = mp_add(&t2, modulus, &t2);
  40ddec:	aa04      	add	r2, sp, #16
  40ddee:	4639      	mov	r1, r7
  40ddf0:	4610      	mov	r0, r2

0040ddf2 <.LVL452>:
  40ddf2:	f00f ff41 	bl	41dc78 <.LFE231>

0040ddf6 <.LVL453>:
  40ddf6:	4604      	mov	r4, r0

0040ddf8 <.LVL454>:
  40ddf8:	e7ea      	b.n	40ddd0 <.LVL448+0x6>
           err = mp_add(y, modulus, y);
  40ddfa:	4652      	mov	r2, sl
  40ddfc:	4639      	mov	r1, r7
  40ddfe:	4650      	mov	r0, sl

0040de00 <.LVL455>:
  40de00:	f00f ff3a 	bl	41dc78 <.LFE231>

0040de04 <.LVL456>:
  40de04:	4604      	mov	r4, r0

0040de06 <.LVL457>:
  40de06:	e7e6      	b.n	40ddd6 <.LVL448+0xc>

0040de08 <.LVL458>:
           err = mp_add(y, modulus, y);
  40de08:	4652      	mov	r2, sl
  40de0a:	4639      	mov	r1, r7
  40de0c:	4650      	mov	r0, sl
  40de0e:	f00f ff33 	bl	41dc78 <.LFE231>

0040de12 <.LVL459>:
  40de12:	4604      	mov	r4, r0

0040de14 <.LVL460>:
   if (err == MP_OKAY)
  40de14:	2c00      	cmp	r4, #0
  40de16:	f47f ad90 	bne.w	40d93a <.L136>
  40de1a:	e5fe      	b.n	40da1a <.LVL294+0x6>

0040de1c <.LVL461>:
       return ECC_BAD_ARG_E;
  40de1c:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
  40de20:	e57a      	b.n	40d918 <.LVL261>
  40de22:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
  40de26:	e577      	b.n	40d918 <.LVL261>

Disassembly of section .text._malloc_r%49:

0040de28 <_malloc_r>:
  40de28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0040de2c <.LCFI0>:
  40de2c:	f101 060b 	add.w	r6, r1, #11
  40de30:	2e16      	cmp	r6, #22
  40de32:	b083      	sub	sp, #12

0040de34 <.LCFI1>:
  40de34:	4605      	mov	r5, r0
  40de36:	f240 809e 	bls.w	40df76 <.LVL46>

0040de3a <.LVL1>:
  40de3a:	f036 0607 	bics.w	r6, r6, #7

0040de3e <.LVL2>:
  40de3e:	f100 80bd 	bmi.w	40dfbc <.LCFI3>
  40de42:	42b1      	cmp	r1, r6
  40de44:	f200 80ba 	bhi.w	40dfbc <.LCFI3>
  40de48:	f00b f8d4 	bl	418ff4 <.LFE180>

0040de4c <.LVL3>:
  40de4c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40de50:	f0c0 828b 	bcc.w	40e36a <.LVL171>
  40de54:	0a73      	lsrs	r3, r6, #9
  40de56:	f000 80b8 	beq.w	40dfca <.LCFI5>
  40de5a:	2b04      	cmp	r3, #4
  40de5c:	f200 816e 	bhi.w	40e13c <.LCFI11>
  40de60:	09b3      	lsrs	r3, r6, #6
  40de62:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40de66:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40de6a:	00c3      	lsls	r3, r0, #3

0040de6c <.LVL4>:
  40de6c:	4fb9      	ldr	r7, [pc, #740]	; (40e154 <.LCFI11+0x18>)
  40de6e:	443b      	add	r3, r7
  40de70:	f1a3 0108 	sub.w	r1, r3, #8

0040de74 <.LVL5>:
  40de74:	685c      	ldr	r4, [r3, #4]

0040de76 <.LVL6>:
  40de76:	42a1      	cmp	r1, r4
  40de78:	d106      	bne.n	40de88 <.LVL10>
  40de7a:	e00c      	b.n	40de96 <.LVL14>

0040de7c <.LVL7>:
  40de7c:	2a00      	cmp	r2, #0
  40de7e:	f280 80aa 	bge.w	40dfd6 <.LVL62>

0040de82 <.LVL8>:
  40de82:	68e4      	ldr	r4, [r4, #12]
  40de84:	42a1      	cmp	r1, r4
  40de86:	d006      	beq.n	40de96 <.LVL14>

0040de88 <.LVL10>:
  40de88:	6863      	ldr	r3, [r4, #4]
  40de8a:	f023 0303 	bic.w	r3, r3, #3

0040de8e <.LVL11>:
  40de8e:	1b9a      	subs	r2, r3, r6

0040de90 <.LVL12>:
  40de90:	2a0f      	cmp	r2, #15
  40de92:	ddf3      	ble.n	40de7c <.LVL7>

0040de94 <.LVL13>:
  40de94:	4670      	mov	r0, lr

0040de96 <.LVL14>:
  40de96:	693c      	ldr	r4, [r7, #16]
  40de98:	f8df e2d0 	ldr.w	lr, [pc, #720]	; 40e16c <.LCFI11+0x30>
  40de9c:	4574      	cmp	r4, lr
  40de9e:	f000 819f 	beq.w	40e1e0 <.LVL115>
  40dea2:	6863      	ldr	r3, [r4, #4]
  40dea4:	f023 0303 	bic.w	r3, r3, #3

0040dea8 <.LVL16>:
  40dea8:	1b9a      	subs	r2, r3, r6

0040deaa <.LVL17>:
  40deaa:	2a0f      	cmp	r2, #15
  40deac:	f300 8184 	bgt.w	40e1b8 <.LVL110>
  40deb0:	2a00      	cmp	r2, #0
  40deb2:	f8c7 e014 	str.w	lr, [r7, #20]
  40deb6:	f8c7 e010 	str.w	lr, [r7, #16]
  40deba:	f280 809d 	bge.w	40dff8 <.LCFI7>
  40debe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40dec2:	f080 8155 	bcs.w	40e170 <.LVL101>
  40dec6:	08db      	lsrs	r3, r3, #3

0040dec8 <.LVL18>:
  40dec8:	f103 0c01 	add.w	ip, r3, #1
  40decc:	1099      	asrs	r1, r3, #2
  40dece:	687a      	ldr	r2, [r7, #4]

0040ded0 <.LVL19>:
  40ded0:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40ded4:	f8c4 8008 	str.w	r8, [r4, #8]
  40ded8:	2301      	movs	r3, #1

0040deda <.LVL20>:
  40deda:	408b      	lsls	r3, r1
  40dedc:	eb07 01cc 	add.w	r1, r7, ip, lsl #3

0040dee0 <.LVL21>:
  40dee0:	4313      	orrs	r3, r2
  40dee2:	3908      	subs	r1, #8

0040dee4 <.LVL22>:
  40dee4:	60e1      	str	r1, [r4, #12]
  40dee6:	607b      	str	r3, [r7, #4]

0040dee8 <.LVL23>:
  40dee8:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40deec:	f8c8 400c 	str.w	r4, [r8, #12]

0040def0 <.LVL24>:
  40def0:	1082      	asrs	r2, r0, #2
  40def2:	2401      	movs	r4, #1

0040def4 <.LVL25>:
  40def4:	4094      	lsls	r4, r2

0040def6 <.LVL26>:
  40def6:	429c      	cmp	r4, r3
  40def8:	f200 808b 	bhi.w	40e012 <.LCFI9>
  40defc:	421c      	tst	r4, r3
  40defe:	d106      	bne.n	40df0e <.LVL30>
  40df00:	f020 0003 	bic.w	r0, r0, #3

0040df04 <.LVL27>:
  40df04:	0064      	lsls	r4, r4, #1

0040df06 <.LVL28>:
  40df06:	421c      	tst	r4, r3
  40df08:	f100 0004 	add.w	r0, r0, #4

0040df0c <.LVL29>:
  40df0c:	d0fa      	beq.n	40df04 <.LVL27>

0040df0e <.LVL30>:
  40df0e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3

0040df12 <.LVL31>:
  40df12:	46cc      	mov	ip, r9
  40df14:	4680      	mov	r8, r0

0040df16 <.LVL32>:
  40df16:	f8dc 300c 	ldr.w	r3, [ip, #12]

0040df1a <.LVL33>:
  40df1a:	459c      	cmp	ip, r3
  40df1c:	d107      	bne.n	40df2e <.LVL36>
  40df1e:	e161      	b.n	40e1e4 <.LVL116>

0040df20 <.LVL34>:
  40df20:	2a00      	cmp	r2, #0
  40df22:	f280 816f 	bge.w	40e204 <.LVL121>
  40df26:	68db      	ldr	r3, [r3, #12]
  40df28:	459c      	cmp	ip, r3
  40df2a:	f000 815b 	beq.w	40e1e4 <.LVL116>

0040df2e <.LVL36>:
  40df2e:	6859      	ldr	r1, [r3, #4]
  40df30:	f021 0103 	bic.w	r1, r1, #3

0040df34 <.LVL37>:
  40df34:	1b8a      	subs	r2, r1, r6

0040df36 <.LVL38>:
  40df36:	2a0f      	cmp	r2, #15
  40df38:	ddf2      	ble.n	40df20 <.LVL34>
  40df3a:	f8d3 c00c 	ldr.w	ip, [r3, #12]

0040df3e <.LVL39>:
  40df3e:	f8d3 8008 	ldr.w	r8, [r3, #8]

0040df42 <.LVL40>:
  40df42:	9301      	str	r3, [sp, #4]
  40df44:	199c      	adds	r4, r3, r6

0040df46 <.LVL41>:
  40df46:	4628      	mov	r0, r5

0040df48 <.LVL42>:
  40df48:	f046 0601 	orr.w	r6, r6, #1
  40df4c:	f042 0501 	orr.w	r5, r2, #1

0040df50 <.LVL43>:
  40df50:	605e      	str	r6, [r3, #4]
  40df52:	f8c8 c00c 	str.w	ip, [r8, #12]
  40df56:	f8cc 8008 	str.w	r8, [ip, #8]
  40df5a:	617c      	str	r4, [r7, #20]
  40df5c:	613c      	str	r4, [r7, #16]
  40df5e:	f8c4 e00c 	str.w	lr, [r4, #12]
  40df62:	f8c4 e008 	str.w	lr, [r4, #8]
  40df66:	6065      	str	r5, [r4, #4]
  40df68:	505a      	str	r2, [r3, r1]
  40df6a:	f00c ffd3 	bl	41af14 <.LFE269>

0040df6e <.LVL44>:
  40df6e:	9b01      	ldr	r3, [sp, #4]
  40df70:	f103 0408 	add.w	r4, r3, #8

0040df74 <.LVL45>:
  40df74:	e01e      	b.n	40dfb4 <.LVL58>

0040df76 <.LVL46>:
  40df76:	2910      	cmp	r1, #16
  40df78:	d820      	bhi.n	40dfbc <.LCFI3>
  40df7a:	f00b f83b 	bl	418ff4 <.LFE180>

0040df7e <.LVL47>:
  40df7e:	2610      	movs	r6, #16

0040df80 <.LVL48>:
  40df80:	2318      	movs	r3, #24
  40df82:	2002      	movs	r0, #2

0040df84 <.LVL49>:
  40df84:	4f73      	ldr	r7, [pc, #460]	; (40e154 <.LCFI11+0x18>)
  40df86:	443b      	add	r3, r7

0040df88 <.LVL50>:
  40df88:	f1a3 0208 	sub.w	r2, r3, #8

0040df8c <.LVL51>:
  40df8c:	685c      	ldr	r4, [r3, #4]

0040df8e <.LVL52>:
  40df8e:	4294      	cmp	r4, r2
  40df90:	f000 8131 	beq.w	40e1f6 <.LVL119>

0040df94 <.LVL53>:
  40df94:	6863      	ldr	r3, [r4, #4]
  40df96:	68e1      	ldr	r1, [r4, #12]
  40df98:	68a6      	ldr	r6, [r4, #8]
  40df9a:	f023 0303 	bic.w	r3, r3, #3

0040df9e <.LVL54>:
  40df9e:	4423      	add	r3, r4

0040dfa0 <.LVL55>:
  40dfa0:	4628      	mov	r0, r5
  40dfa2:	685a      	ldr	r2, [r3, #4]
  40dfa4:	60f1      	str	r1, [r6, #12]
  40dfa6:	f042 0201 	orr.w	r2, r2, #1
  40dfaa:	608e      	str	r6, [r1, #8]
  40dfac:	605a      	str	r2, [r3, #4]

0040dfae <.LVL56>:
  40dfae:	f00c ffb1 	bl	41af14 <.LFE269>

0040dfb2 <.LVL57>:
  40dfb2:	3408      	adds	r4, #8

0040dfb4 <.LVL58>:
  40dfb4:	4620      	mov	r0, r4
  40dfb6:	b003      	add	sp, #12

0040dfb8 <.LCFI2>:
  40dfb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040dfbc <.LCFI3>:
  40dfbc:	2400      	movs	r4, #0
  40dfbe:	230c      	movs	r3, #12
  40dfc0:	4620      	mov	r0, r4

0040dfc2 <.LVL60>:
  40dfc2:	602b      	str	r3, [r5, #0]
  40dfc4:	b003      	add	sp, #12

0040dfc6 <.LCFI4>:
  40dfc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040dfca <.LCFI5>:
  40dfca:	2040      	movs	r0, #64	; 0x40
  40dfcc:	f44f 7300 	mov.w	r3, #512	; 0x200
  40dfd0:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40dfd4:	e74a      	b.n	40de6c <.LVL4>

0040dfd6 <.LVL62>:
  40dfd6:	4423      	add	r3, r4

0040dfd8 <.LVL63>:
  40dfd8:	68e1      	ldr	r1, [r4, #12]

0040dfda <.LVL64>:
  40dfda:	685a      	ldr	r2, [r3, #4]

0040dfdc <.LVL65>:
  40dfdc:	68a6      	ldr	r6, [r4, #8]

0040dfde <.LVL66>:
  40dfde:	f042 0201 	orr.w	r2, r2, #1
  40dfe2:	60f1      	str	r1, [r6, #12]
  40dfe4:	4628      	mov	r0, r5
  40dfe6:	608e      	str	r6, [r1, #8]
  40dfe8:	605a      	str	r2, [r3, #4]

0040dfea <.LVL67>:
  40dfea:	f00c ff93 	bl	41af14 <.LFE269>

0040dfee <.LVL68>:
  40dfee:	3408      	adds	r4, #8

0040dff0 <.LVL69>:
  40dff0:	4620      	mov	r0, r4
  40dff2:	b003      	add	sp, #12

0040dff4 <.LCFI6>:
  40dff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040dff8 <.LCFI7>:
  40dff8:	4423      	add	r3, r4

0040dffa <.LVL71>:
  40dffa:	4628      	mov	r0, r5

0040dffc <.LVL72>:
  40dffc:	685a      	ldr	r2, [r3, #4]

0040dffe <.LVL73>:
  40dffe:	f042 0201 	orr.w	r2, r2, #1
  40e002:	605a      	str	r2, [r3, #4]

0040e004 <.LVL74>:
  40e004:	f00c ff86 	bl	41af14 <.LFE269>

0040e008 <.LVL75>:
  40e008:	3408      	adds	r4, #8

0040e00a <.LVL76>:
  40e00a:	4620      	mov	r0, r4
  40e00c:	b003      	add	sp, #12

0040e00e <.LCFI8>:
  40e00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040e012 <.LCFI9>:
  40e012:	68bc      	ldr	r4, [r7, #8]

0040e014 <.LVL78>:
  40e014:	6863      	ldr	r3, [r4, #4]
  40e016:	f023 0a03 	bic.w	sl, r3, #3
  40e01a:	45b2      	cmp	sl, r6
  40e01c:	d303      	bcc.n	40e026 <.LBB4>
  40e01e:	ebaa 0306 	sub.w	r3, sl, r6
  40e022:	2b0f      	cmp	r3, #15
  40e024:	dc7a      	bgt.n	40e11c <.LBE4>

0040e026 <.LBB4>:
  40e026:	4b4c      	ldr	r3, [pc, #304]	; (40e158 <.LCFI11+0x1c>)
  40e028:	4a4c      	ldr	r2, [pc, #304]	; (40e15c <.LCFI11+0x20>)
  40e02a:	9301      	str	r3, [sp, #4]
  40e02c:	6811      	ldr	r1, [r2, #0]
  40e02e:	681a      	ldr	r2, [r3, #0]
  40e030:	eb06 0801 	add.w	r8, r6, r1
  40e034:	3201      	adds	r2, #1
  40e036:	bf16      	itet	ne
  40e038:	f108 088f 	addne.w	r8, r8, #143	; 0x8f
  40e03c:	f108 0810 	addeq.w	r8, r8, #16
  40e040:	f028 087f 	bicne.w	r8, r8, #127	; 0x7f
  40e044:	4641      	mov	r1, r8
  40e046:	4628      	mov	r0, r5
  40e048:	f00f f9f4 	bl	41d434 <.LFE91>

0040e04c <.LVL80>:
  40e04c:	f1b0 3fff 	cmp.w	r0, #4294967295
  40e050:	eb04 0b0a 	add.w	fp, r4, sl

0040e054 <.LVL81>:
  40e054:	4681      	mov	r9, r0

0040e056 <.LVL82>:
  40e056:	9b01      	ldr	r3, [sp, #4]
  40e058:	f000 80f1 	beq.w	40e23e <.LBB10+0x4>
  40e05c:	4583      	cmp	fp, r0
  40e05e:	f200 80ec 	bhi.w	40e23a <.LBB10>
  40e062:	4a3f      	ldr	r2, [pc, #252]	; (40e160 <.LCFI11+0x24>)
  40e064:	6811      	ldr	r1, [r2, #0]
  40e066:	4441      	add	r1, r8
  40e068:	6011      	str	r1, [r2, #0]
  40e06a:	f000 8147 	beq.w	40e2fc <.LBB12+0xa>

0040e06e <.LVL83>:
  40e06e:	6818      	ldr	r0, [r3, #0]

0040e070 <.LVL84>:
  40e070:	9201      	str	r2, [sp, #4]
  40e072:	3001      	adds	r0, #1
  40e074:	bf1b      	ittet	ne
  40e076:	eba9 0b0b 	subne.w	fp, r9, fp

0040e07a <.LVL85>:
  40e07a:	4459      	addne	r1, fp
  40e07c:	f8c3 9000 	streq.w	r9, [r3]
  40e080:	6011      	strne	r1, [r2, #0]
  40e082:	f019 0107 	ands.w	r1, r9, #7

0040e086 <.LVL86>:
  40e086:	bf1c      	itt	ne
  40e088:	f1c1 0308 	rsbne	r3, r1, #8
  40e08c:	4499      	addne	r9, r3

0040e08e <.LVL87>:
  40e08e:	eb09 0308 	add.w	r3, r9, r8
  40e092:	bf14      	ite	ne
  40e094:	f1c1 0188 	rsbne	r1, r1, #136	; 0x88

0040e098 <.LVL88>:
  40e098:	2180      	moveq	r1, #128	; 0x80
  40e09a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  40e09e:	eba1 0803 	sub.w	r8, r1, r3

0040e0a2 <.LVL89>:
  40e0a2:	4641      	mov	r1, r8
  40e0a4:	4628      	mov	r0, r5
  40e0a6:	f00f f9c5 	bl	41d434 <.LFE91>

0040e0aa <.LVL90>:
  40e0aa:	1c43      	adds	r3, r0, #1
  40e0ac:	9a01      	ldr	r2, [sp, #4]
  40e0ae:	f000 813f 	beq.w	40e330 <.LVL167>
  40e0b2:	eba0 0309 	sub.w	r3, r0, r9
  40e0b6:	4443      	add	r3, r8
  40e0b8:	f043 0301 	orr.w	r3, r3, #1

0040e0bc <.LVL91>:
  40e0bc:	6811      	ldr	r1, [r2, #0]
  40e0be:	f8c7 9008 	str.w	r9, [r7, #8]
  40e0c2:	4441      	add	r1, r8
  40e0c4:	42bc      	cmp	r4, r7
  40e0c6:	f8c9 3004 	str.w	r3, [r9, #4]
  40e0ca:	6011      	str	r1, [r2, #0]
  40e0cc:	d017      	beq.n	40e0fe <.LVL94>
  40e0ce:	f1ba 0f0f 	cmp.w	sl, #15
  40e0d2:	f240 80ee 	bls.w	40e2b2 <.LBB11>
  40e0d6:	6860      	ldr	r0, [r4, #4]
  40e0d8:	f1aa 030c 	sub.w	r3, sl, #12
  40e0dc:	f023 0307 	bic.w	r3, r3, #7

0040e0e0 <.LVL93>:
  40e0e0:	eb04 0e03 	add.w	lr, r4, r3
  40e0e4:	f000 0001 	and.w	r0, r0, #1
  40e0e8:	f04f 0c05 	mov.w	ip, #5
  40e0ec:	4318      	orrs	r0, r3
  40e0ee:	2b0f      	cmp	r3, #15
  40e0f0:	6060      	str	r0, [r4, #4]
  40e0f2:	f8ce c004 	str.w	ip, [lr, #4]
  40e0f6:	f8ce c008 	str.w	ip, [lr, #8]
  40e0fa:	f200 8110 	bhi.w	40e31e <.LBB13>

0040e0fe <.LVL94>:
  40e0fe:	4b19      	ldr	r3, [pc, #100]	; (40e164 <.LCFI11+0x28>)
  40e100:	68bc      	ldr	r4, [r7, #8]

0040e102 <.LVL95>:
  40e102:	681a      	ldr	r2, [r3, #0]
  40e104:	4291      	cmp	r1, r2
  40e106:	bf88      	it	hi
  40e108:	6019      	strhi	r1, [r3, #0]
  40e10a:	4b17      	ldr	r3, [pc, #92]	; (40e168 <.LCFI11+0x2c>)
  40e10c:	681a      	ldr	r2, [r3, #0]
  40e10e:	4291      	cmp	r1, r2
  40e110:	6862      	ldr	r2, [r4, #4]
  40e112:	bf88      	it	hi
  40e114:	6019      	strhi	r1, [r3, #0]
  40e116:	f022 0203 	bic.w	r2, r2, #3
  40e11a:	e094      	b.n	40e246 <.LBE10>

0040e11c <.LBE4>:
  40e11c:	19a2      	adds	r2, r4, r6
  40e11e:	f043 0301 	orr.w	r3, r3, #1

0040e122 <.LVL97>:
  40e122:	f046 0601 	orr.w	r6, r6, #1
  40e126:	6066      	str	r6, [r4, #4]
  40e128:	4628      	mov	r0, r5
  40e12a:	60ba      	str	r2, [r7, #8]

0040e12c <.LVL98>:
  40e12c:	6053      	str	r3, [r2, #4]
  40e12e:	f00c fef1 	bl	41af14 <.LFE269>

0040e132 <.LVL99>:
  40e132:	3408      	adds	r4, #8
  40e134:	4620      	mov	r0, r4
  40e136:	b003      	add	sp, #12

0040e138 <.LCFI10>:
  40e138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040e13c <.LCFI11>:
  40e13c:	2b14      	cmp	r3, #20
  40e13e:	d970      	bls.n	40e222 <.LVL130>
  40e140:	2b54      	cmp	r3, #84	; 0x54
  40e142:	f200 80ac 	bhi.w	40e29e <.LVL150>
  40e146:	0b33      	lsrs	r3, r6, #12
  40e148:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40e14c:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40e150:	00c3      	lsls	r3, r0, #3
  40e152:	e68b      	b.n	40de6c <.LVL4>
  40e154:	2040cc80 	.word	0x2040cc80
  40e158:	2040d78c 	.word	0x2040d78c
  40e15c:	2040d788 	.word	0x2040d788
  40e160:	2040d65c 	.word	0x2040d65c
  40e164:	2040d780 	.word	0x2040d780
  40e168:	2040d784 	.word	0x2040d784
  40e16c:	2040cc88 	.word	0x2040cc88

0040e170 <.LVL101>:
  40e170:	0a5a      	lsrs	r2, r3, #9

0040e172 <.LVL102>:
  40e172:	2a04      	cmp	r2, #4
  40e174:	d95b      	bls.n	40e22e <.LVL131>
  40e176:	2a14      	cmp	r2, #20
  40e178:	f200 80b3 	bhi.w	40e2e2 <.LVL159>
  40e17c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40e180:	00c9      	lsls	r1, r1, #3
  40e182:	325b      	adds	r2, #91	; 0x5b

0040e184 <.LVL103>:
  40e184:	eb07 0c01 	add.w	ip, r7, r1
  40e188:	5879      	ldr	r1, [r7, r1]
  40e18a:	f1ac 0c08 	sub.w	ip, ip, #8

0040e18e <.LVL104>:
  40e18e:	458c      	cmp	ip, r1
  40e190:	f000 8093 	beq.w	40e2ba <.LBE11>

0040e194 <.LVL105>:
  40e194:	684a      	ldr	r2, [r1, #4]
  40e196:	f022 0203 	bic.w	r2, r2, #3
  40e19a:	4293      	cmp	r3, r2
  40e19c:	d27d      	bcs.n	40e29a <.LVL148>
  40e19e:	6889      	ldr	r1, [r1, #8]
  40e1a0:	458c      	cmp	ip, r1
  40e1a2:	d1f7      	bne.n	40e194 <.LVL105>

0040e1a4 <.LVL107>:
  40e1a4:	f8dc 200c 	ldr.w	r2, [ip, #12]

0040e1a8 <.LVL108>:
  40e1a8:	687b      	ldr	r3, [r7, #4]

0040e1aa <.LVL109>:
  40e1aa:	60e2      	str	r2, [r4, #12]
  40e1ac:	f8c4 c008 	str.w	ip, [r4, #8]
  40e1b0:	6094      	str	r4, [r2, #8]
  40e1b2:	f8cc 400c 	str.w	r4, [ip, #12]
  40e1b6:	e69b      	b.n	40def0 <.LVL24>

0040e1b8 <.LVL110>:
  40e1b8:	19a1      	adds	r1, r4, r6

0040e1ba <.LVL111>:
  40e1ba:	f046 0c01 	orr.w	ip, r6, #1
  40e1be:	f042 0601 	orr.w	r6, r2, #1
  40e1c2:	f8c4 c004 	str.w	ip, [r4, #4]
  40e1c6:	4628      	mov	r0, r5

0040e1c8 <.LVL112>:
  40e1c8:	6179      	str	r1, [r7, #20]
  40e1ca:	6139      	str	r1, [r7, #16]
  40e1cc:	f8c1 e00c 	str.w	lr, [r1, #12]
  40e1d0:	f8c1 e008 	str.w	lr, [r1, #8]
  40e1d4:	604e      	str	r6, [r1, #4]
  40e1d6:	50e2      	str	r2, [r4, r3]
  40e1d8:	f00c fe9c 	bl	41af14 <.LFE269>

0040e1dc <.LVL113>:
  40e1dc:	3408      	adds	r4, #8

0040e1de <.LVL114>:
  40e1de:	e6e9      	b.n	40dfb4 <.LVL58>

0040e1e0 <.LVL115>:
  40e1e0:	687b      	ldr	r3, [r7, #4]
  40e1e2:	e685      	b.n	40def0 <.LVL24>

0040e1e4 <.LVL116>:
  40e1e4:	f108 0801 	add.w	r8, r8, #1

0040e1e8 <.LVL117>:
  40e1e8:	f018 0f03 	tst.w	r8, #3
  40e1ec:	f10c 0c08 	add.w	ip, ip, #8

0040e1f0 <.LVL118>:
  40e1f0:	f47f ae91 	bne.w	40df16 <.LVL32>
  40e1f4:	e037      	b.n	40e266 <.LVL140>

0040e1f6 <.LVL119>:
  40e1f6:	68dc      	ldr	r4, [r3, #12]
  40e1f8:	42a3      	cmp	r3, r4
  40e1fa:	bf08      	it	eq
  40e1fc:	3002      	addeq	r0, #2
  40e1fe:	f43f ae4a 	beq.w	40de96 <.LVL14>
  40e202:	e6c7      	b.n	40df94 <.LVL53>

0040e204 <.LVL121>:
  40e204:	4419      	add	r1, r3

0040e206 <.LVL122>:
  40e206:	461c      	mov	r4, r3

0040e208 <.LVL123>:
  40e208:	684a      	ldr	r2, [r1, #4]

0040e20a <.LVL124>:
  40e20a:	68db      	ldr	r3, [r3, #12]

0040e20c <.LVL125>:
  40e20c:	f854 6f08 	ldr.w	r6, [r4, #8]!

0040e210 <.LVL126>:
  40e210:	f042 0201 	orr.w	r2, r2, #1
  40e214:	604a      	str	r2, [r1, #4]

0040e216 <.LVL127>:
  40e216:	4628      	mov	r0, r5

0040e218 <.LVL128>:
  40e218:	60f3      	str	r3, [r6, #12]
  40e21a:	609e      	str	r6, [r3, #8]
  40e21c:	f00c fe7a 	bl	41af14 <.LFE269>

0040e220 <.LVL129>:
  40e220:	e6c8      	b.n	40dfb4 <.LVL58>

0040e222 <.LVL130>:
  40e222:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40e226:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40e22a:	00c3      	lsls	r3, r0, #3
  40e22c:	e61e      	b.n	40de6c <.LVL4>

0040e22e <.LVL131>:
  40e22e:	099a      	lsrs	r2, r3, #6
  40e230:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40e234:	00c9      	lsls	r1, r1, #3
  40e236:	3238      	adds	r2, #56	; 0x38
  40e238:	e7a4      	b.n	40e184 <.LVL103>

0040e23a <.LBB10>:
  40e23a:	42bc      	cmp	r4, r7
  40e23c:	d059      	beq.n	40e2f2 <.LBB12>
  40e23e:	68bc      	ldr	r4, [r7, #8]

0040e240 <.LVL133>:
  40e240:	6862      	ldr	r2, [r4, #4]
  40e242:	f022 0203 	bic.w	r2, r2, #3

0040e246 <.LBE10>:
  40e246:	4296      	cmp	r6, r2
  40e248:	eba2 0306 	sub.w	r3, r2, r6

0040e24c <.LVL135>:
  40e24c:	d802      	bhi.n	40e254 <.LVL136>
  40e24e:	2b0f      	cmp	r3, #15
  40e250:	f73f af64 	bgt.w	40e11c <.LBE4>

0040e254 <.LVL136>:
  40e254:	4628      	mov	r0, r5
  40e256:	f00c fe5d 	bl	41af14 <.LFE269>

0040e25a <.LVL137>:
  40e25a:	2400      	movs	r4, #0
  40e25c:	e6aa      	b.n	40dfb4 <.LVL58>

0040e25e <.LVL138>:
  40e25e:	f859 3908 	ldr.w	r3, [r9], #-8

0040e262 <.LVL139>:
  40e262:	4599      	cmp	r9, r3
  40e264:	d17f      	bne.n	40e366 <.LVL170>

0040e266 <.LVL140>:
  40e266:	f010 0f03 	tst.w	r0, #3
  40e26a:	f100 30ff 	add.w	r0, r0, #4294967295
  40e26e:	d1f6      	bne.n	40e25e <.LVL138>
  40e270:	687b      	ldr	r3, [r7, #4]
  40e272:	ea23 0304 	bic.w	r3, r3, r4
  40e276:	607b      	str	r3, [r7, #4]

0040e278 <.LVL142>:
  40e278:	0064      	lsls	r4, r4, #1
  40e27a:	429c      	cmp	r4, r3
  40e27c:	f63f aec9 	bhi.w	40e012 <.LCFI9>
  40e280:	2c00      	cmp	r4, #0
  40e282:	f43f aec6 	beq.w	40e012 <.LCFI9>
  40e286:	421c      	tst	r4, r3
  40e288:	4640      	mov	r0, r8

0040e28a <.LVL144>:
  40e28a:	f47f ae40 	bne.w	40df0e <.LVL30>

0040e28e <.LVL145>:
  40e28e:	0064      	lsls	r4, r4, #1

0040e290 <.LVL146>:
  40e290:	421c      	tst	r4, r3
  40e292:	f100 0004 	add.w	r0, r0, #4

0040e296 <.LVL147>:
  40e296:	d0fa      	beq.n	40e28e <.LVL145>
  40e298:	e639      	b.n	40df0e <.LVL30>

0040e29a <.LVL148>:
  40e29a:	468c      	mov	ip, r1

0040e29c <.LVL149>:
  40e29c:	e782      	b.n	40e1a4 <.LVL107>

0040e29e <.LVL150>:
  40e29e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40e2a2:	d813      	bhi.n	40e2cc <.LVL158>
  40e2a4:	0bf3      	lsrs	r3, r6, #15
  40e2a6:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40e2aa:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40e2ae:	00c3      	lsls	r3, r0, #3
  40e2b0:	e5dc      	b.n	40de6c <.LVL4>

0040e2b2 <.LBB11>:
  40e2b2:	2301      	movs	r3, #1
  40e2b4:	f8c9 3004 	str.w	r3, [r9, #4]

0040e2b8 <.LVL152>:
  40e2b8:	e7cc      	b.n	40e254 <.LVL136>

0040e2ba <.LBE11>:
  40e2ba:	687b      	ldr	r3, [r7, #4]

0040e2bc <.LVL154>:
  40e2bc:	1092      	asrs	r2, r2, #2

0040e2be <.LVL155>:
  40e2be:	2101      	movs	r1, #1

0040e2c0 <.LVL156>:
  40e2c0:	fa01 f202 	lsl.w	r2, r1, r2
  40e2c4:	4313      	orrs	r3, r2
  40e2c6:	607b      	str	r3, [r7, #4]

0040e2c8 <.LVL157>:
  40e2c8:	4662      	mov	r2, ip
  40e2ca:	e76e      	b.n	40e1aa <.LVL109>

0040e2cc <.LVL158>:
  40e2cc:	f240 5254 	movw	r2, #1364	; 0x554
  40e2d0:	4293      	cmp	r3, r2
  40e2d2:	d81e      	bhi.n	40e312 <.LBE12>
  40e2d4:	0cb3      	lsrs	r3, r6, #18
  40e2d6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40e2da:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40e2de:	00c3      	lsls	r3, r0, #3
  40e2e0:	e5c4      	b.n	40de6c <.LVL4>

0040e2e2 <.LVL159>:
  40e2e2:	2a54      	cmp	r2, #84	; 0x54
  40e2e4:	d828      	bhi.n	40e338 <.LBE13>
  40e2e6:	0b1a      	lsrs	r2, r3, #12
  40e2e8:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40e2ec:	00c9      	lsls	r1, r1, #3
  40e2ee:	326e      	adds	r2, #110	; 0x6e
  40e2f0:	e748      	b.n	40e184 <.LVL103>

0040e2f2 <.LBB12>:
  40e2f2:	4a20      	ldr	r2, [pc, #128]	; (40e374 <.LVL171+0xa>)
  40e2f4:	6811      	ldr	r1, [r2, #0]
  40e2f6:	4441      	add	r1, r8
  40e2f8:	6011      	str	r1, [r2, #0]
  40e2fa:	e6b8      	b.n	40e06e <.LVL83>
  40e2fc:	f01b 0f7f 	tst.w	fp, #127	; 0x7f
  40e300:	f47f aeb5 	bne.w	40e06e <.LVL83>

0040e304 <.LVL161>:
  40e304:	eb0a 0308 	add.w	r3, sl, r8

0040e308 <.LVL162>:
  40e308:	68ba      	ldr	r2, [r7, #8]
  40e30a:	f043 0301 	orr.w	r3, r3, #1

0040e30e <.LVL163>:
  40e30e:	6053      	str	r3, [r2, #4]
  40e310:	e6f5      	b.n	40e0fe <.LVL94>

0040e312 <.LBE12>:
  40e312:	207f      	movs	r0, #127	; 0x7f
  40e314:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40e318:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40e31c:	e5a6      	b.n	40de6c <.LVL4>

0040e31e <.LBB13>:
  40e31e:	f104 0108 	add.w	r1, r4, #8
  40e322:	4628      	mov	r0, r5
  40e324:	9201      	str	r2, [sp, #4]
  40e326:	f007 f837 	bl	415398 <_free_r>

0040e32a <.LVL166>:
  40e32a:	9a01      	ldr	r2, [sp, #4]
  40e32c:	6811      	ldr	r1, [r2, #0]
  40e32e:	e6e6      	b.n	40e0fe <.LVL94>

0040e330 <.LVL167>:
  40e330:	2301      	movs	r3, #1

0040e332 <.LVL168>:
  40e332:	f04f 0800 	mov.w	r8, #0
  40e336:	e6c1      	b.n	40e0bc <.LVL91>

0040e338 <.LBE13>:
  40e338:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40e33c:	d805      	bhi.n	40e34a <.LBE13+0x12>
  40e33e:	0bda      	lsrs	r2, r3, #15
  40e340:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40e344:	00c9      	lsls	r1, r1, #3
  40e346:	3277      	adds	r2, #119	; 0x77
  40e348:	e71c      	b.n	40e184 <.LVL103>
  40e34a:	f240 5154 	movw	r1, #1364	; 0x554
  40e34e:	428a      	cmp	r2, r1
  40e350:	d805      	bhi.n	40e35e <.LBE13+0x26>
  40e352:	0c9a      	lsrs	r2, r3, #18
  40e354:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40e358:	00c9      	lsls	r1, r1, #3
  40e35a:	327c      	adds	r2, #124	; 0x7c
  40e35c:	e712      	b.n	40e184 <.LVL103>
  40e35e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40e362:	227e      	movs	r2, #126	; 0x7e
  40e364:	e70e      	b.n	40e184 <.LVL103>

0040e366 <.LVL170>:
  40e366:	687b      	ldr	r3, [r7, #4]
  40e368:	e786      	b.n	40e278 <.LVL142>

0040e36a <.LVL171>:
  40e36a:	08f0      	lsrs	r0, r6, #3
  40e36c:	f106 0308 	add.w	r3, r6, #8
  40e370:	e608      	b.n	40df84 <.LVL49>
  40e372:	bf00      	nop
  40e374:	2040d65c 	.word	0x2040d65c

Disassembly of section .rodata.client_key_der_2048%50:

0040e378 <client_key_der_2048>:
  40e378:	a4048230 02000102 00010182 2bd103c3     0..............+
  40e388:	32a439fe c8533b45 7c2a2b84 aabd9a74     .9.2E;S..+*|t...
  40e398:	4707522a b236a6d6 d08e3207 c67b69ba     *R.G..6..2...i{.
  40e3a8:	d49e44c3 2dfd4881 678ba268 c875a1bb     .D...H.-h..g..u.
  40e3b8:	d24a2c36 ba8bf71b eff90dcf 1e81f1ec     6,J.............
  40e3c8:	47039b7b cc65bf9a 6924657f 8914e8a6     {..G..e..e$i....
  40e3d8:	f734e45b 9314b0c5 3a7b67f5 01e1787a     [.4......g{:zx..
  40e3e8:	a6915656 d28d4213 4c9c403c df86d1ef     VV...B..<@.L....
  40e3f8:	0c1b5137 f1f53ba1 e4354aa3 df96cee1     7Q...;...J5.....
  40e408:	4ebf7e1b e810d097 813008a8 430b20af     .~.N......0.. .C
  40e418:	6774c514 6f8232b4 88c2868d 83369940     ..tg.2.o....@.6.
  40e428:	72401eba 52d71722 b0732465 cd19efce     ..@r"..Re$s.....
  40e438:	6c78ffae 0312c07b 0d724ed4 a33b6d50     ..xl{....Nr.Pm;.
  40e448:	5e99a33b 0cd9c89d 8ad9b385 db2654d9     ;..^.........T&.
  40e458:	bbacfa6d c44c25ff 71f479d1 184086d3     m....%L..y.q..@.
  40e468:	b563b013 c4304e72 2d868497 15d72f56     ..c.rN0....-V/..
  40e478:	aec07ff7 e55bfcf5 d3baa1fb 00010302     ......[.........
  40e488:	01820201 e6a20001 71105fd8 2e9e0864     ........._.qd...
  40e498:	1e6dd16d b10ad285 2cce478c 12a06a51     m.m......G.,Qj..
  40e4a8:	91de539e ea6d1d4c 77f27b59 d9c6d9aa     .S..L.m.Y{.w....
  40e4b8:	e1d8ab8a 2663e416 136cb5ff a5e3b859     ......c&..l.Y...
  40e4c8:	2e1772c8 e56f9f0c 6f763f59 c211b149     .r....o.Y?voI...
  40e4d8:	29162e5a 8eb7de0d a2d540dc a11ee0ee     Z..).....@......
  40e4e8:	db97bef4 14966386 600998cd 9c76302d     .....c.....`-0v.
  40e4f8:	88e6cd3c 799247ee e2005a0b 7c115f5e     <....G.y.Z..^_.|
  40e508:	b708f97d 2a890620 ab00fd5d b3f0e122     }... ..*]..."...
  40e518:	5ea924bc 001f0e26 9a21fe2d d36d5b53     .$.^&...-.!.S[m.
  40e528:	8294ab2b d8364368 22c62ff6 5d41b5fc     +...hC6../."..A]
  40e538:	ea60330d e87e7da4 5691554b 8f575cd3     .3`..}~.KU.V.\W.
  40e548:	2f17941f 9ee9deaa 8acff4a8 e4a08e4c     .../........L...
  40e558:	cfb27356 69c5864f 2024f33c 0c965c8b     Vs..O..i<.$ .\..
  40e568:	3b126bfa dfc1679a a5b296c6 9b0d92d5     .k.;.g..........
  40e578:	24684209 50d44510 483917e4 948b35d0     .Bh$.E.P..9H.5..
  40e588:	8fde116d 810259ca 24ea0081 3369f9a7     m....Y.....$..i3
  40e598:	52dc71e9 2821887d bade492f cce91672     .q.R}.!(/I..r...
  40e5a8:	0d887a47 58845794 b0813a16 a6cfa23f     Gz...W.X.:..?...
  40e5b8:	06b01e6c e78f0029 dbac7677 5ed9c7ca     l...)...wv.....^
  40e5c8:	90263f9b 38fcae52 bb140090 94580fb4     .?&.R..8......X.
  40e5d8:	7e6a2fe7 21414f1c 1f5931d4 8d1a8a4e     ./j~.OA!.1Y.N...
  40e5e8:	226c57a7 7ef4e5d8 cb10a632 0355a564     .Wl"...~2...d.U.
  40e5f8:	0527a687 b6d7c38c ba4db227 8f47da30     ..'.....'.M.0.G.
  40e608:	8b3dd354 98948d84 8102a558 38d50081     T.=.....X......8
  40e618:	c58fc31b 0b470c93 c592356f c8468db0     ......G.o5....F.
  40e628:	f58f1892 eff70a80 b980fea1 caba2ab5     .............*..
  40e638:	a55db018 8d93d007 1c049cd8 a68e62d4     ..]..........b..
  40e648:	ff018126 632a8ace aa403534 89de806d     &.....*c45@.m...
  40e658:	4d576a23 93ad6e9e 0b90564e 8b739d6d     #jWM.n..NV..m.s.
  40e668:	3d27ae0c aaf04ede 67786cc5 9c52946c     ..'=.N...lxgl.R.
  40e678:	2d6c6737 dfafbbef c43c90a6 968dcf47     7gl-......<.G...
  40e688:	b4a9989e 50a6c59f fbf0b3dc 81021774     .......P....t...
  40e698:	09835e80 7cbabd62 7442bfa2 d21c7cf5     .^..b..|..Bt.|..
  40e6a8:	0d04c969 3d3e7e85 18c31224 f329f37b     i....~>=$...{.).
  40e6b8:	6c760e5f 41e47559 329d6984 ab22cdf3     _.vlYu.A.i.2..".
  40e6c8:	4aba35b0 d9e53cb2 4f62b658 9ee5de5d     .5.J.<..X.bO]...
  40e6d8:	b253ca0a b39ef72c 795b0a6b 916eec65     ..S.,...k.[ye.n.
  40e6e8:	f620924e ed16fcfc e20c76d3 69b27fec     N. ......v.....i
  40e6f8:	0e786b13 b464465a a025b75e 4b3a755a     .kx.ZFd.^.%.Zu:K
  40e708:	3e3cc7ef b826fdf7 0a99c420 c3be739a     ..<>..&. ....s..
  40e718:	81810219 9344ba00 1934ac14 60915f3b     ......D...4.;_.`
  40e728:	d6b4f7ac 51360581 65e83d53 dc2eafdc     ......6QS=.e....
  40e738:	7dc93e61 f0877fb8 82039b3b 72ce3729     a>.}....;...)7.r
  40e748:	b1d5114e a0070cc1 8d4a9199 cf79ec7f     N.........J...y.
  40e758:	e9b539f1 f762ec85 64bc7dda 0e3c224d     .9....b..}.dM"<.
  40e768:	f551d6f2 c099d887 0f5d2011 e25bfd29     ..Q...... ].).[.
  40e778:	d91cd9ae fc6d5621 ed5fd084 181c1510     ....!Vm..._.....
  40e788:	3dc4e721 9ed0d74b 22cf956a 9e7b03c9     !..=K...j.."..{.
  40e798:	fc0160e3 8081022f cf4bd011 9fb9671b     .`../.....K..g..
  40e7a8:	86477510 c231ae65 59ac30c6 0fd95006     .uG.e.1..0.Y.P..
  40e7b8:	f70670b5 62c8d3f0 6edaa87c d33f21f6     .p.....b|..n.!?.
  40e7c8:	8aea5f7f 2ad93fab d251f35e e33730c2     ._...?.*^.Q..07.
  40e7d8:	0d75a32d 34214d1e 5c7057d5 ec72bf89     -.u..M!4.Wp\..r.
  40e7e8:	d5686e4a 337418cd 453a8c4e 4096e68f     Jnh...t3N.:E...@
  40e7f8:	19f963eb dd513a86 f3b04b89 285d9ff9     .c...:Q..K....](
  40e808:	35be3895 e75ccaab a1345393 39135d45     .8.5..\..S4.E].9
  40e818:	a1464265 bff5cd9f                       eBF.....

Disassembly of section .text.APP_Tasks%51:

0040e820 <APP_Tasks>:

  Remarks:
    See prototype in app.h.
 */

void APP_Tasks(void) {
  40e820:	b510      	push	{r4, lr}

0040e822 <.LCFI70>:

    /* Check the application's current state. */
    switch (appData.state) {
  40e822:	4b63      	ldr	r3, [pc, #396]	; (40e9b0 <.LVL197+0xa>)
  40e824:	781b      	ldrb	r3, [r3, #0]
  40e826:	2b14      	cmp	r3, #20
  40e828:	f200 8206 	bhi.w	40ec38 <.LVL218+0x6>
  40e82c:	e8df f013 	tbh	[pc, r3, lsl #1]
  40e830:	00190015 	.word	0x00190015
  40e834:	002d0023 	.word	0x002d0023
  40e838:	003d0037 	.word	0x003d0037
  40e83c:	00510047 	.word	0x00510047
  40e840:	0065005b 	.word	0x0065005b
  40e844:	00a1006f 	.word	0x00a1006f
  40e848:	008d00ab 	.word	0x008d00ab
  40e84c:	007900b5 	.word	0x007900b5
  40e850:	00970083 	.word	0x00970083
  40e854:	020400c4 	.word	0x020400c4
  40e858:	01b2      	.short	0x01b2
            /* Show Hyperterminal is working using available output functions */
            // SYS_MESSAGE("SYS_MESSAGE:" "\r\n Application created " __DATE__ " " __TIME__ " initialized!\r\n");            
            // SYS_DEBUG(SYS_ERROR_INFO,"SYS_DEBUG:" "\r\n Application created " __DATE__ " " __TIME__ " initialized!\r\n");
            // SYS_CONSOLE_Write(SYS_CONSOLE_INDEX_0, STDOUT_FILENO, msgBuffer, strlen(msgBuffer));            

            appData.state = APP_STATE_TEST_MD5;
  40e85a:	2201      	movs	r2, #1
  40e85c:	4b54      	ldr	r3, [pc, #336]	; (40e9b0 <.LVL197+0xa>)
  40e85e:	701a      	strb	r2, [r3, #0]
            break;
  40e860:	bd10      	pop	{r4, pc}
        }

        case APP_STATE_TEST_MD5:
#ifndef NO_MD5
            testCount++;
  40e862:	4a54      	ldr	r2, [pc, #336]	; (40e9b4 <.LVL197+0xe>)
  40e864:	6813      	ldr	r3, [r2, #0]
  40e866:	3301      	adds	r3, #1
  40e868:	6013      	str	r3, [r2, #0]
            md5_test();
  40e86a:	f00a fcd7 	bl	41921c <md5_test>

0040e86e <.LVL181>:
#endif
            appData.state = APP_STATE_TEST_SHA;
  40e86e:	2202      	movs	r2, #2
  40e870:	4b4f      	ldr	r3, [pc, #316]	; (40e9b0 <.LVL197+0xa>)
  40e872:	701a      	strb	r2, [r3, #0]
            break;
  40e874:	bd10      	pop	{r4, pc}


         case APP_STATE_TEST_SHA:
#ifndef NO_SHA
            testCount++;
  40e876:	4a4f      	ldr	r2, [pc, #316]	; (40e9b4 <.LVL197+0xe>)
  40e878:	6813      	ldr	r3, [r2, #0]
  40e87a:	3301      	adds	r3, #1
  40e87c:	6013      	str	r3, [r2, #0]
            sha_test();
  40e87e:	f00a fb01 	bl	418e84 <sha_test>

0040e882 <.LVL182>:
#endif
            appData.state = APP_STATE_TEST_SHA256;
  40e882:	2203      	movs	r2, #3
  40e884:	4b4a      	ldr	r3, [pc, #296]	; (40e9b0 <.LVL197+0xa>)
  40e886:	701a      	strb	r2, [r3, #0]
            break;
  40e888:	bd10      	pop	{r4, pc}

         case APP_STATE_TEST_SHA256:
#ifndef NO_SHA256
            testCount++;
  40e88a:	4a4a      	ldr	r2, [pc, #296]	; (40e9b4 <.LVL197+0xe>)
  40e88c:	6813      	ldr	r3, [r2, #0]
  40e88e:	3301      	adds	r3, #1
  40e890:	6013      	str	r3, [r2, #0]
            sha256_test();
  40e892:	f00b fc47 	bl	41a124 <.LFE2>

0040e896 <.LVL183>:
#endif
            appData.state = APP_STATE_TEST_SHA384;
  40e896:	2204      	movs	r2, #4
  40e898:	4b45      	ldr	r3, [pc, #276]	; (40e9b0 <.LVL197+0xa>)
  40e89a:	701a      	strb	r2, [r3, #0]
            break;
  40e89c:	bd10      	pop	{r4, pc}
            
        case APP_STATE_TEST_SHA384:
#ifdef WOLFSSL_SHA384
            sha384_test();
  40e89e:	f00c fa7f 	bl	41ada0 <sha384_test>

0040e8a2 <.LVL184>:
#endif
            appData.state = APP_STATE_TEST_SHA512;
  40e8a2:	2205      	movs	r2, #5
  40e8a4:	4b42      	ldr	r3, [pc, #264]	; (40e9b0 <.LVL197+0xa>)
  40e8a6:	701a      	strb	r2, [r3, #0]
            break;
  40e8a8:	bd10      	pop	{r4, pc}

        case APP_STATE_TEST_SHA512:
#ifdef WOLFSSL_SHA512
            testCount++;
  40e8aa:	4a42      	ldr	r2, [pc, #264]	; (40e9b4 <.LVL197+0xe>)
  40e8ac:	6813      	ldr	r3, [r2, #0]
  40e8ae:	3301      	adds	r3, #1
  40e8b0:	6013      	str	r3, [r2, #0]
            sha512_test();
  40e8b2:	f00c fab3 	bl	41ae1c <.LFE166>

0040e8b6 <.LVL185>:
#endif
            appData.state = APP_STATE_TEST_HMAC_MD5;
  40e8b6:	2206      	movs	r2, #6
  40e8b8:	4b3d      	ldr	r3, [pc, #244]	; (40e9b0 <.LVL197+0xa>)
  40e8ba:	701a      	strb	r2, [r3, #0]
            break;
  40e8bc:	bd10      	pop	{r4, pc}
  
        case APP_STATE_TEST_HMAC_MD5:
#if !defined(NO_HMAC) && !defined(NO_MD5)
            testCount++;
  40e8be:	4a3d      	ldr	r2, [pc, #244]	; (40e9b4 <.LVL197+0xe>)
  40e8c0:	6813      	ldr	r3, [r2, #0]
  40e8c2:	3301      	adds	r3, #1
  40e8c4:	6013      	str	r3, [r2, #0]
            hmac_md5_test();
  40e8c6:	f009 fc47 	bl	418158 <.LFE220>

0040e8ca <.LVL186>:
#endif
            appData.state = APP_STATE_TEST_HMAC_SHA;
  40e8ca:	2207      	movs	r2, #7
  40e8cc:	4b38      	ldr	r3, [pc, #224]	; (40e9b0 <.LVL197+0xa>)
  40e8ce:	701a      	strb	r2, [r3, #0]
            break;
  40e8d0:	bd10      	pop	{r4, pc}
            
        case APP_STATE_TEST_HMAC_SHA:
#if !defined(NO_HMAC) && !defined(NO_SHA)
            testCount++;
  40e8d2:	4a38      	ldr	r2, [pc, #224]	; (40e9b4 <.LVL197+0xe>)
  40e8d4:	6813      	ldr	r3, [r2, #0]
  40e8d6:	3301      	adds	r3, #1
  40e8d8:	6013      	str	r3, [r2, #0]
            hmac_sha_test();
  40e8da:	f009 fca3 	bl	418224 <.LFE168>

0040e8de <.LVL187>:
#endif
            appData.state = APP_STATE_TEST_HMAC_SHA256;
  40e8de:	2208      	movs	r2, #8
  40e8e0:	4b33      	ldr	r3, [pc, #204]	; (40e9b0 <.LVL197+0xa>)
  40e8e2:	701a      	strb	r2, [r3, #0]
            break;
  40e8e4:	bd10      	pop	{r4, pc}
             
        case APP_STATE_TEST_HMAC_SHA256:
#if !defined(NO_HMAC) && !defined(NO_SHA256)
            testCount++;
  40e8e6:	4a33      	ldr	r2, [pc, #204]	; (40e9b4 <.LVL197+0xe>)
  40e8e8:	6813      	ldr	r3, [r2, #0]
  40e8ea:	3301      	adds	r3, #1
  40e8ec:	6013      	str	r3, [r2, #0]
            hmac_sha256_test();
  40e8ee:	f009 fcff 	bl	4182f0 <.LFE169>

0040e8f2 <.LVL188>:
#endif
            appData.state = APP_STATE_TEST_HMAC_SHA384;
  40e8f2:	2209      	movs	r2, #9
  40e8f4:	4b2e      	ldr	r3, [pc, #184]	; (40e9b0 <.LVL197+0xa>)
  40e8f6:	701a      	strb	r2, [r3, #0]
            break;
  40e8f8:	bd10      	pop	{r4, pc}
              
        case APP_STATE_TEST_HMAC_SHA384:
#if !defined(NO_HMAC) && defined(WOLFSSL_SHA384)
            testCount++;
  40e8fa:	4a2e      	ldr	r2, [pc, #184]	; (40e9b4 <.LVL197+0xe>)
  40e8fc:	6813      	ldr	r3, [r2, #0]
  40e8fe:	3301      	adds	r3, #1
  40e900:	6013      	str	r3, [r2, #0]
            hmac_sha384_test();
  40e902:	f009 fd5b 	bl	4183bc <.LFE170>

0040e906 <.LVL189>:
#endif
            appData.state = APP_STATE_TEST_HMAC_SHA512;
  40e906:	220a      	movs	r2, #10
  40e908:	4b29      	ldr	r3, [pc, #164]	; (40e9b0 <.LVL197+0xa>)
  40e90a:	701a      	strb	r2, [r3, #0]
            break;
  40e90c:	bd10      	pop	{r4, pc}
              
        case APP_STATE_TEST_HMAC_SHA512:
#if !defined(NO_HMAC) && defined(WOLFSSL_SHA512)
            testCount++;
  40e90e:	4a29      	ldr	r2, [pc, #164]	; (40e9b4 <.LVL197+0xe>)
  40e910:	6813      	ldr	r3, [r2, #0]
  40e912:	3301      	adds	r3, #1
  40e914:	6013      	str	r3, [r2, #0]
            hmac_sha512_test();
  40e916:	f009 fe83 	bl	418620 <.LFE170>

0040e91a <.LVL190>:
#endif
            appData.state = APP_STATE_TEST_RANDOM;
  40e91a:	220f      	movs	r2, #15
  40e91c:	4b24      	ldr	r3, [pc, #144]	; (40e9b0 <.LVL197+0xa>)
  40e91e:	701a      	strb	r2, [r3, #0]
            break;
  40e920:	bd10      	pop	{r4, pc}
            
        case APP_STATE_TEST_RANDOM:
#ifndef NO_RNG_TEST
            testCount++;
  40e922:	4a24      	ldr	r2, [pc, #144]	; (40e9b4 <.LVL197+0xe>)
  40e924:	6813      	ldr	r3, [r2, #0]
  40e926:	3301      	adds	r3, #1
  40e928:	6013      	str	r3, [r2, #0]
            random_test();
  40e92a:	f00e f993 	bl	41cc54 <random_test>

0040e92e <.LVL191>:
#endif
            appData.state = APP_STATE_TEST_ECC;
  40e92e:	2210      	movs	r2, #16
  40e930:	4b1f      	ldr	r3, [pc, #124]	; (40e9b0 <.LVL197+0xa>)
  40e932:	701a      	strb	r2, [r3, #0]
            break;
  40e934:	bd10      	pop	{r4, pc}
			
        case APP_STATE_TEST_ECC:
#ifdef HAVE_ECC
            testCount++;
  40e936:	4a1f      	ldr	r2, [pc, #124]	; (40e9b4 <.LVL197+0xe>)
  40e938:	6813      	ldr	r3, [r2, #0]
  40e93a:	3301      	adds	r3, #1
  40e93c:	6013      	str	r3, [r2, #0]
            ecc_test();
  40e93e:	f005 fc07 	bl	414150 <ecc_test>

0040e942 <.LVL192>:
#endif
            appData.state = APP_STATE_TEST_AES;
  40e942:	220d      	movs	r2, #13
  40e944:	4b1a      	ldr	r3, [pc, #104]	; (40e9b0 <.LVL197+0xa>)
  40e946:	701a      	strb	r2, [r3, #0]
            break;
  40e948:	bd10      	pop	{r4, pc}
                          
        case APP_STATE_TEST_AES:
#ifndef NO_AES
            testCount++;
  40e94a:	4a1a      	ldr	r2, [pc, #104]	; (40e9b4 <.LVL197+0xe>)
  40e94c:	6813      	ldr	r3, [r2, #0]
  40e94e:	3301      	adds	r3, #1
  40e950:	6013      	str	r3, [r2, #0]
            aes_test();
  40e952:	f007 f877 	bl	415a44 <.LFE182>

0040e956 <.LVL193>:
#endif
            appData.state = APP_STATE_TEST_COMPRESS;
  40e956:	2211      	movs	r2, #17
  40e958:	4b15      	ldr	r3, [pc, #84]	; (40e9b0 <.LVL197+0xa>)
  40e95a:	701a      	strb	r2, [r3, #0]
            break;
  40e95c:	bd10      	pop	{r4, pc}
                
        case APP_STATE_TEST_COMPRESS:
#ifdef HAVE_LIBZ
            testCount++;
  40e95e:	4a15      	ldr	r2, [pc, #84]	; (40e9b4 <.LVL197+0xe>)
  40e960:	6813      	ldr	r3, [r2, #0]
  40e962:	3301      	adds	r3, #1
  40e964:	6013      	str	r3, [r2, #0]
            compress_test();
  40e966:	f00a f911 	bl	418b8c <.LFE7>

0040e96a <.LVL194>:
#endif
            appData.state = APP_STATE_TEST_DES;
  40e96a:	220b      	movs	r2, #11
  40e96c:	4b10      	ldr	r3, [pc, #64]	; (40e9b0 <.LVL197+0xa>)
  40e96e:	701a      	strb	r2, [r3, #0]
            break;
  40e970:	bd10      	pop	{r4, pc}
              
        case APP_STATE_TEST_DES:
#ifndef NO_DES3
            testCount++;
  40e972:	4a10      	ldr	r2, [pc, #64]	; (40e9b4 <.LVL197+0xe>)
  40e974:	6813      	ldr	r3, [r2, #0]
  40e976:	3301      	adds	r3, #1
  40e978:	6013      	str	r3, [r2, #0]
            des_test();
  40e97a:	f009 ffe1 	bl	418940 <des_test>

0040e97e <.LVL195>:
#endif
            appData.state = APP_STATE_TEST_DES3;
  40e97e:	220c      	movs	r2, #12
  40e980:	4b0b      	ldr	r3, [pc, #44]	; (40e9b0 <.LVL197+0xa>)
  40e982:	701a      	strb	r2, [r3, #0]
            break;
  40e984:	bd10      	pop	{r4, pc}
 
        case APP_STATE_TEST_DES3:
#ifndef NO_DES3
            testCount++;
  40e986:	4a0b      	ldr	r2, [pc, #44]	; (40e9b4 <.LVL197+0xe>)
  40e988:	6813      	ldr	r3, [r2, #0]
  40e98a:	3301      	adds	r3, #1
  40e98c:	6013      	str	r3, [r2, #0]
            des3_test();
  40e98e:	f008 ff17 	bl	4177c0 <.LFE181>

0040e992 <.LVL196>:
#endif
            appData.state = APP_STATE_TEST_RSA;
  40e992:	220e      	movs	r2, #14
  40e994:	4b06      	ldr	r3, [pc, #24]	; (40e9b0 <.LVL197+0xa>)
  40e996:	701a      	strb	r2, [r3, #0]
            break;
  40e998:	bd10      	pop	{r4, pc}
        
        case APP_STATE_TEST_RSA:
#ifndef NO_RSA
            testCount++;
  40e99a:	4a06      	ldr	r2, [pc, #24]	; (40e9b4 <.LVL197+0xe>)
  40e99c:	6813      	ldr	r3, [r2, #0]
  40e99e:	3301      	adds	r3, #1
  40e9a0:	6013      	str	r3, [r2, #0]
            rsa_test();
  40e9a2:	f007 fa85 	bl	415eb0 <.LFE45>

0040e9a6 <.LVL197>:
#endif
            appData.state = APP_STATE_DISPLAY_RESULTS;
  40e9a6:	2212      	movs	r2, #18
  40e9a8:	4b01      	ldr	r3, [pc, #4]	; (40e9b0 <.LVL197+0xa>)
  40e9aa:	701a      	strb	r2, [r3, #0]
            break;
  40e9ac:	bd10      	pop	{r4, pc}
  40e9ae:	bf00      	nop
  40e9b0:	2040d534 	.word	0x2040d534
  40e9b4:	2040d770 	.word	0x2040d770
                      
        case APP_STATE_DISPLAY_RESULTS:
#ifndef NO_MD5
            sprintf(printBuffer, "%s\n\rMD5 test:          %s", 
                    printBuffer, (appData.md5_test_result==expectedResult?"Pass":"Fail"));
  40e9b8:	4ba0      	ldr	r3, [pc, #640]	; (40ec3c <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rMD5 test:          %s", 
  40e9ba:	685b      	ldr	r3, [r3, #4]
  40e9bc:	2b00      	cmp	r3, #0
  40e9be:	4aa0      	ldr	r2, [pc, #640]	; (40ec40 <.LVL218+0xe>)
  40e9c0:	f1a2 0308 	sub.w	r3, r2, #8
  40e9c4:	bf18      	it	ne
  40e9c6:	4613      	movne	r3, r2
  40e9c8:	489e      	ldr	r0, [pc, #632]	; (40ec44 <.LVL218+0x12>)
  40e9ca:	4602      	mov	r2, r0
  40e9cc:	499e      	ldr	r1, [pc, #632]	; (40ec48 <.LVL218+0x16>)
  40e9ce:	f00d fd1f 	bl	41c410 <.LFE166>

0040e9d2 <.LVL198>:
#endif

#ifndef NO_SHA
            sprintf(printBuffer, "%s\n\rSHA test:          %s", 
                    printBuffer, (appData.sha_test_result==expectedResult?"Pass":"Fail"));
  40e9d2:	4b9a      	ldr	r3, [pc, #616]	; (40ec3c <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rSHA test:          %s", 
  40e9d4:	689b      	ldr	r3, [r3, #8]
  40e9d6:	2b00      	cmp	r3, #0
  40e9d8:	4a99      	ldr	r2, [pc, #612]	; (40ec40 <.LVL218+0xe>)
  40e9da:	f1a2 0308 	sub.w	r3, r2, #8
  40e9de:	bf18      	it	ne
  40e9e0:	4613      	movne	r3, r2
  40e9e2:	4898      	ldr	r0, [pc, #608]	; (40ec44 <.LVL218+0x12>)
  40e9e4:	4602      	mov	r2, r0
  40e9e6:	4999      	ldr	r1, [pc, #612]	; (40ec4c <.LVL218+0x1a>)
  40e9e8:	f00d fd12 	bl	41c410 <.LFE166>

0040e9ec <.LVL199>:
#endif

#ifndef NO_SHA256
            sprintf(printBuffer, "%s\n\rSHA256 test:       %s", 
                    printBuffer, (appData.sha256_test_result==expectedResult?"Pass":"Fail"));
  40e9ec:	4b93      	ldr	r3, [pc, #588]	; (40ec3c <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rSHA256 test:       %s", 
  40e9ee:	68db      	ldr	r3, [r3, #12]
  40e9f0:	2b00      	cmp	r3, #0
  40e9f2:	4a93      	ldr	r2, [pc, #588]	; (40ec40 <.LVL218+0xe>)
  40e9f4:	f1a2 0308 	sub.w	r3, r2, #8
  40e9f8:	bf18      	it	ne
  40e9fa:	4613      	movne	r3, r2
  40e9fc:	4891      	ldr	r0, [pc, #580]	; (40ec44 <.LVL218+0x12>)
  40e9fe:	4602      	mov	r2, r0
  40ea00:	4993      	ldr	r1, [pc, #588]	; (40ec50 <.LVL218+0x1e>)
  40ea02:	f00d fd05 	bl	41c410 <.LFE166>

0040ea06 <.LVL200>:
#endif

#ifdef WOLFSSL_SHA384
            sprintf(printBuffer, "%s\n\rSHA384 test:       %s", 
                    printBuffer, (appData.sha384_test_result==expectedResult?"Pass":"Fail"));
  40ea06:	4b8d      	ldr	r3, [pc, #564]	; (40ec3c <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rSHA384 test:       %s", 
  40ea08:	691b      	ldr	r3, [r3, #16]
  40ea0a:	2b00      	cmp	r3, #0
  40ea0c:	4a8c      	ldr	r2, [pc, #560]	; (40ec40 <.LVL218+0xe>)
  40ea0e:	f1a2 0308 	sub.w	r3, r2, #8
  40ea12:	bf18      	it	ne
  40ea14:	4613      	movne	r3, r2
  40ea16:	488b      	ldr	r0, [pc, #556]	; (40ec44 <.LVL218+0x12>)
  40ea18:	4602      	mov	r2, r0
  40ea1a:	498e      	ldr	r1, [pc, #568]	; (40ec54 <.LVL218+0x22>)
  40ea1c:	f00d fcf8 	bl	41c410 <.LFE166>

0040ea20 <.LVL201>:
#endif

#ifdef WOLFSSL_SHA512
            sprintf(printBuffer, "%s\n\rSHA512 test:       %s", 
                    printBuffer, (appData.sha512_test_result==expectedResult?"Pass":"Fail"));
  40ea20:	4b86      	ldr	r3, [pc, #536]	; (40ec3c <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rSHA512 test:       %s", 
  40ea22:	695b      	ldr	r3, [r3, #20]
  40ea24:	2b00      	cmp	r3, #0
  40ea26:	4a86      	ldr	r2, [pc, #536]	; (40ec40 <.LVL218+0xe>)
  40ea28:	f1a2 0308 	sub.w	r3, r2, #8
  40ea2c:	bf18      	it	ne
  40ea2e:	4613      	movne	r3, r2
  40ea30:	4884      	ldr	r0, [pc, #528]	; (40ec44 <.LVL218+0x12>)
  40ea32:	4602      	mov	r2, r0
  40ea34:	4988      	ldr	r1, [pc, #544]	; (40ec58 <.LVL218+0x26>)
  40ea36:	f00d fceb 	bl	41c410 <.LFE166>

0040ea3a <.LVL202>:
#endif

#if !defined(NO_HMAC) && !defined(NO_MD5)
            sprintf(printBuffer, "%s\n\rHMAC_MD5 test:     %s", 
                    printBuffer, (appData.hmac_md5_test_result==expectedResult?"Pass":"Fail"));
  40ea3a:	4b80      	ldr	r3, [pc, #512]	; (40ec3c <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rHMAC_MD5 test:     %s", 
  40ea3c:	699b      	ldr	r3, [r3, #24]
  40ea3e:	2b00      	cmp	r3, #0
  40ea40:	4a7f      	ldr	r2, [pc, #508]	; (40ec40 <.LVL218+0xe>)
  40ea42:	f1a2 0308 	sub.w	r3, r2, #8
  40ea46:	bf18      	it	ne
  40ea48:	4613      	movne	r3, r2
  40ea4a:	487e      	ldr	r0, [pc, #504]	; (40ec44 <.LVL218+0x12>)
  40ea4c:	4602      	mov	r2, r0
  40ea4e:	4983      	ldr	r1, [pc, #524]	; (40ec5c <.LVL218+0x2a>)
  40ea50:	f00d fcde 	bl	41c410 <.LFE166>

0040ea54 <.LVL203>:
#endif

#if !defined(NO_HMAC) && !defined(NO_SHA)
            sprintf(printBuffer, "%s\n\rHMAC_SHA test:     %s", 
                    printBuffer, (appData.hmac_sha_test_result==expectedResult?"Pass":"Fail"));
  40ea54:	4b79      	ldr	r3, [pc, #484]	; (40ec3c <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rHMAC_SHA test:     %s", 
  40ea56:	69db      	ldr	r3, [r3, #28]
  40ea58:	2b00      	cmp	r3, #0
  40ea5a:	4a79      	ldr	r2, [pc, #484]	; (40ec40 <.LVL218+0xe>)
  40ea5c:	f1a2 0308 	sub.w	r3, r2, #8
  40ea60:	bf18      	it	ne
  40ea62:	4613      	movne	r3, r2
  40ea64:	4877      	ldr	r0, [pc, #476]	; (40ec44 <.LVL218+0x12>)
  40ea66:	4602      	mov	r2, r0
  40ea68:	497d      	ldr	r1, [pc, #500]	; (40ec60 <.LVL218+0x2e>)
  40ea6a:	f00d fcd1 	bl	41c410 <.LFE166>

0040ea6e <.LVL204>:
#endif

#if !defined(NO_HMAC) && !defined(NO_SHA256)
            sprintf(printBuffer, "%s\n\rHMAC_SHA256 test:  %s", 
                    printBuffer, (appData.hmac_sha256_test_result==expectedResult?"Pass":"Fail"));
  40ea6e:	4b73      	ldr	r3, [pc, #460]	; (40ec3c <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rHMAC_SHA256 test:  %s", 
  40ea70:	6a1b      	ldr	r3, [r3, #32]
  40ea72:	2b00      	cmp	r3, #0
  40ea74:	4a72      	ldr	r2, [pc, #456]	; (40ec40 <.LVL218+0xe>)
  40ea76:	f1a2 0308 	sub.w	r3, r2, #8
  40ea7a:	bf18      	it	ne
  40ea7c:	4613      	movne	r3, r2
  40ea7e:	4871      	ldr	r0, [pc, #452]	; (40ec44 <.LVL218+0x12>)
  40ea80:	4602      	mov	r2, r0
  40ea82:	4978      	ldr	r1, [pc, #480]	; (40ec64 <.LVL218+0x32>)
  40ea84:	f00d fcc4 	bl	41c410 <.LFE166>

0040ea88 <.LVL205>:
#endif

#if !defined(NO_HMAC) && defined(WOLFSSL_SHA384)
            sprintf(printBuffer, "%s\n\rHMAC_SHA384 test:  %s", 
                    printBuffer, (appData.hmac_sha384_test_result==expectedResult?"Pass":"Fail"));
  40ea88:	4b6c      	ldr	r3, [pc, #432]	; (40ec3c <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rHMAC_SHA384 test:  %s", 
  40ea8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40ea8c:	2b00      	cmp	r3, #0
  40ea8e:	4a6c      	ldr	r2, [pc, #432]	; (40ec40 <.LVL218+0xe>)
  40ea90:	f1a2 0308 	sub.w	r3, r2, #8
  40ea94:	bf18      	it	ne
  40ea96:	4613      	movne	r3, r2
  40ea98:	486a      	ldr	r0, [pc, #424]	; (40ec44 <.LVL218+0x12>)
  40ea9a:	4602      	mov	r2, r0
  40ea9c:	4972      	ldr	r1, [pc, #456]	; (40ec68 <.LVL218+0x36>)
  40ea9e:	f00d fcb7 	bl	41c410 <.LFE166>

0040eaa2 <.LVL206>:
#endif

#if !defined(NO_HMAC) && defined(WOLFSSL_SHA512)
            sprintf(printBuffer, "%s\n\rHMAC_SHA512 test:  %s", 
                    printBuffer, (appData.hmac_sha512_test_result==expectedResult?"Pass":"Fail"));
  40eaa2:	4b66      	ldr	r3, [pc, #408]	; (40ec3c <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rHMAC_SHA512 test:  %s", 
  40eaa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40eaa6:	2b00      	cmp	r3, #0
  40eaa8:	4a65      	ldr	r2, [pc, #404]	; (40ec40 <.LVL218+0xe>)
  40eaaa:	f1a2 0308 	sub.w	r3, r2, #8
  40eaae:	bf18      	it	ne
  40eab0:	4613      	movne	r3, r2
  40eab2:	4864      	ldr	r0, [pc, #400]	; (40ec44 <.LVL218+0x12>)
  40eab4:	4602      	mov	r2, r0
  40eab6:	496d      	ldr	r1, [pc, #436]	; (40ec6c <.LVL218+0x3a>)
  40eab8:	f00d fcaa 	bl	41c410 <.LFE166>

0040eabc <.LVL207>:
#endif

#ifdef HAVE_ECC
            sprintf(printBuffer, "%s\n\rECC test:          %s", 
                    printBuffer, (appData.ecc_test_result==expectedResult?"Pass":"Fail"));
  40eabc:	4b5f      	ldr	r3, [pc, #380]	; (40ec3c <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rECC test:          %s", 
  40eabe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  40eac0:	2b00      	cmp	r3, #0
  40eac2:	4a5f      	ldr	r2, [pc, #380]	; (40ec40 <.LVL218+0xe>)
  40eac4:	f1a2 0308 	sub.w	r3, r2, #8
  40eac8:	bf18      	it	ne
  40eaca:	4613      	movne	r3, r2
  40eacc:	485d      	ldr	r0, [pc, #372]	; (40ec44 <.LVL218+0x12>)
  40eace:	4602      	mov	r2, r0
  40ead0:	4967      	ldr	r1, [pc, #412]	; (40ec70 <.LVL218+0x3e>)
  40ead2:	f00d fc9d 	bl	41c410 <.LFE166>

0040ead6 <.LVL208>:
#endif
#ifndef NO_RNG_TEST
            sprintf(printBuffer, "%s\n\rRANDOM test:       %s", 
                    printBuffer, (appData.random_test_result==expectedResult?"Pass":"Fail"));
  40ead6:	4b59      	ldr	r3, [pc, #356]	; (40ec3c <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rRANDOM test:       %s", 
  40ead8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40eada:	2b00      	cmp	r3, #0
  40eadc:	4a58      	ldr	r2, [pc, #352]	; (40ec40 <.LVL218+0xe>)
  40eade:	f1a2 0308 	sub.w	r3, r2, #8
  40eae2:	bf18      	it	ne
  40eae4:	4613      	movne	r3, r2
  40eae6:	4857      	ldr	r0, [pc, #348]	; (40ec44 <.LVL218+0x12>)
  40eae8:	4602      	mov	r2, r0
  40eaea:	4962      	ldr	r1, [pc, #392]	; (40ec74 <.LVL218+0x42>)
  40eaec:	f00d fc90 	bl	41c410 <.LFE166>

0040eaf0 <.LVL209>:
#endif
#ifndef NO_AES
            sprintf(printBuffer, "%s\n\rAES CBC test:      %s", 
                    printBuffer, (appData.aes_cbc_test_result==expectedResult?"Pass":"Fail"));
  40eaf0:	4b52      	ldr	r3, [pc, #328]	; (40ec3c <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rAES CBC test:      %s", 
  40eaf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40eaf4:	2b00      	cmp	r3, #0
  40eaf6:	4a52      	ldr	r2, [pc, #328]	; (40ec40 <.LVL218+0xe>)
  40eaf8:	f1a2 0308 	sub.w	r3, r2, #8
  40eafc:	bf18      	it	ne
  40eafe:	4613      	movne	r3, r2
  40eb00:	4850      	ldr	r0, [pc, #320]	; (40ec44 <.LVL218+0x12>)
  40eb02:	4602      	mov	r2, r0
  40eb04:	495c      	ldr	r1, [pc, #368]	; (40ec78 <.LVL218+0x46>)
  40eb06:	f00d fc83 	bl	41c410 <.LFE166>

0040eb0a <.LVL210>:
#ifdef WOLFSSL_AES_COUNTER
            sprintf(printBuffer, "%s\n\rAES CTR test:      %s", 
                     printBuffer, (appData.aes_ctr_test_result==expectedResult?"Pass":"Fail"));
  40eb0a:	4b4c      	ldr	r3, [pc, #304]	; (40ec3c <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rAES CTR test:      %s", 
  40eb0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  40eb0e:	2b00      	cmp	r3, #0
  40eb10:	4a4b      	ldr	r2, [pc, #300]	; (40ec40 <.LVL218+0xe>)
  40eb12:	f1a2 0308 	sub.w	r3, r2, #8
  40eb16:	bf18      	it	ne
  40eb18:	4613      	movne	r3, r2
  40eb1a:	484a      	ldr	r0, [pc, #296]	; (40ec44 <.LVL218+0x12>)
  40eb1c:	4602      	mov	r2, r0
  40eb1e:	4957      	ldr	r1, [pc, #348]	; (40ec7c <.LVL218+0x4a>)
  40eb20:	f00d fc76 	bl	41c410 <.LFE166>

0040eb24 <.LVL211>:
#endif                    
#endif

#ifdef HAVE_LIBZ
            sprintf(printBuffer, "%s\n\rCOMPRESS test:     %s", 
                    printBuffer, (appData.compress_test_result==expectedResult?"Pass":"Fail"));
  40eb24:	4b45      	ldr	r3, [pc, #276]	; (40ec3c <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rCOMPRESS test:     %s", 
  40eb26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  40eb28:	2b00      	cmp	r3, #0
  40eb2a:	4a45      	ldr	r2, [pc, #276]	; (40ec40 <.LVL218+0xe>)
  40eb2c:	f1a2 0308 	sub.w	r3, r2, #8
  40eb30:	bf18      	it	ne
  40eb32:	4613      	movne	r3, r2
  40eb34:	4843      	ldr	r0, [pc, #268]	; (40ec44 <.LVL218+0x12>)
  40eb36:	4602      	mov	r2, r0
  40eb38:	4951      	ldr	r1, [pc, #324]	; (40ec80 <.LVL218+0x4e>)
  40eb3a:	f00d fc69 	bl	41c410 <.LFE166>

0040eb3e <.LVL212>:
#endif

#ifndef NO_DES3
            sprintf(printBuffer, "%s\n\rDES test:          %s", 
                    printBuffer, (appData.des_test_result==expectedResult?"Pass":"Fail"));
  40eb3e:	4b3f      	ldr	r3, [pc, #252]	; (40ec3c <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rDES test:          %s", 
  40eb40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40eb42:	2b00      	cmp	r3, #0
  40eb44:	4a3e      	ldr	r2, [pc, #248]	; (40ec40 <.LVL218+0xe>)
  40eb46:	f1a2 0308 	sub.w	r3, r2, #8
  40eb4a:	bf18      	it	ne
  40eb4c:	4613      	movne	r3, r2
  40eb4e:	483d      	ldr	r0, [pc, #244]	; (40ec44 <.LVL218+0x12>)
  40eb50:	4602      	mov	r2, r0
  40eb52:	494c      	ldr	r1, [pc, #304]	; (40ec84 <.LVL218+0x52>)
  40eb54:	f00d fc5c 	bl	41c410 <.LFE166>

0040eb58 <.LVL213>:
#endif

#ifndef NO_DES3
            sprintf(printBuffer, "%s\n\rDES3 test:         %s", 
                    printBuffer, (appData.des3_test_result==expectedResult?"Pass":"Fail"));
  40eb58:	4b38      	ldr	r3, [pc, #224]	; (40ec3c <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rDES3 test:         %s", 
  40eb5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40eb5c:	2b00      	cmp	r3, #0
  40eb5e:	4a38      	ldr	r2, [pc, #224]	; (40ec40 <.LVL218+0xe>)
  40eb60:	f1a2 0308 	sub.w	r3, r2, #8
  40eb64:	bf18      	it	ne
  40eb66:	4613      	movne	r3, r2
  40eb68:	4836      	ldr	r0, [pc, #216]	; (40ec44 <.LVL218+0x12>)
  40eb6a:	4602      	mov	r2, r0
  40eb6c:	4946      	ldr	r1, [pc, #280]	; (40ec88 <.LVL218+0x56>)
  40eb6e:	f00d fc4f 	bl	41c410 <.LFE166>

0040eb72 <.LVL214>:
#endif

#ifndef NO_RSA
            sprintf(printBuffer, "%s\n\rRSA test:          %s", 
                    printBuffer, (appData.rsa_test_result==expectedResult?"Pass":"Fail"));
  40eb72:	4b32      	ldr	r3, [pc, #200]	; (40ec3c <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rRSA test:          %s", 
  40eb74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  40eb76:	2b00      	cmp	r3, #0
  40eb78:	4a31      	ldr	r2, [pc, #196]	; (40ec40 <.LVL218+0xe>)
  40eb7a:	f1a2 0308 	sub.w	r3, r2, #8
  40eb7e:	bf18      	it	ne
  40eb80:	4613      	movne	r3, r2
  40eb82:	4830      	ldr	r0, [pc, #192]	; (40ec44 <.LVL218+0x12>)
  40eb84:	4602      	mov	r2, r0
  40eb86:	4941      	ldr	r1, [pc, #260]	; (40ec8c <.LVL218+0x5a>)
  40eb88:	f00d fc42 	bl	41c410 <.LFE166>

0040eb8c <.LVL215>:
#endif

            appData.state = APP_STATE_CHECK_RESULTS;
  40eb8c:	2214      	movs	r2, #20
  40eb8e:	4b2b      	ldr	r3, [pc, #172]	; (40ec3c <.LVL218+0xa>)
  40eb90:	701a      	strb	r2, [r3, #0]

            break;
  40eb92:	bd10      	pop	{r4, pc}

        case APP_STATE_CHECK_RESULTS:
            if ( testCount == 0 ) {
  40eb94:	4b3e      	ldr	r3, [pc, #248]	; (40ec90 <.LVL218+0x5e>)
  40eb96:	681b      	ldr	r3, [r3, #0]
  40eb98:	2b00      	cmp	r3, #0
  40eb9a:	d07d      	beq.n	40ec98 <.LVL218+0x66>
                sprintf(printBuffer, "%s\n\rNo tests executed\n\r", printBuffer);
            }
            else if (
#ifndef NO_RNG_TEST
			    expectedResult != appData.random_test_result ||
  40eb9c:	4b27      	ldr	r3, [pc, #156]	; (40ec3c <.LVL218+0xa>)
            else if (
  40eb9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40eba0:	2b00      	cmp	r3, #0
  40eba2:	d137      	bne.n	40ec14 <.LVL215+0x88>
#endif
#ifndef NO_MD5
                expectedResult != appData.md5_test_result || 
  40eba4:	4b25      	ldr	r3, [pc, #148]	; (40ec3c <.LVL218+0xa>)
			    expectedResult != appData.random_test_result ||
  40eba6:	685b      	ldr	r3, [r3, #4]
  40eba8:	2b00      	cmp	r3, #0
  40ebaa:	d133      	bne.n	40ec14 <.LVL215+0x88>
#endif
#ifndef NO_SHA                    
                expectedResult != appData.sha_test_result ||
  40ebac:	4b23      	ldr	r3, [pc, #140]	; (40ec3c <.LVL218+0xa>)
                expectedResult != appData.md5_test_result || 
  40ebae:	689b      	ldr	r3, [r3, #8]
  40ebb0:	2b00      	cmp	r3, #0
  40ebb2:	d12f      	bne.n	40ec14 <.LVL215+0x88>
#endif
#ifndef NO_SHA256                    
                expectedResult != appData.sha256_test_result ||
  40ebb4:	4b21      	ldr	r3, [pc, #132]	; (40ec3c <.LVL218+0xa>)
                expectedResult != appData.sha_test_result ||
  40ebb6:	68db      	ldr	r3, [r3, #12]
  40ebb8:	2b00      	cmp	r3, #0
  40ebba:	d12b      	bne.n	40ec14 <.LVL215+0x88>
#endif
#ifdef WOLFSSL_SHA384                    
                expectedResult != appData.sha384_test_result ||
  40ebbc:	4b1f      	ldr	r3, [pc, #124]	; (40ec3c <.LVL218+0xa>)
                expectedResult != appData.sha256_test_result ||
  40ebbe:	691b      	ldr	r3, [r3, #16]
  40ebc0:	2b00      	cmp	r3, #0
  40ebc2:	d127      	bne.n	40ec14 <.LVL215+0x88>
#endif
#ifdef WOLFSSL_SHA512                    
                expectedResult != appData.sha512_test_result ||
  40ebc4:	4b1d      	ldr	r3, [pc, #116]	; (40ec3c <.LVL218+0xa>)
                expectedResult != appData.sha384_test_result ||
  40ebc6:	695b      	ldr	r3, [r3, #20]
  40ebc8:	bb23      	cbnz	r3, 40ec14 <.LVL215+0x88>
#endif
#if !defined(NO_HMAC) && !defined(NO_MD5)                    
                expectedResult != appData.hmac_md5_test_result ||
  40ebca:	4b1c      	ldr	r3, [pc, #112]	; (40ec3c <.LVL218+0xa>)
                expectedResult != appData.sha512_test_result ||
  40ebcc:	699b      	ldr	r3, [r3, #24]
  40ebce:	bb0b      	cbnz	r3, 40ec14 <.LVL215+0x88>
#endif
#if !defined(NO_HMAC) && !defined(NO_SHA)                    
                expectedResult != appData.hmac_sha_test_result ||
  40ebd0:	4b1a      	ldr	r3, [pc, #104]	; (40ec3c <.LVL218+0xa>)
                expectedResult != appData.hmac_md5_test_result ||
  40ebd2:	69db      	ldr	r3, [r3, #28]
  40ebd4:	b9f3      	cbnz	r3, 40ec14 <.LVL215+0x88>
#endif
#if !defined(NO_HMAC) && !defined(NO_SHA256)                    
                expectedResult != appData.hmac_sha256_test_result ||
  40ebd6:	4b19      	ldr	r3, [pc, #100]	; (40ec3c <.LVL218+0xa>)
                expectedResult != appData.hmac_sha_test_result ||
  40ebd8:	6a1b      	ldr	r3, [r3, #32]
  40ebda:	b9db      	cbnz	r3, 40ec14 <.LVL215+0x88>
#endif
#if !defined(NO_HMAC) && defined(WOLFSSL_SHA384)                    
                expectedResult != appData.hmac_sha384_test_result ||
  40ebdc:	4b17      	ldr	r3, [pc, #92]	; (40ec3c <.LVL218+0xa>)
                expectedResult != appData.hmac_sha256_test_result ||
  40ebde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40ebe0:	b9c3      	cbnz	r3, 40ec14 <.LVL215+0x88>
#endif
#if !defined(NO_HMAC) && defined(WOLFSSL_SHA512)                    
                expectedResult != appData.hmac_sha512_test_result ||
  40ebe2:	4b16      	ldr	r3, [pc, #88]	; (40ec3c <.LVL218+0xa>)
                expectedResult != appData.hmac_sha384_test_result ||
  40ebe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40ebe6:	b9ab      	cbnz	r3, 40ec14 <.LVL215+0x88>
#endif
#ifdef HAVE_ECC
                expectedResult != appData.ecc_test_result ||
  40ebe8:	4b14      	ldr	r3, [pc, #80]	; (40ec3c <.LVL218+0xa>)
                expectedResult != appData.hmac_sha512_test_result ||
  40ebea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  40ebec:	b993      	cbnz	r3, 40ec14 <.LVL215+0x88>
#endif
#ifndef NO_AES                   
                expectedResult != appData.aes_cbc_test_result ||
  40ebee:	4b13      	ldr	r3, [pc, #76]	; (40ec3c <.LVL218+0xa>)
                expectedResult != appData.ecc_test_result ||
  40ebf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40ebf2:	b97b      	cbnz	r3, 40ec14 <.LVL215+0x88>
#ifdef WOLFSSL_AES_COUNTER                    
                expectedResult != appData.aes_ctr_test_result ||
  40ebf4:	4b11      	ldr	r3, [pc, #68]	; (40ec3c <.LVL218+0xa>)
                expectedResult != appData.aes_cbc_test_result ||
  40ebf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  40ebf8:	b963      	cbnz	r3, 40ec14 <.LVL215+0x88>
#endif
#endif
#ifdef HAVE_LIBZ
                expectedResult != appData.compress_test_result ||
  40ebfa:	4b10      	ldr	r3, [pc, #64]	; (40ec3c <.LVL218+0xa>)
                expectedResult != appData.aes_ctr_test_result ||
  40ebfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  40ebfe:	b94b      	cbnz	r3, 40ec14 <.LVL215+0x88>
#endif
#ifndef NO_DES3                   
                expectedResult != appData.des_test_result ||
  40ec00:	4b0e      	ldr	r3, [pc, #56]	; (40ec3c <.LVL218+0xa>)
                expectedResult != appData.compress_test_result ||
  40ec02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40ec04:	b933      	cbnz	r3, 40ec14 <.LVL215+0x88>
                expectedResult != appData.des3_test_result ||
  40ec06:	4b0d      	ldr	r3, [pc, #52]	; (40ec3c <.LVL218+0xa>)
                expectedResult != appData.des_test_result ||
  40ec08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40ec0a:	b91b      	cbnz	r3, 40ec14 <.LVL215+0x88>
#endif
#ifndef NO_RSA
                expectedResult != appData.rsa_test_result ||
  40ec0c:	4b0b      	ldr	r3, [pc, #44]	; (40ec3c <.LVL218+0xa>)
  40ec0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  40ec10:	2b00      	cmp	r3, #0
  40ec12:	d047      	beq.n	40eca4 <.LVL219+0x2>
#endif
                expectedResult != dummy_test_result /* always false */
            ) 
            {
                /* We had an error during comparisons */
                sprintf(printBuffer, "%s\n\rOne or more tests failed\n\r", printBuffer);
  40ec14:	480b      	ldr	r0, [pc, #44]	; (40ec44 <.LVL218+0x12>)
  40ec16:	4602      	mov	r2, r0
  40ec18:	491e      	ldr	r1, [pc, #120]	; (40ec94 <.LVL218+0x62>)
  40ec1a:	f00d fbf9 	bl	41c410 <.LFE166>

0040ec1e <.LVL216>:
            } else {
                sprintf(printBuffer, "%s\n\rAll tests passed\n\r", printBuffer);
            }
            SYS_CONSOLE_Write(SYS_CONSOLE_INDEX_0, STDOUT_FILENO, printBuffer, strlen(printBuffer));
  40ec1e:	4c09      	ldr	r4, [pc, #36]	; (40ec44 <.LVL218+0x12>)
  40ec20:	4620      	mov	r0, r4
  40ec22:	f009 f8ed 	bl	417e00 <strlen>

0040ec26 <.LVL217>:
  40ec26:	4603      	mov	r3, r0
  40ec28:	4622      	mov	r2, r4
  40ec2a:	2101      	movs	r1, #1
  40ec2c:	2000      	movs	r0, #0
  40ec2e:	f00e f9f7 	bl	41d020 <.LFE163>

0040ec32 <.LVL218>:
            appData.state = APP_SPIN;
  40ec32:	2215      	movs	r2, #21
  40ec34:	4b01      	ldr	r3, [pc, #4]	; (40ec3c <.LVL218+0xa>)
  40ec36:	701a      	strb	r2, [r3, #0]
  40ec38:	bd10      	pop	{r4, pc}
  40ec3a:	bf00      	nop
  40ec3c:	2040d534 	.word	0x2040d534
  40ec40:	0040b450 	.word	0x0040b450
  40ec44:	20400054 	.word	0x20400054
  40ec48:	0040b458 	.word	0x0040b458
  40ec4c:	0040b474 	.word	0x0040b474
  40ec50:	0040b490 	.word	0x0040b490
  40ec54:	0040b4ac 	.word	0x0040b4ac
  40ec58:	0040b4c8 	.word	0x0040b4c8
  40ec5c:	0040b4e4 	.word	0x0040b4e4
  40ec60:	0040b500 	.word	0x0040b500
  40ec64:	0040b51c 	.word	0x0040b51c
  40ec68:	0040b538 	.word	0x0040b538
  40ec6c:	0040b554 	.word	0x0040b554
  40ec70:	0040b570 	.word	0x0040b570
  40ec74:	0040b58c 	.word	0x0040b58c
  40ec78:	0040b5a8 	.word	0x0040b5a8
  40ec7c:	0040b5c4 	.word	0x0040b5c4
  40ec80:	0040b5e0 	.word	0x0040b5e0
  40ec84:	0040b5fc 	.word	0x0040b5fc
  40ec88:	0040b618 	.word	0x0040b618
  40ec8c:	0040b634 	.word	0x0040b634
  40ec90:	2040d770 	.word	0x2040d770
  40ec94:	0040b668 	.word	0x0040b668
                sprintf(printBuffer, "%s\n\rNo tests executed\n\r", printBuffer);
  40ec98:	4805      	ldr	r0, [pc, #20]	; (40ecb0 <.LVL220+0x2>)
  40ec9a:	4602      	mov	r2, r0
  40ec9c:	4905      	ldr	r1, [pc, #20]	; (40ecb4 <.LVL220+0x6>)
  40ec9e:	f00d fbb7 	bl	41c410 <.LFE166>

0040eca2 <.LVL219>:
  40eca2:	e7bc      	b.n	40ec1e <.LVL216>
                sprintf(printBuffer, "%s\n\rAll tests passed\n\r", printBuffer);
  40eca4:	4802      	ldr	r0, [pc, #8]	; (40ecb0 <.LVL220+0x2>)
  40eca6:	4602      	mov	r2, r0
  40eca8:	4903      	ldr	r1, [pc, #12]	; (40ecb8 <.LVL220+0xa>)
  40ecaa:	f00d fbb1 	bl	41c410 <.LFE166>

0040ecae <.LVL220>:
  40ecae:	e7b6      	b.n	40ec1e <.LVL216>
  40ecb0:	20400054 	.word	0x20400054
  40ecb4:	0040b650 	.word	0x0040b650
  40ecb8:	0040b688 	.word	0x0040b688

Disassembly of section .rodata.client_cert_der_2048%52:

0040ecbc <client_cert_der_2048>:
  40ecbc:	98048230 80038230 010203a0 00090202     0...0...........
  40eccc:	be754a87 3dd86691 09060d30 8648862a     .Ju..f.=0...*.H.
  40ecdc:	01010df7 30000505 0b318e81 03060930     .......0..1.0...
  40ecec:	13060455 31535502 060d300f 08045503     U....US1.0...U..
  40ecfc:	724f0613 6e6f6765 0f301131 04550306     ..Oregon1.0...U.
  40ed0c:	50081307 6c74726f 31646e61 060c300e     ...Portland1.0..
  40ed1c:	0a045503 61790513 314c5353 06123014     .U....yaSSL1.0..
  40ed2c:	0b045503 72500b13 6172676f 6e696d6d     .U....Programmin
  40ed3c:	30163167 55030614 0d130304 2e777777     g1.0...U....www.
  40ed4c:	73736179 6f632e6c 301d316d 2a09061b     yassl.com1.0...*
  40ed5c:	f7864886 0109010d 6e690e16 79406f66     .H........info@y
  40ed6c:	6c737361 6d6f632e 0d171e30 30313131     assl.com0...1110
  40ed7c:	38313432 35353132 310d175a 32373034     24182155Z..14072
  40ed8c:	32383130 5a353531 318e8130 0609300b     0182155Z0..1.0..
  40ed9c:	06045503 53550213 0d300f31 04550306     .U....US1.0...U.
  40edac:	4f061308 6f676572 3011316e 5503060f     ...Oregon1.0...U
  40edbc:	08130704 74726f50 646e616c 0c300e31     ....Portland1.0.
  40edcc:	04550306 7905130a 4c535361 12301431     ..U....yaSSL1.0.
  40eddc:	04550306 500b130b 72676f72 696d6d61     ..U....Programmi
  40edec:	1631676e 03061430 13030455 7777770d     ng1.0...U....www
  40edfc:	7361792e 632e6c73 1d316d6f 09061b30     .yassl.com1.0...
  40ee0c:	8648862a 09010df7 690e1601 406f666e     *.H........info@
  40ee1c:	73736179 6f632e6c 0182306d 060d3022     yassl.com0.."0..
  40ee2c:	48862a09 010df786 00050101 0f018203     .*.H............
  40ee3c:	01823000 0182020a 03c30001 39fe2bd1     .0...........+.9
  40ee4c:	3b4532a4 2b84c853 9a747c2a 522aaabd     .2E;S..+*|t...*R
  40ee5c:	a6d64707 3207b236 69bad08e 44c3c67b     .G..6..2...i{..D
  40ee6c:	4881d49e a2682dfd a1bb678b 2c36c875     ...H.-h..g..u.6,
  40ee7c:	f71bd24a 0dcfba8b f1eceff9 9b7b1e81     J.............{.
  40ee8c:	bf9a4703 657fcc65 e8a66924 e45b8914     .G..e..e$i....[.
  40ee9c:	b0c5f734 67f59314 787a3a7b 565601e1     4......g{:zx..VV
  40eeac:	4213a691 403cd28d d1ef4c9c 5137df86     ...B..<@.L....7Q
  40eebc:	3ba10c1b 4aa3f1f5 cee1e435 7e1bdf96     ...;...J5......~
  40eecc:	d0974ebf 08a8e810 20af8130 c514430b     .N......0.. .C..
  40eedc:	32b46774 868d6f82 994088c2 1eba8336     tg.2.o....@.6...
  40eeec:	17227240 246552d7 efceb073 ffaecd19     @r"..Re$s.......
  40eefc:	c07b6c78 4ed40312 6d500d72 a33ba33b     xl{....Nr.Pm;.;.
  40ef0c:	c89d5e99 b3850cd9 54d98ad9 fa6ddb26     .^.........T&.m.
  40ef1c:	25ffbbac 79d1c44c 86d371f4 b0131840     ...%L..y.q..@...
  40ef2c:	4e72b563 8497c430 2f562d86 7ff715d7     c.rN0....-V/....
  40ef3c:	fcf5aec0 a1fbe55b 0302d3ba a3010001     ....[...........
  40ef4c:	8130f681 061d30f3 0e1d5503 14041604     ..0..0...U......
  40ef5c:	6645d833 188768d7 700d547e 26c79127     3.Ef.h..~T.p'..&
  40ef6c:	c06585d7 06c38130 231d5503 30bb8104     ..e.0....U.#...0
  40ef7c:	1480b881 6645d833 188768d7 700d547e     ....3.Ef.h..~T.p
  40ef8c:	26c79127 c06585d7 a49481a1 81309181     '..&..e.......0.
  40ef9c:	300b318e 55030609 02130604 0f315355     .1.0...U....US1.
  40efac:	03060d30 13080455 65724f06 316e6f67     0...U....Oregon1
  40efbc:	060f3011 07045503 6f500813 616c7472     .0...U....Portla
  40efcc:	0e31646e 03060c30 130a0455 53617905     nd1.0...U....yaS
  40efdc:	14314c53 03061230 130b0455 6f72500b     SL1.0...U....Pro
  40efec:	6d617267 676e696d 14301631 04550306     gramming1.0...U.
  40effc:	770d1303 792e7777 6c737361 6d6f632e     ...www.yassl.com
  40f00c:	1b301d31 862a0906 0df78648 16010901     1.0...*.H.......
  40f01c:	666e690e 6179406f 2e6c7373 826d6f63     .info@yassl.com.
  40f02c:	4a870009 6691be75 0c303dd8 1d550306     ...Ju..f.=0...U.
  40f03c:	30050413 ff010103 09060d30 8648862a     ...0....0...*.H.
  40f04c:	01010df7 03000505 00010182 81427c1c     .............|B.
  40f05c:	cf219e29 54c1d8d0 14aecc6f 68ff3809     ).!....To....8.h
  40f06c:	53959a98 e67b1876 28ec7630 dea7750d     ...Sv.{.0v.(.u..
  40f07c:	d58ecde0 476a2355 fc8d4e2b d8a3067d     ....U#jG+N..}...
  40f08c:	d65ead0f 3300c904 d32777fb 7bb303b5     ..^....3.w'....{
  40f09c:	0b317421 1a2daf4a cc8e93b3 903d5ff3     !t1.J.-......_=.
  40f0ac:	55e3cc3f 787b9119 094a2e24 614e18bb     ?..U..{x$.J...Na
  40f0bc:	0ac69c2d 889134a0 483b6b70 9479bc47     -....4..pk;HG.y.
  40f0cc:	324da0a2 a3c25447 51d22edc 1139294c     ..M2GT.....QL)9.
  40f0dc:	5e15e2ff f6369758 860606e9 959d8d0e     ...^X.6.........
  40f0ec:	8bb27203 14e97c19 7388a16e 716d5868     .r...|..n..shXmq
  40f0fc:	d3d5c25e de5fd213 e2be03ea cee54000     ^....._......@..
  40f10c:	3192e6fd bbebc357 2fcbac66 62e0fa1a     ...1W...f../...b
  40f11c:	93f447a2 6c4b2a43 f92f0a5e 634ae6e7     .G..C*Kl^./...Jc
  40f12c:	2aacb086 5bb4eba1 e432cd67 9a4b11b6     ...*...[g.2...K.
  40f13c:	a20d6672 fe8f764a fd83bc22 a9d5b7db     rf..Jv..".......
  40f14c:	b1c905ee 2b1b7e71 c0afe3e1              ....q~.+....

Disassembly of section .text._tr_flush_block%53:

0040f158 <_tr_flush_block>:
void ZLIB_INTERNAL _tr_flush_block(s, buf, stored_len, last)
    deflate_state *s;
    charf *buf;       /* input block, or NULL if too old */
    ulg stored_len;   /* length of input block */
    int last;         /* one if this is the last block for a file */
{
  40f158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0040f15c <.LCFI24>:
  40f15c:	b083      	sub	sp, #12

0040f15e <.LCFI25>:
  40f15e:	4604      	mov	r4, r0
  40f160:	4689      	mov	r9, r1
  40f162:	4615      	mov	r5, r2
  40f164:	461e      	mov	r6, r3

0040f166 <.LVL314>:
    ulg opt_lenb, static_lenb; /* opt_len and static_len in bytes */
    int max_blindex = 0;  /* index of last bit length code of non zero freq */

    /* Build the Huffman trees unless a stored block is forced */
    if (s->level > 0) {
  40f166:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84

0040f16a <.LVL315>:
  40f16a:	2b00      	cmp	r3, #0
  40f16c:	f340 8096 	ble.w	40f29c <.LBE104>

        /* Check if the file is binary or text */
        if (s->strm->data_type == Z_UNKNOWN)
  40f170:	f8d0 e000 	ldr.w	lr, [r0]
  40f174:	f8de 302c 	ldr.w	r3, [lr, #44]	; 0x2c
  40f178:	2b02      	cmp	r3, #2
  40f17a:	d059      	beq.n	40f230 <.LCFI27>

0040f17c <.LVL316>:
            s->strm->data_type = detect_data_type(s);

        /* Construct the literal and distance trees */
        build_tree(s, (tree_desc *)(&(s->l_desc)));
  40f17c:	f604 3118 	addw	r1, r4, #2840	; 0xb18
  40f180:	4620      	mov	r0, r4
  40f182:	f001 fcd6 	bl	410b32 <.LBE59>

0040f186 <.LVL317>:
        Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
                s->static_len));

        build_tree(s, (tree_desc *)(&(s->d_desc)));
  40f186:	f604 3124 	addw	r1, r4, #2852	; 0xb24
  40f18a:	4620      	mov	r0, r4
  40f18c:	f001 fcd1 	bl	410b32 <.LBE59>

0040f190 <.LBB97>:
    scan_tree(s, (ct_data *)s->dyn_ltree, s->l_desc.max_code);
  40f190:	f104 0794 	add.w	r7, r4, #148	; 0x94
  40f194:	f8d4 2b1c 	ldr.w	r2, [r4, #2844]	; 0xb1c
  40f198:	4639      	mov	r1, r7
  40f19a:	4620      	mov	r0, r4
  40f19c:	f009 fc94 	bl	418ac8 <.LFE19>

0040f1a0 <.LVL319>:
    scan_tree(s, (ct_data *)s->dyn_dtree, s->d_desc.max_code);
  40f1a0:	f604 1888 	addw	r8, r4, #2440	; 0x988
  40f1a4:	f8d4 2b28 	ldr.w	r2, [r4, #2856]	; 0xb28
  40f1a8:	4641      	mov	r1, r8
  40f1aa:	4620      	mov	r0, r4
  40f1ac:	f009 fc8c 	bl	418ac8 <.LFE19>

0040f1b0 <.LVL320>:
    build_tree(s, (tree_desc *)(&(s->bl_desc)));
  40f1b0:	f504 6133 	add.w	r1, r4, #2864	; 0xb30
  40f1b4:	4620      	mov	r0, r4
  40f1b6:	f001 fcbc 	bl	410b32 <.LBE59>

0040f1ba <.LVL321>:
        if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;
  40f1ba:	f8b4 3aba 	ldrh.w	r3, [r4, #2746]	; 0xaba
  40f1be:	2b00      	cmp	r3, #0
  40f1c0:	d16a      	bne.n	40f298 <.LBB104>
  40f1c2:	4ac2      	ldr	r2, [pc, #776]	; (40f4cc <.LVL388+0xc>)
    for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {
  40f1c4:	2111      	movs	r1, #17

0040f1c6 <.LVL322>:
        if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;
  40f1c6:	f812 3901 	ldrb.w	r3, [r2], #-1
  40f1ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  40f1ce:	f8b3 3a7e 	ldrh.w	r3, [r3, #2686]	; 0xa7e
  40f1d2:	b913      	cbnz	r3, 40f1da <.LVL324>
    for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {
  40f1d4:	3901      	subs	r1, #1
  40f1d6:	2902      	cmp	r1, #2
  40f1d8:	d1f5      	bne.n	40f1c6 <.LVL322>

0040f1da <.LVL324>:
    s->opt_len += 3*(max_blindex+1) + 5+5+4;
  40f1da:	f101 0b01 	add.w	fp, r1, #1
  40f1de:	f241 60a8 	movw	r0, #5800	; 0x16a8
  40f1e2:	5823      	ldr	r3, [r4, r0]
  40f1e4:	330e      	adds	r3, #14
  40f1e6:	eb0b 0e4b 	add.w	lr, fp, fp, lsl #1
  40f1ea:	4473      	add	r3, lr
  40f1ec:	5023      	str	r3, [r4, r0]

0040f1ee <.LBE97>:
         */
        max_blindex = build_bl_tree(s);

        /* Determine the best encoding. Compute the block lengths in bytes. */
        opt_lenb = (s->opt_len+3+7)>>3;
        static_lenb = (s->static_len+3+7)>>3;
  40f1ee:	f241 60ac 	movw	r0, #5804	; 0x16ac
  40f1f2:	5820      	ldr	r0, [r4, r0]
  40f1f4:	f100 0e0a 	add.w	lr, r0, #10
  40f1f8:	ea4f 0ede 	mov.w	lr, lr, lsr #3

0040f1fc <.LVL326>:
        opt_lenb = (s->opt_len+3+7)>>3;
  40f1fc:	330a      	adds	r3, #10

0040f1fe <.LVL327>:
  40f1fe:	08db      	lsrs	r3, r3, #3

0040f200 <.LVL328>:
  40f200:	4573      	cmp	r3, lr
  40f202:	bf28      	it	cs
  40f204:	4673      	movcs	r3, lr

0040f206 <.LVL329>:
    }

#ifdef FORCE_STORED
    if (buf != (char*)0) { /* force stored block */
#else
    if (stored_len+4 <= opt_lenb && buf != (char*)0) {
  40f206:	1d28      	adds	r0, r5, #4
  40f208:	4298      	cmp	r0, r3
  40f20a:	d878      	bhi.n	40f2fe <.LVL359>
  40f20c:	f1b9 0f00 	cmp.w	r9, #0
  40f210:	d075      	beq.n	40f2fe <.LVL359>

0040f212 <.LVL330>:
         * Otherwise we can't have processed more than WSIZE input bytes since
         * the last block flush, because compression would have been
         * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
         * transform a block into a stored block.
         */
        _tr_stored_block(s, buf, stored_len, last);
  40f212:	4633      	mov	r3, r6

0040f214 <.LVL331>:
  40f214:	462a      	mov	r2, r5
  40f216:	4649      	mov	r1, r9
  40f218:	4620      	mov	r0, r4
  40f21a:	f009 fdd5 	bl	418dc8 <_tr_stored_block>

0040f21e <.LVL332>:
    }
    Assert (s->compressed_len == s->bits_sent, "bad compressed size");
    /* The above check is made mod 2^32, for files larger than 512 MB
     * and uLong implemented on 32 bits.
     */
    init_block(s);
  40f21e:	4620      	mov	r0, r4
  40f220:	f00c fe30 	bl	41be84 <.LFE2>

0040f224 <.LVL333>:

    if (last) {
  40f224:	2e00      	cmp	r6, #0
  40f226:	f040 81d7 	bne.w	40f5d8 <.LVL403>
        s->compressed_len += 7;  /* align on byte boundary */
#endif
    }
    Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
           s->compressed_len-7*last));
}
  40f22a:	b003      	add	sp, #12

0040f22c <.LCFI26>:
  40f22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040f230 <.LCFI27>:
  40f230:	4607      	mov	r7, r0
  40f232:	f100 0180 	add.w	r1, r0, #128	; 0x80

0040f236 <.LVL335>:
        if (s->strm->data_type == Z_UNKNOWN)
  40f236:	4603      	mov	r3, r0
  40f238:	4aa5      	ldr	r2, [pc, #660]	; (40f4d0 <.LVL388+0x10>)

0040f23a <.LVL336>:
  40f23a:	e003      	b.n	40f244 <.LBB100+0x8>

0040f23c <.LBB100>:
     */
    unsigned long black_mask = 0xf3ffc07fUL;
    int n;

    /* Check for non-textual ("black-listed") bytes. */
    for (n = 0; n <= 31; n++, black_mask >>= 1)
  40f23c:	0852      	lsrs	r2, r2, #1
  40f23e:	3304      	adds	r3, #4
  40f240:	428b      	cmp	r3, r1
  40f242:	d00a      	beq.n	40f25a <.LBB103>
        if ((black_mask & 1) && (s->dyn_ltree[n].Freq != 0))
  40f244:	f012 0f01 	tst.w	r2, #1
  40f248:	d0f8      	beq.n	40f23c <.LBB100>
  40f24a:	f8b3 0094 	ldrh.w	r0, [r3, #148]	; 0x94
  40f24e:	2800      	cmp	r0, #0
  40f250:	d0f4      	beq.n	40f23c <.LBB100>
            return Z_BINARY;
  40f252:	2300      	movs	r3, #0

0040f254 <.LBE100>:
            s->strm->data_type = detect_data_type(s);
  40f254:	f8ce 302c 	str.w	r3, [lr, #44]	; 0x2c
  40f258:	e790      	b.n	40f17c <.LVL316>

0040f25a <.LBB103>:

    /* Check for textual ("white-listed") bytes. */
    if (s->dyn_ltree[9].Freq != 0 || s->dyn_ltree[10].Freq != 0
  40f25a:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
  40f25e:	b98b      	cbnz	r3, 40f284 <.LVL344>
  40f260:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
  40f264:	b983      	cbnz	r3, 40f288 <.LVL344+0x4>
            || s->dyn_ltree[13].Freq != 0)
  40f266:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
  40f26a:	b97b      	cbnz	r3, 40f28c <.LVL344+0x8>

0040f26c <.LVL342>:
        return Z_TEXT;
    for (n = 32; n < LITERALS; n++)
        if (s->dyn_ltree[n].Freq != 0)
  40f26c:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
  40f270:	b973      	cbnz	r3, 40f290 <.LVL345>
  40f272:	f504 725f 	add.w	r2, r4, #892	; 0x37c

0040f276 <.LVL343>:
  40f276:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
  40f27a:	b95b      	cbnz	r3, 40f294 <.LVL346>
  40f27c:	3704      	adds	r7, #4
    for (n = 32; n < LITERALS; n++)
  40f27e:	4297      	cmp	r7, r2
  40f280:	d1f9      	bne.n	40f276 <.LVL343>
  40f282:	e7e7      	b.n	40f254 <.LBE100>

0040f284 <.LVL344>:
        return Z_TEXT;
  40f284:	2301      	movs	r3, #1
  40f286:	e7e5      	b.n	40f254 <.LBE100>
  40f288:	2301      	movs	r3, #1
  40f28a:	e7e3      	b.n	40f254 <.LBE100>
  40f28c:	2301      	movs	r3, #1
  40f28e:	e7e1      	b.n	40f254 <.LBE100>

0040f290 <.LVL345>:
            return Z_TEXT;
  40f290:	2301      	movs	r3, #1
  40f292:	e7df      	b.n	40f254 <.LBE100>

0040f294 <.LVL346>:
  40f294:	2301      	movs	r3, #1
  40f296:	e7dd      	b.n	40f254 <.LBE100>

0040f298 <.LBB104>:
    for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {
  40f298:	2112      	movs	r1, #18
  40f29a:	e79e      	b.n	40f1da <.LVL324>

0040f29c <.LBE104>:
        opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  40f29c:	1d53      	adds	r3, r2, #5

0040f29e <.LVL349>:
    if (stored_len+4 <= opt_lenb && buf != (char*)0) {
  40f29e:	3204      	adds	r2, #4

0040f2a0 <.LVL350>:
  40f2a0:	4293      	cmp	r3, r2
  40f2a2:	d301      	bcc.n	40f2a8 <.LBB105>
  40f2a4:	2900      	cmp	r1, #0
  40f2a6:	d1b4      	bne.n	40f212 <.LVL330>

0040f2a8 <.LBB105>:
        send_bits(s, (STATIC_TREES<<1)+last, 3);
  40f2a8:	f241 63bc 	movw	r3, #5820	; 0x16bc

0040f2ac <.LVL352>:
  40f2ac:	58e3      	ldr	r3, [r4, r3]
  40f2ae:	2b0d      	cmp	r3, #13
  40f2b0:	f340 80ef 	ble.w	40f492 <.LBB125>

0040f2b4 <.LBB106>:
  40f2b4:	1cb2      	adds	r2, r6, #2

0040f2b6 <.LVL354>:
  40f2b6:	b292      	uxth	r2, r2

0040f2b8 <.LVL355>:
  40f2b8:	f241 61b8 	movw	r1, #5816	; 0x16b8
  40f2bc:	fa02 f303 	lsl.w	r3, r2, r3
  40f2c0:	5a60      	ldrh	r0, [r4, r1]
  40f2c2:	4303      	orrs	r3, r0
  40f2c4:	b21b      	sxth	r3, r3
  40f2c6:	5263      	strh	r3, [r4, r1]
  40f2c8:	68a5      	ldr	r5, [r4, #8]

0040f2ca <.LVL356>:
  40f2ca:	6960      	ldr	r0, [r4, #20]
  40f2cc:	1c47      	adds	r7, r0, #1
  40f2ce:	6167      	str	r7, [r4, #20]
  40f2d0:	542b      	strb	r3, [r5, r0]
  40f2d2:	68a5      	ldr	r5, [r4, #8]
  40f2d4:	6960      	ldr	r0, [r4, #20]
  40f2d6:	1c43      	adds	r3, r0, #1
  40f2d8:	6163      	str	r3, [r4, #20]
  40f2da:	5a63      	ldrh	r3, [r4, r1]
  40f2dc:	0a1b      	lsrs	r3, r3, #8
  40f2de:	542b      	strb	r3, [r5, r0]
  40f2e0:	f241 60bc 	movw	r0, #5820	; 0x16bc
  40f2e4:	5823      	ldr	r3, [r4, r0]
  40f2e6:	f1c3 0510 	rsb	r5, r3, #16
  40f2ea:	412a      	asrs	r2, r5
  40f2ec:	5262      	strh	r2, [r4, r1]
  40f2ee:	3b0d      	subs	r3, #13
  40f2f0:	5023      	str	r3, [r4, r0]

0040f2f2 <.LBE105>:
        compress_block(s, (ct_data *)static_ltree, (ct_data *)static_dtree);
  40f2f2:	4a78      	ldr	r2, [pc, #480]	; (40f4d4 <.LVL388+0x14>)
  40f2f4:	4978      	ldr	r1, [pc, #480]	; (40f4d8 <.LVL388+0x18>)
  40f2f6:	4620      	mov	r0, r4
  40f2f8:	f003 fc24 	bl	412b44 <.LBE16>

0040f2fc <.LVL358>:
  40f2fc:	e78f      	b.n	40f21e <.LVL332>

0040f2fe <.LVL359>:
    } else if (s->strategy == Z_FIXED || static_lenb == opt_lenb) {
  40f2fe:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
  40f302:	2804      	cmp	r0, #4
  40f304:	d0d0      	beq.n	40f2a8 <.LBB105>
  40f306:	459e      	cmp	lr, r3
  40f308:	d0ce      	beq.n	40f2a8 <.LBB105>

0040f30a <.LBB107>:
        send_bits(s, (DYN_TREES<<1)+last, 3);
  40f30a:	f241 63bc 	movw	r3, #5820	; 0x16bc

0040f30e <.LVL361>:
  40f30e:	58e3      	ldr	r3, [r4, r3]
  40f310:	2b0d      	cmp	r3, #13
  40f312:	f340 80cb 	ble.w	40f4ac <.LBB126>

0040f316 <.LBB108>:
  40f316:	1d35      	adds	r5, r6, #4

0040f318 <.LVL363>:
  40f318:	b2ad      	uxth	r5, r5

0040f31a <.LVL364>:
  40f31a:	f241 6eb8 	movw	lr, #5816	; 0x16b8

0040f31e <.LVL365>:
  40f31e:	fa05 f303 	lsl.w	r3, r5, r3
  40f322:	f834 000e 	ldrh.w	r0, [r4, lr]
  40f326:	4303      	orrs	r3, r0
  40f328:	b21b      	sxth	r3, r3
  40f32a:	f824 300e 	strh.w	r3, [r4, lr]

0040f32e <.LVL366>:
  40f32e:	6960      	ldr	r0, [r4, #20]
  40f330:	f100 0901 	add.w	r9, r0, #1

0040f334 <.LVL367>:
  40f334:	f8c4 9014 	str.w	r9, [r4, #20]
  40f338:	68a2      	ldr	r2, [r4, #8]
  40f33a:	5413      	strb	r3, [r2, r0]
  40f33c:	6963      	ldr	r3, [r4, #20]
  40f33e:	1c58      	adds	r0, r3, #1
  40f340:	6160      	str	r0, [r4, #20]
  40f342:	f834 000e 	ldrh.w	r0, [r4, lr]
  40f346:	0a00      	lsrs	r0, r0, #8
  40f348:	68a2      	ldr	r2, [r4, #8]
  40f34a:	54d0      	strb	r0, [r2, r3]
  40f34c:	f241 60bc 	movw	r0, #5820	; 0x16bc
  40f350:	5823      	ldr	r3, [r4, r0]
  40f352:	f1c3 0c10 	rsb	ip, r3, #16
  40f356:	fa45 f50c 	asr.w	r5, r5, ip
  40f35a:	f824 500e 	strh.w	r5, [r4, lr]
  40f35e:	3b0d      	subs	r3, #13
  40f360:	5023      	str	r3, [r4, r0]

0040f362 <.LBE107>:
        send_all_trees(s, s->l_desc.max_code+1, s->d_desc.max_code+1,
  40f362:	f8d4 ab1c 	ldr.w	sl, [r4, #2844]	; 0xb1c
  40f366:	f8d4 3b28 	ldr.w	r3, [r4, #2856]	; 0xb28
  40f36a:	9301      	str	r3, [sp, #4]

0040f36c <.LBB109>:
    send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */
  40f36c:	f241 63bc 	movw	r3, #5820	; 0x16bc

0040f370 <.LVL370>:
  40f370:	58e3      	ldr	r3, [r4, r3]
  40f372:	2b0b      	cmp	r3, #11
  40f374:	f340 80b4 	ble.w	40f4e0 <.LBB119>

0040f378 <.LBB112>:
  40f378:	f5aa 7080 	sub.w	r0, sl, #256	; 0x100

0040f37c <.LVL372>:
  40f37c:	b280      	uxth	r0, r0

0040f37e <.LVL373>:
  40f37e:	f241 6eb8 	movw	lr, #5816	; 0x16b8
  40f382:	fa00 f303 	lsl.w	r3, r0, r3
  40f386:	f834 500e 	ldrh.w	r5, [r4, lr]
  40f38a:	431d      	orrs	r5, r3
  40f38c:	b22d      	sxth	r5, r5
  40f38e:	f824 500e 	strh.w	r5, [r4, lr]

0040f392 <.LVL374>:
  40f392:	6963      	ldr	r3, [r4, #20]
  40f394:	f103 0901 	add.w	r9, r3, #1
  40f398:	f8c4 9014 	str.w	r9, [r4, #20]
  40f39c:	68a2      	ldr	r2, [r4, #8]
  40f39e:	54d5      	strb	r5, [r2, r3]
  40f3a0:	6963      	ldr	r3, [r4, #20]
  40f3a2:	1c5d      	adds	r5, r3, #1
  40f3a4:	6165      	str	r5, [r4, #20]
  40f3a6:	f834 500e 	ldrh.w	r5, [r4, lr]
  40f3aa:	0a2d      	lsrs	r5, r5, #8
  40f3ac:	68a2      	ldr	r2, [r4, #8]
  40f3ae:	54d5      	strb	r5, [r2, r3]
  40f3b0:	f241 65bc 	movw	r5, #5820	; 0x16bc
  40f3b4:	5963      	ldr	r3, [r4, r5]
  40f3b6:	f1c3 0c10 	rsb	ip, r3, #16
  40f3ba:	fa40 f00c 	asr.w	r0, r0, ip
  40f3be:	f824 000e 	strh.w	r0, [r4, lr]
  40f3c2:	3b0b      	subs	r3, #11
  40f3c4:	5163      	str	r3, [r4, r5]

0040f3c6 <.LBB113>:
    send_bits(s, dcodes-1,   5);
  40f3c6:	f241 63bc 	movw	r3, #5820	; 0x16bc
  40f3ca:	58e3      	ldr	r3, [r4, r3]
  40f3cc:	2b0b      	cmp	r3, #11
  40f3ce:	f340 8097 	ble.w	40f500 <.LBB120>

0040f3d2 <.LVL376>:
  40f3d2:	f8bd 5004 	ldrh.w	r5, [sp, #4]

0040f3d6 <.LBB114>:
  40f3d6:	f241 6eb8 	movw	lr, #5816	; 0x16b8
  40f3da:	fa05 f003 	lsl.w	r0, r5, r3
  40f3de:	f834 300e 	ldrh.w	r3, [r4, lr]
  40f3e2:	4318      	orrs	r0, r3
  40f3e4:	b200      	sxth	r0, r0
  40f3e6:	f824 000e 	strh.w	r0, [r4, lr]
  40f3ea:	6963      	ldr	r3, [r4, #20]
  40f3ec:	f103 0901 	add.w	r9, r3, #1
  40f3f0:	f8c4 9014 	str.w	r9, [r4, #20]
  40f3f4:	68a2      	ldr	r2, [r4, #8]
  40f3f6:	54d0      	strb	r0, [r2, r3]
  40f3f8:	6963      	ldr	r3, [r4, #20]
  40f3fa:	1c58      	adds	r0, r3, #1
  40f3fc:	6160      	str	r0, [r4, #20]
  40f3fe:	f834 000e 	ldrh.w	r0, [r4, lr]
  40f402:	0a00      	lsrs	r0, r0, #8
  40f404:	68a2      	ldr	r2, [r4, #8]
  40f406:	54d0      	strb	r0, [r2, r3]
  40f408:	f241 60bc 	movw	r0, #5820	; 0x16bc
  40f40c:	5823      	ldr	r3, [r4, r0]
  40f40e:	f1c3 0c10 	rsb	ip, r3, #16
  40f412:	fa45 f50c 	asr.w	r5, r5, ip
  40f416:	f824 500e 	strh.w	r5, [r4, lr]
  40f41a:	3b0b      	subs	r3, #11
  40f41c:	5023      	str	r3, [r4, r0]

0040f41e <.LBB115>:
    send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */
  40f41e:	f241 63bc 	movw	r3, #5820	; 0x16bc
  40f422:	58e3      	ldr	r3, [r4, r3]
  40f424:	2b0c      	cmp	r3, #12
  40f426:	dd7a      	ble.n	40f51e <.LBB121>

0040f428 <.LBB116>:
  40f428:	1ec8      	subs	r0, r1, #3

0040f42a <.LVL379>:
  40f42a:	b280      	uxth	r0, r0

0040f42c <.LVL380>:
  40f42c:	f241 6eb8 	movw	lr, #5816	; 0x16b8
  40f430:	fa00 f503 	lsl.w	r5, r0, r3
  40f434:	f834 300e 	ldrh.w	r3, [r4, lr]
  40f438:	431d      	orrs	r5, r3
  40f43a:	b22d      	sxth	r5, r5
  40f43c:	f824 500e 	strh.w	r5, [r4, lr]
  40f440:	6963      	ldr	r3, [r4, #20]
  40f442:	f103 0901 	add.w	r9, r3, #1
  40f446:	f8c4 9014 	str.w	r9, [r4, #20]
  40f44a:	68a2      	ldr	r2, [r4, #8]
  40f44c:	54d5      	strb	r5, [r2, r3]
  40f44e:	6963      	ldr	r3, [r4, #20]
  40f450:	1c5d      	adds	r5, r3, #1
  40f452:	6165      	str	r5, [r4, #20]
  40f454:	f834 500e 	ldrh.w	r5, [r4, lr]
  40f458:	0a2d      	lsrs	r5, r5, #8
  40f45a:	68a2      	ldr	r2, [r4, #8]
  40f45c:	54d5      	strb	r5, [r2, r3]
  40f45e:	f241 65bc 	movw	r5, #5820	; 0x16bc
  40f462:	5963      	ldr	r3, [r4, r5]
  40f464:	f1c3 0c10 	rsb	ip, r3, #16
  40f468:	fa40 f00c 	asr.w	r0, r0, ip
  40f46c:	f824 000e 	strh.w	r0, [r4, lr]
  40f470:	3b0c      	subs	r3, #12
  40f472:	5163      	str	r3, [r4, r5]

0040f474 <.LBE115>:
    for (rank = 0; rank < blcodes; rank++) {
  40f474:	f1bb 0f00 	cmp.w	fp, #0
  40f478:	f340 809e 	ble.w	40f5b8 <.LBE118>
  40f47c:	4817      	ldr	r0, [pc, #92]	; (40f4dc <.LVL388+0x1c>)
  40f47e:	3101      	adds	r1, #1

0040f480 <.LVL382>:
  40f480:	4401      	add	r1, r0

0040f482 <.LBB117>:
        send_bits(s, s->bl_tree[bl_order[rank]].Len, 3);
  40f482:	f241 69bc 	movw	r9, #5820	; 0x16bc
  40f486:	44a1      	add	r9, r4
  40f488:	f241 6cb8 	movw	ip, #5816	; 0x16b8
  40f48c:	44a4      	add	ip, r4
  40f48e:	46b6      	mov	lr, r6
  40f490:	e066      	b.n	40f560 <.LBB123>

0040f492 <.LBB125>:
        send_bits(s, (STATIC_TREES<<1)+last, 3);
  40f492:	f241 61b8 	movw	r1, #5816	; 0x16b8
  40f496:	1cb2      	adds	r2, r6, #2
  40f498:	b292      	uxth	r2, r2
  40f49a:	409a      	lsls	r2, r3
  40f49c:	5a60      	ldrh	r0, [r4, r1]
  40f49e:	4302      	orrs	r2, r0
  40f4a0:	5262      	strh	r2, [r4, r1]
  40f4a2:	3303      	adds	r3, #3
  40f4a4:	f241 62bc 	movw	r2, #5820	; 0x16bc
  40f4a8:	50a3      	str	r3, [r4, r2]
  40f4aa:	e722      	b.n	40f2f2 <.LBE105>

0040f4ac <.LBB126>:
        send_bits(s, (DYN_TREES<<1)+last, 3);
  40f4ac:	f241 65b8 	movw	r5, #5816	; 0x16b8

0040f4b0 <.LVL386>:
  40f4b0:	1d30      	adds	r0, r6, #4
  40f4b2:	b280      	uxth	r0, r0
  40f4b4:	4098      	lsls	r0, r3
  40f4b6:	f834 e005 	ldrh.w	lr, [r4, r5]

0040f4ba <.LVL387>:
  40f4ba:	ea40 000e 	orr.w	r0, r0, lr
  40f4be:	5360      	strh	r0, [r4, r5]

0040f4c0 <.LVL388>:
  40f4c0:	3303      	adds	r3, #3
  40f4c2:	f241 60bc 	movw	r0, #5820	; 0x16bc
  40f4c6:	5023      	str	r3, [r4, r0]
  40f4c8:	e74b      	b.n	40f362 <.LBE107>
  40f4ca:	bf00      	nop
  40f4cc:	0041d9c1 	.word	0x0041d9c1
  40f4d0:	f3ffc07f 	.word	0xf3ffc07f
  40f4d4:	0041b174 	.word	0x0041b174
  40f4d8:	0040f5e0 	.word	0x0040f5e0
  40f4dc:	0041d9b0 	.word	0x0041d9b0

0040f4e0 <.LBB119>:
    send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */
  40f4e0:	f241 65b8 	movw	r5, #5816	; 0x16b8
  40f4e4:	f5aa 7080 	sub.w	r0, sl, #256	; 0x100
  40f4e8:	b280      	uxth	r0, r0
  40f4ea:	4098      	lsls	r0, r3
  40f4ec:	f834 e005 	ldrh.w	lr, [r4, r5]
  40f4f0:	ea40 000e 	orr.w	r0, r0, lr
  40f4f4:	5360      	strh	r0, [r4, r5]

0040f4f6 <.LVL390>:
  40f4f6:	3305      	adds	r3, #5
  40f4f8:	f241 60bc 	movw	r0, #5820	; 0x16bc
  40f4fc:	5023      	str	r3, [r4, r0]
  40f4fe:	e762      	b.n	40f3c6 <.LBB113>

0040f500 <.LBB120>:
    send_bits(s, dcodes-1,   5);
  40f500:	f241 65b8 	movw	r5, #5816	; 0x16b8
  40f504:	f8bd 0004 	ldrh.w	r0, [sp, #4]
  40f508:	4098      	lsls	r0, r3
  40f50a:	f834 e005 	ldrh.w	lr, [r4, r5]
  40f50e:	ea40 000e 	orr.w	r0, r0, lr
  40f512:	5360      	strh	r0, [r4, r5]
  40f514:	3305      	adds	r3, #5
  40f516:	f241 60bc 	movw	r0, #5820	; 0x16bc
  40f51a:	5023      	str	r3, [r4, r0]
  40f51c:	e77f      	b.n	40f41e <.LBB115>

0040f51e <.LBB121>:
    send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */
  40f51e:	f241 65b8 	movw	r5, #5816	; 0x16b8
  40f522:	f1ab 0004 	sub.w	r0, fp, #4
  40f526:	b280      	uxth	r0, r0
  40f528:	4098      	lsls	r0, r3
  40f52a:	f834 e005 	ldrh.w	lr, [r4, r5]
  40f52e:	ea40 000e 	orr.w	r0, r0, lr
  40f532:	5360      	strh	r0, [r4, r5]
  40f534:	3304      	adds	r3, #4
  40f536:	f241 60bc 	movw	r0, #5820	; 0x16bc
  40f53a:	5023      	str	r3, [r4, r0]
  40f53c:	e79a      	b.n	40f474 <.LBE115>

0040f53e <.LBB122>:
        send_bits(s, s->bl_tree[bl_order[rank]].Len, 3);
  40f53e:	7802      	ldrb	r2, [r0, #0]
  40f540:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  40f544:	f8b2 2a7e 	ldrh.w	r2, [r2, #2686]	; 0xa7e
  40f548:	409a      	lsls	r2, r3
  40f54a:	f8bc 5000 	ldrh.w	r5, [ip]
  40f54e:	432a      	orrs	r2, r5
  40f550:	f8ac 2000 	strh.w	r2, [ip]
  40f554:	3303      	adds	r3, #3
  40f556:	f8c9 3000 	str.w	r3, [r9]

0040f55a <.LVL394>:
  40f55a:	3001      	adds	r0, #1

0040f55c <.LBE122>:
    for (rank = 0; rank < blcodes; rank++) {
  40f55c:	4281      	cmp	r1, r0
  40f55e:	d02a      	beq.n	40f5b6 <.LVL398+0xc>

0040f560 <.LBB123>:
        send_bits(s, s->bl_tree[bl_order[rank]].Len, 3);
  40f560:	f8d9 3000 	ldr.w	r3, [r9]
  40f564:	2b0d      	cmp	r3, #13
  40f566:	ddea      	ble.n	40f53e <.LBB122>

0040f568 <.LBB118>:
  40f568:	7802      	ldrb	r2, [r0, #0]
  40f56a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  40f56e:	f8b2 5a7e 	ldrh.w	r5, [r2, #2686]	; 0xa7e

0040f572 <.LVL397>:
  40f572:	fa05 f303 	lsl.w	r3, r5, r3
  40f576:	f8bc 2000 	ldrh.w	r2, [ip]
  40f57a:	4313      	orrs	r3, r2
  40f57c:	b21b      	sxth	r3, r3
  40f57e:	f8ac 3000 	strh.w	r3, [ip]
  40f582:	6962      	ldr	r2, [r4, #20]
  40f584:	f102 0b01 	add.w	fp, r2, #1
  40f588:	f8c4 b014 	str.w	fp, [r4, #20]
  40f58c:	68a6      	ldr	r6, [r4, #8]
  40f58e:	54b3      	strb	r3, [r6, r2]
  40f590:	6963      	ldr	r3, [r4, #20]
  40f592:	1c5a      	adds	r2, r3, #1
  40f594:	6162      	str	r2, [r4, #20]
  40f596:	f8bc 2000 	ldrh.w	r2, [ip]
  40f59a:	0a12      	lsrs	r2, r2, #8
  40f59c:	68a6      	ldr	r6, [r4, #8]
  40f59e:	54f2      	strb	r2, [r6, r3]
  40f5a0:	f8d9 3000 	ldr.w	r3, [r9]
  40f5a4:	f1c3 0210 	rsb	r2, r3, #16
  40f5a8:	4115      	asrs	r5, r2

0040f5aa <.LVL398>:
  40f5aa:	f8ac 5000 	strh.w	r5, [ip]
  40f5ae:	3b0d      	subs	r3, #13
  40f5b0:	f8c9 3000 	str.w	r3, [r9]
  40f5b4:	e7d1      	b.n	40f55a <.LVL394>
  40f5b6:	4676      	mov	r6, lr

0040f5b8 <.LBE118>:
    send_tree(s, (ct_data *)s->dyn_ltree, lcodes-1); /* literal tree */
  40f5b8:	4652      	mov	r2, sl
  40f5ba:	4639      	mov	r1, r7
  40f5bc:	4620      	mov	r0, r4
  40f5be:	f002 fa3a 	bl	411a36 <.LBE100>

0040f5c2 <.LVL400>:
    send_tree(s, (ct_data *)s->dyn_dtree, dcodes-1); /* distance tree */
  40f5c2:	9a01      	ldr	r2, [sp, #4]
  40f5c4:	4641      	mov	r1, r8
  40f5c6:	4620      	mov	r0, r4
  40f5c8:	f002 fa35 	bl	411a36 <.LBE100>

0040f5cc <.LBE127>:
        compress_block(s, (ct_data *)s->dyn_ltree, (ct_data *)s->dyn_dtree);
  40f5cc:	4642      	mov	r2, r8
  40f5ce:	4639      	mov	r1, r7
  40f5d0:	4620      	mov	r0, r4
  40f5d2:	f003 fab7 	bl	412b44 <.LBE16>

0040f5d6 <.LVL402>:
  40f5d6:	e622      	b.n	40f21e <.LVL332>

0040f5d8 <.LVL403>:
        bi_windup(s);
  40f5d8:	4620      	mov	r0, r4
  40f5da:	f00c fd8d 	bl	41c0f8 <.LFE232>

0040f5de <.LVL404>:
}
  40f5de:	e624      	b.n	40f22a <.LVL333+0x6>

Disassembly of section .rodata.static_ltree%54:

0040f5e0 <static_ltree>:
  40f5e0:	000c 0008 008c 0008 004c 0008 00cc 0008     ........L.......
  40f5f0:	002c 0008 00ac 0008 006c 0008 00ec 0008     ,.......l.......
  40f600:	001c 0008 009c 0008 005c 0008 00dc 0008     ........\.......
  40f610:	003c 0008 00bc 0008 007c 0008 00fc 0008     <.......|.......
  40f620:	0002 0008 0082 0008 0042 0008 00c2 0008     ........B.......
  40f630:	0022 0008 00a2 0008 0062 0008 00e2 0008     ".......b.......
  40f640:	0012 0008 0092 0008 0052 0008 00d2 0008     ........R.......
  40f650:	0032 0008 00b2 0008 0072 0008 00f2 0008     2.......r.......
  40f660:	000a 0008 008a 0008 004a 0008 00ca 0008     ........J.......
  40f670:	002a 0008 00aa 0008 006a 0008 00ea 0008     *.......j.......
  40f680:	001a 0008 009a 0008 005a 0008 00da 0008     ........Z.......
  40f690:	003a 0008 00ba 0008 007a 0008 00fa 0008     :.......z.......
  40f6a0:	0006 0008 0086 0008 0046 0008 00c6 0008     ........F.......
  40f6b0:	0026 0008 00a6 0008 0066 0008 00e6 0008     &.......f.......
  40f6c0:	0016 0008 0096 0008 0056 0008 00d6 0008     ........V.......
  40f6d0:	0036 0008 00b6 0008 0076 0008 00f6 0008     6.......v.......
  40f6e0:	000e 0008 008e 0008 004e 0008 00ce 0008     ........N.......
  40f6f0:	002e 0008 00ae 0008 006e 0008 00ee 0008     ........n.......
  40f700:	001e 0008 009e 0008 005e 0008 00de 0008     ........^.......
  40f710:	003e 0008 00be 0008 007e 0008 00fe 0008     >.......~.......
  40f720:	0001 0008 0081 0008 0041 0008 00c1 0008     ........A.......
  40f730:	0021 0008 00a1 0008 0061 0008 00e1 0008     !.......a.......
  40f740:	0011 0008 0091 0008 0051 0008 00d1 0008     ........Q.......
  40f750:	0031 0008 00b1 0008 0071 0008 00f1 0008     1.......q.......
  40f760:	0009 0008 0089 0008 0049 0008 00c9 0008     ........I.......
  40f770:	0029 0008 00a9 0008 0069 0008 00e9 0008     ).......i.......
  40f780:	0019 0008 0099 0008 0059 0008 00d9 0008     ........Y.......
  40f790:	0039 0008 00b9 0008 0079 0008 00f9 0008     9.......y.......
  40f7a0:	0005 0008 0085 0008 0045 0008 00c5 0008     ........E.......
  40f7b0:	0025 0008 00a5 0008 0065 0008 00e5 0008     %.......e.......
  40f7c0:	0015 0008 0095 0008 0055 0008 00d5 0008     ........U.......
  40f7d0:	0035 0008 00b5 0008 0075 0008 00f5 0008     5.......u.......
  40f7e0:	000d 0008 008d 0008 004d 0008 00cd 0008     ........M.......
  40f7f0:	002d 0008 00ad 0008 006d 0008 00ed 0008     -.......m.......
  40f800:	001d 0008 009d 0008 005d 0008 00dd 0008     ........].......
  40f810:	003d 0008 00bd 0008 007d 0008 00fd 0008     =.......}.......
  40f820:	0013 0009 0113 0009 0093 0009 0193 0009     ................
  40f830:	0053 0009 0153 0009 00d3 0009 01d3 0009     S...S...........
  40f840:	0033 0009 0133 0009 00b3 0009 01b3 0009     3...3...........
  40f850:	0073 0009 0173 0009 00f3 0009 01f3 0009     s...s...........
  40f860:	000b 0009 010b 0009 008b 0009 018b 0009     ................
  40f870:	004b 0009 014b 0009 00cb 0009 01cb 0009     K...K...........
  40f880:	002b 0009 012b 0009 00ab 0009 01ab 0009     +...+...........
  40f890:	006b 0009 016b 0009 00eb 0009 01eb 0009     k...k...........
  40f8a0:	001b 0009 011b 0009 009b 0009 019b 0009     ................
  40f8b0:	005b 0009 015b 0009 00db 0009 01db 0009     [...[...........
  40f8c0:	003b 0009 013b 0009 00bb 0009 01bb 0009     ;...;...........
  40f8d0:	007b 0009 017b 0009 00fb 0009 01fb 0009     {...{...........
  40f8e0:	0007 0009 0107 0009 0087 0009 0187 0009     ................
  40f8f0:	0047 0009 0147 0009 00c7 0009 01c7 0009     G...G...........
  40f900:	0027 0009 0127 0009 00a7 0009 01a7 0009     '...'...........
  40f910:	0067 0009 0167 0009 00e7 0009 01e7 0009     g...g...........
  40f920:	0017 0009 0117 0009 0097 0009 0197 0009     ................
  40f930:	0057 0009 0157 0009 00d7 0009 01d7 0009     W...W...........
  40f940:	0037 0009 0137 0009 00b7 0009 01b7 0009     7...7...........
  40f950:	0077 0009 0177 0009 00f7 0009 01f7 0009     w...w...........
  40f960:	000f 0009 010f 0009 008f 0009 018f 0009     ................
  40f970:	004f 0009 014f 0009 00cf 0009 01cf 0009     O...O...........
  40f980:	002f 0009 012f 0009 00af 0009 01af 0009     /.../...........
  40f990:	006f 0009 016f 0009 00ef 0009 01ef 0009     o...o...........
  40f9a0:	001f 0009 011f 0009 009f 0009 019f 0009     ................
  40f9b0:	005f 0009 015f 0009 00df 0009 01df 0009     _..._...........
  40f9c0:	003f 0009 013f 0009 00bf 0009 01bf 0009     ?...?...........
  40f9d0:	007f 0009 017f 0009 00ff 0009 01ff 0009     ................
  40f9e0:	0000 0007 0040 0007 0020 0007 0060 0007     ....@... ...`...
  40f9f0:	0010 0007 0050 0007 0030 0007 0070 0007     ....P...0...p...
  40fa00:	0008 0007 0048 0007 0028 0007 0068 0007     ....H...(...h...
  40fa10:	0018 0007 0058 0007 0038 0007 0078 0007     ....X...8...x...
  40fa20:	0004 0007 0044 0007 0024 0007 0064 0007     ....D...$...d...
  40fa30:	0014 0007 0054 0007 0034 0007 0074 0007     ....T...4...t...
  40fa40:	0003 0008 0083 0008 0043 0008 00c3 0008     ........C.......
  40fa50:	0023 0008 00a3 0008 0063 0008 00e3 0008     #.......c.......

Disassembly of section .text.fp_invmod%55:

0040fa60 <fp_invmod>:
  return FP_OKAY;
}

/* c = 1/a (mod b) for odd b only */
int fp_invmod(fp_int *a, fp_int *b, fp_int *c)
{
  40fa60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

0040fa64 <.LCFI92>:
  40fa64:	f5ad 5df1 	sub.w	sp, sp, #7712	; 0x1e20

0040fa68 <.LCFI93>:
  40fa68:	b084      	sub	sp, #16

0040fa6a <.LCFI94>:
  40fa6a:	4681      	mov	r9, r0
  40fa6c:	4688      	mov	r8, r1
  40fa6e:	4692      	mov	sl, r2
  fp_int  x, y, u, v, B, D;
  int     neg;

  /* 2. [modified] b must be odd   */
  if (fp_iseven (b) == FP_YES) {
  40fa70:	680b      	ldr	r3, [r1, #0]
  40fa72:	2b00      	cmp	r3, #0
  40fa74:	dd04      	ble.n	40fa80 <.LBB126>
  40fa76:	688b      	ldr	r3, [r1, #8]
  40fa78:	f013 0f01 	tst.w	r3, #1
  40fa7c:	f000 80d1 	beq.w	40fc22 <.LBB157>

0040fa80 <.LBB126>:
    a->size = FP_SIZE;
#endif
#ifdef HAVE_WOLF_BIGINT
    wc_bigint_init(&a->raw);
#endif
    fp_zero(a);
  40fa80:	f641 4008 	movw	r0, #7176	; 0x1c08

0040fa84 <.LVL641>:
  40fa84:	4468      	add	r0, sp
  40fa86:	f00d ff7f 	bl	41d988 <.LFE163>

0040fa8a <.LBB128>:
  40fa8a:	f50d 54cf 	add.w	r4, sp, #6624	; 0x19e0

0040fa8e <.LVL643>:
  40fa8e:	4620      	mov	r0, r4
  40fa90:	f00d ff7a 	bl	41d988 <.LFE163>

0040fa94 <.LBB130>:
  40fa94:	f241 70b8 	movw	r0, #6072	; 0x17b8
  40fa98:	4468      	add	r0, sp
  40fa9a:	f00d ff75 	bl	41d988 <.LFE163>

0040fa9e <.LBB132>:
  40fa9e:	f241 5090 	movw	r0, #5520	; 0x1590
  40faa2:	4468      	add	r0, sp
  40faa4:	f00d ff70 	bl	41d988 <.LFE163>

0040faa8 <.LBB134>:
  40faa8:	f241 3068 	movw	r0, #4968	; 0x1368
  40faac:	4468      	add	r0, sp
  40faae:	f00d ff6b 	bl	41d988 <.LFE163>

0040fab2 <.LBB136>:
  40fab2:	f50d 508a 	add.w	r0, sp, #4416	; 0x1140

0040fab6 <.LVL648>:
  40fab6:	f00d ff67 	bl	41d988 <.LFE163>

0040faba <.LBE136>:
  fp_copy(b, &x);
  40faba:	f641 4108 	movw	r1, #7176	; 0x1c08
  40fabe:	4469      	add	r1, sp
  40fac0:	4640      	mov	r0, r8
  40fac2:	f00d fca5 	bl	41d410 <.LFE194>

0040fac6 <.LVL650>:
  fp_abs(a, &y);
  40fac6:	4621      	mov	r1, r4
  40fac8:	4648      	mov	r0, r9
  40faca:	f00d fca1 	bl	41d410 <.LFE194>

0040face <.LVL651>:
  40face:	2300      	movs	r3, #0
  40fad0:	6063      	str	r3, [r4, #4]
  fp_copy(&x, &u);
  40fad2:	f241 71b8 	movw	r1, #6072	; 0x17b8
  40fad6:	4469      	add	r1, sp
  40fad8:	f641 4008 	movw	r0, #7176	; 0x1c08
  40fadc:	4468      	add	r0, sp
  40fade:	f00d fc97 	bl	41d410 <.LFE194>

0040fae2 <.LVL652>:
  fp_copy(&y, &v);
  40fae2:	f241 5190 	movw	r1, #5520	; 0x1590
  40fae6:	4469      	add	r1, sp
  40fae8:	4620      	mov	r0, r4
  40faea:	f00d fc91 	bl	41d410 <.LFE194>

0040faee <.LVL653>:
  fp_set (&D, 1);
  40faee:	2101      	movs	r1, #1
  40faf0:	f50d 508a 	add.w	r0, sp, #4416	; 0x1140
  40faf4:	f00d ff32 	bl	41d95c <.LFE20>

0040faf8 <.LVL654>:
  while (fp_iseven (&u) == FP_YES) {
  40faf8:	f241 77b8 	movw	r7, #6072	; 0x17b8
  40fafc:	446f      	add	r7, sp
  while (fp_iseven (&v) == FP_YES) {
  40fafe:	f241 5690 	movw	r6, #5520	; 0x1590
  40fb02:	446e      	add	r6, sp
  40fb04:	4635      	mov	r5, r6
  40fb06:	e1d6      	b.n	40feb6 <.LVL729+0x8>

0040fb08 <.LBB138>:
    fp_sub (&v, &u, &v);
  40fb08:	4622      	mov	r2, r4
  40fb0a:	f50d 618a 	add.w	r1, sp, #1104	; 0x450
  40fb0e:	4620      	mov	r0, r4
  40fb10:	f00c fe0a 	bl	41c728 <.LFE171>

0040fb14 <.LVL656>:
    fp_sub (&C, &A, &C);
  40fb14:	f50d 624f 	add.w	r2, sp, #3312	; 0xcf0
  40fb18:	f50d 610a 	add.w	r1, sp, #2208	; 0x8a0
  40fb1c:	4610      	mov	r0, r2
  40fb1e:	f00c fe03 	bl	41c728 <.LFE171>

0040fb22 <.LVL657>:
    fp_sub (&D, &B, &D);
  40fb22:	f60d 7218 	addw	r2, sp, #3864	; 0xf18
  40fb26:	f60d 21c8 	addw	r1, sp, #2760	; 0xac8
  40fb2a:	4610      	mov	r0, r2
  40fb2c:	f00c fdfc 	bl	41c728 <.LFE171>

0040fb30 <.LVL658>:
  40fb30:	e126      	b.n	40fd80 <.LVL714>
  if (fp_cmp_d (&v, 1) != FP_EQ) {
  40fb32:	2101      	movs	r1, #1
  40fb34:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
  40fb38:	f00c fbac 	bl	41c294 <.LFE0>

0040fb3c <.LVL659>:
  40fb3c:	4605      	mov	r5, r0

0040fb3e <.LVL660>:
  40fb3e:	bb20      	cbnz	r0, 40fb8a <.LVL665+0x2>
  while (fp_cmp_d(&C, 0) == FP_LT) {
  40fb40:	2400      	movs	r4, #0
  40fb42:	e005      	b.n	40fb50 <.LVL661>
      fp_add(&C, b, &C);
  40fb44:	f50d 624f 	add.w	r2, sp, #3312	; 0xcf0
  40fb48:	4641      	mov	r1, r8
  40fb4a:	4610      	mov	r0, r2
  40fb4c:	f00c fcac 	bl	41c4a8 <.LFE17>

0040fb50 <.LVL661>:
  while (fp_cmp_d(&C, 0) == FP_LT) {
  40fb50:	4621      	mov	r1, r4
  40fb52:	f50d 604f 	add.w	r0, sp, #3312	; 0xcf0
  40fb56:	f00c fb9d 	bl	41c294 <.LFE0>

0040fb5a <.LVL662>:
  40fb5a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40fb5e:	d0f1      	beq.n	40fb44 <.LVL660+0x6>
  40fb60:	e005      	b.n	40fb6e <.LVL663>
      fp_sub(&C, b, &C);
  40fb62:	f50d 624f 	add.w	r2, sp, #3312	; 0xcf0
  40fb66:	4641      	mov	r1, r8
  40fb68:	4610      	mov	r0, r2
  40fb6a:	f00c fddd 	bl	41c728 <.LFE171>

0040fb6e <.LVL663>:
  while (fp_cmp_mag(&C, b) != FP_LT) {
  40fb6e:	4641      	mov	r1, r8
  40fb70:	f50d 604f 	add.w	r0, sp, #3312	; 0xcf0
  40fb74:	f00b fe7b 	bl	41b86e <.LFE179>

0040fb78 <.LVL664>:
  40fb78:	f1b0 3fff 	cmp.w	r0, #4294967295
  40fb7c:	d1f1      	bne.n	40fb62 <.LVL662+0x8>
  fp_copy(&C, c);
  40fb7e:	4651      	mov	r1, sl
  40fb80:	f50d 604f 	add.w	r0, sp, #3312	; 0xcf0
  40fb84:	f00d fc44 	bl	41d410 <.LFE194>

0040fb88 <.LVL665>:
  40fb88:	e042      	b.n	40fc10 <.LVL677>
    return FP_VAL;
  40fb8a:	f04f 35ff 	mov.w	r5, #4294967295
  40fb8e:	e03f      	b.n	40fc10 <.LVL677>

0040fb90 <.LVL666>:
    return FP_VAL;
  40fb90:	f04f 35ff 	mov.w	r5, #4294967295

0040fb94 <.LBE138>:
    return fp_invmod_slow(a,b,c);
  40fb94:	e03c      	b.n	40fc10 <.LVL677>

0040fb96 <.LVL668>:
    fp_sub (&v, &u, &v);
  40fb96:	462a      	mov	r2, r5
  40fb98:	4639      	mov	r1, r7
  40fb9a:	4628      	mov	r0, r5
  40fb9c:	f00c fdc4 	bl	41c728 <.LFE171>

0040fba0 <.LVL669>:
    fp_sub (&D, &B, &D);
  40fba0:	f50d 528a 	add.w	r2, sp, #4416	; 0x1140
  40fba4:	f241 3168 	movw	r1, #4968	; 0x1368
  40fba8:	4469      	add	r1, sp
  40fbaa:	4610      	mov	r0, r2
  40fbac:	f00c fdbc 	bl	41c728 <.LFE171>

0040fbb0 <.LVL670>:
  40fbb0:	e17d      	b.n	40feae <.LVL729>
  if (fp_cmp_d (&v, 1) != FP_EQ) {
  40fbb2:	2101      	movs	r1, #1
  40fbb4:	f241 5090 	movw	r0, #5520	; 0x1590
  40fbb8:	4468      	add	r0, sp
  40fbba:	f00c fb6b 	bl	41c294 <.LFE0>

0040fbbe <.LVL671>:
  40fbbe:	4605      	mov	r5, r0
  40fbc0:	bb60      	cbnz	r0, 40fc1c <.LCFI96>
  neg = a->sign;
  40fbc2:	f8d9 6004 	ldr.w	r6, [r9, #4]

0040fbc6 <.LVL672>:
  while (D.sign == FP_NEG) {
  40fbc6:	f50d 538a 	add.w	r3, sp, #4416	; 0x1140
  40fbca:	685b      	ldr	r3, [r3, #4]
  40fbcc:	2b01      	cmp	r3, #1
  40fbce:	d110      	bne.n	40fbf2 <.LVL674>
    fp_add (&D, b, &D);
  40fbd0:	f50d 548a 	add.w	r4, sp, #4416	; 0x1140
  40fbd4:	4622      	mov	r2, r4
  40fbd6:	4641      	mov	r1, r8
  40fbd8:	4620      	mov	r0, r4
  40fbda:	f00c fc65 	bl	41c4a8 <.LFE17>

0040fbde <.LVL673>:
  while (D.sign == FP_NEG) {
  40fbde:	6863      	ldr	r3, [r4, #4]
  40fbe0:	2b01      	cmp	r3, #1
  40fbe2:	d0f7      	beq.n	40fbd4 <.LVL672+0xe>
  40fbe4:	e005      	b.n	40fbf2 <.LVL674>
    fp_sub(&D, b, &D);
  40fbe6:	f50d 528a 	add.w	r2, sp, #4416	; 0x1140
  40fbea:	4641      	mov	r1, r8
  40fbec:	4610      	mov	r0, r2
  40fbee:	f00c fd9b 	bl	41c728 <.LFE171>

0040fbf2 <.LVL674>:
  while (fp_cmp_mag(&D, b) != FP_LT) {
  40fbf2:	4641      	mov	r1, r8
  40fbf4:	f50d 508a 	add.w	r0, sp, #4416	; 0x1140
  40fbf8:	f00b fe39 	bl	41b86e <.LFE179>

0040fbfc <.LVL675>:
  40fbfc:	f1b0 3fff 	cmp.w	r0, #4294967295
  40fc00:	d1f1      	bne.n	40fbe6 <.LVL673+0x8>
  fp_copy (&D, c);
  40fc02:	4651      	mov	r1, sl
  40fc04:	f50d 508a 	add.w	r0, sp, #4416	; 0x1140
  40fc08:	f00d fc02 	bl	41d410 <.LFE194>

0040fc0c <.LVL676>:
  c->sign = neg;
  40fc0c:	f8ca 6004 	str.w	r6, [sl, #4]

0040fc10 <.LVL677>:
}
  40fc10:	4628      	mov	r0, r5
  40fc12:	f50d 5df1 	add.w	sp, sp, #7712	; 0x1e20
  40fc16:	b004      	add	sp, #16

0040fc18 <.LCFI95>:
  40fc18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040fc1c <.LCFI96>:
    return FP_VAL;
  40fc1c:	f04f 35ff 	mov.w	r5, #4294967295
  40fc20:	e7f6      	b.n	40fc10 <.LVL677>

0040fc22 <.LBB157>:
  if (b->sign == FP_NEG || fp_iszero(b) == FP_YES) {
  40fc22:	684b      	ldr	r3, [r1, #4]
  40fc24:	2b01      	cmp	r3, #1
  40fc26:	d0b3      	beq.n	40fb90 <.LVL666>

0040fc28 <.LBB140>:
    fp_zero(a);
  40fc28:	4668      	mov	r0, sp

0040fc2a <.LVL681>:
  40fc2a:	f00d fead 	bl	41d988 <.LFE163>

0040fc2e <.LBB142>:
  40fc2e:	a88a      	add	r0, sp, #552	; 0x228

0040fc30 <.LVL683>:
  40fc30:	f00d feaa 	bl	41d988 <.LFE163>

0040fc34 <.LBB144>:
  40fc34:	f50d 608a 	add.w	r0, sp, #1104	; 0x450

0040fc38 <.LVL685>:
  40fc38:	f00d fea6 	bl	41d988 <.LFE163>

0040fc3c <.LBB146>:
  40fc3c:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678

0040fc40 <.LVL687>:
  40fc40:	f00d fea2 	bl	41d988 <.LFE163>

0040fc44 <.LBB148>:
  40fc44:	f50d 600a 	add.w	r0, sp, #2208	; 0x8a0

0040fc48 <.LVL689>:
  40fc48:	f00d fe9e 	bl	41d988 <.LFE163>

0040fc4c <.LBB150>:
  40fc4c:	f60d 20c8 	addw	r0, sp, #2760	; 0xac8

0040fc50 <.LVL691>:
  40fc50:	f00d fe9a 	bl	41d988 <.LFE163>

0040fc54 <.LBB152>:
  40fc54:	f50d 604f 	add.w	r0, sp, #3312	; 0xcf0

0040fc58 <.LVL693>:
  40fc58:	f00d fe96 	bl	41d988 <.LFE163>

0040fc5c <.LBB154>:
  40fc5c:	f60d 7018 	addw	r0, sp, #3864	; 0xf18

0040fc60 <.LVL695>:
  40fc60:	f00d fe92 	bl	41d988 <.LFE163>

0040fc64 <.LBE154>:
  if ((res = fp_mod(a, b, &x)) != FP_OKAY) {
  40fc64:	466a      	mov	r2, sp
  40fc66:	4641      	mov	r1, r8
  40fc68:	4648      	mov	r0, r9
  40fc6a:	f00c fcf6 	bl	41c65a <.LFE180>

0040fc6e <.LVL697>:
  40fc6e:	4605      	mov	r5, r0
  40fc70:	2800      	cmp	r0, #0
  40fc72:	d1cd      	bne.n	40fc10 <.LVL677>
  fp_copy(b, &y);
  40fc74:	a98a      	add	r1, sp, #552	; 0x228
  40fc76:	4640      	mov	r0, r8

0040fc78 <.LVL698>:
  40fc78:	f00d fbca 	bl	41d410 <.LFE194>

0040fc7c <.LVL699>:
  if (fp_iseven (&x) == FP_YES && fp_iseven (&y) == FP_YES) {
  40fc7c:	4b93      	ldr	r3, [pc, #588]	; (40fecc <.LVL729+0x1e>)
  40fc7e:	f641 6230 	movw	r2, #7728	; 0x1e30
  40fc82:	446a      	add	r2, sp
  40fc84:	58d3      	ldr	r3, [r2, r3]
  40fc86:	2b00      	cmp	r3, #0
  40fc88:	dd03      	ble.n	40fc92 <.LVL699+0x16>
  40fc8a:	9b02      	ldr	r3, [sp, #8]
  40fc8c:	f013 0f01 	tst.w	r3, #1
  40fc90:	d016      	beq.n	40fcc0 <.LVL703+0x6>
  fp_copy (&x, &u);
  40fc92:	f50d 618a 	add.w	r1, sp, #1104	; 0x450
  40fc96:	4668      	mov	r0, sp
  40fc98:	f00d fbba 	bl	41d410 <.LFE194>

0040fc9c <.LVL700>:
  fp_copy (&y, &v);
  40fc9c:	f50d 61cf 	add.w	r1, sp, #1656	; 0x678
  40fca0:	a88a      	add	r0, sp, #552	; 0x228
  40fca2:	f00d fbb5 	bl	41d410 <.LFE194>

0040fca6 <.LVL701>:
  fp_set (&A, 1);
  40fca6:	2101      	movs	r1, #1
  40fca8:	f50d 600a 	add.w	r0, sp, #2208	; 0x8a0
  40fcac:	f00d fe56 	bl	41d95c <.LFE20>

0040fcb0 <.LVL702>:
  fp_set (&D, 1);
  40fcb0:	2101      	movs	r1, #1
  40fcb2:	f60d 7018 	addw	r0, sp, #3864	; 0xf18
  40fcb6:	f00d fe51 	bl	41d95c <.LFE20>

0040fcba <.LVL703>:
  while (fp_iseven (&v) == FP_YES) {
  40fcba:	f50d 64cf 	add.w	r4, sp, #1656	; 0x678
  40fcbe:	e064      	b.n	40fd8a <.LVL714+0xa>
  if (fp_iseven (&x) == FP_YES && fp_iseven (&y) == FP_YES) {
  40fcc0:	4b83      	ldr	r3, [pc, #524]	; (40fed0 <.LVL729+0x22>)
  40fcc2:	f641 6230 	movw	r2, #7728	; 0x1e30
  40fcc6:	446a      	add	r2, sp
  40fcc8:	58d3      	ldr	r3, [r2, r3]
  40fcca:	2b00      	cmp	r3, #0
  40fccc:	dde1      	ble.n	40fc92 <.LVL699+0x16>
  40fcce:	9b8c      	ldr	r3, [sp, #560]	; 0x230
  40fcd0:	f013 0f01 	tst.w	r3, #1
  40fcd4:	d1dd      	bne.n	40fc92 <.LVL699+0x16>
    return FP_VAL;
  40fcd6:	f04f 35ff 	mov.w	r5, #4294967295

0040fcda <.LVL704>:
  40fcda:	e799      	b.n	40fc10 <.LVL677>

0040fcdc <.LVL705>:
    fp_div_2 (&v, &v);
  40fcdc:	4621      	mov	r1, r4
  40fcde:	4620      	mov	r0, r4
  40fce0:	f00a fc92 	bl	41a608 <.LFE3>

0040fce4 <.LVL706>:
    if (fp_isodd (&C) == FP_YES || fp_isodd (&D) == FP_YES) {
  40fce4:	f8dd 3cf0 	ldr.w	r3, [sp, #3312]	; 0xcf0
  40fce8:	2b00      	cmp	r3, #0
  40fcea:	dd04      	ble.n	40fcf6 <.LVL706+0x12>
  40fcec:	f8dd 3cf8 	ldr.w	r3, [sp, #3320]	; 0xcf8
  40fcf0:	f013 0f01 	tst.w	r3, #1
  40fcf4:	d108      	bne.n	40fd08 <.LVL706+0x24>
  40fcf6:	f8dd 3f18 	ldr.w	r3, [sp, #3864]	; 0xf18
  40fcfa:	2b00      	cmp	r3, #0
  40fcfc:	dd10      	ble.n	40fd20 <.LVL708>
  40fcfe:	f8dd 3f20 	ldr.w	r3, [sp, #3872]	; 0xf20
  40fd02:	f013 0f01 	tst.w	r3, #1
  40fd06:	d00b      	beq.n	40fd20 <.LVL708>
      fp_add (&C, &y, &C);
  40fd08:	f50d 624f 	add.w	r2, sp, #3312	; 0xcf0
  40fd0c:	a98a      	add	r1, sp, #552	; 0x228
  40fd0e:	4610      	mov	r0, r2
  40fd10:	f00c fbca 	bl	41c4a8 <.LFE17>

0040fd14 <.LVL707>:
      fp_sub (&D, &x, &D);
  40fd14:	f60d 7218 	addw	r2, sp, #3864	; 0xf18
  40fd18:	4669      	mov	r1, sp
  40fd1a:	4610      	mov	r0, r2
  40fd1c:	f00c fd04 	bl	41c728 <.LFE171>

0040fd20 <.LVL708>:
    fp_div_2 (&C, &C);
  40fd20:	f50d 614f 	add.w	r1, sp, #3312	; 0xcf0
  40fd24:	4608      	mov	r0, r1
  40fd26:	f00a fc6f 	bl	41a608 <.LFE3>

0040fd2a <.LVL709>:
    fp_div_2 (&D, &D);
  40fd2a:	f60d 7118 	addw	r1, sp, #3864	; 0xf18
  40fd2e:	4608      	mov	r0, r1
  40fd30:	f00a fc6a 	bl	41a608 <.LFE3>

0040fd34 <.LVL710>:
  while (fp_iseven (&v) == FP_YES) {
  40fd34:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
  40fd38:	2b00      	cmp	r3, #0
  40fd3a:	dd04      	ble.n	40fd46 <.LVL710+0x12>
  40fd3c:	f8dd 3680 	ldr.w	r3, [sp, #1664]	; 0x680
  40fd40:	f013 0f01 	tst.w	r3, #1
  40fd44:	d0ca      	beq.n	40fcdc <.LVL705>
  if (fp_cmp (&u, &v) != FP_LT) {
  40fd46:	4621      	mov	r1, r4
  40fd48:	f50d 608a 	add.w	r0, sp, #1104	; 0x450
  40fd4c:	f00d f8e9 	bl	41cf22 <.LFE9>

0040fd50 <.LVL711>:
  40fd50:	f1b0 3fff 	cmp.w	r0, #4294967295
  40fd54:	f43f aed8 	beq.w	40fb08 <.LBB138>
    fp_sub (&u, &v, &u);
  40fd58:	f50d 628a 	add.w	r2, sp, #1104	; 0x450
  40fd5c:	4621      	mov	r1, r4
  40fd5e:	4610      	mov	r0, r2
  40fd60:	f00c fce2 	bl	41c728 <.LFE171>

0040fd64 <.LVL712>:
    fp_sub (&A, &C, &A);
  40fd64:	f50d 620a 	add.w	r2, sp, #2208	; 0x8a0
  40fd68:	f50d 614f 	add.w	r1, sp, #3312	; 0xcf0
  40fd6c:	4610      	mov	r0, r2
  40fd6e:	f00c fcdb 	bl	41c728 <.LFE171>

0040fd72 <.LVL713>:
    fp_sub (&B, &D, &B);
  40fd72:	f60d 22c8 	addw	r2, sp, #2760	; 0xac8
  40fd76:	f60d 7118 	addw	r1, sp, #3864	; 0xf18
  40fd7a:	4610      	mov	r0, r2
  40fd7c:	f00c fcd4 	bl	41c728 <.LFE171>

0040fd80 <.LVL714>:
  if (fp_iszero (&u) == FP_NO)
  40fd80:	f8dd 3450 	ldr.w	r3, [sp, #1104]	; 0x450
  40fd84:	2b00      	cmp	r3, #0
  40fd86:	f43f aed4 	beq.w	40fb32 <.LVL658+0x2>
  while (fp_iseven (&u) == FP_YES) {
  40fd8a:	f8dd 3450 	ldr.w	r3, [sp, #1104]	; 0x450
  40fd8e:	2b00      	cmp	r3, #0
  40fd90:	ddd0      	ble.n	40fd34 <.LVL710>
  40fd92:	f8dd 3458 	ldr.w	r3, [sp, #1112]	; 0x458
  40fd96:	f013 0f01 	tst.w	r3, #1
  40fd9a:	d1cb      	bne.n	40fd34 <.LVL710>
    fp_div_2 (&u, &u);
  40fd9c:	f50d 618a 	add.w	r1, sp, #1104	; 0x450
  40fda0:	4608      	mov	r0, r1
  40fda2:	f00a fc31 	bl	41a608 <.LFE3>

0040fda6 <.LVL715>:
    if (fp_isodd (&A) == FP_YES || fp_isodd (&B) == FP_YES) {
  40fda6:	4b4b      	ldr	r3, [pc, #300]	; (40fed4 <.LVL729+0x26>)
  40fda8:	f641 6230 	movw	r2, #7728	; 0x1e30
  40fdac:	446a      	add	r2, sp
  40fdae:	58d3      	ldr	r3, [r2, r3]
  40fdb0:	2b00      	cmp	r3, #0
  40fdb2:	dd04      	ble.n	40fdbe <.LVL715+0x18>
  40fdb4:	f8dd 38a8 	ldr.w	r3, [sp, #2216]	; 0x8a8
  40fdb8:	f013 0f01 	tst.w	r3, #1
  40fdbc:	d10b      	bne.n	40fdd6 <.LVL715+0x30>
  40fdbe:	4b46      	ldr	r3, [pc, #280]	; (40fed8 <.LVL729+0x2a>)
  40fdc0:	f641 6230 	movw	r2, #7728	; 0x1e30
  40fdc4:	446a      	add	r2, sp
  40fdc6:	58d3      	ldr	r3, [r2, r3]
  40fdc8:	2b00      	cmp	r3, #0
  40fdca:	dd10      	ble.n	40fdee <.LVL717>
  40fdcc:	f8dd 3ad0 	ldr.w	r3, [sp, #2768]	; 0xad0
  40fdd0:	f013 0f01 	tst.w	r3, #1
  40fdd4:	d00b      	beq.n	40fdee <.LVL717>
      fp_add (&A, &y, &A);
  40fdd6:	f50d 620a 	add.w	r2, sp, #2208	; 0x8a0
  40fdda:	a98a      	add	r1, sp, #552	; 0x228
  40fddc:	4610      	mov	r0, r2
  40fdde:	f00c fb63 	bl	41c4a8 <.LFE17>

0040fde2 <.LVL716>:
      fp_sub (&B, &x, &B);
  40fde2:	f60d 22c8 	addw	r2, sp, #2760	; 0xac8
  40fde6:	4669      	mov	r1, sp
  40fde8:	4610      	mov	r0, r2
  40fdea:	f00c fc9d 	bl	41c728 <.LFE171>

0040fdee <.LVL717>:
    fp_div_2 (&A, &A);
  40fdee:	f50d 610a 	add.w	r1, sp, #2208	; 0x8a0
  40fdf2:	4608      	mov	r0, r1
  40fdf4:	f00a fc08 	bl	41a608 <.LFE3>

0040fdf8 <.LVL718>:
    fp_div_2 (&B, &B);
  40fdf8:	f60d 21c8 	addw	r1, sp, #2760	; 0xac8
  40fdfc:	4608      	mov	r0, r1
  40fdfe:	f00a fc03 	bl	41a608 <.LFE3>

0040fe02 <.LVL719>:
  40fe02:	e7c2      	b.n	40fd8a <.LVL714+0xa>

0040fe04 <.LBE157>:
      fp_sub (&B, &x, &B);
  40fe04:	f241 3268 	movw	r2, #4968	; 0x1368
  40fe08:	446a      	add	r2, sp
  40fe0a:	f641 4108 	movw	r1, #7176	; 0x1c08
  40fe0e:	4469      	add	r1, sp
  40fe10:	4610      	mov	r0, r2
  40fe12:	f00c fc89 	bl	41c728 <.LFE171>

0040fe16 <.LVL721>:
  40fe16:	e010      	b.n	40fe3a <.LVL722+0x1a>
    fp_div_2 (&u, &u);
  40fe18:	4639      	mov	r1, r7
  40fe1a:	4638      	mov	r0, r7
  40fe1c:	f00a fbf4 	bl	41a608 <.LFE3>

0040fe20 <.LVL722>:
    if (fp_isodd (&B) == FP_YES) {
  40fe20:	f241 3368 	movw	r3, #4968	; 0x1368
  40fe24:	446b      	add	r3, sp
  40fe26:	681b      	ldr	r3, [r3, #0]
  40fe28:	2b00      	cmp	r3, #0
  40fe2a:	dd06      	ble.n	40fe3a <.LVL722+0x1a>
  40fe2c:	f241 3368 	movw	r3, #4968	; 0x1368
  40fe30:	446b      	add	r3, sp
  40fe32:	689b      	ldr	r3, [r3, #8]
  40fe34:	f013 0f01 	tst.w	r3, #1
  40fe38:	d1e4      	bne.n	40fe04 <.LBE157>
    fp_div_2 (&B, &B);
  40fe3a:	f241 3168 	movw	r1, #4968	; 0x1368
  40fe3e:	4469      	add	r1, sp
  40fe40:	4608      	mov	r0, r1
  40fe42:	f00a fbe1 	bl	41a608 <.LFE3>

0040fe46 <.LVL723>:
  40fe46:	e036      	b.n	40feb6 <.LVL729+0x8>
      fp_sub (&D, &x, &D);
  40fe48:	4622      	mov	r2, r4
  40fe4a:	f641 4108 	movw	r1, #7176	; 0x1c08
  40fe4e:	4469      	add	r1, sp
  40fe50:	4620      	mov	r0, r4
  40fe52:	f00c fc69 	bl	41c728 <.LFE171>

0040fe56 <.LVL724>:
  40fe56:	e00a      	b.n	40fe6e <.LVL725+0xe>
    fp_div_2 (&v, &v);
  40fe58:	4629      	mov	r1, r5
  40fe5a:	4628      	mov	r0, r5
  40fe5c:	f00a fbd4 	bl	41a608 <.LFE3>

0040fe60 <.LVL725>:
    if (fp_isodd (&D) == FP_YES) {
  40fe60:	6823      	ldr	r3, [r4, #0]
  40fe62:	2b00      	cmp	r3, #0
  40fe64:	dd03      	ble.n	40fe6e <.LVL725+0xe>
  40fe66:	68a3      	ldr	r3, [r4, #8]
  40fe68:	f013 0f01 	tst.w	r3, #1
  40fe6c:	d1ec      	bne.n	40fe48 <.LVL723+0x2>
    fp_div_2 (&D, &D);
  40fe6e:	4621      	mov	r1, r4
  40fe70:	4620      	mov	r0, r4
  40fe72:	f00a fbc9 	bl	41a608 <.LFE3>

0040fe76 <.LVL726>:
  while (fp_iseven (&v) == FP_YES) {
  40fe76:	6833      	ldr	r3, [r6, #0]
  40fe78:	2b00      	cmp	r3, #0
  40fe7a:	dd03      	ble.n	40fe84 <.LVL726+0xe>
  40fe7c:	68b3      	ldr	r3, [r6, #8]
  40fe7e:	f013 0f01 	tst.w	r3, #1
  40fe82:	d0e9      	beq.n	40fe58 <.LVL724+0x2>
  if (fp_cmp (&u, &v) != FP_LT) {
  40fe84:	4629      	mov	r1, r5
  40fe86:	4638      	mov	r0, r7
  40fe88:	f00d f84b 	bl	41cf22 <.LFE9>

0040fe8c <.LVL727>:
  40fe8c:	f1b0 3fff 	cmp.w	r0, #4294967295
  40fe90:	f43f ae81 	beq.w	40fb96 <.LVL668>
    fp_sub (&u, &v, &u);
  40fe94:	463a      	mov	r2, r7
  40fe96:	4629      	mov	r1, r5
  40fe98:	4638      	mov	r0, r7
  40fe9a:	f00c fc45 	bl	41c728 <.LFE171>

0040fe9e <.LVL728>:
    fp_sub (&B, &D, &B);
  40fe9e:	f241 3268 	movw	r2, #4968	; 0x1368
  40fea2:	446a      	add	r2, sp
  40fea4:	f50d 518a 	add.w	r1, sp, #4416	; 0x1140
  40fea8:	4610      	mov	r0, r2
  40feaa:	f00c fc3d 	bl	41c728 <.LFE171>

0040feae <.LVL729>:
  if (fp_iszero (&u) == FP_NO) {
  40feae:	683b      	ldr	r3, [r7, #0]
  40feb0:	2b00      	cmp	r3, #0
  40feb2:	f43f ae7e 	beq.w	40fbb2 <.LVL670+0x2>
  while (fp_iseven (&u) == FP_YES) {
  40feb6:	683b      	ldr	r3, [r7, #0]
  40feb8:	2b00      	cmp	r3, #0
  40feba:	dd03      	ble.n	40fec4 <.LVL729+0x16>
  40febc:	68bb      	ldr	r3, [r7, #8]
  40febe:	f013 0f01 	tst.w	r3, #1
  40fec2:	d0a9      	beq.n	40fe18 <.LVL721+0x2>
    if (fp_isodd (&D) == FP_YES) {
  40fec4:	f50d 548a 	add.w	r4, sp, #4416	; 0x1140
  40fec8:	e7d5      	b.n	40fe76 <.LVL726>
  40feca:	bf00      	nop
  40fecc:	ffffe1d0 	.word	0xffffe1d0
  40fed0:	ffffe3f8 	.word	0xffffe3f8
  40fed4:	ffffea70 	.word	0xffffea70
  40fed8:	ffffec98 	.word	0xffffec98

Disassembly of section .text.inflate_fast%56:

0040fedc <inflate_fast>:
      output space.
 */
void ZLIB_INTERNAL inflate_fast(strm, start)
z_streamp strm;
unsigned start;         /* inflate()'s starting value for strm->avail_out */
{
  40fedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0040fee0 <.LCFI0>:
  40fee0:	b093      	sub	sp, #76	; 0x4c

0040fee2 <.LCFI1>:
  40fee2:	4682      	mov	sl, r0
    unsigned len;               /* match length, unused bytes */
    unsigned dist;              /* match distance */
    unsigned char FAR *from;    /* where to copy match from */

    /* copy state to local variables */
    state = (struct inflate_state FAR *)strm->state;
  40fee4:	f8d0 b01c 	ldr.w	fp, [r0, #28]
    in = strm->next_in - OFF;
  40fee8:	6803      	ldr	r3, [r0, #0]
  40feea:	f103 39ff 	add.w	r9, r3, #4294967295

0040feee <.LVL2>:
    last = in + (strm->avail_in - 5);
  40feee:	6843      	ldr	r3, [r0, #4]
  40fef0:	3b05      	subs	r3, #5
  40fef2:	444b      	add	r3, r9
  40fef4:	9302      	str	r3, [sp, #8]

0040fef6 <.LVL3>:
    out = strm->next_out - OFF;
  40fef6:	68c5      	ldr	r5, [r0, #12]
  40fef8:	3d01      	subs	r5, #1

0040fefa <.LVL4>:
    beg = out - (start - strm->avail_out);
  40fefa:	6903      	ldr	r3, [r0, #16]

0040fefc <.LVL5>:
  40fefc:	1a59      	subs	r1, r3, r1

0040fefe <.LVL6>:
  40fefe:	186a      	adds	r2, r5, r1
  40ff00:	9206      	str	r2, [sp, #24]

0040ff02 <.LVL7>:
    end = out + (strm->avail_out - 257);
  40ff02:	f2a3 1301 	subw	r3, r3, #257	; 0x101
  40ff06:	18eb      	adds	r3, r5, r3
  40ff08:	9301      	str	r3, [sp, #4]

0040ff0a <.LVL8>:
#ifdef INFLATE_STRICT
    dmax = state->dmax;
#endif
    wsize = state->wsize;
  40ff0a:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28

0040ff0e <.LVL9>:
  40ff0e:	461f      	mov	r7, r3
  40ff10:	9309      	str	r3, [sp, #36]	; 0x24

0040ff12 <.LVL10>:
    whave = state->whave;
  40ff12:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c

0040ff16 <.LVL11>:
  40ff16:	9307      	str	r3, [sp, #28]

0040ff18 <.LVL12>:
    wnext = state->wnext;
  40ff18:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30

0040ff1c <.LVL13>:
  40ff1c:	9304      	str	r3, [sp, #16]

0040ff1e <.LVL14>:
    window = state->window;
  40ff1e:	f8db 1034 	ldr.w	r1, [fp, #52]	; 0x34
  40ff22:	9108      	str	r1, [sp, #32]

0040ff24 <.LVL15>:
    hold = state->hold;
  40ff24:	f8db 1038 	ldr.w	r1, [fp, #56]	; 0x38

0040ff28 <.LVL16>:
    bits = state->bits;
  40ff28:	f8db 003c 	ldr.w	r0, [fp, #60]	; 0x3c

0040ff2c <.LVL17>:
    lcode = state->lencode;
  40ff2c:	f8db 404c 	ldr.w	r4, [fp, #76]	; 0x4c

0040ff30 <.LVL18>:
    dcode = state->distcode;
  40ff30:	f8db 8050 	ldr.w	r8, [fp, #80]	; 0x50
    lmask = (1U << state->lenbits) - 1;
  40ff34:	2201      	movs	r2, #1

0040ff36 <.LVL20>:
  40ff36:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54

0040ff3a <.LVL21>:
  40ff3a:	fa02 f303 	lsl.w	r3, r2, r3
  40ff3e:	1e5e      	subs	r6, r3, #1
  40ff40:	9603      	str	r6, [sp, #12]

0040ff42 <.LVL22>:
    dmask = (1U << state->distbits) - 1;
  40ff42:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
  40ff46:	fa02 f303 	lsl.w	r3, r2, r3
  40ff4a:	1e5e      	subs	r6, r3, #1

0040ff4c <.LVL23>:
  40ff4c:	9605      	str	r6, [sp, #20]

0040ff4e <.LVL24>:
                    if (bits < op) {
                        hold += (unsigned long)(PUP(in)) << bits;
                        bits += 8;
                    }
                }
                dist += (unsigned)hold & ((1U << op) - 1);
  40ff4e:	4616      	mov	r6, r2

0040ff50 <.LVL25>:
                            } while (--op);
                            from = out - dist;  /* rest from output */
                        }
                    }
                    else if (wnext < op) {      /* wrap around window */
                        from += wsize + wnext - op;
  40ff50:	463b      	mov	r3, r7
  40ff52:	9a04      	ldr	r2, [sp, #16]
  40ff54:	4413      	add	r3, r2
  40ff56:	930b      	str	r3, [sp, #44]	; 0x2c
                        if (state->sane) {
  40ff58:	f50b 53de 	add.w	r3, fp, #7104	; 0x1bc0
  40ff5c:	930a      	str	r3, [sp, #40]	; 0x28
  40ff5e:	e00a      	b.n	40ff76 <.LVL27+0x10>

0040ff60 <.LVL26>:
            PUP(out) = (unsigned char)(here.val);
  40ff60:	f885 e001 	strb.w	lr, [r5, #1]
  40ff64:	3501      	adds	r5, #1

0040ff66 <.LVL27>:
        else {
            strm->msg = (char *)"invalid literal/length code";
            state->mode = BAD;
            break;
        }
    } while (in < last && out < end);
  40ff66:	9b02      	ldr	r3, [sp, #8]
  40ff68:	4599      	cmp	r9, r3
  40ff6a:	f080 8097 	bcs.w	41009c <.LVL84>
  40ff6e:	9b01      	ldr	r3, [sp, #4]
  40ff70:	429d      	cmp	r5, r3
  40ff72:	f080 8093 	bcs.w	41009c <.LVL84>
        if (bits < 15) {
  40ff76:	280e      	cmp	r0, #14
  40ff78:	d80c      	bhi.n	40ff94 <.LVL33>

0040ff7a <.LVL28>:
            hold += (unsigned long)(PUP(in)) << bits;
  40ff7a:	f899 3002 	ldrb.w	r3, [r9, #2]
            bits += 8;
  40ff7e:	f100 0208 	add.w	r2, r0, #8

0040ff82 <.LVL29>:
            hold += (unsigned long)(PUP(in)) << bits;
  40ff82:	4093      	lsls	r3, r2
            hold += (unsigned long)(PUP(in)) << bits;
  40ff84:	f899 2001 	ldrb.w	r2, [r9, #1]

0040ff88 <.LVL30>:
  40ff88:	4082      	lsls	r2, r0
            hold += (unsigned long)(PUP(in)) << bits;
  40ff8a:	4413      	add	r3, r2
  40ff8c:	4419      	add	r1, r3

0040ff8e <.LVL31>:
            bits += 8;
  40ff8e:	3010      	adds	r0, #16

0040ff90 <.LVL32>:
            hold += (unsigned long)(PUP(in)) << bits;
  40ff90:	f109 0902 	add.w	r9, r9, #2

0040ff94 <.LVL33>:
        here = lcode[hold & lmask];
  40ff94:	9b03      	ldr	r3, [sp, #12]
  40ff96:	ea01 0203 	and.w	r2, r1, r3
  40ff9a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
  40ff9e:	f814 2022 	ldrb.w	r2, [r4, r2, lsl #2]

0040ffa2 <.LVL34>:
  40ffa2:	f8b3 e002 	ldrh.w	lr, [r3, #2]

0040ffa6 <.LVL35>:
        op = (unsigned)(here.bits);
  40ffa6:	785b      	ldrb	r3, [r3, #1]

0040ffa8 <.LVL36>:
        hold >>= op;
  40ffa8:	40d9      	lsrs	r1, r3

0040ffaa <.LVL37>:
        bits -= op;
  40ffaa:	1ac0      	subs	r0, r0, r3
        op = (unsigned)(here.op);
  40ffac:	4617      	mov	r7, r2

0040ffae <.LVL39>:
        if (op == 0) {                          /* literal */
  40ffae:	2a00      	cmp	r2, #0
  40ffb0:	d0d6      	beq.n	40ff60 <.LVL26>
        else if (op & 16) {                     /* length base */
  40ffb2:	f012 0f10 	tst.w	r2, #16
  40ffb6:	d121      	bne.n	40fffc <.LVL49+0x10>
        else if ((op & 64) == 0) {              /* 2nd level length code */
  40ffb8:	f012 0f40 	tst.w	r2, #64	; 0x40
  40ffbc:	d116      	bne.n	40ffec <.LVL49>

0040ffbe <.LVL40>:
            here = lcode[here.val + (hold & ((1U << op) - 1))];
  40ffbe:	fa06 f707 	lsl.w	r7, r6, r7
  40ffc2:	3f01      	subs	r7, #1
  40ffc4:	400f      	ands	r7, r1
  40ffc6:	44be      	add	lr, r7

0040ffc8 <.LVL41>:
  40ffc8:	eb04 038e 	add.w	r3, r4, lr, lsl #2

0040ffcc <.LVL42>:
  40ffcc:	f814 202e 	ldrb.w	r2, [r4, lr, lsl #2]

0040ffd0 <.LVL43>:
  40ffd0:	f8b3 e002 	ldrh.w	lr, [r3, #2]

0040ffd4 <.LDL1>:
        op = (unsigned)(here.bits);
  40ffd4:	785b      	ldrb	r3, [r3, #1]

0040ffd6 <.LVL45>:
        hold >>= op;
  40ffd6:	40d9      	lsrs	r1, r3
        bits -= op;
  40ffd8:	1ac0      	subs	r0, r0, r3
        op = (unsigned)(here.op);
  40ffda:	4617      	mov	r7, r2

0040ffdc <.LVL48>:
        if (op == 0) {                          /* literal */
  40ffdc:	2a00      	cmp	r2, #0
  40ffde:	d0bf      	beq.n	40ff60 <.LVL26>
        else if (op & 16) {                     /* length base */
  40ffe0:	f012 0f10 	tst.w	r2, #16
  40ffe4:	d10a      	bne.n	40fffc <.LVL49+0x10>
        else if ((op & 64) == 0) {              /* 2nd level length code */
  40ffe6:	f012 0f40 	tst.w	r2, #64	; 0x40
  40ffea:	d0e8      	beq.n	40ffbe <.LVL40>

0040ffec <.LVL49>:
        else if (op & 32) {                     /* end-of-block */
  40ffec:	f012 0f20 	tst.w	r2, #32
  40fff0:	f000 817c 	beq.w	4102ec <.LVL176>
            state->mode = TYPE;
  40fff4:	230b      	movs	r3, #11
  40fff6:	f88b 3000 	strb.w	r3, [fp]
            break;
  40fffa:	e04f      	b.n	41009c <.LVL84>
            len = (unsigned)(here.val);
  40fffc:	4673      	mov	r3, lr

0040fffe <.LVL50>:
            if (op) {
  40fffe:	f012 020f 	ands.w	r2, r2, #15

00410002 <.LVL51>:
  410002:	d00f      	beq.n	410024 <.LVL56+0xe>

00410004 <.LVL52>:
                if (bits < op) {
  410004:	4282      	cmp	r2, r0
  410006:	d906      	bls.n	410016 <.LVL56>

00410008 <.LVL53>:
                    hold += (unsigned long)(PUP(in)) << bits;
  410008:	f899 7001 	ldrb.w	r7, [r9, #1]
  41000c:	4087      	lsls	r7, r0
  41000e:	4439      	add	r1, r7
                    bits += 8;
  410010:	3008      	adds	r0, #8
                    hold += (unsigned long)(PUP(in)) << bits;
  410012:	f109 0901 	add.w	r9, r9, #1

00410016 <.LVL56>:
                len += (unsigned)hold & ((1U << op) - 1);
  410016:	fa06 f702 	lsl.w	r7, r6, r2
  41001a:	3f01      	subs	r7, #1
  41001c:	400f      	ands	r7, r1
  41001e:	443b      	add	r3, r7
                hold >>= op;
  410020:	40d1      	lsrs	r1, r2
                bits -= op;
  410022:	1a80      	subs	r0, r0, r2
            if (bits < 15) {
  410024:	280e      	cmp	r0, #14
  410026:	d80c      	bhi.n	410042 <.LVL66>

00410028 <.LVL60>:
                hold += (unsigned long)(PUP(in)) << bits;
  410028:	f899 2002 	ldrb.w	r2, [r9, #2]

0041002c <.LVL61>:
                bits += 8;
  41002c:	f100 0708 	add.w	r7, r0, #8

00410030 <.LVL62>:
                hold += (unsigned long)(PUP(in)) << bits;
  410030:	40ba      	lsls	r2, r7
                hold += (unsigned long)(PUP(in)) << bits;
  410032:	f899 7001 	ldrb.w	r7, [r9, #1]

00410036 <.LVL63>:
  410036:	4087      	lsls	r7, r0
                hold += (unsigned long)(PUP(in)) << bits;
  410038:	443a      	add	r2, r7
  41003a:	4411      	add	r1, r2

0041003c <.LVL64>:
                bits += 8;
  41003c:	3010      	adds	r0, #16

0041003e <.LVL65>:
                hold += (unsigned long)(PUP(in)) << bits;
  41003e:	f109 0902 	add.w	r9, r9, #2

00410042 <.LVL66>:
            here = dcode[hold & dmask];
  410042:	9a05      	ldr	r2, [sp, #20]
  410044:	400a      	ands	r2, r1
  410046:	eb08 0782 	add.w	r7, r8, r2, lsl #2
  41004a:	f818 2022 	ldrb.w	r2, [r8, r2, lsl #2]

0041004e <.LVL67>:
  41004e:	f8b7 c002 	ldrh.w	ip, [r7, #2]

00410052 <.LVL68>:
            op = (unsigned)(here.bits);
  410052:	787f      	ldrb	r7, [r7, #1]

00410054 <.LVL69>:
            hold >>= op;
  410054:	40f9      	lsrs	r1, r7

00410056 <.LVL70>:
            bits -= op;
  410056:	1bc0      	subs	r0, r0, r7
            op = (unsigned)(here.op);
  410058:	4617      	mov	r7, r2

0041005a <.LVL72>:
            if (op & 16) {                      /* distance base */
  41005a:	f012 0f10 	tst.w	r2, #16
  41005e:	d145      	bne.n	4100ec <.LCFI3>
            else if ((op & 64) == 0) {          /* 2nd level distance code */
  410060:	f012 0f40 	tst.w	r2, #64	; 0x40
  410064:	d114      	bne.n	410090 <.LVL82>

00410066 <.LVL73>:
                here = dcode[here.val + (hold & ((1U << op) - 1))];
  410066:	fa06 f707 	lsl.w	r7, r6, r7
  41006a:	3f01      	subs	r7, #1
  41006c:	400f      	ands	r7, r1
  41006e:	44bc      	add	ip, r7

00410070 <.LVL74>:
  410070:	eb08 078c 	add.w	r7, r8, ip, lsl #2

00410074 <.LVL75>:
  410074:	f818 202c 	ldrb.w	r2, [r8, ip, lsl #2]

00410078 <.LVL76>:
  410078:	f8b7 c002 	ldrh.w	ip, [r7, #2]

0041007c <.LDL2>:
            op = (unsigned)(here.bits);
  41007c:	787f      	ldrb	r7, [r7, #1]

0041007e <.LVL78>:
            hold >>= op;
  41007e:	40f9      	lsrs	r1, r7
            bits -= op;
  410080:	1bc0      	subs	r0, r0, r7
            op = (unsigned)(here.op);
  410082:	4617      	mov	r7, r2

00410084 <.LVL81>:
            if (op & 16) {                      /* distance base */
  410084:	f012 0f10 	tst.w	r2, #16
  410088:	d130      	bne.n	4100ec <.LCFI3>
            else if ((op & 64) == 0) {          /* 2nd level distance code */
  41008a:	f012 0f40 	tst.w	r2, #64	; 0x40
  41008e:	d0ea      	beq.n	410066 <.LVL73>

00410090 <.LVL82>:
                strm->msg = (char *)"invalid distance code";
  410090:	4b9f      	ldr	r3, [pc, #636]	; (410310 <.LVL180+0x6>)

00410092 <.LVL83>:
  410092:	f8ca 3018 	str.w	r3, [sl, #24]
                state->mode = BAD;
  410096:	231d      	movs	r3, #29
  410098:	f88b 3000 	strb.w	r3, [fp]

0041009c <.LVL84>:

    /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
    len = bits >> 3;
    in -= len;
  41009c:	eba9 03d0 	sub.w	r3, r9, r0, lsr #3

004100a0 <.LVL85>:
  4100a0:	f000 0007 	and.w	r0, r0, #7

004100a4 <.LVL86>:
    bits -= len << 3;
    hold &= (1U << bits) - 1;
  4100a4:	2201      	movs	r2, #1
  4100a6:	4082      	lsls	r2, r0
  4100a8:	3a01      	subs	r2, #1
  4100aa:	4011      	ands	r1, r2

    /* update state and return */
    strm->next_in = in + OFF;
  4100ac:	1c5a      	adds	r2, r3, #1
  4100ae:	f8ca 2000 	str.w	r2, [sl]
    strm->next_out = out + OFF;
  4100b2:	1c6a      	adds	r2, r5, #1
  4100b4:	f8ca 200c 	str.w	r2, [sl, #12]
    strm->avail_in = (unsigned)(in < last ? 5 + (last - in) : 5 - (in - last));
  4100b8:	9c02      	ldr	r4, [sp, #8]

004100ba <.LVL88>:
  4100ba:	429c      	cmp	r4, r3
  4100bc:	f240 811f 	bls.w	4102fe <.LVL178>
  4100c0:	1ae3      	subs	r3, r4, r3

004100c2 <.LVL89>:
  4100c2:	3305      	adds	r3, #5
  4100c4:	f8ca 3004 	str.w	r3, [sl, #4]
    strm->avail_out = (unsigned)(out < end ?
  4100c8:	9b01      	ldr	r3, [sp, #4]
  4100ca:	429d      	cmp	r5, r3
  4100cc:	f0c0 811c 	bcc.w	410308 <.LVL179+0x6>
                                 257 + (end - out) : 257 - (out - end));
  4100d0:	9b01      	ldr	r3, [sp, #4]
  4100d2:	1aed      	subs	r5, r5, r3

004100d4 <.LVL90>:
  4100d4:	f240 1301 	movw	r3, #257	; 0x101
  4100d8:	1b5b      	subs	r3, r3, r5
    strm->avail_out = (unsigned)(out < end ?
  4100da:	f8ca 3010 	str.w	r3, [sl, #16]
    state->hold = hold;
  4100de:	f8cb 1038 	str.w	r1, [fp, #56]	; 0x38

004100e2 <.LVL91>:
    state->bits = bits;
  4100e2:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
    return;
}
  4100e6:	b013      	add	sp, #76	; 0x4c

004100e8 <.LCFI2>:
  4100e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004100ec <.LCFI3>:
                dist = (unsigned)(here.val);
  4100ec:	4667      	mov	r7, ip

004100ee <.LVL93>:
                op &= 15;                       /* number of extra bits */
  4100ee:	f002 020f 	and.w	r2, r2, #15
                if (bits < op) {
  4100f2:	4282      	cmp	r2, r0
  4100f4:	d90b      	bls.n	41010e <.LVL99>

004100f6 <.LVL95>:
                    hold += (unsigned long)(PUP(in)) << bits;
  4100f6:	f899 e001 	ldrb.w	lr, [r9, #1]
  4100fa:	fa0e fe00 	lsl.w	lr, lr, r0
  4100fe:	4471      	add	r1, lr
                    bits += 8;
  410100:	f100 0e08 	add.w	lr, r0, #8

00410104 <.LVL97>:
                    if (bits < op) {
  410104:	4572      	cmp	r2, lr
  410106:	d860      	bhi.n	4101ca <.LVL128>
                    hold += (unsigned long)(PUP(in)) << bits;
  410108:	f109 0901 	add.w	r9, r9, #1

0041010c <.LVL98>:
                    bits += 8;
  41010c:	4670      	mov	r0, lr

0041010e <.LVL99>:
                dist += (unsigned)hold & ((1U << op) - 1);
  41010e:	fa06 fe02 	lsl.w	lr, r6, r2
  410112:	f10e 3eff 	add.w	lr, lr, #4294967295
  410116:	ea0e 0e01 	and.w	lr, lr, r1
  41011a:	eb0e 0c07 	add.w	ip, lr, r7

0041011e <.LVL100>:
                hold >>= op;
  41011e:	40d1      	lsrs	r1, r2
                bits -= op;
  410120:	1a80      	subs	r0, r0, r2
                op = (unsigned)(out - beg);     /* max distance in output */
  410122:	9a06      	ldr	r2, [sp, #24]

00410124 <.LVL103>:
  410124:	1aaa      	subs	r2, r5, r2

00410126 <.LVL104>:
                if (dist > op) {                /* see if copy from window */
  410126:	4594      	cmp	ip, r2
  410128:	f240 80c3 	bls.w	4102b2 <.LVL162>
                    op = dist - op;             /* distance back in window */
  41012c:	ebac 0202 	sub.w	r2, ip, r2

00410130 <.LVL105>:
  410130:	920d      	str	r2, [sp, #52]	; 0x34

00410132 <.LVL106>:
                    if (op > whave) {
  410132:	9f07      	ldr	r7, [sp, #28]
  410134:	4297      	cmp	r7, r2
  410136:	d203      	bcs.n	410140 <.LVL107+0x6>
                        if (state->sane) {
  410138:	9a0a      	ldr	r2, [sp, #40]	; 0x28

0041013a <.LVL107>:
  41013a:	6812      	ldr	r2, [r2, #0]
  41013c:	2a00      	cmp	r2, #0
  41013e:	d14d      	bne.n	4101dc <.LVL133>
                    from = window - OFF;
  410140:	9a08      	ldr	r2, [sp, #32]
  410142:	3a01      	subs	r2, #1
  410144:	920e      	str	r2, [sp, #56]	; 0x38

00410146 <.LVL108>:
                    if (wnext == 0) {           /* very common case */
  410146:	9a04      	ldr	r2, [sp, #16]

00410148 <.LVL109>:
  410148:	2a00      	cmp	r2, #0
  41014a:	d14e      	bne.n	4101ea <.LVL135>
                        from += wsize - op;
  41014c:	9f09      	ldr	r7, [sp, #36]	; 0x24
  41014e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  410150:	1aba      	subs	r2, r7, r2
  410152:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  410154:	46be      	mov	lr, r7
  410156:	443a      	add	r2, r7
  410158:	920c      	str	r2, [sp, #48]	; 0x30

0041015a <.LVL110>:
                        if (op < len) {         /* some from window */
  41015a:	9a0d      	ldr	r2, [sp, #52]	; 0x34

0041015c <.LVL111>:
  41015c:	4293      	cmp	r3, r2
  41015e:	d918      	bls.n	410192 <.LVL116>
                            len -= op;
  410160:	1a9b      	subs	r3, r3, r2
  410162:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  410164:	463a      	mov	r2, r7
  410166:	9f09      	ldr	r7, [sp, #36]	; 0x24
  410168:	443a      	add	r2, r7
  41016a:	920e      	str	r2, [sp, #56]	; 0x38
  41016c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  410170:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  410172:	462f      	mov	r7, r5
  410174:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38

00410178 <.LVL113>:
                                PUP(out) = PUP(from);
  410178:	f812 ef01 	ldrb.w	lr, [r2, #1]!

0041017c <.LVL114>:
  41017c:	f807 ef01 	strb.w	lr, [r7, #1]!
                            } while (--op);
  410180:	454a      	cmp	r2, r9
  410182:	d1f9      	bne.n	410178 <.LVL113>
  410184:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  410188:	9a0d      	ldr	r2, [sp, #52]	; 0x34

0041018a <.LVL115>:
  41018a:	4415      	add	r5, r2
                            from = out - dist;  /* rest from output */
  41018c:	eba5 020c 	sub.w	r2, r5, ip
  410190:	920c      	str	r2, [sp, #48]	; 0x30

00410192 <.LVL116>:
                    while (len > 2) {
  410192:	2b02      	cmp	r3, #2
  410194:	d90c      	bls.n	4101b0 <.LVL123>
  410196:	9a0c      	ldr	r2, [sp, #48]	; 0x30

00410198 <.LVL117>:
                        PUP(out) = PUP(from);
  410198:	7857      	ldrb	r7, [r2, #1]
  41019a:	706f      	strb	r7, [r5, #1]

0041019c <.LVL118>:
                        PUP(out) = PUP(from);
  41019c:	7897      	ldrb	r7, [r2, #2]
  41019e:	70af      	strb	r7, [r5, #2]

004101a0 <.LVL119>:
                        PUP(out) = PUP(from);
  4101a0:	f812 7f03 	ldrb.w	r7, [r2, #3]!

004101a4 <.LVL120>:
  4101a4:	f805 7f03 	strb.w	r7, [r5, #3]!

004101a8 <.LVL121>:
                        len -= 3;
  4101a8:	3b03      	subs	r3, #3

004101aa <.LVL122>:
                    while (len > 2) {
  4101aa:	2b02      	cmp	r3, #2
  4101ac:	d8f4      	bhi.n	410198 <.LVL117>
  4101ae:	920c      	str	r2, [sp, #48]	; 0x30

004101b0 <.LVL123>:
                    if (len) {
  4101b0:	2b00      	cmp	r3, #0
  4101b2:	f43f aed8 	beq.w	40ff66 <.LVL27>

004101b6 <.LVL124>:
                        PUP(out) = PUP(from);
  4101b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4101b8:	7857      	ldrb	r7, [r2, #1]
  4101ba:	706f      	strb	r7, [r5, #1]
                        if (len > 1)
  4101bc:	2b01      	cmp	r3, #1
  4101be:	d976      	bls.n	4102ae <.LVL160>

004101c0 <.LVL125>:
                            PUP(out) = PUP(from);
  4101c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30

004101c2 <.LVL126>:
  4101c2:	789b      	ldrb	r3, [r3, #2]
  4101c4:	70ab      	strb	r3, [r5, #2]
  4101c6:	3502      	adds	r5, #2

004101c8 <.LVL127>:
  4101c8:	e6cd      	b.n	40ff66 <.LVL27>

004101ca <.LVL128>:
                        hold += (unsigned long)(PUP(in)) << bits;
  4101ca:	f899 c002 	ldrb.w	ip, [r9, #2]
  4101ce:	fa0c fe0e 	lsl.w	lr, ip, lr

004101d2 <.LVL129>:
  4101d2:	4471      	add	r1, lr
                        bits += 8;
  4101d4:	3010      	adds	r0, #16

004101d6 <.LVL131>:
                        hold += (unsigned long)(PUP(in)) << bits;
  4101d6:	f109 0902 	add.w	r9, r9, #2

004101da <.LVL132>:
  4101da:	e798      	b.n	41010e <.LVL99>

004101dc <.LVL133>:
                            strm->msg =
  4101dc:	4b4d      	ldr	r3, [pc, #308]	; (410314 <.LVL180+0xa>)

004101de <.LVL134>:
  4101de:	f8ca 3018 	str.w	r3, [sl, #24]
                            state->mode = BAD;
  4101e2:	231d      	movs	r3, #29
  4101e4:	f88b 3000 	strb.w	r3, [fp]
                            break;
  4101e8:	e758      	b.n	41009c <.LVL84>

004101ea <.LVL135>:
                    else if (wnext < op) {      /* wrap around window */
  4101ea:	9a04      	ldr	r2, [sp, #16]
  4101ec:	4696      	mov	lr, r2
  4101ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4101f0:	4596      	cmp	lr, r2
  4101f2:	d236      	bcs.n	410262 <.LVL151>
                        from += wsize + wnext - op;
  4101f4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  4101f6:	1aba      	subs	r2, r7, r2
  4101f8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4101fa:	19d7      	adds	r7, r2, r7
  4101fc:	970c      	str	r7, [sp, #48]	; 0x30

004101fe <.LVL136>:
                        op -= wnext;
  4101fe:	9f0d      	ldr	r7, [sp, #52]	; 0x34

00410200 <.LVL137>:
  410200:	4672      	mov	r2, lr
  410202:	1aba      	subs	r2, r7, r2
  410204:	920f      	str	r2, [sp, #60]	; 0x3c

00410206 <.LVL138>:
                        if (op < len) {         /* some from end of window */
  410206:	4293      	cmp	r3, r2
  410208:	d9c3      	bls.n	410192 <.LVL116>
                            len -= op;
  41020a:	1a9b      	subs	r3, r3, r2
  41020c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  41020e:	443a      	add	r2, r7

00410210 <.LVL140>:
  410210:	9210      	str	r2, [sp, #64]	; 0x40
  410212:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  410216:	463a      	mov	r2, r7
  410218:	462f      	mov	r7, r5
  41021a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40

0041021e <.LVL141>:
                                PUP(out) = PUP(from);
  41021e:	f812 ef01 	ldrb.w	lr, [r2, #1]!

00410222 <.LVL142>:
  410222:	f807 ef01 	strb.w	lr, [r7, #1]!
                            } while (--op);
  410226:	454a      	cmp	r2, r9
  410228:	d1f9      	bne.n	41021e <.LVL141>
  41022a:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
  41022e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c

00410230 <.LVL143>:
  410230:	442a      	add	r2, r5
  410232:	4617      	mov	r7, r2

00410234 <.LVL144>:
                            if (wnext < len) {  /* some from start of window */
  410234:	9a04      	ldr	r2, [sp, #16]
  410236:	429a      	cmp	r2, r3
  410238:	d235      	bcs.n	4102a6 <.LVL159>

0041023a <.LVL145>:
                                len -= op;
  41023a:	1a9b      	subs	r3, r3, r2
  41023c:	463a      	mov	r2, r7

0041023e <.LVL147>:
  41023e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  410240:	443d      	add	r5, r7
  410242:	46ae      	mov	lr, r5
  410244:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  410248:	9f0e      	ldr	r7, [sp, #56]	; 0x38

0041024a <.LVL148>:
                                    PUP(out) = PUP(from);
  41024a:	f817 9f01 	ldrb.w	r9, [r7, #1]!

0041024e <.LVL149>:
  41024e:	f802 9f01 	strb.w	r9, [r2, #1]!
                                } while (--op);
  410252:	4572      	cmp	r2, lr
  410254:	d1f9      	bne.n	41024a <.LVL148>
  410256:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
                                from = out - dist;      /* rest from output */
  41025a:	eba5 020c 	sub.w	r2, r5, ip
  41025e:	920c      	str	r2, [sp, #48]	; 0x30

00410260 <.LVL150>:
  410260:	e797      	b.n	410192 <.LVL116>

00410262 <.LVL151>:
                        from += wnext - op;
  410262:	9f04      	ldr	r7, [sp, #16]
  410264:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  410266:	1aba      	subs	r2, r7, r2
  410268:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  41026a:	46be      	mov	lr, r7
  41026c:	443a      	add	r2, r7
  41026e:	920c      	str	r2, [sp, #48]	; 0x30

00410270 <.LVL152>:
                        if (op < len) {         /* some from window */
  410270:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  410272:	42bb      	cmp	r3, r7
  410274:	d98d      	bls.n	410192 <.LVL116>
                            len -= op;
  410276:	1bdb      	subs	r3, r3, r7
  410278:	462f      	mov	r7, r5
  41027a:	9a04      	ldr	r2, [sp, #16]

0041027c <.LVL154>:
  41027c:	4496      	add	lr, r2
  41027e:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  410282:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  410286:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  410288:	46f1      	mov	r9, lr

0041028a <.LVL155>:
                                PUP(out) = PUP(from);
  41028a:	f812 ef01 	ldrb.w	lr, [r2, #1]!

0041028e <.LVL156>:
  41028e:	f807 ef01 	strb.w	lr, [r7, #1]!
                            } while (--op);
  410292:	454a      	cmp	r2, r9
  410294:	d1f9      	bne.n	41028a <.LVL155>
  410296:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  41029a:	9a0d      	ldr	r2, [sp, #52]	; 0x34

0041029c <.LVL157>:
  41029c:	4415      	add	r5, r2
                            from = out - dist;  /* rest from output */
  41029e:	eba5 020c 	sub.w	r2, r5, ip
  4102a2:	920c      	str	r2, [sp, #48]	; 0x30

004102a4 <.LVL158>:
  4102a4:	e775      	b.n	410192 <.LVL116>

004102a6 <.LVL159>:
                            from = window - OFF;
  4102a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4102a8:	920c      	str	r2, [sp, #48]	; 0x30
                                PUP(out) = PUP(from);
  4102aa:	463d      	mov	r5, r7
  4102ac:	e771      	b.n	410192 <.LVL116>

004102ae <.LVL160>:
                        PUP(out) = PUP(from);
  4102ae:	3501      	adds	r5, #1

004102b0 <.LVL161>:
  4102b0:	e659      	b.n	40ff66 <.LVL27>

004102b2 <.LVL162>:
                    from = out - dist;          /* copy direct from output */
  4102b2:	eba5 020c 	sub.w	r2, r5, ip

004102b6 <.LVL163>:
  4102b6:	e001      	b.n	4102bc <.LVL165>

004102b8 <.LVL164>:
                        PUP(out) = PUP(from);
  4102b8:	4662      	mov	r2, ip
  4102ba:	4675      	mov	r5, lr

004102bc <.LVL165>:
                        PUP(out) = PUP(from);
  4102bc:	7857      	ldrb	r7, [r2, #1]
  4102be:	706f      	strb	r7, [r5, #1]

004102c0 <.LVL166>:
                        PUP(out) = PUP(from);
  4102c0:	7897      	ldrb	r7, [r2, #2]
  4102c2:	70af      	strb	r7, [r5, #2]
  4102c4:	f105 0e03 	add.w	lr, r5, #3

004102c8 <.LVL167>:
  4102c8:	f102 0c03 	add.w	ip, r2, #3

004102cc <.LVL168>:
                        PUP(out) = PUP(from);
  4102cc:	78d7      	ldrb	r7, [r2, #3]
  4102ce:	70ef      	strb	r7, [r5, #3]
                        len -= 3;
  4102d0:	3b03      	subs	r3, #3
                    } while (len > 2);
  4102d2:	2b02      	cmp	r3, #2
  4102d4:	d8f0      	bhi.n	4102b8 <.LVL164>
                    if (len) {
  4102d6:	b183      	cbz	r3, 4102fa <.LVL177>

004102d8 <.LVL170>:
                        PUP(out) = PUP(from);
  4102d8:	7917      	ldrb	r7, [r2, #4]
  4102da:	712f      	strb	r7, [r5, #4]
                        if (len > 1)
  4102dc:	2b01      	cmp	r3, #1
  4102de:	d903      	bls.n	4102e8 <.LVL174>

004102e0 <.LVL171>:
                            PUP(out) = PUP(from);
  4102e0:	7953      	ldrb	r3, [r2, #5]

004102e2 <.LVL172>:
  4102e2:	716b      	strb	r3, [r5, #5]
  4102e4:	3505      	adds	r5, #5

004102e6 <.LVL173>:
  4102e6:	e63e      	b.n	40ff66 <.LVL27>

004102e8 <.LVL174>:
                        PUP(out) = PUP(from);
  4102e8:	3504      	adds	r5, #4

004102ea <.LVL175>:
  4102ea:	e63c      	b.n	40ff66 <.LVL27>

004102ec <.LVL176>:
            strm->msg = (char *)"invalid literal/length code";
  4102ec:	4b0a      	ldr	r3, [pc, #40]	; (410318 <.LVL180+0xe>)
  4102ee:	f8ca 3018 	str.w	r3, [sl, #24]
            state->mode = BAD;
  4102f2:	231d      	movs	r3, #29
  4102f4:	f88b 3000 	strb.w	r3, [fp]
            break;
  4102f8:	e6d0      	b.n	41009c <.LVL84>

004102fa <.LVL177>:
                        PUP(out) = PUP(from);
  4102fa:	4675      	mov	r5, lr
  4102fc:	e633      	b.n	40ff66 <.LVL27>

004102fe <.LVL178>:
    strm->avail_in = (unsigned)(in < last ? 5 + (last - in) : 5 - (in - last));
  4102fe:	9a02      	ldr	r2, [sp, #8]
  410300:	1a9b      	subs	r3, r3, r2

00410302 <.LVL179>:
  410302:	f1c3 0305 	rsb	r3, r3, #5
  410306:	e6dd      	b.n	4100c4 <.LVL89+0x2>
                                 257 + (end - out) : 257 - (out - end));
  410308:	1b5d      	subs	r5, r3, r5

0041030a <.LVL180>:
  41030a:	f205 1301 	addw	r3, r5, #257	; 0x101
  41030e:	e6e4      	b.n	4100da <.LVL90+0x6>
  410310:	0041c16c 	.word	0x0041c16c
  410314:	0041c14c 	.word	0x0041c14c
  410318:	0041c184 	.word	0x0041c184

Disassembly of section .text.wc_ecc_verify_hash_ex%57:

0041031c <wc_ecc_verify_hash_ex>:
   key         The corresponding public ECC key
   return      MP_OKAY if successful (even if the signature is not valid)
*/
int wc_ecc_verify_hash_ex(mp_int *r, mp_int *s, const byte* hash,
                    word32 hashlen, int* res, ecc_key* key)
{
  41031c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00410320 <.LCFI88>:
  410320:	f5ad 5dae 	sub.w	sp, sp, #5568	; 0x15c0

00410324 <.LCFI89>:
  410324:	b087      	sub	sp, #28

00410326 <.LCFI90>:
  410326:	4681      	mov	r9, r0
  410328:	468a      	mov	sl, r1
  41032a:	4616      	mov	r6, r2
  41032c:	9305      	str	r3, [sp, #20]
  41032e:	f50d 53b0 	add.w	r3, sp, #5632	; 0x1600

00410332 <.LVL1049>:
  410332:	f8d3 8000 	ldr.w	r8, [r3]
  410336:	f241 6304 	movw	r3, #5636	; 0x1604

0041033a <.LVL1050>:
  41033a:	446b      	add	r3, sp
  41033c:	681d      	ldr	r5, [r3, #0]

0041033e <.LVL1051>:
   mp_int        v;
   mp_int        w;
   mp_int        u1;
   mp_int        u2;
   mp_int        e;
   DECLARE_CURVE_SPECS(ECC_CURVE_FIELD_COUNT)
  41033e:	ac08      	add	r4, sp, #32
  410340:	4bb6      	ldr	r3, [pc, #728]	; (41061c <.LVL1124+0x8>)
  410342:	f241 52d8 	movw	r2, #5592	; 0x15d8

00410346 <.LVL1052>:
  410346:	446a      	add	r2, sp
  410348:	50d4      	str	r4, [r2, r3]
  41034a:	2228      	movs	r2, #40	; 0x28
  41034c:	2100      	movs	r1, #0

0041034e <.LVL1053>:
  41034e:	4620      	mov	r0, r4

00410350 <.LVL1054>:
  410350:	f009 fd26 	bl	419da0 <.LFE166>

00410354 <.LVL1055>:
  410354:	ab12      	add	r3, sp, #72	; 0x48
  410356:	61a3      	str	r3, [r4, #24]
  410358:	2305      	movs	r3, #5
  41035a:	61e3      	str	r3, [r4, #28]
#else
   byte sigRS[ATECC_KEY_SIZE*2];
#endif

   if (r == NULL || s == NULL || hash == NULL || res == NULL || key == NULL)
  41035c:	f1b9 0f00 	cmp.w	r9, #0
  410360:	f000 81b3 	beq.w	4106ca <.LVL1143>
  410364:	f1ba 0f00 	cmp.w	sl, #0
  410368:	f000 81af 	beq.w	4106ca <.LVL1143>
  41036c:	f1b8 0f00 	cmp.w	r8, #0
  410370:	bf18      	it	ne
  410372:	2e00      	cmpne	r6, #0
  410374:	f000 81ac 	beq.w	4106d0 <.LVL1143+0x6>
  410378:	2d00      	cmp	r5, #0
  41037a:	f000 81a9 	beq.w	4106d0 <.LVL1143+0x6>
       return ECC_BAD_ARG_E;

   /* default to invalid signature */
   *res = 0;
  41037e:	2300      	movs	r3, #0
  410380:	f8c8 3000 	str.w	r3, [r8]

   /* is the IDX valid ?  */
   if (wc_ecc_is_valid_idx(key->idx) != 1) {
  410384:	6868      	ldr	r0, [r5, #4]
  410386:	f00d f831 	bl	41d3ec <wc_ecc_is_valid_idx>

0041038a <.LVL1056>:
  41038a:	4683      	mov	fp, r0
  41038c:	2801      	cmp	r0, #1
  41038e:	f040 81a2 	bne.w	4106d6 <.LVL1143+0xc>
       return BAD_COND_E;
   }

#else

   err = mp_init(&e);
  410392:	f50d 6031 	add.w	r0, sp, #2832	; 0xb10
  410396:	f00d fbab 	bl	41daf0 <.LFE202>

0041039a <.LVL1057>:
   if (err != MP_OKAY)
  41039a:	9004      	str	r0, [sp, #16]
  41039c:	2800      	cmp	r0, #0
  41039e:	f040 819d 	bne.w	4106dc <.LVL1144>
      return MEMORY_E;

   /* read in the specs for this curve */
   err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ALL);
  4103a2:	223b      	movs	r2, #59	; 0x3b
  4103a4:	a907      	add	r1, sp, #28
  4103a6:	6928      	ldr	r0, [r5, #16]

004103a8 <.LVL1058>:
  4103a8:	f008 fdc8 	bl	418f3c <.LFE164>

004103ac <.LVL1059>:

   /* check for zero */
   if (err == MP_OKAY) {
  4103ac:	4604      	mov	r4, r0
  4103ae:	b350      	cbz	r0, 410406 <.LCFI92>

004103b0 <.LVL1060>:
       if (mQ  == NULL || mG == NULL)
          err = MEMORY_E;
   }

   /*  w  = s^-1 mod n */
   if (err == MP_OKAY)
  4103b0:	2c00      	cmp	r4, #0
  4103b2:	f000 808e 	beq.w	4104d2 <.LVL1092>

004103b6 <.LVL1061>:
   ecc_point    *mG = NULL, *mQ = NULL;
  4103b6:	2700      	movs	r7, #0
  4103b8:	463e      	mov	r6, r7

004103ba <.LVL1062>:
       err = mp_mulmod(r, &w, curve->order, &u2);

   /* find mG and mQ */
   if (err == MP_OKAY)
       err = mp_copy(curve->Gx, mG->x);
   if (err == MP_OKAY)
  4103ba:	2c00      	cmp	r4, #0
  4103bc:	f000 80c7 	beq.w	41054e <.LVL1102>

   if (err == MP_OKAY)
       err = mp_copy(key->pubkey.x, mQ->x);
   if (err == MP_OKAY)
       err = mp_copy(key->pubkey.y, mQ->y);
   if (err == MP_OKAY)
  4103c0:	2c00      	cmp	r4, #0
  4103c2:	f000 80e9 	beq.w	410598 <.LVL1113>

004103c6 <.LBB78>:
       /* find the montgomery mp */
       if (err == MP_OKAY)
           err = mp_montgomery_setup(curve->prime, &mp);

       /* add them */
       if (err == MP_OKAY)
  4103c6:	2c00      	cmp	r4, #0
  4103c8:	f000 812a 	beq.w	410620 <.LVL1125>

004103cc <.LBE78>:
       if (mp_cmp(&v, r) == MP_EQ)
           *res = 1;
   }

   /* cleanup */
   wc_ecc_del_point_h(mG, key->heap);
  4103cc:	6969      	ldr	r1, [r5, #20]
  4103ce:	4630      	mov	r0, r6
  4103d0:	f00c fff9 	bl	41d3c6 <.LFE193>

004103d4 <.LVL1064>:
   wc_ecc_del_point_h(mQ, key->heap);
  4103d4:	6969      	ldr	r1, [r5, #20]
  4103d6:	4638      	mov	r0, r7
  4103d8:	f00c fff5 	bl	41d3c6 <.LFE193>

004103dc <.LVL1065>:

   mp_clear(&e);
  4103dc:	f50d 6031 	add.w	r0, sp, #2832	; 0xb10
  4103e0:	f00d fbfd 	bl	41dbde <.LFE179>

004103e4 <.LVL1066>:
   if (did_init) {
  4103e4:	9b04      	ldr	r3, [sp, #16]
  4103e6:	2b00      	cmp	r3, #0
  4103e8:	f040 815c 	bne.w	4106a4 <.LVL1138>

004103ec <.LBB79>:
    _wc_ecc_curve_free(curve);
  4103ec:	4b8b      	ldr	r3, [pc, #556]	; (41061c <.LVL1124+0x8>)
  4103ee:	f241 52d8 	movw	r2, #5592	; 0x15d8
  4103f2:	446a      	add	r2, sp
  4103f4:	58d0      	ldr	r0, [r2, r3]
  4103f6:	f00b f969 	bl	41b6cc <.LFE46>

004103fa <.LBE79>:
   wc_ecc_curve_free(curve);

#endif /* WOLFSSL_ATECC508A */

   return err;
}
  4103fa:	4620      	mov	r0, r4
  4103fc:	f50d 5dae 	add.w	sp, sp, #5568	; 0x15c0
  410400:	b007      	add	sp, #28

00410402 <.LCFI91>:
  410402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00410406 <.LCFI92>:
       if (mp_iszero(r) == MP_YES || mp_iszero(s) == MP_YES ||
  410406:	4648      	mov	r0, r9

00410408 <.LVL1070>:
  410408:	f00d fc54 	bl	41dcb4 <.LFE93>

0041040c <.LVL1071>:
  41040c:	2801      	cmp	r0, #1
  41040e:	f000 8194 	beq.w	41073a <.LVL1160>
  410412:	4650      	mov	r0, sl
  410414:	f00d fc4e 	bl	41dcb4 <.LFE93>

00410418 <.LVL1072>:
  410418:	2801      	cmp	r0, #1
  41041a:	f000 8191 	beq.w	410740 <.LVL1162>
           mp_cmp(r, curve->order) != MP_LT ||
  41041e:	4b7f      	ldr	r3, [pc, #508]	; (41061c <.LVL1124+0x8>)
  410420:	f241 52d8 	movw	r2, #5592	; 0x15d8
  410424:	446a      	add	r2, sp
  410426:	58d3      	ldr	r3, [r2, r3]
  410428:	68d9      	ldr	r1, [r3, #12]
  41042a:	4648      	mov	r0, r9
  41042c:	f00d fc96 	bl	41dd5c <.LFE66>

00410430 <.LVL1073>:
       if (mp_iszero(r) == MP_YES || mp_iszero(s) == MP_YES ||
  410430:	f1b0 3fff 	cmp.w	r0, #4294967295
  410434:	d002      	beq.n	41043c <.LVL1075>
           err = MP_ZERO_E;
  410436:	f06f 0478 	mvn.w	r4, #120	; 0x78

0041043a <.LVL1074>:
  41043a:	e7b9      	b.n	4103b0 <.LVL1060>

0041043c <.LVL1075>:
           mp_cmp(s, curve->order) != MP_LT) {
  41043c:	4b77      	ldr	r3, [pc, #476]	; (41061c <.LVL1124+0x8>)
  41043e:	f241 52d8 	movw	r2, #5592	; 0x15d8
  410442:	446a      	add	r2, sp
  410444:	58d3      	ldr	r3, [r2, r3]
  410446:	68d9      	ldr	r1, [r3, #12]
  410448:	4650      	mov	r0, sl
  41044a:	f00d fc87 	bl	41dd5c <.LFE66>

0041044e <.LVL1076>:
           mp_cmp(r, curve->order) != MP_LT ||
  41044e:	f1b0 3fff 	cmp.w	r0, #4294967295
  410452:	f000 8146 	beq.w	4106e2 <.LBB84>
           err = MP_ZERO_E;
  410456:	f06f 0478 	mvn.w	r4, #120	; 0x78

0041045a <.LVL1077>:
  41045a:	e7a9      	b.n	4103b0 <.LVL1060>

0041045c <.LBB81>:
           hashlen = (orderBits + WOLFSSL_BIT_SIZE - 1) / WOLFSSL_BIT_SIZE;
  41045c:	1dfb      	adds	r3, r7, #7

0041045e <.LVL1079>:
       err = mp_read_unsigned_bin(&e, hash, hashlen);
  41045e:	9304      	str	r3, [sp, #16]
  410460:	08da      	lsrs	r2, r3, #3

00410462 <.LVL1080>:
  410462:	4631      	mov	r1, r6
  410464:	f50d 6031 	add.w	r0, sp, #2832	; 0xb10

00410468 <.LVL1081>:
  410468:	f00d fc10 	bl	41dc8c <.LFE72>

0041046c <.LVL1082>:
       if (err == MP_OKAY && (WOLFSSL_BIT_SIZE * hashlen) > orderBits)
  41046c:	4603      	mov	r3, r0
  41046e:	2800      	cmp	r0, #0
  410470:	f040 8153 	bne.w	41071a <.LVL1153>
  410474:	9b04      	ldr	r3, [sp, #16]
  410476:	f023 0307 	bic.w	r3, r3, #7
  41047a:	429f      	cmp	r7, r3
  41047c:	d207      	bcs.n	41048e <.LBE81>
           mp_rshb(&e, WOLFSSL_BIT_SIZE - (orderBits & 0x7));
  41047e:	f007 0107 	and.w	r1, r7, #7
  410482:	f1c1 0108 	rsb	r1, r1, #8
  410486:	f50d 6031 	add.w	r0, sp, #2832	; 0xb10

0041048a <.LVL1083>:
  41048a:	f00d fc8b 	bl	41dda4 <.LFE97>

0041048e <.LBE81>:
       if ((err = mp_init_multi(&v, &w, &u1, &u2, NULL, NULL)) != MP_OKAY) {
  41048e:	2300      	movs	r3, #0
  410490:	9301      	str	r3, [sp, #4]
  410492:	9300      	str	r3, [sp, #0]
  410494:	f60d 5338 	addw	r3, sp, #3384	; 0xd38
  410498:	f50d 6276 	add.w	r2, sp, #3936	; 0xf60
  41049c:	f241 1188 	movw	r1, #4488	; 0x1188
  4104a0:	4469      	add	r1, sp
  4104a2:	f241 30b0 	movw	r0, #5040	; 0x13b0
  4104a6:	4468      	add	r0, sp
  4104a8:	f00c fac4 	bl	41ca34 <mp_init_multi>

004104ac <.LVL1085>:
  4104ac:	2800      	cmp	r0, #0
  4104ae:	f040 813f 	bne.w	410730 <.LBE85>

004104b2 <.LVL1086>:
       mG = wc_ecc_new_point_h(key->heap);
  4104b2:	6968      	ldr	r0, [r5, #20]
  4104b4:	f00c f9be 	bl	41c834 <.LBE32>

004104b8 <.LVL1087>:
  4104b8:	4606      	mov	r6, r0

004104ba <.LVL1088>:
       mQ = wc_ecc_new_point_h(key->heap);
  4104ba:	6968      	ldr	r0, [r5, #20]

004104bc <.LVL1089>:
  4104bc:	f00c f9ba 	bl	41c834 <.LBE32>

004104c0 <.LVL1090>:
       if (mQ  == NULL || mG == NULL)
  4104c0:	4607      	mov	r7, r0

004104c2 <.LVL1091>:
  4104c2:	2800      	cmp	r0, #0
  4104c4:	f000 812d 	beq.w	410722 <.LVL1156>
  4104c8:	2e00      	cmp	r6, #0
  4104ca:	f000 812a 	beq.w	410722 <.LVL1156>
  4104ce:	465c      	mov	r4, fp
  4104d0:	e001      	b.n	4104d6 <.LVL1093>

004104d2 <.LVL1092>:
   ecc_point    *mG = NULL, *mQ = NULL;
  4104d2:	2700      	movs	r7, #0
  4104d4:	463e      	mov	r6, r7

004104d6 <.LVL1093>:
       err = mp_invmod(s, curve->order, &w);
  4104d6:	4b51      	ldr	r3, [pc, #324]	; (41061c <.LVL1124+0x8>)
  4104d8:	f241 52d8 	movw	r2, #5592	; 0x15d8
  4104dc:	446a      	add	r2, sp
  4104de:	58d3      	ldr	r3, [r2, r3]
  4104e0:	f241 1288 	movw	r2, #4488	; 0x1188
  4104e4:	446a      	add	r2, sp
  4104e6:	68d9      	ldr	r1, [r3, #12]
  4104e8:	4650      	mov	r0, sl
  4104ea:	f00d fc43 	bl	41dd74 <.LFE83>

004104ee <.LVL1094>:
  4104ee:	4603      	mov	r3, r0

004104f0 <.LVL1095>:
   if (err == MP_OKAY)
  4104f0:	2b00      	cmp	r3, #0
  4104f2:	d138      	bne.n	410566 <.LVL1105>
       err = mp_mulmod(&e, &w, curve->order, &u1);
  4104f4:	4b49      	ldr	r3, [pc, #292]	; (41061c <.LVL1124+0x8>)

004104f6 <.LVL1096>:
  4104f6:	f241 52d8 	movw	r2, #5592	; 0x15d8
  4104fa:	446a      	add	r2, sp
  4104fc:	58d2      	ldr	r2, [r2, r3]
  4104fe:	f50d 6376 	add.w	r3, sp, #3936	; 0xf60
  410502:	68d2      	ldr	r2, [r2, #12]
  410504:	f241 1188 	movw	r1, #4488	; 0x1188
  410508:	4469      	add	r1, sp
  41050a:	f50d 6031 	add.w	r0, sp, #2832	; 0xb10
  41050e:	f00d fc35 	bl	41dd7c <.LFE79>

00410512 <.LVL1097>:
   if (err == MP_OKAY)
  410512:	4603      	mov	r3, r0
  410514:	bb70      	cbnz	r0, 410574 <.LVL1107>
       err = mp_mulmod(r, &w, curve->order, &u2);
  410516:	4b41      	ldr	r3, [pc, #260]	; (41061c <.LVL1124+0x8>)
  410518:	f241 52d8 	movw	r2, #5592	; 0x15d8
  41051c:	446a      	add	r2, sp
  41051e:	58d2      	ldr	r2, [r2, r3]
  410520:	f60d 5338 	addw	r3, sp, #3384	; 0xd38
  410524:	68d2      	ldr	r2, [r2, #12]
  410526:	f241 1188 	movw	r1, #4488	; 0x1188
  41052a:	4469      	add	r1, sp
  41052c:	4648      	mov	r0, r9

0041052e <.LVL1098>:
  41052e:	f00d fc25 	bl	41dd7c <.LFE79>

00410532 <.LVL1099>:
   if (err == MP_OKAY)
  410532:	4603      	mov	r3, r0
  410534:	bb28      	cbnz	r0, 410582 <.LVL1110>
       err = mp_copy(curve->Gx, mG->x);
  410536:	4b39      	ldr	r3, [pc, #228]	; (41061c <.LVL1124+0x8>)
  410538:	f241 52d8 	movw	r2, #5592	; 0x15d8
  41053c:	446a      	add	r2, sp
  41053e:	58d3      	ldr	r3, [r2, r3]
  410540:	4631      	mov	r1, r6
  410542:	6918      	ldr	r0, [r3, #16]

00410544 <.LVL1100>:
  410544:	f00d fbb1 	bl	41dcaa <.LFE85>

00410548 <.LVL1101>:
  410548:	9404      	str	r4, [sp, #16]
  41054a:	4604      	mov	r4, r0
  41054c:	e735      	b.n	4103ba <.LVL1062>

0041054e <.LVL1102>:
       err = mp_copy(curve->Gy, mG->y);
  41054e:	4b33      	ldr	r3, [pc, #204]	; (41061c <.LVL1124+0x8>)
  410550:	f241 52d8 	movw	r2, #5592	; 0x15d8
  410554:	446a      	add	r2, sp
  410556:	58d3      	ldr	r3, [r2, r3]
  410558:	f506 710a 	add.w	r1, r6, #552	; 0x228
  41055c:	6958      	ldr	r0, [r3, #20]
  41055e:	f00d fba4 	bl	41dcaa <.LFE85>

00410562 <.LVL1103>:
  410562:	4603      	mov	r3, r0

00410564 <.LVL1104>:
  410564:	9c04      	ldr	r4, [sp, #16]

00410566 <.LVL1105>:
   if (err == MP_OKAY)
  410566:	b9fb      	cbnz	r3, 4105a8 <.LBB82>
       err = mp_set(mG->z, 1);
  410568:	2101      	movs	r1, #1
  41056a:	f506 608a 	add.w	r0, r6, #1104	; 0x450
  41056e:	f00d fbba 	bl	41dce6 <.LFE113>

00410572 <.LVL1106>:
  410572:	4603      	mov	r3, r0

00410574 <.LVL1107>:
   if (err == MP_OKAY)
  410574:	bb6b      	cbnz	r3, 4105d2 <.LVL1119>
       err = mp_copy(key->pubkey.x, mQ->x);
  410576:	4639      	mov	r1, r7
  410578:	f105 0018 	add.w	r0, r5, #24

0041057c <.LVL1108>:
  41057c:	f00d fb95 	bl	41dcaa <.LFE85>

00410580 <.LVL1109>:
  410580:	4603      	mov	r3, r0

00410582 <.LVL1110>:
   if (err == MP_OKAY)
  410582:	2b00      	cmp	r3, #0
  410584:	d13a      	bne.n	4105fc <.LVL1122>
       err = mp_copy(key->pubkey.y, mQ->y);
  410586:	f507 710a 	add.w	r1, r7, #552	; 0x228
  41058a:	f505 7010 	add.w	r0, r5, #576	; 0x240

0041058e <.LVL1111>:
  41058e:	f00d fb8c 	bl	41dcaa <.LFE85>

00410592 <.LVL1112>:
  410592:	9404      	str	r4, [sp, #16]
  410594:	4604      	mov	r4, r0
  410596:	e713      	b.n	4103c0 <.LVL1062+0x6>

00410598 <.LVL1113>:
       err = mp_copy(key->pubkey.z, mQ->z);
  410598:	f507 618a 	add.w	r1, r7, #1104	; 0x450
  41059c:	f505 608d 	add.w	r0, r5, #1128	; 0x468
  4105a0:	f00d fb83 	bl	41dcaa <.LFE85>

004105a4 <.LVL1114>:
  4105a4:	4603      	mov	r3, r0

004105a6 <.LVL1115>:
  4105a6:	9c04      	ldr	r4, [sp, #16]

004105a8 <.LBB82>:
       if (err == MP_OKAY)
  4105a8:	2b00      	cmp	r3, #0
  4105aa:	d14a      	bne.n	410642 <.LVL1128>
           err = wc_ecc_mulmod_ex(&u1, mG, mG, curve->Af, curve->prime, 0, key->heap);
  4105ac:	4b1b      	ldr	r3, [pc, #108]	; (41061c <.LVL1124+0x8>)

004105ae <.LVL1117>:
  4105ae:	f241 52d8 	movw	r2, #5592	; 0x15d8
  4105b2:	446a      	add	r2, sp
  4105b4:	58d2      	ldr	r2, [r2, r3]
  4105b6:	6893      	ldr	r3, [r2, #8]
  4105b8:	6969      	ldr	r1, [r5, #20]
  4105ba:	9102      	str	r1, [sp, #8]
  4105bc:	2100      	movs	r1, #0
  4105be:	9101      	str	r1, [sp, #4]
  4105c0:	6852      	ldr	r2, [r2, #4]
  4105c2:	9200      	str	r2, [sp, #0]
  4105c4:	4632      	mov	r2, r6
  4105c6:	4631      	mov	r1, r6
  4105c8:	f50d 6076 	add.w	r0, sp, #3936	; 0xf60
  4105cc:	f000 fca3 	bl	410f16 <.LFE6>

004105d0 <.LVL1118>:
  4105d0:	4603      	mov	r3, r0

004105d2 <.LVL1119>:
       if (err == MP_OKAY)
  4105d2:	2b00      	cmp	r3, #0
  4105d4:	d162      	bne.n	41069c <.LBB83>
           err = wc_ecc_mulmod_ex(&u2, mQ, mQ, curve->Af, curve->prime, 0, key->heap);
  4105d6:	4b11      	ldr	r3, [pc, #68]	; (41061c <.LVL1124+0x8>)
  4105d8:	f241 52d8 	movw	r2, #5592	; 0x15d8
  4105dc:	446a      	add	r2, sp
  4105de:	58d2      	ldr	r2, [r2, r3]
  4105e0:	6893      	ldr	r3, [r2, #8]
  4105e2:	6969      	ldr	r1, [r5, #20]
  4105e4:	9102      	str	r1, [sp, #8]
  4105e6:	2100      	movs	r1, #0
  4105e8:	9101      	str	r1, [sp, #4]
  4105ea:	6852      	ldr	r2, [r2, #4]
  4105ec:	9200      	str	r2, [sp, #0]
  4105ee:	463a      	mov	r2, r7
  4105f0:	4639      	mov	r1, r7
  4105f2:	f60d 5038 	addw	r0, sp, #3384	; 0xd38

004105f6 <.LVL1120>:
  4105f6:	f000 fc8e 	bl	410f16 <.LFE6>

004105fa <.LVL1121>:
  4105fa:	4603      	mov	r3, r0

004105fc <.LVL1122>:
       if (err == MP_OKAY)
  4105fc:	2b00      	cmp	r3, #0
  4105fe:	f040 8094 	bne.w	41072a <.LBB85>
           err = mp_montgomery_setup(curve->prime, &mp);
  410602:	4b06      	ldr	r3, [pc, #24]	; (41061c <.LVL1124+0x8>)
  410604:	f241 52d8 	movw	r2, #5592	; 0x15d8
  410608:	446a      	add	r2, sp
  41060a:	58d3      	ldr	r3, [r2, r3]
  41060c:	a906      	add	r1, sp, #24
  41060e:	6858      	ldr	r0, [r3, #4]

00410610 <.LVL1123>:
  410610:	f00d fbcc 	bl	41ddac <.LFE98>

00410614 <.LVL1124>:
  410614:	9404      	str	r4, [sp, #16]
  410616:	4604      	mov	r4, r0
  410618:	e6d5      	b.n	4103c6 <.LBB78>
  41061a:	bf00      	nop
  41061c:	ffffea44 	.word	0xffffea44

00410620 <.LVL1125>:
           err = ecc_projective_add_point(mQ, mG, mG, curve->Af,
  410620:	4b49      	ldr	r3, [pc, #292]	; (410748 <.LVL1163+0x4>)
  410622:	f241 52d8 	movw	r2, #5592	; 0x15d8
  410626:	446a      	add	r2, sp
  410628:	58d2      	ldr	r2, [r2, r3]
  41062a:	6893      	ldr	r3, [r2, #8]
  41062c:	9906      	ldr	r1, [sp, #24]
  41062e:	9101      	str	r1, [sp, #4]
  410630:	6852      	ldr	r2, [r2, #4]
  410632:	9200      	str	r2, [sp, #0]
  410634:	4632      	mov	r2, r6
  410636:	4631      	mov	r1, r6
  410638:	4638      	mov	r0, r7
  41063a:	f7fd f94b 	bl	40d8d4 <.LFE14>

0041063e <.LVL1126>:
  41063e:	4603      	mov	r3, r0

00410640 <.LVL1127>:
  410640:	9c04      	ldr	r4, [sp, #16]

00410642 <.LVL1128>:
       if (err == MP_OKAY)
  410642:	2b00      	cmp	r3, #0
  410644:	d171      	bne.n	41072a <.LBB85>
           err = ecc_map(mG, curve->prime, mp);
  410646:	4b40      	ldr	r3, [pc, #256]	; (410748 <.LVL1163+0x4>)

00410648 <.LVL1129>:
  410648:	f241 52d8 	movw	r2, #5592	; 0x15d8
  41064c:	446a      	add	r2, sp
  41064e:	58d3      	ldr	r3, [r2, r3]
  410650:	9a06      	ldr	r2, [sp, #24]
  410652:	6859      	ldr	r1, [r3, #4]
  410654:	4630      	mov	r0, r6
  410656:	f006 f8ab 	bl	4167b0 <.LFE21>

0041065a <.LVL1130>:
  41065a:	4603      	mov	r3, r0

0041065c <.LVL1131>:
  41065c:	9404      	str	r4, [sp, #16]

0041065e <.LBE82>:
   if (err == MP_OKAY)
  41065e:	b9fb      	cbnz	r3, 4106a0 <.LBE83>
       err = mp_mod(mG->x, curve->order, &v);
  410660:	4b39      	ldr	r3, [pc, #228]	; (410748 <.LVL1163+0x4>)
  410662:	f241 52d8 	movw	r2, #5592	; 0x15d8
  410666:	446a      	add	r2, sp
  410668:	58d3      	ldr	r3, [r2, r3]
  41066a:	f241 32b0 	movw	r2, #5040	; 0x13b0
  41066e:	446a      	add	r2, sp
  410670:	68d9      	ldr	r1, [r3, #12]
  410672:	4630      	mov	r0, r6

00410674 <.LVL1132>:
  410674:	f00d fb86 	bl	41dd84 <.LFE75>

00410678 <.LVL1133>:
   if (err == MP_OKAY) {
  410678:	4604      	mov	r4, r0
  41067a:	2800      	cmp	r0, #0
  41067c:	f47f aea6 	bne.w	4103cc <.LBE78>
       if (mp_cmp(&v, r) == MP_EQ)
  410680:	4649      	mov	r1, r9
  410682:	f241 30b0 	movw	r0, #5040	; 0x13b0

00410686 <.LVL1134>:
  410686:	4468      	add	r0, sp
  410688:	f00d fb68 	bl	41dd5c <.LFE66>

0041068c <.LVL1135>:
  41068c:	2800      	cmp	r0, #0
  41068e:	f47f ae9d 	bne.w	4103cc <.LBE78>
           *res = 1;
  410692:	2201      	movs	r2, #1
  410694:	f8c8 2000 	str.w	r2, [r8]
  410698:	4604      	mov	r4, r0

0041069a <.LVL1136>:
  41069a:	e697      	b.n	4103cc <.LBE78>

0041069c <.LBB83>:
  41069c:	9404      	str	r4, [sp, #16]
  41069e:	e7de      	b.n	41065e <.LBE82>

004106a0 <.LBE83>:
  4106a0:	461c      	mov	r4, r3
  4106a2:	e693      	b.n	4103cc <.LBE78>

004106a4 <.LVL1138>:
       mp_clear(&v);
  4106a4:	f241 30b0 	movw	r0, #5040	; 0x13b0
  4106a8:	4468      	add	r0, sp
  4106aa:	f00d fa98 	bl	41dbde <.LFE179>

004106ae <.LVL1139>:
       mp_clear(&w);
  4106ae:	f241 1088 	movw	r0, #4488	; 0x1188
  4106b2:	4468      	add	r0, sp
  4106b4:	f00d fa93 	bl	41dbde <.LFE179>

004106b8 <.LVL1140>:
       mp_clear(&u1);
  4106b8:	f50d 6076 	add.w	r0, sp, #3936	; 0xf60
  4106bc:	f00d fa8f 	bl	41dbde <.LFE179>

004106c0 <.LVL1141>:
       mp_clear(&u2);
  4106c0:	f60d 5038 	addw	r0, sp, #3384	; 0xd38
  4106c4:	f00d fa8b 	bl	41dbde <.LFE179>

004106c8 <.LVL1142>:
  4106c8:	e690      	b.n	4103ec <.LBB79>

004106ca <.LVL1143>:
       return ECC_BAD_ARG_E;
  4106ca:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
  4106ce:	e694      	b.n	4103fa <.LBE79>
  4106d0:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
  4106d4:	e691      	b.n	4103fa <.LBE79>
      return ECC_BAD_ARG_E;
  4106d6:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
  4106da:	e68e      	b.n	4103fa <.LBE79>

004106dc <.LVL1144>:
      return MEMORY_E;
  4106dc:	f06f 047c 	mvn.w	r4, #124	; 0x7c
  4106e0:	e68b      	b.n	4103fa <.LBE79>

004106e2 <.LBB84>:
       unsigned int orderBits = mp_count_bits(curve->order);
  4106e2:	4b19      	ldr	r3, [pc, #100]	; (410748 <.LVL1163+0x4>)
  4106e4:	f241 52d8 	movw	r2, #5592	; 0x15d8
  4106e8:	446a      	add	r2, sp
  4106ea:	58d3      	ldr	r3, [r2, r3]
  4106ec:	68d8      	ldr	r0, [r3, #12]
  4106ee:	f00d fb51 	bl	41dd94 <.LFE80>

004106f2 <.LVL1146>:
  4106f2:	4607      	mov	r7, r0

004106f4 <.LVL1147>:
       if ( (WOLFSSL_BIT_SIZE * hashlen) > orderBits)
  4106f4:	9b05      	ldr	r3, [sp, #20]
  4106f6:	ebb0 0fc3 	cmp.w	r0, r3, lsl #3
  4106fa:	f4ff aeaf 	bcc.w	41045c <.LBB81>

004106fe <.LVL1148>:
       err = mp_read_unsigned_bin(&e, hash, hashlen);
  4106fe:	9a05      	ldr	r2, [sp, #20]
  410700:	4631      	mov	r1, r6
  410702:	f50d 6031 	add.w	r0, sp, #2832	; 0xb10

00410706 <.LVL1149>:
  410706:	f00d fac1 	bl	41dc8c <.LFE72>

0041070a <.LVL1150>:
       if (err == MP_OKAY && (WOLFSSL_BIT_SIZE * hashlen) > orderBits)
  41070a:	4603      	mov	r3, r0
  41070c:	2800      	cmp	r0, #0
  41070e:	f43f aebe 	beq.w	41048e <.LBE81>

00410712 <.LBE84>:
   int          did_init = 0;
  410712:	46a3      	mov	fp, r4
   ecc_point    *mG = NULL, *mQ = NULL;
  410714:	2700      	movs	r7, #0

00410716 <.LVL1151>:
  410716:	463e      	mov	r6, r7

00410718 <.LVL1152>:
  410718:	e005      	b.n	410726 <.LVL1157>

0041071a <.LVL1153>:
   int          did_init = 0;
  41071a:	46a3      	mov	fp, r4
   ecc_point    *mG = NULL, *mQ = NULL;
  41071c:	2700      	movs	r7, #0

0041071e <.LVL1154>:
  41071e:	463e      	mov	r6, r7

00410720 <.LVL1155>:
  410720:	e001      	b.n	410726 <.LVL1157>

00410722 <.LVL1156>:
          err = MEMORY_E;
  410722:	f06f 037c 	mvn.w	r3, #124	; 0x7c

00410726 <.LVL1157>:
  410726:	465c      	mov	r4, fp
  410728:	e6e2      	b.n	4104f0 <.LVL1095>

0041072a <.LBB85>:
  41072a:	9404      	str	r4, [sp, #16]
  41072c:	461c      	mov	r4, r3
  41072e:	e64d      	b.n	4103cc <.LBE78>

00410730 <.LBE85>:
       did_init = 1;
  410730:	f8cd b010 	str.w	fp, [sp, #16]
          err = MEMORY_E;
  410734:	f06f 047c 	mvn.w	r4, #124	; 0x7c
  410738:	e63d      	b.n	4103b6 <.LVL1061>

0041073a <.LVL1160>:
           err = MP_ZERO_E;
  41073a:	f06f 0478 	mvn.w	r4, #120	; 0x78

0041073e <.LVL1161>:
  41073e:	e637      	b.n	4103b0 <.LVL1060>

00410740 <.LVL1162>:
  410740:	f06f 0478 	mvn.w	r4, #120	; 0x78

00410744 <.LVL1163>:
  410744:	e634      	b.n	4103b0 <.LVL1060>
  410746:	bf00      	nop
  410748:	ffffea44 	.word	0xffffea44

Disassembly of section .text.RsaPrivateDecryptEx%58:

0041074c <RsaPrivateDecryptEx>:
static int RsaPrivateDecryptEx(byte* in, word32 inLen, byte* out,
                            word32 outLen, byte** outPtr, RsaKey* key,
                            int rsa_type, byte pad_value, int pad_type,
                            enum wc_HashType hash, int mgf,
                            byte* label, word32 labelSz, WC_RNG* rng)
{
  41074c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00410750 <.LCFI27>:
  410750:	b09b      	sub	sp, #108	; 0x6c

00410752 <.LCFI28>:
  410752:	9c25      	ldr	r4, [sp, #148]	; 0x94
  410754:	f89d 609c 	ldrb.w	r6, [sp, #156]	; 0x9c
  410758:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4

0041075c <.LVL149>:
    int ret = RSA_WRONG_TYPE_E;

    if (in == NULL || inLen == 0 || out == NULL || key == NULL) {
  41075c:	2800      	cmp	r0, #0
  41075e:	f000 81d0 	beq.w	410b02 <.LVL256>
  410762:	4680      	mov	r8, r0
  410764:	2900      	cmp	r1, #0
  410766:	f000 81cc 	beq.w	410b02 <.LVL256>
  41076a:	2a00      	cmp	r2, #0
  41076c:	f000 81cc 	beq.w	410b08 <.LVL256+0x6>
  410770:	2c00      	cmp	r4, #0
  410772:	f000 81c9 	beq.w	410b08 <.LVL256+0x6>
  410776:	461f      	mov	r7, r3
  410778:	9205      	str	r2, [sp, #20]
  41077a:	460d      	mov	r5, r1
        return BAD_FUNC_ARG;
    }

    switch (key->state) {
  41077c:	f241 134c 	movw	r3, #4428	; 0x114c

00410780 <.LVL150>:
  410780:	58e3      	ldr	r3, [r4, r3]
  410782:	2b06      	cmp	r3, #6
  410784:	f200 81c6 	bhi.w	410b14 <.LBE80>
  410788:	e8df f013 	tbh	[pc, r3, lsl #1]

0041078c <.LVL151>:
  41078c:	01c40007 	.word	0x01c40007
  410790:	01c401c4 	.word	0x01c401c4
  410794:	010d0007 	.word	0x010d0007
  410798:	01b4      	.short	0x01b4
    case RSA_STATE_NONE:
    case RSA_STATE_DECRYPT_EXPTMOD:
        key->state = RSA_STATE_DECRYPT_EXPTMOD;
  41079a:	2204      	movs	r2, #4
  41079c:	f241 134c 	movw	r3, #4428	; 0x114c
  4107a0:	50e2      	str	r2, [r4, r3]
        key->dataLen = inLen;
  4107a2:	f241 1350 	movw	r3, #4432	; 0x1150
  4107a6:	50e1      	str	r1, [r4, r3]
            }
        }
    #endif

        /* verify the tmp ptr is NULL, otherwise indicates bad state */
        if (key->data != NULL) {
  4107a8:	f241 1344 	movw	r3, #4420	; 0x1144
  4107ac:	58e3      	ldr	r3, [r4, r3]
  4107ae:	b163      	cbz	r3, 4107ca <.LCFI30>
            ret = BAD_STATE_E;
  4107b0:	f06f 05bf 	mvn.w	r5, #191	; 0xbf

004107b4 <.LVL152>:
    /* if async pending then return and skip done cleanup below */
    if (ret == WC_PENDING_E) {
        return ret;
    }

    key->state = RSA_STATE_NONE;
  4107b4:	2200      	movs	r2, #0
  4107b6:	f241 134c 	movw	r3, #4428	; 0x114c
  4107ba:	50e2      	str	r2, [r4, r3]
    wc_RsaCleanup(key);
  4107bc:	4620      	mov	r0, r4
  4107be:	f00b f889 	bl	41b8d4 <.LFE42>

004107c2 <.LVL153>:

    return ret;
}
  4107c2:	4628      	mov	r0, r5
  4107c4:	b01b      	add	sp, #108	; 0x6c

004107c6 <.LCFI29>:
  4107c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004107ca <.LCFI30>:
        if (outPtr == NULL) {
  4107ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4107cc:	2b00      	cmp	r3, #0
  4107ce:	f000 80d3 	beq.w	410978 <.LBE32>
            key->data = out;
  4107d2:	f241 1344 	movw	r3, #4420	; 0x1144
  4107d6:	9a05      	ldr	r2, [sp, #20]
  4107d8:	50e2      	str	r2, [r4, r3]

004107da <.LVL155>:
        ret = wc_RsaFunction(key->data, inLen, key->data, &key->dataLen, rsa_type,
  4107da:	f241 1344 	movw	r3, #4420	; 0x1144
  4107de:	58e0      	ldr	r0, [r4, r3]
  4107e0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  4107e2:	9302      	str	r3, [sp, #8]
  4107e4:	9401      	str	r4, [sp, #4]
  4107e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4107e8:	9300      	str	r3, [sp, #0]
  4107ea:	f241 1350 	movw	r3, #4432	; 0x1150
  4107ee:	4423      	add	r3, r4
  4107f0:	4602      	mov	r2, r0
  4107f2:	4629      	mov	r1, r5
  4107f4:	f00b fb75 	bl	41bee2 <.LFE2>

004107f8 <.LVL156>:
        if (ret >= 0 || ret == WC_PENDING_E) {
  4107f8:	1e05      	subs	r5, r0, #0

004107fa <.LVL157>:
  4107fa:	f280 80cf 	bge.w	41099c <.LVL196>
  4107fe:	f115 0f6c 	cmn.w	r5, #108	; 0x6c
  410802:	f000 80cb 	beq.w	41099c <.LVL196>
        if (ret < 0) {
  410806:	2d00      	cmp	r5, #0
  410808:	f2c0 8176 	blt.w	410af8 <.LVL255>

0041080c <.LBB32>:
        ret = wc_RsaUnPad_ex(key->data, key->dataLen, &pad, pad_value, pad_type,
  41080c:	f241 1344 	movw	r3, #4420	; 0x1144
  410810:	f854 a003 	ldr.w	sl, [r4, r3]
  410814:	f241 1350 	movw	r3, #4432	; 0x1150
  410818:	f854 8003 	ldr.w	r8, [r4, r3]

0041081c <.LVL159>:
  41081c:	4620      	mov	r0, r4

0041081e <.LVL160>:
  41081e:	f00d fab9 	bl	41dd94 <.LFE80>

00410822 <.LBB33>:
    switch (padType) {
  410822:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  410824:	2b00      	cmp	r3, #0
  410826:	f000 80e6 	beq.w	4109f6 <.LBB50>
  41082a:	2b01      	cmp	r3, #1
  41082c:	f040 816f 	bne.w	410b0e <.LBB80>

00410830 <.LBB35>:
    if (optLabel == NULL && labelLen > 0) {
  410830:	9b2b      	ldr	r3, [sp, #172]	; 0xac

00410832 <.LVL163>:
  410832:	b91b      	cbnz	r3, 41083c <.LBE33>
  410834:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  410836:	2b00      	cmp	r3, #0
  410838:	f040 813c 	bne.w	410ab4 <.LVL241>

0041083c <.LBE33>:
        ret = wc_RsaUnPad_ex(key->data, key->dataLen, &pad, pad_value, pad_type,
  41083c:	f504 538a 	add.w	r3, r4, #4416	; 0x1140
  410840:	681b      	ldr	r3, [r3, #0]
  410842:	9306      	str	r3, [sp, #24]

00410844 <.LBB49>:
    hLen = wc_HashGetDigestSize(hType);
  410844:	4648      	mov	r0, r9
  410846:	f00c fae5 	bl	41ce14 <wc_HashGetDigestSize>

0041084a <.LVL164>:
    if ((hLen < 0) || (pkcsBlockLen < (2 * (word32)hLen + 2))) {
  41084a:	f1b0 0b00 	subs.w	fp, r0, #0
  41084e:	f2c0 8135 	blt.w	410abc <.LBE55>
  410852:	f10b 0501 	add.w	r5, fp, #1
  410856:	ebb8 0f45 	cmp.w	r8, r5, lsl #1
  41085a:	f0c0 8133 	bcc.w	410ac4 <.LBE56>
    tmp = (byte*)XMALLOC(pkcsBlockLen, heap, DYNAMIC_TYPE_RSA_BUFFER);
  41085e:	4640      	mov	r0, r8

00410860 <.LVL165>:
  410860:	f00d f81e 	bl	41d8a0 <.LFE189>

00410864 <.LVL166>:
    if (tmp == NULL) {
  410864:	4606      	mov	r6, r0

00410866 <.LVL167>:
  410866:	2800      	cmp	r0, #0
  410868:	f000 8130 	beq.w	410acc <.LVL247>
    XMEMSET(tmp, 0, pkcsBlockLen);
  41086c:	4642      	mov	r2, r8
  41086e:	2100      	movs	r1, #0
  410870:	f009 fa96 	bl	419da0 <.LFE166>

00410874 <.LVL168>:
  410874:	f108 32ff 	add.w	r2, r8, #4294967295
  410878:	9208      	str	r2, [sp, #32]
    if ((ret = RsaMGF(mgf, (byte*)(pkcsBlock + (hLen + 1)),
  41087a:	eba2 020b 	sub.w	r2, r2, fp
  41087e:	9207      	str	r2, [sp, #28]
  410880:	9b06      	ldr	r3, [sp, #24]
  410882:	9301      	str	r3, [sp, #4]
  410884:	f8cd b000 	str.w	fp, [sp]
  410888:	4633      	mov	r3, r6
  41088a:	eb0a 0105 	add.w	r1, sl, r5
  41088e:	982a      	ldr	r0, [sp, #168]	; 0xa8
  410890:	f00a fdcf 	bl	41b432 <.LBE177>

00410894 <.LVL169>:
  410894:	4605      	mov	r5, r0
  410896:	2800      	cmp	r0, #0
  410898:	f040 8102 	bne.w	410aa0 <.LBB40>

0041089c <.LVL170>:
    for (idx = 0; idx < (word32)hLen; idx++) {
  41089c:	f1bb 0f00 	cmp.w	fp, #0
  4108a0:	d00b      	beq.n	4108ba <.LVL172+0x10>
  4108a2:	1e70      	subs	r0, r6, #1

004108a4 <.LVL171>:
  4108a4:	4651      	mov	r1, sl
  4108a6:	eb0a 050b 	add.w	r5, sl, fp

004108aa <.LVL172>:
        tmp[idx] = tmp[idx] ^ pkcsBlock[1 + idx];
  4108aa:	7843      	ldrb	r3, [r0, #1]
  4108ac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
  4108b0:	4053      	eors	r3, r2
  4108b2:	f800 3f01 	strb.w	r3, [r0, #1]!
    for (idx = 0; idx < (word32)hLen; idx++) {
  4108b6:	42a9      	cmp	r1, r5
  4108b8:	d1f7      	bne.n	4108aa <.LVL172>
    if ((ret = RsaMGF(mgf, tmp, hLen, tmp + hLen,
  4108ba:	eb06 030b 	add.w	r3, r6, fp
  4108be:	9309      	str	r3, [sp, #36]	; 0x24
  4108c0:	9a06      	ldr	r2, [sp, #24]
  4108c2:	9201      	str	r2, [sp, #4]
  4108c4:	9a07      	ldr	r2, [sp, #28]
  4108c6:	9200      	str	r2, [sp, #0]
  4108c8:	465a      	mov	r2, fp
  4108ca:	4631      	mov	r1, r6
  4108cc:	982a      	ldr	r0, [sp, #168]	; 0xa8
  4108ce:	f00a fdb0 	bl	41b432 <.LBE177>

004108d2 <.LVL173>:
  4108d2:	4605      	mov	r5, r0
  4108d4:	2800      	cmp	r0, #0
  4108d6:	f040 80e8 	bne.w	410aaa <.LBB41>

004108da <.LVL174>:
    for (idx = 0; idx < (pkcsBlockLen - hLen - 1); idx++) {
  4108da:	9a07      	ldr	r2, [sp, #28]
  4108dc:	b16a      	cbz	r2, 4108fa <.LBB37>
  4108de:	eb0a 010b 	add.w	r1, sl, fp
  4108e2:	9809      	ldr	r0, [sp, #36]	; 0x24

004108e4 <.LVL175>:
  4108e4:	9b08      	ldr	r3, [sp, #32]
  4108e6:	4453      	add	r3, sl
  4108e8:	461d      	mov	r5, r3

004108ea <.LVL176>:
        pkcsBlock[hLen + 1 + idx] = pkcsBlock[hLen + 1 + idx] ^ tmp[idx + hLen];
  4108ea:	f810 3b01 	ldrb.w	r3, [r0], #1
  4108ee:	784a      	ldrb	r2, [r1, #1]
  4108f0:	4053      	eors	r3, r2
  4108f2:	f801 3f01 	strb.w	r3, [r1, #1]!
    for (idx = 0; idx < (pkcsBlockLen - hLen - 1); idx++) {
  4108f6:	42a9      	cmp	r1, r5
  4108f8:	d1f7      	bne.n	4108ea <.LVL176>

004108fa <.LBB37>:
    XFREE(tmp, heap, DYNAMIC_TYPE_RSA_BUFFER);
  4108fa:	4630      	mov	r0, r6
  4108fc:	f00c ffdc 	bl	41d8b8 <.LFE2>

00410900 <.LBE37>:
    idx = hLen + 1 + hLen;
  410900:	f10b 0601 	add.w	r6, fp, #1

00410904 <.LVL179>:
  410904:	445e      	add	r6, fp

00410906 <.LVL180>:
    while (idx < pkcsBlockLen && pkcsBlock[idx] == 0) {idx++;}
  410906:	4546      	cmp	r6, r8
  410908:	d20b      	bcs.n	410922 <.LVL180+0x1c>
  41090a:	eb0a 0306 	add.w	r3, sl, r6
  41090e:	f81a 2006 	ldrb.w	r2, [sl, r6]
  410912:	b932      	cbnz	r2, 410922 <.LVL180+0x1c>
  410914:	3601      	adds	r6, #1
  410916:	4546      	cmp	r6, r8
  410918:	d203      	bcs.n	410922 <.LVL180+0x1c>
  41091a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  41091e:	2a00      	cmp	r2, #0
  410920:	d0f8      	beq.n	410914 <.LVL180+0xe>
    if ((ret = wc_Hash(hType, optLabel, labelLen, h, hLen)) != 0) {
  410922:	f8cd b000 	str.w	fp, [sp]
  410926:	ab0a      	add	r3, sp, #40	; 0x28
  410928:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  41092a:	992b      	ldr	r1, [sp, #172]	; 0xac
  41092c:	4648      	mov	r0, r9
  41092e:	f009 f8fe 	bl	419b2e <.LFE24>

00410932 <.LVL182>:
  410932:	4605      	mov	r5, r0
  410934:	2800      	cmp	r0, #0
  410936:	f040 80cc 	bne.w	410ad2 <.LBE57>

0041093a <.LBB38>:
STATIC INLINE int ConstantCompare(const byte* a, const byte* b, int length)
{
    int i;
    int compareSum = 0;

    for (i = 0; i < length; i++) {
  41093a:	f1bb 0f00 	cmp.w	fp, #0
  41093e:	dd0b      	ble.n	410958 <.LBE38>
  410940:	eb0a 010b 	add.w	r1, sl, fp
  410944:	a80a      	add	r0, sp, #40	; 0x28

00410946 <.LVL184>:
  410946:	448b      	add	fp, r1

00410948 <.LVL185>:
        compareSum |= a[i] ^ b[i];
  410948:	f810 3b01 	ldrb.w	r3, [r0], #1
  41094c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
  410950:	4053      	eors	r3, r2
  410952:	431d      	orrs	r5, r3
    for (i = 0; i < length; i++) {
  410954:	4559      	cmp	r1, fp
  410956:	d1f7      	bne.n	410948 <.LVL185>

00410958 <.LBE38>:
    ret += pkcsBlock[idx++] ^ 0x01; /* separator value is 0x01 */
  410958:	1c72      	adds	r2, r6, #1

0041095a <.LVL188>:
  41095a:	f81a 3006 	ldrb.w	r3, [sl, r6]
  41095e:	f083 0301 	eor.w	r3, r3, #1
  410962:	441d      	add	r5, r3

00410964 <.LVL189>:
    ret += pkcsBlock[0]     ^ 0x00; /* Y, the first value, should be 0 */
  410964:	f89a 3000 	ldrb.w	r3, [sl]
    if (ret != 0) {
  410968:	42eb      	cmn	r3, r5
  41096a:	f040 80b4 	bne.w	410ad6 <.LVL250>
    *output = (byte*)(pkcsBlock + idx);
  41096e:	eb0a 0602 	add.w	r6, sl, r2

00410972 <.LVL190>:
    return pkcsBlockLen - idx;
  410972:	eba8 0502 	sub.w	r5, r8, r2

00410976 <.LVL191>:
  410976:	e029      	b.n	4109cc <.LBE73>

00410978 <.LBE32>:
            key->data = (byte*)XMALLOC(inLen, key->heap, DYNAMIC_TYPE_WOLF_BIGINT);
  410978:	4608      	mov	r0, r1

0041097a <.LVL193>:
  41097a:	f00c ff91 	bl	41d8a0 <.LFE189>

0041097e <.LVL194>:
  41097e:	f241 1344 	movw	r3, #4420	; 0x1144
  410982:	50e0      	str	r0, [r4, r3]
            key->dataIsAlloc = 1;
  410984:	2201      	movs	r2, #1
  410986:	f241 1354 	movw	r3, #4436	; 0x1154
  41098a:	54e2      	strb	r2, [r4, r3]
            if (key->data == NULL) {
  41098c:	2800      	cmp	r0, #0
  41098e:	f000 80c4 	beq.w	410b1a <.LVL260>
            XMEMCPY(key->data, in, inLen);
  410992:	462a      	mov	r2, r5
  410994:	4641      	mov	r1, r8
  410996:	f005 fd41 	bl	41641c <memcpy>

0041099a <.LVL195>:
  41099a:	e71e      	b.n	4107da <.LVL155>

0041099c <.LVL196>:
            key->state = RSA_STATE_DECRYPT_UNPAD;
  41099c:	2205      	movs	r2, #5
  41099e:	f241 134c 	movw	r3, #4428	; 0x114c
  4109a2:	50e2      	str	r2, [r4, r3]
  4109a4:	e72f      	b.n	410806 <.LVL157+0xc>

004109a6 <.LBB82>:
        ret = wc_RsaUnPad_ex(key->data, key->dataLen, &pad, pad_value, pad_type,
  4109a6:	f241 1344 	movw	r3, #4420	; 0x1144
  4109aa:	f854 a003 	ldr.w	sl, [r4, r3]
  4109ae:	f241 1350 	movw	r3, #4432	; 0x1150
  4109b2:	f854 8003 	ldr.w	r8, [r4, r3]
  4109b6:	4620      	mov	r0, r4

004109b8 <.LVL198>:
  4109b8:	f00d f9ec 	bl	41dd94 <.LFE80>

004109bc <.LBB72>:
    switch (padType) {
  4109bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4109be:	b1d3      	cbz	r3, 4109f6 <.LBB50>
  4109c0:	2b01      	cmp	r3, #1
  4109c2:	f43f af35 	beq.w	410830 <.LBB35>

004109c6 <.LBE72>:
        byte* pad = NULL;
  4109c6:	2600      	movs	r6, #0

004109c8 <.LBB73>:
            ret = RSA_PAD_E;
  4109c8:	f06f 05c8 	mvn.w	r5, #200	; 0xc8

004109cc <.LBE73>:
        if (ret > 0 && ret <= (int)outLen && pad != NULL) {
  4109cc:	42af      	cmp	r7, r5
  4109ce:	bfa8      	it	ge
  4109d0:	2d00      	cmpge	r5, #0
  4109d2:	f340 808a 	ble.w	410aea <.LVL253+0x2>
  4109d6:	2e00      	cmp	r6, #0
  4109d8:	f000 8087 	beq.w	410aea <.LVL253+0x2>
            if (outPtr == NULL) {
  4109dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4109de:	2b00      	cmp	r3, #0
  4109e0:	d07d      	beq.n	410ade <.LBE58>
                *outPtr = pad;
  4109e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4109e4:	601e      	str	r6, [r3, #0]

004109e6 <.LVL202>:
        if (ret < 0) {
  4109e6:	2d00      	cmp	r5, #0
  4109e8:	f2c0 8086 	blt.w	410af8 <.LVL255>
        key->state = RSA_STATE_DECRYPT_RES;
  4109ec:	2206      	movs	r2, #6
  4109ee:	f241 134c 	movw	r3, #4428	; 0x114c
  4109f2:	50e2      	str	r2, [r4, r3]

004109f4 <.LVL203>:
  4109f4:	e080      	b.n	410af8 <.LVL255>

004109f6 <.LBB50>:
    word32 maxOutputLen = (pkcsBlockLen > 10) ? (pkcsBlockLen - 10) : 0;
  4109f6:	f1b8 0f0a 	cmp.w	r8, #10
  4109fa:	bf8c      	ite	hi
  4109fc:	f1a8 010a 	subhi.w	r1, r8, #10
  410a00:	2100      	movls	r1, #0

00410a02 <.LVL205>:
    if (output == NULL || pkcsBlockLen == 0) {
  410a02:	f1b8 0f00 	cmp.w	r8, #0
  410a06:	f000 808b 	beq.w	410b20 <.LBB59>

00410a0a <.LVL206>:
    pkcsBlock++; pkcsBlockLen--;
  410a0a:	f108 38ff 	add.w	r8, r8, #4294967295

00410a0e <.LVL207>:
    invalid = (pkcsBlock[0] != padValue) || invalid;
  410a0e:	f89a 2001 	ldrb.w	r2, [sl, #1]
    if (pkcsBlock[0] != 0x0) { /* skip past zero */
  410a12:	f89a 3000 	ldrb.w	r3, [sl]

00410a16 <.LVL208>:
  410a16:	2b00      	cmp	r3, #0
  410a18:	bf08      	it	eq
  410a1a:	42b2      	cmpeq	r2, r6
  410a1c:	bf14      	ite	ne
  410a1e:	2001      	movne	r0, #1
  410a20:	2000      	moveq	r0, #0

00410a22 <.LVL209>:
    if (padValue == RSA_BLOCK_TYPE_1) {
  410a22:	2e01      	cmp	r6, #1
  410a24:	d01e      	beq.n	410a64 <.LVL218>
        while (i<pkcsBlockLen && pkcsBlock[i++]) {/* Null body */}
  410a26:	f1b8 0f01 	cmp.w	r8, #1
  410a2a:	d935      	bls.n	410a98 <.LVL229>

00410a2c <.LVL210>:
  410a2c:	f89a 3002 	ldrb.w	r3, [sl, #2]
  410a30:	b3a3      	cbz	r3, 410a9c <.LVL231>
  410a32:	f10a 0302 	add.w	r3, sl, #2
  410a36:	2602      	movs	r6, #2

00410a38 <.LVL211>:
  410a38:	45b0      	cmp	r8, r6
  410a3a:	d027      	beq.n	410a8c <.LVL223>
  410a3c:	3601      	adds	r6, #1
  410a3e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  410a42:	2a00      	cmp	r2, #0
  410a44:	d1f8      	bne.n	410a38 <.LVL211>
    if (!(i==pkcsBlockLen || pkcsBlock[i-1]==0)) {
  410a46:	45b0      	cmp	r8, r6
  410a48:	d003      	beq.n	410a52 <.LVL214>
  410a4a:	f81a 3006 	ldrb.w	r3, [sl, r6]
  410a4e:	2b00      	cmp	r3, #0
  410a50:	d169      	bne.n	410b26 <.LVL263>

00410a52 <.LVL214>:
    outputLen = pkcsBlockLen - i;
  410a52:	eba8 0506 	sub.w	r5, r8, r6

00410a56 <.LVL215>:
    if (invalid) {
  410a56:	428d      	cmp	r5, r1
  410a58:	d868      	bhi.n	410b2c <.LVL264>
  410a5a:	2800      	cmp	r0, #0
  410a5c:	d166      	bne.n	410b2c <.LVL264>
    *output = (byte *)(pkcsBlock + i);
  410a5e:	3601      	adds	r6, #1

00410a60 <.LVL216>:
  410a60:	4456      	add	r6, sl

00410a62 <.LVL217>:
  410a62:	e7b3      	b.n	4109cc <.LBE73>

00410a64 <.LVL218>:
        while (i<pkcsBlockLen && pkcsBlock[i++] == 0xFF) {/* Null body */}
  410a64:	f1b8 0f01 	cmp.w	r8, #1
  410a68:	d912      	bls.n	410a90 <.LVL225>

00410a6a <.LVL219>:
  410a6a:	f89a 3002 	ldrb.w	r3, [sl, #2]
  410a6e:	2bff      	cmp	r3, #255	; 0xff
  410a70:	d110      	bne.n	410a94 <.LVL227>
  410a72:	f10a 0302 	add.w	r3, sl, #2
  410a76:	2602      	movs	r6, #2

00410a78 <.LVL220>:
  410a78:	45b0      	cmp	r8, r6
  410a7a:	d005      	beq.n	410a88 <.LVL220+0x10>
  410a7c:	3601      	adds	r6, #1
  410a7e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  410a82:	2aff      	cmp	r2, #255	; 0xff
  410a84:	d0f8      	beq.n	410a78 <.LVL220>
  410a86:	e7de      	b.n	410a46 <.LVL211+0xe>
  410a88:	4646      	mov	r6, r8

00410a8a <.LVL222>:
  410a8a:	e7e2      	b.n	410a52 <.LVL214>

00410a8c <.LVL223>:
        while (i<pkcsBlockLen && pkcsBlock[i++]) {/* Null body */}
  410a8c:	4646      	mov	r6, r8

00410a8e <.LVL224>:
  410a8e:	e7e0      	b.n	410a52 <.LVL214>

00410a90 <.LVL225>:
        while (i<pkcsBlockLen && pkcsBlock[i++] == 0xFF) {/* Null body */}
  410a90:	2601      	movs	r6, #1

00410a92 <.LVL226>:
  410a92:	e7d8      	b.n	410a46 <.LVL211+0xe>

00410a94 <.LVL227>:
  410a94:	2602      	movs	r6, #2

00410a96 <.LVL228>:
  410a96:	e7d6      	b.n	410a46 <.LVL211+0xe>

00410a98 <.LVL229>:
        while (i<pkcsBlockLen && pkcsBlock[i++]) {/* Null body */}
  410a98:	2601      	movs	r6, #1

00410a9a <.LVL230>:
  410a9a:	e7d4      	b.n	410a46 <.LVL211+0xe>

00410a9c <.LVL231>:
  410a9c:	2602      	movs	r6, #2

00410a9e <.LVL232>:
  410a9e:	e7d2      	b.n	410a46 <.LVL211+0xe>

00410aa0 <.LBB40>:
        XFREE(tmp, heap, DYNAMIC_TYPE_RSA_BUFFER);
  410aa0:	4630      	mov	r0, r6

00410aa2 <.LVL234>:
  410aa2:	f00c ff09 	bl	41d8b8 <.LFE2>

00410aa6 <.LBE40>:
        byte* pad = NULL;
  410aa6:	2600      	movs	r6, #0

00410aa8 <.LVL236>:
  410aa8:	e790      	b.n	4109cc <.LBE73>

00410aaa <.LBB41>:
        XFREE(tmp, NULL, DYNAMIC_TYPE_RSA_BUFFER);
  410aaa:	4630      	mov	r0, r6

00410aac <.LVL238>:
  410aac:	f00c ff04 	bl	41d8b8 <.LFE2>

00410ab0 <.LBE41>:
        byte* pad = NULL;
  410ab0:	2600      	movs	r6, #0

00410ab2 <.LVL240>:
  410ab2:	e78b      	b.n	4109cc <.LBE73>

00410ab4 <.LVL241>:
  410ab4:	2600      	movs	r6, #0

00410ab6 <.LBB55>:
        return BUFFER_E;
  410ab6:	f06f 0583 	mvn.w	r5, #131	; 0x83
  410aba:	e787      	b.n	4109cc <.LBE73>

00410abc <.LBE55>:
        byte* pad = NULL;
  410abc:	2600      	movs	r6, #0

00410abe <.LBB56>:
        return BAD_FUNC_ARG;
  410abe:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  410ac2:	e783      	b.n	4109cc <.LBE73>

00410ac4 <.LBE56>:
        byte* pad = NULL;
  410ac4:	2600      	movs	r6, #0

00410ac6 <.LBB57>:
        return BAD_FUNC_ARG;
  410ac6:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  410aca:	e77f      	b.n	4109cc <.LBE73>

00410acc <.LVL247>:
        return MEMORY_E;
  410acc:	f06f 057c 	mvn.w	r5, #124	; 0x7c
  410ad0:	e77c      	b.n	4109cc <.LBE73>

00410ad2 <.LBE57>:
        byte* pad = NULL;
  410ad2:	2600      	movs	r6, #0

00410ad4 <.LVL249>:
  410ad4:	e77a      	b.n	4109cc <.LBE73>

00410ad6 <.LVL250>:
  410ad6:	2600      	movs	r6, #0

00410ad8 <.LBB58>:
        return BAD_PADDING_E;
  410ad8:	f06f 05c0 	mvn.w	r5, #192	; 0xc0

00410adc <.LVL251>:
  410adc:	e776      	b.n	4109cc <.LBE73>

00410ade <.LBE58>:
                XMEMCPY(out, pad, ret);
  410ade:	462a      	mov	r2, r5
  410ae0:	4631      	mov	r1, r6
  410ae2:	9805      	ldr	r0, [sp, #20]
  410ae4:	f005 fc9a 	bl	41641c <memcpy>

00410ae8 <.LVL253>:
  410ae8:	e77d      	b.n	4109e6 <.LVL202>
        else if (ret >= 0) {
  410aea:	2d00      	cmp	r5, #0
  410aec:	db04      	blt.n	410af8 <.LVL255>
            ret = RSA_BUFFER_E;
  410aee:	f06f 0582 	mvn.w	r5, #130	; 0x82
  410af2:	e65f      	b.n	4107b4 <.LVL152>

00410af4 <.LBE82>:
    int ret = RSA_WRONG_TYPE_E;
  410af4:	f06f 0581 	mvn.w	r5, #129	; 0x81

00410af8 <.LVL255>:
    if (ret == WC_PENDING_E) {
  410af8:	f115 0f6c 	cmn.w	r5, #108	; 0x6c
  410afc:	f43f ae61 	beq.w	4107c2 <.LVL153>
  410b00:	e658      	b.n	4107b4 <.LVL152>

00410b02 <.LVL256>:
        return BAD_FUNC_ARG;
  410b02:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  410b06:	e65c      	b.n	4107c2 <.LVL153>
  410b08:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  410b0c:	e659      	b.n	4107c2 <.LVL153>

00410b0e <.LBB80>:
            ret = RSA_PAD_E;
  410b0e:	f06f 05c8 	mvn.w	r5, #200	; 0xc8

00410b12 <.LVL258>:
  410b12:	e7f1      	b.n	410af8 <.LVL255>

00410b14 <.LBE80>:
        ret = BAD_STATE_E;
  410b14:	f06f 05bf 	mvn.w	r5, #191	; 0xbf
  410b18:	e64c      	b.n	4107b4 <.LVL152>

00410b1a <.LVL260>:
                ret = MEMORY_E;
  410b1a:	f06f 057c 	mvn.w	r5, #124	; 0x7c

00410b1e <.LVL261>:
  410b1e:	e649      	b.n	4107b4 <.LVL152>

00410b20 <.LBB59>:
        return BAD_FUNC_ARG;
  410b20:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  410b24:	e7e8      	b.n	410af8 <.LVL255>

00410b26 <.LVL263>:
        return RSA_PAD_E;
  410b26:	f06f 05c8 	mvn.w	r5, #200	; 0xc8
  410b2a:	e7e5      	b.n	410af8 <.LVL255>

00410b2c <.LVL264>:
        return RSA_PAD_E;
  410b2c:	f06f 05c8 	mvn.w	r5, #200	; 0xc8

00410b30 <.LVL265>:
  410b30:	e7e2      	b.n	410af8 <.LVL255>

Disassembly of section .text.build_tree%59:

00410b32 <build_tree>:
{
  410b32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00410b36 <.LCFI11>:
  410b36:	b091      	sub	sp, #68	; 0x44

00410b38 <.LCFI12>:
  410b38:	4604      	mov	r4, r0
  410b3a:	9101      	str	r1, [sp, #4]
    ct_data *tree         = desc->dyn_tree;
  410b3c:	680d      	ldr	r5, [r1, #0]

00410b3e <.LVL186>:
    const ct_data *stree  = desc->stat_desc->static_tree;
  410b3e:	688b      	ldr	r3, [r1, #8]
  410b40:	681e      	ldr	r6, [r3, #0]

00410b42 <.LVL187>:
    int elems             = desc->stat_desc->elems;
  410b42:	68df      	ldr	r7, [r3, #12]

00410b44 <.LVL188>:
    s->heap_len = 0, s->heap_max = HEAP_SIZE;
  410b44:	2200      	movs	r2, #0
  410b46:	f241 4350 	movw	r3, #5200	; 0x1450
  410b4a:	50c2      	str	r2, [r0, r3]
  410b4c:	f240 223d 	movw	r2, #573	; 0x23d
  410b50:	f241 4354 	movw	r3, #5204	; 0x1454
  410b54:	50c2      	str	r2, [r0, r3]

00410b56 <.LVL189>:
    for (n = 0; n < elems; n++) {
  410b56:	2f00      	cmp	r7, #0
  410b58:	dd38      	ble.n	410bcc <.LVL197>
  410b5a:	4629      	mov	r1, r5

00410b5c <.LVL190>:
  410b5c:	f241 4258 	movw	r2, #5208	; 0x1458
  410b60:	4402      	add	r2, r0
  410b62:	f04f 33ff 	mov.w	r3, #4294967295
  410b66:	9306      	str	r3, [sp, #24]
  410b68:	2300      	movs	r3, #0
            tree[n].Len = 0;
  410b6a:	469c      	mov	ip, r3
            s->heap[++(s->heap_len)] = max_code = n;
  410b6c:	f241 4e50 	movw	lr, #5200	; 0x1450
  410b70:	4486      	add	lr, r0
  410b72:	4680      	mov	r8, r0
  410b74:	e006      	b.n	410b84 <.LVL191+0xe>

00410b76 <.LVL191>:
            tree[n].Len = 0;
  410b76:	f8a1 c002 	strh.w	ip, [r1, #2]
    for (n = 0; n < elems; n++) {
  410b7a:	3301      	adds	r3, #1
  410b7c:	3104      	adds	r1, #4
  410b7e:	3201      	adds	r2, #1
  410b80:	429f      	cmp	r7, r3
  410b82:	d010      	beq.n	410ba6 <.LVL195>
        if (tree[n].Freq != 0) {
  410b84:	f835 0023 	ldrh.w	r0, [r5, r3, lsl #2]
  410b88:	2800      	cmp	r0, #0
  410b8a:	d0f4      	beq.n	410b76 <.LVL191>
            s->heap[++(s->heap_len)] = max_code = n;
  410b8c:	f8de 0000 	ldr.w	r0, [lr]
  410b90:	1c44      	adds	r4, r0, #1
  410b92:	f8ce 4000 	str.w	r4, [lr]

00410b96 <.LVL194>:
  410b96:	eb08 0080 	add.w	r0, r8, r0, lsl #2
  410b9a:	f8c0 3b60 	str.w	r3, [r0, #2912]	; 0xb60
            s->depth[n] = 0;
  410b9e:	f882 c000 	strb.w	ip, [r2]
  410ba2:	9306      	str	r3, [sp, #24]
  410ba4:	e7e9      	b.n	410b7a <.LVL191+0x4>

00410ba6 <.LVL195>:
  410ba6:	4644      	mov	r4, r8

00410ba8 <.LVL196>:
    while (s->heap_len < 2) {
  410ba8:	f241 4250 	movw	r2, #5200	; 0x1450
  410bac:	4422      	add	r2, r4
        node = s->heap[++(s->heap_len)] = (max_code < 2 ? ++max_code : 0);
  410bae:	f04f 0e00 	mov.w	lr, #0
        tree[node].Freq = 1;
  410bb2:	f04f 0801 	mov.w	r8, #1
        s->depth[node] = 0;
  410bb6:	f241 4c58 	movw	ip, #5208	; 0x1458
        s->opt_len--; if (stree) s->static_len -= stree[node].Len;
  410bba:	f241 61a8 	movw	r1, #5800	; 0x16a8
  410bbe:	4421      	add	r1, r4
  410bc0:	f241 60ac 	movw	r0, #5804	; 0x16ac
  410bc4:	4420      	add	r0, r4
  410bc6:	f8dd 9018 	ldr.w	r9, [sp, #24]
  410bca:	e01c      	b.n	410c06 <.LVL201+0x1a>

00410bcc <.LVL197>:
    int max_code = -1; /* largest code with non zero frequency */
  410bcc:	f04f 33ff 	mov.w	r3, #4294967295
  410bd0:	9306      	str	r3, [sp, #24]
  410bd2:	e7e9      	b.n	410ba8 <.LVL196>

00410bd4 <.LVL198>:
        node = s->heap[++(s->heap_len)] = (max_code < 2 ? ++max_code : 0);
  410bd4:	f109 0901 	add.w	r9, r9, #1
  410bd8:	46ca      	mov	sl, r9
  410bda:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  410bde:	f8c3 ab5c 	str.w	sl, [r3, #2908]	; 0xb5c

00410be2 <.LVL200>:
        tree[node].Freq = 1;
  410be2:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
  410be6:	f825 802a 	strh.w	r8, [r5, sl, lsl #2]
        s->depth[node] = 0;
  410bea:	44a2      	add	sl, r4

00410bec <.LVL201>:
  410bec:	f80a e00c 	strb.w	lr, [sl, ip]
        s->opt_len--; if (stree) s->static_len -= stree[node].Len;
  410bf0:	680b      	ldr	r3, [r1, #0]
  410bf2:	3b01      	subs	r3, #1
  410bf4:	600b      	str	r3, [r1, #0]
  410bf6:	b136      	cbz	r6, 410c06 <.LVL201+0x1a>
  410bf8:	44b3      	add	fp, r6
  410bfa:	f8bb a002 	ldrh.w	sl, [fp, #2]
  410bfe:	6803      	ldr	r3, [r0, #0]
  410c00:	eba3 030a 	sub.w	r3, r3, sl
  410c04:	6003      	str	r3, [r0, #0]
    while (s->heap_len < 2) {
  410c06:	6813      	ldr	r3, [r2, #0]
  410c08:	2b01      	cmp	r3, #1
  410c0a:	dc06      	bgt.n	410c1a <.LVL201+0x2e>
        node = s->heap[++(s->heap_len)] = (max_code < 2 ? ++max_code : 0);
  410c0c:	3301      	adds	r3, #1
  410c0e:	6013      	str	r3, [r2, #0]
  410c10:	f1b9 0f01 	cmp.w	r9, #1
  410c14:	ddde      	ble.n	410bd4 <.LVL198>
  410c16:	46f2      	mov	sl, lr
  410c18:	e7df      	b.n	410bda <.LVL198+0x6>
  410c1a:	f8cd 9018 	str.w	r9, [sp, #24]
    desc->max_code = max_code;
  410c1e:	9a01      	ldr	r2, [sp, #4]
  410c20:	f8c2 9004 	str.w	r9, [r2, #4]
    for (n = s->heap_len/2; n >= 1; n--) pqdownheap(s, tree, n);
  410c24:	f241 4350 	movw	r3, #5200	; 0x1450
  410c28:	58e6      	ldr	r6, [r4, r3]

00410c2a <.LVL203>:
  410c2a:	2e00      	cmp	r6, #0
  410c2c:	bfb8      	it	lt
  410c2e:	3601      	addlt	r6, #1
  410c30:	1076      	asrs	r6, r6, #1

00410c32 <.LVL204>:
  410c32:	2e00      	cmp	r6, #0
  410c34:	dd06      	ble.n	410c44 <.LVL206+0x2>
  410c36:	4632      	mov	r2, r6
  410c38:	4629      	mov	r1, r5
  410c3a:	4620      	mov	r0, r4
  410c3c:	f008 fd90 	bl	419760 <.LFE0>

00410c40 <.LVL205>:
  410c40:	3e01      	subs	r6, #1

00410c42 <.LVL206>:
  410c42:	d1f8      	bne.n	410c36 <.LVL204+0x4>
  410c44:	f241 4957 	movw	r9, #5207	; 0x1457

00410c48 <.LVL207>:
  410c48:	44b9      	add	r9, r7
  410c4a:	44a1      	add	r9, r4
        pqremove(s, tree, n);  /* n = node of least frequency */
  410c4c:	f241 4850 	movw	r8, #5200	; 0x1450
  410c50:	44a0      	add	r8, r4
  410c52:	f04f 0b01 	mov.w	fp, #1
        s->heap[--(s->heap_max)] = n; /* keep the nodes sorted by frequency */
  410c56:	f241 4a54 	movw	sl, #5204	; 0x1454
  410c5a:	44a2      	add	sl, r4
  410c5c:	e000      	b.n	410c60 <.LVL209>

00410c5e <.LVL208>:
        s->heap[SMALLEST] = node++;
  410c5e:	4637      	mov	r7, r6

00410c60 <.LVL209>:
        pqremove(s, tree, n);  /* n = node of least frequency */
  410c60:	f8d4 6b60 	ldr.w	r6, [r4, #2912]	; 0xb60

00410c64 <.LVL210>:
  410c64:	f8d8 3000 	ldr.w	r3, [r8]
  410c68:	1e5a      	subs	r2, r3, #1
  410c6a:	f8c8 2000 	str.w	r2, [r8]
  410c6e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  410c72:	f8d3 3b5c 	ldr.w	r3, [r3, #2908]	; 0xb5c
  410c76:	f8c4 3b60 	str.w	r3, [r4, #2912]	; 0xb60
  410c7a:	465a      	mov	r2, fp
  410c7c:	4629      	mov	r1, r5
  410c7e:	4620      	mov	r0, r4
  410c80:	f008 fd6e 	bl	419760 <.LFE0>

00410c84 <.LVL211>:
        m = s->heap[SMALLEST]; /* m = node of next least frequency */
  410c84:	f8d4 3b60 	ldr.w	r3, [r4, #2912]	; 0xb60

00410c88 <.LVL212>:
        s->heap[--(s->heap_max)] = n; /* keep the nodes sorted by frequency */
  410c88:	f8da 2000 	ldr.w	r2, [sl]
  410c8c:	eb04 0182 	add.w	r1, r4, r2, lsl #2
  410c90:	f8c1 6b58 	str.w	r6, [r1, #2904]	; 0xb58
        s->heap[--(s->heap_max)] = m;
  410c94:	3a02      	subs	r2, #2
  410c96:	f8ca 2000 	str.w	r2, [sl]
  410c9a:	f8c1 3b54 	str.w	r3, [r1, #2900]	; 0xb54
        tree[node].Freq = tree[n].Freq + tree[m].Freq;
  410c9e:	eb05 0286 	add.w	r2, r5, r6, lsl #2
  410ca2:	eb05 0183 	add.w	r1, r5, r3, lsl #2
  410ca6:	f835 0026 	ldrh.w	r0, [r5, r6, lsl #2]
  410caa:	f835 e023 	ldrh.w	lr, [r5, r3, lsl #2]
  410cae:	4470      	add	r0, lr
  410cb0:	f825 0027 	strh.w	r0, [r5, r7, lsl #2]
        s->depth[node] = (uch)((s->depth[n] >= s->depth[m] ?
  410cb4:	4426      	add	r6, r4

00410cb6 <.LVL213>:
  410cb6:	f241 4e58 	movw	lr, #5208	; 0x1458
  410cba:	f816 000e 	ldrb.w	r0, [r6, lr]
  410cbe:	4423      	add	r3, r4

00410cc0 <.LVL214>:
  410cc0:	f813 300e 	ldrb.w	r3, [r3, lr]
  410cc4:	4298      	cmp	r0, r3
  410cc6:	bf2c      	ite	cs
  410cc8:	1c43      	addcs	r3, r0, #1
  410cca:	3301      	addcc	r3, #1
  410ccc:	b2db      	uxtb	r3, r3
  410cce:	f809 3f01 	strb.w	r3, [r9, #1]!
        tree[n].Dad = tree[m].Dad = (ush)node;
  410cd2:	b2bb      	uxth	r3, r7
  410cd4:	804b      	strh	r3, [r1, #2]
  410cd6:	8053      	strh	r3, [r2, #2]
        s->heap[SMALLEST] = node++;
  410cd8:	1c7e      	adds	r6, r7, #1

00410cda <.LVL215>:
  410cda:	f8c4 7b60 	str.w	r7, [r4, #2912]	; 0xb60
        pqdownheap(s, tree, SMALLEST);
  410cde:	465a      	mov	r2, fp
  410ce0:	4629      	mov	r1, r5
  410ce2:	4620      	mov	r0, r4
  410ce4:	f008 fd3c 	bl	419760 <.LFE0>

00410ce8 <.LVL216>:
    } while (s->heap_len >= 2);
  410ce8:	f8d8 3000 	ldr.w	r3, [r8]
  410cec:	2b01      	cmp	r3, #1
  410cee:	dcb6      	bgt.n	410c5e <.LVL208>
    s->heap[--(s->heap_max)] = s->heap[SMALLEST];
  410cf0:	f241 4254 	movw	r2, #5204	; 0x1454
  410cf4:	58a3      	ldr	r3, [r4, r2]
  410cf6:	1e59      	subs	r1, r3, #1
  410cf8:	50a1      	str	r1, [r4, r2]
  410cfa:	f8d4 eb60 	ldr.w	lr, [r4, #2912]	; 0xb60
  410cfe:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  410d02:	f8c3 eb58 	str.w	lr, [r3, #2904]	; 0xb58

00410d06 <.LBB54>:
    ct_data *tree        = desc->dyn_tree;
  410d06:	9801      	ldr	r0, [sp, #4]
  410d08:	6802      	ldr	r2, [r0, #0]

00410d0a <.LVL218>:
    int max_code         = desc->max_code;
  410d0a:	6841      	ldr	r1, [r0, #4]

00410d0c <.LVL219>:
    const ct_data *stree = desc->stat_desc->static_tree;
  410d0c:	6883      	ldr	r3, [r0, #8]
  410d0e:	6818      	ldr	r0, [r3, #0]
  410d10:	4683      	mov	fp, r0

00410d12 <.LVL220>:
    const intf *extra    = desc->stat_desc->extra_bits;
  410d12:	6858      	ldr	r0, [r3, #4]

00410d14 <.LVL221>:
  410d14:	9005      	str	r0, [sp, #20]

00410d16 <.LVL222>:
    int base             = desc->stat_desc->extra_base;
  410d16:	6898      	ldr	r0, [r3, #8]

00410d18 <.LVL223>:
  410d18:	9003      	str	r0, [sp, #12]

00410d1a <.LVL224>:
    int max_length       = desc->stat_desc->max_length;
  410d1a:	691b      	ldr	r3, [r3, #16]

00410d1c <.LVL225>:
  410d1c:	f604 303a 	addw	r0, r4, #2874	; 0xb3a

00410d20 <.LVL226>:
  410d20:	f604 375a 	addw	r7, r4, #2906	; 0xb5a
    for (bits = 0; bits <= MAX_BITS; bits++) s->bl_count[bits] = 0;
  410d24:	2600      	movs	r6, #0

00410d26 <.LVL227>:
  410d26:	f820 6f02 	strh.w	r6, [r0, #2]!
  410d2a:	42b8      	cmp	r0, r7
  410d2c:	d1fb      	bne.n	410d26 <.LVL227>
    tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */
  410d2e:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
  410d32:	2000      	movs	r0, #0
  410d34:	f8ae 0002 	strh.w	r0, [lr, #2]
    for (h = s->heap_max+1; h < HEAP_SIZE; h++) {
  410d38:	f241 4054 	movw	r0, #5204	; 0x1454
  410d3c:	5820      	ldr	r0, [r4, r0]

00410d3e <.LVL228>:
  410d3e:	1c46      	adds	r6, r0, #1

00410d40 <.LVL229>:
  410d40:	f5b6 7f0f 	cmp.w	r6, #572	; 0x23c
  410d44:	f300 80b1 	bgt.w	410eaa <.LVL263>
  410d48:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  410d4c:	f600 3c5c 	addw	ip, r0, #2908	; 0xb5c
  410d50:	f241 404c 	movw	r0, #5196	; 0x144c
  410d54:	1820      	adds	r0, r4, r0
  410d56:	f04f 0800 	mov.w	r8, #0
        if (bits > max_length) bits = max_length, overflow++;
  410d5a:	9304      	str	r3, [sp, #16]
        s->opt_len += (ulg)f * (bits + xbits);
  410d5c:	f241 69a8 	movw	r9, #5800	; 0x16a8
  410d60:	44a1      	add	r9, r4
        if (stree) s->static_len += (ulg)f * (stree[n].Len + xbits);
  410d62:	f241 6aac 	movw	sl, #5804	; 0x16ac
  410d66:	44a2      	add	sl, r4
        xbits = 0;
  410d68:	9507      	str	r5, [sp, #28]
  410d6a:	46de      	mov	lr, fp
  410d6c:	9001      	str	r0, [sp, #4]

00410d6e <.LVL230>:
  410d6e:	9402      	str	r4, [sp, #8]
  410d70:	e019      	b.n	410da6 <.LVL236+0x6>

00410d72 <.LVL231>:
  410d72:	2700      	movs	r7, #0

00410d74 <.LVL232>:
        s->opt_len += (ulg)f * (bits + xbits);
  410d74:	f832 5025 	ldrh.w	r5, [r2, r5, lsl #2]

00410d78 <.LVL233>:
  410d78:	4438      	add	r0, r7

00410d7a <.LVL234>:
  410d7a:	f8d9 6000 	ldr.w	r6, [r9]
  410d7e:	fb05 6000 	mla	r0, r5, r0, r6
  410d82:	f8c9 0000 	str.w	r0, [r9]
        if (stree) s->static_len += (ulg)f * (stree[n].Len + xbits);
  410d86:	f1be 0f00 	cmp.w	lr, #0
  410d8a:	d009      	beq.n	410da0 <.LVL236>
  410d8c:	4474      	add	r4, lr
  410d8e:	8860      	ldrh	r0, [r4, #2]
  410d90:	eb00 0b07 	add.w	fp, r0, r7
  410d94:	f8da 0000 	ldr.w	r0, [sl]
  410d98:	fb05 050b 	mla	r5, r5, fp, r0

00410d9c <.LVL235>:
  410d9c:	f8ca 5000 	str.w	r5, [sl]

00410da0 <.LVL236>:
    for (h = s->heap_max+1; h < HEAP_SIZE; h++) {
  410da0:	9801      	ldr	r0, [sp, #4]
  410da2:	4584      	cmp	ip, r0
  410da4:	d020      	beq.n	410de8 <.LVL245>
        n = s->heap[h];
  410da6:	f85c 5f04 	ldr.w	r5, [ip, #4]!

00410daa <.LVL238>:
        bits = tree[tree[n].Dad].Len + 1;
  410daa:	00ac      	lsls	r4, r5, #2
  410dac:	1917      	adds	r7, r2, r4
  410dae:	8878      	ldrh	r0, [r7, #2]
  410db0:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  410db4:	8840      	ldrh	r0, [r0, #2]
  410db6:	3001      	adds	r0, #1

00410db8 <.LVL239>:
        if (bits > max_length) bits = max_length, overflow++;
  410db8:	4283      	cmp	r3, r0
  410dba:	da02      	bge.n	410dc2 <.LVL242>

00410dbc <.LVL240>:
  410dbc:	f108 0801 	add.w	r8, r8, #1
  410dc0:	9804      	ldr	r0, [sp, #16]

00410dc2 <.LVL242>:
        tree[n].Len = (ush)bits;
  410dc2:	8078      	strh	r0, [r7, #2]
        if (n > max_code) continue; /* not a leaf node */
  410dc4:	42a9      	cmp	r1, r5
  410dc6:	dbeb      	blt.n	410da0 <.LVL236>
  410dc8:	9f02      	ldr	r7, [sp, #8]
  410dca:	eb07 0b40 	add.w	fp, r7, r0, lsl #1
        s->bl_count[bits]++;
  410dce:	f8bb 7b3c 	ldrh.w	r7, [fp, #2876]	; 0xb3c
  410dd2:	3701      	adds	r7, #1
  410dd4:	f8ab 7b3c 	strh.w	r7, [fp, #2876]	; 0xb3c

00410dd8 <.LVL243>:
        if (n >= base) xbits = extra[n-base];
  410dd8:	9e03      	ldr	r6, [sp, #12]
  410dda:	42ae      	cmp	r6, r5
  410ddc:	dcc9      	bgt.n	410d72 <.LVL231>
  410dde:	1baf      	subs	r7, r5, r6
  410de0:	9e05      	ldr	r6, [sp, #20]
  410de2:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]

00410de6 <.LVL244>:
  410de6:	e7c5      	b.n	410d74 <.LVL232>

00410de8 <.LVL245>:
  410de8:	9d07      	ldr	r5, [sp, #28]
  410dea:	9c02      	ldr	r4, [sp, #8]
    if (overflow == 0) return;
  410dec:	f1b8 0f00 	cmp.w	r8, #0
  410df0:	d05b      	beq.n	410eaa <.LVL263>
  410df2:	f203 5c9c 	addw	ip, r3, #1436	; 0x59c
  410df6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
  410dfa:	f10c 0e02 	add.w	lr, ip, #2

00410dfe <.LVL246>:
  410dfe:	44a6      	add	lr, r4
  410e00:	eb04 0743 	add.w	r7, r4, r3, lsl #1
        bits = max_length-1;
  410e04:	1e58      	subs	r0, r3, #1

00410e06 <.LVL247>:
        while (s->bl_count[bits] == 0) bits--;
  410e06:	f8b7 6b3a 	ldrh.w	r6, [r7, #2874]	; 0xb3a
  410e0a:	b92e      	cbnz	r6, 410e18 <.LVL247+0x12>
  410e0c:	46f1      	mov	r9, lr
  410e0e:	3801      	subs	r0, #1
  410e10:	f839 6d02 	ldrh.w	r6, [r9, #-2]!
  410e14:	2e00      	cmp	r6, #0
  410e16:	d0fa      	beq.n	410e0e <.LVL247+0x8>
  410e18:	eb04 0040 	add.w	r0, r4, r0, lsl #1

00410e1c <.LVL249>:
        s->bl_count[bits]--;      /* move one leaf down the tree */
  410e1c:	3e01      	subs	r6, #1
  410e1e:	f8a0 6b3c 	strh.w	r6, [r0, #2876]	; 0xb3c
        s->bl_count[bits+1] += 2; /* move one overflow item as its brother */
  410e22:	f8b0 6b3e 	ldrh.w	r6, [r0, #2878]	; 0xb3e
  410e26:	3602      	adds	r6, #2
  410e28:	f8a0 6b3e 	strh.w	r6, [r0, #2878]	; 0xb3e
        s->bl_count[max_length]--;
  410e2c:	f8b7 0b3c 	ldrh.w	r0, [r7, #2876]	; 0xb3c
  410e30:	3801      	subs	r0, #1
  410e32:	f8a7 0b3c 	strh.w	r0, [r7, #2876]	; 0xb3c
        overflow -= 2;
  410e36:	f1a8 0802 	sub.w	r8, r8, #2
    } while (overflow > 0);
  410e3a:	f1b8 0f00 	cmp.w	r8, #0
  410e3e:	dce1      	bgt.n	410e04 <.LVL246+0x6>

00410e40 <.LVL251>:
    for (bits = max_length; bits != 0; bits--) {
  410e40:	b39b      	cbz	r3, 410eaa <.LVL263>
  410e42:	f10c 0c06 	add.w	ip, ip, #6
  410e46:	eb04 0b0c 	add.w	fp, r4, ip
    for (h = s->heap_max+1; h < HEAP_SIZE; h++) {
  410e4a:	f240 283d 	movw	r8, #573	; 0x23d

00410e4e <.LVL252>:
                s->opt_len += ((long)bits - (long)tree[m].Len)
  410e4e:	f241 6aa8 	movw	sl, #5800	; 0x16a8
  410e52:	44a2      	add	sl, r4
  410e54:	469c      	mov	ip, r3
  410e56:	e01e      	b.n	410e96 <.LVL261>

00410e58 <.LVL253>:
            n--;
  410e58:	3b01      	subs	r3, #1
        while (n != 0) {
  410e5a:	b1c3      	cbz	r3, 410e8e <.LVL258+0x6>
            m = s->heap[--h];
  410e5c:	f108 38ff 	add.w	r8, r8, #4294967295
  410e60:	f857 0d04 	ldr.w	r0, [r7, #-4]!

00410e64 <.LVL256>:
            if (m > max_code) continue;
  410e64:	4281      	cmp	r1, r0
  410e66:	dbf8      	blt.n	410e5a <.LVL253+0x2>
            if ((unsigned) tree[m].Len != (unsigned) bits) {
  410e68:	eb02 0680 	add.w	r6, r2, r0, lsl #2
  410e6c:	f8b6 e002 	ldrh.w	lr, [r6, #2]
  410e70:	45e6      	cmp	lr, ip
  410e72:	d0f1      	beq.n	410e58 <.LVL253>
                s->opt_len += ((long)bits - (long)tree[m].Len)
  410e74:	ebac 0e0e 	sub.w	lr, ip, lr
                              *(long)tree[m].Freq;
  410e78:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]

00410e7c <.LVL257>:
                s->opt_len += ((long)bits - (long)tree[m].Len)
  410e7c:	f8da 4000 	ldr.w	r4, [sl]
  410e80:	fb00 400e 	mla	r0, r0, lr, r4
  410e84:	f8ca 0000 	str.w	r0, [sl]

00410e88 <.LVL258>:
                tree[m].Len = (ush)bits;
  410e88:	f8a6 c002 	strh.w	ip, [r6, #2]
  410e8c:	e7e4      	b.n	410e58 <.LVL253>
  410e8e:	464c      	mov	r4, r9

00410e90 <.LVL259>:
    for (bits = max_length; bits != 0; bits--) {
  410e90:	f1bc 0c01 	subs.w	ip, ip, #1

00410e94 <.LVL260>:
  410e94:	d009      	beq.n	410eaa <.LVL263>

00410e96 <.LVL261>:
        n = s->bl_count[bits];
  410e96:	f83b 3d02 	ldrh.w	r3, [fp, #-2]!

00410e9a <.LVL262>:
        while (n != 0) {
  410e9a:	2b00      	cmp	r3, #0
  410e9c:	d0f8      	beq.n	410e90 <.LVL259>
  410e9e:	eb04 0788 	add.w	r7, r4, r8, lsl #2
  410ea2:	f607 375c 	addw	r7, r7, #2908	; 0xb5c
  410ea6:	46a1      	mov	r9, r4
  410ea8:	e7d8      	b.n	410e5c <.LVL253+0x4>

00410eaa <.LVL263>:
  410eaa:	f604 343a 	addw	r4, r4, #2874	; 0xb3a

00410eae <.LVL264>:
  410eae:	f10d 0122 	add.w	r1, sp, #34	; 0x22
  410eb2:	a810      	add	r0, sp, #64	; 0x40

00410eb4 <.LBB56>:
    ush code = 0;              /* running code value */
  410eb4:	2300      	movs	r3, #0

00410eb6 <.LVL265>:
        next_code[bits] = code = (code + bl_count[bits-1]) << 1;
  410eb6:	f834 2f02 	ldrh.w	r2, [r4, #2]!
  410eba:	4413      	add	r3, r2

00410ebc <.LVL266>:
  410ebc:	b29b      	uxth	r3, r3
  410ebe:	005b      	lsls	r3, r3, #1
  410ec0:	b29b      	uxth	r3, r3

00410ec2 <.LVL267>:
  410ec2:	f821 3b02 	strh.w	r3, [r1], #2
    for (bits = 1; bits <= MAX_BITS; bits++) {
  410ec6:	4288      	cmp	r0, r1
  410ec8:	d1f5      	bne.n	410eb6 <.LVL265>

00410eca <.LVL268>:
    for (n = 0;  n <= max_code; n++) {
  410eca:	9b06      	ldr	r3, [sp, #24]

00410ecc <.LVL269>:
  410ecc:	2b00      	cmp	r3, #0
  410ece:	db1f      	blt.n	410f10 <.LBE56>
  410ed0:	462e      	mov	r6, r5
  410ed2:	2400      	movs	r4, #0

00410ed4 <.LBB58>:
 */
local unsigned bi_reverse(code, len)
    unsigned code; /* the value to invert */
    int len;       /* its bit length */
{
    register unsigned res = 0;
  410ed4:	4627      	mov	r7, r4
  410ed6:	469e      	mov	lr, r3
  410ed8:	e003      	b.n	410ee2 <.LBB63>

00410eda <.LBE58>:
    for (n = 0;  n <= max_code; n++) {
  410eda:	3401      	adds	r4, #1
  410edc:	3604      	adds	r6, #4
  410ede:	45a6      	cmp	lr, r4
  410ee0:	db16      	blt.n	410f10 <.LBE56>

00410ee2 <.LBB63>:
        int len = tree[n].Len;
  410ee2:	8872      	ldrh	r2, [r6, #2]

00410ee4 <.LVL273>:
        if (len == 0) continue;
  410ee4:	2a00      	cmp	r2, #0
  410ee6:	d0f8      	beq.n	410eda <.LBE58>
        tree[n].Code = bi_reverse(next_code[len]++, len);
  410ee8:	ab10      	add	r3, sp, #64	; 0x40
  410eea:	eb03 0342 	add.w	r3, r3, r2, lsl #1
  410eee:	f833 1c20 	ldrh.w	r1, [r3, #-32]
  410ef2:	1c48      	adds	r0, r1, #1
  410ef4:	f823 0c20 	strh.w	r0, [r3, #-32]

00410ef8 <.LBB62>:
    register unsigned res = 0;
  410ef8:	4638      	mov	r0, r7

00410efa <.LVL275>:
    do {
        res |= code & 1;
  410efa:	f001 0301 	and.w	r3, r1, #1
  410efe:	4303      	orrs	r3, r0

00410f00 <.LVL276>:
        code >>= 1, res <<= 1;
  410f00:	0849      	lsrs	r1, r1, #1
  410f02:	0058      	lsls	r0, r3, #1

00410f04 <.LVL278>:
    } while (--len > 0);
  410f04:	3a01      	subs	r2, #1
  410f06:	2a00      	cmp	r2, #0
  410f08:	dcf7      	bgt.n	410efa <.LVL275>

00410f0a <.LBE62>:
        tree[n].Code = bi_reverse(next_code[len]++, len);
  410f0a:	f825 3024 	strh.w	r3, [r5, r4, lsl #2]

00410f0e <.LVL281>:
  410f0e:	e7e4      	b.n	410eda <.LBE58>

00410f10 <.LBE56>:
}
  410f10:	b011      	add	sp, #68	; 0x44

00410f12 <.LCFI13>:
  410f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section .text.wc_ecc_mulmod_ex%60:

00410f16 <wc_ecc_mulmod_ex>:
{
  410f16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00410f1a <.LCFI34>:
  410f1a:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274

00410f1e <.LCFI35>:
   if (k == NULL || G == NULL || R == NULL || modulus == NULL) {
  410f1e:	2800      	cmp	r0, #0
  410f20:	f000 8197 	beq.w	411252 <.LVL639>
  410f24:	4604      	mov	r4, r0
  410f26:	2900      	cmp	r1, #0
  410f28:	f000 8193 	beq.w	411252 <.LVL639>
  410f2c:	2a00      	cmp	r2, #0
  410f2e:	f000 8193 	beq.w	411258 <.LVL640>
  410f32:	98a6      	ldr	r0, [sp, #664]	; 0x298

00410f34 <.LVL529>:
  410f34:	2800      	cmp	r0, #0
  410f36:	f000 818f 	beq.w	411258 <.LVL640>
  410f3a:	9404      	str	r4, [sp, #16]
  410f3c:	9302      	str	r3, [sp, #8]
  410f3e:	9203      	str	r2, [sp, #12]
  410f40:	460f      	mov	r7, r1

00410f42 <.LVL530>:
   XMEMSET(M, 0, sizeof(M));
  410f42:	2220      	movs	r2, #32

00410f44 <.LVL531>:
  410f44:	2100      	movs	r1, #0

00410f46 <.LVL532>:
  410f46:	a894      	add	r0, sp, #592	; 0x250
  410f48:	f008 ff2a 	bl	419da0 <.LFE166>

00410f4c <.LVL533>:
   if ((err = mp_montgomery_setup(modulus, &mp)) != MP_OKAY) {
  410f4c:	a909      	add	r1, sp, #36	; 0x24
  410f4e:	98a6      	ldr	r0, [sp, #664]	; 0x298
  410f50:	f00c ff2c 	bl	41ddac <.LFE98>

00410f54 <.LVL534>:
  410f54:	4604      	mov	r4, r0

00410f56 <.LVL535>:
  410f56:	b120      	cbz	r0, 410f62 <.LCFI37>

00410f58 <.LVL536>:
}
  410f58:	4620      	mov	r0, r4
  410f5a:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274

00410f5e <.LCFI36>:
  410f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00410f62 <.LCFI37>:
   if ((err = mp_init(&mu)) != MP_OKAY) {
  410f62:	a80a      	add	r0, sp, #40	; 0x28

00410f64 <.LVL538>:
  410f64:	f00c fdc4 	bl	41daf0 <.LFE202>

00410f68 <.LVL539>:
  410f68:	4604      	mov	r4, r0
  410f6a:	2800      	cmp	r0, #0
  410f6c:	d1f4      	bne.n	410f58 <.LVL536>
   if ((err = mp_montgomery_calc_normalization(&mu, modulus)) != MP_OKAY) {
  410f6e:	99a6      	ldr	r1, [sp, #664]	; 0x298
  410f70:	a80a      	add	r0, sp, #40	; 0x28

00410f72 <.LVL540>:
  410f72:	f00c fea4 	bl	41dcbe <.LFE95>

00410f76 <.LVL541>:
  410f76:	4604      	mov	r4, r0
  410f78:	2800      	cmp	r0, #0
  410f7a:	d139      	bne.n	410ff0 <.LVL555>
  410f7c:	ad93      	add	r5, sp, #588	; 0x24c
  410f7e:	f50d 781b 	add.w	r8, sp, #620	; 0x26c
  410f82:	46a9      	mov	r9, r5

00410f84 <.LVL542>:
      M[i] = wc_ecc_new_point_h(heap);
  410f84:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
  410f86:	f00b fc55 	bl	41c834 <.LBE32>

00410f8a <.LVL543>:
  410f8a:	f849 0f04 	str.w	r0, [r9, #4]!
      if (M[i] == NULL) {
  410f8e:	2800      	cmp	r0, #0
  410f90:	d032      	beq.n	410ff8 <.LVL557+0x2>
  for (i = 0; i < M_POINTS; i++) {
  410f92:	45c1      	cmp	r9, r8
  410f94:	d1f6      	bne.n	410f84 <.LVL542>
   tG = wc_ecc_new_point_h(heap);
  410f96:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
  410f98:	f00b fc4c 	bl	41c834 <.LBE32>

00410f9c <.LVL545>:
   if (tG == NULL)
  410f9c:	4606      	mov	r6, r0
  410f9e:	2800      	cmp	r0, #0
  410fa0:	f000 816e 	beq.w	411280 <.LVL651>

00410fa4 <.LVL546>:
       if (mp_cmp_d(&mu, 1) == MP_EQ) {
  410fa4:	2101      	movs	r1, #1
  410fa6:	a80a      	add	r0, sp, #40	; 0x28

00410fa8 <.LVL547>:
  410fa8:	f00c fedc 	bl	41dd64 <.LFE81>

00410fac <.LVL548>:
  410fac:	2800      	cmp	r0, #0
  410fae:	d035      	beq.n	41101c <.LVL562>
           err = mp_mulmod(G->x, &mu, modulus, tG->x);
  410fb0:	4633      	mov	r3, r6
  410fb2:	9aa6      	ldr	r2, [sp, #664]	; 0x298
  410fb4:	a90a      	add	r1, sp, #40	; 0x28
  410fb6:	4638      	mov	r0, r7
  410fb8:	f00c fee0 	bl	41dd7c <.LFE79>

00410fbc <.LVL549>:
           if (err == MP_OKAY)
  410fbc:	4604      	mov	r4, r0
  410fbe:	2800      	cmp	r0, #0
  410fc0:	f040 8160 	bne.w	411284 <.LVL652>
               err = mp_mulmod(G->y, &mu, modulus, tG->y);
  410fc4:	f506 730a 	add.w	r3, r6, #552	; 0x228
  410fc8:	9aa6      	ldr	r2, [sp, #664]	; 0x298
  410fca:	a90a      	add	r1, sp, #40	; 0x28
  410fcc:	f507 700a 	add.w	r0, r7, #552	; 0x228

00410fd0 <.LVL550>:
  410fd0:	f00c fed4 	bl	41dd7c <.LFE79>

00410fd4 <.LVL551>:
           if (err == MP_OKAY)
  410fd4:	4604      	mov	r4, r0
  410fd6:	2800      	cmp	r0, #0
  410fd8:	f040 8141 	bne.w	41125e <.LVL642>
               err = mp_mulmod(G->z, &mu, modulus, tG->z);
  410fdc:	f506 638a 	add.w	r3, r6, #1104	; 0x450
  410fe0:	9aa6      	ldr	r2, [sp, #664]	; 0x298
  410fe2:	a90a      	add	r1, sp, #40	; 0x28
  410fe4:	f507 608a 	add.w	r0, r7, #1104	; 0x450

00410fe8 <.LVL552>:
  410fe8:	f00c fec8 	bl	41dd7c <.LFE79>

00410fec <.LVL553>:
  410fec:	4604      	mov	r4, r0

00410fee <.LVL554>:
  410fee:	e02e      	b.n	41104e <.LVL568>

00410ff0 <.LVL555>:
       mp_clear(&mu);
  410ff0:	a80a      	add	r0, sp, #40	; 0x28

00410ff2 <.LVL556>:
  410ff2:	f00c fdf4 	bl	41dbde <.LFE179>

00410ff6 <.LVL557>:
       return err;
  410ff6:	e7af      	b.n	410f58 <.LVL536>
  410ff8:	4606      	mov	r6, r0
         mp_clear(&mu);
  410ffa:	a80a      	add	r0, sp, #40	; 0x28
  410ffc:	f00c fdef 	bl	41dbde <.LFE179>

00411000 <.LVL558>:
         err = MEMORY_E; goto exit;
  411000:	f06f 047c 	mvn.w	r4, #124	; 0x7c

00411004 <.L262>:
   wc_ecc_del_point_h(tG, heap);
  411004:	99a8      	ldr	r1, [sp, #672]	; 0x2a0
  411006:	4630      	mov	r0, r6
  411008:	f00c f9dd 	bl	41d3c6 <.LFE193>

0041100c <.LVL560>:
       wc_ecc_del_point_h(M[i], heap);
  41100c:	99a8      	ldr	r1, [sp, #672]	; 0x2a0
  41100e:	f855 0f04 	ldr.w	r0, [r5, #4]!
  411012:	f00c f9d8 	bl	41d3c6 <.LFE193>

00411016 <.LVL561>:
   for (i = 0; i < M_POINTS; i++) {
  411016:	4545      	cmp	r5, r8
  411018:	d1f8      	bne.n	41100c <.LVL560>
  41101a:	e79d      	b.n	410f58 <.LVL536>

0041101c <.LVL562>:
           err = mp_copy(G->x, tG->x);
  41101c:	4631      	mov	r1, r6
  41101e:	4638      	mov	r0, r7
  411020:	f00c fe43 	bl	41dcaa <.LFE85>

00411024 <.LVL563>:
           if (err == MP_OKAY)
  411024:	4604      	mov	r4, r0
  411026:	2800      	cmp	r0, #0
  411028:	f040 812c 	bne.w	411284 <.LVL652>
               err = mp_copy(G->y, tG->y);
  41102c:	f506 710a 	add.w	r1, r6, #552	; 0x228
  411030:	f507 700a 	add.w	r0, r7, #552	; 0x228

00411034 <.LVL564>:
  411034:	f00c fe39 	bl	41dcaa <.LFE85>

00411038 <.LVL565>:
           if (err == MP_OKAY)
  411038:	4604      	mov	r4, r0
  41103a:	2800      	cmp	r0, #0
  41103c:	f040 810f 	bne.w	41125e <.LVL642>
               err = mp_copy(G->z, tG->z);
  411040:	f506 618a 	add.w	r1, r6, #1104	; 0x450
  411044:	f507 608a 	add.w	r0, r7, #1104	; 0x450

00411048 <.LVL566>:
  411048:	f00c fe2f 	bl	41dcaa <.LFE85>

0041104c <.LVL567>:
  41104c:	4604      	mov	r4, r0

0041104e <.LVL568>:
   mp_clear(&mu);
  41104e:	a80a      	add	r0, sp, #40	; 0x28

00411050 <.LVL569>:
  411050:	f00c fdc5 	bl	41dbde <.LFE179>

00411054 <.LVL570>:
   if (err == MP_OKAY)
  411054:	2c00      	cmp	r4, #0
  411056:	f040 8118 	bne.w	41128a <.LVL653>
       err = ecc_projective_dbl_point(tG, M[0], a, modulus, mp);
  41105a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41105c:	9300      	str	r3, [sp, #0]
  41105e:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  411060:	9a02      	ldr	r2, [sp, #8]
  411062:	9994      	ldr	r1, [sp, #592]	; 0x250
  411064:	4630      	mov	r0, r6
  411066:	f001 fa1f 	bl	4124a8 <.LFE25>

0041106a <.LVL571>:
  41106a:	4604      	mov	r4, r0
   if (err == MP_OKAY)
  41106c:	2c00      	cmp	r4, #0
  41106e:	f040 80fb 	bne.w	411268 <.LVL646>
       err = ecc_projective_dbl_point(M[0], M[0], a, modulus, mp);
  411072:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411074:	9300      	str	r3, [sp, #0]
  411076:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  411078:	9a02      	ldr	r2, [sp, #8]
  41107a:	9994      	ldr	r1, [sp, #592]	; 0x250
  41107c:	4608      	mov	r0, r1
  41107e:	f001 fa13 	bl	4124a8 <.LFE25>

00411082 <.LVL573>:
  411082:	4604      	mov	r4, r0

00411084 <.LVL574>:
  411084:	e101      	b.n	41128a <.LVL653>

00411086 <.LVL575>:
       err = ecc_projective_dbl_point(M[0], M[0], a, modulus, mp);
  411086:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411088:	9300      	str	r3, [sp, #0]
  41108a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  41108c:	9a02      	ldr	r2, [sp, #8]
  41108e:	9994      	ldr	r1, [sp, #592]	; 0x250
  411090:	4608      	mov	r0, r1
  411092:	f001 fa09 	bl	4124a8 <.LFE25>

00411096 <.LVL576>:
   if (err == MP_OKAY)
  411096:	4604      	mov	r4, r0
  411098:	2800      	cmp	r0, #0
  41109a:	f040 80e5 	bne.w	411268 <.LVL646>
  41109e:	ac94      	add	r4, sp, #592	; 0x250
           err = ecc_projective_add_point(M[j-9], tG, M[j-M_POINTS], a,
  4110a0:	9fa6      	ldr	r7, [sp, #664]	; 0x298

004110a2 <.LVL577>:
  4110a2:	6820      	ldr	r0, [r4, #0]
  4110a4:	f854 2f04 	ldr.w	r2, [r4, #4]!
  4110a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4110aa:	9301      	str	r3, [sp, #4]
  4110ac:	9700      	str	r7, [sp, #0]
  4110ae:	9b02      	ldr	r3, [sp, #8]
  4110b0:	4631      	mov	r1, r6
  4110b2:	f7fc fc0f 	bl	40d8d4 <.LFE14>

004110b6 <.LVL578>:
           if (err != MP_OKAY) break;
  4110b6:	2800      	cmp	r0, #0
  4110b8:	f040 80d5 	bne.w	411266 <.LVL645>

004110bc <.LVL579>:
       for (j = 9; j < 16; j++) {
  4110bc:	45a1      	cmp	r9, r4
  4110be:	d1f0      	bne.n	4110a2 <.LVL577>
  4110c0:	4607      	mov	r7, r0

004110c2 <.LVL580>:
       digidx = get_digit_count(k) - 1;
  4110c2:	9804      	ldr	r0, [sp, #16]
  4110c4:	f00c fe14 	bl	41dcf0 <.LFE115>

004110c8 <.LVL581>:
  4110c8:	1e43      	subs	r3, r0, #1
  4110ca:	9306      	str	r3, [sp, #24]

004110cc <.LVL582>:
       mode   = 0;
  4110cc:	9705      	str	r7, [sp, #20]
       bitcpy = bitbuf = 0;
  4110ce:	46bb      	mov	fp, r7
       bitcnt = 1;
  4110d0:	2401      	movs	r4, #1
       buf    = 0;
  4110d2:	f04f 0a00 	mov.w	sl, #0
       first  = 1;
  4110d6:	46a1      	mov	r9, r4
                   err = mp_copy(M[bitbuf-M_POINTS]->y, R->y);
  4110d8:	9b03      	ldr	r3, [sp, #12]

004110da <.LVL583>:
  4110da:	f503 730a 	add.w	r3, r3, #552	; 0x228
  4110de:	9307      	str	r3, [sp, #28]
  4110e0:	e008      	b.n	4110f4 <.LVL587>

004110e2 <.LVL584>:
           i = (int)(buf >> (DIGIT_BIT - 1)) & 1;
  4110e2:	ea4f 73da 	mov.w	r3, sl, lsr #31

004110e6 <.LVL585>:
           buf <<= 1;
  4110e6:	ea4f 0a4a 	mov.w	sl, sl, lsl #1

004110ea <.LVL586>:
           if (mode == 0 && i == 0)
  4110ea:	f083 0201 	eor.w	r2, r3, #1
  4110ee:	9905      	ldr	r1, [sp, #20]
  4110f0:	b989      	cbnz	r1, 411116 <.LVL593>
  4110f2:	b182      	cbz	r2, 411116 <.LVL593>

004110f4 <.LVL587>:
           if (--bitcnt == 0) {
  4110f4:	3c01      	subs	r4, #1

004110f6 <.LVL588>:
  4110f6:	d1f4      	bne.n	4110e2 <.LVL584>

004110f8 <.LVL589>:
               if (digidx == -1) {
  4110f8:	9a06      	ldr	r2, [sp, #24]
  4110fa:	f1b2 3fff 	cmp.w	r2, #4294967295
  4110fe:	f000 80d5 	beq.w	4112ac <.LVL657>
               buf    = get_digit(k, digidx);
  411102:	4614      	mov	r4, r2
  411104:	4611      	mov	r1, r2
  411106:	9804      	ldr	r0, [sp, #16]
  411108:	f00c faaf 	bl	41d66a <.LFE49>

0041110c <.LVL590>:
  41110c:	4682      	mov	sl, r0

0041110e <.LVL591>:
               --digidx;
  41110e:	1e63      	subs	r3, r4, #1
  411110:	9306      	str	r3, [sp, #24]

00411112 <.LVL592>:
               bitcnt = (int) DIGIT_BIT;
  411112:	2420      	movs	r4, #32
  411114:	e7e5      	b.n	4110e2 <.LVL584>

00411116 <.LVL593>:
           if (mode == 1 && i == 0) {
  411116:	9905      	ldr	r1, [sp, #20]
  411118:	2901      	cmp	r1, #1
  41111a:	d100      	bne.n	41111e <.LVL593+0x8>
  41111c:	b95a      	cbnz	r2, 411136 <.LVL597>
           bitbuf |= (i << (WINSIZE - ++bitcpy));
  41111e:	f10b 0b01 	add.w	fp, fp, #1
  411122:	f1cb 0204 	rsb	r2, fp, #4
  411126:	4093      	lsls	r3, r2

00411128 <.LVL595>:
  411128:	431f      	orrs	r7, r3

0041112a <.LVL596>:
           if (bitcpy == WINSIZE) {
  41112a:	f1bb 0f04 	cmp.w	fp, #4
  41112e:	d00f      	beq.n	411150 <.LVL603>
           mode = 2;
  411130:	2302      	movs	r3, #2
  411132:	9305      	str	r3, [sp, #20]
  411134:	e7de      	b.n	4110f4 <.LVL587>

00411136 <.LVL597>:
               err = ecc_projective_dbl_point(R, R, a, modulus, mp);
  411136:	9b09      	ldr	r3, [sp, #36]	; 0x24

00411138 <.LVL598>:
  411138:	9300      	str	r3, [sp, #0]
  41113a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  41113c:	9a02      	ldr	r2, [sp, #8]

0041113e <.LVL599>:
  41113e:	9803      	ldr	r0, [sp, #12]
  411140:	4601      	mov	r1, r0
  411142:	f001 f9b1 	bl	4124a8 <.LFE25>

00411146 <.LVL600>:
               if (err != MP_OKAY) break;
  411146:	4603      	mov	r3, r0
  411148:	2800      	cmp	r0, #0
  41114a:	d0d3      	beq.n	4110f4 <.LVL587>

0041114c <.LVL601>:
         err = MEMORY_E; goto exit;
  41114c:	461c      	mov	r4, r3

0041114e <.LVL602>:
  41114e:	e759      	b.n	411004 <.L262>

00411150 <.LVL603>:
               if (first == 1) {
  411150:	f1b9 0f01 	cmp.w	r9, #1
  411154:	d026      	beq.n	4111a4 <.LVL612>
  411156:	f04f 0904 	mov.w	r9, #4

0041115a <.LVL604>:
                       err = ecc_projective_dbl_point(R, R, a, modulus, mp);
  41115a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41115c:	9300      	str	r3, [sp, #0]
  41115e:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  411160:	9a02      	ldr	r2, [sp, #8]
  411162:	9803      	ldr	r0, [sp, #12]
  411164:	4601      	mov	r1, r0
  411166:	f001 f99f 	bl	4124a8 <.LFE25>

0041116a <.LVL605>:
                       if (err != MP_OKAY) break;
  41116a:	2800      	cmp	r0, #0
  41116c:	d17e      	bne.n	41126c <.LVL647>

0041116e <.LVL606>:
                   for (j = 0; j < WINSIZE; j++) {
  41116e:	f1b9 0901 	subs.w	r9, r9, #1

00411172 <.LVL607>:
  411172:	d1f2      	bne.n	41115a <.LVL604>
                   err = ecc_projective_add_point(R, M[bitbuf-M_POINTS], R, a,
  411174:	ab9c      	add	r3, sp, #624	; 0x270
  411176:	eb03 0787 	add.w	r7, r3, r7, lsl #2

0041117a <.LVL608>:
  41117a:	f857 1c40 	ldr.w	r1, [r7, #-64]
  41117e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411180:	9301      	str	r3, [sp, #4]
  411182:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  411184:	9300      	str	r3, [sp, #0]
  411186:	9b02      	ldr	r3, [sp, #8]
  411188:	9803      	ldr	r0, [sp, #12]
  41118a:	4602      	mov	r2, r0
  41118c:	f7fc fba2 	bl	40d8d4 <.LFE14>

00411190 <.LVL609>:
  411190:	4681      	mov	r9, r0

00411192 <.LVL610>:
               if (err != MP_OKAY) break;
  411192:	f1b9 0f00 	cmp.w	r9, #0
  411196:	f040 809f 	bne.w	4112d8 <.LVL662>
               bitcpy = bitbuf = 0;
  41119a:	46cb      	mov	fp, r9

0041119c <.LVL611>:
  41119c:	464f      	mov	r7, r9
               mode = 1;
  41119e:	2301      	movs	r3, #1
  4111a0:	9305      	str	r3, [sp, #20]
  4111a2:	e7a7      	b.n	4110f4 <.LVL587>

004111a4 <.LVL612>:
                   err = mp_copy(M[bitbuf-M_POINTS]->x, R->x);
  4111a4:	ab9c      	add	r3, sp, #624	; 0x270
  4111a6:	eb03 0787 	add.w	r7, r3, r7, lsl #2

004111aa <.LVL613>:
  4111aa:	f857 7c40 	ldr.w	r7, [r7, #-64]
  4111ae:	f8dd 900c 	ldr.w	r9, [sp, #12]

004111b2 <.LVL614>:
  4111b2:	4649      	mov	r1, r9
  4111b4:	4638      	mov	r0, r7
  4111b6:	f00c fd78 	bl	41dcaa <.LFE85>

004111ba <.LVL615>:
                   if (err != MP_OKAY) break;
  4111ba:	4603      	mov	r3, r0
  4111bc:	2800      	cmp	r0, #0
  4111be:	d1c5      	bne.n	41114c <.LVL601>
                   err = mp_copy(M[bitbuf-M_POINTS]->y, R->y);
  4111c0:	9907      	ldr	r1, [sp, #28]
  4111c2:	f507 700a 	add.w	r0, r7, #552	; 0x228

004111c6 <.LVL616>:
  4111c6:	f00c fd70 	bl	41dcaa <.LFE85>

004111ca <.LVL617>:
                   if (err != MP_OKAY) break;
  4111ca:	4603      	mov	r3, r0
  4111cc:	2800      	cmp	r0, #0
  4111ce:	d1bd      	bne.n	41114c <.LVL601>
                   err = mp_copy(M[bitbuf-M_POINTS]->z, R->z);
  4111d0:	f509 618a 	add.w	r1, r9, #1104	; 0x450
  4111d4:	f507 608a 	add.w	r0, r7, #1104	; 0x450

004111d8 <.LVL618>:
  4111d8:	f00c fd67 	bl	41dcaa <.LFE85>

004111dc <.LVL619>:
  4111dc:	4681      	mov	r9, r0

004111de <.LVL620>:
  4111de:	e7d8      	b.n	411192 <.LVL610>

004111e0 <.LVL621>:
                   err = ecc_projective_dbl_point(R, R, a, modulus, mp);
  4111e0:	9b09      	ldr	r3, [sp, #36]	; 0x24

004111e2 <.LVL622>:
  4111e2:	9300      	str	r3, [sp, #0]
  4111e4:	4623      	mov	r3, r4
  4111e6:	9a02      	ldr	r2, [sp, #8]
  4111e8:	4649      	mov	r1, r9
  4111ea:	4648      	mov	r0, r9
  4111ec:	f001 f95c 	bl	4124a8 <.LFE25>

004111f0 <.LVL623>:
                   if (err != MP_OKAY) break;
  4111f0:	2800      	cmp	r0, #0
  4111f2:	d13d      	bne.n	411270 <.LVL649>

004111f4 <.LVL624>:
               bitbuf <<= 1;
  4111f4:	007f      	lsls	r7, r7, #1

004111f6 <.LVL625>:
               if ((bitbuf & (1 << WINSIZE)) != 0) {
  4111f6:	f017 0310 	ands.w	r3, r7, #16

004111fa <.LVL626>:
  4111fa:	d00a      	beq.n	411212 <.LVL629>
                       err = ecc_projective_add_point(R, tG, R, a, modulus,
  4111fc:	9b09      	ldr	r3, [sp, #36]	; 0x24

004111fe <.LVL627>:
  4111fe:	9301      	str	r3, [sp, #4]
  411200:	9400      	str	r4, [sp, #0]
  411202:	9b02      	ldr	r3, [sp, #8]
  411204:	464a      	mov	r2, r9
  411206:	4631      	mov	r1, r6
  411208:	4648      	mov	r0, r9
  41120a:	f7fc fb63 	bl	40d8d4 <.LFE14>

0041120e <.LVL628>:
                       if (err != MP_OKAY) break;
  41120e:	4603      	mov	r3, r0
  411210:	bba0      	cbnz	r0, 41127c <.LVL650>

00411212 <.LVL629>:
           for (j = 0; j < bitcpy; j++) {
  411212:	f10a 0a01 	add.w	sl, sl, #1
  411216:	45d3      	cmp	fp, sl
  411218:	d019      	beq.n	41124e <.LVL638>
               if (first == 0) {
  41121a:	2b00      	cmp	r3, #0
  41121c:	d0e0      	beq.n	4111e0 <.LVL621>
               bitbuf <<= 1;
  41121e:	007f      	lsls	r7, r7, #1
               if ((bitbuf & (1 << WINSIZE)) != 0) {
  411220:	f017 0f10 	tst.w	r7, #16
  411224:	d0f5      	beq.n	411212 <.LVL629>
                       err = mp_copy(tG->x, R->x);
  411226:	4649      	mov	r1, r9
  411228:	4630      	mov	r0, r6
  41122a:	f00c fd3e 	bl	41dcaa <.LFE85>

0041122e <.LVL633>:
                       if (err != MP_OKAY) break;
  41122e:	bb08      	cbnz	r0, 411274 <.LVL649+0x4>
                       err = mp_copy(tG->y, R->y);
  411230:	9904      	ldr	r1, [sp, #16]
  411232:	9805      	ldr	r0, [sp, #20]

00411234 <.LVL634>:
  411234:	f00c fd39 	bl	41dcaa <.LFE85>

00411238 <.LVL635>:
                       if (err != MP_OKAY) break;
  411238:	b9f0      	cbnz	r0, 411278 <.LVL649+0x8>
                       err = mp_copy(tG->z, R->z);
  41123a:	9906      	ldr	r1, [sp, #24]
  41123c:	f506 608a 	add.w	r0, r6, #1104	; 0x450

00411240 <.LVL636>:
  411240:	f00c fd33 	bl	41dcaa <.LFE85>

00411244 <.LVL637>:
                       if (err != MP_OKAY) break;
  411244:	4603      	mov	r3, r0
  411246:	2800      	cmp	r0, #0
  411248:	d0e3      	beq.n	411212 <.LVL629>
                       err = mp_copy(tG->z, R->z);
  41124a:	4604      	mov	r4, r0
  41124c:	e6da      	b.n	411004 <.L262>

0041124e <.LVL638>:
  41124e:	9c07      	ldr	r4, [sp, #28]
  411250:	e01e      	b.n	411290 <.LVL654>

00411252 <.LVL639>:
       return ECC_BAD_ARG_E;
  411252:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
  411256:	e67f      	b.n	410f58 <.LVL536>

00411258 <.LVL640>:
  411258:	f06f 04a9 	mvn.w	r4, #169	; 0xa9

0041125c <.LVL641>:
  41125c:	e67c      	b.n	410f58 <.LVL536>

0041125e <.LVL642>:
   mp_clear(&mu);
  41125e:	a80a      	add	r0, sp, #40	; 0x28

00411260 <.LVL643>:
  411260:	f00c fcbd 	bl	41dbde <.LFE179>

00411264 <.LVL644>:
  411264:	e702      	b.n	41106c <.LVL571+0x2>

00411266 <.LVL645>:
           err = ecc_projective_add_point(M[j-9], tG, M[j-M_POINTS], a,
  411266:	4604      	mov	r4, r0

00411268 <.LVL646>:
   if (err == MP_OKAY) {
  411268:	b194      	cbz	r4, 411290 <.LVL654>
  41126a:	e6cb      	b.n	411004 <.L262>

0041126c <.LVL647>:
                       err = ecc_projective_dbl_point(R, R, a, modulus, mp);
  41126c:	4604      	mov	r4, r0

0041126e <.LVL648>:
  41126e:	e6c9      	b.n	411004 <.L262>

00411270 <.LVL649>:
                   err = ecc_projective_dbl_point(R, R, a, modulus, mp);
  411270:	4604      	mov	r4, r0
  411272:	e6c7      	b.n	411004 <.L262>
                       err = mp_copy(tG->x, R->x);
  411274:	4604      	mov	r4, r0
  411276:	e6c5      	b.n	411004 <.L262>
                       err = mp_copy(tG->y, R->y);
  411278:	4604      	mov	r4, r0
  41127a:	e6c3      	b.n	411004 <.L262>

0041127c <.LVL650>:
                       err = ecc_projective_add_point(R, tG, R, a, modulus,
  41127c:	4604      	mov	r4, r0
  41127e:	e6c1      	b.n	411004 <.L262>

00411280 <.LVL651>:
       err = MEMORY_E;
  411280:	f06f 047c 	mvn.w	r4, #124	; 0x7c

00411284 <.LVL652>:
   mp_clear(&mu);
  411284:	a80a      	add	r0, sp, #40	; 0x28
  411286:	f00c fcaa 	bl	41dbde <.LFE179>

0041128a <.LVL653>:
   if (err == MP_OKAY)
  41128a:	2c00      	cmp	r4, #0
  41128c:	f43f aefb 	beq.w	411086 <.LVL575>

00411290 <.LVL654>:
   if (err == MP_OKAY && map)
  411290:	2c00      	cmp	r4, #0
  411292:	f47f aeb7 	bne.w	411004 <.L262>
  411296:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
  411298:	2b00      	cmp	r3, #0
  41129a:	f43f aeb3 	beq.w	411004 <.L262>
       err = ecc_map(R, modulus, mp);
  41129e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4112a0:	99a6      	ldr	r1, [sp, #664]	; 0x298
  4112a2:	9803      	ldr	r0, [sp, #12]
  4112a4:	f005 fa84 	bl	4167b0 <.LFE21>

004112a8 <.LVL655>:
  4112a8:	4604      	mov	r4, r0

004112aa <.LVL656>:
  4112aa:	e6ab      	b.n	411004 <.L262>

004112ac <.LVL657>:
       if (mode == 2 && bitcpy > 0) {
  4112ac:	9b05      	ldr	r3, [sp, #20]
  4112ae:	2b02      	cmp	r3, #2
  4112b0:	d1ee      	bne.n	411290 <.LVL654>

004112b2 <.LVL658>:
           for (j = 0; j < bitcpy; j++) {
  4112b2:	f1bb 0f00 	cmp.w	fp, #0
  4112b6:	ddeb      	ble.n	411290 <.LVL654>
  4112b8:	46a2      	mov	sl, r4
                       err = mp_copy(tG->y, R->y);
  4112ba:	9903      	ldr	r1, [sp, #12]
  4112bc:	f501 730a 	add.w	r3, r1, #552	; 0x228
  4112c0:	9304      	str	r3, [sp, #16]

004112c2 <.LVL659>:
  4112c2:	f506 730a 	add.w	r3, r6, #552	; 0x228
  4112c6:	9305      	str	r3, [sp, #20]

004112c8 <.LVL660>:
                       err = mp_copy(tG->z, R->z);
  4112c8:	f501 638a 	add.w	r3, r1, #1104	; 0x450
  4112cc:	9306      	str	r3, [sp, #24]
  4112ce:	464b      	mov	r3, r9
  4112d0:	9407      	str	r4, [sp, #28]
  4112d2:	9ca6      	ldr	r4, [sp, #664]	; 0x298
  4112d4:	4689      	mov	r9, r1

004112d6 <.LVL661>:
  4112d6:	e7a0      	b.n	41121a <.LVL629+0x8>

004112d8 <.LVL662>:
  4112d8:	464b      	mov	r3, r9
  4112da:	e737      	b.n	41114c <.LVL601>

Disassembly of section .text.inflate_table%61:

004112dc <inflate_table>:
unsigned short FAR *lens;
unsigned codes;
code FAR * FAR *table;
unsigned FAR *bits;
unsigned short FAR *work;
{
  4112dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

004112e0 <.LCFI0>:
  4112e0:	b09f      	sub	sp, #124	; 0x7c

004112e2 <.LCFI1>:
  4112e2:	9106      	str	r1, [sp, #24]
  4112e4:	9929      	ldr	r1, [sp, #164]	; 0xa4

004112e6 <.LVL1>:
  4112e6:	f10d 0456 	add.w	r4, sp, #86	; 0x56
  4112ea:	f10d 0676 	add.w	r6, sp, #118	; 0x76
       decoding tables.
     */

    /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
    for (len = 0; len <= MAXBITS; len++)
        count[len] = 0;
  4112ee:	2500      	movs	r5, #0

004112f0 <.LVL2>:
  4112f0:	f824 5f02 	strh.w	r5, [r4, #2]!
    for (len = 0; len <= MAXBITS; len++)
  4112f4:	42b4      	cmp	r4, r6
  4112f6:	d1fb      	bne.n	4112f0 <.LVL2>

004112f8 <.LVL3>:
    for (sym = 0; sym < codes; sym++)
  4112f8:	b17a      	cbz	r2, 41131a <.LVL5>
  4112fa:	9c06      	ldr	r4, [sp, #24]
  4112fc:	4626      	mov	r6, r4
  4112fe:	eb04 0742 	add.w	r7, r4, r2, lsl #1

00411302 <.LVL4>:
        count[lens[sym]]++;
  411302:	f836 4b02 	ldrh.w	r4, [r6], #2
  411306:	ad1e      	add	r5, sp, #120	; 0x78
  411308:	eb05 0444 	add.w	r4, r5, r4, lsl #1
  41130c:	f834 5c20 	ldrh.w	r5, [r4, #-32]
  411310:	3501      	adds	r5, #1
  411312:	f824 5c20 	strh.w	r5, [r4, #-32]
    for (sym = 0; sym < codes; sym++)
  411316:	42be      	cmp	r6, r7
  411318:	d1f3      	bne.n	411302 <.LVL4>

0041131a <.LVL5>:

    /* bound code lengths, force root to be within code lengths */
    root = *bits;
    for (max = MAXBITS; max >= 1; max--)
        if (count[max] != 0) break;
  41131a:	f8bd 4076 	ldrh.w	r4, [sp, #118]	; 0x76
  41131e:	2c00      	cmp	r4, #0
  411320:	f040 81ad 	bne.w	41167e <.LVL104>
  411324:	ac1d      	add	r4, sp, #116	; 0x74
    for (max = MAXBITS; max >= 1; max--)
  411326:	f04f 0c0e 	mov.w	ip, #14

0041132a <.LVL6>:
        if (count[max] != 0) break;
  41132a:	f834 5902 	ldrh.w	r5, [r4], #-2
  41132e:	2d00      	cmp	r5, #0
  411330:	f040 8119 	bne.w	411566 <.LVL73>

00411334 <.LVL7>:
    for (max = MAXBITS; max >= 1; max--)
  411334:	f1bc 0c01 	subs.w	ip, ip, #1

00411338 <.LVL8>:
  411338:	d1f7      	bne.n	41132a <.LVL6>

0041133a <.LVL9>:
    if (root > max) root = max;
    if (max == 0) {                     /* no symbols to code at all */
        here.op = (unsigned char)64;    /* invalid code marker */
        here.bits = (unsigned char)1;
        here.val = (unsigned short)0;
        *(*table)++ = here;             /* make a table to force an error */
  41133a:	681a      	ldr	r2, [r3, #0]

0041133c <.LVL10>:
  41133c:	1d11      	adds	r1, r2, #4
  41133e:	6019      	str	r1, [r3, #0]
  411340:	2440      	movs	r4, #64	; 0x40
  411342:	7014      	strb	r4, [r2, #0]
  411344:	2101      	movs	r1, #1
  411346:	7051      	strb	r1, [r2, #1]
  411348:	2000      	movs	r0, #0

0041134a <.LVL11>:
  41134a:	8050      	strh	r0, [r2, #2]
        *(*table)++ = here;
  41134c:	681a      	ldr	r2, [r3, #0]
  41134e:	1d15      	adds	r5, r2, #4
  411350:	601d      	str	r5, [r3, #0]
  411352:	7014      	strb	r4, [r2, #0]
  411354:	7051      	strb	r1, [r2, #1]
  411356:	8050      	strh	r0, [r2, #2]
        *bits = 1;
  411358:	9b28      	ldr	r3, [sp, #160]	; 0xa0

0041135a <.LVL12>:
  41135a:	6019      	str	r1, [r3, #0]

0041135c <.LVL13>:

    /* set return parameters */
    *table += used;
    *bits = root;
    return 0;
}
  41135c:	b01f      	add	sp, #124	; 0x7c

0041135e <.LCFI2>:
  41135e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00411362 <.LCFI3>:
        left -= count[len];
  411362:	f8bd 405a 	ldrh.w	r4, [sp, #90]	; 0x5a

00411366 <.LVL15>:
        if (left < 0) return -1;        /* over-subscribed */
  411366:	f1d4 0402 	rsbs	r4, r4, #2

0041136a <.LVL16>:
  41136a:	d502      	bpl.n	411372 <.LVL18>
  41136c:	f04f 30ff 	mov.w	r0, #4294967295

00411370 <.LVL17>:
  411370:	e7f4      	b.n	41135c <.LVL13>

00411372 <.LVL18>:
  411372:	2e01      	cmp	r6, #1
  411374:	bf38      	it	cc
  411376:	2601      	movcc	r6, #1

00411378 <.LVL19>:
  411378:	9603      	str	r6, [sp, #12]
  41137a:	f04f 0801 	mov.w	r8, #1
  41137e:	e111      	b.n	4115a4 <.LVL79>

00411380 <.LVL20>:
    for (sym = 0; sym < codes; sym++)
  411380:	3601      	adds	r6, #1
  411382:	4295      	cmp	r5, r2
  411384:	f000 8153 	beq.w	41162e <.LVL96>
        if (lens[sym] != 0) work[offs[lens[sym]]++] = (unsigned short)sym;
  411388:	f835 4b02 	ldrh.w	r4, [r5], #2
  41138c:	2c00      	cmp	r4, #0
  41138e:	d0f7      	beq.n	411380 <.LVL20>
  411390:	af1e      	add	r7, sp, #120	; 0x78
  411392:	eb07 0444 	add.w	r4, r7, r4, lsl #1
  411396:	f834 7c40 	ldrh.w	r7, [r4, #-64]
  41139a:	f107 0e01 	add.w	lr, r7, #1
  41139e:	f824 ec40 	strh.w	lr, [r4, #-64]
  4113a2:	f821 6017 	strh.w	r6, [r1, r7, lsl #1]
  4113a6:	e7eb      	b.n	411380 <.LVL20>

004113a8 <.LVL23>:
    mask = used - 1;            /* mask for comparing low */
  4113a8:	9c04      	ldr	r4, [sp, #16]
  4113aa:	1e62      	subs	r2, r4, #1
  4113ac:	9208      	str	r2, [sp, #32]

004113ae <.LVL24>:
        (type == DISTS && used >= ENOUGH_DISTS))
  4113ae:	2802      	cmp	r0, #2
  4113b0:	bf14      	ite	ne
  4113b2:	2200      	movne	r2, #0

004113b4 <.LVL25>:
  4113b4:	2201      	moveq	r2, #1
  4113b6:	4610      	mov	r0, r2

004113b8 <.LVL26>:
  4113b8:	920d      	str	r2, [sp, #52]	; 0x34
    if ((type == LENS && used >= ENOUGH_LENS) ||
  4113ba:	f5b4 7f14 	cmp.w	r4, #592	; 0x250
  4113be:	f0c0 812b 	bcc.w	411618 <.LVL95>
  4113c2:	2800      	cmp	r0, #0
  4113c4:	f000 8128 	beq.w	411618 <.LVL95>
        return 1;
  4113c8:	2001      	movs	r0, #1
  4113ca:	e7c7      	b.n	41135c <.LVL13>

004113cc <.LVL27>:
  4113cc:	9207      	str	r2, [sp, #28]

004113ce <.LVL28>:
  4113ce:	e091      	b.n	4114f4 <.LVL57>

004113d0 <.LVL29>:
            here.op = (unsigned char)0;
  4113d0:	2300      	movs	r3, #0
  4113d2:	9302      	str	r3, [sp, #8]

004113d4 <.LVL30>:
        incr = 1U << (len - drop);
  4113d4:	eba8 000a 	sub.w	r0, r8, sl
  4113d8:	fa0b f100 	lsl.w	r1, fp, r0

004113dc <.LVL31>:
        fill = 1U << curr;
  4113dc:	fa0b f206 	lsl.w	r2, fp, r6

004113e0 <.LVL32>:
  4113e0:	f06f 0303 	mvn.w	r3, #3
  4113e4:	fa03 f000 	lsl.w	r0, r3, r0
            next[(huff >> drop) + fill] = here;
  4113e8:	fa24 f30a 	lsr.w	r3, r4, sl
  4113ec:	4413      	add	r3, r2
  4113ee:	1a5b      	subs	r3, r3, r1
  4113f0:	9f01      	ldr	r7, [sp, #4]
  4113f2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  4113f6:	9f02      	ldr	r7, [sp, #8]

004113f8 <.LVL33>:
  4113f8:	701f      	strb	r7, [r3, #0]
  4113fa:	f883 e001 	strb.w	lr, [r3, #1]
  4113fe:	805d      	strh	r5, [r3, #2]
  411400:	4403      	add	r3, r0
        } while (fill != 0);
  411402:	1a52      	subs	r2, r2, r1

00411404 <.LVL34>:
  411404:	d1f8      	bne.n	4113f8 <.LVL33>
        incr = 1U << (len - 1);
  411406:	f108 31ff 	add.w	r1, r8, #4294967295

0041140a <.LVL35>:
  41140a:	fa0b f101 	lsl.w	r1, fp, r1

0041140e <.LVL36>:
        while (huff & incr)
  41140e:	420c      	tst	r4, r1
  411410:	d002      	beq.n	411418 <.LVL36+0xa>
            incr >>= 1;
  411412:	0849      	lsrs	r1, r1, #1
        while (huff & incr)
  411414:	420c      	tst	r4, r1
  411416:	d1fc      	bne.n	411412 <.LVL36+0x4>
        if (incr != 0) {
  411418:	b111      	cbz	r1, 411420 <.LVL39>
            huff &= incr - 1;
  41141a:	1e4b      	subs	r3, r1, #1
  41141c:	401c      	ands	r4, r3
            huff += incr;
  41141e:	4421      	add	r1, r4

00411420 <.LVL39>:
        if (--(count[len]) == 0) {
  411420:	ab1e      	add	r3, sp, #120	; 0x78
  411422:	eb03 0248 	add.w	r2, r3, r8, lsl #1

00411426 <.LVL40>:
  411426:	f832 3c20 	ldrh.w	r3, [r2, #-32]
  41142a:	3b01      	subs	r3, #1
  41142c:	b29b      	uxth	r3, r3
  41142e:	f822 3c20 	strh.w	r3, [r2, #-32]
  411432:	b933      	cbnz	r3, 411442 <.LVL40+0x1c>
            if (len == max) break;
  411434:	45e0      	cmp	r8, ip
  411436:	d075      	beq.n	411524 <.LVL63>
            len = lens[work[sym]];
  411438:	f8b9 3000 	ldrh.w	r3, [r9]
  41143c:	9a06      	ldr	r2, [sp, #24]
  41143e:	f832 8013 	ldrh.w	r8, [r2, r3, lsl #1]
        if (len > root && (huff & mask) != low) {
  411442:	9803      	ldr	r0, [sp, #12]
  411444:	4580      	cmp	r8, r0
  411446:	d955      	bls.n	4114f4 <.LVL57>
  411448:	9b08      	ldr	r3, [sp, #32]
  41144a:	ea01 0203 	and.w	r2, r1, r3
  41144e:	9b07      	ldr	r3, [sp, #28]
  411450:	4293      	cmp	r3, r2
  411452:	d0bb      	beq.n	4113cc <.LVL27>
            if (drop == 0)
  411454:	f1ba 0f00 	cmp.w	sl, #0
  411458:	bf08      	it	eq
  41145a:	4682      	moveq	sl, r0
            next += min;            /* here min is 1 << curr */
  41145c:	2304      	movs	r3, #4
  41145e:	fa03 f606 	lsl.w	r6, r3, r6

00411462 <.LVL43>:
  411462:	9b01      	ldr	r3, [sp, #4]
  411464:	4433      	add	r3, r6
  411466:	9301      	str	r3, [sp, #4]

00411468 <.LVL44>:
            curr = len - drop;
  411468:	eba8 060a 	sub.w	r6, r8, sl

0041146c <.LVL45>:
            left = (int)(1 << curr);
  41146c:	fa0b f306 	lsl.w	r3, fp, r6

00411470 <.LVL46>:
            while (curr + drop < max) {
  411470:	45e0      	cmp	r8, ip
  411472:	d219      	bcs.n	4114a8 <.LVL46+0x38>
                left -= count[curr + drop];
  411474:	a81e      	add	r0, sp, #120	; 0x78
  411476:	eb00 0048 	add.w	r0, r0, r8, lsl #1
  41147a:	f830 0c20 	ldrh.w	r0, [r0, #-32]
  41147e:	1a1b      	subs	r3, r3, r0
                if (left <= 0) break;
  411480:	2b00      	cmp	r3, #0
  411482:	dd11      	ble.n	4114a8 <.LVL46+0x38>
  411484:	f10a 0401 	add.w	r4, sl, #1
  411488:	4434      	add	r4, r6
  41148a:	a816      	add	r0, sp, #88	; 0x58
  41148c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  411490:	3c02      	subs	r4, #2
                curr++;
  411492:	3601      	adds	r6, #1
                left <<= 1;
  411494:	005b      	lsls	r3, r3, #1
            while (curr + drop < max) {
  411496:	eb0a 0006 	add.w	r0, sl, r6
  41149a:	4584      	cmp	ip, r0
  41149c:	d904      	bls.n	4114a8 <.LVL46+0x38>
                left -= count[curr + drop];
  41149e:	f834 0f02 	ldrh.w	r0, [r4, #2]!
  4114a2:	1a1b      	subs	r3, r3, r0
                if (left <= 0) break;
  4114a4:	2b00      	cmp	r3, #0
  4114a6:	dcf4      	bgt.n	411492 <.LVL46+0x22>
            used += 1U << curr;
  4114a8:	fa0b f306 	lsl.w	r3, fp, r6

004114ac <.LVL51>:
  4114ac:	9804      	ldr	r0, [sp, #16]
  4114ae:	4418      	add	r0, r3
  4114b0:	4603      	mov	r3, r0
  4114b2:	9004      	str	r0, [sp, #16]

004114b4 <.LVL52>:
            if ((type == LENS && used >= ENOUGH_LENS) ||
  4114b4:	f240 3053 	movw	r0, #851	; 0x353

004114b8 <.LVL53>:
  4114b8:	4283      	cmp	r3, r0
  4114ba:	d902      	bls.n	4114c2 <.LVL54+0x4>
  4114bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30

004114be <.LVL54>:
  4114be:	2b00      	cmp	r3, #0
  4114c0:	d14d      	bne.n	41155e <.LVL71>
  4114c2:	9b04      	ldr	r3, [sp, #16]
  4114c4:	f240 204f 	movw	r0, #591	; 0x24f
  4114c8:	4283      	cmp	r3, r0
  4114ca:	d902      	bls.n	4114d2 <.LVL55>
  4114cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4114ce:	2b00      	cmp	r3, #0
  4114d0:	d147      	bne.n	411562 <.LVL71+0x4>

004114d2 <.LVL55>:
            (*table)[low].op = (unsigned char)curr;
  4114d2:	0090      	lsls	r0, r2, #2
  4114d4:	9d09      	ldr	r5, [sp, #36]	; 0x24

004114d6 <.LVL56>:
  4114d6:	682b      	ldr	r3, [r5, #0]
  4114d8:	f803 6022 	strb.w	r6, [r3, r2, lsl #2]
            (*table)[low].bits = (unsigned char)root;
  4114dc:	682b      	ldr	r3, [r5, #0]
  4114de:	4403      	add	r3, r0
  4114e0:	f89d 400c 	ldrb.w	r4, [sp, #12]
  4114e4:	705c      	strb	r4, [r3, #1]
            (*table)[low].val = (unsigned short)(next - *table);
  4114e6:	682b      	ldr	r3, [r5, #0]
  4114e8:	4418      	add	r0, r3
  4114ea:	9c01      	ldr	r4, [sp, #4]
  4114ec:	1ae3      	subs	r3, r4, r3
  4114ee:	109b      	asrs	r3, r3, #2
  4114f0:	8043      	strh	r3, [r0, #2]
            low = huff & mask;
  4114f2:	9207      	str	r2, [sp, #28]

004114f4 <.LVL57>:
  4114f4:	460c      	mov	r4, r1

004114f6 <.LVL58>:
        here.bits = (unsigned char)(len - drop);
  4114f6:	eba8 0e0a 	sub.w	lr, r8, sl
  4114fa:	fa5f fe8e 	uxtb.w	lr, lr

004114fe <.LVL59>:
        if ((int)(work[sym]) < end) {
  4114fe:	f839 5b02 	ldrh.w	r5, [r9], #2
  411502:	9a05      	ldr	r2, [sp, #20]
  411504:	42aa      	cmp	r2, r5
  411506:	f73f af63 	bgt.w	4113d0 <.LVL29>
        else if ((int)(work[sym]) > end) {
  41150a:	da07      	bge.n	41151c <.LVL62>
            here.op = (unsigned char)(extra[work[sym]]);
  41150c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  41150e:	f813 3015 	ldrb.w	r3, [r3, r5, lsl #1]
  411512:	9302      	str	r3, [sp, #8]

00411514 <.LVL60>:
            here.val = base[work[sym]];
  411514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  411516:	f833 5015 	ldrh.w	r5, [r3, r5, lsl #1]

0041151a <.LVL61>:
  41151a:	e75b      	b.n	4113d4 <.LVL30>

0041151c <.LVL62>:
            here.val = 0;
  41151c:	2500      	movs	r5, #0
            here.op = (unsigned char)(32 + 64);         /* end of block */
  41151e:	2360      	movs	r3, #96	; 0x60
  411520:	9302      	str	r3, [sp, #8]
  411522:	e757      	b.n	4113d4 <.LVL30>

00411524 <.LVL63>:
  411524:	9b09      	ldr	r3, [sp, #36]	; 0x24
    if (huff != 0) {
  411526:	b149      	cbz	r1, 41153c <.LVL66>

00411528 <.LVL64>:
        next[huff] = here;
  411528:	9c01      	ldr	r4, [sp, #4]
  41152a:	eb04 0281 	add.w	r2, r4, r1, lsl #2
  41152e:	2040      	movs	r0, #64	; 0x40
  411530:	f804 0021 	strb.w	r0, [r4, r1, lsl #2]
  411534:	f882 e001 	strb.w	lr, [r2, #1]
  411538:	2100      	movs	r1, #0

0041153a <.LVL65>:
  41153a:	8051      	strh	r1, [r2, #2]

0041153c <.LVL66>:
    *table += used;
  41153c:	681a      	ldr	r2, [r3, #0]
  41153e:	9904      	ldr	r1, [sp, #16]
  411540:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  411544:	601a      	str	r2, [r3, #0]
    *bits = root;
  411546:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  411548:	461a      	mov	r2, r3
  41154a:	9b03      	ldr	r3, [sp, #12]
  41154c:	6013      	str	r3, [r2, #0]
    return 0;
  41154e:	2000      	movs	r0, #0
  411550:	e704      	b.n	41135c <.LVL13>

00411552 <.LVL67>:
        if (left < 0) return -1;        /* over-subscribed */
  411552:	f04f 30ff 	mov.w	r0, #4294967295

00411556 <.LVL68>:
  411556:	e701      	b.n	41135c <.LVL13>

00411558 <.LVL69>:
        return -1;                      /* incomplete set */
  411558:	f04f 30ff 	mov.w	r0, #4294967295

0041155c <.LVL70>:
  41155c:	e6fe      	b.n	41135c <.LVL13>

0041155e <.LVL71>:
                return 1;
  41155e:	2001      	movs	r0, #1
  411560:	e6fc      	b.n	41135c <.LVL13>
  411562:	2001      	movs	r0, #1

00411564 <.LVL72>:
  411564:	e6fa      	b.n	41135c <.LVL13>

00411566 <.LVL73>:
    root = *bits;
  411566:	9c28      	ldr	r4, [sp, #160]	; 0xa0
  411568:	6826      	ldr	r6, [r4, #0]
  41156a:	4566      	cmp	r6, ip
  41156c:	bf28      	it	cs
  41156e:	4666      	movcs	r6, ip

00411570 <.LVL74>:
    for (min = 1; min < max; min++)
  411570:	f1bc 0f01 	cmp.w	ip, #1
  411574:	f67f aef5 	bls.w	411362 <.LCFI3>

00411578 <.LVL75>:
        if (count[min] != 0) break;
  411578:	f8bd 405a 	ldrh.w	r4, [sp, #90]	; 0x5a
  41157c:	2c00      	cmp	r4, #0
  41157e:	f47f aef0 	bne.w	411362 <.LCFI3>
  411582:	ac17      	add	r4, sp, #92	; 0x5c
  411584:	f04f 0801 	mov.w	r8, #1

00411588 <.LVL76>:
    for (min = 1; min < max; min++)
  411588:	f108 0801 	add.w	r8, r8, #1
  41158c:	45e0      	cmp	r8, ip
  41158e:	d003      	beq.n	411598 <.LVL76+0x10>
        if (count[min] != 0) break;
  411590:	f834 5b02 	ldrh.w	r5, [r4], #2
  411594:	2d00      	cmp	r5, #0
  411596:	d0f7      	beq.n	411588 <.LVL76>
  411598:	4634      	mov	r4, r6
  41159a:	4546      	cmp	r6, r8
  41159c:	bf38      	it	cc
  41159e:	4644      	movcc	r4, r8
  4115a0:	9403      	str	r4, [sp, #12]

004115a2 <.LVL78>:
        left -= count[len];
  4115a2:	2402      	movs	r4, #2

004115a4 <.LVL79>:
  4115a4:	ad17      	add	r5, sp, #92	; 0x5c
  4115a6:	af1e      	add	r7, sp, #120	; 0x78

004115a8 <.LVL80>:
  4115a8:	f835 6b02 	ldrh.w	r6, [r5], #2

004115ac <.LVL81>:
        if (left < 0) return -1;        /* over-subscribed */
  4115ac:	ebd6 0444 	rsbs	r4, r6, r4, lsl #1

004115b0 <.LVL82>:
  4115b0:	d4cf      	bmi.n	411552 <.LVL67>
    for (len = 1; len <= MAXBITS; len++) {
  4115b2:	42bd      	cmp	r5, r7
  4115b4:	d1f8      	bne.n	4115a8 <.LVL80>
    if (left > 0 && (type == CODES || max != 1))
  4115b6:	2c00      	cmp	r4, #0
  4115b8:	dd04      	ble.n	4115c4 <.LVL82+0x14>
  4115ba:	2800      	cmp	r0, #0
  4115bc:	d0cc      	beq.n	411558 <.LVL69>
  4115be:	f1bc 0f01 	cmp.w	ip, #1
  4115c2:	d1c9      	bne.n	411558 <.LVL69>
    offs[1] = 0;
  4115c4:	ad1e      	add	r5, sp, #120	; 0x78
  4115c6:	2400      	movs	r4, #0

004115c8 <.LVL83>:
  4115c8:	f825 4d3e 	strh.w	r4, [r5, #-62]!

004115cc <.LVL84>:
  4115cc:	f10d 065a 	add.w	r6, sp, #90	; 0x5a
  4115d0:	f10d 0756 	add.w	r7, sp, #86	; 0x56

004115d4 <.LVL85>:
        offs[len + 1] = offs[len] + count[len];
  4115d4:	882c      	ldrh	r4, [r5, #0]
  4115d6:	f836 eb02 	ldrh.w	lr, [r6], #2
  4115da:	4474      	add	r4, lr
  4115dc:	f825 4f02 	strh.w	r4, [r5, #2]!
    for (len = 1; len < MAXBITS; len++)
  4115e0:	42bd      	cmp	r5, r7
  4115e2:	d1f7      	bne.n	4115d4 <.LVL85>

004115e4 <.LVL86>:
    for (sym = 0; sym < codes; sym++)
  4115e4:	b31a      	cbz	r2, 41162e <.LVL96>
  4115e6:	9c06      	ldr	r4, [sp, #24]
  4115e8:	4625      	mov	r5, r4
  4115ea:	eb04 0242 	add.w	r2, r4, r2, lsl #1

004115ee <.LVL87>:
  4115ee:	2600      	movs	r6, #0
  4115f0:	e6ca      	b.n	411388 <.LVL20+0x8>

004115f2 <.LVL88>:
    next = *table;              /* current table to fill in */
  4115f2:	681a      	ldr	r2, [r3, #0]
  4115f4:	9201      	str	r2, [sp, #4]

004115f6 <.LVL89>:
    used = 1U << root;          /* use root table entries */
  4115f6:	2201      	movs	r2, #1

004115f8 <.LVL90>:
  4115f8:	9c03      	ldr	r4, [sp, #12]
  4115fa:	40a2      	lsls	r2, r4
  4115fc:	9204      	str	r2, [sp, #16]

004115fe <.LVL91>:
    mask = used - 1;            /* mask for comparing low */
  4115fe:	3a01      	subs	r2, #1

00411600 <.LVL92>:
  411600:	9208      	str	r2, [sp, #32]

00411602 <.LVL93>:
        (type == DISTS && used >= ENOUGH_DISTS))
  411602:	2802      	cmp	r0, #2
  411604:	bf14      	ite	ne
  411606:	2200      	movne	r2, #0

00411608 <.LVL94>:
  411608:	2201      	moveq	r2, #1
  41160a:	920d      	str	r2, [sp, #52]	; 0x34
        base = extra = work;    /* dummy value--not used */
  41160c:	910b      	str	r1, [sp, #44]	; 0x2c
  41160e:	910a      	str	r1, [sp, #40]	; 0x28
    if ((type == LENS && used >= ENOUGH_LENS) ||
  411610:	2200      	movs	r2, #0
  411612:	920c      	str	r2, [sp, #48]	; 0x30
        end = 19;
  411614:	2213      	movs	r2, #19
  411616:	9205      	str	r2, [sp, #20]

00411618 <.LVL95>:
  411618:	9e03      	ldr	r6, [sp, #12]
  41161a:	f04f 32ff 	mov.w	r2, #4294967295
  41161e:	9207      	str	r2, [sp, #28]
  411620:	2400      	movs	r4, #0
  411622:	46a2      	mov	sl, r4
        incr = 1U << (len - drop);
  411624:	f04f 0b01 	mov.w	fp, #1
  411628:	4689      	mov	r9, r1
  41162a:	9309      	str	r3, [sp, #36]	; 0x24
  41162c:	e763      	b.n	4114f6 <.LVL58>

0041162e <.LVL96>:
    switch (type) {
  41162e:	2800      	cmp	r0, #0
  411630:	d0df      	beq.n	4115f2 <.LVL88>
  411632:	2801      	cmp	r0, #1
        end = -1;
  411634:	bf0c      	ite	eq
  411636:	f44f 7280 	moveq.w	r2, #256	; 0x100
  41163a:	f04f 32ff 	movne.w	r2, #4294967295
  41163e:	9205      	str	r2, [sp, #20]
  411640:	4a13      	ldr	r2, [pc, #76]	; (411690 <.LVL105+0x8>)
  411642:	4c14      	ldr	r4, [pc, #80]	; (411694 <.LVL105+0xc>)
  411644:	bf08      	it	eq
  411646:	4622      	moveq	r2, r4
  411648:	920b      	str	r2, [sp, #44]	; 0x2c
  41164a:	4a13      	ldr	r2, [pc, #76]	; (411698 <.LVL105+0x10>)
  41164c:	4c13      	ldr	r4, [pc, #76]	; (41169c <.LVL105+0x14>)
  41164e:	bf08      	it	eq
  411650:	4622      	moveq	r2, r4
  411652:	920a      	str	r2, [sp, #40]	; 0x28

00411654 <.LVL97>:
    next = *table;              /* current table to fill in */
  411654:	681a      	ldr	r2, [r3, #0]

00411656 <.LVL98>:
  411656:	9201      	str	r2, [sp, #4]

00411658 <.LVL99>:
    used = 1U << root;          /* use root table entries */
  411658:	2201      	movs	r2, #1

0041165a <.LVL100>:
  41165a:	9c03      	ldr	r4, [sp, #12]
  41165c:	40a2      	lsls	r2, r4
  41165e:	9204      	str	r2, [sp, #16]

00411660 <.LVL101>:
    if ((type == LENS && used >= ENOUGH_LENS) ||
  411660:	2801      	cmp	r0, #1
  411662:	bf14      	ite	ne
  411664:	2400      	movne	r4, #0
  411666:	2401      	moveq	r4, #1
  411668:	940c      	str	r4, [sp, #48]	; 0x30
  41166a:	f5b2 7f55 	cmp.w	r2, #852	; 0x354
  41166e:	f4ff ae9b 	bcc.w	4113a8 <.LVL23>
  411672:	9a0c      	ldr	r2, [sp, #48]	; 0x30

00411674 <.LVL102>:
  411674:	2a00      	cmp	r2, #0
  411676:	f43f ae97 	beq.w	4113a8 <.LVL23>
        return 1;
  41167a:	2001      	movs	r0, #1

0041167c <.LVL103>:
  41167c:	e66e      	b.n	41135c <.LVL13>

0041167e <.LVL104>:
    root = *bits;
  41167e:	9c28      	ldr	r4, [sp, #160]	; 0xa0
  411680:	6826      	ldr	r6, [r4, #0]
  411682:	2e0f      	cmp	r6, #15
  411684:	bf28      	it	cs
  411686:	260f      	movcs	r6, #15

00411688 <.LVL105>:
    for (max = MAXBITS; max >= 1; max--)
  411688:	f04f 0c0f 	mov.w	ip, #15
  41168c:	e774      	b.n	411578 <.LVL75>
  41168e:	bf00      	nop
  411690:	0041c8f4 	.word	0x0041c8f4
  411694:	0041c772 	.word	0x0041c772
  411698:	0041c8b4 	.word	0x0041c8b4
  41169c:	0041c732 	.word	0x0041c732

Disassembly of section .text.RsaPublicEncryptEx%62:

004116a0 <RsaPublicEncryptEx>:
{
  4116a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

004116a4 <.LCFI50>:
  4116a4:	b0ab      	sub	sp, #172	; 0xac

004116a6 <.LCFI51>:
  4116a6:	9c34      	ldr	r4, [sp, #208]	; 0xd0
  4116a8:	f89d a0d8 	ldrb.w	sl, [sp, #216]	; 0xd8
  4116ac:	f89d b0e0 	ldrb.w	fp, [sp, #224]	; 0xe0
    if (in == NULL || inLen == 0 || out == NULL || key == NULL) {
  4116b0:	2800      	cmp	r0, #0
  4116b2:	f000 81a8 	beq.w	411a06 <.LVL369>
  4116b6:	2900      	cmp	r1, #0
  4116b8:	f000 81a5 	beq.w	411a06 <.LVL369>
  4116bc:	fab2 f882 	clz	r8, r2
  4116c0:	ea4f 1858 	mov.w	r8, r8, lsr #5
  4116c4:	2c00      	cmp	r4, #0
  4116c6:	f000 81a1 	beq.w	411a0c <.LVL369+0x6>
  4116ca:	f1b8 0f00 	cmp.w	r8, #0
  4116ce:	f040 819d 	bne.w	411a0c <.LVL369+0x6>
  4116d2:	9005      	str	r0, [sp, #20]
  4116d4:	461f      	mov	r7, r3
  4116d6:	4691      	mov	r9, r2
  4116d8:	460d      	mov	r5, r1
    sz = wc_RsaEncryptSize(key);
  4116da:	4620      	mov	r0, r4

004116dc <.LVL293>:
  4116dc:	f00c fa00 	bl	41dae0 <wc_RsaEncryptSize>

004116e0 <.LVL294>:
  4116e0:	4606      	mov	r6, r0

004116e2 <.LVL295>:
    if (sz > (int)outLen) {
  4116e2:	42b8      	cmp	r0, r7
  4116e4:	f300 8195 	bgt.w	411a12 <.LVL370>
    if (sz < RSA_MIN_PAD_SZ) {
  4116e8:	280a      	cmp	r0, #10
  4116ea:	f340 8195 	ble.w	411a18 <.LVL370+0x6>
    if (inLen > (word32)(sz - RSA_MIN_PAD_SZ)) {
  4116ee:	f1a0 030b 	sub.w	r3, r0, #11
  4116f2:	429d      	cmp	r5, r3
  4116f4:	f200 8193 	bhi.w	411a1e <.LVL370+0xc>
    switch (key->state) {
  4116f8:	f241 134c 	movw	r3, #4428	; 0x114c
  4116fc:	58e3      	ldr	r3, [r4, r3]
  4116fe:	2b03      	cmp	r3, #3
  411700:	f200 817e 	bhi.w	411a00 <.LVL368>
  411704:	e8df f003 	tbb	[pc, r3]
  411708:	31180202 	.word	0x31180202
        key->state = RSA_STATE_ENCRYPT_PAD;
  41170c:	2201      	movs	r2, #1
  41170e:	f241 134c 	movw	r3, #4428	; 0x114c
  411712:	50e2      	str	r2, [r4, r3]
        ret = wc_RsaPad_ex(in, inLen, out, sz, pad_value, rng, pad_type, hash,
  411714:	9006      	str	r0, [sp, #24]
  411716:	4620      	mov	r0, r4

00411718 <.LVL296>:
  411718:	f00c fb3c 	bl	41dd94 <.LFE80>

0041171c <.LBB94>:
    switch (padType)
  41171c:	9b37      	ldr	r3, [sp, #220]	; 0xdc
  41171e:	b3b3      	cbz	r3, 41178e <.LBB112>
  411720:	2b01      	cmp	r3, #1
  411722:	f000 8081 	beq.w	411828 <.LBB102>
            ret = RSA_PAD_E;
  411726:	f06f 08c8 	mvn.w	r8, #200	; 0xc8

0041172a <.LBE94>:
        if (ret < 0) {
  41172a:	f1b8 0f00 	cmp.w	r8, #0
  41172e:	db20      	blt.n	411772 <.LVL301>
        key->state = RSA_STATE_ENCRYPT_EXPTMOD;
  411730:	2202      	movs	r2, #2
  411732:	f241 134c 	movw	r3, #4428	; 0x114c
  411736:	50e2      	str	r2, [r4, r3]
        key->dataLen = outLen;
  411738:	f241 1350 	movw	r3, #4432	; 0x1150
  41173c:	50e7      	str	r7, [r4, r3]
        ret = wc_RsaFunction(out, sz, out, &key->dataLen, rsa_type, key, rng);
  41173e:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
  411740:	9202      	str	r2, [sp, #8]
  411742:	9401      	str	r4, [sp, #4]
  411744:	9a35      	ldr	r2, [sp, #212]	; 0xd4
  411746:	9200      	str	r2, [sp, #0]
  411748:	4423      	add	r3, r4
  41174a:	464a      	mov	r2, r9
  41174c:	4631      	mov	r1, r6
  41174e:	4648      	mov	r0, r9
  411750:	f00a fbc7 	bl	41bee2 <.LFE2>

00411754 <.LVL299>:
        if (ret >= 0 || ret == WC_PENDING_E) {
  411754:	f1b0 0800 	subs.w	r8, r0, #0
  411758:	f280 814d 	bge.w	4119f6 <.LBE107>
  41175c:	f118 0f6c 	cmn.w	r8, #108	; 0x6c
  411760:	f000 8149 	beq.w	4119f6 <.LBE107>
        if (ret < 0) {
  411764:	f1b8 0f00 	cmp.w	r8, #0
  411768:	db03      	blt.n	411772 <.LVL301>

0041176a <.LVL300>:
        ret = key->dataLen;
  41176a:	f241 1350 	movw	r3, #4432	; 0x1150
  41176e:	f854 8003 	ldr.w	r8, [r4, r3]

00411772 <.LVL301>:
    if (ret == WC_PENDING_E) {
  411772:	f118 0f6c 	cmn.w	r8, #108	; 0x6c
  411776:	d006      	beq.n	411786 <.LVL303>
    key->state = RSA_STATE_NONE;
  411778:	2200      	movs	r2, #0
  41177a:	f241 134c 	movw	r3, #4428	; 0x114c
  41177e:	50e2      	str	r2, [r4, r3]
    wc_RsaCleanup(key);
  411780:	4620      	mov	r0, r4
  411782:	f00a f8a7 	bl	41b8d4 <.LFE42>

00411786 <.LVL303>:
}
  411786:	4640      	mov	r0, r8
  411788:	b02b      	add	sp, #172	; 0xac

0041178a <.LCFI52>:
  41178a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0041178e <.LBB112>:
    if (input == NULL || inputLen == 0 || pkcsBlock == NULL ||
  41178e:	2e00      	cmp	r6, #0
  411790:	f000 8148 	beq.w	411a24 <.LBB108>
  411794:	f1b8 0f00 	cmp.w	r8, #0
  411798:	f040 8144 	bne.w	411a24 <.LBB108>
    pkcsBlock[0] = 0x0;       /* set first byte to zero and advance */
  41179c:	2300      	movs	r3, #0

0041179e <.LVL305>:
  41179e:	f889 3000 	strb.w	r3, [r9]

004117a2 <.LVL306>:
    pkcsBlock++; pkcsBlockLen--;
  4117a2:	f106 3bff 	add.w	fp, r6, #4294967295

004117a6 <.LVL307>:
    pkcsBlock[0] = padValue;  /* insert padValue */
  4117a6:	f889 a001 	strb.w	sl, [r9, #1]
    if (padValue == RSA_BLOCK_TYPE_1) {
  4117aa:	f1ba 0f01 	cmp.w	sl, #1
  4117ae:	d019      	beq.n	4117e4 <.LBE98>

004117b0 <.LBB98>:
        if (pkcsBlockLen < inputLen + 1) {
  4117b0:	1c6b      	adds	r3, r5, #1
  4117b2:	459b      	cmp	fp, r3
  4117b4:	f0c0 813c 	bcc.w	411a30 <.LBB100>
        padLen = pkcsBlockLen - inputLen - 1;
  4117b8:	ea6f 0a05 	mvn.w	sl, r5

004117bc <.LVL308>:
  4117bc:	44da      	add	sl, fp

004117be <.LVL309>:
        ret = CRYPT_RNG_BlockGenerate((CRYPT_RNG_CTX*)rng, &pkcsBlock[1], padLen);
  4117be:	4652      	mov	r2, sl
  4117c0:	f109 0102 	add.w	r1, r9, #2
  4117c4:	983c      	ldr	r0, [sp, #240]	; 0xf0
  4117c6:	f00b fecb 	bl	41d560 <.LFE150>

004117ca <.LVL310>:
        if (ret != 0) {
  4117ca:	4680      	mov	r8, r0
  4117cc:	2800      	cmp	r0, #0
  4117ce:	d1ac      	bne.n	41172a <.LBE94>

004117d0 <.LVL311>:
        for (i = 1; i < padLen; i++) {
  4117d0:	f1ba 0f01 	cmp.w	sl, #1
  4117d4:	d912      	bls.n	4117fc <.LVL315>
  4117d6:	f109 0302 	add.w	r3, r9, #2
  4117da:	f10a 0a01 	add.w	sl, sl, #1

004117de <.LVL312>:
  4117de:	44ca      	add	sl, r9

004117e0 <.LVL313>:
            if (pkcsBlock[i] == 0) pkcsBlock[i] = 0x01;
  4117e0:	2101      	movs	r1, #1
  4117e2:	e01c      	b.n	41181e <.LBB99+0x4>

004117e4 <.LBE98>:
        if (pkcsBlockLen < inputLen + 2) {
  4117e4:	1cab      	adds	r3, r5, #2
  4117e6:	459b      	cmp	fp, r3
  4117e8:	f0c0 811f 	bcc.w	411a2a <.LVL372>
        XMEMSET(&pkcsBlock[1], 0xFF, pkcsBlockLen - inputLen - 2);
  4117ec:	ebab 0205 	sub.w	r2, fp, r5
  4117f0:	3a02      	subs	r2, #2
  4117f2:	21ff      	movs	r1, #255	; 0xff
  4117f4:	f109 0002 	add.w	r0, r9, #2
  4117f8:	f008 fad2 	bl	419da0 <.LFE166>

004117fc <.LVL315>:
    pkcsBlock[pkcsBlockLen-inputLen-1] = 0;     /* separator */
  4117fc:	ebab 0b05 	sub.w	fp, fp, r5

00411800 <.LVL316>:
  411800:	2300      	movs	r3, #0
  411802:	f809 300b 	strb.w	r3, [r9, fp]
    XMEMCPY(pkcsBlock+pkcsBlockLen-inputLen, input, inputLen);
  411806:	f10b 0b01 	add.w	fp, fp, #1
  41180a:	462a      	mov	r2, r5
  41180c:	9905      	ldr	r1, [sp, #20]
  41180e:	eb09 000b 	add.w	r0, r9, fp
  411812:	f004 fe03 	bl	41641c <memcpy>

00411816 <.LVL317>:
  411816:	e78b      	b.n	411730 <.LBE94+0x6>

00411818 <.LVL318>:
  411818:	3301      	adds	r3, #1

0041181a <.LBB99>:
        for (i = 1; i < padLen; i++) {
  41181a:	459a      	cmp	sl, r3
  41181c:	d0ee      	beq.n	4117fc <.LVL315>
            if (pkcsBlock[i] == 0) pkcsBlock[i] = 0x01;
  41181e:	781a      	ldrb	r2, [r3, #0]
  411820:	2a00      	cmp	r2, #0
  411822:	d1f9      	bne.n	411818 <.LVL318>
  411824:	7019      	strb	r1, [r3, #0]
  411826:	e7f7      	b.n	411818 <.LVL318>

00411828 <.LBB102>:
    if (optLabel == NULL && labelLen > 0) {
  411828:	9b3a      	ldr	r3, [sp, #232]	; 0xe8

0041182a <.LVL320>:
  41182a:	b91b      	cbnz	r3, 411834 <.LBE102>
  41182c:	9b3b      	ldr	r3, [sp, #236]	; 0xec
  41182e:	2b00      	cmp	r3, #0
  411830:	f040 80cc 	bne.w	4119cc <.LBE105>

00411834 <.LBE102>:
        ret = wc_RsaPad_ex(in, inLen, out, sz, pad_value, rng, pad_type, hash,
  411834:	f504 538a 	add.w	r3, r4, #4416	; 0x1140
  411838:	681b      	ldr	r3, [r3, #0]
  41183a:	9308      	str	r3, [sp, #32]

0041183c <.LBB107>:
    hLen = wc_HashGetDigestSize(hType);
  41183c:	4658      	mov	r0, fp
  41183e:	f00b fae9 	bl	41ce14 <wc_HashGetDigestSize>

00411842 <.LVL321>:
    if (hLen < 0) {
  411842:	1e03      	subs	r3, r0, #0
  411844:	9307      	str	r3, [sp, #28]
  411846:	f2c0 80c4 	blt.w	4119d2 <.LVL361>
        if ((word32)hLen > sizeof(lHash)) {
  41184a:	2b40      	cmp	r3, #64	; 0x40
  41184c:	f200 80c4 	bhi.w	4119d8 <.LVL361+0x6>
    if ((ret = wc_Hash(hType, optLabel, labelLen, lHash, hLen)) != 0) {
  411850:	9300      	str	r3, [sp, #0]
  411852:	ab0a      	add	r3, sp, #40	; 0x28
  411854:	9a3b      	ldr	r2, [sp, #236]	; 0xec
  411856:	993a      	ldr	r1, [sp, #232]	; 0xe8
  411858:	4658      	mov	r0, fp

0041185a <.LVL322>:
  41185a:	f008 f968 	bl	419b2e <.LFE24>

0041185e <.LVL323>:
  41185e:	4680      	mov	r8, r0
  411860:	2800      	cmp	r0, #0
  411862:	f47f af62 	bne.w	41172a <.LBE94>
    if ((word32)(2 * hLen + 2) > pkcsBlockLen) {
  411866:	9b07      	ldr	r3, [sp, #28]
  411868:	3301      	adds	r3, #1
  41186a:	9309      	str	r3, [sp, #36]	; 0x24
  41186c:	005b      	lsls	r3, r3, #1
  41186e:	429e      	cmp	r6, r3
  411870:	f0c0 80b5 	bcc.w	4119de <.LVL362>
    if (inputLen > (pkcsBlockLen - 2 * hLen - 2)) {
  411874:	f1a3 0802 	sub.w	r8, r3, #2
  411878:	1af3      	subs	r3, r6, r3
  41187a:	429d      	cmp	r5, r3
  41187c:	f200 80b2 	bhi.w	4119e4 <.LVL362+0x6>
    idx = pkcsBlockLen - 1 - inputLen;
  411880:	1b70      	subs	r0, r6, r5

00411882 <.LVL324>:
  411882:	f100 3bff 	add.w	fp, r0, #4294967295

00411886 <.LVL325>:
  411886:	f1a0 0a02 	sub.w	sl, r0, #2

0041188a <.LVL326>:
    psLen = pkcsBlockLen - inputLen - 2 * hLen - 2;
  41188a:	ebaa 0808 	sub.w	r8, sl, r8

0041188e <.LVL327>:
    if (pkcsBlockLen < inputLen) { /*make sure not writing over end of buffer */
  41188e:	42b5      	cmp	r5, r6
  411890:	f200 80ab 	bhi.w	4119ea <.LVL363>
    XMEMCPY(pkcsBlock + (pkcsBlockLen - inputLen), input, inputLen);
  411894:	462a      	mov	r2, r5
  411896:	9905      	ldr	r1, [sp, #20]
  411898:	4448      	add	r0, r9
  41189a:	f004 fdbf 	bl	41641c <memcpy>

0041189e <.LVL328>:
    pkcsBlock[idx--] = 0x01; /* PS and M separator */
  41189e:	eb09 030b 	add.w	r3, r9, fp
  4118a2:	2201      	movs	r2, #1
  4118a4:	f809 200b 	strb.w	r2, [r9, fp]
    while (psLen > 0 && idx > 0) {
  4118a8:	f1b8 0f00 	cmp.w	r8, #0
  4118ac:	dd0f      	ble.n	4118ce <.LVL332>
  4118ae:	f1ba 0f00 	cmp.w	sl, #0
  4118b2:	d00c      	beq.n	4118ce <.LVL332>
        pkcsBlock[idx--] = 0x00;
  4118b4:	2200      	movs	r2, #0
  4118b6:	4651      	mov	r1, sl

004118b8 <.LVL329>:
  4118b8:	3901      	subs	r1, #1
  4118ba:	f803 2d01 	strb.w	r2, [r3, #-1]!
        psLen--;
  4118be:	f108 38ff 	add.w	r8, r8, #4294967295
    while (psLen > 0 && idx > 0) {
  4118c2:	f1b8 0f00 	cmp.w	r8, #0
  4118c6:	dd7b      	ble.n	4119c0 <.LVL356>
  4118c8:	2900      	cmp	r1, #0
  4118ca:	d1f5      	bne.n	4118b8 <.LVL329>
  4118cc:	468a      	mov	sl, r1

004118ce <.LVL332>:
    idx = idx - hLen + 1;
  4118ce:	9d07      	ldr	r5, [sp, #28]

004118d0 <.LVL333>:
  4118d0:	f1c5 0001 	rsb	r0, r5, #1
  4118d4:	4450      	add	r0, sl
    XMEMCPY(pkcsBlock + idx, lHash, hLen);
  4118d6:	462a      	mov	r2, r5
  4118d8:	a90a      	add	r1, sp, #40	; 0x28
  4118da:	4448      	add	r0, r9
  4118dc:	f004 fd9e 	bl	41641c <memcpy>

004118e0 <.LVL334>:
    if ((ret = CRYPT_RNG_BlockGenerate((CRYPT_RNG_CTX*)rng, seed, hLen)) != 0) {    
  4118e0:	462a      	mov	r2, r5
  4118e2:	a91a      	add	r1, sp, #104	; 0x68
  4118e4:	983c      	ldr	r0, [sp, #240]	; 0xf0
  4118e6:	f00b fe3b 	bl	41d560 <.LFE150>

004118ea <.LVL335>:
  4118ea:	4680      	mov	r8, r0

004118ec <.LVL336>:
  4118ec:	2800      	cmp	r0, #0
  4118ee:	f47f af1c 	bne.w	41172a <.LBE94>
    dbMask = (byte*)XMALLOC(pkcsBlockLen - hLen - 1, heap, DYNAMIC_TYPE_RSA);
  4118f2:	1e73      	subs	r3, r6, #1
  4118f4:	9d07      	ldr	r5, [sp, #28]
  4118f6:	eba3 0b05 	sub.w	fp, r3, r5
  4118fa:	4658      	mov	r0, fp

004118fc <.LVL337>:
  4118fc:	f00b ffd0 	bl	41d8a0 <.LFE189>

00411900 <.LVL338>:
    if (dbMask == NULL) {
  411900:	4682      	mov	sl, r0

00411902 <.LVL339>:
  411902:	2800      	cmp	r0, #0
  411904:	d074      	beq.n	4119f0 <.LVL365>
    XMEMSET(dbMask, 0, pkcsBlockLen - hLen - 1); /* help static analyzer */
  411906:	465a      	mov	r2, fp
  411908:	2100      	movs	r1, #0
  41190a:	f008 fa49 	bl	419da0 <.LFE166>

0041190e <.LVL340>:
    ret = RsaMGF(mgf, seed, hLen, dbMask, pkcsBlockLen - hLen - 1, heap);
  41190e:	9b08      	ldr	r3, [sp, #32]
  411910:	9301      	str	r3, [sp, #4]
  411912:	f8cd b000 	str.w	fp, [sp]
  411916:	4653      	mov	r3, sl
  411918:	462a      	mov	r2, r5
  41191a:	a91a      	add	r1, sp, #104	; 0x68
  41191c:	9839      	ldr	r0, [sp, #228]	; 0xe4
  41191e:	f009 fd88 	bl	41b432 <.LBE177>

00411922 <.LVL341>:
    if (ret != 0) {
  411922:	4680      	mov	r8, r0
  411924:	2800      	cmp	r0, #0
  411926:	d14d      	bne.n	4119c4 <.LBB105>

00411928 <.LVL342>:
    idx = hLen + 1;
  411928:	9a09      	ldr	r2, [sp, #36]	; 0x24
  41192a:	4615      	mov	r5, r2

0041192c <.LVL343>:
    while (idx < pkcsBlockLen && (word32)i < (pkcsBlockLen - hLen -1)) {
  41192c:	4296      	cmp	r6, r2
  41192e:	d917      	bls.n	411960 <.LBB104>
  411930:	f1bb 0f00 	cmp.w	fp, #0
  411934:	d014      	beq.n	411960 <.LBB104>
  411936:	4650      	mov	r0, sl

00411938 <.LVL344>:
  411938:	9b07      	ldr	r3, [sp, #28]
  41193a:	eb09 0103 	add.w	r1, r9, r3
  41193e:	eb0a 0e0b 	add.w	lr, sl, fp
  411942:	f8dd c018 	ldr.w	ip, [sp, #24]

00411946 <.LVL345>:
        pkcsBlock[idx] = dbMask[i++] ^ pkcsBlock[idx];
  411946:	f810 3b01 	ldrb.w	r3, [r0], #1
  41194a:	f891 8001 	ldrb.w	r8, [r1, #1]
  41194e:	ea83 0308 	eor.w	r3, r3, r8
  411952:	f801 3f01 	strb.w	r3, [r1, #1]!
        idx++;
  411956:	3201      	adds	r2, #1
    while (idx < pkcsBlockLen && (word32)i < (pkcsBlockLen - hLen -1)) {
  411958:	4594      	cmp	ip, r2
  41195a:	d901      	bls.n	411960 <.LBB104>
  41195c:	4570      	cmp	r0, lr
  41195e:	d1f2      	bne.n	411946 <.LVL345>

00411960 <.LBB104>:
    XFREE(dbMask, heap, DYNAMIC_TYPE_RSA);
  411960:	4650      	mov	r0, sl
  411962:	f00b ffa9 	bl	41d8b8 <.LFE2>

00411966 <.LBE104>:
    pkcsBlock[idx++] = 0x00;
  411966:	464b      	mov	r3, r9
  411968:	2200      	movs	r2, #0
  41196a:	f803 2b01 	strb.w	r2, [r3], #1
    if ((ret = RsaMGF(mgf, pkcsBlock + hLen + 1, pkcsBlockLen - hLen - 1,
  41196e:	9a07      	ldr	r2, [sp, #28]
  411970:	1c51      	adds	r1, r2, #1
  411972:	9808      	ldr	r0, [sp, #32]
  411974:	9001      	str	r0, [sp, #4]
  411976:	9200      	str	r2, [sp, #0]
  411978:	465a      	mov	r2, fp
  41197a:	4449      	add	r1, r9
  41197c:	9839      	ldr	r0, [sp, #228]	; 0xe4
  41197e:	f009 fd58 	bl	41b432 <.LBE177>

00411982 <.LVL349>:
  411982:	4680      	mov	r8, r0
  411984:	2800      	cmp	r0, #0
  411986:	f47f aed0 	bne.w	41172a <.LBE94>

0041198a <.LVL350>:
    while (idx < (word32)(hLen + 1) && i < hLen) {
  41198a:	9a07      	ldr	r2, [sp, #28]
  41198c:	2a00      	cmp	r2, #0
  41198e:	f77f aecc 	ble.w	41172a <.LBE94>
  411992:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411994:	2b01      	cmp	r3, #1
  411996:	f67f aec8 	bls.w	41172a <.LBE94>
  41199a:	4648      	mov	r0, r9

0041199c <.LVL351>:
  41199c:	f10d 0e67 	add.w	lr, sp, #103	; 0x67
  4119a0:	4641      	mov	r1, r8
  4119a2:	4694      	mov	ip, r2

004119a4 <.LVL352>:
        pkcsBlock[idx] = pkcsBlock[idx] ^ seed[i++];
  4119a4:	3101      	adds	r1, #1

004119a6 <.LVL353>:
  4119a6:	7843      	ldrb	r3, [r0, #1]
  4119a8:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  4119ac:	4053      	eors	r3, r2
  4119ae:	f800 3f01 	strb.w	r3, [r0, #1]!

004119b2 <.LVL354>:
    while (idx < (word32)(hLen + 1) && i < hLen) {
  4119b2:	1c4b      	adds	r3, r1, #1

004119b4 <.LVL355>:
  4119b4:	429d      	cmp	r5, r3
  4119b6:	f67f aeb8 	bls.w	41172a <.LBE94>
  4119ba:	458c      	cmp	ip, r1
  4119bc:	dcf2      	bgt.n	4119a4 <.LVL352>
  4119be:	e6b4      	b.n	41172a <.LBE94>

004119c0 <.LVL356>:
  4119c0:	468a      	mov	sl, r1
  4119c2:	e784      	b.n	4118ce <.LVL332>

004119c4 <.LBB105>:
        XFREE(dbMask, heap, DYNAMIC_TYPE_RSA);
  4119c4:	4650      	mov	r0, sl

004119c6 <.LVL358>:
  4119c6:	f00b ff77 	bl	41d8b8 <.LFE2>

004119ca <.LVL359>:
  4119ca:	e6ae      	b.n	41172a <.LBE94>

004119cc <.LBE105>:
        return BUFFER_E;
  4119cc:	f06f 0883 	mvn.w	r8, #131	; 0x83
  4119d0:	e6ab      	b.n	41172a <.LBE94>

004119d2 <.LVL361>:
        return hLen;
  4119d2:	f8dd 801c 	ldr.w	r8, [sp, #28]
  4119d6:	e6a8      	b.n	41172a <.LBE94>
            return MEMORY_E;
  4119d8:	f06f 087c 	mvn.w	r8, #124	; 0x7c
  4119dc:	e6a5      	b.n	41172a <.LBE94>

004119de <.LVL362>:
        return BAD_FUNC_ARG;
  4119de:	f06f 08ac 	mvn.w	r8, #172	; 0xac
  4119e2:	e6a2      	b.n	41172a <.LBE94>
        return BAD_FUNC_ARG;
  4119e4:	f06f 08ac 	mvn.w	r8, #172	; 0xac
  4119e8:	e69f      	b.n	41172a <.LBE94>

004119ea <.LVL363>:
        return BUFFER_E;
  4119ea:	f06f 0883 	mvn.w	r8, #131	; 0x83

004119ee <.LVL364>:
  4119ee:	e69c      	b.n	41172a <.LBE94>

004119f0 <.LVL365>:
        return MEMORY_E;
  4119f0:	f06f 087c 	mvn.w	r8, #124	; 0x7c

004119f4 <.LVL366>:
  4119f4:	e699      	b.n	41172a <.LBE94>

004119f6 <.LBE107>:
            key->state = RSA_STATE_ENCRYPT_RES;
  4119f6:	2203      	movs	r2, #3
  4119f8:	f241 134c 	movw	r3, #4428	; 0x114c
  4119fc:	50e2      	str	r2, [r4, r3]
  4119fe:	e6b1      	b.n	411764 <.LVL299+0x10>

00411a00 <.LVL368>:
        ret = BAD_STATE_E;
  411a00:	f06f 08bf 	mvn.w	r8, #191	; 0xbf
  411a04:	e6b5      	b.n	411772 <.LVL301>

00411a06 <.LVL369>:
        return BAD_FUNC_ARG;
  411a06:	f06f 08ac 	mvn.w	r8, #172	; 0xac
  411a0a:	e6bc      	b.n	411786 <.LVL303>
  411a0c:	f06f 08ac 	mvn.w	r8, #172	; 0xac
  411a10:	e6b9      	b.n	411786 <.LVL303>

00411a12 <.LVL370>:
        return RSA_BUFFER_E;
  411a12:	f06f 0882 	mvn.w	r8, #130	; 0x82
  411a16:	e6b6      	b.n	411786 <.LVL303>
        return WC_KEY_SIZE_E;
  411a18:	f06f 08e9 	mvn.w	r8, #233	; 0xe9
  411a1c:	e6b3      	b.n	411786 <.LVL303>
        return RSA_BUFFER_E;
  411a1e:	f06f 0882 	mvn.w	r8, #130	; 0x82
  411a22:	e6b0      	b.n	411786 <.LVL303>

00411a24 <.LBB108>:
        return BAD_FUNC_ARG;
  411a24:	f06f 08ac 	mvn.w	r8, #172	; 0xac
  411a28:	e6a6      	b.n	411778 <.LVL301+0x6>

00411a2a <.LVL372>:
            return RSA_PAD_E;
  411a2a:	f06f 08c8 	mvn.w	r8, #200	; 0xc8
  411a2e:	e6a3      	b.n	411778 <.LVL301+0x6>

00411a30 <.LBB100>:
            return RSA_PAD_E;
  411a30:	f06f 08c8 	mvn.w	r8, #200	; 0xc8

00411a34 <.LVL373>:
  411a34:	e6a0      	b.n	411778 <.LVL301+0x6>

Disassembly of section .text.send_tree%63:

00411a36 <send_tree>:
{
  411a36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00411a3a <.LCFI4>:
  411a3a:	b083      	sub	sp, #12

00411a3c <.LCFI5>:
    int nextlen = tree[0].Len; /* length of next code */
  411a3c:	f8b1 c002 	ldrh.w	ip, [r1, #2]

00411a40 <.LVL41>:
    if (nextlen == 0) max_count = 138, min_count = 3;
  411a40:	f1bc 0f00 	cmp.w	ip, #0
  411a44:	bf15      	itete	ne
  411a46:	2604      	movne	r6, #4
  411a48:	2603      	moveq	r6, #3
  411a4a:	2307      	movne	r3, #7
  411a4c:	238a      	moveq	r3, #138	; 0x8a

00411a4e <.LVL42>:
    for (n = 0; n <= max_code; n++) {
  411a4e:	2a00      	cmp	r2, #0
  411a50:	9201      	str	r2, [sp, #4]
  411a52:	f2c0 81b6 	blt.w	411dc2 <.LVL118>
  411a56:	4689      	mov	r9, r1
  411a58:	f04f 0a00 	mov.w	sl, #0
  411a5c:	f04f 32ff 	mov.w	r2, #4294967295

00411a60 <.LVL43>:
  411a60:	46d3      	mov	fp, sl

00411a62 <.LBB2>:
            do { send_code(s, curlen, s->bl_tree); } while (--count != 0);
  411a62:	f241 67bc 	movw	r7, #5820	; 0x16bc
  411a66:	4407      	add	r7, r0

00411a68 <.LBB3>:
  411a68:	f241 65b8 	movw	r5, #5816	; 0x16b8
  411a6c:	4405      	add	r5, r0

00411a6e <.LBE2>:
            max_count = 138, min_count = 3;
  411a6e:	f8cd c000 	str.w	ip, [sp]
  411a72:	e0be      	b.n	411bf2 <.LVL74>

00411a74 <.LBB5>:
            do { send_code(s, curlen, s->bl_tree); } while (--count != 0);
  411a74:	f8be 2a7c 	ldrh.w	r2, [lr, #2684]	; 0xa7c
  411a78:	409a      	lsls	r2, r3
  411a7a:	882e      	ldrh	r6, [r5, #0]
  411a7c:	4332      	orrs	r2, r6
  411a7e:	802a      	strh	r2, [r5, #0]
  411a80:	4423      	add	r3, r4
  411a82:	603b      	str	r3, [r7, #0]

00411a84 <.LBE5>:
  411a84:	f1bc 0c01 	subs.w	ip, ip, #1

00411a88 <.LVL46>:
  411a88:	f000 8099 	beq.w	411bbe <.LBE11>

00411a8c <.LBB6>:
  411a8c:	f8be 4a7e 	ldrh.w	r4, [lr, #2686]	; 0xa7e

00411a90 <.LVL48>:
  411a90:	683b      	ldr	r3, [r7, #0]
  411a92:	f1c4 0210 	rsb	r2, r4, #16
  411a96:	4293      	cmp	r3, r2
  411a98:	ddec      	ble.n	411a74 <.LBB5>

00411a9a <.LBB4>:
  411a9a:	f8be 6a7c 	ldrh.w	r6, [lr, #2684]	; 0xa7c

00411a9e <.LVL49>:
  411a9e:	fa06 f203 	lsl.w	r2, r6, r3
  411aa2:	882b      	ldrh	r3, [r5, #0]
  411aa4:	431a      	orrs	r2, r3
  411aa6:	b212      	sxth	r2, r2
  411aa8:	802a      	strh	r2, [r5, #0]
  411aaa:	6943      	ldr	r3, [r0, #20]
  411aac:	f103 0a01 	add.w	sl, r3, #1
  411ab0:	f8c0 a014 	str.w	sl, [r0, #20]
  411ab4:	6881      	ldr	r1, [r0, #8]
  411ab6:	54ca      	strb	r2, [r1, r3]
  411ab8:	6943      	ldr	r3, [r0, #20]
  411aba:	1c5a      	adds	r2, r3, #1
  411abc:	6142      	str	r2, [r0, #20]
  411abe:	882a      	ldrh	r2, [r5, #0]
  411ac0:	0a12      	lsrs	r2, r2, #8
  411ac2:	6881      	ldr	r1, [r0, #8]
  411ac4:	54ca      	strb	r2, [r1, r3]
  411ac6:	683a      	ldr	r2, [r7, #0]
  411ac8:	f1c2 0310 	rsb	r3, r2, #16
  411acc:	411e      	asrs	r6, r3

00411ace <.LVL50>:
  411ace:	802e      	strh	r6, [r5, #0]
  411ad0:	f1a4 0310 	sub.w	r3, r4, #16
  411ad4:	4413      	add	r3, r2
  411ad6:	603b      	str	r3, [r7, #0]

00411ad8 <.LBE4>:
  411ad8:	e7d4      	b.n	411a84 <.LBE5>

00411ada <.LBE6>:
        } else if (curlen != 0) {
  411ada:	9b00      	ldr	r3, [sp, #0]

00411adc <.LVL52>:
  411adc:	2b00      	cmp	r3, #0
  411ade:	f000 80b8 	beq.w	411c52 <.LBE15>
            if (curlen != prevlen) {
  411ae2:	429a      	cmp	r2, r3
  411ae4:	f000 80a0 	beq.w	411c28 <.LBE13>
  411ae8:	eb00 0283 	add.w	r2, r0, r3, lsl #2

00411aec <.LBB7>:
                send_code(s, curlen, s->bl_tree); count--;
  411aec:	f8b2 1a7e 	ldrh.w	r1, [r2, #2686]	; 0xa7e

00411af0 <.LVL54>:
  411af0:	683b      	ldr	r3, [r7, #0]
  411af2:	f1c1 0410 	rsb	r4, r1, #16
  411af6:	42a3      	cmp	r3, r4
  411af8:	f340 808d 	ble.w	411c16 <.LBB13>

00411afc <.LBB8>:
  411afc:	f8b2 4a7c 	ldrh.w	r4, [r2, #2684]	; 0xa7c

00411b00 <.LVL55>:
  411b00:	fa04 f203 	lsl.w	r2, r4, r3
  411b04:	882b      	ldrh	r3, [r5, #0]
  411b06:	431a      	orrs	r2, r3
  411b08:	b212      	sxth	r2, r2
  411b0a:	802a      	strh	r2, [r5, #0]
  411b0c:	6946      	ldr	r6, [r0, #20]

00411b0e <.LVL56>:
  411b0e:	1c73      	adds	r3, r6, #1
  411b10:	6143      	str	r3, [r0, #20]
  411b12:	6883      	ldr	r3, [r0, #8]
  411b14:	559a      	strb	r2, [r3, r6]
  411b16:	6883      	ldr	r3, [r0, #8]
  411b18:	6946      	ldr	r6, [r0, #20]
  411b1a:	1c72      	adds	r2, r6, #1
  411b1c:	6142      	str	r2, [r0, #20]
  411b1e:	882a      	ldrh	r2, [r5, #0]
  411b20:	0a12      	lsrs	r2, r2, #8
  411b22:	559a      	strb	r2, [r3, r6]
  411b24:	683b      	ldr	r3, [r7, #0]
  411b26:	f1c3 0210 	rsb	r2, r3, #16
  411b2a:	4114      	asrs	r4, r2

00411b2c <.LVL57>:
  411b2c:	802c      	strh	r4, [r5, #0]
  411b2e:	3910      	subs	r1, #16

00411b30 <.LVL58>:
  411b30:	4419      	add	r1, r3

00411b32 <.LVL59>:
  411b32:	6039      	str	r1, [r7, #0]

00411b34 <.LBB9>:
            send_code(s, REP_3_6, s->bl_tree); send_bits(s, count-3, 2);
  411b34:	f8b0 1abe 	ldrh.w	r1, [r0, #2750]	; 0xabe

00411b38 <.LVL61>:
  411b38:	683b      	ldr	r3, [r7, #0]
  411b3a:	f1c1 0210 	rsb	r2, r1, #16
  411b3e:	4293      	cmp	r3, r2
  411b40:	dd74      	ble.n	411c2c <.LBB14>

00411b42 <.LBB10>:
  411b42:	f8b0 4abc 	ldrh.w	r4, [r0, #2748]	; 0xabc

00411b46 <.LVL62>:
  411b46:	fa04 f203 	lsl.w	r2, r4, r3
  411b4a:	882b      	ldrh	r3, [r5, #0]
  411b4c:	431a      	orrs	r2, r3
  411b4e:	b212      	sxth	r2, r2
  411b50:	802a      	strh	r2, [r5, #0]
  411b52:	6946      	ldr	r6, [r0, #20]
  411b54:	1c73      	adds	r3, r6, #1
  411b56:	6143      	str	r3, [r0, #20]
  411b58:	6883      	ldr	r3, [r0, #8]
  411b5a:	559a      	strb	r2, [r3, r6]
  411b5c:	6883      	ldr	r3, [r0, #8]
  411b5e:	6946      	ldr	r6, [r0, #20]
  411b60:	1c72      	adds	r2, r6, #1
  411b62:	6142      	str	r2, [r0, #20]
  411b64:	882a      	ldrh	r2, [r5, #0]
  411b66:	0a12      	lsrs	r2, r2, #8
  411b68:	559a      	strb	r2, [r3, r6]
  411b6a:	683b      	ldr	r3, [r7, #0]
  411b6c:	f1c3 0210 	rsb	r2, r3, #16
  411b70:	4114      	asrs	r4, r2

00411b72 <.LVL63>:
  411b72:	802c      	strh	r4, [r5, #0]
  411b74:	3910      	subs	r1, #16

00411b76 <.LVL64>:
  411b76:	4419      	add	r1, r3

00411b78 <.LVL65>:
  411b78:	6039      	str	r1, [r7, #0]

00411b7a <.LBB11>:
  411b7a:	683b      	ldr	r3, [r7, #0]
  411b7c:	2b0e      	cmp	r3, #14
  411b7e:	dd5e      	ble.n	411c3e <.LBB15>

00411b80 <.LBB12>:
  411b80:	f1aa 0a03 	sub.w	sl, sl, #3

00411b84 <.LVL68>:
  411b84:	fa1f fa8a 	uxth.w	sl, sl

00411b88 <.LVL69>:
  411b88:	fa0a f203 	lsl.w	r2, sl, r3
  411b8c:	882b      	ldrh	r3, [r5, #0]
  411b8e:	431a      	orrs	r2, r3
  411b90:	b212      	sxth	r2, r2
  411b92:	802a      	strh	r2, [r5, #0]
  411b94:	6883      	ldr	r3, [r0, #8]
  411b96:	6941      	ldr	r1, [r0, #20]
  411b98:	1c4c      	adds	r4, r1, #1
  411b9a:	6144      	str	r4, [r0, #20]
  411b9c:	545a      	strb	r2, [r3, r1]
  411b9e:	6883      	ldr	r3, [r0, #8]
  411ba0:	6941      	ldr	r1, [r0, #20]
  411ba2:	1c4a      	adds	r2, r1, #1
  411ba4:	6142      	str	r2, [r0, #20]
  411ba6:	882a      	ldrh	r2, [r5, #0]
  411ba8:	0a12      	lsrs	r2, r2, #8
  411baa:	545a      	strb	r2, [r3, r1]
  411bac:	683b      	ldr	r3, [r7, #0]
  411bae:	f1c3 0210 	rsb	r2, r3, #16
  411bb2:	fa4a fa02 	asr.w	sl, sl, r2
  411bb6:	f8a5 a000 	strh.w	sl, [r5]
  411bba:	3b0e      	subs	r3, #14
  411bbc:	603b      	str	r3, [r7, #0]

00411bbe <.LBE11>:
        if (nextlen == 0) {
  411bbe:	f1b8 0f00 	cmp.w	r8, #0
  411bc2:	f000 80f9 	beq.w	411db8 <.LVL117>
        } else if (curlen == nextlen) {
  411bc6:	9900      	ldr	r1, [sp, #0]
  411bc8:	460a      	mov	r2, r1
  411bca:	4588      	cmp	r8, r1
  411bcc:	bf0c      	ite	eq
  411bce:	2603      	moveq	r6, #3
  411bd0:	2604      	movne	r6, #4
  411bd2:	4588      	cmp	r8, r1
  411bd4:	bf0c      	ite	eq
  411bd6:	2306      	moveq	r3, #6
  411bd8:	2307      	movne	r3, #7
  411bda:	f04f 0a00 	mov.w	sl, #0

00411bde <.LVL71>:
    for (n = 0; n <= max_code; n++) {
  411bde:	f10b 0b01 	add.w	fp, fp, #1
  411be2:	f109 0904 	add.w	r9, r9, #4
        curlen = nextlen; nextlen = tree[n+1].Len;
  411be6:	f8cd 8000 	str.w	r8, [sp]

00411bea <.LVL73>:
    for (n = 0; n <= max_code; n++) {
  411bea:	9901      	ldr	r1, [sp, #4]
  411bec:	4559      	cmp	r1, fp
  411bee:	f2c0 80e8 	blt.w	411dc2 <.LVL118>

00411bf2 <.LVL74>:
        curlen = nextlen; nextlen = tree[n+1].Len;
  411bf2:	f8b9 8006 	ldrh.w	r8, [r9, #6]

00411bf6 <.LVL75>:
        if (++count < max_count && curlen == nextlen) {
  411bf6:	f10a 0101 	add.w	r1, sl, #1

00411bfa <.LVL76>:
  411bfa:	4299      	cmp	r1, r3
  411bfc:	da03      	bge.n	411c06 <.LVL76+0xc>
  411bfe:	9c00      	ldr	r4, [sp, #0]
  411c00:	45a0      	cmp	r8, r4
  411c02:	f000 80d7 	beq.w	411db4 <.LBE27>
        } else if (count < min_count) {
  411c06:	42b1      	cmp	r1, r6
  411c08:	f6bf af67 	bge.w	411ada <.LBE6>
  411c0c:	9b00      	ldr	r3, [sp, #0]

00411c0e <.LVL77>:
  411c0e:	eb00 0e83 	add.w	lr, r0, r3, lsl #2
  411c12:	468c      	mov	ip, r1
  411c14:	e73a      	b.n	411a8c <.LBB6>

00411c16 <.LBB13>:
                send_code(s, curlen, s->bl_tree); count--;
  411c16:	f8b2 2a7c 	ldrh.w	r2, [r2, #2684]	; 0xa7c
  411c1a:	409a      	lsls	r2, r3
  411c1c:	882c      	ldrh	r4, [r5, #0]
  411c1e:	4322      	orrs	r2, r4
  411c20:	802a      	strh	r2, [r5, #0]
  411c22:	4419      	add	r1, r3

00411c24 <.LVL79>:
  411c24:	6039      	str	r1, [r7, #0]
  411c26:	e785      	b.n	411b34 <.LBB9>

00411c28 <.LBE13>:
        if (++count < max_count && curlen == nextlen) {
  411c28:	468a      	mov	sl, r1
  411c2a:	e783      	b.n	411b34 <.LBB9>

00411c2c <.LBB14>:
            send_code(s, REP_3_6, s->bl_tree); send_bits(s, count-3, 2);
  411c2c:	f8b0 2abc 	ldrh.w	r2, [r0, #2748]	; 0xabc
  411c30:	409a      	lsls	r2, r3
  411c32:	882c      	ldrh	r4, [r5, #0]
  411c34:	4322      	orrs	r2, r4
  411c36:	802a      	strh	r2, [r5, #0]
  411c38:	4419      	add	r1, r3

00411c3a <.LVL82>:
  411c3a:	6039      	str	r1, [r7, #0]
  411c3c:	e79d      	b.n	411b7a <.LBB11>

00411c3e <.LBB15>:
  411c3e:	f1aa 0203 	sub.w	r2, sl, #3
  411c42:	b292      	uxth	r2, r2
  411c44:	409a      	lsls	r2, r3
  411c46:	8829      	ldrh	r1, [r5, #0]
  411c48:	430a      	orrs	r2, r1
  411c4a:	802a      	strh	r2, [r5, #0]
  411c4c:	3302      	adds	r3, #2
  411c4e:	603b      	str	r3, [r7, #0]
  411c50:	e7b5      	b.n	411bbe <.LBE11>

00411c52 <.LBE15>:
        } else if (count <= 10) {
  411c52:	290a      	cmp	r1, #10
  411c54:	dc56      	bgt.n	411d04 <.LBB22>

00411c56 <.LBB16>:
            send_code(s, REPZ_3_10, s->bl_tree); send_bits(s, count-3, 3);
  411c56:	f8b0 4ac2 	ldrh.w	r4, [r0, #2754]	; 0xac2

00411c5a <.LVL85>:
  411c5a:	683b      	ldr	r3, [r7, #0]
  411c5c:	f1c4 0210 	rsb	r2, r4, #16

00411c60 <.LVL86>:
  411c60:	4293      	cmp	r3, r2
  411c62:	dd3d      	ble.n	411ce0 <.LBB20>

00411c64 <.LBB17>:
  411c64:	f8b0 cac0 	ldrh.w	ip, [r0, #2752]	; 0xac0

00411c68 <.LVL87>:
  411c68:	fa0c f203 	lsl.w	r2, ip, r3
  411c6c:	882b      	ldrh	r3, [r5, #0]
  411c6e:	431a      	orrs	r2, r3
  411c70:	b212      	sxth	r2, r2
  411c72:	802a      	strh	r2, [r5, #0]
  411c74:	6946      	ldr	r6, [r0, #20]

00411c76 <.LVL88>:
  411c76:	1c73      	adds	r3, r6, #1
  411c78:	6143      	str	r3, [r0, #20]
  411c7a:	6883      	ldr	r3, [r0, #8]
  411c7c:	559a      	strb	r2, [r3, r6]
  411c7e:	6883      	ldr	r3, [r0, #8]
  411c80:	6946      	ldr	r6, [r0, #20]
  411c82:	1c72      	adds	r2, r6, #1
  411c84:	6142      	str	r2, [r0, #20]
  411c86:	882a      	ldrh	r2, [r5, #0]
  411c88:	0a12      	lsrs	r2, r2, #8
  411c8a:	559a      	strb	r2, [r3, r6]
  411c8c:	683b      	ldr	r3, [r7, #0]
  411c8e:	f1c3 0210 	rsb	r2, r3, #16
  411c92:	fa4c fc02 	asr.w	ip, ip, r2

00411c96 <.LVL89>:
  411c96:	f8a5 c000 	strh.w	ip, [r5]
  411c9a:	3c10      	subs	r4, #16

00411c9c <.LVL90>:
  411c9c:	4423      	add	r3, r4
  411c9e:	603b      	str	r3, [r7, #0]

00411ca0 <.LBB18>:
  411ca0:	683b      	ldr	r3, [r7, #0]
  411ca2:	2b0d      	cmp	r3, #13
  411ca4:	dd25      	ble.n	411cf2 <.LBB21>

00411ca6 <.LBB19>:
  411ca6:	f1aa 0202 	sub.w	r2, sl, #2

00411caa <.LVL93>:
  411caa:	b292      	uxth	r2, r2

00411cac <.LVL94>:
  411cac:	fa02 f103 	lsl.w	r1, r2, r3

00411cb0 <.LVL95>:
  411cb0:	882b      	ldrh	r3, [r5, #0]
  411cb2:	4319      	orrs	r1, r3
  411cb4:	b209      	sxth	r1, r1
  411cb6:	8029      	strh	r1, [r5, #0]
  411cb8:	6883      	ldr	r3, [r0, #8]
  411cba:	6944      	ldr	r4, [r0, #20]
  411cbc:	1c66      	adds	r6, r4, #1
  411cbe:	6146      	str	r6, [r0, #20]
  411cc0:	5519      	strb	r1, [r3, r4]
  411cc2:	6883      	ldr	r3, [r0, #8]
  411cc4:	6944      	ldr	r4, [r0, #20]
  411cc6:	1c61      	adds	r1, r4, #1
  411cc8:	6141      	str	r1, [r0, #20]
  411cca:	8829      	ldrh	r1, [r5, #0]
  411ccc:	0a09      	lsrs	r1, r1, #8
  411cce:	5519      	strb	r1, [r3, r4]
  411cd0:	683b      	ldr	r3, [r7, #0]
  411cd2:	f1c3 0110 	rsb	r1, r3, #16
  411cd6:	410a      	asrs	r2, r1
  411cd8:	802a      	strh	r2, [r5, #0]
  411cda:	3b0d      	subs	r3, #13
  411cdc:	603b      	str	r3, [r7, #0]

00411cde <.LBE19>:
  411cde:	e76e      	b.n	411bbe <.LBE11>

00411ce0 <.LBB20>:
  411ce0:	f8b0 2ac0 	ldrh.w	r2, [r0, #2752]	; 0xac0
  411ce4:	409a      	lsls	r2, r3
  411ce6:	882e      	ldrh	r6, [r5, #0]

00411ce8 <.LVL97>:
  411ce8:	4332      	orrs	r2, r6
  411cea:	802a      	strh	r2, [r5, #0]
  411cec:	4423      	add	r3, r4
  411cee:	603b      	str	r3, [r7, #0]
  411cf0:	e7d6      	b.n	411ca0 <.LBB18>

00411cf2 <.LBB21>:
  411cf2:	1eca      	subs	r2, r1, #3
  411cf4:	b292      	uxth	r2, r2
  411cf6:	409a      	lsls	r2, r3
  411cf8:	8829      	ldrh	r1, [r5, #0]

00411cfa <.LVL99>:
  411cfa:	430a      	orrs	r2, r1
  411cfc:	802a      	strh	r2, [r5, #0]
  411cfe:	3303      	adds	r3, #3
  411d00:	603b      	str	r3, [r7, #0]
  411d02:	e75c      	b.n	411bbe <.LBE11>

00411d04 <.LBB22>:
            send_code(s, REPZ_11_138, s->bl_tree); send_bits(s, count-11, 7);
  411d04:	f8b0 4ac6 	ldrh.w	r4, [r0, #2758]	; 0xac6

00411d08 <.LVL101>:
  411d08:	683b      	ldr	r3, [r7, #0]
  411d0a:	f1c4 0210 	rsb	r2, r4, #16

00411d0e <.LVL102>:
  411d0e:	4293      	cmp	r3, r2
  411d10:	dd3d      	ble.n	411d8e <.LBB26>

00411d12 <.LBB23>:
  411d12:	f8b0 cac4 	ldrh.w	ip, [r0, #2756]	; 0xac4

00411d16 <.LVL103>:
  411d16:	fa0c f203 	lsl.w	r2, ip, r3
  411d1a:	882b      	ldrh	r3, [r5, #0]
  411d1c:	431a      	orrs	r2, r3
  411d1e:	b212      	sxth	r2, r2
  411d20:	802a      	strh	r2, [r5, #0]
  411d22:	6946      	ldr	r6, [r0, #20]

00411d24 <.LVL104>:
  411d24:	1c73      	adds	r3, r6, #1
  411d26:	6143      	str	r3, [r0, #20]
  411d28:	6883      	ldr	r3, [r0, #8]
  411d2a:	559a      	strb	r2, [r3, r6]
  411d2c:	6883      	ldr	r3, [r0, #8]
  411d2e:	6946      	ldr	r6, [r0, #20]
  411d30:	1c72      	adds	r2, r6, #1
  411d32:	6142      	str	r2, [r0, #20]
  411d34:	882a      	ldrh	r2, [r5, #0]
  411d36:	0a12      	lsrs	r2, r2, #8
  411d38:	559a      	strb	r2, [r3, r6]
  411d3a:	683b      	ldr	r3, [r7, #0]
  411d3c:	f1c3 0210 	rsb	r2, r3, #16
  411d40:	fa4c fc02 	asr.w	ip, ip, r2

00411d44 <.LVL105>:
  411d44:	f8a5 c000 	strh.w	ip, [r5]
  411d48:	3c10      	subs	r4, #16

00411d4a <.LVL106>:
  411d4a:	4423      	add	r3, r4
  411d4c:	603b      	str	r3, [r7, #0]

00411d4e <.LBB24>:
  411d4e:	683b      	ldr	r3, [r7, #0]
  411d50:	2b09      	cmp	r3, #9
  411d52:	dd25      	ble.n	411da0 <.LBB27>

00411d54 <.LBB25>:
  411d54:	f1aa 020a 	sub.w	r2, sl, #10

00411d58 <.LVL109>:
  411d58:	b292      	uxth	r2, r2

00411d5a <.LVL110>:
  411d5a:	fa02 f103 	lsl.w	r1, r2, r3

00411d5e <.LVL111>:
  411d5e:	882b      	ldrh	r3, [r5, #0]
  411d60:	4319      	orrs	r1, r3
  411d62:	b209      	sxth	r1, r1
  411d64:	8029      	strh	r1, [r5, #0]
  411d66:	6883      	ldr	r3, [r0, #8]
  411d68:	6944      	ldr	r4, [r0, #20]
  411d6a:	1c66      	adds	r6, r4, #1
  411d6c:	6146      	str	r6, [r0, #20]
  411d6e:	5519      	strb	r1, [r3, r4]
  411d70:	6883      	ldr	r3, [r0, #8]
  411d72:	6944      	ldr	r4, [r0, #20]
  411d74:	1c61      	adds	r1, r4, #1
  411d76:	6141      	str	r1, [r0, #20]
  411d78:	8829      	ldrh	r1, [r5, #0]
  411d7a:	0a09      	lsrs	r1, r1, #8
  411d7c:	5519      	strb	r1, [r3, r4]
  411d7e:	683b      	ldr	r3, [r7, #0]
  411d80:	f1c3 0110 	rsb	r1, r3, #16
  411d84:	410a      	asrs	r2, r1
  411d86:	802a      	strh	r2, [r5, #0]
  411d88:	3b09      	subs	r3, #9
  411d8a:	603b      	str	r3, [r7, #0]

00411d8c <.LBE25>:
  411d8c:	e717      	b.n	411bbe <.LBE11>

00411d8e <.LBB26>:
  411d8e:	f8b0 2ac4 	ldrh.w	r2, [r0, #2756]	; 0xac4
  411d92:	409a      	lsls	r2, r3
  411d94:	882e      	ldrh	r6, [r5, #0]

00411d96 <.LVL113>:
  411d96:	4332      	orrs	r2, r6
  411d98:	802a      	strh	r2, [r5, #0]
  411d9a:	4423      	add	r3, r4
  411d9c:	603b      	str	r3, [r7, #0]
  411d9e:	e7d6      	b.n	411d4e <.LBB24>

00411da0 <.LBB27>:
  411da0:	f1a1 020b 	sub.w	r2, r1, #11
  411da4:	b292      	uxth	r2, r2
  411da6:	409a      	lsls	r2, r3
  411da8:	8829      	ldrh	r1, [r5, #0]

00411daa <.LVL115>:
  411daa:	430a      	orrs	r2, r1
  411dac:	802a      	strh	r2, [r5, #0]
  411dae:	3307      	adds	r3, #7
  411db0:	603b      	str	r3, [r7, #0]
  411db2:	e704      	b.n	411bbe <.LBE11>

00411db4 <.LBE27>:
        if (++count < max_count && curlen == nextlen) {
  411db4:	468a      	mov	sl, r1
  411db6:	e712      	b.n	411bde <.LVL71>

00411db8 <.LVL117>:
        count = 0; prevlen = curlen;
  411db8:	46c2      	mov	sl, r8
  411dba:	9a00      	ldr	r2, [sp, #0]
            max_count = 138, min_count = 3;
  411dbc:	2603      	movs	r6, #3
  411dbe:	238a      	movs	r3, #138	; 0x8a
  411dc0:	e70d      	b.n	411bde <.LVL71>

00411dc2 <.LVL118>:
}
  411dc2:	b003      	add	sp, #12

00411dc4 <.LCFI6>:
  411dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section .text.deflate_slow%64:

00411dc8 <deflate_slow>:
{
  411dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

00411dcc <.LCFI7>:
  411dcc:	4604      	mov	r4, r0
  411dce:	460e      	mov	r6, r1

00411dd0 <.LBB12>:
            _tr_tally_lit(s, s->window[s->strstart-1], bflush);
  411dd0:	f241 65a4 	movw	r5, #5796	; 0x16a4
  411dd4:	4405      	add	r5, r0

00411dd6 <.LBB13>:
            _tr_tally_dist(s, s->strstart -1 - s->prev_match,
  411dd6:	f8df 9360 	ldr.w	r9, [pc, #864]	; 412138 <.LVL165+0x4>
  411dda:	e0b3      	b.n	411f44 <.LVL139+0x10>

00411ddc <.LBE13>:
            fill_window(s);
  411ddc:	4620      	mov	r0, r4
  411dde:	f002 ff11 	bl	414c04 <fill_window>

00411de2 <.LVL116>:
            if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {
  411de2:	6f63      	ldr	r3, [r4, #116]	; 0x74
  411de4:	b91e      	cbnz	r6, 411dee <.LVL116+0xc>
  411de6:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
  411dea:	f0c0 815a 	bcc.w	4120a2 <.LVL155+0x18>
            if (s->lookahead == 0) break; /* flush the current block */
  411dee:	2b00      	cmp	r3, #0
  411df0:	f040 80ad 	bne.w	411f4e <.LVL140>
    if (s->match_available) {
  411df4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
  411df6:	b1e3      	cbz	r3, 411e32 <.LVL120>

00411df8 <.LBB17>:
        _tr_tally_lit(s, s->window[s->strstart-1], bflush);
  411df8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  411dfa:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  411dfc:	4413      	add	r3, r2
  411dfe:	f813 3c01 	ldrb.w	r3, [r3, #-1]

00411e02 <.LVL117>:
  411e02:	f504 52b5 	add.w	r2, r4, #5792	; 0x16a0
  411e06:	6815      	ldr	r5, [r2, #0]
  411e08:	f241 61a4 	movw	r1, #5796	; 0x16a4
  411e0c:	5860      	ldr	r0, [r4, r1]
  411e0e:	2100      	movs	r1, #0
  411e10:	f820 1015 	strh.w	r1, [r0, r5, lsl #1]
  411e14:	f241 6098 	movw	r0, #5784	; 0x1698
  411e18:	5825      	ldr	r5, [r4, r0]
  411e1a:	6810      	ldr	r0, [r2, #0]
  411e1c:	1c47      	adds	r7, r0, #1
  411e1e:	6017      	str	r7, [r2, #0]
  411e20:	542b      	strb	r3, [r5, r0]
  411e22:	eb04 0383 	add.w	r3, r4, r3, lsl #2

00411e26 <.LVL118>:
  411e26:	f8b3 2094 	ldrh.w	r2, [r3, #148]	; 0x94
  411e2a:	3201      	adds	r2, #1
  411e2c:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

00411e30 <.LBE17>:
        s->match_available = 0;
  411e30:	66a1      	str	r1, [r4, #104]	; 0x68

00411e32 <.LVL120>:
    s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;
  411e32:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  411e34:	4611      	mov	r1, r2
  411e36:	2a02      	cmp	r2, #2
  411e38:	bf28      	it	cs
  411e3a:	2102      	movcs	r1, #2
  411e3c:	f241 63b4 	movw	r3, #5812	; 0x16b4
  411e40:	50e1      	str	r1, [r4, r3]
    if (flush == Z_FINISH) {
  411e42:	2e04      	cmp	r6, #4
  411e44:	f000 8112 	beq.w	41206c <.LBE19>
    if (s->last_lit)
  411e48:	f504 53b5 	add.w	r3, r4, #5792	; 0x16a0
  411e4c:	681b      	ldr	r3, [r3, #0]
  411e4e:	2b00      	cmp	r3, #0
  411e50:	f000 812a 	beq.w	4120a8 <.LVL155+0x1e>
        FLUSH_BLOCK(s, 0);
  411e54:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  411e56:	2800      	cmp	r0, #0
  411e58:	f2c0 8121 	blt.w	41209e <.LVL155+0x14>
  411e5c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  411e5e:	4401      	add	r1, r0
  411e60:	2300      	movs	r3, #0
  411e62:	1a12      	subs	r2, r2, r0
  411e64:	4620      	mov	r0, r4
  411e66:	f7fd f977 	bl	40f158 <_tr_flush_block>

00411e6a <.LVL121>:
  411e6a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  411e6c:	65e3      	str	r3, [r4, #92]	; 0x5c
  411e6e:	6820      	ldr	r0, [r4, #0]
  411e70:	f00a fa36 	bl	41c2e0 <.LFE41>

00411e74 <.LVL122>:
  411e74:	6823      	ldr	r3, [r4, #0]
  411e76:	6918      	ldr	r0, [r3, #16]
                return need_more;
  411e78:	3000      	adds	r0, #0
  411e7a:	bf18      	it	ne
  411e7c:	2001      	movne	r0, #1
  411e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00411e82 <.LBB15>:
            _tr_tally_dist(s, s->strstart -1 - s->prev_match,
  411e82:	4bac      	ldr	r3, [pc, #688]	; (412134 <.LVL165>)
  411e84:	eb03 11d1 	add.w	r1, r3, r1, lsr #7

00411e88 <.LVL124>:
  411e88:	f891 3100 	ldrb.w	r3, [r1, #256]	; 0x100
  411e8c:	e0d6      	b.n	41203c <.LVL151>

00411e8e <.LBE15>:
            } while (--s->prev_length != 0);
  411e8e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  411e90:	3b01      	subs	r3, #1
  411e92:	67a3      	str	r3, [r4, #120]	; 0x78
  411e94:	b1e3      	cbz	r3, 411ed0 <.LVL127+0x6>
                if (++s->strstart <= max_insert) {
  411e96:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  411e98:	1c4f      	adds	r7, r1, #1
  411e9a:	66e7      	str	r7, [r4, #108]	; 0x6c
  411e9c:	42ba      	cmp	r2, r7
  411e9e:	d3f6      	bcc.n	411e8e <.LBE15>
                    INSERT_STRING(s, s->strstart, hash_head);
  411ea0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  411ea2:	440b      	add	r3, r1
  411ea4:	78d8      	ldrb	r0, [r3, #3]
  411ea6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  411ea8:	6da1      	ldr	r1, [r4, #88]	; 0x58
  411eaa:	408b      	lsls	r3, r1
  411eac:	4043      	eors	r3, r0
  411eae:	6d60      	ldr	r0, [r4, #84]	; 0x54
  411eb0:	4003      	ands	r3, r0
  411eb2:	64a3      	str	r3, [r4, #72]	; 0x48
  411eb4:	6c60      	ldr	r0, [r4, #68]	; 0x44
  411eb6:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
  411eba:	6b63      	ldr	r3, [r4, #52]	; 0x34
  411ebc:	403b      	ands	r3, r7
  411ebe:	6c21      	ldr	r1, [r4, #64]	; 0x40
  411ec0:	f821 0013 	strh.w	r0, [r1, r3, lsl #1]

00411ec4 <.LVL126>:
  411ec4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  411ec6:	6c63      	ldr	r3, [r4, #68]	; 0x44
  411ec8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c

00411eca <.LVL127>:
  411eca:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
  411ece:	e7de      	b.n	411e8e <.LBE15>
            s->match_available = 0;
  411ed0:	66a3      	str	r3, [r4, #104]	; 0x68
            s->match_length = MIN_MATCH-1;
  411ed2:	2302      	movs	r3, #2
  411ed4:	6623      	str	r3, [r4, #96]	; 0x60
            s->strstart++;
  411ed6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c

00411ed8 <.LVL128>:
  411ed8:	3201      	adds	r2, #1
  411eda:	66e2      	str	r2, [r4, #108]	; 0x6c
            if (bflush) FLUSH_BLOCK(s, 0);
  411edc:	45f4      	cmp	ip, lr
  411ede:	d131      	bne.n	411f44 <.LVL139+0x10>
  411ee0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  411ee2:	2800      	cmp	r0, #0
  411ee4:	db11      	blt.n	411f0a <.LVL131>
  411ee6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  411ee8:	4401      	add	r1, r0
  411eea:	2300      	movs	r3, #0
  411eec:	1a12      	subs	r2, r2, r0
  411eee:	4620      	mov	r0, r4
  411ef0:	f7fd f932 	bl	40f158 <_tr_flush_block>

00411ef4 <.LVL129>:
  411ef4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  411ef6:	65e3      	str	r3, [r4, #92]	; 0x5c
  411ef8:	6820      	ldr	r0, [r4, #0]
  411efa:	f00a f9f1 	bl	41c2e0 <.LFE41>

00411efe <.LVL130>:
  411efe:	6823      	ldr	r3, [r4, #0]
  411f00:	691b      	ldr	r3, [r3, #16]
  411f02:	b9fb      	cbnz	r3, 411f44 <.LVL139+0x10>
  411f04:	2000      	movs	r0, #0
  411f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00411f0a <.LVL131>:
  411f0a:	2100      	movs	r1, #0
  411f0c:	e7ed      	b.n	411eea <.LVL128+0x12>

00411f0e <.LBE18>:
                FLUSH_BLOCK_ONLY(s, 0);
  411f0e:	6de2      	ldr	r2, [r4, #92]	; 0x5c

00411f10 <.LVL133>:
  411f10:	2a00      	cmp	r2, #0
  411f12:	db0d      	blt.n	411f30 <.LVL137>
  411f14:	6ba1      	ldr	r1, [r4, #56]	; 0x38

00411f16 <.LVL134>:
  411f16:	4411      	add	r1, r2
  411f18:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  411f1a:	2300      	movs	r3, #0
  411f1c:	1a82      	subs	r2, r0, r2
  411f1e:	4620      	mov	r0, r4
  411f20:	f7fd f91a 	bl	40f158 <_tr_flush_block>

00411f24 <.LVL135>:
  411f24:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  411f26:	65e3      	str	r3, [r4, #92]	; 0x5c
  411f28:	6820      	ldr	r0, [r4, #0]
  411f2a:	f00a f9d9 	bl	41c2e0 <.LFE41>

00411f2e <.LVL136>:
  411f2e:	e0f3      	b.n	412118 <.LVL164>

00411f30 <.LVL137>:
  411f30:	2100      	movs	r1, #0

00411f32 <.LVL138>:
  411f32:	e7f1      	b.n	411f18 <.LVL134+0x2>

00411f34 <.LVL139>:
            s->match_available = 1;
  411f34:	2301      	movs	r3, #1
  411f36:	66a3      	str	r3, [r4, #104]	; 0x68
            s->strstart++;
  411f38:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  411f3a:	3301      	adds	r3, #1
  411f3c:	66e3      	str	r3, [r4, #108]	; 0x6c
            s->lookahead--;
  411f3e:	6f63      	ldr	r3, [r4, #116]	; 0x74
  411f40:	3b01      	subs	r3, #1
  411f42:	6763      	str	r3, [r4, #116]	; 0x74
        if (s->lookahead < MIN_LOOKAHEAD) {
  411f44:	6f63      	ldr	r3, [r4, #116]	; 0x74
  411f46:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
  411f4a:	f4ff af47 	bcc.w	411ddc <.LBE13>

00411f4e <.LVL140>:
        if (s->lookahead >= MIN_MATCH) {
  411f4e:	6f63      	ldr	r3, [r4, #116]	; 0x74
  411f50:	2b02      	cmp	r3, #2
  411f52:	f240 80ac 	bls.w	4120ae <.LVL158>
            INSERT_STRING(s, s->strstart, hash_head);
  411f56:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  411f58:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  411f5a:	4402      	add	r2, r0
  411f5c:	7893      	ldrb	r3, [r2, #2]
  411f5e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  411f60:	6da1      	ldr	r1, [r4, #88]	; 0x58
  411f62:	408a      	lsls	r2, r1
  411f64:	4053      	eors	r3, r2
  411f66:	6d62      	ldr	r2, [r4, #84]	; 0x54
  411f68:	4013      	ands	r3, r2
  411f6a:	64a3      	str	r3, [r4, #72]	; 0x48
  411f6c:	6c62      	ldr	r2, [r4, #68]	; 0x44
  411f6e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
  411f72:	6b63      	ldr	r3, [r4, #52]	; 0x34
  411f74:	4003      	ands	r3, r0
  411f76:	6c22      	ldr	r2, [r4, #64]	; 0x40
  411f78:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

00411f7c <.LVL141>:
  411f7c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  411f7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  411f80:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  411f82:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
        s->prev_length = s->match_length, s->prev_match = s->match_start;
  411f86:	6e23      	ldr	r3, [r4, #96]	; 0x60
  411f88:	67a3      	str	r3, [r4, #120]	; 0x78
  411f8a:	6f22      	ldr	r2, [r4, #112]	; 0x70
  411f8c:	6662      	str	r2, [r4, #100]	; 0x64
        s->match_length = MIN_MATCH-1;
  411f8e:	2202      	movs	r2, #2
  411f90:	6622      	str	r2, [r4, #96]	; 0x60
        if (hash_head != NIL && s->prev_length < s->max_lazy_match &&
  411f92:	2900      	cmp	r1, #0
  411f94:	f000 8091 	beq.w	4120ba <.LVL159>
  411f98:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
  411f9c:	4293      	cmp	r3, r2
  411f9e:	f080 808c 	bcs.w	4120ba <.LVL159>
            s->strstart - hash_head <= MAX_DIST(s)) {
  411fa2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  411fa4:	1a5a      	subs	r2, r3, r1
  411fa6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  411fa8:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
        if (hash_head != NIL && s->prev_length < s->max_lazy_match &&
  411fac:	429a      	cmp	r2, r3
  411fae:	f200 8084 	bhi.w	4120ba <.LVL159>
            s->match_length = longest_match (s, hash_head);
  411fb2:	4620      	mov	r0, r4
  411fb4:	f003 fad6 	bl	415564 <.LFE1>

00411fb8 <.LVL142>:
  411fb8:	6620      	str	r0, [r4, #96]	; 0x60
            if (s->match_length <= 5 && (s->strategy == Z_FILTERED
  411fba:	2805      	cmp	r0, #5
  411fbc:	d87d      	bhi.n	4120ba <.LVL159>
  411fbe:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
  411fc2:	2b01      	cmp	r3, #1
  411fc4:	d007      	beq.n	411fd6 <.LVL142+0x1e>
                || (s->match_length == MIN_MATCH &&
  411fc6:	2803      	cmp	r0, #3
  411fc8:	d177      	bne.n	4120ba <.LVL159>
                    s->strstart - s->match_start > TOO_FAR)
  411fca:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  411fcc:	6f22      	ldr	r2, [r4, #112]	; 0x70
  411fce:	1a9b      	subs	r3, r3, r2
                || (s->match_length == MIN_MATCH &&
  411fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  411fd4:	d971      	bls.n	4120ba <.LVL159>
                s->match_length = MIN_MATCH-1;
  411fd6:	2302      	movs	r3, #2
  411fd8:	6623      	str	r3, [r4, #96]	; 0x60
        if (s->prev_length >= MIN_MATCH && s->match_length <= s->prev_length) {
  411fda:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  411fdc:	2b02      	cmp	r3, #2
  411fde:	d972      	bls.n	4120c6 <.LVL159+0xc>

00411fe0 <.LBB19>:
            uInt max_insert = s->strstart + s->lookahead - MIN_MATCH;
  411fe0:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  411fe2:	6f62      	ldr	r2, [r4, #116]	; 0x74
  411fe4:	440a      	add	r2, r1
  411fe6:	3a03      	subs	r2, #3

00411fe8 <.LBB16>:
            _tr_tally_dist(s, s->strstart -1 - s->prev_match,
  411fe8:	3b03      	subs	r3, #3
  411fea:	b2db      	uxtb	r3, r3

00411fec <.LVL144>:
  411fec:	6e60      	ldr	r0, [r4, #100]	; 0x64
  411fee:	1a09      	subs	r1, r1, r0
  411ff0:	b289      	uxth	r1, r1

00411ff2 <.LVL145>:
  411ff2:	f504 5eb5 	add.w	lr, r4, #5792	; 0x16a0
  411ff6:	6828      	ldr	r0, [r5, #0]
  411ff8:	f101 3cff 	add.w	ip, r1, #4294967295
  411ffc:	f8de 7000 	ldr.w	r7, [lr]
  412000:	f820 c017 	strh.w	ip, [r0, r7, lsl #1]
  412004:	f241 6098 	movw	r0, #5784	; 0x1698
  412008:	f854 c000 	ldr.w	ip, [r4, r0]
  41200c:	f8de 0000 	ldr.w	r0, [lr]
  412010:	f100 0801 	add.w	r8, r0, #1
  412014:	f8ce 8000 	str.w	r8, [lr]
  412018:	f80c 3000 	strb.w	r3, [ip, r0]
  41201c:	3902      	subs	r1, #2

0041201e <.LVL146>:
  41201e:	b289      	uxth	r1, r1

00412020 <.LVL147>:
  412020:	f819 3003 	ldrb.w	r3, [r9, r3]

00412024 <.LVL148>:
  412024:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  412028:	f8b3 0498 	ldrh.w	r0, [r3, #1176]	; 0x498

0041202c <.LVL149>:
  41202c:	3001      	adds	r0, #1
  41202e:	f8a3 0498 	strh.w	r0, [r3, #1176]	; 0x498

00412032 <.LVL150>:
  412032:	29ff      	cmp	r1, #255	; 0xff
  412034:	f63f af25 	bhi.w	411e82 <.LBB15>
  412038:	4b3e      	ldr	r3, [pc, #248]	; (412134 <.LVL165>)
  41203a:	5c5b      	ldrb	r3, [r3, r1]

0041203c <.LVL151>:
  41203c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  412040:	f8b3 1988 	ldrh.w	r1, [r3, #2440]	; 0x988
  412044:	3101      	adds	r1, #1
  412046:	f8a3 1988 	strh.w	r1, [r3, #2440]	; 0x988
  41204a:	f504 53b5 	add.w	r3, r4, #5792	; 0x16a0
  41204e:	f8d3 c000 	ldr.w	ip, [r3]
  412052:	f241 639c 	movw	r3, #5788	; 0x169c
  412056:	58e3      	ldr	r3, [r4, r3]
  412058:	f103 3eff 	add.w	lr, r3, #4294967295

0041205c <.LBE16>:
            s->lookahead -= s->prev_length-1;
  41205c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  41205e:	6f63      	ldr	r3, [r4, #116]	; 0x74
  412060:	3301      	adds	r3, #1
  412062:	1a5b      	subs	r3, r3, r1
  412064:	6763      	str	r3, [r4, #116]	; 0x74
            s->prev_length -= 2;
  412066:	3902      	subs	r1, #2
  412068:	67a1      	str	r1, [r4, #120]	; 0x78
  41206a:	e714      	b.n	411e96 <.LBE15+0x8>

0041206c <.LBE19>:
        FLUSH_BLOCK(s, 1);
  41206c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  41206e:	2800      	cmp	r0, #0
  412070:	db13      	blt.n	41209a <.LVL155+0x10>
  412072:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  412074:	4401      	add	r1, r0
  412076:	2301      	movs	r3, #1
  412078:	1a12      	subs	r2, r2, r0
  41207a:	4620      	mov	r0, r4
  41207c:	f7fd f86c 	bl	40f158 <_tr_flush_block>

00412080 <.LVL154>:
  412080:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  412082:	65e3      	str	r3, [r4, #92]	; 0x5c
  412084:	6820      	ldr	r0, [r4, #0]
  412086:	f00a f92b 	bl	41c2e0 <.LFE41>

0041208a <.LVL155>:
  41208a:	6823      	ldr	r3, [r4, #0]
  41208c:	691b      	ldr	r3, [r3, #16]
        return finish_done;
  41208e:	2b00      	cmp	r3, #0
  412090:	bf0c      	ite	eq
  412092:	2002      	moveq	r0, #2
  412094:	2003      	movne	r0, #3
  412096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        FLUSH_BLOCK(s, 1);
  41209a:	2100      	movs	r1, #0
  41209c:	e7eb      	b.n	412076 <.LBE19+0xa>
        FLUSH_BLOCK(s, 0);
  41209e:	2100      	movs	r1, #0
  4120a0:	e6de      	b.n	411e60 <.LVL120+0x2e>
                return need_more;
  4120a2:	2000      	movs	r0, #0
  4120a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return block_done;
  4120a8:	2001      	movs	r0, #1
  4120aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

004120ae <.LVL158>:
        s->prev_length = s->match_length, s->prev_match = s->match_start;
  4120ae:	6e23      	ldr	r3, [r4, #96]	; 0x60
  4120b0:	67a3      	str	r3, [r4, #120]	; 0x78
  4120b2:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4120b4:	6663      	str	r3, [r4, #100]	; 0x64
        s->match_length = MIN_MATCH-1;
  4120b6:	2302      	movs	r3, #2
  4120b8:	6623      	str	r3, [r4, #96]	; 0x60

004120ba <.LVL159>:
        if (s->prev_length >= MIN_MATCH && s->match_length <= s->prev_length) {
  4120ba:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  4120bc:	2b02      	cmp	r3, #2
  4120be:	d902      	bls.n	4120c6 <.LVL159+0xc>
  4120c0:	6e22      	ldr	r2, [r4, #96]	; 0x60
  4120c2:	4293      	cmp	r3, r2
  4120c4:	d28c      	bcs.n	411fe0 <.LBB19>
        } else if (s->match_available) {
  4120c6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
  4120c8:	2b00      	cmp	r3, #0
  4120ca:	f43f af33 	beq.w	411f34 <.LVL139>

004120ce <.LBB20>:
            _tr_tally_lit(s, s->window[s->strstart-1], bflush);
  4120ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4120d0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  4120d2:	4413      	add	r3, r2
  4120d4:	f813 3c01 	ldrb.w	r3, [r3, #-1]

004120d8 <.LVL160>:
  4120d8:	f504 51b5 	add.w	r1, r4, #5792	; 0x16a0
  4120dc:	6808      	ldr	r0, [r1, #0]
  4120de:	682a      	ldr	r2, [r5, #0]
  4120e0:	f04f 0e00 	mov.w	lr, #0
  4120e4:	f822 e010 	strh.w	lr, [r2, r0, lsl #1]
  4120e8:	f241 6298 	movw	r2, #5784	; 0x1698
  4120ec:	58a0      	ldr	r0, [r4, r2]
  4120ee:	680a      	ldr	r2, [r1, #0]
  4120f0:	f102 0e01 	add.w	lr, r2, #1
  4120f4:	f8c1 e000 	str.w	lr, [r1]
  4120f8:	5483      	strb	r3, [r0, r2]
  4120fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2

004120fe <.LVL161>:
  4120fe:	f8b3 2094 	ldrh.w	r2, [r3, #148]	; 0x94

00412102 <.LVL162>:
  412102:	3201      	adds	r2, #1
  412104:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

00412108 <.LVL163>:
  412108:	f241 639c 	movw	r3, #5788	; 0x169c
  41210c:	58e3      	ldr	r3, [r4, r3]
  41210e:	3b01      	subs	r3, #1

00412110 <.LBE20>:
            if (bflush) {
  412110:	680a      	ldr	r2, [r1, #0]
  412112:	429a      	cmp	r2, r3
  412114:	f43f aefb 	beq.w	411f0e <.LBE18>

00412118 <.LVL164>:
            s->strstart++;
  412118:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  41211a:	3301      	adds	r3, #1
  41211c:	66e3      	str	r3, [r4, #108]	; 0x6c
            s->lookahead--;
  41211e:	6f63      	ldr	r3, [r4, #116]	; 0x74
  412120:	3b01      	subs	r3, #1
  412122:	6763      	str	r3, [r4, #116]	; 0x74
            if (s->strm->avail_out == 0) return need_more;
  412124:	6823      	ldr	r3, [r4, #0]
  412126:	691b      	ldr	r3, [r3, #16]
  412128:	2b00      	cmp	r3, #0
  41212a:	f47f af0b 	bne.w	411f44 <.LVL139+0x10>
  41212e:	2000      	movs	r0, #0
  412130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00412134 <.LVL165>:
  412134:	00414a04 	.word	0x00414a04
  412138:	004173d0 	.word	0x004173d0

Disassembly of section .text.fp_div%65:

0041213c <fp_div>:
{
  41213c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00412140 <.LCFI84>:
  412140:	f6ad 3d04 	subw	sp, sp, #2820	; 0xb04

00412144 <.LCFI85>:
  if (fp_iszero (b) == FP_YES) {
  412144:	680c      	ldr	r4, [r1, #0]
  412146:	2c00      	cmp	r4, #0
  412148:	f000 81a7 	beq.w	41249a <.LCFI87>
  41214c:	461d      	mov	r5, r3
  41214e:	930a      	str	r3, [sp, #40]	; 0x28
  412150:	9208      	str	r2, [sp, #32]
  412152:	9109      	str	r1, [sp, #36]	; 0x24
  412154:	4604      	mov	r4, r0
  412156:	900b      	str	r0, [sp, #44]	; 0x2c
  if (fp_cmp_mag (a, b) == FP_LT) {
  412158:	f009 fb89 	bl	41b86e <.LFE179>

0041215c <.LVL564>:
  41215c:	f1b0 3fff 	cmp.w	r0, #4294967295
  412160:	d045      	beq.n	4121ee <.LVL586>

00412162 <.LBB85>:
    fp_zero(a);
  412162:	f60d 00d8 	addw	r0, sp, #2264	; 0x8d8

00412166 <.LVL566>:
  412166:	f00b fc0f 	bl	41d988 <.LFE163>

0041216a <.LBE85>:
  q.used = a->used + 2;
  41216a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c

0041216c <.LVL568>:
  41216c:	6823      	ldr	r3, [r4, #0]
  41216e:	3302      	adds	r3, #2
  412170:	f8cd 38d8 	str.w	r3, [sp, #2264]	; 0x8d8

00412174 <.LBB87>:
    fp_zero(a);
  412174:	a898      	add	r0, sp, #608	; 0x260

00412176 <.LVL570>:
  412176:	f00b fc07 	bl	41d988 <.LFE163>

0041217a <.LBB89>:
  41217a:	a80e      	add	r0, sp, #56	; 0x38

0041217c <.LVL572>:
  41217c:	f00b fc04 	bl	41d988 <.LFE163>

00412180 <.LBE89>:
  fp_init_copy(&x, a);
  412180:	4621      	mov	r1, r4
  412182:	f50d 60d6 	add.w	r0, sp, #1712	; 0x6b0
  412186:	f00b faed 	bl	41d764 <.LFE54>

0041218a <.LVL574>:
  fp_init_copy(&y, b);
  41218a:	9d09      	ldr	r5, [sp, #36]	; 0x24

0041218c <.LVL575>:
  41218c:	4629      	mov	r1, r5
  41218e:	f50d 6091 	add.w	r0, sp, #1160	; 0x488
  412192:	f00b fae7 	bl	41d764 <.LFE54>

00412196 <.LVL576>:
  neg = (a->sign == b->sign) ? FP_ZPOS : FP_NEG;
  412196:	6862      	ldr	r2, [r4, #4]
  412198:	686b      	ldr	r3, [r5, #4]
  41219a:	1ad3      	subs	r3, r2, r3
  41219c:	bf18      	it	ne
  41219e:	2301      	movne	r3, #1
  4121a0:	930d      	str	r3, [sp, #52]	; 0x34

004121a2 <.LVL577>:
  x.sign = y.sign = FP_ZPOS;
  4121a2:	2300      	movs	r3, #0

004121a4 <.LVL578>:
  4121a4:	f8cd 348c 	str.w	r3, [sp, #1164]	; 0x48c
  4121a8:	f8cd 36b4 	str.w	r3, [sp, #1716]	; 0x6b4
  norm = fp_count_bits(&y) % DIGIT_BIT;
  4121ac:	f50d 6091 	add.w	r0, sp, #1160	; 0x488
  4121b0:	f00b facb 	bl	41d74a <.LFE26>

004121b4 <.LVL579>:
  4121b4:	4242      	negs	r2, r0
  4121b6:	f000 031f 	and.w	r3, r0, #31
  4121ba:	f002 021f 	and.w	r2, r2, #31
  4121be:	bf58      	it	pl
  4121c0:	4253      	negpl	r3, r2

004121c2 <.LVL580>:
  if (norm < (int)(DIGIT_BIT-1)) {
  4121c2:	2b1e      	cmp	r3, #30
  4121c4:	dd21      	ble.n	41220a <.LVL589>
     norm = 0;
  4121c6:	2300      	movs	r3, #0

004121c8 <.LVL581>:
  4121c8:	930c      	str	r3, [sp, #48]	; 0x30

004121ca <.LVL582>:
  n = x.used - 1;
  4121ca:	f8dd 46b0 	ldr.w	r4, [sp, #1712]	; 0x6b0
  4121ce:	f104 3aff 	add.w	sl, r4, #4294967295

004121d2 <.LVL583>:
  t = y.used - 1;
  4121d2:	f8dd 6488 	ldr.w	r6, [sp, #1160]	; 0x488
  4121d6:	f106 39ff 	add.w	r9, r6, #4294967295

004121da <.LVL584>:
  fp_lshd (&y, n - t); /* y = y*b**{n-t} */
  4121da:	ebaa 0709 	sub.w	r7, sl, r9
  4121de:	4639      	mov	r1, r7
  4121e0:	f50d 6091 	add.w	r0, sp, #1160	; 0x488
  4121e4:	f008 fa53 	bl	41a68e <.LFE26>

004121e8 <.LVL585>:
    ++(q.dp[n - t]);
  4121e8:	f60d 05d8 	addw	r5, sp, #2264	; 0x8d8
  while (fp_cmp (&x, &y) != FP_LT) {
  4121ec:	e02b      	b.n	412246 <.LVL595>

004121ee <.LVL586>:
    if (d != NULL) {
  4121ee:	b11d      	cbz	r5, 4121f8 <.LVL587>
      fp_copy (a, d);
  4121f0:	4629      	mov	r1, r5
  4121f2:	4620      	mov	r0, r4
  4121f4:	f00b f90c 	bl	41d410 <.LFE194>

004121f8 <.LVL587>:
    if (c != NULL) {
  4121f8:	9b08      	ldr	r3, [sp, #32]
  4121fa:	2b00      	cmp	r3, #0
  4121fc:	f000 8150 	beq.w	4124a0 <.LVL626>
      fp_zero (c);
  412200:	4618      	mov	r0, r3
  412202:	f00b fbc1 	bl	41d988 <.LFE163>

00412206 <.LVL588>:
    return FP_OKAY;
  412206:	2000      	movs	r0, #0
  412208:	e143      	b.n	412492 <.LVL623>

0041220a <.LVL589>:
     norm = (DIGIT_BIT-1) - norm;
  41220a:	f1c3 031f 	rsb	r3, r3, #31

0041220e <.LVL590>:
  41220e:	461c      	mov	r4, r3
  412210:	930c      	str	r3, [sp, #48]	; 0x30

00412212 <.LVL591>:
     fp_mul_2d (&x, norm, &x);
  412212:	f50d 62d6 	add.w	r2, sp, #1712	; 0x6b0
  412216:	4619      	mov	r1, r3
  412218:	4610      	mov	r0, r2
  41221a:	f007 f9aa 	bl	419572 <.LBE78>

0041221e <.LVL592>:
     fp_mul_2d (&y, norm, &y);
  41221e:	f50d 6291 	add.w	r2, sp, #1160	; 0x488
  412222:	4621      	mov	r1, r4
  412224:	4610      	mov	r0, r2
  412226:	f007 f9a4 	bl	419572 <.LBE78>

0041222a <.LVL593>:
  41222a:	e7ce      	b.n	4121ca <.LVL582>

0041222c <.LVL594>:
    ++(q.dp[n - t]);
  41222c:	1cba      	adds	r2, r7, #2
  41222e:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
  412232:	3301      	adds	r3, #1
  412234:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    fp_sub (&x, &y, &x);
  412238:	f50d 62d6 	add.w	r2, sp, #1712	; 0x6b0
  41223c:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
  412240:	4610      	mov	r0, r2
  412242:	f00a fa71 	bl	41c728 <.LFE171>

00412246 <.LVL595>:
  while (fp_cmp (&x, &y) != FP_LT) {
  412246:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
  41224a:	f50d 60d6 	add.w	r0, sp, #1712	; 0x6b0
  41224e:	f00a fe68 	bl	41cf22 <.LFE9>

00412252 <.LVL596>:
  412252:	f1b0 3fff 	cmp.w	r0, #4294967295
  412256:	d1e9      	bne.n	41222c <.LVL594>
  fp_rshd (&y, n - t);
  412258:	4639      	mov	r1, r7
  41225a:	f50d 6091 	add.w	r0, sp, #1160	; 0x488
  41225e:	f008 fadd 	bl	41a81c <.LFE159>

00412262 <.LVL597>:
  for (i = n; i >= (t + 1); i--) {
  412262:	45b2      	cmp	sl, r6
  412264:	f2c0 809d 	blt.w	4123a2 <.LVL616>
  412268:	9607      	str	r6, [sp, #28]
  41226a:	1c63      	adds	r3, r4, #1
  41226c:	1b9b      	subs	r3, r3, r6
  41226e:	f60d 02d8 	addw	r2, sp, #2264	; 0x8d8
  412272:	eb02 0b83 	add.w	fp, r2, r3, lsl #2
  412276:	f50d 63d6 	add.w	r3, sp, #1712	; 0x6b0
  41227a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
  41227e:	9301      	str	r3, [sp, #4]
    if (x.dp[i] == y.dp[t]) {
  412280:	f50d 6891 	add.w	r8, sp, #1160	; 0x488
      t1.dp[1] = y.dp[t];
  412284:	f8cd 8018 	str.w	r8, [sp, #24]
  412288:	e04f      	b.n	41232a <.LVL606+0x12>

0041228a <.LVL598>:
      q.dp[i - t - 1] = (fp_digit) ((((fp_word)1) << DIGIT_BIT) - 1);
  41228a:	f04f 33ff 	mov.w	r3, #4294967295
  41228e:	f8cb 3000 	str.w	r3, [fp]
  412292:	e067      	b.n	412364 <.LVL611+0x4>

00412294 <.LVL599>:
      t1.dp[0] = (t - 1 < 0) ? 0 : y.dp[t - 1];
  412294:	3302      	adds	r3, #2
  412296:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
  41229a:	939a      	str	r3, [sp, #616]	; 0x268
      t1.dp[1] = y.dp[t];
  41229c:	f109 0302 	add.w	r3, r9, #2
  4122a0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
  4122a4:	939b      	str	r3, [sp, #620]	; 0x26c
      t1.used = 2;
  4122a6:	2302      	movs	r3, #2
  4122a8:	9398      	str	r3, [sp, #608]	; 0x260
      fp_mul_d (&t1, q.dp[i - t - 1], &t1);
  4122aa:	aa98      	add	r2, sp, #608	; 0x260
  4122ac:	6821      	ldr	r1, [r4, #0]
  4122ae:	4610      	mov	r0, r2
  4122b0:	f006 fccc 	bl	418c4c <.LFE176>

004122b4 <.LVL600>:
      t2.dp[0] = (i - 2 < 0) ? 0 : x.dp[i - 2];
  4122b4:	2f02      	cmp	r7, #2
  4122b6:	bf54      	ite	pl
  4122b8:	f855 3c04 	ldrpl.w	r3, [r5, #-4]
  4122bc:	2300      	movmi	r3, #0
  4122be:	9310      	str	r3, [sp, #64]	; 0x40
      t2.dp[1] = (i - 1 < 0) ? 0 : x.dp[i - 1];
  4122c0:	2f01      	cmp	r7, #1
  4122c2:	bf54      	ite	pl
  4122c4:	682b      	ldrpl	r3, [r5, #0]
  4122c6:	2300      	movmi	r3, #0
  4122c8:	9311      	str	r3, [sp, #68]	; 0x44
      t2.dp[2] = x.dp[i];
  4122ca:	686b      	ldr	r3, [r5, #4]
  4122cc:	9312      	str	r3, [sp, #72]	; 0x48
      t2.used = 3;
  4122ce:	2303      	movs	r3, #3
  4122d0:	930e      	str	r3, [sp, #56]	; 0x38
    } while (fp_cmp_mag(&t1, &t2) == FP_GT);
  4122d2:	a90e      	add	r1, sp, #56	; 0x38
  4122d4:	a898      	add	r0, sp, #608	; 0x260
  4122d6:	f009 faca 	bl	41b86e <.LFE179>

004122da <.LVL601>:
  4122da:	2801      	cmp	r0, #1
  4122dc:	d109      	bne.n	4122f2 <.LVL602+0x8>
      q.dp[i - t - 1] = (q.dp[i - t - 1] - 1);
  4122de:	6823      	ldr	r3, [r4, #0]
  4122e0:	3b01      	subs	r3, #1
  4122e2:	6023      	str	r3, [r4, #0]
      fp_zero (&t1);
  4122e4:	a898      	add	r0, sp, #608	; 0x260
  4122e6:	f00b fb4f 	bl	41d988 <.LFE163>

004122ea <.LVL602>:
      t1.dp[0] = (t - 1 < 0) ? 0 : y.dp[t - 1];
  4122ea:	1eb3      	subs	r3, r6, #2
  4122ec:	d5d2      	bpl.n	412294 <.LVL599>
  4122ee:	2300      	movs	r3, #0
  4122f0:	e7d3      	b.n	41229a <.LVL599+0x6>
    fp_mul_d (&y, q.dp[i - t - 1], &t1);
  4122f2:	aa98      	add	r2, sp, #608	; 0x260
  4122f4:	6821      	ldr	r1, [r4, #0]
  4122f6:	9806      	ldr	r0, [sp, #24]
  4122f8:	f006 fca8 	bl	418c4c <.LFE176>

004122fc <.LVL603>:
    fp_lshd  (&t1, i - t - 1);
  4122fc:	9904      	ldr	r1, [sp, #16]
  4122fe:	a898      	add	r0, sp, #608	; 0x260
  412300:	f008 f9c5 	bl	41a68e <.LFE26>

00412304 <.LVL604>:
    fp_sub   (&x, &t1, &x);
  412304:	f50d 62d6 	add.w	r2, sp, #1712	; 0x6b0
  412308:	a998      	add	r1, sp, #608	; 0x260
  41230a:	4610      	mov	r0, r2
  41230c:	f00a fa0c 	bl	41c728 <.LFE171>

00412310 <.LVL605>:
    if (x.sign == FP_NEG) {
  412310:	f8dd 36b4 	ldr.w	r3, [sp, #1716]	; 0x6b4
  412314:	2b01      	cmp	r3, #1
  412316:	d032      	beq.n	41237e <.LVL612>

00412318 <.LVL606>:
  for (i = n; i >= (t + 1); i--) {
  412318:	f10a 3aff 	add.w	sl, sl, #4294967295
  41231c:	f1ab 0b04 	sub.w	fp, fp, #4
  412320:	9b01      	ldr	r3, [sp, #4]
  412322:	3b04      	subs	r3, #4
  412324:	9301      	str	r3, [sp, #4]
  412326:	4556      	cmp	r6, sl
  412328:	dc3b      	bgt.n	4123a2 <.LVL616>
    if (i > x.used) {
  41232a:	f8dd 36b0 	ldr.w	r3, [sp, #1712]	; 0x6b0
  41232e:	4553      	cmp	r3, sl
  412330:	dbf2      	blt.n	412318 <.LVL606>
  412332:	9b01      	ldr	r3, [sp, #4]
  412334:	9305      	str	r3, [sp, #20]
    if (x.dp[i] == y.dp[t]) {
  412336:	685b      	ldr	r3, [r3, #4]
  412338:	f109 0202 	add.w	r2, r9, #2
  41233c:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
  412340:	4293      	cmp	r3, r2
  412342:	d0a2      	beq.n	41228a <.LVL598>

00412344 <.LBB91>:
      tmp = ((fp_word) x.dp[i]) << ((fp_word) DIGIT_BIT);
  412344:	9303      	str	r3, [sp, #12]
  412346:	2300      	movs	r3, #0
  412348:	9302      	str	r3, [sp, #8]

0041234a <.LVL608>:
      tmp |= ((fp_word) x.dp[i - 1]);
  41234a:	9b01      	ldr	r3, [sp, #4]
  41234c:	6818      	ldr	r0, [r3, #0]

0041234e <.LVL609>:
      tmp /= ((fp_word)y.dp[t]);
  41234e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  412352:	4623      	mov	r3, r4
  412354:	ea44 0400 	orr.w	r4, r4, r0
  412358:	4620      	mov	r0, r4

0041235a <.LVL610>:
  41235a:	4629      	mov	r1, r5
  41235c:	f00a fe90 	bl	41d080 <.LBE14>

00412360 <.LVL611>:
      q.dp[i - t - 1] = (fp_digit) (tmp);
  412360:	f8cb 0000 	str.w	r0, [fp]
  412364:	4657      	mov	r7, sl
  412366:	9b07      	ldr	r3, [sp, #28]
  412368:	ebaa 0303 	sub.w	r3, sl, r3
  41236c:	9304      	str	r3, [sp, #16]
  41236e:	465c      	mov	r4, fp

00412370 <.LBE91>:
    q.dp[i - t - 1] = (q.dp[i - t - 1] + 1);
  412370:	f8db 3000 	ldr.w	r3, [fp]
  412374:	3301      	adds	r3, #1
  412376:	f8cb 3000 	str.w	r3, [fp]
      t2.dp[0] = (i - 2 < 0) ? 0 : x.dp[i - 2];
  41237a:	9d05      	ldr	r5, [sp, #20]
  41237c:	e7af      	b.n	4122de <.LVL601+0x4>

0041237e <.LVL612>:
      fp_copy (&y, &t1);
  41237e:	a998      	add	r1, sp, #608	; 0x260
  412380:	9806      	ldr	r0, [sp, #24]
  412382:	f00b f845 	bl	41d410 <.LFE194>

00412386 <.LVL613>:
      fp_lshd (&t1, i - t - 1);
  412386:	9904      	ldr	r1, [sp, #16]
  412388:	a898      	add	r0, sp, #608	; 0x260
  41238a:	f008 f980 	bl	41a68e <.LFE26>

0041238e <.LVL614>:
      fp_add (&x, &t1, &x);
  41238e:	f50d 62d6 	add.w	r2, sp, #1712	; 0x6b0
  412392:	a998      	add	r1, sp, #608	; 0x260
  412394:	4610      	mov	r0, r2
  412396:	f00a f887 	bl	41c4a8 <.LFE17>

0041239a <.LVL615>:
      q.dp[i - t - 1] = q.dp[i - t - 1] - 1;
  41239a:	6823      	ldr	r3, [r4, #0]
  41239c:	3b01      	subs	r3, #1
  41239e:	6023      	str	r3, [r4, #0]
  4123a0:	e7ba      	b.n	412318 <.LVL606>

004123a2 <.LVL616>:
  x.sign = x.used == 0 ? FP_ZPOS : a->sign;
  4123a2:	f8dd 36b0 	ldr.w	r3, [sp, #1712]	; 0x6b0
  4123a6:	b10b      	cbz	r3, 4123ac <.LVL616+0xa>
  4123a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4123aa:	685b      	ldr	r3, [r3, #4]
  4123ac:	f8cd 36b4 	str.w	r3, [sp, #1716]	; 0x6b4
  if (c != NULL) {
  4123b0:	9b08      	ldr	r3, [sp, #32]
  4123b2:	b34b      	cbz	r3, 412408 <.LVL617+0x4>
    fp_clamp (&q);
  4123b4:	f8dd 28d8 	ldr.w	r2, [sp, #2264]	; 0x8d8
  4123b8:	b1da      	cbz	r2, 4123f2 <.LVL616+0x50>
  4123ba:	1e53      	subs	r3, r2, #1
  4123bc:	1c51      	adds	r1, r2, #1
  4123be:	f60d 00d8 	addw	r0, sp, #2264	; 0x8d8
  4123c2:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
  4123c6:	b979      	cbnz	r1, 4123e8 <.LVL616+0x46>
  4123c8:	f50d 6130 	add.w	r1, sp, #2816	; 0xb00
  4123cc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4123d0:	f5a2 7209 	sub.w	r2, r2, #548	; 0x224
  4123d4:	e000      	b.n	4123d8 <.LVL616+0x36>
  4123d6:	4603      	mov	r3, r0
  4123d8:	b14b      	cbz	r3, 4123ee <.LVL616+0x4c>
  4123da:	1e58      	subs	r0, r3, #1
  4123dc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  4123e0:	2900      	cmp	r1, #0
  4123e2:	d0f8      	beq.n	4123d6 <.LVL616+0x34>
  4123e4:	f8cd 38d8 	str.w	r3, [sp, #2264]	; 0x8d8
  4123e8:	f8dd 38dc 	ldr.w	r3, [sp, #2268]	; 0x8dc
  4123ec:	e002      	b.n	4123f4 <.LVL616+0x52>
  4123ee:	f8cd 38d8 	str.w	r3, [sp, #2264]	; 0x8d8
  4123f2:	2300      	movs	r3, #0
  4123f4:	f8cd 38dc 	str.w	r3, [sp, #2268]	; 0x8dc
    fp_copy (&q, c);
  4123f8:	9c08      	ldr	r4, [sp, #32]
  4123fa:	4621      	mov	r1, r4
  4123fc:	f60d 00d8 	addw	r0, sp, #2264	; 0x8d8
  412400:	f00b f806 	bl	41d410 <.LFE194>

00412404 <.LVL617>:
    c->sign = neg;
  412404:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  412406:	6063      	str	r3, [r4, #4]
  if (d != NULL) {
  412408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41240a:	2b00      	cmp	r3, #0
  41240c:	d04a      	beq.n	4124a4 <.LVL627>
    fp_div_2d (&x, norm, &x, NULL);
  41240e:	2300      	movs	r3, #0
  412410:	f50d 62d6 	add.w	r2, sp, #1712	; 0x6b0
  412414:	990c      	ldr	r1, [sp, #48]	; 0x30
  412416:	4610      	mov	r0, r2
  412418:	f006 ffaf 	bl	41937a <.LFE7>

0041241c <.LVL618>:
    for (i = b->used; i < x.used; i++) {
  41241c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41241e:	681b      	ldr	r3, [r3, #0]

00412420 <.LVL619>:
  412420:	f8dd 06b0 	ldr.w	r0, [sp, #1712]	; 0x6b0
  412424:	4283      	cmp	r3, r0
  412426:	da0e      	bge.n	412446 <.LVL621+0x8>
  412428:	f50d 62d6 	add.w	r2, sp, #1712	; 0x6b0
  41242c:	eb02 0383 	add.w	r3, r2, r3, lsl #2

00412430 <.LVL620>:
  412430:	3304      	adds	r3, #4
  412432:	1c42      	adds	r2, r0, #1
  412434:	f50d 61d6 	add.w	r1, sp, #1712	; 0x6b0
  412438:	eb01 0282 	add.w	r2, r1, r2, lsl #2
        x.dp[i] = 0;
  41243c:	2100      	movs	r1, #0

0041243e <.LVL621>:
  41243e:	f843 1f04 	str.w	r1, [r3, #4]!
    for (i = b->used; i < x.used; i++) {
  412442:	4293      	cmp	r3, r2
  412444:	d1fb      	bne.n	41243e <.LVL621>
    fp_clamp(&x);
  412446:	b1d8      	cbz	r0, 412480 <.LVL621+0x42>
  412448:	1e43      	subs	r3, r0, #1
  41244a:	1c42      	adds	r2, r0, #1
  41244c:	f50d 61d6 	add.w	r1, sp, #1712	; 0x6b0
  412450:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  412454:	b97a      	cbnz	r2, 412476 <.LVL621+0x38>
  412456:	f50d 6230 	add.w	r2, sp, #2816	; 0xb00
  41245a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
  41245e:	f2a2 424c 	subw	r2, r2, #1100	; 0x44c
  412462:	e000      	b.n	412466 <.LVL621+0x28>
  412464:	4603      	mov	r3, r0
  412466:	b14b      	cbz	r3, 41247c <.LVL621+0x3e>
  412468:	1e58      	subs	r0, r3, #1
  41246a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  41246e:	2900      	cmp	r1, #0
  412470:	d0f8      	beq.n	412464 <.LVL621+0x26>
  412472:	f8cd 36b0 	str.w	r3, [sp, #1712]	; 0x6b0
  412476:	f8dd 36b4 	ldr.w	r3, [sp, #1716]	; 0x6b4
  41247a:	e002      	b.n	412482 <.LVL621+0x44>
  41247c:	f8cd 36b0 	str.w	r3, [sp, #1712]	; 0x6b0
  412480:	2300      	movs	r3, #0
  412482:	f8cd 36b4 	str.w	r3, [sp, #1716]	; 0x6b4
    fp_copy (&x, d);
  412486:	990a      	ldr	r1, [sp, #40]	; 0x28
  412488:	f50d 60d6 	add.w	r0, sp, #1712	; 0x6b0
  41248c:	f00a ffc0 	bl	41d410 <.LFE194>

00412490 <.LVL622>:
  return FP_OKAY;
  412490:	2000      	movs	r0, #0

00412492 <.LVL623>:
}
  412492:	f60d 3d04 	addw	sp, sp, #2820	; 0xb04

00412496 <.LCFI86>:
  412496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0041249a <.LCFI87>:
    return FP_VAL;
  41249a:	f04f 30ff 	mov.w	r0, #4294967295

0041249e <.LVL625>:
  41249e:	e7f8      	b.n	412492 <.LVL623>

004124a0 <.LVL626>:
    return FP_OKAY;
  4124a0:	2000      	movs	r0, #0
  4124a2:	e7f6      	b.n	412492 <.LVL623>

004124a4 <.LVL627>:
  return FP_OKAY;
  4124a4:	2000      	movs	r0, #0
  4124a6:	e7f4      	b.n	412492 <.LVL623>

Disassembly of section .text.ecc_projective_dbl_point%66:

004124a8 <ecc_projective_dbl_point>:
{
  4124a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

004124ac <.LCFI15>:
  4124ac:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c

004124b0 <.LCFI16>:
   if (P == NULL || R == NULL || modulus == NULL)
  4124b0:	2b00      	cmp	r3, #0
  4124b2:	bf18      	it	ne
  4124b4:	2900      	cmpne	r1, #0
  4124b6:	f000 819c 	beq.w	4127f2 <.LVL255>
  4124ba:	460d      	mov	r5, r1
  4124bc:	4698      	mov	r8, r3
  4124be:	2800      	cmp	r0, #0
  4124c0:	f000 8197 	beq.w	4127f2 <.LVL255>
  4124c4:	4606      	mov	r6, r0
   if ((err = mp_init_multi(&t1, &t2, NULL, NULL, NULL, NULL)) != MP_OKAY) {
  4124c6:	2200      	movs	r2, #0

004124c8 <.LVL116>:
  4124c8:	9201      	str	r2, [sp, #4]
  4124ca:	9200      	str	r2, [sp, #0]
  4124cc:	4613      	mov	r3, r2

004124ce <.LVL117>:
  4124ce:	a902      	add	r1, sp, #8

004124d0 <.LVL118>:
  4124d0:	a88c      	add	r0, sp, #560	; 0x230

004124d2 <.LVL119>:
  4124d2:	f00a faaf 	bl	41ca34 <mp_init_multi>

004124d6 <.LVL120>:
  4124d6:	4604      	mov	r4, r0
  4124d8:	b120      	cbz	r0, 4124e4 <.LCFI18>

004124da <.LVL121>:
}
  4124da:	4620      	mov	r0, r4
  4124dc:	f20d 4d5c 	addw	sp, sp, #1116	; 0x45c

004124e0 <.LCFI17>:
  4124e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

004124e4 <.LCFI18>:
   y = R->y;
  4124e4:	f505 770a 	add.w	r7, r5, #552	; 0x228

004124e8 <.LVL123>:
   z = R->z;
  4124e8:	f505 698a 	add.w	r9, r5, #1104	; 0x450

004124ec <.LVL124>:
       err = mp_copy(P->x, x);
  4124ec:	4629      	mov	r1, r5
  4124ee:	4630      	mov	r0, r6

004124f0 <.LVL125>:
  4124f0:	f00b fbdb 	bl	41dcaa <.LFE85>

004124f4 <.LVL126>:
   if (err == MP_OKAY)
  4124f4:	4604      	mov	r4, r0
  4124f6:	b1f0      	cbz	r0, 412536 <.LVL130>
   if (err == MP_OKAY)
  4124f8:	2c00      	cmp	r4, #0
  4124fa:	d038      	beq.n	41256e <.LVL139+0x2>
      if (err == MP_OKAY)
  4124fc:	2c00      	cmp	r4, #0
  4124fe:	d05a      	beq.n	4125b6 <.LVL153>
      if (err == MP_OKAY)
  412500:	2c00      	cmp	r4, #0
  412502:	d07e      	beq.n	412602 <.LVL166>
      if (err == MP_OKAY)
  412504:	2c00      	cmp	r4, #0
  412506:	f000 80a0 	beq.w	41264a <.LVL179>
   if (err == MP_OKAY)
  41250a:	2c00      	cmp	r4, #0
  41250c:	f000 80c7 	beq.w	41269e <.LVL193>
   if (err == MP_OKAY) {
  412510:	2c00      	cmp	r4, #0
  412512:	f000 80e0 	beq.w	4126d6 <.LVL204+0x2>
   if (err == MP_OKAY)
  412516:	2c00      	cmp	r4, #0
  412518:	f000 8100 	beq.w	41271c <.LVL218+0x6>
   if (err == MP_OKAY)
  41251c:	2c00      	cmp	r4, #0
  41251e:	f000 8116 	beq.w	41274e <.LVL228>
   if (err == MP_OKAY)
  412522:	2c00      	cmp	r4, #0
  412524:	f000 8126 	beq.w	412774 <.LVL234>

00412528 <.LVL127>:
   mp_clear(&t1);
  412528:	a88c      	add	r0, sp, #560	; 0x230
  41252a:	f00b fb58 	bl	41dbde <.LFE179>

0041252e <.LVL128>:
   mp_clear(&t2);
  41252e:	a802      	add	r0, sp, #8
  412530:	f00b fb55 	bl	41dbde <.LFE179>

00412534 <.LVL129>:
   return err;
  412534:	e7d1      	b.n	4124da <.LVL121>

00412536 <.LVL130>:
       err = mp_copy(P->y, y);
  412536:	4639      	mov	r1, r7
  412538:	f506 700a 	add.w	r0, r6, #552	; 0x228

0041253c <.LVL131>:
  41253c:	f00b fbb5 	bl	41dcaa <.LFE85>

00412540 <.LVL132>:
   if (err == MP_OKAY)
  412540:	4604      	mov	r4, r0
  412542:	b9d0      	cbnz	r0, 41257a <.LVL142>
       err = mp_copy(P->z, z);
  412544:	4649      	mov	r1, r9
  412546:	f506 608a 	add.w	r0, r6, #1104	; 0x450

0041254a <.LVL133>:
  41254a:	f00b fbae 	bl	41dcaa <.LFE85>

0041254e <.LVL134>:
   if (err == MP_OKAY)
  41254e:	4604      	mov	r4, r0
  412550:	b9d8      	cbnz	r0, 41258a <.LVL145>
       err = mp_sqr(z, &t1);
  412552:	a98c      	add	r1, sp, #560	; 0x230
  412554:	4648      	mov	r0, r9

00412556 <.LVL135>:
  412556:	f00b fbb7 	bl	41dcc8 <.LFE105>

0041255a <.LVL136>:
   if (err == MP_OKAY)
  41255a:	4604      	mov	r4, r0
  41255c:	b9e0      	cbnz	r0, 412598 <.LVL148>
       err = mp_montgomery_reduce(&t1, modulus, mp);
  41255e:	f8dd 2478 	ldr.w	r2, [sp, #1144]	; 0x478
  412562:	4641      	mov	r1, r8
  412564:	a88c      	add	r0, sp, #560	; 0x230

00412566 <.LVL137>:
  412566:	f00b fbb4 	bl	41dcd2 <.LFE110>

0041256a <.LVL138>:
  41256a:	4604      	mov	r4, r0

0041256c <.LVL139>:
  41256c:	e7c4      	b.n	4124f8 <.LVL126+0x4>
       err = mp_mul(z, y, z);
  41256e:	464a      	mov	r2, r9
  412570:	4639      	mov	r1, r7
  412572:	4648      	mov	r0, r9

00412574 <.LVL140>:
  412574:	f00b fb8f 	bl	41dc96 <.LFE86>

00412578 <.LVL141>:
  412578:	4604      	mov	r4, r0

0041257a <.LVL142>:
   if (err == MP_OKAY)
  41257a:	bb14      	cbnz	r4, 4125c2 <.LVL155>
       err = mp_montgomery_reduce(z, modulus, mp);
  41257c:	f8dd 2478 	ldr.w	r2, [sp, #1144]	; 0x478
  412580:	4641      	mov	r1, r8
  412582:	4648      	mov	r0, r9

00412584 <.LVL143>:
  412584:	f00b fba5 	bl	41dcd2 <.LFE110>

00412588 <.LVL144>:
  412588:	4604      	mov	r4, r0

0041258a <.LVL145>:
   if (err == MP_OKAY)
  41258a:	bbc4      	cbnz	r4, 4125fe <.LVL165>
       err = mp_add(z, z, z);
  41258c:	464a      	mov	r2, r9
  41258e:	4649      	mov	r1, r9
  412590:	4648      	mov	r0, r9

00412592 <.LVL146>:
  412592:	f00b fb71 	bl	41dc78 <.LFE231>

00412596 <.LVL147>:
  412596:	4604      	mov	r4, r0

00412598 <.LVL148>:
   if (err == MP_OKAY) {
  412598:	b9e4      	cbnz	r4, 4125d4 <.LVL158>
       if (mp_cmp(z, modulus) != MP_LT)
  41259a:	4641      	mov	r1, r8
  41259c:	4648      	mov	r0, r9

0041259e <.LVL149>:
  41259e:	f00b fbdd 	bl	41dd5c <.LFE66>

004125a2 <.LVL150>:
  4125a2:	f1b0 3fff 	cmp.w	r0, #4294967295
  4125a6:	d006      	beq.n	4125b6 <.LVL153>
           err = mp_sub(z, modulus, z);
  4125a8:	464a      	mov	r2, r9
  4125aa:	4641      	mov	r1, r8
  4125ac:	4648      	mov	r0, r9
  4125ae:	f00b fb68 	bl	41dc82 <.LFE71>

004125b2 <.LVL151>:
  4125b2:	4604      	mov	r4, r0

004125b4 <.LVL152>:
  4125b4:	e7a2      	b.n	4124fc <.LVL126+0x8>

004125b6 <.LVL153>:
          err = mp_sub(x, &t1, &t2);
  4125b6:	aa02      	add	r2, sp, #8
  4125b8:	a98c      	add	r1, sp, #560	; 0x230
  4125ba:	4628      	mov	r0, r5
  4125bc:	f00b fb61 	bl	41dc82 <.LFE71>

004125c0 <.LVL154>:
  4125c0:	4604      	mov	r4, r0

004125c2 <.LVL155>:
      if (err == MP_OKAY) {
  4125c2:	bb24      	cbnz	r4, 41260e <.LVL168>
          if (mp_isneg(&t2))
  4125c4:	9b03      	ldr	r3, [sp, #12]
  4125c6:	b9a3      	cbnz	r3, 4125f2 <.LVL162+0x2>

004125c8 <.LVL156>:
          err = mp_add(&t1, x, &t1);
  4125c8:	aa8c      	add	r2, sp, #560	; 0x230
  4125ca:	4629      	mov	r1, r5
  4125cc:	4610      	mov	r0, r2
  4125ce:	f00b fb53 	bl	41dc78 <.LFE231>

004125d2 <.LVL157>:
  4125d2:	4604      	mov	r4, r0

004125d4 <.LVL158>:
      if (err == MP_OKAY) {
  4125d4:	bb54      	cbnz	r4, 41262c <.LVL174>
          if (mp_cmp(&t1, modulus) != MP_LT)
  4125d6:	4641      	mov	r1, r8
  4125d8:	a88c      	add	r0, sp, #560	; 0x230

004125da <.LVL159>:
  4125da:	f00b fbbf 	bl	41dd5c <.LFE66>

004125de <.LVL160>:
  4125de:	f1b0 3fff 	cmp.w	r0, #4294967295
  4125e2:	d00e      	beq.n	412602 <.LVL166>
              err = mp_sub(&t1, modulus, &t1);
  4125e4:	aa8c      	add	r2, sp, #560	; 0x230
  4125e6:	4641      	mov	r1, r8
  4125e8:	4610      	mov	r0, r2
  4125ea:	f00b fb4a 	bl	41dc82 <.LFE71>

004125ee <.LVL161>:
  4125ee:	4604      	mov	r4, r0

004125f0 <.LVL162>:
  4125f0:	e786      	b.n	412500 <.LVL126+0xc>
              err = mp_add(&t2, modulus, &t2);
  4125f2:	aa02      	add	r2, sp, #8
  4125f4:	4641      	mov	r1, r8
  4125f6:	4610      	mov	r0, r2

004125f8 <.LVL163>:
  4125f8:	f00b fb3e 	bl	41dc78 <.LFE231>

004125fc <.LVL164>:
  4125fc:	4604      	mov	r4, r0

004125fe <.LVL165>:
      if (err == MP_OKAY)
  4125fe:	b974      	cbnz	r4, 41261e <.LVL171>
  412600:	e7e2      	b.n	4125c8 <.LVL156>

00412602 <.LVL166>:
          err = mp_mul(&t1, &t2, &t2);
  412602:	aa02      	add	r2, sp, #8
  412604:	4611      	mov	r1, r2
  412606:	a88c      	add	r0, sp, #560	; 0x230
  412608:	f00b fb45 	bl	41dc96 <.LFE86>

0041260c <.LVL167>:
  41260c:	4604      	mov	r4, r0

0041260e <.LVL168>:
      if (err == MP_OKAY)
  41260e:	bb14      	cbnz	r4, 412656 <.LVL181>
          err = mp_montgomery_reduce(&t2, modulus, mp);
  412610:	f8dd 2478 	ldr.w	r2, [sp, #1144]	; 0x478
  412614:	4641      	mov	r1, r8
  412616:	a802      	add	r0, sp, #8

00412618 <.LVL169>:
  412618:	f00b fb5b 	bl	41dcd2 <.LFE110>

0041261c <.LVL170>:
  41261c:	4604      	mov	r4, r0

0041261e <.LVL171>:
      if (err == MP_OKAY)
  41261e:	bb44      	cbnz	r4, 412672 <.LVL185>
          err = mp_add(&t2, &t2, &t1);
  412620:	aa8c      	add	r2, sp, #560	; 0x230
  412622:	a902      	add	r1, sp, #8
  412624:	4608      	mov	r0, r1

00412626 <.LVL172>:
  412626:	f00b fb27 	bl	41dc78 <.LFE231>

0041262a <.LVL173>:
  41262a:	4604      	mov	r4, r0

0041262c <.LVL174>:
      if (err == MP_OKAY) {
  41262c:	bb44      	cbnz	r4, 412680 <.LVL188>
          if (mp_cmp(&t1, modulus) != MP_LT)
  41262e:	4641      	mov	r1, r8
  412630:	a88c      	add	r0, sp, #560	; 0x230

00412632 <.LVL175>:
  412632:	f00b fb93 	bl	41dd5c <.LFE66>

00412636 <.LVL176>:
  412636:	f1b0 3fff 	cmp.w	r0, #4294967295
  41263a:	d006      	beq.n	41264a <.LVL179>
              err = mp_sub(&t1, modulus, &t1);
  41263c:	aa8c      	add	r2, sp, #560	; 0x230
  41263e:	4641      	mov	r1, r8
  412640:	4610      	mov	r0, r2
  412642:	f00b fb1e 	bl	41dc82 <.LFE71>

00412646 <.LVL177>:
  412646:	4604      	mov	r4, r0

00412648 <.LVL178>:
  412648:	e75c      	b.n	412504 <.LVL126+0x10>

0041264a <.LVL179>:
          err = mp_add(&t1, &t2, &t1);
  41264a:	aa8c      	add	r2, sp, #560	; 0x230
  41264c:	a902      	add	r1, sp, #8
  41264e:	4610      	mov	r0, r2
  412650:	f00b fb12 	bl	41dc78 <.LFE231>

00412654 <.LVL180>:
  412654:	4604      	mov	r4, r0

00412656 <.LVL181>:
      if (err == MP_OKAY) {
  412656:	bb3c      	cbnz	r4, 4126a8 <.LVL195>
          if (mp_cmp(&t1, modulus) != MP_LT)
  412658:	4641      	mov	r1, r8
  41265a:	a88c      	add	r0, sp, #560	; 0x230

0041265c <.LVL182>:
  41265c:	f00b fb7e 	bl	41dd5c <.LFE66>

00412660 <.LVL183>:
  412660:	f1b0 3fff 	cmp.w	r0, #4294967295
  412664:	d006      	beq.n	412674 <.LVL186>
              err = mp_sub(&t1, modulus, &t1);
  412666:	aa8c      	add	r2, sp, #560	; 0x230
  412668:	4641      	mov	r1, r8
  41266a:	4610      	mov	r0, r2
  41266c:	f00b fb09 	bl	41dc82 <.LFE71>

00412670 <.LVL184>:
  412670:	4604      	mov	r4, r0

00412672 <.LVL185>:
   if (err == MP_OKAY)
  412672:	bb0c      	cbnz	r4, 4126b8 <.LVL198>

00412674 <.LVL186>:
       err = mp_add(y, y, y);
  412674:	463a      	mov	r2, r7
  412676:	4639      	mov	r1, r7
  412678:	4638      	mov	r0, r7
  41267a:	f00b fafd 	bl	41dc78 <.LFE231>

0041267e <.LVL187>:
  41267e:	4604      	mov	r4, r0

00412680 <.LVL188>:
   if (err == MP_OKAY) {
  412680:	bb04      	cbnz	r4, 4126c4 <.LVL201>
       if (mp_cmp(y, modulus) != MP_LT)
  412682:	4641      	mov	r1, r8
  412684:	4638      	mov	r0, r7

00412686 <.LVL189>:
  412686:	f00b fb69 	bl	41dd5c <.LFE66>

0041268a <.LVL190>:
  41268a:	f1b0 3fff 	cmp.w	r0, #4294967295
  41268e:	d006      	beq.n	41269e <.LVL193>
           err = mp_sub(y, modulus, y);
  412690:	463a      	mov	r2, r7
  412692:	4641      	mov	r1, r8
  412694:	4638      	mov	r0, r7
  412696:	f00b faf4 	bl	41dc82 <.LFE71>

0041269a <.LVL191>:
  41269a:	4604      	mov	r4, r0

0041269c <.LVL192>:
  41269c:	e735      	b.n	41250a <.LVL126+0x16>

0041269e <.LVL193>:
       err = mp_sqr(y, y);
  41269e:	4639      	mov	r1, r7
  4126a0:	4638      	mov	r0, r7
  4126a2:	f00b fb11 	bl	41dcc8 <.LFE105>

004126a6 <.LVL194>:
  4126a6:	4604      	mov	r4, r0

004126a8 <.LVL195>:
   if (err == MP_OKAY)
  4126a8:	bbac      	cbnz	r4, 412716 <.LVL218>
       err = mp_montgomery_reduce(y, modulus, mp);
  4126aa:	f8dd 2478 	ldr.w	r2, [sp, #1144]	; 0x478
  4126ae:	4641      	mov	r1, r8
  4126b0:	4638      	mov	r0, r7

004126b2 <.LVL196>:
  4126b2:	f00b fb0e 	bl	41dcd2 <.LFE110>

004126b6 <.LVL197>:
  4126b6:	4604      	mov	r4, r0

004126b8 <.LVL198>:
   if (err == MP_OKAY)
  4126b8:	b9bc      	cbnz	r4, 4126ea <.LVL209>
       err = mp_sqr(y, &t2);
  4126ba:	a902      	add	r1, sp, #8
  4126bc:	4638      	mov	r0, r7

004126be <.LVL199>:
  4126be:	f00b fb03 	bl	41dcc8 <.LFE105>

004126c2 <.LVL200>:
  4126c2:	4604      	mov	r4, r0

004126c4 <.LVL201>:
   if (err == MP_OKAY)
  4126c4:	b9c4      	cbnz	r4, 4126f8 <.LVL212>
       err = mp_montgomery_reduce(&t2, modulus, mp);
  4126c6:	f8dd 2478 	ldr.w	r2, [sp, #1144]	; 0x478
  4126ca:	4641      	mov	r1, r8
  4126cc:	a802      	add	r0, sp, #8

004126ce <.LVL202>:
  4126ce:	f00b fb00 	bl	41dcd2 <.LFE110>

004126d2 <.LVL203>:
  4126d2:	4604      	mov	r4, r0

004126d4 <.LVL204>:
  4126d4:	e71c      	b.n	412510 <.LVL126+0x1c>
       if (mp_isodd(&t2) == MP_YES)
  4126d6:	a802      	add	r0, sp, #8

004126d8 <.LVL205>:
  4126d8:	f00b f9c1 	bl	41da5e <.LFE163>

004126dc <.LVL206>:
  4126dc:	2801      	cmp	r0, #1
  4126de:	d014      	beq.n	41270a <.LVL216>

004126e0 <.LVL207>:
       err = mp_div_2(&t2, &t2);
  4126e0:	a902      	add	r1, sp, #8
  4126e2:	4608      	mov	r0, r1
  4126e4:	f00b fafa 	bl	41dcdc <.LFE111>

004126e8 <.LVL208>:
  4126e8:	4604      	mov	r4, r0

004126ea <.LVL209>:
   if (err == MP_OKAY)
  4126ea:	bb24      	cbnz	r4, 412736 <.LVL224>
       err = mp_mul(y, x, y);
  4126ec:	463a      	mov	r2, r7
  4126ee:	4629      	mov	r1, r5
  4126f0:	4638      	mov	r0, r7

004126f2 <.LVL210>:
  4126f2:	f00b fad0 	bl	41dc96 <.LFE86>

004126f6 <.LVL211>:
  4126f6:	4604      	mov	r4, r0

004126f8 <.LVL212>:
   if (err == MP_OKAY)
  4126f8:	bb2c      	cbnz	r4, 412746 <.LVL227>
       err = mp_montgomery_reduce(y, modulus, mp);
  4126fa:	f8dd 2478 	ldr.w	r2, [sp, #1144]	; 0x478
  4126fe:	4641      	mov	r1, r8
  412700:	4638      	mov	r0, r7

00412702 <.LVL213>:
  412702:	f00b fae6 	bl	41dcd2 <.LFE110>

00412706 <.LVL214>:
  412706:	4604      	mov	r4, r0

00412708 <.LVL215>:
  412708:	e705      	b.n	412516 <.LVL126+0x22>

0041270a <.LVL216>:
           err = mp_add(&t2, modulus, &t2);
  41270a:	aa02      	add	r2, sp, #8
  41270c:	4641      	mov	r1, r8
  41270e:	4610      	mov	r0, r2
  412710:	f00b fab2 	bl	41dc78 <.LFE231>

00412714 <.LVL217>:
  412714:	4604      	mov	r4, r0

00412716 <.LVL218>:
   if (err == MP_OKAY)
  412716:	2c00      	cmp	r4, #0
  412718:	d0e2      	beq.n	4126e0 <.LVL207>
  41271a:	e004      	b.n	412726 <.LVL221>
       err = mp_sqr(&t1, x);
  41271c:	4629      	mov	r1, r5
  41271e:	a88c      	add	r0, sp, #560	; 0x230

00412720 <.LVL219>:
  412720:	f00b fad2 	bl	41dcc8 <.LFE105>

00412724 <.LVL220>:
  412724:	4604      	mov	r4, r0

00412726 <.LVL221>:
   if (err == MP_OKAY)
  412726:	b9c4      	cbnz	r4, 41275a <.LVL230>
       err = mp_montgomery_reduce(x, modulus, mp);
  412728:	f8dd 2478 	ldr.w	r2, [sp, #1144]	; 0x478
  41272c:	4641      	mov	r1, r8
  41272e:	4628      	mov	r0, r5

00412730 <.LVL222>:
  412730:	f00b facf 	bl	41dcd2 <.LFE110>

00412734 <.LVL223>:
  412734:	4604      	mov	r4, r0

00412736 <.LVL224>:
   if (err == MP_OKAY)
  412736:	2c00      	cmp	r4, #0
  412738:	d151      	bne.n	4127de <.LVL251>
       err = mp_sub(x, y, x);
  41273a:	462a      	mov	r2, r5
  41273c:	4639      	mov	r1, r7
  41273e:	4628      	mov	r0, r5

00412740 <.LVL225>:
  412740:	f00b fa9f 	bl	41dc82 <.LFE71>

00412744 <.LVL226>:
  412744:	4604      	mov	r4, r0

00412746 <.LVL227>:
   if (err == MP_OKAY) {
  412746:	b98c      	cbnz	r4, 41276c <.LVL233>
       if (mp_isneg(x))
  412748:	686b      	ldr	r3, [r5, #4]
  41274a:	2b00      	cmp	r3, #0
  41274c:	d13a      	bne.n	4127c4 <.LVL245+0x2>

0041274e <.LVL228>:
       err = mp_sub(x, y, x);
  41274e:	462a      	mov	r2, r5
  412750:	4639      	mov	r1, r7
  412752:	4628      	mov	r0, r5
  412754:	f00b fa95 	bl	41dc82 <.LFE71>

00412758 <.LVL229>:
  412758:	4604      	mov	r4, r0

0041275a <.LVL230>:
   if (err == MP_OKAY) {
  41275a:	b98c      	cbnz	r4, 412780 <.LVL236>
       if (mp_isneg(x))
  41275c:	686b      	ldr	r3, [r5, #4]
  41275e:	bbc3      	cbnz	r3, 4127d2 <.LVL248+0x2>

00412760 <.LVL231>:
       err = mp_sub(y, x, y);
  412760:	463a      	mov	r2, r7
  412762:	4629      	mov	r1, r5
  412764:	4638      	mov	r0, r7
  412766:	f00b fa8c 	bl	41dc82 <.LFE71>

0041276a <.LVL232>:
  41276a:	4604      	mov	r4, r0

0041276c <.LVL233>:
   if (err == MP_OKAY) {
  41276c:	b9dc      	cbnz	r4, 4127a6 <.LVL242>
       if (mp_isneg(y))
  41276e:	f8d5 322c 	ldr.w	r3, [r5, #556]	; 0x22c
  412772:	bbbb      	cbnz	r3, 4127e4 <.LVL251+0x6>

00412774 <.LVL234>:
       err = mp_mul(y, &t1, y);
  412774:	463a      	mov	r2, r7
  412776:	a98c      	add	r1, sp, #560	; 0x230
  412778:	4638      	mov	r0, r7
  41277a:	f00b fa8c 	bl	41dc96 <.LFE86>

0041277e <.LVL235>:
  41277e:	4604      	mov	r4, r0

00412780 <.LVL236>:
   if (err == MP_OKAY)
  412780:	2c00      	cmp	r4, #0
  412782:	f47f aed1 	bne.w	412528 <.LVL127>
       err = mp_montgomery_reduce(y, modulus, mp);
  412786:	f8dd 2478 	ldr.w	r2, [sp, #1144]	; 0x478
  41278a:	4641      	mov	r1, r8
  41278c:	4638      	mov	r0, r7

0041278e <.LVL237>:
  41278e:	f00b faa0 	bl	41dcd2 <.LFE110>

00412792 <.LVL238>:
  412792:	4604      	mov	r4, r0

00412794 <.LVL239>:
   if (err == MP_OKAY)
  412794:	2c00      	cmp	r4, #0
  412796:	f47f aec7 	bne.w	412528 <.LVL127>
       err = mp_sub(y, &t2, y);
  41279a:	463a      	mov	r2, r7
  41279c:	a902      	add	r1, sp, #8
  41279e:	4638      	mov	r0, r7

004127a0 <.LVL240>:
  4127a0:	f00b fa6f 	bl	41dc82 <.LFE71>

004127a4 <.LVL241>:
  4127a4:	4604      	mov	r4, r0

004127a6 <.LVL242>:
   if (err == MP_OKAY) {
  4127a6:	2c00      	cmp	r4, #0
  4127a8:	f47f aebe 	bne.w	412528 <.LVL127>
       if (mp_isneg(y))
  4127ac:	f8d5 422c 	ldr.w	r4, [r5, #556]	; 0x22c
  4127b0:	2c00      	cmp	r4, #0
  4127b2:	f43f aeb9 	beq.w	412528 <.LVL127>
           err = mp_add(y, modulus, y);
  4127b6:	463a      	mov	r2, r7
  4127b8:	4641      	mov	r1, r8
  4127ba:	4638      	mov	r0, r7

004127bc <.LVL243>:
  4127bc:	f00b fa5c 	bl	41dc78 <.LFE231>

004127c0 <.LVL244>:
  4127c0:	4604      	mov	r4, r0

004127c2 <.LVL245>:
  4127c2:	e6b1      	b.n	412528 <.LVL127>
           err = mp_add(x, modulus, x);
  4127c4:	462a      	mov	r2, r5
  4127c6:	4641      	mov	r1, r8
  4127c8:	4628      	mov	r0, r5

004127ca <.LVL246>:
  4127ca:	f00b fa55 	bl	41dc78 <.LFE231>

004127ce <.LVL247>:
  4127ce:	4604      	mov	r4, r0

004127d0 <.LVL248>:
  4127d0:	e6a4      	b.n	41251c <.LVL126+0x28>
           err = mp_add(x, modulus, x);
  4127d2:	462a      	mov	r2, r5
  4127d4:	4641      	mov	r1, r8
  4127d6:	4628      	mov	r0, r5

004127d8 <.LVL249>:
  4127d8:	f00b fa4e 	bl	41dc78 <.LFE231>

004127dc <.LVL250>:
  4127dc:	4604      	mov	r4, r0

004127de <.LVL251>:
   if (err == MP_OKAY)
  4127de:	2c00      	cmp	r4, #0
  4127e0:	d1d8      	bne.n	412794 <.LVL239>
  4127e2:	e7bd      	b.n	412760 <.LVL231>
           err = mp_add(y, modulus, y);
  4127e4:	463a      	mov	r2, r7
  4127e6:	4641      	mov	r1, r8
  4127e8:	4638      	mov	r0, r7

004127ea <.LVL252>:
  4127ea:	f00b fa45 	bl	41dc78 <.LFE231>

004127ee <.LVL253>:
  4127ee:	4604      	mov	r4, r0

004127f0 <.LVL254>:
  4127f0:	e697      	b.n	412522 <.LVL126+0x2e>

004127f2 <.LVL255>:
       return ECC_BAD_ARG_E;
  4127f2:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
  4127f6:	e670      	b.n	4124da <.LVL121>

Disassembly of section .text._realloc_r%67:

004127f8 <_realloc_r>:
  4127f8:	2900      	cmp	r1, #0
  4127fa:	f000 8095 	beq.w	412928 <.LCFI6>
  4127fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00412802 <.LCFI0>:
  412802:	460d      	mov	r5, r1
  412804:	4616      	mov	r6, r2
  412806:	b083      	sub	sp, #12

00412808 <.LCFI1>:
  412808:	4680      	mov	r8, r0
  41280a:	f106 070b 	add.w	r7, r6, #11
  41280e:	f006 fbf1 	bl	418ff4 <.LFE180>

00412812 <.LVL1>:
  412812:	f855 ec04 	ldr.w	lr, [r5, #-4]
  412816:	2f16      	cmp	r7, #22
  412818:	f02e 0403 	bic.w	r4, lr, #3
  41281c:	f1a5 0908 	sub.w	r9, r5, #8

00412820 <.LVL2>:
  412820:	d83c      	bhi.n	41289c <.LVL18>
  412822:	2210      	movs	r2, #16
  412824:	4617      	mov	r7, r2

00412826 <.LVL3>:
  412826:	42be      	cmp	r6, r7
  412828:	d83d      	bhi.n	4128a6 <.LVL19+0x6>
  41282a:	4294      	cmp	r4, r2
  41282c:	da43      	bge.n	4128b6 <.LCFI3>
  41282e:	4bc4      	ldr	r3, [pc, #784]	; (412b40 <.LVL142+0x2>)
  412830:	6899      	ldr	r1, [r3, #8]
  412832:	eb09 0004 	add.w	r0, r9, r4

00412836 <.LVL4>:
  412836:	4288      	cmp	r0, r1
  412838:	f000 80b4 	beq.w	4129a4 <.LVL65>
  41283c:	6843      	ldr	r3, [r0, #4]
  41283e:	f023 0101 	bic.w	r1, r3, #1
  412842:	4401      	add	r1, r0
  412844:	6849      	ldr	r1, [r1, #4]
  412846:	07c9      	lsls	r1, r1, #31
  412848:	d54c      	bpl.n	4128e4 <.LCFI5>

0041284a <.LVL5>:
  41284a:	f01e 0f01 	tst.w	lr, #1
  41284e:	f000 809b 	beq.w	412988 <.LBE12>

00412852 <.LVL6>:
  412852:	4631      	mov	r1, r6
  412854:	4640      	mov	r0, r8
  412856:	f7fb fae7 	bl	40de28 <.LFE183>

0041285a <.LVL7>:
  41285a:	4606      	mov	r6, r0

0041285c <.LVL8>:
  41285c:	2800      	cmp	r0, #0
  41285e:	d03a      	beq.n	4128d6 <.LVL26>

00412860 <.LVL9>:
  412860:	f855 3c04 	ldr.w	r3, [r5, #-4]
  412864:	f023 0301 	bic.w	r3, r3, #1
  412868:	444b      	add	r3, r9
  41286a:	f1a0 0208 	sub.w	r2, r0, #8

0041286e <.LVL10>:
  41286e:	429a      	cmp	r2, r3
  412870:	f000 8121 	beq.w	412ab6 <.LBE24>

00412874 <.LBB2>:
  412874:	1f22      	subs	r2, r4, #4

00412876 <.LVL11>:
  412876:	2a24      	cmp	r2, #36	; 0x24
  412878:	f200 8107 	bhi.w	412a8a <.LBB21>

0041287c <.LBB3>:
  41287c:	2a13      	cmp	r2, #19
  41287e:	f200 80db 	bhi.w	412a38 <.LBB18>
  412882:	4603      	mov	r3, r0
  412884:	462a      	mov	r2, r5

00412886 <.LVL13>:
  412886:	6811      	ldr	r1, [r2, #0]
  412888:	6019      	str	r1, [r3, #0]

0041288a <.LVL14>:
  41288a:	6851      	ldr	r1, [r2, #4]
  41288c:	6059      	str	r1, [r3, #4]
  41288e:	6892      	ldr	r2, [r2, #8]

00412890 <.LVL15>:
  412890:	609a      	str	r2, [r3, #8]

00412892 <.LBE2>:
  412892:	4629      	mov	r1, r5
  412894:	4640      	mov	r0, r8
  412896:	f002 fd7f 	bl	415398 <_free_r>

0041289a <.LVL17>:
  41289a:	e01c      	b.n	4128d6 <.LVL26>

0041289c <.LVL18>:
  41289c:	f027 0707 	bic.w	r7, r7, #7

004128a0 <.LVL19>:
  4128a0:	2f00      	cmp	r7, #0
  4128a2:	463a      	mov	r2, r7
  4128a4:	dabf      	bge.n	412826 <.LVL3>
  4128a6:	2600      	movs	r6, #0

004128a8 <.LVL20>:
  4128a8:	230c      	movs	r3, #12
  4128aa:	4630      	mov	r0, r6
  4128ac:	f8c8 3000 	str.w	r3, [r8]
  4128b0:	b003      	add	sp, #12

004128b2 <.LCFI2>:
  4128b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004128b6 <.LCFI3>:
  4128b6:	462e      	mov	r6, r5

004128b8 <.L11>:
  4128b8:	1be3      	subs	r3, r4, r7

004128ba <.LVL23>:
  4128ba:	2b0f      	cmp	r3, #15
  4128bc:	d81e      	bhi.n	4128fc <.LVL35>
  4128be:	f8d9 3004 	ldr.w	r3, [r9, #4]

004128c2 <.LVL24>:
  4128c2:	f003 0301 	and.w	r3, r3, #1
  4128c6:	4323      	orrs	r3, r4
  4128c8:	444c      	add	r4, r9

004128ca <.LVL25>:
  4128ca:	f8c9 3004 	str.w	r3, [r9, #4]
  4128ce:	6863      	ldr	r3, [r4, #4]
  4128d0:	f043 0301 	orr.w	r3, r3, #1
  4128d4:	6063      	str	r3, [r4, #4]

004128d6 <.LVL26>:
  4128d6:	4640      	mov	r0, r8
  4128d8:	f008 fb1c 	bl	41af14 <.LFE269>

004128dc <.LVL27>:
  4128dc:	4630      	mov	r0, r6
  4128de:	b003      	add	sp, #12

004128e0 <.LCFI4>:
  4128e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004128e4 <.LCFI5>:
  4128e4:	f023 0303 	bic.w	r3, r3, #3

004128e8 <.LVL29>:
  4128e8:	18e1      	adds	r1, r4, r3
  4128ea:	4291      	cmp	r1, r2
  4128ec:	db1f      	blt.n	41292e <.LCFI7>
  4128ee:	68c3      	ldr	r3, [r0, #12]

004128f0 <.LVL30>:
  4128f0:	6882      	ldr	r2, [r0, #8]

004128f2 <.LVL31>:
  4128f2:	462e      	mov	r6, r5

004128f4 <.LVL32>:
  4128f4:	60d3      	str	r3, [r2, #12]
  4128f6:	460c      	mov	r4, r1

004128f8 <.LVL33>:
  4128f8:	609a      	str	r2, [r3, #8]

004128fa <.LVL34>:
  4128fa:	e7dd      	b.n	4128b8 <.L11>

004128fc <.LVL35>:
  4128fc:	f8d9 2004 	ldr.w	r2, [r9, #4]
  412900:	eb09 0107 	add.w	r1, r9, r7

00412904 <.LVL36>:
  412904:	f002 0201 	and.w	r2, r2, #1
  412908:	444c      	add	r4, r9

0041290a <.LVL37>:
  41290a:	f043 0301 	orr.w	r3, r3, #1

0041290e <.LVL38>:
  41290e:	4317      	orrs	r7, r2

00412910 <.LVL39>:
  412910:	f8c9 7004 	str.w	r7, [r9, #4]
  412914:	604b      	str	r3, [r1, #4]
  412916:	6863      	ldr	r3, [r4, #4]
  412918:	f043 0301 	orr.w	r3, r3, #1
  41291c:	3108      	adds	r1, #8

0041291e <.LVL40>:
  41291e:	6063      	str	r3, [r4, #4]
  412920:	4640      	mov	r0, r8
  412922:	f002 fd39 	bl	415398 <_free_r>

00412926 <.LVL41>:
  412926:	e7d6      	b.n	4128d6 <.LVL26>

00412928 <.LCFI6>:
  412928:	4611      	mov	r1, r2

0041292a <.LVL43>:
  41292a:	f7fb ba7d 	b.w	40de28 <.LFE183>

0041292e <.LCFI7>:
  41292e:	f01e 0f01 	tst.w	lr, #1
  412932:	d18e      	bne.n	412852 <.LVL6>
  412934:	f855 1c08 	ldr.w	r1, [r5, #-8]
  412938:	eba9 0a01 	sub.w	sl, r9, r1

0041293c <.LVL45>:
  41293c:	f8da 1004 	ldr.w	r1, [sl, #4]
  412940:	f021 0103 	bic.w	r1, r1, #3

00412944 <.LVL46>:
  412944:	440b      	add	r3, r1

00412946 <.LVL47>:
  412946:	4423      	add	r3, r4
  412948:	4293      	cmp	r3, r2
  41294a:	db25      	blt.n	412998 <.LVL63>
  41294c:	68c2      	ldr	r2, [r0, #12]

0041294e <.LVL48>:
  41294e:	6881      	ldr	r1, [r0, #8]

00412950 <.LVL49>:
  412950:	4656      	mov	r6, sl

00412952 <.LVL50>:
  412952:	60ca      	str	r2, [r1, #12]
  412954:	6091      	str	r1, [r2, #8]

00412956 <.LVL51>:
  412956:	f8da 100c 	ldr.w	r1, [sl, #12]

0041295a <.LVL52>:
  41295a:	f856 0f08 	ldr.w	r0, [r6, #8]!

0041295e <.LBB7>:
  41295e:	1f22      	subs	r2, r4, #4
  412960:	2a24      	cmp	r2, #36	; 0x24

00412962 <.LBE7>:
  412962:	60c1      	str	r1, [r0, #12]
  412964:	6088      	str	r0, [r1, #8]

00412966 <.LBB12>:
  412966:	f200 8094 	bhi.w	412a92 <.LBB22>

0041296a <.LBB8>:
  41296a:	2a13      	cmp	r2, #19
  41296c:	d96f      	bls.n	412a4e <.LBB19>

0041296e <.LVL56>:
  41296e:	6829      	ldr	r1, [r5, #0]

00412970 <.LVL57>:
  412970:	f8ca 1008 	str.w	r1, [sl, #8]

00412974 <.LVL58>:
  412974:	6869      	ldr	r1, [r5, #4]
  412976:	f8ca 100c 	str.w	r1, [sl, #12]
  41297a:	2a1b      	cmp	r2, #27
  41297c:	f200 80a2 	bhi.w	412ac4 <.LBB10>
  412980:	3508      	adds	r5, #8

00412982 <.LVL59>:
  412982:	f10a 0210 	add.w	r2, sl, #16

00412986 <.LVL60>:
  412986:	e063      	b.n	412a50 <.LVL92>

00412988 <.LBE12>:
  412988:	f855 3c08 	ldr.w	r3, [r5, #-8]
  41298c:	eba9 0a03 	sub.w	sl, r9, r3

00412990 <.LVL62>:
  412990:	f8da 1004 	ldr.w	r1, [sl, #4]
  412994:	f021 0103 	bic.w	r1, r1, #3

00412998 <.LVL63>:
  412998:	1863      	adds	r3, r4, r1
  41299a:	4293      	cmp	r3, r2
  41299c:	f6ff af59 	blt.w	412852 <.LVL6>
  4129a0:	4656      	mov	r6, sl

004129a2 <.LVL64>:
  4129a2:	e7d8      	b.n	412956 <.LVL51>

004129a4 <.LVL65>:
  4129a4:	6841      	ldr	r1, [r0, #4]
  4129a6:	f021 0b03 	bic.w	fp, r1, #3

004129aa <.LVL66>:
  4129aa:	44a3      	add	fp, r4

004129ac <.LVL67>:
  4129ac:	f107 0010 	add.w	r0, r7, #16

004129b0 <.LVL68>:
  4129b0:	4583      	cmp	fp, r0
  4129b2:	da56      	bge.n	412a62 <.LBE20>

004129b4 <.LVL69>:
  4129b4:	f01e 0f01 	tst.w	lr, #1
  4129b8:	f47f af4b 	bne.w	412852 <.LVL6>
  4129bc:	f855 1c08 	ldr.w	r1, [r5, #-8]

004129c0 <.LVL70>:
  4129c0:	eba9 0a01 	sub.w	sl, r9, r1

004129c4 <.LVL71>:
  4129c4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4129c8:	f021 0103 	bic.w	r1, r1, #3

004129cc <.LVL72>:
  4129cc:	448b      	add	fp, r1
  4129ce:	4558      	cmp	r0, fp
  4129d0:	dce2      	bgt.n	412998 <.LVL63>
  4129d2:	4656      	mov	r6, sl

004129d4 <.LVL73>:
  4129d4:	f8da 100c 	ldr.w	r1, [sl, #12]

004129d8 <.LVL74>:
  4129d8:	f856 0f08 	ldr.w	r0, [r6, #8]!

004129dc <.LBB13>:
  4129dc:	1f22      	subs	r2, r4, #4
  4129de:	2a24      	cmp	r2, #36	; 0x24

004129e0 <.LBE13>:
  4129e0:	60c1      	str	r1, [r0, #12]
  4129e2:	6088      	str	r0, [r1, #8]

004129e4 <.LBB17>:
  4129e4:	f200 808f 	bhi.w	412b06 <.LBE15>

004129e8 <.LBB14>:
  4129e8:	2a13      	cmp	r2, #19
  4129ea:	f240 808a 	bls.w	412b02 <.LBB15>

004129ee <.LVL78>:
  4129ee:	6829      	ldr	r1, [r5, #0]

004129f0 <.LVL79>:
  4129f0:	f8ca 1008 	str.w	r1, [sl, #8]

004129f4 <.LVL80>:
  4129f4:	6869      	ldr	r1, [r5, #4]
  4129f6:	f8ca 100c 	str.w	r1, [sl, #12]
  4129fa:	2a1b      	cmp	r2, #27
  4129fc:	f200 808a 	bhi.w	412b14 <.LBB16>
  412a00:	3508      	adds	r5, #8

00412a02 <.LVL81>:
  412a02:	f10a 0210 	add.w	r2, sl, #16

00412a06 <.LVL82>:
  412a06:	6829      	ldr	r1, [r5, #0]
  412a08:	6011      	str	r1, [r2, #0]

00412a0a <.LVL83>:
  412a0a:	6869      	ldr	r1, [r5, #4]
  412a0c:	6051      	str	r1, [r2, #4]
  412a0e:	68a9      	ldr	r1, [r5, #8]
  412a10:	6091      	str	r1, [r2, #8]

00412a12 <.LBE14>:
  412a12:	eb0a 0107 	add.w	r1, sl, r7
  412a16:	ebab 0207 	sub.w	r2, fp, r7
  412a1a:	f042 0201 	orr.w	r2, r2, #1
  412a1e:	6099      	str	r1, [r3, #8]
  412a20:	604a      	str	r2, [r1, #4]
  412a22:	f8da 3004 	ldr.w	r3, [sl, #4]
  412a26:	f003 0301 	and.w	r3, r3, #1
  412a2a:	431f      	orrs	r7, r3

00412a2c <.LVL85>:
  412a2c:	4640      	mov	r0, r8
  412a2e:	f8ca 7004 	str.w	r7, [sl, #4]
  412a32:	f008 fa6f 	bl	41af14 <.LFE269>

00412a36 <.LVL86>:
  412a36:	e751      	b.n	4128dc <.LVL27>

00412a38 <.LBB18>:
  412a38:	682b      	ldr	r3, [r5, #0]
  412a3a:	6003      	str	r3, [r0, #0]

00412a3c <.LVL88>:
  412a3c:	686b      	ldr	r3, [r5, #4]
  412a3e:	6043      	str	r3, [r0, #4]
  412a40:	2a1b      	cmp	r2, #27
  412a42:	d82d      	bhi.n	412aa0 <.LBB24>
  412a44:	f100 0308 	add.w	r3, r0, #8

00412a48 <.LVL89>:
  412a48:	f105 0208 	add.w	r2, r5, #8

00412a4c <.LVL90>:
  412a4c:	e71b      	b.n	412886 <.LVL13>

00412a4e <.LBB19>:
  412a4e:	4632      	mov	r2, r6

00412a50 <.LVL92>:
  412a50:	6829      	ldr	r1, [r5, #0]
  412a52:	6011      	str	r1, [r2, #0]

00412a54 <.LVL93>:
  412a54:	6869      	ldr	r1, [r5, #4]
  412a56:	6051      	str	r1, [r2, #4]
  412a58:	68a9      	ldr	r1, [r5, #8]
  412a5a:	6091      	str	r1, [r2, #8]

00412a5c <.LBE19>:
  412a5c:	461c      	mov	r4, r3

00412a5e <.LBB20>:
  412a5e:	46d1      	mov	r9, sl

00412a60 <.LVL95>:
  412a60:	e72a      	b.n	4128b8 <.L11>

00412a62 <.LBE20>:
  412a62:	eb09 0107 	add.w	r1, r9, r7

00412a66 <.LVL97>:
  412a66:	ebab 0b07 	sub.w	fp, fp, r7

00412a6a <.LVL98>:
  412a6a:	f04b 0201 	orr.w	r2, fp, #1
  412a6e:	6099      	str	r1, [r3, #8]
  412a70:	604a      	str	r2, [r1, #4]

00412a72 <.LVL99>:
  412a72:	f855 3c04 	ldr.w	r3, [r5, #-4]
  412a76:	f003 0301 	and.w	r3, r3, #1
  412a7a:	431f      	orrs	r7, r3

00412a7c <.LVL100>:
  412a7c:	4640      	mov	r0, r8

00412a7e <.LVL101>:
  412a7e:	f845 7c04 	str.w	r7, [r5, #-4]
  412a82:	f008 fa47 	bl	41af14 <.LFE269>

00412a86 <.LVL102>:
  412a86:	462e      	mov	r6, r5

00412a88 <.LVL103>:
  412a88:	e728      	b.n	4128dc <.LVL27>

00412a8a <.LBB21>:
  412a8a:	4629      	mov	r1, r5
  412a8c:	f005 fe90 	bl	4187b0 <.LFE164>

00412a90 <.LVL105>:
  412a90:	e6ff      	b.n	412892 <.LBE2>

00412a92 <.LBB22>:
  412a92:	4629      	mov	r1, r5

00412a94 <.LVL107>:
  412a94:	4630      	mov	r0, r6

00412a96 <.LBE22>:
  412a96:	461c      	mov	r4, r3

00412a98 <.LBB23>:
  412a98:	46d1      	mov	r9, sl

00412a9a <.LVL110>:
  412a9a:	f005 fe89 	bl	4187b0 <.LFE164>

00412a9e <.LVL111>:
  412a9e:	e70b      	b.n	4128b8 <.L11>

00412aa0 <.LBB24>:
  412aa0:	68ab      	ldr	r3, [r5, #8]
  412aa2:	6083      	str	r3, [r0, #8]

00412aa4 <.LVL113>:
  412aa4:	68eb      	ldr	r3, [r5, #12]
  412aa6:	60c3      	str	r3, [r0, #12]
  412aa8:	2a24      	cmp	r2, #36	; 0x24
  412aaa:	d017      	beq.n	412adc <.LBB26>
  412aac:	f100 0310 	add.w	r3, r0, #16

00412ab0 <.LVL114>:
  412ab0:	f105 0210 	add.w	r2, r5, #16

00412ab4 <.LVL115>:
  412ab4:	e6e7      	b.n	412886 <.LVL13>

00412ab6 <.LBE24>:
  412ab6:	f850 3c04 	ldr.w	r3, [r0, #-4]
  412aba:	f023 0303 	bic.w	r3, r3, #3
  412abe:	441c      	add	r4, r3

00412ac0 <.LVL117>:
  412ac0:	462e      	mov	r6, r5
  412ac2:	e6f9      	b.n	4128b8 <.L11>

00412ac4 <.LBB10>:
  412ac4:	68a9      	ldr	r1, [r5, #8]
  412ac6:	f8ca 1010 	str.w	r1, [sl, #16]

00412aca <.LVL119>:
  412aca:	68e9      	ldr	r1, [r5, #12]
  412acc:	f8ca 1014 	str.w	r1, [sl, #20]
  412ad0:	2a24      	cmp	r2, #36	; 0x24
  412ad2:	d00c      	beq.n	412aee <.LBB11>
  412ad4:	3510      	adds	r5, #16

00412ad6 <.LVL120>:
  412ad6:	f10a 0218 	add.w	r2, sl, #24

00412ada <.LVL121>:
  412ada:	e7b9      	b.n	412a50 <.LVL92>

00412adc <.LBB26>:
  412adc:	692b      	ldr	r3, [r5, #16]
  412ade:	6103      	str	r3, [r0, #16]
  412ae0:	696b      	ldr	r3, [r5, #20]
  412ae2:	6143      	str	r3, [r0, #20]
  412ae4:	f105 0218 	add.w	r2, r5, #24

00412ae8 <.LVL123>:
  412ae8:	f100 0318 	add.w	r3, r0, #24

00412aec <.LVL124>:
  412aec:	e6cb      	b.n	412886 <.LVL13>

00412aee <.LBB11>:
  412aee:	692a      	ldr	r2, [r5, #16]

00412af0 <.LVL126>:
  412af0:	f8ca 2018 	str.w	r2, [sl, #24]
  412af4:	696a      	ldr	r2, [r5, #20]
  412af6:	f8ca 201c 	str.w	r2, [sl, #28]
  412afa:	3518      	adds	r5, #24

00412afc <.LVL127>:
  412afc:	f10a 0220 	add.w	r2, sl, #32

00412b00 <.LVL128>:
  412b00:	e7a6      	b.n	412a50 <.LVL92>

00412b02 <.LBB15>:
  412b02:	4632      	mov	r2, r6

00412b04 <.LVL130>:
  412b04:	e77f      	b.n	412a06 <.LVL82>

00412b06 <.LBE15>:
  412b06:	4629      	mov	r1, r5

00412b08 <.LVL132>:
  412b08:	4630      	mov	r0, r6

00412b0a <.LVL133>:
  412b0a:	9301      	str	r3, [sp, #4]
  412b0c:	f005 fe50 	bl	4187b0 <.LFE164>

00412b10 <.LVL134>:
  412b10:	9b01      	ldr	r3, [sp, #4]
  412b12:	e77e      	b.n	412a12 <.LBE14>

00412b14 <.LBB16>:
  412b14:	68a9      	ldr	r1, [r5, #8]
  412b16:	f8ca 1010 	str.w	r1, [sl, #16]

00412b1a <.LVL136>:
  412b1a:	68e9      	ldr	r1, [r5, #12]
  412b1c:	f8ca 1014 	str.w	r1, [sl, #20]
  412b20:	2a24      	cmp	r2, #36	; 0x24
  412b22:	d003      	beq.n	412b2c <.LVL139>
  412b24:	3510      	adds	r5, #16

00412b26 <.LVL137>:
  412b26:	f10a 0218 	add.w	r2, sl, #24

00412b2a <.LVL138>:
  412b2a:	e76c      	b.n	412a06 <.LVL82>

00412b2c <.LVL139>:
  412b2c:	692a      	ldr	r2, [r5, #16]

00412b2e <.LVL140>:
  412b2e:	f8ca 2018 	str.w	r2, [sl, #24]
  412b32:	696a      	ldr	r2, [r5, #20]
  412b34:	f8ca 201c 	str.w	r2, [sl, #28]
  412b38:	3518      	adds	r5, #24

00412b3a <.LVL141>:
  412b3a:	f10a 0220 	add.w	r2, sl, #32

00412b3e <.LVL142>:
  412b3e:	e762      	b.n	412a06 <.LVL82>
  412b40:	2040cc80 	.word	0x2040cc80

Disassembly of section .text.compress_block%68:

00412b44 <compress_block>:
{
  412b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00412b48 <.LCFI7>:
  412b48:	b083      	sub	sp, #12

00412b4a <.LCFI8>:
  412b4a:	9201      	str	r2, [sp, #4]

00412b4c <.LVL120>:
    if (s->last_lit != 0) do {
  412b4c:	f500 53b5 	add.w	r3, r0, #5792	; 0x16a0
  412b50:	681b      	ldr	r3, [r3, #0]
  412b52:	2b00      	cmp	r3, #0
  412b54:	f000 8153 	beq.w	412dfe <.LBB44>
  412b58:	2400      	movs	r4, #0
        dist = s->d_buf[lx];
  412b5a:	f241 6ba4 	movw	fp, #5796	; 0x16a4
  412b5e:	4483      	add	fp, r0
        lc = s->l_buf[lx++];
  412b60:	f241 6a98 	movw	sl, #5784	; 0x1698
  412b64:	4482      	add	sl, r0

00412b66 <.LBB28>:
            send_code(s, code+LITERALS+1, ltree); /* send the length code */
  412b66:	f241 66bc 	movw	r6, #5820	; 0x16bc
  412b6a:	4406      	add	r6, r0

00412b6c <.LBE28>:
            code = d_code(dist);
  412b6c:	9100      	str	r1, [sp, #0]
  412b6e:	e011      	b.n	412b94 <.LVL125>

00412b70 <.LBB30>:
            send_code(s, lc, ltree); /* send a literal byte */
  412b70:	f241 64b8 	movw	r4, #5816	; 0x16b8
  412b74:	9900      	ldr	r1, [sp, #0]
  412b76:	f831 2022 	ldrh.w	r2, [r1, r2, lsl #2]

00412b7a <.LVL122>:
  412b7a:	409a      	lsls	r2, r3
  412b7c:	5b07      	ldrh	r7, [r0, r4]
  412b7e:	433a      	orrs	r2, r7
  412b80:	5302      	strh	r2, [r0, r4]

00412b82 <.LVL123>:
  412b82:	442b      	add	r3, r5
  412b84:	6033      	str	r3, [r6, #0]

00412b86 <.LBE30>:
        lc = s->l_buf[lx++];
  412b86:	464c      	mov	r4, r9
    } while (lx < s->last_lit);
  412b88:	f500 53b5 	add.w	r3, r0, #5792	; 0x16a0
  412b8c:	681b      	ldr	r3, [r3, #0]
  412b8e:	4599      	cmp	r9, r3
  412b90:	f080 8134 	bcs.w	412dfc <.LVL176>

00412b94 <.LVL125>:
        dist = s->d_buf[lx];
  412b94:	f8db 3000 	ldr.w	r3, [fp]
  412b98:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]

00412b9c <.LVL126>:
        lc = s->l_buf[lx++];
  412b9c:	f104 0901 	add.w	r9, r4, #1

00412ba0 <.LVL127>:
  412ba0:	f8da 2000 	ldr.w	r2, [sl]
  412ba4:	5d12      	ldrb	r2, [r2, r4]

00412ba6 <.LVL128>:
        if (dist == 0) {
  412ba6:	bb53      	cbnz	r3, 412bfe <.LBE32>

00412ba8 <.LBB32>:
            send_code(s, lc, ltree); /* send a literal byte */
  412ba8:	9900      	ldr	r1, [sp, #0]
  412baa:	eb01 0382 	add.w	r3, r1, r2, lsl #2

00412bae <.LVL129>:
  412bae:	885d      	ldrh	r5, [r3, #2]

00412bb0 <.LVL130>:
  412bb0:	6833      	ldr	r3, [r6, #0]
  412bb2:	f1c5 0410 	rsb	r4, r5, #16

00412bb6 <.LVL131>:
  412bb6:	42a3      	cmp	r3, r4
  412bb8:	ddda      	ble.n	412b70 <.LBB30>

00412bba <.LBB31>:
  412bba:	f831 e022 	ldrh.w	lr, [r1, r2, lsl #2]

00412bbe <.LVL132>:
  412bbe:	f241 67b8 	movw	r7, #5816	; 0x16b8
  412bc2:	fa0e f403 	lsl.w	r4, lr, r3
  412bc6:	5bc3      	ldrh	r3, [r0, r7]
  412bc8:	431c      	orrs	r4, r3
  412bca:	b224      	sxth	r4, r4
  412bcc:	53c4      	strh	r4, [r0, r7]

00412bce <.LVL133>:
  412bce:	6943      	ldr	r3, [r0, #20]
  412bd0:	1c5a      	adds	r2, r3, #1

00412bd2 <.LVL134>:
  412bd2:	6142      	str	r2, [r0, #20]
  412bd4:	6882      	ldr	r2, [r0, #8]
  412bd6:	54d4      	strb	r4, [r2, r3]
  412bd8:	6882      	ldr	r2, [r0, #8]
  412bda:	6944      	ldr	r4, [r0, #20]
  412bdc:	1c63      	adds	r3, r4, #1
  412bde:	6143      	str	r3, [r0, #20]
  412be0:	5bc3      	ldrh	r3, [r0, r7]
  412be2:	0a1b      	lsrs	r3, r3, #8
  412be4:	5513      	strb	r3, [r2, r4]
  412be6:	6832      	ldr	r2, [r6, #0]
  412be8:	f1c2 0310 	rsb	r3, r2, #16
  412bec:	fa4e fe03 	asr.w	lr, lr, r3

00412bf0 <.LVL135>:
  412bf0:	f820 e007 	strh.w	lr, [r0, r7]
  412bf4:	f1a5 0310 	sub.w	r3, r5, #16
  412bf8:	4413      	add	r3, r2
  412bfa:	6033      	str	r3, [r6, #0]

00412bfc <.LBE31>:
  412bfc:	e7c3      	b.n	412b86 <.LBE30>

00412bfe <.LBE32>:
            code = _length_code[lc];
  412bfe:	4c9c      	ldr	r4, [pc, #624]	; (412e70 <.LBE45+0x2>)
  412c00:	f814 e002 	ldrb.w	lr, [r4, r2]

00412c04 <.LBB33>:
            send_code(s, code+LITERALS+1, ltree); /* send the length code */
  412c04:	f20e 1701 	addw	r7, lr, #257	; 0x101
  412c08:	9900      	ldr	r1, [sp, #0]
  412c0a:	eb01 0487 	add.w	r4, r1, r7, lsl #2
  412c0e:	8865      	ldrh	r5, [r4, #2]

00412c10 <.LVL138>:
  412c10:	6834      	ldr	r4, [r6, #0]
  412c12:	f1c5 0c10 	rsb	ip, r5, #16
  412c16:	4564      	cmp	r4, ip
  412c18:	f340 80b6 	ble.w	412d88 <.LBB40>

00412c1c <.LBB29>:
  412c1c:	f831 8027 	ldrh.w	r8, [r1, r7, lsl #2]

00412c20 <.LVL139>:
  412c20:	f241 6cb8 	movw	ip, #5816	; 0x16b8
  412c24:	fa08 f404 	lsl.w	r4, r8, r4
  412c28:	f830 700c 	ldrh.w	r7, [r0, ip]
  412c2c:	433c      	orrs	r4, r7
  412c2e:	b224      	sxth	r4, r4
  412c30:	f820 400c 	strh.w	r4, [r0, ip]
  412c34:	6947      	ldr	r7, [r0, #20]
  412c36:	1c79      	adds	r1, r7, #1
  412c38:	6141      	str	r1, [r0, #20]
  412c3a:	6881      	ldr	r1, [r0, #8]
  412c3c:	55cc      	strb	r4, [r1, r7]
  412c3e:	6944      	ldr	r4, [r0, #20]
  412c40:	1c67      	adds	r7, r4, #1
  412c42:	6147      	str	r7, [r0, #20]
  412c44:	f830 700c 	ldrh.w	r7, [r0, ip]
  412c48:	0a3f      	lsrs	r7, r7, #8
  412c4a:	6881      	ldr	r1, [r0, #8]
  412c4c:	550f      	strb	r7, [r1, r4]
  412c4e:	6834      	ldr	r4, [r6, #0]
  412c50:	f1c4 0710 	rsb	r7, r4, #16
  412c54:	fa48 f807 	asr.w	r8, r8, r7

00412c58 <.LVL140>:
  412c58:	f820 800c 	strh.w	r8, [r0, ip]
  412c5c:	3d10      	subs	r5, #16

00412c5e <.LVL141>:
  412c5e:	442c      	add	r4, r5
  412c60:	6034      	str	r4, [r6, #0]

00412c62 <.LBE29>:
            extra = extra_lbits[code];
  412c62:	4c84      	ldr	r4, [pc, #528]	; (412e74 <.LBE45+0x6>)
  412c64:	f854 502e 	ldr.w	r5, [r4, lr, lsl #2]

00412c68 <.LVL143>:
            if (extra != 0) {
  412c68:	b365      	cbz	r5, 412cc4 <.LBE34>
                lc -= base_length[code];
  412c6a:	4c83      	ldr	r4, [pc, #524]	; (412e78 <.LBE45+0xa>)
  412c6c:	f854 402e 	ldr.w	r4, [r4, lr, lsl #2]
  412c70:	1b12      	subs	r2, r2, r4

00412c72 <.LBB34>:
                send_bits(s, lc, extra);       /* send the extra length bits */
  412c72:	6837      	ldr	r7, [r6, #0]
  412c74:	f1c5 0410 	rsb	r4, r5, #16
  412c78:	42a7      	cmp	r7, r4
  412c7a:	f340 8094 	ble.w	412da6 <.LBB41>

00412c7e <.LVL145>:
  412c7e:	b292      	uxth	r2, r2

00412c80 <.LBB35>:
  412c80:	f241 6eb8 	movw	lr, #5816	; 0x16b8

00412c84 <.LVL147>:
  412c84:	fa02 f707 	lsl.w	r7, r2, r7
  412c88:	f830 400e 	ldrh.w	r4, [r0, lr]
  412c8c:	4327      	orrs	r7, r4
  412c8e:	b23f      	sxth	r7, r7
  412c90:	f820 700e 	strh.w	r7, [r0, lr]
  412c94:	6944      	ldr	r4, [r0, #20]
  412c96:	f104 0801 	add.w	r8, r4, #1
  412c9a:	f8c0 8014 	str.w	r8, [r0, #20]
  412c9e:	6881      	ldr	r1, [r0, #8]
  412ca0:	550f      	strb	r7, [r1, r4]
  412ca2:	6944      	ldr	r4, [r0, #20]
  412ca4:	1c67      	adds	r7, r4, #1
  412ca6:	6147      	str	r7, [r0, #20]
  412ca8:	f830 700e 	ldrh.w	r7, [r0, lr]
  412cac:	0a3f      	lsrs	r7, r7, #8
  412cae:	6881      	ldr	r1, [r0, #8]
  412cb0:	550f      	strb	r7, [r1, r4]
  412cb2:	6834      	ldr	r4, [r6, #0]
  412cb4:	f1c4 0710 	rsb	r7, r4, #16
  412cb8:	413a      	asrs	r2, r7
  412cba:	f820 200e 	strh.w	r2, [r0, lr]
  412cbe:	3d10      	subs	r5, #16

00412cc0 <.LVL148>:
  412cc0:	4425      	add	r5, r4

00412cc2 <.LVL149>:
  412cc2:	6035      	str	r5, [r6, #0]

00412cc4 <.LBE34>:
            dist--; /* dist is now the match distance - 1 */
  412cc4:	3b01      	subs	r3, #1
            code = d_code(dist);
  412cc6:	2bff      	cmp	r3, #255	; 0xff
  412cc8:	d879      	bhi.n	412dbe <.LBE41>
  412cca:	4a6c      	ldr	r2, [pc, #432]	; (412e7c <.LBE45+0xe>)
  412ccc:	5cd7      	ldrb	r7, [r2, r3]

00412cce <.LBB36>:
            send_code(s, code, dtree);       /* send the distance code */
  412cce:	9901      	ldr	r1, [sp, #4]
  412cd0:	eb01 0287 	add.w	r2, r1, r7, lsl #2
  412cd4:	8855      	ldrh	r5, [r2, #2]

00412cd6 <.LVL152>:
  412cd6:	6832      	ldr	r2, [r6, #0]
  412cd8:	f1c5 0410 	rsb	r4, r5, #16
  412cdc:	42a2      	cmp	r2, r4
  412cde:	dd74      	ble.n	412dca <.LBB42>

00412ce0 <.LBB37>:
  412ce0:	f831 c027 	ldrh.w	ip, [r1, r7, lsl #2]

00412ce4 <.LVL153>:
  412ce4:	f241 6eb8 	movw	lr, #5816	; 0x16b8
  412ce8:	fa0c f202 	lsl.w	r2, ip, r2
  412cec:	f830 400e 	ldrh.w	r4, [r0, lr]
  412cf0:	4322      	orrs	r2, r4
  412cf2:	b212      	sxth	r2, r2
  412cf4:	f820 200e 	strh.w	r2, [r0, lr]
  412cf8:	6944      	ldr	r4, [r0, #20]
  412cfa:	f104 0801 	add.w	r8, r4, #1
  412cfe:	f8c0 8014 	str.w	r8, [r0, #20]
  412d02:	6881      	ldr	r1, [r0, #8]
  412d04:	550a      	strb	r2, [r1, r4]
  412d06:	6942      	ldr	r2, [r0, #20]
  412d08:	1c54      	adds	r4, r2, #1
  412d0a:	6144      	str	r4, [r0, #20]
  412d0c:	f830 400e 	ldrh.w	r4, [r0, lr]
  412d10:	0a24      	lsrs	r4, r4, #8
  412d12:	6881      	ldr	r1, [r0, #8]
  412d14:	548c      	strb	r4, [r1, r2]
  412d16:	6832      	ldr	r2, [r6, #0]
  412d18:	f1c2 0410 	rsb	r4, r2, #16
  412d1c:	fa4c fc04 	asr.w	ip, ip, r4

00412d20 <.LVL154>:
  412d20:	f820 c00e 	strh.w	ip, [r0, lr]
  412d24:	3d10      	subs	r5, #16

00412d26 <.LVL155>:
  412d26:	4415      	add	r5, r2

00412d28 <.LVL156>:
  412d28:	6035      	str	r5, [r6, #0]

00412d2a <.LBE36>:
            extra = extra_dbits[code];
  412d2a:	4a55      	ldr	r2, [pc, #340]	; (412e80 <.LBE45+0x12>)
  412d2c:	f852 4027 	ldr.w	r4, [r2, r7, lsl #2]

00412d30 <.LVL157>:
            if (extra != 0) {
  412d30:	2c00      	cmp	r4, #0
  412d32:	f43f af28 	beq.w	412b86 <.LBE30>
                dist -= base_dist[code];
  412d36:	4a53      	ldr	r2, [pc, #332]	; (412e84 <.LBE45+0x16>)
  412d38:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
  412d3c:	1a9b      	subs	r3, r3, r2

00412d3e <.LBB38>:
                send_bits(s, dist, extra);   /* send the extra distance bits */
  412d3e:	6832      	ldr	r2, [r6, #0]
  412d40:	f1c4 0510 	rsb	r5, r4, #16
  412d44:	42aa      	cmp	r2, r5
  412d46:	dd4f      	ble.n	412de8 <.LBB43>

00412d48 <.LBB39>:
  412d48:	b29b      	uxth	r3, r3

00412d4a <.LVL160>:
  412d4a:	f241 65b8 	movw	r5, #5816	; 0x16b8
  412d4e:	fa03 f702 	lsl.w	r7, r3, r2

00412d52 <.LVL161>:
  412d52:	5b42      	ldrh	r2, [r0, r5]
  412d54:	4317      	orrs	r7, r2
  412d56:	b23f      	sxth	r7, r7
  412d58:	5347      	strh	r7, [r0, r5]
  412d5a:	6942      	ldr	r2, [r0, #20]
  412d5c:	f102 0c01 	add.w	ip, r2, #1
  412d60:	f8c0 c014 	str.w	ip, [r0, #20]
  412d64:	6881      	ldr	r1, [r0, #8]
  412d66:	548f      	strb	r7, [r1, r2]
  412d68:	6942      	ldr	r2, [r0, #20]
  412d6a:	1c57      	adds	r7, r2, #1
  412d6c:	6147      	str	r7, [r0, #20]
  412d6e:	5b47      	ldrh	r7, [r0, r5]
  412d70:	0a3f      	lsrs	r7, r7, #8
  412d72:	6881      	ldr	r1, [r0, #8]
  412d74:	548f      	strb	r7, [r1, r2]
  412d76:	6832      	ldr	r2, [r6, #0]
  412d78:	f1c2 0710 	rsb	r7, r2, #16
  412d7c:	413b      	asrs	r3, r7
  412d7e:	5343      	strh	r3, [r0, r5]
  412d80:	3c10      	subs	r4, #16

00412d82 <.LVL162>:
  412d82:	4414      	add	r4, r2

00412d84 <.LVL163>:
  412d84:	6034      	str	r4, [r6, #0]

00412d86 <.LBE39>:
  412d86:	e6fe      	b.n	412b86 <.LBE30>

00412d88 <.LBB40>:
            send_code(s, code+LITERALS+1, ltree); /* send the length code */
  412d88:	f241 6cb8 	movw	ip, #5816	; 0x16b8
  412d8c:	9900      	ldr	r1, [sp, #0]
  412d8e:	f831 7027 	ldrh.w	r7, [r1, r7, lsl #2]
  412d92:	40a7      	lsls	r7, r4
  412d94:	f830 800c 	ldrh.w	r8, [r0, ip]
  412d98:	ea47 0708 	orr.w	r7, r7, r8
  412d9c:	f820 700c 	strh.w	r7, [r0, ip]
  412da0:	4425      	add	r5, r4

00412da2 <.LVL165>:
  412da2:	6035      	str	r5, [r6, #0]
  412da4:	e75d      	b.n	412c62 <.LBE29>

00412da6 <.LBB41>:
                send_bits(s, lc, extra);       /* send the extra length bits */
  412da6:	f241 64b8 	movw	r4, #5816	; 0x16b8
  412daa:	b292      	uxth	r2, r2

00412dac <.LVL167>:
  412dac:	40ba      	lsls	r2, r7
  412dae:	f830 e004 	ldrh.w	lr, [r0, r4]

00412db2 <.LVL168>:
  412db2:	ea42 020e 	orr.w	r2, r2, lr
  412db6:	5302      	strh	r2, [r0, r4]
  412db8:	443d      	add	r5, r7

00412dba <.LVL169>:
  412dba:	6035      	str	r5, [r6, #0]
  412dbc:	e782      	b.n	412cc4 <.LBE34>

00412dbe <.LBE41>:
            code = d_code(dist);
  412dbe:	4a2f      	ldr	r2, [pc, #188]	; (412e7c <.LBE45+0xe>)
  412dc0:	eb02 12d3 	add.w	r2, r2, r3, lsr #7
  412dc4:	f892 7100 	ldrb.w	r7, [r2, #256]	; 0x100
  412dc8:	e781      	b.n	412cce <.LBB36>

00412dca <.LBB42>:
            send_code(s, code, dtree);       /* send the distance code */
  412dca:	f241 6eb8 	movw	lr, #5816	; 0x16b8
  412dce:	9901      	ldr	r1, [sp, #4]
  412dd0:	f831 4027 	ldrh.w	r4, [r1, r7, lsl #2]
  412dd4:	4094      	lsls	r4, r2
  412dd6:	f830 c00e 	ldrh.w	ip, [r0, lr]
  412dda:	ea44 040c 	orr.w	r4, r4, ip
  412dde:	f820 400e 	strh.w	r4, [r0, lr]
  412de2:	4415      	add	r5, r2

00412de4 <.LVL171>:
  412de4:	6035      	str	r5, [r6, #0]
  412de6:	e7a0      	b.n	412d2a <.LBE36>

00412de8 <.LBB43>:
                send_bits(s, dist, extra);   /* send the extra distance bits */
  412de8:	f241 65b8 	movw	r5, #5816	; 0x16b8
  412dec:	b29b      	uxth	r3, r3

00412dee <.LVL173>:
  412dee:	4093      	lsls	r3, r2
  412df0:	5b47      	ldrh	r7, [r0, r5]

00412df2 <.LVL174>:
  412df2:	433b      	orrs	r3, r7
  412df4:	5343      	strh	r3, [r0, r5]
  412df6:	4414      	add	r4, r2

00412df8 <.LVL175>:
  412df8:	6034      	str	r4, [r6, #0]
  412dfa:	e6c4      	b.n	412b86 <.LBE30>

00412dfc <.LVL176>:
  412dfc:	9900      	ldr	r1, [sp, #0]

00412dfe <.LBB44>:
    send_code(s, END_BLOCK, ltree);
  412dfe:	f8b1 4402 	ldrh.w	r4, [r1, #1026]	; 0x402

00412e02 <.LVL178>:
  412e02:	f241 63bc 	movw	r3, #5820	; 0x16bc
  412e06:	58c3      	ldr	r3, [r0, r3]
  412e08:	f1c4 0210 	rsb	r2, r4, #16
  412e0c:	4293      	cmp	r3, r2
  412e0e:	dc0e      	bgt.n	412e2e <.LBB45>
  412e10:	f241 65b8 	movw	r5, #5816	; 0x16b8
  412e14:	f8b1 2400 	ldrh.w	r2, [r1, #1024]	; 0x400
  412e18:	409a      	lsls	r2, r3
  412e1a:	5b41      	ldrh	r1, [r0, r5]
  412e1c:	430a      	orrs	r2, r1
  412e1e:	5342      	strh	r2, [r0, r5]
  412e20:	4423      	add	r3, r4
  412e22:	f241 62bc 	movw	r2, #5820	; 0x16bc
  412e26:	5083      	str	r3, [r0, r2]

00412e28 <.LBE44>:
}
  412e28:	b003      	add	sp, #12

00412e2a <.LCFI9>:
  412e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00412e2e <.LBB45>:
    send_code(s, END_BLOCK, ltree);
  412e2e:	f8b1 5400 	ldrh.w	r5, [r1, #1024]	; 0x400

00412e32 <.LVL181>:
  412e32:	f241 61b8 	movw	r1, #5816	; 0x16b8
  412e36:	fa05 f203 	lsl.w	r2, r5, r3
  412e3a:	5a43      	ldrh	r3, [r0, r1]
  412e3c:	431a      	orrs	r2, r3
  412e3e:	b212      	sxth	r2, r2
  412e40:	5242      	strh	r2, [r0, r1]
  412e42:	6886      	ldr	r6, [r0, #8]
  412e44:	6943      	ldr	r3, [r0, #20]
  412e46:	1c5f      	adds	r7, r3, #1
  412e48:	6147      	str	r7, [r0, #20]
  412e4a:	54f2      	strb	r2, [r6, r3]
  412e4c:	6886      	ldr	r6, [r0, #8]
  412e4e:	6942      	ldr	r2, [r0, #20]
  412e50:	1c53      	adds	r3, r2, #1
  412e52:	6143      	str	r3, [r0, #20]
  412e54:	5a43      	ldrh	r3, [r0, r1]
  412e56:	0a1b      	lsrs	r3, r3, #8
  412e58:	54b3      	strb	r3, [r6, r2]
  412e5a:	f241 63bc 	movw	r3, #5820	; 0x16bc
  412e5e:	58c2      	ldr	r2, [r0, r3]
  412e60:	f1c2 0610 	rsb	r6, r2, #16
  412e64:	4135      	asrs	r5, r6

00412e66 <.LVL182>:
  412e66:	5245      	strh	r5, [r0, r1]
  412e68:	3c10      	subs	r4, #16

00412e6a <.LVL183>:
  412e6a:	4414      	add	r4, r2

00412e6c <.LVL184>:
  412e6c:	50c4      	str	r4, [r0, r3]

00412e6e <.LBE45>:
  412e6e:	e7db      	b.n	412e28 <.LBE44>
  412e70:	004173d0 	.word	0x004173d0
  412e74:	0041b34c 	.word	0x0041b34c
  412e78:	0041b2d8 	.word	0x0041b2d8
  412e7c:	00414a04 	.word	0x00414a04
  412e80:	0041b0fc 	.word	0x0041b0fc
  412e84:	0041b084 	.word	0x0041b084

Disassembly of section .text.adler32%69:

00412e88 <adler32>:
/* ========================================================================= */
uLong ZEXPORT adler32(adler, buf, len)
    uLong adler;
    const Bytef *buf;
    uInt len;
{
  412e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00412e8c <.LCFI2>:
  412e8c:	b08b      	sub	sp, #44	; 0x2c

00412e8e <.LCFI3>:
  412e8e:	9107      	str	r1, [sp, #28]
  412e90:	9209      	str	r2, [sp, #36]	; 0x24
    unsigned long sum2;
    unsigned n;

    /* split Adler-32 into component sums */
    sum2 = (adler >> 16) & 0xffff;
  412e92:	0c03      	lsrs	r3, r0, #16
  412e94:	9301      	str	r3, [sp, #4]

00412e96 <.LVL22>:
    adler &= 0xffff;
  412e96:	b280      	uxth	r0, r0

00412e98 <.LVL23>:

    /* in case user likes doing a byte at a time, keep it fast */
    if (len == 1) {
  412e98:	2a01      	cmp	r2, #1
  412e9a:	d00d      	beq.n	412eb8 <.LVL25>
            sum2 -= BASE;
        return adler | (sum2 << 16);
    }

    /* initial Adler-32 value (deferred check for len == 1 speed) */
    if (buf == Z_NULL)
  412e9c:	9b07      	ldr	r3, [sp, #28]

00412e9e <.LVL24>:
  412e9e:	2b00      	cmp	r3, #0
  412ea0:	f000 8152 	beq.w	413148 <.LVL106>
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
  412ea4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  412ea6:	2a0f      	cmp	r2, #15
  412ea8:	d91b      	bls.n	412ee2 <.LVL34>
        MOD28(sum2);            /* only added so many BASE's */
        return adler | (sum2 << 16);
    }

    /* do length NMAX blocks -- requires just one modulo operation */
    while (len >= NMAX) {
  412eaa:	f241 53af 	movw	r3, #5551	; 0x15af
  412eae:	429a      	cmp	r2, r3
  412eb0:	f240 814c 	bls.w	41314c <.LVL108>
  412eb4:	4683      	mov	fp, r0
  412eb6:	e03b      	b.n	412f30 <.LVL46>

00412eb8 <.LVL25>:
        adler += buf[0];
  412eb8:	780b      	ldrb	r3, [r1, #0]

00412eba <.LVL26>:
  412eba:	4418      	add	r0, r3
        if (adler >= BASE)
  412ebc:	f64f 73f0 	movw	r3, #65520	; 0xfff0
  412ec0:	4298      	cmp	r0, r3
  412ec2:	d902      	bls.n	412eca <.LVL29>
            adler -= BASE;
  412ec4:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00

00412ec8 <.LVL28>:
  412ec8:	38f1      	subs	r0, #241	; 0xf1

00412eca <.LVL29>:
        sum2 += adler;
  412eca:	9b01      	ldr	r3, [sp, #4]
  412ecc:	4403      	add	r3, r0

00412ece <.LVL30>:
        if (sum2 >= BASE)
  412ece:	f64f 72f0 	movw	r2, #65520	; 0xfff0
  412ed2:	4293      	cmp	r3, r2
  412ed4:	d902      	bls.n	412edc <.LVL32>
            sum2 -= BASE;
  412ed6:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00

00412eda <.LVL31>:
  412eda:	3bf1      	subs	r3, #241	; 0xf1

00412edc <.LVL32>:
        return adler | (sum2 << 16);
  412edc:	ea40 4003 	orr.w	r0, r0, r3, lsl #16

00412ee0 <.LVL33>:
  412ee0:	e021      	b.n	412f26 <.LVL44>

00412ee2 <.LVL34>:
        while (len--) {
  412ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  412ee4:	b15b      	cbz	r3, 412efe <.LVL41>
  412ee6:	9c07      	ldr	r4, [sp, #28]
  412ee8:	4423      	add	r3, r4
  412eea:	461a      	mov	r2, r3

00412eec <.LVL35>:
  412eec:	9901      	ldr	r1, [sp, #4]

00412eee <.LVL36>:
  412eee:	4623      	mov	r3, r4

00412ef0 <.LVL37>:
            adler += *buf++;
  412ef0:	f813 4b01 	ldrb.w	r4, [r3], #1

00412ef4 <.LVL38>:
  412ef4:	4420      	add	r0, r4
            sum2 += adler;
  412ef6:	4401      	add	r1, r0
        while (len--) {
  412ef8:	4293      	cmp	r3, r2
  412efa:	d1f9      	bne.n	412ef0 <.LVL37>
  412efc:	9101      	str	r1, [sp, #4]

00412efe <.LVL41>:
        if (adler >= BASE)
  412efe:	f64f 73f0 	movw	r3, #65520	; 0xfff0
  412f02:	4298      	cmp	r0, r3
  412f04:	d902      	bls.n	412f0c <.LVL43>
            adler -= BASE;
  412f06:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00

00412f0a <.LVL42>:
  412f0a:	38f1      	subs	r0, #241	; 0xf1

00412f0c <.LVL43>:
        MOD28(sum2);            /* only added so many BASE's */
  412f0c:	4b95      	ldr	r3, [pc, #596]	; (413164 <.LVL110+0x4>)
  412f0e:	9901      	ldr	r1, [sp, #4]
  412f10:	460a      	mov	r2, r1
  412f12:	fba3 2302 	umull	r2, r3, r3, r2
  412f16:	0bdb      	lsrs	r3, r3, #15
  412f18:	ebc3 3203 	rsb	r2, r3, r3, lsl #12
  412f1c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  412f20:	1acb      	subs	r3, r1, r3
        return adler | (sum2 << 16);
  412f22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16

00412f26 <.LVL44>:
        MOD(sum2);
    }

    /* return recombined sums */
    return adler | (sum2 << 16);
}
  412f26:	b00b      	add	sp, #44	; 0x2c

00412f28 <.LCFI4>:
  412f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00412f2c <.LCFI5>:
        len -= NMAX;
  412f2c:	9b08      	ldr	r3, [sp, #32]
  412f2e:	9309      	str	r3, [sp, #36]	; 0x24

00412f30 <.LVL46>:
  412f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
  412f32:	f5a3 53ad 	sub.w	r3, r3, #5536	; 0x15a0
  412f36:	3b10      	subs	r3, #16
  412f38:	9308      	str	r3, [sp, #32]

00412f3a <.LVL47>:
  412f3a:	9a07      	ldr	r2, [sp, #28]
  412f3c:	f102 0410 	add.w	r4, r2, #16
  412f40:	f502 53ae 	add.w	r3, r2, #5568	; 0x15c0
  412f44:	9306      	str	r3, [sp, #24]

00412f46 <.LVL48>:
            DO16(buf);          /* 16 sums unrolled */
  412f46:	f814 3c10 	ldrb.w	r3, [r4, #-16]
  412f4a:	445b      	add	r3, fp

00412f4c <.LVL49>:
  412f4c:	f814 ac0f 	ldrb.w	sl, [r4, #-15]
  412f50:	449a      	add	sl, r3

00412f52 <.LVL50>:
  412f52:	f814 9c0e 	ldrb.w	r9, [r4, #-14]
  412f56:	44d1      	add	r9, sl

00412f58 <.LVL51>:
  412f58:	f814 2c0d 	ldrb.w	r2, [r4, #-13]
  412f5c:	444a      	add	r2, r9

00412f5e <.LVL52>:
  412f5e:	f814 8c0c 	ldrb.w	r8, [r4, #-12]
  412f62:	9202      	str	r2, [sp, #8]
  412f64:	eb08 0002 	add.w	r0, r8, r2

00412f68 <.LVL53>:
  412f68:	f814 8c0b 	ldrb.w	r8, [r4, #-11]
  412f6c:	9003      	str	r0, [sp, #12]
  412f6e:	4440      	add	r0, r8

00412f70 <.LVL54>:
  412f70:	f814 8c0a 	ldrb.w	r8, [r4, #-10]
  412f74:	9004      	str	r0, [sp, #16]
  412f76:	4480      	add	r8, r0

00412f78 <.LVL55>:
  412f78:	f814 cc09 	ldrb.w	ip, [r4, #-9]
  412f7c:	44c4      	add	ip, r8

00412f7e <.LVL56>:
  412f7e:	f814 ec08 	ldrb.w	lr, [r4, #-8]
  412f82:	44e6      	add	lr, ip

00412f84 <.LVL57>:
  412f84:	f814 7c07 	ldrb.w	r7, [r4, #-7]
  412f88:	4477      	add	r7, lr

00412f8a <.LVL58>:
  412f8a:	f814 6c06 	ldrb.w	r6, [r4, #-6]
  412f8e:	443e      	add	r6, r7

00412f90 <.LVL59>:
  412f90:	f814 5c05 	ldrb.w	r5, [r4, #-5]
  412f94:	4435      	add	r5, r6

00412f96 <.LVL60>:
  412f96:	f814 0c04 	ldrb.w	r0, [r4, #-4]
  412f9a:	4428      	add	r0, r5

00412f9c <.LVL61>:
  412f9c:	f814 1c03 	ldrb.w	r1, [r4, #-3]
  412fa0:	4401      	add	r1, r0

00412fa2 <.LVL62>:
  412fa2:	f814 2c02 	ldrb.w	r2, [r4, #-2]
  412fa6:	9105      	str	r1, [sp, #20]
  412fa8:	440a      	add	r2, r1

00412faa <.LVL63>:
  412faa:	f814 bc01 	ldrb.w	fp, [r4, #-1]
  412fae:	4493      	add	fp, r2

00412fb0 <.LVL64>:
  412fb0:	4453      	add	r3, sl
  412fb2:	444b      	add	r3, r9
  412fb4:	9902      	ldr	r1, [sp, #8]
  412fb6:	440b      	add	r3, r1
  412fb8:	9903      	ldr	r1, [sp, #12]
  412fba:	440b      	add	r3, r1
  412fbc:	9904      	ldr	r1, [sp, #16]
  412fbe:	440b      	add	r3, r1
  412fc0:	4498      	add	r8, r3
  412fc2:	44c4      	add	ip, r8
  412fc4:	44e6      	add	lr, ip
  412fc6:	4477      	add	r7, lr
  412fc8:	443e      	add	r6, r7
  412fca:	4435      	add	r5, r6
  412fcc:	4428      	add	r0, r5
  412fce:	9b05      	ldr	r3, [sp, #20]
  412fd0:	4403      	add	r3, r0
  412fd2:	441a      	add	r2, r3
  412fd4:	445a      	add	r2, fp
  412fd6:	9b01      	ldr	r3, [sp, #4]
  412fd8:	4413      	add	r3, r2
  412fda:	9301      	str	r3, [sp, #4]

00412fdc <.LVL65>:
  412fdc:	3410      	adds	r4, #16

00412fde <.LVL66>:
        } while (--n);
  412fde:	9b06      	ldr	r3, [sp, #24]

00412fe0 <.LVL67>:
  412fe0:	429c      	cmp	r4, r3
  412fe2:	d1b0      	bne.n	412f46 <.LVL48>
  412fe4:	9b07      	ldr	r3, [sp, #28]
  412fe6:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
  412fea:	3310      	adds	r3, #16
  412fec:	9307      	str	r3, [sp, #28]
        MOD(adler);
  412fee:	4b5d      	ldr	r3, [pc, #372]	; (413164 <.LVL110+0x4>)
  412ff0:	fba3 230b 	umull	r2, r3, r3, fp
  412ff4:	0bdb      	lsrs	r3, r3, #15
  412ff6:	ebc3 3203 	rsb	r2, r3, r3, lsl #12
  412ffa:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  412ffe:	ebab 0b03 	sub.w	fp, fp, r3
        MOD(sum2);
  413002:	9901      	ldr	r1, [sp, #4]
  413004:	4a57      	ldr	r2, [pc, #348]	; (413164 <.LVL110+0x4>)
  413006:	fba2 2301 	umull	r2, r3, r2, r1
  41300a:	0bdb      	lsrs	r3, r3, #15
  41300c:	ebc3 3203 	rsb	r2, r3, r3, lsl #12
  413010:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  413014:	1acb      	subs	r3, r1, r3
  413016:	9301      	str	r3, [sp, #4]

00413018 <.LVL69>:
    while (len >= NMAX) {
  413018:	9b08      	ldr	r3, [sp, #32]

0041301a <.LVL70>:
  41301a:	f241 52af 	movw	r2, #5551	; 0x15af
  41301e:	4293      	cmp	r3, r2
  413020:	d884      	bhi.n	412f2c <.LCFI5>
  413022:	4658      	mov	r0, fp
    if (len) {                  /* avoid modulos if none remaining */
  413024:	2b00      	cmp	r3, #0
  413026:	f000 808b 	beq.w	413140 <.LVL102+0x28>
        while (len >= 16) {
  41302a:	2b0f      	cmp	r3, #15
  41302c:	f240 8094 	bls.w	413158 <.LVL109>

00413030 <.LVL71>:
  413030:	9b07      	ldr	r3, [sp, #28]
  413032:	f103 0510 	add.w	r5, r3, #16
    if (len) {                  /* avoid modulos if none remaining */
  413036:	9b08      	ldr	r3, [sp, #32]
  413038:	9302      	str	r3, [sp, #8]

0041303a <.LVL72>:
            len -= 16;
  41303a:	9b02      	ldr	r3, [sp, #8]
  41303c:	3b10      	subs	r3, #16
  41303e:	9302      	str	r3, [sp, #8]

00413040 <.LVL73>:
            DO16(buf);
  413040:	f815 3c10 	ldrb.w	r3, [r5, #-16]

00413044 <.LVL74>:
  413044:	4403      	add	r3, r0

00413046 <.LVL75>:
  413046:	f815 bc0f 	ldrb.w	fp, [r5, #-15]
  41304a:	449b      	add	fp, r3

0041304c <.LVL76>:
  41304c:	f815 ac0e 	ldrb.w	sl, [r5, #-14]
  413050:	44da      	add	sl, fp

00413052 <.LVL77>:
  413052:	f815 9c0d 	ldrb.w	r9, [r5, #-13]
  413056:	44d1      	add	r9, sl

00413058 <.LVL78>:
  413058:	f815 8c0c 	ldrb.w	r8, [r5, #-12]
  41305c:	44c8      	add	r8, r9

0041305e <.LVL79>:
  41305e:	f815 cc0b 	ldrb.w	ip, [r5, #-11]
  413062:	44c4      	add	ip, r8

00413064 <.LVL80>:
  413064:	f815 ec0a 	ldrb.w	lr, [r5, #-10]
  413068:	44e6      	add	lr, ip

0041306a <.LVL81>:
  41306a:	f815 2c09 	ldrb.w	r2, [r5, #-9]
  41306e:	4472      	add	r2, lr
  413070:	4611      	mov	r1, r2

00413072 <.LVL82>:
  413072:	f815 2c08 	ldrb.w	r2, [r5, #-8]
  413076:	9103      	str	r1, [sp, #12]
  413078:	1850      	adds	r0, r2, r1

0041307a <.LVL83>:
  41307a:	f815 2c07 	ldrb.w	r2, [r5, #-7]
  41307e:	9004      	str	r0, [sp, #16]
  413080:	1814      	adds	r4, r2, r0

00413082 <.LVL84>:
  413082:	f815 7c06 	ldrb.w	r7, [r5, #-6]
  413086:	9405      	str	r4, [sp, #20]
  413088:	4427      	add	r7, r4

0041308a <.LVL85>:
  41308a:	f815 6c05 	ldrb.w	r6, [r5, #-5]
  41308e:	443e      	add	r6, r7

00413090 <.LVL86>:
  413090:	f815 4c04 	ldrb.w	r4, [r5, #-4]
  413094:	4434      	add	r4, r6

00413096 <.LVL87>:
  413096:	f815 1c03 	ldrb.w	r1, [r5, #-3]
  41309a:	4421      	add	r1, r4

0041309c <.LVL88>:
  41309c:	f815 2c02 	ldrb.w	r2, [r5, #-2]
  4130a0:	9106      	str	r1, [sp, #24]
  4130a2:	440a      	add	r2, r1

004130a4 <.LVL89>:
  4130a4:	f815 0c01 	ldrb.w	r0, [r5, #-1]
  4130a8:	4410      	add	r0, r2

004130aa <.LVL90>:
  4130aa:	445b      	add	r3, fp
  4130ac:	4453      	add	r3, sl
  4130ae:	444b      	add	r3, r9
  4130b0:	4443      	add	r3, r8
  4130b2:	4463      	add	r3, ip
  4130b4:	4473      	add	r3, lr
  4130b6:	9903      	ldr	r1, [sp, #12]
  4130b8:	468e      	mov	lr, r1
  4130ba:	440b      	add	r3, r1
  4130bc:	9904      	ldr	r1, [sp, #16]
  4130be:	440b      	add	r3, r1
  4130c0:	9905      	ldr	r1, [sp, #20]
  4130c2:	440b      	add	r3, r1
  4130c4:	443b      	add	r3, r7
  4130c6:	4433      	add	r3, r6
  4130c8:	4423      	add	r3, r4
  4130ca:	9906      	ldr	r1, [sp, #24]
  4130cc:	440b      	add	r3, r1
  4130ce:	4413      	add	r3, r2
  4130d0:	4403      	add	r3, r0
  4130d2:	9a01      	ldr	r2, [sp, #4]
  4130d4:	441a      	add	r2, r3
  4130d6:	9201      	str	r2, [sp, #4]

004130d8 <.LVL91>:
  4130d8:	3510      	adds	r5, #16

004130da <.LVL92>:
        while (len >= 16) {
  4130da:	9b02      	ldr	r3, [sp, #8]
  4130dc:	2b0f      	cmp	r3, #15
  4130de:	d8ac      	bhi.n	41303a <.LVL72>
  4130e0:	9908      	ldr	r1, [sp, #32]
  4130e2:	f1a1 0310 	sub.w	r3, r1, #16
  4130e6:	f023 020f 	bic.w	r2, r3, #15

004130ea <.LVL93>:
  4130ea:	3210      	adds	r2, #16
  4130ec:	9c07      	ldr	r4, [sp, #28]
  4130ee:	4414      	add	r4, r2
  4130f0:	9407      	str	r4, [sp, #28]
  4130f2:	f1a1 0211 	sub.w	r2, r1, #17

004130f6 <.LVL94>:
        while (len--) {
  4130f6:	f023 030f 	bic.w	r3, r3, #15
  4130fa:	1ad2      	subs	r2, r2, r3

004130fc <.LVL95>:
  4130fc:	f011 0f0f 	tst.w	r1, #15
  413100:	d00a      	beq.n	413118 <.LVL102>

00413102 <.LVL96>:
  413102:	9907      	ldr	r1, [sp, #28]
  413104:	1e4b      	subs	r3, r1, #1
  413106:	440a      	add	r2, r1

00413108 <.LVL97>:
  413108:	9901      	ldr	r1, [sp, #4]

0041310a <.LVL98>:
            adler += *buf++;
  41310a:	f813 4f01 	ldrb.w	r4, [r3, #1]!

0041310e <.LVL99>:
  41310e:	4420      	add	r0, r4
            sum2 += adler;
  413110:	4401      	add	r1, r0
        while (len--) {
  413112:	429a      	cmp	r2, r3
  413114:	d1f9      	bne.n	41310a <.LVL98>
  413116:	9101      	str	r1, [sp, #4]

00413118 <.LVL102>:
        MOD(adler);
  413118:	4b12      	ldr	r3, [pc, #72]	; (413164 <.LVL110+0x4>)
  41311a:	fba3 1200 	umull	r1, r2, r3, r0
  41311e:	0bd2      	lsrs	r2, r2, #15
  413120:	ebc2 3102 	rsb	r1, r2, r2, lsl #12
  413124:	eb02 1201 	add.w	r2, r2, r1, lsl #4
  413128:	1a80      	subs	r0, r0, r2
        MOD(sum2);
  41312a:	9901      	ldr	r1, [sp, #4]
  41312c:	460a      	mov	r2, r1
  41312e:	fba3 2302 	umull	r2, r3, r3, r2
  413132:	0bdb      	lsrs	r3, r3, #15
  413134:	ebc3 3203 	rsb	r2, r3, r3, lsl #12
  413138:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  41313c:	1acb      	subs	r3, r1, r3
  41313e:	9301      	str	r3, [sp, #4]
    return adler | (sum2 << 16);
  413140:	9b01      	ldr	r3, [sp, #4]
  413142:	ea40 4003 	orr.w	r0, r0, r3, lsl #16

00413146 <.LVL105>:
  413146:	e6ee      	b.n	412f26 <.LVL44>

00413148 <.LVL106>:
        return 1L;
  413148:	2001      	movs	r0, #1

0041314a <.LVL107>:
  41314a:	e6ec      	b.n	412f26 <.LVL44>

0041314c <.LVL108>:
    if (len) {                  /* avoid modulos if none remaining */
  41314c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41314e:	2b00      	cmp	r3, #0
  413150:	d0f6      	beq.n	413140 <.LVL102+0x28>
  413152:	9b09      	ldr	r3, [sp, #36]	; 0x24
  413154:	9308      	str	r3, [sp, #32]
  413156:	e76b      	b.n	413030 <.LVL71>

00413158 <.LVL109>:
        while (len--) {
  413158:	4a03      	ldr	r2, [pc, #12]	; (413168 <.LVL110+0x8>)
  41315a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41315c:	4413      	add	r3, r2
  41315e:	461a      	mov	r2, r3

00413160 <.LVL110>:
  413160:	e7cf      	b.n	413102 <.LVL96>
  413162:	bf00      	nop
  413164:	80078071 	.word	0x80078071
  413168:	ffffea4f 	.word	0xffffea4f

Disassembly of section .text%70:

0041316c <__udivmoddi4>:
  41316c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  413170:	468c      	mov	ip, r1
  413172:	460d      	mov	r5, r1
  413174:	4604      	mov	r4, r0
  413176:	9e08      	ldr	r6, [sp, #32]
  413178:	2b00      	cmp	r3, #0
  41317a:	d151      	bne.n	413220 <__udivmoddi4+0xb4>
  41317c:	428a      	cmp	r2, r1
  41317e:	4617      	mov	r7, r2
  413180:	d96d      	bls.n	41325e <__udivmoddi4+0xf2>
  413182:	fab2 fe82 	clz	lr, r2
  413186:	f1be 0f00 	cmp.w	lr, #0
  41318a:	d00b      	beq.n	4131a4 <__udivmoddi4+0x38>
  41318c:	f1ce 0c20 	rsb	ip, lr, #32
  413190:	fa01 f50e 	lsl.w	r5, r1, lr
  413194:	fa20 fc0c 	lsr.w	ip, r0, ip
  413198:	fa02 f70e 	lsl.w	r7, r2, lr
  41319c:	ea4c 0c05 	orr.w	ip, ip, r5
  4131a0:	fa00 f40e 	lsl.w	r4, r0, lr
  4131a4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4131a8:	0c25      	lsrs	r5, r4, #16
  4131aa:	fbbc f8fa 	udiv	r8, ip, sl
  4131ae:	fa1f f987 	uxth.w	r9, r7
  4131b2:	fb0a cc18 	mls	ip, sl, r8, ip
  4131b6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4131ba:	fb08 f309 	mul.w	r3, r8, r9
  4131be:	42ab      	cmp	r3, r5
  4131c0:	d90a      	bls.n	4131d8 <__udivmoddi4+0x6c>
  4131c2:	19ed      	adds	r5, r5, r7
  4131c4:	f108 32ff 	add.w	r2, r8, #4294967295
  4131c8:	f080 8123 	bcs.w	413412 <__udivmoddi4+0x2a6>
  4131cc:	42ab      	cmp	r3, r5
  4131ce:	f240 8120 	bls.w	413412 <__udivmoddi4+0x2a6>
  4131d2:	f1a8 0802 	sub.w	r8, r8, #2
  4131d6:	443d      	add	r5, r7
  4131d8:	1aed      	subs	r5, r5, r3
  4131da:	b2a4      	uxth	r4, r4
  4131dc:	fbb5 f0fa 	udiv	r0, r5, sl
  4131e0:	fb0a 5510 	mls	r5, sl, r0, r5
  4131e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4131e8:	fb00 f909 	mul.w	r9, r0, r9
  4131ec:	45a1      	cmp	r9, r4
  4131ee:	d909      	bls.n	413204 <__udivmoddi4+0x98>
  4131f0:	19e4      	adds	r4, r4, r7
  4131f2:	f100 33ff 	add.w	r3, r0, #4294967295
  4131f6:	f080 810a 	bcs.w	41340e <__udivmoddi4+0x2a2>
  4131fa:	45a1      	cmp	r9, r4
  4131fc:	f240 8107 	bls.w	41340e <__udivmoddi4+0x2a2>
  413200:	3802      	subs	r0, #2
  413202:	443c      	add	r4, r7
  413204:	eba4 0409 	sub.w	r4, r4, r9
  413208:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  41320c:	2100      	movs	r1, #0
  41320e:	2e00      	cmp	r6, #0
  413210:	d061      	beq.n	4132d6 <__udivmoddi4+0x16a>
  413212:	fa24 f40e 	lsr.w	r4, r4, lr
  413216:	2300      	movs	r3, #0
  413218:	6034      	str	r4, [r6, #0]
  41321a:	6073      	str	r3, [r6, #4]
  41321c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  413220:	428b      	cmp	r3, r1
  413222:	d907      	bls.n	413234 <__udivmoddi4+0xc8>
  413224:	2e00      	cmp	r6, #0
  413226:	d054      	beq.n	4132d2 <__udivmoddi4+0x166>
  413228:	2100      	movs	r1, #0
  41322a:	e886 0021 	stmia.w	r6, {r0, r5}
  41322e:	4608      	mov	r0, r1
  413230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  413234:	fab3 f183 	clz	r1, r3
  413238:	2900      	cmp	r1, #0
  41323a:	f040 808e 	bne.w	41335a <__udivmoddi4+0x1ee>
  41323e:	42ab      	cmp	r3, r5
  413240:	d302      	bcc.n	413248 <__udivmoddi4+0xdc>
  413242:	4282      	cmp	r2, r0
  413244:	f200 80fa 	bhi.w	41343c <__udivmoddi4+0x2d0>
  413248:	1a84      	subs	r4, r0, r2
  41324a:	eb65 0503 	sbc.w	r5, r5, r3
  41324e:	2001      	movs	r0, #1
  413250:	46ac      	mov	ip, r5
  413252:	2e00      	cmp	r6, #0
  413254:	d03f      	beq.n	4132d6 <__udivmoddi4+0x16a>
  413256:	e886 1010 	stmia.w	r6, {r4, ip}
  41325a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  41325e:	b912      	cbnz	r2, 413266 <__udivmoddi4+0xfa>
  413260:	2701      	movs	r7, #1
  413262:	fbb7 f7f2 	udiv	r7, r7, r2
  413266:	fab7 fe87 	clz	lr, r7
  41326a:	f1be 0f00 	cmp.w	lr, #0
  41326e:	d134      	bne.n	4132da <__udivmoddi4+0x16e>
  413270:	1beb      	subs	r3, r5, r7
  413272:	0c3a      	lsrs	r2, r7, #16
  413274:	fa1f fc87 	uxth.w	ip, r7
  413278:	2101      	movs	r1, #1
  41327a:	fbb3 f8f2 	udiv	r8, r3, r2
  41327e:	0c25      	lsrs	r5, r4, #16
  413280:	fb02 3318 	mls	r3, r2, r8, r3
  413284:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  413288:	fb0c f308 	mul.w	r3, ip, r8
  41328c:	42ab      	cmp	r3, r5
  41328e:	d907      	bls.n	4132a0 <__udivmoddi4+0x134>
  413290:	19ed      	adds	r5, r5, r7
  413292:	f108 30ff 	add.w	r0, r8, #4294967295
  413296:	d202      	bcs.n	41329e <__udivmoddi4+0x132>
  413298:	42ab      	cmp	r3, r5
  41329a:	f200 80d1 	bhi.w	413440 <__udivmoddi4+0x2d4>
  41329e:	4680      	mov	r8, r0
  4132a0:	1aed      	subs	r5, r5, r3
  4132a2:	b2a3      	uxth	r3, r4
  4132a4:	fbb5 f0f2 	udiv	r0, r5, r2
  4132a8:	fb02 5510 	mls	r5, r2, r0, r5
  4132ac:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4132b0:	fb0c fc00 	mul.w	ip, ip, r0
  4132b4:	45a4      	cmp	ip, r4
  4132b6:	d907      	bls.n	4132c8 <__udivmoddi4+0x15c>
  4132b8:	19e4      	adds	r4, r4, r7
  4132ba:	f100 33ff 	add.w	r3, r0, #4294967295
  4132be:	d202      	bcs.n	4132c6 <__udivmoddi4+0x15a>
  4132c0:	45a4      	cmp	ip, r4
  4132c2:	f200 80b8 	bhi.w	413436 <__udivmoddi4+0x2ca>
  4132c6:	4618      	mov	r0, r3
  4132c8:	eba4 040c 	sub.w	r4, r4, ip
  4132cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4132d0:	e79d      	b.n	41320e <__udivmoddi4+0xa2>
  4132d2:	4631      	mov	r1, r6
  4132d4:	4630      	mov	r0, r6
  4132d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4132da:	f1ce 0420 	rsb	r4, lr, #32
  4132de:	fa05 f30e 	lsl.w	r3, r5, lr
  4132e2:	fa07 f70e 	lsl.w	r7, r7, lr
  4132e6:	fa20 f804 	lsr.w	r8, r0, r4
  4132ea:	0c3a      	lsrs	r2, r7, #16
  4132ec:	fa25 f404 	lsr.w	r4, r5, r4
  4132f0:	ea48 0803 	orr.w	r8, r8, r3
  4132f4:	fbb4 f1f2 	udiv	r1, r4, r2
  4132f8:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4132fc:	fb02 4411 	mls	r4, r2, r1, r4
  413300:	fa1f fc87 	uxth.w	ip, r7
  413304:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  413308:	fb01 f30c 	mul.w	r3, r1, ip
  41330c:	42ab      	cmp	r3, r5
  41330e:	fa00 f40e 	lsl.w	r4, r0, lr
  413312:	d909      	bls.n	413328 <__udivmoddi4+0x1bc>
  413314:	19ed      	adds	r5, r5, r7
  413316:	f101 30ff 	add.w	r0, r1, #4294967295
  41331a:	f080 808a 	bcs.w	413432 <__udivmoddi4+0x2c6>
  41331e:	42ab      	cmp	r3, r5
  413320:	f240 8087 	bls.w	413432 <__udivmoddi4+0x2c6>
  413324:	3902      	subs	r1, #2
  413326:	443d      	add	r5, r7
  413328:	1aeb      	subs	r3, r5, r3
  41332a:	fa1f f588 	uxth.w	r5, r8
  41332e:	fbb3 f0f2 	udiv	r0, r3, r2
  413332:	fb02 3310 	mls	r3, r2, r0, r3
  413336:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  41333a:	fb00 f30c 	mul.w	r3, r0, ip
  41333e:	42ab      	cmp	r3, r5
  413340:	d907      	bls.n	413352 <__udivmoddi4+0x1e6>
  413342:	19ed      	adds	r5, r5, r7
  413344:	f100 38ff 	add.w	r8, r0, #4294967295
  413348:	d26f      	bcs.n	41342a <__udivmoddi4+0x2be>
  41334a:	42ab      	cmp	r3, r5
  41334c:	d96d      	bls.n	41342a <__udivmoddi4+0x2be>
  41334e:	3802      	subs	r0, #2
  413350:	443d      	add	r5, r7
  413352:	1aeb      	subs	r3, r5, r3
  413354:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  413358:	e78f      	b.n	41327a <__udivmoddi4+0x10e>
  41335a:	f1c1 0720 	rsb	r7, r1, #32
  41335e:	fa22 f807 	lsr.w	r8, r2, r7
  413362:	408b      	lsls	r3, r1
  413364:	fa05 f401 	lsl.w	r4, r5, r1
  413368:	ea48 0303 	orr.w	r3, r8, r3
  41336c:	fa20 fe07 	lsr.w	lr, r0, r7
  413370:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  413374:	40fd      	lsrs	r5, r7
  413376:	ea4e 0e04 	orr.w	lr, lr, r4
  41337a:	fbb5 f9fc 	udiv	r9, r5, ip
  41337e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  413382:	fb0c 5519 	mls	r5, ip, r9, r5
  413386:	fa1f f883 	uxth.w	r8, r3
  41338a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  41338e:	fb09 f408 	mul.w	r4, r9, r8
  413392:	42ac      	cmp	r4, r5
  413394:	fa02 f201 	lsl.w	r2, r2, r1
  413398:	fa00 fa01 	lsl.w	sl, r0, r1
  41339c:	d908      	bls.n	4133b0 <__udivmoddi4+0x244>
  41339e:	18ed      	adds	r5, r5, r3
  4133a0:	f109 30ff 	add.w	r0, r9, #4294967295
  4133a4:	d243      	bcs.n	41342e <__udivmoddi4+0x2c2>
  4133a6:	42ac      	cmp	r4, r5
  4133a8:	d941      	bls.n	41342e <__udivmoddi4+0x2c2>
  4133aa:	f1a9 0902 	sub.w	r9, r9, #2
  4133ae:	441d      	add	r5, r3
  4133b0:	1b2d      	subs	r5, r5, r4
  4133b2:	fa1f fe8e 	uxth.w	lr, lr
  4133b6:	fbb5 f0fc 	udiv	r0, r5, ip
  4133ba:	fb0c 5510 	mls	r5, ip, r0, r5
  4133be:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4133c2:	fb00 f808 	mul.w	r8, r0, r8
  4133c6:	45a0      	cmp	r8, r4
  4133c8:	d907      	bls.n	4133da <__udivmoddi4+0x26e>
  4133ca:	18e4      	adds	r4, r4, r3
  4133cc:	f100 35ff 	add.w	r5, r0, #4294967295
  4133d0:	d229      	bcs.n	413426 <__udivmoddi4+0x2ba>
  4133d2:	45a0      	cmp	r8, r4
  4133d4:	d927      	bls.n	413426 <__udivmoddi4+0x2ba>
  4133d6:	3802      	subs	r0, #2
  4133d8:	441c      	add	r4, r3
  4133da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4133de:	eba4 0408 	sub.w	r4, r4, r8
  4133e2:	fba0 8902 	umull	r8, r9, r0, r2
  4133e6:	454c      	cmp	r4, r9
  4133e8:	46c6      	mov	lr, r8
  4133ea:	464d      	mov	r5, r9
  4133ec:	d315      	bcc.n	41341a <__udivmoddi4+0x2ae>
  4133ee:	d012      	beq.n	413416 <__udivmoddi4+0x2aa>
  4133f0:	b156      	cbz	r6, 413408 <__udivmoddi4+0x29c>
  4133f2:	ebba 030e 	subs.w	r3, sl, lr
  4133f6:	eb64 0405 	sbc.w	r4, r4, r5
  4133fa:	fa04 f707 	lsl.w	r7, r4, r7
  4133fe:	40cb      	lsrs	r3, r1
  413400:	431f      	orrs	r7, r3
  413402:	40cc      	lsrs	r4, r1
  413404:	6037      	str	r7, [r6, #0]
  413406:	6074      	str	r4, [r6, #4]
  413408:	2100      	movs	r1, #0
  41340a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  41340e:	4618      	mov	r0, r3
  413410:	e6f8      	b.n	413204 <__udivmoddi4+0x98>
  413412:	4690      	mov	r8, r2
  413414:	e6e0      	b.n	4131d8 <__udivmoddi4+0x6c>
  413416:	45c2      	cmp	sl, r8
  413418:	d2ea      	bcs.n	4133f0 <__udivmoddi4+0x284>
  41341a:	ebb8 0e02 	subs.w	lr, r8, r2
  41341e:	eb69 0503 	sbc.w	r5, r9, r3
  413422:	3801      	subs	r0, #1
  413424:	e7e4      	b.n	4133f0 <__udivmoddi4+0x284>
  413426:	4628      	mov	r0, r5
  413428:	e7d7      	b.n	4133da <__udivmoddi4+0x26e>
  41342a:	4640      	mov	r0, r8
  41342c:	e791      	b.n	413352 <__udivmoddi4+0x1e6>
  41342e:	4681      	mov	r9, r0
  413430:	e7be      	b.n	4133b0 <__udivmoddi4+0x244>
  413432:	4601      	mov	r1, r0
  413434:	e778      	b.n	413328 <__udivmoddi4+0x1bc>
  413436:	3802      	subs	r0, #2
  413438:	443c      	add	r4, r7
  41343a:	e745      	b.n	4132c8 <__udivmoddi4+0x15c>
  41343c:	4608      	mov	r0, r1
  41343e:	e708      	b.n	413252 <__udivmoddi4+0xe6>
  413440:	f1a8 0802 	sub.w	r8, r8, #2
  413444:	443d      	add	r5, r7
  413446:	e72b      	b.n	4132a0 <__udivmoddi4+0x134>

Disassembly of section .text.deflate_fast%71:

00413448 <deflate_fast>:
{
  413448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

0041344c <.LCFI8>:
  41344c:	4604      	mov	r4, r0
  41344e:	4688      	mov	r8, r1

00413450 <.LBB21>:
            _tr_tally_lit (s, s->window[s->strstart], bflush);
  413450:	f241 65a4 	movw	r5, #5796	; 0x16a4
  413454:	4405      	add	r5, r0

00413456 <.LBB22>:
            _tr_tally_dist(s, s->strstart - s->match_start,
  413456:	4fa9      	ldr	r7, [pc, #676]	; (4136fc <.LVL206>)
  413458:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 413700 <.LVL206+0x4>
  41345c:	e07e      	b.n	41355c <.LVL182>

0041345e <.LBE22>:
            fill_window(s);
  41345e:	4620      	mov	r0, r4
  413460:	f001 fbd0 	bl	414c04 <fill_window>

00413464 <.LVL168>:
            if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {
  413464:	6f63      	ldr	r3, [r4, #116]	; 0x74
  413466:	f1b8 0f00 	cmp.w	r8, #0
  41346a:	d103      	bne.n	413474 <.LVL168+0x10>
  41346c:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
  413470:	f0c0 813e 	bcc.w	4136f0 <.LVL203+0x18>
            if (s->lookahead == 0) break; /* flush the current block */
  413474:	2b00      	cmp	r3, #0
  413476:	d176      	bne.n	413566 <.LVL183>
    s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;
  413478:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  41347a:	4611      	mov	r1, r2
  41347c:	2a02      	cmp	r2, #2
  41347e:	bf28      	it	cs
  413480:	2102      	movcs	r1, #2
  413482:	f241 63b4 	movw	r3, #5812	; 0x16b4
  413486:	50e1      	str	r1, [r4, r3]
    if (flush == Z_FINISH) {
  413488:	f1b8 0f04 	cmp.w	r8, #4
  41348c:	f000 8115 	beq.w	4136ba <.LVL201>
    if (s->last_lit)
  413490:	f504 53b5 	add.w	r3, r4, #5792	; 0x16a0
  413494:	681b      	ldr	r3, [r3, #0]
  413496:	2b00      	cmp	r3, #0
  413498:	f000 812d 	beq.w	4136f6 <.LVL203+0x1e>
        FLUSH_BLOCK(s, 0);
  41349c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  41349e:	2800      	cmp	r0, #0
  4134a0:	f2c0 8124 	blt.w	4136ec <.LVL203+0x14>
  4134a4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  4134a6:	4401      	add	r1, r0
  4134a8:	2300      	movs	r3, #0
  4134aa:	1a12      	subs	r2, r2, r0
  4134ac:	4620      	mov	r0, r4
  4134ae:	f7fb fe53 	bl	40f158 <_tr_flush_block>

004134b2 <.LVL169>:
  4134b2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  4134b4:	65e3      	str	r3, [r4, #92]	; 0x5c
  4134b6:	6820      	ldr	r0, [r4, #0]
  4134b8:	f008 ff12 	bl	41c2e0 <.LFE41>

004134bc <.LVL170>:
  4134bc:	6823      	ldr	r3, [r4, #0]
  4134be:	6918      	ldr	r0, [r3, #16]
                return need_more;
  4134c0:	3000      	adds	r0, #0
  4134c2:	bf18      	it	ne
  4134c4:	2001      	movne	r0, #1
  4134c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

004134ca <.LVL171>:
            s->match_length = longest_match (s, hash_head);
  4134ca:	4620      	mov	r0, r4
  4134cc:	f002 f84a 	bl	415564 <.LFE1>

004134d0 <.LVL172>:
  4134d0:	6620      	str	r0, [r4, #96]	; 0x60
  4134d2:	e06b      	b.n	4135ac <.LVL185>

004134d4 <.LBB23>:
            _tr_tally_dist(s, s->strstart - s->match_start,
  4134d4:	eb09 13d3 	add.w	r3, r9, r3, lsr #7

004134d8 <.LVL174>:
  4134d8:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
  4134dc:	e08f      	b.n	4135fe <.LVL193>

004134de <.LBE23>:
                s->strstart += s->match_length;
  4134de:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  4134e0:	4413      	add	r3, r2
  4134e2:	66e3      	str	r3, [r4, #108]	; 0x6c
                s->match_length = 0;
  4134e4:	2200      	movs	r2, #0
  4134e6:	6622      	str	r2, [r4, #96]	; 0x60
                s->ins_h = s->window[s->strstart];
  4134e8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  4134ea:	5cca      	ldrb	r2, [r1, r3]
  4134ec:	64a2      	str	r2, [r4, #72]	; 0x48
                UPDATE_HASH(s, s->ins_h, s->window[s->strstart+1]);
  4134ee:	440b      	add	r3, r1
  4134f0:	785b      	ldrb	r3, [r3, #1]
  4134f2:	6da1      	ldr	r1, [r4, #88]	; 0x58
  4134f4:	408a      	lsls	r2, r1
  4134f6:	4053      	eors	r3, r2
  4134f8:	6d62      	ldr	r2, [r4, #84]	; 0x54
  4134fa:	4013      	ands	r3, r2
  4134fc:	64a3      	str	r3, [r4, #72]	; 0x48
  4134fe:	e02a      	b.n	413556 <.LBE24+0xc>

00413500 <.LBB24>:
            _tr_tally_lit (s, s->window[s->strstart], bflush);
  413500:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  413502:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  413504:	5cd3      	ldrb	r3, [r2, r3]

00413506 <.LVL177>:
  413506:	f504 52b5 	add.w	r2, r4, #5792	; 0x16a0
  41350a:	6810      	ldr	r0, [r2, #0]
  41350c:	6829      	ldr	r1, [r5, #0]
  41350e:	f04f 0e00 	mov.w	lr, #0
  413512:	f821 e010 	strh.w	lr, [r1, r0, lsl #1]
  413516:	f241 6198 	movw	r1, #5784	; 0x1698
  41351a:	5860      	ldr	r0, [r4, r1]
  41351c:	6811      	ldr	r1, [r2, #0]
  41351e:	f101 0e01 	add.w	lr, r1, #1
  413522:	f8c2 e000 	str.w	lr, [r2]
  413526:	5443      	strb	r3, [r0, r1]
  413528:	eb04 0383 	add.w	r3, r4, r3, lsl #2

0041352c <.LVL178>:
  41352c:	f8b3 1094 	ldrh.w	r1, [r3, #148]	; 0x94

00413530 <.LVL179>:
  413530:	3101      	adds	r1, #1
  413532:	f8a3 1094 	strh.w	r1, [r3, #148]	; 0x94

00413536 <.LVL180>:
  413536:	f241 639c 	movw	r3, #5788	; 0x169c
  41353a:	58e3      	ldr	r3, [r4, r3]
  41353c:	f103 3eff 	add.w	lr, r3, #4294967295
  413540:	6810      	ldr	r0, [r2, #0]
  413542:	4586      	cmp	lr, r0
  413544:	bf14      	ite	ne
  413546:	2000      	movne	r0, #0
  413548:	2001      	moveq	r0, #1

0041354a <.LBE24>:
            s->lookahead--;
  41354a:	6f63      	ldr	r3, [r4, #116]	; 0x74
  41354c:	3b01      	subs	r3, #1
  41354e:	6763      	str	r3, [r4, #116]	; 0x74
            s->strstart++;
  413550:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  413552:	3301      	adds	r3, #1
  413554:	66e3      	str	r3, [r4, #108]	; 0x6c
        if (bflush) FLUSH_BLOCK(s, 0);
  413556:	2800      	cmp	r0, #0
  413558:	f040 8095 	bne.w	413686 <.LVL196+0x16>

0041355c <.LVL182>:
        if (s->lookahead < MIN_LOOKAHEAD) {
  41355c:	6f63      	ldr	r3, [r4, #116]	; 0x74
  41355e:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
  413562:	f4ff af7c 	bcc.w	41345e <.LBE22>

00413566 <.LVL183>:
        if (s->lookahead >= MIN_MATCH) {
  413566:	6f63      	ldr	r3, [r4, #116]	; 0x74
  413568:	2b02      	cmp	r3, #2
  41356a:	d91f      	bls.n	4135ac <.LVL185>
            INSERT_STRING(s, s->strstart, hash_head);
  41356c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  41356e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  413570:	4413      	add	r3, r2
  413572:	789b      	ldrb	r3, [r3, #2]
  413574:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  413576:	6da0      	ldr	r0, [r4, #88]	; 0x58
  413578:	4081      	lsls	r1, r0
  41357a:	404b      	eors	r3, r1
  41357c:	6d61      	ldr	r1, [r4, #84]	; 0x54
  41357e:	400b      	ands	r3, r1
  413580:	64a3      	str	r3, [r4, #72]	; 0x48
  413582:	6c61      	ldr	r1, [r4, #68]	; 0x44
  413584:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
  413588:	6b63      	ldr	r3, [r4, #52]	; 0x34
  41358a:	401a      	ands	r2, r3
  41358c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  41358e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

00413592 <.LVL184>:
  413592:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  413594:	6c63      	ldr	r3, [r4, #68]	; 0x44
  413596:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  413598:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
        if (hash_head != NIL && s->strstart - hash_head <= MAX_DIST(s)) {
  41359c:	b131      	cbz	r1, 4135ac <.LVL185>
  41359e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  4135a0:	1a5a      	subs	r2, r3, r1
  4135a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4135a4:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
  4135a8:	429a      	cmp	r2, r3
  4135aa:	d98e      	bls.n	4134ca <.LVL171>

004135ac <.LVL185>:
        if (s->match_length >= MIN_MATCH) {
  4135ac:	6e23      	ldr	r3, [r4, #96]	; 0x60
  4135ae:	2b02      	cmp	r3, #2
  4135b0:	d9a6      	bls.n	413500 <.LBB24>

004135b2 <.LBB25>:
            _tr_tally_dist(s, s->strstart - s->match_start,
  4135b2:	3b03      	subs	r3, #3
  4135b4:	b2da      	uxtb	r2, r3

004135b6 <.LVL186>:
  4135b6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  4135b8:	6f21      	ldr	r1, [r4, #112]	; 0x70
  4135ba:	1a5b      	subs	r3, r3, r1
  4135bc:	b29b      	uxth	r3, r3

004135be <.LVL187>:
  4135be:	f504 5eb5 	add.w	lr, r4, #5792	; 0x16a0
  4135c2:	f8de 0000 	ldr.w	r0, [lr]
  4135c6:	6829      	ldr	r1, [r5, #0]
  4135c8:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
  4135cc:	f241 6198 	movw	r1, #5784	; 0x1698
  4135d0:	5860      	ldr	r0, [r4, r1]
  4135d2:	f8de 1000 	ldr.w	r1, [lr]
  4135d6:	f101 0c01 	add.w	ip, r1, #1
  4135da:	f8ce c000 	str.w	ip, [lr]
  4135de:	5442      	strb	r2, [r0, r1]
  4135e0:	3b01      	subs	r3, #1

004135e2 <.LVL188>:
  4135e2:	b29b      	uxth	r3, r3

004135e4 <.LVL189>:
  4135e4:	5cba      	ldrb	r2, [r7, r2]

004135e6 <.LVL190>:
  4135e6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  4135ea:	f8b2 1498 	ldrh.w	r1, [r2, #1176]	; 0x498

004135ee <.LVL191>:
  4135ee:	3101      	adds	r1, #1
  4135f0:	f8a2 1498 	strh.w	r1, [r2, #1176]	; 0x498

004135f4 <.LVL192>:
  4135f4:	2bff      	cmp	r3, #255	; 0xff
  4135f6:	f63f af6d 	bhi.w	4134d4 <.LBB23>
  4135fa:	f819 3003 	ldrb.w	r3, [r9, r3]

004135fe <.LVL193>:
  4135fe:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  413602:	f8b3 2988 	ldrh.w	r2, [r3, #2440]	; 0x988
  413606:	3201      	adds	r2, #1
  413608:	f8a3 2988 	strh.w	r2, [r3, #2440]	; 0x988
  41360c:	f241 639c 	movw	r3, #5788	; 0x169c
  413610:	58e3      	ldr	r3, [r4, r3]
  413612:	f103 3eff 	add.w	lr, r3, #4294967295
  413616:	f504 53b5 	add.w	r3, r4, #5792	; 0x16a0
  41361a:	6818      	ldr	r0, [r3, #0]
  41361c:	4586      	cmp	lr, r0
  41361e:	bf14      	ite	ne
  413620:	2000      	movne	r0, #0
  413622:	2001      	moveq	r0, #1

00413624 <.LBE25>:
            s->lookahead -= s->match_length;
  413624:	6e23      	ldr	r3, [r4, #96]	; 0x60
  413626:	6f62      	ldr	r2, [r4, #116]	; 0x74
  413628:	1ad2      	subs	r2, r2, r3
  41362a:	6762      	str	r2, [r4, #116]	; 0x74
            if (s->match_length <= s->max_insert_length &&
  41362c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
  413630:	428b      	cmp	r3, r1
  413632:	f63f af54 	bhi.w	4134de <.LBE23>
  413636:	2a02      	cmp	r2, #2
  413638:	f67f af51 	bls.w	4134de <.LBE23>
                s->match_length--; /* string at strstart already in table */
  41363c:	3b01      	subs	r3, #1
  41363e:	6623      	str	r3, [r4, #96]	; 0x60
                    s->strstart++;
  413640:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  413642:	1c4a      	adds	r2, r1, #1
  413644:	66e2      	str	r2, [r4, #108]	; 0x6c
                    INSERT_STRING(s, s->strstart, hash_head);
  413646:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  413648:	440b      	add	r3, r1
  41364a:	78db      	ldrb	r3, [r3, #3]
  41364c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  41364e:	6da6      	ldr	r6, [r4, #88]	; 0x58
  413650:	40b1      	lsls	r1, r6
  413652:	404b      	eors	r3, r1
  413654:	6d61      	ldr	r1, [r4, #84]	; 0x54
  413656:	400b      	ands	r3, r1
  413658:	64a3      	str	r3, [r4, #72]	; 0x48
  41365a:	6c61      	ldr	r1, [r4, #68]	; 0x44
  41365c:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
  413660:	6b63      	ldr	r3, [r4, #52]	; 0x34
  413662:	401a      	ands	r2, r3
  413664:	6c23      	ldr	r3, [r4, #64]	; 0x40
  413666:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

0041366a <.LVL195>:
  41366a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  41366c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  41366e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c

00413670 <.LVL196>:
  413670:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
                } while (--s->match_length != 0);
  413674:	6e23      	ldr	r3, [r4, #96]	; 0x60
  413676:	3b01      	subs	r3, #1
  413678:	6623      	str	r3, [r4, #96]	; 0x60
  41367a:	2b00      	cmp	r3, #0
  41367c:	d1e0      	bne.n	413640 <.LBE25+0x1c>
                s->strstart++;
  41367e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  413680:	3301      	adds	r3, #1
  413682:	66e3      	str	r3, [r4, #108]	; 0x6c
  413684:	e767      	b.n	413556 <.LBE24+0xc>
        if (bflush) FLUSH_BLOCK(s, 0);
  413686:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  413688:	2a00      	cmp	r2, #0
  41368a:	db14      	blt.n	4136b6 <.LVL200>
  41368c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  41368e:	4411      	add	r1, r2
  413690:	6ee0      	ldr	r0, [r4, #108]	; 0x6c

00413692 <.LVL197>:
  413692:	2300      	movs	r3, #0
  413694:	1a82      	subs	r2, r0, r2
  413696:	4620      	mov	r0, r4
  413698:	f7fb fd5e 	bl	40f158 <_tr_flush_block>

0041369c <.LVL198>:
  41369c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  41369e:	65e3      	str	r3, [r4, #92]	; 0x5c
  4136a0:	6820      	ldr	r0, [r4, #0]
  4136a2:	f008 fe1d 	bl	41c2e0 <.LFE41>

004136a6 <.LVL199>:
  4136a6:	6823      	ldr	r3, [r4, #0]
  4136a8:	691b      	ldr	r3, [r3, #16]
  4136aa:	2b00      	cmp	r3, #0
  4136ac:	f47f af56 	bne.w	41355c <.LVL182>
  4136b0:	2000      	movs	r0, #0
  4136b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

004136b6 <.LVL200>:
  4136b6:	2100      	movs	r1, #0
  4136b8:	e7ea      	b.n	413690 <.LVL196+0x20>

004136ba <.LVL201>:
        FLUSH_BLOCK(s, 1);
  4136ba:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  4136bc:	2800      	cmp	r0, #0
  4136be:	db13      	blt.n	4136e8 <.LVL203+0x10>
  4136c0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  4136c2:	4401      	add	r1, r0
  4136c4:	2301      	movs	r3, #1
  4136c6:	1a12      	subs	r2, r2, r0
  4136c8:	4620      	mov	r0, r4
  4136ca:	f7fb fd45 	bl	40f158 <_tr_flush_block>

004136ce <.LVL202>:
  4136ce:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  4136d0:	65e3      	str	r3, [r4, #92]	; 0x5c
  4136d2:	6820      	ldr	r0, [r4, #0]
  4136d4:	f008 fe04 	bl	41c2e0 <.LFE41>

004136d8 <.LVL203>:
  4136d8:	6823      	ldr	r3, [r4, #0]
  4136da:	691b      	ldr	r3, [r3, #16]
        return finish_done;
  4136dc:	2b00      	cmp	r3, #0
  4136de:	bf0c      	ite	eq
  4136e0:	2002      	moveq	r0, #2
  4136e2:	2003      	movne	r0, #3
  4136e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        FLUSH_BLOCK(s, 1);
  4136e8:	2100      	movs	r1, #0
  4136ea:	e7eb      	b.n	4136c4 <.LVL201+0xa>
        FLUSH_BLOCK(s, 0);
  4136ec:	2100      	movs	r1, #0
  4136ee:	e6db      	b.n	4134a8 <.LVL168+0x44>
                return need_more;
  4136f0:	2000      	movs	r0, #0
  4136f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return block_done;
  4136f6:	2001      	movs	r0, #1
}
  4136f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

004136fc <.LVL206>:
  4136fc:	004173d0 	.word	0x004173d0
  413700:	00414a04 	.word	0x00414a04

Disassembly of section .text.crc32%72:

00413704 <crc32>:
unsigned long ZEXPORT crc32(crc, buf, len)
    unsigned long crc;
    const unsigned char FAR *buf;
    uInt len;
{
    if (buf == Z_NULL) return 0UL;
  413704:	2900      	cmp	r1, #0
  413706:	f000 814b 	beq.w	4139a0 <.LBE5>
{
  41370a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0041370e <.LCFI4>:
  41370e:	460c      	mov	r4, r1

00413710 <.LBB5>:
{
    register z_crc_t c;
    register const z_crc_t FAR *buf4;

    c = (z_crc_t)crc;
    c = ~c;
  413710:	43c0      	mvns	r0, r0

00413712 <.LVL36>:
    while (len && ((ptrdiff_t)buf & 3)) {
  413712:	2a00      	cmp	r2, #0
  413714:	f000 8146 	beq.w	4139a4 <.LBB10>
  413718:	f011 0f03 	tst.w	r1, #3
  41371c:	f000 813e 	beq.w	41399c <.LVL85>
        c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
  413720:	49a1      	ldr	r1, [pc, #644]	; (4139a8 <.LBB10+0x4>)

00413722 <.LVL37>:
  413722:	f814 3b01 	ldrb.w	r3, [r4], #1

00413726 <.LVL38>:
  413726:	4043      	eors	r3, r0
  413728:	b2db      	uxtb	r3, r3
  41372a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  41372e:	ea83 2010 	eor.w	r0, r3, r0, lsr #8

00413732 <.LVL39>:
    while (len && ((ptrdiff_t)buf & 3)) {
  413732:	3a01      	subs	r2, #1

00413734 <.LVL40>:
  413734:	f000 812f 	beq.w	413996 <.LVL83>
  413738:	f014 0f03 	tst.w	r4, #3
  41373c:	d1f1      	bne.n	413722 <.LVL37>
        c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
  41373e:	46a0      	mov	r8, r4

00413740 <.LVL41>:
        len--;
    }

    buf4 = (const z_crc_t FAR *)(const void FAR *)buf;
    while (len >= 32) {
  413740:	2a1f      	cmp	r2, #31
  413742:	f240 80ed 	bls.w	413920 <.LVL70>
  413746:	f108 0520 	add.w	r5, r8, #32
  41374a:	4616      	mov	r6, r2
        DOLIT32;
  41374c:	4b96      	ldr	r3, [pc, #600]	; (4139a8 <.LBB10+0x4>)

0041374e <.LVL42>:
  41374e:	f855 1c20 	ldr.w	r1, [r5, #-32]
  413752:	4048      	eors	r0, r1
  413754:	f3c0 4107 	ubfx	r1, r0, #16, #8
  413758:	f501 7180 	add.w	r1, r1, #256	; 0x100
  41375c:	f853 e021 	ldr.w	lr, [r3, r1, lsl #2]

00413760 <.LVL44>:
  413760:	b2c1      	uxtb	r1, r0
  413762:	f501 7140 	add.w	r1, r1, #768	; 0x300
  413766:	ea4f 6c10 	mov.w	ip, r0, lsr #24
  41376a:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
  41376e:	f853 102c 	ldr.w	r1, [r3, ip, lsl #2]
  413772:	404f      	eors	r7, r1
  413774:	f855 1c1c 	ldr.w	r1, [r5, #-28]
  413778:	404f      	eors	r7, r1
  41377a:	f3c0 2007 	ubfx	r0, r0, #8, #8

0041377e <.LVL45>:
  41377e:	f500 7000 	add.w	r0, r0, #512	; 0x200
  413782:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
  413786:	4079      	eors	r1, r7
  413788:	ea8e 0101 	eor.w	r1, lr, r1

0041378c <.LVL46>:
  41378c:	f3c1 4007 	ubfx	r0, r1, #16, #8
  413790:	f500 7080 	add.w	r0, r0, #256	; 0x100
  413794:	f853 e020 	ldr.w	lr, [r3, r0, lsl #2]

00413798 <.LVL47>:
  413798:	b2c8      	uxtb	r0, r1
  41379a:	f500 7040 	add.w	r0, r0, #768	; 0x300
  41379e:	ea4f 6c11 	mov.w	ip, r1, lsr #24
  4137a2:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
  4137a6:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
  4137aa:	4047      	eors	r7, r0
  4137ac:	f855 0c18 	ldr.w	r0, [r5, #-24]
  4137b0:	4047      	eors	r7, r0
  4137b2:	f3c1 2107 	ubfx	r1, r1, #8, #8

004137b6 <.LVL48>:
  4137b6:	f501 7100 	add.w	r1, r1, #512	; 0x200
  4137ba:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  4137be:	4078      	eors	r0, r7
  4137c0:	ea8e 0000 	eor.w	r0, lr, r0

004137c4 <.LVL49>:
  4137c4:	f3c0 4107 	ubfx	r1, r0, #16, #8
  4137c8:	f501 7180 	add.w	r1, r1, #256	; 0x100
  4137cc:	f853 e021 	ldr.w	lr, [r3, r1, lsl #2]

004137d0 <.LVL50>:
  4137d0:	b2c1      	uxtb	r1, r0
  4137d2:	f501 7140 	add.w	r1, r1, #768	; 0x300
  4137d6:	ea4f 6c10 	mov.w	ip, r0, lsr #24
  4137da:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
  4137de:	f853 102c 	ldr.w	r1, [r3, ip, lsl #2]
  4137e2:	404f      	eors	r7, r1
  4137e4:	f855 1c14 	ldr.w	r1, [r5, #-20]
  4137e8:	404f      	eors	r7, r1
  4137ea:	f3c0 2007 	ubfx	r0, r0, #8, #8

004137ee <.LVL51>:
  4137ee:	f500 7000 	add.w	r0, r0, #512	; 0x200
  4137f2:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
  4137f6:	4079      	eors	r1, r7
  4137f8:	ea8e 0101 	eor.w	r1, lr, r1

004137fc <.LVL52>:
  4137fc:	f3c1 4007 	ubfx	r0, r1, #16, #8
  413800:	f500 7080 	add.w	r0, r0, #256	; 0x100
  413804:	f853 e020 	ldr.w	lr, [r3, r0, lsl #2]

00413808 <.LVL53>:
  413808:	b2c8      	uxtb	r0, r1
  41380a:	f500 7040 	add.w	r0, r0, #768	; 0x300
  41380e:	0e0f      	lsrs	r7, r1, #24
  413810:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  413814:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
  413818:	4078      	eors	r0, r7
  41381a:	f855 7c10 	ldr.w	r7, [r5, #-16]
  41381e:	4078      	eors	r0, r7
  413820:	f3c1 2107 	ubfx	r1, r1, #8, #8

00413824 <.LVL54>:
  413824:	f501 7100 	add.w	r1, r1, #512	; 0x200
  413828:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  41382c:	4048      	eors	r0, r1
  41382e:	ea80 000e 	eor.w	r0, r0, lr

00413832 <.LVL55>:
  413832:	f3c0 4107 	ubfx	r1, r0, #16, #8
  413836:	f501 7180 	add.w	r1, r1, #256	; 0x100
  41383a:	f853 e021 	ldr.w	lr, [r3, r1, lsl #2]

0041383e <.LVL56>:
  41383e:	b2c1      	uxtb	r1, r0
  413840:	f501 7140 	add.w	r1, r1, #768	; 0x300
  413844:	0e07      	lsrs	r7, r0, #24
  413846:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  41384a:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
  41384e:	4079      	eors	r1, r7
  413850:	f855 7c0c 	ldr.w	r7, [r5, #-12]
  413854:	4079      	eors	r1, r7
  413856:	f3c0 2007 	ubfx	r0, r0, #8, #8

0041385a <.LVL57>:
  41385a:	f500 7000 	add.w	r0, r0, #512	; 0x200
  41385e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  413862:	4041      	eors	r1, r0
  413864:	ea81 010e 	eor.w	r1, r1, lr

00413868 <.LVL58>:
  413868:	f3c1 4007 	ubfx	r0, r1, #16, #8
  41386c:	f500 7080 	add.w	r0, r0, #256	; 0x100
  413870:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

00413874 <.LVL59>:
  413874:	b2cf      	uxtb	r7, r1
  413876:	f507 7740 	add.w	r7, r7, #768	; 0x300
  41387a:	ea4f 6e11 	mov.w	lr, r1, lsr #24
  41387e:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
  413882:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
  413886:	ea87 070e 	eor.w	r7, r7, lr
  41388a:	f855 4c08 	ldr.w	r4, [r5, #-8]
  41388e:	4067      	eors	r7, r4
  413890:	f3c1 2107 	ubfx	r1, r1, #8, #8

00413894 <.LVL60>:
  413894:	f501 7100 	add.w	r1, r1, #512	; 0x200
  413898:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  41389c:	4079      	eors	r1, r7
  41389e:	4048      	eors	r0, r1

004138a0 <.LVL61>:
  4138a0:	f3c0 4107 	ubfx	r1, r0, #16, #8
  4138a4:	f501 7180 	add.w	r1, r1, #256	; 0x100
  4138a8:	f853 e021 	ldr.w	lr, [r3, r1, lsl #2]

004138ac <.LVL62>:
  4138ac:	b2c1      	uxtb	r1, r0
  4138ae:	f501 7140 	add.w	r1, r1, #768	; 0x300
  4138b2:	0e07      	lsrs	r7, r0, #24
  4138b4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  4138b8:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
  4138bc:	4079      	eors	r1, r7
  4138be:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4138c2:	4079      	eors	r1, r7
  4138c4:	f3c0 2007 	ubfx	r0, r0, #8, #8

004138c8 <.LVL63>:
  4138c8:	f500 7000 	add.w	r0, r0, #512	; 0x200
  4138cc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  4138d0:	4041      	eors	r1, r0
  4138d2:	ea8e 0101 	eor.w	r1, lr, r1

004138d6 <.LVL64>:
  4138d6:	f3c1 4007 	ubfx	r0, r1, #16, #8
  4138da:	f500 7080 	add.w	r0, r0, #256	; 0x100
  4138de:	f853 e020 	ldr.w	lr, [r3, r0, lsl #2]
  4138e2:	b2cf      	uxtb	r7, r1
  4138e4:	f507 7740 	add.w	r7, r7, #768	; 0x300
  4138e8:	0e08      	lsrs	r0, r1, #24
  4138ea:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
  4138ee:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  4138f2:	4047      	eors	r7, r0
  4138f4:	f3c1 2107 	ubfx	r1, r1, #8, #8

004138f8 <.LVL65>:
  4138f8:	f501 7100 	add.w	r1, r1, #512	; 0x200
  4138fc:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  413900:	4078      	eors	r0, r7
  413902:	ea8e 0000 	eor.w	r0, lr, r0

00413906 <.LVL66>:
        len -= 32;
  413906:	3e20      	subs	r6, #32
  413908:	3520      	adds	r5, #32

0041390a <.LVL68>:
    while (len >= 32) {
  41390a:	2e1f      	cmp	r6, #31
  41390c:	f63f af1f 	bhi.w	41374e <.LVL42>
  413910:	f1a2 0320 	sub.w	r3, r2, #32
  413914:	f023 031f 	bic.w	r3, r3, #31
  413918:	3320      	adds	r3, #32
  41391a:	4498      	add	r8, r3

0041391c <.LVL69>:
  41391c:	f002 021f 	and.w	r2, r2, #31

00413920 <.LVL70>:
    }
    while (len >= 4) {
  413920:	2a03      	cmp	r2, #3
  413922:	d927      	bls.n	413974 <.LVL77>
  413924:	4616      	mov	r6, r2
  413926:	4647      	mov	r7, r8
        DOLIT4;
  413928:	4d1f      	ldr	r5, [pc, #124]	; (4139a8 <.LBB10+0x4>)

0041392a <.LVL71>:
  41392a:	f857 3b04 	ldr.w	r3, [r7], #4

0041392e <.LVL72>:
  41392e:	4043      	eors	r3, r0

00413930 <.LVL73>:
  413930:	f3c3 4107 	ubfx	r1, r3, #16, #8
  413934:	f501 7180 	add.w	r1, r1, #256	; 0x100
  413938:	f855 e021 	ldr.w	lr, [r5, r1, lsl #2]
  41393c:	b2d9      	uxtb	r1, r3
  41393e:	f501 7140 	add.w	r1, r1, #768	; 0x300
  413942:	0e18      	lsrs	r0, r3, #24
  413944:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
  413948:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
  41394c:	4041      	eors	r1, r0
  41394e:	f3c3 2307 	ubfx	r3, r3, #8, #8

00413952 <.LVL74>:
  413952:	f503 7300 	add.w	r3, r3, #512	; 0x200
  413956:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
  41395a:	4048      	eors	r0, r1
  41395c:	ea8e 0000 	eor.w	r0, lr, r0

00413960 <.LVL75>:
        len -= 4;
  413960:	3e04      	subs	r6, #4

00413962 <.LVL76>:
    while (len >= 4) {
  413962:	2e03      	cmp	r6, #3
  413964:	d8e1      	bhi.n	41392a <.LVL71>
  413966:	1f13      	subs	r3, r2, #4
  413968:	f023 0303 	bic.w	r3, r3, #3
  41396c:	3304      	adds	r3, #4
  41396e:	4498      	add	r8, r3
  413970:	f002 0203 	and.w	r2, r2, #3

00413974 <.LVL77>:
    }
    buf = (const unsigned char FAR *)buf4;

    if (len) do {
  413974:	b162      	cbz	r2, 413990 <.LVL81>
  413976:	4442      	add	r2, r8
  413978:	4644      	mov	r4, r8
        c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
  41397a:	490b      	ldr	r1, [pc, #44]	; (4139a8 <.LBB10+0x4>)

0041397c <.LVL78>:
  41397c:	f814 3b01 	ldrb.w	r3, [r4], #1

00413980 <.LVL79>:
  413980:	4043      	eors	r3, r0
  413982:	b2db      	uxtb	r3, r3
  413984:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  413988:	ea83 2010 	eor.w	r0, r3, r0, lsr #8
    } while (--len);
  41398c:	42a2      	cmp	r2, r4
  41398e:	d1f5      	bne.n	41397c <.LVL78>

00413990 <.LVL81>:
    c = ~c;
  413990:	43c0      	mvns	r0, r0

00413992 <.LVL82>:
  413992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00413996 <.LVL83>:
        c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
  413996:	46a0      	mov	r8, r4

00413998 <.LVL84>:
    while (len >= 4) {
  413998:	2200      	movs	r2, #0
  41399a:	e7eb      	b.n	413974 <.LVL77>

0041399c <.LVL85>:
    while (len && ((ptrdiff_t)buf & 3)) {
  41399c:	4688      	mov	r8, r1
  41399e:	e6cf      	b.n	413740 <.LVL41>

004139a0 <.LBE5>:
    if (buf == Z_NULL) return 0UL;
  4139a0:	2000      	movs	r0, #0

004139a2 <.LVL87>:
  4139a2:	4770      	bx	lr

004139a4 <.LBB10>:
    while (len && ((ptrdiff_t)buf & 3)) {
  4139a4:	4688      	mov	r8, r1
  4139a6:	e7f7      	b.n	413998 <.LVL84>
  4139a8:	004028e8 	.word	0x004028e8

Disassembly of section .text.wc_Sha512Final%73:

004139b0 <wc_Sha512Final>:

int wc_Sha512Final(Sha512* sha512, byte* hash)
{
    int ret;

    if (sha512 == NULL || hash == NULL) {
  4139b0:	2800      	cmp	r0, #0
  4139b2:	f000 8120 	beq.w	413bf6 <.LBE801>
{
  4139b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

004139ba <.LCFI7>:
  4139ba:	b083      	sub	sp, #12

004139bc <.LCFI8>:
  4139bc:	468e      	mov	lr, r1
  4139be:	4601      	mov	r1, r0

004139c0 <.LVL46>:
    if (sha512 == NULL || hash == NULL) {
  4139c0:	f1be 0f00 	cmp.w	lr, #0
  4139c4:	f000 8111 	beq.w	413bea <.LBE799>

004139c8 <.LBB762>:
    byte* local = (byte*)sha512->buffer;
  4139c8:	f100 0358 	add.w	r3, r0, #88	; 0x58
  4139cc:	9301      	str	r3, [sp, #4]

004139ce <.LVL48>:
    if (sha512 == NULL) {
  4139ce:	2800      	cmp	r0, #0
  4139d0:	f000 810e 	beq.w	413bf0 <.LBB801>
    AddLength(sha512, sha512->buffLen);               /* before adding pads */
  4139d4:	6800      	ldr	r0, [r0, #0]

004139d6 <.LBB764>:
    word64 tmp = sha512->loLen;
  4139d6:	e9d1 2302 	ldrd	r2, r3, [r1, #8]

004139da <.LVL50>:
    if ( (sha512->loLen += len) < tmp)
  4139da:	eb12 0a00 	adds.w	sl, r2, r0
  4139de:	f143 0b00 	adc.w	fp, r3, #0
  4139e2:	e9c1 ab02 	strd	sl, fp, [r1, #8]
  4139e6:	459b      	cmp	fp, r3
  4139e8:	bf08      	it	eq
  4139ea:	4592      	cmpeq	sl, r2
  4139ec:	d206      	bcs.n	4139fc <.LVL52+0x4>
        sha512->hiLen++;                       /* carry low to high */
  4139ee:	e9d1 2304 	ldrd	r2, r3, [r1, #16]

004139f2 <.LVL51>:
  4139f2:	3201      	adds	r2, #1
  4139f4:	f143 0300 	adc.w	r3, r3, #0

004139f8 <.LVL52>:
  4139f8:	e9c1 2304 	strd	r2, r3, [r1, #16]
  4139fc:	468a      	mov	sl, r1
  4139fe:	46f3      	mov	fp, lr

00413a00 <.LBE764>:
    local[sha512->buffLen++] = 0x80;  /* add 1 */
  413a00:	1c43      	adds	r3, r0, #1
  413a02:	600b      	str	r3, [r1, #0]
  413a04:	2380      	movs	r3, #128	; 0x80
  413a06:	9a01      	ldr	r2, [sp, #4]
  413a08:	5413      	strb	r3, [r2, r0]
    if (sha512->buffLen > SHA512_PAD_SIZE) {
  413a0a:	6808      	ldr	r0, [r1, #0]
  413a0c:	2870      	cmp	r0, #112	; 0x70
  413a0e:	d92f      	bls.n	413a70 <.LVL61>

00413a10 <.LVL54>:
        XMEMSET(&local[sha512->buffLen], 0, SHA512_BLOCK_SIZE - sha512->buffLen);
  413a10:	1a1a      	subs	r2, r3, r0
  413a12:	2100      	movs	r1, #0

00413a14 <.LVL55>:
  413a14:	9b01      	ldr	r3, [sp, #4]
  413a16:	4418      	add	r0, r3
  413a18:	f006 f9c2 	bl	419da0 <.LFE166>

00413a1c <.LVL56>:
        sha512->buffLen += SHA512_BLOCK_SIZE - sha512->buffLen;
  413a1c:	4652      	mov	r2, sl
  413a1e:	2380      	movs	r3, #128	; 0x80
  413a20:	f842 3b50 	str.w	r3, [r2], #80

00413a24 <.LVL57>:
  413a24:	f10a 0ed0 	add.w	lr, sl, #208	; 0xd0

00413a28 <.LBB766>:
        out[i] = ByteReverseWord64(in[i]);
  413a28:	6893      	ldr	r3, [r2, #8]
  413a2a:	68d1      	ldr	r1, [r2, #12]

00413a2c <.LBB768>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  413a2c:	0a18      	lsrs	r0, r3, #8
  413a2e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  413a32:	021b      	lsls	r3, r3, #8
  413a34:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  413a38:	4303      	orrs	r3, r0

00413a3a <.LBE770>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  413a3a:	ea4f 4733 	mov.w	r7, r3, ror #16
  413a3e:	2600      	movs	r6, #0

00413a40 <.LBB772>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  413a40:	0a0b      	lsrs	r3, r1, #8
  413a42:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  413a46:	0209      	lsls	r1, r1, #8
  413a48:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  413a4c:	430b      	orrs	r3, r1

00413a4e <.LBB774>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  413a4e:	ea4f 4333 	mov.w	r3, r3, ror #16

00413a52 <.LBE772>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  413a52:	ea46 0003 	orr.w	r0, r6, r3
  413a56:	4639      	mov	r1, r7

00413a58 <.LBE768>:
        out[i] = ByteReverseWord64(in[i]);
  413a58:	e9e2 0102 	strd	r0, r1, [r2, #8]!
    for (i = 0; i < count; i++)
  413a5c:	4572      	cmp	r2, lr
  413a5e:	d1e3      	bne.n	413a28 <.LBB766>

00413a60 <.LBE766>:
        ret = Transform(sha512);
  413a60:	4650      	mov	r0, sl
  413a62:	f7ec fb97 	bl	400194 <_etext>

00413a66 <.LVL60>:
        if (ret != 0)
  413a66:	4602      	mov	r2, r0
  413a68:	2800      	cmp	r0, #0
  413a6a:	d151      	bne.n	413b10 <.LBE762>
        sha512->buffLen = 0;
  413a6c:	f8ca 6000 	str.w	r6, [sl]

00413a70 <.LVL61>:
    XMEMSET(&local[sha512->buffLen], 0, SHA512_PAD_SIZE - sha512->buffLen);
  413a70:	f8da 0000 	ldr.w	r0, [sl]
  413a74:	f1c0 0270 	rsb	r2, r0, #112	; 0x70
  413a78:	2100      	movs	r1, #0
  413a7a:	9b01      	ldr	r3, [sp, #4]
  413a7c:	4418      	add	r0, r3
  413a7e:	f006 f98f 	bl	419da0 <.LFE166>

00413a82 <.LVL62>:
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
  413a82:	f8da 7008 	ldr.w	r7, [sl, #8]
  413a86:	f8da 600c 	ldr.w	r6, [sl, #12]
                                                         (sha512->hiLen << 3);
  413a8a:	f8da 2010 	ldr.w	r2, [sl, #16]
  413a8e:	f8da 3014 	ldr.w	r3, [sl, #20]
  413a92:	00d9      	lsls	r1, r3, #3
  413a94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
  413a98:	00d0      	lsls	r0, r2, #3
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
  413a9a:	0f72      	lsrs	r2, r6, #29
  413a9c:	2300      	movs	r3, #0
  413a9e:	1812      	adds	r2, r2, r0
  413aa0:	414b      	adcs	r3, r1
  413aa2:	e9ca 2304 	strd	r2, r3, [sl, #16]
    sha512->loLen = sha512->loLen << 3;
  413aa6:	00f6      	lsls	r6, r6, #3
  413aa8:	ea46 7657 	orr.w	r6, r6, r7, lsr #29
  413aac:	00ff      	lsls	r7, r7, #3
  413aae:	f8ca 7008 	str.w	r7, [sl, #8]
  413ab2:	f8ca 600c 	str.w	r6, [sl, #12]

00413ab6 <.LVL63>:
  413ab6:	f10a 0250 	add.w	r2, sl, #80	; 0x50
  413aba:	f10a 06c0 	add.w	r6, sl, #192	; 0xc0

00413abe <.LBB776>:
        out[i] = ByteReverseWord64(in[i]);
  413abe:	6893      	ldr	r3, [r2, #8]
  413ac0:	68d1      	ldr	r1, [r2, #12]

00413ac2 <.LBB778>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  413ac2:	0a18      	lsrs	r0, r3, #8
  413ac4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  413ac8:	021b      	lsls	r3, r3, #8
  413aca:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  413ace:	4303      	orrs	r3, r0

00413ad0 <.LBE780>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  413ad0:	ea4f 4533 	mov.w	r5, r3, ror #16
  413ad4:	2400      	movs	r4, #0

00413ad6 <.LBB782>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  413ad6:	0a0b      	lsrs	r3, r1, #8
  413ad8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  413adc:	0209      	lsls	r1, r1, #8
  413ade:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  413ae2:	430b      	orrs	r3, r1

00413ae4 <.LBB784>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  413ae4:	ea4f 4333 	mov.w	r3, r3, ror #16

00413ae8 <.LBE782>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  413ae8:	ea44 0003 	orr.w	r0, r4, r3
  413aec:	4629      	mov	r1, r5

00413aee <.LBE778>:
        out[i] = ByteReverseWord64(in[i]);
  413aee:	e9e2 0102 	strd	r0, r1, [r2, #8]!
    for (i = 0; i < count; i++)
  413af2:	42b2      	cmp	r2, r6
  413af4:	d1e3      	bne.n	413abe <.LBB776>

00413af6 <.LBE776>:
    sha512->buffer[SHA512_BLOCK_SIZE / sizeof(word64) - 2] = sha512->hiLen;
  413af6:	e9da 2304 	ldrd	r2, r3, [sl, #16]
  413afa:	e9ca 2332 	strd	r2, r3, [sl, #200]	; 0xc8
    sha512->buffer[SHA512_BLOCK_SIZE / sizeof(word64) - 1] = sha512->loLen;
  413afe:	e9da 2302 	ldrd	r2, r3, [sl, #8]
  413b02:	e9ca 2334 	strd	r2, r3, [sl, #208]	; 0xd0
    ret = Transform(sha512);
  413b06:	4650      	mov	r0, sl
  413b08:	f7ec fb44 	bl	400194 <_etext>

00413b0c <.LVL66>:
    if (ret != 0)
  413b0c:	4602      	mov	r2, r0
  413b0e:	b118      	cbz	r0, 413b18 <.LBB798>

00413b10 <.LBE762>:
        return ret;

    XMEMCPY(hash, sha512->digest, SHA512_DIGEST_SIZE);

    return InitSha512(sha512);  /* reset state */
}
  413b10:	4610      	mov	r0, r2
  413b12:	b003      	add	sp, #12

00413b14 <.LCFI9>:
  413b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00413b18 <.LBB798>:
        ByteReverseWords64(sha512->digest, sha512->digest, SHA512_DIGEST_SIZE);
  413b18:	f10a 0618 	add.w	r6, sl, #24

00413b1c <.LVL69>:
  413b1c:	f10a 0410 	add.w	r4, sl, #16
  413b20:	f10a 0550 	add.w	r5, sl, #80	; 0x50

00413b24 <.LBB786>:
        out[i] = ByteReverseWord64(in[i]);
  413b24:	68a3      	ldr	r3, [r4, #8]
  413b26:	68e1      	ldr	r1, [r4, #12]

00413b28 <.LBB788>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  413b28:	0a18      	lsrs	r0, r3, #8
  413b2a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  413b2e:	021b      	lsls	r3, r3, #8
  413b30:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  413b34:	4303      	orrs	r3, r0

00413b36 <.LBE790>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  413b36:	ea4f 4933 	mov.w	r9, r3, ror #16
  413b3a:	f04f 0800 	mov.w	r8, #0

00413b3e <.LBB792>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  413b3e:	0a0b      	lsrs	r3, r1, #8
  413b40:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  413b44:	0209      	lsls	r1, r1, #8
  413b46:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  413b4a:	430b      	orrs	r3, r1

00413b4c <.LBB794>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  413b4c:	ea4f 4333 	mov.w	r3, r3, ror #16

00413b50 <.LBE792>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  413b50:	ea48 0003 	orr.w	r0, r8, r3
  413b54:	4649      	mov	r1, r9

00413b56 <.LBE788>:
        out[i] = ByteReverseWord64(in[i]);
  413b56:	e9e4 0102 	strd	r0, r1, [r4, #8]!
    for (i = 0; i < count; i++)
  413b5a:	42ac      	cmp	r4, r5
  413b5c:	d1e2      	bne.n	413b24 <.LBB786>

00413b5e <.LBE786>:
    XMEMCPY(hash, sha512->digest, SHA512_DIGEST_SIZE);
  413b5e:	4633      	mov	r3, r6
  413b60:	46de      	mov	lr, fp
  413b62:	3640      	adds	r6, #64	; 0x40

00413b64 <.LVL72>:
  413b64:	681d      	ldr	r5, [r3, #0]
  413b66:	685c      	ldr	r4, [r3, #4]
  413b68:	6898      	ldr	r0, [r3, #8]
  413b6a:	68d9      	ldr	r1, [r3, #12]
  413b6c:	f8ce 5000 	str.w	r5, [lr]
  413b70:	f8ce 4004 	str.w	r4, [lr, #4]
  413b74:	f8ce 0008 	str.w	r0, [lr, #8]
  413b78:	f8ce 100c 	str.w	r1, [lr, #12]
  413b7c:	3310      	adds	r3, #16
  413b7e:	f10e 0e10 	add.w	lr, lr, #16
  413b82:	42b3      	cmp	r3, r6
  413b84:	d1ee      	bne.n	413b64 <.LVL72>

00413b86 <.LBB799>:
    sha512->digest[0] = W64LIT(0x6a09e667f3bcc908);
  413b86:	a11e      	add	r1, pc, #120	; (adr r1, 413c00 <.LVL78+0x4>)
  413b88:	e9d1 0100 	ldrd	r0, r1, [r1]
  413b8c:	e9ca 0106 	strd	r0, r1, [sl, #24]
    sha512->digest[1] = W64LIT(0xbb67ae8584caa73b);
  413b90:	a11d      	add	r1, pc, #116	; (adr r1, 413c08 <.LVL78+0xc>)
  413b92:	e9d1 0100 	ldrd	r0, r1, [r1]
  413b96:	e9ca 0108 	strd	r0, r1, [sl, #32]
    sha512->digest[2] = W64LIT(0x3c6ef372fe94f82b);
  413b9a:	a11d      	add	r1, pc, #116	; (adr r1, 413c10 <.LVL78+0x14>)
  413b9c:	e9d1 0100 	ldrd	r0, r1, [r1]
  413ba0:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
    sha512->digest[3] = W64LIT(0xa54ff53a5f1d36f1);
  413ba4:	a11c      	add	r1, pc, #112	; (adr r1, 413c18 <.LVL78+0x1c>)
  413ba6:	e9d1 0100 	ldrd	r0, r1, [r1]
  413baa:	e9ca 010c 	strd	r0, r1, [sl, #48]	; 0x30
    sha512->digest[4] = W64LIT(0x510e527fade682d1);
  413bae:	a11c      	add	r1, pc, #112	; (adr r1, 413c20 <.LVL78+0x24>)
  413bb0:	e9d1 0100 	ldrd	r0, r1, [r1]
  413bb4:	e9ca 010e 	strd	r0, r1, [sl, #56]	; 0x38
    sha512->digest[5] = W64LIT(0x9b05688c2b3e6c1f);
  413bb8:	a11b      	add	r1, pc, #108	; (adr r1, 413c28 <.LVL78+0x2c>)
  413bba:	e9d1 0100 	ldrd	r0, r1, [r1]
  413bbe:	e9ca 0110 	strd	r0, r1, [sl, #64]	; 0x40
    sha512->digest[6] = W64LIT(0x1f83d9abfb41bd6b);
  413bc2:	a11b      	add	r1, pc, #108	; (adr r1, 413c30 <.LVL78+0x34>)
  413bc4:	e9d1 0100 	ldrd	r0, r1, [r1]
  413bc8:	e9ca 0112 	strd	r0, r1, [sl, #72]	; 0x48
    sha512->digest[7] = W64LIT(0x5be0cd19137e2179);
  413bcc:	a11a      	add	r1, pc, #104	; (adr r1, 413c38 <.LVL78+0x3c>)
  413bce:	e9d1 0100 	ldrd	r0, r1, [r1]
  413bd2:	e9ca 0114 	strd	r0, r1, [sl, #80]	; 0x50
    sha512->buffLen = 0;
  413bd6:	2300      	movs	r3, #0
  413bd8:	f8ca 3000 	str.w	r3, [sl]
    sha512->loLen   = 0;
  413bdc:	2000      	movs	r0, #0
  413bde:	2100      	movs	r1, #0
  413be0:	e9ca 0102 	strd	r0, r1, [sl, #8]
    sha512->hiLen   = 0;
  413be4:	e9ca 0104 	strd	r0, r1, [sl, #16]
  413be8:	e792      	b.n	413b10 <.LBE762>

00413bea <.LBE799>:
        return BAD_FUNC_ARG;
  413bea:	f06f 02ac 	mvn.w	r2, #172	; 0xac
  413bee:	e78f      	b.n	413b10 <.LBE762>

00413bf0 <.LBB801>:
        return BAD_FUNC_ARG;
  413bf0:	f06f 02ac 	mvn.w	r2, #172	; 0xac

00413bf4 <.LVL76>:
  413bf4:	e78c      	b.n	413b10 <.LBE762>

00413bf6 <.LBE801>:
        return BAD_FUNC_ARG;
  413bf6:	f06f 02ac 	mvn.w	r2, #172	; 0xac
}
  413bfa:	4610      	mov	r0, r2

00413bfc <.LVL78>:
  413bfc:	4770      	bx	lr
  413bfe:	bf00      	nop
  413c00:	f3bcc908 	.word	0xf3bcc908
  413c04:	6a09e667 	.word	0x6a09e667
  413c08:	84caa73b 	.word	0x84caa73b
  413c0c:	bb67ae85 	.word	0xbb67ae85
  413c10:	fe94f82b 	.word	0xfe94f82b
  413c14:	3c6ef372 	.word	0x3c6ef372
  413c18:	5f1d36f1 	.word	0x5f1d36f1
  413c1c:	a54ff53a 	.word	0xa54ff53a
  413c20:	ade682d1 	.word	0xade682d1
  413c24:	510e527f 	.word	0x510e527f
  413c28:	2b3e6c1f 	.word	0x2b3e6c1f
  413c2c:	9b05688c 	.word	0x9b05688c
  413c30:	fb41bd6b 	.word	0xfb41bd6b
  413c34:	1f83d9ab 	.word	0x1f83d9ab
  413c38:	137e2179 	.word	0x137e2179
  413c3c:	5be0cd19 	.word	0x5be0cd19

Disassembly of section .text.wc_Sha384Final%74:

00413c40 <wc_Sha384Final>:

int wc_Sha384Final(Sha384* sha384, byte* hash)
{
    int ret;

    if (sha384 == NULL || hash == NULL) {
  413c40:	2800      	cmp	r0, #0
  413c42:	f000 8120 	beq.w	413e86 <.LBE922>
{
  413c46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00413c4a <.LCFI14>:
  413c4a:	b083      	sub	sp, #12

00413c4c <.LCFI15>:
  413c4c:	468e      	mov	lr, r1
  413c4e:	4601      	mov	r1, r0

00413c50 <.LVL105>:
    if (sha384 == NULL || hash == NULL) {
  413c50:	f1be 0f00 	cmp.w	lr, #0
  413c54:	f000 8111 	beq.w	413e7a <.LBE920>

00413c58 <.LBB883>:
    byte* local = (byte*)sha512->buffer;
  413c58:	f100 0358 	add.w	r3, r0, #88	; 0x58
  413c5c:	9301      	str	r3, [sp, #4]

00413c5e <.LVL107>:
    if (sha512 == NULL) {
  413c5e:	2800      	cmp	r0, #0
  413c60:	f000 810e 	beq.w	413e80 <.LBB922>
    AddLength(sha512, sha512->buffLen);               /* before adding pads */
  413c64:	6800      	ldr	r0, [r0, #0]

00413c66 <.LBB885>:
    word64 tmp = sha512->loLen;
  413c66:	e9d1 2302 	ldrd	r2, r3, [r1, #8]

00413c6a <.LVL109>:
    if ( (sha512->loLen += len) < tmp)
  413c6a:	eb12 0a00 	adds.w	sl, r2, r0
  413c6e:	f143 0b00 	adc.w	fp, r3, #0
  413c72:	e9c1 ab02 	strd	sl, fp, [r1, #8]
  413c76:	459b      	cmp	fp, r3
  413c78:	bf08      	it	eq
  413c7a:	4592      	cmpeq	sl, r2
  413c7c:	d206      	bcs.n	413c8c <.LVL111+0x4>
        sha512->hiLen++;                       /* carry low to high */
  413c7e:	e9d1 2304 	ldrd	r2, r3, [r1, #16]

00413c82 <.LVL110>:
  413c82:	3201      	adds	r2, #1
  413c84:	f143 0300 	adc.w	r3, r3, #0

00413c88 <.LVL111>:
  413c88:	e9c1 2304 	strd	r2, r3, [r1, #16]
  413c8c:	468a      	mov	sl, r1
  413c8e:	46f3      	mov	fp, lr

00413c90 <.LBE885>:
    local[sha512->buffLen++] = 0x80;  /* add 1 */
  413c90:	1c43      	adds	r3, r0, #1
  413c92:	600b      	str	r3, [r1, #0]
  413c94:	2380      	movs	r3, #128	; 0x80
  413c96:	9a01      	ldr	r2, [sp, #4]
  413c98:	5413      	strb	r3, [r2, r0]
    if (sha512->buffLen > SHA512_PAD_SIZE) {
  413c9a:	6808      	ldr	r0, [r1, #0]
  413c9c:	2870      	cmp	r0, #112	; 0x70
  413c9e:	d92f      	bls.n	413d00 <.LVL120>

00413ca0 <.LVL113>:
        XMEMSET(&local[sha512->buffLen], 0, SHA512_BLOCK_SIZE - sha512->buffLen);
  413ca0:	1a1a      	subs	r2, r3, r0
  413ca2:	2100      	movs	r1, #0

00413ca4 <.LVL114>:
  413ca4:	9b01      	ldr	r3, [sp, #4]
  413ca6:	4418      	add	r0, r3
  413ca8:	f006 f87a 	bl	419da0 <.LFE166>

00413cac <.LVL115>:
        sha512->buffLen += SHA512_BLOCK_SIZE - sha512->buffLen;
  413cac:	4652      	mov	r2, sl
  413cae:	2380      	movs	r3, #128	; 0x80
  413cb0:	f842 3b50 	str.w	r3, [r2], #80

00413cb4 <.LVL116>:
  413cb4:	f10a 0ed0 	add.w	lr, sl, #208	; 0xd0

00413cb8 <.LBB887>:
        out[i] = ByteReverseWord64(in[i]);
  413cb8:	6893      	ldr	r3, [r2, #8]
  413cba:	68d1      	ldr	r1, [r2, #12]

00413cbc <.LBB889>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  413cbc:	0a18      	lsrs	r0, r3, #8
  413cbe:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  413cc2:	021b      	lsls	r3, r3, #8
  413cc4:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  413cc8:	4303      	orrs	r3, r0

00413cca <.LBE891>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  413cca:	ea4f 4733 	mov.w	r7, r3, ror #16
  413cce:	2600      	movs	r6, #0

00413cd0 <.LBB893>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  413cd0:	0a0b      	lsrs	r3, r1, #8
  413cd2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  413cd6:	0209      	lsls	r1, r1, #8
  413cd8:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  413cdc:	430b      	orrs	r3, r1

00413cde <.LBB895>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  413cde:	ea4f 4333 	mov.w	r3, r3, ror #16

00413ce2 <.LBE893>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  413ce2:	ea46 0003 	orr.w	r0, r6, r3
  413ce6:	4639      	mov	r1, r7

00413ce8 <.LBE889>:
        out[i] = ByteReverseWord64(in[i]);
  413ce8:	e9e2 0102 	strd	r0, r1, [r2, #8]!
    for (i = 0; i < count; i++)
  413cec:	4572      	cmp	r2, lr
  413cee:	d1e3      	bne.n	413cb8 <.LBB887>

00413cf0 <.LBE887>:
        ret = Transform(sha512);
  413cf0:	4650      	mov	r0, sl
  413cf2:	f7ec fa4f 	bl	400194 <_etext>

00413cf6 <.LVL119>:
        if (ret != 0)
  413cf6:	4602      	mov	r2, r0
  413cf8:	2800      	cmp	r0, #0
  413cfa:	d151      	bne.n	413da0 <.LBE883>
        sha512->buffLen = 0;
  413cfc:	f8ca 6000 	str.w	r6, [sl]

00413d00 <.LVL120>:
    XMEMSET(&local[sha512->buffLen], 0, SHA512_PAD_SIZE - sha512->buffLen);
  413d00:	f8da 0000 	ldr.w	r0, [sl]
  413d04:	f1c0 0270 	rsb	r2, r0, #112	; 0x70
  413d08:	2100      	movs	r1, #0
  413d0a:	9b01      	ldr	r3, [sp, #4]
  413d0c:	4418      	add	r0, r3
  413d0e:	f006 f847 	bl	419da0 <.LFE166>

00413d12 <.LVL121>:
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
  413d12:	f8da 7008 	ldr.w	r7, [sl, #8]
  413d16:	f8da 600c 	ldr.w	r6, [sl, #12]
                                                         (sha512->hiLen << 3);
  413d1a:	f8da 2010 	ldr.w	r2, [sl, #16]
  413d1e:	f8da 3014 	ldr.w	r3, [sl, #20]
  413d22:	00d9      	lsls	r1, r3, #3
  413d24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
  413d28:	00d0      	lsls	r0, r2, #3
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
  413d2a:	0f72      	lsrs	r2, r6, #29
  413d2c:	2300      	movs	r3, #0
  413d2e:	1812      	adds	r2, r2, r0
  413d30:	414b      	adcs	r3, r1
  413d32:	e9ca 2304 	strd	r2, r3, [sl, #16]
    sha512->loLen = sha512->loLen << 3;
  413d36:	00f6      	lsls	r6, r6, #3
  413d38:	ea46 7657 	orr.w	r6, r6, r7, lsr #29
  413d3c:	00ff      	lsls	r7, r7, #3
  413d3e:	f8ca 7008 	str.w	r7, [sl, #8]
  413d42:	f8ca 600c 	str.w	r6, [sl, #12]

00413d46 <.LVL122>:
  413d46:	f10a 0250 	add.w	r2, sl, #80	; 0x50
  413d4a:	f10a 06c0 	add.w	r6, sl, #192	; 0xc0

00413d4e <.LBB897>:
        out[i] = ByteReverseWord64(in[i]);
  413d4e:	6893      	ldr	r3, [r2, #8]
  413d50:	68d1      	ldr	r1, [r2, #12]

00413d52 <.LBB899>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  413d52:	0a18      	lsrs	r0, r3, #8
  413d54:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  413d58:	021b      	lsls	r3, r3, #8
  413d5a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  413d5e:	4303      	orrs	r3, r0

00413d60 <.LBE901>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  413d60:	ea4f 4533 	mov.w	r5, r3, ror #16
  413d64:	2400      	movs	r4, #0

00413d66 <.LBB903>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  413d66:	0a0b      	lsrs	r3, r1, #8
  413d68:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  413d6c:	0209      	lsls	r1, r1, #8
  413d6e:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  413d72:	430b      	orrs	r3, r1

00413d74 <.LBB905>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  413d74:	ea4f 4333 	mov.w	r3, r3, ror #16

00413d78 <.LBE903>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  413d78:	ea44 0003 	orr.w	r0, r4, r3
  413d7c:	4629      	mov	r1, r5

00413d7e <.LBE899>:
        out[i] = ByteReverseWord64(in[i]);
  413d7e:	e9e2 0102 	strd	r0, r1, [r2, #8]!
    for (i = 0; i < count; i++)
  413d82:	42b2      	cmp	r2, r6
  413d84:	d1e3      	bne.n	413d4e <.LBB897>

00413d86 <.LBE897>:
    sha512->buffer[SHA512_BLOCK_SIZE / sizeof(word64) - 2] = sha512->hiLen;
  413d86:	e9da 2304 	ldrd	r2, r3, [sl, #16]
  413d8a:	e9ca 2332 	strd	r2, r3, [sl, #200]	; 0xc8
    sha512->buffer[SHA512_BLOCK_SIZE / sizeof(word64) - 1] = sha512->loLen;
  413d8e:	e9da 2302 	ldrd	r2, r3, [sl, #8]
  413d92:	e9ca 2334 	strd	r2, r3, [sl, #208]	; 0xd0
    ret = Transform(sha512);
  413d96:	4650      	mov	r0, sl
  413d98:	f7ec f9fc 	bl	400194 <_etext>

00413d9c <.LVL125>:
    if (ret != 0)
  413d9c:	4602      	mov	r2, r0
  413d9e:	b118      	cbz	r0, 413da8 <.LBB919>

00413da0 <.LBE883>:
        return ret;

    XMEMCPY(hash, sha384->digest, SHA384_DIGEST_SIZE);

    return InitSha384(sha384);  /* reset state */
}
  413da0:	4610      	mov	r0, r2
  413da2:	b003      	add	sp, #12

00413da4 <.LCFI16>:
  413da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00413da8 <.LBB919>:
        ByteReverseWords64(sha512->digest, sha512->digest, SHA512_DIGEST_SIZE);
  413da8:	f10a 0618 	add.w	r6, sl, #24

00413dac <.LVL128>:
  413dac:	f10a 0410 	add.w	r4, sl, #16
  413db0:	f10a 0550 	add.w	r5, sl, #80	; 0x50

00413db4 <.LBB907>:
        out[i] = ByteReverseWord64(in[i]);
  413db4:	68a3      	ldr	r3, [r4, #8]
  413db6:	68e1      	ldr	r1, [r4, #12]

00413db8 <.LBB909>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  413db8:	0a18      	lsrs	r0, r3, #8
  413dba:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  413dbe:	021b      	lsls	r3, r3, #8
  413dc0:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  413dc4:	4303      	orrs	r3, r0

00413dc6 <.LBE911>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  413dc6:	ea4f 4933 	mov.w	r9, r3, ror #16
  413dca:	f04f 0800 	mov.w	r8, #0

00413dce <.LBB913>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  413dce:	0a0b      	lsrs	r3, r1, #8
  413dd0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  413dd4:	0209      	lsls	r1, r1, #8
  413dd6:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  413dda:	430b      	orrs	r3, r1

00413ddc <.LBB915>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  413ddc:	ea4f 4333 	mov.w	r3, r3, ror #16

00413de0 <.LBE913>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  413de0:	ea48 0003 	orr.w	r0, r8, r3
  413de4:	4649      	mov	r1, r9

00413de6 <.LBE909>:
        out[i] = ByteReverseWord64(in[i]);
  413de6:	e9e4 0102 	strd	r0, r1, [r4, #8]!
    for (i = 0; i < count; i++)
  413dea:	42ac      	cmp	r4, r5
  413dec:	d1e2      	bne.n	413db4 <.LBB907>

00413dee <.LBE907>:
    XMEMCPY(hash, sha384->digest, SHA384_DIGEST_SIZE);
  413dee:	4633      	mov	r3, r6
  413df0:	46de      	mov	lr, fp
  413df2:	3630      	adds	r6, #48	; 0x30

00413df4 <.LVL131>:
  413df4:	681d      	ldr	r5, [r3, #0]
  413df6:	685c      	ldr	r4, [r3, #4]
  413df8:	6898      	ldr	r0, [r3, #8]
  413dfa:	68d9      	ldr	r1, [r3, #12]
  413dfc:	f8ce 5000 	str.w	r5, [lr]
  413e00:	f8ce 4004 	str.w	r4, [lr, #4]
  413e04:	f8ce 0008 	str.w	r0, [lr, #8]
  413e08:	f8ce 100c 	str.w	r1, [lr, #12]
  413e0c:	3310      	adds	r3, #16
  413e0e:	f10e 0e10 	add.w	lr, lr, #16
  413e12:	42b3      	cmp	r3, r6
  413e14:	d1ee      	bne.n	413df4 <.LVL131>

00413e16 <.LBB920>:
    sha384->digest[0] = W64LIT(0xcbbb9d5dc1059ed8);
  413e16:	a11e      	add	r1, pc, #120	; (adr r1, 413e90 <.LVL137+0x4>)
  413e18:	e9d1 0100 	ldrd	r0, r1, [r1]
  413e1c:	e9ca 0106 	strd	r0, r1, [sl, #24]
    sha384->digest[1] = W64LIT(0x629a292a367cd507);
  413e20:	a11d      	add	r1, pc, #116	; (adr r1, 413e98 <.LVL137+0xc>)
  413e22:	e9d1 0100 	ldrd	r0, r1, [r1]
  413e26:	e9ca 0108 	strd	r0, r1, [sl, #32]
    sha384->digest[2] = W64LIT(0x9159015a3070dd17);
  413e2a:	a11d      	add	r1, pc, #116	; (adr r1, 413ea0 <.LVL137+0x14>)
  413e2c:	e9d1 0100 	ldrd	r0, r1, [r1]
  413e30:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
    sha384->digest[3] = W64LIT(0x152fecd8f70e5939);
  413e34:	a11c      	add	r1, pc, #112	; (adr r1, 413ea8 <.LVL137+0x1c>)
  413e36:	e9d1 0100 	ldrd	r0, r1, [r1]
  413e3a:	e9ca 010c 	strd	r0, r1, [sl, #48]	; 0x30
    sha384->digest[4] = W64LIT(0x67332667ffc00b31);
  413e3e:	a11c      	add	r1, pc, #112	; (adr r1, 413eb0 <.LVL137+0x24>)
  413e40:	e9d1 0100 	ldrd	r0, r1, [r1]
  413e44:	e9ca 010e 	strd	r0, r1, [sl, #56]	; 0x38
    sha384->digest[5] = W64LIT(0x8eb44a8768581511);
  413e48:	a11b      	add	r1, pc, #108	; (adr r1, 413eb8 <.LVL137+0x2c>)
  413e4a:	e9d1 0100 	ldrd	r0, r1, [r1]
  413e4e:	e9ca 0110 	strd	r0, r1, [sl, #64]	; 0x40
    sha384->digest[6] = W64LIT(0xdb0c2e0d64f98fa7);
  413e52:	a11b      	add	r1, pc, #108	; (adr r1, 413ec0 <.LVL137+0x34>)
  413e54:	e9d1 0100 	ldrd	r0, r1, [r1]
  413e58:	e9ca 0112 	strd	r0, r1, [sl, #72]	; 0x48
    sha384->digest[7] = W64LIT(0x47b5481dbefa4fa4);
  413e5c:	a11a      	add	r1, pc, #104	; (adr r1, 413ec8 <.LVL137+0x3c>)
  413e5e:	e9d1 0100 	ldrd	r0, r1, [r1]
  413e62:	e9ca 0114 	strd	r0, r1, [sl, #80]	; 0x50
    sha384->buffLen = 0;
  413e66:	2300      	movs	r3, #0
  413e68:	f8ca 3000 	str.w	r3, [sl]
    sha384->loLen   = 0;
  413e6c:	2000      	movs	r0, #0
  413e6e:	2100      	movs	r1, #0
  413e70:	e9ca 0102 	strd	r0, r1, [sl, #8]
    sha384->hiLen   = 0;
  413e74:	e9ca 0104 	strd	r0, r1, [sl, #16]
  413e78:	e792      	b.n	413da0 <.LBE883>

00413e7a <.LBE920>:
        return BAD_FUNC_ARG;
  413e7a:	f06f 02ac 	mvn.w	r2, #172	; 0xac
  413e7e:	e78f      	b.n	413da0 <.LBE883>

00413e80 <.LBB922>:
        return BAD_FUNC_ARG;
  413e80:	f06f 02ac 	mvn.w	r2, #172	; 0xac

00413e84 <.LVL135>:
  413e84:	e78c      	b.n	413da0 <.LBE883>

00413e86 <.LBE922>:
        return BAD_FUNC_ARG;
  413e86:	f06f 02ac 	mvn.w	r2, #172	; 0xac
}
  413e8a:	4610      	mov	r0, r2

00413e8c <.LVL137>:
  413e8c:	4770      	bx	lr
  413e8e:	bf00      	nop
  413e90:	c1059ed8 	.word	0xc1059ed8
  413e94:	cbbb9d5d 	.word	0xcbbb9d5d
  413e98:	367cd507 	.word	0x367cd507
  413e9c:	629a292a 	.word	0x629a292a
  413ea0:	3070dd17 	.word	0x3070dd17
  413ea4:	9159015a 	.word	0x9159015a
  413ea8:	f70e5939 	.word	0xf70e5939
  413eac:	152fecd8 	.word	0x152fecd8
  413eb0:	ffc00b31 	.word	0xffc00b31
  413eb4:	67332667 	.word	0x67332667
  413eb8:	68581511 	.word	0x68581511
  413ebc:	8eb44a87 	.word	0x8eb44a87
  413ec0:	64f98fa7 	.word	0x64f98fa7
  413ec4:	db0c2e0d 	.word	0xdb0c2e0d
  413ec8:	befa4fa4 	.word	0xbefa4fa4
  413ecc:	47b5481d 	.word	0x47b5481d

Disassembly of section .rodata.K512%75:

00413ed0 <K512>:
  413ed0:	d728ae22 428a2f98 23ef65cd 71374491     ".(../.B.e.#.D7q
  413ee0:	ec4d3b2f b5c0fbcf 8189dbbc e9b5dba5     /;M.............
  413ef0:	f348b538 3956c25b b605d019 59f111f1     8.H.[.V9.......Y
  413f00:	af194f9b 923f82a4 da6d8118 ab1c5ed5     .O....?...m..^..
  413f10:	a3030242 d807aa98 45706fbe 12835b01     B........opE.[..
  413f20:	4ee4b28c 243185be d5ffb4e2 550c7dc3     ...N..1$.....}.U
  413f30:	f27b896f 72be5d74 3b1696b1 80deb1fe     o.{.t].r...;....
  413f40:	25c71235 9bdc06a7 cf692694 c19bf174     5..%.....&i.t...
  413f50:	9ef14ad2 e49b69c1 384f25e3 efbe4786     .J...i...%O8.G..
  413f60:	8b8cd5b5 0fc19dc6 77ac9c65 240ca1cc     ........e..w...$
  413f70:	592b0275 2de92c6f 6ea6e483 4a7484aa     u.+Yo,.-...n..tJ
  413f80:	bd41fbd4 5cb0a9dc 831153b5 76f988da     ..A....\.S.....v
  413f90:	ee66dfab 983e5152 2db43210 a831c66d     ..f.RQ>..2.-m.1.
  413fa0:	98fb213f b00327c8 beef0ee4 bf597fc7     ?!...'........Y.
  413fb0:	3da88fc2 c6e00bf3 930aa725 d5a79147     ...=....%...G...
  413fc0:	e003826f 06ca6351 0a0e6e70 14292967     o...Qc..pn..g)).
  413fd0:	46d22ffc 27b70a85 5c26c926 2e1b2138     ./.F...'&.&\8!..
  413fe0:	5ac42aed 4d2c6dfc 9d95b3df 53380d13     .*.Z.m,M......8S
  413ff0:	8baf63de 650a7354 3c77b2a8 766a0abb     .c..Ts.e..w<..jv
  414000:	47edaee6 81c2c92e 1482353b 92722c85     ...G....;5...,r.
  414010:	4cf10364 a2bfe8a1 bc423001 a81a664b     d..L.....0B.Kf..
  414020:	d0f89791 c24b8b70 0654be30 c76c51a3     ....p.K.0.T..Ql.
  414030:	d6ef5218 d192e819 5565a910 d6990624     .R........eU$...
  414040:	5771202a f40e3585 32bbd1b8 106aa070     * qW.5.....2p.j.
  414050:	b8d2d0c8 19a4c116 5141ab53 1e376c08     ........S.AQ.l7.
  414060:	df8eeb99 2748774c e19b48a8 34b0bcb5     ....LwH'.H.....4
  414070:	c5c95a63 391c0cb3 e3418acb 4ed8aa4a     cZ.....9..A.J..N
  414080:	7763e373 5b9cca4f d6b2b8a3 682e6ff3     s.cwO..[.....o.h
  414090:	5defb2fc 748f82ee 43172f60 78a5636f     ...]...t`/.Coc.x
  4140a0:	a1f0ab72 84c87814 1a6439ec 8cc70208     r....x...9d.....
  4140b0:	23631e28 90befffa de82bde9 a4506ceb     (.c#.........lP.
  4140c0:	b2c67915 bef9a3f7 e372532b c67178f2     .y......+Sr..xq.
  4140d0:	ea26619c ca273ece 21c0c207 d186b8c7     .a&..>'....!....
  4140e0:	cde0eb1e eada7dd6 ee6ed178 f57d4f7f     .....}..x.n..O}.
  4140f0:	72176fba 06f067aa a2c898a6 0a637dc5     .o.r.g.......}c.
  414100:	bef90dae 113f9804 131c471b 1b710b35     ......?..G..5.q.
  414110:	23047d84 28db77f5 40c72493 32caab7b     .}.#.w.(.$.@{..2
  414120:	15c9bebc 3c9ebe0a 9c100d4c 431d67c4     .......<L....g.C
  414130:	cb3e42b6 4cc5d4be fc657e2a 597f299c     .B>....L*~e..).Y
  414140:	3ad6faec 5fcb6fab 4a475817 6c44198c     ...:.o._.XGJ..Dl

Disassembly of section .text.ecc_test%76:

00414150 <ecc_test>:
{
  414150:	b530      	push	{r4, r5, lr}

00414152 <.LCFI44>:
  414152:	f5ad 5d2d 	sub.w	sp, sp, #11072	; 0x2b40

00414156 <.LCFI45>:
  414156:	b087      	sub	sp, #28

00414158 <.LCFI46>:
    appData.ecc_test_result = 12;
  414158:	220c      	movs	r2, #12
  41415a:	4b94      	ldr	r3, [pc, #592]	; (4143ac <.LCFI48+0x16>)
  41415c:	645a      	str	r2, [r3, #68]	; 0x44
    ret = CRYPT_RNG_Initialize(&rng);
  41415e:	f642 2050 	movw	r0, #10832	; 0x2a50
  414162:	4468      	add	r0, sp
  414164:	f009 fcac 	bl	41dac0 <.LFE178>

00414168 <.LVL75>:
    if (ret == 0)
  414168:	b918      	cbnz	r0, 414172 <.LVL75+0xa>
        appData.ecc_test_result--;
  41416a:	4a90      	ldr	r2, [pc, #576]	; (4143ac <.LCFI48+0x16>)
  41416c:	6c53      	ldr	r3, [r2, #68]	; 0x44
  41416e:	3b01      	subs	r3, #1
  414170:	6453      	str	r3, [r2, #68]	; 0x44
    wc_ecc_init(&userA);
  414172:	f241 1078 	movw	r0, #4472	; 0x1178

00414176 <.LVL76>:
  414176:	4468      	add	r0, sp
  414178:	f009 fd10 	bl	41db9c <.LBE3>

0041417c <.LVL77>:
    wc_ecc_init(&userB);
  41417c:	f50d 600c 	add.w	r0, sp, #2240	; 0x8c0
  414180:	f009 fd0c 	bl	41db9c <.LBE3>

00414184 <.LVL78>:
    wc_ecc_init(&pubKey);
  414184:	a802      	add	r0, sp, #8
  414186:	f009 fd09 	bl	41db9c <.LBE3>

0041418a <.LVL79>:
    ret = wc_ecc_make_key((struct RNG *)&rng, 32, &userA);
  41418a:	f241 1278 	movw	r2, #4472	; 0x1178
  41418e:	446a      	add	r2, sp
  414190:	2120      	movs	r1, #32
  414192:	f642 2050 	movw	r0, #10832	; 0x2a50
  414196:	4468      	add	r0, sp
  414198:	f009 fd64 	bl	41dc64 <wc_ecc_make_key>

0041419c <.LVL80>:
    ret = wc_ecc_make_key((struct RNG *)&rng, 32, &userB);
  41419c:	f50d 620c 	add.w	r2, sp, #2240	; 0x8c0
  4141a0:	2120      	movs	r1, #32
  4141a2:	f642 2050 	movw	r0, #10832	; 0x2a50
  4141a6:	4468      	add	r0, sp
  4141a8:	f009 fd5c 	bl	41dc64 <wc_ecc_make_key>

004141ac <.LVL81>:
    if (ret == 0)
  4141ac:	b918      	cbnz	r0, 4141b6 <.LVL81+0xa>
        appData.ecc_test_result--;
  4141ae:	4a7f      	ldr	r2, [pc, #508]	; (4143ac <.LCFI48+0x16>)
  4141b0:	6c53      	ldr	r3, [r2, #68]	; 0x44
  4141b2:	3b01      	subs	r3, #1
  4141b4:	6453      	str	r3, [r2, #68]	; 0x44
    x = sizeof(sharedA);
  4141b6:	f641 2338 	movw	r3, #6712	; 0x1a38
  4141ba:	446b      	add	r3, sp
  4141bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4141c0:	601c      	str	r4, [r3, #0]
    ret = wc_ecc_shared_secret(&userA, &userB, sharedA, &x);
  4141c2:	f242 6250 	movw	r2, #9808	; 0x2650
  4141c6:	446a      	add	r2, sp
  4141c8:	f50d 610c 	add.w	r1, sp, #2240	; 0x8c0
  4141cc:	f241 1078 	movw	r0, #4472	; 0x1178

004141d0 <.LVL82>:
  4141d0:	4468      	add	r0, sp
  4141d2:	f007 f99f 	bl	41b514 <.LBE19>

004141d6 <.LVL83>:
    y = sizeof(sharedB);
  4141d6:	4b76      	ldr	r3, [pc, #472]	; (4143b0 <.LCFI48+0x1a>)
  4141d8:	f642 3258 	movw	r2, #11096	; 0x2b58
  4141dc:	446a      	add	r2, sp
  4141de:	50d4      	str	r4, [r2, r3]
    ret = wc_ecc_shared_secret(&userB, &userA, sharedB, &y);
  4141e0:	4413      	add	r3, r2
  4141e2:	f242 2250 	movw	r2, #8784	; 0x2250
  4141e6:	446a      	add	r2, sp
  4141e8:	f241 1178 	movw	r1, #4472	; 0x1178
  4141ec:	4469      	add	r1, sp
  4141ee:	f50d 600c 	add.w	r0, sp, #2240	; 0x8c0
  4141f2:	f007 f98f 	bl	41b514 <.LBE19>

004141f6 <.LVL84>:
    if (ret == 0)
  4141f6:	b918      	cbnz	r0, 414200 <.LVL84+0xa>
        appData.ecc_test_result--;
  4141f8:	4a6c      	ldr	r2, [pc, #432]	; (4143ac <.LCFI48+0x16>)
  4141fa:	6c53      	ldr	r3, [r2, #68]	; 0x44
  4141fc:	3b01      	subs	r3, #1
  4141fe:	6453      	str	r3, [r2, #68]	; 0x44
    if (y == x)
  414200:	f641 2338 	movw	r3, #6712	; 0x1a38
  414204:	446b      	add	r3, sp
  414206:	681a      	ldr	r2, [r3, #0]
  414208:	4b69      	ldr	r3, [pc, #420]	; (4143b0 <.LCFI48+0x1a>)
  41420a:	f642 3158 	movw	r1, #11096	; 0x2b58
  41420e:	4469      	add	r1, sp
  414210:	58cb      	ldr	r3, [r1, r3]
  414212:	4293      	cmp	r3, r2
  414214:	f000 80bf 	beq.w	414396 <.LCFI48>
    if (!(memcmp(sharedA, sharedB, x)))
  414218:	f242 2150 	movw	r1, #8784	; 0x2250
  41421c:	4469      	add	r1, sp
  41421e:	f242 6050 	movw	r0, #9808	; 0x2650

00414222 <.LVL85>:
  414222:	4468      	add	r0, sp
  414224:	f007 fd70 	bl	41bd08 <memcmp>

00414228 <.LVL86>:
  414228:	b918      	cbnz	r0, 414232 <.LVL86+0xa>
        appData.ecc_test_result--;
  41422a:	4a60      	ldr	r2, [pc, #384]	; (4143ac <.LCFI48+0x16>)
  41422c:	6c53      	ldr	r3, [r2, #68]	; 0x44
  41422e:	3b01      	subs	r3, #1
  414230:	6453      	str	r3, [r2, #68]	; 0x44
    x = sizeof(exportBuf);
  414232:	f641 2238 	movw	r2, #6712	; 0x1a38
  414236:	446a      	add	r2, sp
  414238:	f44f 6380 	mov.w	r3, #1024	; 0x400
  41423c:	6013      	str	r3, [r2, #0]
    ret = wc_ecc_export_x963(&userA, exportBuf, &x);
  41423e:	f641 213c 	movw	r1, #6716	; 0x1a3c
  414242:	4469      	add	r1, sp
  414244:	f241 1078 	movw	r0, #4472	; 0x1178
  414248:	4468      	add	r0, sp
  41424a:	f003 f941 	bl	4174d0 <wc_ecc_export_x963>

0041424e <.LVL87>:
    if (ret == 0)
  41424e:	b918      	cbnz	r0, 414258 <.LVL87+0xa>
        appData.ecc_test_result--;
  414250:	4a56      	ldr	r2, [pc, #344]	; (4143ac <.LCFI48+0x16>)
  414252:	6c53      	ldr	r3, [r2, #68]	; 0x44
  414254:	3b01      	subs	r3, #1
  414256:	6453      	str	r3, [r2, #68]	; 0x44
    ret = wc_ecc_import_x963(exportBuf, x, &pubKey);
  414258:	aa02      	add	r2, sp, #8
  41425a:	f641 2338 	movw	r3, #6712	; 0x1a38
  41425e:	446b      	add	r3, sp
  414260:	6819      	ldr	r1, [r3, #0]
  414262:	f641 203c 	movw	r0, #6716	; 0x1a3c

00414266 <.LVL88>:
  414266:	4468      	add	r0, sp
  414268:	f009 fd01 	bl	41dc6e <.LFE211>

0041426c <.LVL89>:
    if (ret == 0)
  41426c:	b918      	cbnz	r0, 414276 <.LVL89+0xa>
        appData.ecc_test_result--;
  41426e:	4a4f      	ldr	r2, [pc, #316]	; (4143ac <.LCFI48+0x16>)
  414270:	6c53      	ldr	r3, [r2, #68]	; 0x44
  414272:	3b01      	subs	r3, #1
  414274:	6453      	str	r3, [r2, #68]	; 0x44
    y = sizeof(sharedB);
  414276:	4b4e      	ldr	r3, [pc, #312]	; (4143b0 <.LCFI48+0x1a>)
  414278:	f44f 6280 	mov.w	r2, #1024	; 0x400
  41427c:	f642 3158 	movw	r1, #11096	; 0x2b58
  414280:	4469      	add	r1, sp
  414282:	50ca      	str	r2, [r1, r3]
    ret = wc_ecc_shared_secret(&userB, &pubKey, sharedB, &y);
  414284:	440b      	add	r3, r1
  414286:	f242 2250 	movw	r2, #8784	; 0x2250
  41428a:	446a      	add	r2, sp
  41428c:	a902      	add	r1, sp, #8
  41428e:	f50d 600c 	add.w	r0, sp, #2240	; 0x8c0

00414292 <.LVL90>:
  414292:	f007 f93f 	bl	41b514 <.LBE19>

00414296 <.LVL91>:
    if (ret == 0)
  414296:	b918      	cbnz	r0, 4142a0 <.LVL91+0xa>
        appData.ecc_test_result--;
  414298:	4a44      	ldr	r2, [pc, #272]	; (4143ac <.LCFI48+0x16>)
  41429a:	6c53      	ldr	r3, [r2, #68]	; 0x44
  41429c:	3b01      	subs	r3, #1
  41429e:	6453      	str	r3, [r2, #68]	; 0x44
    if (!(memcmp(sharedA, sharedB, y)))
  4142a0:	4b43      	ldr	r3, [pc, #268]	; (4143b0 <.LCFI48+0x1a>)
  4142a2:	f642 3258 	movw	r2, #11096	; 0x2b58
  4142a6:	446a      	add	r2, sp
  4142a8:	58d2      	ldr	r2, [r2, r3]
  4142aa:	f242 2150 	movw	r1, #8784	; 0x2250
  4142ae:	4469      	add	r1, sp
  4142b0:	f242 6050 	movw	r0, #9808	; 0x2650

004142b4 <.LVL92>:
  4142b4:	4468      	add	r0, sp
  4142b6:	f007 fd27 	bl	41bd08 <memcmp>

004142ba <.LVL93>:
  4142ba:	b918      	cbnz	r0, 4142c4 <.LVL94>
        appData.ecc_test_result--;
  4142bc:	4a3b      	ldr	r2, [pc, #236]	; (4143ac <.LCFI48+0x16>)
  4142be:	6c53      	ldr	r3, [r2, #68]	; 0x44
  4142c0:	3b01      	subs	r3, #1
  4142c2:	6453      	str	r3, [r2, #68]	; 0x44

004142c4 <.LVL94>:
  4142c4:	f641 613c 	movw	r1, #7740	; 0x1e3c
  4142c8:	4469      	add	r1, sp
  4142ca:	f641 6050 	movw	r0, #7760	; 0x1e50
  4142ce:	4468      	add	r0, sp
{
  4142d0:	460b      	mov	r3, r1

004142d2 <.LVL95>:
        digest[i] = i;
  4142d2:	1a5a      	subs	r2, r3, r1
  4142d4:	f803 2b01 	strb.w	r2, [r3], #1
    for (i = 0; i < (int)sizeof(digest); i++)
  4142d8:	4283      	cmp	r3, r0
  4142da:	d1fa      	bne.n	4142d2 <.LVL95>
    x = sizeof(sig);
  4142dc:	f641 2438 	movw	r4, #6712	; 0x1a38
  4142e0:	446c      	add	r4, sp
  4142e2:	f44f 6380 	mov.w	r3, #1024	; 0x400

004142e6 <.LVL97>:
  4142e6:	6023      	str	r3, [r4, #0]
    ret = wc_ecc_sign_hash(digest, sizeof(digest), sig, &x, (struct RNG *)&rng, &userA);
  4142e8:	f241 1578 	movw	r5, #4472	; 0x1178
  4142ec:	446d      	add	r5, sp
  4142ee:	9501      	str	r5, [sp, #4]
  4142f0:	f642 2350 	movw	r3, #10832	; 0x2a50
  4142f4:	446b      	add	r3, sp
  4142f6:	9300      	str	r3, [sp, #0]
  4142f8:	4623      	mov	r3, r4
  4142fa:	f641 6250 	movw	r2, #7760	; 0x1e50
  4142fe:	446a      	add	r2, sp
  414300:	2114      	movs	r1, #20
  414302:	f641 603c 	movw	r0, #7740	; 0x1e3c
  414306:	4468      	add	r0, sp
  414308:	f003 fde8 	bl	417edc <L0>

0041430c <.LVL98>:
    verify = 0;
  41430c:	4b29      	ldr	r3, [pc, #164]	; (4143b4 <.LCFI48+0x1e>)
  41430e:	f642 3258 	movw	r2, #11096	; 0x2b58
  414312:	446a      	add	r2, sp
  414314:	441a      	add	r2, r3
  414316:	2100      	movs	r1, #0
  414318:	f642 3058 	movw	r0, #11096	; 0x2b58
  41431c:	4468      	add	r0, sp
  41431e:	50c1      	str	r1, [r0, r3]
    ret = wc_ecc_verify_hash(sig, x, digest, sizeof(digest), &verify, &userA);
  414320:	6821      	ldr	r1, [r4, #0]
  414322:	9501      	str	r5, [sp, #4]
  414324:	9200      	str	r2, [sp, #0]
  414326:	2314      	movs	r3, #20
  414328:	f641 623c 	movw	r2, #7740	; 0x1e3c
  41432c:	446a      	add	r2, sp
  41432e:	f641 6050 	movw	r0, #7760	; 0x1e50
  414332:	4468      	add	r0, sp
  414334:	f003 fea8 	bl	418088 <.LFE17>

00414338 <.LVL99>:
    if (ret == 0)
  414338:	b918      	cbnz	r0, 414342 <.LVL99+0xa>
        appData.ecc_test_result--;
  41433a:	4a1c      	ldr	r2, [pc, #112]	; (4143ac <.LCFI48+0x16>)
  41433c:	6c53      	ldr	r3, [r2, #68]	; 0x44
  41433e:	3b01      	subs	r3, #1
  414340:	6453      	str	r3, [r2, #68]	; 0x44
    if (verify == 1)
  414342:	4b1c      	ldr	r3, [pc, #112]	; (4143b4 <.LCFI48+0x1e>)
  414344:	f642 3258 	movw	r2, #11096	; 0x2b58
  414348:	446a      	add	r2, sp
  41434a:	58d3      	ldr	r3, [r2, r3]
  41434c:	2b01      	cmp	r3, #1
  41434e:	d027      	beq.n	4143a0 <.LCFI48+0xa>
    x = sizeof(exportBuf);
  414350:	f641 2238 	movw	r2, #6712	; 0x1a38
  414354:	446a      	add	r2, sp
  414356:	f44f 6380 	mov.w	r3, #1024	; 0x400
  41435a:	6013      	str	r3, [r2, #0]
    ret = wc_ecc_export_private_only(&userA, exportBuf, &x);
  41435c:	f641 213c 	movw	r1, #6716	; 0x1a3c
  414360:	4469      	add	r1, sp
  414362:	f241 1078 	movw	r0, #4472	; 0x1178

00414366 <.LVL100>:
  414366:	4468      	add	r0, sp
  414368:	f007 fc0e 	bl	41bb88 <.LFE187>

0041436c <.LVL101>:
    if (ret == 0)
  41436c:	b918      	cbnz	r0, 414376 <.LVL101+0xa>
        appData.ecc_test_result--;
  41436e:	4a0f      	ldr	r2, [pc, #60]	; (4143ac <.LCFI48+0x16>)
  414370:	6c53      	ldr	r3, [r2, #68]	; 0x44
  414372:	3b01      	subs	r3, #1
  414374:	6453      	str	r3, [r2, #68]	; 0x44
    wc_ecc_free(&pubKey);
  414376:	a802      	add	r0, sp, #8

00414378 <.LVL102>:
  414378:	f008 ff5e 	bl	41d238 <.LFE27>

0041437c <.LVL103>:
    wc_ecc_free(&userB);
  41437c:	f50d 600c 	add.w	r0, sp, #2240	; 0x8c0
  414380:	f008 ff5a 	bl	41d238 <.LFE27>

00414384 <.LVL104>:
    wc_ecc_free(&userA);
  414384:	f241 1078 	movw	r0, #4472	; 0x1178
  414388:	4468      	add	r0, sp
  41438a:	f008 ff55 	bl	41d238 <.LFE27>

0041438e <.LVL105>:
}
  41438e:	f50d 5d2d 	add.w	sp, sp, #11072	; 0x2b40
  414392:	b007      	add	sp, #28

00414394 <.LCFI47>:
  414394:	bd30      	pop	{r4, r5, pc}

00414396 <.LCFI48>:
        appData.ecc_test_result--;
  414396:	4905      	ldr	r1, [pc, #20]	; (4143ac <.LCFI48+0x16>)
  414398:	6c4b      	ldr	r3, [r1, #68]	; 0x44
  41439a:	3b01      	subs	r3, #1
  41439c:	644b      	str	r3, [r1, #68]	; 0x44
  41439e:	e73b      	b.n	414218 <.LVL84+0x22>
        appData.ecc_test_result--;
  4143a0:	4a02      	ldr	r2, [pc, #8]	; (4143ac <.LCFI48+0x16>)
  4143a2:	6c53      	ldr	r3, [r2, #68]	; 0x44
  4143a4:	3b01      	subs	r3, #1
  4143a6:	6453      	str	r3, [r2, #68]	; 0x44
  4143a8:	e7d2      	b.n	414350 <.LVL99+0x18>
  4143aa:	bf00      	nop
  4143ac:	2040d534 	.word	0x2040d534
  4143b0:	ffffeedc 	.word	0xffffeedc
  4143b4:	ffffeed8 	.word	0xffffeed8

Disassembly of section .text.wc_HmacSetKey%77:

004143b8 <wc_HmacSetKey>:
    return ret;
}


int wc_HmacSetKey(Hmac* hmac, int type, const byte* key, word32 length)
{
  4143b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

004143bc <.LCFI1>:
    byte*  op;
    word32 i, hmac_block_size = 0;
    int    ret = 0;
    void*  heap = NULL;

    if (hmac == NULL || (key == NULL && length != 0) ||
  4143bc:	2800      	cmp	r0, #0
  4143be:	f000 80ef 	beq.w	4145a0 <.LVL103>
  4143c2:	4616      	mov	r6, r2
  4143c4:	461f      	mov	r7, r3
  4143c6:	4604      	mov	r4, r0
  4143c8:	b912      	cbnz	r2, 4143d0 <.LCFI1+0x14>
  4143ca:	2b00      	cmp	r3, #0
  4143cc:	f040 80eb 	bne.w	4145a6 <.LVL103+0x6>
        !(type == MD5 || type == SHA    || type == SHA256 || type == SHA384
  4143d0:	2908      	cmp	r1, #8
  4143d2:	f200 80eb 	bhi.w	4145ac <.LVL103+0xc>
  4143d6:	f240 13b7 	movw	r3, #439	; 0x1b7

004143da <.LVL31>:
  4143da:	40cb      	lsrs	r3, r1
    if (hmac == NULL || (key == NULL && length != 0) ||
  4143dc:	f013 0f01 	tst.w	r3, #1
  4143e0:	f000 80e9 	beq.w	4145b6 <.LVL105>
                      || type == SHA512 || type == BLAKE2B_ID
                      || type == SHA224)) {
        return BAD_FUNC_ARG;
    }

    hmac->innerHashKeyed = 0;
  4143e4:	2300      	movs	r3, #0
  4143e6:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
    hmac->macType = (byte)type;
  4143ea:	f884 1244 	strb.w	r1, [r4, #580]	; 0x244

004143ee <.LBB4>:
    switch (type) {
  4143ee:	2905      	cmp	r1, #5
  4143f0:	f200 80e7 	bhi.w	4145c2 <.LBB9>
  4143f4:	e8df f001 	tbb	[pc, r1]
  4143f8:	e51e1903 	.word	0xe51e1903
  4143fc:	2328      	.short	0x2328
            ret = wc_InitMd5(&hmac->hash.md5);
  4143fe:	4620      	mov	r0, r4

00414400 <.LVL33>:
  414400:	f009 faa1 	bl	41d946 <.LFE181>

00414404 <.LVL34>:
  414404:	4605      	mov	r5, r0

00414406 <.LVL35>:
    hmac->heap = heap;
  414406:	2300      	movs	r3, #0
  414408:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240

0041440c <.LBE4>:
    #endif /* HAVE_CAVIUM */
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    ret = _InitHmac(hmac, type, heap);
    if (ret != 0)
  41440c:	2d00      	cmp	r5, #0
  41440e:	f040 80cf 	bne.w	4145b0 <.LVL104>
#ifdef HAVE_FIPS
    if (length < HMAC_FIPS_MIN_KEY)
        return HMAC_MIN_KEYLEN_E;
#endif

    ip = (byte*)hmac->ipad;
  414412:	f504 7880 	add.w	r8, r4, #256	; 0x100

00414416 <.LVL37>:
    op = (byte*)hmac->opad;

    switch (hmac->macType) {
  414416:	f894 3244 	ldrb.w	r3, [r4, #580]	; 0x244
  41441a:	2b05      	cmp	r3, #5
  41441c:	f200 80ce 	bhi.w	4145bc <.LVL106>
  414420:	e8df f003 	tbb	[pc, r3]
  414424:	cc6d5017 	.word	0xcc6d5017
  414428:	89a4      	.short	0x89a4

0041442a <.LBB8>:
            ret = wc_InitSha(&hmac->hash.sha);
  41442a:	4620      	mov	r0, r4

0041442c <.LVL39>:
  41442c:	f007 fc0c 	bl	41bc48 <.LFE19>

00414430 <.LVL40>:
  414430:	4605      	mov	r5, r0

00414432 <.LVL41>:
  414432:	e7e8      	b.n	414406 <.LVL35>

00414434 <.LVL42>:
            ret = wc_InitSha256(&hmac->hash.sha256);
  414434:	4620      	mov	r0, r4

00414436 <.LVL43>:
  414436:	f005 fd4d 	bl	419ed4 <.LFE29>

0041443a <.LVL44>:
  41443a:	4605      	mov	r5, r0

0041443c <.LVL45>:
  41443c:	e7e3      	b.n	414406 <.LVL35>

0041443e <.LVL46>:
            ret = wc_InitSha384(&hmac->hash.sha384);
  41443e:	4620      	mov	r0, r4

00414440 <.LVL47>:
  414440:	f009 fbba 	bl	41dbb8 <.LFE22>

00414444 <.LVL48>:
  414444:	4605      	mov	r5, r0

00414446 <.LVL49>:
  414446:	e7de      	b.n	414406 <.LVL35>

00414448 <.LVL50>:
            ret = wc_InitSha512(&hmac->hash.sha512);
  414448:	4620      	mov	r0, r4

0041444a <.LVL51>:
  41444a:	f009 fbae 	bl	41dbaa <.LFE215>

0041444e <.LVL52>:
  41444e:	4605      	mov	r5, r0

00414450 <.LVL53>:
  414450:	e7d9      	b.n	414406 <.LVL35>

00414452 <.LBE8>:
    #ifndef NO_MD5
        case MD5:
            hmac_block_size = MD5_BLOCK_SIZE;
            if (length <= MD5_BLOCK_SIZE) {
  414452:	2f40      	cmp	r7, #64	; 0x40
  414454:	d81c      	bhi.n	414490 <.LVL60>
                if (key != NULL) {
  414456:	2e00      	cmp	r6, #0
  414458:	f000 80c3 	beq.w	4145e2 <.LVL112>
                    XMEMCPY(ip, key, length);
  41445c:	463a      	mov	r2, r7
  41445e:	4631      	mov	r1, r6
  414460:	4640      	mov	r0, r8
  414462:	f001 ffdb 	bl	41641c <memcpy>

00414466 <.LVL55>:
            hmac_block_size = MD5_BLOCK_SIZE;
  414466:	2640      	movs	r6, #64	; 0x40

00414468 <.LVL56>:
    #endif
    }
#endif

    if (ret == 0) {
        if (length < hmac_block_size)
  414468:	42b7      	cmp	r7, r6
  41446a:	d322      	bcc.n	4144b2 <.LVL65>

0041446c <.LVL57>:
  41446c:	4643      	mov	r3, r8
  41446e:	f204 107f 	addw	r0, r4, #383	; 0x17f
  414472:	eb08 0106 	add.w	r1, r8, r6

00414476 <.LVL58>:
            XMEMSET(ip + length, 0, hmac_block_size - length);

        for(i = 0; i < hmac_block_size; i++) {
            op[i] = ip[i] ^ OPAD;
  414476:	781a      	ldrb	r2, [r3, #0]
  414478:	f082 025c 	eor.w	r2, r2, #92	; 0x5c
  41447c:	f800 2f01 	strb.w	r2, [r0, #1]!
            ip[i] ^= IPAD;
  414480:	781a      	ldrb	r2, [r3, #0]
  414482:	f082 0236 	eor.w	r2, r2, #54	; 0x36
  414486:	f803 2b01 	strb.w	r2, [r3], #1
        for(i = 0; i < hmac_block_size; i++) {
  41448a:	428b      	cmp	r3, r1
  41448c:	d1f3      	bne.n	414476 <.LVL58>
  41448e:	e08f      	b.n	4145b0 <.LVL104>

00414490 <.LVL60>:
                ret = wc_Md5Update(&hmac->hash.md5, key, length);
  414490:	463a      	mov	r2, r7
  414492:	4631      	mov	r1, r6
  414494:	4620      	mov	r0, r4
  414496:	f005 ffeb 	bl	41a470 <.LFE23>

0041449a <.LVL61>:
                if (ret != 0)
  41449a:	b108      	cbz	r0, 4144a0 <.LVL61+0x6>
                ret = wc_Md5Update(&hmac->hash.md5, key, length);
  41449c:	4605      	mov	r5, r0
  41449e:	e087      	b.n	4145b0 <.LVL104>
                ret = wc_Md5Final(&hmac->hash.md5, ip);
  4144a0:	4641      	mov	r1, r8
  4144a2:	4620      	mov	r0, r4

004144a4 <.LVL62>:
  4144a4:	f004 faae 	bl	418a04 <.LFE177>

004144a8 <.LVL63>:
                if (ret != 0)
  4144a8:	2800      	cmp	r0, #0
  4144aa:	f040 8090 	bne.w	4145ce <.LBE9>
            hmac_block_size = MD5_BLOCK_SIZE;
  4144ae:	2640      	movs	r6, #64	; 0x40

004144b0 <.LVL64>:
                length = MD5_DIGEST_SIZE;
  4144b0:	2710      	movs	r7, #16

004144b2 <.LVL65>:
            XMEMSET(ip + length, 0, hmac_block_size - length);
  4144b2:	1bf2      	subs	r2, r6, r7
  4144b4:	2100      	movs	r1, #0
  4144b6:	eb08 0007 	add.w	r0, r8, r7
  4144ba:	f005 fc71 	bl	419da0 <.LFE166>

004144be <.LVL66>:
        for(i = 0; i < hmac_block_size; i++) {
  4144be:	2e00      	cmp	r6, #0
  4144c0:	d076      	beq.n	4145b0 <.LVL104>
  4144c2:	e7d3      	b.n	41446c <.LVL57>

004144c4 <.LVL67>:
            if (length <= SHA_BLOCK_SIZE) {
  4144c4:	2f40      	cmp	r7, #64	; 0x40
  4144c6:	d809      	bhi.n	4144dc <.LVL70>
                if (key != NULL) {
  4144c8:	2e00      	cmp	r6, #0
  4144ca:	f000 808c 	beq.w	4145e6 <.LVL114>
                    XMEMCPY(ip, key, length);
  4144ce:	463a      	mov	r2, r7
  4144d0:	4631      	mov	r1, r6
  4144d2:	4640      	mov	r0, r8
  4144d4:	f001 ffa2 	bl	41641c <memcpy>

004144d8 <.LVL68>:
            hmac_block_size = SHA_BLOCK_SIZE;
  4144d8:	2640      	movs	r6, #64	; 0x40

004144da <.LVL69>:
  4144da:	e7c5      	b.n	414468 <.LVL56>

004144dc <.LVL70>:
                ret = wc_ShaUpdate(&hmac->hash.sha, key, length);
  4144dc:	463a      	mov	r2, r7
  4144de:	4631      	mov	r1, r6
  4144e0:	4620      	mov	r0, r4
  4144e2:	f006 f9dc 	bl	41a89e <.LFE58>

004144e6 <.LVL71>:
                if (ret != 0)
  4144e6:	b108      	cbz	r0, 4144ec <.LVL71+0x6>
                ret = wc_ShaUpdate(&hmac->hash.sha, key, length);
  4144e8:	4605      	mov	r5, r0
  4144ea:	e061      	b.n	4145b0 <.LVL104>
                ret = wc_ShaFinal(&hmac->hash.sha, ip);
  4144ec:	4641      	mov	r1, r8
  4144ee:	4620      	mov	r0, r4

004144f0 <.LVL72>:
  4144f0:	f005 fea8 	bl	41a244 <.LFE180>

004144f4 <.LVL73>:
                if (ret != 0)
  4144f4:	2800      	cmp	r0, #0
  4144f6:	d16c      	bne.n	4145d2 <.LBE9+0x4>
            hmac_block_size = SHA_BLOCK_SIZE;
  4144f8:	2640      	movs	r6, #64	; 0x40

004144fa <.LVL74>:
                length = SHA_DIGEST_SIZE;
  4144fa:	2714      	movs	r7, #20

004144fc <.LVL75>:
  4144fc:	e7d9      	b.n	4144b2 <.LVL65>

004144fe <.LVL76>:
            if (length <= SHA256_BLOCK_SIZE) {
  4144fe:	2f40      	cmp	r7, #64	; 0x40
  414500:	d808      	bhi.n	414514 <.LVL79>
                if (key != NULL) {
  414502:	2e00      	cmp	r6, #0
  414504:	d071      	beq.n	4145ea <.LVL116>
                    XMEMCPY(ip, key, length);
  414506:	463a      	mov	r2, r7
  414508:	4631      	mov	r1, r6
  41450a:	4640      	mov	r0, r8
  41450c:	f001 ff86 	bl	41641c <memcpy>

00414510 <.LVL77>:
    		hmac_block_size = SHA256_BLOCK_SIZE;
  414510:	2640      	movs	r6, #64	; 0x40

00414512 <.LVL78>:
  414512:	e7a9      	b.n	414468 <.LVL56>

00414514 <.LVL79>:
                ret = wc_Sha256Update(&hmac->hash.sha256, key, length);
  414514:	463a      	mov	r2, r7
  414516:	4631      	mov	r1, r6
  414518:	4620      	mov	r0, r4
  41451a:	f006 fa01 	bl	41a920 <.LFE165>

0041451e <.LVL80>:
                if (ret != 0)
  41451e:	b108      	cbz	r0, 414524 <.LVL80+0x6>
                ret = wc_Sha256Update(&hmac->hash.sha256, key, length);
  414520:	4605      	mov	r5, r0
  414522:	e045      	b.n	4145b0 <.LVL104>
                ret = wc_Sha256Final(&hmac->hash.sha256, ip);
  414524:	4641      	mov	r1, r8
  414526:	4620      	mov	r0, r4

00414528 <.LVL81>:
  414528:	f005 fbec 	bl	419d04 <.LFE151>

0041452c <.LVL82>:
                if (ret != 0)
  41452c:	2800      	cmp	r0, #0
  41452e:	d152      	bne.n	4145d6 <.LBE9+0x8>
    		hmac_block_size = SHA256_BLOCK_SIZE;
  414530:	2640      	movs	r6, #64	; 0x40

00414532 <.LVL83>:
                length = SHA256_DIGEST_SIZE;
  414532:	2720      	movs	r7, #32

00414534 <.LVL84>:
  414534:	e7bd      	b.n	4144b2 <.LVL65>

00414536 <.LVL85>:
            if (length <= SHA384_BLOCK_SIZE) {
  414536:	2f80      	cmp	r7, #128	; 0x80
  414538:	d808      	bhi.n	41454c <.LVL88>
                if (key != NULL) {
  41453a:	2e00      	cmp	r6, #0
  41453c:	d057      	beq.n	4145ee <.LVL118>
                    XMEMCPY(ip, key, length);
  41453e:	463a      	mov	r2, r7
  414540:	4631      	mov	r1, r6
  414542:	4640      	mov	r0, r8
  414544:	f001 ff6a 	bl	41641c <memcpy>

00414548 <.LVL86>:
            hmac_block_size = SHA384_BLOCK_SIZE;
  414548:	2680      	movs	r6, #128	; 0x80

0041454a <.LVL87>:
  41454a:	e78d      	b.n	414468 <.LVL56>

0041454c <.LVL88>:
                ret = wc_Sha384Update(&hmac->hash.sha384, key, length);
  41454c:	463a      	mov	r2, r7
  41454e:	4631      	mov	r1, r6
  414550:	4620      	mov	r0, r4
  414552:	f003 fa20 	bl	417996 <.LBE719>

00414556 <.LVL89>:
                if (ret != 0)
  414556:	b108      	cbz	r0, 41455c <.LVL89+0x6>
                ret = wc_Sha384Update(&hmac->hash.sha384, key, length);
  414558:	4605      	mov	r5, r0
  41455a:	e029      	b.n	4145b0 <.LVL104>
                ret = wc_Sha384Final(&hmac->hash.sha384, ip);
  41455c:	4641      	mov	r1, r8
  41455e:	4620      	mov	r0, r4

00414560 <.LVL90>:
  414560:	f7ff fb6e 	bl	413c40 <.LFE21>

00414564 <.LVL91>:
                if (ret != 0)
  414564:	bbc8      	cbnz	r0, 4145da <.LVL110>
            hmac_block_size = SHA384_BLOCK_SIZE;
  414566:	2680      	movs	r6, #128	; 0x80

00414568 <.LVL92>:
                length = SHA384_DIGEST_SIZE;
  414568:	2730      	movs	r7, #48	; 0x30

0041456a <.LVL93>:
  41456a:	e7a2      	b.n	4144b2 <.LVL65>

0041456c <.LVL94>:
            if (length <= SHA512_BLOCK_SIZE) {
  41456c:	2f80      	cmp	r7, #128	; 0x80
  41456e:	d807      	bhi.n	414580 <.LVL97>
                if (key != NULL) {
  414570:	b3fe      	cbz	r6, 4145f2 <.LVL120>
                    XMEMCPY(ip, key, length);
  414572:	463a      	mov	r2, r7
  414574:	4631      	mov	r1, r6
  414576:	4640      	mov	r0, r8
  414578:	f001 ff50 	bl	41641c <memcpy>

0041457c <.LVL95>:
            hmac_block_size = SHA512_BLOCK_SIZE;
  41457c:	2680      	movs	r6, #128	; 0x80

0041457e <.LVL96>:
  41457e:	e773      	b.n	414468 <.LVL56>

00414580 <.LVL97>:
                ret = wc_Sha512Update(&hmac->hash.sha512, key, length);
  414580:	463a      	mov	r2, r7
  414582:	4631      	mov	r1, r6
  414584:	4620      	mov	r0, r4
  414586:	f003 f991 	bl	4178ac <.LFE178>

0041458a <.LVL98>:
                if (ret != 0)
  41458a:	b108      	cbz	r0, 414590 <.LVL98+0x6>
                ret = wc_Sha512Update(&hmac->hash.sha512, key, length);
  41458c:	4605      	mov	r5, r0
  41458e:	e00f      	b.n	4145b0 <.LVL104>
                ret = wc_Sha512Final(&hmac->hash.sha512, ip);
  414590:	4641      	mov	r1, r8
  414592:	4620      	mov	r0, r4

00414594 <.LVL99>:
  414594:	f7ff fa0c 	bl	4139b0 <wc_Sha512Final>

00414598 <.LVL100>:
                if (ret != 0)
  414598:	bb08      	cbnz	r0, 4145de <.LVL110+0x4>
            hmac_block_size = SHA512_BLOCK_SIZE;
  41459a:	2680      	movs	r6, #128	; 0x80

0041459c <.LVL101>:
                length = SHA512_DIGEST_SIZE;
  41459c:	2740      	movs	r7, #64	; 0x40

0041459e <.LVL102>:
  41459e:	e788      	b.n	4144b2 <.LVL65>

004145a0 <.LVL103>:
        return BAD_FUNC_ARG;
  4145a0:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  4145a4:	e004      	b.n	4145b0 <.LVL104>
  4145a6:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  4145aa:	e001      	b.n	4145b0 <.LVL104>
  4145ac:	f06f 05ac 	mvn.w	r5, #172	; 0xac

004145b0 <.LVL104>:
        }
    }

    return ret;
}
  4145b0:	4628      	mov	r0, r5
  4145b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004145b6 <.LVL105>:
        return BAD_FUNC_ARG;
  4145b6:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  4145ba:	e7f9      	b.n	4145b0 <.LVL104>

004145bc <.LVL106>:
            return BAD_FUNC_ARG;
  4145bc:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  4145c0:	e7f6      	b.n	4145b0 <.LVL104>

004145c2 <.LBB9>:
    hmac->heap = heap;
  4145c2:	2300      	movs	r3, #0
  4145c4:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240

004145c8 <.LVL108>:
            ret = BAD_FUNC_ARG;
  4145c8:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  4145cc:	e7f0      	b.n	4145b0 <.LVL104>

004145ce <.LBE9>:
                ret = wc_Md5Final(&hmac->hash.md5, ip);
  4145ce:	4605      	mov	r5, r0
  4145d0:	e7ee      	b.n	4145b0 <.LVL104>
                ret = wc_ShaFinal(&hmac->hash.sha, ip);
  4145d2:	4605      	mov	r5, r0
  4145d4:	e7ec      	b.n	4145b0 <.LVL104>
                ret = wc_Sha256Final(&hmac->hash.sha256, ip);
  4145d6:	4605      	mov	r5, r0
  4145d8:	e7ea      	b.n	4145b0 <.LVL104>

004145da <.LVL110>:
                ret = wc_Sha384Final(&hmac->hash.sha384, ip);
  4145da:	4605      	mov	r5, r0
  4145dc:	e7e8      	b.n	4145b0 <.LVL104>
                ret = wc_Sha512Final(&hmac->hash.sha512, ip);
  4145de:	4605      	mov	r5, r0

004145e0 <.LVL111>:
  4145e0:	e7e6      	b.n	4145b0 <.LVL104>

004145e2 <.LVL112>:
            hmac_block_size = MD5_BLOCK_SIZE;
  4145e2:	2640      	movs	r6, #64	; 0x40

004145e4 <.LVL113>:
  4145e4:	e740      	b.n	414468 <.LVL56>

004145e6 <.LVL114>:
            hmac_block_size = SHA_BLOCK_SIZE;
  4145e6:	2640      	movs	r6, #64	; 0x40

004145e8 <.LVL115>:
  4145e8:	e73e      	b.n	414468 <.LVL56>

004145ea <.LVL116>:
    		hmac_block_size = SHA256_BLOCK_SIZE;
  4145ea:	2640      	movs	r6, #64	; 0x40

004145ec <.LVL117>:
  4145ec:	e73c      	b.n	414468 <.LVL56>

004145ee <.LVL118>:
            hmac_block_size = SHA384_BLOCK_SIZE;
  4145ee:	2680      	movs	r6, #128	; 0x80

004145f0 <.LVL119>:
  4145f0:	e73a      	b.n	414468 <.LVL56>

004145f2 <.LVL120>:
            hmac_block_size = SHA512_BLOCK_SIZE;
  4145f2:	2680      	movs	r6, #128	; 0x80

004145f4 <.LVL121>:
  4145f4:	e738      	b.n	414468 <.LVL56>

Disassembly of section .rodata.ecc_sets%78:

004145f8 <ecc_sets>:
  4145f8:	000e 0000 0008 0000 8444 0040 8450 0040     ........D.@.P.@.
  414608:	8470 0040 8490 0040 84b0 0040 84d0 0040     p.@...@...@...@.
  414618:	84ec 0040 dd14 0041 0005 0000 00b6 0000     ..@...A.........
  414628:	0001 0000 0010 0000 000a 0000 850c 0040     ..............@.
  414638:	8518 0040 853c 0040 8560 0040 8584 0040     ..@.<.@.`.@...@.
  414648:	85a8 0040 85cc 0040 dd1c 0041 0005 0000     ..@...@...A.....
  414658:	00cc 0000 0001 0000 0014 0000 000c 0000     ................
  414668:	85f0 0040 85fc 0040 8628 0040 8654 0040     ..@...@.(.@.T.@.
  414678:	8680 0040 86ac 0040 86d8 0040 dd24 0041     ..@...@...@.$.A.
  414688:	0005 0000 00b8 0000 0001 0000 0018 0000     ................
  414698:	0001 0000 8704 0040 8710 0040 8744 0040     ......@...@.D.@.
  4146a8:	8778 0040 87ac 0040 87e0 0040 8814 0040     x.@...@...@...@.
  4146b8:	dd2c 0041 0008 0000 0208 0000 0001 0000     ,.A.............
  4146c8:	001c 0000 000e 0000 8844 0040 8850 0040     ........D.@.P.@.
  4146d8:	888c 0040 88c8 0040 8904 0040 8940 0040     ..@...@...@.@.@.
  4146e8:	897c 0040 dd34 0041 0005 0000 00d1 0000     |.@.4.A.........
  4146f8:	0001 0000 001e 0000 0004 0000 89b8 0040     ..............@.
  414708:	89c4 0040 8a04 0040 8a44 0040 8a84 0040     ..@...@.D.@...@.
  414718:	8ac4 0040 8b04 0040 dd0c 0041 0008 0000     ..@...@...A.....
  414728:	020b 0000 0001 0000 0020 0000 0007 0000     ........ .......
  414738:	8b44 0040 8b50 0040 8b94 0040 8bd8 0040     D.@.P.@...@...@.
  414748:	8c1c 0040 8c60 0040 8ca4 0040 dd3c 0041     ..@.`.@...@.<.A.
  414758:	0008 0000 020e 0000 0001 0000 0030 0000     ............0...
  414768:	000f 0000 8ce8 0040 8cf4 0040 8d58 0040     ......@...@.X.@.
  414778:	8dbc 0040 8e20 0040 8e84 0040 8ee8 0040     ..@. .@...@...@.
  414788:	dd44 0041 0005 0000 00d2 0000 0001 0000     D.A.............
  414798:	0042 0000 0010 0000 8f4c 0040 8f58 0040     B.......L.@.X.@.
  4147a8:	8fdc 0040 9060 0040 90e4 0040 9168 0040     ..@.`.@...@.h.@.
  4147b8:	91ec 0040 dd4c 0041 0005 0000 00d3 0000     ..@.L.A.........
  4147c8:	0001 0000 0000 0000 ffff ffff 0000 0000     ................
	...

Disassembly of section .text.wc_ecc_sign_hash_ex%79:

00414800 <wc_ecc_sign_hash_ex>:
{
  414800:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}

00414804 <.LCFI80>:
  414804:	f6ad 5d38 	subw	sp, sp, #3384	; 0xd38

00414808 <.LCFI81>:
  414808:	4607      	mov	r7, r0
  41480a:	468a      	mov	sl, r1
  41480c:	4616      	mov	r6, r2
  41480e:	461d      	mov	r5, r3
   DECLARE_CURVE_SPECS(1)
  414810:	f50d 640c 	add.w	r4, sp, #2240	; 0x8c0
  414814:	f8cd 48bc 	str.w	r4, [sp, #2236]	; 0x8bc
  414818:	2228      	movs	r2, #40	; 0x28

0041481a <.LVL954>:
  41481a:	2100      	movs	r1, #0

0041481c <.LVL955>:
  41481c:	4620      	mov	r0, r4

0041481e <.LVL956>:
  41481e:	f005 fabf 	bl	419da0 <.LFE166>

00414822 <.LVL957>:
  414822:	f60d 03e8 	addw	r3, sp, #2280	; 0x8e8
  414826:	61a3      	str	r3, [r4, #24]
  414828:	2301      	movs	r3, #1
  41482a:	61e3      	str	r3, [r4, #28]
   if (in == NULL || r == NULL || s == NULL || key == NULL || rng == NULL)
  41482c:	2f00      	cmp	r7, #0
  41482e:	f000 80d0 	beq.w	4149d2 <.LBE64>
  414832:	f8dd 3d58 	ldr.w	r3, [sp, #3416]	; 0xd58
  414836:	2b00      	cmp	r3, #0
  414838:	f000 80cb 	beq.w	4149d2 <.LBE64>
  41483c:	f8dd 3d5c 	ldr.w	r3, [sp, #3420]	; 0xd5c
  414840:	2d00      	cmp	r5, #0
  414842:	bf18      	it	ne
  414844:	2b00      	cmpne	r3, #0
  414846:	f000 80c7 	beq.w	4149d8 <.LBE64+0x6>
  41484a:	2e00      	cmp	r6, #0
  41484c:	f000 80c4 	beq.w	4149d8 <.LBE64+0x6>
   if (key->type != ECC_PRIVATEKEY) {
  414850:	682b      	ldr	r3, [r5, #0]
  414852:	2b02      	cmp	r3, #2
  414854:	f040 80c3 	bne.w	4149de <.LBE64+0xc>
   if (wc_ecc_is_valid_idx(key->idx) != 1) {
  414858:	6868      	ldr	r0, [r5, #4]
  41485a:	f008 fdc7 	bl	41d3ec <wc_ecc_is_valid_idx>

0041485e <.LVL958>:
  41485e:	2801      	cmp	r0, #1
  414860:	f040 80c0 	bne.w	4149e4 <.LBE64+0x12>
   if ((err = mp_init(&e)) != MP_OKAY) {
  414864:	f50d 6031 	add.w	r0, sp, #2832	; 0xb10
  414868:	f009 f942 	bl	41daf0 <.LFE202>

0041486c <.LVL959>:
  41486c:	4604      	mov	r4, r0
  41486e:	b120      	cbz	r0, 41487a <.LCFI83>

00414870 <.LVL960>:
}
  414870:	4620      	mov	r0, r4
  414872:	f60d 5d38 	addw	sp, sp, #3384	; 0xd38

00414876 <.LCFI82>:
  414876:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

0041487a <.LCFI83>:
   err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ORDER);
  41487a:	2208      	movs	r2, #8
  41487c:	f60d 01bc 	addw	r1, sp, #2236	; 0x8bc
  414880:	6928      	ldr	r0, [r5, #16]

00414882 <.LVL962>:
  414882:	f004 fb5b 	bl	418f3c <.LFE164>

00414886 <.LVL963>:
   if (err == MP_OKAY) {
  414886:	4604      	mov	r4, r0
  414888:	b140      	cbz	r0, 41489c <.LBB63>

0041488a <.LVL964>:
   mp_clear(&e);
  41488a:	f50d 6031 	add.w	r0, sp, #2832	; 0xb10
  41488e:	f009 f9a6 	bl	41dbde <.LFE179>

00414892 <.LBB61>:
    _wc_ecc_curve_free(curve);
  414892:	f8dd 08bc 	ldr.w	r0, [sp, #2236]	; 0x8bc
  414896:	f006 ff19 	bl	41b6cc <.LFE46>

0041489a <.LVL966>:
  41489a:	e7e9      	b.n	414870 <.LVL960>

0041489c <.LBB63>:
       word32 orderBits = mp_count_bits(curve->order);
  41489c:	f8dd 38bc 	ldr.w	r3, [sp, #2236]	; 0x8bc
  4148a0:	68d8      	ldr	r0, [r3, #12]

004148a2 <.LVL968>:
  4148a2:	f009 fa77 	bl	41dd94 <.LFE80>

004148a6 <.LVL969>:
  4148a6:	4683      	mov	fp, r0

004148a8 <.LVL970>:
       if ((WOLFSSL_BIT_SIZE * inlen) > orderBits)
  4148a8:	ebb0 0fca 	cmp.w	r0, sl, lsl #3
  4148ac:	f080 809f 	bcs.w	4149ee <.LVL1007>
           inlen = (orderBits + WOLFSSL_BIT_SIZE - 1) / WOLFSSL_BIT_SIZE;
  4148b0:	f100 0a07 	add.w	sl, r0, #7

004148b4 <.LVL971>:
       err = mp_read_unsigned_bin(&e, (byte*)in, inlen);
  4148b4:	ea4f 02da 	mov.w	r2, sl, lsr #3

004148b8 <.LVL972>:
  4148b8:	4639      	mov	r1, r7
  4148ba:	f50d 6031 	add.w	r0, sp, #2832	; 0xb10

004148be <.LVL973>:
  4148be:	f009 f9e5 	bl	41dc8c <.LFE72>

004148c2 <.LVL974>:
       if (err == MP_OKAY && (WOLFSSL_BIT_SIZE * inlen) > orderBits)
  4148c2:	2800      	cmp	r0, #0
  4148c4:	f040 8091 	bne.w	4149ea <.LBB65>
  4148c8:	f02a 0a07 	bic.w	sl, sl, #7

004148cc <.LVL975>:
  4148cc:	45d3      	cmp	fp, sl
  4148ce:	d207      	bcs.n	4148e0 <.LBB64>
           mp_rshb(&e, WOLFSSL_BIT_SIZE - (orderBits & 0x7));
  4148d0:	f00b 0107 	and.w	r1, fp, #7
  4148d4:	f1c1 0108 	rsb	r1, r1, #8
  4148d8:	f50d 6031 	add.w	r0, sp, #2832	; 0xb10

004148dc <.LVL976>:
  4148dc:	f009 fa62 	bl	41dda4 <.LFE97>

004148e0 <.LBB64>:
       if (wc_ecc_init_ex(&pubkey, key->heap, INVALID_DEVID) == MP_OKAY) {
  4148e0:	f06f 0201 	mvn.w	r2, #1
  4148e4:	6969      	ldr	r1, [r5, #20]
  4148e6:	a801      	add	r0, sp, #4
  4148e8:	f007 fe03 	bl	41c4f2 <.LFE16>

004148ec <.LVL978>:
  4148ec:	2800      	cmp	r0, #0
  4148ee:	d1cc      	bne.n	41488a <.LVL964>
  4148f0:	f04f 0940 	mov.w	r9, #64	; 0x40
  4148f4:	e010      	b.n	414918 <.LVL985>

004148f6 <.LVL979>:
                   mp_clear(pubkey.pubkey.x);
  4148f6:	a807      	add	r0, sp, #28
  4148f8:	f009 f971 	bl	41dbde <.LFE179>

004148fc <.LVL980>:
                   mp_clear(pubkey.pubkey.y);
  4148fc:	a891      	add	r0, sp, #580	; 0x244
  4148fe:	f009 f96e 	bl	41dbde <.LFE179>

00414902 <.LVL981>:
                   mp_clear(pubkey.pubkey.z);
  414902:	f20d 406c 	addw	r0, sp, #1132	; 0x46c
  414906:	f009 f96a 	bl	41dbde <.LFE179>

0041490a <.LVL982>:
                   mp_forcezero(&pubkey.k);
  41490a:	f20d 6094 	addw	r0, sp, #1684	; 0x694
  41490e:	f009 fa21 	bl	41dd54 <mp_forcezero>

00414912 <.LVL983>:
               if (++loop_check > 64) {
  414912:	f1b9 0901 	subs.w	r9, r9, #1

00414916 <.LVL984>:
  414916:	d056      	beq.n	4149c6 <.LVL1002+0x6>

00414918 <.LVL985>:
               err = wc_ecc_make_key_ex(rng, key->dp->size, &pubkey,
  414918:	6929      	ldr	r1, [r5, #16]
  41491a:	684b      	ldr	r3, [r1, #4]
  41491c:	aa01      	add	r2, sp, #4
  41491e:	6809      	ldr	r1, [r1, #0]
  414920:	4630      	mov	r0, r6
  414922:	f000 fefd 	bl	415720 <.LFE18>

00414926 <.LVL986>:
               if (err != MP_OKAY) break;
  414926:	4604      	mov	r4, r0
  414928:	2800      	cmp	r0, #0
  41492a:	d14e      	bne.n	4149ca <.LVL1003>
               err = mp_mod(pubkey.pubkey.x, curve->order, r);
  41492c:	f8dd 38bc 	ldr.w	r3, [sp, #2236]	; 0x8bc
  414930:	f8dd 2d58 	ldr.w	r2, [sp, #3416]	; 0xd58
  414934:	68d9      	ldr	r1, [r3, #12]
  414936:	a807      	add	r0, sp, #28

00414938 <.LVL987>:
  414938:	f009 fa24 	bl	41dd84 <.LFE75>

0041493c <.LVL988>:
               if (err != MP_OKAY) break;
  41493c:	4604      	mov	r4, r0
  41493e:	2800      	cmp	r0, #0
  414940:	d143      	bne.n	4149ca <.LVL1003>
               if (mp_iszero(r) == MP_YES) {
  414942:	f8dd 0d58 	ldr.w	r0, [sp, #3416]	; 0xd58

00414946 <.LVL989>:
  414946:	f009 f9b5 	bl	41dcb4 <.LFE93>

0041494a <.LVL990>:
  41494a:	2801      	cmp	r0, #1
  41494c:	d0d3      	beq.n	4148f6 <.LVL979>
                   err = mp_invmod(&pubkey.k, curve->order, &pubkey.k);
  41494e:	f8dd 38bc 	ldr.w	r3, [sp, #2236]	; 0x8bc
  414952:	f20d 6294 	addw	r2, sp, #1684	; 0x694
  414956:	68d9      	ldr	r1, [r3, #12]
  414958:	4610      	mov	r0, r2
  41495a:	f009 fa0b 	bl	41dd74 <.LFE83>

0041495e <.LVL991>:
                   if (err != MP_OKAY) break;
  41495e:	4604      	mov	r4, r0
  414960:	bb98      	cbnz	r0, 4149ca <.LVL1003>
                   err = mp_mulmod(&key->k, r, curve->order, s);
  414962:	f8dd 28bc 	ldr.w	r2, [sp, #2236]	; 0x8bc
  414966:	f8dd 3d5c 	ldr.w	r3, [sp, #3420]	; 0xd5c
  41496a:	68d2      	ldr	r2, [r2, #12]
  41496c:	f8dd 1d58 	ldr.w	r1, [sp, #3416]	; 0xd58
  414970:	f505 60d2 	add.w	r0, r5, #1680	; 0x690

00414974 <.LVL992>:
  414974:	f009 fa02 	bl	41dd7c <.LFE79>

00414978 <.LVL993>:
                   if (err != MP_OKAY) break;
  414978:	4604      	mov	r4, r0
  41497a:	bb30      	cbnz	r0, 4149ca <.LVL1003>
                   err = mp_add(&e, s, s);
  41497c:	f8dd 2d5c 	ldr.w	r2, [sp, #3420]	; 0xd5c
  414980:	4611      	mov	r1, r2
  414982:	f50d 6031 	add.w	r0, sp, #2832	; 0xb10

00414986 <.LVL994>:
  414986:	f009 f977 	bl	41dc78 <.LFE231>

0041498a <.LVL995>:
                   if (err != MP_OKAY) break;
  41498a:	4604      	mov	r4, r0
  41498c:	b9e8      	cbnz	r0, 4149ca <.LVL1003>
                   err = mp_mod(s, curve->order, s);
  41498e:	f8dd 38bc 	ldr.w	r3, [sp, #2236]	; 0x8bc
  414992:	f8dd 2d5c 	ldr.w	r2, [sp, #3420]	; 0xd5c
  414996:	68d9      	ldr	r1, [r3, #12]
  414998:	4610      	mov	r0, r2

0041499a <.LVL996>:
  41499a:	f009 f9f3 	bl	41dd84 <.LFE75>

0041499e <.LVL997>:
                   if (err != MP_OKAY) break;
  41499e:	4604      	mov	r4, r0
  4149a0:	b998      	cbnz	r0, 4149ca <.LVL1003>
                   err = mp_mulmod(s, &pubkey.k, curve->order, s);
  4149a2:	f8dd 28bc 	ldr.w	r2, [sp, #2236]	; 0x8bc
  4149a6:	f8dd 3d5c 	ldr.w	r3, [sp, #3420]	; 0xd5c
  4149aa:	68d2      	ldr	r2, [r2, #12]
  4149ac:	f20d 6194 	addw	r1, sp, #1684	; 0x694
  4149b0:	4618      	mov	r0, r3

004149b2 <.LVL998>:
  4149b2:	f009 f9e3 	bl	41dd7c <.LFE79>

004149b6 <.LVL999>:
  4149b6:	4604      	mov	r4, r0

004149b8 <.LVL1000>:
                   if (mp_iszero(s) == MP_NO)
  4149b8:	f8dd 0d5c 	ldr.w	r0, [sp, #3420]	; 0xd5c

004149bc <.LVL1001>:
  4149bc:	f009 f97a 	bl	41dcb4 <.LFE93>

004149c0 <.LVL1002>:
  4149c0:	2800      	cmp	r0, #0
  4149c2:	d1a6      	bne.n	414912 <.LVL983>
  4149c4:	e001      	b.n	4149ca <.LVL1003>
                    err = RNG_FAILURE_E;
  4149c6:	f06f 04c6 	mvn.w	r4, #198	; 0xc6

004149ca <.LVL1003>:
           wc_ecc_free(&pubkey);
  4149ca:	a801      	add	r0, sp, #4
  4149cc:	f008 fc34 	bl	41d238 <.LFE27>

004149d0 <.LVL1004>:
  4149d0:	e75b      	b.n	41488a <.LVL964>

004149d2 <.LBE64>:
       return ECC_BAD_ARG_E;
  4149d2:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
  4149d6:	e74b      	b.n	414870 <.LVL960>
  4149d8:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
  4149dc:	e748      	b.n	414870 <.LVL960>
      return ECC_BAD_ARG_E;
  4149de:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
  4149e2:	e745      	b.n	414870 <.LVL960>
      return ECC_BAD_ARG_E;
  4149e4:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
  4149e8:	e742      	b.n	414870 <.LVL960>

004149ea <.LBB65>:
       err = mp_read_unsigned_bin(&e, (byte*)in, inlen);
  4149ea:	4604      	mov	r4, r0
  4149ec:	e74d      	b.n	41488a <.LVL964>

004149ee <.LVL1007>:
  4149ee:	4652      	mov	r2, sl
  4149f0:	4639      	mov	r1, r7
  4149f2:	f50d 6031 	add.w	r0, sp, #2832	; 0xb10

004149f6 <.LVL1008>:
  4149f6:	f009 f949 	bl	41dc8c <.LFE72>

004149fa <.LVL1009>:
       if (err == MP_OKAY && (WOLFSSL_BIT_SIZE * inlen) > orderBits)
  4149fa:	2800      	cmp	r0, #0
  4149fc:	f43f af70 	beq.w	4148e0 <.LBB64>
       err = mp_read_unsigned_bin(&e, (byte*)in, inlen);
  414a00:	4604      	mov	r4, r0
  414a02:	e742      	b.n	41488a <.LVL964>

Disassembly of section .rodata._dist_code%80:

00414a04 <_dist_code>:
  414a04:	0100 0302 0404 0505 0606 0606 0707 0707     ................
  414a14:	0808 0808 0808 0808 0909 0909 0909 0909     ................
  414a24:	0a0a 0a0a 0a0a 0a0a 0a0a 0a0a 0a0a 0a0a     ................
  414a34:	0b0b 0b0b 0b0b 0b0b 0b0b 0b0b 0b0b 0b0b     ................
  414a44:	0c0c 0c0c 0c0c 0c0c 0c0c 0c0c 0c0c 0c0c     ................
  414a54:	0c0c 0c0c 0c0c 0c0c 0c0c 0c0c 0c0c 0c0c     ................
  414a64:	0d0d 0d0d 0d0d 0d0d 0d0d 0d0d 0d0d 0d0d     ................
  414a74:	0d0d 0d0d 0d0d 0d0d 0d0d 0d0d 0d0d 0d0d     ................
  414a84:	0e0e 0e0e 0e0e 0e0e 0e0e 0e0e 0e0e 0e0e     ................
  414a94:	0e0e 0e0e 0e0e 0e0e 0e0e 0e0e 0e0e 0e0e     ................
  414aa4:	0e0e 0e0e 0e0e 0e0e 0e0e 0e0e 0e0e 0e0e     ................
  414ab4:	0e0e 0e0e 0e0e 0e0e 0e0e 0e0e 0e0e 0e0e     ................
  414ac4:	0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f     ................
  414ad4:	0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f     ................
  414ae4:	0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f     ................
  414af4:	0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f     ................
  414b04:	0000 1110 1212 1313 1414 1414 1515 1515     ................
  414b14:	1616 1616 1616 1616 1717 1717 1717 1717     ................
  414b24:	1818 1818 1818 1818 1818 1818 1818 1818     ................
  414b34:	1919 1919 1919 1919 1919 1919 1919 1919     ................
  414b44:	1a1a 1a1a 1a1a 1a1a 1a1a 1a1a 1a1a 1a1a     ................
  414b54:	1a1a 1a1a 1a1a 1a1a 1a1a 1a1a 1a1a 1a1a     ................
  414b64:	1b1b 1b1b 1b1b 1b1b 1b1b 1b1b 1b1b 1b1b     ................
  414b74:	1b1b 1b1b 1b1b 1b1b 1b1b 1b1b 1b1b 1b1b     ................
  414b84:	1c1c 1c1c 1c1c 1c1c 1c1c 1c1c 1c1c 1c1c     ................
  414b94:	1c1c 1c1c 1c1c 1c1c 1c1c 1c1c 1c1c 1c1c     ................
  414ba4:	1c1c 1c1c 1c1c 1c1c 1c1c 1c1c 1c1c 1c1c     ................
  414bb4:	1c1c 1c1c 1c1c 1c1c 1c1c 1c1c 1c1c 1c1c     ................
  414bc4:	1d1d 1d1d 1d1d 1d1d 1d1d 1d1d 1d1d 1d1d     ................
  414bd4:	1d1d 1d1d 1d1d 1d1d 1d1d 1d1d 1d1d 1d1d     ................
  414be4:	1d1d 1d1d 1d1d 1d1d 1d1d 1d1d 1d1d 1d1d     ................
  414bf4:	1d1d 1d1d 1d1d 1d1d 1d1d 1d1d 1d1d 1d1d     ................

Disassembly of section .text.fill_window%81:

00414c04 <fill_window>:
{
  414c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

00414c08 <.LCFI5>:
  414c08:	4604      	mov	r4, r0
    uInt wsize = s->w_size;
  414c0a:	6ac6      	ldr	r6, [r0, #44]	; 0x2c

00414c0c <.LVL61>:
            p = &s->prev[n];
  414c0c:	0077      	lsls	r7, r6, #1
        if (s->lookahead + s->insert >= MIN_MATCH) {
  414c0e:	f241 65b4 	movw	r5, #5812	; 0x16b4
  414c12:	4405      	add	r5, r0
  414c14:	e067      	b.n	414ce6 <.LVL84>

00414c16 <.LVL62>:
            zmemcpy(s->window, s->window+wsize, (unsigned)wsize);
  414c16:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  414c18:	4632      	mov	r2, r6
  414c1a:	1981      	adds	r1, r0, r6
  414c1c:	f001 fbfe 	bl	41641c <memcpy>

00414c20 <.LVL63>:
            s->match_start -= wsize;
  414c20:	6f23      	ldr	r3, [r4, #112]	; 0x70
  414c22:	1b9b      	subs	r3, r3, r6
  414c24:	6723      	str	r3, [r4, #112]	; 0x70
            s->strstart    -= wsize; /* we now have strstart >= MAX_DIST */
  414c26:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  414c28:	1b9b      	subs	r3, r3, r6
  414c2a:	66e3      	str	r3, [r4, #108]	; 0x6c
            s->block_start -= (long) wsize;
  414c2c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  414c2e:	1b9b      	subs	r3, r3, r6
  414c30:	65e3      	str	r3, [r4, #92]	; 0x5c
            n = s->hash_size;
  414c32:	6ce2      	ldr	r2, [r4, #76]	; 0x4c

00414c34 <.LVL64>:
            p = &s->head[n];
  414c34:	6c61      	ldr	r1, [r4, #68]	; 0x44
  414c36:	eb01 0142 	add.w	r1, r1, r2, lsl #1

00414c3a <.LVL65>:
  414c3a:	2000      	movs	r0, #0

00414c3c <.LVL66>:
                m = *--p;
  414c3c:	f831 3c02 	ldrh.w	r3, [r1, #-2]

00414c40 <.LVL67>:
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
  414c40:	429e      	cmp	r6, r3
  414c42:	bf94      	ite	ls
  414c44:	1b9b      	subls	r3, r3, r6

00414c46 <.LVL68>:
  414c46:	4603      	movhi	r3, r0
  414c48:	f821 3d02 	strh.w	r3, [r1, #-2]!

00414c4c <.LVL69>:
            } while (--n);
  414c4c:	3a01      	subs	r2, #1

00414c4e <.LVL70>:
  414c4e:	d1f5      	bne.n	414c3c <.LVL66>

00414c50 <.LVL71>:
            p = &s->prev[n];
  414c50:	6c21      	ldr	r1, [r4, #64]	; 0x40
  414c52:	4439      	add	r1, r7

00414c54 <.LVL72>:
            n = wsize;
  414c54:	4630      	mov	r0, r6

00414c56 <.LVL73>:
                m = *--p;
  414c56:	f831 3c02 	ldrh.w	r3, [r1, #-2]

00414c5a <.LVL74>:
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
  414c5a:	429e      	cmp	r6, r3
  414c5c:	bf94      	ite	ls
  414c5e:	1b9b      	subls	r3, r3, r6

00414c60 <.LVL75>:
  414c60:	4613      	movhi	r3, r2
  414c62:	f821 3d02 	strh.w	r3, [r1, #-2]!

00414c66 <.LVL76>:
            } while (--n);
  414c66:	3801      	subs	r0, #1

00414c68 <.LVL77>:
  414c68:	d1f5      	bne.n	414c56 <.LVL73>
            more += wsize;
  414c6a:	44b0      	add	r8, r6
  414c6c:	e047      	b.n	414cfe <.LVL85+0xc>

00414c6e <.LVL79>:
        n = read_buf(s->strm, s->window + s->strstart + s->lookahead, more);
  414c6e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  414c70:	6f61      	ldr	r1, [r4, #116]	; 0x74
  414c72:	440a      	add	r2, r1
  414c74:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  414c76:	eb01 0a02 	add.w	sl, r1, r2

00414c7a <.LBB6>:
    strm->avail_in  -= len;
  414c7a:	eba3 0308 	sub.w	r3, r3, r8
  414c7e:	f8c9 3004 	str.w	r3, [r9, #4]
    zmemcpy(buf, strm->next_in, len);
  414c82:	4642      	mov	r2, r8
  414c84:	f8d9 1000 	ldr.w	r1, [r9]
  414c88:	4650      	mov	r0, sl
  414c8a:	f001 fbc7 	bl	41641c <memcpy>

00414c8e <.LVL80>:
    if (strm->state->wrap == 1) {
  414c8e:	f8d9 301c 	ldr.w	r3, [r9, #28]
  414c92:	699b      	ldr	r3, [r3, #24]
  414c94:	2b01      	cmp	r3, #1
  414c96:	d00c      	beq.n	414cb2 <.LVL80+0x24>
    else if (strm->state->wrap == 2) {
  414c98:	2b02      	cmp	r3, #2
  414c9a:	d013      	beq.n	414cc4 <.LVL81+0x6>
    strm->next_in  += len;
  414c9c:	f8d9 3000 	ldr.w	r3, [r9]
  414ca0:	4443      	add	r3, r8
  414ca2:	f8c9 3000 	str.w	r3, [r9]
    strm->total_in += len;
  414ca6:	f8d9 3008 	ldr.w	r3, [r9, #8]
  414caa:	4443      	add	r3, r8
  414cac:	f8c9 3008 	str.w	r3, [r9, #8]
  414cb0:	e033      	b.n	414d1a <.LBE9>
        strm->adler = adler32(strm->adler, buf, len);
  414cb2:	4642      	mov	r2, r8
  414cb4:	4651      	mov	r1, sl
  414cb6:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
  414cba:	f7fe f8e5 	bl	412e88 <.LBE46>

00414cbe <.LVL81>:
  414cbe:	f8c9 0030 	str.w	r0, [r9, #48]	; 0x30
  414cc2:	e7eb      	b.n	414c9c <.LVL80+0xe>
        strm->adler = crc32(strm->adler, buf, len);
  414cc4:	4642      	mov	r2, r8
  414cc6:	4651      	mov	r1, sl
  414cc8:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
  414ccc:	f7fe fd1a 	bl	413704 <.LFE21>

00414cd0 <.LVL82>:
  414cd0:	f8c9 0030 	str.w	r0, [r9, #48]	; 0x30
  414cd4:	e7e2      	b.n	414c9c <.LVL80+0xe>

00414cd6 <.LBE6>:
    } while (s->lookahead < MIN_LOOKAHEAD && s->strm->avail_in != 0);
  414cd6:	6f63      	ldr	r3, [r4, #116]	; 0x74
  414cd8:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
  414cdc:	d253      	bcs.n	414d86 <.LBE10>
  414cde:	6823      	ldr	r3, [r4, #0]
  414ce0:	685b      	ldr	r3, [r3, #4]
  414ce2:	2b00      	cmp	r3, #0
  414ce4:	d04f      	beq.n	414d86 <.LBE10>

00414ce6 <.LVL84>:
        more = (unsigned)(s->window_size -(ulg)s->lookahead -(ulg)s->strstart);
  414ce6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  414ce8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  414cea:	6f61      	ldr	r1, [r4, #116]	; 0x74
  414cec:	1a5b      	subs	r3, r3, r1
  414cee:	eba3 0802 	sub.w	r8, r3, r2

00414cf2 <.LVL85>:
        if (s->strstart >= wsize+MAX_DIST(s)) {
  414cf2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  414cf4:	4433      	add	r3, r6
  414cf6:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
  414cfa:	429a      	cmp	r2, r3
  414cfc:	d28b      	bcs.n	414c16 <.LVL62>
        if (s->strm->avail_in == 0) break;
  414cfe:	f8d4 9000 	ldr.w	r9, [r4]
  414d02:	f8d9 3004 	ldr.w	r3, [r9, #4]
  414d06:	2b00      	cmp	r3, #0
  414d08:	d03d      	beq.n	414d86 <.LBE10>

00414d0a <.LVL86>:
  414d0a:	4598      	cmp	r8, r3
  414d0c:	bf28      	it	cs
  414d0e:	4698      	movcs	r8, r3

00414d10 <.LBB9>:
    if (len == 0) return 0;
  414d10:	f1b8 0f00 	cmp.w	r8, #0
  414d14:	d1ab      	bne.n	414c6e <.LVL79>
  414d16:	f04f 0800 	mov.w	r8, #0

00414d1a <.LBE9>:
        s->lookahead += n;
  414d1a:	6f63      	ldr	r3, [r4, #116]	; 0x74
  414d1c:	4443      	add	r3, r8
  414d1e:	6763      	str	r3, [r4, #116]	; 0x74
        if (s->lookahead + s->insert >= MIN_MATCH) {
  414d20:	682a      	ldr	r2, [r5, #0]
  414d22:	4413      	add	r3, r2
  414d24:	2b02      	cmp	r3, #2
  414d26:	d9d6      	bls.n	414cd6 <.LBE6>

00414d28 <.LBB10>:
            uInt str = s->strstart - s->insert;
  414d28:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  414d2a:	1a9a      	subs	r2, r3, r2

00414d2c <.LVL89>:
            s->ins_h = s->window[str];
  414d2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  414d2e:	5c99      	ldrb	r1, [r3, r2]
  414d30:	64a1      	str	r1, [r4, #72]	; 0x48
            UPDATE_HASH(s, s->ins_h, s->window[str + 1]);
  414d32:	4413      	add	r3, r2
  414d34:	785b      	ldrb	r3, [r3, #1]
  414d36:	6da0      	ldr	r0, [r4, #88]	; 0x58
  414d38:	4081      	lsls	r1, r0
  414d3a:	404b      	eors	r3, r1
  414d3c:	6d61      	ldr	r1, [r4, #84]	; 0x54
  414d3e:	400b      	ands	r3, r1
  414d40:	64a3      	str	r3, [r4, #72]	; 0x48
            while (s->insert) {
  414d42:	682b      	ldr	r3, [r5, #0]
  414d44:	2b00      	cmp	r3, #0
  414d46:	d0c6      	beq.n	414cd6 <.LBE6>
                UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);
  414d48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  414d4a:	4413      	add	r3, r2
  414d4c:	789b      	ldrb	r3, [r3, #2]
  414d4e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  414d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
  414d52:	4081      	lsls	r1, r0
  414d54:	404b      	eors	r3, r1
  414d56:	6d61      	ldr	r1, [r4, #84]	; 0x54
  414d58:	400b      	ands	r3, r1
  414d5a:	64a3      	str	r3, [r4, #72]	; 0x48
                s->prev[str & s->w_mask] = s->head[s->ins_h];
  414d5c:	6c61      	ldr	r1, [r4, #68]	; 0x44
  414d5e:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
  414d62:	6b63      	ldr	r3, [r4, #52]	; 0x34
  414d64:	4013      	ands	r3, r2
  414d66:	6c21      	ldr	r1, [r4, #64]	; 0x40
  414d68:	f821 0013 	strh.w	r0, [r1, r3, lsl #1]
                s->head[s->ins_h] = (Pos)str;
  414d6c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  414d6e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  414d70:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
                str++;
  414d74:	3201      	adds	r2, #1
                s->insert--;
  414d76:	682b      	ldr	r3, [r5, #0]
  414d78:	3b01      	subs	r3, #1
  414d7a:	602b      	str	r3, [r5, #0]
                if (s->lookahead + s->insert < MIN_MATCH)
  414d7c:	6f61      	ldr	r1, [r4, #116]	; 0x74
  414d7e:	440b      	add	r3, r1
  414d80:	2b02      	cmp	r3, #2
  414d82:	d8de      	bhi.n	414d42 <.LVL89+0x16>
  414d84:	e7a7      	b.n	414cd6 <.LBE6>

00414d86 <.LBE10>:
    if (s->high_water < s->window_size) {
  414d86:	f504 53b6 	add.w	r3, r4, #5824	; 0x16c0
  414d8a:	6818      	ldr	r0, [r3, #0]
  414d8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  414d8e:	4298      	cmp	r0, r3
  414d90:	d22c      	bcs.n	414dec <.LVL103>

00414d92 <.LBB11>:
        ulg curr = s->strstart + (ulg)(s->lookahead);
  414d92:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  414d94:	6f62      	ldr	r2, [r4, #116]	; 0x74
  414d96:	18ae      	adds	r6, r5, r2

00414d98 <.LVL92>:
        if (s->high_water < curr) {
  414d98:	42b0      	cmp	r0, r6
  414d9a:	d211      	bcs.n	414dc0 <.LVL98>
            init = s->window_size - curr;
  414d9c:	1b9d      	subs	r5, r3, r6

00414d9e <.LVL93>:
  414d9e:	f5b5 7f81 	cmp.w	r5, #258	; 0x102
  414da2:	bf28      	it	cs
  414da4:	f44f 7581 	movcs.w	r5, #258	; 0x102
            zmemzero(s->window + curr, (unsigned)init);
  414da8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  414daa:	462a      	mov	r2, r5
  414dac:	2100      	movs	r1, #0
  414dae:	4430      	add	r0, r6
  414db0:	f004 fff6 	bl	419da0 <.LFE166>

00414db4 <.LVL95>:
            s->high_water = curr + init;
  414db4:	f504 54b6 	add.w	r4, r4, #5824	; 0x16c0

00414db8 <.LVL96>:
  414db8:	4435      	add	r5, r6

00414dba <.LVL97>:
  414dba:	6025      	str	r5, [r4, #0]
  414dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00414dc0 <.LVL98>:
        else if (s->high_water < (ulg)curr + WIN_INIT) {
  414dc0:	f506 7281 	add.w	r2, r6, #258	; 0x102
  414dc4:	4290      	cmp	r0, r2
  414dc6:	d211      	bcs.n	414dec <.LVL103>
            init = (ulg)curr + WIN_INIT - s->high_water;
  414dc8:	1a35      	subs	r5, r6, r0
  414dca:	f505 7581 	add.w	r5, r5, #258	; 0x102

00414dce <.LVL99>:
            if (init > s->window_size - s->high_water)
  414dce:	1a1b      	subs	r3, r3, r0
  414dd0:	429d      	cmp	r5, r3
  414dd2:	bf28      	it	cs
  414dd4:	461d      	movcs	r5, r3
            zmemzero(s->window + s->high_water, (unsigned)init);
  414dd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  414dd8:	462a      	mov	r2, r5
  414dda:	2100      	movs	r1, #0
  414ddc:	4418      	add	r0, r3
  414dde:	f004 ffdf 	bl	419da0 <.LFE166>

00414de2 <.LVL101>:
            s->high_water += init;
  414de2:	f504 54b6 	add.w	r4, r4, #5824	; 0x16c0

00414de6 <.LVL102>:
  414de6:	6823      	ldr	r3, [r4, #0]
  414de8:	442b      	add	r3, r5
  414dea:	6023      	str	r3, [r4, #0]

00414dec <.LVL103>:
  414dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

Disassembly of section .rodata%82:

00414df0 <.rodata%82>:
  414df0:	6f636e69 	.word	0x6f636e69
  414df4:	63657272 	.word	0x63657272
  414df8:	65682074 	.word	0x65682074
  414dfc:	72656461 	.word	0x72656461
  414e00:	65686320 	.word	0x65686320
  414e04:	00006b63 	.word	0x00006b63
  414e08:	6e6b6e75 	.word	0x6e6b6e75
  414e0c:	206e776f 	.word	0x206e776f
  414e10:	706d6f63 	.word	0x706d6f63
  414e14:	73736572 	.word	0x73736572
  414e18:	206e6f69 	.word	0x206e6f69
  414e1c:	6874656d 	.word	0x6874656d
  414e20:	0000646f 	.word	0x0000646f
  414e24:	61766e69 	.word	0x61766e69
  414e28:	2064696c 	.word	0x2064696c
  414e2c:	646e6977 	.word	0x646e6977
  414e30:	7320776f 	.word	0x7320776f
  414e34:	00657a69 	.word	0x00657a69
  414e38:	6e6b6e75 	.word	0x6e6b6e75
  414e3c:	206e776f 	.word	0x206e776f
  414e40:	64616568 	.word	0x64616568
  414e44:	66207265 	.word	0x66207265
  414e48:	7367616c 	.word	0x7367616c
  414e4c:	74657320 	.word	0x74657320
  414e50:	00000000 	.word	0x00000000
  414e54:	64616568 	.word	0x64616568
  414e58:	63207265 	.word	0x63207265
  414e5c:	6d206372 	.word	0x6d206372
  414e60:	616d7369 	.word	0x616d7369
  414e64:	00686374 	.word	0x00686374
  414e68:	61766e69 	.word	0x61766e69
  414e6c:	2064696c 	.word	0x2064696c
  414e70:	636f6c62 	.word	0x636f6c62
  414e74:	7974206b 	.word	0x7974206b
  414e78:	00006570 	.word	0x00006570
  414e7c:	61766e69 	.word	0x61766e69
  414e80:	2064696c 	.word	0x2064696c
  414e84:	726f7473 	.word	0x726f7473
  414e88:	62206465 	.word	0x62206465
  414e8c:	6b636f6c 	.word	0x6b636f6c
  414e90:	6e656c20 	.word	0x6e656c20
  414e94:	73687467 	.word	0x73687467
  414e98:	00000000 	.word	0x00000000
  414e9c:	206f6f74 	.word	0x206f6f74
  414ea0:	796e616d 	.word	0x796e616d
  414ea4:	6e656c20 	.word	0x6e656c20
  414ea8:	20687467 	.word	0x20687467
  414eac:	6420726f 	.word	0x6420726f
  414eb0:	61747369 	.word	0x61747369
  414eb4:	2065636e 	.word	0x2065636e
  414eb8:	626d7973 	.word	0x626d7973
  414ebc:	00736c6f 	.word	0x00736c6f
  414ec0:	61766e69 	.word	0x61766e69
  414ec4:	2064696c 	.word	0x2064696c
  414ec8:	65646f63 	.word	0x65646f63
  414ecc:	6e656c20 	.word	0x6e656c20
  414ed0:	73687467 	.word	0x73687467
  414ed4:	74657320 	.word	0x74657320
  414ed8:	00000000 	.word	0x00000000
  414edc:	61766e69 	.word	0x61766e69
  414ee0:	2064696c 	.word	0x2064696c
  414ee4:	20746962 	.word	0x20746962
  414ee8:	676e656c 	.word	0x676e656c
  414eec:	72206874 	.word	0x72206874
  414ef0:	61657065 	.word	0x61657065
  414ef4:	00000074 	.word	0x00000074
  414ef8:	61766e69 	.word	0x61766e69
  414efc:	2064696c 	.word	0x2064696c
  414f00:	65646f63 	.word	0x65646f63
  414f04:	202d2d20 	.word	0x202d2d20
  414f08:	7373696d 	.word	0x7373696d
  414f0c:	20676e69 	.word	0x20676e69
  414f10:	2d646e65 	.word	0x2d646e65
  414f14:	622d666f 	.word	0x622d666f
  414f18:	6b636f6c 	.word	0x6b636f6c
  414f1c:	00000000 	.word	0x00000000
  414f20:	61766e69 	.word	0x61766e69
  414f24:	2064696c 	.word	0x2064696c
  414f28:	6574696c 	.word	0x6574696c
  414f2c:	2f6c6172 	.word	0x2f6c6172
  414f30:	676e656c 	.word	0x676e656c
  414f34:	20736874 	.word	0x20736874
  414f38:	00746573 	.word	0x00746573
  414f3c:	61766e69 	.word	0x61766e69
  414f40:	2064696c 	.word	0x2064696c
  414f44:	74736964 	.word	0x74736964
  414f48:	65636e61 	.word	0x65636e61
  414f4c:	65732073 	.word	0x65732073
  414f50:	00000074 	.word	0x00000074
  414f54:	61766e69 	.word	0x61766e69
  414f58:	2064696c 	.word	0x2064696c
  414f5c:	6574696c 	.word	0x6574696c
  414f60:	2f6c6172 	.word	0x2f6c6172
  414f64:	676e656c 	.word	0x676e656c
  414f68:	63206874 	.word	0x63206874
  414f6c:	0065646f 	.word	0x0065646f
  414f70:	61766e69 	.word	0x61766e69
  414f74:	2064696c 	.word	0x2064696c
  414f78:	74736964 	.word	0x74736964
  414f7c:	65636e61 	.word	0x65636e61
  414f80:	646f6320 	.word	0x646f6320
  414f84:	00000065 	.word	0x00000065
  414f88:	61766e69 	.word	0x61766e69
  414f8c:	2064696c 	.word	0x2064696c
  414f90:	74736964 	.word	0x74736964
  414f94:	65636e61 	.word	0x65636e61
  414f98:	6f6f7420 	.word	0x6f6f7420
  414f9c:	72616620 	.word	0x72616620
  414fa0:	63616220 	.word	0x63616220
  414fa4:	0000006b 	.word	0x0000006b
  414fa8:	6f636e69 	.word	0x6f636e69
  414fac:	63657272 	.word	0x63657272
  414fb0:	61642074 	.word	0x61642074
  414fb4:	63206174 	.word	0x63206174
  414fb8:	6b636568 	.word	0x6b636568
  414fbc:	00000000 	.word	0x00000000
  414fc0:	6f636e69 	.word	0x6f636e69
  414fc4:	63657272 	.word	0x63657272
  414fc8:	656c2074 	.word	0x656c2074
  414fcc:	6874676e 	.word	0x6874676e
  414fd0:	65686320 	.word	0x65686320
  414fd4:	6b63      	.short	0x6b63
	...

Disassembly of section .text.deflateInit2_%83:

00414fd8 <deflateInit2_>:
{
  414fd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

00414fdc <.LCFI33>:
  414fdc:	461e      	mov	r6, r3
  414fde:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  414fe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30

00414fe2 <.LVL569>:
    if (version == Z_NULL || version[0] != my_version[0] ||
  414fe2:	2b00      	cmp	r3, #0
  414fe4:	f000 80c5 	beq.w	415172 <.LVL594>
  414fe8:	4605      	mov	r5, r0
  414fea:	4688      	mov	r8, r1
  414fec:	4692      	mov	sl, r2
  414fee:	781b      	ldrb	r3, [r3, #0]
  414ff0:	2b31      	cmp	r3, #49	; 0x31
  414ff2:	f040 80c2 	bne.w	41517a <.LVL596>
  414ff6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  414ff8:	2b38      	cmp	r3, #56	; 0x38
  414ffa:	f040 80be 	bne.w	41517a <.LVL596>
    if (strm == Z_NULL) return Z_STREAM_ERROR;
  414ffe:	2800      	cmp	r0, #0
  415000:	f000 80bf 	beq.w	415182 <.LVL598>
    strm->msg = Z_NULL;
  415004:	2300      	movs	r3, #0
  415006:	6183      	str	r3, [r0, #24]
    if (strm->zalloc == (alloc_func)0) {
  415008:	6a03      	ldr	r3, [r0, #32]
  41500a:	2b00      	cmp	r3, #0
  41500c:	f000 8095 	beq.w	41513a <.LVL587>
    if (strm->zfree == (free_func)0)
  415010:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  415012:	2b00      	cmp	r3, #0
  415014:	f000 8096 	beq.w	415144 <.LVL587+0xa>
    if (level == Z_DEFAULT_COMPRESSION) level = 6;
  415018:	f1b8 3fff 	cmp.w	r8, #4294967295
  41501c:	bf08      	it	eq
  41501e:	f04f 0806 	moveq.w	r8, #6

00415022 <.LVL570>:
    if (windowBits < 0) { /* suppress zlib wrapper */
  415022:	2e00      	cmp	r6, #0
  415024:	f2c0 8091 	blt.w	41514a <.LVL588>
    else if (windowBits > 15) {
  415028:	2e0f      	cmp	r6, #15
  41502a:	f340 8092 	ble.w	415152 <.LVL590>

0041502e <.LVL571>:
        windowBits -= 16;
  41502e:	3e10      	subs	r6, #16
        wrap = 2;       /* write gzip wrapper instead */
  415030:	f04f 0902 	mov.w	r9, #2

00415034 <.LVL573>:
    if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method != Z_DEFLATED ||
  415034:	1e7b      	subs	r3, r7, #1
  415036:	2b08      	cmp	r3, #8
  415038:	f200 80a7 	bhi.w	41518a <.LVL600>
        windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
  41503c:	f1a6 0308 	sub.w	r3, r6, #8
    if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method != Z_DEFLATED ||
  415040:	2b07      	cmp	r3, #7
  415042:	f200 80a6 	bhi.w	415192 <.LVL602>
  415046:	f1ba 0f08 	cmp.w	sl, #8
  41504a:	f040 80a2 	bne.w	415192 <.LVL602>
        strategy < 0 || strategy > Z_FIXED) {
  41504e:	f1b8 0f09 	cmp.w	r8, #9
  415052:	f200 80a2 	bhi.w	41519a <.LVL604>
  415056:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  415058:	2b04      	cmp	r3, #4
  41505a:	f200 809e 	bhi.w	41519a <.LVL604>
    if (windowBits == 8) windowBits = 9;  /* until 256-byte window bug fixed */
  41505e:	2e08      	cmp	r6, #8
  415060:	bf08      	it	eq
  415062:	2609      	moveq	r6, #9
    s = (deflate_state *) ZALLOC(strm, 1, sizeof(deflate_state));
  415064:	6a2b      	ldr	r3, [r5, #32]
  415066:	f241 62c4 	movw	r2, #5828	; 0x16c4

0041506a <.LVL575>:
  41506a:	2101      	movs	r1, #1
  41506c:	6aa8      	ldr	r0, [r5, #40]	; 0x28

0041506e <.LVL576>:
  41506e:	4798      	blx	r3

00415070 <.LVL577>:
    if (s == Z_NULL) return Z_MEM_ERROR;
  415070:	4604      	mov	r4, r0
  415072:	2800      	cmp	r0, #0
  415074:	f000 8095 	beq.w	4151a2 <.LVL606>
    strm->state = (struct internal_state FAR *)s;
  415078:	61e8      	str	r0, [r5, #28]
    s->strm = strm;
  41507a:	6005      	str	r5, [r0, #0]
    s->wrap = wrap;
  41507c:	f8c0 9018 	str.w	r9, [r0, #24]
    s->gzhead = Z_NULL;
  415080:	f04f 0b00 	mov.w	fp, #0
  415084:	f8c0 b01c 	str.w	fp, [r0, #28]
    s->w_bits = windowBits;
  415088:	6306      	str	r6, [r0, #48]	; 0x30
    s->w_size = 1 << s->w_bits;
  41508a:	f04f 0901 	mov.w	r9, #1

0041508e <.LVL578>:
  41508e:	fa09 f106 	lsl.w	r1, r9, r6
  415092:	62c1      	str	r1, [r0, #44]	; 0x2c
    s->w_mask = s->w_size - 1;
  415094:	1e4b      	subs	r3, r1, #1
  415096:	6343      	str	r3, [r0, #52]	; 0x34
    s->hash_bits = memLevel + 7;
  415098:	1dfb      	adds	r3, r7, #7
  41509a:	6503      	str	r3, [r0, #80]	; 0x50
    s->hash_size = 1 << s->hash_bits;
  41509c:	fa09 f303 	lsl.w	r3, r9, r3
  4150a0:	64c3      	str	r3, [r0, #76]	; 0x4c
    s->hash_mask = s->hash_size - 1;
  4150a2:	3b01      	subs	r3, #1
  4150a4:	6543      	str	r3, [r0, #84]	; 0x54
    s->hash_shift =  ((s->hash_bits+MIN_MATCH-1)/MIN_MATCH);
  4150a6:	f107 0309 	add.w	r3, r7, #9
  4150aa:	4a40      	ldr	r2, [pc, #256]	; (4151ac <.LVL608+0x2>)
  4150ac:	fba2 2303 	umull	r2, r3, r2, r3
  4150b0:	fa23 f309 	lsr.w	r3, r3, r9
  4150b4:	6583      	str	r3, [r0, #88]	; 0x58
    s->window = (Bytef *) ZALLOC(strm, s->w_size, 2*sizeof(Byte));
  4150b6:	6a2b      	ldr	r3, [r5, #32]
  4150b8:	2202      	movs	r2, #2
  4150ba:	6aa8      	ldr	r0, [r5, #40]	; 0x28

004150bc <.LVL579>:
  4150bc:	4798      	blx	r3

004150be <.LVL580>:
  4150be:	63a0      	str	r0, [r4, #56]	; 0x38
    s->prev   = (Posf *)  ZALLOC(strm, s->w_size, sizeof(Pos));
  4150c0:	6a2b      	ldr	r3, [r5, #32]
  4150c2:	2202      	movs	r2, #2
  4150c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  4150c6:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  4150c8:	4798      	blx	r3

004150ca <.LVL581>:
  4150ca:	6420      	str	r0, [r4, #64]	; 0x40
    s->head   = (Posf *)  ZALLOC(strm, s->hash_size, sizeof(Pos));
  4150cc:	6a2b      	ldr	r3, [r5, #32]
  4150ce:	2202      	movs	r2, #2
  4150d0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  4150d2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  4150d4:	4798      	blx	r3

004150d6 <.LVL582>:
  4150d6:	6460      	str	r0, [r4, #68]	; 0x44
    s->high_water = 0;      /* nothing written to s->window yet */
  4150d8:	f504 53b6 	add.w	r3, r4, #5824	; 0x16c0
  4150dc:	f8c3 b000 	str.w	fp, [r3]
    s->lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */
  4150e0:	3706      	adds	r7, #6
  4150e2:	fa09 f107 	lsl.w	r1, r9, r7
  4150e6:	f241 669c 	movw	r6, #5788	; 0x169c

004150ea <.LVL583>:
  4150ea:	51a1      	str	r1, [r4, r6]
    overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
  4150ec:	6a2b      	ldr	r3, [r5, #32]
  4150ee:	2204      	movs	r2, #4
  4150f0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  4150f2:	4798      	blx	r3

004150f4 <.LVL584>:
    s->pending_buf = (uchf *) overlay;
  4150f4:	60a0      	str	r0, [r4, #8]
    s->pending_buf_size = (ulg)s->lit_bufsize * (sizeof(ush)+2L);
  4150f6:	59a3      	ldr	r3, [r4, r6]
  4150f8:	009a      	lsls	r2, r3, #2
  4150fa:	60e2      	str	r2, [r4, #12]
    if (s->window == Z_NULL || s->prev == Z_NULL || s->head == Z_NULL ||
  4150fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4150fe:	b35a      	cbz	r2, 415158 <.LVL591>
  415100:	6c22      	ldr	r2, [r4, #64]	; 0x40
  415102:	b34a      	cbz	r2, 415158 <.LVL591>
  415104:	6c62      	ldr	r2, [r4, #68]	; 0x44
  415106:	b33a      	cbz	r2, 415158 <.LVL591>
  415108:	b330      	cbz	r0, 415158 <.LVL591>
    s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  41510a:	f023 0201 	bic.w	r2, r3, #1
  41510e:	4402      	add	r2, r0
  415110:	f241 61a4 	movw	r1, #5796	; 0x16a4
  415114:	5062      	str	r2, [r4, r1]
    s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  415116:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  41511a:	4418      	add	r0, r3

0041511c <.LVL585>:
  41511c:	f241 6398 	movw	r3, #5784	; 0x1698
  415120:	50e0      	str	r0, [r4, r3]
    s->level = level;
  415122:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
    s->strategy = strategy;
  415126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  415128:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    s->method = (Byte)method;
  41512c:	f884 a024 	strb.w	sl, [r4, #36]	; 0x24
    return deflateReset(strm);
  415130:	4628      	mov	r0, r5
  415132:	f005 ff2f 	bl	41af94 <.LFE0>

00415136 <.LVL586>:
  415136:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0041513a <.LVL587>:
        strm->zalloc = zcalloc;
  41513a:	4b1d      	ldr	r3, [pc, #116]	; (4151b0 <.LVL608+0x6>)
  41513c:	6203      	str	r3, [r0, #32]
        strm->opaque = (voidpf)0;
  41513e:	2300      	movs	r3, #0
  415140:	6283      	str	r3, [r0, #40]	; 0x28
  415142:	e765      	b.n	415010 <.LVL569+0x2e>
        strm->zfree = zcfree;
  415144:	4b1b      	ldr	r3, [pc, #108]	; (4151b4 <.LVL608+0xa>)
  415146:	626b      	str	r3, [r5, #36]	; 0x24
  415148:	e766      	b.n	415018 <.LVL569+0x36>

0041514a <.LVL588>:
        windowBits = -windowBits;
  41514a:	4276      	negs	r6, r6
        wrap = 0;
  41514c:	f04f 0900 	mov.w	r9, #0
  415150:	e770      	b.n	415034 <.LVL573>

00415152 <.LVL590>:
    int wrap = 1;
  415152:	f04f 0901 	mov.w	r9, #1
  415156:	e76d      	b.n	415034 <.LVL573>

00415158 <.LVL591>:
        s->status = FINISH_STATE;
  415158:	f240 239a 	movw	r3, #666	; 0x29a
  41515c:	6063      	str	r3, [r4, #4]
        strm->msg = (char*)ERR_MSG(Z_MEM_ERROR);
  41515e:	4b16      	ldr	r3, [pc, #88]	; (4151b8 <.LVL608+0xe>)
  415160:	699b      	ldr	r3, [r3, #24]
  415162:	61ab      	str	r3, [r5, #24]
        deflateEnd (strm);
  415164:	4628      	mov	r0, r5

00415166 <.LVL592>:
  415166:	f004 fd31 	bl	419bcc <.LFE165>

0041516a <.LVL593>:
        return Z_MEM_ERROR;
  41516a:	f06f 0003 	mvn.w	r0, #3
  41516e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00415172 <.LVL594>:
        return Z_VERSION_ERROR;
  415172:	f06f 0005 	mvn.w	r0, #5

00415176 <.LVL595>:
  415176:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0041517a <.LVL596>:
  41517a:	f06f 0005 	mvn.w	r0, #5

0041517e <.LVL597>:
  41517e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00415182 <.LVL598>:
    if (strm == Z_NULL) return Z_STREAM_ERROR;
  415182:	f06f 0001 	mvn.w	r0, #1

00415186 <.LVL599>:
  415186:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0041518a <.LVL600>:
        return Z_STREAM_ERROR;
  41518a:	f06f 0001 	mvn.w	r0, #1

0041518e <.LVL601>:
  41518e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00415192 <.LVL602>:
  415192:	f06f 0001 	mvn.w	r0, #1

00415196 <.LVL603>:
  415196:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0041519a <.LVL604>:
  41519a:	f06f 0001 	mvn.w	r0, #1

0041519e <.LVL605>:
  41519e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

004151a2 <.LVL606>:
    if (s == Z_NULL) return Z_MEM_ERROR;
  4151a2:	f06f 0003 	mvn.w	r0, #3

004151a6 <.LVL607>:
}
  4151a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

004151aa <.LVL608>:
  4151aa:	bf00      	nop
  4151ac:	aaaaaaab 	.word	0xaaaaaaab
  4151b0:	0041dbeb 	.word	0x0041dbeb
  4151b4:	0041dcfb 	.word	0x0041dcfb
  4151b8:	0041d328 	.word	0x0041d328

Disassembly of section .text.wc_RsaFunctionSync%84:

004151bc <wc_RsaFunctionSync>:
{
  4151bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

004151c0 <.LCFI19>:
  4151c0:	f2ad 6d7c 	subw	sp, sp, #1660	; 0x67c

004151c4 <.LCFI20>:
  4151c4:	4604      	mov	r4, r0
  4151c6:	460d      	mov	r5, r1
  4151c8:	4616      	mov	r6, r2
  4151ca:	461f      	mov	r7, r3

004151cc <.LVL89>:
    if (mp_init(&tmp) != MP_OKAY)
  4151cc:	f50d 608a 	add.w	r0, sp, #1104	; 0x450

004151d0 <.LVL90>:
  4151d0:	f008 fc8e 	bl	41daf0 <.LFE202>

004151d4 <.LVL91>:
  4151d4:	2800      	cmp	r0, #0
  4151d6:	f040 80db 	bne.w	415390 <.LVL141>
    if (mp_read_unsigned_bin(&tmp, (byte*)in, inLen) != MP_OKAY)
  4151da:	462a      	mov	r2, r5
  4151dc:	4621      	mov	r1, r4
  4151de:	f50d 608a 	add.w	r0, sp, #1104	; 0x450
  4151e2:	f008 fd53 	bl	41dc8c <.LFE72>

004151e6 <.LVL92>:
  4151e6:	2800      	cmp	r0, #0
  4151e8:	f040 80c1 	bne.w	41536e <.LVL134>
    switch(type) {
  4151ec:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
  4151f0:	2b03      	cmp	r3, #3
  4151f2:	f200 80c7 	bhi.w	415384 <.LVL137>
  4151f6:	e8df f003 	tbb	[pc, r3]
  4151fa:	8d8d      	.short	0x8d8d
  4151fc:	0202      	.short	0x0202

004151fe <.LBB19>:
        if (mp_init(&tmpa) != MP_OKAY)
  4151fe:	4668      	mov	r0, sp
  415200:	f008 fc76 	bl	41daf0 <.LFE202>

00415204 <.LVL93>:
  415204:	b110      	cbz	r0, 41520c <.LVL95>
            ERROR_OUT(MP_INIT_E);
  415206:	f06f 046d 	mvn.w	r4, #109	; 0x6d

0041520a <.LVL94>:
  41520a:	e0b2      	b.n	415372 <.L68>

0041520c <.LVL95>:
        if (mp_init(&tmpb) != MP_OKAY) {
  41520c:	a88a      	add	r0, sp, #552	; 0x228
  41520e:	f008 fc6f 	bl	41daf0 <.LFE202>

00415212 <.LVL96>:
  415212:	b128      	cbz	r0, 415220 <.LVL99>
            mp_clear(&tmpa);
  415214:	4668      	mov	r0, sp
  415216:	f008 fce2 	bl	41dbde <.LFE179>

0041521a <.LVL97>:
            ERROR_OUT(MP_INIT_E);
  41521a:	f06f 046d 	mvn.w	r4, #109	; 0x6d

0041521e <.LVL98>:
  41521e:	e0a8      	b.n	415372 <.L68>

00415220 <.LVL99>:
        r = mp_exptmod(&tmp, &key->dP, &key->p, &tmpa);
  415220:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
  415224:	f503 68cf 	add.w	r8, r3, #1656	; 0x678
  415228:	466b      	mov	r3, sp
  41522a:	4642      	mov	r2, r8
  41522c:	f8dd 169c 	ldr.w	r1, [sp, #1692]	; 0x69c
  415230:	f601 21c8 	addw	r1, r1, #2760	; 0xac8
  415234:	f50d 608a 	add.w	r0, sp, #1104	; 0x450
  415238:	f008 fda8 	bl	41dd8c <.LFE78>

0041523c <.LVL100>:
        ret = RET_ERR(ret, r, MP_EXPTMOD_E);
  41523c:	1c04      	adds	r4, r0, #0

0041523e <.LVL101>:
  41523e:	bf18      	it	ne
  415240:	2401      	movne	r4, #1
  415242:	4264      	negs	r4, r4
  415244:	f024 096f 	bic.w	r9, r4, #111	; 0x6f

00415248 <.LVL102>:
        r = mp_exptmod(&tmp, &key->dQ, &key->q, &tmpb);
  415248:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
  41524c:	f503 650a 	add.w	r5, r3, #2208	; 0x8a0

00415250 <.LVL103>:
  415250:	ab8a      	add	r3, sp, #552	; 0x228
  415252:	462a      	mov	r2, r5
  415254:	f8dd 169c 	ldr.w	r1, [sp, #1692]	; 0x69c
  415258:	f501 614f 	add.w	r1, r1, #3312	; 0xcf0
  41525c:	f50d 608a 	add.w	r0, sp, #1104	; 0x450

00415260 <.LVL104>:
  415260:	f008 fd94 	bl	41dd8c <.LFE78>

00415264 <.LVL105>:
        ret = RET_ERR(ret, r, MP_EXPTMOD_E);
  415264:	1c04      	adds	r4, r0, #0
  415266:	bf18      	it	ne
  415268:	2401      	movne	r4, #1
  41526a:	4264      	negs	r4, r4
  41526c:	f024 046f 	bic.w	r4, r4, #111	; 0x6f
  415270:	f1b9 0f00 	cmp.w	r9, #0
  415274:	bf18      	it	ne
  415276:	2400      	movne	r4, #0
  415278:	ea44 0409 	orr.w	r4, r4, r9

0041527c <.LVL106>:
        r = mp_sub(&tmpa, &tmpb, &tmp);
  41527c:	f50d 628a 	add.w	r2, sp, #1104	; 0x450
  415280:	a98a      	add	r1, sp, #552	; 0x228
  415282:	4668      	mov	r0, sp

00415284 <.LVL107>:
  415284:	f008 fcfd 	bl	41dc82 <.LFE71>

00415288 <.LVL108>:
        ret = RET_ERR(ret, r, MP_SUB_E);
  415288:	1c03      	adds	r3, r0, #0
  41528a:	bf18      	it	ne
  41528c:	2301      	movne	r3, #1
  41528e:	425b      	negs	r3, r3
  415290:	f023 0371 	bic.w	r3, r3, #113	; 0x71
  415294:	2c00      	cmp	r4, #0
  415296:	bf18      	it	ne
  415298:	2300      	movne	r3, #0
  41529a:	431c      	orrs	r4, r3
        r = mp_mulmod(&tmp, &key->u, &key->p, &tmp);
  41529c:	f50d 638a 	add.w	r3, sp, #1104	; 0x450
  4152a0:	4642      	mov	r2, r8
  4152a2:	f8dd 169c 	ldr.w	r1, [sp, #1692]	; 0x69c
  4152a6:	f601 7118 	addw	r1, r1, #3864	; 0xf18
  4152aa:	4618      	mov	r0, r3

004152ac <.LVL110>:
  4152ac:	f008 fd66 	bl	41dd7c <.LFE79>

004152b0 <.LVL111>:
        ret = RET_ERR(ret, r, MP_MULMOD_E);
  4152b0:	1c03      	adds	r3, r0, #0
  4152b2:	bf18      	it	ne
  4152b4:	2301      	movne	r3, #1
  4152b6:	425b      	negs	r3, r3
  4152b8:	f023 0374 	bic.w	r3, r3, #116	; 0x74
  4152bc:	2c00      	cmp	r4, #0
  4152be:	bf18      	it	ne
  4152c0:	2300      	movne	r3, #0
  4152c2:	431c      	orrs	r4, r3
        r = mp_mul(&tmp, &key->q, &tmp);
  4152c4:	f50d 628a 	add.w	r2, sp, #1104	; 0x450
  4152c8:	4629      	mov	r1, r5
  4152ca:	4610      	mov	r0, r2

004152cc <.LVL113>:
  4152cc:	f008 fce3 	bl	41dc96 <.LFE86>

004152d0 <.LVL114>:
        ret = RET_ERR(ret, r, MP_MUL_E);
  4152d0:	1c03      	adds	r3, r0, #0
  4152d2:	bf18      	it	ne
  4152d4:	2301      	movne	r3, #1
  4152d6:	425b      	negs	r3, r3
  4152d8:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  4152dc:	2c00      	cmp	r4, #0
  4152de:	bf18      	it	ne
  4152e0:	2300      	movne	r3, #0
  4152e2:	431c      	orrs	r4, r3
        r = mp_add(&tmp, &tmpb, &tmp);
  4152e4:	f50d 628a 	add.w	r2, sp, #1104	; 0x450
  4152e8:	a98a      	add	r1, sp, #552	; 0x228
  4152ea:	4610      	mov	r0, r2

004152ec <.LVL116>:
  4152ec:	f008 fcc4 	bl	41dc78 <.LFE231>

004152f0 <.LVL117>:
        ret = RET_ERR(ret, r, MP_ADD_E);
  4152f0:	1c03      	adds	r3, r0, #0
  4152f2:	bf18      	it	ne
  4152f4:	2301      	movne	r3, #1
  4152f6:	425b      	negs	r3, r3
  4152f8:	f023 0372 	bic.w	r3, r3, #114	; 0x72
  4152fc:	2c00      	cmp	r4, #0
  4152fe:	bf18      	it	ne
  415300:	2300      	movne	r3, #0
  415302:	431c      	orrs	r4, r3
        mp_clear(&tmpa);
  415304:	4668      	mov	r0, sp

00415306 <.LVL119>:
  415306:	f008 fc6a 	bl	41dbde <.LFE179>

0041530a <.LVL120>:
        mp_clear(&tmpb);
  41530a:	a88a      	add	r0, sp, #552	; 0x228
  41530c:	f008 fc67 	bl	41dbde <.LFE179>

00415310 <.LVL121>:
        if (ret != 0) {
  415310:	bb7c      	cbnz	r4, 415372 <.L68>
  415312:	e009      	b.n	415328 <.LVL124>

00415314 <.LBE19>:
        if (mp_exptmod(&tmp, &key->e, &key->n, &tmp) != MP_OKAY)
  415314:	f50d 638a 	add.w	r3, sp, #1104	; 0x450
  415318:	f8dd 269c 	ldr.w	r2, [sp, #1692]	; 0x69c
  41531c:	f502 710a 	add.w	r1, r2, #552	; 0x228
  415320:	4618      	mov	r0, r3
  415322:	f008 fd33 	bl	41dd8c <.LFE78>

00415326 <.LVL123>:
  415326:	bb80      	cbnz	r0, 41538a <.LCFI22>

00415328 <.LVL124>:
    keyLen = wc_RsaEncryptSize(key);
  415328:	f8dd 069c 	ldr.w	r0, [sp, #1692]	; 0x69c
  41532c:	f008 fbd8 	bl	41dae0 <wc_RsaEncryptSize>

00415330 <.LVL125>:
  415330:	4604      	mov	r4, r0

00415332 <.LVL126>:
    if (keyLen > *outLen) {
  415332:	683b      	ldr	r3, [r7, #0]
  415334:	4298      	cmp	r0, r3
  415336:	d902      	bls.n	41533e <.LVL126+0xc>
        ERROR_OUT(RSA_BUFFER_E);
  415338:	f06f 0482 	mvn.w	r4, #130	; 0x82
  41533c:	e019      	b.n	415372 <.L68>
    len = mp_unsigned_bin_size(&tmp);
  41533e:	f50d 608a 	add.w	r0, sp, #1104	; 0x450

00415342 <.LVL127>:
  415342:	f008 fd13 	bl	41dd6c <.LFE82>

00415346 <.LVL128>:
    while (len < keyLen) {
  415346:	4284      	cmp	r4, r0
  415348:	d906      	bls.n	415358 <.LVL131>
  41534a:	1a23      	subs	r3, r4, r0
  41534c:	4433      	add	r3, r6
        *out++ = 0x00;
  41534e:	2200      	movs	r2, #0
  415350:	f806 2b01 	strb.w	r2, [r6], #1
    while (len < keyLen) {
  415354:	429e      	cmp	r6, r3
  415356:	d1fb      	bne.n	415350 <.LVL128+0xa>

00415358 <.LVL131>:
    *outLen = keyLen;
  415358:	603c      	str	r4, [r7, #0]
    if (mp_to_unsigned_bin(&tmp, out) != MP_OKAY)
  41535a:	4631      	mov	r1, r6
  41535c:	f50d 608a 	add.w	r0, sp, #1104	; 0x450
  415360:	f008 fc9e 	bl	41dca0 <.LFE73>

00415364 <.LVL132>:
  415364:	1e04      	subs	r4, r0, #0

00415366 <.LVL133>:
        ERROR_OUT(MP_TO_E);
  415366:	bf18      	it	ne
  415368:	f06f 0470 	mvnne.w	r4, #112	; 0x70
  41536c:	e001      	b.n	415372 <.L68>

0041536e <.LVL134>:
        ERROR_OUT(MP_READ_E);
  41536e:	f06f 046e 	mvn.w	r4, #110	; 0x6e

00415372 <.L68>:
    mp_clear(&tmp);
  415372:	f50d 608a 	add.w	r0, sp, #1104	; 0x450
  415376:	f008 fc32 	bl	41dbde <.LFE179>

0041537a <.LVL136>:
}
  41537a:	4620      	mov	r0, r4
  41537c:	f20d 6d7c 	addw	sp, sp, #1660	; 0x67c

00415380 <.LCFI21>:
  415380:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00415384 <.LVL137>:
        ERROR_OUT(RSA_WRONG_TYPE_E);
  415384:	f06f 0481 	mvn.w	r4, #129	; 0x81

00415388 <.LVL138>:
  415388:	e7f3      	b.n	415372 <.L68>

0041538a <.LCFI22>:
            ERROR_OUT(MP_EXPTMOD_E);
  41538a:	f06f 046f 	mvn.w	r4, #111	; 0x6f

0041538e <.LVL140>:
  41538e:	e7f0      	b.n	415372 <.L68>

00415390 <.LVL141>:
        return MP_INIT_E;
  415390:	f06f 046d 	mvn.w	r4, #109	; 0x6d

00415394 <.LVL142>:
  415394:	e7f1      	b.n	41537a <.LVL136>

Disassembly of section .text._free_r%85:

00415398 <_free_r>:
  415398:	2900      	cmp	r1, #0
  41539a:	d044      	beq.n	415426 <.LVL43>
  41539c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

004153a0 <.LCFI1>:
  4153a0:	460d      	mov	r5, r1
  4153a2:	4680      	mov	r8, r0
  4153a4:	f003 fe26 	bl	418ff4 <.LFE180>

004153a8 <.LVL24>:
  4153a8:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4153ac:	4969      	ldr	r1, [pc, #420]	; (415554 <.LVL82+0xa>)
  4153ae:	f027 0301 	bic.w	r3, r7, #1
  4153b2:	f1a5 0408 	sub.w	r4, r5, #8

004153b6 <.LVL25>:
  4153b6:	18e2      	adds	r2, r4, r3

004153b8 <.LVL26>:
  4153b8:	688e      	ldr	r6, [r1, #8]
  4153ba:	6850      	ldr	r0, [r2, #4]
  4153bc:	42b2      	cmp	r2, r6
  4153be:	f020 0003 	bic.w	r0, r0, #3

004153c2 <.LVL27>:
  4153c2:	d05e      	beq.n	415482 <.LVL56>
  4153c4:	07fe      	lsls	r6, r7, #31
  4153c6:	6050      	str	r0, [r2, #4]

004153c8 <.LVL28>:
  4153c8:	d40b      	bmi.n	4153e2 <.LVL34>
  4153ca:	f855 7c08 	ldr.w	r7, [r5, #-8]

004153ce <.LVL29>:
  4153ce:	1be4      	subs	r4, r4, r7
  4153d0:	f101 0e08 	add.w	lr, r1, #8
  4153d4:	68a5      	ldr	r5, [r4, #8]

004153d6 <.LVL31>:
  4153d6:	4575      	cmp	r5, lr
  4153d8:	443b      	add	r3, r7
  4153da:	d06d      	beq.n	4154b8 <.LVL70>
  4153dc:	68e7      	ldr	r7, [r4, #12]

004153de <.LVL33>:
  4153de:	60ef      	str	r7, [r5, #12]
  4153e0:	60bd      	str	r5, [r7, #8]

004153e2 <.LVL34>:
  4153e2:	1815      	adds	r5, r2, r0
  4153e4:	686d      	ldr	r5, [r5, #4]
  4153e6:	07ed      	lsls	r5, r5, #31
  4153e8:	d53e      	bpl.n	415468 <.LCFI5>
  4153ea:	f043 0201 	orr.w	r2, r3, #1

004153ee <.LVL35>:
  4153ee:	6062      	str	r2, [r4, #4]
  4153f0:	50e3      	str	r3, [r4, r3]

004153f2 <.LVL36>:
  4153f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4153f6:	d217      	bcs.n	415428 <.LCFI3>
  4153f8:	08db      	lsrs	r3, r3, #3

004153fa <.LVL37>:
  4153fa:	1c58      	adds	r0, r3, #1
  4153fc:	109a      	asrs	r2, r3, #2
  4153fe:	684d      	ldr	r5, [r1, #4]
  415400:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  415404:	60a7      	str	r7, [r4, #8]
  415406:	2301      	movs	r3, #1

00415408 <.LVL38>:
  415408:	4093      	lsls	r3, r2
  41540a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3

0041540e <.LVL39>:
  41540e:	432b      	orrs	r3, r5
  415410:	3a08      	subs	r2, #8

00415412 <.LVL40>:
  415412:	60e2      	str	r2, [r4, #12]
  415414:	604b      	str	r3, [r1, #4]
  415416:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  41541a:	60fc      	str	r4, [r7, #12]

0041541c <.LVL41>:
  41541c:	4640      	mov	r0, r8
  41541e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

00415422 <.LCFI2>:
  415422:	f005 bd77 	b.w	41af14 <.LFE269>

00415426 <.LVL43>:
  415426:	4770      	bx	lr

00415428 <.LCFI3>:
  415428:	0a5a      	lsrs	r2, r3, #9
  41542a:	2a04      	cmp	r2, #4
  41542c:	d852      	bhi.n	4154d4 <.LVL74>
  41542e:	099a      	lsrs	r2, r3, #6
  415430:	f102 0739 	add.w	r7, r2, #57	; 0x39
  415434:	00ff      	lsls	r7, r7, #3
  415436:	f102 0538 	add.w	r5, r2, #56	; 0x38

0041543a <.LVL45>:
  41543a:	19c8      	adds	r0, r1, r7
  41543c:	59ca      	ldr	r2, [r1, r7]
  41543e:	3808      	subs	r0, #8

00415440 <.LVL46>:
  415440:	4290      	cmp	r0, r2
  415442:	d04f      	beq.n	4154e4 <.LVL75>
  415444:	6851      	ldr	r1, [r2, #4]
  415446:	f021 0103 	bic.w	r1, r1, #3
  41544a:	428b      	cmp	r3, r1
  41544c:	d232      	bcs.n	4154b4 <.LVL68>
  41544e:	6892      	ldr	r2, [r2, #8]
  415450:	4290      	cmp	r0, r2
  415452:	d1f7      	bne.n	415444 <.LVL46+0x4>

00415454 <.LVL48>:
  415454:	68c3      	ldr	r3, [r0, #12]

00415456 <.LVL49>:
  415456:	60a0      	str	r0, [r4, #8]
  415458:	60e3      	str	r3, [r4, #12]
  41545a:	609c      	str	r4, [r3, #8]
  41545c:	60c4      	str	r4, [r0, #12]
  41545e:	4640      	mov	r0, r8

00415460 <.LVL50>:
  415460:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

00415464 <.LCFI4>:
  415464:	f005 bd56 	b.w	41af14 <.LFE269>

00415468 <.LCFI5>:
  415468:	6895      	ldr	r5, [r2, #8]
  41546a:	4f3b      	ldr	r7, [pc, #236]	; (415558 <.LVL82+0xe>)
  41546c:	42bd      	cmp	r5, r7
  41546e:	4403      	add	r3, r0
  415470:	d040      	beq.n	4154f4 <.LVL79>
  415472:	68d0      	ldr	r0, [r2, #12]

00415474 <.LVL54>:
  415474:	60e8      	str	r0, [r5, #12]
  415476:	f043 0201 	orr.w	r2, r3, #1

0041547a <.LVL55>:
  41547a:	6085      	str	r5, [r0, #8]
  41547c:	6062      	str	r2, [r4, #4]
  41547e:	50e3      	str	r3, [r4, r3]
  415480:	e7b7      	b.n	4153f2 <.LVL36>

00415482 <.LVL56>:
  415482:	07ff      	lsls	r7, r7, #31

00415484 <.LVL57>:
  415484:	4403      	add	r3, r0
  415486:	d407      	bmi.n	415498 <.LVL64>
  415488:	f855 2c08 	ldr.w	r2, [r5, #-8]

0041548c <.LVL59>:
  41548c:	1aa4      	subs	r4, r4, r2

0041548e <.LVL60>:
  41548e:	4413      	add	r3, r2
  415490:	68a0      	ldr	r0, [r4, #8]

00415492 <.LVL62>:
  415492:	68e2      	ldr	r2, [r4, #12]

00415494 <.LVL63>:
  415494:	60c2      	str	r2, [r0, #12]
  415496:	6090      	str	r0, [r2, #8]

00415498 <.LVL64>:
  415498:	4a30      	ldr	r2, [pc, #192]	; (41555c <.LVL82+0x12>)
  41549a:	6812      	ldr	r2, [r2, #0]
  41549c:	f043 0001 	orr.w	r0, r3, #1
  4154a0:	4293      	cmp	r3, r2
  4154a2:	6060      	str	r0, [r4, #4]

004154a4 <.LVL65>:
  4154a4:	608c      	str	r4, [r1, #8]
  4154a6:	d3b9      	bcc.n	41541c <.LVL41>
  4154a8:	4b2d      	ldr	r3, [pc, #180]	; (415560 <.LVL82+0x16>)

004154aa <.LVL66>:
  4154aa:	4640      	mov	r0, r8
  4154ac:	6819      	ldr	r1, [r3, #0]
  4154ae:	f004 fdef 	bl	41a090 <.LFE0>

004154b2 <.LVL67>:
  4154b2:	e7b3      	b.n	41541c <.LVL41>

004154b4 <.LVL68>:
  4154b4:	4610      	mov	r0, r2

004154b6 <.LVL69>:
  4154b6:	e7cd      	b.n	415454 <.LVL48>

004154b8 <.LVL70>:
  4154b8:	1811      	adds	r1, r2, r0
  4154ba:	6849      	ldr	r1, [r1, #4]
  4154bc:	07c9      	lsls	r1, r1, #31
  4154be:	d444      	bmi.n	41554a <.LVL82>
  4154c0:	6891      	ldr	r1, [r2, #8]
  4154c2:	68d2      	ldr	r2, [r2, #12]

004154c4 <.LVL71>:
  4154c4:	60ca      	str	r2, [r1, #12]
  4154c6:	4403      	add	r3, r0

004154c8 <.LVL72>:
  4154c8:	f043 0001 	orr.w	r0, r3, #1

004154cc <.LVL73>:
  4154cc:	6091      	str	r1, [r2, #8]
  4154ce:	6060      	str	r0, [r4, #4]
  4154d0:	50e3      	str	r3, [r4, r3]
  4154d2:	e7a3      	b.n	41541c <.LVL41>

004154d4 <.LVL74>:
  4154d4:	2a14      	cmp	r2, #20
  4154d6:	d816      	bhi.n	415506 <.LVL81>
  4154d8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4154dc:	00ff      	lsls	r7, r7, #3
  4154de:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4154e2:	e7aa      	b.n	41543a <.LVL45>

004154e4 <.LVL75>:
  4154e4:	10aa      	asrs	r2, r5, #2

004154e6 <.LVL76>:
  4154e6:	2301      	movs	r3, #1

004154e8 <.LVL77>:
  4154e8:	684d      	ldr	r5, [r1, #4]

004154ea <.LVL78>:
  4154ea:	4093      	lsls	r3, r2
  4154ec:	432b      	orrs	r3, r5
  4154ee:	604b      	str	r3, [r1, #4]
  4154f0:	4603      	mov	r3, r0
  4154f2:	e7b0      	b.n	415456 <.LVL49>

004154f4 <.LVL79>:
  4154f4:	f043 0201 	orr.w	r2, r3, #1

004154f8 <.LVL80>:
  4154f8:	614c      	str	r4, [r1, #20]
  4154fa:	610c      	str	r4, [r1, #16]
  4154fc:	60e5      	str	r5, [r4, #12]
  4154fe:	60a5      	str	r5, [r4, #8]
  415500:	6062      	str	r2, [r4, #4]
  415502:	50e3      	str	r3, [r4, r3]
  415504:	e78a      	b.n	41541c <.LVL41>

00415506 <.LVL81>:
  415506:	2a54      	cmp	r2, #84	; 0x54
  415508:	d806      	bhi.n	415518 <.LVL81+0x12>
  41550a:	0b1a      	lsrs	r2, r3, #12
  41550c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  415510:	00ff      	lsls	r7, r7, #3
  415512:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  415516:	e790      	b.n	41543a <.LVL45>
  415518:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  41551c:	d806      	bhi.n	41552c <.LVL81+0x26>
  41551e:	0bda      	lsrs	r2, r3, #15
  415520:	f102 0778 	add.w	r7, r2, #120	; 0x78
  415524:	00ff      	lsls	r7, r7, #3
  415526:	f102 0577 	add.w	r5, r2, #119	; 0x77
  41552a:	e786      	b.n	41543a <.LVL45>
  41552c:	f240 5054 	movw	r0, #1364	; 0x554
  415530:	4282      	cmp	r2, r0
  415532:	d806      	bhi.n	415542 <.LVL81+0x3c>
  415534:	0c9a      	lsrs	r2, r3, #18
  415536:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  41553a:	00ff      	lsls	r7, r7, #3
  41553c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  415540:	e77b      	b.n	41543a <.LVL45>
  415542:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  415546:	257e      	movs	r5, #126	; 0x7e
  415548:	e777      	b.n	41543a <.LVL45>

0041554a <.LVL82>:
  41554a:	f043 0101 	orr.w	r1, r3, #1
  41554e:	6061      	str	r1, [r4, #4]
  415550:	6013      	str	r3, [r2, #0]
  415552:	e763      	b.n	41541c <.LVL41>
  415554:	2040cc80 	.word	0x2040cc80
  415558:	2040cc88 	.word	0x2040cc88
  41555c:	2040d790 	.word	0x2040d790
  415560:	2040d788 	.word	0x2040d788

Disassembly of section .text.longest_match%86:

00415564 <longest_match>:
{
  415564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00415568 <.LCFI2>:
  415568:	b085      	sub	sp, #20

0041556a <.LCFI3>:
    unsigned chain_length = s->max_chain_length;/* max hash chain length */
  41556a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c

0041556c <.LVL2>:
    register Bytef *scan = s->window + s->strstart; /* current string */
  41556c:	6b85      	ldr	r5, [r0, #56]	; 0x38
  41556e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  415570:	18ac      	adds	r4, r5, r2
  415572:	9400      	str	r4, [sp, #0]

00415574 <.LVL3>:
    int best_len = s->prev_length;              /* best match length so far */
  415574:	f8d0 8078 	ldr.w	r8, [r0, #120]	; 0x78
  415578:	4644      	mov	r4, r8

0041557a <.LVL4>:
    int nice_match = s->nice_match;             /* stop if match long enough */
  41557a:	f8d0 6090 	ldr.w	r6, [r0, #144]	; 0x90
  41557e:	9601      	str	r6, [sp, #4]

00415580 <.LVL5>:
    IPos limit = s->strstart > (IPos)MAX_DIST(s) ?
  415580:	6ac6      	ldr	r6, [r0, #44]	; 0x2c

00415582 <.LVL6>:
  415582:	f5a6 7783 	sub.w	r7, r6, #262	; 0x106
        s->strstart - (IPos)MAX_DIST(s) : NIL;
  415586:	42ba      	cmp	r2, r7
  415588:	d920      	bls.n	4155cc <.LVL15>
  41558a:	f502 7783 	add.w	r7, r2, #262	; 0x106
  41558e:	eba7 0a06 	sub.w	sl, r7, r6

00415592 <.LVL7>:
    Posf *prev = s->prev;
  415592:	f8d0 e040 	ldr.w	lr, [r0, #64]	; 0x40

00415596 <.LVL8>:
    uInt wmask = s->w_mask;
  415596:	f8d0 c034 	ldr.w	ip, [r0, #52]	; 0x34

0041559a <.LVL9>:
    register Bytef *strend = s->window + s->strstart + MAX_MATCH;
  41559a:	f502 7281 	add.w	r2, r2, #258	; 0x102
  41559e:	18aa      	adds	r2, r5, r2
  4155a0:	9202      	str	r2, [sp, #8]

004155a2 <.LVL10>:
    register Byte scan_end1  = scan[best_len-1];
  4155a2:	9f00      	ldr	r7, [sp, #0]
  4155a4:	463a      	mov	r2, r7

004155a6 <.LVL11>:
  4155a6:	4442      	add	r2, r8
  4155a8:	f812 9c01 	ldrb.w	r9, [r2, #-1]

004155ac <.LVL12>:
    register Byte scan_end   = scan[best_len];
  4155ac:	f817 7008 	ldrb.w	r7, [r7, r8]

004155b0 <.LVL13>:
    if (s->prev_length >= s->good_match) {
  4155b0:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
  4155b4:	4590      	cmp	r8, r2
        chain_length >>= 2;
  4155b6:	bf28      	it	cs
  4155b8:	089b      	lsrcs	r3, r3, #2
    if ((uInt)nice_match > s->lookahead) nice_match = s->lookahead;
  4155ba:	6f46      	ldr	r6, [r0, #116]	; 0x74
  4155bc:	9a01      	ldr	r2, [sp, #4]
  4155be:	42b2      	cmp	r2, r6
  4155c0:	bf28      	it	cs
  4155c2:	4632      	movcs	r2, r6
  4155c4:	9201      	str	r2, [sp, #4]
  4155c6:	4656      	mov	r6, sl
  4155c8:	4683      	mov	fp, r0
  4155ca:	e022      	b.n	415612 <.LVL27+0x2>

004155cc <.LVL15>:
        s->strstart - (IPos)MAX_DIST(s) : NIL;
  4155cc:	f04f 0a00 	mov.w	sl, #0
  4155d0:	e7df      	b.n	415592 <.LVL7>

004155d2 <.LVL16>:
  4155d2:	9b03      	ldr	r3, [sp, #12]
  4155d4:	4683      	mov	fp, r0
                 scan < strend);
  4155d6:	f108 0801 	add.w	r8, r8, #1

004155da <.LVL17>:
        len = MAX_MATCH - (int)(strend - scan);
  4155da:	9a02      	ldr	r2, [sp, #8]
  4155dc:	eba2 0208 	sub.w	r2, r2, r8
  4155e0:	f5c2 7281 	rsb	r2, r2, #258	; 0x102

004155e4 <.LVL18>:
        if (len > best_len) {
  4155e4:	4294      	cmp	r4, r2
  4155e6:	da0b      	bge.n	415600 <.LVL23>
            s->match_start = cur_match;
  4155e8:	f8cb 1070 	str.w	r1, [fp, #112]	; 0x70

004155ec <.LVL19>:
            if (len >= nice_match) break;
  4155ec:	9801      	ldr	r0, [sp, #4]

004155ee <.LVL20>:
  4155ee:	4290      	cmp	r0, r2
  4155f0:	f340 808b 	ble.w	41570a <.LVL56>
            scan_end1  = scan[best_len-1];
  4155f4:	9800      	ldr	r0, [sp, #0]
  4155f6:	1884      	adds	r4, r0, r2
  4155f8:	f814 9c01 	ldrb.w	r9, [r4, #-1]
            scan_end   = scan[best_len];
  4155fc:	5c87      	ldrb	r7, [r0, r2]
        len = MAX_MATCH - (int)(strend - scan);
  4155fe:	4614      	mov	r4, r2

00415600 <.LVL23>:
    } while ((cur_match = prev[cur_match & wmask]) > limit
  415600:	ea01 010c 	and.w	r1, r1, ip

00415604 <.LVL24>:
  415604:	f83e 1011 	ldrh.w	r1, [lr, r1, lsl #1]

00415608 <.LVL25>:
             && --chain_length != 0);
  415608:	428e      	cmp	r6, r1
  41560a:	f080 8081 	bcs.w	415710 <.LVL57>

0041560e <.LVL26>:
  41560e:	3b01      	subs	r3, #1

00415610 <.LVL27>:
  415610:	d079      	beq.n	415706 <.LVL55>
        match = s->window + cur_match;
  415612:	186a      	adds	r2, r5, r1

00415614 <.LVL28>:
        if (match[best_len]   != scan_end  ||
  415614:	f812 8004 	ldrb.w	r8, [r2, r4]
  415618:	45b8      	cmp	r8, r7
  41561a:	d1f1      	bne.n	415600 <.LVL23>
            match[best_len-1] != scan_end1 ||
  41561c:	eb02 0804 	add.w	r8, r2, r4
        if (match[best_len]   != scan_end  ||
  415620:	f818 8c01 	ldrb.w	r8, [r8, #-1]
  415624:	45c8      	cmp	r8, r9
  415626:	d1eb      	bne.n	415600 <.LVL23>
            match[best_len-1] != scan_end1 ||
  415628:	f892 a000 	ldrb.w	sl, [r2]
  41562c:	9800      	ldr	r0, [sp, #0]
  41562e:	f890 8000 	ldrb.w	r8, [r0]
  415632:	45c2      	cmp	sl, r8
  415634:	d1e4      	bne.n	415600 <.LVL23>

00415636 <.LVL29>:
            *match            != *scan     ||
  415636:	f892 a001 	ldrb.w	sl, [r2, #1]
  41563a:	f890 8001 	ldrb.w	r8, [r0, #1]
  41563e:	45c2      	cmp	sl, r8
  415640:	d1de      	bne.n	415600 <.LVL23>
        scan += 2, match++;
  415642:	f100 0802 	add.w	r8, r0, #2

00415646 <.LVL30>:
  415646:	3202      	adds	r2, #2

00415648 <.LVL31>:
  415648:	9303      	str	r3, [sp, #12]
  41564a:	9b02      	ldr	r3, [sp, #8]

0041564c <.LVL32>:
  41564c:	4658      	mov	r0, fp

0041564e <.LVL33>:
                 scan < strend);
  41564e:	f898 b001 	ldrb.w	fp, [r8, #1]
  415652:	f892 a001 	ldrb.w	sl, [r2, #1]
  415656:	45d3      	cmp	fp, sl
  415658:	d1bb      	bne.n	4155d2 <.LVL16>

0041565a <.LVL34>:
        } while (*++scan == *++match && *++scan == *++match &&
  41565a:	f898 b002 	ldrb.w	fp, [r8, #2]
  41565e:	f892 a002 	ldrb.w	sl, [r2, #2]
  415662:	45d3      	cmp	fp, sl
  415664:	d131      	bne.n	4156ca <.LVL43>

00415666 <.LVL35>:
  415666:	f898 b003 	ldrb.w	fp, [r8, #3]
  41566a:	f892 a003 	ldrb.w	sl, [r2, #3]
  41566e:	45d3      	cmp	fp, sl
  415670:	d130      	bne.n	4156d4 <.LVL45>

00415672 <.LVL36>:
                 *++scan == *++match && *++scan == *++match &&
  415672:	f898 b004 	ldrb.w	fp, [r8, #4]
  415676:	f892 a004 	ldrb.w	sl, [r2, #4]
  41567a:	45d3      	cmp	fp, sl
  41567c:	d12f      	bne.n	4156de <.LVL47>

0041567e <.LVL37>:
  41567e:	f898 b005 	ldrb.w	fp, [r8, #5]
  415682:	f892 a005 	ldrb.w	sl, [r2, #5]
  415686:	45d3      	cmp	fp, sl
  415688:	d12e      	bne.n	4156e8 <.LVL49>

0041568a <.LVL38>:
                 *++scan == *++match && *++scan == *++match &&
  41568a:	f898 b006 	ldrb.w	fp, [r8, #6]
  41568e:	f892 a006 	ldrb.w	sl, [r2, #6]
  415692:	45d3      	cmp	fp, sl
  415694:	d12d      	bne.n	4156f2 <.LVL51>

00415696 <.LVL39>:
  415696:	f898 b007 	ldrb.w	fp, [r8, #7]
  41569a:	f892 a007 	ldrb.w	sl, [r2, #7]
  41569e:	45d3      	cmp	fp, sl
  4156a0:	d12c      	bne.n	4156fc <.LVL53>

004156a2 <.LVL40>:
                 *++scan == *++match && *++scan == *++match &&
  4156a2:	f818 af08 	ldrb.w	sl, [r8, #8]!

004156a6 <.LVL41>:
  4156a6:	f812 bf08 	ldrb.w	fp, [r2, #8]!

004156aa <.LVL42>:
  4156aa:	45da      	cmp	sl, fp
  4156ac:	bf14      	ite	ne
  4156ae:	f04f 0a00 	movne.w	sl, #0
  4156b2:	f04f 0a01 	moveq.w	sl, #1
  4156b6:	4543      	cmp	r3, r8
  4156b8:	bf98      	it	ls
  4156ba:	f04f 0a00 	movls.w	sl, #0
  4156be:	f1ba 0f00 	cmp.w	sl, #0
  4156c2:	d1c4      	bne.n	41564e <.LVL33>
  4156c4:	9b03      	ldr	r3, [sp, #12]
  4156c6:	4683      	mov	fp, r0
  4156c8:	e787      	b.n	4155da <.LVL17>

004156ca <.LVL43>:
  4156ca:	9b03      	ldr	r3, [sp, #12]
  4156cc:	4683      	mov	fp, r0
        } while (*++scan == *++match && *++scan == *++match &&
  4156ce:	f108 0802 	add.w	r8, r8, #2

004156d2 <.LVL44>:
  4156d2:	e782      	b.n	4155da <.LVL17>

004156d4 <.LVL45>:
  4156d4:	9b03      	ldr	r3, [sp, #12]
  4156d6:	4683      	mov	fp, r0
  4156d8:	f108 0803 	add.w	r8, r8, #3

004156dc <.LVL46>:
  4156dc:	e77d      	b.n	4155da <.LVL17>

004156de <.LVL47>:
  4156de:	9b03      	ldr	r3, [sp, #12]
  4156e0:	4683      	mov	fp, r0
                 *++scan == *++match && *++scan == *++match &&
  4156e2:	f108 0804 	add.w	r8, r8, #4

004156e6 <.LVL48>:
  4156e6:	e778      	b.n	4155da <.LVL17>

004156e8 <.LVL49>:
  4156e8:	9b03      	ldr	r3, [sp, #12]
  4156ea:	4683      	mov	fp, r0
  4156ec:	f108 0805 	add.w	r8, r8, #5

004156f0 <.LVL50>:
  4156f0:	e773      	b.n	4155da <.LVL17>

004156f2 <.LVL51>:
  4156f2:	9b03      	ldr	r3, [sp, #12]
  4156f4:	4683      	mov	fp, r0
                 *++scan == *++match && *++scan == *++match &&
  4156f6:	f108 0806 	add.w	r8, r8, #6

004156fa <.LVL52>:
  4156fa:	e76e      	b.n	4155da <.LVL17>

004156fc <.LVL53>:
  4156fc:	9b03      	ldr	r3, [sp, #12]
  4156fe:	4683      	mov	fp, r0
  415700:	f108 0807 	add.w	r8, r8, #7

00415704 <.LVL54>:
  415704:	e769      	b.n	4155da <.LVL17>

00415706 <.LVL55>:
  415706:	4658      	mov	r0, fp
  415708:	e003      	b.n	415712 <.LVL58>

0041570a <.LVL56>:
  41570a:	4658      	mov	r0, fp
        len = MAX_MATCH - (int)(strend - scan);
  41570c:	4614      	mov	r4, r2
  41570e:	e000      	b.n	415712 <.LVL58>

00415710 <.LVL57>:
  415710:	4658      	mov	r0, fp

00415712 <.LVL58>:
  415712:	6f40      	ldr	r0, [r0, #116]	; 0x74

00415714 <.LVL59>:
}
  415714:	42a0      	cmp	r0, r4
  415716:	bf28      	it	cs
  415718:	4620      	movcs	r0, r4
  41571a:	b005      	add	sp, #20

0041571c <.LCFI4>:
  41571c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section .text.wc_ecc_make_key_ex%87:

00415720 <wc_ecc_make_key_ex>:
{
  415720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

00415724 <.LCFI67>:
  415724:	f6ad 3d54 	subw	sp, sp, #2900	; 0xb54

00415728 <.LCFI68>:
  415728:	4606      	mov	r6, r0
  41572a:	460f      	mov	r7, r1
  41572c:	4614      	mov	r4, r2
  41572e:	4698      	mov	r8, r3

00415730 <.LVL863>:
    DECLARE_CURVE_SPECS(ECC_CURVE_FIELD_COUNT)
  415730:	ad18      	add	r5, sp, #96	; 0x60
  415732:	9517      	str	r5, [sp, #92]	; 0x5c
  415734:	2228      	movs	r2, #40	; 0x28

00415736 <.LVL864>:
  415736:	2100      	movs	r1, #0

00415738 <.LVL865>:
  415738:	4628      	mov	r0, r5

0041573a <.LVL866>:
  41573a:	f004 fb31 	bl	419da0 <.LFE166>

0041573e <.LVL867>:
  41573e:	ab22      	add	r3, sp, #136	; 0x88
  415740:	61ab      	str	r3, [r5, #24]
  415742:	2305      	movs	r3, #5
  415744:	61eb      	str	r3, [r5, #28]
    if (key == NULL || rng == NULL) {
  415746:	2c00      	cmp	r4, #0
  415748:	f000 80aa 	beq.w	4158a0 <.LVL924>
  41574c:	2e00      	cmp	r6, #0
  41574e:	f000 80a7 	beq.w	4158a0 <.LVL924>

00415752 <.LBB45>:
    key->state = ECC_STATE_NONE;
  415752:	2300      	movs	r3, #0
  415754:	60a3      	str	r3, [r4, #8]

00415756 <.LBE45>:
    err = wc_ecc_set_curve(key, keysize, curve_id);
  415756:	4642      	mov	r2, r8
  415758:	4639      	mov	r1, r7
  41575a:	4620      	mov	r0, r4
  41575c:	f005 fea2 	bl	41b4a4 <.LFE182>

00415760 <.LVL870>:
    if (err != 0) {
  415760:	4605      	mov	r5, r0
  415762:	b120      	cbz	r0, 41576e <.LCFI70>

00415764 <.LVL871>:
}
  415764:	4628      	mov	r0, r5
  415766:	f60d 3d54 	addw	sp, sp, #2900	; 0xb54

0041576a <.LCFI69>:
  41576a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0041576e <.LCFI70>:
    err = mp_init(&key->k);
  41576e:	f504 67d2 	add.w	r7, r4, #1680	; 0x690

00415772 <.LVL873>:
  415772:	4638      	mov	r0, r7

00415774 <.LVL874>:
  415774:	f008 f9bc 	bl	41daf0 <.LFE202>

00415778 <.LVL875>:
    if (err == MP_OKAY) {
  415778:	4605      	mov	r5, r0
  41577a:	b168      	cbz	r0, 415798 <.LBE47>
    ecc_point*     base = NULL;
  41577c:	2600      	movs	r6, #0

0041577e <.LVL876>:
    if (err == MP_OKAY)
  41577e:	b36d      	cbz	r5, 4157dc <.LVL892+0x2>

00415780 <.LVL877>:
    if (err == MP_OKAY)
  415780:	2d00      	cmp	r5, #0
  415782:	d17d      	bne.n	415880 <.LBE55>
        key->type = ECC_PRIVATEKEY;
  415784:	2302      	movs	r3, #2
  415786:	6023      	str	r3, [r4, #0]

00415788 <.LVL878>:
    wc_ecc_del_point_h(base, key->heap);
  415788:	6961      	ldr	r1, [r4, #20]
  41578a:	4630      	mov	r0, r6
  41578c:	f007 fe1b 	bl	41d3c6 <.LFE193>

00415790 <.LBB47>:
    _wc_ecc_curve_free(curve);
  415790:	9817      	ldr	r0, [sp, #92]	; 0x5c
  415792:	f005 ff9b 	bl	41b6cc <.LFE46>

00415796 <.LVL880>:
  415796:	e7e5      	b.n	415764 <.LVL871>

00415798 <.LBE47>:
        err = mp_init_multi(key->pubkey.x, key->pubkey.y, key->pubkey.z,
  415798:	2300      	movs	r3, #0
  41579a:	9301      	str	r3, [sp, #4]
  41579c:	9300      	str	r3, [sp, #0]
  41579e:	f504 628d 	add.w	r2, r4, #1128	; 0x468
  4157a2:	f504 7110 	add.w	r1, r4, #576	; 0x240
  4157a6:	f104 0018 	add.w	r0, r4, #24

004157aa <.LVL882>:
  4157aa:	f007 f943 	bl	41ca34 <mp_init_multi>

004157ae <.LVL883>:
    if (err == MP_OKAY) {
  4157ae:	4605      	mov	r5, r0
  4157b0:	2800      	cmp	r0, #0
  4157b2:	d17a      	bne.n	4158aa <.LVL926>
        base = wc_ecc_new_point_h(key->heap);
  4157b4:	6960      	ldr	r0, [r4, #20]

004157b6 <.LVL884>:
  4157b6:	f007 f83d 	bl	41c834 <.LBE32>

004157ba <.LVL885>:
        if (base == NULL)
  4157ba:	4606      	mov	r6, r0

004157bc <.LVL886>:
  4157bc:	2800      	cmp	r0, #0
  4157be:	d072      	beq.n	4158a6 <.LVL925>

004157c0 <.LVL887>:
        err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ALL);
  4157c0:	223b      	movs	r2, #59	; 0x3b
  4157c2:	a917      	add	r1, sp, #92	; 0x5c
  4157c4:	6920      	ldr	r0, [r4, #16]

004157c6 <.LVL888>:
  4157c6:	f003 fbb9 	bl	418f3c <.LFE164>

004157ca <.LVL889>:
  4157ca:	4605      	mov	r5, r0

004157cc <.LVL890>:
    if (err == MP_OKAY)
  4157cc:	bb65      	cbnz	r5, 415828 <.LBE49>
        err = mp_copy(curve->Gx, base->x);
  4157ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4157d0:	4631      	mov	r1, r6
  4157d2:	6918      	ldr	r0, [r3, #16]
  4157d4:	f008 fa69 	bl	41dcaa <.LFE85>

004157d8 <.LVL891>:
  4157d8:	4605      	mov	r5, r0

004157da <.LVL892>:
  4157da:	e7d0      	b.n	41577e <.LVL876>
        err = mp_copy(curve->Gy, base->y);
  4157dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4157de:	f506 710a 	add.w	r1, r6, #552	; 0x228
  4157e2:	6958      	ldr	r0, [r3, #20]

004157e4 <.LVL893>:
  4157e4:	f008 fa61 	bl	41dcaa <.LFE85>

004157e8 <.LVL894>:
    if (err == MP_OKAY)
  4157e8:	4605      	mov	r5, r0
  4157ea:	b9e8      	cbnz	r0, 415828 <.LBE49>
        err = mp_set(base->z, 1);
  4157ec:	2101      	movs	r1, #1
  4157ee:	f506 608a 	add.w	r0, r6, #1104	; 0x450

004157f2 <.LVL895>:
  4157f2:	f008 fa78 	bl	41dce6 <.LFE113>

004157f6 <.LVL896>:
    if (err == MP_OKAY)
  4157f6:	4605      	mov	r5, r0
  4157f8:	2800      	cmp	r0, #0
  4157fa:	d141      	bne.n	415880 <.LBE55>
        err = wc_ecc_gen_k(rng, key->dp->size, &key->k, curve->order);
  4157fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4157fe:	f8d3 900c 	ldr.w	r9, [r3, #12]

00415802 <.LVL897>:
  415802:	6923      	ldr	r3, [r4, #16]

00415804 <.LBB49>:
    size += 8;
  415804:	681b      	ldr	r3, [r3, #0]
  415806:	f103 0808 	add.w	r8, r3, #8

0041580a <.LVL898>:
    err = same70_RNG_GenerateBlock(buf, size);
  41580a:	4641      	mov	r1, r8
  41580c:	a804      	add	r0, sp, #16

0041580e <.LVL899>:
  41580e:	f006 ffad 	bl	41c76c <.LFE18>

00415812 <.LVL900>:
    if (err == 0)
  415812:	4605      	mov	r5, r0

00415814 <.LVL901>:
  415814:	b1c8      	cbz	r0, 41584a <.LBB55>

00415816 <.LBB51>:
    volatile byte* z = (volatile byte*)mem;
  415816:	ab04      	add	r3, sp, #16

00415818 <.LVL903>:
    while (len--) *z++ = 0;
  415818:	2000      	movs	r0, #0
  41581a:	f10d 0152 	add.w	r1, sp, #82	; 0x52

0041581e <.LVL904>:
  41581e:	1c5a      	adds	r2, r3, #1

00415820 <.LVL905>:
  415820:	7018      	strb	r0, [r3, #0]

00415822 <.LVL906>:
  415822:	4613      	mov	r3, r2
  415824:	428a      	cmp	r2, r1
  415826:	d1fa      	bne.n	41581e <.LVL904>

00415828 <.LBE49>:
    if (err == MP_OKAY)
  415828:	bb55      	cbnz	r5, 415880 <.LBE55>
            curve->Af, curve->prime, 1, key->heap);
  41582a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
        err = wc_ecc_mulmod_ex(&key->k, base, &key->pubkey,
  41582c:	6893      	ldr	r3, [r2, #8]
  41582e:	6961      	ldr	r1, [r4, #20]
  415830:	9102      	str	r1, [sp, #8]
  415832:	2101      	movs	r1, #1
  415834:	9101      	str	r1, [sp, #4]
  415836:	6852      	ldr	r2, [r2, #4]
  415838:	9200      	str	r2, [sp, #0]
  41583a:	f104 0218 	add.w	r2, r4, #24
  41583e:	4631      	mov	r1, r6
  415840:	4638      	mov	r0, r7
  415842:	f7fb fb68 	bl	410f16 <.LFE6>

00415846 <.LVL908>:
  415846:	4605      	mov	r5, r0

00415848 <.LVL909>:
  415848:	e79a      	b.n	415780 <.LVL877>

0041584a <.LBB55>:
        err = mp_read_unsigned_bin(k, (byte*)buf, size);
  41584a:	4642      	mov	r2, r8
  41584c:	a904      	add	r1, sp, #16
  41584e:	4638      	mov	r0, r7

00415850 <.LVL911>:
  415850:	f008 fa1c 	bl	41dc8c <.LFE72>

00415854 <.LVL912>:
    if (err == MP_OKAY) {
  415854:	4605      	mov	r5, r0
  415856:	2800      	cmp	r0, #0
  415858:	d1dd      	bne.n	415816 <.LBB51>
        if (mp_iszero(k) == MP_YES)
  41585a:	4638      	mov	r0, r7

0041585c <.LVL913>:
  41585c:	f008 fa2a 	bl	41dcb4 <.LFE93>

00415860 <.LVL914>:
  415860:	2801      	cmp	r0, #1
  415862:	d024      	beq.n	4158ae <.LBB56>

00415864 <.LVL915>:
        if (mp_cmp(k, order) != MP_LT) {
  415864:	4649      	mov	r1, r9
  415866:	4638      	mov	r0, r7
  415868:	f008 fa78 	bl	41dd5c <.LFE66>

0041586c <.LVL916>:
  41586c:	f1b0 3fff 	cmp.w	r0, #4294967295
  415870:	d0d1      	beq.n	415816 <.LBB51>
            err = mp_mod(k, order, k);
  415872:	463a      	mov	r2, r7
  415874:	4649      	mov	r1, r9
  415876:	4638      	mov	r0, r7
  415878:	f008 fa84 	bl	41dd84 <.LFE75>

0041587c <.LVL917>:
  41587c:	4605      	mov	r5, r0

0041587e <.LVL918>:
  41587e:	e7ca      	b.n	415816 <.LBB51>

00415880 <.LBE55>:
        mp_clear(key->pubkey.x);
  415880:	f104 0018 	add.w	r0, r4, #24
  415884:	f008 f9ab 	bl	41dbde <.LFE179>

00415888 <.LVL920>:
        mp_clear(key->pubkey.y);
  415888:	f504 7010 	add.w	r0, r4, #576	; 0x240
  41588c:	f008 f9a7 	bl	41dbde <.LFE179>

00415890 <.LVL921>:
        mp_clear(key->pubkey.z);
  415890:	f504 608d 	add.w	r0, r4, #1128	; 0x468
  415894:	f008 f9a3 	bl	41dbde <.LFE179>

00415898 <.LVL922>:
        mp_forcezero(&key->k);
  415898:	4638      	mov	r0, r7
  41589a:	f008 fa5b 	bl	41dd54 <mp_forcezero>

0041589e <.LVL923>:
  41589e:	e773      	b.n	415788 <.LVL878>

004158a0 <.LVL924>:
        return BAD_FUNC_ARG;
  4158a0:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  4158a4:	e75e      	b.n	415764 <.LVL871>

004158a6 <.LVL925>:
            err = MEMORY_E;
  4158a6:	f06f 057c 	mvn.w	r5, #124	; 0x7c

004158aa <.LVL926>:
{
  4158aa:	2600      	movs	r6, #0
  4158ac:	e78e      	b.n	4157cc <.LVL890>

004158ae <.LBB56>:
          err = MP_ZERO_E;
  4158ae:	f06f 0578 	mvn.w	r5, #120	; 0x78

004158b2 <.LVL928>:
  4158b2:	e7b0      	b.n	415816 <.LBB51>

Disassembly of section .text.wc_HmacFinal%88:

004158b4 <wc_HmacFinal>:

int wc_HmacFinal(Hmac* hmac, byte* hash)
{
    int ret;

    if (hmac == NULL || hash == NULL) {
  4158b4:	2800      	cmp	r0, #0
  4158b6:	f000 80c1 	beq.w	415a3c <.LCFI6>
{
  4158ba:	b570      	push	{r4, r5, r6, lr}

004158bc <.LCFI5>:
  4158bc:	4604      	mov	r4, r0
    if (hmac == NULL || hash == NULL) {
  4158be:	2900      	cmp	r1, #0
  4158c0:	f000 80b6 	beq.w	415a30 <.LVL194>
  4158c4:	460d      	mov	r5, r1
            (byte*)hmac->ipad, hmac->keyLen, hash, NULL, hashLen);
    #endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    if (!hmac->innerHashKeyed) {
  4158c6:	f890 3245 	ldrb.w	r3, [r0, #581]	; 0x245
  4158ca:	b14b      	cbz	r3, 4158e0 <.LVL146>

004158cc <.LVL145>:
        ret = HmacKeyInnerHash(hmac);
        if (ret != 0)
            return ret;
    }

    switch (hmac->macType) {
  4158cc:	f894 3244 	ldrb.w	r3, [r4, #580]	; 0x244
  4158d0:	2b05      	cmp	r3, #5
  4158d2:	f200 80b0 	bhi.w	415a36 <.LVL195>
  4158d6:	e8df f003 	tbb	[pc, r3]
  4158da:	2b09      	.short	0x2b09
  4158dc:	6b8bae4b 	.word	0x6b8bae4b

004158e0 <.LVL146>:
        ret = HmacKeyInnerHash(hmac);
  4158e0:	f006 fa72 	bl	41bdc8 <HmacKeyInnerHash>

004158e4 <.LVL147>:
        if (ret != 0)
  4158e4:	4603      	mov	r3, r0
  4158e6:	2800      	cmp	r0, #0
  4158e8:	d0f0      	beq.n	4158cc <.LVL145>
  4158ea:	e01f      	b.n	41592c <.LVL157>

004158ec <.LVL148>:
    #ifndef NO_MD5
        case MD5:
            ret = wc_Md5Final(&hmac->hash.md5, (byte*)hmac->innerHash);
  4158ec:	f504 7600 	add.w	r6, r4, #512	; 0x200
  4158f0:	4631      	mov	r1, r6
  4158f2:	4620      	mov	r0, r4
  4158f4:	f003 f886 	bl	418a04 <.LFE177>

004158f8 <.LVL149>:
            if (ret != 0)
  4158f8:	4603      	mov	r3, r0
  4158fa:	b9b8      	cbnz	r0, 41592c <.LVL157>
                break;
            ret = wc_Md5Update(&hmac->hash.md5, (byte*)hmac->opad,
  4158fc:	2240      	movs	r2, #64	; 0x40
  4158fe:	f504 71c0 	add.w	r1, r4, #384	; 0x180
  415902:	4620      	mov	r0, r4

00415904 <.LVL150>:
  415904:	f004 fdb4 	bl	41a470 <.LFE23>

00415908 <.LVL151>:
                                                                MD5_BLOCK_SIZE);
            if (ret != 0)
  415908:	4603      	mov	r3, r0
  41590a:	b978      	cbnz	r0, 41592c <.LVL157>
                break;
            ret = wc_Md5Update(&hmac->hash.md5, (byte*)hmac->innerHash,
  41590c:	2210      	movs	r2, #16
  41590e:	4631      	mov	r1, r6
  415910:	4620      	mov	r0, r4

00415912 <.LVL152>:
  415912:	f004 fdad 	bl	41a470 <.LFE23>

00415916 <.LVL153>:
                                                               MD5_DIGEST_SIZE);
            if (ret != 0)
  415916:	4603      	mov	r3, r0
  415918:	b940      	cbnz	r0, 41592c <.LVL157>
                break;
            ret = wc_Md5Final(&hmac->hash.md5, hash);
  41591a:	4629      	mov	r1, r5
  41591c:	4620      	mov	r0, r4

0041591e <.LVL154>:
  41591e:	f003 f871 	bl	418a04 <.LFE177>

00415922 <.LVL155>:
  415922:	4603      	mov	r3, r0

00415924 <.LVL156>:
        default:
            ret = BAD_FUNC_ARG;
            break;
    }

    if (ret == 0) {
  415924:	b913      	cbnz	r3, 41592c <.LVL157>
        hmac->innerHashKeyed = 0;
  415926:	2200      	movs	r2, #0
  415928:	f884 2245 	strb.w	r2, [r4, #581]	; 0x245

0041592c <.LVL157>:
    }

    return ret;
}
  41592c:	4618      	mov	r0, r3
  41592e:	bd70      	pop	{r4, r5, r6, pc}

00415930 <.LVL158>:
            ret = wc_ShaFinal(&hmac->hash.sha, (byte*)hmac->innerHash);
  415930:	f504 7600 	add.w	r6, r4, #512	; 0x200
  415934:	4631      	mov	r1, r6
  415936:	4620      	mov	r0, r4
  415938:	f004 fc84 	bl	41a244 <.LFE180>

0041593c <.LVL159>:
            if (ret != 0)
  41593c:	4603      	mov	r3, r0
  41593e:	2800      	cmp	r0, #0
  415940:	d1f4      	bne.n	41592c <.LVL157>
            ret = wc_ShaUpdate(&hmac->hash.sha, (byte*)hmac->opad,
  415942:	2240      	movs	r2, #64	; 0x40
  415944:	f504 71c0 	add.w	r1, r4, #384	; 0x180
  415948:	4620      	mov	r0, r4

0041594a <.LVL160>:
  41594a:	f004 ffa8 	bl	41a89e <.LFE58>

0041594e <.LVL161>:
            if (ret != 0)
  41594e:	4603      	mov	r3, r0
  415950:	2800      	cmp	r0, #0
  415952:	d1eb      	bne.n	41592c <.LVL157>
            ret = wc_ShaUpdate(&hmac->hash.sha, (byte*)hmac->innerHash,
  415954:	2214      	movs	r2, #20
  415956:	4631      	mov	r1, r6
  415958:	4620      	mov	r0, r4

0041595a <.LVL162>:
  41595a:	f004 ffa0 	bl	41a89e <.LFE58>

0041595e <.LVL163>:
            if (ret != 0)
  41595e:	4603      	mov	r3, r0
  415960:	2800      	cmp	r0, #0
  415962:	d1e3      	bne.n	41592c <.LVL157>
            ret = wc_ShaFinal(&hmac->hash.sha, hash);
  415964:	4629      	mov	r1, r5
  415966:	4620      	mov	r0, r4

00415968 <.LVL164>:
  415968:	f004 fc6c 	bl	41a244 <.LFE180>

0041596c <.LVL165>:
  41596c:	4603      	mov	r3, r0

0041596e <.LVL166>:
            break;
  41596e:	e7d9      	b.n	415924 <.LVL156>

00415970 <.LVL167>:
            ret = wc_Sha256Final(&hmac->hash.sha256, (byte*)hmac->innerHash);
  415970:	f504 7600 	add.w	r6, r4, #512	; 0x200
  415974:	4631      	mov	r1, r6
  415976:	4620      	mov	r0, r4
  415978:	f004 f9c4 	bl	419d04 <.LFE151>

0041597c <.LVL168>:
            if (ret != 0)
  41597c:	4603      	mov	r3, r0
  41597e:	2800      	cmp	r0, #0
  415980:	d1d4      	bne.n	41592c <.LVL157>
            ret = wc_Sha256Update(&hmac->hash.sha256, (byte*)hmac->opad,
  415982:	2240      	movs	r2, #64	; 0x40
  415984:	f504 71c0 	add.w	r1, r4, #384	; 0x180
  415988:	4620      	mov	r0, r4

0041598a <.LVL169>:
  41598a:	f004 ffc9 	bl	41a920 <.LFE165>

0041598e <.LVL170>:
            if (ret != 0)
  41598e:	4603      	mov	r3, r0
  415990:	2800      	cmp	r0, #0
  415992:	d1cb      	bne.n	41592c <.LVL157>
            ret = wc_Sha256Update(&hmac->hash.sha256, (byte*)hmac->innerHash,
  415994:	2220      	movs	r2, #32
  415996:	4631      	mov	r1, r6
  415998:	4620      	mov	r0, r4

0041599a <.LVL171>:
  41599a:	f004 ffc1 	bl	41a920 <.LFE165>

0041599e <.LVL172>:
            if (ret != 0)
  41599e:	4603      	mov	r3, r0
  4159a0:	2800      	cmp	r0, #0
  4159a2:	d1c3      	bne.n	41592c <.LVL157>
            ret = wc_Sha256Final(&hmac->hash.sha256, hash);
  4159a4:	4629      	mov	r1, r5
  4159a6:	4620      	mov	r0, r4

004159a8 <.LVL173>:
  4159a8:	f004 f9ac 	bl	419d04 <.LFE151>

004159ac <.LVL174>:
  4159ac:	4603      	mov	r3, r0

004159ae <.LVL175>:
            break;
  4159ae:	e7b9      	b.n	415924 <.LVL156>

004159b0 <.LVL176>:
            ret = wc_Sha384Final(&hmac->hash.sha384, (byte*)hmac->innerHash);
  4159b0:	f504 7600 	add.w	r6, r4, #512	; 0x200
  4159b4:	4631      	mov	r1, r6
  4159b6:	4620      	mov	r0, r4
  4159b8:	f7fe f942 	bl	413c40 <.LFE21>

004159bc <.LVL177>:
            if (ret != 0)
  4159bc:	4603      	mov	r3, r0
  4159be:	2800      	cmp	r0, #0
  4159c0:	d1b4      	bne.n	41592c <.LVL157>
            ret = wc_Sha384Update(&hmac->hash.sha384, (byte*)hmac->opad,
  4159c2:	2280      	movs	r2, #128	; 0x80
  4159c4:	f504 71c0 	add.w	r1, r4, #384	; 0x180
  4159c8:	4620      	mov	r0, r4

004159ca <.LVL178>:
  4159ca:	f001 ffe4 	bl	417996 <.LBE719>

004159ce <.LVL179>:
            if (ret != 0)
  4159ce:	4603      	mov	r3, r0
  4159d0:	2800      	cmp	r0, #0
  4159d2:	d1ab      	bne.n	41592c <.LVL157>
            ret = wc_Sha384Update(&hmac->hash.sha384, (byte*)hmac->innerHash,
  4159d4:	2230      	movs	r2, #48	; 0x30
  4159d6:	4631      	mov	r1, r6
  4159d8:	4620      	mov	r0, r4

004159da <.LVL180>:
  4159da:	f001 ffdc 	bl	417996 <.LBE719>

004159de <.LVL181>:
            if (ret != 0)
  4159de:	4603      	mov	r3, r0
  4159e0:	2800      	cmp	r0, #0
  4159e2:	d1a3      	bne.n	41592c <.LVL157>
            ret = wc_Sha384Final(&hmac->hash.sha384, hash);
  4159e4:	4629      	mov	r1, r5
  4159e6:	4620      	mov	r0, r4

004159e8 <.LVL182>:
  4159e8:	f7fe f92a 	bl	413c40 <.LFE21>

004159ec <.LVL183>:
  4159ec:	4603      	mov	r3, r0

004159ee <.LVL184>:
            break;
  4159ee:	e799      	b.n	415924 <.LVL156>

004159f0 <.LVL185>:
            ret = wc_Sha512Final(&hmac->hash.sha512, (byte*)hmac->innerHash);
  4159f0:	f504 7600 	add.w	r6, r4, #512	; 0x200
  4159f4:	4631      	mov	r1, r6
  4159f6:	4620      	mov	r0, r4
  4159f8:	f7fd ffda 	bl	4139b0 <wc_Sha512Final>

004159fc <.LVL186>:
            if (ret != 0)
  4159fc:	4603      	mov	r3, r0
  4159fe:	2800      	cmp	r0, #0
  415a00:	d194      	bne.n	41592c <.LVL157>
            ret = wc_Sha512Update(&hmac->hash.sha512, (byte*)hmac->opad,
  415a02:	2280      	movs	r2, #128	; 0x80
  415a04:	f504 71c0 	add.w	r1, r4, #384	; 0x180
  415a08:	4620      	mov	r0, r4

00415a0a <.LVL187>:
  415a0a:	f001 ff4f 	bl	4178ac <.LFE178>

00415a0e <.LVL188>:
            if (ret != 0)
  415a0e:	4603      	mov	r3, r0
  415a10:	2800      	cmp	r0, #0
  415a12:	d18b      	bne.n	41592c <.LVL157>
            ret = wc_Sha512Update(&hmac->hash.sha512, (byte*)hmac->innerHash,
  415a14:	2240      	movs	r2, #64	; 0x40
  415a16:	4631      	mov	r1, r6
  415a18:	4620      	mov	r0, r4

00415a1a <.LVL189>:
  415a1a:	f001 ff47 	bl	4178ac <.LFE178>

00415a1e <.LVL190>:
            if (ret != 0)
  415a1e:	4603      	mov	r3, r0
  415a20:	2800      	cmp	r0, #0
  415a22:	d183      	bne.n	41592c <.LVL157>
            ret = wc_Sha512Final(&hmac->hash.sha512, hash);
  415a24:	4629      	mov	r1, r5
  415a26:	4620      	mov	r0, r4

00415a28 <.LVL191>:
  415a28:	f7fd ffc2 	bl	4139b0 <wc_Sha512Final>

00415a2c <.LVL192>:
  415a2c:	4603      	mov	r3, r0

00415a2e <.LVL193>:
            break;
  415a2e:	e779      	b.n	415924 <.LVL156>

00415a30 <.LVL194>:
        return BAD_FUNC_ARG;
  415a30:	f06f 03ac 	mvn.w	r3, #172	; 0xac
  415a34:	e77a      	b.n	41592c <.LVL157>

00415a36 <.LVL195>:
            ret = BAD_FUNC_ARG;
  415a36:	f06f 03ac 	mvn.w	r3, #172	; 0xac
  415a3a:	e777      	b.n	41592c <.LVL157>

00415a3c <.LCFI6>:
        return BAD_FUNC_ARG;
  415a3c:	f06f 03ac 	mvn.w	r3, #172	; 0xac
}
  415a40:	4618      	mov	r0, r3

00415a42 <.LVL197>:
  415a42:	4770      	bx	lr

Disassembly of section .text.aes_test%89:

00415a44 <aes_test>:
{
  415a44:	b5f0      	push	{r4, r5, r6, r7, lr}

00415a46 <.LCFI53>:
  415a46:	f2ad 4d44 	subw	sp, sp, #1092	; 0x444

00415a4a <.LCFI54>:
    const byte msg[] = { /* "now is the time for all " w/o trailing 0 */
  415a4a:	4c5e      	ldr	r4, [pc, #376]	; (415bc4 <.LCFI55+0x2>)
  415a4c:	ad58      	add	r5, sp, #352	; 0x160
  415a4e:	f8d4 0708 	ldr.w	r0, [r4, #1800]	; 0x708
  415a52:	f8d4 170c 	ldr.w	r1, [r4, #1804]	; 0x70c
  415a56:	f8d4 2710 	ldr.w	r2, [r4, #1808]	; 0x710
  415a5a:	f8d4 3714 	ldr.w	r3, [r4, #1812]	; 0x714
  415a5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    const byte verify[] =
  415a60:	ad54      	add	r5, sp, #336	; 0x150
  415a62:	f8d4 0718 	ldr.w	r0, [r4, #1816]	; 0x718
  415a66:	f8d4 171c 	ldr.w	r1, [r4, #1820]	; 0x71c
  415a6a:	f8d4 2720 	ldr.w	r2, [r4, #1824]	; 0x720
  415a6e:	f8d4 3724 	ldr.w	r3, [r4, #1828]	; 0x724
  415a72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    byte key[] = "0123456789abcdef   ";  /* align */
  415a74:	ad4f      	add	r5, sp, #316	; 0x13c
  415a76:	f504 66e5 	add.w	r6, r4, #1832	; 0x728
  415a7a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  415a7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  415a7e:	6833      	ldr	r3, [r6, #0]
  415a80:	602b      	str	r3, [r5, #0]
    byte iv[]  = "1234567890abcdef   ";  /* align */
  415a82:	ad4a      	add	r5, sp, #296	; 0x128
  415a84:	f204 743c 	addw	r4, r4, #1852	; 0x73c
  415a88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  415a8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  415a8c:	6823      	ldr	r3, [r4, #0]
  415a8e:	602b      	str	r3, [r5, #0]
    CRYPT_AES_KeySet(&enc, key, AES_BLOCK_SIZE, iv, AES_ENCRYPTION);
  415a90:	2300      	movs	r3, #0
  415a92:	9300      	str	r3, [sp, #0]
  415a94:	ab4a      	add	r3, sp, #296	; 0x128
  415a96:	2210      	movs	r2, #16
  415a98:	a94f      	add	r1, sp, #316	; 0x13c
  415a9a:	a8b6      	add	r0, sp, #728	; 0x2d8
  415a9c:	f007 fd0f 	bl	41d4be <.LFE1>

00415aa0 <.LVL110>:
    CRYPT_AES_KeySet(&dec, key, AES_BLOCK_SIZE, iv, AES_DECRYPTION);
  415aa0:	2301      	movs	r3, #1
  415aa2:	9300      	str	r3, [sp, #0]
  415aa4:	ab4a      	add	r3, sp, #296	; 0x128
  415aa6:	2210      	movs	r2, #16
  415aa8:	a94f      	add	r1, sp, #316	; 0x13c
  415aaa:	a85c      	add	r0, sp, #368	; 0x170
  415aac:	f007 fd07 	bl	41d4be <.LFE1>

00415ab0 <.LVL111>:
    CRYPT_AES_CBC_Encrypt(&enc, cipher, msg,   AES_BLOCK_SIZE);
  415ab0:	2310      	movs	r3, #16
  415ab2:	aa58      	add	r2, sp, #352	; 0x160
  415ab4:	a93a      	add	r1, sp, #232	; 0xe8
  415ab6:	a8b6      	add	r0, sp, #728	; 0x2d8
  415ab8:	f007 fd7f 	bl	41d5ba <.LFE192>

00415abc <.LVL112>:
    CRYPT_AES_CBC_Decrypt(&dec, plain, verify, AES_BLOCK_SIZE);
  415abc:	2310      	movs	r3, #16
  415abe:	aa54      	add	r2, sp, #336	; 0x150
  415ac0:	a92a      	add	r1, sp, #168	; 0xa8
  415ac2:	a85c      	add	r0, sp, #368	; 0x170
  415ac4:	f007 fd88 	bl	41d5d8 <.LFE195>

00415ac8 <.LVL113>:
    appData.aes_cbc_test_result = numCbcSubTests;
  415ac8:	2202      	movs	r2, #2
  415aca:	4b3f      	ldr	r3, [pc, #252]	; (415bc8 <.LCFI55+0x6>)
  415acc:	635a      	str	r2, [r3, #52]	; 0x34
    if (!(memcmp(plain, msg, AES_BLOCK_SIZE)))
  415ace:	2210      	movs	r2, #16
  415ad0:	a958      	add	r1, sp, #352	; 0x160
  415ad2:	a82a      	add	r0, sp, #168	; 0xa8
  415ad4:	f006 f918 	bl	41bd08 <memcmp>

00415ad8 <.LVL114>:
  415ad8:	b910      	cbnz	r0, 415ae0 <.LVL114+0x8>
        appData.aes_cbc_test_result--;
  415ada:	2201      	movs	r2, #1
  415adc:	4b3a      	ldr	r3, [pc, #232]	; (415bc8 <.LCFI55+0x6>)
  415ade:	635a      	str	r2, [r3, #52]	; 0x34
    if (!(memcmp(cipher, verify, AES_BLOCK_SIZE)))
  415ae0:	2210      	movs	r2, #16
  415ae2:	a954      	add	r1, sp, #336	; 0x150
  415ae4:	a83a      	add	r0, sp, #232	; 0xe8
  415ae6:	f006 f90f 	bl	41bd08 <memcmp>

00415aea <.LVL115>:
  415aea:	b918      	cbnz	r0, 415af4 <.LBB2>
        appData.aes_cbc_test_result--;
  415aec:	4a36      	ldr	r2, [pc, #216]	; (415bc8 <.LCFI55+0x6>)
  415aee:	6b53      	ldr	r3, [r2, #52]	; 0x34
  415af0:	3b01      	subs	r3, #1
  415af2:	6353      	str	r3, [r2, #52]	; 0x34

00415af4 <.LBB2>:
        const byte ctrKey[] =
  415af4:	4d33      	ldr	r5, [pc, #204]	; (415bc4 <.LCFI55+0x2>)
  415af6:	ac02      	add	r4, sp, #8
  415af8:	f8d5 0750 	ldr.w	r0, [r5, #1872]	; 0x750
  415afc:	f8d5 1754 	ldr.w	r1, [r5, #1876]	; 0x754
  415b00:	f8d5 2758 	ldr.w	r2, [r5, #1880]	; 0x758
  415b04:	f8d5 375c 	ldr.w	r3, [r5, #1884]	; 0x75c
  415b08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        const byte ctrIv[] =
  415b0a:	ac06      	add	r4, sp, #24
  415b0c:	f8d5 0760 	ldr.w	r0, [r5, #1888]	; 0x760
  415b10:	f8d5 1764 	ldr.w	r1, [r5, #1892]	; 0x764
  415b14:	f8d5 2768 	ldr.w	r2, [r5, #1896]	; 0x768
  415b18:	f8d5 376c 	ldr.w	r3, [r5, #1900]	; 0x76c
  415b1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        const byte ctrPlain[] =
  415b1e:	f505 64ee 	add.w	r4, r5, #1904	; 0x770
  415b22:	af0a      	add	r7, sp, #40	; 0x28
  415b24:	f505 65f6 	add.w	r5, r5, #1968	; 0x7b0
  415b28:	463e      	mov	r6, r7
  415b2a:	6820      	ldr	r0, [r4, #0]
  415b2c:	6861      	ldr	r1, [r4, #4]
  415b2e:	68a2      	ldr	r2, [r4, #8]
  415b30:	68e3      	ldr	r3, [r4, #12]
  415b32:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  415b34:	3410      	adds	r4, #16
  415b36:	4637      	mov	r7, r6
  415b38:	42ac      	cmp	r4, r5
  415b3a:	d1f5      	bne.n	415b28 <.LBB2+0x34>
        const byte ctrCipher[] =
  415b3c:	4e21      	ldr	r6, [pc, #132]	; (415bc4 <.LCFI55+0x2>)
  415b3e:	f506 64f6 	add.w	r4, r6, #1968	; 0x7b0
  415b42:	af1a      	add	r7, sp, #104	; 0x68
  415b44:	f506 66fe 	add.w	r6, r6, #2032	; 0x7f0
  415b48:	463d      	mov	r5, r7
  415b4a:	6820      	ldr	r0, [r4, #0]
  415b4c:	6861      	ldr	r1, [r4, #4]
  415b4e:	68a2      	ldr	r2, [r4, #8]
  415b50:	68e3      	ldr	r3, [r4, #12]
  415b52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  415b54:	3410      	adds	r4, #16
  415b56:	462f      	mov	r7, r5
  415b58:	42b4      	cmp	r4, r6
  415b5a:	d1f5      	bne.n	415b48 <.LBB2+0x54>
        CRYPT_AES_KeySet(&enc, ctrKey, AES_BLOCK_SIZE, ctrIv, AES_ENCRYPTION);
  415b5c:	2400      	movs	r4, #0
  415b5e:	9400      	str	r4, [sp, #0]
  415b60:	ab06      	add	r3, sp, #24
  415b62:	2210      	movs	r2, #16
  415b64:	a902      	add	r1, sp, #8
  415b66:	a8b6      	add	r0, sp, #728	; 0x2d8
  415b68:	f007 fca9 	bl	41d4be <.LFE1>

00415b6c <.LVL116>:
        CRYPT_AES_KeySet(&dec, ctrKey, AES_BLOCK_SIZE, ctrIv, AES_ENCRYPTION);
  415b6c:	9400      	str	r4, [sp, #0]
  415b6e:	ab06      	add	r3, sp, #24
  415b70:	2210      	movs	r2, #16
  415b72:	a902      	add	r1, sp, #8
  415b74:	a85c      	add	r0, sp, #368	; 0x170
  415b76:	f007 fca2 	bl	41d4be <.LFE1>

00415b7a <.LVL117>:
        CRYPT_AES_CTR_Encrypt(&enc, cipher, ctrPlain, AES_BLOCK_SIZE*4);
  415b7a:	2340      	movs	r3, #64	; 0x40
  415b7c:	aa0a      	add	r2, sp, #40	; 0x28
  415b7e:	a93a      	add	r1, sp, #232	; 0xe8
  415b80:	a8b6      	add	r0, sp, #728	; 0x2d8
  415b82:	f007 fd38 	bl	41d5f6 <.LFE196>

00415b86 <.LVL118>:
        CRYPT_AES_CTR_Encrypt(&dec, plain, ctrCipher, AES_BLOCK_SIZE*4);
  415b86:	2340      	movs	r3, #64	; 0x40
  415b88:	aa1a      	add	r2, sp, #104	; 0x68
  415b8a:	a92a      	add	r1, sp, #168	; 0xa8
  415b8c:	a85c      	add	r0, sp, #368	; 0x170
  415b8e:	f007 fd32 	bl	41d5f6 <.LFE196>

00415b92 <.LVL119>:
        appData.aes_ctr_test_result = numCtrSubTests;
  415b92:	2202      	movs	r2, #2
  415b94:	4b0c      	ldr	r3, [pc, #48]	; (415bc8 <.LCFI55+0x6>)
  415b96:	639a      	str	r2, [r3, #56]	; 0x38
        if (!(memcmp(plain, ctrPlain, AES_BLOCK_SIZE*4)))
  415b98:	2240      	movs	r2, #64	; 0x40
  415b9a:	a90a      	add	r1, sp, #40	; 0x28
  415b9c:	a82a      	add	r0, sp, #168	; 0xa8
  415b9e:	f006 f8b3 	bl	41bd08 <memcmp>

00415ba2 <.LVL120>:
  415ba2:	b910      	cbnz	r0, 415baa <.LVL120+0x8>
            appData.aes_ctr_test_result--;
  415ba4:	2201      	movs	r2, #1
  415ba6:	4b08      	ldr	r3, [pc, #32]	; (415bc8 <.LCFI55+0x6>)
  415ba8:	639a      	str	r2, [r3, #56]	; 0x38
        if (!(memcmp(cipher, ctrCipher, AES_BLOCK_SIZE*4)))
  415baa:	2240      	movs	r2, #64	; 0x40
  415bac:	a91a      	add	r1, sp, #104	; 0x68
  415bae:	a83a      	add	r0, sp, #232	; 0xe8
  415bb0:	f006 f8aa 	bl	41bd08 <memcmp>

00415bb4 <.LVL121>:
  415bb4:	b918      	cbnz	r0, 415bbe <.LBE2>
            appData.aes_ctr_test_result--;
  415bb6:	4a04      	ldr	r2, [pc, #16]	; (415bc8 <.LCFI55+0x6>)
  415bb8:	6b93      	ldr	r3, [r2, #56]	; 0x38
  415bba:	3b01      	subs	r3, #1
  415bbc:	6393      	str	r3, [r2, #56]	; 0x38

00415bbe <.LBE2>:
}
  415bbe:	f20d 4d44 	addw	sp, sp, #1092	; 0x444

00415bc2 <.LCFI55>:
  415bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  415bc4:	0040ab9c 	.word	0x0040ab9c
  415bc8:	2040d534 	.word	0x2040d534

Disassembly of section .text.fp_sqr_comba%90:

00415bcc <fp_sqr_comba>:
{
  415bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00415bd0 <.LCFI77>:
  415bd0:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c

00415bd4 <.LCFI78>:
  415bd4:	9005      	str	r0, [sp, #20]
  415bd6:	910b      	str	r1, [sp, #44]	; 0x2c
  pa = A->used + A->used;
  415bd8:	6803      	ldr	r3, [r0, #0]
  415bda:	005b      	lsls	r3, r3, #1

00415bdc <.LVL505>:
  415bdc:	2b87      	cmp	r3, #135	; 0x87
  415bde:	bfa8      	it	ge
  415be0:	2387      	movge	r3, #135	; 0x87

00415be2 <.LVL506>:
  415be2:	9308      	str	r3, [sp, #32]

00415be4 <.LVL507>:
  if (A == B) {
  415be4:	4288      	cmp	r0, r1
  415be6:	d012      	beq.n	415c0e <.LBB70>
     fp_zero(B);
  415be8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  415bea:	4620      	mov	r0, r4

00415bec <.LVL508>:
  415bec:	f007 fecc 	bl	41d988 <.LFE163>

00415bf0 <.LVL509>:
     dst = B;
  415bf0:	940a      	str	r4, [sp, #40]	; 0x28

00415bf2 <.LVL510>:
  for (ix = 0; ix < pa; ix++) {
  415bf2:	9b08      	ldr	r3, [sp, #32]
  415bf4:	2b00      	cmp	r3, #0
  415bf6:	dd7c      	ble.n	415cf2 <.LBE69>
  415bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  415bfa:	3304      	adds	r3, #4
  415bfc:	9304      	str	r3, [sp, #16]
  415bfe:	f04f 0a00 	mov.w	sl, #0
  415c02:	46d1      	mov	r9, sl
  415c04:	46d3      	mov	fp, sl

00415c06 <.LBB67>:
      tmpx = A->dp + tx;
  415c06:	9b05      	ldr	r3, [sp, #20]
  415c08:	3308      	adds	r3, #8
  415c0a:	9309      	str	r3, [sp, #36]	; 0x24
  415c0c:	e014      	b.n	415c38 <.LBB73>

00415c0e <.LBB70>:
    fp_zero(a);
  415c0e:	a80c      	add	r0, sp, #48	; 0x30

00415c10 <.LVL512>:
  415c10:	f007 feba 	bl	41d988 <.LFE163>

00415c14 <.LBE70>:
     dst = &tmp;
  415c14:	ab0c      	add	r3, sp, #48	; 0x30

00415c16 <.LVL514>:
  415c16:	930a      	str	r3, [sp, #40]	; 0x28
  415c18:	e7eb      	b.n	415bf2 <.LVL510>

00415c1a <.LBB72>:
      COMBA_FORWARD;
  415c1a:	f04f 0e00 	mov.w	lr, #0
  415c1e:	e04d      	b.n	415cbc <.LVL541>

00415c20 <.LVL516>:
  415c20:	4649      	mov	r1, r9
  415c22:	46d1      	mov	r9, sl
  415c24:	46f2      	mov	sl, lr

00415c26 <.LVL517>:
      COMBA_STORE(dst->dp[ix]);
  415c26:	9b04      	ldr	r3, [sp, #16]
  415c28:	f843 1f04 	str.w	r1, [r3, #4]!

00415c2c <.LVL518>:
  415c2c:	9304      	str	r3, [sp, #16]

00415c2e <.LBE72>:
  for (ix = 0; ix < pa; ix++) {
  415c2e:	f10b 0b01 	add.w	fp, fp, #1
  415c32:	9b08      	ldr	r3, [sp, #32]
  415c34:	455b      	cmp	r3, fp
  415c36:	d05c      	beq.n	415cf2 <.LBE69>

00415c38 <.LBB73>:
      ty = MIN(A->used-1, ix);
  415c38:	9b05      	ldr	r3, [sp, #20]
  415c3a:	6819      	ldr	r1, [r3, #0]
  415c3c:	1e4b      	subs	r3, r1, #1
  415c3e:	455b      	cmp	r3, fp
  415c40:	bfa8      	it	ge
  415c42:	465b      	movge	r3, fp

00415c44 <.LVL521>:
      tx = ix - ty;
  415c44:	ebab 0003 	sub.w	r0, fp, r3

00415c48 <.LVL522>:
      tmpx = A->dp + tx;
  415c48:	9c09      	ldr	r4, [sp, #36]	; 0x24
  415c4a:	eb04 0880 	add.w	r8, r4, r0, lsl #2

00415c4e <.LVL523>:
      tmpy = A->dp + ty;
  415c4e:	eb04 0c83 	add.w	ip, r4, r3, lsl #2

00415c52 <.LVL524>:
      iy = MIN(A->used-tx, ty+1);
  415c52:	1c5a      	adds	r2, r3, #1
  415c54:	1a09      	subs	r1, r1, r0
  415c56:	4291      	cmp	r1, r2
  415c58:	bfa8      	it	ge
  415c5a:	4611      	movge	r1, r2

00415c5c <.LVL525>:
      iy = MIN(iy, (ty-tx+1)>>1);
  415c5c:	1a1a      	subs	r2, r3, r0
  415c5e:	3201      	adds	r2, #1
  415c60:	1052      	asrs	r2, r2, #1
  415c62:	428a      	cmp	r2, r1
  415c64:	bfa8      	it	ge
  415c66:	460a      	movge	r2, r1

00415c68 <.LVL526>:
      for (iz = 0; iz < iy; iz++) {
  415c68:	2a00      	cmp	r2, #0
  415c6a:	ddd6      	ble.n	415c1a <.LBB72>
  415c6c:	f04f 0e00 	mov.w	lr, #0
  415c70:	4673      	mov	r3, lr

00415c72 <.LBB68>:
          SQRADD2(*tmpx++, *tmpy--);
  415c72:	f858 0b04 	ldr.w	r0, [r8], #4

00415c76 <.LVL528>:
  415c76:	f85c 1904 	ldr.w	r1, [ip], #-4

00415c7a <.LVL529>:
  415c7a:	fba0 0101 	umull	r0, r1, r0, r1

00415c7e <.LVL530>:
  415c7e:	eb10 0409 	adds.w	r4, r0, r9
  415c82:	f141 0500 	adc.w	r5, r1, #0

00415c86 <.LVL531>:
  415c86:	9500      	str	r5, [sp, #0]
  415c88:	2600      	movs	r6, #0
  415c8a:	9601      	str	r6, [sp, #4]
  415c8c:	e9dd 6700 	ldrd	r6, r7, [sp]
  415c90:	eb16 060a 	adds.w	r6, r6, sl
  415c94:	f147 0700 	adc.w	r7, r7, #0

00415c98 <.LVL532>:
  415c98:	1900      	adds	r0, r0, r4

00415c9a <.LVL533>:
  415c9a:	f141 0100 	adc.w	r1, r1, #0

00415c9e <.LVL534>:
  415c9e:	4681      	mov	r9, r0

00415ca0 <.LVL535>:
  415ca0:	9102      	str	r1, [sp, #8]
  415ca2:	2100      	movs	r1, #0
  415ca4:	9103      	str	r1, [sp, #12]
  415ca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]

00415caa <.LVL536>:
  415caa:	1980      	adds	r0, r0, r6
  415cac:	f141 0100 	adc.w	r1, r1, #0

00415cb0 <.LVL537>:
  415cb0:	4682      	mov	sl, r0

00415cb2 <.LVL538>:
  415cb2:	4439      	add	r1, r7
  415cb4:	448e      	add	lr, r1

00415cb6 <.LBE68>:
      for (iz = 0; iz < iy; iz++) {
  415cb6:	3301      	adds	r3, #1

00415cb8 <.LVL540>:
  415cb8:	429a      	cmp	r2, r3
  415cba:	d1da      	bne.n	415c72 <.LBB68>

00415cbc <.LVL541>:
      if ((ix&1) == 0) {
  415cbc:	f01b 0f01 	tst.w	fp, #1
  415cc0:	d1ae      	bne.n	415c20 <.LVL516>

00415cc2 <.LBB69>:
          SQRADD(A->dp[ix>>1], A->dp[ix>>1]);
  415cc2:	ea4f 036b 	mov.w	r3, fp, asr #1
  415cc6:	3302      	adds	r3, #2
  415cc8:	9a05      	ldr	r2, [sp, #20]

00415cca <.LVL542>:
  415cca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
  415cce:	464a      	mov	r2, r9
  415cd0:	2300      	movs	r3, #0
  415cd2:	fbe1 2301 	umlal	r2, r3, r1, r1

00415cd6 <.LVL543>:
  415cd6:	4611      	mov	r1, r2

00415cd8 <.LVL544>:
  415cd8:	9306      	str	r3, [sp, #24]
  415cda:	2300      	movs	r3, #0
  415cdc:	9307      	str	r3, [sp, #28]
  415cde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]

00415ce2 <.LVL545>:
  415ce2:	eb12 020a 	adds.w	r2, r2, sl
  415ce6:	f143 0300 	adc.w	r3, r3, #0

00415cea <.LVL546>:
  415cea:	4691      	mov	r9, r2

00415cec <.LVL547>:
  415cec:	eb0e 0a03 	add.w	sl, lr, r3

00415cf0 <.LVL548>:
  415cf0:	e799      	b.n	415c26 <.LVL517>

00415cf2 <.LBE69>:
  dst->used = pa;
  415cf2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  415cf4:	4622      	mov	r2, r4
  415cf6:	9908      	ldr	r1, [sp, #32]
  415cf8:	460b      	mov	r3, r1
  415cfa:	6011      	str	r1, [r2, #0]
  fp_clamp (dst);
  415cfc:	b319      	cbz	r1, 415d46 <.LCFI80+0x6>
  415cfe:	1e4a      	subs	r2, r1, #1
  415d00:	3301      	adds	r3, #1
  415d02:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
  415d06:	b963      	cbnz	r3, 415d22 <.LBE69+0x30>
  415d08:	eb04 0381 	add.w	r3, r4, r1, lsl #2
  415d0c:	3304      	adds	r3, #4
  415d0e:	e000      	b.n	415d12 <.LBE69+0x20>
  415d10:	4602      	mov	r2, r0
  415d12:	b1aa      	cbz	r2, 415d40 <.LCFI80>
  415d14:	1e50      	subs	r0, r2, #1
  415d16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  415d1a:	2900      	cmp	r1, #0
  415d1c:	d0f8      	beq.n	415d10 <.LBE69+0x1e>
  415d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  415d20:	601a      	str	r2, [r3, #0]
  415d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  415d24:	685b      	ldr	r3, [r3, #4]
  415d26:	990a      	ldr	r1, [sp, #40]	; 0x28
  415d28:	460a      	mov	r2, r1
  415d2a:	604b      	str	r3, [r1, #4]
  if (dst != B) {
  415d2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  415d2e:	428a      	cmp	r2, r1
  415d30:	d002      	beq.n	415d38 <.LVL550>
     fp_copy(dst, B);
  415d32:	4610      	mov	r0, r2
  415d34:	f007 fb6c 	bl	41d410 <.LFE194>

00415d38 <.LVL550>:
}
  415d38:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c

00415d3c <.LCFI79>:
  415d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00415d40 <.LCFI80>:
  415d40:	2300      	movs	r3, #0
  415d42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  415d44:	6013      	str	r3, [r2, #0]
  fp_clamp (dst);
  415d46:	2300      	movs	r3, #0
  415d48:	e7ed      	b.n	415d26 <.LBE69+0x34>

Disassembly of section .text.fp_montgomery_reduce%91:

00415d4a <fp_montgomery_reduce>:
{
  415d4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00415d4e <.LCFI19>:
  415d4e:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234

00415d52 <.LCFI20>:
   if (m->used > (FP_SIZE/2)) {
  415d52:	f8d1 b000 	ldr.w	fp, [r1]
  415d56:	f1bb 0f44 	cmp.w	fp, #68	; 0x44
  415d5a:	dd03      	ble.n	415d64 <.LCFI22>

00415d5c <.LVL161>:
}
  415d5c:	f50d 7d0d 	add.w	sp, sp, #564	; 0x234

00415d60 <.LCFI21>:
  415d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00415d64 <.LCFI22>:
  415d64:	4691      	mov	r9, r2
  415d66:	4688      	mov	r8, r1
  415d68:	4604      	mov	r4, r0
  415d6a:	9000      	str	r0, [sp, #0]
   XMEMSET(c, 0, sizeof(c));
  415d6c:	f44f 7209 	mov.w	r2, #548	; 0x224

00415d70 <.LVL163>:
  415d70:	2100      	movs	r1, #0

00415d72 <.LVL164>:
  415d72:	a803      	add	r0, sp, #12

00415d74 <.LVL165>:
  415d74:	f004 f814 	bl	419da0 <.LFE166>

00415d78 <.LVL166>:
   oldused = a->used;
  415d78:	6823      	ldr	r3, [r4, #0]
  415d7a:	4619      	mov	r1, r3
  415d7c:	9301      	str	r3, [sp, #4]

00415d7e <.LVL167>:
   for (x = 0; x < oldused; x++) {
  415d7e:	2b00      	cmp	r3, #0
  415d80:	dd0b      	ble.n	415d9a <.LVL169>
  415d82:	4623      	mov	r3, r4
  415d84:	3304      	adds	r3, #4
  415d86:	aa02      	add	r2, sp, #8
  415d88:	1c48      	adds	r0, r1, #1
  415d8a:	eb04 0080 	add.w	r0, r4, r0, lsl #2

00415d8e <.LVL168>:
       c[x] = a->dp[x];
  415d8e:	f853 1f04 	ldr.w	r1, [r3, #4]!
  415d92:	f842 1f04 	str.w	r1, [r2, #4]!
   for (x = 0; x < oldused; x++) {
  415d96:	4283      	cmp	r3, r0
  415d98:	d1f9      	bne.n	415d8e <.LVL168>

00415d9a <.LVL169>:
   for (x = 0; x < pa; x++) {
  415d9a:	f1bb 0f00 	cmp.w	fp, #0
  415d9e:	dd30      	ble.n	415e02 <.LBE9>
  415da0:	af02      	add	r7, sp, #8
  415da2:	ea4f 038b 	mov.w	r3, fp, lsl #2
  415da6:	aa03      	add	r2, sp, #12
  415da8:	eb02 0e03 	add.w	lr, r2, r3
  415dac:	3b04      	subs	r3, #4
  415dae:	eb02 0c03 	add.w	ip, r2, r3

00415db2 <.LBB6>:
           PROPCARRY;
  415db2:	f04f 0a01 	mov.w	sl, #1
  415db6:	e00a      	b.n	415dce <.LBB9>

00415db8 <.LVL170>:
  415db8:	4652      	mov	r2, sl

00415dba <.LVL171>:
  415dba:	680b      	ldr	r3, [r1, #0]
  415dbc:	4413      	add	r3, r2
  415dbe:	f841 3b04 	str.w	r3, [r1], #4

00415dc2 <.LBE7>:
       while (cy) {
  415dc2:	4293      	cmp	r3, r2
  415dc4:	d3f8      	bcc.n	415db8 <.LVL170>

00415dc6 <.LVL173>:
  415dc6:	f10e 0e04 	add.w	lr, lr, #4

00415dca <.LBE6>:
   for (x = 0; x < pa; x++) {
  415dca:	4567      	cmp	r7, ip
  415dcc:	d019      	beq.n	415e02 <.LBE9>

00415dce <.LBB9>:
       LOOP_START;
  415dce:	f857 5f04 	ldr.w	r5, [r7, #4]!
  415dd2:	fb05 f509 	mul.w	r5, r5, r9

00415dd6 <.LVL175>:
       tmpm = m->dp;
  415dd6:	f108 0008 	add.w	r0, r8, #8

00415dda <.LVL176>:
  415dda:	4676      	mov	r6, lr
  415ddc:	4639      	mov	r1, r7
  415dde:	2200      	movs	r2, #0

00415de0 <.LBB8>:
          INNERMUL;
  415de0:	f850 4b04 	ldr.w	r4, [r0], #4

00415de4 <.LVL178>:
  415de4:	2300      	movs	r3, #0
  415de6:	fbe5 2304 	umlal	r2, r3, r5, r4

00415dea <.LVL179>:
  415dea:	680c      	ldr	r4, [r1, #0]
  415dec:	1912      	adds	r2, r2, r4
  415dee:	f143 0300 	adc.w	r3, r3, #0

00415df2 <.LVL180>:
  415df2:	f841 2b04 	str.w	r2, [r1], #4

00415df6 <.LVL181>:
  415df6:	461a      	mov	r2, r3

00415df8 <.LBE8>:
       for (; y < pa; y++) {
  415df8:	42b1      	cmp	r1, r6
  415dfa:	d1f1      	bne.n	415de0 <.LBB8>

00415dfc <.LVL183>:
       while (cy) {
  415dfc:	2b00      	cmp	r3, #0
  415dfe:	d1dc      	bne.n	415dba <.LVL171>
  415e00:	e7e1      	b.n	415dc6 <.LVL173>

00415e02 <.LBE9>:
  _c   = c + pa;
  415e02:	ea4f 018b 	mov.w	r1, fp, lsl #2
  415e06:	ab03      	add	r3, sp, #12
  415e08:	1858      	adds	r0, r3, r1

00415e0a <.LVL185>:
  tmpm = a->dp;
  415e0a:	9c00      	ldr	r4, [sp, #0]
  415e0c:	4623      	mov	r3, r4
  415e0e:	f104 0208 	add.w	r2, r4, #8

00415e12 <.LVL186>:
  for (x = 0; x < pa+1; x++) {
  415e12:	f10b 0601 	add.w	r6, fp, #1
  415e16:	2e00      	cmp	r6, #0
  415e18:	dd22      	ble.n	415e60 <.LVL198>
  415e1a:	3304      	adds	r3, #4
  415e1c:	1855      	adds	r5, r2, r1

00415e1e <.LVL187>:
     *tmpm++ = *_c++;
  415e1e:	f850 4b04 	ldr.w	r4, [r0], #4

00415e22 <.LVL188>:
  415e22:	f843 4f04 	str.w	r4, [r3, #4]!

00415e26 <.LVL189>:
  for (x = 0; x < pa+1; x++) {
  415e26:	42ab      	cmp	r3, r5
  415e28:	d1f9      	bne.n	415e1e <.LVL187>
  415e2a:	1d0b      	adds	r3, r1, #4
  415e2c:	441a      	add	r2, r3

00415e2e <.LVL190>:
  for (; x < oldused; x++) {
  415e2e:	9b01      	ldr	r3, [sp, #4]
  415e30:	42b3      	cmp	r3, r6
  415e32:	dd3a      	ble.n	415eaa <.LVL202>
  for (x = 0; x < pa+1; x++) {
  415e34:	4633      	mov	r3, r6

00415e36 <.LVL191>:
     *tmpm++ = 0;
  415e36:	2000      	movs	r0, #0

00415e38 <.LVL192>:
  415e38:	9c01      	ldr	r4, [sp, #4]

00415e3a <.LVL193>:
  415e3a:	f842 0b04 	str.w	r0, [r2], #4

00415e3e <.LVL194>:
  for (; x < oldused; x++) {
  415e3e:	3301      	adds	r3, #1

00415e40 <.LVL195>:
  415e40:	429c      	cmp	r4, r3
  415e42:	d1fa      	bne.n	415e3a <.LVL193>

00415e44 <.LVL196>:
  a->used = pa+1;
  415e44:	9b00      	ldr	r3, [sp, #0]
  415e46:	601e      	str	r6, [r3, #0]
  fp_clamp(a);
  415e48:	b1f6      	cbz	r6, 415e88 <.LVL199+0x1e>
  415e4a:	f10b 0302 	add.w	r3, fp, #2
  415e4e:	9800      	ldr	r0, [sp, #0]
  415e50:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  415e54:	b993      	cbnz	r3, 415e7c <.LVL199+0x12>
  415e56:	f101 0308 	add.w	r3, r1, #8
  415e5a:	4403      	add	r3, r0
  415e5c:	465a      	mov	r2, fp

00415e5e <.LVL197>:
  415e5e:	e005      	b.n	415e6c <.LVL199+0x2>

00415e60 <.LVL198>:
  for (; x < oldused; x++) {
  415e60:	9b01      	ldr	r3, [sp, #4]
  415e62:	2b00      	cmp	r3, #0
  415e64:	ddee      	ble.n	415e44 <.LVL196>
  for (x = 0; x < pa+1; x++) {
  415e66:	2300      	movs	r3, #0
  415e68:	e7e5      	b.n	415e36 <.LVL191>

00415e6a <.LVL199>:
  fp_clamp(a);
  415e6a:	4602      	mov	r2, r0
  415e6c:	b14a      	cbz	r2, 415e82 <.LVL199+0x18>
  415e6e:	1e50      	subs	r0, r2, #1
  415e70:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  415e74:	2900      	cmp	r1, #0
  415e76:	d0f8      	beq.n	415e6a <.LVL199>
  415e78:	9b00      	ldr	r3, [sp, #0]
  415e7a:	601a      	str	r2, [r3, #0]
  415e7c:	9b00      	ldr	r3, [sp, #0]
  415e7e:	685b      	ldr	r3, [r3, #4]
  415e80:	e003      	b.n	415e8a <.LVL199+0x20>
  415e82:	2300      	movs	r3, #0
  415e84:	9a00      	ldr	r2, [sp, #0]
  415e86:	6013      	str	r3, [r2, #0]
  415e88:	2300      	movs	r3, #0
  415e8a:	9c00      	ldr	r4, [sp, #0]
  415e8c:	6063      	str	r3, [r4, #4]
  if (fp_cmp_mag (a, m) != FP_LT) {
  415e8e:	4641      	mov	r1, r8
  415e90:	4620      	mov	r0, r4
  415e92:	f005 fcec 	bl	41b86e <.LFE179>

00415e96 <.LVL200>:
  415e96:	f1b0 3fff 	cmp.w	r0, #4294967295
  415e9a:	f43f af5f 	beq.w	415d5c <.LVL161>
    s_fp_sub (a, m, a);
  415e9e:	4622      	mov	r2, r4
  415ea0:	4641      	mov	r1, r8
  415ea2:	4620      	mov	r0, r4
  415ea4:	f001 fdec 	bl	417a80 <.LBE840>

00415ea8 <.LVL201>:
  415ea8:	e758      	b.n	415d5c <.LVL161>

00415eaa <.LVL202>:
  a->used = pa+1;
  415eaa:	9b00      	ldr	r3, [sp, #0]
  415eac:	601e      	str	r6, [r3, #0]
  415eae:	e7cc      	b.n	415e4a <.LVL196+0x6>

Disassembly of section .text.rsa_test%92:

00415eb0 <rsa_test>:
{
  415eb0:	b570      	push	{r4, r5, r6, lr}

00415eb2 <.LCFI66>:
  415eb2:	f5ad 5d9c 	sub.w	sp, sp, #4992	; 0x1380

00415eb6 <.LCFI67>:
  415eb6:	b084      	sub	sp, #16

00415eb8 <.LCFI68>:
    word32 idx = 0;
  415eb8:	2200      	movs	r2, #0
  415eba:	4b51      	ldr	r3, [pc, #324]	; (416000 <.LVL178>)
  415ebc:	f241 3190 	movw	r1, #5008	; 0x1390
  415ec0:	4469      	add	r1, sp
  415ec2:	50ca      	str	r2, [r1, r3]
    byte   in[] = "Everyone gets Friday off.";
  415ec4:	ac82      	add	r4, sp, #520	; 0x208
  415ec6:	4d4f      	ldr	r5, [pc, #316]	; (416004 <.LVL178+0x4>)
  415ec8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  415eca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  415ecc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  415ed0:	c403      	stmia	r4!, {r0, r1}
  415ed2:	8022      	strh	r2, [r4, #0]
    word32 inLen = (word32)strlen((char*)in);
  415ed4:	a882      	add	r0, sp, #520	; 0x208
  415ed6:	f001 ff93 	bl	417e00 <strlen>

00415eda <.LVL152>:
  415eda:	4605      	mov	r5, r0

00415edc <.LVL153>:
    appData.rsa_test_result = 9;
  415edc:	2209      	movs	r2, #9
  415ede:	4b4a      	ldr	r3, [pc, #296]	; (416008 <.LVL178+0x8>)
  415ee0:	63da      	str	r2, [r3, #60]	; 0x3c
    tmp = (byte*)malloc(FOURK_BUF);
  415ee2:	f44f 5080 	mov.w	r0, #4096	; 0x1000

00415ee6 <.LVL154>:
  415ee6:	f007 fe2b 	bl	41db40 <.LFE0>

00415eea <.LVL155>:
    if (tmp != NULL)
  415eea:	4604      	mov	r4, r0
  415eec:	b110      	cbz	r0, 415ef4 <.LVL155+0xa>
        appData.rsa_test_result--;
  415eee:	2208      	movs	r2, #8
  415ef0:	4b45      	ldr	r3, [pc, #276]	; (416008 <.LVL178+0x8>)
  415ef2:	63da      	str	r2, [r3, #60]	; 0x3c
    XMEMCPY(tmp, client_key_der_2048, sizeof_client_key_der_2048);
  415ef4:	f44f 6695 	mov.w	r6, #1192	; 0x4a8
  415ef8:	4632      	mov	r2, r6
  415efa:	4944      	ldr	r1, [pc, #272]	; (41600c <.LVL178+0xc>)
  415efc:	4620      	mov	r0, r4

00415efe <.LVL156>:
  415efe:	f000 fa8d 	bl	41641c <memcpy>

00415f02 <.LVL157>:
    wc_InitRsaKey(&key, 0);
  415f02:	2100      	movs	r1, #0
  415f04:	a88e      	add	r0, sp, #568	; 0x238
  415f06:	f007 fe64 	bl	41dbd2 <.LFE14>

00415f0a <.LVL158>:
    ret = wc_RsaPrivateKeyDecode(tmp, &idx, &key, (word32)bytes);
  415f0a:	4633      	mov	r3, r6
  415f0c:	aa8e      	add	r2, sp, #568	; 0x238
  415f0e:	a989      	add	r1, sp, #548	; 0x224
  415f10:	4620      	mov	r0, r4
  415f12:	f001 f957 	bl	4171c4 <.LFE28>

00415f16 <.LVL159>:
    if (ret == 0) appData.rsa_test_result--;
  415f16:	b918      	cbnz	r0, 415f20 <.LVL159+0xa>
  415f18:	4a3b      	ldr	r2, [pc, #236]	; (416008 <.LVL178+0x8>)
  415f1a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  415f1c:	3b01      	subs	r3, #1
  415f1e:	63d3      	str	r3, [r2, #60]	; 0x3c
    ret = CRYPT_RNG_Initialize((CRYPT_RNG_CTX*)&rng);
  415f20:	a88a      	add	r0, sp, #552	; 0x228

00415f22 <.LVL160>:
  415f22:	f007 fdcd 	bl	41dac0 <.LFE178>

00415f26 <.LVL161>:
    if (ret == 0) appData.rsa_test_result--;
  415f26:	b918      	cbnz	r0, 415f30 <.LVL161+0xa>
  415f28:	4a37      	ldr	r2, [pc, #220]	; (416008 <.LVL178+0x8>)
  415f2a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  415f2c:	3b01      	subs	r3, #1
  415f2e:	63d3      	str	r3, [r2, #60]	; 0x3c
    ret = wc_RsaPublicEncrypt(in, inLen, out, sizeof(out), &key, &rng);
  415f30:	ab8a      	add	r3, sp, #552	; 0x228
  415f32:	9301      	str	r3, [sp, #4]
  415f34:	ab8e      	add	r3, sp, #568	; 0x238
  415f36:	9300      	str	r3, [sp, #0]
  415f38:	f44f 7380 	mov.w	r3, #256	; 0x100
  415f3c:	aa42      	add	r2, sp, #264	; 0x108
  415f3e:	4629      	mov	r1, r5
  415f40:	a882      	add	r0, sp, #520	; 0x208

00415f42 <.LVL162>:
  415f42:	f007 fa2d 	bl	41d3a0 <wc_RsaPublicEncrypt>

00415f46 <.LVL163>:
    if (ret >= 0) appData.rsa_test_result--;
  415f46:	1e01      	subs	r1, r0, #0
  415f48:	db03      	blt.n	415f52 <.LVL163+0xc>
  415f4a:	4a2f      	ldr	r2, [pc, #188]	; (416008 <.LVL178+0x8>)
  415f4c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  415f4e:	3b01      	subs	r3, #1
  415f50:	63d3      	str	r3, [r2, #60]	; 0x3c
    ret = wc_RsaPrivateDecrypt(out, ret, plain, sizeof(plain), &key);
  415f52:	ab8e      	add	r3, sp, #568	; 0x238
  415f54:	9300      	str	r3, [sp, #0]
  415f56:	f44f 7380 	mov.w	r3, #256	; 0x100
  415f5a:	aa02      	add	r2, sp, #8
  415f5c:	a842      	add	r0, sp, #264	; 0x108

00415f5e <.LVL164>:
  415f5e:	f007 f97f 	bl	41d260 <.LFE219>

00415f62 <.LVL165>:
    if (ret >= 0) appData.rsa_test_result--;
  415f62:	2800      	cmp	r0, #0
  415f64:	db03      	blt.n	415f6e <.LVL165+0xc>
  415f66:	4a28      	ldr	r2, [pc, #160]	; (416008 <.LVL178+0x8>)
  415f68:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  415f6a:	3b01      	subs	r3, #1
  415f6c:	63d3      	str	r3, [r2, #60]	; 0x3c
    if (!(memcmp(plain, in, inLen))) appData.rsa_test_result--;
  415f6e:	462a      	mov	r2, r5
  415f70:	a982      	add	r1, sp, #520	; 0x208
  415f72:	a802      	add	r0, sp, #8

00415f74 <.LVL166>:
  415f74:	f005 fec8 	bl	41bd08 <memcmp>

00415f78 <.LVL167>:
  415f78:	b918      	cbnz	r0, 415f82 <.LVL167+0xa>
  415f7a:	4a23      	ldr	r2, [pc, #140]	; (416008 <.LVL178+0x8>)
  415f7c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  415f7e:	3b01      	subs	r3, #1
  415f80:	63d3      	str	r3, [r2, #60]	; 0x3c
    ret = wc_RsaSSL_Sign(in, inLen, out, sizeof(out), &key, &rng);
  415f82:	ab8a      	add	r3, sp, #552	; 0x228
  415f84:	9301      	str	r3, [sp, #4]
  415f86:	ab8e      	add	r3, sp, #568	; 0x238
  415f88:	9300      	str	r3, [sp, #0]
  415f8a:	f44f 7380 	mov.w	r3, #256	; 0x100
  415f8e:	aa42      	add	r2, sp, #264	; 0x108
  415f90:	4629      	mov	r1, r5
  415f92:	a882      	add	r0, sp, #520	; 0x208
  415f94:	f007 f978 	bl	41d288 <.LFE197>

00415f98 <.LVL168>:
    if (ret >= 0) appData.rsa_test_result--;
  415f98:	1e06      	subs	r6, r0, #0
  415f9a:	db03      	blt.n	415fa4 <.LVL168+0xc>
  415f9c:	4a1a      	ldr	r2, [pc, #104]	; (416008 <.LVL178+0x8>)
  415f9e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  415fa0:	3b01      	subs	r3, #1
  415fa2:	63d3      	str	r3, [r2, #60]	; 0x3c
    memset(plain, 0, sizeof(plain));
  415fa4:	f44f 7580 	mov.w	r5, #256	; 0x100

00415fa8 <.LVL169>:
  415fa8:	462a      	mov	r2, r5
  415faa:	2100      	movs	r1, #0
  415fac:	a802      	add	r0, sp, #8

00415fae <.LVL170>:
  415fae:	f003 fef7 	bl	419da0 <.LFE166>

00415fb2 <.LVL171>:
    ret = wc_RsaSSL_Verify(out, ret, plain, sizeof(plain), &key);
  415fb2:	ab8e      	add	r3, sp, #568	; 0x238
  415fb4:	9300      	str	r3, [sp, #0]
  415fb6:	462b      	mov	r3, r5
  415fb8:	aa02      	add	r2, sp, #8
  415fba:	4631      	mov	r1, r6
  415fbc:	a842      	add	r0, sp, #264	; 0x108
  415fbe:	f007 f877 	bl	41d0b0 <L0>

00415fc2 <.LVL172>:
    if (ret >= 0) appData.rsa_test_result--;
  415fc2:	1e02      	subs	r2, r0, #0
  415fc4:	db03      	blt.n	415fce <.LVL172+0xc>
  415fc6:	4910      	ldr	r1, [pc, #64]	; (416008 <.LVL178+0x8>)
  415fc8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  415fca:	3b01      	subs	r3, #1
  415fcc:	63cb      	str	r3, [r1, #60]	; 0x3c
    if (!(memcmp(plain, in, ret))) appData.rsa_test_result--;
  415fce:	a982      	add	r1, sp, #520	; 0x208
  415fd0:	a802      	add	r0, sp, #8

00415fd2 <.LVL173>:
  415fd2:	f005 fe99 	bl	41bd08 <memcmp>

00415fd6 <.LVL174>:
  415fd6:	b918      	cbnz	r0, 415fe0 <.LVL174+0xa>
  415fd8:	4a0b      	ldr	r2, [pc, #44]	; (416008 <.LVL178+0x8>)
  415fda:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  415fdc:	3b01      	subs	r3, #1
  415fde:	63d3      	str	r3, [r2, #60]	; 0x3c
    XMEMCPY(tmp, client_cert_der_2048, sizeof_client_cert_der_2048);
  415fe0:	f240 429c 	movw	r2, #1180	; 0x49c
  415fe4:	490a      	ldr	r1, [pc, #40]	; (416010 <.LVL178+0x10>)
  415fe6:	4620      	mov	r0, r4
  415fe8:	f000 fa18 	bl	41641c <memcpy>

00415fec <.LVL175>:
    wc_FreeRsaKey(&key);
  415fec:	a88e      	add	r0, sp, #568	; 0x238
  415fee:	f004 f8e1 	bl	41a1b4 <.LFE165>

00415ff2 <.LVL176>:
    free(tmp);
  415ff2:	4620      	mov	r0, r4
  415ff4:	f007 fdac 	bl	41db50 <.LFE0>

00415ff8 <.LVL177>:
}
  415ff8:	f50d 5d9c 	add.w	sp, sp, #4992	; 0x1380
  415ffc:	b004      	add	sp, #16

00415ffe <.LCFI69>:
  415ffe:	bd70      	pop	{r4, r5, r6, pc}

00416000 <.LVL178>:
  416000:	ffffee94 	.word	0xffffee94
  416004:	0040b42c 	.word	0x0040b42c
  416008:	2040d534 	.word	0x2040d534
  41600c:	0040e378 	.word	0x0040e378
  416010:	0040ecbc 	.word	0x0040ecbc

Disassembly of section .text.DesSetKey%93:

00416014 <DesSetKey>:

        *left = rotrFixed(*left^work, 4U);
    }

    static int DesSetKey(const byte* key, int dir, word32* out)
    {
  416014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00416018 <.LCFI4>:
  416018:	b0a1      	sub	sp, #132	; 0x84

0041601a <.LCFI5>:
  41601a:	9101      	str	r1, [sp, #4]
  41601c:	9200      	str	r2, [sp, #0]

0041601e <.LVL85>:
  41601e:	4d51      	ldr	r5, [pc, #324]	; (416164 <.LBE156+0x8>)
  416020:	1e6a      	subs	r2, r5, #1

00416022 <.LVL86>:
  416022:	f10d 0107 	add.w	r1, sp, #7

00416026 <.LVL87>:
  416026:	3537      	adds	r5, #55	; 0x37

00416028 <.LBB155>:

            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
                l = pc1[j] - 1;                    /* integer bit location        */
                m = l & 07;                        /* find bit                    */
                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
                    bytebit[m])                    /* and which bit of that byte  */
  416028:	4e4f      	ldr	r6, [pc, #316]	; (416168 <.LBE156+0xc>)

0041602a <.LVL88>:
                l = pc1[j] - 1;                    /* integer bit location        */
  41602a:	f812 3f01 	ldrb.w	r3, [r2, #1]!

0041602e <.LVL89>:
  41602e:	3b01      	subs	r3, #1

00416030 <.LVL90>:
                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
  416030:	10dc      	asrs	r4, r3, #3
  416032:	5d04      	ldrb	r4, [r0, r4]
                m = l & 07;                        /* find bit                    */
  416034:	f003 0307 	and.w	r3, r3, #7

00416038 <.LVL91>:
                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
  416038:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]

0041603c <.LVL92>:
                    ? 1 : 0;                       /* and store 1-bit result      */
  41603c:	421c      	tst	r4, r3
  41603e:	bf14      	ite	ne
  416040:	2301      	movne	r3, #1
  416042:	2300      	moveq	r3, #0
  416044:	f801 3f01 	strb.w	r3, [r1, #1]!

00416048 <.LVL93>:
            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
  416048:	42aa      	cmp	r2, r5
  41604a:	d1ee      	bne.n	41602a <.LVL88>
  41604c:	4e47      	ldr	r6, [pc, #284]	; (41616c <.LBE156+0x10>)
  41604e:	9b00      	ldr	r3, [sp, #0]
  416050:	f103 0904 	add.w	r9, r3, #4
  416054:	f106 0810 	add.w	r8, r6, #16
  416058:	46ce      	mov	lr, r9
            }

            for (i = 0; i < 16; i++) {            /* key chunk for each iteration */
                XMEMSET(ks, 0, 8);                /* Clear key schedule */
  41605a:	a81e      	add	r0, sp, #120	; 0x78

0041605c <.LVL94>:
  41605c:	f8df c114 	ldr.w	ip, [pc, #276]	; 416174 <.LBE156+0x18>

                /* rotate left and right halves independently */
                for (j = 0; j < 48; j++) {        /* select bits individually     */
                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
                        l= j % 6;                 /* mask it in if it's there     */
                        ks[j/6] |= bytebit[l] >> 2;
  416060:	4d43      	ldr	r5, [pc, #268]	; (416170 <.LBE156+0x14>)
  416062:	4c41      	ldr	r4, [pc, #260]	; (416168 <.LBE156+0xc>)
  416064:	46b3      	mov	fp, r6
  416066:	e041      	b.n	4160ec <.LVL103+0x4>

00416068 <.LVL95>:
  416068:	f10c 37ff 	add.w	r7, ip, #4294967295
                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
  41606c:	2300      	movs	r3, #0
  41606e:	e002      	b.n	416076 <.LVL96+0x6>

00416070 <.LVL96>:
                for (j = 0; j < 48; j++) {        /* select bits individually     */
  416070:	3301      	adds	r3, #1
  416072:	2b30      	cmp	r3, #48	; 0x30
  416074:	d016      	beq.n	4160a4 <.LVL100>
                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
  416076:	f817 2f01 	ldrb.w	r2, [r7, #1]!
  41607a:	a920      	add	r1, sp, #128	; 0x80
  41607c:	440a      	add	r2, r1
  41607e:	f812 2c41 	ldrb.w	r2, [r2, #-65]
  416082:	2a00      	cmp	r2, #0
  416084:	d0f4      	beq.n	416070 <.LVL96>

00416086 <.LVL99>:
                        ks[j/6] |= bytebit[l] >> 2;
  416086:	fb85 1203 	smull	r1, r2, r5, r3
  41608a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
                        l= j % 6;                 /* mask it in if it's there     */
  41608e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
  416092:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
                        ks[j/6] |= bytebit[l] >> 2;
  416096:	f854 6021 	ldr.w	r6, [r4, r1, lsl #2]
  41609a:	5c81      	ldrb	r1, [r0, r2]
  41609c:	ea41 01a6 	orr.w	r1, r1, r6, asr #2
  4160a0:	5481      	strb	r1, [r0, r2]
  4160a2:	e7e5      	b.n	416070 <.LVL96>

004160a4 <.LVL100>:
                    }
                }

                /* Now convert to odd/even interleaved form for use in F */
                out[2*i] = ((word32) ks[0] << 24)
  4160a4:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
                         | ((word32) ks[2] << 16)
  4160a8:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a

004160ac <.LVL101>:
  4160ac:	041b      	lsls	r3, r3, #16
  4160ae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                         | ((word32) ks[4] << 8)
                         | ((word32) ks[6]);
  4160b2:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
  4160b6:	4313      	orrs	r3, r2
                         | ((word32) ks[4] << 8)
  4160b8:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
                         | ((word32) ks[6]);
  4160bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                out[2*i] = ((word32) ks[0] << 24)
  4160c0:	f84e 3c04 	str.w	r3, [lr, #-4]

                out[2*i + 1] = ((word32) ks[1] << 24)
  4160c4:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
                             | ((word32) ks[3] << 16)
  4160c8:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
  4160cc:	041b      	lsls	r3, r3, #16
  4160ce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                             | ((word32) ks[5] << 8)
                             | ((word32) ks[7]);
  4160d2:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
  4160d6:	4313      	orrs	r3, r2
                             | ((word32) ks[5] << 8)
  4160d8:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
                             | ((word32) ks[7]);
  4160dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                out[2*i + 1] = ((word32) ks[1] << 24)
  4160e0:	f84e 3b08 	str.w	r3, [lr], #8

004160e4 <.LVL102>:
  4160e4:	f10b 0b01 	add.w	fp, fp, #1

004160e8 <.LVL103>:
            for (i = 0; i < 16; i++) {            /* key chunk for each iteration */
  4160e8:	45c3      	cmp	fp, r8
  4160ea:	d01e      	beq.n	41612a <.LVL111>
                XMEMSET(ks, 0, 8);                /* Clear key schedule */
  4160ec:	2300      	movs	r3, #0
  4160ee:	6003      	str	r3, [r0, #0]
  4160f0:	6043      	str	r3, [r0, #4]

004160f2 <.LVL105>:
                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
  4160f2:	f89b 7000 	ldrb.w	r7, [fp]

004160f6 <.LVL106>:
  4160f6:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
  4160fa:	463b      	mov	r3, r7
                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
  4160fc:	2200      	movs	r2, #0
                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
  4160fe:	f04f 0a1c 	mov.w	sl, #28

00416102 <.LVL107>:
  416102:	459a      	cmp	sl, r3
  416104:	bfd8      	it	le
  416106:	3b1c      	suble	r3, #28

00416108 <.LVL108>:
  416108:	ae20      	add	r6, sp, #128	; 0x80
  41610a:	4433      	add	r3, r6
  41610c:	f813 3c78 	ldrb.w	r3, [r3, #-120]
                    pcr[j] =
  416110:	f801 3f01 	strb.w	r3, [r1, #1]!
                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
  416114:	3201      	adds	r2, #1

00416116 <.LVL109>:
  416116:	2a38      	cmp	r2, #56	; 0x38
  416118:	d0a6      	beq.n	416068 <.LVL95>
                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
  41611a:	18bb      	adds	r3, r7, r2

0041611c <.LVL110>:
  41611c:	2a1c      	cmp	r2, #28
  41611e:	bfb4      	ite	lt
  416120:	f04f 0a1c 	movlt.w	sl, #28
  416124:	f04f 0a38 	movge.w	sl, #56	; 0x38
  416128:	e7eb      	b.n	416102 <.LVL107>

0041612a <.LVL111>:
            }

            /* reverse key schedule order */
            if (dir == DES_DECRYPTION) {
  41612a:	9b01      	ldr	r3, [sp, #4]
  41612c:	2b01      	cmp	r3, #1
  41612e:	d003      	beq.n	416138 <.LCFI7>

00416130 <.LBE155>:
            XFREE(buffer, NULL, DYNAMIC_TYPE_TMP_BUFFER);
    #endif
        }

        return 0;
    }
  416130:	2000      	movs	r0, #0
  416132:	b021      	add	sp, #132	; 0x84

00416134 <.LCFI6>:
  416134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00416138 <.LCFI7>:
  416138:	9b00      	ldr	r3, [sp, #0]
  41613a:	461a      	mov	r2, r3
  41613c:	f103 0440 	add.w	r4, r3, #64	; 0x40

00416140 <.LBB156>:
                    word32 swap = out[i];
  416140:	f859 1c04 	ldr.w	r1, [r9, #-4]
                    out[i] = out[DES_KS_SIZE - 2 - i];
  416144:	6f98      	ldr	r0, [r3, #120]	; 0x78
  416146:	f849 0c04 	str.w	r0, [r9, #-4]
                    out[DES_KS_SIZE - 2 - i] = swap;
  41614a:	6799      	str	r1, [r3, #120]	; 0x78
                    swap = out[i + 1];
  41614c:	6851      	ldr	r1, [r2, #4]
                    out[i + 1] = out[DES_KS_SIZE - 1 - i];
  41614e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
  416150:	6050      	str	r0, [r2, #4]
                    out[DES_KS_SIZE - 1 - i] = swap;
  416152:	67d9      	str	r1, [r3, #124]	; 0x7c
  416154:	3208      	adds	r2, #8
  416156:	3b08      	subs	r3, #8
  416158:	f109 0908 	add.w	r9, r9, #8

0041615c <.LBE156>:
                for (i = 0; i < 16; i += 2) {
  41615c:	42a2      	cmp	r2, r4
  41615e:	d1ef      	bne.n	416140 <.LBB156>
  416160:	e7e6      	b.n	416130 <.LBE155>
  416162:	bf00      	nop
  416164:	0041ccc4 	.word	0x0041ccc4
  416168:	0041d4e0 	.word	0x0041d4e0
  41616c:	0041dad0 	.word	0x0041dad0
  416170:	2aaaaaab 	.word	0x2aaaaaab
  416174:	0041cfc0 	.word	0x0041cfc0

Disassembly of section .text.Console_UART_Tasks%94:

00416178 <Console_UART_Tasks>:
        consUartData.isReadComplete = true;
    }
}

void Console_UART_Tasks(SYS_MODULE_OBJ object)
{
  416178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0041617c <.LCFI5>:
    /* Update the application state machine based
     * on the current state */
    struct QPacket pkt;
    size_t *sizeRead;

    switch(consUartData.state)
  41617c:	4b4c      	ldr	r3, [pc, #304]	; (4162b0 <.LVL45+0x4>)
  41617e:	781b      	ldrb	r3, [r3, #0]
  416180:	2b08      	cmp	r3, #8
  416182:	f200 8093 	bhi.w	4162ac <.LVL45>
  416186:	e8df f003 	tbb	[pc, r3]
  41618a:	9105      	.short	0x9105
  41618c:	6029124f 	.word	0x6029124f
  416190:	9191      	.short	0x9191
  416192:	8f          	.byte	0x8f
  416193:	00          	.byte	0x00
    {
        case CONSOLE_UART_STATE_INIT:

            /* Register a callback with device layer to get event notification (for end point 0) */
            USART1_WriteCallbackRegister(UARTDeviceWriteCallback, 0);
  416194:	2100      	movs	r1, #0
  416196:	4847      	ldr	r0, [pc, #284]	; (4162b4 <.LVL45+0x8>)

00416198 <.LVL19>:
  416198:	f007 fcba 	bl	41db10 <.LFE171>

0041619c <.LVL20>:
            USART1_ReadCallbackRegister(UARTDeviceReadCallback, 0);
  41619c:	2100      	movs	r1, #0
  41619e:	4846      	ldr	r0, [pc, #280]	; (4162b8 <.LVL45+0xc>)
  4161a0:	f007 fcbe 	bl	41db20 <.LFE150>

004161a4 <.LVL21>:

            /* If the driver was opened, it is ready for operation */
            consUartData.state = CONSOLE_UART_STATE_READY;
  4161a4:	2202      	movs	r2, #2
  4161a6:	4b42      	ldr	r3, [pc, #264]	; (4162b0 <.LVL45+0x4>)
  4161a8:	701a      	strb	r2, [r3, #0]

            break;
  4161aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004161ae <.LVL22>:

        case CONSOLE_UART_STATE_SCHEDULE_READ:

            consUartData.state = CONSOLE_UART_STATE_WAIT_FOR_READ_COMPLETE;
  4161ae:	2204      	movs	r2, #4
  4161b0:	4b3f      	ldr	r3, [pc, #252]	; (4162b0 <.LVL45+0x4>)
  4161b2:	701a      	strb	r2, [r3, #0]

            if (readQueue.numElem)
  4161b4:	4b41      	ldr	r3, [pc, #260]	; (4162bc <.LVL45+0x10>)
  4161b6:	689b      	ldr	r3, [r3, #8]
  4161b8:	2b00      	cmp	r3, #0
  4161ba:	d077      	beq.n	4162ac <.LVL45>
            {
                consUartData.isReadComplete = false;
  4161bc:	2200      	movs	r2, #0
  4161be:	4b3c      	ldr	r3, [pc, #240]	; (4162b0 <.LVL45+0x4>)
  4161c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                pkt = rdQueueElements[readQueue.tailPos];
  4161c4:	4b3e      	ldr	r3, [pc, #248]	; (4162c0 <.LVL45+0x14>)
  4161c6:	4a3d      	ldr	r2, [pc, #244]	; (4162bc <.LVL45+0x10>)
  4161c8:	6812      	ldr	r2, [r2, #0]
  4161ca:	eb03 01c2 	add.w	r1, r3, r2, lsl #3

004161ce <.LVL23>:

                USART1_Read (pkt.data.buf, pkt.sz);
  4161ce:	6849      	ldr	r1, [r1, #4]

004161d0 <.LVL24>:
  4161d0:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]

004161d4 <.LVL25>:
  4161d4:	f006 fd02 	bl	41cbdc <.LFE145>

004161d8 <.LVL26>:
  4161d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004161dc <.LVL27>:
            }
            break;

        case CONSOLE_UART_STATE_WAIT_FOR_READ_COMPLETE:

            if(consUartData.isReadComplete)
  4161dc:	4b34      	ldr	r3, [pc, #208]	; (4162b0 <.LVL45+0x4>)
  4161de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
  4161e2:	b943      	cbnz	r3, 4161f6 <.LVL27+0x1a>
                    consUartData.state = CONSOLE_UART_STATE_SCHEDULE_READ;
                }
            }
            else
            {
                if (writeQueue.numElem)
  4161e4:	4b37      	ldr	r3, [pc, #220]	; (4162c4 <.LVL45+0x18>)
  4161e6:	689b      	ldr	r3, [r3, #8]
  4161e8:	2b00      	cmp	r3, #0
  4161ea:	d05f      	beq.n	4162ac <.LVL45>
                {
                    consUartData.state = CONSOLE_UART_STATE_SCHEDULE_WRITE;
  4161ec:	2205      	movs	r2, #5
  4161ee:	4b30      	ldr	r3, [pc, #192]	; (4162b0 <.LVL45+0x4>)
  4161f0:	701a      	strb	r2, [r3, #0]
  4161f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                sizeRead = &rdQueueElements[readQueue.tailPos].sz;
  4161f6:	4c31      	ldr	r4, [pc, #196]	; (4162bc <.LVL45+0x10>)
  4161f8:	6825      	ldr	r5, [r4, #0]

004161fa <.LVL28>:
                popQueue(&readQueue);
  4161fa:	4620      	mov	r0, r4

004161fc <.LVL29>:
  4161fc:	f007 fa52 	bl	41d6a4 <.LFE4>

00416200 <.LVL30>:
                if (readQueue.numElem == 0)
  416200:	68a3      	ldr	r3, [r4, #8]
  416202:	b963      	cbnz	r3, 41621e <.LVL31+0xa>
                    if (consUartData.rdCallback != NULL)
  416204:	4b2a      	ldr	r3, [pc, #168]	; (4162b0 <.LVL45+0x4>)
  416206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  416208:	b123      	cbz	r3, 416214 <.LVL31>
                sizeRead = &rdQueueElements[readQueue.tailPos].sz;
  41620a:	482d      	ldr	r0, [pc, #180]	; (4162c0 <.LVL45+0x14>)
  41620c:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
                        consUartData.rdCallback(sizeRead);
  416210:	3004      	adds	r0, #4
  416212:	4798      	blx	r3

00416214 <.LVL31>:
                    consUartData.state = CONSOLE_UART_STATE_READY;
  416214:	2202      	movs	r2, #2
  416216:	4b26      	ldr	r3, [pc, #152]	; (4162b0 <.LVL45+0x4>)
  416218:	701a      	strb	r2, [r3, #0]
  41621a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    consUartData.state = CONSOLE_UART_STATE_SCHEDULE_READ;
  41621e:	2203      	movs	r2, #3
  416220:	4b23      	ldr	r3, [pc, #140]	; (4162b0 <.LVL45+0x4>)
  416222:	701a      	strb	r2, [r3, #0]
  416224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00416228 <.LVL33>:
            }
            break;

        case CONSOLE_UART_STATE_READY:

            if (readQueue.numElem)
  416228:	4b24      	ldr	r3, [pc, #144]	; (4162bc <.LVL45+0x10>)
  41622a:	689b      	ldr	r3, [r3, #8]
  41622c:	b943      	cbnz	r3, 416240 <.LVL33+0x18>
            {
                consUartData.state = CONSOLE_UART_STATE_SCHEDULE_READ;
            }
            else if (writeQueue.numElem)
  41622e:	4b25      	ldr	r3, [pc, #148]	; (4162c4 <.LVL45+0x18>)
  416230:	689b      	ldr	r3, [r3, #8]
  416232:	2b00      	cmp	r3, #0
  416234:	d03a      	beq.n	4162ac <.LVL45>
            {
                /* If there is data to be written, then try writing it */
                consUartData.state = CONSOLE_UART_STATE_SCHEDULE_WRITE;
  416236:	2205      	movs	r2, #5
  416238:	4b1d      	ldr	r3, [pc, #116]	; (4162b0 <.LVL45+0x4>)
  41623a:	701a      	strb	r2, [r3, #0]
  41623c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                consUartData.state = CONSOLE_UART_STATE_SCHEDULE_READ;
  416240:	2203      	movs	r2, #3
  416242:	4b1b      	ldr	r3, [pc, #108]	; (4162b0 <.LVL45+0x4>)
  416244:	701a      	strb	r2, [r3, #0]
  416246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            }
            break;

        case CONSOLE_UART_STATE_SCHEDULE_WRITE:

            if (writeQueue.numElem)
  41624a:	4b1e      	ldr	r3, [pc, #120]	; (4162c4 <.LVL45+0x18>)
  41624c:	689b      	ldr	r3, [r3, #8]
  41624e:	b36b      	cbz	r3, 4162ac <.LVL45>
            {
                /* This means there is data to sent out */
                pkt = wrQueueElements[writeQueue.tailPos];
  416250:	4b1d      	ldr	r3, [pc, #116]	; (4162c8 <.LVL45+0x1c>)
  416252:	4a1c      	ldr	r2, [pc, #112]	; (4162c4 <.LVL45+0x18>)
  416254:	6812      	ldr	r2, [r2, #0]
  416256:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
  41625a:	f853 6032 	ldr.w	r6, [r3, r2, lsl #3]

0041625e <.LVL34>:
  41625e:	684d      	ldr	r5, [r1, #4]

00416260 <.LBB6>:

                    if(status == true)
                    {
                        /* This means this buffer was added successfully to
                         * the PLIB. Do a callback. */
                        if (consUartData.wrCallback != NULL)
  416260:	f8df 804c 	ldr.w	r8, [pc, #76]	; 4162b0 <.LVL45+0x4>
                        {
                            consUartData.wrCallback((void *)wrQueueElements[writeQueue.tailPos].data.cbuf);
                        }

                        /* Remove this element from the write queue */
                        popQueue(&writeQueue);
  416264:	4c17      	ldr	r4, [pc, #92]	; (4162c4 <.LVL45+0x18>)
                        pkt = wrQueueElements[writeQueue.tailPos];
  416266:	461f      	mov	r7, r3
  416268:	e00e      	b.n	416288 <.LBB7>

0041626a <.LVL36>:
                            consUartData.wrCallback((void *)wrQueueElements[writeQueue.tailPos].data.cbuf);
  41626a:	6822      	ldr	r2, [r4, #0]
  41626c:	f857 0032 	ldr.w	r0, [r7, r2, lsl #3]

00416270 <.LVL37>:
  416270:	4798      	blx	r3
                        popQueue(&writeQueue);
  416272:	4620      	mov	r0, r4
  416274:	f007 fa16 	bl	41d6a4 <.LFE4>

00416278 <.LVL39>:
                        pkt = wrQueueElements[writeQueue.tailPos];
  416278:	6823      	ldr	r3, [r4, #0]
  41627a:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
  41627e:	f857 6033 	ldr.w	r6, [r7, r3, lsl #3]

00416282 <.LVL40>:
  416282:	6855      	ldr	r5, [r2, #4]

00416284 <.LBE6>:
                    {
                        /* Got an invalid handle. This most likely means
                         * that the write buffer queue is full */
                    }

                } while(writeQueue.numElem);
  416284:	68a3      	ldr	r3, [r4, #8]
  416286:	b153      	cbz	r3, 41629e <.LBE7>

00416288 <.LBB7>:
                    bool status = USART1_Write(pkt.data.buf, pkt.sz);
  416288:	4629      	mov	r1, r5
  41628a:	4630      	mov	r0, r6
  41628c:	f006 f99e 	bl	41c5cc <.LFE165>

00416290 <.LVL42>:
                    if(status == true)
  416290:	2800      	cmp	r0, #0
  416292:	d0f7      	beq.n	416284 <.LBE6>
                        if (consUartData.wrCallback != NULL)
  416294:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
  416298:	2b00      	cmp	r3, #0
  41629a:	d1e6      	bne.n	41626a <.LVL36>
  41629c:	e7e9      	b.n	416272 <.LVL37+0x2>

0041629e <.LBE7>:
                /* If we are here, it either means there is nothing more to
                 * write of the write buffer queue is full. We cannot do much
                 * with respect to write at point. We move the state to
                 * ready */

                consUartData.state = CONSOLE_UART_STATE_READY;
  41629e:	2202      	movs	r2, #2
  4162a0:	4b03      	ldr	r3, [pc, #12]	; (4162b0 <.LVL45+0x4>)
  4162a2:	701a      	strb	r2, [r3, #0]
  4162a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004162a8 <.LVL44>:
        case CONSOLE_UART_STATE_OPERATIONAL_ERROR:

            /* We arrive at this state if the UART driver reports an error on a read or write operation
               We will attempt to recover by flushing the local buffers */

            Console_UART_Flush();
  4162a8:	f006 fc20 	bl	41caec <Console_UART_Flush>

004162ac <.LVL45>:
  4162ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4162b0:	2040d5d4 	.word	0x2040d5d4
  4162b4:	0041db01 	.word	0x0041db01
  4162b8:	0041d901 	.word	0x0041d901
  4162bc:	2040d72c 	.word	0x2040d72c
  4162c0:	2040d584 	.word	0x2040d584
  4162c4:	2040d740 	.word	0x2040d740
  4162c8:	2040d088 	.word	0x2040d088

Disassembly of section .text.deflate_stored%95:

004162cc <deflate_stored>:
{
  4162cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

004162d0 <.LCFI9>:
  4162d0:	4604      	mov	r4, r0
  4162d2:	4688      	mov	r8, r1

004162d4 <.LVL208>:
    if (max_block_size > s->pending_buf_size - 5) {
  4162d4:	68c5      	ldr	r5, [r0, #12]
  4162d6:	3d05      	subs	r5, #5
    ulg max_block_size = 0xffff;
  4162d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4162dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  4162e0:	4295      	cmp	r5, r2
  4162e2:	bf88      	it	hi
  4162e4:	461d      	movhi	r5, r3
        s->lookahead = 0;
  4162e6:	2600      	movs	r6, #0
  4162e8:	4637      	mov	r7, r6
  4162ea:	e049      	b.n	416380 <.LVL216+0x1c>

004162ec <.LVL209>:
            fill_window(s);
  4162ec:	4620      	mov	r0, r4
  4162ee:	f7fe fc89 	bl	414c04 <fill_window>

004162f2 <.LVL210>:
            if (s->lookahead == 0 && flush == Z_NO_FLUSH) return need_more;
  4162f2:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4162f4:	b91b      	cbnz	r3, 4162fe <.LVL210+0xc>
  4162f6:	f1b8 0f00 	cmp.w	r8, #0
  4162fa:	f000 8085 	beq.w	416408 <.LVL223+0x18>
            if (s->lookahead == 0) break; /* flush the current block */
  4162fe:	2b00      	cmp	r3, #0
  416300:	d141      	bne.n	416386 <.LVL216+0x22>
    s->insert = 0;
  416302:	2200      	movs	r2, #0
  416304:	f241 63b4 	movw	r3, #5812	; 0x16b4
  416308:	50e2      	str	r2, [r4, r3]
    if (flush == Z_FINISH) {
  41630a:	f1b8 0f04 	cmp.w	r8, #4
  41630e:	d05f      	beq.n	4163d0 <.LVL220+0x12>
    if ((long)s->strstart > s->block_start)
  416310:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  416312:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  416314:	4290      	cmp	r0, r2
  416316:	dd7d      	ble.n	416414 <.LVL223+0x24>
        FLUSH_BLOCK(s, 0);
  416318:	2a00      	cmp	r2, #0
  41631a:	db73      	blt.n	416404 <.LVL223+0x14>
  41631c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  41631e:	4411      	add	r1, r2
  416320:	2300      	movs	r3, #0
  416322:	1a82      	subs	r2, r0, r2
  416324:	4620      	mov	r0, r4
  416326:	f7f8 ff17 	bl	40f158 <_tr_flush_block>

0041632a <.LVL211>:
  41632a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  41632c:	65e3      	str	r3, [r4, #92]	; 0x5c
  41632e:	6820      	ldr	r0, [r4, #0]
  416330:	f005 ffd6 	bl	41c2e0 <.LFE41>

00416334 <.LVL212>:
  416334:	6823      	ldr	r3, [r4, #0]
  416336:	6918      	ldr	r0, [r3, #16]
            if (s->lookahead == 0 && flush == Z_NO_FLUSH) return need_more;
  416338:	3000      	adds	r0, #0
  41633a:	bf18      	it	ne
  41633c:	2001      	movne	r0, #1
  41633e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00416342 <.LVL213>:
            s->lookahead = (uInt)(s->strstart - max_start);
  416342:	1a9b      	subs	r3, r3, r2
  416344:	6763      	str	r3, [r4, #116]	; 0x74
            s->strstart = (uInt)max_start;
  416346:	66e2      	str	r2, [r4, #108]	; 0x6c
            FLUSH_BLOCK(s, 0);
  416348:	2800      	cmp	r0, #0
  41634a:	db28      	blt.n	41639e <.LVL217+0xa>
  41634c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  41634e:	4401      	add	r1, r0
  416350:	463b      	mov	r3, r7
  416352:	1a12      	subs	r2, r2, r0

00416354 <.LVL214>:
  416354:	4620      	mov	r0, r4
  416356:	f7f8 feff 	bl	40f158 <_tr_flush_block>

0041635a <.LVL215>:
  41635a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  41635c:	65e3      	str	r3, [r4, #92]	; 0x5c
  41635e:	6820      	ldr	r0, [r4, #0]
  416360:	f005 ffbe 	bl	41c2e0 <.LFE41>

00416364 <.LVL216>:
  416364:	6823      	ldr	r3, [r4, #0]
  416366:	691b      	ldr	r3, [r3, #16]
  416368:	2b00      	cmp	r3, #0
  41636a:	d050      	beq.n	41640e <.LVL223+0x1e>
        if (s->strstart - (uInt)s->block_start >= MAX_DIST(s)) {
  41636c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  41636e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  416370:	4611      	mov	r1, r2
  416372:	eba0 0e02 	sub.w	lr, r0, r2
  416376:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  416378:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
  41637c:	459e      	cmp	lr, r3
  41637e:	d210      	bcs.n	4163a2 <.LVL218>
        if (s->lookahead <= 1) {
  416380:	6f63      	ldr	r3, [r4, #116]	; 0x74
  416382:	2b01      	cmp	r3, #1
  416384:	d9b2      	bls.n	4162ec <.LVL209>
        s->strstart += s->lookahead;
  416386:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  416388:	6f62      	ldr	r2, [r4, #116]	; 0x74
  41638a:	4413      	add	r3, r2
  41638c:	66e3      	str	r3, [r4, #108]	; 0x6c
        s->lookahead = 0;
  41638e:	6766      	str	r6, [r4, #116]	; 0x74
        max_start = s->block_start + max_block_size;
  416390:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  416392:	182a      	adds	r2, r5, r0

00416394 <.LVL217>:
        if (s->strstart == 0 || (ulg)s->strstart >= max_start) {
  416394:	4293      	cmp	r3, r2
  416396:	d2d4      	bcs.n	416342 <.LVL213>
  416398:	2b00      	cmp	r3, #0
  41639a:	d1e7      	bne.n	41636c <.LVL216+0x8>
  41639c:	e7d1      	b.n	416342 <.LVL213>
            FLUSH_BLOCK(s, 0);
  41639e:	4639      	mov	r1, r7
  4163a0:	e7d6      	b.n	416350 <.LVL213+0xe>

004163a2 <.LVL218>:
            FLUSH_BLOCK(s, 0);
  4163a2:	2a00      	cmp	r2, #0
  4163a4:	db12      	blt.n	4163cc <.LVL220+0xe>
  4163a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4163a8:	4419      	add	r1, r3
  4163aa:	4633      	mov	r3, r6
  4163ac:	1a82      	subs	r2, r0, r2
  4163ae:	4620      	mov	r0, r4
  4163b0:	f7f8 fed2 	bl	40f158 <_tr_flush_block>

004163b4 <.LVL219>:
  4163b4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  4163b6:	65e3      	str	r3, [r4, #92]	; 0x5c
  4163b8:	6820      	ldr	r0, [r4, #0]
  4163ba:	f005 ff91 	bl	41c2e0 <.LFE41>

004163be <.LVL220>:
  4163be:	6823      	ldr	r3, [r4, #0]
  4163c0:	691b      	ldr	r3, [r3, #16]
  4163c2:	2b00      	cmp	r3, #0
  4163c4:	d1dc      	bne.n	416380 <.LVL216+0x1c>
  4163c6:	2000      	movs	r0, #0
  4163c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4163cc:	4631      	mov	r1, r6
  4163ce:	e7ec      	b.n	4163aa <.LVL218+0x8>
        FLUSH_BLOCK(s, 1);
  4163d0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  4163d2:	2a00      	cmp	r2, #0
  4163d4:	db14      	blt.n	416400 <.LVL223+0x10>
  4163d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  4163d8:	4411      	add	r1, r2
  4163da:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  4163dc:	2301      	movs	r3, #1
  4163de:	1a82      	subs	r2, r0, r2
  4163e0:	4620      	mov	r0, r4
  4163e2:	f7f8 feb9 	bl	40f158 <_tr_flush_block>

004163e6 <.LVL222>:
  4163e6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  4163e8:	65e3      	str	r3, [r4, #92]	; 0x5c
  4163ea:	6820      	ldr	r0, [r4, #0]
  4163ec:	f005 ff78 	bl	41c2e0 <.LFE41>

004163f0 <.LVL223>:
  4163f0:	6823      	ldr	r3, [r4, #0]
  4163f2:	691b      	ldr	r3, [r3, #16]
        return finish_done;
  4163f4:	2b00      	cmp	r3, #0
  4163f6:	bf0c      	ite	eq
  4163f8:	2002      	moveq	r0, #2
  4163fa:	2003      	movne	r0, #3
  4163fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLUSH_BLOCK(s, 1);
  416400:	2100      	movs	r1, #0
  416402:	e7ea      	b.n	4163da <.LVL220+0x1c>
        FLUSH_BLOCK(s, 0);
  416404:	2100      	movs	r1, #0
  416406:	e78b      	b.n	416320 <.LVL210+0x2e>
            if (s->lookahead == 0 && flush == Z_NO_FLUSH) return need_more;
  416408:	2000      	movs	r0, #0
  41640a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            FLUSH_BLOCK(s, 0);
  41640e:	2000      	movs	r0, #0
  416410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return block_done;
  416414:	2001      	movs	r0, #1
}
  416416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section .text%96:

0041641c <memcpy>:
  41641c:	4684      	mov	ip, r0
  41641e:	ea41 0300 	orr.w	r3, r1, r0
  416422:	f013 0303 	ands.w	r3, r3, #3
  416426:	d16d      	bne.n	416504 <memcpy+0xe8>
  416428:	3a40      	subs	r2, #64	; 0x40
  41642a:	d341      	bcc.n	4164b0 <memcpy+0x94>
  41642c:	f851 3b04 	ldr.w	r3, [r1], #4
  416430:	f840 3b04 	str.w	r3, [r0], #4
  416434:	f851 3b04 	ldr.w	r3, [r1], #4
  416438:	f840 3b04 	str.w	r3, [r0], #4
  41643c:	f851 3b04 	ldr.w	r3, [r1], #4
  416440:	f840 3b04 	str.w	r3, [r0], #4
  416444:	f851 3b04 	ldr.w	r3, [r1], #4
  416448:	f840 3b04 	str.w	r3, [r0], #4
  41644c:	f851 3b04 	ldr.w	r3, [r1], #4
  416450:	f840 3b04 	str.w	r3, [r0], #4
  416454:	f851 3b04 	ldr.w	r3, [r1], #4
  416458:	f840 3b04 	str.w	r3, [r0], #4
  41645c:	f851 3b04 	ldr.w	r3, [r1], #4
  416460:	f840 3b04 	str.w	r3, [r0], #4
  416464:	f851 3b04 	ldr.w	r3, [r1], #4
  416468:	f840 3b04 	str.w	r3, [r0], #4
  41646c:	f851 3b04 	ldr.w	r3, [r1], #4
  416470:	f840 3b04 	str.w	r3, [r0], #4
  416474:	f851 3b04 	ldr.w	r3, [r1], #4
  416478:	f840 3b04 	str.w	r3, [r0], #4
  41647c:	f851 3b04 	ldr.w	r3, [r1], #4
  416480:	f840 3b04 	str.w	r3, [r0], #4
  416484:	f851 3b04 	ldr.w	r3, [r1], #4
  416488:	f840 3b04 	str.w	r3, [r0], #4
  41648c:	f851 3b04 	ldr.w	r3, [r1], #4
  416490:	f840 3b04 	str.w	r3, [r0], #4
  416494:	f851 3b04 	ldr.w	r3, [r1], #4
  416498:	f840 3b04 	str.w	r3, [r0], #4
  41649c:	f851 3b04 	ldr.w	r3, [r1], #4
  4164a0:	f840 3b04 	str.w	r3, [r0], #4
  4164a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4164a8:	f840 3b04 	str.w	r3, [r0], #4
  4164ac:	3a40      	subs	r2, #64	; 0x40
  4164ae:	d2bd      	bcs.n	41642c <memcpy+0x10>
  4164b0:	3230      	adds	r2, #48	; 0x30
  4164b2:	d311      	bcc.n	4164d8 <memcpy+0xbc>
  4164b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4164b8:	f840 3b04 	str.w	r3, [r0], #4
  4164bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4164c0:	f840 3b04 	str.w	r3, [r0], #4
  4164c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4164c8:	f840 3b04 	str.w	r3, [r0], #4
  4164cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4164d0:	f840 3b04 	str.w	r3, [r0], #4
  4164d4:	3a10      	subs	r2, #16
  4164d6:	d2ed      	bcs.n	4164b4 <memcpy+0x98>
  4164d8:	320c      	adds	r2, #12
  4164da:	d305      	bcc.n	4164e8 <memcpy+0xcc>
  4164dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4164e0:	f840 3b04 	str.w	r3, [r0], #4
  4164e4:	3a04      	subs	r2, #4
  4164e6:	d2f9      	bcs.n	4164dc <memcpy+0xc0>
  4164e8:	3204      	adds	r2, #4
  4164ea:	d008      	beq.n	4164fe <memcpy+0xe2>
  4164ec:	07d2      	lsls	r2, r2, #31
  4164ee:	bf1c      	itt	ne
  4164f0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4164f4:	f800 3b01 	strbne.w	r3, [r0], #1
  4164f8:	d301      	bcc.n	4164fe <memcpy+0xe2>
  4164fa:	880b      	ldrh	r3, [r1, #0]
  4164fc:	8003      	strh	r3, [r0, #0]
  4164fe:	4660      	mov	r0, ip
  416500:	4770      	bx	lr
  416502:	bf00      	nop
  416504:	2a08      	cmp	r2, #8
  416506:	d313      	bcc.n	416530 <memcpy+0x114>
  416508:	078b      	lsls	r3, r1, #30
  41650a:	d08d      	beq.n	416428 <memcpy+0xc>
  41650c:	f010 0303 	ands.w	r3, r0, #3
  416510:	d08a      	beq.n	416428 <memcpy+0xc>
  416512:	f1c3 0304 	rsb	r3, r3, #4
  416516:	1ad2      	subs	r2, r2, r3
  416518:	07db      	lsls	r3, r3, #31
  41651a:	bf1c      	itt	ne
  41651c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  416520:	f800 3b01 	strbne.w	r3, [r0], #1
  416524:	d380      	bcc.n	416428 <memcpy+0xc>
  416526:	f831 3b02 	ldrh.w	r3, [r1], #2
  41652a:	f820 3b02 	strh.w	r3, [r0], #2
  41652e:	e77b      	b.n	416428 <memcpy+0xc>
  416530:	3a04      	subs	r2, #4
  416532:	d3d9      	bcc.n	4164e8 <memcpy+0xcc>
  416534:	3a01      	subs	r2, #1
  416536:	f811 3b01 	ldrb.w	r3, [r1], #1
  41653a:	f800 3b01 	strb.w	r3, [r0], #1
  41653e:	d2f9      	bcs.n	416534 <memcpy+0x118>
  416540:	780b      	ldrb	r3, [r1, #0]
  416542:	7003      	strb	r3, [r0, #0]
  416544:	784b      	ldrb	r3, [r1, #1]
  416546:	7043      	strb	r3, [r0, #1]
  416548:	788b      	ldrb	r3, [r1, #2]
  41654a:	7083      	strb	r3, [r0, #2]
  41654c:	4660      	mov	r0, ip
  41654e:	4770      	bx	lr

Disassembly of section .text.DesRawProcessBlock%97:

00416550 <DesRawProcessBlock>:

        return wc_Des3_SetIV(des, iv);
    }

    static void DesRawProcessBlock(word32* lIn, word32* rIn, const word32* kptr)
    {
  416550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

00416554 <.LCFI0>:
        word32 l = *lIn, r = *rIn, i;
  416554:	6807      	ldr	r7, [r0, #0]

00416556 <.LVL1>:
  416556:	f8d1 e000 	ldr.w	lr, [r1]

0041655a <.LVL2>:
  41655a:	4616      	mov	r6, r2
  41655c:	3280      	adds	r2, #128	; 0x80

0041655e <.LBB68>:

        for (i=0; i<8; i++)
        {
            word32 work = rotrFixed(r, 4U) ^ kptr[4*i+0];
            l ^= Spbox[6][(work) & 0x3f]
  41655e:	4b47      	ldr	r3, [pc, #284]	; (41667c <.LVL21>)

00416560 <.LVL4>:
            word32 work = rotrFixed(r, 4U) ^ kptr[4*i+0];
  416560:	6834      	ldr	r4, [r6, #0]
  416562:	ea84 1c3e 	eor.w	ip, r4, lr, ror #4

00416566 <.LVL5>:
              ^  Spbox[4][(work >> 8) & 0x3f]
              ^  Spbox[2][(work >> 16) & 0x3f]
              ^  Spbox[0][(work >> 24) & 0x3f];
            work = r ^ kptr[4*i+1];
  416566:	6874      	ldr	r4, [r6, #4]
  416568:	ea8e 0404 	eor.w	r4, lr, r4

0041656c <.LVL6>:
            l ^= Spbox[6][(work) & 0x3f]
  41656c:	f00c 053f 	and.w	r5, ip, #63	; 0x3f
  416570:	f505 75c0 	add.w	r5, r5, #384	; 0x180

00416574 <.LVL7>:
            l ^= Spbox[7][(work) & 0x3f]
  416574:	f004 083f 	and.w	r8, r4, #63	; 0x3f
  416578:	f508 78e0 	add.w	r8, r8, #448	; 0x1c0
  41657c:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]

00416580 <.LVL8>:
  416580:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
  416584:	ea85 0508 	eor.w	r5, r5, r8
              ^  Spbox[4][(work >> 8) & 0x3f]
  416588:	f3cc 2805 	ubfx	r8, ip, #8, #6
  41658c:	f508 7880 	add.w	r8, r8, #256	; 0x100
            l ^= Spbox[7][(work) & 0x3f]
  416590:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
  416594:	ea85 0508 	eor.w	r5, r5, r8
              ^  Spbox[2][(work >> 16) & 0x3f]
  416598:	f3cc 4805 	ubfx	r8, ip, #16, #6
  41659c:	f108 0880 	add.w	r8, r8, #128	; 0x80
            l ^= Spbox[7][(work) & 0x3f]
  4165a0:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
  4165a4:	ea85 0508 	eor.w	r5, r5, r8
              ^  Spbox[0][(work >> 24) & 0x3f];
  4165a8:	f3cc 6c05 	ubfx	ip, ip, #24, #6

004165ac <.LVL9>:
            l ^= Spbox[7][(work) & 0x3f]
  4165ac:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
  4165b0:	ea85 050c 	eor.w	r5, r5, ip
              ^  Spbox[5][(work >> 8) & 0x3f]
  4165b4:	f3c4 2c05 	ubfx	ip, r4, #8, #6
  4165b8:	f50c 7ca0 	add.w	ip, ip, #320	; 0x140
            l ^= Spbox[7][(work) & 0x3f]
  4165bc:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
  4165c0:	ea85 050c 	eor.w	r5, r5, ip
              ^  Spbox[3][(work >> 16) & 0x3f]
  4165c4:	f3c4 4c05 	ubfx	ip, r4, #16, #6
  4165c8:	f10c 0cc0 	add.w	ip, ip, #192	; 0xc0
            l ^= Spbox[7][(work) & 0x3f]
  4165cc:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
  4165d0:	ea85 050c 	eor.w	r5, r5, ip
              ^  Spbox[1][(work >> 24) & 0x3f];
  4165d4:	f3c4 6405 	ubfx	r4, r4, #24, #6

004165d8 <.LVL10>:
  4165d8:	3440      	adds	r4, #64	; 0x40
            l ^= Spbox[7][(work) & 0x3f]
  4165da:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
  4165de:	4065      	eors	r5, r4
  4165e0:	406f      	eors	r7, r5

004165e2 <.LVL11>:

            work = rotrFixed(l, 4U) ^ kptr[4*i+2];
  4165e2:	68b5      	ldr	r5, [r6, #8]
  4165e4:	ea85 1537 	eor.w	r5, r5, r7, ror #4

004165e8 <.LVL12>:
            r ^= Spbox[6][(work) & 0x3f]
              ^  Spbox[4][(work >> 8) & 0x3f]
              ^  Spbox[2][(work >> 16) & 0x3f]
              ^  Spbox[0][(work >> 24) & 0x3f];
            work = l ^ kptr[4*i+3];
  4165e8:	68f4      	ldr	r4, [r6, #12]
  4165ea:	ea87 0c04 	eor.w	ip, r7, r4

004165ee <.LVL13>:
            r ^= Spbox[6][(work) & 0x3f]
  4165ee:	f005 043f 	and.w	r4, r5, #63	; 0x3f
  4165f2:	f504 74c0 	add.w	r4, r4, #384	; 0x180

004165f6 <.LVL14>:
            r ^= Spbox[7][(work) & 0x3f]
  4165f6:	f00c 083f 	and.w	r8, ip, #63	; 0x3f
  4165fa:	f508 78e0 	add.w	r8, r8, #448	; 0x1c0
  4165fe:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]

00416602 <.LVL15>:
  416602:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
  416606:	ea84 0408 	eor.w	r4, r4, r8
  41660a:	ea84 040e 	eor.w	r4, r4, lr
              ^  Spbox[5][(work >> 8) & 0x3f]
  41660e:	f3cc 2e05 	ubfx	lr, ip, #8, #6

00416612 <.LVL16>:
  416612:	f50e 7ea0 	add.w	lr, lr, #320	; 0x140
  416616:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
  41661a:	ea84 040e 	eor.w	r4, r4, lr
              ^  Spbox[3][(work >> 16) & 0x3f]
  41661e:	f3cc 4e05 	ubfx	lr, ip, #16, #6
  416622:	f10e 0ec0 	add.w	lr, lr, #192	; 0xc0
  416626:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
  41662a:	ea84 040e 	eor.w	r4, r4, lr
              ^  Spbox[1][(work >> 24) & 0x3f];
  41662e:	f3cc 6c05 	ubfx	ip, ip, #24, #6

00416632 <.LVL17>:
  416632:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
  416636:	f853 e02c 	ldr.w	lr, [r3, ip, lsl #2]
  41663a:	ea84 040e 	eor.w	r4, r4, lr
              ^  Spbox[4][(work >> 8) & 0x3f]
  41663e:	f3c5 2e05 	ubfx	lr, r5, #8, #6
  416642:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
  416646:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
  41664a:	ea84 040e 	eor.w	r4, r4, lr
              ^  Spbox[2][(work >> 16) & 0x3f]
  41664e:	f3c5 4e05 	ubfx	lr, r5, #16, #6
  416652:	f10e 0e80 	add.w	lr, lr, #128	; 0x80
  416656:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
  41665a:	ea84 040e 	eor.w	r4, r4, lr
              ^  Spbox[0][(work >> 24) & 0x3f];
  41665e:	f3c5 6505 	ubfx	r5, r5, #24, #6
            r ^= Spbox[7][(work) & 0x3f]
  416662:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
  416666:	ea84 0e05 	eor.w	lr, r4, r5

0041666a <.LVL18>:
  41666a:	3610      	adds	r6, #16

0041666c <.LBE68>:
        for (i=0; i<8; i++)
  41666c:	42b2      	cmp	r2, r6
  41666e:	f47f af77 	bne.w	416560 <.LVL4>
        }

        *lIn = l; *rIn = r;
  416672:	6007      	str	r7, [r0, #0]

00416674 <.LVL20>:
  416674:	f8c1 e000 	str.w	lr, [r1]
  416678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041667c <.LVL21>:
  41667c:	0040c1f4 	.word	0x0040c1f4

Disassembly of section .text.Des3ProcessBlock%98:

00416680 <Des3ProcessBlock>:
        XMEMCPY(out, &r, sizeof(r));
        XMEMCPY(out + sizeof(r), &l, sizeof(l));
    }

    static void Des3ProcessBlock(Des3* des, const byte* in, byte* out)
    {
  416680:	b5f0      	push	{r4, r5, r6, r7, lr}

00416682 <.LCFI1>:
  416682:	b083      	sub	sp, #12

00416684 <.LCFI2>:
  416684:	4606      	mov	r6, r0
  416686:	4614      	mov	r4, r2
        word32 l, r;

        XMEMCPY(&l, in, sizeof(l));
  416688:	680b      	ldr	r3, [r1, #0]
        XMEMCPY(&r, in + sizeof(l), sizeof(r));
  41668a:	6849      	ldr	r1, [r1, #4]

0041668c <.LBB113>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  41668c:	0a1a      	lsrs	r2, r3, #8

0041668e <.LVL24>:
  41668e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
  416692:	021b      	lsls	r3, r3, #8

00416694 <.LVL25>:
  416694:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  416698:	431a      	orrs	r2, r3

0041669a <.LBB115>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  41669a:	ea4f 4232 	mov.w	r2, r2, ror #16

0041669e <.LBB117>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  41669e:	0a0b      	lsrs	r3, r1, #8
  4166a0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  4166a4:	0209      	lsls	r1, r1, #8

004166a6 <.LVL28>:
  4166a6:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  4166aa:	430b      	orrs	r3, r1

004166ac <.LBB119>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  4166ac:	ea4f 3333 	mov.w	r3, r3, ror #12

004166b0 <.LBE121>:
        work = (*left ^ *right) & 0xf0f0f0f0;
  4166b0:	ea82 0103 	eor.w	r1, r2, r3
  4166b4:	f001 31f0 	and.w	r1, r1, #4042322160	; 0xf0f0f0f0

004166b8 <.LVL30>:
        *left ^= work;
  4166b8:	404a      	eors	r2, r1

004166ba <.LVL31>:
        *right = rotrFixed(*right^work, 20U);
  4166ba:	404b      	eors	r3, r1

004166bc <.LBB123>:
        return (x >> y) | (x << (sizeof(y) * 8 - y));
  4166bc:	ea4f 5333 	mov.w	r3, r3, ror #20

004166c0 <.LBE123>:
        work = (*left ^ *right) & 0xffff0000;
  4166c0:	ea82 0103 	eor.w	r1, r2, r3

004166c4 <.LVL34>:
  4166c4:	4d39      	ldr	r5, [pc, #228]	; (4167ac <.LVL83>)
  4166c6:	4029      	ands	r1, r5

004166c8 <.LVL35>:
        *left ^= work;
  4166c8:	404a      	eors	r2, r1

004166ca <.LVL36>:
        *right = rotrFixed(*right^work, 18U);
  4166ca:	404b      	eors	r3, r1

004166cc <.LBB125>:
  4166cc:	ea4f 43b3 	mov.w	r3, r3, ror #18

004166d0 <.LBE125>:
        work = (*left ^ *right) & 0x33333333;
  4166d0:	ea82 0103 	eor.w	r1, r2, r3

004166d4 <.LVL39>:
  4166d4:	f001 3133 	and.w	r1, r1, #858993459	; 0x33333333

004166d8 <.LVL40>:
        *left ^= work;
  4166d8:	404a      	eors	r2, r1

004166da <.LVL41>:
        *right = rotrFixed(*right^work, 6U);
  4166da:	404b      	eors	r3, r1

004166dc <.LBB127>:
  4166dc:	ea4f 13b3 	mov.w	r3, r3, ror #6

004166e0 <.LBE127>:
        work = (*left ^ *right) & 0x00ff00ff;
  4166e0:	ea82 0103 	eor.w	r1, r2, r3

004166e4 <.LVL44>:
  4166e4:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff

004166e8 <.LVL45>:
        *left ^= work;
  4166e8:	404a      	eors	r2, r1

004166ea <.LVL46>:
        *right = rotlFixed(*right^work, 9U);
  4166ea:	404b      	eors	r3, r1

004166ec <.LBB129>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  4166ec:	ea4f 53f3 	mov.w	r3, r3, ror #23

004166f0 <.LBE129>:
        work = (*left ^ *right) & 0xaaaaaaaa;
  4166f0:	ea82 0103 	eor.w	r1, r2, r3

004166f4 <.LVL49>:
  4166f4:	f001 31aa 	and.w	r1, r1, #2863311530	; 0xaaaaaaaa

004166f8 <.LVL50>:
        *left = rotlFixed(*left^work, 1U);
  4166f8:	404a      	eors	r2, r1

004166fa <.LBB131>:
  4166fa:	ea4f 72f2 	mov.w	r2, r2, ror #31

004166fe <.LBE131>:
  4166fe:	9201      	str	r2, [sp, #4]
        *right ^= work;
  416700:	404b      	eors	r3, r1
  416702:	af02      	add	r7, sp, #8
  416704:	f847 3d08 	str.w	r3, [r7, #-8]!

00416708 <.LBE119>:
            l = ByteReverseWord32(l);
            r = ByteReverseWord32(r);
        #endif
        IPERM(&l,&r);

        DesRawProcessBlock(&l, &r, des->key[0]);
  416708:	4602      	mov	r2, r0
  41670a:	4639      	mov	r1, r7
  41670c:	a801      	add	r0, sp, #4

0041670e <.LVL52>:
  41670e:	f7ff ff1f 	bl	416550 <L0>

00416712 <.LVL53>:
        DesRawProcessBlock(&r, &l, des->key[1]);
  416712:	f106 0280 	add.w	r2, r6, #128	; 0x80
  416716:	a901      	add	r1, sp, #4
  416718:	4638      	mov	r0, r7
  41671a:	f7ff ff19 	bl	416550 <L0>

0041671e <.LVL54>:
        DesRawProcessBlock(&l, &r, des->key[2]);
  41671e:	f506 7280 	add.w	r2, r6, #256	; 0x100
  416722:	4639      	mov	r1, r7
  416724:	a801      	add	r0, sp, #4
  416726:	f7ff ff13 	bl	416550 <L0>

0041672a <.LBB133>:
        return (x >> y) | (x << (sizeof(y) * 8 - y));
  41672a:	9a00      	ldr	r2, [sp, #0]
  41672c:	ea4f 0272 	mov.w	r2, r2, ror #1

00416730 <.LBE135>:
        work = (*left ^ *right) & 0xaaaaaaaa;
  416730:	9b01      	ldr	r3, [sp, #4]
  416732:	ea82 0103 	eor.w	r1, r2, r3
  416736:	f001 31aa 	and.w	r1, r1, #2863311530	; 0xaaaaaaaa

0041673a <.LVL57>:
        *right ^= work;
  41673a:	404a      	eors	r2, r1

0041673c <.LVL58>:
        *left = rotrFixed(*left^work, 9U);
  41673c:	404b      	eors	r3, r1

0041673e <.LBB137>:
  41673e:	ea4f 2373 	mov.w	r3, r3, ror #9

00416742 <.LBE137>:
        work = (*left ^ *right) & 0x00ff00ff;
  416742:	ea82 0103 	eor.w	r1, r2, r3

00416746 <.LVL61>:
  416746:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff

0041674a <.LVL62>:
        *right ^= work;
  41674a:	404a      	eors	r2, r1

0041674c <.LVL63>:
        *left = rotlFixed(*left^work, 6U);
  41674c:	404b      	eors	r3, r1

0041674e <.LBB139>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  41674e:	ea4f 63b3 	mov.w	r3, r3, ror #26

00416752 <.LBE139>:
        work = (*left ^ *right) & 0x33333333;
  416752:	ea82 0103 	eor.w	r1, r2, r3

00416756 <.LVL66>:
  416756:	f001 3133 	and.w	r1, r1, #858993459	; 0x33333333

0041675a <.LVL67>:
        *right ^= work;
  41675a:	404a      	eors	r2, r1

0041675c <.LVL68>:
        *left = rotlFixed(*left^work, 18U);
  41675c:	404b      	eors	r3, r1

0041675e <.LBB141>:
  41675e:	ea4f 33b3 	mov.w	r3, r3, ror #14

00416762 <.LBE141>:
        work = (*left ^ *right) & 0xffff0000;
  416762:	ea82 0103 	eor.w	r1, r2, r3

00416766 <.LVL71>:
  416766:	400d      	ands	r5, r1

00416768 <.LVL72>:
        *right ^= work;
  416768:	406a      	eors	r2, r5

0041676a <.LVL73>:
        *left = rotlFixed(*left^work, 20U);
  41676a:	406b      	eors	r3, r5

0041676c <.LBB143>:
  41676c:	ea4f 3333 	mov.w	r3, r3, ror #12

00416770 <.LBE143>:
        work = (*left ^ *right) & 0xf0f0f0f0;
  416770:	ea82 0103 	eor.w	r1, r2, r3
  416774:	f001 31f0 	and.w	r1, r1, #4042322160	; 0xf0f0f0f0

00416778 <.LVL76>:
        *right ^= work;
  416778:	404a      	eors	r2, r1

0041677a <.LVL77>:
        *left = rotrFixed(*left^work, 4U);
  41677a:	404b      	eors	r3, r1

0041677c <.LBB145>:
        return (x >> y) | (x << (sizeof(y) * 8 - y));
  41677c:	ea4f 1333 	mov.w	r3, r3, ror #4

00416780 <.LBB147>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  416780:	0211      	lsls	r1, r2, #8
  416782:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  416786:	0a12      	lsrs	r2, r2, #8

00416788 <.LVL80>:
  416788:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
  41678c:	430a      	orrs	r2, r1

0041678e <.LBB149>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  41678e:	ea4f 4232 	mov.w	r2, r2, ror #16

00416792 <.LBE147>:
        FPERM(&l,&r);
        #ifdef LITTLE_ENDIAN_ORDER
            l = ByteReverseWord32(l);
            r = ByteReverseWord32(r);
        #endif
        XMEMCPY(out, &r, sizeof(r));
  416792:	6022      	str	r2, [r4, #0]

00416794 <.LBB151>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  416794:	0a1a      	lsrs	r2, r3, #8
  416796:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
  41679a:	021b      	lsls	r3, r3, #8

0041679c <.LVL81>:
  41679c:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  4167a0:	4313      	orrs	r3, r2

004167a2 <.LBB153>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  4167a2:	ea4f 4333 	mov.w	r3, r3, ror #16

004167a6 <.LBE151>:
        XMEMCPY(out + sizeof(r), &l, sizeof(l));
  4167a6:	6063      	str	r3, [r4, #4]
    }
  4167a8:	b003      	add	sp, #12

004167aa <.LCFI3>:
  4167aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

004167ac <.LVL83>:
  4167ac:	ffff0000 	.word	0xffff0000

Disassembly of section .text.ecc_map%99:

004167b0 <ecc_map>:
{
  4167b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

004167b4 <.LCFI23>:
  4167b4:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c

004167b8 <.LCFI24>:
   if (P == NULL || modulus == NULL)
  4167b8:	2800      	cmp	r0, #0
  4167ba:	f000 8088 	beq.w	4168ce <.LVL509>
  4167be:	4604      	mov	r4, r0
  4167c0:	2900      	cmp	r1, #0
  4167c2:	f000 8084 	beq.w	4168ce <.LVL509>
  4167c6:	4617      	mov	r7, r2
  4167c8:	460d      	mov	r5, r1
   if (mp_cmp_d(P->z, 0) == MP_EQ) {
  4167ca:	f500 688a 	add.w	r8, r0, #1104	; 0x450
  4167ce:	2100      	movs	r1, #0

004167d0 <.LVL463>:
  4167d0:	4640      	mov	r0, r8

004167d2 <.LVL464>:
  4167d2:	f007 fac7 	bl	41dd64 <.LFE81>

004167d6 <.LVL465>:
  4167d6:	b990      	cbnz	r0, 4167fe <.LVL472>
       err = mp_set(P->x, 0);
  4167d8:	2100      	movs	r1, #0
  4167da:	4620      	mov	r0, r4
  4167dc:	f007 fa83 	bl	41dce6 <.LFE113>

004167e0 <.LVL466>:
       if (err == MP_OKAY)
  4167e0:	4606      	mov	r6, r0
  4167e2:	bb40      	cbnz	r0, 416836 <.LVL480>
           err = mp_set(P->y, 0);
  4167e4:	2100      	movs	r1, #0
  4167e6:	f504 700a 	add.w	r0, r4, #552	; 0x228

004167ea <.LVL467>:
  4167ea:	f007 fa7c 	bl	41dce6 <.LFE113>

004167ee <.LVL468>:
       if (err == MP_OKAY)
  4167ee:	4606      	mov	r6, r0
  4167f0:	bb08      	cbnz	r0, 416836 <.LVL480>
           err = mp_set(P->z, 1);
  4167f2:	2101      	movs	r1, #1
  4167f4:	4640      	mov	r0, r8

004167f6 <.LVL469>:
  4167f6:	f007 fa76 	bl	41dce6 <.LFE113>

004167fa <.LVL470>:
  4167fa:	4606      	mov	r6, r0

004167fc <.LVL471>:
  4167fc:	e01b      	b.n	416836 <.LVL480>

004167fe <.LVL472>:
   if ((err = mp_init_multi(&t1, &t2, NULL, NULL, NULL, NULL)) != MP_OKAY) {
  4167fe:	2200      	movs	r2, #0
  416800:	9201      	str	r2, [sp, #4]
  416802:	9200      	str	r2, [sp, #0]
  416804:	4613      	mov	r3, r2
  416806:	a902      	add	r1, sp, #8
  416808:	a88c      	add	r0, sp, #560	; 0x230
  41680a:	f006 f913 	bl	41ca34 <mp_init_multi>

0041680e <.LVL473>:
  41680e:	2800      	cmp	r0, #0
  416810:	d160      	bne.n	4168d4 <.LVL510>

00416812 <.LVL474>:
   y = P->y;
  416812:	f504 790a 	add.w	r9, r4, #552	; 0x228

00416816 <.LVL475>:
   err = mp_montgomery_reduce(z, modulus, mp);
  416816:	463a      	mov	r2, r7
  416818:	4629      	mov	r1, r5
  41681a:	4640      	mov	r0, r8

0041681c <.LVL476>:
  41681c:	f007 fa59 	bl	41dcd2 <.LFE110>

00416820 <.LVL477>:
   if (err == MP_OKAY)
  416820:	4606      	mov	r6, r0
  416822:	b168      	cbz	r0, 416840 <.LCFI26>
   if (err == MP_OKAY)
  416824:	b33e      	cbz	r6, 416876 <.LVL490+0x2>
   if (err == MP_OKAY)
  416826:	2e00      	cmp	r6, #0
  416828:	d043      	beq.n	4168b2 <.LVL502+0x2>
   mp_clear(&t1);
  41682a:	a88c      	add	r0, sp, #560	; 0x230

0041682c <.LVL478>:
  41682c:	f007 f9d7 	bl	41dbde <.LFE179>

00416830 <.LVL479>:
   mp_clear(&t2);
  416830:	a802      	add	r0, sp, #8
  416832:	f007 f9d4 	bl	41dbde <.LFE179>

00416836 <.LVL480>:
}
  416836:	4630      	mov	r0, r6
  416838:	f20d 4d5c 	addw	sp, sp, #1116	; 0x45c

0041683c <.LCFI25>:
  41683c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00416840 <.LCFI26>:
       err = mp_invmod(z, modulus, &t1);
  416840:	aa8c      	add	r2, sp, #560	; 0x230
  416842:	4629      	mov	r1, r5
  416844:	4640      	mov	r0, r8

00416846 <.LVL482>:
  416846:	f007 fa95 	bl	41dd74 <.LFE83>

0041684a <.LVL483>:
   if (err == MP_OKAY)
  41684a:	4606      	mov	r6, r0
  41684c:	b9c8      	cbnz	r0, 416882 <.LVL493>
       err = mp_sqr(&t1, &t2);
  41684e:	a902      	add	r1, sp, #8
  416850:	a88c      	add	r0, sp, #560	; 0x230

00416852 <.LVL484>:
  416852:	f007 fa39 	bl	41dcc8 <.LFE105>

00416856 <.LVL485>:
   if (err == MP_OKAY)
  416856:	4606      	mov	r6, r0
  416858:	b9d0      	cbnz	r0, 416890 <.LVL496>
       err = mp_mod(&t2, modulus, &t2);
  41685a:	aa02      	add	r2, sp, #8
  41685c:	4629      	mov	r1, r5
  41685e:	4610      	mov	r0, r2

00416860 <.LVL486>:
  416860:	f007 fa90 	bl	41dd84 <.LFE75>

00416864 <.LVL487>:
   if (err == MP_OKAY)
  416864:	4606      	mov	r6, r0
  416866:	b9d8      	cbnz	r0, 4168a0 <.LVL499>
       err = mp_mul(&t1, &t2, &t1);
  416868:	aa8c      	add	r2, sp, #560	; 0x230
  41686a:	a902      	add	r1, sp, #8
  41686c:	4610      	mov	r0, r2

0041686e <.LVL488>:
  41686e:	f007 fa12 	bl	41dc96 <.LFE86>

00416872 <.LVL489>:
  416872:	4606      	mov	r6, r0

00416874 <.LVL490>:
  416874:	e7d6      	b.n	416824 <.LVL477+0x4>
       err = mp_mod(&t1, modulus, &t1);
  416876:	aa8c      	add	r2, sp, #560	; 0x230
  416878:	4629      	mov	r1, r5
  41687a:	4610      	mov	r0, r2

0041687c <.LVL491>:
  41687c:	f007 fa82 	bl	41dd84 <.LFE75>

00416880 <.LVL492>:
  416880:	4606      	mov	r6, r0

00416882 <.LVL493>:
   if (err == MP_OKAY)
  416882:	b9e6      	cbnz	r6, 4168be <.LVL505>
       err = mp_mul(x, &t2, x);
  416884:	4622      	mov	r2, r4
  416886:	a902      	add	r1, sp, #8
  416888:	4620      	mov	r0, r4

0041688a <.LVL494>:
  41688a:	f007 fa04 	bl	41dc96 <.LFE86>

0041688e <.LVL495>:
  41688e:	4606      	mov	r6, r0

00416890 <.LVL496>:
   if (err == MP_OKAY)
  416890:	2e00      	cmp	r6, #0
  416892:	d1ca      	bne.n	41682a <.LVL477+0xa>
       err = mp_montgomery_reduce(x, modulus, mp);
  416894:	463a      	mov	r2, r7
  416896:	4629      	mov	r1, r5
  416898:	4620      	mov	r0, r4

0041689a <.LVL497>:
  41689a:	f007 fa1a 	bl	41dcd2 <.LFE110>

0041689e <.LVL498>:
  41689e:	4606      	mov	r6, r0

004168a0 <.LVL499>:
   if (err == MP_OKAY)
  4168a0:	2e00      	cmp	r6, #0
  4168a2:	d1c2      	bne.n	41682a <.LVL477+0xa>
       err = mp_mul(y, &t1, y);
  4168a4:	464a      	mov	r2, r9
  4168a6:	a98c      	add	r1, sp, #560	; 0x230
  4168a8:	4648      	mov	r0, r9

004168aa <.LVL500>:
  4168aa:	f007 f9f4 	bl	41dc96 <.LFE86>

004168ae <.LVL501>:
  4168ae:	4606      	mov	r6, r0

004168b0 <.LVL502>:
  4168b0:	e7b9      	b.n	416826 <.LVL477+0x6>
       err = mp_montgomery_reduce(y, modulus, mp);
  4168b2:	463a      	mov	r2, r7
  4168b4:	4629      	mov	r1, r5
  4168b6:	4648      	mov	r0, r9

004168b8 <.LVL503>:
  4168b8:	f007 fa0b 	bl	41dcd2 <.LFE110>

004168bc <.LVL504>:
  4168bc:	4606      	mov	r6, r0

004168be <.LVL505>:
   if (err == MP_OKAY)
  4168be:	2e00      	cmp	r6, #0
  4168c0:	d1b3      	bne.n	41682a <.LVL477+0xa>
       err = mp_set(z, 1);
  4168c2:	2101      	movs	r1, #1
  4168c4:	4640      	mov	r0, r8

004168c6 <.LVL506>:
  4168c6:	f007 fa0e 	bl	41dce6 <.LFE113>

004168ca <.LVL507>:
  4168ca:	4606      	mov	r6, r0

004168cc <.LVL508>:
  4168cc:	e7ad      	b.n	41682a <.LVL477+0xa>

004168ce <.LVL509>:
       return ECC_BAD_ARG_E;
  4168ce:	f06f 06a9 	mvn.w	r6, #169	; 0xa9
  4168d2:	e7b0      	b.n	416836 <.LVL480>

004168d4 <.LVL510>:
      return MEMORY_E;
  4168d4:	f06f 067c 	mvn.w	r6, #124	; 0x7c
  4168d8:	e7ad      	b.n	416836 <.LVL480>

Disassembly of section .text.quorem%100:

004168dc <quorem>:
  4168dc:	6902      	ldr	r2, [r0, #16]
  4168de:	690b      	ldr	r3, [r1, #16]

004168e0 <.LVL1>:
  4168e0:	4293      	cmp	r3, r2
  4168e2:	f300 808d 	bgt.w	416a00 <.LCFI3>
  4168e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

004168ea <.LCFI0>:
  4168ea:	f103 38ff 	add.w	r8, r3, #4294967295
  4168ee:	f101 0714 	add.w	r7, r1, #20

004168f2 <.LVL2>:
  4168f2:	f100 0b14 	add.w	fp, r0, #20
  4168f6:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  4168fa:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  4168fe:	ea4f 0488 	mov.w	r4, r8, lsl #2
  416902:	b083      	sub	sp, #12

00416904 <.LCFI1>:
  416904:	3201      	adds	r2, #1
  416906:	fbb3 f9f2 	udiv	r9, r3, r2
  41690a:	eb0b 0304 	add.w	r3, fp, r4
  41690e:	9400      	str	r4, [sp, #0]
  416910:	eb07 0a04 	add.w	sl, r7, r4

00416914 <.LVL3>:
  416914:	9301      	str	r3, [sp, #4]

00416916 <.LVL4>:
  416916:	f1b9 0f00 	cmp.w	r9, #0
  41691a:	d039      	beq.n	416990 <.LVL23>
  41691c:	2500      	movs	r5, #0
  41691e:	462e      	mov	r6, r5
  416920:	46bc      	mov	ip, r7
  416922:	46de      	mov	lr, fp

00416924 <.LVL5>:
  416924:	f85c 4b04 	ldr.w	r4, [ip], #4

00416928 <.LVL6>:
  416928:	f8de 3000 	ldr.w	r3, [lr]
  41692c:	b2a2      	uxth	r2, r4
  41692e:	fb09 5502 	mla	r5, r9, r2, r5

00416932 <.LVL7>:
  416932:	0c22      	lsrs	r2, r4, #16
  416934:	0c2c      	lsrs	r4, r5, #16

00416936 <.LVL8>:
  416936:	fb09 4202 	mla	r2, r9, r2, r4

0041693a <.LVL9>:
  41693a:	b2ad      	uxth	r5, r5

0041693c <.LVL10>:
  41693c:	1b75      	subs	r5, r6, r5
  41693e:	b296      	uxth	r6, r2

00416940 <.LVL11>:
  416940:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  416944:	fa15 f383 	uxtah	r3, r5, r3
  416948:	eb06 4623 	add.w	r6, r6, r3, asr #16
  41694c:	b29b      	uxth	r3, r3
  41694e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  416952:	45e2      	cmp	sl, ip
  416954:	ea4f 4512 	mov.w	r5, r2, lsr #16

00416958 <.LVL12>:
  416958:	f84e 3b04 	str.w	r3, [lr], #4

0041695c <.LVL13>:
  41695c:	ea4f 4626 	mov.w	r6, r6, asr #16

00416960 <.LVL14>:
  416960:	d2e0      	bcs.n	416924 <.LVL5>
  416962:	9b00      	ldr	r3, [sp, #0]
  416964:	f85b 3003 	ldr.w	r3, [fp, r3]
  416968:	b993      	cbnz	r3, 416990 <.LVL23>

0041696a <.LVL15>:
  41696a:	9c01      	ldr	r4, [sp, #4]
  41696c:	1f23      	subs	r3, r4, #4

0041696e <.LVL16>:
  41696e:	459b      	cmp	fp, r3
  416970:	d20c      	bcs.n	41698c <.LVL22>
  416972:	f854 3c04 	ldr.w	r3, [r4, #-4]

00416976 <.LVL17>:
  416976:	b94b      	cbnz	r3, 41698c <.LVL22>
  416978:	f1a4 0308 	sub.w	r3, r4, #8
  41697c:	e002      	b.n	416984 <.LVL19+0x2>

0041697e <.LVL18>:
  41697e:	681a      	ldr	r2, [r3, #0]
  416980:	3b04      	subs	r3, #4

00416982 <.LVL19>:
  416982:	b91a      	cbnz	r2, 41698c <.LVL22>
  416984:	459b      	cmp	fp, r3
  416986:	f108 38ff 	add.w	r8, r8, #4294967295

0041698a <.LVL21>:
  41698a:	d3f8      	bcc.n	41697e <.LVL18>

0041698c <.LVL22>:
  41698c:	f8c0 8010 	str.w	r8, [r0, #16]

00416990 <.LVL23>:
  416990:	4604      	mov	r4, r0
  416992:	f006 fa23 	bl	41cddc <.LBE18>

00416996 <.LVL24>:
  416996:	2800      	cmp	r0, #0
  416998:	db2e      	blt.n	4169f8 <.LVL46>
  41699a:	f109 0901 	add.w	r9, r9, #1

0041699e <.LVL25>:
  41699e:	465d      	mov	r5, fp
  4169a0:	2300      	movs	r3, #0

004169a2 <.LVL26>:
  4169a2:	f857 1b04 	ldr.w	r1, [r7], #4

004169a6 <.LVL27>:
  4169a6:	6828      	ldr	r0, [r5, #0]
  4169a8:	b28a      	uxth	r2, r1
  4169aa:	1a9a      	subs	r2, r3, r2
  4169ac:	0c0b      	lsrs	r3, r1, #16

004169ae <.LVL28>:
  4169ae:	fa12 f280 	uxtah	r2, r2, r0

004169b2 <.LVL29>:
  4169b2:	ebc3 4310 	rsb	r3, r3, r0, lsr #16

004169b6 <.LVL30>:
  4169b6:	eb03 4322 	add.w	r3, r3, r2, asr #16

004169ba <.LVL31>:
  4169ba:	b292      	uxth	r2, r2

004169bc <.LVL32>:
  4169bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4169c0:	45ba      	cmp	sl, r7
  4169c2:	f845 2b04 	str.w	r2, [r5], #4

004169c6 <.LVL33>:
  4169c6:	ea4f 4323 	mov.w	r3, r3, asr #16

004169ca <.LVL34>:
  4169ca:	d2ea      	bcs.n	4169a2 <.LVL26>

004169cc <.LVL35>:
  4169cc:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  4169d0:	eb0b 0388 	add.w	r3, fp, r8, lsl #2

004169d4 <.LVL36>:
  4169d4:	b982      	cbnz	r2, 4169f8 <.LVL46>

004169d6 <.LVL37>:
  4169d6:	1f1a      	subs	r2, r3, #4

004169d8 <.LVL38>:
  4169d8:	4593      	cmp	fp, r2
  4169da:	d20b      	bcs.n	4169f4 <.LVL45>
  4169dc:	f853 2c04 	ldr.w	r2, [r3, #-4]

004169e0 <.LVL39>:
  4169e0:	b942      	cbnz	r2, 4169f4 <.LVL45>
  4169e2:	3b08      	subs	r3, #8

004169e4 <.LVL40>:
  4169e4:	e002      	b.n	4169ec <.LVL42+0x2>

004169e6 <.LVL41>:
  4169e6:	681a      	ldr	r2, [r3, #0]
  4169e8:	3b04      	subs	r3, #4

004169ea <.LVL42>:
  4169ea:	b91a      	cbnz	r2, 4169f4 <.LVL45>
  4169ec:	459b      	cmp	fp, r3
  4169ee:	f108 38ff 	add.w	r8, r8, #4294967295

004169f2 <.LVL44>:
  4169f2:	d3f8      	bcc.n	4169e6 <.LVL41>

004169f4 <.LVL45>:
  4169f4:	f8c4 8010 	str.w	r8, [r4, #16]

004169f8 <.LVL46>:
  4169f8:	4648      	mov	r0, r9
  4169fa:	b003      	add	sp, #12

004169fc <.LCFI2>:
  4169fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00416a00 <.LCFI3>:
  416a00:	2000      	movs	r0, #0

00416a02 <.LVL48>:
  416a02:	4770      	bx	lr

Disassembly of section .text._fp_exptmod%101:

00416a04 <_fp_exptmod>:
{
  416a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00416a08 <.LCFI110>:
  416a08:	f2ad 6d94 	subw	sp, sp, #1684	; 0x694

00416a0c <.LCFI111>:
  416a0c:	4604      	mov	r4, r0
  416a0e:	9102      	str	r1, [sp, #8]
  416a10:	9200      	str	r2, [sp, #0]
  416a12:	9303      	str	r3, [sp, #12]
  if ((err = fp_montgomery_setup (P, &mp)) != FP_OKAY) {
  416a14:	a905      	add	r1, sp, #20

00416a16 <.LVL757>:
  416a16:	4610      	mov	r0, r2

00416a18 <.LVL758>:
  416a18:	f005 ff2c 	bl	41c874 <.LFE188>

00416a1c <.LVL759>:
  416a1c:	4606      	mov	r6, r0
  416a1e:	b120      	cbz	r0, 416a2a <.LBB176>

00416a20 <.LVL760>:
}
  416a20:	4630      	mov	r0, r6
  416a22:	f20d 6d94 	addw	sp, sp, #1684	; 0x694

00416a26 <.LCFI112>:
  416a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00416a2a <.LBB176>:
    fp_zero(a);
  416a2a:	a806      	add	r0, sp, #24

00416a2c <.LVL763>:
  416a2c:	f006 ffac 	bl	41d988 <.LFE163>

00416a30 <.LBB178>:
  416a30:	a890      	add	r0, sp, #576	; 0x240

00416a32 <.LVL765>:
  416a32:	f006 ffa9 	bl	41d988 <.LFE163>

00416a36 <.LBB180>:
  416a36:	f50d 608d 	add.w	r0, sp, #1128	; 0x468

00416a3a <.LVL767>:
  416a3a:	f006 ffa5 	bl	41d988 <.LFE163>

00416a3e <.LBE180>:
  fp_montgomery_calc_normalization (&R[0], P);
  416a3e:	9d00      	ldr	r5, [sp, #0]
  416a40:	4629      	mov	r1, r5
  416a42:	a806      	add	r0, sp, #24
  416a44:	f003 ffee 	bl	41aa24 <.LFE16>

00416a48 <.LVL769>:
  if (fp_cmp_mag(P, G) != FP_GT) {
  416a48:	4621      	mov	r1, r4
  416a4a:	4628      	mov	r0, r5
  416a4c:	f004 ff0f 	bl	41b86e <.LFE179>

00416a50 <.LVL770>:
  416a50:	2801      	cmp	r0, #1
  416a52:	d015      	beq.n	416a80 <.LVL775>
     fp_mod(G, P, &R[1]);
  416a54:	aa90      	add	r2, sp, #576	; 0x240
  416a56:	4629      	mov	r1, r5
  416a58:	4620      	mov	r0, r4
  416a5a:	f005 fdfe 	bl	41c65a <.LFE180>

00416a5e <.LVL771>:
  fp_mulmod (&R[1], &R[0], P, &R[1]);
  416a5e:	ab90      	add	r3, sp, #576	; 0x240
  416a60:	9a00      	ldr	r2, [sp, #0]
  416a62:	a906      	add	r1, sp, #24
  416a64:	4618      	mov	r0, r3
  416a66:	f006 fb3a 	bl	41d0de <.LFE200>

00416a6a <.LVL772>:
  digidx = X->used - 1;
  416a6a:	9b02      	ldr	r3, [sp, #8]
  416a6c:	681b      	ldr	r3, [r3, #0]
  416a6e:	f103 39ff 	add.w	r9, r3, #4294967295

00416a72 <.LVL773>:
  bitcnt = 1;
  416a72:	2601      	movs	r6, #1

00416a74 <.LVL774>:
  buf    = 0;
  416a74:	2700      	movs	r7, #0
    fp_mul(&R[0], &R[1], &R[y^1]); fp_montgomery_reduce(&R[y^1], P, mp);
  416a76:	f10d 0818 	add.w	r8, sp, #24
    fp_copy((fp_int*) ( ((wolfssl_word)&R[0] & wc_off_on_addr[y^1]) +
  416a7a:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 416b24 <.LVL794+0x2>
  416a7e:	e039      	b.n	416af4 <.LVL785>

00416a80 <.LVL775>:
     fp_copy(G, &R[1]);
  416a80:	a990      	add	r1, sp, #576	; 0x240
  416a82:	4620      	mov	r0, r4
  416a84:	f006 fcc4 	bl	41d410 <.LFE194>

00416a88 <.LVL776>:
  416a88:	e7e9      	b.n	416a5e <.LVL771>

00416a8a <.LVL777>:
    y     = (int)(buf >> (DIGIT_BIT - 1)) & 1;
  416a8a:	0ffc      	lsrs	r4, r7, #31

00416a8c <.LVL778>:
    fp_mul(&R[0], &R[1], &R[y^1]); fp_montgomery_reduce(&R[y^1], P, mp);
  416a8c:	f084 0501 	eor.w	r5, r4, #1
  416a90:	007f      	lsls	r7, r7, #1

00416a92 <.LVL779>:
  416a92:	f44f 730a 	mov.w	r3, #552	; 0x228
  416a96:	fb03 8305 	mla	r3, r3, r5, r8
  416a9a:	f50d 7a10 	add.w	sl, sp, #576	; 0x240
  416a9e:	9301      	str	r3, [sp, #4]
  416aa0:	461a      	mov	r2, r3
  416aa2:	4651      	mov	r1, sl
  416aa4:	4640      	mov	r0, r8
  416aa6:	f006 fb31 	bl	41d10c <.LFE32>

00416aaa <.LVL780>:
  416aaa:	9a05      	ldr	r2, [sp, #20]
  416aac:	9900      	ldr	r1, [sp, #0]
  416aae:	9801      	ldr	r0, [sp, #4]
  416ab0:	f7ff f94b 	bl	415d4a <.LFE39>

00416ab4 <.LVL781>:
    fp_copy((fp_int*) ( ((wolfssl_word)&R[0] & wc_off_on_addr[y^1]) +
  416ab4:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
  416ab8:	ea08 0303 	and.w	r3, r8, r3
                        ((wolfssl_word)&R[1] & wc_off_on_addr[y]) ),
  416abc:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
  416ac0:	ea0a 0404 	and.w	r4, sl, r4
    fp_copy((fp_int*) ( ((wolfssl_word)&R[0] & wc_off_on_addr[y^1]) +
  416ac4:	441c      	add	r4, r3
  416ac6:	f50d 638d 	add.w	r3, sp, #1128	; 0x468
  416aca:	4619      	mov	r1, r3
  416acc:	4620      	mov	r0, r4
  416ace:	f006 fc9f 	bl	41d410 <.LFE194>

00416ad2 <.LVL782>:
    fp_sqr(&R[2], &R[2]);          fp_montgomery_reduce(&R[2], P, mp);
  416ad2:	f50d 638d 	add.w	r3, sp, #1128	; 0x468
  416ad6:	4619      	mov	r1, r3
  416ad8:	4618      	mov	r0, r3
  416ada:	f006 fb6f 	bl	41d1bc <.LFE1>

00416ade <.LVL783>:
  416ade:	9a05      	ldr	r2, [sp, #20]
  416ae0:	9900      	ldr	r1, [sp, #0]
  416ae2:	f50d 608d 	add.w	r0, sp, #1128	; 0x468
  416ae6:	f7ff f930 	bl	415d4a <.LFE39>

00416aea <.LVL784>:
    fp_copy(&R[2],
  416aea:	4621      	mov	r1, r4
  416aec:	f50d 608d 	add.w	r0, sp, #1128	; 0x468
  416af0:	f006 fc8e 	bl	41d410 <.LFE194>

00416af4 <.LVL785>:
    if (--bitcnt == 0) {
  416af4:	3e01      	subs	r6, #1

00416af6 <.LVL786>:
  416af6:	d1c8      	bne.n	416a8a <.LVL777>

00416af8 <.LVL787>:
      if (digidx == -1) {
  416af8:	f1b9 3fff 	cmp.w	r9, #4294967295
  416afc:	d008      	beq.n	416b10 <.LVL792>

00416afe <.LVL788>:
      buf    = X->dp[digidx--];
  416afe:	f109 0302 	add.w	r3, r9, #2

00416b02 <.LVL789>:
  416b02:	9a02      	ldr	r2, [sp, #8]
  416b04:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]

00416b08 <.LVL790>:
  416b08:	f109 39ff 	add.w	r9, r9, #4294967295

00416b0c <.LVL791>:
      bitcnt = (int)DIGIT_BIT;
  416b0c:	2620      	movs	r6, #32
  416b0e:	e7bc      	b.n	416a8a <.LVL777>

00416b10 <.LVL792>:
   fp_montgomery_reduce(&R[0], P, mp);
  416b10:	9a05      	ldr	r2, [sp, #20]
  416b12:	9900      	ldr	r1, [sp, #0]
  416b14:	a806      	add	r0, sp, #24
  416b16:	f7ff f918 	bl	415d4a <.LFE39>

00416b1a <.LVL793>:
   fp_copy(&R[0], Y);
  416b1a:	9903      	ldr	r1, [sp, #12]
  416b1c:	a806      	add	r0, sp, #24
  416b1e:	f006 fc77 	bl	41d410 <.LFE194>

00416b22 <.LVL794>:
   return FP_OKAY;
  416b22:	e77d      	b.n	416a20 <.LVL760>
  416b24:	0041ddb4 	.word	0x0041ddb4

Disassembly of section .text.USART1_InterruptHandler%102:

00416b28 <USART1_InterruptHandler>:

    return;
}

void USART1_InterruptHandler( void )
{
  416b28:	b570      	push	{r4, r5, r6, lr}

00416b2a <.LCFI0>:
    /* Error status */
    uint32_t errorStatus = (USART1_REGS->US_CSR & (US_CSR_OVRE_Msk | US_CSR_FRAME_Msk | US_CSR_PARE_Msk));
  416b2a:	4b46      	ldr	r3, [pc, #280]	; (416c44 <.LBB11+0xe>)
  416b2c:	695b      	ldr	r3, [r3, #20]

00416b2e <.LVL0>:

    if(errorStatus != 0)
  416b2e:	f013 0fe0 	tst.w	r3, #224	; 0xe0
  416b32:	d00e      	beq.n	416b52 <.LVL1+0x1c>
    {
        /* Client must call USARTx_ErrorGet() function to clear the errors */

        /* USART errors are normally associated with the receiver, hence calling
         * receiver context */
        if( usart1Obj.rxCallback != NULL )
  416b34:	4b44      	ldr	r3, [pc, #272]	; (416c48 <.LBB11+0x12>)

00416b36 <.LVL1>:
  416b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  416b38:	b113      	cbz	r3, 416b40 <.LVL1+0xa>
        {
            usart1Obj.rxCallback(usart1Obj.rxContext);
  416b3a:	4a43      	ldr	r2, [pc, #268]	; (416c48 <.LBB11+0x12>)
  416b3c:	6a90      	ldr	r0, [r2, #40]	; 0x28
  416b3e:	4798      	blx	r3
        }

        usart1Obj.rxBusyStatus = false;
  416b40:	4b41      	ldr	r3, [pc, #260]	; (416c48 <.LBB11+0x12>)
  416b42:	2200      	movs	r2, #0
  416b44:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        usart1Obj.rxSize = 0;
  416b48:	61da      	str	r2, [r3, #28]
        usart1Obj.rxProcessedSize = 0;
  416b4a:	621a      	str	r2, [r3, #32]

        /* Disable Read, Overrun, Parity and Framing error interrupts */
        USART1_REGS->US_IDR = (US_IDR_RXRDY_Msk | US_IDR_FRAME_Msk | US_IDR_PARE_Msk | US_IDR_OVRE_Msk);
  416b4c:	22e1      	movs	r2, #225	; 0xe1
  416b4e:	4b3d      	ldr	r3, [pc, #244]	; (416c44 <.LBB11+0xe>)
  416b50:	60da      	str	r2, [r3, #12]
    }

    /* Receiver status */
    if(US_CSR_RXRDY_Msk == (USART1_REGS->US_CSR& US_CSR_RXRDY_Msk))
  416b52:	4b3c      	ldr	r3, [pc, #240]	; (416c44 <.LBB11+0xe>)
  416b54:	695b      	ldr	r3, [r3, #20]
  416b56:	f013 0f01 	tst.w	r3, #1
  416b5a:	d105      	bne.n	416b68 <.LBB6>
    {
        USART1_ISR_RX_Handler();
    }

    /* Transmitter status */
    if(US_CSR_TXEMPTY_Msk == (USART1_REGS->US_CSR& US_CSR_TXEMPTY_Msk))
  416b5c:	4b39      	ldr	r3, [pc, #228]	; (416c44 <.LBB11+0xe>)
  416b5e:	695b      	ldr	r3, [r3, #20]
  416b60:	f413 7f00 	tst.w	r3, #512	; 0x200
  416b64:	d134      	bne.n	416bd0 <.LBB8>
  416b66:	bd70      	pop	{r4, r5, r6, pc}

00416b68 <.LBB6>:
    if(usart1Obj.rxBusyStatus == true)
  416b68:	4b37      	ldr	r3, [pc, #220]	; (416c48 <.LBB11+0x12>)
  416b6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
  416b6e:	2b00      	cmp	r3, #0
  416b70:	d0f4      	beq.n	416b5c <.LVL1+0x26>
        while((US_CSR_RXRDY_Msk == (USART1_REGS->US_CSR& US_CSR_RXRDY_Msk)) && (usart1Obj.rxSize > usart1Obj.rxProcessedSize) )
  416b72:	4b34      	ldr	r3, [pc, #208]	; (416c44 <.LBB11+0xe>)
  416b74:	695b      	ldr	r3, [r3, #20]
  416b76:	f013 0f01 	tst.w	r3, #1
  416b7a:	d023      	beq.n	416bc4 <.LBB6+0x5c>
  416b7c:	4a32      	ldr	r2, [pc, #200]	; (416c48 <.LBB11+0x12>)
  416b7e:	6a13      	ldr	r3, [r2, #32]
  416b80:	69d2      	ldr	r2, [r2, #28]
  416b82:	429a      	cmp	r2, r3
  416b84:	d90e      	bls.n	416ba4 <.LBB6+0x3c>
            usart1Obj.rxBuffer[usart1Obj.rxProcessedSize++] = (USART1_REGS->US_RHR& US_RHR_RXCHR_Msk);
  416b86:	4a30      	ldr	r2, [pc, #192]	; (416c48 <.LBB11+0x12>)
  416b88:	492e      	ldr	r1, [pc, #184]	; (416c44 <.LBB11+0xe>)
  416b8a:	6990      	ldr	r0, [r2, #24]
  416b8c:	1c5c      	adds	r4, r3, #1
  416b8e:	6214      	str	r4, [r2, #32]
  416b90:	698c      	ldr	r4, [r1, #24]
  416b92:	54c4      	strb	r4, [r0, r3]
        while((US_CSR_RXRDY_Msk == (USART1_REGS->US_CSR& US_CSR_RXRDY_Msk)) && (usart1Obj.rxSize > usart1Obj.rxProcessedSize) )
  416b94:	694b      	ldr	r3, [r1, #20]
  416b96:	f013 0f01 	tst.w	r3, #1
  416b9a:	d013      	beq.n	416bc4 <.LBB6+0x5c>
  416b9c:	6a13      	ldr	r3, [r2, #32]
  416b9e:	69d0      	ldr	r0, [r2, #28]
  416ba0:	4283      	cmp	r3, r0
  416ba2:	d3f2      	bcc.n	416b8a <.LBB6+0x22>
            usart1Obj.rxBusyStatus = false;
  416ba4:	4b28      	ldr	r3, [pc, #160]	; (416c48 <.LBB11+0x12>)
  416ba6:	2200      	movs	r2, #0
  416ba8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            usart1Obj.rxSize = 0;
  416bac:	61da      	str	r2, [r3, #28]
            usart1Obj.rxProcessedSize = 0;
  416bae:	621a      	str	r2, [r3, #32]
            USART1_REGS->US_IDR = (US_IDR_RXRDY_Msk | US_IDR_FRAME_Msk | US_IDR_PARE_Msk | US_IDR_OVRE_Msk);
  416bb0:	21e1      	movs	r1, #225	; 0xe1
  416bb2:	4a24      	ldr	r2, [pc, #144]	; (416c44 <.LBB11+0xe>)
  416bb4:	60d1      	str	r1, [r2, #12]
            if(usart1Obj.rxCallback != NULL)
  416bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  416bb8:	2b00      	cmp	r3, #0
  416bba:	d0cf      	beq.n	416b5c <.LVL1+0x26>
                usart1Obj.rxCallback(usart1Obj.rxContext);
  416bbc:	4a22      	ldr	r2, [pc, #136]	; (416c48 <.LBB11+0x12>)
  416bbe:	6a90      	ldr	r0, [r2, #40]	; 0x28
  416bc0:	4798      	blx	r3
  416bc2:	e7cb      	b.n	416b5c <.LVL1+0x26>
        if(usart1Obj.rxProcessedSize >= usart1Obj.rxSize)
  416bc4:	4b20      	ldr	r3, [pc, #128]	; (416c48 <.LBB11+0x12>)
  416bc6:	6a1a      	ldr	r2, [r3, #32]
  416bc8:	69db      	ldr	r3, [r3, #28]
  416bca:	429a      	cmp	r2, r3
  416bcc:	d3c6      	bcc.n	416b5c <.LVL1+0x26>
  416bce:	e7e9      	b.n	416ba4 <.LBB6+0x3c>

00416bd0 <.LBB8>:
    if(usart1Obj.txBusyStatus == true)
  416bd0:	4b1d      	ldr	r3, [pc, #116]	; (416c48 <.LBB11+0x12>)
  416bd2:	7d1b      	ldrb	r3, [r3, #20]
  416bd4:	2b00      	cmp	r3, #0
  416bd6:	d0c6      	beq.n	416b66 <.LVL1+0x30>
        while((US_CSR_TXEMPTY_Msk == (USART1_REGS->US_CSR& US_CSR_TXEMPTY_Msk)) && (usart1Obj.txSize > usart1Obj.txProcessedSize) )
  416bd8:	4b1a      	ldr	r3, [pc, #104]	; (416c44 <.LBB11+0xe>)
  416bda:	695b      	ldr	r3, [r3, #20]
  416bdc:	f413 7f00 	tst.w	r3, #512	; 0x200
  416be0:	d029      	beq.n	416c36 <.LBB11>
  416be2:	4b19      	ldr	r3, [pc, #100]	; (416c48 <.LBB11+0x12>)
  416be4:	685d      	ldr	r5, [r3, #4]
  416be6:	689b      	ldr	r3, [r3, #8]
  416be8:	429d      	cmp	r5, r3
  416bea:	d914      	bls.n	416c16 <.LBB8+0x46>
            USART1_REGS->US_THR|= usart1Obj.txBuffer[usart1Obj.txProcessedSize++];
  416bec:	4a16      	ldr	r2, [pc, #88]	; (416c48 <.LBB11+0x12>)
  416bee:	6814      	ldr	r4, [r2, #0]
  416bf0:	4423      	add	r3, r4
  416bf2:	4425      	add	r5, r4
  416bf4:	4616      	mov	r6, r2
  416bf6:	f1c4 0401 	rsb	r4, r4, #1
  416bfa:	4912      	ldr	r1, [pc, #72]	; (416c44 <.LBB11+0xe>)
  416bfc:	18e2      	adds	r2, r4, r3
  416bfe:	60b2      	str	r2, [r6, #8]
  416c00:	f813 2b01 	ldrb.w	r2, [r3], #1
  416c04:	69c8      	ldr	r0, [r1, #28]
  416c06:	4302      	orrs	r2, r0
  416c08:	61ca      	str	r2, [r1, #28]
        while((US_CSR_TXEMPTY_Msk == (USART1_REGS->US_CSR& US_CSR_TXEMPTY_Msk)) && (usart1Obj.txSize > usart1Obj.txProcessedSize) )
  416c0a:	694a      	ldr	r2, [r1, #20]
  416c0c:	f412 7f00 	tst.w	r2, #512	; 0x200
  416c10:	d011      	beq.n	416c36 <.LBB11>
  416c12:	429d      	cmp	r5, r3
  416c14:	d1f2      	bne.n	416bfc <.LBB8+0x2c>
            usart1Obj.txBusyStatus = false;
  416c16:	4b0c      	ldr	r3, [pc, #48]	; (416c48 <.LBB11+0x12>)
  416c18:	2200      	movs	r2, #0
  416c1a:	751a      	strb	r2, [r3, #20]
            usart1Obj.txSize = 0;
  416c1c:	605a      	str	r2, [r3, #4]
            usart1Obj.txProcessedSize = 0;
  416c1e:	609a      	str	r2, [r3, #8]
            USART1_REGS->US_IDR = US_IDR_TXEMPTY_Msk;
  416c20:	f44f 7100 	mov.w	r1, #512	; 0x200
  416c24:	4a07      	ldr	r2, [pc, #28]	; (416c44 <.LBB11+0xe>)
  416c26:	60d1      	str	r1, [r2, #12]
            if(usart1Obj.txCallback != NULL)
  416c28:	68db      	ldr	r3, [r3, #12]
  416c2a:	2b00      	cmp	r3, #0
  416c2c:	d09b      	beq.n	416b66 <.LVL1+0x30>
                usart1Obj.txCallback(usart1Obj.txContext);
  416c2e:	4a06      	ldr	r2, [pc, #24]	; (416c48 <.LBB11+0x12>)
  416c30:	6910      	ldr	r0, [r2, #16]
  416c32:	4798      	blx	r3

00416c34 <.LBE8>:
    {
        USART1_ISR_TX_Handler();
    }

    return;
  416c34:	e797      	b.n	416b66 <.LVL1+0x30>

00416c36 <.LBB11>:
        if(usart1Obj.txProcessedSize >= usart1Obj.txSize)
  416c36:	4b04      	ldr	r3, [pc, #16]	; (416c48 <.LBB11+0x12>)
  416c38:	689a      	ldr	r2, [r3, #8]
  416c3a:	685b      	ldr	r3, [r3, #4]
  416c3c:	429a      	cmp	r2, r3
  416c3e:	d392      	bcc.n	416b66 <.LVL1+0x30>
  416c40:	e7e9      	b.n	416c16 <.LBB8+0x46>
  416c42:	bf00      	nop
  416c44:	40028000 	.word	0x40028000
  416c48:	20400020 	.word	0x20400020

Disassembly of section .text.__multiply%103:

00416c4c <__multiply>:
  416c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00416c50 <.LCFI7>:
  416c50:	690c      	ldr	r4, [r1, #16]
  416c52:	6915      	ldr	r5, [r2, #16]
  416c54:	42ac      	cmp	r4, r5
  416c56:	b083      	sub	sp, #12

00416c58 <.LCFI8>:
  416c58:	468b      	mov	fp, r1
  416c5a:	4616      	mov	r6, r2
  416c5c:	da04      	bge.n	416c68 <.LVL110>
  416c5e:	4622      	mov	r2, r4

00416c60 <.LVL108>:
  416c60:	46b3      	mov	fp, r6
  416c62:	462c      	mov	r4, r5
  416c64:	460e      	mov	r6, r1

00416c66 <.LVL109>:
  416c66:	4615      	mov	r5, r2

00416c68 <.LVL110>:
  416c68:	f8db 3008 	ldr.w	r3, [fp, #8]
  416c6c:	f8db 1004 	ldr.w	r1, [fp, #4]

00416c70 <.LVL111>:
  416c70:	eb04 0805 	add.w	r8, r4, r5

00416c74 <.LVL112>:
  416c74:	4598      	cmp	r8, r3
  416c76:	bfc8      	it	gt
  416c78:	3101      	addgt	r1, #1
  416c7a:	f005 fbef 	bl	41c45c <.LFE2>

00416c7e <.LVL114>:
  416c7e:	f100 0914 	add.w	r9, r0, #20
  416c82:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  416c86:	45d1      	cmp	r9, sl
  416c88:	9000      	str	r0, [sp, #0]

00416c8a <.LVL115>:
  416c8a:	d205      	bcs.n	416c98 <.LVL118>
  416c8c:	464b      	mov	r3, r9
  416c8e:	2100      	movs	r1, #0

00416c90 <.LVL116>:
  416c90:	f843 1b04 	str.w	r1, [r3], #4
  416c94:	459a      	cmp	sl, r3
  416c96:	d8fb      	bhi.n	416c90 <.LVL116>

00416c98 <.LVL118>:
  416c98:	f106 0c14 	add.w	ip, r6, #20
  416c9c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  416ca0:	f10b 0b14 	add.w	fp, fp, #20

00416ca4 <.LVL119>:
  416ca4:	459c      	cmp	ip, r3
  416ca6:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2

00416caa <.LVL120>:
  416caa:	d24c      	bcs.n	416d46 <.LVL144>
  416cac:	f8cd a004 	str.w	sl, [sp, #4]
  416cb0:	469a      	mov	sl, r3

00416cb2 <.LVL121>:
  416cb2:	f8dc 5000 	ldr.w	r5, [ip]
  416cb6:	b2af      	uxth	r7, r5

00416cb8 <.LVL122>:
  416cb8:	b1ef      	cbz	r7, 416cf6 <.LVL130>
  416cba:	2100      	movs	r1, #0
  416cbc:	464d      	mov	r5, r9
  416cbe:	465e      	mov	r6, fp
  416cc0:	460c      	mov	r4, r1

00416cc2 <.LVL123>:
  416cc2:	f856 2b04 	ldr.w	r2, [r6], #4

00416cc6 <.LVL124>:
  416cc6:	6828      	ldr	r0, [r5, #0]
  416cc8:	b293      	uxth	r3, r2
  416cca:	b281      	uxth	r1, r0
  416ccc:	fb07 1303 	mla	r3, r7, r3, r1
  416cd0:	0c12      	lsrs	r2, r2, #16
  416cd2:	0c01      	lsrs	r1, r0, #16
  416cd4:	4423      	add	r3, r4

00416cd6 <.LVL125>:
  416cd6:	fb07 1102 	mla	r1, r7, r2, r1
  416cda:	eb01 4113 	add.w	r1, r1, r3, lsr #16

00416cde <.LVL126>:
  416cde:	b29b      	uxth	r3, r3

00416ce0 <.LVL127>:
  416ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  416ce4:	45b6      	cmp	lr, r6
  416ce6:	f845 3b04 	str.w	r3, [r5], #4

00416cea <.LVL128>:
  416cea:	ea4f 4411 	mov.w	r4, r1, lsr #16

00416cee <.LVL129>:
  416cee:	d8e8      	bhi.n	416cc2 <.LVL123>
  416cf0:	602c      	str	r4, [r5, #0]
  416cf2:	f8dc 5000 	ldr.w	r5, [ip]

00416cf6 <.LVL130>:
  416cf6:	0c2d      	lsrs	r5, r5, #16

00416cf8 <.LVL131>:
  416cf8:	d01d      	beq.n	416d36 <.LVL141>

00416cfa <.LVL132>:
  416cfa:	f8d9 3000 	ldr.w	r3, [r9]

00416cfe <.LVL133>:
  416cfe:	4648      	mov	r0, r9
  416d00:	461c      	mov	r4, r3
  416d02:	4659      	mov	r1, fp
  416d04:	2200      	movs	r2, #0

00416d06 <.LVL134>:
  416d06:	880e      	ldrh	r6, [r1, #0]
  416d08:	0c24      	lsrs	r4, r4, #16
  416d0a:	fb05 4406 	mla	r4, r5, r6, r4
  416d0e:	4422      	add	r2, r4

00416d10 <.LVL135>:
  416d10:	b29b      	uxth	r3, r3

00416d12 <.LVL136>:
  416d12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  416d16:	f840 3b04 	str.w	r3, [r0], #4

00416d1a <.LVL137>:
  416d1a:	f851 3b04 	ldr.w	r3, [r1], #4

00416d1e <.LVL138>:
  416d1e:	6804      	ldr	r4, [r0, #0]
  416d20:	0c1b      	lsrs	r3, r3, #16
  416d22:	b2a6      	uxth	r6, r4
  416d24:	fb05 6303 	mla	r3, r5, r3, r6
  416d28:	eb03 4312 	add.w	r3, r3, r2, lsr #16

00416d2c <.LVL139>:
  416d2c:	458e      	cmp	lr, r1
  416d2e:	ea4f 4213 	mov.w	r2, r3, lsr #16

00416d32 <.LVL140>:
  416d32:	d8e8      	bhi.n	416d06 <.LVL134>
  416d34:	6003      	str	r3, [r0, #0]

00416d36 <.LVL141>:
  416d36:	f10c 0c04 	add.w	ip, ip, #4
  416d3a:	45e2      	cmp	sl, ip
  416d3c:	f109 0904 	add.w	r9, r9, #4
  416d40:	d8b7      	bhi.n	416cb2 <.LVL121>
  416d42:	f8dd a004 	ldr.w	sl, [sp, #4]

00416d46 <.LVL144>:
  416d46:	f1b8 0f00 	cmp.w	r8, #0
  416d4a:	dd0b      	ble.n	416d64 <.LVL149>
  416d4c:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  416d50:	f1aa 0a04 	sub.w	sl, sl, #4
  416d54:	b11b      	cbz	r3, 416d5e <.LVL147>
  416d56:	e005      	b.n	416d64 <.LVL149>
  416d58:	f85a 3d04 	ldr.w	r3, [sl, #-4]!

00416d5c <.LVL146>:
  416d5c:	b913      	cbnz	r3, 416d64 <.LVL149>

00416d5e <.LVL147>:
  416d5e:	f1b8 0801 	subs.w	r8, r8, #1

00416d62 <.LVL148>:
  416d62:	d1f9      	bne.n	416d58 <.LVL144+0x12>

00416d64 <.LVL149>:
  416d64:	9800      	ldr	r0, [sp, #0]
  416d66:	f8c0 8010 	str.w	r8, [r0, #16]
  416d6a:	b003      	add	sp, #12

00416d6c <.LCFI9>:
  416d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section .text.fp_mul_comba%104:

00416d70 <fp_mul_comba>:
{
  416d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00416d74 <.LCFI64>:
  416d74:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254

00416d78 <.LCFI65>:
  416d78:	4605      	mov	r5, r0
  416d7a:	9007      	str	r0, [sp, #28]
  416d7c:	460e      	mov	r6, r1
  416d7e:	9108      	str	r1, [sp, #32]
  416d80:	9209      	str	r2, [sp, #36]	; 0x24

00416d82 <.LVL421>:
   pa = A->used + B->used;
  416d82:	6803      	ldr	r3, [r0, #0]
  416d84:	680a      	ldr	r2, [r1, #0]

00416d86 <.LVL422>:
  416d86:	4413      	add	r3, r2

00416d88 <.LVL423>:
  416d88:	2b87      	cmp	r3, #135	; 0x87
  416d8a:	bfa8      	it	ge
  416d8c:	2387      	movge	r3, #135	; 0x87

00416d8e <.LVL424>:
  416d8e:	461c      	mov	r4, r3
  416d90:	9302      	str	r3, [sp, #8]

00416d92 <.LBB52>:
    fp_zero(a);
  416d92:	a80a      	add	r0, sp, #40	; 0x28

00416d94 <.LVL426>:
  416d94:	f006 fdf8 	bl	41d988 <.LFE163>

00416d98 <.LBE52>:
   for (ix = 0; ix < pa; ix++) {
  416d98:	2c00      	cmp	r4, #0
  416d9a:	dd4b      	ble.n	416e34 <.LVL451>
      ty = MIN(ix, B->used-1);
  416d9c:	4632      	mov	r2, r6
  416d9e:	f852 3b08 	ldr.w	r3, [r2], #8
  416da2:	9206      	str	r2, [sp, #24]
  416da4:	3b01      	subs	r3, #1
  416da6:	9303      	str	r3, [sp, #12]
      iy = MIN(A->used-tx, ty+1);
  416da8:	462b      	mov	r3, r5
  416daa:	f853 2b08 	ldr.w	r2, [r3], #8
  416dae:	9204      	str	r2, [sp, #16]
  416db0:	9305      	str	r3, [sp, #20]
  416db2:	ab0b      	add	r3, sp, #44	; 0x2c
  416db4:	9301      	str	r3, [sp, #4]
  416db6:	2500      	movs	r5, #0

00416db8 <.LVL428>:
  416db8:	46ac      	mov	ip, r5
  416dba:	46ae      	mov	lr, r5
  416dbc:	e00b      	b.n	416dd6 <.LVL433>

00416dbe <.LVL429>:
      for (iz = 0; iz < iy; ++iz) {
  416dbe:	4663      	mov	r3, ip
  416dc0:	46ac      	mov	ip, r5

00416dc2 <.LVL430>:
      COMBA_FORWARD;
  416dc2:	2500      	movs	r5, #0

00416dc4 <.LVL431>:
      COMBA_STORE(dst->dp[ix]);
  416dc4:	9a01      	ldr	r2, [sp, #4]
  416dc6:	f842 3f04 	str.w	r3, [r2, #4]!
  416dca:	9201      	str	r2, [sp, #4]
   for (ix = 0; ix < pa; ix++) {
  416dcc:	f10e 0e01 	add.w	lr, lr, #1

00416dd0 <.LVL432>:
  416dd0:	9b02      	ldr	r3, [sp, #8]
  416dd2:	4573      	cmp	r3, lr
  416dd4:	d02e      	beq.n	416e34 <.LVL451>

00416dd6 <.LVL433>:
      ty = MIN(ix, B->used-1);
  416dd6:	9b03      	ldr	r3, [sp, #12]
  416dd8:	4573      	cmp	r3, lr
  416dda:	bfa8      	it	ge
  416ddc:	4673      	movge	r3, lr
  416dde:	461f      	mov	r7, r3

00416de0 <.LVL434>:
      tx = ix - ty;
  416de0:	ebae 0303 	sub.w	r3, lr, r3

00416de4 <.LVL435>:
      tmpx = A->dp + tx;
  416de4:	9a05      	ldr	r2, [sp, #20]
  416de6:	eb02 0483 	add.w	r4, r2, r3, lsl #2

00416dea <.LVL436>:
      tmpy = B->dp + ty;
  416dea:	9a06      	ldr	r2, [sp, #24]
  416dec:	eb02 0687 	add.w	r6, r2, r7, lsl #2

00416df0 <.LVL437>:
      iy = MIN(A->used-tx, ty+1);
  416df0:	3701      	adds	r7, #1

00416df2 <.LVL438>:
  416df2:	9a04      	ldr	r2, [sp, #16]
  416df4:	1ad3      	subs	r3, r2, r3

00416df6 <.LVL439>:
  416df6:	429f      	cmp	r7, r3
  416df8:	bfa8      	it	ge
  416dfa:	461f      	movge	r7, r3

00416dfc <.LVL440>:
      for (iz = 0; iz < iy; ++iz) {
  416dfc:	2f00      	cmp	r7, #0
  416dfe:	ddde      	ble.n	416dbe <.LVL429>
  416e00:	2200      	movs	r2, #0
  416e02:	4613      	mov	r3, r2

00416e04 <.LBB54>:
          MULADD(_tmpx, _tmpy);
  416e04:	f854 bb04 	ldr.w	fp, [r4], #4

00416e08 <.LVL442>:
  416e08:	f856 a904 	ldr.w	sl, [r6], #-4

00416e0c <.LVL443>:
  416e0c:	4660      	mov	r0, ip
  416e0e:	2100      	movs	r1, #0
  416e10:	fbea 010b 	umlal	r0, r1, sl, fp

00416e14 <.LVL444>:
  416e14:	4684      	mov	ip, r0

00416e16 <.LVL445>:
  416e16:	f04f 0900 	mov.w	r9, #0
  416e1a:	eb11 0a05 	adds.w	sl, r1, r5
  416e1e:	f149 0b00 	adc.w	fp, r9, #0

00416e22 <.LVL446>:
  416e22:	4655      	mov	r5, sl
  416e24:	445a      	add	r2, fp

00416e26 <.LBE54>:
      for (iz = 0; iz < iy; ++iz) {
  416e26:	3301      	adds	r3, #1

00416e28 <.LVL449>:
  416e28:	429f      	cmp	r7, r3
  416e2a:	d1eb      	bne.n	416e04 <.LBB54>

00416e2c <.LBB57>:
          MULADD(_tmpx, _tmpy);
  416e2c:	4603      	mov	r3, r0

00416e2e <.LVL450>:
  416e2e:	46d4      	mov	ip, sl
  416e30:	4615      	mov	r5, r2

00416e32 <.LBE57>:
  416e32:	e7c7      	b.n	416dc4 <.LVL431>

00416e34 <.LVL451>:
  dst->used = pa;
  416e34:	9902      	ldr	r1, [sp, #8]
  416e36:	910a      	str	r1, [sp, #40]	; 0x28
  dst->sign = A->sign ^ B->sign;
  416e38:	9b07      	ldr	r3, [sp, #28]
  416e3a:	685c      	ldr	r4, [r3, #4]
  416e3c:	9b08      	ldr	r3, [sp, #32]
  416e3e:	685b      	ldr	r3, [r3, #4]
  416e40:	405c      	eors	r4, r3
  416e42:	940b      	str	r4, [sp, #44]	; 0x2c
  fp_clamp(dst);
  416e44:	460b      	mov	r3, r1
  416e46:	b1f1      	cbz	r1, 416e86 <.LCFI67+0x4>
  416e48:	1e4a      	subs	r2, r1, #1
  416e4a:	3301      	adds	r3, #1
  416e4c:	a80a      	add	r0, sp, #40	; 0x28

00416e4e <.LVL452>:
  416e4e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  416e52:	b96b      	cbnz	r3, 416e70 <.LVL453+0x1a>
  416e54:	a894      	add	r0, sp, #592	; 0x250

00416e56 <.LVL453>:
  416e56:	eb00 0381 	add.w	r3, r0, r1, lsl #2
  416e5a:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
  416e5e:	e000      	b.n	416e62 <.LVL453+0xc>
  416e60:	4602      	mov	r2, r0
  416e62:	b172      	cbz	r2, 416e82 <.LCFI67>
  416e64:	1e50      	subs	r0, r2, #1
  416e66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  416e6a:	2900      	cmp	r1, #0
  416e6c:	d0f8      	beq.n	416e60 <.LVL453+0xa>
  416e6e:	920a      	str	r2, [sp, #40]	; 0x28
  416e70:	940b      	str	r4, [sp, #44]	; 0x2c
  fp_copy(dst, C);
  416e72:	9909      	ldr	r1, [sp, #36]	; 0x24
  416e74:	a80a      	add	r0, sp, #40	; 0x28

00416e76 <.LVL454>:
  416e76:	f006 facb 	bl	41d410 <.LFE194>

00416e7a <.LVL455>:
}
  416e7a:	f50d 7d15 	add.w	sp, sp, #596	; 0x254

00416e7e <.LCFI66>:
  416e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00416e82 <.LCFI67>:
  416e82:	2300      	movs	r3, #0
  416e84:	930a      	str	r3, [sp, #40]	; 0x28
  fp_clamp(dst);
  416e86:	2400      	movs	r4, #0
  416e88:	e7f2      	b.n	416e70 <.LVL453+0x1a>

Disassembly of section .text.Reset_Handler%105:

00416e8c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void __attribute__((optimize("-O1"), section(".text.Reset_Handler"), long_call)) Reset_Handler(void)
{
  416e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

00416e8e <.LCFI0>:
    uint32_t *pSrc;

    /* Call the optional application-provided _on_reset() function. */
    if (_on_reset)
  416e8e:	4b3e      	ldr	r3, [pc, #248]	; (416f88 <.LVL15+0x2>)
  416e90:	b103      	cbz	r3, 416e94 <.LVL0>
    {
        _on_reset();
  416e92:	4798      	blx	r3

00416e94 <.LVL0>:
    }

    /* Reserved for use by MPLAB XC32. */
    if (__xc32_on_reset)
  416e94:	4b3d      	ldr	r3, [pc, #244]	; (416f8c <.LVL15+0x6>)
  416e96:	b103      	cbz	r3, 416e9a <.LBB143>
        __xc32_on_reset();
  416e98:	4798      	blx	r3

00416e9a <.LBB143>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  416e9a:	f3ef 8110 	mrs	r1, PRIMASK

00416e9e <.LBB147>:
  __ASM volatile ("cpsid i" : : : "memory");
  416e9e:	b672      	cpsid	i

00416ea0 <.LBE147>:
     SCB->CPACR |= (0xFu << 20);
  416ea0:	4a3b      	ldr	r2, [pc, #236]	; (416f90 <.LVL15+0xa>)
  416ea2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  416ea6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  416eaa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

00416eae <.LBB149>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  416eae:	f3bf 8f4f 	dsb	sy

00416eb2 <.LBB151>:
  __ASM volatile ("isb 0xF":::"memory");
  416eb2:	f3bf 8f6f 	isb	sy

00416eb6 <.LBE151>:
    if (!prim)
  416eb6:	b901      	cbnz	r1, 416eba <.LBB155>

00416eb8 <.LBB153>:
  __ASM volatile ("cpsie i" : : : "memory");
  416eb8:	b662      	cpsie	i

00416eba <.LBB155>:
  __ASM volatile ("dsb 0xF":::"memory");
  416eba:	f3bf 8f4f 	dsb	sy

00416ebe <.LBB159>:
  __ASM volatile ("isb 0xF":::"memory");
  416ebe:	f3bf 8f6f 	isb	sy

00416ec2 <.LBE159>:
    SCB->ITCMCR &= ~(uint32_t)SCB_ITCMCR_EN_Msk;
  416ec2:	4c33      	ldr	r4, [pc, #204]	; (416f90 <.LVL15+0xa>)
  416ec4:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  416ec8:	f023 0301 	bic.w	r3, r3, #1
  416ecc:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
    SCB->DTCMCR &= ~(uint32_t)SCB_ITCMCR_EN_Msk;
  416ed0:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
  416ed4:	f023 0301 	bic.w	r3, r3, #1
  416ed8:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

00416edc <.LBB161>:
  __ASM volatile ("dsb 0xF":::"memory");
  416edc:	f3bf 8f4f 	dsb	sy

00416ee0 <.LBB163>:
  __ASM volatile ("isb 0xF":::"memory");
  416ee0:	f3bf 8f6f 	isb	sy

00416ee4 <.LBE155>:
    /* Disable TCM  */
    TCM_Disable();

    /* Initialize data after TCM is enabled.
     * Data initialization from the XC32 .dinit template */
    __pic32c_data_initialization();
  416ee4:	f003 f88a 	bl	419ffc <.LFE163>

00416ee8 <.LVL2>:
	

#  ifdef SCB_VTOR_TBLOFF_Msk
    /*  Set the vector-table base address in FLASH */
    pSrc = (uint32_t *) & __svectors;
    SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  416ee8:	4b2a      	ldr	r3, [pc, #168]	; (416f94 <.LVL15+0xe>)
  416eea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  416eee:	60a3      	str	r3, [r4, #8]
#  endif /* SCB_VTOR_TBLOFF_Msk */

    /* Initialize the C library */
    __libc_init_array();
  416ef0:	4b29      	ldr	r3, [pc, #164]	; (416f98 <.LVL15+0x12>)
  416ef2:	4798      	blx	r3

00416ef4 <.LBB165>:
  __ASM volatile ("dsb 0xF":::"memory");
  416ef4:	f3bf 8f4f 	dsb	sy

00416ef8 <.LBB170>:
  __ASM volatile ("isb 0xF":::"memory");
  416ef8:	f3bf 8f6f 	isb	sy

00416efc <.LBE170>:
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  416efc:	2200      	movs	r2, #0
  416efe:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250

00416f02 <.LBB172>:
  __ASM volatile ("dsb 0xF":::"memory");
  416f02:	f3bf 8f4f 	dsb	sy

00416f06 <.LBB174>:
  __ASM volatile ("isb 0xF":::"memory");
  416f06:	f3bf 8f6f 	isb	sy

00416f0a <.LBE174>:
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  416f0a:	6963      	ldr	r3, [r4, #20]
  416f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  416f10:	6163      	str	r3, [r4, #20]

00416f12 <.LBB176>:
  __ASM volatile ("dsb 0xF":::"memory");
  416f12:	f3bf 8f4f 	dsb	sy

00416f16 <.LBB178>:
  __ASM volatile ("isb 0xF":::"memory");
  416f16:	f3bf 8f6f 	isb	sy

00416f1a <.LBB180>:
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  416f1a:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84

00416f1e <.LBB183>:
  __ASM volatile ("dsb 0xF":::"memory");
  416f1e:	f3bf 8f4f 	dsb	sy

00416f22 <.LBE183>:
    __DSB();

    ccsidr = SCB->CCSIDR;
  416f22:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80

00416f26 <.LVL4>:

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  416f26:	f3c5 364e 	ubfx	r6, r5, #13, #15

00416f2a <.LVL5>:
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  416f2a:	f3c5 05c9 	ubfx	r5, r5, #3, #10

00416f2e <.LVL6>:
  416f2e:	0177      	lsls	r7, r6, #5
  416f30:	ea4f 7c85 	mov.w	ip, r5, lsl #30
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  416f34:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  416f38:	4620      	mov	r0, r4
  416f3a:	ea07 040e 	and.w	r4, r7, lr
  416f3e:	4662      	mov	r2, ip
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  416f40:	462b      	mov	r3, r5

00416f42 <.LVL8>:
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  416f42:	ea42 0104 	orr.w	r1, r2, r4
  416f46:	f8c0 1260 	str.w	r1, [r0, #608]	; 0x260
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
  416f4a:	3b01      	subs	r3, #1
  416f4c:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
  416f50:	f1b3 3fff 	cmp.w	r3, #4294967295
  416f54:	d1f5      	bne.n	416f42 <.LVL8>
    } while(sets-- != 0U);
  416f56:	3e01      	subs	r6, #1
  416f58:	3f20      	subs	r7, #32
  416f5a:	f1b6 3fff 	cmp.w	r6, #4294967295
  416f5e:	d1ec      	bne.n	416f3a <.LVL6+0xc>

00416f60 <.LBB185>:
  416f60:	f3bf 8f4f 	dsb	sy

00416f64 <.LBE185>:
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  416f64:	4a0a      	ldr	r2, [pc, #40]	; (416f90 <.LVL15+0xa>)
  416f66:	6953      	ldr	r3, [r2, #20]

00416f68 <.LVL11>:
  416f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  416f6c:	6153      	str	r3, [r2, #20]

00416f6e <.LBB187>:
  416f6e:	f3bf 8f4f 	dsb	sy

00416f72 <.LBB189>:
  __ASM volatile ("isb 0xF":::"memory");
  416f72:	f3bf 8f6f 	isb	sy

00416f76 <.LBE180>:

    /* Enable Data Cache    */
    DCache_Enable();

    /* Call the optional application-provided _on_bootstrap() function. */
    if (_on_bootstrap)
  416f76:	4b09      	ldr	r3, [pc, #36]	; (416f9c <.LVL15+0x16>)
  416f78:	b103      	cbz	r3, 416f7c <.LVL13>
    {
        _on_bootstrap();
  416f7a:	4798      	blx	r3

00416f7c <.LVL13>:
    }

    /* Reserved for use by MPLAB XC32. */
    if (__xc32_on_bootstrap)
  416f7c:	4b08      	ldr	r3, [pc, #32]	; (416fa0 <.LVL15+0x1a>)
  416f7e:	b103      	cbz	r3, 416f82 <.LVL14>
    {
        __xc32_on_bootstrap();
  416f80:	4798      	blx	r3

00416f82 <.LVL14>:
    }

    /* Branch to application's main function */
    main();
  416f82:	f006 fdfd 	bl	41db80 <main>

00416f86 <.LVL15>:
  416f86:	e7fe      	b.n	416f86 <.LVL15>
	...
  416f90:	e000ed00 	.word	0xe000ed00
  416f94:	00400000 	.word	0x00400000
  416f98:	0041c245 	.word	0x0041c245
	...

Disassembly of section .text.DesProcessBlock%106:

00416fa4 <DesProcessBlock>:
    {
  416fa4:	b530      	push	{r4, r5, lr}

00416fa6 <.LCFI8>:
  416fa6:	b083      	sub	sp, #12

00416fa8 <.LCFI9>:
  416fa8:	4614      	mov	r4, r2
        XMEMCPY(&l, in, sizeof(l));
  416faa:	680b      	ldr	r3, [r1, #0]
        XMEMCPY(&r, in + sizeof(l), sizeof(r));
  416fac:	6849      	ldr	r1, [r1, #4]

00416fae <.LBB202>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  416fae:	0a1a      	lsrs	r2, r3, #8

00416fb0 <.LVL120>:
  416fb0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
  416fb4:	021b      	lsls	r3, r3, #8

00416fb6 <.LVL121>:
  416fb6:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  416fba:	431a      	orrs	r2, r3

00416fbc <.LBB204>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  416fbc:	ea4f 4232 	mov.w	r2, r2, ror #16

00416fc0 <.LBB206>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  416fc0:	0a0b      	lsrs	r3, r1, #8
  416fc2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  416fc6:	0209      	lsls	r1, r1, #8

00416fc8 <.LVL124>:
  416fc8:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  416fcc:	430b      	orrs	r3, r1

00416fce <.LBB208>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  416fce:	ea4f 3333 	mov.w	r3, r3, ror #12

00416fd2 <.LBE210>:
        work = (*left ^ *right) & 0xf0f0f0f0;
  416fd2:	ea82 0103 	eor.w	r1, r2, r3
  416fd6:	f001 31f0 	and.w	r1, r1, #4042322160	; 0xf0f0f0f0

00416fda <.LVL126>:
        *left ^= work;
  416fda:	404a      	eors	r2, r1

00416fdc <.LVL127>:
        *right = rotrFixed(*right^work, 20U);
  416fdc:	404b      	eors	r3, r1

00416fde <.LBB212>:
        return (x >> y) | (x << (sizeof(y) * 8 - y));
  416fde:	ea4f 5333 	mov.w	r3, r3, ror #20

00416fe2 <.LBE212>:
        work = (*left ^ *right) & 0xffff0000;
  416fe2:	ea82 0103 	eor.w	r1, r2, r3

00416fe6 <.LVL130>:
  416fe6:	4d34      	ldr	r5, [pc, #208]	; (4170b8 <.LVL178+0x2>)
  416fe8:	4029      	ands	r1, r5

00416fea <.LVL131>:
        *left ^= work;
  416fea:	404a      	eors	r2, r1

00416fec <.LVL132>:
        *right = rotrFixed(*right^work, 18U);
  416fec:	404b      	eors	r3, r1

00416fee <.LBB214>:
  416fee:	ea4f 43b3 	mov.w	r3, r3, ror #18

00416ff2 <.LBE214>:
        work = (*left ^ *right) & 0x33333333;
  416ff2:	ea82 0103 	eor.w	r1, r2, r3

00416ff6 <.LVL135>:
  416ff6:	f001 3133 	and.w	r1, r1, #858993459	; 0x33333333

00416ffa <.LVL136>:
        *left ^= work;
  416ffa:	404a      	eors	r2, r1

00416ffc <.LVL137>:
        *right = rotrFixed(*right^work, 6U);
  416ffc:	404b      	eors	r3, r1

00416ffe <.LBB216>:
  416ffe:	ea4f 13b3 	mov.w	r3, r3, ror #6

00417002 <.LBE216>:
        work = (*left ^ *right) & 0x00ff00ff;
  417002:	ea82 0103 	eor.w	r1, r2, r3

00417006 <.LVL140>:
  417006:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff

0041700a <.LVL141>:
        *left ^= work;
  41700a:	404a      	eors	r2, r1

0041700c <.LVL142>:
        *right = rotlFixed(*right^work, 9U);
  41700c:	404b      	eors	r3, r1

0041700e <.LBB218>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  41700e:	ea4f 53f3 	mov.w	r3, r3, ror #23

00417012 <.LBE218>:
        work = (*left ^ *right) & 0xaaaaaaaa;
  417012:	ea82 0103 	eor.w	r1, r2, r3

00417016 <.LVL145>:
  417016:	f001 31aa 	and.w	r1, r1, #2863311530	; 0xaaaaaaaa

0041701a <.LVL146>:
        *left = rotlFixed(*left^work, 1U);
  41701a:	404a      	eors	r2, r1

0041701c <.LBB220>:
  41701c:	ea4f 72f2 	mov.w	r2, r2, ror #31

00417020 <.LBE220>:
  417020:	9201      	str	r2, [sp, #4]
        *right ^= work;
  417022:	404b      	eors	r3, r1
  417024:	a902      	add	r1, sp, #8

00417026 <.LVL147>:
  417026:	f841 3d08 	str.w	r3, [r1, #-8]!

0041702a <.LBE208>:
        DesRawProcessBlock(&l, &r, des->key);
  41702a:	f100 0210 	add.w	r2, r0, #16
  41702e:	a801      	add	r0, sp, #4

00417030 <.LVL149>:
  417030:	f7ff fa8e 	bl	416550 <L0>

00417034 <.LBB222>:
        return (x >> y) | (x << (sizeof(y) * 8 - y));
  417034:	9a00      	ldr	r2, [sp, #0]
  417036:	ea4f 0272 	mov.w	r2, r2, ror #1

0041703a <.LBE224>:
        work = (*left ^ *right) & 0xaaaaaaaa;
  41703a:	9b01      	ldr	r3, [sp, #4]
  41703c:	ea82 0103 	eor.w	r1, r2, r3
  417040:	f001 31aa 	and.w	r1, r1, #2863311530	; 0xaaaaaaaa

00417044 <.LVL152>:
        *right ^= work;
  417044:	404a      	eors	r2, r1

00417046 <.LVL153>:
        *left = rotrFixed(*left^work, 9U);
  417046:	404b      	eors	r3, r1

00417048 <.LBB226>:
  417048:	ea4f 2373 	mov.w	r3, r3, ror #9

0041704c <.LBE226>:
        work = (*left ^ *right) & 0x00ff00ff;
  41704c:	ea82 0103 	eor.w	r1, r2, r3

00417050 <.LVL156>:
  417050:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff

00417054 <.LVL157>:
        *right ^= work;
  417054:	404a      	eors	r2, r1

00417056 <.LVL158>:
        *left = rotlFixed(*left^work, 6U);
  417056:	404b      	eors	r3, r1

00417058 <.LBB228>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  417058:	ea4f 63b3 	mov.w	r3, r3, ror #26

0041705c <.LBE228>:
        work = (*left ^ *right) & 0x33333333;
  41705c:	ea82 0103 	eor.w	r1, r2, r3

00417060 <.LVL161>:
  417060:	f001 3133 	and.w	r1, r1, #858993459	; 0x33333333

00417064 <.LVL162>:
        *right ^= work;
  417064:	404a      	eors	r2, r1

00417066 <.LVL163>:
        *left = rotlFixed(*left^work, 18U);
  417066:	404b      	eors	r3, r1

00417068 <.LBB230>:
  417068:	ea4f 33b3 	mov.w	r3, r3, ror #14

0041706c <.LBE230>:
        work = (*left ^ *right) & 0xffff0000;
  41706c:	ea82 0103 	eor.w	r1, r2, r3

00417070 <.LVL166>:
  417070:	400d      	ands	r5, r1

00417072 <.LVL167>:
        *right ^= work;
  417072:	406a      	eors	r2, r5

00417074 <.LVL168>:
        *left = rotlFixed(*left^work, 20U);
  417074:	406b      	eors	r3, r5

00417076 <.LBB232>:
  417076:	ea4f 3333 	mov.w	r3, r3, ror #12

0041707a <.LBE232>:
        work = (*left ^ *right) & 0xf0f0f0f0;
  41707a:	ea82 0103 	eor.w	r1, r2, r3
  41707e:	f001 31f0 	and.w	r1, r1, #4042322160	; 0xf0f0f0f0

00417082 <.LVL171>:
        *right ^= work;
  417082:	404a      	eors	r2, r1

00417084 <.LVL172>:
        *left = rotrFixed(*left^work, 4U);
  417084:	404b      	eors	r3, r1

00417086 <.LBB234>:
        return (x >> y) | (x << (sizeof(y) * 8 - y));
  417086:	ea4f 1333 	mov.w	r3, r3, ror #4

0041708a <.LBB236>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  41708a:	0211      	lsls	r1, r2, #8
  41708c:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  417090:	0a12      	lsrs	r2, r2, #8

00417092 <.LVL175>:
  417092:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
  417096:	430a      	orrs	r2, r1

00417098 <.LBB238>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  417098:	ea4f 4232 	mov.w	r2, r2, ror #16

0041709c <.LBE236>:
        XMEMCPY(out, &r, sizeof(r));
  41709c:	6022      	str	r2, [r4, #0]

0041709e <.LBB240>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  41709e:	0a1a      	lsrs	r2, r3, #8
  4170a0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
  4170a4:	021b      	lsls	r3, r3, #8

004170a6 <.LVL176>:
  4170a6:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  4170aa:	4313      	orrs	r3, r2

004170ac <.LBB242>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  4170ac:	ea4f 4333 	mov.w	r3, r3, ror #16

004170b0 <.LBE240>:
        XMEMCPY(out + sizeof(r), &l, sizeof(l));
  4170b0:	6063      	str	r3, [r4, #4]
    }
  4170b2:	b003      	add	sp, #12

004170b4 <.LCFI10>:
  4170b4:	bd30      	pop	{r4, r5, pc}

004170b6 <.LVL178>:
  4170b6:	bf00      	nop
  4170b8:	ffff0000 	.word	0xffff0000

Disassembly of section .text.__mdiff%107:

004170bc <__mdiff>:
  4170bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

004170c0 <.LBB30>:
  4170c0:	690f      	ldr	r7, [r1, #16]

004170c2 <.LBE30>:
  4170c2:	460e      	mov	r6, r1

004170c4 <.LBB35>:
  4170c4:	6911      	ldr	r1, [r2, #16]

004170c6 <.LVL227>:
  4170c6:	1a7f      	subs	r7, r7, r1

004170c8 <.LVL228>:
  4170c8:	2f00      	cmp	r7, #0

004170ca <.LBE35>:
  4170ca:	4690      	mov	r8, r2

004170cc <.LBB36>:
  4170cc:	d117      	bne.n	4170fe <.LVL243>
  4170ce:	0089      	lsls	r1, r1, #2
  4170d0:	f106 0514 	add.w	r5, r6, #20
  4170d4:	f102 0e14 	add.w	lr, r2, #20
  4170d8:	186b      	adds	r3, r5, r1
  4170da:	4471      	add	r1, lr
  4170dc:	e001      	b.n	4170e2 <.LVL233+0x4>

004170de <.LVL233>:
  4170de:	429d      	cmp	r5, r3
  4170e0:	d25c      	bcs.n	41719c <.LVL274>
  4170e2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  4170e6:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  4170ea:	42a2      	cmp	r2, r4
  4170ec:	d0f7      	beq.n	4170de <.LVL233>
  4170ee:	d25e      	bcs.n	4171ae <.LBB37>
  4170f0:	4633      	mov	r3, r6
  4170f2:	462c      	mov	r4, r5

004170f4 <.LVL238>:
  4170f4:	4646      	mov	r6, r8

004170f6 <.LVL239>:
  4170f6:	4675      	mov	r5, lr
  4170f8:	4698      	mov	r8, r3

004170fa <.LBE36>:
  4170fa:	2701      	movs	r7, #1
  4170fc:	e005      	b.n	41710a <.LVL245>

004170fe <.LVL243>:
  4170fe:	db58      	blt.n	4171b2 <.LBE37>

00417100 <.LVL244>:
  417100:	f106 0514 	add.w	r5, r6, #20
  417104:	f108 0414 	add.w	r4, r8, #20
  417108:	2700      	movs	r7, #0

0041710a <.LVL245>:
  41710a:	6871      	ldr	r1, [r6, #4]
  41710c:	f005 f9a6 	bl	41c45c <.LFE2>

00417110 <.LVL246>:
  417110:	f8d8 3010 	ldr.w	r3, [r8, #16]
  417114:	6936      	ldr	r6, [r6, #16]

00417116 <.LVL247>:
  417116:	60c7      	str	r7, [r0, #12]
  417118:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  41711c:	46a6      	mov	lr, r4
  41711e:	eb05 0786 	add.w	r7, r5, r6, lsl #2

00417122 <.LVL248>:
  417122:	f100 0414 	add.w	r4, r0, #20

00417126 <.LVL249>:
  417126:	2300      	movs	r3, #0

00417128 <.LVL250>:
  417128:	f85e 1b04 	ldr.w	r1, [lr], #4
  41712c:	f855 8b04 	ldr.w	r8, [r5], #4

00417130 <.LVL251>:
  417130:	b28a      	uxth	r2, r1
  417132:	fa13 f388 	uxtah	r3, r3, r8

00417136 <.LVL252>:
  417136:	0c09      	lsrs	r1, r1, #16
  417138:	1a9a      	subs	r2, r3, r2

0041713a <.LVL253>:
  41713a:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  41713e:	eb03 4322 	add.w	r3, r3, r2, asr #16

00417142 <.LVL254>:
  417142:	b292      	uxth	r2, r2

00417144 <.LVL255>:
  417144:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  417148:	45f4      	cmp	ip, lr
  41714a:	f844 2b04 	str.w	r2, [r4], #4

0041714e <.LVL256>:
  41714e:	ea4f 4323 	mov.w	r3, r3, asr #16

00417152 <.LVL257>:
  417152:	d8e9      	bhi.n	417128 <.LVL250>

00417154 <.LVL258>:
  417154:	42af      	cmp	r7, r5
  417156:	d917      	bls.n	417188 <.LVL269>
  417158:	46a4      	mov	ip, r4

0041715a <.LVL259>:
  41715a:	46ae      	mov	lr, r5

0041715c <.LVL260>:
  41715c:	f85e 2b04 	ldr.w	r2, [lr], #4

00417160 <.LVL261>:
  417160:	fa13 f382 	uxtah	r3, r3, r2

00417164 <.LVL262>:
  417164:	1419      	asrs	r1, r3, #16

00417166 <.LVL263>:
  417166:	eb01 4112 	add.w	r1, r1, r2, lsr #16

0041716a <.LVL264>:
  41716a:	b29b      	uxth	r3, r3

0041716c <.LVL265>:
  41716c:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  417170:	4577      	cmp	r7, lr
  417172:	f84c 2b04 	str.w	r2, [ip], #4

00417176 <.LVL266>:
  417176:	ea4f 4321 	mov.w	r3, r1, asr #16

0041717a <.LVL267>:
  41717a:	d8ef      	bhi.n	41715c <.LVL260>
  41717c:	43ed      	mvns	r5, r5
  41717e:	442f      	add	r7, r5

00417180 <.LVL268>:
  417180:	f027 0703 	bic.w	r7, r7, #3
  417184:	3704      	adds	r7, #4
  417186:	443c      	add	r4, r7

00417188 <.LVL269>:
  417188:	3c04      	subs	r4, #4
  41718a:	b922      	cbnz	r2, 417196 <.LVL273+0x4>

0041718c <.LVL271>:
  41718c:	f854 3d04 	ldr.w	r3, [r4, #-4]!

00417190 <.LVL272>:
  417190:	3e01      	subs	r6, #1

00417192 <.LVL273>:
  417192:	2b00      	cmp	r3, #0
  417194:	d0fa      	beq.n	41718c <.LVL271>
  417196:	6106      	str	r6, [r0, #16]
  417198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041719c <.LVL274>:
  41719c:	2100      	movs	r1, #0
  41719e:	f005 f95d 	bl	41c45c <.LFE2>

004171a2 <.LVL275>:
  4171a2:	2201      	movs	r2, #1
  4171a4:	2300      	movs	r3, #0
  4171a6:	6102      	str	r2, [r0, #16]
  4171a8:	6143      	str	r3, [r0, #20]
  4171aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004171ae <.LBB37>:
  4171ae:	4674      	mov	r4, lr
  4171b0:	e7ab      	b.n	41710a <.LVL245>

004171b2 <.LBE37>:
  4171b2:	4633      	mov	r3, r6
  4171b4:	f106 0414 	add.w	r4, r6, #20
  4171b8:	f102 0514 	add.w	r5, r2, #20
  4171bc:	4616      	mov	r6, r2

004171be <.LVL278>:
  4171be:	2701      	movs	r7, #1
  4171c0:	4698      	mov	r8, r3
  4171c2:	e7a2      	b.n	41710a <.LVL245>

Disassembly of section .text.wc_RsaPrivateKeyDecode%108:

004171c4 <wc_RsaPrivateKeyDecode>:
int wc_RsaPrivateKeyDecode(const byte* input, word32* inOutIdx, RsaKey* key,
                        word32 inSz)
{
    int version, length;

    if (inOutIdx == NULL) {
  4171c4:	2900      	cmp	r1, #0
  4171c6:	d062      	beq.n	41728e <.LCFI60>
{
  4171c8:	b5f0      	push	{r4, r5, r6, r7, lr}

004171ca <.LCFI57>:
  4171ca:	b083      	sub	sp, #12

004171cc <.LCFI58>:
  4171cc:	460d      	mov	r5, r1
  4171ce:	461e      	mov	r6, r3
  4171d0:	4617      	mov	r7, r2
  4171d2:	4604      	mov	r4, r0
        return BAD_FUNC_ARG;
    }
    if (GetSequence(input, inOutIdx, &length, inSz) < 0)
  4171d4:	466a      	mov	r2, sp

004171d6 <.LVL327>:
  4171d6:	f006 fbab 	bl	41d930 <.LFE164>

004171da <.LVL328>:
  4171da:	2800      	cmp	r0, #0
  4171dc:	db5a      	blt.n	417294 <.LCFI61>
        return ASN_PARSE_E;

    if (GetMyVersion(input, inOutIdx, &version, inSz) < 0)
  4171de:	4633      	mov	r3, r6
  4171e0:	aa01      	add	r2, sp, #4
  4171e2:	4629      	mov	r1, r5
  4171e4:	4620      	mov	r0, r4
  4171e6:	f005 fd51 	bl	41cc8c <.LFE174>

004171ea <.LVL329>:
  4171ea:	2800      	cmp	r0, #0
  4171ec:	db55      	blt.n	41729a <.LCFI61+0x6>
        return ASN_PARSE_E;

    key->type = RSA_PRIVATE;
  4171ee:	2201      	movs	r2, #1
  4171f0:	f241 1348 	movw	r3, #4424	; 0x1148
  4171f4:	50fa      	str	r2, [r7, r3]

    if (GetInt(&key->n,  input, inOutIdx, inSz) < 0 ||
  4171f6:	4633      	mov	r3, r6
  4171f8:	462a      	mov	r2, r5
  4171fa:	4621      	mov	r1, r4
  4171fc:	4638      	mov	r0, r7
  4171fe:	f004 ff25 	bl	41c04c <.LFE144>

00417202 <.LVL330>:
  417202:	2800      	cmp	r0, #0
  417204:	db4c      	blt.n	4172a0 <.LCFI61+0xc>
        GetInt(&key->e,  input, inOutIdx, inSz) < 0 ||
  417206:	4633      	mov	r3, r6
  417208:	462a      	mov	r2, r5
  41720a:	4621      	mov	r1, r4
  41720c:	f507 700a 	add.w	r0, r7, #552	; 0x228
  417210:	f004 ff1c 	bl	41c04c <.LFE144>

00417214 <.LVL331>:
    if (GetInt(&key->n,  input, inOutIdx, inSz) < 0 ||
  417214:	2800      	cmp	r0, #0
  417216:	db46      	blt.n	4172a6 <.LCFI61+0x12>
        GetInt(&key->d,  input, inOutIdx, inSz) < 0 ||
  417218:	4633      	mov	r3, r6
  41721a:	462a      	mov	r2, r5
  41721c:	4621      	mov	r1, r4
  41721e:	f507 608a 	add.w	r0, r7, #1104	; 0x450
  417222:	f004 ff13 	bl	41c04c <.LFE144>

00417226 <.LVL332>:
        GetInt(&key->e,  input, inOutIdx, inSz) < 0 ||
  417226:	2800      	cmp	r0, #0
  417228:	db40      	blt.n	4172ac <.LCFI61+0x18>
        GetInt(&key->p,  input, inOutIdx, inSz) < 0 ||
  41722a:	4633      	mov	r3, r6
  41722c:	462a      	mov	r2, r5
  41722e:	4621      	mov	r1, r4
  417230:	f507 60cf 	add.w	r0, r7, #1656	; 0x678
  417234:	f004 ff0a 	bl	41c04c <.LFE144>

00417238 <.LVL333>:
        GetInt(&key->d,  input, inOutIdx, inSz) < 0 ||
  417238:	2800      	cmp	r0, #0
  41723a:	db3a      	blt.n	4172b2 <.LCFI61+0x1e>
        GetInt(&key->q,  input, inOutIdx, inSz) < 0 ||
  41723c:	4633      	mov	r3, r6
  41723e:	462a      	mov	r2, r5
  417240:	4621      	mov	r1, r4
  417242:	f507 600a 	add.w	r0, r7, #2208	; 0x8a0
  417246:	f004 ff01 	bl	41c04c <.LFE144>

0041724a <.LVL334>:
        GetInt(&key->p,  input, inOutIdx, inSz) < 0 ||
  41724a:	2800      	cmp	r0, #0
  41724c:	db34      	blt.n	4172b8 <.LCFI61+0x24>
        GetInt(&key->dP, input, inOutIdx, inSz) < 0 ||
  41724e:	4633      	mov	r3, r6
  417250:	462a      	mov	r2, r5
  417252:	4621      	mov	r1, r4
  417254:	f607 20c8 	addw	r0, r7, #2760	; 0xac8
  417258:	f004 fef8 	bl	41c04c <.LFE144>

0041725c <.LVL335>:
        GetInt(&key->q,  input, inOutIdx, inSz) < 0 ||
  41725c:	2800      	cmp	r0, #0
  41725e:	db2e      	blt.n	4172be <.LCFI61+0x2a>
        GetInt(&key->dQ, input, inOutIdx, inSz) < 0 ||
  417260:	4633      	mov	r3, r6
  417262:	462a      	mov	r2, r5
  417264:	4621      	mov	r1, r4
  417266:	f507 604f 	add.w	r0, r7, #3312	; 0xcf0
  41726a:	f004 feef 	bl	41c04c <.LFE144>

0041726e <.LVL336>:
        GetInt(&key->dP, input, inOutIdx, inSz) < 0 ||
  41726e:	2800      	cmp	r0, #0
  417270:	db28      	blt.n	4172c4 <.LCFI61+0x30>
        GetInt(&key->u,  input, inOutIdx, inSz) < 0 )  return ASN_RSA_KEY_E;
  417272:	4633      	mov	r3, r6
  417274:	462a      	mov	r2, r5
  417276:	4621      	mov	r1, r4
  417278:	f607 7018 	addw	r0, r7, #3864	; 0xf18
  41727c:	f004 fee6 	bl	41c04c <.LFE144>

00417280 <.LVL337>:
        GetInt(&key->dQ, input, inOutIdx, inSz) < 0 ||
  417280:	2800      	cmp	r0, #0
        GetInt(&key->u,  input, inOutIdx, inSz) < 0 )  return ASN_RSA_KEY_E;
  417282:	bfac      	ite	ge
  417284:	2000      	movge	r0, #0
  417286:	f06f 008e 	mvnlt.w	r0, #142	; 0x8e
        return BAD_STATE_E;
    }
#endif

    return 0;
}
  41728a:	b003      	add	sp, #12

0041728c <.LCFI59>:
  41728c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0041728e <.LCFI60>:
        return BAD_FUNC_ARG;
  41728e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00417292 <.LVL339>:
  417292:	4770      	bx	lr

00417294 <.LCFI61>:
        return ASN_PARSE_E;
  417294:	f06f 008b 	mvn.w	r0, #139	; 0x8b
  417298:	e7f7      	b.n	41728a <.LVL337+0xa>
        return ASN_PARSE_E;
  41729a:	f06f 008b 	mvn.w	r0, #139	; 0x8b
  41729e:	e7f4      	b.n	41728a <.LVL337+0xa>
        GetInt(&key->u,  input, inOutIdx, inSz) < 0 )  return ASN_RSA_KEY_E;
  4172a0:	f06f 008e 	mvn.w	r0, #142	; 0x8e
  4172a4:	e7f1      	b.n	41728a <.LVL337+0xa>
  4172a6:	f06f 008e 	mvn.w	r0, #142	; 0x8e
  4172aa:	e7ee      	b.n	41728a <.LVL337+0xa>
  4172ac:	f06f 008e 	mvn.w	r0, #142	; 0x8e
  4172b0:	e7eb      	b.n	41728a <.LVL337+0xa>
  4172b2:	f06f 008e 	mvn.w	r0, #142	; 0x8e
  4172b6:	e7e8      	b.n	41728a <.LVL337+0xa>
  4172b8:	f06f 008e 	mvn.w	r0, #142	; 0x8e
  4172bc:	e7e5      	b.n	41728a <.LVL337+0xa>
  4172be:	f06f 008e 	mvn.w	r0, #142	; 0x8e
  4172c2:	e7e2      	b.n	41728a <.LVL337+0xa>
  4172c4:	f06f 008e 	mvn.w	r0, #142	; 0x8e
  4172c8:	e7df      	b.n	41728a <.LVL337+0xa>

Disassembly of section .rodata._ctype_%109:

004172cc <_ctype_>:
  4172cc:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  4172dc:	2020 2020 2020 2020 2020 2020 2020 2020                     
  4172ec:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  4172fc:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  41730c:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  41731c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  41732c:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  41733c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  41734c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
  4173cc:	0000 bf00                                   ....

Disassembly of section .rodata._length_code%110:

004173d0 <_length_code>:
  4173d0:	0100 0302 0504 0706 0808 0909 0a0a 0b0b     ................
  4173e0:	0c0c 0c0c 0d0d 0d0d 0e0e 0e0e 0f0f 0f0f     ................
  4173f0:	1010 1010 1010 1010 1111 1111 1111 1111     ................
  417400:	1212 1212 1212 1212 1313 1313 1313 1313     ................
  417410:	1414 1414 1414 1414 1414 1414 1414 1414     ................
  417420:	1515 1515 1515 1515 1515 1515 1515 1515     ................
  417430:	1616 1616 1616 1616 1616 1616 1616 1616     ................
  417440:	1717 1717 1717 1717 1717 1717 1717 1717     ................
  417450:	1818 1818 1818 1818 1818 1818 1818 1818     ................
  417460:	1818 1818 1818 1818 1818 1818 1818 1818     ................
  417470:	1919 1919 1919 1919 1919 1919 1919 1919     ................
  417480:	1919 1919 1919 1919 1919 1919 1919 1919     ................
  417490:	1a1a 1a1a 1a1a 1a1a 1a1a 1a1a 1a1a 1a1a     ................
  4174a0:	1a1a 1a1a 1a1a 1a1a 1a1a 1a1a 1a1a 1a1a     ................
  4174b0:	1b1b 1b1b 1b1b 1b1b 1b1b 1b1b 1b1b 1b1b     ................
  4174c0:	1b1b 1b1b 1b1b 1b1b 1b1b 1b1b 1b1b 1c1b     ................

Disassembly of section .text.wc_ecc_export_x963%111:

004174d0 <wc_ecc_export_x963>:
}


/* export public ECC key in ANSI X9.63 format */
int wc_ecc_export_x963(ecc_key* key, byte* out, word32* outLen)
{
  4174d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

004174d4 <.LCFI104>:
  4174d4:	b0c1      	sub	sp, #260	; 0x104

004174d6 <.LCFI105>:
#endif
   word32 pubxlen, pubylen;
#endif /* WOLFSSL_ATECC508A */

   /* return length needed only */
   if (key != NULL && out == NULL && outLen != NULL) {
  4174d6:	460f      	mov	r7, r1
  4174d8:	fab1 f181 	clz	r1, r1

004174dc <.LVL1248>:
  4174dc:	0949      	lsrs	r1, r1, #5
  4174de:	4615      	mov	r5, r2
  4174e0:	2a00      	cmp	r2, #0
  4174e2:	bf0c      	ite	eq
  4174e4:	2200      	moveq	r2, #0
  4174e6:	f001 0201 	andne.w	r2, r1, #1

004174ea <.LVL1249>:
  4174ea:	b10a      	cbz	r2, 4174f0 <.LVL1249+0x6>
  4174ec:	2800      	cmp	r0, #0
  4174ee:	d13a      	bne.n	417566 <.LCFI107>
      numlen = key->dp->size;
      *outLen = 1 + 2*numlen;
      return LENGTH_ONLY_E;
   }

   if (key == NULL || out == NULL || outLen == NULL)
  4174f0:	2d00      	cmp	r5, #0
  4174f2:	bf08      	it	eq
  4174f4:	f041 0101 	orreq.w	r1, r1, #1
  4174f8:	2900      	cmp	r1, #0
  4174fa:	d15e      	bne.n	4175ba <.LVL1274>
  4174fc:	2800      	cmp	r0, #0
  4174fe:	d05c      	beq.n	4175ba <.LVL1274>
  417500:	4604      	mov	r4, r0
      return ECC_BAD_ARG_E;

   if (wc_ecc_is_valid_idx(key->idx) == 0) {
  417502:	6840      	ldr	r0, [r0, #4]

00417504 <.LVL1250>:
  417504:	f005 ff72 	bl	41d3ec <wc_ecc_is_valid_idx>

00417508 <.LVL1251>:
  417508:	2800      	cmp	r0, #0
  41750a:	d059      	beq.n	4175c0 <.LVL1275>
      return ECC_BAD_ARG_E;
   }
   numlen = key->dp->size;
  41750c:	6923      	ldr	r3, [r4, #16]
  41750e:	681e      	ldr	r6, [r3, #0]

00417510 <.LVL1252>:

    /* verify room in out buffer */
   if (*outLen < (1 + 2*numlen)) {
  417510:	ea4f 0946 	mov.w	r9, r6, lsl #1
  417514:	f109 0901 	add.w	r9, r9, #1
  417518:	682b      	ldr	r3, [r5, #0]
  41751a:	454b      	cmp	r3, r9
  41751c:	d32b      	bcc.n	417576 <.LVL1266>
   ret = BAD_COND_E;

#else

   /* verify public key length is less than key size */
   pubxlen = mp_unsigned_bin_size(key->pubkey.x);
  41751e:	f104 0a18 	add.w	sl, r4, #24
  417522:	4650      	mov	r0, sl
  417524:	f006 fc22 	bl	41dd6c <.LFE82>

00417528 <.LVL1253>:
  417528:	4680      	mov	r8, r0

0041752a <.LVL1254>:
   pubylen = mp_unsigned_bin_size(key->pubkey.y);
  41752a:	f504 7410 	add.w	r4, r4, #576	; 0x240

0041752e <.LVL1255>:
  41752e:	4620      	mov	r0, r4

00417530 <.LVL1256>:
  417530:	f006 fc1c 	bl	41dd6c <.LFE82>

00417534 <.LVL1257>:
  417534:	4683      	mov	fp, r0

00417536 <.LVL1258>:
   if ((pubxlen > numlen) || (pubylen > numlen)) {
  417536:	4546      	cmp	r6, r8
  417538:	d345      	bcc.n	4175c6 <.LVL1276>
  41753a:	4286      	cmp	r6, r0
  41753c:	d343      	bcc.n	4175c6 <.LVL1276>
      WOLFSSL_MSG("Public key x/y invalid!");
      return BUFFER_E;
   }

   /* store byte 0x04 */
   out[0] = 0x04;
  41753e:	2304      	movs	r3, #4
  417540:	703b      	strb	r3, [r7, #0]
   if (buf == NULL)
      return MEMORY_E;
#endif

   /* pad and store x */
   XMEMSET(buf, 0, ECC_BUFSIZE);
  417542:	f44f 7280 	mov.w	r2, #256	; 0x100
  417546:	2100      	movs	r1, #0
  417548:	4668      	mov	r0, sp

0041754a <.LVL1259>:
  41754a:	f002 fc29 	bl	419da0 <.LFE166>

0041754e <.LVL1260>:
   ret = mp_to_unsigned_bin(key->pubkey.x, buf + (numlen - pubxlen));
  41754e:	eba6 0108 	sub.w	r1, r6, r8
  417552:	4469      	add	r1, sp
  417554:	4650      	mov	r0, sl
  417556:	f006 fba3 	bl	41dca0 <.LFE73>

0041755a <.LVL1261>:
   if (ret != MP_OKAY)
  41755a:	4680      	mov	r8, r0

0041755c <.LVL1262>:
  41755c:	b180      	cbz	r0, 417580 <.LVL1267>

0041755e <.LVL1263>:
   XFREE(buf, NULL, DYNAMIC_TYPE_ECC_BUFFER);
#endif
#endif /* WOLFSSL_ATECC508A */

   return ret;
}
  41755e:	4640      	mov	r0, r8
  417560:	b041      	add	sp, #260	; 0x104

00417562 <.LCFI106>:
  417562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00417566 <.LCFI107>:
      numlen = key->dp->size;
  417566:	6903      	ldr	r3, [r0, #16]
      *outLen = 1 + 2*numlen;
  417568:	681b      	ldr	r3, [r3, #0]
  41756a:	005b      	lsls	r3, r3, #1
  41756c:	3301      	adds	r3, #1
  41756e:	602b      	str	r3, [r5, #0]

00417570 <.LVL1265>:
      return LENGTH_ONLY_E;
  417570:	f06f 08c9 	mvn.w	r8, #201	; 0xc9
  417574:	e7f3      	b.n	41755e <.LVL1263>

00417576 <.LVL1266>:
      *outLen = 1 + 2*numlen;
  417576:	f8c5 9000 	str.w	r9, [r5]
      return BUFFER_E;
  41757a:	f06f 0883 	mvn.w	r8, #131	; 0x83
  41757e:	e7ee      	b.n	41755e <.LVL1263>

00417580 <.LVL1267>:
   XMEMCPY(out+1, buf, numlen);
  417580:	4632      	mov	r2, r6
  417582:	4669      	mov	r1, sp
  417584:	1c78      	adds	r0, r7, #1

00417586 <.LVL1268>:
  417586:	f7fe ff49 	bl	41641c <memcpy>

0041758a <.LVL1269>:
   XMEMSET(buf, 0, ECC_BUFSIZE);
  41758a:	f44f 7280 	mov.w	r2, #256	; 0x100
  41758e:	2100      	movs	r1, #0
  417590:	4668      	mov	r0, sp
  417592:	f002 fc05 	bl	419da0 <.LFE166>

00417596 <.LVL1270>:
   ret = mp_to_unsigned_bin(key->pubkey.y, buf + (numlen - pubylen));
  417596:	eba6 010b 	sub.w	r1, r6, fp
  41759a:	4469      	add	r1, sp
  41759c:	4620      	mov	r0, r4
  41759e:	f006 fb7f 	bl	41dca0 <.LFE73>

004175a2 <.LVL1271>:
   if (ret != MP_OKAY)
  4175a2:	4680      	mov	r8, r0
  4175a4:	2800      	cmp	r0, #0
  4175a6:	d1da      	bne.n	41755e <.LVL1263>
   XMEMCPY(out+1+numlen, buf, numlen);
  4175a8:	1c70      	adds	r0, r6, #1

004175aa <.LVL1272>:
  4175aa:	4632      	mov	r2, r6
  4175ac:	4669      	mov	r1, sp
  4175ae:	4438      	add	r0, r7
  4175b0:	f7fe ff34 	bl	41641c <memcpy>

004175b4 <.LVL1273>:
   *outLen = 1 + 2*numlen;
  4175b4:	f8c5 9000 	str.w	r9, [r5]
  4175b8:	e7d1      	b.n	41755e <.LVL1263>

004175ba <.LVL1274>:
      return ECC_BAD_ARG_E;
  4175ba:	f06f 08a9 	mvn.w	r8, #169	; 0xa9
  4175be:	e7ce      	b.n	41755e <.LVL1263>

004175c0 <.LVL1275>:
      return ECC_BAD_ARG_E;
  4175c0:	f06f 08a9 	mvn.w	r8, #169	; 0xa9
  4175c4:	e7cb      	b.n	41755e <.LVL1263>

004175c6 <.LVL1276>:
      return BUFFER_E;
  4175c6:	f06f 0883 	mvn.w	r8, #131	; 0x83

004175ca <.LVL1277>:
  4175ca:	e7c8      	b.n	41755e <.LVL1263>

Disassembly of section .text.__ssprint_r%112:

004175cc <__ssprint_r>:
  4175cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

004175d0 <.LCFI0>:
  4175d0:	6893      	ldr	r3, [r2, #8]
  4175d2:	b083      	sub	sp, #12

004175d4 <.LCFI1>:
  4175d4:	4690      	mov	r8, r2

004175d6 <.LVL1>:
  4175d6:	2b00      	cmp	r3, #0
  4175d8:	d070      	beq.n	4176bc <.LCFI3>
  4175da:	4682      	mov	sl, r0
  4175dc:	460c      	mov	r4, r1
  4175de:	6817      	ldr	r7, [r2, #0]
  4175e0:	688d      	ldr	r5, [r1, #8]
  4175e2:	6808      	ldr	r0, [r1, #0]

004175e4 <.LVL2>:
  4175e4:	e042      	b.n	41766c <.LVL16>

004175e6 <.LVL3>:
  4175e6:	89a3      	ldrh	r3, [r4, #12]
  4175e8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4175ec:	d02e      	beq.n	41764c <.LBE2>

004175ee <.LBB2>:
  4175ee:	6965      	ldr	r5, [r4, #20]
  4175f0:	6921      	ldr	r1, [r4, #16]
  4175f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  4175f6:	eba0 0b01 	sub.w	fp, r0, r1

004175fa <.LVL4>:
  4175fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  4175fe:	f10b 0001 	add.w	r0, fp, #1
  417602:	106d      	asrs	r5, r5, #1

00417604 <.LVL5>:
  417604:	4430      	add	r0, r6
  417606:	42a8      	cmp	r0, r5
  417608:	462a      	mov	r2, r5
  41760a:	bf84      	itt	hi
  41760c:	4605      	movhi	r5, r0
  41760e:	462a      	movhi	r2, r5
  417610:	055b      	lsls	r3, r3, #21
  417612:	d538      	bpl.n	417686 <.LBB3>
  417614:	4611      	mov	r1, r2
  417616:	4650      	mov	r0, sl
  417618:	f7f6 fc06 	bl	40de28 <.LFE183>

0041761c <.LVL7>:
  41761c:	2800      	cmp	r0, #0
  41761e:	d03c      	beq.n	41769a <.L10>
  417620:	465a      	mov	r2, fp
  417622:	6921      	ldr	r1, [r4, #16]
  417624:	9001      	str	r0, [sp, #4]
  417626:	f7fe fef9 	bl	41641c <memcpy>

0041762a <.LVL8>:
  41762a:	89a2      	ldrh	r2, [r4, #12]
  41762c:	9b01      	ldr	r3, [sp, #4]
  41762e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  417632:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  417636:	81a2      	strh	r2, [r4, #12]

00417638 <.LVL9>:
  417638:	eba5 020b 	sub.w	r2, r5, fp
  41763c:	eb03 000b 	add.w	r0, r3, fp
  417640:	6165      	str	r5, [r4, #20]
  417642:	6123      	str	r3, [r4, #16]
  417644:	6020      	str	r0, [r4, #0]
  417646:	60a2      	str	r2, [r4, #8]
  417648:	4635      	mov	r5, r6

0041764a <.LVL10>:
  41764a:	46b3      	mov	fp, r6

0041764c <.LBE2>:
  41764c:	465a      	mov	r2, fp
  41764e:	4649      	mov	r1, r9
  417650:	f001 f8ae 	bl	4187b0 <.LFE164>

00417654 <.LVL12>:
  417654:	f8d8 3008 	ldr.w	r3, [r8, #8]
  417658:	68a2      	ldr	r2, [r4, #8]
  41765a:	6820      	ldr	r0, [r4, #0]
  41765c:	1b55      	subs	r5, r2, r5

0041765e <.LVL13>:
  41765e:	4458      	add	r0, fp
  417660:	1b9e      	subs	r6, r3, r6

00417662 <.LVL14>:
  417662:	60a5      	str	r5, [r4, #8]
  417664:	6020      	str	r0, [r4, #0]

00417666 <.LVL15>:
  417666:	f8c8 6008 	str.w	r6, [r8, #8]
  41766a:	b33e      	cbz	r6, 4176bc <.LCFI3>

0041766c <.LVL16>:
  41766c:	687e      	ldr	r6, [r7, #4]

0041766e <.LVL17>:
  41766e:	463b      	mov	r3, r7
  417670:	3708      	adds	r7, #8

00417672 <.LVL18>:
  417672:	2e00      	cmp	r6, #0
  417674:	d0fa      	beq.n	41766c <.LVL16>
  417676:	42ae      	cmp	r6, r5
  417678:	f8d3 9000 	ldr.w	r9, [r3]
  41767c:	46ab      	mov	fp, r5
  41767e:	d2b2      	bcs.n	4175e6 <.LVL3>
  417680:	4635      	mov	r5, r6

00417682 <.LVL19>:
  417682:	46b3      	mov	fp, r6
  417684:	e7e2      	b.n	41764c <.LBE2>

00417686 <.LBB3>:
  417686:	4650      	mov	r0, sl
  417688:	f7fb f8b6 	bl	4127f8 <.LFE184>

0041768c <.LVL21>:
  41768c:	4603      	mov	r3, r0
  41768e:	2800      	cmp	r0, #0
  417690:	d1d2      	bne.n	417638 <.LVL9>
  417692:	6921      	ldr	r1, [r4, #16]
  417694:	4650      	mov	r0, sl

00417696 <.LVL22>:
  417696:	f7fd fe7f 	bl	415398 <_free_r>

0041769a <.L10>:
  41769a:	230c      	movs	r3, #12
  41769c:	f8ca 3000 	str.w	r3, [sl]

004176a0 <.LBE3>:
  4176a0:	89a3      	ldrh	r3, [r4, #12]
  4176a2:	2200      	movs	r2, #0
  4176a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4176a8:	f04f 30ff 	mov.w	r0, #4294967295
  4176ac:	81a3      	strh	r3, [r4, #12]
  4176ae:	f8c8 2008 	str.w	r2, [r8, #8]
  4176b2:	f8c8 2004 	str.w	r2, [r8, #4]
  4176b6:	b003      	add	sp, #12

004176b8 <.LCFI2>:
  4176b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004176bc <.LCFI3>:
  4176bc:	2000      	movs	r0, #0
  4176be:	f8c8 0004 	str.w	r0, [r8, #4]
  4176c2:	b003      	add	sp, #12

004176c4 <.LCFI4>:
  4176c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section .text.RsaMGF1%113:

004176c8 <RsaMGF1>:
{
  4176c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

004176cc <.LCFI2>:
  4176cc:	b09b      	sub	sp, #108	; 0x6c

004176ce <.LCFI3>:
  4176ce:	9004      	str	r0, [sp, #16]
  4176d0:	9105      	str	r1, [sp, #20]
  4176d2:	4692      	mov	sl, r2
  4176d4:	9306      	str	r3, [sp, #24]
  4176d6:	9d24      	ldr	r5, [sp, #144]	; 0x90
    hLen    = wc_HashGetDigestSize(hType);
  4176d8:	f005 fb9c 	bl	41ce14 <wc_HashGetDigestSize>

004176dc <.LVL13>:
    if (hLen < 0) {
  4176dc:	1e06      	subs	r6, r0, #0
  4176de:	db66      	blt.n	4177ae <.LBE18>
    if ((seedSz + 4) > sizeof(tmpA) || (word32)hLen > sizeof(tmpA)) {
  4176e0:	f10a 0304 	add.w	r3, sl, #4
  4176e4:	9303      	str	r3, [sp, #12]
  4176e6:	2b44      	cmp	r3, #68	; 0x44
  4176e8:	d801      	bhi.n	4176ee <.LVL13+0x12>
  4176ea:	2e44      	cmp	r6, #68	; 0x44
  4176ec:	d911      	bls.n	417712 <.LBE14>
        tmpSz = ((seedSz + 4) > (word32)hLen)? seedSz + 4: (word32)hLen;
  4176ee:	9b03      	ldr	r3, [sp, #12]
  4176f0:	42b3      	cmp	r3, r6
  4176f2:	bf38      	it	cc
  4176f4:	4633      	movcc	r3, r6
  4176f6:	469b      	mov	fp, r3

004176f8 <.LVL14>:
        tmp = (byte*)XMALLOC(tmpSz, heap, DYNAMIC_TYPE_RSA_BUFFER);
  4176f8:	4618      	mov	r0, r3

004176fa <.LVL15>:
  4176fa:	f006 f8d1 	bl	41d8a0 <.LFE189>

004176fe <.LVL16>:
        if (tmp == NULL) {
  4176fe:	4680      	mov	r8, r0
  417700:	2800      	cmp	r0, #0
  417702:	d059      	beq.n	4177b8 <.LCFI5>
        tmpF = 1; /* make sure to free memory when done */
  417704:	2301      	movs	r3, #1
  417706:	9307      	str	r3, [sp, #28]

00417708 <.LVL17>:
        tmp  = tmpA;
  417708:	2400      	movs	r4, #0
  41770a:	4627      	mov	r7, r4

0041770c <.LBB14>:
        tmp[seedSz + 1] = (counter >> 16) & 0xFF;
  41770c:	eb08 090a 	add.w	r9, r8, sl
  417710:	e014      	b.n	41773c <.LBB17>

00417712 <.LBE14>:
        tmpSz = sizeof(tmpA);
  417712:	f04f 0b44 	mov.w	fp, #68	; 0x44
        tmpF = 0; /* no need to free memory at end */
  417716:	2300      	movs	r3, #0
  417718:	9307      	str	r3, [sp, #28]
        tmp  = tmpA;
  41771a:	f10d 0824 	add.w	r8, sp, #36	; 0x24
  41771e:	e7f3      	b.n	417708 <.LVL17>

00417720 <.LVL19>:
  417720:	4604      	mov	r4, r0

00417722 <.LBB15>:
                XFREE(tmp, heap, DYNAMIC_TYPE_RSA_BUFFER);
  417722:	9b07      	ldr	r3, [sp, #28]
  417724:	2b00      	cmp	r3, #0
  417726:	d043      	beq.n	4177b0 <.LVL36>
  417728:	f1b8 0f00 	cmp.w	r8, #0
  41772c:	d040      	beq.n	4177b0 <.LVL36>
  41772e:	4640      	mov	r0, r8

00417730 <.LVL21>:
  417730:	f006 f8c2 	bl	41d8b8 <.LFE2>

00417734 <.LVL22>:
  417734:	e03c      	b.n	4177b0 <.LVL36>

00417736 <.LBE15>:
        counter++;
  417736:	3701      	adds	r7, #1

00417738 <.LBE16>:
    } while (idx < outSz);
  417738:	42a5      	cmp	r5, r4
  41773a:	d92e      	bls.n	41779a <.LVL31>

0041773c <.LBB17>:
        XMEMCPY(tmp, seed, seedSz);
  41773c:	4652      	mov	r2, sl
  41773e:	9905      	ldr	r1, [sp, #20]
  417740:	4640      	mov	r0, r8
  417742:	f7fe fe6b 	bl	41641c <memcpy>

00417746 <.LVL26>:
        tmp[seedSz]     = (counter >> 24) & 0xFF;
  417746:	0e3b      	lsrs	r3, r7, #24
  417748:	f808 300a 	strb.w	r3, [r8, sl]
        tmp[seedSz + 1] = (counter >> 16) & 0xFF;
  41774c:	0c3b      	lsrs	r3, r7, #16
  41774e:	f889 3001 	strb.w	r3, [r9, #1]
        tmp[seedSz + 2] = (counter >>  8) & 0xFF;
  417752:	0a3b      	lsrs	r3, r7, #8
  417754:	f889 3002 	strb.w	r3, [r9, #2]
        tmp[seedSz + 3] = (counter)       & 0xFF;
  417758:	f889 7003 	strb.w	r7, [r9, #3]
        if ((ret = wc_Hash(hType, tmp, (seedSz + 4), tmp, tmpSz)) != 0) {
  41775c:	f8cd b000 	str.w	fp, [sp]
  417760:	4643      	mov	r3, r8
  417762:	9a03      	ldr	r2, [sp, #12]
  417764:	4641      	mov	r1, r8
  417766:	9804      	ldr	r0, [sp, #16]
  417768:	f002 f9e1 	bl	419b2e <.LFE24>

0041776c <.LVL27>:
  41776c:	4686      	mov	lr, r0
  41776e:	2800      	cmp	r0, #0
  417770:	d1d6      	bne.n	417720 <.LVL19>
        for (i = 0; i < hLen && idx < outSz; i++) {
  417772:	2e00      	cmp	r6, #0
  417774:	dddf      	ble.n	417736 <.LBE15>
  417776:	42ac      	cmp	r4, r5
  417778:	d2dd      	bcs.n	417736 <.LBE15>
  41777a:	f108 31ff 	add.w	r1, r8, #4294967295
  41777e:	9b06      	ldr	r3, [sp, #24]
  417780:	191a      	adds	r2, r3, r4
  417782:	4603      	mov	r3, r0

00417784 <.LVL28>:
            out[idx++] = tmp[i];
  417784:	3401      	adds	r4, #1
  417786:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  41778a:	f802 0b01 	strb.w	r0, [r2], #1
        for (i = 0; i < hLen && idx < outSz; i++) {
  41778e:	3301      	adds	r3, #1
  417790:	429e      	cmp	r6, r3
  417792:	ddd0      	ble.n	417736 <.LBE15>
  417794:	42a5      	cmp	r5, r4
  417796:	d8f5      	bhi.n	417784 <.LVL28>
  417798:	e7cd      	b.n	417736 <.LBE15>

0041779a <.LVL31>:
  41779a:	4674      	mov	r4, lr

0041779c <.LBB18>:
        XFREE(tmp, heap, DYNAMIC_TYPE_RSA_BUFFER);
  41779c:	f1b8 0f00 	cmp.w	r8, #0
  4177a0:	d006      	beq.n	4177b0 <.LVL36>

004177a2 <.LVL33>:
  4177a2:	9b07      	ldr	r3, [sp, #28]
  4177a4:	b123      	cbz	r3, 4177b0 <.LVL36>
  4177a6:	4640      	mov	r0, r8
  4177a8:	f006 f886 	bl	41d8b8 <.LFE2>

004177ac <.LVL34>:
  4177ac:	e000      	b.n	4177b0 <.LVL36>

004177ae <.LBE18>:
        return hLen;
  4177ae:	4634      	mov	r4, r6

004177b0 <.LVL36>:
}
  4177b0:	4620      	mov	r0, r4
  4177b2:	b01b      	add	sp, #108	; 0x6c

004177b4 <.LCFI4>:
  4177b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004177b8 <.LCFI5>:
            return MEMORY_E;
  4177b8:	f06f 037c 	mvn.w	r3, #124	; 0x7c
  4177bc:	461c      	mov	r4, r3
  4177be:	e7f7      	b.n	4177b0 <.LVL36>

Disassembly of section .text.des3_test%114:

004177c0 <des3_test>:
{
  4177c0:	b570      	push	{r4, r5, r6, lr}

004177c2 <.LCFI63>:
  4177c2:	f5ad 7d74 	sub.w	sp, sp, #976	; 0x3d0

004177c6 <.LCFI64>:
    const byte vector[] = { /* "Now is the time for all " w/o trailing 0 */
  4177c6:	4c37      	ldr	r4, [pc, #220]	; (4178a4 <.LCFI65+0x2>)
  4177c8:	adee      	add	r5, sp, #952	; 0x3b8
  4177ca:	f8d4 0830 	ldr.w	r0, [r4, #2096]	; 0x830
  4177ce:	f8d4 1834 	ldr.w	r1, [r4, #2100]	; 0x834
  4177d2:	f8d4 2838 	ldr.w	r2, [r4, #2104]	; 0x838
  4177d6:	f8d4 383c 	ldr.w	r3, [r4, #2108]	; 0x83c
  4177da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  4177dc:	f8d4 0840 	ldr.w	r0, [r4, #2112]	; 0x840
  4177e0:	f8d4 1844 	ldr.w	r1, [r4, #2116]	; 0x844
  4177e4:	c503      	stmia	r5!, {r0, r1}
    const byte key3[] =
  4177e6:	ad0c      	add	r5, sp, #48	; 0x30
  4177e8:	f8d4 0848 	ldr.w	r0, [r4, #2120]	; 0x848
  4177ec:	f8d4 184c 	ldr.w	r1, [r4, #2124]	; 0x84c
  4177f0:	f8d4 2850 	ldr.w	r2, [r4, #2128]	; 0x850
  4177f4:	f8d4 3854 	ldr.w	r3, [r4, #2132]	; 0x854
  4177f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  4177fa:	f8d4 0858 	ldr.w	r0, [r4, #2136]	; 0x858
  4177fe:	f8d4 185c 	ldr.w	r1, [r4, #2140]	; 0x85c
  417802:	c503      	stmia	r5!, {r0, r1}
    const byte iv3[] =
  417804:	ad06      	add	r5, sp, #24
  417806:	f8d4 0860 	ldr.w	r0, [r4, #2144]	; 0x860
  41780a:	f8d4 1864 	ldr.w	r1, [r4, #2148]	; 0x864
  41780e:	f8d4 2868 	ldr.w	r2, [r4, #2152]	; 0x868
  417812:	f8d4 386c 	ldr.w	r3, [r4, #2156]	; 0x86c
  417816:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  417818:	f8d4 0870 	ldr.w	r0, [r4, #2160]	; 0x870
  41781c:	f8d4 1874 	ldr.w	r1, [r4, #2164]	; 0x874
  417820:	c503      	stmia	r5!, {r0, r1}
    const byte verify3[] =
  417822:	466d      	mov	r5, sp
  417824:	f8d4 0878 	ldr.w	r0, [r4, #2168]	; 0x878
  417828:	f8d4 187c 	ldr.w	r1, [r4, #2172]	; 0x87c
  41782c:	f8d4 2880 	ldr.w	r2, [r4, #2176]	; 0x880
  417830:	f8d4 3884 	ldr.w	r3, [r4, #2180]	; 0x884
  417834:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  417836:	f8d4 0888 	ldr.w	r0, [r4, #2184]	; 0x888
  41783a:	f8d4 188c 	ldr.w	r1, [r4, #2188]	; 0x88c
  41783e:	c503      	stmia	r5!, {r0, r1}
    appData.des3_test_result = numSubTests;
  417840:	2202      	movs	r2, #2
  417842:	4b19      	ldr	r3, [pc, #100]	; (4178a8 <.LCFI65+0x6>)
  417844:	631a      	str	r2, [r3, #48]	; 0x30
    CRYPT_TDES_KeySet(&enc, key3, iv3, DES_ENCRYPTION);
  417846:	2300      	movs	r3, #0
  417848:	aa06      	add	r2, sp, #24
  41784a:	a90c      	add	r1, sp, #48	; 0x30
  41784c:	a87a      	add	r0, sp, #488	; 0x1e8
  41784e:	f006 f81b 	bl	41d888 <.LFE180>

00417852 <.LVL146>:
    CRYPT_TDES_KeySet(&dec, key3, iv3, DES_DECRYPTION);
  417852:	2301      	movs	r3, #1
  417854:	aa06      	add	r2, sp, #24
  417856:	a90c      	add	r1, sp, #48	; 0x30
  417858:	a812      	add	r0, sp, #72	; 0x48
  41785a:	f006 f815 	bl	41d888 <.LFE180>

0041785e <.LVL147>:
    CRYPT_TDES_CBC_Encrypt(&enc, cipher, vector, sizeof(vector));
  41785e:	2318      	movs	r3, #24
  417860:	aaee      	add	r2, sp, #952	; 0x3b8
  417862:	a9e2      	add	r1, sp, #904	; 0x388
  417864:	a87a      	add	r0, sp, #488	; 0x1e8
  417866:	f005 fe8a 	bl	41d57e <.LFE188>

0041786a <.LVL148>:
    CRYPT_TDES_CBC_Decrypt(&dec, plain, verify3, sizeof(verify3));
  41786a:	2318      	movs	r3, #24
  41786c:	466a      	mov	r2, sp
  41786e:	a9e8      	add	r1, sp, #928	; 0x3a0
  417870:	a812      	add	r0, sp, #72	; 0x48
  417872:	f005 fe93 	bl	41d59c <.LFE191>

00417876 <.LVL149>:
    if (!(memcmp(plain, vector, sizeof(plain))))
  417876:	2218      	movs	r2, #24
  417878:	a9ee      	add	r1, sp, #952	; 0x3b8
  41787a:	a8e8      	add	r0, sp, #928	; 0x3a0
  41787c:	f004 fa44 	bl	41bd08 <memcmp>

00417880 <.LVL150>:
  417880:	b918      	cbnz	r0, 41788a <.LVL150+0xa>
        appData.des3_test_result--;
  417882:	4a09      	ldr	r2, [pc, #36]	; (4178a8 <.LCFI65+0x6>)
  417884:	6b13      	ldr	r3, [r2, #48]	; 0x30
  417886:	3b01      	subs	r3, #1
  417888:	6313      	str	r3, [r2, #48]	; 0x30
    if (!(memcmp(cipher, verify3, sizeof(cipher))))
  41788a:	2218      	movs	r2, #24
  41788c:	4669      	mov	r1, sp
  41788e:	a8e2      	add	r0, sp, #904	; 0x388
  417890:	f004 fa3a 	bl	41bd08 <memcmp>

00417894 <.LVL151>:
  417894:	b918      	cbnz	r0, 41789e <.LVL151+0xa>
        appData.des3_test_result--;
  417896:	4a04      	ldr	r2, [pc, #16]	; (4178a8 <.LCFI65+0x6>)
  417898:	6b13      	ldr	r3, [r2, #48]	; 0x30
  41789a:	3b01      	subs	r3, #1
  41789c:	6313      	str	r3, [r2, #48]	; 0x30
}
  41789e:	f50d 7d74 	add.w	sp, sp, #976	; 0x3d0

004178a2 <.LCFI65>:
  4178a2:	bd70      	pop	{r4, r5, r6, pc}
  4178a4:	0040ab9c 	.word	0x0040ab9c
  4178a8:	2040d534 	.word	0x2040d534

Disassembly of section .text.wc_Sha512Update%115:

004178ac <wc_Sha512Update>:
{
  4178ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

004178b0 <.LCFI6>:
    if (sha512 == NULL || (data == NULL && len > 0)) {
  4178b0:	2800      	cmp	r0, #0
  4178b2:	d065      	beq.n	417980 <.LVL43>
  4178b4:	4689      	mov	r9, r1
  4178b6:	4615      	mov	r5, r2
  4178b8:	4680      	mov	r8, r0
  4178ba:	b909      	cbnz	r1, 4178c0 <.LBB700>
  4178bc:	2a00      	cmp	r2, #0
  4178be:	d162      	bne.n	417986 <.LVL43+0x6>

004178c0 <.LBB700>:
    byte* local = (byte*)sha512->buffer;
  4178c0:	f108 0b58 	add.w	fp, r8, #88	; 0x58

004178c4 <.LVL25>:
    if (sha512->buffLen >= SHA512_BLOCK_SIZE)
  4178c4:	f8d8 3000 	ldr.w	r3, [r8]
  4178c8:	2b7f      	cmp	r3, #127	; 0x7f
  4178ca:	d85f      	bhi.n	41798c <.LBB719>
    while (len) {
  4178cc:	2d00      	cmp	r5, #0
  4178ce:	d060      	beq.n	417992 <.LBB719+0x6>
  4178d0:	f108 0ad0 	add.w	sl, r8, #208	; 0xd0
  4178d4:	e004      	b.n	4178e0 <.LBB717>

004178d6 <.LBB702>:
            sha512->buffLen = 0;
  4178d6:	2300      	movs	r3, #0
  4178d8:	f8c8 3000 	str.w	r3, [r8]

004178dc <.LBE702>:
    while (len) {
  4178dc:	2d00      	cmp	r5, #0
  4178de:	d04b      	beq.n	417978 <.LBE715>

004178e0 <.LBB717>:
        word32 add = min(len, SHA512_BLOCK_SIZE - sha512->buffLen);
  4178e0:	f8d8 0000 	ldr.w	r0, [r8]

004178e4 <.LVL28>:
  4178e4:	f1c0 0480 	rsb	r4, r0, #128	; 0x80

004178e8 <.LBB703>:
    #if defined(HAVE_FIPS) && !defined(min) /* so ifdef check passes */
        #define min min
    #endif
    STATIC INLINE word32 min(word32 a, word32 b)
    {
        return a > b ? b : a;
  4178e8:	42ac      	cmp	r4, r5
  4178ea:	bf28      	it	cs
  4178ec:	462c      	movcs	r4, r5

004178ee <.LBE703>:
        XMEMCPY(&local[sha512->buffLen], data, add);
  4178ee:	4622      	mov	r2, r4
  4178f0:	4649      	mov	r1, r9
  4178f2:	4458      	add	r0, fp
  4178f4:	f7fe fd92 	bl	41641c <memcpy>

004178f8 <.LVL31>:
        sha512->buffLen += add;
  4178f8:	f8d8 3000 	ldr.w	r3, [r8]
  4178fc:	4423      	add	r3, r4
  4178fe:	f8c8 3000 	str.w	r3, [r8]
        data            += add;
  417902:	44a1      	add	r9, r4
        len             -= add;
  417904:	1b2d      	subs	r5, r5, r4
        if (sha512->buffLen == SHA512_BLOCK_SIZE) {
  417906:	2b80      	cmp	r3, #128	; 0x80
  417908:	d1e8      	bne.n	4178dc <.LBE702>
  41790a:	f108 0250 	add.w	r2, r8, #80	; 0x50

0041790e <.LBB705>:
        out[i] = ByteReverseWord64(in[i]);
  41790e:	6893      	ldr	r3, [r2, #8]
  417910:	68d1      	ldr	r1, [r2, #12]

00417912 <.LBB707>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  417912:	0a18      	lsrs	r0, r3, #8
  417914:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  417918:	021b      	lsls	r3, r3, #8
  41791a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  41791e:	4303      	orrs	r3, r0

00417920 <.LBE709>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  417920:	ea4f 4733 	mov.w	r7, r3, ror #16
  417924:	2600      	movs	r6, #0

00417926 <.LBB711>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  417926:	0a0b      	lsrs	r3, r1, #8
  417928:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  41792c:	0209      	lsls	r1, r1, #8
  41792e:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  417932:	430b      	orrs	r3, r1

00417934 <.LBB713>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  417934:	ea4f 4333 	mov.w	r3, r3, ror #16

00417938 <.LBE711>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  417938:	ea46 0003 	orr.w	r0, r6, r3
  41793c:	4639      	mov	r1, r7

0041793e <.LBE707>:
        out[i] = ByteReverseWord64(in[i]);
  41793e:	e9e2 0102 	strd	r0, r1, [r2, #8]!
    for (i = 0; i < count; i++)
  417942:	4592      	cmp	sl, r2
  417944:	d1e3      	bne.n	41790e <.LBB705>

00417946 <.LBE705>:
            ret = Transform(sha512);
  417946:	4640      	mov	r0, r8
  417948:	f7e8 fc24 	bl	400194 <_etext>

0041794c <.LVL35>:
            if (ret != 0)
  41794c:	4603      	mov	r3, r0
  41794e:	b9a0      	cbnz	r0, 41797a <.LBE700>

00417950 <.LBB715>:
    word64 tmp = sha512->loLen;
  417950:	e9d8 2302 	ldrd	r2, r3, [r8, #8]

00417954 <.LVL37>:
    if ( (sha512->loLen += len) < tmp)
  417954:	f112 0080 	adds.w	r0, r2, #128	; 0x80

00417958 <.LVL38>:
  417958:	f143 0100 	adc.w	r1, r3, #0
  41795c:	e9c8 0102 	strd	r0, r1, [r8, #8]
  417960:	4299      	cmp	r1, r3
  417962:	bf08      	it	eq
  417964:	4290      	cmpeq	r0, r2
  417966:	d2b6      	bcs.n	4178d6 <.LBB702>
        sha512->hiLen++;                       /* carry low to high */
  417968:	e9d8 2304 	ldrd	r2, r3, [r8, #16]

0041796c <.LVL39>:
  41796c:	3201      	adds	r2, #1
  41796e:	f143 0300 	adc.w	r3, r3, #0

00417972 <.LVL40>:
  417972:	e9c8 2304 	strd	r2, r3, [r8, #16]
  417976:	e7ae      	b.n	4178d6 <.LBB702>

00417978 <.LBE715>:
    while (len) {
  417978:	2300      	movs	r3, #0

0041797a <.LBE700>:
}
  41797a:	4618      	mov	r0, r3
  41797c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00417980 <.LVL43>:
        return BAD_FUNC_ARG;
  417980:	f06f 03ac 	mvn.w	r3, #172	; 0xac
  417984:	e7f9      	b.n	41797a <.LBE700>
  417986:	f06f 03ac 	mvn.w	r3, #172	; 0xac
  41798a:	e7f6      	b.n	41797a <.LBE700>

0041798c <.LBB719>:
        return BUFFER_E;
  41798c:	f06f 0383 	mvn.w	r3, #131	; 0x83
  417990:	e7f3      	b.n	41797a <.LBE700>
    while (len) {
  417992:	2300      	movs	r3, #0
  417994:	e7f1      	b.n	41797a <.LBE700>

Disassembly of section .text.wc_Sha384Update%116:

00417996 <wc_Sha384Update>:
{
  417996:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

0041799a <.LCFI13>:
    if (sha384 == NULL || (data == NULL && len > 0)) {
  41799a:	2800      	cmp	r0, #0
  41799c:	d065      	beq.n	417a6a <.LVL102>
  41799e:	4689      	mov	r9, r1
  4179a0:	4615      	mov	r5, r2
  4179a2:	4680      	mov	r8, r0
  4179a4:	b909      	cbnz	r1, 4179aa <.LBB821>
  4179a6:	2a00      	cmp	r2, #0
  4179a8:	d162      	bne.n	417a70 <.LVL102+0x6>

004179aa <.LBB821>:
    byte* local = (byte*)sha512->buffer;
  4179aa:	f108 0b58 	add.w	fp, r8, #88	; 0x58

004179ae <.LVL84>:
    if (sha512->buffLen >= SHA512_BLOCK_SIZE)
  4179ae:	f8d8 3000 	ldr.w	r3, [r8]
  4179b2:	2b7f      	cmp	r3, #127	; 0x7f
  4179b4:	d85f      	bhi.n	417a76 <.LBB840>
    while (len) {
  4179b6:	2d00      	cmp	r5, #0
  4179b8:	d060      	beq.n	417a7c <.LBB840+0x6>
  4179ba:	f108 0ad0 	add.w	sl, r8, #208	; 0xd0
  4179be:	e004      	b.n	4179ca <.LBB838>

004179c0 <.LBB823>:
            sha512->buffLen = 0;
  4179c0:	2300      	movs	r3, #0
  4179c2:	f8c8 3000 	str.w	r3, [r8]

004179c6 <.LBE823>:
    while (len) {
  4179c6:	2d00      	cmp	r5, #0
  4179c8:	d04b      	beq.n	417a62 <.LBE836>

004179ca <.LBB838>:
        word32 add = min(len, SHA512_BLOCK_SIZE - sha512->buffLen);
  4179ca:	f8d8 0000 	ldr.w	r0, [r8]

004179ce <.LVL87>:
  4179ce:	f1c0 0480 	rsb	r4, r0, #128	; 0x80

004179d2 <.LBB824>:
        return a > b ? b : a;
  4179d2:	42ac      	cmp	r4, r5
  4179d4:	bf28      	it	cs
  4179d6:	462c      	movcs	r4, r5

004179d8 <.LBE824>:
        XMEMCPY(&local[sha512->buffLen], data, add);
  4179d8:	4622      	mov	r2, r4
  4179da:	4649      	mov	r1, r9
  4179dc:	4458      	add	r0, fp
  4179de:	f7fe fd1d 	bl	41641c <memcpy>

004179e2 <.LVL90>:
        sha512->buffLen += add;
  4179e2:	f8d8 3000 	ldr.w	r3, [r8]
  4179e6:	4423      	add	r3, r4
  4179e8:	f8c8 3000 	str.w	r3, [r8]
        data            += add;
  4179ec:	44a1      	add	r9, r4
        len             -= add;
  4179ee:	1b2d      	subs	r5, r5, r4
        if (sha512->buffLen == SHA512_BLOCK_SIZE) {
  4179f0:	2b80      	cmp	r3, #128	; 0x80
  4179f2:	d1e8      	bne.n	4179c6 <.LBE823>
  4179f4:	f108 0250 	add.w	r2, r8, #80	; 0x50

004179f8 <.LBB826>:
        out[i] = ByteReverseWord64(in[i]);
  4179f8:	6893      	ldr	r3, [r2, #8]
  4179fa:	68d1      	ldr	r1, [r2, #12]

004179fc <.LBB828>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  4179fc:	0a18      	lsrs	r0, r3, #8
  4179fe:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  417a02:	021b      	lsls	r3, r3, #8
  417a04:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  417a08:	4303      	orrs	r3, r0

00417a0a <.LBE830>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  417a0a:	ea4f 4733 	mov.w	r7, r3, ror #16
  417a0e:	2600      	movs	r6, #0

00417a10 <.LBB832>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  417a10:	0a0b      	lsrs	r3, r1, #8
  417a12:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  417a16:	0209      	lsls	r1, r1, #8
  417a18:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  417a1c:	430b      	orrs	r3, r1

00417a1e <.LBB834>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  417a1e:	ea4f 4333 	mov.w	r3, r3, ror #16

00417a22 <.LBE832>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  417a22:	ea46 0003 	orr.w	r0, r6, r3
  417a26:	4639      	mov	r1, r7

00417a28 <.LBE828>:
        out[i] = ByteReverseWord64(in[i]);
  417a28:	e9e2 0102 	strd	r0, r1, [r2, #8]!
    for (i = 0; i < count; i++)
  417a2c:	4592      	cmp	sl, r2
  417a2e:	d1e3      	bne.n	4179f8 <.LBB826>

00417a30 <.LBE826>:
            ret = Transform(sha512);
  417a30:	4640      	mov	r0, r8
  417a32:	f7e8 fbaf 	bl	400194 <_etext>

00417a36 <.LVL94>:
            if (ret != 0)
  417a36:	4603      	mov	r3, r0
  417a38:	b9a0      	cbnz	r0, 417a64 <.LBE821>

00417a3a <.LBB836>:
    word64 tmp = sha512->loLen;
  417a3a:	e9d8 2302 	ldrd	r2, r3, [r8, #8]

00417a3e <.LVL96>:
    if ( (sha512->loLen += len) < tmp)
  417a3e:	f112 0080 	adds.w	r0, r2, #128	; 0x80

00417a42 <.LVL97>:
  417a42:	f143 0100 	adc.w	r1, r3, #0
  417a46:	e9c8 0102 	strd	r0, r1, [r8, #8]
  417a4a:	4299      	cmp	r1, r3
  417a4c:	bf08      	it	eq
  417a4e:	4290      	cmpeq	r0, r2
  417a50:	d2b6      	bcs.n	4179c0 <.LBB823>
        sha512->hiLen++;                       /* carry low to high */
  417a52:	e9d8 2304 	ldrd	r2, r3, [r8, #16]

00417a56 <.LVL98>:
  417a56:	3201      	adds	r2, #1
  417a58:	f143 0300 	adc.w	r3, r3, #0

00417a5c <.LVL99>:
  417a5c:	e9c8 2304 	strd	r2, r3, [r8, #16]
  417a60:	e7ae      	b.n	4179c0 <.LBB823>

00417a62 <.LBE836>:
    while (len) {
  417a62:	2300      	movs	r3, #0

00417a64 <.LBE821>:
}
  417a64:	4618      	mov	r0, r3
  417a66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00417a6a <.LVL102>:
        return BAD_FUNC_ARG;
  417a6a:	f06f 03ac 	mvn.w	r3, #172	; 0xac
  417a6e:	e7f9      	b.n	417a64 <.LBE821>
  417a70:	f06f 03ac 	mvn.w	r3, #172	; 0xac
  417a74:	e7f6      	b.n	417a64 <.LBE821>

00417a76 <.LBB840>:
        return BUFFER_E;
  417a76:	f06f 0383 	mvn.w	r3, #131	; 0x83
  417a7a:	e7f3      	b.n	417a64 <.LBE821>
    while (len) {
  417a7c:	2300      	movs	r3, #0
  417a7e:	e7f1      	b.n	417a64 <.LBE821>

Disassembly of section .text.s_fp_sub%117:

00417a80 <s_fp_sub>:
{
  417a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00417a84 <.LCFI1>:
  417a84:	b085      	sub	sp, #20

00417a86 <.LCFI2>:
  417a86:	9201      	str	r2, [sp, #4]
  oldused  = c->used;
  417a88:	6813      	ldr	r3, [r2, #0]
  417a8a:	9302      	str	r3, [sp, #8]

00417a8c <.LVL20>:
  oldbused = b->used;
  417a8c:	f8d1 c000 	ldr.w	ip, [r1]
  c->used  = a->used;
  417a90:	6803      	ldr	r3, [r0, #0]

00417a92 <.LVL22>:
  417a92:	461c      	mov	r4, r3
  417a94:	9303      	str	r3, [sp, #12]
  417a96:	6014      	str	r4, [r2, #0]

00417a98 <.LVL23>:
  for (x = 0; x < oldbused; x++) {
  417a98:	f1bc 0f00 	cmp.w	ip, #0
  417a9c:	dd4a      	ble.n	417b34 <.LVL41>
  417a9e:	f100 0e04 	add.w	lr, r0, #4
  417aa2:	1d0e      	adds	r6, r1, #4
  417aa4:	1d17      	adds	r7, r2, #4
  417aa6:	2200      	movs	r2, #0

00417aa8 <.LVL24>:
  417aa8:	2300      	movs	r3, #0
  417aaa:	2100      	movs	r1, #0

00417aac <.LVL25>:
     t         = ((fp_word)a->dp[x]) - (((fp_word)b->dp[x]) + t);
  417aac:	f85e 4f04 	ldr.w	r4, [lr, #4]!
  417ab0:	2500      	movs	r5, #0
  417ab2:	1aa2      	subs	r2, r4, r2

00417ab4 <.LVL26>:
  417ab4:	eb65 0303 	sbc.w	r3, r5, r3
  417ab8:	f856 4f04 	ldr.w	r4, [r6, #4]!
  417abc:	1b12      	subs	r2, r2, r4
  417abe:	f163 0300 	sbc.w	r3, r3, #0

00417ac2 <.LVL27>:
     c->dp[x]  = (fp_digit)t;
  417ac2:	f847 2f04 	str.w	r2, [r7, #4]!
     t         = (t >> DIGIT_BIT)&1;
  417ac6:	f003 0201 	and.w	r2, r3, #1

00417aca <.LVL28>:
  417aca:	2300      	movs	r3, #0

00417acc <.LVL29>:
  for (x = 0; x < oldbused; x++) {
  417acc:	3101      	adds	r1, #1
  417ace:	458c      	cmp	ip, r1
  417ad0:	d1ec      	bne.n	417aac <.LVL25>
  for (; x < a->used; x++) {
  417ad2:	6804      	ldr	r4, [r0, #0]
  417ad4:	42a1      	cmp	r1, r4
  417ad6:	da13      	bge.n	417b00 <.LVL35+0x8>
  417ad8:	008e      	lsls	r6, r1, #2
  417ada:	3604      	adds	r6, #4
  417adc:	1987      	adds	r7, r0, r6
  417ade:	9c01      	ldr	r4, [sp, #4]
  417ae0:	4426      	add	r6, r4
     t         = ((fp_word)a->dp[x]) - t;
  417ae2:	f857 4f04 	ldr.w	r4, [r7, #4]!
  417ae6:	2500      	movs	r5, #0
  417ae8:	1aa2      	subs	r2, r4, r2

00417aea <.LVL32>:
  417aea:	eb65 0303 	sbc.w	r3, r5, r3

00417aee <.LVL33>:
     c->dp[x]  = (fp_digit)t;
  417aee:	f846 2f04 	str.w	r2, [r6, #4]!
     t         = (t >> DIGIT_BIT)&1;
  417af2:	f003 0201 	and.w	r2, r3, #1

00417af6 <.LVL34>:
  417af6:	2300      	movs	r3, #0

00417af8 <.LVL35>:
  for (; x < a->used; x++) {
  417af8:	3101      	adds	r1, #1
  417afa:	6804      	ldr	r4, [r0, #0]
  417afc:	428c      	cmp	r4, r1
  417afe:	dcf0      	bgt.n	417ae2 <.LVL29+0x16>
  for (; x < oldused; x++) {
  417b00:	9802      	ldr	r0, [sp, #8]

00417b02 <.LVL37>:
  417b02:	4288      	cmp	r0, r1
  417b04:	dd09      	ble.n	417b1a <.LVL38+0xa>
  417b06:	9b01      	ldr	r3, [sp, #4]
  417b08:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  417b0c:	3304      	adds	r3, #4
     c->dp[x] = 0;
  417b0e:	2200      	movs	r2, #0

00417b10 <.LVL38>:
  417b10:	f843 2f04 	str.w	r2, [r3, #4]!
  for (; x < oldused; x++) {
  417b14:	3101      	adds	r1, #1
  417b16:	4288      	cmp	r0, r1
  417b18:	d1fa      	bne.n	417b10 <.LVL38>
  fp_clamp(c);
  417b1a:	9903      	ldr	r1, [sp, #12]

00417b1c <.LVL40>:
  417b1c:	b301      	cbz	r1, 417b60 <.LCFI4+0x4>
  417b1e:	460a      	mov	r2, r1
  417b20:	1e4b      	subs	r3, r1, #1
  417b22:	3201      	adds	r2, #1
  417b24:	9c01      	ldr	r4, [sp, #4]
  417b26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  417b2a:	b982      	cbnz	r2, 417b4e <.LVL44+0x12>
  417b2c:	eb04 0281 	add.w	r2, r4, r1, lsl #2
  417b30:	3204      	adds	r2, #4
  417b32:	e004      	b.n	417b3e <.LVL44+0x2>

00417b34 <.LVL41>:
  t       = 0;
  417b34:	2200      	movs	r2, #0

00417b36 <.LVL42>:
  417b36:	2300      	movs	r3, #0
  for (x = 0; x < oldbused; x++) {
  417b38:	2100      	movs	r1, #0

00417b3a <.LVL43>:
  417b3a:	e7ca      	b.n	417ad2 <.LVL29+0x6>

00417b3c <.LVL44>:
  fp_clamp(c);
  417b3c:	4603      	mov	r3, r0
  417b3e:	b16b      	cbz	r3, 417b5c <.LCFI4>
  417b40:	1e58      	subs	r0, r3, #1
  417b42:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  417b46:	2900      	cmp	r1, #0
  417b48:	d0f8      	beq.n	417b3c <.LVL44>
  417b4a:	9a01      	ldr	r2, [sp, #4]
  417b4c:	6013      	str	r3, [r2, #0]
  417b4e:	9b01      	ldr	r3, [sp, #4]
  417b50:	685b      	ldr	r3, [r3, #4]
  417b52:	9a01      	ldr	r2, [sp, #4]
  417b54:	6053      	str	r3, [r2, #4]
}
  417b56:	b005      	add	sp, #20

00417b58 <.LCFI3>:
  417b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00417b5c <.LCFI4>:
  417b5c:	9a01      	ldr	r2, [sp, #4]
  417b5e:	6013      	str	r3, [r2, #0]
  fp_clamp(c);
  417b60:	2300      	movs	r3, #0
  417b62:	e7f6      	b.n	417b52 <.LVL44+0x16>

Disassembly of section .text.wc_ecc_import_x963_ex%118:

00417b64 <wc_ecc_import_x963_ex>:

#ifdef HAVE_ECC_KEY_IMPORT
/* import public ECC key in ANSI X9.63 format */
int wc_ecc_import_x963_ex(const byte* in, word32 inLen, ecc_key* key,
                          int curve_id)
{
  417b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00417b68 <.LCFI118>:
  417b68:	b083      	sub	sp, #12

00417b6a <.LCFI119>:
    int err = MP_OKAY;
#ifndef WOLFSSL_ATECC508A
    int compressed = 0;
#endif /* !WOLFSSL_ATECC508A */

    if (in == NULL || key == NULL)
  417b6a:	2800      	cmp	r0, #0
  417b6c:	d03b      	beq.n	417be6 <.LVL1419>
  417b6e:	4606      	mov	r6, r0
  417b70:	b3ca      	cbz	r2, 417be6 <.LVL1419>
        return BAD_FUNC_ARG;

    /* must be odd */
    if ((inLen & 1) == 0) {
  417b72:	f011 0f01 	tst.w	r1, #1
  417b76:	d039      	beq.n	417bec <.LVL1419+0x6>
  417b78:	461f      	mov	r7, r3
  417b7a:	4614      	mov	r4, r2
  417b7c:	460d      	mov	r5, r1

00417b7e <.LBB114>:
    key->state = ECC_STATE_NONE;
  417b7e:	2300      	movs	r3, #0

00417b80 <.LVL1401>:
  417b80:	6093      	str	r3, [r2, #8]

00417b82 <.LBE114>:
        alt_fp_init(key->pubkey.x);
        alt_fp_init(key->pubkey.y);
        alt_fp_init(key->pubkey.z);
        err = mp_init(&key->k);
    #else
        err = mp_init_multi(&key->k,
  417b82:	f502 6bd2 	add.w	fp, r2, #1680	; 0x690
                    key->pubkey.x, key->pubkey.y, key->pubkey.z, NULL, NULL);
  417b86:	f102 0818 	add.w	r8, r2, #24
  417b8a:	f502 7910 	add.w	r9, r2, #576	; 0x240
  417b8e:	f502 6a8d 	add.w	sl, r2, #1128	; 0x468
        err = mp_init_multi(&key->k,
  417b92:	9301      	str	r3, [sp, #4]
  417b94:	9300      	str	r3, [sp, #0]
  417b96:	4653      	mov	r3, sl
  417b98:	464a      	mov	r2, r9

00417b9a <.LVL1403>:
  417b9a:	4641      	mov	r1, r8

00417b9c <.LVL1404>:
  417b9c:	4658      	mov	r0, fp

00417b9e <.LVL1405>:
  417b9e:	f004 ff49 	bl	41ca34 <mp_init_multi>

00417ba2 <.LVL1406>:
    #endif
    if (err != MP_OKAY)
  417ba2:	bb30      	cbnz	r0, 417bf2 <.LVL1420>
        return MEMORY_E;

    /* check for 4, 2, or 3 */
    if (in[0] != 0x04 && in[0] != 0x02 && in[0] != 0x03) {
  417ba4:	7833      	ldrb	r3, [r6, #0]
  417ba6:	3b02      	subs	r3, #2
  417ba8:	b2db      	uxtb	r3, r3
  417baa:	2b02      	cmp	r3, #2
  417bac:	d924      	bls.n	417bf8 <.LVL1422>

00417bae <.LVL1407>:
        err = ASN_PARSE_E;
    }

    if (in[0] == 0x02 || in[0] == 0x03) {
  417bae:	2b01      	cmp	r3, #1
  417bb0:	d906      	bls.n	417bc0 <.LCFI121>
        err = ASN_PARSE_E;
  417bb2:	f06f 048b 	mvn.w	r4, #139	; 0x8b

00417bb6 <.LVL1408>:
#ifdef WOLFSSL_VALIDATE_ECC_IMPORT
    if (err == MP_OKAY)
        err = wc_ecc_check_key(key);
#endif

    if (err != MP_OKAY) {
  417bb6:	b94c      	cbnz	r4, 417bcc <.LVL1414>

00417bb8 <.LVL1409>:
        mp_clear(&key->k);
    }
#endif /* WOLFSSL_ATECC508A */

    return err;
}
  417bb8:	4620      	mov	r0, r4
  417bba:	b003      	add	sp, #12

00417bbc <.LCFI120>:
  417bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00417bc0 <.LCFI121>:
  417bc0:	f06f 04ad 	mvn.w	r4, #173	; 0xad

00417bc4 <.LVL1411>:
  417bc4:	e036      	b.n	417c34 <.LVL1433>

00417bc6 <.LVL1412>:
    if (in[0] == 0x02 || in[0] == 0x03) {
  417bc6:	f06f 04ad 	mvn.w	r4, #173	; 0xad

00417bca <.LVL1413>:
  417bca:	e033      	b.n	417c34 <.LVL1433>

00417bcc <.LVL1414>:
        mp_clear(key->pubkey.x);
  417bcc:	4640      	mov	r0, r8
  417bce:	f006 f806 	bl	41dbde <.LFE179>

00417bd2 <.LVL1415>:
        mp_clear(key->pubkey.y);
  417bd2:	4648      	mov	r0, r9
  417bd4:	f006 f803 	bl	41dbde <.LFE179>

00417bd8 <.LVL1416>:
        mp_clear(key->pubkey.z);
  417bd8:	4650      	mov	r0, sl
  417bda:	f006 f800 	bl	41dbde <.LFE179>

00417bde <.LVL1417>:
        mp_clear(&key->k);
  417bde:	4658      	mov	r0, fp
  417be0:	f005 fffd 	bl	41dbde <.LFE179>

00417be4 <.LVL1418>:
  417be4:	e7e8      	b.n	417bb8 <.LVL1409>

00417be6 <.LVL1419>:
        return BAD_FUNC_ARG;
  417be6:	f06f 04ac 	mvn.w	r4, #172	; 0xac
  417bea:	e7e5      	b.n	417bb8 <.LVL1409>
        return ECC_BAD_ARG_E;
  417bec:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
  417bf0:	e7e2      	b.n	417bb8 <.LVL1409>

00417bf2 <.LVL1420>:
        return MEMORY_E;
  417bf2:	f06f 047c 	mvn.w	r4, #124	; 0x7c

00417bf6 <.LVL1421>:
  417bf6:	e7df      	b.n	417bb8 <.LVL1409>

00417bf8 <.LVL1422>:
    if (in[0] == 0x02 || in[0] == 0x03) {
  417bf8:	2b01      	cmp	r3, #1
  417bfa:	d9e4      	bls.n	417bc6 <.LVL1412>

00417bfc <.LBB116>:
        keysize = ((inLen-1)>>1);
  417bfc:	1e69      	subs	r1, r5, #1
        err = wc_ecc_set_curve(key, keysize, curve_id);
  417bfe:	463a      	mov	r2, r7
  417c00:	0849      	lsrs	r1, r1, #1

00417c02 <.LVL1424>:
  417c02:	4620      	mov	r0, r4
  417c04:	f003 fc4e 	bl	41b4a4 <.LFE182>

00417c08 <.LVL1425>:
        key->type = ECC_PUBLICKEY;
  417c08:	2301      	movs	r3, #1
  417c0a:	6023      	str	r3, [r4, #0]

00417c0c <.LBE116>:
    if (err == MP_OKAY)
  417c0c:	4604      	mov	r4, r0

00417c0e <.LVL1426>:
  417c0e:	2800      	cmp	r0, #0
  417c10:	d1dc      	bne.n	417bcc <.LVL1414>
        err = mp_read_unsigned_bin(key->pubkey.x, (byte*)in+1, (inLen-1)>>1);
  417c12:	1e6a      	subs	r2, r5, #1
  417c14:	40da      	lsrs	r2, r3

00417c16 <.LVL1427>:
  417c16:	18f1      	adds	r1, r6, r3
  417c18:	4640      	mov	r0, r8

00417c1a <.LVL1428>:
  417c1a:	f006 f837 	bl	41dc8c <.LFE72>

00417c1e <.LVL1429>:
    if (err == MP_OKAY && compressed == 0)
  417c1e:	4604      	mov	r4, r0
  417c20:	2800      	cmp	r0, #0
  417c22:	d1d3      	bne.n	417bcc <.LVL1414>
        err = mp_read_unsigned_bin(key->pubkey.y, (byte*)in+1+((inLen-1)>>1),
  417c24:	1e6a      	subs	r2, r5, #1
  417c26:	0852      	lsrs	r2, r2, #1

00417c28 <.LVL1430>:
  417c28:	1c51      	adds	r1, r2, #1
  417c2a:	4431      	add	r1, r6
  417c2c:	4648      	mov	r0, r9

00417c2e <.LVL1431>:
  417c2e:	f006 f82d 	bl	41dc8c <.LFE72>

00417c32 <.LVL1432>:
  417c32:	4604      	mov	r4, r0

00417c34 <.LVL1433>:
    if (err == MP_OKAY)
  417c34:	2c00      	cmp	r4, #0
  417c36:	d1c9      	bne.n	417bcc <.LVL1414>
        err = mp_set(key->pubkey.z, 1);
  417c38:	2101      	movs	r1, #1
  417c3a:	4650      	mov	r0, sl
  417c3c:	f006 f853 	bl	41dce6 <.LFE113>

00417c40 <.LVL1434>:
  417c40:	4604      	mov	r4, r0

00417c42 <.LVL1435>:
  417c42:	e7b8      	b.n	417bb6 <.LVL1408>

Disassembly of section .text.wc_ecc_shared_secret_gen%119:

00417c44 <wc_ecc_shared_secret_gen>:
{
  417c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

00417c48 <.LCFI57>:
  417c48:	f5ad 6d92 	sub.w	sp, sp, #1168	; 0x490

00417c4c <.LCFI58>:
  417c4c:	4605      	mov	r5, r0
  417c4e:	460f      	mov	r7, r1
  417c50:	4690      	mov	r8, r2
  417c52:	461e      	mov	r6, r3
    DECLARE_CURVE_SPECS(2)
  417c54:	ac06      	add	r4, sp, #24
  417c56:	9405      	str	r4, [sp, #20]
  417c58:	2228      	movs	r2, #40	; 0x28

00417c5a <.LVL792>:
  417c5a:	2100      	movs	r1, #0

00417c5c <.LVL793>:
  417c5c:	4620      	mov	r0, r4

00417c5e <.LVL794>:
  417c5e:	f002 f89f 	bl	419da0 <.LFE166>

00417c62 <.LVL795>:
  417c62:	ab10      	add	r3, sp, #64	; 0x40
  417c64:	61a3      	str	r3, [r4, #24]
  417c66:	2302      	movs	r3, #2
  417c68:	61e3      	str	r3, [r4, #28]
    if (private_key == NULL || point == NULL || out == NULL ||
  417c6a:	2d00      	cmp	r5, #0
  417c6c:	d04f      	beq.n	417d0e <.LBE35>
  417c6e:	2f00      	cmp	r7, #0
  417c70:	d04d      	beq.n	417d0e <.LBE35>
  417c72:	f1b8 0f00 	cmp.w	r8, #0
  417c76:	d04d      	beq.n	417d14 <.LBE35+0x6>
  417c78:	2e00      	cmp	r6, #0
  417c7a:	d04b      	beq.n	417d14 <.LBE35+0x6>
    err = wc_ecc_curve_load(private_key->dp, &curve,
  417c7c:	2203      	movs	r2, #3
  417c7e:	a905      	add	r1, sp, #20
  417c80:	6928      	ldr	r0, [r5, #16]
  417c82:	f001 f95b 	bl	418f3c <.LFE164>

00417c86 <.LVL796>:
    if (err != MP_OKAY)
  417c86:	4604      	mov	r4, r0
  417c88:	b120      	cbz	r0, 417c94 <.LCFI60>

00417c8a <.LVL797>:
}
  417c8a:	4620      	mov	r0, r4
  417c8c:	f50d 6d92 	add.w	sp, sp, #1168	; 0x490

00417c90 <.LCFI59>:
  417c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00417c94 <.LCFI60>:
        err = wc_ecc_shared_secret_gen_sync(private_key, point,
  417c94:	f8dd a014 	ldr.w	sl, [sp, #20]

00417c98 <.LBB29>:
    mp_int* k = &private_key->k;
  417c98:	f505 64d2 	add.w	r4, r5, #1680	; 0x690

00417c9c <.LVL800>:
    result = wc_ecc_new_point_h(private_key->heap);
  417c9c:	6968      	ldr	r0, [r5, #20]

00417c9e <.LVL801>:
  417c9e:	f004 fdc9 	bl	41c834 <.LBE32>

00417ca2 <.LVL802>:
    if (result == NULL) {
  417ca2:	4681      	mov	r9, r0
  417ca4:	b380      	cbz	r0, 417d08 <.LVL819>
    err = wc_ecc_mulmod_ex(k, point, result,
  417ca6:	f8da 3008 	ldr.w	r3, [sl, #8]
  417caa:	696a      	ldr	r2, [r5, #20]
  417cac:	9202      	str	r2, [sp, #8]
  417cae:	2201      	movs	r2, #1
  417cb0:	9201      	str	r2, [sp, #4]
  417cb2:	f8da 2004 	ldr.w	r2, [sl, #4]
  417cb6:	9200      	str	r2, [sp, #0]
  417cb8:	4602      	mov	r2, r0
  417cba:	4639      	mov	r1, r7
  417cbc:	4620      	mov	r0, r4

00417cbe <.LVL803>:
  417cbe:	f7f9 f92a 	bl	410f16 <.LFE6>

00417cc2 <.LVL804>:
    if (err == MP_OKAY) {
  417cc2:	4604      	mov	r4, r0

00417cc4 <.LVL805>:
  417cc4:	b148      	cbz	r0, 417cda <.LBB35>
    word32 x = 0;
  417cc6:	2700      	movs	r7, #0

00417cc8 <.LVL806>:
    *outlen = x;
  417cc8:	6037      	str	r7, [r6, #0]
    wc_ecc_del_point_h(result, private_key->heap);
  417cca:	6969      	ldr	r1, [r5, #20]
  417ccc:	4648      	mov	r0, r9
  417cce:	f005 fb7a 	bl	41d3c6 <.LFE193>

00417cd2 <.LBB33>:
    _wc_ecc_curve_free(curve);
  417cd2:	9805      	ldr	r0, [sp, #20]
  417cd4:	f003 fcfa 	bl	41b6cc <.LFE46>

00417cd8 <.LVL808>:
  417cd8:	e7d7      	b.n	417c8a <.LVL797>

00417cda <.LBB35>:
        x = mp_unsigned_bin_size(curve->prime);
  417cda:	f8da 0004 	ldr.w	r0, [sl, #4]

00417cde <.LVL810>:
  417cde:	f006 f845 	bl	41dd6c <.LFE82>

00417ce2 <.LVL811>:
  417ce2:	4607      	mov	r7, r0

00417ce4 <.LVL812>:
        if (*outlen < x) {
  417ce4:	6833      	ldr	r3, [r6, #0]
  417ce6:	4298      	cmp	r0, r3
  417ce8:	d817      	bhi.n	417d1a <.LBB36>

00417cea <.LVL813>:
        XMEMSET(out, 0, x);
  417cea:	4602      	mov	r2, r0
  417cec:	2100      	movs	r1, #0
  417cee:	4640      	mov	r0, r8

00417cf0 <.LVL814>:
  417cf0:	f002 f856 	bl	419da0 <.LFE166>

00417cf4 <.LVL815>:
                                 (x - mp_unsigned_bin_size(result->x)));
  417cf4:	4648      	mov	r0, r9
  417cf6:	f006 f839 	bl	41dd6c <.LFE82>

00417cfa <.LVL816>:
  417cfa:	1a39      	subs	r1, r7, r0
        err = mp_to_unsigned_bin(result->x,out +
  417cfc:	4441      	add	r1, r8
  417cfe:	4648      	mov	r0, r9
  417d00:	f005 ffce 	bl	41dca0 <.LFE73>

00417d04 <.LVL817>:
  417d04:	4604      	mov	r4, r0

00417d06 <.LVL818>:
  417d06:	e7df      	b.n	417cc8 <.LVL806>

00417d08 <.LVL819>:
        return MEMORY_E;
  417d08:	f06f 047c 	mvn.w	r4, #124	; 0x7c

00417d0c <.LVL820>:
  417d0c:	e7e1      	b.n	417cd2 <.LBB33>

00417d0e <.LBE35>:
        return BAD_FUNC_ARG;
  417d0e:	f06f 04ac 	mvn.w	r4, #172	; 0xac
  417d12:	e7ba      	b.n	417c8a <.LVL797>
  417d14:	f06f 04ac 	mvn.w	r4, #172	; 0xac
  417d18:	e7b7      	b.n	417c8a <.LVL797>

00417d1a <.LBB36>:
            err = BUFFER_E;
  417d1a:	f06f 0483 	mvn.w	r4, #131	; 0x83

00417d1e <.LVL823>:
  417d1e:	e7d3      	b.n	417cc8 <.LVL806>

Disassembly of section .text.Sha256Process%120:

00417d20 <Sha256Process>:



/* length is in bytes */
static int32_t Sha256Process(Sha256* sha256, const uint8_t *input, word32 length)
{
  417d20:	b410      	push	{r4}

00417d22 <.LCFI0>:

    ICM_REGS->ICM_CTRL = ICM_CTRL_SWRST(1);
  417d22:	2404      	movs	r4, #4
  417d24:	4b33      	ldr	r3, [pc, #204]	; (417df4 <.LCFI1+0x2>)
  417d26:	605c      	str	r4, [r3, #4]
    sha256->icm_descriptor.start_addr = (uint32_t)input;
  417d28:	6001      	str	r1, [r0, #0]

    /* Transfer size = (tran_size + 1) * 512bits */
    sha256->icm_descriptor.tran_size =  (length >> 6) - 1;
  417d2a:	0994      	lsrs	r4, r2, #6
  417d2c:	3c01      	subs	r4, #1
  417d2e:	6084      	str	r4, [r0, #8]

00417d30 <.LBB50>:
  __ASM volatile ("dsb 0xF":::"memory");
  417d30:	f3bf 8f4f 	dsb	sy

00417d34 <.LBE52>:
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
      SCB->DCCMVAC = op_addr;
  417d34:	4c30      	ldr	r4, [pc, #192]	; (417df8 <.LCFI1+0x6>)
  417d36:	f8c4 0268 	str.w	r0, [r4, #616]	; 0x268

00417d3a <.LBB54>:
  417d3a:	f3bf 8f4f 	dsb	sy

00417d3e <.LBB56>:
  __ASM volatile ("isb 0xF":::"memory");
  417d3e:	f3bf 8f6f 	isb	sy

00417d42 <.LBB58>:
  __ASM volatile ("dsb 0xF":::"memory");
  417d42:	f3bf 8f4f 	dsb	sy

00417d46 <.LBE60>:
    while (op_size > 0) {
  417d46:	2a00      	cmp	r2, #0
  417d48:	dd0b      	ble.n	417d62 <.LBB62>
  417d4a:	460b      	mov	r3, r1
  417d4c:	3a01      	subs	r2, #1

00417d4e <.LVL4>:
  417d4e:	f022 021f 	bic.w	r2, r2, #31

00417d52 <.LVL5>:
  417d52:	3220      	adds	r2, #32
  417d54:	4411      	add	r1, r2

00417d56 <.LVL6>:
      SCB->DCCMVAC = op_addr;
  417d56:	4622      	mov	r2, r4

00417d58 <.LVL7>:
  417d58:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
  417d5c:	3320      	adds	r3, #32
    while (op_size > 0) {
  417d5e:	4299      	cmp	r1, r3
  417d60:	d1fa      	bne.n	417d58 <.LVL7>

00417d62 <.LBB62>:
  417d62:	f3bf 8f4f 	dsb	sy

00417d66 <.LBB64>:
  __ASM volatile ("isb 0xF":::"memory");
  417d66:	f3bf 8f6f 	isb	sy

00417d6a <.LBE58>:
    
    SCB_CleanDCache_by_Addr((uint32_t *)(&(sha256->icm_descriptor)), sizeof(struct icm_descriptor));
    SCB_CleanDCache_by_Addr((uint32_t *)input, length);
    SCB_CleanInvalidateDCache_by_Addr((uint32_t *)&(sha256->digest), SHA256_DIGEST_SIZE);
  417d6a:	f100 0180 	add.w	r1, r0, #128	; 0x80

00417d6e <.LBB66>:
  __ASM volatile ("dsb 0xF":::"memory");
  417d6e:	f3bf 8f4f 	dsb	sy

00417d72 <.LBE68>:
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
      SCB->DCCIMVAC = op_addr;
  417d72:	4b21      	ldr	r3, [pc, #132]	; (417df8 <.LCFI1+0x6>)
  417d74:	f8c3 1270 	str.w	r1, [r3, #624]	; 0x270

00417d78 <.LBB70>:
  417d78:	f3bf 8f4f 	dsb	sy

00417d7c <.LBB72>:
  __ASM volatile ("isb 0xF":::"memory");
  417d7c:	f3bf 8f6f 	isb	sy

00417d80 <.LBE66>:


    /* ICM can set up FIPS default starting digest */
    ICM_REGS->ICM_DSCR = (uint32_t)&sha256->icm_descriptor;
  417d80:	4b1c      	ldr	r3, [pc, #112]	; (417df4 <.LCFI1+0x2>)
  417d82:	6318      	str	r0, [r3, #48]	; 0x30
    ICM_REGS->ICM_CFG = ICM_CFG_SLBDIS(1) 
  417d84:	f243 0204 	movw	r2, #12292	; 0x3004
  417d88:	601a      	str	r2, [r3, #0]
                 | ICM_CFG_BBC(0)
                 | ICM_CFG_UALGO_SHA256
                 | ICM_CFG_UIHASH_Msk;

    /* MUST BE ALIGNED at 128! */
    ICM_REGS->ICM_HASH = (uint32_t)(&(sha256->digest));
  417d8a:	6359      	str	r1, [r3, #52]	; 0x34

    ICM_REGS->ICM_UIHVAL[0] = sha256->digest[0];
  417d8c:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  417d90:	639a      	str	r2, [r3, #56]	; 0x38
    ICM_REGS->ICM_UIHVAL[1] = sha256->digest[1];
  417d92:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
  417d96:	63da      	str	r2, [r3, #60]	; 0x3c
    ICM_REGS->ICM_UIHVAL[2] = sha256->digest[2];
  417d98:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
  417d9c:	641a      	str	r2, [r3, #64]	; 0x40
    ICM_REGS->ICM_UIHVAL[3] = sha256->digest[3];
  417d9e:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
  417da2:	645a      	str	r2, [r3, #68]	; 0x44
    ICM_REGS->ICM_UIHVAL[4] = sha256->digest[4];
  417da4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
  417da8:	649a      	str	r2, [r3, #72]	; 0x48
    ICM_REGS->ICM_UIHVAL[5] = sha256->digest[5];
  417daa:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
  417dae:	64da      	str	r2, [r3, #76]	; 0x4c
    ICM_REGS->ICM_UIHVAL[6] = sha256->digest[6];
  417db0:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
  417db4:	651a      	str	r2, [r3, #80]	; 0x50
    ICM_REGS->ICM_UIHVAL[7] = sha256->digest[7];
  417db6:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
  417dba:	655a      	str	r2, [r3, #84]	; 0x54

00417dbc <.LBB74>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  417dbc:	f3bf 8f5f 	dmb	sy

00417dc0 <.LBE74>:

    /* memory barrier - sync all before enable ICM */
    __DMB();

    ICM_REGS->ICM_IER = ICM_IER_RHC(1);
  417dc0:	2201      	movs	r2, #1
  417dc2:	611a      	str	r2, [r3, #16]
    
    /* enable the ICM and wait */
    ICM_REGS->ICM_CTRL = ICM_CTRL_ENABLE(1);
  417dc4:	605a      	str	r2, [r3, #4]
    while (!(ICM_REGS->ICM_ISR & ICM_ISR_RHC_Msk))
  417dc6:	461a      	mov	r2, r3
  417dc8:	69d3      	ldr	r3, [r2, #28]
  417dca:	f013 0f0f 	tst.w	r3, #15
  417dce:	d0fb      	beq.n	417dc8 <.LBE74+0x8>
    {
        /* wait - when finished digest will be updated */
    }
    
    ICM_REGS->ICM_CTRL = ICM_CTRL_DISABLE(1);
  417dd0:	4b08      	ldr	r3, [pc, #32]	; (417df4 <.LCFI1+0x2>)
  417dd2:	2202      	movs	r2, #2
  417dd4:	605a      	str	r2, [r3, #4]
    ICM_REGS->ICM_CTRL = ICM_CTRL_SWRST(1);
  417dd6:	2204      	movs	r2, #4
  417dd8:	605a      	str	r2, [r3, #4]

00417dda <.LBB76>:
  __ASM volatile ("dsb 0xF":::"memory");
  417dda:	f3bf 8f4f 	dsb	sy

00417dde <.LBE78>:
  417dde:	4b06      	ldr	r3, [pc, #24]	; (417df8 <.LCFI1+0x6>)
  417de0:	f8c3 1270 	str.w	r1, [r3, #624]	; 0x270

00417de4 <.LBB80>:
  417de4:	f3bf 8f4f 	dsb	sy

00417de8 <.LBB82>:
  __ASM volatile ("isb 0xF":::"memory");
  417de8:	f3bf 8f6f 	isb	sy

00417dec <.LBE76>:

    SCB_CleanInvalidateDCache_by_Addr((uint32_t *)&(sha256->digest), SHA256_DIGEST_SIZE);
    
    return 0;
}
  417dec:	2000      	movs	r0, #0

00417dee <.LVL17>:
  417dee:	f85d 4b04 	ldr.w	r4, [sp], #4

00417df2 <.LCFI1>:
  417df2:	4770      	bx	lr
  417df4:	40048000 	.word	0x40048000
  417df8:	e000ed00 	.word	0xe000ed00

Disassembly of section .text%121:

00417e00 <strlen>:
  417e00:	f890 f000 	pld	[r0]
  417e04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  417e08:	f020 0107 	bic.w	r1, r0, #7
  417e0c:	f06f 0c00 	mvn.w	ip, #0
  417e10:	f010 0407 	ands.w	r4, r0, #7
  417e14:	f891 f020 	pld	[r1, #32]
  417e18:	f040 8049 	bne.w	417eae <strlen+0xae>
  417e1c:	f04f 0400 	mov.w	r4, #0
  417e20:	f06f 0007 	mvn.w	r0, #7
  417e24:	e9d1 2300 	ldrd	r2, r3, [r1]
  417e28:	f891 f040 	pld	[r1, #64]	; 0x40
  417e2c:	f100 0008 	add.w	r0, r0, #8
  417e30:	fa82 f24c 	uadd8	r2, r2, ip
  417e34:	faa4 f28c 	sel	r2, r4, ip
  417e38:	fa83 f34c 	uadd8	r3, r3, ip
  417e3c:	faa2 f38c 	sel	r3, r2, ip
  417e40:	bb4b      	cbnz	r3, 417e96 <strlen+0x96>
  417e42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  417e46:	fa82 f24c 	uadd8	r2, r2, ip
  417e4a:	f100 0008 	add.w	r0, r0, #8
  417e4e:	faa4 f28c 	sel	r2, r4, ip
  417e52:	fa83 f34c 	uadd8	r3, r3, ip
  417e56:	faa2 f38c 	sel	r3, r2, ip
  417e5a:	b9e3      	cbnz	r3, 417e96 <strlen+0x96>
  417e5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  417e60:	fa82 f24c 	uadd8	r2, r2, ip
  417e64:	f100 0008 	add.w	r0, r0, #8
  417e68:	faa4 f28c 	sel	r2, r4, ip
  417e6c:	fa83 f34c 	uadd8	r3, r3, ip
  417e70:	faa2 f38c 	sel	r3, r2, ip
  417e74:	b97b      	cbnz	r3, 417e96 <strlen+0x96>
  417e76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  417e7a:	f101 0120 	add.w	r1, r1, #32
  417e7e:	fa82 f24c 	uadd8	r2, r2, ip
  417e82:	f100 0008 	add.w	r0, r0, #8
  417e86:	faa4 f28c 	sel	r2, r4, ip
  417e8a:	fa83 f34c 	uadd8	r3, r3, ip
  417e8e:	faa2 f38c 	sel	r3, r2, ip
  417e92:	2b00      	cmp	r3, #0
  417e94:	d0c6      	beq.n	417e24 <strlen+0x24>
  417e96:	2a00      	cmp	r2, #0
  417e98:	bf04      	itt	eq
  417e9a:	3004      	addeq	r0, #4
  417e9c:	461a      	moveq	r2, r3
  417e9e:	ba12      	rev	r2, r2
  417ea0:	fab2 f282 	clz	r2, r2
  417ea4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  417ea8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  417eac:	4770      	bx	lr
  417eae:	e9d1 2300 	ldrd	r2, r3, [r1]
  417eb2:	f004 0503 	and.w	r5, r4, #3
  417eb6:	f1c4 0000 	rsb	r0, r4, #0
  417eba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  417ebe:	f014 0f04 	tst.w	r4, #4
  417ec2:	f891 f040 	pld	[r1, #64]	; 0x40
  417ec6:	fa0c f505 	lsl.w	r5, ip, r5
  417eca:	ea62 0205 	orn	r2, r2, r5
  417ece:	bf1c      	itt	ne
  417ed0:	ea63 0305 	ornne	r3, r3, r5
  417ed4:	4662      	movne	r2, ip
  417ed6:	f04f 0400 	mov.w	r4, #0
  417eda:	e7a9      	b.n	417e30 <strlen+0x30>

Disassembly of section .text.wc_ecc_sign_hash%122:

00417edc <wc_ecc_sign_hash>:
{
  417edc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

00417ee0 <.LCFI84>:
  417ee0:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c

00417ee4 <.LCFI85>:
  417ee4:	f8dd 447c 	ldr.w	r4, [sp, #1148]	; 0x47c

00417ee8 <.LVL1011>:
    if (in == NULL || out == NULL || outlen == NULL || key == NULL ||
  417ee8:	2800      	cmp	r0, #0
  417eea:	d05e      	beq.n	417faa <.LVL1045>
  417eec:	4680      	mov	r8, r0
  417eee:	2a00      	cmp	r2, #0
  417ef0:	d05b      	beq.n	417faa <.LVL1045>
  417ef2:	2c00      	cmp	r4, #0
  417ef4:	bf18      	it	ne
  417ef6:	2b00      	cmpne	r3, #0
  417ef8:	d05a      	beq.n	417fb0 <.LVL1046>
  417efa:	f8dd 0478 	ldr.w	r0, [sp, #1144]	; 0x478

00417efe <.LVL1012>:
  417efe:	2800      	cmp	r0, #0
  417f00:	d056      	beq.n	417fb0 <.LVL1046>
  417f02:	461f      	mov	r7, r3
  417f04:	4616      	mov	r6, r2
  417f06:	4689      	mov	r9, r1
    switch(key->state) {
  417f08:	68a5      	ldr	r5, [r4, #8]
  417f0a:	2d03      	cmp	r5, #3
  417f0c:	d005      	beq.n	417f1a <.LVL1012+0x1c>
  417f0e:	2d04      	cmp	r5, #4
  417f10:	d028      	beq.n	417f64 <.LVL1029>
  417f12:	b115      	cbz	r5, 417f1a <.LVL1012+0x1c>
            err = BAD_STATE_E;
  417f14:	f06f 05bf 	mvn.w	r5, #191	; 0xbf
  417f18:	e033      	b.n	417f82 <.LVL1037>
            key->state = ECC_STATE_SIGN_DO;
  417f1a:	2303      	movs	r3, #3

00417f1c <.LVL1013>:
  417f1c:	60a3      	str	r3, [r4, #8]

00417f1e <.LBB70>:
        XMEMSET(*r, 0, sizeof(mp_int));
  417f1e:	f44f 750a 	mov.w	r5, #552	; 0x228
  417f22:	462a      	mov	r2, r5

00417f24 <.LVL1015>:
  417f24:	2100      	movs	r1, #0

00417f26 <.LVL1016>:
  417f26:	a88c      	add	r0, sp, #560	; 0x230

00417f28 <.LVL1017>:
  417f28:	f001 ff3a 	bl	419da0 <.LFE166>

00417f2c <.LVL1018>:
        XMEMSET(*s, 0, sizeof(mp_int));
  417f2c:	462a      	mov	r2, r5
  417f2e:	2100      	movs	r1, #0
  417f30:	a802      	add	r0, sp, #8

00417f32 <.LVL1019>:
  417f32:	f001 ff35 	bl	419da0 <.LFE166>

00417f36 <.LBE70>:
            if ((err = mp_init_multi(r, s, NULL, NULL, NULL, NULL)) != MP_OKAY){
  417f36:	2200      	movs	r2, #0
  417f38:	9201      	str	r2, [sp, #4]
  417f3a:	9200      	str	r2, [sp, #0]
  417f3c:	4613      	mov	r3, r2
  417f3e:	a902      	add	r1, sp, #8

00417f40 <.LVL1021>:
  417f40:	a88c      	add	r0, sp, #560	; 0x230

00417f42 <.LVL1022>:
  417f42:	f004 fd77 	bl	41ca34 <mp_init_multi>

00417f46 <.LVL1023>:
  417f46:	4605      	mov	r5, r0
  417f48:	b9d8      	cbnz	r0, 417f82 <.LVL1037>
            err = wc_ecc_sign_hash_ex(in, inlen, rng, key, r, s);
  417f4a:	ab02      	add	r3, sp, #8

00417f4c <.LVL1024>:
  417f4c:	9301      	str	r3, [sp, #4]
  417f4e:	ab8c      	add	r3, sp, #560	; 0x230

00417f50 <.LVL1025>:
  417f50:	9300      	str	r3, [sp, #0]
  417f52:	4623      	mov	r3, r4

00417f54 <.LVL1026>:
  417f54:	f8dd 2478 	ldr.w	r2, [sp, #1144]	; 0x478
  417f58:	4649      	mov	r1, r9
  417f5a:	4640      	mov	r0, r8

00417f5c <.LVL1027>:
  417f5c:	f7fc fc50 	bl	414800 <wc_ecc_sign_hash_ex>

00417f60 <.LVL1028>:
            if (err < 0) {
  417f60:	1e05      	subs	r5, r0, #0
  417f62:	db0e      	blt.n	417f82 <.LVL1037>

00417f64 <.LVL1029>:
            key->state = ECC_STATE_SIGN_ENCODE;
  417f64:	2304      	movs	r3, #4
  417f66:	60a3      	str	r3, [r4, #8]
            err = StoreECC_DSA_Sig(out, outlen, r, s);
  417f68:	ab02      	add	r3, sp, #8

00417f6a <.LVL1030>:
  417f6a:	aa8c      	add	r2, sp, #560	; 0x230

00417f6c <.LVL1031>:
  417f6c:	4639      	mov	r1, r7
  417f6e:	4630      	mov	r0, r6
  417f70:	f002 ff92 	bl	41ae98 <.LFE167>

00417f74 <.LVL1032>:
  417f74:	4605      	mov	r5, r0

00417f76 <.LVL1033>:
            mp_clear(r);
  417f76:	a88c      	add	r0, sp, #560	; 0x230

00417f78 <.LVL1034>:
  417f78:	f005 fe31 	bl	41dbde <.LFE179>

00417f7c <.LVL1035>:
            mp_clear(s);
  417f7c:	a802      	add	r0, sp, #8

00417f7e <.LVL1036>:
  417f7e:	f005 fe2e 	bl	41dbde <.LFE179>

00417f82 <.LVL1037>:
    if (err == WC_PENDING_E) {
  417f82:	f115 0f6c 	cmn.w	r5, #108	; 0x6c
  417f86:	d00c      	beq.n	417fa2 <.LCFI87>

00417f88 <.LBB72>:
        mp_clear(*r);
  417f88:	a88c      	add	r0, sp, #560	; 0x230

00417f8a <.LVL1039>:
  417f8a:	f005 fe28 	bl	41dbde <.LFE179>

00417f8e <.LVL1040>:
        mp_clear(*s);
  417f8e:	a802      	add	r0, sp, #8

00417f90 <.LVL1041>:
  417f90:	f005 fe25 	bl	41dbde <.LFE179>

00417f94 <.LBE72>:
    key->state = ECC_STATE_NONE;
  417f94:	2300      	movs	r3, #0
  417f96:	60a3      	str	r3, [r4, #8]

00417f98 <.LVL1043>:
}
  417f98:	4628      	mov	r0, r5
  417f9a:	f20d 4d5c 	addw	sp, sp, #1116	; 0x45c

00417f9e <.LCFI86>:
  417f9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00417fa2 <.LCFI87>:
        key->state++;
  417fa2:	68a3      	ldr	r3, [r4, #8]
  417fa4:	3301      	adds	r3, #1
  417fa6:	60a3      	str	r3, [r4, #8]
        return err;
  417fa8:	e7f6      	b.n	417f98 <.LVL1043>

00417faa <.LVL1045>:
        return ECC_BAD_ARG_E;
  417faa:	f06f 05a9 	mvn.w	r5, #169	; 0xa9
  417fae:	e7f3      	b.n	417f98 <.LVL1043>

00417fb0 <.LVL1046>:
  417fb0:	f06f 05a9 	mvn.w	r5, #169	; 0xa9

00417fb4 <.LVL1047>:
  417fb4:	e7f0      	b.n	417f98 <.LVL1043>

Disassembly of section .text.s_fp_add%123:

00417fb6 <s_fp_add>:
{
  417fb6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

00417fba <.LCFI0>:
  417fba:	4690      	mov	r8, r2
  y       = MAX(a->used, b->used);
  417fbc:	680a      	ldr	r2, [r1, #0]

00417fbe <.LVL1>:
  417fbe:	6803      	ldr	r3, [r0, #0]
  417fc0:	429a      	cmp	r2, r3
  417fc2:	bfb8      	it	lt
  417fc4:	461a      	movlt	r2, r3

00417fc6 <.LVL2>:
  oldused = MIN(c->used, FP_SIZE);   /* help static analysis w/ largest size */
  417fc6:	f8d8 3000 	ldr.w	r3, [r8]
  417fca:	2b88      	cmp	r3, #136	; 0x88
  417fcc:	bfa8      	it	ge
  417fce:	2388      	movge	r3, #136	; 0x88
  417fd0:	469c      	mov	ip, r3

00417fd2 <.LVL3>:
  c->used = y;
  417fd2:	f8c8 2000 	str.w	r2, [r8]

00417fd6 <.LVL4>:
  for (x = 0; x < y; x++) {
  417fd6:	2a00      	cmp	r2, #0
  417fd8:	dd4f      	ble.n	41807a <.LVL17>
  417fda:	4696      	mov	lr, r2
  417fdc:	1d06      	adds	r6, r0, #4
  417fde:	1d0a      	adds	r2, r1, #4

00417fe0 <.LVL5>:
  417fe0:	f108 0704 	add.w	r7, r8, #4
  417fe4:	2400      	movs	r4, #0
  417fe6:	2500      	movs	r5, #0
  417fe8:	2300      	movs	r3, #0

00417fea <.LVL6>:
      t         += ((fp_word)a->dp[x]) + ((fp_word)b->dp[x]);
  417fea:	f856 9f04 	ldr.w	r9, [r6, #4]!
  417fee:	f852 0f04 	ldr.w	r0, [r2, #4]!
  417ff2:	2100      	movs	r1, #0
  417ff4:	eb10 0009 	adds.w	r0, r0, r9
  417ff8:	f141 0100 	adc.w	r1, r1, #0
  417ffc:	1900      	adds	r0, r0, r4
  417ffe:	4169      	adcs	r1, r5

00418000 <.LVL7>:
      c->dp[x]   = (fp_digit)t;
  418000:	f847 0f04 	str.w	r0, [r7, #4]!
      t        >>= DIGIT_BIT;
  418004:	460c      	mov	r4, r1
  418006:	2500      	movs	r5, #0

00418008 <.LVL8>:
  for (x = 0; x < y; x++) {
  418008:	3301      	adds	r3, #1
  41800a:	459e      	cmp	lr, r3
  41800c:	d1ed      	bne.n	417fea <.LVL6>
  41800e:	1e5a      	subs	r2, r3, #1
  if (t != 0 && x < FP_SIZE) {
  418010:	ea54 0105 	orrs.w	r1, r4, r5
  418014:	d005      	beq.n	418022 <.LVL11>
  418016:	2b87      	cmp	r3, #135	; 0x87
  418018:	dc03      	bgt.n	418022 <.LVL11>
     c->dp[c->used++] = (fp_digit)t;
  41801a:	3302      	adds	r3, #2

0041801c <.LVL10>:
  41801c:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
     ++x;
  418020:	1c93      	adds	r3, r2, #2

00418022 <.LVL11>:
  c->used = x;
  418022:	f8c8 3000 	str.w	r3, [r8]
  for (; x < oldused; x++) {
  418026:	4563      	cmp	r3, ip
  418028:	da09      	bge.n	41803e <.LVL15>

0041802a <.LVL12>:
  41802a:	eb08 0183 	add.w	r1, r8, r3, lsl #2
  41802e:	3104      	adds	r1, #4
  for (x = 0; x < y; x++) {
  418030:	461a      	mov	r2, r3
     c->dp[x] = 0;
  418032:	2000      	movs	r0, #0

00418034 <.LVL13>:
  418034:	f841 0f04 	str.w	r0, [r1, #4]!
  for (; x < oldused; x++) {
  418038:	3201      	adds	r2, #1
  41803a:	4594      	cmp	ip, r2
  41803c:	d1fa      	bne.n	418034 <.LVL13>

0041803e <.LVL15>:
  fp_clamp(c);
  41803e:	b1d3      	cbz	r3, 418076 <.LVL15+0x38>
  418040:	1e5a      	subs	r2, r3, #1
  418042:	1c59      	adds	r1, r3, #1
  418044:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
  418048:	b961      	cbnz	r1, 418064 <.LVL15+0x26>
  41804a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  41804e:	3304      	adds	r3, #4
  418050:	e000      	b.n	418054 <.LVL15+0x16>
  418052:	4602      	mov	r2, r0
  418054:	b162      	cbz	r2, 418070 <.LVL15+0x32>
  418056:	1e50      	subs	r0, r2, #1
  418058:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  41805c:	2900      	cmp	r1, #0
  41805e:	d0f8      	beq.n	418052 <.LVL15+0x14>
  418060:	f8c8 2000 	str.w	r2, [r8]
  418064:	f8d8 3004 	ldr.w	r3, [r8, #4]
  418068:	f8c8 3004 	str.w	r3, [r8, #4]
}
  41806c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  418070:	2300      	movs	r3, #0
  418072:	f8c8 3000 	str.w	r3, [r8]
  fp_clamp(c);
  418076:	2300      	movs	r3, #0
  418078:	e7f6      	b.n	418068 <.LVL15+0x2a>

0041807a <.LVL17>:
  c->used = x;
  41807a:	2300      	movs	r3, #0

0041807c <.LVL18>:
  41807c:	f8c8 3000 	str.w	r3, [r8]
  for (; x < oldused; x++) {
  418080:	459c      	cmp	ip, r3
  418082:	ddf8      	ble.n	418076 <.LVL15+0x38>
  for (x = 0; x < y; x++) {
  418084:	2300      	movs	r3, #0
  418086:	e7d0      	b.n	41802a <.LVL12>

Disassembly of section .text.wc_ecc_verify_hash%124:

00418088 <wc_ecc_verify_hash>:
{
  418088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0041808c <.LCFI93>:
  41808c:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c

00418090 <.LCFI94>:
  418090:	f8dd 5480 	ldr.w	r5, [sp, #1152]	; 0x480
  418094:	f8dd 4484 	ldr.w	r4, [sp, #1156]	; 0x484

00418098 <.LVL1165>:
    if (sig == NULL || hash == NULL || res == NULL || key == NULL) {
  418098:	2800      	cmp	r0, #0
  41809a:	d057      	beq.n	41814c <.LVL1196>
  41809c:	4607      	mov	r7, r0
  41809e:	2a00      	cmp	r2, #0
  4180a0:	d054      	beq.n	41814c <.LVL1196>
  4180a2:	2d00      	cmp	r5, #0
  4180a4:	d055      	beq.n	418152 <.LVL1196+0x6>
  4180a6:	2c00      	cmp	r4, #0
  4180a8:	d053      	beq.n	418152 <.LVL1196+0x6>
  4180aa:	461e      	mov	r6, r3
  4180ac:	4690      	mov	r8, r2
  4180ae:	4689      	mov	r9, r1
    switch(key->state) {
  4180b0:	68a3      	ldr	r3, [r4, #8]

004180b2 <.LVL1166>:
  4180b2:	2b07      	cmp	r3, #7
  4180b4:	d841      	bhi.n	41813a <.LCFI96>
  4180b6:	e8df f003 	tbb	[pc, r3]

004180ba <.LVL1167>:
  4180ba:	4004      	.short	0x4004
  4180bc:	04404040 	.word	0x04404040
  4180c0:	2a1e      	.short	0x2a1e
            key->state = ECC_STATE_VERIFY_DECODE;
  4180c2:	2305      	movs	r3, #5
  4180c4:	60a3      	str	r3, [r4, #8]
            *res = 0;
  4180c6:	f04f 0a00 	mov.w	sl, #0
  4180ca:	f8c5 a000 	str.w	sl, [r5]

004180ce <.LBB90>:
        XMEMSET(*r, 0, sizeof(mp_int));
  4180ce:	f44f 7b0a 	mov.w	fp, #552	; 0x228
  4180d2:	465a      	mov	r2, fp
  4180d4:	4651      	mov	r1, sl

004180d6 <.LVL1169>:
  4180d6:	a88c      	add	r0, sp, #560	; 0x230

004180d8 <.LVL1170>:
  4180d8:	f001 fe62 	bl	419da0 <.LFE166>

004180dc <.LVL1171>:
        XMEMSET(*s, 0, sizeof(mp_int));
  4180dc:	465a      	mov	r2, fp
  4180de:	4651      	mov	r1, sl
  4180e0:	a802      	add	r0, sp, #8

004180e2 <.LVL1172>:
  4180e2:	f001 fe5d 	bl	419da0 <.LFE166>

004180e6 <.LBE90>:
            err = DecodeECC_DSA_Sig(sig, siglen, r, s);
  4180e6:	ab02      	add	r3, sp, #8

004180e8 <.LVL1174>:
  4180e8:	aa8c      	add	r2, sp, #560	; 0x230

004180ea <.LVL1175>:
  4180ea:	4649      	mov	r1, r9
  4180ec:	4638      	mov	r0, r7
  4180ee:	f003 fb22 	bl	41b736 <.LFE177>

004180f2 <.LVL1176>:
            if (err < 0) {
  4180f2:	1e07      	subs	r7, r0, #0

004180f4 <.LVL1177>:
  4180f4:	db23      	blt.n	41813e <.LVL1195>

004180f6 <.LVL1178>:
            key->state = ECC_STATE_VERIFY_DO;
  4180f6:	2306      	movs	r3, #6
  4180f8:	60a3      	str	r3, [r4, #8]
            err = wc_ecc_verify_hash_ex(r, s, hash, hashlen, res, key);
  4180fa:	9401      	str	r4, [sp, #4]
  4180fc:	9500      	str	r5, [sp, #0]
  4180fe:	4633      	mov	r3, r6
  418100:	4642      	mov	r2, r8
  418102:	a902      	add	r1, sp, #8

00418104 <.LVL1179>:
  418104:	a88c      	add	r0, sp, #560	; 0x230

00418106 <.LVL1180>:
  418106:	f7f8 f909 	bl	41031c <.LFE0>

0041810a <.LVL1181>:
            if (err < 0) {
  41810a:	1e07      	subs	r7, r0, #0
  41810c:	db17      	blt.n	41813e <.LVL1195>

0041810e <.LVL1182>:
            key->state = ECC_STATE_VERIFY_RES;
  41810e:	2307      	movs	r3, #7
  418110:	60a3      	str	r3, [r4, #8]

00418112 <.LVL1183>:
            mp_clear(r);
  418112:	a88c      	add	r0, sp, #560	; 0x230

00418114 <.LVL1184>:
  418114:	f005 fd63 	bl	41dbde <.LFE179>

00418118 <.LVL1185>:
            mp_clear(s);
  418118:	a802      	add	r0, sp, #8

0041811a <.LVL1186>:
  41811a:	f005 fd60 	bl	41dbde <.LFE179>

0041811e <.LVL1187>:
            err = 0;
  41811e:	2700      	movs	r7, #0

00418120 <.LBB92>:
        mp_clear(*r);
  418120:	a88c      	add	r0, sp, #560	; 0x230

00418122 <.LVL1189>:
  418122:	f005 fd5c 	bl	41dbde <.LFE179>

00418126 <.LVL1190>:
        mp_clear(*s);
  418126:	a802      	add	r0, sp, #8

00418128 <.LVL1191>:
  418128:	f005 fd59 	bl	41dbde <.LFE179>

0041812c <.LBE92>:
    key->state = ECC_STATE_NONE;
  41812c:	2300      	movs	r3, #0
  41812e:	60a3      	str	r3, [r4, #8]

00418130 <.LVL1193>:
}
  418130:	4638      	mov	r0, r7
  418132:	f20d 4d5c 	addw	sp, sp, #1116	; 0x45c

00418136 <.LCFI95>:
  418136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0041813a <.LCFI96>:
            err = BAD_STATE_E;
  41813a:	f06f 07bf 	mvn.w	r7, #191	; 0xbf

0041813e <.LVL1195>:
    if (err == WC_PENDING_E) {
  41813e:	f117 0f6c 	cmn.w	r7, #108	; 0x6c
  418142:	d1ed      	bne.n	418120 <.LBB92>
        key->state++;
  418144:	68a3      	ldr	r3, [r4, #8]
  418146:	3301      	adds	r3, #1
  418148:	60a3      	str	r3, [r4, #8]
        return err;
  41814a:	e7f1      	b.n	418130 <.LVL1193>

0041814c <.LVL1196>:
        return ECC_BAD_ARG_E;
  41814c:	f06f 07a9 	mvn.w	r7, #169	; 0xa9
  418150:	e7ee      	b.n	418130 <.LVL1193>
  418152:	f06f 07a9 	mvn.w	r7, #169	; 0xa9

00418156 <.LVL1197>:
  418156:	e7eb      	b.n	418130 <.LVL1193>

Disassembly of section .text.hmac_md5_test%125:

00418158 <hmac_md5_test>:
{
  418158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0041815c <.LCFI19>:
  41815c:	b095      	sub	sp, #84	; 0x54

0041815e <.LCFI20>:
  41815e:	af00      	add	r7, sp, #0

00418160 <.LCFI21>:
  418160:	f5ad 7d40 	sub.w	sp, sp, #768	; 0x300
  418164:	f10d 067f 	add.w	r6, sp, #127	; 0x7f
  418168:	f026 067f 	bic.w	r6, r6, #127	; 0x7f
    const char* keys[]=
  41816c:	4b2b      	ldr	r3, [pc, #172]	; (41821c <.LCFI23+0x6>)
  41816e:	f107 0534 	add.w	r5, r7, #52	; 0x34
  418172:	f503 6287 	add.w	r2, r3, #1080	; 0x438
  418176:	ca07      	ldmia	r2, {r0, r1, r2}
  418178:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    test_hmac[0] = a;
  41817c:	f203 4244 	addw	r2, r3, #1092	; 0x444
  418180:	607a      	str	r2, [r7, #4]
  418182:	f503 628a 	add.w	r2, r3, #1104	; 0x450
  418186:	60ba      	str	r2, [r7, #8]
  418188:	2208      	movs	r2, #8
  41818a:	60fa      	str	r2, [r7, #12]
  41818c:	2210      	movs	r2, #16
  41818e:	613a      	str	r2, [r7, #16]
    test_hmac[1] = b;
  418190:	f203 4164 	addw	r1, r3, #1124	; 0x464
  418194:	6179      	str	r1, [r7, #20]
  418196:	f203 4184 	addw	r1, r3, #1156	; 0x484
  41819a:	61b9      	str	r1, [r7, #24]
  41819c:	211c      	movs	r1, #28
  41819e:	61f9      	str	r1, [r7, #28]
  4181a0:	623a      	str	r2, [r7, #32]
    test_hmac[2] = c;
  4181a2:	f503 6193 	add.w	r1, r3, #1176	; 0x498
  4181a6:	6279      	str	r1, [r7, #36]	; 0x24
  4181a8:	f203 43cc 	addw	r3, r3, #1228	; 0x4cc
  4181ac:	62bb      	str	r3, [r7, #40]	; 0x28
  4181ae:	2332      	movs	r3, #50	; 0x32
  4181b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  4181b2:	633a      	str	r2, [r7, #48]	; 0x30
    appData.hmac_md5_test_result = times;
  4181b4:	2203      	movs	r2, #3
  4181b6:	4b1a      	ldr	r3, [pc, #104]	; (418220 <.LCFI23+0xa>)
  4181b8:	619a      	str	r2, [r3, #24]

004181ba <.LVL36>:
  4181ba:	1d3c      	adds	r4, r7, #4
  4181bc:	46ab      	mov	fp, r5
        wc_HmacSetKey(&hmac, MD5, (byte*)keys[i], (word32)strlen(keys[i]));
  4181be:	f04f 0a00 	mov.w	sl, #0
            appData.hmac_md5_test_result--;
  4181c2:	4699      	mov	r9, r3
  4181c4:	e002      	b.n	4181cc <.LVL37+0x6>

004181c6 <.LVL37>:
  4181c6:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  4181c8:	455c      	cmp	r4, fp
  4181ca:	d022      	beq.n	418212 <.LVL42+0x10>
        wc_HmacSetKey(&hmac, MD5, (byte*)keys[i], (word32)strlen(keys[i]));
  4181cc:	f855 8b04 	ldr.w	r8, [r5], #4
  4181d0:	4640      	mov	r0, r8
  4181d2:	f7ff fe15 	bl	417e00 <strlen>

004181d6 <.LVL38>:
  4181d6:	4603      	mov	r3, r0
  4181d8:	4642      	mov	r2, r8
  4181da:	4651      	mov	r1, sl
  4181dc:	4630      	mov	r0, r6
  4181de:	f7fc f8eb 	bl	4143b8 <.LFE173>

004181e2 <.LVL39>:
        wc_HmacUpdate(&hmac, (byte*)test_hmac[i].input,
  4181e2:	68a2      	ldr	r2, [r4, #8]
  4181e4:	6821      	ldr	r1, [r4, #0]
  4181e6:	4630      	mov	r0, r6
  4181e8:	f002 fa94 	bl	41a714 <.LFE56>

004181ec <.LVL40>:
        wc_HmacFinal(&hmac, hash);
  4181ec:	f107 0140 	add.w	r1, r7, #64	; 0x40
  4181f0:	4630      	mov	r0, r6
  4181f2:	f7fd fb5f 	bl	4158b4 <.LBE56>

004181f6 <.LVL41>:
        if (memcmp(hash, test_hmac[i].output, MD5_DIGEST_SIZE) == 0)
  4181f6:	2210      	movs	r2, #16
  4181f8:	6861      	ldr	r1, [r4, #4]
  4181fa:	f107 0040 	add.w	r0, r7, #64	; 0x40
  4181fe:	f003 fd83 	bl	41bd08 <memcmp>

00418202 <.LVL42>:
  418202:	2800      	cmp	r0, #0
  418204:	d1df      	bne.n	4181c6 <.LVL37>
            appData.hmac_md5_test_result--;
  418206:	f8d9 3018 	ldr.w	r3, [r9, #24]
  41820a:	3b01      	subs	r3, #1
  41820c:	f8c9 3018 	str.w	r3, [r9, #24]
  418210:	e7d9      	b.n	4181c6 <.LVL37>
}
  418212:	3754      	adds	r7, #84	; 0x54

00418214 <.LCFI22>:
  418214:	46bd      	mov	sp, r7

00418216 <.LCFI23>:
  418216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41821a:	bf00      	nop
  41821c:	0040ab9c 	.word	0x0040ab9c
  418220:	2040d534 	.word	0x2040d534

Disassembly of section .text.hmac_sha_test%126:

00418224 <hmac_sha_test>:
{
  418224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00418228 <.LCFI24>:
  418228:	b095      	sub	sp, #84	; 0x54

0041822a <.LCFI25>:
  41822a:	af00      	add	r7, sp, #0

0041822c <.LCFI26>:
  41822c:	f5ad 7d40 	sub.w	sp, sp, #768	; 0x300
  418230:	f10d 067f 	add.w	r6, sp, #127	; 0x7f
  418234:	f026 067f 	bic.w	r6, r6, #127	; 0x7f
    const char* keys[]=
  418238:	4b2b      	ldr	r3, [pc, #172]	; (4182e8 <.LCFI28+0x6>)
  41823a:	f107 0530 	add.w	r5, r7, #48	; 0x30
  41823e:	f503 629c 	add.w	r2, r3, #1248	; 0x4e0
  418242:	ca07      	ldmia	r2, {r0, r1, r2}
  418244:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    test_hmac[0] = a;
  418248:	f203 4244 	addw	r2, r3, #1092	; 0x444
  41824c:	603a      	str	r2, [r7, #0]
  41824e:	f203 42ec 	addw	r2, r3, #1260	; 0x4ec
  418252:	607a      	str	r2, [r7, #4]
  418254:	2208      	movs	r2, #8
  418256:	60ba      	str	r2, [r7, #8]
  418258:	2214      	movs	r2, #20
  41825a:	60fa      	str	r2, [r7, #12]
    test_hmac[1] = b;
  41825c:	f203 4164 	addw	r1, r3, #1124	; 0x464
  418260:	6139      	str	r1, [r7, #16]
  418262:	f203 5104 	addw	r1, r3, #1284	; 0x504
  418266:	6179      	str	r1, [r7, #20]
  418268:	211c      	movs	r1, #28
  41826a:	61b9      	str	r1, [r7, #24]
  41826c:	61fa      	str	r2, [r7, #28]
    test_hmac[2] = c;
  41826e:	f503 6193 	add.w	r1, r3, #1176	; 0x498
  418272:	6239      	str	r1, [r7, #32]
  418274:	f203 531c 	addw	r3, r3, #1308	; 0x51c
  418278:	627b      	str	r3, [r7, #36]	; 0x24
  41827a:	2332      	movs	r3, #50	; 0x32
  41827c:	62bb      	str	r3, [r7, #40]	; 0x28
  41827e:	62fa      	str	r2, [r7, #44]	; 0x2c
    appData.hmac_sha_test_result = times;
  418280:	2203      	movs	r2, #3
  418282:	4b1a      	ldr	r3, [pc, #104]	; (4182ec <.LCFI28+0xa>)
  418284:	61da      	str	r2, [r3, #28]

00418286 <.LVL44>:
  418286:	463c      	mov	r4, r7
  418288:	46ab      	mov	fp, r5
        wc_HmacSetKey(&hmac, SHA, (byte*)keys[i], (word32)strlen(keys[i]));
  41828a:	f04f 0a01 	mov.w	sl, #1
            appData.hmac_sha_test_result--;
  41828e:	4699      	mov	r9, r3
  418290:	e002      	b.n	418298 <.LVL45+0x6>

00418292 <.LVL45>:
  418292:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  418294:	455c      	cmp	r4, fp
  418296:	d022      	beq.n	4182de <.LVL50+0x10>
        wc_HmacSetKey(&hmac, SHA, (byte*)keys[i], (word32)strlen(keys[i]));
  418298:	f855 8b04 	ldr.w	r8, [r5], #4
  41829c:	4640      	mov	r0, r8
  41829e:	f7ff fdaf 	bl	417e00 <strlen>

004182a2 <.LVL46>:
  4182a2:	4603      	mov	r3, r0
  4182a4:	4642      	mov	r2, r8
  4182a6:	4651      	mov	r1, sl
  4182a8:	4630      	mov	r0, r6
  4182aa:	f7fc f885 	bl	4143b8 <.LFE173>

004182ae <.LVL47>:
        wc_HmacUpdate(&hmac, (byte*)test_hmac[i].input,
  4182ae:	68a2      	ldr	r2, [r4, #8]
  4182b0:	6821      	ldr	r1, [r4, #0]
  4182b2:	4630      	mov	r0, r6
  4182b4:	f002 fa2e 	bl	41a714 <.LFE56>

004182b8 <.LVL48>:
        wc_HmacFinal(&hmac, hash);
  4182b8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
  4182bc:	4630      	mov	r0, r6
  4182be:	f7fd faf9 	bl	4158b4 <.LBE56>

004182c2 <.LVL49>:
        if (memcmp(hash, test_hmac[i].output, SHA_DIGEST_SIZE) == 0)
  4182c2:	2214      	movs	r2, #20
  4182c4:	6861      	ldr	r1, [r4, #4]
  4182c6:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  4182ca:	f003 fd1d 	bl	41bd08 <memcmp>

004182ce <.LVL50>:
  4182ce:	2800      	cmp	r0, #0
  4182d0:	d1df      	bne.n	418292 <.LVL45>
            appData.hmac_sha_test_result--;
  4182d2:	f8d9 301c 	ldr.w	r3, [r9, #28]
  4182d6:	3b01      	subs	r3, #1
  4182d8:	f8c9 301c 	str.w	r3, [r9, #28]
  4182dc:	e7d9      	b.n	418292 <.LVL45>
}
  4182de:	3754      	adds	r7, #84	; 0x54

004182e0 <.LCFI27>:
  4182e0:	46bd      	mov	sp, r7

004182e2 <.LCFI28>:
  4182e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4182e6:	bf00      	nop
  4182e8:	0040ab9c 	.word	0x0040ab9c
  4182ec:	2040d534 	.word	0x2040d534

Disassembly of section .text.hmac_sha256_test%127:

004182f0 <hmac_sha256_test>:
{
  4182f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

004182f4 <.LCFI29>:
  4182f4:	b099      	sub	sp, #100	; 0x64

004182f6 <.LCFI30>:
  4182f6:	af00      	add	r7, sp, #0

004182f8 <.LCFI31>:
  4182f8:	f5ad 7d40 	sub.w	sp, sp, #768	; 0x300
  4182fc:	f10d 067f 	add.w	r6, sp, #127	; 0x7f
  418300:	f026 067f 	bic.w	r6, r6, #127	; 0x7f
    const char* keys[]=
  418304:	4b2b      	ldr	r3, [pc, #172]	; (4183b4 <.LCFI33+0x6>)
  418306:	f107 0534 	add.w	r5, r7, #52	; 0x34
  41830a:	f503 629c 	add.w	r2, r3, #1248	; 0x4e0
  41830e:	ca07      	ldmia	r2, {r0, r1, r2}
  418310:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    test_hmac[0] = a;
  418314:	f203 4244 	addw	r2, r3, #1092	; 0x444
  418318:	607a      	str	r2, [r7, #4]
  41831a:	f203 5234 	addw	r2, r3, #1332	; 0x534
  41831e:	60ba      	str	r2, [r7, #8]
  418320:	2208      	movs	r2, #8
  418322:	60fa      	str	r2, [r7, #12]
  418324:	2220      	movs	r2, #32
  418326:	613a      	str	r2, [r7, #16]
    test_hmac[1] = b;
  418328:	f203 4164 	addw	r1, r3, #1124	; 0x464
  41832c:	6179      	str	r1, [r7, #20]
  41832e:	f503 61ab 	add.w	r1, r3, #1368	; 0x558
  418332:	61b9      	str	r1, [r7, #24]
  418334:	211c      	movs	r1, #28
  418336:	61f9      	str	r1, [r7, #28]
  418338:	623a      	str	r2, [r7, #32]
    test_hmac[2] = c;
  41833a:	f503 6193 	add.w	r1, r3, #1176	; 0x498
  41833e:	6279      	str	r1, [r7, #36]	; 0x24
  418340:	f203 537c 	addw	r3, r3, #1404	; 0x57c
  418344:	62bb      	str	r3, [r7, #40]	; 0x28
  418346:	2332      	movs	r3, #50	; 0x32
  418348:	62fb      	str	r3, [r7, #44]	; 0x2c
  41834a:	633a      	str	r2, [r7, #48]	; 0x30
    appData.hmac_sha256_test_result = times;
  41834c:	2203      	movs	r2, #3
  41834e:	4b1a      	ldr	r3, [pc, #104]	; (4183b8 <.LCFI33+0xa>)
  418350:	621a      	str	r2, [r3, #32]

00418352 <.LVL52>:
  418352:	1d3c      	adds	r4, r7, #4
  418354:	46ab      	mov	fp, r5
        wc_HmacSetKey(&hmac, SHA256, (byte*)keys[i], (word32)strlen(keys[i]));
  418356:	f04f 0a02 	mov.w	sl, #2
            appData.hmac_sha256_test_result--;
  41835a:	4699      	mov	r9, r3
  41835c:	e002      	b.n	418364 <.LVL53+0x6>

0041835e <.LVL53>:
  41835e:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  418360:	455c      	cmp	r4, fp
  418362:	d022      	beq.n	4183aa <.LVL58+0x10>
        wc_HmacSetKey(&hmac, SHA256, (byte*)keys[i], (word32)strlen(keys[i]));
  418364:	f855 8b04 	ldr.w	r8, [r5], #4
  418368:	4640      	mov	r0, r8
  41836a:	f7ff fd49 	bl	417e00 <strlen>

0041836e <.LVL54>:
  41836e:	4603      	mov	r3, r0
  418370:	4642      	mov	r2, r8
  418372:	4651      	mov	r1, sl
  418374:	4630      	mov	r0, r6
  418376:	f7fc f81f 	bl	4143b8 <.LFE173>

0041837a <.LVL55>:
        wc_HmacUpdate(&hmac, (byte*)test_hmac[i].input,
  41837a:	68a2      	ldr	r2, [r4, #8]
  41837c:	6821      	ldr	r1, [r4, #0]
  41837e:	4630      	mov	r0, r6
  418380:	f002 f9c8 	bl	41a714 <.LFE56>

00418384 <.LVL56>:
        wc_HmacFinal(&hmac, hash);
  418384:	f107 0140 	add.w	r1, r7, #64	; 0x40
  418388:	4630      	mov	r0, r6
  41838a:	f7fd fa93 	bl	4158b4 <.LBE56>

0041838e <.LVL57>:
        if (memcmp(hash, test_hmac[i].output, SHA256_DIGEST_SIZE) == 0)
  41838e:	2220      	movs	r2, #32
  418390:	6861      	ldr	r1, [r4, #4]
  418392:	f107 0040 	add.w	r0, r7, #64	; 0x40
  418396:	f003 fcb7 	bl	41bd08 <memcmp>

0041839a <.LVL58>:
  41839a:	2800      	cmp	r0, #0
  41839c:	d1df      	bne.n	41835e <.LVL53>
            appData.hmac_sha256_test_result--;
  41839e:	f8d9 3020 	ldr.w	r3, [r9, #32]
  4183a2:	3b01      	subs	r3, #1
  4183a4:	f8c9 3020 	str.w	r3, [r9, #32]
  4183a8:	e7d9      	b.n	41835e <.LVL53>
}
  4183aa:	3764      	adds	r7, #100	; 0x64

004183ac <.LCFI32>:
  4183ac:	46bd      	mov	sp, r7

004183ae <.LCFI33>:
  4183ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4183b2:	bf00      	nop
  4183b4:	0040ab9c 	.word	0x0040ab9c
  4183b8:	2040d534 	.word	0x2040d534

Disassembly of section .text.hmac_sha384_test%128:

004183bc <hmac_sha384_test>:
{
  4183bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

004183c0 <.LCFI34>:
  4183c0:	b09d      	sub	sp, #116	; 0x74

004183c2 <.LCFI35>:
  4183c2:	af00      	add	r7, sp, #0

004183c4 <.LCFI36>:
  4183c4:	f5ad 7d40 	sub.w	sp, sp, #768	; 0x300
  4183c8:	f10d 067f 	add.w	r6, sp, #127	; 0x7f
  4183cc:	f026 067f 	bic.w	r6, r6, #127	; 0x7f
    const char* keys[]=
  4183d0:	4b2b      	ldr	r3, [pc, #172]	; (418480 <.LCFI38+0x6>)
  4183d2:	f107 0534 	add.w	r5, r7, #52	; 0x34
  4183d6:	f503 629c 	add.w	r2, r3, #1248	; 0x4e0
  4183da:	ca07      	ldmia	r2, {r0, r1, r2}
  4183dc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    test_hmac[0] = a;
  4183e0:	f203 4244 	addw	r2, r3, #1092	; 0x444
  4183e4:	607a      	str	r2, [r7, #4]
  4183e6:	f503 62b4 	add.w	r2, r3, #1440	; 0x5a0
  4183ea:	60ba      	str	r2, [r7, #8]
  4183ec:	2208      	movs	r2, #8
  4183ee:	60fa      	str	r2, [r7, #12]
  4183f0:	2230      	movs	r2, #48	; 0x30
  4183f2:	613a      	str	r2, [r7, #16]
    test_hmac[1] = b;
  4183f4:	f203 4164 	addw	r1, r3, #1124	; 0x464
  4183f8:	6179      	str	r1, [r7, #20]
  4183fa:	f203 51d4 	addw	r1, r3, #1492	; 0x5d4
  4183fe:	61b9      	str	r1, [r7, #24]
  418400:	211c      	movs	r1, #28
  418402:	61f9      	str	r1, [r7, #28]
  418404:	623a      	str	r2, [r7, #32]
    test_hmac[2] = c;
  418406:	f503 6193 	add.w	r1, r3, #1176	; 0x498
  41840a:	6279      	str	r1, [r7, #36]	; 0x24
  41840c:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
  418410:	62bb      	str	r3, [r7, #40]	; 0x28
  418412:	2332      	movs	r3, #50	; 0x32
  418414:	62fb      	str	r3, [r7, #44]	; 0x2c
  418416:	633a      	str	r2, [r7, #48]	; 0x30
    appData.hmac_sha384_test_result = times;
  418418:	2203      	movs	r2, #3
  41841a:	4b1a      	ldr	r3, [pc, #104]	; (418484 <.LCFI38+0xa>)
  41841c:	625a      	str	r2, [r3, #36]	; 0x24

0041841e <.LVL60>:
  41841e:	1d3c      	adds	r4, r7, #4
  418420:	46ab      	mov	fp, r5
        wc_HmacSetKey(&hmac, SHA384, (byte*)keys[i], (word32)strlen(keys[i]));
  418422:	f04f 0a05 	mov.w	sl, #5
            appData.hmac_sha384_test_result--;
  418426:	4699      	mov	r9, r3
  418428:	e002      	b.n	418430 <.LVL61+0x6>

0041842a <.LVL61>:
  41842a:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  41842c:	455c      	cmp	r4, fp
  41842e:	d022      	beq.n	418476 <.LVL66+0x10>
        wc_HmacSetKey(&hmac, SHA384, (byte*)keys[i], (word32)strlen(keys[i]));
  418430:	f855 8b04 	ldr.w	r8, [r5], #4
  418434:	4640      	mov	r0, r8
  418436:	f7ff fce3 	bl	417e00 <strlen>

0041843a <.LVL62>:
  41843a:	4603      	mov	r3, r0
  41843c:	4642      	mov	r2, r8
  41843e:	4651      	mov	r1, sl
  418440:	4630      	mov	r0, r6
  418442:	f7fb ffb9 	bl	4143b8 <.LFE173>

00418446 <.LVL63>:
        wc_HmacUpdate(&hmac, (byte*)test_hmac[i].input,
  418446:	68a2      	ldr	r2, [r4, #8]
  418448:	6821      	ldr	r1, [r4, #0]
  41844a:	4630      	mov	r0, r6
  41844c:	f002 f962 	bl	41a714 <.LFE56>

00418450 <.LVL64>:
        wc_HmacFinal(&hmac, hash);
  418450:	f107 0140 	add.w	r1, r7, #64	; 0x40
  418454:	4630      	mov	r0, r6
  418456:	f7fd fa2d 	bl	4158b4 <.LBE56>

0041845a <.LVL65>:
        if (memcmp(hash, test_hmac[i].output, SHA384_DIGEST_SIZE) == 0)
  41845a:	2230      	movs	r2, #48	; 0x30
  41845c:	6861      	ldr	r1, [r4, #4]
  41845e:	f107 0040 	add.w	r0, r7, #64	; 0x40
  418462:	f003 fc51 	bl	41bd08 <memcmp>

00418466 <.LVL66>:
  418466:	2800      	cmp	r0, #0
  418468:	d1df      	bne.n	41842a <.LVL61>
            appData.hmac_sha384_test_result--;
  41846a:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
  41846e:	3b01      	subs	r3, #1
  418470:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
  418474:	e7d9      	b.n	41842a <.LVL61>
}
  418476:	3774      	adds	r7, #116	; 0x74

00418478 <.LCFI37>:
  418478:	46bd      	mov	sp, r7

0041847a <.LCFI38>:
  41847a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41847e:	bf00      	nop
  418480:	0040ab9c 	.word	0x0040ab9c
  418484:	2040d534 	.word	0x2040d534

Disassembly of section .text.wc_AesCbcEncrypt%129:

00418488 <wc_AesCbcEncrypt>:
/* AES-CBC */
#ifdef HAVE_AES_CBC


int wc_AesCbcEncrypt(Aes* aes, byte* out, const byte* in, word32 sz)
{
  418488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041848a <.LCFI8>:
  41848a:	4606      	mov	r6, r0
  41848c:	460f      	mov	r7, r1
  41848e:	4614      	mov	r4, r2
  418490:	461d      	mov	r5, r3
    /* set all the fields needed to set-up the AES engine */
    aes_configuration.lod = 0;
  418492:	4b2d      	ldr	r3, [pc, #180]	; (418548 <.LVL45+0x10>)

00418494 <.LVL28>:
  418494:	2200      	movs	r2, #0

00418496 <.LVL29>:
  418496:	609a      	str	r2, [r3, #8]
    aes_configuration.gtag_en = 0;
  418498:	60da      	str	r2, [r3, #12]
    aes_configuration.processing_delay = 0;
  41849a:	611a      	str	r2, [r3, #16]
    aes_configuration.opmode = AES_CBC_MODE;
  41849c:	2101      	movs	r1, #1

0041849e <.LVL30>:
  41849e:	70d9      	strb	r1, [r3, #3]
    aes_configuration.start_mode = AES_AUTO_START;
  4184a0:	7099      	strb	r1, [r3, #2]
    aes_configuration.cfb_size = AES_CFB_SIZE_128;
  4184a2:	711a      	strb	r2, [r3, #4]
    aes_configuration.encrypt_mode = AES_SAME70_ENCRYPTION;
  4184a4:	7019      	strb	r1, [r3, #0]

    /* keylen is in bytes from call - CMSIS is enum */
    switch (aes->keylen)
  4184a6:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
  4184aa:	2b18      	cmp	r3, #24
  4184ac:	d044      	beq.n	418538 <.LVL45>
  4184ae:	2b20      	cmp	r3, #32
  4184b0:	d046      	beq.n	418540 <.LVL45+0x8>
    {
        default:
        case 16: aes_configuration.key_size = AES_KEY_SIZE_128; break;
  4184b2:	4b25      	ldr	r3, [pc, #148]	; (418548 <.LVL45+0x10>)
  4184b4:	705a      	strb	r2, [r3, #1]

004184b6 <.LBB5>:
    ul_mode |= (p_cfg->key_size << AES_MR_KEYSIZE_Pos);
  4184b6:	4b24      	ldr	r3, [pc, #144]	; (418548 <.LVL45+0x10>)
  4184b8:	785a      	ldrb	r2, [r3, #1]
    ul_mode |= AES_MR_CKEY_PASSWD;
  4184ba:	4b24      	ldr	r3, [pc, #144]	; (41854c <.LVL45+0x14>)
  4184bc:	ea43 2382 	orr.w	r3, r3, r2, lsl #10

004184c0 <.LVL32>:
    AES_REGS->AES_MR = ul_mode;
  4184c0:	4a23      	ldr	r2, [pc, #140]	; (418550 <.LVL45+0x18>)
  4184c2:	6053      	str	r3, [r2, #4]

004184c4 <.LBE5>:
        case 24: aes_configuration.key_size = AES_KEY_SIZE_192; break;
        case 32: aes_configuration.key_size = AES_KEY_SIZE_256; break;
    }

    AesConfigure(&aes_configuration);
    AesWriteKey(aes->key_ce, aes->keylen);
  4184c4:	f8d6 10f4 	ldr.w	r1, [r6, #244]	; 0xf4
  4184c8:	f506 7096 	add.w	r0, r6, #300	; 0x12c

004184cc <.LVL34>:
  4184cc:	f004 fc4e 	bl	41cd6c <.LFE47>

004184d0 <.LVL35>:
    AesWriteIV(aes->iv_ce);
  4184d0:	f506 70a6 	add.w	r0, r6, #332	; 0x14c
  4184d4:	f005 f9fc 	bl	41d8d0 <.LFE3>

004184d8 <.LVL36>:
    /* set up pointers for input and output buffers */
    const uint32_t *inptr = (const uint32_t *)in;
    uint32_t *outptr = (uint32_t *)out;

    uint32_t block;   /* 16 bytes = 4 32bit block size */
    for (block = 0; block < sz; block += 16)
  4184d8:	b335      	cbz	r5, 418528 <.LVL43>
  4184da:	f104 0110 	add.w	r1, r4, #16
  4184de:	f107 0010 	add.w	r0, r7, #16
  4184e2:	2400      	movs	r4, #0

004184e4 <.LVL37>:
    {
        /* Write the data to be ciphered to the input data registers. */
        AES_REGS->AES_IDATAR[0] = *inptr++;
  4184e4:	4a1a      	ldr	r2, [pc, #104]	; (418550 <.LVL45+0x18>)

004184e6 <.LVL38>:
  4184e6:	f851 3c10 	ldr.w	r3, [r1, #-16]
  4184ea:	6413      	str	r3, [r2, #64]	; 0x40

004184ec <.LVL39>:
        AES_REGS->AES_IDATAR[1] = *inptr++;
  4184ec:	f851 3c0c 	ldr.w	r3, [r1, #-12]
  4184f0:	6453      	str	r3, [r2, #68]	; 0x44

004184f2 <.LVL40>:
        AES_REGS->AES_IDATAR[2] = *inptr++;
  4184f2:	f851 3c08 	ldr.w	r3, [r1, #-8]
  4184f6:	6493      	str	r3, [r2, #72]	; 0x48

004184f8 <.LVL41>:
        AES_REGS->AES_IDATAR[3] = *inptr++;
  4184f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
  4184fc:	64d3      	str	r3, [r2, #76]	; 0x4c

        /* Note the blocking here - state machine this? */
        while (!(AES_REGS->AES_ISR & AES_ISR_DATRDY_Msk))  ;
  4184fe:	69d3      	ldr	r3, [r2, #28]
  418500:	f013 0f01 	tst.w	r3, #1
  418504:	d0fb      	beq.n	4184fe <.LVL41+0x6>

        /* encrypt complete - read out the data */
        *outptr++ = AES_REGS->AES_ODATAR[0];
  418506:	6d13      	ldr	r3, [r2, #80]	; 0x50
  418508:	f840 3c10 	str.w	r3, [r0, #-16]
        *outptr++ = AES_REGS->AES_ODATAR[1];
  41850c:	6d53      	ldr	r3, [r2, #84]	; 0x54
  41850e:	f840 3c0c 	str.w	r3, [r0, #-12]
        *outptr++ = AES_REGS->AES_ODATAR[2];
  418512:	6d93      	ldr	r3, [r2, #88]	; 0x58
  418514:	f840 3c08 	str.w	r3, [r0, #-8]
        *outptr++ = AES_REGS->AES_ODATAR[3];
  418518:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
  41851a:	f840 3c04 	str.w	r3, [r0, #-4]
    for (block = 0; block < sz; block += 16)
  41851e:	3410      	adds	r4, #16

00418520 <.LVL42>:
  418520:	3110      	adds	r1, #16
  418522:	3010      	adds	r0, #16
  418524:	42a5      	cmp	r5, r4
  418526:	d8de      	bhi.n	4184e6 <.LVL38>

00418528 <.LVL43>:
    }

    /* Last IV equals last cipher text */
    wc_AesSetIV(aes, out + sz - 16);
  418528:	f1a5 0110 	sub.w	r1, r5, #16
  41852c:	4439      	add	r1, r7
  41852e:	4630      	mov	r0, r6
  418530:	f004 fb72 	bl	41cc18 <.LFE148>

00418534 <.LVL44>:

    return 0;
}
  418534:	2000      	movs	r0, #0
  418536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00418538 <.LVL45>:
        case 24: aes_configuration.key_size = AES_KEY_SIZE_192; break;
  418538:	2201      	movs	r2, #1
  41853a:	4b03      	ldr	r3, [pc, #12]	; (418548 <.LVL45+0x10>)
  41853c:	705a      	strb	r2, [r3, #1]
  41853e:	e7ba      	b.n	4184b6 <.LBB5>
        case 32: aes_configuration.key_size = AES_KEY_SIZE_256; break;
  418540:	2202      	movs	r2, #2
  418542:	4b01      	ldr	r3, [pc, #4]	; (418548 <.LVL45+0x10>)
  418544:	705a      	strb	r2, [r3, #1]
  418546:	e7b6      	b.n	4184b6 <.LBB5>
  418548:	2040d718 	.word	0x2040d718
  41854c:	00e01101 	.word	0x00e01101
  418550:	4006c000 	.word	0x4006c000

Disassembly of section .text.SYS_TIME_PLIBCallback%130:

00418554 <SYS_TIME_PLIBCallback>:
        }
    }
}

static void SYS_TIME_PLIBCallback(uintptr_t context)
{
  418554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

00418558 <.LCFI23>:
    SYS_TIME_COUNTER_OBJ* counterObj = (SYS_TIME_COUNTER_OBJ *)&gSystemCounterObj;
    SYS_TIME_TIMER_OBJ* tmrActive = counterObj->tmrActive;
  418558:	4c2f      	ldr	r4, [pc, #188]	; (418618 <.LVL234>)
  41855a:	6b25      	ldr	r5, [r4, #48]	; 0x30

0041855c <.LVL210>:
    uint32_t elapsedCount = 0;
    bool interruptState;

    counterObj->hwTimerCurrentValue = counterObj->timePlib->timerCounterGet();
  41855c:	6863      	ldr	r3, [r4, #4]
  41855e:	699b      	ldr	r3, [r3, #24]
  418560:	4798      	blx	r3

00418562 <.LVL211>:
  418562:	6160      	str	r0, [r4, #20]

    elapsedCount = SYS_TIME_GetElapsedCount(counterObj->hwTimerCurrentValue);
  418564:	f005 f9d8 	bl	41d918 <.LFE172>

00418568 <.LVL212>:
  418568:	4606      	mov	r6, r0

0041856a <.LVL213>:

    if (tmrActive != NULL)
  41856a:	2d00      	cmp	r5, #0
  41856c:	d047      	beq.n	4185fe <.LVL228>
    {
        counterObj->interruptNestingCount++;
  41856e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  418572:	3301      	adds	r3, #1
  418574:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

00418578 <.LBB49>:
    SYS_TIME_UpdateTimerList(elapsedCounts);
  418578:	f004 fdde 	bl	41d138 <.LFE20>

0041857c <.LBB51>:
    SYS_TIME_TIMER_OBJ* tmrActive = counterObj->tmrActive;
  41857c:	6b24      	ldr	r4, [r4, #48]	; 0x30

0041857e <.LVL216>:
    while (tmrActive != NULL)
  41857e:	b134      	cbz	r4, 41858e <.LVL218>
        if(tmrActive->relativeTimePending == 0)
  418580:	68a3      	ldr	r3, [r4, #8]
  418582:	b923      	cbnz	r3, 41858e <.LVL218>
            tmrActive->tmrElapsedFlag = true;
  418584:	2501      	movs	r5, #1

00418586 <.LVL217>:
                    tmrActive->active = false;
  418586:	f04f 0800 	mov.w	r8, #0
            tmrActive = counterObj->tmrActive;
  41858a:	4f23      	ldr	r7, [pc, #140]	; (418618 <.LVL234>)
  41858c:	e011      	b.n	4185b2 <.LVL221+0x14>

0041858e <.LVL218>:
  41858e:	4c23      	ldr	r4, [pc, #140]	; (41861c <.LVL234+0x4>)

00418590 <.LVL219>:
  418590:	f504 75a0 	add.w	r5, r4, #320	; 0x140

00418594 <.LBB54>:
            timers[i].tmrElapsed = false;
  418594:	2700      	movs	r7, #0
  418596:	e01f      	b.n	4185d8 <.LBB56+0x4>

00418598 <.LBB55>:
                SYS_TIME_TimerDestroy(tmrActive->tmrHandle);
  418598:	69e0      	ldr	r0, [r4, #28]
  41859a:	f004 fae3 	bl	41cb64 <.LFE158>

0041859e <.LVL221>:
            if(tmrActive->callback != NULL)
  41859e:	68e3      	ldr	r3, [r4, #12]
  4185a0:	b10b      	cbz	r3, 4185a6 <.LVL221+0x8>
                tmrActive->callback(tmrActive->context);
  4185a2:	6920      	ldr	r0, [r4, #16]
  4185a4:	4798      	blx	r3
            tmrActive = counterObj->tmrActive;
  4185a6:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    while (tmrActive != NULL)
  4185a8:	2c00      	cmp	r4, #0
  4185aa:	d0f0      	beq.n	41858e <.LVL218>
        if(tmrActive->relativeTimePending == 0)
  4185ac:	68a3      	ldr	r3, [r4, #8]
  4185ae:	2b00      	cmp	r3, #0
  4185b0:	d1ed      	bne.n	41858e <.LVL218>
            tmrActive->tmrElapsedFlag = true;
  4185b2:	7525      	strb	r5, [r4, #20]
            tmrActive->tmrElapsed = true;
  4185b4:	7565      	strb	r5, [r4, #21]
            if ((tmrActive->type == SYS_TIME_SINGLE) && (tmrActive->callback != NULL))
  4185b6:	78a3      	ldrb	r3, [r4, #2]
  4185b8:	b913      	cbnz	r3, 4185c0 <.LVL221+0x22>
  4185ba:	68e3      	ldr	r3, [r4, #12]
  4185bc:	2b00      	cmp	r3, #0
  4185be:	d1eb      	bne.n	418598 <.LBB55>
                SYS_TIME_RemoveFromList(tmrActive);
  4185c0:	4620      	mov	r0, r4
  4185c2:	f003 fded 	bl	41c1a0 <SYS_TIME_RemoveFromList>

004185c6 <.LVL224>:
                if (tmrActive->type == SYS_TIME_SINGLE)
  4185c6:	78a3      	ldrb	r3, [r4, #2]
  4185c8:	2b00      	cmp	r3, #0
  4185ca:	d1e8      	bne.n	41859e <.LVL221>
                    tmrActive->active = false;
  4185cc:	f884 8001 	strb.w	r8, [r4, #1]
  4185d0:	e7e5      	b.n	41859e <.LVL221>

004185d2 <.LVL225>:
  4185d2:	3420      	adds	r4, #32

004185d4 <.LBB56>:
    for (uint8_t i = 0; i < SYS_TIME_MAX_TIMERS; i++)
  4185d4:	42ac      	cmp	r4, r5
  4185d6:	d00c      	beq.n	4185f2 <.LBE49>
  4185d8:	4620      	mov	r0, r4
        if (timers[i].tmrElapsed == true)
  4185da:	7d63      	ldrb	r3, [r4, #21]
  4185dc:	2b00      	cmp	r3, #0
  4185de:	d0f8      	beq.n	4185d2 <.LVL225>
            timers[i].tmrElapsed = false;
  4185e0:	7567      	strb	r7, [r4, #21]
            if (timers[i].type == SYS_TIME_PERIODIC)
  4185e2:	78a3      	ldrb	r3, [r4, #2]
  4185e4:	2b01      	cmp	r3, #1
  4185e6:	d1f4      	bne.n	4185d2 <.LVL225>
                timers[i].relativeTimePending = timers[i].requestedTime;
  4185e8:	6863      	ldr	r3, [r4, #4]
  4185ea:	60a3      	str	r3, [r4, #8]
                SYS_TIME_AddToList(&timers[i]);
  4185ec:	f001 fcbc 	bl	419f68 <.LFE163>

004185f0 <.LVL226>:
  4185f0:	e7ef      	b.n	4185d2 <.LVL225>

004185f2 <.LBE49>:

        SYS_TIME_UpdateTime(elapsedCount);

        counterObj->interruptNestingCount--;
  4185f2:	4a09      	ldr	r2, [pc, #36]	; (418618 <.LVL234>)
  4185f4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
  4185f8:	3b01      	subs	r3, #1
  4185fa:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c

004185fe <.LVL228>:
    }
    SYS_TIME_Counter64Update(elapsedCount);
  4185fe:	4630      	mov	r0, r6
  418600:	f005 f85e 	bl	41d6c0 <.LFE164>

00418604 <.LVL229>:

    interruptState = SYS_INT_Disable();
  418604:	f005 fa10 	bl	41da28 <SYS_INT_Disable>

00418608 <.LVL230>:
  418608:	4604      	mov	r4, r0

0041860a <.LVL231>:
    SYS_TIME_HwTimerCompareUpdate();
  41860a:	f002 f8c5 	bl	41a798 <.LFE181>

0041860e <.LVL232>:
    SYS_INT_Restore(interruptState);
  41860e:	4620      	mov	r0, r4
  418610:	f005 fa13 	bl	41da3a <.LFE142>

00418614 <.LVL233>:
  418614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00418618 <.LVL234>:
  418618:	2040d624 	.word	0x2040d624
  41861c:	2040d3f4 	.word	0x2040d3f4

Disassembly of section .text.hmac_sha512_test%131:

00418620 <hmac_sha512_test>:
{
  418620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00418624 <.LCFI39>:
  418624:	b0a1      	sub	sp, #132	; 0x84

00418626 <.LCFI40>:
  418626:	af00      	add	r7, sp, #0

00418628 <.LCFI41>:
  418628:	f5ad 7d40 	sub.w	sp, sp, #768	; 0x300
  41862c:	f10d 067f 	add.w	r6, sp, #127	; 0x7f
  418630:	f026 067f 	bic.w	r6, r6, #127	; 0x7f
    const char* keys[]=
  418634:	4b2a      	ldr	r3, [pc, #168]	; (4186e0 <.LCFI43+0x4>)
  418636:	f107 0534 	add.w	r5, r7, #52	; 0x34
  41863a:	f503 629c 	add.w	r2, r3, #1248	; 0x4e0
  41863e:	ca07      	ldmia	r2, {r0, r1, r2}
  418640:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    test_hmac[0] = a;
  418644:	f203 4244 	addw	r2, r3, #1092	; 0x444
  418648:	607a      	str	r2, [r7, #4]
  41864a:	f203 623c 	addw	r2, r3, #1596	; 0x63c
  41864e:	60ba      	str	r2, [r7, #8]
  418650:	2208      	movs	r2, #8
  418652:	60fa      	str	r2, [r7, #12]
  418654:	2240      	movs	r2, #64	; 0x40
  418656:	613a      	str	r2, [r7, #16]
    test_hmac[1] = b;
  418658:	f203 4164 	addw	r1, r3, #1124	; 0x464
  41865c:	6179      	str	r1, [r7, #20]
  41865e:	f503 61d0 	add.w	r1, r3, #1664	; 0x680
  418662:	61b9      	str	r1, [r7, #24]
  418664:	211c      	movs	r1, #28
  418666:	61f9      	str	r1, [r7, #28]
  418668:	623a      	str	r2, [r7, #32]
    test_hmac[2] = c;
  41866a:	f503 6193 	add.w	r1, r3, #1176	; 0x498
  41866e:	6279      	str	r1, [r7, #36]	; 0x24
  418670:	f203 63c4 	addw	r3, r3, #1732	; 0x6c4
  418674:	62bb      	str	r3, [r7, #40]	; 0x28
  418676:	2332      	movs	r3, #50	; 0x32
  418678:	62fb      	str	r3, [r7, #44]	; 0x2c
  41867a:	633a      	str	r2, [r7, #48]	; 0x30
    appData.hmac_sha512_test_result = times;
  41867c:	2203      	movs	r2, #3
  41867e:	4b19      	ldr	r3, [pc, #100]	; (4186e4 <.LCFI43+0x8>)
  418680:	629a      	str	r2, [r3, #40]	; 0x28

00418682 <.LVL68>:
  418682:	1d3c      	adds	r4, r7, #4
  418684:	46ab      	mov	fp, r5
        wc_HmacSetKey(&hmac, SHA512, (byte*)keys[i], (word32)strlen(keys[i]));
  418686:	f04f 0a04 	mov.w	sl, #4
            appData.hmac_sha512_test_result--;
  41868a:	4699      	mov	r9, r3
  41868c:	e002      	b.n	418694 <.LVL69+0x6>

0041868e <.LVL69>:
  41868e:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  418690:	455c      	cmp	r4, fp
  418692:	d021      	beq.n	4186d8 <.LVL74+0x10>
        wc_HmacSetKey(&hmac, SHA512, (byte*)keys[i], (word32)strlen(keys[i]));
  418694:	f855 8b04 	ldr.w	r8, [r5], #4
  418698:	4640      	mov	r0, r8
  41869a:	f7ff fbb1 	bl	417e00 <strlen>

0041869e <.LVL70>:
  41869e:	4603      	mov	r3, r0
  4186a0:	4642      	mov	r2, r8
  4186a2:	4651      	mov	r1, sl
  4186a4:	4630      	mov	r0, r6
  4186a6:	f7fb fe87 	bl	4143b8 <.LFE173>

004186aa <.LVL71>:
        wc_HmacUpdate(&hmac, (byte*)test_hmac[i].input,
  4186aa:	68a2      	ldr	r2, [r4, #8]
  4186ac:	6821      	ldr	r1, [r4, #0]
  4186ae:	4630      	mov	r0, r6
  4186b0:	f002 f830 	bl	41a714 <.LFE56>

004186b4 <.LVL72>:
        wc_HmacFinal(&hmac, hash);
  4186b4:	f107 0140 	add.w	r1, r7, #64	; 0x40
  4186b8:	4630      	mov	r0, r6
  4186ba:	f7fd f8fb 	bl	4158b4 <.LBE56>

004186be <.LVL73>:
        if (memcmp(hash, test_hmac[i].output, SHA512_DIGEST_SIZE) == 0)
  4186be:	2240      	movs	r2, #64	; 0x40
  4186c0:	6861      	ldr	r1, [r4, #4]
  4186c2:	18b8      	adds	r0, r7, r2
  4186c4:	f003 fb20 	bl	41bd08 <memcmp>

004186c8 <.LVL74>:
  4186c8:	2800      	cmp	r0, #0
  4186ca:	d1e0      	bne.n	41868e <.LVL69>
            appData.hmac_sha512_test_result--;
  4186cc:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
  4186d0:	3b01      	subs	r3, #1
  4186d2:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
  4186d6:	e7da      	b.n	41868e <.LVL69>
}
  4186d8:	3784      	adds	r7, #132	; 0x84

004186da <.LCFI42>:
  4186da:	46bd      	mov	sp, r7

004186dc <.LCFI43>:
  4186dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4186e0:	0040ab9c 	.word	0x0040ab9c
  4186e4:	2040d534 	.word	0x2040d534

Disassembly of section .text.Sha1Process%132:

004186e8 <Sha1Process>:
}



static int32_t Sha1Process(Sha *sha, const uint8_t *input, word32 length)
{
  4186e8:	b410      	push	{r4}

004186ea <.LCFI0>:
	ICM_REGS->ICM_CTRL = ICM_CTRL_SWRST(1);
  4186ea:	2404      	movs	r4, #4
  4186ec:	4b2e      	ldr	r3, [pc, #184]	; (4187a8 <.LCFI1+0x2>)
  4186ee:	605c      	str	r4, [r3, #4]
    sha->icm_descriptor.start_addr = (uint32_t)input;
  4186f0:	6001      	str	r1, [r0, #0]

    /* Transfer size = (tran_size + 1) * 512bits */
    sha->icm_descriptor.tran_size =  (length >> 6) - 1;
  4186f2:	0994      	lsrs	r4, r2, #6
  4186f4:	3c01      	subs	r4, #1
  4186f6:	6084      	str	r4, [r0, #8]

004186f8 <.LBB50>:
  __ASM volatile ("dsb 0xF":::"memory");
  4186f8:	f3bf 8f4f 	dsb	sy

004186fc <.LBE52>:
      SCB->DCCMVAC = op_addr;
  4186fc:	4c2b      	ldr	r4, [pc, #172]	; (4187ac <.LCFI1+0x6>)
  4186fe:	f8c4 0268 	str.w	r0, [r4, #616]	; 0x268

00418702 <.LBB54>:
  418702:	f3bf 8f4f 	dsb	sy

00418706 <.LBB56>:
  __ASM volatile ("isb 0xF":::"memory");
  418706:	f3bf 8f6f 	isb	sy

0041870a <.LBB58>:
  __ASM volatile ("dsb 0xF":::"memory");
  41870a:	f3bf 8f4f 	dsb	sy

0041870e <.LBE60>:
    while (op_size > 0) {
  41870e:	2a00      	cmp	r2, #0
  418710:	dd0b      	ble.n	41872a <.LBB62>
  418712:	460b      	mov	r3, r1
  418714:	3a01      	subs	r2, #1

00418716 <.LVL4>:
  418716:	f022 021f 	bic.w	r2, r2, #31

0041871a <.LVL5>:
  41871a:	3220      	adds	r2, #32
  41871c:	4411      	add	r1, r2

0041871e <.LVL6>:
      SCB->DCCMVAC = op_addr;
  41871e:	4622      	mov	r2, r4

00418720 <.LVL7>:
  418720:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
  418724:	3320      	adds	r3, #32
    while (op_size > 0) {
  418726:	4299      	cmp	r1, r3
  418728:	d1fa      	bne.n	418720 <.LVL7>

0041872a <.LBB62>:
  41872a:	f3bf 8f4f 	dsb	sy

0041872e <.LBB64>:
  __ASM volatile ("isb 0xF":::"memory");
  41872e:	f3bf 8f6f 	isb	sy

00418732 <.LBE58>:

    SCB_CleanDCache_by_Addr((uint32_t *)(&(sha->icm_descriptor)), sizeof(struct icm_descriptor));
    SCB_CleanDCache_by_Addr((uint32_t *)input, length);
    SCB_CleanInvalidateDCache_by_Addr((uint32_t *)&(sha->digest), SHA_DIGEST_SIZE);
  418732:	f100 0180 	add.w	r1, r0, #128	; 0x80

00418736 <.LBB66>:
  __ASM volatile ("dsb 0xF":::"memory");
  418736:	f3bf 8f4f 	dsb	sy

0041873a <.LBE68>:
      SCB->DCCIMVAC = op_addr;
  41873a:	4b1c      	ldr	r3, [pc, #112]	; (4187ac <.LCFI1+0x6>)
  41873c:	f8c3 1270 	str.w	r1, [r3, #624]	; 0x270

00418740 <.LBB70>:
  418740:	f3bf 8f4f 	dsb	sy

00418744 <.LBB72>:
  __ASM volatile ("isb 0xF":::"memory");
  418744:	f3bf 8f6f 	isb	sy

00418748 <.LBE66>:

    /* ICM can set up FIPS default starting digest */
    ICM_REGS->ICM_DSCR = (uint32_t)&sha->icm_descriptor;
  418748:	4b17      	ldr	r3, [pc, #92]	; (4187a8 <.LCFI1+0x2>)
  41874a:	6318      	str	r0, [r3, #48]	; 0x30


    /* configured so initial hash digest is auto-loaded */
    ICM_REGS->ICM_CFG = ICM_CFG_SLBDIS(1)
  41874c:	f241 0204 	movw	r2, #4100	; 0x1004
  418750:	601a      	str	r2, [r3, #0]
                 | ICM_CFG_BBC(0)
                 | ICM_CFG_UALGO_SHA1
                 | ICM_CFG_UIHASH_Msk;

    /* digest must be 128 aligned */
	ICM_REGS->ICM_HASH = (uint32_t)(&(sha->digest));
  418752:	6359      	str	r1, [r3, #52]	; 0x34
    ICM_REGS->ICM_UIHVAL[0] = sha->digest[0];
  418754:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  418758:	639a      	str	r2, [r3, #56]	; 0x38
    ICM_REGS->ICM_UIHVAL[1] = sha->digest[1];
  41875a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
  41875e:	63da      	str	r2, [r3, #60]	; 0x3c
    ICM_REGS->ICM_UIHVAL[2] = sha->digest[2];
  418760:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
  418764:	641a      	str	r2, [r3, #64]	; 0x40
    ICM_REGS->ICM_UIHVAL[3] = sha->digest[3];
  418766:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
  41876a:	645a      	str	r2, [r3, #68]	; 0x44
    ICM_REGS->ICM_UIHVAL[4] = sha->digest[4];
  41876c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
  418770:	649a      	str	r2, [r3, #72]	; 0x48

00418772 <.LBB74>:
  __ASM volatile ("dmb 0xF":::"memory");
  418772:	f3bf 8f5f 	dmb	sy

00418776 <.LBE74>:

    /* memory barrier */
    __DMB();

    /* enable the ICM and wait ICM CTRL is write only - don't OR it */
    ICM_REGS->ICM_CTRL = ICM_CTRL_ENABLE(1);
  418776:	2201      	movs	r2, #1
  418778:	605a      	str	r2, [r3, #4]
    while (!(ICM_REGS->ICM_ISR & ICM_ISR_RHC_Msk))
  41877a:	461a      	mov	r2, r3
  41877c:	69d3      	ldr	r3, [r2, #28]
  41877e:	f013 0f0f 	tst.w	r3, #15
  418782:	d0fb      	beq.n	41877c <.LBE74+0x6>
    {
        /* wait - when finished digest will be updated */
    }
    ICM_REGS->ICM_CTRL = ICM_CTRL_DISABLE(1);
  418784:	4b08      	ldr	r3, [pc, #32]	; (4187a8 <.LCFI1+0x2>)
  418786:	2202      	movs	r2, #2
  418788:	605a      	str	r2, [r3, #4]
    ICM_REGS->ICM_CTRL = ICM_CTRL_SWRST(1);
  41878a:	2204      	movs	r2, #4
  41878c:	605a      	str	r2, [r3, #4]

0041878e <.LBB76>:
  __ASM volatile ("dsb 0xF":::"memory");
  41878e:	f3bf 8f4f 	dsb	sy

00418792 <.LBE78>:
  418792:	4b06      	ldr	r3, [pc, #24]	; (4187ac <.LCFI1+0x6>)
  418794:	f8c3 1270 	str.w	r1, [r3, #624]	; 0x270

00418798 <.LBB80>:
  418798:	f3bf 8f4f 	dsb	sy

0041879c <.LBB82>:
  __ASM volatile ("isb 0xF":::"memory");
  41879c:	f3bf 8f6f 	isb	sy

004187a0 <.LBE76>:

    SCB_CleanInvalidateDCache_by_Addr((uint32_t *)&(sha->digest), SHA_DIGEST_SIZE);

    return 0;
}
  4187a0:	2000      	movs	r0, #0

004187a2 <.LVL17>:
  4187a2:	f85d 4b04 	ldr.w	r4, [sp], #4

004187a6 <.LCFI1>:
  4187a6:	4770      	bx	lr
  4187a8:	40048000 	.word	0x40048000
  4187ac:	e000ed00 	.word	0xe000ed00

Disassembly of section .text.memmove%133:

004187b0 <memmove>:
  4187b0:	4288      	cmp	r0, r1
  4187b2:	b5f0      	push	{r4, r5, r6, r7, lr}

004187b4 <.LCFI0>:
  4187b4:	d90d      	bls.n	4187d2 <.LVL6>
  4187b6:	188b      	adds	r3, r1, r2
  4187b8:	4298      	cmp	r0, r3
  4187ba:	d20a      	bcs.n	4187d2 <.LVL6>

004187bc <.LVL1>:
  4187bc:	1884      	adds	r4, r0, r2

004187be <.LVL2>:
  4187be:	2a00      	cmp	r2, #0
  4187c0:	d051      	beq.n	418866 <.LVL26>
  4187c2:	4622      	mov	r2, r4

004187c4 <.LVL3>:
  4187c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!

004187c8 <.LVL4>:
  4187c8:	f802 4d01 	strb.w	r4, [r2, #-1]!

004187cc <.LVL5>:
  4187cc:	4299      	cmp	r1, r3
  4187ce:	d1f9      	bne.n	4187c4 <.LVL3>
  4187d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

004187d2 <.LVL6>:
  4187d2:	2a0f      	cmp	r2, #15
  4187d4:	d948      	bls.n	418868 <.LVL27>
  4187d6:	ea41 0300 	orr.w	r3, r1, r0
  4187da:	079b      	lsls	r3, r3, #30
  4187dc:	d146      	bne.n	41886c <.LVL27+0x4>
  4187de:	f100 0410 	add.w	r4, r0, #16
  4187e2:	f101 0310 	add.w	r3, r1, #16
  4187e6:	4615      	mov	r5, r2

004187e8 <.LVL7>:
  4187e8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4187ec:	f844 6c10 	str.w	r6, [r4, #-16]

004187f0 <.LVL8>:
  4187f0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4187f4:	f844 6c0c 	str.w	r6, [r4, #-12]

004187f8 <.LVL9>:
  4187f8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4187fc:	f844 6c08 	str.w	r6, [r4, #-8]

00418800 <.LVL10>:
  418800:	3d10      	subs	r5, #16
  418802:	f853 6c04 	ldr.w	r6, [r3, #-4]
  418806:	f844 6c04 	str.w	r6, [r4, #-4]
  41880a:	2d0f      	cmp	r5, #15
  41880c:	f103 0310 	add.w	r3, r3, #16

00418810 <.LVL12>:
  418810:	f104 0410 	add.w	r4, r4, #16
  418814:	d8e8      	bhi.n	4187e8 <.LVL7>
  418816:	f1a2 0310 	sub.w	r3, r2, #16

0041881a <.LVL13>:
  41881a:	f023 030f 	bic.w	r3, r3, #15
  41881e:	f002 0e0f 	and.w	lr, r2, #15
  418822:	3310      	adds	r3, #16
  418824:	f1be 0f03 	cmp.w	lr, #3
  418828:	4419      	add	r1, r3

0041882a <.LVL14>:
  41882a:	4403      	add	r3, r0

0041882c <.LVL15>:
  41882c:	d921      	bls.n	418872 <.LVL29>
  41882e:	1f1e      	subs	r6, r3, #4
  418830:	460d      	mov	r5, r1
  418832:	4674      	mov	r4, lr

00418834 <.LVL16>:
  418834:	3c04      	subs	r4, #4

00418836 <.LVL17>:
  418836:	f855 7b04 	ldr.w	r7, [r5], #4

0041883a <.LVL18>:
  41883a:	f846 7f04 	str.w	r7, [r6, #4]!
  41883e:	2c03      	cmp	r4, #3
  418840:	d8f8      	bhi.n	418834 <.LVL16>
  418842:	f1ae 0404 	sub.w	r4, lr, #4

00418846 <.LVL19>:
  418846:	f024 0403 	bic.w	r4, r4, #3
  41884a:	3404      	adds	r4, #4
  41884c:	4421      	add	r1, r4
  41884e:	4423      	add	r3, r4
  418850:	f002 0203 	and.w	r2, r2, #3

00418854 <.LVL20>:
  418854:	b162      	cbz	r2, 418870 <.LVL28>

00418856 <.LVL21>:
  418856:	3b01      	subs	r3, #1

00418858 <.LVL22>:
  418858:	440a      	add	r2, r1

0041885a <.LVL23>:
  41885a:	f811 4b01 	ldrb.w	r4, [r1], #1

0041885e <.LVL24>:
  41885e:	f803 4f01 	strb.w	r4, [r3, #1]!

00418862 <.LVL25>:
  418862:	428a      	cmp	r2, r1
  418864:	d1f9      	bne.n	41885a <.LVL23>

00418866 <.LVL26>:
  418866:	bdf0      	pop	{r4, r5, r6, r7, pc}

00418868 <.LVL27>:
  418868:	4603      	mov	r3, r0
  41886a:	e7f3      	b.n	418854 <.LVL20>
  41886c:	4603      	mov	r3, r0
  41886e:	e7f2      	b.n	418856 <.LVL21>

00418870 <.LVL28>:
  418870:	bdf0      	pop	{r4, r5, r6, r7, pc}

00418872 <.LVL29>:
  418872:	4672      	mov	r2, lr
  418874:	e7ee      	b.n	418854 <.LVL20>

00418876 <.LFE17>:
  418876:	bf00      	nop

Disassembly of section .rodata.__mprec_tens%134:

00418878 <__mprec_tens>:
  418878:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  418888:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  418898:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  4188a8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  4188b8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  4188c8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  4188d8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  4188e8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  4188f8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  418908:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  418918:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  418928:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  418938:	9db4 79d9 7843 44ea                         ...yCx.D

Disassembly of section .text.des_test%135:

00418940 <des_test>:
{
  418940:	b570      	push	{r4, r5, r6, lr}

00418942 <.LCFI60>:
  418942:	b0e4      	sub	sp, #400	; 0x190

00418944 <.LCFI61>:
    const byte exp_pt[] = { /* "now is the time for all " w/o trailing 0 */
  418944:	4c2d      	ldr	r4, [pc, #180]	; (4189fc <.LCFI62+0x2>)
  418946:	ad5e      	add	r5, sp, #376	; 0x178
  418948:	f8d4 07f0 	ldr.w	r0, [r4, #2032]	; 0x7f0
  41894c:	f8d4 17f4 	ldr.w	r1, [r4, #2036]	; 0x7f4
  418950:	f8d4 27f8 	ldr.w	r2, [r4, #2040]	; 0x7f8
  418954:	f8d4 37fc 	ldr.w	r3, [r4, #2044]	; 0x7fc
  418958:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  41895a:	f8d4 0800 	ldr.w	r0, [r4, #2048]	; 0x800
  41895e:	f8d4 1804 	ldr.w	r1, [r4, #2052]	; 0x804
  418962:	c503      	stmia	r5!, {r0, r1}
    const byte key[] =
  418964:	ab08      	add	r3, sp, #32
  418966:	f8d4 0808 	ldr.w	r0, [r4, #2056]	; 0x808
  41896a:	f8d4 180c 	ldr.w	r1, [r4, #2060]	; 0x80c
  41896e:	c303      	stmia	r3!, {r0, r1}
    const byte iv[] =
  418970:	ab06      	add	r3, sp, #24
  418972:	f8d4 0810 	ldr.w	r0, [r4, #2064]	; 0x810
  418976:	f8d4 1814 	ldr.w	r1, [r4, #2068]	; 0x814
  41897a:	c303      	stmia	r3!, {r0, r1}
    const byte exp_ct[] =
  41897c:	466d      	mov	r5, sp
  41897e:	f8d4 0818 	ldr.w	r0, [r4, #2072]	; 0x818
  418982:	f8d4 181c 	ldr.w	r1, [r4, #2076]	; 0x81c
  418986:	f8d4 2820 	ldr.w	r2, [r4, #2080]	; 0x820
  41898a:	f8d4 3824 	ldr.w	r3, [r4, #2084]	; 0x824
  41898e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  418990:	f8d4 0828 	ldr.w	r0, [r4, #2088]	; 0x828
  418994:	f8d4 182c 	ldr.w	r1, [r4, #2092]	; 0x82c
  418998:	c503      	stmia	r5!, {r0, r1}
    appData.des_test_result = numSubTests;
  41899a:	2202      	movs	r2, #2
  41899c:	4b18      	ldr	r3, [pc, #96]	; (418a00 <.LCFI62+0x6>)
  41899e:	62da      	str	r2, [r3, #44]	; 0x2c
    wc_Des_SetKey(&enc, key, iv, DES_ENCRYPTION);
  4189a0:	2300      	movs	r3, #0
  4189a2:	aa06      	add	r2, sp, #24
  4189a4:	a908      	add	r1, sp, #32
  4189a6:	a82e      	add	r0, sp, #184	; 0xb8
  4189a8:	f004 fe43 	bl	41d632 <.LFE11>

004189ac <.LVL139>:
    wc_Des_CbcEncrypt(&enc, gen_ct, exp_pt, sizeof(exp_pt));
  4189ac:	2318      	movs	r3, #24
  4189ae:	aa5e      	add	r2, sp, #376	; 0x178
  4189b0:	a952      	add	r1, sp, #328	; 0x148
  4189b2:	a82e      	add	r0, sp, #184	; 0xb8
  4189b4:	f002 f936 	bl	41ac24 <.LFE19>

004189b8 <.LVL140>:
    wc_Des_SetKey(&dec, key, iv, DES_DECRYPTION);
  4189b8:	2301      	movs	r3, #1
  4189ba:	aa06      	add	r2, sp, #24
  4189bc:	a908      	add	r1, sp, #32
  4189be:	a80a      	add	r0, sp, #40	; 0x28
  4189c0:	f004 fe37 	bl	41d632 <.LFE11>

004189c4 <.LVL141>:
    wc_Des_CbcDecrypt(&dec, gen_pt, exp_ct, sizeof(exp_ct));
  4189c4:	2318      	movs	r3, #24
  4189c6:	466a      	mov	r2, sp
  4189c8:	a958      	add	r1, sp, #352	; 0x160
  4189ca:	a80a      	add	r0, sp, #40	; 0x28
  4189cc:	f001 fd0c 	bl	41a3e8 <.LFE149>

004189d0 <.LVL142>:
    if (!(memcmp(gen_pt, exp_pt, sizeof(gen_pt))))
  4189d0:	2218      	movs	r2, #24
  4189d2:	a95e      	add	r1, sp, #376	; 0x178
  4189d4:	a858      	add	r0, sp, #352	; 0x160
  4189d6:	f003 f997 	bl	41bd08 <memcmp>

004189da <.LVL143>:
  4189da:	b918      	cbnz	r0, 4189e4 <.LVL143+0xa>
        appData.des_test_result--;
  4189dc:	4a08      	ldr	r2, [pc, #32]	; (418a00 <.LCFI62+0x6>)
  4189de:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  4189e0:	3b01      	subs	r3, #1
  4189e2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (!(memcmp(gen_ct, exp_ct, sizeof(gen_ct))))
  4189e4:	2218      	movs	r2, #24
  4189e6:	4669      	mov	r1, sp
  4189e8:	a852      	add	r0, sp, #328	; 0x148
  4189ea:	f003 f98d 	bl	41bd08 <memcmp>

004189ee <.LVL144>:
  4189ee:	b918      	cbnz	r0, 4189f8 <.LVL144+0xa>
        appData.des_test_result--;
  4189f0:	4a03      	ldr	r2, [pc, #12]	; (418a00 <.LCFI62+0x6>)
  4189f2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  4189f4:	3b01      	subs	r3, #1
  4189f6:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  4189f8:	b064      	add	sp, #400	; 0x190

004189fa <.LCFI62>:
  4189fa:	bd70      	pop	{r4, r5, r6, pc}
  4189fc:	0040ab9c 	.word	0x0040ab9c
  418a00:	2040d534 	.word	0x2040d534

Disassembly of section .text.wc_Md5Final%136:

00418a04 <wc_Md5Final>:

int wc_Md5Final(Md5* md5, byte* hash)
{
    byte* local;

    if (md5 == NULL || hash == NULL) {
  418a04:	2800      	cmp	r0, #0
  418a06:	d059      	beq.n	418abc <.LCFI7>
{
  418a08:	b570      	push	{r4, r5, r6, lr}

00418a0a <.LCFI6>:
  418a0a:	4604      	mov	r4, r0
    if (md5 == NULL || hash == NULL) {
  418a0c:	2900      	cmp	r1, #0
  418a0e:	d052      	beq.n	418ab6 <.LVL364>
        return IntelQaSymMd5(&md5->asyncDev, hash, NULL, MD5_DIGEST_SIZE);
    #endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    local = (byte*)md5->buffer;
  418a10:	f100 060c 	add.w	r6, r0, #12

00418a14 <.LVL351>:

    AddMd5Length(md5, md5->buffLen);  /* before adding pads */
  418a14:	6803      	ldr	r3, [r0, #0]

00418a16 <.LBB151>:
    word32 tmp = md5->loLen;
  418a16:	6840      	ldr	r0, [r0, #4]

00418a18 <.LVL353>:
    if ((md5->loLen += len) < tmp) {
  418a18:	181a      	adds	r2, r3, r0
  418a1a:	6062      	str	r2, [r4, #4]
  418a1c:	4290      	cmp	r0, r2
  418a1e:	d902      	bls.n	418a26 <.LVL353+0xe>
        md5->hiLen++;                       /* carry low to high */
  418a20:	68a2      	ldr	r2, [r4, #8]
  418a22:	3201      	adds	r2, #1
  418a24:	60a2      	str	r2, [r4, #8]
  418a26:	460d      	mov	r5, r1

00418a28 <.LBE151>:
    local[md5->buffLen++] = 0x80;  /* add 1 */
  418a28:	1c5a      	adds	r2, r3, #1
  418a2a:	6022      	str	r2, [r4, #0]
  418a2c:	2280      	movs	r2, #128	; 0x80
  418a2e:	54f2      	strb	r2, [r6, r3]

    /* pad with zeros */
    if (md5->buffLen > MD5_PAD_SIZE) {
  418a30:	6820      	ldr	r0, [r4, #0]
  418a32:	2838      	cmp	r0, #56	; 0x38
  418a34:	d831      	bhi.n	418a9a <.LVL360>

00418a36 <.LVL355>:
        ByteReverseWords(md5->buffer, md5->buffer, MD5_BLOCK_SIZE);
    #endif
        XTRANSFORM(md5, local);
        md5->buffLen = 0;
    }
    XMEMSET(&local[md5->buffLen], 0, MD5_PAD_SIZE - md5->buffLen);
  418a36:	6820      	ldr	r0, [r4, #0]
  418a38:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
  418a3c:	2100      	movs	r1, #0
  418a3e:	4430      	add	r0, r6
  418a40:	f001 f9ae 	bl	419da0 <.LFE166>

00418a44 <.LVL356>:
#if defined(BIG_ENDIAN_ORDER) && !defined(FREESCALE_MMCAU_SHA)
    ByteReverseWords(md5->buffer, md5->buffer, MD5_BLOCK_SIZE);
#endif

    /* put lengths in bits */
    md5->hiLen = (md5->loLen >> (8*sizeof(md5->loLen) - 3)) +
  418a44:	6863      	ldr	r3, [r4, #4]
                 (md5->hiLen << 3);
  418a46:	68a1      	ldr	r1, [r4, #8]
    md5->hiLen = (md5->loLen >> (8*sizeof(md5->loLen) - 3)) +
  418a48:	0f5a      	lsrs	r2, r3, #29
  418a4a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
  418a4e:	60a2      	str	r2, [r4, #8]
    md5->loLen = md5->loLen << 3;
  418a50:	00db      	lsls	r3, r3, #3
  418a52:	6063      	str	r3, [r4, #4]

    /* store lengths */
    /* ! length ordering dependent on digest endian type ! */
    XMEMCPY(&local[MD5_PAD_SIZE], &md5->loLen, sizeof(word32));
  418a54:	6463      	str	r3, [r4, #68]	; 0x44
    XMEMCPY(&local[MD5_PAD_SIZE + sizeof(word32)], &md5->hiLen, sizeof(word32));
  418a56:	64a2      	str	r2, [r4, #72]	; 0x48

    /* final transform and result to hash */
    XTRANSFORM(md5, local);
  418a58:	4620      	mov	r0, r4
  418a5a:	f7f4 fbcb 	bl	40d1f4 <Transform>

00418a5e <.LVL357>:
#ifdef BIG_ENDIAN_ORDER
    ByteReverseWords(md5->digest, md5->digest, MD5_DIGEST_SIZE);
#endif
    XMEMCPY(hash, md5->digest, MD5_DIGEST_SIZE);
  418a5e:	4623      	mov	r3, r4
  418a60:	f853 0f4c 	ldr.w	r0, [r3, #76]!
  418a64:	6859      	ldr	r1, [r3, #4]
  418a66:	689a      	ldr	r2, [r3, #8]
  418a68:	68db      	ldr	r3, [r3, #12]
  418a6a:	6028      	str	r0, [r5, #0]
  418a6c:	6069      	str	r1, [r5, #4]
  418a6e:	60aa      	str	r2, [r5, #8]
  418a70:	60eb      	str	r3, [r5, #12]

00418a72 <.LBB153>:
    md5->digest[0] = 0x67452301L;
  418a72:	4b14      	ldr	r3, [pc, #80]	; (418ac4 <.LVL367+0x4>)
  418a74:	64e3      	str	r3, [r4, #76]	; 0x4c
    md5->digest[1] = 0xefcdab89L;
  418a76:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
  418a7a:	6523      	str	r3, [r4, #80]	; 0x50
    md5->digest[2] = 0x98badcfeL;
  418a7c:	f103 4329 	add.w	r3, r3, #2835349504	; 0xa9000000
  418a80:	f5a3 1396 	sub.w	r3, r3, #1228800	; 0x12c000
  418a84:	f6a3 638b 	subw	r3, r3, #3723	; 0xe8b
  418a88:	6563      	str	r3, [r4, #84]	; 0x54
    md5->digest[3] = 0x10325476L;
  418a8a:	f1a3 3388 	sub.w	r3, r3, #2290649224	; 0x88888888
  418a8e:	65a3      	str	r3, [r4, #88]	; 0x58
    md5->buffLen = 0;
  418a90:	2000      	movs	r0, #0
  418a92:	6020      	str	r0, [r4, #0]
    md5->loLen   = 0;
  418a94:	6060      	str	r0, [r4, #4]
    md5->hiLen   = 0;
  418a96:	60a0      	str	r0, [r4, #8]

00418a98 <.LBE153>:

    return _InitMd5(md5); /* reset state */
  418a98:	bd70      	pop	{r4, r5, r6, pc}

00418a9a <.LVL360>:
        XMEMSET(&local[md5->buffLen], 0, MD5_BLOCK_SIZE - md5->buffLen);
  418a9a:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
  418a9e:	2100      	movs	r1, #0

00418aa0 <.LVL361>:
  418aa0:	4430      	add	r0, r6
  418aa2:	f001 f97d 	bl	419da0 <.LFE166>

00418aa6 <.LVL362>:
        md5->buffLen += MD5_BLOCK_SIZE - md5->buffLen;
  418aa6:	2340      	movs	r3, #64	; 0x40
  418aa8:	6023      	str	r3, [r4, #0]
        XTRANSFORM(md5, local);
  418aaa:	4620      	mov	r0, r4
  418aac:	f7f4 fba2 	bl	40d1f4 <Transform>

00418ab0 <.LVL363>:
        md5->buffLen = 0;
  418ab0:	2300      	movs	r3, #0
  418ab2:	6023      	str	r3, [r4, #0]
  418ab4:	e7bf      	b.n	418a36 <.LVL355>

00418ab6 <.LVL364>:
        return BAD_FUNC_ARG;
  418ab6:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00418aba <.LVL365>:
}
  418aba:	bd70      	pop	{r4, r5, r6, pc}

00418abc <.LCFI7>:
        return BAD_FUNC_ARG;
  418abc:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00418ac0 <.LVL367>:
  418ac0:	4770      	bx	lr
  418ac2:	bf00      	nop
  418ac4:	67452301 	.word	0x67452301

Disassembly of section .text.scan_tree%137:

00418ac8 <scan_tree>:
{
  418ac8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

00418acc <.LCFI3>:
    int nextlen = tree[0].Len; /* length of next code */
  418acc:	884c      	ldrh	r4, [r1, #2]

00418ace <.LVL17>:
    if (nextlen == 0) max_count = 138, min_count = 3;
  418ace:	2c00      	cmp	r4, #0
  418ad0:	bf15      	itete	ne
  418ad2:	2704      	movne	r7, #4
  418ad4:	2703      	moveq	r7, #3
  418ad6:	f04f 0e07 	movne.w	lr, #7
  418ada:	f04f 0e8a 	moveq.w	lr, #138	; 0x8a

00418ade <.LVL18>:
    tree[max_code+1].Len = (ush)0xffff; /* guard */
  418ade:	eb01 0382 	add.w	r3, r1, r2, lsl #2
  418ae2:	f64f 75ff 	movw	r5, #65535	; 0xffff
  418ae6:	80dd      	strh	r5, [r3, #6]

00418ae8 <.LVL19>:
    for (n = 0; n <= max_code; n++) {
  418ae8:	2a00      	cmp	r2, #0
  418aea:	db4d      	blt.n	418b88 <.LVL38>
  418aec:	2300      	movs	r3, #0
  418aee:	f04f 3cff 	mov.w	ip, #4294967295
  418af2:	461e      	mov	r6, r3
            max_count = 138, min_count = 3;
  418af4:	f04f 0903 	mov.w	r9, #3
  418af8:	f04f 088a 	mov.w	r8, #138	; 0x8a
  418afc:	e01a      	b.n	418b34 <.LVL28>

00418afe <.LVL20>:
        } else if (count < min_count) {
  418afe:	42bb      	cmp	r3, r7
  418b00:	da1f      	bge.n	418b42 <.LVL29+0xc>
  418b02:	eb00 0784 	add.w	r7, r0, r4, lsl #2

00418b06 <.LVL21>:
            s->bl_tree[curlen].Freq += count;
  418b06:	f8b7 ea7c 	ldrh.w	lr, [r7, #2684]	; 0xa7c

00418b0a <.LVL22>:
  418b0a:	4473      	add	r3, lr

00418b0c <.LVL23>:
  418b0c:	f8a7 3a7c 	strh.w	r3, [r7, #2684]	; 0xa7c

00418b10 <.LVL24>:
        if (nextlen == 0) {
  418b10:	b3ad      	cbz	r5, 418b7e <.LVL37>
        } else if (curlen == nextlen) {
  418b12:	46a4      	mov	ip, r4
  418b14:	42a5      	cmp	r5, r4
  418b16:	bf0c      	ite	eq
  418b18:	2703      	moveq	r7, #3
  418b1a:	2704      	movne	r7, #4
  418b1c:	42a5      	cmp	r5, r4
  418b1e:	bf0c      	ite	eq
  418b20:	f04f 0e06 	moveq.w	lr, #6
  418b24:	f04f 0e07 	movne.w	lr, #7
  418b28:	2300      	movs	r3, #0

00418b2a <.LVL25>:
    for (n = 0; n <= max_code; n++) {
  418b2a:	3601      	adds	r6, #1
  418b2c:	3104      	adds	r1, #4
        curlen = nextlen; nextlen = tree[n+1].Len;
  418b2e:	462c      	mov	r4, r5

00418b30 <.LVL27>:
    for (n = 0; n <= max_code; n++) {
  418b30:	42b2      	cmp	r2, r6
  418b32:	db29      	blt.n	418b88 <.LVL38>

00418b34 <.LVL28>:
        curlen = nextlen; nextlen = tree[n+1].Len;
  418b34:	88cd      	ldrh	r5, [r1, #6]

00418b36 <.LVL29>:
        if (++count < max_count && curlen == nextlen) {
  418b36:	3301      	adds	r3, #1
  418b38:	42a5      	cmp	r5, r4
  418b3a:	d1e0      	bne.n	418afe <.LVL20>
  418b3c:	4573      	cmp	r3, lr
  418b3e:	dade      	bge.n	418afe <.LVL20>
  418b40:	e7f3      	b.n	418b2a <.LVL25>
        } else if (curlen != 0) {
  418b42:	b174      	cbz	r4, 418b62 <.LVL33>
            if (curlen != prevlen) s->bl_tree[curlen].Freq++;
  418b44:	45a4      	cmp	ip, r4
  418b46:	d006      	beq.n	418b56 <.LVL32+0x6>
  418b48:	eb00 0784 	add.w	r7, r0, r4, lsl #2

00418b4c <.LVL31>:
  418b4c:	f8b7 3a7c 	ldrh.w	r3, [r7, #2684]	; 0xa7c

00418b50 <.LVL32>:
  418b50:	3301      	adds	r3, #1
  418b52:	f8a7 3a7c 	strh.w	r3, [r7, #2684]	; 0xa7c
            s->bl_tree[REP_3_6].Freq++;
  418b56:	f8b0 3abc 	ldrh.w	r3, [r0, #2748]	; 0xabc
  418b5a:	3301      	adds	r3, #1
  418b5c:	f8a0 3abc 	strh.w	r3, [r0, #2748]	; 0xabc
  418b60:	e7d6      	b.n	418b10 <.LVL24>

00418b62 <.LVL33>:
        } else if (count <= 10) {
  418b62:	2b0a      	cmp	r3, #10
  418b64:	dc05      	bgt.n	418b72 <.LVL35>
            s->bl_tree[REPZ_3_10].Freq++;
  418b66:	f8b0 3ac0 	ldrh.w	r3, [r0, #2752]	; 0xac0

00418b6a <.LVL34>:
  418b6a:	3301      	adds	r3, #1
  418b6c:	f8a0 3ac0 	strh.w	r3, [r0, #2752]	; 0xac0
  418b70:	e7ce      	b.n	418b10 <.LVL24>

00418b72 <.LVL35>:
            s->bl_tree[REPZ_11_138].Freq++;
  418b72:	f8b0 3ac4 	ldrh.w	r3, [r0, #2756]	; 0xac4

00418b76 <.LVL36>:
  418b76:	3301      	adds	r3, #1
  418b78:	f8a0 3ac4 	strh.w	r3, [r0, #2756]	; 0xac4
  418b7c:	e7c8      	b.n	418b10 <.LVL24>

00418b7e <.LVL37>:
        count = 0; prevlen = curlen;
  418b7e:	462b      	mov	r3, r5
  418b80:	46a4      	mov	ip, r4
            max_count = 138, min_count = 3;
  418b82:	464f      	mov	r7, r9
  418b84:	46c6      	mov	lr, r8
  418b86:	e7d0      	b.n	418b2a <.LVL25>

00418b88 <.LVL38>:
  418b88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

Disassembly of section .text.compress_test%138:

00418b8c <compress_test>:
{
  418b8c:	b530      	push	{r4, r5, lr}

00418b8e <.LCFI56>:
  418b8e:	b083      	sub	sp, #12

00418b90 <.LCFI57>:
    c = calloc(cSz, sizeof(byte));
  418b90:	2101      	movs	r1, #1
  418b92:	f241 10c7 	movw	r0, #4551	; 0x11c7
  418b96:	f004 ffcb 	bl	41db30 <.LFE151>

00418b9a <.LVL123>:
  418b9a:	4604      	mov	r4, r0

00418b9c <.LVL124>:
    d = calloc(dSz, sizeof(byte));
  418b9c:	2101      	movs	r1, #1
  418b9e:	f241 10b7 	movw	r0, #4535	; 0x11b7

00418ba2 <.LVL125>:
  418ba2:	f004 ffc5 	bl	41db30 <.LFE151>

00418ba6 <.LVL126>:
  418ba6:	4605      	mov	r5, r0

00418ba8 <.LVL127>:
    if (c != NULL && d != NULL)
  418ba8:	b1cc      	cbz	r4, 418bde <.LVL130>
  418baa:	b1c0      	cbz	r0, 418bde <.LVL130>
        appData.compress_test_result--;
  418bac:	2203      	movs	r2, #3
  418bae:	4b25      	ldr	r3, [pc, #148]	; (418c44 <.LVL137+0xe>)
  418bb0:	649a      	str	r2, [r3, #72]	; 0x48
    if ((appData.compress_test_result == numSubTests-1) && 
  418bb2:	2300      	movs	r3, #0
  418bb4:	9300      	str	r3, [sp, #0]
  418bb6:	f241 13b7 	movw	r3, #4535	; 0x11b7
  418bba:	4a23      	ldr	r2, [pc, #140]	; (418c48 <.LVL137+0x12>)
  418bbc:	f241 11c7 	movw	r1, #4551	; 0x11c7
  418bc0:	4620      	mov	r0, r4

00418bc2 <.LVL128>:
  418bc2:	f001 feef 	bl	41a9a4 <wc_Compress>

00418bc6 <.LVL129>:
  418bc6:	1e03      	subs	r3, r0, #0
  418bc8:	db03      	blt.n	418bd2 <.LVL129+0xc>
        appData.compress_test_result--;
  418bca:	491e      	ldr	r1, [pc, #120]	; (418c44 <.LVL137+0xe>)
  418bcc:	6c8a      	ldr	r2, [r1, #72]	; 0x48
  418bce:	3a01      	subs	r2, #1
  418bd0:	648a      	str	r2, [r1, #72]	; 0x48
  418bd2:	f241 12c7 	movw	r2, #4551	; 0x11c7
  418bd6:	2b00      	cmp	r3, #0
  418bd8:	bfd8      	it	le
  418bda:	4613      	movle	r3, r2
  418bdc:	e004      	b.n	418be8 <.LVL131>

00418bde <.LVL130>:
    appData.compress_test_result = numSubTests;
  418bde:	2204      	movs	r2, #4
  418be0:	4b18      	ldr	r3, [pc, #96]	; (418c44 <.LVL137+0xe>)
  418be2:	649a      	str	r2, [r3, #72]	; 0x48
  418be4:	f241 13c7 	movw	r3, #4551	; 0x11c7

00418be8 <.LVL131>:
    if ((appData.compress_test_result == numSubTests-2) && 
  418be8:	4a16      	ldr	r2, [pc, #88]	; (418c44 <.LVL137+0xe>)
  418bea:	6c92      	ldr	r2, [r2, #72]	; 0x48
  418bec:	2a02      	cmp	r2, #2
  418bee:	d00d      	beq.n	418c0c <.LCFI59>

00418bf0 <.LVL132>:
    if ((appData.compress_test_result == numSubTests-3) && 
  418bf0:	4b14      	ldr	r3, [pc, #80]	; (418c44 <.LVL137+0xe>)
  418bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  418bf4:	2b01      	cmp	r3, #1
  418bf6:	d018      	beq.n	418c2a <.LVL136+0x12>
    if (c) free(c);
  418bf8:	b114      	cbz	r4, 418c00 <.LVL133>
  418bfa:	4620      	mov	r0, r4
  418bfc:	f004 ffa8 	bl	41db50 <.LFE0>

00418c00 <.LVL133>:
    if (d) free(d);
  418c00:	b115      	cbz	r5, 418c08 <.LVL134>
  418c02:	4628      	mov	r0, r5
  418c04:	f004 ffa4 	bl	41db50 <.LFE0>

00418c08 <.LVL134>:
}
  418c08:	b003      	add	sp, #12

00418c0a <.LCFI58>:
  418c0a:	bd30      	pop	{r4, r5, pc}

00418c0c <.LCFI59>:
         wc_DeCompress(d, dSz, c, cSz) == (int)dSz)
  418c0c:	4622      	mov	r2, r4
  418c0e:	f241 11b7 	movw	r1, #4535	; 0x11b7
  418c12:	4628      	mov	r0, r5
  418c14:	f002 fdc4 	bl	41b7a0 <wc_DeCompress>

00418c18 <.LVL136>:
    if ((appData.compress_test_result == numSubTests-2) && 
  418c18:	f241 13b7 	movw	r3, #4535	; 0x11b7
  418c1c:	4298      	cmp	r0, r3
  418c1e:	d1e7      	bne.n	418bf0 <.LVL132>
        appData.compress_test_result--;
  418c20:	4a08      	ldr	r2, [pc, #32]	; (418c44 <.LVL137+0xe>)
  418c22:	6c93      	ldr	r3, [r2, #72]	; 0x48
  418c24:	3b01      	subs	r3, #1
  418c26:	6493      	str	r3, [r2, #72]	; 0x48
  418c28:	e7e2      	b.n	418bf0 <.LVL132>
         !(memcmp(d, sample_text, dSz)))
  418c2a:	f241 12b7 	movw	r2, #4535	; 0x11b7
  418c2e:	4906      	ldr	r1, [pc, #24]	; (418c48 <.LVL137+0x12>)
  418c30:	4628      	mov	r0, r5
  418c32:	f003 f869 	bl	41bd08 <memcmp>

00418c36 <.LVL137>:
    if ((appData.compress_test_result == numSubTests-3) && 
  418c36:	2800      	cmp	r0, #0
  418c38:	d1de      	bne.n	418bf8 <.LVL132+0x8>
        appData.compress_test_result--;
  418c3a:	2200      	movs	r2, #0
  418c3c:	4b01      	ldr	r3, [pc, #4]	; (418c44 <.LVL137+0xe>)
  418c3e:	649a      	str	r2, [r3, #72]	; 0x48
  418c40:	e7da      	b.n	418bf8 <.LVL132+0x8>
  418c42:	bf00      	nop
  418c44:	2040d534 	.word	0x2040d534
  418c48:	004061d8 	.word	0x004061d8

Disassembly of section .text.fp_mul_d%139:

00418c4c <fp_mul_d>:
{
  418c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00418c50 <.LCFI6>:
  418c50:	b083      	sub	sp, #12

00418c52 <.LCFI7>:
   oldused = c->used;
  418c52:	f8d2 8000 	ldr.w	r8, [r2]
   c->used = a->used;
  418c56:	6803      	ldr	r3, [r0, #0]
  418c58:	9301      	str	r3, [sp, #4]
  418c5a:	6013      	str	r3, [r2, #0]
   c->sign = a->sign;
  418c5c:	6843      	ldr	r3, [r0, #4]
  418c5e:	9300      	str	r3, [sp, #0]
  418c60:	6053      	str	r3, [r2, #4]

00418c62 <.LVL61>:
   for (x = 0; x < a->used; x++) {
  418c62:	6803      	ldr	r3, [r0, #0]
  418c64:	2b00      	cmp	r3, #0
  418c66:	dd3d      	ble.n	418ce4 <.LVL71>
  418c68:	f100 0e04 	add.w	lr, r0, #4
  418c6c:	1d13      	adds	r3, r2, #4
  418c6e:	f04f 0c00 	mov.w	ip, #0
  418c72:	2400      	movs	r4, #0
  418c74:	2500      	movs	r5, #0
       w         = ((fp_word)a->dp[x]) * ((fp_word)b) + w;
  418c76:	46e1      	mov	r9, ip
  418c78:	e000      	b.n	418c7c <.LVL63>

00418c7a <.LVL62>:
   for (x = 0; x < a->used; x++) {
  418c7a:	46b4      	mov	ip, r6

00418c7c <.LVL63>:
       w         = ((fp_word)a->dp[x]) * ((fp_word)b) + w;
  418c7c:	f85e 6f04 	ldr.w	r6, [lr, #4]!
  418c80:	46a2      	mov	sl, r4
  418c82:	46ab      	mov	fp, r5
  418c84:	fbe1 ab06 	umlal	sl, fp, r1, r6

00418c88 <.LVL64>:
       c->dp[x]  = (fp_digit)w;
  418c88:	f843 af04 	str.w	sl, [r3, #4]!
       w         = w >> DIGIT_BIT;
  418c8c:	465c      	mov	r4, fp
  418c8e:	464d      	mov	r5, r9

00418c90 <.LVL65>:
   for (x = 0; x < a->used; x++) {
  418c90:	f10c 0601 	add.w	r6, ip, #1

00418c94 <.LVL66>:
  418c94:	6807      	ldr	r7, [r0, #0]
  418c96:	42b7      	cmp	r7, r6
  418c98:	dcef      	bgt.n	418c7a <.LVL62>
   if (w != 0 && (a->used != FP_SIZE)) {
  418c9a:	2f88      	cmp	r7, #136	; 0x88
  418c9c:	d00c      	beq.n	418cb8 <.LVL68>
  418c9e:	ea5b 0309 	orrs.w	r3, fp, r9
  418ca2:	d009      	beq.n	418cb8 <.LVL68>
      c->dp[c->used++] = (fp_digit) w;
  418ca4:	9901      	ldr	r1, [sp, #4]

00418ca6 <.LVL67>:
  418ca6:	460b      	mov	r3, r1
  418ca8:	3301      	adds	r3, #1
  418caa:	6013      	str	r3, [r2, #0]
  418cac:	f101 0b02 	add.w	fp, r1, #2
  418cb0:	f842 402b 	str.w	r4, [r2, fp, lsl #2]
      ++x;
  418cb4:	f10c 0602 	add.w	r6, ip, #2

00418cb8 <.LVL68>:
   for (; x < oldused; x++) {
  418cb8:	45b0      	cmp	r8, r6
  418cba:	dd08      	ble.n	418cce <.LVL68+0x16>
  418cbc:	eb02 0386 	add.w	r3, r2, r6, lsl #2
  418cc0:	3304      	adds	r3, #4
      c->dp[x] = 0;
  418cc2:	2100      	movs	r1, #0
  418cc4:	f843 1f04 	str.w	r1, [r3, #4]!
   for (; x < oldused; x++) {
  418cc8:	3601      	adds	r6, #1
  418cca:	45b0      	cmp	r8, r6
  418ccc:	d1fa      	bne.n	418cc4 <.LVL68+0xc>
   fp_clamp(c);
  418cce:	6811      	ldr	r1, [r2, #0]
  418cd0:	b1a1      	cbz	r1, 418cfc <.LVL72+0x14>
  418cd2:	1e4b      	subs	r3, r1, #1
  418cd4:	1c48      	adds	r0, r1, #1

00418cd6 <.LVL70>:
  418cd6:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
  418cda:	b988      	cbnz	r0, 418d00 <.LVL72+0x18>
  418cdc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  418ce0:	3104      	adds	r1, #4
  418ce2:	e002      	b.n	418cea <.LVL72+0x2>

00418ce4 <.LVL71>:
   for (x = 0; x < a->used; x++) {
  418ce4:	2600      	movs	r6, #0
  418ce6:	e7e7      	b.n	418cb8 <.LVL68>

00418ce8 <.LVL72>:
   fp_clamp(c);
  418ce8:	4623      	mov	r3, r4
  418cea:	b133      	cbz	r3, 418cfa <.LVL72+0x12>
  418cec:	1e5c      	subs	r4, r3, #1
  418cee:	f851 0d04 	ldr.w	r0, [r1, #-4]!
  418cf2:	2800      	cmp	r0, #0
  418cf4:	d0f8      	beq.n	418ce8 <.LVL72>
  418cf6:	6013      	str	r3, [r2, #0]
  418cf8:	e002      	b.n	418d00 <.LVL72+0x18>
  418cfa:	6013      	str	r3, [r2, #0]
  418cfc:	2300      	movs	r3, #0
  418cfe:	9300      	str	r3, [sp, #0]
  418d00:	9b00      	ldr	r3, [sp, #0]
  418d02:	6053      	str	r3, [r2, #4]
}
  418d04:	b003      	add	sp, #12

00418d06 <.LCFI8>:
  418d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section .text.__d2b%140:

00418d0c <__d2b>:
  418d0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

00418d10 <.LCFI17>:
  418d10:	ec57 6b10 	vmov	r6, r7, d0
  418d14:	b083      	sub	sp, #12

00418d16 <.LCFI18>:
  418d16:	4688      	mov	r8, r1
  418d18:	2101      	movs	r1, #1

00418d1a <.LVL324>:
  418d1a:	463c      	mov	r4, r7
  418d1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
  418d20:	4617      	mov	r7, r2
  418d22:	f003 fb9b 	bl	41c45c <.LFE2>

00418d26 <.LVL326>:
  418d26:	f3c4 0413 	ubfx	r4, r4, #0, #20
  418d2a:	4681      	mov	r9, r0

00418d2c <.LVL327>:
  418d2c:	b10d      	cbz	r5, 418d32 <.LVL327+0x6>
  418d2e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  418d32:	9401      	str	r4, [sp, #4]
  418d34:	b31e      	cbz	r6, 418d7e <.LCFI20>
  418d36:	a802      	add	r0, sp, #8

00418d38 <.LVL328>:
  418d38:	f840 6d08 	str.w	r6, [r0, #-8]!
  418d3c:	f003 f814 	bl	41bd68 <__lo0bits>

00418d40 <.LVL329>:
  418d40:	2800      	cmp	r0, #0
  418d42:	d134      	bne.n	418dae <.LCFI22>
  418d44:	e89d 000c 	ldmia.w	sp, {r2, r3}
  418d48:	f8c9 2014 	str.w	r2, [r9, #20]
  418d4c:	2b00      	cmp	r3, #0
  418d4e:	bf0c      	ite	eq
  418d50:	2101      	moveq	r1, #1
  418d52:	2102      	movne	r1, #2
  418d54:	f8c9 3018 	str.w	r3, [r9, #24]
  418d58:	f8c9 1010 	str.w	r1, [r9, #16]

00418d5c <.LVL330>:
  418d5c:	b9dd      	cbnz	r5, 418d96 <.LVL338+0x4>
  418d5e:	eb09 0381 	add.w	r3, r9, r1, lsl #2
  418d62:	f2a0 4032 	subw	r0, r0, #1074	; 0x432

00418d66 <.LVL331>:
  418d66:	f8c8 0000 	str.w	r0, [r8]
  418d6a:	6918      	ldr	r0, [r3, #16]

00418d6c <.LVL332>:
  418d6c:	f003 fe42 	bl	41c9f4 <__hi0bits>

00418d70 <.LVL333>:
  418d70:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  418d74:	6038      	str	r0, [r7, #0]
  418d76:	4648      	mov	r0, r9
  418d78:	b003      	add	sp, #12

00418d7a <.LCFI19>:
  418d7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00418d7e <.LCFI20>:
  418d7e:	a801      	add	r0, sp, #4

00418d80 <.LVL335>:
  418d80:	f002 fff2 	bl	41bd68 <__lo0bits>

00418d84 <.LVL336>:
  418d84:	9b01      	ldr	r3, [sp, #4]
  418d86:	f8c9 3014 	str.w	r3, [r9, #20]
  418d8a:	2101      	movs	r1, #1
  418d8c:	3020      	adds	r0, #32

00418d8e <.LVL337>:
  418d8e:	f8c9 1010 	str.w	r1, [r9, #16]

00418d92 <.LVL338>:
  418d92:	2d00      	cmp	r5, #0
  418d94:	d0e3      	beq.n	418d5e <.LVL330+0x2>
  418d96:	f2a5 4533 	subw	r5, r5, #1075	; 0x433

00418d9a <.LVL339>:
  418d9a:	4405      	add	r5, r0

00418d9c <.LVL340>:
  418d9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35

00418da0 <.LVL341>:
  418da0:	f8c8 5000 	str.w	r5, [r8]
  418da4:	6038      	str	r0, [r7, #0]
  418da6:	4648      	mov	r0, r9
  418da8:	b003      	add	sp, #12

00418daa <.LCFI21>:
  418daa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00418dae <.LCFI22>:
  418dae:	e89d 000a 	ldmia.w	sp, {r1, r3}
  418db2:	f1c0 0220 	rsb	r2, r0, #32
  418db6:	fa03 f202 	lsl.w	r2, r3, r2
  418dba:	430a      	orrs	r2, r1
  418dbc:	40c3      	lsrs	r3, r0
  418dbe:	9301      	str	r3, [sp, #4]
  418dc0:	f8c9 2014 	str.w	r2, [r9, #20]
  418dc4:	e7c2      	b.n	418d4c <.LVL329+0xc>

00418dc6 <.LFE31>:
  418dc6:	bf00      	nop

Disassembly of section .text._tr_stored_block%141:

00418dc8 <_tr_stored_block>:
{
  418dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

00418dca <.LCFI21>:
  418dca:	4604      	mov	r4, r0
  418dcc:	460d      	mov	r5, r1
  418dce:	4616      	mov	r6, r2

00418dd0 <.LBB68>:
    send_bits(s, (STORED_BLOCK<<1)+last, 3);    /* send block type */
  418dd0:	f241 62bc 	movw	r2, #5820	; 0x16bc

00418dd4 <.LVL289>:
  418dd4:	5882      	ldr	r2, [r0, r2]
  418dd6:	2a0d      	cmp	r2, #13
  418dd8:	dc34      	bgt.n	418e44 <.LVL300>
  418dda:	f241 61b8 	movw	r1, #5816	; 0x16b8

00418dde <.LVL290>:
  418dde:	b29b      	uxth	r3, r3

00418de0 <.LVL291>:
  418de0:	4093      	lsls	r3, r2
  418de2:	5a40      	ldrh	r0, [r0, r1]

00418de4 <.LVL292>:
  418de4:	4303      	orrs	r3, r0
  418de6:	5263      	strh	r3, [r4, r1]
  418de8:	3203      	adds	r2, #3
  418dea:	f241 63bc 	movw	r3, #5820	; 0x16bc
  418dee:	50e2      	str	r2, [r4, r3]

00418df0 <.LBB70>:
    deflate_state *s;
    charf    *buf;    /* the input data */
    unsigned len;     /* its length */
    int      header;  /* true if block header must be written */
{
    bi_windup(s);        /* align on byte boundary */
  418df0:	4620      	mov	r0, r4
  418df2:	f003 f981 	bl	41c0f8 <.LFE232>

00418df6 <.LVL294>:

    if (header) {
        put_short(s, (ush)len);
  418df6:	68a1      	ldr	r1, [r4, #8]
  418df8:	6963      	ldr	r3, [r4, #20]
  418dfa:	1c5a      	adds	r2, r3, #1
  418dfc:	6162      	str	r2, [r4, #20]
  418dfe:	b2f2      	uxtb	r2, r6
  418e00:	54ca      	strb	r2, [r1, r3]
  418e02:	68a0      	ldr	r0, [r4, #8]
  418e04:	6961      	ldr	r1, [r4, #20]
  418e06:	1c4b      	adds	r3, r1, #1
  418e08:	6163      	str	r3, [r4, #20]
  418e0a:	b2b3      	uxth	r3, r6
  418e0c:	0a1f      	lsrs	r7, r3, #8
  418e0e:	5447      	strb	r7, [r0, r1]
        put_short(s, (ush)~len);
  418e10:	68a0      	ldr	r0, [r4, #8]
  418e12:	6961      	ldr	r1, [r4, #20]
  418e14:	1c4f      	adds	r7, r1, #1
  418e16:	6167      	str	r7, [r4, #20]
  418e18:	43d2      	mvns	r2, r2
  418e1a:	5442      	strb	r2, [r0, r1]
  418e1c:	68a1      	ldr	r1, [r4, #8]
  418e1e:	6962      	ldr	r2, [r4, #20]
  418e20:	1c50      	adds	r0, r2, #1
  418e22:	6160      	str	r0, [r4, #20]
  418e24:	43db      	mvns	r3, r3
  418e26:	f3c3 2307 	ubfx	r3, r3, #8, #8
  418e2a:	548b      	strb	r3, [r1, r2]

00418e2c <.LVL295>:
#endif
    }
#ifdef DEBUG
    s->bits_sent += (ulg)len<<3;
#endif
    while (len--) {
  418e2c:	b14e      	cbz	r6, 418e42 <.LVL299>
  418e2e:	19aa      	adds	r2, r5, r6

00418e30 <.LVL296>:
        put_byte(s, *buf++);
  418e30:	68a1      	ldr	r1, [r4, #8]
  418e32:	6963      	ldr	r3, [r4, #20]
  418e34:	1c58      	adds	r0, r3, #1
  418e36:	6160      	str	r0, [r4, #20]
  418e38:	f815 0b01 	ldrb.w	r0, [r5], #1

00418e3c <.LVL297>:
  418e3c:	54c8      	strb	r0, [r1, r3]

00418e3e <.LVL298>:
    while (len--) {
  418e3e:	42aa      	cmp	r2, r5
  418e40:	d1f6      	bne.n	418e30 <.LVL296>

00418e42 <.LVL299>:
  418e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00418e44 <.LVL300>:
  418e44:	b29b      	uxth	r3, r3

00418e46 <.LBB69>:
    send_bits(s, (STORED_BLOCK<<1)+last, 3);    /* send block type */
  418e46:	f241 61b8 	movw	r1, #5816	; 0x16b8

00418e4a <.LVL302>:
  418e4a:	fa03 f202 	lsl.w	r2, r3, r2
  418e4e:	5a40      	ldrh	r0, [r0, r1]

00418e50 <.LVL303>:
  418e50:	4302      	orrs	r2, r0
  418e52:	b212      	sxth	r2, r2
  418e54:	5262      	strh	r2, [r4, r1]
  418e56:	6960      	ldr	r0, [r4, #20]
  418e58:	1c47      	adds	r7, r0, #1
  418e5a:	6167      	str	r7, [r4, #20]
  418e5c:	68a7      	ldr	r7, [r4, #8]
  418e5e:	543a      	strb	r2, [r7, r0]
  418e60:	68a0      	ldr	r0, [r4, #8]
  418e62:	6967      	ldr	r7, [r4, #20]
  418e64:	1c7a      	adds	r2, r7, #1
  418e66:	6162      	str	r2, [r4, #20]
  418e68:	5a62      	ldrh	r2, [r4, r1]
  418e6a:	0a12      	lsrs	r2, r2, #8
  418e6c:	55c2      	strb	r2, [r0, r7]
  418e6e:	f241 60bc 	movw	r0, #5820	; 0x16bc
  418e72:	5822      	ldr	r2, [r4, r0]
  418e74:	f1c2 0710 	rsb	r7, r2, #16
  418e78:	413b      	asrs	r3, r7
  418e7a:	5263      	strh	r3, [r4, r1]
  418e7c:	3a0d      	subs	r2, #13
  418e7e:	5022      	str	r2, [r4, r0]

00418e80 <.LBE69>:
  418e80:	e7b6      	b.n	418df0 <.LBB70>

Disassembly of section .text.sha_test%142:

00418e84 <sha_test>:
{
  418e84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

00418e88 <.LCFI3>:
  418e88:	b097      	sub	sp, #92	; 0x5c

00418e8a <.LCFI4>:
  418e8a:	af00      	add	r7, sp, #0

00418e8c <.LCFI5>:
  418e8c:	f5ad 7d20 	sub.w	sp, sp, #640	; 0x280
  418e90:	f10d 057f 	add.w	r5, sp, #127	; 0x7f
  418e94:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
    test_sha[0] = d;
  418e98:	4b26      	ldr	r3, [pc, #152]	; (418f34 <.LCFI7+0x4>)
  418e9a:	f503 7294 	add.w	r2, r3, #296	; 0x128
  418e9e:	607a      	str	r2, [r7, #4]
  418ea0:	f503 72d6 	add.w	r2, r3, #428	; 0x1ac
  418ea4:	60ba      	str	r2, [r7, #8]
  418ea6:	2280      	movs	r2, #128	; 0x80
  418ea8:	60fa      	str	r2, [r7, #12]
  418eaa:	2214      	movs	r2, #20
  418eac:	613a      	str	r2, [r7, #16]
    test_sha[1] = b;
  418eae:	f503 71e2 	add.w	r1, r3, #452	; 0x1c4
  418eb2:	6179      	str	r1, [r7, #20]
  418eb4:	f503 7100 	add.w	r1, r3, #512	; 0x200
  418eb8:	61b9      	str	r1, [r7, #24]
  418eba:	2138      	movs	r1, #56	; 0x38
  418ebc:	61f9      	str	r1, [r7, #28]
  418ebe:	623a      	str	r2, [r7, #32]
    test_sha[2] = c;
  418ec0:	f503 7106 	add.w	r1, r3, #536	; 0x218
  418ec4:	6279      	str	r1, [r7, #36]	; 0x24
  418ec6:	f503 7117 	add.w	r1, r3, #604	; 0x25c
  418eca:	62b9      	str	r1, [r7, #40]	; 0x28
  418ecc:	2140      	movs	r1, #64	; 0x40
  418ece:	62f9      	str	r1, [r7, #44]	; 0x2c
  418ed0:	633a      	str	r2, [r7, #48]	; 0x30
    test_sha[3] = a;
  418ed2:	637b      	str	r3, [r7, #52]	; 0x34
  418ed4:	f503 731d 	add.w	r3, r3, #628	; 0x274
  418ed8:	63bb      	str	r3, [r7, #56]	; 0x38
  418eda:	2303      	movs	r3, #3
  418edc:	63fb      	str	r3, [r7, #60]	; 0x3c
  418ede:	643a      	str	r2, [r7, #64]	; 0x40
    CRYPT_SHA_Initialize(&sha);
  418ee0:	4628      	mov	r0, r5
  418ee2:	f004 fdcd 	bl	41da80 <.LFE233>

00418ee6 <.LVL8>:
    appData.sha_test_result = times;
  418ee6:	2204      	movs	r2, #4
  418ee8:	4b13      	ldr	r3, [pc, #76]	; (418f38 <.LCFI7+0x8>)
  418eea:	609a      	str	r2, [r3, #8]

00418eec <.LVL9>:
  418eec:	18bc      	adds	r4, r7, r2
  418eee:	f107 0944 	add.w	r9, r7, #68	; 0x44
        if (memcmp(hash, test_sha[i].output, SHA_DIGEST_SIZE) == 0)
  418ef2:	f04f 0814 	mov.w	r8, #20
            appData.sha_test_result--;
  418ef6:	461e      	mov	r6, r3
  418ef8:	e002      	b.n	418f00 <.LVL10+0x6>

00418efa <.LVL10>:
  418efa:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  418efc:	454c      	cmp	r4, r9
  418efe:	d015      	beq.n	418f2c <.LVL13+0xc>
        CRYPT_SHA_DataAdd(&sha, (byte*)test_sha[i].input, (word32)test_sha[i].inLen);
  418f00:	68a2      	ldr	r2, [r4, #8]
  418f02:	6821      	ldr	r1, [r4, #0]
  418f04:	4628      	mov	r0, r5
  418f06:	f004 fc5f 	bl	41d7c8 <.LFE166>

00418f0a <.LVL11>:
        CRYPT_SHA_Finalize(&sha, hash);
  418f0a:	f107 0144 	add.w	r1, r7, #68	; 0x44
  418f0e:	4628      	mov	r0, r5
  418f10:	f004 fc66 	bl	41d7e0 <.LFE169>

00418f14 <.LVL12>:
        if (memcmp(hash, test_sha[i].output, SHA_DIGEST_SIZE) == 0)
  418f14:	4642      	mov	r2, r8
  418f16:	6861      	ldr	r1, [r4, #4]
  418f18:	f107 0044 	add.w	r0, r7, #68	; 0x44
  418f1c:	f002 fef4 	bl	41bd08 <memcmp>

00418f20 <.LVL13>:
  418f20:	2800      	cmp	r0, #0
  418f22:	d1ea      	bne.n	418efa <.LVL10>
            appData.sha_test_result--;
  418f24:	68b3      	ldr	r3, [r6, #8]
  418f26:	3b01      	subs	r3, #1
  418f28:	60b3      	str	r3, [r6, #8]
  418f2a:	e7e6      	b.n	418efa <.LVL10>
}
  418f2c:	375c      	adds	r7, #92	; 0x5c

00418f2e <.LCFI6>:
  418f2e:	46bd      	mov	sp, r7

00418f30 <.LCFI7>:
  418f30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  418f34:	0040ab9c 	.word	0x0040ab9c
  418f38:	2040d534 	.word	0x2040d534

Disassembly of section .text.wc_ecc_curve_load%143:

00418f3c <wc_ecc_curve_load>:
{
  418f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

00418f3e <.LCFI7>:
    if (dp == NULL || pCurve == NULL)
  418f3e:	2800      	cmp	r0, #0
  418f40:	d055      	beq.n	418fee <.LVL66>
  418f42:	4606      	mov	r6, r0
  418f44:	2900      	cmp	r1, #0
  418f46:	d052      	beq.n	418fee <.LVL66>
    curve = *pCurve;
  418f48:	680d      	ldr	r5, [r1, #0]

00418f4a <.LVL43>:
    if (curve->dp != dp) {
  418f4a:	682b      	ldr	r3, [r5, #0]
  418f4c:	4298      	cmp	r0, r3
  418f4e:	d002      	beq.n	418f56 <.LVL43+0xc>
        curve->load_mask = 0;
  418f50:	2300      	movs	r3, #0
  418f52:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    curve->dp = dp; /* set dp info */
  418f56:	602e      	str	r6, [r5, #0]
    load_items = (~curve->load_mask & load_mask);
  418f58:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
  418f5c:	ea22 0403 	bic.w	r4, r2, r3

00418f60 <.LVL44>:
    curve->load_mask |= load_items;
  418f60:	4323      	orrs	r3, r4
  418f62:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24

00418f66 <.LVL45>:
    if (load_items & ECC_CURVE_FIELD_PRIME)
  418f66:	f014 0f01 	tst.w	r4, #1
  418f6a:	d10f      	bne.n	418f8c <.LVL48>
    x = 0;
  418f6c:	2700      	movs	r7, #0

00418f6e <.LVL46>:
    if (load_items & ECC_CURVE_FIELD_AF)
  418f6e:	f014 0f02 	tst.w	r4, #2
  418f72:	d113      	bne.n	418f9c <.LVL54>
    if (load_items & ECC_CURVE_FIELD_ORDER)
  418f74:	f014 0f08 	tst.w	r4, #8
  418f78:	d119      	bne.n	418fae <.LVL55+0x4>
    if (load_items & ECC_CURVE_FIELD_GX)
  418f7a:	f014 0f10 	tst.w	r4, #16
  418f7e:	d11f      	bne.n	418fc0 <.LVL57+0x4>
    if (load_items & ECC_CURVE_FIELD_GY)
  418f80:	f014 0f20 	tst.w	r4, #32
  418f84:	d124      	bne.n	418fd0 <.LVL59+0x4>
    if (x != 0) {
  418f86:	bb67      	cbnz	r7, 418fe2 <.LBB15>

00418f88 <.LVL47>:
}
  418f88:	4638      	mov	r0, r7
  418f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00418f8c <.LVL48>:
        x += wc_ecc_curve_load_item(dp->prime, &curve->prime, curve,
  418f8c:	2301      	movs	r3, #1
  418f8e:	462a      	mov	r2, r5

00418f90 <.LVL49>:
  418f90:	1d29      	adds	r1, r5, #4

00418f92 <.LVL50>:
  418f92:	68f0      	ldr	r0, [r6, #12]

00418f94 <.LVL51>:
  418f94:	f003 f92e 	bl	41c1f4 <.LFE162>

00418f98 <.LVL52>:
  418f98:	4607      	mov	r7, r0

00418f9a <.LVL53>:
  418f9a:	e7e8      	b.n	418f6e <.LVL46>

00418f9c <.LVL54>:
        x += wc_ecc_curve_load_item(dp->Af, &curve->Af, curve,
  418f9c:	2302      	movs	r3, #2
  418f9e:	462a      	mov	r2, r5
  418fa0:	f105 0108 	add.w	r1, r5, #8
  418fa4:	6930      	ldr	r0, [r6, #16]
  418fa6:	f003 f925 	bl	41c1f4 <.LFE162>

00418faa <.LVL55>:
  418faa:	4407      	add	r7, r0
  418fac:	e7e2      	b.n	418f74 <.LVL46+0x6>
        x += wc_ecc_curve_load_item(dp->order, &curve->order, curve,
  418fae:	2308      	movs	r3, #8
  418fb0:	462a      	mov	r2, r5
  418fb2:	f105 010c 	add.w	r1, r5, #12
  418fb6:	69b0      	ldr	r0, [r6, #24]
  418fb8:	f003 f91c 	bl	41c1f4 <.LFE162>

00418fbc <.LVL57>:
  418fbc:	4407      	add	r7, r0
  418fbe:	e7dc      	b.n	418f7a <.LVL46+0xc>
        x += wc_ecc_curve_load_item(dp->Gx, &curve->Gx, curve,
  418fc0:	2310      	movs	r3, #16
  418fc2:	462a      	mov	r2, r5
  418fc4:	18e9      	adds	r1, r5, r3
  418fc6:	69f0      	ldr	r0, [r6, #28]
  418fc8:	f003 f914 	bl	41c1f4 <.LFE162>

00418fcc <.LVL59>:
  418fcc:	4407      	add	r7, r0
  418fce:	e7d7      	b.n	418f80 <.LVL46+0x12>
        x += wc_ecc_curve_load_item(dp->Gy, &curve->Gy, curve,
  418fd0:	2320      	movs	r3, #32
  418fd2:	462a      	mov	r2, r5
  418fd4:	f105 0114 	add.w	r1, r5, #20
  418fd8:	6a30      	ldr	r0, [r6, #32]
  418fda:	f003 f90b 	bl	41c1f4 <.LFE162>

00418fde <.LVL61>:
  418fde:	4407      	add	r7, r0
  418fe0:	e7d1      	b.n	418f86 <.LVL46+0x18>

00418fe2 <.LBB15>:
    _wc_ecc_curve_free(curve);
  418fe2:	4628      	mov	r0, r5
  418fe4:	f002 fb72 	bl	41b6cc <.LFE46>

00418fe8 <.LBE15>:
        ret = MP_READ_E;
  418fe8:	f06f 076e 	mvn.w	r7, #110	; 0x6e

00418fec <.LVL65>:
  418fec:	e7cc      	b.n	418f88 <.LVL47>

00418fee <.LVL66>:
        return BAD_FUNC_ARG;
  418fee:	f06f 07ac 	mvn.w	r7, #172	; 0xac
  418ff2:	e7c9      	b.n	418f88 <.LVL47>

Disassembly of section .text.wc_InitSha512_ex%144:

00418ff8 <wc_InitSha512_ex>:
        if (sha512 == NULL)
  418ff8:	2800      	cmp	r0, #0
  418ffa:	d035      	beq.n	419068 <.LVL21>
    {
  418ffc:	b430      	push	{r4, r5}

00418ffe <.LCFI4>:
  418ffe:	4603      	mov	r3, r0
        sha512->heap = heap;
  419000:	f8c0 10d8 	str.w	r1, [r0, #216]	; 0xd8

00419004 <.LBB679>:
    sha512->digest[0] = W64LIT(0x6a09e667f3bcc908);
  419004:	a11a      	add	r1, pc, #104	; (adr r1, 419070 <.LVL22+0x4>)
  419006:	e9d1 0100 	ldrd	r0, r1, [r1]

0041900a <.LVL19>:
  41900a:	e9c3 0106 	strd	r0, r1, [r3, #24]
    sha512->digest[1] = W64LIT(0xbb67ae8584caa73b);
  41900e:	a11a      	add	r1, pc, #104	; (adr r1, 419078 <.LVL22+0xc>)
  419010:	e9d1 0100 	ldrd	r0, r1, [r1]
  419014:	e9c3 0108 	strd	r0, r1, [r3, #32]
    sha512->digest[2] = W64LIT(0x3c6ef372fe94f82b);
  419018:	a119      	add	r1, pc, #100	; (adr r1, 419080 <.LVL22+0x14>)
  41901a:	e9d1 0100 	ldrd	r0, r1, [r1]
  41901e:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
    sha512->digest[3] = W64LIT(0xa54ff53a5f1d36f1);
  419022:	a119      	add	r1, pc, #100	; (adr r1, 419088 <.LVL22+0x1c>)
  419024:	e9d1 0100 	ldrd	r0, r1, [r1]
  419028:	e9c3 010c 	strd	r0, r1, [r3, #48]	; 0x30
    sha512->digest[4] = W64LIT(0x510e527fade682d1);
  41902c:	a118      	add	r1, pc, #96	; (adr r1, 419090 <.LVL22+0x24>)
  41902e:	e9d1 0100 	ldrd	r0, r1, [r1]
  419032:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
    sha512->digest[5] = W64LIT(0x9b05688c2b3e6c1f);
  419036:	a118      	add	r1, pc, #96	; (adr r1, 419098 <.LVL22+0x2c>)
  419038:	e9d1 0100 	ldrd	r0, r1, [r1]
  41903c:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
    sha512->digest[6] = W64LIT(0x1f83d9abfb41bd6b);
  419040:	a117      	add	r1, pc, #92	; (adr r1, 4190a0 <.LVL22+0x34>)
  419042:	e9d1 0100 	ldrd	r0, r1, [r1]
  419046:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
    sha512->digest[7] = W64LIT(0x5be0cd19137e2179);
  41904a:	a117      	add	r1, pc, #92	; (adr r1, 4190a8 <.LVL22+0x3c>)
  41904c:	e9d1 0100 	ldrd	r0, r1, [r1]
  419050:	e9c3 0114 	strd	r0, r1, [r3, #80]	; 0x50
    sha512->buffLen = 0;
  419054:	2000      	movs	r0, #0
  419056:	6018      	str	r0, [r3, #0]
    sha512->loLen   = 0;
  419058:	2400      	movs	r4, #0
  41905a:	2500      	movs	r5, #0
  41905c:	e9c3 4502 	strd	r4, r5, [r3, #8]
    sha512->hiLen   = 0;
  419060:	e9c3 4504 	strd	r4, r5, [r3, #16]

00419064 <.LBE679>:
    }
  419064:	bc30      	pop	{r4, r5}

00419066 <.LCFI5>:
  419066:	4770      	bx	lr

00419068 <.LVL21>:
            return BAD_FUNC_ARG;
  419068:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041906c <.LVL22>:
  41906c:	4770      	bx	lr
  41906e:	bf00      	nop
  419070:	f3bcc908 	.word	0xf3bcc908
  419074:	6a09e667 	.word	0x6a09e667
  419078:	84caa73b 	.word	0x84caa73b
  41907c:	bb67ae85 	.word	0xbb67ae85
  419080:	fe94f82b 	.word	0xfe94f82b
  419084:	3c6ef372 	.word	0x3c6ef372
  419088:	5f1d36f1 	.word	0x5f1d36f1
  41908c:	a54ff53a 	.word	0xa54ff53a
  419090:	ade682d1 	.word	0xade682d1
  419094:	510e527f 	.word	0x510e527f
  419098:	2b3e6c1f 	.word	0x2b3e6c1f
  41909c:	9b05688c 	.word	0x9b05688c
  4190a0:	fb41bd6b 	.word	0xfb41bd6b
  4190a4:	1f83d9ab 	.word	0x1f83d9ab
  4190a8:	137e2179 	.word	0x137e2179
  4190ac:	5be0cd19 	.word	0x5be0cd19

Disassembly of section .text.wc_InitSha384_ex%145:

004190b0 <wc_InitSha384_ex>:
#else
int wc_InitSha384_ex(Sha384* sha384, void* heap, int devId)
{
    int ret;

    if (sha384 == NULL) {
  4190b0:	2800      	cmp	r0, #0
  4190b2:	d035      	beq.n	419120 <.LVL142>
{
  4190b4:	b430      	push	{r4, r5}

004190b6 <.LCFI19>:
  4190b6:	4603      	mov	r3, r0
        return BAD_FUNC_ARG;
    }

    sha384->heap = heap;
  4190b8:	f8c0 10d8 	str.w	r1, [r0, #216]	; 0xd8

004190bc <.LBB925>:
    sha384->digest[0] = W64LIT(0xcbbb9d5dc1059ed8);
  4190bc:	a11a      	add	r1, pc, #104	; (adr r1, 419128 <.LVL143+0x4>)
  4190be:	e9d1 0100 	ldrd	r0, r1, [r1]

004190c2 <.LVL140>:
  4190c2:	e9c3 0106 	strd	r0, r1, [r3, #24]
    sha384->digest[1] = W64LIT(0x629a292a367cd507);
  4190c6:	a11a      	add	r1, pc, #104	; (adr r1, 419130 <.LVL143+0xc>)
  4190c8:	e9d1 0100 	ldrd	r0, r1, [r1]
  4190cc:	e9c3 0108 	strd	r0, r1, [r3, #32]
    sha384->digest[2] = W64LIT(0x9159015a3070dd17);
  4190d0:	a119      	add	r1, pc, #100	; (adr r1, 419138 <.LVL143+0x14>)
  4190d2:	e9d1 0100 	ldrd	r0, r1, [r1]
  4190d6:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
    sha384->digest[3] = W64LIT(0x152fecd8f70e5939);
  4190da:	a119      	add	r1, pc, #100	; (adr r1, 419140 <.LVL143+0x1c>)
  4190dc:	e9d1 0100 	ldrd	r0, r1, [r1]
  4190e0:	e9c3 010c 	strd	r0, r1, [r3, #48]	; 0x30
    sha384->digest[4] = W64LIT(0x67332667ffc00b31);
  4190e4:	a118      	add	r1, pc, #96	; (adr r1, 419148 <.LVL143+0x24>)
  4190e6:	e9d1 0100 	ldrd	r0, r1, [r1]
  4190ea:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
    sha384->digest[5] = W64LIT(0x8eb44a8768581511);
  4190ee:	a118      	add	r1, pc, #96	; (adr r1, 419150 <.LVL143+0x2c>)
  4190f0:	e9d1 0100 	ldrd	r0, r1, [r1]
  4190f4:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
    sha384->digest[6] = W64LIT(0xdb0c2e0d64f98fa7);
  4190f8:	a117      	add	r1, pc, #92	; (adr r1, 419158 <.LVL143+0x34>)
  4190fa:	e9d1 0100 	ldrd	r0, r1, [r1]
  4190fe:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
    sha384->digest[7] = W64LIT(0x47b5481dbefa4fa4);
  419102:	a117      	add	r1, pc, #92	; (adr r1, 419160 <.LVL143+0x3c>)
  419104:	e9d1 0100 	ldrd	r0, r1, [r1]
  419108:	e9c3 0114 	strd	r0, r1, [r3, #80]	; 0x50
    sha384->buffLen = 0;
  41910c:	2000      	movs	r0, #0
  41910e:	6018      	str	r0, [r3, #0]
    sha384->loLen   = 0;
  419110:	2400      	movs	r4, #0
  419112:	2500      	movs	r5, #0
  419114:	e9c3 4502 	strd	r4, r5, [r3, #8]
    sha384->hiLen   = 0;
  419118:	e9c3 4504 	strd	r4, r5, [r3, #16]

0041911c <.LBE925>:
#else
    (void)devId;
#endif /* WOLFSSL_ASYNC_CRYPT */

    return ret;
}
  41911c:	bc30      	pop	{r4, r5}

0041911e <.LCFI20>:
  41911e:	4770      	bx	lr

00419120 <.LVL142>:
        return BAD_FUNC_ARG;
  419120:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00419124 <.LVL143>:
  419124:	4770      	bx	lr
  419126:	bf00      	nop
  419128:	c1059ed8 	.word	0xc1059ed8
  41912c:	cbbb9d5d 	.word	0xcbbb9d5d
  419130:	367cd507 	.word	0x367cd507
  419134:	629a292a 	.word	0x629a292a
  419138:	3070dd17 	.word	0x3070dd17
  41913c:	9159015a 	.word	0x9159015a
  419140:	f70e5939 	.word	0xf70e5939
  419144:	152fecd8 	.word	0x152fecd8
  419148:	ffc00b31 	.word	0xffc00b31
  41914c:	67332667 	.word	0x67332667
  419150:	68581511 	.word	0x68581511
  419154:	8eb44a87 	.word	0x8eb44a87
  419158:	64f98fa7 	.word	0x64f98fa7
  41915c:	db0c2e0d 	.word	0xdb0c2e0d
  419160:	befa4fa4 	.word	0xbefa4fa4
  419164:	47b5481d 	.word	0x47b5481d

Disassembly of section .text.wc_Des3_CbcDecrypt%146:

00419168 <wc_Des3_CbcDecrypt>:

    int wc_Des3_CbcDecrypt(Des3* des, byte* out, const byte* in, word32 sz)
    {
        word32 blocks;

        if (des == NULL || out == NULL || in == NULL) {
  419168:	2a00      	cmp	r2, #0
  41916a:	bf18      	it	ne
  41916c:	2900      	cmpne	r1, #0
  41916e:	d051      	beq.n	419214 <.LCFI16>
    {
  419170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

00419174 <.LCFI15>:
  419174:	4682      	mov	sl, r0
  419176:	460c      	mov	r4, r1
  419178:	4616      	mov	r6, r2
        if (des == NULL || out == NULL || in == NULL) {
  41917a:	2800      	cmp	r0, #0
  41917c:	d043      	beq.n	419206 <.LVL240>
            }
        #endif
        }
    #endif /* WOLFSSL_ASYNC_CRYPT */

        blocks = sz / DES_BLOCK_SIZE;
  41917e:	08db      	lsrs	r3, r3, #3

00419180 <.LVL229>:
        while (blocks--) {
  419180:	f103 38ff 	add.w	r8, r3, #4294967295

00419184 <.LVL230>:
  419184:	2b00      	cmp	r3, #0
  419186:	d042      	beq.n	41920e <.LVL242>
  419188:	1e4f      	subs	r7, r1, #1
            XMEMCPY(des->tmp, in, DES_BLOCK_SIZE);
  41918a:	f500 75c4 	add.w	r5, r0, #392	; 0x188
            Des3ProcessBlock(des, (byte*)des->tmp, out);
            xorbuf(out, (byte*)des->reg, DES_BLOCK_SIZE);
  41918e:	f500 79c0 	add.w	r9, r0, #384	; 0x180
  419192:	e019      	b.n	4191c8 <.LBE285+0x1c>

00419194 <.LBB285>:
    for (i = 0; i < n; i++) r[i] ^= a[i];
  419194:	f8d7 3001 	ldr.w	r3, [r7, #1]
  419198:	f8da 2180 	ldr.w	r2, [sl, #384]	; 0x180
  41919c:	4053      	eors	r3, r2
  41919e:	f8c7 3001 	str.w	r3, [r7, #1]

004191a2 <.LVL232>:
  4191a2:	6863      	ldr	r3, [r4, #4]
  4191a4:	f8da 2184 	ldr.w	r2, [sl, #388]	; 0x184
  4191a8:	4053      	eors	r3, r2
  4191aa:	6063      	str	r3, [r4, #4]

004191ac <.LBE285>:
            XMEMCPY(des->reg, des->tmp, DES_BLOCK_SIZE);
  4191ac:	682a      	ldr	r2, [r5, #0]
  4191ae:	686b      	ldr	r3, [r5, #4]
  4191b0:	f8c9 2000 	str.w	r2, [r9]
  4191b4:	f8c9 3004 	str.w	r3, [r9, #4]

            out += DES_BLOCK_SIZE;
  4191b8:	3408      	adds	r4, #8
            in  += DES_BLOCK_SIZE;
  4191ba:	3608      	adds	r6, #8
        while (blocks--) {
  4191bc:	f108 38ff 	add.w	r8, r8, #4294967295
  4191c0:	3708      	adds	r7, #8
  4191c2:	f1b8 3fff 	cmp.w	r8, #4294967295
  4191c6:	d01b      	beq.n	419200 <.LBE289>
            XMEMCPY(des->tmp, in, DES_BLOCK_SIZE);
  4191c8:	6832      	ldr	r2, [r6, #0]
  4191ca:	6873      	ldr	r3, [r6, #4]
  4191cc:	602a      	str	r2, [r5, #0]
  4191ce:	606b      	str	r3, [r5, #4]
            Des3ProcessBlock(des, (byte*)des->tmp, out);
  4191d0:	4622      	mov	r2, r4
  4191d2:	4629      	mov	r1, r5
  4191d4:	4650      	mov	r0, sl
  4191d6:	f7fd fa53 	bl	416680 <.LFE19>

004191da <.LBB291>:
    if (((wolfssl_word)buf | (wolfssl_word)mask | count) % WOLFSSL_WORD_SIZE == 0)
  4191da:	ea44 0309 	orr.w	r3, r4, r9
  4191de:	f013 0f03 	tst.w	r3, #3
  4191e2:	d0d7      	beq.n	419194 <.LBB285>
  4191e4:	f20a 117f 	addw	r1, sl, #383	; 0x17f
  4191e8:	f104 0e07 	add.w	lr, r4, #7
  4191ec:	463b      	mov	r3, r7

004191ee <.LBB289>:
        for (i = 0; i < count; i++) b[i] ^= m[i];
  4191ee:	785a      	ldrb	r2, [r3, #1]
  4191f0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  4191f4:	4042      	eors	r2, r0
  4191f6:	f803 2f01 	strb.w	r2, [r3, #1]!
  4191fa:	4573      	cmp	r3, lr
  4191fc:	d1f7      	bne.n	4191ee <.LBB289>
  4191fe:	e7d5      	b.n	4191ac <.LBE285>

00419200 <.LBE289>:
        }
        return 0;
  419200:	2000      	movs	r0, #0
  419202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00419206 <.LVL240>:
            return BAD_FUNC_ARG;
  419206:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041920a <.LVL241>:
  41920a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0041920e <.LVL242>:
        return 0;
  41920e:	2000      	movs	r0, #0

00419210 <.LVL243>:
    }
  419210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00419214 <.LCFI16>:
            return BAD_FUNC_ARG;
  419214:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00419218 <.LVL245>:
    }
  419218:	4770      	bx	lr

Disassembly of section .text.md5_test%147:

0041921c <md5_test>:
{
  41921c:	b570      	push	{r4, r5, r6, lr}

0041921e <.LCFI0>:
  41921e:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218

00419222 <.LCFI1>:
    test_md5[0] = a;
  419222:	4b28      	ldr	r3, [pc, #160]	; (4192c4 <.LCFI2+0x4>)
  419224:	9300      	str	r3, [sp, #0]
  419226:	1d1a      	adds	r2, r3, #4
  419228:	9201      	str	r2, [sp, #4]
  41922a:	2203      	movs	r2, #3
  41922c:	9202      	str	r2, [sp, #8]
  41922e:	2210      	movs	r2, #16
  419230:	9203      	str	r2, [sp, #12]
    test_md5[1] = b;
  419232:	f103 0118 	add.w	r1, r3, #24
  419236:	9104      	str	r1, [sp, #16]
  419238:	f103 0128 	add.w	r1, r3, #40	; 0x28
  41923c:	9105      	str	r1, [sp, #20]
  41923e:	210e      	movs	r1, #14
  419240:	9106      	str	r1, [sp, #24]
  419242:	9207      	str	r2, [sp, #28]
    test_md5[2] = c;
  419244:	f103 013c 	add.w	r1, r3, #60	; 0x3c
  419248:	9108      	str	r1, [sp, #32]
  41924a:	f103 0158 	add.w	r1, r3, #88	; 0x58
  41924e:	9109      	str	r1, [sp, #36]	; 0x24
  419250:	211a      	movs	r1, #26
  419252:	910a      	str	r1, [sp, #40]	; 0x28
  419254:	920b      	str	r2, [sp, #44]	; 0x2c
    test_md5[3] = d;
  419256:	f103 016c 	add.w	r1, r3, #108	; 0x6c
  41925a:	910c      	str	r1, [sp, #48]	; 0x30
  41925c:	f103 01ac 	add.w	r1, r3, #172	; 0xac
  419260:	910d      	str	r1, [sp, #52]	; 0x34
  419262:	213e      	movs	r1, #62	; 0x3e
  419264:	910e      	str	r1, [sp, #56]	; 0x38
  419266:	920f      	str	r2, [sp, #60]	; 0x3c
    test_md5[4] = e;
  419268:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
  41926c:	9110      	str	r1, [sp, #64]	; 0x40
  41926e:	f503 738a 	add.w	r3, r3, #276	; 0x114
  419272:	9311      	str	r3, [sp, #68]	; 0x44
  419274:	2350      	movs	r3, #80	; 0x50
  419276:	9312      	str	r3, [sp, #72]	; 0x48
  419278:	9213      	str	r2, [sp, #76]	; 0x4c
    CRYPT_MD5_Initialize(&md5);
  41927a:	a818      	add	r0, sp, #96	; 0x60
  41927c:	f004 fbe6 	bl	41da4c <.LBE48>

00419280 <.LVL1>:
    appData.md5_test_result = times;
  419280:	2205      	movs	r2, #5
  419282:	4b11      	ldr	r3, [pc, #68]	; (4192c8 <.LCFI2+0x8>)
  419284:	605a      	str	r2, [r3, #4]

00419286 <.LVL2>:
  419286:	466c      	mov	r4, sp
  419288:	ad14      	add	r5, sp, #80	; 0x50
            appData.md5_test_result--;
  41928a:	461e      	mov	r6, r3
  41928c:	e002      	b.n	419294 <.LVL3+0x6>

0041928e <.LVL3>:
  41928e:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  419290:	42ac      	cmp	r4, r5
  419292:	d013      	beq.n	4192bc <.LVL6+0xc>
        CRYPT_MD5_DataAdd(&md5, (byte*)test_md5[i].input, (word32)test_md5[i].inLen);
  419294:	68a2      	ldr	r2, [r4, #8]
  419296:	6821      	ldr	r1, [r4, #0]
  419298:	a818      	add	r0, sp, #96	; 0x60
  41929a:	f004 fa7d 	bl	41d798 <.LFE142>

0041929e <.LVL4>:
        CRYPT_MD5_Finalize(&md5, hash);
  41929e:	a914      	add	r1, sp, #80	; 0x50
  4192a0:	a818      	add	r0, sp, #96	; 0x60
  4192a2:	f004 fa85 	bl	41d7b0 <.LFE165>

004192a6 <.LVL5>:
        if (memcmp(hash, test_md5[i].output, MD5_DIGEST_SIZE) == 0)
  4192a6:	2210      	movs	r2, #16
  4192a8:	6861      	ldr	r1, [r4, #4]
  4192aa:	a814      	add	r0, sp, #80	; 0x50
  4192ac:	f002 fd2c 	bl	41bd08 <memcmp>

004192b0 <.LVL6>:
  4192b0:	2800      	cmp	r0, #0
  4192b2:	d1ec      	bne.n	41928e <.LVL3>
            appData.md5_test_result--;
  4192b4:	6873      	ldr	r3, [r6, #4]
  4192b6:	3b01      	subs	r3, #1
  4192b8:	6073      	str	r3, [r6, #4]
  4192ba:	e7e8      	b.n	41928e <.LVL3>
}
  4192bc:	f50d 7d06 	add.w	sp, sp, #536	; 0x218

004192c0 <.LCFI2>:
  4192c0:	bd70      	pop	{r4, r5, r6, pc}
  4192c2:	bf00      	nop
  4192c4:	0040ab9c 	.word	0x0040ab9c
  4192c8:	2040d534 	.word	0x2040d534

Disassembly of section .text.updatewindow%148:

004192cc <updatewindow>:
{
  4192cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

004192ce <.LCFI2>:
  4192ce:	4607      	mov	r7, r0
  4192d0:	460e      	mov	r6, r1
    state = (struct inflate_state FAR *)strm->state;
  4192d2:	69c4      	ldr	r4, [r0, #28]
    if (state->window == Z_NULL) {
  4192d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
  4192d6:	b343      	cbz	r3, 41932a <.LVL26>

004192d8 <.LVL19>:
    if (state->wsize == 0) {
  4192d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  4192da:	b933      	cbnz	r3, 4192ea <.LVL19+0x12>
        state->wsize = 1U << state->wbits;
  4192dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4192de:	2301      	movs	r3, #1
  4192e0:	4093      	lsls	r3, r2
  4192e2:	62a3      	str	r3, [r4, #40]	; 0x28
        state->wnext = 0;
  4192e4:	2300      	movs	r3, #0
  4192e6:	6323      	str	r3, [r4, #48]	; 0x30
        state->whave = 0;
  4192e8:	62e3      	str	r3, [r4, #44]	; 0x2c
    copy = out - strm->avail_out;
  4192ea:	693b      	ldr	r3, [r7, #16]
  4192ec:	1af6      	subs	r6, r6, r3

004192ee <.LVL20>:
    if (copy >= state->wsize) {
  4192ee:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  4192f0:	42ae      	cmp	r6, r5
  4192f2:	d227      	bcs.n	419344 <.LVL30>
        dist = state->wsize - state->wnext;
  4192f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4192f6:	1aed      	subs	r5, r5, r3

004192f8 <.LVL21>:
  4192f8:	42b5      	cmp	r5, r6
  4192fa:	bf28      	it	cs
  4192fc:	4635      	movcs	r5, r6
        zmemcpy(state->window + state->wnext, strm->next_out - copy, dist);
  4192fe:	6b60      	ldr	r0, [r4, #52]	; 0x34
  419300:	68f9      	ldr	r1, [r7, #12]
  419302:	462a      	mov	r2, r5
  419304:	1b89      	subs	r1, r1, r6
  419306:	4418      	add	r0, r3
  419308:	f7fd f888 	bl	41641c <memcpy>

0041930c <.LVL23>:
        if (copy) {
  41930c:	1b76      	subs	r6, r6, r5

0041930e <.LVL24>:
  41930e:	d124      	bne.n	41935a <.LVL32>
            state->wnext += dist;
  419310:	6b23      	ldr	r3, [r4, #48]	; 0x30
  419312:	442b      	add	r3, r5
  419314:	6323      	str	r3, [r4, #48]	; 0x30
            if (state->wnext == state->wsize) state->wnext = 0;
  419316:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  419318:	4293      	cmp	r3, r2
  41931a:	d029      	beq.n	419370 <.LVL33+0xa>
            if (state->whave < state->wsize) state->whave += dist;
  41931c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  41931e:	428a      	cmp	r2, r1
  419320:	d929      	bls.n	419376 <.LVL33+0x10>
  419322:	440d      	add	r5, r1

00419324 <.LVL25>:
  419324:	62e5      	str	r5, [r4, #44]	; 0x2c
    return 0;
  419326:	2000      	movs	r0, #0
  419328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041932a <.LVL26>:
                        ZALLOC(strm, 1U << state->wbits,
  41932a:	2301      	movs	r3, #1
  41932c:	6a61      	ldr	r1, [r4, #36]	; 0x24

0041932e <.LVL27>:
  41932e:	6a05      	ldr	r5, [r0, #32]
  419330:	461a      	mov	r2, r3
  419332:	fa03 f101 	lsl.w	r1, r3, r1
  419336:	6a80      	ldr	r0, [r0, #40]	; 0x28

00419338 <.LVL28>:
  419338:	47a8      	blx	r5

0041933a <.LVL29>:
        state->window = (unsigned char FAR *)
  41933a:	6360      	str	r0, [r4, #52]	; 0x34
        if (state->window == Z_NULL) return 1;
  41933c:	2800      	cmp	r0, #0
  41933e:	d1cb      	bne.n	4192d8 <.LVL19>
  419340:	2001      	movs	r0, #1
  419342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00419344 <.LVL30>:
        zmemcpy(state->window, strm->next_out - state->wsize, state->wsize);
  419344:	68f9      	ldr	r1, [r7, #12]
  419346:	462a      	mov	r2, r5
  419348:	1b49      	subs	r1, r1, r5
  41934a:	6b60      	ldr	r0, [r4, #52]	; 0x34
  41934c:	f7fd f866 	bl	41641c <memcpy>

00419350 <.LVL31>:
        state->wnext = 0;
  419350:	2000      	movs	r0, #0
  419352:	6320      	str	r0, [r4, #48]	; 0x30
        state->whave = state->wsize;
  419354:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  419356:	62e3      	str	r3, [r4, #44]	; 0x2c
  419358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041935a <.LVL32>:
            zmemcpy(state->window, strm->next_out - copy, copy);
  41935a:	68f9      	ldr	r1, [r7, #12]
  41935c:	4632      	mov	r2, r6
  41935e:	1b89      	subs	r1, r1, r6
  419360:	6b60      	ldr	r0, [r4, #52]	; 0x34
  419362:	f7fd f85b 	bl	41641c <memcpy>

00419366 <.LVL33>:
            state->wnext = copy;
  419366:	6326      	str	r6, [r4, #48]	; 0x30
            state->whave = state->wsize;
  419368:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  41936a:	62e3      	str	r3, [r4, #44]	; 0x2c
    return 0;
  41936c:	2000      	movs	r0, #0
  41936e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (state->wnext == state->wsize) state->wnext = 0;
  419370:	2300      	movs	r3, #0
  419372:	6323      	str	r3, [r4, #48]	; 0x30
  419374:	e7d2      	b.n	41931c <.LVL24+0xe>
    return 0;
  419376:	2000      	movs	r0, #0
}
  419378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

Disassembly of section .text.fp_div_2d%149:

0041937a <fp_div_2d>:
{
  41937a:	b5f0      	push	{r4, r5, r6, r7, lr}

0041937c <.LCFI71>:
  41937c:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c

00419380 <.LCFI72>:
  419380:	4607      	mov	r7, r0
  419382:	4614      	mov	r4, r2
  419384:	461d      	mov	r5, r3
  if (b <= 0) {
  419386:	1e0e      	subs	r6, r1, #0
  419388:	dd21      	ble.n	4193ce <.LVL486>

0041938a <.LBB60>:
    fp_zero(a);
  41938a:	4668      	mov	r0, sp

0041938c <.LVL480>:
  41938c:	f004 fafc 	bl	41d988 <.LFE163>

00419390 <.LBE60>:
  if (d != NULL) {
  419390:	b125      	cbz	r5, 41939c <.LVL482>
    fp_mod_2d (a, b, &t);
  419392:	466a      	mov	r2, sp
  419394:	4631      	mov	r1, r6
  419396:	4638      	mov	r0, r7
  419398:	f000 fd50 	bl	419e3c <fp_mod_2d>

0041939c <.LVL482>:
  fp_copy(a, c);
  41939c:	4621      	mov	r1, r4
  41939e:	4638      	mov	r0, r7
  4193a0:	f004 f836 	bl	41d410 <.LFE194>

004193a4 <.LVL483>:
  if (b >= (int)DIGIT_BIT) {
  4193a4:	2e1f      	cmp	r6, #31
  4193a6:	dc1a      	bgt.n	4193de <.LVL489+0x2>
  D = (b % DIGIT_BIT);
  4193a8:	4273      	negs	r3, r6
  4193aa:	f006 011f 	and.w	r1, r6, #31
  4193ae:	f003 031f 	and.w	r3, r3, #31
  4193b2:	bf58      	it	pl
  4193b4:	4259      	negpl	r1, r3

004193b6 <.LVL484>:
  if (D != 0) {
  4193b6:	b9e1      	cbnz	r1, 4193f2 <.LVL491>

004193b8 <.LVL485>:
  fp_clamp (c);
  4193b8:	6822      	ldr	r2, [r4, #0]
  4193ba:	b34a      	cbz	r2, 419410 <.LVL492+0x18>
  4193bc:	1e53      	subs	r3, r2, #1
  4193be:	1c51      	adds	r1, r2, #1
  4193c0:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
  4193c4:	bb09      	cbnz	r1, 41940a <.LVL492+0x12>
  4193c6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  4193ca:	3204      	adds	r2, #4
  4193cc:	e016      	b.n	4193fc <.LVL492+0x4>

004193ce <.LVL486>:
    fp_copy (a, c);
  4193ce:	4611      	mov	r1, r2

004193d0 <.LVL487>:
  4193d0:	f004 f81e 	bl	41d410 <.LFE194>

004193d4 <.LVL488>:
    if (d != NULL) {
  4193d4:	b31d      	cbz	r5, 41941e <.LVL493>
      fp_zero (d);
  4193d6:	4628      	mov	r0, r5
  4193d8:	f004 fad6 	bl	41d988 <.LFE163>

004193dc <.LVL489>:
  4193dc:	e01f      	b.n	41941e <.LVL493>
    fp_rshd (c, b / DIGIT_BIT);
  4193de:	4631      	mov	r1, r6
  4193e0:	2e00      	cmp	r6, #0
  4193e2:	bfb8      	it	lt
  4193e4:	f106 011f 	addlt.w	r1, r6, #31
  4193e8:	1149      	asrs	r1, r1, #5
  4193ea:	4620      	mov	r0, r4
  4193ec:	f001 fa16 	bl	41a81c <.LFE159>

004193f0 <.LVL490>:
  4193f0:	e7da      	b.n	4193a8 <.LVL483+0x4>

004193f2 <.LVL491>:
    fp_rshb(c, D);
  4193f2:	4620      	mov	r0, r4
  4193f4:	f002 f8c6 	bl	41b584 <.LFE203>

004193f8 <.LVL492>:
  4193f8:	e7de      	b.n	4193b8 <.LVL485>
  fp_clamp (c);
  4193fa:	4603      	mov	r3, r0
  4193fc:	b13b      	cbz	r3, 41940e <.LVL492+0x16>
  4193fe:	1e58      	subs	r0, r3, #1
  419400:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  419404:	2900      	cmp	r1, #0
  419406:	d0f8      	beq.n	4193fa <.LVL492+0x2>
  419408:	6023      	str	r3, [r4, #0]
  41940a:	6863      	ldr	r3, [r4, #4]
  41940c:	e001      	b.n	419412 <.LVL492+0x1a>
  41940e:	6023      	str	r3, [r4, #0]
  419410:	2300      	movs	r3, #0
  419412:	6063      	str	r3, [r4, #4]
  if (d != NULL) {
  419414:	b11d      	cbz	r5, 41941e <.LVL493>
    fp_copy (&t, d);
  419416:	4629      	mov	r1, r5
  419418:	4668      	mov	r0, sp
  41941a:	f003 fff9 	bl	41d410 <.LFE194>

0041941e <.LVL493>:
}
  41941e:	f50d 7d0b 	add.w	sp, sp, #556	; 0x22c

00419422 <.LCFI73>:
  419422:	bdf0      	pop	{r4, r5, r6, r7, pc}

Disassembly of section .text.wc_AesCbcDecrypt%150:

00419424 <wc_AesCbcDecrypt>:



#ifdef HAVE_AES_DECRYPT
int wc_AesCbcDecrypt(Aes* aes, byte* out, const byte* in, word32 sz)
{
  419424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

00419426 <.LCFI10>:
  419426:	4606      	mov	r6, r0
  419428:	460c      	mov	r4, r1
  41942a:	4617      	mov	r7, r2
  41942c:	461d      	mov	r5, r3
    aes_configuration.encrypt_mode = AES_SAME70_DECRYPTION;
  41942e:	4b24      	ldr	r3, [pc, #144]	; (4194c0 <.LVL66+0x2>)

00419430 <.LVL49>:
  419430:	2200      	movs	r2, #0

00419432 <.LVL50>:
  419432:	701a      	strb	r2, [r3, #0]
    aes_configuration.key_size = AES_KEY_SIZE_128;
  419434:	705a      	strb	r2, [r3, #1]
    aes_configuration.start_mode = AES_AUTO_START;
  419436:	2101      	movs	r1, #1

00419438 <.LVL51>:
  419438:	7099      	strb	r1, [r3, #2]
    aes_configuration.opmode = AES_CBC_MODE;
  41943a:	70d9      	strb	r1, [r3, #3]
    aes_configuration.cfb_size = AES_CFB_SIZE_128;
  41943c:	711a      	strb	r2, [r3, #4]
    aes_configuration.lod = 0;
  41943e:	609a      	str	r2, [r3, #8]
    aes_configuration.gtag_en = 0;
  419440:	60da      	str	r2, [r3, #12]
    aes_configuration.processing_delay = 0;
  419442:	611a      	str	r2, [r3, #16]

00419444 <.LBB10>:
    AES_REGS->AES_MR = ul_mode;
  419444:	4a1f      	ldr	r2, [pc, #124]	; (4194c4 <.LVL66+0x6>)
  419446:	4b20      	ldr	r3, [pc, #128]	; (4194c8 <.LVL66+0xa>)
  419448:	605a      	str	r2, [r3, #4]

0041944a <.LBE10>:

    AesConfigure(&aes_configuration);
    AesWriteKey(aes->key_ce, aes->keylen);
  41944a:	f8d0 10f4 	ldr.w	r1, [r0, #244]	; 0xf4
  41944e:	f500 7096 	add.w	r0, r0, #300	; 0x12c

00419452 <.LVL54>:
  419452:	f003 fc8b 	bl	41cd6c <.LFE47>

00419456 <.LVL55>:
    AesWriteIV(aes->iv_ce);
  419456:	f506 70a6 	add.w	r0, r6, #332	; 0x14c
  41945a:	f004 fa39 	bl	41d8d0 <.LFE3>

0041945e <.LVL56>:
    /* set up pointers for input and output buffers */
    const uint32_t *inptr = (const uint32_t *)in;
    uint32_t *outptr = (uint32_t *)out;

    uint32_t block;   /* 16 bytes = 4 32bit block size */
    for (block = 0; block < sz; block += 16)
  41945e:	b335      	cbz	r5, 4194ae <.LVL64>
  419460:	f107 0010 	add.w	r0, r7, #16
  419464:	f104 0110 	add.w	r1, r4, #16
  419468:	2400      	movs	r4, #0

0041946a <.LVL57>:
    {
        /* Write the data to be ciphered to the input data registers. */
        AES_REGS->AES_IDATAR[0] = *inptr++;
  41946a:	4a17      	ldr	r2, [pc, #92]	; (4194c8 <.LVL66+0xa>)

0041946c <.LVL58>:
  41946c:	f850 3c10 	ldr.w	r3, [r0, #-16]
  419470:	6413      	str	r3, [r2, #64]	; 0x40
        AES_REGS->AES_IDATAR[1] = *inptr++;
  419472:	f850 3c0c 	ldr.w	r3, [r0, #-12]
  419476:	6453      	str	r3, [r2, #68]	; 0x44
        AES_REGS->AES_IDATAR[2] = *inptr++;
  419478:	f850 3c08 	ldr.w	r3, [r0, #-8]
  41947c:	6493      	str	r3, [r2, #72]	; 0x48
        AES_REGS->AES_IDATAR[3] = *inptr++;
  41947e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  419482:	64d3      	str	r3, [r2, #76]	; 0x4c

        /* Note the blocking here - state machine this? */
        while (!(AES_REGS->AES_ISR & AES_ISR_DATRDY_Msk))  ;
  419484:	69d3      	ldr	r3, [r2, #28]
  419486:	f013 0f01 	tst.w	r3, #1
  41948a:	d0fb      	beq.n	419484 <.LVL58+0x18>

0041948c <.LVL59>:

        /* encrypt complete - read out the data */
        *outptr++ = AES_REGS->AES_ODATAR[0];
  41948c:	6d13      	ldr	r3, [r2, #80]	; 0x50
  41948e:	f841 3c10 	str.w	r3, [r1, #-16]

00419492 <.LVL60>:
        *outptr++ = AES_REGS->AES_ODATAR[1];
  419492:	6d53      	ldr	r3, [r2, #84]	; 0x54
  419494:	f841 3c0c 	str.w	r3, [r1, #-12]

00419498 <.LVL61>:
        *outptr++ = AES_REGS->AES_ODATAR[2];
  419498:	6d93      	ldr	r3, [r2, #88]	; 0x58
  41949a:	f841 3c08 	str.w	r3, [r1, #-8]

0041949e <.LVL62>:
        *outptr++ = AES_REGS->AES_ODATAR[3];
  41949e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
  4194a0:	f841 3c04 	str.w	r3, [r1, #-4]
    for (block = 0; block < sz; block += 16)
  4194a4:	3410      	adds	r4, #16

004194a6 <.LVL63>:
  4194a6:	3010      	adds	r0, #16
  4194a8:	3110      	adds	r1, #16
  4194aa:	42a5      	cmp	r5, r4
  4194ac:	d8de      	bhi.n	41946c <.LVL58>

004194ae <.LVL64>:
    }

    /* Last IV equals last cipher text */
    wc_AesSetIV(aes, in + sz - 16);
  4194ae:	f1a5 0110 	sub.w	r1, r5, #16
  4194b2:	4439      	add	r1, r7
  4194b4:	4630      	mov	r0, r6
  4194b6:	f003 fbaf 	bl	41cc18 <.LFE148>

004194ba <.LVL65>:

    return 0;
}
  4194ba:	2000      	movs	r0, #0
  4194bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

004194be <.LVL66>:
  4194be:	bf00      	nop
  4194c0:	2040d718 	.word	0x2040d718
  4194c4:	00e01100 	.word	0x00e01100
  4194c8:	4006c000 	.word	0x4006c000

Disassembly of section .text._tr_align%151:

004194cc <_tr_align>:
{
  4194cc:	b570      	push	{r4, r5, r6, lr}

004194ce <.LBB73>:
    send_bits(s, STATIC_TREES<<1, 3);
  4194ce:	f241 63bc 	movw	r3, #5820	; 0x16bc
  4194d2:	58c3      	ldr	r3, [r0, r3]
  4194d4:	2b0d      	cmp	r3, #13
  4194d6:	dd29      	ble.n	41952c <.LBB77>

004194d8 <.LBB74>:
  4194d8:	f241 62b8 	movw	r2, #5816	; 0x16b8
  4194dc:	2102      	movs	r1, #2
  4194de:	fa01 f303 	lsl.w	r3, r1, r3
  4194e2:	5a84      	ldrh	r4, [r0, r2]
  4194e4:	4323      	orrs	r3, r4
  4194e6:	b21b      	sxth	r3, r3
  4194e8:	5283      	strh	r3, [r0, r2]
  4194ea:	6885      	ldr	r5, [r0, #8]
  4194ec:	6944      	ldr	r4, [r0, #20]
  4194ee:	1c66      	adds	r6, r4, #1
  4194f0:	6146      	str	r6, [r0, #20]
  4194f2:	552b      	strb	r3, [r5, r4]
  4194f4:	6885      	ldr	r5, [r0, #8]
  4194f6:	6944      	ldr	r4, [r0, #20]
  4194f8:	1c63      	adds	r3, r4, #1
  4194fa:	6143      	str	r3, [r0, #20]
  4194fc:	5a83      	ldrh	r3, [r0, r2]
  4194fe:	0a1b      	lsrs	r3, r3, #8
  419500:	552b      	strb	r3, [r5, r4]
  419502:	f241 64bc 	movw	r4, #5820	; 0x16bc
  419506:	5903      	ldr	r3, [r0, r4]
  419508:	f1c3 0510 	rsb	r5, r3, #16
  41950c:	4129      	asrs	r1, r5
  41950e:	5281      	strh	r1, [r0, r2]
  419510:	3b0d      	subs	r3, #13
  419512:	5103      	str	r3, [r0, r4]

00419514 <.LBB75>:
    send_code(s, END_BLOCK, static_ltree);
  419514:	f241 63bc 	movw	r3, #5820	; 0x16bc
  419518:	58c3      	ldr	r3, [r0, r3]
  41951a:	2b09      	cmp	r3, #9
  41951c:	dc12      	bgt.n	419544 <.LBB76>
  41951e:	3307      	adds	r3, #7
  419520:	f241 62bc 	movw	r2, #5820	; 0x16bc
  419524:	5083      	str	r3, [r0, r2]

00419526 <.LBE75>:
    bi_flush(s);
  419526:	f002 fb5f 	bl	41bbe8 <.LFE232>

0041952a <.LVL310>:
  41952a:	bd70      	pop	{r4, r5, r6, pc}

0041952c <.LBB77>:
    send_bits(s, STATIC_TREES<<1, 3);
  41952c:	f241 61b8 	movw	r1, #5816	; 0x16b8
  419530:	2202      	movs	r2, #2
  419532:	409a      	lsls	r2, r3
  419534:	5a44      	ldrh	r4, [r0, r1]
  419536:	4322      	orrs	r2, r4
  419538:	5242      	strh	r2, [r0, r1]
  41953a:	3303      	adds	r3, #3
  41953c:	f241 62bc 	movw	r2, #5820	; 0x16bc
  419540:	5083      	str	r3, [r0, r2]
  419542:	e7e7      	b.n	419514 <.LBB75>

00419544 <.LBB76>:
    send_code(s, END_BLOCK, static_ltree);
  419544:	f241 62b8 	movw	r2, #5816	; 0x16b8
  419548:	5a84      	ldrh	r4, [r0, r2]
  41954a:	6881      	ldr	r1, [r0, #8]
  41954c:	6943      	ldr	r3, [r0, #20]
  41954e:	1c5d      	adds	r5, r3, #1
  419550:	6145      	str	r5, [r0, #20]
  419552:	54cc      	strb	r4, [r1, r3]
  419554:	6884      	ldr	r4, [r0, #8]
  419556:	6941      	ldr	r1, [r0, #20]
  419558:	1c4b      	adds	r3, r1, #1
  41955a:	6143      	str	r3, [r0, #20]
  41955c:	5a83      	ldrh	r3, [r0, r2]
  41955e:	0a1b      	lsrs	r3, r3, #8
  419560:	5463      	strb	r3, [r4, r1]
  419562:	f241 61bc 	movw	r1, #5820	; 0x16bc
  419566:	5843      	ldr	r3, [r0, r1]
  419568:	2400      	movs	r4, #0
  41956a:	5284      	strh	r4, [r0, r2]
  41956c:	3b09      	subs	r3, #9
  41956e:	5043      	str	r3, [r0, r1]

00419570 <.LBE76>:
  419570:	e7d9      	b.n	419526 <.LBE75>

Disassembly of section .text.fp_mul_2d%152:

00419572 <fp_mul_2d>:
{
  419572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

00419574 <.LCFI61>:
  419574:	460f      	mov	r7, r1
  419576:	4614      	mov	r4, r2
   fp_copy(a, c);
  419578:	4611      	mov	r1, r2

0041957a <.LVL393>:
  41957a:	f003 ff49 	bl	41d410 <.LFE194>

0041957e <.LVL394>:
   if (b >= DIGIT_BIT) {
  41957e:	2f1f      	cmp	r7, #31
  419580:	dc12      	bgt.n	4195a8 <.LVL399>
   b %= DIGIT_BIT;
  419582:	427b      	negs	r3, r7
  419584:	f007 071f 	and.w	r7, r7, #31

00419588 <.LVL395>:
  419588:	f003 031f 	and.w	r3, r3, #31
  41958c:	bf58      	it	pl
  41958e:	425f      	negpl	r7, r3

00419590 <.LVL396>:
   if (b != 0) {
  419590:	b347      	cbz	r7, 4195e4 <.LVL407>

00419592 <.LVL397>:
      shift = DIGIT_BIT - b;
  419592:	f1c7 0c20 	rsb	ip, r7, #32

00419596 <.LVL398>:
      for (x = 0; x < c->used; x++) {
  419596:	f8d4 e000 	ldr.w	lr, [r4]
  41959a:	f1be 0f00 	cmp.w	lr, #0
  41959e:	dd21      	ble.n	4195e4 <.LVL407>
  4195a0:	1d21      	adds	r1, r4, #4
  4195a2:	2000      	movs	r0, #0
  4195a4:	4606      	mov	r6, r0
  4195a6:	e00a      	b.n	4195be <.LVL402>

004195a8 <.LVL399>:
      fp_lshd(c, b/DIGIT_BIT);
  4195a8:	4639      	mov	r1, r7
  4195aa:	2f00      	cmp	r7, #0
  4195ac:	bfb8      	it	lt
  4195ae:	f107 011f 	addlt.w	r1, r7, #31
  4195b2:	1149      	asrs	r1, r1, #5
  4195b4:	4620      	mov	r0, r4
  4195b6:	f001 f86a 	bl	41a68e <.LFE26>

004195ba <.LVL400>:
  4195ba:	e7e2      	b.n	419582 <.LVL394+0x4>

004195bc <.LVL401>:
      for (x = 0; x < c->used; x++) {
  4195bc:	4610      	mov	r0, r2

004195be <.LVL402>:
          carrytmp = c->dp[x] >> shift;
  4195be:	684b      	ldr	r3, [r1, #4]
  4195c0:	fa23 f50c 	lsr.w	r5, r3, ip

004195c4 <.LVL403>:
          c->dp[x] = (c->dp[x] << b) + carry;
  4195c4:	40bb      	lsls	r3, r7
  4195c6:	4433      	add	r3, r6
  4195c8:	f841 3f04 	str.w	r3, [r1, #4]!

004195cc <.LVL404>:
      for (x = 0; x < c->used; x++) {
  4195cc:	1c42      	adds	r2, r0, #1

004195ce <.LVL405>:
          carrytmp = c->dp[x] >> shift;
  4195ce:	462e      	mov	r6, r5
      for (x = 0; x < c->used; x++) {
  4195d0:	4572      	cmp	r2, lr
  4195d2:	d1f3      	bne.n	4195bc <.LVL401>
      if (carry && x < FP_SIZE) {
  4195d4:	b135      	cbz	r5, 4195e4 <.LVL407>
  4195d6:	2a87      	cmp	r2, #135	; 0x87
  4195d8:	dc04      	bgt.n	4195e4 <.LVL407>
         c->dp[c->used++] = carry;
  4195da:	3002      	adds	r0, #2
  4195dc:	6020      	str	r0, [r4, #0]
  4195de:	3202      	adds	r2, #2

004195e0 <.LVL406>:
  4195e0:	f844 5022 	str.w	r5, [r4, r2, lsl #2]

004195e4 <.LVL407>:
   fp_clamp(c);
  4195e4:	6822      	ldr	r2, [r4, #0]
  4195e6:	b1a2      	cbz	r2, 419612 <.LVL407+0x2e>
  4195e8:	1e53      	subs	r3, r2, #1
  4195ea:	1c51      	adds	r1, r2, #1
  4195ec:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
  4195f0:	b959      	cbnz	r1, 41960a <.LVL407+0x26>
  4195f2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  4195f6:	3204      	adds	r2, #4
  4195f8:	e000      	b.n	4195fc <.LVL407+0x18>
  4195fa:	4603      	mov	r3, r0
  4195fc:	b143      	cbz	r3, 419610 <.LVL407+0x2c>
  4195fe:	1e58      	subs	r0, r3, #1
  419600:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  419604:	2900      	cmp	r1, #0
  419606:	d0f8      	beq.n	4195fa <.LVL407+0x16>
  419608:	6023      	str	r3, [r4, #0]
  41960a:	6863      	ldr	r3, [r4, #4]
  41960c:	6063      	str	r3, [r4, #4]
}
  41960e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  419610:	6023      	str	r3, [r4, #0]
   fp_clamp(c);
  419612:	2300      	movs	r3, #0
  419614:	e7fa      	b.n	41960c <.LVL407+0x28>

Disassembly of section .text.__lshift%153:

00419618 <__lshift>:
  419618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

0041961c <.LCFI11>:
  41961c:	4691      	mov	r9, r2
  41961e:	690a      	ldr	r2, [r1, #16]

00419620 <.LVL184>:
  419620:	688b      	ldr	r3, [r1, #8]
  419622:	ea4f 1469 	mov.w	r4, r9, asr #5

00419626 <.LVL185>:
  419626:	eb04 0802 	add.w	r8, r4, r2
  41962a:	f108 0501 	add.w	r5, r8, #1
  41962e:	429d      	cmp	r5, r3
  419630:	460e      	mov	r6, r1
  419632:	4607      	mov	r7, r0
  419634:	6849      	ldr	r1, [r1, #4]

00419636 <.LVL186>:
  419636:	dd04      	ble.n	419642 <.LVL188+0x2>
  419638:	005b      	lsls	r3, r3, #1

0041963a <.LVL187>:
  41963a:	429d      	cmp	r5, r3
  41963c:	f101 0101 	add.w	r1, r1, #1

00419640 <.LVL188>:
  419640:	dcfa      	bgt.n	419638 <.LVL186+0x2>
  419642:	4638      	mov	r0, r7

00419644 <.LVL189>:
  419644:	f002 ff0a 	bl	41c45c <.LFE2>

00419648 <.LVL190>:
  419648:	2c00      	cmp	r4, #0
  41964a:	f100 0314 	add.w	r3, r0, #20

0041964e <.LVL191>:
  41964e:	dd06      	ble.n	41965e <.LVL193+0x4>
  419650:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  419654:	2100      	movs	r1, #0

00419656 <.LVL192>:
  419656:	f843 1b04 	str.w	r1, [r3], #4

0041965a <.LVL193>:
  41965a:	429a      	cmp	r2, r3
  41965c:	d1fb      	bne.n	419656 <.LVL192>
  41965e:	6934      	ldr	r4, [r6, #16]

00419660 <.LVL194>:
  419660:	f106 0114 	add.w	r1, r6, #20

00419664 <.LVL195>:
  419664:	f019 091f 	ands.w	r9, r9, #31

00419668 <.LVL196>:
  419668:	eb01 0e84 	add.w	lr, r1, r4, lsl #2

0041966c <.LVL197>:
  41966c:	d01d      	beq.n	4196aa <.LVL208>
  41966e:	f1c9 0c20 	rsb	ip, r9, #32

00419672 <.LVL198>:
  419672:	2200      	movs	r2, #0

00419674 <.LVL199>:
  419674:	680c      	ldr	r4, [r1, #0]
  419676:	fa04 f409 	lsl.w	r4, r4, r9
  41967a:	4314      	orrs	r4, r2
  41967c:	f843 4b04 	str.w	r4, [r3], #4

00419680 <.LVL200>:
  419680:	f851 2b04 	ldr.w	r2, [r1], #4

00419684 <.LVL201>:
  419684:	458e      	cmp	lr, r1
  419686:	fa22 f20c 	lsr.w	r2, r2, ip

0041968a <.LVL202>:
  41968a:	d8f3      	bhi.n	419674 <.LVL199>
  41968c:	601a      	str	r2, [r3, #0]
  41968e:	b10a      	cbz	r2, 419694 <.LBB24>

00419690 <.LVL203>:
  419690:	f108 0502 	add.w	r5, r8, #2

00419694 <.LBB24>:
  419694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  419696:	6872      	ldr	r2, [r6, #4]

00419698 <.LBE24>:
  419698:	3d01      	subs	r5, #1

0041969a <.LBB28>:
  41969a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]

0041969e <.LBE28>:
  41969e:	6105      	str	r5, [r0, #16]

004196a0 <.LBB29>:
  4196a0:	6031      	str	r1, [r6, #0]
  4196a2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]

004196a6 <.LBE29>:
  4196a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

004196aa <.LVL208>:
  4196aa:	3b04      	subs	r3, #4

004196ac <.LVL209>:
  4196ac:	f851 2b04 	ldr.w	r2, [r1], #4

004196b0 <.LVL210>:
  4196b0:	f843 2f04 	str.w	r2, [r3, #4]!
  4196b4:	458e      	cmp	lr, r1
  4196b6:	d8f9      	bhi.n	4196ac <.LVL209>
  4196b8:	e7ec      	b.n	419694 <.LBB24>

004196ba <.LFE26>:
  4196ba:	bf00      	nop

Disassembly of section .text.__register_exitproc%154:

004196bc <__register_exitproc>:
  4196bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

004196c0 <.LCFI0>:
  4196c0:	4c25      	ldr	r4, [pc, #148]	; (419758 <.LVL14+0x2>)
  4196c2:	6825      	ldr	r5, [r4, #0]
  4196c4:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148

004196c8 <.LVL1>:
  4196c8:	4606      	mov	r6, r0
  4196ca:	4688      	mov	r8, r1
  4196cc:	4692      	mov	sl, r2
  4196ce:	4699      	mov	r9, r3
  4196d0:	b3c4      	cbz	r4, 419744 <.LVL11>
  4196d2:	6860      	ldr	r0, [r4, #4]

004196d4 <.LVL2>:
  4196d4:	281f      	cmp	r0, #31
  4196d6:	dc17      	bgt.n	419708 <.LVL6>
  4196d8:	1c43      	adds	r3, r0, #1

004196da <.LVL3>:
  4196da:	b176      	cbz	r6, 4196fa <.LVL5>

004196dc <.LVL4>:
  4196dc:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  4196e0:	2201      	movs	r2, #1
  4196e2:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  4196e6:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  4196ea:	4082      	lsls	r2, r0
  4196ec:	4311      	orrs	r1, r2
  4196ee:	2e02      	cmp	r6, #2
  4196f0:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  4196f4:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  4196f8:	d01e      	beq.n	419738 <.LVL10>

004196fa <.LVL5>:
  4196fa:	3002      	adds	r0, #2
  4196fc:	6063      	str	r3, [r4, #4]
  4196fe:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  419702:	2000      	movs	r0, #0
  419704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00419708 <.LVL6>:
  419708:	4b14      	ldr	r3, [pc, #80]	; (41975c <.LVL14+0x6>)

0041970a <.LVL7>:
  41970a:	b303      	cbz	r3, 41974e <.LVL13>
  41970c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  419710:	f004 fa16 	bl	41db40 <.LFE0>

00419714 <.LVL8>:
  419714:	4604      	mov	r4, r0
  419716:	b1d0      	cbz	r0, 41974e <.LVL13>
  419718:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  41971c:	2700      	movs	r7, #0
  41971e:	e880 0088 	stmia.w	r0, {r3, r7}
  419722:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  419726:	4638      	mov	r0, r7

00419728 <.LVL9>:
  419728:	2301      	movs	r3, #1
  41972a:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  41972e:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  419732:	2e00      	cmp	r6, #0
  419734:	d0e1      	beq.n	4196fa <.LVL5>
  419736:	e7d1      	b.n	4196dc <.LVL4>

00419738 <.LVL10>:
  419738:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  41973c:	430a      	orrs	r2, r1
  41973e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  419742:	e7da      	b.n	4196fa <.LVL5>

00419744 <.LVL11>:
  419744:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  419748:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  41974c:	e7c1      	b.n	4196d2 <.LVL1+0xa>

0041974e <.LVL13>:
  41974e:	f04f 30ff 	mov.w	r0, #4294967295
  419752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00419756 <.LVL14>:
  419756:	bf00      	nop
  419758:	00417dfc 	.word	0x00417dfc
  41975c:	0041db41 	.word	0x0041db41

Disassembly of section .text.pqdownheap%155:

00419760 <pqdownheap>:
{
  419760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00419764 <.LCFI2>:
    int v = s->heap[k];
  419764:	eb00 0382 	add.w	r3, r0, r2, lsl #2
  419768:	f8d3 8b5c 	ldr.w	r8, [r3, #2908]	; 0xb5c
    int j = k << 1;  /* left son of k */
  41976c:	0053      	lsls	r3, r2, #1

0041976e <.LVL6>:
    while (j <= s->heap_len) {
  41976e:	f241 4450 	movw	r4, #5200	; 0x1450
  419772:	5907      	ldr	r7, [r0, r4]
  419774:	42bb      	cmp	r3, r7
  419776:	dc3e      	bgt.n	4197f6 <.LVL13>
        if (smaller(tree, v, s->heap[j], s->depth)) break;
  419778:	eb01 0e88 	add.w	lr, r1, r8, lsl #2
            smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {
  41977c:	f241 4c58 	movw	ip, #5208	; 0x1458
        if (smaller(tree, v, s->heap[j], s->depth)) break;
  419780:	eb00 0908 	add.w	r9, r0, r8
  419784:	44e1      	add	r9, ip
  419786:	e01d      	b.n	4197c4 <.LVL11>
            smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {
  419788:	4482      	add	sl, r0
  41978a:	4483      	add	fp, r0
  41978c:	f81a 600c 	ldrb.w	r6, [sl, ip]
  419790:	f81b 500c 	ldrb.w	r5, [fp, ip]
  419794:	42ae      	cmp	r6, r5
  419796:	bf88      	it	hi
  419798:	461c      	movhi	r4, r3
  41979a:	e000      	b.n	41979e <.LVL7>
  41979c:	461c      	mov	r4, r3

0041979e <.LVL7>:
        if (smaller(tree, v, s->heap[j], s->depth)) break;
  41979e:	f8be 6000 	ldrh.w	r6, [lr]
  4197a2:	eb00 0384 	add.w	r3, r0, r4, lsl #2
  4197a6:	f8d3 3b5c 	ldr.w	r3, [r3, #2908]	; 0xb5c
  4197aa:	f831 5023 	ldrh.w	r5, [r1, r3, lsl #2]
  4197ae:	42ae      	cmp	r6, r5
  4197b0:	d321      	bcc.n	4197f6 <.LVL13>
  4197b2:	d019      	beq.n	4197e8 <.LVL12>
        s->heap[k] = s->heap[j];  k = j;
  4197b4:	eb00 0282 	add.w	r2, r0, r2, lsl #2

004197b8 <.LVL8>:
  4197b8:	f8c2 3b5c 	str.w	r3, [r2, #2908]	; 0xb5c

004197bc <.LVL9>:
        j <<= 1;
  4197bc:	0063      	lsls	r3, r4, #1

004197be <.LVL10>:
  4197be:	4622      	mov	r2, r4
    while (j <= s->heap_len) {
  4197c0:	42bb      	cmp	r3, r7
  4197c2:	dc18      	bgt.n	4197f6 <.LVL13>

004197c4 <.LVL11>:
        if (j < s->heap_len &&
  4197c4:	429f      	cmp	r7, r3
  4197c6:	dde9      	ble.n	41979c <.LVL6+0x2e>
            smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {
  4197c8:	1c5c      	adds	r4, r3, #1
  4197ca:	eb00 0583 	add.w	r5, r0, r3, lsl #2
  4197ce:	f8d5 ab60 	ldr.w	sl, [r5, #2912]	; 0xb60
  4197d2:	f831 602a 	ldrh.w	r6, [r1, sl, lsl #2]
  4197d6:	f8d5 bb5c 	ldr.w	fp, [r5, #2908]	; 0xb5c
  4197da:	f831 502b 	ldrh.w	r5, [r1, fp, lsl #2]
        if (j < s->heap_len &&
  4197de:	42ae      	cmp	r6, r5
  4197e0:	d3dd      	bcc.n	41979e <.LVL7>
            smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {
  4197e2:	d0d1      	beq.n	419788 <.LVL6+0x1a>
  4197e4:	461c      	mov	r4, r3
  4197e6:	e7da      	b.n	41979e <.LVL7>

004197e8 <.LVL12>:
        if (smaller(tree, v, s->heap[j], s->depth)) break;
  4197e8:	18c5      	adds	r5, r0, r3
  4197ea:	f899 6000 	ldrb.w	r6, [r9]
  4197ee:	f815 500c 	ldrb.w	r5, [r5, ip]
  4197f2:	42ae      	cmp	r6, r5
  4197f4:	d8de      	bhi.n	4197b4 <.LVL7+0x16>

004197f6 <.LVL13>:
    s->heap[k] = v;
  4197f6:	eb00 0282 	add.w	r2, r0, r2, lsl #2

004197fa <.LVL14>:
  4197fa:	f8c2 8b5c 	str.w	r8, [r2, #2908]	; 0xb5c
  4197fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section .text.mp_read_radix%156:

00419804 <mp_read_radix>:
  return FP_OKAY;
}

/* fast math conversion */
int mp_read_radix(mp_int *a, const char *str, int radix)
{
  419804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

00419808 <.LCFI142>:
  419808:	4606      	mov	r6, r0
  41980a:	4688      	mov	r8, r1
  41980c:	4617      	mov	r7, r2

0041980e <.LBB194>:
  fp_zero (a);
  41980e:	f004 f8bb 	bl	41d988 <.LFE163>

00419812 <.LVL866>:
  if (radix < 2 || radix > 64) {
  419812:	1ebb      	subs	r3, r7, #2
  419814:	2b3e      	cmp	r3, #62	; 0x3e
  419816:	d83f      	bhi.n	419898 <.LVL883>
  419818:	46b9      	mov	r9, r7
  if (*str == '-') {
  41981a:	f898 3000 	ldrb.w	r3, [r8]
  41981e:	2b2d      	cmp	r3, #45	; 0x2d
  419820:	d00b      	beq.n	41983a <.LVL869>
    neg = FP_ZPOS;
  419822:	f04f 0a00 	mov.w	sl, #0

00419826 <.LVL867>:
  while (*str) {
  419826:	f898 5000 	ldrb.w	r5, [r8]
  41982a:	bb3d      	cbnz	r5, 41987c <.LVL879>

0041982c <.LVL868>:
  if (fp_iszero(a) != FP_YES) {
  41982c:	6830      	ldr	r0, [r6, #0]
  41982e:	b3a8      	cbz	r0, 41989c <.LBE194>
     a->sign = neg;
  419830:	f8c6 a004 	str.w	sl, [r6, #4]
  return FP_OKAY;
  419834:	2000      	movs	r0, #0
  419836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0041983a <.LVL869>:
    ++str;
  41983a:	f108 0801 	add.w	r8, r8, #1

0041983e <.LVL870>:
    neg = FP_NEG;
  41983e:	f04f 0a01 	mov.w	sl, #1
  419842:	e7f0      	b.n	419826 <.LVL867>

00419844 <.LBB196>:
    ch = (char)((radix <= 36) ? XTOUPPER((unsigned char)*str) : *str);
  419844:	f003 ff4a 	bl	41d6dc <.LFE161>

00419848 <.LVL872>:
  419848:	4428      	add	r0, r5
  41984a:	7843      	ldrb	r3, [r0, #1]
  41984c:	f003 0303 	and.w	r3, r3, #3
  419850:	2b02      	cmp	r3, #2
  419852:	bf08      	it	eq
  419854:	3d20      	subeq	r5, #32

00419856 <.LBE196>:
  419856:	b2ed      	uxtb	r5, r5
  419858:	e012      	b.n	419880 <.LVL880>

0041985a <.LVL874>:
    for (y = 0; y < 64; y++) {
  41985a:	2400      	movs	r4, #0

0041985c <.LVL875>:
    if (y < radix) {
  41985c:	42a7      	cmp	r7, r4
  41985e:	dde5      	ble.n	41982c <.LVL868>
      fp_mul_d (a, (fp_digit) radix, a);
  419860:	4632      	mov	r2, r6
  419862:	4649      	mov	r1, r9
  419864:	4630      	mov	r0, r6
  419866:	f7ff f9f1 	bl	418c4c <.LFE176>

0041986a <.LVL876>:
      fp_add_d (a, (fp_digit) y, a);
  41986a:	4632      	mov	r2, r6
  41986c:	4621      	mov	r1, r4
  41986e:	4630      	mov	r0, r6
  419870:	f003 fcb9 	bl	41d1e6 <.LFE38>

00419874 <.LVL877>:
  while (*str) {
  419874:	f818 5f01 	ldrb.w	r5, [r8, #1]!

00419878 <.LVL878>:
  419878:	2d00      	cmp	r5, #0
  41987a:	d0d7      	beq.n	41982c <.LVL868>

0041987c <.LVL879>:
    ch = (char)((radix <= 36) ? XTOUPPER((unsigned char)*str) : *str);
  41987c:	2f24      	cmp	r7, #36	; 0x24
  41987e:	dde1      	ble.n	419844 <.LBB196>

00419880 <.LVL880>:
      if (ch == fp_s_rmap[y]) {
  419880:	2d30      	cmp	r5, #48	; 0x30
  419882:	d0ea      	beq.n	41985a <.LVL874>
  419884:	4b06      	ldr	r3, [pc, #24]	; (4198a0 <.LVL885>)
    for (y = 0; y < 64; y++) {
  419886:	2401      	movs	r4, #1

00419888 <.LVL881>:
      if (ch == fp_s_rmap[y]) {
  419888:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  41988c:	42aa      	cmp	r2, r5
  41988e:	d0e5      	beq.n	41985c <.LVL875>
    for (y = 0; y < 64; y++) {
  419890:	3401      	adds	r4, #1
  419892:	2c40      	cmp	r4, #64	; 0x40
  419894:	d1f8      	bne.n	419888 <.LVL881>
  419896:	e7e1      	b.n	41985c <.LVL875>

00419898 <.LVL883>:
    return FP_VAL;
  419898:	f04f 30ff 	mov.w	r0, #4294967295

0041989c <.LBE194>:
    return fp_read_radix(a, str, radix);
}
  41989c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004198a0 <.LVL885>:
  4198a0:	0041b99c 	.word	0x0041b99c

Disassembly of section .text.SYS_TIME_Initialize%157:

004198a4 <SYS_TIME_Initialize>:
// Section: System Interface Functions
// *****************************************************************************
// *****************************************************************************
SYS_MODULE_OBJ SYS_TIME_Initialize( const SYS_MODULE_INDEX index, const SYS_MODULE_INIT * const init )
{
    if(init == 0 || index != SYS_TIME_INDEX_0)
  4198a4:	2900      	cmp	r1, #0
  4198a6:	d042      	beq.n	41992e <.LCFI12>
{
  4198a8:	b538      	push	{r3, r4, r5, lr}

004198aa <.LCFI11>:
  4198aa:	460d      	mov	r5, r1
    if(init == 0 || index != SYS_TIME_INDEX_0)
  4198ac:	b110      	cbz	r0, 4198b4 <.LBB36>
    {
        return SYS_MODULE_OBJ_INVALID;
  4198ae:	f04f 30ff 	mov.w	r0, #4294967295

004198b2 <.LVL125>:
    memset(timers, 0, sizeof(timers));

    gSystemCounterObj.status = SYS_STATUS_READY;

    return (SYS_MODULE_OBJ)&gSystemCounterObj;
}
  4198b2:	bd38      	pop	{r3, r4, r5, pc}

004198b4 <.LBB36>:
// *****************************************************************************
/* Function: OSAL_RESULT OSAL_MUTEX_Create(OSAL_MUTEX_HANDLE_TYPE mutexID)
 */
static OSAL_RESULT __attribute__((always_inline)) OSAL_MUTEX_Create(OSAL_MUTEX_HANDLE_TYPE* mutexID)
{
   *mutexID = 1;
  4198b4:	4c1f      	ldr	r4, [pc, #124]	; (419934 <.LVL138+0x2>)
  4198b6:	2301      	movs	r3, #1
  4198b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

004198bc <.LBB38>:
    counterObj->timePlib = initData->timePlib;
  4198bc:	680b      	ldr	r3, [r1, #0]
  4198be:	6063      	str	r3, [r4, #4]
    counterObj->hwTimerFrequency = counterObj->timePlib->timerFrequencyGet();
  4198c0:	689b      	ldr	r3, [r3, #8]
  4198c2:	4798      	blx	r3

004198c4 <.LVL128>:
  4198c4:	60e0      	str	r0, [r4, #12]

004198c6 <.LVL129>:
    cpuCyclesPerTimerClock=(SYS_TIME_CPU_CLOCK_FREQUENCY/counterObj->hwTimerFrequency);
  4198c6:	4b1c      	ldr	r3, [pc, #112]	; (419938 <.LVL138+0x6>)
  4198c8:	fbb3 f0f0 	udiv	r0, r3, r0

004198cc <.LVL130>:
    counterObj->hwTimerCompareMargin=(SYS_TIME_COMPARE_UPDATE_EXECUTION_CYCLES/cpuCyclesPerTimerClock) +2;
  4198cc:	f44f 7361 	mov.w	r3, #900	; 0x384
  4198d0:	fb93 f3f0 	sdiv	r3, r3, r0
  4198d4:	3302      	adds	r3, #2
  4198d6:	6223      	str	r3, [r4, #32]
    counterObj->hwTimerIntNum = initData->hwTimerIntNum;
  4198d8:	f995 3004 	ldrsb.w	r3, [r5, #4]
  4198dc:	7223      	strb	r3, [r4, #8]
    counterObj->hwTimerPreviousValue = 0;
  4198de:	2100      	movs	r1, #0
  4198e0:	6121      	str	r1, [r4, #16]
    counterObj->hwTimerPeriodValue = SYS_TIME_HW_COUNTER_PERIOD;
  4198e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4198e6:	61a3      	str	r3, [r4, #24]
    counterObj->hwTimerCompareValue = SYS_TIME_HW_COUNTER_HALF_PERIOD;
  4198e8:	f647 73ff 	movw	r3, #32767	; 0x7fff
  4198ec:	61e3      	str	r3, [r4, #28]
    counterObj->swCounter64Low = 0;
  4198ee:	6261      	str	r1, [r4, #36]	; 0x24
    counterObj->swCounter64High = 0;
  4198f0:	62a1      	str	r1, [r4, #40]	; 0x28
    counterObj->tmrActive = NULL;
  4198f2:	6321      	str	r1, [r4, #48]	; 0x30
    counterObj->interruptNestingCount = 0;
  4198f4:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
    counterObj->timePlib->timerCallbackSet(SYS_TIME_PLIBCallback, 0);
  4198f8:	6863      	ldr	r3, [r4, #4]
  4198fa:	681b      	ldr	r3, [r3, #0]
  4198fc:	480f      	ldr	r0, [pc, #60]	; (41993c <.LVL138+0xa>)

004198fe <.LVL131>:
  4198fe:	4798      	blx	r3

00419900 <.LVL132>:
    if (counterObj->timePlib->timerPeriodSet != NULL)
  419900:	6863      	ldr	r3, [r4, #4]
  419902:	685b      	ldr	r3, [r3, #4]
  419904:	b10b      	cbz	r3, 41990a <.LVL132+0xa>
        counterObj->timePlib->timerPeriodSet(counterObj->hwTimerPeriodValue);
  419906:	69a0      	ldr	r0, [r4, #24]
  419908:	4798      	blx	r3
    counterObj->timePlib->timerCompareSet(counterObj->hwTimerCompareValue);
  41990a:	4c0a      	ldr	r4, [pc, #40]	; (419934 <.LVL138+0x2>)
  41990c:	6863      	ldr	r3, [r4, #4]
  41990e:	68db      	ldr	r3, [r3, #12]
  419910:	69e0      	ldr	r0, [r4, #28]
  419912:	4798      	blx	r3
    counterObj->timePlib->timerStart();
  419914:	6863      	ldr	r3, [r4, #4]
  419916:	691b      	ldr	r3, [r3, #16]
  419918:	4798      	blx	r3

0041991a <.LBE38>:
    memset(timers, 0, sizeof(timers));
  41991a:	f44f 72a0 	mov.w	r2, #320	; 0x140
  41991e:	2100      	movs	r1, #0
  419920:	4807      	ldr	r0, [pc, #28]	; (419940 <.LVL138+0xe>)
  419922:	f000 fa3d 	bl	419da0 <.LFE166>

00419926 <.LVL136>:
    gSystemCounterObj.status = SYS_STATUS_READY;
  419926:	2302      	movs	r3, #2
  419928:	7023      	strb	r3, [r4, #0]
    return (SYS_MODULE_OBJ)&gSystemCounterObj;
  41992a:	4620      	mov	r0, r4
  41992c:	bd38      	pop	{r3, r4, r5, pc}

0041992e <.LCFI12>:
        return SYS_MODULE_OBJ_INVALID;
  41992e:	f04f 30ff 	mov.w	r0, #4294967295

00419932 <.LVL138>:
  419932:	4770      	bx	lr
  419934:	2040d624 	.word	0x2040d624
  419938:	11e1a300 	.word	0x11e1a300
  41993c:	00418555 	.word	0x00418555
  419940:	2040d3f4 	.word	0x2040d3f4

Disassembly of section .text%158:

00419950 <memchr>:
  419950:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  419954:	2a10      	cmp	r2, #16
  419956:	db2b      	blt.n	4199b0 <memchr+0x60>
  419958:	f010 0f07 	tst.w	r0, #7
  41995c:	d008      	beq.n	419970 <memchr+0x20>
  41995e:	f810 3b01 	ldrb.w	r3, [r0], #1
  419962:	3a01      	subs	r2, #1
  419964:	428b      	cmp	r3, r1
  419966:	d02d      	beq.n	4199c4 <memchr+0x74>
  419968:	f010 0f07 	tst.w	r0, #7
  41996c:	b342      	cbz	r2, 4199c0 <memchr+0x70>
  41996e:	d1f6      	bne.n	41995e <memchr+0xe>
  419970:	b4f0      	push	{r4, r5, r6, r7}
  419972:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  419976:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  41997a:	f022 0407 	bic.w	r4, r2, #7
  41997e:	f07f 0700 	mvns.w	r7, #0
  419982:	2300      	movs	r3, #0
  419984:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  419988:	3c08      	subs	r4, #8
  41998a:	ea85 0501 	eor.w	r5, r5, r1
  41998e:	ea86 0601 	eor.w	r6, r6, r1
  419992:	fa85 f547 	uadd8	r5, r5, r7
  419996:	faa3 f587 	sel	r5, r3, r7
  41999a:	fa86 f647 	uadd8	r6, r6, r7
  41999e:	faa5 f687 	sel	r6, r5, r7
  4199a2:	b98e      	cbnz	r6, 4199c8 <memchr+0x78>
  4199a4:	d1ee      	bne.n	419984 <memchr+0x34>
  4199a6:	bcf0      	pop	{r4, r5, r6, r7}
  4199a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4199ac:	f002 0207 	and.w	r2, r2, #7
  4199b0:	b132      	cbz	r2, 4199c0 <memchr+0x70>
  4199b2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4199b6:	3a01      	subs	r2, #1
  4199b8:	ea83 0301 	eor.w	r3, r3, r1
  4199bc:	b113      	cbz	r3, 4199c4 <memchr+0x74>
  4199be:	d1f8      	bne.n	4199b2 <memchr+0x62>
  4199c0:	2000      	movs	r0, #0
  4199c2:	4770      	bx	lr
  4199c4:	3801      	subs	r0, #1
  4199c6:	4770      	bx	lr
  4199c8:	2d00      	cmp	r5, #0
  4199ca:	bf06      	itte	eq
  4199cc:	4635      	moveq	r5, r6
  4199ce:	3803      	subeq	r0, #3
  4199d0:	3807      	subne	r0, #7
  4199d2:	f015 0f01 	tst.w	r5, #1
  4199d6:	d107      	bne.n	4199e8 <memchr+0x98>
  4199d8:	3001      	adds	r0, #1
  4199da:	f415 7f80 	tst.w	r5, #256	; 0x100
  4199de:	bf02      	ittt	eq
  4199e0:	3001      	addeq	r0, #1
  4199e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4199e6:	3001      	addeq	r0, #1
  4199e8:	bcf0      	pop	{r4, r5, r6, r7}
  4199ea:	3801      	subs	r0, #1
  4199ec:	4770      	bx	lr

004199ee <L0>:
  4199ee:	bf00      	nop

Disassembly of section .text.__pow5mult%159:

004199f0 <__pow5mult>:
  4199f0:	f012 0303 	ands.w	r3, r2, #3
  4199f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

004199f8 <.LCFI10>:
  4199f8:	4614      	mov	r4, r2

004199fa <.LVL152>:
  4199fa:	4607      	mov	r7, r0
  4199fc:	d12e      	bne.n	419a5c <.LVL173>
  4199fe:	460d      	mov	r5, r1

00419a00 <.LVL153>:
  419a00:	10a4      	asrs	r4, r4, #2

00419a02 <.LVL154>:
  419a02:	d01c      	beq.n	419a3e <.LVL165>
  419a04:	6cbe      	ldr	r6, [r7, #72]	; 0x48

00419a06 <.LVL155>:
  419a06:	b396      	cbz	r6, 419a6e <.LBB20>
  419a08:	07e3      	lsls	r3, r4, #31
  419a0a:	f04f 0800 	mov.w	r8, #0
  419a0e:	d406      	bmi.n	419a1e <.LVL161>

00419a10 <.LVL156>:
  419a10:	1064      	asrs	r4, r4, #1

00419a12 <.LVL157>:
  419a12:	d014      	beq.n	419a3e <.LVL165>

00419a14 <.LVL158>:
  419a14:	6830      	ldr	r0, [r6, #0]

00419a16 <.LVL159>:
  419a16:	b1a8      	cbz	r0, 419a44 <.LVL166>
  419a18:	4606      	mov	r6, r0

00419a1a <.LVL160>:
  419a1a:	07e3      	lsls	r3, r4, #31
  419a1c:	d5f8      	bpl.n	419a10 <.LVL156>

00419a1e <.LVL161>:
  419a1e:	4632      	mov	r2, r6
  419a20:	4629      	mov	r1, r5
  419a22:	4638      	mov	r0, r7
  419a24:	f7fd f912 	bl	416c4c <.LBE11>

00419a28 <.LBB16>:
  419a28:	b1b5      	cbz	r5, 419a58 <.LVL171>
  419a2a:	686a      	ldr	r2, [r5, #4]
  419a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c

00419a2e <.LBE16>:
  419a2e:	1064      	asrs	r4, r4, #1

00419a30 <.LBB19>:
  419a30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  419a34:	6029      	str	r1, [r5, #0]
  419a36:	f843 5022 	str.w	r5, [r3, r2, lsl #2]

00419a3a <.LBE19>:
  419a3a:	4605      	mov	r5, r0

00419a3c <.LVL164>:
  419a3c:	d1ea      	bne.n	419a14 <.LVL158>

00419a3e <.LVL165>:
  419a3e:	4628      	mov	r0, r5
  419a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00419a44 <.LVL166>:
  419a44:	4632      	mov	r2, r6
  419a46:	4631      	mov	r1, r6
  419a48:	4638      	mov	r0, r7

00419a4a <.LVL167>:
  419a4a:	f7fd f8ff 	bl	416c4c <.LBE11>

00419a4e <.LVL168>:
  419a4e:	6030      	str	r0, [r6, #0]

00419a50 <.LVL169>:
  419a50:	f8c0 8000 	str.w	r8, [r0]
  419a54:	4606      	mov	r6, r0

00419a56 <.LVL170>:
  419a56:	e7e0      	b.n	419a1a <.LVL160>

00419a58 <.LVL171>:
  419a58:	4605      	mov	r5, r0

00419a5a <.LVL172>:
  419a5a:	e7d9      	b.n	419a10 <.LVL156>

00419a5c <.LVL173>:
  419a5c:	1e5a      	subs	r2, r3, #1

00419a5e <.LVL174>:
  419a5e:	4d0b      	ldr	r5, [pc, #44]	; (419a8c <.LVL182+0x6>)
  419a60:	2300      	movs	r3, #0

00419a62 <.LVL175>:
  419a62:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]

00419a66 <.LVL176>:
  419a66:	f001 f89d 	bl	41aba4 <__multadd>

00419a6a <.LVL177>:
  419a6a:	4605      	mov	r5, r0

00419a6c <.LVL178>:
  419a6c:	e7c8      	b.n	419a00 <.LVL153>

00419a6e <.LBB20>:
  419a6e:	2101      	movs	r1, #1
  419a70:	4638      	mov	r0, r7
  419a72:	f002 fcf3 	bl	41c45c <.LFE2>

00419a76 <.LVL180>:
  419a76:	f240 2171 	movw	r1, #625	; 0x271
  419a7a:	2201      	movs	r2, #1

00419a7c <.LBE20>:
  419a7c:	2300      	movs	r3, #0

00419a7e <.LBB23>:
  419a7e:	6141      	str	r1, [r0, #20]
  419a80:	6102      	str	r2, [r0, #16]
  419a82:	4606      	mov	r6, r0

00419a84 <.LBE23>:
  419a84:	64b8      	str	r0, [r7, #72]	; 0x48

00419a86 <.LVL182>:
  419a86:	6003      	str	r3, [r0, #0]
  419a88:	e7be      	b.n	419a08 <.LVL155+0x2>
  419a8a:	bf00      	nop
  419a8c:	0041dc58 	.word	0x0041dc58

Disassembly of section .text.wc_Des3_CbcEncrypt%160:

00419a90 <wc_Des3_CbcEncrypt>:
        if (des == NULL || out == NULL || in == NULL) {
  419a90:	2a00      	cmp	r2, #0
  419a92:	bf18      	it	ne
  419a94:	2900      	cmpne	r1, #0
  419a96:	d047      	beq.n	419b28 <.LCFI14>
    {
  419a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

00419a9c <.LCFI13>:
  419a9c:	4680      	mov	r8, r0
  419a9e:	460f      	mov	r7, r1
        if (des == NULL || out == NULL || in == NULL) {
  419aa0:	b3d8      	cbz	r0, 419b1a <.LVL222>
        blocks = sz / DES_BLOCK_SIZE;
  419aa2:	08db      	lsrs	r3, r3, #3

00419aa4 <.LVL208>:
        while (blocks--) {
  419aa4:	f103 39ff 	add.w	r9, r3, #4294967295

00419aa8 <.LVL209>:
  419aa8:	b3db      	cbz	r3, 419b22 <.LVL224>
  419aaa:	1e56      	subs	r6, r2, #1
            xorbuf((byte*)des->reg, in, DES_BLOCK_SIZE);
  419aac:	f500 75c0 	add.w	r5, r0, #384	; 0x180
  419ab0:	f200 1487 	addw	r4, r0, #391	; 0x187
  419ab4:	e01d      	b.n	419af2 <.LBB279>

00419ab6 <.LBB273>:
    for (i = 0; i < n; i++) r[i] ^= a[i];
  419ab6:	f8d8 3180 	ldr.w	r3, [r8, #384]	; 0x180
  419aba:	f8d6 2001 	ldr.w	r2, [r6, #1]
  419abe:	4053      	eors	r3, r2
  419ac0:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180

00419ac4 <.LVL211>:
  419ac4:	f8d8 3184 	ldr.w	r3, [r8, #388]	; 0x184
  419ac8:	f8d6 2005 	ldr.w	r2, [r6, #5]
  419acc:	4053      	eors	r3, r2
  419ace:	f8c8 3184 	str.w	r3, [r8, #388]	; 0x184

00419ad2 <.LBE273>:
            Des3ProcessBlock(des, (byte*)des->reg, (byte*)des->reg);
  419ad2:	462a      	mov	r2, r5
  419ad4:	4629      	mov	r1, r5
  419ad6:	4640      	mov	r0, r8
  419ad8:	f7fc fdd2 	bl	416680 <.LFE19>

00419adc <.LVL213>:
            XMEMCPY(out, des->reg, DES_BLOCK_SIZE);
  419adc:	682a      	ldr	r2, [r5, #0]
  419ade:	686b      	ldr	r3, [r5, #4]
  419ae0:	603a      	str	r2, [r7, #0]
  419ae2:	607b      	str	r3, [r7, #4]
            out += DES_BLOCK_SIZE;
  419ae4:	3708      	adds	r7, #8

00419ae6 <.LVL214>:
        while (blocks--) {
  419ae6:	f109 39ff 	add.w	r9, r9, #4294967295
  419aea:	3608      	adds	r6, #8

00419aec <.LVL216>:
  419aec:	f1b9 3fff 	cmp.w	r9, #4294967295
  419af0:	d010      	beq.n	419b14 <.LBE277>

00419af2 <.LBB279>:
    if (((wolfssl_word)buf | (wolfssl_word)mask | count) % WOLFSSL_WORD_SIZE == 0)
  419af2:	1c73      	adds	r3, r6, #1

00419af4 <.LVL218>:
  419af4:	432b      	orrs	r3, r5

00419af6 <.LVL219>:
  419af6:	f013 0f03 	tst.w	r3, #3
  419afa:	d0dc      	beq.n	419ab6 <.LBB273>
  419afc:	f208 137f 	addw	r3, r8, #383	; 0x17f
  419b00:	4631      	mov	r1, r6

00419b02 <.LBB277>:
        for (i = 0; i < count; i++) b[i] ^= m[i];
  419b02:	785a      	ldrb	r2, [r3, #1]
  419b04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  419b08:	4042      	eors	r2, r0
  419b0a:	f803 2f01 	strb.w	r2, [r3, #1]!
  419b0e:	42a3      	cmp	r3, r4
  419b10:	d1f7      	bne.n	419b02 <.LBB277>
  419b12:	e7de      	b.n	419ad2 <.LBE273>

00419b14 <.LBE277>:
        return 0;
  419b14:	2000      	movs	r0, #0
  419b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00419b1a <.LVL222>:
            return BAD_FUNC_ARG;
  419b1a:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00419b1e <.LVL223>:
  419b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00419b22 <.LVL224>:
        return 0;
  419b22:	2000      	movs	r0, #0

00419b24 <.LVL225>:
    }
  419b24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00419b28 <.LCFI14>:
            return BAD_FUNC_ARG;
  419b28:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00419b2c <.LVL227>:
    }
  419b2c:	4770      	bx	lr

Disassembly of section .text.wc_Hash%161:

00419b2e <wc_Hash>:
}

/* Generic Hashing Wrapper */
int wc_Hash(enum wc_HashType hash_type, const byte* data,
    word32 data_len, byte* hash, word32 hash_len)
{
  419b2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

00419b30 <.LCFI27>:
  419b30:	4604      	mov	r4, r0
  419b32:	460d      	mov	r5, r1
  419b34:	4616      	mov	r6, r2
  419b36:	461f      	mov	r7, r3

00419b38 <.LVL130>:
    int ret = HASH_TYPE_E; /* Default to hash type error */
    word32 dig_size;

    /* Validate hash buffer size */
    dig_size = wc_HashGetDigestSize(hash_type);
  419b38:	f003 f96c 	bl	41ce14 <wc_HashGetDigestSize>

00419b3c <.LVL131>:
    if (hash_len < dig_size) {
  419b3c:	9b06      	ldr	r3, [sp, #24]
  419b3e:	4298      	cmp	r0, r3
  419b40:	d83d      	bhi.n	419bbe <.LVL152>
    (void)data;
    (void)data_len;
    (void)hash;
    (void)hash_len;

    switch(hash_type)
  419b42:	1ee0      	subs	r0, r4, #3

00419b44 <.LVL132>:
  419b44:	2806      	cmp	r0, #6
  419b46:	d805      	bhi.n	419b54 <.LVL132+0x10>
  419b48:	e8df f000 	tbb	[pc, r0]
  419b4c:	1c150e07 	.word	0x1c150e07
  419b50:	2a23      	.short	0x2a23
  419b52:	3c          	.byte	0x3c
  419b53:	00          	.byte	0x00
        /* Not Supported */
        case WC_HASH_TYPE_MD2:
        case WC_HASH_TYPE_MD4:
        case WC_HASH_TYPE_NONE:
        default:
            ret = BAD_FUNC_ARG;
  419b54:	f06f 03ac 	mvn.w	r3, #172	; 0xac
  419b58:	e036      	b.n	419bc8 <.LVL154>
            ret = wc_Md5Hash(data, data_len, hash);
  419b5a:	463a      	mov	r2, r7
  419b5c:	4631      	mov	r1, r6
  419b5e:	4628      	mov	r0, r5
  419b60:	f003 f973 	bl	41ce4a <.LFE164>

00419b64 <.LVL133>:
  419b64:	4603      	mov	r3, r0

00419b66 <.LVL134>:
            break;
  419b66:	e02f      	b.n	419bc8 <.LVL154>

00419b68 <.LVL135>:
            ret = wc_ShaHash(data, data_len, hash);
  419b68:	463a      	mov	r2, r7
  419b6a:	4631      	mov	r1, r6
  419b6c:	4628      	mov	r0, r5
  419b6e:	f002 ff80 	bl	41ca72 <.LFE70>

00419b72 <.LVL136>:
  419b72:	4603      	mov	r3, r0

00419b74 <.LVL137>:
            break;
  419b74:	e028      	b.n	419bc8 <.LVL154>

00419b76 <.LVL138>:
            ret = wc_Sha256Hash(data, data_len, hash);
  419b76:	463a      	mov	r2, r7
  419b78:	4631      	mov	r1, r6
  419b7a:	4628      	mov	r0, r5
  419b7c:	f002 fdb2 	bl	41c6e4 <.LFE144>

00419b80 <.LVL139>:
  419b80:	4603      	mov	r3, r0

00419b82 <.LVL140>:
            break;
  419b82:	e021      	b.n	419bc8 <.LVL154>

00419b84 <.LVL141>:
            ret = wc_Sha384Hash(data, data_len, hash);
  419b84:	463a      	mov	r2, r7
  419b86:	4631      	mov	r1, r6
  419b88:	4628      	mov	r0, r5
  419b8a:	f003 f994 	bl	41ceb6 <.LFE172>

00419b8e <.LVL142>:
  419b8e:	4603      	mov	r3, r0

00419b90 <.LVL143>:
            break;
  419b90:	e01a      	b.n	419bc8 <.LVL154>

00419b92 <.LVL144>:
            ret = wc_Sha512Hash(data, data_len, hash);
  419b92:	463a      	mov	r2, r7
  419b94:	4631      	mov	r1, r6
  419b96:	4628      	mov	r0, r5
  419b98:	f003 f972 	bl	41ce80 <.LFE169>

00419b9c <.LVL145>:
  419b9c:	4603      	mov	r3, r0

00419b9e <.LVL146>:
            break;
  419b9e:	e013      	b.n	419bc8 <.LVL154>

00419ba0 <.LVL147>:
            ret = wc_Md5Hash(data, data_len, hash);
  419ba0:	463a      	mov	r2, r7
  419ba2:	4631      	mov	r1, r6
  419ba4:	4628      	mov	r0, r5
  419ba6:	f003 f950 	bl	41ce4a <.LFE164>

00419baa <.LVL148>:
            if (ret == 0) {
  419baa:	4603      	mov	r3, r0
  419bac:	b960      	cbnz	r0, 419bc8 <.LVL154>
                ret = wc_ShaHash(data, data_len, &hash[MD5_DIGEST_SIZE]);
  419bae:	f107 0210 	add.w	r2, r7, #16
  419bb2:	4631      	mov	r1, r6
  419bb4:	4628      	mov	r0, r5

00419bb6 <.LVL149>:
  419bb6:	f002 ff5c 	bl	41ca72 <.LFE70>

00419bba <.LVL150>:
  419bba:	4603      	mov	r3, r0

00419bbc <.LVL151>:
  419bbc:	e004      	b.n	419bc8 <.LVL154>

00419bbe <.LVL152>:
        return BUFFER_E;
  419bbe:	f06f 0383 	mvn.w	r3, #131	; 0x83
  419bc2:	e001      	b.n	419bc8 <.LVL154>

00419bc4 <.LVL153>:
    int ret = HASH_TYPE_E; /* Default to hash type error */
  419bc4:	f06f 03e7 	mvn.w	r3, #231	; 0xe7

00419bc8 <.LVL154>:
            break;
    }
    return ret;
}
  419bc8:	4618      	mov	r0, r3
  419bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

Disassembly of section .text.deflateEnd%162:

00419bcc <deflateEnd>:
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  419bcc:	2800      	cmp	r0, #0
  419bce:	d041      	beq.n	419c54 <.LCFI31>
{
  419bd0:	b538      	push	{r3, r4, r5, lr}

00419bd2 <.LCFI30>:
  419bd2:	4604      	mov	r4, r0
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  419bd4:	69c3      	ldr	r3, [r0, #28]
  419bd6:	2b00      	cmp	r3, #0
  419bd8:	d03f      	beq.n	419c5a <.LCFI32>
    status = strm->state->status;
  419bda:	685d      	ldr	r5, [r3, #4]

00419bdc <.LVL554>:
    if (status != INIT_STATE &&
  419bdc:	f1a5 012a 	sub.w	r1, r5, #42	; 0x2a
  419be0:	291f      	cmp	r1, #31
  419be2:	d827      	bhi.n	419c34 <.LVL561>
  419be4:	4a1e      	ldr	r2, [pc, #120]	; (419c60 <.LVL567>)
  419be6:	40ca      	lsrs	r2, r1
  419be8:	f012 0f01 	tst.w	r2, #1
  419bec:	d022      	beq.n	419c34 <.LVL561>
    TRY_FREE(strm, strm->state->pending_buf);
  419bee:	6899      	ldr	r1, [r3, #8]
  419bf0:	b111      	cbz	r1, 419bf8 <.LVL555+0x2>
  419bf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  419bf4:	6aa0      	ldr	r0, [r4, #40]	; 0x28

00419bf6 <.LVL555>:
  419bf6:	4798      	blx	r3
    TRY_FREE(strm, strm->state->head);
  419bf8:	69e3      	ldr	r3, [r4, #28]
  419bfa:	6c59      	ldr	r1, [r3, #68]	; 0x44
  419bfc:	b111      	cbz	r1, 419c04 <.LVL555+0xe>
  419bfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
  419c00:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  419c02:	4798      	blx	r3
    TRY_FREE(strm, strm->state->prev);
  419c04:	69e3      	ldr	r3, [r4, #28]
  419c06:	6c19      	ldr	r1, [r3, #64]	; 0x40
  419c08:	b111      	cbz	r1, 419c10 <.LVL555+0x1a>
  419c0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  419c0c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  419c0e:	4798      	blx	r3
    TRY_FREE(strm, strm->state->window);
  419c10:	69e3      	ldr	r3, [r4, #28]
  419c12:	6b99      	ldr	r1, [r3, #56]	; 0x38
  419c14:	b111      	cbz	r1, 419c1c <.LVL555+0x26>
  419c16:	6a63      	ldr	r3, [r4, #36]	; 0x24
  419c18:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  419c1a:	4798      	blx	r3
    ZFREE(strm, strm->state);
  419c1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  419c1e:	69e1      	ldr	r1, [r4, #28]
  419c20:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  419c22:	4798      	blx	r3
    strm->state = Z_NULL;
  419c24:	2300      	movs	r3, #0
  419c26:	61e3      	str	r3, [r4, #28]
    return status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;
  419c28:	2d71      	cmp	r5, #113	; 0x71
  419c2a:	bf0c      	ite	eq
  419c2c:	f06f 0002 	mvneq.w	r0, #2
  419c30:	4618      	movne	r0, r3
  419c32:	bd38      	pop	{r3, r4, r5, pc}

00419c34 <.LVL561>:
        status != COMMENT_STATE &&
  419c34:	f1a5 015b 	sub.w	r1, r5, #91	; 0x5b
  419c38:	2916      	cmp	r1, #22
  419c3a:	d804      	bhi.n	419c46 <.LVL561+0x12>
  419c3c:	4a09      	ldr	r2, [pc, #36]	; (419c64 <.LVL567+0x4>)
  419c3e:	40ca      	lsrs	r2, r1
        status != NAME_STATE &&
  419c40:	f012 0f01 	tst.w	r2, #1
  419c44:	d1d3      	bne.n	419bee <.LVL554+0x12>
        status != BUSY_STATE &&
  419c46:	f240 229a 	movw	r2, #666	; 0x29a
  419c4a:	4295      	cmp	r5, r2
  419c4c:	d0cf      	beq.n	419bee <.LVL554+0x12>
      return Z_STREAM_ERROR;
  419c4e:	f06f 0001 	mvn.w	r0, #1

00419c52 <.LVL562>:
}
  419c52:	bd38      	pop	{r3, r4, r5, pc}

00419c54 <.LCFI31>:
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  419c54:	f06f 0001 	mvn.w	r0, #1

00419c58 <.LVL564>:
  419c58:	4770      	bx	lr

00419c5a <.LCFI32>:
  419c5a:	f06f 0001 	mvn.w	r0, #1

00419c5e <.LVL566>:
  419c5e:	bd38      	pop	{r3, r4, r5, pc}

00419c60 <.LVL567>:
  419c60:	88000001 	.word	0x88000001
  419c64:	00401001 	.word	0x00401001

Disassembly of section .text.wc_AesCtrEncrypt%163:

00419c68 <wc_AesCtrEncrypt>:

/* AES-CTR */
#ifdef WOLFSSL_AES_COUNTER

int wc_AesCtrEncrypt(Aes* aes, byte* out, const byte* in, word32 sz)
{
  419c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

00419c6a <.LCFI12>:
  419c6a:	4606      	mov	r6, r0
  419c6c:	460c      	mov	r4, r1
  419c6e:	4617      	mov	r7, r2
  419c70:	461d      	mov	r5, r3
    aes_configuration.encrypt_mode = AES_SAME70_ENCRYPTION;
  419c72:	4b21      	ldr	r3, [pc, #132]	; (419cf8 <.LVL89>)

00419c74 <.LVL70>:
  419c74:	2101      	movs	r1, #1

00419c76 <.LVL71>:
  419c76:	7019      	strb	r1, [r3, #0]
    aes_configuration.key_size = AES_KEY_SIZE_128;
  419c78:	2200      	movs	r2, #0

00419c7a <.LVL72>:
  419c7a:	705a      	strb	r2, [r3, #1]
    aes_configuration.start_mode = AES_AUTO_START;
  419c7c:	7099      	strb	r1, [r3, #2]
    aes_configuration.opmode = AES_CTR_MODE;
  419c7e:	2104      	movs	r1, #4
  419c80:	70d9      	strb	r1, [r3, #3]
    aes_configuration.cfb_size = AES_CFB_SIZE_128;
  419c82:	711a      	strb	r2, [r3, #4]
    aes_configuration.lod = 0;
  419c84:	609a      	str	r2, [r3, #8]
    aes_configuration.gtag_en = 0;
  419c86:	60da      	str	r2, [r3, #12]
    aes_configuration.processing_delay = 0;
  419c88:	611a      	str	r2, [r3, #16]

00419c8a <.LBB13>:
    AES_REGS->AES_MR = ul_mode;
  419c8a:	4a1c      	ldr	r2, [pc, #112]	; (419cfc <.LVL89+0x4>)
  419c8c:	4b1c      	ldr	r3, [pc, #112]	; (419d00 <.LVL89+0x8>)
  419c8e:	605a      	str	r2, [r3, #4]

00419c90 <.LBE13>:

    AesConfigure(&aes_configuration);
    AesWriteKey(aes->key_ce, aes->keylen);
  419c90:	f8d0 10f4 	ldr.w	r1, [r0, #244]	; 0xf4
  419c94:	f500 7096 	add.w	r0, r0, #300	; 0x12c

00419c98 <.LVL75>:
  419c98:	f003 f868 	bl	41cd6c <.LFE47>

00419c9c <.LVL76>:
    AesWriteIV(aes->iv_ce);
  419c9c:	f506 70a6 	add.w	r0, r6, #332	; 0x14c
  419ca0:	f003 fe16 	bl	41d8d0 <.LFE3>

00419ca4 <.LVL77>:
    /* set up pointers for input and output buffers */
    const uint32_t *inptr = (const uint32_t *)in;
    uint32_t *outptr = (uint32_t *)out;

    uint32_t block;   /* 16 bytes = 4 32bit block size */
    for (block = 0; block < sz; block += 16)
  419ca4:	b335      	cbz	r5, 419cf4 <.LVL88>
  419ca6:	f107 0010 	add.w	r0, r7, #16
  419caa:	f104 0110 	add.w	r1, r4, #16
  419cae:	2400      	movs	r4, #0

00419cb0 <.LVL78>:
    {
        /* Write the data to be ciphered to the input data registers. */
        AES_REGS->AES_IDATAR[0] = *inptr++;
  419cb0:	4a13      	ldr	r2, [pc, #76]	; (419d00 <.LVL89+0x8>)

00419cb2 <.LVL79>:
  419cb2:	f850 3c10 	ldr.w	r3, [r0, #-16]
  419cb6:	6413      	str	r3, [r2, #64]	; 0x40

00419cb8 <.LVL80>:
        AES_REGS->AES_IDATAR[1] = *inptr++;
  419cb8:	f850 3c0c 	ldr.w	r3, [r0, #-12]
  419cbc:	6453      	str	r3, [r2, #68]	; 0x44

00419cbe <.LVL81>:
        AES_REGS->AES_IDATAR[2] = *inptr++;
  419cbe:	f850 3c08 	ldr.w	r3, [r0, #-8]
  419cc2:	6493      	str	r3, [r2, #72]	; 0x48

00419cc4 <.LVL82>:
        AES_REGS->AES_IDATAR[3] = *inptr++;
  419cc4:	f850 3c04 	ldr.w	r3, [r0, #-4]
  419cc8:	64d3      	str	r3, [r2, #76]	; 0x4c

        /* Note the blocking here - state machine this? */
        while (!(AES_REGS->AES_ISR & AES_ISR_DATRDY_Msk))  ;
  419cca:	69d3      	ldr	r3, [r2, #28]
  419ccc:	f013 0f01 	tst.w	r3, #1
  419cd0:	d0fb      	beq.n	419cca <.LVL82+0x6>

00419cd2 <.LVL83>:

        /* encrypt complete - read out the data */
        *outptr++ = AES_REGS->AES_ODATAR[0];
  419cd2:	6d13      	ldr	r3, [r2, #80]	; 0x50
  419cd4:	f841 3c10 	str.w	r3, [r1, #-16]

00419cd8 <.LVL84>:
        *outptr++ = AES_REGS->AES_ODATAR[1];
  419cd8:	6d53      	ldr	r3, [r2, #84]	; 0x54
  419cda:	f841 3c0c 	str.w	r3, [r1, #-12]

00419cde <.LVL85>:
        *outptr++ = AES_REGS->AES_ODATAR[2];
  419cde:	6d93      	ldr	r3, [r2, #88]	; 0x58
  419ce0:	f841 3c08 	str.w	r3, [r1, #-8]

00419ce4 <.LVL86>:
        *outptr++ = AES_REGS->AES_ODATAR[3];
  419ce4:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
  419ce6:	f841 3c04 	str.w	r3, [r1, #-4]
    for (block = 0; block < sz; block += 16)
  419cea:	3410      	adds	r4, #16

00419cec <.LVL87>:
  419cec:	3010      	adds	r0, #16
  419cee:	3110      	adds	r1, #16
  419cf0:	42a5      	cmp	r5, r4
  419cf2:	d8de      	bhi.n	419cb2 <.LVL79>

00419cf4 <.LVL88>:
    }
    
    return 0;
}
  419cf4:	2000      	movs	r0, #0
  419cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00419cf8 <.LVL89>:
  419cf8:	2040d718 	.word	0x2040d718
  419cfc:	00e04101 	.word	0x00e04101
  419d00:	4006c000 	.word	0x4006c000

Disassembly of section .text.wc_Sha256Final%164:

00419d04 <wc_Sha256Final>:
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};


int wc_Sha256Final(Sha256* sha256, byte* hash)
{
  419d04:	b570      	push	{r4, r5, r6, lr}

00419d06 <.LCFI5>:
  419d06:	b082      	sub	sp, #8

00419d08 <.LCFI6>:
  419d08:	4605      	mov	r5, r0
  419d0a:	460c      	mov	r4, r1
    uint8_t  padn;
    uint8_t  msg_len[8];

    /* Get the number of bits */
    /* create the message bit length block */
    uint64_t total_bits = sha256->total_len << 3;
  419d0c:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
  419d10:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
  419d14:	00db      	lsls	r3, r3, #3
  419d16:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  419d1a:	00d1      	lsls	r1, r2, #3

00419d1c <.LVL43>:
    msg_len[0] = (uint8_t)(total_bits >> 56);
  419d1c:	0e18      	lsrs	r0, r3, #24

00419d1e <.LVL44>:
  419d1e:	f88d 0000 	strb.w	r0, [sp]
    msg_len[1] = (uint8_t)(total_bits >> 48);
  419d22:	0c18      	lsrs	r0, r3, #16
  419d24:	f88d 0001 	strb.w	r0, [sp, #1]
    msg_len[2] = (uint8_t)(total_bits >> 40);
  419d28:	0a18      	lsrs	r0, r3, #8
  419d2a:	f88d 0002 	strb.w	r0, [sp, #2]
    msg_len[3] = (uint8_t)(total_bits >> 32);
  419d2e:	f88d 3003 	strb.w	r3, [sp, #3]
    msg_len[4] = (uint8_t)(total_bits >> 24);
  419d32:	0e0b      	lsrs	r3, r1, #24

00419d34 <.LVL45>:
  419d34:	f88d 3004 	strb.w	r3, [sp, #4]
    msg_len[5] = (uint8_t)(total_bits >> 16);
  419d38:	0c0b      	lsrs	r3, r1, #16
  419d3a:	f88d 3005 	strb.w	r3, [sp, #5]
    msg_len[6] = (uint8_t)(total_bits >>  8);
  419d3e:	0a0b      	lsrs	r3, r1, #8
  419d40:	f88d 3006 	strb.w	r3, [sp, #6]
    msg_len[7] = (uint8_t)(total_bits);
  419d44:	f88d 1007 	strb.w	r1, [sp, #7]
    
    /* pad the last bits with bytes */
    last = sha256->total_len & 0x3F;
  419d48:	f002 023f 	and.w	r2, r2, #63	; 0x3f

00419d4c <.LVL46>:
    padn = (last < SHA256_PAD_SIZE) ? (SHA256_PAD_SIZE - last) : (120 - last);
  419d4c:	2a37      	cmp	r2, #55	; 0x37
  419d4e:	bf94      	ite	ls
  419d50:	f1c2 0238 	rsbls	r2, r2, #56	; 0x38

00419d54 <.LVL47>:
  419d54:	f1c2 0278 	rsbhi	r2, r2, #120	; 0x78
  419d58:	b2d2      	uxtb	r2, r2

00419d5a <.LVL48>:

    /* future note: Capella will have auto padding with MSGSIZE != 0 */
    wc_Sha256Update(sha256, sha_padding, padn);
  419d5a:	4910      	ldr	r1, [pc, #64]	; (419d9c <.LVL53+0x2>)
  419d5c:	4628      	mov	r0, r5
  419d5e:	f000 fddf 	bl	41a920 <.LFE165>

00419d62 <.LVL50>:
    wc_Sha256Update(sha256, msg_len, 8);
  419d62:	2208      	movs	r2, #8
  419d64:	4669      	mov	r1, sp
  419d66:	4628      	mov	r0, r5
  419d68:	f000 fdda 	bl	41a920 <.LFE165>

00419d6c <.LVL51>:

    memcpy(hash, (void *)sha256->digest, SHA256_DIGEST_SIZE);
  419d6c:	462b      	mov	r3, r5
  419d6e:	f853 6f80 	ldr.w	r6, [r3, #128]!
  419d72:	6858      	ldr	r0, [r3, #4]
  419d74:	6899      	ldr	r1, [r3, #8]
  419d76:	68da      	ldr	r2, [r3, #12]
  419d78:	6026      	str	r6, [r4, #0]
  419d7a:	6060      	str	r0, [r4, #4]
  419d7c:	60a1      	str	r1, [r4, #8]
  419d7e:	60e2      	str	r2, [r4, #12]
  419d80:	691e      	ldr	r6, [r3, #16]
  419d82:	6958      	ldr	r0, [r3, #20]
  419d84:	6999      	ldr	r1, [r3, #24]
  419d86:	69da      	ldr	r2, [r3, #28]
  419d88:	6126      	str	r6, [r4, #16]
  419d8a:	6160      	str	r0, [r4, #20]
  419d8c:	61a1      	str	r1, [r4, #24]
  419d8e:	61e2      	str	r2, [r4, #28]

    return wc_InitSha256(sha256);
  419d90:	4628      	mov	r0, r5
  419d92:	f000 f89f 	bl	419ed4 <.LFE29>

00419d96 <.LVL52>:
}
  419d96:	b002      	add	sp, #8

00419d98 <.LCFI7>:
  419d98:	bd70      	pop	{r4, r5, r6, pc}

00419d9a <.LVL53>:
  419d9a:	bf00      	nop
  419d9c:	0041ab24 	.word	0x0041ab24

Disassembly of section .text.memset%165:

00419da0 <memset>:
  419da0:	b470      	push	{r4, r5, r6}

00419da2 <.LCFI0>:
  419da2:	0786      	lsls	r6, r0, #30
  419da4:	d046      	beq.n	419e34 <.LCFI2>
  419da6:	1e54      	subs	r4, r2, #1

00419da8 <.LVL1>:
  419da8:	2a00      	cmp	r2, #0
  419daa:	d041      	beq.n	419e30 <.LVL25>
  419dac:	b2ca      	uxtb	r2, r1
  419dae:	4603      	mov	r3, r0
  419db0:	e002      	b.n	419db8 <.LVL4>

00419db2 <.LVL2>:
  419db2:	f114 34ff 	adds.w	r4, r4, #4294967295

00419db6 <.LVL3>:
  419db6:	d33b      	bcc.n	419e30 <.LVL25>

00419db8 <.LVL4>:
  419db8:	f803 2b01 	strb.w	r2, [r3], #1
  419dbc:	079d      	lsls	r5, r3, #30
  419dbe:	d1f8      	bne.n	419db2 <.LVL2>

00419dc0 <.LVL6>:
  419dc0:	2c03      	cmp	r4, #3
  419dc2:	d92e      	bls.n	419e22 <.LVL22>
  419dc4:	b2cd      	uxtb	r5, r1

00419dc6 <.LVL7>:
  419dc6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8

00419dca <.LVL8>:
  419dca:	2c0f      	cmp	r4, #15
  419dcc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16

00419dd0 <.LVL9>:
  419dd0:	d919      	bls.n	419e06 <.LVL17+0x2>
  419dd2:	f103 0210 	add.w	r2, r3, #16
  419dd6:	4626      	mov	r6, r4

00419dd8 <.LVL10>:
  419dd8:	3e10      	subs	r6, #16

00419dda <.LVL11>:
  419dda:	2e0f      	cmp	r6, #15
  419ddc:	f842 5c10 	str.w	r5, [r2, #-16]

00419de0 <.LVL12>:
  419de0:	f842 5c0c 	str.w	r5, [r2, #-12]

00419de4 <.LVL13>:
  419de4:	f842 5c08 	str.w	r5, [r2, #-8]

00419de8 <.LVL14>:
  419de8:	f842 5c04 	str.w	r5, [r2, #-4]
  419dec:	f102 0210 	add.w	r2, r2, #16

00419df0 <.LVL15>:
  419df0:	d8f2      	bhi.n	419dd8 <.LVL10>
  419df2:	f1a4 0210 	sub.w	r2, r4, #16

00419df6 <.LVL16>:
  419df6:	f022 020f 	bic.w	r2, r2, #15
  419dfa:	f004 040f 	and.w	r4, r4, #15
  419dfe:	3210      	adds	r2, #16
  419e00:	2c03      	cmp	r4, #3
  419e02:	4413      	add	r3, r2

00419e04 <.LVL17>:
  419e04:	d90d      	bls.n	419e22 <.LVL22>
  419e06:	461e      	mov	r6, r3
  419e08:	4622      	mov	r2, r4

00419e0a <.LVL18>:
  419e0a:	3a04      	subs	r2, #4

00419e0c <.LVL19>:
  419e0c:	2a03      	cmp	r2, #3
  419e0e:	f846 5b04 	str.w	r5, [r6], #4

00419e12 <.LVL20>:
  419e12:	d8fa      	bhi.n	419e0a <.LVL18>
  419e14:	1f22      	subs	r2, r4, #4

00419e16 <.LVL21>:
  419e16:	f022 0203 	bic.w	r2, r2, #3
  419e1a:	3204      	adds	r2, #4
  419e1c:	4413      	add	r3, r2
  419e1e:	f004 0403 	and.w	r4, r4, #3

00419e22 <.LVL22>:
  419e22:	b12c      	cbz	r4, 419e30 <.LVL25>
  419e24:	b2c9      	uxtb	r1, r1

00419e26 <.LVL23>:
  419e26:	441c      	add	r4, r3
  419e28:	f803 1b01 	strb.w	r1, [r3], #1
  419e2c:	429c      	cmp	r4, r3
  419e2e:	d1fb      	bne.n	419e28 <.LVL23+0x2>

00419e30 <.LVL25>:
  419e30:	bc70      	pop	{r4, r5, r6}

00419e32 <.LCFI1>:
  419e32:	4770      	bx	lr

00419e34 <.LCFI2>:
  419e34:	4614      	mov	r4, r2
  419e36:	4603      	mov	r3, r0
  419e38:	e7c2      	b.n	419dc0 <.LVL6>

00419e3a <.LFE17>:
  419e3a:	bf00      	nop

Disassembly of section .text.fp_mod_2d%166:

00419e3c <fp_mod_2d>:
{
  419e3c:	b570      	push	{r4, r5, r6, lr}

00419e3e <.LCFI70>:
  419e3e:	4614      	mov	r4, r2
   if (b <= 0) {
  419e40:	1e0d      	subs	r5, r1, #0
  419e42:	dd33      	ble.n	419eac <.LVL473>
  419e44:	4606      	mov	r6, r0
   fp_copy(a, c);
  419e46:	4611      	mov	r1, r2

00419e48 <.LVL466>:
  419e48:	f003 fae2 	bl	41d410 <.LFE194>

00419e4c <.LVL467>:
   if (b >= (DIGIT_BIT * a->used)) {
  419e4c:	6833      	ldr	r3, [r6, #0]
  419e4e:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
  419e52:	da3e      	bge.n	419ed2 <.LVL477>
  for (x = (b / DIGIT_BIT) + ((b % DIGIT_BIT) == 0 ? 0 : 1); x < c->used; x++) {
  419e54:	462b      	mov	r3, r5
  419e56:	2d00      	cmp	r5, #0
  419e58:	bfb8      	it	lt
  419e5a:	f105 031f 	addlt.w	r3, r5, #31
  419e5e:	115e      	asrs	r6, r3, #5

00419e60 <.LVL468>:
  419e60:	f015 031f 	ands.w	r3, r5, #31
  419e64:	bf18      	it	ne
  419e66:	2301      	movne	r3, #1
  419e68:	4433      	add	r3, r6

00419e6a <.LVL469>:
  419e6a:	6821      	ldr	r1, [r4, #0]
  419e6c:	428b      	cmp	r3, r1
  419e6e:	da08      	bge.n	419e82 <.LVL469+0x18>
  419e70:	eb04 0283 	add.w	r2, r4, r3, lsl #2
  419e74:	3204      	adds	r2, #4
    c->dp[x] = 0;
  419e76:	2000      	movs	r0, #0
  419e78:	f842 0f04 	str.w	r0, [r2, #4]!
  for (x = (b / DIGIT_BIT) + ((b % DIGIT_BIT) == 0 ? 0 : 1); x < c->used; x++) {
  419e7c:	3301      	adds	r3, #1
  419e7e:	428b      	cmp	r3, r1
  419e80:	d1fa      	bne.n	419e78 <.LVL469+0xe>
  419e82:	eb04 0386 	add.w	r3, r4, r6, lsl #2

00419e86 <.LVL471>:
  c->dp[b / DIGIT_BIT] &= ~((fp_digit)0) >> (DIGIT_BIT - b);
  419e86:	f1c5 0520 	rsb	r5, r5, #32

00419e8a <.LVL472>:
  419e8a:	f04f 32ff 	mov.w	r2, #4294967295
  419e8e:	fa22 f505 	lsr.w	r5, r2, r5
  419e92:	689a      	ldr	r2, [r3, #8]
  419e94:	402a      	ands	r2, r5
  419e96:	609a      	str	r2, [r3, #8]
  fp_clamp (c);
  419e98:	b1c1      	cbz	r1, 419ecc <.LVL476+0x18>
  419e9a:	1e4a      	subs	r2, r1, #1
  419e9c:	1c4b      	adds	r3, r1, #1
  419e9e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
  419ea2:	b97b      	cbnz	r3, 419ec4 <.LVL476+0x10>
  419ea4:	eb04 0381 	add.w	r3, r4, r1, lsl #2
  419ea8:	3304      	adds	r3, #4
  419eaa:	e004      	b.n	419eb6 <.LVL476+0x2>

00419eac <.LVL473>:
      fp_zero(c);
  419eac:	4610      	mov	r0, r2

00419eae <.LVL474>:
  419eae:	f003 fd6b 	bl	41d988 <.LFE163>

00419eb2 <.LVL475>:
      return;
  419eb2:	bd70      	pop	{r4, r5, r6, pc}

00419eb4 <.LVL476>:
  fp_clamp (c);
  419eb4:	4602      	mov	r2, r0
  419eb6:	b13a      	cbz	r2, 419ec8 <.LVL476+0x14>
  419eb8:	1e50      	subs	r0, r2, #1
  419eba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  419ebe:	2900      	cmp	r1, #0
  419ec0:	d0f8      	beq.n	419eb4 <.LVL476>
  419ec2:	6022      	str	r2, [r4, #0]
  419ec4:	6863      	ldr	r3, [r4, #4]
  419ec6:	e002      	b.n	419ece <.LVL476+0x1a>
  419ec8:	2300      	movs	r3, #0
  419eca:	6023      	str	r3, [r4, #0]
  419ecc:	2300      	movs	r3, #0
  419ece:	6063      	str	r3, [r4, #4]
  419ed0:	bd70      	pop	{r4, r5, r6, pc}

00419ed2 <.LVL477>:
  419ed2:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section .text.wc_InitSha256%167:

00419ed4 <wc_InitSha256>:
{
  419ed4:	b430      	push	{r4, r5}

00419ed6 <.LCFI2>:
  419ed6:	4603      	mov	r3, r0
    if ((PMC_REGS->PMC_PCSR1 & PmcBit) != PmcBit)
  419ed8:	4a1b      	ldr	r2, [pc, #108]	; (419f48 <.LCFI3+0x4>)
  419eda:	f8d2 2108 	ldr.w	r2, [r2, #264]	; 0x108
  419ede:	f012 0f01 	tst.w	r2, #1
  419ee2:	d103      	bne.n	419eec <.LCFI2+0x16>
        PMC_REGS->PMC_PCER1 = PmcBit;
  419ee4:	2101      	movs	r1, #1
  419ee6:	4a18      	ldr	r2, [pc, #96]	; (419f48 <.LCFI3+0x4>)
  419ee8:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    sha256->icm_descriptor.cfg.reg = 0x0;
  419eec:	2000      	movs	r0, #0

00419eee <.LVL20>:
  419eee:	6058      	str	r0, [r3, #4]
    sha256->icm_descriptor.cfg.bit.is_end_mon = 1;
  419ef0:	2204      	movs	r2, #4
  419ef2:	711a      	strb	r2, [r3, #4]
    sha256->icm_descriptor.cfg.bit.algo = 1;
  419ef4:	f04f 0200 	mov.w	r2, #0
  419ef8:	2101      	movs	r1, #1
  419efa:	f361 1206 	bfi	r2, r1, #4, #3
  419efe:	715a      	strb	r2, [r3, #5]
    sha256->digest[0] = 0x67E6096A;
  419f00:	4a12      	ldr	r2, [pc, #72]	; (419f4c <.LCFI3+0x8>)
  419f02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    sha256->digest[1] = 0x85AE67BB;
  419f06:	f102 52ee 	add.w	r2, r2, #499122176	; 0x1dc00000
  419f0a:	f502 2205 	add.w	r2, r2, #544768	; 0x85000
  419f0e:	f602 6251 	addw	r2, r2, #3665	; 0xe51
  419f12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    sha256->digest[2] = 0x72F36E3C;
  419f16:	4a0e      	ldr	r2, [pc, #56]	; (419f50 <.LCFI3+0xc>)
  419f18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    sha256->digest[3] = 0x3AF54FA5;
  419f1c:	4a0d      	ldr	r2, [pc, #52]	; (419f54 <.LCFI3+0x10>)
  419f1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    sha256->digest[4] = 0x7F520E51;
  419f22:	4a0d      	ldr	r2, [pc, #52]	; (419f58 <.LCFI3+0x14>)
  419f24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    sha256->digest[5] = 0x8C68059B;
  419f28:	4a0c      	ldr	r2, [pc, #48]	; (419f5c <.LCFI3+0x18>)
  419f2a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    sha256->digest[6] = 0xABD9831F;
  419f2e:	4a0c      	ldr	r2, [pc, #48]	; (419f60 <.LCFI3+0x1c>)
  419f30:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    sha256->digest[7] = 0x19CDE05B;
  419f34:	4a0b      	ldr	r2, [pc, #44]	; (419f64 <.LCFI3+0x20>)
  419f36:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    sha256->total_len = 0;
  419f3a:	2400      	movs	r4, #0
  419f3c:	2500      	movs	r5, #0
  419f3e:	e9c3 4528 	strd	r4, r5, [r3, #160]	; 0xa0
}
  419f42:	bc30      	pop	{r4, r5}

00419f44 <.LCFI3>:
  419f44:	4770      	bx	lr
  419f46:	bf00      	nop
  419f48:	400e0600 	.word	0x400e0600
  419f4c:	67e6096a 	.word	0x67e6096a
  419f50:	72f36e3c 	.word	0x72f36e3c
  419f54:	3af54fa5 	.word	0x3af54fa5
  419f58:	7f520e51 	.word	0x7f520e51
  419f5c:	8c68059b 	.word	0x8c68059b
  419f60:	abd9831f 	.word	0xabd9831f
  419f64:	19cde05b 	.word	0x19cde05b

Disassembly of section .text.SYS_TIME_AddToList%168:

00419f68 <SYS_TIME_AddToList>:
    SYS_TIME_TIMER_OBJ* tmr = counter->tmrActive;
  419f68:	4b23      	ldr	r3, [pc, #140]	; (419ff8 <.LVL71>)
  419f6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30

00419f6c <.LVL52>:
    if (newTimer == NULL)
  419f6c:	2800      	cmp	r0, #0
  419f6e:	d03f      	beq.n	419ff0 <.LCFI6>
{
  419f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

00419f74 <.LCFI5>:
  419f74:	4684      	mov	ip, r0
    newTimerTime = newTimer->relativeTimePending;
  419f76:	f8d0 8008 	ldr.w	r8, [r0, #8]

00419f7a <.LVL53>:
    if (tmr == NULL)
  419f7a:	b1b2      	cbz	r2, 419faa <.LVL58>
            if ((total_time + tmr->relativeTimePending) > newTimerTime)
  419f7c:	6894      	ldr	r4, [r2, #8]
  419f7e:	2500      	movs	r5, #0
  419f80:	4646      	mov	r6, r8
  419f82:	2700      	movs	r7, #0
  419f84:	42af      	cmp	r7, r5
  419f86:	bf08      	it	eq
  419f88:	45a0      	cmpeq	r8, r4
  419f8a:	d328      	bcc.n	419fde <.LVL65>

00419f8c <.LVL54>:
            tmr = tmr->tmrNext;
  419f8c:	6993      	ldr	r3, [r2, #24]

00419f8e <.LVL55>:
        while (tmr != NULL)
  419f8e:	b18b      	cbz	r3, 419fb4 <.LVL61>
            if ((total_time + tmr->relativeTimePending) > newTimerTime)
  419f90:	6899      	ldr	r1, [r3, #8]
  419f92:	468e      	mov	lr, r1
  419f94:	1860      	adds	r0, r4, r1
  419f96:	f145 0100 	adc.w	r1, r5, #0
  419f9a:	428f      	cmp	r7, r1
  419f9c:	bf08      	it	eq
  419f9e:	4286      	cmpeq	r6, r0
  419fa0:	d31b      	bcc.n	419fda <.LVL64>
  419fa2:	4604      	mov	r4, r0

00419fa4 <.LVL56>:
  419fa4:	460d      	mov	r5, r1
            tmr = tmr->tmrNext;
  419fa6:	461a      	mov	r2, r3

00419fa8 <.LVL57>:
  419fa8:	e7f0      	b.n	419f8c <.LVL54>

00419faa <.LVL58>:
        counter->tmrActive = newTimer;
  419faa:	4b13      	ldr	r3, [pc, #76]	; (419ff8 <.LVL71>)
  419fac:	6318      	str	r0, [r3, #48]	; 0x30

00419fae <.LVL59>:
        isHeadTimerUpdated = true;
  419fae:	2001      	movs	r0, #1

00419fb0 <.LVL60>:
  419fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00419fb4 <.LVL61>:
            tmr = tmr->tmrNext;
  419fb4:	4619      	mov	r1, r3

00419fb6 <.LVL62>:
        if (prevTmr == NULL)
  419fb6:	b1a2      	cbz	r2, 419fe2 <.LVL66>
            newTimer->tmrNext = prevTmr->tmrNext;
  419fb8:	f8cc 3018 	str.w	r3, [ip, #24]
            prevTmr->tmrNext = newTimer;
  419fbc:	f8c2 c018 	str.w	ip, [r2, #24]
    bool isHeadTimerUpdated = false;
  419fc0:	2000      	movs	r0, #0

00419fc2 <.LVL63>:
        newTimer->relativeTimePending = newTimerTime - total_time;
  419fc2:	eba8 0404 	sub.w	r4, r8, r4
  419fc6:	f8cc 4008 	str.w	r4, [ip, #8]
        if (newTimer->tmrNext != NULL)
  419fca:	f8dc 3018 	ldr.w	r3, [ip, #24]
  419fce:	b18b      	cbz	r3, 419ff4 <.LCFI7>
            newTimer->tmrNext->relativeTimePending -= newTimer->relativeTimePending;
  419fd0:	689a      	ldr	r2, [r3, #8]
  419fd2:	1b14      	subs	r4, r2, r4
  419fd4:	609c      	str	r4, [r3, #8]
  419fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00419fda <.LVL64>:
            tmr = tmr->tmrNext;
  419fda:	4619      	mov	r1, r3
  419fdc:	e7eb      	b.n	419fb6 <.LVL62>

00419fde <.LVL65>:
            if ((total_time + tmr->relativeTimePending) > newTimerTime)
  419fde:	4611      	mov	r1, r2
  419fe0:	2400      	movs	r4, #0

00419fe2 <.LVL66>:
            counter->tmrActive = newTimer;
  419fe2:	4b05      	ldr	r3, [pc, #20]	; (419ff8 <.LVL71>)
  419fe4:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
            newTimer->tmrNext = tmr;
  419fe8:	f8cc 1018 	str.w	r1, [ip, #24]

00419fec <.LVL67>:
            isHeadTimerUpdated = true;
  419fec:	2001      	movs	r0, #1
  419fee:	e7e8      	b.n	419fc2 <.LVL63>

00419ff0 <.LCFI6>:
        return isHeadTimerUpdated;
  419ff0:	2000      	movs	r0, #0

00419ff2 <.LVL69>:
  419ff2:	4770      	bx	lr

00419ff4 <.LCFI7>:
}
  419ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00419ff8 <.LVL71>:
  419ff8:	2040d624 	.word	0x2040d624

Disassembly of section .text.__pic32c_data_initialization%169:

00419ffc <__pic32c_data_initialization>:
  419ffc:	4921      	ldr	r1, [pc, #132]	; (41a084 <.LFE163+0x88>)
  419ffe:	680b      	ldr	r3, [r1, #0]
  41a000:	b430      	push	{r4, r5}
  41a002:	b113      	cbz	r3, 41a00a <__pic32c_data_initialization+0xe>
  41a004:	4b20      	ldr	r3, [pc, #128]	; (41a088 <.LFE163+0x8c>)
  41a006:	681a      	ldr	r2, [r3, #0]
  41a008:	bb72      	cbnz	r2, 41a068 <__pic32c_data_initialization+0x6c>
  41a00a:	4820      	ldr	r0, [pc, #128]	; (41a08c <.LFE163+0x90>)
  41a00c:	2500      	movs	r5, #0
  41a00e:	6801      	ldr	r1, [r0, #0]
  41a010:	b9c1      	cbnz	r1, 41a044 <__pic32c_data_initialization+0x48>
  41a012:	6842      	ldr	r2, [r0, #4]
  41a014:	b332      	cbz	r2, 41a064 <__pic32c_data_initialization+0x68>
  41a016:	6883      	ldr	r3, [r0, #8]
  41a018:	300c      	adds	r0, #12
  41a01a:	b1d3      	cbz	r3, 41a052 <__pic32c_data_initialization+0x56>
  41a01c:	3901      	subs	r1, #1
  41a01e:	4603      	mov	r3, r0
  41a020:	f813 4b01 	ldrb.w	r4, [r3], #1
  41a024:	f801 4f01 	strb.w	r4, [r1, #1]!
  41a028:	1a1c      	subs	r4, r3, r0
  41a02a:	4294      	cmp	r4, r2
  41a02c:	d3f8      	bcc.n	41a020 <__pic32c_data_initialization+0x24>
  41a02e:	f012 0303 	ands.w	r3, r2, #3
  41a032:	bf18      	it	ne
  41a034:	2301      	movne	r3, #1
  41a036:	eb03 0292 	add.w	r2, r3, r2, lsr #2
  41a03a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  41a03e:	6801      	ldr	r1, [r0, #0]
  41a040:	2900      	cmp	r1, #0
  41a042:	d0e6      	beq.n	41a012 <__pic32c_data_initialization+0x16>
  41a044:	6884      	ldr	r4, [r0, #8]
  41a046:	6842      	ldr	r2, [r0, #4]
  41a048:	460b      	mov	r3, r1
  41a04a:	300c      	adds	r0, #12
  41a04c:	b93c      	cbnz	r4, 41a05e <__pic32c_data_initialization+0x62>
  41a04e:	2a00      	cmp	r2, #0
  41a050:	d0dd      	beq.n	41a00e <__pic32c_data_initialization+0x12>
  41a052:	441a      	add	r2, r3
  41a054:	f803 5b01 	strb.w	r5, [r3], #1
  41a058:	4293      	cmp	r3, r2
  41a05a:	d1fb      	bne.n	41a054 <__pic32c_data_initialization+0x58>
  41a05c:	e7d7      	b.n	41a00e <__pic32c_data_initialization+0x12>
  41a05e:	2a00      	cmp	r2, #0
  41a060:	d1dc      	bne.n	41a01c <__pic32c_data_initialization+0x20>
  41a062:	e7e4      	b.n	41a02e <__pic32c_data_initialization+0x32>
  41a064:	bc30      	pop	{r4, r5}
  41a066:	4770      	bx	lr
  41a068:	428b      	cmp	r3, r1
  41a06a:	d2ce      	bcs.n	41a00a <__pic32c_data_initialization+0xe>
  41a06c:	43da      	mvns	r2, r3
  41a06e:	440a      	add	r2, r1
  41a070:	f022 0203 	bic.w	r2, r2, #3
  41a074:	3204      	adds	r2, #4
  41a076:	441a      	add	r2, r3
  41a078:	2100      	movs	r1, #0
  41a07a:	f843 1b04 	str.w	r1, [r3], #4
  41a07e:	4293      	cmp	r3, r2
  41a080:	d1fb      	bne.n	41a07a <__pic32c_data_initialization+0x7e>
  41a082:	e7c2      	b.n	41a00a <__pic32c_data_initialization+0xe>
  41a084:	20400054 	.word	0x20400054
  41a088:	20400000 	.word	0x20400000
  41a08c:	00409270 	.word	0x00409270

Disassembly of section .text._malloc_trim_r%170:

0041a090 <_malloc_trim_r>:
  41a090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041a092 <.LCFI0>:
  41a092:	4f21      	ldr	r7, [pc, #132]	; (41a118 <.LVL22+0x6>)
  41a094:	460c      	mov	r4, r1
  41a096:	4606      	mov	r6, r0
  41a098:	f7fe ffac 	bl	418ff4 <.LFE180>

0041a09c <.LVL1>:
  41a09c:	68bb      	ldr	r3, [r7, #8]
  41a09e:	685d      	ldr	r5, [r3, #4]
  41a0a0:	f1c4 046f 	rsb	r4, r4, #111	; 0x6f

0041a0a4 <.LVL2>:
  41a0a4:	f025 0503 	bic.w	r5, r5, #3

0041a0a8 <.LVL3>:
  41a0a8:	442c      	add	r4, r5
  41a0aa:	f024 047f 	bic.w	r4, r4, #127	; 0x7f
  41a0ae:	3c80      	subs	r4, #128	; 0x80

0041a0b0 <.LVL4>:
  41a0b0:	2c7f      	cmp	r4, #127	; 0x7f
  41a0b2:	dd07      	ble.n	41a0c4 <.LVL6>
  41a0b4:	2100      	movs	r1, #0
  41a0b6:	4630      	mov	r0, r6
  41a0b8:	f003 f9bc 	bl	41d434 <.LFE91>

0041a0bc <.LVL5>:
  41a0bc:	68bb      	ldr	r3, [r7, #8]
  41a0be:	442b      	add	r3, r5
  41a0c0:	4298      	cmp	r0, r3
  41a0c2:	d004      	beq.n	41a0ce <.LVL8>

0041a0c4 <.LVL6>:
  41a0c4:	4630      	mov	r0, r6
  41a0c6:	f000 ff25 	bl	41af14 <.LFE269>

0041a0ca <.LVL7>:
  41a0ca:	2000      	movs	r0, #0
  41a0cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041a0ce <.LVL8>:
  41a0ce:	4261      	negs	r1, r4
  41a0d0:	4630      	mov	r0, r6

0041a0d2 <.LVL9>:
  41a0d2:	f003 f9af 	bl	41d434 <.LFE91>

0041a0d6 <.LVL10>:
  41a0d6:	3001      	adds	r0, #1

0041a0d8 <.LVL11>:
  41a0d8:	d00d      	beq.n	41a0f6 <.LVL16>
  41a0da:	4a10      	ldr	r2, [pc, #64]	; (41a11c <.LVL22+0xa>)
  41a0dc:	68b9      	ldr	r1, [r7, #8]
  41a0de:	6813      	ldr	r3, [r2, #0]
  41a0e0:	1b2d      	subs	r5, r5, r4

0041a0e2 <.LVL12>:
  41a0e2:	f045 0501 	orr.w	r5, r5, #1
  41a0e6:	4630      	mov	r0, r6

0041a0e8 <.LVL13>:
  41a0e8:	1b1c      	subs	r4, r3, r4

0041a0ea <.LVL14>:
  41a0ea:	604d      	str	r5, [r1, #4]
  41a0ec:	6014      	str	r4, [r2, #0]
  41a0ee:	f000 ff11 	bl	41af14 <.LFE269>

0041a0f2 <.LVL15>:
  41a0f2:	2001      	movs	r0, #1
  41a0f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041a0f6 <.LVL16>:
  41a0f6:	2100      	movs	r1, #0
  41a0f8:	4630      	mov	r0, r6

0041a0fa <.LVL17>:
  41a0fa:	f003 f99b 	bl	41d434 <.LFE91>

0041a0fe <.LVL18>:
  41a0fe:	68ba      	ldr	r2, [r7, #8]
  41a100:	1a83      	subs	r3, r0, r2

0041a102 <.LVL19>:
  41a102:	2b0f      	cmp	r3, #15
  41a104:	ddde      	ble.n	41a0c4 <.LVL6>
  41a106:	4c06      	ldr	r4, [pc, #24]	; (41a120 <.LVL22+0xe>)

0041a108 <.LVL20>:
  41a108:	4904      	ldr	r1, [pc, #16]	; (41a11c <.LVL22+0xa>)
  41a10a:	6824      	ldr	r4, [r4, #0]
  41a10c:	f043 0301 	orr.w	r3, r3, #1

0041a110 <.LVL21>:
  41a110:	1b00      	subs	r0, r0, r4

0041a112 <.LVL22>:
  41a112:	6053      	str	r3, [r2, #4]
  41a114:	6008      	str	r0, [r1, #0]
  41a116:	e7d5      	b.n	41a0c4 <.LVL6>
  41a118:	2040cc80 	.word	0x2040cc80
  41a11c:	2040d65c 	.word	0x2040d65c
  41a120:	2040d78c 	.word	0x2040d78c

Disassembly of section .text.sha256_test%171:

0041a124 <sha256_test>:
{
  41a124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0041a128 <.LCFI8>:
  41a128:	b090      	sub	sp, #64	; 0x40

0041a12a <.LCFI9>:
  41a12a:	af00      	add	r7, sp, #0

0041a12c <.LCFI10>:
  41a12c:	f5ad 7d20 	sub.w	sp, sp, #640	; 0x280
  41a130:	f10d 057f 	add.w	r5, sp, #127	; 0x7f
  41a134:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
    test_sha[0] = a;
  41a138:	4b1c      	ldr	r3, [pc, #112]	; (41a1ac <.LCFI12+0x4>)
  41a13a:	603b      	str	r3, [r7, #0]
  41a13c:	f503 7223 	add.w	r2, r3, #652	; 0x28c
  41a140:	607a      	str	r2, [r7, #4]
  41a142:	2203      	movs	r2, #3
  41a144:	60ba      	str	r2, [r7, #8]
  41a146:	2220      	movs	r2, #32
  41a148:	60fa      	str	r2, [r7, #12]
    test_sha[1] = b;
  41a14a:	f503 71e2 	add.w	r1, r3, #452	; 0x1c4
  41a14e:	6139      	str	r1, [r7, #16]
  41a150:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
  41a154:	617b      	str	r3, [r7, #20]
  41a156:	2338      	movs	r3, #56	; 0x38
  41a158:	61bb      	str	r3, [r7, #24]
  41a15a:	61fa      	str	r2, [r7, #28]
    CRYPT_SHA256_Initialize(&sha);
  41a15c:	4628      	mov	r0, r5
  41a15e:	f003 fc97 	bl	41da90 <.LFE167>

0041a162 <.LVL15>:
    appData.sha256_test_result = times;
  41a162:	2202      	movs	r2, #2
  41a164:	4b12      	ldr	r3, [pc, #72]	; (41a1b0 <.LCFI12+0x8>)
  41a166:	60da      	str	r2, [r3, #12]

0041a168 <.LVL16>:
  41a168:	2400      	movs	r4, #0
            appData.sha256_test_result--;
  41a16a:	4698      	mov	r8, r3
  41a16c:	e002      	b.n	41a174 <.LVL17+0x6>

0041a16e <.LVL17>:
  41a16e:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  41a170:	2c20      	cmp	r4, #32
  41a172:	d017      	beq.n	41a1a4 <.LVL20+0x10>
  41a174:	193e      	adds	r6, r7, r4
        CRYPT_SHA256_DataAdd(&sha, (byte*)test_sha[i].input,(word32)test_sha[i].inLen);
  41a176:	68b2      	ldr	r2, [r6, #8]
  41a178:	5939      	ldr	r1, [r7, r4]
  41a17a:	4628      	mov	r0, r5
  41a17c:	f003 fb3c 	bl	41d7f8 <.LFE170>

0041a180 <.LVL18>:
        CRYPT_SHA256_Finalize(&sha, hash);
  41a180:	f107 0120 	add.w	r1, r7, #32
  41a184:	4628      	mov	r0, r5
  41a186:	f003 fb43 	bl	41d810 <.LFE173>

0041a18a <.LVL19>:
        if (memcmp(hash, test_sha[i].output, SHA256_DIGEST_SIZE) == 0)
  41a18a:	2220      	movs	r2, #32
  41a18c:	6871      	ldr	r1, [r6, #4]
  41a18e:	18b8      	adds	r0, r7, r2
  41a190:	f001 fdba 	bl	41bd08 <memcmp>

0041a194 <.LVL20>:
  41a194:	2800      	cmp	r0, #0
  41a196:	d1ea      	bne.n	41a16e <.LVL17>
            appData.sha256_test_result--;
  41a198:	f8d8 300c 	ldr.w	r3, [r8, #12]
  41a19c:	3b01      	subs	r3, #1
  41a19e:	f8c8 300c 	str.w	r3, [r8, #12]
  41a1a2:	e7e4      	b.n	41a16e <.LVL17>
}
  41a1a4:	3740      	adds	r7, #64	; 0x40

0041a1a6 <.LCFI11>:
  41a1a6:	46bd      	mov	sp, r7

0041a1a8 <.LCFI12>:
  41a1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41a1ac:	0040ab9c 	.word	0x0040ab9c
  41a1b0:	2040d534 	.word	0x2040d534

Disassembly of section .text.wc_FreeRsaKey%172:

0041a1b4 <wc_FreeRsaKey>:
    if (key == NULL) {
  41a1b4:	2800      	cmp	r0, #0
  41a1b6:	d042      	beq.n	41a23e <.LCFI16>
{
  41a1b8:	b510      	push	{r4, lr}

0041a1ba <.LCFI15>:
  41a1ba:	4604      	mov	r4, r0
    wc_RsaCleanup(key);
  41a1bc:	f001 fb8a 	bl	41b8d4 <.LFE42>

0041a1c0 <.LVL66>:
    if (key->type == RSA_PRIVATE) {
  41a1c0:	f241 1348 	movw	r3, #4424	; 0x1148
  41a1c4:	58e3      	ldr	r3, [r4, r3]
  41a1c6:	2b01      	cmp	r3, #1
  41a1c8:	d020      	beq.n	41a20c <.LVL74+0x4>
    mp_clear(&key->u);
  41a1ca:	f604 7018 	addw	r0, r4, #3864	; 0xf18
  41a1ce:	f003 fd06 	bl	41dbde <.LFE179>

0041a1d2 <.LVL67>:
    mp_clear(&key->dQ);
  41a1d2:	f504 604f 	add.w	r0, r4, #3312	; 0xcf0
  41a1d6:	f003 fd02 	bl	41dbde <.LFE179>

0041a1da <.LVL68>:
    mp_clear(&key->dP);
  41a1da:	f604 20c8 	addw	r0, r4, #2760	; 0xac8
  41a1de:	f003 fcfe 	bl	41dbde <.LFE179>

0041a1e2 <.LVL69>:
    mp_clear(&key->q);
  41a1e2:	f504 600a 	add.w	r0, r4, #2208	; 0x8a0
  41a1e6:	f003 fcfa 	bl	41dbde <.LFE179>

0041a1ea <.LVL70>:
    mp_clear(&key->p);
  41a1ea:	f504 60cf 	add.w	r0, r4, #1656	; 0x678
  41a1ee:	f003 fcf6 	bl	41dbde <.LFE179>

0041a1f2 <.LVL71>:
    mp_clear(&key->d);
  41a1f2:	f504 608a 	add.w	r0, r4, #1104	; 0x450
  41a1f6:	f003 fcf2 	bl	41dbde <.LFE179>

0041a1fa <.LVL72>:
    mp_clear(&key->e);
  41a1fa:	f504 700a 	add.w	r0, r4, #552	; 0x228
  41a1fe:	f003 fcee 	bl	41dbde <.LFE179>

0041a202 <.LVL73>:
    mp_clear(&key->n);
  41a202:	4620      	mov	r0, r4
  41a204:	f003 fceb 	bl	41dbde <.LFE179>

0041a208 <.LVL74>:
    return ret;
  41a208:	2000      	movs	r0, #0
  41a20a:	bd10      	pop	{r4, pc}
        mp_forcezero(&key->u);
  41a20c:	f604 7018 	addw	r0, r4, #3864	; 0xf18
  41a210:	f003 fda0 	bl	41dd54 <mp_forcezero>

0041a214 <.LVL76>:
        mp_forcezero(&key->dQ);
  41a214:	f504 604f 	add.w	r0, r4, #3312	; 0xcf0
  41a218:	f003 fd9c 	bl	41dd54 <mp_forcezero>

0041a21c <.LVL77>:
        mp_forcezero(&key->dP);
  41a21c:	f604 20c8 	addw	r0, r4, #2760	; 0xac8
  41a220:	f003 fd98 	bl	41dd54 <mp_forcezero>

0041a224 <.LVL78>:
        mp_forcezero(&key->q);
  41a224:	f504 600a 	add.w	r0, r4, #2208	; 0x8a0
  41a228:	f003 fd94 	bl	41dd54 <mp_forcezero>

0041a22c <.LVL79>:
        mp_forcezero(&key->p);
  41a22c:	f504 60cf 	add.w	r0, r4, #1656	; 0x678
  41a230:	f003 fd90 	bl	41dd54 <mp_forcezero>

0041a234 <.LVL80>:
        mp_forcezero(&key->d);
  41a234:	f504 608a 	add.w	r0, r4, #1104	; 0x450
  41a238:	f003 fd8c 	bl	41dd54 <mp_forcezero>

0041a23c <.LVL81>:
  41a23c:	e7c5      	b.n	41a1ca <.LVL66+0xa>

0041a23e <.LCFI16>:
        return BAD_FUNC_ARG;
  41a23e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041a242 <.LVL83>:
  41a242:	4770      	bx	lr

Disassembly of section .text.wc_ShaFinal%173:

0041a244 <wc_ShaFinal>:
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };



int wc_ShaFinal(Sha* sha, byte* hash)
{
  41a244:	b570      	push	{r4, r5, r6, lr}

0041a246 <.LCFI5>:
  41a246:	b082      	sub	sp, #8

0041a248 <.LCFI6>:
  41a248:	4604      	mov	r4, r0
  41a24a:	460d      	mov	r5, r1
    uint8_t  padn;
    uint8_t  msg_len[8];

    /* Get the number of bits */
    /* create the message bit length block */
    uint64_t total_bits = sha->total_len << 3;
  41a24c:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
  41a250:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
  41a254:	00db      	lsls	r3, r3, #3
  41a256:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  41a25a:	00d1      	lsls	r1, r2, #3

0041a25c <.LVL43>:
    msg_len[0] = (uint8_t)(total_bits >> 56);
  41a25c:	0e18      	lsrs	r0, r3, #24

0041a25e <.LVL44>:
  41a25e:	f88d 0000 	strb.w	r0, [sp]
    msg_len[1] = (uint8_t)(total_bits >> 48);
  41a262:	0c18      	lsrs	r0, r3, #16
  41a264:	f88d 0001 	strb.w	r0, [sp, #1]
    msg_len[2] = (uint8_t)(total_bits >> 40);
  41a268:	0a18      	lsrs	r0, r3, #8
  41a26a:	f88d 0002 	strb.w	r0, [sp, #2]
    msg_len[3] = (uint8_t)(total_bits >> 32);
  41a26e:	f88d 3003 	strb.w	r3, [sp, #3]
    msg_len[4] = (uint8_t)(total_bits >> 24);
  41a272:	0e0b      	lsrs	r3, r1, #24

0041a274 <.LVL45>:
  41a274:	f88d 3004 	strb.w	r3, [sp, #4]
    msg_len[5] = (uint8_t)(total_bits >> 16);
  41a278:	0c0b      	lsrs	r3, r1, #16
  41a27a:	f88d 3005 	strb.w	r3, [sp, #5]
    msg_len[6] = (uint8_t)(total_bits >>  8);
  41a27e:	0a0b      	lsrs	r3, r1, #8
  41a280:	f88d 3006 	strb.w	r3, [sp, #6]
    msg_len[7] = (uint8_t)(total_bits);
  41a284:	f88d 1007 	strb.w	r1, [sp, #7]

    last = sha->total_len & 0x3F;
  41a288:	f002 023f 	and.w	r2, r2, #63	; 0x3f

0041a28c <.LVL46>:
    padn = (last < SHA_PAD_SIZE) ? (SHA_PAD_SIZE - last) : (120 - last);
  41a28c:	2a37      	cmp	r2, #55	; 0x37
  41a28e:	bf94      	ite	ls
  41a290:	f1c2 0238 	rsbls	r2, r2, #56	; 0x38

0041a294 <.LVL47>:
  41a294:	f1c2 0278 	rsbhi	r2, r2, #120	; 0x78
  41a298:	b2d2      	uxtb	r2, r2

0041a29a <.LVL48>:

    wc_ShaUpdate(sha, sha_padding, padn);
  41a29a:	490d      	ldr	r1, [pc, #52]	; (41a2d0 <.LVL53+0x2>)
  41a29c:	4620      	mov	r0, r4
  41a29e:	f000 fafe 	bl	41a89e <.LFE58>

0041a2a2 <.LVL50>:

    wc_ShaUpdate(sha, msg_len, 8);
  41a2a2:	2208      	movs	r2, #8
  41a2a4:	4669      	mov	r1, sp
  41a2a6:	4620      	mov	r0, r4
  41a2a8:	f000 faf9 	bl	41a89e <.LFE58>

0041a2ac <.LVL51>:

    memcpy(hash, sha->digest, SHA_DIGEST_SIZE);
  41a2ac:	4623      	mov	r3, r4
  41a2ae:	f853 2f80 	ldr.w	r2, [r3, #128]!
  41a2b2:	685e      	ldr	r6, [r3, #4]
  41a2b4:	6898      	ldr	r0, [r3, #8]
  41a2b6:	68d9      	ldr	r1, [r3, #12]
  41a2b8:	602a      	str	r2, [r5, #0]
  41a2ba:	606e      	str	r6, [r5, #4]
  41a2bc:	60a8      	str	r0, [r5, #8]
  41a2be:	60e9      	str	r1, [r5, #12]
  41a2c0:	691a      	ldr	r2, [r3, #16]
  41a2c2:	612a      	str	r2, [r5, #16]

    return wc_InitSha(sha);
  41a2c4:	4620      	mov	r0, r4
  41a2c6:	f001 fcbf 	bl	41bc48 <.LFE19>

0041a2ca <.LVL52>:
}
  41a2ca:	b002      	add	sp, #8

0041a2cc <.LCFI7>:
  41a2cc:	bd70      	pop	{r4, r5, r6, pc}

0041a2ce <.LVL53>:
  41a2ce:	bf00      	nop
  41a2d0:	0041c9b4 	.word	0x0041c9b4

Disassembly of section .rodata%174:

0041a2d4 <.rodata%174>:
  41a2d4:	2e322e31 	.word	0x2e322e31
  41a2d8:	00000037 	.word	0x00000037
  41a2dc:	6465656e 	.word	0x6465656e
  41a2e0:	63696420 	.word	0x63696420
  41a2e4:	6e6f6974 	.word	0x6e6f6974
  41a2e8:	00797261 	.word	0x00797261
  41a2ec:	65727473 	.word	0x65727473
  41a2f0:	65206d61 	.word	0x65206d61
  41a2f4:	0000646e 	.word	0x0000646e
  41a2f8:	00000000 	.word	0x00000000
  41a2fc:	656c6966 	.word	0x656c6966
  41a300:	72726520 	.word	0x72726520
  41a304:	0000726f 	.word	0x0000726f
  41a308:	65727473 	.word	0x65727473
  41a30c:	65206d61 	.word	0x65206d61
  41a310:	726f7272 	.word	0x726f7272
  41a314:	00000000 	.word	0x00000000
  41a318:	61746164 	.word	0x61746164
  41a31c:	72726520 	.word	0x72726520
  41a320:	0000726f 	.word	0x0000726f
  41a324:	75736e69 	.word	0x75736e69
  41a328:	63696666 	.word	0x63696666
  41a32c:	746e6569 	.word	0x746e6569
  41a330:	6d656d20 	.word	0x6d656d20
  41a334:	0079726f 	.word	0x0079726f
  41a338:	66667562 	.word	0x66667562
  41a33c:	65207265 	.word	0x65207265
  41a340:	726f7272 	.word	0x726f7272
  41a344:	00000000 	.word	0x00000000
  41a348:	6f636e69 	.word	0x6f636e69
  41a34c:	7461706d 	.word	0x7461706d
  41a350:	656c6269 	.word	0x656c6269
  41a354:	72657620 	.word	0x72657620
  41a358:	6e6f6973 	.word	0x6e6f6973
  41a35c:	00          	.byte	0x00
  41a35d:	00          	.byte	0x00
  41a35e:	bf00      	nop

Disassembly of section .text.PIO_Initialize%175:

0041a360 <PIO_Initialize>:
    See plib_pio.h for more details.
*/
void PIO_Initialize ( void )
{
    /* Selected System IO pins are configured as GPIO */
    MATRIX_REGS->CCFG_SYSIO |= 0x10;
  41a360:	4a20      	ldr	r2, [pc, #128]	; (41a3e4 <PIO_Initialize+0x84>)
  41a362:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  41a366:	f043 0310 	orr.w	r3, r3, #16
  41a36a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    /************************ PIO A Initialization ************************/
    /* PORTA PIO Disable and Peripheral Enable*/
    ((pio_registers_t*)PIO_PORT_A)->PIO_PDR = 0x200000;
  41a36e:	f502 22b1 	add.w	r2, r2, #362496	; 0x58800
  41a372:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
  41a376:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  41a37a:	6053      	str	r3, [r2, #4]
    /* PORTA Pull Up Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_A)->PIO_PUDR = ~0x800;
  41a37c:	f46f 6300 	mvn.w	r3, #2048	; 0x800
  41a380:	6613      	str	r3, [r2, #96]	; 0x60
    ((pio_registers_t*)PIO_PORT_A)->PIO_PUER = 0x800;
  41a382:	f44f 6300 	mov.w	r3, #2048	; 0x800
  41a386:	6653      	str	r3, [r2, #100]	; 0x64
    /* PORTA Pull Down Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_A)->PIO_PPDDR = 0xFFFFFFFF;
  41a388:	f04f 33ff 	mov.w	r3, #4294967295
  41a38c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* PORTA Output Write Enable */
    ((pio_registers_t*)PIO_PORT_A)->PIO_OWER = PIO_OWER_Msk;
  41a390:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    /* PORTA Output Direction Enable */
    ((pio_registers_t*)PIO_PORT_A)->PIO_OER = 0x20;
  41a394:	2120      	movs	r1, #32
  41a396:	6111      	str	r1, [r2, #16]
    /* PORTA Initial state High */
    ((pio_registers_t*)PIO_PORT_A)->PIO_SODR = 0x20;
  41a398:	6311      	str	r1, [r2, #48]	; 0x30

    /************************ PIO B Initialization ************************/
    /* PORTB Peripheral Function Selection */
    ((pio_registers_t*)PIO_PORT_B)->PIO_ABCDSR[0]= 0x10;
  41a39a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  41a39e:	2110      	movs	r1, #16
  41a3a0:	6711      	str	r1, [r2, #112]	; 0x70
    ((pio_registers_t*)PIO_PORT_B)->PIO_ABCDSR[1]= 0x10;
  41a3a2:	6751      	str	r1, [r2, #116]	; 0x74
    /* PORTB PIO Disable and Peripheral Enable*/
    ((pio_registers_t*)PIO_PORT_B)->PIO_PDR = 0x10;
  41a3a4:	6051      	str	r1, [r2, #4]
    /* PORTB Pull Up Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_B)->PIO_PUDR = 0xFFFFFFFF;
  41a3a6:	6613      	str	r3, [r2, #96]	; 0x60
    /* PORTB Pull Down Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_B)->PIO_PPDDR = 0xFFFFFFFF;
  41a3a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* PORTB Output Write Enable */
    ((pio_registers_t*)PIO_PORT_B)->PIO_OWER = PIO_OWER_Msk;
  41a3ac:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    /* PORTB Output Direction Enable */
    ((pio_registers_t*)PIO_PORT_B)->PIO_OER = 0x100;
  41a3b0:	f44f 7180 	mov.w	r1, #256	; 0x100
  41a3b4:	6111      	str	r1, [r2, #16]
    /* PORTB Initial state High */
    ((pio_registers_t*)PIO_PORT_B)->PIO_SODR = 0x100;
  41a3b6:	6311      	str	r1, [r2, #48]	; 0x30

    /************************ PIO C Initialization ************************/
    /* PORTC Pull Up Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_C)->PIO_PUDR = 0xFFFFFFFF;
  41a3b8:	f502 7200 	add.w	r2, r2, #512	; 0x200
  41a3bc:	6613      	str	r3, [r2, #96]	; 0x60
    /* PORTC Pull Down Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_C)->PIO_PPDDR = 0xFFFFFFFF;
  41a3be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* PORTC Output Write Enable */
    ((pio_registers_t*)PIO_PORT_C)->PIO_OWER = PIO_OWER_Msk;
  41a3c2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    /************************ PIO D Initialization ************************/
    /* PORTD Pull Up Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_D)->PIO_PUDR = 0xFFFFFFFF;
  41a3c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
  41a3ca:	6613      	str	r3, [r2, #96]	; 0x60
    /* PORTD Pull Down Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_D)->PIO_PPDDR = 0xFFFFFFFF;
  41a3cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* PORTD Output Write Enable */
    ((pio_registers_t*)PIO_PORT_D)->PIO_OWER = PIO_OWER_Msk;
  41a3d0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    /************************ PIO E Initialization ************************/
    /* PORTE Pull Up Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_E)->PIO_PUDR = 0xFFFFFFFF;
  41a3d4:	f502 7200 	add.w	r2, r2, #512	; 0x200
  41a3d8:	6613      	str	r3, [r2, #96]	; 0x60
    /* PORTE Pull Down Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_E)->PIO_PPDDR = 0xFFFFFFFF;
  41a3da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* PORTE Output Write Enable */
    ((pio_registers_t*)PIO_PORT_E)->PIO_OWER = PIO_OWER_Msk;
  41a3de:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  41a3e2:	4770      	bx	lr
  41a3e4:	40088000 	.word	0x40088000

Disassembly of section .text.wc_Des_CbcDecrypt%176:

0041a3e8 <wc_Des_CbcDecrypt>:
    {
  41a3e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

0041a3ec <.LCFI12>:
        word32 blocks = sz / DES_BLOCK_SIZE;
  41a3ec:	08db      	lsrs	r3, r3, #3

0041a3ee <.LVL195>:
        while (blocks--) {
  41a3ee:	2b00      	cmp	r3, #0
  41a3f0:	d03b      	beq.n	41a46a <.LBE265>
  41a3f2:	4604      	mov	r4, r0
  41a3f4:	460d      	mov	r5, r1
  41a3f6:	4617      	mov	r7, r2
  41a3f8:	f103 39ff 	add.w	r9, r3, #4294967295

0041a3fc <.LVL196>:
  41a3fc:	f101 38ff 	add.w	r8, r1, #4294967295
            XMEMCPY(des->tmp, in, DES_BLOCK_SIZE);
  41a400:	f100 0608 	add.w	r6, r0, #8
  41a404:	e016      	b.n	41a434 <.LBE261+0x1a>

0041a406 <.LBB261>:
    for (i = 0; i < n; i++) r[i] ^= a[i];
  41a406:	f8d8 3001 	ldr.w	r3, [r8, #1]
  41a40a:	6822      	ldr	r2, [r4, #0]
  41a40c:	4053      	eors	r3, r2
  41a40e:	f8c8 3001 	str.w	r3, [r8, #1]

0041a412 <.LVL198>:
  41a412:	686b      	ldr	r3, [r5, #4]
  41a414:	6862      	ldr	r2, [r4, #4]
  41a416:	4053      	eors	r3, r2
  41a418:	606b      	str	r3, [r5, #4]

0041a41a <.LBE261>:
            XMEMCPY(des->reg, des->tmp, DES_BLOCK_SIZE);
  41a41a:	6832      	ldr	r2, [r6, #0]
  41a41c:	6873      	ldr	r3, [r6, #4]
  41a41e:	6022      	str	r2, [r4, #0]
  41a420:	6063      	str	r3, [r4, #4]
            out += DES_BLOCK_SIZE;
  41a422:	3508      	adds	r5, #8
            in  += DES_BLOCK_SIZE;
  41a424:	3708      	adds	r7, #8
        while (blocks--) {
  41a426:	f109 39ff 	add.w	r9, r9, #4294967295
  41a42a:	f108 0808 	add.w	r8, r8, #8
  41a42e:	f1b9 3fff 	cmp.w	r9, #4294967295
  41a432:	d01a      	beq.n	41a46a <.LBE265>
            XMEMCPY(des->tmp, in, DES_BLOCK_SIZE);
  41a434:	683a      	ldr	r2, [r7, #0]
  41a436:	687b      	ldr	r3, [r7, #4]
  41a438:	6032      	str	r2, [r6, #0]
  41a43a:	6073      	str	r3, [r6, #4]
            DesProcessBlock(des, (byte*)des->tmp, out);
  41a43c:	462a      	mov	r2, r5
  41a43e:	4631      	mov	r1, r6
  41a440:	4620      	mov	r0, r4
  41a442:	f7fc fdaf 	bl	416fa4 <.LFE169>

0041a446 <.LBB267>:
    if (((wolfssl_word)buf | (wolfssl_word)mask | count) % WOLFSSL_WORD_SIZE == 0)
  41a446:	ea45 0304 	orr.w	r3, r5, r4
  41a44a:	f013 0f03 	tst.w	r3, #3
  41a44e:	d0da      	beq.n	41a406 <.LBB261>
  41a450:	1e61      	subs	r1, r4, #1
  41a452:	f105 0e07 	add.w	lr, r5, #7
  41a456:	4643      	mov	r3, r8

0041a458 <.LBB265>:
        for (i = 0; i < count; i++) b[i] ^= m[i];
  41a458:	785a      	ldrb	r2, [r3, #1]
  41a45a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  41a45e:	4042      	eors	r2, r0
  41a460:	f803 2f01 	strb.w	r2, [r3, #1]!
  41a464:	4573      	cmp	r3, lr
  41a466:	d1f7      	bne.n	41a458 <.LBB265>
  41a468:	e7d7      	b.n	41a41a <.LBE261>

0041a46a <.LBE265>:
    }
  41a46a:	2000      	movs	r0, #0
  41a46c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

Disassembly of section .text.wc_Md5Update%177:

0041a470 <wc_Md5Update>:
    if (md5 == NULL || (data == NULL && len > 0)) {
  41a470:	b3a0      	cbz	r0, 41a4dc <.LCFI4>
{
  41a472:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

0041a476 <.LCFI3>:
  41a476:	460f      	mov	r7, r1
  41a478:	4615      	mov	r5, r2
  41a47a:	4606      	mov	r6, r0
    if (md5 == NULL || (data == NULL && len > 0)) {
  41a47c:	b901      	cbnz	r1, 41a480 <.LCFI3+0xa>
  41a47e:	bb82      	cbnz	r2, 41a4e2 <.LCFI5>
    local = (byte*)md5->buffer;
  41a480:	f106 080c 	add.w	r8, r6, #12

0041a484 <.LVL331>:
    if (md5->buffLen >= MD5_BLOCK_SIZE)
  41a484:	6833      	ldr	r3, [r6, #0]
  41a486:	2b3f      	cmp	r3, #63	; 0x3f
  41a488:	d82f      	bhi.n	41a4ea <.LVL346>
    while (len) {
  41a48a:	b395      	cbz	r5, 41a4f2 <.LVL348>

0041a48c <.LBB141>:
            md5->buffLen = 0;
  41a48c:	f04f 0900 	mov.w	r9, #0
  41a490:	e002      	b.n	41a498 <.LBB146>

0041a492 <.LVL332>:
  41a492:	f8c6 9000 	str.w	r9, [r6]

0041a496 <.LBE141>:
    while (len) {
  41a496:	b1f5      	cbz	r5, 41a4d6 <.LBE144>

0041a498 <.LBB146>:
        word32 add = min(len, MD5_BLOCK_SIZE - md5->buffLen);
  41a498:	6830      	ldr	r0, [r6, #0]

0041a49a <.LVL333>:
  41a49a:	f1c0 0440 	rsb	r4, r0, #64	; 0x40

0041a49e <.LBB142>:
        return a > b ? b : a;
  41a49e:	42ac      	cmp	r4, r5
  41a4a0:	bf28      	it	cs
  41a4a2:	462c      	movcs	r4, r5

0041a4a4 <.LBE142>:
        XMEMCPY(&local[md5->buffLen], data, add);
  41a4a4:	4622      	mov	r2, r4
  41a4a6:	4639      	mov	r1, r7
  41a4a8:	4440      	add	r0, r8
  41a4aa:	f7fb ffb7 	bl	41641c <memcpy>

0041a4ae <.LVL336>:
        md5->buffLen += add;
  41a4ae:	6833      	ldr	r3, [r6, #0]
  41a4b0:	4423      	add	r3, r4
  41a4b2:	6033      	str	r3, [r6, #0]
        data         += add;
  41a4b4:	4427      	add	r7, r4
        len          -= add;
  41a4b6:	1b2d      	subs	r5, r5, r4
        if (md5->buffLen == MD5_BLOCK_SIZE) {
  41a4b8:	2b40      	cmp	r3, #64	; 0x40
  41a4ba:	d1ec      	bne.n	41a496 <.LBE141>
            XTRANSFORM(md5, local);
  41a4bc:	4630      	mov	r0, r6
  41a4be:	f7f2 fe99 	bl	40d1f4 <Transform>

0041a4c2 <.LBB144>:
    word32 tmp = md5->loLen;
  41a4c2:	6872      	ldr	r2, [r6, #4]

0041a4c4 <.LVL340>:
    if ((md5->loLen += len) < tmp) {
  41a4c4:	f102 0340 	add.w	r3, r2, #64	; 0x40
  41a4c8:	6073      	str	r3, [r6, #4]
  41a4ca:	429a      	cmp	r2, r3
  41a4cc:	d9e1      	bls.n	41a492 <.LVL332>
        md5->hiLen++;                       /* carry low to high */
  41a4ce:	68b3      	ldr	r3, [r6, #8]
  41a4d0:	3301      	adds	r3, #1
  41a4d2:	60b3      	str	r3, [r6, #8]
  41a4d4:	e7dd      	b.n	41a492 <.LVL332>

0041a4d6 <.LBE144>:
    return ret;
  41a4d6:	2000      	movs	r0, #0
  41a4d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0041a4dc <.LCFI4>:
        return BAD_FUNC_ARG;
  41a4dc:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041a4e0 <.LVL343>:
  41a4e0:	4770      	bx	lr

0041a4e2 <.LCFI5>:
  41a4e2:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041a4e6 <.LVL345>:
  41a4e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0041a4ea <.LVL346>:
        return BUFFER_E;
  41a4ea:	f06f 0083 	mvn.w	r0, #131	; 0x83

0041a4ee <.LVL347>:
  41a4ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0041a4f2 <.LVL348>:
    return ret;
  41a4f2:	2000      	movs	r0, #0

0041a4f4 <.LVL349>:
}
  41a4f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

Disassembly of section .text.wc_InitRsaKey_ex%178:

0041a4f8 <wc_InitRsaKey_ex>:
{
  41a4f8:	b570      	push	{r4, r5, r6, lr}

0041a4fa <.LCFI10>:
  41a4fa:	b082      	sub	sp, #8

0041a4fc <.LCFI11>:
    if (key == NULL) {
  41a4fc:	2800      	cmp	r0, #0
  41a4fe:	d03c      	beq.n	41a57a <.LVL62>
  41a500:	4604      	mov	r4, r0
    key->type = RSA_TYPE_UNKNOWN;
  41a502:	f04f 32ff 	mov.w	r2, #4294967295

0041a506 <.LVL52>:
  41a506:	f241 1348 	movw	r3, #4424	; 0x1148
  41a50a:	50c2      	str	r2, [r0, r3]
    key->state = RSA_STATE_NONE;
  41a50c:	2200      	movs	r2, #0
  41a50e:	f241 134c 	movw	r3, #4428	; 0x114c
  41a512:	50c2      	str	r2, [r0, r3]
    key->heap = heap;
  41a514:	f500 538a 	add.w	r3, r0, #4416	; 0x1140
  41a518:	6019      	str	r1, [r3, #0]
    key->data = NULL;
  41a51a:	f241 1344 	movw	r3, #4420	; 0x1144
  41a51e:	50c2      	str	r2, [r0, r3]
    key->dataLen = 0;
  41a520:	f241 1350 	movw	r3, #4432	; 0x1150
  41a524:	50c2      	str	r2, [r0, r3]
    key->dataIsAlloc = 0;
  41a526:	f241 1354 	movw	r3, #4436	; 0x1154
  41a52a:	54c2      	strb	r2, [r0, r3]
    ret = mp_init_multi(&key->n, &key->e, NULL, NULL, NULL, NULL);
  41a52c:	f500 760a 	add.w	r6, r0, #552	; 0x228
  41a530:	9201      	str	r2, [sp, #4]
  41a532:	9200      	str	r2, [sp, #0]
  41a534:	4613      	mov	r3, r2
  41a536:	4631      	mov	r1, r6

0041a538 <.LVL53>:
  41a538:	f002 fa7c 	bl	41ca34 <mp_init_multi>

0041a53c <.LVL54>:
    if (ret != MP_OKAY)
  41a53c:	4605      	mov	r5, r0
  41a53e:	b110      	cbz	r0, 41a546 <.LCFI13>

0041a540 <.LVL55>:
}
  41a540:	4628      	mov	r0, r5
  41a542:	b002      	add	sp, #8

0041a544 <.LCFI12>:
  41a544:	bd70      	pop	{r4, r5, r6, pc}

0041a546 <.LCFI13>:
    ret = mp_init_multi(&key->d, &key->p, &key->q, &key->dP, &key->dQ, &key->u);
  41a546:	f604 7318 	addw	r3, r4, #3864	; 0xf18
  41a54a:	9301      	str	r3, [sp, #4]
  41a54c:	f504 634f 	add.w	r3, r4, #3312	; 0xcf0
  41a550:	9300      	str	r3, [sp, #0]
  41a552:	f604 23c8 	addw	r3, r4, #2760	; 0xac8
  41a556:	f504 620a 	add.w	r2, r4, #2208	; 0x8a0
  41a55a:	f504 61cf 	add.w	r1, r4, #1656	; 0x678
  41a55e:	f504 608a 	add.w	r0, r4, #1104	; 0x450

0041a562 <.LVL57>:
  41a562:	f002 fa67 	bl	41ca34 <mp_init_multi>

0041a566 <.LVL58>:
    if (ret != MP_OKAY) {
  41a566:	4605      	mov	r5, r0
  41a568:	2800      	cmp	r0, #0
  41a56a:	d0e9      	beq.n	41a540 <.LVL55>
        mp_clear(&key->n);
  41a56c:	4620      	mov	r0, r4

0041a56e <.LVL59>:
  41a56e:	f003 fb36 	bl	41dbde <.LFE179>

0041a572 <.LVL60>:
        mp_clear(&key->e);
  41a572:	4630      	mov	r0, r6
  41a574:	f003 fb33 	bl	41dbde <.LFE179>

0041a578 <.LVL61>:
        return ret;
  41a578:	e7e2      	b.n	41a540 <.LVL55>

0041a57a <.LVL62>:
        return BAD_FUNC_ARG;
  41a57a:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  41a57e:	e7df      	b.n	41a540 <.LVL55>

Disassembly of section .text.inflateInit2_%179:

0041a580 <inflateInit2_>:
{
  41a580:	b570      	push	{r4, r5, r6, lr}

0041a582 <.LCFI9>:
    if (version == Z_NULL || version[0] != ZLIB_VERSION[0] ||
  41a582:	2a00      	cmp	r2, #0
  41a584:	d030      	beq.n	41a5e8 <.LVL79>
  41a586:	7812      	ldrb	r2, [r2, #0]

0041a588 <.LVL66>:
  41a588:	2a31      	cmp	r2, #49	; 0x31
  41a58a:	d130      	bne.n	41a5ee <.LVL80>
  41a58c:	2b38      	cmp	r3, #56	; 0x38
  41a58e:	d12e      	bne.n	41a5ee <.LVL80>
    if (strm == Z_NULL) return Z_STREAM_ERROR;
  41a590:	2800      	cmp	r0, #0
  41a592:	d02f      	beq.n	41a5f4 <.LVL80+0x6>
    strm->msg = Z_NULL;                 /* in case we return an error */
  41a594:	2300      	movs	r3, #0

0041a596 <.LVL67>:
  41a596:	6183      	str	r3, [r0, #24]
    if (strm->zalloc == (alloc_func)0) {
  41a598:	6a03      	ldr	r3, [r0, #32]
  41a59a:	b1b3      	cbz	r3, 41a5ca <.LVL75>
    if (strm->zfree == (free_func)0)
  41a59c:	6a43      	ldr	r3, [r0, #36]	; 0x24
  41a59e:	b1cb      	cbz	r3, 41a5d4 <.LVL75+0xa>
  41a5a0:	460d      	mov	r5, r1
  41a5a2:	4604      	mov	r4, r0
    state = (struct inflate_state FAR *)
  41a5a4:	6a03      	ldr	r3, [r0, #32]
  41a5a6:	f641 32cc 	movw	r2, #7116	; 0x1bcc
  41a5aa:	2101      	movs	r1, #1

0041a5ac <.LVL68>:
  41a5ac:	6a80      	ldr	r0, [r0, #40]	; 0x28

0041a5ae <.LVL69>:
  41a5ae:	4798      	blx	r3

0041a5b0 <.LVL70>:
    if (state == Z_NULL) return Z_MEM_ERROR;
  41a5b0:	4606      	mov	r6, r0
  41a5b2:	b310      	cbz	r0, 41a5fa <.LVL81>
    strm->state = (struct internal_state FAR *)state;
  41a5b4:	61e0      	str	r0, [r4, #28]
    state->window = Z_NULL;
  41a5b6:	2300      	movs	r3, #0
  41a5b8:	6343      	str	r3, [r0, #52]	; 0x34
    ret = inflateReset2(strm, windowBits);
  41a5ba:	4629      	mov	r1, r5
  41a5bc:	4620      	mov	r0, r4

0041a5be <.LVL71>:
  41a5be:	f001 fc32 	bl	41be26 <.LFE180>

0041a5c2 <.LVL72>:
    if (ret != Z_OK) {
  41a5c2:	4605      	mov	r5, r0

0041a5c4 <.LVL73>:
  41a5c4:	b948      	cbnz	r0, 41a5da <.LVL76>

0041a5c6 <.LVL74>:
}
  41a5c6:	4628      	mov	r0, r5
  41a5c8:	bd70      	pop	{r4, r5, r6, pc}

0041a5ca <.LVL75>:
        strm->zalloc = zcalloc;
  41a5ca:	4b0d      	ldr	r3, [pc, #52]	; (41a600 <.LVL82+0x2>)
  41a5cc:	6203      	str	r3, [r0, #32]
        strm->opaque = (voidpf)0;
  41a5ce:	2300      	movs	r3, #0
  41a5d0:	6283      	str	r3, [r0, #40]	; 0x28
  41a5d2:	e7e3      	b.n	41a59c <.LVL67+0x6>
        strm->zfree = zcfree;
  41a5d4:	4b0b      	ldr	r3, [pc, #44]	; (41a604 <.LVL82+0x6>)
  41a5d6:	6243      	str	r3, [r0, #36]	; 0x24
  41a5d8:	e7e2      	b.n	41a5a0 <.LVL67+0xa>

0041a5da <.LVL76>:
        ZFREE(strm, state);
  41a5da:	6a63      	ldr	r3, [r4, #36]	; 0x24
  41a5dc:	4631      	mov	r1, r6
  41a5de:	6aa0      	ldr	r0, [r4, #40]	; 0x28

0041a5e0 <.LVL77>:
  41a5e0:	4798      	blx	r3

0041a5e2 <.LVL78>:
        strm->state = Z_NULL;
  41a5e2:	2300      	movs	r3, #0
  41a5e4:	61e3      	str	r3, [r4, #28]
  41a5e6:	e7ee      	b.n	41a5c6 <.LVL74>

0041a5e8 <.LVL79>:
        return Z_VERSION_ERROR;
  41a5e8:	f06f 0505 	mvn.w	r5, #5
  41a5ec:	e7eb      	b.n	41a5c6 <.LVL74>

0041a5ee <.LVL80>:
  41a5ee:	f06f 0505 	mvn.w	r5, #5
  41a5f2:	e7e8      	b.n	41a5c6 <.LVL74>
    if (strm == Z_NULL) return Z_STREAM_ERROR;
  41a5f4:	f06f 0501 	mvn.w	r5, #1
  41a5f8:	e7e5      	b.n	41a5c6 <.LVL74>

0041a5fa <.LVL81>:
    if (state == Z_NULL) return Z_MEM_ERROR;
  41a5fa:	f06f 0503 	mvn.w	r5, #3

0041a5fe <.LVL82>:
  41a5fe:	e7e2      	b.n	41a5c6 <.LVL74>
  41a600:	0041dbeb 	.word	0x0041dbeb
  41a604:	0041dcfb 	.word	0x0041dcfb

Disassembly of section .text.fp_div_2%180:

0041a608 <fp_div_2>:
{
  41a608:	b5f0      	push	{r4, r5, r6, r7, lr}

0041a60a <.LCFI9>:
  oldused = b->used;
  41a60a:	680e      	ldr	r6, [r1, #0]
  b->used = a->used;
  41a60c:	4686      	mov	lr, r0
  41a60e:	f85e 2b08 	ldr.w	r2, [lr], #8
  41a612:	460f      	mov	r7, r1
  41a614:	f847 2b08 	str.w	r2, [r7], #8

0041a618 <.LBB5>:
    tmpa = a->dp + b->used - 1;
  41a618:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
  41a61c:	4415      	add	r5, r2
  41a61e:	00ad      	lsls	r5, r5, #2
  41a620:	44ae      	add	lr, r5
    tmpb = b->dp + b->used - 1;
  41a622:	443d      	add	r5, r7

0041a624 <.LVL76>:
    for (x = b->used - 1; x >= 0; x--) {
  41a624:	3a01      	subs	r2, #1

0041a626 <.LVL77>:
  41a626:	d40d      	bmi.n	41a644 <.LVL84>
  41a628:	2300      	movs	r3, #0

0041a62a <.LVL78>:
      rr = *tmpa & 1;
  41a62a:	f85e 4904 	ldr.w	r4, [lr], #-4

0041a62e <.LVL79>:
      *tmpb-- = (*tmpa-- >> 1) | (r << (DIGIT_BIT - 1));
  41a62e:	07db      	lsls	r3, r3, #31

0041a630 <.LVL80>:
  41a630:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
  41a634:	f845 3904 	str.w	r3, [r5], #-4

0041a638 <.LVL81>:
    for (x = b->used - 1; x >= 0; x--) {
  41a638:	3a01      	subs	r2, #1

0041a63a <.LVL82>:
      rr = *tmpa & 1;
  41a63a:	f004 0301 	and.w	r3, r4, #1

0041a63e <.LVL83>:
    for (x = b->used - 1; x >= 0; x--) {
  41a63e:	f1b2 3fff 	cmp.w	r2, #4294967295
  41a642:	d1f2      	bne.n	41a62a <.LVL78>

0041a644 <.LVL84>:
    tmpb = b->dp + b->used;
  41a644:	680b      	ldr	r3, [r1, #0]
  41a646:	eb07 0283 	add.w	r2, r7, r3, lsl #2

0041a64a <.LVL85>:
    for (x = b->used; x < oldused; x++) {
  41a64a:	429e      	cmp	r6, r3
  41a64c:	dd05      	ble.n	41a65a <.LBE5>
      *tmpb++ = 0;
  41a64e:	2400      	movs	r4, #0
  41a650:	f842 4b04 	str.w	r4, [r2], #4

0041a654 <.LVL86>:
    for (x = b->used; x < oldused; x++) {
  41a654:	3301      	adds	r3, #1

0041a656 <.LVL87>:
  41a656:	429e      	cmp	r6, r3
  41a658:	d1fa      	bne.n	41a650 <.LVL85+0x6>

0041a65a <.LBE5>:
  b->sign = a->sign;
  41a65a:	6845      	ldr	r5, [r0, #4]
  41a65c:	604d      	str	r5, [r1, #4]
  fp_clamp (b);
  41a65e:	680a      	ldr	r2, [r1, #0]

0041a660 <.LVL88>:
  41a660:	b192      	cbz	r2, 41a688 <.LVL90+0x22>
  41a662:	1e53      	subs	r3, r2, #1

0041a664 <.LVL89>:
  41a664:	1c50      	adds	r0, r2, #1

0041a666 <.LVL90>:
  41a666:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
  41a66a:	b970      	cbnz	r0, 41a68a <.LVL90+0x24>
  41a66c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  41a670:	3204      	adds	r2, #4
  41a672:	e000      	b.n	41a676 <.LVL90+0x10>
  41a674:	4623      	mov	r3, r4
  41a676:	b133      	cbz	r3, 41a686 <.LVL90+0x20>
  41a678:	1e5c      	subs	r4, r3, #1
  41a67a:	f852 0d04 	ldr.w	r0, [r2, #-4]!
  41a67e:	2800      	cmp	r0, #0
  41a680:	d0f8      	beq.n	41a674 <.LVL90+0xe>
  41a682:	600b      	str	r3, [r1, #0]
  41a684:	e001      	b.n	41a68a <.LVL90+0x24>
  41a686:	600b      	str	r3, [r1, #0]
  41a688:	2500      	movs	r5, #0
  41a68a:	604d      	str	r5, [r1, #4]
}
  41a68c:	bdf0      	pop	{r4, r5, r6, r7, pc}

Disassembly of section .text.fp_lshd%181:

0041a68e <fp_lshd>:
{
  41a68e:	b4f0      	push	{r4, r5, r6, r7}

0041a690 <.LCFI26>:
    y = MIN(a->used + x - 1, (int)(FP_SIZE-1));
  41a690:	6803      	ldr	r3, [r0, #0]
  41a692:	440b      	add	r3, r1
  41a694:	1e5e      	subs	r6, r3, #1
  41a696:	2e87      	cmp	r6, #135	; 0x87
  41a698:	bfa8      	it	ge
  41a69a:	2687      	movge	r6, #135	; 0x87

0041a69c <.LVL238>:
    a->used = y + 1;
  41a69c:	1c77      	adds	r7, r6, #1
  41a69e:	6007      	str	r7, [r0, #0]
    for (; y >= x; y--) {
  41a6a0:	42b1      	cmp	r1, r6
  41a6a2:	dc25      	bgt.n	41a6f0 <.LVL244>
  41a6a4:	f1c1 0202 	rsb	r2, r1, #2
  41a6a8:	4432      	add	r2, r6
  41a6aa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  41a6ae:	3204      	adds	r2, #4
  41a6b0:	eb00 0486 	add.w	r4, r0, r6, lsl #2
  41a6b4:	340c      	adds	r4, #12
  41a6b6:	4633      	mov	r3, r6

0041a6b8 <.LVL239>:
        a->dp[y] = a->dp[y-x];
  41a6b8:	f852 5d04 	ldr.w	r5, [r2, #-4]!
  41a6bc:	f844 5d04 	str.w	r5, [r4, #-4]!
    for (; y >= x; y--) {
  41a6c0:	3b01      	subs	r3, #1
  41a6c2:	4299      	cmp	r1, r3
  41a6c4:	ddf8      	ble.n	41a6b8 <.LVL239>
    for (; y >= 0; y--) {
  41a6c6:	2b00      	cmp	r3, #0
  41a6c8:	db09      	blt.n	41a6de <.LVL241+0xc>
  41a6ca:	eb00 0283 	add.w	r2, r0, r3, lsl #2
  41a6ce:	320c      	adds	r2, #12
        a->dp[y] = 0;
  41a6d0:	2100      	movs	r1, #0

0041a6d2 <.LVL241>:
  41a6d2:	f842 1d04 	str.w	r1, [r2, #-4]!
    for (; y >= 0; y--) {
  41a6d6:	3b01      	subs	r3, #1
  41a6d8:	f1b3 3fff 	cmp.w	r3, #4294967295
  41a6dc:	d1f9      	bne.n	41a6d2 <.LVL241>
    fp_clamp(a);
  41a6de:	b1bf      	cbz	r7, 41a710 <.LCFI28+0x4>
  41a6e0:	1cb3      	adds	r3, r6, #2

0041a6e2 <.LVL243>:
  41a6e2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  41a6e6:	b96b      	cbnz	r3, 41a704 <.LVL245+0x10>
  41a6e8:	eb00 0386 	add.w	r3, r0, r6, lsl #2
  41a6ec:	3308      	adds	r3, #8
  41a6ee:	e002      	b.n	41a6f6 <.LVL245+0x2>

0041a6f0 <.LVL244>:
    y = MIN(a->used + x - 1, (int)(FP_SIZE-1));
  41a6f0:	4633      	mov	r3, r6
  41a6f2:	e7e8      	b.n	41a6c6 <.LVL239+0xe>

0041a6f4 <.LVL245>:
    fp_clamp(a);
  41a6f4:	460e      	mov	r6, r1
  41a6f6:	b14e      	cbz	r6, 41a70c <.LCFI28>
  41a6f8:	1e71      	subs	r1, r6, #1
  41a6fa:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  41a6fe:	2a00      	cmp	r2, #0
  41a700:	d0f8      	beq.n	41a6f4 <.LVL245>
  41a702:	6006      	str	r6, [r0, #0]
  41a704:	6843      	ldr	r3, [r0, #4]
  41a706:	6043      	str	r3, [r0, #4]
}
  41a708:	bcf0      	pop	{r4, r5, r6, r7}

0041a70a <.LCFI27>:
  41a70a:	4770      	bx	lr

0041a70c <.LCFI28>:
  41a70c:	2300      	movs	r3, #0
  41a70e:	6003      	str	r3, [r0, #0]
    fp_clamp(a);
  41a710:	2300      	movs	r3, #0
  41a712:	e7f8      	b.n	41a706 <.LVL245+0x12>

Disassembly of section .text.wc_HmacUpdate%182:

0041a714 <wc_HmacUpdate>:
    if (hmac == NULL) {
  41a714:	2800      	cmp	r0, #0
  41a716:	d039      	beq.n	41a78c <.LCFI3>
{
  41a718:	b570      	push	{r4, r5, r6, lr}

0041a71a <.LCFI2>:
  41a71a:	4604      	mov	r4, r0
  41a71c:	4616      	mov	r6, r2
  41a71e:	460d      	mov	r5, r1
    if (!hmac->innerHashKeyed) {
  41a720:	f890 3245 	ldrb.w	r3, [r0, #581]	; 0x245
  41a724:	b143      	cbz	r3, 41a738 <.LVL124>

0041a726 <.LVL123>:
    switch (hmac->macType) {
  41a726:	f894 3244 	ldrb.w	r3, [r4, #580]	; 0x244
  41a72a:	2b05      	cmp	r3, #5
  41a72c:	d832      	bhi.n	41a794 <.LCFI4>
  41a72e:	e8df f003 	tbb	[pc, r3]
  41a732:	1109      	.short	0x1109
  41a734:	1f263118 	.word	0x1f263118

0041a738 <.LVL124>:
        ret = HmacKeyInnerHash(hmac);
  41a738:	f001 fb46 	bl	41bdc8 <HmacKeyInnerHash>

0041a73c <.LVL125>:
        if (ret != 0)
  41a73c:	4603      	mov	r3, r0
  41a73e:	2800      	cmp	r0, #0
  41a740:	d0f1      	beq.n	41a726 <.LVL123>
  41a742:	e005      	b.n	41a750 <.LVL128>

0041a744 <.LVL126>:
            ret = wc_Md5Update(&hmac->hash.md5, msg, length);
  41a744:	4632      	mov	r2, r6
  41a746:	4629      	mov	r1, r5
  41a748:	4620      	mov	r0, r4
  41a74a:	f7ff fe91 	bl	41a470 <.LFE23>

0041a74e <.LVL127>:
  41a74e:	4603      	mov	r3, r0

0041a750 <.LVL128>:
}
  41a750:	4618      	mov	r0, r3
  41a752:	bd70      	pop	{r4, r5, r6, pc}

0041a754 <.LVL129>:
            ret = wc_ShaUpdate(&hmac->hash.sha, msg, length);
  41a754:	4632      	mov	r2, r6
  41a756:	4629      	mov	r1, r5
  41a758:	4620      	mov	r0, r4
  41a75a:	f000 f8a0 	bl	41a89e <.LFE58>

0041a75e <.LVL130>:
  41a75e:	4603      	mov	r3, r0

0041a760 <.LVL131>:
            break;
  41a760:	e7f6      	b.n	41a750 <.LVL128>

0041a762 <.LVL132>:
            ret = wc_Sha256Update(&hmac->hash.sha256, msg, length);
  41a762:	4632      	mov	r2, r6
  41a764:	4629      	mov	r1, r5
  41a766:	4620      	mov	r0, r4
  41a768:	f000 f8da 	bl	41a920 <.LFE165>

0041a76c <.LVL133>:
  41a76c:	4603      	mov	r3, r0

0041a76e <.LVL134>:
            break;
  41a76e:	e7ef      	b.n	41a750 <.LVL128>

0041a770 <.LVL135>:
            ret = wc_Sha384Update(&hmac->hash.sha384, msg, length);
  41a770:	4632      	mov	r2, r6
  41a772:	4629      	mov	r1, r5
  41a774:	4620      	mov	r0, r4
  41a776:	f7fd f90e 	bl	417996 <.LBE719>

0041a77a <.LVL136>:
  41a77a:	4603      	mov	r3, r0

0041a77c <.LVL137>:
            break;
  41a77c:	e7e8      	b.n	41a750 <.LVL128>

0041a77e <.LVL138>:
            ret = wc_Sha512Update(&hmac->hash.sha512, msg, length);
  41a77e:	4632      	mov	r2, r6
  41a780:	4629      	mov	r1, r5
  41a782:	4620      	mov	r0, r4
  41a784:	f7fd f892 	bl	4178ac <.LFE178>

0041a788 <.LVL139>:
  41a788:	4603      	mov	r3, r0

0041a78a <.LVL140>:
            break;
  41a78a:	e7e1      	b.n	41a750 <.LVL128>

0041a78c <.LCFI3>:
        return BAD_FUNC_ARG;
  41a78c:	f06f 03ac 	mvn.w	r3, #172	; 0xac
}
  41a790:	4618      	mov	r0, r3

0041a792 <.LVL142>:
  41a792:	4770      	bx	lr

0041a794 <.LCFI4>:
    switch (hmac->macType) {
  41a794:	2300      	movs	r3, #0
  41a796:	e7db      	b.n	41a750 <.LVL128>

Disassembly of section .text.SYS_TIME_HwTimerCompareUpdate%183:

0041a798 <SYS_TIME_HwTimerCompareUpdate>:
{
  41a798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041a79a <.LCFI0>:
    SYS_TIME_TIMER_OBJ* tmrActive = counterObj->tmrActive;
  41a79a:	4b1f      	ldr	r3, [pc, #124]	; (41a818 <.LVL29+0x8>)
  41a79c:	6b19      	ldr	r1, [r3, #48]	; 0x30

0041a79e <.LVL19>:
    counterObj->hwTimerPreviousValue = counterObj->hwTimerCurrentValue;
  41a79e:	695a      	ldr	r2, [r3, #20]
  41a7a0:	611a      	str	r2, [r3, #16]
    if (tmrActive != NULL)
  41a7a2:	2900      	cmp	r1, #0
  41a7a4:	d02f      	beq.n	41a806 <.LVL27>
        if (tmrActive->relativeTimePending > SYS_TIME_HW_COUNTER_HALF_PERIOD)
  41a7a6:	688c      	ldr	r4, [r1, #8]
  41a7a8:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
            nextHwCounterValue = counterObj->hwTimerCurrentValue + SYS_TIME_HW_COUNTER_HALF_PERIOD;
  41a7ac:	bf28      	it	cs
  41a7ae:	f647 74ff 	movwcs	r4, #32767	; 0x7fff
            nextHwCounterValue = counterObj->hwTimerCurrentValue + tmrActive->relativeTimePending;
  41a7b2:	4414      	add	r4, r2
  41a7b4:	2500      	movs	r5, #0

0041a7b6 <.LVL20>:
    currHwCounterValue = counterObj->timePlib->timerCounterGet();
  41a7b6:	4e18      	ldr	r6, [pc, #96]	; (41a818 <.LVL29+0x8>)
  41a7b8:	6873      	ldr	r3, [r6, #4]
  41a7ba:	699b      	ldr	r3, [r3, #24]
  41a7bc:	4798      	blx	r3

0041a7be <.LVL21>:
  41a7be:	2100      	movs	r1, #0

0041a7c0 <.LVL22>:
    if (currHwCounterValue < counterObj->hwTimerPreviousValue)
  41a7c0:	6932      	ldr	r2, [r6, #16]
  41a7c2:	2300      	movs	r3, #0
  41a7c4:	4299      	cmp	r1, r3
  41a7c6:	bf08      	it	eq
  41a7c8:	4290      	cmpeq	r0, r2
  41a7ca:	d204      	bcs.n	41a7d6 <.LVL24>
        currHwCounterValue = SYS_TIME_HW_COUNTER_PERIOD + currHwCounterValue;
  41a7cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
  41a7d0:	2300      	movs	r3, #0
  41a7d2:	1880      	adds	r0, r0, r2

0041a7d4 <.LVL23>:
  41a7d4:	4159      	adcs	r1, r3

0041a7d6 <.LVL24>:
    if (nextHwCounterValue  < (currHwCounterValue + counterObj->hwTimerCompareMargin))
  41a7d6:	4b10      	ldr	r3, [pc, #64]	; (41a818 <.LVL29+0x8>)
  41a7d8:	6a1b      	ldr	r3, [r3, #32]
  41a7da:	18c6      	adds	r6, r0, r3
  41a7dc:	f141 0700 	adc.w	r7, r1, #0
  41a7e0:	42bd      	cmp	r5, r7
  41a7e2:	bf08      	it	eq
  41a7e4:	42b4      	cmpeq	r4, r6
  41a7e6:	d213      	bcs.n	41a810 <.LVL29>
        counterObj->hwTimerCompareValue = currHwCounterValue + counterObj->hwTimerCompareMargin;
  41a7e8:	4418      	add	r0, r3

0041a7ea <.LVL25>:
  41a7ea:	4b0b      	ldr	r3, [pc, #44]	; (41a818 <.LVL29+0x8>)
  41a7ec:	61d8      	str	r0, [r3, #28]
    if ((counterObj->hwTimerCompareValue & SYS_TIME_HW_COUNTER_PERIOD) == 0)
  41a7ee:	4b0a      	ldr	r3, [pc, #40]	; (41a818 <.LVL29+0x8>)
  41a7f0:	8b9b      	ldrh	r3, [r3, #28]
  41a7f2:	b913      	cbnz	r3, 41a7fa <.LVL25+0x10>
        counterObj->hwTimerCompareValue = 1;
  41a7f4:	2201      	movs	r2, #1
  41a7f6:	4b08      	ldr	r3, [pc, #32]	; (41a818 <.LVL29+0x8>)
  41a7f8:	61da      	str	r2, [r3, #28]
    counterObj->timePlib->timerCompareSet(counterObj->hwTimerCompareValue);
  41a7fa:	4b07      	ldr	r3, [pc, #28]	; (41a818 <.LVL29+0x8>)
  41a7fc:	685a      	ldr	r2, [r3, #4]
  41a7fe:	68d2      	ldr	r2, [r2, #12]
  41a800:	69d8      	ldr	r0, [r3, #28]
  41a802:	4790      	blx	r2
  41a804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041a806 <.LVL27>:
        nextHwCounterValue = counterObj->hwTimerCurrentValue + SYS_TIME_HW_COUNTER_HALF_PERIOD;
  41a806:	f647 74ff 	movw	r4, #32767	; 0x7fff
  41a80a:	4414      	add	r4, r2
  41a80c:	2500      	movs	r5, #0

0041a80e <.LVL28>:
  41a80e:	e7d2      	b.n	41a7b6 <.LVL20>

0041a810 <.LVL29>:
        counterObj->hwTimerCompareValue = nextHwCounterValue;
  41a810:	4b01      	ldr	r3, [pc, #4]	; (41a818 <.LVL29+0x8>)
  41a812:	61dc      	str	r4, [r3, #28]
  41a814:	e7eb      	b.n	41a7ee <.LVL25+0x4>
  41a816:	bf00      	nop
  41a818:	2040d624 	.word	0x2040d624

Disassembly of section .text.fp_rshd%184:

0041a81c <fp_rshd>:
{
  41a81c:	b570      	push	{r4, r5, r6, lr}

0041a81e <.LCFI37>:
  if (x >= a->used) {
  41a81e:	6806      	ldr	r6, [r0, #0]
  41a820:	428e      	cmp	r6, r1
  41a822:	dd25      	ble.n	41a870 <.LVL322>

0041a824 <.LVL313>:
   for (y = 0; y < a->used - x; y++) {
  41a824:	1a75      	subs	r5, r6, r1
  41a826:	2d00      	cmp	r5, #0
  41a828:	dd25      	ble.n	41a876 <.LVL324>
  41a82a:	eb00 0281 	add.w	r2, r0, r1, lsl #2
  41a82e:	3204      	adds	r2, #4
  41a830:	1d01      	adds	r1, r0, #4

0041a832 <.LVL314>:
  41a832:	2300      	movs	r3, #0

0041a834 <.LVL315>:
      a->dp[y] = a->dp[y+x];
  41a834:	f852 4f04 	ldr.w	r4, [r2, #4]!
  41a838:	f841 4f04 	str.w	r4, [r1, #4]!
   for (y = 0; y < a->used - x; y++) {
  41a83c:	3301      	adds	r3, #1
  41a83e:	42ab      	cmp	r3, r5
  41a840:	d1f8      	bne.n	41a834 <.LVL315>

0041a842 <.LVL317>:
   for (; y < a->used; y++) {
  41a842:	42ae      	cmp	r6, r5
  41a844:	dd29      	ble.n	41a89a <.LVL326>
   for (y = 0; y < a->used - x; y++) {
  41a846:	462b      	mov	r3, r5

0041a848 <.LVL318>:
  41a848:	eb00 0283 	add.w	r2, r0, r3, lsl #2
  41a84c:	3204      	adds	r2, #4
      a->dp[y] = 0;
  41a84e:	2100      	movs	r1, #0

0041a850 <.LVL319>:
  41a850:	f842 1f04 	str.w	r1, [r2, #4]!
   for (; y < a->used; y++) {
  41a854:	3301      	adds	r3, #1
  41a856:	429e      	cmp	r6, r3
  41a858:	d1fa      	bne.n	41a850 <.LVL319>

0041a85a <.LVL321>:
   a->used -= x;
  41a85a:	6005      	str	r5, [r0, #0]
   fp_clamp(a);
  41a85c:	b1d5      	cbz	r5, 41a894 <.LVL325+0x16>
  41a85e:	1e6b      	subs	r3, r5, #1
  41a860:	1c6a      	adds	r2, r5, #1
  41a862:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  41a866:	b992      	cbnz	r2, 41a88e <.LVL325+0x10>
  41a868:	eb00 0285 	add.w	r2, r0, r5, lsl #2
  41a86c:	3204      	adds	r2, #4
  41a86e:	e007      	b.n	41a880 <.LVL325+0x2>

0041a870 <.LVL322>:
     fp_zero(a);
  41a870:	f003 f88a 	bl	41d988 <.LFE163>

0041a874 <.LVL323>:
     return;
  41a874:	bd70      	pop	{r4, r5, r6, pc}

0041a876 <.LVL324>:
   for (; y < a->used; y++) {
  41a876:	2e00      	cmp	r6, #0
  41a878:	ddef      	ble.n	41a85a <.LVL321>
  41a87a:	2300      	movs	r3, #0
  41a87c:	e7e4      	b.n	41a848 <.LVL318>

0041a87e <.LVL325>:
   fp_clamp(a);
  41a87e:	4623      	mov	r3, r4
  41a880:	b13b      	cbz	r3, 41a892 <.LVL325+0x14>
  41a882:	1e5c      	subs	r4, r3, #1
  41a884:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  41a888:	2900      	cmp	r1, #0
  41a88a:	d0f8      	beq.n	41a87e <.LVL325>
  41a88c:	6003      	str	r3, [r0, #0]
  41a88e:	6843      	ldr	r3, [r0, #4]
  41a890:	e001      	b.n	41a896 <.LVL325+0x18>
  41a892:	6003      	str	r3, [r0, #0]
  41a894:	2300      	movs	r3, #0
  41a896:	6043      	str	r3, [r0, #4]
  41a898:	bd70      	pop	{r4, r5, r6, pc}

0041a89a <.LVL326>:
   a->used -= x;
  41a89a:	6005      	str	r5, [r0, #0]
  41a89c:	e7df      	b.n	41a85e <.LVL321+0x4>

Disassembly of section .text.wc_ShaUpdate%185:

0041a89e <wc_ShaUpdate>:
{
  41a89e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

0041a8a2 <.LCFI4>:
  41a8a2:	4605      	mov	r5, r0
  41a8a4:	460f      	mov	r7, r1
  41a8a6:	4614      	mov	r4, r2

0041a8a8 <.LVL22>:
    left = sha->total_len & 0x3F;
  41a8a8:	e9d0 2326 	ldrd	r2, r3, [r0, #152]	; 0x98

0041a8ac <.LVL23>:
  41a8ac:	f002 063f 	and.w	r6, r2, #63	; 0x3f

0041a8b0 <.LVL24>:
    sha->total_len += len;
  41a8b0:	1912      	adds	r2, r2, r4
  41a8b2:	f143 0300 	adc.w	r3, r3, #0
  41a8b6:	e9c0 2326 	strd	r2, r3, [r0, #152]	; 0x98
    if (left && len >= fill)
  41a8ba:	b11e      	cbz	r6, 41a8c4 <.LVL26>
  41a8bc:	f1c6 0840 	rsb	r8, r6, #64	; 0x40

0041a8c0 <.LVL25>:
  41a8c0:	45a0      	cmp	r8, r4
  41a8c2:	d907      	bls.n	41a8d4 <.LVL28>

0041a8c4 <.LVL26>:
    uint32_t result = 0;
  41a8c4:	f04f 0900 	mov.w	r9, #0

0041a8c8 <.LVL27>:
    if (len >= SHA_BLOCK_SIZE)
  41a8c8:	2c3f      	cmp	r4, #63	; 0x3f
  41a8ca:	d815      	bhi.n	41a8f8 <.LVL35>
    if( len > 0 )
  41a8cc:	bb04      	cbnz	r4, 41a910 <.LVL40>
}
  41a8ce:	4648      	mov	r0, r9
  41a8d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0041a8d4 <.LVL28>:
        memcpy((void *)(sha->buffer + left), data, fill);
  41a8d4:	f100 0940 	add.w	r9, r0, #64	; 0x40
  41a8d8:	4642      	mov	r2, r8
  41a8da:	eb09 0006 	add.w	r0, r9, r6

0041a8de <.LVL29>:
  41a8de:	f7fb fd9d 	bl	41641c <memcpy>

0041a8e2 <.LVL30>:
        result = Sha1Process(sha, sha->buffer, SHA_BLOCK_SIZE);
  41a8e2:	2240      	movs	r2, #64	; 0x40
  41a8e4:	4649      	mov	r1, r9
  41a8e6:	4628      	mov	r0, r5
  41a8e8:	f7fd fefe 	bl	4186e8 <.LFE172>

0041a8ec <.LVL31>:
  41a8ec:	4681      	mov	r9, r0

0041a8ee <.LVL32>:
        data += fill;
  41a8ee:	4447      	add	r7, r8
        len -= fill;
  41a8f0:	eba4 0408 	sub.w	r4, r4, r8

0041a8f4 <.LVL34>:
        left = 0;
  41a8f4:	2600      	movs	r6, #0
  41a8f6:	e7e7      	b.n	41a8c8 <.LVL27>

0041a8f8 <.LVL35>:
        result = Sha1Process(sha, data, len & 0xFFFFFFC0);
  41a8f8:	f024 083f 	bic.w	r8, r4, #63	; 0x3f
  41a8fc:	4642      	mov	r2, r8
  41a8fe:	4639      	mov	r1, r7
  41a900:	4628      	mov	r0, r5
  41a902:	f7fd fef1 	bl	4186e8 <.LFE172>

0041a906 <.LVL36>:
  41a906:	4681      	mov	r9, r0

0041a908 <.LVL37>:
        data += (len & 0xFFFFFFC0);
  41a908:	4447      	add	r7, r8
        len &= 0x3F;
  41a90a:	f004 043f 	and.w	r4, r4, #63	; 0x3f
  41a90e:	e7dd      	b.n	41a8cc <.LVL27+0x4>

0041a910 <.LVL40>:
        memcpy((void *)(sha->buffer + left), data, len);
  41a910:	f105 0040 	add.w	r0, r5, #64	; 0x40
  41a914:	4622      	mov	r2, r4
  41a916:	4639      	mov	r1, r7
  41a918:	4430      	add	r0, r6
  41a91a:	f7fb fd7f 	bl	41641c <memcpy>

0041a91e <.LVL41>:
  41a91e:	e7d6      	b.n	41a8ce <.LVL27+0x6>

Disassembly of section .text.wc_Sha256Update%186:

0041a920 <wc_Sha256Update>:
{
  41a920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

0041a924 <.LCFI4>:
  41a924:	4605      	mov	r5, r0
  41a926:	460f      	mov	r7, r1
  41a928:	4614      	mov	r4, r2

0041a92a <.LVL22>:
    left = sha256->total_len & 0x3F;
  41a92a:	e9d0 2328 	ldrd	r2, r3, [r0, #160]	; 0xa0

0041a92e <.LVL23>:
  41a92e:	f002 063f 	and.w	r6, r2, #63	; 0x3f

0041a932 <.LVL24>:
    sha256->total_len += len;
  41a932:	1912      	adds	r2, r2, r4
  41a934:	f143 0300 	adc.w	r3, r3, #0
  41a938:	e9c0 2328 	strd	r2, r3, [r0, #160]	; 0xa0
    if (left && len >= fill)
  41a93c:	b11e      	cbz	r6, 41a946 <.LVL26>
  41a93e:	f1c6 0840 	rsb	r8, r6, #64	; 0x40

0041a942 <.LVL25>:
  41a942:	45a0      	cmp	r8, r4
  41a944:	d907      	bls.n	41a956 <.LVL28>

0041a946 <.LVL26>:
    int result = 0;
  41a946:	f04f 0900 	mov.w	r9, #0

0041a94a <.LVL27>:
    if (len >= SHA256_BLOCK_SIZE)
  41a94a:	2c3f      	cmp	r4, #63	; 0x3f
  41a94c:	d815      	bhi.n	41a97a <.LVL35>
    if (len > 0)
  41a94e:	bb04      	cbnz	r4, 41a992 <.LVL40>
}
  41a950:	4648      	mov	r0, r9
  41a952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0041a956 <.LVL28>:
        memcpy((void *)(sha256->buffer + left), data, fill);
  41a956:	f100 0940 	add.w	r9, r0, #64	; 0x40
  41a95a:	4642      	mov	r2, r8
  41a95c:	eb09 0006 	add.w	r0, r9, r6

0041a960 <.LVL29>:
  41a960:	f7fb fd5c 	bl	41641c <memcpy>

0041a964 <.LVL30>:
        result = Sha256Process(sha256, sha256->buffer, SHA256_BLOCK_SIZE);
  41a964:	2240      	movs	r2, #64	; 0x40
  41a966:	4649      	mov	r1, r9
  41a968:	4628      	mov	r0, r5
  41a96a:	f7fd f9d9 	bl	417d20 <.LBE36>

0041a96e <.LVL31>:
  41a96e:	4681      	mov	r9, r0

0041a970 <.LVL32>:
        data += fill;
  41a970:	4447      	add	r7, r8
        len -= fill;
  41a972:	eba4 0408 	sub.w	r4, r4, r8

0041a976 <.LVL34>:
        left = 0;
  41a976:	2600      	movs	r6, #0
  41a978:	e7e7      	b.n	41a94a <.LVL27>

0041a97a <.LVL35>:
        result = Sha256Process(sha256, data, len & 0xFFFFFFC0);
  41a97a:	f024 083f 	bic.w	r8, r4, #63	; 0x3f
  41a97e:	4642      	mov	r2, r8
  41a980:	4639      	mov	r1, r7
  41a982:	4628      	mov	r0, r5
  41a984:	f7fd f9cc 	bl	417d20 <.LBE36>

0041a988 <.LVL36>:
  41a988:	4681      	mov	r9, r0

0041a98a <.LVL37>:
        data += (len & 0xFFFFFFC0);
  41a98a:	4447      	add	r7, r8
        len &= 0x3F;
  41a98c:	f004 043f 	and.w	r4, r4, #63	; 0x3f
  41a990:	e7dd      	b.n	41a94e <.LVL27+0x4>

0041a992 <.LVL40>:
        memcpy((void *)(sha256->buffer + left), data, len);
  41a992:	f105 0040 	add.w	r0, r5, #64	; 0x40
  41a996:	4622      	mov	r2, r4
  41a998:	4639      	mov	r1, r7
  41a99a:	4430      	add	r0, r6
  41a99c:	f7fb fd3e 	bl	41641c <memcpy>

0041a9a0 <.LVL41>:
    return result;
  41a9a0:	e7d6      	b.n	41a950 <.LVL27+0x6>

Disassembly of section .text.wc_Compress%187:

0041a9a4 <wc_Compress>:
 * Note, the output buffer still needs to be larger than the input buffer.
 * The right chunk of data won't compress at all, and the lookup table will
 * add to the size of the output. The libz code says the compressed
 * buffer should be srcSz + 0.1% + 12.
 */
{
  41a9a4:	b510      	push	{r4, lr}

0041a9a6 <.LCFI3>:
  41a9a6:	b092      	sub	sp, #72	; 0x48

0041a9a8 <.LCFI4>:
    z_stream stream;
    int result = 0;

    stream.next_in = (Bytef*)in;
  41a9a8:	9204      	str	r2, [sp, #16]
    stream.avail_in = (uInt)inSz;
  41a9aa:	9305      	str	r3, [sp, #20]
#ifdef MAXSEG_64K
    /* Check for source > 64K on 16-bit machine: */
    if ((uLong)stream.avail_in != inSz) return COMPRESS_INIT_E;
#endif
    stream.next_out = out;
  41a9ac:	9007      	str	r0, [sp, #28]
    stream.avail_out = (uInt)outSz;
  41a9ae:	9108      	str	r1, [sp, #32]
    if ((uLong)stream.avail_out != outSz) return COMPRESS_INIT_E;

    stream.zalloc = (alloc_func)myAlloc;
  41a9b0:	4b19      	ldr	r3, [pc, #100]	; (41aa18 <.LVL19+0xc>)

0041a9b2 <.LVL9>:
  41a9b2:	930c      	str	r3, [sp, #48]	; 0x30
    stream.zfree = (free_func)myFree;
  41a9b4:	4b19      	ldr	r3, [pc, #100]	; (41aa1c <.LVL19+0x10>)
  41a9b6:	930d      	str	r3, [sp, #52]	; 0x34
    stream.opaque = (voidpf)0;
  41a9b8:	2300      	movs	r3, #0
  41a9ba:	930e      	str	r3, [sp, #56]	; 0x38

    if (deflateInit2(&stream, Z_DEFAULT_COMPRESSION, Z_DEFLATED,
  41a9bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
  41a9be:	2b00      	cmp	r3, #0
  41a9c0:	bf14      	ite	ne
  41a9c2:	2304      	movne	r3, #4
  41a9c4:	2300      	moveq	r3, #0
  41a9c6:	2238      	movs	r2, #56	; 0x38

0041a9c8 <.LVL10>:
  41a9c8:	9203      	str	r2, [sp, #12]
  41a9ca:	4a15      	ldr	r2, [pc, #84]	; (41aa20 <.LVL19+0x14>)
  41a9cc:	9202      	str	r2, [sp, #8]
  41a9ce:	9301      	str	r3, [sp, #4]
  41a9d0:	2301      	movs	r3, #1
  41a9d2:	9300      	str	r3, [sp, #0]
  41a9d4:	230b      	movs	r3, #11
  41a9d6:	2208      	movs	r2, #8
  41a9d8:	f04f 31ff 	mov.w	r1, #4294967295

0041a9dc <.LVL11>:
  41a9dc:	a804      	add	r0, sp, #16

0041a9de <.LVL12>:
  41a9de:	f7fa fafb 	bl	414fd8 <deflateInit2_>

0041a9e2 <.LVL13>:
  41a9e2:	b9b0      	cbnz	r0, 41aa12 <.LVL19+0x6>
                     DEFLATE_DEFAULT_WINDOWBITS, DEFLATE_DEFAULT_MEMLEVEL,
                     flags ? Z_FIXED : Z_DEFAULT_STRATEGY) != Z_OK)
        return COMPRESS_INIT_E;

    if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {
  41a9e4:	2104      	movs	r1, #4
  41a9e6:	a804      	add	r0, sp, #16
  41a9e8:	f7f0 fea8 	bl	40b73c <deflate>

0041a9ec <.LVL14>:
  41a9ec:	2801      	cmp	r0, #1
  41a9ee:	d10a      	bne.n	41aa06 <.LCFI6>
        deflateEnd(&stream);
        return COMPRESS_E;
    }

    result = (int)stream.total_out;
  41a9f0:	9c09      	ldr	r4, [sp, #36]	; 0x24

0041a9f2 <.LVL15>:

    if (deflateEnd(&stream) != Z_OK)
  41a9f2:	a804      	add	r0, sp, #16
  41a9f4:	f7ff f8ea 	bl	419bcc <.LFE165>

0041a9f8 <.LVL16>:
  41a9f8:	2800      	cmp	r0, #0
        result = COMPRESS_E;
  41a9fa:	bf18      	it	ne
  41a9fc:	f06f 04b7 	mvnne.w	r4, #183	; 0xb7

0041aa00 <.LVL17>:

    return result;
}
  41aa00:	4620      	mov	r0, r4
  41aa02:	b012      	add	sp, #72	; 0x48

0041aa04 <.LCFI5>:
  41aa04:	bd10      	pop	{r4, pc}

0041aa06 <.LCFI6>:
        deflateEnd(&stream);
  41aa06:	a804      	add	r0, sp, #16
  41aa08:	f7ff f8e0 	bl	419bcc <.LFE165>

0041aa0c <.LVL19>:
        return COMPRESS_E;
  41aa0c:	f06f 04b7 	mvn.w	r4, #183	; 0xb7
  41aa10:	e7f6      	b.n	41aa00 <.LVL17>
        return COMPRESS_INIT_E;
  41aa12:	f06f 04b6 	mvn.w	r4, #182	; 0xb6
  41aa16:	e7f3      	b.n	41aa00 <.LVL17>
  41aa18:	0041dbc7 	.word	0x0041dbc7
  41aa1c:	0041db8f 	.word	0x0041db8f
  41aa20:	0041dd04 	.word	0x0041dd04

Disassembly of section .text.fp_montgomery_calc_normalization%188:

0041aa24 <fp_montgomery_calc_normalization>:
{
  41aa24:	b570      	push	{r4, r5, r6, lr}

0041aa26 <.LCFI36>:
  41aa26:	4604      	mov	r4, r0
  41aa28:	460e      	mov	r6, r1
  bits = fp_count_bits (b) % DIGIT_BIT;
  41aa2a:	4608      	mov	r0, r1

0041aa2c <.LVL296>:
  41aa2c:	f002 fe8d 	bl	41d74a <.LFE26>

0041aa30 <.LVL297>:
  41aa30:	4243      	negs	r3, r0
  41aa32:	f000 051f 	and.w	r5, r0, #31
  41aa36:	f003 031f 	and.w	r3, r3, #31
  41aa3a:	bf58      	it	pl
  41aa3c:	425d      	negpl	r5, r3

0041aa3e <.LVL298>:
  if (!bits) bits = DIGIT_BIT;
  41aa3e:	b33d      	cbz	r5, 41aa90 <.LVL309>
  if (b->used > 1) {
  41aa40:	6831      	ldr	r1, [r6, #0]
  41aa42:	2901      	cmp	r1, #1
  41aa44:	dd09      	ble.n	41aa5a <.LVL301>
     fp_2expt (a, (b->used - 1) * DIGIT_BIT + bits - 1);
  41aa46:	eb05 1141 	add.w	r1, r5, r1, lsl #5
  41aa4a:	3921      	subs	r1, #33	; 0x21
  41aa4c:	4620      	mov	r0, r4
  41aa4e:	f002 f82e 	bl	41caae <.LFE170>

0041aa52 <.LVL299>:
  for (x = bits - 1; x < (int)DIGIT_BIT; x++) {
  41aa52:	3d01      	subs	r5, #1

0041aa54 <.LVL300>:
  41aa54:	2d1f      	cmp	r5, #31
  41aa56:	dd09      	ble.n	41aa6c <.LVL303+0x6>
  41aa58:	bd70      	pop	{r4, r5, r6, pc}

0041aa5a <.LVL301>:
     fp_set(a, 1);
  41aa5a:	2101      	movs	r1, #1
  41aa5c:	4620      	mov	r0, r4
  41aa5e:	f002 ff7d 	bl	41d95c <.LFE20>

0041aa62 <.LVL302>:
  for (x = bits - 1; x < (int)DIGIT_BIT; x++) {
  41aa62:	2500      	movs	r5, #0
  41aa64:	e002      	b.n	41aa6c <.LVL303+0x6>

0041aa66 <.LVL303>:
  41aa66:	3501      	adds	r5, #1
  41aa68:	2d1f      	cmp	r5, #31
  41aa6a:	dc10      	bgt.n	41aa8e <.LVL308+0x2>
    fp_mul_2 (a, a);
  41aa6c:	4621      	mov	r1, r4
  41aa6e:	4620      	mov	r0, r4
  41aa70:	f000 ff62 	bl	41b938 <.LBE13>

0041aa74 <.LVL306>:
    if (fp_cmp_mag (a, b) != FP_LT) {
  41aa74:	4631      	mov	r1, r6
  41aa76:	4620      	mov	r0, r4
  41aa78:	f000 fef9 	bl	41b86e <.LFE179>

0041aa7c <.LVL307>:
  41aa7c:	f1b0 3fff 	cmp.w	r0, #4294967295
  41aa80:	d0f1      	beq.n	41aa66 <.LVL303>
      s_fp_sub (a, b, a);
  41aa82:	4622      	mov	r2, r4
  41aa84:	4631      	mov	r1, r6
  41aa86:	4620      	mov	r0, r4
  41aa88:	f7fc fffa 	bl	417a80 <.LBE840>

0041aa8c <.LVL308>:
  41aa8c:	e7eb      	b.n	41aa66 <.LVL303>
  41aa8e:	bd70      	pop	{r4, r5, r6, pc}

0041aa90 <.LVL309>:
  if (b->used > 1) {
  41aa90:	6831      	ldr	r1, [r6, #0]
  41aa92:	2901      	cmp	r1, #1
  41aa94:	dde1      	ble.n	41aa5a <.LVL301>
     fp_2expt (a, (b->used - 1) * DIGIT_BIT + bits - 1);
  41aa96:	0149      	lsls	r1, r1, #5
  41aa98:	3901      	subs	r1, #1
  41aa9a:	4620      	mov	r0, r4
  41aa9c:	f002 f807 	bl	41caae <.LFE170>

0041aaa0 <.LVL310>:
  for (x = bits - 1; x < (int)DIGIT_BIT; x++) {
  41aaa0:	251f      	movs	r5, #31

0041aaa2 <.LVL311>:
  41aaa2:	e7e3      	b.n	41aa6c <.LVL303+0x6>

Disassembly of section .rodata.distfix.6568%189:

0041aaa4 <distfix.6568>:
  41aaa4:	0510 0001 0517 0101 0513 0011 051b 1001     ................
  41aab4:	0511 0005 0519 0401 0515 0041 051d 4001     ..........A....@
  41aac4:	0510 0003 0518 0201 0514 0021 051c 2001     ..........!.... 
  41aad4:	0512 0009 051a 0801 0516 0081 0540 0000     ............@...
  41aae4:	0510 0002 0517 0181 0513 0019 051b 1801     ................
  41aaf4:	0511 0007 0519 0601 0515 0061 051d 6001     ..........a....`
  41ab04:	0510 0004 0518 0301 0514 0031 051c 3001     ..........1....0
  41ab14:	0512 000d 051a 0c01 0516 00c1 0540 0000     ............@...

Disassembly of section .rodata.sha_padding%190:

0041ab24 <sha_padding>:
  41ab24:	0080 0000 0000 0000 0000 0000 0000 0000     ................
	...

Disassembly of section .text.__multadd%191:

0041aba4 <__multadd>:
  41aba4:	b5f0      	push	{r4, r5, r6, r7, lr}

0041aba6 <.LCFI1>:
  41aba6:	690c      	ldr	r4, [r1, #16]
  41aba8:	b083      	sub	sp, #12

0041abaa <.LCFI2>:
  41abaa:	460d      	mov	r5, r1
  41abac:	4606      	mov	r6, r0

0041abae <.LVL13>:
  41abae:	f101 0e14 	add.w	lr, r1, #20

0041abb2 <.LVL14>:
  41abb2:	2700      	movs	r7, #0

0041abb4 <.LVL15>:
  41abb4:	f8de 0000 	ldr.w	r0, [lr]

0041abb8 <.LVL16>:
  41abb8:	b281      	uxth	r1, r0
  41abba:	fb02 3301 	mla	r3, r2, r1, r3

0041abbe <.LVL17>:
  41abbe:	0c01      	lsrs	r1, r0, #16
  41abc0:	0c18      	lsrs	r0, r3, #16

0041abc2 <.LVL18>:
  41abc2:	fb02 0101 	mla	r1, r2, r1, r0

0041abc6 <.LVL19>:
  41abc6:	b29b      	uxth	r3, r3

0041abc8 <.LVL20>:
  41abc8:	3701      	adds	r7, #1

0041abca <.LVL21>:
  41abca:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  41abce:	42bc      	cmp	r4, r7
  41abd0:	f84e 3b04 	str.w	r3, [lr], #4

0041abd4 <.LVL22>:
  41abd4:	ea4f 4311 	mov.w	r3, r1, lsr #16

0041abd8 <.LVL23>:
  41abd8:	dcec      	bgt.n	41abb4 <.LVL15>
  41abda:	b13b      	cbz	r3, 41abec <.LVL26+0x4>
  41abdc:	68aa      	ldr	r2, [r5, #8]

0041abde <.LVL24>:
  41abde:	4294      	cmp	r4, r2
  41abe0:	da07      	bge.n	41abf2 <.LCFI4>

0041abe2 <.LVL25>:
  41abe2:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  41abe6:	3401      	adds	r4, #1

0041abe8 <.LVL26>:
  41abe8:	6153      	str	r3, [r2, #20]
  41abea:	612c      	str	r4, [r5, #16]
  41abec:	4628      	mov	r0, r5
  41abee:	b003      	add	sp, #12

0041abf0 <.LCFI3>:
  41abf0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0041abf2 <.LCFI4>:
  41abf2:	6869      	ldr	r1, [r5, #4]

0041abf4 <.LVL28>:
  41abf4:	9301      	str	r3, [sp, #4]
  41abf6:	3101      	adds	r1, #1
  41abf8:	4630      	mov	r0, r6
  41abfa:	f001 fc2f 	bl	41c45c <.LFE2>

0041abfe <.LVL29>:
  41abfe:	692a      	ldr	r2, [r5, #16]
  41ac00:	3202      	adds	r2, #2
  41ac02:	f105 010c 	add.w	r1, r5, #12
  41ac06:	4607      	mov	r7, r0

0041ac08 <.LVL30>:
  41ac08:	0092      	lsls	r2, r2, #2
  41ac0a:	300c      	adds	r0, #12

0041ac0c <.LVL31>:
  41ac0c:	f7fb fc06 	bl	41641c <memcpy>

0041ac10 <.LBB12>:
  41ac10:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  41ac12:	6869      	ldr	r1, [r5, #4]

0041ac14 <.LBE12>:
  41ac14:	9b01      	ldr	r3, [sp, #4]

0041ac16 <.LBB15>:
  41ac16:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  41ac1a:	6028      	str	r0, [r5, #0]
  41ac1c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]

0041ac20 <.LBE15>:
  41ac20:	463d      	mov	r5, r7

0041ac22 <.LVL34>:
  41ac22:	e7de      	b.n	41abe2 <.LVL25>

Disassembly of section .text.wc_Des_CbcEncrypt%192:

0041ac24 <wc_Des_CbcEncrypt>:
    {
  41ac24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

0041ac28 <.LCFI11>:
        word32 blocks = sz / DES_BLOCK_SIZE;
  41ac28:	08db      	lsrs	r3, r3, #3

0041ac2a <.LVL180>:
        while (blocks--) {
  41ac2a:	b3bb      	cbz	r3, 41ac9c <.LBE253>
  41ac2c:	4680      	mov	r8, r0
  41ac2e:	460f      	mov	r7, r1
  41ac30:	f103 39ff 	add.w	r9, r3, #4294967295

0041ac34 <.LVL181>:
  41ac34:	1e56      	subs	r6, r2, #1
            xorbuf((byte*)des->reg, in, DES_BLOCK_SIZE);
  41ac36:	4605      	mov	r5, r0
  41ac38:	1dc4      	adds	r4, r0, #7
  41ac3a:	e01d      	b.n	41ac78 <.LBB255>

0041ac3c <.LBB249>:
    for (i = 0; i < n; i++) r[i] ^= a[i];
  41ac3c:	f8d8 3000 	ldr.w	r3, [r8]
  41ac40:	f8d6 2001 	ldr.w	r2, [r6, #1]
  41ac44:	4053      	eors	r3, r2
  41ac46:	f8c8 3000 	str.w	r3, [r8]

0041ac4a <.LVL183>:
  41ac4a:	f8d8 3004 	ldr.w	r3, [r8, #4]
  41ac4e:	f8d6 2005 	ldr.w	r2, [r6, #5]
  41ac52:	4053      	eors	r3, r2
  41ac54:	f8c8 3004 	str.w	r3, [r8, #4]

0041ac58 <.LBE249>:
            DesProcessBlock(des, (byte*)des->reg, (byte*)des->reg);
  41ac58:	462a      	mov	r2, r5
  41ac5a:	4629      	mov	r1, r5
  41ac5c:	4628      	mov	r0, r5
  41ac5e:	f7fc f9a1 	bl	416fa4 <.LFE169>

0041ac62 <.LVL185>:
            XMEMCPY(out, des->reg, DES_BLOCK_SIZE);
  41ac62:	682a      	ldr	r2, [r5, #0]
  41ac64:	686b      	ldr	r3, [r5, #4]
  41ac66:	603a      	str	r2, [r7, #0]
  41ac68:	607b      	str	r3, [r7, #4]
            out += DES_BLOCK_SIZE;
  41ac6a:	3708      	adds	r7, #8

0041ac6c <.LVL186>:
        while (blocks--) {
  41ac6c:	f109 39ff 	add.w	r9, r9, #4294967295
  41ac70:	3608      	adds	r6, #8

0041ac72 <.LVL188>:
  41ac72:	f1b9 3fff 	cmp.w	r9, #4294967295
  41ac76:	d011      	beq.n	41ac9c <.LBE253>

0041ac78 <.LBB255>:
    if (((wolfssl_word)buf | (wolfssl_word)mask | count) % WOLFSSL_WORD_SIZE == 0)
  41ac78:	1c73      	adds	r3, r6, #1

0041ac7a <.LVL190>:
  41ac7a:	ea48 0303 	orr.w	r3, r8, r3

0041ac7e <.LVL191>:
  41ac7e:	f013 0f03 	tst.w	r3, #3
  41ac82:	d0db      	beq.n	41ac3c <.LBB249>
  41ac84:	f108 33ff 	add.w	r3, r8, #4294967295
  41ac88:	4632      	mov	r2, r6

0041ac8a <.LBB253>:
        for (i = 0; i < count; i++) b[i] ^= m[i];
  41ac8a:	7859      	ldrb	r1, [r3, #1]
  41ac8c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  41ac90:	4041      	eors	r1, r0
  41ac92:	f803 1f01 	strb.w	r1, [r3, #1]!
  41ac96:	42a3      	cmp	r3, r4
  41ac98:	d1f7      	bne.n	41ac8a <.LBB253>
  41ac9a:	e7dd      	b.n	41ac58 <.LBE249>

0041ac9c <.LBE253>:
    }
  41ac9c:	2000      	movs	r0, #0
  41ac9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

Disassembly of section .text.wc_ecc_shared_secret_ex%193:

0041aca2 <wc_ecc_shared_secret_ex>:
    if (private_key == NULL || point == NULL || out == NULL ||
  41aca2:	2800      	cmp	r0, #0
  41aca4:	d039      	beq.n	41ad1a <.LCFI62>
{
  41aca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041aca8 <.LCFI61>:
  41aca8:	4604      	mov	r4, r0
    if (private_key == NULL || point == NULL || out == NULL ||
  41acaa:	b351      	cbz	r1, 41ad02 <.LVL833>
  41acac:	b362      	cbz	r2, 41ad08 <.LVL835>
  41acae:	b35b      	cbz	r3, 41ad08 <.LVL835>
    if (private_key->type != ECC_PRIVATEKEY) {
  41acb0:	6800      	ldr	r0, [r0, #0]

0041acb2 <.LVL825>:
  41acb2:	2802      	cmp	r0, #2
  41acb4:	d12b      	bne.n	41ad0e <.LVL836+0x2>
  41acb6:	461f      	mov	r7, r3
  41acb8:	4616      	mov	r6, r2
  41acba:	460d      	mov	r5, r1
    if (wc_ecc_is_valid_idx(private_key->idx) == 0)
  41acbc:	6860      	ldr	r0, [r4, #4]
  41acbe:	f002 fb95 	bl	41d3ec <wc_ecc_is_valid_idx>

0041acc2 <.LVL826>:
  41acc2:	b338      	cbz	r0, 41ad14 <.LVL838>
    switch(private_key->state) {
  41acc4:	68a3      	ldr	r3, [r4, #8]
  41acc6:	2b00      	cmp	r3, #0
  41acc8:	db12      	blt.n	41acf0 <.LVL831>
  41acca:	2b01      	cmp	r3, #1
  41accc:	dd05      	ble.n	41acda <.LVL829>
  41acce:	2b02      	cmp	r3, #2
  41acd0:	d10e      	bne.n	41acf0 <.LVL831>

0041acd2 <.LVL827>:
            err = 0;
  41acd2:	2000      	movs	r0, #0

0041acd4 <.LVL828>:
    private_key->state = ECC_STATE_NONE;
  41acd4:	2300      	movs	r3, #0
  41acd6:	60a3      	str	r3, [r4, #8]
    return err;
  41acd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041acda <.LVL829>:
            private_key->state = ECC_STATE_SHARED_SEC_GEN;
  41acda:	2301      	movs	r3, #1
  41acdc:	60a3      	str	r3, [r4, #8]
            err = wc_ecc_shared_secret_gen(private_key, point, out, outlen);
  41acde:	463b      	mov	r3, r7
  41ace0:	4632      	mov	r2, r6
  41ace2:	4629      	mov	r1, r5
  41ace4:	4620      	mov	r0, r4
  41ace6:	f7fc ffad 	bl	417c44 <.LFE230>

0041acea <.LVL830>:
            if (err < 0) {
  41acea:	2800      	cmp	r0, #0
  41acec:	daf1      	bge.n	41acd2 <.LVL827>
  41acee:	e001      	b.n	41acf4 <.LVL832>

0041acf0 <.LVL831>:
            err = BAD_STATE_E;
  41acf0:	f06f 00bf 	mvn.w	r0, #191	; 0xbf

0041acf4 <.LVL832>:
    if (err == WC_PENDING_E) {
  41acf4:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
  41acf8:	d1ec      	bne.n	41acd4 <.LVL828>
        private_key->state++;
  41acfa:	68a3      	ldr	r3, [r4, #8]
  41acfc:	3301      	adds	r3, #1
  41acfe:	60a3      	str	r3, [r4, #8]
        return err;
  41ad00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041ad02 <.LVL833>:
        return BAD_FUNC_ARG;
  41ad02:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041ad06 <.LVL834>:
  41ad06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041ad08 <.LVL835>:
  41ad08:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041ad0c <.LVL836>:
  41ad0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return ECC_BAD_ARG_E;
  41ad0e:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
  41ad12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041ad14 <.LVL838>:
        return ECC_BAD_ARG_E;
  41ad14:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
}
  41ad18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041ad1a <.LCFI62>:
        return BAD_FUNC_ARG;
  41ad1a:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041ad1e <.LVL840>:
}
  41ad1e:	4770      	bx	lr

Disassembly of section .text.deflateResetKeep%194:

0041ad20 <deflateResetKeep>:
    if (strm == Z_NULL || strm->state == Z_NULL ||
  41ad20:	b310      	cbz	r0, 41ad68 <.LCFI14>
{
  41ad22:	b538      	push	{r3, r4, r5, lr}

0041ad24 <.LCFI13>:
  41ad24:	4604      	mov	r4, r0
    if (strm == Z_NULL || strm->state == Z_NULL ||
  41ad26:	69c5      	ldr	r5, [r0, #28]
  41ad28:	b30d      	cbz	r5, 41ad6e <.LCFI15>
  41ad2a:	6a02      	ldr	r2, [r0, #32]
  41ad2c:	b312      	cbz	r2, 41ad74 <.LVL274>
        strm->zalloc == (alloc_func)0 || strm->zfree == (free_func)0) {
  41ad2e:	6a42      	ldr	r2, [r0, #36]	; 0x24
  41ad30:	b31a      	cbz	r2, 41ad7a <.LVL276>
    strm->total_in = strm->total_out = 0;
  41ad32:	2200      	movs	r2, #0
  41ad34:	6142      	str	r2, [r0, #20]
  41ad36:	6082      	str	r2, [r0, #8]
    strm->msg = Z_NULL; /* use zfree if we ever allocate msg dynamically */
  41ad38:	6182      	str	r2, [r0, #24]
    strm->data_type = Z_UNKNOWN;
  41ad3a:	2102      	movs	r1, #2
  41ad3c:	62c1      	str	r1, [r0, #44]	; 0x2c

0041ad3e <.LVL266>:
    s->pending = 0;
  41ad3e:	616a      	str	r2, [r5, #20]
    s->pending_out = s->pending_buf;
  41ad40:	68aa      	ldr	r2, [r5, #8]
  41ad42:	612a      	str	r2, [r5, #16]
    if (s->wrap < 0) {
  41ad44:	69aa      	ldr	r2, [r5, #24]
  41ad46:	2a00      	cmp	r2, #0
  41ad48:	db0b      	blt.n	41ad62 <.LVL269>
    s->status = s->wrap ? INIT_STATE : BUSY_STATE;
  41ad4a:	69ab      	ldr	r3, [r5, #24]
  41ad4c:	b1c3      	cbz	r3, 41ad80 <.LVL278>
  41ad4e:	222a      	movs	r2, #42	; 0x2a
  41ad50:	606a      	str	r2, [r5, #4]
        s->wrap == 2 ? crc32(0L, Z_NULL, 0) :
  41ad52:	2b02      	cmp	r3, #2
  41ad54:	d116      	bne.n	41ad84 <.LVL278+0x4>
  41ad56:	2200      	movs	r2, #0
  41ad58:	4611      	mov	r1, r2
  41ad5a:	4610      	mov	r0, r2

0041ad5c <.LVL267>:
  41ad5c:	f7f8 fcd2 	bl	413704 <.LFE21>

0041ad60 <.LVL268>:
  41ad60:	e015      	b.n	41ad8e <.LVL280>

0041ad62 <.LVL269>:
        s->wrap = -s->wrap; /* was made negative by deflate(..., Z_FINISH); */
  41ad62:	4252      	negs	r2, r2
  41ad64:	61aa      	str	r2, [r5, #24]
  41ad66:	e7f0      	b.n	41ad4a <.LVL266+0xc>

0041ad68 <.LCFI14>:
        return Z_STREAM_ERROR;
  41ad68:	f06f 0001 	mvn.w	r0, #1

0041ad6c <.LVL271>:
  41ad6c:	4770      	bx	lr

0041ad6e <.LCFI15>:
  41ad6e:	f06f 0001 	mvn.w	r0, #1

0041ad72 <.LVL273>:
  41ad72:	bd38      	pop	{r3, r4, r5, pc}

0041ad74 <.LVL274>:
  41ad74:	f06f 0001 	mvn.w	r0, #1

0041ad78 <.LVL275>:
  41ad78:	bd38      	pop	{r3, r4, r5, pc}

0041ad7a <.LVL276>:
  41ad7a:	f06f 0001 	mvn.w	r0, #1

0041ad7e <.LVL277>:
  41ad7e:	bd38      	pop	{r3, r4, r5, pc}

0041ad80 <.LVL278>:
    s->status = s->wrap ? INIT_STATE : BUSY_STATE;
  41ad80:	2371      	movs	r3, #113	; 0x71
  41ad82:	606b      	str	r3, [r5, #4]
        s->wrap == 2 ? crc32(0L, Z_NULL, 0) :
  41ad84:	2200      	movs	r2, #0
  41ad86:	4611      	mov	r1, r2
  41ad88:	4610      	mov	r0, r2

0041ad8a <.LVL279>:
  41ad8a:	f7f8 f87d 	bl	412e88 <.LBE46>

0041ad8e <.LVL280>:
    strm->adler =
  41ad8e:	6320      	str	r0, [r4, #48]	; 0x30
    s->last_flush = Z_NO_FLUSH;
  41ad90:	2400      	movs	r4, #0

0041ad92 <.LVL281>:
  41ad92:	62ac      	str	r4, [r5, #40]	; 0x28
    _tr_init(s);
  41ad94:	4628      	mov	r0, r5
  41ad96:	f001 fac9 	bl	41c32c <.LFE12>

0041ad9a <.LVL282>:
    return Z_OK;
  41ad9a:	4620      	mov	r0, r4
  41ad9c:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section .text.sha384_test%195:

0041ada0 <sha384_test>:
{
  41ada0:	b570      	push	{r4, r5, r6, lr}

0041ada2 <.LCFI13>:
  41ada2:	b0d4      	sub	sp, #336	; 0x150

0041ada4 <.LCFI14>:
    test_sha[0] = a;
  41ada4:	4b1b      	ldr	r3, [pc, #108]	; (41ae14 <.LCFI15+0x4>)
  41ada6:	9300      	str	r3, [sp, #0]
  41ada8:	f503 7235 	add.w	r2, r3, #724	; 0x2d4
  41adac:	9201      	str	r2, [sp, #4]
  41adae:	2203      	movs	r2, #3
  41adb0:	9202      	str	r2, [sp, #8]
  41adb2:	2230      	movs	r2, #48	; 0x30
  41adb4:	9203      	str	r2, [sp, #12]
    test_sha[1] = b;
  41adb6:	f503 7142 	add.w	r1, r3, #776	; 0x308
  41adba:	9104      	str	r1, [sp, #16]
  41adbc:	f503 735f 	add.w	r3, r3, #892	; 0x37c
  41adc0:	9305      	str	r3, [sp, #20]
  41adc2:	2370      	movs	r3, #112	; 0x70
  41adc4:	9306      	str	r3, [sp, #24]
  41adc6:	9207      	str	r2, [sp, #28]
    CRYPT_SHA384_Initialize(&sha);
  41adc8:	a814      	add	r0, sp, #80	; 0x50
  41adca:	f002 fe69 	bl	41daa0 <.LFE171>

0041adce <.LVL22>:
    appData.sha384_test_result = times;
  41adce:	2202      	movs	r2, #2
  41add0:	4b11      	ldr	r3, [pc, #68]	; (41ae18 <.LCFI15+0x8>)
  41add2:	611a      	str	r2, [r3, #16]

0041add4 <.LVL23>:
  41add4:	2400      	movs	r4, #0
            appData.sha384_test_result--;
  41add6:	461e      	mov	r6, r3
  41add8:	e002      	b.n	41ade0 <.LVL24+0x6>

0041adda <.LVL24>:
  41adda:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  41addc:	2c20      	cmp	r4, #32
  41adde:	d016      	beq.n	41ae0e <.LVL27+0xc>
  41ade0:	eb0d 0504 	add.w	r5, sp, r4
        CRYPT_SHA384_DataAdd(&sha, (byte*)test_sha[i].input,(word32)test_sha[i].inLen);
  41ade4:	68aa      	ldr	r2, [r5, #8]
  41ade6:	f85d 1004 	ldr.w	r1, [sp, r4]
  41adea:	a814      	add	r0, sp, #80	; 0x50
  41adec:	f002 fd1c 	bl	41d828 <.LFE174>

0041adf0 <.LVL25>:
        CRYPT_SHA384_Finalize(&sha, hash);
  41adf0:	a908      	add	r1, sp, #32
  41adf2:	a814      	add	r0, sp, #80	; 0x50
  41adf4:	f002 fd24 	bl	41d840 <.LFE176>

0041adf8 <.LVL26>:
        if (memcmp(hash, test_sha[i].output, SHA384_DIGEST_SIZE) == 0)
  41adf8:	2230      	movs	r2, #48	; 0x30
  41adfa:	6869      	ldr	r1, [r5, #4]
  41adfc:	a808      	add	r0, sp, #32
  41adfe:	f000 ff83 	bl	41bd08 <memcmp>

0041ae02 <.LVL27>:
  41ae02:	2800      	cmp	r0, #0
  41ae04:	d1e9      	bne.n	41adda <.LVL24>
            appData.sha384_test_result--;
  41ae06:	6933      	ldr	r3, [r6, #16]
  41ae08:	3b01      	subs	r3, #1
  41ae0a:	6133      	str	r3, [r6, #16]
  41ae0c:	e7e5      	b.n	41adda <.LVL24>
}
  41ae0e:	b054      	add	sp, #336	; 0x150

0041ae10 <.LCFI15>:
  41ae10:	bd70      	pop	{r4, r5, r6, pc}
  41ae12:	bf00      	nop
  41ae14:	0040ab9c 	.word	0x0040ab9c
  41ae18:	2040d534 	.word	0x2040d534

Disassembly of section .text.sha512_test%196:

0041ae1c <sha512_test>:
{
  41ae1c:	b570      	push	{r4, r5, r6, lr}

0041ae1e <.LCFI16>:
  41ae1e:	b0e0      	sub	sp, #384	; 0x180

0041ae20 <.LCFI17>:
    test_sha[0] = a;
  41ae20:	4b1b      	ldr	r3, [pc, #108]	; (41ae90 <.LCFI18+0x4>)
  41ae22:	9300      	str	r3, [sp, #0]
  41ae24:	f503 726c 	add.w	r2, r3, #944	; 0x3b0
  41ae28:	9201      	str	r2, [sp, #4]
  41ae2a:	2203      	movs	r2, #3
  41ae2c:	9202      	str	r2, [sp, #8]
  41ae2e:	2240      	movs	r2, #64	; 0x40
  41ae30:	9203      	str	r2, [sp, #12]
    test_sha[1] = b;
  41ae32:	f503 7142 	add.w	r1, r3, #776	; 0x308
  41ae36:	9104      	str	r1, [sp, #16]
  41ae38:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
  41ae3c:	9305      	str	r3, [sp, #20]
  41ae3e:	2370      	movs	r3, #112	; 0x70
  41ae40:	9306      	str	r3, [sp, #24]
  41ae42:	9207      	str	r2, [sp, #28]
    CRYPT_SHA512_Initialize(&sha);
  41ae44:	a818      	add	r0, sp, #96	; 0x60
  41ae46:	f002 fe33 	bl	41dab0 <.LFE175>

0041ae4a <.LVL29>:
    appData.sha512_test_result = times;
  41ae4a:	2202      	movs	r2, #2
  41ae4c:	4b11      	ldr	r3, [pc, #68]	; (41ae94 <.LCFI18+0x8>)
  41ae4e:	615a      	str	r2, [r3, #20]

0041ae50 <.LVL30>:
  41ae50:	2400      	movs	r4, #0
            appData.sha512_test_result--;
  41ae52:	461e      	mov	r6, r3
  41ae54:	e002      	b.n	41ae5c <.LVL31+0x6>

0041ae56 <.LVL31>:
  41ae56:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  41ae58:	2c20      	cmp	r4, #32
  41ae5a:	d016      	beq.n	41ae8a <.LVL34+0xc>
  41ae5c:	eb0d 0504 	add.w	r5, sp, r4
        CRYPT_SHA512_DataAdd(&sha, (byte*)test_sha[i].input,(word32)test_sha[i].inLen);
  41ae60:	68aa      	ldr	r2, [r5, #8]
  41ae62:	f85d 1004 	ldr.w	r1, [sp, r4]
  41ae66:	a818      	add	r0, sp, #96	; 0x60
  41ae68:	f002 fcf6 	bl	41d858 <.LFE177>

0041ae6c <.LVL32>:
        CRYPT_SHA512_Finalize(&sha, hash);
  41ae6c:	a908      	add	r1, sp, #32
  41ae6e:	a818      	add	r0, sp, #96	; 0x60
  41ae70:	f002 fcfe 	bl	41d870 <.LFE179>

0041ae74 <.LVL33>:
        if (memcmp(hash, test_sha[i].output, SHA512_DIGEST_SIZE) == 0)
  41ae74:	2240      	movs	r2, #64	; 0x40
  41ae76:	6869      	ldr	r1, [r5, #4]
  41ae78:	a808      	add	r0, sp, #32
  41ae7a:	f000 ff45 	bl	41bd08 <memcmp>

0041ae7e <.LVL34>:
  41ae7e:	2800      	cmp	r0, #0
  41ae80:	d1e9      	bne.n	41ae56 <.LVL31>
            appData.sha512_test_result--;
  41ae82:	6973      	ldr	r3, [r6, #20]
  41ae84:	3b01      	subs	r3, #1
  41ae86:	6173      	str	r3, [r6, #20]
  41ae88:	e7e5      	b.n	41ae56 <.LVL31>
}
  41ae8a:	b060      	add	sp, #384	; 0x180

0041ae8c <.LCFI18>:
  41ae8c:	bd70      	pop	{r4, r5, r6, pc}
  41ae8e:	bf00      	nop
  41ae90:	0040ab9c 	.word	0x0040ab9c
  41ae94:	2040d534 	.word	0x2040d534

Disassembly of section .text.StoreECC_DSA_Sig%197:

0041ae98 <StoreECC_DSA_Sig>:

#ifdef HAVE_ECC

/* Der Encode r & s ints into out, outLen is (in/out) size */
int StoreECC_DSA_Sig(byte* out, word32* outLen, mp_int* r, mp_int* s)
{
  41ae98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

0041ae9c <.LCFI148>:
  41ae9c:	4607      	mov	r7, r0
  41ae9e:	4688      	mov	r8, r1
  41aea0:	4615      	mov	r5, r2
  41aea2:	461e      	mov	r6, r3

0041aea4 <.LVL1187>:
    int    rSz;                           /* encoding size */
    int    sSz;
    word32 headerSz = 4;   /* 2*ASN_TAG + 2*LEN(ENUM) */

    /* If the leading bit on the INTEGER is a 1, add a leading zero */
    int rLeadingZero = mp_leading_bit(r);
  41aea4:	4610      	mov	r0, r2

0041aea6 <.LVL1188>:
  41aea6:	f002 ff79 	bl	41dd9c <.LFE96>

0041aeaa <.LVL1189>:
  41aeaa:	4604      	mov	r4, r0

0041aeac <.LVL1190>:
    int sLeadingZero = mp_leading_bit(s);
  41aeac:	4630      	mov	r0, r6

0041aeae <.LVL1191>:
  41aeae:	f002 ff75 	bl	41dd9c <.LFE96>

0041aeb2 <.LVL1192>:
  41aeb2:	4681      	mov	r9, r0

0041aeb4 <.LVL1193>:
    int rLen = mp_unsigned_bin_size(r);   /* big int size */
  41aeb4:	4628      	mov	r0, r5

0041aeb6 <.LVL1194>:
  41aeb6:	f002 ff59 	bl	41dd6c <.LFE82>

0041aeba <.LVL1195>:
  41aeba:	4682      	mov	sl, r0

0041aebc <.LVL1196>:
    int sLen = mp_unsigned_bin_size(s);
  41aebc:	4630      	mov	r0, r6

0041aebe <.LVL1197>:
  41aebe:	f002 ff55 	bl	41dd6c <.LFE82>

0041aec2 <.LVL1198>:

    if (*outLen < (rLen + rLeadingZero + sLen + sLeadingZero +
  41aec2:	4454      	add	r4, sl

0041aec4 <.LVL1199>:
  41aec4:	4404      	add	r4, r0
  41aec6:	eb04 0309 	add.w	r3, r4, r9
  41aeca:	1d18      	adds	r0, r3, #4

0041aecc <.LVL1200>:
                   headerSz + 2))  /* SEQ_TAG + LEN(ENUM) */
  41aecc:	3306      	adds	r3, #6
    if (*outLen < (rLen + rLeadingZero + sLen + sLeadingZero +
  41aece:	f8d8 2000 	ldr.w	r2, [r8]
  41aed2:	429a      	cmp	r2, r3
  41aed4:	d31a      	bcc.n	41af0c <.LVL1211>
        return BUFFER_E;

    idx = SetSequence(rLen + rLeadingZero + sLen+sLeadingZero + headerSz, out);
  41aed6:	4639      	mov	r1, r7
  41aed8:	f002 fdca 	bl	41da70 <.LFE94>

0041aedc <.LVL1201>:
  41aedc:	4604      	mov	r4, r0

0041aede <.LVL1202>:

    /* store r */
    rSz = SetASNIntMP(r, -1, &out[idx]);
  41aede:	183a      	adds	r2, r7, r0
  41aee0:	f04f 31ff 	mov.w	r1, #4294967295
  41aee4:	4628      	mov	r0, r5

0041aee6 <.LVL1203>:
  41aee6:	f000 fa6b 	bl	41b3c0 <SetASNIntMP>

0041aeea <.LVL1204>:
    if (rSz < 0)
  41aeea:	2800      	cmp	r0, #0
  41aeec:	db10      	blt.n	41af10 <.LVL1212>
        return rSz;
    idx += rSz;
  41aeee:	4404      	add	r4, r0

    /* store s */
    sSz = SetASNIntMP(s, -1, &out[idx]);
  41aef0:	193a      	adds	r2, r7, r4
  41aef2:	f04f 31ff 	mov.w	r1, #4294967295
  41aef6:	4630      	mov	r0, r6

0041aef8 <.LVL1206>:
  41aef8:	f000 fa62 	bl	41b3c0 <SetASNIntMP>

0041aefc <.LVL1207>:
    if (sSz < 0)
  41aefc:	2800      	cmp	r0, #0
  41aefe:	db07      	blt.n	41af10 <.LVL1212>

0041af00 <.LVL1208>:
        return sSz;
    idx += sSz;
  41af00:	4420      	add	r0, r4

0041af02 <.LVL1209>:

    *outLen = idx;
  41af02:	f8c8 0000 	str.w	r0, [r8]

    return 0;
  41af06:	2000      	movs	r0, #0

0041af08 <.LVL1210>:
  41af08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0041af0c <.LVL1211>:
        return BUFFER_E;
  41af0c:	f06f 0083 	mvn.w	r0, #131	; 0x83

0041af10 <.LVL1212>:
}
  41af10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

Disassembly of section .text.frexp%198:

0041af18 <frexp>:
  41af18:	b430      	push	{r4, r5}

0041af1a <.LCFI0>:
  41af1a:	b082      	sub	sp, #8

0041af1c <.LCFI1>:
  41af1c:	ed8d 0b00 	vstr	d0, [sp]

0041af20 <.LBB2>:
  41af20:	9b01      	ldr	r3, [sp, #4]

0041af22 <.LBE2>:
  41af22:	4c1b      	ldr	r4, [pc, #108]	; (41af90 <.LVL14+0x12>)

0041af24 <.LBB3>:
  41af24:	9d00      	ldr	r5, [sp, #0]

0041af26 <.LBE3>:
  41af26:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000

0041af2a <.LVL3>:
  41af2a:	2200      	movs	r2, #0
  41af2c:	42a1      	cmp	r1, r4
  41af2e:	6002      	str	r2, [r0, #0]
  41af30:	dc17      	bgt.n	41af62 <.LBE6+0x4>
  41af32:	ea55 0401 	orrs.w	r4, r5, r1
  41af36:	d014      	beq.n	41af62 <.LBE6+0x4>
  41af38:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  41af3c:	db16      	blt.n	41af6c <.LCFI4>
  41af3e:	4615      	mov	r5, r2

0041af40 <.LVL4>:
  41af40:	f023 44ff 	bic.w	r4, r3, #2139095040	; 0x7f800000
  41af44:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000

0041af48 <.LBB4>:
  41af48:	e9dd 2300 	ldrd	r2, r3, [sp]
  41af4c:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000

0041af50 <.LBE4>:
  41af50:	1509      	asrs	r1, r1, #20

0041af52 <.LBB5>:
  41af52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000

0041af56 <.LBE5>:
  41af56:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe

0041af5a <.LBB6>:
  41af5a:	e9cd 2300 	strd	r2, r3, [sp]

0041af5e <.LBE6>:
  41af5e:	4429      	add	r1, r5
  41af60:	6001      	str	r1, [r0, #0]
  41af62:	ed9d 0b00 	vldr	d0, [sp]
  41af66:	b002      	add	sp, #8

0041af68 <.LCFI2>:
  41af68:	bc30      	pop	{r4, r5}

0041af6a <.LCFI3>:
  41af6a:	4770      	bx	lr

0041af6c <.LCFI4>:
  41af6c:	ed9f 7b06 	vldr	d7, [pc, #24]	; 41af88 <.LVL14+0xa>
  41af70:	ee20 7b07 	vmul.f64	d7, d0, d7
  41af74:	ed8d 7b00 	vstr	d7, [sp]

0041af78 <.LBB7>:
  41af78:	9b01      	ldr	r3, [sp, #4]

0041af7a <.LBE7>:
  41af7a:	f06f 0535 	mvn.w	r5, #53	; 0x35

0041af7e <.LVL14>:
  41af7e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
  41af82:	e7dd      	b.n	41af40 <.LVL4>
  41af84:	f3af 8000 	nop.w
  41af88:	00000000 	.word	0x00000000
  41af8c:	43500000 	.word	0x43500000
  41af90:	7fefffff 	.word	0x7fefffff

Disassembly of section .text.deflateReset%199:

0041af94 <deflateReset>:
{
  41af94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041af96 <.LCFI16>:
  41af96:	4604      	mov	r4, r0
    ret = deflateResetKeep(strm);
  41af98:	f7ff fec2 	bl	41ad20 <.LFE206>

0041af9c <.LVL284>:
    if (ret == Z_OK)
  41af9c:	4606      	mov	r6, r0
  41af9e:	b108      	cbz	r0, 41afa4 <.LVL286>

0041afa0 <.LVL285>:
}
  41afa0:	4630      	mov	r0, r6
  41afa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041afa4 <.LVL286>:
        lm_init(strm->state);
  41afa4:	69e4      	ldr	r4, [r4, #28]

0041afa6 <.LBB28>:
    s->window_size = (ulg)2L*s->w_size;
  41afa6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  41afa8:	005b      	lsls	r3, r3, #1
  41afaa:	63e3      	str	r3, [r4, #60]	; 0x3c
    CLEAR_HASH(s);
  41afac:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
  41afb0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  41afb2:	4413      	add	r3, r2
  41afb4:	6c61      	ldr	r1, [r4, #68]	; 0x44
  41afb6:	2500      	movs	r5, #0
  41afb8:	f821 5013 	strh.w	r5, [r1, r3, lsl #1]
  41afbc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  41afbe:	441a      	add	r2, r3
  41afc0:	0052      	lsls	r2, r2, #1
  41afc2:	4629      	mov	r1, r5
  41afc4:	6c60      	ldr	r0, [r4, #68]	; 0x44

0041afc6 <.LVL288>:
  41afc6:	f7fe feeb 	bl	419da0 <.LFE166>

0041afca <.LVL289>:
    s->max_lazy_match   = configuration_table[s->level].max_lazy;
  41afca:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  41afce:	4b0e      	ldr	r3, [pc, #56]	; (41b008 <.LBE28+0x2>)
  41afd0:	0042      	lsls	r2, r0, #1
  41afd2:	1811      	adds	r1, r2, r0
  41afd4:	0089      	lsls	r1, r1, #2
  41afd6:	185f      	adds	r7, r3, r1
  41afd8:	f8b7 e002 	ldrh.w	lr, [r7, #2]
  41afdc:	f8c4 e080 	str.w	lr, [r4, #128]	; 0x80
    s->good_match       = configuration_table[s->level].good_length;
  41afe0:	5a59      	ldrh	r1, [r3, r1]
  41afe2:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    s->nice_match       = configuration_table[s->level].nice_length;
  41afe6:	88b9      	ldrh	r1, [r7, #4]
  41afe8:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    s->max_chain_length = configuration_table[s->level].max_chain;
  41afec:	88fb      	ldrh	r3, [r7, #6]
  41afee:	67e3      	str	r3, [r4, #124]	; 0x7c
    s->strstart = 0;
  41aff0:	66e5      	str	r5, [r4, #108]	; 0x6c
    s->block_start = 0L;
  41aff2:	65e5      	str	r5, [r4, #92]	; 0x5c
    s->lookahead = 0;
  41aff4:	6765      	str	r5, [r4, #116]	; 0x74
    s->insert = 0;
  41aff6:	f241 63b4 	movw	r3, #5812	; 0x16b4
  41affa:	50e5      	str	r5, [r4, r3]
    s->match_length = s->prev_length = MIN_MATCH-1;
  41affc:	2302      	movs	r3, #2
  41affe:	67a3      	str	r3, [r4, #120]	; 0x78
  41b000:	6623      	str	r3, [r4, #96]	; 0x60
    s->match_available = 0;
  41b002:	66a5      	str	r5, [r4, #104]	; 0x68
    s->ins_h = 0;
  41b004:	64a5      	str	r5, [r4, #72]	; 0x48

0041b006 <.LBE28>:
    return ret;
  41b006:	e7cb      	b.n	41afa0 <.LVL285>
  41b008:	0041b00c 	.word	0x0041b00c

Disassembly of section .rodata.configuration_table%200:

0041b00c <configuration_table>:
	...
  41b014:	004162cd 00040004 00040008 00413449     .bA.........I4A.
  41b024:	00050004 00080010 00413449 00060004     ........I4A.....
  41b034:	00200020 00413449 00040004 00100010      . .I4A.........
  41b044:	00411dc9 00100008 00200020 00411dc9     ..A..... . ...A.
  41b054:	00100008 00800080 00411dc9 00200008     ..........A... .
  41b064:	01000080 00411dc9 00800020 04000102     ......A. .......
  41b074:	00411dc9 01020020 10000102 00411dc9     ..A. .........A.

Disassembly of section .rodata.base_dist%201:

0041b084 <base_dist>:
  41b084:	00000000 00000001 00000002 00000003     ................
  41b094:	00000004 00000006 00000008 0000000c     ................
  41b0a4:	00000010 00000018 00000020 00000030     ........ ...0...
  41b0b4:	00000040 00000060 00000080 000000c0     @...`...........
  41b0c4:	00000100 00000180 00000200 00000300     ................
  41b0d4:	00000400 00000600 00000800 00000c00     ................
  41b0e4:	00001000 00001800 00002000 00003000     ......... ...0..
  41b0f4:	00004000 00006000                       .@...`..

Disassembly of section .rodata.extra_dbits%202:

0041b0fc <extra_dbits>:
	...
  41b10c:	00000001 00000001 00000002 00000002     ................
  41b11c:	00000003 00000003 00000004 00000004     ................
  41b12c:	00000005 00000005 00000006 00000006     ................
  41b13c:	00000007 00000007 00000008 00000008     ................
  41b14c:	00000009 00000009 0000000a 0000000a     ................
  41b15c:	0000000b 0000000b 0000000c 0000000c     ................
  41b16c:	0000000d 0000000d                       ........

Disassembly of section .rodata.static_dtree%203:

0041b174 <static_dtree>:
  41b174:	00050000 00050010 00050008 00050018     ................
  41b184:	00050004 00050014 0005000c 0005001c     ................
  41b194:	00050002 00050012 0005000a 0005001a     ................
  41b1a4:	00050006 00050016 0005000e 0005001e     ................
  41b1b4:	00050001 00050011 00050009 00050019     ................
  41b1c4:	00050005 00050015 0005000d 0005001d     ................
  41b1d4:	00050003 00050013 0005000b 0005001b     ................
  41b1e4:	00050007 00050017                       ........

Disassembly of section .text.wc_Des3_SetKey%204:

0041b1ec <wc_Des3_SetKey>:
    {
  41b1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041b1ee <.LCFI18>:
        if (des == NULL || key == NULL || dir < 0) {
  41b1ee:	460f      	mov	r7, r1
  41b1f0:	fab1 f181 	clz	r1, r1

0041b1f4 <.LVL259>:
  41b1f4:	0949      	lsrs	r1, r1, #5
  41b1f6:	ea51 71d3 	orrs.w	r1, r1, r3, lsr #31
  41b1fa:	d12f      	bne.n	41b25c <.LVL271>
  41b1fc:	b370      	cbz	r0, 41b25c <.LVL271>
  41b1fe:	461c      	mov	r4, r3
  41b200:	4616      	mov	r6, r2
  41b202:	4605      	mov	r5, r0
        ret = DesSetKey(key + (dir == DES_ENCRYPTION ? 0:16), dir, des->key[0]);
  41b204:	2b00      	cmp	r3, #0
  41b206:	bf0c      	ite	eq
  41b208:	2000      	moveq	r0, #0

0041b20a <.LVL260>:
  41b20a:	2010      	movne	r0, #16
  41b20c:	462a      	mov	r2, r5

0041b20e <.LVL261>:
  41b20e:	4619      	mov	r1, r3
  41b210:	4438      	add	r0, r7
  41b212:	f7fa feff 	bl	416014 <.LFE179>

0041b216 <.LVL262>:
        if (ret != 0)
  41b216:	4603      	mov	r3, r0
  41b218:	b108      	cbz	r0, 41b21e <.LVL264>

0041b21a <.LVL263>:
    }
  41b21a:	4618      	mov	r0, r3
  41b21c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041b21e <.LVL264>:
        ret = DesSetKey(key + 8, !dir, des->key[1]);
  41b21e:	f105 0280 	add.w	r2, r5, #128	; 0x80
  41b222:	fab4 f184 	clz	r1, r4
  41b226:	0949      	lsrs	r1, r1, #5
  41b228:	f107 0008 	add.w	r0, r7, #8

0041b22c <.LVL265>:
  41b22c:	f7fa fef2 	bl	416014 <.LFE179>

0041b230 <.LVL266>:
        if (ret != 0)
  41b230:	4603      	mov	r3, r0
  41b232:	2800      	cmp	r0, #0
  41b234:	d1f1      	bne.n	41b21a <.LVL263>
        ret = DesSetKey(key + (dir == DES_DECRYPTION ? 0:16), dir, des->key[2]);
  41b236:	2c01      	cmp	r4, #1
  41b238:	bf0c      	ite	eq
  41b23a:	2000      	moveq	r0, #0

0041b23c <.LVL267>:
  41b23c:	2010      	movne	r0, #16
  41b23e:	f505 7280 	add.w	r2, r5, #256	; 0x100
  41b242:	4621      	mov	r1, r4
  41b244:	4438      	add	r0, r7
  41b246:	f7fa fee5 	bl	416014 <.LFE179>

0041b24a <.LVL268>:
        if (ret != 0)
  41b24a:	4603      	mov	r3, r0
  41b24c:	2800      	cmp	r0, #0
  41b24e:	d1e4      	bne.n	41b21a <.LVL263>
        return wc_Des3_SetIV(des, iv);
  41b250:	4631      	mov	r1, r6
  41b252:	4628      	mov	r0, r5

0041b254 <.LVL269>:
  41b254:	f001 ffdc 	bl	41d210 <.LFE106>

0041b258 <.LVL270>:
  41b258:	4603      	mov	r3, r0
  41b25a:	e7de      	b.n	41b21a <.LVL263>

0041b25c <.LVL271>:
            return BAD_FUNC_ARG;
  41b25c:	f06f 03ac 	mvn.w	r3, #172	; 0xac

0041b260 <.LVL272>:
  41b260:	e7db      	b.n	41b21a <.LVL263>

Disassembly of section .text.CLK_Initialize%205:

0041b264 <CLK_Initialize>:
Clock Initialize
*********************************************************************************/
void CLK_Initialize( void )
{
    /* Set Flash Wait States and  Enable Code Loop Optimization */
    EFC_REGS->EEFC_FMR = EEFC_FMR_FWS(6) | EEFC_FMR_CLOE_Msk;
  41b264:	4a17      	ldr	r2, [pc, #92]	; (41b2c4 <.LBE8+0xa>)
  41b266:	4b18      	ldr	r3, [pc, #96]	; (41b2c8 <.LBE8+0xe>)
  41b268:	601a      	str	r2, [r3, #0]

0041b26a <.LBB6>:
    PMC_REGS->CKGR_PLLAR = CKGR_PLLAR_ONE_Msk | CKGR_PLLAR_PLLACOUNT(0x3f) |
  41b26a:	4a18      	ldr	r2, [pc, #96]	; (41b2cc <.LBE8+0x12>)
  41b26c:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  41b270:	629a      	str	r2, [r3, #40]	; 0x28
    while ( (PMC_REGS->PMC_SR & PMC_SR_LOCKA_Msk) != PMC_SR_LOCKA_Msk);
  41b272:	461a      	mov	r2, r3
  41b274:	6e93      	ldr	r3, [r2, #104]	; 0x68
  41b276:	f013 0f02 	tst.w	r3, #2
  41b27a:	d0fb      	beq.n	41b274 <.LBB6+0xa>

0041b27c <.LBB8>:
    PMC_REGS->PMC_MCKR = (PMC_REGS->PMC_MCKR & ~PMC_MCKR_PRES_Msk) | PMC_MCKR_PRES_CLK_1;
  41b27c:	4a14      	ldr	r2, [pc, #80]	; (41b2d0 <.LBE8+0x16>)
  41b27e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  41b280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  41b284:	6313      	str	r3, [r2, #48]	; 0x30
    while ((PMC_REGS->PMC_SR & PMC_SR_MCKRDY_Msk) != PMC_SR_MCKRDY_Msk);
  41b286:	6e93      	ldr	r3, [r2, #104]	; 0x68
  41b288:	f013 0f08 	tst.w	r3, #8
  41b28c:	d0fb      	beq.n	41b286 <.LBB8+0xa>
    PMC_REGS->PMC_MCKR = (PMC_REGS->PMC_MCKR & ~PMC_MCKR_MDIV_Msk) | PMC_MCKR_MDIV_PCK_DIV2;
  41b28e:	4a10      	ldr	r2, [pc, #64]	; (41b2d0 <.LBE8+0x16>)
  41b290:	6b13      	ldr	r3, [r2, #48]	; 0x30
  41b292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  41b296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  41b29a:	6313      	str	r3, [r2, #48]	; 0x30
    while ((PMC_REGS->PMC_SR & PMC_SR_MCKRDY_Msk) != PMC_SR_MCKRDY_Msk);
  41b29c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  41b29e:	f013 0f08 	tst.w	r3, #8
  41b2a2:	d0fb      	beq.n	41b29c <.LBB8+0x20>
    PMC_REGS->PMC_MCKR = (PMC_REGS->PMC_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_PLLA_CLK;
  41b2a4:	4a0a      	ldr	r2, [pc, #40]	; (41b2d0 <.LBE8+0x16>)
  41b2a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  41b2a8:	f023 0303 	bic.w	r3, r3, #3
  41b2ac:	f043 0302 	orr.w	r3, r3, #2
  41b2b0:	6313      	str	r3, [r2, #48]	; 0x30
    while ((PMC_REGS->PMC_SR & PMC_SR_MCKRDY_Msk) != PMC_SR_MCKRDY_Msk);
  41b2b2:	6e93      	ldr	r3, [r2, #104]	; 0x68
  41b2b4:	f013 0f08 	tst.w	r3, #8
  41b2b8:	d0fb      	beq.n	41b2b2 <.LBB8+0x36>

0041b2ba <.LBE8>:




    /* Enable Peripheral Clock */
    PMC_REGS->PMC_PCER0=0x835c00;
  41b2ba:	4a06      	ldr	r2, [pc, #24]	; (41b2d4 <.LBE8+0x1a>)
  41b2bc:	4b04      	ldr	r3, [pc, #16]	; (41b2d0 <.LBE8+0x16>)
  41b2be:	611a      	str	r2, [r3, #16]
  41b2c0:	4770      	bx	lr
  41b2c2:	bf00      	nop
  41b2c4:	04000600 	.word	0x04000600
  41b2c8:	400e0c00 	.word	0x400e0c00
  41b2cc:	20183f01 	.word	0x20183f01
  41b2d0:	400e0600 	.word	0x400e0600
  41b2d4:	00835c00 	.word	0x00835c00

Disassembly of section .rodata.base_length%206:

0041b2d8 <base_length>:
  41b2d8:	00000000 00000001 00000002 00000003     ................
  41b2e8:	00000004 00000005 00000006 00000007     ................
  41b2f8:	00000008 0000000a 0000000c 0000000e     ................
  41b308:	00000010 00000014 00000018 0000001c     ................
  41b318:	00000020 00000028 00000030 00000038      ...(...0...8...
  41b328:	00000040 00000050 00000060 00000070     @...P...`...p...
  41b338:	00000080 000000a0 000000c0 000000e0     ................
  41b348:	00000000                                ....

Disassembly of section .rodata.extra_lbits%207:

0041b34c <extra_lbits>:
	...
  41b36c:	00000001 00000001 00000001 00000001     ................
  41b37c:	00000002 00000002 00000002 00000002     ................
  41b38c:	00000003 00000003 00000003 00000003     ................
  41b39c:	00000004 00000004 00000004 00000004     ................
  41b3ac:	00000005 00000005 00000005 00000005     ................
  41b3bc:	00000000                                ....

Disassembly of section .text.SetASNIntMP%208:

0041b3c0 <SetASNIntMP>:
{
  41b3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0041b3c4 <.LCFI105>:
  41b3c4:	4606      	mov	r6, r0
  41b3c6:	460f      	mov	r7, r1
  41b3c8:	4615      	mov	r5, r2

0041b3ca <.LVL552>:
    leadingBit = mp_leading_bit(n);
  41b3ca:	f002 fce7 	bl	41dd9c <.LFE96>

0041b3ce <.LVL553>:
  41b3ce:	4680      	mov	r8, r0

0041b3d0 <.LVL554>:
    length = mp_unsigned_bin_size(n);
  41b3d0:	4630      	mov	r0, r6

0041b3d2 <.LVL555>:
  41b3d2:	f002 fccb 	bl	41dd6c <.LFE82>

0041b3d6 <.LVL556>:
  41b3d6:	4604      	mov	r4, r0

0041b3d8 <.LVL557>:
    idx = SetASNInt(length, leadingBit ? 0x80 : 0x00, output);
  41b3d8:	f1b8 0f00 	cmp.w	r8, #0
  41b3dc:	d11d      	bne.n	41b41a <.LBB177>

0041b3de <.LBB174>:
    output[idx++] = ASN_INTEGER;
  41b3de:	4629      	mov	r1, r5
  41b3e0:	2302      	movs	r3, #2
  41b3e2:	f801 3b01 	strb.w	r3, [r1], #1
    idx += SetLength(len, output + idx);
  41b3e6:	f000 fe5c 	bl	41c0a2 <.LFE193>

0041b3ea <.LVL559>:
  41b3ea:	1c41      	adds	r1, r0, #1

0041b3ec <.LVL560>:
    return idx;
  41b3ec:	4688      	mov	r8, r1

0041b3ee <.LBE174>:
    if (maxSz >= 0 && (idx + length) > maxSz)
  41b3ee:	2f00      	cmp	r7, #0
  41b3f0:	db02      	blt.n	41b3f8 <.LBE174+0xa>
  41b3f2:	1863      	adds	r3, r4, r1
  41b3f4:	429f      	cmp	r7, r3
  41b3f6:	db08      	blt.n	41b40a <.LVL564>
    err = mp_to_unsigned_bin(n, output + idx);
  41b3f8:	4429      	add	r1, r5
  41b3fa:	4630      	mov	r0, r6
  41b3fc:	f002 fc50 	bl	41dca0 <.LFE73>

0041b400 <.LVL562>:
    if (err != MP_OKAY)
  41b400:	b938      	cbnz	r0, 41b412 <.LVL565>
    idx += length;
  41b402:	eb04 0008 	add.w	r0, r4, r8

0041b406 <.LVL563>:
    return idx;
  41b406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041b40a <.LVL564>:
        return BUFFER_E;
  41b40a:	f06f 0083 	mvn.w	r0, #131	; 0x83
  41b40e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041b412 <.LVL565>:
        return MP_TO_E;
  41b412:	f06f 0070 	mvn.w	r0, #112	; 0x70

0041b416 <.LVL566>:
  41b416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041b41a <.LBB177>:
    output[idx++] = ASN_INTEGER;
  41b41a:	4629      	mov	r1, r5
  41b41c:	2302      	movs	r3, #2
  41b41e:	f801 3b01 	strb.w	r3, [r1], #1

0041b422 <.LVL568>:
    idx += SetLength(len, output + idx);
  41b422:	3001      	adds	r0, #1

0041b424 <.LVL569>:
  41b424:	f000 fe3d 	bl	41c0a2 <.LFE193>

0041b428 <.LVL570>:
        output[idx++] = 0x00;
  41b428:	1c81      	adds	r1, r0, #2

0041b42a <.LVL571>:
  41b42a:	4428      	add	r0, r5
  41b42c:	2300      	movs	r3, #0
  41b42e:	7043      	strb	r3, [r0, #1]
  41b430:	e7dc      	b.n	41b3ec <.LVL560>

Disassembly of section .text.RsaMGF%209:

0041b432 <RsaMGF>:
{
  41b432:	b500      	push	{lr}

0041b434 <.LCFI6>:
  41b434:	b083      	sub	sp, #12

0041b436 <.LCFI7>:
    switch(type) {
  41b436:	3801      	subs	r0, #1

0041b438 <.LVL39>:
  41b438:	2819      	cmp	r0, #25
  41b43a:	d830      	bhi.n	41b49e <.LVL48>
  41b43c:	e8df f000 	tbb	[pc, r0]
  41b440:	2f271f17 	.word	0x2f271f17
  41b444:	2f2f2f2f 	.word	0x2f2f2f2f
  41b448:	2f2f2f2f 	.word	0x2f2f2f2f
  41b44c:	2f2f2f2f 	.word	0x2f2f2f2f
  41b450:	2f2f2f2f 	.word	0x2f2f2f2f
  41b454:	2f2f2f2f 	.word	0x2f2f2f2f
  41b458:	0d2f      	.short	0x0d2f
            ret = RsaMGF1(WC_HASH_TYPE_SHA, seed, seedSz, out, outSz, heap);
  41b45a:	9805      	ldr	r0, [sp, #20]

0041b45c <.LVL40>:
  41b45c:	9001      	str	r0, [sp, #4]
  41b45e:	9804      	ldr	r0, [sp, #16]
  41b460:	9000      	str	r0, [sp, #0]
  41b462:	2004      	movs	r0, #4
  41b464:	f7fc f930 	bl	4176c8 <.LFE18>

0041b468 <.LVL41>:
}
  41b468:	b003      	add	sp, #12

0041b46a <.LCFI8>:
  41b46a:	f85d fb04 	ldr.w	pc, [sp], #4

0041b46e <.LCFI9>:
            ret = RsaMGF1(WC_HASH_TYPE_SHA256, seed, seedSz, out, outSz, heap);
  41b46e:	9805      	ldr	r0, [sp, #20]
  41b470:	9001      	str	r0, [sp, #4]
  41b472:	9804      	ldr	r0, [sp, #16]
  41b474:	9000      	str	r0, [sp, #0]
  41b476:	2005      	movs	r0, #5
  41b478:	f7fc f926 	bl	4176c8 <.LFE18>

0041b47c <.LVL43>:
            break;
  41b47c:	e7f4      	b.n	41b468 <.LVL41>

0041b47e <.LVL44>:
            ret = RsaMGF1(WC_HASH_TYPE_SHA384, seed, seedSz, out, outSz, heap);
  41b47e:	9805      	ldr	r0, [sp, #20]
  41b480:	9001      	str	r0, [sp, #4]
  41b482:	9804      	ldr	r0, [sp, #16]
  41b484:	9000      	str	r0, [sp, #0]
  41b486:	2006      	movs	r0, #6
  41b488:	f7fc f91e 	bl	4176c8 <.LFE18>

0041b48c <.LVL45>:
            break;
  41b48c:	e7ec      	b.n	41b468 <.LVL41>

0041b48e <.LVL46>:
            ret = RsaMGF1(WC_HASH_TYPE_SHA512, seed, seedSz, out, outSz, heap);
  41b48e:	9805      	ldr	r0, [sp, #20]
  41b490:	9001      	str	r0, [sp, #4]
  41b492:	9804      	ldr	r0, [sp, #16]
  41b494:	9000      	str	r0, [sp, #0]
  41b496:	2007      	movs	r0, #7
  41b498:	f7fc f916 	bl	4176c8 <.LFE18>

0041b49c <.LVL47>:
            break;
  41b49c:	e7e4      	b.n	41b468 <.LVL41>

0041b49e <.LVL48>:
            ret = BAD_FUNC_ARG;
  41b49e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041b4a2 <.LVL49>:
    return ret;
  41b4a2:	e7e1      	b.n	41b468 <.LVL41>

Disassembly of section .text.wc_ecc_set_curve%210:

0041b4a4 <wc_ecc_set_curve>:
{
  41b4a4:	b470      	push	{r4, r5, r6}

0041b4a6 <.LCFI8>:
    if (keysize <= 0 && curve_id < 0) {
  41b4a6:	460e      	mov	r6, r1
  41b4a8:	2900      	cmp	r1, #0
  41b4aa:	dc01      	bgt.n	41b4b0 <.LCFI8+0xa>
  41b4ac:	2a00      	cmp	r2, #0
  41b4ae:	db23      	blt.n	41b4f8 <.LBE18>
    if (keysize > ECC_MAXSIZE) {
  41b4b0:	2e42      	cmp	r6, #66	; 0x42
  41b4b2:	dc24      	bgt.n	41b4fe <.LVL81>
    if (key->idx != ECC_CUSTOM_IDX) {
  41b4b4:	6843      	ldr	r3, [r0, #4]
  41b4b6:	f1b3 3fff 	cmp.w	r3, #4294967295
  41b4ba:	d023      	beq.n	41b504 <.LVL83>

0041b4bc <.LBB17>:
        key->idx = 0;
  41b4bc:	2100      	movs	r1, #0

0041b4be <.LVL68>:
  41b4be:	6041      	str	r1, [r0, #4]
        key->dp = NULL;
  41b4c0:	6101      	str	r1, [r0, #16]

0041b4c2 <.LVL69>:
  41b4c2:	4b13      	ldr	r3, [pc, #76]	; (41b510 <.LVL86+0x4>)
  41b4c4:	240e      	movs	r4, #14
  41b4c6:	e005      	b.n	41b4d4 <.LVL70+0xc>

0041b4c8 <.LVL70>:
            else if (keysize <= ecc_sets[x].size) {
  41b4c8:	42a6      	cmp	r6, r4
  41b4ca:	dd08      	ble.n	41b4de <.LVL70+0x16>
        for (x = 0; ecc_sets[x].size != 0; x++) {
  41b4cc:	3101      	adds	r1, #1
  41b4ce:	f853 4f34 	ldr.w	r4, [r3, #52]!
  41b4d2:	b174      	cbz	r4, 41b4f2 <.LBB18>
            if (curve_id > ECC_CURVE_DEF) {
  41b4d4:	2a00      	cmp	r2, #0
  41b4d6:	ddf7      	ble.n	41b4c8 <.LVL70>
                if (curve_id == ecc_sets[x].id)
  41b4d8:	685d      	ldr	r5, [r3, #4]
  41b4da:	42aa      	cmp	r2, r5
  41b4dc:	d1f6      	bne.n	41b4cc <.LVL70+0x4>
        if (ecc_sets[x].size == 0) {
  41b4de:	b19c      	cbz	r4, 41b508 <.LBB19>
        key->idx = x;
  41b4e0:	6041      	str	r1, [r0, #4]
        key->dp  = &ecc_sets[x];
  41b4e2:	2234      	movs	r2, #52	; 0x34

0041b4e4 <.LVL73>:
  41b4e4:	4b0a      	ldr	r3, [pc, #40]	; (41b510 <.LVL86+0x4>)
  41b4e6:	fb02 3101 	mla	r1, r2, r1, r3

0041b4ea <.LVL74>:
  41b4ea:	6101      	str	r1, [r0, #16]

0041b4ec <.LBE17>:
    return 0;
  41b4ec:	2000      	movs	r0, #0

0041b4ee <.LVL75>:
}
  41b4ee:	bc70      	pop	{r4, r5, r6}

0041b4f0 <.LCFI9>:
  41b4f0:	4770      	bx	lr

0041b4f2 <.LBB18>:
            return ECC_CURVE_OID_E;
  41b4f2:	f06f 00ab 	mvn.w	r0, #171	; 0xab

0041b4f6 <.LVL78>:
  41b4f6:	e7fa      	b.n	41b4ee <.LVL75>

0041b4f8 <.LBE18>:
        return BAD_FUNC_ARG;
  41b4f8:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041b4fc <.LVL80>:
  41b4fc:	e7f7      	b.n	41b4ee <.LVL75>

0041b4fe <.LVL81>:
        return ECC_BAD_ARG_E;
  41b4fe:	f06f 00a9 	mvn.w	r0, #169	; 0xa9

0041b502 <.LVL82>:
  41b502:	e7f4      	b.n	41b4ee <.LVL75>

0041b504 <.LVL83>:
    return 0;
  41b504:	2000      	movs	r0, #0

0041b506 <.LVL84>:
  41b506:	e7f2      	b.n	41b4ee <.LVL75>

0041b508 <.LBB19>:
            return ECC_CURVE_OID_E;
  41b508:	f06f 00ab 	mvn.w	r0, #171	; 0xab

0041b50c <.LVL86>:
  41b50c:	e7ef      	b.n	41b4ee <.LVL75>
  41b50e:	bf00      	nop
  41b510:	004145f8 	.word	0x004145f8

Disassembly of section .text.wc_ecc_shared_secret%211:

0041b514 <wc_ecc_shared_secret>:
   if (private_key == NULL || public_key == NULL || out == NULL ||
  41b514:	2800      	cmp	r0, #0
  41b516:	d032      	beq.n	41b57e <.LCFI64>
{
  41b518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041b51a <.LCFI63>:
  41b51a:	4605      	mov	r5, r0
   if (private_key == NULL || public_key == NULL || out == NULL ||
  41b51c:	b1e9      	cbz	r1, 41b55a <.LVL846>
  41b51e:	b1fa      	cbz	r2, 41b560 <.LVL848>
  41b520:	b1f3      	cbz	r3, 41b560 <.LVL848>
   if (private_key->type != ECC_PRIVATEKEY) {
  41b522:	6800      	ldr	r0, [r0, #0]

0041b524 <.LVL842>:
  41b524:	2802      	cmp	r0, #2
  41b526:	d11e      	bne.n	41b566 <.LVL849+0x2>
  41b528:	461f      	mov	r7, r3
  41b52a:	4616      	mov	r6, r2
  41b52c:	460c      	mov	r4, r1
   if (wc_ecc_is_valid_idx(private_key->idx) == 0 ||
  41b52e:	6868      	ldr	r0, [r5, #4]
  41b530:	f001 ff5c 	bl	41d3ec <wc_ecc_is_valid_idx>

0041b534 <.LVL843>:
  41b534:	b1d0      	cbz	r0, 41b56c <.LVL851>
       wc_ecc_is_valid_idx(public_key->idx)  == 0) {
  41b536:	6860      	ldr	r0, [r4, #4]
  41b538:	f001 ff58 	bl	41d3ec <wc_ecc_is_valid_idx>

0041b53c <.LVL844>:
   if (wc_ecc_is_valid_idx(private_key->idx) == 0 ||
  41b53c:	b1c8      	cbz	r0, 41b572 <.LVL851+0x6>
   if (private_key->dp->id != public_key->dp->id) {
  41b53e:	692a      	ldr	r2, [r5, #16]
  41b540:	6923      	ldr	r3, [r4, #16]
  41b542:	6852      	ldr	r2, [r2, #4]
  41b544:	685b      	ldr	r3, [r3, #4]
  41b546:	429a      	cmp	r2, r3
  41b548:	d116      	bne.n	41b578 <.LVL851+0xc>
   err = wc_ecc_shared_secret_ex(private_key, &public_key->pubkey, out, outlen);
  41b54a:	463b      	mov	r3, r7
  41b54c:	4632      	mov	r2, r6
  41b54e:	f104 0118 	add.w	r1, r4, #24
  41b552:	4628      	mov	r0, r5
  41b554:	f7ff fba5 	bl	41aca2 <.LFE22>

0041b558 <.LVL845>:
   return err;
  41b558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041b55a <.LVL846>:
       return BAD_FUNC_ARG;
  41b55a:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041b55e <.LVL847>:
  41b55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041b560 <.LVL848>:
  41b560:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041b564 <.LVL849>:
  41b564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return ECC_BAD_ARG_E;
  41b566:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
  41b56a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041b56c <.LVL851>:
      return ECC_BAD_ARG_E;
  41b56c:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
  41b570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41b572:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
  41b576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return ECC_BAD_ARG_E;
  41b578:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
}
  41b57c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041b57e <.LCFI64>:
       return BAD_FUNC_ARG;
  41b57e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041b582 <.LVL855>:
}
  41b582:	4770      	bx	lr

Disassembly of section .text.fp_rshb%212:

0041b584 <fp_rshb>:
{
  41b584:	b5f0      	push	{r4, r5, r6, r7, lr}

0041b586 <.LCFI29>:
    mask = (((fp_digit)1) << D) - 1;
  41b586:	2701      	movs	r7, #1
  41b588:	408f      	lsls	r7, r1

0041b58a <.LVL248>:
    tmpc = c->dp + (c->used - 1);
  41b58a:	4604      	mov	r4, r0
  41b58c:	f854 5b08 	ldr.w	r5, [r4], #8
  41b590:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
  41b594:	442b      	add	r3, r5
  41b596:	eb04 0483 	add.w	r4, r4, r3, lsl #2

0041b59a <.LVL249>:
    for (x = c->used - 1; x >= 0; x--) {
  41b59a:	3d01      	subs	r5, #1

0041b59c <.LVL250>:
  41b59c:	d411      	bmi.n	41b5c2 <.LVL259>
  41b59e:	3f01      	subs	r7, #1

0041b5a0 <.LVL251>:
  41b5a0:	f1c1 0e20 	rsb	lr, r1, #32

0041b5a4 <.LVL252>:
  41b5a4:	2300      	movs	r3, #0

0041b5a6 <.LVL253>:
      rr = *tmpc & mask;
  41b5a6:	6826      	ldr	r6, [r4, #0]

0041b5a8 <.LVL254>:
      *tmpc = (*tmpc >> D) | (r << shift);
  41b5a8:	fa26 f201 	lsr.w	r2, r6, r1
  41b5ac:	fa03 f30e 	lsl.w	r3, r3, lr

0041b5b0 <.LVL255>:
  41b5b0:	4313      	orrs	r3, r2
  41b5b2:	f844 3904 	str.w	r3, [r4], #-4

0041b5b6 <.LVL256>:
    for (x = c->used - 1; x >= 0; x--) {
  41b5b6:	3d01      	subs	r5, #1
      rr = *tmpc & mask;
  41b5b8:	ea07 0306 	and.w	r3, r7, r6

0041b5bc <.LVL258>:
    for (x = c->used - 1; x >= 0; x--) {
  41b5bc:	f1b5 3fff 	cmp.w	r5, #4294967295
  41b5c0:	d1f1      	bne.n	41b5a6 <.LVL253>

0041b5c2 <.LVL259>:
    fp_clamp(c);
  41b5c2:	6802      	ldr	r2, [r0, #0]
  41b5c4:	b1a2      	cbz	r2, 41b5f0 <.LVL261+0x18>
  41b5c6:	1e53      	subs	r3, r2, #1
  41b5c8:	1c51      	adds	r1, r2, #1

0041b5ca <.LVL260>:
  41b5ca:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
  41b5ce:	b959      	cbnz	r1, 41b5e8 <.LVL261+0x10>
  41b5d0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  41b5d4:	3204      	adds	r2, #4
  41b5d6:	e000      	b.n	41b5da <.LVL261+0x2>

0041b5d8 <.LVL261>:
  41b5d8:	4623      	mov	r3, r4
  41b5da:	b143      	cbz	r3, 41b5ee <.LVL261+0x16>
  41b5dc:	1e5c      	subs	r4, r3, #1
  41b5de:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  41b5e2:	2900      	cmp	r1, #0
  41b5e4:	d0f8      	beq.n	41b5d8 <.LVL261>
  41b5e6:	6003      	str	r3, [r0, #0]
  41b5e8:	6843      	ldr	r3, [r0, #4]
  41b5ea:	6043      	str	r3, [r0, #4]
}
  41b5ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  41b5ee:	6003      	str	r3, [r0, #0]
    fp_clamp(c);
  41b5f0:	2300      	movs	r3, #0
  41b5f2:	e7fa      	b.n	41b5ea <.LVL261+0x12>

Disassembly of section .text%213:

0041b5f4 <__do_global_dtors_aux>:
  41b5f4:	b510      	push	{r4, lr}
  41b5f6:	4c05      	ldr	r4, [pc, #20]	; (41b60c <.LFE57+0x18>)
  41b5f8:	7823      	ldrb	r3, [r4, #0]
  41b5fa:	b933      	cbnz	r3, 41b60a <__do_global_dtors_aux+0x16>
  41b5fc:	4b04      	ldr	r3, [pc, #16]	; (41b610 <.LFE57+0x1c>)
  41b5fe:	b113      	cbz	r3, 41b606 <__do_global_dtors_aux+0x12>
  41b600:	4804      	ldr	r0, [pc, #16]	; (41b614 <.LFE57+0x20>)
  41b602:	f3af 8000 	nop.w
  41b606:	2301      	movs	r3, #1
  41b608:	7023      	strb	r3, [r4, #0]
  41b60a:	bd10      	pop	{r4, pc}
  41b60c:	2040d6a4 	.word	0x2040d6a4
	...

0041b618 <frame_dummy>:
  41b618:	4b0c      	ldr	r3, [pc, #48]	; (41b64c <frame_dummy+0x34>)
  41b61a:	b143      	cbz	r3, 41b62e <frame_dummy+0x16>
  41b61c:	480c      	ldr	r0, [pc, #48]	; (41b650 <frame_dummy+0x38>)
  41b61e:	490d      	ldr	r1, [pc, #52]	; (41b654 <frame_dummy+0x3c>)
  41b620:	b510      	push	{r4, lr}
  41b622:	f3af 8000 	nop.w
  41b626:	480c      	ldr	r0, [pc, #48]	; (41b658 <frame_dummy+0x40>)
  41b628:	6803      	ldr	r3, [r0, #0]
  41b62a:	b923      	cbnz	r3, 41b636 <frame_dummy+0x1e>
  41b62c:	bd10      	pop	{r4, pc}
  41b62e:	480a      	ldr	r0, [pc, #40]	; (41b658 <frame_dummy+0x40>)
  41b630:	6803      	ldr	r3, [r0, #0]
  41b632:	b933      	cbnz	r3, 41b642 <frame_dummy+0x2a>
  41b634:	4770      	bx	lr
  41b636:	4b09      	ldr	r3, [pc, #36]	; (41b65c <frame_dummy+0x44>)
  41b638:	2b00      	cmp	r3, #0
  41b63a:	d0f7      	beq.n	41b62c <frame_dummy+0x14>
  41b63c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  41b640:	4718      	bx	r3
  41b642:	4b06      	ldr	r3, [pc, #24]	; (41b65c <frame_dummy+0x44>)
  41b644:	2b00      	cmp	r3, #0
  41b646:	d0f5      	beq.n	41b634 <frame_dummy+0x1c>
  41b648:	4718      	bx	r3
  41b64a:	bf00      	nop
	...
  41b654:	2040d6a8 	.word	0x2040d6a8
	...

Disassembly of section .text.fp_read_unsigned_bin%214:

0041b660 <fp_read_unsigned_bin>:
{
  41b660:	b570      	push	{r4, r5, r6, lr}

0041b662 <.LCFI34>:
  41b662:	4605      	mov	r5, r0
  41b664:	460c      	mov	r4, r1
  41b666:	4616      	mov	r6, r2
  fp_zero (a);
  41b668:	f002 f98e 	bl	41d988 <.LFE163>

0041b66c <.LVL283>:
  if (c > 0 && (word32)c > maxC) {
  41b66c:	f5b6 7f08 	cmp.w	r6, #544	; 0x220
  41b670:	dd04      	ble.n	41b67c <.LBB13>

0041b672 <.LBB12>:
     int excess = (c - maxC);
  41b672:	f5a6 7308 	sub.w	r3, r6, #544	; 0x220

0041b676 <.LVL284>:
     c -= excess;
  41b676:	f44f 7608 	mov.w	r6, #544	; 0x220

0041b67a <.LVL285>:
     b += excess;
  41b67a:	441c      	add	r4, r3

0041b67c <.LBB13>:
     unsigned char *pd = (unsigned char *)a->dp;
  41b67c:	f105 0308 	add.w	r3, r5, #8

0041b680 <.LVL287>:
     a->used = (c + sizeof(fp_digit) - 1)/sizeof(fp_digit);
  41b680:	1cf2      	adds	r2, r6, #3
  41b682:	0892      	lsrs	r2, r2, #2
  41b684:	602a      	str	r2, [r5, #0]
     for (c -= 1; c >= 0; c -= 1) {
  41b686:	2e01      	cmp	r6, #1
  41b688:	d407      	bmi.n	41b69a <.LBE13>
  41b68a:	4433      	add	r3, r6

0041b68c <.LVL288>:
  41b68c:	19a2      	adds	r2, r4, r6
       pd[c] = *b++;
  41b68e:	f814 1b01 	ldrb.w	r1, [r4], #1

0041b692 <.LVL289>:
  41b692:	f803 1d01 	strb.w	r1, [r3, #-1]!

0041b696 <.LVL290>:
     for (c -= 1; c >= 0; c -= 1) {
  41b696:	4294      	cmp	r4, r2
  41b698:	d1f9      	bne.n	41b68e <.LVL288+0x2>

0041b69a <.LBE13>:
  fp_clamp (a);
  41b69a:	682a      	ldr	r2, [r5, #0]
  41b69c:	b1a2      	cbz	r2, 41b6c8 <.LBE13+0x2e>
  41b69e:	1e53      	subs	r3, r2, #1
  41b6a0:	1c51      	adds	r1, r2, #1
  41b6a2:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
  41b6a6:	b959      	cbnz	r1, 41b6c0 <.LBE13+0x26>
  41b6a8:	eb05 0282 	add.w	r2, r5, r2, lsl #2
  41b6ac:	3204      	adds	r2, #4
  41b6ae:	e000      	b.n	41b6b2 <.LBE13+0x18>
  41b6b0:	4603      	mov	r3, r0
  41b6b2:	b143      	cbz	r3, 41b6c6 <.LBE13+0x2c>
  41b6b4:	1e58      	subs	r0, r3, #1
  41b6b6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  41b6ba:	2900      	cmp	r1, #0
  41b6bc:	d0f8      	beq.n	41b6b0 <.LBE13+0x16>
  41b6be:	602b      	str	r3, [r5, #0]
  41b6c0:	686b      	ldr	r3, [r5, #4]
  41b6c2:	606b      	str	r3, [r5, #4]
}
  41b6c4:	bd70      	pop	{r4, r5, r6, pc}
  41b6c6:	602b      	str	r3, [r5, #0]
  fp_clamp (a);
  41b6c8:	2300      	movs	r3, #0
  41b6ca:	e7fa      	b.n	41b6c2 <.LBE13+0x28>

Disassembly of section .text._wc_ecc_curve_free%215:

0041b6cc <_wc_ecc_curve_free>:
    if (curve == NULL) {
  41b6cc:	b390      	cbz	r0, 41b734 <.LCFI1>
{
  41b6ce:	b510      	push	{r4, lr}

0041b6d0 <.LCFI0>:
  41b6d0:	4604      	mov	r4, r0
    if (curve->load_mask & ECC_CURVE_FIELD_PRIME)
  41b6d2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
  41b6d6:	f013 0f01 	tst.w	r3, #1
  41b6da:	d117      	bne.n	41b70c <.LVL2>

0041b6dc <.LVL1>:
    if (curve->load_mask & ECC_CURVE_FIELD_AF)
  41b6dc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  41b6e0:	f013 0f02 	tst.w	r3, #2
  41b6e4:	d116      	bne.n	41b714 <.LVL4+0x2>
    if (curve->load_mask & ECC_CURVE_FIELD_ORDER)
  41b6e6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  41b6ea:	f013 0f08 	tst.w	r3, #8
  41b6ee:	d115      	bne.n	41b71c <.LVL5+0x2>
    if (curve->load_mask & ECC_CURVE_FIELD_GX)
  41b6f0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  41b6f4:	f013 0f10 	tst.w	r3, #16
  41b6f8:	d114      	bne.n	41b724 <.LVL6+0x2>
    if (curve->load_mask & ECC_CURVE_FIELD_GY)
  41b6fa:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  41b6fe:	f013 0f20 	tst.w	r3, #32
  41b702:	d113      	bne.n	41b72c <.LVL7+0x2>
    curve->load_mask = 0;
  41b704:	2300      	movs	r3, #0
  41b706:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  41b70a:	bd10      	pop	{r4, pc}

0041b70c <.LVL2>:
        mp_clear(curve->prime);
  41b70c:	6840      	ldr	r0, [r0, #4]

0041b70e <.LVL3>:
  41b70e:	f002 fa66 	bl	41dbde <.LFE179>

0041b712 <.LVL4>:
  41b712:	e7e3      	b.n	41b6dc <.LVL1>
        mp_clear(curve->Af);
  41b714:	68a0      	ldr	r0, [r4, #8]
  41b716:	f002 fa62 	bl	41dbde <.LFE179>

0041b71a <.LVL5>:
  41b71a:	e7e4      	b.n	41b6e6 <.LVL1+0xa>
        mp_clear(curve->order);
  41b71c:	68e0      	ldr	r0, [r4, #12]
  41b71e:	f002 fa5e 	bl	41dbde <.LFE179>

0041b722 <.LVL6>:
  41b722:	e7e5      	b.n	41b6f0 <.LVL1+0x14>
        mp_clear(curve->Gx);
  41b724:	6920      	ldr	r0, [r4, #16]
  41b726:	f002 fa5a 	bl	41dbde <.LFE179>

0041b72a <.LVL7>:
  41b72a:	e7e6      	b.n	41b6fa <.LVL1+0x1e>
        mp_clear(curve->Gy);
  41b72c:	6960      	ldr	r0, [r4, #20]
  41b72e:	f002 fa56 	bl	41dbde <.LFE179>

0041b732 <.LVL8>:
  41b732:	e7e7      	b.n	41b704 <.LVL1+0x28>

0041b734 <.LCFI1>:
  41b734:	4770      	bx	lr

Disassembly of section .text.DecodeECC_DSA_Sig%216:

0041b736 <DecodeECC_DSA_Sig>:


/* Der Decode ECC-DSA Signature, r & s stored as big ints */
int DecodeECC_DSA_Sig(const byte* sig, word32 sigLen, mp_int* r, mp_int* s)
{
  41b736:	b5f0      	push	{r4, r5, r6, r7, lr}

0041b738 <.LCFI149>:
  41b738:	b083      	sub	sp, #12

0041b73a <.LCFI150>:
  41b73a:	4605      	mov	r5, r0
  41b73c:	460c      	mov	r4, r1
  41b73e:	4616      	mov	r6, r2
  41b740:	461f      	mov	r7, r3
    word32 idx = 0;
  41b742:	2300      	movs	r3, #0

0041b744 <.LVL1214>:
  41b744:	9301      	str	r3, [sp, #4]
    int    len = 0;
  41b746:	aa02      	add	r2, sp, #8

0041b748 <.LVL1215>:
  41b748:	f842 3d08 	str.w	r3, [r2, #-8]!

    if (GetSequence(sig, &idx, &len, sigLen) < 0) {
  41b74c:	460b      	mov	r3, r1
  41b74e:	a901      	add	r1, sp, #4

0041b750 <.LVL1216>:
  41b750:	f002 f8ee 	bl	41d930 <.LFE164>

0041b754 <.LVL1217>:
  41b754:	2800      	cmp	r0, #0
  41b756:	db19      	blt.n	41b78c <.LCFI152>
        return ASN_ECC_KEY_E;
    }

    if ((word32)len > (sigLen - idx)) {
  41b758:	9b01      	ldr	r3, [sp, #4]
  41b75a:	1ae3      	subs	r3, r4, r3
  41b75c:	9a00      	ldr	r2, [sp, #0]
  41b75e:	4293      	cmp	r3, r2
  41b760:	d317      	bcc.n	41b792 <.LCFI152+0x6>
        return ASN_ECC_KEY_E;
    }

    if (GetInt(r, sig, &idx, sigLen) < 0) {
  41b762:	4623      	mov	r3, r4
  41b764:	aa01      	add	r2, sp, #4
  41b766:	4629      	mov	r1, r5
  41b768:	4630      	mov	r0, r6
  41b76a:	f000 fc6f 	bl	41c04c <.LFE144>

0041b76e <.LVL1218>:
  41b76e:	2800      	cmp	r0, #0
  41b770:	db12      	blt.n	41b798 <.LCFI152+0xc>
        return ASN_ECC_KEY_E;
    }

    if (GetInt(s, sig, &idx, sigLen) < 0) {
  41b772:	4623      	mov	r3, r4
  41b774:	aa01      	add	r2, sp, #4
  41b776:	4629      	mov	r1, r5
  41b778:	4638      	mov	r0, r7
  41b77a:	f000 fc67 	bl	41c04c <.LFE144>

0041b77e <.LVL1219>:
  41b77e:	2800      	cmp	r0, #0
        return ASN_ECC_KEY_E;
    }

    return 0;
  41b780:	bfb4      	ite	lt
  41b782:	f06f 00aa 	mvnlt.w	r0, #170	; 0xaa
  41b786:	2000      	movge	r0, #0
}
  41b788:	b003      	add	sp, #12

0041b78a <.LCFI151>:
  41b78a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0041b78c <.LCFI152>:
        return ASN_ECC_KEY_E;
  41b78c:	f06f 00aa 	mvn.w	r0, #170	; 0xaa
  41b790:	e7fa      	b.n	41b788 <.LVL1219+0xa>
        return ASN_ECC_KEY_E;
  41b792:	f06f 00aa 	mvn.w	r0, #170	; 0xaa
  41b796:	e7f7      	b.n	41b788 <.LVL1219+0xa>
        return ASN_ECC_KEY_E;
  41b798:	f06f 00aa 	mvn.w	r0, #170	; 0xaa
  41b79c:	e7f4      	b.n	41b788 <.LVL1219+0xa>

Disassembly of section .text.wc_DeCompress%217:

0041b7a0 <wc_DeCompress>:
 *
 * return:
 *    negative - error code
 *    positive - bytes stored in out buffer
 */ 
{
  41b7a0:	b510      	push	{r4, lr}

0041b7a2 <.LCFI7>:
  41b7a2:	b08e      	sub	sp, #56	; 0x38

0041b7a4 <.LCFI8>:
    z_stream stream;
    int result = 0;

    stream.next_in = (Bytef*)in;
  41b7a4:	9200      	str	r2, [sp, #0]
    stream.avail_in = (uInt)inSz;
  41b7a6:	9301      	str	r3, [sp, #4]
    /* Check for source > 64K on 16-bit machine: */
    if ((uLong)stream.avail_in != inSz) return DECOMPRESS_INIT_E;

    stream.next_out = out;
  41b7a8:	9003      	str	r0, [sp, #12]
    stream.avail_out = (uInt)outSz;
  41b7aa:	9104      	str	r1, [sp, #16]
    if ((uLong)stream.avail_out != outSz) return DECOMPRESS_INIT_E;

    stream.zalloc = (alloc_func)myAlloc;
  41b7ac:	4b13      	ldr	r3, [pc, #76]	; (41b7fc <.LVL32+0xe>)

0041b7ae <.LVL22>:
  41b7ae:	9308      	str	r3, [sp, #32]
    stream.zfree = (free_func)myFree;
  41b7b0:	4b13      	ldr	r3, [pc, #76]	; (41b800 <.LVL32+0x12>)
  41b7b2:	9309      	str	r3, [sp, #36]	; 0x24
    stream.opaque = (voidpf)0;
  41b7b4:	2300      	movs	r3, #0
  41b7b6:	930a      	str	r3, [sp, #40]	; 0x28

    if (inflateInit2(&stream, DEFLATE_DEFAULT_WINDOWBITS) != Z_OK)
  41b7b8:	2338      	movs	r3, #56	; 0x38
  41b7ba:	4a12      	ldr	r2, [pc, #72]	; (41b804 <.LVL32+0x16>)

0041b7bc <.LVL23>:
  41b7bc:	210b      	movs	r1, #11

0041b7be <.LVL24>:
  41b7be:	4668      	mov	r0, sp

0041b7c0 <.LVL25>:
  41b7c0:	f7fe fede 	bl	41a580 <.LFE178>

0041b7c4 <.LVL26>:
  41b7c4:	b9b0      	cbnz	r0, 41b7f4 <.LVL32+0x6>
        return DECOMPRESS_INIT_E;

    if (inflate(&stream, Z_FINISH) != Z_STREAM_END) {
  41b7c6:	2104      	movs	r1, #4
  41b7c8:	4668      	mov	r0, sp
  41b7ca:	f7eb fde1 	bl	407390 <inflate>

0041b7ce <.LVL27>:
  41b7ce:	2801      	cmp	r0, #1
  41b7d0:	d10a      	bne.n	41b7e8 <.LCFI10>
        inflateEnd(&stream);
        return DECOMPRESS_E;
    }
    
    result = (int)stream.total_out;
  41b7d2:	9c05      	ldr	r4, [sp, #20]

0041b7d4 <.LVL28>:

    if (inflateEnd(&stream) != Z_OK)
  41b7d4:	4668      	mov	r0, sp
  41b7d6:	f001 fb89 	bl	41ceec <.LFE173>

0041b7da <.LVL29>:
  41b7da:	2800      	cmp	r0, #0
        result = DECOMPRESS_E;
  41b7dc:	bf18      	it	ne
  41b7de:	f06f 04b9 	mvnne.w	r4, #185	; 0xb9

0041b7e2 <.LVL30>:

    return result;
}
  41b7e2:	4620      	mov	r0, r4
  41b7e4:	b00e      	add	sp, #56	; 0x38

0041b7e6 <.LCFI9>:
  41b7e6:	bd10      	pop	{r4, pc}

0041b7e8 <.LCFI10>:
        inflateEnd(&stream);
  41b7e8:	4668      	mov	r0, sp
  41b7ea:	f001 fb7f 	bl	41ceec <.LFE173>

0041b7ee <.LVL32>:
        return DECOMPRESS_E;
  41b7ee:	f06f 04b9 	mvn.w	r4, #185	; 0xb9
  41b7f2:	e7f6      	b.n	41b7e2 <.LVL30>
        return DECOMPRESS_INIT_E;
  41b7f4:	f06f 04b8 	mvn.w	r4, #184	; 0xb8
  41b7f8:	e7f3      	b.n	41b7e2 <.LVL30>
  41b7fa:	bf00      	nop
  41b7fc:	0041dbc7 	.word	0x0041dbc7
  41b800:	0041db8f 	.word	0x0041db8f
  41b804:	0041dd04 	.word	0x0041dd04

Disassembly of section .text.GetLength%218:

0041b808 <GetLength>:
{
  41b808:	b5f0      	push	{r4, r5, r6, r7, lr}

0041b80a <.LCFI12>:
    word32  idx = *inOutIdx;
  41b80a:	680e      	ldr	r6, [r1, #0]

0041b80c <.LVL94>:
    *len = 0;    /* default length */
  41b80c:	2400      	movs	r4, #0
  41b80e:	6014      	str	r4, [r2, #0]
    if ((idx + 1) > maxIdx) {   /* for first read */
  41b810:	1c77      	adds	r7, r6, #1
  41b812:	429f      	cmp	r7, r3
  41b814:	d81f      	bhi.n	41b856 <.LBE69>

0041b816 <.LVL95>:
    b = input[idx++];
  41b816:	1985      	adds	r5, r0, r6
  41b818:	5d84      	ldrb	r4, [r0, r6]

0041b81a <.LVL96>:
    if (b >= ASN_LONG_LENGTH) {
  41b81a:	f014 0f80 	tst.w	r4, #128	; 0x80
  41b81e:	d108      	bne.n	41b832 <.LBB69>
        length = b;
  41b820:	4620      	mov	r0, r4

0041b822 <.LVL97>:
    if ((idx + length) > maxIdx) {   /* for user of length */
  41b822:	19c4      	adds	r4, r0, r7
  41b824:	42a3      	cmp	r3, r4
  41b826:	d31c      	bcc.n	41b862 <.LBE70>
    *inOutIdx = idx;
  41b828:	600f      	str	r7, [r1, #0]
    if (length > 0)
  41b82a:	2800      	cmp	r0, #0
  41b82c:	dd1e      	ble.n	41b86c <.LVL114>
        *len = length;
  41b82e:	6010      	str	r0, [r2, #0]
  41b830:	bdf0      	pop	{r4, r5, r6, r7, pc}

0041b832 <.LBB69>:
        word32 bytes = b & 0x7F;
  41b832:	f004 047f 	and.w	r4, r4, #127	; 0x7f

0041b836 <.LVL99>:
        if ((idx + bytes) > maxIdx) {   /* for reading bytes */
  41b836:	eb07 0e04 	add.w	lr, r7, r4
  41b83a:	4573      	cmp	r3, lr
  41b83c:	d30e      	bcc.n	41b85c <.LBB70>

0041b83e <.LVL100>:
        while (bytes--) {
  41b83e:	b19c      	cbz	r4, 41b868 <.LVL112>
  41b840:	4434      	add	r4, r6

0041b842 <.LVL101>:
  41b842:	4404      	add	r4, r0
  41b844:	2000      	movs	r0, #0

0041b846 <.LVL102>:
            length = (length << 8) | b;
  41b846:	f815 6f01 	ldrb.w	r6, [r5, #1]!

0041b84a <.LVL103>:
  41b84a:	ea46 2000 	orr.w	r0, r6, r0, lsl #8

0041b84e <.LVL104>:
        while (bytes--) {
  41b84e:	42a5      	cmp	r5, r4
  41b850:	d1f9      	bne.n	41b846 <.LVL102>
            b = input[idx++];
  41b852:	4677      	mov	r7, lr

0041b854 <.LVL105>:
  41b854:	e7e5      	b.n	41b822 <.LVL97>

0041b856 <.LBE69>:
        return BUFFER_E;
  41b856:	f06f 0083 	mvn.w	r0, #131	; 0x83

0041b85a <.LVL107>:
  41b85a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0041b85c <.LBB70>:
            return BUFFER_E;
  41b85c:	f06f 0083 	mvn.w	r0, #131	; 0x83

0041b860 <.LVL109>:
  41b860:	bdf0      	pop	{r4, r5, r6, r7, pc}

0041b862 <.LBE70>:
        return BUFFER_E;
  41b862:	f06f 0083 	mvn.w	r0, #131	; 0x83

0041b866 <.LVL111>:
  41b866:	bdf0      	pop	{r4, r5, r6, r7, pc}

0041b868 <.LVL112>:
    *inOutIdx = idx;
  41b868:	600f      	str	r7, [r1, #0]

0041b86a <.LVL113>:
  41b86a:	2000      	movs	r0, #0

0041b86c <.LVL114>:
}
  41b86c:	bdf0      	pop	{r4, r5, r6, r7, pc}

Disassembly of section .text.fp_cmp_mag%219:

0041b86e <fp_cmp_mag>:
   if (a->used > b->used) {
  41b86e:	6802      	ldr	r2, [r0, #0]
  41b870:	680b      	ldr	r3, [r1, #0]
  41b872:	429a      	cmp	r2, r3
  41b874:	dc20      	bgt.n	41b8b8 <.LVL107>
   } else if (a->used < b->used) {
  41b876:	db21      	blt.n	41b8bc <.LVL109>

0041b878 <.LVL102>:
      for (x = a->used - 1; x >= 0; x--) {
  41b878:	1e53      	subs	r3, r2, #1

0041b87a <.LVL103>:
  41b87a:	d422      	bmi.n	41b8c2 <.LVL111>
{
  41b87c:	b430      	push	{r4, r5}

0041b87e <.LCFI13>:
          if (a->dp[x] > b->dp[x]) {
  41b87e:	1c9c      	adds	r4, r3, #2
  41b880:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
  41b884:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
  41b888:	42a5      	cmp	r5, r4
  41b88a:	d81c      	bhi.n	41b8c6 <.LCFI15>
          } else if (a->dp[x] < b->dp[x]) {
  41b88c:	d31d      	bcc.n	41b8ca <.LVL115>
  41b88e:	0092      	lsls	r2, r2, #2
  41b890:	3204      	adds	r2, #4
  41b892:	4410      	add	r0, r2

0041b894 <.LVL104>:
  41b894:	4411      	add	r1, r2

0041b896 <.LVL105>:
      for (x = a->used - 1; x >= 0; x--) {
  41b896:	3b01      	subs	r3, #1
  41b898:	f1b3 3fff 	cmp.w	r3, #4294967295
  41b89c:	d009      	beq.n	41b8b2 <.LVL105+0x1c>
          if (a->dp[x] > b->dp[x]) {
  41b89e:	f850 4d04 	ldr.w	r4, [r0, #-4]!
  41b8a2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  41b8a6:	4294      	cmp	r4, r2
  41b8a8:	d812      	bhi.n	41b8d0 <.LVL117>
          } else if (a->dp[x] < b->dp[x]) {
  41b8aa:	d2f4      	bcs.n	41b896 <.LVL105>
             return FP_LT;
  41b8ac:	f04f 30ff 	mov.w	r0, #4294967295
  41b8b0:	e000      	b.n	41b8b4 <.LVL105+0x1e>
   return FP_EQ;
  41b8b2:	2000      	movs	r0, #0
}
  41b8b4:	bc30      	pop	{r4, r5}

0041b8b6 <.LCFI14>:
  41b8b6:	4770      	bx	lr

0041b8b8 <.LVL107>:
      return FP_GT;
  41b8b8:	2001      	movs	r0, #1

0041b8ba <.LVL108>:
  41b8ba:	4770      	bx	lr

0041b8bc <.LVL109>:
      return FP_LT;
  41b8bc:	f04f 30ff 	mov.w	r0, #4294967295

0041b8c0 <.LVL110>:
  41b8c0:	4770      	bx	lr

0041b8c2 <.LVL111>:
   return FP_EQ;
  41b8c2:	2000      	movs	r0, #0

0041b8c4 <.LVL112>:
  41b8c4:	4770      	bx	lr

0041b8c6 <.LCFI15>:
             return FP_GT;
  41b8c6:	2001      	movs	r0, #1

0041b8c8 <.LVL114>:
  41b8c8:	e7f4      	b.n	41b8b4 <.LVL105+0x1e>

0041b8ca <.LVL115>:
             return FP_LT;
  41b8ca:	f04f 30ff 	mov.w	r0, #4294967295

0041b8ce <.LVL116>:
  41b8ce:	e7f1      	b.n	41b8b4 <.LVL105+0x1e>

0041b8d0 <.LVL117>:
             return FP_GT;
  41b8d0:	2001      	movs	r0, #1
  41b8d2:	e7ef      	b.n	41b8b4 <.LVL105+0x1e>

Disassembly of section .text.wc_RsaCleanup%220:

0041b8d4 <wc_RsaCleanup>:
    if (key && key->data) {
  41b8d4:	b378      	cbz	r0, 41b936 <.LCFI1>
{
  41b8d6:	b510      	push	{r4, lr}

0041b8d8 <.LCFI0>:
  41b8d8:	4604      	mov	r4, r0
    if (key && key->data) {
  41b8da:	f241 1344 	movw	r3, #4420	; 0x1144
  41b8de:	58c0      	ldr	r0, [r0, r3]

0041b8e0 <.LVL1>:
  41b8e0:	b1b0      	cbz	r0, 41b910 <.LBE10+0x16>
        if (key->dataIsAlloc) {
  41b8e2:	f241 1354 	movw	r3, #4436	; 0x1154
  41b8e6:	5ce3      	ldrb	r3, [r4, r3]
  41b8e8:	b15b      	cbz	r3, 41b902 <.LBE10+0x8>
            if (key->type == RSA_PRIVATE_DECRYPT ||
  41b8ea:	f241 1348 	movw	r3, #4424	; 0x1148
  41b8ee:	58e3      	ldr	r3, [r4, r3]
  41b8f0:	3b02      	subs	r3, #2
  41b8f2:	2b01      	cmp	r3, #1
  41b8f4:	d90d      	bls.n	41b912 <.LBE10+0x18>

0041b8f6 <.LBB10>:
            XFREE(key->data, key->heap, DYNAMIC_TYPE_WOLF_BIGINT);
  41b8f6:	f001 ffdf 	bl	41d8b8 <.LFE2>

0041b8fa <.LBE10>:
            key->dataIsAlloc = 0;
  41b8fa:	2200      	movs	r2, #0
  41b8fc:	f241 1354 	movw	r3, #4436	; 0x1154
  41b900:	54e2      	strb	r2, [r4, r3]
        key->data = NULL;
  41b902:	2300      	movs	r3, #0
  41b904:	f241 1244 	movw	r2, #4420	; 0x1144
  41b908:	50a3      	str	r3, [r4, r2]
        key->dataLen = 0;
  41b90a:	f241 1250 	movw	r2, #4432	; 0x1150
  41b90e:	50a3      	str	r3, [r4, r2]
  41b910:	bd10      	pop	{r4, pc}
                ForceZero(key->data, key->dataLen);
  41b912:	f241 1350 	movw	r3, #4432	; 0x1150
  41b916:	58e2      	ldr	r2, [r4, r3]

0041b918 <.LBB11>:
    while (len--) *z++ = 0;
  41b918:	2a00      	cmp	r2, #0
  41b91a:	d0ec      	beq.n	41b8f6 <.LBB10>
  41b91c:	4402      	add	r2, r0

0041b91e <.LVL6>:
  41b91e:	2100      	movs	r1, #0

0041b920 <.LVL7>:
  41b920:	1c43      	adds	r3, r0, #1

0041b922 <.LVL8>:
  41b922:	7001      	strb	r1, [r0, #0]
  41b924:	4618      	mov	r0, r3
  41b926:	429a      	cmp	r2, r3
  41b928:	d1fa      	bne.n	41b920 <.LVL7>

0041b92a <.LBB13>:
            XFREE(key->data, key->heap, DYNAMIC_TYPE_WOLF_BIGINT);
  41b92a:	f241 1344 	movw	r3, #4420	; 0x1144

0041b92e <.LVL9>:
  41b92e:	58e0      	ldr	r0, [r4, r3]

0041b930 <.LVL10>:
  41b930:	2800      	cmp	r0, #0
  41b932:	d0e2      	beq.n	41b8fa <.LBE10>
  41b934:	e7df      	b.n	41b8f6 <.LBB10>

0041b936 <.LCFI1>:
  41b936:	4770      	bx	lr

Disassembly of section .text.fp_mul_2%221:

0041b938 <fp_mul_2>:
{
  41b938:	b5f0      	push	{r4, r5, r6, r7, lr}

0041b93a <.LCFI5>:
  oldused = b->used;
  41b93a:	f8d1 c000 	ldr.w	ip, [r1]
  b->used = a->used;
  41b93e:	6803      	ldr	r3, [r0, #0]
  41b940:	460d      	mov	r5, r1
  41b942:	f845 3b08 	str.w	r3, [r5], #8

0041b946 <.LBB4>:
    for (x = 0; x < a->used; x++) {
  41b946:	6803      	ldr	r3, [r0, #0]
  41b948:	2b00      	cmp	r3, #0
  41b94a:	dd19      	ble.n	41b980 <.LVL54>
  41b94c:	f100 0e04 	add.w	lr, r0, #4
  41b950:	462e      	mov	r6, r5
  41b952:	2300      	movs	r3, #0
  41b954:	461a      	mov	r2, r3

0041b956 <.LVL49>:
      rr = *tmpa >> ((fp_digit)(DIGIT_BIT - 1));
  41b956:	f85e 4f04 	ldr.w	r4, [lr, #4]!
  41b95a:	0fe7      	lsrs	r7, r4, #31

0041b95c <.LVL50>:
      *tmpb++ = ((*tmpa++ << ((fp_digit)1)) | r);
  41b95c:	ea43 0344 	orr.w	r3, r3, r4, lsl #1

0041b960 <.LVL51>:
  41b960:	f846 3b04 	str.w	r3, [r6], #4

0041b964 <.LVL52>:
    for (x = 0; x < a->used; x++) {
  41b964:	3201      	adds	r2, #1

0041b966 <.LVL53>:
      rr = *tmpa >> ((fp_digit)(DIGIT_BIT - 1));
  41b966:	463b      	mov	r3, r7
    for (x = 0; x < a->used; x++) {
  41b968:	6804      	ldr	r4, [r0, #0]
  41b96a:	4294      	cmp	r4, r2
  41b96c:	dcf3      	bgt.n	41b956 <.LVL49>
    if (r != 0 && b->used != (FP_SIZE-1)) {
  41b96e:	b13f      	cbz	r7, 41b980 <.LVL54>
  41b970:	680b      	ldr	r3, [r1, #0]
  41b972:	2b87      	cmp	r3, #135	; 0x87
  41b974:	d004      	beq.n	41b980 <.LVL54>
      *tmpb = 1;
  41b976:	2301      	movs	r3, #1
  41b978:	6033      	str	r3, [r6, #0]
      ++(b->used);
  41b97a:	680b      	ldr	r3, [r1, #0]
  41b97c:	3301      	adds	r3, #1
  41b97e:	600b      	str	r3, [r1, #0]

0041b980 <.LVL54>:
    tmpb = b->dp + b->used;
  41b980:	680b      	ldr	r3, [r1, #0]
  41b982:	eb05 0283 	add.w	r2, r5, r3, lsl #2

0041b986 <.LVL55>:
    for (x = b->used; x < oldused; x++) {
  41b986:	459c      	cmp	ip, r3
  41b988:	dd05      	ble.n	41b996 <.LBE4>
      *tmpb++ = 0;
  41b98a:	2400      	movs	r4, #0
  41b98c:	f842 4b04 	str.w	r4, [r2], #4

0041b990 <.LVL56>:
    for (x = b->used; x < oldused; x++) {
  41b990:	3301      	adds	r3, #1

0041b992 <.LVL57>:
  41b992:	459c      	cmp	ip, r3
  41b994:	d1fa      	bne.n	41b98c <.LVL55+0x6>

0041b996 <.LBE4>:
  b->sign = a->sign;
  41b996:	6843      	ldr	r3, [r0, #4]

0041b998 <.LVL58>:
  41b998:	604b      	str	r3, [r1, #4]
  41b99a:	bdf0      	pop	{r4, r5, r6, r7, pc}

Disassembly of section .rodata%222:

0041b99c <.rodata%222>:
  41b99c:	33323130 	.word	0x33323130
  41b9a0:	37363534 	.word	0x37363534
  41b9a4:	42413938 	.word	0x42413938
  41b9a8:	46454443 	.word	0x46454443
  41b9ac:	4a494847 	.word	0x4a494847
  41b9b0:	4e4d4c4b 	.word	0x4e4d4c4b
  41b9b4:	5251504f 	.word	0x5251504f
  41b9b8:	56555453 	.word	0x56555453
  41b9bc:	5a595857 	.word	0x5a595857
  41b9c0:	20202020 	.word	0x20202020
  41b9c4:	20202020 	.word	0x20202020
  41b9c8:	20202020 	.word	0x20202020
  41b9cc:	20202020 	.word	0x20202020
  41b9d0:	20202020 	.word	0x20202020
  41b9d4:	20202020 	.word	0x20202020
  41b9d8:	20202020 	.word	0x20202020
  41b9dc:	20202020 	.word	0x20202020
  41b9e0:	64636261 	.word	0x64636261
  41b9e4:	68676665 	.word	0x68676665
  41b9e8:	6c6b6a69 	.word	0x6c6b6a69
  41b9ec:	706f6e6d 	.word	0x706f6e6d
  41b9f0:	74737271 	.word	0x74737271
  41b9f4:	78777675 	.word	0x78777675
  41b9f8:	2f2b7a79 	.word	0x2f2b7a79
  41b9fc:	00          	.byte	0x00
  41b9fd:	00          	.byte	0x00
  41b9fe:	bf00      	nop

Disassembly of section .text.strncpy%223:

0041ba00 <strncpy>:
  41ba00:	ea40 0301 	orr.w	r3, r0, r1
  41ba04:	f013 0f03 	tst.w	r3, #3
  41ba08:	b470      	push	{r4, r5, r6}

0041ba0a <.LCFI0>:
  41ba0a:	4603      	mov	r3, r0
  41ba0c:	d024      	beq.n	41ba58 <.LVL16>

0041ba0e <.LVL1>:
  41ba0e:	b1a2      	cbz	r2, 41ba3a <.LVL11+0xa>
  41ba10:	780c      	ldrb	r4, [r1, #0]
  41ba12:	701c      	strb	r4, [r3, #0]
  41ba14:	3a01      	subs	r2, #1

0041ba16 <.LVL3>:
  41ba16:	3301      	adds	r3, #1
  41ba18:	3101      	adds	r1, #1
  41ba1a:	b13c      	cbz	r4, 41ba2c <.LVL10>

0041ba1c <.LVL6>:
  41ba1c:	b16a      	cbz	r2, 41ba3a <.LVL11+0xa>
  41ba1e:	f811 4b01 	ldrb.w	r4, [r1], #1

0041ba22 <.LVL7>:
  41ba22:	f803 4b01 	strb.w	r4, [r3], #1

0041ba26 <.LVL8>:
  41ba26:	3a01      	subs	r2, #1

0041ba28 <.LVL9>:
  41ba28:	2c00      	cmp	r4, #0
  41ba2a:	d1f7      	bne.n	41ba1c <.LVL6>

0041ba2c <.LVL10>:
  41ba2c:	b12a      	cbz	r2, 41ba3a <.LVL11+0xa>
  41ba2e:	441a      	add	r2, r3

0041ba30 <.LVL11>:
  41ba30:	2100      	movs	r1, #0
  41ba32:	f803 1b01 	strb.w	r1, [r3], #1
  41ba36:	429a      	cmp	r2, r3
  41ba38:	d1fb      	bne.n	41ba32 <.LVL11+0x2>
  41ba3a:	bc70      	pop	{r4, r5, r6}

0041ba3c <.LCFI1>:
  41ba3c:	4770      	bx	lr

0041ba3e <.LCFI2>:
  41ba3e:	460e      	mov	r6, r1

0041ba40 <.LVL14>:
  41ba40:	f851 5b04 	ldr.w	r5, [r1], #4
  41ba44:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
  41ba48:	ea24 0405 	bic.w	r4, r4, r5
  41ba4c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  41ba50:	d105      	bne.n	41ba5e <.LVL17>
  41ba52:	f843 5b04 	str.w	r5, [r3], #4

0041ba56 <.LVL15>:
  41ba56:	3a04      	subs	r2, #4

0041ba58 <.LVL16>:
  41ba58:	2a03      	cmp	r2, #3
  41ba5a:	d8f0      	bhi.n	41ba3e <.LCFI2>
  41ba5c:	e7d7      	b.n	41ba0e <.LVL1>

0041ba5e <.LVL17>:
  41ba5e:	4631      	mov	r1, r6
  41ba60:	e7d6      	b.n	41ba10 <.LVL1+0x2>

0041ba62 <.LFE0>:
  41ba62:	bf00      	nop

Disassembly of section .text.fp_exptmod%224:

0041ba64 <fp_exptmod>:
{
  41ba64:	b570      	push	{r4, r5, r6, lr}

0041ba66 <.LCFI116>:
  41ba66:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228

0041ba6a <.LCFI117>:
   if (P->used > (FP_SIZE/2)) {
  41ba6a:	6815      	ldr	r5, [r2, #0]
  41ba6c:	2d44      	cmp	r5, #68	; 0x44
  41ba6e:	dc27      	bgt.n	41bac0 <.LBE182>
  41ba70:	461e      	mov	r6, r3
  41ba72:	4615      	mov	r5, r2
  41ba74:	460c      	mov	r4, r1
   if (X->sign == FP_NEG) {
  41ba76:	684b      	ldr	r3, [r1, #4]

0041ba78 <.LVL800>:
  41ba78:	2b01      	cmp	r3, #1
  41ba7a:	d007      	beq.n	41ba8c <.LBB182>
      return _fp_exptmod(G, X, P, Y);
  41ba7c:	4633      	mov	r3, r6
  41ba7e:	f7fa ffc1 	bl	416a04 <.LFE17>

0041ba82 <.LVL801>:
  41ba82:	4602      	mov	r2, r0

0041ba84 <.LVL802>:
}
  41ba84:	4610      	mov	r0, r2
  41ba86:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228

0041ba8a <.LCFI118>:
  41ba8a:	bd70      	pop	{r4, r5, r6, pc}

0041ba8c <.LBB182>:
      fp_init_copy(&tmp, G);
  41ba8c:	4601      	mov	r1, r0

0041ba8e <.LVL804>:
  41ba8e:	4668      	mov	r0, sp

0041ba90 <.LVL805>:
  41ba90:	f001 fe68 	bl	41d764 <.LFE54>

0041ba94 <.LVL806>:
      if ((err = fp_invmod(&tmp, P, &tmp)) != FP_OKAY) {
  41ba94:	466a      	mov	r2, sp
  41ba96:	4629      	mov	r1, r5
  41ba98:	4668      	mov	r0, sp
  41ba9a:	f7f3 ffe1 	bl	40fa60 <fp_invmod>

0041ba9e <.LVL807>:
  41ba9e:	4602      	mov	r2, r0
  41baa0:	2800      	cmp	r0, #0
  41baa2:	d1ef      	bne.n	41ba84 <.LVL802>
      X->sign = FP_ZPOS;
  41baa4:	2300      	movs	r3, #0
  41baa6:	6063      	str	r3, [r4, #4]
      err =  _fp_exptmod(&tmp, X, P, Y);
  41baa8:	4633      	mov	r3, r6
  41baaa:	462a      	mov	r2, r5
  41baac:	4621      	mov	r1, r4
  41baae:	4668      	mov	r0, sp

0041bab0 <.LVL808>:
  41bab0:	f7fa ffa8 	bl	416a04 <.LFE17>

0041bab4 <.LVL809>:
  41bab4:	4602      	mov	r2, r0

0041bab6 <.LVL810>:
      if (X != Y) {
  41bab6:	42b4      	cmp	r4, r6
  41bab8:	d0e4      	beq.n	41ba84 <.LVL802>
         X->sign = FP_NEG;
  41baba:	2301      	movs	r3, #1
  41babc:	6063      	str	r3, [r4, #4]
  41babe:	e7e1      	b.n	41ba84 <.LVL802>

0041bac0 <.LBE182>:
      return FP_VAL;
  41bac0:	f04f 32ff 	mov.w	r2, #4294967295

0041bac4 <.LVL812>:
  41bac4:	e7de      	b.n	41ba84 <.LVL802>

Disassembly of section .text.SYS_Initialize%225:

0041bac8 <SYS_Initialize>:

  Remarks:
 */

void SYS_Initialize ( void* data )
{
  41bac8:	b510      	push	{r4, lr}

0041baca <.LCFI0>:
    CLK_Initialize();
  41baca:	f7ff fbcb 	bl	41b264 <CLK_Initialize>

0041bace <.LVL1>:
	PIO_Initialize();
  41bace:	f7fe fc47 	bl	41a360 <PIO_Initialize>

0041bad2 <.LVL2>:


    NVIC_Initialize();
  41bad2:	f000 fe8f 	bl	41c7f4 <NVIC_Initialize>

0041bad6 <.LVL3>:
	RSWDT_REGS->RSWDT_MR = RSWDT_MR_WDDIS_Msk;	// Disable RSWDT 
  41bad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  41bada:	4a0e      	ldr	r2, [pc, #56]	; (41bb14 <.LVL10+0x2>)
  41badc:	6053      	str	r3, [r2, #4]

	WDT_REGS->WDT_MR = WDT_MR_WDDIS_Msk; 		// Disable WDT 
  41bade:	3ab0      	subs	r2, #176	; 0xb0
  41bae0:	6053      	str	r3, [r2, #4]

	BSP_Initialize();
  41bae2:	f001 fe4d 	bl	41d780 <BSP_Initialize>

0041bae6 <.LVL4>:
 
    TC0_CH0_TimerInitialize(); 
  41bae6:	f001 fc33 	bl	41d350 <TC0_CH0_TimerInitialize>

0041baea <.LVL5>:
     
    
	USART1_Initialize();
  41baea:	f001 f859 	bl	41cba0 <.LFE186>

0041baee <.LVL6>:



    sysObj.sysConsole0 = SYS_CONSOLE_Initialize(SYS_CONSOLE_INDEX_0, (SYS_MODULE_INIT *)&consUsartInit0);
  41baee:	490a      	ldr	r1, [pc, #40]	; (41bb18 <.LVL10+0x6>)
  41baf0:	2000      	movs	r0, #0
  41baf2:	f000 fd23 	bl	41c53c <SYS_CONSOLE_Initialize>

0041baf6 <.LVL7>:
  41baf6:	4c09      	ldr	r4, [pc, #36]	; (41bb1c <.LVL10+0xa>)
  41baf8:	6020      	str	r0, [r4, #0]
    sysObj.sysDebug = SYS_DEBUG_Initialize(SYS_DEBUG_INDEX_0, (SYS_MODULE_INIT*)&debugInit);
  41bafa:	4909      	ldr	r1, [pc, #36]	; (41bb20 <.LVL10+0xe>)
  41bafc:	2000      	movs	r0, #0
  41bafe:	f001 fd0f 	bl	41d520 <.LFE168>

0041bb02 <.LVL8>:
  41bb02:	6060      	str	r0, [r4, #4]

    sysObj.sysTime = SYS_TIME_Initialize(SYS_TIME_INDEX_0, (SYS_MODULE_INIT *)&sysTimeInitData);
  41bb04:	4907      	ldr	r1, [pc, #28]	; (41bb24 <.LVL10+0x12>)
  41bb06:	2000      	movs	r0, #0
  41bb08:	f7fd fecc 	bl	4198a4 <.LFE109>

0041bb0c <.LVL9>:
  41bb0c:	60a0      	str	r0, [r4, #8]


    APP_Initialize();
  41bb0e:	f7fd ff19 	bl	419944 <.LFE173>

0041bb12 <.LVL10>:
  41bb12:	bd10      	pop	{r4, pc}
  41bb14:	400e1900 	.word	0x400e1900
  41bb18:	2040d760 	.word	0x2040d760
  41bb1c:	20400000 	.word	0x20400000
  41bb20:	2040c854 	.word	0x2040c854
  41bb24:	2040d768 	.word	0x2040d768

Disassembly of section .text.GetASNInt%226:

0041bb28 <GetASNInt>:
{
  41bb28:	b570      	push	{r4, r5, r6, lr}

0041bb2a <.LCFI17>:
  41bb2a:	b082      	sub	sp, #8

0041bb2c <.LCFI18>:
  41bb2c:	4606      	mov	r6, r0
  41bb2e:	460d      	mov	r5, r1
  41bb30:	4614      	mov	r4, r2
    ret = GetASNHeader(input, ASN_INTEGER, inOutIdx, len, maxIdx);
  41bb32:	9300      	str	r3, [sp, #0]
  41bb34:	4613      	mov	r3, r2

0041bb36 <.LVL129>:
  41bb36:	460a      	mov	r2, r1

0041bb38 <.LVL130>:
  41bb38:	2102      	movs	r1, #2

0041bb3a <.LVL131>:
  41bb3a:	f000 fd6b 	bl	41c614 <.LFE149>

0041bb3e <.LVL132>:
    if (ret < 0)
  41bb3e:	2800      	cmp	r0, #0
  41bb40:	db1c      	blt.n	41bb7c <.LVL135+0x2>
    if (*len > 0) {
  41bb42:	6822      	ldr	r2, [r4, #0]
  41bb44:	2a00      	cmp	r2, #0
  41bb46:	dd1b      	ble.n	41bb80 <.LCFI20>
        if ((input[*inOutIdx] == 0x00) && (*len > 1)) {
  41bb48:	6829      	ldr	r1, [r5, #0]
  41bb4a:	5c73      	ldrb	r3, [r6, r1]
  41bb4c:	2a01      	cmp	r2, #1
  41bb4e:	dd0f      	ble.n	41bb70 <.LVL134>
  41bb50:	b973      	cbnz	r3, 41bb70 <.LVL134>
            (*inOutIdx)++;
  41bb52:	3101      	adds	r1, #1
  41bb54:	6029      	str	r1, [r5, #0]
            (*len)--;
  41bb56:	6823      	ldr	r3, [r4, #0]
  41bb58:	3b01      	subs	r3, #1
  41bb5a:	6023      	str	r3, [r4, #0]
            if (*len > 0 && (input[*inOutIdx] & 0x80) == 0)
  41bb5c:	2b00      	cmp	r3, #0
  41bb5e:	dd11      	ble.n	41bb84 <.LVL138>
  41bb60:	682b      	ldr	r3, [r5, #0]
  41bb62:	56f3      	ldrsb	r3, [r6, r3]
    return 0;
  41bb64:	2b00      	cmp	r3, #0
  41bb66:	bfac      	ite	ge
  41bb68:	f06f 008b 	mvnge.w	r0, #139	; 0x8b

0041bb6c <.LVL133>:
  41bb6c:	2000      	movlt	r0, #0
  41bb6e:	e005      	b.n	41bb7c <.LVL135+0x2>

0041bb70 <.LVL134>:
        else if ((input[*inOutIdx] & 0x80) == 0x80)
  41bb70:	b25b      	sxtb	r3, r3
    return 0;
  41bb72:	2b00      	cmp	r3, #0
  41bb74:	bfb4      	ite	lt
  41bb76:	f06f 008b 	mvnlt.w	r0, #139	; 0x8b

0041bb7a <.LVL135>:
  41bb7a:	2000      	movge	r0, #0
}
  41bb7c:	b002      	add	sp, #8

0041bb7e <.LCFI19>:
  41bb7e:	bd70      	pop	{r4, r5, r6, pc}

0041bb80 <.LCFI20>:
    return 0;
  41bb80:	2000      	movs	r0, #0

0041bb82 <.LVL137>:
  41bb82:	e7fb      	b.n	41bb7c <.LVL135+0x2>

0041bb84 <.LVL138>:
  41bb84:	2000      	movs	r0, #0

0041bb86 <.LVL139>:
  41bb86:	e7f9      	b.n	41bb7c <.LVL135+0x2>

Disassembly of section .text.wc_ecc_export_private_only%227:

0041bb88 <wc_ecc_export_private_only>:
   return MP_OKAY on success */
int wc_ecc_export_private_only(ecc_key* key, byte* out, word32* outLen)
{
    word32 numlen;

    if (key == NULL || out == NULL || outLen == NULL) {
  41bb88:	2a00      	cmp	r2, #0
  41bb8a:	bf18      	it	ne
  41bb8c:	2900      	cmpne	r1, #0
  41bb8e:	d028      	beq.n	41bbe2 <.LCFI124>
{
  41bb90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041bb92 <.LCFI123>:
  41bb92:	460f      	mov	r7, r1
  41bb94:	4616      	mov	r6, r2
    if (key == NULL || out == NULL || outLen == NULL) {
  41bb96:	b1f0      	cbz	r0, 41bbd6 <.LVL1447>
  41bb98:	4604      	mov	r4, r0
        return BAD_FUNC_ARG;
    }

    if (wc_ecc_is_valid_idx(key->idx) == 0) {
  41bb9a:	6840      	ldr	r0, [r0, #4]

0041bb9c <.LVL1439>:
  41bb9c:	f001 fc26 	bl	41d3ec <wc_ecc_is_valid_idx>

0041bba0 <.LVL1440>:
  41bba0:	b1e0      	cbz	r0, 41bbdc <.LVL1449>
        return ECC_BAD_ARG_E;
    }
    numlen = key->dp->size;
  41bba2:	6923      	ldr	r3, [r4, #16]
  41bba4:	681d      	ldr	r5, [r3, #0]

0041bba6 <.LVL1441>:

    if (*outLen < numlen) {
  41bba6:	6833      	ldr	r3, [r6, #0]
  41bba8:	429d      	cmp	r5, r3
  41bbaa:	d810      	bhi.n	41bbce <.LVL1446>
        *outLen = numlen;
        return BUFFER_E;
    }
    *outLen = numlen;
  41bbac:	6035      	str	r5, [r6, #0]
    XMEMSET(out, 0, *outLen);
  41bbae:	462a      	mov	r2, r5
  41bbb0:	2100      	movs	r1, #0
  41bbb2:	4638      	mov	r0, r7
  41bbb4:	f7fe f8f4 	bl	419da0 <.LFE166>

0041bbb8 <.LVL1442>:
   /* TODO: Implement equiv call to ATECC508A */
   return BAD_COND_E;

#else

    return mp_to_unsigned_bin(&key->k, out + (numlen -
  41bbb8:	f504 64d2 	add.w	r4, r4, #1680	; 0x690

0041bbbc <.LVL1443>:
                                           mp_unsigned_bin_size(&key->k)));
  41bbbc:	4620      	mov	r0, r4
  41bbbe:	f002 f8d5 	bl	41dd6c <.LFE82>

0041bbc2 <.LVL1444>:
    return mp_to_unsigned_bin(&key->k, out + (numlen -
  41bbc2:	1a28      	subs	r0, r5, r0
  41bbc4:	1839      	adds	r1, r7, r0
  41bbc6:	4620      	mov	r0, r4
  41bbc8:	f002 f86a 	bl	41dca0 <.LFE73>

0041bbcc <.LVL1445>:
  41bbcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041bbce <.LVL1446>:
        *outLen = numlen;
  41bbce:	6035      	str	r5, [r6, #0]
        return BUFFER_E;
  41bbd0:	f06f 0083 	mvn.w	r0, #131	; 0x83
  41bbd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041bbd6 <.LVL1447>:
        return BAD_FUNC_ARG;
  41bbd6:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041bbda <.LVL1448>:
  41bbda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041bbdc <.LVL1449>:
        return ECC_BAD_ARG_E;
  41bbdc:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
#endif /* WOLFSSL_ATECC508A */
}
  41bbe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041bbe2 <.LCFI124>:
        return BAD_FUNC_ARG;
  41bbe2:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041bbe6 <.LVL1451>:
}
  41bbe6:	4770      	bx	lr

Disassembly of section .text.bi_flush%228:

0041bbe8 <bi_flush>:
{
  41bbe8:	b410      	push	{r4}

0041bbea <.LCFI14>:
    if (s->bi_valid == 16) {
  41bbea:	f241 63bc 	movw	r3, #5820	; 0x16bc
  41bbee:	58c3      	ldr	r3, [r0, r3]
  41bbf0:	2b10      	cmp	r3, #16
  41bbf2:	d014      	beq.n	41bc1e <.LCFI16>
    } else if (s->bi_valid >= 8) {
  41bbf4:	2b07      	cmp	r3, #7
  41bbf6:	dd0f      	ble.n	41bc18 <.LCFI14+0x2e>
        put_byte(s, (Byte)s->bi_buf);
  41bbf8:	6881      	ldr	r1, [r0, #8]
  41bbfa:	6942      	ldr	r2, [r0, #20]
  41bbfc:	1c53      	adds	r3, r2, #1
  41bbfe:	6143      	str	r3, [r0, #20]
  41bc00:	f241 63b8 	movw	r3, #5816	; 0x16b8
  41bc04:	5ac4      	ldrh	r4, [r0, r3]
  41bc06:	548c      	strb	r4, [r1, r2]
        s->bi_buf >>= 8;
  41bc08:	5ac2      	ldrh	r2, [r0, r3]
  41bc0a:	0a12      	lsrs	r2, r2, #8
  41bc0c:	52c2      	strh	r2, [r0, r3]
        s->bi_valid -= 8;
  41bc0e:	f241 62bc 	movw	r2, #5820	; 0x16bc
  41bc12:	5883      	ldr	r3, [r0, r2]
  41bc14:	3b08      	subs	r3, #8
  41bc16:	5083      	str	r3, [r0, r2]
}
  41bc18:	f85d 4b04 	ldr.w	r4, [sp], #4

0041bc1c <.LCFI15>:
  41bc1c:	4770      	bx	lr

0041bc1e <.LCFI16>:
        put_short(s, s->bi_buf);
  41bc1e:	6881      	ldr	r1, [r0, #8]
  41bc20:	6942      	ldr	r2, [r0, #20]
  41bc22:	1c53      	adds	r3, r2, #1
  41bc24:	6143      	str	r3, [r0, #20]
  41bc26:	f241 63b8 	movw	r3, #5816	; 0x16b8
  41bc2a:	5ac4      	ldrh	r4, [r0, r3]
  41bc2c:	548c      	strb	r4, [r1, r2]
  41bc2e:	6884      	ldr	r4, [r0, #8]
  41bc30:	6941      	ldr	r1, [r0, #20]
  41bc32:	1c4a      	adds	r2, r1, #1
  41bc34:	6142      	str	r2, [r0, #20]
  41bc36:	5ac2      	ldrh	r2, [r0, r3]
  41bc38:	0a12      	lsrs	r2, r2, #8
  41bc3a:	5462      	strb	r2, [r4, r1]
        s->bi_buf = 0;
  41bc3c:	2200      	movs	r2, #0
  41bc3e:	52c2      	strh	r2, [r0, r3]
        s->bi_valid = 0;
  41bc40:	f241 63bc 	movw	r3, #5820	; 0x16bc
  41bc44:	50c2      	str	r2, [r0, r3]
  41bc46:	e7e7      	b.n	41bc18 <.LCFI14+0x2e>

Disassembly of section .text.wc_InitSha%229:

0041bc48 <wc_InitSha>:
{
  41bc48:	b430      	push	{r4, r5}

0041bc4a <.LCFI2>:
  41bc4a:	4603      	mov	r3, r0
    if ((PMC_REGS->PMC_PCSR1 & PmcBit) != PmcBit)
  41bc4c:	4a12      	ldr	r2, [pc, #72]	; (41bc98 <.LCFI3+0x4>)
  41bc4e:	f8d2 2108 	ldr.w	r2, [r2, #264]	; 0x108
  41bc52:	f012 0f01 	tst.w	r2, #1
  41bc56:	d103      	bne.n	41bc60 <.LCFI2+0x16>
        PMC_REGS->PMC_PCER1 = PmcBit;
  41bc58:	2101      	movs	r1, #1
  41bc5a:	4a0f      	ldr	r2, [pc, #60]	; (41bc98 <.LCFI3+0x4>)
  41bc5c:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    sha->icm_descriptor.cfg.reg = 0x0;
  41bc60:	2000      	movs	r0, #0

0041bc62 <.LVL20>:
  41bc62:	6058      	str	r0, [r3, #4]
    sha->icm_descriptor.cfg.bit.is_end_mon = 1;
  41bc64:	2204      	movs	r2, #4
  41bc66:	711a      	strb	r2, [r3, #4]
    sha->digest[0] = 0x01234567;
  41bc68:	4a0c      	ldr	r2, [pc, #48]	; (41bc9c <.LCFI3+0x8>)
  41bc6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    sha->digest[1] = 0x89ABCDEF;
  41bc6e:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
  41bc72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    sha->digest[2] = 0xFEDCBA98;
  41bc76:	4a0a      	ldr	r2, [pc, #40]	; (41bca0 <.LCFI3+0xc>)
  41bc78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    sha->digest[3] = 0x76543210;
  41bc7c:	f1a2 3288 	sub.w	r2, r2, #2290649224	; 0x88888888
  41bc80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    sha->digest[4] = 0xF0E1D2C3;
  41bc84:	4a07      	ldr	r2, [pc, #28]	; (41bca4 <.LCFI3+0x10>)
  41bc86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    sha->total_len = 0;
  41bc8a:	2400      	movs	r4, #0
  41bc8c:	2500      	movs	r5, #0
  41bc8e:	e9c3 4526 	strd	r4, r5, [r3, #152]	; 0x98
}
  41bc92:	bc30      	pop	{r4, r5}

0041bc94 <.LCFI3>:
  41bc94:	4770      	bx	lr
  41bc96:	bf00      	nop
  41bc98:	400e0600 	.word	0x400e0600
  41bc9c:	01234567 	.word	0x01234567
  41bca0:	fedcba98 	.word	0xfedcba98
  41bca4:	f0e1d2c3 	.word	0xf0e1d2c3

Disassembly of section .text._calloc_r%230:

0041bca8 <_calloc_r>:
  41bca8:	b510      	push	{r4, lr}

0041bcaa <.LCFI0>:
  41bcaa:	fb02 f101 	mul.w	r1, r2, r1

0041bcae <.LVL1>:
  41bcae:	f7f2 f8bb 	bl	40de28 <.LFE183>

0041bcb2 <.LVL2>:
  41bcb2:	4604      	mov	r4, r0
  41bcb4:	b1d8      	cbz	r0, 41bcee <.LBE2>

0041bcb6 <.LVL3>:
  41bcb6:	f850 2c04 	ldr.w	r2, [r0, #-4]
  41bcba:	f022 0203 	bic.w	r2, r2, #3

0041bcbe <.LBB2>:
  41bcbe:	3a04      	subs	r2, #4

0041bcc0 <.LVL5>:
  41bcc0:	2a24      	cmp	r2, #36	; 0x24
  41bcc2:	d818      	bhi.n	41bcf6 <.LBE4>

0041bcc4 <.LBB3>:
  41bcc4:	2a13      	cmp	r2, #19
  41bcc6:	d914      	bls.n	41bcf2 <.LBB4>

0041bcc8 <.LVL7>:
  41bcc8:	2300      	movs	r3, #0
  41bcca:	2a1b      	cmp	r2, #27
  41bccc:	6003      	str	r3, [r0, #0]

0041bcce <.LVL8>:
  41bcce:	6043      	str	r3, [r0, #4]
  41bcd0:	d916      	bls.n	41bd00 <.LBB5>

0041bcd2 <.LVL9>:
  41bcd2:	2a24      	cmp	r2, #36	; 0x24
  41bcd4:	6083      	str	r3, [r0, #8]

0041bcd6 <.LVL10>:
  41bcd6:	60c3      	str	r3, [r0, #12]
  41bcd8:	bf11      	iteee	ne
  41bcda:	f100 0210 	addne.w	r2, r0, #16

0041bcde <.LVL11>:
  41bcde:	6103      	streq	r3, [r0, #16]
  41bce0:	6143      	streq	r3, [r0, #20]
  41bce2:	f100 0218 	addeq.w	r2, r0, #24

0041bce6 <.LVL12>:
  41bce6:	2300      	movs	r3, #0
  41bce8:	6013      	str	r3, [r2, #0]

0041bcea <.LVL13>:
  41bcea:	6053      	str	r3, [r2, #4]
  41bcec:	6093      	str	r3, [r2, #8]

0041bcee <.LBE2>:
  41bcee:	4620      	mov	r0, r4

0041bcf0 <.LVL15>:
  41bcf0:	bd10      	pop	{r4, pc}

0041bcf2 <.LBB4>:
  41bcf2:	4602      	mov	r2, r0

0041bcf4 <.LVL17>:
  41bcf4:	e7f7      	b.n	41bce6 <.LVL12>

0041bcf6 <.LBE4>:
  41bcf6:	2100      	movs	r1, #0
  41bcf8:	f7fe f852 	bl	419da0 <.LFE166>

0041bcfc <.LBE6>:
  41bcfc:	4620      	mov	r0, r4
  41bcfe:	bd10      	pop	{r4, pc}

0041bd00 <.LBB5>:
  41bd00:	f100 0208 	add.w	r2, r0, #8

0041bd04 <.LVL21>:
  41bd04:	e7ef      	b.n	41bce6 <.LVL12>

0041bd06 <.LBE5>:
  41bd06:	bf00      	nop

Disassembly of section .text.memcmp%231:

0041bd08 <memcmp>:
  41bd08:	2a03      	cmp	r2, #3
  41bd0a:	b470      	push	{r4, r5, r6}

0041bd0c <.LCFI0>:
  41bd0c:	d922      	bls.n	41bd54 <.LVL11>
  41bd0e:	ea40 0301 	orr.w	r3, r0, r1
  41bd12:	079b      	lsls	r3, r3, #30
  41bd14:	d011      	beq.n	41bd3a <.LCFI2>

0041bd16 <.LVL1>:
  41bd16:	7803      	ldrb	r3, [r0, #0]
  41bd18:	780c      	ldrb	r4, [r1, #0]
  41bd1a:	42a3      	cmp	r3, r4
  41bd1c:	d11d      	bne.n	41bd5a <.LVL11+0x6>
  41bd1e:	440a      	add	r2, r1
  41bd20:	3101      	adds	r1, #1
  41bd22:	e005      	b.n	41bd30 <.LVL4>

0041bd24 <.LVL2>:
  41bd24:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  41bd28:	f811 4b01 	ldrb.w	r4, [r1], #1

0041bd2c <.LVL3>:
  41bd2c:	42a3      	cmp	r3, r4
  41bd2e:	d114      	bne.n	41bd5a <.LVL11+0x6>

0041bd30 <.LVL4>:
  41bd30:	4291      	cmp	r1, r2
  41bd32:	d1f7      	bne.n	41bd24 <.LVL2>

0041bd34 <.LVL5>:
  41bd34:	2000      	movs	r0, #0
  41bd36:	bc70      	pop	{r4, r5, r6}

0041bd38 <.LCFI1>:
  41bd38:	4770      	bx	lr

0041bd3a <.LCFI2>:
  41bd3a:	680d      	ldr	r5, [r1, #0]
  41bd3c:	6806      	ldr	r6, [r0, #0]
  41bd3e:	42ae      	cmp	r6, r5
  41bd40:	460c      	mov	r4, r1
  41bd42:	4603      	mov	r3, r0

0041bd44 <.LVL7>:
  41bd44:	f101 0104 	add.w	r1, r1, #4

0041bd48 <.LVL8>:
  41bd48:	f100 0004 	add.w	r0, r0, #4

0041bd4c <.LVL9>:
  41bd4c:	d108      	bne.n	41bd60 <.LCFI4>
  41bd4e:	3a04      	subs	r2, #4

0041bd50 <.LVL10>:
  41bd50:	2a03      	cmp	r2, #3
  41bd52:	d8f2      	bhi.n	41bd3a <.LCFI2>

0041bd54 <.LVL11>:
  41bd54:	2a00      	cmp	r2, #0
  41bd56:	d1de      	bne.n	41bd16 <.LVL1>
  41bd58:	e7ec      	b.n	41bd34 <.LVL5>
  41bd5a:	1b18      	subs	r0, r3, r4
  41bd5c:	bc70      	pop	{r4, r5, r6}

0041bd5e <.LCFI3>:
  41bd5e:	4770      	bx	lr

0041bd60 <.LCFI4>:
  41bd60:	4621      	mov	r1, r4

0041bd62 <.LVL13>:
  41bd62:	4618      	mov	r0, r3

0041bd64 <.LVL14>:
  41bd64:	e7d7      	b.n	41bd16 <.LVL1>

0041bd66 <.LFE0>:
  41bd66:	bf00      	nop

Disassembly of section .text.__lo0bits%232:

0041bd68 <__lo0bits>:
  41bd68:	6803      	ldr	r3, [r0, #0]

0041bd6a <.LVL80>:
  41bd6a:	f013 0207 	ands.w	r2, r3, #7
  41bd6e:	4601      	mov	r1, r0
  41bd70:	d007      	beq.n	41bd82 <.LVL84>
  41bd72:	07da      	lsls	r2, r3, #31
  41bd74:	d421      	bmi.n	41bdba <.LVL100>
  41bd76:	0798      	lsls	r0, r3, #30

0041bd78 <.LVL81>:
  41bd78:	d421      	bmi.n	41bdbe <.LVL101+0x2>
  41bd7a:	089b      	lsrs	r3, r3, #2

0041bd7c <.LVL82>:
  41bd7c:	600b      	str	r3, [r1, #0]

0041bd7e <.LVL83>:
  41bd7e:	2002      	movs	r0, #2
  41bd80:	4770      	bx	lr

0041bd82 <.LVL84>:
  41bd82:	b298      	uxth	r0, r3

0041bd84 <.LVL85>:
  41bd84:	b198      	cbz	r0, 41bdae <.LVL96>
  41bd86:	4610      	mov	r0, r2

0041bd88 <.LVL86>:
  41bd88:	f013 0fff 	tst.w	r3, #255	; 0xff
  41bd8c:	bf04      	itt	eq
  41bd8e:	0a1b      	lsreq	r3, r3, #8

0041bd90 <.LVL87>:
  41bd90:	3008      	addeq	r0, #8

0041bd92 <.LVL88>:
  41bd92:	071a      	lsls	r2, r3, #28
  41bd94:	bf04      	itt	eq
  41bd96:	091b      	lsreq	r3, r3, #4

0041bd98 <.LVL89>:
  41bd98:	3004      	addeq	r0, #4

0041bd9a <.LVL90>:
  41bd9a:	079a      	lsls	r2, r3, #30
  41bd9c:	bf04      	itt	eq
  41bd9e:	089b      	lsreq	r3, r3, #2

0041bda0 <.LVL91>:
  41bda0:	3002      	addeq	r0, #2

0041bda2 <.LVL92>:
  41bda2:	07da      	lsls	r2, r3, #31
  41bda4:	d407      	bmi.n	41bdb6 <.LVL99>

0041bda6 <.LVL93>:
  41bda6:	085b      	lsrs	r3, r3, #1

0041bda8 <.LVL94>:
  41bda8:	d104      	bne.n	41bdb4 <.LVL98>
  41bdaa:	2020      	movs	r0, #32

0041bdac <.LVL95>:
  41bdac:	4770      	bx	lr

0041bdae <.LVL96>:
  41bdae:	0c1b      	lsrs	r3, r3, #16
  41bdb0:	2010      	movs	r0, #16
  41bdb2:	e7e9      	b.n	41bd88 <.LVL86>

0041bdb4 <.LVL98>:
  41bdb4:	3001      	adds	r0, #1

0041bdb6 <.LVL99>:
  41bdb6:	600b      	str	r3, [r1, #0]
  41bdb8:	4770      	bx	lr

0041bdba <.LVL100>:
  41bdba:	2000      	movs	r0, #0

0041bdbc <.LVL101>:
  41bdbc:	4770      	bx	lr
  41bdbe:	085b      	lsrs	r3, r3, #1

0041bdc0 <.LVL102>:
  41bdc0:	600b      	str	r3, [r1, #0]

0041bdc2 <.LVL103>:
  41bdc2:	2001      	movs	r0, #1
  41bdc4:	4770      	bx	lr

0041bdc6 <.LFE22>:
  41bdc6:	bf00      	nop

Disassembly of section .text.HmacKeyInnerHash%233:

0041bdc8 <HmacKeyInnerHash>:
{
  41bdc8:	b510      	push	{r4, lr}

0041bdca <.LCFI0>:
  41bdca:	4604      	mov	r4, r0

0041bdcc <.LVL1>:
    switch (hmac->macType) {
  41bdcc:	f890 3244 	ldrb.w	r3, [r0, #580]	; 0x244
  41bdd0:	2b05      	cmp	r3, #5
  41bdd2:	d826      	bhi.n	41be22 <.LVL11>
  41bdd4:	e8df f003 	tbb	[pc, r3]
  41bdd8:	25130d03 	.word	0x25130d03
  41bddc:	191f      	.short	0x191f
            ret = wc_Md5Update(&hmac->hash.md5, (byte*)hmac->ipad,
  41bdde:	2240      	movs	r2, #64	; 0x40
  41bde0:	f500 7180 	add.w	r1, r0, #256	; 0x100
  41bde4:	f7fe fb44 	bl	41a470 <.LFE23>

0041bde8 <.LVL2>:
    if (ret == 0)
  41bde8:	b910      	cbnz	r0, 41bdf0 <.LVL2+0x8>
        hmac->innerHashKeyed = 1;
  41bdea:	2301      	movs	r3, #1
  41bdec:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
}
  41bdf0:	bd10      	pop	{r4, pc}

0041bdf2 <.LVL3>:
            ret = wc_ShaUpdate(&hmac->hash.sha, (byte*)hmac->ipad,
  41bdf2:	2240      	movs	r2, #64	; 0x40
  41bdf4:	f500 7180 	add.w	r1, r0, #256	; 0x100
  41bdf8:	f7fe fd51 	bl	41a89e <.LFE58>

0041bdfc <.LVL4>:
            break;
  41bdfc:	e7f4      	b.n	41bde8 <.LVL2>

0041bdfe <.LVL5>:
            ret = wc_Sha256Update(&hmac->hash.sha256, (byte*)hmac->ipad,
  41bdfe:	2240      	movs	r2, #64	; 0x40
  41be00:	f500 7180 	add.w	r1, r0, #256	; 0x100
  41be04:	f7fe fd8c 	bl	41a920 <.LFE165>

0041be08 <.LVL6>:
            break;
  41be08:	e7ee      	b.n	41bde8 <.LVL2>

0041be0a <.LVL7>:
            ret = wc_Sha384Update(&hmac->hash.sha384, (byte*)hmac->ipad,
  41be0a:	2280      	movs	r2, #128	; 0x80
  41be0c:	f500 7180 	add.w	r1, r0, #256	; 0x100
  41be10:	f7fb fdc1 	bl	417996 <.LBE719>

0041be14 <.LVL8>:
            break;
  41be14:	e7e8      	b.n	41bde8 <.LVL2>

0041be16 <.LVL9>:
            ret = wc_Sha512Update(&hmac->hash.sha512, (byte*)hmac->ipad,
  41be16:	2280      	movs	r2, #128	; 0x80
  41be18:	f500 7180 	add.w	r1, r0, #256	; 0x100
  41be1c:	f7fb fd46 	bl	4178ac <.LFE178>

0041be20 <.LVL10>:
            break;
  41be20:	e7e2      	b.n	41bde8 <.LVL2>

0041be22 <.LVL11>:
    int ret = 0;
  41be22:	2000      	movs	r0, #0

0041be24 <.LVL12>:
  41be24:	e7e0      	b.n	41bde8 <.LVL2>

Disassembly of section .text.inflateReset2%234:

0041be26 <inflateReset2>:
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  41be26:	b320      	cbz	r0, 41be72 <.LCFI7>
{
  41be28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041be2a <.LCFI6>:
  41be2a:	4605      	mov	r5, r0
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  41be2c:	69c4      	ldr	r4, [r0, #28]
  41be2e:	b31c      	cbz	r4, 41be78 <.LCFI8>

0041be30 <.LVL50>:
    if (windowBits < 0) {
  41be30:	2900      	cmp	r1, #0
  41be32:	db1b      	blt.n	41be6c <.LVL57>
        wrap = (windowBits >> 4) + 1;
  41be34:	110e      	asrs	r6, r1, #4
  41be36:	3601      	adds	r6, #1

0041be38 <.LVL51>:
        if (windowBits < 48)
  41be38:	292f      	cmp	r1, #47	; 0x2f
            windowBits &= 15;
  41be3a:	bfd8      	it	le
  41be3c:	f001 010f 	andle.w	r1, r1, #15

0041be40 <.LVL52>:
    if (windowBits && (windowBits < 8 || windowBits > 15))
  41be40:	460f      	mov	r7, r1
  41be42:	f1a1 0308 	sub.w	r3, r1, #8
  41be46:	2b07      	cmp	r3, #7
  41be48:	d900      	bls.n	41be4c <.LVL52+0xc>
  41be4a:	b9c1      	cbnz	r1, 41be7e <.LVL63>
    if (state->window != Z_NULL && state->wbits != (unsigned)windowBits) {
  41be4c:	6b61      	ldr	r1, [r4, #52]	; 0x34

0041be4e <.LVL53>:
  41be4e:	b139      	cbz	r1, 41be60 <.LVL54+0x6>
  41be50:	6a63      	ldr	r3, [r4, #36]	; 0x24
  41be52:	429f      	cmp	r7, r3
  41be54:	d004      	beq.n	41be60 <.LVL54+0x6>
        ZFREE(strm, state->window);
  41be56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  41be58:	6aa8      	ldr	r0, [r5, #40]	; 0x28

0041be5a <.LVL54>:
  41be5a:	4798      	blx	r3
        state->window = Z_NULL;
  41be5c:	2300      	movs	r3, #0
  41be5e:	6363      	str	r3, [r4, #52]	; 0x34
    state->wrap = wrap;
  41be60:	60a6      	str	r6, [r4, #8]
    state->wbits = (unsigned)windowBits;
  41be62:	6267      	str	r7, [r4, #36]	; 0x24
    return inflateReset(strm);
  41be64:	4628      	mov	r0, r5
  41be66:	f001 fb19 	bl	41d49c <.LFE65>

0041be6a <.LVL56>:
  41be6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041be6c <.LVL57>:
        windowBits = -windowBits;
  41be6c:	4249      	negs	r1, r1
        wrap = 0;
  41be6e:	2600      	movs	r6, #0
  41be70:	e7e6      	b.n	41be40 <.LVL52>

0041be72 <.LCFI7>:
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  41be72:	f06f 0001 	mvn.w	r0, #1

0041be76 <.LVL60>:
  41be76:	4770      	bx	lr

0041be78 <.LCFI8>:
  41be78:	f06f 0001 	mvn.w	r0, #1

0041be7c <.LVL62>:
  41be7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041be7e <.LVL63>:
        return Z_STREAM_ERROR;
  41be7e:	f06f 0001 	mvn.w	r0, #1

0041be82 <.LVL64>:
}
  41be82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

Disassembly of section .text.init_block%235:

0041be84 <init_block>:
{
  41be84:	b410      	push	{r4}

0041be86 <.LCFI0>:
  41be86:	4604      	mov	r4, r0
  41be88:	f500 618f 	add.w	r1, r0, #1144	; 0x478
  41be8c:	4603      	mov	r3, r0
    for (n = 0; n < L_CODES;  n++) s->dyn_ltree[n].Freq = 0;
  41be8e:	2200      	movs	r2, #0

0041be90 <.LVL2>:
  41be90:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
  41be94:	3304      	adds	r3, #4
  41be96:	428b      	cmp	r3, r1
  41be98:	d1fa      	bne.n	41be90 <.LVL2>
  41be9a:	f100 0178 	add.w	r1, r0, #120	; 0x78
  41be9e:	4603      	mov	r3, r0
    for (n = 0; n < D_CODES;  n++) s->dyn_dtree[n].Freq = 0;
  41bea0:	2200      	movs	r2, #0
  41bea2:	f8a3 2988 	strh.w	r2, [r3, #2440]	; 0x988
  41bea6:	3304      	adds	r3, #4
  41bea8:	428b      	cmp	r3, r1
  41beaa:	d1fa      	bne.n	41bea2 <.LVL2+0x12>
  41beac:	f100 024c 	add.w	r2, r0, #76	; 0x4c
    for (n = 0; n < BL_CODES; n++) s->bl_tree[n].Freq = 0;
  41beb0:	2300      	movs	r3, #0
  41beb2:	f8a4 3a7c 	strh.w	r3, [r4, #2684]	; 0xa7c
  41beb6:	3404      	adds	r4, #4
  41beb8:	4294      	cmp	r4, r2
  41beba:	d1fa      	bne.n	41beb2 <.LVL2+0x22>
    s->dyn_ltree[END_BLOCK].Freq = 1;
  41bebc:	2301      	movs	r3, #1
  41bebe:	f8a0 3494 	strh.w	r3, [r0, #1172]	; 0x494
    s->opt_len = s->static_len = 0L;
  41bec2:	2300      	movs	r3, #0
  41bec4:	f241 62ac 	movw	r2, #5804	; 0x16ac
  41bec8:	5083      	str	r3, [r0, r2]
  41beca:	f241 62a8 	movw	r2, #5800	; 0x16a8
  41bece:	5083      	str	r3, [r0, r2]
    s->last_lit = s->matches = 0;
  41bed0:	f241 62b0 	movw	r2, #5808	; 0x16b0
  41bed4:	5083      	str	r3, [r0, r2]
  41bed6:	f500 50b5 	add.w	r0, r0, #5792	; 0x16a0

0041beda <.LVL3>:
  41beda:	6003      	str	r3, [r0, #0]
}
  41bedc:	f85d 4b04 	ldr.w	r4, [sp], #4

0041bee0 <.LCFI1>:
  41bee0:	4770      	bx	lr

Disassembly of section .text.wc_RsaFunction%236:

0041bee2 <wc_RsaFunction>:
{
  41bee2:	b570      	push	{r4, r5, r6, lr}

0041bee4 <.LCFI23>:
  41bee4:	b084      	sub	sp, #16

0041bee6 <.LCFI24>:
  41bee6:	9d08      	ldr	r5, [sp, #32]
  41bee8:	9c09      	ldr	r4, [sp, #36]	; 0x24
    if (key == NULL || in == NULL || inLen == 0 || out == NULL ||
  41beea:	b1fc      	cbz	r4, 41bf2c <.LCFI26>
  41beec:	b1f0      	cbz	r0, 41bf2c <.LCFI26>
  41beee:	2a00      	cmp	r2, #0
  41bef0:	bf18      	it	ne
  41bef2:	2900      	cmpne	r1, #0
  41bef4:	d01d      	beq.n	41bf32 <.LCFI26+0x6>
  41bef6:	b1e3      	cbz	r3, 41bf32 <.LCFI26+0x6>
            outLen == NULL || *outLen == 0 || type == RSA_TYPE_UNKNOWN) {
  41bef8:	681e      	ldr	r6, [r3, #0]
  41befa:	b1ee      	cbz	r6, 41bf38 <.LCFI26+0xc>
  41befc:	f1b5 3fff 	cmp.w	r5, #4294967295
  41bf00:	d01a      	beq.n	41bf38 <.LCFI26+0xc>
        ret = wc_RsaFunctionSync(in, inLen, out, outLen, type, key, rng);
  41bf02:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  41bf04:	9602      	str	r6, [sp, #8]
  41bf06:	9401      	str	r4, [sp, #4]
  41bf08:	9500      	str	r5, [sp, #0]
  41bf0a:	f7f9 f957 	bl	4151bc <.LFE1>

0041bf0e <.LVL144>:
    if (ret < 0 && ret != WC_PENDING_E) {
  41bf0e:	1e05      	subs	r5, r0, #0
  41bf10:	da09      	bge.n	41bf26 <.LVL146>
  41bf12:	f115 0f6c 	cmn.w	r5, #108	; 0x6c
  41bf16:	d006      	beq.n	41bf26 <.LVL146>
        key->state = RSA_STATE_NONE;
  41bf18:	2200      	movs	r2, #0
  41bf1a:	f241 134c 	movw	r3, #4428	; 0x114c
  41bf1e:	50e2      	str	r2, [r4, r3]
        wc_RsaCleanup(key);
  41bf20:	4620      	mov	r0, r4

0041bf22 <.LVL145>:
  41bf22:	f7ff fcd7 	bl	41b8d4 <.LFE42>

0041bf26 <.LVL146>:
}
  41bf26:	4628      	mov	r0, r5
  41bf28:	b004      	add	sp, #16

0041bf2a <.LCFI25>:
  41bf2a:	bd70      	pop	{r4, r5, r6, pc}

0041bf2c <.LCFI26>:
        return BAD_FUNC_ARG;
  41bf2c:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  41bf30:	e7f9      	b.n	41bf26 <.LVL146>
  41bf32:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  41bf36:	e7f6      	b.n	41bf26 <.LVL146>
  41bf38:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  41bf3c:	e7f3      	b.n	41bf26 <.LVL146>

Disassembly of section .text.Console_UART_Read%237:

0041bf40 <Console_UART_Read>:
    while ((readQueue.numElem < readQueue.elemArrSz) && (rdBytes < count))
  41bf40:	4b15      	ldr	r3, [pc, #84]	; (41bf98 <.LCFI8+0x4>)
  41bf42:	6898      	ldr	r0, [r3, #8]

0041bf44 <.LVL47>:
  41bf44:	691b      	ldr	r3, [r3, #16]
  41bf46:	4298      	cmp	r0, r3
  41bf48:	d222      	bcs.n	41bf90 <.LBE13>
  41bf4a:	b30a      	cbz	r2, 41bf90 <.LBE13>
{
  41bf4c:	b5f0      	push	{r4, r5, r6, r7, lr}

0041bf4e <.LCFI6>:
    while ((readQueue.numElem < readQueue.elemArrSz) && (rdBytes < count))
  41bf4e:	2000      	movs	r0, #0

0041bf50 <.LBB10>:
    q->qPkts[q->nextPos] = pkt;
  41bf50:	4b11      	ldr	r3, [pc, #68]	; (41bf98 <.LCFI8+0x4>)
  41bf52:	2701      	movs	r7, #1
    (q->nextPos < (q->elemArrSz - 1)) ? q->nextPos++ : (q->nextPos = 0);
  41bf54:	4686      	mov	lr, r0
  41bf56:	e009      	b.n	41bf6c <.LBB13>

0041bf58 <.LVL48>:
  41bf58:	3401      	adds	r4, #1
  41bf5a:	605c      	str	r4, [r3, #4]
    q->numElem++;
  41bf5c:	689c      	ldr	r4, [r3, #8]
  41bf5e:	3401      	adds	r4, #1
  41bf60:	609c      	str	r4, [r3, #8]

0041bf62 <.LBE10>:
        rdBytes++;
  41bf62:	3001      	adds	r0, #1
    while ((readQueue.numElem < readQueue.elemArrSz) && (rdBytes < count))
  41bf64:	4282      	cmp	r2, r0
  41bf66:	d915      	bls.n	41bf94 <.LCFI8>
  41bf68:	42a5      	cmp	r5, r4
  41bf6a:	d910      	bls.n	41bf8e <.LVL53>

0041bf6c <.LBB13>:
    q->qPkts[q->nextPos] = pkt;
  41bf6c:	685d      	ldr	r5, [r3, #4]
  41bf6e:	68dc      	ldr	r4, [r3, #12]
  41bf70:	eb04 06c5 	add.w	r6, r4, r5, lsl #3
  41bf74:	eb01 0c00 	add.w	ip, r1, r0

0041bf78 <.LVL52>:
  41bf78:	f844 c035 	str.w	ip, [r4, r5, lsl #3]
  41bf7c:	6077      	str	r7, [r6, #4]
    (q->nextPos < (q->elemArrSz - 1)) ? q->nextPos++ : (q->nextPos = 0);
  41bf7e:	685c      	ldr	r4, [r3, #4]
  41bf80:	691d      	ldr	r5, [r3, #16]
  41bf82:	1e6e      	subs	r6, r5, #1
  41bf84:	42b4      	cmp	r4, r6
  41bf86:	d3e7      	bcc.n	41bf58 <.LVL48>
  41bf88:	f8c3 e004 	str.w	lr, [r3, #4]
  41bf8c:	e7e6      	b.n	41bf5c <.LVL48+0x4>

0041bf8e <.LVL53>:
  41bf8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0041bf90 <.LBE13>:
    size_t rdBytes = 0;
  41bf90:	2000      	movs	r0, #0
  41bf92:	4770      	bx	lr

0041bf94 <.LCFI8>:
}
  41bf94:	bdf0      	pop	{r4, r5, r6, r7, pc}
  41bf96:	bf00      	nop
  41bf98:	2040d72c 	.word	0x2040d72c

Disassembly of section .text.inflateResetKeep%238:

0041bf9c <inflateResetKeep>:
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  41bf9c:	b320      	cbz	r0, 41bfe8 <.LVL38>
  41bf9e:	69c3      	ldr	r3, [r0, #28]
  41bfa0:	b32b      	cbz	r3, 41bfee <.LVL40>

0041bfa2 <.LVL36>:
    strm->total_in = strm->total_out = state->total = 0;
  41bfa2:	2100      	movs	r1, #0
  41bfa4:	61d9      	str	r1, [r3, #28]
  41bfa6:	6141      	str	r1, [r0, #20]
  41bfa8:	6081      	str	r1, [r0, #8]
    strm->msg = Z_NULL;
  41bfaa:	6181      	str	r1, [r0, #24]
    if (state->wrap)        /* to support ill-conceived Java test suite */
  41bfac:	6899      	ldr	r1, [r3, #8]
  41bfae:	b111      	cbz	r1, 41bfb6 <.LVL36+0x14>
        strm->adler = state->wrap & 1;
  41bfb0:	f001 0101 	and.w	r1, r1, #1
  41bfb4:	6301      	str	r1, [r0, #48]	; 0x30
    state->mode = HEAD;
  41bfb6:	2000      	movs	r0, #0

0041bfb8 <.LVL37>:
  41bfb8:	7018      	strb	r0, [r3, #0]
    state->last = 0;
  41bfba:	6058      	str	r0, [r3, #4]
    state->havedict = 0;
  41bfbc:	60d8      	str	r0, [r3, #12]
    state->dmax = 32768U;
  41bfbe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  41bfc2:	615a      	str	r2, [r3, #20]
    state->head = Z_NULL;
  41bfc4:	6218      	str	r0, [r3, #32]
    state->hold = 0;
  41bfc6:	6398      	str	r0, [r3, #56]	; 0x38
    state->bits = 0;
  41bfc8:	63d8      	str	r0, [r3, #60]	; 0x3c
    state->lencode = state->distcode = state->next = state->codes;
  41bfca:	f503 62a6 	add.w	r2, r3, #1328	; 0x530
  41bfce:	66da      	str	r2, [r3, #108]	; 0x6c
  41bfd0:	651a      	str	r2, [r3, #80]	; 0x50
  41bfd2:	64da      	str	r2, [r3, #76]	; 0x4c
    state->sane = 1;
  41bfd4:	f503 52de 	add.w	r2, r3, #7104	; 0x1bc0
  41bfd8:	2101      	movs	r1, #1
  41bfda:	6011      	str	r1, [r2, #0]
    state->back = -1;
  41bfdc:	f04f 31ff 	mov.w	r1, #4294967295
  41bfe0:	f641 32c4 	movw	r2, #7108	; 0x1bc4
  41bfe4:	5099      	str	r1, [r3, r2]
    return Z_OK;
  41bfe6:	4770      	bx	lr

0041bfe8 <.LVL38>:
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  41bfe8:	f06f 0001 	mvn.w	r0, #1

0041bfec <.LVL39>:
  41bfec:	4770      	bx	lr

0041bfee <.LVL40>:
  41bfee:	f06f 0001 	mvn.w	r0, #1

0041bff2 <.LVL41>:
}
  41bff2:	4770      	bx	lr

Disassembly of section .text.wc_AesSetKey%239:

0041bff4 <wc_AesSetKey>:
{
  41bff4:	b570      	push	{r4, r5, r6, lr}

0041bff6 <.LCFI4>:
    if (!((keylen == 16) || (keylen == 24) || (keylen == 32)))
  41bff6:	f022 0408 	bic.w	r4, r2, #8
  41bffa:	2c10      	cmp	r4, #16
  41bffc:	d001      	beq.n	41c002 <.LVL17>
  41bffe:	2a20      	cmp	r2, #32
  41c000:	d11d      	bne.n	41c03e <.LVL22>

0041c002 <.LVL17>:
    if ((PMC_REGS->PMC_PCSR1 & (AesPmcBit)) != (AesPmcBit))
  41c002:	4c10      	ldr	r4, [pc, #64]	; (41c044 <.LVL24>)
  41c004:	f8d4 4108 	ldr.w	r4, [r4, #264]	; 0x108
  41c008:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
  41c00c:	d108      	bne.n	41c020 <.LVL18+0x8>
        PMC_REGS->PMC_PCER1 = AesPmcBit;
  41c00e:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
  41c012:	4c0c      	ldr	r4, [pc, #48]	; (41c044 <.LVL24>)
  41c014:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100

0041c018 <.LVL18>:
        AES_REGS->AES_CR = AES_CR_SWRST_Msk;
  41c018:	f44f 7580 	mov.w	r5, #256	; 0x100
  41c01c:	4c0a      	ldr	r4, [pc, #40]	; (41c048 <.LVL24+0x4>)
  41c01e:	6025      	str	r5, [r4, #0]
  41c020:	461e      	mov	r6, r3
  41c022:	4614      	mov	r4, r2
  41c024:	4605      	mov	r5, r0
    memcpy(aes->key_ce, userKey, keylen);
  41c026:	f500 7096 	add.w	r0, r0, #300	; 0x12c

0041c02a <.LVL19>:
  41c02a:	f7fa f9f7 	bl	41641c <memcpy>

0041c02e <.LVL20>:
    aes->keylen = keylen;
  41c02e:	f8c5 40f4 	str.w	r4, [r5, #244]	; 0xf4
    wc_AesSetIV(aes, iv);
  41c032:	4631      	mov	r1, r6
  41c034:	4628      	mov	r0, r5
  41c036:	f000 fdef 	bl	41cc18 <.LFE148>

0041c03a <.LVL21>:
    return 0;
  41c03a:	2000      	movs	r0, #0
  41c03c:	bd70      	pop	{r4, r5, r6, pc}

0041c03e <.LVL22>:
        return BAD_FUNC_ARG;
  41c03e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041c042 <.LVL23>:
}
  41c042:	bd70      	pop	{r4, r5, r6, pc}

0041c044 <.LVL24>:
  41c044:	400e0600 	.word	0x400e0600
  41c048:	4006c000 	.word	0x4006c000

Disassembly of section .text.GetInt%240:

0041c04c <GetInt>:
{
  41c04c:	b570      	push	{r4, r5, r6, lr}

0041c04e <.LCFI45>:
  41c04e:	b082      	sub	sp, #8

0041c050 <.LCFI46>:
  41c050:	4606      	mov	r6, r0
  41c052:	460c      	mov	r4, r1
  41c054:	4615      	mov	r5, r2
    word32 idx = *inOutIdx;
  41c056:	6812      	ldr	r2, [r2, #0]

0041c058 <.LVL283>:
  41c058:	9201      	str	r2, [sp, #4]
    ret = GetASNInt(input, &idx, &length, maxIdx);
  41c05a:	466a      	mov	r2, sp
  41c05c:	a901      	add	r1, sp, #4

0041c05e <.LVL284>:
  41c05e:	4620      	mov	r0, r4

0041c060 <.LVL285>:
  41c060:	f7ff fd62 	bl	41bb28 <.LFE163>

0041c064 <.LVL286>:
    if (ret != 0)
  41c064:	4603      	mov	r3, r0
  41c066:	b110      	cbz	r0, 41c06e <.LCFI48>

0041c068 <.LVL287>:
}
  41c068:	4618      	mov	r0, r3
  41c06a:	b002      	add	sp, #8

0041c06c <.LCFI47>:
  41c06c:	bd70      	pop	{r4, r5, r6, pc}

0041c06e <.LCFI48>:
    if (mp_init(mpi) != MP_OKAY)
  41c06e:	4630      	mov	r0, r6

0041c070 <.LVL289>:
  41c070:	f001 fd3e 	bl	41daf0 <.LFE202>

0041c074 <.LVL290>:
  41c074:	b990      	cbnz	r0, 41c09c <.LVL292+0x6>
    if (mp_read_unsigned_bin(mpi, (byte*)input + idx, length) != 0) {
  41c076:	9a00      	ldr	r2, [sp, #0]
  41c078:	9901      	ldr	r1, [sp, #4]
  41c07a:	4421      	add	r1, r4
  41c07c:	4630      	mov	r0, r6
  41c07e:	f001 fe05 	bl	41dc8c <.LFE72>

0041c082 <.LVL291>:
  41c082:	4603      	mov	r3, r0
  41c084:	b920      	cbnz	r0, 41c090 <.LVL291+0xe>
    *inOutIdx = idx + length;
  41c086:	9900      	ldr	r1, [sp, #0]
  41c088:	9a01      	ldr	r2, [sp, #4]
  41c08a:	440a      	add	r2, r1
  41c08c:	602a      	str	r2, [r5, #0]
    return 0;
  41c08e:	e7eb      	b.n	41c068 <.LVL287>
        mp_clear(mpi);
  41c090:	4630      	mov	r0, r6
  41c092:	f001 fda4 	bl	41dbde <.LFE179>

0041c096 <.LVL292>:
        return ASN_GETINT_E;
  41c096:	f06f 038d 	mvn.w	r3, #141	; 0x8d
  41c09a:	e7e5      	b.n	41c068 <.LVL287>
        return MP_INIT_E;
  41c09c:	f06f 036d 	mvn.w	r3, #109	; 0x6d
  41c0a0:	e7e2      	b.n	41c068 <.LVL287>

Disassembly of section .text.SetLength%241:

0041c0a2 <SetLength>:
    if (length < ASN_LONG_LENGTH)
  41c0a2:	287f      	cmp	r0, #127	; 0x7f
  41c0a4:	d90b      	bls.n	41c0be <.LCFI102>
{
  41c0a6:	b430      	push	{r4, r5}

0041c0a8 <.LBB168>:
        if (value >> ((i - 1) * WOLFSSL_BIT_SIZE))
  41c0a8:	0e03      	lsrs	r3, r0, #24
  41c0aa:	d111      	bne.n	41c0d0 <.LVL545>

0041c0ac <.LVL534>:
  41c0ac:	0c03      	lsrs	r3, r0, #16
  41c0ae:	d10b      	bne.n	41c0c8 <.LVL543>

0041c0b0 <.LVL535>:
  41c0b0:	0a03      	lsrs	r3, r0, #8
  41c0b2:	d10b      	bne.n	41c0cc <.LVL544>

0041c0b4 <.LVL536>:
  41c0b4:	b930      	cbnz	r0, 41c0c4 <.LBB171>

0041c0b6 <.LBE168>:
        output[i++] = (byte)(BytePrecision(length) | ASN_LONG_LENGTH);
  41c0b6:	2380      	movs	r3, #128	; 0x80
  41c0b8:	700b      	strb	r3, [r1, #0]

0041c0ba <.LVL538>:
  41c0ba:	2001      	movs	r0, #1

0041c0bc <.LVL539>:
  41c0bc:	e01a      	b.n	41c0f4 <.LVL550>

0041c0be <.LCFI102>:
        output[i++] = (byte)length;
  41c0be:	7008      	strb	r0, [r1, #0]
  41c0c0:	2001      	movs	r0, #1

0041c0c2 <.LVL541>:
  41c0c2:	4770      	bx	lr

0041c0c4 <.LBB171>:
    for (i = sizeof(value); i; --i)
  41c0c4:	2501      	movs	r5, #1
  41c0c6:	e004      	b.n	41c0d2 <.LBE171>

0041c0c8 <.LVL543>:
  41c0c8:	2503      	movs	r5, #3
  41c0ca:	e002      	b.n	41c0d2 <.LBE171>

0041c0cc <.LVL544>:
  41c0cc:	2502      	movs	r5, #2
  41c0ce:	e000      	b.n	41c0d2 <.LBE171>

0041c0d0 <.LVL545>:
        if (value >> ((i - 1) * WOLFSSL_BIT_SIZE))
  41c0d0:	2504      	movs	r5, #4

0041c0d2 <.LBE171>:
        output[i++] = (byte)(BytePrecision(length) | ASN_LONG_LENGTH);
  41c0d2:	f065 037f 	orn	r3, r5, #127	; 0x7f
  41c0d6:	700b      	strb	r3, [r1, #0]

0041c0d8 <.LVL547>:
  41c0d8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
  41c0dc:	442b      	add	r3, r5
  41c0de:	00db      	lsls	r3, r3, #3
  41c0e0:	460a      	mov	r2, r1
  41c0e2:	4429      	add	r1, r5

0041c0e4 <.LVL548>:
            output[i] = (byte)(length >> ((j - 1) * WOLFSSL_BIT_SIZE));
  41c0e4:	fa20 f403 	lsr.w	r4, r0, r3
  41c0e8:	f802 4f01 	strb.w	r4, [r2, #1]!
  41c0ec:	3b08      	subs	r3, #8
        for (j = BytePrecision(length); j; --j) {
  41c0ee:	428a      	cmp	r2, r1
  41c0f0:	d1f8      	bne.n	41c0e4 <.LVL548>
  41c0f2:	1c68      	adds	r0, r5, #1

0041c0f4 <.LVL550>:
}
  41c0f4:	bc30      	pop	{r4, r5}

0041c0f6 <.LCFI104>:
  41c0f6:	4770      	bx	lr

Disassembly of section .text.bi_windup%242:

0041c0f8 <bi_windup>:
{
  41c0f8:	b410      	push	{r4}

0041c0fa <.LCFI17>:
    if (s->bi_valid > 8) {
  41c0fa:	f241 63bc 	movw	r3, #5820	; 0x16bc
  41c0fe:	58c3      	ldr	r3, [r0, r3]
  41c100:	2b08      	cmp	r3, #8
  41c102:	dc13      	bgt.n	41c12c <.LCFI19>
    } else if (s->bi_valid > 0) {
  41c104:	2b00      	cmp	r3, #0
  41c106:	dd07      	ble.n	41c118 <.LCFI17+0x1e>
        put_byte(s, (Byte)s->bi_buf);
  41c108:	6882      	ldr	r2, [r0, #8]
  41c10a:	6943      	ldr	r3, [r0, #20]
  41c10c:	1c59      	adds	r1, r3, #1
  41c10e:	6141      	str	r1, [r0, #20]
  41c110:	f241 61b8 	movw	r1, #5816	; 0x16b8
  41c114:	5a41      	ldrh	r1, [r0, r1]
  41c116:	54d1      	strb	r1, [r2, r3]
    s->bi_buf = 0;
  41c118:	2300      	movs	r3, #0
  41c11a:	f241 62b8 	movw	r2, #5816	; 0x16b8
  41c11e:	5283      	strh	r3, [r0, r2]
    s->bi_valid = 0;
  41c120:	f241 62bc 	movw	r2, #5820	; 0x16bc
  41c124:	5083      	str	r3, [r0, r2]
}
  41c126:	f85d 4b04 	ldr.w	r4, [sp], #4

0041c12a <.LCFI18>:
  41c12a:	4770      	bx	lr

0041c12c <.LCFI19>:
        put_short(s, s->bi_buf);
  41c12c:	6881      	ldr	r1, [r0, #8]
  41c12e:	6942      	ldr	r2, [r0, #20]
  41c130:	1c53      	adds	r3, r2, #1
  41c132:	6143      	str	r3, [r0, #20]
  41c134:	f241 63b8 	movw	r3, #5816	; 0x16b8
  41c138:	5ac4      	ldrh	r4, [r0, r3]
  41c13a:	548c      	strb	r4, [r1, r2]
  41c13c:	6881      	ldr	r1, [r0, #8]
  41c13e:	6942      	ldr	r2, [r0, #20]
  41c140:	1c54      	adds	r4, r2, #1
  41c142:	6144      	str	r4, [r0, #20]
  41c144:	5ac3      	ldrh	r3, [r0, r3]
  41c146:	0a1b      	lsrs	r3, r3, #8
  41c148:	548b      	strb	r3, [r1, r2]
  41c14a:	e7e5      	b.n	41c118 <.LCFI17+0x1e>

Disassembly of section .rodata%243:

0041c14c <.rodata%243>:
  41c14c:	61766e69 	.word	0x61766e69
  41c150:	2064696c 	.word	0x2064696c
  41c154:	74736964 	.word	0x74736964
  41c158:	65636e61 	.word	0x65636e61
  41c15c:	6f6f7420 	.word	0x6f6f7420
  41c160:	72616620 	.word	0x72616620
  41c164:	63616220 	.word	0x63616220
  41c168:	0000006b 	.word	0x0000006b
  41c16c:	61766e69 	.word	0x61766e69
  41c170:	2064696c 	.word	0x2064696c
  41c174:	74736964 	.word	0x74736964
  41c178:	65636e61 	.word	0x65636e61
  41c17c:	646f6320 	.word	0x646f6320
  41c180:	00000065 	.word	0x00000065
  41c184:	61766e69 	.word	0x61766e69
  41c188:	2064696c 	.word	0x2064696c
  41c18c:	6574696c 	.word	0x6574696c
  41c190:	2f6c6172 	.word	0x2f6c6172
  41c194:	676e656c 	.word	0x676e656c
  41c198:	63206874 	.word	0x63206874
  41c19c:	0065646f 	.word	0x0065646f

Disassembly of section .text.SYS_TIME_RemoveFromList%244:

0041c1a0 <SYS_TIME_RemoveFromList>:
{
  41c1a0:	4601      	mov	r1, r0
    SYS_TIME_TIMER_OBJ* tmr = counter->tmrActive;
  41c1a2:	4b13      	ldr	r3, [pc, #76]	; (41c1f0 <.LVL50+0x2>)
  41c1a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30

0041c1a6 <.LVL38>:
    while ((tmr != NULL) && (tmr != delTimer))
  41c1a6:	b10a      	cbz	r2, 41c1ac <.LVL38+0x6>
  41c1a8:	4282      	cmp	r2, r0
  41c1aa:	d103      	bne.n	41c1b4 <.LVL41>
    tmr = counter->tmrActive;
  41c1ac:	4613      	mov	r3, r2
    SYS_TIME_TIMER_OBJ* prevTmr = NULL;
  41c1ae:	2200      	movs	r2, #0

0041c1b0 <.LVL39>:
  41c1b0:	e005      	b.n	41c1be <.LVL43>

0041c1b2 <.LVL40>:
        tmr = tmr->tmrNext;
  41c1b2:	461a      	mov	r2, r3

0041c1b4 <.LVL41>:
  41c1b4:	6993      	ldr	r3, [r2, #24]

0041c1b6 <.LVL42>:
    while ((tmr != NULL) && (tmr != delTimer))
  41c1b6:	2b00      	cmp	r3, #0
  41c1b8:	bf18      	it	ne
  41c1ba:	4299      	cmpne	r1, r3
  41c1bc:	d1f9      	bne.n	41c1b2 <.LVL40>

0041c1be <.LVL43>:
    if (tmr == NULL)
  41c1be:	b1ab      	cbz	r3, 41c1ec <.LCFI4>
{
  41c1c0:	b410      	push	{r4}

0041c1c2 <.LCFI1>:
    if (delTimer->tmrNext != NULL)
  41c1c2:	698b      	ldr	r3, [r1, #24]

0041c1c4 <.LVL44>:
  41c1c4:	b11b      	cbz	r3, 41c1ce <.LVL45+0x6>
        delTimer->tmrNext->relativeTimePending += delTimer->relativeTimePending;
  41c1c6:	6898      	ldr	r0, [r3, #8]

0041c1c8 <.LVL45>:
  41c1c8:	688c      	ldr	r4, [r1, #8]
  41c1ca:	4420      	add	r0, r4
  41c1cc:	6098      	str	r0, [r3, #8]
    if (prevTmr == NULL)
  41c1ce:	b13a      	cbz	r2, 41c1e0 <.LCFI3>
        prevTmr->tmrNext = delTimer->tmrNext;
  41c1d0:	698b      	ldr	r3, [r1, #24]
  41c1d2:	6193      	str	r3, [r2, #24]
    bool isHeadTimerUpdated = false;
  41c1d4:	2000      	movs	r0, #0

0041c1d6 <.LVL46>:
    delTimer->tmrNext = NULL;
  41c1d6:	2300      	movs	r3, #0
  41c1d8:	618b      	str	r3, [r1, #24]
}
  41c1da:	f85d 4b04 	ldr.w	r4, [sp], #4

0041c1de <.LCFI2>:
  41c1de:	4770      	bx	lr

0041c1e0 <.LCFI3>:
        counter->tmrActive = counter->tmrActive->tmrNext;
  41c1e0:	4b03      	ldr	r3, [pc, #12]	; (41c1f0 <.LVL50+0x2>)
  41c1e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  41c1e4:	6992      	ldr	r2, [r2, #24]
  41c1e6:	631a      	str	r2, [r3, #48]	; 0x30

0041c1e8 <.LVL48>:
        isHeadTimerUpdated = true;
  41c1e8:	2001      	movs	r0, #1
  41c1ea:	e7f4      	b.n	41c1d6 <.LVL46>

0041c1ec <.LCFI4>:
        return isHeadTimerUpdated;
  41c1ec:	2000      	movs	r0, #0

0041c1ee <.LVL50>:
  41c1ee:	4770      	bx	lr
  41c1f0:	2040d624 	.word	0x2040d624

Disassembly of section .text.wc_ecc_curve_load_item%245:

0041c1f4 <wc_ecc_curve_load_item>:
{
  41c1f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0041c1f8 <.LCFI6>:
    if (curve->spec_use >= curve->spec_count) {
  41c1f8:	6a14      	ldr	r4, [r2, #32]
  41c1fa:	69d6      	ldr	r6, [r2, #28]
  41c1fc:	42b4      	cmp	r4, r6
  41c1fe:	d21e      	bcs.n	41c23e <.LVL39>
  41c200:	461f      	mov	r7, r3
  41c202:	4616      	mov	r6, r2
  41c204:	460d      	mov	r5, r1
  41c206:	4680      	mov	r8, r0
    *dst = &curve->spec_ints[curve->spec_use++];
  41c208:	6990      	ldr	r0, [r2, #24]

0041c20a <.LVL31>:
  41c20a:	1c63      	adds	r3, r4, #1

0041c20c <.LVL32>:
  41c20c:	6213      	str	r3, [r2, #32]
  41c20e:	f44f 730a 	mov.w	r3, #552	; 0x228
  41c212:	fb03 0004 	mla	r0, r3, r4, r0
  41c216:	6008      	str	r0, [r1, #0]
    err = mp_init(*dst);
  41c218:	f001 fc6a 	bl	41daf0 <.LFE202>

0041c21c <.LVL33>:
    if (err == MP_OKAY) {
  41c21c:	4603      	mov	r3, r0
  41c21e:	b110      	cbz	r0, 41c226 <.LVL35>

0041c220 <.LVL34>:
}
  41c220:	4618      	mov	r0, r3
  41c222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041c226 <.LVL35>:
        curve->load_mask |= mask;
  41c226:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
  41c22a:	431f      	orrs	r7, r3
  41c22c:	f886 7024 	strb.w	r7, [r6, #36]	; 0x24
        err = mp_read_radix(*dst, src, 16);
  41c230:	2210      	movs	r2, #16
  41c232:	4641      	mov	r1, r8
  41c234:	6828      	ldr	r0, [r5, #0]

0041c236 <.LVL36>:
  41c236:	f7fd fae5 	bl	419804 <mp_read_radix>

0041c23a <.LVL37>:
  41c23a:	4603      	mov	r3, r0

0041c23c <.LVL38>:
  41c23c:	e7f0      	b.n	41c220 <.LVL34>

0041c23e <.LVL39>:
        return ECC_BAD_ARG_E;
  41c23e:	f06f 03a9 	mvn.w	r3, #169	; 0xa9

0041c242 <.LVL40>:
  41c242:	e7ed      	b.n	41c220 <.LVL34>

Disassembly of section .text.__libc_init_array%246:

0041c244 <__libc_init_array>:
  41c244:	b570      	push	{r4, r5, r6, lr}

0041c246 <.LCFI0>:
  41c246:	4e0f      	ldr	r6, [pc, #60]	; (41c284 <.LVL13+0x2>)
  41c248:	4d0f      	ldr	r5, [pc, #60]	; (41c288 <.LVL13+0x6>)
  41c24a:	1b76      	subs	r6, r6, r5

0041c24c <.LVL0>:
  41c24c:	10b6      	asrs	r6, r6, #2

0041c24e <.LVL1>:
  41c24e:	bf18      	it	ne
  41c250:	2400      	movne	r4, #0
  41c252:	d005      	beq.n	41c260 <.LVL5>

0041c254 <.LVL2>:
  41c254:	3401      	adds	r4, #1

0041c256 <.LVL3>:
  41c256:	f855 3b04 	ldr.w	r3, [r5], #4
  41c25a:	4798      	blx	r3

0041c25c <.LVL4>:
  41c25c:	42a6      	cmp	r6, r4
  41c25e:	d1f9      	bne.n	41c254 <.LVL2>

0041c260 <.LVL5>:
  41c260:	4e0a      	ldr	r6, [pc, #40]	; (41c28c <.LVL13+0xa>)

0041c262 <.LVL6>:
  41c262:	4d0b      	ldr	r5, [pc, #44]	; (41c290 <.LVL13+0xe>)
  41c264:	1b76      	subs	r6, r6, r5
  41c266:	f7e3 ff7f 	bl	400168 <_init>

0041c26a <.LVL7>:
  41c26a:	10b6      	asrs	r6, r6, #2

0041c26c <.LVL8>:
  41c26c:	bf18      	it	ne
  41c26e:	2400      	movne	r4, #0
  41c270:	d006      	beq.n	41c280 <.LVL12>

0041c272 <.LVL9>:
  41c272:	3401      	adds	r4, #1

0041c274 <.LVL10>:
  41c274:	f855 3b04 	ldr.w	r3, [r5], #4
  41c278:	4798      	blx	r3

0041c27a <.LVL11>:
  41c27a:	42a6      	cmp	r6, r4
  41c27c:	d1f9      	bne.n	41c272 <.LVL9>
  41c27e:	bd70      	pop	{r4, r5, r6, pc}

0041c280 <.LVL12>:
  41c280:	bd70      	pop	{r4, r5, r6, pc}

0041c282 <.LVL13>:
  41c282:	bf00      	nop
  41c284:	00400174 	.word	0x00400174
  41c288:	00400174 	.word	0x00400174
  41c28c:	0040017c 	.word	0x0040017c
  41c290:	00400174 	.word	0x00400174

Disassembly of section .text.fp_cmp_d%247:

0041c294 <fp_cmp_d>:
{
  41c294:	b410      	push	{r4}

0041c296 <.LCFI10>:
  if (a->used == 0 && b == 0)
  41c296:	6804      	ldr	r4, [r0, #0]
  41c298:	fab4 f284 	clz	r2, r4
  41c29c:	0952      	lsrs	r2, r2, #5
  41c29e:	460b      	mov	r3, r1
  41c2a0:	b911      	cbnz	r1, 41c2a8 <.LVL93>
  41c2a2:	b10a      	cbz	r2, 41c2a8 <.LVL93>
    return FP_EQ;
  41c2a4:	2000      	movs	r0, #0

0041c2a6 <.LVL92>:
  41c2a6:	e007      	b.n	41c2b8 <.LVL94>

0041c2a8 <.LVL93>:
  if ((b && a->used == 0) || a->sign == FP_NEG) {
  41c2a8:	b103      	cbz	r3, 41c2ac <.LVL93+0x4>
  41c2aa:	b98a      	cbnz	r2, 41c2d0 <.LVL97>
  41c2ac:	6842      	ldr	r2, [r0, #4]
  41c2ae:	2a01      	cmp	r2, #1
  41c2b0:	d011      	beq.n	41c2d6 <.LVL99>
  if (a->used > 1) {
  41c2b2:	2c01      	cmp	r4, #1
  41c2b4:	dd03      	ble.n	41c2be <.LCFI12>
    return FP_GT;
  41c2b6:	2001      	movs	r0, #1

0041c2b8 <.LVL94>:
}
  41c2b8:	f85d 4b04 	ldr.w	r4, [sp], #4

0041c2bc <.LCFI11>:
  41c2bc:	4770      	bx	lr

0041c2be <.LCFI12>:
  if (a->dp[0] > b) {
  41c2be:	6880      	ldr	r0, [r0, #8]

0041c2c0 <.LVL96>:
  41c2c0:	4283      	cmp	r3, r0
  41c2c2:	d30b      	bcc.n	41c2dc <.LVL100+0x2>
  } else if (a->dp[0] < b) {
  41c2c4:	4283      	cmp	r3, r0
  41c2c6:	f04f 30ff 	mov.w	r0, #4294967295
  41c2ca:	bf98      	it	ls
  41c2cc:	2000      	movls	r0, #0
  41c2ce:	e7f3      	b.n	41c2b8 <.LVL94>

0041c2d0 <.LVL97>:
    return FP_LT;
  41c2d0:	f04f 30ff 	mov.w	r0, #4294967295

0041c2d4 <.LVL98>:
  41c2d4:	e7f0      	b.n	41c2b8 <.LVL94>

0041c2d6 <.LVL99>:
  41c2d6:	f04f 30ff 	mov.w	r0, #4294967295

0041c2da <.LVL100>:
  41c2da:	e7ed      	b.n	41c2b8 <.LVL94>
    return FP_GT;
  41c2dc:	2001      	movs	r0, #1
  41c2de:	e7eb      	b.n	41c2b8 <.LVL94>

Disassembly of section .text.flush_pending%248:

0041c2e0 <flush_pending>:
{
  41c2e0:	b570      	push	{r4, r5, r6, lr}

0041c2e2 <.LCFI6>:
  41c2e2:	4605      	mov	r5, r0
    deflate_state *s = strm->state;
  41c2e4:	69c6      	ldr	r6, [r0, #28]
    _tr_flush_bits(s);
  41c2e6:	4630      	mov	r0, r6

0041c2e8 <.LVL106>:
  41c2e8:	f001 fd68 	bl	41ddbc <_tr_flush_bits>

0041c2ec <.LVL107>:
    len = s->pending;
  41c2ec:	6974      	ldr	r4, [r6, #20]

0041c2ee <.LVL108>:
  41c2ee:	692b      	ldr	r3, [r5, #16]
  41c2f0:	429c      	cmp	r4, r3
  41c2f2:	bf28      	it	cs
  41c2f4:	461c      	movcs	r4, r3
    if (len == 0) return;
  41c2f6:	b904      	cbnz	r4, 41c2fa <.LVL111>

0041c2f8 <.LVL110>:
  41c2f8:	bd70      	pop	{r4, r5, r6, pc}

0041c2fa <.LVL111>:
    zmemcpy(strm->next_out, s->pending_out, len);
  41c2fa:	4622      	mov	r2, r4
  41c2fc:	6931      	ldr	r1, [r6, #16]
  41c2fe:	68e8      	ldr	r0, [r5, #12]
  41c300:	f7fa f88c 	bl	41641c <memcpy>

0041c304 <.LVL112>:
    strm->next_out  += len;
  41c304:	68eb      	ldr	r3, [r5, #12]
  41c306:	4423      	add	r3, r4
  41c308:	60eb      	str	r3, [r5, #12]
    s->pending_out  += len;
  41c30a:	6933      	ldr	r3, [r6, #16]
  41c30c:	4423      	add	r3, r4
  41c30e:	6133      	str	r3, [r6, #16]
    strm->total_out += len;
  41c310:	696b      	ldr	r3, [r5, #20]
  41c312:	4423      	add	r3, r4
  41c314:	616b      	str	r3, [r5, #20]
    strm->avail_out  -= len;
  41c316:	692b      	ldr	r3, [r5, #16]
  41c318:	1b1b      	subs	r3, r3, r4
  41c31a:	612b      	str	r3, [r5, #16]
    s->pending -= len;
  41c31c:	6973      	ldr	r3, [r6, #20]
  41c31e:	1b1c      	subs	r4, r3, r4

0041c320 <.LVL113>:
  41c320:	6174      	str	r4, [r6, #20]
    if (s->pending == 0) {
  41c322:	2c00      	cmp	r4, #0
  41c324:	d1e8      	bne.n	41c2f8 <.LVL110>
        s->pending_out = s->pending_buf;
  41c326:	68b3      	ldr	r3, [r6, #8]
  41c328:	6133      	str	r3, [r6, #16]
  41c32a:	e7e5      	b.n	41c2f8 <.LVL110>

Disassembly of section .text._tr_init%249:

0041c32c <_tr_init>:
{
  41c32c:	b508      	push	{r3, lr}

0041c32e <.LCFI20>:
    s->l_desc.dyn_tree = s->dyn_ltree;
  41c32e:	f100 0294 	add.w	r2, r0, #148	; 0x94
  41c332:	f8c0 2b18 	str.w	r2, [r0, #2840]	; 0xb18
    s->l_desc.stat_desc = &static_l_desc;
  41c336:	4a0d      	ldr	r2, [pc, #52]	; (41c36c <.LVL286+0x2>)
  41c338:	f8c0 2b20 	str.w	r2, [r0, #2848]	; 0xb20
    s->d_desc.dyn_tree = s->dyn_dtree;
  41c33c:	f600 1288 	addw	r2, r0, #2440	; 0x988
  41c340:	f8c0 2b24 	str.w	r2, [r0, #2852]	; 0xb24
    s->d_desc.stat_desc = &static_d_desc;
  41c344:	4a0a      	ldr	r2, [pc, #40]	; (41c370 <.LVL286+0x6>)
  41c346:	f8c0 2b2c 	str.w	r2, [r0, #2860]	; 0xb2c
    s->bl_desc.dyn_tree = s->bl_tree;
  41c34a:	f600 227c 	addw	r2, r0, #2684	; 0xa7c
  41c34e:	f8c0 2b30 	str.w	r2, [r0, #2864]	; 0xb30
    s->bl_desc.stat_desc = &static_bl_desc;
  41c352:	4a08      	ldr	r2, [pc, #32]	; (41c374 <.LVL286+0xa>)
  41c354:	f8c0 2b38 	str.w	r2, [r0, #2872]	; 0xb38
    s->bi_buf = 0;
  41c358:	2200      	movs	r2, #0
  41c35a:	f241 61b8 	movw	r1, #5816	; 0x16b8
  41c35e:	5242      	strh	r2, [r0, r1]
    s->bi_valid = 0;
  41c360:	f241 61bc 	movw	r1, #5820	; 0x16bc
  41c364:	5042      	str	r2, [r0, r1]
    init_block(s);
  41c366:	f7ff fd8d 	bl	41be84 <.LFE2>

0041c36a <.LVL286>:
  41c36a:	bd08      	pop	{r3, pc}
  41c36c:	2040d704 	.word	0x2040d704
  41c370:	2040d6f0 	.word	0x2040d6f0
  41c374:	2040d6dc 	.word	0x2040d6dc

Disassembly of section .rodata.extra_blbits%250:

0041c378 <extra_blbits>:
	...
  41c3b8:	00000002 00000003 00000007              ............

Disassembly of section .text.Console_UART_Write%251:

0041c3c4 <Console_UART_Write>:
{
  41c3c4:	b538      	push	{r3, r4, r5, lr}

0041c3c6 <.LCFI0>:
  41c3c6:	460d      	mov	r5, r1
  41c3c8:	4614      	mov	r4, r2

0041c3ca <.LVL3>:
    if (writeQueue.numElem >= writeQueue.elemArrSz)
  41c3ca:	4b10      	ldr	r3, [pc, #64]	; (41c40c <.LVL9+0x4>)
  41c3cc:	689a      	ldr	r2, [r3, #8]

0041c3ce <.LVL4>:
  41c3ce:	691b      	ldr	r3, [r3, #16]
  41c3d0:	429a      	cmp	r2, r3
  41c3d2:	d216      	bcs.n	41c402 <.LVL7>

0041c3d4 <.LBB4>:
    q->qPkts[q->nextPos] = pkt;
  41c3d4:	4b0d      	ldr	r3, [pc, #52]	; (41c40c <.LVL9+0x4>)
  41c3d6:	6859      	ldr	r1, [r3, #4]
  41c3d8:	68da      	ldr	r2, [r3, #12]
  41c3da:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
  41c3de:	f842 5031 	str.w	r5, [r2, r1, lsl #3]
  41c3e2:	6044      	str	r4, [r0, #4]
    (q->nextPos < (q->elemArrSz - 1)) ? q->nextPos++ : (q->nextPos = 0);
  41c3e4:	685a      	ldr	r2, [r3, #4]
  41c3e6:	691b      	ldr	r3, [r3, #16]
  41c3e8:	3b01      	subs	r3, #1
  41c3ea:	429a      	cmp	r2, r3
  41c3ec:	bf34      	ite	cc
  41c3ee:	3201      	addcc	r2, #1
  41c3f0:	2200      	movcs	r2, #0
  41c3f2:	4b06      	ldr	r3, [pc, #24]	; (41c40c <.LVL9+0x4>)
  41c3f4:	605a      	str	r2, [r3, #4]
    q->numElem++;
  41c3f6:	4a05      	ldr	r2, [pc, #20]	; (41c40c <.LVL9+0x4>)
  41c3f8:	6893      	ldr	r3, [r2, #8]
  41c3fa:	3301      	adds	r3, #1
  41c3fc:	6093      	str	r3, [r2, #8]

0041c3fe <.LBE4>:
}
  41c3fe:	4620      	mov	r0, r4
  41c400:	bd38      	pop	{r3, r4, r5, pc}

0041c402 <.LVL7>:
        popQueue(&writeQueue);
  41c402:	4802      	ldr	r0, [pc, #8]	; (41c40c <.LVL9+0x4>)

0041c404 <.LVL8>:
  41c404:	f001 f94e 	bl	41d6a4 <.LFE4>

0041c408 <.LVL9>:
  41c408:	e7e4      	b.n	41c3d4 <.LBB4>
  41c40a:	bf00      	nop
  41c40c:	2040d740 	.word	0x2040d740

Disassembly of section .text.sprintf%252:

0041c410 <sprintf>:
  41c410:	b40e      	push	{r1, r2, r3}

0041c412 <.LCFI6>:
  41c412:	b5f0      	push	{r4, r5, r6, r7, lr}

0041c414 <.LCFI7>:
  41c414:	b09c      	sub	sp, #112	; 0x70

0041c416 <.LCFI8>:
  41c416:	ab21      	add	r3, sp, #132	; 0x84
  41c418:	490f      	ldr	r1, [pc, #60]	; (41c458 <.LCFI11+0x4>)
  41c41a:	f853 2b04 	ldr.w	r2, [r3], #4
  41c41e:	9301      	str	r3, [sp, #4]
  41c420:	4605      	mov	r5, r0
  41c422:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  41c426:	6808      	ldr	r0, [r1, #0]

0041c428 <.LVL4>:
  41c428:	9502      	str	r5, [sp, #8]
  41c42a:	f44f 7702 	mov.w	r7, #520	; 0x208
  41c42e:	f64f 76ff 	movw	r6, #65535	; 0xffff
  41c432:	a902      	add	r1, sp, #8
  41c434:	9506      	str	r5, [sp, #24]
  41c436:	f8ad 7014 	strh.w	r7, [sp, #20]
  41c43a:	9404      	str	r4, [sp, #16]
  41c43c:	9407      	str	r4, [sp, #28]
  41c43e:	f8ad 6016 	strh.w	r6, [sp, #22]
  41c442:	f7e8 fa51 	bl	4048e8 <_svfprintf_r>

0041c446 <.LVL5>:
  41c446:	9b02      	ldr	r3, [sp, #8]
  41c448:	2200      	movs	r2, #0
  41c44a:	701a      	strb	r2, [r3, #0]
  41c44c:	b01c      	add	sp, #112	; 0x70

0041c44e <.LCFI9>:
  41c44e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

0041c452 <.LCFI10>:
  41c452:	b003      	add	sp, #12

0041c454 <.LCFI11>:
  41c454:	4770      	bx	lr
  41c456:	bf00      	nop
  41c458:	2040d77c 	.word	0x2040d77c

Disassembly of section .text._Balloc%253:

0041c45c <_Balloc>:
  41c45c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  41c45e:	b570      	push	{r4, r5, r6, lr}

0041c460 <.LCFI0>:
  41c460:	4605      	mov	r5, r0
  41c462:	460c      	mov	r4, r1
  41c464:	b14b      	cbz	r3, 41c47a <.LVL3>

0041c466 <.LVL1>:
  41c466:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]

0041c46a <.LVL2>:
  41c46a:	b180      	cbz	r0, 41c48e <.LVL6>
  41c46c:	6802      	ldr	r2, [r0, #0]
  41c46e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  41c472:	2300      	movs	r3, #0
  41c474:	6103      	str	r3, [r0, #16]
  41c476:	60c3      	str	r3, [r0, #12]
  41c478:	bd70      	pop	{r4, r5, r6, pc}

0041c47a <.LVL3>:
  41c47a:	2221      	movs	r2, #33	; 0x21
  41c47c:	2104      	movs	r1, #4

0041c47e <.LVL4>:
  41c47e:	f7ff fc13 	bl	41bca8 <.LFE163>

0041c482 <.LVL5>:
  41c482:	64e8      	str	r0, [r5, #76]	; 0x4c
  41c484:	4603      	mov	r3, r0
  41c486:	2800      	cmp	r0, #0
  41c488:	d1ed      	bne.n	41c466 <.LVL1>
  41c48a:	2000      	movs	r0, #0
  41c48c:	bd70      	pop	{r4, r5, r6, pc}

0041c48e <.LVL6>:
  41c48e:	2101      	movs	r1, #1
  41c490:	fa01 f604 	lsl.w	r6, r1, r4
  41c494:	1d72      	adds	r2, r6, #5
  41c496:	4628      	mov	r0, r5

0041c498 <.LVL8>:
  41c498:	0092      	lsls	r2, r2, #2
  41c49a:	f7ff fc05 	bl	41bca8 <.LFE163>

0041c49e <.LVL9>:
  41c49e:	2800      	cmp	r0, #0
  41c4a0:	d0f3      	beq.n	41c48a <.LVL5+0x8>
  41c4a2:	6044      	str	r4, [r0, #4]
  41c4a4:	6086      	str	r6, [r0, #8]
  41c4a6:	e7e4      	b.n	41c472 <.LVL2+0x8>

Disassembly of section .text.fp_add%254:

0041c4a8 <fp_add>:
{
  41c4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0041c4ac <.LCFI16>:
  41c4ac:	4604      	mov	r4, r0
  41c4ae:	460d      	mov	r5, r1
  41c4b0:	4616      	mov	r6, r2
  sa = a->sign;
  41c4b2:	6847      	ldr	r7, [r0, #4]
  sb = b->sign;
  41c4b4:	f8d1 8004 	ldr.w	r8, [r1, #4]
  if (sa == sb) {
  41c4b8:	4547      	cmp	r7, r8
  41c4ba:	d00c      	beq.n	41c4d6 <.LVL123>
    if (fp_cmp_mag (a, b) == FP_LT) {
  41c4bc:	f7ff f9d7 	bl	41b86e <.LFE179>

0041c4c0 <.LVL121>:
  41c4c0:	f1b0 3fff 	cmp.w	r0, #4294967295
  41c4c4:	d00c      	beq.n	41c4e0 <.LVL124+0x4>
      c->sign = sa;
  41c4c6:	6077      	str	r7, [r6, #4]
      s_fp_sub (a, b, c);
  41c4c8:	4632      	mov	r2, r6
  41c4ca:	4629      	mov	r1, r5
  41c4cc:	4620      	mov	r0, r4
  41c4ce:	f7fb fad7 	bl	417a80 <.LBE840>

0041c4d2 <.LVL122>:
  41c4d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041c4d6 <.LVL123>:
    c->sign = sa;
  41c4d6:	6057      	str	r7, [r2, #4]
    s_fp_add (a, b, c);
  41c4d8:	f7fb fd6d 	bl	417fb6 <.LFE217>

0041c4dc <.LVL124>:
  41c4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      c->sign = sb;
  41c4e0:	f8c6 8004 	str.w	r8, [r6, #4]
      s_fp_sub (b, a, c);
  41c4e4:	4632      	mov	r2, r6
  41c4e6:	4621      	mov	r1, r4
  41c4e8:	4628      	mov	r0, r5
  41c4ea:	f7fb fac9 	bl	417a80 <.LBE840>

0041c4ee <.LVL126>:
  41c4ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section .text.wc_ecc_init_ex%255:

0041c4f2 <wc_ecc_init_ex>:
    if (key == NULL) {
  41c4f2:	b1d8      	cbz	r0, 41c52c <.LCFI75>
{
  41c4f4:	b530      	push	{r4, r5, lr}

0041c4f6 <.LCFI72>:
  41c4f6:	b083      	sub	sp, #12

0041c4f8 <.LCFI73>:
  41c4f8:	4604      	mov	r4, r0
  41c4fa:	460d      	mov	r5, r1
    XMEMSET(key, 0, sizeof(ecc_key));
  41c4fc:	f640 02b8 	movw	r2, #2232	; 0x8b8

0041c500 <.LVL932>:
  41c500:	2100      	movs	r1, #0

0041c502 <.LVL933>:
  41c502:	f7fd fc4d 	bl	419da0 <.LFE166>

0041c506 <.LVL934>:
    key->state = ECC_STATE_NONE;
  41c506:	2300      	movs	r3, #0
    ret = mp_init_multi(&key->k, key->pubkey.x, key->pubkey.y, key->pubkey.z,
  41c508:	9301      	str	r3, [sp, #4]
  41c50a:	9300      	str	r3, [sp, #0]
  41c50c:	f504 638d 	add.w	r3, r4, #1128	; 0x468
  41c510:	f504 7210 	add.w	r2, r4, #576	; 0x240
  41c514:	f104 0118 	add.w	r1, r4, #24
  41c518:	f504 60d2 	add.w	r0, r4, #1680	; 0x690
  41c51c:	f000 fa8a 	bl	41ca34 <mp_init_multi>

0041c520 <.LVL935>:
    if (ret != MP_OKAY) {
  41c520:	4603      	mov	r3, r0
  41c522:	b938      	cbnz	r0, 41c534 <.LCFI76>
    key->heap = heap;
  41c524:	6165      	str	r5, [r4, #20]
}
  41c526:	4618      	mov	r0, r3

0041c528 <.LVL936>:
  41c528:	b003      	add	sp, #12

0041c52a <.LCFI74>:
  41c52a:	bd30      	pop	{r4, r5, pc}

0041c52c <.LCFI75>:
        return BAD_FUNC_ARG;
  41c52c:	f06f 03ac 	mvn.w	r3, #172	; 0xac
}
  41c530:	4618      	mov	r0, r3

0041c532 <.LVL938>:
  41c532:	4770      	bx	lr

0041c534 <.LCFI76>:
        return MEMORY_E;
  41c534:	f06f 037c 	mvn.w	r3, #124	; 0x7c
  41c538:	e7f5      	b.n	41c526 <.LVL935+0x6>

Disassembly of section .text.SYS_CONSOLE_Initialize%256:

0041c53c <SYS_CONSOLE_Initialize>:
SYS_MODULE_OBJ SYS_CONSOLE_Initialize( const SYS_MODULE_INDEX index, const SYS_MODULE_INIT * const init )
{
    SYS_CONSOLE_INIT *initConfig = (SYS_CONSOLE_INIT*)init;

    /* Confirm valid arguments */
    if (index >= SYS_CONSOLE_DEVICE_MAX_INSTANCES || init == NULL)
  41c53c:	b908      	cbnz	r0, 41c542 <SYS_CONSOLE_Initialize+0x6>
  41c53e:	4603      	mov	r3, r0
  41c540:	b911      	cbnz	r1, 41c548 <.LVL2>
        return SYS_MODULE_OBJ_INVALID;
  41c542:	f04f 30ff 	mov.w	r0, #4294967295

0041c546 <.LVL1>:
  41c546:	4770      	bx	lr

0041c548 <.LVL2>:

    if ((consoleDeviceInstance[index].consoleDeviceInstanceStatus == SYS_STATUS_UNINITIALIZED) && initConfig)
  41c548:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  41c54c:	480c      	ldr	r0, [pc, #48]	; (41c580 <.LVL5+0x6>)

0041c54e <.LVL3>:
  41c54e:	f910 2022 	ldrsb.w	r2, [r0, r2, lsl #2]
  41c552:	b992      	cbnz	r2, 41c57a <.LVL5>
  41c554:	b189      	cbz	r1, 41c57a <.LVL5>
{
  41c556:	b430      	push	{r4, r5}

0041c558 <.LCFI0>:
    {
        consoleDeviceInstance[index].consoleDevHandle = CONSOLE_DEVICE_HANDLE_INVALID;
  41c558:	4604      	mov	r4, r0
  41c55a:	005a      	lsls	r2, r3, #1
  41c55c:	18d0      	adds	r0, r2, r3
  41c55e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  41c562:	f04f 35ff 	mov.w	r5, #4294967295
  41c566:	6085      	str	r5, [r0, #8]

        consoleDeviceInstance[index].consoleInstanceDevDesc = initConfig->consDevDesc;
  41c568:	6849      	ldr	r1, [r1, #4]

0041c56a <.LVL4>:
  41c56a:	6041      	str	r1, [r0, #4]
        consoleDeviceInstance[index].consoleDeviceInstanceStatus = SYS_STATUS_READY;
  41c56c:	441a      	add	r2, r3
  41c56e:	2102      	movs	r1, #2
  41c570:	f804 1022 	strb.w	r1, [r4, r2, lsl #2]

        return index;
  41c574:	4618      	mov	r0, r3
    }

    return SYS_MODULE_OBJ_INVALID;
}
  41c576:	bc30      	pop	{r4, r5}

0041c578 <.LCFI1>:
  41c578:	4770      	bx	lr

0041c57a <.LVL5>:
    return SYS_MODULE_OBJ_INVALID;
  41c57a:	f04f 30ff 	mov.w	r0, #4294967295
  41c57e:	4770      	bx	lr
  41c580:	2040d754 	.word	0x2040d754

Disassembly of section .text.Console_UART_Status%257:

0041c584 <Console_UART_Status>:
    if (consUartData.state == CONSOLE_UART_STATE_INIT)
  41c584:	4b0e      	ldr	r3, [pc, #56]	; (41c5c0 <.LFE0+0x3c>)
  41c586:	781b      	ldrb	r3, [r3, #0]
  41c588:	b1ab      	cbz	r3, 41c5b6 <Console_UART_Status+0x32>
    if (consUartData.state == CONSOLE_UART_STATE_CRITICAL_ERROR || consUartData.state == CONSOLE_UART_STATE_OPERATIONAL_ERROR || consUartData.overflowFlag)
  41c58a:	3b07      	subs	r3, #7
  41c58c:	b2db      	uxtb	r3, r3
  41c58e:	2b01      	cmp	r3, #1
  41c590:	d913      	bls.n	41c5ba <Console_UART_Status+0x36>
  41c592:	4b0b      	ldr	r3, [pc, #44]	; (41c5c0 <.LFE0+0x3c>)
  41c594:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
  41c598:	b10b      	cbz	r3, 41c59e <Console_UART_Status+0x1a>
        status = SYS_CONSOLE_STATUS_ERROR;
  41c59a:	2003      	movs	r0, #3
  41c59c:	4770      	bx	lr
        status = (writeQueue.numElem || readQueue.numElem) ? SYS_CONSOLE_STATUS_BUSY : SYS_CONSOLE_STATUS_CONFIGURED;
  41c59e:	4b09      	ldr	r3, [pc, #36]	; (41c5c4 <.LFE0+0x40>)
  41c5a0:	689b      	ldr	r3, [r3, #8]
  41c5a2:	b10b      	cbz	r3, 41c5a8 <Console_UART_Status+0x24>
  41c5a4:	2002      	movs	r0, #2
}
  41c5a6:	4770      	bx	lr
        status = (writeQueue.numElem || readQueue.numElem) ? SYS_CONSOLE_STATUS_BUSY : SYS_CONSOLE_STATUS_CONFIGURED;
  41c5a8:	4b07      	ldr	r3, [pc, #28]	; (41c5c8 <.LFE0+0x44>)
  41c5aa:	689b      	ldr	r3, [r3, #8]
  41c5ac:	2b00      	cmp	r3, #0
  41c5ae:	bf14      	ite	ne
  41c5b0:	2002      	movne	r0, #2
  41c5b2:	2001      	moveq	r0, #1
  41c5b4:	4770      	bx	lr
        return status;
  41c5b6:	2000      	movs	r0, #0
  41c5b8:	4770      	bx	lr
        status = SYS_CONSOLE_STATUS_ERROR;
  41c5ba:	2003      	movs	r0, #3
  41c5bc:	4770      	bx	lr
  41c5be:	bf00      	nop
  41c5c0:	2040d5d4 	.word	0x2040d5d4
  41c5c4:	2040d740 	.word	0x2040d740
  41c5c8:	2040d72c 	.word	0x2040d72c

Disassembly of section .text.USART1_Write%258:

0041c5cc <USART1_Write>:
bool USART1_Write( void *buffer, const size_t size )
{
    bool status = false;
    uint8_t * lBuffer = (uint8_t *)buffer;

    if(NULL != lBuffer)
  41c5cc:	b1c8      	cbz	r0, 41c602 <.LVL38>
    {
        /* Check if transmit request is in progress */
        if(usart1Obj.txBusyStatus == false)
  41c5ce:	4b0f      	ldr	r3, [pc, #60]	; (41c60c <.LVL41+0x4>)
  41c5d0:	7d1b      	ldrb	r3, [r3, #20]
  41c5d2:	b9c3      	cbnz	r3, 41c606 <.LVL40>
        {
            usart1Obj.txBuffer = lBuffer;
  41c5d4:	4b0d      	ldr	r3, [pc, #52]	; (41c60c <.LVL41+0x4>)
  41c5d6:	6018      	str	r0, [r3, #0]
            usart1Obj.txSize = size;
  41c5d8:	6059      	str	r1, [r3, #4]
            usart1Obj.txProcessedSize = 0;
  41c5da:	2100      	movs	r1, #0

0041c5dc <.LVL35>:
  41c5dc:	6099      	str	r1, [r3, #8]
            usart1Obj.txBusyStatus = true;
  41c5de:	2101      	movs	r1, #1
  41c5e0:	7519      	strb	r1, [r3, #20]

0041c5e2 <.LVL36>:
            status = true;

            /* Initiate the transfer by sending first byte */
            if(US_CSR_TXEMPTY_Msk == (USART1_REGS->US_CSR& US_CSR_TXEMPTY_Msk))
  41c5e2:	4b0b      	ldr	r3, [pc, #44]	; (41c610 <.LVL41+0x8>)
  41c5e4:	695b      	ldr	r3, [r3, #20]
  41c5e6:	f413 7f00 	tst.w	r3, #512	; 0x200
  41c5ea:	d004      	beq.n	41c5f6 <.LVL36+0x14>
            {
                USART1_REGS->US_THR = (US_THR_TXCHR(*lBuffer) & US_THR_TXCHR_Msk);
  41c5ec:	7802      	ldrb	r2, [r0, #0]
  41c5ee:	4b08      	ldr	r3, [pc, #32]	; (41c610 <.LVL41+0x8>)
  41c5f0:	61da      	str	r2, [r3, #28]
                usart1Obj.txProcessedSize++;
  41c5f2:	4b06      	ldr	r3, [pc, #24]	; (41c60c <.LVL41+0x4>)
  41c5f4:	6099      	str	r1, [r3, #8]
            }

            USART1_REGS->US_IER = US_IER_TXEMPTY_Msk;
  41c5f6:	f44f 7200 	mov.w	r2, #512	; 0x200
  41c5fa:	4b05      	ldr	r3, [pc, #20]	; (41c610 <.LVL41+0x8>)
  41c5fc:	609a      	str	r2, [r3, #8]
            status = true;
  41c5fe:	2001      	movs	r0, #1

0041c600 <.LVL37>:
  41c600:	4770      	bx	lr

0041c602 <.LVL38>:
    bool status = false;
  41c602:	2000      	movs	r0, #0

0041c604 <.LVL39>:
  41c604:	4770      	bx	lr

0041c606 <.LVL40>:
  41c606:	2000      	movs	r0, #0

0041c608 <.LVL41>:
        }
    }

    return status;
}
  41c608:	4770      	bx	lr
  41c60a:	bf00      	nop
  41c60c:	20400020 	.word	0x20400020
  41c610:	40028000 	.word	0x40028000

Disassembly of section .text.GetASNHeader%259:

0041c614 <GetASNHeader>:
{
  41c614:	b570      	push	{r4, r5, r6, lr}

0041c616 <.LCFI13>:
  41c616:	b082      	sub	sp, #8

0041c618 <.LCFI14>:
  41c618:	9e06      	ldr	r6, [sp, #24]
    word32 idx = *inOutIdx;
  41c61a:	6814      	ldr	r4, [r2, #0]
    if ((idx + 1) > maxIdx)
  41c61c:	1c65      	adds	r5, r4, #1
  41c61e:	42b5      	cmp	r5, r6
  41c620:	d812      	bhi.n	41c648 <.LCFI16>
    b = input[idx++];
  41c622:	9501      	str	r5, [sp, #4]

0041c624 <.LVL116>:
    if (b != tag)
  41c624:	5d04      	ldrb	r4, [r0, r4]

0041c626 <.LVL117>:
  41c626:	428c      	cmp	r4, r1
  41c628:	d111      	bne.n	41c64e <.LVL125>
  41c62a:	461d      	mov	r5, r3
  41c62c:	4614      	mov	r4, r2
    if (GetLength(input, &idx, &length, maxIdx) < 0)
  41c62e:	4633      	mov	r3, r6

0041c630 <.LVL118>:
  41c630:	466a      	mov	r2, sp

0041c632 <.LVL119>:
  41c632:	a901      	add	r1, sp, #4

0041c634 <.LVL120>:
  41c634:	f7ff f8e8 	bl	41b808 <.LFE17>

0041c638 <.LVL121>:
  41c638:	2800      	cmp	r0, #0
  41c63a:	db0b      	blt.n	41c654 <.LVL127>
    *len      = length;
  41c63c:	9800      	ldr	r0, [sp, #0]
  41c63e:	6028      	str	r0, [r5, #0]
    *inOutIdx = idx;
  41c640:	9b01      	ldr	r3, [sp, #4]
  41c642:	6023      	str	r3, [r4, #0]

0041c644 <.LVL122>:
}
  41c644:	b002      	add	sp, #8

0041c646 <.LCFI15>:
  41c646:	bd70      	pop	{r4, r5, r6, pc}

0041c648 <.LCFI16>:
        return BUFFER_E;
  41c648:	f06f 0083 	mvn.w	r0, #131	; 0x83

0041c64c <.LVL124>:
  41c64c:	e7fa      	b.n	41c644 <.LVL122>

0041c64e <.LVL125>:
        return ASN_PARSE_E;
  41c64e:	f06f 008b 	mvn.w	r0, #139	; 0x8b

0041c652 <.LVL126>:
  41c652:	e7f7      	b.n	41c644 <.LVL122>

0041c654 <.LVL127>:
        return ASN_PARSE_E;
  41c654:	f06f 008b 	mvn.w	r0, #139	; 0x8b
  41c658:	e7f4      	b.n	41c644 <.LVL122>

Disassembly of section .text.fp_mod%260:

0041c65a <fp_mod>:
{
  41c65a:	b570      	push	{r4, r5, r6, lr}

0041c65c <.LCFI88>:
  41c65c:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228

0041c660 <.LCFI89>:
  41c660:	4605      	mov	r5, r0
  41c662:	460c      	mov	r4, r1
  41c664:	4616      	mov	r6, r2

0041c666 <.LBB94>:
    fp_zero(a);
  41c666:	4668      	mov	r0, sp

0041c668 <.LVL630>:
  41c668:	f001 f98e 	bl	41d988 <.LFE163>

0041c66c <.LBE94>:
   if ((err = fp_div(a, b, NULL, &t)) != FP_OKAY) {
  41c66c:	466b      	mov	r3, sp
  41c66e:	2200      	movs	r2, #0
  41c670:	4621      	mov	r1, r4
  41c672:	4628      	mov	r0, r5
  41c674:	f7f5 fd62 	bl	41213c <.LFE22>

0041c678 <.LVL632>:
  41c678:	4605      	mov	r5, r0

0041c67a <.LVL633>:
  41c67a:	b940      	cbnz	r0, 41c68e <.LVL635>
   if (t.sign != b->sign) {
  41c67c:	9a01      	ldr	r2, [sp, #4]
  41c67e:	6863      	ldr	r3, [r4, #4]
  41c680:	429a      	cmp	r2, r3
  41c682:	d008      	beq.n	41c696 <.LCFI91>
      fp_add(&t, b, c);
  41c684:	4632      	mov	r2, r6
  41c686:	4621      	mov	r1, r4
  41c688:	4668      	mov	r0, sp

0041c68a <.LVL634>:
  41c68a:	f7ff ff0d 	bl	41c4a8 <.LFE17>

0041c68e <.LVL635>:
}
  41c68e:	4628      	mov	r0, r5
  41c690:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228

0041c694 <.LCFI90>:
  41c694:	bd70      	pop	{r4, r5, r6, pc}

0041c696 <.LCFI91>:
      fp_copy(&t, c);
  41c696:	4631      	mov	r1, r6
  41c698:	4668      	mov	r0, sp

0041c69a <.LVL637>:
  41c69a:	f000 feb9 	bl	41d410 <.LFE194>

0041c69e <.LVL638>:
  41c69e:	e7f6      	b.n	41c68e <.LVL635>

Disassembly of section .text.SYS_INT_SourceDisable%261:

0041c6a0 <SYS_INT_SourceDisable>:

    return;
}

bool SYS_INT_SourceDisable( INT_SOURCE source )
{
  41c6a0:	b538      	push	{r3, r4, r5, lr}

0041c6a2 <.LCFI0>:
  41c6a2:	4604      	mov	r4, r0
    bool processorStatus;
    bool intSrcStatus;

    processorStatus = SYS_INT_Disable();
  41c6a4:	f001 f9c0 	bl	41da28 <SYS_INT_Disable>

0041c6a8 <.LBB50>:
  if ((int32_t)(IRQn) >= 0)
  41c6a8:	2c00      	cmp	r4, #0
  41c6aa:	db16      	blt.n	41c6da <.LVL9>
    return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  41c6ac:	0963      	lsrs	r3, r4, #5
  41c6ae:	490c      	ldr	r1, [pc, #48]	; (41c6e0 <.LVL9+0x6>)
  41c6b0:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
  41c6b4:	f004 041f 	and.w	r4, r4, #31

0041c6b8 <.LVL5>:
  41c6b8:	40e5      	lsrs	r5, r4

0041c6ba <.LBE50>:

    intSrcStatus = NVIC_GetEnableIRQ(source);
  41c6ba:	f005 0501 	and.w	r5, r5, #1

0041c6be <.LBB52>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  41c6be:	2201      	movs	r2, #1
  41c6c0:	fa02 f404 	lsl.w	r4, r2, r4
  41c6c4:	3320      	adds	r3, #32
  41c6c6:	f841 4023 	str.w	r4, [r1, r3, lsl #2]

0041c6ca <.LBB54>:
  __ASM volatile ("dsb 0xF":::"memory");
  41c6ca:	f3bf 8f4f 	dsb	sy

0041c6ce <.LBB56>:
  __ASM volatile ("isb 0xF":::"memory");
  41c6ce:	f3bf 8f6f 	isb	sy

0041c6d2 <.LBE52>:

    NVIC_DisableIRQ( source );

    SYS_INT_Restore( processorStatus );
  41c6d2:	f001 f9b2 	bl	41da3a <.LFE142>

0041c6d6 <.LVL8>:

    /* return the source status */
    return intSrcStatus;
  41c6d6:	4628      	mov	r0, r5
  41c6d8:	bd38      	pop	{r3, r4, r5, pc}

0041c6da <.LVL9>:
    intSrcStatus = NVIC_GetEnableIRQ(source);
  41c6da:	2500      	movs	r5, #0
  41c6dc:	e7f9      	b.n	41c6d2 <.LBE52>
  41c6de:	bf00      	nop
  41c6e0:	e000e100 	.word	0xe000e100

Disassembly of section .text.wc_Sha256Hash%262:

0041c6e4 <wc_Sha256Hash>:
}
#endif /* WOLFSSL_SHA224 */

#if !defined(NO_SHA256)
    int wc_Sha256Hash(const byte* data, word32 len, byte* hash)
    {
  41c6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0041c6e8 <.LCFI15>:
  41c6e8:	af00      	add	r7, sp, #0

0041c6ea <.LCFI16>:
  41c6ea:	4605      	mov	r5, r0
  41c6ec:	460e      	mov	r6, r1
  41c6ee:	4690      	mov	r8, r2
  41c6f0:	b0e0      	sub	sp, #384	; 0x180
  41c6f2:	f10d 047f 	add.w	r4, sp, #127	; 0x7f
  41c6f6:	f024 047f 	bic.w	r4, r4, #127	; 0x7f

0041c6fa <.LVL97>:
        sha256 = (Sha256*)XMALLOC(sizeof(Sha256), NULL, DYNAMIC_TYPE_TMP_BUFFER);
        if (sha256 == NULL)
            return MEMORY_E;
    #endif

        if ((ret = wc_InitSha256(sha256)) != 0) {
  41c6fa:	4620      	mov	r0, r4

0041c6fc <.LVL98>:
  41c6fc:	f7fd fbea 	bl	419ed4 <.LFE29>

0041c700 <.LVL99>:
  41c700:	4603      	mov	r3, r0
  41c702:	b118      	cbz	r0, 41c70c <.LCFI18>
    #ifdef WOLFSSL_SMALL_STACK
        XFREE(sha256, NULL, DYNAMIC_TYPE_TMP_BUFFER);
    #endif

        return ret;
    }
  41c704:	4618      	mov	r0, r3

0041c706 <.LVL100>:
  41c706:	46bd      	mov	sp, r7

0041c708 <.LCFI17>:
  41c708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041c70c <.LCFI18>:
        else if ((ret = wc_Sha256Update(sha256, data, len)) != 0) {
  41c70c:	4632      	mov	r2, r6
  41c70e:	4629      	mov	r1, r5
  41c710:	4620      	mov	r0, r4

0041c712 <.LVL102>:
  41c712:	f7fe f905 	bl	41a920 <.LFE165>

0041c716 <.LVL103>:
  41c716:	4603      	mov	r3, r0
  41c718:	2800      	cmp	r0, #0
  41c71a:	d1f3      	bne.n	41c704 <.LVL99+0x4>
        else if ((ret = wc_Sha256Final(sha256, hash)) != 0) {
  41c71c:	4641      	mov	r1, r8
  41c71e:	4620      	mov	r0, r4

0041c720 <.LVL104>:
  41c720:	f7fd faf0 	bl	419d04 <.LFE151>

0041c724 <.LVL105>:
  41c724:	4603      	mov	r3, r0

0041c726 <.LVL106>:
        return ret;
  41c726:	e7ed      	b.n	41c704 <.LVL99+0x4>

Disassembly of section .text.fp_sub%263:

0041c728 <fp_sub>:
{
  41c728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041c72a <.LCFI17>:
  41c72a:	4606      	mov	r6, r0
  41c72c:	460d      	mov	r5, r1
  41c72e:	4617      	mov	r7, r2
  sa = a->sign;
  41c730:	6844      	ldr	r4, [r0, #4]

0041c732 <.LVL128>:
  if (sa != sb) {
  41c732:	684b      	ldr	r3, [r1, #4]
  41c734:	429c      	cmp	r4, r3
  41c736:	d10b      	bne.n	41c750 <.LVL131>
    if (fp_cmp_mag (a, b) != FP_LT) {
  41c738:	f7ff f899 	bl	41b86e <.LFE179>

0041c73c <.LVL129>:
  41c73c:	f1b0 3fff 	cmp.w	r0, #4294967295
  41c740:	d00a      	beq.n	41c758 <.LVL132+0x2>
      c->sign = sa;
  41c742:	607c      	str	r4, [r7, #4]
      s_fp_sub (a, b, c);
  41c744:	463a      	mov	r2, r7
  41c746:	4629      	mov	r1, r5
  41c748:	4630      	mov	r0, r6
  41c74a:	f7fb f999 	bl	417a80 <.LBE840>

0041c74e <.LVL130>:
  41c74e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041c750 <.LVL131>:
    c->sign = sa;
  41c750:	6054      	str	r4, [r2, #4]
    s_fp_add (a, b, c);
  41c752:	f7fb fc30 	bl	417fb6 <.LFE217>

0041c756 <.LVL132>:
  41c756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      c->sign = (sa == FP_ZPOS) ? FP_NEG : FP_ZPOS;
  41c758:	fab4 f484 	clz	r4, r4

0041c75c <.LVL134>:
  41c75c:	0964      	lsrs	r4, r4, #5
  41c75e:	607c      	str	r4, [r7, #4]
      s_fp_sub (b, a, c);
  41c760:	463a      	mov	r2, r7
  41c762:	4631      	mov	r1, r6
  41c764:	4628      	mov	r0, r5
  41c766:	f7fb f98b 	bl	417a80 <.LBE840>

0041c76a <.LVL135>:
  41c76a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

Disassembly of section .text.same70_RNG_GenerateBlock%264:

0041c76c <same70_RNG_GenerateBlock>:


/* sz is number of bytes */
int same70_RNG_GenerateBlock(byte* output, word32 sz)
{
    while (sz)
  41c76c:	b1e1      	cbz	r1, 41c7a8 <.LCFI3>
{
  41c76e:	b530      	push	{r4, r5, lr}

0041c770 <.LCFI0>:
  41c770:	b083      	sub	sp, #12

0041c772 <.LCFI1>:
  41c772:	4605      	mov	r5, r0
  41c774:	460a      	mov	r2, r1

0041c776 <.LBB11>:
    {
        /* get 32 bits - BLOCKING */
        while (!(TRNG_REGS->TRNG_ISR & TRNG_ISR_DATRDY_Msk))
  41c776:	4c0d      	ldr	r4, [pc, #52]	; (41c7ac <.LVL8+0x2>)
  41c778:	e007      	b.n	41c78a <.LBB14>

0041c77a <.LVL2>:
        uint32_t result = TRNG_REGS->TRNG_ODATA;

        /* stuff the data into the output buffer. Watch for buffer overrun */
        if (sz < RNG_BYTES_AT_A_TIME)
        {
            memcpy((void *)output, (void*)&result, sz);
  41c77a:	a901      	add	r1, sp, #4
  41c77c:	4628      	mov	r0, r5
  41c77e:	f7f9 fe4d 	bl	41641c <memcpy>

0041c782 <.LVL3>:
            sz = 0;
  41c782:	2200      	movs	r2, #0

0041c784 <.LBB12>:
  __ASM volatile ("dmb 0xF":::"memory");
  41c784:	f3bf 8f5f 	dmb	sy

0041c788 <.LBE11>:
    while (sz)
  41c788:	b15a      	cbz	r2, 41c7a2 <.LBE14>

0041c78a <.LBB14>:
        while (!(TRNG_REGS->TRNG_ISR & TRNG_ISR_DATRDY_Msk))
  41c78a:	69e3      	ldr	r3, [r4, #28]
  41c78c:	f013 0f01 	tst.w	r3, #1
  41c790:	d0fb      	beq.n	41c78a <.LBB14>
        uint32_t result = TRNG_REGS->TRNG_ODATA;
  41c792:	6d23      	ldr	r3, [r4, #80]	; 0x50
  41c794:	9301      	str	r3, [sp, #4]
        if (sz < RNG_BYTES_AT_A_TIME)
  41c796:	2a03      	cmp	r2, #3
  41c798:	d9ef      	bls.n	41c77a <.LVL2>
        }
        else
        {
            memcpy((void *)output, (void*)&result, RNG_BYTES_AT_A_TIME);
  41c79a:	f845 3b04 	str.w	r3, [r5], #4
            sz -= RNG_BYTES_AT_A_TIME;
  41c79e:	3a04      	subs	r2, #4

0041c7a0 <.LVL6>:
  41c7a0:	e7f0      	b.n	41c784 <.LBB12>

0041c7a2 <.LBE14>:
        /* memory barrier */
        __DMB();
    }

    return 0;
}
  41c7a2:	2000      	movs	r0, #0
  41c7a4:	b003      	add	sp, #12

0041c7a6 <.LCFI2>:
  41c7a6:	bd30      	pop	{r4, r5, pc}

0041c7a8 <.LCFI3>:
  41c7a8:	2000      	movs	r0, #0

0041c7aa <.LVL8>:
  41c7aa:	4770      	bx	lr
  41c7ac:	40070000 	.word	0x40070000

Disassembly of section .rodata%265:

0041c7b0 <.LC5-0x24>:
  41c7b0:	00464e49 	.word	0x00464e49
  41c7b4:	00666e69 	.word	0x00666e69
  41c7b8:	004e414e 	.word	0x004e414e
  41c7bc:	006e616e 	.word	0x006e616e
  41c7c0:	33323130 	.word	0x33323130
  41c7c4:	37363534 	.word	0x37363534
  41c7c8:	42413938 	.word	0x42413938
  41c7cc:	46454443 	.word	0x46454443
  41c7d0:	00000000 	.word	0x00000000

0041c7d4 <.LC5>:
  41c7d4:	33323130 	.word	0x33323130
  41c7d8:	37363534 	.word	0x37363534
  41c7dc:	62613938 	.word	0x62613938
  41c7e0:	66656463 	.word	0x66656463
  41c7e4:	00000000 	.word	0x00000000

0041c7e8 <.LC6>:
  41c7e8:	6c756e28 	.word	0x6c756e28
  41c7ec:	0000296c 	.word	0x0000296c
  41c7f0:	0030      	.short	0x0030
  41c7f2:	bf00      	nop

Disassembly of section .text.NVIC_Initialize%266:

0041c7f4 <NVIC_Initialize>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  41c7f4:	490c      	ldr	r1, [pc, #48]	; (41c828 <.LVL10+0x4>)
  41c7f6:	68ca      	ldr	r2, [r1, #12]

0041c7f8 <.LVL1>:
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  41c7f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700

0041c7fc <.LVL2>:
  41c7fc:	0412      	lsls	r2, r2, #16
  41c7fe:	0c12      	lsrs	r2, r2, #16

0041c800 <.LVL3>:
  reg_value  =  (reg_value                                   |
  41c800:	4b0a      	ldr	r3, [pc, #40]	; (41c82c <.LVL10+0x8>)
  41c802:	4313      	orrs	r3, r2

0041c804 <.LVL4>:
  SCB->AIRCR =  reg_value;
  41c804:	60cb      	str	r3, [r1, #12]

0041c806 <.LBB22>:
  41c806:	f3bf 8f5f 	dmb	sy

0041c80a <.LBB24>:
  __ASM volatile ("cpsie i" : : : "memory");
  41c80a:	b662      	cpsie	i

0041c80c <.LBB26>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  41c80c:	4b08      	ldr	r3, [pc, #32]	; (41c830 <.LVL10+0xc>)
  41c80e:	22e0      	movs	r2, #224	; 0xe0
  41c810:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e

0041c814 <.LBB28>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  41c814:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  41c818:	6019      	str	r1, [r3, #0]

0041c81a <.LBB30>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  41c81a:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317

0041c81e <.LBB32>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  41c81e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  41c822:	601a      	str	r2, [r3, #0]

0041c824 <.LVL10>:
  41c824:	4770      	bx	lr
  41c826:	bf00      	nop
  41c828:	e000ed00 	.word	0xe000ed00
  41c82c:	05fa0400 	.word	0x05fa0400
  41c830:	e000e100 	.word	0xe000e100

Disassembly of section .text.wc_ecc_new_point_h%267:

0041c834 <wc_ecc_new_point_h>:
{
  41c834:	b510      	push	{r4, lr}

0041c836 <.LCFI27>:
  41c836:	b082      	sub	sp, #8

0041c838 <.LCFI28>:
   p = (ecc_point*)XMALLOC(sizeof(ecc_point), heap, DYNAMIC_TYPE_ECC);
  41c838:	f44f 60cf 	mov.w	r0, #1656	; 0x678

0041c83c <.LVL512>:
  41c83c:	f001 f830 	bl	41d8a0 <.LFE189>

0041c840 <.LVL513>:
   if (p == NULL) {
  41c840:	4604      	mov	r4, r0
  41c842:	b178      	cbz	r0, 41c864 <.LVL516>
   XMEMSET(p, 0, sizeof(ecc_point));
  41c844:	f44f 62cf 	mov.w	r2, #1656	; 0x678
  41c848:	2100      	movs	r1, #0
  41c84a:	f7fd faa9 	bl	419da0 <.LFE166>

0041c84e <.LVL514>:
   if (mp_init_multi(p->x, p->y, p->z, NULL, NULL, NULL) != MP_OKAY) {
  41c84e:	2300      	movs	r3, #0
  41c850:	9301      	str	r3, [sp, #4]
  41c852:	9300      	str	r3, [sp, #0]
  41c854:	f504 628a 	add.w	r2, r4, #1104	; 0x450
  41c858:	f504 710a 	add.w	r1, r4, #552	; 0x228
  41c85c:	4620      	mov	r0, r4
  41c85e:	f000 f8e9 	bl	41ca34 <mp_init_multi>

0041c862 <.LVL515>:
  41c862:	b910      	cbnz	r0, 41c86a <.LBB23>

0041c864 <.LVL516>:
}
  41c864:	4620      	mov	r0, r4
  41c866:	b002      	add	sp, #8

0041c868 <.LCFI29>:
  41c868:	bd10      	pop	{r4, pc}

0041c86a <.LBB23>:
      XFREE(p, heap, DYNAMIC_TYPE_ECC);
  41c86a:	4620      	mov	r0, r4
  41c86c:	f001 f824 	bl	41d8b8 <.LFE2>

0041c870 <.LBE23>:
      return NULL;
  41c870:	2400      	movs	r4, #0

0041c872 <.LVL519>:
  41c872:	e7f7      	b.n	41c864 <.LVL516>

Disassembly of section .text.fp_montgomery_setup%268:

0041c874 <fp_montgomery_setup>:
  b = a->dp[0];
  41c874:	6883      	ldr	r3, [r0, #8]

0041c876 <.LVL148>:
  if ((b & 1) == 0) {
  41c876:	f013 0f01 	tst.w	r3, #1
  41c87a:	d018      	beq.n	41c8ae <.LVL157>
  x = (((b + 2) & 4) << 1) + b; /* here x*a==1 mod 2**4 */
  41c87c:	1c9a      	adds	r2, r3, #2
  41c87e:	0052      	lsls	r2, r2, #1
  41c880:	f002 0208 	and.w	r2, r2, #8
  41c884:	441a      	add	r2, r3

0041c886 <.LVL149>:
  x *= 2 - b * x;               /* here x*a==1 mod 2**8 */
  41c886:	fb02 f003 	mul.w	r0, r2, r3

0041c88a <.LVL150>:
  41c88a:	f1c0 0002 	rsb	r0, r0, #2
  41c88e:	fb00 f002 	mul.w	r0, r0, r2

0041c892 <.LVL151>:
  x *= 2 - b * x;               /* here x*a==1 mod 2**16 */
  41c892:	fb00 f203 	mul.w	r2, r0, r3
  41c896:	f1c2 0202 	rsb	r2, r2, #2
  41c89a:	fb02 f200 	mul.w	r2, r2, r0

0041c89e <.LVL152>:
  x *= 2 - b * x;               /* here x*a==1 mod 2**32 */
  41c89e:	fb02 f303 	mul.w	r3, r2, r3

0041c8a2 <.LVL153>:
  41c8a2:	3b02      	subs	r3, #2

0041c8a4 <.LVL154>:
  *rho = (fp_digit) (((fp_word) 1 << ((fp_word) DIGIT_BIT)) - ((fp_word)x));
  41c8a4:	fb03 f302 	mul.w	r3, r3, r2

0041c8a8 <.LVL155>:
  41c8a8:	600b      	str	r3, [r1, #0]

0041c8aa <.LVL156>:
  return FP_OKAY;
  41c8aa:	2000      	movs	r0, #0
  41c8ac:	4770      	bx	lr

0041c8ae <.LVL157>:
    return FP_VAL;
  41c8ae:	f04f 30ff 	mov.w	r0, #4294967295

0041c8b2 <.LVL158>:
}
  41c8b2:	4770      	bx	lr

Disassembly of section .rodata.dbase.6482%269:

0041c8b4 <dbase.6482>:
  41c8b4:	0001 0002 0003 0004 0005 0007 0009 000d     ................
  41c8c4:	0011 0019 0021 0031 0041 0061 0081 00c1     ....!.1.A.a.....
  41c8d4:	0101 0181 0201 0301 0401 0601 0801 0c01     ................
  41c8e4:	1001 1801 2001 3001 4001 6001 0000 0000     ..... .0.@.`....

Disassembly of section .rodata.dext.6483%270:

0041c8f4 <dext.6483>:
  41c8f4:	0010 0010 0010 0010 0011 0011 0012 0012     ................
  41c904:	0013 0013 0014 0014 0015 0015 0016 0016     ................
  41c914:	0017 0017 0018 0018 0019 0019 001a 001a     ................
  41c924:	001b 001b 001c 001c 001d 001d 0040 0040     ............@.@.

Disassembly of section .rodata.lbase.6480%271:

0041c934 <lbase.6480>:
  41c934:	0003 0004 0005 0006 0007 0008 0009 000a     ................
  41c944:	000b 000d 000f 0011 0013 0017 001b 001f     ................
  41c954:	0023 002b 0033 003b 0043 0053 0063 0073     #.+.3.;.C.S.c.s.
  41c964:	0083 00a3 00c3 00e3 0102 0000 0000 bf00     ................

Disassembly of section .rodata.lext.6481%272:

0041c974 <lext.6481>:
  41c974:	0010 0010 0010 0010 0010 0010 0010 0010     ................
  41c984:	0011 0011 0011 0011 0012 0012 0012 0012     ................
  41c994:	0013 0013 0013 0013 0014 0014 0014 0014     ................
  41c9a4:	0015 0015 0015 0015 0010 004e 0044 bf00     ..........N.D...

Disassembly of section .rodata.sha_padding%273:

0041c9b4 <sha_padding>:
  41c9b4:	0080 0000 0000 0000 0000 0000 0000 0000     ................
	...

Disassembly of section .text.__hi0bits%274:

0041c9f4 <__hi0bits>:
  41c9f4:	0c02      	lsrs	r2, r0, #16
  41c9f6:	0412      	lsls	r2, r2, #16
  41c9f8:	4603      	mov	r3, r0
  41c9fa:	b9b2      	cbnz	r2, 41ca2a <.LVL75>

0041c9fc <.LVL63>:
  41c9fc:	0403      	lsls	r3, r0, #16

0041c9fe <.LVL64>:
  41c9fe:	2010      	movs	r0, #16

0041ca00 <.LVL65>:
  41ca00:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  41ca04:	bf04      	itt	eq
  41ca06:	021b      	lsleq	r3, r3, #8

0041ca08 <.LVL66>:
  41ca08:	3008      	addeq	r0, #8

0041ca0a <.LVL67>:
  41ca0a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  41ca0e:	bf04      	itt	eq
  41ca10:	011b      	lsleq	r3, r3, #4

0041ca12 <.LVL68>:
  41ca12:	3004      	addeq	r0, #4

0041ca14 <.LVL69>:
  41ca14:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  41ca18:	bf04      	itt	eq
  41ca1a:	009b      	lsleq	r3, r3, #2

0041ca1c <.LVL70>:
  41ca1c:	3002      	addeq	r0, #2

0041ca1e <.LVL71>:
  41ca1e:	2b00      	cmp	r3, #0
  41ca20:	db02      	blt.n	41ca28 <.LVL74>

0041ca22 <.LVL72>:
  41ca22:	005b      	lsls	r3, r3, #1

0041ca24 <.LVL73>:
  41ca24:	d403      	bmi.n	41ca2e <.LVL77>
  41ca26:	2020      	movs	r0, #32

0041ca28 <.LVL74>:
  41ca28:	4770      	bx	lr

0041ca2a <.LVL75>:
  41ca2a:	2000      	movs	r0, #0

0041ca2c <.LVL76>:
  41ca2c:	e7e8      	b.n	41ca00 <.LVL65>

0041ca2e <.LVL77>:
  41ca2e:	3001      	adds	r0, #1

0041ca30 <.LVL78>:
  41ca30:	4770      	bx	lr

0041ca32 <.LFE21>:
  41ca32:	bf00      	nop

Disassembly of section .text.mp_init_multi%275:

0041ca34 <mp_init_multi>:
{
  41ca34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041ca36 <.LCFI50>:
  41ca36:	460d      	mov	r5, r1
  41ca38:	4617      	mov	r7, r2
  41ca3a:	461e      	mov	r6, r3
  41ca3c:	9c07      	ldr	r4, [sp, #28]
    if (a)
  41ca3e:	b108      	cbz	r0, 41ca44 <.LBE36>

0041ca40 <.LBB36>:
    fp_zero(a);
  41ca40:	f000 ffa2 	bl	41d988 <.LFE163>

0041ca44 <.LBE36>:
    if (b)
  41ca44:	b115      	cbz	r5, 41ca4c <.LBE38>

0041ca46 <.LBB38>:
    fp_zero(a);
  41ca46:	4628      	mov	r0, r5
  41ca48:	f000 ff9e 	bl	41d988 <.LFE163>

0041ca4c <.LBE38>:
    if (c)
  41ca4c:	b117      	cbz	r7, 41ca54 <.LBE40>

0041ca4e <.LBB40>:
    fp_zero(a);
  41ca4e:	4638      	mov	r0, r7
  41ca50:	f000 ff9a 	bl	41d988 <.LFE163>

0041ca54 <.LBE40>:
    if (d)
  41ca54:	b116      	cbz	r6, 41ca5c <.LBE42>

0041ca56 <.LBB42>:
    fp_zero(a);
  41ca56:	4630      	mov	r0, r6
  41ca58:	f000 ff96 	bl	41d988 <.LFE163>

0041ca5c <.LBE42>:
    if (e)
  41ca5c:	9b06      	ldr	r3, [sp, #24]
  41ca5e:	b113      	cbz	r3, 41ca66 <.LBE44>

0041ca60 <.LBB44>:
    fp_zero(a);
  41ca60:	4618      	mov	r0, r3
  41ca62:	f000 ff91 	bl	41d988 <.LFE163>

0041ca66 <.LBE44>:
    if (f)
  41ca66:	b114      	cbz	r4, 41ca6e <.LBE46>

0041ca68 <.LBB46>:
    fp_zero(a);
  41ca68:	4620      	mov	r0, r4
  41ca6a:	f000 ff8d 	bl	41d988 <.LFE163>

0041ca6e <.LBE46>:
}
  41ca6e:	2000      	movs	r0, #0
  41ca70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

Disassembly of section .text.wc_ShaHash%276:

0041ca72 <wc_ShaHash>:
    {
  41ca72:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

0041ca76 <.LCFI11>:
  41ca76:	af00      	add	r7, sp, #0

0041ca78 <.LCFI12>:
  41ca78:	4680      	mov	r8, r0
  41ca7a:	4689      	mov	r9, r1
  41ca7c:	4616      	mov	r6, r2
  41ca7e:	b0e0      	sub	sp, #384	; 0x180
  41ca80:	f10d 047f 	add.w	r4, sp, #127	; 0x7f
  41ca84:	f024 047f 	bic.w	r4, r4, #127	; 0x7f

0041ca88 <.LVL88>:
        if ((ret = wc_InitSha(sha)) != 0) {
  41ca88:	4620      	mov	r0, r4

0041ca8a <.LVL89>:
  41ca8a:	f7ff f8dd 	bl	41bc48 <.LFE19>

0041ca8e <.LVL90>:
  41ca8e:	4605      	mov	r5, r0
  41ca90:	b118      	cbz	r0, 41ca9a <.LCFI14>

0041ca92 <.LVL91>:
    }
  41ca92:	4628      	mov	r0, r5
  41ca94:	46bd      	mov	sp, r7

0041ca96 <.LCFI13>:
  41ca96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0041ca9a <.LCFI14>:
            wc_ShaUpdate(sha, data, len);
  41ca9a:	464a      	mov	r2, r9
  41ca9c:	4641      	mov	r1, r8
  41ca9e:	4620      	mov	r0, r4

0041caa0 <.LVL93>:
  41caa0:	f7fd fefd 	bl	41a89e <.LFE58>

0041caa4 <.LVL94>:
            wc_ShaFinal(sha, hash);
  41caa4:	4631      	mov	r1, r6
  41caa6:	4620      	mov	r0, r4
  41caa8:	f7fd fbcc 	bl	41a244 <.LFE180>

0041caac <.LVL95>:
        return ret;
  41caac:	e7f1      	b.n	41ca92 <.LVL91>

Disassembly of section .text.fp_2expt%277:

0041caae <fp_2expt>:
{
  41caae:	b538      	push	{r3, r4, r5, lr}

0041cab0 <.LCFI33>:
  41cab0:	4605      	mov	r5, r0
  41cab2:	460c      	mov	r4, r1
   fp_zero (a);
  41cab4:	f000 ff68 	bl	41d988 <.LFE163>

0041cab8 <.LVL276>:
   if (b < 0) {
  41cab8:	2c00      	cmp	r4, #0
  41caba:	db15      	blt.n	41cae8 <.LVL280>
   z = b / DIGIT_BIT;
  41cabc:	4623      	mov	r3, r4
  41cabe:	bfb8      	it	lt
  41cac0:	f104 031f 	addlt.w	r3, r4, #31
  41cac4:	115b      	asrs	r3, r3, #5

0041cac6 <.LVL277>:
   if (z >= FP_SIZE) {
  41cac6:	2b87      	cmp	r3, #135	; 0x87
  41cac8:	dc0e      	bgt.n	41cae8 <.LVL280>
  a->used = z + 1;
  41caca:	1c5a      	adds	r2, r3, #1
  41cacc:	602a      	str	r2, [r5, #0]
  a->dp[z] = ((fp_digit)1) << (b % DIGIT_BIT);
  41cace:	3302      	adds	r3, #2

0041cad0 <.LVL278>:
  41cad0:	4262      	negs	r2, r4
  41cad2:	f004 041f 	and.w	r4, r4, #31

0041cad6 <.LVL279>:
  41cad6:	f002 021f 	and.w	r2, r2, #31
  41cada:	bf58      	it	pl
  41cadc:	4254      	negpl	r4, r2
  41cade:	2201      	movs	r2, #1
  41cae0:	fa02 f404 	lsl.w	r4, r2, r4
  41cae4:	f845 4023 	str.w	r4, [r5, r3, lsl #2]

0041cae8 <.LVL280>:
  41cae8:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section .text.Console_UART_Flush%278:

0041caec <Console_UART_Flush>:
    if (consUartData.state != CONSOLE_UART_STATE_INIT)
  41caec:	4b0b      	ldr	r3, [pc, #44]	; (41cb1c <Console_UART_Flush+0x30>)
  41caee:	781b      	ldrb	r3, [r3, #0]
  41caf0:	b113      	cbz	r3, 41caf8 <Console_UART_Flush+0xc>
        consUartData.state = CONSOLE_UART_STATE_READY;
  41caf2:	2202      	movs	r2, #2
  41caf4:	4b09      	ldr	r3, [pc, #36]	; (41cb1c <Console_UART_Flush+0x30>)
  41caf6:	701a      	strb	r2, [r3, #0]
    consUartData.overflowFlag = false;
  41caf8:	4a08      	ldr	r2, [pc, #32]	; (41cb1c <Console_UART_Flush+0x30>)
  41cafa:	2300      	movs	r3, #0
  41cafc:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
    consUartData.isWriteComplete = true;
  41cb00:	2001      	movs	r0, #1
  41cb02:	f882 0045 	strb.w	r0, [r2, #69]	; 0x45
    writeQueue.nextPos = 0;
  41cb06:	4906      	ldr	r1, [pc, #24]	; (41cb20 <Console_UART_Flush+0x34>)
  41cb08:	604b      	str	r3, [r1, #4]
    writeQueue.tailPos = 0;
  41cb0a:	600b      	str	r3, [r1, #0]
    writeQueue.numElem = 0;
  41cb0c:	608b      	str	r3, [r1, #8]
    consUartData.isReadComplete = true;
  41cb0e:	f882 0044 	strb.w	r0, [r2, #68]	; 0x44
    readQueue.nextPos = 0;
  41cb12:	4a04      	ldr	r2, [pc, #16]	; (41cb24 <Console_UART_Flush+0x38>)
  41cb14:	6053      	str	r3, [r2, #4]
    readQueue.tailPos = 0;
  41cb16:	6013      	str	r3, [r2, #0]
    readQueue.numElem = 0;
  41cb18:	6093      	str	r3, [r2, #8]
  41cb1a:	4770      	bx	lr
  41cb1c:	2040d5d4 	.word	0x2040d5d4
  41cb20:	2040d740 	.word	0x2040d740
  41cb24:	2040d72c 	.word	0x2040d72c

Disassembly of section .text.SYS_TIME_GetTimerObject%279:

0041cb28 <SYS_TIME_GetTimerObject>:
    if ((handle != SYS_TIME_HANDLE_INVALID) && (handle != 0))
  41cb28:	1e43      	subs	r3, r0, #1
  41cb2a:	f113 0f03 	cmn.w	r3, #3
  41cb2e:	d80f      	bhi.n	41cb50 <.LVL10>
        if ((handle & _SYS_TIME_INDEX_MASK) < SYS_TIME_MAX_TIMERS)
  41cb30:	b283      	uxth	r3, r0
  41cb32:	2b09      	cmp	r3, #9
  41cb34:	d80e      	bhi.n	41cb54 <.LVL12>

0041cb36 <.LVL6>:
            if ((timerObj->tmrHandle == handle) && (timerObj->inUse == true))
  41cb36:	4a0a      	ldr	r2, [pc, #40]	; (41cb60 <.LVL17+0x2>)
  41cb38:	eb02 1243 	add.w	r2, r2, r3, lsl #5
  41cb3c:	69d2      	ldr	r2, [r2, #28]
  41cb3e:	4290      	cmp	r0, r2
  41cb40:	d10a      	bne.n	41cb58 <.LVL14>
  41cb42:	015a      	lsls	r2, r3, #5

0041cb44 <.LVL7>:
  41cb44:	4906      	ldr	r1, [pc, #24]	; (41cb60 <.LVL17+0x2>)
  41cb46:	5c8a      	ldrb	r2, [r1, r2]

0041cb48 <.LVL8>:
  41cb48:	b142      	cbz	r2, 41cb5c <.LVL16>
            timerObj = &timers[handle & _SYS_TIME_INDEX_MASK];
  41cb4a:	eb01 1043 	add.w	r0, r1, r3, lsl #5

0041cb4e <.LVL9>:
                return timerObj;
  41cb4e:	4770      	bx	lr

0041cb50 <.LVL10>:
    return NULL;
  41cb50:	2000      	movs	r0, #0

0041cb52 <.LVL11>:
  41cb52:	4770      	bx	lr

0041cb54 <.LVL12>:
  41cb54:	2000      	movs	r0, #0

0041cb56 <.LVL13>:
  41cb56:	4770      	bx	lr

0041cb58 <.LVL14>:
  41cb58:	2000      	movs	r0, #0

0041cb5a <.LVL15>:
  41cb5a:	4770      	bx	lr

0041cb5c <.LVL16>:
  41cb5c:	2000      	movs	r0, #0

0041cb5e <.LVL17>:
}
  41cb5e:	4770      	bx	lr
  41cb60:	2040d3f4 	.word	0x2040d3f4

Disassembly of section .text.SYS_TIME_TimerDestroy%280:

0041cb64 <SYS_TIME_TimerDestroy>:
    SYS_TIME_ResourceUnlock();
    return result;
}

SYS_TIME_RESULT SYS_TIME_TimerDestroy(SYS_TIME_HANDLE handle)
{
  41cb64:	b510      	push	{r4, lr}

0041cb66 <.LCFI22>:
  41cb66:	4604      	mov	r4, r0

0041cb68 <.LVL195>:
    SYS_TIME_TIMER_OBJ *tmr = NULL;
    SYS_TIME_RESULT result = SYS_TIME_ERROR;

    if (SYS_TIME_ResourceLock() == false)
  41cb68:	f000 f9f6 	bl	41cf58 <SYS_TIME_ResourceLock>

0041cb6c <.LVL196>:
  41cb6c:	b1b0      	cbz	r0, 41cb9c <.LVL206>
    {
        return result;
    }

    tmr = SYS_TIME_GetTimerObject(handle);
  41cb6e:	4620      	mov	r0, r4
  41cb70:	f7ff ffda 	bl	41cb28 <.LFE170>

0041cb74 <.LVL197>:

    if(tmr != NULL)
  41cb74:	4604      	mov	r4, r0

0041cb76 <.LVL198>:
  41cb76:	b178      	cbz	r0, 41cb98 <.LVL205>
    {
        if(tmr->active == true)
  41cb78:	7843      	ldrb	r3, [r0, #1]
  41cb7a:	b943      	cbnz	r3, 41cb8e <.LVL203>

0041cb7c <.LVL199>:
        {
            SYS_TIME_RemoveFromList(tmr);
            tmr->active = false;
        }
        tmr->tmrElapsedFlag = false;
  41cb7c:	2000      	movs	r0, #0
  41cb7e:	7520      	strb	r0, [r4, #20]
        tmr->tmrElapsed = false;
  41cb80:	7560      	strb	r0, [r4, #21]
        tmr->inUse = false;
  41cb82:	7020      	strb	r0, [r4, #0]

0041cb84 <.LVL200>:
        result = SYS_TIME_SUCCESS;
  41cb84:	4604      	mov	r4, r0

0041cb86 <.LVL201>:
    }

    SYS_TIME_ResourceUnlock();
  41cb86:	f000 f90d 	bl	41cda4 <.LFE142>

0041cb8a <.LVL202>:
    return result;
}
  41cb8a:	4620      	mov	r0, r4
  41cb8c:	bd10      	pop	{r4, pc}

0041cb8e <.LVL203>:
            SYS_TIME_RemoveFromList(tmr);
  41cb8e:	f7ff fb07 	bl	41c1a0 <SYS_TIME_RemoveFromList>

0041cb92 <.LVL204>:
            tmr->active = false;
  41cb92:	2300      	movs	r3, #0
  41cb94:	7063      	strb	r3, [r4, #1]
  41cb96:	e7f1      	b.n	41cb7c <.LVL199>

0041cb98 <.LVL205>:
    SYS_TIME_RESULT result = SYS_TIME_ERROR;
  41cb98:	2401      	movs	r4, #1
  41cb9a:	e7f4      	b.n	41cb86 <.LVL201>

0041cb9c <.LVL206>:
        return result;
  41cb9c:	2401      	movs	r4, #1

0041cb9e <.LVL207>:
  41cb9e:	e7f4      	b.n	41cb8a <.LVL202>

Disassembly of section .text.USART1_Initialize%281:

0041cba0 <USART1_Initialize>:
    USART1_REGS->US_CR = (US_CR_RSTRX_Msk | US_CR_RSTTX_Msk | US_CR_RSTSTA_Msk);
  41cba0:	4b0c      	ldr	r3, [pc, #48]	; (41cbd4 <.LFE186+0x34>)
  41cba2:	f44f 7286 	mov.w	r2, #268	; 0x10c
  41cba6:	601a      	str	r2, [r3, #0]
    USART1_REGS->US_CR = (US_CR_TXEN_Msk | US_CR_RXEN_Msk);
  41cba8:	2250      	movs	r2, #80	; 0x50
  41cbaa:	601a      	str	r2, [r3, #0]
    USART1_REGS->US_MR = ((US_MR_USCLKS_MCK) | (0 << US_MR_MODE9_Pos) | US_MR_CHRL_8_BIT | US_MR_PAR_NO | US_MR_NBSTOP_1_BIT | (0 << US_MR_OVER_Pos));
  41cbac:	f44f 620c 	mov.w	r2, #2240	; 0x8c0
  41cbb0:	605a      	str	r2, [r3, #4]
    USART1_REGS->US_BRGR = US_BRGR_CD(81);
  41cbb2:	2251      	movs	r2, #81	; 0x51
  41cbb4:	621a      	str	r2, [r3, #32]
    usart1Obj.rxBuffer = NULL;
  41cbb6:	4b08      	ldr	r3, [pc, #32]	; (41cbd8 <.LFE186+0x38>)
  41cbb8:	2200      	movs	r2, #0
  41cbba:	619a      	str	r2, [r3, #24]
    usart1Obj.rxSize = 0;
  41cbbc:	61da      	str	r2, [r3, #28]
    usart1Obj.rxProcessedSize = 0;
  41cbbe:	621a      	str	r2, [r3, #32]
    usart1Obj.rxBusyStatus = false;
  41cbc0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    usart1Obj.rxCallback = NULL;
  41cbc4:	625a      	str	r2, [r3, #36]	; 0x24
    usart1Obj.txBuffer = NULL;
  41cbc6:	601a      	str	r2, [r3, #0]
    usart1Obj.txSize = 0;
  41cbc8:	605a      	str	r2, [r3, #4]
    usart1Obj.txProcessedSize = 0;
  41cbca:	609a      	str	r2, [r3, #8]
    usart1Obj.txBusyStatus = false;
  41cbcc:	751a      	strb	r2, [r3, #20]
    usart1Obj.txCallback = NULL;
  41cbce:	60da      	str	r2, [r3, #12]
  41cbd0:	4770      	bx	lr
  41cbd2:	bf00      	nop
  41cbd4:	40028000 	.word	0x40028000
  41cbd8:	20400020 	.word	0x20400020

Disassembly of section .text.USART1_Read%282:

0041cbdc <USART1_Read>:
    if(NULL != lBuffer)
  41cbdc:	b1a0      	cbz	r0, 41cc08 <.LCFI6>
{
  41cbde:	b538      	push	{r3, r4, r5, lr}

0041cbe0 <.LCFI5>:
  41cbe0:	4605      	mov	r5, r0
  41cbe2:	460c      	mov	r4, r1
        USART1_ErrorGet();
  41cbe4:	f000 fa34 	bl	41d050 <.LFE6>

0041cbe8 <.LVL27>:
        if(usart1Obj.rxBusyStatus == false)
  41cbe8:	4b09      	ldr	r3, [pc, #36]	; (41cc10 <.LVL33>)
  41cbea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
  41cbee:	b96b      	cbnz	r3, 41cc0c <.LCFI7>
            usart1Obj.rxBuffer = lBuffer;
  41cbf0:	4b07      	ldr	r3, [pc, #28]	; (41cc10 <.LVL33>)
  41cbf2:	619d      	str	r5, [r3, #24]
            usart1Obj.rxSize = size;
  41cbf4:	61dc      	str	r4, [r3, #28]
            usart1Obj.rxProcessedSize = 0;
  41cbf6:	2200      	movs	r2, #0
  41cbf8:	621a      	str	r2, [r3, #32]
            usart1Obj.rxBusyStatus = true;
  41cbfa:	2001      	movs	r0, #1
  41cbfc:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c

0041cc00 <.LVL28>:
            USART1_REGS->US_IER = (US_IER_RXRDY_Msk | US_IER_FRAME_Msk | US_IER_PARE_Msk | US_IER_OVRE_Msk);
  41cc00:	22e1      	movs	r2, #225	; 0xe1
  41cc02:	4b04      	ldr	r3, [pc, #16]	; (41cc14 <.LVL33+0x4>)
  41cc04:	609a      	str	r2, [r3, #8]
  41cc06:	bd38      	pop	{r3, r4, r5, pc}

0041cc08 <.LCFI6>:
    bool status = false;
  41cc08:	2000      	movs	r0, #0

0041cc0a <.LVL30>:
  41cc0a:	4770      	bx	lr

0041cc0c <.LCFI7>:
  41cc0c:	2000      	movs	r0, #0

0041cc0e <.LVL32>:
}
  41cc0e:	bd38      	pop	{r3, r4, r5, pc}

0041cc10 <.LVL33>:
  41cc10:	20400020 	.word	0x20400020
  41cc14:	40028000 	.word	0x40028000

Disassembly of section .text.wc_AesSetIV%283:

0041cc18 <wc_AesSetIV>:
    if (iv)
  41cc18:	b181      	cbz	r1, 41cc3c <.LVL14>
{
  41cc1a:	b430      	push	{r4, r5}

0041cc1c <.LCFI2>:
  41cc1c:	460b      	mov	r3, r1
        memcpy((void*)aes->iv_ce, (void*)iv, AES_BLOCK_SIZE);
  41cc1e:	680d      	ldr	r5, [r1, #0]
  41cc20:	684c      	ldr	r4, [r1, #4]
  41cc22:	6889      	ldr	r1, [r1, #8]

0041cc24 <.LVL11>:
  41cc24:	68db      	ldr	r3, [r3, #12]

0041cc26 <.LVL12>:
  41cc26:	f8c0 514c 	str.w	r5, [r0, #332]	; 0x14c
  41cc2a:	f8c0 4150 	str.w	r4, [r0, #336]	; 0x150
  41cc2e:	f8c0 1154 	str.w	r1, [r0, #340]	; 0x154
  41cc32:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
}
  41cc36:	2000      	movs	r0, #0

0041cc38 <.LVL13>:
  41cc38:	bc30      	pop	{r4, r5}

0041cc3a <.LCFI3>:
  41cc3a:	4770      	bx	lr

0041cc3c <.LVL14>:
        memset((void*)aes->iv_ce, 0, AES_BLOCK_SIZE);
  41cc3c:	2300      	movs	r3, #0
  41cc3e:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
  41cc42:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
  41cc46:	f8c0 3154 	str.w	r3, [r0, #340]	; 0x154
  41cc4a:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
}
  41cc4e:	2000      	movs	r0, #0

0041cc50 <.LVL15>:
  41cc50:	4770      	bx	lr

Disassembly of section .text.random_test%284:

0041cc54 <random_test>:
{
  41cc54:	b500      	push	{lr}

0041cc56 <.LCFI49>:
  41cc56:	b0cb      	sub	sp, #300	; 0x12c

0041cc58 <.LCFI50>:
    appData.random_test_result = 1;
  41cc58:	2201      	movs	r2, #1
  41cc5a:	4b0b      	ldr	r3, [pc, #44]	; (41cc88 <.LVL109+0x10>)
  41cc5c:	641a      	str	r2, [r3, #64]	; 0x40
    ret = CRYPT_RNG_Initialize(&rng);
  41cc5e:	a808      	add	r0, sp, #32
  41cc60:	f000 ff2e 	bl	41dac0 <.LFE178>

0041cc64 <.LVL107>:
    if (ret == 0) 
  41cc64:	b110      	cbz	r0, 41cc6c <.LCFI52>
}
  41cc66:	b04b      	add	sp, #300	; 0x12c

0041cc68 <.LCFI51>:
  41cc68:	f85d fb04 	ldr.w	pc, [sp], #4

0041cc6c <.LCFI52>:
        ret = CRYPT_RNG_BlockGenerate(&rng, block, sizeof(block));   
  41cc6c:	2220      	movs	r2, #32
  41cc6e:	4669      	mov	r1, sp
  41cc70:	eb0d 0002 	add.w	r0, sp, r2

0041cc74 <.LVL108>:
  41cc74:	f000 fc74 	bl	41d560 <.LFE150>

0041cc78 <.LVL109>:
        if (ret == 0) 
  41cc78:	2800      	cmp	r0, #0
  41cc7a:	d1f4      	bne.n	41cc66 <.LVL107+0x2>
            appData.random_test_result--;
  41cc7c:	4a02      	ldr	r2, [pc, #8]	; (41cc88 <.LVL109+0x10>)
  41cc7e:	6c13      	ldr	r3, [r2, #64]	; 0x40
  41cc80:	3b01      	subs	r3, #1
  41cc82:	6413      	str	r3, [r2, #64]	; 0x40
}
  41cc84:	e7ef      	b.n	41cc66 <.LVL107+0x2>
  41cc86:	bf00      	nop
  41cc88:	2040d534 	.word	0x2040d534

Disassembly of section .text.GetMyVersion%285:

0041cc8c <GetMyVersion>:
{
  41cc8c:	b470      	push	{r4, r5, r6}

0041cc8e <.LCFI42>:
    word32 idx = *inOutIdx;
  41cc8e:	680c      	ldr	r4, [r1, #0]

0041cc90 <.LVL270>:
    if ((idx + MIN_VERSION_SZ) > maxIdx)
  41cc90:	1ce5      	adds	r5, r4, #3
  41cc92:	429d      	cmp	r5, r3
  41cc94:	d80d      	bhi.n	41ccb2 <.LCFI44>
    if (input[idx++] != ASN_INTEGER)
  41cc96:	1c66      	adds	r6, r4, #1

0041cc98 <.LVL271>:
  41cc98:	5d03      	ldrb	r3, [r0, r4]

0041cc9a <.LVL272>:
  41cc9a:	2b02      	cmp	r3, #2
  41cc9c:	d10c      	bne.n	41ccb8 <.LVL278>
    if (input[idx++] != 0x01)
  41cc9e:	3402      	adds	r4, #2

0041cca0 <.LVL273>:
  41cca0:	5d83      	ldrb	r3, [r0, r6]
  41cca2:	2b01      	cmp	r3, #1
  41cca4:	d10b      	bne.n	41ccbe <.LVL280>

0041cca6 <.LVL274>:
    *version  = input[idx++];
  41cca6:	5d03      	ldrb	r3, [r0, r4]
  41cca8:	6013      	str	r3, [r2, #0]
    *inOutIdx = idx;
  41ccaa:	600d      	str	r5, [r1, #0]
    return *version;
  41ccac:	6810      	ldr	r0, [r2, #0]

0041ccae <.LVL275>:
}
  41ccae:	bc70      	pop	{r4, r5, r6}

0041ccb0 <.LCFI43>:
  41ccb0:	4770      	bx	lr

0041ccb2 <.LCFI44>:
        return ASN_PARSE_E;
  41ccb2:	f06f 008b 	mvn.w	r0, #139	; 0x8b

0041ccb6 <.LVL277>:
  41ccb6:	e7fa      	b.n	41ccae <.LVL275>

0041ccb8 <.LVL278>:
        return ASN_PARSE_E;
  41ccb8:	f06f 008b 	mvn.w	r0, #139	; 0x8b

0041ccbc <.LVL279>:
  41ccbc:	e7f7      	b.n	41ccae <.LVL275>

0041ccbe <.LVL280>:
        return ASN_VERSION_E;
  41ccbe:	f06f 008c 	mvn.w	r0, #140	; 0x8c

0041ccc2 <.LVL281>:
  41ccc2:	e7f4      	b.n	41ccae <.LVL275>

Disassembly of section .rodata.pc1%286:

0041ccc4 <pc1>:
  41ccc4:	3139 2129 1119 0109 323a 222a 121a 020a     91)!....:2*"....
  41ccd4:	333b 232b 131b 030b 343c 242c 373f 272f     ;3+#....<4,$?7/'
  41cce4:	171f 070f 363e 262e 161e 060e 353d 252d     ....>6.&....=5-%
  41ccf4:	151d 050d 141c 040c                         ........

Disassembly of section .text.wc_InitMd5_ex%287:

0041ccfc <wc_InitMd5_ex>:
    if (md5 == NULL)
  41ccfc:	4603      	mov	r3, r0
  41ccfe:	b1a0      	cbz	r0, 41cd2a <.LVL328>
    md5->heap = heap;
  41cd00:	65c1      	str	r1, [r0, #92]	; 0x5c

0041cd02 <.LBB139>:
    md5->digest[0] = 0x67452301L;
  41cd02:	4a0b      	ldr	r2, [pc, #44]	; (41cd30 <.LVL329+0x2>)

0041cd04 <.LVL325>:
  41cd04:	64c2      	str	r2, [r0, #76]	; 0x4c
    md5->digest[1] = 0xefcdab89L;
  41cd06:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
  41cd0a:	6502      	str	r2, [r0, #80]	; 0x50
    md5->digest[2] = 0x98badcfeL;
  41cd0c:	f102 4229 	add.w	r2, r2, #2835349504	; 0xa9000000
  41cd10:	f5a2 1296 	sub.w	r2, r2, #1228800	; 0x12c000
  41cd14:	f6a2 628b 	subw	r2, r2, #3723	; 0xe8b
  41cd18:	6542      	str	r2, [r0, #84]	; 0x54
    md5->digest[3] = 0x10325476L;
  41cd1a:	f1a2 3288 	sub.w	r2, r2, #2290649224	; 0x88888888
  41cd1e:	6582      	str	r2, [r0, #88]	; 0x58
    md5->buffLen = 0;
  41cd20:	2000      	movs	r0, #0

0041cd22 <.LVL326>:
  41cd22:	6018      	str	r0, [r3, #0]
    md5->loLen   = 0;
  41cd24:	6058      	str	r0, [r3, #4]
    md5->hiLen   = 0;
  41cd26:	6098      	str	r0, [r3, #8]

0041cd28 <.LBE139>:
  41cd28:	4770      	bx	lr

0041cd2a <.LVL328>:
        return BAD_FUNC_ARG;
  41cd2a:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041cd2e <.LVL329>:
}
  41cd2e:	4770      	bx	lr
  41cd30:	67452301 	.word	0x67452301

Disassembly of section .text.fp_to_unsigned_bin_at_pos%288:

0041cd34 <fp_to_unsigned_bin_at_pos>:
{
  41cd34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0041cd38 <.LCFI74>:
   while (fp_iszero (t) == FP_NO) {
  41cd38:	680b      	ldr	r3, [r1, #0]
  41cd3a:	b1ab      	cbz	r3, 41cd68 <.LVL499>
  41cd3c:	460c      	mov	r4, r1
  41cd3e:	4605      	mov	r5, r0
  41cd40:	1816      	adds	r6, r2, r0
      fp_div_2d (t, 8, t, NULL);
  41cd42:	f04f 0800 	mov.w	r8, #0
  41cd46:	2708      	movs	r7, #8

0041cd48 <.LVL495>:
      b[x++] = (unsigned char) (t->dp[0] & 255);
  41cd48:	3501      	adds	r5, #1
  41cd4a:	68a3      	ldr	r3, [r4, #8]
  41cd4c:	f806 3b01 	strb.w	r3, [r6], #1
      fp_div_2d (t, 8, t, NULL);
  41cd50:	4643      	mov	r3, r8
  41cd52:	4622      	mov	r2, r4
  41cd54:	4639      	mov	r1, r7
  41cd56:	4620      	mov	r0, r4
  41cd58:	f7fc fb0f 	bl	41937a <.LFE7>

0041cd5c <.LVL497>:
   while (fp_iszero (t) == FP_NO) {
  41cd5c:	6823      	ldr	r3, [r4, #0]
  41cd5e:	2b00      	cmp	r3, #0
  41cd60:	d1f2      	bne.n	41cd48 <.LVL495>

0041cd62 <.LVL498>:
}
  41cd62:	4628      	mov	r0, r5
  41cd64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041cd68 <.LVL499>:
   while (fp_iszero (t) == FP_NO) {
  41cd68:	4605      	mov	r5, r0
  return x;
  41cd6a:	e7fa      	b.n	41cd62 <.LVL498>

Disassembly of section .text.AesWriteKey%289:

0041cd6c <AesWriteKey>:
    if (AesKey)
  41cd6c:	b1b0      	cbz	r0, 41cd9c <.LCFI1>
{
  41cd6e:	b430      	push	{r4, r5}

0041cd70 <.LCFI0>:
  41cd70:	4604      	mov	r4, r0

0041cd72 <.LBB2>:
        key_length /= 4;
  41cd72:	4608      	mov	r0, r1

0041cd74 <.LVL1>:
  41cd74:	2900      	cmp	r1, #0
  41cd76:	bfb8      	it	lt
  41cd78:	1cc8      	addlt	r0, r1, #3
  41cd7a:	1080      	asrs	r0, r0, #2

0041cd7c <.LVL2>:
        for (i = 0; i < key_length; i++)
  41cd7c:	2800      	cmp	r0, #0
  41cd7e:	dd0c      	ble.n	41cd9a <.LBE2>
  41cd80:	2200      	movs	r2, #0
  41cd82:	4613      	mov	r3, r2
            AES_REGS->AES_KEYWR[i] = *AesKey++;
  41cd84:	4d06      	ldr	r5, [pc, #24]	; (41cda0 <.LCFI1+0x4>)

0041cd86 <.LVL3>:
  41cd86:	f854 1b04 	ldr.w	r1, [r4], #4

0041cd8a <.LVL4>:
  41cd8a:	3208      	adds	r2, #8
  41cd8c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
        for (i = 0; i < key_length; i++)
  41cd90:	3301      	adds	r3, #1

0041cd92 <.LVL5>:
  41cd92:	b2db      	uxtb	r3, r3

0041cd94 <.LVL6>:
  41cd94:	461a      	mov	r2, r3
  41cd96:	4298      	cmp	r0, r3
  41cd98:	dcf5      	bgt.n	41cd86 <.LVL3>

0041cd9a <.LBE2>:
}
  41cd9a:	bc30      	pop	{r4, r5}

0041cd9c <.LCFI1>:
  41cd9c:	4770      	bx	lr
  41cd9e:	bf00      	nop
  41cda0:	4006c000 	.word	0x4006c000

Disassembly of section .text.SYS_TIME_ResourceUnlock%290:

0041cda4 <SYS_TIME_ResourceUnlock>:
    SYS_INT_SourceEnable(gSystemCounterObj.hwTimerIntNum);
  41cda4:	4b0b      	ldr	r3, [pc, #44]	; (41cdd4 <.LVL4+0x4>)
  41cda6:	f993 3008 	ldrsb.w	r3, [r3, #8]

0041cdaa <.LBB16>:
  if ((int32_t)(IRQn) >= 0)
  41cdaa:	2b00      	cmp	r3, #0
  41cdac:	db08      	blt.n	41cdc0 <.LBE16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  41cdae:	0959      	lsrs	r1, r3, #5
  41cdb0:	f003 031f 	and.w	r3, r3, #31

0041cdb4 <.LVL1>:
  41cdb4:	2201      	movs	r2, #1
  41cdb6:	fa02 f303 	lsl.w	r3, r2, r3
  41cdba:	4a07      	ldr	r2, [pc, #28]	; (41cdd8 <.LVL4+0x8>)
  41cdbc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

0041cdc0 <.LBE16>:
    if(gSystemCounterObj.interruptNestingCount == 0)
  41cdc0:	4b04      	ldr	r3, [pc, #16]	; (41cdd4 <.LVL4+0x4>)
  41cdc2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
  41cdc6:	b91b      	cbnz	r3, 41cdd0 <.LVL4>

0041cdc8 <.LBB18>:
// *****************************************************************************
/* Function: OSAL_RESULT OSAL_MUTEX_Unlock(OSAL_MUTEX_HANDLE_TYPE mutexID)
 */
static OSAL_RESULT __attribute__((always_inline)) OSAL_MUTEX_Unlock(OSAL_MUTEX_HANDLE_TYPE* mutexID)
{
    *mutexID = 1;
  41cdc8:	2201      	movs	r2, #1
  41cdca:	4b02      	ldr	r3, [pc, #8]	; (41cdd4 <.LVL4+0x4>)
  41cdcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

0041cdd0 <.LVL4>:
  41cdd0:	4770      	bx	lr
  41cdd2:	bf00      	nop
  41cdd4:	2040d624 	.word	0x2040d624
  41cdd8:	e000e100 	.word	0xe000e100

Disassembly of section .text.__mcmp%291:

0041cddc <__mcmp>:
  41cddc:	b430      	push	{r4, r5}

0041cdde <.LCFI12>:
  41cdde:	690b      	ldr	r3, [r1, #16]
  41cde0:	4605      	mov	r5, r0
  41cde2:	6900      	ldr	r0, [r0, #16]

0041cde4 <.LVL212>:
  41cde4:	1ac0      	subs	r0, r0, r3

0041cde6 <.LVL213>:
  41cde6:	d10f      	bne.n	41ce08 <.LVL223>
  41cde8:	009b      	lsls	r3, r3, #2

0041cdea <.LVL214>:
  41cdea:	3514      	adds	r5, #20

0041cdec <.LVL215>:
  41cdec:	3114      	adds	r1, #20

0041cdee <.LVL216>:
  41cdee:	4419      	add	r1, r3

0041cdf0 <.LVL217>:
  41cdf0:	442b      	add	r3, r5

0041cdf2 <.LVL218>:
  41cdf2:	e001      	b.n	41cdf8 <.LVL220>

0041cdf4 <.LVL219>:
  41cdf4:	429d      	cmp	r5, r3
  41cdf6:	d207      	bcs.n	41ce08 <.LVL223>

0041cdf8 <.LVL220>:
  41cdf8:	f853 4d04 	ldr.w	r4, [r3, #-4]!

0041cdfc <.LVL221>:
  41cdfc:	f851 2d04 	ldr.w	r2, [r1, #-4]!

0041ce00 <.LVL222>:
  41ce00:	4294      	cmp	r4, r2
  41ce02:	d0f7      	beq.n	41cdf4 <.LVL219>
  41ce04:	d302      	bcc.n	41ce0c <.LCFI14>
  41ce06:	2001      	movs	r0, #1

0041ce08 <.LVL223>:
  41ce08:	bc30      	pop	{r4, r5}

0041ce0a <.LCFI13>:
  41ce0a:	4770      	bx	lr

0041ce0c <.LCFI14>:
  41ce0c:	f04f 30ff 	mov.w	r0, #4294967295

0041ce10 <.LVL225>:
  41ce10:	e7fa      	b.n	41ce08 <.LVL223>

0041ce12 <.LFE27>:
  41ce12:	bf00      	nop

Disassembly of section .text.wc_HashGetDigestSize%292:

0041ce14 <wc_HashGetDigestSize>:
    switch(hash_type)
  41ce14:	3803      	subs	r0, #3

0041ce16 <.LVL9>:
  41ce16:	2806      	cmp	r0, #6
  41ce18:	d811      	bhi.n	41ce3e <.LVL15>
  41ce1a:	e8df f000 	tbb	[pc, r0]
  41ce1e:	0604      	.short	0x0604
  41ce20:	0e0c0a08 	.word	0x0e0c0a08
  41ce24:	13          	.byte	0x13
  41ce25:	00          	.byte	0x00
            dig_size = MD5_DIGEST_SIZE;
  41ce26:	2010      	movs	r0, #16
  41ce28:	4770      	bx	lr

0041ce2a <.LVL10>:
            dig_size = SHA_DIGEST_SIZE;
  41ce2a:	2014      	movs	r0, #20
            break;
  41ce2c:	4770      	bx	lr

0041ce2e <.LVL11>:
            dig_size = SHA256_DIGEST_SIZE;
  41ce2e:	2020      	movs	r0, #32
            break;
  41ce30:	4770      	bx	lr

0041ce32 <.LVL12>:
            dig_size = SHA384_DIGEST_SIZE;
  41ce32:	2030      	movs	r0, #48	; 0x30
            break;
  41ce34:	4770      	bx	lr

0041ce36 <.LVL13>:
            dig_size = SHA512_DIGEST_SIZE;
  41ce36:	2040      	movs	r0, #64	; 0x40
            break;
  41ce38:	4770      	bx	lr

0041ce3a <.LVL14>:
            dig_size = MD5_DIGEST_SIZE + SHA_DIGEST_SIZE;
  41ce3a:	2024      	movs	r0, #36	; 0x24
            break;
  41ce3c:	4770      	bx	lr

0041ce3e <.LVL15>:
            dig_size = BAD_FUNC_ARG;
  41ce3e:	f06f 00ac 	mvn.w	r0, #172	; 0xac
            break;
  41ce42:	4770      	bx	lr

0041ce44 <.LVL16>:
    int dig_size = HASH_TYPE_E; /* Default to hash type error */
  41ce44:	f06f 00e7 	mvn.w	r0, #231	; 0xe7
}
  41ce48:	4770      	bx	lr

Disassembly of section .text.wc_Md5Hash%293:

0041ce4a <wc_Md5Hash>:
    {
  41ce4a:	b570      	push	{r4, r5, r6, lr}

0041ce4c <.LCFI7>:
  41ce4c:	b098      	sub	sp, #96	; 0x60

0041ce4e <.LCFI8>:
  41ce4e:	4604      	mov	r4, r0
  41ce50:	460d      	mov	r5, r1
  41ce52:	4616      	mov	r6, r2
        ret = wc_InitMd5(md5);
  41ce54:	4668      	mov	r0, sp

0041ce56 <.LVL78>:
  41ce56:	f000 fd76 	bl	41d946 <.LFE181>

0041ce5a <.LVL79>:
        if (ret == 0) {
  41ce5a:	4603      	mov	r3, r0
  41ce5c:	b110      	cbz	r0, 41ce64 <.LCFI10>
    }
  41ce5e:	4618      	mov	r0, r3

0041ce60 <.LVL80>:
  41ce60:	b018      	add	sp, #96	; 0x60

0041ce62 <.LCFI9>:
  41ce62:	bd70      	pop	{r4, r5, r6, pc}

0041ce64 <.LCFI10>:
            ret = wc_Md5Update(md5, data, len);
  41ce64:	462a      	mov	r2, r5
  41ce66:	4621      	mov	r1, r4
  41ce68:	4668      	mov	r0, sp

0041ce6a <.LVL82>:
  41ce6a:	f7fd fb01 	bl	41a470 <.LFE23>

0041ce6e <.LVL83>:
            if (ret == 0) {
  41ce6e:	4603      	mov	r3, r0
  41ce70:	2800      	cmp	r0, #0
  41ce72:	d1f4      	bne.n	41ce5e <.LVL79+0x4>
                ret = wc_Md5Final(md5, hash);
  41ce74:	4631      	mov	r1, r6
  41ce76:	4668      	mov	r0, sp

0041ce78 <.LVL84>:
  41ce78:	f7fb fdc4 	bl	418a04 <.LFE177>

0041ce7c <.LVL85>:
  41ce7c:	4603      	mov	r3, r0

0041ce7e <.LVL86>:
        return ret;
  41ce7e:	e7ee      	b.n	41ce5e <.LVL79+0x4>

Disassembly of section .text.wc_Sha512Hash%294:

0041ce80 <wc_Sha512Hash>:
#endif /* !defined(WOLFSSL_TI_HASH) */


#if defined(WOLFSSL_SHA512)
    int wc_Sha512Hash(const byte* data, word32 len, byte* hash)
    {
  41ce80:	b570      	push	{r4, r5, r6, lr}

0041ce82 <.LCFI19>:
  41ce82:	b0b8      	sub	sp, #224	; 0xe0

0041ce84 <.LCFI20>:
  41ce84:	4604      	mov	r4, r0
  41ce86:	460d      	mov	r5, r1
  41ce88:	4616      	mov	r6, r2

0041ce8a <.LVL108>:
        sha512 = (Sha512*)XMALLOC(sizeof(Sha512), NULL, DYNAMIC_TYPE_TMP_BUFFER);
        if (sha512 == NULL)
            return MEMORY_E;
    #endif

        if ((ret = wc_InitSha512(sha512)) != 0) {
  41ce8a:	4668      	mov	r0, sp

0041ce8c <.LVL109>:
  41ce8c:	f000 fe8d 	bl	41dbaa <.LFE215>

0041ce90 <.LVL110>:
  41ce90:	4603      	mov	r3, r0
  41ce92:	b110      	cbz	r0, 41ce9a <.LCFI22>
    #ifdef WOLFSSL_SMALL_STACK
        XFREE(sha512, NULL, DYNAMIC_TYPE_TMP_BUFFER);
    #endif

        return ret;
    }
  41ce94:	4618      	mov	r0, r3

0041ce96 <.LVL111>:
  41ce96:	b038      	add	sp, #224	; 0xe0

0041ce98 <.LCFI21>:
  41ce98:	bd70      	pop	{r4, r5, r6, pc}

0041ce9a <.LCFI22>:
        else if ((ret = wc_Sha512Update(sha512, data, len)) != 0) {
  41ce9a:	462a      	mov	r2, r5
  41ce9c:	4621      	mov	r1, r4
  41ce9e:	4668      	mov	r0, sp

0041cea0 <.LVL113>:
  41cea0:	f7fa fd04 	bl	4178ac <.LFE178>

0041cea4 <.LVL114>:
  41cea4:	4603      	mov	r3, r0
  41cea6:	2800      	cmp	r0, #0
  41cea8:	d1f4      	bne.n	41ce94 <.LVL110+0x4>
        else if ((ret = wc_Sha512Final(sha512, hash)) != 0) {
  41ceaa:	4631      	mov	r1, r6
  41ceac:	4668      	mov	r0, sp

0041ceae <.LVL115>:
  41ceae:	f7f6 fd7f 	bl	4139b0 <wc_Sha512Final>

0041ceb2 <.LVL116>:
  41ceb2:	4603      	mov	r3, r0

0041ceb4 <.LVL117>:
        return ret;
  41ceb4:	e7ee      	b.n	41ce94 <.LVL110+0x4>

Disassembly of section .text.wc_Sha384Hash%295:

0041ceb6 <wc_Sha384Hash>:

    #if defined(WOLFSSL_SHA384)
        int wc_Sha384Hash(const byte* data, word32 len, byte* hash)
        {
  41ceb6:	b570      	push	{r4, r5, r6, lr}

0041ceb8 <.LCFI23>:
  41ceb8:	b0b8      	sub	sp, #224	; 0xe0

0041ceba <.LCFI24>:
  41ceba:	4604      	mov	r4, r0
  41cebc:	460d      	mov	r5, r1
  41cebe:	4616      	mov	r6, r2

0041cec0 <.LVL119>:
            sha384 = (Sha384*)XMALLOC(sizeof(Sha384), NULL, DYNAMIC_TYPE_TMP_BUFFER);
            if (sha384 == NULL)
                return MEMORY_E;
        #endif

            if ((ret = wc_InitSha384(sha384)) != 0) {
  41cec0:	4668      	mov	r0, sp

0041cec2 <.LVL120>:
  41cec2:	f000 fe79 	bl	41dbb8 <.LFE22>

0041cec6 <.LVL121>:
  41cec6:	4603      	mov	r3, r0
  41cec8:	b110      	cbz	r0, 41ced0 <.LCFI26>
        #ifdef WOLFSSL_SMALL_STACK
            XFREE(sha384, NULL, DYNAMIC_TYPE_TMP_BUFFER);
        #endif

            return ret;
        }
  41ceca:	4618      	mov	r0, r3

0041cecc <.LVL122>:
  41cecc:	b038      	add	sp, #224	; 0xe0

0041cece <.LCFI25>:
  41cece:	bd70      	pop	{r4, r5, r6, pc}

0041ced0 <.LCFI26>:
            else if ((ret = wc_Sha384Update(sha384, data, len)) != 0) {
  41ced0:	462a      	mov	r2, r5
  41ced2:	4621      	mov	r1, r4
  41ced4:	4668      	mov	r0, sp

0041ced6 <.LVL124>:
  41ced6:	f7fa fd5e 	bl	417996 <.LBE719>

0041ceda <.LVL125>:
  41ceda:	4603      	mov	r3, r0
  41cedc:	2800      	cmp	r0, #0
  41cede:	d1f4      	bne.n	41ceca <.LVL121+0x4>
            else if ((ret = wc_Sha384Final(sha384, hash)) != 0) {
  41cee0:	4631      	mov	r1, r6
  41cee2:	4668      	mov	r0, sp

0041cee4 <.LVL126>:
  41cee4:	f7f6 feac 	bl	413c40 <.LFE21>

0041cee8 <.LVL127>:
  41cee8:	4603      	mov	r3, r0

0041ceea <.LVL128>:
            return ret;
  41ceea:	e7ee      	b.n	41ceca <.LVL121+0x4>

Disassembly of section .text.inflateEnd%296:

0041ceec <inflateEnd>:

int ZEXPORT inflateEnd(strm)
z_streamp strm;
{
    struct inflate_state FAR *state;
    if (strm == Z_NULL || strm->state == Z_NULL || strm->zfree == (free_func)0)
  41ceec:	b180      	cbz	r0, 41cf10 <.LCFI21>
{
  41ceee:	b510      	push	{r4, lr}

0041cef0 <.LCFI20>:
  41cef0:	4604      	mov	r4, r0
    if (strm == Z_NULL || strm->state == Z_NULL || strm->zfree == (free_func)0)
  41cef2:	69c3      	ldr	r3, [r0, #28]
  41cef4:	b17b      	cbz	r3, 41cf16 <.LCFI22>
  41cef6:	6a42      	ldr	r2, [r0, #36]	; 0x24
  41cef8:	b182      	cbz	r2, 41cf1c <.LVL496>

0041cefa <.LVL488>:
        return Z_STREAM_ERROR;
    state = (struct inflate_state FAR *)strm->state;
    if (state->window != Z_NULL) ZFREE(strm, state->window);
  41cefa:	6b59      	ldr	r1, [r3, #52]	; 0x34
  41cefc:	b109      	cbz	r1, 41cf02 <.LVL490>
  41cefe:	6a80      	ldr	r0, [r0, #40]	; 0x28

0041cf00 <.LVL489>:
  41cf00:	4790      	blx	r2

0041cf02 <.LVL490>:
    ZFREE(strm, strm->state);
  41cf02:	6a63      	ldr	r3, [r4, #36]	; 0x24
  41cf04:	69e1      	ldr	r1, [r4, #28]
  41cf06:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  41cf08:	4798      	blx	r3
    strm->state = Z_NULL;
  41cf0a:	2000      	movs	r0, #0
  41cf0c:	61e0      	str	r0, [r4, #28]
    Tracev((stderr, "inflate: end\n"));
    return Z_OK;
  41cf0e:	bd10      	pop	{r4, pc}

0041cf10 <.LCFI21>:
        return Z_STREAM_ERROR;
  41cf10:	f06f 0001 	mvn.w	r0, #1

0041cf14 <.LVL493>:
  41cf14:	4770      	bx	lr

0041cf16 <.LCFI22>:
  41cf16:	f06f 0001 	mvn.w	r0, #1

0041cf1a <.LVL495>:
  41cf1a:	bd10      	pop	{r4, pc}

0041cf1c <.LVL496>:
  41cf1c:	f06f 0001 	mvn.w	r0, #1

0041cf20 <.LVL497>:
}
  41cf20:	bd10      	pop	{r4, pc}

Disassembly of section .text.fp_cmp%297:

0041cf22 <fp_cmp>:
{
  41cf22:	b510      	push	{r4, lr}

0041cf24 <.LCFI18>:
  41cf24:	4603      	mov	r3, r0
  41cf26:	460c      	mov	r4, r1
   if (a->sign == FP_NEG && b->sign == FP_ZPOS) {
  41cf28:	6842      	ldr	r2, [r0, #4]
  41cf2a:	2a01      	cmp	r2, #1
  41cf2c:	d008      	beq.n	41cf40 <.LVL140>
   } else if (a->sign == FP_ZPOS && b->sign == FP_NEG) {
  41cf2e:	b912      	cbnz	r2, 41cf36 <.LVL137+0x4>
  41cf30:	6860      	ldr	r0, [r4, #4]

0041cf32 <.LVL137>:
  41cf32:	2801      	cmp	r0, #1
  41cf34:	d00b      	beq.n	41cf4e <.LVL144>
         return fp_cmp_mag(a, b);
  41cf36:	4621      	mov	r1, r4

0041cf38 <.LVL138>:
  41cf38:	4618      	mov	r0, r3
  41cf3a:	f7fe fc98 	bl	41b86e <.LFE179>

0041cf3e <.LVL139>:
  41cf3e:	bd10      	pop	{r4, pc}

0041cf40 <.LVL140>:
   if (a->sign == FP_NEG && b->sign == FP_ZPOS) {
  41cf40:	684a      	ldr	r2, [r1, #4]
  41cf42:	b12a      	cbz	r2, 41cf50 <.LVL145>
         return fp_cmp_mag(b, a);
  41cf44:	4601      	mov	r1, r0

0041cf46 <.LVL141>:
  41cf46:	4620      	mov	r0, r4

0041cf48 <.LVL142>:
  41cf48:	f7fe fc91 	bl	41b86e <.LFE179>

0041cf4c <.LVL143>:
  41cf4c:	bd10      	pop	{r4, pc}

0041cf4e <.LVL144>:
  41cf4e:	bd10      	pop	{r4, pc}

0041cf50 <.LVL145>:
      return FP_LT;
  41cf50:	f04f 30ff 	mov.w	r0, #4294967295

0041cf54 <.LVL146>:
  41cf54:	bd10      	pop	{r4, pc}

Disassembly of section .text.SYS_TIME_ResourceLock%298:

0041cf58 <SYS_TIME_ResourceLock>:
{
  41cf58:	b508      	push	{r3, lr}

0041cf5a <.LCFI9>:
    if (gSystemCounterObj.interruptNestingCount == 0)
  41cf5a:	4b0b      	ldr	r3, [pc, #44]	; (41cf88 <.LVL98+0x8>)
  41cf5c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
  41cf60:	b983      	cbnz	r3, 41cf84 <.LVL98+0x4>

0041cf62 <.LBB24>:
    if (*mutexID == 1)
  41cf62:	4b09      	ldr	r3, [pc, #36]	; (41cf88 <.LVL98+0x8>)
  41cf64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
  41cf68:	2b01      	cmp	r3, #1
  41cf6a:	d001      	beq.n	41cf70 <.LBB27>

0041cf6c <.LBE24>:
            return false;
  41cf6c:	2000      	movs	r0, #0
}
  41cf6e:	bd08      	pop	{r3, pc}

0041cf70 <.LBB27>:
        *mutexID = 0;
  41cf70:	4b05      	ldr	r3, [pc, #20]	; (41cf88 <.LVL98+0x8>)
  41cf72:	2200      	movs	r2, #0
  41cf74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

0041cf78 <.LBE27>:
            SYS_INT_SourceDisable(gSystemCounterObj.hwTimerIntNum);
  41cf78:	f993 0008 	ldrsb.w	r0, [r3, #8]
  41cf7c:	f7ff fb90 	bl	41c6a0 <.LFE28>

0041cf80 <.LVL98>:
            return true;
  41cf80:	2001      	movs	r0, #1
  41cf82:	bd08      	pop	{r3, pc}
    return true;
  41cf84:	2001      	movs	r0, #1
  41cf86:	bd08      	pop	{r3, pc}
  41cf88:	2040d624 	.word	0x2040d624

Disassembly of section .text.__libc_fini_array%299:

0041cf8c <__libc_fini_array>:
  41cf8c:	b538      	push	{r3, r4, r5, lr}

0041cf8e <.LCFI0>:
  41cf8e:	4c0a      	ldr	r4, [pc, #40]	; (41cfb8 <.LVL6+0x2>)
  41cf90:	4d0a      	ldr	r5, [pc, #40]	; (41cfbc <.LVL6+0x6>)
  41cf92:	1b64      	subs	r4, r4, r5

0041cf94 <.LVL0>:
  41cf94:	10a4      	asrs	r4, r4, #2

0041cf96 <.LVL1>:
  41cf96:	d00a      	beq.n	41cfae <.LVL4+0x4>
  41cf98:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  41cf9c:	3b01      	subs	r3, #1
  41cf9e:	eb05 0583 	add.w	r5, r5, r3, lsl #2

0041cfa2 <.LVL2>:
  41cfa2:	3c01      	subs	r4, #1

0041cfa4 <.LVL3>:
  41cfa4:	f855 3904 	ldr.w	r3, [r5], #-4
  41cfa8:	4798      	blx	r3

0041cfaa <.LVL4>:
  41cfaa:	2c00      	cmp	r4, #0
  41cfac:	d1f9      	bne.n	41cfa2 <.LVL2>
  41cfae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

0041cfb2 <.LCFI1>:
  41cfb2:	f7e3 b8e3 	b.w	40017c <_fini>

0041cfb6 <.LVL6>:
  41cfb6:	bf00      	nop
  41cfb8:	0040018c 	.word	0x0040018c
  41cfbc:	00400188 	.word	0x00400188

Disassembly of section .rodata.pc2%300:

0041cfc0 <pc2>:
  41cfc0:	180b110e 1c030501 0a15060f 040c1317     ................
  41cfd0:	0710081a 020d141b 251f3429 281e372f     ........)4.%/7.(
  41cfe0:	30212d33 3827312c 2a2e3522 201d2432     3-!0,1'8"5.*2$. 

Disassembly of section .text.same70_InitRng%301:

0041cff0 <same70_InitRng>:
    if ((PMC_REGS->PMC_PCSR1 & PmcBit) != PmcBit)
  41cff0:	4b08      	ldr	r3, [pc, #32]	; (41d014 <.LBE9+0x4>)
  41cff2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  41cff6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  41cffa:	d109      	bne.n	41d010 <.LBE9>
        PMC_REGS->PMC_PCER1 = PmcBit;
  41cffc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  41d000:	4b04      	ldr	r3, [pc, #16]	; (41d014 <.LBE9+0x4>)
  41d002:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        TRNG_REGS->TRNG_CR = TRNG_CR_KEY_PASSWD | TRNG_CR_ENABLE_Msk;
  41d006:	4a04      	ldr	r2, [pc, #16]	; (41d018 <.LBE9+0x8>)
  41d008:	4b04      	ldr	r3, [pc, #16]	; (41d01c <.LBE9+0xc>)
  41d00a:	601a      	str	r2, [r3, #0]

0041d00c <.LBB9>:
  __ASM volatile ("dmb 0xF":::"memory");
  41d00c:	f3bf 8f5f 	dmb	sy

0041d010 <.LBE9>:
}
  41d010:	2000      	movs	r0, #0
  41d012:	4770      	bx	lr
  41d014:	400e0600 	.word	0x400e0600
  41d018:	524e4701 	.word	0x524e4701
  41d01c:	40070000 	.word	0x40070000

Disassembly of section .text.SYS_CONSOLE_Write%302:

0041d020 <SYS_CONSOLE_Write>:
    None.
*/

ssize_t SYS_CONSOLE_Write(const SYS_MODULE_INDEX index, int fd, const char *buf, size_t count )
{
    if (index >= SYS_CONSOLE_DEVICE_MAX_INSTANCES)
  41d020:	b970      	cbnz	r0, 41d040 <.LCFI9>
        return 0;

    if (consoleDeviceInstance[index].consoleDeviceInstanceStatus == SYS_STATUS_UNINITIALIZED
  41d022:	480a      	ldr	r0, [pc, #40]	; (41d04c <.LVL48>)

0041d024 <.LVL42>:
  41d024:	f990 0000 	ldrsb.w	r0, [r0]
  41d028:	b160      	cbz	r0, 41d044 <.LVL47+0x2>
{
  41d02a:	b538      	push	{r3, r4, r5, lr}

0041d02c <.LCFI8>:
            || consoleDeviceInstance[index].consoleInstanceDevDesc == NULL)
  41d02c:	4807      	ldr	r0, [pc, #28]	; (41d04c <.LVL48>)
  41d02e:	6845      	ldr	r5, [r0, #4]
  41d030:	b155      	cbz	r5, 41d048 <.LCFI10>
  41d032:	4614      	mov	r4, r2
  41d034:	4608      	mov	r0, r1
    {
        return 0;
    }

    return consoleDeviceInstance[index].consoleInstanceDevDesc->sysConsoleWrite(fd, buf, count);
  41d036:	68ed      	ldr	r5, [r5, #12]
  41d038:	461a      	mov	r2, r3

0041d03a <.LVL43>:
  41d03a:	4621      	mov	r1, r4

0041d03c <.LVL44>:
  41d03c:	47a8      	blx	r5

0041d03e <.LVL45>:
  41d03e:	bd38      	pop	{r3, r4, r5, pc}

0041d040 <.LCFI9>:
        return 0;
  41d040:	2000      	movs	r0, #0

0041d042 <.LVL47>:
  41d042:	4770      	bx	lr
        return 0;
  41d044:	2000      	movs	r0, #0
  41d046:	4770      	bx	lr

0041d048 <.LCFI10>:
  41d048:	2000      	movs	r0, #0
}
  41d04a:	bd38      	pop	{r3, r4, r5, pc}

0041d04c <.LVL48>:
  41d04c:	2040d754 	.word	0x2040d754

Disassembly of section .text.USART1_ErrorGet%303:

0041d050 <USART1_ErrorGet>:
    uint32_t status = USART1_REGS->US_CSR;
  41d050:	4b0a      	ldr	r3, [pc, #40]	; (41d07c <.LVL9+0xe>)
  41d052:	6958      	ldr	r0, [r3, #20]

0041d054 <.LVL6>:
    if(errors != USART_ERROR_NONE)
  41d054:	f010 00e0 	ands.w	r0, r0, #224	; 0xe0

0041d058 <.LVL7>:
  41d058:	d100      	bne.n	41d05c <.LBB14>
}
  41d05a:	4770      	bx	lr

0041d05c <.LBB14>:
    USART1_REGS->US_CR|= US_CR_RSTSTA_Msk;
  41d05c:	681a      	ldr	r2, [r3, #0]
  41d05e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  41d062:	601a      	str	r2, [r3, #0]
    while( US_CSR_RXRDY_Msk == (USART1_REGS->US_CSR& US_CSR_RXRDY_Msk) )
  41d064:	695b      	ldr	r3, [r3, #20]
  41d066:	f013 0f01 	tst.w	r3, #1
  41d06a:	d0f6      	beq.n	41d05a <.LVL7+0x2>
        dummyData = (USART1_REGS->US_RHR& US_RHR_RXCHR_Msk);
  41d06c:	4b03      	ldr	r3, [pc, #12]	; (41d07c <.LVL9+0xe>)

0041d06e <.LVL9>:
  41d06e:	699a      	ldr	r2, [r3, #24]
    while( US_CSR_RXRDY_Msk == (USART1_REGS->US_CSR& US_CSR_RXRDY_Msk) )
  41d070:	695a      	ldr	r2, [r3, #20]
  41d072:	f012 0f01 	tst.w	r2, #1
  41d076:	d1fa      	bne.n	41d06e <.LVL9>
  41d078:	e7ef      	b.n	41d05a <.LVL7+0x2>
  41d07a:	bf00      	nop
  41d07c:	40028000 	.word	0x40028000

Disassembly of section .text%304:

0041d080 <__aeabi_uldivmod>:
  41d080:	b953      	cbnz	r3, 41d098 <__aeabi_uldivmod+0x18>
  41d082:	b94a      	cbnz	r2, 41d098 <__aeabi_uldivmod+0x18>
  41d084:	2900      	cmp	r1, #0
  41d086:	bf08      	it	eq
  41d088:	2800      	cmpeq	r0, #0
  41d08a:	bf1c      	itt	ne
  41d08c:	f04f 31ff 	movne.w	r1, #4294967295
  41d090:	f04f 30ff 	movne.w	r0, #4294967295
  41d094:	f7f6 bc8a 	b.w	4139ac <.LBE10>
  41d098:	f1ad 0c08 	sub.w	ip, sp, #8
  41d09c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  41d0a0:	f7f6 f864 	bl	41316c <.LFE0>
  41d0a4:	f8dd e004 	ldr.w	lr, [sp, #4]
  41d0a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  41d0ac:	b004      	add	sp, #16
  41d0ae:	4770      	bx	lr

Disassembly of section .text.wc_RsaSSL_Verify%305:

0041d0b0 <wc_RsaSSL_Verify>:
        WC_HASH_TYPE_NONE, WC_MGF1NONE, NULL, 0, rng);
}

int wc_RsaSSL_Verify(const byte* in, word32 inLen, byte* out, word32 outLen,
                                                                 RsaKey* key)
{
  41d0b0:	b570      	push	{r4, r5, r6, lr}

0041d0b2 <.LCFI46>:
  41d0b2:	b08a      	sub	sp, #40	; 0x28

0041d0b4 <.LCFI47>:
  41d0b4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    WC_RNG* rng;

    if (key == NULL) {
  41d0b6:	b17d      	cbz	r5, 41d0d8 <.LCFI49>

0041d0b8 <.LVL288>:

    rng = NULL;
#ifdef WC_RSA_BLINDING
    rng = key->rng;
#endif
    return RsaPrivateDecryptEx((byte*)in, inLen, out, outLen, NULL, key,
  41d0b8:	2400      	movs	r4, #0
  41d0ba:	9409      	str	r4, [sp, #36]	; 0x24
  41d0bc:	9408      	str	r4, [sp, #32]
  41d0be:	9407      	str	r4, [sp, #28]
  41d0c0:	9406      	str	r4, [sp, #24]
  41d0c2:	9405      	str	r4, [sp, #20]
  41d0c4:	9404      	str	r4, [sp, #16]
  41d0c6:	2601      	movs	r6, #1
  41d0c8:	9603      	str	r6, [sp, #12]
  41d0ca:	9602      	str	r6, [sp, #8]
  41d0cc:	9501      	str	r5, [sp, #4]
  41d0ce:	9400      	str	r4, [sp, #0]
  41d0d0:	f7f3 fb3c 	bl	41074c <.LFE221>

0041d0d4 <.LVL289>:
        RSA_PUBLIC_DECRYPT, RSA_BLOCK_TYPE_1, WC_RSA_PKCSV15_PAD,
        WC_HASH_TYPE_NONE, WC_MGF1NONE, NULL, 0, rng);
}
  41d0d4:	b00a      	add	sp, #40	; 0x28

0041d0d6 <.LCFI48>:
  41d0d6:	bd70      	pop	{r4, r5, r6, pc}

0041d0d8 <.LCFI49>:
        return BAD_FUNC_ARG;
  41d0d8:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d0dc <.LVL291>:
  41d0dc:	e7fa      	b.n	41d0d4 <.LVL289>

Disassembly of section .text.fp_mulmod%306:

0041d0de <fp_mulmod>:
{
  41d0de:	b5f0      	push	{r4, r5, r6, r7, lr}

0041d0e0 <.LCFI98>:
  41d0e0:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c

0041d0e4 <.LCFI99>:
  41d0e4:	4606      	mov	r6, r0
  41d0e6:	460f      	mov	r7, r1
  41d0e8:	4614      	mov	r4, r2
  41d0ea:	461d      	mov	r5, r3

0041d0ec <.LBB160>:
    fp_zero(a);
  41d0ec:	4668      	mov	r0, sp

0041d0ee <.LVL734>:
  41d0ee:	f000 fc4b 	bl	41d988 <.LFE163>

0041d0f2 <.LBE160>:
  fp_mul(a, b, &t);
  41d0f2:	466a      	mov	r2, sp
  41d0f4:	4639      	mov	r1, r7
  41d0f6:	4630      	mov	r0, r6
  41d0f8:	f000 f808 	bl	41d10c <.LFE32>

0041d0fc <.LVL736>:
    err = fp_mod(&t, c, d);
  41d0fc:	462a      	mov	r2, r5
  41d0fe:	4621      	mov	r1, r4
  41d100:	4668      	mov	r0, sp
  41d102:	f7ff faaa 	bl	41c65a <.LFE180>

0041d106 <.LVL737>:
}
  41d106:	f50d 7d0b 	add.w	sp, sp, #556	; 0x22c

0041d10a <.LCFI100>:
  41d10a:	bdf0      	pop	{r4, r5, r6, r7, pc}

Disassembly of section .text.fp_mul%307:

0041d10c <fp_mul>:
{
  41d10c:	b570      	push	{r4, r5, r6, lr}

0041d10e <.LCFI68>:
  41d10e:	4614      	mov	r4, r2
    oldused = C->used;
  41d110:	6815      	ldr	r5, [r2, #0]

0041d112 <.LVL458>:
        fp_mul_comba(A,B,C);
  41d112:	4622      	mov	r2, r4
  41d114:	f7f9 fe2c 	bl	416d70 <.LFE24>

0041d118 <.L408>:
    for (y = C->used; y >= 0 && y < oldused; y++) {
  41d118:	6823      	ldr	r3, [r4, #0]

0041d11a <.LVL460>:
  41d11a:	2b00      	cmp	r3, #0
  41d11c:	db0b      	blt.n	41d136 <.LVL462+0x6>
  41d11e:	429d      	cmp	r5, r3
  41d120:	dd09      	ble.n	41d136 <.LVL462+0x6>
  41d122:	eb04 0283 	add.w	r2, r4, r3, lsl #2
  41d126:	3204      	adds	r2, #4
        C->dp[y] = 0;
  41d128:	2100      	movs	r1, #0
  41d12a:	f842 1f04 	str.w	r1, [r2, #4]!

0041d12e <.LVL461>:
    for (y = C->used; y >= 0 && y < oldused; y++) {
  41d12e:	3301      	adds	r3, #1

0041d130 <.LVL462>:
  41d130:	d401      	bmi.n	41d136 <.LVL462+0x6>
  41d132:	429d      	cmp	r5, r3
  41d134:	dcf9      	bgt.n	41d12a <.LVL460+0x10>
  41d136:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section .text.SYS_TIME_UpdateTimerList%308:

0041d138 <SYS_TIME_UpdateTimerList>:
    tmr = counterObj->tmrActive;
  41d138:	4b09      	ldr	r3, [pc, #36]	; (41d160 <.LVL81+0x8>)
  41d13a:	6b1a      	ldr	r2, [r3, #48]	; 0x30

0041d13c <.LVL77>:
    while ((tmr != NULL) && (elapsedCount > 0))
  41d13c:	b162      	cbz	r2, 41d158 <.LVL81>
  41d13e:	b158      	cbz	r0, 41d158 <.LVL81>
            tmr->relativeTimePending = 0;
  41d140:	2100      	movs	r1, #0
  41d142:	e004      	b.n	41d14e <.LVL80+0x4>
            elapsedCount -= tmr->relativeTimePending;
  41d144:	1ac0      	subs	r0, r0, r3

0041d146 <.LVL78>:
            tmr->relativeTimePending = 0;
  41d146:	6091      	str	r1, [r2, #8]

0041d148 <.LVL79>:
        tmr = tmr->tmrNext;
  41d148:	6992      	ldr	r2, [r2, #24]

0041d14a <.LVL80>:
    while ((tmr != NULL) && (elapsedCount > 0))
  41d14a:	b12a      	cbz	r2, 41d158 <.LVL81>
  41d14c:	b120      	cbz	r0, 41d158 <.LVL81>
        if (tmr->relativeTimePending >= elapsedCount)
  41d14e:	6893      	ldr	r3, [r2, #8]
  41d150:	4283      	cmp	r3, r0
  41d152:	d3f7      	bcc.n	41d144 <.LVL77+0x8>
            tmr->relativeTimePending -= elapsedCount;
  41d154:	1a1b      	subs	r3, r3, r0
  41d156:	6093      	str	r3, [r2, #8]

0041d158 <.LVL81>:
    counterObj->hwTimerPreviousValue = counterObj->hwTimerCurrentValue;
  41d158:	4b01      	ldr	r3, [pc, #4]	; (41d160 <.LVL81+0x8>)
  41d15a:	695a      	ldr	r2, [r3, #20]
  41d15c:	611a      	str	r2, [r3, #16]
  41d15e:	4770      	bx	lr
  41d160:	2040d624 	.word	0x2040d624

Disassembly of section .text.__ascii_mbtowc%309:

0041d164 <__ascii_mbtowc>:
  41d164:	b082      	sub	sp, #8

0041d166 <.LCFI2>:
  41d166:	b149      	cbz	r1, 41d17c <.LCFI4>
  41d168:	b15a      	cbz	r2, 41d182 <.LVL9+0x4>
  41d16a:	b16b      	cbz	r3, 41d188 <.LCFI6>
  41d16c:	7813      	ldrb	r3, [r2, #0]

0041d16e <.LVL4>:
  41d16e:	600b      	str	r3, [r1, #0]
  41d170:	7812      	ldrb	r2, [r2, #0]

0041d172 <.LVL5>:
  41d172:	1c10      	adds	r0, r2, #0

0041d174 <.LVL6>:
  41d174:	bf18      	it	ne
  41d176:	2001      	movne	r0, #1
  41d178:	b002      	add	sp, #8

0041d17a <.LCFI3>:
  41d17a:	4770      	bx	lr

0041d17c <.LCFI4>:
  41d17c:	a901      	add	r1, sp, #4

0041d17e <.LVL9>:
  41d17e:	2a00      	cmp	r2, #0
  41d180:	d1f3      	bne.n	41d16a <.LCFI2+0x4>
  41d182:	4610      	mov	r0, r2

0041d184 <.LVL10>:
  41d184:	b002      	add	sp, #8

0041d186 <.LCFI5>:
  41d186:	4770      	bx	lr

0041d188 <.LCFI6>:
  41d188:	f06f 0001 	mvn.w	r0, #1

0041d18c <.LVL13>:
  41d18c:	e7f4      	b.n	41d178 <.LVL6+0x4>

0041d18e <.LFE18>:
  41d18e:	bf00      	nop

Disassembly of section .text._sbrk%310:

0041d190 <_sbrk>:
  41d190:	4a07      	ldr	r2, [pc, #28]	; (41d1b0 <_sbrk+0x20>)
  41d192:	6813      	ldr	r3, [r2, #0]
  41d194:	b143      	cbz	r3, 41d1a8 <_sbrk+0x18>
  41d196:	4907      	ldr	r1, [pc, #28]	; (41d1b4 <_sbrk+0x24>)
  41d198:	4418      	add	r0, r3
  41d19a:	4288      	cmp	r0, r1
  41d19c:	bf9a      	itte	ls
  41d19e:	6010      	strls	r0, [r2, #0]
  41d1a0:	4618      	movls	r0, r3
  41d1a2:	f04f 30ff 	movhi.w	r0, #4294967295
  41d1a6:	4770      	bx	lr
  41d1a8:	4b03      	ldr	r3, [pc, #12]	; (41d1b8 <_sbrk+0x28>)
  41d1aa:	6013      	str	r3, [r2, #0]
  41d1ac:	e7f3      	b.n	41d196 <_sbrk+0x6>
  41d1ae:	bf00      	nop
  41d1b0:	2040d794 	.word	0x2040d794
  41d1b4:	20416c10 	.word	0x20416c10
  41d1b8:	2040d7a0 	.word	0x2040d7a0

Disassembly of section .text.fp_sqr%311:

0041d1bc <fp_sqr>:
{
  41d1bc:	b538      	push	{r3, r4, r5, lr}

0041d1be <.LCFI81>:
  41d1be:	460c      	mov	r4, r1
    oldused = B->used;
  41d1c0:	680d      	ldr	r5, [r1, #0]

0041d1c2 <.LVL553>:
       fp_sqr_comba(A, B);
  41d1c2:	f7f8 fd03 	bl	415bcc <.LFE175>

0041d1c6 <.L486>:
  for (y = B->used; y >= 0 && y < oldused; y++) {
  41d1c6:	6823      	ldr	r3, [r4, #0]

0041d1c8 <.LVL555>:
  41d1c8:	2b00      	cmp	r3, #0
  41d1ca:	db0b      	blt.n	41d1e4 <.LVL557+0x6>
  41d1cc:	429d      	cmp	r5, r3
  41d1ce:	dd09      	ble.n	41d1e4 <.LVL557+0x6>
  41d1d0:	eb04 0283 	add.w	r2, r4, r3, lsl #2
  41d1d4:	3204      	adds	r2, #4
    B->dp[y] = 0;
  41d1d6:	2100      	movs	r1, #0
  41d1d8:	f842 1f04 	str.w	r1, [r2, #4]!

0041d1dc <.LVL556>:
  for (y = B->used; y >= 0 && y < oldused; y++) {
  41d1dc:	3301      	adds	r3, #1

0041d1de <.LVL557>:
  41d1de:	d401      	bmi.n	41d1e4 <.LVL557+0x6>
  41d1e0:	429d      	cmp	r5, r3
  41d1e2:	dcf9      	bgt.n	41d1d8 <.LVL555+0x10>
  41d1e4:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section .text.fp_add_d%312:

0041d1e6 <fp_add_d>:
{
  41d1e6:	b570      	push	{r4, r5, r6, lr}

0041d1e8 <.LCFI138>:
  41d1e8:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228

0041d1ec <.LCFI139>:
  41d1ec:	4604      	mov	r4, r0
  41d1ee:	460e      	mov	r6, r1
  41d1f0:	4615      	mov	r5, r2

0041d1f2 <.LBB189>:
    fp_zero(a);
  41d1f2:	4668      	mov	r0, sp

0041d1f4 <.LVL858>:
  41d1f4:	f000 fbc8 	bl	41d988 <.LFE163>

0041d1f8 <.LBE189>:
   fp_set(&tmp, b);
  41d1f8:	4631      	mov	r1, r6
  41d1fa:	4668      	mov	r0, sp
  41d1fc:	f000 fbae 	bl	41d95c <.LFE20>

0041d200 <.LVL860>:
   fp_add(a, &tmp, c);
  41d200:	462a      	mov	r2, r5
  41d202:	4669      	mov	r1, sp
  41d204:	4620      	mov	r0, r4
  41d206:	f7ff f94f 	bl	41c4a8 <.LFE17>

0041d20a <.LVL861>:
}
  41d20a:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228

0041d20e <.LCFI140>:
  41d20e:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section .text.wc_Des3_SetIV%313:

0041d210 <wc_Des3_SetIV>:
        XMEMSET(des->reg,  0, DES_BLOCK_SIZE);
}

int wc_Des3_SetIV(Des3* des, const byte* iv)
{
    if (des == NULL) {
  41d210:	4603      	mov	r3, r0
  41d212:	b170      	cbz	r0, 41d232 <.LVL256>
        return BAD_FUNC_ARG;
    }
    if (des && iv)
  41d214:	b929      	cbnz	r1, 41d222 <.LVL254>
        XMEMCPY(des->reg, iv, DES_BLOCK_SIZE);
    else if (des)
        XMEMSET(des->reg,  0, DES_BLOCK_SIZE);
  41d216:	2000      	movs	r0, #0

0041d218 <.LVL253>:
  41d218:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  41d21c:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
  41d220:	4770      	bx	lr

0041d222 <.LVL254>:
        XMEMCPY(des->reg, iv, DES_BLOCK_SIZE);
  41d222:	6808      	ldr	r0, [r1, #0]

0041d224 <.LVL255>:
  41d224:	684a      	ldr	r2, [r1, #4]
  41d226:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  41d22a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

    return 0;
  41d22e:	2000      	movs	r0, #0
  41d230:	4770      	bx	lr

0041d232 <.LVL256>:
        return BAD_FUNC_ARG;
  41d232:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d236 <.LVL257>:
}
  41d236:	4770      	bx	lr

Disassembly of section .text.wc_ecc_free%314:

0041d238 <wc_ecc_free>:
    if (key == NULL) {
  41d238:	b188      	cbz	r0, 41d25e <.LCFI79>
{
  41d23a:	b510      	push	{r4, lr}

0041d23c <.LCFI78>:
  41d23c:	4604      	mov	r4, r0
    mp_clear(key->pubkey.x);
  41d23e:	3018      	adds	r0, #24

0041d240 <.LVL947>:
  41d240:	f000 fccd 	bl	41dbde <.LFE179>

0041d244 <.LVL948>:
    mp_clear(key->pubkey.y);
  41d244:	f504 7010 	add.w	r0, r4, #576	; 0x240
  41d248:	f000 fcc9 	bl	41dbde <.LFE179>

0041d24c <.LVL949>:
    mp_clear(key->pubkey.z);
  41d24c:	f504 608d 	add.w	r0, r4, #1128	; 0x468
  41d250:	f000 fcc5 	bl	41dbde <.LFE179>

0041d254 <.LVL950>:
    mp_forcezero(&key->k);
  41d254:	f504 60d2 	add.w	r0, r4, #1680	; 0x690
  41d258:	f000 fd7c 	bl	41dd54 <mp_forcezero>

0041d25c <.LVL951>:
  41d25c:	bd10      	pop	{r4, pc}

0041d25e <.LCFI79>:
  41d25e:	4770      	bx	lr

Disassembly of section .text.wc_RsaPrivateDecrypt%315:

0041d260 <wc_RsaPrivateDecrypt>:
{
  41d260:	b530      	push	{r4, r5, lr}

0041d262 <.LCFI37>:
  41d262:	b08b      	sub	sp, #44	; 0x2c

0041d264 <.LCFI38>:
    return RsaPrivateDecryptEx((byte*)in, inLen, out, outLen, NULL, key,
  41d264:	2400      	movs	r4, #0
  41d266:	9409      	str	r4, [sp, #36]	; 0x24
  41d268:	9408      	str	r4, [sp, #32]
  41d26a:	9407      	str	r4, [sp, #28]
  41d26c:	9406      	str	r4, [sp, #24]
  41d26e:	9405      	str	r4, [sp, #20]
  41d270:	9404      	str	r4, [sp, #16]
  41d272:	2502      	movs	r5, #2
  41d274:	9503      	str	r5, [sp, #12]
  41d276:	2503      	movs	r5, #3
  41d278:	9502      	str	r5, [sp, #8]
  41d27a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  41d27c:	9501      	str	r5, [sp, #4]
  41d27e:	9400      	str	r4, [sp, #0]
  41d280:	f7f3 fa64 	bl	41074c <.LFE221>

0041d284 <.LVL278>:
}
  41d284:	b00b      	add	sp, #44	; 0x2c

0041d286 <.LCFI39>:
  41d286:	bd30      	pop	{r4, r5, pc}

Disassembly of section .text.wc_RsaSSL_Sign%316:

0041d288 <wc_RsaSSL_Sign>:
}
#endif

int wc_RsaSSL_Sign(const byte* in, word32 inLen, byte* out, word32 outLen,
                                                   RsaKey* key, WC_RNG* rng)
{
  41d288:	b510      	push	{r4, lr}

0041d28a <.LCFI60>:
  41d28a:	b08a      	sub	sp, #40	; 0x28

0041d28c <.LCFI61>:
    return RsaPublicEncryptEx(in, inLen, out, outLen, key,
  41d28c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  41d28e:	9408      	str	r4, [sp, #32]
  41d290:	2400      	movs	r4, #0
  41d292:	9407      	str	r4, [sp, #28]
  41d294:	9406      	str	r4, [sp, #24]
  41d296:	9405      	str	r4, [sp, #20]
  41d298:	9404      	str	r4, [sp, #16]
  41d29a:	9403      	str	r4, [sp, #12]
  41d29c:	2401      	movs	r4, #1
  41d29e:	9402      	str	r4, [sp, #8]
  41d2a0:	2402      	movs	r4, #2
  41d2a2:	9401      	str	r4, [sp, #4]
  41d2a4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  41d2a6:	9400      	str	r4, [sp, #0]
  41d2a8:	f7f4 f9fa 	bl	4116a0 <.LFE0>

0041d2ac <.LVL379>:
        RSA_PRIVATE_ENCRYPT, RSA_BLOCK_TYPE_1, WC_RSA_PKCSV15_PAD,
        WC_HASH_TYPE_NONE, WC_MGF1NONE, NULL, 0, rng);
}
  41d2ac:	b00a      	add	sp, #40	; 0x28

0041d2ae <.LCFI62>:
  41d2ae:	bd10      	pop	{r4, pc}

Disassembly of section .text.fp_reverse%317:

0041d2b0 <fp_reverse>:
  iy = len - 1;
  41d2b0:	1e4b      	subs	r3, r1, #1
  while (ix < iy) {
  41d2b2:	2b00      	cmp	r3, #0
  41d2b4:	dd0f      	ble.n	41d2d6 <.LCFI31>
{
  41d2b6:	b430      	push	{r4, r5}

0041d2b8 <.LCFI30>:
  41d2b8:	1e44      	subs	r4, r0, #1
  41d2ba:	4401      	add	r1, r0

0041d2bc <.LVL265>:
  while (ix < iy) {
  41d2bc:	2200      	movs	r2, #0

0041d2be <.LVL266>:
    t     = s[ix];
  41d2be:	7860      	ldrb	r0, [r4, #1]

0041d2c0 <.LVL267>:
    s[ix] = s[iy];
  41d2c0:	f811 5c01 	ldrb.w	r5, [r1, #-1]
  41d2c4:	f804 5f01 	strb.w	r5, [r4, #1]!
    s[iy] = t;
  41d2c8:	f801 0d01 	strb.w	r0, [r1, #-1]!
    ++ix;
  41d2cc:	3201      	adds	r2, #1
    --iy;
  41d2ce:	3b01      	subs	r3, #1
  while (ix < iy) {
  41d2d0:	429a      	cmp	r2, r3
  41d2d2:	dbf4      	blt.n	41d2be <.LVL266>
}
  41d2d4:	bc30      	pop	{r4, r5}

0041d2d6 <.LCFI31>:
  41d2d6:	4770      	bx	lr

Disassembly of section .text.fp_to_unsigned_bin%318:

0041d2d8 <fp_to_unsigned_bin>:
{
  41d2d8:	b510      	push	{r4, lr}

0041d2da <.LCFI121>:
  41d2da:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228

0041d2de <.LCFI122>:
  41d2de:	460c      	mov	r4, r1
  fp_init_copy(&t, a);
  41d2e0:	4601      	mov	r1, r0

0041d2e2 <.LVL816>:
  41d2e2:	4668      	mov	r0, sp

0041d2e4 <.LVL817>:
  41d2e4:	f000 fa3e 	bl	41d764 <.LFE54>

0041d2e8 <.LVL818>:
  x = fp_to_unsigned_bin_at_pos(0, &t, b);
  41d2e8:	4622      	mov	r2, r4
  41d2ea:	4669      	mov	r1, sp
  41d2ec:	2000      	movs	r0, #0
  41d2ee:	f7ff fd21 	bl	41cd34 <.LFE17>

0041d2f2 <.LVL819>:
  fp_reverse (b, x);
  41d2f2:	4601      	mov	r1, r0
  41d2f4:	4620      	mov	r0, r4

0041d2f6 <.LVL820>:
  41d2f6:	f7ff ffdb 	bl	41d2b0 <.LFE201>

0041d2fa <.LVL821>:
}
  41d2fa:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228

0041d2fe <.LCFI123>:
  41d2fe:	bd10      	pop	{r4, pc}

Disassembly of section .rodata.order.6596%319:

0041d300 <order.6596>:
  41d300:	0010 0011 0012 0000 0008 0007 0009 0006     ................
  41d310:	000a 0005 000b 0004 000c 0003 000d 0002     ................
  41d320:	000e 0001 000f bf00                         ........

Disassembly of section .rodata.z_errmsg%320:

0041d328 <z_errmsg>:
  41d328:	a2dc 0041 a2ec 0041 a2f8 0041 a2fc 0041     ..A...A...A...A.
  41d338:	a308 0041 a318 0041 a324 0041 a338 0041     ..A...A.$.A.8.A.
  41d348:	a348 0041 a2f8 0041                         H.A...A.

Disassembly of section .text.TC0_CH0_TimerInitialize%321:

0041d350 <TC0_CH0_TimerInitialize>:

/* Initialize channel in timer mode */
void TC0_CH0_TimerInitialize (void)
{
    /* Use peripheral clock */
    TC0_REGS->TC_CHANNEL[0].TC_EMR = TC_EMR_NODIVCLK_Msk;
  41d350:	4b07      	ldr	r3, [pc, #28]	; (41d370 <TC0_CH0_TimerInitialize+0x20>)
  41d352:	f44f 7280 	mov.w	r2, #256	; 0x100
  41d356:	631a      	str	r2, [r3, #48]	; 0x30
    /* clock selection and waveform selection */
    TC0_REGS->TC_CHANNEL[0].TC_CMR =  TC_CMR_WAVSEL_UP_RC | TC_CMR_WAVE_Msk ;
  41d358:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  41d35c:	605a      	str	r2, [r3, #4]

    /* write period */
    TC0_REGS->TC_CHANNEL[0].TC_RC = 60000U;
  41d35e:	f64e 2260 	movw	r2, #60000	; 0xea60
  41d362:	61da      	str	r2, [r3, #28]


    /* enable interrupt */
    TC0_REGS->TC_CHANNEL[0].TC_IER = TC_IER_CPAS_Msk;
  41d364:	2204      	movs	r2, #4
  41d366:	625a      	str	r2, [r3, #36]	; 0x24
    TC0_CH0_CallbackObj.callback_fn = NULL;
  41d368:	2200      	movs	r2, #0
  41d36a:	4b02      	ldr	r3, [pc, #8]	; (41d374 <TC0_CH0_TimerInitialize+0x24>)
  41d36c:	601a      	str	r2, [r3, #0]
  41d36e:	4770      	bx	lr
  41d370:	4000c000 	.word	0x4000c000
  41d374:	20400018 	.word	0x20400018

Disassembly of section .rodata.__mprec_bigtens%322:

0041d378 <__mprec_bigtens>:
  41d378:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  41d388:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  41d398:	7f73bf3c 75154fdd                       <.s..O.u

Disassembly of section .text.wc_RsaPublicEncrypt%323:

0041d3a0 <wc_RsaPublicEncrypt>:
{
  41d3a0:	b530      	push	{r4, r5, lr}

0041d3a2 <.LCFI54>:
  41d3a2:	b08b      	sub	sp, #44	; 0x2c

0041d3a4 <.LCFI55>:
    return RsaPublicEncryptEx(in, inLen, out, outLen, key,
  41d3a4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  41d3a6:	9408      	str	r4, [sp, #32]
  41d3a8:	2400      	movs	r4, #0
  41d3aa:	9407      	str	r4, [sp, #28]
  41d3ac:	9406      	str	r4, [sp, #24]
  41d3ae:	9405      	str	r4, [sp, #20]
  41d3b0:	9404      	str	r4, [sp, #16]
  41d3b2:	9403      	str	r4, [sp, #12]
  41d3b4:	2502      	movs	r5, #2
  41d3b6:	9502      	str	r5, [sp, #8]
  41d3b8:	9401      	str	r4, [sp, #4]
  41d3ba:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  41d3bc:	9400      	str	r4, [sp, #0]
  41d3be:	f7f4 f96f 	bl	4116a0 <.LFE0>

0041d3c2 <.LVL375>:
}
  41d3c2:	b00b      	add	sp, #44	; 0x2c

0041d3c4 <.LCFI56>:
  41d3c4:	bd30      	pop	{r4, r5, pc}

Disassembly of section .text.wc_ecc_del_point_h%324:

0041d3c6 <wc_ecc_del_point_h>:
   if (p != NULL) {
  41d3c6:	b178      	cbz	r0, 41d3e8 <.LCFI33>
{
  41d3c8:	b510      	push	{r4, lr}

0041d3ca <.LCFI32>:
  41d3ca:	4604      	mov	r4, r0
      mp_clear(p->x);
  41d3cc:	f000 fc07 	bl	41dbde <.LFE179>

0041d3d0 <.LVL522>:
      mp_clear(p->y);
  41d3d0:	f504 700a 	add.w	r0, r4, #552	; 0x228
  41d3d4:	f000 fc03 	bl	41dbde <.LFE179>

0041d3d8 <.LVL523>:
      mp_clear(p->z);
  41d3d8:	f504 608a 	add.w	r0, r4, #1104	; 0x450
  41d3dc:	f000 fbff 	bl	41dbde <.LFE179>

0041d3e0 <.LBB24>:
      XFREE(p, heap, DYNAMIC_TYPE_ECC);
  41d3e0:	4620      	mov	r0, r4
  41d3e2:	f000 fa69 	bl	41d8b8 <.LFE2>

0041d3e6 <.LVL525>:
  41d3e6:	bd10      	pop	{r4, pc}

0041d3e8 <.LCFI33>:
  41d3e8:	4770      	bx	lr

Disassembly of section .text.wc_ecc_is_valid_idx%325:

0041d3ec <wc_ecc_is_valid_idx>:
{
  41d3ec:	4a07      	ldr	r2, [pc, #28]	; (41d40c <.LVL690+0x6>)
  41d3ee:	2300      	movs	r3, #0

0041d3f0 <.LVL688>:
   for (x = 0; ecc_sets[x].size != 0; x++)
  41d3f0:	3301      	adds	r3, #1
  41d3f2:	f852 1f34 	ldr.w	r1, [r2, #52]!
  41d3f6:	2900      	cmp	r1, #0
  41d3f8:	d1fa      	bne.n	41d3f0 <.LVL688>
}
  41d3fa:	f1b0 3fff 	cmp.w	r0, #4294967295
  41d3fe:	bfa8      	it	ge
  41d400:	4283      	cmpge	r3, r0
  41d402:	bfcc      	ite	gt
  41d404:	2001      	movgt	r0, #1

0041d406 <.LVL690>:
  41d406:	2000      	movle	r0, #0
  41d408:	4770      	bx	lr
  41d40a:	bf00      	nop
  41d40c:	004145f8 	.word	0x004145f8

Disassembly of section .text.fp_copy%326:

0041d410 <fp_copy>:
    if (a != b) {
  41d410:	4288      	cmp	r0, r1
  41d412:	d00e      	beq.n	41d432 <.LCFI60>
{
  41d414:	b508      	push	{r3, lr}

0041d416 <.LCFI59>:
  41d416:	460b      	mov	r3, r1
        b->used = a->used;
  41d418:	6802      	ldr	r2, [r0, #0]
  41d41a:	600a      	str	r2, [r1, #0]
        b->sign = a->sign;
  41d41c:	6842      	ldr	r2, [r0, #4]
  41d41e:	604a      	str	r2, [r1, #4]
        XMEMCPY(b->dp, a->dp, FP_SIZE * sizeof(fp_digit));
  41d420:	f44f 7208 	mov.w	r2, #544	; 0x220
  41d424:	f100 0108 	add.w	r1, r0, #8

0041d428 <.LVL388>:
  41d428:	f103 0008 	add.w	r0, r3, #8

0041d42c <.LVL389>:
  41d42c:	f7f8 fff6 	bl	41641c <memcpy>

0041d430 <.LVL390>:
  41d430:	bd08      	pop	{r3, pc}

0041d432 <.LCFI60>:
  41d432:	4770      	bx	lr

Disassembly of section .text._sbrk_r%327:

0041d434 <_sbrk_r>:
  41d434:	b538      	push	{r3, r4, r5, lr}

0041d436 <.LCFI0>:
  41d436:	4c07      	ldr	r4, [pc, #28]	; (41d454 <.LVL4>)
  41d438:	2300      	movs	r3, #0
  41d43a:	4605      	mov	r5, r0
  41d43c:	4608      	mov	r0, r1

0041d43e <.LVL1>:
  41d43e:	6023      	str	r3, [r4, #0]
  41d440:	f7ff fea6 	bl	41d190 <_sbrk>

0041d444 <.LVL2>:
  41d444:	1c43      	adds	r3, r0, #1
  41d446:	d000      	beq.n	41d44a <.LVL2+0x6>
  41d448:	bd38      	pop	{r3, r4, r5, pc}
  41d44a:	6823      	ldr	r3, [r4, #0]
  41d44c:	2b00      	cmp	r3, #0
  41d44e:	d0fb      	beq.n	41d448 <.LVL2+0x4>
  41d450:	602b      	str	r3, [r5, #0]
  41d452:	bd38      	pop	{r3, r4, r5, pc}

0041d454 <.LVL4>:
  41d454:	20400050 	.word	0x20400050

Disassembly of section .text.fp_leading_bit%328:

0041d458 <fp_leading_bit>:
    if (a->used != 0) {
  41d458:	6801      	ldr	r1, [r0, #0]
  41d45a:	b161      	cbz	r1, 41d476 <.LBE11>

0041d45c <.LBB10>:
        fp_digit q = a->dp[a->used - 1];
  41d45c:	3101      	adds	r1, #1
  41d45e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]

0041d462 <.LVL230>:
  41d462:	2204      	movs	r2, #4

0041d464 <.LBE10>:
    int bit = 0;
  41d464:	2100      	movs	r1, #0

0041d466 <.LBB11>:
            if ((unsigned char)q != 0)
  41d466:	f013 0fff 	tst.w	r3, #255	; 0xff
                bit = (q & 0x80) != 0;
  41d46a:	bf18      	it	ne
  41d46c:	f3c3 11c0 	ubfxne	r1, r3, #7, #1
            q >>= 8;
  41d470:	0a1b      	lsrs	r3, r3, #8

0041d472 <.LVL233>:
        while (qSz > 0) {
  41d472:	3a01      	subs	r2, #1

0041d474 <.LVL234>:
  41d474:	d1f7      	bne.n	41d466 <.LBB11>

0041d476 <.LBE11>:
}
  41d476:	4608      	mov	r0, r1

0041d478 <.LVL236>:
  41d478:	4770      	bx	lr

Disassembly of section .text.fp_forcezero%329:

0041d47a <fp_forcezero>:
{
  41d47a:	b410      	push	{r4}

0041d47c <.LCFI45>:
    a->used = 0;
  41d47c:	2300      	movs	r3, #0
  41d47e:	6003      	str	r3, [r0, #0]
    a->sign = FP_ZPOS;
  41d480:	6043      	str	r3, [r0, #4]

0041d482 <.LVL346>:
  41d482:	f500 740a 	add.w	r4, r0, #552	; 0x228

0041d486 <.LBB22>:
    volatile byte* z = (volatile byte*)mem;
  41d486:	f100 0308 	add.w	r3, r0, #8

0041d48a <.LVL347>:
    while (len--) *z++ = 0;
  41d48a:	2100      	movs	r1, #0

0041d48c <.LVL348>:
  41d48c:	1c5a      	adds	r2, r3, #1

0041d48e <.LVL349>:
  41d48e:	7019      	strb	r1, [r3, #0]

0041d490 <.LVL350>:
  41d490:	4613      	mov	r3, r2
  41d492:	42a2      	cmp	r2, r4
  41d494:	d1fa      	bne.n	41d48c <.LVL348>

0041d496 <.LBE22>:
}
  41d496:	f85d 4b04 	ldr.w	r4, [sp], #4

0041d49a <.LCFI46>:
  41d49a:	4770      	bx	lr

Disassembly of section .text.inflateReset%330:

0041d49c <inflateReset>:
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  41d49c:	b148      	cbz	r0, 41d4b2 <.LCFI4>
{
  41d49e:	b508      	push	{r3, lr}

0041d4a0 <.LCFI3>:
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  41d4a0:	69c2      	ldr	r2, [r0, #28]
  41d4a2:	b14a      	cbz	r2, 41d4b8 <.LCFI5>

0041d4a4 <.LVL43>:
    state->wsize = 0;
  41d4a4:	2300      	movs	r3, #0
  41d4a6:	6293      	str	r3, [r2, #40]	; 0x28
    state->whave = 0;
  41d4a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    state->wnext = 0;
  41d4aa:	6313      	str	r3, [r2, #48]	; 0x30
    return inflateResetKeep(strm);
  41d4ac:	f7fe fd76 	bl	41bf9c <.LFE167>

0041d4b0 <.LVL44>:
  41d4b0:	bd08      	pop	{r3, pc}

0041d4b2 <.LCFI4>:
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  41d4b2:	f06f 0001 	mvn.w	r0, #1

0041d4b6 <.LVL46>:
  41d4b6:	4770      	bx	lr

0041d4b8 <.LCFI5>:
  41d4b8:	f06f 0001 	mvn.w	r0, #1

0041d4bc <.LVL48>:
}
  41d4bc:	bd08      	pop	{r3, pc}

Disassembly of section .text.CRYPT_AES_KeySet%331:

0041d4be <CRYPT_AES_KeySet>:
                     unsigned int keyLen, const unsigned char* iv, int dir)
{
    typedef char aes_test[sizeof(CRYPT_AES_CTX) >= sizeof(Aes) ? 1 : -1];
    (void)sizeof(aes_test);

    if (aes == NULL || key == NULL)
  41d4be:	b158      	cbz	r0, 41d4d8 <.LCFI61>
{
  41d4c0:	b510      	push	{r4, lr}

0041d4c2 <.LCFI57>:
  41d4c2:	b082      	sub	sp, #8

0041d4c4 <.LCFI58>:
    if (aes == NULL || key == NULL)
  41d4c4:	b129      	cbz	r1, 41d4d2 <.LCFI60>
        return BAD_FUNC_ARG;

    return wc_AesSetKey((Aes*)aes, key, keyLen, iv, dir);
  41d4c6:	9c04      	ldr	r4, [sp, #16]
  41d4c8:	9400      	str	r4, [sp, #0]
  41d4ca:	f7fe fd93 	bl	41bff4 <.LFE0>

0041d4ce <.LVL161>:
}
  41d4ce:	b002      	add	sp, #8

0041d4d0 <.LCFI59>:
  41d4d0:	bd10      	pop	{r4, pc}

0041d4d2 <.LCFI60>:
        return BAD_FUNC_ARG;
  41d4d2:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d4d6 <.LVL163>:
  41d4d6:	e7fa      	b.n	41d4ce <.LVL161>

0041d4d8 <.LCFI61>:
  41d4d8:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d4dc <.LVL165>:
  41d4dc:	4770      	bx	lr

Disassembly of section .rodata.bytebit%332:

0041d4e0 <bytebit>:
  41d4e0:	0080 0000 0040 0000 0020 0000 0010 0000     ....@... .......
  41d4f0:	0008 0000 0004 0000 0002 0000 0001 0000     ................

Disassembly of section .text.Console_UART_ReadC%333:

0041d500 <Console_UART_ReadC>:
{
  41d500:	b500      	push	{lr}

0041d502 <.LCFI1>:
  41d502:	b083      	sub	sp, #12

0041d504 <.LCFI2>:
    USART1_Read(&readBuffer, 1);
  41d504:	2101      	movs	r1, #1
  41d506:	f10d 0007 	add.w	r0, sp, #7

0041d50a <.LVL13>:
  41d50a:	f7ff fb67 	bl	41cbdc <.LFE145>

0041d50e <.LVL14>:
    while (USART1_ReadCountGet() == 0);
  41d50e:	f000 fb97 	bl	41dc40 <.LFE149>

0041d512 <.LVL15>:
  41d512:	2800      	cmp	r0, #0
  41d514:	d0fb      	beq.n	41d50e <.LVL14>
}
  41d516:	f89d 0007 	ldrb.w	r0, [sp, #7]
  41d51a:	b003      	add	sp, #12

0041d51c <.LCFI3>:
  41d51c:	f85d fb04 	ldr.w	pc, [sp], #4

Disassembly of section .text.SYS_DEBUG_Initialize%334:

0041d520 <SYS_DEBUG_Initialize>:

SYS_MODULE_OBJ SYS_DEBUG_Initialize(const SYS_MODULE_INDEX index, const SYS_MODULE_INIT * const init )
{
    SYS_DEBUG_INIT *initConfig = (SYS_DEBUG_INIT*)init;

    gblErrLvl = initConfig->errorLevel;
  41d520:	784a      	ldrb	r2, [r1, #1]
  41d522:	4b05      	ldr	r3, [pc, #20]	; (41d538 <.LVL1+0xa>)
  41d524:	701a      	strb	r2, [r3, #0]

    sysDebugInstance.debugConsole = initConfig->consoleIndex;
  41d526:	884a      	ldrh	r2, [r1, #2]
  41d528:	4b04      	ldr	r3, [pc, #16]	; (41d53c <.LVL1+0xe>)
  41d52a:	805a      	strh	r2, [r3, #2]
    sysDebugInstance.state = SYS_DEBUG_STATE_IDLE;
  41d52c:	2000      	movs	r0, #0

0041d52e <.LVL1>:
  41d52e:	7058      	strb	r0, [r3, #1]
    sysDebugInstance.status = SYS_STATUS_READY;
  41d530:	2202      	movs	r2, #2
  41d532:	701a      	strb	r2, [r3, #0]
    sysDebugInstance.prtBufPtr = 0;
  41d534:	6058      	str	r0, [r3, #4]

    return SYS_MODULE_OBJ_STATIC;
}
  41d536:	4770      	bx	lr
  41d538:	20400014 	.word	0x20400014
  41d53c:	2040000c 	.word	0x2040000c

Disassembly of section .text.TC0_CH0_InterruptHandler%335:

0041d540 <TC0_CH0_InterruptHandler>:
    TC0_CH0_CallbackObj.callback_fn = callback;
    TC0_CH0_CallbackObj.context = context;
}

void TC0_CH0_InterruptHandler(void)
{
  41d540:	b508      	push	{r3, lr}

0041d542 <.LCFI0>:
    TC_TIMER_STATUS timer_status = TC0_REGS->TC_CHANNEL[0].TC_SR & TC_TIMER_STATUS_MSK;
  41d542:	4b05      	ldr	r3, [pc, #20]	; (41d558 <.LVL4+0x8>)
  41d544:	6a18      	ldr	r0, [r3, #32]

0041d546 <.LVL3>:
    /* Call registered callback function */
    if (TC0_CH0_CallbackObj.callback_fn != NULL)
  41d546:	4b05      	ldr	r3, [pc, #20]	; (41d55c <.LVL4+0xc>)
  41d548:	681b      	ldr	r3, [r3, #0]
  41d54a:	b123      	cbz	r3, 41d556 <.LVL4+0x6>
  41d54c:	f000 0014 	and.w	r0, r0, #20

0041d550 <.LVL4>:
    {
        TC0_CH0_CallbackObj.callback_fn(timer_status, TC0_CH0_CallbackObj.context);
  41d550:	4a02      	ldr	r2, [pc, #8]	; (41d55c <.LVL4+0xc>)
  41d552:	6851      	ldr	r1, [r2, #4]
  41d554:	4798      	blx	r3
  41d556:	bd08      	pop	{r3, pc}
  41d558:	4000c000 	.word	0x4000c000
  41d55c:	20400018 	.word	0x20400018

Disassembly of section .text.CRYPT_RNG_BlockGenerate%336:

0041d560 <CRYPT_RNG_BlockGenerate>:
    if (rng == NULL || b == NULL)
  41d560:	b150      	cbz	r0, 41d578 <.LCFI48>
{
  41d562:	b508      	push	{r3, lr}

0041d564 <.LCFI47>:
  41d564:	460b      	mov	r3, r1
    if (rng == NULL || b == NULL)
  41d566:	b121      	cbz	r1, 41d572 <.LVL132>
  41d568:	4611      	mov	r1, r2

0041d56a <.LVL129>:
  41d56a:	4618      	mov	r0, r3

0041d56c <.LVL130>:
    return same70_RNG_GenerateBlock(b, sz);
  41d56c:	f7ff f8fe 	bl	41c76c <.LFE18>

0041d570 <.LVL131>:
  41d570:	bd08      	pop	{r3, pc}

0041d572 <.LVL132>:
        return BAD_FUNC_ARG;
  41d572:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d576 <.LVL133>:
}
  41d576:	bd08      	pop	{r3, pc}

0041d578 <.LCFI48>:
        return BAD_FUNC_ARG;
  41d578:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d57c <.LVL135>:
  41d57c:	4770      	bx	lr

Disassembly of section .text.CRYPT_TDES_CBC_Encrypt%337:

0041d57e <CRYPT_TDES_CBC_Encrypt>:
    if (tdes == NULL || out == NULL || in == NULL)
  41d57e:	2a00      	cmp	r2, #0
  41d580:	bf18      	it	ne
  41d582:	2900      	cmpne	r1, #0
  41d584:	d007      	beq.n	41d596 <.LCFI54>
{
  41d586:	b538      	push	{r3, r4, r5, lr}

0041d588 <.LCFI53>:
    if (tdes == NULL || out == NULL || in == NULL)
  41d588:	b110      	cbz	r0, 41d590 <.LVL150>
    return wc_Des3_CbcEncrypt((Des3*)tdes, out, in, inSz);
  41d58a:	f7fc fa81 	bl	419a90 <.LFE25>

0041d58e <.LVL149>:
  41d58e:	bd38      	pop	{r3, r4, r5, pc}

0041d590 <.LVL150>:
        return BAD_FUNC_ARG;
  41d590:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d594 <.LVL151>:
}
  41d594:	bd38      	pop	{r3, r4, r5, pc}

0041d596 <.LCFI54>:
        return BAD_FUNC_ARG;
  41d596:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d59a <.LVL153>:
  41d59a:	4770      	bx	lr

Disassembly of section .text.CRYPT_TDES_CBC_Decrypt%338:

0041d59c <CRYPT_TDES_CBC_Decrypt>:
    if (tdes == NULL || out == NULL || in == NULL)
  41d59c:	2a00      	cmp	r2, #0
  41d59e:	bf18      	it	ne
  41d5a0:	2900      	cmpne	r1, #0
  41d5a2:	d007      	beq.n	41d5b4 <.LCFI56>
{
  41d5a4:	b538      	push	{r3, r4, r5, lr}

0041d5a6 <.LCFI55>:
    if (tdes == NULL || out == NULL || in == NULL)
  41d5a6:	b110      	cbz	r0, 41d5ae <.LVL156>
    return wc_Des3_CbcDecrypt((Des3*)tdes, out, in, inSz);
  41d5a8:	f7fb fdde 	bl	419168 <.LFE27>

0041d5ac <.LVL155>:
  41d5ac:	bd38      	pop	{r3, r4, r5, pc}

0041d5ae <.LVL156>:
        return BAD_FUNC_ARG;
  41d5ae:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d5b2 <.LVL157>:
}
  41d5b2:	bd38      	pop	{r3, r4, r5, pc}

0041d5b4 <.LCFI56>:
        return BAD_FUNC_ARG;
  41d5b4:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d5b8 <.LVL159>:
  41d5b8:	4770      	bx	lr

Disassembly of section .text.CRYPT_AES_CBC_Encrypt%339:

0041d5ba <CRYPT_AES_CBC_Encrypt>:

/* AES CBC Encrypt */
int CRYPT_AES_CBC_Encrypt(CRYPT_AES_CTX* aes, unsigned char* out,
                          const unsigned char* in, unsigned int inSz)
{
    if (aes == NULL || out == NULL || in == NULL)
  41d5ba:	2a00      	cmp	r2, #0
  41d5bc:	bf18      	it	ne
  41d5be:	2900      	cmpne	r1, #0
  41d5c0:	d007      	beq.n	41d5d2 <.LCFI65>
{
  41d5c2:	b538      	push	{r3, r4, r5, lr}

0041d5c4 <.LCFI64>:
    if (aes == NULL || out == NULL || in == NULL)
  41d5c4:	b110      	cbz	r0, 41d5cc <.LVL174>
        return BAD_FUNC_ARG;

    return wc_AesCbcEncrypt((Aes*)aes, out, in, inSz);
  41d5c6:	f7fa ff5f 	bl	418488 <.LFE171>

0041d5ca <.LVL173>:
  41d5ca:	bd38      	pop	{r3, r4, r5, pc}

0041d5cc <.LVL174>:
        return BAD_FUNC_ARG;
  41d5cc:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d5d0 <.LVL175>:
}
  41d5d0:	bd38      	pop	{r3, r4, r5, pc}

0041d5d2 <.LCFI65>:
        return BAD_FUNC_ARG;
  41d5d2:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d5d6 <.LVL177>:
  41d5d6:	4770      	bx	lr

Disassembly of section .text.CRYPT_AES_CBC_Decrypt%340:

0041d5d8 <CRYPT_AES_CBC_Decrypt>:

/* AES CBC Decrypt */
int CRYPT_AES_CBC_Decrypt(CRYPT_AES_CTX* aes, unsigned char* out,
                          const unsigned char* in, unsigned int inSz)
{
    if (aes == NULL || out == NULL || in == NULL)
  41d5d8:	2a00      	cmp	r2, #0
  41d5da:	bf18      	it	ne
  41d5dc:	2900      	cmpne	r1, #0
  41d5de:	d007      	beq.n	41d5f0 <.LCFI67>
{
  41d5e0:	b538      	push	{r3, r4, r5, lr}

0041d5e2 <.LCFI66>:
    if (aes == NULL || out == NULL || in == NULL)
  41d5e2:	b110      	cbz	r0, 41d5ea <.LVL180>
        return BAD_FUNC_ARG;

    return wc_AesCbcDecrypt((Aes*)aes, out, in, inSz);
  41d5e4:	f7fb ff1e 	bl	419424 <.LFE27>

0041d5e8 <.LVL179>:
  41d5e8:	bd38      	pop	{r3, r4, r5, pc}

0041d5ea <.LVL180>:
        return BAD_FUNC_ARG;
  41d5ea:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d5ee <.LVL181>:
}
  41d5ee:	bd38      	pop	{r3, r4, r5, pc}

0041d5f0 <.LCFI67>:
        return BAD_FUNC_ARG;
  41d5f0:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d5f4 <.LVL183>:
  41d5f4:	4770      	bx	lr

Disassembly of section .text.CRYPT_AES_CTR_Encrypt%341:

0041d5f6 <CRYPT_AES_CTR_Encrypt>:

/* AES CTR Encrypt (used for decrypt too, with ENCRYPT key setup) */
int CRYPT_AES_CTR_Encrypt(CRYPT_AES_CTX* aes, unsigned char* out,
                          const unsigned char* in, unsigned int inSz)
{
    if (aes == NULL || out == NULL || in == NULL)
  41d5f6:	2a00      	cmp	r2, #0
  41d5f8:	bf18      	it	ne
  41d5fa:	2900      	cmpne	r1, #0
  41d5fc:	d007      	beq.n	41d60e <.LCFI69>
{
  41d5fe:	b538      	push	{r3, r4, r5, lr}

0041d600 <.LCFI68>:
    if (aes == NULL || out == NULL || in == NULL)
  41d600:	b110      	cbz	r0, 41d608 <.LVL186>
        return BAD_FUNC_ARG;

    return wc_AesCtrEncrypt((Aes*)aes, out, in, inSz);
  41d602:	f7fc fb31 	bl	419c68 <.LFE14>

0041d606 <.LVL185>:
  41d606:	bd38      	pop	{r3, r4, r5, pc}

0041d608 <.LVL186>:
        return BAD_FUNC_ARG;
  41d608:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d60c <.LVL187>:
}
  41d60c:	bd38      	pop	{r3, r4, r5, pc}

0041d60e <.LCFI69>:
        return BAD_FUNC_ARG;
  41d60e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d612 <.LVL189>:
  41d612:	4770      	bx	lr

Disassembly of section .text.putShortMSB%342:

0041d614 <putShortMSB>:
{
  41d614:	b410      	push	{r4}

0041d616 <.LCFI0>:
    put_byte(s, (Byte)(b >> 8));
  41d616:	6882      	ldr	r2, [r0, #8]
  41d618:	6943      	ldr	r3, [r0, #20]
  41d61a:	1c5c      	adds	r4, r3, #1
  41d61c:	6144      	str	r4, [r0, #20]
  41d61e:	0a0c      	lsrs	r4, r1, #8
  41d620:	54d4      	strb	r4, [r2, r3]
    put_byte(s, (Byte)(b & 0xff));
  41d622:	6882      	ldr	r2, [r0, #8]
  41d624:	6943      	ldr	r3, [r0, #20]
  41d626:	1c5c      	adds	r4, r3, #1
  41d628:	6144      	str	r4, [r0, #20]
  41d62a:	54d1      	strb	r1, [r2, r3]
}
  41d62c:	f85d 4b04 	ldr.w	r4, [sp], #4

0041d630 <.LCFI1>:
  41d630:	4770      	bx	lr

Disassembly of section .text.wc_Des_SetKey%343:

0041d632 <wc_Des_SetKey>:
    {
  41d632:	b570      	push	{r4, r5, r6, lr}

0041d634 <.LCFI17>:
  41d634:	4606      	mov	r6, r0
  41d636:	460c      	mov	r4, r1
  41d638:	461d      	mov	r5, r3
        wc_Des_SetIV(des, iv);
  41d63a:	4611      	mov	r1, r2

0041d63c <.LVL249>:
  41d63c:	f000 f878 	bl	41d730 <.LFE18>

0041d640 <.LVL250>:
        return DesSetKey(key, dir, des->key);
  41d640:	f106 0210 	add.w	r2, r6, #16
  41d644:	4629      	mov	r1, r5
  41d646:	4620      	mov	r0, r4
  41d648:	f7f8 fce4 	bl	416014 <.LFE179>

0041d64c <.LVL251>:
    }
  41d64c:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section .text.fp_unsigned_bin_size%344:

0041d64e <fp_unsigned_bin_size>:
{
  41d64e:	b508      	push	{r3, lr}

0041d650 <.LCFI25>:
  int     size = fp_count_bits (a);
  41d650:	f000 f87b 	bl	41d74a <.LFE26>

0041d654 <.LVL227>:
  return (size / 8 + ((size & 7) != 0 ? 1 : 0));
  41d654:	f010 0307 	ands.w	r3, r0, #7
  41d658:	bf18      	it	ne
  41d65a:	2301      	movne	r3, #1
  41d65c:	4602      	mov	r2, r0
  41d65e:	2800      	cmp	r0, #0
  41d660:	bfb8      	it	lt
  41d662:	1dc2      	addlt	r2, r0, #7
}
  41d664:	eb03 00e2 	add.w	r0, r3, r2, asr #3

0041d668 <.LVL228>:
  41d668:	bd08      	pop	{r3, pc}

Disassembly of section .text.get_digit%345:

0041d66a <get_digit>:
    return a->used;
}

mp_digit get_digit(mp_int* a, int n)
{
    if (a == NULL)
  41d66a:	b140      	cbz	r0, 41d67e <.LVL7>
        return 0;

    return (n >= a->used || n < 0) ? 0 : a->dp[n];
  41d66c:	6802      	ldr	r2, [r0, #0]
  41d66e:	428a      	cmp	r2, r1
  41d670:	dd07      	ble.n	41d682 <.LVL9>
  41d672:	2900      	cmp	r1, #0
  41d674:	db05      	blt.n	41d682 <.LVL9>
  41d676:	3102      	adds	r1, #2

0041d678 <.LVL5>:
  41d678:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]

0041d67c <.LVL6>:
  41d67c:	4770      	bx	lr

0041d67e <.LVL7>:
        return 0;
  41d67e:	2000      	movs	r0, #0

0041d680 <.LVL8>:
  41d680:	4770      	bx	lr

0041d682 <.LVL9>:
    return (n >= a->used || n < 0) ? 0 : a->dp[n];
  41d682:	2000      	movs	r0, #0

0041d684 <.LVL10>:
}
  41d684:	4770      	bx	lr

Disassembly of section .text.SYS_CONSOLE_Tasks%346:

0041d688 <SYS_CONSOLE_Tasks>:
{
  41d688:	b508      	push	{r3, lr}

0041d68a <.LCFI6>:
    if (consoleDeviceInstance[(SYS_MODULE_INDEX)object].consoleInstanceDevDesc == NULL)
  41d68a:	b283      	uxth	r3, r0
  41d68c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  41d690:	4a03      	ldr	r2, [pc, #12]	; (41d6a0 <.LVL31+0x2>)
  41d692:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  41d696:	685b      	ldr	r3, [r3, #4]
  41d698:	b10b      	cbz	r3, 41d69e <.LVL31>
    consoleDeviceInstance[(SYS_MODULE_INDEX)object].consoleInstanceDevDesc->sysConsoleTasks(object);
  41d69a:	695b      	ldr	r3, [r3, #20]
  41d69c:	4798      	blx	r3

0041d69e <.LVL31>:
  41d69e:	bd08      	pop	{r3, pc}
  41d6a0:	2040d754 	.word	0x2040d754

Disassembly of section .text.popQueue%347:

0041d6a4 <popQueue>:
    (q->tailPos < (q->elemArrSz - 1)) ? q->tailPos++ : (q->tailPos = 0);
  41d6a4:	6802      	ldr	r2, [r0, #0]
  41d6a6:	6903      	ldr	r3, [r0, #16]
  41d6a8:	3b01      	subs	r3, #1
  41d6aa:	429a      	cmp	r2, r3
  41d6ac:	d305      	bcc.n	41d6ba <popQueue+0x16>
  41d6ae:	2300      	movs	r3, #0
  41d6b0:	6003      	str	r3, [r0, #0]
    q->numElem--;
  41d6b2:	6883      	ldr	r3, [r0, #8]
  41d6b4:	3b01      	subs	r3, #1
  41d6b6:	6083      	str	r3, [r0, #8]
  41d6b8:	4770      	bx	lr
    (q->tailPos < (q->elemArrSz - 1)) ? q->tailPos++ : (q->tailPos = 0);
  41d6ba:	3201      	adds	r2, #1
  41d6bc:	6002      	str	r2, [r0, #0]
  41d6be:	e7f8      	b.n	41d6b2 <popQueue+0xe>

Disassembly of section .text.SYS_TIME_Counter64Update%348:

0041d6c0 <SYS_TIME_Counter64Update>:
    uint32_t prevSwCounter32Bit = counterObj->swCounter64Low;
  41d6c0:	4a05      	ldr	r2, [pc, #20]	; (41d6d8 <.LVL35+0x8>)
  41d6c2:	6a53      	ldr	r3, [r2, #36]	; 0x24

0041d6c4 <.LVL31>:
    newSwCounter32Bit = prevSwCounter32Bit + elapsedCount;
  41d6c4:	4418      	add	r0, r3

0041d6c6 <.LBE22>:
    counterObj->swCounter64Low = SYS_TIME_Counter32Update(elapsedCount, &isSwCounter32Oveflow);
  41d6c6:	6250      	str	r0, [r2, #36]	; 0x24
    if (isSwCounter32Oveflow == true)
  41d6c8:	4283      	cmp	r3, r0
  41d6ca:	d800      	bhi.n	41d6ce <.LVL34>

0041d6cc <.LVL33>:
  41d6cc:	4770      	bx	lr

0041d6ce <.LVL34>:
        counterObj->swCounter64High++;
  41d6ce:	6a93      	ldr	r3, [r2, #40]	; 0x28

0041d6d0 <.LVL35>:
  41d6d0:	3301      	adds	r3, #1
  41d6d2:	6293      	str	r3, [r2, #40]	; 0x28
}
  41d6d4:	e7fa      	b.n	41d6cc <.LVL33>
  41d6d6:	bf00      	nop
  41d6d8:	2040d624 	.word	0x2040d624

Disassembly of section .text.__locale_ctype_ptr%349:

0041d6dc <__locale_ctype_ptr>:
  41d6dc:	4b04      	ldr	r3, [pc, #16]	; (41d6f0 <.LBE20+0x6>)
  41d6de:	4a05      	ldr	r2, [pc, #20]	; (41d6f4 <.LBE20+0xa>)
  41d6e0:	681b      	ldr	r3, [r3, #0]
  41d6e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  41d6e4:	2b00      	cmp	r3, #0
  41d6e6:	bf08      	it	eq
  41d6e8:	4613      	moveq	r3, r2

0041d6ea <.LBE20>:
  41d6ea:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
  41d6ee:	4770      	bx	lr
  41d6f0:	2040d77c 	.word	0x2040d77c
  41d6f4:	2040d288 	.word	0x2040d288

Disassembly of section .text.__ascii_wctomb%350:

0041d6f8 <__ascii_wctomb>:
  41d6f8:	b121      	cbz	r1, 41d704 <.LVL4>
  41d6fa:	2aff      	cmp	r2, #255	; 0xff
  41d6fc:	d804      	bhi.n	41d708 <.LVL6>
  41d6fe:	700a      	strb	r2, [r1, #0]
  41d700:	2001      	movs	r0, #1

0041d702 <.LVL3>:
  41d702:	4770      	bx	lr

0041d704 <.LVL4>:
  41d704:	4608      	mov	r0, r1

0041d706 <.LVL5>:
  41d706:	4770      	bx	lr

0041d708 <.LVL6>:
  41d708:	238a      	movs	r3, #138	; 0x8a

0041d70a <.LVL7>:
  41d70a:	6003      	str	r3, [r0, #0]
  41d70c:	f04f 30ff 	mov.w	r0, #4294967295

0041d710 <.LVL8>:
  41d710:	4770      	bx	lr

0041d712 <.LFE18>:
  41d712:	bf00      	nop

Disassembly of section .text._localeconv_r%351:

0041d714 <_localeconv_r>:
  41d714:	4a04      	ldr	r2, [pc, #16]	; (41d728 <.LBE19+0x6>)
  41d716:	4b05      	ldr	r3, [pc, #20]	; (41d72c <.LBE19+0xa>)
  41d718:	6812      	ldr	r2, [r2, #0]
  41d71a:	6b50      	ldr	r0, [r2, #52]	; 0x34

0041d71c <.LVL3>:
  41d71c:	2800      	cmp	r0, #0
  41d71e:	bf08      	it	eq
  41d720:	4618      	moveq	r0, r3

0041d722 <.LBE19>:
  41d722:	30f0      	adds	r0, #240	; 0xf0
  41d724:	4770      	bx	lr
  41d726:	bf00      	nop
  41d728:	2040d77c 	.word	0x2040d77c
  41d72c:	2040d288 	.word	0x2040d288

Disassembly of section .text.wc_Des_SetIV%352:

0041d730 <wc_Des_SetIV>:
    if (des && iv)
  41d730:	4603      	mov	r3, r0
  41d732:	b100      	cbz	r0, 41d736 <wc_Des_SetIV+0x6>
  41d734:	b921      	cbnz	r1, 41d740 <wc_Des_SetIV+0x10>
    else if (des)
  41d736:	b113      	cbz	r3, 41d73e <wc_Des_SetIV+0xe>
        XMEMSET(des->reg,  0, DES_BLOCK_SIZE);
  41d738:	2200      	movs	r2, #0
  41d73a:	601a      	str	r2, [r3, #0]
  41d73c:	605a      	str	r2, [r3, #4]
  41d73e:	4770      	bx	lr
        XMEMCPY(des->reg, iv, DES_BLOCK_SIZE);
  41d740:	6808      	ldr	r0, [r1, #0]

0041d742 <.LVL247>:
  41d742:	684a      	ldr	r2, [r1, #4]
  41d744:	6018      	str	r0, [r3, #0]
  41d746:	605a      	str	r2, [r3, #4]
  41d748:	4770      	bx	lr

Disassembly of section .text.fp_count_bits%353:

0041d74a <fp_count_bits>:
  if (a->used == 0) {
  41d74a:	6802      	ldr	r2, [r0, #0]
  41d74c:	b142      	cbz	r2, 41d760 <.LVL224>
  r = (a->used - 1) * DIGIT_BIT;
  41d74e:	1e53      	subs	r3, r2, #1
  41d750:	015a      	lsls	r2, r3, #5

0041d752 <.LVL220>:
  q = a->dp[a->used - 1];
  41d752:	3302      	adds	r3, #2
  41d754:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

0041d758 <.LVL221>:
  while (q > ((fp_digit) 0)) {
  41d758:	b113      	cbz	r3, 41d760 <.LVL224>
    ++r;
  41d75a:	3201      	adds	r2, #1

0041d75c <.LVL222>:
  while (q > ((fp_digit) 0)) {
  41d75c:	085b      	lsrs	r3, r3, #1

0041d75e <.LVL223>:
  41d75e:	d1fc      	bne.n	41d75a <.LVL221+0x2>

0041d760 <.LVL224>:
}
  41d760:	4610      	mov	r0, r2

0041d762 <.LVL225>:
  41d762:	4770      	bx	lr

Disassembly of section .text.fp_init_copy%354:

0041d764 <fp_init_copy>:
    if (a != b) {
  41d764:	4288      	cmp	r0, r1
  41d766:	d009      	beq.n	41d77c <.LCFI83>
{
  41d768:	b538      	push	{r3, r4, r5, lr}

0041d76a <.LCFI82>:
  41d76a:	460d      	mov	r5, r1
  41d76c:	4604      	mov	r4, r0

0041d76e <.LBB76>:
    fp_zero(a);
  41d76e:	f000 f90b 	bl	41d988 <.LFE163>

0041d772 <.LBE76>:
        fp_copy(b, a);
  41d772:	4621      	mov	r1, r4
  41d774:	4628      	mov	r0, r5
  41d776:	f7ff fe4b 	bl	41d410 <.LFE194>

0041d77a <.LVL561>:
  41d77a:	bd38      	pop	{r3, r4, r5, pc}

0041d77c <.LCFI83>:
  41d77c:	4770      	bx	lr

Disassembly of section .text.BSP_Initialize%355:

0041d780 <BSP_Initialize>:
void BSP_Initialize(void )
{


    /* Switch off LEDs */
		LED1_Off(); 
  41d780:	2220      	movs	r2, #32
  41d782:	4b04      	ldr	r3, [pc, #16]	; (41d794 <BSP_Initialize+0x14>)
  41d784:	631a      	str	r2, [r3, #48]	; 0x30
		LED2_Off(); 
  41d786:	f44f 7280 	mov.w	r2, #256	; 0x100
  41d78a:	f503 7300 	add.w	r3, r3, #512	; 0x200
  41d78e:	631a      	str	r2, [r3, #48]	; 0x30
  41d790:	4770      	bx	lr
  41d792:	bf00      	nop
  41d794:	400e0e00 	.word	0x400e0e00

Disassembly of section .text.CRYPT_MD5_DataAdd%356:

0041d798 <CRYPT_MD5_DataAdd>:
    if (md5 == NULL || input == NULL)
  41d798:	b138      	cbz	r0, 41d7aa <.LCFI3>
{
  41d79a:	b508      	push	{r3, lr}

0041d79c <.LCFI2>:
    if (md5 == NULL || input == NULL)
  41d79c:	b111      	cbz	r1, 41d7a4 <.LVL8>
    return wc_Md5Update((Md5*)md5, input, sz);
  41d79e:	f7fc fe67 	bl	41a470 <.LFE23>

0041d7a2 <.LVL7>:
  41d7a2:	bd08      	pop	{r3, pc}

0041d7a4 <.LVL8>:
        return BAD_FUNC_ARG;
  41d7a4:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d7a8 <.LVL9>:
}
  41d7a8:	bd08      	pop	{r3, pc}

0041d7aa <.LCFI3>:
        return BAD_FUNC_ARG;
  41d7aa:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d7ae <.LVL11>:
  41d7ae:	4770      	bx	lr

Disassembly of section .text.CRYPT_MD5_Finalize%357:

0041d7b0 <CRYPT_MD5_Finalize>:
    if (md5 == NULL || digest == NULL)
  41d7b0:	b138      	cbz	r0, 41d7c2 <.LCFI5>
{
  41d7b2:	b508      	push	{r3, lr}

0041d7b4 <.LCFI4>:
    if (md5 == NULL || digest == NULL)
  41d7b4:	b111      	cbz	r1, 41d7bc <.LVL14>
    return wc_Md5Final((Md5*)md5, digest);
  41d7b6:	f7fb f925 	bl	418a04 <.LFE177>

0041d7ba <.LVL13>:
  41d7ba:	bd08      	pop	{r3, pc}

0041d7bc <.LVL14>:
        return BAD_FUNC_ARG;
  41d7bc:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d7c0 <.LVL15>:
}
  41d7c0:	bd08      	pop	{r3, pc}

0041d7c2 <.LCFI5>:
        return BAD_FUNC_ARG;
  41d7c2:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d7c6 <.LVL17>:
  41d7c6:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA_DataAdd%358:

0041d7c8 <CRYPT_SHA_DataAdd>:
    if (sha == NULL || input == NULL)
  41d7c8:	b138      	cbz	r0, 41d7da <.LCFI9>
{
  41d7ca:	b508      	push	{r3, lr}

0041d7cc <.LCFI8>:
    if (sha == NULL || input == NULL)
  41d7cc:	b111      	cbz	r1, 41d7d4 <.LVL26>
    return wc_ShaUpdate((Sha*)sha, input, sz);
  41d7ce:	f7fd f866 	bl	41a89e <.LFE58>

0041d7d2 <.LVL25>:
  41d7d2:	bd08      	pop	{r3, pc}

0041d7d4 <.LVL26>:
        return BAD_FUNC_ARG;
  41d7d4:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d7d8 <.LVL27>:
}
  41d7d8:	bd08      	pop	{r3, pc}

0041d7da <.LCFI9>:
        return BAD_FUNC_ARG;
  41d7da:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d7de <.LVL29>:
  41d7de:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA_Finalize%359:

0041d7e0 <CRYPT_SHA_Finalize>:
    if (sha == NULL || digest == NULL)
  41d7e0:	b138      	cbz	r0, 41d7f2 <.LCFI11>
{
  41d7e2:	b508      	push	{r3, lr}

0041d7e4 <.LCFI10>:
    if (sha == NULL || digest == NULL)
  41d7e4:	b111      	cbz	r1, 41d7ec <.LVL32>
    return wc_ShaFinal((Sha*)sha, digest);
  41d7e6:	f7fc fd2d 	bl	41a244 <.LFE180>

0041d7ea <.LVL31>:
  41d7ea:	bd08      	pop	{r3, pc}

0041d7ec <.LVL32>:
        return BAD_FUNC_ARG;
  41d7ec:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d7f0 <.LVL33>:
}
  41d7f0:	bd08      	pop	{r3, pc}

0041d7f2 <.LCFI11>:
        return BAD_FUNC_ARG;
  41d7f2:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d7f6 <.LVL35>:
  41d7f6:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA256_DataAdd%360:

0041d7f8 <CRYPT_SHA256_DataAdd>:
    if (sha256 == NULL || input == NULL)
  41d7f8:	b138      	cbz	r0, 41d80a <.LCFI15>
{
  41d7fa:	b508      	push	{r3, lr}

0041d7fc <.LCFI14>:
    if (sha256 == NULL || input == NULL)
  41d7fc:	b111      	cbz	r1, 41d804 <.LVL44>
    return wc_Sha256Update((Sha256*)sha256, input, sz);
  41d7fe:	f7fd f88f 	bl	41a920 <.LFE165>

0041d802 <.LVL43>:
  41d802:	bd08      	pop	{r3, pc}

0041d804 <.LVL44>:
        return BAD_FUNC_ARG;
  41d804:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d808 <.LVL45>:
}
  41d808:	bd08      	pop	{r3, pc}

0041d80a <.LCFI15>:
        return BAD_FUNC_ARG;
  41d80a:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d80e <.LVL47>:
  41d80e:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA256_Finalize%361:

0041d810 <CRYPT_SHA256_Finalize>:
    if (sha256 == NULL || digest == NULL)
  41d810:	b138      	cbz	r0, 41d822 <.LCFI17>
{
  41d812:	b508      	push	{r3, lr}

0041d814 <.LCFI16>:
    if (sha256 == NULL || digest == NULL)
  41d814:	b111      	cbz	r1, 41d81c <.LVL50>
    return wc_Sha256Final((Sha256*)sha256, digest);
  41d816:	f7fc fa75 	bl	419d04 <.LFE151>

0041d81a <.LVL49>:
  41d81a:	bd08      	pop	{r3, pc}

0041d81c <.LVL50>:
        return BAD_FUNC_ARG;
  41d81c:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d820 <.LVL51>:
}
  41d820:	bd08      	pop	{r3, pc}

0041d822 <.LCFI17>:
        return BAD_FUNC_ARG;
  41d822:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d826 <.LVL53>:
  41d826:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA384_DataAdd%362:

0041d828 <CRYPT_SHA384_DataAdd>:
    if (sha384 == NULL || input == NULL)
  41d828:	b138      	cbz	r0, 41d83a <.LCFI21>
{
  41d82a:	b508      	push	{r3, lr}

0041d82c <.LCFI20>:
    if (sha384 == NULL || input == NULL)
  41d82c:	b111      	cbz	r1, 41d834 <.LVL60>
    return wc_Sha384Update((Sha384*)sha384, input, sz);
  41d82e:	f7fa f8b2 	bl	417996 <.LBE719>

0041d832 <.LVL59>:
  41d832:	bd08      	pop	{r3, pc}

0041d834 <.LVL60>:
        return BAD_FUNC_ARG;
  41d834:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d838 <.LVL61>:
}
  41d838:	bd08      	pop	{r3, pc}

0041d83a <.LCFI21>:
        return BAD_FUNC_ARG;
  41d83a:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d83e <.LVL63>:
  41d83e:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA384_Finalize%363:

0041d840 <CRYPT_SHA384_Finalize>:
    if (sha384 == NULL || digest == NULL)
  41d840:	b138      	cbz	r0, 41d852 <.LCFI23>
{
  41d842:	b508      	push	{r3, lr}

0041d844 <.LCFI22>:
    if (sha384 == NULL || digest == NULL)
  41d844:	b111      	cbz	r1, 41d84c <.LVL66>
    return wc_Sha384Final((Sha384*)sha384, digest);
  41d846:	f7f6 f9fb 	bl	413c40 <.LFE21>

0041d84a <.LVL65>:
  41d84a:	bd08      	pop	{r3, pc}

0041d84c <.LVL66>:
        return BAD_FUNC_ARG;
  41d84c:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d850 <.LVL67>:
}
  41d850:	bd08      	pop	{r3, pc}

0041d852 <.LCFI23>:
        return BAD_FUNC_ARG;
  41d852:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d856 <.LVL69>:
  41d856:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA512_DataAdd%364:

0041d858 <CRYPT_SHA512_DataAdd>:
    if (sha512 == NULL || input == NULL)
  41d858:	b138      	cbz	r0, 41d86a <.LCFI27>
{
  41d85a:	b508      	push	{r3, lr}

0041d85c <.LCFI26>:
    if (sha512 == NULL || input == NULL)
  41d85c:	b111      	cbz	r1, 41d864 <.LVL76>
    return wc_Sha512Update((Sha512*)sha512, input, sz);
  41d85e:	f7fa f825 	bl	4178ac <.LFE178>

0041d862 <.LVL75>:
  41d862:	bd08      	pop	{r3, pc}

0041d864 <.LVL76>:
        return BAD_FUNC_ARG;
  41d864:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d868 <.LVL77>:
}
  41d868:	bd08      	pop	{r3, pc}

0041d86a <.LCFI27>:
        return BAD_FUNC_ARG;
  41d86a:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d86e <.LVL79>:
  41d86e:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA512_Finalize%365:

0041d870 <CRYPT_SHA512_Finalize>:
    if (sha512 == NULL || digest == NULL)
  41d870:	b138      	cbz	r0, 41d882 <.LCFI29>
{
  41d872:	b508      	push	{r3, lr}

0041d874 <.LCFI28>:
    if (sha512 == NULL || digest == NULL)
  41d874:	b111      	cbz	r1, 41d87c <.LVL82>
    return wc_Sha512Final((Sha512*)sha512, digest);
  41d876:	f7f6 f89b 	bl	4139b0 <wc_Sha512Final>

0041d87a <.LVL81>:
  41d87a:	bd08      	pop	{r3, pc}

0041d87c <.LVL82>:
        return BAD_FUNC_ARG;
  41d87c:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d880 <.LVL83>:
}
  41d880:	bd08      	pop	{r3, pc}

0041d882 <.LCFI29>:
        return BAD_FUNC_ARG;
  41d882:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d886 <.LVL85>:
  41d886:	4770      	bx	lr

Disassembly of section .text.CRYPT_TDES_KeySet%366:

0041d888 <CRYPT_TDES_KeySet>:
    if (tdes == NULL || key == NULL)
  41d888:	b138      	cbz	r0, 41d89a <.LCFI50>
{
  41d88a:	b510      	push	{r4, lr}

0041d88c <.LCFI49>:
    if (tdes == NULL || key == NULL)
  41d88c:	b111      	cbz	r1, 41d894 <.LVL138>
    return wc_Des3_SetKey((Des3*)tdes, key, iv, dir);
  41d88e:	f7fd fcad 	bl	41b1ec <wc_Des3_SetKey>

0041d892 <.LVL137>:
  41d892:	bd10      	pop	{r4, pc}

0041d894 <.LVL138>:
        return BAD_FUNC_ARG;
  41d894:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d898 <.LVL139>:
}
  41d898:	bd10      	pop	{r4, pc}

0041d89a <.LCFI50>:
        return BAD_FUNC_ARG;
  41d89a:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d89e <.LVL141>:
  41d89e:	4770      	bx	lr

Disassembly of section .text.wolfSSL_Malloc%367:

0041d8a0 <wolfSSL_Malloc>:
#ifdef WOLFSSL_DEBUG_MEMORY
void* wolfSSL_Malloc(size_t size, const char* func, unsigned int line)
#else
void* wolfSSL_Malloc(size_t size)
#endif
{
  41d8a0:	b508      	push	{r3, lr}

0041d8a2 <.LCFI0>:
    void* res = 0;

    if (malloc_function) {
  41d8a2:	4b04      	ldr	r3, [pc, #16]	; (41d8b4 <.LVL18+0x4>)
  41d8a4:	681b      	ldr	r3, [r3, #0]
  41d8a6:	b10b      	cbz	r3, 41d8ac <.LVL17>
    #ifdef WOLFSSL_DEBUG_MEMORY
        res = malloc_function(size, func, line);
    #else
        res = malloc_function(size);
  41d8a8:	4798      	blx	r3

0041d8aa <.LVL16>:
  41d8aa:	bd08      	pop	{r3, pc}

0041d8ac <.LVL17>:
    #endif
    }
    else {
        res = malloc(size);
  41d8ac:	f000 f948 	bl	41db40 <.LFE0>

0041d8b0 <.LVL18>:
        if (res == NULL)
            puts("wolfSSL_malloc failed");
    #endif

    return res;
}
  41d8b0:	bd08      	pop	{r3, pc}
  41d8b2:	bf00      	nop
  41d8b4:	2040d778 	.word	0x2040d778

Disassembly of section .text.wolfSSL_Free%368:

0041d8b8 <wolfSSL_Free>:
#ifdef WOLFSSL_DEBUG_MEMORY
void wolfSSL_Free(void *ptr, const char* func, unsigned int line)
#else
void wolfSSL_Free(void *ptr)
#endif
{
  41d8b8:	b508      	push	{r3, lr}

0041d8ba <.LCFI1>:
    if (free_function) {
  41d8ba:	4b04      	ldr	r3, [pc, #16]	; (41d8cc <.LVL22+0x4>)
  41d8bc:	681b      	ldr	r3, [r3, #0]
  41d8be:	b10b      	cbz	r3, 41d8c4 <.LVL21>
    #ifdef WOLFSSL_DEBUG_MEMORY
        free_function(ptr, func, line);
    #else
        free_function(ptr);
  41d8c0:	4798      	blx	r3

0041d8c2 <.LVL20>:
  41d8c2:	bd08      	pop	{r3, pc}

0041d8c4 <.LVL21>:
    #endif
    }
    else {
        free(ptr);
  41d8c4:	f000 f944 	bl	41db50 <.LFE0>

0041d8c8 <.LVL22>:
  41d8c8:	bd08      	pop	{r3, pc}
  41d8ca:	bf00      	nop
  41d8cc:	2040d774 	.word	0x2040d774

Disassembly of section .text.AesWriteIV%369:

0041d8d0 <AesWriteIV>:
    AES_REGS->AES_IVR[0] = iv[0];
  41d8d0:	6802      	ldr	r2, [r0, #0]
  41d8d2:	4b04      	ldr	r3, [pc, #16]	; (41d8e4 <.LFE3+0x14>)
  41d8d4:	661a      	str	r2, [r3, #96]	; 0x60
    AES_REGS->AES_IVR[1] = iv[1];
  41d8d6:	6842      	ldr	r2, [r0, #4]
  41d8d8:	665a      	str	r2, [r3, #100]	; 0x64
    AES_REGS->AES_IVR[2] = iv[2];
  41d8da:	6882      	ldr	r2, [r0, #8]
  41d8dc:	669a      	str	r2, [r3, #104]	; 0x68
    AES_REGS->AES_IVR[3] = iv[3];
  41d8de:	68c2      	ldr	r2, [r0, #12]
  41d8e0:	66da      	str	r2, [r3, #108]	; 0x6c
  41d8e2:	4770      	bx	lr
  41d8e4:	4006c000 	.word	0x4006c000

Disassembly of section .text.Console_UART_RegisterCallback%370:

0041d8e8 <Console_UART_RegisterCallback>:
    switch (event)
  41d8e8:	b121      	cbz	r1, 41d8f4 <Console_UART_RegisterCallback+0xc>
  41d8ea:	2901      	cmp	r1, #1
  41d8ec:	d104      	bne.n	41d8f8 <Console_UART_RegisterCallback+0x10>
            consUartData.rdCallback = consCallback;
  41d8ee:	4b03      	ldr	r3, [pc, #12]	; (41d8fc <.LFE143+0x14>)
  41d8f0:	6498      	str	r0, [r3, #72]	; 0x48
            break;
  41d8f2:	4770      	bx	lr
            consUartData.wrCallback = consCallback;
  41d8f4:	4b01      	ldr	r3, [pc, #4]	; (41d8fc <.LFE143+0x14>)
  41d8f6:	64d8      	str	r0, [r3, #76]	; 0x4c
  41d8f8:	4770      	bx	lr
  41d8fa:	bf00      	nop
  41d8fc:	2040d5d4 	.word	0x2040d5d4

Disassembly of section .text.UARTDeviceReadCallback%371:

0041d900 <UARTDeviceReadCallback>:
{
  41d900:	b508      	push	{r3, lr}

0041d902 <.LCFI4>:
    if (USART1_ErrorGet() == 0)
  41d902:	f7ff fba5 	bl	41d050 <.LFE6>

0041d906 <.LVL17>:
  41d906:	b918      	cbnz	r0, 41d910 <.LVL17+0xa>
        consUartData.isReadComplete = true;
  41d908:	2201      	movs	r2, #1
  41d90a:	4b02      	ldr	r3, [pc, #8]	; (41d914 <.LVL17+0xe>)
  41d90c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  41d910:	bd08      	pop	{r3, pc}
  41d912:	bf00      	nop
  41d914:	2040d5d4 	.word	0x2040d5d4

Disassembly of section .text.SYS_TIME_GetElapsedCount%372:

0041d918 <SYS_TIME_GetElapsedCount>:
    if (hwTimerCurrentValue > counterObj->hwTimerPreviousValue)
  41d918:	4b04      	ldr	r3, [pc, #16]	; (41d92c <.LVL75+0x2>)
  41d91a:	691b      	ldr	r3, [r3, #16]
  41d91c:	4283      	cmp	r3, r0
  41d91e:	d303      	bcc.n	41d928 <.LVL74>
        elapsedCount = (SYS_TIME_HW_COUNTER_PERIOD - counterObj->hwTimerPreviousValue) + hwTimerCurrentValue + 1;
  41d920:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
  41d924:	4418      	add	r0, r3

0041d926 <.LVL73>:
}
  41d926:	4770      	bx	lr

0041d928 <.LVL74>:
        elapsedCount = hwTimerCurrentValue - counterObj->hwTimerPreviousValue;
  41d928:	1ac0      	subs	r0, r0, r3

0041d92a <.LVL75>:
  41d92a:	4770      	bx	lr
  41d92c:	2040d624 	.word	0x2040d624

Disassembly of section .text.GetSequence%373:

0041d930 <GetSequence>:
{
  41d930:	b500      	push	{lr}

0041d932 <.LCFI32>:
  41d932:	b083      	sub	sp, #12

0041d934 <.LCFI33>:
    return GetASNHeader(input, ASN_SEQUENCE | ASN_CONSTRUCTED, inOutIdx, len,
  41d934:	9300      	str	r3, [sp, #0]
  41d936:	4613      	mov	r3, r2

0041d938 <.LVL173>:
  41d938:	460a      	mov	r2, r1

0041d93a <.LVL174>:
  41d93a:	2130      	movs	r1, #48	; 0x30

0041d93c <.LVL175>:
  41d93c:	f7fe fe6a 	bl	41c614 <.LFE149>

0041d940 <.LVL176>:
}
  41d940:	b003      	add	sp, #12

0041d942 <.LCFI34>:
  41d942:	f85d fb04 	ldr.w	pc, [sp], #4

Disassembly of section .text.wc_InitMd5%374:

0041d946 <wc_InitMd5>:
#endif /* !HAVE_MD5_CUST_API */


int wc_InitMd5(Md5* md5)
{
    if (md5 == NULL) {
  41d946:	b130      	cbz	r0, 41d956 <.LCFI9>
{
  41d948:	b508      	push	{r3, lr}

0041d94a <.LCFI8>:
        return BAD_FUNC_ARG;
    }
    return wc_InitMd5_ex(md5, NULL, INVALID_DEVID);
  41d94a:	f06f 0201 	mvn.w	r2, #1
  41d94e:	2100      	movs	r1, #0
  41d950:	f7ff f9d4 	bl	41ccfc <wc_InitMd5_ex>

0041d954 <.LVL369>:
  41d954:	bd08      	pop	{r3, pc}

0041d956 <.LCFI9>:
        return BAD_FUNC_ARG;
  41d956:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d95a <.LVL371>:
  41d95a:	4770      	bx	lr

Disassembly of section .text.fp_set%375:

0041d95c <fp_set>:
{
  41d95c:	b538      	push	{r3, r4, r5, lr}

0041d95e <.LCFI35>:
  41d95e:	4605      	mov	r5, r0
  41d960:	460c      	mov	r4, r1
   fp_zero(a);
  41d962:	f000 f811 	bl	41d988 <.LFE163>

0041d966 <.LVL293>:
   a->dp[0] = b;
  41d966:	60ac      	str	r4, [r5, #8]
   a->used  = a->dp[0] ? 1 : 0;
  41d968:	3400      	adds	r4, #0

0041d96a <.LVL294>:
  41d96a:	bf18      	it	ne
  41d96c:	2401      	movne	r4, #1
  41d96e:	602c      	str	r4, [r5, #0]
  41d970:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section .text.SYS_Tasks%376:

0041d974 <SYS_Tasks>:
  Remarks:
    See prototype in system/common/sys_module.h.
*/

void SYS_Tasks ( void )
{
  41d974:	b508      	push	{r3, lr}

0041d976 <.LCFI0>:
    /* Maintain system services */
    SYS_CONSOLE_Tasks(sysObj.sysConsole0);
  41d976:	4b03      	ldr	r3, [pc, #12]	; (41d984 <.LVL1+0x2>)
  41d978:	6818      	ldr	r0, [r3, #0]
  41d97a:	f7ff fe85 	bl	41d688 <SYS_CONSOLE_Tasks>

0041d97e <.LVL0>:
    /* Maintain Middleware & Other Libraries */
    

    /* Maintain the application's state machine. */
        /* Call Application task APP. */
    APP_Tasks();
  41d97e:	f7f0 ff4f 	bl	40e820 <APP_Tasks>

0041d982 <.LVL1>:
  41d982:	bd08      	pop	{r3, pc}
  41d984:	20400000 	.word	0x20400000

Disassembly of section .text.fp_zero%377:

0041d988 <fp_zero>:
{
  41d988:	b508      	push	{r3, lr}

0041d98a <.LCFI32>:
    a->used = 0;
  41d98a:	2100      	movs	r1, #0
  41d98c:	6001      	str	r1, [r0, #0]
    a->sign = FP_ZPOS;
  41d98e:	6041      	str	r1, [r0, #4]
    XMEMSET(a->dp, 0, size * sizeof(fp_digit));
  41d990:	f44f 7208 	mov.w	r2, #544	; 0x220
  41d994:	3008      	adds	r0, #8

0041d996 <.LVL273>:
  41d996:	f7fc fa03 	bl	419da0 <.LFE166>

0041d99a <.LVL274>:
  41d99a:	bd08      	pop	{r3, pc}

Disassembly of section .text.fp_clear%378:

0041d99c <fp_clear>:
{
  41d99c:	b508      	push	{r3, lr}

0041d99e <.LCFI44>:
    a->used = 0;
  41d99e:	2100      	movs	r1, #0
  41d9a0:	6001      	str	r1, [r0, #0]
    a->sign = FP_ZPOS;
  41d9a2:	6041      	str	r1, [r0, #4]
    XMEMSET(a->dp, 0, size * sizeof(fp_digit));
  41d9a4:	f44f 7208 	mov.w	r2, #544	; 0x220
  41d9a8:	3008      	adds	r0, #8

0041d9aa <.LVL342>:
  41d9aa:	f7fc f9f9 	bl	419da0 <.LFE166>

0041d9ae <.LVL343>:
  41d9ae:	bd08      	pop	{r3, pc}

Disassembly of section .rodata.bl_order%379:

0041d9b0 <bl_order>:
  41d9b0:	1110 0012 0708 0609 050a 040b 030c 020d     ................
  41d9c0:	010e 000f                                   ....

Disassembly of section .rodata%380:

0041d9c4 <.LANCHOR0>:
  41d9c4:	00000043 	.word	0x00000043
  41d9c8:	49534f50 	.word	0x49534f50
  41d9cc:	00000058 	.word	0x00000058
  41d9d0:	00000000 	.word	0x00000000
  41d9d4:	002e      	.short	0x002e
  41d9d6:	bf00      	nop

Disassembly of section .text.register_fini%381:

0041d9d8 <register_fini>:
  41d9d8:	4b02      	ldr	r3, [pc, #8]	; (41d9e4 <.LVL0+0x2>)
  41d9da:	b113      	cbz	r3, 41d9e2 <.LVL0>

0041d9dc <.LBB2>:
  41d9dc:	4802      	ldr	r0, [pc, #8]	; (41d9e8 <.LVL0+0x6>)
  41d9de:	f000 b935 	b.w	41dc4c <.LFE155>

0041d9e2 <.LVL0>:
  41d9e2:	4770      	bx	lr
  41d9e4:	00000000 	.word	0x00000000
  41d9e8:	0041cf8d 	.word	0x0041cf8d

Disassembly of section .rodata%382:

0041d9ec <.LC0>:
  41d9ec:	69666e49 	.word	0x69666e49
  41d9f0:	7974696e 	.word	0x7974696e
  41d9f4:	00000000 	.word	0x00000000

0041d9f8 <.LC1>:
  41d9f8:	004e614e 	.word	0x004e614e

0041d9fc <.LC2>:
  41d9fc:	0030      	.short	0x0030
  41d9fe:	bf00      	nop

Disassembly of section .text._Bfree%383:

0041da00 <_Bfree>:
  41da00:	b131      	cbz	r1, 41da10 <.LVL11+0x6>
  41da02:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  41da04:	684a      	ldr	r2, [r1, #4]
  41da06:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]

0041da0a <.LVL11>:
  41da0a:	6008      	str	r0, [r1, #0]
  41da0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  41da10:	4770      	bx	lr

0041da12 <.LFE18>:
  41da12:	bf00      	nop

Disassembly of section .text.__i2b%384:

0041da14 <__i2b>:
  41da14:	b510      	push	{r4, lr}

0041da16 <.LCFI6>:
  41da16:	460c      	mov	r4, r1
  41da18:	2101      	movs	r1, #1

0041da1a <.LVL105>:
  41da1a:	f7fe fd1f 	bl	41c45c <.LFE2>

0041da1e <.LVL106>:
  41da1e:	2201      	movs	r2, #1
  41da20:	6144      	str	r4, [r0, #20]
  41da22:	6102      	str	r2, [r0, #16]
  41da24:	bd10      	pop	{r4, pc}

0041da26 <.LFE23>:
  41da26:	bf00      	nop

Disassembly of section .text.SYS_INT_Disable%385:

0041da28 <SYS_INT_Disable>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  41da28:	f3ef 8010 	mrs	r0, PRIMASK

0041da2c <.LBB38>:
  __ASM volatile ("cpsid i" : : : "memory");
  41da2c:	b672      	cpsid	i

0041da2e <.LBB40>:
  __ASM volatile ("dmb 0xF":::"memory");
  41da2e:	f3bf 8f5f 	dmb	sy

0041da32 <.LBE40>:
}
  41da32:	fab0 f080 	clz	r0, r0

0041da36 <.LVL1>:
  41da36:	0940      	lsrs	r0, r0, #5
  41da38:	4770      	bx	lr

Disassembly of section .text.SYS_INT_Restore%386:

0041da3a <SYS_INT_Restore>:
    if( state == true )
  41da3a:	b918      	cbnz	r0, 41da44 <.LBB46>

0041da3c <.LBB42>:
  __ASM volatile ("cpsid i" : : : "memory");
  41da3c:	b672      	cpsid	i

0041da3e <.LBB44>:
  __ASM volatile ("dmb 0xF":::"memory");
  41da3e:	f3bf 8f5f 	dmb	sy
  41da42:	4770      	bx	lr

0041da44 <.LBB46>:
  41da44:	f3bf 8f5f 	dmb	sy

0041da48 <.LBB48>:
  __ASM volatile ("cpsie i" : : : "memory");
  41da48:	b662      	cpsie	i
  41da4a:	4770      	bx	lr

Disassembly of section .text.CRYPT_MD5_Initialize%387:

0041da4c <CRYPT_MD5_Initialize>:
    if (md5 == NULL)
  41da4c:	b120      	cbz	r0, 41da58 <.LCFI1>
{
  41da4e:	b508      	push	{r3, lr}

0041da50 <.LCFI0>:
    wc_InitMd5((Md5*)md5);
  41da50:	f7ff ff79 	bl	41d946 <.LFE181>

0041da54 <.LVL1>:
    return 0;
  41da54:	2000      	movs	r0, #0
  41da56:	bd08      	pop	{r3, pc}

0041da58 <.LCFI1>:
        return BAD_FUNC_ARG;
  41da58:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041da5c <.LVL3>:
  41da5c:	4770      	bx	lr

Disassembly of section .text.mp_isodd%388:

0041da5e <mp_isodd>:
    return fp_isodd(a);
  41da5e:	6803      	ldr	r3, [r0, #0]
  41da60:	2b00      	cmp	r3, #0
  41da62:	dd03      	ble.n	41da6c <.LVL828>
  41da64:	6880      	ldr	r0, [r0, #8]

0041da66 <.LVL827>:
  41da66:	f000 0001 	and.w	r0, r0, #1
  41da6a:	4770      	bx	lr

0041da6c <.LVL828>:
  41da6c:	2000      	movs	r0, #0

0041da6e <.LVL829>:
}
  41da6e:	4770      	bx	lr

Disassembly of section .text.SetSequence%389:

0041da70 <SetSequence>:
{
  41da70:	b508      	push	{r3, lr}

0041da72 <.LCFI106>:
    output[0] = ASN_SEQUENCE | ASN_CONSTRUCTED;
  41da72:	2330      	movs	r3, #48	; 0x30
  41da74:	f801 3b01 	strb.w	r3, [r1], #1

0041da78 <.LVL573>:
    return SetLength(len, output + 1) + 1;
  41da78:	f7fe fb13 	bl	41c0a2 <.LFE193>

0041da7c <.LVL574>:
}
  41da7c:	3001      	adds	r0, #1
  41da7e:	bd08      	pop	{r3, pc}

Disassembly of section .text.CRYPT_SHA_Initialize%390:

0041da80 <CRYPT_SHA_Initialize>:
    if (sha == NULL)
  41da80:	b118      	cbz	r0, 41da8a <.LCFI7>
{
  41da82:	b508      	push	{r3, lr}

0041da84 <.LCFI6>:
    return wc_InitSha((Sha*)sha);
  41da84:	f7fe f8e0 	bl	41bc48 <.LFE19>

0041da88 <.LVL19>:
  41da88:	bd08      	pop	{r3, pc}

0041da8a <.LCFI7>:
        return BAD_FUNC_ARG;
  41da8a:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041da8e <.LVL21>:
  41da8e:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA256_Initialize%391:

0041da90 <CRYPT_SHA256_Initialize>:
    if (sha256 == NULL)
  41da90:	b118      	cbz	r0, 41da9a <.LCFI13>
{
  41da92:	b508      	push	{r3, lr}

0041da94 <.LCFI12>:
    return wc_InitSha256((Sha256*)sha256);
  41da94:	f7fc fa1e 	bl	419ed4 <.LFE29>

0041da98 <.LVL37>:
  41da98:	bd08      	pop	{r3, pc}

0041da9a <.LCFI13>:
        return BAD_FUNC_ARG;
  41da9a:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041da9e <.LVL39>:
  41da9e:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA384_Initialize%392:

0041daa0 <CRYPT_SHA384_Initialize>:
    if (sha384 == NULL)
  41daa0:	b118      	cbz	r0, 41daaa <.LCFI19>
{
  41daa2:	b508      	push	{r3, lr}

0041daa4 <.LCFI18>:
    return wc_InitSha384((Sha384*)sha384);
  41daa4:	f000 f888 	bl	41dbb8 <.LFE22>

0041daa8 <.LVL55>:
  41daa8:	bd08      	pop	{r3, pc}

0041daaa <.LCFI19>:
        return BAD_FUNC_ARG;
  41daaa:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041daae <.LVL57>:
  41daae:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA512_Initialize%393:

0041dab0 <CRYPT_SHA512_Initialize>:
    if (sha512 == NULL)
  41dab0:	b118      	cbz	r0, 41daba <.LCFI25>
{
  41dab2:	b508      	push	{r3, lr}

0041dab4 <.LCFI24>:
    return wc_InitSha512((Sha512*)sha512);
  41dab4:	f000 f879 	bl	41dbaa <.LFE215>

0041dab8 <.LVL71>:
  41dab8:	bd08      	pop	{r3, pc}

0041daba <.LCFI25>:
        return BAD_FUNC_ARG;
  41daba:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041dabe <.LVL73>:
  41dabe:	4770      	bx	lr

Disassembly of section .text.CRYPT_RNG_Initialize%394:

0041dac0 <CRYPT_RNG_Initialize>:
    if (rng == NULL)
  41dac0:	b118      	cbz	r0, 41daca <.LCFI44>
{
  41dac2:	b508      	push	{r3, lr}

0041dac4 <.LCFI43>:
	return same70_InitRng();
  41dac4:	f7ff fa94 	bl	41cff0 <same70_InitRng>

0041dac8 <.LVL119>:
  41dac8:	bd08      	pop	{r3, pc}

0041daca <.LCFI44>:
        return BAD_FUNC_ARG;
  41daca:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041dace <.LVL121>:
  41dace:	4770      	bx	lr

Disassembly of section .rodata.totrot%395:

0041dad0 <totrot>:
  41dad0:	0201 0604 0a08 0e0c 110f 1513 1917 1c1b     ................

Disassembly of section .text.wc_RsaEncryptSize%396:

0041dae0 <wc_RsaEncryptSize>:
}
#endif

int wc_RsaEncryptSize(RsaKey* key)
{
    if (key == NULL) {
  41dae0:	b118      	cbz	r0, 41daea <.LCFI18>
{
  41dae2:	b508      	push	{r3, lr}

0041dae4 <.LCFI17>:
        return BAD_FUNC_ARG;
    }
    return mp_unsigned_bin_size(&key->n);
  41dae4:	f000 f942 	bl	41dd6c <.LFE82>

0041dae8 <.LVL85>:
  41dae8:	bd08      	pop	{r3, pc}

0041daea <.LCFI18>:
        return BAD_FUNC_ARG;
  41daea:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041daee <.LVL87>:
  41daee:	4770      	bx	lr

Disassembly of section .text.mp_init%397:

0041daf0 <mp_init>:
  if (a)
  41daf0:	b120      	cbz	r0, 41dafc <.LCFI40>
{
  41daf2:	b508      	push	{r3, lr}

0041daf4 <.LBB16>:
    fp_zero(a);
  41daf4:	f7ff ff48 	bl	41d988 <.LFE163>

0041daf8 <.LBE16>:
}
  41daf8:	2000      	movs	r0, #0
  41dafa:	bd08      	pop	{r3, pc}

0041dafc <.LCFI40>:
  41dafc:	2000      	movs	r0, #0

0041dafe <.LVL333>:
  41dafe:	4770      	bx	lr

Disassembly of section .text.UARTDeviceWriteCallback%398:

0041db00 <UARTDeviceWriteCallback>:
    consUartData.isWriteComplete = true;
  41db00:	2201      	movs	r2, #1
  41db02:	4b02      	ldr	r3, [pc, #8]	; (41db0c <.LFE61+0xc>)
  41db04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  41db08:	4770      	bx	lr
  41db0a:	bf00      	nop
  41db0c:	2040d5d4 	.word	0x2040d5d4

Disassembly of section .text.USART1_WriteCallbackRegister%399:

0041db10 <USART1_WriteCallbackRegister>:


bool USART1_WriteCallbackRegister( USART_CALLBACK callback, uintptr_t context )
{
    usart1Obj.txCallback = callback;
  41db10:	4b02      	ldr	r3, [pc, #8]	; (41db1c <.LVL43+0x4>)
  41db12:	60d8      	str	r0, [r3, #12]
    usart1Obj.txContext = context;
  41db14:	6119      	str	r1, [r3, #16]

    return true;
}
  41db16:	2001      	movs	r0, #1

0041db18 <.LVL43>:
  41db18:	4770      	bx	lr
  41db1a:	bf00      	nop
  41db1c:	20400020 	.word	0x20400020

Disassembly of section .text.USART1_ReadCallbackRegister%400:

0041db20 <USART1_ReadCallbackRegister>:

bool USART1_ReadCallbackRegister( USART_CALLBACK callback, uintptr_t context )
{
    usart1Obj.rxCallback = callback;
  41db20:	4b02      	ldr	r3, [pc, #8]	; (41db2c <.LVL45+0x4>)
  41db22:	6258      	str	r0, [r3, #36]	; 0x24
    usart1Obj.rxContext = context;
  41db24:	6299      	str	r1, [r3, #40]	; 0x28

    return true;
}
  41db26:	2001      	movs	r0, #1

0041db28 <.LVL45>:
  41db28:	4770      	bx	lr
  41db2a:	bf00      	nop
  41db2c:	20400020 	.word	0x20400020

Disassembly of section .text.calloc%401:

0041db30 <calloc>:
  41db30:	4b02      	ldr	r3, [pc, #8]	; (41db3c <.LVL3>)
  41db32:	460a      	mov	r2, r1
  41db34:	4601      	mov	r1, r0

0041db36 <.LVL1>:
  41db36:	6818      	ldr	r0, [r3, #0]

0041db38 <.LVL2>:
  41db38:	f7fe b8b6 	b.w	41bca8 <.LFE163>

0041db3c <.LVL3>:
  41db3c:	2040d77c 	.word	0x2040d77c

Disassembly of section .text.malloc%402:

0041db40 <malloc>:
  41db40:	4b02      	ldr	r3, [pc, #8]	; (41db4c <.LVL2+0x2>)
  41db42:	4601      	mov	r1, r0
  41db44:	6818      	ldr	r0, [r3, #0]

0041db46 <.LVL1>:
  41db46:	f7f0 b96f 	b.w	40de28 <.LFE183>

0041db4a <.LVL2>:
  41db4a:	bf00      	nop
  41db4c:	2040d77c 	.word	0x2040d77c

Disassembly of section .text.free%403:

0041db50 <free>:
  41db50:	4b02      	ldr	r3, [pc, #8]	; (41db5c <.LVL5+0x2>)
  41db52:	4601      	mov	r1, r0
  41db54:	6818      	ldr	r0, [r3, #0]

0041db56 <.LVL4>:
  41db56:	f7f7 bc1f 	b.w	415398 <_free_r>

0041db5a <.LVL5>:
  41db5a:	bf00      	nop
  41db5c:	2040d77c 	.word	0x2040d77c

Disassembly of section .rodata.blanks.8352%404:

0041db60 <blanks.8352>:
  41db60:	20202020 20202020 20202020 20202020                     

Disassembly of section .rodata.zeroes.8353%405:

0041db70 <zeroes.8353>:
  41db70:	30303030 30303030 30303030 30303030     0000000000000000

Disassembly of section .text.main%406:

0041db80 <main>:
// Section: Main Entry Point
// *****************************************************************************
// *****************************************************************************

int main ( void )
{
  41db80:	b508      	push	{r3, lr}

0041db82 <.LCFI0>:
    /* Initialize all modules */
    SYS_Initialize ( NULL );
  41db82:	2000      	movs	r0, #0
  41db84:	f7fd ffa0 	bl	41bac8 <SYS_Initialize>

0041db88 <.LVL0>:

    while ( true )
    {
        /* Maintain state machines of all polled MPLAB Harmony modules. */
        SYS_Tasks ( );
  41db88:	f7ff fef4 	bl	41d974 <SYS_Tasks>

0041db8c <.LVL1>:
  41db8c:	e7fc      	b.n	41db88 <.LVL0>

Disassembly of section .text.myFree%407:

0041db8e <myFree>:
    XFREE(memory, opaque, DYNAMIC_TYPE_LIBZ);
  41db8e:	b121      	cbz	r1, 41db9a <.LCFI1>

0041db90 <.LBE2>:
{
  41db90:	b508      	push	{r3, lr}

0041db92 <.LCFI0>:
  41db92:	4608      	mov	r0, r1

0041db94 <.LBB3>:
    XFREE(memory, opaque, DYNAMIC_TYPE_LIBZ);
  41db94:	f7ff fe90 	bl	41d8b8 <.LFE2>

0041db98 <.LVL2>:
  41db98:	bd08      	pop	{r3, pc}

0041db9a <.LCFI1>:
  41db9a:	4770      	bx	lr

Disassembly of section .text.wc_ecc_init%408:

0041db9c <wc_ecc_init>:
{
  41db9c:	b508      	push	{r3, lr}

0041db9e <.LCFI77>:
    return wc_ecc_init_ex(key, NULL, INVALID_DEVID);
  41db9e:	f06f 0201 	mvn.w	r2, #1
  41dba2:	2100      	movs	r1, #0
  41dba4:	f7fe fca5 	bl	41c4f2 <.LFE16>

0041dba8 <.LVL941>:
}
  41dba8:	bd08      	pop	{r3, pc}

Disassembly of section .text.wc_InitSha512%409:

0041dbaa <wc_InitSha512>:
{
  41dbaa:	b508      	push	{r3, lr}

0041dbac <.LCFI12>:
    return wc_InitSha512_ex(sha512, NULL, INVALID_DEVID);
  41dbac:	f06f 0201 	mvn.w	r2, #1
  41dbb0:	2100      	movs	r1, #0
  41dbb2:	f7fb fa21 	bl	418ff8 <wc_InitSha512_ex>

0041dbb6 <.LVL80>:
}
  41dbb6:	bd08      	pop	{r3, pc}

Disassembly of section .text.wc_InitSha384%410:

0041dbb8 <wc_InitSha384>:
#endif

int wc_InitSha384(Sha384* sha384)
{
  41dbb8:	b508      	push	{r3, lr}

0041dbba <.LCFI21>:
    return wc_InitSha384_ex(sha384, NULL, INVALID_DEVID);
  41dbba:	f06f 0201 	mvn.w	r2, #1
  41dbbe:	2100      	movs	r1, #0
  41dbc0:	f7fb fa76 	bl	4190b0 <.LFE15>

0041dbc4 <.LVL145>:
}
  41dbc4:	bd08      	pop	{r3, pc}

Disassembly of section .text.APP_Initialize%411:

00419944 <APP_Initialize>:
    appData.state = APP_STATE_INIT;
  419944:	4b012200 	.word	0x4b012200
  419948:	701a      	strb	r2, [r3, #0]
  41994a:	4770      	bx	lr
  41994c:	2040d534 	.word	0x2040d534

Disassembly of section .text.myAlloc%412:

0041dbc6 <myAlloc>:
{
  41dbc6:	b508      	push	{r3, lr}

0041dbc8 <.LCFI2>:
    return XMALLOC(item * size, opaque, DYNAMIC_TYPE_LIBZ);
  41dbc8:	fb02 f001 	mul.w	r0, r2, r1

0041dbcc <.LVL5>:
  41dbcc:	f7ff fe68 	bl	41d8a0 <.LFE189>

0041dbd0 <.LVL6>:
}
  41dbd0:	bd08      	pop	{r3, pc}

Disassembly of section .text.wc_InitRsaKey%413:

0041dbd2 <wc_InitRsaKey>:
{
  41dbd2:	b508      	push	{r3, lr}

0041dbd4 <.LCFI14>:
    return wc_InitRsaKey_ex(key, heap, INVALID_DEVID);
  41dbd4:	f06f 0201 	mvn.w	r2, #1
  41dbd8:	f7fc fc8e 	bl	41a4f8 <.LFE18>

0041dbdc <.LVL64>:
}
  41dbdc:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_clear%414:

0041dbde <mp_clear>:
    if (a == NULL)
  41dbde:	b118      	cbz	r0, 41dbe8 <.LCFI49>
{
  41dbe0:	b508      	push	{r3, lr}

0041dbe2 <.LCFI48>:
    fp_clear(a);
  41dbe2:	f7ff fedb 	bl	41d99c <.LFE63>

0041dbe6 <.LVL355>:
  41dbe6:	bd08      	pop	{r3, pc}

0041dbe8 <.LCFI49>:
  41dbe8:	4770      	bx	lr

Disassembly of section .text.zcalloc%415:

0041dbea <zcalloc>:

voidpf ZLIB_INTERNAL zcalloc (opaque, items, size)
    voidpf opaque;
    unsigned items;
    unsigned size;
{
  41dbea:	b508      	push	{r3, lr}

0041dbec <.LCFI0>:
    if (opaque) items += size - size; /* make compiler happy */
    return sizeof(uInt) > 2 ? (voidpf)malloc(items * size) :
  41dbec:	fb02 f001 	mul.w	r0, r2, r1

0041dbf0 <.LVL4>:
  41dbf0:	f7ff ffa6 	bl	41db40 <.LFE0>

0041dbf4 <.LVL5>:
                              (voidpf)calloc(items, size);
}
  41dbf4:	bd08      	pop	{r3, pc}

Disassembly of section .text.TC0_CH0_TimerStart%416:

0041dbf8 <TC0_CH0_TimerStart>:
    TC0_REGS->TC_CHANNEL[0].TC_CCR = (TC_CCR_CLKEN_Msk | TC_CCR_SWTRG_Msk);
  41dbf8:	2205      	movs	r2, #5
  41dbfa:	4b01      	ldr	r3, [pc, #4]	; (41dc00 <TC0_CH0_TimerStart+0x8>)
  41dbfc:	601a      	str	r2, [r3, #0]
  41dbfe:	4770      	bx	lr
  41dc00:	4000c000 	.word	0x4000c000

Disassembly of section .text.TC0_CH0_TimerStop%417:

0041dc04 <TC0_CH0_TimerStop>:
    TC0_REGS->TC_CHANNEL[0].TC_CCR = (TC_CCR_CLKDIS_Msk);
  41dc04:	2202      	movs	r2, #2
  41dc06:	4b01      	ldr	r3, [pc, #4]	; (41dc0c <.LFE142+0x8>)
  41dc08:	601a      	str	r2, [r3, #0]
  41dc0a:	4770      	bx	lr
  41dc0c:	4000c000 	.word	0x4000c000

Disassembly of section .text.TC0_CH0_TimerPeriodSet%418:

0041dc10 <TC0_CH0_TimerPeriodSet>:
    TC0_REGS->TC_CHANNEL[0].TC_RC = period;
  41dc10:	4b01      	ldr	r3, [pc, #4]	; (41dc18 <.LFE143+0x8>)
  41dc12:	61d8      	str	r0, [r3, #28]
  41dc14:	4770      	bx	lr
  41dc16:	bf00      	nop
  41dc18:	4000c000 	.word	0x4000c000

Disassembly of section .text.TC0_CH0_TimerCompareSet%419:

0041dc1c <TC0_CH0_TimerCompareSet>:
    TC0_REGS->TC_CHANNEL[0].TC_RA = compare;
  41dc1c:	4b01      	ldr	r3, [pc, #4]	; (41dc24 <.LFE145+0x8>)
  41dc1e:	6158      	str	r0, [r3, #20]
  41dc20:	4770      	bx	lr
  41dc22:	bf00      	nop
  41dc24:	4000c000 	.word	0x4000c000

Disassembly of section .text.TC0_CH0_TimerCounterGet%420:

0041dc28 <TC0_CH0_TimerCounterGet>:
    return TC0_REGS->TC_CHANNEL[0].TC_CV;
  41dc28:	4b01      	ldr	r3, [pc, #4]	; (41dc30 <.LFE146+0x8>)
  41dc2a:	6918      	ldr	r0, [r3, #16]
}
  41dc2c:	b280      	uxth	r0, r0
  41dc2e:	4770      	bx	lr
  41dc30:	4000c000 	.word	0x4000c000

Disassembly of section .text.TC0_CH0_TimerCallbackRegister%421:

0041dc34 <TC0_CH0_TimerCallbackRegister>:
    TC0_CH0_CallbackObj.callback_fn = callback;
  41dc34:	4b01      	ldr	r3, [pc, #4]	; (41dc3c <.LFE148+0x8>)
  41dc36:	6018      	str	r0, [r3, #0]
    TC0_CH0_CallbackObj.context = context;
  41dc38:	6059      	str	r1, [r3, #4]
  41dc3a:	4770      	bx	lr
  41dc3c:	20400018 	.word	0x20400018

Disassembly of section .text.USART1_ReadCountGet%422:

0041dc40 <USART1_ReadCountGet>:
}

size_t USART1_ReadCountGet( void )
{
    return usart1Obj.rxProcessedSize;
}
  41dc40:	4b01      	ldr	r3, [pc, #4]	; (41dc48 <.LFE149+0x8>)
  41dc42:	6a18      	ldr	r0, [r3, #32]
  41dc44:	4770      	bx	lr
  41dc46:	bf00      	nop
  41dc48:	20400020 	.word	0x20400020

Disassembly of section .text.atexit%423:

0041dc4c <atexit>:
  41dc4c:	2300      	movs	r3, #0
  41dc4e:	4601      	mov	r1, r0
  41dc50:	461a      	mov	r2, r3
  41dc52:	4618      	mov	r0, r3

0041dc54 <.LVL1>:
  41dc54:	f7fb bd32 	b.w	4196bc <__register_exitproc>

Disassembly of section .rodata.p05.7179%424:

0041dc58 <p05.7179>:
  41dc58:	0005 0000 0019 0000 007d 0000               ........}...

Disassembly of section .text.wc_ecc_make_key%425:

0041dc64 <wc_ecc_make_key>:
{
  41dc64:	b508      	push	{r3, lr}

0041dc66 <.LCFI71>:
    return wc_ecc_make_key_ex(rng, keysize, key, ECC_CURVE_DEF);
  41dc66:	2300      	movs	r3, #0
  41dc68:	f7f7 fd5a 	bl	415720 <.LFE18>

0041dc6c <.LVL930>:
}
  41dc6c:	bd08      	pop	{r3, pc}

Disassembly of section .text.wc_ecc_import_x963%426:

0041dc6e <wc_ecc_import_x963>:
{
  41dc6e:	b508      	push	{r3, lr}

0041dc70 <.LCFI122>:
    return wc_ecc_import_x963_ex(in, inLen, key, ECC_CURVE_DEF);
  41dc70:	2300      	movs	r3, #0
  41dc72:	f7f9 ff77 	bl	417b64 <.LFE19>

0041dc76 <.LVL1437>:
}
  41dc76:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_add%427:

0041dc78 <mp_add>:
{
  41dc78:	b508      	push	{r3, lr}

0041dc7a <.LCFI51>:
  fp_add(a, b, c);
  41dc7a:	f7fe fc15 	bl	41c4a8 <.LFE17>

0041dc7e <.LVL372>:
}
  41dc7e:	2000      	movs	r0, #0
  41dc80:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_sub%428:

0041dc82 <mp_sub>:
{
  41dc82:	b508      	push	{r3, lr}

0041dc84 <.LCFI52>:
  fp_sub(a, b, c);
  41dc84:	f7fe fd50 	bl	41c728 <.LFE171>

0041dc88 <.LVL374>:
}
  41dc88:	2000      	movs	r0, #0
  41dc8a:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_read_unsigned_bin%429:

0041dc8c <mp_read_unsigned_bin>:
{
  41dc8c:	b508      	push	{r3, lr}

0041dc8e <.LCFI57>:
  fp_read_unsigned_bin(a, b, c);
  41dc8e:	f7fd fce7 	bl	41b660 <fp_read_unsigned_bin>

0041dc92 <.LVL384>:
}
  41dc92:	2000      	movs	r0, #0
  41dc94:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_mul%430:

0041dc96 <mp_mul>:
{
  41dc96:	b508      	push	{r3, lr}

0041dc98 <.LCFI69>:
  fp_mul(a, b, c);
  41dc98:	f7ff fa38 	bl	41d10c <.LFE32>

0041dc9c <.LVL464>:
}
  41dc9c:	2000      	movs	r0, #0
  41dc9e:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_to_unsigned_bin%431:

0041dca0 <mp_to_unsigned_bin>:
{
  41dca0:	b508      	push	{r3, lr}

0041dca2 <.LCFI124>:
  fp_to_unsigned_bin(a,b);
  41dca2:	f7ff fb19 	bl	41d2d8 <.LFE59>

0041dca6 <.LVL823>:
}
  41dca6:	2000      	movs	r0, #0
  41dca8:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_copy%432:

0041dcaa <mp_copy>:
{
  41dcaa:	b508      	push	{r3, lr}

0041dcac <.LCFI125>:
    fp_copy(a, b);
  41dcac:	f7ff fbb0 	bl	41d410 <.LFE194>

0041dcb0 <.LVL825>:
}
  41dcb0:	2000      	movs	r0, #0
  41dcb2:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_iszero%433:

0041dcb4 <mp_iszero>:
    return fp_iszero(a);
  41dcb4:	6800      	ldr	r0, [r0, #0]

0041dcb6 <.LVL831>:
}
  41dcb6:	fab0 f080 	clz	r0, r0
  41dcba:	0940      	lsrs	r0, r0, #5
  41dcbc:	4770      	bx	lr

Disassembly of section .text.mp_montgomery_calc_normalization%434:

0041dcbe <mp_montgomery_calc_normalization>:
{
  41dcbe:	b508      	push	{r3, lr}

0041dcc0 <.LCFI137>:
    fp_montgomery_calc_normalization(a, b);
  41dcc0:	f7fc feb0 	bl	41aa24 <.LFE16>

0041dcc4 <.LVL855>:
}
  41dcc4:	2000      	movs	r0, #0
  41dcc6:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_sqr%435:

0041dcc8 <mp_sqr>:

/* fast math conversion */
int mp_sqr(fp_int *A, fp_int *B)
{
  41dcc8:	b508      	push	{r3, lr}

0041dcca <.LCFI143>:
    fp_sqr(A, B);
  41dcca:	f7ff fa77 	bl	41d1bc <.LFE1>

0041dcce <.LVL887>:
    return MP_OKAY;
}
  41dcce:	2000      	movs	r0, #0
  41dcd0:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_montgomery_reduce%436:

0041dcd2 <mp_montgomery_reduce>:

/* fast math conversion */
int mp_montgomery_reduce(fp_int *a, fp_int *m, fp_digit mp)
{
  41dcd2:	b508      	push	{r3, lr}

0041dcd4 <.LCFI144>:
    fp_montgomery_reduce(a, m, mp);
  41dcd4:	f7f8 f839 	bl	415d4a <.LFE39>

0041dcd8 <.LVL889>:
    return MP_OKAY;
}
  41dcd8:	2000      	movs	r0, #0
  41dcda:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_div_2%437:

0041dcdc <mp_div_2>:
{
    return fp_montgomery_setup(a, rho);
}

int mp_div_2(fp_int * a, fp_int * b)
{
  41dcdc:	b508      	push	{r3, lr}

0041dcde <.LCFI146>:
    fp_div_2(a, b);
  41dcde:	f7fc fc93 	bl	41a608 <.LFE3>

0041dce2 <.LVL893>:
    return MP_OKAY;
}
  41dce2:	2000      	movs	r0, #0
  41dce4:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_set%438:

0041dce6 <mp_set>:
#endif /* HAVE_ECC */

#if defined(HAVE_ECC) || !defined(NO_RSA) || !defined(NO_DSA)
/* fast math conversion */
int mp_set(fp_int *a, fp_digit b)
{
  41dce6:	b508      	push	{r3, lr}

0041dce8 <.LCFI148>:
    fp_set(a,b);
  41dce8:	f7ff fe38 	bl	41d95c <.LFE20>

0041dcec <.LVL897>:
    return MP_OKAY;
}
  41dcec:	2000      	movs	r0, #0
  41dcee:	bd08      	pop	{r3, pc}

Disassembly of section .text.get_digit_count%439:

0041dcf0 <get_digit_count>:
    if (a == NULL)
  41dcf0:	b108      	cbz	r0, 41dcf6 <.LVL2>
    return a->used;
  41dcf2:	6800      	ldr	r0, [r0, #0]

0041dcf4 <.LVL1>:
  41dcf4:	4770      	bx	lr

0041dcf6 <.LVL2>:
        return 0;
  41dcf6:	2000      	movs	r0, #0

0041dcf8 <.LVL3>:
}
  41dcf8:	4770      	bx	lr

Disassembly of section .text.zcfree%440:

0041dcfa <zcfree>:

void ZLIB_INTERNAL zcfree (opaque, ptr)
    voidpf opaque;
    voidpf ptr;
{
  41dcfa:	b508      	push	{r3, lr}

0041dcfc <.LCFI1>:
    free(ptr);
  41dcfc:	4608      	mov	r0, r1

0041dcfe <.LVL7>:
  41dcfe:	f7ff ff27 	bl	41db50 <.LFE0>

0041dd02 <.LVL8>:
  41dd02:	bd08      	pop	{r3, pc}

Disassembly of section .rodata%441:

0041dd04 <.LANCHOR0>:
  41dd04:	2e322e31 	.word	0x2e322e31
  41dd08:	0037      	.short	0x0037
  41dd0a:	bf00      	nop

Disassembly of section .rodata.ecc_oid_prime239v1%442:

0041dd0c <ecc_oid_prime239v1>:
  41dd0c:	862a ce48 033d 0401                         *.H.=...

Disassembly of section .rodata.ecc_oid_secp112r1%443:

0041dd14 <ecc_oid_secp112r1>:
  41dd14:	812b 0004 0006 bf00                         +.......

Disassembly of section .rodata.ecc_oid_secp128r1%444:

0041dd1c <ecc_oid_secp128r1>:
  41dd1c:	812b 0004 001c bf00                         +.......

Disassembly of section .rodata.ecc_oid_secp160r1%445:

0041dd24 <ecc_oid_secp160r1>:
  41dd24:	812b 0004 0008 bf00                         +.......

Disassembly of section .rodata.ecc_oid_secp192r1%446:

0041dd2c <ecc_oid_secp192r1>:
  41dd2c:	862a ce48 033d 0101                         *.H.=...

Disassembly of section .rodata.ecc_oid_secp224r1%447:

0041dd34 <ecc_oid_secp224r1>:
  41dd34:	812b 0004 0021 bf00                         +...!...

Disassembly of section .rodata.ecc_oid_secp256r1%448:

0041dd3c <ecc_oid_secp256r1>:
  41dd3c:	862a ce48 033d 0701                         *.H.=...

Disassembly of section .rodata.ecc_oid_secp384r1%449:

0041dd44 <ecc_oid_secp384r1>:
  41dd44:	812b 0004 0022 bf00                         +..."...

Disassembly of section .rodata.ecc_oid_secp521r1%450:

0041dd4c <ecc_oid_secp521r1>:
  41dd4c:	812b 0004 0023 bf00                         +...#...

Disassembly of section .text.mp_forcezero%451:

0041dd54 <mp_forcezero>:
{
  41dd54:	b508      	push	{r3, lr}

0041dd56 <.LCFI47>:
    fp_forcezero(a);
  41dd56:	f7ff fb90 	bl	41d47a <.LFE55>

0041dd5a <.LVL352>:
  41dd5a:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_cmp%452:

0041dd5c <mp_cmp>:
{
  41dd5c:	b508      	push	{r3, lr}

0041dd5e <.LCFI54>:
  return fp_cmp(a, b);
  41dd5e:	f7ff f8e0 	bl	41cf22 <.LFE9>

0041dd62 <.LVL378>:
}
  41dd62:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_cmp_d%453:

0041dd64 <mp_cmp_d>:
{
  41dd64:	b508      	push	{r3, lr}

0041dd66 <.LCFI55>:
  return fp_cmp_d(a, b);
  41dd66:	f7fe fa95 	bl	41c294 <.LFE0>

0041dd6a <.LVL380>:
}
  41dd6a:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_unsigned_bin_size%454:

0041dd6c <mp_unsigned_bin_size>:
{
  41dd6c:	b508      	push	{r3, lr}

0041dd6e <.LCFI56>:
  return fp_unsigned_bin_size(a);
  41dd6e:	f7ff fc6e 	bl	41d64e <.LFE17>

0041dd72 <.LVL382>:
}
  41dd72:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_invmod%455:

0041dd74 <mp_invmod>:
{
  41dd74:	b508      	push	{r3, lr}

0041dd76 <.LCFI97>:
  return fp_invmod(a, b, c);
  41dd76:	f7f1 fe73 	bl	40fa60 <fp_invmod>

0041dd7a <.LVL731>:
}
  41dd7a:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_mulmod%456:

0041dd7c <mp_mulmod>:
{
  41dd7c:	b508      	push	{r3, lr}

0041dd7e <.LCFI101>:
  return fp_mulmod(a, b, c, d);
  41dd7e:	f7ff f9ae 	bl	41d0de <.LFE200>

0041dd82 <.LVL739>:
}
  41dd82:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_mod%457:

0041dd84 <mp_mod>:
{
  41dd84:	b508      	push	{r3, lr}

0041dd86 <.LCFI114>:
  return fp_mod (a, b, c);
  41dd86:	f7fe fc68 	bl	41c65a <.LFE180>

0041dd8a <.LVL796>:
}
  41dd8a:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_exptmod%458:

0041dd8c <mp_exptmod>:
{
  41dd8c:	b508      	push	{r3, lr}

0041dd8e <.LCFI120>:
  return fp_exptmod(G, X, P, Y);
  41dd8e:	f7fd fe69 	bl	41ba64 <fp_exptmod>

0041dd92 <.LVL814>:
}
  41dd92:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_count_bits%459:

0041dd94 <mp_count_bits>:
{
  41dd94:	b508      	push	{r3, lr}

0041dd96 <.LCFI126>:
    return fp_count_bits(a);
  41dd96:	f7ff fcd8 	bl	41d74a <.LFE26>

0041dd9a <.LVL833>:
}
  41dd9a:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_leading_bit%460:

0041dd9c <mp_leading_bit>:
{
  41dd9c:	b508      	push	{r3, lr}

0041dd9e <.LCFI127>:
    return fp_leading_bit(a);
  41dd9e:	f7ff fb5b 	bl	41d458 <.LFE0>

0041dda2 <.LVL835>:
}
  41dda2:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_rshb%461:

0041dda4 <mp_rshb>:
{
  41dda4:	b508      	push	{r3, lr}

0041dda6 <.LCFI128>:
    fp_rshb(a, x);
  41dda6:	f7fd fbed 	bl	41b584 <.LFE203>

0041ddaa <.LVL837>:
  41ddaa:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_montgomery_setup%462:

0041ddac <mp_montgomery_setup>:
{
  41ddac:	b508      	push	{r3, lr}

0041ddae <.LCFI145>:
    return fp_montgomery_setup(a, rho);
  41ddae:	f7fe fd61 	bl	41c874 <.LFE188>

0041ddb2 <.LVL891>:
}
  41ddb2:	bd08      	pop	{r3, pc}

Disassembly of section .rodata.wc_off_on_addr%463:

0041ddb4 <wc_off_on_addr>:
  41ddb4:	0000 0000 ffff ffff                         ........

Disassembly of section .text._tr_flush_bits%464:

0041ddbc <_tr_flush_bits>:
{
  41ddbc:	b508      	push	{r3, lr}

0041ddbe <.LCFI22>:
    bi_flush(s);
  41ddbe:	f7fd ff13 	bl	41bbe8 <.LFE232>

0041ddc2 <.LVL305>:
  41ddc2:	bd08      	pop	{r3, pc}

Disassembly of section .text.TC0_CH0_TimerFrequencyGet%465:

0041ddc4 <TC0_CH0_TimerFrequencyGet>:
}
  41ddc4:	4800      	ldr	r0, [pc, #0]	; (41ddc8 <.LFE12+0x4>)
  41ddc6:	4770      	bx	lr
  41ddc8:	08f0d180 	.word	0x08f0d180

Disassembly of section .text%466:

004139ac <__aeabi_idiv0>:
  4139ac:	4770      	bx	lr

004139ae <L0>:
  4139ae:	bf00      	nop

Disassembly of section .rodata._global_impure_ptr%467:

00417dfc <_global_impure_ptr>:
  417dfc:	c858 2040                                   X.@ 

Disassembly of section .text.__malloc_lock%468:

00418ff4 <__malloc_lock>:
  418ff4:	4770      	bx	lr
  418ff6:	bf00      	nop

Disassembly of section .text.__malloc_unlock%469:

0041af14 <__malloc_unlock>:
  41af14:	4770      	bx	lr

0041af16 <.LFE1>:
  41af16:	bf00      	nop

Disassembly of section .text.Dummy_Handler%470:

004145f6 <Dummy_Handler>:

extern uint32_t _stack;

/* Brief default interrupt handler for unused IRQs.*/
void __attribute__((optimize("-O1"),section(".text.Dummy_Handler"),long_call))Dummy_Handler(void)
{
  4145f6:	e7fe      	b.n	4145f6 <Dummy_Handler>

Disassembly of section .text.NonMaskableInt_Handler%471:

00415396 <NonMaskableInt_Handler>:
// *****************************************************************************

/* Brief default interrupt handlers for core IRQs.*/

void NonMaskableInt_Handler(void)
{
  415396:	e7fe      	b.n	415396 <NonMaskableInt_Handler>

Disassembly of section .text.HardFault_Handler%472:

0041641a <HardFault_Handler>:
    {
    }
}

void HardFault_Handler(void)
{
  41641a:	e7fe      	b.n	41641a <HardFault_Handler>

Disassembly of section .text.DebugMonitor_Handler%473:

004168da <DebugMonitor_Handler>:
   {
   }
}

void DebugMonitor_Handler(void)
{
  4168da:	e7fe      	b.n	4168da <DebugMonitor_Handler>

Disassembly of section .text.MemoryManagement_Handler%474:

00416e8a <MemoryManagement_Handler>:
   {
   }
}

void MemoryManagement_Handler(void)
{
  416e8a:	e7fe      	b.n	416e8a <MemoryManagement_Handler>

Disassembly of section .text.BusFault_Handler%475:

004172ca <BusFault_Handler>:
   {
   }
}

void BusFault_Handler(void)
{
  4172ca:	e7fe      	b.n	4172ca <BusFault_Handler>

Disassembly of section .text.UsageFault_Handler%476:

00418d0a <UsageFault_Handler>:
   {
   }
}

void UsageFault_Handler(void)
{
  418d0a:	e7fe      	b.n	418d0a <UsageFault_Handler>
