
dist\sam_e70_xplained_ultra\production\encrypt_decrypt.X.production.elf:     file format elf32-littlearm


Disassembly of section .vectors:

00400000 <exception_table>:
  400000:	f0 ff 45 20 b9 ec 40 00 27 fa 40 00 7f 0c 41 00     ..E ..@.'.@...A.
  400010:	03 10 41 00 2b 16 41 00 1b 18 41 00 00 00 00 00     ..A.+.A...A.....
	...
  40002c:	3f d3 40 00 b7 0d 41 00 00 00 00 00 3f d3 40 00     ?.@...A.....?.@.
  40003c:	3f d3 40 00 3f d3 40 00 3f d3 40 00 3f d3 40 00     ?.@.?.@.?.@.?.@.
  40004c:	3f d3 40 00 3f d3 40 00 3f d3 40 00 3f d3 40 00     ?.@.?.@.?.@.?.@.
  40005c:	3f d3 40 00 3f d3 40 00 00 00 00 00 3f d3 40 00     ?.@.?.@.....?.@.
  40006c:	3f d3 40 00 3f d3 40 00 3f d3 40 00 71 ea 40 00     ?.@.?.@.?.@.q.@.
  40007c:	3f d3 40 00 3f d3 40 00 3f d3 40 00 3f d3 40 00     ?.@.?.@.?.@.?.@.
  40008c:	3f d3 40 00 3f d3 40 00 3f d3 40 00 3f d3 40 00     ?.@.?.@.?.@.?.@.
  40009c:	3f d3 40 00 3f d3 40 00 3f d3 40 00 49 29 41 00     ?.@.?.@.?.@.I)A.
  4000ac:	3f d3 40 00 3f d3 40 00 3f d3 40 00 3f d3 40 00     ?.@.?.@.?.@.?.@.
  4000bc:	3f d3 40 00 3f d3 40 00 3f d3 40 00 3f d3 40 00     ?.@.?.@.?.@.?.@.
  4000cc:	3f d3 40 00 3f d3 40 00 3f d3 40 00 3f d3 40 00     ?.@.?.@.?.@.?.@.
  4000dc:	3f d3 40 00 3f d3 40 00 3f d3 40 00 3f d3 40 00     ?.@.?.@.?.@.?.@.
  4000ec:	3f d3 40 00 3f d3 40 00 3f d3 40 00 3f d3 40 00     ?.@.?.@.?.@.?.@.
  4000fc:	3f d3 40 00 3f d3 40 00 3f d3 40 00 3f d3 40 00     ?.@.?.@.?.@.?.@.
  40010c:	3f d3 40 00 3f d3 40 00 00 00 00 00 00 00 00 00     ?.@.?.@.........
  40011c:	00 00 00 00 3f d3 40 00 3f d3 40 00 3f d3 40 00     ....?.@.?.@.?.@.
  40012c:	3f d3 40 00 3f d3 40 00 3f d3 40 00 3f d3 40 00     ?.@.?.@.?.@.?.@.
  40013c:	3f d3 40 00 3f d3 40 00 3f d3 40 00 3f d3 40 00     ?.@.?.@.?.@.?.@.
  40014c:	3f d3 40 00 3f d3 40 00 3f d3 40 00 3f d3 40 00     ?.@.?.@.?.@.?.@.
  40015c:	3f d3 40 00 3f d3 40 00 3f d3 40 00                 ?.@.?.@.?.@.

Disassembly of section .text:

00400168 <_init>:
  400168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40016a:	bf00      	nop
  40016c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40016e:	bc08      	pop	{r3}
  400170:	469e      	mov	lr, r3
  400172:	4770      	bx	lr

00400174 <__init_array_start>:
  400174:	00412da1 	.word	0x00412da1

00400178 <__frame_dummy_init_array_entry>:
  400178:	00411a7d                                }.A.

0040017c <_fini>:
  40017c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40017e:	bf00      	nop
  400180:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400182:	bc08      	pop	{r3}
  400184:	469e      	mov	lr, r3
  400186:	4770      	bx	lr

00400188 <__fini_array_start>:
  400188:	00411a59 	.word	0x00411a59

Disassembly of section .ARM.exidx:

0040018c <.ARM.exidx>:
  40018c:	0000c204 	.word	0x0000c204
  400190:	00000001 	.word	0x00000001

Disassembly of section .text._Transform%41:

00400194 <_Transform>:

#define R(i) h(i)+=S1(e(i))+Ch(e(i),f(i),g(i))+K[i+j]+(j?blk2(i):blk0(i));\
    d(i)+=h(i);h(i)+=S0(a(i))+Maj(a(i),b(i),c(i))

static int _Transform(Sha512* sha512)
{
  400194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00400198 <.LCFI0>:
  400198:	f2ad 7d94 	subw	sp, sp, #1940	; 0x794

0040019c <.LCFI1>:
  40019c:	f8cd 06cc 	str.w	r0, [sp, #1740]	; 0x6cc
#else
    word64 W[16];
#endif

    /* Copy digest to working vars */
    XMEMCPY(T, sha512->digest, sizeof(T));
  4001a0:	f100 0418 	add.w	r4, r0, #24
  4001a4:	f50d 66ea 	add.w	r6, sp, #1872	; 0x750
  4001a8:	f100 0758 	add.w	r7, r0, #88	; 0x58

004001ac <.LVL2>:
  4001ac:	4635      	mov	r5, r6
  4001ae:	6820      	ldr	r0, [r4, #0]
  4001b0:	6861      	ldr	r1, [r4, #4]
  4001b2:	68a2      	ldr	r2, [r4, #8]
  4001b4:	68e3      	ldr	r3, [r4, #12]
  4001b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  4001b8:	3410      	adds	r4, #16
  4001ba:	462e      	mov	r6, r5
  4001bc:	42bc      	cmp	r4, r7
  4001be:	d1f5      	bne.n	4001ac <.LVL2>

004001c0 <.LVL3>:
  4001c0:	f50d 63da 	add.w	r3, sp, #1744	; 0x6d0
  4001c4:	e9d3 3400 	ldrd	r3, r4, [r3]
  4001c8:	e9cd 341c 	strd	r3, r4, [sp, #112]	; 0x70
  4001cc:	f50d 63ed 	add.w	r3, sp, #1896	; 0x768
  4001d0:	e9d3 ab00 	ldrd	sl, fp, [r3]
  4001d4:	f50d 63ea 	add.w	r3, sp, #1872	; 0x750
  4001d8:	e9d3 3400 	ldrd	r3, r4, [r3]
  4001dc:	4625      	mov	r5, r4
  4001de:	461c      	mov	r4, r3
  4001e0:	f50d 63eb 	add.w	r3, sp, #1880	; 0x758
  4001e4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4001e8:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  4001ec:	f50d 63ec 	add.w	r3, sp, #1888	; 0x760
  4001f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4001f4:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8
  4001f8:	f50d 63f1 	add.w	r3, sp, #1928	; 0x788
  4001fc:	e9d3 2300 	ldrd	r2, r3, [r3]
  400200:	e9cd 2306 	strd	r2, r3, [sp, #24]
  400204:	f50d 63dc 	add.w	r3, sp, #1760	; 0x6e0
  400208:	e9d3 2300 	ldrd	r2, r3, [r3]
  40020c:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  400210:	f50d 63dd 	add.w	r3, sp, #1768	; 0x6e8
  400214:	e9d3 2300 	ldrd	r2, r3, [r3]
  400218:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  40021c:	f50d 63db 	add.w	r3, sp, #1752	; 0x6d8
  400220:	e9d3 2300 	ldrd	r2, r3, [r3]
  400224:	e9cd 2308 	strd	r2, r3, [sp, #32]
  400228:	f50d 63de 	add.w	r3, sp, #1776	; 0x6f0
  40022c:	e9d3 2300 	ldrd	r2, r3, [r3]
  400230:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
  400234:	f50d 63df 	add.w	r3, sp, #1784	; 0x6f8
  400238:	e9d3 2300 	ldrd	r2, r3, [r3]
  40023c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  400240:	f50d 63e0 	add.w	r3, sp, #1792	; 0x700
  400244:	e9d3 2300 	ldrd	r2, r3, [r3]
  400248:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  40024c:	f50d 63e1 	add.w	r3, sp, #1800	; 0x708
  400250:	e9d3 2300 	ldrd	r2, r3, [r3]
  400254:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  400258:	f50d 63e3 	add.w	r3, sp, #1816	; 0x718
  40025c:	e9d3 2300 	ldrd	r2, r3, [r3]
  400260:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  400264:	f50d 63f0 	add.w	r3, sp, #1920	; 0x780
  400268:	e9d3 2300 	ldrd	r2, r3, [r3]
  40026c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  400270:	f50d 63e2 	add.w	r3, sp, #1808	; 0x710
  400274:	e9d3 2300 	ldrd	r2, r3, [r3]
  400278:	e9cd 2300 	strd	r2, r3, [sp]
  40027c:	f50d 63e4 	add.w	r3, sp, #1824	; 0x720
  400280:	e9d3 2300 	ldrd	r2, r3, [r3]
  400284:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
  400288:	f50d 63ef 	add.w	r3, sp, #1912	; 0x778
  40028c:	e9d3 8900 	ldrd	r8, r9, [r3]
  400290:	f50d 63e5 	add.w	r3, sp, #1832	; 0x728
  400294:	e9d3 2300 	ldrd	r2, r3, [r3]
  400298:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  40029c:	f50d 63ee 	add.w	r3, sp, #1904	; 0x770
  4002a0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4002a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4002a8:	f50d 63e6 	add.w	r3, sp, #1840	; 0x730
  4002ac:	e9d3 2300 	ldrd	r2, r3, [r3]
  4002b0:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  4002b4:	f50d 63e7 	add.w	r3, sp, #1848	; 0x738
  4002b8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4002bc:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
  4002c0:	f50d 63e8 	add.w	r3, sp, #1856	; 0x740
  4002c4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4002c8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  4002cc:	f50d 63e9 	add.w	r3, sp, #1864	; 0x748
  4002d0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4002d4:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
  4002d8:	4b5a      	ldr	r3, [pc, #360]	; (400444 <.LBE365+0x4e>)
            R(m);
        }
    }
#else
    /* 80 operations, partially loop unrolled */
    for (j = 0; j < 80; j += 16) {
  4002da:	f04f 0c00 	mov.w	ip, #0
  4002de:	469e      	mov	lr, r3
  4002e0:	4667      	mov	r7, ip

004002e2 <.LVL4>:
  4002e2:	f8dd c6cc 	ldr.w	ip, [sp, #1740]	; 0x6cc

004002e6 <.LBB353>:
}


STATIC INLINE word64 rotrFixed64(word64 x, word64 y)
{
    return (x >> y) | (x << (sizeof(y) * 8 - y));
  4002e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4002ea:	0b83      	lsrs	r3, r0, #14
  4002ec:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  4002f0:	9370      	str	r3, [sp, #448]	; 0x1c0
  4002f2:	0b8b      	lsrs	r3, r1, #14
  4002f4:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
  4002f8:	9371      	str	r3, [sp, #452]	; 0x1c4

004002fa <.LBB355>:
  4002fa:	0c83      	lsrs	r3, r0, #18
  4002fc:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
  400300:	9372      	str	r3, [sp, #456]	; 0x1c8
  400302:	0c8b      	lsrs	r3, r1, #18
  400304:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
  400308:	9373      	str	r3, [sp, #460]	; 0x1cc

0040030a <.LBE355>:
        R( 0); R( 1); R( 2); R( 3);
  40030a:	ab70      	add	r3, sp, #448	; 0x1c0
  40030c:	e9d3 2300 	ldrd	r2, r3, [r3]
  400310:	a972      	add	r1, sp, #456	; 0x1c8
  400312:	e9d1 0100 	ldrd	r0, r1, [r1]
  400316:	4042      	eors	r2, r0
  400318:	404b      	eors	r3, r1
  40031a:	4610      	mov	r0, r2
  40031c:	4619      	mov	r1, r3

0040031e <.LBB357>:
  40031e:	9b03      	ldr	r3, [sp, #12]
  400320:	05db      	lsls	r3, r3, #23
  400322:	9a02      	ldr	r2, [sp, #8]
  400324:	ea43 2352 	orr.w	r3, r3, r2, lsr #9
  400328:	9375      	str	r3, [sp, #468]	; 0x1d4
  40032a:	05d3      	lsls	r3, r2, #23
  40032c:	9a03      	ldr	r2, [sp, #12]
  40032e:	ea43 2352 	orr.w	r3, r3, r2, lsr #9
  400332:	9374      	str	r3, [sp, #464]	; 0x1d0

00400334 <.LBE357>:
  400334:	ab74      	add	r3, sp, #464	; 0x1d0
  400336:	e9d3 2300 	ldrd	r2, r3, [r3]
  40033a:	4042      	eors	r2, r0
  40033c:	404b      	eors	r3, r1
  40033e:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  400342:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  400346:	ea82 0208 	eor.w	r2, r2, r8
  40034a:	ea83 0309 	eor.w	r3, r3, r9
  40034e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  400352:	4010      	ands	r0, r2
  400354:	4019      	ands	r1, r3
  400356:	4602      	mov	r2, r0
  400358:	460b      	mov	r3, r1
  40035a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40035e:	4050      	eors	r0, r2
  400360:	4059      	eors	r1, r3
  400362:	4602      	mov	r2, r0
  400364:	460b      	mov	r3, r1
  400366:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  40036a:	1880      	adds	r0, r0, r2
  40036c:	4159      	adcs	r1, r3
  40036e:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  400372:	4676      	mov	r6, lr
  400374:	e9de 2300 	ldrd	r2, r3, [lr]
  400378:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
  40037c:	2f00      	cmp	r7, #0
  40037e:	f002 8255 	beq.w	40282c <.LCFI3>

00400382 <.LBB359>:
  400382:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  400386:	0cc3      	lsrs	r3, r0, #19
  400388:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
  40038c:	9376      	str	r3, [sp, #472]	; 0x1d8
  40038e:	0ccb      	lsrs	r3, r1, #19
  400390:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
  400394:	9377      	str	r3, [sp, #476]	; 0x1dc

00400396 <.LBB361>:
  400396:	00cb      	lsls	r3, r1, #3
  400398:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
  40039c:	9379      	str	r3, [sp, #484]	; 0x1e4
  40039e:	00c3      	lsls	r3, r0, #3
  4003a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
  4003a4:	9378      	str	r3, [sp, #480]	; 0x1e0

004003a6 <.LBE361>:
  4003a6:	ab76      	add	r3, sp, #472	; 0x1d8
  4003a8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4003ac:	a978      	add	r1, sp, #480	; 0x1e0
  4003ae:	e9d1 0100 	ldrd	r0, r1, [r1]
  4003b2:	4042      	eors	r2, r0
  4003b4:	404b      	eors	r3, r1
  4003b6:	990c      	ldr	r1, [sp, #48]	; 0x30
  4003b8:	0989      	lsrs	r1, r1, #6
  4003ba:	980d      	ldr	r0, [sp, #52]	; 0x34
  4003bc:	ea41 6180 	orr.w	r1, r1, r0, lsl #26
  4003c0:	9130      	str	r1, [sp, #192]	; 0xc0
  4003c2:	0981      	lsrs	r1, r0, #6
  4003c4:	9131      	str	r1, [sp, #196]	; 0xc4
  4003c6:	e9dd 0130 	ldrd	r0, r1, [sp, #192]	; 0xc0
  4003ca:	4050      	eors	r0, r2
  4003cc:	4059      	eors	r1, r3
  4003ce:	e9cd 012e 	strd	r0, r1, [sp, #184]	; 0xb8

004003d2 <.LBB363>:
  4003d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  4003d6:	0851      	lsrs	r1, r2, #1
  4003d8:	ea41 71c3 	orr.w	r1, r1, r3, lsl #31
  4003dc:	917a      	str	r1, [sp, #488]	; 0x1e8
  4003de:	0859      	lsrs	r1, r3, #1
  4003e0:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
  4003e4:	917b      	str	r1, [sp, #492]	; 0x1ec

004003e6 <.LBB365>:
  4003e6:	0a11      	lsrs	r1, r2, #8
  4003e8:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
  4003ec:	917c      	str	r1, [sp, #496]	; 0x1f0
  4003ee:	0a19      	lsrs	r1, r3, #8
  4003f0:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
  4003f4:	917d      	str	r1, [sp, #500]	; 0x1f4

004003f6 <.LBE365>:
  4003f6:	ab7a      	add	r3, sp, #488	; 0x1e8
  4003f8:	e9d3 0100 	ldrd	r0, r1, [r3]
  4003fc:	ab7c      	add	r3, sp, #496	; 0x1f0
  4003fe:	e9d3 2300 	ldrd	r2, r3, [r3]
  400402:	4050      	eors	r0, r2
  400404:	4059      	eors	r1, r3
  400406:	9b08      	ldr	r3, [sp, #32]
  400408:	09db      	lsrs	r3, r3, #7
  40040a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40040c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
  400410:	9332      	str	r3, [sp, #200]	; 0xc8
  400412:	09d3      	lsrs	r3, r2, #7
  400414:	9333      	str	r3, [sp, #204]	; 0xcc
  400416:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
  40041a:	4042      	eors	r2, r0
  40041c:	404b      	eors	r3, r1
  40041e:	4610      	mov	r0, r2
  400420:	4619      	mov	r1, r3
  400422:	e9dd 232e 	ldrd	r2, r3, [sp, #184]	; 0xb8
  400426:	1812      	adds	r2, r2, r0
  400428:	414b      	adcs	r3, r1
  40042a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40042e:	1880      	adds	r0, r0, r2
  400430:	4159      	adcs	r1, r3
  400432:	4602      	mov	r2, r0
  400434:	460b      	mov	r3, r1
  400436:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
  40043a:	1880      	adds	r0, r0, r2
  40043c:	4159      	adcs	r1, r3
  40043e:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
  400442:	e001      	b.n	400448 <.LBE365+0x52>
  400444:	0040ce80 	.word	0x0040ce80
  400448:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  40044c:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
  400450:	1812      	adds	r2, r2, r0
  400452:	414b      	adcs	r3, r1
  400454:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
  400458:	1880      	adds	r0, r0, r2
  40045a:	4159      	adcs	r1, r3
  40045c:	4602      	mov	r2, r0
  40045e:	460b      	mov	r3, r1
  400460:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  400464:	1880      	adds	r0, r0, r2
  400466:	4159      	adcs	r1, r3
  400468:	4602      	mov	r2, r0
  40046a:	460b      	mov	r3, r1
  40046c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  400470:	eb10 020a 	adds.w	r2, r0, sl
  400474:	eb41 030b 	adc.w	r3, r1, fp
  400478:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0

0040047c <.LBB367>:
  40047c:	0f23      	lsrs	r3, r4, #28
  40047e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  400482:	937e      	str	r3, [sp, #504]	; 0x1f8
  400484:	0f2b      	lsrs	r3, r5, #28
  400486:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  40048a:	937f      	str	r3, [sp, #508]	; 0x1fc

0040048c <.LBB369>:
  40048c:	07ab      	lsls	r3, r5, #30
  40048e:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  400492:	9381      	str	r3, [sp, #516]	; 0x204
  400494:	07a3      	lsls	r3, r4, #30
  400496:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  40049a:	9380      	str	r3, [sp, #512]	; 0x200

0040049c <.LBE369>:
  40049c:	ab7e      	add	r3, sp, #504	; 0x1f8
  40049e:	e9d3 1200 	ldrd	r1, r2, [r3]
  4004a2:	ab80      	add	r3, sp, #512	; 0x200
  4004a4:	e9d3 ab00 	ldrd	sl, fp, [r3]
  4004a8:	ea81 010a 	eor.w	r1, r1, sl
  4004ac:	ea82 020b 	eor.w	r2, r2, fp
  4004b0:	4613      	mov	r3, r2
  4004b2:	460a      	mov	r2, r1

004004b4 <.LBB371>:
  4004b4:	0669      	lsls	r1, r5, #25
  4004b6:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  4004ba:	9183      	str	r1, [sp, #524]	; 0x20c
  4004bc:	0661      	lsls	r1, r4, #25
  4004be:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  4004c2:	9182      	str	r1, [sp, #520]	; 0x208

004004c4 <.LBE371>:
  4004c4:	a982      	add	r1, sp, #520	; 0x208
  4004c6:	e9d1 0100 	ldrd	r0, r1, [r1]
  4004ca:	4050      	eors	r0, r2
  4004cc:	4059      	eors	r1, r3
  4004ce:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  4004d2:	e9dd ab18 	ldrd	sl, fp, [sp, #96]	; 0x60
  4004d6:	4650      	mov	r0, sl
  4004d8:	4659      	mov	r1, fp
  4004da:	4320      	orrs	r0, r4
  4004dc:	4329      	orrs	r1, r5
  4004de:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  4004e2:	4002      	ands	r2, r0
  4004e4:	400b      	ands	r3, r1
  4004e6:	4650      	mov	r0, sl
  4004e8:	4659      	mov	r1, fp
  4004ea:	4020      	ands	r0, r4
  4004ec:	4029      	ands	r1, r5
  4004ee:	4310      	orrs	r0, r2
  4004f0:	4319      	orrs	r1, r3
  4004f2:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  4004f6:	1812      	adds	r2, r2, r0
  4004f8:	414b      	adcs	r3, r1
  4004fa:	4610      	mov	r0, r2
  4004fc:	4619      	mov	r1, r3
  4004fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  400502:	1812      	adds	r2, r2, r0
  400504:	414b      	adcs	r3, r1
  400506:	e9cd 2306 	strd	r2, r3, [sp, #24]

0040050a <.LBB373>:
  40050a:	e9dd ab2c 	ldrd	sl, fp, [sp, #176]	; 0xb0
  40050e:	4653      	mov	r3, sl
  400510:	0b9b      	lsrs	r3, r3, #14
  400512:	465a      	mov	r2, fp
  400514:	ea43 438b 	orr.w	r3, r3, fp, lsl #18
  400518:	9384      	str	r3, [sp, #528]	; 0x210
  40051a:	0b93      	lsrs	r3, r2, #14
  40051c:	4652      	mov	r2, sl
  40051e:	ea43 438a 	orr.w	r3, r3, sl, lsl #18
  400522:	9385      	str	r3, [sp, #532]	; 0x214

00400524 <.LBB375>:
  400524:	0c93      	lsrs	r3, r2, #18
  400526:	465a      	mov	r2, fp
  400528:	ea43 338b 	orr.w	r3, r3, fp, lsl #14
  40052c:	9386      	str	r3, [sp, #536]	; 0x218
  40052e:	0c93      	lsrs	r3, r2, #18
  400530:	ea43 338a 	orr.w	r3, r3, sl, lsl #14
  400534:	9387      	str	r3, [sp, #540]	; 0x21c

00400536 <.LBE375>:
  400536:	ab84      	add	r3, sp, #528	; 0x210
  400538:	e9d3 2300 	ldrd	r2, r3, [r3]
  40053c:	a986      	add	r1, sp, #536	; 0x218
  40053e:	e9d1 0100 	ldrd	r0, r1, [r1]
  400542:	4042      	eors	r2, r0
  400544:	404b      	eors	r3, r1

00400546 <.LBB377>:
  400546:	4659      	mov	r1, fp
  400548:	05c9      	lsls	r1, r1, #23
  40054a:	4650      	mov	r0, sl
  40054c:	ea41 215a 	orr.w	r1, r1, sl, lsr #9
  400550:	9189      	str	r1, [sp, #548]	; 0x224
  400552:	05c1      	lsls	r1, r0, #23
  400554:	ea41 215b 	orr.w	r1, r1, fp, lsr #9
  400558:	9188      	str	r1, [sp, #544]	; 0x220

0040055a <.LBE377>:
  40055a:	a988      	add	r1, sp, #544	; 0x220
  40055c:	e9d1 0100 	ldrd	r0, r1, [r1]
  400560:	4050      	eors	r0, r2
  400562:	4059      	eors	r1, r3
  400564:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  400568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40056c:	ea80 0008 	eor.w	r0, r0, r8
  400570:	ea81 0109 	eor.w	r1, r1, r9
  400574:	4652      	mov	r2, sl
  400576:	465b      	mov	r3, fp
  400578:	4002      	ands	r2, r0
  40057a:	400b      	ands	r3, r1
  40057c:	ea82 0a08 	eor.w	sl, r2, r8
  400580:	ea83 0b09 	eor.w	fp, r3, r9
  400584:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
  400588:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40058c:	1880      	adds	r0, r0, r2
  40058e:	4159      	adcs	r1, r3
  400590:	eb1a 0000 	adds.w	r0, sl, r0
  400594:	eb4b 0101 	adc.w	r1, fp, r1
  400598:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40059c:	2f00      	cmp	r7, #0
  40059e:	f002 814b 	beq.w	402838 <.LCFI3+0xc>

004005a2 <.LBB379>:
  4005a2:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
  4005a6:	0cc3      	lsrs	r3, r0, #19
  4005a8:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
  4005ac:	938a      	str	r3, [sp, #552]	; 0x228
  4005ae:	0ccb      	lsrs	r3, r1, #19
  4005b0:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
  4005b4:	938b      	str	r3, [sp, #556]	; 0x22c

004005b6 <.LBB381>:
  4005b6:	00cb      	lsls	r3, r1, #3
  4005b8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
  4005bc:	938d      	str	r3, [sp, #564]	; 0x234
  4005be:	00c3      	lsls	r3, r0, #3
  4005c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
  4005c4:	938c      	str	r3, [sp, #560]	; 0x230

004005c6 <.LBE381>:
  4005c6:	ab8a      	add	r3, sp, #552	; 0x228
  4005c8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4005cc:	f50d 7a0c 	add.w	sl, sp, #560	; 0x230
  4005d0:	e9da ab00 	ldrd	sl, fp, [sl]
  4005d4:	ea82 020a 	eor.w	r2, r2, sl
  4005d8:	ea83 030b 	eor.w	r3, r3, fp
  4005dc:	468b      	mov	fp, r1
  4005de:	0981      	lsrs	r1, r0, #6
  4005e0:	4658      	mov	r0, fp
  4005e2:	ea41 618b 	orr.w	r1, r1, fp, lsl #26
  4005e6:	9134      	str	r1, [sp, #208]	; 0xd0
  4005e8:	0981      	lsrs	r1, r0, #6
  4005ea:	9135      	str	r1, [sp, #212]	; 0xd4
  4005ec:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
  4005f0:	4050      	eors	r0, r2
  4005f2:	4059      	eors	r1, r3
  4005f4:	4602      	mov	r2, r0
  4005f6:	460b      	mov	r3, r1
  4005f8:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
  4005fc:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
  400600:	eb10 000a 	adds.w	r0, r0, sl
  400604:	eb41 010b 	adc.w	r1, r1, fp
  400608:	eb12 0a00 	adds.w	sl, r2, r0
  40060c:	eb43 0b01 	adc.w	fp, r3, r1
  400610:	e9cd ab08 	strd	sl, fp, [sp, #32]

00400614 <.LBB383>:
  400614:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
  400618:	0851      	lsrs	r1, r2, #1
  40061a:	ea41 71c3 	orr.w	r1, r1, r3, lsl #31
  40061e:	918e      	str	r1, [sp, #568]	; 0x238
  400620:	0859      	lsrs	r1, r3, #1
  400622:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
  400626:	918f      	str	r1, [sp, #572]	; 0x23c

00400628 <.LBB385>:
  400628:	0a11      	lsrs	r1, r2, #8
  40062a:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
  40062e:	9190      	str	r1, [sp, #576]	; 0x240
  400630:	0a19      	lsrs	r1, r3, #8
  400632:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
  400636:	9191      	str	r1, [sp, #580]	; 0x244

00400638 <.LBE385>:
  400638:	a98e      	add	r1, sp, #568	; 0x238
  40063a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40063e:	f50d 7a10 	add.w	sl, sp, #576	; 0x240
  400642:	e9da ab00 	ldrd	sl, fp, [sl]
  400646:	ea80 000a 	eor.w	r0, r0, sl
  40064a:	ea81 010b 	eor.w	r1, r1, fp
  40064e:	469b      	mov	fp, r3
  400650:	09d3      	lsrs	r3, r2, #7
  400652:	465a      	mov	r2, fp
  400654:	ea43 634b 	orr.w	r3, r3, fp, lsl #25
  400658:	9336      	str	r3, [sp, #216]	; 0xd8
  40065a:	09d3      	lsrs	r3, r2, #7
  40065c:	9337      	str	r3, [sp, #220]	; 0xdc
  40065e:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
  400662:	4042      	eors	r2, r0
  400664:	404b      	eors	r3, r1
  400666:	4610      	mov	r0, r2
  400668:	4619      	mov	r1, r3
  40066a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  40066e:	1812      	adds	r2, r2, r0
  400670:	414b      	adcs	r3, r1
  400672:	e9cd 2308 	strd	r2, r3, [sp, #32]
  400676:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  40067a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40067e:	1812      	adds	r2, r2, r0
  400680:	414b      	adcs	r3, r1
  400682:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  400686:	1880      	adds	r0, r0, r2
  400688:	4159      	adcs	r1, r3
  40068a:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  40068e:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  400692:	1812      	adds	r2, r2, r0
  400694:	414b      	adcs	r3, r1
  400696:	e9cd 2304 	strd	r2, r3, [sp, #16]

0040069a <.LBB387>:
  40069a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40069e:	0f03      	lsrs	r3, r0, #28
  4006a0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  4006a4:	9392      	str	r3, [sp, #584]	; 0x248
  4006a6:	0f0b      	lsrs	r3, r1, #28
  4006a8:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  4006ac:	9393      	str	r3, [sp, #588]	; 0x24c

004006ae <.LBB389>:
  4006ae:	078b      	lsls	r3, r1, #30
  4006b0:	ea43 0390 	orr.w	r3, r3, r0, lsr #2
  4006b4:	9395      	str	r3, [sp, #596]	; 0x254
  4006b6:	0783      	lsls	r3, r0, #30
  4006b8:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  4006bc:	9394      	str	r3, [sp, #592]	; 0x250

004006be <.LBE389>:
  4006be:	ab92      	add	r3, sp, #584	; 0x248
  4006c0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4006c4:	f50d 7a14 	add.w	sl, sp, #592	; 0x250
  4006c8:	e9da ab00 	ldrd	sl, fp, [sl]
  4006cc:	ea82 020a 	eor.w	r2, r2, sl
  4006d0:	ea83 030b 	eor.w	r3, r3, fp

004006d4 <.LBB391>:
  4006d4:	4682      	mov	sl, r0
  4006d6:	0649      	lsls	r1, r1, #25
  4006d8:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
  4006dc:	9197      	str	r1, [sp, #604]	; 0x25c
  4006de:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
  4006e2:	4651      	mov	r1, sl
  4006e4:	0649      	lsls	r1, r1, #25
  4006e6:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
  4006ea:	9196      	str	r1, [sp, #600]	; 0x258

004006ec <.LBE391>:
  4006ec:	a996      	add	r1, sp, #600	; 0x258
  4006ee:	e9d1 0100 	ldrd	r0, r1, [r1]
  4006f2:	4050      	eors	r0, r2
  4006f4:	4059      	eors	r1, r3
  4006f6:	e9cd 012a 	strd	r0, r1, [sp, #168]	; 0xa8
  4006fa:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
  4006fe:	4650      	mov	r0, sl
  400700:	4659      	mov	r1, fp
  400702:	4320      	orrs	r0, r4
  400704:	4329      	orrs	r1, r5
  400706:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  40070a:	4002      	ands	r2, r0
  40070c:	400b      	ands	r3, r1
  40070e:	4610      	mov	r0, r2
  400710:	4619      	mov	r1, r3
  400712:	4652      	mov	r2, sl
  400714:	465b      	mov	r3, fp
  400716:	4022      	ands	r2, r4
  400718:	402b      	ands	r3, r5
  40071a:	4302      	orrs	r2, r0
  40071c:	430b      	orrs	r3, r1
  40071e:	4610      	mov	r0, r2
  400720:	4619      	mov	r1, r3
  400722:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  400726:	1812      	adds	r2, r2, r0
  400728:	414b      	adcs	r3, r1
  40072a:	4610      	mov	r0, r2
  40072c:	4619      	mov	r1, r3
  40072e:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  400732:	1812      	adds	r2, r2, r0
  400734:	414b      	adcs	r3, r1
  400736:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8

0040073a <.LBB393>:
  40073a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40073e:	0b83      	lsrs	r3, r0, #14
  400740:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  400744:	9398      	str	r3, [sp, #608]	; 0x260
  400746:	0b8b      	lsrs	r3, r1, #14
  400748:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
  40074c:	9399      	str	r3, [sp, #612]	; 0x264

0040074e <.LBB395>:
  40074e:	0c83      	lsrs	r3, r0, #18
  400750:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
  400754:	939a      	str	r3, [sp, #616]	; 0x268
  400756:	0c8b      	lsrs	r3, r1, #18
  400758:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
  40075c:	939b      	str	r3, [sp, #620]	; 0x26c

0040075e <.LBE395>:
  40075e:	ab98      	add	r3, sp, #608	; 0x260
  400760:	e9d3 2300 	ldrd	r2, r3, [r3]
  400764:	f50d 7a1a 	add.w	sl, sp, #616	; 0x268
  400768:	e9da ab00 	ldrd	sl, fp, [sl]
  40076c:	ea82 020a 	eor.w	r2, r2, sl
  400770:	ea83 030b 	eor.w	r3, r3, fp

00400774 <.LBB397>:
  400774:	4682      	mov	sl, r0
  400776:	468b      	mov	fp, r1
  400778:	05c9      	lsls	r1, r1, #23
  40077a:	4650      	mov	r0, sl
  40077c:	ea41 215a 	orr.w	r1, r1, sl, lsr #9
  400780:	919d      	str	r1, [sp, #628]	; 0x274
  400782:	05c1      	lsls	r1, r0, #23
  400784:	ea41 215b 	orr.w	r1, r1, fp, lsr #9
  400788:	919c      	str	r1, [sp, #624]	; 0x270

0040078a <.LBE397>:
  40078a:	a99c      	add	r1, sp, #624	; 0x270
  40078c:	e9d1 0100 	ldrd	r0, r1, [r1]
  400790:	4050      	eors	r0, r2
  400792:	4059      	eors	r1, r3
  400794:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  400798:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  40079c:	4650      	mov	r0, sl
  40079e:	4659      	mov	r1, fp
  4007a0:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
  4007a4:	4042      	eors	r2, r0
  4007a6:	404b      	eors	r3, r1
  4007a8:	4610      	mov	r0, r2
  4007aa:	4619      	mov	r1, r3
  4007ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4007b0:	4002      	ands	r2, r0
  4007b2:	400b      	ands	r3, r1
  4007b4:	4610      	mov	r0, r2
  4007b6:	4619      	mov	r1, r3
  4007b8:	4652      	mov	r2, sl
  4007ba:	465b      	mov	r3, fp
  4007bc:	4042      	eors	r2, r0
  4007be:	404b      	eors	r3, r1
  4007c0:	4610      	mov	r0, r2
  4007c2:	4619      	mov	r1, r3
  4007c4:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
  4007c8:	eb18 0802 	adds.w	r8, r8, r2
  4007cc:	eb49 0903 	adc.w	r9, r9, r3
  4007d0:	eb18 0800 	adds.w	r8, r8, r0
  4007d4:	eb49 0901 	adc.w	r9, r9, r1
  4007d8:	2f00      	cmp	r7, #0
  4007da:	f002 8033 	beq.w	402844 <.LCFI3+0x18>

004007de <.LBB399>:
  4007de:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  4007e2:	0843      	lsrs	r3, r0, #1
  4007e4:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
  4007e8:	939e      	str	r3, [sp, #632]	; 0x278
  4007ea:	084b      	lsrs	r3, r1, #1
  4007ec:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
  4007f0:	939f      	str	r3, [sp, #636]	; 0x27c

004007f2 <.LBB401>:
  4007f2:	0a03      	lsrs	r3, r0, #8
  4007f4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  4007f8:	93a0      	str	r3, [sp, #640]	; 0x280
  4007fa:	0a0b      	lsrs	r3, r1, #8
  4007fc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  400800:	93a1      	str	r3, [sp, #644]	; 0x284

00400802 <.LBE401>:
  400802:	ab9e      	add	r3, sp, #632	; 0x278
  400804:	e9d3 2300 	ldrd	r2, r3, [r3]
  400808:	f50d 7a20 	add.w	sl, sp, #640	; 0x280
  40080c:	e9da ab00 	ldrd	sl, fp, [sl]
  400810:	ea82 020a 	eor.w	r2, r2, sl
  400814:	ea83 030b 	eor.w	r3, r3, fp
  400818:	468b      	mov	fp, r1
  40081a:	09c1      	lsrs	r1, r0, #7
  40081c:	4658      	mov	r0, fp
  40081e:	ea41 614b 	orr.w	r1, r1, fp, lsl #25
  400822:	9138      	str	r1, [sp, #224]	; 0xe0
  400824:	09c1      	lsrs	r1, r0, #7
  400826:	9139      	str	r1, [sp, #228]	; 0xe4
  400828:	e9dd 0138 	ldrd	r0, r1, [sp, #224]	; 0xe0
  40082c:	4050      	eors	r0, r2
  40082e:	4059      	eors	r1, r3
  400830:	4602      	mov	r2, r0
  400832:	460b      	mov	r3, r1
  400834:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
  400838:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
  40083c:	eb10 000a 	adds.w	r0, r0, sl
  400840:	eb41 010b 	adc.w	r1, r1, fp
  400844:	eb12 0a00 	adds.w	sl, r2, r0
  400848:	eb43 0b01 	adc.w	fp, r3, r1
  40084c:	e9cd ab1e 	strd	sl, fp, [sp, #120]	; 0x78

00400850 <.LBB403>:
  400850:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
  400854:	0cd1      	lsrs	r1, r2, #19
  400856:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
  40085a:	91a2      	str	r1, [sp, #648]	; 0x288
  40085c:	0cd9      	lsrs	r1, r3, #19
  40085e:	ea41 3142 	orr.w	r1, r1, r2, lsl #13
  400862:	91a3      	str	r1, [sp, #652]	; 0x28c

00400864 <.LBB405>:
  400864:	00d9      	lsls	r1, r3, #3
  400866:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
  40086a:	91a5      	str	r1, [sp, #660]	; 0x294
  40086c:	00d1      	lsls	r1, r2, #3
  40086e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
  400872:	91a4      	str	r1, [sp, #656]	; 0x290

00400874 <.LBE405>:
  400874:	a9a2      	add	r1, sp, #648	; 0x288
  400876:	e9d1 0100 	ldrd	r0, r1, [r1]
  40087a:	f50d 7a24 	add.w	sl, sp, #656	; 0x290
  40087e:	e9da ab00 	ldrd	sl, fp, [sl]
  400882:	ea80 000a 	eor.w	r0, r0, sl
  400886:	ea81 010b 	eor.w	r1, r1, fp
  40088a:	469b      	mov	fp, r3
  40088c:	0993      	lsrs	r3, r2, #6
  40088e:	465a      	mov	r2, fp
  400890:	ea43 638b 	orr.w	r3, r3, fp, lsl #26
  400894:	933a      	str	r3, [sp, #232]	; 0xe8
  400896:	0993      	lsrs	r3, r2, #6
  400898:	933b      	str	r3, [sp, #236]	; 0xec
  40089a:	e9dd 233a 	ldrd	r2, r3, [sp, #232]	; 0xe8
  40089e:	4042      	eors	r2, r0
  4008a0:	404b      	eors	r3, r1
  4008a2:	4610      	mov	r0, r2
  4008a4:	4619      	mov	r1, r3
  4008a6:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
  4008aa:	1812      	adds	r2, r2, r0
  4008ac:	414b      	adcs	r3, r1
  4008ae:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  4008b2:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  4008b6:	eb12 0208 	adds.w	r2, r2, r8
  4008ba:	eb43 0309 	adc.w	r3, r3, r9
  4008be:	4690      	mov	r8, r2
  4008c0:	4699      	mov	r9, r3
  4008c2:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
  4008c6:	eb12 0208 	adds.w	r2, r2, r8
  4008ca:	eb43 0309 	adc.w	r3, r3, r9
  4008ce:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
  4008d2:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  4008d6:	eb18 0802 	adds.w	r8, r8, r2
  4008da:	eb49 0903 	adc.w	r9, r9, r3
  4008de:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60

004008e2 <.LBB407>:
  4008e2:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
  4008e6:	0f03      	lsrs	r3, r0, #28
  4008e8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  4008ec:	93a6      	str	r3, [sp, #664]	; 0x298
  4008ee:	0f0b      	lsrs	r3, r1, #28
  4008f0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  4008f4:	93a7      	str	r3, [sp, #668]	; 0x29c

004008f6 <.LBB409>:
  4008f6:	078b      	lsls	r3, r1, #30
  4008f8:	ea43 0390 	orr.w	r3, r3, r0, lsr #2
  4008fc:	93a9      	str	r3, [sp, #676]	; 0x2a4
  4008fe:	0783      	lsls	r3, r0, #30
  400900:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  400904:	93a8      	str	r3, [sp, #672]	; 0x2a0

00400906 <.LBE409>:
  400906:	aba6      	add	r3, sp, #664	; 0x298
  400908:	e9d3 2300 	ldrd	r2, r3, [r3]
  40090c:	f50d 7828 	add.w	r8, sp, #672	; 0x2a0
  400910:	e9d8 ab00 	ldrd	sl, fp, [r8]
  400914:	ea82 020a 	eor.w	r2, r2, sl
  400918:	ea83 030b 	eor.w	r3, r3, fp

0040091c <.LBB411>:
  40091c:	4680      	mov	r8, r0
  40091e:	4689      	mov	r9, r1
  400920:	0649      	lsls	r1, r1, #25
  400922:	4640      	mov	r0, r8
  400924:	ea41 11d8 	orr.w	r1, r1, r8, lsr #7
  400928:	91ab      	str	r1, [sp, #684]	; 0x2ac
  40092a:	0641      	lsls	r1, r0, #25
  40092c:	ea41 11d9 	orr.w	r1, r1, r9, lsr #7
  400930:	91aa      	str	r1, [sp, #680]	; 0x2a8

00400932 <.LBE411>:
  400932:	a9aa      	add	r1, sp, #680	; 0x2a8
  400934:	e9d1 0100 	ldrd	r0, r1, [r1]
  400938:	4050      	eors	r0, r2
  40093a:	4059      	eors	r1, r3
  40093c:	e9cd 012e 	strd	r0, r1, [sp, #184]	; 0xb8
  400940:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
  400944:	4652      	mov	r2, sl
  400946:	465b      	mov	r3, fp
  400948:	4640      	mov	r0, r8
  40094a:	4649      	mov	r1, r9
  40094c:	4302      	orrs	r2, r0
  40094e:	430b      	orrs	r3, r1
  400950:	4022      	ands	r2, r4
  400952:	402b      	ands	r3, r5
  400954:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
  400958:	e9c1 2300 	strd	r2, r3, [r1]
  40095c:	4650      	mov	r0, sl
  40095e:	4659      	mov	r1, fp
  400960:	4642      	mov	r2, r8
  400962:	464b      	mov	r3, r9
  400964:	4010      	ands	r0, r2
  400966:	4019      	ands	r1, r3
  400968:	f50d 63d8 	add.w	r3, sp, #1728	; 0x6c0
  40096c:	e9d3 9a00 	ldrd	r9, sl, [r3]
  400970:	ea49 0900 	orr.w	r9, r9, r0
  400974:	ea4a 0a01 	orr.w	sl, sl, r1
  400978:	e9dd 232e 	ldrd	r2, r3, [sp, #184]	; 0xb8
  40097c:	eb12 0209 	adds.w	r2, r2, r9
  400980:	eb43 030a 	adc.w	r3, r3, sl
  400984:	4610      	mov	r0, r2
  400986:	4619      	mov	r1, r3
  400988:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  40098c:	1812      	adds	r2, r2, r0
  40098e:	414b      	adcs	r3, r1
  400990:	e9cd 232e 	strd	r2, r3, [sp, #184]	; 0xb8

00400994 <.LBB413>:
  400994:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
  400998:	4643      	mov	r3, r8
  40099a:	0b9b      	lsrs	r3, r3, #14
  40099c:	464a      	mov	r2, r9
  40099e:	ea43 4389 	orr.w	r3, r3, r9, lsl #18
  4009a2:	93ac      	str	r3, [sp, #688]	; 0x2b0
  4009a4:	0b93      	lsrs	r3, r2, #14
  4009a6:	4642      	mov	r2, r8
  4009a8:	ea43 4388 	orr.w	r3, r3, r8, lsl #18
  4009ac:	93ad      	str	r3, [sp, #692]	; 0x2b4

004009ae <.LBB415>:
  4009ae:	0c93      	lsrs	r3, r2, #18
  4009b0:	464a      	mov	r2, r9
  4009b2:	ea43 3389 	orr.w	r3, r3, r9, lsl #14
  4009b6:	93ae      	str	r3, [sp, #696]	; 0x2b8
  4009b8:	0c93      	lsrs	r3, r2, #18
  4009ba:	ea43 3388 	orr.w	r3, r3, r8, lsl #14
  4009be:	93af      	str	r3, [sp, #700]	; 0x2bc

004009c0 <.LBE415>:
  4009c0:	abac      	add	r3, sp, #688	; 0x2b0
  4009c2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4009c6:	a9ae      	add	r1, sp, #696	; 0x2b8
  4009c8:	e9d1 0100 	ldrd	r0, r1, [r1]
  4009cc:	4042      	eors	r2, r0
  4009ce:	404b      	eors	r3, r1

004009d0 <.LBB417>:
  4009d0:	4649      	mov	r1, r9
  4009d2:	05c9      	lsls	r1, r1, #23
  4009d4:	4640      	mov	r0, r8
  4009d6:	ea41 2158 	orr.w	r1, r1, r8, lsr #9
  4009da:	91b1      	str	r1, [sp, #708]	; 0x2c4
  4009dc:	05c1      	lsls	r1, r0, #23
  4009de:	ea41 2159 	orr.w	r1, r1, r9, lsr #9
  4009e2:	91b0      	str	r1, [sp, #704]	; 0x2c0

004009e4 <.LBE417>:
  4009e4:	a9b0      	add	r1, sp, #704	; 0x2c0
  4009e6:	e9d1 0100 	ldrd	r0, r1, [r1]
  4009ea:	4050      	eors	r0, r2
  4009ec:	4059      	eors	r1, r3
  4009ee:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  4009f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4009f6:	e9dd ab2c 	ldrd	sl, fp, [sp, #176]	; 0xb0
  4009fa:	4652      	mov	r2, sl
  4009fc:	465b      	mov	r3, fp
  4009fe:	4042      	eors	r2, r0
  400a00:	404b      	eors	r3, r1
  400a02:	4610      	mov	r0, r2
  400a04:	4619      	mov	r1, r3
  400a06:	4642      	mov	r2, r8
  400a08:	464b      	mov	r3, r9
  400a0a:	4002      	ands	r2, r0
  400a0c:	400b      	ands	r3, r1
  400a0e:	ea8a 0802 	eor.w	r8, sl, r2
  400a12:	ea8b 0903 	eor.w	r9, fp, r3
  400a16:	e9d6 2306 	ldrd	r2, r3, [r6, #24]
  400a1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  400a1e:	1880      	adds	r0, r0, r2
  400a20:	4159      	adcs	r1, r3
  400a22:	eb18 0000 	adds.w	r0, r8, r0
  400a26:	eb49 0101 	adc.w	r1, r9, r1
  400a2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400a2e:	2f00      	cmp	r7, #0
  400a30:	f001 870e 	beq.w	402850 <.LCFI3+0x24>

00400a34 <.LBB419>:
  400a34:	e9dd 8922 	ldrd	r8, r9, [sp, #136]	; 0x88
  400a38:	4643      	mov	r3, r8
  400a3a:	085b      	lsrs	r3, r3, #1
  400a3c:	464a      	mov	r2, r9
  400a3e:	ea43 73c9 	orr.w	r3, r3, r9, lsl #31
  400a42:	93b2      	str	r3, [sp, #712]	; 0x2c8
  400a44:	0853      	lsrs	r3, r2, #1
  400a46:	4642      	mov	r2, r8
  400a48:	ea43 73c8 	orr.w	r3, r3, r8, lsl #31
  400a4c:	93b3      	str	r3, [sp, #716]	; 0x2cc

00400a4e <.LBB421>:
  400a4e:	0a13      	lsrs	r3, r2, #8
  400a50:	464a      	mov	r2, r9
  400a52:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
  400a56:	93b4      	str	r3, [sp, #720]	; 0x2d0
  400a58:	0a13      	lsrs	r3, r2, #8
  400a5a:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
  400a5e:	93b5      	str	r3, [sp, #724]	; 0x2d4

00400a60 <.LBE421>:
  400a60:	abb2      	add	r3, sp, #712	; 0x2c8
  400a62:	e9d3 2300 	ldrd	r2, r3, [r3]
  400a66:	a9b4      	add	r1, sp, #720	; 0x2d0
  400a68:	e9d1 ab00 	ldrd	sl, fp, [r1]
  400a6c:	ea82 020a 	eor.w	r2, r2, sl
  400a70:	ea83 030b 	eor.w	r3, r3, fp
  400a74:	4641      	mov	r1, r8
  400a76:	09c9      	lsrs	r1, r1, #7
  400a78:	4648      	mov	r0, r9
  400a7a:	ea41 6149 	orr.w	r1, r1, r9, lsl #25
  400a7e:	913c      	str	r1, [sp, #240]	; 0xf0
  400a80:	09c1      	lsrs	r1, r0, #7
  400a82:	913d      	str	r1, [sp, #244]	; 0xf4
  400a84:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
  400a88:	4050      	eors	r0, r2
  400a8a:	4059      	eors	r1, r3
  400a8c:	4602      	mov	r2, r0
  400a8e:	460b      	mov	r3, r1
  400a90:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  400a94:	e9dd ab16 	ldrd	sl, fp, [sp, #88]	; 0x58
  400a98:	eb10 000a 	adds.w	r0, r0, sl
  400a9c:	eb41 010b 	adc.w	r1, r1, fp
  400aa0:	eb12 0800 	adds.w	r8, r2, r0
  400aa4:	eb43 0901 	adc.w	r9, r3, r1
  400aa8:	e9cd 8920 	strd	r8, r9, [sp, #128]	; 0x80

00400aac <.LBB423>:
  400aac:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  400ab0:	4641      	mov	r1, r8
  400ab2:	0cc9      	lsrs	r1, r1, #19
  400ab4:	4648      	mov	r0, r9
  400ab6:	ea41 3149 	orr.w	r1, r1, r9, lsl #13
  400aba:	91b6      	str	r1, [sp, #728]	; 0x2d8
  400abc:	0cc1      	lsrs	r1, r0, #19
  400abe:	4640      	mov	r0, r8
  400ac0:	ea41 3148 	orr.w	r1, r1, r8, lsl #13
  400ac4:	91b7      	str	r1, [sp, #732]	; 0x2dc

00400ac6 <.LBB425>:
  400ac6:	4649      	mov	r1, r9
  400ac8:	00c9      	lsls	r1, r1, #3
  400aca:	ea41 7158 	orr.w	r1, r1, r8, lsr #29
  400ace:	91b9      	str	r1, [sp, #740]	; 0x2e4
  400ad0:	00c1      	lsls	r1, r0, #3
  400ad2:	ea41 7159 	orr.w	r1, r1, r9, lsr #29
  400ad6:	91b8      	str	r1, [sp, #736]	; 0x2e0

00400ad8 <.LBE425>:
  400ad8:	abb6      	add	r3, sp, #728	; 0x2d8
  400ada:	e9d3 0100 	ldrd	r0, r1, [r3]
  400ade:	abb8      	add	r3, sp, #736	; 0x2e0
  400ae0:	e9d3 ab00 	ldrd	sl, fp, [r3]
  400ae4:	ea80 000a 	eor.w	r0, r0, sl
  400ae8:	ea81 010b 	eor.w	r1, r1, fp
  400aec:	4643      	mov	r3, r8
  400aee:	099b      	lsrs	r3, r3, #6
  400af0:	464a      	mov	r2, r9
  400af2:	ea43 6389 	orr.w	r3, r3, r9, lsl #26
  400af6:	933e      	str	r3, [sp, #248]	; 0xf8
  400af8:	0993      	lsrs	r3, r2, #6
  400afa:	933f      	str	r3, [sp, #252]	; 0xfc
  400afc:	e9dd 233e 	ldrd	r2, r3, [sp, #248]	; 0xf8
  400b00:	4042      	eors	r2, r0
  400b02:	404b      	eors	r3, r1
  400b04:	4610      	mov	r0, r2
  400b06:	4619      	mov	r1, r3
  400b08:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
  400b0c:	1812      	adds	r2, r2, r0
  400b0e:	414b      	adcs	r3, r1
  400b10:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  400b14:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  400b18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  400b1c:	1812      	adds	r2, r2, r0
  400b1e:	414b      	adcs	r3, r1
  400b20:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  400b24:	1880      	adds	r0, r0, r2
  400b26:	4159      	adcs	r1, r3
  400b28:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400b2c:	1902      	adds	r2, r0, r4
  400b2e:	eb41 0305 	adc.w	r3, r1, r5
  400b32:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68

00400b36 <.LBB427>:
  400b36:	e9dd 452e 	ldrd	r4, r5, [sp, #184]	; 0xb8
  400b3a:	0f23      	lsrs	r3, r4, #28
  400b3c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  400b40:	93ba      	str	r3, [sp, #744]	; 0x2e8
  400b42:	0f2b      	lsrs	r3, r5, #28
  400b44:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  400b48:	93bb      	str	r3, [sp, #748]	; 0x2ec

00400b4a <.LBB429>:
  400b4a:	07ab      	lsls	r3, r5, #30
  400b4c:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  400b50:	93bd      	str	r3, [sp, #756]	; 0x2f4
  400b52:	07a3      	lsls	r3, r4, #30
  400b54:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  400b58:	93bc      	str	r3, [sp, #752]	; 0x2f0

00400b5a <.LBE429>:
  400b5a:	abba      	add	r3, sp, #744	; 0x2e8
  400b5c:	e9d3 1200 	ldrd	r1, r2, [r3]
  400b60:	abbc      	add	r3, sp, #752	; 0x2f0
  400b62:	e9d3 ab00 	ldrd	sl, fp, [r3]
  400b66:	ea81 010a 	eor.w	r1, r1, sl
  400b6a:	ea82 020b 	eor.w	r2, r2, fp
  400b6e:	4613      	mov	r3, r2
  400b70:	460a      	mov	r2, r1

00400b72 <.LBB431>:
  400b72:	0669      	lsls	r1, r5, #25
  400b74:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  400b78:	91bf      	str	r1, [sp, #764]	; 0x2fc
  400b7a:	0661      	lsls	r1, r4, #25
  400b7c:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  400b80:	91be      	str	r1, [sp, #760]	; 0x2f8

00400b82 <.LBE431>:
  400b82:	a9be      	add	r1, sp, #760	; 0x2f8
  400b84:	e9d1 0100 	ldrd	r0, r1, [r1]
  400b88:	4050      	eors	r0, r2
  400b8a:	4059      	eors	r1, r3
  400b8c:	f50d 63d8 	add.w	r3, sp, #1728	; 0x6c0
  400b90:	e9c3 0100 	strd	r0, r1, [r3]
  400b94:	e9dd ab2a 	ldrd	sl, fp, [sp, #168]	; 0xa8
  400b98:	4650      	mov	r0, sl
  400b9a:	4659      	mov	r1, fp
  400b9c:	46a0      	mov	r8, r4
  400b9e:	4320      	orrs	r0, r4
  400ba0:	4329      	orrs	r1, r5
  400ba2:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
  400ba6:	4003      	ands	r3, r0
  400ba8:	400c      	ands	r4, r1
  400baa:	4618      	mov	r0, r3
  400bac:	4621      	mov	r1, r4
  400bae:	4652      	mov	r2, sl
  400bb0:	465b      	mov	r3, fp
  400bb2:	4644      	mov	r4, r8
  400bb4:	4022      	ands	r2, r4
  400bb6:	402b      	ands	r3, r5
  400bb8:	4310      	orrs	r0, r2
  400bba:	4319      	orrs	r1, r3
  400bbc:	f50d 63d8 	add.w	r3, sp, #1728	; 0x6c0
  400bc0:	e9d3 3400 	ldrd	r3, r4, [r3]
  400bc4:	181b      	adds	r3, r3, r0
  400bc6:	414c      	adcs	r4, r1
  400bc8:	4621      	mov	r1, r4
  400bca:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  400bce:	18e4      	adds	r4, r4, r3
  400bd0:	414d      	adcs	r5, r1

00400bd2 <.LBB433>:
  400bd2:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  400bd6:	0b83      	lsrs	r3, r0, #14
  400bd8:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  400bdc:	93c0      	str	r3, [sp, #768]	; 0x300
  400bde:	0b8b      	lsrs	r3, r1, #14
  400be0:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
  400be4:	93c1      	str	r3, [sp, #772]	; 0x304

00400be6 <.LBB435>:
  400be6:	0c83      	lsrs	r3, r0, #18
  400be8:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
  400bec:	93c2      	str	r3, [sp, #776]	; 0x308
  400bee:	0c8b      	lsrs	r3, r1, #18
  400bf0:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
  400bf4:	93c3      	str	r3, [sp, #780]	; 0x30c

00400bf6 <.LBE435>:
        R( 4); R( 5); R( 6); R( 7);
  400bf6:	abc0      	add	r3, sp, #768	; 0x300
  400bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
  400bfc:	f50d 7842 	add.w	r8, sp, #776	; 0x308
  400c00:	e9d8 ab00 	ldrd	sl, fp, [r8]
  400c04:	ea82 020a 	eor.w	r2, r2, sl
  400c08:	ea83 030b 	eor.w	r3, r3, fp

00400c0c <.LBB437>:
  400c0c:	4682      	mov	sl, r0
  400c0e:	468b      	mov	fp, r1
  400c10:	05c9      	lsls	r1, r1, #23
  400c12:	4650      	mov	r0, sl
  400c14:	ea41 215a 	orr.w	r1, r1, sl, lsr #9
  400c18:	91c5      	str	r1, [sp, #788]	; 0x314
  400c1a:	05c1      	lsls	r1, r0, #23
  400c1c:	ea41 215b 	orr.w	r1, r1, fp, lsr #9
  400c20:	91c4      	str	r1, [sp, #784]	; 0x310

00400c22 <.LBE437>:
  400c22:	a9c4      	add	r1, sp, #784	; 0x310
  400c24:	e9d1 0100 	ldrd	r0, r1, [r1]
  400c28:	4050      	eors	r0, r2
  400c2a:	4059      	eors	r1, r3
  400c2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400c30:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
  400c34:	4640      	mov	r0, r8
  400c36:	4649      	mov	r1, r9
  400c38:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  400c3c:	4042      	eors	r2, r0
  400c3e:	404b      	eors	r3, r1
  400c40:	4610      	mov	r0, r2
  400c42:	4619      	mov	r1, r3
  400c44:	4652      	mov	r2, sl
  400c46:	465b      	mov	r3, fp
  400c48:	4002      	ands	r2, r0
  400c4a:	400b      	ands	r3, r1
  400c4c:	4610      	mov	r0, r2
  400c4e:	4619      	mov	r1, r3
  400c50:	4642      	mov	r2, r8
  400c52:	464b      	mov	r3, r9
  400c54:	4042      	eors	r2, r0
  400c56:	404b      	eors	r3, r1
  400c58:	4610      	mov	r0, r2
  400c5a:	4619      	mov	r1, r3
  400c5c:	e9d6 2308 	ldrd	r2, r3, [r6, #32]
  400c60:	e9dd ab2c 	ldrd	sl, fp, [sp, #176]	; 0xb0
  400c64:	eb1a 0a02 	adds.w	sl, sl, r2
  400c68:	eb4b 0b03 	adc.w	fp, fp, r3
  400c6c:	eb1a 0200 	adds.w	r2, sl, r0
  400c70:	eb4b 0301 	adc.w	r3, fp, r1
  400c74:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
  400c78:	2f00      	cmp	r7, #0
  400c7a:	f001 85ef 	beq.w	40285c <.LCFI3+0x30>

00400c7e <.LBB439>:
  400c7e:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
  400c82:	4643      	mov	r3, r8
  400c84:	085b      	lsrs	r3, r3, #1
  400c86:	464a      	mov	r2, r9
  400c88:	ea43 73c9 	orr.w	r3, r3, r9, lsl #31
  400c8c:	93c6      	str	r3, [sp, #792]	; 0x318
  400c8e:	0853      	lsrs	r3, r2, #1
  400c90:	4642      	mov	r2, r8
  400c92:	ea43 73c8 	orr.w	r3, r3, r8, lsl #31
  400c96:	93c7      	str	r3, [sp, #796]	; 0x31c

00400c98 <.LBB441>:
  400c98:	0a13      	lsrs	r3, r2, #8
  400c9a:	464a      	mov	r2, r9
  400c9c:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
  400ca0:	93c8      	str	r3, [sp, #800]	; 0x320
  400ca2:	0a13      	lsrs	r3, r2, #8
  400ca4:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
  400ca8:	93c9      	str	r3, [sp, #804]	; 0x324

00400caa <.LBE441>:
  400caa:	abc6      	add	r3, sp, #792	; 0x318
  400cac:	e9d3 2300 	ldrd	r2, r3, [r3]
  400cb0:	a9c8      	add	r1, sp, #800	; 0x320
  400cb2:	e9d1 ab00 	ldrd	sl, fp, [r1]
  400cb6:	ea82 020a 	eor.w	r2, r2, sl
  400cba:	ea83 030b 	eor.w	r3, r3, fp
  400cbe:	4641      	mov	r1, r8
  400cc0:	09c9      	lsrs	r1, r1, #7
  400cc2:	4648      	mov	r0, r9
  400cc4:	ea41 6149 	orr.w	r1, r1, r9, lsl #25
  400cc8:	9140      	str	r1, [sp, #256]	; 0x100
  400cca:	09c1      	lsrs	r1, r0, #7
  400ccc:	9141      	str	r1, [sp, #260]	; 0x104
  400cce:	a940      	add	r1, sp, #256	; 0x100
  400cd0:	e9d1 0100 	ldrd	r0, r1, [r1]
  400cd4:	4050      	eors	r0, r2
  400cd6:	4059      	eors	r1, r3
  400cd8:	4602      	mov	r2, r0
  400cda:	460b      	mov	r3, r1
  400cdc:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
  400ce0:	e9dd ab26 	ldrd	sl, fp, [sp, #152]	; 0x98
  400ce4:	eb10 000a 	adds.w	r0, r0, sl
  400ce8:	eb41 010b 	adc.w	r1, r1, fp
  400cec:	eb12 0800 	adds.w	r8, r2, r0
  400cf0:	eb43 0901 	adc.w	r9, r3, r1
  400cf4:	e9cd 8922 	strd	r8, r9, [sp, #136]	; 0x88

00400cf8 <.LBB443>:
  400cf8:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
  400cfc:	4641      	mov	r1, r8
  400cfe:	0cc9      	lsrs	r1, r1, #19
  400d00:	4648      	mov	r0, r9
  400d02:	ea41 3149 	orr.w	r1, r1, r9, lsl #13
  400d06:	91ca      	str	r1, [sp, #808]	; 0x328
  400d08:	0cc1      	lsrs	r1, r0, #19
  400d0a:	4640      	mov	r0, r8
  400d0c:	ea41 3148 	orr.w	r1, r1, r8, lsl #13
  400d10:	91cb      	str	r1, [sp, #812]	; 0x32c

00400d12 <.LBB445>:
  400d12:	4649      	mov	r1, r9
  400d14:	00c9      	lsls	r1, r1, #3
  400d16:	ea41 7158 	orr.w	r1, r1, r8, lsr #29
  400d1a:	91cd      	str	r1, [sp, #820]	; 0x334
  400d1c:	00c1      	lsls	r1, r0, #3
  400d1e:	ea41 7159 	orr.w	r1, r1, r9, lsr #29
  400d22:	91cc      	str	r1, [sp, #816]	; 0x330

00400d24 <.LBE445>:
  400d24:	abca      	add	r3, sp, #808	; 0x328
  400d26:	e9d3 0100 	ldrd	r0, r1, [r3]
  400d2a:	abcc      	add	r3, sp, #816	; 0x330
  400d2c:	e9d3 ab00 	ldrd	sl, fp, [r3]
  400d30:	ea80 000a 	eor.w	r0, r0, sl
  400d34:	ea81 010b 	eor.w	r1, r1, fp
  400d38:	4643      	mov	r3, r8
  400d3a:	099b      	lsrs	r3, r3, #6
  400d3c:	464a      	mov	r2, r9
  400d3e:	ea43 6389 	orr.w	r3, r3, r9, lsl #26
  400d42:	9342      	str	r3, [sp, #264]	; 0x108
  400d44:	0993      	lsrs	r3, r2, #6
  400d46:	9343      	str	r3, [sp, #268]	; 0x10c
  400d48:	ab42      	add	r3, sp, #264	; 0x108
  400d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
  400d4e:	4042      	eors	r2, r0
  400d50:	404b      	eors	r3, r1
  400d52:	4610      	mov	r0, r2
  400d54:	4619      	mov	r1, r3
  400d56:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
  400d5a:	1812      	adds	r2, r2, r0
  400d5c:	414b      	adcs	r3, r1
  400d5e:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
  400d62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  400d66:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
  400d6a:	1880      	adds	r0, r0, r2
  400d6c:	4159      	adcs	r1, r3
  400d6e:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
  400d72:	1812      	adds	r2, r2, r0
  400d74:	414b      	adcs	r3, r1
  400d76:	4690      	mov	r8, r2
  400d78:	4699      	mov	r9, r3
  400d7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  400d7e:	eb12 0208 	adds.w	r2, r2, r8
  400d82:	eb43 0309 	adc.w	r3, r3, r9
  400d86:	e9cd 2306 	strd	r2, r3, [sp, #24]

00400d8a <.LBB447>:
  400d8a:	0f23      	lsrs	r3, r4, #28
  400d8c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  400d90:	93ce      	str	r3, [sp, #824]	; 0x338
  400d92:	0f2b      	lsrs	r3, r5, #28
  400d94:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  400d98:	93cf      	str	r3, [sp, #828]	; 0x33c

00400d9a <.LBB449>:
  400d9a:	07ab      	lsls	r3, r5, #30
  400d9c:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  400da0:	93d1      	str	r3, [sp, #836]	; 0x344
  400da2:	07a3      	lsls	r3, r4, #30
  400da4:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  400da8:	93d0      	str	r3, [sp, #832]	; 0x340

00400daa <.LBE449>:
  400daa:	abce      	add	r3, sp, #824	; 0x338
  400dac:	e9d3 2300 	ldrd	r2, r3, [r3]
  400db0:	a9d0      	add	r1, sp, #832	; 0x340
  400db2:	e9d1 ab00 	ldrd	sl, fp, [r1]
  400db6:	ea82 020a 	eor.w	r2, r2, sl
  400dba:	ea83 030b 	eor.w	r3, r3, fp

00400dbe <.LBB451>:
  400dbe:	0669      	lsls	r1, r5, #25
  400dc0:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  400dc4:	91d3      	str	r1, [sp, #844]	; 0x34c
  400dc6:	0661      	lsls	r1, r4, #25
  400dc8:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  400dcc:	91d2      	str	r1, [sp, #840]	; 0x348

00400dce <.LBE451>:
  400dce:	a9d2      	add	r1, sp, #840	; 0x348
  400dd0:	e9d1 ab00 	ldrd	sl, fp, [r1]
  400dd4:	ea8a 0a02 	eor.w	sl, sl, r2
  400dd8:	ea8b 0b03 	eor.w	fp, fp, r3
  400ddc:	e9cd ab02 	strd	sl, fp, [sp, #8]
  400de0:	e9dd ab2e 	ldrd	sl, fp, [sp, #184]	; 0xb8
  400de4:	4650      	mov	r0, sl
  400de6:	4659      	mov	r1, fp
  400de8:	4320      	orrs	r0, r4
  400dea:	4329      	orrs	r1, r5
  400dec:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  400df0:	4002      	ands	r2, r0
  400df2:	400b      	ands	r3, r1
  400df4:	ea0a 0a04 	and.w	sl, sl, r4
  400df8:	ea0b 0b05 	and.w	fp, fp, r5
  400dfc:	ea4a 0a02 	orr.w	sl, sl, r2
  400e00:	ea4b 0b03 	orr.w	fp, fp, r3
  400e04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  400e08:	eb12 020a 	adds.w	r2, r2, sl
  400e0c:	eb43 030b 	adc.w	r3, r3, fp
  400e10:	eb18 0a02 	adds.w	sl, r8, r2
  400e14:	eb49 0b03 	adc.w	fp, r9, r3

00400e18 <.LBB453>:
  400e18:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  400e1c:	4643      	mov	r3, r8
  400e1e:	0b9b      	lsrs	r3, r3, #14
  400e20:	464a      	mov	r2, r9
  400e22:	ea43 4389 	orr.w	r3, r3, r9, lsl #18
  400e26:	93d4      	str	r3, [sp, #848]	; 0x350
  400e28:	0b93      	lsrs	r3, r2, #14
  400e2a:	4642      	mov	r2, r8
  400e2c:	ea43 4388 	orr.w	r3, r3, r8, lsl #18
  400e30:	93d5      	str	r3, [sp, #852]	; 0x354

00400e32 <.LBB455>:
  400e32:	0c93      	lsrs	r3, r2, #18
  400e34:	464a      	mov	r2, r9
  400e36:	ea43 3389 	orr.w	r3, r3, r9, lsl #14
  400e3a:	93d6      	str	r3, [sp, #856]	; 0x358
  400e3c:	0c93      	lsrs	r3, r2, #18
  400e3e:	ea43 3388 	orr.w	r3, r3, r8, lsl #14
  400e42:	93d7      	str	r3, [sp, #860]	; 0x35c

00400e44 <.LBE455>:
  400e44:	abd4      	add	r3, sp, #848	; 0x350
  400e46:	e9d3 2300 	ldrd	r2, r3, [r3]
  400e4a:	a9d6      	add	r1, sp, #856	; 0x358
  400e4c:	e9d1 0100 	ldrd	r0, r1, [r1]
  400e50:	4042      	eors	r2, r0
  400e52:	404b      	eors	r3, r1

00400e54 <.LBB457>:
  400e54:	4649      	mov	r1, r9
  400e56:	05c9      	lsls	r1, r1, #23
  400e58:	4640      	mov	r0, r8
  400e5a:	ea41 2158 	orr.w	r1, r1, r8, lsr #9
  400e5e:	91d9      	str	r1, [sp, #868]	; 0x364
  400e60:	05c1      	lsls	r1, r0, #23
  400e62:	ea41 2159 	orr.w	r1, r1, r9, lsr #9
  400e66:	91d8      	str	r1, [sp, #864]	; 0x360

00400e68 <.LBE457>:
  400e68:	a9d8      	add	r1, sp, #864	; 0x360
  400e6a:	e9d1 0100 	ldrd	r0, r1, [r1]
  400e6e:	4050      	eors	r0, r2
  400e70:	4059      	eors	r1, r3
  400e72:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400e76:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  400e7a:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  400e7e:	4042      	eors	r2, r0
  400e80:	404b      	eors	r3, r1
  400e82:	4610      	mov	r0, r2
  400e84:	4619      	mov	r1, r3
  400e86:	4642      	mov	r2, r8
  400e88:	464b      	mov	r3, r9
  400e8a:	4002      	ands	r2, r0
  400e8c:	400b      	ands	r3, r1
  400e8e:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
  400e92:	ea88 0802 	eor.w	r8, r8, r2
  400e96:	ea89 0903 	eor.w	r9, r9, r3
  400e9a:	e9d6 230a 	ldrd	r2, r3, [r6, #40]	; 0x28
  400e9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  400ea2:	1880      	adds	r0, r0, r2
  400ea4:	4159      	adcs	r1, r3
  400ea6:	eb18 0000 	adds.w	r0, r8, r0
  400eaa:	eb49 0101 	adc.w	r1, r9, r1
  400eae:	e9cd 0104 	strd	r0, r1, [sp, #16]
  400eb2:	2f00      	cmp	r7, #0
  400eb4:	f001 84d8 	beq.w	402868 <.LCFI3+0x3c>

00400eb8 <.LBB459>:
  400eb8:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
  400ebc:	4643      	mov	r3, r8
  400ebe:	085b      	lsrs	r3, r3, #1
  400ec0:	464a      	mov	r2, r9
  400ec2:	ea43 73c9 	orr.w	r3, r3, r9, lsl #31
  400ec6:	93da      	str	r3, [sp, #872]	; 0x368
  400ec8:	0853      	lsrs	r3, r2, #1
  400eca:	4642      	mov	r2, r8
  400ecc:	ea43 73c8 	orr.w	r3, r3, r8, lsl #31
  400ed0:	93db      	str	r3, [sp, #876]	; 0x36c

00400ed2 <.LBB461>:
  400ed2:	0a13      	lsrs	r3, r2, #8
  400ed4:	464a      	mov	r2, r9
  400ed6:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
  400eda:	93dc      	str	r3, [sp, #880]	; 0x370
  400edc:	0a13      	lsrs	r3, r2, #8
  400ede:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
  400ee2:	93dd      	str	r3, [sp, #884]	; 0x374

00400ee4 <.LBE461>:
  400ee4:	abda      	add	r3, sp, #872	; 0x368
  400ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
  400eea:	a9dc      	add	r1, sp, #880	; 0x370
  400eec:	e9d1 0100 	ldrd	r0, r1, [r1]
  400ef0:	4042      	eors	r2, r0
  400ef2:	404b      	eors	r3, r1
  400ef4:	4641      	mov	r1, r8
  400ef6:	09c9      	lsrs	r1, r1, #7
  400ef8:	4648      	mov	r0, r9
  400efa:	ea41 6149 	orr.w	r1, r1, r9, lsl #25
  400efe:	9144      	str	r1, [sp, #272]	; 0x110
  400f00:	09c1      	lsrs	r1, r0, #7
  400f02:	9145      	str	r1, [sp, #276]	; 0x114
  400f04:	a944      	add	r1, sp, #272	; 0x110
  400f06:	e9d1 0100 	ldrd	r0, r1, [r1]
  400f0a:	4050      	eors	r0, r2
  400f0c:	4059      	eors	r1, r3
  400f0e:	4680      	mov	r8, r0
  400f10:	4689      	mov	r9, r1
  400f12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  400f16:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  400f1a:	1880      	adds	r0, r0, r2
  400f1c:	4159      	adcs	r1, r3
  400f1e:	eb18 0200 	adds.w	r2, r8, r0
  400f22:	eb49 0301 	adc.w	r3, r9, r1
  400f26:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28

00400f2a <.LBB463>:
  400f2a:	e9dd 8920 	ldrd	r8, r9, [sp, #128]	; 0x80
  400f2e:	4641      	mov	r1, r8
  400f30:	0cc9      	lsrs	r1, r1, #19
  400f32:	4648      	mov	r0, r9
  400f34:	ea41 3149 	orr.w	r1, r1, r9, lsl #13
  400f38:	91de      	str	r1, [sp, #888]	; 0x378
  400f3a:	0cc1      	lsrs	r1, r0, #19
  400f3c:	4640      	mov	r0, r8
  400f3e:	ea41 3148 	orr.w	r1, r1, r8, lsl #13
  400f42:	91df      	str	r1, [sp, #892]	; 0x37c

00400f44 <.LBB465>:
  400f44:	4649      	mov	r1, r9
  400f46:	00c9      	lsls	r1, r1, #3
  400f48:	ea41 7158 	orr.w	r1, r1, r8, lsr #29
  400f4c:	91e1      	str	r1, [sp, #900]	; 0x384
  400f4e:	00c1      	lsls	r1, r0, #3
  400f50:	ea41 7159 	orr.w	r1, r1, r9, lsr #29
  400f54:	91e0      	str	r1, [sp, #896]	; 0x380

00400f56 <.LBE465>:
  400f56:	abde      	add	r3, sp, #888	; 0x378
  400f58:	e9d3 0100 	ldrd	r0, r1, [r3]
  400f5c:	abe0      	add	r3, sp, #896	; 0x380
  400f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
  400f62:	4050      	eors	r0, r2
  400f64:	4059      	eors	r1, r3
  400f66:	4643      	mov	r3, r8
  400f68:	099b      	lsrs	r3, r3, #6
  400f6a:	464a      	mov	r2, r9
  400f6c:	ea43 6389 	orr.w	r3, r3, r9, lsl #26
  400f70:	9346      	str	r3, [sp, #280]	; 0x118
  400f72:	0993      	lsrs	r3, r2, #6
  400f74:	9347      	str	r3, [sp, #284]	; 0x11c
  400f76:	ab46      	add	r3, sp, #280	; 0x118
  400f78:	e9d3 2300 	ldrd	r2, r3, [r3]
  400f7c:	4042      	eors	r2, r0
  400f7e:	404b      	eors	r3, r1
  400f80:	4610      	mov	r0, r2
  400f82:	4619      	mov	r1, r3
  400f84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  400f88:	1812      	adds	r2, r2, r0
  400f8a:	414b      	adcs	r3, r1
  400f8c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  400f90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  400f94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  400f98:	1812      	adds	r2, r2, r0
  400f9a:	414b      	adcs	r3, r1
  400f9c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  400fa0:	1880      	adds	r0, r0, r2
  400fa2:	4159      	adcs	r1, r3
  400fa4:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  400fa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400fac:	1812      	adds	r2, r2, r0
  400fae:	414b      	adcs	r3, r1
  400fb0:	e9cd 2304 	strd	r2, r3, [sp, #16]

00400fb4 <.LBB467>:
  400fb4:	ea4f 731a 	mov.w	r3, sl, lsr #28
  400fb8:	ea43 130b 	orr.w	r3, r3, fp, lsl #4
  400fbc:	93e2      	str	r3, [sp, #904]	; 0x388
  400fbe:	ea4f 731b 	mov.w	r3, fp, lsr #28
  400fc2:	ea43 130a 	orr.w	r3, r3, sl, lsl #4
  400fc6:	93e3      	str	r3, [sp, #908]	; 0x38c

00400fc8 <.LBB469>:
  400fc8:	ea4f 738b 	mov.w	r3, fp, lsl #30
  400fcc:	ea43 039a 	orr.w	r3, r3, sl, lsr #2
  400fd0:	93e5      	str	r3, [sp, #916]	; 0x394
  400fd2:	ea4f 738a 	mov.w	r3, sl, lsl #30
  400fd6:	ea43 039b 	orr.w	r3, r3, fp, lsr #2
  400fda:	93e4      	str	r3, [sp, #912]	; 0x390

00400fdc <.LBE469>:
  400fdc:	abe2      	add	r3, sp, #904	; 0x388
  400fde:	e9d3 1200 	ldrd	r1, r2, [r3]
  400fe2:	abe4      	add	r3, sp, #912	; 0x390
  400fe4:	e9d3 8900 	ldrd	r8, r9, [r3]
  400fe8:	ea81 0108 	eor.w	r1, r1, r8
  400fec:	ea82 0209 	eor.w	r2, r2, r9
  400ff0:	4613      	mov	r3, r2
  400ff2:	460a      	mov	r2, r1

00400ff4 <.LBB471>:
  400ff4:	ea4f 614b 	mov.w	r1, fp, lsl #25
  400ff8:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
  400ffc:	91e7      	str	r1, [sp, #924]	; 0x39c
  400ffe:	ea4f 614a 	mov.w	r1, sl, lsl #25
  401002:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
  401006:	91e6      	str	r1, [sp, #920]	; 0x398

00401008 <.LBE471>:
  401008:	a9e6      	add	r1, sp, #920	; 0x398
  40100a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40100e:	4050      	eors	r0, r2
  401010:	4059      	eors	r1, r3
  401012:	4680      	mov	r8, r0
  401014:	4689      	mov	r9, r1
  401016:	ea44 000a 	orr.w	r0, r4, sl
  40101a:	ea45 010b 	orr.w	r1, r5, fp
  40101e:	e9dd 232e 	ldrd	r2, r3, [sp, #184]	; 0xb8
  401022:	4002      	ands	r2, r0
  401024:	400b      	ands	r3, r1
  401026:	4610      	mov	r0, r2
  401028:	4619      	mov	r1, r3
  40102a:	ea04 020a 	and.w	r2, r4, sl
  40102e:	ea05 030b 	and.w	r3, r5, fp
  401032:	4302      	orrs	r2, r0
  401034:	430b      	orrs	r3, r1
  401036:	eb12 0008 	adds.w	r0, r2, r8
  40103a:	eb43 0109 	adc.w	r1, r3, r9
  40103e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401042:	1812      	adds	r2, r2, r0
  401044:	414b      	adcs	r3, r1
  401046:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8

0040104a <.LBB473>:
  40104a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40104e:	0b83      	lsrs	r3, r0, #14
  401050:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  401054:	93e8      	str	r3, [sp, #928]	; 0x3a0
  401056:	0b8b      	lsrs	r3, r1, #14
  401058:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
  40105c:	93e9      	str	r3, [sp, #932]	; 0x3a4

0040105e <.LBB475>:
  40105e:	0c83      	lsrs	r3, r0, #18
  401060:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
  401064:	93ea      	str	r3, [sp, #936]	; 0x3a8
  401066:	0c8b      	lsrs	r3, r1, #18
  401068:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
  40106c:	93eb      	str	r3, [sp, #940]	; 0x3ac

0040106e <.LBE475>:
  40106e:	abe8      	add	r3, sp, #928	; 0x3a0
  401070:	e9d3 2300 	ldrd	r2, r3, [r3]
  401074:	f50d 786a 	add.w	r8, sp, #936	; 0x3a8
  401078:	e9d8 8900 	ldrd	r8, r9, [r8]
  40107c:	ea82 0208 	eor.w	r2, r2, r8
  401080:	ea83 0309 	eor.w	r3, r3, r9

00401084 <.LBB477>:
  401084:	4680      	mov	r8, r0
  401086:	4689      	mov	r9, r1
  401088:	05c9      	lsls	r1, r1, #23
  40108a:	4640      	mov	r0, r8
  40108c:	ea41 2158 	orr.w	r1, r1, r8, lsr #9
  401090:	91ed      	str	r1, [sp, #948]	; 0x3b4
  401092:	05c1      	lsls	r1, r0, #23
  401094:	ea41 2159 	orr.w	r1, r1, r9, lsr #9
  401098:	91ec      	str	r1, [sp, #944]	; 0x3b0

0040109a <.LBE477>:
  40109a:	a9ec      	add	r1, sp, #944	; 0x3b0
  40109c:	e9d1 0100 	ldrd	r0, r1, [r1]
  4010a0:	4050      	eors	r0, r2
  4010a2:	4059      	eors	r1, r3
  4010a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4010a8:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  4010ac:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  4010b0:	ea80 0008 	eor.w	r0, r0, r8
  4010b4:	ea81 0109 	eor.w	r1, r1, r9
  4010b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4010bc:	4002      	ands	r2, r0
  4010be:	400b      	ands	r3, r1
  4010c0:	4610      	mov	r0, r2
  4010c2:	4619      	mov	r1, r3
  4010c4:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  4010c8:	4042      	eors	r2, r0
  4010ca:	404b      	eors	r3, r1
  4010cc:	4610      	mov	r0, r2
  4010ce:	4619      	mov	r1, r3
  4010d0:	e9d6 230c 	ldrd	r2, r3, [r6, #48]	; 0x30
  4010d4:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
  4010d8:	eb18 0802 	adds.w	r8, r8, r2
  4010dc:	eb49 0903 	adc.w	r9, r9, r3
  4010e0:	eb18 0200 	adds.w	r2, r8, r0
  4010e4:	eb49 0301 	adc.w	r3, r9, r1
  4010e8:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  4010ec:	2f00      	cmp	r7, #0
  4010ee:	f001 83c1 	beq.w	402874 <.LCFI3+0x48>

004010f2 <.LBB479>:
  4010f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4010f6:	0843      	lsrs	r3, r0, #1
  4010f8:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
  4010fc:	93ee      	str	r3, [sp, #952]	; 0x3b8
  4010fe:	084b      	lsrs	r3, r1, #1
  401100:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
  401104:	93ef      	str	r3, [sp, #956]	; 0x3bc

00401106 <.LBB481>:
  401106:	0a03      	lsrs	r3, r0, #8
  401108:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  40110c:	93f0      	str	r3, [sp, #960]	; 0x3c0
  40110e:	0a0b      	lsrs	r3, r1, #8
  401110:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  401114:	93f1      	str	r3, [sp, #964]	; 0x3c4

00401116 <.LBE481>:
  401116:	abee      	add	r3, sp, #952	; 0x3b8
  401118:	e9d3 2300 	ldrd	r2, r3, [r3]
  40111c:	f50d 7870 	add.w	r8, sp, #960	; 0x3c0
  401120:	e9d8 8900 	ldrd	r8, r9, [r8]
  401124:	ea82 0208 	eor.w	r2, r2, r8
  401128:	ea83 0309 	eor.w	r3, r3, r9
  40112c:	4689      	mov	r9, r1
  40112e:	09c1      	lsrs	r1, r0, #7
  401130:	4648      	mov	r0, r9
  401132:	ea41 6149 	orr.w	r1, r1, r9, lsl #25
  401136:	9148      	str	r1, [sp, #288]	; 0x120
  401138:	09c1      	lsrs	r1, r0, #7
  40113a:	9149      	str	r1, [sp, #292]	; 0x124
  40113c:	a948      	add	r1, sp, #288	; 0x120
  40113e:	e9d1 0100 	ldrd	r0, r1, [r1]
  401142:	4050      	eors	r0, r2
  401144:	4059      	eors	r1, r3
  401146:	4602      	mov	r2, r0
  401148:	460b      	mov	r3, r1
  40114a:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
  40114e:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
  401152:	eb10 0008 	adds.w	r0, r0, r8
  401156:	eb41 0109 	adc.w	r1, r1, r9
  40115a:	eb12 0800 	adds.w	r8, r2, r0
  40115e:	eb43 0901 	adc.w	r9, r3, r1
  401162:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38

00401166 <.LBB483>:
  401166:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
  40116a:	0cd1      	lsrs	r1, r2, #19
  40116c:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
  401170:	91f2      	str	r1, [sp, #968]	; 0x3c8
  401172:	0cd9      	lsrs	r1, r3, #19
  401174:	ea41 3142 	orr.w	r1, r1, r2, lsl #13
  401178:	91f3      	str	r1, [sp, #972]	; 0x3cc

0040117a <.LBB485>:
  40117a:	00d9      	lsls	r1, r3, #3
  40117c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
  401180:	91f5      	str	r1, [sp, #980]	; 0x3d4
  401182:	00d1      	lsls	r1, r2, #3
  401184:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
  401188:	91f4      	str	r1, [sp, #976]	; 0x3d0

0040118a <.LBE485>:
  40118a:	a9f2      	add	r1, sp, #968	; 0x3c8
  40118c:	e9d1 0100 	ldrd	r0, r1, [r1]
  401190:	f50d 7874 	add.w	r8, sp, #976	; 0x3d0
  401194:	e9d8 8900 	ldrd	r8, r9, [r8]
  401198:	ea80 0008 	eor.w	r0, r0, r8
  40119c:	ea81 0109 	eor.w	r1, r1, r9
  4011a0:	4699      	mov	r9, r3
  4011a2:	0993      	lsrs	r3, r2, #6
  4011a4:	464a      	mov	r2, r9
  4011a6:	ea43 6389 	orr.w	r3, r3, r9, lsl #26
  4011aa:	934a      	str	r3, [sp, #296]	; 0x128
  4011ac:	0993      	lsrs	r3, r2, #6
  4011ae:	934b      	str	r3, [sp, #300]	; 0x12c
  4011b0:	ab4a      	add	r3, sp, #296	; 0x128
  4011b2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4011b6:	4042      	eors	r2, r0
  4011b8:	404b      	eors	r3, r1
  4011ba:	4610      	mov	r0, r2
  4011bc:	4619      	mov	r1, r3
  4011be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  4011c2:	1812      	adds	r2, r2, r0
  4011c4:	414b      	adcs	r3, r1
  4011c6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  4011ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4011ce:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
  4011d2:	1880      	adds	r0, r0, r2
  4011d4:	4159      	adcs	r1, r3
  4011d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  4011da:	1812      	adds	r2, r2, r0
  4011dc:	414b      	adcs	r3, r1
  4011de:	4610      	mov	r0, r2
  4011e0:	4619      	mov	r1, r3
  4011e2:	e9dd 232e 	ldrd	r2, r3, [sp, #184]	; 0xb8
  4011e6:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  4011ea:	1880      	adds	r0, r0, r2
  4011ec:	4159      	adcs	r1, r3
  4011ee:	4602      	mov	r2, r0
  4011f0:	460b      	mov	r3, r1
  4011f2:	e9cd 2302 	strd	r2, r3, [sp, #8]

004011f6 <.LBB487>:
  4011f6:	e9dd 892a 	ldrd	r8, r9, [sp, #168]	; 0xa8
  4011fa:	4643      	mov	r3, r8
  4011fc:	0f1b      	lsrs	r3, r3, #28
  4011fe:	464a      	mov	r2, r9
  401200:	ea43 1309 	orr.w	r3, r3, r9, lsl #4
  401204:	93f6      	str	r3, [sp, #984]	; 0x3d8
  401206:	0f13      	lsrs	r3, r2, #28
  401208:	4642      	mov	r2, r8
  40120a:	ea43 1308 	orr.w	r3, r3, r8, lsl #4
  40120e:	93f7      	str	r3, [sp, #988]	; 0x3dc

00401210 <.LBB489>:
  401210:	464b      	mov	r3, r9
  401212:	079b      	lsls	r3, r3, #30
  401214:	ea43 0398 	orr.w	r3, r3, r8, lsr #2
  401218:	93f9      	str	r3, [sp, #996]	; 0x3e4
  40121a:	0793      	lsls	r3, r2, #30
  40121c:	ea43 0399 	orr.w	r3, r3, r9, lsr #2
  401220:	93f8      	str	r3, [sp, #992]	; 0x3e0

00401222 <.LBE489>:
  401222:	abf6      	add	r3, sp, #984	; 0x3d8
  401224:	e9d3 2300 	ldrd	r2, r3, [r3]
  401228:	a9f8      	add	r1, sp, #992	; 0x3e0
  40122a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40122e:	4042      	eors	r2, r0
  401230:	404b      	eors	r3, r1

00401232 <.LBB491>:
  401232:	4649      	mov	r1, r9
  401234:	0649      	lsls	r1, r1, #25
  401236:	4640      	mov	r0, r8
  401238:	ea41 11d8 	orr.w	r1, r1, r8, lsr #7
  40123c:	91fb      	str	r1, [sp, #1004]	; 0x3ec
  40123e:	0641      	lsls	r1, r0, #25
  401240:	ea41 11d9 	orr.w	r1, r1, r9, lsr #7
  401244:	91fa      	str	r1, [sp, #1000]	; 0x3e8

00401246 <.LBE491>:
  401246:	a9fa      	add	r1, sp, #1000	; 0x3e8
  401248:	e9d1 0100 	ldrd	r0, r1, [r1]
  40124c:	4050      	eors	r0, r2
  40124e:	4059      	eors	r1, r3
  401250:	4602      	mov	r2, r0
  401252:	460b      	mov	r3, r1
  401254:	ea48 000a 	orr.w	r0, r8, sl
  401258:	ea49 010b 	orr.w	r1, r9, fp
  40125c:	4020      	ands	r0, r4
  40125e:	4029      	ands	r1, r5
  401260:	ea08 080a 	and.w	r8, r8, sl
  401264:	ea09 090b 	and.w	r9, r9, fp
  401268:	ea48 0800 	orr.w	r8, r8, r0
  40126c:	ea49 0901 	orr.w	r9, r9, r1
  401270:	eb18 0002 	adds.w	r0, r8, r2
  401274:	eb49 0103 	adc.w	r1, r9, r3
  401278:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
  40127c:	eb18 0800 	adds.w	r8, r8, r0
  401280:	eb49 0901 	adc.w	r9, r9, r1

00401284 <.LBB493>:
  401284:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  401288:	0b83      	lsrs	r3, r0, #14
  40128a:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  40128e:	93fc      	str	r3, [sp, #1008]	; 0x3f0
  401290:	0b8b      	lsrs	r3, r1, #14
  401292:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
  401296:	93fd      	str	r3, [sp, #1012]	; 0x3f4

00401298 <.LBB495>:
  401298:	0c83      	lsrs	r3, r0, #18
  40129a:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
  40129e:	93fe      	str	r3, [sp, #1016]	; 0x3f8
  4012a0:	0c8b      	lsrs	r3, r1, #18
  4012a2:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
  4012a6:	93ff      	str	r3, [sp, #1020]	; 0x3fc

004012a8 <.LBE495>:
  4012a8:	abfc      	add	r3, sp, #1008	; 0x3f0
  4012aa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4012ae:	a9fe      	add	r1, sp, #1016	; 0x3f8
  4012b0:	e9d1 0100 	ldrd	r0, r1, [r1]
  4012b4:	4042      	eors	r2, r0
  4012b6:	404b      	eors	r3, r1

004012b8 <.LBB497>:
  4012b8:	9903      	ldr	r1, [sp, #12]
  4012ba:	05c9      	lsls	r1, r1, #23
  4012bc:	9802      	ldr	r0, [sp, #8]
  4012be:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
  4012c2:	f8cd 1404 	str.w	r1, [sp, #1028]	; 0x404
  4012c6:	05c1      	lsls	r1, r0, #23
  4012c8:	9803      	ldr	r0, [sp, #12]
  4012ca:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
  4012ce:	f8cd 1400 	str.w	r1, [sp, #1024]	; 0x400

004012d2 <.LBE497>:
  4012d2:	f50d 6180 	add.w	r1, sp, #1024	; 0x400
  4012d6:	e9d1 0100 	ldrd	r0, r1, [r1]
  4012da:	4050      	eors	r0, r2
  4012dc:	4059      	eors	r1, r3
  4012de:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  4012e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4012e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4012ea:	4050      	eors	r0, r2
  4012ec:	4059      	eors	r1, r3
  4012ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4012f2:	4002      	ands	r2, r0
  4012f4:	400b      	ands	r3, r1
  4012f6:	4610      	mov	r0, r2
  4012f8:	4619      	mov	r1, r3
  4012fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  4012fe:	4042      	eors	r2, r0
  401300:	404b      	eors	r3, r1
  401302:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
  401306:	e9d6 230e 	ldrd	r2, r3, [r6, #56]	; 0x38
  40130a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  40130e:	1880      	adds	r0, r0, r2
  401310:	4159      	adcs	r1, r3
  401312:	4602      	mov	r2, r0
  401314:	460b      	mov	r3, r1
  401316:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
  40131a:	1880      	adds	r0, r0, r2
  40131c:	4159      	adcs	r1, r3
  40131e:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  401322:	2f00      	cmp	r7, #0
  401324:	f001 82ac 	beq.w	402880 <.LCFI3+0x54>

00401328 <.LBB499>:
  401328:	e9dd 0100 	ldrd	r0, r1, [sp]
  40132c:	0843      	lsrs	r3, r0, #1
  40132e:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
  401332:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
  401336:	084b      	lsrs	r3, r1, #1
  401338:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
  40133c:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c

00401340 <.LBB501>:
  401340:	0a03      	lsrs	r3, r0, #8
  401342:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  401346:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
  40134a:	0a0b      	lsrs	r3, r1, #8
  40134c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  401350:	f8cd 3414 	str.w	r3, [sp, #1044]	; 0x414

00401354 <.LBE501>:
  401354:	f50d 6381 	add.w	r3, sp, #1032	; 0x408
  401358:	e9d3 2300 	ldrd	r2, r3, [r3]
  40135c:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
  401360:	e9d1 0100 	ldrd	r0, r1, [r1]
  401364:	4042      	eors	r2, r0
  401366:	404b      	eors	r3, r1
  401368:	9900      	ldr	r1, [sp, #0]
  40136a:	09c9      	lsrs	r1, r1, #7
  40136c:	9801      	ldr	r0, [sp, #4]
  40136e:	ea41 6140 	orr.w	r1, r1, r0, lsl #25
  401372:	914c      	str	r1, [sp, #304]	; 0x130
  401374:	09c1      	lsrs	r1, r0, #7
  401376:	914d      	str	r1, [sp, #308]	; 0x134
  401378:	a94c      	add	r1, sp, #304	; 0x130
  40137a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40137e:	4050      	eors	r0, r2
  401380:	4059      	eors	r1, r3
  401382:	4602      	mov	r2, r0
  401384:	460b      	mov	r3, r1
  401386:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40138a:	1880      	adds	r0, r0, r2
  40138c:	4159      	adcs	r1, r3
  40138e:	4602      	mov	r2, r0
  401390:	460b      	mov	r3, r1
  401392:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
  401396:	1880      	adds	r0, r0, r2
  401398:	4159      	adcs	r1, r3
  40139a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40

0040139e <.LBB503>:
  40139e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4013a2:	0cd1      	lsrs	r1, r2, #19
  4013a4:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
  4013a8:	f8cd 1418 	str.w	r1, [sp, #1048]	; 0x418
  4013ac:	0cd9      	lsrs	r1, r3, #19
  4013ae:	ea41 3142 	orr.w	r1, r1, r2, lsl #13
  4013b2:	f8cd 141c 	str.w	r1, [sp, #1052]	; 0x41c

004013b6 <.LBB505>:
  4013b6:	00d9      	lsls	r1, r3, #3
  4013b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
  4013bc:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
  4013c0:	00d1      	lsls	r1, r2, #3
  4013c2:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
  4013c6:	f8cd 1420 	str.w	r1, [sp, #1056]	; 0x420

004013ca <.LBE505>:
  4013ca:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
  4013ce:	e9d3 0100 	ldrd	r0, r1, [r3]
  4013d2:	f50d 6384 	add.w	r3, sp, #1056	; 0x420
  4013d6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4013da:	4050      	eors	r0, r2
  4013dc:	4059      	eors	r1, r3
  4013de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4013e0:	099b      	lsrs	r3, r3, #6
  4013e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4013e4:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
  4013e8:	934e      	str	r3, [sp, #312]	; 0x138
  4013ea:	0993      	lsrs	r3, r2, #6
  4013ec:	934f      	str	r3, [sp, #316]	; 0x13c
  4013ee:	ab4e      	add	r3, sp, #312	; 0x138
  4013f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4013f4:	4042      	eors	r2, r0
  4013f6:	404b      	eors	r3, r1
  4013f8:	4610      	mov	r0, r2
  4013fa:	4619      	mov	r1, r3
  4013fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  401400:	1812      	adds	r2, r2, r0
  401402:	414b      	adcs	r3, r1
  401404:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  401408:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  40140c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  401410:	1812      	adds	r2, r2, r0
  401412:	414b      	adcs	r3, r1
  401414:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  401418:	1880      	adds	r0, r0, r2
  40141a:	4159      	adcs	r1, r3
  40141c:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  401420:	1902      	adds	r2, r0, r4
  401422:	eb41 0305 	adc.w	r3, r1, r5
  401426:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60

0040142a <.LBB507>:
  40142a:	ea4f 7318 	mov.w	r3, r8, lsr #28
  40142e:	ea43 1309 	orr.w	r3, r3, r9, lsl #4
  401432:	f8cd 3428 	str.w	r3, [sp, #1064]	; 0x428
  401436:	ea4f 7319 	mov.w	r3, r9, lsr #28
  40143a:	ea43 1308 	orr.w	r3, r3, r8, lsl #4
  40143e:	f8cd 342c 	str.w	r3, [sp, #1068]	; 0x42c

00401442 <.LBB509>:
  401442:	ea4f 7389 	mov.w	r3, r9, lsl #30
  401446:	ea43 0398 	orr.w	r3, r3, r8, lsr #2
  40144a:	f8cd 3434 	str.w	r3, [sp, #1076]	; 0x434
  40144e:	ea4f 7388 	mov.w	r3, r8, lsl #30
  401452:	ea43 0399 	orr.w	r3, r3, r9, lsr #2
  401456:	f8cd 3430 	str.w	r3, [sp, #1072]	; 0x430

0040145a <.LBE509>:
  40145a:	f50d 6385 	add.w	r3, sp, #1064	; 0x428
  40145e:	e9d3 1200 	ldrd	r1, r2, [r3]
  401462:	f50d 6386 	add.w	r3, sp, #1072	; 0x430
  401466:	e9d3 3400 	ldrd	r3, r4, [r3]
  40146a:	4059      	eors	r1, r3
  40146c:	4062      	eors	r2, r4
  40146e:	4613      	mov	r3, r2
  401470:	460a      	mov	r2, r1

00401472 <.LBB511>:
  401472:	ea4f 6149 	mov.w	r1, r9, lsl #25
  401476:	ea41 11d8 	orr.w	r1, r1, r8, lsr #7
  40147a:	f8cd 143c 	str.w	r1, [sp, #1084]	; 0x43c
  40147e:	ea4f 6148 	mov.w	r1, r8, lsl #25
  401482:	ea41 11d9 	orr.w	r1, r1, r9, lsr #7
  401486:	f8cd 1438 	str.w	r1, [sp, #1080]	; 0x438

0040148a <.LBE511>:
  40148a:	f50d 6187 	add.w	r1, sp, #1080	; 0x438
  40148e:	e9d1 0100 	ldrd	r0, r1, [r1]
  401492:	4050      	eors	r0, r2
  401494:	4059      	eors	r1, r3
  401496:	4602      	mov	r2, r0
  401498:	460b      	mov	r3, r1
  40149a:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
  40149e:	ea44 0008 	orr.w	r0, r4, r8
  4014a2:	ea45 0109 	orr.w	r1, r5, r9
  4014a6:	ea00 000a 	and.w	r0, r0, sl
  4014aa:	ea01 010b 	and.w	r1, r1, fp
  4014ae:	ea04 0408 	and.w	r4, r4, r8
  4014b2:	ea05 0509 	and.w	r5, r5, r9
  4014b6:	4320      	orrs	r0, r4
  4014b8:	4329      	orrs	r1, r5
  4014ba:	1880      	adds	r0, r0, r2
  4014bc:	4159      	adcs	r1, r3
  4014be:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
  4014c2:	181b      	adds	r3, r3, r0
  4014c4:	414c      	adcs	r4, r1
  4014c6:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68

004014ca <.LBB513>:
  4014ca:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
  4014ce:	0ba3      	lsrs	r3, r4, #14
  4014d0:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
  4014d4:	f8cd 3440 	str.w	r3, [sp, #1088]	; 0x440
  4014d8:	0bab      	lsrs	r3, r5, #14
  4014da:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
  4014de:	f8cd 3444 	str.w	r3, [sp, #1092]	; 0x444

004014e2 <.LBB515>:
  4014e2:	0ca3      	lsrs	r3, r4, #18
  4014e4:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
  4014e8:	f8cd 3448 	str.w	r3, [sp, #1096]	; 0x448
  4014ec:	0cab      	lsrs	r3, r5, #18
  4014ee:	ea43 3384 	orr.w	r3, r3, r4, lsl #14
  4014f2:	f8cd 344c 	str.w	r3, [sp, #1100]	; 0x44c

004014f6 <.LBE515>:
        R( 8); R( 9); R(10); R(11);
  4014f6:	f50d 6388 	add.w	r3, sp, #1088	; 0x440
  4014fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4014fe:	f50d 6189 	add.w	r1, sp, #1096	; 0x448
  401502:	e9d1 0100 	ldrd	r0, r1, [r1]
  401506:	4042      	eors	r2, r0
  401508:	404b      	eors	r3, r1

0040150a <.LBB517>:
  40150a:	05e9      	lsls	r1, r5, #23
  40150c:	ea41 2154 	orr.w	r1, r1, r4, lsr #9
  401510:	f8cd 1454 	str.w	r1, [sp, #1108]	; 0x454
  401514:	05e1      	lsls	r1, r4, #23
  401516:	ea41 2155 	orr.w	r1, r1, r5, lsr #9
  40151a:	f8cd 1450 	str.w	r1, [sp, #1104]	; 0x450

0040151e <.LBE517>:
  40151e:	f50d 618a 	add.w	r1, sp, #1104	; 0x450
  401522:	e9d1 0100 	ldrd	r0, r1, [r1]
  401526:	4050      	eors	r0, r2
  401528:	4059      	eors	r1, r3
  40152a:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  40152e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
  401532:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
  401536:	404b      	eors	r3, r1
  401538:	4054      	eors	r4, r2
  40153a:	4625      	mov	r5, r4
  40153c:	461c      	mov	r4, r3
  40153e:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  401542:	4022      	ands	r2, r4
  401544:	402b      	ands	r3, r5
  401546:	4614      	mov	r4, r2
  401548:	461d      	mov	r5, r3
  40154a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40154e:	4062      	eors	r2, r4
  401550:	406b      	eors	r3, r5
  401552:	4614      	mov	r4, r2
  401554:	461d      	mov	r5, r3
  401556:	e9d6 2310 	ldrd	r2, r3, [r6, #64]	; 0x40
  40155a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40155e:	1880      	adds	r0, r0, r2
  401560:	4159      	adcs	r1, r3
  401562:	1820      	adds	r0, r4, r0
  401564:	eb45 0101 	adc.w	r1, r5, r1
  401568:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40156c:	2f00      	cmp	r7, #0
  40156e:	f001 818d 	beq.w	40288c <.LCFI3+0x60>

00401572 <.LBB519>:
  401572:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
  401576:	0863      	lsrs	r3, r4, #1
  401578:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
  40157c:	f8cd 3458 	str.w	r3, [sp, #1112]	; 0x458
  401580:	086b      	lsrs	r3, r5, #1
  401582:	ea43 73c4 	orr.w	r3, r3, r4, lsl #31
  401586:	f8cd 345c 	str.w	r3, [sp, #1116]	; 0x45c

0040158a <.LBB521>:
  40158a:	0a23      	lsrs	r3, r4, #8
  40158c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  401590:	f8cd 3460 	str.w	r3, [sp, #1120]	; 0x460
  401594:	0a2b      	lsrs	r3, r5, #8
  401596:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  40159a:	f8cd 3464 	str.w	r3, [sp, #1124]	; 0x464

0040159e <.LBE521>:
  40159e:	f50d 638b 	add.w	r3, sp, #1112	; 0x458
  4015a2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4015a6:	f50d 618c 	add.w	r1, sp, #1120	; 0x460
  4015aa:	e9d1 0100 	ldrd	r0, r1, [r1]
  4015ae:	4042      	eors	r2, r0
  4015b0:	404b      	eors	r3, r1
  4015b2:	09e1      	lsrs	r1, r4, #7
  4015b4:	ea41 6145 	orr.w	r1, r1, r5, lsl #25
  4015b8:	9150      	str	r1, [sp, #320]	; 0x140
  4015ba:	09e9      	lsrs	r1, r5, #7
  4015bc:	9151      	str	r1, [sp, #324]	; 0x144
  4015be:	a950      	add	r1, sp, #320	; 0x140
  4015c0:	e9d1 0100 	ldrd	r0, r1, [r1]
  4015c4:	4050      	eors	r0, r2
  4015c6:	4059      	eors	r1, r3
  4015c8:	4602      	mov	r2, r0
  4015ca:	460b      	mov	r3, r1
  4015cc:	e9dd 0100 	ldrd	r0, r1, [sp]
  4015d0:	1880      	adds	r0, r0, r2
  4015d2:	4159      	adcs	r1, r3
  4015d4:	4602      	mov	r2, r0
  4015d6:	460b      	mov	r3, r1
  4015d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4015dc:	1880      	adds	r0, r0, r2
  4015de:	4159      	adcs	r1, r3
  4015e0:	e9cd 0100 	strd	r0, r1, [sp]

004015e4 <.LBB523>:
  4015e4:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
  4015e8:	0ce1      	lsrs	r1, r4, #19
  4015ea:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
  4015ee:	f8cd 1468 	str.w	r1, [sp, #1128]	; 0x468
  4015f2:	0ce9      	lsrs	r1, r5, #19
  4015f4:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
  4015f8:	f8cd 146c 	str.w	r1, [sp, #1132]	; 0x46c

004015fc <.LBB525>:
  4015fc:	00e9      	lsls	r1, r5, #3
  4015fe:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
  401602:	f8cd 1474 	str.w	r1, [sp, #1140]	; 0x474
  401606:	00e1      	lsls	r1, r4, #3
  401608:	ea41 7155 	orr.w	r1, r1, r5, lsr #29
  40160c:	f8cd 1470 	str.w	r1, [sp, #1136]	; 0x470

00401610 <.LBE525>:
  401610:	f50d 638d 	add.w	r3, sp, #1128	; 0x468
  401614:	e9d3 0100 	ldrd	r0, r1, [r3]
  401618:	f50d 638e 	add.w	r3, sp, #1136	; 0x470
  40161c:	e9d3 2300 	ldrd	r2, r3, [r3]
  401620:	4050      	eors	r0, r2
  401622:	4059      	eors	r1, r3
  401624:	09a4      	lsrs	r4, r4, #6
  401626:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  401628:	ea44 6485 	orr.w	r4, r4, r5, lsl #26
  40162c:	9452      	str	r4, [sp, #328]	; 0x148
  40162e:	09ac      	lsrs	r4, r5, #6
  401630:	9453      	str	r4, [sp, #332]	; 0x14c
  401632:	ab52      	add	r3, sp, #328	; 0x148
  401634:	e9d3 4500 	ldrd	r4, r5, [r3]
  401638:	4044      	eors	r4, r0
  40163a:	404d      	eors	r5, r1
  40163c:	4620      	mov	r0, r4
  40163e:	e9dd 3400 	ldrd	r3, r4, [sp]
  401642:	181b      	adds	r3, r3, r0
  401644:	416c      	adcs	r4, r5
  401646:	e9cd 3400 	strd	r3, r4, [sp]
  40164a:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  40164e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  401652:	1912      	adds	r2, r2, r4
  401654:	416b      	adcs	r3, r5
  401656:	4614      	mov	r4, r2
  401658:	461d      	mov	r5, r3
  40165a:	e9dd 2300 	ldrd	r2, r3, [sp]
  40165e:	1912      	adds	r2, r2, r4
  401660:	416b      	adcs	r3, r5
  401662:	461c      	mov	r4, r3
  401664:	4613      	mov	r3, r2
  401666:	e9cd 3406 	strd	r3, r4, [sp, #24]
  40166a:	eb12 020a 	adds.w	r2, r2, sl
  40166e:	eb44 030b 	adc.w	r3, r4, fp
  401672:	4692      	mov	sl, r2
  401674:	469b      	mov	fp, r3

00401676 <.LBB527>:
  401676:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
  40167a:	0f23      	lsrs	r3, r4, #28
  40167c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  401680:	f8cd 3478 	str.w	r3, [sp, #1144]	; 0x478
  401684:	0f2b      	lsrs	r3, r5, #28
  401686:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  40168a:	f8cd 347c 	str.w	r3, [sp, #1148]	; 0x47c

0040168e <.LBB529>:
  40168e:	07ab      	lsls	r3, r5, #30
  401690:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  401694:	f8cd 3484 	str.w	r3, [sp, #1156]	; 0x484
  401698:	07a3      	lsls	r3, r4, #30
  40169a:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  40169e:	f8cd 3480 	str.w	r3, [sp, #1152]	; 0x480

004016a2 <.LBE529>:
  4016a2:	f50d 638f 	add.w	r3, sp, #1144	; 0x478
  4016a6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4016aa:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
  4016ae:	e9d1 0100 	ldrd	r0, r1, [r1]
  4016b2:	4042      	eors	r2, r0
  4016b4:	404b      	eors	r3, r1

004016b6 <.LBB531>:
  4016b6:	0669      	lsls	r1, r5, #25
  4016b8:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  4016bc:	f8cd 148c 	str.w	r1, [sp, #1164]	; 0x48c
  4016c0:	0661      	lsls	r1, r4, #25
  4016c2:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  4016c6:	f8cd 1488 	str.w	r1, [sp, #1160]	; 0x488

004016ca <.LBE531>:
  4016ca:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
  4016ce:	e9d1 0100 	ldrd	r0, r1, [r1]
  4016d2:	4050      	eors	r0, r2
  4016d4:	4059      	eors	r1, r3
  4016d6:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  4016da:	ea44 0008 	orr.w	r0, r4, r8
  4016de:	ea45 0109 	orr.w	r1, r5, r9
  4016e2:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  4016e6:	4002      	ands	r2, r0
  4016e8:	400b      	ands	r3, r1
  4016ea:	ea04 0408 	and.w	r4, r4, r8
  4016ee:	ea05 0509 	and.w	r5, r5, r9
  4016f2:	4314      	orrs	r4, r2
  4016f4:	431d      	orrs	r5, r3
  4016f6:	4620      	mov	r0, r4
  4016f8:	4629      	mov	r1, r5
  4016fa:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  4016fe:	1824      	adds	r4, r4, r0
  401700:	414d      	adcs	r5, r1
  401702:	4620      	mov	r0, r4
  401704:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
  401708:	181b      	adds	r3, r3, r0
  40170a:	416c      	adcs	r4, r5
  40170c:	e9cd 3406 	strd	r3, r4, [sp, #24]

00401710 <.LBB533>:
  401710:	ea4f 339a 	mov.w	r3, sl, lsr #14
  401714:	ea43 438b 	orr.w	r3, r3, fp, lsl #18
  401718:	f8cd 3490 	str.w	r3, [sp, #1168]	; 0x490
  40171c:	ea4f 339b 	mov.w	r3, fp, lsr #14
  401720:	ea43 438a 	orr.w	r3, r3, sl, lsl #18
  401724:	f8cd 3494 	str.w	r3, [sp, #1172]	; 0x494

00401728 <.LBB535>:
  401728:	ea4f 439a 	mov.w	r3, sl, lsr #18
  40172c:	ea43 338b 	orr.w	r3, r3, fp, lsl #14
  401730:	f8cd 3498 	str.w	r3, [sp, #1176]	; 0x498
  401734:	ea4f 439b 	mov.w	r3, fp, lsr #18
  401738:	ea43 338a 	orr.w	r3, r3, sl, lsl #14
  40173c:	f8cd 349c 	str.w	r3, [sp, #1180]	; 0x49c

00401740 <.LBE535>:
  401740:	f50d 6392 	add.w	r3, sp, #1168	; 0x490
  401744:	e9d3 2300 	ldrd	r2, r3, [r3]
  401748:	f50d 6193 	add.w	r1, sp, #1176	; 0x498
  40174c:	e9d1 0100 	ldrd	r0, r1, [r1]
  401750:	4042      	eors	r2, r0
  401752:	404b      	eors	r3, r1

00401754 <.LBB537>:
  401754:	ea4f 51cb 	mov.w	r1, fp, lsl #23
  401758:	ea41 215a 	orr.w	r1, r1, sl, lsr #9
  40175c:	f8cd 14a4 	str.w	r1, [sp, #1188]	; 0x4a4
  401760:	ea4f 51ca 	mov.w	r1, sl, lsl #23
  401764:	ea41 215b 	orr.w	r1, r1, fp, lsr #9
  401768:	f8cd 14a0 	str.w	r1, [sp, #1184]	; 0x4a0

0040176c <.LBE537>:
  40176c:	f50d 6194 	add.w	r1, sp, #1184	; 0x4a0
  401770:	e9d1 0100 	ldrd	r0, r1, [r1]
  401774:	4050      	eors	r0, r2
  401776:	4059      	eors	r1, r3
  401778:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  40177c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401780:	4614      	mov	r4, r2
  401782:	461d      	mov	r5, r3
  401784:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
  401788:	4044      	eors	r4, r0
  40178a:	404d      	eors	r5, r1
  40178c:	ea04 040a 	and.w	r4, r4, sl
  401790:	ea05 050b 	and.w	r5, r5, fp
  401794:	4062      	eors	r2, r4
  401796:	406b      	eors	r3, r5
  401798:	4614      	mov	r4, r2
  40179a:	461d      	mov	r5, r3
  40179c:	e9d6 2312 	ldrd	r2, r3, [r6, #72]	; 0x48
  4017a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4017a4:	1880      	adds	r0, r0, r2
  4017a6:	4159      	adcs	r1, r3
  4017a8:	1820      	adds	r0, r4, r0
  4017aa:	eb45 0101 	adc.w	r1, r5, r1
  4017ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4017b2:	2f00      	cmp	r7, #0
  4017b4:	f001 8070 	beq.w	402898 <.LCFI3+0x6c>

004017b8 <.LBB539>:
  4017b8:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
  4017bc:	0863      	lsrs	r3, r4, #1
  4017be:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
  4017c2:	f8cd 34a8 	str.w	r3, [sp, #1192]	; 0x4a8
  4017c6:	086b      	lsrs	r3, r5, #1
  4017c8:	ea43 73c4 	orr.w	r3, r3, r4, lsl #31
  4017cc:	f8cd 34ac 	str.w	r3, [sp, #1196]	; 0x4ac

004017d0 <.LBB541>:
  4017d0:	0a23      	lsrs	r3, r4, #8
  4017d2:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  4017d6:	f8cd 34b0 	str.w	r3, [sp, #1200]	; 0x4b0
  4017da:	0a2b      	lsrs	r3, r5, #8
  4017dc:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  4017e0:	f8cd 34b4 	str.w	r3, [sp, #1204]	; 0x4b4

004017e4 <.LBE541>:
  4017e4:	f50d 6395 	add.w	r3, sp, #1192	; 0x4a8
  4017e8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4017ec:	f50d 6196 	add.w	r1, sp, #1200	; 0x4b0
  4017f0:	e9d1 0100 	ldrd	r0, r1, [r1]
  4017f4:	4042      	eors	r2, r0
  4017f6:	404b      	eors	r3, r1
  4017f8:	09e1      	lsrs	r1, r4, #7
  4017fa:	ea41 6145 	orr.w	r1, r1, r5, lsl #25
  4017fe:	9154      	str	r1, [sp, #336]	; 0x150
  401800:	09e9      	lsrs	r1, r5, #7
  401802:	9155      	str	r1, [sp, #340]	; 0x154
  401804:	a954      	add	r1, sp, #336	; 0x150
  401806:	e9d1 0100 	ldrd	r0, r1, [r1]
  40180a:	4050      	eors	r0, r2
  40180c:	4059      	eors	r1, r3
  40180e:	4602      	mov	r2, r0
  401810:	460b      	mov	r3, r1
  401812:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  401816:	1880      	adds	r0, r0, r2
  401818:	4159      	adcs	r1, r3
  40181a:	4602      	mov	r2, r0
  40181c:	460b      	mov	r3, r1
  40181e:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
  401822:	1880      	adds	r0, r0, r2
  401824:	4159      	adcs	r1, r3
  401826:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48

0040182a <.LBB543>:
  40182a:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
  40182e:	0ce1      	lsrs	r1, r4, #19
  401830:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
  401834:	f8cd 14b8 	str.w	r1, [sp, #1208]	; 0x4b8
  401838:	0ce9      	lsrs	r1, r5, #19
  40183a:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
  40183e:	f8cd 14bc 	str.w	r1, [sp, #1212]	; 0x4bc

00401842 <.LBB545>:
  401842:	00e9      	lsls	r1, r5, #3
  401844:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
  401848:	f8cd 14c4 	str.w	r1, [sp, #1220]	; 0x4c4
  40184c:	00e1      	lsls	r1, r4, #3
  40184e:	ea41 7155 	orr.w	r1, r1, r5, lsr #29
  401852:	f8cd 14c0 	str.w	r1, [sp, #1216]	; 0x4c0

00401856 <.LBE545>:
  401856:	f50d 6397 	add.w	r3, sp, #1208	; 0x4b8
  40185a:	e9d3 0100 	ldrd	r0, r1, [r3]
  40185e:	f50d 6398 	add.w	r3, sp, #1216	; 0x4c0
  401862:	e9d3 2300 	ldrd	r2, r3, [r3]
  401866:	4050      	eors	r0, r2
  401868:	4059      	eors	r1, r3
  40186a:	09a4      	lsrs	r4, r4, #6
  40186c:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40186e:	ea44 6485 	orr.w	r4, r4, r5, lsl #26
  401872:	9456      	str	r4, [sp, #344]	; 0x158
  401874:	09ac      	lsrs	r4, r5, #6
  401876:	9457      	str	r4, [sp, #348]	; 0x15c
  401878:	ab56      	add	r3, sp, #344	; 0x158
  40187a:	e9d3 4500 	ldrd	r4, r5, [r3]
  40187e:	4044      	eors	r4, r0
  401880:	404d      	eors	r5, r1
  401882:	4620      	mov	r0, r4
  401884:	e9dd 3412 	ldrd	r3, r4, [sp, #72]	; 0x48
  401888:	181b      	adds	r3, r3, r0
  40188a:	416c      	adcs	r4, r5
  40188c:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
  401890:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  401894:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  401898:	1912      	adds	r2, r2, r4
  40189a:	416b      	adcs	r3, r5
  40189c:	4614      	mov	r4, r2
  40189e:	461d      	mov	r5, r3
  4018a0:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  4018a4:	1912      	adds	r2, r2, r4
  4018a6:	416b      	adcs	r3, r5
  4018a8:	4610      	mov	r0, r2
  4018aa:	4619      	mov	r1, r3
  4018ac:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  4018b0:	e9cd 012a 	strd	r0, r1, [sp, #168]	; 0xa8
  4018b4:	1880      	adds	r0, r0, r2
  4018b6:	4159      	adcs	r1, r3
  4018b8:	4602      	mov	r2, r0
  4018ba:	460b      	mov	r3, r1
  4018bc:	e9cd 2304 	strd	r2, r3, [sp, #16]

004018c0 <.LBB547>:
  4018c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4018c4:	0f03      	lsrs	r3, r0, #28
  4018c6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  4018ca:	f8cd 34c8 	str.w	r3, [sp, #1224]	; 0x4c8
  4018ce:	0f0b      	lsrs	r3, r1, #28
  4018d0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  4018d4:	f8cd 34cc 	str.w	r3, [sp, #1228]	; 0x4cc

004018d8 <.LBB549>:
  4018d8:	078b      	lsls	r3, r1, #30
  4018da:	ea43 0390 	orr.w	r3, r3, r0, lsr #2
  4018de:	f8cd 34d4 	str.w	r3, [sp, #1236]	; 0x4d4
  4018e2:	0783      	lsls	r3, r0, #30
  4018e4:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  4018e8:	f8cd 34d0 	str.w	r3, [sp, #1232]	; 0x4d0

004018ec <.LBE549>:
  4018ec:	f50d 6399 	add.w	r3, sp, #1224	; 0x4c8
  4018f0:	e9d3 3400 	ldrd	r3, r4, [r3]
  4018f4:	f50d 629a 	add.w	r2, sp, #1232	; 0x4d0
  4018f8:	e9d2 1200 	ldrd	r1, r2, [r2]
  4018fc:	404b      	eors	r3, r1
  4018fe:	4054      	eors	r4, r2
  401900:	461a      	mov	r2, r3
  401902:	4623      	mov	r3, r4

00401904 <.LBB551>:
  401904:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
  401908:	0669      	lsls	r1, r5, #25
  40190a:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  40190e:	f8cd 14dc 	str.w	r1, [sp, #1244]	; 0x4dc
  401912:	0661      	lsls	r1, r4, #25
  401914:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  401918:	f8cd 14d8 	str.w	r1, [sp, #1240]	; 0x4d8

0040191c <.LBE551>:
  40191c:	f50d 619b 	add.w	r1, sp, #1240	; 0x4d8
  401920:	e9d1 0100 	ldrd	r0, r1, [r1]
  401924:	4050      	eors	r0, r2
  401926:	4059      	eors	r1, r3
  401928:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  40192c:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  401930:	4322      	orrs	r2, r4
  401932:	432b      	orrs	r3, r5
  401934:	ea02 0208 	and.w	r2, r2, r8
  401938:	ea03 0309 	and.w	r3, r3, r9
  40193c:	e9cd 232e 	strd	r2, r3, [sp, #184]	; 0xb8
  401940:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
  401944:	4623      	mov	r3, r4
  401946:	4019      	ands	r1, r3
  401948:	402a      	ands	r2, r5
  40194a:	4608      	mov	r0, r1
  40194c:	e9dd 452e 	ldrd	r4, r5, [sp, #184]	; 0xb8
  401950:	4304      	orrs	r4, r0
  401952:	4315      	orrs	r5, r2
  401954:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
  401958:	1912      	adds	r2, r2, r4
  40195a:	416b      	adcs	r3, r5
  40195c:	4619      	mov	r1, r3
  40195e:	e9dd 342a 	ldrd	r3, r4, [sp, #168]	; 0xa8
  401962:	189b      	adds	r3, r3, r2
  401964:	414c      	adcs	r4, r1
  401966:	e9cd 342a 	strd	r3, r4, [sp, #168]	; 0xa8

0040196a <.LBB553>:
  40196a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  40196e:	0ba3      	lsrs	r3, r4, #14
  401970:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
  401974:	f8cd 34e0 	str.w	r3, [sp, #1248]	; 0x4e0
  401978:	0bab      	lsrs	r3, r5, #14
  40197a:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
  40197e:	f8cd 34e4 	str.w	r3, [sp, #1252]	; 0x4e4

00401982 <.LBB555>:
  401982:	0ca3      	lsrs	r3, r4, #18
  401984:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
  401988:	f8cd 34e8 	str.w	r3, [sp, #1256]	; 0x4e8
  40198c:	0cab      	lsrs	r3, r5, #18
  40198e:	ea43 3384 	orr.w	r3, r3, r4, lsl #14
  401992:	f8cd 34ec 	str.w	r3, [sp, #1260]	; 0x4ec

00401996 <.LBE555>:
  401996:	f50d 639c 	add.w	r3, sp, #1248	; 0x4e0
  40199a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40199e:	f50d 619d 	add.w	r1, sp, #1256	; 0x4e8
  4019a2:	e9d1 0100 	ldrd	r0, r1, [r1]
  4019a6:	4042      	eors	r2, r0
  4019a8:	404b      	eors	r3, r1

004019aa <.LBB557>:
  4019aa:	05e9      	lsls	r1, r5, #23
  4019ac:	ea41 2154 	orr.w	r1, r1, r4, lsr #9
  4019b0:	f8cd 14f4 	str.w	r1, [sp, #1268]	; 0x4f4
  4019b4:	05e1      	lsls	r1, r4, #23
  4019b6:	ea41 2155 	orr.w	r1, r1, r5, lsr #9
  4019ba:	f8cd 14f0 	str.w	r1, [sp, #1264]	; 0x4f0

004019be <.LBE557>:
  4019be:	f50d 619e 	add.w	r1, sp, #1264	; 0x4f0
  4019c2:	e9d1 0100 	ldrd	r0, r1, [r1]
  4019c6:	4050      	eors	r0, r2
  4019c8:	4059      	eors	r1, r3
  4019ca:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  4019ce:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
  4019d2:	ea80 030a 	eor.w	r3, r0, sl
  4019d6:	ea81 040b 	eor.w	r4, r1, fp
  4019da:	4625      	mov	r5, r4
  4019dc:	461c      	mov	r4, r3
  4019de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4019e2:	4022      	ands	r2, r4
  4019e4:	402b      	ands	r3, r5
  4019e6:	4614      	mov	r4, r2
  4019e8:	461d      	mov	r5, r3
  4019ea:	4602      	mov	r2, r0
  4019ec:	460b      	mov	r3, r1
  4019ee:	4062      	eors	r2, r4
  4019f0:	406b      	eors	r3, r5
  4019f2:	4614      	mov	r4, r2
  4019f4:	461d      	mov	r5, r3
  4019f6:	e9d6 2314 	ldrd	r2, r3, [r6, #80]	; 0x50
  4019fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4019fe:	1880      	adds	r0, r0, r2
  401a00:	4159      	adcs	r1, r3
  401a02:	1820      	adds	r0, r4, r0
  401a04:	eb45 0101 	adc.w	r1, r5, r1
  401a08:	e9cd 0102 	strd	r0, r1, [sp, #8]
  401a0c:	2f00      	cmp	r7, #0
  401a0e:	f000 8749 	beq.w	4028a4 <.LCFI3+0x78>

00401a12 <.LBB559>:
  401a12:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
  401a16:	0863      	lsrs	r3, r4, #1
  401a18:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
  401a1c:	f8cd 34f8 	str.w	r3, [sp, #1272]	; 0x4f8
  401a20:	086b      	lsrs	r3, r5, #1
  401a22:	ea43 73c4 	orr.w	r3, r3, r4, lsl #31
  401a26:	f8cd 34fc 	str.w	r3, [sp, #1276]	; 0x4fc

00401a2a <.LBB561>:
  401a2a:	0a23      	lsrs	r3, r4, #8
  401a2c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  401a30:	f8cd 3500 	str.w	r3, [sp, #1280]	; 0x500
  401a34:	0a2b      	lsrs	r3, r5, #8
  401a36:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  401a3a:	f8cd 3504 	str.w	r3, [sp, #1284]	; 0x504

00401a3e <.LBE561>:
  401a3e:	f50d 639f 	add.w	r3, sp, #1272	; 0x4f8
  401a42:	e9d3 2300 	ldrd	r2, r3, [r3]
  401a46:	f50d 61a0 	add.w	r1, sp, #1280	; 0x500
  401a4a:	e9d1 0100 	ldrd	r0, r1, [r1]
  401a4e:	4042      	eors	r2, r0
  401a50:	404b      	eors	r3, r1
  401a52:	09e1      	lsrs	r1, r4, #7
  401a54:	ea41 6145 	orr.w	r1, r1, r5, lsl #25
  401a58:	9158      	str	r1, [sp, #352]	; 0x160
  401a5a:	09e9      	lsrs	r1, r5, #7
  401a5c:	9159      	str	r1, [sp, #356]	; 0x164
  401a5e:	a958      	add	r1, sp, #352	; 0x160
  401a60:	e9d1 0100 	ldrd	r0, r1, [r1]
  401a64:	4050      	eors	r0, r2
  401a66:	4059      	eors	r1, r3
  401a68:	4602      	mov	r2, r0
  401a6a:	460b      	mov	r3, r1
  401a6c:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
  401a70:	1880      	adds	r0, r0, r2
  401a72:	4159      	adcs	r1, r3
  401a74:	4602      	mov	r2, r0
  401a76:	460b      	mov	r3, r1
  401a78:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  401a7c:	1880      	adds	r0, r0, r2
  401a7e:	4159      	adcs	r1, r3
  401a80:	e9cd 0124 	strd	r0, r1, [sp, #144]	; 0x90

00401a84 <.LBB563>:
  401a84:	e9dd 4500 	ldrd	r4, r5, [sp]
  401a88:	0ce1      	lsrs	r1, r4, #19
  401a8a:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
  401a8e:	f8cd 1508 	str.w	r1, [sp, #1288]	; 0x508
  401a92:	0ce9      	lsrs	r1, r5, #19
  401a94:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
  401a98:	f8cd 150c 	str.w	r1, [sp, #1292]	; 0x50c

00401a9c <.LBB565>:
  401a9c:	00e9      	lsls	r1, r5, #3
  401a9e:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
  401aa2:	f8cd 1514 	str.w	r1, [sp, #1300]	; 0x514
  401aa6:	00e1      	lsls	r1, r4, #3
  401aa8:	ea41 7155 	orr.w	r1, r1, r5, lsr #29
  401aac:	f8cd 1510 	str.w	r1, [sp, #1296]	; 0x510

00401ab0 <.LBE565>:
  401ab0:	f50d 63a1 	add.w	r3, sp, #1288	; 0x508
  401ab4:	e9d3 0100 	ldrd	r0, r1, [r3]
  401ab8:	f50d 63a2 	add.w	r3, sp, #1296	; 0x510
  401abc:	e9d3 2300 	ldrd	r2, r3, [r3]
  401ac0:	4050      	eors	r0, r2
  401ac2:	4059      	eors	r1, r3
  401ac4:	09a4      	lsrs	r4, r4, #6
  401ac6:	9d01      	ldr	r5, [sp, #4]
  401ac8:	ea44 6485 	orr.w	r4, r4, r5, lsl #26
  401acc:	945a      	str	r4, [sp, #360]	; 0x168
  401ace:	09ac      	lsrs	r4, r5, #6
  401ad0:	945b      	str	r4, [sp, #364]	; 0x16c
  401ad2:	ab5a      	add	r3, sp, #360	; 0x168
  401ad4:	e9d3 4500 	ldrd	r4, r5, [r3]
  401ad8:	4044      	eors	r4, r0
  401ada:	404d      	eors	r5, r1
  401adc:	4620      	mov	r0, r4
  401ade:	e9dd 3424 	ldrd	r3, r4, [sp, #144]	; 0x90
  401ae2:	181b      	adds	r3, r3, r0
  401ae4:	416c      	adcs	r4, r5
  401ae6:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
  401aea:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  401aee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401af2:	1912      	adds	r2, r2, r4
  401af4:	416b      	adcs	r3, r5
  401af6:	4614      	mov	r4, r2
  401af8:	461d      	mov	r5, r3
  401afa:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
  401afe:	1912      	adds	r2, r2, r4
  401b00:	416b      	adcs	r3, r5
  401b02:	461c      	mov	r4, r3
  401b04:	4613      	mov	r3, r2
  401b06:	e9cd 3402 	strd	r3, r4, [sp, #8]
  401b0a:	eb12 0208 	adds.w	r2, r2, r8
  401b0e:	eb44 0309 	adc.w	r3, r4, r9
  401b12:	4690      	mov	r8, r2
  401b14:	4699      	mov	r9, r3

00401b16 <.LBB567>:
  401b16:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
  401b1a:	0f23      	lsrs	r3, r4, #28
  401b1c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  401b20:	f8cd 3518 	str.w	r3, [sp, #1304]	; 0x518
  401b24:	0f2b      	lsrs	r3, r5, #28
  401b26:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  401b2a:	f8cd 351c 	str.w	r3, [sp, #1308]	; 0x51c

00401b2e <.LBB569>:
  401b2e:	07ab      	lsls	r3, r5, #30
  401b30:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  401b34:	f8cd 3524 	str.w	r3, [sp, #1316]	; 0x524
  401b38:	07a3      	lsls	r3, r4, #30
  401b3a:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  401b3e:	f8cd 3520 	str.w	r3, [sp, #1312]	; 0x520

00401b42 <.LBE569>:
  401b42:	f50d 63a3 	add.w	r3, sp, #1304	; 0x518
  401b46:	e9d3 2300 	ldrd	r2, r3, [r3]
  401b4a:	f50d 61a4 	add.w	r1, sp, #1312	; 0x520
  401b4e:	e9d1 0100 	ldrd	r0, r1, [r1]
  401b52:	4042      	eors	r2, r0
  401b54:	404b      	eors	r3, r1

00401b56 <.LBB571>:
  401b56:	0669      	lsls	r1, r5, #25
  401b58:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  401b5c:	f8cd 152c 	str.w	r1, [sp, #1324]	; 0x52c
  401b60:	0661      	lsls	r1, r4, #25
  401b62:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  401b66:	f8cd 1528 	str.w	r1, [sp, #1320]	; 0x528

00401b6a <.LBE571>:
  401b6a:	f50d 61a5 	add.w	r1, sp, #1320	; 0x528
  401b6e:	e9d1 0100 	ldrd	r0, r1, [r1]
  401b72:	4050      	eors	r0, r2
  401b74:	4059      	eors	r1, r3
  401b76:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  401b7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  401b7e:	4322      	orrs	r2, r4
  401b80:	432b      	orrs	r3, r5
  401b82:	4610      	mov	r0, r2
  401b84:	4619      	mov	r1, r3
  401b86:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  401b8a:	4002      	ands	r2, r0
  401b8c:	400b      	ands	r3, r1
  401b8e:	4610      	mov	r0, r2
  401b90:	4619      	mov	r1, r3
  401b92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  401b96:	4022      	ands	r2, r4
  401b98:	402b      	ands	r3, r5
  401b9a:	4302      	orrs	r2, r0
  401b9c:	430b      	orrs	r3, r1
  401b9e:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  401ba2:	18a4      	adds	r4, r4, r2
  401ba4:	415d      	adcs	r5, r3
  401ba6:	4620      	mov	r0, r4
  401ba8:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
  401bac:	181b      	adds	r3, r3, r0
  401bae:	416c      	adcs	r4, r5
  401bb0:	e9cd 3402 	strd	r3, r4, [sp, #8]

00401bb4 <.LBB573>:
  401bb4:	ea4f 3398 	mov.w	r3, r8, lsr #14
  401bb8:	ea43 4389 	orr.w	r3, r3, r9, lsl #18
  401bbc:	f8cd 3530 	str.w	r3, [sp, #1328]	; 0x530
  401bc0:	ea4f 3399 	mov.w	r3, r9, lsr #14
  401bc4:	ea43 4388 	orr.w	r3, r3, r8, lsl #18
  401bc8:	f8cd 3534 	str.w	r3, [sp, #1332]	; 0x534

00401bcc <.LBB575>:
  401bcc:	ea4f 4398 	mov.w	r3, r8, lsr #18
  401bd0:	ea43 3389 	orr.w	r3, r3, r9, lsl #14
  401bd4:	f8cd 3538 	str.w	r3, [sp, #1336]	; 0x538
  401bd8:	ea4f 4399 	mov.w	r3, r9, lsr #18
  401bdc:	ea43 3388 	orr.w	r3, r3, r8, lsl #14
  401be0:	f8cd 353c 	str.w	r3, [sp, #1340]	; 0x53c

00401be4 <.LBE575>:
  401be4:	f50d 63a6 	add.w	r3, sp, #1328	; 0x530
  401be8:	e9d3 2300 	ldrd	r2, r3, [r3]
  401bec:	f50d 61a7 	add.w	r1, sp, #1336	; 0x538
  401bf0:	e9d1 0100 	ldrd	r0, r1, [r1]
  401bf4:	4042      	eors	r2, r0
  401bf6:	404b      	eors	r3, r1

00401bf8 <.LBB577>:
  401bf8:	ea4f 51c9 	mov.w	r1, r9, lsl #23
  401bfc:	ea41 2158 	orr.w	r1, r1, r8, lsr #9
  401c00:	f8cd 1544 	str.w	r1, [sp, #1348]	; 0x544
  401c04:	ea4f 51c8 	mov.w	r1, r8, lsl #23
  401c08:	ea41 2159 	orr.w	r1, r1, r9, lsr #9
  401c0c:	f8cd 1540 	str.w	r1, [sp, #1344]	; 0x540

00401c10 <.LBE577>:
  401c10:	f50d 61a8 	add.w	r1, sp, #1344	; 0x540
  401c14:	e9d1 0100 	ldrd	r0, r1, [r1]
  401c18:	4050      	eors	r0, r2
  401c1a:	4059      	eors	r1, r3
  401c1c:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  401c20:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  401c24:	ea84 040a 	eor.w	r4, r4, sl
  401c28:	ea85 050b 	eor.w	r5, r5, fp
  401c2c:	ea04 0408 	and.w	r4, r4, r8
  401c30:	ea05 0509 	and.w	r5, r5, r9
  401c34:	ea84 040a 	eor.w	r4, r4, sl
  401c38:	ea85 050b 	eor.w	r5, r5, fp
  401c3c:	e9d6 2316 	ldrd	r2, r3, [r6, #88]	; 0x58
  401c40:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
  401c44:	1880      	adds	r0, r0, r2
  401c46:	4159      	adcs	r1, r3
  401c48:	1820      	adds	r0, r4, r0
  401c4a:	eb45 0101 	adc.w	r1, r5, r1
  401c4e:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  401c52:	2f00      	cmp	r7, #0
  401c54:	f000 862c 	beq.w	4028b0 <.LCFI3+0x84>

00401c58 <.LBB579>:
  401c58:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  401c5c:	0863      	lsrs	r3, r4, #1
  401c5e:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
  401c62:	f8cd 3548 	str.w	r3, [sp, #1352]	; 0x548
  401c66:	086b      	lsrs	r3, r5, #1
  401c68:	ea43 73c4 	orr.w	r3, r3, r4, lsl #31
  401c6c:	f8cd 354c 	str.w	r3, [sp, #1356]	; 0x54c

00401c70 <.LBB581>:
  401c70:	0a23      	lsrs	r3, r4, #8
  401c72:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  401c76:	f8cd 3550 	str.w	r3, [sp, #1360]	; 0x550
  401c7a:	0a2b      	lsrs	r3, r5, #8
  401c7c:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  401c80:	f8cd 3554 	str.w	r3, [sp, #1364]	; 0x554

00401c84 <.LBE581>:
  401c84:	f50d 63a9 	add.w	r3, sp, #1352	; 0x548
  401c88:	e9d3 2300 	ldrd	r2, r3, [r3]
  401c8c:	f50d 61aa 	add.w	r1, sp, #1360	; 0x550
  401c90:	e9d1 0100 	ldrd	r0, r1, [r1]
  401c94:	4042      	eors	r2, r0
  401c96:	404b      	eors	r3, r1
  401c98:	09e1      	lsrs	r1, r4, #7
  401c9a:	ea41 6145 	orr.w	r1, r1, r5, lsl #25
  401c9e:	915c      	str	r1, [sp, #368]	; 0x170
  401ca0:	09e9      	lsrs	r1, r5, #7
  401ca2:	915d      	str	r1, [sp, #372]	; 0x174
  401ca4:	a95c      	add	r1, sp, #368	; 0x170
  401ca6:	e9d1 0100 	ldrd	r0, r1, [r1]
  401caa:	4050      	eors	r0, r2
  401cac:	4059      	eors	r1, r3
  401cae:	4602      	mov	r2, r0
  401cb0:	460b      	mov	r3, r1
  401cb2:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
  401cb6:	1880      	adds	r0, r0, r2
  401cb8:	4159      	adcs	r1, r3
  401cba:	4602      	mov	r2, r0
  401cbc:	460b      	mov	r3, r1
  401cbe:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
  401cc2:	1880      	adds	r0, r0, r2
  401cc4:	4159      	adcs	r1, r3
  401cc6:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50

00401cca <.LBB583>:
  401cca:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
  401cce:	0ce1      	lsrs	r1, r4, #19
  401cd0:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
  401cd4:	f8cd 1558 	str.w	r1, [sp, #1368]	; 0x558
  401cd8:	0ce9      	lsrs	r1, r5, #19
  401cda:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
  401cde:	f8cd 155c 	str.w	r1, [sp, #1372]	; 0x55c

00401ce2 <.LBB585>:
  401ce2:	00e9      	lsls	r1, r5, #3
  401ce4:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
  401ce8:	f8cd 1564 	str.w	r1, [sp, #1380]	; 0x564
  401cec:	00e1      	lsls	r1, r4, #3
  401cee:	ea41 7155 	orr.w	r1, r1, r5, lsr #29
  401cf2:	f8cd 1560 	str.w	r1, [sp, #1376]	; 0x560

00401cf6 <.LBE585>:
  401cf6:	f50d 63ab 	add.w	r3, sp, #1368	; 0x558
  401cfa:	e9d3 0100 	ldrd	r0, r1, [r3]
  401cfe:	f50d 63ac 	add.w	r3, sp, #1376	; 0x560
  401d02:	e9d3 2300 	ldrd	r2, r3, [r3]
  401d06:	4050      	eors	r0, r2
  401d08:	4059      	eors	r1, r3
  401d0a:	09a4      	lsrs	r4, r4, #6
  401d0c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  401d0e:	ea44 6485 	orr.w	r4, r4, r5, lsl #26
  401d12:	945e      	str	r4, [sp, #376]	; 0x178
  401d14:	09ac      	lsrs	r4, r5, #6
  401d16:	945f      	str	r4, [sp, #380]	; 0x17c
  401d18:	ab5e      	add	r3, sp, #376	; 0x178
  401d1a:	e9d3 4500 	ldrd	r4, r5, [r3]
  401d1e:	4044      	eors	r4, r0
  401d20:	404d      	eors	r5, r1
  401d22:	4620      	mov	r0, r4
  401d24:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
  401d28:	181b      	adds	r3, r3, r0
  401d2a:	416c      	adcs	r4, r5
  401d2c:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
  401d30:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  401d34:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  401d38:	1912      	adds	r2, r2, r4
  401d3a:	416b      	adcs	r3, r5
  401d3c:	4614      	mov	r4, r2
  401d3e:	461d      	mov	r5, r3
  401d40:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
  401d44:	1912      	adds	r2, r2, r4
  401d46:	416b      	adcs	r3, r5
  401d48:	4610      	mov	r0, r2
  401d4a:	4619      	mov	r1, r3
  401d4c:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  401d50:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  401d54:	1880      	adds	r0, r0, r2
  401d56:	4159      	adcs	r1, r3
  401d58:	4602      	mov	r2, r0
  401d5a:	460b      	mov	r3, r1
  401d5c:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68

00401d60 <.LBB587>:
  401d60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  401d64:	0f03      	lsrs	r3, r0, #28
  401d66:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  401d6a:	f8cd 3568 	str.w	r3, [sp, #1384]	; 0x568
  401d6e:	0f0b      	lsrs	r3, r1, #28
  401d70:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  401d74:	f8cd 356c 	str.w	r3, [sp, #1388]	; 0x56c

00401d78 <.LBB589>:
  401d78:	078b      	lsls	r3, r1, #30
  401d7a:	ea43 0390 	orr.w	r3, r3, r0, lsr #2
  401d7e:	f8cd 3574 	str.w	r3, [sp, #1396]	; 0x574
  401d82:	0783      	lsls	r3, r0, #30
  401d84:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  401d88:	f8cd 3570 	str.w	r3, [sp, #1392]	; 0x570

00401d8c <.LBE589>:
  401d8c:	f50d 63ad 	add.w	r3, sp, #1384	; 0x568
  401d90:	e9d3 3400 	ldrd	r3, r4, [r3]
  401d94:	f50d 62ae 	add.w	r2, sp, #1392	; 0x570
  401d98:	e9d2 1200 	ldrd	r1, r2, [r2]
  401d9c:	404b      	eors	r3, r1
  401d9e:	4054      	eors	r4, r2
  401da0:	461a      	mov	r2, r3
  401da2:	4623      	mov	r3, r4

00401da4 <.LBB591>:
  401da4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  401da8:	0669      	lsls	r1, r5, #25
  401daa:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  401dae:	f8cd 157c 	str.w	r1, [sp, #1404]	; 0x57c
  401db2:	0661      	lsls	r1, r4, #25
  401db4:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  401db8:	f8cd 1578 	str.w	r1, [sp, #1400]	; 0x578

00401dbc <.LBE591>:
  401dbc:	f50d 61af 	add.w	r1, sp, #1400	; 0x578
  401dc0:	e9d1 0100 	ldrd	r0, r1, [r1]
  401dc4:	4050      	eors	r0, r2
  401dc6:	4059      	eors	r1, r3
  401dc8:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  401dcc:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  401dd0:	4322      	orrs	r2, r4
  401dd2:	432b      	orrs	r3, r5
  401dd4:	4619      	mov	r1, r3
  401dd6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
  401dda:	4013      	ands	r3, r2
  401ddc:	400c      	ands	r4, r1
  401dde:	e9cd 342e 	strd	r3, r4, [sp, #184]	; 0xb8
  401de2:	e9dd 122a 	ldrd	r1, r2, [sp, #168]	; 0xa8
  401de6:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
  401dea:	4019      	ands	r1, r3
  401dec:	4022      	ands	r2, r4
  401dee:	4608      	mov	r0, r1
  401df0:	e9dd 452e 	ldrd	r4, r5, [sp, #184]	; 0xb8
  401df4:	4304      	orrs	r4, r0
  401df6:	4315      	orrs	r5, r2
  401df8:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
  401dfc:	1912      	adds	r2, r2, r4
  401dfe:	416b      	adcs	r3, r5
  401e00:	4619      	mov	r1, r3
  401e02:	e9dd 3418 	ldrd	r3, r4, [sp, #96]	; 0x60
  401e06:	189b      	adds	r3, r3, r2
  401e08:	414c      	adcs	r4, r1
  401e0a:	e9cd 342c 	strd	r3, r4, [sp, #176]	; 0xb0

00401e0e <.LBB593>:
  401e0e:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
  401e12:	0ba3      	lsrs	r3, r4, #14
  401e14:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
  401e18:	f8cd 3580 	str.w	r3, [sp, #1408]	; 0x580
  401e1c:	0bab      	lsrs	r3, r5, #14
  401e1e:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
  401e22:	f8cd 3584 	str.w	r3, [sp, #1412]	; 0x584

00401e26 <.LBB595>:
  401e26:	0ca3      	lsrs	r3, r4, #18
  401e28:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
  401e2c:	f8cd 3588 	str.w	r3, [sp, #1416]	; 0x588
  401e30:	0cab      	lsrs	r3, r5, #18
  401e32:	ea43 3384 	orr.w	r3, r3, r4, lsl #14
  401e36:	f8cd 358c 	str.w	r3, [sp, #1420]	; 0x58c

00401e3a <.LBE595>:
        R(12); R(13); R(14); R(15);
  401e3a:	f50d 63b0 	add.w	r3, sp, #1408	; 0x580
  401e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
  401e42:	f50d 61b1 	add.w	r1, sp, #1416	; 0x588
  401e46:	e9d1 0100 	ldrd	r0, r1, [r1]
  401e4a:	4042      	eors	r2, r0
  401e4c:	404b      	eors	r3, r1

00401e4e <.LBB597>:
  401e4e:	05e9      	lsls	r1, r5, #23
  401e50:	ea41 2154 	orr.w	r1, r1, r4, lsr #9
  401e54:	f8cd 1594 	str.w	r1, [sp, #1428]	; 0x594
  401e58:	05e1      	lsls	r1, r4, #23
  401e5a:	ea41 2155 	orr.w	r1, r1, r5, lsr #9
  401e5e:	f8cd 1590 	str.w	r1, [sp, #1424]	; 0x590

00401e62 <.LBE597>:
  401e62:	f50d 61b2 	add.w	r1, sp, #1424	; 0x590
  401e66:	e9d1 0100 	ldrd	r0, r1, [r1]
  401e6a:	4050      	eors	r0, r2
  401e6c:	4059      	eors	r1, r3
  401e6e:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  401e72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  401e76:	ea80 0308 	eor.w	r3, r0, r8
  401e7a:	ea81 0409 	eor.w	r4, r1, r9
  401e7e:	4625      	mov	r5, r4
  401e80:	461c      	mov	r4, r3
  401e82:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  401e86:	4022      	ands	r2, r4
  401e88:	402b      	ands	r3, r5
  401e8a:	4614      	mov	r4, r2
  401e8c:	461d      	mov	r5, r3
  401e8e:	4602      	mov	r2, r0
  401e90:	460b      	mov	r3, r1
  401e92:	4062      	eors	r2, r4
  401e94:	406b      	eors	r3, r5
  401e96:	4614      	mov	r4, r2
  401e98:	461d      	mov	r5, r3
  401e9a:	e9d6 2318 	ldrd	r2, r3, [r6, #96]	; 0x60
  401e9e:	eb12 020a 	adds.w	r2, r2, sl
  401ea2:	eb43 030b 	adc.w	r3, r3, fp
  401ea6:	18a4      	adds	r4, r4, r2
  401ea8:	415d      	adcs	r5, r3
  401eaa:	2f00      	cmp	r7, #0
  401eac:	f000 8506 	beq.w	4028bc <.LCFI3+0x90>

00401eb0 <.LBB599>:
  401eb0:	e9dd ab26 	ldrd	sl, fp, [sp, #152]	; 0x98
  401eb4:	4653      	mov	r3, sl
  401eb6:	085b      	lsrs	r3, r3, #1
  401eb8:	465a      	mov	r2, fp
  401eba:	ea43 73cb 	orr.w	r3, r3, fp, lsl #31
  401ebe:	f8cd 3598 	str.w	r3, [sp, #1432]	; 0x598
  401ec2:	0853      	lsrs	r3, r2, #1
  401ec4:	4652      	mov	r2, sl
  401ec6:	ea43 73ca 	orr.w	r3, r3, sl, lsl #31
  401eca:	f8cd 359c 	str.w	r3, [sp, #1436]	; 0x59c

00401ece <.LBB601>:
  401ece:	0a13      	lsrs	r3, r2, #8
  401ed0:	465a      	mov	r2, fp
  401ed2:	ea43 630b 	orr.w	r3, r3, fp, lsl #24
  401ed6:	f8cd 35a0 	str.w	r3, [sp, #1440]	; 0x5a0
  401eda:	0a13      	lsrs	r3, r2, #8
  401edc:	ea43 630a 	orr.w	r3, r3, sl, lsl #24
  401ee0:	f8cd 35a4 	str.w	r3, [sp, #1444]	; 0x5a4

00401ee4 <.LBE601>:
  401ee4:	f50d 63b3 	add.w	r3, sp, #1432	; 0x598
  401ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
  401eec:	f50d 61b4 	add.w	r1, sp, #1440	; 0x5a0
  401ef0:	e9d1 0100 	ldrd	r0, r1, [r1]
  401ef4:	4042      	eors	r2, r0
  401ef6:	404b      	eors	r3, r1
  401ef8:	4651      	mov	r1, sl
  401efa:	09c9      	lsrs	r1, r1, #7
  401efc:	4658      	mov	r0, fp
  401efe:	ea41 614b 	orr.w	r1, r1, fp, lsl #25
  401f02:	9160      	str	r1, [sp, #384]	; 0x180
  401f04:	09c1      	lsrs	r1, r0, #7
  401f06:	9161      	str	r1, [sp, #388]	; 0x184
  401f08:	a960      	add	r1, sp, #384	; 0x180
  401f0a:	e9d1 0100 	ldrd	r0, r1, [r1]
  401f0e:	4050      	eors	r0, r2
  401f10:	4059      	eors	r1, r3
  401f12:	4602      	mov	r2, r0
  401f14:	460b      	mov	r3, r1
  401f16:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  401f1a:	1880      	adds	r0, r0, r2
  401f1c:	4159      	adcs	r1, r3
  401f1e:	4602      	mov	r2, r0
  401f20:	460b      	mov	r3, r1
  401f22:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  401f26:	1880      	adds	r0, r0, r2
  401f28:	4159      	adcs	r1, r3
  401f2a:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58

00401f2e <.LBB603>:
  401f2e:	e9dd ab24 	ldrd	sl, fp, [sp, #144]	; 0x90
  401f32:	4651      	mov	r1, sl
  401f34:	0cc9      	lsrs	r1, r1, #19
  401f36:	4658      	mov	r0, fp
  401f38:	ea41 314b 	orr.w	r1, r1, fp, lsl #13
  401f3c:	f8cd 15a8 	str.w	r1, [sp, #1448]	; 0x5a8
  401f40:	0cc1      	lsrs	r1, r0, #19
  401f42:	4650      	mov	r0, sl
  401f44:	ea41 314a 	orr.w	r1, r1, sl, lsl #13
  401f48:	f8cd 15ac 	str.w	r1, [sp, #1452]	; 0x5ac

00401f4c <.LBB605>:
  401f4c:	4659      	mov	r1, fp
  401f4e:	00c9      	lsls	r1, r1, #3
  401f50:	ea41 715a 	orr.w	r1, r1, sl, lsr #29
  401f54:	f8cd 15b4 	str.w	r1, [sp, #1460]	; 0x5b4
  401f58:	00c1      	lsls	r1, r0, #3
  401f5a:	ea41 715b 	orr.w	r1, r1, fp, lsr #29
  401f5e:	f8cd 15b0 	str.w	r1, [sp, #1456]	; 0x5b0

00401f62 <.LBE605>:
  401f62:	f50d 63b5 	add.w	r3, sp, #1448	; 0x5a8
  401f66:	e9d3 0100 	ldrd	r0, r1, [r3]
  401f6a:	f50d 63b6 	add.w	r3, sp, #1456	; 0x5b0
  401f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
  401f72:	4050      	eors	r0, r2
  401f74:	4059      	eors	r1, r3
  401f76:	4653      	mov	r3, sl
  401f78:	099b      	lsrs	r3, r3, #6
  401f7a:	465a      	mov	r2, fp
  401f7c:	ea43 638b 	orr.w	r3, r3, fp, lsl #26
  401f80:	9362      	str	r3, [sp, #392]	; 0x188
  401f82:	0993      	lsrs	r3, r2, #6
  401f84:	9363      	str	r3, [sp, #396]	; 0x18c
  401f86:	ab62      	add	r3, sp, #392	; 0x188
  401f88:	e9d3 2300 	ldrd	r2, r3, [r3]
  401f8c:	4042      	eors	r2, r0
  401f8e:	404b      	eors	r3, r1
  401f90:	4610      	mov	r0, r2
  401f92:	4619      	mov	r1, r3
  401f94:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  401f98:	1812      	adds	r2, r2, r0
  401f9a:	414b      	adcs	r3, r1
  401f9c:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  401fa0:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  401fa4:	1912      	adds	r2, r2, r4
  401fa6:	416b      	adcs	r3, r5
  401fa8:	e9dd ab16 	ldrd	sl, fp, [sp, #88]	; 0x58
  401fac:	eb1a 0a02 	adds.w	sl, sl, r2
  401fb0:	eb4b 0b03 	adc.w	fp, fp, r3
  401fb4:	4651      	mov	r1, sl
  401fb6:	465a      	mov	r2, fp
  401fb8:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
  401fbc:	e9cd 1218 	strd	r1, r2, [sp, #96]	; 0x60
  401fc0:	eb1a 0103 	adds.w	r1, sl, r3
  401fc4:	eb4b 0204 	adc.w	r2, fp, r4
  401fc8:	460b      	mov	r3, r1
  401fca:	4614      	mov	r4, r2
  401fcc:	e9cd 3406 	strd	r3, r4, [sp, #24]

00401fd0 <.LBB607>:
  401fd0:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  401fd4:	0f23      	lsrs	r3, r4, #28
  401fd6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  401fda:	f8cd 35b8 	str.w	r3, [sp, #1464]	; 0x5b8
  401fde:	0f2b      	lsrs	r3, r5, #28
  401fe0:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  401fe4:	f8cd 35bc 	str.w	r3, [sp, #1468]	; 0x5bc

00401fe8 <.LBB609>:
  401fe8:	07ab      	lsls	r3, r5, #30
  401fea:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  401fee:	f8cd 35c4 	str.w	r3, [sp, #1476]	; 0x5c4
  401ff2:	07a3      	lsls	r3, r4, #30
  401ff4:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  401ff8:	f8cd 35c0 	str.w	r3, [sp, #1472]	; 0x5c0

00401ffc <.LBE609>:
  401ffc:	f50d 63b7 	add.w	r3, sp, #1464	; 0x5b8
  402000:	e9d3 2300 	ldrd	r2, r3, [r3]
  402004:	f50d 61b8 	add.w	r1, sp, #1472	; 0x5c0
  402008:	e9d1 ab00 	ldrd	sl, fp, [r1]
  40200c:	ea82 020a 	eor.w	r2, r2, sl
  402010:	ea83 030b 	eor.w	r3, r3, fp

00402014 <.LBB611>:
  402014:	0669      	lsls	r1, r5, #25
  402016:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  40201a:	f8cd 15cc 	str.w	r1, [sp, #1484]	; 0x5cc
  40201e:	0661      	lsls	r1, r4, #25
  402020:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  402024:	f8cd 15c8 	str.w	r1, [sp, #1480]	; 0x5c8

00402028 <.LBE611>:
  402028:	f50d 61b9 	add.w	r1, sp, #1480	; 0x5c8
  40202c:	e9d1 0100 	ldrd	r0, r1, [r1]
  402030:	4050      	eors	r0, r2
  402032:	4059      	eors	r1, r3
  402034:	e9cd 012e 	strd	r0, r1, [sp, #184]	; 0xb8
  402038:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40203c:	4610      	mov	r0, r2
  40203e:	4619      	mov	r1, r3
  402040:	4320      	orrs	r0, r4
  402042:	4329      	orrs	r1, r5
  402044:	e9dd ab2a 	ldrd	sl, fp, [sp, #168]	; 0xa8
  402048:	ea0a 0a00 	and.w	sl, sl, r0
  40204c:	ea0b 0b01 	and.w	fp, fp, r1
  402050:	4650      	mov	r0, sl
  402052:	4659      	mov	r1, fp
  402054:	4022      	ands	r2, r4
  402056:	402b      	ands	r3, r5
  402058:	4310      	orrs	r0, r2
  40205a:	4319      	orrs	r1, r3
  40205c:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
  402060:	181b      	adds	r3, r3, r0
  402062:	414c      	adcs	r4, r1
  402064:	e9dd ab18 	ldrd	sl, fp, [sp, #96]	; 0x60
  402068:	eb1a 0a03 	adds.w	sl, sl, r3
  40206c:	eb4b 0b04 	adc.w	fp, fp, r4

00402070 <.LBB613>:
  402070:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  402074:	0b83      	lsrs	r3, r0, #14
  402076:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  40207a:	f8cd 35d0 	str.w	r3, [sp, #1488]	; 0x5d0
  40207e:	0b8b      	lsrs	r3, r1, #14
  402080:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
  402084:	f8cd 35d4 	str.w	r3, [sp, #1492]	; 0x5d4

00402088 <.LBB615>:
  402088:	0c83      	lsrs	r3, r0, #18
  40208a:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
  40208e:	f8cd 35d8 	str.w	r3, [sp, #1496]	; 0x5d8
  402092:	0c8b      	lsrs	r3, r1, #18
  402094:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
  402098:	f8cd 35dc 	str.w	r3, [sp, #1500]	; 0x5dc

0040209c <.LBE615>:
  40209c:	f50d 63ba 	add.w	r3, sp, #1488	; 0x5d0
  4020a0:	e9d3 4500 	ldrd	r4, r5, [r3]
  4020a4:	f50d 63bb 	add.w	r3, sp, #1496	; 0x5d8
  4020a8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4020ac:	4054      	eors	r4, r2
  4020ae:	405d      	eors	r5, r3

004020b0 <.LBB617>:
  4020b0:	05c9      	lsls	r1, r1, #23
  4020b2:	9b06      	ldr	r3, [sp, #24]
  4020b4:	ea41 2353 	orr.w	r3, r1, r3, lsr #9
  4020b8:	f8cd 35e4 	str.w	r3, [sp, #1508]	; 0x5e4
  4020bc:	9b06      	ldr	r3, [sp, #24]
  4020be:	05d9      	lsls	r1, r3, #23
  4020c0:	9b07      	ldr	r3, [sp, #28]
  4020c2:	ea41 2353 	orr.w	r3, r1, r3, lsr #9
  4020c6:	f8cd 35e0 	str.w	r3, [sp, #1504]	; 0x5e0

004020ca <.LBE617>:
  4020ca:	f50d 63bc 	add.w	r3, sp, #1504	; 0x5e0
  4020ce:	e9d3 2300 	ldrd	r2, r3, [r3]
  4020d2:	4062      	eors	r2, r4
  4020d4:	406b      	eors	r3, r5
  4020d6:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  4020da:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  4020de:	ea80 0008 	eor.w	r0, r0, r8
  4020e2:	ea81 0109 	eor.w	r1, r1, r9
  4020e6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
  4020ea:	4003      	ands	r3, r0
  4020ec:	400c      	ands	r4, r1
  4020ee:	ea83 0008 	eor.w	r0, r3, r8
  4020f2:	ea84 0109 	eor.w	r1, r4, r9
  4020f6:	e9d6 231a 	ldrd	r2, r3, [r6, #104]	; 0x68
  4020fa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  4020fe:	18a4      	adds	r4, r4, r2
  402100:	415d      	adcs	r5, r3
  402102:	1904      	adds	r4, r0, r4
  402104:	eb41 0505 	adc.w	r5, r1, r5
  402108:	e9cd 4504 	strd	r4, r5, [sp, #16]
  40210c:	2f00      	cmp	r7, #0
  40210e:	f000 83db 	beq.w	4028c8 <.LCFI3+0x9c>

00402112 <.LBB619>:
  402112:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
  402116:	0863      	lsrs	r3, r4, #1
  402118:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
  40211c:	f8cd 35e8 	str.w	r3, [sp, #1512]	; 0x5e8
  402120:	086b      	lsrs	r3, r5, #1
  402122:	ea43 73c4 	orr.w	r3, r3, r4, lsl #31
  402126:	f8cd 35ec 	str.w	r3, [sp, #1516]	; 0x5ec

0040212a <.LBB621>:
  40212a:	0a23      	lsrs	r3, r4, #8
  40212c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  402130:	f8cd 35f0 	str.w	r3, [sp, #1520]	; 0x5f0
  402134:	0a2b      	lsrs	r3, r5, #8
  402136:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  40213a:	f8cd 35f4 	str.w	r3, [sp, #1524]	; 0x5f4

0040213e <.LBE621>:
  40213e:	f50d 63bd 	add.w	r3, sp, #1512	; 0x5e8
  402142:	e9d3 2300 	ldrd	r2, r3, [r3]
  402146:	f50d 61be 	add.w	r1, sp, #1520	; 0x5f0
  40214a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40214e:	4042      	eors	r2, r0
  402150:	404b      	eors	r3, r1
  402152:	09e1      	lsrs	r1, r4, #7
  402154:	ea41 6145 	orr.w	r1, r1, r5, lsl #25
  402158:	9164      	str	r1, [sp, #400]	; 0x190
  40215a:	09e9      	lsrs	r1, r5, #7
  40215c:	9165      	str	r1, [sp, #404]	; 0x194
  40215e:	a964      	add	r1, sp, #400	; 0x190
  402160:	e9d1 0100 	ldrd	r0, r1, [r1]
  402164:	4050      	eors	r0, r2
  402166:	4059      	eors	r1, r3
  402168:	4602      	mov	r2, r0
  40216a:	460b      	mov	r3, r1
  40216c:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
  402170:	1880      	adds	r0, r0, r2
  402172:	4159      	adcs	r1, r3
  402174:	4602      	mov	r2, r0
  402176:	460b      	mov	r3, r1
  402178:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40217c:	1880      	adds	r0, r0, r2
  40217e:	4159      	adcs	r1, r3
  402180:	e9cd 0126 	strd	r0, r1, [sp, #152]	; 0x98

00402184 <.LBB623>:
  402184:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
  402188:	0ce1      	lsrs	r1, r4, #19
  40218a:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
  40218e:	f8cd 15f8 	str.w	r1, [sp, #1528]	; 0x5f8
  402192:	0ce9      	lsrs	r1, r5, #19
  402194:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
  402198:	f8cd 15fc 	str.w	r1, [sp, #1532]	; 0x5fc

0040219c <.LBB625>:
  40219c:	00e9      	lsls	r1, r5, #3
  40219e:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
  4021a2:	f8cd 1604 	str.w	r1, [sp, #1540]	; 0x604
  4021a6:	00e1      	lsls	r1, r4, #3
  4021a8:	ea41 7155 	orr.w	r1, r1, r5, lsr #29
  4021ac:	f8cd 1600 	str.w	r1, [sp, #1536]	; 0x600

004021b0 <.LBE625>:
  4021b0:	f50d 63bf 	add.w	r3, sp, #1528	; 0x5f8
  4021b4:	e9d3 0100 	ldrd	r0, r1, [r3]
  4021b8:	f50d 63c0 	add.w	r3, sp, #1536	; 0x600
  4021bc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4021c0:	4050      	eors	r0, r2
  4021c2:	4059      	eors	r1, r3
  4021c4:	09a4      	lsrs	r4, r4, #6
  4021c6:	9d15      	ldr	r5, [sp, #84]	; 0x54
  4021c8:	ea44 6485 	orr.w	r4, r4, r5, lsl #26
  4021cc:	9466      	str	r4, [sp, #408]	; 0x198
  4021ce:	09ac      	lsrs	r4, r5, #6
  4021d0:	9467      	str	r4, [sp, #412]	; 0x19c
  4021d2:	ab66      	add	r3, sp, #408	; 0x198
  4021d4:	e9d3 4500 	ldrd	r4, r5, [r3]
  4021d8:	4044      	eors	r4, r0
  4021da:	404d      	eors	r5, r1
  4021dc:	4620      	mov	r0, r4
  4021de:	e9dd 3426 	ldrd	r3, r4, [sp, #152]	; 0x98
  4021e2:	181b      	adds	r3, r3, r0
  4021e4:	416c      	adcs	r4, r5
  4021e6:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
  4021ea:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  4021ee:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  4021f2:	1912      	adds	r2, r2, r4
  4021f4:	416b      	adcs	r3, r5
  4021f6:	4614      	mov	r4, r2
  4021f8:	461d      	mov	r5, r3
  4021fa:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
  4021fe:	1912      	adds	r2, r2, r4
  402200:	416b      	adcs	r3, r5
  402202:	4610      	mov	r0, r2
  402204:	4619      	mov	r1, r3
  402206:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  40220a:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  40220e:	1880      	adds	r0, r0, r2
  402210:	4159      	adcs	r1, r3
  402212:	4602      	mov	r2, r0
  402214:	460b      	mov	r3, r1
  402216:	e9cd 2304 	strd	r2, r3, [sp, #16]

0040221a <.LBB627>:
  40221a:	ea4f 731a 	mov.w	r3, sl, lsr #28
  40221e:	ea43 130b 	orr.w	r3, r3, fp, lsl #4
  402222:	f8cd 3608 	str.w	r3, [sp, #1544]	; 0x608
  402226:	ea4f 731b 	mov.w	r3, fp, lsr #28
  40222a:	ea43 130a 	orr.w	r3, r3, sl, lsl #4
  40222e:	f8cd 360c 	str.w	r3, [sp, #1548]	; 0x60c

00402232 <.LBB629>:
  402232:	ea4f 738b 	mov.w	r3, fp, lsl #30
  402236:	ea43 039a 	orr.w	r3, r3, sl, lsr #2
  40223a:	f8cd 3614 	str.w	r3, [sp, #1556]	; 0x614
  40223e:	ea4f 738a 	mov.w	r3, sl, lsl #30
  402242:	ea43 039b 	orr.w	r3, r3, fp, lsr #2
  402246:	f8cd 3610 	str.w	r3, [sp, #1552]	; 0x610

0040224a <.LBE629>:
  40224a:	f50d 63c1 	add.w	r3, sp, #1544	; 0x608
  40224e:	e9d3 3400 	ldrd	r3, r4, [r3]
  402252:	f50d 62c2 	add.w	r2, sp, #1552	; 0x610
  402256:	e9d2 1200 	ldrd	r1, r2, [r2]
  40225a:	404b      	eors	r3, r1
  40225c:	4054      	eors	r4, r2
  40225e:	461a      	mov	r2, r3
  402260:	4623      	mov	r3, r4

00402262 <.LBB631>:
  402262:	ea4f 614b 	mov.w	r1, fp, lsl #25
  402266:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
  40226a:	f8cd 161c 	str.w	r1, [sp, #1564]	; 0x61c
  40226e:	ea4f 614a 	mov.w	r1, sl, lsl #25
  402272:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
  402276:	f8cd 1618 	str.w	r1, [sp, #1560]	; 0x618

0040227a <.LBE631>:
  40227a:	f50d 61c3 	add.w	r1, sp, #1560	; 0x618
  40227e:	e9d1 4500 	ldrd	r4, r5, [r1]
  402282:	4054      	eors	r4, r2
  402284:	405d      	eors	r5, r3
  402286:	e9cd 452a 	strd	r4, r5, [sp, #168]	; 0xa8
  40228a:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  40228e:	ea44 000a 	orr.w	r0, r4, sl
  402292:	ea45 010b 	orr.w	r1, r5, fp
  402296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40229a:	4002      	ands	r2, r0
  40229c:	400b      	ands	r3, r1
  40229e:	ea04 040a 	and.w	r4, r4, sl
  4022a2:	ea05 050b 	and.w	r5, r5, fp
  4022a6:	4314      	orrs	r4, r2
  4022a8:	431d      	orrs	r5, r3
  4022aa:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  4022ae:	1912      	adds	r2, r2, r4
  4022b0:	416b      	adcs	r3, r5
  4022b2:	4619      	mov	r1, r3
  4022b4:	e9dd 3418 	ldrd	r3, r4, [sp, #96]	; 0x60
  4022b8:	189b      	adds	r3, r3, r2
  4022ba:	414c      	adcs	r4, r1
  4022bc:	e9cd 342a 	strd	r3, r4, [sp, #168]	; 0xa8

004022c0 <.LBB633>:
  4022c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4022c4:	0b83      	lsrs	r3, r0, #14
  4022c6:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  4022ca:	f8cd 3620 	str.w	r3, [sp, #1568]	; 0x620
  4022ce:	0b8b      	lsrs	r3, r1, #14
  4022d0:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
  4022d4:	f8cd 3624 	str.w	r3, [sp, #1572]	; 0x624

004022d8 <.LBB635>:
  4022d8:	0c83      	lsrs	r3, r0, #18
  4022da:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
  4022de:	f8cd 3628 	str.w	r3, [sp, #1576]	; 0x628
  4022e2:	0c8b      	lsrs	r3, r1, #18
  4022e4:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
  4022e8:	f8cd 362c 	str.w	r3, [sp, #1580]	; 0x62c

004022ec <.LBE635>:
  4022ec:	f50d 63c4 	add.w	r3, sp, #1568	; 0x620
  4022f0:	e9d3 4500 	ldrd	r4, r5, [r3]
  4022f4:	f50d 63c5 	add.w	r3, sp, #1576	; 0x628
  4022f8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4022fc:	4054      	eors	r4, r2
  4022fe:	405d      	eors	r5, r3

00402300 <.LBB637>:
  402300:	05c9      	lsls	r1, r1, #23
  402302:	9b04      	ldr	r3, [sp, #16]
  402304:	ea41 2353 	orr.w	r3, r1, r3, lsr #9
  402308:	f8cd 3634 	str.w	r3, [sp, #1588]	; 0x634
  40230c:	9b04      	ldr	r3, [sp, #16]
  40230e:	05d9      	lsls	r1, r3, #23
  402310:	9b05      	ldr	r3, [sp, #20]
  402312:	ea41 2353 	orr.w	r3, r1, r3, lsr #9
  402316:	f8cd 3630 	str.w	r3, [sp, #1584]	; 0x630

0040231a <.LBE637>:
  40231a:	f50d 63c6 	add.w	r3, sp, #1584	; 0x630
  40231e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402322:	4062      	eors	r2, r4
  402324:	406b      	eors	r3, r5
  402326:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  40232a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  40232e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  402332:	4050      	eors	r0, r2
  402334:	4059      	eors	r1, r3
  402336:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
  40233a:	4003      	ands	r3, r0
  40233c:	400c      	ands	r4, r1
  40233e:	4618      	mov	r0, r3
  402340:	4621      	mov	r1, r4
  402342:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
  402346:	4043      	eors	r3, r0
  402348:	404c      	eors	r4, r1
  40234a:	4618      	mov	r0, r3
  40234c:	e9d6 231c 	ldrd	r2, r3, [r6, #112]	; 0x70
  402350:	eb18 0802 	adds.w	r8, r8, r2
  402354:	eb49 0903 	adc.w	r9, r9, r3
  402358:	eb18 0800 	adds.w	r8, r8, r0
  40235c:	eb49 0904 	adc.w	r9, r9, r4
  402360:	2f00      	cmp	r7, #0
  402362:	f000 82b6 	beq.w	4028d2 <.LCFI3+0xa6>

00402366 <.LBB639>:
  402366:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
  40236a:	0863      	lsrs	r3, r4, #1
  40236c:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
  402370:	f8cd 3638 	str.w	r3, [sp, #1592]	; 0x638
  402374:	086b      	lsrs	r3, r5, #1
  402376:	ea43 73c4 	orr.w	r3, r3, r4, lsl #31
  40237a:	f8cd 363c 	str.w	r3, [sp, #1596]	; 0x63c

0040237e <.LBB641>:
  40237e:	0a23      	lsrs	r3, r4, #8
  402380:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  402384:	f8cd 3640 	str.w	r3, [sp, #1600]	; 0x640
  402388:	0a2b      	lsrs	r3, r5, #8
  40238a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  40238e:	f8cd 3644 	str.w	r3, [sp, #1604]	; 0x644

00402392 <.LBE641>:
  402392:	f50d 63c7 	add.w	r3, sp, #1592	; 0x638
  402396:	e9d3 2300 	ldrd	r2, r3, [r3]
  40239a:	f50d 61c8 	add.w	r1, sp, #1600	; 0x640
  40239e:	e9d1 0100 	ldrd	r0, r1, [r1]
  4023a2:	4042      	eors	r2, r0
  4023a4:	404b      	eors	r3, r1
  4023a6:	09e1      	lsrs	r1, r4, #7
  4023a8:	ea41 6145 	orr.w	r1, r1, r5, lsl #25
  4023ac:	9168      	str	r1, [sp, #416]	; 0x1a0
  4023ae:	09e9      	lsrs	r1, r5, #7
  4023b0:	9169      	str	r1, [sp, #420]	; 0x1a4
  4023b2:	a968      	add	r1, sp, #416	; 0x1a0
  4023b4:	e9d1 0100 	ldrd	r0, r1, [r1]
  4023b8:	4050      	eors	r0, r2
  4023ba:	4059      	eors	r1, r3
  4023bc:	4602      	mov	r2, r0
  4023be:	460b      	mov	r3, r1
  4023c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  4023c4:	1880      	adds	r0, r0, r2
  4023c6:	4159      	adcs	r1, r3
  4023c8:	4602      	mov	r2, r0
  4023ca:	460b      	mov	r3, r1
  4023cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4023d0:	1880      	adds	r0, r0, r2
  4023d2:	4159      	adcs	r1, r3
  4023d4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30

004023d8 <.LBB643>:
  4023d8:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  4023dc:	0ce1      	lsrs	r1, r4, #19
  4023de:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
  4023e2:	f8cd 1648 	str.w	r1, [sp, #1608]	; 0x648
  4023e6:	0ce9      	lsrs	r1, r5, #19
  4023e8:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
  4023ec:	f8cd 164c 	str.w	r1, [sp, #1612]	; 0x64c

004023f0 <.LBB645>:
  4023f0:	00e9      	lsls	r1, r5, #3
  4023f2:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
  4023f6:	f8cd 1654 	str.w	r1, [sp, #1620]	; 0x654
  4023fa:	00e1      	lsls	r1, r4, #3
  4023fc:	ea41 7155 	orr.w	r1, r1, r5, lsr #29
  402400:	f8cd 1650 	str.w	r1, [sp, #1616]	; 0x650

00402404 <.LBE645>:
  402404:	f50d 63c9 	add.w	r3, sp, #1608	; 0x648
  402408:	e9d3 0100 	ldrd	r0, r1, [r3]
  40240c:	f50d 63ca 	add.w	r3, sp, #1616	; 0x650
  402410:	e9d3 2300 	ldrd	r2, r3, [r3]
  402414:	4050      	eors	r0, r2
  402416:	4059      	eors	r1, r3
  402418:	09a4      	lsrs	r4, r4, #6
  40241a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
  40241c:	ea44 6485 	orr.w	r4, r4, r5, lsl #26
  402420:	946a      	str	r4, [sp, #424]	; 0x1a8
  402422:	09ac      	lsrs	r4, r5, #6
  402424:	946b      	str	r4, [sp, #428]	; 0x1ac
  402426:	ab6a      	add	r3, sp, #424	; 0x1a8
  402428:	e9d3 4500 	ldrd	r4, r5, [r3]
  40242c:	4044      	eors	r4, r0
  40242e:	404d      	eors	r5, r1
  402430:	4620      	mov	r0, r4
  402432:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
  402436:	181b      	adds	r3, r3, r0
  402438:	416c      	adcs	r4, r5
  40243a:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
  40243e:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
  402442:	eb14 0408 	adds.w	r4, r4, r8
  402446:	eb45 0509 	adc.w	r5, r5, r9
  40244a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  40244e:	1912      	adds	r2, r2, r4
  402450:	416b      	adcs	r3, r5
  402452:	461c      	mov	r4, r3
  402454:	4613      	mov	r3, r2
  402456:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  40245a:	e9cd 3402 	strd	r3, r4, [sp, #8]
  40245e:	eb12 0208 	adds.w	r2, r2, r8
  402462:	eb44 0309 	adc.w	r3, r4, r9
  402466:	4690      	mov	r8, r2
  402468:	4699      	mov	r9, r3

0040246a <.LBB647>:
  40246a:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
  40246e:	0f23      	lsrs	r3, r4, #28
  402470:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  402474:	f8cd 3658 	str.w	r3, [sp, #1624]	; 0x658
  402478:	0f2b      	lsrs	r3, r5, #28
  40247a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  40247e:	f8cd 365c 	str.w	r3, [sp, #1628]	; 0x65c

00402482 <.LBB649>:
  402482:	07ab      	lsls	r3, r5, #30
  402484:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  402488:	f8cd 3664 	str.w	r3, [sp, #1636]	; 0x664
  40248c:	07a3      	lsls	r3, r4, #30
  40248e:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  402492:	f8cd 3660 	str.w	r3, [sp, #1632]	; 0x660

00402496 <.LBE649>:
  402496:	f50d 63cb 	add.w	r3, sp, #1624	; 0x658
  40249a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40249e:	f50d 61cc 	add.w	r1, sp, #1632	; 0x660
  4024a2:	e9d1 0100 	ldrd	r0, r1, [r1]
  4024a6:	4042      	eors	r2, r0
  4024a8:	404b      	eors	r3, r1

004024aa <.LBB651>:
  4024aa:	0669      	lsls	r1, r5, #25
  4024ac:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  4024b0:	f8cd 166c 	str.w	r1, [sp, #1644]	; 0x66c
  4024b4:	0661      	lsls	r1, r4, #25
  4024b6:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  4024ba:	f8cd 1668 	str.w	r1, [sp, #1640]	; 0x668

004024be <.LBE651>:
  4024be:	f50d 61cd 	add.w	r1, sp, #1640	; 0x668
  4024c2:	e9d1 0100 	ldrd	r0, r1, [r1]
  4024c6:	4050      	eors	r0, r2
  4024c8:	4059      	eors	r1, r3
  4024ca:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  4024ce:	ea44 000a 	orr.w	r0, r4, sl
  4024d2:	ea45 010b 	orr.w	r1, r5, fp
  4024d6:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
  4024da:	4002      	ands	r2, r0
  4024dc:	400b      	ands	r3, r1
  4024de:	ea04 040a 	and.w	r4, r4, sl
  4024e2:	ea05 050b 	and.w	r5, r5, fp
  4024e6:	4314      	orrs	r4, r2
  4024e8:	431d      	orrs	r5, r3
  4024ea:	4620      	mov	r0, r4
  4024ec:	4629      	mov	r1, r5
  4024ee:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
  4024f2:	1824      	adds	r4, r4, r0
  4024f4:	414d      	adcs	r5, r1
  4024f6:	4620      	mov	r0, r4
  4024f8:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
  4024fc:	181b      	adds	r3, r3, r0
  4024fe:	416c      	adcs	r4, r5
  402500:	e9cd 3418 	strd	r3, r4, [sp, #96]	; 0x60

00402504 <.LBB653>:
  402504:	ea4f 3398 	mov.w	r3, r8, lsr #14
  402508:	ea43 4389 	orr.w	r3, r3, r9, lsl #18
  40250c:	f8cd 3670 	str.w	r3, [sp, #1648]	; 0x670
  402510:	ea4f 3399 	mov.w	r3, r9, lsr #14
  402514:	ea43 4388 	orr.w	r3, r3, r8, lsl #18
  402518:	f8cd 3674 	str.w	r3, [sp, #1652]	; 0x674

0040251c <.LBB655>:
  40251c:	ea4f 4398 	mov.w	r3, r8, lsr #18
  402520:	ea43 3389 	orr.w	r3, r3, r9, lsl #14
  402524:	f8cd 3678 	str.w	r3, [sp, #1656]	; 0x678
  402528:	ea4f 4399 	mov.w	r3, r9, lsr #18
  40252c:	ea43 3388 	orr.w	r3, r3, r8, lsl #14
  402530:	f8cd 367c 	str.w	r3, [sp, #1660]	; 0x67c

00402534 <.LBE655>:
  402534:	f50d 63ce 	add.w	r3, sp, #1648	; 0x670
  402538:	e9d3 2300 	ldrd	r2, r3, [r3]
  40253c:	f50d 61cf 	add.w	r1, sp, #1656	; 0x678
  402540:	e9d1 0100 	ldrd	r0, r1, [r1]
  402544:	4042      	eors	r2, r0
  402546:	404b      	eors	r3, r1

00402548 <.LBB657>:
  402548:	ea4f 51c9 	mov.w	r1, r9, lsl #23
  40254c:	ea41 2158 	orr.w	r1, r1, r8, lsr #9
  402550:	f8cd 1684 	str.w	r1, [sp, #1668]	; 0x684
  402554:	ea4f 51c8 	mov.w	r1, r8, lsl #23
  402558:	ea41 2159 	orr.w	r1, r1, r9, lsr #9
  40255c:	f8cd 1680 	str.w	r1, [sp, #1664]	; 0x680

00402560 <.LBE657>:
  402560:	f50d 61d0 	add.w	r1, sp, #1664	; 0x680
  402564:	e9d1 0100 	ldrd	r0, r1, [r1]
  402568:	4050      	eors	r0, r2
  40256a:	4059      	eors	r1, r3
  40256c:	e9cd 012e 	strd	r0, r1, [sp, #184]	; 0xb8
  402570:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  402574:	4602      	mov	r2, r0
  402576:	460b      	mov	r3, r1
  402578:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  40257c:	4062      	eors	r2, r4
  40257e:	406b      	eors	r3, r5
  402580:	ea02 0208 	and.w	r2, r2, r8
  402584:	ea03 0309 	and.w	r3, r3, r9
  402588:	4050      	eors	r0, r2
  40258a:	4059      	eors	r1, r3
  40258c:	4602      	mov	r2, r0
  40258e:	460b      	mov	r3, r1
  402590:	e9d6 011e 	ldrd	r0, r1, [r6, #120]	; 0x78
  402594:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
  402598:	1824      	adds	r4, r4, r0
  40259a:	414d      	adcs	r5, r1
  40259c:	1914      	adds	r4, r2, r4
  40259e:	eb43 0505 	adc.w	r5, r3, r5
  4025a2:	e9cd 4502 	strd	r4, r5, [sp, #8]
  4025a6:	2f00      	cmp	r7, #0
  4025a8:	f000 8198 	beq.w	4028dc <.LCFI3+0xb0>

004025ac <.LBB659>:
  4025ac:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
  4025b0:	0843      	lsrs	r3, r0, #1
  4025b2:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
  4025b6:	f8cd 3688 	str.w	r3, [sp, #1672]	; 0x688
  4025ba:	084b      	lsrs	r3, r1, #1
  4025bc:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
  4025c0:	f8cd 368c 	str.w	r3, [sp, #1676]	; 0x68c

004025c4 <.LBB661>:
  4025c4:	0a03      	lsrs	r3, r0, #8
  4025c6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  4025ca:	f8cd 3690 	str.w	r3, [sp, #1680]	; 0x690
  4025ce:	0a0b      	lsrs	r3, r1, #8
  4025d0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  4025d4:	f8cd 3694 	str.w	r3, [sp, #1684]	; 0x694

004025d8 <.LBE661>:
  4025d8:	f50d 63d1 	add.w	r3, sp, #1672	; 0x688
  4025dc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4025e0:	f50d 64d2 	add.w	r4, sp, #1680	; 0x690
  4025e4:	e9d4 4500 	ldrd	r4, r5, [r4]
  4025e8:	4062      	eors	r2, r4
  4025ea:	406b      	eors	r3, r5
  4025ec:	460d      	mov	r5, r1
  4025ee:	09c1      	lsrs	r1, r0, #7
  4025f0:	ea41 6145 	orr.w	r1, r1, r5, lsl #25
  4025f4:	916c      	str	r1, [sp, #432]	; 0x1b0
  4025f6:	09e9      	lsrs	r1, r5, #7
  4025f8:	916d      	str	r1, [sp, #436]	; 0x1b4
  4025fa:	a96c      	add	r1, sp, #432	; 0x1b0
  4025fc:	e9d1 0100 	ldrd	r0, r1, [r1]
  402600:	4050      	eors	r0, r2
  402602:	4059      	eors	r1, r3
  402604:	4602      	mov	r2, r0
  402606:	460b      	mov	r3, r1
  402608:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
  40260c:	1880      	adds	r0, r0, r2
  40260e:	4159      	adcs	r1, r3
  402610:	4602      	mov	r2, r0
  402612:	460b      	mov	r3, r1
  402614:	e9dd 0100 	ldrd	r0, r1, [sp]
  402618:	1880      	adds	r0, r0, r2
  40261a:	4159      	adcs	r1, r3
  40261c:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68

00402620 <.LBB663>:
  402620:	e9dd 5626 	ldrd	r5, r6, [sp, #152]	; 0x98
  402624:	0ce9      	lsrs	r1, r5, #19
  402626:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
  40262a:	f8cd 1698 	str.w	r1, [sp, #1688]	; 0x698
  40262e:	0cf1      	lsrs	r1, r6, #19
  402630:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
  402634:	f8cd 169c 	str.w	r1, [sp, #1692]	; 0x69c

00402638 <.LBB665>:
  402638:	00f1      	lsls	r1, r6, #3
  40263a:	ea41 7155 	orr.w	r1, r1, r5, lsr #29
  40263e:	f8cd 16a4 	str.w	r1, [sp, #1700]	; 0x6a4
  402642:	00e9      	lsls	r1, r5, #3
  402644:	ea41 7156 	orr.w	r1, r1, r6, lsr #29
  402648:	f8cd 16a0 	str.w	r1, [sp, #1696]	; 0x6a0

0040264c <.LBE665>:
  40264c:	f50d 63d3 	add.w	r3, sp, #1688	; 0x698
  402650:	e9d3 0100 	ldrd	r0, r1, [r3]
  402654:	f50d 63d4 	add.w	r3, sp, #1696	; 0x6a0
  402658:	e9d3 3400 	ldrd	r3, r4, [r3]
  40265c:	4058      	eors	r0, r3
  40265e:	4061      	eors	r1, r4
  402660:	462c      	mov	r4, r5
  402662:	4635      	mov	r5, r6
  402664:	09a6      	lsrs	r6, r4, #6
  402666:	4633      	mov	r3, r6
  402668:	ea43 6685 	orr.w	r6, r3, r5, lsl #26
  40266c:	966e      	str	r6, [sp, #440]	; 0x1b8
  40266e:	09ae      	lsrs	r6, r5, #6
  402670:	966f      	str	r6, [sp, #444]	; 0x1bc
  402672:	ab6e      	add	r3, sp, #440	; 0x1b8
  402674:	e9d3 3400 	ldrd	r3, r4, [r3]
  402678:	4043      	eors	r3, r0
  40267a:	404c      	eors	r4, r1
  40267c:	4618      	mov	r0, r3
  40267e:	4621      	mov	r1, r4
  402680:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
  402684:	181b      	adds	r3, r3, r0
  402686:	414c      	adcs	r4, r1
  402688:	e9cd 3428 	strd	r3, r4, [sp, #160]	; 0xa0
  40268c:	e9dd 452e 	ldrd	r4, r5, [sp, #184]	; 0xb8
  402690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402694:	1912      	adds	r2, r2, r4
  402696:	416b      	adcs	r3, r5
  402698:	4614      	mov	r4, r2
  40269a:	461d      	mov	r5, r3
  40269c:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
  4026a0:	1912      	adds	r2, r2, r4
  4026a2:	416b      	adcs	r3, r5
  4026a4:	4611      	mov	r1, r2
  4026a6:	461a      	mov	r2, r3
  4026a8:	e9dd 342c 	ldrd	r3, r4, [sp, #176]	; 0xb0
  4026ac:	e9cd 121a 	strd	r1, r2, [sp, #104]	; 0x68
  4026b0:	18c9      	adds	r1, r1, r3
  4026b2:	4162      	adcs	r2, r4
  4026b4:	460b      	mov	r3, r1
  4026b6:	4614      	mov	r4, r2
  4026b8:	e9cd 3402 	strd	r3, r4, [sp, #8]

004026bc <.LBB667>:
  4026bc:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
  4026c0:	0f23      	lsrs	r3, r4, #28
  4026c2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  4026c6:	f8cd 36a8 	str.w	r3, [sp, #1704]	; 0x6a8
  4026ca:	0f2b      	lsrs	r3, r5, #28
  4026cc:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  4026d0:	f8cd 36ac 	str.w	r3, [sp, #1708]	; 0x6ac

004026d4 <.LBB669>:
  4026d4:	07ab      	lsls	r3, r5, #30
  4026d6:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  4026da:	f8cd 36b4 	str.w	r3, [sp, #1716]	; 0x6b4
  4026de:	07a3      	lsls	r3, r4, #30
  4026e0:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  4026e4:	f8cd 36b0 	str.w	r3, [sp, #1712]	; 0x6b0

004026e8 <.LBE669>:
  4026e8:	f50d 63d5 	add.w	r3, sp, #1704	; 0x6a8
  4026ec:	e9d3 2300 	ldrd	r2, r3, [r3]
  4026f0:	f50d 61d6 	add.w	r1, sp, #1712	; 0x6b0
  4026f4:	e9d1 0100 	ldrd	r0, r1, [r1]
  4026f8:	4042      	eors	r2, r0
  4026fa:	404b      	eors	r3, r1

004026fc <.LBB671>:
  4026fc:	0669      	lsls	r1, r5, #25
  4026fe:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  402702:	f8cd 16bc 	str.w	r1, [sp, #1724]	; 0x6bc
  402706:	0661      	lsls	r1, r4, #25
  402708:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  40270c:	f8cd 16b8 	str.w	r1, [sp, #1720]	; 0x6b8

00402710 <.LBE671>:
  402710:	f50d 61d7 	add.w	r1, sp, #1720	; 0x6b8
  402714:	e9d1 4500 	ldrd	r4, r5, [r1]
  402718:	4054      	eors	r4, r2
  40271a:	405d      	eors	r5, r3
  40271c:	e9cd 452c 	strd	r4, r5, [sp, #176]	; 0xb0
  402720:	e9dd 562a 	ldrd	r5, r6, [sp, #168]	; 0xa8
  402724:	462a      	mov	r2, r5
  402726:	4633      	mov	r3, r6
  402728:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
  40272c:	4302      	orrs	r2, r0
  40272e:	430b      	orrs	r3, r1
  402730:	ea02 000a 	and.w	r0, r2, sl
  402734:	ea03 010b 	and.w	r1, r3, fp
  402738:	e9dd 3418 	ldrd	r3, r4, [sp, #96]	; 0x60
  40273c:	401d      	ands	r5, r3
  40273e:	4026      	ands	r6, r4
  402740:	4305      	orrs	r5, r0
  402742:	430e      	orrs	r6, r1
  402744:	e9dd 342c 	ldrd	r3, r4, [sp, #176]	; 0xb0
  402748:	195b      	adds	r3, r3, r5
  40274a:	4174      	adcs	r4, r6
  40274c:	4621      	mov	r1, r4
  40274e:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
  402752:	18e4      	adds	r4, r4, r3
  402754:	414d      	adcs	r5, r1
    for (j = 0; j < 80; j += 16) {
  402756:	3710      	adds	r7, #16
  402758:	f10e 0e80 	add.w	lr, lr, #128	; 0x80
  40275c:	2f50      	cmp	r7, #80	; 0x50
  40275e:	f47d adc2 	bne.w	4002e6 <.LBB353>
    }
#endif /* USE_SLOW_SHA2 */

    /* Add the working vars back into digest */

    sha512->digest[0] += a(0);
  402762:	f8dd 06cc 	ldr.w	r0, [sp, #1740]	; 0x6cc
  402766:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
  40276a:	18a4      	adds	r4, r4, r2
  40276c:	415d      	adcs	r5, r3
  40276e:	4622      	mov	r2, r4
  402770:	462b      	mov	r3, r5
  402772:	e9c0 2306 	strd	r2, r3, [r0, #24]
    sha512->digest[1] += b(0);
  402776:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
  40277a:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
  40277e:	18a4      	adds	r4, r4, r2
  402780:	415d      	adcs	r5, r3
  402782:	4622      	mov	r2, r4
  402784:	462b      	mov	r3, r5
  402786:	e9c0 2308 	strd	r2, r3, [r0, #32]
    sha512->digest[2] += c(0);
  40278a:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
  40278e:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
  402792:	18a4      	adds	r4, r4, r2
  402794:	415d      	adcs	r5, r3
  402796:	4622      	mov	r2, r4
  402798:	462b      	mov	r3, r5
  40279a:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
    sha512->digest[3] += d(0);
  40279e:	e9d0 230c 	ldrd	r2, r3, [r0, #48]	; 0x30
  4027a2:	eb12 020a 	adds.w	r2, r2, sl
  4027a6:	eb43 030b 	adc.w	r3, r3, fp
  4027aa:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
    sha512->digest[4] += e(0);
  4027ae:	e9d0 230e 	ldrd	r2, r3, [r0, #56]	; 0x38
  4027b2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  4027b6:	18a4      	adds	r4, r4, r2
  4027b8:	415d      	adcs	r5, r3
  4027ba:	4622      	mov	r2, r4
  4027bc:	462b      	mov	r3, r5
  4027be:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
    sha512->digest[5] += f(0);
  4027c2:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
  4027c6:	eb12 0208 	adds.w	r2, r2, r8
  4027ca:	eb43 0309 	adc.w	r3, r3, r9
  4027ce:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    sha512->digest[6] += g(0);
  4027d2:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
  4027d6:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  4027da:	18a4      	adds	r4, r4, r2
  4027dc:	415d      	adcs	r5, r3
  4027de:	4622      	mov	r2, r4
  4027e0:	462b      	mov	r3, r5
  4027e2:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
    sha512->digest[7] += h(0);
  4027e6:	e9d0 2314 	ldrd	r2, r3, [r0, #80]	; 0x50
  4027ea:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
  4027ee:	18a4      	adds	r4, r4, r2
  4027f0:	415d      	adcs	r5, r3
  4027f2:	4622      	mov	r2, r4
  4027f4:	462b      	mov	r3, r5
  4027f6:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50

004027fa <.LBB673>:


/* Make sure compiler doesn't skip */
STATIC INLINE void ForceZero(const void* mem, word32 len)
{
    volatile byte* z = (volatile byte*)mem;
  4027fa:	f50d 63da 	add.w	r3, sp, #1744	; 0x6d0

004027fe <.LVL8>:

    for (w = (volatile word64*)z; len >= sizeof(*w); len -= sizeof(*w))
        *w++ = 0;
    z = (volatile byte*)w;
#endif
    while (len--) *z++ = 0;
  4027fe:	2000      	movs	r0, #0
  402800:	f50d 61ea 	add.w	r1, sp, #1872	; 0x750

00402804 <.LVL9>:
  402804:	1c5a      	adds	r2, r3, #1

00402806 <.LVL10>:
  402806:	7018      	strb	r0, [r3, #0]

00402808 <.LVL11>:
  402808:	4613      	mov	r3, r2
  40280a:	428a      	cmp	r2, r1
  40280c:	d1fa      	bne.n	402804 <.LVL9>
  40280e:	f50d 63ea 	add.w	r3, sp, #1872	; 0x750

00402812 <.LBB675>:
  402812:	2100      	movs	r1, #0

00402814 <.LVL12>:
  402814:	1c5a      	adds	r2, r3, #1

00402816 <.LVL13>:
  402816:	7019      	strb	r1, [r3, #0]

00402818 <.LVL14>:
  402818:	4613      	mov	r3, r2
  40281a:	f50d 60f2 	add.w	r0, sp, #1936	; 0x790
  40281e:	4282      	cmp	r2, r0
  402820:	d1f8      	bne.n	402814 <.LVL12>

00402822 <.LBE675>:
#ifdef WOLFSSL_SMALL_STACK
    XFREE(W, NULL, DYNAMIC_TYPE_TMP_BUFFER);
#endif

    return 0;
}
  402822:	2000      	movs	r0, #0
  402824:	f20d 7d94 	addw	sp, sp, #1940	; 0x794

00402828 <.LCFI2>:
  402828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040282c <.LCFI3>:
        R( 0); R( 1); R( 2); R( 3);
  40282c:	e9dc 2316 	ldrd	r2, r3, [ip, #88]	; 0x58
  402830:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  402834:	f7fd be08 	b.w	400448 <.LBE365+0x52>
  402838:	e9dc 2318 	ldrd	r2, r3, [ip, #96]	; 0x60
  40283c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  402840:	f7fd bf19 	b.w	400676 <.LBE385+0x3e>
  402844:	e9dc 231a 	ldrd	r2, r3, [ip, #104]	; 0x68
  402848:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  40284c:	f7fe b831 	b.w	4008b2 <.LBE405+0x3e>
  402850:	e9dc 231c 	ldrd	r2, r3, [ip, #112]	; 0x70
  402854:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  402858:	f7fe b95c 	b.w	400b14 <.LBE425+0x3c>
        R( 4); R( 5); R( 6); R( 7);
  40285c:	e9dc 231e 	ldrd	r2, r3, [ip, #120]	; 0x78
  402860:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
  402864:	f7fe ba7d 	b.w	400d62 <.LBE445+0x3e>
  402868:	e9dc 2320 	ldrd	r2, r3, [ip, #128]	; 0x80
  40286c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  402870:	f7fe bb8e 	b.w	400f90 <.LBE465+0x3a>
  402874:	e9dc 2322 	ldrd	r2, r3, [ip, #136]	; 0x88
  402878:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  40287c:	f7fe bca5 	b.w	4011ca <.LBE485+0x40>
  402880:	e9dc 2324 	ldrd	r2, r3, [ip, #144]	; 0x90
  402884:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  402888:	f7fe bdbe 	b.w	401408 <.LBE505+0x3e>
        R( 8); R( 9); R(10); R(11);
  40288c:	e9dc 3426 	ldrd	r3, r4, [ip, #152]	; 0x98
  402890:	e9cd 3400 	strd	r3, r4, [sp]
  402894:	f7fe bed9 	b.w	40164a <.LBE525+0x3a>
  402898:	e9dc 3428 	ldrd	r3, r4, [ip, #160]	; 0xa0
  40289c:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
  4028a0:	f7fe bff6 	b.w	401890 <.LBE545+0x3a>
  4028a4:	e9dc 342a 	ldrd	r3, r4, [ip, #168]	; 0xa8
  4028a8:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
  4028ac:	f7ff b91d 	b.w	401aea <.LBE565+0x3a>
  4028b0:	e9dc 342c 	ldrd	r3, r4, [ip, #176]	; 0xb0
  4028b4:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
  4028b8:	f7ff ba3a 	b.w	401d30 <.LBE585+0x3a>
        R(12); R(13); R(14); R(15);
  4028bc:	e9dc 232e 	ldrd	r2, r3, [ip, #184]	; 0xb8
  4028c0:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  4028c4:	f7ff bb6c 	b.w	401fa0 <.LBE605+0x3e>
  4028c8:	e9dc 3430 	ldrd	r3, r4, [ip, #192]	; 0xc0
  4028cc:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
  4028d0:	e48b      	b.n	4021ea <.LBE625+0x3a>
  4028d2:	e9dc 3432 	ldrd	r3, r4, [ip, #200]	; 0xc8
  4028d6:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
  4028da:	e5b0      	b.n	40243e <.LBE645+0x3a>
  4028dc:	e9dc 3434 	ldrd	r3, r4, [ip, #208]	; 0xd0
  4028e0:	e9cd 3428 	strd	r3, r4, [sp, #160]	; 0xa0
  4028e4:	e6d2      	b.n	40268c <.LBE665+0x40>

004028e6 <.LFE16>:
  4028e6:	bf00      	nop

Disassembly of section .text._svfprintf_r%42:

004028e8 <_svfprintf_r>:
  4028e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

004028ec <.LCFI0>:
  4028ec:	ed2d 8b06 	vpush	{d8-d10}

004028f0 <.LCFI1>:
  4028f0:	b0cf      	sub	sp, #316	; 0x13c

004028f2 <.LCFI2>:
  4028f2:	460c      	mov	r4, r1
  4028f4:	9105      	str	r1, [sp, #20]
  4028f6:	4693      	mov	fp, r2
  4028f8:	930a      	str	r3, [sp, #40]	; 0x28

004028fa <.LVL1>:
  4028fa:	9011      	str	r0, [sp, #68]	; 0x44
  4028fc:	f010 f93a 	bl	412b74 <_localeconv_r>

00402900 <.LVL2>:
  402900:	6803      	ldr	r3, [r0, #0]
  402902:	9317      	str	r3, [sp, #92]	; 0x5c

00402904 <.LVL3>:
  402904:	4618      	mov	r0, r3
  402906:	f00c ffbb 	bl	40f880 <.LFE22>

0040290a <.LVL4>:
  40290a:	89a3      	ldrh	r3, [r4, #12]
  40290c:	9015      	str	r0, [sp, #84]	; 0x54

0040290e <.LVL5>:
  40290e:	061d      	lsls	r5, r3, #24
  402910:	d503      	bpl.n	40291a <.LVL6>
  402912:	6923      	ldr	r3, [r4, #16]
  402914:	2b00      	cmp	r3, #0
  402916:	f001 8151 	beq.w	403bbc <.LBE47>

0040291a <.LVL6>:
  40291a:	2300      	movs	r3, #0
  40291c:	ed9f 8b7a 	vldr	d8, [pc, #488]	; 402b08 <.LVL46+0x4>
  402920:	ed9f 9b7b 	vldr	d9, [pc, #492]	; 402b10 <.LVL46+0xc>
  402924:	930f      	str	r3, [sp, #60]	; 0x3c
  402926:	9324      	str	r3, [sp, #144]	; 0x90
  402928:	9323      	str	r3, [sp, #140]	; 0x8c

0040292a <.LVL7>:
  40292a:	9314      	str	r3, [sp, #80]	; 0x50
  40292c:	9319      	str	r3, [sp, #100]	; 0x64
  40292e:	9312      	str	r3, [sp, #72]	; 0x48
  402930:	9318      	str	r3, [sp, #96]	; 0x60
  402932:	9316      	str	r3, [sp, #88]	; 0x58
  402934:	9303      	str	r3, [sp, #12]
  402936:	465e      	mov	r6, fp
  402938:	ab25      	add	r3, sp, #148	; 0x94

0040293a <.LVL8>:
  40293a:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 402b18 <.LVL46+0x14>
  40293e:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44

00402942 <.LVL9>:
  402942:	9322      	str	r3, [sp, #136]	; 0x88
  402944:	4699      	mov	r9, r3

00402946 <.LVL10>:
  402946:	7833      	ldrb	r3, [r6, #0]
  402948:	4634      	mov	r4, r6
  40294a:	b1e3      	cbz	r3, 402986 <.LVL18>
  40294c:	2b25      	cmp	r3, #37	; 0x25
  40294e:	d102      	bne.n	402956 <.LVL12>
  402950:	e019      	b.n	402986 <.LVL18>

00402952 <.LVL11>:
  402952:	2b25      	cmp	r3, #37	; 0x25
  402954:	d003      	beq.n	40295e <.LVL14>

00402956 <.LVL12>:
  402956:	f814 3f01 	ldrb.w	r3, [r4, #1]!

0040295a <.LVL13>:
  40295a:	2b00      	cmp	r3, #0
  40295c:	d1f9      	bne.n	402952 <.LVL11>

0040295e <.LVL14>:
  40295e:	1ba5      	subs	r5, r4, r6
  402960:	b18d      	cbz	r5, 402986 <.LVL18>
  402962:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  402964:	9a24      	ldr	r2, [sp, #144]	; 0x90
  402966:	f8c9 6000 	str.w	r6, [r9]
  40296a:	3301      	adds	r3, #1
  40296c:	442a      	add	r2, r5
  40296e:	2b07      	cmp	r3, #7
  402970:	f8c9 5004 	str.w	r5, [r9, #4]
  402974:	9224      	str	r2, [sp, #144]	; 0x90

00402976 <.LVL15>:
  402976:	9323      	str	r3, [sp, #140]	; 0x8c
  402978:	f300 809d 	bgt.w	402ab6 <.LVL36>

0040297c <.LVL16>:
  40297c:	f109 0908 	add.w	r9, r9, #8

00402980 <.LVL17>:
  402980:	9b03      	ldr	r3, [sp, #12]
  402982:	442b      	add	r3, r5
  402984:	9303      	str	r3, [sp, #12]

00402986 <.LVL18>:
  402986:	7823      	ldrb	r3, [r4, #0]
  402988:	2b00      	cmp	r3, #0
  40298a:	f001 80ca 	beq.w	403b22 <.LDL1>

0040298e <.LVL19>:
  40298e:	2300      	movs	r3, #0
  402990:	f04f 32ff 	mov.w	r2, #4294967295
  402994:	4698      	mov	r8, r3
  402996:	9307      	str	r3, [sp, #28]
  402998:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
  40299c:	1c67      	adds	r7, r4, #1

0040299e <.LVL20>:
  40299e:	7863      	ldrb	r3, [r4, #1]
  4029a0:	9204      	str	r2, [sp, #16]
  4029a2:	242b      	movs	r4, #43	; 0x2b

004029a4 <.LVL21>:
  4029a4:	2520      	movs	r5, #32

004029a6 <.LVL22>:
  4029a6:	3701      	adds	r7, #1
  4029a8:	f1a3 0220 	sub.w	r2, r3, #32
  4029ac:	2a5a      	cmp	r2, #90	; 0x5a
  4029ae:	f200 83e4 	bhi.w	40317a <.LVL218>
  4029b2:	e8df f012 	tbh	[pc, r2, lsl #1]
  4029b6:	02a5      	.short	0x02a5
  4029b8:	03e203e2 	.word	0x03e203e2
  4029bc:	03e202ae 	.word	0x03e202ae
  4029c0:	03e203e2 	.word	0x03e203e2
  4029c4:	03e2005f 	.word	0x03e2005f
  4029c8:	02b203e2 	.word	0x02b203e2
  4029cc:	03e202bf 	.word	0x03e202bf
  4029d0:	02cd007c 	.word	0x02cd007c
  4029d4:	02e703e2 	.word	0x02e703e2
  4029d8:	03d203d2 	.word	0x03d203d2
  4029dc:	03d203d2 	.word	0x03d203d2
  4029e0:	03d203d2 	.word	0x03d203d2
  4029e4:	03d203d2 	.word	0x03d203d2
  4029e8:	03e203d2 	.word	0x03e203d2
  4029ec:	03e203e2 	.word	0x03e203e2
  4029f0:	03e203e2 	.word	0x03e203e2
  4029f4:	03e203e2 	.word	0x03e203e2
  4029f8:	03e2034a 	.word	0x03e2034a
  4029fc:	0392037c 	.word	0x0392037c
  402a00:	034a034a 	.word	0x034a034a
  402a04:	03e2034a 	.word	0x03e2034a
  402a08:	03e203e2 	.word	0x03e203e2
  402a0c:	02eb03e2 	.word	0x02eb03e2
  402a10:	03e203e2 	.word	0x03e203e2
  402a14:	03e202ef 	.word	0x03e202ef
  402a18:	03e203e2 	.word	0x03e203e2
  402a1c:	03e20300 	.word	0x03e20300
  402a20:	03e20327 	.word	0x03e20327
  402a24:	029403e2 	.word	0x029403e2
  402a28:	03e203e2 	.word	0x03e203e2
  402a2c:	03e203e2 	.word	0x03e203e2
  402a30:	03e203e2 	.word	0x03e203e2
  402a34:	03e203e2 	.word	0x03e203e2
  402a38:	03e2034a 	.word	0x03e2034a
  402a3c:	0254037c 	.word	0x0254037c
  402a40:	034a034a 	.word	0x034a034a
  402a44:	02c3034a 	.word	0x02c3034a
  402a48:	005b0254 	.word	0x005b0254
  402a4c:	03b003e2 	.word	0x03b003e2
  402a50:	03ba03e2 	.word	0x03ba03e2
  402a54:	03380223 	.word	0x03380223
  402a58:	03e2005b 	.word	0x03e2005b
  402a5c:	00760300 	.word	0x00760300
  402a60:	03e2023e 	.word	0x03e2023e
  402a64:	00b303e2 	.word	0x00b303e2
  402a68:	007603e2 	.word	0x007603e2
  402a6c:	f048 0820 	orr.w	r8, r8, #32
  402a70:	783b      	ldrb	r3, [r7, #0]
  402a72:	e798      	b.n	4029a6 <.LVL22>
  402a74:	4658      	mov	r0, fp
  402a76:	f010 f87d 	bl	412b74 <_localeconv_r>

00402a7a <.LVL25>:
  402a7a:	6843      	ldr	r3, [r0, #4]
  402a7c:	9316      	str	r3, [sp, #88]	; 0x58

00402a7e <.LVL26>:
  402a7e:	4618      	mov	r0, r3
  402a80:	f00c fefe 	bl	40f880 <.LFE22>

00402a84 <.LVL27>:
  402a84:	9018      	str	r0, [sp, #96]	; 0x60

00402a86 <.LVL28>:
  402a86:	4658      	mov	r0, fp
  402a88:	f010 f874 	bl	412b74 <_localeconv_r>

00402a8c <.LVL29>:
  402a8c:	6883      	ldr	r3, [r0, #8]
  402a8e:	9312      	str	r3, [sp, #72]	; 0x48

00402a90 <.LVL30>:
  402a90:	9b18      	ldr	r3, [sp, #96]	; 0x60

00402a92 <.LVL31>:
  402a92:	b133      	cbz	r3, 402aa2 <.LVL32>
  402a94:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402a96:	b123      	cbz	r3, 402aa2 <.LVL32>
  402a98:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402a9a:	781b      	ldrb	r3, [r3, #0]
  402a9c:	2b00      	cmp	r3, #0
  402a9e:	f041 8083 	bne.w	403ba8 <.LVL513>

00402aa2 <.LVL32>:
  402aa2:	783b      	ldrb	r3, [r7, #0]
  402aa4:	e77f      	b.n	4029a6 <.LVL22>

00402aa6 <.LVL33>:
  402aa6:	9a07      	ldr	r2, [sp, #28]
  402aa8:	930a      	str	r3, [sp, #40]	; 0x28
  402aaa:	4252      	negs	r2, r2
  402aac:	9207      	str	r2, [sp, #28]

00402aae <.LVL34>:
  402aae:	f048 0804 	orr.w	r8, r8, #4
  402ab2:	783b      	ldrb	r3, [r7, #0]
  402ab4:	e777      	b.n	4029a6 <.LVL22>

00402ab6 <.LVL36>:
  402ab6:	aa22      	add	r2, sp, #136	; 0x88
  402ab8:	9905      	ldr	r1, [sp, #20]
  402aba:	4658      	mov	r0, fp
  402abc:	f00c fc1a 	bl	40f2f4 <__ssprint_r>

00402ac0 <.LVL37>:
  402ac0:	b980      	cbnz	r0, 402ae4 <.LVL44>

00402ac2 <.LVL38>:
  402ac2:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00402ac6 <.LVL39>:
  402ac6:	e75b      	b.n	402980 <.LVL17>

00402ac8 <.LVL40>:
  402ac8:	aa22      	add	r2, sp, #136	; 0x88

00402aca <.LVL41>:
  402aca:	9905      	ldr	r1, [sp, #20]
  402acc:	4658      	mov	r0, fp
  402ace:	f00c fc11 	bl	40f2f4 <__ssprint_r>

00402ad2 <.LVL42>:
  402ad2:	2800      	cmp	r0, #0
  402ad4:	f000 8182 	beq.w	402ddc <.LVL119>

00402ad8 <.L189>:
  402ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402ada:	b11b      	cbz	r3, 402ae4 <.LVL44>
  402adc:	9909      	ldr	r1, [sp, #36]	; 0x24
  402ade:	9811      	ldr	r0, [sp, #68]	; 0x44
  402ae0:	f00a fd3a 	bl	40d558 <_free_r>

00402ae4 <.LVL44>:
  402ae4:	9b05      	ldr	r3, [sp, #20]
  402ae6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
  402aea:	f013 0f40 	tst.w	r3, #64	; 0x40
  402aee:	9b03      	ldr	r3, [sp, #12]
  402af0:	bf18      	it	ne
  402af2:	f04f 33ff 	movne.w	r3, #4294967295
  402af6:	9303      	str	r3, [sp, #12]

00402af8 <.LVL45>:
  402af8:	9803      	ldr	r0, [sp, #12]
  402afa:	b04f      	add	sp, #316	; 0x13c

00402afc <.LCFI3>:
  402afc:	ecbd 8b06 	vpop	{d8-d10}

00402b00 <.LCFI4>:
  402b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00402b04 <.LVL46>:
  402b04:	f3af 8000 	nop.w
	...
  402b10:	ffffffff 	.word	0xffffffff
  402b14:	7fefffff 	.word	0x7fefffff
  402b18:	00412ef8 	.word	0x00412ef8

00402b1c <.L45>:
  402b1c:	930d      	str	r3, [sp, #52]	; 0x34
  402b1e:	f018 0f20 	tst.w	r8, #32
  402b22:	4bb4      	ldr	r3, [pc, #720]	; (402df4 <.LVL122+0x4>)
  402b24:	9314      	str	r3, [sp, #80]	; 0x50

00402b26 <.LVL48>:
  402b26:	f040 81e1 	bne.w	402eec <.LVL150>
  402b2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  402b2c:	f018 0f10 	tst.w	r8, #16
  402b30:	4613      	mov	r3, r2
  402b32:	f040 859d 	bne.w	403670 <.LVL365>
  402b36:	f018 0f40 	tst.w	r8, #64	; 0x40
  402b3a:	f041 801d 	bne.w	403b78 <.LVL506>
  402b3e:	f418 7f00 	tst.w	r8, #512	; 0x200
  402b42:	f000 8595 	beq.w	403670 <.LVL365>

00402b46 <.LVL49>:
  402b46:	3304      	adds	r3, #4

00402b48 <.LVL50>:
  402b48:	7814      	ldrb	r4, [r2, #0]
  402b4a:	930a      	str	r3, [sp, #40]	; 0x28
  402b4c:	2500      	movs	r5, #0

00402b4e <.LVL51>:
  402b4e:	f018 0f01 	tst.w	r8, #1
  402b52:	d00b      	beq.n	402b6c <.LVL51+0x1e>
  402b54:	ea54 0305 	orrs.w	r3, r4, r5
  402b58:	d008      	beq.n	402b6c <.LVL51+0x1e>
  402b5a:	2330      	movs	r3, #48	; 0x30
  402b5c:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
  402b60:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
  402b64:	f048 0802 	orr.w	r8, r8, #2
  402b68:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
  402b6c:	f428 6180 	bic.w	r1, r8, #1024	; 0x400

00402b70 <.LVL53>:
  402b70:	2302      	movs	r3, #2

00402b72 <.L150>:
  402b72:	2200      	movs	r2, #0
  402b74:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b

00402b78 <.L65>:
  402b78:	9804      	ldr	r0, [sp, #16]
  402b7a:	1c42      	adds	r2, r0, #1
  402b7c:	f000 8190 	beq.w	402ea0 <.LVL139>

00402b80 <.LVL56>:
  402b80:	ea54 0205 	orrs.w	r2, r4, r5
  402b84:	f021 0880 	bic.w	r8, r1, #128	; 0x80

00402b88 <.LVL57>:
  402b88:	f040 818f 	bne.w	402eaa <.LVL140>
  402b8c:	2800      	cmp	r0, #0
  402b8e:	f040 8409 	bne.w	4033a4 <.LVL271>
  402b92:	2b00      	cmp	r3, #0
  402b94:	f040 84a2 	bne.w	4034dc <.LBE13>
  402b98:	f011 0301 	ands.w	r3, r1, #1

00402b9c <.LVL58>:
  402b9c:	ae4e      	add	r6, sp, #312	; 0x138

00402b9e <.LVL59>:
  402b9e:	9308      	str	r3, [sp, #32]
  402ba0:	d002      	beq.n	402ba8 <.LVL61>

00402ba2 <.LVL60>:
  402ba2:	2330      	movs	r3, #48	; 0x30
  402ba4:	f806 3d01 	strb.w	r3, [r6, #-1]!

00402ba8 <.LVL61>:
  402ba8:	2300      	movs	r3, #0
  402baa:	9a08      	ldr	r2, [sp, #32]
  402bac:	9309      	str	r3, [sp, #36]	; 0x24
  402bae:	9313      	str	r3, [sp, #76]	; 0x4c
  402bb0:	9310      	str	r3, [sp, #64]	; 0x40
  402bb2:	930e      	str	r3, [sp, #56]	; 0x38
  402bb4:	9b04      	ldr	r3, [sp, #16]
  402bb6:	4293      	cmp	r3, r2
  402bb8:	bfb8      	it	lt
  402bba:	4613      	movlt	r3, r2
  402bbc:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  402bc0:	9302      	str	r3, [sp, #8]

00402bc2 <.L59>:
  402bc2:	b112      	cbz	r2, 402bca <.LVL64>

00402bc4 <.LVL63>:
  402bc4:	9b02      	ldr	r3, [sp, #8]
  402bc6:	3301      	adds	r3, #1
  402bc8:	9302      	str	r3, [sp, #8]

00402bca <.LVL64>:
  402bca:	f018 0302 	ands.w	r3, r8, #2
  402bce:	930b      	str	r3, [sp, #44]	; 0x2c
  402bd0:	d002      	beq.n	402bd8 <.LVL64+0xe>
  402bd2:	9b02      	ldr	r3, [sp, #8]
  402bd4:	3302      	adds	r3, #2
  402bd6:	9302      	str	r3, [sp, #8]
  402bd8:	f018 0384 	ands.w	r3, r8, #132	; 0x84
  402bdc:	930c      	str	r3, [sp, #48]	; 0x30
  402bde:	f040 82ea 	bne.w	4031b6 <.LVL227>
  402be2:	9b07      	ldr	r3, [sp, #28]
  402be4:	9902      	ldr	r1, [sp, #8]
  402be6:	1a5c      	subs	r4, r3, r1

00402be8 <.LVL66>:
  402be8:	2c00      	cmp	r4, #0
  402bea:	f340 82e4 	ble.w	4031b6 <.LVL227>
  402bee:	2c10      	cmp	r4, #16
  402bf0:	9924      	ldr	r1, [sp, #144]	; 0x90
  402bf2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  402bf4:	4d80      	ldr	r5, [pc, #512]	; (402df8 <.LVL122+0x8>)
  402bf6:	dd25      	ble.n	402c44 <.LVL80>
  402bf8:	4648      	mov	r0, r9
  402bfa:	2310      	movs	r3, #16
  402bfc:	46c1      	mov	r9, r8
  402bfe:	46b0      	mov	r8, r6

00402c00 <.LVL67>:
  402c00:	9e05      	ldr	r6, [sp, #20]
  402c02:	e004      	b.n	402c0e <.LVL71>

00402c04 <.LVL68>:
  402c04:	3c10      	subs	r4, #16

00402c06 <.LVL69>:
  402c06:	2c10      	cmp	r4, #16
  402c08:	f100 0008 	add.w	r0, r0, #8

00402c0c <.LVL70>:
  402c0c:	dd17      	ble.n	402c3e <.LVL79>

00402c0e <.LVL71>:
  402c0e:	3201      	adds	r2, #1
  402c10:	3110      	adds	r1, #16
  402c12:	2a07      	cmp	r2, #7
  402c14:	9124      	str	r1, [sp, #144]	; 0x90

00402c16 <.LVL72>:
  402c16:	9223      	str	r2, [sp, #140]	; 0x8c
  402c18:	6005      	str	r5, [r0, #0]
  402c1a:	6043      	str	r3, [r0, #4]
  402c1c:	ddf2      	ble.n	402c04 <.LVL68>
  402c1e:	aa22      	add	r2, sp, #136	; 0x88
  402c20:	4631      	mov	r1, r6
  402c22:	4658      	mov	r0, fp

00402c24 <.LVL73>:
  402c24:	9306      	str	r3, [sp, #24]
  402c26:	f00c fb65 	bl	40f2f4 <__ssprint_r>

00402c2a <.LVL74>:
  402c2a:	2800      	cmp	r0, #0
  402c2c:	f47f af54 	bne.w	402ad8 <.L189>
  402c30:	3c10      	subs	r4, #16

00402c32 <.LVL75>:
  402c32:	2c10      	cmp	r4, #16
  402c34:	9924      	ldr	r1, [sp, #144]	; 0x90
  402c36:	9a23      	ldr	r2, [sp, #140]	; 0x8c

00402c38 <.LVL76>:
  402c38:	9b06      	ldr	r3, [sp, #24]

00402c3a <.LVL77>:
  402c3a:	a825      	add	r0, sp, #148	; 0x94

00402c3c <.LVL78>:
  402c3c:	dce7      	bgt.n	402c0e <.LVL71>

00402c3e <.LVL79>:
  402c3e:	4646      	mov	r6, r8
  402c40:	46c8      	mov	r8, r9
  402c42:	4681      	mov	r9, r0

00402c44 <.LVL80>:
  402c44:	3201      	adds	r2, #1
  402c46:	1863      	adds	r3, r4, r1
  402c48:	2a07      	cmp	r2, #7
  402c4a:	9324      	str	r3, [sp, #144]	; 0x90
  402c4c:	9223      	str	r2, [sp, #140]	; 0x8c
  402c4e:	f8c9 5000 	str.w	r5, [r9]
  402c52:	f8c9 4004 	str.w	r4, [r9, #4]
  402c56:	f300 848f 	bgt.w	403578 <.LVL333>

00402c5a <.LVL81>:
  402c5a:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  402c5e:	f109 0908 	add.w	r9, r9, #8

00402c62 <.LVL82>:
  402c62:	b172      	cbz	r2, 402c82 <.LVL84>
  402c64:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  402c66:	3201      	adds	r2, #1
  402c68:	3301      	adds	r3, #1
  402c6a:	f10d 006b 	add.w	r0, sp, #107	; 0x6b
  402c6e:	2101      	movs	r1, #1
  402c70:	2a07      	cmp	r2, #7
  402c72:	9324      	str	r3, [sp, #144]	; 0x90
  402c74:	9223      	str	r2, [sp, #140]	; 0x8c
  402c76:	e889 0003 	stmia.w	r9, {r0, r1}
  402c7a:	f300 83a9 	bgt.w	4033d0 <.LVL278>

00402c7e <.LVL83>:
  402c7e:	f109 0908 	add.w	r9, r9, #8

00402c82 <.LVL84>:
  402c82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  402c84:	b16a      	cbz	r2, 402ca2 <.LVL86>
  402c86:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  402c88:	3201      	adds	r2, #1
  402c8a:	3302      	adds	r3, #2
  402c8c:	a81b      	add	r0, sp, #108	; 0x6c
  402c8e:	2102      	movs	r1, #2
  402c90:	2a07      	cmp	r2, #7
  402c92:	9324      	str	r3, [sp, #144]	; 0x90
  402c94:	9223      	str	r2, [sp, #140]	; 0x8c
  402c96:	e889 0003 	stmia.w	r9, {r0, r1}
  402c9a:	f300 83a5 	bgt.w	4033e8 <.LVL282>

00402c9e <.LVL85>:
  402c9e:	f109 0908 	add.w	r9, r9, #8

00402ca2 <.LVL86>:
  402ca2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  402ca4:	2a80      	cmp	r2, #128	; 0x80
  402ca6:	f000 82eb 	beq.w	403280 <.LVL243>
  402caa:	9a04      	ldr	r2, [sp, #16]
  402cac:	9908      	ldr	r1, [sp, #32]
  402cae:	1a54      	subs	r4, r2, r1

00402cb0 <.LVL87>:
  402cb0:	2c00      	cmp	r4, #0
  402cb2:	dd36      	ble.n	402d22 <.LVL102>
  402cb4:	2c10      	cmp	r4, #16
  402cb6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  402cb8:	dd26      	ble.n	402d08 <.LVL100>
  402cba:	4649      	mov	r1, r9
  402cbc:	2510      	movs	r5, #16
  402cbe:	46a1      	mov	r9, r4
  402cc0:	9c05      	ldr	r4, [sp, #20]

00402cc2 <.LVL88>:
  402cc2:	e006      	b.n	402cd2 <.LVL92>

00402cc4 <.LVL89>:
  402cc4:	f1a9 0910 	sub.w	r9, r9, #16

00402cc8 <.LVL90>:
  402cc8:	f1b9 0f10 	cmp.w	r9, #16
  402ccc:	f101 0108 	add.w	r1, r1, #8

00402cd0 <.LVL91>:
  402cd0:	dd18      	ble.n	402d04 <.LVL99>

00402cd2 <.LVL92>:
  402cd2:	3201      	adds	r2, #1
  402cd4:	3310      	adds	r3, #16
  402cd6:	2a07      	cmp	r2, #7
  402cd8:	9324      	str	r3, [sp, #144]	; 0x90

00402cda <.LVL93>:
  402cda:	9223      	str	r2, [sp, #140]	; 0x8c
  402cdc:	f8c1 a000 	str.w	sl, [r1]
  402ce0:	604d      	str	r5, [r1, #4]
  402ce2:	ddef      	ble.n	402cc4 <.LVL89>
  402ce4:	aa22      	add	r2, sp, #136	; 0x88
  402ce6:	4621      	mov	r1, r4

00402ce8 <.LVL94>:
  402ce8:	4658      	mov	r0, fp
  402cea:	f00c fb03 	bl	40f2f4 <__ssprint_r>

00402cee <.LVL95>:
  402cee:	2800      	cmp	r0, #0
  402cf0:	f47f aef2 	bne.w	402ad8 <.L189>
  402cf4:	f1a9 0910 	sub.w	r9, r9, #16

00402cf8 <.LVL96>:
  402cf8:	f1b9 0f10 	cmp.w	r9, #16
  402cfc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402cfe:	9a23      	ldr	r2, [sp, #140]	; 0x8c

00402d00 <.LVL97>:
  402d00:	a925      	add	r1, sp, #148	; 0x94

00402d02 <.LVL98>:
  402d02:	dce6      	bgt.n	402cd2 <.LVL92>

00402d04 <.LVL99>:
  402d04:	464c      	mov	r4, r9
  402d06:	4689      	mov	r9, r1

00402d08 <.LVL100>:
  402d08:	3201      	adds	r2, #1
  402d0a:	4423      	add	r3, r4
  402d0c:	2a07      	cmp	r2, #7
  402d0e:	9324      	str	r3, [sp, #144]	; 0x90
  402d10:	9223      	str	r2, [sp, #140]	; 0x8c
  402d12:	f8c9 a000 	str.w	sl, [r9]
  402d16:	f8c9 4004 	str.w	r4, [r9, #4]
  402d1a:	f300 834d 	bgt.w	4033b8 <.LVL274>

00402d1e <.LVL101>:
  402d1e:	f109 0908 	add.w	r9, r9, #8

00402d22 <.LVL102>:
  402d22:	f418 7f80 	tst.w	r8, #256	; 0x100
  402d26:	f040 824f 	bne.w	4031c8 <.LVL228>
  402d2a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  402d2c:	9808      	ldr	r0, [sp, #32]
  402d2e:	f8c9 6000 	str.w	r6, [r9]
  402d32:	3201      	adds	r2, #1
  402d34:	4403      	add	r3, r0
  402d36:	2a07      	cmp	r2, #7
  402d38:	9324      	str	r3, [sp, #144]	; 0x90
  402d3a:	f8c9 0004 	str.w	r0, [r9, #4]
  402d3e:	9223      	str	r2, [sp, #140]	; 0x8c
  402d40:	f300 8324 	bgt.w	40338c <.LVL269>

00402d44 <.LVL103>:
  402d44:	f109 0908 	add.w	r9, r9, #8

00402d48 <.LVL104>:
  402d48:	f018 0f04 	tst.w	r8, #4
  402d4c:	d03b      	beq.n	402dc6 <.LVL117>
  402d4e:	9a07      	ldr	r2, [sp, #28]
  402d50:	9902      	ldr	r1, [sp, #8]
  402d52:	1a54      	subs	r4, r2, r1

00402d54 <.LVL105>:
  402d54:	2c00      	cmp	r4, #0
  402d56:	dd36      	ble.n	402dc6 <.LVL117>
  402d58:	2c10      	cmp	r4, #16
  402d5a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  402d5c:	4d26      	ldr	r5, [pc, #152]	; (402df8 <.LVL122+0x8>)
  402d5e:	dd1f      	ble.n	402da0 <.LVL115>
  402d60:	2610      	movs	r6, #16
  402d62:	f8dd 8014 	ldr.w	r8, [sp, #20]
  402d66:	e004      	b.n	402d72 <.LVL109>

00402d68 <.LVL106>:
  402d68:	3c10      	subs	r4, #16

00402d6a <.LVL107>:
  402d6a:	2c10      	cmp	r4, #16
  402d6c:	f109 0908 	add.w	r9, r9, #8

00402d70 <.LVL108>:
  402d70:	dd16      	ble.n	402da0 <.LVL115>

00402d72 <.LVL109>:
  402d72:	3201      	adds	r2, #1
  402d74:	3310      	adds	r3, #16
  402d76:	2a07      	cmp	r2, #7
  402d78:	9324      	str	r3, [sp, #144]	; 0x90

00402d7a <.LVL110>:
  402d7a:	9223      	str	r2, [sp, #140]	; 0x8c
  402d7c:	e889 0060 	stmia.w	r9, {r5, r6}
  402d80:	ddf2      	ble.n	402d68 <.LVL106>
  402d82:	aa22      	add	r2, sp, #136	; 0x88
  402d84:	4641      	mov	r1, r8
  402d86:	4658      	mov	r0, fp
  402d88:	f00c fab4 	bl	40f2f4 <__ssprint_r>

00402d8c <.LVL111>:
  402d8c:	2800      	cmp	r0, #0
  402d8e:	f47f aea3 	bne.w	402ad8 <.L189>
  402d92:	3c10      	subs	r4, #16

00402d94 <.LVL112>:
  402d94:	2c10      	cmp	r4, #16
  402d96:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402d98:	9a23      	ldr	r2, [sp, #140]	; 0x8c

00402d9a <.LVL113>:
  402d9a:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00402d9e <.LVL114>:
  402d9e:	dce8      	bgt.n	402d72 <.LVL109>

00402da0 <.LVL115>:
  402da0:	3201      	adds	r2, #1
  402da2:	4423      	add	r3, r4
  402da4:	2a07      	cmp	r2, #7
  402da6:	9324      	str	r3, [sp, #144]	; 0x90
  402da8:	9223      	str	r2, [sp, #140]	; 0x8c
  402daa:	f8c9 5000 	str.w	r5, [r9]
  402dae:	f8c9 4004 	str.w	r4, [r9, #4]
  402db2:	dd08      	ble.n	402dc6 <.LVL117>
  402db4:	aa22      	add	r2, sp, #136	; 0x88
  402db6:	9905      	ldr	r1, [sp, #20]
  402db8:	4658      	mov	r0, fp
  402dba:	f00c fa9b 	bl	40f2f4 <__ssprint_r>

00402dbe <.LVL116>:
  402dbe:	2800      	cmp	r0, #0
  402dc0:	f47f ae8a 	bne.w	402ad8 <.L189>
  402dc4:	9b24      	ldr	r3, [sp, #144]	; 0x90

00402dc6 <.LVL117>:
  402dc6:	9a03      	ldr	r2, [sp, #12]
  402dc8:	9907      	ldr	r1, [sp, #28]
  402dca:	9802      	ldr	r0, [sp, #8]
  402dcc:	4281      	cmp	r1, r0
  402dce:	bfac      	ite	ge
  402dd0:	1852      	addge	r2, r2, r1
  402dd2:	1812      	addlt	r2, r2, r0
  402dd4:	9203      	str	r2, [sp, #12]

00402dd6 <.LVL118>:
  402dd6:	2b00      	cmp	r3, #0
  402dd8:	f47f ae76 	bne.w	402ac8 <.LVL40>

00402ddc <.LVL119>:
  402ddc:	2300      	movs	r3, #0
  402dde:	9323      	str	r3, [sp, #140]	; 0x8c

00402de0 <.LVL120>:
  402de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402de2:	b11b      	cbz	r3, 402dec <.LVL121>
  402de4:	9909      	ldr	r1, [sp, #36]	; 0x24
  402de6:	4658      	mov	r0, fp
  402de8:	f00a fbb6 	bl	40d558 <_free_r>

00402dec <.LVL121>:
  402dec:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00402df0 <.LVL122>:
  402df0:	463e      	mov	r6, r7
  402df2:	e5a8      	b.n	402946 <.LVL10>
  402df4:	0041222c 	.word	0x0041222c
  402df8:	00412ee8 	.word	0x00412ee8

00402dfc <.LVL123>:
  402dfc:	f018 0f20 	tst.w	r8, #32
  402e00:	930d      	str	r3, [sp, #52]	; 0x34
  402e02:	f040 80ce 	bne.w	402fa2 <.LVL168+0x1e>
  402e06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  402e08:	f018 0f10 	tst.w	r8, #16
  402e0c:	4613      	mov	r3, r2
  402e0e:	f040 8419 	bne.w	403644 <.LVL358>
  402e12:	f018 0f40 	tst.w	r8, #64	; 0x40
  402e16:	f040 86a2 	bne.w	403b5e <.LVL502>
  402e1a:	f418 7f00 	tst.w	r8, #512	; 0x200
  402e1e:	f000 8411 	beq.w	403644 <.LVL358>

00402e22 <.LVL124>:
  402e22:	3304      	adds	r3, #4

00402e24 <.LVL125>:
  402e24:	7814      	ldrb	r4, [r2, #0]
  402e26:	930a      	str	r3, [sp, #40]	; 0x28
  402e28:	2500      	movs	r5, #0

00402e2a <.LVL126>:
  402e2a:	f428 6180 	bic.w	r1, r8, #1024	; 0x400

00402e2e <.LVL127>:
  402e2e:	2300      	movs	r3, #0
  402e30:	e69f      	b.n	402b72 <.L150>

00402e32 <.LVL128>:
  402e32:	4641      	mov	r1, r8

00402e34 <.LVL129>:
  402e34:	068e      	lsls	r6, r1, #26

00402e36 <.LVL130>:
  402e36:	930d      	str	r3, [sp, #52]	; 0x34
  402e38:	f100 80ea 	bmi.w	403010 <.LVL180+0x6>
  402e3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  402e3e:	06cd      	lsls	r5, r1, #27
  402e40:	4613      	mov	r3, r2
  402e42:	f100 8405 	bmi.w	403650 <.LVL360>
  402e46:	064c      	lsls	r4, r1, #25
  402e48:	f100 868f 	bmi.w	403b6a <.LVL504>
  402e4c:	0588      	lsls	r0, r1, #22
  402e4e:	f140 83ff 	bpl.w	403650 <.LVL360>

00402e52 <.LVL131>:
  402e52:	7814      	ldrb	r4, [r2, #0]
  402e54:	3204      	adds	r2, #4

00402e56 <.LVL132>:
  402e56:	2500      	movs	r5, #0
  402e58:	2301      	movs	r3, #1
  402e5a:	920a      	str	r2, [sp, #40]	; 0x28
  402e5c:	e689      	b.n	402b72 <.L150>

00402e5e <.LVL133>:
  402e5e:	4641      	mov	r1, r8

00402e60 <.LVL134>:
  402e60:	068c      	lsls	r4, r1, #26
  402e62:	930d      	str	r3, [sp, #52]	; 0x34
  402e64:	f100 813f 	bmi.w	4030e6 <.LVL198+0x8>
  402e68:	06c8      	lsls	r0, r1, #27
  402e6a:	f100 83f8 	bmi.w	40365e <.LVL362>
  402e6e:	064a      	lsls	r2, r1, #25
  402e70:	f100 8688 	bmi.w	403b84 <.LVL508>
  402e74:	058b      	lsls	r3, r1, #22
  402e76:	f140 83f2 	bpl.w	40365e <.LVL362>

00402e7a <.LVL135>:
  402e7a:	980a      	ldr	r0, [sp, #40]	; 0x28
  402e7c:	f990 4000 	ldrsb.w	r4, [r0]

00402e80 <.LVL136>:
  402e80:	17e5      	asrs	r5, r4, #31
  402e82:	3004      	adds	r0, #4
  402e84:	4622      	mov	r2, r4
  402e86:	462b      	mov	r3, r5
  402e88:	900a      	str	r0, [sp, #40]	; 0x28

00402e8a <.LVL137>:
  402e8a:	2a00      	cmp	r2, #0
  402e8c:	f173 0300 	sbcs.w	r3, r3, #0
  402e90:	f2c0 8139 	blt.w	403106 <.LVL201>
  402e94:	9804      	ldr	r0, [sp, #16]
  402e96:	1c42      	adds	r2, r0, #1
  402e98:	f04f 0301 	mov.w	r3, #1

00402e9c <.LVL138>:
  402e9c:	f47f ae70 	bne.w	402b80 <.LVL56>

00402ea0 <.LVL139>:
  402ea0:	ea54 0205 	orrs.w	r2, r4, r5
  402ea4:	f000 827f 	beq.w	4033a6 <.LVL272>
  402ea8:	4688      	mov	r8, r1

00402eaa <.LVL140>:
  402eaa:	2b01      	cmp	r3, #1
  402eac:	f000 831e 	beq.w	4034ec <.LVL316>
  402eb0:	2b02      	cmp	r3, #2
  402eb2:	f040 82a8 	bne.w	403406 <.LVL288>

00402eb6 <.LVL141>:
  402eb6:	9814      	ldr	r0, [sp, #80]	; 0x50

00402eb8 <.LVL142>:
  402eb8:	ae4e      	add	r6, sp, #312	; 0x138

00402eba <.LVL143>:
  402eba:	0923      	lsrs	r3, r4, #4
  402ebc:	f004 010f 	and.w	r1, r4, #15
  402ec0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  402ec4:	092a      	lsrs	r2, r5, #4
  402ec6:	461c      	mov	r4, r3

00402ec8 <.LVL144>:
  402ec8:	4615      	mov	r5, r2

00402eca <.LVL145>:
  402eca:	5c43      	ldrb	r3, [r0, r1]
  402ecc:	f806 3d01 	strb.w	r3, [r6, #-1]!

00402ed0 <.LVL146>:
  402ed0:	ea54 0305 	orrs.w	r3, r4, r5
  402ed4:	d1f1      	bne.n	402eba <.LVL143>

00402ed6 <.LVL147>:
  402ed6:	ab4e      	add	r3, sp, #312	; 0x138
  402ed8:	1b9b      	subs	r3, r3, r6
  402eda:	9308      	str	r3, [sp, #32]
  402edc:	e664      	b.n	402ba8 <.LVL61>

00402ede <.LVL148>:
  402ede:	930d      	str	r3, [sp, #52]	; 0x34
  402ee0:	f018 0f20 	tst.w	r8, #32
  402ee4:	4bb5      	ldr	r3, [pc, #724]	; (4031bc <.LVL227+0x6>)
  402ee6:	9314      	str	r3, [sp, #80]	; 0x50

00402ee8 <.LVL149>:
  402ee8:	f43f ae1f 	beq.w	402b2a <.LVL48+0x4>

00402eec <.LVL150>:
  402eec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  402eee:	3507      	adds	r5, #7
  402ef0:	f025 0307 	bic.w	r3, r5, #7
  402ef4:	f103 0208 	add.w	r2, r3, #8
  402ef8:	920a      	str	r2, [sp, #40]	; 0x28

00402efa <.LVL151>:
  402efa:	e9d3 4500 	ldrd	r4, r5, [r3]
  402efe:	e626      	b.n	402b4e <.LVL51>

00402f00 <.LVL152>:
  402f00:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
  402f04:	2b00      	cmp	r3, #0
  402f06:	f47f adcc 	bne.w	402aa2 <.LVL32>
  402f0a:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
  402f0e:	783b      	ldrb	r3, [r7, #0]
  402f10:	e549      	b.n	4029a6 <.LVL22>
  402f12:	f048 0801 	orr.w	r8, r8, #1
  402f16:	783b      	ldrb	r3, [r7, #0]
  402f18:	e545      	b.n	4029a6 <.LVL22>
  402f1a:	990a      	ldr	r1, [sp, #40]	; 0x28
  402f1c:	680b      	ldr	r3, [r1, #0]
  402f1e:	9307      	str	r3, [sp, #28]
  402f20:	461a      	mov	r2, r3
  402f22:	2a00      	cmp	r2, #0
  402f24:	460b      	mov	r3, r1
  402f26:	f103 0304 	add.w	r3, r3, #4

00402f2a <.LVL154>:
  402f2a:	f6ff adbc 	blt.w	402aa6 <.LVL33>
  402f2e:	930a      	str	r3, [sp, #40]	; 0x28
  402f30:	783b      	ldrb	r3, [r7, #0]

00402f32 <.LVL155>:
  402f32:	e538      	b.n	4029a6 <.LVL22>
  402f34:	f88d 406b 	strb.w	r4, [sp, #107]	; 0x6b
  402f38:	783b      	ldrb	r3, [r7, #0]
  402f3a:	e534      	b.n	4029a6 <.LVL22>

00402f3c <.LVL156>:
  402f3c:	783b      	ldrb	r3, [r7, #0]
  402f3e:	2b68      	cmp	r3, #104	; 0x68
  402f40:	bf03      	ittte	eq
  402f42:	787b      	ldrbeq	r3, [r7, #1]
  402f44:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
  402f48:	3701      	addeq	r7, #1

00402f4a <.LVL158>:
  402f4a:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
  402f4e:	e52a      	b.n	4029a6 <.LVL22>

00402f50 <.LVL160>:
  402f50:	783b      	ldrb	r3, [r7, #0]
  402f52:	2b2a      	cmp	r3, #42	; 0x2a
  402f54:	f107 0101 	add.w	r1, r7, #1

00402f58 <.LVL161>:
  402f58:	f001 811c 	beq.w	404194 <.LVL687>

00402f5c <.LVL162>:
  402f5c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  402f60:	2a09      	cmp	r2, #9
  402f62:	460f      	mov	r7, r1
  402f64:	f201 804a 	bhi.w	403ffc <.LVL637>
  402f68:	2300      	movs	r3, #0

00402f6a <.LVL163>:
  402f6a:	4619      	mov	r1, r3

00402f6c <.LVL164>:
  402f6c:	f817 3b01 	ldrb.w	r3, [r7], #1

00402f70 <.LVL165>:
  402f70:	eb01 0181 	add.w	r1, r1, r1, lsl #2

00402f74 <.LVL166>:
  402f74:	eb02 0141 	add.w	r1, r2, r1, lsl #1

00402f78 <.LVL167>:
  402f78:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  402f7c:	2a09      	cmp	r2, #9
  402f7e:	d9f5      	bls.n	402f6c <.LVL164>
  402f80:	9104      	str	r1, [sp, #16]
  402f82:	e511      	b.n	4029a8 <.LVL22+0x2>

00402f84 <.LVL168>:
  402f84:	f048 0880 	orr.w	r8, r8, #128	; 0x80
  402f88:	783b      	ldrb	r3, [r7, #0]
  402f8a:	e50c      	b.n	4029a6 <.LVL22>
  402f8c:	f048 0808 	orr.w	r8, r8, #8
  402f90:	783b      	ldrb	r3, [r7, #0]
  402f92:	e508      	b.n	4029a6 <.LVL22>
  402f94:	f048 0810 	orr.w	r8, r8, #16
  402f98:	f018 0f20 	tst.w	r8, #32
  402f9c:	930d      	str	r3, [sp, #52]	; 0x34
  402f9e:	f43f af32 	beq.w	402e06 <.LVL123+0xa>
  402fa2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  402fa4:	3507      	adds	r5, #7
  402fa6:	f025 0307 	bic.w	r3, r5, #7
  402faa:	f103 0208 	add.w	r2, r3, #8
  402fae:	920a      	str	r2, [sp, #40]	; 0x28

00402fb0 <.LVL172>:
  402fb0:	e9d3 4500 	ldrd	r4, r5, [r3]
  402fb4:	e739      	b.n	402e2a <.LVL126>

00402fb6 <.LVL173>:
  402fb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  402fb8:	930d      	str	r3, [sp, #52]	; 0x34
  402fba:	6816      	ldr	r6, [r2, #0]

00402fbc <.LVL174>:
  402fbc:	2400      	movs	r4, #0
  402fbe:	f88d 406b 	strb.w	r4, [sp, #107]	; 0x6b
  402fc2:	1d15      	adds	r5, r2, #4

00402fc4 <.LVL175>:
  402fc4:	2e00      	cmp	r6, #0
  402fc6:	f000 873d 	beq.w	403e44 <.LVL593>
  402fca:	9a04      	ldr	r2, [sp, #16]
  402fcc:	1c53      	adds	r3, r2, #1
  402fce:	f000 869b 	beq.w	403d08 <.LVL549>

00402fd2 <.LBB11>:
  402fd2:	4621      	mov	r1, r4
  402fd4:	4630      	mov	r0, r6
  402fd6:	f00d fd63 	bl	410aa0 <memchr>

00402fda <.LVL176>:
  402fda:	9009      	str	r0, [sp, #36]	; 0x24
  402fdc:	2800      	cmp	r0, #0
  402fde:	f000 8782 	beq.w	403ee6 <.LBB63>
  402fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402fe4:	9404      	str	r4, [sp, #16]
  402fe6:	1b9b      	subs	r3, r3, r6
  402fe8:	461a      	mov	r2, r3
  402fea:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  402fee:	9308      	str	r3, [sp, #32]

00402ff0 <.LBE11>:
  402ff0:	950a      	str	r5, [sp, #40]	; 0x28

00402ff2 <.LBB12>:
  402ff2:	4623      	mov	r3, r4
  402ff4:	9202      	str	r2, [sp, #8]

00402ff6 <.LBE12>:
  402ff6:	9309      	str	r3, [sp, #36]	; 0x24
  402ff8:	9313      	str	r3, [sp, #76]	; 0x4c
  402ffa:	9310      	str	r3, [sp, #64]	; 0x40
  402ffc:	930e      	str	r3, [sp, #56]	; 0x38
  402ffe:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  403002:	e5de      	b.n	402bc2 <.L59>

00403004 <.LVL178>:
  403004:	f048 0110 	orr.w	r1, r8, #16

00403008 <.LVL179>:
  403008:	068e      	lsls	r6, r1, #26

0040300a <.LVL180>:
  40300a:	930d      	str	r3, [sp, #52]	; 0x34
  40300c:	f57f af16 	bpl.w	402e3c <.LVL130+0x6>
  403010:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  403012:	3507      	adds	r5, #7
  403014:	f025 0307 	bic.w	r3, r5, #7
  403018:	f103 0208 	add.w	r2, r3, #8
  40301c:	e9d3 4500 	ldrd	r4, r5, [r3]
  403020:	920a      	str	r2, [sp, #40]	; 0x28

00403022 <.LVL181>:
  403022:	2301      	movs	r3, #1
  403024:	e5a5      	b.n	402b72 <.L150>

00403026 <.LVL182>:
  403026:	980a      	ldr	r0, [sp, #40]	; 0x28
  403028:	4b65      	ldr	r3, [pc, #404]	; (4031c0 <.LVL227+0xa>)
  40302a:	6804      	ldr	r4, [r0, #0]
  40302c:	9314      	str	r3, [sp, #80]	; 0x50

0040302e <.LVL183>:
  40302e:	2230      	movs	r2, #48	; 0x30
  403030:	2378      	movs	r3, #120	; 0x78
  403032:	3004      	adds	r0, #4

00403034 <.LVL184>:
  403034:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
  403038:	930d      	str	r3, [sp, #52]	; 0x34
  40303a:	f048 0102 	orr.w	r1, r8, #2
  40303e:	900a      	str	r0, [sp, #40]	; 0x28
  403040:	2500      	movs	r5, #0

00403042 <.LVL185>:
  403042:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c

00403046 <.LVL186>:
  403046:	2302      	movs	r3, #2
  403048:	e593      	b.n	402b72 <.L150>

0040304a <.LVL187>:
  40304a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40304c:	930d      	str	r3, [sp, #52]	; 0x34
  40304e:	f018 0f08 	tst.w	r8, #8
  403052:	f105 0507 	add.w	r5, r5, #7
  403056:	f000 84ed 	beq.w	403a34 <.LVL468>
  40305a:	f025 0307 	bic.w	r3, r5, #7
  40305e:	ed93 8b00 	vldr	d8, [r3]

00403062 <.LVL188>:
  403062:	f103 0208 	add.w	r2, r3, #8
  403066:	920a      	str	r2, [sp, #40]	; 0x28

00403068 <.LVL189>:
  403068:	eeb0 7bc8 	vabs.f64	d7, d8
  40306c:	eeb4 7b49 	vcmp.f64	d7, d9
  403070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403074:	f340 8439 	ble.w	4038ea <.LBE27>
  403078:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
  40307c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403080:	f100 86f0 	bmi.w	403e64 <.LVL595>
  403084:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  403088:	4e4e      	ldr	r6, [pc, #312]	; (4031c4 <.LVL227+0xe>)

0040308a <.LVL190>:
  40308a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40308c:	2303      	movs	r3, #3
  40308e:	2100      	movs	r1, #0
  403090:	4618      	mov	r0, r3
  403092:	9302      	str	r3, [sp, #8]
  403094:	1f33      	subs	r3, r6, #4
  403096:	9109      	str	r1, [sp, #36]	; 0x24
  403098:	f028 0880 	bic.w	r8, r8, #128	; 0x80

0040309c <.LVL191>:
  40309c:	2c47      	cmp	r4, #71	; 0x47
  40309e:	bfd8      	it	le
  4030a0:	461e      	movle	r6, r3

004030a2 <.LVL192>:
  4030a2:	9008      	str	r0, [sp, #32]
  4030a4:	9104      	str	r1, [sp, #16]
  4030a6:	9113      	str	r1, [sp, #76]	; 0x4c
  4030a8:	9110      	str	r1, [sp, #64]	; 0x40
  4030aa:	910e      	str	r1, [sp, #56]	; 0x38
  4030ac:	e589      	b.n	402bc2 <.L59>

004030ae <.LVL193>:
  4030ae:	980a      	ldr	r0, [sp, #40]	; 0x28
  4030b0:	930d      	str	r3, [sp, #52]	; 0x34
  4030b2:	6801      	ldr	r1, [r0, #0]
  4030b4:	f88d 10d4 	strb.w	r1, [sp, #212]	; 0xd4

004030b8 <.LVL194>:
  4030b8:	2300      	movs	r3, #0
  4030ba:	4601      	mov	r1, r0
  4030bc:	461a      	mov	r2, r3
  4030be:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
  4030c2:	3104      	adds	r1, #4

004030c4 <.LVL195>:
  4030c4:	2301      	movs	r3, #1
  4030c6:	9302      	str	r3, [sp, #8]
  4030c8:	9209      	str	r2, [sp, #36]	; 0x24
  4030ca:	9204      	str	r2, [sp, #16]
  4030cc:	9213      	str	r2, [sp, #76]	; 0x4c
  4030ce:	9210      	str	r2, [sp, #64]	; 0x40
  4030d0:	920e      	str	r2, [sp, #56]	; 0x38
  4030d2:	910a      	str	r1, [sp, #40]	; 0x28
  4030d4:	9308      	str	r3, [sp, #32]
  4030d6:	ae35      	add	r6, sp, #212	; 0xd4

004030d8 <.LVL196>:
  4030d8:	e577      	b.n	402bca <.LVL64>

004030da <.LVL197>:
  4030da:	f048 0110 	orr.w	r1, r8, #16

004030de <.LVL198>:
  4030de:	068c      	lsls	r4, r1, #26
  4030e0:	930d      	str	r3, [sp, #52]	; 0x34
  4030e2:	f57f aec1 	bpl.w	402e68 <.LVL134+0x8>
  4030e6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4030e8:	3507      	adds	r5, #7
  4030ea:	f025 0507 	bic.w	r5, r5, #7
  4030ee:	e9d5 2300 	ldrd	r2, r3, [r5]
  4030f2:	2a00      	cmp	r2, #0
  4030f4:	f105 0008 	add.w	r0, r5, #8
  4030f8:	461d      	mov	r5, r3
  4030fa:	f173 0300 	sbcs.w	r3, r3, #0
  4030fe:	900a      	str	r0, [sp, #40]	; 0x28

00403100 <.LVL199>:
  403100:	4614      	mov	r4, r2

00403102 <.LVL200>:
  403102:	f6bf aec7 	bge.w	402e94 <.LVL137+0xa>

00403106 <.LVL201>:
  403106:	232d      	movs	r3, #45	; 0x2d
  403108:	4264      	negs	r4, r4

0040310a <.LVL202>:
  40310a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
  40310e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1

00403112 <.LVL203>:
  403112:	2301      	movs	r3, #1
  403114:	e530      	b.n	402b78 <.L65>

00403116 <.LVL204>:
  403116:	783b      	ldrb	r3, [r7, #0]
  403118:	2b6c      	cmp	r3, #108	; 0x6c
  40311a:	bf03      	ittte	eq
  40311c:	787b      	ldrbeq	r3, [r7, #1]
  40311e:	f048 0820 	orreq.w	r8, r8, #32
  403122:	3701      	addeq	r7, #1

00403124 <.LVL206>:
  403124:	f048 0810 	orrne.w	r8, r8, #16
  403128:	e43d      	b.n	4029a6 <.LVL22>

0040312a <.LVL208>:
  40312a:	f018 0f20 	tst.w	r8, #32
  40312e:	f040 8509 	bne.w	403b44 <.LVL499>
  403132:	f018 0f10 	tst.w	r8, #16
  403136:	d135      	bne.n	4031a4 <.LVL222>
  403138:	f018 0f40 	tst.w	r8, #64	; 0x40
  40313c:	f040 8678 	bne.w	403e30 <.LBE23>
  403140:	f418 7f00 	tst.w	r8, #512	; 0x200
  403144:	d02e      	beq.n	4031a4 <.LVL222>

00403146 <.LVL209>:
  403146:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403148:	6813      	ldr	r3, [r2, #0]
  40314a:	3204      	adds	r2, #4

0040314c <.LVL210>:
  40314c:	920a      	str	r2, [sp, #40]	; 0x28
  40314e:	f89d 200c 	ldrb.w	r2, [sp, #12]

00403152 <.LVL211>:
  403152:	701a      	strb	r2, [r3, #0]
  403154:	463e      	mov	r6, r7

00403156 <.LVL212>:
  403156:	f7ff bbf6 	b.w	402946 <.LVL10>

0040315a <.LVL213>:
  40315a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40315e:	2300      	movs	r3, #0
  403160:	4619      	mov	r1, r3

00403162 <.LVL214>:
  403162:	f817 3b01 	ldrb.w	r3, [r7], #1

00403166 <.LVL215>:
  403166:	eb01 0181 	add.w	r1, r1, r1, lsl #2

0040316a <.LVL216>:
  40316a:	eb02 0141 	add.w	r1, r2, r1, lsl #1

0040316e <.LVL217>:
  40316e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  403172:	2a09      	cmp	r2, #9
  403174:	d9f5      	bls.n	403162 <.LVL214>
  403176:	9107      	str	r1, [sp, #28]
  403178:	e416      	b.n	4029a8 <.LVL22+0x2>

0040317a <.LVL218>:
  40317a:	4619      	mov	r1, r3
  40317c:	930d      	str	r3, [sp, #52]	; 0x34
  40317e:	2b00      	cmp	r3, #0
  403180:	f000 84cf 	beq.w	403b22 <.LDL1>

00403184 <.LVL219>:
  403184:	2300      	movs	r3, #0
  403186:	2001      	movs	r0, #1
  403188:	461a      	mov	r2, r3
  40318a:	9002      	str	r0, [sp, #8]
  40318c:	f88d 10d4 	strb.w	r1, [sp, #212]	; 0xd4

00403190 <.LVL220>:
  403190:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
  403194:	9309      	str	r3, [sp, #36]	; 0x24
  403196:	9304      	str	r3, [sp, #16]
  403198:	9313      	str	r3, [sp, #76]	; 0x4c
  40319a:	9310      	str	r3, [sp, #64]	; 0x40
  40319c:	930e      	str	r3, [sp, #56]	; 0x38
  40319e:	9008      	str	r0, [sp, #32]
  4031a0:	ae35      	add	r6, sp, #212	; 0xd4

004031a2 <.LVL221>:
  4031a2:	e512      	b.n	402bca <.LVL64>

004031a4 <.LVL222>:
  4031a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4031a6:	6813      	ldr	r3, [r2, #0]
  4031a8:	3204      	adds	r2, #4

004031aa <.LVL223>:
  4031aa:	920a      	str	r2, [sp, #40]	; 0x28
  4031ac:	9a03      	ldr	r2, [sp, #12]

004031ae <.LVL224>:
  4031ae:	601a      	str	r2, [r3, #0]

004031b0 <.LVL225>:
  4031b0:	463e      	mov	r6, r7

004031b2 <.LVL226>:
  4031b2:	f7ff bbc8 	b.w	402946 <.LVL10>

004031b6 <.LVL227>:
  4031b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4031b8:	e553      	b.n	402c62 <.LVL82>
  4031ba:	bf00      	nop
  4031bc:	00412218 	.word	0x00412218
  4031c0:	0041222c 	.word	0x0041222c
  4031c4:	0041220c 	.word	0x0041220c

004031c8 <.LVL228>:
  4031c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4031ca:	2a65      	cmp	r2, #101	; 0x65
  4031cc:	f340 8096 	ble.w	4032fc <.LVL260>
  4031d0:	eeb5 8b40 	vcmp.f64	d8, #0.0
  4031d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4031d8:	f040 8139 	bne.w	40344e <.LVL295>
  4031dc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  4031de:	49c2      	ldr	r1, [pc, #776]	; (4034e8 <.LVL315+0x6>)
  4031e0:	f8c9 1000 	str.w	r1, [r9]
  4031e4:	3201      	adds	r2, #1
  4031e6:	3301      	adds	r3, #1
  4031e8:	2101      	movs	r1, #1
  4031ea:	2a07      	cmp	r2, #7
  4031ec:	9324      	str	r3, [sp, #144]	; 0x90
  4031ee:	9223      	str	r2, [sp, #140]	; 0x8c
  4031f0:	f8c9 1004 	str.w	r1, [r9, #4]
  4031f4:	f300 8444 	bgt.w	403a80 <.LBE21>

004031f8 <.LVL229>:
  4031f8:	f109 0908 	add.w	r9, r9, #8

004031fc <.LVL230>:
  4031fc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  4031fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403200:	4293      	cmp	r3, r2
  403202:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403204:	db03      	blt.n	40320e <.LVL230+0x12>
  403206:	f018 0f01 	tst.w	r8, #1
  40320a:	f43f ad9d 	beq.w	402d48 <.LVL104>
  40320e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  403210:	9815      	ldr	r0, [sp, #84]	; 0x54
  403212:	9917      	ldr	r1, [sp, #92]	; 0x5c
  403214:	f8c9 1000 	str.w	r1, [r9]
  403218:	3201      	adds	r2, #1
  40321a:	4403      	add	r3, r0
  40321c:	2a07      	cmp	r2, #7
  40321e:	f8c9 0004 	str.w	r0, [r9, #4]
  403222:	9324      	str	r3, [sp, #144]	; 0x90

00403224 <.LVL231>:
  403224:	9223      	str	r2, [sp, #140]	; 0x8c
  403226:	f300 84b2 	bgt.w	403b8e <.LVL509>

0040322a <.LVL232>:
  40322a:	f109 0908 	add.w	r9, r9, #8

0040322e <.LVL233>:
  40322e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403230:	1e54      	subs	r4, r2, #1
  403232:	2c00      	cmp	r4, #0
  403234:	f77f ad88 	ble.w	402d48 <.LVL104>
  403238:	2c10      	cmp	r4, #16
  40323a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40323c:	f340 8308 	ble.w	403850 <.LVL421>
  403240:	2510      	movs	r5, #16
  403242:	9e05      	ldr	r6, [sp, #20]
  403244:	e005      	b.n	403252 <.LVL238>

00403246 <.LVL235>:
  403246:	f109 0908 	add.w	r9, r9, #8

0040324a <.LVL236>:
  40324a:	3c10      	subs	r4, #16
  40324c:	2c10      	cmp	r4, #16
  40324e:	f340 82ff 	ble.w	403850 <.LVL421>

00403252 <.LVL238>:
  403252:	3201      	adds	r2, #1
  403254:	3310      	adds	r3, #16
  403256:	2a07      	cmp	r2, #7
  403258:	9324      	str	r3, [sp, #144]	; 0x90

0040325a <.LVL239>:
  40325a:	9223      	str	r2, [sp, #140]	; 0x8c
  40325c:	f8c9 a000 	str.w	sl, [r9]
  403260:	f8c9 5004 	str.w	r5, [r9, #4]
  403264:	ddef      	ble.n	403246 <.LVL235>
  403266:	aa22      	add	r2, sp, #136	; 0x88
  403268:	4631      	mov	r1, r6
  40326a:	4658      	mov	r0, fp
  40326c:	f00c f842 	bl	40f2f4 <__ssprint_r>

00403270 <.LVL240>:
  403270:	2800      	cmp	r0, #0
  403272:	f47f ac31 	bne.w	402ad8 <.L189>
  403276:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403278:	9a23      	ldr	r2, [sp, #140]	; 0x8c

0040327a <.LVL241>:
  40327a:	f10d 0994 	add.w	r9, sp, #148	; 0x94

0040327e <.LVL242>:
  40327e:	e7e4      	b.n	40324a <.LVL236>

00403280 <.LVL243>:
  403280:	9a07      	ldr	r2, [sp, #28]
  403282:	9902      	ldr	r1, [sp, #8]
  403284:	1a54      	subs	r4, r2, r1

00403286 <.LVL244>:
  403286:	2c00      	cmp	r4, #0
  403288:	f77f ad0f 	ble.w	402caa <.LVL86+0x8>
  40328c:	2c10      	cmp	r4, #16
  40328e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  403290:	dd26      	ble.n	4032e0 <.LVL257>
  403292:	4649      	mov	r1, r9
  403294:	2510      	movs	r5, #16
  403296:	46a1      	mov	r9, r4
  403298:	9c05      	ldr	r4, [sp, #20]

0040329a <.LVL245>:
  40329a:	e006      	b.n	4032aa <.LVL249>

0040329c <.LVL246>:
  40329c:	f1a9 0910 	sub.w	r9, r9, #16

004032a0 <.LVL247>:
  4032a0:	f1b9 0f10 	cmp.w	r9, #16
  4032a4:	f101 0108 	add.w	r1, r1, #8

004032a8 <.LVL248>:
  4032a8:	dd18      	ble.n	4032dc <.LVL256>

004032aa <.LVL249>:
  4032aa:	3201      	adds	r2, #1
  4032ac:	3310      	adds	r3, #16
  4032ae:	2a07      	cmp	r2, #7
  4032b0:	9324      	str	r3, [sp, #144]	; 0x90

004032b2 <.LVL250>:
  4032b2:	9223      	str	r2, [sp, #140]	; 0x8c
  4032b4:	f8c1 a000 	str.w	sl, [r1]
  4032b8:	604d      	str	r5, [r1, #4]
  4032ba:	ddef      	ble.n	40329c <.LVL246>
  4032bc:	aa22      	add	r2, sp, #136	; 0x88
  4032be:	4621      	mov	r1, r4

004032c0 <.LVL251>:
  4032c0:	4658      	mov	r0, fp
  4032c2:	f00c f817 	bl	40f2f4 <__ssprint_r>

004032c6 <.LVL252>:
  4032c6:	2800      	cmp	r0, #0
  4032c8:	f47f ac06 	bne.w	402ad8 <.L189>
  4032cc:	f1a9 0910 	sub.w	r9, r9, #16

004032d0 <.LVL253>:
  4032d0:	f1b9 0f10 	cmp.w	r9, #16
  4032d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4032d6:	9a23      	ldr	r2, [sp, #140]	; 0x8c

004032d8 <.LVL254>:
  4032d8:	a925      	add	r1, sp, #148	; 0x94

004032da <.LVL255>:
  4032da:	dce6      	bgt.n	4032aa <.LVL249>

004032dc <.LVL256>:
  4032dc:	464c      	mov	r4, r9
  4032de:	4689      	mov	r9, r1

004032e0 <.LVL257>:
  4032e0:	3201      	adds	r2, #1
  4032e2:	4423      	add	r3, r4
  4032e4:	2a07      	cmp	r2, #7
  4032e6:	9324      	str	r3, [sp, #144]	; 0x90
  4032e8:	9223      	str	r2, [sp, #140]	; 0x8c
  4032ea:	f8c9 a000 	str.w	sl, [r9]
  4032ee:	f8c9 4004 	str.w	r4, [r9, #4]
  4032f2:	f300 82e6 	bgt.w	4038c2 <.LVL432>

004032f6 <.LVL258>:
  4032f6:	f109 0908 	add.w	r9, r9, #8

004032fa <.LVL259>:
  4032fa:	e4d6      	b.n	402caa <.LVL86+0x8>

004032fc <.LVL260>:
  4032fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4032fe:	f8c9 6000 	str.w	r6, [r9]
  403302:	2a01      	cmp	r2, #1
  403304:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  403306:	f103 0301 	add.w	r3, r3, #1
  40330a:	f102 0201 	add.w	r2, r2, #1
  40330e:	f04f 0101 	mov.w	r1, #1
  403312:	9324      	str	r3, [sp, #144]	; 0x90
  403314:	9223      	str	r2, [sp, #140]	; 0x8c
  403316:	f8c9 1004 	str.w	r1, [r9, #4]
  40331a:	f340 82a5 	ble.w	403868 <.LBE19>
  40331e:	2a07      	cmp	r2, #7
  403320:	f300 82b5 	bgt.w	40388e <.LBE26>
  403324:	f109 0908 	add.w	r9, r9, #8

00403328 <.LVL261>:
  403328:	9815      	ldr	r0, [sp, #84]	; 0x54
  40332a:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40332c:	f8c9 1000 	str.w	r1, [r9]
  403330:	3201      	adds	r2, #1
  403332:	4403      	add	r3, r0
  403334:	2a07      	cmp	r2, #7
  403336:	9324      	str	r3, [sp, #144]	; 0x90

00403338 <.LVL262>:
  403338:	9223      	str	r2, [sp, #140]	; 0x8c
  40333a:	f8c9 0004 	str.w	r0, [r9, #4]
  40333e:	f300 82b3 	bgt.w	4038a8 <.LVL429>
  403342:	f109 0908 	add.w	r9, r9, #8

00403346 <.LVL263>:
  403346:	eeb5 8b40 	vcmp.f64	d8, #0.0
  40334a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40334e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403350:	f000 8121 	beq.w	403596 <.LVL337>
  403354:	3901      	subs	r1, #1
  403356:	3201      	adds	r2, #1
  403358:	3601      	adds	r6, #1

0040335a <.LVL264>:
  40335a:	440b      	add	r3, r1
  40335c:	2a07      	cmp	r2, #7
  40335e:	f8c9 6000 	str.w	r6, [r9]
  403362:	9223      	str	r2, [sp, #140]	; 0x8c
  403364:	9324      	str	r3, [sp, #144]	; 0x90

00403366 <.LVL265>:
  403366:	f8c9 1004 	str.w	r1, [r9, #4]
  40336a:	f300 8146 	bgt.w	4035fa <.LVL348>

0040336e <.LVL266>:
  40336e:	f109 0908 	add.w	r9, r9, #8

00403372 <.LVL267>:
  403372:	9819      	ldr	r0, [sp, #100]	; 0x64
  403374:	f8c9 0004 	str.w	r0, [r9, #4]
  403378:	3201      	adds	r2, #1
  40337a:	4403      	add	r3, r0
  40337c:	a91e      	add	r1, sp, #120	; 0x78
  40337e:	2a07      	cmp	r2, #7
  403380:	9324      	str	r3, [sp, #144]	; 0x90

00403382 <.LVL268>:
  403382:	9223      	str	r2, [sp, #140]	; 0x8c
  403384:	f8c9 1000 	str.w	r1, [r9]
  403388:	f77f acdc 	ble.w	402d44 <.LVL103>

0040338c <.LVL269>:
  40338c:	aa22      	add	r2, sp, #136	; 0x88
  40338e:	9905      	ldr	r1, [sp, #20]
  403390:	4658      	mov	r0, fp
  403392:	f00b ffaf 	bl	40f2f4 <__ssprint_r>

00403396 <.LVL270>:
  403396:	2800      	cmp	r0, #0
  403398:	f47f ab9e 	bne.w	402ad8 <.L189>
  40339c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40339e:	f10d 0994 	add.w	r9, sp, #148	; 0x94
  4033a2:	e4d1      	b.n	402d48 <.LVL104>

004033a4 <.LVL271>:
  4033a4:	4641      	mov	r1, r8

004033a6 <.LVL272>:
  4033a6:	2b01      	cmp	r3, #1
  4033a8:	f000 8135 	beq.w	403616 <.LVL351>
  4033ac:	2b02      	cmp	r3, #2
  4033ae:	d127      	bne.n	403400 <.LVL286>
  4033b0:	4688      	mov	r8, r1
  4033b2:	2400      	movs	r4, #0

004033b4 <.LVL273>:
  4033b4:	2500      	movs	r5, #0
  4033b6:	e57e      	b.n	402eb6 <.LVL141>

004033b8 <.LVL274>:
  4033b8:	aa22      	add	r2, sp, #136	; 0x88
  4033ba:	9905      	ldr	r1, [sp, #20]
  4033bc:	4658      	mov	r0, fp
  4033be:	f00b ff99 	bl	40f2f4 <__ssprint_r>

004033c2 <.LVL275>:
  4033c2:	2800      	cmp	r0, #0
  4033c4:	f47f ab88 	bne.w	402ad8 <.L189>
  4033c8:	9b24      	ldr	r3, [sp, #144]	; 0x90

004033ca <.LVL276>:
  4033ca:	f10d 0994 	add.w	r9, sp, #148	; 0x94

004033ce <.LVL277>:
  4033ce:	e4a8      	b.n	402d22 <.LVL102>

004033d0 <.LVL278>:
  4033d0:	aa22      	add	r2, sp, #136	; 0x88
  4033d2:	9905      	ldr	r1, [sp, #20]
  4033d4:	4658      	mov	r0, fp
  4033d6:	f00b ff8d 	bl	40f2f4 <__ssprint_r>

004033da <.LVL279>:
  4033da:	2800      	cmp	r0, #0
  4033dc:	f47f ab7c 	bne.w	402ad8 <.L189>
  4033e0:	9b24      	ldr	r3, [sp, #144]	; 0x90

004033e2 <.LVL280>:
  4033e2:	f10d 0994 	add.w	r9, sp, #148	; 0x94

004033e6 <.LVL281>:
  4033e6:	e44c      	b.n	402c82 <.LVL84>

004033e8 <.LVL282>:
  4033e8:	aa22      	add	r2, sp, #136	; 0x88
  4033ea:	9905      	ldr	r1, [sp, #20]
  4033ec:	4658      	mov	r0, fp
  4033ee:	f00b ff81 	bl	40f2f4 <__ssprint_r>

004033f2 <.LVL283>:
  4033f2:	2800      	cmp	r0, #0
  4033f4:	f47f ab70 	bne.w	402ad8 <.L189>
  4033f8:	9b24      	ldr	r3, [sp, #144]	; 0x90

004033fa <.LVL284>:
  4033fa:	f10d 0994 	add.w	r9, sp, #148	; 0x94

004033fe <.LVL285>:
  4033fe:	e450      	b.n	402ca2 <.LVL86>

00403400 <.LVL286>:
  403400:	4688      	mov	r8, r1
  403402:	2400      	movs	r4, #0

00403404 <.LVL287>:
  403404:	2500      	movs	r5, #0

00403406 <.LVL288>:
  403406:	a94e      	add	r1, sp, #312	; 0x138

00403408 <.LVL289>:
  403408:	e000      	b.n	40340c <.LVL291>

0040340a <.LVL290>:
  40340a:	4631      	mov	r1, r6

0040340c <.LVL291>:
  40340c:	08e2      	lsrs	r2, r4, #3
  40340e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  403412:	08e8      	lsrs	r0, r5, #3
  403414:	f004 0307 	and.w	r3, r4, #7
  403418:	4605      	mov	r5, r0
  40341a:	4614      	mov	r4, r2

0040341c <.LVL292>:
  40341c:	3330      	adds	r3, #48	; 0x30
  40341e:	ea54 0205 	orrs.w	r2, r4, r5
  403422:	f801 3c01 	strb.w	r3, [r1, #-1]
  403426:	f101 36ff 	add.w	r6, r1, #4294967295

0040342a <.LVL293>:
  40342a:	d1ee      	bne.n	40340a <.LVL290>
  40342c:	f018 0f01 	tst.w	r8, #1
  403430:	f43f ad51 	beq.w	402ed6 <.LVL147>
  403434:	2b30      	cmp	r3, #48	; 0x30
  403436:	f43f ad4e 	beq.w	402ed6 <.LVL147>
  40343a:	2330      	movs	r3, #48	; 0x30
  40343c:	3902      	subs	r1, #2

0040343e <.LVL294>:
  40343e:	f806 3c01 	strb.w	r3, [r6, #-1]
  403442:	ab4e      	add	r3, sp, #312	; 0x138
  403444:	1a5b      	subs	r3, r3, r1
  403446:	9308      	str	r3, [sp, #32]
  403448:	460e      	mov	r6, r1
  40344a:	f7ff bbad 	b.w	402ba8 <.LVL61>

0040344e <.LVL295>:
  40344e:	991c      	ldr	r1, [sp, #112]	; 0x70
  403450:	2900      	cmp	r1, #0
  403452:	f340 832f 	ble.w	403ab4 <.LBE46>

00403456 <.LVL296>:
  403456:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403458:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40345a:	428a      	cmp	r2, r1
  40345c:	bfa8      	it	ge
  40345e:	460a      	movge	r2, r1

00403460 <.LBB13>:
  403460:	2a00      	cmp	r2, #0
  403462:	4614      	mov	r4, r2

00403464 <.LVL297>:
  403464:	dd0d      	ble.n	403482 <.LVL300>
  403466:	9a23      	ldr	r2, [sp, #140]	; 0x8c

00403468 <.LVL298>:
  403468:	f8c9 6000 	str.w	r6, [r9]
  40346c:	3201      	adds	r2, #1
  40346e:	4423      	add	r3, r4
  403470:	2a07      	cmp	r2, #7
  403472:	9324      	str	r3, [sp, #144]	; 0x90
  403474:	f8c9 4004 	str.w	r4, [r9, #4]
  403478:	9223      	str	r2, [sp, #140]	; 0x8c
  40347a:	f300 84cc 	bgt.w	403e16 <.LBB23>

0040347e <.LVL299>:
  40347e:	f109 0908 	add.w	r9, r9, #8

00403482 <.LVL300>:
  403482:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403484:	2c00      	cmp	r4, #0
  403486:	bfa8      	it	ge
  403488:	1b12      	subge	r2, r2, r4
  40348a:	2a00      	cmp	r2, #0
  40348c:	4614      	mov	r4, r2

0040348e <.LVL301>:
  40348e:	f340 8100 	ble.w	403692 <.LBE15>
  403492:	2c10      	cmp	r4, #16
  403494:	9a23      	ldr	r2, [sp, #140]	; 0x8c

00403496 <.LVL302>:
  403496:	f340 82d8 	ble.w	403a4a <.LBB20>
  40349a:	4649      	mov	r1, r9
  40349c:	2510      	movs	r5, #16
  40349e:	46a1      	mov	r9, r4
  4034a0:	9c05      	ldr	r4, [sp, #20]

004034a2 <.LVL303>:
  4034a2:	e006      	b.n	4034b2 <.LVL307>

004034a4 <.LVL304>:
  4034a4:	3108      	adds	r1, #8

004034a6 <.LVL305>:
  4034a6:	f1a9 0910 	sub.w	r9, r9, #16
  4034aa:	f1b9 0f10 	cmp.w	r9, #16
  4034ae:	f340 82ca 	ble.w	403a46 <.LVL471>

004034b2 <.LVL307>:
  4034b2:	3201      	adds	r2, #1
  4034b4:	3310      	adds	r3, #16
  4034b6:	2a07      	cmp	r2, #7
  4034b8:	9324      	str	r3, [sp, #144]	; 0x90

004034ba <.LVL308>:
  4034ba:	9223      	str	r2, [sp, #140]	; 0x8c
  4034bc:	f8c1 a000 	str.w	sl, [r1]
  4034c0:	604d      	str	r5, [r1, #4]
  4034c2:	ddef      	ble.n	4034a4 <.LVL304>
  4034c4:	aa22      	add	r2, sp, #136	; 0x88
  4034c6:	4621      	mov	r1, r4

004034c8 <.LVL309>:
  4034c8:	4658      	mov	r0, fp
  4034ca:	f00b ff13 	bl	40f2f4 <__ssprint_r>

004034ce <.LVL310>:
  4034ce:	2800      	cmp	r0, #0
  4034d0:	f47f ab02 	bne.w	402ad8 <.L189>
  4034d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4034d6:	9a23      	ldr	r2, [sp, #140]	; 0x8c

004034d8 <.LVL311>:
  4034d8:	a925      	add	r1, sp, #148	; 0x94

004034da <.LVL312>:
  4034da:	e7e4      	b.n	4034a6 <.LVL305>

004034dc <.LBE13>:
  4034dc:	9b04      	ldr	r3, [sp, #16]

004034de <.LVL314>:
  4034de:	9308      	str	r3, [sp, #32]
  4034e0:	ae4e      	add	r6, sp, #312	; 0x138

004034e2 <.LVL315>:
  4034e2:	f7ff bb61 	b.w	402ba8 <.LVL61>
  4034e6:	bf00      	nop
  4034e8:	00412248 	.word	0x00412248

004034ec <.LVL316>:
  4034ec:	2d00      	cmp	r5, #0
  4034ee:	bf08      	it	eq
  4034f0:	2c0a      	cmpeq	r4, #10
  4034f2:	f0c0 808f 	bcc.w	403614 <.LVL350>
  4034f6:	f408 6380 	and.w	r3, r8, #1024	; 0x400

004034fa <.LVL317>:
  4034fa:	2200      	movs	r2, #0
  4034fc:	9702      	str	r7, [sp, #8]
  4034fe:	f8cd 9018 	str.w	r9, [sp, #24]
  403502:	f8cd b020 	str.w	fp, [sp, #32]
  403506:	ae4e      	add	r6, sp, #312	; 0x138

00403508 <.LVL318>:
  403508:	46c3      	mov	fp, r8
  40350a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48

0040350e <.LVL319>:
  40350e:	4617      	mov	r7, r2

00403510 <.LVL320>:
  403510:	4698      	mov	r8, r3

00403512 <.LVL321>:
  403512:	e00a      	b.n	40352a <.LVL325+0x6>

00403514 <.LVL322>:
  403514:	2300      	movs	r3, #0
  403516:	4620      	mov	r0, r4
  403518:	4629      	mov	r1, r5
  40351a:	220a      	movs	r2, #10
  40351c:	f00f f91e 	bl	41275c <.LFE162>
  403520:	4604      	mov	r4, r0

00403522 <.LVL324>:
  403522:	460d      	mov	r5, r1

00403524 <.LVL325>:
  403524:	ea54 0305 	orrs.w	r3, r4, r5
  403528:	d07e      	beq.n	403628 <.LVL354>
  40352a:	220a      	movs	r2, #10
  40352c:	2300      	movs	r3, #0
  40352e:	4620      	mov	r0, r4
  403530:	4629      	mov	r1, r5
  403532:	f00f f913 	bl	41275c <.LFE162>
  403536:	3230      	adds	r2, #48	; 0x30
  403538:	f806 2c01 	strb.w	r2, [r6, #-1]
  40353c:	3701      	adds	r7, #1

0040353e <.LVL328>:
  40353e:	3e01      	subs	r6, #1

00403540 <.LVL329>:
  403540:	f1b8 0f00 	cmp.w	r8, #0
  403544:	d0e6      	beq.n	403514 <.LVL322>
  403546:	f899 3000 	ldrb.w	r3, [r9]
  40354a:	429f      	cmp	r7, r3
  40354c:	d1e2      	bne.n	403514 <.LVL322>
  40354e:	2fff      	cmp	r7, #255	; 0xff
  403550:	d0e0      	beq.n	403514 <.LVL322>
  403552:	2d00      	cmp	r5, #0
  403554:	bf08      	it	eq
  403556:	2c0a      	cmpeq	r4, #10
  403558:	d3dc      	bcc.n	403514 <.LVL322>
  40355a:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40355c:	9916      	ldr	r1, [sp, #88]	; 0x58
  40355e:	1af6      	subs	r6, r6, r3
  403560:	4630      	mov	r0, r6
  403562:	461a      	mov	r2, r3
  403564:	f00e fb7e 	bl	411c64 <.LFE10>

00403568 <.LVL331>:
  403568:	f899 7001 	ldrb.w	r7, [r9, #1]
  40356c:	2f00      	cmp	r7, #0
  40356e:	d0d1      	beq.n	403514 <.LVL322>
  403570:	f109 0901 	add.w	r9, r9, #1
  403574:	2700      	movs	r7, #0
  403576:	e7cd      	b.n	403514 <.LVL322>

00403578 <.LVL333>:
  403578:	aa22      	add	r2, sp, #136	; 0x88
  40357a:	9905      	ldr	r1, [sp, #20]
  40357c:	4658      	mov	r0, fp
  40357e:	f00b feb9 	bl	40f2f4 <__ssprint_r>

00403582 <.LVL334>:
  403582:	2800      	cmp	r0, #0
  403584:	f47f aaa8 	bne.w	402ad8 <.L189>
  403588:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  40358c:	9b24      	ldr	r3, [sp, #144]	; 0x90

0040358e <.LVL335>:
  40358e:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00403592 <.LVL336>:
  403592:	f7ff bb66 	b.w	402c62 <.LVL82>

00403596 <.LVL337>:
  403596:	1e4c      	subs	r4, r1, #1
  403598:	2c00      	cmp	r4, #0
  40359a:	f77f aeea 	ble.w	403372 <.LVL267>
  40359e:	2c10      	cmp	r4, #16
  4035a0:	dd20      	ble.n	4035e4 <.LVL346+0x2>
  4035a2:	2510      	movs	r5, #16
  4035a4:	9e05      	ldr	r6, [sp, #20]

004035a6 <.LVL339>:
  4035a6:	e004      	b.n	4035b2 <.LVL342+0x2>

004035a8 <.LVL340>:
  4035a8:	3c10      	subs	r4, #16

004035aa <.LVL341>:
  4035aa:	2c10      	cmp	r4, #16
  4035ac:	f109 0908 	add.w	r9, r9, #8

004035b0 <.LVL342>:
  4035b0:	dd18      	ble.n	4035e4 <.LVL346+0x2>
  4035b2:	3201      	adds	r2, #1
  4035b4:	3310      	adds	r3, #16
  4035b6:	2a07      	cmp	r2, #7
  4035b8:	9324      	str	r3, [sp, #144]	; 0x90

004035ba <.LVL343>:
  4035ba:	9223      	str	r2, [sp, #140]	; 0x8c
  4035bc:	f8c9 a000 	str.w	sl, [r9]
  4035c0:	f8c9 5004 	str.w	r5, [r9, #4]
  4035c4:	ddf0      	ble.n	4035a8 <.LVL340>
  4035c6:	aa22      	add	r2, sp, #136	; 0x88
  4035c8:	4631      	mov	r1, r6
  4035ca:	4658      	mov	r0, fp
  4035cc:	f00b fe92 	bl	40f2f4 <__ssprint_r>

004035d0 <.LVL344>:
  4035d0:	2800      	cmp	r0, #0
  4035d2:	f47f aa81 	bne.w	402ad8 <.L189>
  4035d6:	3c10      	subs	r4, #16

004035d8 <.LVL345>:
  4035d8:	2c10      	cmp	r4, #16
  4035da:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4035dc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  4035de:	f10d 0994 	add.w	r9, sp, #148	; 0x94

004035e2 <.LVL346>:
  4035e2:	dce6      	bgt.n	4035b2 <.LVL342+0x2>
  4035e4:	3201      	adds	r2, #1
  4035e6:	4423      	add	r3, r4
  4035e8:	2a07      	cmp	r2, #7
  4035ea:	9324      	str	r3, [sp, #144]	; 0x90

004035ec <.LVL347>:
  4035ec:	9223      	str	r2, [sp, #140]	; 0x8c
  4035ee:	f8c9 a000 	str.w	sl, [r9]
  4035f2:	f8c9 4004 	str.w	r4, [r9, #4]
  4035f6:	f77f aeba 	ble.w	40336e <.LVL266>

004035fa <.LVL348>:
  4035fa:	aa22      	add	r2, sp, #136	; 0x88
  4035fc:	9905      	ldr	r1, [sp, #20]
  4035fe:	4658      	mov	r0, fp
  403600:	f00b fe78 	bl	40f2f4 <__ssprint_r>

00403604 <.LVL349>:
  403604:	2800      	cmp	r0, #0
  403606:	f47f aa67 	bne.w	402ad8 <.L189>
  40360a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40360c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40360e:	f10d 0994 	add.w	r9, sp, #148	; 0x94
  403612:	e6ae      	b.n	403372 <.LVL267>

00403614 <.LVL350>:
  403614:	4641      	mov	r1, r8

00403616 <.LVL351>:
  403616:	ae4e      	add	r6, sp, #312	; 0x138
  403618:	3430      	adds	r4, #48	; 0x30

0040361a <.LVL352>:
  40361a:	2301      	movs	r3, #1

0040361c <.LVL353>:
  40361c:	4688      	mov	r8, r1
  40361e:	f806 4d01 	strb.w	r4, [r6, #-1]!
  403622:	9308      	str	r3, [sp, #32]
  403624:	f7ff bac0 	b.w	402ba8 <.LVL61>

00403628 <.LVL354>:
  403628:	ab4e      	add	r3, sp, #312	; 0x138
  40362a:	1b9b      	subs	r3, r3, r6
  40362c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  403630:	46d8      	mov	r8, fp
  403632:	970f      	str	r7, [sp, #60]	; 0x3c
  403634:	f8dd b020 	ldr.w	fp, [sp, #32]

00403638 <.LVL355>:
  403638:	f8dd 9018 	ldr.w	r9, [sp, #24]

0040363c <.LVL356>:
  40363c:	9f02      	ldr	r7, [sp, #8]

0040363e <.LVL357>:
  40363e:	9308      	str	r3, [sp, #32]
  403640:	f7ff bab2 	b.w	402ba8 <.LVL61>

00403644 <.LVL358>:
  403644:	681c      	ldr	r4, [r3, #0]
  403646:	3304      	adds	r3, #4
  403648:	930a      	str	r3, [sp, #40]	; 0x28

0040364a <.LVL359>:
  40364a:	2500      	movs	r5, #0
  40364c:	f7ff bbed 	b.w	402e2a <.LVL126>

00403650 <.LVL360>:
  403650:	3204      	adds	r2, #4
  403652:	681c      	ldr	r4, [r3, #0]
  403654:	920a      	str	r2, [sp, #40]	; 0x28

00403656 <.LVL361>:
  403656:	2301      	movs	r3, #1
  403658:	2500      	movs	r5, #0
  40365a:	f7ff ba8a 	b.w	402b72 <.L150>

0040365e <.LVL362>:
  40365e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403660:	6814      	ldr	r4, [r2, #0]
  403662:	4613      	mov	r3, r2
  403664:	3304      	adds	r3, #4

00403666 <.LVL363>:
  403666:	17e5      	asrs	r5, r4, #31
  403668:	930a      	str	r3, [sp, #40]	; 0x28
  40366a:	4622      	mov	r2, r4
  40366c:	462b      	mov	r3, r5

0040366e <.LVL364>:
  40366e:	e40c      	b.n	402e8a <.LVL137>

00403670 <.LVL365>:
  403670:	681c      	ldr	r4, [r3, #0]
  403672:	3304      	adds	r3, #4
  403674:	930a      	str	r3, [sp, #40]	; 0x28

00403676 <.LVL366>:
  403676:	2500      	movs	r5, #0
  403678:	f7ff ba69 	b.w	402b4e <.LVL51>

0040367c <.LBB15>:
  40367c:	aa22      	add	r2, sp, #136	; 0x88
  40367e:	9905      	ldr	r1, [sp, #20]
  403680:	4658      	mov	r0, fp
  403682:	f00b fe37 	bl	40f2f4 <__ssprint_r>

00403686 <.LVL368>:
  403686:	2800      	cmp	r0, #0
  403688:	f47f aa26 	bne.w	402ad8 <.L189>
  40368c:	9b24      	ldr	r3, [sp, #144]	; 0x90

0040368e <.LVL369>:
  40368e:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00403692 <.LBE15>:
  403692:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403694:	f418 6f80 	tst.w	r8, #1024	; 0x400
  403698:	4432      	add	r2, r6
  40369a:	4615      	mov	r5, r2

0040369c <.LVL371>:
  40369c:	f000 8083 	beq.w	4037a6 <.LVL403>

004036a0 <.LBB16>:
  4036a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4036a2:	9608      	str	r6, [sp, #32]
  4036a4:	4618      	mov	r0, r3

004036a6 <.LBE16>:
  4036a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4036a8:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c

004036ac <.LBB17>:
  4036ac:	1871      	adds	r1, r6, r1
  4036ae:	9104      	str	r1, [sp, #16]
  4036b0:	9706      	str	r7, [sp, #24]
  4036b2:	4649      	mov	r1, r9
  4036b4:	4616      	mov	r6, r2

004036b6 <.LVL372>:
  4036b6:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
  4036ba:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c

004036be <.LVL373>:
  4036be:	9d05      	ldr	r5, [sp, #20]

004036c0 <.LBE17>:
  4036c0:	2b00      	cmp	r3, #0
  4036c2:	d05f      	beq.n	403784 <.LVL399>

004036c4 <.LVL374>:
  4036c4:	f1b8 0f00 	cmp.w	r8, #0
  4036c8:	f000 8108 	beq.w	4038dc <.LBB27>
  4036cc:	f108 38ff 	add.w	r8, r8, #4294967295

004036d0 <.LVL375>:
  4036d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4036d2:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4036d4:	600a      	str	r2, [r1, #0]
  4036d6:	3301      	adds	r3, #1
  4036d8:	4448      	add	r0, r9
  4036da:	2b07      	cmp	r3, #7
  4036dc:	9024      	str	r0, [sp, #144]	; 0x90
  4036de:	f8c1 9004 	str.w	r9, [r1, #4]
  4036e2:	9323      	str	r3, [sp, #140]	; 0x8c
  4036e4:	f300 80c8 	bgt.w	403878 <.LBB26>

004036e8 <.LVL376>:
  4036e8:	3108      	adds	r1, #8

004036ea <.LBB18>:
  4036ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4036ec:	9c04      	ldr	r4, [sp, #16]
  4036ee:	7813      	ldrb	r3, [r2, #0]
  4036f0:	1ba4      	subs	r4, r4, r6

004036f2 <.LVL378>:
  4036f2:	429c      	cmp	r4, r3
  4036f4:	bfa8      	it	ge
  4036f6:	461c      	movge	r4, r3
  4036f8:	2c00      	cmp	r4, #0
  4036fa:	dd0b      	ble.n	403714 <.LVL382>
  4036fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4036fe:	600e      	str	r6, [r1, #0]
  403700:	3301      	adds	r3, #1
  403702:	4420      	add	r0, r4
  403704:	2b07      	cmp	r3, #7
  403706:	9024      	str	r0, [sp, #144]	; 0x90

00403708 <.LVL380>:
  403708:	604c      	str	r4, [r1, #4]
  40370a:	9323      	str	r3, [sp, #140]	; 0x8c
  40370c:	f300 81ab 	bgt.w	403a66 <.LBB21>

00403710 <.LVL381>:
  403710:	7813      	ldrb	r3, [r2, #0]
  403712:	3108      	adds	r1, #8

00403714 <.LVL382>:
  403714:	2c00      	cmp	r4, #0
  403716:	bfac      	ite	ge
  403718:	1b1c      	subge	r4, r3, r4

0040371a <.LVL383>:
  40371a:	461c      	movlt	r4, r3

0040371c <.LVL384>:
  40371c:	2c00      	cmp	r4, #0
  40371e:	dd2d      	ble.n	40377c <.LBE18>
  403720:	2c10      	cmp	r4, #16
  403722:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  403724:	dd1d      	ble.n	403762 <.LVL395>
  403726:	2710      	movs	r7, #16
  403728:	e004      	b.n	403734 <.LVL388>

0040372a <.LVL385>:
  40372a:	3c10      	subs	r4, #16

0040372c <.LVL386>:
  40372c:	2c10      	cmp	r4, #16
  40372e:	f101 0108 	add.w	r1, r1, #8

00403732 <.LVL387>:
  403732:	dd16      	ble.n	403762 <.LVL395>

00403734 <.LVL388>:
  403734:	3201      	adds	r2, #1
  403736:	3010      	adds	r0, #16
  403738:	2a07      	cmp	r2, #7
  40373a:	9024      	str	r0, [sp, #144]	; 0x90

0040373c <.LVL389>:
  40373c:	9223      	str	r2, [sp, #140]	; 0x8c
  40373e:	f8c1 a000 	str.w	sl, [r1]
  403742:	604f      	str	r7, [r1, #4]
  403744:	ddf1      	ble.n	40372a <.LVL385>
  403746:	aa22      	add	r2, sp, #136	; 0x88
  403748:	4629      	mov	r1, r5

0040374a <.LVL390>:
  40374a:	4658      	mov	r0, fp
  40374c:	f00b fdd2 	bl	40f2f4 <__ssprint_r>

00403750 <.LVL391>:
  403750:	2800      	cmp	r0, #0
  403752:	f47f a9c1 	bne.w	402ad8 <.L189>
  403756:	3c10      	subs	r4, #16

00403758 <.LVL392>:
  403758:	2c10      	cmp	r4, #16
  40375a:	9824      	ldr	r0, [sp, #144]	; 0x90
  40375c:	9a23      	ldr	r2, [sp, #140]	; 0x8c

0040375e <.LVL393>:
  40375e:	a925      	add	r1, sp, #148	; 0x94

00403760 <.LVL394>:
  403760:	dce8      	bgt.n	403734 <.LVL388>

00403762 <.LVL395>:
  403762:	3201      	adds	r2, #1
  403764:	4420      	add	r0, r4
  403766:	2a07      	cmp	r2, #7
  403768:	9024      	str	r0, [sp, #144]	; 0x90
  40376a:	9223      	str	r2, [sp, #140]	; 0x8c
  40376c:	f8c1 a000 	str.w	sl, [r1]
  403770:	604c      	str	r4, [r1, #4]
  403772:	f300 8191 	bgt.w	403a98 <.LBB22>

00403776 <.LVL396>:
  403776:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403778:	781b      	ldrb	r3, [r3, #0]
  40377a:	3108      	adds	r1, #8

0040377c <.LBE18>:
  40377c:	441e      	add	r6, r3
  40377e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403780:	2b00      	cmp	r3, #0
  403782:	d19f      	bne.n	4036c4 <.LVL374>

00403784 <.LVL399>:
  403784:	f1b8 0f00 	cmp.w	r8, #0
  403788:	d1a0      	bne.n	4036cc <.LVL374+0x8>
  40378a:	4634      	mov	r4, r6
  40378c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40378e:	9e08      	ldr	r6, [sp, #32]

00403790 <.LVL400>:
  403790:	9f06      	ldr	r7, [sp, #24]
  403792:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c

00403796 <.LVL401>:
  403796:	18b2      	adds	r2, r6, r2
  403798:	4294      	cmp	r4, r2
  40379a:	4689      	mov	r9, r1
  40379c:	4621      	mov	r1, r4
  40379e:	bf28      	it	cs
  4037a0:	4611      	movcs	r1, r2
  4037a2:	4603      	mov	r3, r0

004037a4 <.LVL402>:
  4037a4:	460d      	mov	r5, r1

004037a6 <.LVL403>:
  4037a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  4037a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4037aa:	428a      	cmp	r2, r1
  4037ac:	f280 8201 	bge.w	403bb2 <.LBB47>
  4037b0:	9923      	ldr	r1, [sp, #140]	; 0x8c
  4037b2:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4037b4:	9817      	ldr	r0, [sp, #92]	; 0x5c
  4037b6:	f8c9 0000 	str.w	r0, [r9]
  4037ba:	3101      	adds	r1, #1
  4037bc:	4423      	add	r3, r4
  4037be:	2907      	cmp	r1, #7
  4037c0:	9324      	str	r3, [sp, #144]	; 0x90
  4037c2:	f8c9 4004 	str.w	r4, [r9, #4]
  4037c6:	9123      	str	r1, [sp, #140]	; 0x8c
  4037c8:	f300 828d 	bgt.w	403ce6 <.LBB50>

004037cc <.LVL404>:
  4037cc:	f109 0908 	add.w	r9, r9, #8

004037d0 <.LBB19>:
  4037d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4037d2:	1874      	adds	r4, r6, r1
  4037d4:	1b64      	subs	r4, r4, r5

004037d6 <.LVL406>:
  4037d6:	1a8a      	subs	r2, r1, r2
  4037d8:	4294      	cmp	r4, r2
  4037da:	bfa8      	it	ge
  4037dc:	4614      	movge	r4, r2
  4037de:	2c00      	cmp	r4, #0
  4037e0:	dd0d      	ble.n	4037fe <.LVL409>
  4037e2:	9923      	ldr	r1, [sp, #140]	; 0x8c
  4037e4:	f8c9 5000 	str.w	r5, [r9]
  4037e8:	3101      	adds	r1, #1
  4037ea:	4423      	add	r3, r4
  4037ec:	2907      	cmp	r1, #7
  4037ee:	9324      	str	r3, [sp, #144]	; 0x90
  4037f0:	f8c9 4004 	str.w	r4, [r9, #4]
  4037f4:	9123      	str	r1, [sp, #140]	; 0x8c
  4037f6:	f300 83bc 	bgt.w	403f72 <.LBB24>

004037fa <.LVL408>:
  4037fa:	f109 0908 	add.w	r9, r9, #8

004037fe <.LVL409>:
  4037fe:	2c00      	cmp	r4, #0
  403800:	bfac      	ite	ge
  403802:	1b14      	subge	r4, r2, r4

00403804 <.LVL410>:
  403804:	4614      	movlt	r4, r2

00403806 <.LVL411>:
  403806:	2c00      	cmp	r4, #0
  403808:	f77f aa9e 	ble.w	402d48 <.LVL104>
  40380c:	2c10      	cmp	r4, #16
  40380e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  403810:	dd1e      	ble.n	403850 <.LVL421>
  403812:	2510      	movs	r5, #16

00403814 <.LVL412>:
  403814:	9e05      	ldr	r6, [sp, #20]
  403816:	e004      	b.n	403822 <.LVL416>

00403818 <.LVL413>:
  403818:	f109 0908 	add.w	r9, r9, #8

0040381c <.LVL414>:
  40381c:	3c10      	subs	r4, #16
  40381e:	2c10      	cmp	r4, #16
  403820:	dd16      	ble.n	403850 <.LVL421>

00403822 <.LVL416>:
  403822:	3201      	adds	r2, #1
  403824:	3310      	adds	r3, #16
  403826:	2a07      	cmp	r2, #7
  403828:	9324      	str	r3, [sp, #144]	; 0x90

0040382a <.LVL417>:
  40382a:	9223      	str	r2, [sp, #140]	; 0x8c
  40382c:	f8c9 a000 	str.w	sl, [r9]
  403830:	f8c9 5004 	str.w	r5, [r9, #4]
  403834:	ddf0      	ble.n	403818 <.LVL413>
  403836:	aa22      	add	r2, sp, #136	; 0x88
  403838:	4631      	mov	r1, r6
  40383a:	4658      	mov	r0, fp
  40383c:	f00b fd5a 	bl	40f2f4 <__ssprint_r>

00403840 <.LVL418>:
  403840:	2800      	cmp	r0, #0
  403842:	f47f a949 	bne.w	402ad8 <.L189>
  403846:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403848:	9a23      	ldr	r2, [sp, #140]	; 0x8c

0040384a <.LVL419>:
  40384a:	f10d 0994 	add.w	r9, sp, #148	; 0x94

0040384e <.LVL420>:
  40384e:	e7e5      	b.n	40381c <.LVL414>

00403850 <.LVL421>:
  403850:	3201      	adds	r2, #1
  403852:	4423      	add	r3, r4
  403854:	2a07      	cmp	r2, #7
  403856:	9324      	str	r3, [sp, #144]	; 0x90
  403858:	9223      	str	r2, [sp, #140]	; 0x8c
  40385a:	f8c9 a000 	str.w	sl, [r9]
  40385e:	f8c9 4004 	str.w	r4, [r9, #4]
  403862:	f77f aa6f 	ble.w	402d44 <.LVL103>
  403866:	e591      	b.n	40338c <.LVL269>

00403868 <.LBE19>:
  403868:	f018 0f01 	tst.w	r8, #1
  40386c:	f47f ad57 	bne.w	40331e <.LVL260+0x22>
  403870:	2a07      	cmp	r2, #7
  403872:	f77f ad7c 	ble.w	40336e <.LVL266>
  403876:	e6c0      	b.n	4035fa <.LVL348>

00403878 <.LBB26>:
  403878:	aa22      	add	r2, sp, #136	; 0x88
  40387a:	4629      	mov	r1, r5
  40387c:	4658      	mov	r0, fp
  40387e:	f00b fd39 	bl	40f2f4 <__ssprint_r>

00403882 <.LVL424>:
  403882:	2800      	cmp	r0, #0
  403884:	f47f a928 	bne.w	402ad8 <.L189>
  403888:	9824      	ldr	r0, [sp, #144]	; 0x90

0040388a <.LVL425>:
  40388a:	a925      	add	r1, sp, #148	; 0x94

0040388c <.LVL426>:
  40388c:	e72d      	b.n	4036ea <.LBB18>

0040388e <.LBE26>:
  40388e:	aa22      	add	r2, sp, #136	; 0x88
  403890:	9905      	ldr	r1, [sp, #20]
  403892:	4658      	mov	r0, fp
  403894:	f00b fd2e 	bl	40f2f4 <__ssprint_r>

00403898 <.LVL428>:
  403898:	2800      	cmp	r0, #0
  40389a:	f47f a91d 	bne.w	402ad8 <.L189>
  40389e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4038a0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  4038a2:	f10d 0994 	add.w	r9, sp, #148	; 0x94
  4038a6:	e53f      	b.n	403328 <.LVL261>

004038a8 <.LVL429>:
  4038a8:	aa22      	add	r2, sp, #136	; 0x88
  4038aa:	9905      	ldr	r1, [sp, #20]
  4038ac:	4658      	mov	r0, fp
  4038ae:	f00b fd21 	bl	40f2f4 <__ssprint_r>

004038b2 <.LVL430>:
  4038b2:	2800      	cmp	r0, #0
  4038b4:	f47f a910 	bne.w	402ad8 <.L189>
  4038b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4038ba:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  4038bc:	f10d 0994 	add.w	r9, sp, #148	; 0x94

004038c0 <.LVL431>:
  4038c0:	e541      	b.n	403346 <.LVL263>

004038c2 <.LVL432>:
  4038c2:	aa22      	add	r2, sp, #136	; 0x88
  4038c4:	9905      	ldr	r1, [sp, #20]
  4038c6:	4658      	mov	r0, fp
  4038c8:	f00b fd14 	bl	40f2f4 <__ssprint_r>

004038cc <.LVL433>:
  4038cc:	2800      	cmp	r0, #0
  4038ce:	f47f a903 	bne.w	402ad8 <.L189>
  4038d2:	9b24      	ldr	r3, [sp, #144]	; 0x90

004038d4 <.LVL434>:
  4038d4:	f10d 0994 	add.w	r9, sp, #148	; 0x94

004038d8 <.LVL435>:
  4038d8:	f7ff b9e7 	b.w	402caa <.LVL86+0x8>

004038dc <.LBB27>:
  4038dc:	9b12      	ldr	r3, [sp, #72]	; 0x48

004038de <.LVL437>:
  4038de:	3b01      	subs	r3, #1
  4038e0:	9312      	str	r3, [sp, #72]	; 0x48

004038e2 <.LVL438>:
  4038e2:	9b10      	ldr	r3, [sp, #64]	; 0x40

004038e4 <.LVL439>:
  4038e4:	3b01      	subs	r3, #1
  4038e6:	9310      	str	r3, [sp, #64]	; 0x40

004038e8 <.LVL440>:
  4038e8:	e6f2      	b.n	4036d0 <.LVL375>

004038ea <.LBE27>:
  4038ea:	eeb4 8b48 	vcmp.f64	d8, d8
  4038ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4038f2:	f180 83e3 	bvs.w	4040bc <.LBE70>
  4038f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4038f8:	2b61      	cmp	r3, #97	; 0x61
  4038fa:	f000 82b8 	beq.w	403e6e <.LVL595+0xa>
  4038fe:	2b41      	cmp	r3, #65	; 0x41
  403900:	f000 8178 	beq.w	403bf4 <.LVL523>
  403904:	9b04      	ldr	r3, [sp, #16]
  403906:	3301      	adds	r3, #1
  403908:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40390a:	f023 0520 	bic.w	r5, r3, #32
  40390e:	f000 839d 	beq.w	40404c <.LBE69>
  403912:	2d47      	cmp	r5, #71	; 0x47
  403914:	d104      	bne.n	403920 <.LBB28>
  403916:	9b04      	ldr	r3, [sp, #16]
  403918:	2b00      	cmp	r3, #0
  40391a:	bf08      	it	eq
  40391c:	2301      	moveq	r3, #1
  40391e:	9304      	str	r3, [sp, #16]

00403920 <.LBB28>:
  403920:	ee18 3a90 	vmov	r3, s17

00403924 <.LBE28>:
  403924:	f448 7280 	orr.w	r2, r8, #256	; 0x100

00403928 <.LBB43>:
  403928:	2b00      	cmp	r3, #0

0040392a <.LBE43>:
  40392a:	9202      	str	r2, [sp, #8]

0040392c <.LBB44>:
  40392c:	f04f 0300 	mov.w	r3, #0
  403930:	f2c0 82b8 	blt.w	403ea4 <.LBB62>
  403934:	eeb0 ab48 	vmov.f64	d10, d8
  403938:	9306      	str	r3, [sp, #24]
  40393a:	9309      	str	r3, [sp, #36]	; 0x24

0040393c <.LVL445>:
  40393c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40393e:	2b66      	cmp	r3, #102	; 0x66
  403940:	f000 82ef 	beq.w	403f22 <.LBB64>
  403944:	2b46      	cmp	r3, #70	; 0x46
  403946:	f000 83d8 	beq.w	4040fa <.LBB71>
  40394a:	eeb0 0b4a 	vmov.f64	d0, d10
  40394e:	2d45      	cmp	r5, #69	; 0x45
  403950:	bf0a      	itet	eq
  403952:	9b04      	ldreq	r3, [sp, #16]
  403954:	9c04      	ldrne	r4, [sp, #16]
  403956:	1c5c      	addeq	r4, r3, #1

00403958 <.LVL446>:
  403958:	aa20      	add	r2, sp, #128	; 0x80

0040395a <.LVL447>:
  40395a:	ab1d      	add	r3, sp, #116	; 0x74
  40395c:	9201      	str	r2, [sp, #4]
  40395e:	9300      	str	r3, [sp, #0]
  403960:	4622      	mov	r2, r4
  403962:	ab1c      	add	r3, sp, #112	; 0x70

00403964 <.LVL448>:
  403964:	2102      	movs	r1, #2
  403966:	4658      	mov	r0, fp
  403968:	f004 fa0a 	bl	407d80 <_dtoa_r>

0040396c <.LVL449>:
  40396c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40396e:	2b67      	cmp	r3, #103	; 0x67
  403970:	4606      	mov	r6, r0

00403972 <.LVL450>:
  403972:	f040 8395 	bne.w	4040a0 <.LBB70>
  403976:	f018 0f01 	tst.w	r8, #1
  40397a:	f040 8343 	bne.w	404004 <.LBB66>

0040397e <.LVL451>:
  40397e:	9b20      	ldr	r3, [sp, #128]	; 0x80

00403980 <.LVL452>:
  403980:	46c6      	mov	lr, r8
  403982:	1b9b      	subs	r3, r3, r6
  403984:	f8dd 8008 	ldr.w	r8, [sp, #8]
  403988:	930f      	str	r3, [sp, #60]	; 0x3c

0040398a <.LBE44>:
  40398a:	2d47      	cmp	r5, #71	; 0x47
  40398c:	f000 81cf 	beq.w	403d2e <.LVL554>
  403990:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403992:	2b46      	cmp	r3, #70	; 0x46
  403994:	f000 82b3 	beq.w	403efe <.LVL607>
  403998:	2b65      	cmp	r3, #101	; 0x65
  40399a:	f340 8412 	ble.w	4041c2 <.LVL694>
  40399e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4039a0:	2b66      	cmp	r3, #102	; 0x66
  4039a2:	f000 82ac 	beq.w	403efe <.LVL607>
  4039a6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  4039a8:	930e      	str	r3, [sp, #56]	; 0x38

004039aa <.LVL454>:
  4039aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4039ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4039ae:	4619      	mov	r1, r3
  4039b0:	4291      	cmp	r1, r2
  4039b2:	4613      	mov	r3, r2
  4039b4:	f300 8260 	bgt.w	403e78 <.LVL596>

004039b8 <.LVL455>:
  4039b8:	f01e 0f01 	tst.w	lr, #1
  4039bc:	f000 8363 	beq.w	404086 <.LVL655>
  4039c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4039c2:	4413      	add	r3, r2
  4039c4:	9308      	str	r3, [sp, #32]

004039c6 <.LVL456>:
  4039c6:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  4039ca:	f000 8310 	beq.w	403fee <.LVL635>
  4039ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4039d0:	2b00      	cmp	r3, #0
  4039d2:	f340 830c 	ble.w	403fee <.LVL635>
  4039d6:	2367      	movs	r3, #103	; 0x67
  4039d8:	930d      	str	r3, [sp, #52]	; 0x34

004039da <.LVL457>:
  4039da:	9812      	ldr	r0, [sp, #72]	; 0x48
  4039dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4039de:	2300      	movs	r3, #0
  4039e0:	9313      	str	r3, [sp, #76]	; 0x4c
  4039e2:	9310      	str	r3, [sp, #64]	; 0x40
  4039e4:	7803      	ldrb	r3, [r0, #0]

004039e6 <.LVL458>:
  4039e6:	2bff      	cmp	r3, #255	; 0xff
  4039e8:	d00e      	beq.n	403a08 <.LVL461+0x8>
  4039ea:	429a      	cmp	r2, r3
  4039ec:	dd0c      	ble.n	403a08 <.LVL461+0x8>
  4039ee:	7841      	ldrb	r1, [r0, #1]
  4039f0:	1ad2      	subs	r2, r2, r3
  4039f2:	2900      	cmp	r1, #0
  4039f4:	f000 8184 	beq.w	403d00 <.LBE50>
  4039f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4039fa:	3301      	adds	r3, #1
  4039fc:	9310      	str	r3, [sp, #64]	; 0x40

004039fe <.LVL460>:
  4039fe:	460b      	mov	r3, r1

00403a00 <.LVL461>:
  403a00:	2bff      	cmp	r3, #255	; 0xff
  403a02:	f100 0001 	add.w	r0, r0, #1
  403a06:	d1f0      	bne.n	4039ea <.LVL458+0x4>
  403a08:	920e      	str	r2, [sp, #56]	; 0x38
  403a0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403a0c:	9a13      	ldr	r2, [sp, #76]	; 0x4c

00403a0e <.LVL463>:
  403a0e:	9908      	ldr	r1, [sp, #32]
  403a10:	9012      	str	r0, [sp, #72]	; 0x48
  403a12:	4413      	add	r3, r2
  403a14:	9a18      	ldr	r2, [sp, #96]	; 0x60
  403a16:	fb02 1303 	mla	r3, r2, r3, r1
  403a1a:	9308      	str	r3, [sp, #32]

00403a1c <.LVL464>:
  403a1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31

00403a20 <.LVL465>:
  403a20:	9302      	str	r3, [sp, #8]

00403a22 <.LVL466>:
  403a22:	9b06      	ldr	r3, [sp, #24]
  403a24:	2b00      	cmp	r3, #0
  403a26:	f040 817b 	bne.w	403d20 <.LVL552>
  403a2a:	9304      	str	r3, [sp, #16]

00403a2c <.LVL467>:
  403a2c:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  403a30:	f7ff b8c7 	b.w	402bc2 <.L59>

00403a34 <.LVL468>:
  403a34:	f025 0507 	bic.w	r5, r5, #7
  403a38:	f105 0308 	add.w	r3, r5, #8
  403a3c:	ed95 8b00 	vldr	d8, [r5]

00403a40 <.LVL469>:
  403a40:	930a      	str	r3, [sp, #40]	; 0x28

00403a42 <.LVL470>:
  403a42:	f7ff bb11 	b.w	403068 <.LVL189>

00403a46 <.LVL471>:
  403a46:	464c      	mov	r4, r9
  403a48:	4689      	mov	r9, r1

00403a4a <.LBB20>:
  403a4a:	3201      	adds	r2, #1
  403a4c:	4423      	add	r3, r4
  403a4e:	2a07      	cmp	r2, #7
  403a50:	9324      	str	r3, [sp, #144]	; 0x90
  403a52:	9223      	str	r2, [sp, #140]	; 0x8c
  403a54:	f8c9 a000 	str.w	sl, [r9]
  403a58:	f8c9 4004 	str.w	r4, [r9, #4]
  403a5c:	f73f ae0e 	bgt.w	40367c <.LBB15>

00403a60 <.LVL473>:
  403a60:	f109 0908 	add.w	r9, r9, #8

00403a64 <.LVL474>:
  403a64:	e615      	b.n	403692 <.LBE15>

00403a66 <.LBB21>:
  403a66:	aa22      	add	r2, sp, #136	; 0x88
  403a68:	4629      	mov	r1, r5

00403a6a <.LVL476>:
  403a6a:	4658      	mov	r0, fp
  403a6c:	f00b fc42 	bl	40f2f4 <__ssprint_r>

00403a70 <.LVL477>:
  403a70:	2800      	cmp	r0, #0
  403a72:	f47f a831 	bne.w	402ad8 <.L189>
  403a76:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403a78:	9824      	ldr	r0, [sp, #144]	; 0x90

00403a7a <.LVL478>:
  403a7a:	781b      	ldrb	r3, [r3, #0]
  403a7c:	a925      	add	r1, sp, #148	; 0x94

00403a7e <.LVL479>:
  403a7e:	e649      	b.n	403714 <.LVL382>

00403a80 <.LBE21>:
  403a80:	aa22      	add	r2, sp, #136	; 0x88
  403a82:	9905      	ldr	r1, [sp, #20]
  403a84:	4658      	mov	r0, fp
  403a86:	f00b fc35 	bl	40f2f4 <__ssprint_r>

00403a8a <.LVL481>:
  403a8a:	2800      	cmp	r0, #0
  403a8c:	f47f a824 	bne.w	402ad8 <.L189>

00403a90 <.LVL482>:
  403a90:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00403a94 <.LVL483>:
  403a94:	f7ff bbb2 	b.w	4031fc <.LVL230>

00403a98 <.LBB22>:
  403a98:	aa22      	add	r2, sp, #136	; 0x88
  403a9a:	4629      	mov	r1, r5
  403a9c:	4658      	mov	r0, fp
  403a9e:	f00b fc29 	bl	40f2f4 <__ssprint_r>

00403aa2 <.LVL485>:
  403aa2:	2800      	cmp	r0, #0
  403aa4:	f47f a818 	bne.w	402ad8 <.L189>
  403aa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403aaa:	9824      	ldr	r0, [sp, #144]	; 0x90

00403aac <.LVL486>:
  403aac:	781b      	ldrb	r3, [r3, #0]
  403aae:	a925      	add	r1, sp, #148	; 0x94

00403ab0 <.LBE22>:
  403ab0:	441e      	add	r6, r3
  403ab2:	e664      	b.n	40377e <.LBE18+0x2>

00403ab4 <.LBE46>:
  403ab4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  403ab6:	48c2      	ldr	r0, [pc, #776]	; (403dc0 <.LVL571+0x2>)
  403ab8:	f8c9 0000 	str.w	r0, [r9]
  403abc:	3201      	adds	r2, #1
  403abe:	3301      	adds	r3, #1
  403ac0:	2001      	movs	r0, #1
  403ac2:	2a07      	cmp	r2, #7
  403ac4:	9324      	str	r3, [sp, #144]	; 0x90
  403ac6:	9223      	str	r2, [sp, #140]	; 0x8c
  403ac8:	f8c9 0004 	str.w	r0, [r9, #4]
  403acc:	f300 8085 	bgt.w	403bda <.LVL519>

00403ad0 <.LVL490>:
  403ad0:	f109 0908 	add.w	r9, r9, #8

00403ad4 <.LVL491>:
  403ad4:	b929      	cbnz	r1, 403ae2 <.LVL491+0xe>
  403ad6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403ad8:	b91a      	cbnz	r2, 403ae2 <.LVL491+0xe>
  403ada:	f018 0f01 	tst.w	r8, #1
  403ade:	f43f a933 	beq.w	402d48 <.LVL104>
  403ae2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  403ae4:	9c15      	ldr	r4, [sp, #84]	; 0x54

00403ae6 <.LVL492>:
  403ae6:	9817      	ldr	r0, [sp, #92]	; 0x5c
  403ae8:	f8c9 0000 	str.w	r0, [r9]
  403aec:	3201      	adds	r2, #1
  403aee:	4423      	add	r3, r4
  403af0:	2a07      	cmp	r2, #7
  403af2:	9324      	str	r3, [sp, #144]	; 0x90

00403af4 <.LVL493>:
  403af4:	f8c9 4004 	str.w	r4, [r9, #4]
  403af8:	9223      	str	r2, [sp, #140]	; 0x8c
  403afa:	f300 826a 	bgt.w	403fd2 <.LVL632>
  403afe:	f109 0908 	add.w	r9, r9, #8

00403b02 <.LVL494>:
  403b02:	2900      	cmp	r1, #0
  403b04:	f2c0 8244 	blt.w	403f90 <.LBE24>

00403b08 <.LVL495>:
  403b08:	980f      	ldr	r0, [sp, #60]	; 0x3c
  403b0a:	f8c9 6000 	str.w	r6, [r9]
  403b0e:	3201      	adds	r2, #1
  403b10:	4403      	add	r3, r0
  403b12:	2a07      	cmp	r2, #7
  403b14:	9324      	str	r3, [sp, #144]	; 0x90

00403b16 <.LVL496>:
  403b16:	9223      	str	r2, [sp, #140]	; 0x8c
  403b18:	f8c9 0004 	str.w	r0, [r9, #4]
  403b1c:	f77f a912 	ble.w	402d44 <.LVL103>
  403b20:	e434      	b.n	40338c <.LVL269>

00403b22 <.LDL1>:
  403b22:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403b24:	2b00      	cmp	r3, #0
  403b26:	f43e afdd 	beq.w	402ae4 <.LVL44>
  403b2a:	9c05      	ldr	r4, [sp, #20]
  403b2c:	9811      	ldr	r0, [sp, #68]	; 0x44
  403b2e:	aa22      	add	r2, sp, #136	; 0x88
  403b30:	4621      	mov	r1, r4
  403b32:	f00b fbdf 	bl	40f2f4 <__ssprint_r>

00403b36 <.LVL498>:
  403b36:	2800      	cmp	r0, #0
  403b38:	f43e afd4 	beq.w	402ae4 <.LVL44>
  403b3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403b40:	f7fe bfd3 	b.w	402aea <.LVL44+0x6>

00403b44 <.LVL499>:
  403b44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403b46:	9903      	ldr	r1, [sp, #12]
  403b48:	6813      	ldr	r3, [r2, #0]
  403b4a:	17cd      	asrs	r5, r1, #31
  403b4c:	4608      	mov	r0, r1
  403b4e:	3204      	adds	r2, #4

00403b50 <.LVL500>:
  403b50:	4629      	mov	r1, r5
  403b52:	920a      	str	r2, [sp, #40]	; 0x28
  403b54:	e9c3 0100 	strd	r0, r1, [r3]
  403b58:	463e      	mov	r6, r7

00403b5a <.LVL501>:
  403b5a:	f7fe bef4 	b.w	402946 <.LVL10>

00403b5e <.LVL502>:
  403b5e:	3304      	adds	r3, #4
  403b60:	8814      	ldrh	r4, [r2, #0]
  403b62:	930a      	str	r3, [sp, #40]	; 0x28

00403b64 <.LVL503>:
  403b64:	2500      	movs	r5, #0
  403b66:	f7ff b960 	b.w	402e2a <.LVL126>

00403b6a <.LVL504>:
  403b6a:	8814      	ldrh	r4, [r2, #0]
  403b6c:	3204      	adds	r2, #4
  403b6e:	2500      	movs	r5, #0
  403b70:	2301      	movs	r3, #1
  403b72:	920a      	str	r2, [sp, #40]	; 0x28

00403b74 <.LVL505>:
  403b74:	f7fe bffd 	b.w	402b72 <.L150>

00403b78 <.LVL506>:
  403b78:	3304      	adds	r3, #4
  403b7a:	8814      	ldrh	r4, [r2, #0]
  403b7c:	930a      	str	r3, [sp, #40]	; 0x28

00403b7e <.LVL507>:
  403b7e:	2500      	movs	r5, #0
  403b80:	f7fe bfe5 	b.w	402b4e <.LVL51>

00403b84 <.LVL508>:
  403b84:	980a      	ldr	r0, [sp, #40]	; 0x28
  403b86:	f9b0 4000 	ldrsh.w	r4, [r0]
  403b8a:	f7ff b979 	b.w	402e80 <.LVL136>

00403b8e <.LVL509>:
  403b8e:	aa22      	add	r2, sp, #136	; 0x88
  403b90:	9905      	ldr	r1, [sp, #20]
  403b92:	4658      	mov	r0, fp
  403b94:	f00b fbae 	bl	40f2f4 <__ssprint_r>

00403b98 <.LVL510>:
  403b98:	2800      	cmp	r0, #0
  403b9a:	f47e af9d 	bne.w	402ad8 <.L189>
  403b9e:	9b24      	ldr	r3, [sp, #144]	; 0x90

00403ba0 <.LVL511>:
  403ba0:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00403ba4 <.LVL512>:
  403ba4:	f7ff bb43 	b.w	40322e <.LVL233>

00403ba8 <.LVL513>:
  403ba8:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
  403bac:	783b      	ldrb	r3, [r7, #0]
  403bae:	f7fe befa 	b.w	4029a6 <.LVL22>

00403bb2 <.LBB47>:
  403bb2:	f018 0f01 	tst.w	r8, #1
  403bb6:	f43f ae0b 	beq.w	4037d0 <.LBB19>
  403bba:	e5f9      	b.n	4037b0 <.LVL403+0xa>

00403bbc <.LBE47>:
  403bbc:	2140      	movs	r1, #64	; 0x40
  403bbe:	9811      	ldr	r0, [sp, #68]	; 0x44

00403bc0 <.LVL517>:
  403bc0:	f006 fbf6 	bl	40a3b0 <.LFE14>

00403bc4 <.LVL518>:
  403bc4:	9a05      	ldr	r2, [sp, #20]
  403bc6:	6010      	str	r0, [r2, #0]
  403bc8:	6110      	str	r0, [r2, #16]
  403bca:	2800      	cmp	r0, #0
  403bcc:	f000 82f1 	beq.w	4041b2 <.LBE76>
  403bd0:	9a05      	ldr	r2, [sp, #20]
  403bd2:	2340      	movs	r3, #64	; 0x40
  403bd4:	6153      	str	r3, [r2, #20]
  403bd6:	f7fe bea0 	b.w	40291a <.LVL6>

00403bda <.LVL519>:
  403bda:	aa22      	add	r2, sp, #136	; 0x88
  403bdc:	9905      	ldr	r1, [sp, #20]
  403bde:	4658      	mov	r0, fp
  403be0:	f00b fb88 	bl	40f2f4 <__ssprint_r>

00403be4 <.LVL520>:
  403be4:	2800      	cmp	r0, #0
  403be6:	f47e af77 	bne.w	402ad8 <.L189>
  403bea:	991c      	ldr	r1, [sp, #112]	; 0x70
  403bec:	9b24      	ldr	r3, [sp, #144]	; 0x90

00403bee <.LVL521>:
  403bee:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00403bf2 <.LVL522>:
  403bf2:	e76f      	b.n	403ad4 <.LVL491>

00403bf4 <.LVL523>:
  403bf4:	2330      	movs	r3, #48	; 0x30
  403bf6:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
  403bfa:	2358      	movs	r3, #88	; 0x58
  403bfc:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
  403c00:	9b04      	ldr	r3, [sp, #16]
  403c02:	2b63      	cmp	r3, #99	; 0x63
  403c04:	f048 0402 	orr.w	r4, r8, #2

00403c08 <.LVL524>:
  403c08:	f300 8240 	bgt.w	40408c <.LVL656>
  403c0c:	2300      	movs	r3, #0
  403c0e:	9309      	str	r3, [sp, #36]	; 0x24
  403c10:	ae35      	add	r6, sp, #212	; 0xd4

00403c12 <.LBB48>:
  403c12:	ee18 3a90 	vmov	r3, s17
  403c16:	2b00      	cmp	r3, #0
  403c18:	9b0d      	ldr	r3, [sp, #52]	; 0x34

00403c1a <.LBE48>:
  403c1a:	f448 7281 	orr.w	r2, r8, #258	; 0x102
  403c1e:	9202      	str	r2, [sp, #8]

00403c20 <.LBB49>:
  403c20:	46a0      	mov	r8, r4
  403c22:	f023 0520 	bic.w	r5, r3, #32
  403c26:	f2c0 813e 	blt.w	403ea6 <.LVL602>
  403c2a:	eeb0 ab48 	vmov.f64	d10, d8
  403c2e:	2300      	movs	r3, #0
  403c30:	9306      	str	r3, [sp, #24]

00403c32 <.LVL527>:
  403c32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403c34:	2b61      	cmp	r3, #97	; 0x61
  403c36:	f000 81ec 	beq.w	404012 <.LBB68>
  403c3a:	2b41      	cmp	r3, #65	; 0x41
  403c3c:	f47f ae7e 	bne.w	40393c <.LVL445>
  403c40:	eeb0 0b4a 	vmov.f64	d0, d10
  403c44:	a81c      	add	r0, sp, #112	; 0x70

00403c46 <.LVL528>:
  403c46:	f00d fd6f 	bl	411728 <frexp>

00403c4a <.LVL529>:
  403c4a:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
  403c4e:	ee20 0b07 	vmul.f64	d0, d0, d7

00403c52 <.LVL530>:
  403c52:	eeb5 0b40 	vcmp.f64	d0, #0.0
  403c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403c5a:	d101      	bne.n	403c60 <.LVL530+0xe>
  403c5c:	2301      	movs	r3, #1
  403c5e:	931c      	str	r3, [sp, #112]	; 0x70
  403c60:	4c58      	ldr	r4, [pc, #352]	; (403dc4 <.LVL571+0x6>)

00403c62 <.LVL531>:
  403c62:	9b04      	ldr	r3, [sp, #16]
  403c64:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
  403c68:	3b01      	subs	r3, #1
  403c6a:	4631      	mov	r1, r6
  403c6c:	e005      	b.n	403c7a <.LVL533>

00403c6e <.LVL532>:
  403c6e:	eeb5 0b40 	vcmp.f64	d0, #0.0
  403c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403c76:	d014      	beq.n	403ca2 <.LVL536+0x6>
  403c78:	4611      	mov	r1, r2

00403c7a <.LVL533>:
  403c7a:	ee20 0b05 	vmul.f64	d0, d0, d5
  403c7e:	eefd 6bc0 	vcvt.s32.f64	s13, d0

00403c82 <.LVL535>:
  403c82:	460a      	mov	r2, r1
  403c84:	ee16 0a90 	vmov	r0, s13
  403c88:	f1b3 3fff 	cmp.w	r3, #4294967295
  403c8c:	5c20      	ldrb	r0, [r4, r0]
  403c8e:	f802 0b01 	strb.w	r0, [r2], #1
  403c92:	eeb8 7be6 	vcvt.f64.s32	d7, s13
  403c96:	4618      	mov	r0, r3
  403c98:	ee30 0b47 	vsub.f64	d0, d0, d7

00403c9c <.LVL536>:
  403c9c:	f103 33ff 	add.w	r3, r3, #4294967295
  403ca0:	d1e5      	bne.n	403c6e <.LVL532>
  403ca2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
  403ca6:	eeb4 0bc7 	vcmpe.f64	d0, d7
  403caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403cae:	f300 80ff 	bgt.w	403eb0 <.LVL604>
  403cb2:	eeb4 0b47 	vcmp.f64	d0, d7
  403cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403cba:	d104      	bne.n	403cc6 <.LVL537>
  403cbc:	ee16 3a90 	vmov	r3, s13
  403cc0:	07db      	lsls	r3, r3, #31
  403cc2:	f100 80f5 	bmi.w	403eb0 <.LVL604>

00403cc6 <.LVL537>:
  403cc6:	2800      	cmp	r0, #0
  403cc8:	db07      	blt.n	403cda <.LVL541>
  403cca:	1814      	adds	r4, r2, r0

00403ccc <.LVL538>:
  403ccc:	2330      	movs	r3, #48	; 0x30

00403cce <.LVL539>:
  403cce:	f801 3f01 	strb.w	r3, [r1, #1]!

00403cd2 <.LVL540>:
  403cd2:	42a1      	cmp	r1, r4
  403cd4:	d1fb      	bne.n	403cce <.LVL539>
  403cd6:	3001      	adds	r0, #1
  403cd8:	4402      	add	r2, r0

00403cda <.LVL541>:
  403cda:	1b93      	subs	r3, r2, r6
  403cdc:	46c6      	mov	lr, r8
  403cde:	930f      	str	r3, [sp, #60]	; 0x3c

00403ce0 <.LVL542>:
  403ce0:	f8dd 8008 	ldr.w	r8, [sp, #8]
  403ce4:	e651      	b.n	40398a <.LBE44>

00403ce6 <.LBB50>:
  403ce6:	aa22      	add	r2, sp, #136	; 0x88
  403ce8:	9905      	ldr	r1, [sp, #20]
  403cea:	4658      	mov	r0, fp
  403cec:	f00b fb02 	bl	40f2f4 <__ssprint_r>

00403cf0 <.LVL544>:
  403cf0:	2800      	cmp	r0, #0
  403cf2:	f47e aef1 	bne.w	402ad8 <.L189>
  403cf6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  403cf8:	9b24      	ldr	r3, [sp, #144]	; 0x90

00403cfa <.LVL545>:
  403cfa:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00403cfe <.LVL546>:
  403cfe:	e567      	b.n	4037d0 <.LBB19>

00403d00 <.LBE50>:
  403d00:	9913      	ldr	r1, [sp, #76]	; 0x4c
  403d02:	3101      	adds	r1, #1
  403d04:	9113      	str	r1, [sp, #76]	; 0x4c

00403d06 <.LVL548>:
  403d06:	e66e      	b.n	4039e6 <.LVL458>

00403d08 <.LVL549>:
  403d08:	4630      	mov	r0, r6
  403d0a:	9404      	str	r4, [sp, #16]
  403d0c:	f00b fdb8 	bl	40f880 <.LFE22>

00403d10 <.LVL550>:
  403d10:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
  403d14:	9008      	str	r0, [sp, #32]

00403d16 <.LVL551>:
  403d16:	950a      	str	r5, [sp, #40]	; 0x28
  403d18:	9202      	str	r2, [sp, #8]
  403d1a:	4623      	mov	r3, r4
  403d1c:	f7ff b96b 	b.w	402ff6 <.LBE12>

00403d20 <.LVL552>:
  403d20:	222d      	movs	r2, #45	; 0x2d
  403d22:	2300      	movs	r3, #0
  403d24:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
  403d28:	9304      	str	r3, [sp, #16]

00403d2a <.LVL553>:
  403d2a:	f7fe bf4b 	b.w	402bc4 <.LVL63>

00403d2e <.LVL554>:
  403d2e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  403d30:	930e      	str	r3, [sp, #56]	; 0x38
  403d32:	1cda      	adds	r2, r3, #3
  403d34:	db03      	blt.n	403d3e <.LVL555>
  403d36:	9a04      	ldr	r2, [sp, #16]
  403d38:	4293      	cmp	r3, r2
  403d3a:	f77f ae36 	ble.w	4039aa <.LVL454>

00403d3e <.LVL555>:
  403d3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403d40:	3b02      	subs	r3, #2

00403d42 <.LVL556>:
  403d42:	930d      	str	r3, [sp, #52]	; 0x34
  403d44:	f023 0520 	bic.w	r5, r3, #32

00403d48 <.LVL557>:
  403d48:	9b0e      	ldr	r3, [sp, #56]	; 0x38

00403d4a <.LBB51>:
  403d4a:	2d41      	cmp	r5, #65	; 0x41

00403d4c <.LBE51>:
  403d4c:	f103 33ff 	add.w	r3, r3, #4294967295
  403d50:	931c      	str	r3, [sp, #112]	; 0x70

00403d52 <.LBB59>:
  403d52:	f000 8159 	beq.w	404008 <.LBB67>

00403d56 <.LVL559>:
  403d56:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
  403d5a:	2100      	movs	r1, #0

00403d5c <.LVL560>:
  403d5c:	2b00      	cmp	r3, #0
  403d5e:	bfb8      	it	lt
  403d60:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38

00403d62 <.LVL561>:
  403d62:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  403d66:	bfba      	itte	lt
  403d68:	f1c3 0301 	rsblt	r3, r3, #1

00403d6c <.LVL562>:
  403d6c:	222d      	movlt	r2, #45	; 0x2d
  403d6e:	222b      	movge	r2, #43	; 0x2b
  403d70:	2b09      	cmp	r3, #9
  403d72:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79

00403d76 <.LVL563>:
  403d76:	f340 815d 	ble.w	404034 <.LBB69>
  403d7a:	f10d 0487 	add.w	r4, sp, #135	; 0x87

00403d7e <.LVL564>:
  403d7e:	4620      	mov	r0, r4
  403d80:	4d11      	ldr	r5, [pc, #68]	; (403dc8 <.LVL571+0xa>)
  403d82:	e000      	b.n	403d86 <.LVL566>

00403d84 <.LVL565>:
  403d84:	4610      	mov	r0, r2

00403d86 <.LVL566>:
  403d86:	fb85 1203 	smull	r1, r2, r5, r3
  403d8a:	17d9      	asrs	r1, r3, #31
  403d8c:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  403d90:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  403d94:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  403d98:	3230      	adds	r2, #48	; 0x30
  403d9a:	2909      	cmp	r1, #9
  403d9c:	f800 2c01 	strb.w	r2, [r0, #-1]
  403da0:	460b      	mov	r3, r1

00403da2 <.LVL567>:
  403da2:	f100 32ff 	add.w	r2, r0, #4294967295

00403da6 <.LVL568>:
  403da6:	dced      	bgt.n	403d84 <.LVL565>

00403da8 <.LVL569>:
  403da8:	3330      	adds	r3, #48	; 0x30
  403daa:	3802      	subs	r0, #2
  403dac:	b2db      	uxtb	r3, r3
  403dae:	4284      	cmp	r4, r0
  403db0:	f802 3c01 	strb.w	r3, [r2, #-1]
  403db4:	f240 81fa 	bls.w	4041ac <.LBB76>
  403db8:	f10d 007a 	add.w	r0, sp, #122	; 0x7a

00403dbc <.LVL570>:
  403dbc:	4611      	mov	r1, r2

00403dbe <.LVL571>:
  403dbe:	e007      	b.n	403dd0 <.LVL573>
  403dc0:	00412248 	.word	0x00412248
  403dc4:	00412218 	.word	0x00412218
  403dc8:	66666667 	.word	0x66666667

00403dcc <.LVL572>:
  403dcc:	f811 3b01 	ldrb.w	r3, [r1], #1

00403dd0 <.LVL573>:
  403dd0:	f800 3b01 	strb.w	r3, [r0], #1

00403dd4 <.LVL574>:
  403dd4:	428c      	cmp	r4, r1
  403dd6:	d1f9      	bne.n	403dcc <.LVL572>
  403dd8:	3401      	adds	r4, #1
  403dda:	1aa2      	subs	r2, r4, r2

00403ddc <.LVL575>:
  403ddc:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
  403de0:	441a      	add	r2, r3

00403de2 <.LVL576>:
  403de2:	ab1e      	add	r3, sp, #120	; 0x78

00403de4 <.LVL577>:
  403de4:	1ad3      	subs	r3, r2, r3

00403de6 <.LBE59>:
  403de6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c

00403de8 <.LBB60>:
  403de8:	9319      	str	r3, [sp, #100]	; 0x64

00403dea <.LBE60>:
  403dea:	2a01      	cmp	r2, #1
  403dec:	4413      	add	r3, r2
  403dee:	9308      	str	r3, [sp, #32]

00403df0 <.LVL581>:
  403df0:	f340 81ad 	ble.w	40414e <.LBE72>
  403df4:	9b08      	ldr	r3, [sp, #32]

00403df6 <.LVL582>:
  403df6:	9a15      	ldr	r2, [sp, #84]	; 0x54
  403df8:	4413      	add	r3, r2
  403dfa:	9308      	str	r3, [sp, #32]
  403dfc:	2300      	movs	r3, #0
  403dfe:	9313      	str	r3, [sp, #76]	; 0x4c
  403e00:	9310      	str	r3, [sp, #64]	; 0x40
  403e02:	930e      	str	r3, [sp, #56]	; 0x38
  403e04:	9b08      	ldr	r3, [sp, #32]
  403e06:	f42e 6e80 	bic.w	lr, lr, #1024	; 0x400
  403e0a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403e0e:	f44e 7880 	orr.w	r8, lr, #256	; 0x100

00403e12 <.LVL584>:
  403e12:	9302      	str	r3, [sp, #8]
  403e14:	e605      	b.n	403a22 <.LVL466>

00403e16 <.LBB23>:
  403e16:	aa22      	add	r2, sp, #136	; 0x88
  403e18:	9905      	ldr	r1, [sp, #20]
  403e1a:	4658      	mov	r0, fp
  403e1c:	f00b fa6a 	bl	40f2f4 <__ssprint_r>

00403e20 <.LVL586>:
  403e20:	2800      	cmp	r0, #0
  403e22:	f47e ae59 	bne.w	402ad8 <.L189>
  403e26:	9b24      	ldr	r3, [sp, #144]	; 0x90

00403e28 <.LVL587>:
  403e28:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00403e2c <.LVL588>:
  403e2c:	f7ff bb29 	b.w	403482 <.LVL300>

00403e30 <.LBE23>:
  403e30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403e32:	6813      	ldr	r3, [r2, #0]
  403e34:	3204      	adds	r2, #4

00403e36 <.LVL590>:
  403e36:	920a      	str	r2, [sp, #40]	; 0x28
  403e38:	f8bd 200c 	ldrh.w	r2, [sp, #12]

00403e3c <.LVL591>:
  403e3c:	801a      	strh	r2, [r3, #0]
  403e3e:	463e      	mov	r6, r7

00403e40 <.LVL592>:
  403e40:	f7fe bd81 	b.w	402946 <.LVL10>

00403e44 <.LVL593>:
  403e44:	9b04      	ldr	r3, [sp, #16]
  403e46:	9613      	str	r6, [sp, #76]	; 0x4c
  403e48:	2b06      	cmp	r3, #6
  403e4a:	bf28      	it	cs
  403e4c:	2306      	movcs	r3, #6
  403e4e:	4632      	mov	r2, r6
  403e50:	9604      	str	r6, [sp, #16]
  403e52:	9610      	str	r6, [sp, #64]	; 0x40
  403e54:	960e      	str	r6, [sp, #56]	; 0x38
  403e56:	9609      	str	r6, [sp, #36]	; 0x24
  403e58:	9302      	str	r3, [sp, #8]

00403e5a <.LVL594>:
  403e5a:	950a      	str	r5, [sp, #40]	; 0x28
  403e5c:	9308      	str	r3, [sp, #32]
  403e5e:	4eae      	ldr	r6, [pc, #696]	; (404118 <.LVL671+0x2>)
  403e60:	f7fe beaf 	b.w	402bc2 <.L59>

00403e64 <.LVL595>:
  403e64:	222d      	movs	r2, #45	; 0x2d
  403e66:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
  403e6a:	f7ff b90d 	b.w	403088 <.LVL189+0x20>
  403e6e:	2330      	movs	r3, #48	; 0x30
  403e70:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
  403e74:	2378      	movs	r3, #120	; 0x78
  403e76:	e6c1      	b.n	403bfc <.LVL523+0x8>

00403e78 <.LVL596>:
  403e78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  403e7a:	9a15      	ldr	r2, [sp, #84]	; 0x54
  403e7c:	4413      	add	r3, r2
  403e7e:	9308      	str	r3, [sp, #32]

00403e80 <.LVL597>:
  403e80:	9b0e      	ldr	r3, [sp, #56]	; 0x38

00403e82 <.LVL598>:
  403e82:	2b00      	cmp	r3, #0
  403e84:	f340 814e 	ble.w	404124 <.LBE71>
  403e88:	2367      	movs	r3, #103	; 0x67
  403e8a:	930d      	str	r3, [sp, #52]	; 0x34

00403e8c <.LVL599>:
  403e8c:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  403e90:	f47f ada3 	bne.w	4039da <.LVL457>
  403e94:	9b08      	ldr	r3, [sp, #32]
  403e96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403e9a:	9302      	str	r3, [sp, #8]

00403e9c <.LVL600>:
  403e9c:	2300      	movs	r3, #0
  403e9e:	9313      	str	r3, [sp, #76]	; 0x4c
  403ea0:	9310      	str	r3, [sp, #64]	; 0x40
  403ea2:	e5be      	b.n	403a22 <.LVL466>

00403ea4 <.LBB62>:
  403ea4:	9309      	str	r3, [sp, #36]	; 0x24

00403ea6 <.LVL602>:
  403ea6:	232d      	movs	r3, #45	; 0x2d
  403ea8:	9306      	str	r3, [sp, #24]
  403eaa:	eeb1 ab48 	vneg.f64	d10, d8

00403eae <.LVL603>:
  403eae:	e6c0      	b.n	403c32 <.LVL527>

00403eb0 <.LVL604>:
  403eb0:	9120      	str	r1, [sp, #128]	; 0x80
  403eb2:	f812 0c01 	ldrb.w	r0, [r2, #-1]

00403eb6 <.LVL605>:
  403eb6:	7be3      	ldrb	r3, [r4, #15]
  403eb8:	4283      	cmp	r3, r0
  403eba:	f040 8150 	bne.w	40415e <.LBB74>
  403ebe:	4613      	mov	r3, r2
  403ec0:	f04f 0e30 	mov.w	lr, #48	; 0x30
  403ec4:	f803 ec01 	strb.w	lr, [r3, #-1]
  403ec8:	9b20      	ldr	r3, [sp, #128]	; 0x80
  403eca:	1e59      	subs	r1, r3, #1
  403ecc:	9120      	str	r1, [sp, #128]	; 0x80
  403ece:	f813 1c01 	ldrb.w	r1, [r3, #-1]
  403ed2:	4281      	cmp	r1, r0
  403ed4:	d0f6      	beq.n	403ec4 <.LVL605+0xe>
  403ed6:	2939      	cmp	r1, #57	; 0x39
  403ed8:	bf16      	itet	ne
  403eda:	3101      	addne	r1, #1
  403edc:	7aa1      	ldrbeq	r1, [r4, #10]
  403ede:	b2c9      	uxtbne	r1, r1
  403ee0:	f803 1c01 	strb.w	r1, [r3, #-1]
  403ee4:	e6f9      	b.n	403cda <.LVL541>

00403ee6 <.LBB63>:
  403ee6:	9b04      	ldr	r3, [sp, #16]
  403ee8:	9302      	str	r3, [sp, #8]
  403eea:	9308      	str	r3, [sp, #32]

00403eec <.LBE63>:
  403eec:	9004      	str	r0, [sp, #16]
  403eee:	950a      	str	r5, [sp, #40]	; 0x28
  403ef0:	9013      	str	r0, [sp, #76]	; 0x4c
  403ef2:	9010      	str	r0, [sp, #64]	; 0x40
  403ef4:	900e      	str	r0, [sp, #56]	; 0x38
  403ef6:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  403efa:	f7fe be62 	b.w	402bc2 <.L59>

00403efe <.LVL607>:
  403efe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  403f00:	930e      	str	r3, [sp, #56]	; 0x38
  403f02:	2b00      	cmp	r3, #0
  403f04:	9b04      	ldr	r3, [sp, #16]
  403f06:	f340 812d 	ble.w	404164 <.LBE74>

00403f0a <.LVL608>:
  403f0a:	2b00      	cmp	r3, #0
  403f0c:	f040 80ec 	bne.w	4040e8 <.LVL665>
  403f10:	f01e 0f01 	tst.w	lr, #1
  403f14:	f040 80e8 	bne.w	4040e8 <.LVL665>
  403f18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403f1a:	9308      	str	r3, [sp, #32]
  403f1c:	2366      	movs	r3, #102	; 0x66
  403f1e:	930d      	str	r3, [sp, #52]	; 0x34
  403f20:	e7b4      	b.n	403e8c <.LVL599>

00403f22 <.LBB64>:
  403f22:	9c04      	ldr	r4, [sp, #16]
  403f24:	eeb0 0b4a 	vmov.f64	d0, d10
  403f28:	aa20      	add	r2, sp, #128	; 0x80

00403f2a <.LVL610>:
  403f2a:	ab1d      	add	r3, sp, #116	; 0x74
  403f2c:	9201      	str	r2, [sp, #4]
  403f2e:	9300      	str	r3, [sp, #0]
  403f30:	2103      	movs	r1, #3
  403f32:	ab1c      	add	r3, sp, #112	; 0x70

00403f34 <.LVL611>:
  403f34:	4622      	mov	r2, r4
  403f36:	4658      	mov	r0, fp
  403f38:	f003 ff22 	bl	407d80 <_dtoa_r>

00403f3c <.LVL612>:
  403f3c:	4606      	mov	r6, r0

00403f3e <.LVL613>:
  403f3e:	1901      	adds	r1, r0, r4

00403f40 <.LVL614>:
  403f40:	7833      	ldrb	r3, [r6, #0]
  403f42:	2b30      	cmp	r3, #48	; 0x30
  403f44:	f000 80f9 	beq.w	40413a <.LBB72>
  403f48:	9c1c      	ldr	r4, [sp, #112]	; 0x70

00403f4a <.LVL615>:
  403f4a:	4421      	add	r1, r4
  403f4c:	eeb5 ab40 	vcmp.f64	d10, #0.0
  403f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403f54:	d00b      	beq.n	403f6e <.LVL618>
  403f56:	9b20      	ldr	r3, [sp, #128]	; 0x80
  403f58:	4299      	cmp	r1, r3
  403f5a:	f67f ad11 	bls.w	403980 <.LVL452>
  403f5e:	2030      	movs	r0, #48	; 0x30

00403f60 <.LVL617>:
  403f60:	1c5a      	adds	r2, r3, #1
  403f62:	9220      	str	r2, [sp, #128]	; 0x80
  403f64:	7018      	strb	r0, [r3, #0]
  403f66:	9b20      	ldr	r3, [sp, #128]	; 0x80
  403f68:	4299      	cmp	r1, r3
  403f6a:	d8f9      	bhi.n	403f60 <.LVL617>
  403f6c:	e508      	b.n	403980 <.LVL452>

00403f6e <.LVL618>:
  403f6e:	460b      	mov	r3, r1
  403f70:	e506      	b.n	403980 <.LVL452>

00403f72 <.LBB24>:
  403f72:	aa22      	add	r2, sp, #136	; 0x88
  403f74:	9905      	ldr	r1, [sp, #20]
  403f76:	4658      	mov	r0, fp
  403f78:	f00b f9bc 	bl	40f2f4 <__ssprint_r>

00403f7c <.LVL620>:
  403f7c:	2800      	cmp	r0, #0
  403f7e:	f47e adab 	bne.w	402ad8 <.L189>
  403f82:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  403f84:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403f86:	9b24      	ldr	r3, [sp, #144]	; 0x90

00403f88 <.LVL621>:
  403f88:	1a8a      	subs	r2, r1, r2
  403f8a:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00403f8e <.LVL622>:
  403f8e:	e436      	b.n	4037fe <.LVL409>

00403f90 <.LBE24>:
  403f90:	424c      	negs	r4, r1
  403f92:	3110      	adds	r1, #16

00403f94 <.LVL624>:
  403f94:	da5d      	bge.n	404052 <.LVL651>
  403f96:	2510      	movs	r5, #16
  403f98:	e004      	b.n	403fa4 <.LVL626+0x6>

00403f9a <.LVL625>:
  403f9a:	f109 0908 	add.w	r9, r9, #8

00403f9e <.LVL626>:
  403f9e:	3c10      	subs	r4, #16
  403fa0:	2c10      	cmp	r4, #16
  403fa2:	dd56      	ble.n	404052 <.LVL651>
  403fa4:	3201      	adds	r2, #1
  403fa6:	3310      	adds	r3, #16
  403fa8:	2a07      	cmp	r2, #7
  403faa:	9324      	str	r3, [sp, #144]	; 0x90

00403fac <.LVL629>:
  403fac:	9223      	str	r2, [sp, #140]	; 0x8c
  403fae:	f8c9 a000 	str.w	sl, [r9]
  403fb2:	f8c9 5004 	str.w	r5, [r9, #4]
  403fb6:	ddf0      	ble.n	403f9a <.LVL625>
  403fb8:	aa22      	add	r2, sp, #136	; 0x88
  403fba:	9905      	ldr	r1, [sp, #20]
  403fbc:	4658      	mov	r0, fp
  403fbe:	f00b f999 	bl	40f2f4 <__ssprint_r>

00403fc2 <.LVL630>:
  403fc2:	2800      	cmp	r0, #0
  403fc4:	f47e ad88 	bne.w	402ad8 <.L189>
  403fc8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403fca:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  403fcc:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00403fd0 <.LVL631>:
  403fd0:	e7e5      	b.n	403f9e <.LVL626>

00403fd2 <.LVL632>:
  403fd2:	aa22      	add	r2, sp, #136	; 0x88
  403fd4:	9905      	ldr	r1, [sp, #20]
  403fd6:	4658      	mov	r0, fp
  403fd8:	f00b f98c 	bl	40f2f4 <__ssprint_r>

00403fdc <.LVL633>:
  403fdc:	2800      	cmp	r0, #0
  403fde:	f47e ad7b 	bne.w	402ad8 <.L189>
  403fe2:	991c      	ldr	r1, [sp, #112]	; 0x70
  403fe4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403fe6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  403fe8:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00403fec <.LVL634>:
  403fec:	e589      	b.n	403b02 <.LVL494>

00403fee <.LVL635>:
  403fee:	9b08      	ldr	r3, [sp, #32]
  403ff0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403ff4:	9302      	str	r3, [sp, #8]

00403ff6 <.LVL636>:
  403ff6:	2367      	movs	r3, #103	; 0x67
  403ff8:	930d      	str	r3, [sp, #52]	; 0x34
  403ffa:	e74f      	b.n	403e9c <.LVL600>

00403ffc <.LVL637>:
  403ffc:	2200      	movs	r2, #0
  403ffe:	9204      	str	r2, [sp, #16]
  404000:	f7fe bcd2 	b.w	4029a8 <.LVL22+0x2>

00404004 <.LBB66>:
  404004:	1931      	adds	r1, r6, r4

00404006 <.LVL639>:
  404006:	e7a1      	b.n	403f4c <.LVL615+0x2>

00404008 <.LBB67>:
  404008:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40400a:	320f      	adds	r2, #15
  40400c:	b2d2      	uxtb	r2, r2
  40400e:	2101      	movs	r1, #1
  404010:	e6a4      	b.n	403d5c <.LVL560>

00404012 <.LBB68>:
  404012:	eeb0 0b4a 	vmov.f64	d0, d10
  404016:	a81c      	add	r0, sp, #112	; 0x70

00404018 <.LVL642>:
  404018:	f00d fb86 	bl	411728 <frexp>

0040401c <.LVL643>:
  40401c:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
  404020:	ee20 0b07 	vmul.f64	d0, d0, d7

00404024 <.LVL644>:
  404024:	eeb5 0b40 	vcmp.f64	d0, #0.0
  404028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40402c:	f000 80af 	beq.w	40418e <.LBB75>
  404030:	4c3a      	ldr	r4, [pc, #232]	; (40411c <.LVL671+0x6>)
  404032:	e616      	b.n	403c62 <.LVL531>

00404034 <.LBB69>:
  404034:	2900      	cmp	r1, #0
  404036:	f040 808f 	bne.w	404158 <.LBB73>

0040403a <.LVL646>:
  40403a:	2230      	movs	r2, #48	; 0x30
  40403c:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
  404040:	f10d 027b 	add.w	r2, sp, #123	; 0x7b

00404044 <.LVL647>:
  404044:	3330      	adds	r3, #48	; 0x30

00404046 <.LVL648>:
  404046:	7013      	strb	r3, [r2, #0]
  404048:	3201      	adds	r2, #1
  40404a:	e6ca      	b.n	403de2 <.LVL576>

0040404c <.LBE69>:
  40404c:	2306      	movs	r3, #6
  40404e:	9304      	str	r3, [sp, #16]
  404050:	e466      	b.n	403920 <.LBB28>

00404052 <.LVL651>:
  404052:	3201      	adds	r2, #1
  404054:	4423      	add	r3, r4
  404056:	2a07      	cmp	r2, #7
  404058:	f8c9 a000 	str.w	sl, [r9]
  40405c:	f8c9 4004 	str.w	r4, [r9, #4]
  404060:	9324      	str	r3, [sp, #144]	; 0x90
  404062:	9223      	str	r2, [sp, #140]	; 0x8c
  404064:	f109 0908 	add.w	r9, r9, #8
  404068:	f77f ad4e 	ble.w	403b08 <.LVL495>
  40406c:	aa22      	add	r2, sp, #136	; 0x88
  40406e:	9905      	ldr	r1, [sp, #20]
  404070:	4658      	mov	r0, fp
  404072:	f00b f93f 	bl	40f2f4 <__ssprint_r>

00404076 <.LVL653>:
  404076:	2800      	cmp	r0, #0
  404078:	f47e ad2e 	bne.w	402ad8 <.L189>
  40407c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40407e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  404080:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00404084 <.LVL654>:
  404084:	e540      	b.n	403b08 <.LVL495>

00404086 <.LVL655>:
  404086:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404088:	9308      	str	r3, [sp, #32]
  40408a:	e49c      	b.n	4039c6 <.LVL456>

0040408c <.LVL656>:
  40408c:	1c59      	adds	r1, r3, #1
  40408e:	4658      	mov	r0, fp
  404090:	f006 f98e 	bl	40a3b0 <.LFE14>

00404094 <.LVL657>:
  404094:	4606      	mov	r6, r0

00404096 <.LVL658>:
  404096:	2800      	cmp	r0, #0
  404098:	f000 8096 	beq.w	4041c8 <.LVL695>
  40409c:	9009      	str	r0, [sp, #36]	; 0x24
  40409e:	e5b8      	b.n	403c12 <.LBB48>

004040a0 <.LBB70>:
  4040a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4040a2:	2b47      	cmp	r3, #71	; 0x47
  4040a4:	d1ae      	bne.n	404004 <.LBB66>
  4040a6:	f018 0f01 	tst.w	r8, #1
  4040aa:	f43f ac68 	beq.w	40397e <.LVL451>
  4040ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4040b0:	2b46      	cmp	r3, #70	; 0x46
  4040b2:	eb06 0104 	add.w	r1, r6, r4

004040b6 <.LVL660>:
  4040b6:	f43f af43 	beq.w	403f40 <.LVL614>
  4040ba:	e747      	b.n	403f4c <.LVL615+0x2>

004040bc <.LBE70>:
  4040bc:	4e18      	ldr	r6, [pc, #96]	; (404120 <.LVL671+0xa>)

004040be <.LVL662>:
  4040be:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  4040c0:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  4040c4:	2300      	movs	r3, #0
  4040c6:	4619      	mov	r1, r3
  4040c8:	2003      	movs	r0, #3
  4040ca:	9309      	str	r3, [sp, #36]	; 0x24
  4040cc:	1f33      	subs	r3, r6, #4
  4040ce:	9104      	str	r1, [sp, #16]
  4040d0:	9002      	str	r0, [sp, #8]
  4040d2:	f028 0880 	bic.w	r8, r8, #128	; 0x80

004040d6 <.LVL663>:
  4040d6:	2c47      	cmp	r4, #71	; 0x47
  4040d8:	bfd8      	it	le
  4040da:	461e      	movle	r6, r3

004040dc <.LVL664>:
  4040dc:	9113      	str	r1, [sp, #76]	; 0x4c
  4040de:	9110      	str	r1, [sp, #64]	; 0x40
  4040e0:	910e      	str	r1, [sp, #56]	; 0x38
  4040e2:	9008      	str	r0, [sp, #32]
  4040e4:	f7fe bd6d 	b.w	402bc2 <.L59>

004040e8 <.LVL665>:
  4040e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4040ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4040ec:	4413      	add	r3, r2
  4040ee:	9a04      	ldr	r2, [sp, #16]
  4040f0:	441a      	add	r2, r3
  4040f2:	2366      	movs	r3, #102	; 0x66
  4040f4:	9208      	str	r2, [sp, #32]

004040f6 <.LVL666>:
  4040f6:	930d      	str	r3, [sp, #52]	; 0x34
  4040f8:	e6c8      	b.n	403e8c <.LVL599>

004040fa <.LBB71>:
  4040fa:	9c04      	ldr	r4, [sp, #16]
  4040fc:	eeb0 0b4a 	vmov.f64	d0, d10
  404100:	aa20      	add	r2, sp, #128	; 0x80

00404102 <.LVL668>:
  404102:	ab1d      	add	r3, sp, #116	; 0x74
  404104:	9201      	str	r2, [sp, #4]
  404106:	9300      	str	r3, [sp, #0]
  404108:	4622      	mov	r2, r4
  40410a:	ab1c      	add	r3, sp, #112	; 0x70

0040410c <.LVL669>:
  40410c:	2103      	movs	r1, #3
  40410e:	4658      	mov	r0, fp
  404110:	f003 fe36 	bl	407d80 <_dtoa_r>

00404114 <.LVL670>:
  404114:	4606      	mov	r6, r0

00404116 <.LVL671>:
  404116:	e7ca      	b.n	4040ae <.LBB70+0xe>
  404118:	00412240 	.word	0x00412240
  40411c:	0041222c 	.word	0x0041222c
  404120:	00412214 	.word	0x00412214

00404124 <.LBE71>:
  404124:	9a08      	ldr	r2, [sp, #32]
  404126:	f1c3 0301 	rsb	r3, r3, #1
  40412a:	441a      	add	r2, r3
  40412c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404130:	9302      	str	r3, [sp, #8]

00404132 <.LVL673>:
  404132:	2367      	movs	r3, #103	; 0x67
  404134:	9208      	str	r2, [sp, #32]

00404136 <.LVL674>:
  404136:	930d      	str	r3, [sp, #52]	; 0x34
  404138:	e6b0      	b.n	403e9c <.LVL600>

0040413a <.LBB72>:
  40413a:	eeb5 ab40 	vcmp.f64	d10, #0.0
  40413e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  404142:	f43f af01 	beq.w	403f48 <.LVL614+0x8>
  404146:	f1c4 0401 	rsb	r4, r4, #1

0040414a <.LVL676>:
  40414a:	941c      	str	r4, [sp, #112]	; 0x70
  40414c:	e6fd      	b.n	403f4a <.LVL615>

0040414e <.LBE72>:
  40414e:	f01e 0f01 	tst.w	lr, #1
  404152:	f43f ae53 	beq.w	403dfc <.LVL582+0x6>
  404156:	e64d      	b.n	403df4 <.LVL581+0x4>

00404158 <.LBB73>:
  404158:	f10d 027a 	add.w	r2, sp, #122	; 0x7a

0040415c <.LVL679>:
  40415c:	e772      	b.n	404044 <.LVL647>

0040415e <.LBB74>:
  40415e:	4601      	mov	r1, r0
  404160:	4613      	mov	r3, r2
  404162:	e6b8      	b.n	403ed6 <.LVL605+0x20>

00404164 <.LBE74>:
  404164:	b913      	cbnz	r3, 40416c <.LBE74+0x8>
  404166:	f01e 0f01 	tst.w	lr, #1
  40416a:	d00a      	beq.n	404182 <.LVL683>
  40416c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40416e:	9a04      	ldr	r2, [sp, #16]
  404170:	3301      	adds	r3, #1
  404172:	441a      	add	r2, r3
  404174:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404178:	9302      	str	r3, [sp, #8]

0040417a <.LVL682>:
  40417a:	2366      	movs	r3, #102	; 0x66
  40417c:	9208      	str	r2, [sp, #32]
  40417e:	930d      	str	r3, [sp, #52]	; 0x34
  404180:	e68c      	b.n	403e9c <.LVL600>

00404182 <.LVL683>:
  404182:	2301      	movs	r3, #1
  404184:	9302      	str	r3, [sp, #8]

00404186 <.LVL684>:
  404186:	9308      	str	r3, [sp, #32]

00404188 <.LVL685>:
  404188:	2366      	movs	r3, #102	; 0x66
  40418a:	930d      	str	r3, [sp, #52]	; 0x34
  40418c:	e686      	b.n	403e9c <.LVL600>

0040418e <.LBB75>:
  40418e:	2301      	movs	r3, #1
  404190:	931c      	str	r3, [sp, #112]	; 0x70
  404192:	e74d      	b.n	404030 <.LVL644+0xc>

00404194 <.LVL687>:
  404194:	980a      	ldr	r0, [sp, #40]	; 0x28
  404196:	787b      	ldrb	r3, [r7, #1]

00404198 <.LVL688>:
  404198:	6802      	ldr	r2, [r0, #0]
  40419a:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
  40419e:	9204      	str	r2, [sp, #16]

004041a0 <.LBE75>:
  4041a0:	4602      	mov	r2, r0
  4041a2:	3204      	adds	r2, #4

004041a4 <.LVL689>:
  4041a4:	460f      	mov	r7, r1

004041a6 <.LVL690>:
  4041a6:	920a      	str	r2, [sp, #40]	; 0x28
  4041a8:	f7fe bbfd 	b.w	4029a6 <.LVL22>

004041ac <.LBB76>:
  4041ac:	f10d 027a 	add.w	r2, sp, #122	; 0x7a

004041b0 <.LVL692>:
  4041b0:	e617      	b.n	403de2 <.LVL576>

004041b2 <.LBE76>:
  4041b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4041b4:	230c      	movs	r3, #12
  4041b6:	6013      	str	r3, [r2, #0]
  4041b8:	f04f 33ff 	mov.w	r3, #4294967295
  4041bc:	9303      	str	r3, [sp, #12]
  4041be:	f7fe bc9b 	b.w	402af8 <.LVL45>

004041c2 <.LVL694>:
  4041c2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  4041c4:	930e      	str	r3, [sp, #56]	; 0x38
  4041c6:	e5bf      	b.n	403d48 <.LVL557>

004041c8 <.LVL695>:
  4041c8:	9a05      	ldr	r2, [sp, #20]
  4041ca:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4041ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4041d2:	8193      	strh	r3, [r2, #12]
  4041d4:	f7fe bc89 	b.w	402aea <.LVL44+0x6>

Disassembly of section .rodata.Td%43:

004041d8 <Td>:
  4041d8:	a750 51f4 6553 7e41 a4c3 1a17 5e96 3a27     P..QSeA~.....^':
  4041e8:	6bcb 3bab 45f1 1f9d 58ab acfa 0393 4be3     .k.;.E...X.....K
  4041f8:	fa55 2030 6df6 ad76 7691 88cc 4c25 f502     U.0 .mv..v..%L..
  404208:	d7fc 4fe5 cbd7 c52a 4480 2635 a38f b562     ...O..*..D5&..b.
  404218:	5a49 deb1 1b67 25ba 0e98 45ea c0e1 5dfe     IZ..g..%...E...]
  404228:	7502 c32f f012 814c 97a3 8d46 f9c6 6bd3     .u/...L...F....k
  404238:	5fe7 038f 9c95 1592 7aeb bf6d 59da 9552     ._.......zm..YR.
  404248:	832d d4be 21d3 5874 6929 49e0 c844 8ec9     -....!tX)i.ID...
  404258:	896a 75c2 7978 f48e 3e6b 9958 71dd 27b9     j..uxy..k>X..q.'
  404268:	4fb6 bee1 ad17 f088 ac66 c920 3ab4 7dce     .O......f. ..:.}
  404278:	4a18 63df 3182 e51a 3360 9751 7f45 6253     .J.c.1..`3Q.E.Sb
  404288:	77e0 b164 ae84 bb6b a01c fe81 2b94 f908     .wd...k......+..
  404298:	6858 7048 fd19 8f45 6c87 94de f8b7 527b     XhHp..E..l....{R
  4042a8:	d323 ab73 02e2 724b 8f57 e31f ab2a 6655     #.s...KrW...*.Uf
  4042b8:	2807 b2eb c203 2fb5 7b9a 86c5 08a5 d337     .(...../.{....7.
  4042c8:	87f2 3028 a5b2 23bf 6aba 0203 825c ed16     ..(0...#.j..\...
  4042d8:	1c2b 8acf b492 a779 f2f0 f307 e2a1 4e69     +.....y.......iN
  4042e8:	f4cd 65da bed5 0605 621f d134 fe8a c4a6     ...e.....b4.....
  4042f8:	539d 342e 55a0 a2f3 e132 058a eb75 a4f6     .S.4.U..2...u...
  404308:	ec39 0b83 efaa 4060 9f06 5e71 1051 bd6e     9.....`@..q^Q.n.
  404318:	8af9 3e21 063d 96dd 05ae dd3e bd46 4de6     ..!>=.....>.F..M
  404328:	8db5 9154 5d05 71c4 d46f 0406 15ff 6050     ..T..].qo.....P`
  404338:	fb24 1998 e997 d6bd 43cc 8940 9e77 67d9     $........C@.w..g
  404348:	42bd b0e8 8b88 0789 5b38 e719 eedb 79c8     .B......8[.....y
  404358:	0a47 a17c 0fe9 7c42 1ec9 f884 0000 0000     G.|...B|........
  404368:	8683 0980 ed48 322b 70ac 1e11 724e 6c5a     ....H.+2.p..NrZl
  404378:	fffb fd0e 3856 0f85 d51e 3dae 3927 362d     ....V8.....='9-6
  404388:	d964 0a0f a621 685c 54d1 9b5b 2e3a 2436     d...!.\h.T[.:.6$
  404398:	67b1 0c0a e70f 9357 96d2 b4ee 919e 1b9b     .g....W.........
  4043a8:	c54f 80c0 20a2 61dc 4b69 5a77 1a16 1c12     O.... .aiKwZ....
  4043b8:	ba0a e293 2ae5 c0a0 e043 3c22 171d 121b     .....*..C."<....
  4043c8:	0d0b 0e09 c7ad f28b a8b9 2db6 a9c8 141e     ...........-....
  4043d8:	1985 57f1 074c af75 ddbb ee99 60fd a37f     ...WL.u......`..
  4043e8:	269f f701 f5bc 5c72 3bc5 4466 7e34 5bfb     .&....r\.;fD4~.[
  4043f8:	2976 8b43 c6dc cb23 fc68 b6ed f163 b8e4     v)C...#.h...c...
  404408:	dcca d731 8510 4263 2240 1397 1120 84c6     ..1...cB@".. ...
  404418:	247d 854a 3df8 d2bb 3211 aef9 a16d c729     }$J..=...2..m.).
  404428:	2f4b 1d9e 30f3 dcb2 52ec 0d86 e3d0 77c1     K/...0...R.....w
  404438:	166c 2bb3 b999 a970 48fa 1194 6422 47e9     l..+..p..H.."d.G
  404448:	8cc4 a8fc 3f1a a0f0 2cd8 567d 90ef 2233     .....?...,}V..3"
  404458:	4ec7 8749 d1c1 d938 a2fe 8cca 0b36 98d4     .NI...8.....6...
  404468:	81cf a6f5 de28 a57a 8e26 dab7 bfa4 3fad     ....(.z.&......?
  404478:	9de4 2c3a 920d 5078 cc9b 6a5f 4662 547e     ..:,..xP.._jbF~T
  404488:	13c2 f68d b8e8 90d8 f75e 2e39 aff5 82c3     ........^.9.....
  404498:	80be 9f5d 937c 69d0 2da9 6fd5 12b3 cf25     ..].|..i.-.o..%.
  4044a8:	993b c8ac 7da7 1018 636e e89c bb7b db3b     ;....}..nc..{.;.
  4044b8:	7809 cd26 18f4 6e59 b701 ec9a 9aa8 834f     .x&...Yn......O.
  4044c8:	6e65 e695 e67e aaff cf08 21bc e8e6 ef15     en..~......!....
  4044d8:	9bd9 bae7 36ce 4a6f 09d4 ea9f 7cd6 29b0     .....6oJ.....|.)
  4044e8:	b2af 31a4 2331 2a3f 9430 c6a5 66c0 35a2     ...11#?*0....f.5
  4044f8:	bc37 744e caa6 fc82 d0b0 e090 d815 33a7     7.Nt...........3
  404508:	984a f104 daf7 41ec 500e 7fcd f62f 1791     J......A.P../...
  404518:	d68d 764d b04d 43ef 4d54 ccaa 04df e496     ..MvM..CTM......
  404528:	b5e3 9ed1 881b 4c6a 1fb8 c12c 517f 4665     ......jL..,..QeF
  404538:	ea04 9d5e 355d 018c 7473 fa87 412e fb0b     ..^.]5..st...A..
  404548:	1d5a b367 d252 92db 5633 e910 4713 6dd6     Z.g.R...3V...G.m
  404558:	618c 9ad7 0c7a 37a1 148e 59f8 3c89 eb13     .a..z..7...Y.<..
  404568:	27ee cea9 c935 b761 e5ed e11c b13c 7a47     .'..5.a.....<.Gz
  404578:	df59 9cd2 733f 55f2 ce79 1814 37bf 73c7     Y...?s.Uy....7.s
  404588:	cdea 53f7 aa5b 5ffd 6f14 df3d db86 7844     ...S[.._.o=...Dx
  404598:	f381 caaf c43e b968 342c 3824 405f c2a3     ....>.h.,4$8_@..
  4045a8:	c372 161d 250c bce2 498b 283c 9541 ff0d     r....%...I<(A...
  4045b8:	0171 39a8 b3de 080c e49c d8b4 c190 6456     q..9..........Vd
  4045c8:	8461 7bcb b670 d532 5c74 486c 5742 d0b8     a..{p.2.t\lHBW..
  4045d8:	f4a7 5051 4165 537e 17a4 c31a 275e 963a     ..QPeA~S....^':.
  4045e8:	ab6b cb3b 9d45 f11f fa58 abac e303 934b     k.;.E...X.....K.
  4045f8:	30fa 5520 766d f6ad cc76 9188 024c 25f5     .0 Umv..v...L..%
  404608:	e5d7 fc4f 2acb d7c5 3544 8026 62a3 8fb5     ..O..*..D5&..b..
  404618:	b15a 49de ba1b 6725 ea0e 9845 fec0 e15d     Z..I..%g..E...].
  404628:	2f75 02c3 4cf0 1281 4697 a38d d3f9 c66b     u/...L...F....k.
  404638:	8f5f e703 929c 9515 6d7a ebbf 5259 da95     _.......zm..YR..
  404648:	be83 2dd4 7421 d358 e069 2949 c9c8 448e     ...-!tX.i.I)...D
  404658:	c289 6a75 8e79 78f4 583e 6b99 b971 dd27     ..ujy..x>X.kq.'.
  404668:	e14f b6be 88ad 17f0 20ac 66c9 ce3a b47d     O........ .f:.}.
  404678:	df4a 1863 1a31 82e5 5133 6097 537f 4562     J.c.1...3Q.`.SbE
  404688:	6477 e0b1 6bae 84bb 81a0 1cfe 082b 94f9     wd...k......+...
  404698:	4868 5870 45fd 198f de6c 8794 7bf8 b752     hHpX.E..l....{R.
  4046a8:	73d3 23ab 4b02 e272 1f8f 57e3 55ab 2a66     .s.#.Kr....W.Uf*
  4046b8:	eb28 07b2 b5c2 032f c57b 9a86 3708 a5d3     (...../.{....7..
  4046c8:	2887 f230 bfa5 b223 036a ba02 1682 5ced     .(0...#.j......\
  4046d8:	cf1c 2b8a 79b4 92a7 07f2 f0f3 69e2 a14e     ...+.y.......iN.
  4046e8:	daf4 cd65 05be d506 3462 1fd1 a6fe 8ac4     ..e.....b4......
  4046f8:	2e53 9d34 f355 a0a2 8ae1 3205 f6eb 75a4     S.4.U......2...u
  404708:	83ec 390b 60ef aa40 719f 065e 6e10 51bd     ...9.`@..q^..n.Q
  404718:	218a f93e dd06 3d96 3e05 aedd e6bd 464d     .!>....=.>....MF
  404728:	548d b591 c45d 0571 06d4 6f04 5015 ff60     .T..].q....o.P`.
  404738:	98fb 2419 bde9 97d6 4043 cc89 d99e 7767     ...$....C@....gw
  404748:	e842 bdb0 898b 8807 195b 38e7 c8ee db79     B.......[..8..y.
  404758:	7c0a 47a1 420f e97c 841e c9f8 0000 0000     .|.G.B|.........
  404768:	8086 8309 2bed 4832 1170 ac1e 5a72 4e6c     .....+2Hp...rZlN
  404778:	0eff fbfd 8538 560f aed5 1e3d 2d39 2736     ....8..V..=.9-6'
  404788:	0fd9 640a 5ca6 2168 5b54 d19b 362e 3a24     ...d.\h!T[...6$:
  404798:	0a67 b10c 57e7 0f93 ee96 d2b4 9b91 9e1b     g....W..........
  4047a8:	c0c5 4f80 dc20 a261 774b 695a 121a 161c     ...O .a.KwZi....
  4047b8:	93ba 0ae2 a02a e5c0 22e0 433c 1b17 1d12     ....*...."<C....
  4047c8:	090d 0b0e 8bc7 adf2 b6a8 b92d 1ea9 c814     ..........-.....
  4047d8:	f119 8557 7507 4caf 99dd bbee 7f60 fda3     ..W..u.L....`...
  4047e8:	0126 9ff7 72f5 bc5c 663b c544 fb7e 345b     &....r\.;fD.~.[4
  4047f8:	4329 768b 23c6 dccb edfc 68b6 e4f1 63b8     )C.v.#.....h...c
  404808:	31dc cad7 6385 1042 9722 4013 c611 2084     .1...cB."..@... 
  404818:	4a24 7d85 bb3d f8d2 f932 11ae 29a1 6dc7     $J.}=...2....).m
  404828:	9e2f 4b1d b230 f3dc 8652 ec0d c1e3 d077     /..K0...R.....w.
  404838:	b316 6c2b 70b9 99a9 9448 fa11 e964 2247     ..+l.p..H...d.G"
  404848:	fc8c c4a8 f03f 1aa0 7d2c d856 3390 ef22     ....?...,}V..3".
  404858:	494e c787 38d1 c1d9 caa2 fe8c d40b 3698     NI...8.........6
  404868:	f581 cfa6 7ade 28a5 b78e 26da adbf a43f     .....z.(...&..?.
  404878:	3a9d e42c 7892 0d50 5fcc 9b6a 7e46 6254     .:,..xP.._j.F~Tb
  404888:	8d13 c2f6 d8b8 e890 39f7 5e2e c3af f582     .........9.^....
  404898:	5d80 be9f d093 7c69 d52d a96f 2512 b3cf     .]....i|-.o..%..
  4048a8:	ac99 3bc8 187d a710 9c63 6ee8 3bbb 7bdb     ...;}...c..n.;.{
  4048b8:	2678 09cd 5918 f46e 9ab7 01ec 4f9a a883     x&...Yn......O..
  4048c8:	956e 65e6 ffe6 7eaa bccf 0821 15e8 e6ef     n..e...~..!.....
  4048d8:	e79b d9ba 6f36 ce4a 9f09 d4ea b07c d629     ....6oJ.....|.).
  4048e8:	a4b2 af31 3f23 312a a594 30c6 a266 c035     ..1.#?*1...0f.5.
  4048f8:	4ebc 3774 82ca a6fc 90d0 b0e0 a7d8 1533     .Nt7..........3.
  404908:	0498 4af1 ecda f741 cd50 0e7f 91f6 2f17     ...J..A.P....../
  404918:	4dd6 8d76 efb0 4d43 aa4d 54cc 9604 dfe4     .Mv...CMM..T....
  404928:	d1b5 e39e 6a88 1b4c 2c1f b8c1 6551 7f46     .....jL..,..QeF.
  404938:	5eea 049d 8c35 5d01 8774 73fa 0b41 2efb     .^..5..]t..sA...
  404948:	671d 5ab3 dbd2 5292 1056 33e9 d647 136d     .g.Z...RV..3G.m.
  404958:	d761 8c9a a10c 7a37 f814 8e59 133c 89eb     a.....7z..Y.<...
  404968:	a927 eece 61c9 35b7 1ce5 ede1 47b1 3c7a     '....a.5.....Gz<
  404978:	d2df 599c f273 3f55 14ce 7918 c737 bf73     ...Ys.U?...y7.s.
  404988:	f7cd ea53 fdaa 5b5f 3d6f 14df 44db 8678     ..S..._[o=...Dx.
  404998:	aff3 81ca 68c4 3eb9 2434 2c38 a340 5fc2     .....h.>4$8,@.._
  4049a8:	1dc3 7216 e225 0cbc 3c49 8b28 0d95 41ff     ...r%...I<(....A
  4049b8:	a801 7139 0cb3 de08 b4e4 9cd8 56c1 9064     ..9q.........Vd.
  4049c8:	cb84 617b 32b6 70d5 6c5c 7448 b857 42d0     ..{a.2.p\lHtW..B
  4049d8:	51f4 a750 7e41 6553 1a17 a4c3 3a27 5e96     .QP.A~Se....':.^
  4049e8:	3bab 6bcb 1f9d 45f1 acfa 58ab 4be3 0393     .;.k...E...X.K..
  4049f8:	2030 fa55 ad76 6df6 88cc 7691 f502 4c25     0 U.v..m...v..%L
  404a08:	4fe5 d7fc c52a cbd7 2635 4480 b562 a38f     .O..*...5&.Db...
  404a18:	deb1 5a49 25ba 1b67 45ea 0e98 5dfe c0e1     ..IZ.%g..E...]..
  404a28:	c32f 7502 814c f012 8d46 97a3 6bd3 f9c6     /..uL...F....k..
  404a38:	038f 5fe7 1592 9c95 bf6d 7aeb 9552 59da     ..._....m..zR..Y
  404a48:	d4be 832d 5874 21d3 49e0 6929 8ec9 c844     ..-.tX.!.I)i..D.
  404a58:	75c2 896a f48e 7978 9958 3e6b 27b9 71dd     .uj...xyX.k>.'.q
  404a68:	bee1 4fb6 f088 ad17 c920 ac66 7dce 3ab4     ...O.... .f..}.:
  404a78:	63df 4a18 e51a 3182 9751 3360 6253 7f45     .c.J...1Q.`3SbE.
  404a88:	b164 77e0 bb6b ae84 fe81 a01c f908 2b94     d..wk..........+
  404a98:	7048 6858 8f45 fd19 94de 6c87 527b f8b7     HpXhE......l{R..
  404aa8:	ab73 d323 724b 02e2 e31f 8f57 6655 ab2a     s.#.Kr....W.Uf*.
  404ab8:	b2eb 2807 2fb5 c203 86c5 7b9a d337 08a5     ...(./.....{7...
  404ac8:	3028 87f2 23bf a5b2 0203 6aba ed16 825c     (0...#.....j..\.
  404ad8:	8acf 1c2b a779 b492 f307 f2f0 4e69 e2a1     ..+.y.......iN..
  404ae8:	65da f4cd 0605 bed5 d134 621f c4a6 fe8a     .e......4..b....
  404af8:	342e 539d a2f3 55a0 058a e132 a4f6 eb75     .4.S...U..2...u.
  404b08:	0b83 ec39 4060 efaa 5e71 9f06 bd6e 1051     ..9.`@..q^..n.Q.
  404b18:	3e21 8af9 96dd 063d dd3e 05ae 4de6 bd46     !>....=.>....MF.
  404b28:	9154 8db5 71c4 5d05 0406 d46f 6050 15ff     T....q.]..o.P`..
  404b38:	1998 fb24 d6bd e997 8940 43cc 67d9 9e77     ..$.....@..C.gw.
  404b48:	b0e8 42bd 0789 8b88 e719 5b38 79c8 eedb     ...B......8[.y..
  404b58:	a17c 0a47 7c42 0fe9 f884 1ec9 0000 0000     |.G.B|..........
  404b68:	0980 8683 322b ed48 1e11 70ac 6c5a 724e     ....+2H....pZlNr
  404b78:	fd0e fffb 0f85 3856 3dae d51e 362d 3927     ......V8.=..-6'9
  404b88:	0a0f d964 685c a621 9b5b 54d1 2436 2e3a     ..d.\h!.[..T6$:.
  404b98:	0c0a 67b1 9357 e70f b4ee 96d2 1b9b 919e     ...gW...........
  404ba8:	80c0 c54f 61dc 20a2 5a77 4b69 1c12 1a16     ..O..a. wZiK....
  404bb8:	e293 ba0a c0a0 2ae5 3c22 e043 121b 171d     .......*"<C.....
  404bc8:	0e09 0d0b f28b c7ad 2db6 a8b9 141e a9c8     .........-......
  404bd8:	57f1 1985 af75 074c ee99 ddbb a37f 60fd     .W..u.L........`
  404be8:	f701 269f 5c72 f5bc 4466 3bc5 5bfb 7e34     ...&r\..fD.;.[4~
  404bf8:	8b43 2976 cb23 c6dc b6ed fc68 b8e4 f163     C.v)#.....h...c.
  404c08:	d731 dcca 4263 8510 1397 2240 84c6 1120     1...cB....@".. .
  404c18:	854a 247d d2bb 3df8 aef9 3211 c729 a16d     J.}$...=...2).m.
  404c28:	1d9e 2f4b dcb2 30f3 0d86 52ec 77c1 e3d0     ..K/...0...R.w..
  404c38:	2bb3 166c a970 b999 1194 48fa 47e9 6422     .+l.p......H.G"d
  404c48:	a8fc 8cc4 a0f0 3f1a 567d 2cd8 2233 90ef     .......?}V.,3"..
  404c58:	8749 4ec7 d938 d1c1 8cca a2fe 98d4 0b36     I..N8.........6.
  404c68:	a6f5 81cf a57a de28 dab7 8e26 3fad bfa4     ....z.(...&..?..
  404c78:	2c3a 9de4 5078 920d 6a5f cc9b 547e 4662     :,..xP.._j..~TbF
  404c88:	f68d 13c2 90d8 b8e8 2e39 f75e 82c3 aff5     ........9.^.....
  404c98:	9f5d 80be 69d0 937c 6fd5 2da9 cf25 12b3     ]....i|..o.-%...
  404ca8:	c8ac 993b 1018 7da7 e89c 636e db3b bb7b     ..;....}..nc;.{.
  404cb8:	cd26 7809 6e59 18f4 ec9a b701 834f 9aa8     &..xYn......O...
  404cc8:	e695 6e65 aaff e67e 21bc cf08 ef15 e8e6     ..en..~..!......
  404cd8:	bae7 9bd9 4a6f 36ce ea9f 09d4 29b0 7cd6     ....oJ.6.....).|
  404ce8:	31a4 b2af 2a3f 2331 c6a5 9430 35a2 66c0     .1..?*1#..0..5.f
  404cf8:	744e bc37 fc82 caa6 e090 d0b0 33a7 d815     Nt7..........3..
  404d08:	f104 984a 41ec daf7 7fcd 500e 1791 f62f     ..J..A.....P../.
  404d18:	764d d68d 43ef b04d ccaa 4d54 e496 04df     Mv...CM...TM....
  404d28:	9ed1 b5e3 4c6a 881b c12c 1fb8 4665 517f     ....jL..,...eF.Q
  404d38:	9d5e ea04 018c 355d fa87 7473 fb0b 412e     ^.....]5..st...A
  404d48:	b367 1d5a 92db d252 e910 5633 6dd6 4713     g.Z...R...3V.m.G
  404d58:	9ad7 618c 37a1 0c7a 59f8 148e eb13 3c89     ...a.7z..Y.....<
  404d68:	cea9 27ee b761 c935 e11c e5ed 7a47 b13c     ...'a.5.....Gz<.
  404d78:	9cd2 df59 55f2 733f 1814 ce79 73c7 37bf     ..Y..U?s..y..s.7
  404d88:	53f7 cdea 5ffd aa5b df3d 6f14 7844 db86     .S..._[.=..oDx..
  404d98:	caaf f381 b968 c43e 3824 342c c2a3 405f     ....h.>.$8,4.._@
  404da8:	161d c372 bce2 250c 283c 498b ff0d 9541     ..r....%<(.I..A.
  404db8:	39a8 0171 080c b3de d8b4 e49c 6456 c190     .9q.........Vd..
  404dc8:	7bcb 8461 d532 b670 486c 5c74 d0b8 5742     .{a.2.p.lHt\..BW
  404dd8:	5051 f4a7 537e 4165 c31a 17a4 963a 275e     QP..~SeA....:.^'
  404de8:	cb3b ab6b f11f 9d45 abac fa58 934b e303     ;.k...E...X.K...
  404df8:	5520 30fa f6ad 766d 9188 cc76 25f5 024c      U.0..mv..v..%L.
  404e08:	fc4f e5d7 d7c5 2acb 8026 3544 8fb5 62a3     O......*&.D5...b
  404e18:	49de b15a 6725 ba1b 9845 ea0e e15d fec0     .IZ.%g..E...]...
  404e28:	02c3 2f75 1281 4cf0 a38d 4697 c66b d3f9     ..u/...L...Fk...
  404e38:	e703 8f5f 9515 929c ebbf 6d7a da95 5259     .._.......zm..YR
  404e48:	2dd4 be83 d358 7421 2949 e069 448e c9c8     .-..X.!tI)i..D..
  404e58:	6a75 c289 78f4 8e79 6b99 583e dd27 b971     uj...xy..k>X'.q.
  404e68:	b6be e14f 17f0 88ad 66c9 20ac b47d ce3a     ..O......f. }.:.
  404e78:	1863 df4a 82e5 1a31 6097 5133 4562 537f     c.J...1..`3QbE.S
  404e88:	e0b1 6477 84bb 6bae 1cfe 81a0 94f9 082b     ..wd...k......+.
  404e98:	5870 4868 198f 45fd 8794 de6c b752 7bf8     pXhH...E..l.R..{
  404ea8:	23ab 73d3 e272 4b02 57e3 1f8f 2a66 55ab     .#.sr..K.W..f*.U
  404eb8:	07b2 eb28 032f b5c2 9a86 c57b a5d3 3708     ..(./.....{....7
  404ec8:	f230 2887 b223 bfa5 ba02 036a 5ced 1682     0..(#.....j..\..
  404ed8:	2b8a cf1c 92a7 79b4 f0f3 07f2 a14e 69e2     .+.....y....N..i
  404ee8:	cd65 daf4 d506 05be 1fd1 3462 8ac4 a6fe     e.........b4....
  404ef8:	9d34 2e53 a0a2 f355 3205 8ae1 75a4 f6eb     4.S...U..2...u..
  404f08:	390b 83ec aa40 60ef 065e 719f 51bd 6e10     .9..@..`^..q.Q.n
  404f18:	f93e 218a 3d96 dd06 aedd 3e05 464d e6bd     >..!.=.....>MF..
  404f28:	b591 548d 0571 c45d 6f04 06d4 ff60 5015     ...Tq.]..o..`..P
  404f38:	2419 98fb 97d6 bde9 cc89 4043 7767 d99e     .$........C@gw..
  404f48:	bdb0 e842 8807 898b 38e7 195b db79 c8ee     ..B......8[.y...
  404f58:	47a1 7c0a e97c 420f c9f8 841e 0000 0000     .G.||..B........
  404f68:	8309 8086 4832 2bed ac1e 1170 4e6c 5a72     ....2H.+..p.lNrZ
  404f78:	fbfd 0eff 560f 8538 1e3d aed5 2736 2d39     .....V8.=...6'9-
  404f88:	640a 0fd9 2168 5ca6 d19b 5b54 3a24 362e     .d..h!.\..T[$:.6
  404f98:	b10c 0a67 0f93 57e7 d2b4 ee96 9e1b 9b91     ..g....W........
  404fa8:	4f80 c0c5 a261 dc20 695a 774b 161c 121a     .O..a. .ZiKw....
  404fb8:	0ae2 93ba e5c0 a02a 433c 22e0 1d12 1b17     ......*.<C."....
  404fc8:	0b0e 090d adf2 8bc7 b92d b6a8 c814 1ea9     ........-.......
  404fd8:	8557 f119 4caf 7507 bbee 99dd fda3 7f60     W....L.u......`.
  404fe8:	9ff7 0126 bc5c 72f5 c544 663b 345b fb7e     ..&.\..rD.;f[4~.
  404ff8:	768b 4329 dccb 23c6 68b6 edfc 63b8 e4f1     .v)C...#.h...c..
  405008:	cad7 31dc 1042 6385 4013 9722 2084 c611     ...1B..c.@".. ..
  405018:	7d85 4a24 f8d2 bb3d 11ae f932 6dc7 29a1     .}$J..=...2..m.)
  405028:	4b1d 9e2f f3dc b230 ec0d 8652 d077 c1e3     .K/...0...R.w...
  405038:	6c2b b316 99a9 70b9 fa11 9448 2247 e964     +l.....p..H.G"d.
  405048:	c4a8 fc8c 1aa0 f03f d856 7d2c ef22 3390     ......?.V.,}"..3
  405058:	c787 494e c1d9 38d1 fe8c caa2 3698 d40b     ..NI...8.....6..
  405068:	cfa6 f581 28a5 7ade 26da b78e a43f adbf     .....(.z.&..?...
  405078:	e42c 3a9d 0d50 7892 9b6a 5fcc 6254 7e46     ,..:P..xj.._TbF~
  405088:	c2f6 8d13 e890 d8b8 5e2e 39f7 f582 c3af     .........^.9....
  405098:	be9f 5d80 7c69 d093 a96f d52d b3cf 2512     ...]i|..o.-....%
  4050a8:	3bc8 ac99 a710 187d 6ee8 9c63 7bdb 3bbb     .;....}..nc..{.;
  4050b8:	09cd 2678 f46e 5918 01ec 9ab7 a883 4f9a     ..x&n..Y.......O
  4050c8:	65e6 956e 7eaa ffe6 0821 bccf e6ef 15e8     .en..~..!.......
  4050d8:	d9ba e79b ce4a 6f36 d4ea 9f09 d629 b07c     ....J.6o....).|.
  4050e8:	af31 a4b2 312a 3f23 30c6 a594 c035 a266     1...*1#?.0..5.f.
  4050f8:	3774 4ebc a6fc 82ca b0e0 90d0 1533 a7d8     t7.N........3...
  405108:	4af1 0498 f741 ecda 0e7f cd50 2f17 91f6     .J..A.....P../..
  405118:	8d76 4dd6 4d43 efb0 54cc aa4d dfe4 9604     v..MCM...TM.....
  405128:	e39e d1b5 1b4c 6a88 b8c1 2c1f 7f46 6551     ....L..j...,F.Qe
  405138:	049d 5eea 5d01 8c35 73fa 8774 2efb 0b41     ...^.]5..st...A.
  405148:	5ab3 671d 5292 dbd2 33e9 1056 136d d647     .Z.g.R...3V.m.G.
  405158:	8c9a d761 7a37 a10c 8e59 f814 89eb 133c     ..a.7z..Y.....<.
  405168:	eece a927 35b7 61c9 ede1 1ce5 3c7a 47b1     ..'..5.a....z<.G
  405178:	599c d2df 3f55 f273 7918 14ce bf73 c737     .Y..U?s..y..s.7.
  405188:	ea53 f7cd 5b5f fdaa 14df 3d6f 8678 44db     S..._[....o=x..D
  405198:	81ca aff3 3eb9 68c4 2c38 2434 5fc2 a340     .....>.h8,4$._@.
  4051a8:	7216 1dc3 0cbc e225 8b28 3c49 41ff 0d95     .r....%.(.I<.A..
  4051b8:	7139 a801 de08 0cb3 9cd8 b4e4 9064 56c1     9q..........d..V
  4051c8:	617b cb84 70d5 32b6 7448 6c5c 42d0 b857     {a...p.2Ht\l.BW.

Disassembly of section .rodata.Te%44:

004051d8 <Te>:
  4051d8:	63a5 c663 7c84 f87c 7799 ee77 7b8d f67b     .cc..||..ww..{{.
  4051e8:	f20d fff2 6bbd d66b 6fb1 de6f c554 91c5     .....kk..oo.T...
  4051f8:	3050 6030 0103 0201 67a9 ce67 2b7d 562b     P00`.....gg.}++V
  405208:	fe19 e7fe d762 b5d7 abe6 4dab 769a ec76     ....b......M.vv.
  405218:	ca45 8fca 829d 1f82 c940 89c9 7d87 fa7d     E.......@....}}.
  405228:	fa15 effa 59eb b259 47c9 8e47 f00b fbf0     .....YY..GG.....
  405238:	adec 41ad d467 b3d4 a2fd 5fa2 afea 45af     ...Ag......_...E
  405248:	9cbf 239c a4f7 53a4 7296 e472 c05b 9bc0     ...#...S.rr.[...
  405258:	b7c2 75b7 fd1c e1fd 93ae 3d93 266a 4c26     ...u.......=j&&L
  405268:	365a 6c36 3f41 7e3f f702 f5f7 cc4f 83cc     Z66lA??~....O...
  405278:	345c 6834 a5f4 51a5 e534 d1e5 f108 f9f1     \44h...Q4.......
  405288:	7193 e271 d873 abd8 3153 6231 153f 2a15     .qq.s...S11b?..*
  405298:	040c 0804 c752 95c7 2365 4623 c35e 9dc3     ....R...e##F^...
  4052a8:	1828 3018 96a1 3796 050f 0a05 9ab5 2f9a     (..0...7......./
  4052b8:	0709 0e07 1236 2412 809b 1b80 e23d dfe2     ....6..$....=...
  4052c8:	eb26 cdeb 2769 4e27 b2cd 7fb2 759f ea75     &...i''N.....uu.
  4052d8:	091b 1209 839e 1d83 2c74 582c 1a2e 341a     ........t,,X...4
  4052e8:	1b2d 361b 6eb2 dc6e 5aee b45a a0fb 5ba0     -..6.nn..ZZ....[
  4052f8:	52f6 a452 3b4d 763b d661 b7d6 b3ce 7db3     .RR.M;;va......}
  405308:	297b 5229 e33e dde3 2f71 5e2f 8497 1384     {))R>...q//^....
  405318:	53f5 a653 d168 b9d1 0000 0000 ed2c c1ed     .SS.h.......,...
  405328:	2060 4020 fc1f e3fc b1c8 79b1 5bed b65b     `  @.......y.[[.
  405338:	6abe d46a cb46 8dcb bed9 67be 394b 7239     .jj.F......gK99r
  405348:	4ade 944a 4cd4 984c 58e8 b058 cf4a 85cf     .JJ..LL..XX.J...
  405358:	d06b bbd0 ef2a c5ef aae5 4faa fb16 edfb     k...*......O....
  405368:	43c5 8643 4dd7 9a4d 3355 6633 8594 1185     .CC..MM.U33f....
  405378:	45cf 8a45 f910 e9f9 0206 0402 7f81 fe7f     .EE.............
  405388:	50f0 a050 3c44 783c 9fba 259f a8e3 4ba8     .PP.D<<x...%...K
  405398:	51f3 a251 a3fe 5da3 40c0 8040 8f8a 058f     .QQ....].@@.....
  4053a8:	92ad 3f92 9dbc 219d 3848 7038 f504 f1f5     ...?...!H88p....
  4053b8:	bcdf 63bc b6c1 77b6 da75 afda 2163 4221     ...c...wu...c!!B
  4053c8:	1030 2010 ff1a e5ff f30e fdf3 d26d bfd2     0.. ........m...
  4053d8:	cd4c 81cd 0c14 180c 1335 2613 ec2f c3ec     L.......5..&/...
  4053e8:	5fe1 be5f 97a2 3597 44cc 8844 1739 2e17     .__....5.DD.9...
  4053f8:	c457 93c4 a7f2 55a7 7e82 fc7e 3d47 7a3d     W......U.~~.G==z
  405408:	64ac c864 5de7 ba5d 192b 3219 7395 e673     .dd..]].+..2.ss.
  405418:	60a0 c060 8198 1981 4fd1 9e4f dc7f a3dc     .``......OO.....
  405428:	2266 4422 2a7e 542a 90ab 3b90 8883 0b88     f""D~**T...;....
  405438:	46ca 8c46 ee29 c7ee b8d3 6bb8 143c 2814     .FF.)......k<..(
  405448:	de79 a7de 5ee2 bc5e 0b1d 160b db76 addb     y....^^.....v...
  405458:	e03b dbe0 3256 6432 3a4e 743a 0a1e 140a     ;...V22dN::t....
  405468:	49db 9249 060a 0c06 246c 4824 5ce4 b85c     .II.....l$$H.\\.
  405478:	c25d 9fc2 d36e bdd3 acef 43ac 62a6 c462     ]...n......C.bb.
  405488:	91a8 3991 95a4 3195 e437 d3e4 798b f279     ...9...17....yy.
  405498:	e732 d5e7 c843 8bc8 3759 6e37 6db7 da6d     2...C...Y77n.mm.
  4054a8:	8d8c 018d d564 b1d5 4ed2 9c4e a9e0 49a9     ....d....NN....I
  4054b8:	6cb4 d86c 56fa ac56 f407 f3f4 ea25 cfea     .ll..VV.....%...
  4054c8:	65af ca65 7a8e f47a aee9 47ae 0818 1008     .ee..zz....G....
  4054d8:	bad5 6fba 7888 f078 256f 4a25 2e72 5c2e     ...o.xx.o%%Jr..\
  4054e8:	1c24 381c a6f1 57a6 b4c7 73b4 c651 97c6     $..8...W...sQ...
  4054f8:	e823 cbe8 dd7c a1dd 749c e874 1f21 3e1f     #...|....tt.!..>
  405508:	4bdd 964b bddc 61bd 8b86 0d8b 8a85 0f8a     .KK....a........
  405518:	7090 e070 3e42 7c3e b5c4 71b5 66aa cc66     .pp.B>>|...q.ff.
  405528:	48d8 9048 0305 0603 f601 f7f6 0e12 1c0e     .HH.............
  405538:	61a3 c261 355f 6a35 57f9 ae57 b9d0 69b9     .aa._55j.WW....i
  405548:	8691 1786 c158 99c1 1d27 3a1d 9eb9 279e     ....X...'..:...'
  405558:	e138 d9e1 f813 ebf8 98b3 2b98 1133 2211     8..........+3.."
  405568:	69bb d269 d970 a9d9 8e89 078e 94a7 3394     .ii.p..........3
  405578:	9bb6 2d9b 1e22 3c1e 8792 1587 e920 c9e9     ...-"..<.... ...
  405588:	ce49 87ce 55ff aa55 2878 5028 df7a a5df     I....UU.x((Pz...
  405598:	8c8f 038c a1f8 59a1 8980 0989 0d17 1a0d     .......Y........
  4055a8:	bfda 65bf e631 d7e6 42c6 8442 68b8 d068     ...e1....BB..hh.
  4055b8:	41c3 8241 99b0 2999 2d77 5a2d 0f11 1e0f     .AA....)w--Z....
  4055c8:	b0cb 7bb0 54fc a854 bbd6 6dbb 163a 2c16     ...{.TT....m:..,
  4055d8:	6363 a5c6 7c7c 84f8 7777 99ee 7b7b 8df6     cc..||..ww..{{..
  4055e8:	f2f2 0dff 6b6b bdd6 6f6f b1de c5c5 5491     ....kk..oo.....T
  4055f8:	3030 5060 0101 0302 6767 a9ce 2b2b 7d56     00`P....gg..++V}
  405608:	fefe 19e7 d7d7 62b5 abab e64d 7676 9aec     .......b..M.vv..
  405618:	caca 458f 8282 9d1f c9c9 4089 7d7d 87fa     ...E.......@}}..
  405628:	fafa 15ef 5959 ebb2 4747 c98e f0f0 0bfb     ....YY..GG......
  405638:	adad ec41 d4d4 67b3 a2a2 fd5f afaf ea45     ..A....g.._...E.
  405648:	9c9c bf23 a4a4 f753 7272 96e4 c0c0 5b9b     ..#...S.rr.....[
  405658:	b7b7 c275 fdfd 1ce1 9393 ae3d 2626 6a4c     ..u.......=.&&Lj
  405668:	3636 5a6c 3f3f 417e f7f7 02f5 cccc 4f83     66lZ??~A.......O
  405678:	3434 5c68 a5a5 f451 e5e5 34d1 f1f1 08f9     44h\..Q....4....
  405688:	7171 93e2 d8d8 73ab 3131 5362 1515 3f2a     qq.....s11bS..*?
  405698:	0404 0c08 c7c7 5295 2323 6546 c3c3 5e9d     .......R##Fe...^
  4056a8:	1818 2830 9696 a137 0505 0f0a 9a9a b52f     ..0(..7......./.
  4056b8:	0707 090e 1212 3624 8080 9b1b e2e2 3ddf     ......$6.......=
  4056c8:	ebeb 26cd 2727 694e b2b2 cd7f 7575 9fea     ...&''Ni....uu..
  4056d8:	0909 1b12 8383 9e1d 2c2c 7458 1a1a 2e34     ........,,Xt..4.
  4056e8:	1b1b 2d36 6e6e b2dc 5a5a eeb4 a0a0 fb5b     ..6-nn..ZZ....[.
  4056f8:	5252 f6a4 3b3b 4d76 d6d6 61b7 b3b3 ce7d     RR..;;vM...a..}.
  405708:	2929 7b52 e3e3 3edd 2f2f 715e 8484 9713     ))R{...>//^q....
  405718:	5353 f5a6 d1d1 68b9 0000 0000 eded 2cc1     SS.....h.......,
  405728:	2020 6040 fcfc 1fe3 b1b1 c879 5b5b edb6       @`......y.[[..
  405738:	6a6a bed4 cbcb 468d bebe d967 3939 4b72     jj.....F..g.99rK
  405748:	4a4a de94 4c4c d498 5858 e8b0 cfcf 4a85     JJ..LL..XX.....J
  405758:	d0d0 6bbb efef 2ac5 aaaa e54f fbfb 16ed     ...k...*..O.....
  405768:	4343 c586 4d4d d79a 3333 5566 8585 9411     CC..MM..33fU....
  405778:	4545 cf8a f9f9 10e9 0202 0604 7f7f 81fe     EE..............
  405788:	5050 f0a0 3c3c 4478 9f9f ba25 a8a8 e34b     PP..<<xD..%...K.
  405798:	5151 f3a2 a3a3 fe5d 4040 c080 8f8f 8a05     QQ....].@@......
  4057a8:	9292 ad3f 9d9d bc21 3838 4870 f5f5 04f1     ..?...!.88pH....
  4057b8:	bcbc df63 b6b6 c177 dada 75af 2121 6342     ..c...w....u!!Bc
  4057c8:	1010 3020 ffff 1ae5 f3f3 0efd d2d2 6dbf     .. 0...........m
  4057d8:	cdcd 4c81 0c0c 1418 1313 3526 ecec 2fc3     ...L......&5.../
  4057e8:	5f5f e1be 9797 a235 4444 cc88 1717 392e     __....5.DD.....9
  4057f8:	c4c4 5793 a7a7 f255 7e7e 82fc 3d3d 477a     ...W..U.~~..==zG
  405808:	6464 acc8 5d5d e7ba 1919 2b32 7373 95e6     dd..]]....2+ss..
  405818:	6060 a0c0 8181 9819 4f4f d19e dcdc 7fa3     ``......OO......
  405828:	2222 6644 2a2a 7e54 9090 ab3b 8888 830b     ""Df**T~..;.....
  405838:	4646 ca8c eeee 29c7 b8b8 d36b 1414 3c28     FF.....)..k...(<
  405848:	dede 79a7 5e5e e2bc 0b0b 1d16 dbdb 76ad     ...y^^.........v
  405858:	e0e0 3bdb 3232 5664 3a3a 4e74 0a0a 1e14     ...;22dV::tN....
  405868:	4949 db92 0606 0a0c 2424 6c48 5c5c e4b8     II......$$Hl\\..
  405878:	c2c2 5d9f d3d3 6ebd acac ef43 6262 a6c4     ...]...n..C.bb..
  405888:	9191 a839 9595 a431 e4e4 37d3 7979 8bf2     ..9...1....7yy..
  405898:	e7e7 32d5 c8c8 438b 3737 596e 6d6d b7da     ...2...C77nYmm..
  4058a8:	8d8d 8c01 d5d5 64b1 4e4e d29c a9a9 e049     .......dNN....I.
  4058b8:	6c6c b4d8 5656 faac f4f4 07f3 eaea 25cf     ll..VV.........%
  4058c8:	6565 afca 7a7a 8ef4 aeae e947 0808 1810     ee..zz....G.....
  4058d8:	baba d56f 7878 88f0 2525 6f4a 2e2e 725c     ..o.xx..%%Jo..\r
  4058e8:	1c1c 2438 a6a6 f157 b4b4 c773 c6c6 5197     ..8$..W...s....Q
  4058f8:	e8e8 23cb dddd 7ca1 7474 9ce8 1f1f 213e     ...#...|tt....>!
  405908:	4b4b dd96 bdbd dc61 8b8b 860d 8a8a 850f     KK....a.........
  405918:	7070 90e0 3e3e 427c b5b5 c471 6666 aacc     pp..>>|B..q.ff..
  405928:	4848 d890 0303 0506 f6f6 01f7 0e0e 121c     HH..............
  405938:	6161 a3c2 3535 5f6a 5757 f9ae b9b9 d069     aa..55j_WW....i.
  405948:	8686 9117 c1c1 5899 1d1d 273a 9e9e b927     .......X..:'..'.
  405958:	e1e1 38d9 f8f8 13eb 9898 b32b 1111 3322     ...8......+..."3
  405968:	6969 bbd2 d9d9 70a9 8e8e 8907 9494 a733     ii.....p......3.
  405978:	9b9b b62d 1e1e 223c 8787 9215 e9e9 20c9     ..-...<"....... 
  405988:	cece 4987 5555 ffaa 2828 7850 dfdf 7aa5     ...IUU..((Px...z
  405998:	8c8c 8f03 a1a1 f859 8989 8009 0d0d 171a     ......Y.........
  4059a8:	bfbf da65 e6e6 31d7 4242 c684 6868 b8d0     ..e....1BB..hh..
  4059b8:	4141 c382 9999 b029 2d2d 775a 0f0f 111e     AA....).--Zw....
  4059c8:	b0b0 cb7b 5454 fca8 bbbb d66d 1616 3a2c     ..{.TT....m...,:
  4059d8:	c663 63a5 f87c 7c84 ee77 7799 f67b 7b8d     c..c|..|w..w{..{
  4059e8:	fff2 f20d d66b 6bbd de6f 6fb1 91c5 c554     ....k..ko..o..T.
  4059f8:	6030 3050 0201 0103 ce67 67a9 562b 2b7d     0`P0....g..g+V}+
  405a08:	e7fe fe19 b5d7 d762 4dab abe6 ec76 769a     ......b..M..v..v
  405a18:	8fca ca45 1f82 829d 89c9 c940 fa7d 7d87     ..E.......@.}..}
  405a28:	effa fa15 b259 59eb 8e47 47c9 fbf0 f00b     ....Y..YG..G....
  405a38:	41ad adec b3d4 d467 5fa2 a2fd 45af afea     .A....g.._...E..
  405a48:	239c 9cbf 53a4 a4f7 e472 7296 9bc0 c05b     .#...S..r..r..[.
  405a58:	75b7 b7c2 e1fd fd1c 3d93 93ae 4c26 266a     .u.......=..&Lj&
  405a68:	6c36 365a 7e3f 3f41 f5f7 f702 83cc cc4f     6lZ6?~A?......O.
  405a78:	6834 345c 51a5 a5f4 d1e5 e534 f9f1 f108     4h\4.Q....4.....
  405a88:	e271 7193 abd8 d873 6231 3153 2a15 153f     q..q..s.1bS1.*?.
  405a98:	0804 040c 95c7 c752 4623 2365 9dc3 c35e     ......R.#Fe#..^.
  405aa8:	3018 1828 3796 96a1 0a05 050f 2f9a 9ab5     .0(..7......./..
  405ab8:	0e07 0709 2412 1236 1b80 809b dfe2 e23d     .....$6.......=.
  405ac8:	cdeb eb26 4e27 2769 7fb2 b2cd ea75 759f     ..&.'Ni'....u..u
  405ad8:	1209 091b 1d83 839e 582c 2c74 341a 1a2e     ........,Xt,.4..
  405ae8:	361b 1b2d dc6e 6eb2 b45a 5aee 5ba0 a0fb     .6-.n..nZ..Z.[..
  405af8:	a452 52f6 763b 3b4d b7d6 d661 7db3 b3ce     R..R;vM;..a..}..
  405b08:	5229 297b dde3 e33e 5e2f 2f71 1384 8497     )R{)..>./^q/....
  405b18:	a653 53f5 b9d1 d168 0000 0000 c1ed ed2c     S..S..h.......,.
  405b28:	4020 2060 e3fc fc1f 79b1 b1c8 b65b 5bed      @` .....y..[..[
  405b38:	d46a 6abe 8dcb cb46 67be bed9 7239 394b     j..j..F..g..9rK9
  405b48:	944a 4ade 984c 4cd4 b058 58e8 85cf cf4a     J..JL..LX..X..J.
  405b58:	bbd0 d06b c5ef ef2a 4faa aae5 edfb fb16     ..k...*..O......
  405b68:	8643 43c5 9a4d 4dd7 6633 3355 1185 8594     C..CM..M3fU3....
  405b78:	8a45 45cf e9f9 f910 0402 0206 fe7f 7f81     E..E............
  405b88:	a050 50f0 783c 3c44 259f 9fba 4ba8 a8e3     P..P<xD<.%...K..
  405b98:	a251 51f3 5da3 a3fe 8040 40c0 058f 8f8a     Q..Q.]..@..@....
  405ba8:	3f92 92ad 219d 9dbc 7038 3848 f1f5 f504     .?...!..8pH8....
  405bb8:	63bc bcdf 77b6 b6c1 afda da75 4221 2163     .c...w....u.!Bc!
  405bc8:	2010 1030 e5ff ff1a fdf3 f30e bfd2 d26d     . 0...........m.
  405bd8:	81cd cd4c 180c 0c14 2613 1335 c3ec ec2f     ..L......&5.../.
  405be8:	be5f 5fe1 3597 97a2 8844 44cc 2e17 1739     _.._.5..D..D..9.
  405bf8:	93c4 c457 55a7 a7f2 fc7e 7e82 7a3d 3d47     ..W..U..~..~=zG=
  405c08:	c864 64ac ba5d 5de7 3219 192b e673 7395     d..d]..].2+.s..s
  405c18:	c060 60a0 1981 8198 9e4f 4fd1 a3dc dc7f     `..`....O..O....
  405c28:	4422 2266 542a 2a7e 3b90 90ab 0b88 8883     "Df"*T~*.;......
  405c38:	8c46 46ca c7ee ee29 6bb8 b8d3 2814 143c     F..F..)..k...(<.
  405c48:	a7de de79 bc5e 5ee2 160b 0b1d addb db76     ..y.^..^......v.
  405c58:	dbe0 e03b 6432 3256 743a 3a4e 140a 0a1e     ..;.2dV2:tN:....
  405c68:	9249 49db 0c06 060a 4824 246c b85c 5ce4     I..I....$Hl$\..\
  405c78:	9fc2 c25d bdd3 d36e 43ac acef c462 62a6     ..]...n..C..b..b
  405c88:	3991 91a8 3195 95a4 d3e4 e437 f279 798b     .9...1....7.y..y
  405c98:	d5e7 e732 8bc8 c843 6e37 3759 da6d 6db7     ..2...C.7nY7m..m
  405ca8:	018d 8d8c b1d5 d564 9c4e 4ed2 49a9 a9e0     ......d.N..N.I..
  405cb8:	d86c 6cb4 ac56 56fa f3f4 f407 cfea ea25     l..lV..V......%.
  405cc8:	ca65 65af f47a 7a8e 47ae aee9 1008 0818     e..ez..z.G......
  405cd8:	6fba bad5 f078 7888 4a25 256f 5c2e 2e72     .o..x..x%Jo%.\r.
  405ce8:	381c 1c24 57a6 a6f1 73b4 b4c7 97c6 c651     .8$..W...s....Q.
  405cf8:	cbe8 e823 a1dd dd7c e874 749c 3e1f 1f21     ..#...|.t..t.>!.
  405d08:	964b 4bdd 61bd bddc 0d8b 8b86 0f8a 8a85     K..K.a..........
  405d18:	e070 7090 7c3e 3e42 71b5 b5c4 cc66 66aa     p..p>|B>.q..f..f
  405d28:	9048 48d8 0603 0305 f7f6 f601 1c0e 0e12     H..H............
  405d38:	c261 61a3 6a35 355f ae57 57f9 69b9 b9d0     a..a5j_5W..W.i..
  405d48:	1786 8691 99c1 c158 3a1d 1d27 279e 9eb9     ......X..:'..'..
  405d58:	d9e1 e138 ebf8 f813 2b98 98b3 2211 1133     ..8......+..."3.
  405d68:	d269 69bb a9d9 d970 078e 8e89 3394 94a7     i..i..p......3..
  405d78:	2d9b 9bb6 3c1e 1e22 1587 8792 c9e9 e920     .-...<"....... .
  405d88:	87ce ce49 aa55 55ff 5028 2878 a5df df7a     ..I.U..U(Px(..z.
  405d98:	038c 8c8f 59a1 a1f8 0989 8980 1a0d 0d17     .....Y..........
  405da8:	65bf bfda d7e6 e631 8442 42c6 d068 68b8     .e....1.B..Bh..h
  405db8:	8241 41c3 2999 99b0 5a2d 2d77 1e0f 0f11     A..A.)..-Zw-....
  405dc8:	7bb0 b0cb a854 54fc 6dbb bbd6 2c16 163a     .{..T..T.m...,:.
  405dd8:	a5c6 6363 84f8 7c7c 99ee 7777 8df6 7b7b     ..cc..||..ww..{{
  405de8:	0dff f2f2 bdd6 6b6b b1de 6f6f 5491 c5c5     ......kk..oo.T..
  405df8:	5060 3030 0302 0101 a9ce 6767 7d56 2b2b     `P00......ggV}++
  405e08:	19e7 fefe 62b5 d7d7 e64d abab 9aec 7676     .....b..M.....vv
  405e18:	458f caca 9d1f 8282 4089 c9c9 87fa 7d7d     .E.......@....}}
  405e28:	15ef fafa ebb2 5959 c98e 4747 0bfb f0f0     ......YY..GG....
  405e38:	ec41 adad 67b3 d4d4 fd5f a2a2 ea45 afaf     A....g.._...E...
  405e48:	bf23 9c9c f753 a4a4 96e4 7272 5b9b c0c0     #...S.....rr.[..
  405e58:	c275 b7b7 1ce1 fdfd ae3d 9393 6a4c 2626     u.......=...Lj&&
  405e68:	5a6c 3636 417e 3f3f 02f5 f7f7 4f83 cccc     lZ66~A??.....O..
  405e78:	5c68 3434 f451 a5a5 34d1 e5e5 08f9 f1f1     h\44Q....4......
  405e88:	93e2 7171 73ab d8d8 5362 3131 3f2a 1515     ..qq.s..bS11*?..
  405e98:	0c08 0404 5295 c7c7 6546 2323 5e9d c3c3     .....R..Fe##.^..
  405ea8:	2830 1818 a137 9696 0f0a 0505 b52f 9a9a     0(..7......./...
  405eb8:	090e 0707 3624 1212 9b1b 8080 3ddf e2e2     ....$6.......=..
  405ec8:	26cd ebeb 694e 2727 cd7f b2b2 9fea 7575     .&..Ni''......uu
  405ed8:	1b12 0909 9e1d 8383 7458 2c2c 2e34 1a1a     ........Xt,,4...
  405ee8:	2d36 1b1b b2dc 6e6e eeb4 5a5a fb5b a0a0     6-....nn..ZZ[...
  405ef8:	f6a4 5252 4d76 3b3b 61b7 d6d6 ce7d b3b3     ..RRvM;;.a..}...
  405f08:	7b52 2929 3edd e3e3 715e 2f2f 9713 8484     R{)).>..^q//....
  405f18:	f5a6 5353 68b9 d1d1 0000 0000 2cc1 eded     ..SS.h.......,..
  405f28:	6040 2020 1fe3 fcfc c879 b1b1 edb6 5b5b     @`  ....y.....[[
  405f38:	bed4 6a6a 468d cbcb d967 bebe 4b72 3939     ..jj.F..g...rK99
  405f48:	de94 4a4a d498 4c4c e8b0 5858 4a85 cfcf     ..JJ..LL..XX.J..
  405f58:	6bbb d0d0 2ac5 efef e54f aaaa 16ed fbfb     .k...*..O.......
  405f68:	c586 4343 d79a 4d4d 5566 3333 9411 8585     ..CC..MMfU33....
  405f78:	cf8a 4545 10e9 f9f9 0604 0202 81fe 7f7f     ..EE............
  405f88:	f0a0 5050 4478 3c3c ba25 9f9f e34b a8a8     ..PPxD<<%...K...
  405f98:	f3a2 5151 fe5d a3a3 c080 4040 8a05 8f8f     ..QQ].....@@....
  405fa8:	ad3f 9292 bc21 9d9d 4870 3838 04f1 f5f5     ?...!...pH88....
  405fb8:	df63 bcbc c177 b6b6 75af dada 6342 2121     c...w....u..Bc!!
  405fc8:	3020 1010 1ae5 ffff 0efd f3f3 6dbf d2d2      0...........m..
  405fd8:	4c81 cdcd 1418 0c0c 3526 1313 2fc3 ecec     .L......&5.../..
  405fe8:	e1be 5f5f a235 9797 cc88 4444 392e 1717     ..__5.....DD.9..
  405ff8:	5793 c4c4 f255 a7a7 82fc 7e7e 477a 3d3d     .W..U.....~~zG==
  406008:	acc8 6464 e7ba 5d5d 2b32 1919 95e6 7373     ..dd..]]2+....ss
  406018:	a0c0 6060 9819 8181 d19e 4f4f 7fa3 dcdc     ..``......OO....
  406028:	6644 2222 7e54 2a2a ab3b 9090 830b 8888     Df""T~**;.......
  406038:	ca8c 4646 29c7 eeee d36b b8b8 3c28 1414     ..FF.)..k...(<..
  406048:	79a7 dede e2bc 5e5e 1d16 0b0b 76ad dbdb     .y....^^.....v..
  406058:	3bdb e0e0 5664 3232 4e74 3a3a 1e14 0a0a     .;..dV22tN::....
  406068:	db92 4949 0a0c 0606 6c48 2424 e4b8 5c5c     ..II....Hl$$..\\
  406078:	5d9f c2c2 6ebd d3d3 ef43 acac a6c4 6262     .]...n..C.....bb
  406088:	a839 9191 a431 9595 37d3 e4e4 8bf2 7979     9...1....7....yy
  406098:	32d5 e7e7 438b c8c8 596e 3737 b7da 6d6d     .2...C..nY77..mm
  4060a8:	8c01 8d8d 64b1 d5d5 d29c 4e4e e049 a9a9     .....d....NNI...
  4060b8:	b4d8 6c6c faac 5656 07f3 f4f4 25cf eaea     ..ll..VV.....%..
  4060c8:	afca 6565 8ef4 7a7a e947 aeae 1810 0808     ..ee..zzG.......
  4060d8:	d56f baba 88f0 7878 6f4a 2525 725c 2e2e     o.....xxJo%%\r..
  4060e8:	2438 1c1c f157 a6a6 c773 b4b4 5197 c6c6     8$..W...s....Q..
  4060f8:	23cb e8e8 7ca1 dddd 9ce8 7474 213e 1f1f     .#...|....tt>!..
  406108:	dd96 4b4b dc61 bdbd 860d 8b8b 850f 8a8a     ..KKa...........
  406118:	90e0 7070 427c 3e3e c471 b5b5 aacc 6666     ..pp|B>>q.....ff
  406128:	d890 4848 0506 0303 01f7 f6f6 121c 0e0e     ..HH............
  406138:	a3c2 6161 5f6a 3535 f9ae 5757 d069 b9b9     ..aaj_55..WWi...
  406148:	9117 8686 5899 c1c1 273a 1d1d b927 9e9e     .....X..:'..'...
  406158:	38d9 e1e1 13eb f8f8 b32b 9898 3322 1111     .8......+..."3..
  406168:	bbd2 6969 70a9 d9d9 8907 8e8e a733 9494     ..ii.p......3...
  406178:	b62d 9b9b 223c 1e1e 9215 8787 20c9 e9e9     -...<"....... ..
  406188:	4987 cece ffaa 5555 7850 2828 7aa5 dfdf     .I....UUPx((.z..
  406198:	8f03 8c8c f859 a1a1 8009 8989 171a 0d0d     ....Y...........
  4061a8:	da65 bfbf 31d7 e6e6 c684 4242 b8d0 6868     e....1....BB..hh
  4061b8:	c382 4141 b029 9999 775a 2d2d 111e 0f0f     ..AA)...Zw--....
  4061c8:	cb7b b0b0 fca8 5454 d66d bbbb 3a2c 1616     {.....TTm...,:..

Disassembly of section .text.Transform%45:

004061d8 <Transform>:
        rotlFixed((v),5); (w) = rotlFixed((w),30);
    #define R4(v,w,x,y,z,i) (z)+= f4((w),(x),(y)) + blk1((i)) + 0xCA62C1D6+ \
        rotlFixed((v),5); (w) = rotlFixed((w),30);

    static void Transform(Sha* sha, byte* data)
    {
  4061d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

004061dc <.LCFI0>:
  4061dc:	b097      	sub	sp, #92	; 0x5c

004061de <.LCFI1>:
  4061de:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  4061e0:	68c2      	ldr	r2, [r0, #12]
  4061e2:	eb03 0e02 	add.w	lr, r3, r2
  4061e6:	4bde      	ldr	r3, [pc, #888]	; (406560 <.LBE551+0xc>)
  4061e8:	449e      	add	lr, r3
  4061ea:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  4061ec:	eb0e 62f2 	add.w	r2, lr, r2, ror #27
            t = e; e = d; d = c; c = b; b = a; a = t;
        }
    #else
        /* nearly 1 K bigger in code size but 25% faster  */
        /* 4 rounds of 20 operations each. Loop unrolled. */
        R0(a,b,c,d,e, 0); R0(e,a,b,c,d, 1); R0(d,e,a,b,c, 2); R0(c,d,e,a,b, 3);
  4061f0:	6d41      	ldr	r1, [r0, #84]	; 0x54

004061f2 <.LVL2>:
  4061f2:	6d84      	ldr	r4, [r0, #88]	; 0x58
  4061f4:	ea81 0e04 	eor.w	lr, r1, r4
  4061f8:	6d01      	ldr	r1, [r0, #80]	; 0x50
  4061fa:	ea0e 0e01 	and.w	lr, lr, r1
  4061fe:	ea8e 0e04 	eor.w	lr, lr, r4
  406202:	4496      	add	lr, r2

00406204 <.LBB487>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  406204:	6d02      	ldr	r2, [r0, #80]	; 0x50
  406206:	ea4f 02b2 	mov.w	r2, r2, ror #2

0040620a <.LBE487>:
  40620a:	6d41      	ldr	r1, [r0, #84]	; 0x54
  40620c:	ea81 0c02 	eor.w	ip, r1, r2
  406210:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
  406212:	ea0c 0c01 	and.w	ip, ip, r1
  406216:	6d41      	ldr	r1, [r0, #84]	; 0x54
  406218:	ea8c 0c01 	eor.w	ip, ip, r1
  40621c:	4621      	mov	r1, r4
  40621e:	6904      	ldr	r4, [r0, #16]
  406220:	4421      	add	r1, r4
  406222:	4419      	add	r1, r3
  406224:	448c      	add	ip, r1
  406226:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27

0040622a <.LBB489>:
  40622a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
  40622c:	ea4f 07b1 	mov.w	r7, r1, ror #2

00406230 <.LBE489>:
  406230:	f8d0 8014 	ldr.w	r8, [r0, #20]

00406234 <.LVL7>:
  406234:	ea82 0a07 	eor.w	sl, r2, r7
  406238:	ea0a 0a0e 	and.w	sl, sl, lr
  40623c:	ea8a 0a02 	eor.w	sl, sl, r2
  406240:	6d41      	ldr	r1, [r0, #84]	; 0x54
  406242:	4441      	add	r1, r8
  406244:	4419      	add	r1, r3
  406246:	448a      	add	sl, r1
  406248:	eb0a 6afc 	add.w	sl, sl, ip, ror #27

0040624c <.LBB491>:
  40624c:	ea4f 0ebe 	mov.w	lr, lr, ror #2

00406250 <.LBE491>:
  406250:	f8d0 b018 	ldr.w	fp, [r0, #24]

00406254 <.LVL10>:
  406254:	ea87 090e 	eor.w	r9, r7, lr
  406258:	ea09 090c 	and.w	r9, r9, ip
  40625c:	ea89 0907 	eor.w	r9, r9, r7
  406260:	eb0b 0103 	add.w	r1, fp, r3
  406264:	440a      	add	r2, r1
  406266:	4491      	add	r9, r2
  406268:	eb09 69fa 	add.w	r9, r9, sl, ror #27

0040626c <.LBB493>:
  40626c:	ea4f 0cbc 	mov.w	ip, ip, ror #2

00406270 <.LBE493>:
        R0(b,c,d,e,a, 4); R0(a,b,c,d,e, 5); R0(e,a,b,c,d, 6); R0(d,e,a,b,c, 7);
  406270:	ea8e 060c 	eor.w	r6, lr, ip
  406274:	ea06 060a 	and.w	r6, r6, sl
  406278:	ea86 060e 	eor.w	r6, r6, lr
  40627c:	69c2      	ldr	r2, [r0, #28]
  40627e:	441a      	add	r2, r3
  406280:	4417      	add	r7, r2
  406282:	443e      	add	r6, r7
  406284:	eb06 66f9 	add.w	r6, r6, r9, ror #27

00406288 <.LBB495>:
  406288:	ea4f 0aba 	mov.w	sl, sl, ror #2

0040628c <.LBE495>:
  40628c:	ea8c 050a 	eor.w	r5, ip, sl
  406290:	ea05 0509 	and.w	r5, r5, r9
  406294:	ea85 050c 	eor.w	r5, r5, ip
  406298:	6a02      	ldr	r2, [r0, #32]
  40629a:	441a      	add	r2, r3
  40629c:	4496      	add	lr, r2
  40629e:	4475      	add	r5, lr
  4062a0:	eb05 65f6 	add.w	r5, r5, r6, ror #27

004062a4 <.LBB497>:
  4062a4:	ea4f 09b9 	mov.w	r9, r9, ror #2

004062a8 <.LBE497>:
  4062a8:	ea8a 0409 	eor.w	r4, sl, r9
  4062ac:	4034      	ands	r4, r6
  4062ae:	ea84 040a 	eor.w	r4, r4, sl
  4062b2:	6a42      	ldr	r2, [r0, #36]	; 0x24
  4062b4:	441a      	add	r2, r3
  4062b6:	4494      	add	ip, r2
  4062b8:	4464      	add	r4, ip
  4062ba:	eb04 64f5 	add.w	r4, r4, r5, ror #27

004062be <.LBB499>:
  4062be:	ea4f 06b6 	mov.w	r6, r6, ror #2

004062c2 <.LBE499>:
  4062c2:	ea89 0106 	eor.w	r1, r9, r6
  4062c6:	4029      	ands	r1, r5
  4062c8:	ea81 0109 	eor.w	r1, r1, r9
  4062cc:	6a82      	ldr	r2, [r0, #40]	; 0x28
  4062ce:	441a      	add	r2, r3
  4062d0:	4492      	add	sl, r2
  4062d2:	4451      	add	r1, sl
  4062d4:	eb01 61f4 	add.w	r1, r1, r4, ror #27

004062d8 <.LBB501>:
  4062d8:	ea4f 05b5 	mov.w	r5, r5, ror #2

004062dc <.LBE501>:
        R0(c,d,e,a,b, 8); R0(b,c,d,e,a, 9); R0(a,b,c,d,e,10); R0(e,a,b,c,d,11);
  4062dc:	ea86 0205 	eor.w	r2, r6, r5
  4062e0:	4022      	ands	r2, r4
  4062e2:	4072      	eors	r2, r6
  4062e4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  4062e6:	441f      	add	r7, r3
  4062e8:	44b9      	add	r9, r7
  4062ea:	444a      	add	r2, r9
  4062ec:	eb02 62f1 	add.w	r2, r2, r1, ror #27

004062f0 <.LBB503>:
  4062f0:	ea4f 04b4 	mov.w	r4, r4, ror #2

004062f4 <.LBE503>:
  4062f4:	ea85 0704 	eor.w	r7, r5, r4
  4062f8:	400f      	ands	r7, r1
  4062fa:	ea87 0c05 	eor.w	ip, r7, r5
  4062fe:	6b07      	ldr	r7, [r0, #48]	; 0x30
  406300:	eb07 0e03 	add.w	lr, r7, r3
  406304:	4476      	add	r6, lr
  406306:	eb0c 0706 	add.w	r7, ip, r6
  40630a:	eb07 67f2 	add.w	r7, r7, r2, ror #27

0040630e <.LBB505>:
  40630e:	ea4f 01b1 	mov.w	r1, r1, ror #2

00406312 <.LBE505>:
  406312:	ea84 0e01 	eor.w	lr, r4, r1
  406316:	ea0e 0e02 	and.w	lr, lr, r2
  40631a:	ea8e 0e04 	eor.w	lr, lr, r4
  40631e:	6b46      	ldr	r6, [r0, #52]	; 0x34
  406320:	441e      	add	r6, r3
  406322:	4435      	add	r5, r6
  406324:	44ae      	add	lr, r5
  406326:	eb0e 6ef7 	add.w	lr, lr, r7, ror #27

0040632a <.LBB507>:
  40632a:	ea4f 02b2 	mov.w	r2, r2, ror #2

0040632e <.LBE507>:
  40632e:	ea81 0c02 	eor.w	ip, r1, r2
  406332:	ea0c 0c07 	and.w	ip, ip, r7
  406336:	ea8c 0c01 	eor.w	ip, ip, r1
  40633a:	6b85      	ldr	r5, [r0, #56]	; 0x38
  40633c:	441d      	add	r5, r3
  40633e:	442c      	add	r4, r5
  406340:	44a4      	add	ip, r4
  406342:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27

00406346 <.LBB509>:
  406346:	ea4f 07b7 	mov.w	r7, r7, ror #2

0040634a <.LBE509>:
        R0(d,e,a,b,c,12); R0(c,d,e,a,b,13); R0(b,c,d,e,a,14); R0(a,b,c,d,e,15);
  40634a:	ea82 0a07 	eor.w	sl, r2, r7
  40634e:	ea0a 0a0e 	and.w	sl, sl, lr
  406352:	ea8a 0a02 	eor.w	sl, sl, r2
  406356:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  406358:	441c      	add	r4, r3
  40635a:	4421      	add	r1, r4
  40635c:	448a      	add	sl, r1
  40635e:	eb0a 6afc 	add.w	sl, sl, ip, ror #27

00406362 <.LBB511>:
  406362:	ea4f 0ebe 	mov.w	lr, lr, ror #2

00406366 <.LBE511>:
  406366:	ea87 090e 	eor.w	r9, r7, lr
  40636a:	ea09 090c 	and.w	r9, r9, ip
  40636e:	ea89 0907 	eor.w	r9, r9, r7
  406372:	6c01      	ldr	r1, [r0, #64]	; 0x40
  406374:	4419      	add	r1, r3
  406376:	440a      	add	r2, r1
  406378:	4491      	add	r9, r2
  40637a:	eb09 69fa 	add.w	r9, r9, sl, ror #27

0040637e <.LBB513>:
  40637e:	ea4f 0cbc 	mov.w	ip, ip, ror #2

00406382 <.LBE513>:
  406382:	ea8e 060c 	eor.w	r6, lr, ip
  406386:	ea06 060a 	and.w	r6, r6, sl
  40638a:	ea86 060e 	eor.w	r6, r6, lr
  40638e:	6c42      	ldr	r2, [r0, #68]	; 0x44
  406390:	441a      	add	r2, r3
  406392:	4417      	add	r7, r2
  406394:	443e      	add	r6, r7
  406396:	eb06 66f9 	add.w	r6, r6, r9, ror #27

0040639a <.LBB515>:
  40639a:	ea4f 0aba 	mov.w	sl, sl, ror #2

0040639e <.LBE515>:
  40639e:	ea8c 050a 	eor.w	r5, ip, sl
  4063a2:	ea05 0509 	and.w	r5, r5, r9
  4063a6:	ea85 050c 	eor.w	r5, r5, ip
  4063aa:	6c82      	ldr	r2, [r0, #72]	; 0x48
  4063ac:	441a      	add	r2, r3
  4063ae:	4496      	add	lr, r2
  4063b0:	4475      	add	r5, lr
  4063b2:	eb05 65f6 	add.w	r5, r5, r6, ror #27

004063b6 <.LBB517>:
  4063b6:	ea4f 09b9 	mov.w	r9, r9, ror #2

004063ba <.LBE517>:

        R1(e,a,b,c,d,16); R1(d,e,a,b,c,17); R1(c,d,e,a,b,18); R1(b,c,d,e,a,19);
  4063ba:	68c2      	ldr	r2, [r0, #12]
  4063bc:	ea82 0e08 	eor.w	lr, r2, r8
  4063c0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  4063c2:	ea8e 0e02 	eor.w	lr, lr, r2
  4063c6:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4063c8:	ea8e 0e02 	eor.w	lr, lr, r2

004063cc <.LBB519>:
  4063cc:	ea4f 72fe 	mov.w	r2, lr, ror #31

004063d0 <.LBE519>:
  4063d0:	ea8a 0409 	eor.w	r4, sl, r9
  4063d4:	4034      	ands	r4, r6
  4063d6:	ea84 040a 	eor.w	r4, r4, sl
  4063da:	9201      	str	r2, [sp, #4]
  4063dc:	441a      	add	r2, r3

004063de <.LVL39>:
  4063de:	4494      	add	ip, r2
  4063e0:	4464      	add	r4, ip
  4063e2:	eb04 64f5 	add.w	r4, r4, r5, ror #27

004063e6 <.LBB521>:
  4063e6:	ea4f 06b6 	mov.w	r6, r6, ror #2

004063ea <.LBE521>:
  4063ea:	6901      	ldr	r1, [r0, #16]
  4063ec:	ea81 020b 	eor.w	r2, r1, fp
  4063f0:	6b01      	ldr	r1, [r0, #48]	; 0x30
  4063f2:	404a      	eors	r2, r1
  4063f4:	6c41      	ldr	r1, [r0, #68]	; 0x44
  4063f6:	404a      	eors	r2, r1

004063f8 <.LBB523>:
  4063f8:	ea4f 71f2 	mov.w	r1, r2, ror #31
  4063fc:	460f      	mov	r7, r1

004063fe <.LBE523>:
  4063fe:	ea89 0106 	eor.w	r1, r9, r6

00406402 <.LVL44>:
  406402:	4029      	ands	r1, r5
  406404:	ea81 0109 	eor.w	r1, r1, r9
  406408:	9707      	str	r7, [sp, #28]
  40640a:	18fa      	adds	r2, r7, r3
  40640c:	4492      	add	sl, r2
  40640e:	4451      	add	r1, sl
  406410:	eb01 61f4 	add.w	r1, r1, r4, ror #27

00406414 <.LBB525>:
  406414:	ea4f 05b5 	mov.w	r5, r5, ror #2

00406418 <.LBE525>:
  406418:	69c7      	ldr	r7, [r0, #28]

0040641a <.LVL47>:
  40641a:	46be      	mov	lr, r7
  40641c:	ea88 0207 	eor.w	r2, r8, r7
  406420:	6b47      	ldr	r7, [r0, #52]	; 0x34
  406422:	407a      	eors	r2, r7
  406424:	6c87      	ldr	r7, [r0, #72]	; 0x48
  406426:	407a      	eors	r2, r7

00406428 <.LBB527>:
  406428:	ea4f 77f2 	mov.w	r7, r2, ror #31

0040642c <.LBE527>:
  40642c:	ea86 0205 	eor.w	r2, r6, r5
  406430:	4022      	ands	r2, r4
  406432:	4072      	eors	r2, r6
  406434:	9703      	str	r7, [sp, #12]
  406436:	441f      	add	r7, r3

00406438 <.LVL50>:
  406438:	44b9      	add	r9, r7
  40643a:	444a      	add	r2, r9
  40643c:	eb02 62f1 	add.w	r2, r2, r1, ror #27

00406440 <.LBB529>:
  406440:	ea4f 09b4 	mov.w	r9, r4, ror #2

00406444 <.LBE529>:
  406444:	6a04      	ldr	r4, [r0, #32]
  406446:	ea8b 0704 	eor.w	r7, fp, r4
  40644a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  40644c:	4067      	eors	r7, r4
  40644e:	9c01      	ldr	r4, [sp, #4]
  406450:	4067      	eors	r7, r4

00406452 <.LBB531>:
  406452:	ea4f 74f7 	mov.w	r4, r7, ror #31

00406456 <.LBE531>:
  406456:	ea85 0709 	eor.w	r7, r5, r9
  40645a:	400f      	ands	r7, r1
  40645c:	406f      	eors	r7, r5
  40645e:	9404      	str	r4, [sp, #16]
  406460:	4423      	add	r3, r4
  406462:	4433      	add	r3, r6
  406464:	441f      	add	r7, r3
  406466:	eb07 67f2 	add.w	r7, r7, r2, ror #27

0040646a <.LBB533>:
  40646a:	ea4f 01b1 	mov.w	r1, r1, ror #2

0040646e <.LBE533>:

        R2(a,b,c,d,e,20); R2(e,a,b,c,d,21); R2(d,e,a,b,c,22); R2(c,d,e,a,b,23);
  40646e:	6a46      	ldr	r6, [r0, #36]	; 0x24
  406470:	ea8e 0606 	eor.w	r6, lr, r6
  406474:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  406476:	405e      	eors	r6, r3
  406478:	9b07      	ldr	r3, [sp, #28]
  40647a:	405e      	eors	r6, r3

0040647c <.LBB535>:
  40647c:	ea4f 73f6 	mov.w	r3, r6, ror #31

00406480 <.LBE535>:
  406480:	ea89 0801 	eor.w	r8, r9, r1
  406484:	ea88 0802 	eor.w	r8, r8, r2
  406488:	9302      	str	r3, [sp, #8]
  40648a:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 406564 <.LBE551+0x10>
  40648e:	449e      	add	lr, r3
  406490:	4475      	add	r5, lr
  406492:	44a8      	add	r8, r5
  406494:	eb08 68f7 	add.w	r8, r8, r7, ror #27

00406498 <.LBB537>:
  406498:	ea4f 02b2 	mov.w	r2, r2, ror #2

0040649c <.LBE537>:
  40649c:	6a05      	ldr	r5, [r0, #32]
  40649e:	6a86      	ldr	r6, [r0, #40]	; 0x28
  4064a0:	4075      	eors	r5, r6
  4064a2:	6c06      	ldr	r6, [r0, #64]	; 0x40
  4064a4:	4075      	eors	r5, r6
  4064a6:	9e03      	ldr	r6, [sp, #12]
  4064a8:	4075      	eors	r5, r6

004064aa <.LBB539>:
  4064aa:	ea4f 73f5 	mov.w	r3, r5, ror #31

004064ae <.LBE539>:
  4064ae:	ea81 0c02 	eor.w	ip, r1, r2
  4064b2:	ea8c 0c07 	eor.w	ip, ip, r7
  4064b6:	9303      	str	r3, [sp, #12]

004064b8 <.LVL63>:
  4064b8:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 406564 <.LBE551+0x10>
  4064bc:	449e      	add	lr, r3
  4064be:	eb09 040e 	add.w	r4, r9, lr

004064c2 <.LVL64>:
  4064c2:	44a4      	add	ip, r4
  4064c4:	eb0c 6cf8 	add.w	ip, ip, r8, ror #27

004064c8 <.LBB541>:
  4064c8:	ea4f 07b7 	mov.w	r7, r7, ror #2

004064cc <.LBE541>:
  4064cc:	6a45      	ldr	r5, [r0, #36]	; 0x24
  4064ce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

004064d0 <.LVL67>:
  4064d0:	ea85 0403 	eor.w	r4, r5, r3
  4064d4:	6c45      	ldr	r5, [r0, #68]	; 0x44
  4064d6:	406c      	eors	r4, r5
  4064d8:	9d04      	ldr	r5, [sp, #16]
  4064da:	406c      	eors	r4, r5

004064dc <.LBB543>:
  4064dc:	ea4f 73f4 	mov.w	r3, r4, ror #31

004064e0 <.LBE543>:
  4064e0:	ea82 0e07 	eor.w	lr, r2, r7
  4064e4:	ea8e 0e08 	eor.w	lr, lr, r8
  4064e8:	9304      	str	r3, [sp, #16]

004064ea <.LVL70>:
  4064ea:	f103 49dd 	add.w	r9, r3, #1853882368	; 0x6e800000
  4064ee:	f509 09b3 	add.w	r9, r9, #5865472	; 0x598000
  4064f2:	f509 49d7 	add.w	r9, r9, #27520	; 0x6b80
  4064f6:	f109 0921 	add.w	r9, r9, #33	; 0x21
  4064fa:	4449      	add	r1, r9
  4064fc:	448e      	add	lr, r1
  4064fe:	eb0e 6efc 	add.w	lr, lr, ip, ror #27

00406502 <.LBB545>:
  406502:	ea4f 08b8 	mov.w	r8, r8, ror #2

00406506 <.LBE545>:
  406506:	6a81      	ldr	r1, [r0, #40]	; 0x28
  406508:	4689      	mov	r9, r1
  40650a:	6b01      	ldr	r1, [r0, #48]	; 0x30
  40650c:	ea89 0101 	eor.w	r1, r9, r1
  406510:	6c84      	ldr	r4, [r0, #72]	; 0x48
  406512:	4061      	eors	r1, r4
  406514:	9c02      	ldr	r4, [sp, #8]
  406516:	4061      	eors	r1, r4

00406518 <.LBB547>:
  406518:	ea4f 73f1 	mov.w	r3, r1, ror #31

0040651c <.LBE547>:
  40651c:	ea87 0b08 	eor.w	fp, r7, r8
  406520:	ea8b 0b0c 	eor.w	fp, fp, ip
  406524:	9305      	str	r3, [sp, #20]
  406526:	f103 49dd 	add.w	r9, r3, #1853882368	; 0x6e800000
  40652a:	f509 09b3 	add.w	r9, r9, #5865472	; 0x598000
  40652e:	f509 49d7 	add.w	r9, r9, #27520	; 0x6b80
  406532:	f109 0921 	add.w	r9, r9, #33	; 0x21
  406536:	444a      	add	r2, r9
  406538:	4493      	add	fp, r2
  40653a:	eb0b 6bfe 	add.w	fp, fp, lr, ror #27

0040653e <.LBB549>:
  40653e:	ea4f 0cbc 	mov.w	ip, ip, ror #2

00406542 <.LBE549>:
        R2(b,c,d,e,a,24); R2(a,b,c,d,e,25); R2(e,a,b,c,d,26); R2(d,e,a,b,c,27);
  406542:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  406544:	6b42      	ldr	r2, [r0, #52]	; 0x34
  406546:	404a      	eors	r2, r1
  406548:	9b01      	ldr	r3, [sp, #4]

0040654a <.LVL77>:
  40654a:	405a      	eors	r2, r3
  40654c:	9903      	ldr	r1, [sp, #12]
  40654e:	404a      	eors	r2, r1

00406550 <.LBB551>:
  406550:	ea4f 72f2 	mov.w	r2, r2, ror #31

00406554 <.LBE551>:
  406554:	ea88 0a0c 	eor.w	sl, r8, ip
  406558:	ea8a 0a0e 	eor.w	sl, sl, lr
  40655c:	e004      	b.n	406568 <.LBE551+0x14>
  40655e:	bf00      	nop
  406560:	5a827999 	.word	0x5a827999
  406564:	6ed9eba1 	.word	0x6ed9eba1
  406568:	9206      	str	r2, [sp, #24]
  40656a:	f8df 96b8 	ldr.w	r9, [pc, #1720]	; 406c24 <.LBE673+0x14>
  40656e:	4491      	add	r9, r2
  406570:	444f      	add	r7, r9
  406572:	44ba      	add	sl, r7
  406574:	eb0a 6afb 	add.w	sl, sl, fp, ror #27

00406578 <.LBB553>:
  406578:	ea4f 0ebe 	mov.w	lr, lr, ror #2

0040657c <.LBE553>:
  40657c:	6b01      	ldr	r1, [r0, #48]	; 0x30
  40657e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  406580:	ea81 0704 	eor.w	r7, r1, r4
  406584:	9a07      	ldr	r2, [sp, #28]
  406586:	4057      	eors	r7, r2
  406588:	9c04      	ldr	r4, [sp, #16]
  40658a:	4067      	eors	r7, r4

0040658c <.LBB555>:
  40658c:	ea4f 77f7 	mov.w	r7, r7, ror #31

00406590 <.LVL83>:
  406590:	463c      	mov	r4, r7

00406592 <.LBE555>:
  406592:	ea8c 090e 	eor.w	r9, ip, lr
  406596:	ea89 090b 	eor.w	r9, r9, fp
  40659a:	f107 47dd 	add.w	r7, r7, #1853882368	; 0x6e800000
  40659e:	f507 07b3 	add.w	r7, r7, #5865472	; 0x598000
  4065a2:	f507 47d7 	add.w	r7, r7, #27520	; 0x6b80
  4065a6:	3721      	adds	r7, #33	; 0x21
  4065a8:	44b8      	add	r8, r7
  4065aa:	44c1      	add	r9, r8
  4065ac:	eb09 69fa 	add.w	r9, r9, sl, ror #27

004065b0 <.LBB557>:
  4065b0:	ea4f 0bbb 	mov.w	fp, fp, ror #2

004065b4 <.LBE557>:
  4065b4:	6b41      	ldr	r1, [r0, #52]	; 0x34
  4065b6:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
  4065b8:	404f      	eors	r7, r1
  4065ba:	4077      	eors	r7, r6
  4065bc:	9905      	ldr	r1, [sp, #20]
  4065be:	404f      	eors	r7, r1

004065c0 <.LBB559>:
  4065c0:	ea4f 77f7 	mov.w	r7, r7, ror #31

004065c4 <.LBE559>:
  4065c4:	ea8e 080b 	eor.w	r8, lr, fp
  4065c8:	ea88 080a 	eor.w	r8, r8, sl
  4065cc:	9707      	str	r7, [sp, #28]

004065ce <.LVL89>:
  4065ce:	f107 47dd 	add.w	r7, r7, #1853882368	; 0x6e800000
  4065d2:	f507 07b3 	add.w	r7, r7, #5865472	; 0x598000
  4065d6:	f507 47d7 	add.w	r7, r7, #27520	; 0x6b80
  4065da:	3721      	adds	r7, #33	; 0x21
  4065dc:	44bc      	add	ip, r7
  4065de:	44e0      	add	r8, ip
  4065e0:	eb08 68f9 	add.w	r8, r8, r9, ror #27

004065e4 <.LBB561>:
  4065e4:	ea4f 0aba 	mov.w	sl, sl, ror #2

004065e8 <.LBE561>:
  4065e8:	6b81      	ldr	r1, [r0, #56]	; 0x38
  4065ea:	468c      	mov	ip, r1
  4065ec:	6c01      	ldr	r1, [r0, #64]	; 0x40
  4065ee:	ea8c 0701 	eor.w	r7, ip, r1
  4065f2:	406f      	eors	r7, r5
  4065f4:	9906      	ldr	r1, [sp, #24]
  4065f6:	404f      	eors	r7, r1

004065f8 <.LBB563>:
  4065f8:	ea4f 77f7 	mov.w	r7, r7, ror #31

004065fc <.LVL93>:
  4065fc:	4639      	mov	r1, r7

004065fe <.LBE563>:
  4065fe:	ea8b 070a 	eor.w	r7, fp, sl
  406602:	ea87 0709 	eor.w	r7, r7, r9
  406606:	9108      	str	r1, [sp, #32]
  406608:	f8df c618 	ldr.w	ip, [pc, #1560]	; 406c24 <.LBE673+0x14>
  40660c:	448c      	add	ip, r1
  40660e:	44e6      	add	lr, ip
  406610:	4477      	add	r7, lr
  406612:	eb07 67f8 	add.w	r7, r7, r8, ror #27

00406616 <.LBB565>:
  406616:	ea4f 09b9 	mov.w	r9, r9, ror #2

0040661a <.LBE565>:
        R2(c,d,e,a,b,28); R2(b,c,d,e,a,29); R2(a,b,c,d,e,30); R2(e,a,b,c,d,31);
  40661a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  40661c:	468e      	mov	lr, r1
  40661e:	6c41      	ldr	r1, [r0, #68]	; 0x44
  406620:	ea8e 0e01 	eor.w	lr, lr, r1
  406624:	9902      	ldr	r1, [sp, #8]
  406626:	ea8e 0e01 	eor.w	lr, lr, r1
  40662a:	940d      	str	r4, [sp, #52]	; 0x34
  40662c:	ea8e 0e04 	eor.w	lr, lr, r4

00406630 <.LBB567>:
  406630:	ea4f 7efe 	mov.w	lr, lr, ror #31

00406634 <.LVL98>:
  406634:	4671      	mov	r1, lr

00406636 <.LBE567>:
  406636:	ea8a 0e09 	eor.w	lr, sl, r9
  40663a:	ea8e 0e08 	eor.w	lr, lr, r8
  40663e:	9109      	str	r1, [sp, #36]	; 0x24
  406640:	f101 4cdd 	add.w	ip, r1, #1853882368	; 0x6e800000
  406644:	f50c 0cb3 	add.w	ip, ip, #5865472	; 0x598000
  406648:	f50c 4cd7 	add.w	ip, ip, #27520	; 0x6b80
  40664c:	f10c 0c21 	add.w	ip, ip, #33	; 0x21
  406650:	44e3      	add	fp, ip
  406652:	44f3      	add	fp, lr
  406654:	eb0b 6bf7 	add.w	fp, fp, r7, ror #27

00406658 <.LBB569>:
  406658:	ea4f 08b8 	mov.w	r8, r8, ror #2

0040665c <.LBE569>:
  40665c:	6c04      	ldr	r4, [r0, #64]	; 0x40
  40665e:	46a6      	mov	lr, r4
  406660:	6c84      	ldr	r4, [r0, #72]	; 0x48
  406662:	ea8e 0e04 	eor.w	lr, lr, r4
  406666:	9c03      	ldr	r4, [sp, #12]
  406668:	ea8e 0e04 	eor.w	lr, lr, r4
  40666c:	9c07      	ldr	r4, [sp, #28]
  40666e:	ea8e 0e04 	eor.w	lr, lr, r4

00406672 <.LBB571>:
  406672:	ea4f 7efe 	mov.w	lr, lr, ror #31

00406676 <.LVL103>:
  406676:	4674      	mov	r4, lr

00406678 <.LBE571>:
  406678:	ea89 0e08 	eor.w	lr, r9, r8
  40667c:	ea8e 0e07 	eor.w	lr, lr, r7
  406680:	940a      	str	r4, [sp, #40]	; 0x28
  406682:	f104 4cdd 	add.w	ip, r4, #1853882368	; 0x6e800000
  406686:	f50c 0cb3 	add.w	ip, ip, #5865472	; 0x598000
  40668a:	f50c 4cd7 	add.w	ip, ip, #27520	; 0x6b80
  40668e:	f10c 0c21 	add.w	ip, ip, #33	; 0x21
  406692:	44e2      	add	sl, ip
  406694:	44f2      	add	sl, lr
  406696:	eb0a 6afb 	add.w	sl, sl, fp, ror #27

0040669a <.LBB573>:
  40669a:	ea4f 07b7 	mov.w	r7, r7, ror #2

0040669e <.LBE573>:
  40669e:	6c41      	ldr	r1, [r0, #68]	; 0x44
  4066a0:	ea81 0e03 	eor.w	lr, r1, r3
  4066a4:	9c04      	ldr	r4, [sp, #16]
  4066a6:	ea8e 0e04 	eor.w	lr, lr, r4
  4066aa:	9908      	ldr	r1, [sp, #32]
  4066ac:	ea8e 0e01 	eor.w	lr, lr, r1

004066b0 <.LBB575>:
  4066b0:	ea4f 7efe 	mov.w	lr, lr, ror #31

004066b4 <.LVL108>:
  4066b4:	4673      	mov	r3, lr

004066b6 <.LBE575>:
  4066b6:	ea88 0e07 	eor.w	lr, r8, r7
  4066ba:	ea8e 0e0b 	eor.w	lr, lr, fp
  4066be:	930e      	str	r3, [sp, #56]	; 0x38
  4066c0:	f103 4cdd 	add.w	ip, r3, #1853882368	; 0x6e800000
  4066c4:	f50c 0cb3 	add.w	ip, ip, #5865472	; 0x598000
  4066c8:	f50c 4cd7 	add.w	ip, ip, #27520	; 0x6b80
  4066cc:	f10c 0c21 	add.w	ip, ip, #33	; 0x21
  4066d0:	44e1      	add	r9, ip
  4066d2:	44f1      	add	r9, lr
  4066d4:	eb09 69fa 	add.w	r9, r9, sl, ror #27

004066d8 <.LBB577>:
  4066d8:	ea4f 0bbb 	mov.w	fp, fp, ror #2

004066dc <.LBE577>:
  4066dc:	6c81      	ldr	r1, [r0, #72]	; 0x48
  4066de:	4614      	mov	r4, r2
  4066e0:	ea81 0e02 	eor.w	lr, r1, r2
  4066e4:	9a05      	ldr	r2, [sp, #20]

004066e6 <.LVL112>:
  4066e6:	ea8e 0e02 	eor.w	lr, lr, r2
  4066ea:	9909      	ldr	r1, [sp, #36]	; 0x24
  4066ec:	ea8e 0e01 	eor.w	lr, lr, r1

004066f0 <.LBB579>:
  4066f0:	ea4f 7efe 	mov.w	lr, lr, ror #31

004066f4 <.LBE579>:
  4066f4:	ea87 0c0b 	eor.w	ip, r7, fp
  4066f8:	ea8c 0c0a 	eor.w	ip, ip, sl
  4066fc:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
  406700:	f10e 4edd 	add.w	lr, lr, #1853882368	; 0x6e800000
  406704:	f50e 0eb3 	add.w	lr, lr, #5865472	; 0x598000
  406708:	f50e 4ed7 	add.w	lr, lr, #27520	; 0x6b80
  40670c:	f10e 0e21 	add.w	lr, lr, #33	; 0x21
  406710:	44f0      	add	r8, lr
  406712:	44c4      	add	ip, r8
  406714:	eb0c 6cf9 	add.w	ip, ip, r9, ror #27

00406718 <.LBB581>:
  406718:	ea4f 0aba 	mov.w	sl, sl, ror #2

0040671c <.LBE581>:
        R2(d,e,a,b,c,32); R2(c,d,e,a,b,33); R2(b,c,d,e,a,34); R2(a,b,c,d,e,35);
  40671c:	9b01      	ldr	r3, [sp, #4]
  40671e:	469e      	mov	lr, r3
  406720:	4633      	mov	r3, r6
  406722:	ea8e 0e06 	eor.w	lr, lr, r6
  406726:	9a06      	ldr	r2, [sp, #24]
  406728:	ea8e 0e02 	eor.w	lr, lr, r2
  40672c:	990a      	ldr	r1, [sp, #40]	; 0x28
  40672e:	ea8e 0e01 	eor.w	lr, lr, r1

00406732 <.LBB583>:
  406732:	ea4f 76fe 	mov.w	r6, lr, ror #31

00406736 <.LBE583>:
  406736:	ea8b 080a 	eor.w	r8, fp, sl
  40673a:	ea88 0809 	eor.w	r8, r8, r9
  40673e:	960b      	str	r6, [sp, #44]	; 0x2c
  406740:	f8df e4e0 	ldr.w	lr, [pc, #1248]	; 406c24 <.LBE673+0x14>
  406744:	44b6      	add	lr, r6
  406746:	4477      	add	r7, lr
  406748:	44b8      	add	r8, r7
  40674a:	eb08 68fc 	add.w	r8, r8, ip, ror #27

0040674e <.LBB585>:
  40674e:	ea4f 09b9 	mov.w	r9, r9, ror #2

00406752 <.LBE585>:
  406752:	ea84 0705 	eor.w	r7, r4, r5
  406756:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  406758:	4057      	eors	r7, r2
  40675a:	9e0e      	ldr	r6, [sp, #56]	; 0x38

0040675c <.LVL121>:
  40675c:	4077      	eors	r7, r6

0040675e <.LBB587>:
  40675e:	ea4f 77f7 	mov.w	r7, r7, ror #31

00406762 <.LBE587>:
  406762:	ea8a 0e09 	eor.w	lr, sl, r9
  406766:	ea8e 0e0c 	eor.w	lr, lr, ip
  40676a:	970c      	str	r7, [sp, #48]	; 0x30
  40676c:	f107 47dd 	add.w	r7, r7, #1853882368	; 0x6e800000

00406770 <.LVL124>:
  406770:	f507 07b3 	add.w	r7, r7, #5865472	; 0x598000
  406774:	f507 47d7 	add.w	r7, r7, #27520	; 0x6b80
  406778:	3721      	adds	r7, #33	; 0x21
  40677a:	44bb      	add	fp, r7
  40677c:	44de      	add	lr, fp
  40677e:	eb0e 6ef8 	add.w	lr, lr, r8, ror #27

00406782 <.LBB589>:
  406782:	ea4f 0cbc 	mov.w	ip, ip, ror #2

00406786 <.LBE589>:
  406786:	9f02      	ldr	r7, [sp, #8]
  406788:	405f      	eors	r7, r3
  40678a:	9c07      	ldr	r4, [sp, #28]
  40678c:	4067      	eors	r7, r4
  40678e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  406790:	4067      	eors	r7, r4

00406792 <.LBB591>:
  406792:	ea4f 73f7 	mov.w	r3, r7, ror #31

00406796 <.LVL128>:
  406796:	461c      	mov	r4, r3

00406798 <.LBE591>:
  406798:	ea89 070c 	eor.w	r7, r9, ip
  40679c:	ea87 0708 	eor.w	r7, r7, r8
  4067a0:	f103 4bdd 	add.w	fp, r3, #1853882368	; 0x6e800000
  4067a4:	f50b 0bb3 	add.w	fp, fp, #5865472	; 0x598000
  4067a8:	f50b 4bd7 	add.w	fp, fp, #27520	; 0x6b80
  4067ac:	f10b 0b21 	add.w	fp, fp, #33	; 0x21
  4067b0:	44da      	add	sl, fp
  4067b2:	4457      	add	r7, sl
  4067b4:	eb07 67fe 	add.w	r7, r7, lr, ror #27

004067b8 <.LBB593>:
  4067b8:	ea4f 08b8 	mov.w	r8, r8, ror #2

004067bc <.LBE593>:
  4067bc:	9e03      	ldr	r6, [sp, #12]
  4067be:	ea85 0a06 	eor.w	sl, r5, r6
  4067c2:	9b08      	ldr	r3, [sp, #32]

004067c4 <.LVL132>:
  4067c4:	ea8a 0a03 	eor.w	sl, sl, r3
  4067c8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c

004067ca <.LVL133>:
  4067ca:	ea8a 0a05 	eor.w	sl, sl, r5

004067ce <.LBB595>:
  4067ce:	ea4f 7afa 	mov.w	sl, sl, ror #31

004067d2 <.LBE595>:
  4067d2:	ea8c 0b08 	eor.w	fp, ip, r8
  4067d6:	ea8b 0b0e 	eor.w	fp, fp, lr
  4067da:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  4067de:	f10a 4add 	add.w	sl, sl, #1853882368	; 0x6e800000

004067e2 <.LVL136>:
  4067e2:	f50a 0ab3 	add.w	sl, sl, #5865472	; 0x598000
  4067e6:	f50a 4ad7 	add.w	sl, sl, #27520	; 0x6b80
  4067ea:	f10a 0a21 	add.w	sl, sl, #33	; 0x21
  4067ee:	44d1      	add	r9, sl
  4067f0:	44cb      	add	fp, r9
  4067f2:	eb0b 6bf7 	add.w	fp, fp, r7, ror #27

004067f6 <.LBB597>:
  4067f6:	ea4f 0ebe 	mov.w	lr, lr, ror #2

004067fa <.LBE597>:
        R2(e,a,b,c,d,36); R2(d,e,a,b,c,37); R2(c,d,e,a,b,38); R2(b,c,d,e,a,39);
  4067fa:	9e02      	ldr	r6, [sp, #8]
  4067fc:	9d04      	ldr	r5, [sp, #16]
  4067fe:	406e      	eors	r6, r5
  406800:	9d09      	ldr	r5, [sp, #36]	; 0x24
  406802:	406e      	eors	r6, r5
  406804:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  406806:	406e      	eors	r6, r5

00406808 <.LBB599>:
  406808:	ea4f 73f6 	mov.w	r3, r6, ror #31

0040680c <.LBE599>:
  40680c:	ea88 060e 	eor.w	r6, r8, lr
  406810:	407e      	eors	r6, r7
  406812:	9302      	str	r3, [sp, #8]
  406814:	f103 49dd 	add.w	r9, r3, #1853882368	; 0x6e800000
  406818:	f509 09b3 	add.w	r9, r9, #5865472	; 0x598000
  40681c:	f509 49d7 	add.w	r9, r9, #27520	; 0x6b80
  406820:	f109 0921 	add.w	r9, r9, #33	; 0x21
  406824:	44cc      	add	ip, r9
  406826:	4466      	add	r6, ip
  406828:	eb06 66fb 	add.w	r6, r6, fp, ror #27

0040682c <.LBB601>:
  40682c:	ea4f 07b7 	mov.w	r7, r7, ror #2

00406830 <.LBE601>:
  406830:	9d03      	ldr	r5, [sp, #12]
  406832:	9b05      	ldr	r3, [sp, #20]

00406834 <.LVL143>:
  406834:	405d      	eors	r5, r3
  406836:	404d      	eors	r5, r1
  406838:	9410      	str	r4, [sp, #64]	; 0x40
  40683a:	4065      	eors	r5, r4

0040683c <.LBB603>:
  40683c:	ea4f 71f5 	mov.w	r1, r5, ror #31

00406840 <.LBE603>:
  406840:	ea8e 0507 	eor.w	r5, lr, r7
  406844:	ea85 050b 	eor.w	r5, r5, fp
  406848:	9103      	str	r1, [sp, #12]
  40684a:	f101 4cdd 	add.w	ip, r1, #1853882368	; 0x6e800000
  40684e:	f50c 0cb3 	add.w	ip, ip, #5865472	; 0x598000
  406852:	f50c 4cd7 	add.w	ip, ip, #27520	; 0x6b80
  406856:	f10c 0c21 	add.w	ip, ip, #33	; 0x21
  40685a:	44e0      	add	r8, ip
  40685c:	44a8      	add	r8, r5
  40685e:	eb08 65f6 	add.w	r5, r8, r6, ror #27

00406862 <.LBB605>:
  406862:	ea4f 0bbb 	mov.w	fp, fp, ror #2

00406866 <.LBE605>:
  406866:	9c04      	ldr	r4, [sp, #16]

00406868 <.LVL148>:
  406868:	9b06      	ldr	r3, [sp, #24]
  40686a:	405c      	eors	r4, r3
  40686c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40686e:	405c      	eors	r4, r3
  406870:	9911      	ldr	r1, [sp, #68]	; 0x44

00406872 <.LVL149>:
  406872:	404c      	eors	r4, r1

00406874 <.LBB607>:
  406874:	ea4f 74f4 	mov.w	r4, r4, ror #31

00406878 <.LVL151>:
  406878:	4621      	mov	r1, r4

0040687a <.LBE607>:
  40687a:	ea87 040b 	eor.w	r4, r7, fp
  40687e:	4074      	eors	r4, r6
  406880:	9112      	str	r1, [sp, #72]	; 0x48
  406882:	f101 4cdd 	add.w	ip, r1, #1853882368	; 0x6e800000
  406886:	f50c 0cb3 	add.w	ip, ip, #5865472	; 0x598000
  40688a:	f50c 4cd7 	add.w	ip, ip, #27520	; 0x6b80
  40688e:	f10c 0c21 	add.w	ip, ip, #33	; 0x21
  406892:	44e6      	add	lr, ip
  406894:	44a6      	add	lr, r4
  406896:	eb0e 64f5 	add.w	r4, lr, r5, ror #27

0040689a <.LBB609>:
  40689a:	ea4f 06b6 	mov.w	r6, r6, ror #2

0040689e <.LBE609>:
  40689e:	9905      	ldr	r1, [sp, #20]

004068a0 <.LVL155>:
  4068a0:	4051      	eors	r1, r2
  4068a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4068a4:	4051      	eors	r1, r2
  4068a6:	9a02      	ldr	r2, [sp, #8]
  4068a8:	4051      	eors	r1, r2

004068aa <.LBB611>:
  4068aa:	ea4f 72f1 	mov.w	r2, r1, ror #31

004068ae <.LBE611>:
  4068ae:	ea8b 0106 	eor.w	r1, fp, r6
  4068b2:	4069      	eors	r1, r5
  4068b4:	9204      	str	r2, [sp, #16]
  4068b6:	4bdb      	ldr	r3, [pc, #876]	; (406c24 <.LBE673+0x14>)
  4068b8:	18d3      	adds	r3, r2, r3
  4068ba:	441f      	add	r7, r3
  4068bc:	440f      	add	r7, r1
  4068be:	eb07 61f4 	add.w	r1, r7, r4, ror #27

004068c2 <.LBB613>:
  4068c2:	ea4f 05b5 	mov.w	r5, r5, ror #2

004068c6 <.LBE613>:

        R3(a,b,c,d,e,40); R3(e,a,b,c,d,41); R3(d,e,a,b,c,42); R3(c,d,e,a,b,43);
  4068c6:	9a07      	ldr	r2, [sp, #28]

004068c8 <.LVL160>:
  4068c8:	9b06      	ldr	r3, [sp, #24]
  4068ca:	4053      	eors	r3, r2
  4068cc:	461a      	mov	r2, r3
  4068ce:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  4068d0:	407a      	eors	r2, r7
  4068d2:	9f03      	ldr	r7, [sp, #12]
  4068d4:	407a      	eors	r2, r7

004068d6 <.LBB615>:
  4068d6:	ea4f 77f2 	mov.w	r7, r2, ror #31

004068da <.LBE615>:
  4068da:	ea44 0205 	orr.w	r2, r4, r5
  4068de:	4032      	ands	r2, r6
  4068e0:	ea04 0305 	and.w	r3, r4, r5
  4068e4:	431a      	orrs	r2, r3
  4068e6:	4bd0      	ldr	r3, [pc, #832]	; (406c28 <.LBE673+0x18>)
  4068e8:	9713      	str	r7, [sp, #76]	; 0x4c
  4068ea:	441f      	add	r7, r3
  4068ec:	44bb      	add	fp, r7
  4068ee:	4493      	add	fp, r2
  4068f0:	eb0b 62f1 	add.w	r2, fp, r1, ror #27

004068f4 <.LBB617>:
  4068f4:	ea4f 09b4 	mov.w	r9, r4, ror #2

004068f8 <.LBE617>:
  4068f8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  4068fa:	46be      	mov	lr, r7
  4068fc:	9f08      	ldr	r7, [sp, #32]
  4068fe:	ea8e 0707 	eor.w	r7, lr, r7
  406902:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406904:	4067      	eors	r7, r4
  406906:	9c12      	ldr	r4, [sp, #72]	; 0x48
  406908:	4067      	eors	r7, r4

0040690a <.LBB619>:
  40690a:	ea4f 74f7 	mov.w	r4, r7, ror #31

0040690e <.LBE619>:
  40690e:	ea41 0809 	orr.w	r8, r1, r9
  406912:	ea08 0705 	and.w	r7, r8, r5
  406916:	ea01 0809 	and.w	r8, r1, r9
  40691a:	ea47 0808 	orr.w	r8, r7, r8
  40691e:	940d      	str	r4, [sp, #52]	; 0x34
  406920:	18e7      	adds	r7, r4, r3
  406922:	443e      	add	r6, r7
  406924:	4446      	add	r6, r8
  406926:	eb06 68f2 	add.w	r8, r6, r2, ror #27

0040692a <.LBB621>:
  40692a:	ea4f 01b1 	mov.w	r1, r1, ror #2

0040692e <.LBE621>:
  40692e:	9e07      	ldr	r6, [sp, #28]
  406930:	46b6      	mov	lr, r6
  406932:	9e09      	ldr	r6, [sp, #36]	; 0x24
  406934:	ea8e 0706 	eor.w	r7, lr, r6
  406938:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40693a:	4067      	eors	r7, r4
  40693c:	9e04      	ldr	r6, [sp, #16]
  40693e:	4077      	eors	r7, r6

00406940 <.LBB623>:
  406940:	ea4f 76f7 	mov.w	r6, r7, ror #31
  406944:	4637      	mov	r7, r6

00406946 <.LBE623>:
  406946:	ea42 0e01 	orr.w	lr, r2, r1
  40694a:	ea0e 0609 	and.w	r6, lr, r9
  40694e:	ea02 0e01 	and.w	lr, r2, r1
  406952:	ea46 0e0e 	orr.w	lr, r6, lr
  406956:	9714      	str	r7, [sp, #80]	; 0x50
  406958:	463e      	mov	r6, r7
  40695a:	441e      	add	r6, r3
  40695c:	4435      	add	r5, r6
  40695e:	4475      	add	r5, lr
  406960:	eb05 65f8 	add.w	r5, r5, r8, ror #27

00406964 <.LBB625>:
  406964:	ea4f 02b2 	mov.w	r2, r2, ror #2

00406968 <.LBE625>:
  406968:	9f08      	ldr	r7, [sp, #32]
  40696a:	46be      	mov	lr, r7
  40696c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40696e:	ea8e 0b07 	eor.w	fp, lr, r7
  406972:	9f11      	ldr	r7, [sp, #68]	; 0x44
  406974:	ea8b 0b07 	eor.w	fp, fp, r7
  406978:	9e13      	ldr	r6, [sp, #76]	; 0x4c
  40697a:	ea8b 0b06 	eor.w	fp, fp, r6

0040697e <.LBB627>:
  40697e:	ea4f 7efb 	mov.w	lr, fp, ror #31

00406982 <.LBE627>:
  406982:	ea48 0c02 	orr.w	ip, r8, r2
  406986:	ea0c 0601 	and.w	r6, ip, r1
  40698a:	ea08 0c02 	and.w	ip, r8, r2
  40698e:	ea46 0c0c 	orr.w	ip, r6, ip
  406992:	f8cd e054 	str.w	lr, [sp, #84]	; 0x54
  406996:	4676      	mov	r6, lr
  406998:	441e      	add	r6, r3
  40699a:	eb09 0406 	add.w	r4, r9, r6
  40699e:	4464      	add	r4, ip
  4069a0:	eb04 6cf5 	add.w	ip, r4, r5, ror #27

004069a4 <.LBB629>:
  4069a4:	ea4f 08b8 	mov.w	r8, r8, ror #2

004069a8 <.LBE629>:
        R3(b,c,d,e,a,44); R3(a,b,c,d,e,45); R3(e,a,b,c,d,46); R3(d,e,a,b,c,47);
  4069a8:	9e09      	ldr	r6, [sp, #36]	; 0x24
  4069aa:	46b6      	mov	lr, r6
  4069ac:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  4069ae:	ea8e 0e06 	eor.w	lr, lr, r6
  4069b2:	9f02      	ldr	r7, [sp, #8]
  4069b4:	ea8e 0e07 	eor.w	lr, lr, r7
  4069b8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  4069ba:	ea8e 0e04 	eor.w	lr, lr, r4

004069be <.LBB631>:
  4069be:	ea4f 7efe 	mov.w	lr, lr, ror #31

004069c2 <.LVL178>:
  4069c2:	4677      	mov	r7, lr

004069c4 <.LBE631>:
  4069c4:	ea45 0e08 	orr.w	lr, r5, r8
  4069c8:	ea0e 0402 	and.w	r4, lr, r2
  4069cc:	ea05 0e08 	and.w	lr, r5, r8
  4069d0:	ea44 0e0e 	orr.w	lr, r4, lr
  4069d4:	9705      	str	r7, [sp, #20]
  4069d6:	463c      	mov	r4, r7
  4069d8:	441c      	add	r4, r3
  4069da:	4421      	add	r1, r4
  4069dc:	4471      	add	r1, lr
  4069de:	eb01 61fc 	add.w	r1, r1, ip, ror #27

004069e2 <.LBB633>:
  4069e2:	ea4f 05b5 	mov.w	r5, r5, ror #2

004069e6 <.LBE633>:
  4069e6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4069e8:	46be      	mov	lr, r7
  4069ea:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  4069ec:	ea8e 0907 	eor.w	r9, lr, r7
  4069f0:	9c03      	ldr	r4, [sp, #12]
  4069f2:	ea89 0904 	eor.w	r9, r9, r4
  4069f6:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4069f8:	ea89 0904 	eor.w	r9, r9, r4

004069fc <.LBB635>:
  4069fc:	ea4f 7ef9 	mov.w	lr, r9, ror #31
  406a00:	f8cd e004 	str.w	lr, [sp, #4]

00406a04 <.LBE635>:
  406a04:	ea4c 0a05 	orr.w	sl, ip, r5
  406a08:	ea0a 0408 	and.w	r4, sl, r8
  406a0c:	ea0c 0a05 	and.w	sl, ip, r5
  406a10:	ea44 0a0a 	orr.w	sl, r4, sl
  406a14:	4674      	mov	r4, lr
  406a16:	441c      	add	r4, r3
  406a18:	4422      	add	r2, r4
  406a1a:	4492      	add	sl, r2
  406a1c:	eb0a 6af1 	add.w	sl, sl, r1, ror #27

00406a20 <.LBB637>:
  406a20:	ea4f 0cbc 	mov.w	ip, ip, ror #2

00406a24 <.LBE637>:
  406a24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406a26:	4691      	mov	r9, r2
  406a28:	4056      	eors	r6, r2
  406a2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  406a2c:	4056      	eors	r6, r2
  406a2e:	9a15      	ldr	r2, [sp, #84]	; 0x54
  406a30:	4056      	eors	r6, r2

00406a32 <.LBB639>:
  406a32:	ea4f 76f6 	mov.w	r6, r6, ror #31

00406a36 <.LVL187>:
  406a36:	4634      	mov	r4, r6

00406a38 <.LBE639>:
  406a38:	ea41 060c 	orr.w	r6, r1, ip
  406a3c:	ea06 0205 	and.w	r2, r6, r5
  406a40:	ea01 060c 	and.w	r6, r1, ip
  406a44:	4316      	orrs	r6, r2
  406a46:	940e      	str	r4, [sp, #56]	; 0x38
  406a48:	4622      	mov	r2, r4
  406a4a:	441a      	add	r2, r3
  406a4c:	4490      	add	r8, r2
  406a4e:	4446      	add	r6, r8
  406a50:	eb06 66fa 	add.w	r6, r6, sl, ror #27

00406a54 <.LBB641>:
  406a54:	ea4f 01b1 	mov.w	r1, r1, ror #2

00406a58 <.LBE641>:
  406a58:	463c      	mov	r4, r7
  406a5a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406a5c:	ea84 0207 	eor.w	r2, r4, r7
  406a60:	9c04      	ldr	r4, [sp, #16]
  406a62:	4062      	eors	r2, r4
  406a64:	9c05      	ldr	r4, [sp, #20]
  406a66:	4062      	eors	r2, r4

00406a68 <.LBB643>:
  406a68:	ea4f 72f2 	mov.w	r2, r2, ror #31

00406a6c <.LVL192>:
  406a6c:	4617      	mov	r7, r2

00406a6e <.LBE643>:
  406a6e:	ea4a 0201 	orr.w	r2, sl, r1
  406a72:	ea02 040c 	and.w	r4, r2, ip
  406a76:	ea0a 0201 	and.w	r2, sl, r1
  406a7a:	4322      	orrs	r2, r4
  406a7c:	9706      	str	r7, [sp, #24]
  406a7e:	18fc      	adds	r4, r7, r3
  406a80:	4425      	add	r5, r4
  406a82:	4415      	add	r5, r2
  406a84:	eb05 65f6 	add.w	r5, r5, r6, ror #27

00406a88 <.LBB645>:
  406a88:	ea4f 0aba 	mov.w	sl, sl, ror #2

00406a8c <.LBE645>:
        R3(c,d,e,a,b,48); R3(b,c,d,e,a,49); R3(a,b,c,d,e,50); R3(e,a,b,c,d,51);
  406a8c:	9c10      	ldr	r4, [sp, #64]	; 0x40
  406a8e:	46a0      	mov	r8, r4
  406a90:	ea89 0204 	eor.w	r2, r9, r4
  406a94:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  406a96:	4062      	eors	r2, r4
  406a98:	9f01      	ldr	r7, [sp, #4]
  406a9a:	407a      	eors	r2, r7

00406a9c <.LBB647>:
  406a9c:	ea4f 72f2 	mov.w	r2, r2, ror #31

00406aa0 <.LBE647>:
  406aa0:	ea46 040a 	orr.w	r4, r6, sl
  406aa4:	ea04 0901 	and.w	r9, r4, r1
  406aa8:	ea06 040a 	and.w	r4, r6, sl
  406aac:	ea49 0404 	orr.w	r4, r9, r4
  406ab0:	9207      	str	r2, [sp, #28]
  406ab2:	eb02 0903 	add.w	r9, r2, r3
  406ab6:	44cc      	add	ip, r9
  406ab8:	eb04 090c 	add.w	r9, r4, ip
  406abc:	eb09 69f5 	add.w	r9, r9, r5, ror #27

00406ac0 <.LBB649>:
  406ac0:	ea4f 06b6 	mov.w	r6, r6, ror #2

00406ac4 <.LBE649>:
  406ac4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406ac6:	46be      	mov	lr, r7
  406ac8:	9f11      	ldr	r7, [sp, #68]	; 0x44
  406aca:	ea8e 0207 	eor.w	r2, lr, r7

00406ace <.LVL200>:
  406ace:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  406ad0:	4062      	eors	r2, r4
  406ad2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  406ad4:	4062      	eors	r2, r4

00406ad6 <.LBB651>:
  406ad6:	ea4f 72f2 	mov.w	r2, r2, ror #31

00406ada <.LVL202>:
  406ada:	4614      	mov	r4, r2

00406adc <.LBE651>:
  406adc:	ea45 0e06 	orr.w	lr, r5, r6
  406ae0:	ea0e 020a 	and.w	r2, lr, sl

00406ae4 <.LVL204>:
  406ae4:	ea05 0e06 	and.w	lr, r5, r6
  406ae8:	ea42 0e0e 	orr.w	lr, r2, lr
  406aec:	940f      	str	r4, [sp, #60]	; 0x3c
  406aee:	4622      	mov	r2, r4
  406af0:	441a      	add	r2, r3
  406af2:	4411      	add	r1, r2
  406af4:	4471      	add	r1, lr
  406af6:	eb01 6ef9 	add.w	lr, r1, r9, ror #27

00406afa <.LBB653>:
  406afa:	ea4f 05b5 	mov.w	r5, r5, ror #2

00406afe <.LBE653>:
  406afe:	9902      	ldr	r1, [sp, #8]
  406b00:	ea88 0401 	eor.w	r4, r8, r1

00406b04 <.LVL207>:
  406b04:	9a14      	ldr	r2, [sp, #80]	; 0x50
  406b06:	4054      	eors	r4, r2
  406b08:	9906      	ldr	r1, [sp, #24]
  406b0a:	404c      	eors	r4, r1

00406b0c <.LBB655>:
  406b0c:	ea4f 71f4 	mov.w	r1, r4, ror #31

00406b10 <.LBE655>:
  406b10:	ea49 0805 	orr.w	r8, r9, r5
  406b14:	ea08 0206 	and.w	r2, r8, r6
  406b18:	ea09 0805 	and.w	r8, r9, r5
  406b1c:	ea42 0808 	orr.w	r8, r2, r8
  406b20:	9108      	str	r1, [sp, #32]
  406b22:	18ca      	adds	r2, r1, r3
  406b24:	4492      	add	sl, r2
  406b26:	44d0      	add	r8, sl
  406b28:	eb08 68fe 	add.w	r8, r8, lr, ror #27

00406b2c <.LBB657>:
  406b2c:	ea4f 04b9 	mov.w	r4, r9, ror #2

00406b30 <.LBE657>:
  406b30:	9903      	ldr	r1, [sp, #12]

00406b32 <.LVL212>:
  406b32:	4689      	mov	r9, r1
  406b34:	4079      	eors	r1, r7
  406b36:	9a15      	ldr	r2, [sp, #84]	; 0x54
  406b38:	4051      	eors	r1, r2
  406b3a:	9a07      	ldr	r2, [sp, #28]
  406b3c:	4051      	eors	r1, r2

00406b3e <.LBB659>:
  406b3e:	ea4f 77f1 	mov.w	r7, r1, ror #31

00406b42 <.LBE659>:
  406b42:	ea4e 0b04 	orr.w	fp, lr, r4
  406b46:	ea0b 0205 	and.w	r2, fp, r5
  406b4a:	ea0e 0b04 	and.w	fp, lr, r4
  406b4e:	ea42 0b0b 	orr.w	fp, r2, fp
  406b52:	9709      	str	r7, [sp, #36]	; 0x24
  406b54:	18fa      	adds	r2, r7, r3
  406b56:	4416      	add	r6, r2
  406b58:	44b3      	add	fp, r6
  406b5a:	eb0b 6bf8 	add.w	fp, fp, r8, ror #27

00406b5e <.LBB661>:
  406b5e:	ea4f 01be 	mov.w	r1, lr, ror #2

00406b62 <.LBE661>:
        R3(d,e,a,b,c,52); R3(c,d,e,a,b,53); R3(b,c,d,e,a,54); R3(a,b,c,d,e,55);
  406b62:	9f02      	ldr	r7, [sp, #8]

00406b64 <.LVL217>:
  406b64:	46be      	mov	lr, r7
  406b66:	9f12      	ldr	r7, [sp, #72]	; 0x48
  406b68:	ea8e 0c07 	eor.w	ip, lr, r7
  406b6c:	9e05      	ldr	r6, [sp, #20]
  406b6e:	ea8c 0c06 	eor.w	ip, ip, r6
  406b72:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  406b74:	ea8c 0c06 	eor.w	ip, ip, r6

00406b78 <.LBB663>:
  406b78:	ea4f 7efc 	mov.w	lr, ip, ror #31
  406b7c:	4676      	mov	r6, lr

00406b7e <.LBE663>:
  406b7e:	ea48 0c01 	orr.w	ip, r8, r1
  406b82:	ea0c 0204 	and.w	r2, ip, r4
  406b86:	ea08 0c01 	and.w	ip, r8, r1
  406b8a:	ea42 0c0c 	orr.w	ip, r2, ip
  406b8e:	f8cd e008 	str.w	lr, [sp, #8]
  406b92:	18f2      	adds	r2, r6, r3
  406b94:	4415      	add	r5, r2
  406b96:	44ac      	add	ip, r5
  406b98:	eb0c 6cfb 	add.w	ip, ip, fp, ror #27

00406b9c <.LBB665>:
  406b9c:	ea4f 08b8 	mov.w	r8, r8, ror #2

00406ba0 <.LBE665>:
  406ba0:	464a      	mov	r2, r9
  406ba2:	9d04      	ldr	r5, [sp, #16]
  406ba4:	ea82 0e05 	eor.w	lr, r2, r5
  406ba8:	9e01      	ldr	r6, [sp, #4]

00406baa <.LVL222>:
  406baa:	ea8e 0e06 	eor.w	lr, lr, r6
  406bae:	9d08      	ldr	r5, [sp, #32]
  406bb0:	ea8e 0e05 	eor.w	lr, lr, r5

00406bb4 <.LBB667>:
  406bb4:	ea4f 7efe 	mov.w	lr, lr, ror #31

00406bb8 <.LVL224>:
  406bb8:	4675      	mov	r5, lr

00406bba <.LBE667>:
  406bba:	ea4b 0908 	orr.w	r9, fp, r8
  406bbe:	ea09 0201 	and.w	r2, r9, r1
  406bc2:	ea0b 0908 	and.w	r9, fp, r8
  406bc6:	ea42 0909 	orr.w	r9, r2, r9
  406bca:	f8cd e00c 	str.w	lr, [sp, #12]
  406bce:	18ea      	adds	r2, r5, r3
  406bd0:	4414      	add	r4, r2
  406bd2:	44a1      	add	r9, r4
  406bd4:	eb09 69fc 	add.w	r9, r9, ip, ror #27

00406bd8 <.LBB669>:
  406bd8:	ea4f 0bbb 	mov.w	fp, fp, ror #2

00406bdc <.LBE669>:
  406bdc:	463e      	mov	r6, r7
  406bde:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  406be0:	ea86 0704 	eor.w	r7, r6, r4
  406be4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  406be6:	4077      	eors	r7, r6
  406be8:	9d09      	ldr	r5, [sp, #36]	; 0x24

00406bea <.LVL228>:
  406bea:	406f      	eors	r7, r5

00406bec <.LBB671>:
  406bec:	ea4f 77f7 	mov.w	r7, r7, ror #31

00406bf0 <.LBE671>:
  406bf0:	ea4c 0e0b 	orr.w	lr, ip, fp

00406bf4 <.LVL231>:
  406bf4:	ea0e 0208 	and.w	r2, lr, r8
  406bf8:	ea0c 0e0b 	and.w	lr, ip, fp
  406bfc:	ea42 0e0e 	orr.w	lr, r2, lr
  406c00:	970a      	str	r7, [sp, #40]	; 0x28
  406c02:	18fa      	adds	r2, r7, r3
  406c04:	4411      	add	r1, r2
  406c06:	448e      	add	lr, r1
  406c08:	eb0e 6ef9 	add.w	lr, lr, r9, ror #27

00406c0c <.LBB673>:
  406c0c:	ea4f 0cbc 	mov.w	ip, ip, ror #2

00406c10 <.LBE673>:
  406c10:	9d04      	ldr	r5, [sp, #16]
  406c12:	46aa      	mov	sl, r5
  406c14:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  406c16:	ea8a 0205 	eor.w	r2, sl, r5
  406c1a:	9906      	ldr	r1, [sp, #24]
  406c1c:	404a      	eors	r2, r1
  406c1e:	9e02      	ldr	r6, [sp, #8]
  406c20:	4072      	eors	r2, r6
  406c22:	e003      	b.n	406c2c <.LBB675>
  406c24:	6ed9eba1 	.word	0x6ed9eba1
  406c28:	8f1bbcdc 	.word	0x8f1bbcdc

00406c2c <.LBB675>:
  406c2c:	ea4f 71f2 	mov.w	r1, r2, ror #31
  406c30:	460e      	mov	r6, r1

00406c32 <.LBE675>:
  406c32:	ea49 020c 	orr.w	r2, r9, ip
  406c36:	ea02 010b 	and.w	r1, r2, fp

00406c3a <.LVL236>:
  406c3a:	ea09 020c 	and.w	r2, r9, ip
  406c3e:	430a      	orrs	r2, r1
  406c40:	9604      	str	r6, [sp, #16]
  406c42:	4631      	mov	r1, r6
  406c44:	4419      	add	r1, r3
  406c46:	4488      	add	r8, r1
  406c48:	4442      	add	r2, r8
  406c4a:	eb02 62fe 	add.w	r2, r2, lr, ror #27

00406c4e <.LBB677>:
  406c4e:	ea4f 09b9 	mov.w	r9, r9, ror #2

00406c52 <.LBE677>:
        R3(e,a,b,c,d,56); R3(d,e,a,b,c,57); R3(c,d,e,a,b,58); R3(b,c,d,e,a,59);
  406c52:	9f14      	ldr	r7, [sp, #80]	; 0x50

00406c54 <.LVL239>:
  406c54:	ea84 0607 	eor.w	r6, r4, r7

00406c58 <.LVL240>:
  406c58:	9c07      	ldr	r4, [sp, #28]
  406c5a:	4066      	eors	r6, r4
  406c5c:	9c03      	ldr	r4, [sp, #12]
  406c5e:	4066      	eors	r6, r4

00406c60 <.LBB679>:
  406c60:	ea4f 74f6 	mov.w	r4, r6, ror #31

00406c64 <.LBE679>:
  406c64:	ea4e 0609 	orr.w	r6, lr, r9
  406c68:	ea06 010c 	and.w	r1, r6, ip
  406c6c:	ea0e 0609 	and.w	r6, lr, r9
  406c70:	430e      	orrs	r6, r1
  406c72:	940b      	str	r4, [sp, #44]	; 0x2c
  406c74:	18e1      	adds	r1, r4, r3
  406c76:	448b      	add	fp, r1
  406c78:	445e      	add	r6, fp
  406c7a:	eb06 66f2 	add.w	r6, r6, r2, ror #27

00406c7e <.LBB681>:
  406c7e:	ea4f 0ebe 	mov.w	lr, lr, ror #2

00406c82 <.LBE681>:
  406c82:	9c15      	ldr	r4, [sp, #84]	; 0x54
  406c84:	4065      	eors	r5, r4
  406c86:	990f      	ldr	r1, [sp, #60]	; 0x3c
  406c88:	404d      	eors	r5, r1
  406c8a:	990a      	ldr	r1, [sp, #40]	; 0x28
  406c8c:	404d      	eors	r5, r1

00406c8e <.LBB683>:
  406c8e:	ea4f 75f5 	mov.w	r5, r5, ror #31

00406c92 <.LVL246>:
  406c92:	950c      	str	r5, [sp, #48]	; 0x30

00406c94 <.LBE683>:
  406c94:	ea42 050e 	orr.w	r5, r2, lr
  406c98:	ea05 0109 	and.w	r1, r5, r9
  406c9c:	ea02 050e 	and.w	r5, r2, lr
  406ca0:	430d      	orrs	r5, r1
  406ca2:	990c      	ldr	r1, [sp, #48]	; 0x30
  406ca4:	4419      	add	r1, r3
  406ca6:	448c      	add	ip, r1
  406ca8:	4465      	add	r5, ip
  406caa:	eb05 65f6 	add.w	r5, r5, r6, ror #27

00406cae <.LBB685>:
  406cae:	ea4f 02b2 	mov.w	r2, r2, ror #2

00406cb2 <.LBE685>:
  406cb2:	4639      	mov	r1, r7
  406cb4:	9f05      	ldr	r7, [sp, #20]
  406cb6:	404f      	eors	r7, r1
  406cb8:	9908      	ldr	r1, [sp, #32]
  406cba:	404f      	eors	r7, r1
  406cbc:	9904      	ldr	r1, [sp, #16]
  406cbe:	404f      	eors	r7, r1

00406cc0 <.LBB687>:
  406cc0:	ea4f 77f7 	mov.w	r7, r7, ror #31

00406cc4 <.LBE687>:
  406cc4:	ea46 0a02 	orr.w	sl, r6, r2
  406cc8:	ea0a 010e 	and.w	r1, sl, lr
  406ccc:	ea06 0a02 	and.w	sl, r6, r2
  406cd0:	ea41 0a0a 	orr.w	sl, r1, sl
  406cd4:	970d      	str	r7, [sp, #52]	; 0x34
  406cd6:	18f9      	adds	r1, r7, r3
  406cd8:	4489      	add	r9, r1
  406cda:	44ca      	add	sl, r9
  406cdc:	eb0a 6af5 	add.w	sl, sl, r5, ror #27

00406ce0 <.LBB689>:
  406ce0:	ea4f 06b6 	mov.w	r6, r6, ror #2

00406ce4 <.LBE689>:
  406ce4:	4621      	mov	r1, r4
  406ce6:	9c01      	ldr	r4, [sp, #4]
  406ce8:	ea81 0b04 	eor.w	fp, r1, r4
  406cec:	9c09      	ldr	r4, [sp, #36]	; 0x24
  406cee:	ea8b 0b04 	eor.w	fp, fp, r4
  406cf2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  406cf4:	ea8b 0b04 	eor.w	fp, fp, r4

00406cf8 <.LBB691>:
  406cf8:	ea4f 7cfb 	mov.w	ip, fp, ror #31

00406cfc <.LBE691>:
  406cfc:	ea45 0106 	orr.w	r1, r5, r6
  406d00:	4011      	ands	r1, r2
  406d02:	ea05 0806 	and.w	r8, r5, r6
  406d06:	ea41 0808 	orr.w	r8, r1, r8
  406d0a:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  406d0e:	4463      	add	r3, ip
  406d10:	4473      	add	r3, lr
  406d12:	4498      	add	r8, r3
  406d14:	eb08 68fa 	add.w	r8, r8, sl, ror #27

00406d18 <.LBB693>:
  406d18:	ea4f 05b5 	mov.w	r5, r5, ror #2

00406d1c <.LBE693>:

        R4(a,b,c,d,e,60); R4(e,a,b,c,d,61); R4(d,e,a,b,c,62); R4(c,d,e,a,b,63);
  406d1c:	9f05      	ldr	r7, [sp, #20]
  406d1e:	46be      	mov	lr, r7
  406d20:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  406d22:	ea8e 0307 	eor.w	r3, lr, r7
  406d26:	9c02      	ldr	r4, [sp, #8]
  406d28:	4063      	eors	r3, r4
  406d2a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406d2c:	4063      	eors	r3, r4

00406d2e <.LBB695>:
  406d2e:	ea4f 73f3 	mov.w	r3, r3, ror #31

00406d32 <.LVL259>:
  406d32:	4619      	mov	r1, r3

00406d34 <.LBE695>:
  406d34:	ea86 0405 	eor.w	r4, r6, r5
  406d38:	ea84 040a 	eor.w	r4, r4, sl
  406d3c:	4bd5      	ldr	r3, [pc, #852]	; (407094 <.LVL342+0x30>)
  406d3e:	9105      	str	r1, [sp, #20]
  406d40:	4419      	add	r1, r3
  406d42:	440a      	add	r2, r1
  406d44:	4414      	add	r4, r2
  406d46:	eb04 64f8 	add.w	r4, r4, r8, ror #27

00406d4a <.LBB697>:
  406d4a:	ea4f 0aba 	mov.w	sl, sl, ror #2

00406d4e <.LBE697>:
  406d4e:	9a01      	ldr	r2, [sp, #4]
  406d50:	9906      	ldr	r1, [sp, #24]
  406d52:	ea82 0901 	eor.w	r9, r2, r1
  406d56:	9a03      	ldr	r2, [sp, #12]
  406d58:	ea89 0902 	eor.w	r9, r9, r2
  406d5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  406d5e:	ea89 0902 	eor.w	r9, r9, r2

00406d62 <.LBB699>:
  406d62:	ea4f 7ef9 	mov.w	lr, r9, ror #31
  406d66:	4672      	mov	r2, lr

00406d68 <.LBE699>:
  406d68:	ea85 010a 	eor.w	r1, r5, sl
  406d6c:	ea81 0108 	eor.w	r1, r1, r8
  406d70:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  406d74:	441a      	add	r2, r3
  406d76:	4416      	add	r6, r2
  406d78:	4431      	add	r1, r6
  406d7a:	eb01 61f4 	add.w	r1, r1, r4, ror #27

00406d7e <.LBB701>:
  406d7e:	ea4f 08b8 	mov.w	r8, r8, ror #2

00406d82 <.LBE701>:
  406d82:	9a07      	ldr	r2, [sp, #28]
  406d84:	ea87 0602 	eor.w	r6, r7, r2
  406d88:	9f0a      	ldr	r7, [sp, #40]	; 0x28

00406d8a <.LVL267>:
  406d8a:	407e      	eors	r6, r7
  406d8c:	9f10      	ldr	r7, [sp, #64]	; 0x40
  406d8e:	407e      	eors	r6, r7

00406d90 <.LBB703>:
  406d90:	ea4f 76f6 	mov.w	r6, r6, ror #31

00406d94 <.LBE703>:
  406d94:	ea8a 0c08 	eor.w	ip, sl, r8
  406d98:	ea8c 0c04 	eor.w	ip, ip, r4
  406d9c:	9601      	str	r6, [sp, #4]
  406d9e:	18f2      	adds	r2, r6, r3
  406da0:	4415      	add	r5, r2
  406da2:	44ac      	add	ip, r5
  406da4:	eb0c 6cf1 	add.w	ip, ip, r1, ror #27

00406da8 <.LBB705>:
  406da8:	ea4f 04b4 	mov.w	r4, r4, ror #2

00406dac <.LBE705>:
  406dac:	9f06      	ldr	r7, [sp, #24]
  406dae:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  406db0:	ea87 0206 	eor.w	r2, r7, r6
  406db4:	9d04      	ldr	r5, [sp, #16]
  406db6:	406a      	eors	r2, r5
  406db8:	9d05      	ldr	r5, [sp, #20]
  406dba:	406a      	eors	r2, r5

00406dbc <.LBB707>:
  406dbc:	ea4f 75f2 	mov.w	r5, r2, ror #31

00406dc0 <.LBE707>:
  406dc0:	ea88 0e04 	eor.w	lr, r8, r4
  406dc4:	ea8e 0e01 	eor.w	lr, lr, r1
  406dc8:	9506      	str	r5, [sp, #24]
  406dca:	18ea      	adds	r2, r5, r3
  406dcc:	4492      	add	sl, r2
  406dce:	44d6      	add	lr, sl
  406dd0:	eb0e 6efc 	add.w	lr, lr, ip, ror #27

00406dd4 <.LBB709>:
  406dd4:	ea4f 01b1 	mov.w	r1, r1, ror #2

00406dd8 <.LBE709>:
        R4(b,c,d,e,a,64); R4(a,b,c,d,e,65); R4(e,a,b,c,d,66); R4(d,e,a,b,c,67);
  406dd8:	9a07      	ldr	r2, [sp, #28]
  406dda:	9f08      	ldr	r7, [sp, #32]
  406ddc:	46ba      	mov	sl, r7
  406dde:	407a      	eors	r2, r7
  406de0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  406de2:	406a      	eors	r2, r5
  406de4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  406de6:	406a      	eors	r2, r5

00406de8 <.LBB711>:
  406de8:	ea4f 72f2 	mov.w	r2, r2, ror #31

00406dec <.LBE711>:
  406dec:	ea84 0701 	eor.w	r7, r4, r1
  406df0:	ea87 070c 	eor.w	r7, r7, ip
  406df4:	9207      	str	r2, [sp, #28]
  406df6:	441a      	add	r2, r3

00406df8 <.LVL278>:
  406df8:	4490      	add	r8, r2
  406dfa:	4447      	add	r7, r8
  406dfc:	eb07 67fe 	add.w	r7, r7, lr, ror #27

00406e00 <.LBB713>:
  406e00:	ea4f 0cbc 	mov.w	ip, ip, ror #2

00406e04 <.LBE713>:
  406e04:	9a09      	ldr	r2, [sp, #36]	; 0x24
  406e06:	4072      	eors	r2, r6
  406e08:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  406e0a:	4072      	eors	r2, r6
  406e0c:	9e01      	ldr	r6, [sp, #4]
  406e0e:	4072      	eors	r2, r6

00406e10 <.LBB715>:
  406e10:	ea4f 76f2 	mov.w	r6, r2, ror #31

00406e14 <.LBE715>:
  406e14:	ea81 020c 	eor.w	r2, r1, ip
  406e18:	ea82 020e 	eor.w	r2, r2, lr
  406e1c:	960f      	str	r6, [sp, #60]	; 0x3c
  406e1e:	18f5      	adds	r5, r6, r3
  406e20:	442c      	add	r4, r5
  406e22:	4422      	add	r2, r4
  406e24:	eb02 62f7 	add.w	r2, r2, r7, ror #27

00406e28 <.LBB717>:
  406e28:	ea4f 0ebe 	mov.w	lr, lr, ror #2

00406e2c <.LBE717>:
  406e2c:	9d02      	ldr	r5, [sp, #8]
  406e2e:	ea8a 0405 	eor.w	r4, sl, r5
  406e32:	9e0d      	ldr	r6, [sp, #52]	; 0x34

00406e34 <.LVL285>:
  406e34:	4074      	eors	r4, r6
  406e36:	9d06      	ldr	r5, [sp, #24]
  406e38:	406c      	eors	r4, r5

00406e3a <.LBB719>:
  406e3a:	ea4f 74f4 	mov.w	r4, r4, ror #31

00406e3e <.LBE719>:
  406e3e:	ea8c 060e 	eor.w	r6, ip, lr
  406e42:	407e      	eors	r6, r7
  406e44:	18e5      	adds	r5, r4, r3
  406e46:	4429      	add	r1, r5
  406e48:	440e      	add	r6, r1
  406e4a:	eb06 66f2 	add.w	r6, r6, r2, ror #27

00406e4e <.LBB721>:
  406e4e:	ea4f 07b7 	mov.w	r7, r7, ror #2

00406e52 <.LBE721>:
  406e52:	9909      	ldr	r1, [sp, #36]	; 0x24
  406e54:	9d03      	ldr	r5, [sp, #12]
  406e56:	46a9      	mov	r9, r5
  406e58:	4069      	eors	r1, r5
  406e5a:	9d10      	ldr	r5, [sp, #64]	; 0x40
  406e5c:	4069      	eors	r1, r5
  406e5e:	9d07      	ldr	r5, [sp, #28]
  406e60:	4069      	eors	r1, r5

00406e62 <.LBB723>:
  406e62:	ea4f 71f1 	mov.w	r1, r1, ror #31

00406e66 <.LBE723>:
  406e66:	ea8e 0507 	eor.w	r5, lr, r7
  406e6a:	4055      	eors	r5, r2
  406e6c:	9108      	str	r1, [sp, #32]
  406e6e:	eb01 0803 	add.w	r8, r1, r3
  406e72:	44c4      	add	ip, r8
  406e74:	4465      	add	r5, ip
  406e76:	eb05 65f6 	add.w	r5, r5, r6, ror #27

00406e7a <.LBB725>:
  406e7a:	ea4f 02b2 	mov.w	r2, r2, ror #2

00406e7e <.LBE725>:
        R4(c,d,e,a,b,68); R4(b,c,d,e,a,69); R4(a,b,c,d,e,70); R4(e,a,b,c,d,71);
  406e7e:	9902      	ldr	r1, [sp, #8]

00406e80 <.LVL294>:
  406e80:	468c      	mov	ip, r1
  406e82:	990a      	ldr	r1, [sp, #40]	; 0x28
  406e84:	ea8c 0c01 	eor.w	ip, ip, r1
  406e88:	9905      	ldr	r1, [sp, #20]
  406e8a:	ea8c 0c01 	eor.w	ip, ip, r1
  406e8e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  406e90:	ea8c 0c01 	eor.w	ip, ip, r1

00406e94 <.LBB727>:
  406e94:	ea4f 7cfc 	mov.w	ip, ip, ror #31

00406e98 <.LBE727>:
  406e98:	ea87 0b02 	eor.w	fp, r7, r2
  406e9c:	ea8b 0b06 	eor.w	fp, fp, r6
  406ea0:	f8cd c008 	str.w	ip, [sp, #8]
  406ea4:	449c      	add	ip, r3

00406ea6 <.LVL297>:
  406ea6:	44e6      	add	lr, ip
  406ea8:	44f3      	add	fp, lr
  406eaa:	eb0b 6bf5 	add.w	fp, fp, r5, ror #27

00406eae <.LBB729>:
  406eae:	ea4f 06b6 	mov.w	r6, r6, ror #2

00406eb2 <.LBE729>:
  406eb2:	9904      	ldr	r1, [sp, #16]
  406eb4:	ea89 0e01 	eor.w	lr, r9, r1
  406eb8:	990e      	ldr	r1, [sp, #56]	; 0x38
  406eba:	ea8e 0e01 	eor.w	lr, lr, r1
  406ebe:	ea8e 0e04 	eor.w	lr, lr, r4

00406ec2 <.LBB731>:
  406ec2:	ea4f 7efe 	mov.w	lr, lr, ror #31

00406ec6 <.LBE731>:
  406ec6:	ea82 0a06 	eor.w	sl, r2, r6
  406eca:	ea8a 0a05 	eor.w	sl, sl, r5
  406ece:	f8cd e00c 	str.w	lr, [sp, #12]
  406ed2:	449e      	add	lr, r3

00406ed4 <.LVL302>:
  406ed4:	4477      	add	r7, lr
  406ed6:	44ba      	add	sl, r7
  406ed8:	eb0a 6afb 	add.w	sl, sl, fp, ror #27

00406edc <.LBB733>:
  406edc:	ea4f 05b5 	mov.w	r5, r5, ror #2

00406ee0 <.LBE733>:
  406ee0:	990a      	ldr	r1, [sp, #40]	; 0x28
  406ee2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  406ee4:	404f      	eors	r7, r1
  406ee6:	9901      	ldr	r1, [sp, #4]
  406ee8:	404f      	eors	r7, r1
  406eea:	9908      	ldr	r1, [sp, #32]
  406eec:	404f      	eors	r7, r1

00406eee <.LBB735>:
  406eee:	ea4f 77f7 	mov.w	r7, r7, ror #31

00406ef2 <.LBE735>:
  406ef2:	ea86 0905 	eor.w	r9, r6, r5
  406ef6:	ea89 090b 	eor.w	r9, r9, fp
  406efa:	9709      	str	r7, [sp, #36]	; 0x24
  406efc:	441f      	add	r7, r3

00406efe <.LVL307>:
  406efe:	443a      	add	r2, r7
  406f00:	4491      	add	r9, r2
  406f02:	eb09 69fa 	add.w	r9, r9, sl, ror #27

00406f06 <.LBB737>:
  406f06:	ea4f 0bbb 	mov.w	fp, fp, ror #2

00406f0a <.LBE737>:
  406f0a:	9904      	ldr	r1, [sp, #16]
  406f0c:	468e      	mov	lr, r1
  406f0e:	990c      	ldr	r1, [sp, #48]	; 0x30
  406f10:	ea8e 0201 	eor.w	r2, lr, r1
  406f14:	9f06      	ldr	r7, [sp, #24]
  406f16:	407a      	eors	r2, r7
  406f18:	9f02      	ldr	r7, [sp, #8]
  406f1a:	407a      	eors	r2, r7

00406f1c <.LBB739>:
  406f1c:	ea4f 72f2 	mov.w	r2, r2, ror #31

00406f20 <.LBE739>:
  406f20:	ea85 080b 	eor.w	r8, r5, fp
  406f24:	ea88 080a 	eor.w	r8, r8, sl
  406f28:	9204      	str	r2, [sp, #16]
  406f2a:	18d7      	adds	r7, r2, r3
  406f2c:	443e      	add	r6, r7
  406f2e:	44b0      	add	r8, r6
  406f30:	eb08 68f9 	add.w	r8, r8, r9, ror #27

00406f34 <.LBB741>:
  406f34:	ea4f 0aba 	mov.w	sl, sl, ror #2

00406f38 <.LBE741>:
        R4(d,e,a,b,c,72); R4(c,d,e,a,b,73); R4(b,c,d,e,a,74); R4(a,b,c,d,e,75);
  406f38:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  406f3a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  406f3c:	407e      	eors	r6, r7
  406f3e:	9a07      	ldr	r2, [sp, #28]

00406f40 <.LVL314>:
  406f40:	4056      	eors	r6, r2
  406f42:	9a03      	ldr	r2, [sp, #12]
  406f44:	4056      	eors	r6, r2

00406f46 <.LBB743>:
  406f46:	ea4f 76f6 	mov.w	r6, r6, ror #31

00406f4a <.LBE743>:
  406f4a:	ea8b 0c0a 	eor.w	ip, fp, sl
  406f4e:	ea8c 0c09 	eor.w	ip, ip, r9
  406f52:	18f7      	adds	r7, r6, r3
  406f54:	443d      	add	r5, r7
  406f56:	44ac      	add	ip, r5
  406f58:	eb0c 6cf8 	add.w	ip, ip, r8, ror #27

00406f5c <.LBB745>:
  406f5c:	ea4f 09b9 	mov.w	r9, r9, ror #2

00406f60 <.LBE745>:
  406f60:	9a10      	ldr	r2, [sp, #64]	; 0x40
  406f62:	ea81 0502 	eor.w	r5, r1, r2
  406f66:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  406f68:	407d      	eors	r5, r7
  406f6a:	9f09      	ldr	r7, [sp, #36]	; 0x24
  406f6c:	407d      	eors	r5, r7

00406f6e <.LBB747>:
  406f6e:	ea4f 75f5 	mov.w	r5, r5, ror #31

00406f72 <.LBE747>:
  406f72:	ea8a 0e09 	eor.w	lr, sl, r9
  406f76:	ea8e 0e08 	eor.w	lr, lr, r8
  406f7a:	18ef      	adds	r7, r5, r3
  406f7c:	44bb      	add	fp, r7
  406f7e:	44de      	add	lr, fp
  406f80:	eb0e 6efc 	add.w	lr, lr, ip, ror #27

00406f84 <.LBB749>:
  406f84:	ea4f 08b8 	mov.w	r8, r8, ror #2

00406f88 <.LBE749>:
  406f88:	990d      	ldr	r1, [sp, #52]	; 0x34
  406f8a:	9f05      	ldr	r7, [sp, #20]
  406f8c:	404f      	eors	r7, r1
  406f8e:	407c      	eors	r4, r7

00406f90 <.LVL323>:
  406f90:	9904      	ldr	r1, [sp, #16]
  406f92:	404c      	eors	r4, r1

00406f94 <.LBB751>:
  406f94:	ea4f 74f4 	mov.w	r4, r4, ror #31

00406f98 <.LBE751>:
  406f98:	ea89 0708 	eor.w	r7, r9, r8
  406f9c:	ea87 070c 	eor.w	r7, r7, ip
  406fa0:	eb04 0b03 	add.w	fp, r4, r3
  406fa4:	44da      	add	sl, fp
  406fa6:	4457      	add	r7, sl
  406fa8:	eb07 67fe 	add.w	r7, r7, lr, ror #27

00406fac <.LBB753>:
  406fac:	ea4f 0cbc 	mov.w	ip, ip, ror #2

00406fb0 <.LBE753>:
  406fb0:	4692      	mov	sl, r2
  406fb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406fb4:	ea8a 0b02 	eor.w	fp, sl, r2
  406fb8:	9908      	ldr	r1, [sp, #32]
  406fba:	ea8b 0101 	eor.w	r1, fp, r1
  406fbe:	404e      	eors	r6, r1

00406fc0 <.LBB755>:
  406fc0:	ea4f 76f6 	mov.w	r6, r6, ror #31

00406fc4 <.LBE755>:
  406fc4:	ea88 0a0c 	eor.w	sl, r8, ip
  406fc8:	ea8a 0a0e 	eor.w	sl, sl, lr
  406fcc:	4433      	add	r3, r6
  406fce:	444b      	add	r3, r9
  406fd0:	449a      	add	sl, r3
  406fd2:	eb0a 6af7 	add.w	sl, sl, r7, ror #27

00406fd6 <.LBB757>:
  406fd6:	ea4f 0ebe 	mov.w	lr, lr, ror #2

00406fda <.LBE757>:
        R4(e,a,b,c,d,76); R4(d,e,a,b,c,77); R4(c,d,e,a,b,78); R4(b,c,d,e,a,79);
  406fda:	9905      	ldr	r1, [sp, #20]
  406fdc:	9b01      	ldr	r3, [sp, #4]
  406fde:	404b      	eors	r3, r1
  406fe0:	9902      	ldr	r1, [sp, #8]
  406fe2:	404b      	eors	r3, r1
  406fe4:	405d      	eors	r5, r3

00406fe6 <.LBB759>:
  406fe6:	ea4f 75f5 	mov.w	r5, r5, ror #31

00406fea <.LBE759>:
  406fea:	ea8c 010e 	eor.w	r1, ip, lr
  406fee:	4079      	eors	r1, r7
  406ff0:	4b28      	ldr	r3, [pc, #160]	; (407094 <.LVL342+0x30>)
  406ff2:	eb05 0903 	add.w	r9, r5, r3
  406ff6:	44c8      	add	r8, r9
  406ff8:	4441      	add	r1, r8
  406ffa:	eb01 61fa 	add.w	r1, r1, sl, ror #27

00406ffe <.LBB761>:
  406ffe:	ea4f 07b7 	mov.w	r7, r7, ror #2

00407002 <.LBE761>:
  407002:	4690      	mov	r8, r2
  407004:	9a06      	ldr	r2, [sp, #24]
  407006:	ea88 0902 	eor.w	r9, r8, r2
  40700a:	9a03      	ldr	r2, [sp, #12]
  40700c:	ea89 0902 	eor.w	r9, r9, r2
  407010:	ea89 0904 	eor.w	r9, r9, r4
  407014:	eb03 79f9 	add.w	r9, r3, r9, ror #31
  407018:	44cc      	add	ip, r9
  40701a:	ea8e 0907 	eor.w	r9, lr, r7
  40701e:	ea89 090a 	eor.w	r9, r9, sl
  407022:	44cc      	add	ip, r9
  407024:	eb0c 6cf1 	add.w	ip, ip, r1, ror #27

00407028 <.LBB763>:
  407028:	ea4f 0aba 	mov.w	sl, sl, ror #2

0040702c <.LBE763>:
  40702c:	9a01      	ldr	r2, [sp, #4]
  40702e:	9c07      	ldr	r4, [sp, #28]
  407030:	4054      	eors	r4, r2
  407032:	9a09      	ldr	r2, [sp, #36]	; 0x24
  407034:	4054      	eors	r4, r2
  407036:	4074      	eors	r4, r6
  407038:	eb03 74f4 	add.w	r4, r3, r4, ror #31
  40703c:	44a6      	add	lr, r4
  40703e:	ea87 040a 	eor.w	r4, r7, sl
  407042:	404c      	eors	r4, r1
  407044:	44a6      	add	lr, r4
  407046:	eb0e 6efc 	add.w	lr, lr, ip, ror #27

0040704a <.LBB765>:
  40704a:	ea4f 01b1 	mov.w	r1, r1, ror #2

0040704e <.LBE765>:
  40704e:	9a06      	ldr	r2, [sp, #24]
  407050:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  407052:	4054      	eors	r4, r2

00407054 <.LVL340>:
  407054:	9a04      	ldr	r2, [sp, #16]
  407056:	4062      	eors	r2, r4
  407058:	4055      	eors	r5, r2

0040705a <.LVL341>:
    #endif

        /* Add the working vars back into digest state[] */
        sha->digest[0] += a;
  40705a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  40705c:	4413      	add	r3, r2
  40705e:	eb03 75f5 	add.w	r5, r3, r5, ror #31
  407062:	442f      	add	r7, r5

00407064 <.LVL342>:
        R4(e,a,b,c,d,76); R4(d,e,a,b,c,77); R4(c,d,e,a,b,78); R4(b,c,d,e,a,79);
  407064:	ea8a 0301 	eor.w	r3, sl, r1
  407068:	ea83 030c 	eor.w	r3, r3, ip
        sha->digest[0] += a;
  40706c:	441f      	add	r7, r3
  40706e:	eb07 67fe 	add.w	r7, r7, lr, ror #27
  407072:	64c7      	str	r7, [r0, #76]	; 0x4c
        sha->digest[1] += b;
  407074:	6d03      	ldr	r3, [r0, #80]	; 0x50
  407076:	eb03 040e 	add.w	r4, r3, lr
  40707a:	6504      	str	r4, [r0, #80]	; 0x50
        sha->digest[2] += c;
  40707c:	6d43      	ldr	r3, [r0, #84]	; 0x54
  40707e:	eb03 03bc 	add.w	r3, r3, ip, ror #2
  407082:	6543      	str	r3, [r0, #84]	; 0x54
        sha->digest[3] += d;
  407084:	6d83      	ldr	r3, [r0, #88]	; 0x58
  407086:	4419      	add	r1, r3
  407088:	6581      	str	r1, [r0, #88]	; 0x58
        sha->digest[4] += e;
  40708a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  40708c:	4453      	add	r3, sl
  40708e:	65c3      	str	r3, [r0, #92]	; 0x5c

        (void)data; /* Not used */
    }
  407090:	e002      	b.n	407098 <.LVL342+0x34>
  407092:	bf00      	nop
  407094:	ca62c1d6 	.word	0xca62c1d6
  407098:	b017      	add	sp, #92	; 0x5c

0040709a <.LCFI2>:
  40709a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040709e <.LFE15>:
  40709e:	bf00      	nop

Disassembly of section .dinit%46:

004070a0 <.dinit>:
  4070a0:	2040dc70 	.word	0x2040dc70
  4070a4:	0000001c 	.word	0x0000001c
  4070a8:	00000000 	.word	0x00000000
  4070ac:	2040dd44 	.word	0x2040dd44
  4070b0:	00000003 	.word	0x00000003
  4070b4:	00000000 	.word	0x00000000
  4070b8:	2040dd04 	.word	0x2040dd04
  4070bc:	00000008 	.word	0x00000008
  4070c0:	00000001 	.word	0x00000001
  4070c4:	00000000 	.word	0x00000000
  4070c8:	2040dc50 	.word	0x2040dc50
  4070cc:	2040c854 	.word	0x2040c854
  4070d0:	00000004 	.word	0x00000004
  4070d4:	00000001 	.word	0x00000001
  4070d8:	00000400 	.word	0x00000400
  4070dc:	2040dce0 	.word	0x2040dce0
  4070e0:	0000000c 	.word	0x0000000c
  4070e4:	00000001 	.word	0x00000001
  4070e8:	2040dca4 	.word	0x2040dca4
  4070ec:	0000001a 	.word	0x0000001a
  4070f0:	08f0d180 	.word	0x08f0d180
  4070f4:	2040dca4 	.word	0x2040dca4
  4070f8:	00000014 	.word	0x00000014
  4070fc:	00000001 	.word	0x00000001
  407100:	00412f99 	.word	0x00412f99
  407104:	00412f81 	.word	0x00412f81
  407108:	00412f69 	.word	0x00412f69
  40710c:	00412f75 	.word	0x00412f75
  407110:	00412f8d 	.word	0x00412f8d
  407114:	20400000 	.word	0x20400000
  407118:	0000000c 	.word	0x0000000c
  40711c:	00000000 	.word	0x00000000
  407120:	2040dd14 	.word	0x2040dd14
  407124:	00000004 	.word	0x00000004
  407128:	00000000 	.word	0x00000000
  40712c:	20400054 	.word	0x20400054
  407130:	0000c800 	.word	0x0000c800
  407134:	00000000 	.word	0x00000000
  407138:	2040db08 	.word	0x2040db08
  40713c:	00000050 	.word	0x00000050
  407140:	00000001 	.word	0x00000001
  407144:	00010100 	.word	0x00010100
	...
  407194:	2040dd18 	.word	0x2040dd18
  407198:	00000004 	.word	0x00000004
  40719c:	00000000 	.word	0x00000000
  4071a0:	2040dcec 	.word	0x2040dcec
  4071a4:	0000000c 	.word	0x0000000c
  4071a8:	00000000 	.word	0x00000000
  4071ac:	2040db58 	.word	0x2040db58
  4071b0:	00000050 	.word	0x00000050
  4071b4:	00000000 	.word	0x00000000
  4071b8:	2040d488 	.word	0x2040d488
  4071bc:	00000200 	.word	0x00000200
  4071c0:	00000000 	.word	0x00000000
  4071c4:	2040dba8 	.word	0x2040dba8
  4071c8:	00000050 	.word	0x00000050
  4071cc:	00000001 	.word	0x00000001
	...
  407214:	00000101 	.word	0x00000101
	...
  407220:	2040dc50 	.word	0x2040dc50
  407224:	00000020 	.word	0x00000020
  407228:	00000001 	.word	0x00000001
  40722c:	00000300 	.word	0x00000300
  407230:	004129f1 	.word	0x004129f1
  407234:	00411e49 	.word	0x00411e49
  407238:	00411ef5 	.word	0x00411ef5
  40723c:	00412cfd 	.word	0x00412cfd
  407240:	0040e1e1 	.word	0x0040e1e1
  407244:	00412021 	.word	0x00412021
  407248:	004123cd 	.word	0x004123cd
  40724c:	2040dcb8 	.word	0x2040dcb8
  407250:	00000014 	.word	0x00000014
  407254:	00000001 	.word	0x00000001
	...
  407264:	2040db58 	.word	0x2040db58
  407268:	0000000a 	.word	0x0000000a
  40726c:	2040dccc 	.word	0x2040dccc
  407270:	00000014 	.word	0x00000014
  407274:	00000001 	.word	0x00000001
	...
  407284:	2040d488 	.word	0x2040d488
  407288:	00000040 	.word	0x00000040
  40728c:	2040000c 	.word	0x2040000c
  407290:	00000009 	.word	0x00000009
  407294:	00000000 	.word	0x00000000
  407298:	2040dc8c 	.word	0x2040dc8c
  40729c:	00000018 	.word	0x00000018
  4072a0:	00000000 	.word	0x00000000
  4072a4:	2040dd0c 	.word	0x2040dd0c
  4072a8:	00000008 	.word	0x00000008
  4072ac:	00000000 	.word	0x00000000
  4072b0:	2040dd1c 	.word	0x2040dd1c
  4072b4:	00000004 	.word	0x00000004
  4072b8:	00000000 	.word	0x00000000
  4072bc:	2040da08 	.word	0x2040da08
  4072c0:	00000080 	.word	0x00000080
  4072c4:	00000000 	.word	0x00000000
  4072c8:	2040dcf8 	.word	0x2040dcf8
  4072cc:	0000000c 	.word	0x0000000c
  4072d0:	00000000 	.word	0x00000000
  4072d4:	2040d088 	.word	0x2040d088
  4072d8:	00000400 	.word	0x00000400
  4072dc:	00000000 	.word	0x00000000
  4072e0:	2040dd20 	.word	0x2040dd20
  4072e4:	00000004 	.word	0x00000004
  4072e8:	00000000 	.word	0x00000000
  4072ec:	2040da88 	.word	0x2040da88
  4072f0:	00000080 	.word	0x00000080
  4072f4:	00000000 	.word	0x00000000
  4072f8:	2040d984 	.word	0x2040d984
  4072fc:	00000081 	.word	0x00000081
  407300:	00000000 	.word	0x00000000
  407304:	2040dbf8 	.word	0x2040dbf8
  407308:	00000030 	.word	0x00000030
  40730c:	00000000 	.word	0x00000000
  407310:	2040d688 	.word	0x2040d688
  407314:	00000190 	.word	0x00000190
  407318:	00000000 	.word	0x00000000
  40731c:	2040dd24 	.word	0x2040dd24
  407320:	00000004 	.word	0x00000004
  407324:	00000000 	.word	0x00000000
  407328:	20400018 	.word	0x20400018
  40732c:	00000008 	.word	0x00000008
  407330:	00000000 	.word	0x00000000
  407334:	20400020 	.word	0x20400020
  407338:	00000030 	.word	0x00000030
  40733c:	00000000 	.word	0x00000000
  407340:	2040dd28 	.word	0x2040dd28
  407344:	00000004 	.word	0x00000004
  407348:	00000001 	.word	0x00000001
  40734c:	2040c858 	.word	0x2040c858
  407350:	2040c858 	.word	0x2040c858
  407354:	00000428 	.word	0x00000428
  407358:	00000001 	.word	0x00000001
  40735c:	00000000 	.word	0x00000000
  407360:	2040cb44 	.word	0x2040cb44
  407364:	2040cbac 	.word	0x2040cbac
  407368:	2040cc14 	.word	0x2040cc14
	...
  407404:	00000001 	.word	0x00000001
  407408:	00000000 	.word	0x00000000
  40740c:	abcd330e 	.word	0xabcd330e
  407410:	e66d1234 	.word	0xe66d1234
  407414:	0005deec 	.word	0x0005deec
  407418:	0000000b 	.word	0x0000000b
	...
  407784:	2040d818 	.word	0x2040d818
  407788:	0000016c 	.word	0x0000016c
  40778c:	00000001 	.word	0x00000001
  407790:	00000043 	.word	0x00000043
	...
  4077b0:	00000043 	.word	0x00000043
	...
  4077d0:	00000043 	.word	0x00000043
	...
  4077f0:	00000043 	.word	0x00000043
	...
  407810:	00000043 	.word	0x00000043
	...
  407830:	00000043 	.word	0x00000043
	...
  407850:	00000043 	.word	0x00000043
	...
  407870:	00412b59 	.word	0x00412b59
  407874:	0041278d 	.word	0x0041278d
  407878:	00000000 	.word	0x00000000
  40787c:	0040eff0 	.word	0x0040eff0
  407880:	00412d9c 	.word	0x00412d9c
  407884:	00412d98 	.word	0x00412d98
  407888:	00412d98 	.word	0x00412d98
  40788c:	00412d98 	.word	0x00412d98
  407890:	00412d98 	.word	0x00412d98
  407894:	00412d98 	.word	0x00412d98
  407898:	00412d98 	.word	0x00412d98
  40789c:	00412d98 	.word	0x00412d98
  4078a0:	00412d98 	.word	0x00412d98
  4078a4:	00412d98 	.word	0x00412d98
  4078a8:	ffffffff 	.word	0xffffffff
  4078ac:	ffffffff 	.word	0xffffffff
  4078b0:	ffffffff 	.word	0xffffffff
  4078b4:	0000ffff 	.word	0x0000ffff
  4078b8:	53410001 	.word	0x53410001
  4078bc:	00494943 	.word	0x00494943
	...
  4078d8:	53410000 	.word	0x53410000
  4078dc:	00494943 	.word	0x00494943
	...
  4078fc:	2040dc28 	.word	0x2040dc28
  407900:	00000028 	.word	0x00000028
  407904:	00000000 	.word	0x00000000
  407908:	2040dd2c 	.word	0x2040dd2c
  40790c:	00000004 	.word	0x00000004
  407910:	00000000 	.word	0x00000000
  407914:	2040dd30 	.word	0x2040dd30
  407918:	00000004 	.word	0x00000004
  40791c:	00000000 	.word	0x00000000
  407920:	2040dd34 	.word	0x2040dd34
  407924:	00000004 	.word	0x00000004
  407928:	00000000 	.word	0x00000000
  40792c:	2040cc80 	.word	0x2040cc80
  407930:	00000408 	.word	0x00000408
  407934:	00000001 	.word	0x00000001
	...
  407940:	2040cc80 	.word	0x2040cc80
  407944:	2040cc80 	.word	0x2040cc80
  407948:	2040cc88 	.word	0x2040cc88
  40794c:	2040cc88 	.word	0x2040cc88
  407950:	2040cc90 	.word	0x2040cc90
  407954:	2040cc90 	.word	0x2040cc90
  407958:	2040cc98 	.word	0x2040cc98
  40795c:	2040cc98 	.word	0x2040cc98
  407960:	2040cca0 	.word	0x2040cca0
  407964:	2040cca0 	.word	0x2040cca0
  407968:	2040cca8 	.word	0x2040cca8
  40796c:	2040cca8 	.word	0x2040cca8
  407970:	2040ccb0 	.word	0x2040ccb0
  407974:	2040ccb0 	.word	0x2040ccb0
  407978:	2040ccb8 	.word	0x2040ccb8
  40797c:	2040ccb8 	.word	0x2040ccb8
  407980:	2040ccc0 	.word	0x2040ccc0
  407984:	2040ccc0 	.word	0x2040ccc0
  407988:	2040ccc8 	.word	0x2040ccc8
  40798c:	2040ccc8 	.word	0x2040ccc8
  407990:	2040ccd0 	.word	0x2040ccd0
  407994:	2040ccd0 	.word	0x2040ccd0
  407998:	2040ccd8 	.word	0x2040ccd8
  40799c:	2040ccd8 	.word	0x2040ccd8
  4079a0:	2040cce0 	.word	0x2040cce0
  4079a4:	2040cce0 	.word	0x2040cce0
  4079a8:	2040cce8 	.word	0x2040cce8
  4079ac:	2040cce8 	.word	0x2040cce8
  4079b0:	2040ccf0 	.word	0x2040ccf0
  4079b4:	2040ccf0 	.word	0x2040ccf0
  4079b8:	2040ccf8 	.word	0x2040ccf8
  4079bc:	2040ccf8 	.word	0x2040ccf8
  4079c0:	2040cd00 	.word	0x2040cd00
  4079c4:	2040cd00 	.word	0x2040cd00
  4079c8:	2040cd08 	.word	0x2040cd08
  4079cc:	2040cd08 	.word	0x2040cd08
  4079d0:	2040cd10 	.word	0x2040cd10
  4079d4:	2040cd10 	.word	0x2040cd10
  4079d8:	2040cd18 	.word	0x2040cd18
  4079dc:	2040cd18 	.word	0x2040cd18
  4079e0:	2040cd20 	.word	0x2040cd20
  4079e4:	2040cd20 	.word	0x2040cd20
  4079e8:	2040cd28 	.word	0x2040cd28
  4079ec:	2040cd28 	.word	0x2040cd28
  4079f0:	2040cd30 	.word	0x2040cd30
  4079f4:	2040cd30 	.word	0x2040cd30
  4079f8:	2040cd38 	.word	0x2040cd38
  4079fc:	2040cd38 	.word	0x2040cd38
  407a00:	2040cd40 	.word	0x2040cd40
  407a04:	2040cd40 	.word	0x2040cd40
  407a08:	2040cd48 	.word	0x2040cd48
  407a0c:	2040cd48 	.word	0x2040cd48
  407a10:	2040cd50 	.word	0x2040cd50
  407a14:	2040cd50 	.word	0x2040cd50
  407a18:	2040cd58 	.word	0x2040cd58
  407a1c:	2040cd58 	.word	0x2040cd58
  407a20:	2040cd60 	.word	0x2040cd60
  407a24:	2040cd60 	.word	0x2040cd60
  407a28:	2040cd68 	.word	0x2040cd68
  407a2c:	2040cd68 	.word	0x2040cd68
  407a30:	2040cd70 	.word	0x2040cd70
  407a34:	2040cd70 	.word	0x2040cd70
  407a38:	2040cd78 	.word	0x2040cd78
  407a3c:	2040cd78 	.word	0x2040cd78
  407a40:	2040cd80 	.word	0x2040cd80
  407a44:	2040cd80 	.word	0x2040cd80
  407a48:	2040cd88 	.word	0x2040cd88
  407a4c:	2040cd88 	.word	0x2040cd88
  407a50:	2040cd90 	.word	0x2040cd90
  407a54:	2040cd90 	.word	0x2040cd90
  407a58:	2040cd98 	.word	0x2040cd98
  407a5c:	2040cd98 	.word	0x2040cd98
  407a60:	2040cda0 	.word	0x2040cda0
  407a64:	2040cda0 	.word	0x2040cda0
  407a68:	2040cda8 	.word	0x2040cda8
  407a6c:	2040cda8 	.word	0x2040cda8
  407a70:	2040cdb0 	.word	0x2040cdb0
  407a74:	2040cdb0 	.word	0x2040cdb0
  407a78:	2040cdb8 	.word	0x2040cdb8
  407a7c:	2040cdb8 	.word	0x2040cdb8
  407a80:	2040cdc0 	.word	0x2040cdc0
  407a84:	2040cdc0 	.word	0x2040cdc0
  407a88:	2040cdc8 	.word	0x2040cdc8
  407a8c:	2040cdc8 	.word	0x2040cdc8
  407a90:	2040cdd0 	.word	0x2040cdd0
  407a94:	2040cdd0 	.word	0x2040cdd0
  407a98:	2040cdd8 	.word	0x2040cdd8
  407a9c:	2040cdd8 	.word	0x2040cdd8
  407aa0:	2040cde0 	.word	0x2040cde0
  407aa4:	2040cde0 	.word	0x2040cde0
  407aa8:	2040cde8 	.word	0x2040cde8
  407aac:	2040cde8 	.word	0x2040cde8
  407ab0:	2040cdf0 	.word	0x2040cdf0
  407ab4:	2040cdf0 	.word	0x2040cdf0
  407ab8:	2040cdf8 	.word	0x2040cdf8
  407abc:	2040cdf8 	.word	0x2040cdf8
  407ac0:	2040ce00 	.word	0x2040ce00
  407ac4:	2040ce00 	.word	0x2040ce00
  407ac8:	2040ce08 	.word	0x2040ce08
  407acc:	2040ce08 	.word	0x2040ce08
  407ad0:	2040ce10 	.word	0x2040ce10
  407ad4:	2040ce10 	.word	0x2040ce10
  407ad8:	2040ce18 	.word	0x2040ce18
  407adc:	2040ce18 	.word	0x2040ce18
  407ae0:	2040ce20 	.word	0x2040ce20
  407ae4:	2040ce20 	.word	0x2040ce20
  407ae8:	2040ce28 	.word	0x2040ce28
  407aec:	2040ce28 	.word	0x2040ce28
  407af0:	2040ce30 	.word	0x2040ce30
  407af4:	2040ce30 	.word	0x2040ce30
  407af8:	2040ce38 	.word	0x2040ce38
  407afc:	2040ce38 	.word	0x2040ce38
  407b00:	2040ce40 	.word	0x2040ce40
  407b04:	2040ce40 	.word	0x2040ce40
  407b08:	2040ce48 	.word	0x2040ce48
  407b0c:	2040ce48 	.word	0x2040ce48
  407b10:	2040ce50 	.word	0x2040ce50
  407b14:	2040ce50 	.word	0x2040ce50
  407b18:	2040ce58 	.word	0x2040ce58
  407b1c:	2040ce58 	.word	0x2040ce58
  407b20:	2040ce60 	.word	0x2040ce60
  407b24:	2040ce60 	.word	0x2040ce60
  407b28:	2040ce68 	.word	0x2040ce68
  407b2c:	2040ce68 	.word	0x2040ce68
  407b30:	2040ce70 	.word	0x2040ce70
  407b34:	2040ce70 	.word	0x2040ce70
  407b38:	2040ce78 	.word	0x2040ce78
  407b3c:	2040ce78 	.word	0x2040ce78
  407b40:	2040ce80 	.word	0x2040ce80
  407b44:	2040ce80 	.word	0x2040ce80
  407b48:	2040ce88 	.word	0x2040ce88
  407b4c:	2040ce88 	.word	0x2040ce88
  407b50:	2040ce90 	.word	0x2040ce90
  407b54:	2040ce90 	.word	0x2040ce90
  407b58:	2040ce98 	.word	0x2040ce98
  407b5c:	2040ce98 	.word	0x2040ce98
  407b60:	2040cea0 	.word	0x2040cea0
  407b64:	2040cea0 	.word	0x2040cea0
  407b68:	2040cea8 	.word	0x2040cea8
  407b6c:	2040cea8 	.word	0x2040cea8
  407b70:	2040ceb0 	.word	0x2040ceb0
  407b74:	2040ceb0 	.word	0x2040ceb0
  407b78:	2040ceb8 	.word	0x2040ceb8
  407b7c:	2040ceb8 	.word	0x2040ceb8
  407b80:	2040cec0 	.word	0x2040cec0
  407b84:	2040cec0 	.word	0x2040cec0
  407b88:	2040cec8 	.word	0x2040cec8
  407b8c:	2040cec8 	.word	0x2040cec8
  407b90:	2040ced0 	.word	0x2040ced0
  407b94:	2040ced0 	.word	0x2040ced0
  407b98:	2040ced8 	.word	0x2040ced8
  407b9c:	2040ced8 	.word	0x2040ced8
  407ba0:	2040cee0 	.word	0x2040cee0
  407ba4:	2040cee0 	.word	0x2040cee0
  407ba8:	2040cee8 	.word	0x2040cee8
  407bac:	2040cee8 	.word	0x2040cee8
  407bb0:	2040cef0 	.word	0x2040cef0
  407bb4:	2040cef0 	.word	0x2040cef0
  407bb8:	2040cef8 	.word	0x2040cef8
  407bbc:	2040cef8 	.word	0x2040cef8
  407bc0:	2040cf00 	.word	0x2040cf00
  407bc4:	2040cf00 	.word	0x2040cf00
  407bc8:	2040cf08 	.word	0x2040cf08
  407bcc:	2040cf08 	.word	0x2040cf08
  407bd0:	2040cf10 	.word	0x2040cf10
  407bd4:	2040cf10 	.word	0x2040cf10
  407bd8:	2040cf18 	.word	0x2040cf18
  407bdc:	2040cf18 	.word	0x2040cf18
  407be0:	2040cf20 	.word	0x2040cf20
  407be4:	2040cf20 	.word	0x2040cf20
  407be8:	2040cf28 	.word	0x2040cf28
  407bec:	2040cf28 	.word	0x2040cf28
  407bf0:	2040cf30 	.word	0x2040cf30
  407bf4:	2040cf30 	.word	0x2040cf30
  407bf8:	2040cf38 	.word	0x2040cf38
  407bfc:	2040cf38 	.word	0x2040cf38
  407c00:	2040cf40 	.word	0x2040cf40
  407c04:	2040cf40 	.word	0x2040cf40
  407c08:	2040cf48 	.word	0x2040cf48
  407c0c:	2040cf48 	.word	0x2040cf48
  407c10:	2040cf50 	.word	0x2040cf50
  407c14:	2040cf50 	.word	0x2040cf50
  407c18:	2040cf58 	.word	0x2040cf58
  407c1c:	2040cf58 	.word	0x2040cf58
  407c20:	2040cf60 	.word	0x2040cf60
  407c24:	2040cf60 	.word	0x2040cf60
  407c28:	2040cf68 	.word	0x2040cf68
  407c2c:	2040cf68 	.word	0x2040cf68
  407c30:	2040cf70 	.word	0x2040cf70
  407c34:	2040cf70 	.word	0x2040cf70
  407c38:	2040cf78 	.word	0x2040cf78
  407c3c:	2040cf78 	.word	0x2040cf78
  407c40:	2040cf80 	.word	0x2040cf80
  407c44:	2040cf80 	.word	0x2040cf80
  407c48:	2040cf88 	.word	0x2040cf88
  407c4c:	2040cf88 	.word	0x2040cf88
  407c50:	2040cf90 	.word	0x2040cf90
  407c54:	2040cf90 	.word	0x2040cf90
  407c58:	2040cf98 	.word	0x2040cf98
  407c5c:	2040cf98 	.word	0x2040cf98
  407c60:	2040cfa0 	.word	0x2040cfa0
  407c64:	2040cfa0 	.word	0x2040cfa0
  407c68:	2040cfa8 	.word	0x2040cfa8
  407c6c:	2040cfa8 	.word	0x2040cfa8
  407c70:	2040cfb0 	.word	0x2040cfb0
  407c74:	2040cfb0 	.word	0x2040cfb0
  407c78:	2040cfb8 	.word	0x2040cfb8
  407c7c:	2040cfb8 	.word	0x2040cfb8
  407c80:	2040cfc0 	.word	0x2040cfc0
  407c84:	2040cfc0 	.word	0x2040cfc0
  407c88:	2040cfc8 	.word	0x2040cfc8
  407c8c:	2040cfc8 	.word	0x2040cfc8
  407c90:	2040cfd0 	.word	0x2040cfd0
  407c94:	2040cfd0 	.word	0x2040cfd0
  407c98:	2040cfd8 	.word	0x2040cfd8
  407c9c:	2040cfd8 	.word	0x2040cfd8
  407ca0:	2040cfe0 	.word	0x2040cfe0
  407ca4:	2040cfe0 	.word	0x2040cfe0
  407ca8:	2040cfe8 	.word	0x2040cfe8
  407cac:	2040cfe8 	.word	0x2040cfe8
  407cb0:	2040cff0 	.word	0x2040cff0
  407cb4:	2040cff0 	.word	0x2040cff0
  407cb8:	2040cff8 	.word	0x2040cff8
  407cbc:	2040cff8 	.word	0x2040cff8
  407cc0:	2040d000 	.word	0x2040d000
  407cc4:	2040d000 	.word	0x2040d000
  407cc8:	2040d008 	.word	0x2040d008
  407ccc:	2040d008 	.word	0x2040d008
  407cd0:	2040d010 	.word	0x2040d010
  407cd4:	2040d010 	.word	0x2040d010
  407cd8:	2040d018 	.word	0x2040d018
  407cdc:	2040d018 	.word	0x2040d018
  407ce0:	2040d020 	.word	0x2040d020
  407ce4:	2040d020 	.word	0x2040d020
  407ce8:	2040d028 	.word	0x2040d028
  407cec:	2040d028 	.word	0x2040d028
  407cf0:	2040d030 	.word	0x2040d030
  407cf4:	2040d030 	.word	0x2040d030
  407cf8:	2040d038 	.word	0x2040d038
  407cfc:	2040d038 	.word	0x2040d038
  407d00:	2040d040 	.word	0x2040d040
  407d04:	2040d040 	.word	0x2040d040
  407d08:	2040d048 	.word	0x2040d048
  407d0c:	2040d048 	.word	0x2040d048
  407d10:	2040d050 	.word	0x2040d050
  407d14:	2040d050 	.word	0x2040d050
  407d18:	2040d058 	.word	0x2040d058
  407d1c:	2040d058 	.word	0x2040d058
  407d20:	2040d060 	.word	0x2040d060
  407d24:	2040d060 	.word	0x2040d060
  407d28:	2040d068 	.word	0x2040d068
  407d2c:	2040d068 	.word	0x2040d068
  407d30:	2040d070 	.word	0x2040d070
  407d34:	2040d070 	.word	0x2040d070
  407d38:	2040d078 	.word	0x2040d078
  407d3c:	2040d078 	.word	0x2040d078
  407d40:	2040dd38 	.word	0x2040dd38
  407d44:	00000004 	.word	0x00000004
  407d48:	00000001 	.word	0x00000001
  407d4c:	ffffffff 	.word	0xffffffff
  407d50:	2040dd3c 	.word	0x2040dd3c
  407d54:	00000004 	.word	0x00000004
  407d58:	00000001 	.word	0x00000001
  407d5c:	00020000 	.word	0x00020000
  407d60:	20400050 	.word	0x20400050
  407d64:	00000004 	.word	0x00000004
  407d68:	00000000 	.word	0x00000000
  407d6c:	2040dd40 	.word	0x2040dd40
  407d70:	00000004 	.word	0x00000004
	...

Disassembly of section .text._dtoa_r%47:

00407d80 <_dtoa_r>:
  407d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00407d84 <.LCFI4>:
  407d84:	6c05      	ldr	r5, [r0, #64]	; 0x40
  407d86:	b093      	sub	sp, #76	; 0x4c

00407d88 <.LCFI5>:
  407d88:	4604      	mov	r4, r0
  407d8a:	ec5b ab10 	vmov	sl, fp, d0
  407d8e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
  407d90:	9101      	str	r1, [sp, #4]
  407d92:	4691      	mov	r9, r2
  407d94:	9304      	str	r3, [sp, #16]
  407d96:	b14d      	cbz	r5, 407dac <.LVL53+0x4>
  407d98:	6c42      	ldr	r2, [r0, #68]	; 0x44

00407d9a <.LVL50>:
  407d9a:	606a      	str	r2, [r5, #4]
  407d9c:	2301      	movs	r3, #1

00407d9e <.LVL51>:
  407d9e:	4093      	lsls	r3, r2
  407da0:	60ab      	str	r3, [r5, #8]
  407da2:	4629      	mov	r1, r5

00407da4 <.LVL52>:
  407da4:	f00b f810 	bl	412dc8 <_Bfree>

00407da8 <.LVL53>:
  407da8:	2300      	movs	r3, #0
  407daa:	6423      	str	r3, [r4, #64]	; 0x40
  407dac:	f1bb 0f00 	cmp.w	fp, #0
  407db0:	465e      	mov	r6, fp
  407db2:	db35      	blt.n	407e20 <.LVL63>
  407db4:	2300      	movs	r3, #0
  407db6:	603b      	str	r3, [r7, #0]
  407db8:	4bc1      	ldr	r3, [pc, #772]	; (4080c0 <.LVL134+0x20>)
  407dba:	43b3      	bics	r3, r6
  407dbc:	d015      	beq.n	407dea <.LCFI7>
  407dbe:	ec4b ab17 	vmov	d7, sl, fp
  407dc2:	eeb5 7b40 	vcmp.f64	d7, #0.0
  407dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr

00407dca <.LVL55>:
  407dca:	e9cd ab02 	strd	sl, fp, [sp, #8]
  407dce:	d12d      	bne.n	407e2c <.LVL64>
  407dd0:	9a04      	ldr	r2, [sp, #16]
  407dd2:	2301      	movs	r3, #1
  407dd4:	6013      	str	r3, [r2, #0]

00407dd6 <.LVL56>:
  407dd6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  407dd8:	2b00      	cmp	r3, #0
  407dda:	f000 80b3 	beq.w	407f44 <.LVL99>
  407dde:	48b9      	ldr	r0, [pc, #740]	; (4080c4 <.LVL134+0x24>)
  407de0:	6018      	str	r0, [r3, #0]
  407de2:	3801      	subs	r0, #1

00407de4 <.LVL57>:
  407de4:	b013      	add	sp, #76	; 0x4c

00407de6 <.LCFI6>:
  407de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00407dea <.LCFI7>:
  407dea:	9a04      	ldr	r2, [sp, #16]
  407dec:	f242 730f 	movw	r3, #9999	; 0x270f
  407df0:	6013      	str	r3, [r2, #0]

00407df2 <.LVL59>:
  407df2:	f1ba 0f00 	cmp.w	sl, #0
  407df6:	d10d      	bne.n	407e14 <.LCFI9>
  407df8:	f3c6 0613 	ubfx	r6, r6, #0, #20
  407dfc:	b956      	cbnz	r6, 407e14 <.LCFI9>

00407dfe <.LVL60>:
  407dfe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  407e00:	48b1      	ldr	r0, [pc, #708]	; (4080c8 <.LVL134+0x28>)
  407e02:	2b00      	cmp	r3, #0
  407e04:	d0ee      	beq.n	407de4 <.LVL57>
  407e06:	f100 0308 	add.w	r3, r0, #8

00407e0a <.LVL61>:
  407e0a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
  407e0c:	6013      	str	r3, [r2, #0]
  407e0e:	b013      	add	sp, #76	; 0x4c

00407e10 <.LCFI8>:
  407e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00407e14 <.LCFI9>:
  407e14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  407e16:	48ad      	ldr	r0, [pc, #692]	; (4080cc <.LVL134+0x2c>)
  407e18:	2b00      	cmp	r3, #0
  407e1a:	d0e3      	beq.n	407de4 <.LVL57>
  407e1c:	1cc3      	adds	r3, r0, #3
  407e1e:	e7f4      	b.n	407e0a <.LVL61>

00407e20 <.LVL63>:
  407e20:	2301      	movs	r3, #1
  407e22:	f02b 4600 	bic.w	r6, fp, #2147483648	; 0x80000000
  407e26:	603b      	str	r3, [r7, #0]
  407e28:	46b3      	mov	fp, r6
  407e2a:	e7c5      	b.n	407db8 <.LVL53+0x10>

00407e2c <.LVL64>:
  407e2c:	a911      	add	r1, sp, #68	; 0x44
  407e2e:	aa10      	add	r2, sp, #64	; 0x40
  407e30:	ed9d 0b02 	vldr	d0, [sp, #8]
  407e34:	4620      	mov	r0, r4
  407e36:	f008 f8a1 	bl	40ff7c <__d2b>

00407e3a <.LVL65>:
  407e3a:	0d31      	lsrs	r1, r6, #20
  407e3c:	4680      	mov	r8, r0

00407e3e <.LVL66>:
  407e3e:	d065      	beq.n	407f0c <.LVL92>
  407e40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  407e44:	f3c3 0013 	ubfx	r0, r3, #0, #20

00407e48 <.LVL68>:
  407e48:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
  407e4c:	2500      	movs	r5, #0
  407e4e:	9810      	ldr	r0, [sp, #64]	; 0x40
  407e50:	950d      	str	r5, [sp, #52]	; 0x34
  407e52:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff

00407e56 <.LVL69>:
  407e56:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000

00407e5a <.LVL70>:
  407e5a:	ec43 2b17 	vmov	d7, r2, r3
  407e5e:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
  407e62:	ed9f 4b91 	vldr	d4, [pc, #580]	; 4080a8 <.LVL134+0x8>
  407e66:	ee37 6b46 	vsub.f64	d6, d7, d6
  407e6a:	ed9f 7b91 	vldr	d7, [pc, #580]	; 4080b0 <.LVL134+0x10>
  407e6e:	ed9f 5b92 	vldr	d5, [pc, #584]	; 4080b8 <.LVL134+0x18>
  407e72:	eea6 7b04 	vfma.f64	d7, d6, d4
  407e76:	ee06 1a90 	vmov	s13, r1
  407e7a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
  407e7e:	eea6 7b05 	vfma.f64	d7, d6, d5

00407e82 <.LVL71>:
  407e82:	eefd 6bc7 	vcvt.s32.f64	s13, d7
  407e86:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
  407e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  407e8e:	edcd 6a02 	vstr	s13, [sp, #8]

00407e92 <.LVL72>:
  407e92:	f100 8130 	bmi.w	4080f6 <.LVL143>

00407e96 <.LVL73>:
  407e96:	9d02      	ldr	r5, [sp, #8]
  407e98:	2d16      	cmp	r5, #22
  407e9a:	f200 8101 	bhi.w	4080a0 <.LVL134>
  407e9e:	4b8c      	ldr	r3, [pc, #560]	; (4080d0 <.LVL134+0x30>)
  407ea0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  407ea4:	ed93 7b00 	vldr	d7, [r3]

00407ea8 <.LVL74>:
  407ea8:	ec4b ab16 	vmov	d6, sl, fp
  407eac:	eeb4 7bc6 	vcmpe.f64	d7, d6
  407eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  407eb4:	f340 8183 	ble.w	4081be <.LVL173>
  407eb8:	1e6b      	subs	r3, r5, #1
  407eba:	9302      	str	r3, [sp, #8]

00407ebc <.LVL75>:
  407ebc:	2300      	movs	r3, #0

00407ebe <.LVL76>:
  407ebe:	930b      	str	r3, [sp, #44]	; 0x2c

00407ec0 <.LVL77>:
  407ec0:	1a41      	subs	r1, r0, r1

00407ec2 <.LVL78>:
  407ec2:	1e4b      	subs	r3, r1, #1

00407ec4 <.LVL79>:
  407ec4:	9306      	str	r3, [sp, #24]
  407ec6:	f100 8110 	bmi.w	4080ea <.LVL138>
  407eca:	2300      	movs	r3, #0

00407ecc <.LVL80>:
  407ecc:	9307      	str	r3, [sp, #28]

00407ece <.LVL81>:
  407ece:	9b02      	ldr	r3, [sp, #8]
  407ed0:	2b00      	cmp	r3, #0
  407ed2:	f2c0 8101 	blt.w	4080d8 <.LVL135>

00407ed6 <.LVL82>:
  407ed6:	9a06      	ldr	r2, [sp, #24]

00407ed8 <.LVL83>:
  407ed8:	930a      	str	r3, [sp, #40]	; 0x28
  407eda:	4611      	mov	r1, r2

00407edc <.LVL84>:
  407edc:	4419      	add	r1, r3
  407ede:	2300      	movs	r3, #0

00407ee0 <.LVL85>:
  407ee0:	9106      	str	r1, [sp, #24]

00407ee2 <.LVL86>:
  407ee2:	9305      	str	r3, [sp, #20]

00407ee4 <.LVL87>:
  407ee4:	9b01      	ldr	r3, [sp, #4]
  407ee6:	2b09      	cmp	r3, #9
  407ee8:	d82e      	bhi.n	407f48 <.LVL100>

00407eea <.LVL88>:
  407eea:	2b05      	cmp	r3, #5
  407eec:	f340 8550 	ble.w	408990 <.LVL445>
  407ef0:	3b04      	subs	r3, #4

00407ef2 <.LVL89>:
  407ef2:	9301      	str	r3, [sp, #4]

00407ef4 <.LVL90>:
  407ef4:	2500      	movs	r5, #0

00407ef6 <.LVL91>:
  407ef6:	9b01      	ldr	r3, [sp, #4]
  407ef8:	3b02      	subs	r3, #2
  407efa:	2b03      	cmp	r3, #3
  407efc:	f200 8550 	bhi.w	4089a0 <.LVL447>
  407f00:	e8df f013 	tbh	[pc, r3, lsl #1]
  407f04:	02860349 	.word	0x02860349
  407f08:	03d80356 	.word	0x03d80356

00407f0c <.LVL92>:
  407f0c:	9810      	ldr	r0, [sp, #64]	; 0x40

00407f0e <.LVL93>:
  407f0e:	9911      	ldr	r1, [sp, #68]	; 0x44

00407f10 <.LVL94>:
  407f10:	4401      	add	r1, r0
  407f12:	f201 4332 	addw	r3, r1, #1074	; 0x432

00407f16 <.LVL95>:
  407f16:	2b20      	cmp	r3, #32
  407f18:	f340 814a 	ble.w	4081b0 <.LVL171>
  407f1c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40

00407f20 <.LVL96>:
  407f20:	f201 4212 	addw	r2, r1, #1042	; 0x412
  407f24:	409e      	lsls	r6, r3
  407f26:	fa2a f302 	lsr.w	r3, sl, r2
  407f2a:	4333      	orrs	r3, r6
  407f2c:	ee07 3a90 	vmov	s15, r3

00407f30 <.LVL97>:
  407f30:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  407f34:	2501      	movs	r5, #1
  407f36:	ec53 2b17 	vmov	r2, r3, d7
  407f3a:	3901      	subs	r1, #1

00407f3c <.LVL98>:
  407f3c:	f1a3 73f8 	sub.w	r3, r3, #32505856	; 0x1f00000
  407f40:	950d      	str	r5, [sp, #52]	; 0x34
  407f42:	e78a      	b.n	407e5a <.LVL70>

00407f44 <.LVL99>:
  407f44:	4863      	ldr	r0, [pc, #396]	; (4080d4 <.LVL134+0x34>)
  407f46:	e74d      	b.n	407de4 <.LVL57>

00407f48 <.LVL100>:
  407f48:	2100      	movs	r1, #0
  407f4a:	6461      	str	r1, [r4, #68]	; 0x44
  407f4c:	4620      	mov	r0, r4
  407f4e:	4689      	mov	r9, r1
  407f50:	f00a f81c 	bl	411f8c <.LFE2>

00407f54 <.LVL101>:
  407f54:	f04f 36ff 	mov.w	r6, #4294967295
  407f58:	2301      	movs	r3, #1
  407f5a:	9008      	str	r0, [sp, #32]
  407f5c:	6420      	str	r0, [r4, #64]	; 0x40

00407f5e <.LVL102>:
  407f5e:	f8cd 9004 	str.w	r9, [sp, #4]

00407f62 <.LVL103>:
  407f62:	960c      	str	r6, [sp, #48]	; 0x30
  407f64:	9309      	str	r3, [sp, #36]	; 0x24

00407f66 <.LVL104>:
  407f66:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407f68:	2b00      	cmp	r3, #0
  407f6a:	db7a      	blt.n	408062 <.LCFI11>
  407f6c:	9a02      	ldr	r2, [sp, #8]
  407f6e:	2a0e      	cmp	r2, #14
  407f70:	dc77      	bgt.n	408062 <.LCFI11>
  407f72:	4b57      	ldr	r3, [pc, #348]	; (4080d0 <.LVL134+0x30>)
  407f74:	f1b9 0f00 	cmp.w	r9, #0
  407f78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  407f7c:	ed93 4b00 	vldr	d4, [r3]

00407f80 <.LVL105>:
  407f80:	f2c0 8332 	blt.w	4085e8 <.LVL300>

00407f84 <.LVL106>:
  407f84:	ec4b ab17 	vmov	d7, sl, fp
  407f88:	ee87 6b04 	vdiv.f64	d6, d7, d4
  407f8c:	eebd 6bc6 	vcvt.s32.f64	s12, d6

00407f90 <.LVL107>:
  407f90:	9a08      	ldr	r2, [sp, #32]
  407f92:	ee16 3a10 	vmov	r3, s12
  407f96:	2e01      	cmp	r6, #1
  407f98:	f103 0330 	add.w	r3, r3, #48	; 0x30
  407f9c:	eeb8 5bc6 	vcvt.f64.s32	d5, s12
  407fa0:	f102 0b01 	add.w	fp, r2, #1

00407fa4 <.LVL108>:
  407fa4:	7013      	strb	r3, [r2, #0]
  407fa6:	eea5 7b44 	vfms.f64	d7, d5, d4
  407faa:	d024      	beq.n	407ff6 <.LVL115>
  407fac:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
  407fb0:	ee27 7b03 	vmul.f64	d7, d7, d3
  407fb4:	eeb5 7b40 	vcmp.f64	d7, #0.0
  407fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  407fbc:	d03c      	beq.n	408038 <.L76>
  407fbe:	eeb1 2b44 	vneg.f64	d2, d4
  407fc2:	9a08      	ldr	r2, [sp, #32]
  407fc4:	e006      	b.n	407fd4 <.LVL110>

00407fc6 <.LVL109>:
  407fc6:	ee27 7b03 	vmul.f64	d7, d7, d3
  407fca:	eeb5 7b40 	vcmp.f64	d7, #0.0
  407fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  407fd2:	d031      	beq.n	408038 <.L76>

00407fd4 <.LVL110>:
  407fd4:	ee87 6b04 	vdiv.f64	d6, d7, d4

00407fd8 <.LVL111>:
  407fd8:	eebd 6bc6 	vcvt.s32.f64	s12, d6

00407fdc <.LVL112>:
  407fdc:	ee16 3a10 	vmov	r3, s12
  407fe0:	3330      	adds	r3, #48	; 0x30
  407fe2:	f80b 3b01 	strb.w	r3, [fp], #1

00407fe6 <.LVL113>:
  407fe6:	ebab 0302 	sub.w	r3, fp, r2
  407fea:	42b3      	cmp	r3, r6
  407fec:	eeb8 5bc6 	vcvt.f64.s32	d5, s12
  407ff0:	eea2 7b05 	vfma.f64	d7, d2, d5

00407ff4 <.LVL114>:
  407ff4:	d1e7      	bne.n	407fc6 <.LVL109>

00407ff6 <.LVL115>:
  407ff6:	ee37 7b07 	vadd.f64	d7, d7, d7
  407ffa:	eeb4 4bc7 	vcmpe.f64	d4, d7
  407ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  408002:	d408      	bmi.n	408016 <.LVL115+0x20>
  408004:	eeb4 4b47 	vcmp.f64	d4, d7
  408008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40800c:	d114      	bne.n	408038 <.L76>
  40800e:	ee16 3a10 	vmov	r3, s12
  408012:	07db      	lsls	r3, r3, #31
  408014:	d510      	bpl.n	408038 <.L76>
  408016:	f81b 3c01 	ldrb.w	r3, [fp, #-1]

0040801a <.L77>:
  40801a:	9908      	ldr	r1, [sp, #32]
  40801c:	f10b 32ff 	add.w	r2, fp, #4294967295
  408020:	e004      	b.n	40802c <.LVL118>

00408022 <.LVL117>:
  408022:	4291      	cmp	r1, r2
  408024:	f000 83da 	beq.w	4087dc <.LVL375>
  408028:	f812 3d01 	ldrb.w	r3, [r2, #-1]!

0040802c <.LVL118>:
  40802c:	2b39      	cmp	r3, #57	; 0x39
  40802e:	f102 0b01 	add.w	fp, r2, #1

00408032 <.LVL119>:
  408032:	d0f6      	beq.n	408022 <.LVL117>

00408034 <.LVL120>:
  408034:	3301      	adds	r3, #1
  408036:	7013      	strb	r3, [r2, #0]

00408038 <.L76>:
  408038:	4641      	mov	r1, r8
  40803a:	4620      	mov	r0, r4

0040803c <.LVL122>:
  40803c:	f00a fec4 	bl	412dc8 <_Bfree>

00408040 <.LVL123>:
  408040:	2200      	movs	r2, #0
  408042:	9b02      	ldr	r3, [sp, #8]
  408044:	f88b 2000 	strb.w	r2, [fp]
  408048:	9a04      	ldr	r2, [sp, #16]
  40804a:	3301      	adds	r3, #1
  40804c:	6013      	str	r3, [r2, #0]
  40804e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408050:	2b00      	cmp	r3, #0
  408052:	f000 8355 	beq.w	408700 <.LVL340>
  408056:	9808      	ldr	r0, [sp, #32]
  408058:	f8c3 b000 	str.w	fp, [r3]
  40805c:	b013      	add	sp, #76	; 0x4c

0040805e <.LCFI10>:
  40805e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00408062 <.LCFI11>:
  408062:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408064:	2a00      	cmp	r2, #0
  408066:	d052      	beq.n	40810e <.LVL145>
  408068:	9a01      	ldr	r2, [sp, #4]
  40806a:	2a01      	cmp	r2, #1
  40806c:	f340 82e2 	ble.w	408634 <.LVL312>
  408070:	9905      	ldr	r1, [sp, #20]
  408072:	1e72      	subs	r2, r6, #1

00408074 <.LVL125>:
  408074:	4291      	cmp	r1, r2
  408076:	f2c0 8346 	blt.w	408706 <.LVL341>
  40807a:	1a8b      	subs	r3, r1, r2
  40807c:	930d      	str	r3, [sp, #52]	; 0x34

0040807e <.LVL126>:
  40807e:	2e00      	cmp	r6, #0
  408080:	f2c0 8415 	blt.w	4088ae <.LVL411>
  408084:	9f07      	ldr	r7, [sp, #28]
  408086:	4633      	mov	r3, r6

00408088 <.LVL127>:
  408088:	9a07      	ldr	r2, [sp, #28]
  40808a:	441a      	add	r2, r3
  40808c:	9207      	str	r2, [sp, #28]

0040808e <.LVL128>:
  40808e:	9a06      	ldr	r2, [sp, #24]

00408090 <.LVL129>:
  408090:	2101      	movs	r1, #1
  408092:	441a      	add	r2, r3
  408094:	4620      	mov	r0, r4

00408096 <.LVL130>:
  408096:	9206      	str	r2, [sp, #24]

00408098 <.LVL131>:
  408098:	f00a fea0 	bl	412ddc <__i2b>

0040809c <.LVL132>:
  40809c:	4605      	mov	r5, r0

0040809e <.LVL133>:
  40809e:	e03a      	b.n	408116 <.LVL146>

004080a0 <.LVL134>:
  4080a0:	2301      	movs	r3, #1
  4080a2:	930b      	str	r3, [sp, #44]	; 0x2c
  4080a4:	e70c      	b.n	407ec0 <.LVL77>
  4080a6:	bf00      	nop
  4080a8:	636f4361 	.word	0x636f4361
  4080ac:	3fd287a7 	.word	0x3fd287a7
  4080b0:	8b60c8b3 	.word	0x8b60c8b3
  4080b4:	3fc68a28 	.word	0x3fc68a28
  4080b8:	509f79fb 	.word	0x509f79fb
  4080bc:	3fd34413 	.word	0x3fd34413
  4080c0:	7ff00000 	.word	0x7ff00000
  4080c4:	00412dc5 	.word	0x00412dc5
  4080c8:	00412db4 	.word	0x00412db4
  4080cc:	00412dc0 	.word	0x00412dc0
  4080d0:	0040fbb8 	.word	0x0040fbb8
  4080d4:	00412dc4 	.word	0x00412dc4

004080d8 <.LVL135>:
  4080d8:	9a07      	ldr	r2, [sp, #28]

004080da <.LVL136>:
  4080da:	9b02      	ldr	r3, [sp, #8]
  4080dc:	1ad2      	subs	r2, r2, r3
  4080de:	425b      	negs	r3, r3
  4080e0:	9305      	str	r3, [sp, #20]
  4080e2:	2300      	movs	r3, #0
  4080e4:	9207      	str	r2, [sp, #28]

004080e6 <.LVL137>:
  4080e6:	930a      	str	r3, [sp, #40]	; 0x28
  4080e8:	e6fc      	b.n	407ee4 <.LVL87>

004080ea <.LVL138>:
  4080ea:	f1c1 0301 	rsb	r3, r1, #1

004080ee <.LVL139>:
  4080ee:	9307      	str	r3, [sp, #28]

004080f0 <.LVL140>:
  4080f0:	2300      	movs	r3, #0

004080f2 <.LVL141>:
  4080f2:	9306      	str	r3, [sp, #24]

004080f4 <.LVL142>:
  4080f4:	e6eb      	b.n	407ece <.LVL81>

004080f6 <.LVL143>:
  4080f6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
  4080fa:	eeb4 7b46 	vcmp.f64	d7, d6
  4080fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  408102:	f43f aec8 	beq.w	407e96 <.LVL73>
  408106:	9b02      	ldr	r3, [sp, #8]
  408108:	3b01      	subs	r3, #1
  40810a:	9302      	str	r3, [sp, #8]

0040810c <.LVL144>:
  40810c:	e6c3      	b.n	407e96 <.LVL73>

0040810e <.LVL145>:
  40810e:	9b05      	ldr	r3, [sp, #20]
  408110:	9f07      	ldr	r7, [sp, #28]
  408112:	9d09      	ldr	r5, [sp, #36]	; 0x24
  408114:	930d      	str	r3, [sp, #52]	; 0x34

00408116 <.LVL146>:
  408116:	2f00      	cmp	r7, #0
  408118:	dd0c      	ble.n	408134 <.LVL151>
  40811a:	9906      	ldr	r1, [sp, #24]
  40811c:	2900      	cmp	r1, #0
  40811e:	460b      	mov	r3, r1
  408120:	dd08      	ble.n	408134 <.LVL151>
  408122:	42b9      	cmp	r1, r7
  408124:	9a07      	ldr	r2, [sp, #28]
  408126:	bfa8      	it	ge
  408128:	463b      	movge	r3, r7

0040812a <.LVL147>:
  40812a:	1ad2      	subs	r2, r2, r3
  40812c:	1aff      	subs	r7, r7, r3

0040812e <.LVL148>:
  40812e:	1acb      	subs	r3, r1, r3

00408130 <.LVL149>:
  408130:	9207      	str	r2, [sp, #28]

00408132 <.LVL150>:
  408132:	9306      	str	r3, [sp, #24]

00408134 <.LVL151>:
  408134:	9b05      	ldr	r3, [sp, #20]
  408136:	b1eb      	cbz	r3, 408174 <.LVL162>
  408138:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40813a:	2b00      	cmp	r3, #0
  40813c:	f000 8273 	beq.w	408626 <.LVL308>
  408140:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408142:	2b00      	cmp	r3, #0
  408144:	dd11      	ble.n	40816a <.LVL160>
  408146:	461a      	mov	r2, r3
  408148:	4629      	mov	r1, r5
  40814a:	4620      	mov	r0, r4

0040814c <.LVL152>:
  40814c:	f008 fcf8 	bl	410b40 <__pow5mult>

00408150 <.LVL153>:
  408150:	4642      	mov	r2, r8
  408152:	4601      	mov	r1, r0
  408154:	4605      	mov	r5, r0

00408156 <.LVL154>:
  408156:	4620      	mov	r0, r4

00408158 <.LVL155>:
  408158:	f006 fd1c 	bl	40eb94 <.LBE11>

0040815c <.LVL156>:
  40815c:	4641      	mov	r1, r8
  40815e:	900e      	str	r0, [sp, #56]	; 0x38

00408160 <.LVL157>:
  408160:	4620      	mov	r0, r4

00408162 <.LVL158>:
  408162:	f00a fe31 	bl	412dc8 <_Bfree>

00408166 <.LVL159>:
  408166:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408168:	4698      	mov	r8, r3

0040816a <.LVL160>:
  40816a:	9b05      	ldr	r3, [sp, #20]
  40816c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40816e:	1a9a      	subs	r2, r3, r2

00408170 <.LVL161>:
  408170:	f040 825a 	bne.w	408628 <.LVL308+0x2>

00408174 <.LVL162>:
  408174:	2101      	movs	r1, #1
  408176:	4620      	mov	r0, r4

00408178 <.LVL163>:
  408178:	f00a fe30 	bl	412ddc <__i2b>

0040817c <.LVL164>:
  40817c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40817e:	9005      	str	r0, [sp, #20]

00408180 <.LVL165>:
  408180:	2b00      	cmp	r3, #0
  408182:	dd1f      	ble.n	4081c4 <.LVL174>
  408184:	4601      	mov	r1, r0
  408186:	461a      	mov	r2, r3
  408188:	4620      	mov	r0, r4

0040818a <.LVL166>:
  40818a:	f008 fcd9 	bl	410b40 <__pow5mult>

0040818e <.LVL167>:
  40818e:	9b01      	ldr	r3, [sp, #4]
  408190:	9005      	str	r0, [sp, #20]

00408192 <.LVL168>:
  408192:	2b01      	cmp	r3, #1
  408194:	f340 820f 	ble.w	4085b6 <.LVL293>
  408198:	2300      	movs	r3, #0
  40819a:	930d      	str	r3, [sp, #52]	; 0x34

0040819c <.LVL169>:
  40819c:	9a05      	ldr	r2, [sp, #20]
  40819e:	6913      	ldr	r3, [r2, #16]
  4081a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4081a4:	6918      	ldr	r0, [r3, #16]
  4081a6:	f00a f8f1 	bl	41238c <.LFE3>

004081aa <.LVL170>:
  4081aa:	f1c0 0020 	rsb	r0, r0, #32
  4081ae:	e013      	b.n	4081d8 <.LVL175+0x8>

004081b0 <.LVL171>:
  4081b0:	f1c3 0320 	rsb	r3, r3, #32

004081b4 <.LVL172>:
  4081b4:	fa0a f303 	lsl.w	r3, sl, r3
  4081b8:	ee07 3a90 	vmov	s15, r3
  4081bc:	e6b8      	b.n	407f30 <.LVL97>

004081be <.LVL173>:
  4081be:	2300      	movs	r3, #0
  4081c0:	930b      	str	r3, [sp, #44]	; 0x2c
  4081c2:	e67d      	b.n	407ec0 <.LVL77>

004081c4 <.LVL174>:
  4081c4:	9b01      	ldr	r3, [sp, #4]
  4081c6:	2b01      	cmp	r3, #1
  4081c8:	f340 823e 	ble.w	408648 <.LVL314>
  4081cc:	2300      	movs	r3, #0
  4081ce:	930d      	str	r3, [sp, #52]	; 0x34

004081d0 <.LVL175>:
  4081d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4081d2:	2001      	movs	r0, #1
  4081d4:	2b00      	cmp	r3, #0
  4081d6:	d1e1      	bne.n	40819c <.LVL169>
  4081d8:	9a06      	ldr	r2, [sp, #24]
  4081da:	4410      	add	r0, r2

004081dc <.LVL176>:
  4081dc:	f010 001f 	ands.w	r0, r0, #31

004081e0 <.LVL177>:
  4081e0:	f000 809e 	beq.w	408320 <.LVL217>
  4081e4:	f1c0 0320 	rsb	r3, r0, #32

004081e8 <.LVL178>:
  4081e8:	2b04      	cmp	r3, #4
  4081ea:	f340 83d4 	ble.w	408996 <.LVL446>
  4081ee:	9b07      	ldr	r3, [sp, #28]

004081f0 <.LVL179>:
  4081f0:	f1c0 001c 	rsb	r0, r0, #28

004081f4 <.LVL180>:
  4081f4:	4403      	add	r3, r0
  4081f6:	9307      	str	r3, [sp, #28]

004081f8 <.LVL181>:
  4081f8:	4613      	mov	r3, r2

004081fa <.LVL182>:
  4081fa:	4403      	add	r3, r0
  4081fc:	4407      	add	r7, r0
  4081fe:	9306      	str	r3, [sp, #24]

00408200 <.LVL184>:
  408200:	9b07      	ldr	r3, [sp, #28]
  408202:	2b00      	cmp	r3, #0
  408204:	dd05      	ble.n	408212 <.LVL185+0x2>
  408206:	4641      	mov	r1, r8
  408208:	461a      	mov	r2, r3
  40820a:	4620      	mov	r0, r4
  40820c:	f008 fb50 	bl	4108b0 <.LFE25>

00408210 <.LVL185>:
  408210:	4680      	mov	r8, r0
  408212:	9b06      	ldr	r3, [sp, #24]
  408214:	2b00      	cmp	r3, #0
  408216:	dd05      	ble.n	408224 <.LVL187+0x2>
  408218:	461a      	mov	r2, r3
  40821a:	9905      	ldr	r1, [sp, #20]
  40821c:	4620      	mov	r0, r4
  40821e:	f008 fb47 	bl	4108b0 <.LFE25>

00408222 <.LVL187>:
  408222:	9005      	str	r0, [sp, #20]
  408224:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408226:	2b00      	cmp	r3, #0
  408228:	f040 8083 	bne.w	408332 <.LVL223>
  40822c:	2e00      	cmp	r6, #0
  40822e:	f340 821e 	ble.w	40866e <.LVL322>
  408232:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408234:	2b00      	cmp	r3, #0
  408236:	f000 8096 	beq.w	408366 <.LVL230>

0040823a <.LVL189>:
  40823a:	2f00      	cmp	r7, #0
  40823c:	dd05      	ble.n	40824a <.LVL191>
  40823e:	4629      	mov	r1, r5
  408240:	463a      	mov	r2, r7
  408242:	4620      	mov	r0, r4
  408244:	f008 fb34 	bl	4108b0 <.LFE25>

00408248 <.LVL190>:
  408248:	4605      	mov	r5, r0

0040824a <.LVL191>:
  40824a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40824c:	2b00      	cmp	r3, #0
  40824e:	f040 82ce 	bne.w	4087ee <.LVL378>
  408252:	462f      	mov	r7, r5

00408254 <.LVL192>:
  408254:	9b08      	ldr	r3, [sp, #32]
  408256:	3e01      	subs	r6, #1
  408258:	199a      	adds	r2, r3, r6
  40825a:	9209      	str	r2, [sp, #36]	; 0x24
  40825c:	f00a 0201 	and.w	r2, sl, #1
  408260:	920a      	str	r2, [sp, #40]	; 0x28

00408262 <.LVL193>:
  408262:	461e      	mov	r6, r3

00408264 <.LVL194>:
  408264:	f8dd b014 	ldr.w	fp, [sp, #20]
  408268:	4640      	mov	r0, r8
  40826a:	4659      	mov	r1, fp
  40826c:	f006 fb6c 	bl	40e948 <.LFE21>

00408270 <.LVL195>:
  408270:	4629      	mov	r1, r5
  408272:	4682      	mov	sl, r0

00408274 <.LVL196>:
  408274:	4640      	mov	r0, r8
  408276:	f00a f977 	bl	412568 <.LFE17>

0040827a <.LVL197>:
  40827a:	463a      	mov	r2, r7
  40827c:	4659      	mov	r1, fp
  40827e:	4681      	mov	r9, r0
  408280:	4620      	mov	r0, r4
  408282:	f006 fe31 	bl	40eee8 <.LFE20>

00408286 <.LVL198>:
  408286:	68c3      	ldr	r3, [r0, #12]
  408288:	4683      	mov	fp, r0
  40828a:	f10a 0230 	add.w	r2, sl, #48	; 0x30

0040828e <.LVL199>:
  40828e:	2b00      	cmp	r3, #0
  408290:	f040 81e5 	bne.w	40865e <.LVL318>
  408294:	4601      	mov	r1, r0
  408296:	4640      	mov	r0, r8

00408298 <.LVL200>:
  408298:	9207      	str	r2, [sp, #28]
  40829a:	f00a f965 	bl	412568 <.LFE17>

0040829e <.LVL201>:
  40829e:	4659      	mov	r1, fp
  4082a0:	9006      	str	r0, [sp, #24]

004082a2 <.LVL202>:
  4082a2:	4620      	mov	r0, r4

004082a4 <.LVL203>:
  4082a4:	f00a fd90 	bl	412dc8 <_Bfree>

004082a8 <.LVL204>:
  4082a8:	9b06      	ldr	r3, [sp, #24]
  4082aa:	9a07      	ldr	r2, [sp, #28]
  4082ac:	b933      	cbnz	r3, 4082bc <.LVL205>
  4082ae:	9901      	ldr	r1, [sp, #4]
  4082b0:	b921      	cbnz	r1, 4082bc <.LVL205>
  4082b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4082b4:	2b00      	cmp	r3, #0
  4082b6:	f000 8343 	beq.w	408940 <.LVL432>
  4082ba:	9b01      	ldr	r3, [sp, #4]

004082bc <.LVL205>:
  4082bc:	f1b9 0f00 	cmp.w	r9, #0
  4082c0:	f2c0 823b 	blt.w	40873a <.LVL352>
  4082c4:	d105      	bne.n	4082d2 <.LVL205+0x16>
  4082c6:	9901      	ldr	r1, [sp, #4]
  4082c8:	b919      	cbnz	r1, 4082d2 <.LVL205+0x16>
  4082ca:	990a      	ldr	r1, [sp, #40]	; 0x28
  4082cc:	2900      	cmp	r1, #0
  4082ce:	f000 8234 	beq.w	40873a <.LVL352>
  4082d2:	2b00      	cmp	r3, #0
  4082d4:	f300 829f 	bgt.w	408816 <.LVL385>
  4082d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4082da:	7032      	strb	r2, [r6, #0]
  4082dc:	f106 0901 	add.w	r9, r6, #1

004082e0 <.LVL206>:
  4082e0:	429e      	cmp	r6, r3
  4082e2:	46cb      	mov	fp, r9

004082e4 <.LVL207>:
  4082e4:	f000 82a2 	beq.w	40882c <.LVL390>
  4082e8:	4641      	mov	r1, r8
  4082ea:	2300      	movs	r3, #0
  4082ec:	220a      	movs	r2, #10
  4082ee:	4620      	mov	r0, r4
  4082f0:	f009 f91c 	bl	41152c <.LFE146>

004082f4 <.LVL208>:
  4082f4:	42bd      	cmp	r5, r7
  4082f6:	4680      	mov	r8, r0

004082f8 <.LVL209>:
  4082f8:	4629      	mov	r1, r5
  4082fa:	f04f 0300 	mov.w	r3, #0
  4082fe:	f04f 020a 	mov.w	r2, #10
  408302:	4620      	mov	r0, r4

00408304 <.LVL210>:
  408304:	f000 81a5 	beq.w	408652 <.LVL315>

00408308 <.LVL211>:
  408308:	f009 f910 	bl	41152c <.LFE146>

0040830c <.LVL212>:
  40830c:	4639      	mov	r1, r7
  40830e:	4605      	mov	r5, r0

00408310 <.LVL213>:
  408310:	2300      	movs	r3, #0
  408312:	220a      	movs	r2, #10
  408314:	4620      	mov	r0, r4

00408316 <.LVL214>:
  408316:	f009 f909 	bl	41152c <.LFE146>

0040831a <.LVL215>:
  40831a:	464e      	mov	r6, r9
  40831c:	4607      	mov	r7, r0

0040831e <.LVL216>:
  40831e:	e7a1      	b.n	408264 <.LVL194>

00408320 <.LVL217>:
  408320:	201c      	movs	r0, #28

00408322 <.LVL218>:
  408322:	9b07      	ldr	r3, [sp, #28]
  408324:	4403      	add	r3, r0
  408326:	9307      	str	r3, [sp, #28]

00408328 <.LVL219>:
  408328:	9b06      	ldr	r3, [sp, #24]

0040832a <.LVL220>:
  40832a:	4403      	add	r3, r0
  40832c:	4407      	add	r7, r0
  40832e:	9306      	str	r3, [sp, #24]

00408330 <.LVL222>:
  408330:	e766      	b.n	408200 <.LVL184>

00408332 <.LVL223>:
  408332:	9905      	ldr	r1, [sp, #20]
  408334:	4640      	mov	r0, r8
  408336:	f00a f917 	bl	412568 <.LFE17>

0040833a <.LVL224>:
  40833a:	2800      	cmp	r0, #0
  40833c:	f6bf af76 	bge.w	40822c <.LVL187+0xa>
  408340:	9e02      	ldr	r6, [sp, #8]

00408342 <.LVL225>:
  408342:	4641      	mov	r1, r8
  408344:	2300      	movs	r3, #0
  408346:	220a      	movs	r2, #10
  408348:	4620      	mov	r0, r4
  40834a:	3e01      	subs	r6, #1
  40834c:	9602      	str	r6, [sp, #8]

0040834e <.LVL226>:
  40834e:	f009 f8ed 	bl	41152c <.LFE146>

00408352 <.LVL227>:
  408352:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408354:	4680      	mov	r8, r0

00408356 <.LVL228>:
  408356:	2b00      	cmp	r3, #0
  408358:	f040 8302 	bne.w	408960 <.LVL436>

0040835c <.LVL229>:
  40835c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40835e:	2b00      	cmp	r3, #0
  408360:	f340 830a 	ble.w	408978 <.LVL440>
  408364:	461e      	mov	r6, r3

00408366 <.LVL230>:
  408366:	f8dd a020 	ldr.w	sl, [sp, #32]

0040836a <.LVL231>:
  40836a:	f8dd b014 	ldr.w	fp, [sp, #20]
  40836e:	4657      	mov	r7, sl

00408370 <.LVL232>:
  408370:	e002      	b.n	408378 <.LVL235>

00408372 <.LVL233>:
  408372:	f009 f8db 	bl	41152c <.LFE146>

00408376 <.LVL234>:
  408376:	4680      	mov	r8, r0

00408378 <.LVL235>:
  408378:	4659      	mov	r1, fp
  40837a:	4640      	mov	r0, r8
  40837c:	f006 fae4 	bl	40e948 <.LFE21>

00408380 <.LVL236>:
  408380:	f100 0930 	add.w	r9, r0, #48	; 0x30

00408384 <.LVL237>:
  408384:	f807 9b01 	strb.w	r9, [r7], #1

00408388 <.LVL238>:
  408388:	eba7 030a 	sub.w	r3, r7, sl
  40838c:	42b3      	cmp	r3, r6
  40838e:	f04f 020a 	mov.w	r2, #10
  408392:	f04f 0300 	mov.w	r3, #0
  408396:	4641      	mov	r1, r8
  408398:	4620      	mov	r0, r4
  40839a:	dbea      	blt.n	408372 <.LVL233>

0040839c <.LVL239>:
  40839c:	9b08      	ldr	r3, [sp, #32]
  40839e:	2e01      	cmp	r6, #1
  4083a0:	bfac      	ite	ge
  4083a2:	199b      	addge	r3, r3, r6
  4083a4:	3301      	addlt	r3, #1
  4083a6:	469b      	mov	fp, r3
  4083a8:	f04f 0a00 	mov.w	sl, #0

004083ac <.LVL240>:
  4083ac:	4641      	mov	r1, r8
  4083ae:	2201      	movs	r2, #1
  4083b0:	4620      	mov	r0, r4
  4083b2:	f008 fa7d 	bl	4108b0 <.LFE25>

004083b6 <.LVL241>:
  4083b6:	9905      	ldr	r1, [sp, #20]
  4083b8:	4680      	mov	r8, r0

004083ba <.LVL242>:
  4083ba:	f00a f8d5 	bl	412568 <.LFE17>

004083be <.LVL243>:
  4083be:	2800      	cmp	r0, #0
  4083c0:	f340 81d7 	ble.w	408772 <.LVL362>
  4083c4:	f81b 2c01 	ldrb.w	r2, [fp, #-1]

004083c8 <.L142>:
  4083c8:	9908      	ldr	r1, [sp, #32]
  4083ca:	f10b 33ff 	add.w	r3, fp, #4294967295
  4083ce:	e004      	b.n	4083da <.LVL246>

004083d0 <.LVL245>:
  4083d0:	428b      	cmp	r3, r1
  4083d2:	f000 8168 	beq.w	4086a6 <.LVL331>
  4083d6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!

004083da <.LVL246>:
  4083da:	2a39      	cmp	r2, #57	; 0x39
  4083dc:	f103 0b01 	add.w	fp, r3, #1

004083e0 <.LVL247>:
  4083e0:	d0f6      	beq.n	4083d0 <.LVL245>

004083e2 <.LVL248>:
  4083e2:	3201      	adds	r2, #1
  4083e4:	701a      	strb	r2, [r3, #0]

004083e6 <.L135>:
  4083e6:	9905      	ldr	r1, [sp, #20]
  4083e8:	4620      	mov	r0, r4
  4083ea:	f00a fced 	bl	412dc8 <_Bfree>

004083ee <.LVL250>:
  4083ee:	2d00      	cmp	r5, #0
  4083f0:	f43f ae22 	beq.w	408038 <.L76>
  4083f4:	f1ba 0f00 	cmp.w	sl, #0
  4083f8:	d005      	beq.n	408406 <.LVL251>
  4083fa:	45aa      	cmp	sl, r5
  4083fc:	d003      	beq.n	408406 <.LVL251>
  4083fe:	4651      	mov	r1, sl
  408400:	4620      	mov	r0, r4
  408402:	f00a fce1 	bl	412dc8 <_Bfree>

00408406 <.LVL251>:
  408406:	4629      	mov	r1, r5
  408408:	4620      	mov	r0, r4
  40840a:	f00a fcdd 	bl	412dc8 <_Bfree>

0040840e <.LVL252>:
  40840e:	e613      	b.n	408038 <.L76>

00408410 <.LVL253>:
  408410:	2300      	movs	r3, #0
  408412:	9309      	str	r3, [sp, #36]	; 0x24

00408414 <.LVL254>:
  408414:	9b02      	ldr	r3, [sp, #8]
  408416:	444b      	add	r3, r9
  408418:	1c5e      	adds	r6, r3, #1

0040841a <.LVL255>:
  40841a:	2e01      	cmp	r6, #1
  40841c:	4637      	mov	r7, r6
  40841e:	930c      	str	r3, [sp, #48]	; 0x30

00408420 <.LVL256>:
  408420:	bfb8      	it	lt
  408422:	2701      	movlt	r7, #1
  408424:	960e      	str	r6, [sp, #56]	; 0x38

00408426 <.LVL257>:
  408426:	2100      	movs	r1, #0
  408428:	2f17      	cmp	r7, #23
  40842a:	6461      	str	r1, [r4, #68]	; 0x44
  40842c:	d90a      	bls.n	408444 <.LVL260>
  40842e:	2201      	movs	r2, #1
  408430:	2304      	movs	r3, #4

00408432 <.LVL258>:
  408432:	005b      	lsls	r3, r3, #1
  408434:	f103 0014 	add.w	r0, r3, #20
  408438:	4287      	cmp	r7, r0
  40843a:	4611      	mov	r1, r2
  40843c:	f102 0201 	add.w	r2, r2, #1
  408440:	d2f7      	bcs.n	408432 <.LVL258>
  408442:	6461      	str	r1, [r4, #68]	; 0x44

00408444 <.LVL260>:
  408444:	4620      	mov	r0, r4
  408446:	f009 fda1 	bl	411f8c <.LFE2>

0040844a <.LVL261>:
  40844a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40844c:	9008      	str	r0, [sp, #32]
  40844e:	2b0e      	cmp	r3, #14
  408450:	6420      	str	r0, [r4, #64]	; 0x40

00408452 <.LVL262>:
  408452:	f63f ad88 	bhi.w	407f66 <.LVL104>

00408456 <.LVL263>:
  408456:	2d00      	cmp	r5, #0
  408458:	f43f ad85 	beq.w	407f66 <.LVL104>

0040845c <.LVL264>:
  40845c:	9802      	ldr	r0, [sp, #8]
  40845e:	2800      	cmp	r0, #0
  408460:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38

00408464 <.LVL265>:
  408464:	f340 819a 	ble.w	40879c <.LVL368>
  408468:	4ac8      	ldr	r2, [pc, #800]	; (40878c <.LVL365+0x4>)
  40846a:	f000 030f 	and.w	r3, r0, #15
  40846e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  408472:	1103      	asrs	r3, r0, #4
  408474:	06df      	lsls	r7, r3, #27
  408476:	ed92 7b00 	vldr	d7, [r2]

0040847a <.LVL266>:
  40847a:	f140 814d 	bpl.w	408718 <.LVL348>
  40847e:	4ac4      	ldr	r2, [pc, #784]	; (408790 <.LVL365+0x8>)
  408480:	ed92 6b08 	vldr	d6, [r2, #32]
  408484:	ec4b ab14 	vmov	d4, sl, fp

00408488 <.LVL267>:
  408488:	f003 030f 	and.w	r3, r3, #15
  40848c:	2103      	movs	r1, #3
  40848e:	ee84 5b06 	vdiv.f64	d5, d4, d6

00408492 <.LVL269>:
  408492:	b15b      	cbz	r3, 4084ac <.LVL273+0x6>
  408494:	4abe      	ldr	r2, [pc, #760]	; (408790 <.LVL365+0x8>)

00408496 <.LVL270>:
  408496:	07dd      	lsls	r5, r3, #31
  408498:	d504      	bpl.n	4084a4 <.LVL272>
  40849a:	ed92 6b00 	vldr	d6, [r2]
  40849e:	3101      	adds	r1, #1
  4084a0:	ee27 7b06 	vmul.f64	d7, d7, d6

004084a4 <.LVL272>:
  4084a4:	105b      	asrs	r3, r3, #1

004084a6 <.LVL273>:
  4084a6:	f102 0208 	add.w	r2, r2, #8
  4084aa:	d1f4      	bne.n	408496 <.LVL270>
  4084ac:	ee85 6b07 	vdiv.f64	d6, d5, d7

004084b0 <.LVL274>:
  4084b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4084b2:	b13b      	cbz	r3, 4084c4 <.LVL275>
  4084b4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
  4084b8:	eeb4 6bc7 	vcmpe.f64	d6, d7
  4084bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4084c0:	f100 8206 	bmi.w	4088d0 <.LVL416>

004084c4 <.LVL275>:
  4084c4:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
  4084c8:	ee07 1a90 	vmov	s15, r1
  4084cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  4084d0:	eea7 5b06 	vfma.f64	d5, d7, d6
  4084d4:	ec51 0b15 	vmov	r0, r1, d5
  4084d8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000

004084dc <.LVL276>:
  4084dc:	2e00      	cmp	r6, #0
  4084de:	f000 80f8 	beq.w	4086d2 <.LVL336>
  4084e2:	9a02      	ldr	r2, [sp, #8]
  4084e4:	4635      	mov	r5, r6

004084e6 <.LVL277>:
  4084e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4084e8:	2b00      	cmp	r3, #0
  4084ea:	f000 81a7 	beq.w	40883c <.LVL396>
  4084ee:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
  4084f2:	4ba6      	ldr	r3, [pc, #664]	; (40878c <.LVL365+0x4>)
  4084f4:	9f08      	ldr	r7, [sp, #32]
  4084f6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  4084fa:	ed13 4b02 	vldr	d4, [r3, #-8]
  4084fe:	eebd 7bc6 	vcvt.s32.f64	s14, d6
  408502:	ee83 5b04 	vdiv.f64	d5, d3, d4
  408506:	ee17 3a10 	vmov	r3, s14

0040850a <.LVL278>:
  40850a:	ec41 0b14 	vmov	d4, r0, r1
  40850e:	3330      	adds	r3, #48	; 0x30
  408510:	b2db      	uxtb	r3, r3
  408512:	ee35 5b44 	vsub.f64	d5, d5, d4

00408516 <.LVL279>:
  408516:	eeb8 7bc7 	vcvt.f64.s32	d7, s14

0040851a <.LVL280>:
  40851a:	ee36 7b47 	vsub.f64	d7, d6, d7
  40851e:	eeb4 5bc7 	vcmpe.f64	d5, d7
  408522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  408526:	703b      	strb	r3, [r7, #0]
  408528:	f107 0b01 	add.w	fp, r7, #1

0040852c <.LVL281>:
  40852c:	dc31      	bgt.n	408592 <.LVL288+0xe>
  40852e:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
  408532:	ee33 6b47 	vsub.f64	d6, d3, d7

00408536 <.LVL282>:
  408536:	eeb4 5bc6 	vcmpe.f64	d5, d6
  40853a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40853e:	f300 81fa 	bgt.w	408936 <.LVL428>

00408542 <.LVL283>:
  408542:	2d01      	cmp	r5, #1
  408544:	f000 8126 	beq.w	408794 <.LDL1>
  408548:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
  40854c:	9b08      	ldr	r3, [sp, #32]
  40854e:	1959      	adds	r1, r3, r5
  408550:	e00a      	b.n	408568 <.LVL285>

00408552 <.LVL284>:
  408552:	ee33 6b47 	vsub.f64	d6, d3, d7
  408556:	eeb4 6bc5 	vcmpe.f64	d6, d5
  40855a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40855e:	f100 81ea 	bmi.w	408936 <.LVL428>
  408562:	458b      	cmp	fp, r1
  408564:	f000 8116 	beq.w	408794 <.LDL1>

00408568 <.LVL285>:
  408568:	ee27 7b04 	vmul.f64	d7, d7, d4
  40856c:	ee25 5b04 	vmul.f64	d5, d5, d4
  408570:	eebd 6bc7 	vcvt.s32.f64	s12, d7

00408574 <.LVL286>:
  408574:	ee16 3a10 	vmov	r3, s12
  408578:	3330      	adds	r3, #48	; 0x30
  40857a:	b2db      	uxtb	r3, r3
  40857c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12

00408580 <.LVL287>:
  408580:	ee37 7b46 	vsub.f64	d7, d7, d6

00408584 <.LVL288>:
  408584:	eeb4 7bc5 	vcmpe.f64	d7, d5
  408588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40858c:	f80b 3b01 	strb.w	r3, [fp], #1
  408590:	d5df      	bpl.n	408552 <.LVL284>
  408592:	9202      	str	r2, [sp, #8]

00408594 <.LVL289>:
  408594:	e550      	b.n	408038 <.L76>

00408596 <.LVL290>:
  408596:	2300      	movs	r3, #0
  408598:	9309      	str	r3, [sp, #36]	; 0x24

0040859a <.LVL291>:
  40859a:	f1b9 0f00 	cmp.w	r9, #0
  40859e:	f340 80bf 	ble.w	408720 <.LVL349>
  4085a2:	464f      	mov	r7, r9
  4085a4:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  4085a8:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  4085ac:	464e      	mov	r6, r9
  4085ae:	e73a      	b.n	408426 <.LVL257>

004085b0 <.LVL292>:
  4085b0:	2301      	movs	r3, #1
  4085b2:	9309      	str	r3, [sp, #36]	; 0x24
  4085b4:	e7f1      	b.n	40859a <.LVL291>

004085b6 <.LVL293>:
  4085b6:	f1ba 0f00 	cmp.w	sl, #0
  4085ba:	f47f aded 	bne.w	408198 <.LVL168+0x6>

004085be <.LVL294>:
  4085be:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4085c2:	2b00      	cmp	r3, #0
  4085c4:	f47f ae02 	bne.w	4081cc <.LVL174+0x8>
  4085c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
  4085cc:	0d1b      	lsrs	r3, r3, #20
  4085ce:	051b      	lsls	r3, r3, #20
  4085d0:	2b00      	cmp	r3, #0
  4085d2:	f000 81b3 	beq.w	40893c <.LVL430>
  4085d6:	9b07      	ldr	r3, [sp, #28]
  4085d8:	3301      	adds	r3, #1
  4085da:	9307      	str	r3, [sp, #28]

004085dc <.LVL295>:
  4085dc:	9b06      	ldr	r3, [sp, #24]

004085de <.LVL296>:
  4085de:	3301      	adds	r3, #1
  4085e0:	9306      	str	r3, [sp, #24]

004085e2 <.LVL297>:
  4085e2:	2301      	movs	r3, #1

004085e4 <.LVL298>:
  4085e4:	930d      	str	r3, [sp, #52]	; 0x34

004085e6 <.LVL299>:
  4085e6:	e5f3      	b.n	4081d0 <.LVL175>

004085e8 <.LVL300>:
  4085e8:	2e00      	cmp	r6, #0
  4085ea:	f73f accb 	bgt.w	407f84 <.LVL106>

004085ee <.LVL301>:
  4085ee:	f040 8083 	bne.w	4086f8 <.LVL338>
  4085f2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
  4085f6:	ee24 4b07 	vmul.f64	d4, d4, d7

004085fa <.LVL302>:
  4085fa:	ec4b ab17 	vmov	d7, sl, fp
  4085fe:	eeb4 4bc7 	vcmpe.f64	d4, d7
  408602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  408606:	4635      	mov	r5, r6
  408608:	9605      	str	r6, [sp, #20]

0040860a <.LVL303>:
  40860a:	db43      	blt.n	408694 <.L73>

0040860c <.L74>:
  40860c:	ea6f 0309 	mvn.w	r3, r9
  408610:	f8dd b020 	ldr.w	fp, [sp, #32]
  408614:	9302      	str	r3, [sp, #8]

00408616 <.LVL305>:
  408616:	9905      	ldr	r1, [sp, #20]
  408618:	4620      	mov	r0, r4

0040861a <.LVL306>:
  40861a:	f00a fbd5 	bl	412dc8 <_Bfree>

0040861e <.LVL307>:
  40861e:	2d00      	cmp	r5, #0
  408620:	f43f ad0a 	beq.w	408038 <.L76>
  408624:	e6ef      	b.n	408406 <.LVL251>

00408626 <.LVL308>:
  408626:	9a05      	ldr	r2, [sp, #20]
  408628:	4641      	mov	r1, r8
  40862a:	4620      	mov	r0, r4

0040862c <.LVL309>:
  40862c:	f008 fa88 	bl	410b40 <__pow5mult>

00408630 <.LVL310>:
  408630:	4680      	mov	r8, r0

00408632 <.LVL311>:
  408632:	e59f      	b.n	408174 <.LVL162>

00408634 <.LVL312>:
  408634:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  408636:	2a00      	cmp	r2, #0
  408638:	f000 813e 	beq.w	4088b8 <.LVL413>
  40863c:	9a05      	ldr	r2, [sp, #20]
  40863e:	920d      	str	r2, [sp, #52]	; 0x34

00408640 <.LVL313>:
  408640:	f203 4333 	addw	r3, r3, #1075	; 0x433
  408644:	9f07      	ldr	r7, [sp, #28]
  408646:	e51f      	b.n	408088 <.LVL127>

00408648 <.LVL314>:
  408648:	f1ba 0f00 	cmp.w	sl, #0
  40864c:	f47f adbe 	bne.w	4081cc <.LVL174+0x8>
  408650:	e7b5      	b.n	4085be <.LVL294>

00408652 <.LVL315>:
  408652:	f008 ff6b 	bl	41152c <.LFE146>

00408656 <.LVL316>:
  408656:	464e      	mov	r6, r9
  408658:	4605      	mov	r5, r0

0040865a <.LVL317>:
  40865a:	4607      	mov	r7, r0
  40865c:	e602      	b.n	408264 <.LVL194>

0040865e <.LVL318>:
  40865e:	4601      	mov	r1, r0
  408660:	4620      	mov	r0, r4

00408662 <.LVL319>:
  408662:	9206      	str	r2, [sp, #24]

00408664 <.LVL320>:
  408664:	f00a fbb0 	bl	412dc8 <_Bfree>

00408668 <.LVL321>:
  408668:	2301      	movs	r3, #1
  40866a:	9a06      	ldr	r2, [sp, #24]
  40866c:	e626      	b.n	4082bc <.LVL205>

0040866e <.LVL322>:
  40866e:	9b01      	ldr	r3, [sp, #4]
  408670:	2b02      	cmp	r3, #2
  408672:	f77f adde 	ble.w	408232 <.LVL187+0x10>

00408676 <.LVL323>:
  408676:	2e00      	cmp	r6, #0
  408678:	d1c8      	bne.n	40860c <.L74>
  40867a:	4633      	mov	r3, r6
  40867c:	9905      	ldr	r1, [sp, #20]
  40867e:	2205      	movs	r2, #5
  408680:	4620      	mov	r0, r4
  408682:	f008 ff53 	bl	41152c <.LFE146>

00408686 <.LVL324>:
  408686:	4601      	mov	r1, r0
  408688:	9005      	str	r0, [sp, #20]

0040868a <.LVL325>:
  40868a:	4640      	mov	r0, r8

0040868c <.LVL326>:
  40868c:	f009 ff6c 	bl	412568 <.LFE17>

00408690 <.LVL327>:
  408690:	2800      	cmp	r0, #0
  408692:	ddbb      	ble.n	40860c <.L74>

00408694 <.L73>:
  408694:	9a02      	ldr	r2, [sp, #8]
  408696:	9908      	ldr	r1, [sp, #32]
  408698:	2331      	movs	r3, #49	; 0x31
  40869a:	3201      	adds	r2, #1
  40869c:	9202      	str	r2, [sp, #8]

0040869e <.LVL329>:
  40869e:	700b      	strb	r3, [r1, #0]
  4086a0:	f101 0b01 	add.w	fp, r1, #1

004086a4 <.LVL330>:
  4086a4:	e7b7      	b.n	408616 <.LVL305>

004086a6 <.LVL331>:
  4086a6:	9a02      	ldr	r2, [sp, #8]
  4086a8:	3201      	adds	r2, #1
  4086aa:	9202      	str	r2, [sp, #8]

004086ac <.LVL332>:
  4086ac:	9a08      	ldr	r2, [sp, #32]

004086ae <.LVL333>:
  4086ae:	2331      	movs	r3, #49	; 0x31
  4086b0:	7013      	strb	r3, [r2, #0]
  4086b2:	e698      	b.n	4083e6 <.L135>

004086b4 <.LVL334>:
  4086b4:	2301      	movs	r3, #1
  4086b6:	9309      	str	r3, [sp, #36]	; 0x24
  4086b8:	e6ac      	b.n	408414 <.LVL254>

004086ba <.LVL335>:
  4086ba:	ee07 1a90 	vmov	s15, r1
  4086be:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
  4086c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  4086c6:	eea6 5b07 	vfma.f64	d5, d6, d7
  4086ca:	ec51 0b15 	vmov	r0, r1, d5
  4086ce:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000

004086d2 <.LVL336>:
  4086d2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
  4086d6:	ee36 7b47 	vsub.f64	d7, d6, d7

004086da <.LVL337>:
  4086da:	ec41 0b16 	vmov	d6, r0, r1
  4086de:	eeb4 7bc6 	vcmpe.f64	d7, d6
  4086e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4086e6:	f300 80a5 	bgt.w	408834 <.LVL394>
  4086ea:	eeb1 6b46 	vneg.f64	d6, d6
  4086ee:	eeb4 7bc6 	vcmpe.f64	d7, d6
  4086f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4086f6:	d54d      	bpl.n	408794 <.LDL1>

004086f8 <.LVL338>:
  4086f8:	2300      	movs	r3, #0
  4086fa:	9305      	str	r3, [sp, #20]

004086fc <.LVL339>:
  4086fc:	461d      	mov	r5, r3
  4086fe:	e785      	b.n	40860c <.L74>

00408700 <.LVL340>:
  408700:	9808      	ldr	r0, [sp, #32]
  408702:	f7ff bb6f 	b.w	407de4 <.LVL57>

00408706 <.LVL341>:
  408706:	9b05      	ldr	r3, [sp, #20]
  408708:	990a      	ldr	r1, [sp, #40]	; 0x28

0040870a <.LVL342>:
  40870a:	9205      	str	r2, [sp, #20]

0040870c <.LVL343>:
  40870c:	1ad3      	subs	r3, r2, r3

0040870e <.LVL344>:
  40870e:	4419      	add	r1, r3
  408710:	2300      	movs	r3, #0

00408712 <.LVL345>:
  408712:	910a      	str	r1, [sp, #40]	; 0x28

00408714 <.LVL346>:
  408714:	930d      	str	r3, [sp, #52]	; 0x34

00408716 <.LVL347>:
  408716:	e4b2      	b.n	40807e <.LVL126>

00408718 <.LVL348>:
  408718:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
  40871c:	2102      	movs	r1, #2
  40871e:	e6b8      	b.n	408492 <.LVL269>

00408720 <.LVL349>:
  408720:	2100      	movs	r1, #0
  408722:	6461      	str	r1, [r4, #68]	; 0x44
  408724:	4620      	mov	r0, r4
  408726:	f009 fc31 	bl	411f8c <.LFE2>

0040872a <.LVL350>:
  40872a:	f04f 0901 	mov.w	r9, #1
  40872e:	9008      	str	r0, [sp, #32]
  408730:	6420      	str	r0, [r4, #64]	; 0x40

00408732 <.LVL351>:
  408732:	464e      	mov	r6, r9
  408734:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  408738:	e68d      	b.n	408456 <.LVL263>

0040873a <.LVL352>:
  40873a:	2b00      	cmp	r3, #0
  40873c:	4691      	mov	r9, r2

0040873e <.LVL353>:
  40873e:	dd11      	ble.n	408764 <.LVL359>
  408740:	4641      	mov	r1, r8
  408742:	2201      	movs	r2, #1
  408744:	4620      	mov	r0, r4
  408746:	f008 f8b3 	bl	4108b0 <.LFE25>

0040874a <.LVL354>:
  40874a:	9905      	ldr	r1, [sp, #20]
  40874c:	4680      	mov	r8, r0

0040874e <.LVL355>:
  40874e:	f009 ff0b 	bl	412568 <.LFE17>

00408752 <.LVL356>:
  408752:	2800      	cmp	r0, #0
  408754:	f340 80fd 	ble.w	408952 <.LVL435>

00408758 <.LVL357>:
  408758:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  40875c:	f000 80d4 	beq.w	408908 <.L133>

00408760 <.LVL358>:
  408760:	f10a 0931 	add.w	r9, sl, #49	; 0x31

00408764 <.LVL359>:
  408764:	46aa      	mov	sl, r5
  408766:	f886 9000 	strb.w	r9, [r6]
  40876a:	f106 0b01 	add.w	fp, r6, #1

0040876e <.LVL360>:
  40876e:	463d      	mov	r5, r7

00408770 <.LVL361>:
  408770:	e639      	b.n	4083e6 <.L135>

00408772 <.LVL362>:
  408772:	d104      	bne.n	40877e <.LVL364>
  408774:	f019 0f01 	tst.w	r9, #1
  408778:	d001      	beq.n	40877e <.LVL364>
  40877a:	e623      	b.n	4083c4 <.LVL243+0x6>

0040877c <.LVL363>:
  40877c:	4693      	mov	fp, r2

0040877e <.LVL364>:
  40877e:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
  408782:	2b30      	cmp	r3, #48	; 0x30
  408784:	f10b 32ff 	add.w	r2, fp, #4294967295

00408788 <.LVL365>:
  408788:	d0f8      	beq.n	40877c <.LVL363>
  40878a:	e62c      	b.n	4083e6 <.L135>
  40878c:	0040fbb8 	.word	0x0040fbb8
  408790:	004128d8 	.word	0x004128d8

00408794 <.LDL1>:
  408794:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38

00408798 <.LVL367>:
  408798:	f7ff bbe5 	b.w	407f66 <.LVL104>

0040879c <.LVL368>:
  40879c:	f000 8094 	beq.w	4088c8 <.LVL415>
  4087a0:	9b02      	ldr	r3, [sp, #8]
  4087a2:	4a88      	ldr	r2, [pc, #544]	; (4089c4 <.LVL451+0x4>)
  4087a4:	425b      	negs	r3, r3

004087a6 <.LVL369>:
  4087a6:	f003 010f 	and.w	r1, r3, #15
  4087aa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
  4087ae:	ed92 6b00 	vldr	d6, [r2]
  4087b2:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
  4087b6:	111b      	asrs	r3, r3, #4

004087b8 <.LVL370>:
  4087b8:	ee27 6b06 	vmul.f64	d6, d7, d6
  4087bc:	f000 80e1 	beq.w	408982 <.LVL442>
  4087c0:	4a81      	ldr	r2, [pc, #516]	; (4089c8 <.LVL451+0x8>)
  4087c2:	2102      	movs	r1, #2

004087c4 <.LVL371>:
  4087c4:	07d8      	lsls	r0, r3, #31
  4087c6:	d504      	bpl.n	4087d2 <.LVL373>
  4087c8:	ed92 7b00 	vldr	d7, [r2]
  4087cc:	3101      	adds	r1, #1
  4087ce:	ee26 6b07 	vmul.f64	d6, d6, d7

004087d2 <.LVL373>:
  4087d2:	105b      	asrs	r3, r3, #1

004087d4 <.LVL374>:
  4087d4:	f102 0208 	add.w	r2, r2, #8
  4087d8:	d1f4      	bne.n	4087c4 <.LVL371>
  4087da:	e669      	b.n	4084b0 <.LVL274>

004087dc <.LVL375>:
  4087dc:	9908      	ldr	r1, [sp, #32]
  4087de:	2330      	movs	r3, #48	; 0x30
  4087e0:	700b      	strb	r3, [r1, #0]
  4087e2:	9b02      	ldr	r3, [sp, #8]
  4087e4:	3301      	adds	r3, #1
  4087e6:	9302      	str	r3, [sp, #8]

004087e8 <.LVL376>:
  4087e8:	f81b 3c01 	ldrb.w	r3, [fp, #-1]

004087ec <.LVL377>:
  4087ec:	e422      	b.n	408034 <.LVL120>

004087ee <.LVL378>:
  4087ee:	6869      	ldr	r1, [r5, #4]
  4087f0:	4620      	mov	r0, r4
  4087f2:	f009 fbcb 	bl	411f8c <.LFE2>

004087f6 <.LVL379>:
  4087f6:	692b      	ldr	r3, [r5, #16]
  4087f8:	3302      	adds	r3, #2
  4087fa:	4607      	mov	r7, r0

004087fc <.LVL380>:
  4087fc:	009a      	lsls	r2, r3, #2
  4087fe:	f105 010c 	add.w	r1, r5, #12
  408802:	300c      	adds	r0, #12

00408804 <.LVL381>:
  408804:	f005 fed6 	bl	40e5b4 <.LFE14>

00408808 <.LVL382>:
  408808:	4639      	mov	r1, r7
  40880a:	2201      	movs	r2, #1
  40880c:	4620      	mov	r0, r4
  40880e:	f008 f84f 	bl	4108b0 <.LFE25>

00408812 <.LVL383>:
  408812:	4607      	mov	r7, r0

00408814 <.LVL384>:
  408814:	e51e      	b.n	408254 <.LVL192>

00408816 <.LVL385>:
  408816:	2a39      	cmp	r2, #57	; 0x39
  408818:	d076      	beq.n	408908 <.L133>
  40881a:	f102 0901 	add.w	r9, r2, #1

0040881e <.LVL386>:
  40881e:	46aa      	mov	sl, r5

00408820 <.LVL387>:
  408820:	f886 9000 	strb.w	r9, [r6]
  408824:	f106 0b01 	add.w	fp, r6, #1

00408828 <.LVL388>:
  408828:	463d      	mov	r5, r7

0040882a <.LVL389>:
  40882a:	e5dc      	b.n	4083e6 <.L135>

0040882c <.LVL390>:
  40882c:	46aa      	mov	sl, r5

0040882e <.LVL391>:
  40882e:	4691      	mov	r9, r2

00408830 <.LVL392>:
  408830:	463d      	mov	r5, r7

00408832 <.LVL393>:
  408832:	e5bb      	b.n	4083ac <.LVL240>

00408834 <.LVL394>:
  408834:	2300      	movs	r3, #0
  408836:	9305      	str	r3, [sp, #20]

00408838 <.LVL395>:
  408838:	461d      	mov	r5, r3
  40883a:	e72b      	b.n	408694 <.L73>

0040883c <.LVL396>:
  40883c:	4b61      	ldr	r3, [pc, #388]	; (4089c4 <.LVL451+0x4>)
  40883e:	eebd 7bc6 	vcvt.s32.f64	s14, d6
  408842:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  408846:	ed13 4b02 	vldr	d4, [r3, #-8]
  40884a:	ee17 3a10 	vmov	r3, s14

0040884e <.LVL397>:
  40884e:	ec41 0b15 	vmov	d5, r0, r1
  408852:	9808      	ldr	r0, [sp, #32]

00408854 <.LVL398>:
  408854:	ee24 4b05 	vmul.f64	d4, d4, d5

00408858 <.LVL399>:
  408858:	3330      	adds	r3, #48	; 0x30

0040885a <.LVL400>:
  40885a:	2d01      	cmp	r5, #1
  40885c:	eeb8 7bc7 	vcvt.f64.s32	d7, s14

00408860 <.LVL401>:
  408860:	7003      	strb	r3, [r0, #0]
  408862:	f100 0b01 	add.w	fp, r0, #1

00408866 <.LVL402>:
  408866:	ee36 7b47 	vsub.f64	d7, d6, d7
  40886a:	d012      	beq.n	408892 <.LVL409>
  40886c:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
  408870:	9b08      	ldr	r3, [sp, #32]

00408872 <.LVL403>:
  408872:	1959      	adds	r1, r3, r5

00408874 <.LVL404>:
  408874:	ee27 7b05 	vmul.f64	d7, d7, d5
  408878:	eebd 6bc7 	vcvt.s32.f64	s12, d7

0040887c <.LVL405>:
  40887c:	ee16 3a10 	vmov	r3, s12
  408880:	3330      	adds	r3, #48	; 0x30
  408882:	f80b 3b01 	strb.w	r3, [fp], #1

00408886 <.LVL406>:
  408886:	458b      	cmp	fp, r1
  408888:	eeb8 6bc6 	vcvt.f64.s32	d6, s12

0040888c <.LVL407>:
  40888c:	ee37 7b46 	vsub.f64	d7, d7, d6

00408890 <.LVL408>:
  408890:	d1f0      	bne.n	408874 <.LVL404>

00408892 <.LVL409>:
  408892:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
  408896:	ee34 5b06 	vadd.f64	d5, d4, d6
  40889a:	eeb4 5bc7 	vcmpe.f64	d5, d7
  40889e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4088a2:	d538      	bpl.n	408916 <.LVL424>
  4088a4:	9202      	str	r2, [sp, #8]

004088a6 <.LVL410>:
  4088a6:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
  4088aa:	f7ff bbb6 	b.w	40801a <.L77>

004088ae <.LVL411>:
  4088ae:	9b07      	ldr	r3, [sp, #28]
  4088b0:	1b9f      	subs	r7, r3, r6

004088b2 <.LVL412>:
  4088b2:	2300      	movs	r3, #0
  4088b4:	f7ff bbe8 	b.w	408088 <.LVL127>

004088b8 <.LVL413>:
  4088b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4088ba:	9a05      	ldr	r2, [sp, #20]
  4088bc:	920d      	str	r2, [sp, #52]	; 0x34

004088be <.LVL414>:
  4088be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4088c2:	9f07      	ldr	r7, [sp, #28]
  4088c4:	f7ff bbe0 	b.w	408088 <.LVL127>

004088c8 <.LVL415>:
  4088c8:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
  4088cc:	2102      	movs	r1, #2
  4088ce:	e5ef      	b.n	4084b0 <.LVL274>

004088d0 <.LVL416>:
  4088d0:	2e00      	cmp	r6, #0
  4088d2:	f43f aef2 	beq.w	4086ba <.LVL335>
  4088d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4088d8:	2b00      	cmp	r3, #0
  4088da:	f77f af5b 	ble.w	408794 <.LDL1>

004088de <.LVL417>:
  4088de:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
  4088e2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
  4088e6:	3101      	adds	r1, #1

004088e8 <.LVL418>:
  4088e8:	ee07 1a90 	vmov	s15, r1
  4088ec:	ee26 6b04 	vmul.f64	d6, d6, d4
  4088f0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  4088f4:	9a02      	ldr	r2, [sp, #8]
  4088f6:	eea6 5b07 	vfma.f64	d5, d6, d7
  4088fa:	ec51 0b15 	vmov	r0, r1, d5
  4088fe:	3a01      	subs	r2, #1

00408900 <.LVL419>:
  408900:	461d      	mov	r5, r3
  408902:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000

00408906 <.LVL420>:
  408906:	e5ee      	b.n	4084e6 <.LVL277>

00408908 <.L133>:
  408908:	2239      	movs	r2, #57	; 0x39
  40890a:	46aa      	mov	sl, r5
  40890c:	7032      	strb	r2, [r6, #0]
  40890e:	463d      	mov	r5, r7

00408910 <.LVL422>:
  408910:	f106 0b01 	add.w	fp, r6, #1

00408914 <.LVL423>:
  408914:	e558      	b.n	4083c8 <.L142>

00408916 <.LVL424>:
  408916:	ee36 6b44 	vsub.f64	d6, d6, d4
  40891a:	eeb4 6bc7 	vcmpe.f64	d6, d7
  40891e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  408922:	dc01      	bgt.n	408928 <.LVL426>
  408924:	e736      	b.n	408794 <.LDL1>

00408926 <.LVL425>:
  408926:	468b      	mov	fp, r1

00408928 <.LVL426>:
  408928:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
  40892c:	2b30      	cmp	r3, #48	; 0x30
  40892e:	f10b 31ff 	add.w	r1, fp, #4294967295

00408932 <.LVL427>:
  408932:	d0f8      	beq.n	408926 <.LVL425>
  408934:	e62d      	b.n	408592 <.LVL288+0xe>

00408936 <.LVL428>:
  408936:	9202      	str	r2, [sp, #8]

00408938 <.LVL429>:
  408938:	f7ff bb6f 	b.w	40801a <.L77>

0040893c <.LVL430>:
  40893c:	930d      	str	r3, [sp, #52]	; 0x34

0040893e <.LVL431>:
  40893e:	e447      	b.n	4081d0 <.LVL175>

00408940 <.LVL432>:
  408940:	2a39      	cmp	r2, #57	; 0x39
  408942:	46cb      	mov	fp, r9

00408944 <.LVL433>:
  408944:	4691      	mov	r9, r2

00408946 <.LVL434>:
  408946:	d0df      	beq.n	408908 <.L133>
  408948:	f1bb 0f00 	cmp.w	fp, #0
  40894c:	f73f af08 	bgt.w	408760 <.LVL358>
  408950:	e708      	b.n	408764 <.LVL359>

00408952 <.LVL435>:
  408952:	f47f af07 	bne.w	408764 <.LVL359>
  408956:	f019 0f01 	tst.w	r9, #1
  40895a:	f43f af03 	beq.w	408764 <.LVL359>
  40895e:	e6fb      	b.n	408758 <.LVL357>

00408960 <.LVL436>:
  408960:	4629      	mov	r1, r5
  408962:	2300      	movs	r3, #0
  408964:	220a      	movs	r2, #10
  408966:	4620      	mov	r0, r4

00408968 <.LVL437>:
  408968:	f008 fde0 	bl	41152c <.LFE146>

0040896c <.LVL438>:
  40896c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40896e:	2b00      	cmp	r3, #0
  408970:	4605      	mov	r5, r0

00408972 <.LVL439>:
  408972:	dd08      	ble.n	408986 <.LVL443>
  408974:	461e      	mov	r6, r3
  408976:	e460      	b.n	40823a <.LVL189>

00408978 <.LVL440>:
  408978:	9b01      	ldr	r3, [sp, #4]

0040897a <.LVL441>:
  40897a:	2b02      	cmp	r3, #2
  40897c:	dc20      	bgt.n	4089c0 <.LVL451>
  40897e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  408980:	e4f1      	b.n	408366 <.LVL230>

00408982 <.LVL442>:
  408982:	2102      	movs	r1, #2
  408984:	e594      	b.n	4084b0 <.LVL274>

00408986 <.LVL443>:
  408986:	9b01      	ldr	r3, [sp, #4]

00408988 <.LVL444>:
  408988:	2b02      	cmp	r3, #2
  40898a:	dc19      	bgt.n	4089c0 <.LVL451>
  40898c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  40898e:	e454      	b.n	40823a <.LVL189>

00408990 <.LVL445>:
  408990:	2501      	movs	r5, #1
  408992:	f7ff bab0 	b.w	407ef6 <.LVL91>

00408996 <.LVL446>:
  408996:	f43f ac33 	beq.w	408200 <.LVL184>
  40899a:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  40899e:	e4c0      	b.n	408322 <.LVL218>

004089a0 <.LVL447>:
  4089a0:	2500      	movs	r5, #0

004089a2 <.LVL448>:
  4089a2:	6465      	str	r5, [r4, #68]	; 0x44
  4089a4:	4629      	mov	r1, r5
  4089a6:	4620      	mov	r0, r4
  4089a8:	f009 faf0 	bl	411f8c <.LFE2>

004089ac <.LVL449>:
  4089ac:	f04f 36ff 	mov.w	r6, #4294967295
  4089b0:	2301      	movs	r3, #1
  4089b2:	9008      	str	r0, [sp, #32]
  4089b4:	46a9      	mov	r9, r5
  4089b6:	6420      	str	r0, [r4, #64]	; 0x40

004089b8 <.LVL450>:
  4089b8:	960c      	str	r6, [sp, #48]	; 0x30
  4089ba:	9309      	str	r3, [sp, #36]	; 0x24
  4089bc:	f7ff bad3 	b.w	407f66 <.LVL104>

004089c0 <.LVL451>:
  4089c0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  4089c2:	e658      	b.n	408676 <.LVL323>
  4089c4:	0040fbb8 	.word	0x0040fbb8
  4089c8:	004128d8 	.word	0x004128d8

Disassembly of section .rodata%48:

004089cc <.LANCHOR1>:
  4089cc:	30257325 	.word	0x30257325
  4089d0:	00005832 	.word	0x00005832

004089d4 <.LC25>:
  4089d4:	00636261 	.word	0x00636261

004089d8 <.LC26>:
  4089d8:	98500190 	.word	0x98500190
  4089dc:	b04fd23c 	.word	0xb04fd23c
  4089e0:	7d3f96d6 	.word	0x7d3f96d6
  4089e4:	727fe128 	.word	0x727fe128
  4089e8:	00000000 	.word	0x00000000

004089ec <.LC27>:
  4089ec:	7373656d 	.word	0x7373656d
  4089f0:	20656761 	.word	0x20656761
  4089f4:	65676964 	.word	0x65676964
  4089f8:	00007473 	.word	0x00007473

004089fc <.LC28>:
  4089fc:	7d696bf9 	.word	0x7d696bf9
  408a00:	8d93b77c 	.word	0x8d93b77c
  408a04:	312f5a52 	.word	0x312f5a52
  408a08:	d061f1aa 	.word	0xd061f1aa
  408a0c:	00000000 	.word	0x00000000

00408a10 <.LC29>:
  408a10:	64636261 	.word	0x64636261
  408a14:	68676665 	.word	0x68676665
  408a18:	6c6b6a69 	.word	0x6c6b6a69
  408a1c:	706f6e6d 	.word	0x706f6e6d
  408a20:	74737271 	.word	0x74737271
  408a24:	78777675 	.word	0x78777675
  408a28:	00007a79 	.word	0x00007a79

00408a2c <.LC30>:
  408a2c:	d7d3fcc3 	.word	0xd7d3fcc3
  408a30:	00e49261 	.word	0x00e49261
  408a34:	6c49fb7d 	.word	0x6c49fb7d
  408a38:	3be167ca 	.word	0x3be167ca
  408a3c:	00000000 	.word	0x00000000

00408a40 <.LC31>:
  408a40:	44434241 	.word	0x44434241
  408a44:	48474645 	.word	0x48474645
  408a48:	4c4b4a49 	.word	0x4c4b4a49
  408a4c:	504f4e4d 	.word	0x504f4e4d
  408a50:	54535251 	.word	0x54535251
  408a54:	58575655 	.word	0x58575655
  408a58:	62615a59 	.word	0x62615a59
  408a5c:	66656463 	.word	0x66656463
  408a60:	6a696867 	.word	0x6a696867
  408a64:	6e6d6c6b 	.word	0x6e6d6c6b
  408a68:	7271706f 	.word	0x7271706f
  408a6c:	76757473 	.word	0x76757473
  408a70:	7a797877 	.word	0x7a797877
  408a74:	33323130 	.word	0x33323130
  408a78:	37363534 	.word	0x37363534
  408a7c:	00003938 	.word	0x00003938

00408a80 <.LC32>:
  408a80:	98ab74d1 	.word	0x98ab74d1
  408a84:	f5d977d2 	.word	0xf5d977d2
  408a88:	2c1c61a5 	.word	0x2c1c61a5
  408a8c:	9f9d419f 	.word	0x9f9d419f
  408a90:	00000000 	.word	0x00000000

00408a94 <.LC33>:
  408a94:	34333231 	.word	0x34333231
  408a98:	38373635 	.word	0x38373635
  408a9c:	32313039 	.word	0x32313039
  408aa0:	36353433 	.word	0x36353433
  408aa4:	30393837 	.word	0x30393837
  408aa8:	34333231 	.word	0x34333231
  408aac:	38373635 	.word	0x38373635
  408ab0:	32313039 	.word	0x32313039
  408ab4:	36353433 	.word	0x36353433
  408ab8:	30393837 	.word	0x30393837
  408abc:	34333231 	.word	0x34333231
  408ac0:	38373635 	.word	0x38373635
  408ac4:	32313039 	.word	0x32313039
  408ac8:	36353433 	.word	0x36353433
  408acc:	30393837 	.word	0x30393837
  408ad0:	34333231 	.word	0x34333231
  408ad4:	38373635 	.word	0x38373635
  408ad8:	32313039 	.word	0x32313039
  408adc:	36353433 	.word	0x36353433
  408ae0:	30393837 	.word	0x30393837
  408ae4:	00000000 	.word	0x00000000

00408ae8 <.LC34>:
  408ae8:	a2f4ed57 	.word	0xa2f4ed57
  408aec:	55c9e32b 	.word	0x55c9e32b
  408af0:	2eda49ac 	.word	0x2eda49ac
  408af4:	7ab60721 	.word	0x7ab60721
  408af8:	00000000 	.word	0x00000000

00408afc <.LC35>:
  408afc:	61616161 	.word	0x61616161
  408b00:	61616161 	.word	0x61616161
  408b04:	61616161 	.word	0x61616161
  408b08:	61616161 	.word	0x61616161
  408b0c:	61616161 	.word	0x61616161
  408b10:	61616161 	.word	0x61616161
  408b14:	61616161 	.word	0x61616161
  408b18:	61616161 	.word	0x61616161
  408b1c:	61616161 	.word	0x61616161
  408b20:	61616161 	.word	0x61616161
  408b24:	61616161 	.word	0x61616161
  408b28:	61616161 	.word	0x61616161
  408b2c:	61616161 	.word	0x61616161
  408b30:	61616161 	.word	0x61616161
  408b34:	61616161 	.word	0x61616161
  408b38:	61616161 	.word	0x61616161
  408b3c:	61616161 	.word	0x61616161
  408b40:	61616161 	.word	0x61616161
  408b44:	61616161 	.word	0x61616161
  408b48:	61616161 	.word	0x61616161
  408b4c:	61616161 	.word	0x61616161
  408b50:	61616161 	.word	0x61616161
  408b54:	61616161 	.word	0x61616161
  408b58:	61616161 	.word	0x61616161
  408b5c:	61616161 	.word	0x61616161
  408b60:	61616161 	.word	0x61616161
  408b64:	61616161 	.word	0x61616161
  408b68:	61616161 	.word	0x61616161
  408b6c:	61616161 	.word	0x61616161
  408b70:	61616161 	.word	0x61616161
  408b74:	61616161 	.word	0x61616161
  408b78:	61616161 	.word	0x61616161
  408b7c:	00000000 	.word	0x00000000

00408b80 <.LC36>:
  408b80:	db3f5bad 	.word	0xdb3f5bad
  408b84:	786752cb 	.word	0x786752cb
  408b88:	2f9d83c2 	.word	0x2f9d83c2
  408b8c:	53a71e15 	.word	0x53a71e15
  408b90:	a0265e99 	.word	0xa0265e99
  408b94:	00000000 	.word	0x00000000

00408b98 <.LC37>:
  408b98:	64636261 	.word	0x64636261
  408b9c:	65646362 	.word	0x65646362
  408ba0:	66656463 	.word	0x66656463
  408ba4:	67666564 	.word	0x67666564
  408ba8:	68676665 	.word	0x68676665
  408bac:	69686766 	.word	0x69686766
  408bb0:	6a696867 	.word	0x6a696867
  408bb4:	6b6a6968 	.word	0x6b6a6968
  408bb8:	6c6b6a69 	.word	0x6c6b6a69
  408bbc:	6d6c6b6a 	.word	0x6d6c6b6a
  408bc0:	6e6d6c6b 	.word	0x6e6d6c6b
  408bc4:	6f6e6d6c 	.word	0x6f6e6d6c
  408bc8:	706f6e6d 	.word	0x706f6e6d
  408bcc:	71706f6e 	.word	0x71706f6e
  408bd0:	00000000 	.word	0x00000000

00408bd4 <.LC38>:
  408bd4:	443e9884 	.word	0x443e9884
  408bd8:	6ed23b1c 	.word	0x6ed23b1c
  408bdc:	a14aaeba 	.word	0xa14aaeba
  408be0:	e52951f9 	.word	0xe52951f9
  408be4:	f17046e5 	.word	0xf17046e5
  408be8:	00000000 	.word	0x00000000

00408bec <.LC39>:
  408bec:	61616161 	.word	0x61616161
  408bf0:	61616161 	.word	0x61616161
  408bf4:	61616161 	.word	0x61616161
  408bf8:	61616161 	.word	0x61616161
  408bfc:	61616161 	.word	0x61616161
  408c00:	61616161 	.word	0x61616161
  408c04:	61616161 	.word	0x61616161
  408c08:	61616161 	.word	0x61616161
  408c0c:	61616161 	.word	0x61616161
  408c10:	61616161 	.word	0x61616161
  408c14:	61616161 	.word	0x61616161
  408c18:	61616161 	.word	0x61616161
  408c1c:	61616161 	.word	0x61616161
  408c20:	61616161 	.word	0x61616161
  408c24:	61616161 	.word	0x61616161
  408c28:	61616161 	.word	0x61616161
  408c2c:	00000000 	.word	0x00000000

00408c30 <.LC40>:
  408c30:	82ba9800 	.word	0x82ba9800
  408c34:	42165c4b 	.word	0x42165c4b
  408c38:	12a1d77b 	.word	0x12a1d77b
  408c3c:	2a445a2a 	.word	0x2a445a2a
  408c40:	4d64ec25 	.word	0x4d64ec25
  408c44:	00000000 	.word	0x00000000

00408c48 <.LC41>:
  408c48:	363e99a9 	.word	0x363e99a9
  408c4c:	6a810647 	.word	0x6a810647
  408c50:	71253eba 	.word	0x71253eba
  408c54:	6cc25078 	.word	0x6cc25078
  408c58:	9dd8d09c 	.word	0x9dd8d09c
  408c5c:	00000000 	.word	0x00000000

00408c60 <.LC42>:
  408c60:	bf1678ba 	.word	0xbf1678ba
  408c64:	eacf018f 	.word	0xeacf018f
  408c68:	de404141 	.word	0xde404141
  408c6c:	2322ae5d 	.word	0x2322ae5d
  408c70:	a36103b0 	.word	0xa36103b0
  408c74:	9c7a1796 	.word	0x9c7a1796
  408c78:	61ff10b4 	.word	0x61ff10b4
  408c7c:	ad1500f2 	.word	0xad1500f2
  408c80:	00000000 	.word	0x00000000

00408c84 <.LC43>:
  408c84:	616a8d24 	.word	0x616a8d24
  408c88:	b83806d2 	.word	0xb83806d2
  408c8c:	9326c0e5 	.word	0x9326c0e5
  408c90:	39603e0c 	.word	0x39603e0c
  408c94:	59e43ca3 	.word	0x59e43ca3
  408c98:	6721ff64 	.word	0x6721ff64
  408c9c:	d4edecf6 	.word	0xd4edecf6
  408ca0:	c106db19 	.word	0xc106db19
  408ca4:	00000000 	.word	0x00000000

00408ca8 <.LC44>:
  408ca8:	3f7500cb 	.word	0x3f7500cb
  408cac:	8b5ea345 	.word	0x8b5ea345
  408cb0:	693da0b5 	.word	0x693da0b5
  408cb4:	0750c69a 	.word	0x0750c69a
  408cb8:	ab322c27 	.word	0xab322c27
  408cbc:	63d1de0e 	.word	0x63d1de0e
  408cc0:	5a608b1a 	.word	0x5a608b1a
  408cc4:	ed5bff43 	.word	0xed5bff43
  408cc8:	2b078680 	.word	0x2b078680
  408ccc:	23cce7a1 	.word	0x23cce7a1
  408cd0:	a1ecba58 	.word	0xa1ecba58
  408cd4:	a725c834 	.word	0xa725c834
  408cd8:	00000000 	.word	0x00000000

00408cdc <.LC45>:
  408cdc:	64636261 	.word	0x64636261
  408ce0:	68676665 	.word	0x68676665
  408ce4:	65646362 	.word	0x65646362
  408ce8:	69686766 	.word	0x69686766
  408cec:	66656463 	.word	0x66656463
  408cf0:	6a696867 	.word	0x6a696867
  408cf4:	67666564 	.word	0x67666564
  408cf8:	6b6a6968 	.word	0x6b6a6968
  408cfc:	68676665 	.word	0x68676665
  408d00:	6c6b6a69 	.word	0x6c6b6a69
  408d04:	69686766 	.word	0x69686766
  408d08:	6d6c6b6a 	.word	0x6d6c6b6a
  408d0c:	6a696867 	.word	0x6a696867
  408d10:	6e6d6c6b 	.word	0x6e6d6c6b
  408d14:	6b6a6968 	.word	0x6b6a6968
  408d18:	6f6e6d6c 	.word	0x6f6e6d6c
  408d1c:	6c6b6a69 	.word	0x6c6b6a69
  408d20:	706f6e6d 	.word	0x706f6e6d
  408d24:	6d6c6b6a 	.word	0x6d6c6b6a
  408d28:	71706f6e 	.word	0x71706f6e
  408d2c:	6e6d6c6b 	.word	0x6e6d6c6b
  408d30:	7271706f 	.word	0x7271706f
  408d34:	6f6e6d6c 	.word	0x6f6e6d6c
  408d38:	73727170 	.word	0x73727170
  408d3c:	706f6e6d 	.word	0x706f6e6d
  408d40:	74737271 	.word	0x74737271
  408d44:	71706f6e 	.word	0x71706f6e
  408d48:	75747372 	.word	0x75747372
  408d4c:	00000000 	.word	0x00000000

00408d50 <.LC46>:
  408d50:	330c3309 	.word	0x330c3309
  408d54:	e84711f7 	.word	0xe84711f7
  408d58:	c72f193d 	.word	0xc72f193d
  408d5c:	471bcd82 	.word	0x471bcd82
  408d60:	171b1153 	.word	0x171b1153
  408d64:	d2053b3b 	.word	0xd2053b3b
  408d68:	8680a02f 	.word	0x8680a02f
  408d6c:	12f7b0e3 	.word	0x12f7b0e3
  408d70:	1ac7c7fc 	.word	0x1ac7c7fc
  408d74:	b92d7e55 	.word	0xb92d7e55
  408d78:	fae9c366 	.word	0xfae9c366
  408d7c:	39607491 	.word	0x39607491
  408d80:	00000000 	.word	0x00000000

00408d84 <.LC47>:
  408d84:	a135afdd 	.word	0xa135afdd
  408d88:	ba7a6193 	.word	0xba7a6193
  408d8c:	497341cc 	.word	0x497341cc
  408d90:	314120ae 	.word	0x314120ae
  408d94:	4efae612 	.word	0x4efae612
  408d98:	a27ea989 	.word	0xa27ea989
  408d9c:	e6ee9e0a 	.word	0xe6ee9e0a
  408da0:	9ad3554b 	.word	0x9ad3554b
  408da4:	2a999221 	.word	0x2a999221
  408da8:	a8c14f27 	.word	0xa8c14f27
  408dac:	233cba36 	.word	0x233cba36
  408db0:	bdebfea3 	.word	0xbdebfea3
  408db4:	23444d45 	.word	0x23444d45
  408db8:	0ee83c64 	.word	0x0ee83c64
  408dbc:	4fc99a2a 	.word	0x4fc99a2a
  408dc0:	9fa44ca5 	.word	0x9fa44ca5
  408dc4:	00000000 	.word	0x00000000

00408dc8 <.LC48>:
  408dc8:	759b958e 	.word	0x759b958e
  408dcc:	da13e3da 	.word	0xda13e3da
  408dd0:	28f7f48c 	.word	0x28f7f48c
  408dd4:	3f14fc14 	.word	0x3f14fc14
  408dd8:	c679778f 	.word	0xc679778f
  408ddc:	a17f9feb 	.word	0xa17f9feb
  408de0:	adae9972 	.word	0xadae9972
  408de4:	189088b6 	.word	0x189088b6
  408de8:	9e281d50 	.word	0x9e281d50
  408dec:	e4f70049 	.word	0xe4f70049
  408df0:	de991b33 	.word	0xde991b33
  408df4:	3a43b5c4 	.word	0x3a43b5c4
  408df8:	ee29d3c7 	.word	0xee29d3c7
  408dfc:	5426ddb6 	.word	0x5426ddb6
  408e00:	5be5965e 	.word	0x5be5965e
  408e04:	09e94b87 	.word	0x09e94b87
  408e08:	00000000 	.word	0x00000000
  408e0c:	0040946c 	.word	0x0040946c
  408e10:	0040944c 	.word	0x0040944c
  408e14:	00409480 	.word	0x00409480

00408e18 <.LC50>:
  408e18:	54206948 	.word	0x54206948
  408e1c:	65726568 	.word	0x65726568
  408e20:	00000000 	.word	0x00000000

00408e24 <.LC51>:
  408e24:	7a729492 	.word	0x7a729492
  408e28:	1cbb3836 	.word	0x1cbb3836
  408e2c:	f88ef413 	.word	0xf88ef413
  408e30:	9dfc8b15 	.word	0x9dfc8b15
  408e34:	00000000 	.word	0x00000000

00408e38 <.LC52>:
  408e38:	74616877 	.word	0x74616877
  408e3c:	206f6420 	.word	0x206f6420
  408e40:	77206179 	.word	0x77206179
  408e44:	20746e61 	.word	0x20746e61
  408e48:	20726f66 	.word	0x20726f66
  408e4c:	68746f6e 	.word	0x68746f6e
  408e50:	3f676e69 	.word	0x3f676e69
  408e54:	00000000 	.word	0x00000000

00408e58 <.LC53>:
  408e58:	3e780c75 	.word	0x3e780c75
  408e5c:	03b5b06a 	.word	0x03b5b06a
  408e60:	316ea8ea 	.word	0x316ea8ea
  408e64:	38b75d0a 	.word	0x38b75d0a
  408e68:	00000000 	.word	0x00000000

00408e6c <.LC54>:
  408e6c:	dddddddd 	.word	0xdddddddd
  408e70:	dddddddd 	.word	0xdddddddd
  408e74:	dddddddd 	.word	0xdddddddd
  408e78:	dddddddd 	.word	0xdddddddd
  408e7c:	dddddddd 	.word	0xdddddddd
  408e80:	dddddddd 	.word	0xdddddddd
  408e84:	dddddddd 	.word	0xdddddddd
  408e88:	dddddddd 	.word	0xdddddddd
  408e8c:	dddddddd 	.word	0xdddddddd
  408e90:	dddddddd 	.word	0xdddddddd
  408e94:	dddddddd 	.word	0xdddddddd
  408e98:	dddddddd 	.word	0xdddddddd
  408e9c:	0000dddd 	.word	0x0000dddd

00408ea0 <.LC55>:
  408ea0:	5234be56 	.word	0x5234be56
  408ea4:	884c141d 	.word	0x884c141d
  408ea8:	33c7b8db 	.word	0x33c7b8db
  408eac:	f6b3e8f0 	.word	0xf6b3e8f0
  408eb0:	00000000 	.word	0x00000000
  408eb4:	00409434 	.word	0x00409434
  408eb8:	0040944c 	.word	0x0040944c
  408ebc:	00409454 	.word	0x00409454

00408ec0 <.LC57>:
  408ec0:	863117b6 	.word	0x863117b6
  408ec4:	64720555 	.word	0x64720555
  408ec8:	b6c08be2 	.word	0xb6c08be2
  408ecc:	8e8c37fb 	.word	0x8e8c37fb
  408ed0:	00be46f1 	.word	0x00be46f1
  408ed4:	00000000 	.word	0x00000000

00408ed8 <.LC58>:
  408ed8:	6adffcef 	.word	0x6adffcef
  408edc:	a22febe5 	.word	0xa22febe5
  408ee0:	d51674d2 	.word	0xd51674d2
  408ee4:	9cdf84f1 	.word	0x9cdf84f1
  408ee8:	797c9a25 	.word	0x797c9a25
  408eec:	00000000 	.word	0x00000000

00408ef0 <.LC59>:
  408ef0:	42735d12 	.word	0x42735d12
  408ef4:	cd11acb9 	.word	0xcd11acb9
  408ef8:	f49aa391 	.word	0xf49aa391
  408efc:	4f7ba18a 	.word	0x4f7ba18a
  408f00:	d375f163 	.word	0xd375f163
  408f04:	00000000 	.word	0x00000000

00408f08 <.LC60>:
  408f08:	614c34b0 	.word	0x614c34b0
  408f0c:	5338dbd8 	.word	0x5338dbd8
  408f10:	ceafa85c 	.word	0xceafa85c
  408f14:	2bf10baf 	.word	0x2bf10baf
  408f18:	00c21d88 	.word	0x00c21d88
  408f1c:	a73d83c9 	.word	0xa73d83c9
  408f20:	6c37e926 	.word	0x6c37e926
  408f24:	f7cf322e 	.word	0xf7cf322e
  408f28:	00000000 	.word	0x00000000

00408f2c <.LC61>:
  408f2c:	46c1dc5b 	.word	0x46c1dc5b
  408f30:	4e7560bf 	.word	0x4e7560bf
  408f34:	2624046a 	.word	0x2624046a
  408f38:	c7759508 	.word	0xc7759508
  408f3c:	083f005a 	.word	0x083f005a
  408f40:	8339279d 	.word	0x8339279d
  408f44:	b958ec9d 	.word	0xb958ec9d
  408f48:	4338ec64 	.word	0x4338ec64
  408f4c:	00000000 	.word	0x00000000

00408f50 <.LC62>:
  408f50:	1ea93e77 	.word	0x1ea93e77
  408f54:	460e8036 	.word	0x460e8036
  408f58:	ebb84d85 	.word	0xebb84d85
  408f5c:	a78191d0 	.word	0xa78191d0
  408f60:	8b095929 	.word	0x8b095929
  408f64:	22c1f83e 	.word	0x22c1f83e
  408f68:	145563d9 	.word	0x145563d9
  408f6c:	fe65d5ce 	.word	0xfe65d5ce
  408f70:	00000000 	.word	0x00000000

00408f74 <.LC63>:
  408f74:	4439d0af 	.word	0x4439d0af
  408f78:	629548d8 	.word	0x629548d8
  408f7c:	f425086b 	.word	0xf425086b
  408f80:	7f9046ab 	.word	0x7f9046ab
  408f84:	dbdaf915 	.word	0xdbdaf915
  408f88:	c61e10e4 	.word	0xc61e10e4
  408f8c:	4c03aa82 	.word	0x4c03aa82
  408f90:	9cc5eb7c 	.word	0x9cc5eb7c
  408f94:	a99eeafa 	.word	0xa99eeafa
  408f98:	7fde6e07 	.word	0x7fde6e07
  408f9c:	e852f14a 	.word	0xe852f14a
  408fa0:	b69cfab2 	.word	0xb69cfab2
  408fa4:	00000000 	.word	0x00000000

00408fa8 <.LC64>:
  408fa8:	e3d245af 	.word	0xe3d245af
  408fac:	31404876 	.word	0x31404876
  408fb0:	d2787f61 	.word	0xd2787f61
  408fb4:	1b6b8ab5 	.word	0x1b6b8ab5
  408fb8:	64f47e9c 	.word	0x64f47e9c
  408fbc:	471ba0f5 	.word	0x471ba0f5
  408fc0:	73c32ee4 	.word	0x73c32ee4
  408fc4:	5e442263 	.word	0x5e442263
  408fc8:	ca40228e 	.word	0xca40228e
  408fcc:	c7e2695e 	.word	0xc7e2695e
  408fd0:	ec39328b 	.word	0xec39328b
  408fd4:	4916b2fa 	.word	0x4916b2fa
  408fd8:	00000000 	.word	0x00000000

00408fdc <.LC65>:
  408fdc:	08260688 	.word	0x08260688
  408fe0:	8aade6d3 	.word	0x8aade6d3
  408fe4:	e0aca20a 	.word	0xe0aca20a
  408fe8:	6fa8c814 	.word	0x6fa8c814
  408fec:	d935a60a 	.word	0xd935a60a
  408ff0:	eb9fac47 	.word	0xeb9fac47
  408ff4:	e5f43ee8 	.word	0xe5f43ee8
  408ff8:	4b146659 	.word	0x4b146659
  408ffc:	9db35a2a 	.word	0x9db35a2a
  409000:	b91438c1 	.word	0xb91438c1
  409004:	e1b63a4e 	.word	0xe1b63a4e
  409008:	274fa301 	.word	0x274fa301
  40900c:	00000000 	.word	0x00000000

00409010 <.LC66>:
  409010:	de7caa87 	.word	0xde7caa87
  409014:	9d61efa5 	.word	0x9d61efa5
  409018:	24b4f04f 	.word	0x24b4f04f
  40901c:	b06c1d1a 	.word	0xb06c1d1a
  409020:	e2f47923 	.word	0xe2f47923
  409024:	78c24ece 	.word	0x78c24ece
  409028:	05b3d07a 	.word	0x05b3d07a
  40902c:	de7ce145 	.word	0xde7ce145
  409030:	b733a8da 	.word	0xb733a8da
  409034:	02a7b8d6 	.word	0x02a7b8d6
  409038:	4e278b03 	.word	0x4e278b03
  40903c:	e4f4a3ae 	.word	0xe4f4a3ae
  409040:	4e919dbe 	.word	0x4e919dbe
  409044:	70f161eb 	.word	0x70f161eb
  409048:	206c692e 	.word	0x206c692e
  40904c:	5468123a 	.word	0x5468123a
  409050:	00000000 	.word	0x00000000

00409054 <.LC67>:
  409054:	7b7a4b16 	.word	0x7b7a4b16
  409058:	e219f8fc 	.word	0xe219f8fc
  40905c:	e7fb95e3 	.word	0xe7fb95e3
  409060:	a3e0563b 	.word	0xa3e0563b
  409064:	2264bd87 	.word	0x2264bd87
  409068:	d61f832e 	.word	0xd61f832e
  40906c:	d70c2710 	.word	0xd70c2710
  409070:	540525ea 	.word	0x540525ea
  409074:	75bf5897 	.word	0x75bf5897
  409078:	4a995ac0 	.word	0x4a995ac0
  40907c:	654f036d 	.word	0x654f036d
  409080:	fde6f0f8 	.word	0xfde6f0f8
  409084:	a3b1eaca 	.word	0xa3b1eaca
  409088:	4b6b4a4d 	.word	0x4b6b4a4d
  40908c:	0a076e63 	.word	0x0a076e63
  409090:	37e7bc38 	.word	0x37e7bc38
  409094:	00000000 	.word	0x00000000

00409098 <.LC68>:
  409098:	08b073fa 	.word	0x08b073fa
  40909c:	84a2569d 	.word	0x84a2569d
  4090a0:	75f0b0ef 	.word	0x75f0b0ef
  4090a4:	e90b896c 	.word	0xe90b896c
  4090a8:	dddbb5b1 	.word	0xdddbb5b1
  4090ac:	361ae88e 	.word	0x361ae88e
  4090b0:	333ef855 	.word	0x333ef855
  4090b4:	399d27b2 	.word	0x399d27b2
  4090b8:	82843ebf 	.word	0x82843ebf
  4090bc:	c822a779 	.word	0xc822a779
  4090c0:	a485b406 	.word	0xa485b406
  4090c4:	07c8677e 	.word	0x07c8677e
  4090c8:	37a346b9 	.word	0x37a346b9
  4090cc:	2694e8be 	.word	0x2694e8be
  4090d0:	59882774 	.word	0x59882774
  4090d4:	fb9232e1 	.word	0xfb9232e1
  4090d8:	00000000 	.word	0x00000000
  4090dc:	20776f6e 	.word	0x20776f6e
  4090e0:	74207369 	.word	0x74207369
  4090e4:	74206568 	.word	0x74206568
  4090e8:	20656d69 	.word	0x20656d69
  4090ec:	20726f66 	.word	0x20726f66
  4090f0:	206c6c61 	.word	0x206c6c61
  4090f4:	67452301 	.word	0x67452301
  4090f8:	efcdab89 	.word	0xefcdab89
  4090fc:	78563412 	.word	0x78563412
  409100:	efcdab90 	.word	0xefcdab90
  409104:	b0527c8b 	.word	0xb0527c8b
  409108:	b86c2b01 	.word	0xb86c2b01
  40910c:	f3eb0f4f 	.word	0xf3eb0f4f
  409110:	73865ffb 	.word	0x73865ffb
  409114:	22b38515 	.word	0x22b38515
  409118:	4b2b864b 	.word	0x4b2b864b
  40911c:	20776f4e 	.word	0x20776f4e
  409120:	74207369 	.word	0x74207369
  409124:	74206568 	.word	0x74206568
  409128:	20656d69 	.word	0x20656d69
  40912c:	20726f66 	.word	0x20726f66
  409130:	206c6c61 	.word	0x206c6c61
  409134:	67452301 	.word	0x67452301
  409138:	efcdab89 	.word	0xefcdab89
  40913c:	98badefe 	.word	0x98badefe
  409140:	10325476 	.word	0x10325476
  409144:	efcdab89 	.word	0xefcdab89
  409148:	67452301 	.word	0x67452301
  40914c:	78563412 	.word	0x78563412
  409150:	efcdab90 	.word	0xefcdab90
  409154:	01010101 	.word	0x01010101
  409158:	01010101 	.word	0x01010101
  40915c:	41312111 	.word	0x41312111
  409160:	81716151 	.word	0x81716151
  409164:	7e29a043 	.word	0x7e29a043
  409168:	0ef884d1 	.word	0x0ef884d1
  40916c:	32846489 	.word	0x32846489
  409170:	9808d512 	.word	0x9808d512
  409174:	74159418 	.word	0x74159418
  409178:	b07d1287 	.word	0xb07d1287
  40917c:	20776f6e 	.word	0x20776f6e
  409180:	74207369 	.word	0x74207369
  409184:	74206568 	.word	0x74206568
  409188:	20656d69 	.word	0x20656d69
  40918c:	57929495 	.word	0x57929495
  409190:	5381425f 	.word	0x5381425f
  409194:	469dcc2c 	.word	0x469dcc2c
  409198:	cb33a277 	.word	0xcb33a277
  40919c:	33323130 	.word	0x33323130
  4091a0:	37363534 	.word	0x37363534
  4091a4:	62613938 	.word	0x62613938
  4091a8:	66656463 	.word	0x66656463
  4091ac:	00202020 	.word	0x00202020
  4091b0:	34333231 	.word	0x34333231
  4091b4:	38373635 	.word	0x38373635
  4091b8:	62613039 	.word	0x62613039
  4091bc:	66656463 	.word	0x66656463
  4091c0:	00202020 	.word	0x00202020
  4091c4:	16157e2b 	.word	0x16157e2b
  4091c8:	a6d2ae28 	.word	0xa6d2ae28
  4091cc:	8815f7ab 	.word	0x8815f7ab
  4091d0:	3c4fcf09 	.word	0x3c4fcf09
  4091d4:	f3f2f1f0 	.word	0xf3f2f1f0
  4091d8:	f7f6f5f4 	.word	0xf7f6f5f4
  4091dc:	fbfaf9f8 	.word	0xfbfaf9f8
  4091e0:	fffefdfc 	.word	0xfffefdfc
  4091e4:	e2bec16b 	.word	0xe2bec16b
  4091e8:	969f402e 	.word	0x969f402e
  4091ec:	117e3de9 	.word	0x117e3de9
  4091f0:	2a179373 	.word	0x2a179373
  4091f4:	578a2dae 	.word	0x578a2dae
  4091f8:	9cac031e 	.word	0x9cac031e
  4091fc:	ac6fb79e 	.word	0xac6fb79e
  409200:	518eaf45 	.word	0x518eaf45
  409204:	461cc830 	.word	0x461cc830
  409208:	11e45ca3 	.word	0x11e45ca3
  40920c:	19c1fbe5 	.word	0x19c1fbe5
  409210:	ef520a1a 	.word	0xef520a1a
  409214:	45249ff6 	.word	0x45249ff6
  409218:	179b4fdf 	.word	0x179b4fdf
  40921c:	7b412bad 	.word	0x7b412bad
  409220:	10376ce6 	.word	0x10376ce6
  409224:	91614d87 	.word	0x91614d87
  409228:	26e320b6 	.word	0x26e320b6
  40922c:	6468ef1b 	.word	0x6468ef1b
  409230:	ceb60d99 	.word	0xceb60d99
  409234:	6bf60698 	.word	0x6bf60698
  409238:	fffd7079 	.word	0xfffd7079
  40923c:	7b181786 	.word	0x7b181786
  409240:	fffdffb9 	.word	0xfffdffb9
  409244:	3edfe45a 	.word	0x3edfe45a
  409248:	5ed3d5db 	.word	0x5ed3d5db
  40924c:	02094f5b 	.word	0x02094f5b
  409250:	ab3eb00d 	.word	0xab3eb00d
  409254:	da1d031e 	.word	0xda1d031e
  409258:	d103be2f 	.word	0xd103be2f
  40925c:	a0702179 	.word	0xa0702179
  409260:	ee9c00f3 	.word	0xee9c00f3
  409264:	0d0a7325 	.word	0x0d0a7325
  409268:	2035444d 	.word	0x2035444d
  40926c:	74736574 	.word	0x74736574
  409270:	2020203a 	.word	0x2020203a
  409274:	20202020 	.word	0x20202020
  409278:	25202020 	.word	0x25202020
  40927c:	00000064 	.word	0x00000064
  409280:	0d0a7325 	.word	0x0d0a7325
  409284:	20414853 	.word	0x20414853
  409288:	74736574 	.word	0x74736574
  40928c:	2020203a 	.word	0x2020203a
  409290:	20202020 	.word	0x20202020
  409294:	25202020 	.word	0x25202020
  409298:	00000064 	.word	0x00000064
  40929c:	0d0a7325 	.word	0x0d0a7325
  4092a0:	32414853 	.word	0x32414853
  4092a4:	74203635 	.word	0x74203635
  4092a8:	3a747365 	.word	0x3a747365
  4092ac:	20202020 	.word	0x20202020
  4092b0:	25202020 	.word	0x25202020
  4092b4:	00000064 	.word	0x00000064
  4092b8:	0d0a7325 	.word	0x0d0a7325
  4092bc:	33414853 	.word	0x33414853
  4092c0:	74203438 	.word	0x74203438
  4092c4:	3a747365 	.word	0x3a747365
  4092c8:	20202020 	.word	0x20202020
  4092cc:	25202020 	.word	0x25202020
  4092d0:	00000064 	.word	0x00000064
  4092d4:	0d0a7325 	.word	0x0d0a7325
  4092d8:	35414853 	.word	0x35414853
  4092dc:	74203231 	.word	0x74203231
  4092e0:	3a747365 	.word	0x3a747365
  4092e4:	20202020 	.word	0x20202020
  4092e8:	25202020 	.word	0x25202020
  4092ec:	00000064 	.word	0x00000064
  4092f0:	0d0a7325 	.word	0x0d0a7325
  4092f4:	43414d48 	.word	0x43414d48
  4092f8:	35444d5f 	.word	0x35444d5f
  4092fc:	73657420 	.word	0x73657420
  409300:	20203a74 	.word	0x20203a74
  409304:	25202020 	.word	0x25202020
  409308:	00000064 	.word	0x00000064
  40930c:	0d0a7325 	.word	0x0d0a7325
  409310:	43414d48 	.word	0x43414d48
  409314:	4148535f 	.word	0x4148535f
  409318:	73657420 	.word	0x73657420
  40931c:	20203a74 	.word	0x20203a74
  409320:	25202020 	.word	0x25202020
  409324:	00000064 	.word	0x00000064
  409328:	0d0a7325 	.word	0x0d0a7325
  40932c:	43414d48 	.word	0x43414d48
  409330:	4148535f 	.word	0x4148535f
  409334:	20363532 	.word	0x20363532
  409338:	74736574 	.word	0x74736574
  40933c:	2520203a 	.word	0x2520203a
  409340:	00000064 	.word	0x00000064
  409344:	0d0a7325 	.word	0x0d0a7325
  409348:	43414d48 	.word	0x43414d48
  40934c:	4148535f 	.word	0x4148535f
  409350:	20343833 	.word	0x20343833
  409354:	74736574 	.word	0x74736574
  409358:	2520203a 	.word	0x2520203a
  40935c:	00000064 	.word	0x00000064
  409360:	0d0a7325 	.word	0x0d0a7325
  409364:	43414d48 	.word	0x43414d48
  409368:	4148535f 	.word	0x4148535f
  40936c:	20323135 	.word	0x20323135
  409370:	74736574 	.word	0x74736574
  409374:	2520203a 	.word	0x2520203a
  409378:	00000064 	.word	0x00000064
  40937c:	0d0a7325 	.word	0x0d0a7325
  409380:	20534544 	.word	0x20534544
  409384:	74736574 	.word	0x74736574
  409388:	2020203a 	.word	0x2020203a
  40938c:	20202020 	.word	0x20202020
  409390:	25202020 	.word	0x25202020
  409394:	00000064 	.word	0x00000064
  409398:	0d0a7325 	.word	0x0d0a7325
  40939c:	33534544 	.word	0x33534544
  4093a0:	73657420 	.word	0x73657420
  4093a4:	20203a74 	.word	0x20203a74
  4093a8:	20202020 	.word	0x20202020
  4093ac:	25202020 	.word	0x25202020
  4093b0:	00000064 	.word	0x00000064
  4093b4:	0d0a7325 	.word	0x0d0a7325
  4093b8:	20534541 	.word	0x20534541
  4093bc:	20434243 	.word	0x20434243
  4093c0:	74736574 	.word	0x74736574
  4093c4:	2020203a 	.word	0x2020203a
  4093c8:	25202020 	.word	0x25202020
  4093cc:	00000064 	.word	0x00000064
  4093d0:	0d0a7325 	.word	0x0d0a7325
  4093d4:	20534541 	.word	0x20534541
  4093d8:	20525443 	.word	0x20525443
  4093dc:	74736574 	.word	0x74736574
  4093e0:	2020203a 	.word	0x2020203a
  4093e4:	25202020 	.word	0x25202020
  4093e8:	00000064 	.word	0x00000064
  4093ec:	0d0a7325 	.word	0x0d0a7325
  4093f0:	444e4152 	.word	0x444e4152
  4093f4:	74204d4f 	.word	0x74204d4f
  4093f8:	3a747365 	.word	0x3a747365
  4093fc:	20202020 	.word	0x20202020
  409400:	25202020 	.word	0x25202020
  409404:	00000064 	.word	0x00000064
  409408:	0d0a7325 	.word	0x0d0a7325
  40940c:	65742041 	.word	0x65742041
  409410:	66207473 	.word	0x66207473
  409414:	656c6961 	.word	0x656c6961
  409418:	000a2e64 	.word	0x000a2e64
  40941c:	0d0a7325 	.word	0x0d0a7325
  409420:	206c6c41 	.word	0x206c6c41
  409424:	74736574 	.word	0x74736574
  409428:	61702073 	.word	0x61702073
  40942c:	64657373 	.word	0x64657373
  409430:	00000a2e 	.word	0x00000a2e
  409434:	0b0b0b0b 	.word	0x0b0b0b0b
  409438:	0b0b0b0b 	.word	0x0b0b0b0b
  40943c:	0b0b0b0b 	.word	0x0b0b0b0b
  409440:	0b0b0b0b 	.word	0x0b0b0b0b
  409444:	0b0b0b0b 	.word	0x0b0b0b0b
  409448:	00000000 	.word	0x00000000
  40944c:	6566654a 	.word	0x6566654a
  409450:	00000000 	.word	0x00000000
  409454:	aaaaaaaa 	.word	0xaaaaaaaa
  409458:	aaaaaaaa 	.word	0xaaaaaaaa
  40945c:	aaaaaaaa 	.word	0xaaaaaaaa
  409460:	aaaaaaaa 	.word	0xaaaaaaaa
  409464:	aaaaaaaa 	.word	0xaaaaaaaa
  409468:	00000000 	.word	0x00000000
  40946c:	0b0b0b0b 	.word	0x0b0b0b0b
  409470:	0b0b0b0b 	.word	0x0b0b0b0b
  409474:	0b0b0b0b 	.word	0x0b0b0b0b
  409478:	0b0b0b0b 	.word	0x0b0b0b0b
  40947c:	00000000 	.word	0x00000000
  409480:	aaaaaaaa 	.word	0xaaaaaaaa
  409484:	aaaaaaaa 	.word	0xaaaaaaaa
  409488:	aaaaaaaa 	.word	0xaaaaaaaa
  40948c:	aaaaaaaa 	.word	0xaaaaaaaa
  409490:	00000000 	.word	0x00000000
  409494:	41200a0d 	.word	0x41200a0d
  409498:	696c7070 	.word	0x696c7070
  40949c:	69746163 	.word	0x69746163
  4094a0:	63206e6f 	.word	0x63206e6f
  4094a4:	74616572 	.word	0x74616572
  4094a8:	53206465 	.word	0x53206465
  4094ac:	32207065 	.word	0x32207065
  4094b0:	30322035 	.word	0x30322035
  4094b4:	31203831 	.word	0x31203831
  4094b8:	31323a31 	.word	0x31323a31
  4094bc:	2030303a 	.word	0x2030303a
  4094c0:	74696e69 	.word	0x74696e69
  4094c4:	696c6169 	.word	0x696c6169
  4094c8:	2164657a 	.word	0x2164657a
  4094cc:	0a0d      	.short	0x0a0d
	...

Disassembly of section .rodata.Spbox%49:

004094d0 <Spbox>:
  4094d0:	0400 0101 0000 0000 0000 0001 0404 0101     ................
  4094e0:	0004 0101 0404 0001 0004 0000 0000 0001     ................
  4094f0:	0400 0000 0400 0101 0404 0101 0400 0000     ................
  409500:	0404 0100 0004 0101 0000 0100 0004 0000     ................
  409510:	0404 0000 0400 0100 0400 0100 0400 0001     ................
  409520:	0400 0001 0000 0101 0000 0101 0404 0100     ................
  409530:	0004 0001 0004 0100 0004 0100 0004 0001     ................
  409540:	0000 0000 0404 0000 0404 0001 0000 0100     ................
  409550:	0000 0001 0404 0101 0004 0000 0000 0101     ................
  409560:	0400 0101 0000 0100 0000 0100 0400 0000     ................
  409570:	0004 0101 0000 0001 0400 0001 0004 0100     ................
  409580:	0400 0000 0004 0000 0404 0100 0404 0001     ................
  409590:	0404 0101 0004 0001 0000 0101 0404 0100     ................
  4095a0:	0004 0100 0404 0000 0404 0001 0400 0101     ................
  4095b0:	0404 0000 0400 0100 0400 0100 0000 0000     ................
  4095c0:	0004 0001 0400 0001 0000 0000 0004 0101     ................
  4095d0:	8020 8010 8000 8000 8000 0000 8020 0010      ........... ...
  4095e0:	0000 0010 0020 0000 0020 8010 8020 8000     .... ... ... ...
  4095f0:	0020 8000 8020 8010 8000 8010 0000 8000      ... ...........
  409600:	8000 8000 0000 0010 0020 0000 0020 8010     ........ ... ...
  409610:	8000 0010 0020 0010 8020 8000 0000 0000     .... ... .......
  409620:	0000 8000 8000 0000 8020 0010 0000 8010     ........ .......
  409630:	0020 0010 0020 8000 0000 0000 8000 0010      ... ...........
  409640:	8020 0000 8000 8010 0000 8010 8020 0000      ........... ...
  409650:	0000 0000 8020 0010 0020 8010 0000 0010     .... ... .......
  409660:	8020 8000 0000 8010 8000 8010 8000 0000      ...............
  409670:	0000 8010 8000 8000 0020 0000 8020 8010     ........ ... ...
  409680:	8020 0010 0020 0000 8000 0000 0000 8000      ... ...........
  409690:	8020 0000 8000 8010 0000 0010 0020 8000      ........... ...
  4096a0:	0020 0010 8020 8000 0020 8000 0020 0010      ... ... ... ...
  4096b0:	8000 0010 0000 0000 8000 8000 8020 0000     ............ ...
  4096c0:	0000 8000 0020 8010 8020 8010 8000 0010     .... ... .......
  4096d0:	0208 0000 0200 0802 0000 0000 0008 0802     ................
  4096e0:	0200 0800 0000 0000 0208 0002 0200 0800     ................
  4096f0:	0008 0002 0008 0800 0008 0800 0000 0002     ................
  409700:	0208 0802 0008 0002 0000 0802 0208 0000     ................
  409710:	0000 0800 0008 0000 0200 0802 0200 0000     ................
  409720:	0200 0002 0000 0802 0008 0802 0208 0002     ................
  409730:	0208 0800 0200 0002 0000 0002 0208 0800     ................
  409740:	0008 0000 0208 0802 0200 0000 0000 0800     ................
  409750:	0200 0802 0000 0800 0008 0002 0208 0000     ................
  409760:	0000 0002 0200 0802 0200 0800 0000 0000     ................
  409770:	0200 0000 0008 0002 0208 0802 0200 0800     ................
  409780:	0008 0800 0200 0000 0000 0000 0008 0802     ................
  409790:	0208 0800 0000 0002 0000 0800 0208 0802     ................
  4097a0:	0008 0000 0208 0002 0200 0002 0008 0800     ................
  4097b0:	0000 0802 0208 0800 0208 0000 0000 0802     ................
  4097c0:	0208 0002 0008 0000 0008 0802 0200 0002     ................
  4097d0:	2001 0080 2081 0000 2081 0000 0080 0000     . ... ... ......
  4097e0:	2080 0080 0081 0080 0001 0080 2001 0000     . ........... ..
  4097f0:	0000 0000 2000 0080 2000 0080 2081 0080     ..... ... ... ..
  409800:	0081 0000 0000 0000 0080 0080 0001 0080     ................
  409810:	0001 0000 2000 0000 0000 0080 2001 0080     ..... ....... ..
  409820:	0080 0000 0000 0080 2001 0000 2080 0000     ......... ... ..
  409830:	0081 0080 0001 0000 2080 0000 0080 0080     ......... ......
  409840:	2000 0000 2080 0080 2081 0080 0081 0000     . ... ... ......
  409850:	0080 0080 0001 0080 2000 0080 2081 0080     ......... ... ..
  409860:	0081 0000 0000 0000 0000 0000 2000 0080     ............. ..
  409870:	2080 0000 0080 0080 0081 0080 0001 0000     . ..............
  409880:	2001 0080 2081 0000 2081 0000 0080 0000     . ... ... ......
  409890:	2081 0080 0081 0000 0001 0000 2000 0000     . ........... ..
  4098a0:	0001 0080 2001 0000 2080 0080 0081 0080     ..... ... ......
  4098b0:	2001 0000 2080 0000 0000 0080 2001 0080     . ... ....... ..
  4098c0:	0080 0000 0000 0080 2000 0000 2080 0080     ......... ... ..
  4098d0:	0100 0000 0100 0208 0000 0208 0100 4200     ...............B
  4098e0:	0000 0008 0100 0000 0000 4000 0000 0208     ...........@....
  4098f0:	0100 4008 0000 0008 0100 0200 0100 4008     ...@...........@
  409900:	0100 4200 0000 4208 0100 0008 0000 4000     ...B...B.......@
  409910:	0000 0200 0000 4008 0000 4008 0000 0000     .......@...@....
  409920:	0100 4000 0100 4208 0100 4208 0100 0200     ...@...B...B....
  409930:	0000 4208 0100 4000 0000 0000 0000 4200     ...B...@.......B
  409940:	0100 0208 0000 0200 0000 4200 0100 0008     ...........B....
  409950:	0000 0008 0100 4200 0100 0000 0000 0200     .......B........
  409960:	0000 4000 0000 0208 0100 4200 0100 4008     ...@.......B...@
  409970:	0100 0200 0000 4000 0000 4208 0100 0208     .......@...B....
  409980:	0100 4008 0100 0000 0000 0200 0000 4208     ...@...........B
  409990:	0100 4208 0100 0008 0000 4200 0100 4208     ...B.......B...B
  4099a0:	0000 0208 0000 0000 0000 4008 0000 4200     ...........@...B
  4099b0:	0100 0008 0100 0200 0100 4000 0000 0008     ...........@....
  4099c0:	0000 0000 0000 4008 0100 0208 0100 4000     .......@.......@
  4099d0:	0010 2000 0000 2040 4000 0000 4010 2040     ... ..@ .@...@@ 
  4099e0:	0000 2040 0010 0000 4010 2040 0000 0040     ..@ .....@@ ..@.
  4099f0:	4000 2000 4010 0040 0000 0040 0010 2000     .@. .@@...@.... 
  409a00:	0010 0040 4000 2000 0000 2000 4010 0000     ..@..@. ... .@..
  409a10:	0000 0000 0010 0040 4010 2000 4000 0000     ......@..@. .@..
  409a20:	4000 0040 4010 2000 0010 0000 0010 2040     .@@..@. ......@ 
  409a30:	0010 2040 0000 0000 4010 0040 4000 2040     ..@ .....@@..@@ 
  409a40:	4010 0000 4000 0040 4000 2040 0000 2000     .@...@@..@@ ... 
  409a50:	4000 2000 0010 0000 0010 2040 4000 0040     .@. ......@ .@@.
  409a60:	4010 2040 0000 0040 4010 0000 0010 2000     .@@ ..@..@..... 
  409a70:	0000 0040 4000 2000 0000 2000 4010 0000     ..@..@. ... .@..
  409a80:	0010 2000 4010 2040 4000 0040 0000 2040     ... .@@ .@@...@ 
  409a90:	4010 0040 4000 2040 0000 0000 0010 2040     .@@..@@ ......@ 
  409aa0:	0010 0000 4000 0000 0000 2040 4010 0040     .....@....@ .@@.
  409ab0:	4000 0000 0010 0040 4010 2000 0000 0000     .@....@..@. ....
  409ac0:	4000 2040 0000 2000 0010 0040 4010 2000     .@@ ... ..@..@. 
  409ad0:	0000 0020 0002 0420 0802 0400 0000 0000     .. ... .........
  409ae0:	0800 0000 0802 0400 0802 0020 0800 0420     .......... ... .
  409af0:	0802 0420 0000 0020 0000 0000 0002 0400     .. ... .........
  409b00:	0002 0000 0000 0400 0002 0420 0802 0000     .......... .....
  409b10:	0800 0400 0802 0020 0002 0020 0800 0400     ...... ... .....
  409b20:	0002 0400 0000 0420 0800 0420 0002 0020     ...... ... ... .
  409b30:	0000 0420 0800 0000 0802 0000 0802 0420     .. ........... .
  409b40:	0800 0020 0002 0000 0000 0400 0800 0020     .. ........... .
  409b50:	0000 0400 0800 0020 0000 0020 0802 0400     ...... ... .....
  409b60:	0802 0400 0002 0420 0002 0420 0002 0000     ...... ... .....
  409b70:	0002 0020 0000 0400 0800 0400 0000 0020     .. ........... .
  409b80:	0800 0420 0802 0000 0802 0020 0800 0420     .. ....... ... .
  409b90:	0802 0000 0002 0400 0802 0420 0000 0420     .......... ... .
  409ba0:	0800 0020 0000 0000 0002 0000 0802 0420     .. ........... .
  409bb0:	0000 0000 0802 0020 0000 0420 0800 0000     ...... ... .....
  409bc0:	0002 0400 0800 0400 0800 0000 0002 0020     .............. .
  409bd0:	1040 1000 1000 0000 0000 0004 1040 1004     @...........@...
  409be0:	0000 1000 1040 1000 0040 0000 0000 1000     ....@...@.......
  409bf0:	0040 0004 0000 1004 1040 1004 1000 0004     @.......@.......
  409c00:	1000 1004 1040 0004 1000 0000 0040 0000     ....@.......@...
  409c10:	0000 1004 0040 1000 1000 1000 1040 0000     ....@.......@...
  409c20:	1000 0004 0040 0004 0040 1004 1000 1004     ....@...@.......
  409c30:	1040 0000 0000 0000 0000 0000 0040 1004     @...........@...
  409c40:	0040 1000 1000 1000 1040 0004 0000 0004     @.......@.......
  409c50:	1040 0004 0000 0004 1000 1004 1000 0000     @...............
  409c60:	0040 0000 0040 1004 1000 0000 1040 0004     @...@.......@...
  409c70:	1000 1000 0040 0000 0040 1000 0000 1004     ....@...@.......
  409c80:	0040 1004 0000 1000 0000 0004 1040 1000     @...........@...
  409c90:	0000 0000 1040 1004 0040 0004 0040 1000     ....@...@...@...
  409ca0:	0000 1004 1000 1000 1040 1000 0000 0000     ........@.......
  409cb0:	1040 1004 1000 0004 1000 0004 1040 0000     @...........@...
  409cc0:	1040 0000 0040 0004 0000 1000 1000 1004     @...@...........

Disassembly of section .text.Transform%50:

00409cd0 <Transform>:

    #define MD5STEP(f, w, x, y, z, data, s) \
        w = rotlFixed(w + f(x, y, z) + data, s) + x

    static int Transform(Md5* md5)
    {
  409cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00409cd4 <.LCFI0>:
  409cd4:	b083      	sub	sp, #12

00409cd6 <.LCFI1>:
        /* Copy context->state[] to working vars  */
        word32 a = md5->digest[0];
        word32 b = md5->digest[1];
  409cd6:	6d05      	ldr	r5, [r0, #80]	; 0x50

00409cd8 <.LVL2>:
        word32 c = md5->digest[2];
  409cd8:	6d44      	ldr	r4, [r0, #84]	; 0x54
  409cda:	4627      	mov	r7, r4

00409cdc <.LVL3>:
        word32 d = md5->digest[3];

        MD5STEP(F1, a, b, c, d, md5->buffer[0]  + 0xd76aa478,  7);
  409cdc:	6d83      	ldr	r3, [r0, #88]	; 0x58
  409cde:	ea84 0903 	eor.w	r9, r4, r3
  409ce2:	ea09 0905 	and.w	r9, r9, r5
  409ce6:	ea89 0903 	eor.w	r9, r9, r3
  409cea:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  409cec:	68c2      	ldr	r2, [r0, #12]
  409cee:	189a      	adds	r2, r3, r2
  409cf0:	4bdf      	ldr	r3, [pc, #892]	; (40a070 <.LVL188+0x10>)
  409cf2:	4413      	add	r3, r2
  409cf4:	4499      	add	r9, r3
  409cf6:	eb05 6979 	add.w	r9, r5, r9, ror #25

00409cfa <.LVL7>:
        MD5STEP(F1, d, a, b, c, md5->buffer[1]  + 0xe8c7b756, 12);
  409cfa:	ea85 0c04 	eor.w	ip, r5, r4
  409cfe:	ea0c 0c09 	and.w	ip, ip, r9
  409d02:	ea8c 0c04 	eor.w	ip, ip, r4
  409d06:	6d83      	ldr	r3, [r0, #88]	; 0x58
  409d08:	6902      	ldr	r2, [r0, #16]
  409d0a:	4413      	add	r3, r2
  409d0c:	4cd9      	ldr	r4, [pc, #868]	; (40a074 <.LVL188+0x14>)

00409d0e <.LVL10>:
  409d0e:	441c      	add	r4, r3
  409d10:	44a4      	add	ip, r4
  409d12:	eb09 5c3c 	add.w	ip, r9, ip, ror #20

00409d16 <.LVL12>:
        MD5STEP(F1, c, d, a, b, md5->buffer[2]  + 0x242070db, 17);
  409d16:	ea85 0609 	eor.w	r6, r5, r9
  409d1a:	ea06 060c 	and.w	r6, r6, ip
  409d1e:	406e      	eors	r6, r5
  409d20:	6943      	ldr	r3, [r0, #20]
  409d22:	9701      	str	r7, [sp, #4]
  409d24:	443b      	add	r3, r7
  409d26:	4ad4      	ldr	r2, [pc, #848]	; (40a078 <.LVL188+0x18>)
  409d28:	441a      	add	r2, r3
  409d2a:	4416      	add	r6, r2
  409d2c:	eb0c 36f6 	add.w	r6, ip, r6, ror #15

00409d30 <.LVL16>:
        MD5STEP(F1, b, c, d, a, md5->buffer[3]  + 0xc1bdceee, 22);
  409d30:	ea89 010c 	eor.w	r1, r9, ip
  409d34:	4031      	ands	r1, r6
  409d36:	ea81 0109 	eor.w	r1, r1, r9
  409d3a:	6983      	ldr	r3, [r0, #24]
  409d3c:	18ea      	adds	r2, r5, r3
  409d3e:	4bcf      	ldr	r3, [pc, #828]	; (40a07c <.LVL188+0x1c>)
  409d40:	4413      	add	r3, r2
  409d42:	4419      	add	r1, r3
  409d44:	eb06 21b1 	add.w	r1, r6, r1, ror #10

00409d48 <.LVL20>:
        MD5STEP(F1, a, b, c, d, md5->buffer[4]  + 0xf57c0faf,  7);
  409d48:	ea8c 0306 	eor.w	r3, ip, r6
  409d4c:	400b      	ands	r3, r1
  409d4e:	ea83 030c 	eor.w	r3, r3, ip
  409d52:	4acb      	ldr	r2, [pc, #812]	; (40a080 <.LVL188+0x20>)
  409d54:	69c4      	ldr	r4, [r0, #28]
  409d56:	4422      	add	r2, r4
  409d58:	4491      	add	r9, r2

00409d5a <.LVL23>:
  409d5a:	444b      	add	r3, r9
  409d5c:	eb01 6373 	add.w	r3, r1, r3, ror #25

00409d60 <.LVL25>:
        MD5STEP(F1, d, a, b, c, md5->buffer[5]  + 0x4787c62a, 12);
  409d60:	ea86 0401 	eor.w	r4, r6, r1
  409d64:	401c      	ands	r4, r3
  409d66:	4074      	eors	r4, r6
  409d68:	4ac6      	ldr	r2, [pc, #792]	; (40a084 <.LVL188+0x24>)
  409d6a:	6a07      	ldr	r7, [r0, #32]
  409d6c:	443a      	add	r2, r7
  409d6e:	4494      	add	ip, r2

00409d70 <.LVL28>:
  409d70:	4464      	add	r4, ip
  409d72:	eb03 5434 	add.w	r4, r3, r4, ror #20

00409d76 <.LVL30>:
        MD5STEP(F1, c, d, a, b, md5->buffer[6]  + 0xa8304613, 17);
  409d76:	ea81 0203 	eor.w	r2, r1, r3
  409d7a:	4022      	ands	r2, r4
  409d7c:	404a      	eors	r2, r1
  409d7e:	f8df e36c 	ldr.w	lr, [pc, #876]	; 40a0ec <.LVL188+0x8c>
  409d82:	6a47      	ldr	r7, [r0, #36]	; 0x24
  409d84:	44be      	add	lr, r7
  409d86:	4476      	add	r6, lr

00409d88 <.LVL33>:
  409d88:	4432      	add	r2, r6
  409d8a:	eb04 32f2 	add.w	r2, r4, r2, ror #15

00409d8e <.LVL35>:
        MD5STEP(F1, b, c, d, a, md5->buffer[7]  + 0xfd469501, 22);
  409d8e:	f8d0 a028 	ldr.w	sl, [r0, #40]	; 0x28
  409d92:	ea83 0804 	eor.w	r8, r3, r4
  409d96:	ea08 0802 	and.w	r8, r8, r2
  409d9a:	ea88 0803 	eor.w	r8, r8, r3
  409d9e:	4eba      	ldr	r6, [pc, #744]	; (40a088 <.LVL188+0x28>)
  409da0:	4456      	add	r6, sl
  409da2:	4431      	add	r1, r6

00409da4 <.LVL39>:
  409da4:	4488      	add	r8, r1
  409da6:	eb02 28b8 	add.w	r8, r2, r8, ror #10

00409daa <.LVL41>:
        MD5STEP(F1, a, b, c, d, md5->buffer[8]  + 0x698098d8,  7);
  409daa:	ea84 0e02 	eor.w	lr, r4, r2
  409dae:	ea0e 0e08 	and.w	lr, lr, r8
  409db2:	ea8e 0e04 	eor.w	lr, lr, r4
  409db6:	49b5      	ldr	r1, [pc, #724]	; (40a08c <.LVL188+0x2c>)
  409db8:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  409dba:	4431      	add	r1, r6
  409dbc:	440b      	add	r3, r1

00409dbe <.LVL44>:
  409dbe:	449e      	add	lr, r3
  409dc0:	eb08 6e7e 	add.w	lr, r8, lr, ror #25

00409dc4 <.LVL46>:
        MD5STEP(F1, d, a, b, c, md5->buffer[9]  + 0x8b44f7af, 12);
  409dc4:	ea82 0908 	eor.w	r9, r2, r8
  409dc8:	ea09 090e 	and.w	r9, r9, lr
  409dcc:	ea89 0902 	eor.w	r9, r9, r2
  409dd0:	4baf      	ldr	r3, [pc, #700]	; (40a090 <.LVL188+0x30>)
  409dd2:	6b01      	ldr	r1, [r0, #48]	; 0x30
  409dd4:	440b      	add	r3, r1
  409dd6:	441c      	add	r4, r3

00409dd8 <.LVL49>:
  409dd8:	44a1      	add	r9, r4
  409dda:	eb0e 5939 	add.w	r9, lr, r9, ror #20

00409dde <.LVL51>:
        MD5STEP(F1, c, d, a, b, md5->buffer[10] + 0xffff5bb1, 17);
  409dde:	ea88 0c0e 	eor.w	ip, r8, lr
  409de2:	ea0c 0c09 	and.w	ip, ip, r9
  409de6:	ea8c 0c08 	eor.w	ip, ip, r8
  409dea:	4baa      	ldr	r3, [pc, #680]	; (40a094 <.LVL188+0x34>)
  409dec:	6b41      	ldr	r1, [r0, #52]	; 0x34
  409dee:	440b      	add	r3, r1
  409df0:	441a      	add	r2, r3

00409df2 <.LVL54>:
  409df2:	4494      	add	ip, r2
  409df4:	eb09 3cfc 	add.w	ip, r9, ip, ror #15

00409df8 <.LVL56>:
        MD5STEP(F1, b, c, d, a, md5->buffer[11] + 0x895cd7be, 22);
  409df8:	ea8e 0609 	eor.w	r6, lr, r9
  409dfc:	ea06 060c 	and.w	r6, r6, ip
  409e00:	ea86 060e 	eor.w	r6, r6, lr
  409e04:	4ba4      	ldr	r3, [pc, #656]	; (40a098 <.LVL188+0x38>)
  409e06:	6b82      	ldr	r2, [r0, #56]	; 0x38
  409e08:	4413      	add	r3, r2
  409e0a:	4498      	add	r8, r3

00409e0c <.LVL59>:
  409e0c:	4446      	add	r6, r8
  409e0e:	eb0c 26b6 	add.w	r6, ip, r6, ror #10

00409e12 <.LVL61>:
        MD5STEP(F1, a, b, c, d, md5->buffer[12] + 0x6b901122,  7);
  409e12:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
  409e16:	ea89 010c 	eor.w	r1, r9, ip
  409e1a:	4031      	ands	r1, r6
  409e1c:	ea81 0109 	eor.w	r1, r1, r9
  409e20:	4b9e      	ldr	r3, [pc, #632]	; (40a09c <.LVL188+0x3c>)
  409e22:	4443      	add	r3, r8
  409e24:	449e      	add	lr, r3

00409e26 <.LVL65>:
  409e26:	4471      	add	r1, lr
  409e28:	eb06 6171 	add.w	r1, r6, r1, ror #25

00409e2c <.LVL67>:
        MD5STEP(F1, d, a, b, c, md5->buffer[13] + 0xfd987193, 12);
  409e2c:	ea8c 0306 	eor.w	r3, ip, r6
  409e30:	400b      	ands	r3, r1
  409e32:	ea83 030c 	eor.w	r3, r3, ip
  409e36:	4a9a      	ldr	r2, [pc, #616]	; (40a0a0 <.LVL188+0x40>)
  409e38:	6c04      	ldr	r4, [r0, #64]	; 0x40
  409e3a:	4422      	add	r2, r4
  409e3c:	4491      	add	r9, r2

00409e3e <.LVL70>:
  409e3e:	444b      	add	r3, r9
  409e40:	eb01 5333 	add.w	r3, r1, r3, ror #20

00409e44 <.LVL72>:
        MD5STEP(F1, c, d, a, b, md5->buffer[14] + 0xa679438e, 17);
  409e44:	f8d0 9044 	ldr.w	r9, [r0, #68]	; 0x44
  409e48:	ea86 0401 	eor.w	r4, r6, r1
  409e4c:	401c      	ands	r4, r3
  409e4e:	4074      	eors	r4, r6
  409e50:	4a94      	ldr	r2, [pc, #592]	; (40a0a4 <.LVL188+0x44>)
  409e52:	444a      	add	r2, r9
  409e54:	4494      	add	ip, r2

00409e56 <.LVL76>:
  409e56:	4464      	add	r4, ip
  409e58:	eb03 34f4 	add.w	r4, r3, r4, ror #15

00409e5c <.LVL78>:
        MD5STEP(F1, b, c, d, a, md5->buffer[15] + 0x49b40821, 22);
  409e5c:	f8d0 c048 	ldr.w	ip, [r0, #72]	; 0x48
  409e60:	ea81 0203 	eor.w	r2, r1, r3
  409e64:	4022      	ands	r2, r4
  409e66:	404a      	eors	r2, r1
  409e68:	f8df e284 	ldr.w	lr, [pc, #644]	; 40a0f0 <.LVL188+0x90>
  409e6c:	44e6      	add	lr, ip
  409e6e:	4476      	add	r6, lr

00409e70 <.LVL82>:
  409e70:	4432      	add	r2, r6
  409e72:	eb04 22b2 	add.w	r2, r4, r2, ror #10

00409e76 <.LVL84>:

        MD5STEP(F2, a, b, c, d, md5->buffer[1]  + 0xf61e2562,  5);
  409e76:	ea84 0b02 	eor.w	fp, r4, r2
  409e7a:	ea0b 0b03 	and.w	fp, fp, r3
  409e7e:	ea8b 0b04 	eor.w	fp, fp, r4
  409e82:	4e89      	ldr	r6, [pc, #548]	; (40a0a8 <.LVL188+0x48>)
  409e84:	6907      	ldr	r7, [r0, #16]
  409e86:	443e      	add	r6, r7
  409e88:	4431      	add	r1, r6

00409e8a <.LVL87>:
  409e8a:	448b      	add	fp, r1
  409e8c:	eb02 6bfb 	add.w	fp, r2, fp, ror #27

00409e90 <.LVL89>:
        MD5STEP(F2, d, a, b, c, md5->buffer[6]  + 0xc040b340,  9);
  409e90:	ea82 0e0b 	eor.w	lr, r2, fp
  409e94:	ea0e 0e04 	and.w	lr, lr, r4
  409e98:	ea8e 0e02 	eor.w	lr, lr, r2
  409e9c:	4983      	ldr	r1, [pc, #524]	; (40a0ac <.LVL188+0x4c>)
  409e9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
  409ea0:	4431      	add	r1, r6
  409ea2:	440b      	add	r3, r1

00409ea4 <.LVL92>:
  409ea4:	449e      	add	lr, r3
  409ea6:	eb0b 5efe 	add.w	lr, fp, lr, ror #23

00409eaa <.LVL94>:
        MD5STEP(F2, c, d, a, b, md5->buffer[11] + 0x265e5a51, 14);
  409eaa:	ea8b 030e 	eor.w	r3, fp, lr
  409eae:	4013      	ands	r3, r2
  409eb0:	ea83 030b 	eor.w	r3, r3, fp
  409eb4:	497e      	ldr	r1, [pc, #504]	; (40a0b0 <.LVL188+0x50>)
  409eb6:	6b86      	ldr	r6, [r0, #56]	; 0x38
  409eb8:	4431      	add	r1, r6
  409eba:	440c      	add	r4, r1

00409ebc <.LVL97>:
  409ebc:	4423      	add	r3, r4
  409ebe:	eb0e 43b3 	add.w	r3, lr, r3, ror #18

00409ec2 <.LVL99>:
        MD5STEP(F2, b, c, d, a, md5->buffer[0]  + 0xe9b6c7aa, 20);
  409ec2:	ea8e 0603 	eor.w	r6, lr, r3
  409ec6:	ea06 060b 	and.w	r6, r6, fp
  409eca:	ea86 060e 	eor.w	r6, r6, lr
  409ece:	4979      	ldr	r1, [pc, #484]	; (40a0b4 <.LVL188+0x54>)
  409ed0:	68c4      	ldr	r4, [r0, #12]
  409ed2:	4421      	add	r1, r4
  409ed4:	440a      	add	r2, r1

00409ed6 <.LVL102>:
  409ed6:	4416      	add	r6, r2
  409ed8:	eb03 3636 	add.w	r6, r3, r6, ror #12

00409edc <.LVL104>:
        MD5STEP(F2, a, b, c, d, md5->buffer[5]  + 0xd62f105d,  5);
  409edc:	ea83 0206 	eor.w	r2, r3, r6
  409ee0:	ea02 020e 	and.w	r2, r2, lr
  409ee4:	405a      	eors	r2, r3
  409ee6:	4974      	ldr	r1, [pc, #464]	; (40a0b8 <.LVL188+0x58>)
  409ee8:	6a04      	ldr	r4, [r0, #32]
  409eea:	4421      	add	r1, r4
  409eec:	448b      	add	fp, r1

00409eee <.LVL107>:
  409eee:	445a      	add	r2, fp
  409ef0:	eb06 62f2 	add.w	r2, r6, r2, ror #27

00409ef4 <.LVL109>:
        MD5STEP(F2, d, a, b, c, md5->buffer[10] + 0x02441453,  9);
  409ef4:	ea86 0102 	eor.w	r1, r6, r2
  409ef8:	4019      	ands	r1, r3
  409efa:	4071      	eors	r1, r6
  409efc:	4c6f      	ldr	r4, [pc, #444]	; (40a0bc <.LVL188+0x5c>)
  409efe:	6b47      	ldr	r7, [r0, #52]	; 0x34
  409f00:	443c      	add	r4, r7
  409f02:	44a6      	add	lr, r4

00409f04 <.LVL112>:
  409f04:	4471      	add	r1, lr
  409f06:	eb02 51f1 	add.w	r1, r2, r1, ror #23

00409f0a <.LVL114>:
        MD5STEP(F2, c, d, a, b, md5->buffer[15] + 0xd8a1e681, 14);
  409f0a:	ea82 0401 	eor.w	r4, r2, r1
  409f0e:	4034      	ands	r4, r6
  409f10:	4054      	eors	r4, r2
  409f12:	f8df e1e0 	ldr.w	lr, [pc, #480]	; 40a0f4 <.LVL188+0x94>
  409f16:	44e6      	add	lr, ip
  409f18:	4473      	add	r3, lr

00409f1a <.LVL117>:
  409f1a:	441c      	add	r4, r3
  409f1c:	eb01 44b4 	add.w	r4, r1, r4, ror #18

00409f20 <.LVL119>:
        MD5STEP(F2, b, c, d, a, md5->buffer[4]  + 0xe7d3fbc8, 20);
  409f20:	ea81 0304 	eor.w	r3, r1, r4
  409f24:	4013      	ands	r3, r2
  409f26:	404b      	eors	r3, r1
  409f28:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 40a0f8 <.LVL188+0x98>
  409f2c:	69c7      	ldr	r7, [r0, #28]
  409f2e:	44be      	add	lr, r7
  409f30:	4476      	add	r6, lr

00409f32 <.LVL122>:
  409f32:	4433      	add	r3, r6
  409f34:	eb04 3333 	add.w	r3, r4, r3, ror #12

00409f38 <.LVL124>:
        MD5STEP(F2, a, b, c, d, md5->buffer[9]  + 0x21e1cde6,  5);
  409f38:	ea84 0b03 	eor.w	fp, r4, r3
  409f3c:	ea0b 0b01 	and.w	fp, fp, r1
  409f40:	ea8b 0b04 	eor.w	fp, fp, r4
  409f44:	4e5e      	ldr	r6, [pc, #376]	; (40a0c0 <.LVL188+0x60>)
  409f46:	6b07      	ldr	r7, [r0, #48]	; 0x30
  409f48:	443e      	add	r6, r7
  409f4a:	4432      	add	r2, r6

00409f4c <.LVL127>:
  409f4c:	4493      	add	fp, r2
  409f4e:	eb03 6bfb 	add.w	fp, r3, fp, ror #27

00409f52 <.LVL129>:
        MD5STEP(F2, d, a, b, c, md5->buffer[14] + 0xc33707d6,  9);
  409f52:	ea83 0e0b 	eor.w	lr, r3, fp
  409f56:	ea0e 0e04 	and.w	lr, lr, r4
  409f5a:	ea8e 0e03 	eor.w	lr, lr, r3
  409f5e:	4a59      	ldr	r2, [pc, #356]	; (40a0c4 <.LVL188+0x64>)
  409f60:	444a      	add	r2, r9
  409f62:	4411      	add	r1, r2

00409f64 <.LVL132>:
  409f64:	448e      	add	lr, r1
  409f66:	eb0b 5efe 	add.w	lr, fp, lr, ror #23

00409f6a <.LVL134>:
        MD5STEP(F2, c, d, a, b, md5->buffer[3]  + 0xf4d50d87, 14);
  409f6a:	ea8b 060e 	eor.w	r6, fp, lr
  409f6e:	401e      	ands	r6, r3
  409f70:	ea86 060b 	eor.w	r6, r6, fp
  409f74:	4a54      	ldr	r2, [pc, #336]	; (40a0c8 <.LVL188+0x68>)
  409f76:	6981      	ldr	r1, [r0, #24]
  409f78:	440a      	add	r2, r1
  409f7a:	4414      	add	r4, r2

00409f7c <.LVL137>:
  409f7c:	4426      	add	r6, r4
  409f7e:	eb0e 46b6 	add.w	r6, lr, r6, ror #18

00409f82 <.LVL139>:
        MD5STEP(F2, b, c, d, a, md5->buffer[8]  + 0x455a14ed, 20);
  409f82:	ea8e 0206 	eor.w	r2, lr, r6
  409f86:	ea02 020b 	and.w	r2, r2, fp
  409f8a:	ea82 020e 	eor.w	r2, r2, lr
  409f8e:	494f      	ldr	r1, [pc, #316]	; (40a0cc <.LVL188+0x6c>)
  409f90:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  409f92:	4421      	add	r1, r4
  409f94:	440b      	add	r3, r1

00409f96 <.LVL142>:
  409f96:	441a      	add	r2, r3
  409f98:	eb06 3232 	add.w	r2, r6, r2, ror #12

00409f9c <.LVL144>:
        MD5STEP(F2, a, b, c, d, md5->buffer[13] + 0xa9e3e905,  5);
  409f9c:	ea86 0302 	eor.w	r3, r6, r2
  409fa0:	ea03 030e 	and.w	r3, r3, lr
  409fa4:	4073      	eors	r3, r6
  409fa6:	494a      	ldr	r1, [pc, #296]	; (40a0d0 <.LVL188+0x70>)
  409fa8:	6c04      	ldr	r4, [r0, #64]	; 0x40
  409faa:	4421      	add	r1, r4
  409fac:	448b      	add	fp, r1

00409fae <.LVL147>:
  409fae:	445b      	add	r3, fp
  409fb0:	eb02 63f3 	add.w	r3, r2, r3, ror #27

00409fb4 <.LVL149>:
        MD5STEP(F2, d, a, b, c, md5->buffer[2]  + 0xfcefa3f8,  9);
  409fb4:	ea82 0103 	eor.w	r1, r2, r3
  409fb8:	4031      	ands	r1, r6
  409fba:	4051      	eors	r1, r2
  409fbc:	4c45      	ldr	r4, [pc, #276]	; (40a0d4 <.LVL188+0x74>)
  409fbe:	6947      	ldr	r7, [r0, #20]
  409fc0:	443c      	add	r4, r7
  409fc2:	44a6      	add	lr, r4

00409fc4 <.LVL152>:
  409fc4:	4471      	add	r1, lr
  409fc6:	eb03 51f1 	add.w	r1, r3, r1, ror #23

00409fca <.LVL154>:
        MD5STEP(F2, c, d, a, b, md5->buffer[7]  + 0x676f02d9, 14);
  409fca:	ea83 0401 	eor.w	r4, r3, r1
  409fce:	4014      	ands	r4, r2
  409fd0:	405c      	eors	r4, r3
  409fd2:	f8df e128 	ldr.w	lr, [pc, #296]	; 40a0fc <.LVL188+0x9c>
  409fd6:	44d6      	add	lr, sl
  409fd8:	4476      	add	r6, lr

00409fda <.LVL157>:
  409fda:	4434      	add	r4, r6
  409fdc:	eb01 44b4 	add.w	r4, r1, r4, ror #18

00409fe0 <.LVL159>:
        MD5STEP(F2, b, c, d, a, md5->buffer[12] + 0x8d2a4c8a, 20);
  409fe0:	ea81 0b04 	eor.w	fp, r1, r4
  409fe4:	ea03 060b 	and.w	r6, r3, fp
  409fe8:	404e      	eors	r6, r1
  409fea:	f8df e114 	ldr.w	lr, [pc, #276]	; 40a100 <.LVL188+0xa0>
  409fee:	44c6      	add	lr, r8
  409ff0:	4472      	add	r2, lr

00409ff2 <.LVL163>:
  409ff2:	4416      	add	r6, r2
  409ff4:	eb04 3636 	add.w	r6, r4, r6, ror #12

00409ff8 <.LVL165>:

        MD5STEP(F3, a, b, c, d, md5->buffer[5]  + 0xfffa3942,  4);
  409ff8:	4a37      	ldr	r2, [pc, #220]	; (40a0d8 <.LVL188+0x78>)
  409ffa:	6a07      	ldr	r7, [r0, #32]
  409ffc:	443a      	add	r2, r7
  409ffe:	4413      	add	r3, r2

0040a000 <.LVL166>:
  40a000:	ea8b 0b06 	eor.w	fp, fp, r6
  40a004:	445b      	add	r3, fp
  40a006:	eb06 7333 	add.w	r3, r6, r3, ror #28

0040a00a <.LVL168>:
        MD5STEP(F3, d, a, b, c, md5->buffer[8]  + 0x8771f681, 11);
  40a00a:	ea84 0206 	eor.w	r2, r4, r6
  40a00e:	405a      	eors	r2, r3
  40a010:	f8df e0f0 	ldr.w	lr, [pc, #240]	; 40a104 <.LVL188+0xa4>
  40a014:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  40a016:	44be      	add	lr, r7
  40a018:	4471      	add	r1, lr

0040a01a <.LVL171>:
  40a01a:	4411      	add	r1, r2
  40a01c:	eb03 5171 	add.w	r1, r3, r1, ror #21

0040a020 <.LVL173>:
        MD5STEP(F3, c, d, a, b, md5->buffer[11] + 0x6d9d6122, 16);
  40a020:	ea86 0b03 	eor.w	fp, r6, r3
  40a024:	ea8b 0b01 	eor.w	fp, fp, r1
  40a028:	4a2c      	ldr	r2, [pc, #176]	; (40a0dc <.LVL188+0x7c>)
  40a02a:	6b87      	ldr	r7, [r0, #56]	; 0x38
  40a02c:	443a      	add	r2, r7
  40a02e:	4414      	add	r4, r2

0040a030 <.LVL176>:
  40a030:	445c      	add	r4, fp
  40a032:	eb01 4434 	add.w	r4, r1, r4, ror #16

0040a036 <.LVL178>:
        MD5STEP(F3, b, c, d, a, md5->buffer[14] + 0xfde5380c, 23);
  40a036:	ea83 0e01 	eor.w	lr, r3, r1
  40a03a:	ea8e 0e04 	eor.w	lr, lr, r4
  40a03e:	4a28      	ldr	r2, [pc, #160]	; (40a0e0 <.LVL188+0x80>)
  40a040:	444a      	add	r2, r9
  40a042:	4416      	add	r6, r2

0040a044 <.LVL181>:
  40a044:	44b6      	add	lr, r6
  40a046:	eb04 2e7e 	add.w	lr, r4, lr, ror #9

0040a04a <.LVL183>:
        MD5STEP(F3, a, b, c, d, md5->buffer[1]  + 0xa4beea44,  4);
  40a04a:	ea81 0204 	eor.w	r2, r1, r4
  40a04e:	ea82 020e 	eor.w	r2, r2, lr
  40a052:	4e24      	ldr	r6, [pc, #144]	; (40a0e4 <.LVL188+0x84>)
  40a054:	6907      	ldr	r7, [r0, #16]
  40a056:	443e      	add	r6, r7
  40a058:	4433      	add	r3, r6

0040a05a <.LVL186>:
  40a05a:	4413      	add	r3, r2
  40a05c:	eb0e 7333 	add.w	r3, lr, r3, ror #28

0040a060 <.LVL188>:
        MD5STEP(F3, d, a, b, c, md5->buffer[4]  + 0x4bdecfa9, 11);
  40a060:	ea84 020e 	eor.w	r2, r4, lr
  40a064:	405a      	eors	r2, r3
  40a066:	4e20      	ldr	r6, [pc, #128]	; (40a0e8 <.LVL188+0x88>)
  40a068:	69c7      	ldr	r7, [r0, #28]
  40a06a:	443e      	add	r6, r7
  40a06c:	4431      	add	r1, r6
  40a06e:	e04b      	b.n	40a108 <.LVL191>
  40a070:	d76aa478 	.word	0xd76aa478
  40a074:	e8c7b756 	.word	0xe8c7b756
  40a078:	242070db 	.word	0x242070db
  40a07c:	c1bdceee 	.word	0xc1bdceee
  40a080:	f57c0faf 	.word	0xf57c0faf
  40a084:	4787c62a 	.word	0x4787c62a
  40a088:	fd469501 	.word	0xfd469501
  40a08c:	698098d8 	.word	0x698098d8
  40a090:	8b44f7af 	.word	0x8b44f7af
  40a094:	ffff5bb1 	.word	0xffff5bb1
  40a098:	895cd7be 	.word	0x895cd7be
  40a09c:	6b901122 	.word	0x6b901122
  40a0a0:	fd987193 	.word	0xfd987193
  40a0a4:	a679438e 	.word	0xa679438e
  40a0a8:	f61e2562 	.word	0xf61e2562
  40a0ac:	c040b340 	.word	0xc040b340
  40a0b0:	265e5a51 	.word	0x265e5a51
  40a0b4:	e9b6c7aa 	.word	0xe9b6c7aa
  40a0b8:	d62f105d 	.word	0xd62f105d
  40a0bc:	02441453 	.word	0x02441453
  40a0c0:	21e1cde6 	.word	0x21e1cde6
  40a0c4:	c33707d6 	.word	0xc33707d6
  40a0c8:	f4d50d87 	.word	0xf4d50d87
  40a0cc:	455a14ed 	.word	0x455a14ed
  40a0d0:	a9e3e905 	.word	0xa9e3e905
  40a0d4:	fcefa3f8 	.word	0xfcefa3f8
  40a0d8:	fffa3942 	.word	0xfffa3942
  40a0dc:	6d9d6122 	.word	0x6d9d6122
  40a0e0:	fde5380c 	.word	0xfde5380c
  40a0e4:	a4beea44 	.word	0xa4beea44
  40a0e8:	4bdecfa9 	.word	0x4bdecfa9
  40a0ec:	a8304613 	.word	0xa8304613
  40a0f0:	49b40821 	.word	0x49b40821
  40a0f4:	d8a1e681 	.word	0xd8a1e681
  40a0f8:	e7d3fbc8 	.word	0xe7d3fbc8
  40a0fc:	676f02d9 	.word	0x676f02d9
  40a100:	8d2a4c8a 	.word	0x8d2a4c8a
  40a104:	8771f681 	.word	0x8771f681

0040a108 <.LVL191>:
  40a108:	4411      	add	r1, r2
  40a10a:	eb03 5171 	add.w	r1, r3, r1, ror #21

0040a10e <.LVL193>:
        MD5STEP(F3, c, d, a, b, md5->buffer[7]  + 0xf6bb4b60, 16);
  40a10e:	ea8e 0b03 	eor.w	fp, lr, r3
  40a112:	ea8b 0b01 	eor.w	fp, fp, r1
  40a116:	4a8c      	ldr	r2, [pc, #560]	; (40a348 <.LVL322>)
  40a118:	4452      	add	r2, sl
  40a11a:	4414      	add	r4, r2

0040a11c <.LVL196>:
  40a11c:	44a3      	add	fp, r4
  40a11e:	eb01 4b3b 	add.w	fp, r1, fp, ror #16

0040a122 <.LVL198>:
        MD5STEP(F3, b, c, d, a, md5->buffer[10] + 0xbebfbc70, 23);
  40a122:	ea83 0201 	eor.w	r2, r3, r1
  40a126:	ea82 020b 	eor.w	r2, r2, fp
  40a12a:	4c88      	ldr	r4, [pc, #544]	; (40a34c <.LVL322+0x4>)
  40a12c:	6b46      	ldr	r6, [r0, #52]	; 0x34
  40a12e:	4434      	add	r4, r6
  40a130:	44a6      	add	lr, r4

0040a132 <.LVL201>:
  40a132:	4472      	add	r2, lr
  40a134:	eb0b 2272 	add.w	r2, fp, r2, ror #9

0040a138 <.LVL203>:
        MD5STEP(F3, a, b, c, d, md5->buffer[13] + 0x289b7ec6,  4);
  40a138:	ea81 040b 	eor.w	r4, r1, fp
  40a13c:	4054      	eors	r4, r2
  40a13e:	4e84      	ldr	r6, [pc, #528]	; (40a350 <.LVL322+0x8>)
  40a140:	6c07      	ldr	r7, [r0, #64]	; 0x40
  40a142:	443e      	add	r6, r7
  40a144:	4433      	add	r3, r6

0040a146 <.LVL206>:
  40a146:	4423      	add	r3, r4
  40a148:	eb02 7333 	add.w	r3, r2, r3, ror #28

0040a14c <.LVL208>:
        MD5STEP(F3, d, a, b, c, md5->buffer[0]  + 0xeaa127fa, 11);
  40a14c:	ea8b 0e02 	eor.w	lr, fp, r2
  40a150:	ea8e 0e03 	eor.w	lr, lr, r3
  40a154:	4c7f      	ldr	r4, [pc, #508]	; (40a354 <.LVL322+0xc>)
  40a156:	68c6      	ldr	r6, [r0, #12]
  40a158:	4434      	add	r4, r6
  40a15a:	4421      	add	r1, r4

0040a15c <.LVL211>:
  40a15c:	448e      	add	lr, r1
  40a15e:	eb03 5e7e 	add.w	lr, r3, lr, ror #21

0040a162 <.LVL213>:
        MD5STEP(F3, c, d, a, b, md5->buffer[3]  + 0xd4ef3085, 16);
  40a162:	ea82 0603 	eor.w	r6, r2, r3
  40a166:	ea86 060e 	eor.w	r6, r6, lr
  40a16a:	497b      	ldr	r1, [pc, #492]	; (40a358 <.LVL322+0x10>)
  40a16c:	6984      	ldr	r4, [r0, #24]
  40a16e:	4421      	add	r1, r4
  40a170:	448b      	add	fp, r1

0040a172 <.LVL216>:
  40a172:	445e      	add	r6, fp
  40a174:	eb0e 4636 	add.w	r6, lr, r6, ror #16

0040a178 <.LVL218>:
        MD5STEP(F3, b, c, d, a, md5->buffer[6]  + 0x04881d05, 23);
  40a178:	ea83 0b0e 	eor.w	fp, r3, lr
  40a17c:	ea8b 0b06 	eor.w	fp, fp, r6
  40a180:	4976      	ldr	r1, [pc, #472]	; (40a35c <.LVL322+0x14>)
  40a182:	6a44      	ldr	r4, [r0, #36]	; 0x24
  40a184:	4421      	add	r1, r4
  40a186:	440a      	add	r2, r1

0040a188 <.LVL221>:
  40a188:	4493      	add	fp, r2
  40a18a:	eb06 2b7b 	add.w	fp, r6, fp, ror #9

0040a18e <.LVL223>:
        MD5STEP(F3, a, b, c, d, md5->buffer[9]  + 0xd9d4d039,  4);
  40a18e:	ea8e 0406 	eor.w	r4, lr, r6
  40a192:	ea84 040b 	eor.w	r4, r4, fp
  40a196:	4a72      	ldr	r2, [pc, #456]	; (40a360 <.LVL322+0x18>)
  40a198:	6b01      	ldr	r1, [r0, #48]	; 0x30
  40a19a:	440a      	add	r2, r1
  40a19c:	4413      	add	r3, r2

0040a19e <.LVL226>:
  40a19e:	441c      	add	r4, r3
  40a1a0:	eb0b 7434 	add.w	r4, fp, r4, ror #28

0040a1a4 <.LVL228>:
        MD5STEP(F3, d, a, b, c, md5->buffer[12] + 0xe6db99e5, 11);
  40a1a4:	ea86 010b 	eor.w	r1, r6, fp
  40a1a8:	4061      	eors	r1, r4
  40a1aa:	4b6e      	ldr	r3, [pc, #440]	; (40a364 <.LVL322+0x1c>)
  40a1ac:	4443      	add	r3, r8
  40a1ae:	449e      	add	lr, r3

0040a1b0 <.LVL231>:
  40a1b0:	4471      	add	r1, lr
  40a1b2:	eb04 5171 	add.w	r1, r4, r1, ror #21

0040a1b6 <.LVL233>:
        MD5STEP(F3, c, d, a, b, md5->buffer[15] + 0x1fa27cf8, 16);
  40a1b6:	ea8b 0304 	eor.w	r3, fp, r4
  40a1ba:	404b      	eors	r3, r1
  40a1bc:	4a6a      	ldr	r2, [pc, #424]	; (40a368 <.LVL322+0x20>)
  40a1be:	4462      	add	r2, ip
  40a1c0:	4416      	add	r6, r2

0040a1c2 <.LVL236>:
  40a1c2:	441e      	add	r6, r3
  40a1c4:	eb01 4636 	add.w	r6, r1, r6, ror #16

0040a1c8 <.LVL238>:
        MD5STEP(F3, b, c, d, a, md5->buffer[2]  + 0xc4ac5665, 23);
  40a1c8:	ea84 0201 	eor.w	r2, r4, r1
  40a1cc:	4072      	eors	r2, r6
  40a1ce:	4b67      	ldr	r3, [pc, #412]	; (40a36c <.LVL322+0x24>)
  40a1d0:	6947      	ldr	r7, [r0, #20]
  40a1d2:	443b      	add	r3, r7
  40a1d4:	449b      	add	fp, r3

0040a1d6 <.LVL241>:
  40a1d6:	445a      	add	r2, fp
  40a1d8:	eb06 2272 	add.w	r2, r6, r2, ror #9

0040a1dc <.LVL243>:

        MD5STEP(F4, a, b, c, d, md5->buffer[0]  + 0xf4292244,  6);
  40a1dc:	ea62 0301 	orn	r3, r2, r1
  40a1e0:	4073      	eors	r3, r6
  40a1e2:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 40a3ac <.LVL322+0x64>
  40a1e6:	68c7      	ldr	r7, [r0, #12]
  40a1e8:	44be      	add	lr, r7
  40a1ea:	4474      	add	r4, lr

0040a1ec <.LVL246>:
  40a1ec:	4423      	add	r3, r4
  40a1ee:	eb02 63b3 	add.w	r3, r2, r3, ror #26

0040a1f2 <.LVL248>:
        MD5STEP(F4, d, a, b, c, md5->buffer[7]  + 0x432aff97, 10);
  40a1f2:	ea63 0b06 	orn	fp, r3, r6
  40a1f6:	ea8b 0b02 	eor.w	fp, fp, r2
  40a1fa:	4c5d      	ldr	r4, [pc, #372]	; (40a370 <.LVL322+0x28>)
  40a1fc:	4454      	add	r4, sl
  40a1fe:	4421      	add	r1, r4

0040a200 <.LVL251>:
  40a200:	448b      	add	fp, r1
  40a202:	eb03 5bbb 	add.w	fp, r3, fp, ror #22

0040a206 <.LVL253>:
        MD5STEP(F4, c, d, a, b, md5->buffer[14] + 0xab9423a7, 15);
  40a206:	ea6b 0e02 	orn	lr, fp, r2
  40a20a:	ea8e 0e03 	eor.w	lr, lr, r3
  40a20e:	4959      	ldr	r1, [pc, #356]	; (40a374 <.LVL322+0x2c>)
  40a210:	4449      	add	r1, r9
  40a212:	440e      	add	r6, r1

0040a214 <.LVL256>:
  40a214:	44b6      	add	lr, r6
  40a216:	eb0b 4e7e 	add.w	lr, fp, lr, ror #17

0040a21a <.LVL258>:
        MD5STEP(F4, b, c, d, a, md5->buffer[5]  + 0xfc93a039, 21);
  40a21a:	ea6e 0403 	orn	r4, lr, r3
  40a21e:	ea84 040b 	eor.w	r4, r4, fp
  40a222:	4955      	ldr	r1, [pc, #340]	; (40a378 <.LVL322+0x30>)
  40a224:	6a06      	ldr	r6, [r0, #32]
  40a226:	4431      	add	r1, r6
  40a228:	440a      	add	r2, r1

0040a22a <.LVL261>:
  40a22a:	4414      	add	r4, r2
  40a22c:	eb0e 24f4 	add.w	r4, lr, r4, ror #11

0040a230 <.LVL263>:
        MD5STEP(F4, a, b, c, d, md5->buffer[12] + 0x655b59c3,  6);
  40a230:	ea64 060b 	orn	r6, r4, fp
  40a234:	ea86 060e 	eor.w	r6, r6, lr
  40a238:	4a50      	ldr	r2, [pc, #320]	; (40a37c <.LVL322+0x34>)
  40a23a:	4442      	add	r2, r8
  40a23c:	4413      	add	r3, r2

0040a23e <.LVL266>:
  40a23e:	441e      	add	r6, r3
  40a240:	eb04 66b6 	add.w	r6, r4, r6, ror #26

0040a244 <.LVL268>:
        MD5STEP(F4, d, a, b, c, md5->buffer[3]  + 0x8f0ccc92, 10);
  40a244:	ea66 080e 	orn	r8, r6, lr
  40a248:	ea88 0804 	eor.w	r8, r8, r4
  40a24c:	4b4c      	ldr	r3, [pc, #304]	; (40a380 <.LVL322+0x38>)
  40a24e:	6982      	ldr	r2, [r0, #24]
  40a250:	4413      	add	r3, r2
  40a252:	449b      	add	fp, r3

0040a254 <.LVL271>:
  40a254:	44d8      	add	r8, fp
  40a256:	eb06 58b8 	add.w	r8, r6, r8, ror #22

0040a25a <.LVL273>:
        MD5STEP(F4, c, d, a, b, md5->buffer[10] + 0xffeff47d, 15);
  40a25a:	ea68 0204 	orn	r2, r8, r4
  40a25e:	4072      	eors	r2, r6
  40a260:	4948      	ldr	r1, [pc, #288]	; (40a384 <.LVL322+0x3c>)
  40a262:	6b43      	ldr	r3, [r0, #52]	; 0x34
  40a264:	4419      	add	r1, r3
  40a266:	448e      	add	lr, r1

0040a268 <.LVL276>:
  40a268:	4472      	add	r2, lr
  40a26a:	eb08 4272 	add.w	r2, r8, r2, ror #17

0040a26e <.LVL278>:
        MD5STEP(F4, b, c, d, a, md5->buffer[1]  + 0x85845dd1, 21);
  40a26e:	ea62 0306 	orn	r3, r2, r6
  40a272:	ea83 0308 	eor.w	r3, r3, r8
  40a276:	4944      	ldr	r1, [pc, #272]	; (40a388 <.LVL322+0x40>)
  40a278:	6907      	ldr	r7, [r0, #16]
  40a27a:	4439      	add	r1, r7
  40a27c:	440c      	add	r4, r1

0040a27e <.LVL281>:
  40a27e:	4423      	add	r3, r4
  40a280:	eb02 23f3 	add.w	r3, r2, r3, ror #11

0040a284 <.LVL283>:
        MD5STEP(F4, a, b, c, d, md5->buffer[8]  + 0x6fa87e4f,  6);
  40a284:	ea63 0e08 	orn	lr, r3, r8
  40a288:	ea8e 0e02 	eor.w	lr, lr, r2
  40a28c:	493f      	ldr	r1, [pc, #252]	; (40a38c <.LVL322+0x44>)
  40a28e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  40a290:	4421      	add	r1, r4
  40a292:	440e      	add	r6, r1

0040a294 <.LVL286>:
  40a294:	44b6      	add	lr, r6
  40a296:	eb03 6ebe 	add.w	lr, r3, lr, ror #26

0040a29a <.LVL288>:
        MD5STEP(F4, d, a, b, c, md5->buffer[15] + 0xfe2ce6e0, 10);
  40a29a:	ea6e 0402 	orn	r4, lr, r2
  40a29e:	405c      	eors	r4, r3
  40a2a0:	493b      	ldr	r1, [pc, #236]	; (40a390 <.LVL322+0x48>)
  40a2a2:	4461      	add	r1, ip
  40a2a4:	4488      	add	r8, r1

0040a2a6 <.LVL291>:
  40a2a6:	4444      	add	r4, r8
  40a2a8:	eb0e 54b4 	add.w	r4, lr, r4, ror #22

0040a2ac <.LVL293>:
        MD5STEP(F4, c, d, a, b, md5->buffer[6]  + 0xa3014314, 15);
  40a2ac:	ea64 0603 	orn	r6, r4, r3
  40a2b0:	ea86 060e 	eor.w	r6, r6, lr
  40a2b4:	4937      	ldr	r1, [pc, #220]	; (40a394 <.LVL322+0x4c>)
  40a2b6:	6a47      	ldr	r7, [r0, #36]	; 0x24
  40a2b8:	4439      	add	r1, r7
  40a2ba:	440a      	add	r2, r1

0040a2bc <.LVL296>:
  40a2bc:	4416      	add	r6, r2
  40a2be:	eb04 4676 	add.w	r6, r4, r6, ror #17

0040a2c2 <.LVL298>:
        MD5STEP(F4, b, c, d, a, md5->buffer[13] + 0x4e0811a1, 21);
  40a2c2:	ea66 0c0e 	orn	ip, r6, lr
  40a2c6:	ea8c 0c04 	eor.w	ip, ip, r4
  40a2ca:	4933      	ldr	r1, [pc, #204]	; (40a398 <.LVL322+0x50>)
  40a2cc:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40a2ce:	4411      	add	r1, r2
  40a2d0:	440b      	add	r3, r1

0040a2d2 <.LVL301>:
  40a2d2:	449c      	add	ip, r3
  40a2d4:	eb06 2cfc 	add.w	ip, r6, ip, ror #11

0040a2d8 <.LVL303>:
        MD5STEP(F4, a, b, c, d, md5->buffer[4]  + 0xf7537e82,  6);
  40a2d8:	ea6c 0204 	orn	r2, ip, r4
  40a2dc:	4072      	eors	r2, r6
  40a2de:	492f      	ldr	r1, [pc, #188]	; (40a39c <.LVL322+0x54>)
  40a2e0:	69c3      	ldr	r3, [r0, #28]
  40a2e2:	4419      	add	r1, r3
  40a2e4:	448e      	add	lr, r1

0040a2e6 <.LVL306>:
  40a2e6:	4472      	add	r2, lr
  40a2e8:	eb0c 62b2 	add.w	r2, ip, r2, ror #26

0040a2ec <.LVL308>:
        MD5STEP(F4, d, a, b, c, md5->buffer[11] + 0xbd3af235, 10);
  40a2ec:	ea62 0306 	orn	r3, r2, r6
  40a2f0:	ea83 030c 	eor.w	r3, r3, ip
  40a2f4:	492a      	ldr	r1, [pc, #168]	; (40a3a0 <.LVL322+0x58>)
  40a2f6:	6b87      	ldr	r7, [r0, #56]	; 0x38
  40a2f8:	4439      	add	r1, r7
  40a2fa:	440c      	add	r4, r1

0040a2fc <.LVL311>:
  40a2fc:	441c      	add	r4, r3
  40a2fe:	eb02 54b4 	add.w	r4, r2, r4, ror #22

0040a302 <.LVL313>:
        MD5STEP(F4, c, d, a, b, md5->buffer[2]  + 0x2ad7d2bb, 15);
  40a302:	ea64 030c 	orn	r3, r4, ip
  40a306:	4053      	eors	r3, r2
  40a308:	4926      	ldr	r1, [pc, #152]	; (40a3a4 <.LVL322+0x5c>)
  40a30a:	6947      	ldr	r7, [r0, #20]
  40a30c:	4439      	add	r1, r7
  40a30e:	440e      	add	r6, r1

0040a310 <.LVL316>:
  40a310:	441e      	add	r6, r3
  40a312:	eb04 4676 	add.w	r6, r4, r6, ror #17

0040a316 <.LVL318>:
        MD5STEP(F4, b, c, d, a, md5->buffer[9]  + 0xeb86d391, 21);

        /* Add the working vars back into digest state[]  */
        md5->digest[0] += a;
  40a316:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40a318:	4413      	add	r3, r2
  40a31a:	64c3      	str	r3, [r0, #76]	; 0x4c
        MD5STEP(F4, b, c, d, a, md5->buffer[9]  + 0xeb86d391, 21);
  40a31c:	ea66 0202 	orn	r2, r6, r2

0040a320 <.LVL319>:
  40a320:	4062      	eors	r2, r4
  40a322:	4921      	ldr	r1, [pc, #132]	; (40a3a8 <.LVL322+0x60>)
  40a324:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40a326:	4419      	add	r1, r3
  40a328:	448c      	add	ip, r1
  40a32a:	4494      	add	ip, r2
        md5->digest[1] += b;
  40a32c:	4435      	add	r5, r6
  40a32e:	eb05 25fc 	add.w	r5, r5, ip, ror #11
  40a332:	6505      	str	r5, [r0, #80]	; 0x50
        md5->digest[2] += c;
  40a334:	9b01      	ldr	r3, [sp, #4]
  40a336:	4433      	add	r3, r6
  40a338:	6543      	str	r3, [r0, #84]	; 0x54
        md5->digest[3] += d;
  40a33a:	6d83      	ldr	r3, [r0, #88]	; 0x58
  40a33c:	441c      	add	r4, r3

0040a33e <.LVL320>:
  40a33e:	6584      	str	r4, [r0, #88]	; 0x58

        return 0;
    }
  40a340:	2000      	movs	r0, #0

0040a342 <.LVL321>:
  40a342:	b003      	add	sp, #12

0040a344 <.LCFI2>:
  40a344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040a348 <.LVL322>:
  40a348:	f6bb4b60 	.word	0xf6bb4b60
  40a34c:	bebfbc70 	.word	0xbebfbc70
  40a350:	289b7ec6 	.word	0x289b7ec6
  40a354:	eaa127fa 	.word	0xeaa127fa
  40a358:	d4ef3085 	.word	0xd4ef3085
  40a35c:	04881d05 	.word	0x04881d05
  40a360:	d9d4d039 	.word	0xd9d4d039
  40a364:	e6db99e5 	.word	0xe6db99e5
  40a368:	1fa27cf8 	.word	0x1fa27cf8
  40a36c:	c4ac5665 	.word	0xc4ac5665
  40a370:	432aff97 	.word	0x432aff97
  40a374:	ab9423a7 	.word	0xab9423a7
  40a378:	fc93a039 	.word	0xfc93a039
  40a37c:	655b59c3 	.word	0x655b59c3
  40a380:	8f0ccc92 	.word	0x8f0ccc92
  40a384:	ffeff47d 	.word	0xffeff47d
  40a388:	85845dd1 	.word	0x85845dd1
  40a38c:	6fa87e4f 	.word	0x6fa87e4f
  40a390:	fe2ce6e0 	.word	0xfe2ce6e0
  40a394:	a3014314 	.word	0xa3014314
  40a398:	4e0811a1 	.word	0x4e0811a1
  40a39c:	f7537e82 	.word	0xf7537e82
  40a3a0:	bd3af235 	.word	0xbd3af235
  40a3a4:	2ad7d2bb 	.word	0x2ad7d2bb
  40a3a8:	eb86d391 	.word	0xeb86d391
  40a3ac:	f4292244 	.word	0xf4292244

Disassembly of section .text._malloc_r%51:

0040a3b0 <_malloc_r>:
  40a3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0040a3b4 <.LCFI0>:
  40a3b4:	f101 060b 	add.w	r6, r1, #11
  40a3b8:	2e16      	cmp	r6, #22
  40a3ba:	b083      	sub	sp, #12

0040a3bc <.LCFI1>:
  40a3bc:	4605      	mov	r5, r0
  40a3be:	f240 809e 	bls.w	40a4fe <.LVL46>

0040a3c2 <.LVL1>:
  40a3c2:	f036 0607 	bics.w	r6, r6, #7

0040a3c6 <.LVL2>:
  40a3c6:	f100 80bd 	bmi.w	40a544 <.LCFI3>
  40a3ca:	42b1      	cmp	r1, r6
  40a3cc:	f200 80ba 	bhi.w	40a544 <.LCFI3>
  40a3d0:	f008 fdfe 	bl	412fd0 <__malloc_lock>

0040a3d4 <.LVL3>:
  40a3d4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40a3d8:	f0c0 828b 	bcc.w	40a8f2 <.LVL171>
  40a3dc:	0a73      	lsrs	r3, r6, #9
  40a3de:	f000 80b8 	beq.w	40a552 <.LCFI5>
  40a3e2:	2b04      	cmp	r3, #4
  40a3e4:	f200 816e 	bhi.w	40a6c4 <.LCFI11>
  40a3e8:	09b3      	lsrs	r3, r6, #6
  40a3ea:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40a3ee:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40a3f2:	00c3      	lsls	r3, r0, #3

0040a3f4 <.LVL4>:
  40a3f4:	4fb9      	ldr	r7, [pc, #740]	; (40a6dc <.LCFI11+0x18>)
  40a3f6:	443b      	add	r3, r7
  40a3f8:	f1a3 0108 	sub.w	r1, r3, #8

0040a3fc <.LVL5>:
  40a3fc:	685c      	ldr	r4, [r3, #4]

0040a3fe <.LVL6>:
  40a3fe:	42a1      	cmp	r1, r4
  40a400:	d106      	bne.n	40a410 <.LVL10>
  40a402:	e00c      	b.n	40a41e <.LVL14>

0040a404 <.LVL7>:
  40a404:	2a00      	cmp	r2, #0
  40a406:	f280 80aa 	bge.w	40a55e <.LVL62>

0040a40a <.LVL8>:
  40a40a:	68e4      	ldr	r4, [r4, #12]
  40a40c:	42a1      	cmp	r1, r4
  40a40e:	d006      	beq.n	40a41e <.LVL14>

0040a410 <.LVL10>:
  40a410:	6863      	ldr	r3, [r4, #4]
  40a412:	f023 0303 	bic.w	r3, r3, #3

0040a416 <.LVL11>:
  40a416:	1b9a      	subs	r2, r3, r6

0040a418 <.LVL12>:
  40a418:	2a0f      	cmp	r2, #15
  40a41a:	ddf3      	ble.n	40a404 <.LVL7>

0040a41c <.LVL13>:
  40a41c:	4670      	mov	r0, lr

0040a41e <.LVL14>:
  40a41e:	693c      	ldr	r4, [r7, #16]
  40a420:	f8df e2d0 	ldr.w	lr, [pc, #720]	; 40a6f4 <.LCFI11+0x30>
  40a424:	4574      	cmp	r4, lr
  40a426:	f000 819f 	beq.w	40a768 <.LVL115>
  40a42a:	6863      	ldr	r3, [r4, #4]
  40a42c:	f023 0303 	bic.w	r3, r3, #3

0040a430 <.LVL16>:
  40a430:	1b9a      	subs	r2, r3, r6

0040a432 <.LVL17>:
  40a432:	2a0f      	cmp	r2, #15
  40a434:	f300 8184 	bgt.w	40a740 <.LVL110>
  40a438:	2a00      	cmp	r2, #0
  40a43a:	f8c7 e014 	str.w	lr, [r7, #20]
  40a43e:	f8c7 e010 	str.w	lr, [r7, #16]
  40a442:	f280 809d 	bge.w	40a580 <.LCFI7>
  40a446:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40a44a:	f080 8155 	bcs.w	40a6f8 <.LVL101>
  40a44e:	08db      	lsrs	r3, r3, #3

0040a450 <.LVL18>:
  40a450:	f103 0c01 	add.w	ip, r3, #1
  40a454:	1099      	asrs	r1, r3, #2
  40a456:	687a      	ldr	r2, [r7, #4]

0040a458 <.LVL19>:
  40a458:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40a45c:	f8c4 8008 	str.w	r8, [r4, #8]
  40a460:	2301      	movs	r3, #1

0040a462 <.LVL20>:
  40a462:	408b      	lsls	r3, r1
  40a464:	eb07 01cc 	add.w	r1, r7, ip, lsl #3

0040a468 <.LVL21>:
  40a468:	4313      	orrs	r3, r2
  40a46a:	3908      	subs	r1, #8

0040a46c <.LVL22>:
  40a46c:	60e1      	str	r1, [r4, #12]
  40a46e:	607b      	str	r3, [r7, #4]

0040a470 <.LVL23>:
  40a470:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40a474:	f8c8 400c 	str.w	r4, [r8, #12]

0040a478 <.LVL24>:
  40a478:	1082      	asrs	r2, r0, #2
  40a47a:	2401      	movs	r4, #1

0040a47c <.LVL25>:
  40a47c:	4094      	lsls	r4, r2

0040a47e <.LVL26>:
  40a47e:	429c      	cmp	r4, r3
  40a480:	f200 808b 	bhi.w	40a59a <.LCFI9>
  40a484:	421c      	tst	r4, r3
  40a486:	d106      	bne.n	40a496 <.LVL30>
  40a488:	f020 0003 	bic.w	r0, r0, #3

0040a48c <.LVL27>:
  40a48c:	0064      	lsls	r4, r4, #1

0040a48e <.LVL28>:
  40a48e:	421c      	tst	r4, r3
  40a490:	f100 0004 	add.w	r0, r0, #4

0040a494 <.LVL29>:
  40a494:	d0fa      	beq.n	40a48c <.LVL27>

0040a496 <.LVL30>:
  40a496:	eb07 09c0 	add.w	r9, r7, r0, lsl #3

0040a49a <.LVL31>:
  40a49a:	46cc      	mov	ip, r9
  40a49c:	4680      	mov	r8, r0

0040a49e <.LVL32>:
  40a49e:	f8dc 300c 	ldr.w	r3, [ip, #12]

0040a4a2 <.LVL33>:
  40a4a2:	459c      	cmp	ip, r3
  40a4a4:	d107      	bne.n	40a4b6 <.LVL36>
  40a4a6:	e161      	b.n	40a76c <.LVL116>

0040a4a8 <.LVL34>:
  40a4a8:	2a00      	cmp	r2, #0
  40a4aa:	f280 816f 	bge.w	40a78c <.LVL121>
  40a4ae:	68db      	ldr	r3, [r3, #12]
  40a4b0:	459c      	cmp	ip, r3
  40a4b2:	f000 815b 	beq.w	40a76c <.LVL116>

0040a4b6 <.LVL36>:
  40a4b6:	6859      	ldr	r1, [r3, #4]
  40a4b8:	f021 0103 	bic.w	r1, r1, #3

0040a4bc <.LVL37>:
  40a4bc:	1b8a      	subs	r2, r1, r6

0040a4be <.LVL38>:
  40a4be:	2a0f      	cmp	r2, #15
  40a4c0:	ddf2      	ble.n	40a4a8 <.LVL34>
  40a4c2:	f8d3 c00c 	ldr.w	ip, [r3, #12]

0040a4c6 <.LVL39>:
  40a4c6:	f8d3 8008 	ldr.w	r8, [r3, #8]

0040a4ca <.LVL40>:
  40a4ca:	9301      	str	r3, [sp, #4]
  40a4cc:	199c      	adds	r4, r3, r6

0040a4ce <.LVL41>:
  40a4ce:	4628      	mov	r0, r5

0040a4d0 <.LVL42>:
  40a4d0:	f046 0601 	orr.w	r6, r6, #1
  40a4d4:	f042 0501 	orr.w	r5, r2, #1

0040a4d8 <.LVL43>:
  40a4d8:	605e      	str	r6, [r3, #4]
  40a4da:	f8c8 c00c 	str.w	ip, [r8, #12]
  40a4de:	f8cc 8008 	str.w	r8, [ip, #8]
  40a4e2:	617c      	str	r4, [r7, #20]
  40a4e4:	613c      	str	r4, [r7, #16]
  40a4e6:	f8c4 e00c 	str.w	lr, [r4, #12]
  40a4ea:	f8c4 e008 	str.w	lr, [r4, #8]
  40a4ee:	6065      	str	r5, [r4, #4]
  40a4f0:	505a      	str	r2, [r3, r1]
  40a4f2:	f008 fd6f 	bl	412fd4 <__malloc_unlock>

0040a4f6 <.LVL44>:
  40a4f6:	9b01      	ldr	r3, [sp, #4]
  40a4f8:	f103 0408 	add.w	r4, r3, #8

0040a4fc <.LVL45>:
  40a4fc:	e01e      	b.n	40a53c <.LVL58>

0040a4fe <.LVL46>:
  40a4fe:	2910      	cmp	r1, #16
  40a500:	d820      	bhi.n	40a544 <.LCFI3>
  40a502:	f008 fd65 	bl	412fd0 <__malloc_lock>

0040a506 <.LVL47>:
  40a506:	2610      	movs	r6, #16

0040a508 <.LVL48>:
  40a508:	2318      	movs	r3, #24
  40a50a:	2002      	movs	r0, #2

0040a50c <.LVL49>:
  40a50c:	4f73      	ldr	r7, [pc, #460]	; (40a6dc <.LCFI11+0x18>)
  40a50e:	443b      	add	r3, r7

0040a510 <.LVL50>:
  40a510:	f1a3 0208 	sub.w	r2, r3, #8

0040a514 <.LVL51>:
  40a514:	685c      	ldr	r4, [r3, #4]

0040a516 <.LVL52>:
  40a516:	4294      	cmp	r4, r2
  40a518:	f000 8131 	beq.w	40a77e <.LVL119>

0040a51c <.LVL53>:
  40a51c:	6863      	ldr	r3, [r4, #4]
  40a51e:	68e1      	ldr	r1, [r4, #12]
  40a520:	68a6      	ldr	r6, [r4, #8]
  40a522:	f023 0303 	bic.w	r3, r3, #3

0040a526 <.LVL54>:
  40a526:	4423      	add	r3, r4

0040a528 <.LVL55>:
  40a528:	4628      	mov	r0, r5
  40a52a:	685a      	ldr	r2, [r3, #4]
  40a52c:	60f1      	str	r1, [r6, #12]
  40a52e:	f042 0201 	orr.w	r2, r2, #1
  40a532:	608e      	str	r6, [r1, #8]
  40a534:	605a      	str	r2, [r3, #4]

0040a536 <.LVL56>:
  40a536:	f008 fd4d 	bl	412fd4 <__malloc_unlock>

0040a53a <.LVL57>:
  40a53a:	3408      	adds	r4, #8

0040a53c <.LVL58>:
  40a53c:	4620      	mov	r0, r4
  40a53e:	b003      	add	sp, #12

0040a540 <.LCFI2>:
  40a540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040a544 <.LCFI3>:
  40a544:	2400      	movs	r4, #0
  40a546:	230c      	movs	r3, #12
  40a548:	4620      	mov	r0, r4

0040a54a <.LVL60>:
  40a54a:	602b      	str	r3, [r5, #0]
  40a54c:	b003      	add	sp, #12

0040a54e <.LCFI4>:
  40a54e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040a552 <.LCFI5>:
  40a552:	2040      	movs	r0, #64	; 0x40
  40a554:	f44f 7300 	mov.w	r3, #512	; 0x200
  40a558:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40a55c:	e74a      	b.n	40a3f4 <.LVL4>

0040a55e <.LVL62>:
  40a55e:	4423      	add	r3, r4

0040a560 <.LVL63>:
  40a560:	68e1      	ldr	r1, [r4, #12]

0040a562 <.LVL64>:
  40a562:	685a      	ldr	r2, [r3, #4]

0040a564 <.LVL65>:
  40a564:	68a6      	ldr	r6, [r4, #8]

0040a566 <.LVL66>:
  40a566:	f042 0201 	orr.w	r2, r2, #1
  40a56a:	60f1      	str	r1, [r6, #12]
  40a56c:	4628      	mov	r0, r5
  40a56e:	608e      	str	r6, [r1, #8]
  40a570:	605a      	str	r2, [r3, #4]

0040a572 <.LVL67>:
  40a572:	f008 fd2f 	bl	412fd4 <__malloc_unlock>

0040a576 <.LVL68>:
  40a576:	3408      	adds	r4, #8

0040a578 <.LVL69>:
  40a578:	4620      	mov	r0, r4
  40a57a:	b003      	add	sp, #12

0040a57c <.LCFI6>:
  40a57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040a580 <.LCFI7>:
  40a580:	4423      	add	r3, r4

0040a582 <.LVL71>:
  40a582:	4628      	mov	r0, r5

0040a584 <.LVL72>:
  40a584:	685a      	ldr	r2, [r3, #4]

0040a586 <.LVL73>:
  40a586:	f042 0201 	orr.w	r2, r2, #1
  40a58a:	605a      	str	r2, [r3, #4]

0040a58c <.LVL74>:
  40a58c:	f008 fd22 	bl	412fd4 <__malloc_unlock>

0040a590 <.LVL75>:
  40a590:	3408      	adds	r4, #8

0040a592 <.LVL76>:
  40a592:	4620      	mov	r0, r4
  40a594:	b003      	add	sp, #12

0040a596 <.LCFI8>:
  40a596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040a59a <.LCFI9>:
  40a59a:	68bc      	ldr	r4, [r7, #8]

0040a59c <.LVL78>:
  40a59c:	6863      	ldr	r3, [r4, #4]
  40a59e:	f023 0a03 	bic.w	sl, r3, #3
  40a5a2:	45b2      	cmp	sl, r6
  40a5a4:	d303      	bcc.n	40a5ae <.LBB4>
  40a5a6:	ebaa 0306 	sub.w	r3, sl, r6
  40a5aa:	2b0f      	cmp	r3, #15
  40a5ac:	dc7a      	bgt.n	40a6a4 <.LBE4>

0040a5ae <.LBB4>:
  40a5ae:	4b4c      	ldr	r3, [pc, #304]	; (40a6e0 <.LCFI11+0x1c>)
  40a5b0:	4a4c      	ldr	r2, [pc, #304]	; (40a6e4 <.LCFI11+0x20>)
  40a5b2:	9301      	str	r3, [sp, #4]
  40a5b4:	6811      	ldr	r1, [r2, #0]
  40a5b6:	681a      	ldr	r2, [r3, #0]
  40a5b8:	eb06 0801 	add.w	r8, r6, r1
  40a5bc:	3201      	adds	r2, #1
  40a5be:	bf16      	itet	ne
  40a5c0:	f108 088f 	addne.w	r8, r8, #143	; 0x8f
  40a5c4:	f108 0810 	addeq.w	r8, r8, #16
  40a5c8:	f028 087f 	bicne.w	r8, r8, #127	; 0x7f
  40a5cc:	4641      	mov	r1, r8
  40a5ce:	4628      	mov	r0, r5
  40a5d0:	f008 f9cc 	bl	41296c <.LFE149>

0040a5d4 <.LVL80>:
  40a5d4:	f1b0 3fff 	cmp.w	r0, #4294967295
  40a5d8:	eb04 0b0a 	add.w	fp, r4, sl

0040a5dc <.LVL81>:
  40a5dc:	4681      	mov	r9, r0

0040a5de <.LVL82>:
  40a5de:	9b01      	ldr	r3, [sp, #4]
  40a5e0:	f000 80f1 	beq.w	40a7c6 <.LBB10+0x4>
  40a5e4:	4583      	cmp	fp, r0
  40a5e6:	f200 80ec 	bhi.w	40a7c2 <.LBB10>
  40a5ea:	4a3f      	ldr	r2, [pc, #252]	; (40a6e8 <.LCFI11+0x24>)
  40a5ec:	6811      	ldr	r1, [r2, #0]
  40a5ee:	4441      	add	r1, r8
  40a5f0:	6011      	str	r1, [r2, #0]
  40a5f2:	f000 8147 	beq.w	40a884 <.LBB12+0xa>

0040a5f6 <.LVL83>:
  40a5f6:	6818      	ldr	r0, [r3, #0]

0040a5f8 <.LVL84>:
  40a5f8:	9201      	str	r2, [sp, #4]
  40a5fa:	3001      	adds	r0, #1
  40a5fc:	bf1b      	ittet	ne
  40a5fe:	eba9 0b0b 	subne.w	fp, r9, fp

0040a602 <.LVL85>:
  40a602:	4459      	addne	r1, fp
  40a604:	f8c3 9000 	streq.w	r9, [r3]
  40a608:	6011      	strne	r1, [r2, #0]
  40a60a:	f019 0107 	ands.w	r1, r9, #7

0040a60e <.LVL86>:
  40a60e:	bf1c      	itt	ne
  40a610:	f1c1 0308 	rsbne	r3, r1, #8
  40a614:	4499      	addne	r9, r3

0040a616 <.LVL87>:
  40a616:	eb09 0308 	add.w	r3, r9, r8
  40a61a:	bf14      	ite	ne
  40a61c:	f1c1 0188 	rsbne	r1, r1, #136	; 0x88

0040a620 <.LVL88>:
  40a620:	2180      	moveq	r1, #128	; 0x80
  40a622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  40a626:	eba1 0803 	sub.w	r8, r1, r3

0040a62a <.LVL89>:
  40a62a:	4641      	mov	r1, r8
  40a62c:	4628      	mov	r0, r5
  40a62e:	f008 f99d 	bl	41296c <.LFE149>

0040a632 <.LVL90>:
  40a632:	1c43      	adds	r3, r0, #1
  40a634:	9a01      	ldr	r2, [sp, #4]
  40a636:	f000 813f 	beq.w	40a8b8 <.LVL167>
  40a63a:	eba0 0309 	sub.w	r3, r0, r9
  40a63e:	4443      	add	r3, r8
  40a640:	f043 0301 	orr.w	r3, r3, #1

0040a644 <.LVL91>:
  40a644:	6811      	ldr	r1, [r2, #0]
  40a646:	f8c7 9008 	str.w	r9, [r7, #8]
  40a64a:	4441      	add	r1, r8
  40a64c:	42bc      	cmp	r4, r7
  40a64e:	f8c9 3004 	str.w	r3, [r9, #4]
  40a652:	6011      	str	r1, [r2, #0]
  40a654:	d017      	beq.n	40a686 <.LVL94>
  40a656:	f1ba 0f0f 	cmp.w	sl, #15
  40a65a:	f240 80ee 	bls.w	40a83a <.LBB11>
  40a65e:	6860      	ldr	r0, [r4, #4]
  40a660:	f1aa 030c 	sub.w	r3, sl, #12
  40a664:	f023 0307 	bic.w	r3, r3, #7

0040a668 <.LVL93>:
  40a668:	eb04 0e03 	add.w	lr, r4, r3
  40a66c:	f000 0001 	and.w	r0, r0, #1
  40a670:	f04f 0c05 	mov.w	ip, #5
  40a674:	4318      	orrs	r0, r3
  40a676:	2b0f      	cmp	r3, #15
  40a678:	6060      	str	r0, [r4, #4]
  40a67a:	f8ce c004 	str.w	ip, [lr, #4]
  40a67e:	f8ce c008 	str.w	ip, [lr, #8]
  40a682:	f200 8110 	bhi.w	40a8a6 <.LBB13>

0040a686 <.LVL94>:
  40a686:	4b19      	ldr	r3, [pc, #100]	; (40a6ec <.LCFI11+0x28>)
  40a688:	68bc      	ldr	r4, [r7, #8]

0040a68a <.LVL95>:
  40a68a:	681a      	ldr	r2, [r3, #0]
  40a68c:	4291      	cmp	r1, r2
  40a68e:	bf88      	it	hi
  40a690:	6019      	strhi	r1, [r3, #0]
  40a692:	4b17      	ldr	r3, [pc, #92]	; (40a6f0 <.LCFI11+0x2c>)
  40a694:	681a      	ldr	r2, [r3, #0]
  40a696:	4291      	cmp	r1, r2
  40a698:	6862      	ldr	r2, [r4, #4]
  40a69a:	bf88      	it	hi
  40a69c:	6019      	strhi	r1, [r3, #0]
  40a69e:	f022 0203 	bic.w	r2, r2, #3
  40a6a2:	e094      	b.n	40a7ce <.LBE10>

0040a6a4 <.LBE4>:
  40a6a4:	19a2      	adds	r2, r4, r6
  40a6a6:	f043 0301 	orr.w	r3, r3, #1

0040a6aa <.LVL97>:
  40a6aa:	f046 0601 	orr.w	r6, r6, #1
  40a6ae:	6066      	str	r6, [r4, #4]
  40a6b0:	4628      	mov	r0, r5
  40a6b2:	60ba      	str	r2, [r7, #8]

0040a6b4 <.LVL98>:
  40a6b4:	6053      	str	r3, [r2, #4]
  40a6b6:	f008 fc8d 	bl	412fd4 <__malloc_unlock>

0040a6ba <.LVL99>:
  40a6ba:	3408      	adds	r4, #8
  40a6bc:	4620      	mov	r0, r4
  40a6be:	b003      	add	sp, #12

0040a6c0 <.LCFI10>:
  40a6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040a6c4 <.LCFI11>:
  40a6c4:	2b14      	cmp	r3, #20
  40a6c6:	d970      	bls.n	40a7aa <.LVL130>
  40a6c8:	2b54      	cmp	r3, #84	; 0x54
  40a6ca:	f200 80ac 	bhi.w	40a826 <.LVL150>
  40a6ce:	0b33      	lsrs	r3, r6, #12
  40a6d0:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40a6d4:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40a6d8:	00c3      	lsls	r3, r0, #3
  40a6da:	e68b      	b.n	40a3f4 <.LVL4>
  40a6dc:	2040cc80 	.word	0x2040cc80
  40a6e0:	2040dd38 	.word	0x2040dd38
  40a6e4:	2040dd34 	.word	0x2040dd34
  40a6e8:	2040dc28 	.word	0x2040dc28
  40a6ec:	2040dd2c 	.word	0x2040dd2c
  40a6f0:	2040dd30 	.word	0x2040dd30
  40a6f4:	2040cc88 	.word	0x2040cc88

0040a6f8 <.LVL101>:
  40a6f8:	0a5a      	lsrs	r2, r3, #9

0040a6fa <.LVL102>:
  40a6fa:	2a04      	cmp	r2, #4
  40a6fc:	d95b      	bls.n	40a7b6 <.LVL131>
  40a6fe:	2a14      	cmp	r2, #20
  40a700:	f200 80b3 	bhi.w	40a86a <.LVL159>
  40a704:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40a708:	00c9      	lsls	r1, r1, #3
  40a70a:	325b      	adds	r2, #91	; 0x5b

0040a70c <.LVL103>:
  40a70c:	eb07 0c01 	add.w	ip, r7, r1
  40a710:	5879      	ldr	r1, [r7, r1]
  40a712:	f1ac 0c08 	sub.w	ip, ip, #8

0040a716 <.LVL104>:
  40a716:	458c      	cmp	ip, r1
  40a718:	f000 8093 	beq.w	40a842 <.LBE11>

0040a71c <.LVL105>:
  40a71c:	684a      	ldr	r2, [r1, #4]
  40a71e:	f022 0203 	bic.w	r2, r2, #3
  40a722:	4293      	cmp	r3, r2
  40a724:	d27d      	bcs.n	40a822 <.LVL148>
  40a726:	6889      	ldr	r1, [r1, #8]
  40a728:	458c      	cmp	ip, r1
  40a72a:	d1f7      	bne.n	40a71c <.LVL105>

0040a72c <.LVL107>:
  40a72c:	f8dc 200c 	ldr.w	r2, [ip, #12]

0040a730 <.LVL108>:
  40a730:	687b      	ldr	r3, [r7, #4]

0040a732 <.LVL109>:
  40a732:	60e2      	str	r2, [r4, #12]
  40a734:	f8c4 c008 	str.w	ip, [r4, #8]
  40a738:	6094      	str	r4, [r2, #8]
  40a73a:	f8cc 400c 	str.w	r4, [ip, #12]
  40a73e:	e69b      	b.n	40a478 <.LVL24>

0040a740 <.LVL110>:
  40a740:	19a1      	adds	r1, r4, r6

0040a742 <.LVL111>:
  40a742:	f046 0c01 	orr.w	ip, r6, #1
  40a746:	f042 0601 	orr.w	r6, r2, #1
  40a74a:	f8c4 c004 	str.w	ip, [r4, #4]
  40a74e:	4628      	mov	r0, r5

0040a750 <.LVL112>:
  40a750:	6179      	str	r1, [r7, #20]
  40a752:	6139      	str	r1, [r7, #16]
  40a754:	f8c1 e00c 	str.w	lr, [r1, #12]
  40a758:	f8c1 e008 	str.w	lr, [r1, #8]
  40a75c:	604e      	str	r6, [r1, #4]
  40a75e:	50e2      	str	r2, [r4, r3]
  40a760:	f008 fc38 	bl	412fd4 <__malloc_unlock>

0040a764 <.LVL113>:
  40a764:	3408      	adds	r4, #8

0040a766 <.LVL114>:
  40a766:	e6e9      	b.n	40a53c <.LVL58>

0040a768 <.LVL115>:
  40a768:	687b      	ldr	r3, [r7, #4]
  40a76a:	e685      	b.n	40a478 <.LVL24>

0040a76c <.LVL116>:
  40a76c:	f108 0801 	add.w	r8, r8, #1

0040a770 <.LVL117>:
  40a770:	f018 0f03 	tst.w	r8, #3
  40a774:	f10c 0c08 	add.w	ip, ip, #8

0040a778 <.LVL118>:
  40a778:	f47f ae91 	bne.w	40a49e <.LVL32>
  40a77c:	e037      	b.n	40a7ee <.LVL140>

0040a77e <.LVL119>:
  40a77e:	68dc      	ldr	r4, [r3, #12]
  40a780:	42a3      	cmp	r3, r4
  40a782:	bf08      	it	eq
  40a784:	3002      	addeq	r0, #2
  40a786:	f43f ae4a 	beq.w	40a41e <.LVL14>
  40a78a:	e6c7      	b.n	40a51c <.LVL53>

0040a78c <.LVL121>:
  40a78c:	4419      	add	r1, r3

0040a78e <.LVL122>:
  40a78e:	461c      	mov	r4, r3

0040a790 <.LVL123>:
  40a790:	684a      	ldr	r2, [r1, #4]

0040a792 <.LVL124>:
  40a792:	68db      	ldr	r3, [r3, #12]

0040a794 <.LVL125>:
  40a794:	f854 6f08 	ldr.w	r6, [r4, #8]!

0040a798 <.LVL126>:
  40a798:	f042 0201 	orr.w	r2, r2, #1
  40a79c:	604a      	str	r2, [r1, #4]

0040a79e <.LVL127>:
  40a79e:	4628      	mov	r0, r5

0040a7a0 <.LVL128>:
  40a7a0:	60f3      	str	r3, [r6, #12]
  40a7a2:	609e      	str	r6, [r3, #8]
  40a7a4:	f008 fc16 	bl	412fd4 <__malloc_unlock>

0040a7a8 <.LVL129>:
  40a7a8:	e6c8      	b.n	40a53c <.LVL58>

0040a7aa <.LVL130>:
  40a7aa:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40a7ae:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40a7b2:	00c3      	lsls	r3, r0, #3
  40a7b4:	e61e      	b.n	40a3f4 <.LVL4>

0040a7b6 <.LVL131>:
  40a7b6:	099a      	lsrs	r2, r3, #6
  40a7b8:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40a7bc:	00c9      	lsls	r1, r1, #3
  40a7be:	3238      	adds	r2, #56	; 0x38
  40a7c0:	e7a4      	b.n	40a70c <.LVL103>

0040a7c2 <.LBB10>:
  40a7c2:	42bc      	cmp	r4, r7
  40a7c4:	d059      	beq.n	40a87a <.LBB12>
  40a7c6:	68bc      	ldr	r4, [r7, #8]

0040a7c8 <.LVL133>:
  40a7c8:	6862      	ldr	r2, [r4, #4]
  40a7ca:	f022 0203 	bic.w	r2, r2, #3

0040a7ce <.LBE10>:
  40a7ce:	4296      	cmp	r6, r2
  40a7d0:	eba2 0306 	sub.w	r3, r2, r6

0040a7d4 <.LVL135>:
  40a7d4:	d802      	bhi.n	40a7dc <.LVL136>
  40a7d6:	2b0f      	cmp	r3, #15
  40a7d8:	f73f af64 	bgt.w	40a6a4 <.LBE4>

0040a7dc <.LVL136>:
  40a7dc:	4628      	mov	r0, r5
  40a7de:	f008 fbf9 	bl	412fd4 <__malloc_unlock>

0040a7e2 <.LVL137>:
  40a7e2:	2400      	movs	r4, #0
  40a7e4:	e6aa      	b.n	40a53c <.LVL58>

0040a7e6 <.LVL138>:
  40a7e6:	f859 3908 	ldr.w	r3, [r9], #-8

0040a7ea <.LVL139>:
  40a7ea:	4599      	cmp	r9, r3
  40a7ec:	d17f      	bne.n	40a8ee <.LVL170>

0040a7ee <.LVL140>:
  40a7ee:	f010 0f03 	tst.w	r0, #3
  40a7f2:	f100 30ff 	add.w	r0, r0, #4294967295
  40a7f6:	d1f6      	bne.n	40a7e6 <.LVL138>
  40a7f8:	687b      	ldr	r3, [r7, #4]
  40a7fa:	ea23 0304 	bic.w	r3, r3, r4
  40a7fe:	607b      	str	r3, [r7, #4]

0040a800 <.LVL142>:
  40a800:	0064      	lsls	r4, r4, #1
  40a802:	429c      	cmp	r4, r3
  40a804:	f63f aec9 	bhi.w	40a59a <.LCFI9>
  40a808:	2c00      	cmp	r4, #0
  40a80a:	f43f aec6 	beq.w	40a59a <.LCFI9>
  40a80e:	421c      	tst	r4, r3
  40a810:	4640      	mov	r0, r8

0040a812 <.LVL144>:
  40a812:	f47f ae40 	bne.w	40a496 <.LVL30>

0040a816 <.LVL145>:
  40a816:	0064      	lsls	r4, r4, #1

0040a818 <.LVL146>:
  40a818:	421c      	tst	r4, r3
  40a81a:	f100 0004 	add.w	r0, r0, #4

0040a81e <.LVL147>:
  40a81e:	d0fa      	beq.n	40a816 <.LVL145>
  40a820:	e639      	b.n	40a496 <.LVL30>

0040a822 <.LVL148>:
  40a822:	468c      	mov	ip, r1

0040a824 <.LVL149>:
  40a824:	e782      	b.n	40a72c <.LVL107>

0040a826 <.LVL150>:
  40a826:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40a82a:	d813      	bhi.n	40a854 <.LVL158>
  40a82c:	0bf3      	lsrs	r3, r6, #15
  40a82e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40a832:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40a836:	00c3      	lsls	r3, r0, #3
  40a838:	e5dc      	b.n	40a3f4 <.LVL4>

0040a83a <.LBB11>:
  40a83a:	2301      	movs	r3, #1
  40a83c:	f8c9 3004 	str.w	r3, [r9, #4]

0040a840 <.LVL152>:
  40a840:	e7cc      	b.n	40a7dc <.LVL136>

0040a842 <.LBE11>:
  40a842:	687b      	ldr	r3, [r7, #4]

0040a844 <.LVL154>:
  40a844:	1092      	asrs	r2, r2, #2

0040a846 <.LVL155>:
  40a846:	2101      	movs	r1, #1

0040a848 <.LVL156>:
  40a848:	fa01 f202 	lsl.w	r2, r1, r2
  40a84c:	4313      	orrs	r3, r2
  40a84e:	607b      	str	r3, [r7, #4]

0040a850 <.LVL157>:
  40a850:	4662      	mov	r2, ip
  40a852:	e76e      	b.n	40a732 <.LVL109>

0040a854 <.LVL158>:
  40a854:	f240 5254 	movw	r2, #1364	; 0x554
  40a858:	4293      	cmp	r3, r2
  40a85a:	d81e      	bhi.n	40a89a <.LBE12>
  40a85c:	0cb3      	lsrs	r3, r6, #18
  40a85e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40a862:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40a866:	00c3      	lsls	r3, r0, #3
  40a868:	e5c4      	b.n	40a3f4 <.LVL4>

0040a86a <.LVL159>:
  40a86a:	2a54      	cmp	r2, #84	; 0x54
  40a86c:	d828      	bhi.n	40a8c0 <.LBE13>
  40a86e:	0b1a      	lsrs	r2, r3, #12
  40a870:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40a874:	00c9      	lsls	r1, r1, #3
  40a876:	326e      	adds	r2, #110	; 0x6e
  40a878:	e748      	b.n	40a70c <.LVL103>

0040a87a <.LBB12>:
  40a87a:	4a20      	ldr	r2, [pc, #128]	; (40a8fc <.LVL171+0xa>)
  40a87c:	6811      	ldr	r1, [r2, #0]
  40a87e:	4441      	add	r1, r8
  40a880:	6011      	str	r1, [r2, #0]
  40a882:	e6b8      	b.n	40a5f6 <.LVL83>
  40a884:	f01b 0f7f 	tst.w	fp, #127	; 0x7f
  40a888:	f47f aeb5 	bne.w	40a5f6 <.LVL83>

0040a88c <.LVL161>:
  40a88c:	eb0a 0308 	add.w	r3, sl, r8

0040a890 <.LVL162>:
  40a890:	68ba      	ldr	r2, [r7, #8]
  40a892:	f043 0301 	orr.w	r3, r3, #1

0040a896 <.LVL163>:
  40a896:	6053      	str	r3, [r2, #4]
  40a898:	e6f5      	b.n	40a686 <.LVL94>

0040a89a <.LBE12>:
  40a89a:	207f      	movs	r0, #127	; 0x7f
  40a89c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40a8a0:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40a8a4:	e5a6      	b.n	40a3f4 <.LVL4>

0040a8a6 <.LBB13>:
  40a8a6:	f104 0108 	add.w	r1, r4, #8
  40a8aa:	4628      	mov	r0, r5
  40a8ac:	9201      	str	r2, [sp, #4]
  40a8ae:	f002 fe53 	bl	40d558 <_free_r>

0040a8b2 <.LVL166>:
  40a8b2:	9a01      	ldr	r2, [sp, #4]
  40a8b4:	6811      	ldr	r1, [r2, #0]
  40a8b6:	e6e6      	b.n	40a686 <.LVL94>

0040a8b8 <.LVL167>:
  40a8b8:	2301      	movs	r3, #1

0040a8ba <.LVL168>:
  40a8ba:	f04f 0800 	mov.w	r8, #0
  40a8be:	e6c1      	b.n	40a644 <.LVL91>

0040a8c0 <.LBE13>:
  40a8c0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40a8c4:	d805      	bhi.n	40a8d2 <.LBE13+0x12>
  40a8c6:	0bda      	lsrs	r2, r3, #15
  40a8c8:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40a8cc:	00c9      	lsls	r1, r1, #3
  40a8ce:	3277      	adds	r2, #119	; 0x77
  40a8d0:	e71c      	b.n	40a70c <.LVL103>
  40a8d2:	f240 5154 	movw	r1, #1364	; 0x554
  40a8d6:	428a      	cmp	r2, r1
  40a8d8:	d805      	bhi.n	40a8e6 <.LBE13+0x26>
  40a8da:	0c9a      	lsrs	r2, r3, #18
  40a8dc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40a8e0:	00c9      	lsls	r1, r1, #3
  40a8e2:	327c      	adds	r2, #124	; 0x7c
  40a8e4:	e712      	b.n	40a70c <.LVL103>
  40a8e6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40a8ea:	227e      	movs	r2, #126	; 0x7e
  40a8ec:	e70e      	b.n	40a70c <.LVL103>

0040a8ee <.LVL170>:
  40a8ee:	687b      	ldr	r3, [r7, #4]
  40a8f0:	e786      	b.n	40a800 <.LVL142>

0040a8f2 <.LVL171>:
  40a8f2:	08f0      	lsrs	r0, r6, #3
  40a8f4:	f106 0308 	add.w	r3, r6, #8
  40a8f8:	e608      	b.n	40a50c <.LVL49>
  40a8fa:	bf00      	nop
  40a8fc:	2040dc28 	.word	0x2040dc28

Disassembly of section .text.wc_AesSetKeyLocal%52:

0040a900 <wc_AesSetKeyLocal>:
    }

#else
    static int wc_AesSetKeyLocal(Aes* aes, const byte* userKey, word32 keylen,
                const byte* iv, int dir)
    {
  40a900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0040a904 <.LCFI4>:
  40a904:	4604      	mov	r4, r0
  40a906:	4615      	mov	r5, r2
  40a908:	4698      	mov	r8, r3

0040a90a <.LVL116>:

    #ifdef WOLFSSL_AESNI
        aes->use_aesni = 0;
    #endif /* WOLFSSL_AESNI */
    #ifdef WOLFSSL_AES_COUNTER
        aes->left = 0;
  40a90a:	2300      	movs	r3, #0

0040a90c <.LVL117>:
  40a90c:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
    #endif /* WOLFSSL_AES_COUNTER */

        aes->keylen = keylen;
  40a910:	f8c0 20f4 	str.w	r2, [r0, #244]	; 0xf4
        aes->rounds = (keylen/4) + 6;
  40a914:	0897      	lsrs	r7, r2, #2
  40a916:	1dbb      	adds	r3, r7, #6
  40a918:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0

        XMEMCPY(rk, userKey, keylen);
  40a91c:	f003 fe4a 	bl	40e5b4 <.LFE14>

0040a920 <.LBB144>:
    for (i = 0; i < count; i++)
  40a920:	b18f      	cbz	r7, 40a946 <.LBE144>
  40a922:	4621      	mov	r1, r4
  40a924:	f025 0003 	bic.w	r0, r5, #3
  40a928:	4420      	add	r0, r4

0040a92a <.LVL119>:
        out[i] = ByteReverseWord32(in[i]);
  40a92a:	680a      	ldr	r2, [r1, #0]

0040a92c <.LBB146>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40a92c:	0a13      	lsrs	r3, r2, #8
  40a92e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  40a932:	0212      	lsls	r2, r2, #8
  40a934:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
  40a938:	4313      	orrs	r3, r2

0040a93a <.LBB148>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40a93a:	ea4f 4333 	mov.w	r3, r3, ror #16

0040a93e <.LBE146>:
        out[i] = ByteReverseWord32(in[i]);
  40a93e:	f841 3b04 	str.w	r3, [r1], #4
    for (i = 0; i < count; i++)
  40a942:	4281      	cmp	r1, r0
  40a944:	d1f1      	bne.n	40a92a <.LVL119>

0040a946 <.LBE144>:
        XMEMCPY((word32*)aes->key_ce, userKey, keylen);
    #endif

#ifdef NEED_AES_TABLES

        switch (keylen) {
  40a946:	2d18      	cmp	r5, #24
  40a948:	d04b      	beq.n	40a9e2 <.LVL128>
  40a94a:	2d20      	cmp	r5, #32
  40a94c:	f000 808d 	beq.w	40aa6a <.LVL134>
  40a950:	2d10      	cmp	r5, #16
  40a952:	d003      	beq.n	40a95c <.LVL121>
            }
            break;
    #endif /* 256 */

        default:
            return BAD_FUNC_ARG;
  40a954:	f06f 00ac 	mvn.w	r0, #172	; 0xac
        (void)dir;
    #endif /* HAVE_AES_DECRYPT */
#endif /* NEED_AES_TABLES */

        return wc_AesSetIV(aes, iv);
    }
  40a958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040a95c <.LVL121>:
  40a95c:	f104 0210 	add.w	r2, r4, #16
  40a960:	4d7a      	ldr	r5, [pc, #488]	; (40ab4c <.LVL141+0x4>)

0040a962 <.LVL122>:
  40a962:	f104 0eb0 	add.w	lr, r4, #176	; 0xb0
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
  40a966:	487a      	ldr	r0, [pc, #488]	; (40ab50 <.LVL141+0x8>)

0040a968 <.LVL123>:
                temp  = rk[3];
  40a968:	f852 1c04 	ldr.w	r1, [r2, #-4]

0040a96c <.LVL124>:
                    rcon[i];
  40a96c:	f855 6b04 	ldr.w	r6, [r5], #4
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
  40a970:	b2cb      	uxtb	r3, r1
  40a972:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  40a976:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
  40a97a:	f852 7c10 	ldr.w	r7, [r2, #-16]
  40a97e:	4077      	eors	r7, r6
  40a980:	407b      	eors	r3, r7
  40a982:	0e0f      	lsrs	r7, r1, #24
  40a984:	f507 7780 	add.w	r7, r7, #256	; 0x100
  40a988:	f810 7027 	ldrb.w	r7, [r0, r7, lsl #2]
  40a98c:	407b      	eors	r3, r7
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
  40a98e:	f3c1 4707 	ubfx	r7, r1, #16, #8
  40a992:	f507 7700 	add.w	r7, r7, #512	; 0x200
  40a996:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
  40a99a:	f007 477f 	and.w	r7, r7, #4278190080	; 0xff000000
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
  40a99e:	407b      	eors	r3, r7
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
  40a9a0:	f3c1 2707 	ubfx	r7, r1, #8, #8
  40a9a4:	f507 7740 	add.w	r7, r7, #768	; 0x300
  40a9a8:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
  40a9ac:	f407 077f 	and.w	r7, r7, #16711680	; 0xff0000
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
  40a9b0:	407b      	eors	r3, r7
                rk[4] = rk[0] ^
  40a9b2:	6013      	str	r3, [r2, #0]
                rk[5] = rk[1] ^ rk[4];
  40a9b4:	f852 7c0c 	ldr.w	r7, [r2, #-12]
  40a9b8:	407b      	eors	r3, r7
  40a9ba:	6053      	str	r3, [r2, #4]
                rk[6] = rk[2] ^ rk[5];
  40a9bc:	f852 7c08 	ldr.w	r7, [r2, #-8]
  40a9c0:	407b      	eors	r3, r7
  40a9c2:	6093      	str	r3, [r2, #8]
                rk[7] = rk[3] ^ rk[6];
  40a9c4:	404b      	eors	r3, r1
  40a9c6:	60d3      	str	r3, [r2, #12]
  40a9c8:	3210      	adds	r2, #16

0040a9ca <.LVL125>:
                if (++i == 10)
  40a9ca:	4572      	cmp	r2, lr
  40a9cc:	d1cc      	bne.n	40a968 <.LVL123>

0040a9ce <.LVL126>:
        if (dir == AES_DECRYPTION) {
  40a9ce:	9b06      	ldr	r3, [sp, #24]
  40a9d0:	2b01      	cmp	r3, #1
  40a9d2:	f000 80c1 	beq.w	40ab58 <.LBB150>
        return wc_AesSetIV(aes, iv);
  40a9d6:	4641      	mov	r1, r8
  40a9d8:	4620      	mov	r0, r4
  40a9da:	f007 fc77 	bl	4122cc <.LFE178>

0040a9de <.LVL127>:
  40a9de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040a9e2 <.LVL128>:
  40a9e2:	f104 0218 	add.w	r2, r4, #24
  40a9e6:	4d5b      	ldr	r5, [pc, #364]	; (40ab54 <.LVL141+0xc>)

0040a9e8 <.LVL129>:
  40a9e8:	f104 0ed8 	add.w	lr, r4, #216	; 0xd8
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
  40a9ec:	4858      	ldr	r0, [pc, #352]	; (40ab50 <.LVL141+0x8>)

0040a9ee <.LVL130>:
                temp = rk[ 5];
  40a9ee:	f852 1c04 	ldr.w	r1, [r2, #-4]

0040a9f2 <.LVL131>:
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
  40a9f2:	f852 3c18 	ldr.w	r3, [r2, #-24]
  40a9f6:	f855 7f04 	ldr.w	r7, [r5, #4]!
  40a9fa:	407b      	eors	r3, r7
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
  40a9fc:	b2cf      	uxtb	r7, r1
  40a9fe:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
  40aa02:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
  40aa06:	407b      	eors	r3, r7
  40aa08:	0e0f      	lsrs	r7, r1, #24
  40aa0a:	f507 7780 	add.w	r7, r7, #256	; 0x100
  40aa0e:	f810 7027 	ldrb.w	r7, [r0, r7, lsl #2]
  40aa12:	407b      	eors	r3, r7
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
  40aa14:	f3c1 4707 	ubfx	r7, r1, #16, #8
  40aa18:	f507 7700 	add.w	r7, r7, #512	; 0x200
  40aa1c:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
  40aa20:	f007 477f 	and.w	r7, r7, #4278190080	; 0xff000000
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
  40aa24:	407b      	eors	r3, r7
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
  40aa26:	f3c1 2707 	ubfx	r7, r1, #8, #8
  40aa2a:	f507 7740 	add.w	r7, r7, #768	; 0x300
  40aa2e:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
  40aa32:	f407 077f 	and.w	r7, r7, #16711680	; 0xff0000
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
  40aa36:	407b      	eors	r3, r7
                rk[ 6] = rk[ 0] ^
  40aa38:	6013      	str	r3, [r2, #0]
                rk[ 7] = rk[ 1] ^ rk[ 6];
  40aa3a:	f852 7c14 	ldr.w	r7, [r2, #-20]
  40aa3e:	407b      	eors	r3, r7
  40aa40:	6053      	str	r3, [r2, #4]
                rk[ 8] = rk[ 2] ^ rk[ 7];
  40aa42:	f852 7c10 	ldr.w	r7, [r2, #-16]
  40aa46:	407b      	eors	r3, r7
  40aa48:	6093      	str	r3, [r2, #8]
                rk[ 9] = rk[ 3] ^ rk[ 8];
  40aa4a:	f852 7c0c 	ldr.w	r7, [r2, #-12]
  40aa4e:	407b      	eors	r3, r7
  40aa50:	60d3      	str	r3, [r2, #12]
  40aa52:	3218      	adds	r2, #24

0040aa54 <.LVL132>:
                if (++i == 8)
  40aa54:	4572      	cmp	r2, lr
  40aa56:	d0ba      	beq.n	40a9ce <.LVL126>
                rk[10] = rk[ 4] ^ rk[ 9];
  40aa58:	f852 6c20 	ldr.w	r6, [r2, #-32]
  40aa5c:	4073      	eors	r3, r6
  40aa5e:	f842 3c08 	str.w	r3, [r2, #-8]
                rk[11] = rk[ 5] ^ rk[10];
  40aa62:	404b      	eors	r3, r1
  40aa64:	f842 3c04 	str.w	r3, [r2, #-4]

0040aa68 <.LVL133>:
                temp = rk[ 5];
  40aa68:	e7c1      	b.n	40a9ee <.LVL130>

0040aa6a <.LVL134>:
  40aa6a:	f104 0220 	add.w	r2, r4, #32
  40aa6e:	4d39      	ldr	r5, [pc, #228]	; (40ab54 <.LVL141+0xc>)

0040aa70 <.LVL135>:
  40aa70:	f504 7e80 	add.w	lr, r4, #256	; 0x100
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
  40aa74:	4936      	ldr	r1, [pc, #216]	; (40ab50 <.LVL141+0x8>)

0040aa76 <.LVL136>:
                temp = rk[ 7];
  40aa76:	f852 0c04 	ldr.w	r0, [r2, #-4]

0040aa7a <.LVL137>:
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
  40aa7a:	b2c3      	uxtb	r3, r0
  40aa7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  40aa80:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
  40aa84:	f855 7f04 	ldr.w	r7, [r5, #4]!
  40aa88:	f852 6c20 	ldr.w	r6, [r2, #-32]
  40aa8c:	4077      	eors	r7, r6
  40aa8e:	407b      	eors	r3, r7
  40aa90:	0e07      	lsrs	r7, r0, #24
  40aa92:	f507 7780 	add.w	r7, r7, #256	; 0x100
  40aa96:	f811 7027 	ldrb.w	r7, [r1, r7, lsl #2]
  40aa9a:	407b      	eors	r3, r7
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
  40aa9c:	f3c0 4707 	ubfx	r7, r0, #16, #8
  40aaa0:	f507 7700 	add.w	r7, r7, #512	; 0x200
  40aaa4:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
  40aaa8:	f007 477f 	and.w	r7, r7, #4278190080	; 0xff000000
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
  40aaac:	407b      	eors	r3, r7
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
  40aaae:	f3c0 2707 	ubfx	r7, r0, #8, #8
  40aab2:	f507 7740 	add.w	r7, r7, #768	; 0x300
  40aab6:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
  40aaba:	f407 077f 	and.w	r7, r7, #16711680	; 0xff0000
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
  40aabe:	405f      	eors	r7, r3
                rk[ 8] = rk[ 0] ^
  40aac0:	6017      	str	r7, [r2, #0]
                rk[ 9] = rk[ 1] ^ rk[ 8];
  40aac2:	f852 3c1c 	ldr.w	r3, [r2, #-28]
  40aac6:	407b      	eors	r3, r7
  40aac8:	6053      	str	r3, [r2, #4]
                rk[10] = rk[ 2] ^ rk[ 9];
  40aaca:	f852 7c18 	ldr.w	r7, [r2, #-24]
  40aace:	407b      	eors	r3, r7
  40aad0:	6093      	str	r3, [r2, #8]
                rk[11] = rk[ 3] ^ rk[10];
  40aad2:	f852 7c14 	ldr.w	r7, [r2, #-20]
  40aad6:	407b      	eors	r3, r7
  40aad8:	60d3      	str	r3, [r2, #12]
  40aada:	3220      	adds	r2, #32

0040aadc <.LVL138>:
                if (++i == 7)
  40aadc:	4572      	cmp	r2, lr
  40aade:	f43f af76 	beq.w	40a9ce <.LVL126>

0040aae2 <.LVL139>:
                    (Te[3][GETBYTE(temp, 2)] & 0x00ff0000) ^
  40aae2:	f3c3 4707 	ubfx	r7, r3, #16, #8
  40aae6:	f507 7740 	add.w	r7, r7, #768	; 0x300
  40aaea:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
  40aaee:	f407 077f 	and.w	r7, r7, #16711680	; 0xff0000
                    (Te[0][GETBYTE(temp, 1)] & 0x0000ff00) ^
  40aaf2:	f3c3 2c07 	ubfx	ip, r3, #8, #8
  40aaf6:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
  40aafa:	f406 4c7f 	and.w	ip, r6, #65280	; 0xff00
  40aafe:	ea47 0c0c 	orr.w	ip, r7, ip
  40ab02:	f852 7c30 	ldr.w	r7, [r2, #-48]
  40ab06:	ea8c 0707 	eor.w	r7, ip, r7
                    (Te[2][GETBYTE(temp, 3)] & 0xff000000) ^
  40ab0a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
  40ab0e:	f50c 7c00 	add.w	ip, ip, #512	; 0x200
  40ab12:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
  40ab16:	f006 4c7f 	and.w	ip, r6, #4278190080	; 0xff000000
                    (Te[1][GETBYTE(temp, 0)] & 0x000000ff);
  40ab1a:	b2db      	uxtb	r3, r3

0040ab1c <.LVL140>:
  40ab1c:	f503 7380 	add.w	r3, r3, #256	; 0x100
  40ab20:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
                    (Te[0][GETBYTE(temp, 1)] & 0x0000ff00) ^
  40ab24:	ea4c 0303 	orr.w	r3, ip, r3
  40ab28:	405f      	eors	r7, r3
                rk[12] = rk[ 4] ^
  40ab2a:	f842 7c10 	str.w	r7, [r2, #-16]
                rk[13] = rk[ 5] ^ rk[12];
  40ab2e:	f852 3c2c 	ldr.w	r3, [r2, #-44]
  40ab32:	405f      	eors	r7, r3
  40ab34:	f842 7c0c 	str.w	r7, [r2, #-12]
                rk[14] = rk[ 6] ^ rk[13];
  40ab38:	f852 3c28 	ldr.w	r3, [r2, #-40]
  40ab3c:	407b      	eors	r3, r7
  40ab3e:	f842 3c08 	str.w	r3, [r2, #-8]
                rk[15] = rk[ 7] ^ rk[14];
  40ab42:	4058      	eors	r0, r3
  40ab44:	f842 0c04 	str.w	r0, [r2, #-4]

0040ab48 <.LVL141>:
                temp = rk[ 7];
  40ab48:	e795      	b.n	40aa76 <.LVL136>
  40ab4a:	bf00      	nop
  40ab4c:	0041280c 	.word	0x0041280c
  40ab50:	004051d8 	.word	0x004051d8
  40ab54:	00412808 	.word	0x00412808

0040ab58 <.LBB150>:
            for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
  40ab58:	f8d4 70f0 	ldr.w	r7, [r4, #240]	; 0xf0

0040ab5c <.LVL143>:
  40ab5c:	00bf      	lsls	r7, r7, #2

0040ab5e <.LVL144>:
  40ab5e:	d019      	beq.n	40ab94 <.LVL152>
  40ab60:	4622      	mov	r2, r4
  40ab62:	eb04 0387 	add.w	r3, r4, r7, lsl #2
  40ab66:	2100      	movs	r1, #0

0040ab68 <.LVL145>:
                temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
  40ab68:	6810      	ldr	r0, [r2, #0]

0040ab6a <.LVL146>:
  40ab6a:	681d      	ldr	r5, [r3, #0]
  40ab6c:	6015      	str	r5, [r2, #0]
  40ab6e:	6018      	str	r0, [r3, #0]
                temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
  40ab70:	6850      	ldr	r0, [r2, #4]
  40ab72:	685d      	ldr	r5, [r3, #4]
  40ab74:	6055      	str	r5, [r2, #4]
  40ab76:	6058      	str	r0, [r3, #4]
                temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
  40ab78:	6890      	ldr	r0, [r2, #8]
  40ab7a:	689d      	ldr	r5, [r3, #8]
  40ab7c:	6095      	str	r5, [r2, #8]
  40ab7e:	6098      	str	r0, [r3, #8]
                temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
  40ab80:	68d0      	ldr	r0, [r2, #12]
  40ab82:	68dd      	ldr	r5, [r3, #12]
  40ab84:	60d5      	str	r5, [r2, #12]
  40ab86:	60d8      	str	r0, [r3, #12]
            for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
  40ab88:	3104      	adds	r1, #4
  40ab8a:	3210      	adds	r2, #16
  40ab8c:	3b10      	subs	r3, #16
  40ab8e:	1a78      	subs	r0, r7, r1

0040ab90 <.LVL151>:
  40ab90:	4281      	cmp	r1, r0
  40ab92:	d3e9      	bcc.n	40ab68 <.LVL145>

0040ab94 <.LVL152>:
            for (i = 1; i < aes->rounds; i++) {
  40ab94:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
  40ab98:	2b01      	cmp	r3, #1
  40ab9a:	f67f af1c 	bls.w	40a9d6 <.LVL126+0x8>
  40ab9e:	4621      	mov	r1, r4
  40aba0:	2501      	movs	r5, #1
                    Td[0][Te[1][GETBYTE(rk[0], 3)] & 0xff] ^
  40aba2:	4a57      	ldr	r2, [pc, #348]	; (40ad00 <.LVL155+0xe>)
  40aba4:	4b57      	ldr	r3, [pc, #348]	; (40ad04 <.LVL155+0x12>)

0040aba6 <.LVL153>:
  40aba6:	6908      	ldr	r0, [r1, #16]
  40aba8:	0e07      	lsrs	r7, r0, #24
  40abaa:	f507 7780 	add.w	r7, r7, #256	; 0x100
  40abae:	f813 c027 	ldrb.w	ip, [r3, r7, lsl #2]
                    Td[3][Te[1][GETBYTE(rk[0], 0)] & 0xff];
  40abb2:	b2c7      	uxtb	r7, r0
  40abb4:	f507 7780 	add.w	r7, r7, #256	; 0x100
  40abb8:	f813 e027 	ldrb.w	lr, [r3, r7, lsl #2]
  40abbc:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
                    Td[2][Te[1][GETBYTE(rk[0], 1)] & 0xff] ^
  40abc0:	f852 702c 	ldr.w	r7, [r2, ip, lsl #2]
  40abc4:	f852 602e 	ldr.w	r6, [r2, lr, lsl #2]
  40abc8:	4077      	eors	r7, r6
                    Td[1][Te[1][GETBYTE(rk[0], 2)] & 0xff] ^
  40abca:	f3c0 4e07 	ubfx	lr, r0, #16, #8
  40abce:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
  40abd2:	f813 e02e 	ldrb.w	lr, [r3, lr, lsl #2]
  40abd6:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
                    Td[2][Te[1][GETBYTE(rk[0], 1)] & 0xff] ^
  40abda:	f852 602e 	ldr.w	r6, [r2, lr, lsl #2]
  40abde:	4077      	eors	r7, r6
  40abe0:	f3c0 2007 	ubfx	r0, r0, #8, #8
  40abe4:	f500 7080 	add.w	r0, r0, #256	; 0x100
  40abe8:	f813 0020 	ldrb.w	r0, [r3, r0, lsl #2]
  40abec:	f500 7000 	add.w	r0, r0, #512	; 0x200
  40abf0:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
  40abf4:	4078      	eors	r0, r7
                rk[0] =
  40abf6:	6108      	str	r0, [r1, #16]
                    Td[0][Te[1][GETBYTE(rk[1], 3)] & 0xff] ^
  40abf8:	6948      	ldr	r0, [r1, #20]
  40abfa:	0e07      	lsrs	r7, r0, #24
  40abfc:	f507 7780 	add.w	r7, r7, #256	; 0x100
  40ac00:	f813 c027 	ldrb.w	ip, [r3, r7, lsl #2]
                    Td[3][Te[1][GETBYTE(rk[1], 0)] & 0xff];
  40ac04:	b2c7      	uxtb	r7, r0
  40ac06:	f507 7780 	add.w	r7, r7, #256	; 0x100
  40ac0a:	f813 e027 	ldrb.w	lr, [r3, r7, lsl #2]
  40ac0e:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
                    Td[2][Te[1][GETBYTE(rk[1], 1)] & 0xff] ^
  40ac12:	f852 702c 	ldr.w	r7, [r2, ip, lsl #2]
  40ac16:	f852 602e 	ldr.w	r6, [r2, lr, lsl #2]
  40ac1a:	4077      	eors	r7, r6
                    Td[1][Te[1][GETBYTE(rk[1], 2)] & 0xff] ^
  40ac1c:	f3c0 4e07 	ubfx	lr, r0, #16, #8
  40ac20:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
  40ac24:	f813 e02e 	ldrb.w	lr, [r3, lr, lsl #2]
  40ac28:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
                    Td[2][Te[1][GETBYTE(rk[1], 1)] & 0xff] ^
  40ac2c:	f852 602e 	ldr.w	r6, [r2, lr, lsl #2]
  40ac30:	4077      	eors	r7, r6
  40ac32:	f3c0 2007 	ubfx	r0, r0, #8, #8
  40ac36:	f500 7080 	add.w	r0, r0, #256	; 0x100
  40ac3a:	f813 0020 	ldrb.w	r0, [r3, r0, lsl #2]
  40ac3e:	f500 7000 	add.w	r0, r0, #512	; 0x200
  40ac42:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
  40ac46:	4078      	eors	r0, r7
                rk[1] =
  40ac48:	6148      	str	r0, [r1, #20]
                    Td[0][Te[1][GETBYTE(rk[2], 3)] & 0xff] ^
  40ac4a:	6988      	ldr	r0, [r1, #24]
  40ac4c:	0e07      	lsrs	r7, r0, #24
  40ac4e:	f507 7780 	add.w	r7, r7, #256	; 0x100
  40ac52:	f813 c027 	ldrb.w	ip, [r3, r7, lsl #2]
                    Td[3][Te[1][GETBYTE(rk[2], 0)] & 0xff];
  40ac56:	b2c7      	uxtb	r7, r0
  40ac58:	f507 7780 	add.w	r7, r7, #256	; 0x100
  40ac5c:	f813 e027 	ldrb.w	lr, [r3, r7, lsl #2]
  40ac60:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
                    Td[2][Te[1][GETBYTE(rk[2], 1)] & 0xff] ^
  40ac64:	f852 702c 	ldr.w	r7, [r2, ip, lsl #2]
  40ac68:	f852 602e 	ldr.w	r6, [r2, lr, lsl #2]
  40ac6c:	4077      	eors	r7, r6
                    Td[1][Te[1][GETBYTE(rk[2], 2)] & 0xff] ^
  40ac6e:	f3c0 4e07 	ubfx	lr, r0, #16, #8
  40ac72:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
  40ac76:	f813 e02e 	ldrb.w	lr, [r3, lr, lsl #2]
  40ac7a:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
                    Td[2][Te[1][GETBYTE(rk[2], 1)] & 0xff] ^
  40ac7e:	f852 602e 	ldr.w	r6, [r2, lr, lsl #2]
  40ac82:	4077      	eors	r7, r6
  40ac84:	f3c0 2007 	ubfx	r0, r0, #8, #8
  40ac88:	f500 7080 	add.w	r0, r0, #256	; 0x100
  40ac8c:	f813 0020 	ldrb.w	r0, [r3, r0, lsl #2]
  40ac90:	f500 7000 	add.w	r0, r0, #512	; 0x200
  40ac94:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
  40ac98:	4078      	eors	r0, r7
                rk[2] =
  40ac9a:	6188      	str	r0, [r1, #24]
                    Td[0][Te[1][GETBYTE(rk[3], 3)] & 0xff] ^
  40ac9c:	69c8      	ldr	r0, [r1, #28]
  40ac9e:	0e07      	lsrs	r7, r0, #24
  40aca0:	f507 7780 	add.w	r7, r7, #256	; 0x100
  40aca4:	f813 c027 	ldrb.w	ip, [r3, r7, lsl #2]
                    Td[3][Te[1][GETBYTE(rk[3], 0)] & 0xff];
  40aca8:	b2c7      	uxtb	r7, r0
  40acaa:	f507 7780 	add.w	r7, r7, #256	; 0x100
  40acae:	f813 e027 	ldrb.w	lr, [r3, r7, lsl #2]
  40acb2:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
                    Td[2][Te[1][GETBYTE(rk[3], 1)] & 0xff] ^
  40acb6:	f852 702c 	ldr.w	r7, [r2, ip, lsl #2]
  40acba:	f852 602e 	ldr.w	r6, [r2, lr, lsl #2]
  40acbe:	4077      	eors	r7, r6
                    Td[1][Te[1][GETBYTE(rk[3], 2)] & 0xff] ^
  40acc0:	f3c0 4e07 	ubfx	lr, r0, #16, #8
  40acc4:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
  40acc8:	f813 e02e 	ldrb.w	lr, [r3, lr, lsl #2]
  40accc:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
                    Td[2][Te[1][GETBYTE(rk[3], 1)] & 0xff] ^
  40acd0:	f852 602e 	ldr.w	r6, [r2, lr, lsl #2]
  40acd4:	4077      	eors	r7, r6
  40acd6:	f3c0 2007 	ubfx	r0, r0, #8, #8
  40acda:	f500 7080 	add.w	r0, r0, #256	; 0x100
  40acde:	f813 0020 	ldrb.w	r0, [r3, r0, lsl #2]
  40ace2:	f500 7000 	add.w	r0, r0, #512	; 0x200
  40ace6:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
  40acea:	4078      	eors	r0, r7
                rk[3] =
  40acec:	61c8      	str	r0, [r1, #28]
            for (i = 1; i < aes->rounds; i++) {
  40acee:	3501      	adds	r5, #1
  40acf0:	3110      	adds	r1, #16

0040acf2 <.LVL155>:
  40acf2:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
  40acf6:	42a8      	cmp	r0, r5
  40acf8:	f63f af55 	bhi.w	40aba6 <.LVL153>
  40acfc:	e66b      	b.n	40a9d6 <.LVL126+0x8>
  40acfe:	bf00      	nop
  40ad00:	004041d8 	.word	0x004041d8
  40ad04:	004051d8 	.word	0x004051d8

Disassembly of section .text.wc_AesEncrypt%53:

0040ad08 <wc_AesEncrypt>:
{
  40ad08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

0040ad0c <.LCFI0>:
    word32 r = aes->rounds >> 1;
  40ad0c:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
  40ad10:	ea4f 0e53 	mov.w	lr, r3, lsr #1

0040ad14 <.LVL1>:
    if (r > 7 || r == 0) {
  40ad14:	f10e 33ff 	add.w	r3, lr, #4294967295
  40ad18:	2b06      	cmp	r3, #6
  40ad1a:	f200 81d6 	bhi.w	40b0ca <.LVL52>
  40ad1e:	4692      	mov	sl, r2
    XMEMCPY(&s0, inBlock,                  sizeof(s0));
  40ad20:	680e      	ldr	r6, [r1, #0]

0040ad22 <.LVL2>:
    XMEMCPY(&s1, inBlock + sizeof(s0),     sizeof(s1));
  40ad22:	684d      	ldr	r5, [r1, #4]

0040ad24 <.LVL3>:
    XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
  40ad24:	688c      	ldr	r4, [r1, #8]

0040ad26 <.LVL4>:
    XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
  40ad26:	68cb      	ldr	r3, [r1, #12]

0040ad28 <.LBB92>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40ad28:	0a31      	lsrs	r1, r6, #8

0040ad2a <.LVL6>:
  40ad2a:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
  40ad2e:	0231      	lsls	r1, r6, #8
  40ad30:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  40ad34:	4339      	orrs	r1, r7

0040ad36 <.LBE92>:
    s0 ^= rk[0];
  40ad36:	6806      	ldr	r6, [r0, #0]

0040ad38 <.LVL7>:
  40ad38:	ea86 4631 	eor.w	r6, r6, r1, ror #16

0040ad3c <.LBB94>:
  40ad3c:	0a29      	lsrs	r1, r5, #8
  40ad3e:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
  40ad42:	0229      	lsls	r1, r5, #8
  40ad44:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  40ad48:	4339      	orrs	r1, r7

0040ad4a <.LBE94>:
    s1 ^= rk[1];
  40ad4a:	6845      	ldr	r5, [r0, #4]

0040ad4c <.LVL9>:
  40ad4c:	ea85 4531 	eor.w	r5, r5, r1, ror #16

0040ad50 <.LBB96>:
  40ad50:	0a21      	lsrs	r1, r4, #8
  40ad52:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
  40ad56:	0221      	lsls	r1, r4, #8
  40ad58:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  40ad5c:	4339      	orrs	r1, r7

0040ad5e <.LBE96>:
    s2 ^= rk[2];
  40ad5e:	6884      	ldr	r4, [r0, #8]

0040ad60 <.LVL11>:
  40ad60:	ea84 4431 	eor.w	r4, r4, r1, ror #16

0040ad64 <.LBB98>:
  40ad64:	ea4f 2c03 	mov.w	ip, r3, lsl #8
  40ad68:	f00c 2cff 	and.w	ip, ip, #4278255360	; 0xff00ff00
  40ad6c:	0a1b      	lsrs	r3, r3, #8

0040ad6e <.LVL13>:
  40ad6e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  40ad72:	ea4c 0303 	orr.w	r3, ip, r3

0040ad76 <.LBE98>:
    s3 ^= rk[3];
  40ad76:	68c1      	ldr	r1, [r0, #12]
  40ad78:	ea81 4c33 	eor.w	ip, r1, r3, ror #16

0040ad7c <.LVL14>:
  40ad7c:	2104      	movs	r1, #4

0040ad7e <.LVL15>:
{
  40ad7e:	2320      	movs	r3, #32

0040ad80 <.LBB100>:
        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
  40ad80:	3b01      	subs	r3, #1

0040ad82 <.LVL17>:
  40ad82:	d1fd      	bne.n	40ad80 <.LBB100>

0040ad84 <.LVL18>:
    for (i = 0; i < 4; i++) {
  40ad84:	3901      	subs	r1, #1

0040ad86 <.LVL19>:
  40ad86:	d1fa      	bne.n	40ad7e <.LVL15>

0040ad88 <.LBE100>:
    const word32* rk = aes->key;
  40ad88:	4607      	mov	r7, r0
  40ad8a:	eb00 1e4e 	add.w	lr, r0, lr, lsl #5

0040ad8e <.LVL20>:
            Te[0][GETBYTE(s0, 3)]  ^
  40ad8e:	4bd0      	ldr	r3, [pc, #832]	; (40b0d0 <.LVL52+0x6>)

0040ad90 <.LVL21>:
  40ad90:	0e31      	lsrs	r1, r6, #24
            Te[3][GETBYTE(s3, 0)]  ^
  40ad92:	fa5f f08c 	uxtb.w	r0, ip
  40ad96:	f500 7040 	add.w	r0, r0, #768	; 0x300
        t0 =
  40ad9a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  40ad9e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  40ada2:	4048      	eors	r0, r1
  40ada4:	6939      	ldr	r1, [r7, #16]
  40ada6:	4041      	eors	r1, r0
            Te[1][GETBYTE(s1, 2)]  ^
  40ada8:	f3c5 4007 	ubfx	r0, r5, #16, #8
  40adac:	f500 7080 	add.w	r0, r0, #256	; 0x100
        t0 =
  40adb0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  40adb4:	4041      	eors	r1, r0
            Te[2][GETBYTE(s2, 1)]  ^
  40adb6:	f3c4 2007 	ubfx	r0, r4, #8, #8
  40adba:	f500 7000 	add.w	r0, r0, #512	; 0x200
        t0 =
  40adbe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  40adc2:	4041      	eors	r1, r0

0040adc4 <.LVL22>:
            Te[0][GETBYTE(s1, 3)]  ^
  40adc4:	0e28      	lsrs	r0, r5, #24
            Te[3][GETBYTE(s0, 0)]  ^
  40adc6:	fa5f f886 	uxtb.w	r8, r6
  40adca:	f508 7840 	add.w	r8, r8, #768	; 0x300
        t1 =
  40adce:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  40add2:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
  40add6:	ea80 0808 	eor.w	r8, r0, r8
  40adda:	6978      	ldr	r0, [r7, #20]
  40addc:	ea88 0000 	eor.w	r0, r8, r0
            Te[1][GETBYTE(s2, 2)]  ^
  40ade0:	f3c4 4807 	ubfx	r8, r4, #16, #8
  40ade4:	f508 7880 	add.w	r8, r8, #256	; 0x100
        t1 =
  40ade8:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
  40adec:	ea80 0008 	eor.w	r0, r0, r8
            Te[2][GETBYTE(s3, 1)]  ^
  40adf0:	f3cc 2807 	ubfx	r8, ip, #8, #8
  40adf4:	f508 7800 	add.w	r8, r8, #512	; 0x200
        t1 =
  40adf8:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
  40adfc:	ea80 0008 	eor.w	r0, r0, r8

0040ae00 <.LVL23>:
            Te[0][GETBYTE(s2, 3)] ^
  40ae00:	ea4f 6814 	mov.w	r8, r4, lsr #24
            Te[3][GETBYTE(s1, 0)]  ^
  40ae04:	fa5f f985 	uxtb.w	r9, r5
  40ae08:	f509 7940 	add.w	r9, r9, #768	; 0x300
        t2 =
  40ae0c:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
  40ae10:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
  40ae14:	ea88 0809 	eor.w	r8, r8, r9
  40ae18:	69ba      	ldr	r2, [r7, #24]
  40ae1a:	ea88 0802 	eor.w	r8, r8, r2
            Te[1][GETBYTE(s3, 2)]  ^
  40ae1e:	f3cc 4907 	ubfx	r9, ip, #16, #8
  40ae22:	f509 7980 	add.w	r9, r9, #256	; 0x100
        t2 =
  40ae26:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
  40ae2a:	ea88 0809 	eor.w	r8, r8, r9
            Te[2][GETBYTE(s0, 1)]  ^
  40ae2e:	f3c6 2907 	ubfx	r9, r6, #8, #8
  40ae32:	f509 7900 	add.w	r9, r9, #512	; 0x200
        t2 =
  40ae36:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
  40ae3a:	ea88 0809 	eor.w	r8, r8, r9

0040ae3e <.LVL24>:
            Te[0][GETBYTE(s3, 3)] ^
  40ae3e:	ea4f 6c1c 	mov.w	ip, ip, lsr #24

0040ae42 <.LVL25>:
            Te[3][GETBYTE(s2, 0)]  ^
  40ae42:	b2e4      	uxtb	r4, r4

0040ae44 <.LVL26>:
  40ae44:	f504 7940 	add.w	r9, r4, #768	; 0x300
        t3 =
  40ae48:	f853 402c 	ldr.w	r4, [r3, ip, lsl #2]
  40ae4c:	f853 c029 	ldr.w	ip, [r3, r9, lsl #2]
  40ae50:	ea84 0c0c 	eor.w	ip, r4, ip
  40ae54:	69fc      	ldr	r4, [r7, #28]
  40ae56:	ea8c 0c04 	eor.w	ip, ip, r4
            Te[1][GETBYTE(s0, 2)]  ^
  40ae5a:	f3c6 4607 	ubfx	r6, r6, #16, #8

0040ae5e <.LVL27>:
  40ae5e:	f506 7680 	add.w	r6, r6, #256	; 0x100
        t3 =
  40ae62:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
  40ae66:	ea8c 0c04 	eor.w	ip, ip, r4
            Te[2][GETBYTE(s1, 1)]  ^
  40ae6a:	f3c5 2507 	ubfx	r5, r5, #8, #8

0040ae6e <.LVL28>:
  40ae6e:	f505 7500 	add.w	r5, r5, #512	; 0x200
        t3 =
  40ae72:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
  40ae76:	ea8c 0c04 	eor.w	ip, ip, r4

0040ae7a <.LVL29>:
        rk += 8;
  40ae7a:	3720      	adds	r7, #32
        if (--r == 0) {
  40ae7c:	4577      	cmp	r7, lr
  40ae7e:	d070      	beq.n	40af62 <.LVL36>

0040ae80 <.LVL31>:
            Te[0][GETBYTE(t0, 3)] ^
  40ae80:	0e0d      	lsrs	r5, r1, #24
            Te[3][GETBYTE(t3, 0)] ^
  40ae82:	fa5f f48c 	uxtb.w	r4, ip
  40ae86:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40ae8a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
  40ae8e:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
  40ae92:	406e      	eors	r6, r5
  40ae94:	683d      	ldr	r5, [r7, #0]
  40ae96:	406e      	eors	r6, r5
            Te[1][GETBYTE(t1, 2)] ^
  40ae98:	f3c0 4407 	ubfx	r4, r0, #16, #8
  40ae9c:	f504 7480 	add.w	r4, r4, #256	; 0x100
            Te[3][GETBYTE(t3, 0)] ^
  40aea0:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
  40aea4:	406e      	eors	r6, r5
            Te[2][GETBYTE(t2, 1)] ^
  40aea6:	f3c8 2407 	ubfx	r4, r8, #8, #8
  40aeaa:	f504 7400 	add.w	r4, r4, #512	; 0x200
            Te[3][GETBYTE(t3, 0)] ^
  40aeae:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
  40aeb2:	4066      	eors	r6, r4
            Te[0][GETBYTE(t1, 3)] ^
  40aeb4:	0e05      	lsrs	r5, r0, #24
            Te[3][GETBYTE(t0, 0)] ^
  40aeb6:	b2cc      	uxtb	r4, r1
  40aeb8:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40aebc:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
  40aec0:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
  40aec4:	406c      	eors	r4, r5
  40aec6:	687d      	ldr	r5, [r7, #4]
  40aec8:	4065      	eors	r5, r4
            Te[1][GETBYTE(t2, 2)] ^
  40aeca:	f3c8 4407 	ubfx	r4, r8, #16, #8
  40aece:	f504 7480 	add.w	r4, r4, #256	; 0x100
            Te[3][GETBYTE(t0, 0)] ^
  40aed2:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
  40aed6:	4065      	eors	r5, r4
            Te[2][GETBYTE(t3, 1)] ^
  40aed8:	f3cc 2407 	ubfx	r4, ip, #8, #8
  40aedc:	f504 7400 	add.w	r4, r4, #512	; 0x200
            Te[3][GETBYTE(t0, 0)] ^
  40aee0:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
  40aee4:	4065      	eors	r5, r4
            Te[0][GETBYTE(t2, 3)] ^
  40aee6:	ea4f 6418 	mov.w	r4, r8, lsr #24
            Te[3][GETBYTE(t1, 0)] ^
  40aeea:	fa5f f980 	uxtb.w	r9, r0
  40aeee:	f509 7940 	add.w	r9, r9, #768	; 0x300
  40aef2:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
  40aef6:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
  40aefa:	ea84 0409 	eor.w	r4, r4, r9
  40aefe:	68ba      	ldr	r2, [r7, #8]
  40af00:	4054      	eors	r4, r2
            Te[1][GETBYTE(t3, 2)] ^
  40af02:	f3cc 4907 	ubfx	r9, ip, #16, #8
  40af06:	f509 7980 	add.w	r9, r9, #256	; 0x100
            Te[3][GETBYTE(t1, 0)] ^
  40af0a:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
  40af0e:	ea84 0409 	eor.w	r4, r4, r9
            Te[2][GETBYTE(t0, 1)] ^
  40af12:	f3c1 2907 	ubfx	r9, r1, #8, #8
  40af16:	f509 7900 	add.w	r9, r9, #512	; 0x200
            Te[3][GETBYTE(t1, 0)] ^
  40af1a:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
  40af1e:	ea84 0409 	eor.w	r4, r4, r9
            Te[0][GETBYTE(t3, 3)] ^
  40af22:	ea4f 6c1c 	mov.w	ip, ip, lsr #24

0040af26 <.LVL32>:
            Te[3][GETBYTE(t2, 0)] ^
  40af26:	fa5f f888 	uxtb.w	r8, r8

0040af2a <.LVL33>:
  40af2a:	f508 7840 	add.w	r8, r8, #768	; 0x300
  40af2e:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
  40af32:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
  40af36:	ea8c 0c08 	eor.w	ip, ip, r8
  40af3a:	68fa      	ldr	r2, [r7, #12]
  40af3c:	ea8c 0c02 	eor.w	ip, ip, r2
            Te[1][GETBYTE(t0, 2)] ^
  40af40:	f3c1 4107 	ubfx	r1, r1, #16, #8

0040af44 <.LVL34>:
  40af44:	f501 7180 	add.w	r1, r1, #256	; 0x100
            Te[3][GETBYTE(t2, 0)] ^
  40af48:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  40af4c:	ea8c 0c01 	eor.w	ip, ip, r1
            Te[2][GETBYTE(t1, 1)] ^
  40af50:	f3c0 2007 	ubfx	r0, r0, #8, #8

0040af54 <.LVL35>:
  40af54:	f500 7000 	add.w	r0, r0, #512	; 0x200
            Te[3][GETBYTE(t2, 0)] ^
  40af58:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
  40af5c:	ea8c 0c01 	eor.w	ip, ip, r1
        t0 =
  40af60:	e716      	b.n	40ad90 <.LVL21>

0040af62 <.LVL36>:
        (Te[1][GETBYTE(t3, 0)] & 0x000000ff) ^
  40af62:	4c5b      	ldr	r4, [pc, #364]	; (40b0d0 <.LVL52+0x6>)
  40af64:	fa5f f38c 	uxtb.w	r3, ip
  40af68:	f503 7380 	add.w	r3, r3, #256	; 0x100
  40af6c:	f814 5023 	ldrb.w	r5, [r4, r3, lsl #2]
  40af70:	f8de 3000 	ldr.w	r3, [lr]
  40af74:	405d      	eors	r5, r3
        (Te[0][GETBYTE(t2, 1)] & 0x0000ff00) ^
  40af76:	f3c8 2307 	ubfx	r3, r8, #8, #8
  40af7a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
  40af7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
        (Te[1][GETBYTE(t3, 0)] & 0x000000ff) ^
  40af82:	405d      	eors	r5, r3
        (Te[3][GETBYTE(t1, 2)] & 0x00ff0000) ^
  40af84:	f3c0 4307 	ubfx	r3, r0, #16, #8
  40af88:	f503 7340 	add.w	r3, r3, #768	; 0x300
  40af8c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
  40af90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
        (Te[2][GETBYTE(t0, 3)] & 0xff000000) ^
  40af94:	0e0e      	lsrs	r6, r1, #24
  40af96:	f506 7600 	add.w	r6, r6, #512	; 0x200
  40af9a:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
  40af9e:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
  40afa2:	4333      	orrs	r3, r6
        (Te[1][GETBYTE(t3, 0)] & 0x000000ff) ^
  40afa4:	405d      	eors	r5, r3

0040afa6 <.LVL37>:
        (Te[1][GETBYTE(t0, 0)] & 0x000000ff) ^
  40afa6:	b2cb      	uxtb	r3, r1
  40afa8:	f503 7380 	add.w	r3, r3, #256	; 0x100
  40afac:	f814 6023 	ldrb.w	r6, [r4, r3, lsl #2]
  40afb0:	f8de 3004 	ldr.w	r3, [lr, #4]
  40afb4:	405e      	eors	r6, r3
        (Te[0][GETBYTE(t3, 1)] & 0x0000ff00) ^
  40afb6:	f3cc 2307 	ubfx	r3, ip, #8, #8
  40afba:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
  40afbe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
        (Te[1][GETBYTE(t0, 0)] & 0x000000ff) ^
  40afc2:	405e      	eors	r6, r3
        (Te[3][GETBYTE(t2, 2)] & 0x00ff0000) ^
  40afc4:	f3c8 4307 	ubfx	r3, r8, #16, #8
  40afc8:	f503 7340 	add.w	r3, r3, #768	; 0x300
  40afcc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
  40afd0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
        (Te[2][GETBYTE(t1, 3)] & 0xff000000) ^
  40afd4:	0e07      	lsrs	r7, r0, #24

0040afd6 <.LVL38>:
  40afd6:	f507 7700 	add.w	r7, r7, #512	; 0x200
  40afda:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
  40afde:	f007 477f 	and.w	r7, r7, #4278190080	; 0xff000000
  40afe2:	433b      	orrs	r3, r7
        (Te[1][GETBYTE(t0, 0)] & 0x000000ff) ^
  40afe4:	405e      	eors	r6, r3

0040afe6 <.LVL39>:
        (Te[1][GETBYTE(t1, 0)] & 0x000000ff) ^
  40afe6:	b2c3      	uxtb	r3, r0
  40afe8:	f503 7380 	add.w	r3, r3, #256	; 0x100
  40afec:	f814 7023 	ldrb.w	r7, [r4, r3, lsl #2]
  40aff0:	f8de 3008 	ldr.w	r3, [lr, #8]
  40aff4:	405f      	eors	r7, r3
        (Te[0][GETBYTE(t0, 1)] & 0x0000ff00) ^
  40aff6:	f3c1 2307 	ubfx	r3, r1, #8, #8
  40affa:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
  40affe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
        (Te[1][GETBYTE(t1, 0)] & 0x000000ff) ^
  40b002:	405f      	eors	r7, r3
        (Te[3][GETBYTE(t3, 2)] & 0x00ff0000) ^
  40b004:	f3cc 4307 	ubfx	r3, ip, #16, #8
  40b008:	f503 7340 	add.w	r3, r3, #768	; 0x300
  40b00c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
  40b010:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
        (Te[2][GETBYTE(t2, 3)] & 0xff000000) ^
  40b014:	ea4f 6918 	mov.w	r9, r8, lsr #24
  40b018:	f509 7900 	add.w	r9, r9, #512	; 0x200
  40b01c:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
  40b020:	f009 497f 	and.w	r9, r9, #4278190080	; 0xff000000
  40b024:	ea43 0309 	orr.w	r3, r3, r9
        (Te[1][GETBYTE(t1, 0)] & 0x000000ff) ^
  40b028:	405f      	eors	r7, r3

0040b02a <.LVL40>:
        (Te[1][GETBYTE(t2, 0)] & 0x000000ff) ^
  40b02a:	fa5f f388 	uxtb.w	r3, r8
  40b02e:	f503 7380 	add.w	r3, r3, #256	; 0x100
  40b032:	f814 3023 	ldrb.w	r3, [r4, r3, lsl #2]
  40b036:	f8de e00c 	ldr.w	lr, [lr, #12]
  40b03a:	ea83 0e0e 	eor.w	lr, r3, lr
        (Te[0][GETBYTE(t1, 1)] & 0x0000ff00) ^
  40b03e:	f3c0 2007 	ubfx	r0, r0, #8, #8

0040b042 <.LVL41>:
  40b042:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
  40b046:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
        (Te[1][GETBYTE(t2, 0)] & 0x000000ff) ^
  40b04a:	ea8e 0003 	eor.w	r0, lr, r3
        (Te[3][GETBYTE(t0, 2)] & 0x00ff0000) ^
  40b04e:	f3c1 4307 	ubfx	r3, r1, #16, #8
  40b052:	f503 7340 	add.w	r3, r3, #768	; 0x300
  40b056:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]

0040b05a <.LVL42>:
  40b05a:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
        (Te[2][GETBYTE(t3, 3)] & 0xff000000) ^
  40b05e:	ea4f 631c 	mov.w	r3, ip, lsr #24
  40b062:	f503 7300 	add.w	r3, r3, #512	; 0x200
  40b066:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
  40b06a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
  40b06e:	430b      	orrs	r3, r1
        (Te[1][GETBYTE(t2, 0)] & 0x000000ff) ^
  40b070:	4043      	eors	r3, r0

0040b072 <.LBB102>:
  40b072:	0a29      	lsrs	r1, r5, #8
  40b074:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
  40b078:	0228      	lsls	r0, r5, #8
  40b07a:	f000 20ff 	and.w	r0, r0, #4278255360	; 0xff00ff00
  40b07e:	4301      	orrs	r1, r0

0040b080 <.LBB104>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40b080:	ea4f 4131 	mov.w	r1, r1, ror #16

0040b084 <.LBE102>:
    XMEMCPY(outBlock,                  &s0, sizeof(s0));
  40b084:	f8ca 1000 	str.w	r1, [sl]

0040b088 <.LBB106>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40b088:	0a31      	lsrs	r1, r6, #8

0040b08a <.LVL45>:
  40b08a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
  40b08e:	0230      	lsls	r0, r6, #8
  40b090:	f000 20ff 	and.w	r0, r0, #4278255360	; 0xff00ff00
  40b094:	4301      	orrs	r1, r0

0040b096 <.LBB108>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40b096:	ea4f 4131 	mov.w	r1, r1, ror #16

0040b09a <.LBE106>:
    XMEMCPY(outBlock + sizeof(s0),     &s1, sizeof(s1));
  40b09a:	f8ca 1004 	str.w	r1, [sl, #4]

0040b09e <.LBB110>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40b09e:	0a39      	lsrs	r1, r7, #8

0040b0a0 <.LVL47>:
  40b0a0:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
  40b0a4:	0238      	lsls	r0, r7, #8
  40b0a6:	f000 20ff 	and.w	r0, r0, #4278255360	; 0xff00ff00
  40b0aa:	4301      	orrs	r1, r0

0040b0ac <.LBB112>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40b0ac:	ea4f 4131 	mov.w	r1, r1, ror #16

0040b0b0 <.LBE110>:
    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
  40b0b0:	f8ca 1008 	str.w	r1, [sl, #8]

0040b0b4 <.LBB114>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40b0b4:	0a19      	lsrs	r1, r3, #8

0040b0b6 <.LVL49>:
  40b0b6:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
  40b0ba:	021b      	lsls	r3, r3, #8

0040b0bc <.LVL50>:
  40b0bc:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  40b0c0:	430b      	orrs	r3, r1

0040b0c2 <.LBB116>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40b0c2:	ea4f 4333 	mov.w	r3, r3, ror #16

0040b0c6 <.LBE114>:
    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
  40b0c6:	f8ca 300c 	str.w	r3, [sl, #12]

0040b0ca <.LVL52>:
  40b0ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b0ce:	bf00      	nop
  40b0d0:	004051d8 	.word	0x004051d8

Disassembly of section .text.wc_AesDecrypt%54:

0040b0d4 <wc_AesDecrypt>:
{
  40b0d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

0040b0d8 <.LCFI1>:
    word32 r = aes->rounds >> 1;
  40b0d8:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
  40b0dc:	ea4f 0e53 	mov.w	lr, r3, lsr #1

0040b0e0 <.LVL54>:
    if (r > 7 || r == 0) {
  40b0e0:	f10e 33ff 	add.w	r3, lr, #4294967295
  40b0e4:	2b06      	cmp	r3, #6
  40b0e6:	f200 81a5 	bhi.w	40b434 <.LVL107>
  40b0ea:	4692      	mov	sl, r2
    XMEMCPY(&s0, inBlock,                  sizeof(s0));
  40b0ec:	680e      	ldr	r6, [r1, #0]

0040b0ee <.LVL55>:
    XMEMCPY(&s1, inBlock + sizeof(s0),     sizeof(s1));
  40b0ee:	684d      	ldr	r5, [r1, #4]

0040b0f0 <.LVL56>:
    XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
  40b0f0:	688c      	ldr	r4, [r1, #8]

0040b0f2 <.LVL57>:
    XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
  40b0f2:	68cb      	ldr	r3, [r1, #12]

0040b0f4 <.LBB118>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40b0f4:	0a31      	lsrs	r1, r6, #8

0040b0f6 <.LVL59>:
  40b0f6:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
  40b0fa:	0231      	lsls	r1, r6, #8
  40b0fc:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  40b100:	4339      	orrs	r1, r7

0040b102 <.LBE118>:
    s0 ^= rk[0];
  40b102:	6806      	ldr	r6, [r0, #0]

0040b104 <.LVL60>:
  40b104:	ea86 4631 	eor.w	r6, r6, r1, ror #16

0040b108 <.LBB120>:
  40b108:	0a29      	lsrs	r1, r5, #8
  40b10a:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
  40b10e:	0229      	lsls	r1, r5, #8
  40b110:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  40b114:	4339      	orrs	r1, r7

0040b116 <.LBE120>:
    s1 ^= rk[1];
  40b116:	6845      	ldr	r5, [r0, #4]

0040b118 <.LVL62>:
  40b118:	ea85 4531 	eor.w	r5, r5, r1, ror #16

0040b11c <.LBB122>:
  40b11c:	0a21      	lsrs	r1, r4, #8
  40b11e:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
  40b122:	0221      	lsls	r1, r4, #8
  40b124:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  40b128:	ea4c 0101 	orr.w	r1, ip, r1

0040b12c <.LBE122>:
    s2 ^= rk[2];
  40b12c:	6884      	ldr	r4, [r0, #8]

0040b12e <.LVL64>:
  40b12e:	ea84 4c31 	eor.w	ip, r4, r1, ror #16

0040b132 <.LBB124>:
  40b132:	ea4f 2803 	mov.w	r8, r3, lsl #8
  40b136:	f008 28ff 	and.w	r8, r8, #4278255360	; 0xff00ff00
  40b13a:	0a1b      	lsrs	r3, r3, #8

0040b13c <.LVL66>:
  40b13c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  40b140:	ea48 0303 	orr.w	r3, r8, r3

0040b144 <.LBE124>:
    s3 ^= rk[3];
  40b144:	68c1      	ldr	r1, [r0, #12]
  40b146:	ea81 4833 	eor.w	r8, r1, r3, ror #16

0040b14a <.LVL67>:
  40b14a:	2104      	movs	r1, #4

0040b14c <.LVL68>:
{
  40b14c:	2320      	movs	r3, #32

0040b14e <.LBB126>:
        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
  40b14e:	3b01      	subs	r3, #1

0040b150 <.LVL70>:
  40b150:	d1fd      	bne.n	40b14e <.LBB126>

0040b152 <.LVL71>:
    for (i = 0; i < 4; i++) {
  40b152:	3901      	subs	r1, #1

0040b154 <.LVL72>:
  40b154:	d1fa      	bne.n	40b14c <.LVL68>

0040b156 <.LBE126>:
    const word32* rk = aes->key;
  40b156:	4607      	mov	r7, r0
  40b158:	eb00 1e4e 	add.w	lr, r0, lr, lsl #5

0040b15c <.LVL73>:
            Td[0][GETBYTE(s0, 3)] ^
  40b15c:	4bb6      	ldr	r3, [pc, #728]	; (40b438 <.LVL107+0x4>)

0040b15e <.LVL74>:
  40b15e:	0e30      	lsrs	r0, r6, #24
            Td[3][GETBYTE(s1, 0)] ^
  40b160:	b2e9      	uxtb	r1, r5
  40b162:	f501 7140 	add.w	r1, r1, #768	; 0x300
        t0 =
  40b166:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  40b16a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  40b16e:	404c      	eors	r4, r1
  40b170:	6939      	ldr	r1, [r7, #16]
  40b172:	404c      	eors	r4, r1
            Td[1][GETBYTE(s3, 2)] ^
  40b174:	f3c8 4107 	ubfx	r1, r8, #16, #8
  40b178:	f501 7180 	add.w	r1, r1, #256	; 0x100
        t0 =
  40b17c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  40b180:	404c      	eors	r4, r1
            Td[2][GETBYTE(s2, 1)] ^
  40b182:	f3cc 2107 	ubfx	r1, ip, #8, #8
  40b186:	f501 7100 	add.w	r1, r1, #512	; 0x200
        t0 =
  40b18a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  40b18e:	404c      	eors	r4, r1

0040b190 <.LVL75>:
            Td[0][GETBYTE(s1, 3)] ^
  40b190:	0e29      	lsrs	r1, r5, #24
            Td[3][GETBYTE(s2, 0)] ^
  40b192:	fa5f f08c 	uxtb.w	r0, ip
  40b196:	f500 7040 	add.w	r0, r0, #768	; 0x300
        t1 =
  40b19a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  40b19e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  40b1a2:	4048      	eors	r0, r1
  40b1a4:	6979      	ldr	r1, [r7, #20]
  40b1a6:	4041      	eors	r1, r0
            Td[1][GETBYTE(s0, 2)] ^
  40b1a8:	f3c6 4007 	ubfx	r0, r6, #16, #8
  40b1ac:	f500 7080 	add.w	r0, r0, #256	; 0x100
        t1 =
  40b1b0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  40b1b4:	4041      	eors	r1, r0
            Td[2][GETBYTE(s3, 1)] ^
  40b1b6:	f3c8 2007 	ubfx	r0, r8, #8, #8
  40b1ba:	f500 7000 	add.w	r0, r0, #512	; 0x200
        t1 =
  40b1be:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  40b1c2:	4041      	eors	r1, r0

0040b1c4 <.LVL76>:
            Td[0][GETBYTE(s2, 3)] ^
  40b1c4:	ea4f 601c 	mov.w	r0, ip, lsr #24
            Td[3][GETBYTE(s3, 0)] ^
  40b1c8:	fa5f f988 	uxtb.w	r9, r8
  40b1cc:	f509 7940 	add.w	r9, r9, #768	; 0x300
        t2 =
  40b1d0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  40b1d4:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
  40b1d8:	ea80 0909 	eor.w	r9, r0, r9
  40b1dc:	69b8      	ldr	r0, [r7, #24]
  40b1de:	ea89 0000 	eor.w	r0, r9, r0
            Td[1][GETBYTE(s1, 2)] ^
  40b1e2:	f3c5 4907 	ubfx	r9, r5, #16, #8
  40b1e6:	f509 7980 	add.w	r9, r9, #256	; 0x100
        t2 =
  40b1ea:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
  40b1ee:	ea80 0009 	eor.w	r0, r0, r9
            Td[2][GETBYTE(s0, 1)] ^
  40b1f2:	f3c6 2907 	ubfx	r9, r6, #8, #8
  40b1f6:	f509 7900 	add.w	r9, r9, #512	; 0x200
        t2 =
  40b1fa:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
  40b1fe:	ea80 0009 	eor.w	r0, r0, r9

0040b202 <.LVL77>:
            Td[0][GETBYTE(s3, 3)] ^
  40b202:	ea4f 6818 	mov.w	r8, r8, lsr #24

0040b206 <.LVL78>:
            Td[3][GETBYTE(s0, 0)] ^
  40b206:	b2f6      	uxtb	r6, r6

0040b208 <.LVL79>:
  40b208:	f506 7940 	add.w	r9, r6, #768	; 0x300
        t3 =
  40b20c:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
  40b210:	f853 8029 	ldr.w	r8, [r3, r9, lsl #2]
  40b214:	ea86 0808 	eor.w	r8, r6, r8
  40b218:	69fe      	ldr	r6, [r7, #28]
  40b21a:	ea88 0806 	eor.w	r8, r8, r6
            Td[1][GETBYTE(s2, 2)] ^
  40b21e:	f3cc 4c07 	ubfx	ip, ip, #16, #8

0040b222 <.LVL80>:
  40b222:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
        t3 =
  40b226:	f853 602c 	ldr.w	r6, [r3, ip, lsl #2]
  40b22a:	ea88 0806 	eor.w	r8, r8, r6
            Td[2][GETBYTE(s1, 1)] ^
  40b22e:	f3c5 2507 	ubfx	r5, r5, #8, #8

0040b232 <.LVL81>:
  40b232:	f505 7500 	add.w	r5, r5, #512	; 0x200
        t3 =
  40b236:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
  40b23a:	ea88 0806 	eor.w	r8, r8, r6

0040b23e <.LVL82>:
        rk += 8;
  40b23e:	3720      	adds	r7, #32
        if (--r == 0) {
  40b240:	4577      	cmp	r7, lr
  40b242:	d074      	beq.n	40b32e <.LVL89>

0040b244 <.LVL84>:
            Td[0][GETBYTE(t0, 3)] ^
  40b244:	0e26      	lsrs	r6, r4, #24
            Td[3][GETBYTE(t1, 0)] ^
  40b246:	b2cd      	uxtb	r5, r1
  40b248:	f505 7540 	add.w	r5, r5, #768	; 0x300
  40b24c:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
  40b250:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
  40b254:	406e      	eors	r6, r5
  40b256:	683d      	ldr	r5, [r7, #0]
  40b258:	406e      	eors	r6, r5
            Td[1][GETBYTE(t3, 2)] ^
  40b25a:	f3c8 4507 	ubfx	r5, r8, #16, #8
  40b25e:	f505 7580 	add.w	r5, r5, #256	; 0x100
            Td[3][GETBYTE(t1, 0)] ^
  40b262:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
  40b266:	406e      	eors	r6, r5
            Td[2][GETBYTE(t2, 1)] ^
  40b268:	f3c0 2507 	ubfx	r5, r0, #8, #8
  40b26c:	f505 7500 	add.w	r5, r5, #512	; 0x200
            Td[3][GETBYTE(t1, 0)] ^
  40b270:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
  40b274:	406e      	eors	r6, r5
            Td[0][GETBYTE(t1, 3)] ^
  40b276:	0e0d      	lsrs	r5, r1, #24
            Td[3][GETBYTE(t2, 0)] ^
  40b278:	fa5f fc80 	uxtb.w	ip, r0
  40b27c:	f50c 7c40 	add.w	ip, ip, #768	; 0x300
  40b280:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
  40b284:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
  40b288:	ea85 0c0c 	eor.w	ip, r5, ip
  40b28c:	687d      	ldr	r5, [r7, #4]
  40b28e:	ea8c 0505 	eor.w	r5, ip, r5
            Td[1][GETBYTE(t0, 2)] ^
  40b292:	f3c4 4c07 	ubfx	ip, r4, #16, #8
  40b296:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
            Td[3][GETBYTE(t2, 0)] ^
  40b29a:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
  40b29e:	ea85 050c 	eor.w	r5, r5, ip
            Td[2][GETBYTE(t3, 1)] ^
  40b2a2:	f3c8 2c07 	ubfx	ip, r8, #8, #8
  40b2a6:	f50c 7c00 	add.w	ip, ip, #512	; 0x200
            Td[3][GETBYTE(t2, 0)] ^
  40b2aa:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
  40b2ae:	ea85 050c 	eor.w	r5, r5, ip
            Td[0][GETBYTE(t2, 3)] ^
  40b2b2:	ea4f 6c10 	mov.w	ip, r0, lsr #24
            Td[3][GETBYTE(t3, 0)] ^
  40b2b6:	fa5f f988 	uxtb.w	r9, r8
  40b2ba:	f509 7940 	add.w	r9, r9, #768	; 0x300
  40b2be:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
  40b2c2:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
  40b2c6:	ea8c 0c09 	eor.w	ip, ip, r9
  40b2ca:	68ba      	ldr	r2, [r7, #8]
  40b2cc:	ea8c 0c02 	eor.w	ip, ip, r2
            Td[1][GETBYTE(t1, 2)] ^
  40b2d0:	f3c1 4907 	ubfx	r9, r1, #16, #8
  40b2d4:	f509 7980 	add.w	r9, r9, #256	; 0x100
            Td[3][GETBYTE(t3, 0)] ^
  40b2d8:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
  40b2dc:	ea8c 0c09 	eor.w	ip, ip, r9
            Td[2][GETBYTE(t0, 1)] ^
  40b2e0:	f3c4 2907 	ubfx	r9, r4, #8, #8
  40b2e4:	f509 7900 	add.w	r9, r9, #512	; 0x200
            Td[3][GETBYTE(t3, 0)] ^
  40b2e8:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
  40b2ec:	ea8c 0c09 	eor.w	ip, ip, r9
            Td[0][GETBYTE(t3, 3)] ^
  40b2f0:	ea4f 6818 	mov.w	r8, r8, lsr #24

0040b2f4 <.LVL85>:
            Td[3][GETBYTE(t0, 0)] ^
  40b2f4:	b2e4      	uxtb	r4, r4

0040b2f6 <.LVL86>:
  40b2f6:	f504 7940 	add.w	r9, r4, #768	; 0x300
  40b2fa:	f853 4028 	ldr.w	r4, [r3, r8, lsl #2]
  40b2fe:	f853 8029 	ldr.w	r8, [r3, r9, lsl #2]
  40b302:	ea84 0808 	eor.w	r8, r4, r8
  40b306:	68fc      	ldr	r4, [r7, #12]
  40b308:	ea88 0804 	eor.w	r8, r8, r4
            Td[1][GETBYTE(t2, 2)] ^
  40b30c:	f3c0 4007 	ubfx	r0, r0, #16, #8

0040b310 <.LVL87>:
  40b310:	f500 7080 	add.w	r0, r0, #256	; 0x100
            Td[3][GETBYTE(t0, 0)] ^
  40b314:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  40b318:	ea88 0804 	eor.w	r8, r8, r4
            Td[2][GETBYTE(t1, 1)] ^
  40b31c:	f3c1 2107 	ubfx	r1, r1, #8, #8

0040b320 <.LVL88>:
  40b320:	f501 7100 	add.w	r1, r1, #512	; 0x200
            Td[3][GETBYTE(t0, 0)] ^
  40b324:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
  40b328:	ea88 0804 	eor.w	r8, r8, r4
        t0 =
  40b32c:	e717      	b.n	40b15e <.LVL74>

0040b32e <.LVL89>:
        ((word32)Td4[GETBYTE(t1, 0)]) ^
  40b32e:	4b43      	ldr	r3, [pc, #268]	; (40b43c <.LVL107+0x8>)
  40b330:	b2cd      	uxtb	r5, r1
  40b332:	5d5e      	ldrb	r6, [r3, r5]
  40b334:	f8de 5000 	ldr.w	r5, [lr]
  40b338:	406e      	eors	r6, r5
        ((word32)Td4[GETBYTE(t0, 3)] << 24) ^
  40b33a:	0e25      	lsrs	r5, r4, #24
  40b33c:	5d5d      	ldrb	r5, [r3, r5]
        ((word32)Td4[GETBYTE(t1, 0)]) ^
  40b33e:	ea86 6605 	eor.w	r6, r6, r5, lsl #24
        ((word32)Td4[GETBYTE(t3, 2)] << 16) ^
  40b342:	f3c8 4507 	ubfx	r5, r8, #16, #8
  40b346:	5d5d      	ldrb	r5, [r3, r5]
        ((word32)Td4[GETBYTE(t1, 0)]) ^
  40b348:	ea86 4605 	eor.w	r6, r6, r5, lsl #16
        ((word32)Td4[GETBYTE(t2, 1)] <<  8) ^
  40b34c:	f3c0 2507 	ubfx	r5, r0, #8, #8
  40b350:	5d5d      	ldrb	r5, [r3, r5]
        ((word32)Td4[GETBYTE(t1, 0)]) ^
  40b352:	ea86 2605 	eor.w	r6, r6, r5, lsl #8

0040b356 <.LVL90>:
        ((word32)Td4[GETBYTE(t2, 0)]) ^
  40b356:	b2c5      	uxtb	r5, r0
  40b358:	5d5f      	ldrb	r7, [r3, r5]

0040b35a <.LVL91>:
  40b35a:	f8de 5004 	ldr.w	r5, [lr, #4]
  40b35e:	406f      	eors	r7, r5
        ((word32)Td4[GETBYTE(t1, 3)] << 24) ^
  40b360:	0e0d      	lsrs	r5, r1, #24
  40b362:	5d5d      	ldrb	r5, [r3, r5]
        ((word32)Td4[GETBYTE(t2, 0)]) ^
  40b364:	ea87 6705 	eor.w	r7, r7, r5, lsl #24
        ((word32)Td4[GETBYTE(t0, 2)] << 16) ^
  40b368:	f3c4 4507 	ubfx	r5, r4, #16, #8
  40b36c:	5d5d      	ldrb	r5, [r3, r5]
        ((word32)Td4[GETBYTE(t2, 0)]) ^
  40b36e:	ea87 4705 	eor.w	r7, r7, r5, lsl #16
        ((word32)Td4[GETBYTE(t3, 1)] <<  8) ^
  40b372:	f3c8 2507 	ubfx	r5, r8, #8, #8
  40b376:	5d5d      	ldrb	r5, [r3, r5]
        ((word32)Td4[GETBYTE(t2, 0)]) ^
  40b378:	ea87 2705 	eor.w	r7, r7, r5, lsl #8

0040b37c <.LVL92>:
        ((word32)Td4[GETBYTE(t3, 0)]) ^
  40b37c:	fa5f f588 	uxtb.w	r5, r8
  40b380:	f813 c005 	ldrb.w	ip, [r3, r5]
  40b384:	f8de 5008 	ldr.w	r5, [lr, #8]
  40b388:	ea8c 0505 	eor.w	r5, ip, r5
        ((word32)Td4[GETBYTE(t2, 3)] << 24) ^
  40b38c:	ea4f 6c10 	mov.w	ip, r0, lsr #24
  40b390:	f813 c00c 	ldrb.w	ip, [r3, ip]
        ((word32)Td4[GETBYTE(t3, 0)]) ^
  40b394:	ea85 650c 	eor.w	r5, r5, ip, lsl #24
        ((word32)Td4[GETBYTE(t1, 2)] << 16) ^
  40b398:	f3c1 4c07 	ubfx	ip, r1, #16, #8
  40b39c:	f813 c00c 	ldrb.w	ip, [r3, ip]
        ((word32)Td4[GETBYTE(t3, 0)]) ^
  40b3a0:	ea85 450c 	eor.w	r5, r5, ip, lsl #16
        ((word32)Td4[GETBYTE(t0, 1)] <<  8) ^
  40b3a4:	f3c4 2c07 	ubfx	ip, r4, #8, #8
  40b3a8:	f813 c00c 	ldrb.w	ip, [r3, ip]
        ((word32)Td4[GETBYTE(t3, 0)]) ^
  40b3ac:	ea85 250c 	eor.w	r5, r5, ip, lsl #8

0040b3b0 <.LVL93>:
        ((word32)Td4[GETBYTE(t0, 0)]) ^
  40b3b0:	b2e4      	uxtb	r4, r4

0040b3b2 <.LVL94>:
  40b3b2:	5d1c      	ldrb	r4, [r3, r4]
  40b3b4:	f8de e00c 	ldr.w	lr, [lr, #12]
  40b3b8:	ea84 040e 	eor.w	r4, r4, lr
        ((word32)Td4[GETBYTE(t3, 3)] << 24) ^
  40b3bc:	ea4f 6818 	mov.w	r8, r8, lsr #24

0040b3c0 <.LVL95>:
  40b3c0:	f813 e008 	ldrb.w	lr, [r3, r8]
        ((word32)Td4[GETBYTE(t0, 0)]) ^
  40b3c4:	ea84 640e 	eor.w	r4, r4, lr, lsl #24
        ((word32)Td4[GETBYTE(t2, 2)] << 16) ^
  40b3c8:	f3c0 4007 	ubfx	r0, r0, #16, #8

0040b3cc <.LVL96>:
  40b3cc:	5c18      	ldrb	r0, [r3, r0]
        ((word32)Td4[GETBYTE(t0, 0)]) ^
  40b3ce:	ea84 4000 	eor.w	r0, r4, r0, lsl #16
        ((word32)Td4[GETBYTE(t1, 1)] <<  8) ^
  40b3d2:	f3c1 2107 	ubfx	r1, r1, #8, #8

0040b3d6 <.LVL97>:
  40b3d6:	5c5b      	ldrb	r3, [r3, r1]
        ((word32)Td4[GETBYTE(t0, 0)]) ^
  40b3d8:	ea80 2303 	eor.w	r3, r0, r3, lsl #8

0040b3dc <.LBB128>:
  40b3dc:	0a31      	lsrs	r1, r6, #8
  40b3de:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
  40b3e2:	0230      	lsls	r0, r6, #8
  40b3e4:	f000 20ff 	and.w	r0, r0, #4278255360	; 0xff00ff00
  40b3e8:	4301      	orrs	r1, r0

0040b3ea <.LBB130>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40b3ea:	ea4f 4131 	mov.w	r1, r1, ror #16

0040b3ee <.LBE128>:
    XMEMCPY(outBlock,                  &s0, sizeof(s0));
  40b3ee:	f8ca 1000 	str.w	r1, [sl]

0040b3f2 <.LBB132>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40b3f2:	0a39      	lsrs	r1, r7, #8

0040b3f4 <.LVL100>:
  40b3f4:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
  40b3f8:	0238      	lsls	r0, r7, #8
  40b3fa:	f000 20ff 	and.w	r0, r0, #4278255360	; 0xff00ff00
  40b3fe:	4301      	orrs	r1, r0

0040b400 <.LBB134>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40b400:	ea4f 4131 	mov.w	r1, r1, ror #16

0040b404 <.LBE132>:
    XMEMCPY(outBlock + sizeof(s0),     &s1, sizeof(s1));
  40b404:	f8ca 1004 	str.w	r1, [sl, #4]

0040b408 <.LBB136>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40b408:	0a29      	lsrs	r1, r5, #8

0040b40a <.LVL102>:
  40b40a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
  40b40e:	0228      	lsls	r0, r5, #8
  40b410:	f000 20ff 	and.w	r0, r0, #4278255360	; 0xff00ff00
  40b414:	4301      	orrs	r1, r0

0040b416 <.LBB138>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40b416:	ea4f 4131 	mov.w	r1, r1, ror #16

0040b41a <.LBE136>:
    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
  40b41a:	f8ca 1008 	str.w	r1, [sl, #8]

0040b41e <.LBB140>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40b41e:	0a19      	lsrs	r1, r3, #8

0040b420 <.LVL104>:
  40b420:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
  40b424:	021b      	lsls	r3, r3, #8

0040b426 <.LVL105>:
  40b426:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  40b42a:	430b      	orrs	r3, r1

0040b42c <.LBB142>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40b42c:	ea4f 4333 	mov.w	r3, r3, ror #16

0040b430 <.LBE140>:
    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
  40b430:	f8ca 300c 	str.w	r3, [sl, #12]

0040b434 <.LVL107>:
  40b434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b438:	004041d8 	.word	0x004041d8
  40b43c:	0040f0f4 	.word	0x0040f0f4

Disassembly of section .text._realloc_r%55:

0040b440 <_realloc_r>:
  40b440:	2900      	cmp	r1, #0
  40b442:	f000 8095 	beq.w	40b570 <.LCFI6>
  40b446:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0040b44a <.LCFI0>:
  40b44a:	460d      	mov	r5, r1
  40b44c:	4616      	mov	r6, r2
  40b44e:	b083      	sub	sp, #12

0040b450 <.LCFI1>:
  40b450:	4680      	mov	r8, r0
  40b452:	f106 070b 	add.w	r7, r6, #11
  40b456:	f007 fdbb 	bl	412fd0 <__malloc_lock>

0040b45a <.LVL1>:
  40b45a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40b45e:	2f16      	cmp	r7, #22
  40b460:	f02e 0403 	bic.w	r4, lr, #3
  40b464:	f1a5 0908 	sub.w	r9, r5, #8

0040b468 <.LVL2>:
  40b468:	d83c      	bhi.n	40b4e4 <.LVL18>
  40b46a:	2210      	movs	r2, #16
  40b46c:	4617      	mov	r7, r2

0040b46e <.LVL3>:
  40b46e:	42be      	cmp	r6, r7
  40b470:	d83d      	bhi.n	40b4ee <.LVL19+0x6>
  40b472:	4294      	cmp	r4, r2
  40b474:	da43      	bge.n	40b4fe <.LCFI3>
  40b476:	4bc4      	ldr	r3, [pc, #784]	; (40b788 <.LVL142+0x2>)
  40b478:	6899      	ldr	r1, [r3, #8]
  40b47a:	eb09 0004 	add.w	r0, r9, r4

0040b47e <.LVL4>:
  40b47e:	4288      	cmp	r0, r1
  40b480:	f000 80b4 	beq.w	40b5ec <.LVL65>
  40b484:	6843      	ldr	r3, [r0, #4]
  40b486:	f023 0101 	bic.w	r1, r3, #1
  40b48a:	4401      	add	r1, r0
  40b48c:	6849      	ldr	r1, [r1, #4]
  40b48e:	07c9      	lsls	r1, r1, #31
  40b490:	d54c      	bpl.n	40b52c <.LCFI5>

0040b492 <.LVL5>:
  40b492:	f01e 0f01 	tst.w	lr, #1
  40b496:	f000 809b 	beq.w	40b5d0 <.LBE12>

0040b49a <.LVL6>:
  40b49a:	4631      	mov	r1, r6
  40b49c:	4640      	mov	r0, r8
  40b49e:	f7fe ff87 	bl	40a3b0 <.LFE14>

0040b4a2 <.LVL7>:
  40b4a2:	4606      	mov	r6, r0

0040b4a4 <.LVL8>:
  40b4a4:	2800      	cmp	r0, #0
  40b4a6:	d03a      	beq.n	40b51e <.LVL26>

0040b4a8 <.LVL9>:
  40b4a8:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40b4ac:	f023 0301 	bic.w	r3, r3, #1
  40b4b0:	444b      	add	r3, r9
  40b4b2:	f1a0 0208 	sub.w	r2, r0, #8

0040b4b6 <.LVL10>:
  40b4b6:	429a      	cmp	r2, r3
  40b4b8:	f000 8121 	beq.w	40b6fe <.LBE24>

0040b4bc <.LBB2>:
  40b4bc:	1f22      	subs	r2, r4, #4

0040b4be <.LVL11>:
  40b4be:	2a24      	cmp	r2, #36	; 0x24
  40b4c0:	f200 8107 	bhi.w	40b6d2 <.LBB21>

0040b4c4 <.LBB3>:
  40b4c4:	2a13      	cmp	r2, #19
  40b4c6:	f200 80db 	bhi.w	40b680 <.LBB18>
  40b4ca:	4603      	mov	r3, r0
  40b4cc:	462a      	mov	r2, r5

0040b4ce <.LVL13>:
  40b4ce:	6811      	ldr	r1, [r2, #0]
  40b4d0:	6019      	str	r1, [r3, #0]

0040b4d2 <.LVL14>:
  40b4d2:	6851      	ldr	r1, [r2, #4]
  40b4d4:	6059      	str	r1, [r3, #4]
  40b4d6:	6892      	ldr	r2, [r2, #8]

0040b4d8 <.LVL15>:
  40b4d8:	609a      	str	r2, [r3, #8]

0040b4da <.LBE2>:
  40b4da:	4629      	mov	r1, r5
  40b4dc:	4640      	mov	r0, r8
  40b4de:	f002 f83b 	bl	40d558 <_free_r>

0040b4e2 <.LVL17>:
  40b4e2:	e01c      	b.n	40b51e <.LVL26>

0040b4e4 <.LVL18>:
  40b4e4:	f027 0707 	bic.w	r7, r7, #7

0040b4e8 <.LVL19>:
  40b4e8:	2f00      	cmp	r7, #0
  40b4ea:	463a      	mov	r2, r7
  40b4ec:	dabf      	bge.n	40b46e <.LVL3>
  40b4ee:	2600      	movs	r6, #0

0040b4f0 <.LVL20>:
  40b4f0:	230c      	movs	r3, #12
  40b4f2:	4630      	mov	r0, r6
  40b4f4:	f8c8 3000 	str.w	r3, [r8]
  40b4f8:	b003      	add	sp, #12

0040b4fa <.LCFI2>:
  40b4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040b4fe <.LCFI3>:
  40b4fe:	462e      	mov	r6, r5

0040b500 <.L11>:
  40b500:	1be3      	subs	r3, r4, r7

0040b502 <.LVL23>:
  40b502:	2b0f      	cmp	r3, #15
  40b504:	d81e      	bhi.n	40b544 <.LVL35>
  40b506:	f8d9 3004 	ldr.w	r3, [r9, #4]

0040b50a <.LVL24>:
  40b50a:	f003 0301 	and.w	r3, r3, #1
  40b50e:	4323      	orrs	r3, r4
  40b510:	444c      	add	r4, r9

0040b512 <.LVL25>:
  40b512:	f8c9 3004 	str.w	r3, [r9, #4]
  40b516:	6863      	ldr	r3, [r4, #4]
  40b518:	f043 0301 	orr.w	r3, r3, #1
  40b51c:	6063      	str	r3, [r4, #4]

0040b51e <.LVL26>:
  40b51e:	4640      	mov	r0, r8
  40b520:	f007 fd58 	bl	412fd4 <__malloc_unlock>

0040b524 <.LVL27>:
  40b524:	4630      	mov	r0, r6
  40b526:	b003      	add	sp, #12

0040b528 <.LCFI4>:
  40b528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040b52c <.LCFI5>:
  40b52c:	f023 0303 	bic.w	r3, r3, #3

0040b530 <.LVL29>:
  40b530:	18e1      	adds	r1, r4, r3
  40b532:	4291      	cmp	r1, r2
  40b534:	db1f      	blt.n	40b576 <.LCFI7>
  40b536:	68c3      	ldr	r3, [r0, #12]

0040b538 <.LVL30>:
  40b538:	6882      	ldr	r2, [r0, #8]

0040b53a <.LVL31>:
  40b53a:	462e      	mov	r6, r5

0040b53c <.LVL32>:
  40b53c:	60d3      	str	r3, [r2, #12]
  40b53e:	460c      	mov	r4, r1

0040b540 <.LVL33>:
  40b540:	609a      	str	r2, [r3, #8]

0040b542 <.LVL34>:
  40b542:	e7dd      	b.n	40b500 <.L11>

0040b544 <.LVL35>:
  40b544:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40b548:	eb09 0107 	add.w	r1, r9, r7

0040b54c <.LVL36>:
  40b54c:	f002 0201 	and.w	r2, r2, #1
  40b550:	444c      	add	r4, r9

0040b552 <.LVL37>:
  40b552:	f043 0301 	orr.w	r3, r3, #1

0040b556 <.LVL38>:
  40b556:	4317      	orrs	r7, r2

0040b558 <.LVL39>:
  40b558:	f8c9 7004 	str.w	r7, [r9, #4]
  40b55c:	604b      	str	r3, [r1, #4]
  40b55e:	6863      	ldr	r3, [r4, #4]
  40b560:	f043 0301 	orr.w	r3, r3, #1
  40b564:	3108      	adds	r1, #8

0040b566 <.LVL40>:
  40b566:	6063      	str	r3, [r4, #4]
  40b568:	4640      	mov	r0, r8
  40b56a:	f001 fff5 	bl	40d558 <_free_r>

0040b56e <.LVL41>:
  40b56e:	e7d6      	b.n	40b51e <.LVL26>

0040b570 <.LCFI6>:
  40b570:	4611      	mov	r1, r2

0040b572 <.LVL43>:
  40b572:	f7fe bf1d 	b.w	40a3b0 <.LFE14>

0040b576 <.LCFI7>:
  40b576:	f01e 0f01 	tst.w	lr, #1
  40b57a:	d18e      	bne.n	40b49a <.LVL6>
  40b57c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40b580:	eba9 0a01 	sub.w	sl, r9, r1

0040b584 <.LVL45>:
  40b584:	f8da 1004 	ldr.w	r1, [sl, #4]
  40b588:	f021 0103 	bic.w	r1, r1, #3

0040b58c <.LVL46>:
  40b58c:	440b      	add	r3, r1

0040b58e <.LVL47>:
  40b58e:	4423      	add	r3, r4
  40b590:	4293      	cmp	r3, r2
  40b592:	db25      	blt.n	40b5e0 <.LVL63>
  40b594:	68c2      	ldr	r2, [r0, #12]

0040b596 <.LVL48>:
  40b596:	6881      	ldr	r1, [r0, #8]

0040b598 <.LVL49>:
  40b598:	4656      	mov	r6, sl

0040b59a <.LVL50>:
  40b59a:	60ca      	str	r2, [r1, #12]
  40b59c:	6091      	str	r1, [r2, #8]

0040b59e <.LVL51>:
  40b59e:	f8da 100c 	ldr.w	r1, [sl, #12]

0040b5a2 <.LVL52>:
  40b5a2:	f856 0f08 	ldr.w	r0, [r6, #8]!

0040b5a6 <.LBB7>:
  40b5a6:	1f22      	subs	r2, r4, #4
  40b5a8:	2a24      	cmp	r2, #36	; 0x24

0040b5aa <.LBE7>:
  40b5aa:	60c1      	str	r1, [r0, #12]
  40b5ac:	6088      	str	r0, [r1, #8]

0040b5ae <.LBB12>:
  40b5ae:	f200 8094 	bhi.w	40b6da <.LBB22>

0040b5b2 <.LBB8>:
  40b5b2:	2a13      	cmp	r2, #19
  40b5b4:	d96f      	bls.n	40b696 <.LBB19>

0040b5b6 <.LVL56>:
  40b5b6:	6829      	ldr	r1, [r5, #0]

0040b5b8 <.LVL57>:
  40b5b8:	f8ca 1008 	str.w	r1, [sl, #8]

0040b5bc <.LVL58>:
  40b5bc:	6869      	ldr	r1, [r5, #4]
  40b5be:	f8ca 100c 	str.w	r1, [sl, #12]
  40b5c2:	2a1b      	cmp	r2, #27
  40b5c4:	f200 80a2 	bhi.w	40b70c <.LBB10>
  40b5c8:	3508      	adds	r5, #8

0040b5ca <.LVL59>:
  40b5ca:	f10a 0210 	add.w	r2, sl, #16

0040b5ce <.LVL60>:
  40b5ce:	e063      	b.n	40b698 <.LVL92>

0040b5d0 <.LBE12>:
  40b5d0:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40b5d4:	eba9 0a03 	sub.w	sl, r9, r3

0040b5d8 <.LVL62>:
  40b5d8:	f8da 1004 	ldr.w	r1, [sl, #4]
  40b5dc:	f021 0103 	bic.w	r1, r1, #3

0040b5e0 <.LVL63>:
  40b5e0:	1863      	adds	r3, r4, r1
  40b5e2:	4293      	cmp	r3, r2
  40b5e4:	f6ff af59 	blt.w	40b49a <.LVL6>
  40b5e8:	4656      	mov	r6, sl

0040b5ea <.LVL64>:
  40b5ea:	e7d8      	b.n	40b59e <.LVL51>

0040b5ec <.LVL65>:
  40b5ec:	6841      	ldr	r1, [r0, #4]
  40b5ee:	f021 0b03 	bic.w	fp, r1, #3

0040b5f2 <.LVL66>:
  40b5f2:	44a3      	add	fp, r4

0040b5f4 <.LVL67>:
  40b5f4:	f107 0010 	add.w	r0, r7, #16

0040b5f8 <.LVL68>:
  40b5f8:	4583      	cmp	fp, r0
  40b5fa:	da56      	bge.n	40b6aa <.LBE20>

0040b5fc <.LVL69>:
  40b5fc:	f01e 0f01 	tst.w	lr, #1
  40b600:	f47f af4b 	bne.w	40b49a <.LVL6>
  40b604:	f855 1c08 	ldr.w	r1, [r5, #-8]

0040b608 <.LVL70>:
  40b608:	eba9 0a01 	sub.w	sl, r9, r1

0040b60c <.LVL71>:
  40b60c:	f8da 1004 	ldr.w	r1, [sl, #4]
  40b610:	f021 0103 	bic.w	r1, r1, #3

0040b614 <.LVL72>:
  40b614:	448b      	add	fp, r1
  40b616:	4558      	cmp	r0, fp
  40b618:	dce2      	bgt.n	40b5e0 <.LVL63>
  40b61a:	4656      	mov	r6, sl

0040b61c <.LVL73>:
  40b61c:	f8da 100c 	ldr.w	r1, [sl, #12]

0040b620 <.LVL74>:
  40b620:	f856 0f08 	ldr.w	r0, [r6, #8]!

0040b624 <.LBB13>:
  40b624:	1f22      	subs	r2, r4, #4
  40b626:	2a24      	cmp	r2, #36	; 0x24

0040b628 <.LBE13>:
  40b628:	60c1      	str	r1, [r0, #12]
  40b62a:	6088      	str	r0, [r1, #8]

0040b62c <.LBB17>:
  40b62c:	f200 808f 	bhi.w	40b74e <.LBE15>

0040b630 <.LBB14>:
  40b630:	2a13      	cmp	r2, #19
  40b632:	f240 808a 	bls.w	40b74a <.LBB15>

0040b636 <.LVL78>:
  40b636:	6829      	ldr	r1, [r5, #0]

0040b638 <.LVL79>:
  40b638:	f8ca 1008 	str.w	r1, [sl, #8]

0040b63c <.LVL80>:
  40b63c:	6869      	ldr	r1, [r5, #4]
  40b63e:	f8ca 100c 	str.w	r1, [sl, #12]
  40b642:	2a1b      	cmp	r2, #27
  40b644:	f200 808a 	bhi.w	40b75c <.LBB16>
  40b648:	3508      	adds	r5, #8

0040b64a <.LVL81>:
  40b64a:	f10a 0210 	add.w	r2, sl, #16

0040b64e <.LVL82>:
  40b64e:	6829      	ldr	r1, [r5, #0]
  40b650:	6011      	str	r1, [r2, #0]

0040b652 <.LVL83>:
  40b652:	6869      	ldr	r1, [r5, #4]
  40b654:	6051      	str	r1, [r2, #4]
  40b656:	68a9      	ldr	r1, [r5, #8]
  40b658:	6091      	str	r1, [r2, #8]

0040b65a <.LBE14>:
  40b65a:	eb0a 0107 	add.w	r1, sl, r7
  40b65e:	ebab 0207 	sub.w	r2, fp, r7
  40b662:	f042 0201 	orr.w	r2, r2, #1
  40b666:	6099      	str	r1, [r3, #8]
  40b668:	604a      	str	r2, [r1, #4]
  40b66a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40b66e:	f003 0301 	and.w	r3, r3, #1
  40b672:	431f      	orrs	r7, r3

0040b674 <.LVL85>:
  40b674:	4640      	mov	r0, r8
  40b676:	f8ca 7004 	str.w	r7, [sl, #4]
  40b67a:	f007 fcab 	bl	412fd4 <__malloc_unlock>

0040b67e <.LVL86>:
  40b67e:	e751      	b.n	40b524 <.LVL27>

0040b680 <.LBB18>:
  40b680:	682b      	ldr	r3, [r5, #0]
  40b682:	6003      	str	r3, [r0, #0]

0040b684 <.LVL88>:
  40b684:	686b      	ldr	r3, [r5, #4]
  40b686:	6043      	str	r3, [r0, #4]
  40b688:	2a1b      	cmp	r2, #27
  40b68a:	d82d      	bhi.n	40b6e8 <.LBB24>
  40b68c:	f100 0308 	add.w	r3, r0, #8

0040b690 <.LVL89>:
  40b690:	f105 0208 	add.w	r2, r5, #8

0040b694 <.LVL90>:
  40b694:	e71b      	b.n	40b4ce <.LVL13>

0040b696 <.LBB19>:
  40b696:	4632      	mov	r2, r6

0040b698 <.LVL92>:
  40b698:	6829      	ldr	r1, [r5, #0]
  40b69a:	6011      	str	r1, [r2, #0]

0040b69c <.LVL93>:
  40b69c:	6869      	ldr	r1, [r5, #4]
  40b69e:	6051      	str	r1, [r2, #4]
  40b6a0:	68a9      	ldr	r1, [r5, #8]
  40b6a2:	6091      	str	r1, [r2, #8]

0040b6a4 <.LBE19>:
  40b6a4:	461c      	mov	r4, r3

0040b6a6 <.LBB20>:
  40b6a6:	46d1      	mov	r9, sl

0040b6a8 <.LVL95>:
  40b6a8:	e72a      	b.n	40b500 <.L11>

0040b6aa <.LBE20>:
  40b6aa:	eb09 0107 	add.w	r1, r9, r7

0040b6ae <.LVL97>:
  40b6ae:	ebab 0b07 	sub.w	fp, fp, r7

0040b6b2 <.LVL98>:
  40b6b2:	f04b 0201 	orr.w	r2, fp, #1
  40b6b6:	6099      	str	r1, [r3, #8]
  40b6b8:	604a      	str	r2, [r1, #4]

0040b6ba <.LVL99>:
  40b6ba:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40b6be:	f003 0301 	and.w	r3, r3, #1
  40b6c2:	431f      	orrs	r7, r3

0040b6c4 <.LVL100>:
  40b6c4:	4640      	mov	r0, r8

0040b6c6 <.LVL101>:
  40b6c6:	f845 7c04 	str.w	r7, [r5, #-4]
  40b6ca:	f007 fc83 	bl	412fd4 <__malloc_unlock>

0040b6ce <.LVL102>:
  40b6ce:	462e      	mov	r6, r5

0040b6d0 <.LVL103>:
  40b6d0:	e728      	b.n	40b524 <.LVL27>

0040b6d2 <.LBB21>:
  40b6d2:	4629      	mov	r1, r5
  40b6d4:	f004 fa0c 	bl	40faf0 <.LBE12>

0040b6d8 <.LVL105>:
  40b6d8:	e6ff      	b.n	40b4da <.LBE2>

0040b6da <.LBB22>:
  40b6da:	4629      	mov	r1, r5

0040b6dc <.LVL107>:
  40b6dc:	4630      	mov	r0, r6

0040b6de <.LBE22>:
  40b6de:	461c      	mov	r4, r3

0040b6e0 <.LBB23>:
  40b6e0:	46d1      	mov	r9, sl

0040b6e2 <.LVL110>:
  40b6e2:	f004 fa05 	bl	40faf0 <.LBE12>

0040b6e6 <.LVL111>:
  40b6e6:	e70b      	b.n	40b500 <.L11>

0040b6e8 <.LBB24>:
  40b6e8:	68ab      	ldr	r3, [r5, #8]
  40b6ea:	6083      	str	r3, [r0, #8]

0040b6ec <.LVL113>:
  40b6ec:	68eb      	ldr	r3, [r5, #12]
  40b6ee:	60c3      	str	r3, [r0, #12]
  40b6f0:	2a24      	cmp	r2, #36	; 0x24
  40b6f2:	d017      	beq.n	40b724 <.LBB26>
  40b6f4:	f100 0310 	add.w	r3, r0, #16

0040b6f8 <.LVL114>:
  40b6f8:	f105 0210 	add.w	r2, r5, #16

0040b6fc <.LVL115>:
  40b6fc:	e6e7      	b.n	40b4ce <.LVL13>

0040b6fe <.LBE24>:
  40b6fe:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40b702:	f023 0303 	bic.w	r3, r3, #3
  40b706:	441c      	add	r4, r3

0040b708 <.LVL117>:
  40b708:	462e      	mov	r6, r5
  40b70a:	e6f9      	b.n	40b500 <.L11>

0040b70c <.LBB10>:
  40b70c:	68a9      	ldr	r1, [r5, #8]
  40b70e:	f8ca 1010 	str.w	r1, [sl, #16]

0040b712 <.LVL119>:
  40b712:	68e9      	ldr	r1, [r5, #12]
  40b714:	f8ca 1014 	str.w	r1, [sl, #20]
  40b718:	2a24      	cmp	r2, #36	; 0x24
  40b71a:	d00c      	beq.n	40b736 <.LBB11>
  40b71c:	3510      	adds	r5, #16

0040b71e <.LVL120>:
  40b71e:	f10a 0218 	add.w	r2, sl, #24

0040b722 <.LVL121>:
  40b722:	e7b9      	b.n	40b698 <.LVL92>

0040b724 <.LBB26>:
  40b724:	692b      	ldr	r3, [r5, #16]
  40b726:	6103      	str	r3, [r0, #16]
  40b728:	696b      	ldr	r3, [r5, #20]
  40b72a:	6143      	str	r3, [r0, #20]
  40b72c:	f105 0218 	add.w	r2, r5, #24

0040b730 <.LVL123>:
  40b730:	f100 0318 	add.w	r3, r0, #24

0040b734 <.LVL124>:
  40b734:	e6cb      	b.n	40b4ce <.LVL13>

0040b736 <.LBB11>:
  40b736:	692a      	ldr	r2, [r5, #16]

0040b738 <.LVL126>:
  40b738:	f8ca 2018 	str.w	r2, [sl, #24]
  40b73c:	696a      	ldr	r2, [r5, #20]
  40b73e:	f8ca 201c 	str.w	r2, [sl, #28]
  40b742:	3518      	adds	r5, #24

0040b744 <.LVL127>:
  40b744:	f10a 0220 	add.w	r2, sl, #32

0040b748 <.LVL128>:
  40b748:	e7a6      	b.n	40b698 <.LVL92>

0040b74a <.LBB15>:
  40b74a:	4632      	mov	r2, r6

0040b74c <.LVL130>:
  40b74c:	e77f      	b.n	40b64e <.LVL82>

0040b74e <.LBE15>:
  40b74e:	4629      	mov	r1, r5

0040b750 <.LVL132>:
  40b750:	4630      	mov	r0, r6

0040b752 <.LVL133>:
  40b752:	9301      	str	r3, [sp, #4]
  40b754:	f004 f9cc 	bl	40faf0 <.LBE12>

0040b758 <.LVL134>:
  40b758:	9b01      	ldr	r3, [sp, #4]
  40b75a:	e77e      	b.n	40b65a <.LBE14>

0040b75c <.LBB16>:
  40b75c:	68a9      	ldr	r1, [r5, #8]
  40b75e:	f8ca 1010 	str.w	r1, [sl, #16]

0040b762 <.LVL136>:
  40b762:	68e9      	ldr	r1, [r5, #12]
  40b764:	f8ca 1014 	str.w	r1, [sl, #20]
  40b768:	2a24      	cmp	r2, #36	; 0x24
  40b76a:	d003      	beq.n	40b774 <.LVL139>
  40b76c:	3510      	adds	r5, #16

0040b76e <.LVL137>:
  40b76e:	f10a 0218 	add.w	r2, sl, #24

0040b772 <.LVL138>:
  40b772:	e76c      	b.n	40b64e <.LVL82>

0040b774 <.LVL139>:
  40b774:	692a      	ldr	r2, [r5, #16]

0040b776 <.LVL140>:
  40b776:	f8ca 2018 	str.w	r2, [sl, #24]
  40b77a:	696a      	ldr	r2, [r5, #20]
  40b77c:	f8ca 201c 	str.w	r2, [sl, #28]
  40b780:	3518      	adds	r5, #24

0040b782 <.LVL141>:
  40b782:	f10a 0220 	add.w	r2, sl, #32

0040b786 <.LVL142>:
  40b786:	e762      	b.n	40b64e <.LVL82>
  40b788:	2040cc80 	.word	0x2040cc80

Disassembly of section .text.SYS_CMD_Tasks%56:

0040b78c <SYS_CMD_Tasks>:

  Remarks:
    None.
*/
bool SYS_CMD_Tasks(void)
{
  40b78c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

0040b790 <.LCFI32>:
    short i;
    SYS_CMD_DEVICE_NODE* pCmdIO;

    for (i=0; i<cmdIODevList.num; i++)
  40b790:	4ba8      	ldr	r3, [pc, #672]	; (40ba34 <.LVL259+0x4>)
  40b792:	681b      	ldr	r3, [r3, #0]
  40b794:	2b00      	cmp	r3, #0
  40b796:	f340 817e 	ble.w	40ba96 <.LVL264>
  40b79a:	2400      	movs	r4, #0
                        }
                    }
                    break;
                case SYS_CMD_STATE_PROCESS_FULL_READ:
                    {
                        if (readBuff[0]!='\0')
  40b79c:	4ea6      	ldr	r6, [pc, #664]	; (40ba38 <.LVL259+0x8>)
                            (*pCmdIO->pCmdApi->msg)(pCmdIO->cmdIoParam, " *** Command Processor buffer exceeded. Retry. ***" LINE_TERM);
  40b79e:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 40ba64 <.LVL259+0x34>
  40b7a2:	f509 7bb2 	add.w	fp, r9, #356	; 0x164
                            _cmdAppData.seqBuff[0] = readBuff[1];
  40b7a6:	4fa5      	ldr	r7, [pc, #660]	; (40ba3c <.LVL259+0xc>)

0040b7a8 <.LBB36>:

static void ProcessEscSequence(SYS_CMD_DEVICE_NODE* pCmdIO)
{
    cmdNode *pNext;

    if(!strcmp(_cmdAppData.seqBuff, _seqUpArrow))
  40b7a8:	f107 0a08 	add.w	sl, r7, #8
  40b7ac:	e00f      	b.n	40b7ce <.LVL228>

0040b7ae <.LBE36>:
            switch(pCmdIO->cmdState)
  40b7ae:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
  40b7b2:	2b02      	cmp	r3, #2
  40b7b4:	d04e      	beq.n	40b854 <.LVL232+0x24>
  40b7b6:	2b03      	cmp	r3, #3
  40b7b8:	f000 8156 	beq.w	40ba68 <.LVL259+0x38>
  40b7bc:	2b01      	cmp	r3, #1
  40b7be:	d02c      	beq.n	40b81a <.LVL230+0x38>
  40b7c0:	3401      	adds	r4, #1

0040b7c2 <.LVL226>:
  40b7c2:	b224      	sxth	r4, r4

0040b7c4 <.LVL227>:
    for (i=0; i<cmdIODevList.num; i++)
  40b7c4:	4b9b      	ldr	r3, [pc, #620]	; (40ba34 <.LVL259+0x4>)
  40b7c6:	681b      	ldr	r3, [r3, #0]
  40b7c8:	429c      	cmp	r4, r3
  40b7ca:	f280 8164 	bge.w	40ba96 <.LVL264>

0040b7ce <.LVL228>:
        pCmdIO = SYS_CMDIO_GET_HANDLE(i);
  40b7ce:	4620      	mov	r0, r4
  40b7d0:	f007 f896 	bl	412900 <SYS_CMDIO_GET_HANDLE>

0040b7d4 <.LVL229>:
        if(pCmdIO)
  40b7d4:	4605      	mov	r5, r0
  40b7d6:	2800      	cmp	r0, #0
  40b7d8:	d0f2      	beq.n	40b7c0 <.LBE36+0x12>
            if(!(*pCmdIO->pCmdApi->isRdy)(pCmdIO) &&
  40b7da:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
  40b7de:	68db      	ldr	r3, [r3, #12]
  40b7e0:	4798      	blx	r3

0040b7e2 <.LVL230>:
  40b7e2:	2800      	cmp	r0, #0
  40b7e4:	d1e3      	bne.n	40b7ae <.LBE36>
  40b7e6:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
  40b7ea:	2b02      	cmp	r3, #2
  40b7ec:	d1e8      	bne.n	40b7c0 <.LBE36+0x12>
            switch(pCmdIO->cmdState)
  40b7ee:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
  40b7f2:	2b02      	cmp	r3, #2
  40b7f4:	d02e      	beq.n	40b854 <.LVL232+0x24>
  40b7f6:	2b03      	cmp	r3, #3
  40b7f8:	f000 8136 	beq.w	40ba68 <.LVL259+0x38>
  40b7fc:	2b01      	cmp	r3, #1
  40b7fe:	d1df      	bne.n	40b7c0 <.LBE36+0x12>
                        readBuff[0] = '\0';
  40b800:	2300      	movs	r3, #0
  40b802:	7033      	strb	r3, [r6, #0]
                            readBuff[0] = (*pCmdIO->pCmdApi->getc)(pCmdIO->cmdIoParam); /* Read data from console. */
  40b804:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  40b808:	691b      	ldr	r3, [r3, #16]
  40b80a:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
  40b80e:	4798      	blx	r3
  40b810:	7030      	strb	r0, [r6, #0]
                            pCmdIO->cmdState = SYS_CMD_STATE_WAIT_FOR_READ_DONE;
  40b812:	2302      	movs	r3, #2
  40b814:	f885 309c 	strb.w	r3, [r5, #156]	; 0x9c
  40b818:	e7d2      	b.n	40b7c0 <.LBE36+0x12>
                        readBuff[0] = '\0';
  40b81a:	2300      	movs	r3, #0
  40b81c:	7033      	strb	r3, [r6, #0]
                        if ( pCmdIO->cmdIoType != SYS_CMD_TELNET_COMMAND_READ_CONSOLE_IO_PARAM)
  40b81e:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
  40b822:	2b02      	cmp	r3, #2
  40b824:	d0ee      	beq.n	40b804 <.LVL230+0x22>
                            _cmdAppData.bytesRead = (*pCmdIO->pCmdApi->readc)(pCmdIO); /* Read data from console. */
  40b826:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  40b82a:	695b      	ldr	r3, [r3, #20]
  40b82c:	4628      	mov	r0, r5
  40b82e:	4798      	blx	r3

0040b830 <.LVL232>:
  40b830:	6038      	str	r0, [r7, #0]
                            _cmdAppData.seqBuff[0] = '\0';
  40b832:	2300      	movs	r3, #0
  40b834:	723b      	strb	r3, [r7, #8]
                            if (pCmdIO->cmdIoParam == NULL || *(uint8_t*)pCmdIO->cmdIoParam == SYS_CMD_SINGLE_CHARACTER_READ_CONSOLE_IO_PARAM)
  40b836:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
  40b83a:	b10b      	cbz	r3, 40b840 <.LVL232+0x10>
  40b83c:	781b      	ldrb	r3, [r3, #0]
  40b83e:	b91b      	cbnz	r3, 40b848 <.LVL232+0x18>
                                pCmdIO->cmdState = SYS_CMD_STATE_WAIT_FOR_READ_DONE;
  40b840:	2302      	movs	r3, #2
  40b842:	f885 309c 	strb.w	r3, [r5, #156]	; 0x9c
  40b846:	e7bb      	b.n	40b7c0 <.LBE36+0x12>
                            else if (*(uint8_t*)pCmdIO->cmdIoParam == SYS_CMD_FULL_COMMAND_READ_CONSOLE_IO_PARAM)
  40b848:	2b01      	cmp	r3, #1
  40b84a:	d1b9      	bne.n	40b7c0 <.LBE36+0x12>
                                pCmdIO->cmdState = SYS_CMD_STATE_PROCESS_FULL_READ;
  40b84c:	2303      	movs	r3, #3
  40b84e:	f885 309c 	strb.w	r3, [r5, #156]	; 0x9c
  40b852:	e7b5      	b.n	40b7c0 <.LBE36+0x12>
                        if((readBuff[0] == '\r') || (readBuff[0] == '\n'))
  40b854:	7833      	ldrb	r3, [r6, #0]
  40b856:	2b0d      	cmp	r3, #13
  40b858:	d019      	beq.n	40b88e <.LVL232+0x5e>
  40b85a:	2b0a      	cmp	r3, #10
  40b85c:	d017      	beq.n	40b88e <.LVL232+0x5e>
                        else if(readBuff[0] == '\b')
  40b85e:	2b08      	cmp	r3, #8
  40b860:	d041      	beq.n	40b8e6 <.LVL238>
                        else if(readBuff[0] == 0x1b)
  40b862:	2b1b      	cmp	r3, #27
  40b864:	d057      	beq.n	40b916 <.LVL239+0xe>
                        else if(pCmdIO->cmdEnd-pCmdIO->cmdBuff<SYS_CMD_MAX_LENGTH)
  40b866:	f105 0808 	add.w	r8, r5, #8
  40b86a:	686a      	ldr	r2, [r5, #4]
  40b86c:	eba2 0208 	sub.w	r2, r2, r8
  40b870:	2a7f      	cmp	r2, #127	; 0x7f
  40b872:	f300 80c7 	bgt.w	40ba04 <.LVL257+0xc>
                            pCmdIO->cmdState = SYS_CMD_STATE_SETUP_READ;
  40b876:	2201      	movs	r2, #1
  40b878:	f885 209c 	strb.w	r2, [r5, #156]	; 0x9c
                            if (readBuff[0]!='\0')
  40b87c:	2b00      	cmp	r3, #0
  40b87e:	f040 80b4 	bne.w	40b9ea <.LBE41>
                            if(pCmdIO->cmdPnt > pCmdIO->cmdEnd)
  40b882:	682b      	ldr	r3, [r5, #0]
  40b884:	686a      	ldr	r2, [r5, #4]
  40b886:	4293      	cmp	r3, r2
  40b888:	d99a      	bls.n	40b7c0 <.LBE36+0x12>
                                pCmdIO->cmdEnd = pCmdIO->cmdPnt;
  40b88a:	606b      	str	r3, [r5, #4]
  40b88c:	e798      	b.n	40b7c0 <.LBE36+0x12>
                            pCmdIO->cmdState = SYS_CMD_STATE_SETUP_READ;
  40b88e:	2301      	movs	r3, #1
  40b890:	f885 309c 	strb.w	r3, [r5, #156]	; 0x9c
                            if(pCmdIO->cmdPnt ==  pCmdIO->cmdBuff)
  40b894:	f105 0408 	add.w	r4, r5, #8

0040b898 <.LVL233>:
  40b898:	682b      	ldr	r3, [r5, #0]
  40b89a:	42a3      	cmp	r3, r4
  40b89c:	d013      	beq.n	40b8c6 <.LVL235+0xa>
                            (*pCmdIO->pCmdApi->msg)(pCmdIO->cmdIoParam, LINE_TERM);
  40b89e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  40b8a2:	681b      	ldr	r3, [r3, #0]
  40b8a4:	4966      	ldr	r1, [pc, #408]	; (40ba40 <.LVL259+0x10>)
  40b8a6:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
  40b8aa:	4798      	blx	r3

0040b8ac <.LVL234>:
                            *pCmdIO->cmdPnt = 0;
  40b8ac:	682b      	ldr	r3, [r5, #0]
  40b8ae:	2200      	movs	r2, #0
  40b8b0:	701a      	strb	r2, [r3, #0]
                            pCmdIO->cmdPnt = pCmdIO->cmdEnd = pCmdIO->cmdBuff;
  40b8b2:	606c      	str	r4, [r5, #4]
  40b8b4:	602c      	str	r4, [r5, #0]
                            if(!ParseCmdBuffer(pCmdIO))
  40b8b6:	4628      	mov	r0, r5
  40b8b8:	f001 ff34 	bl	40d724 <.LFE1>

0040b8bc <.LVL235>:
  40b8bc:	b158      	cbz	r0, 40b8d6 <.LVL236+0x2>
                                pCmdIO->cmdState = SYS_CMD_STATE_DISABLE;
  40b8be:	2300      	movs	r3, #0
  40b8c0:	f885 309c 	strb.w	r3, [r5, #156]	; 0x9c
  40b8c4:	e0e7      	b.n	40ba96 <.LVL264>
                                (*pCmdIO->pCmdApi->msg)(pCmdIO->cmdIoParam, LINE_TERM _promptStr);
  40b8c6:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  40b8ca:	681b      	ldr	r3, [r3, #0]
  40b8cc:	495d      	ldr	r1, [pc, #372]	; (40ba44 <.LVL259+0x14>)
  40b8ce:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
  40b8d2:	4798      	blx	r3

0040b8d4 <.LVL236>:
                                return true;
  40b8d4:	e0df      	b.n	40ba96 <.LVL264>
                                (*pCmdIO->pCmdApi->msg)(pCmdIO->cmdIoParam, _promptStr);
  40b8d6:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  40b8da:	681b      	ldr	r3, [r3, #0]
  40b8dc:	495a      	ldr	r1, [pc, #360]	; (40ba48 <.LVL259+0x18>)
  40b8de:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
  40b8e2:	4798      	blx	r3

0040b8e4 <.LVL237>:
  40b8e4:	e0d7      	b.n	40ba96 <.LVL264>

0040b8e6 <.LVL238>:
                            pCmdIO->cmdState = SYS_CMD_STATE_SETUP_READ;
  40b8e6:	2301      	movs	r3, #1
  40b8e8:	f885 309c 	strb.w	r3, [r5, #156]	; 0x9c
                            if(pCmdIO->cmdPnt > pCmdIO->cmdBuff)
  40b8ec:	f105 0308 	add.w	r3, r5, #8
  40b8f0:	682a      	ldr	r2, [r5, #0]
  40b8f2:	429a      	cmp	r2, r3
  40b8f4:	f67f af64 	bls.w	40b7c0 <.LBE36+0x12>
                                (*pCmdIO->pCmdApi->msg)(pCmdIO->cmdIoParam, "\b \b");
  40b8f8:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  40b8fc:	681b      	ldr	r3, [r3, #0]
  40b8fe:	f109 011c 	add.w	r1, r9, #28
  40b902:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
  40b906:	4798      	blx	r3

0040b908 <.LVL239>:
                                pCmdIO->cmdPnt--; pCmdIO->cmdEnd--;
  40b908:	682b      	ldr	r3, [r5, #0]
  40b90a:	3b01      	subs	r3, #1
  40b90c:	602b      	str	r3, [r5, #0]
  40b90e:	686b      	ldr	r3, [r5, #4]
  40b910:	3b01      	subs	r3, #1
  40b912:	606b      	str	r3, [r5, #4]
  40b914:	e754      	b.n	40b7c0 <.LBE36+0x12>
                            _cmdAppData.seqBuff[0] = readBuff[1];
  40b916:	7873      	ldrb	r3, [r6, #1]
  40b918:	723b      	strb	r3, [r7, #8]
                            _cmdAppData.seqBuff[1] = readBuff[2];
  40b91a:	78b3      	ldrb	r3, [r6, #2]
  40b91c:	727b      	strb	r3, [r7, #9]

0040b91e <.LBB40>:
    if(!strcmp(_cmdAppData.seqBuff, _seqUpArrow))
  40b91e:	494b      	ldr	r1, [pc, #300]	; (40ba4c <.LVL259+0x1c>)
  40b920:	4650      	mov	r0, sl
  40b922:	f000 feb1 	bl	40c688 <strcmp>

0040b926 <.LVL241>:
  40b926:	b9a8      	cbnz	r0, 40b954 <.LVL246>
    { // up arrow
        if(_pCurrCmdN)
  40b928:	4b49      	ldr	r3, [pc, #292]	; (40ba50 <.LVL259+0x20>)
  40b92a:	681b      	ldr	r3, [r3, #0]
  40b92c:	b17b      	cbz	r3, 40b94e <.LBB41>
        {
            pNext = _pCurrCmdN->next;
  40b92e:	6819      	ldr	r1, [r3, #0]

0040b930 <.LVL242>:
            if(pNext == _cmdList.head)
  40b930:	4b48      	ldr	r3, [pc, #288]	; (40ba54 <.LVL259+0x24>)
  40b932:	681b      	ldr	r3, [r3, #0]
  40b934:	4299      	cmp	r1, r3
  40b936:	d002      	beq.n	40b93e <.LBE40>
        else
        {
            pNext = _cmdList.head;
        }

        DisplayNodeMsg(pCmdIO, pNext);
  40b938:	4628      	mov	r0, r5
  40b93a:	f005 f85d 	bl	4109f8 <.LFE0>

0040b93e <.LBE40>:
                            readBuff[0] = '\0';
  40b93e:	2300      	movs	r3, #0
  40b940:	7033      	strb	r3, [r6, #0]
                            readBuff[1] = '\0';
  40b942:	7073      	strb	r3, [r6, #1]
                            readBuff[2] = '\0';
  40b944:	70b3      	strb	r3, [r6, #2]
                            pCmdIO->cmdState = SYS_CMD_STATE_SETUP_READ;
  40b946:	2301      	movs	r3, #1
  40b948:	f885 309c 	strb.w	r3, [r5, #156]	; 0x9c
  40b94c:	e738      	b.n	40b7c0 <.LBE36+0x12>

0040b94e <.LBB41>:
            pNext = _cmdList.head;
  40b94e:	4b41      	ldr	r3, [pc, #260]	; (40ba54 <.LVL259+0x24>)
  40b950:	6819      	ldr	r1, [r3, #0]

0040b952 <.LVL245>:
  40b952:	e7f1      	b.n	40b938 <.LVL242+0x8>

0040b954 <.LVL246>:
    }
    else if(!strcmp(_cmdAppData.seqBuff, _seqDownArrow))
  40b954:	4940      	ldr	r1, [pc, #256]	; (40ba58 <.LVL259+0x28>)
  40b956:	4650      	mov	r0, sl
  40b958:	f000 fe96 	bl	40c688 <strcmp>

0040b95c <.LVL247>:
  40b95c:	b960      	cbnz	r0, 40b978 <.LVL249+0x2>
    { // down arrow
        if(_pCurrCmdN)
  40b95e:	4b3c      	ldr	r3, [pc, #240]	; (40ba50 <.LVL259+0x20>)
  40b960:	681b      	ldr	r3, [r3, #0]
  40b962:	2b00      	cmp	r3, #0
  40b964:	d0eb      	beq.n	40b93e <.LBE40>
        {
            pNext = _pCurrCmdN->prev;
  40b966:	6859      	ldr	r1, [r3, #4]

0040b968 <.LVL248>:
            if(pNext != _cmdList.tail)
  40b968:	4b3a      	ldr	r3, [pc, #232]	; (40ba54 <.LVL259+0x24>)
  40b96a:	685b      	ldr	r3, [r3, #4]
  40b96c:	4299      	cmp	r1, r3
  40b96e:	d0e6      	beq.n	40b93e <.LBE40>
            {
                DisplayNodeMsg(pCmdIO, pNext);
  40b970:	4628      	mov	r0, r5
  40b972:	f005 f841 	bl	4109f8 <.LFE0>

0040b976 <.LVL249>:
  40b976:	e7e2      	b.n	40b93e <.LBE40>
            }
        }
    }
    else if(!strcmp(_cmdAppData.seqBuff, _seqRightArrow))
  40b978:	4938      	ldr	r1, [pc, #224]	; (40ba5c <.LVL259+0x2c>)
  40b97a:	4650      	mov	r0, sl
  40b97c:	f000 fe84 	bl	40c688 <strcmp>

0040b980 <.LVL250>:
  40b980:	b970      	cbnz	r0, 40b9a0 <.LVL251+0x8>
    { // right arrow
        if(pCmdIO->cmdPnt < pCmdIO->cmdEnd)
  40b982:	682a      	ldr	r2, [r5, #0]
  40b984:	686b      	ldr	r3, [r5, #4]
  40b986:	429a      	cmp	r2, r3
  40b988:	d2d9      	bcs.n	40b93e <.LBE40>
        {
            (*pCmdIO->pCmdApi->msg)(pCmdIO->cmdIoParam, _seqRightArrow);
  40b98a:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  40b98e:	681b      	ldr	r3, [r3, #0]
  40b990:	4932      	ldr	r1, [pc, #200]	; (40ba5c <.LVL259+0x2c>)
  40b992:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
  40b996:	4798      	blx	r3

0040b998 <.LVL251>:
            pCmdIO->cmdPnt++;
  40b998:	682b      	ldr	r3, [r5, #0]
  40b99a:	3301      	adds	r3, #1
  40b99c:	602b      	str	r3, [r5, #0]
  40b99e:	e7ce      	b.n	40b93e <.LBE40>
        }
    }
    else if(!strcmp(_cmdAppData.seqBuff, _seqLeftArrow))
  40b9a0:	492f      	ldr	r1, [pc, #188]	; (40ba60 <.LVL259+0x30>)
  40b9a2:	4650      	mov	r0, sl
  40b9a4:	f000 fe70 	bl	40c688 <strcmp>

0040b9a8 <.LVL252>:
  40b9a8:	b970      	cbnz	r0, 40b9c8 <.LVL253+0x2>
    { // left arrow
        if(pCmdIO->cmdPnt > pCmdIO->cmdBuff)
  40b9aa:	462a      	mov	r2, r5
  40b9ac:	f852 3b08 	ldr.w	r3, [r2], #8
  40b9b0:	4293      	cmp	r3, r2
  40b9b2:	d9c4      	bls.n	40b93e <.LBE40>
        {
            pCmdIO->cmdPnt--;
  40b9b4:	3b01      	subs	r3, #1
  40b9b6:	602b      	str	r3, [r5, #0]
            (*pCmdIO->pCmdApi->msg)(pCmdIO->cmdIoParam, _seqLeftArrow);
  40b9b8:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  40b9bc:	681b      	ldr	r3, [r3, #0]
  40b9be:	4928      	ldr	r1, [pc, #160]	; (40ba60 <.LVL259+0x30>)
  40b9c0:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
  40b9c4:	4798      	blx	r3

0040b9c6 <.LVL253>:
  40b9c6:	e7ba      	b.n	40b93e <.LBE40>
        }
    }
    else
    {
        (*pCmdIO->pCmdApi->msg)(pCmdIO->cmdIoParam, " *** Command Processor: unknown command. ***" LINE_TERM);
  40b9c8:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  40b9cc:	681b      	ldr	r3, [r3, #0]
  40b9ce:	f109 01f0 	add.w	r1, r9, #240	; 0xf0
  40b9d2:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
  40b9d6:	4798      	blx	r3

0040b9d8 <.LVL254>:
        (*pCmdIO->pCmdApi->msg)(pCmdIO->cmdIoParam, _promptStr);
  40b9d8:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  40b9dc:	681b      	ldr	r3, [r3, #0]
  40b9de:	f509 71b0 	add.w	r1, r9, #352	; 0x160
  40b9e2:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
  40b9e6:	4798      	blx	r3

0040b9e8 <.LVL255>:
  40b9e8:	e7a9      	b.n	40b93e <.LBE40>

0040b9ea <.LBE41>:
                                (*pCmdIO->pCmdApi->msg)(pCmdIO->cmdIoParam, readBuff);
  40b9ea:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  40b9ee:	681b      	ldr	r3, [r3, #0]
  40b9f0:	4631      	mov	r1, r6
  40b9f2:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
  40b9f6:	4798      	blx	r3

0040b9f8 <.LVL257>:
                                *pCmdIO->cmdPnt++ = readBuff[0];
  40b9f8:	682b      	ldr	r3, [r5, #0]
  40b9fa:	1c5a      	adds	r2, r3, #1
  40b9fc:	602a      	str	r2, [r5, #0]
  40b9fe:	7832      	ldrb	r2, [r6, #0]
  40ba00:	701a      	strb	r2, [r3, #0]
  40ba02:	e73e      	b.n	40b882 <.LVL232+0x52>
                            pCmdIO->cmdState = SYS_CMD_STATE_SETUP_READ;
  40ba04:	2301      	movs	r3, #1
  40ba06:	f885 309c 	strb.w	r3, [r5, #156]	; 0x9c
                            (*pCmdIO->pCmdApi->msg)(pCmdIO->cmdIoParam, " *** Command Processor buffer exceeded. Retry. ***" LINE_TERM);
  40ba0a:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  40ba0e:	681b      	ldr	r3, [r3, #0]
  40ba10:	4659      	mov	r1, fp
  40ba12:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
  40ba16:	4798      	blx	r3

0040ba18 <.LVL258>:
                            pCmdIO->cmdPnt = pCmdIO->cmdEnd = pCmdIO->cmdBuff;
  40ba18:	f8c5 8004 	str.w	r8, [r5, #4]
  40ba1c:	f8c5 8000 	str.w	r8, [r5]
                            (*pCmdIO->pCmdApi->msg)(pCmdIO->cmdIoParam, _promptStr);
  40ba20:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  40ba24:	681b      	ldr	r3, [r3, #0]
  40ba26:	f509 71b0 	add.w	r1, r9, #352	; 0x160
  40ba2a:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
  40ba2e:	4798      	blx	r3

0040ba30 <.LVL259>:
  40ba30:	e6c6      	b.n	40b7c0 <.LBE36+0x12>
  40ba32:	bf00      	nop
  40ba34:	2040dcf8 	.word	0x2040dcf8
  40ba38:	2040da88 	.word	0x2040da88
  40ba3c:	2040dc8c 	.word	0x2040dc8c
  40ba40:	0040d3d0 	.word	0x0040d3d0
  40ba44:	0040d364 	.word	0x0040d364
  40ba48:	0040d4a0 	.word	0x0040d4a0
  40ba4c:	00410a9c 	.word	0x00410a9c
  40ba50:	2040dd1c 	.word	0x2040dd1c
  40ba54:	2040dd0c 	.word	0x2040dd0c
  40ba58:	00411724 	.word	0x00411724
  40ba5c:	00410a98 	.word	0x00410a98
  40ba60:	004128d4 	.word	0x004128d4
  40ba64:	0040d340 	.word	0x0040d340
                        if (readBuff[0]!='\0')
  40ba68:	7833      	ldrb	r3, [r6, #0]
  40ba6a:	2b00      	cmp	r3, #0
  40ba6c:	f43f aea8 	beq.w	40b7c0 <.LBE36+0x12>
                            readBuff[strlen(readBuff)-1] = '\0';
  40ba70:	4c0a      	ldr	r4, [pc, #40]	; (40ba9c <.LVL264+0x6>)

0040ba72 <.LVL260>:
  40ba72:	4620      	mov	r0, r4
  40ba74:	f003 ff04 	bl	40f880 <.LFE22>

0040ba78 <.LVL261>:
  40ba78:	4420      	add	r0, r4
  40ba7a:	2300      	movs	r3, #0
  40ba7c:	f800 3c01 	strb.w	r3, [r0, #-1]
                            strcpy(pCmdIO->cmdBuff, readBuff);
  40ba80:	4621      	mov	r1, r4
  40ba82:	f105 0008 	add.w	r0, r5, #8
  40ba86:	f004 fa1b 	bl	40fec0 <.LFE166>

0040ba8a <.LVL262>:
                            ParseCmdBuffer(pCmdIO);
  40ba8a:	4628      	mov	r0, r5
  40ba8c:	f001 fe4a 	bl	40d724 <.LFE1>

0040ba90 <.LVL263>:
                            pCmdIO->cmdState = SYS_CMD_STATE_SETUP_READ;
  40ba90:	2301      	movs	r3, #1
  40ba92:	f885 309c 	strb.w	r3, [r5, #156]	; 0x9c

0040ba96 <.LVL264>:
}
  40ba96:	2001      	movs	r0, #1
  40ba98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ba9c:	2040da88 	.word	0x2040da88

Disassembly of section .text.Transform%57:

0040baa0 <Transform>:
    #ifndef XTRANSFORM
         #define XTRANSFORM(S, B) Transform((S))
     #endif

    static int Transform(Sha256* sha256)
    {
  40baa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0040baa4 <.LCFI0>:
  40baa4:	b0cb      	sub	sp, #300	; 0x12c

0040baa6 <.LCFI1>:
  40baa6:	f1a0 0a04 	sub.w	sl, r0, #4
  40baaa:	ab41      	add	r3, sp, #260	; 0x104
  40baac:	9300      	str	r3, [sp, #0]
  40baae:	f100 011c 	add.w	r1, r0, #28
  40bab2:	4652      	mov	r2, sl

0040bab4 <.LVL2>:
        word32 W[SHA256_BLOCK_SIZE];
    #endif

        /* Copy context->state[] to working vars */
        for (i = 0; i < 8; i++)
            S[i] = sha256->digest[i];
  40bab4:	f852 4f04 	ldr.w	r4, [r2, #4]!
  40bab8:	f843 4f04 	str.w	r4, [r3, #4]!
        for (i = 0; i < 8; i++)
  40babc:	428a      	cmp	r2, r1
  40babe:	d1f9      	bne.n	40bab4 <.LVL2>
  40bac0:	9201      	str	r2, [sp, #4]
  40bac2:	301c      	adds	r0, #28

0040bac4 <.LVL3>:
  40bac4:	ab01      	add	r3, sp, #4
  40bac6:	a911      	add	r1, sp, #68	; 0x44

0040bac8 <.LVL4>:

        for (i = 0; i < 16; i++)
            W[i] = sha256->buffer[i];
  40bac8:	f850 2f04 	ldr.w	r2, [r0, #4]!
  40bacc:	f843 2f04 	str.w	r2, [r3, #4]!
        for (i = 0; i < 16; i++)
  40bad0:	428b      	cmp	r3, r1
  40bad2:	d1f9      	bne.n	40bac8 <.LVL4>
  40bad4:	f10d 0908 	add.w	r9, sp, #8
  40bad8:	ac32      	add	r4, sp, #200	; 0xc8
  40bada:	4648      	mov	r0, r9
  40badc:	4605      	mov	r5, r0

        for (i = 16; i < SHA256_BLOCK_SIZE; i++)
            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
  40bade:	6b82      	ldr	r2, [r0, #56]	; 0x38
  40bae0:	f850 1f04 	ldr.w	r1, [r0, #4]!

0040bae4 <.LBB143>:
        return (x >> y) | (x << (sizeof(y) * 8 - y));
  40bae4:	ea4f 43f2 	mov.w	r3, r2, ror #19

0040bae8 <.LBE143>:
  40bae8:	ea83 4372 	eor.w	r3, r3, r2, ror #17
  40baec:	ea83 2392 	eor.w	r3, r3, r2, lsr #10
  40baf0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  40baf2:	682d      	ldr	r5, [r5, #0]
  40baf4:	442a      	add	r2, r5
  40baf6:	4413      	add	r3, r2

0040baf8 <.LBB145>:
  40baf8:	ea4f 42b1 	mov.w	r2, r1, ror #18

0040bafc <.LBE145>:
  40bafc:	ea82 12f1 	eor.w	r2, r2, r1, ror #7
  40bb00:	ea82 02d1 	eor.w	r2, r2, r1, lsr #3
  40bb04:	4413      	add	r3, r2
  40bb06:	63c3      	str	r3, [r0, #60]	; 0x3c
        for (i = 16; i < SHA256_BLOCK_SIZE; i++)
  40bb08:	42a0      	cmp	r0, r4
  40bb0a:	d1e7      	bne.n	40badc <.LVL4+0x14>
  40bb0c:	f8dd c124 	ldr.w	ip, [sp, #292]	; 0x124
  40bb10:	9a45      	ldr	r2, [sp, #276]	; 0x114
  40bb12:	f8dd e120 	ldr.w	lr, [sp, #288]	; 0x120
  40bb16:	9944      	ldr	r1, [sp, #272]	; 0x110
  40bb18:	9f47      	ldr	r7, [sp, #284]	; 0x11c
  40bb1a:	9d43      	ldr	r5, [sp, #268]	; 0x10c
  40bb1c:	9b46      	ldr	r3, [sp, #280]	; 0x118
  40bb1e:	9842      	ldr	r0, [sp, #264]	; 0x108
  40bb20:	f8df 8284 	ldr.w	r8, [pc, #644]	; 40bda8 <.LVL39+0x4>
  40bb24:	46d3      	mov	fp, sl
  40bb26:	46ca      	mov	sl, r9

0040bb28 <.LVL5>:
  40bb28:	46c1      	mov	r9, r8

0040bb2a <.LBB147>:
  40bb2a:	ea4f 24f3 	mov.w	r4, r3, ror #11

0040bb2e <.LBE147>:

        for (i = 0; i < SHA256_BLOCK_SIZE; i += 8) {
            RND(S[0],S[1],S[2],S[3],S[4],S[5],S[6],S[7],i+0);
  40bb2e:	ea84 14b3 	eor.w	r4, r4, r3, ror #6
  40bb32:	ea84 6873 	eor.w	r8, r4, r3, ror #25
  40bb36:	f8d9 4000 	ldr.w	r4, [r9]
  40bb3a:	f8da 6000 	ldr.w	r6, [sl]
  40bb3e:	4434      	add	r4, r6
  40bb40:	4444      	add	r4, r8
  40bb42:	ea8e 0607 	eor.w	r6, lr, r7
  40bb46:	401e      	ands	r6, r3
  40bb48:	ea86 060e 	eor.w	r6, r6, lr
  40bb4c:	4434      	add	r4, r6
  40bb4e:	44a4      	add	ip, r4

0040bb50 <.LVL6>:
  40bb50:	4462      	add	r2, ip

0040bb52 <.LBB149>:
  40bb52:	ea4f 3470 	mov.w	r4, r0, ror #13

0040bb56 <.LBE149>:
  40bb56:	ea84 04b0 	eor.w	r4, r4, r0, ror #2
  40bb5a:	ea84 54b0 	eor.w	r4, r4, r0, ror #22
  40bb5e:	ea40 0605 	orr.w	r6, r0, r5
  40bb62:	400e      	ands	r6, r1
  40bb64:	ea00 0805 	and.w	r8, r0, r5
  40bb68:	ea46 0608 	orr.w	r6, r6, r8
  40bb6c:	4434      	add	r4, r6

0040bb6e <.LVL7>:
  40bb6e:	44a4      	add	ip, r4

0040bb70 <.LVL8>:
            RND(S[7],S[0],S[1],S[2],S[3],S[4],S[5],S[6],i+1);
  40bb70:	f8d9 4004 	ldr.w	r4, [r9, #4]

0040bb74 <.LVL9>:
  40bb74:	f8da 6004 	ldr.w	r6, [sl, #4]
  40bb78:	4434      	add	r4, r6
  40bb7a:	4474      	add	r4, lr
  40bb7c:	ea83 0e07 	eor.w	lr, r3, r7
  40bb80:	ea0e 0e02 	and.w	lr, lr, r2
  40bb84:	ea8e 0e07 	eor.w	lr, lr, r7
  40bb88:	4474      	add	r4, lr

0040bb8a <.LBB151>:
  40bb8a:	ea4f 2ef2 	mov.w	lr, r2, ror #11

0040bb8e <.LBE151>:
  40bb8e:	ea8e 1eb2 	eor.w	lr, lr, r2, ror #6
  40bb92:	ea8e 6e72 	eor.w	lr, lr, r2, ror #25
  40bb96:	4474      	add	r4, lr

0040bb98 <.LVL10>:
  40bb98:	eb04 0e01 	add.w	lr, r4, r1

0040bb9c <.LBB153>:
  40bb9c:	ea4f 317c 	mov.w	r1, ip, ror #13

0040bba0 <.LBE153>:
  40bba0:	ea81 01bc 	eor.w	r1, r1, ip, ror #2
  40bba4:	ea81 51bc 	eor.w	r1, r1, ip, ror #22
  40bba8:	ea4c 0600 	orr.w	r6, ip, r0
  40bbac:	402e      	ands	r6, r5
  40bbae:	ea0c 0800 	and.w	r8, ip, r0
  40bbb2:	ea46 0608 	orr.w	r6, r6, r8
  40bbb6:	4431      	add	r1, r6

0040bbb8 <.LVL11>:
  40bbb8:	4421      	add	r1, r4

0040bbba <.LVL12>:
            RND(S[6],S[7],S[0],S[1],S[2],S[3],S[4],S[5],i+2);
  40bbba:	f8d9 4008 	ldr.w	r4, [r9, #8]

0040bbbe <.LVL13>:
  40bbbe:	f8da 6008 	ldr.w	r6, [sl, #8]
  40bbc2:	4434      	add	r4, r6
  40bbc4:	443c      	add	r4, r7
  40bbc6:	ea82 0703 	eor.w	r7, r2, r3
  40bbca:	ea07 070e 	and.w	r7, r7, lr
  40bbce:	405f      	eors	r7, r3
  40bbd0:	443c      	add	r4, r7

0040bbd2 <.LBB155>:
  40bbd2:	ea4f 27fe 	mov.w	r7, lr, ror #11

0040bbd6 <.LBE155>:
  40bbd6:	ea87 17be 	eor.w	r7, r7, lr, ror #6
  40bbda:	ea87 677e 	eor.w	r7, r7, lr, ror #25
  40bbde:	4427      	add	r7, r4

0040bbe0 <.LVL14>:
  40bbe0:	443d      	add	r5, r7

0040bbe2 <.LBB157>:
  40bbe2:	ea4f 3471 	mov.w	r4, r1, ror #13

0040bbe6 <.LBE157>:
  40bbe6:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
  40bbea:	ea84 54b1 	eor.w	r4, r4, r1, ror #22
  40bbee:	ea4c 0601 	orr.w	r6, ip, r1
  40bbf2:	4006      	ands	r6, r0
  40bbf4:	ea0c 0801 	and.w	r8, ip, r1
  40bbf8:	ea46 0608 	orr.w	r6, r6, r8
  40bbfc:	4434      	add	r4, r6

0040bbfe <.LVL15>:
  40bbfe:	443c      	add	r4, r7

0040bc00 <.LVL16>:
            RND(S[5],S[6],S[7],S[0],S[1],S[2],S[3],S[4],i+3);
  40bc00:	f8d9 600c 	ldr.w	r6, [r9, #12]
  40bc04:	f8da 700c 	ldr.w	r7, [sl, #12]

0040bc08 <.LVL17>:
  40bc08:	443e      	add	r6, r7
  40bc0a:	4433      	add	r3, r6
  40bc0c:	ea82 060e 	eor.w	r6, r2, lr
  40bc10:	402e      	ands	r6, r5
  40bc12:	4056      	eors	r6, r2
  40bc14:	4433      	add	r3, r6

0040bc16 <.LBB159>:
  40bc16:	ea4f 26f5 	mov.w	r6, r5, ror #11

0040bc1a <.LBE159>:
  40bc1a:	ea86 16b5 	eor.w	r6, r6, r5, ror #6
  40bc1e:	ea86 6675 	eor.w	r6, r6, r5, ror #25
  40bc22:	441e      	add	r6, r3

0040bc24 <.LVL18>:
  40bc24:	eb06 0800 	add.w	r8, r6, r0

0040bc28 <.LBB161>:
  40bc28:	ea4f 3374 	mov.w	r3, r4, ror #13

0040bc2c <.LBE161>:
  40bc2c:	ea83 03b4 	eor.w	r3, r3, r4, ror #2
  40bc30:	ea83 53b4 	eor.w	r3, r3, r4, ror #22
  40bc34:	ea41 0004 	orr.w	r0, r1, r4
  40bc38:	ea00 000c 	and.w	r0, r0, ip
  40bc3c:	ea01 0704 	and.w	r7, r1, r4
  40bc40:	4338      	orrs	r0, r7
  40bc42:	4403      	add	r3, r0

0040bc44 <.LVL19>:
  40bc44:	4433      	add	r3, r6

0040bc46 <.LVL20>:
            RND(S[4],S[5],S[6],S[7],S[0],S[1],S[2],S[3],i+4);
  40bc46:	f8d9 0010 	ldr.w	r0, [r9, #16]
  40bc4a:	f8da 6010 	ldr.w	r6, [sl, #16]

0040bc4e <.LVL21>:
  40bc4e:	4430      	add	r0, r6
  40bc50:	4402      	add	r2, r0
  40bc52:	ea8e 0005 	eor.w	r0, lr, r5
  40bc56:	ea00 0008 	and.w	r0, r0, r8
  40bc5a:	ea80 000e 	eor.w	r0, r0, lr
  40bc5e:	4402      	add	r2, r0

0040bc60 <.LBB163>:
  40bc60:	ea4f 20f8 	mov.w	r0, r8, ror #11

0040bc64 <.LBE163>:
  40bc64:	ea80 10b8 	eor.w	r0, r0, r8, ror #6
  40bc68:	ea80 6078 	eor.w	r0, r0, r8, ror #25
  40bc6c:	4410      	add	r0, r2

0040bc6e <.LVL22>:
  40bc6e:	4484      	add	ip, r0

0040bc70 <.LBB165>:
  40bc70:	ea4f 3273 	mov.w	r2, r3, ror #13

0040bc74 <.LBE165>:
  40bc74:	ea82 02b3 	eor.w	r2, r2, r3, ror #2
  40bc78:	ea82 52b3 	eor.w	r2, r2, r3, ror #22
  40bc7c:	ea44 0603 	orr.w	r6, r4, r3
  40bc80:	400e      	ands	r6, r1
  40bc82:	ea04 0703 	and.w	r7, r4, r3
  40bc86:	433e      	orrs	r6, r7
  40bc88:	4432      	add	r2, r6

0040bc8a <.LVL23>:
  40bc8a:	4402      	add	r2, r0

0040bc8c <.LVL24>:
            RND(S[3],S[4],S[5],S[6],S[7],S[0],S[1],S[2],i+5);
  40bc8c:	f8d9 0014 	ldr.w	r0, [r9, #20]

0040bc90 <.LVL25>:
  40bc90:	f8da 6014 	ldr.w	r6, [sl, #20]
  40bc94:	4430      	add	r0, r6
  40bc96:	4470      	add	r0, lr
  40bc98:	ea85 0e08 	eor.w	lr, r5, r8
  40bc9c:	ea0e 0e0c 	and.w	lr, lr, ip
  40bca0:	ea8e 0e05 	eor.w	lr, lr, r5
  40bca4:	4470      	add	r0, lr

0040bca6 <.LBB167>:
  40bca6:	ea4f 2efc 	mov.w	lr, ip, ror #11

0040bcaa <.LBE167>:
  40bcaa:	ea8e 1ebc 	eor.w	lr, lr, ip, ror #6
  40bcae:	ea8e 6e7c 	eor.w	lr, lr, ip, ror #25
  40bcb2:	4470      	add	r0, lr

0040bcb4 <.LVL26>:
  40bcb4:	eb01 0e00 	add.w	lr, r1, r0

0040bcb8 <.LBB169>:
  40bcb8:	ea4f 3172 	mov.w	r1, r2, ror #13

0040bcbc <.LBE169>:
  40bcbc:	ea81 01b2 	eor.w	r1, r1, r2, ror #2
  40bcc0:	ea81 51b2 	eor.w	r1, r1, r2, ror #22
  40bcc4:	ea43 0602 	orr.w	r6, r3, r2
  40bcc8:	4026      	ands	r6, r4
  40bcca:	ea03 0702 	and.w	r7, r3, r2
  40bcce:	433e      	orrs	r6, r7
  40bcd0:	4431      	add	r1, r6

0040bcd2 <.LVL27>:
  40bcd2:	4401      	add	r1, r0

0040bcd4 <.LVL28>:
            RND(S[2],S[3],S[4],S[5],S[6],S[7],S[0],S[1],i+6);
  40bcd4:	f8d9 0018 	ldr.w	r0, [r9, #24]

0040bcd8 <.LVL29>:
  40bcd8:	f8da 6018 	ldr.w	r6, [sl, #24]
  40bcdc:	4430      	add	r0, r6
  40bcde:	4405      	add	r5, r0
  40bce0:	ea88 000c 	eor.w	r0, r8, ip
  40bce4:	ea00 000e 	and.w	r0, r0, lr
  40bce8:	ea80 0008 	eor.w	r0, r0, r8
  40bcec:	4405      	add	r5, r0

0040bcee <.LBB171>:
  40bcee:	ea4f 20fe 	mov.w	r0, lr, ror #11

0040bcf2 <.LBE171>:
  40bcf2:	ea80 10be 	eor.w	r0, r0, lr, ror #6
  40bcf6:	ea80 607e 	eor.w	r0, r0, lr, ror #25
  40bcfa:	4428      	add	r0, r5

0040bcfc <.LVL30>:
  40bcfc:	1827      	adds	r7, r4, r0

0040bcfe <.LBB173>:
  40bcfe:	ea4f 3571 	mov.w	r5, r1, ror #13

0040bd02 <.LBE173>:
  40bd02:	ea85 05b1 	eor.w	r5, r5, r1, ror #2
  40bd06:	ea85 55b1 	eor.w	r5, r5, r1, ror #22
  40bd0a:	ea42 0401 	orr.w	r4, r2, r1
  40bd0e:	401c      	ands	r4, r3
  40bd10:	ea02 0601 	and.w	r6, r2, r1
  40bd14:	4334      	orrs	r4, r6
  40bd16:	4425      	add	r5, r4

0040bd18 <.LVL31>:
  40bd18:	4405      	add	r5, r0

0040bd1a <.LVL32>:
            RND(S[1],S[2],S[3],S[4],S[5],S[6],S[7],S[0],i+7);
  40bd1a:	f8d9 001c 	ldr.w	r0, [r9, #28]

0040bd1e <.LVL33>:
  40bd1e:	f8da 401c 	ldr.w	r4, [sl, #28]
  40bd22:	4420      	add	r0, r4
  40bd24:	4440      	add	r0, r8
  40bd26:	ea8c 080e 	eor.w	r8, ip, lr
  40bd2a:	ea08 0807 	and.w	r8, r8, r7
  40bd2e:	ea88 080c 	eor.w	r8, r8, ip
  40bd32:	4440      	add	r0, r8

0040bd34 <.LBB175>:
  40bd34:	ea4f 28f7 	mov.w	r8, r7, ror #11

0040bd38 <.LBE175>:
  40bd38:	ea88 18b7 	eor.w	r8, r8, r7, ror #6
  40bd3c:	ea88 6877 	eor.w	r8, r8, r7, ror #25
  40bd40:	4480      	add	r8, r0

0040bd42 <.LVL34>:
  40bd42:	4443      	add	r3, r8

0040bd44 <.LBB177>:
  40bd44:	ea4f 3075 	mov.w	r0, r5, ror #13

0040bd48 <.LBE177>:
  40bd48:	ea80 00b5 	eor.w	r0, r0, r5, ror #2
  40bd4c:	ea80 50b5 	eor.w	r0, r0, r5, ror #22
  40bd50:	ea41 0405 	orr.w	r4, r1, r5
  40bd54:	4014      	ands	r4, r2
  40bd56:	ea01 0605 	and.w	r6, r1, r5
  40bd5a:	4334      	orrs	r4, r6
  40bd5c:	4420      	add	r0, r4

0040bd5e <.LVL35>:
  40bd5e:	4440      	add	r0, r8

0040bd60 <.LVL36>:
  40bd60:	f109 0920 	add.w	r9, r9, #32
  40bd64:	f10a 0a20 	add.w	sl, sl, #32
        for (i = 0; i < SHA256_BLOCK_SIZE; i += 8) {
  40bd68:	4c0e      	ldr	r4, [pc, #56]	; (40bda4 <.LVL39>)
  40bd6a:	45a1      	cmp	r9, r4
  40bd6c:	f47f aedd 	bne.w	40bb2a <.LBB147>
  40bd70:	46da      	mov	sl, fp
  40bd72:	f8cd c124 	str.w	ip, [sp, #292]	; 0x124
  40bd76:	9346      	str	r3, [sp, #280]	; 0x118
  40bd78:	f8cd e120 	str.w	lr, [sp, #288]	; 0x120
  40bd7c:	9747      	str	r7, [sp, #284]	; 0x11c
  40bd7e:	9042      	str	r0, [sp, #264]	; 0x108
  40bd80:	9543      	str	r5, [sp, #268]	; 0x10c
  40bd82:	9144      	str	r1, [sp, #272]	; 0x110
  40bd84:	9245      	str	r2, [sp, #276]	; 0x114
  40bd86:	9a00      	ldr	r2, [sp, #0]

0040bd88 <.LVL37>:
  40bd88:	9801      	ldr	r0, [sp, #4]

0040bd8a <.LVL38>:
        }

        /* Add the working vars back into digest state[] */
        for (i = 0; i < 8; i++) {
            sha256->digest[i] += S[i];
  40bd8a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40bd8e:	f852 1f04 	ldr.w	r1, [r2, #4]!
  40bd92:	440b      	add	r3, r1
  40bd94:	f84a 3f04 	str.w	r3, [sl, #4]!
        for (i = 0; i < 8; i++) {
  40bd98:	4582      	cmp	sl, r0
  40bd9a:	d1f6      	bne.n	40bd8a <.LVL38>
    #ifdef WOLFSSL_SMALL_STACK
        XFREE(W, NULL, DYNAMIC_TYPE_TMP_BUFFER);
    #endif

        return 0;
    }
  40bd9c:	2000      	movs	r0, #0
  40bd9e:	b04b      	add	sp, #300	; 0x12c

0040bda0 <.LCFI2>:
  40bda0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040bda4 <.LVL39>:
  40bda4:	0040f2f4 	.word	0x0040f2f4
  40bda8:	0040f1f4 	.word	0x0040f1f4

Disassembly of section .text.APP_Tasks%58:

0040bdac <APP_Tasks>:

  Remarks:
    See prototype in app.h.
 */

void APP_Tasks(void) {
  40bdac:	b570      	push	{r4, r5, r6, lr}

0040bdae <.LCFI50>:

    static int j;

    /* Check the application's current state. */
    switch (appData.state) {
  40bdae:	4b82      	ldr	r3, [pc, #520]	; (40bfb8 <.LVL138+0x2>)
  40bdb0:	781b      	ldrb	r3, [r3, #0]
  40bdb2:	2b14      	cmp	r3, #20
  40bdb4:	f200 8173 	bhi.w	40c09e <.LBE5+0xa>
  40bdb8:	e8df f013 	tbh	[pc, r3, lsl #1]
  40bdbc:	00190015 	.word	0x00190015
  40bdc0:	0025001f 	.word	0x0025001f
  40bdc4:	0031002b 	.word	0x0031002b
  40bdc8:	003d0037 	.word	0x003d0037
  40bdcc:	00490043 	.word	0x00490043
  40bdd0:	0055004f 	.word	0x0055004f
  40bdd4:	0061005b 	.word	0x0061005b
  40bdd8:	00670171 	.word	0x00670171
  40bddc:	01710171 	.word	0x01710171
  40bde0:	0168006d 	.word	0x0168006d
  40bde4:	0120      	.short	0x0120
            /* Show Hyperterminal is working using available output functions */
            //            SYS_MESSAGE("SYS_MESSAGE:" "\r\n Application created " __DATE__ " " __TIME__ " initialized!\r\n");            
            //            SYS_DEBUG(SYS_ERROR_INFO,"SYS_DEBUG:" "\r\n Application created " __DATE__ " " __TIME__ " initialized!\r\n");
            // SYS_CONSOLE_Write(SYS_CONSOLE_INDEX_0, STDOUT_FILENO, msgBuffer, strlen(msgBuffer));            

            appData.state = APP_STATE_TEST_MD5;
  40bde6:	2201      	movs	r2, #1
  40bde8:	4b73      	ldr	r3, [pc, #460]	; (40bfb8 <.LVL138+0x2>)
  40bdea:	701a      	strb	r2, [r3, #0]
            break;
  40bdec:	bd70      	pop	{r4, r5, r6, pc}
        }

        case APP_STATE_TEST_MD5:
            md5_test();
  40bdee:	f004 faed 	bl	4103cc <.LFE19>

0040bdf2 <.LVL110>:
            appData.state = APP_STATE_TEST_SHA;
  40bdf2:	2202      	movs	r2, #2
  40bdf4:	4b70      	ldr	r3, [pc, #448]	; (40bfb8 <.LVL138+0x2>)
  40bdf6:	701a      	strb	r2, [r3, #0]
            break;
  40bdf8:	bd70      	pop	{r4, r5, r6, pc}

         case APP_STATE_TEST_SHA:
            sha_test();
  40bdfa:	f004 f803 	bl	40fe04 <.LFE175>

0040bdfe <.LVL111>:
            appData.state = APP_STATE_TEST_SHA256;
  40bdfe:	2203      	movs	r2, #3
  40be00:	4b6d      	ldr	r3, [pc, #436]	; (40bfb8 <.LVL138+0x2>)
  40be02:	701a      	strb	r2, [r3, #0]
            break;
  40be04:	bd70      	pop	{r4, r5, r6, pc}

         case APP_STATE_TEST_SHA256:
            sha256_test();
  40be06:	f004 ffd7 	bl	410db8 <sha256_test>

0040be0a <.LVL112>:
            appData.state = APP_STATE_TEST_SHA384;
  40be0a:	2204      	movs	r2, #4
  40be0c:	4b6a      	ldr	r3, [pc, #424]	; (40bfb8 <.LVL138+0x2>)
  40be0e:	701a      	strb	r2, [r3, #0]
            break;
  40be10:	bd70      	pop	{r4, r5, r6, pc}
 
        case APP_STATE_TEST_SHA384:
            sha384_test();
  40be12:	f005 fc0b 	bl	41162c <sha384_test>

0040be16 <.LVL113>:
            appData.state = APP_STATE_TEST_SHA512;
  40be16:	2205      	movs	r2, #5
  40be18:	4b67      	ldr	r3, [pc, #412]	; (40bfb8 <.LVL138+0x2>)
  40be1a:	701a      	strb	r2, [r3, #0]
            break;
  40be1c:	bd70      	pop	{r4, r5, r6, pc}

        case APP_STATE_TEST_SHA512:
            sha512_test();
  40be1e:	f005 fc43 	bl	4116a8 <.LFE168>

0040be22 <.LVL114>:
            appData.state = APP_STATE_TEST_HMAC_MD5;
  40be22:	2206      	movs	r2, #6
  40be24:	4b64      	ldr	r3, [pc, #400]	; (40bfb8 <.LVL138+0x2>)
  40be26:	701a      	strb	r2, [r3, #0]
            break;
  40be28:	bd70      	pop	{r4, r5, r6, pc}
 
        case APP_STATE_TEST_HMAC_MD5:
            hmac_md5_test();
  40be2a:	f004 fb29 	bl	410480 <.LFE165>

0040be2e <.LVL115>:
            appData.state = APP_STATE_TEST_HMAC_SHA;
  40be2e:	2207      	movs	r2, #7
  40be30:	4b61      	ldr	r3, [pc, #388]	; (40bfb8 <.LVL138+0x2>)
  40be32:	701a      	strb	r2, [r3, #0]
            break;
  40be34:	bd70      	pop	{r4, r5, r6, pc}
            
        case APP_STATE_TEST_HMAC_SHA:
            hmac_sha_test();
  40be36:	f004 fb7d 	bl	410534 <.LFE170>

0040be3a <.LVL116>:
            appData.state = APP_STATE_TEST_HMAC_SHA256;
  40be3a:	2208      	movs	r2, #8
  40be3c:	4b5e      	ldr	r3, [pc, #376]	; (40bfb8 <.LVL138+0x2>)
  40be3e:	701a      	strb	r2, [r3, #0]
            break;
  40be40:	bd70      	pop	{r4, r5, r6, pc}
             
        case APP_STATE_TEST_HMAC_SHA256:
            hmac_sha256_test();
  40be42:	f004 fbd1 	bl	4105e8 <.LFE171>

0040be46 <.LVL117>:
            appData.state = APP_STATE_TEST_HMAC_SHA384;
  40be46:	2209      	movs	r2, #9
  40be48:	4b5b      	ldr	r3, [pc, #364]	; (40bfb8 <.LVL138+0x2>)
  40be4a:	701a      	strb	r2, [r3, #0]
            break;
  40be4c:	bd70      	pop	{r4, r5, r6, pc}
              
        case APP_STATE_TEST_HMAC_SHA384:
            hmac_sha384_test();
  40be4e:	f004 fc25 	bl	41069c <.LFE172>

0040be52 <.LVL118>:
            appData.state = APP_STATE_TEST_HMAC_SHA512;
  40be52:	220a      	movs	r2, #10
  40be54:	4b58      	ldr	r3, [pc, #352]	; (40bfb8 <.LVL138+0x2>)
  40be56:	701a      	strb	r2, [r3, #0]
            break;
  40be58:	bd70      	pop	{r4, r5, r6, pc}
              
        case APP_STATE_TEST_HMAC_SHA512:
            hmac_sha512_test();
  40be5a:	f004 f8ed 	bl	410038 <hmac_sha512_test>

0040be5e <.LVL119>:
            appData.state = APP_STATE_TEST_DES;
  40be5e:	220b      	movs	r2, #11
  40be60:	4b55      	ldr	r3, [pc, #340]	; (40bfb8 <.LVL138+0x2>)
  40be62:	701a      	strb	r2, [r3, #0]
            break;
  40be64:	bd70      	pop	{r4, r5, r6, pc}
              
        case APP_STATE_TEST_DES:
           des_test();
  40be66:	f003 ff6d 	bl	40fd44 <.LFE19>

0040be6a <.LVL120>:
            appData.state = APP_STATE_TEST_DES3;
  40be6a:	220c      	movs	r2, #12
  40be6c:	4b52      	ldr	r3, [pc, #328]	; (40bfb8 <.LVL138+0x2>)
  40be6e:	701a      	strb	r2, [r3, #0]
            break;
  40be70:	bd70      	pop	{r4, r5, r6, pc}
                   
        case APP_STATE_TEST_DES3:
            des3_test();
  40be72:	f003 fc23 	bl	40f6bc <.LBE840>

0040be76 <.LVL121>:
            appData.state = APP_STATE_TEST_AES;
  40be76:	220d      	movs	r2, #13
  40be78:	4b4f      	ldr	r3, [pc, #316]	; (40bfb8 <.LVL138+0x2>)
  40be7a:	701a      	strb	r2, [r3, #0]
            break;
  40be7c:	bd70      	pop	{r4, r5, r6, pc}
                          
        case APP_STATE_TEST_AES:
            aes_test();
  40be7e:	f001 febd 	bl	40dbfc <.LFE21>

0040be82 <.LVL122>:
            appData.state = APP_STATE_TEST_RANDOM;
  40be82:	220f      	movs	r2, #15
  40be84:	4b4c      	ldr	r3, [pc, #304]	; (40bfb8 <.LVL138+0x2>)
  40be86:	701a      	strb	r2, [r3, #0]
            break;
  40be88:	bd70      	pop	{r4, r5, r6, pc}
   
        case APP_STATE_TEST_RANDOM:
            random_test();
  40be8a:	f006 f9ff 	bl	41228c <.LBE32>

0040be8e <.LVL123>:
            appData.state = APP_STATE_DISPLAY_RESULTS;
  40be8e:	2212      	movs	r2, #18
  40be90:	4b49      	ldr	r3, [pc, #292]	; (40bfb8 <.LVL138+0x2>)
  40be92:	701a      	strb	r2, [r3, #0]
            break;
  40be94:	bd70      	pop	{r4, r5, r6, pc}
          
        case APP_STATE_DISPLAY_RESULTS:
            switch (j) {
  40be96:	4b49      	ldr	r3, [pc, #292]	; (40bfbc <.LVL138+0x6>)
  40be98:	681b      	ldr	r3, [r3, #0]
  40be9a:	2b0d      	cmp	r3, #13
  40be9c:	d80f      	bhi.n	40bebe <.LVL124>
  40be9e:	e8df f003 	tbb	[pc, r3]
  40bea2:	1907      	.short	0x1907
  40bea4:	39312921 	.word	0x39312921
  40bea8:	59514941 	.word	0x59514941
  40beac:	83716961 	.word	0x83716961
                case 0:
#ifndef NO_MD5
                    sprintf(printBuffer, "%s\n\rMD5 test:          %d", 
  40beb0:	4843      	ldr	r0, [pc, #268]	; (40bfc0 <.LVL138+0xa>)
  40beb2:	4b41      	ldr	r3, [pc, #260]	; (40bfb8 <.LVL138+0x2>)
  40beb4:	685b      	ldr	r3, [r3, #4]
  40beb6:	4602      	mov	r2, r0
  40beb8:	4942      	ldr	r1, [pc, #264]	; (40bfc4 <.LVL138+0xe>)
  40beba:	f006 f841 	bl	411f40 <.LFE165>

0040bebe <.LVL124>:
                    sprintf(printBuffer, "%s\n\rRANDOM test:       %d", 
                            printBuffer, appData.random_test_result);
                    break;
            }
            
            j++;
  40bebe:	4a3f      	ldr	r2, [pc, #252]	; (40bfbc <.LVL138+0x6>)
  40bec0:	6813      	ldr	r3, [r2, #0]
  40bec2:	3301      	adds	r3, #1
  40bec4:	6013      	str	r3, [r2, #0]
            if (j > 13)
  40bec6:	2b0d      	cmp	r3, #13
                appData.state = APP_STATE_CHECK_RESULTS;
  40bec8:	bfcc      	ite	gt
  40beca:	2214      	movgt	r2, #20
            else {
                appData.state = APP_STATE_WAIT_FOR_CONSOLE;
  40becc:	2213      	movle	r2, #19
  40bece:	4b3a      	ldr	r3, [pc, #232]	; (40bfb8 <.LVL138+0x2>)
  40bed0:	701a      	strb	r2, [r3, #0]
  40bed2:	bd70      	pop	{r4, r5, r6, pc}
                    sprintf(printBuffer, "%s\n\rSHA test:          %d", 
  40bed4:	483a      	ldr	r0, [pc, #232]	; (40bfc0 <.LVL138+0xa>)
  40bed6:	4b38      	ldr	r3, [pc, #224]	; (40bfb8 <.LVL138+0x2>)
  40bed8:	689b      	ldr	r3, [r3, #8]
  40beda:	4602      	mov	r2, r0
  40bedc:	493a      	ldr	r1, [pc, #232]	; (40bfc8 <.LVL138+0x12>)
  40bede:	f006 f82f 	bl	411f40 <.LFE165>

0040bee2 <.LVL125>:
                    break;
  40bee2:	e7ec      	b.n	40bebe <.LVL124>
                    sprintf(printBuffer, "%s\n\rSHA256 test:       %d", 
  40bee4:	4836      	ldr	r0, [pc, #216]	; (40bfc0 <.LVL138+0xa>)
  40bee6:	4b34      	ldr	r3, [pc, #208]	; (40bfb8 <.LVL138+0x2>)
  40bee8:	68db      	ldr	r3, [r3, #12]
  40beea:	4602      	mov	r2, r0
  40beec:	4937      	ldr	r1, [pc, #220]	; (40bfcc <.LVL138+0x16>)
  40beee:	f006 f827 	bl	411f40 <.LFE165>

0040bef2 <.LVL126>:
                    break;
  40bef2:	e7e4      	b.n	40bebe <.LVL124>
                    sprintf(printBuffer, "%s\n\rSHA384 test:       %d", 
  40bef4:	4832      	ldr	r0, [pc, #200]	; (40bfc0 <.LVL138+0xa>)
  40bef6:	4b30      	ldr	r3, [pc, #192]	; (40bfb8 <.LVL138+0x2>)
  40bef8:	691b      	ldr	r3, [r3, #16]
  40befa:	4602      	mov	r2, r0
  40befc:	4934      	ldr	r1, [pc, #208]	; (40bfd0 <.LVL138+0x1a>)
  40befe:	f006 f81f 	bl	411f40 <.LFE165>

0040bf02 <.LVL127>:
                    break; 
  40bf02:	e7dc      	b.n	40bebe <.LVL124>
                    sprintf(printBuffer, "%s\n\rSHA512 test:       %d", 
  40bf04:	482e      	ldr	r0, [pc, #184]	; (40bfc0 <.LVL138+0xa>)
  40bf06:	4b2c      	ldr	r3, [pc, #176]	; (40bfb8 <.LVL138+0x2>)
  40bf08:	695b      	ldr	r3, [r3, #20]
  40bf0a:	4602      	mov	r2, r0
  40bf0c:	4931      	ldr	r1, [pc, #196]	; (40bfd4 <.LVL138+0x1e>)
  40bf0e:	f006 f817 	bl	411f40 <.LFE165>

0040bf12 <.LVL128>:
                    break;
  40bf12:	e7d4      	b.n	40bebe <.LVL124>
                    sprintf(printBuffer, "%s\n\rHMAC_MD5 test:     %d", 
  40bf14:	482a      	ldr	r0, [pc, #168]	; (40bfc0 <.LVL138+0xa>)
  40bf16:	4b28      	ldr	r3, [pc, #160]	; (40bfb8 <.LVL138+0x2>)
  40bf18:	699b      	ldr	r3, [r3, #24]
  40bf1a:	4602      	mov	r2, r0
  40bf1c:	492e      	ldr	r1, [pc, #184]	; (40bfd8 <.LVL138+0x22>)
  40bf1e:	f006 f80f 	bl	411f40 <.LFE165>

0040bf22 <.LVL129>:
                    break;
  40bf22:	e7cc      	b.n	40bebe <.LVL124>
                    sprintf(printBuffer, "%s\n\rHMAC_SHA test:     %d", 
  40bf24:	4826      	ldr	r0, [pc, #152]	; (40bfc0 <.LVL138+0xa>)
  40bf26:	4b24      	ldr	r3, [pc, #144]	; (40bfb8 <.LVL138+0x2>)
  40bf28:	69db      	ldr	r3, [r3, #28]
  40bf2a:	4602      	mov	r2, r0
  40bf2c:	492b      	ldr	r1, [pc, #172]	; (40bfdc <.LVL138+0x26>)
  40bf2e:	f006 f807 	bl	411f40 <.LFE165>

0040bf32 <.LVL130>:
                    break;            
  40bf32:	e7c4      	b.n	40bebe <.LVL124>
                    sprintf(printBuffer, "%s\n\rHMAC_SHA256 test:  %d", 
  40bf34:	4822      	ldr	r0, [pc, #136]	; (40bfc0 <.LVL138+0xa>)
  40bf36:	4b20      	ldr	r3, [pc, #128]	; (40bfb8 <.LVL138+0x2>)
  40bf38:	6a1b      	ldr	r3, [r3, #32]
  40bf3a:	4602      	mov	r2, r0
  40bf3c:	4928      	ldr	r1, [pc, #160]	; (40bfe0 <.LVL138+0x2a>)
  40bf3e:	f005 ffff 	bl	411f40 <.LFE165>

0040bf42 <.LVL131>:
                    break; 
  40bf42:	e7bc      	b.n	40bebe <.LVL124>
                    sprintf(printBuffer, "%s\n\rHMAC_SHA384 test:  %d", 
  40bf44:	481e      	ldr	r0, [pc, #120]	; (40bfc0 <.LVL138+0xa>)
  40bf46:	4b1c      	ldr	r3, [pc, #112]	; (40bfb8 <.LVL138+0x2>)
  40bf48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40bf4a:	4602      	mov	r2, r0
  40bf4c:	4925      	ldr	r1, [pc, #148]	; (40bfe4 <.LVL138+0x2e>)
  40bf4e:	f005 fff7 	bl	411f40 <.LFE165>

0040bf52 <.LVL132>:
                    break; 
  40bf52:	e7b4      	b.n	40bebe <.LVL124>
                    sprintf(printBuffer, "%s\n\rHMAC_SHA512 test:  %d", 
  40bf54:	481a      	ldr	r0, [pc, #104]	; (40bfc0 <.LVL138+0xa>)
  40bf56:	4b18      	ldr	r3, [pc, #96]	; (40bfb8 <.LVL138+0x2>)
  40bf58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40bf5a:	4602      	mov	r2, r0
  40bf5c:	4922      	ldr	r1, [pc, #136]	; (40bfe8 <.LVL138+0x32>)
  40bf5e:	f005 ffef 	bl	411f40 <.LFE165>

0040bf62 <.LVL133>:
                    break;
  40bf62:	e7ac      	b.n	40bebe <.LVL124>
                    sprintf(printBuffer, "%s\n\rDES test:          %d", 
  40bf64:	4816      	ldr	r0, [pc, #88]	; (40bfc0 <.LVL138+0xa>)
  40bf66:	4b14      	ldr	r3, [pc, #80]	; (40bfb8 <.LVL138+0x2>)
  40bf68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40bf6a:	4602      	mov	r2, r0
  40bf6c:	491f      	ldr	r1, [pc, #124]	; (40bfec <.LVL138+0x36>)
  40bf6e:	f005 ffe7 	bl	411f40 <.LFE165>

0040bf72 <.LVL134>:
                    break;
  40bf72:	e7a4      	b.n	40bebe <.LVL124>
                    sprintf(printBuffer, "%s\n\rDES3 test:         %d", 
  40bf74:	4812      	ldr	r0, [pc, #72]	; (40bfc0 <.LVL138+0xa>)
  40bf76:	4b10      	ldr	r3, [pc, #64]	; (40bfb8 <.LVL138+0x2>)
  40bf78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40bf7a:	4602      	mov	r2, r0
  40bf7c:	491c      	ldr	r1, [pc, #112]	; (40bff0 <.LVL138+0x3a>)
  40bf7e:	f005 ffdf 	bl	411f40 <.LFE165>

0040bf82 <.LVL135>:
                    break;
  40bf82:	e79c      	b.n	40bebe <.LVL124>
                    sprintf(printBuffer, "%s\n\rAES CBC test:      %d", 
  40bf84:	4e0c      	ldr	r6, [pc, #48]	; (40bfb8 <.LVL138+0x2>)
  40bf86:	4c0e      	ldr	r4, [pc, #56]	; (40bfc0 <.LVL138+0xa>)
  40bf88:	4d1a      	ldr	r5, [pc, #104]	; (40bff4 <.LVL138+0x3e>)
  40bf8a:	6b73      	ldr	r3, [r6, #52]	; 0x34
  40bf8c:	4622      	mov	r2, r4
  40bf8e:	f605 11e8 	addw	r1, r5, #2536	; 0x9e8
  40bf92:	4620      	mov	r0, r4
  40bf94:	f005 ffd4 	bl	411f40 <.LFE165>

0040bf98 <.LVL136>:
                    sprintf(printBuffer, "%s\n\rAES CTR test:      %d", 
  40bf98:	6bb3      	ldr	r3, [r6, #56]	; 0x38
  40bf9a:	4622      	mov	r2, r4
  40bf9c:	f605 2104 	addw	r1, r5, #2564	; 0xa04
  40bfa0:	4620      	mov	r0, r4
  40bfa2:	f005 ffcd 	bl	411f40 <.LFE165>

0040bfa6 <.LVL137>:
                    break;                    
  40bfa6:	e78a      	b.n	40bebe <.LVL124>
                    sprintf(printBuffer, "%s\n\rRANDOM test:       %d", 
  40bfa8:	4805      	ldr	r0, [pc, #20]	; (40bfc0 <.LVL138+0xa>)
  40bfaa:	4b03      	ldr	r3, [pc, #12]	; (40bfb8 <.LVL138+0x2>)
  40bfac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40bfae:	4602      	mov	r2, r0
  40bfb0:	4911      	ldr	r1, [pc, #68]	; (40bff8 <.LVL138+0x42>)
  40bfb2:	f005 ffc5 	bl	411f40 <.LFE165>

0040bfb6 <.LVL138>:
                    break;
  40bfb6:	e782      	b.n	40bebe <.LVL124>
  40bfb8:	2040db08 	.word	0x2040db08
  40bfbc:	2040dd14 	.word	0x2040dd14
  40bfc0:	20400054 	.word	0x20400054
  40bfc4:	00409264 	.word	0x00409264
  40bfc8:	00409280 	.word	0x00409280
  40bfcc:	0040929c 	.word	0x0040929c
  40bfd0:	004092b8 	.word	0x004092b8
  40bfd4:	004092d4 	.word	0x004092d4
  40bfd8:	004092f0 	.word	0x004092f0
  40bfdc:	0040930c 	.word	0x0040930c
  40bfe0:	00409328 	.word	0x00409328
  40bfe4:	00409344 	.word	0x00409344
  40bfe8:	00409360 	.word	0x00409360
  40bfec:	0040937c 	.word	0x0040937c
  40bff0:	00409398 	.word	0x00409398
  40bff4:	004089cc 	.word	0x004089cc
  40bff8:	004093ec 	.word	0x004093ec
            break;

        case APP_STATE_CHECK_RESULTS:
            if (
#ifndef NO_MD5
                MD5_Expected != appData.md5_test_result 
  40bffc:	4b28      	ldr	r3, [pc, #160]	; (40c0a0 <.LBE5+0xc>)
            if (
  40bffe:	685b      	ldr	r3, [r3, #4]
  40c000:	2b00      	cmp	r3, #0
  40c002:	d12a      	bne.n	40c05a <.LVL138+0xa4>
#endif
#ifndef NO_SHA                    
                || SHA_Expected != appData.sha_test_result
  40c004:	4b26      	ldr	r3, [pc, #152]	; (40c0a0 <.LBE5+0xc>)
  40c006:	689b      	ldr	r3, [r3, #8]
  40c008:	2b00      	cmp	r3, #0
  40c00a:	d126      	bne.n	40c05a <.LVL138+0xa4>
#endif
#ifndef NO_SHA256                    
                || SHA256_Expected != appData.sha256_test_result
  40c00c:	4b24      	ldr	r3, [pc, #144]	; (40c0a0 <.LBE5+0xc>)
  40c00e:	68db      	ldr	r3, [r3, #12]
  40c010:	bb1b      	cbnz	r3, 40c05a <.LVL138+0xa4>
#endif
#ifdef WOLFSSL_SHA384                    
                || SHA384_Expected != appData.sha384_test_result
  40c012:	4b23      	ldr	r3, [pc, #140]	; (40c0a0 <.LBE5+0xc>)
  40c014:	691b      	ldr	r3, [r3, #16]
  40c016:	bb03      	cbnz	r3, 40c05a <.LVL138+0xa4>
#endif
#ifdef WOLFSSL_SHA512                    
                || SHA512_Expected != appData.sha512_test_result
  40c018:	4b21      	ldr	r3, [pc, #132]	; (40c0a0 <.LBE5+0xc>)
  40c01a:	695b      	ldr	r3, [r3, #20]
  40c01c:	b9eb      	cbnz	r3, 40c05a <.LVL138+0xa4>
#endif
#if !defined(NO_HMAC) && !defined(NO_MD5)                    
                || HMAC_MD5_Expected != appData.hmac_md5_test_result
  40c01e:	4b20      	ldr	r3, [pc, #128]	; (40c0a0 <.LBE5+0xc>)
  40c020:	699b      	ldr	r3, [r3, #24]
  40c022:	b9d3      	cbnz	r3, 40c05a <.LVL138+0xa4>
#endif
#if !defined(NO_HMAC) && !defined(NO_SHA)                    
                || HMAC_SHA_Expected != appData.hmac_sha_test_result
  40c024:	4b1e      	ldr	r3, [pc, #120]	; (40c0a0 <.LBE5+0xc>)
  40c026:	69db      	ldr	r3, [r3, #28]
  40c028:	b9bb      	cbnz	r3, 40c05a <.LVL138+0xa4>
#endif
#if !defined(NO_HMAC) && !defined(NO_SHA256)                    
                || HMAC_SHA256_Expected != appData.hmac_sha256_test_result
  40c02a:	4b1d      	ldr	r3, [pc, #116]	; (40c0a0 <.LBE5+0xc>)
  40c02c:	6a1b      	ldr	r3, [r3, #32]
  40c02e:	b9a3      	cbnz	r3, 40c05a <.LVL138+0xa4>
#endif
#if !defined(NO_HMAC) && defined(WOLFSSL_SHA384)                    
                || HMAC_SHA384_Expected != appData.hmac_sha384_test_result
  40c030:	4b1b      	ldr	r3, [pc, #108]	; (40c0a0 <.LBE5+0xc>)
  40c032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40c034:	b98b      	cbnz	r3, 40c05a <.LVL138+0xa4>
#endif
#if !defined(NO_HMAC) && defined(WOLFSSL_SHA512)                    
                || HMAC_SHA512_Expected != appData.hmac_sha512_test_result
  40c036:	4b1a      	ldr	r3, [pc, #104]	; (40c0a0 <.LBE5+0xc>)
  40c038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40c03a:	b973      	cbnz	r3, 40c05a <.LVL138+0xa4>
#endif
#ifndef NO_DES3                   
                || DES_Expected != appData.des_test_result
  40c03c:	4b18      	ldr	r3, [pc, #96]	; (40c0a0 <.LBE5+0xc>)
  40c03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40c040:	b95b      	cbnz	r3, 40c05a <.LVL138+0xa4>
#endif
#ifndef NO_DES3                   
                || DES3_Expected != appData.des3_test_result
  40c042:	4b17      	ldr	r3, [pc, #92]	; (40c0a0 <.LBE5+0xc>)
  40c044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40c046:	b943      	cbnz	r3, 40c05a <.LVL138+0xa4>
#endif
#ifndef NO_AES                   
                || AES_CBC_Expected != appData.aes_cbc_test_result
  40c048:	4b15      	ldr	r3, [pc, #84]	; (40c0a0 <.LBE5+0xc>)
  40c04a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40c04c:	b92b      	cbnz	r3, 40c05a <.LVL138+0xa4>
#ifdef WOLFSSL_AES_COUNTER                    
                || AES_CTR_Expected != appData.aes_ctr_test_result
  40c04e:	4b14      	ldr	r3, [pc, #80]	; (40c0a0 <.LBE5+0xc>)
  40c050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  40c052:	b913      	cbnz	r3, 40c05a <.LVL138+0xa4>
#endif
#endif
                || Random_Expected != appData.random_test_result
  40c054:	4b12      	ldr	r3, [pc, #72]	; (40c0a0 <.LBE5+0xc>)
  40c056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40c058:	b193      	cbz	r3, 40c080 <.LVL141+0x8>
                ) 
            {    
                // We had an error during comparisons
                sprintf(printBuffer, "%s\n\rA test failed.\n", printBuffer);
  40c05a:	4812      	ldr	r0, [pc, #72]	; (40c0a4 <.LBE5+0x10>)
  40c05c:	4602      	mov	r2, r0
  40c05e:	4912      	ldr	r1, [pc, #72]	; (40c0a8 <.LBE5+0x14>)
  40c060:	f005 ff6e 	bl	411f40 <.LFE165>

0040c064 <.LVL139>:
            } else {
                sprintf(printBuffer, "%s\n\rAll tests passed.\n", printBuffer);
            }
            SYS_CONSOLE_Write(SYS_CONSOLE_INDEX_0, STDOUT_FILENO, printBuffer, 
  40c064:	4c0f      	ldr	r4, [pc, #60]	; (40c0a4 <.LBE5+0x10>)
  40c066:	4620      	mov	r0, r4
  40c068:	f003 fc0a 	bl	40f880 <.LFE22>

0040c06c <.LVL140>:
  40c06c:	4603      	mov	r3, r0
  40c06e:	4622      	mov	r2, r4
  40c070:	2101      	movs	r1, #1
  40c072:	2000      	movs	r0, #0
  40c074:	f006 fb2a 	bl	4126cc <SYS_CONSOLE_Write>

0040c078 <.LVL141>:
                              strlen(printBuffer));
            appData.state = APP_STATE_SPIN;
  40c078:	2215      	movs	r2, #21
  40c07a:	4b09      	ldr	r3, [pc, #36]	; (40c0a0 <.LBE5+0xc>)
  40c07c:	701a      	strb	r2, [r3, #0]
            break;
  40c07e:	bd70      	pop	{r4, r5, r6, pc}
                sprintf(printBuffer, "%s\n\rAll tests passed.\n", printBuffer);
  40c080:	4808      	ldr	r0, [pc, #32]	; (40c0a4 <.LBE5+0x10>)
  40c082:	4602      	mov	r2, r0
  40c084:	4909      	ldr	r1, [pc, #36]	; (40c0ac <.LBE5+0x18>)
  40c086:	f005 ff5b 	bl	411f40 <.LFE165>

0040c08a <.LVL142>:
  40c08a:	e7eb      	b.n	40c064 <.LVL139>

        case APP_STATE_WAIT_FOR_CONSOLE:
            //            if (appData.wrComplete)
            if (appData.wallTime <= APP_getTicks())
  40c08c:	4b04      	ldr	r3, [pc, #16]	; (40c0a0 <.LBE5+0xc>)
  40c08e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c

0040c090 <.LBB5>:
    return SYS_TIME_CounterGet();
  40c090:	f006 fb34 	bl	4126fc <.LFE6>

0040c094 <.LBE5>:
            if (appData.wallTime <= APP_getTicks())
  40c094:	4284      	cmp	r4, r0
  40c096:	d802      	bhi.n	40c09e <.LBE5+0xa>
                appData.state = APP_STATE_DISPLAY_RESULTS;
  40c098:	2212      	movs	r2, #18
  40c09a:	4b01      	ldr	r3, [pc, #4]	; (40c0a0 <.LBE5+0xc>)
  40c09c:	701a      	strb	r2, [r3, #0]
  40c09e:	bd70      	pop	{r4, r5, r6, pc}
  40c0a0:	2040db08 	.word	0x2040db08
  40c0a4:	20400054 	.word	0x20400054
  40c0a8:	00409408 	.word	0x00409408
  40c0ac:	0040941c 	.word	0x0040941c

Disassembly of section .text.Hash_DRBG_Generate%59:

0040c0b0 <Hash_DRBG_Generate>:
    }
}

/* Returns: DRBG_SUCCESS, DRBG_NEED_RESEED, or DRBG_FAILURE */
static int Hash_DRBG_Generate(DRBG* drbg, byte* out, word32 outSz)
{
  40c0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0040c0b4 <.LCFI14>:
  40c0b4:	b0d9      	sub	sp, #356	; 0x164

0040c0b6 <.LCFI15>:
  40c0b6:	4690      	mov	r8, r2

0040c0b8 <.LVL75>:
    int ret = DRBG_NEED_RESEED;
    Sha256 sha;
    DECLARE_VAR(digest, byte, SHA256_DIGEST_SIZE, drbg->heap);

    if (drbg->reseedCtr != RESEED_INTERVAL) {
  40c0b8:	6803      	ldr	r3, [r0, #0]
  40c0ba:	4ab4      	ldr	r2, [pc, #720]	; (40c38c <.LVL182+0x4>)

0040c0bc <.LVL76>:
  40c0bc:	4293      	cmp	r3, r2
  40c0be:	f000 811b 	beq.w	40c2f8 <.LBE67>
  40c0c2:	4606      	mov	r6, r0
  40c0c4:	460d      	mov	r5, r1

0040c0c6 <.LBB67>:
        byte type = drbgGenerateH;
  40c0c6:	2203      	movs	r2, #3
  40c0c8:	f88d 2003 	strb.w	r2, [sp, #3]
        word32 reseedCtr = drbg->reseedCtr;
  40c0cc:	9301      	str	r3, [sp, #4]

0040c0ce <.LBB68>:
    if (outSz == 0) outSz = 1;
  40c0ce:	f1b8 0f00 	cmp.w	r8, #0
  40c0d2:	f000 8121 	beq.w	40c318 <.LBB89>
    len = (outSz / OUTPUT_BLOCK_LEN) + ((outSz % OUTPUT_BLOCK_LEN) ? 1 : 0);
  40c0d6:	f018 091f 	ands.w	r9, r8, #31
  40c0da:	bf18      	it	ne
  40c0dc:	f04f 0901 	movne.w	r9, #1
  40c0e0:	eb09 1958 	add.w	r9, r9, r8, lsr #5

0040c0e4 <.LVL78>:
    XMEMCPY(data, V, sizeof(data));
  40c0e4:	f100 0408 	add.w	r4, r0, #8

0040c0e8 <.LVL79>:
  40c0e8:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
  40c0ec:	f100 0c38 	add.w	ip, r0, #56	; 0x38

0040c0f0 <.LVL80>:
  40c0f0:	4677      	mov	r7, lr
  40c0f2:	6820      	ldr	r0, [r4, #0]
  40c0f4:	6861      	ldr	r1, [r4, #4]
  40c0f6:	68a2      	ldr	r2, [r4, #8]
  40c0f8:	68e3      	ldr	r3, [r4, #12]
  40c0fa:	c70f      	stmia	r7!, {r0, r1, r2, r3}
  40c0fc:	3410      	adds	r4, #16
  40c0fe:	46be      	mov	lr, r7
  40c100:	4564      	cmp	r4, ip
  40c102:	d1f5      	bne.n	40c0f0 <.LVL80>
  40c104:	6820      	ldr	r0, [r4, #0]
  40c106:	6038      	str	r0, [r7, #0]
  40c108:	88a2      	ldrh	r2, [r4, #4]
  40c10a:	79a3      	ldrb	r3, [r4, #6]
  40c10c:	80ba      	strh	r2, [r7, #4]
  40c10e:	71bb      	strb	r3, [r7, #6]

0040c110 <.LVL81>:
    for (i = 0; i < len; i++) {
  40c110:	f1b9 0f00 	cmp.w	r9, #0
  40c114:	f300 8119 	bgt.w	40c34a <.LVL170>
    int ret = DRBG_FAILURE;
  40c118:	2702      	movs	r7, #2

0040c11a <.LVL82>:
  40c11a:	ab0a      	add	r3, sp, #40	; 0x28

0040c11c <.LBB70>:
    while (len--) *z++ = 0;
  40c11c:	2000      	movs	r0, #0
  40c11e:	f10d 015f 	add.w	r1, sp, #95	; 0x5f

0040c122 <.LVL84>:
  40c122:	1c5a      	adds	r2, r3, #1

0040c124 <.LVL85>:
  40c124:	7018      	strb	r0, [r3, #0]

0040c126 <.LVL86>:
  40c126:	4613      	mov	r3, r2
  40c128:	428a      	cmp	r2, r1
  40c12a:	d1fa      	bne.n	40c122 <.LVL84>

0040c12c <.LBE70>:
    return (ret == 0) ? DRBG_SUCCESS : DRBG_FAILURE;
  40c12c:	2f00      	cmp	r7, #0
  40c12e:	f000 8116 	beq.w	40c35e <.LBE89>
  40c132:	2402      	movs	r4, #2
  40c134:	e0e1      	b.n	40c2fa <.LBB91>

0040c136 <.LVL88>:
            ret = wc_Sha256Update(&sha, data, sizeof(data));
  40c136:	465a      	mov	r2, fp
  40c138:	4651      	mov	r1, sl
  40c13a:	a818      	add	r0, sp, #96	; 0x60

0040c13c <.LVL89>:
  40c13c:	f004 f8eb 	bl	410316 <.LFE18>

0040c140 <.LVL90>:
        if (ret == 0)
  40c140:	4607      	mov	r7, r0
  40c142:	2800      	cmp	r0, #0
  40c144:	f040 8107 	bne.w	40c356 <.LVL171>
            ret = wc_Sha256Final(&sha, digest);
  40c148:	a902      	add	r1, sp, #8
  40c14a:	a818      	add	r0, sp, #96	; 0x60

0040c14c <.LVL91>:
  40c14c:	f001 fe18 	bl	40dd80 <.LFE177>

0040c150 <.LVL92>:
  40c150:	4607      	mov	r7, r0

0040c152 <.LVL93>:
        wc_Sha256Free(&sha);
  40c152:	a818      	add	r0, sp, #96	; 0x60

0040c154 <.LVL94>:
  40c154:	f005 fceb 	bl	411b2e <.LFE20>

0040c158 <.LVL95>:
        if (ret == 0) {
  40c158:	2f00      	cmp	r7, #0
  40c15a:	d146      	bne.n	40c1ea <.LVL110>
            XMEMCPY(&checkBlock, digest, sizeof(word32));
  40c15c:	9b02      	ldr	r3, [sp, #8]

0040c15e <.LVL96>:
            if (drbg->reseedCtr > 1 && checkBlock == drbg->lastBlock) {
  40c15e:	6832      	ldr	r2, [r6, #0]
  40c160:	2a01      	cmp	r2, #1
  40c162:	d902      	bls.n	40c16a <.LVL96+0xc>
  40c164:	6872      	ldr	r2, [r6, #4]
  40c166:	4293      	cmp	r3, r2
  40c168:	d02f      	beq.n	40c1ca <.LBE72>
                drbg->matchCount = 0;
  40c16a:	2200      	movs	r2, #0
  40c16c:	f886 2076 	strb.w	r2, [r6, #118]	; 0x76
                drbg->lastBlock = checkBlock;
  40c170:	6073      	str	r3, [r6, #4]

0040c172 <.LVL97>:
            if (out != NULL && outSz != 0) {
  40c172:	b3d5      	cbz	r5, 40c1ea <.LVL110>
  40c174:	f1b8 0f00 	cmp.w	r8, #0
  40c178:	d037      	beq.n	40c1ea <.LVL110>
                if (outSz >= OUTPUT_BLOCK_LEN) {
  40c17a:	f1b8 0f1f 	cmp.w	r8, #31
  40c17e:	d92d      	bls.n	40c1dc <.LVL107+0xe>
                    XMEMCPY(out, digest, OUTPUT_BLOCK_LEN);
  40c180:	f10d 0e08 	add.w	lr, sp, #8

0040c184 <.LVL98>:
  40c184:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}

0040c188 <.LVL99>:
  40c188:	6028      	str	r0, [r5, #0]
  40c18a:	6069      	str	r1, [r5, #4]
  40c18c:	60aa      	str	r2, [r5, #8]
  40c18e:	60eb      	str	r3, [r5, #12]
  40c190:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}

0040c194 <.LVL100>:
  40c194:	6128      	str	r0, [r5, #16]
  40c196:	6169      	str	r1, [r5, #20]
  40c198:	61aa      	str	r2, [r5, #24]
  40c19a:	61eb      	str	r3, [r5, #28]
                    outSz -= OUTPUT_BLOCK_LEN;
  40c19c:	f1a8 0820 	sub.w	r8, r8, #32
                    out += OUTPUT_BLOCK_LEN;
  40c1a0:	3520      	adds	r5, #32

0040c1a2 <.LBB72>:
        data[i]++;
  40c1a2:	f89a 3036 	ldrb.w	r3, [sl, #54]	; 0x36
  40c1a6:	3301      	adds	r3, #1
  40c1a8:	b2db      	uxtb	r3, r3
  40c1aa:	f88a 3036 	strb.w	r3, [sl, #54]	; 0x36
        if (data[i] != 0) break;
  40c1ae:	b9e3      	cbnz	r3, 40c1ea <.LVL110>
  40c1b0:	f10d 025e 	add.w	r2, sp, #94	; 0x5e
  40c1b4:	4651      	mov	r1, sl

0040c1b6 <.LVL103>:
        data[i]++;
  40c1b6:	f812 3c01 	ldrb.w	r3, [r2, #-1]
  40c1ba:	3301      	adds	r3, #1
  40c1bc:	b2db      	uxtb	r3, r3
  40c1be:	f802 3d01 	strb.w	r3, [r2, #-1]!

0040c1c2 <.LVL104>:
        if (data[i] != 0) break;
  40c1c2:	b993      	cbnz	r3, 40c1ea <.LVL110>

0040c1c4 <.LVL105>:
    for (i = dataSz - 1; i >= 0; i--)
  40c1c4:	4291      	cmp	r1, r2
  40c1c6:	d1f6      	bne.n	40c1b6 <.LVL103>
  40c1c8:	e00f      	b.n	40c1ea <.LVL110>

0040c1ca <.LBE72>:
                if (drbg->matchCount == 1) {
  40c1ca:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76

0040c1ce <.LVL107>:
  40c1ce:	2b01      	cmp	r3, #1
  40c1d0:	f000 80d5 	beq.w	40c37e <.LBB90>
                    drbg->matchCount = 1;
  40c1d4:	2301      	movs	r3, #1
  40c1d6:	f886 3076 	strb.w	r3, [r6, #118]	; 0x76
  40c1da:	e7ca      	b.n	40c172 <.LVL97>
                    XMEMCPY(out, digest, outSz);
  40c1dc:	4642      	mov	r2, r8
  40c1de:	a902      	add	r1, sp, #8

0040c1e0 <.LVL108>:
  40c1e0:	4628      	mov	r0, r5
  40c1e2:	f002 f9e7 	bl	40e5b4 <.LFE14>

0040c1e6 <.LVL109>:
                    outSz = 0;
  40c1e6:	f04f 0800 	mov.w	r8, #0

0040c1ea <.LVL110>:
    for (i = 0; i < len; i++) {
  40c1ea:	3401      	adds	r4, #1
  40c1ec:	45a1      	cmp	r9, r4
  40c1ee:	dd94      	ble.n	40c11a <.LVL82>

0040c1f0 <.LVL112>:
        ret = wc_InitSha256(&sha);
  40c1f0:	a818      	add	r0, sp, #96	; 0x60
  40c1f2:	f006 fea5 	bl	412f40 <.LFE20>

0040c1f6 <.LVL113>:
        if (ret == 0)
  40c1f6:	4607      	mov	r7, r0
  40c1f8:	2800      	cmp	r0, #0
  40c1fa:	d09c      	beq.n	40c136 <.LVL88>

0040c1fc <.LVL114>:
        wc_Sha256Free(&sha);
  40c1fc:	a818      	add	r0, sp, #96	; 0x60
  40c1fe:	f005 fc96 	bl	411b2e <.LFE20>

0040c202 <.LVL115>:
  40c202:	e7f2      	b.n	40c1ea <.LVL110>

0040c204 <.LBE68>:
            ret = wc_InitSha256_ex(&sha, drbg->heap, drbg->devId);
        #else
            ret = wc_InitSha256(&sha);
        #endif
            if (ret == 0)
                ret = wc_Sha256Update(&sha, &type, sizeof(type));
  40c204:	2201      	movs	r2, #1
  40c206:	f10d 0103 	add.w	r1, sp, #3
  40c20a:	a83c      	add	r0, sp, #240	; 0xf0

0040c20c <.LVL117>:
  40c20c:	f004 f883 	bl	410316 <.LFE18>

0040c210 <.LVL118>:
            if (ret == 0)
  40c210:	4604      	mov	r4, r0
  40c212:	2800      	cmp	r0, #0
  40c214:	f040 80b5 	bne.w	40c382 <.LBE90>
                ret = wc_Sha256Update(&sha, drbg->V, sizeof(drbg->V));
  40c218:	2237      	movs	r2, #55	; 0x37
  40c21a:	4629      	mov	r1, r5
  40c21c:	a83c      	add	r0, sp, #240	; 0xf0

0040c21e <.LVL119>:
  40c21e:	f004 f87a 	bl	410316 <.LFE18>

0040c222 <.LVL120>:
            if (ret == 0)
  40c222:	4604      	mov	r4, r0
  40c224:	2800      	cmp	r0, #0
  40c226:	f040 80a3 	bne.w	40c370 <.LVL175+0x8>
                ret = wc_Sha256Final(&sha, digest);
  40c22a:	a934      	add	r1, sp, #208	; 0xd0
  40c22c:	a83c      	add	r0, sp, #240	; 0xf0

0040c22e <.LVL121>:
  40c22e:	f001 fda7 	bl	40dd80 <.LFE177>

0040c232 <.LVL122>:
  40c232:	4604      	mov	r4, r0

0040c234 <.LVL123>:

            wc_Sha256Free(&sha);
  40c234:	a83c      	add	r0, sp, #240	; 0xf0

0040c236 <.LVL124>:
  40c236:	f005 fc7a 	bl	411b2e <.LFE20>

0040c23a <.LVL125>:

            if (ret == 0) {
  40c23a:	2c00      	cmp	r4, #0
  40c23c:	f040 809b 	bne.w	40c376 <.LVL177>
  40c240:	f106 023f 	add.w	r2, r6, #63	; 0x3f
  40c244:	a83c      	add	r0, sp, #240	; 0xf0
  40c246:	f10d 0cd0 	add.w	ip, sp, #208	; 0xd0
  40c24a:	4611      	mov	r1, r2
  40c24c:	2300      	movs	r3, #0

0040c24e <.LBB76>:
            carry += d[dIdx] + s[sIdx];
  40c24e:	f811 ec01 	ldrb.w	lr, [r1, #-1]
  40c252:	f810 7d01 	ldrb.w	r7, [r0, #-1]!
  40c256:	4473      	add	r3, lr

0040c258 <.LVL127>:
  40c258:	443b      	add	r3, r7

0040c25a <.LVL128>:
            d[dIdx] = (byte)carry;
  40c25a:	f801 3d01 	strb.w	r3, [r1, #-1]!

0040c25e <.LVL129>:
            carry >>= 8;
  40c25e:	f3c3 230f 	ubfx	r3, r3, #8, #16

0040c262 <.LVL130>:
        for (sIdx = sLen - 1, dIdx = dLen - 1; sIdx >= 0; dIdx--, sIdx--)
  40c262:	4560      	cmp	r0, ip
  40c264:	d1f3      	bne.n	40c24e <.LBB76>

0040c266 <.LVL131>:
        for (; carry != 0 && dIdx >= 0; dIdx--) {
  40c266:	b16b      	cbz	r3, 40c284 <.LVL139>
  40c268:	f106 011f 	add.w	r1, r6, #31

0040c26c <.LVL132>:
        for (sIdx = sLen - 1, dIdx = dLen - 1; sIdx >= 0; dIdx--, sIdx--)
  40c26c:	2016      	movs	r0, #22

0040c26e <.LVL133>:
            carry += d[dIdx];
  40c26e:	f811 7c01 	ldrb.w	r7, [r1, #-1]
  40c272:	443b      	add	r3, r7

0040c274 <.LVL134>:
  40c274:	b29b      	uxth	r3, r3

0040c276 <.LVL135>:
            d[dIdx] = (byte)carry;
  40c276:	f801 3d01 	strb.w	r3, [r1, #-1]!

0040c27a <.LVL136>:
        for (; carry != 0 && dIdx >= 0; dIdx--) {
  40c27a:	3801      	subs	r0, #1
  40c27c:	0a1b      	lsrs	r3, r3, #8

0040c27e <.LVL138>:
  40c27e:	d001      	beq.n	40c284 <.LVL139>
  40c280:	2800      	cmp	r0, #0
  40c282:	daf4      	bge.n	40c26e <.LVL133>

0040c284 <.LVL139>:
  40c284:	f106 0076 	add.w	r0, r6, #118	; 0x76
        for (sIdx = sLen - 1, dIdx = dLen - 1; sIdx >= 0; dIdx--, sIdx--)
  40c288:	4611      	mov	r1, r2

0040c28a <.LBB79>:
    word16 carry = 0;
  40c28a:	2300      	movs	r3, #0

0040c28c <.LBB81>:
            carry += d[dIdx] + s[sIdx];
  40c28c:	f811 ec01 	ldrb.w	lr, [r1, #-1]
  40c290:	f810 7d01 	ldrb.w	r7, [r0, #-1]!
  40c294:	4473      	add	r3, lr

0040c296 <.LVL141>:
  40c296:	443b      	add	r3, r7

0040c298 <.LVL142>:
            d[dIdx] = (byte)carry;
  40c298:	f801 3d01 	strb.w	r3, [r1, #-1]!

0040c29c <.LVL143>:
            carry >>= 8;
  40c29c:	f3c3 230f 	ubfx	r3, r3, #8, #16

0040c2a0 <.LVL144>:
        for (sIdx = sLen - 1, dIdx = dLen - 1; sIdx >= 0; dIdx--, sIdx--)
  40c2a0:	428d      	cmp	r5, r1
  40c2a2:	d1f3      	bne.n	40c28c <.LBB81>

0040c2a4 <.LBE79>:
                array_add(drbg->V, sizeof(drbg->V), digest, SHA256_DIGEST_SIZE);
                array_add(drbg->V, sizeof(drbg->V), drbg->C, sizeof(drbg->C));
            #ifdef LITTLE_ENDIAN_ORDER
                reseedCtr = ByteReverseWord32(reseedCtr);
  40c2a4:	9901      	ldr	r1, [sp, #4]

0040c2a6 <.LBB82>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40c2a6:	0a0b      	lsrs	r3, r1, #8
  40c2a8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  40c2ac:	0209      	lsls	r1, r1, #8
  40c2ae:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  40c2b2:	430b      	orrs	r3, r1

0040c2b4 <.LBB84>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40c2b4:	ea4f 4333 	mov.w	r3, r3, ror #16

0040c2b8 <.LBE82>:
  40c2b8:	9301      	str	r3, [sp, #4]

0040c2ba <.LVL146>:
  40c2ba:	a902      	add	r1, sp, #8
  40c2bc:	f106 073b 	add.w	r7, r6, #59	; 0x3b

0040c2c0 <.LBB86>:
    word16 carry = 0;
  40c2c0:	2300      	movs	r3, #0

0040c2c2 <.LBB88>:
            carry += d[dIdx] + s[sIdx];
  40c2c2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
  40c2c6:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
  40c2ca:	442b      	add	r3, r5

0040c2cc <.LVL148>:
  40c2cc:	4403      	add	r3, r0

0040c2ce <.LVL149>:
            d[dIdx] = (byte)carry;
  40c2ce:	f802 3d01 	strb.w	r3, [r2, #-1]!

0040c2d2 <.LVL150>:
            carry >>= 8;
  40c2d2:	f3c3 230f 	ubfx	r3, r3, #8, #16

0040c2d6 <.LVL151>:
        for (sIdx = sLen - 1, dIdx = dLen - 1; sIdx >= 0; dIdx--, sIdx--)
  40c2d6:	42ba      	cmp	r2, r7
  40c2d8:	d1f3      	bne.n	40c2c2 <.LBB88>

0040c2da <.LVL152>:
        for (; carry != 0 && dIdx >= 0; dIdx--) {
  40c2da:	2b00      	cmp	r3, #0
  40c2dc:	d04b      	beq.n	40c376 <.LVL177>
        for (sIdx = sLen - 1, dIdx = dLen - 1; sIdx >= 0; dIdx--, sIdx--)
  40c2de:	2132      	movs	r1, #50	; 0x32

0040c2e0 <.LVL153>:
            carry += d[dIdx];
  40c2e0:	f812 0c01 	ldrb.w	r0, [r2, #-1]
  40c2e4:	4403      	add	r3, r0

0040c2e6 <.LVL154>:
  40c2e6:	b29b      	uxth	r3, r3

0040c2e8 <.LVL155>:
            d[dIdx] = (byte)carry;
  40c2e8:	f802 3d01 	strb.w	r3, [r2, #-1]!

0040c2ec <.LVL156>:
        for (; carry != 0 && dIdx >= 0; dIdx--) {
  40c2ec:	3901      	subs	r1, #1
  40c2ee:	0a1b      	lsrs	r3, r3, #8

0040c2f0 <.LVL158>:
  40c2f0:	d041      	beq.n	40c376 <.LVL177>
  40c2f2:	2900      	cmp	r1, #0
  40c2f4:	daf4      	bge.n	40c2e0 <.LVL153>
  40c2f6:	e03e      	b.n	40c376 <.LVL177>

0040c2f8 <.LBE67>:
    int ret = DRBG_NEED_RESEED;
  40c2f8:	2403      	movs	r4, #3

0040c2fa <.LBB91>:
    volatile byte* z = (volatile byte*)mem;
  40c2fa:	ab34      	add	r3, sp, #208	; 0xd0

0040c2fc <.LVL161>:
    while (len--) *z++ = 0;
  40c2fc:	2000      	movs	r0, #0
  40c2fe:	a93c      	add	r1, sp, #240	; 0xf0

0040c300 <.LVL162>:
  40c300:	1c5a      	adds	r2, r3, #1

0040c302 <.LVL163>:
  40c302:	7018      	strb	r0, [r3, #0]

0040c304 <.LVL164>:
  40c304:	4613      	mov	r3, r2
  40c306:	428a      	cmp	r2, r1
  40c308:	d1fa      	bne.n	40c300 <.LVL162>

0040c30a <.LBE91>:
    }
    ForceZero(digest, SHA256_DIGEST_SIZE);

    FREE_VAR(digest, drbg->heap);

    return (ret == 0) ? DRBG_SUCCESS : DRBG_FAILURE;
  40c30a:	2c00      	cmp	r4, #0
  40c30c:	bf18      	it	ne
  40c30e:	2402      	movne	r4, #2

0040c310 <.LVL166>:
}
  40c310:	4620      	mov	r0, r4
  40c312:	b059      	add	sp, #356	; 0x164

0040c314 <.LCFI16>:
  40c314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040c318 <.LBB89>:
    XMEMCPY(data, V, sizeof(data));
  40c318:	f100 0408 	add.w	r4, r0, #8
  40c31c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
  40c320:	f100 0c38 	add.w	ip, r0, #56	; 0x38

0040c324 <.LVL168>:
  40c324:	4677      	mov	r7, lr
  40c326:	6820      	ldr	r0, [r4, #0]
  40c328:	6861      	ldr	r1, [r4, #4]
  40c32a:	68a2      	ldr	r2, [r4, #8]
  40c32c:	68e3      	ldr	r3, [r4, #12]
  40c32e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
  40c330:	3410      	adds	r4, #16
  40c332:	46be      	mov	lr, r7
  40c334:	4564      	cmp	r4, ip
  40c336:	d1f5      	bne.n	40c324 <.LVL168>
  40c338:	6820      	ldr	r0, [r4, #0]
  40c33a:	6038      	str	r0, [r7, #0]
  40c33c:	88a2      	ldrh	r2, [r4, #4]
  40c33e:	79a3      	ldrb	r3, [r4, #6]
  40c340:	80ba      	strh	r2, [r7, #4]
  40c342:	71bb      	strb	r3, [r7, #6]

0040c344 <.LVL169>:
    len = (outSz / OUTPUT_BLOCK_LEN) + ((outSz % OUTPUT_BLOCK_LEN) ? 1 : 0);
  40c344:	f04f 0901 	mov.w	r9, #1
    if (outSz == 0) outSz = 1;
  40c348:	46c8      	mov	r8, r9

0040c34a <.LVL170>:
  40c34a:	2400      	movs	r4, #0
            ret = wc_Sha256Update(&sha, data, sizeof(data));
  40c34c:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
  40c350:	f04f 0b37 	mov.w	fp, #55	; 0x37
  40c354:	e74c      	b.n	40c1f0 <.LVL112>

0040c356 <.LVL171>:
        wc_Sha256Free(&sha);
  40c356:	a818      	add	r0, sp, #96	; 0x60
  40c358:	f005 fbe9 	bl	411b2e <.LFE20>

0040c35c <.LVL172>:
  40c35c:	e745      	b.n	40c1ea <.LVL110>

0040c35e <.LBE89>:
        ret = Hash_gen(drbg, out, outSz, drbg->V);
  40c35e:	f106 0508 	add.w	r5, r6, #8

0040c362 <.LVL174>:
            ret = wc_InitSha256(&sha);
  40c362:	a83c      	add	r0, sp, #240	; 0xf0
  40c364:	f006 fdec 	bl	412f40 <.LFE20>

0040c368 <.LVL175>:
            if (ret == 0)
  40c368:	4604      	mov	r4, r0
  40c36a:	2800      	cmp	r0, #0
  40c36c:	f43f af4a 	beq.w	40c204 <.LBE68>
            wc_Sha256Free(&sha);
  40c370:	a83c      	add	r0, sp, #240	; 0xf0

0040c372 <.LVL176>:
  40c372:	f005 fbdc 	bl	411b2e <.LFE20>

0040c376 <.LVL177>:
            drbg->reseedCtr++;
  40c376:	6833      	ldr	r3, [r6, #0]
  40c378:	3301      	adds	r3, #1
  40c37a:	6033      	str	r3, [r6, #0]
  40c37c:	e7bd      	b.n	40c2fa <.LBB91>

0040c37e <.LBB90>:
                    return DRBG_CONT_FAILURE;
  40c37e:	2404      	movs	r4, #4

0040c380 <.LVL179>:
  40c380:	e7bb      	b.n	40c2fa <.LBB91>

0040c382 <.LBE90>:
            wc_Sha256Free(&sha);
  40c382:	a83c      	add	r0, sp, #240	; 0xf0

0040c384 <.LVL181>:
  40c384:	f005 fbd3 	bl	411b2e <.LFE20>

0040c388 <.LVL182>:
  40c388:	e7f5      	b.n	40c376 <.LVL177>
  40c38a:	bf00      	nop
  40c38c:	000f4240 	.word	0x000f4240

Disassembly of section .text%60:

0040c390 <__udivmoddi4>:
  40c390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40c394:	468c      	mov	ip, r1
  40c396:	460d      	mov	r5, r1
  40c398:	4604      	mov	r4, r0
  40c39a:	9e08      	ldr	r6, [sp, #32]
  40c39c:	2b00      	cmp	r3, #0
  40c39e:	d151      	bne.n	40c444 <__udivmoddi4+0xb4>
  40c3a0:	428a      	cmp	r2, r1
  40c3a2:	4617      	mov	r7, r2
  40c3a4:	d96d      	bls.n	40c482 <__udivmoddi4+0xf2>
  40c3a6:	fab2 fe82 	clz	lr, r2
  40c3aa:	f1be 0f00 	cmp.w	lr, #0
  40c3ae:	d00b      	beq.n	40c3c8 <__udivmoddi4+0x38>
  40c3b0:	f1ce 0c20 	rsb	ip, lr, #32
  40c3b4:	fa01 f50e 	lsl.w	r5, r1, lr
  40c3b8:	fa20 fc0c 	lsr.w	ip, r0, ip
  40c3bc:	fa02 f70e 	lsl.w	r7, r2, lr
  40c3c0:	ea4c 0c05 	orr.w	ip, ip, r5
  40c3c4:	fa00 f40e 	lsl.w	r4, r0, lr
  40c3c8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40c3cc:	0c25      	lsrs	r5, r4, #16
  40c3ce:	fbbc f8fa 	udiv	r8, ip, sl
  40c3d2:	fa1f f987 	uxth.w	r9, r7
  40c3d6:	fb0a cc18 	mls	ip, sl, r8, ip
  40c3da:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40c3de:	fb08 f309 	mul.w	r3, r8, r9
  40c3e2:	42ab      	cmp	r3, r5
  40c3e4:	d90a      	bls.n	40c3fc <__udivmoddi4+0x6c>
  40c3e6:	19ed      	adds	r5, r5, r7
  40c3e8:	f108 32ff 	add.w	r2, r8, #4294967295
  40c3ec:	f080 8123 	bcs.w	40c636 <__udivmoddi4+0x2a6>
  40c3f0:	42ab      	cmp	r3, r5
  40c3f2:	f240 8120 	bls.w	40c636 <__udivmoddi4+0x2a6>
  40c3f6:	f1a8 0802 	sub.w	r8, r8, #2
  40c3fa:	443d      	add	r5, r7
  40c3fc:	1aed      	subs	r5, r5, r3
  40c3fe:	b2a4      	uxth	r4, r4
  40c400:	fbb5 f0fa 	udiv	r0, r5, sl
  40c404:	fb0a 5510 	mls	r5, sl, r0, r5
  40c408:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40c40c:	fb00 f909 	mul.w	r9, r0, r9
  40c410:	45a1      	cmp	r9, r4
  40c412:	d909      	bls.n	40c428 <__udivmoddi4+0x98>
  40c414:	19e4      	adds	r4, r4, r7
  40c416:	f100 33ff 	add.w	r3, r0, #4294967295
  40c41a:	f080 810a 	bcs.w	40c632 <__udivmoddi4+0x2a2>
  40c41e:	45a1      	cmp	r9, r4
  40c420:	f240 8107 	bls.w	40c632 <__udivmoddi4+0x2a2>
  40c424:	3802      	subs	r0, #2
  40c426:	443c      	add	r4, r7
  40c428:	eba4 0409 	sub.w	r4, r4, r9
  40c42c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40c430:	2100      	movs	r1, #0
  40c432:	2e00      	cmp	r6, #0
  40c434:	d061      	beq.n	40c4fa <__udivmoddi4+0x16a>
  40c436:	fa24 f40e 	lsr.w	r4, r4, lr
  40c43a:	2300      	movs	r3, #0
  40c43c:	6034      	str	r4, [r6, #0]
  40c43e:	6073      	str	r3, [r6, #4]
  40c440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c444:	428b      	cmp	r3, r1
  40c446:	d907      	bls.n	40c458 <__udivmoddi4+0xc8>
  40c448:	2e00      	cmp	r6, #0
  40c44a:	d054      	beq.n	40c4f6 <__udivmoddi4+0x166>
  40c44c:	2100      	movs	r1, #0
  40c44e:	e886 0021 	stmia.w	r6, {r0, r5}
  40c452:	4608      	mov	r0, r1
  40c454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c458:	fab3 f183 	clz	r1, r3
  40c45c:	2900      	cmp	r1, #0
  40c45e:	f040 808e 	bne.w	40c57e <__udivmoddi4+0x1ee>
  40c462:	42ab      	cmp	r3, r5
  40c464:	d302      	bcc.n	40c46c <__udivmoddi4+0xdc>
  40c466:	4282      	cmp	r2, r0
  40c468:	f200 80fa 	bhi.w	40c660 <__udivmoddi4+0x2d0>
  40c46c:	1a84      	subs	r4, r0, r2
  40c46e:	eb65 0503 	sbc.w	r5, r5, r3
  40c472:	2001      	movs	r0, #1
  40c474:	46ac      	mov	ip, r5
  40c476:	2e00      	cmp	r6, #0
  40c478:	d03f      	beq.n	40c4fa <__udivmoddi4+0x16a>
  40c47a:	e886 1010 	stmia.w	r6, {r4, ip}
  40c47e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c482:	b912      	cbnz	r2, 40c48a <__udivmoddi4+0xfa>
  40c484:	2701      	movs	r7, #1
  40c486:	fbb7 f7f2 	udiv	r7, r7, r2
  40c48a:	fab7 fe87 	clz	lr, r7
  40c48e:	f1be 0f00 	cmp.w	lr, #0
  40c492:	d134      	bne.n	40c4fe <__udivmoddi4+0x16e>
  40c494:	1beb      	subs	r3, r5, r7
  40c496:	0c3a      	lsrs	r2, r7, #16
  40c498:	fa1f fc87 	uxth.w	ip, r7
  40c49c:	2101      	movs	r1, #1
  40c49e:	fbb3 f8f2 	udiv	r8, r3, r2
  40c4a2:	0c25      	lsrs	r5, r4, #16
  40c4a4:	fb02 3318 	mls	r3, r2, r8, r3
  40c4a8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40c4ac:	fb0c f308 	mul.w	r3, ip, r8
  40c4b0:	42ab      	cmp	r3, r5
  40c4b2:	d907      	bls.n	40c4c4 <__udivmoddi4+0x134>
  40c4b4:	19ed      	adds	r5, r5, r7
  40c4b6:	f108 30ff 	add.w	r0, r8, #4294967295
  40c4ba:	d202      	bcs.n	40c4c2 <__udivmoddi4+0x132>
  40c4bc:	42ab      	cmp	r3, r5
  40c4be:	f200 80d1 	bhi.w	40c664 <__udivmoddi4+0x2d4>
  40c4c2:	4680      	mov	r8, r0
  40c4c4:	1aed      	subs	r5, r5, r3
  40c4c6:	b2a3      	uxth	r3, r4
  40c4c8:	fbb5 f0f2 	udiv	r0, r5, r2
  40c4cc:	fb02 5510 	mls	r5, r2, r0, r5
  40c4d0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40c4d4:	fb0c fc00 	mul.w	ip, ip, r0
  40c4d8:	45a4      	cmp	ip, r4
  40c4da:	d907      	bls.n	40c4ec <__udivmoddi4+0x15c>
  40c4dc:	19e4      	adds	r4, r4, r7
  40c4de:	f100 33ff 	add.w	r3, r0, #4294967295
  40c4e2:	d202      	bcs.n	40c4ea <__udivmoddi4+0x15a>
  40c4e4:	45a4      	cmp	ip, r4
  40c4e6:	f200 80b8 	bhi.w	40c65a <__udivmoddi4+0x2ca>
  40c4ea:	4618      	mov	r0, r3
  40c4ec:	eba4 040c 	sub.w	r4, r4, ip
  40c4f0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40c4f4:	e79d      	b.n	40c432 <__udivmoddi4+0xa2>
  40c4f6:	4631      	mov	r1, r6
  40c4f8:	4630      	mov	r0, r6
  40c4fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c4fe:	f1ce 0420 	rsb	r4, lr, #32
  40c502:	fa05 f30e 	lsl.w	r3, r5, lr
  40c506:	fa07 f70e 	lsl.w	r7, r7, lr
  40c50a:	fa20 f804 	lsr.w	r8, r0, r4
  40c50e:	0c3a      	lsrs	r2, r7, #16
  40c510:	fa25 f404 	lsr.w	r4, r5, r4
  40c514:	ea48 0803 	orr.w	r8, r8, r3
  40c518:	fbb4 f1f2 	udiv	r1, r4, r2
  40c51c:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40c520:	fb02 4411 	mls	r4, r2, r1, r4
  40c524:	fa1f fc87 	uxth.w	ip, r7
  40c528:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40c52c:	fb01 f30c 	mul.w	r3, r1, ip
  40c530:	42ab      	cmp	r3, r5
  40c532:	fa00 f40e 	lsl.w	r4, r0, lr
  40c536:	d909      	bls.n	40c54c <__udivmoddi4+0x1bc>
  40c538:	19ed      	adds	r5, r5, r7
  40c53a:	f101 30ff 	add.w	r0, r1, #4294967295
  40c53e:	f080 808a 	bcs.w	40c656 <__udivmoddi4+0x2c6>
  40c542:	42ab      	cmp	r3, r5
  40c544:	f240 8087 	bls.w	40c656 <__udivmoddi4+0x2c6>
  40c548:	3902      	subs	r1, #2
  40c54a:	443d      	add	r5, r7
  40c54c:	1aeb      	subs	r3, r5, r3
  40c54e:	fa1f f588 	uxth.w	r5, r8
  40c552:	fbb3 f0f2 	udiv	r0, r3, r2
  40c556:	fb02 3310 	mls	r3, r2, r0, r3
  40c55a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40c55e:	fb00 f30c 	mul.w	r3, r0, ip
  40c562:	42ab      	cmp	r3, r5
  40c564:	d907      	bls.n	40c576 <__udivmoddi4+0x1e6>
  40c566:	19ed      	adds	r5, r5, r7
  40c568:	f100 38ff 	add.w	r8, r0, #4294967295
  40c56c:	d26f      	bcs.n	40c64e <__udivmoddi4+0x2be>
  40c56e:	42ab      	cmp	r3, r5
  40c570:	d96d      	bls.n	40c64e <__udivmoddi4+0x2be>
  40c572:	3802      	subs	r0, #2
  40c574:	443d      	add	r5, r7
  40c576:	1aeb      	subs	r3, r5, r3
  40c578:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40c57c:	e78f      	b.n	40c49e <__udivmoddi4+0x10e>
  40c57e:	f1c1 0720 	rsb	r7, r1, #32
  40c582:	fa22 f807 	lsr.w	r8, r2, r7
  40c586:	408b      	lsls	r3, r1
  40c588:	fa05 f401 	lsl.w	r4, r5, r1
  40c58c:	ea48 0303 	orr.w	r3, r8, r3
  40c590:	fa20 fe07 	lsr.w	lr, r0, r7
  40c594:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40c598:	40fd      	lsrs	r5, r7
  40c59a:	ea4e 0e04 	orr.w	lr, lr, r4
  40c59e:	fbb5 f9fc 	udiv	r9, r5, ip
  40c5a2:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40c5a6:	fb0c 5519 	mls	r5, ip, r9, r5
  40c5aa:	fa1f f883 	uxth.w	r8, r3
  40c5ae:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40c5b2:	fb09 f408 	mul.w	r4, r9, r8
  40c5b6:	42ac      	cmp	r4, r5
  40c5b8:	fa02 f201 	lsl.w	r2, r2, r1
  40c5bc:	fa00 fa01 	lsl.w	sl, r0, r1
  40c5c0:	d908      	bls.n	40c5d4 <__udivmoddi4+0x244>
  40c5c2:	18ed      	adds	r5, r5, r3
  40c5c4:	f109 30ff 	add.w	r0, r9, #4294967295
  40c5c8:	d243      	bcs.n	40c652 <__udivmoddi4+0x2c2>
  40c5ca:	42ac      	cmp	r4, r5
  40c5cc:	d941      	bls.n	40c652 <__udivmoddi4+0x2c2>
  40c5ce:	f1a9 0902 	sub.w	r9, r9, #2
  40c5d2:	441d      	add	r5, r3
  40c5d4:	1b2d      	subs	r5, r5, r4
  40c5d6:	fa1f fe8e 	uxth.w	lr, lr
  40c5da:	fbb5 f0fc 	udiv	r0, r5, ip
  40c5de:	fb0c 5510 	mls	r5, ip, r0, r5
  40c5e2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40c5e6:	fb00 f808 	mul.w	r8, r0, r8
  40c5ea:	45a0      	cmp	r8, r4
  40c5ec:	d907      	bls.n	40c5fe <__udivmoddi4+0x26e>
  40c5ee:	18e4      	adds	r4, r4, r3
  40c5f0:	f100 35ff 	add.w	r5, r0, #4294967295
  40c5f4:	d229      	bcs.n	40c64a <__udivmoddi4+0x2ba>
  40c5f6:	45a0      	cmp	r8, r4
  40c5f8:	d927      	bls.n	40c64a <__udivmoddi4+0x2ba>
  40c5fa:	3802      	subs	r0, #2
  40c5fc:	441c      	add	r4, r3
  40c5fe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40c602:	eba4 0408 	sub.w	r4, r4, r8
  40c606:	fba0 8902 	umull	r8, r9, r0, r2
  40c60a:	454c      	cmp	r4, r9
  40c60c:	46c6      	mov	lr, r8
  40c60e:	464d      	mov	r5, r9
  40c610:	d315      	bcc.n	40c63e <__udivmoddi4+0x2ae>
  40c612:	d012      	beq.n	40c63a <__udivmoddi4+0x2aa>
  40c614:	b156      	cbz	r6, 40c62c <__udivmoddi4+0x29c>
  40c616:	ebba 030e 	subs.w	r3, sl, lr
  40c61a:	eb64 0405 	sbc.w	r4, r4, r5
  40c61e:	fa04 f707 	lsl.w	r7, r4, r7
  40c622:	40cb      	lsrs	r3, r1
  40c624:	431f      	orrs	r7, r3
  40c626:	40cc      	lsrs	r4, r1
  40c628:	6037      	str	r7, [r6, #0]
  40c62a:	6074      	str	r4, [r6, #4]
  40c62c:	2100      	movs	r1, #0
  40c62e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c632:	4618      	mov	r0, r3
  40c634:	e6f8      	b.n	40c428 <__udivmoddi4+0x98>
  40c636:	4690      	mov	r8, r2
  40c638:	e6e0      	b.n	40c3fc <__udivmoddi4+0x6c>
  40c63a:	45c2      	cmp	sl, r8
  40c63c:	d2ea      	bcs.n	40c614 <__udivmoddi4+0x284>
  40c63e:	ebb8 0e02 	subs.w	lr, r8, r2
  40c642:	eb69 0503 	sbc.w	r5, r9, r3
  40c646:	3801      	subs	r0, #1
  40c648:	e7e4      	b.n	40c614 <__udivmoddi4+0x284>
  40c64a:	4628      	mov	r0, r5
  40c64c:	e7d7      	b.n	40c5fe <__udivmoddi4+0x26e>
  40c64e:	4640      	mov	r0, r8
  40c650:	e791      	b.n	40c576 <__udivmoddi4+0x1e6>
  40c652:	4681      	mov	r9, r0
  40c654:	e7be      	b.n	40c5d4 <__udivmoddi4+0x244>
  40c656:	4601      	mov	r1, r0
  40c658:	e778      	b.n	40c54c <__udivmoddi4+0x1bc>
  40c65a:	3802      	subs	r0, #2
  40c65c:	443c      	add	r4, r7
  40c65e:	e745      	b.n	40c4ec <__udivmoddi4+0x15c>
  40c660:	4608      	mov	r0, r1
  40c662:	e708      	b.n	40c476 <__udivmoddi4+0xe6>
  40c664:	f1a8 0802 	sub.w	r8, r8, #2
  40c668:	443d      	add	r5, r7
  40c66a:	e72b      	b.n	40c4c4 <__udivmoddi4+0x134>

Disassembly of section .text%61:

0040c680 <L0>:
  40c680:	eba2 0003 	sub.w	r0, r2, r3
  40c684:	4770      	bx	lr
  40c686:	bf00      	nop

0040c688 <strcmp>:
  40c688:	7802      	ldrb	r2, [r0, #0]
  40c68a:	780b      	ldrb	r3, [r1, #0]
  40c68c:	2a01      	cmp	r2, #1
  40c68e:	bf28      	it	cs
  40c690:	429a      	cmpcs	r2, r3
  40c692:	d1f5      	bne.n	40c680 <L0>

0040c694 <L0>:
  40c694:	e96d 4504 	strd	r4, r5, [sp, #-16]!
  40c698:	ea40 0401 	orr.w	r4, r0, r1
  40c69c:	e9cd 6702 	strd	r6, r7, [sp, #8]
  40c6a0:	f06f 0c00 	mvn.w	ip, #0
  40c6a4:	ea4f 7244 	mov.w	r2, r4, lsl #29
  40c6a8:	b312      	cbz	r2, 40c6f0 <L0+0x5c>
  40c6aa:	ea80 0401 	eor.w	r4, r0, r1
  40c6ae:	f014 0f07 	tst.w	r4, #7
  40c6b2:	d16a      	bne.n	40c78a <L0+0xf6>
  40c6b4:	f000 0407 	and.w	r4, r0, #7
  40c6b8:	f020 0007 	bic.w	r0, r0, #7
  40c6bc:	f004 0503 	and.w	r5, r4, #3
  40c6c0:	f021 0107 	bic.w	r1, r1, #7
  40c6c4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40c6c8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  40c6cc:	f014 0f04 	tst.w	r4, #4
  40c6d0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  40c6d4:	fa0c f405 	lsl.w	r4, ip, r5
  40c6d8:	ea62 0204 	orn	r2, r2, r4
  40c6dc:	ea66 0604 	orn	r6, r6, r4
  40c6e0:	d00a      	beq.n	40c6f8 <L0+0x64>
  40c6e2:	ea63 0304 	orn	r3, r3, r4
  40c6e6:	4662      	mov	r2, ip
  40c6e8:	ea67 0704 	orn	r7, r7, r4
  40c6ec:	4666      	mov	r6, ip
  40c6ee:	e003      	b.n	40c6f8 <L0+0x64>
  40c6f0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  40c6f4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  40c6f8:	fa82 f54c 	uadd8	r5, r2, ip
  40c6fc:	ea82 0406 	eor.w	r4, r2, r6
  40c700:	faa4 f48c 	sel	r4, r4, ip
  40c704:	bb6c      	cbnz	r4, 40c762 <L0+0xce>
  40c706:	fa83 f54c 	uadd8	r5, r3, ip
  40c70a:	ea83 0507 	eor.w	r5, r3, r7
  40c70e:	faa5 f58c 	sel	r5, r5, ip
  40c712:	b995      	cbnz	r5, 40c73a <L0+0xa6>
  40c714:	e950 2302 	ldrd	r2, r3, [r0, #-8]
  40c718:	e951 6702 	ldrd	r6, r7, [r1, #-8]
  40c71c:	fa82 f54c 	uadd8	r5, r2, ip
  40c720:	ea82 0406 	eor.w	r4, r2, r6
  40c724:	faa4 f48c 	sel	r4, r4, ip
  40c728:	fa83 f54c 	uadd8	r5, r3, ip
  40c72c:	ea83 0507 	eor.w	r5, r3, r7
  40c730:	faa5 f58c 	sel	r5, r5, ip
  40c734:	4325      	orrs	r5, r4
  40c736:	d0db      	beq.n	40c6f0 <L0+0x5c>
  40c738:	b99c      	cbnz	r4, 40c762 <L0+0xce>
  40c73a:	ba2d      	rev	r5, r5
  40c73c:	fab5 f485 	clz	r4, r5
  40c740:	f024 0407 	bic.w	r4, r4, #7
  40c744:	fa27 f104 	lsr.w	r1, r7, r4
  40c748:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40c74c:	fa23 f304 	lsr.w	r3, r3, r4
  40c750:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  40c754:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40c758:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40c75c:	eba0 0001 	sub.w	r0, r0, r1
  40c760:	4770      	bx	lr
  40c762:	ba24      	rev	r4, r4
  40c764:	fab4 f484 	clz	r4, r4
  40c768:	f024 0407 	bic.w	r4, r4, #7
  40c76c:	fa26 f104 	lsr.w	r1, r6, r4
  40c770:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40c774:	fa22 f204 	lsr.w	r2, r2, r4
  40c778:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  40c77c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40c780:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40c784:	eba0 0001 	sub.w	r0, r0, r1
  40c788:	4770      	bx	lr
  40c78a:	f014 0f03 	tst.w	r4, #3
  40c78e:	d13c      	bne.n	40c80a <L0+0x176>
  40c790:	f010 0403 	ands.w	r4, r0, #3
  40c794:	d128      	bne.n	40c7e8 <L0+0x154>
  40c796:	f850 2b08 	ldr.w	r2, [r0], #8
  40c79a:	f851 3b08 	ldr.w	r3, [r1], #8
  40c79e:	fa82 f54c 	uadd8	r5, r2, ip
  40c7a2:	ea82 0503 	eor.w	r5, r2, r3
  40c7a6:	faa5 f58c 	sel	r5, r5, ip
  40c7aa:	b95d      	cbnz	r5, 40c7c4 <L0+0x130>
  40c7ac:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40c7b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
  40c7b4:	fa82 f54c 	uadd8	r5, r2, ip
  40c7b8:	ea82 0503 	eor.w	r5, r2, r3
  40c7bc:	faa5 f58c 	sel	r5, r5, ip
  40c7c0:	2d00      	cmp	r5, #0
  40c7c2:	d0e8      	beq.n	40c796 <L0+0x102>
  40c7c4:	ba2d      	rev	r5, r5
  40c7c6:	fab5 f485 	clz	r4, r5
  40c7ca:	f024 0407 	bic.w	r4, r4, #7
  40c7ce:	fa23 f104 	lsr.w	r1, r3, r4
  40c7d2:	fa22 f204 	lsr.w	r2, r2, r4
  40c7d6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  40c7da:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40c7de:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40c7e2:	eba0 0001 	sub.w	r0, r0, r1
  40c7e6:	4770      	bx	lr
  40c7e8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  40c7ec:	f020 0003 	bic.w	r0, r0, #3
  40c7f0:	f850 2b08 	ldr.w	r2, [r0], #8
  40c7f4:	f021 0103 	bic.w	r1, r1, #3
  40c7f8:	f851 3b08 	ldr.w	r3, [r1], #8
  40c7fc:	fa0c f404 	lsl.w	r4, ip, r4
  40c800:	ea62 0204 	orn	r2, r2, r4
  40c804:	ea63 0304 	orn	r3, r3, r4
  40c808:	e7c9      	b.n	40c79e <L0+0x10a>
  40c80a:	f010 0403 	ands.w	r4, r0, #3
  40c80e:	d01a      	beq.n	40c846 <L0+0x1b2>
  40c810:	eba1 0104 	sub.w	r1, r1, r4
  40c814:	f020 0003 	bic.w	r0, r0, #3
  40c818:	07e4      	lsls	r4, r4, #31
  40c81a:	f850 2b04 	ldr.w	r2, [r0], #4
  40c81e:	d006      	beq.n	40c82e <L0+0x19a>
  40c820:	d20f      	bcs.n	40c842 <L0+0x1ae>
  40c822:	788b      	ldrb	r3, [r1, #2]
  40c824:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
  40c828:	1ae4      	subs	r4, r4, r3
  40c82a:	d106      	bne.n	40c83a <L0+0x1a6>
  40c82c:	b12b      	cbz	r3, 40c83a <L0+0x1a6>
  40c82e:	78cb      	ldrb	r3, [r1, #3]
  40c830:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
  40c834:	1ae4      	subs	r4, r4, r3
  40c836:	d100      	bne.n	40c83a <L0+0x1a6>
  40c838:	b91b      	cbnz	r3, 40c842 <L0+0x1ae>
  40c83a:	4620      	mov	r0, r4
  40c83c:	f85d 4b10 	ldr.w	r4, [sp], #16
  40c840:	4770      	bx	lr
  40c842:	f101 0104 	add.w	r1, r1, #4
  40c846:	f850 2b04 	ldr.w	r2, [r0], #4
  40c84a:	07cc      	lsls	r4, r1, #31
  40c84c:	f021 0103 	bic.w	r1, r1, #3
  40c850:	f851 3b04 	ldr.w	r3, [r1], #4
  40c854:	d848      	bhi.n	40c8e8 <L0+0x254>
  40c856:	d224      	bcs.n	40c8a2 <L0+0x20e>
  40c858:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
  40c85c:	fa82 f54c 	uadd8	r5, r2, ip
  40c860:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
  40c864:	faa5 f58c 	sel	r5, r5, ip
  40c868:	d10a      	bne.n	40c880 <L0+0x1ec>
  40c86a:	b965      	cbnz	r5, 40c886 <L0+0x1f2>
  40c86c:	f851 3b04 	ldr.w	r3, [r1], #4
  40c870:	ea84 0402 	eor.w	r4, r4, r2
  40c874:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
  40c878:	d10e      	bne.n	40c898 <L0+0x204>
  40c87a:	f850 2b04 	ldr.w	r2, [r0], #4
  40c87e:	e7eb      	b.n	40c858 <L0+0x1c4>
  40c880:	ea4f 2313 	mov.w	r3, r3, lsr #8
  40c884:	e055      	b.n	40c932 <L0+0x29e>
  40c886:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
  40c88a:	d14d      	bne.n	40c928 <L0+0x294>
  40c88c:	7808      	ldrb	r0, [r1, #0]
  40c88e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40c892:	f1c0 0000 	rsb	r0, r0, #0
  40c896:	4770      	bx	lr
  40c898:	ea4f 6212 	mov.w	r2, r2, lsr #24
  40c89c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  40c8a0:	e047      	b.n	40c932 <L0+0x29e>
  40c8a2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
  40c8a6:	fa82 f54c 	uadd8	r5, r2, ip
  40c8aa:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
  40c8ae:	faa5 f58c 	sel	r5, r5, ip
  40c8b2:	d10a      	bne.n	40c8ca <L0+0x236>
  40c8b4:	b965      	cbnz	r5, 40c8d0 <L0+0x23c>
  40c8b6:	f851 3b04 	ldr.w	r3, [r1], #4
  40c8ba:	ea84 0402 	eor.w	r4, r4, r2
  40c8be:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
  40c8c2:	d10c      	bne.n	40c8de <L0+0x24a>
  40c8c4:	f850 2b04 	ldr.w	r2, [r0], #4
  40c8c8:	e7eb      	b.n	40c8a2 <L0+0x20e>
  40c8ca:	ea4f 4313 	mov.w	r3, r3, lsr #16
  40c8ce:	e030      	b.n	40c932 <L0+0x29e>
  40c8d0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
  40c8d4:	d128      	bne.n	40c928 <L0+0x294>
  40c8d6:	880b      	ldrh	r3, [r1, #0]
  40c8d8:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40c8dc:	e029      	b.n	40c932 <L0+0x29e>
  40c8de:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40c8e2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
  40c8e6:	e024      	b.n	40c932 <L0+0x29e>
  40c8e8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
  40c8ec:	fa82 f54c 	uadd8	r5, r2, ip
  40c8f0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
  40c8f4:	faa5 f58c 	sel	r5, r5, ip
  40c8f8:	d10a      	bne.n	40c910 <L0+0x27c>
  40c8fa:	b965      	cbnz	r5, 40c916 <L0+0x282>
  40c8fc:	f851 3b04 	ldr.w	r3, [r1], #4
  40c900:	ea84 0402 	eor.w	r4, r4, r2
  40c904:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
  40c908:	d109      	bne.n	40c91e <L0+0x28a>
  40c90a:	f850 2b04 	ldr.w	r2, [r0], #4
  40c90e:	e7eb      	b.n	40c8e8 <L0+0x254>
  40c910:	ea4f 6313 	mov.w	r3, r3, lsr #24
  40c914:	e00d      	b.n	40c932 <L0+0x29e>
  40c916:	f015 0fff 	tst.w	r5, #255	; 0xff
  40c91a:	d105      	bne.n	40c928 <L0+0x294>
  40c91c:	680b      	ldr	r3, [r1, #0]
  40c91e:	ea4f 2212 	mov.w	r2, r2, lsr #8
  40c922:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40c926:	e004      	b.n	40c932 <L0+0x29e>
  40c928:	f04f 0000 	mov.w	r0, #0
  40c92c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40c930:	4770      	bx	lr
  40c932:	ba12      	rev	r2, r2
  40c934:	ba1b      	rev	r3, r3
  40c936:	fa82 f44c 	uadd8	r4, r2, ip
  40c93a:	ea82 0403 	eor.w	r4, r2, r3
  40c93e:	faa4 f58c 	sel	r5, r4, ip
  40c942:	fab5 f485 	clz	r4, r5
  40c946:	fa02 f204 	lsl.w	r2, r2, r4
  40c94a:	fa03 f304 	lsl.w	r3, r3, r4
  40c94e:	ea4f 6012 	mov.w	r0, r2, lsr #24
  40c952:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40c956:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
  40c95a:	4770      	bx	lr

Disassembly of section .text.wc_Sha512Final%62:

0040c960 <wc_Sha512Final>:

int wc_Sha512Final(Sha512* sha512, byte* hash)
{
    int ret;

    if (sha512 == NULL || hash == NULL) {
  40c960:	2800      	cmp	r0, #0
  40c962:	f000 8120 	beq.w	40cba6 <.LBE801>
{
  40c966:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0040c96a <.LCFI7>:
  40c96a:	b083      	sub	sp, #12

0040c96c <.LCFI8>:
  40c96c:	468e      	mov	lr, r1
  40c96e:	4601      	mov	r1, r0

0040c970 <.LVL46>:
    if (sha512 == NULL || hash == NULL) {
  40c970:	f1be 0f00 	cmp.w	lr, #0
  40c974:	f000 8111 	beq.w	40cb9a <.LBE799>

0040c978 <.LBB762>:
    byte* local = (byte*)sha512->buffer;
  40c978:	f100 0358 	add.w	r3, r0, #88	; 0x58
  40c97c:	9301      	str	r3, [sp, #4]

0040c97e <.LVL48>:
    if (sha512 == NULL) {
  40c97e:	2800      	cmp	r0, #0
  40c980:	f000 810e 	beq.w	40cba0 <.LBB801>
    AddLength(sha512, sha512->buffLen);               /* before adding pads */
  40c984:	6800      	ldr	r0, [r0, #0]

0040c986 <.LBB764>:
    word64 tmp = sha512->loLen;
  40c986:	e9d1 2302 	ldrd	r2, r3, [r1, #8]

0040c98a <.LVL50>:
    if ( (sha512->loLen += len) < tmp)
  40c98a:	eb12 0a00 	adds.w	sl, r2, r0
  40c98e:	f143 0b00 	adc.w	fp, r3, #0
  40c992:	e9c1 ab02 	strd	sl, fp, [r1, #8]
  40c996:	459b      	cmp	fp, r3
  40c998:	bf08      	it	eq
  40c99a:	4592      	cmpeq	sl, r2
  40c99c:	d206      	bcs.n	40c9ac <.LVL52+0x4>
        sha512->hiLen++;                       /* carry low to high */
  40c99e:	e9d1 2304 	ldrd	r2, r3, [r1, #16]

0040c9a2 <.LVL51>:
  40c9a2:	3201      	adds	r2, #1
  40c9a4:	f143 0300 	adc.w	r3, r3, #0

0040c9a8 <.LVL52>:
  40c9a8:	e9c1 2304 	strd	r2, r3, [r1, #16]
  40c9ac:	468a      	mov	sl, r1
  40c9ae:	46f3      	mov	fp, lr

0040c9b0 <.LBE764>:
    local[sha512->buffLen++] = 0x80;  /* add 1 */
  40c9b0:	1c43      	adds	r3, r0, #1
  40c9b2:	600b      	str	r3, [r1, #0]
  40c9b4:	2380      	movs	r3, #128	; 0x80
  40c9b6:	9a01      	ldr	r2, [sp, #4]
  40c9b8:	5413      	strb	r3, [r2, r0]
    if (sha512->buffLen > SHA512_PAD_SIZE) {
  40c9ba:	6808      	ldr	r0, [r1, #0]
  40c9bc:	2870      	cmp	r0, #112	; 0x70
  40c9be:	d92f      	bls.n	40ca20 <.LVL61>

0040c9c0 <.LVL54>:
        XMEMSET(&local[sha512->buffLen], 0, SHA512_BLOCK_SIZE - sha512->buffLen);
  40c9c0:	1a1a      	subs	r2, r3, r0
  40c9c2:	2100      	movs	r1, #0

0040c9c4 <.LVL55>:
  40c9c4:	9b01      	ldr	r3, [sp, #4]
  40c9c6:	4418      	add	r0, r3
  40c9c8:	f004 f95a 	bl	410c80 <memset>

0040c9cc <.LVL56>:
        sha512->buffLen += SHA512_BLOCK_SIZE - sha512->buffLen;
  40c9cc:	4652      	mov	r2, sl
  40c9ce:	2380      	movs	r3, #128	; 0x80
  40c9d0:	f842 3b50 	str.w	r3, [r2], #80

0040c9d4 <.LVL57>:
  40c9d4:	f10a 0ed0 	add.w	lr, sl, #208	; 0xd0

0040c9d8 <.LBB766>:
        out[i] = ByteReverseWord64(in[i]);
  40c9d8:	6893      	ldr	r3, [r2, #8]
  40c9da:	68d1      	ldr	r1, [r2, #12]

0040c9dc <.LBB768>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40c9dc:	0a18      	lsrs	r0, r3, #8
  40c9de:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  40c9e2:	021b      	lsls	r3, r3, #8
  40c9e4:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  40c9e8:	4303      	orrs	r3, r0

0040c9ea <.LBE770>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  40c9ea:	ea4f 4733 	mov.w	r7, r3, ror #16
  40c9ee:	2600      	movs	r6, #0

0040c9f0 <.LBB772>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40c9f0:	0a0b      	lsrs	r3, r1, #8
  40c9f2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  40c9f6:	0209      	lsls	r1, r1, #8
  40c9f8:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  40c9fc:	430b      	orrs	r3, r1

0040c9fe <.LBB774>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40c9fe:	ea4f 4333 	mov.w	r3, r3, ror #16

0040ca02 <.LBE772>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  40ca02:	ea46 0003 	orr.w	r0, r6, r3
  40ca06:	4639      	mov	r1, r7

0040ca08 <.LBE768>:
        out[i] = ByteReverseWord64(in[i]);
  40ca08:	e9e2 0102 	strd	r0, r1, [r2, #8]!
    for (i = 0; i < count; i++)
  40ca0c:	4572      	cmp	r2, lr
  40ca0e:	d1e3      	bne.n	40c9d8 <.LBB766>

0040ca10 <.LBE766>:
        ret = Transform(sha512);
  40ca10:	4650      	mov	r0, sl
  40ca12:	f7f3 fbbf 	bl	400194 <_etext>

0040ca16 <.LVL60>:
        if (ret != 0)
  40ca16:	4602      	mov	r2, r0
  40ca18:	2800      	cmp	r0, #0
  40ca1a:	d151      	bne.n	40cac0 <.LBE762>
        sha512->buffLen = 0;
  40ca1c:	f8ca 6000 	str.w	r6, [sl]

0040ca20 <.LVL61>:
    XMEMSET(&local[sha512->buffLen], 0, SHA512_PAD_SIZE - sha512->buffLen);
  40ca20:	f8da 0000 	ldr.w	r0, [sl]
  40ca24:	f1c0 0270 	rsb	r2, r0, #112	; 0x70
  40ca28:	2100      	movs	r1, #0
  40ca2a:	9b01      	ldr	r3, [sp, #4]
  40ca2c:	4418      	add	r0, r3
  40ca2e:	f004 f927 	bl	410c80 <memset>

0040ca32 <.LVL62>:
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
  40ca32:	f8da 7008 	ldr.w	r7, [sl, #8]
  40ca36:	f8da 600c 	ldr.w	r6, [sl, #12]
                                                         (sha512->hiLen << 3);
  40ca3a:	f8da 2010 	ldr.w	r2, [sl, #16]
  40ca3e:	f8da 3014 	ldr.w	r3, [sl, #20]
  40ca42:	00d9      	lsls	r1, r3, #3
  40ca44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
  40ca48:	00d0      	lsls	r0, r2, #3
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
  40ca4a:	0f72      	lsrs	r2, r6, #29
  40ca4c:	2300      	movs	r3, #0
  40ca4e:	1812      	adds	r2, r2, r0
  40ca50:	414b      	adcs	r3, r1
  40ca52:	e9ca 2304 	strd	r2, r3, [sl, #16]
    sha512->loLen = sha512->loLen << 3;
  40ca56:	00f6      	lsls	r6, r6, #3
  40ca58:	ea46 7657 	orr.w	r6, r6, r7, lsr #29
  40ca5c:	00ff      	lsls	r7, r7, #3
  40ca5e:	f8ca 7008 	str.w	r7, [sl, #8]
  40ca62:	f8ca 600c 	str.w	r6, [sl, #12]

0040ca66 <.LVL63>:
  40ca66:	f10a 0250 	add.w	r2, sl, #80	; 0x50
  40ca6a:	f10a 06c0 	add.w	r6, sl, #192	; 0xc0

0040ca6e <.LBB776>:
        out[i] = ByteReverseWord64(in[i]);
  40ca6e:	6893      	ldr	r3, [r2, #8]
  40ca70:	68d1      	ldr	r1, [r2, #12]

0040ca72 <.LBB778>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40ca72:	0a18      	lsrs	r0, r3, #8
  40ca74:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  40ca78:	021b      	lsls	r3, r3, #8
  40ca7a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  40ca7e:	4303      	orrs	r3, r0

0040ca80 <.LBE780>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  40ca80:	ea4f 4533 	mov.w	r5, r3, ror #16
  40ca84:	2400      	movs	r4, #0

0040ca86 <.LBB782>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40ca86:	0a0b      	lsrs	r3, r1, #8
  40ca88:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  40ca8c:	0209      	lsls	r1, r1, #8
  40ca8e:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  40ca92:	430b      	orrs	r3, r1

0040ca94 <.LBB784>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40ca94:	ea4f 4333 	mov.w	r3, r3, ror #16

0040ca98 <.LBE782>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  40ca98:	ea44 0003 	orr.w	r0, r4, r3
  40ca9c:	4629      	mov	r1, r5

0040ca9e <.LBE778>:
        out[i] = ByteReverseWord64(in[i]);
  40ca9e:	e9e2 0102 	strd	r0, r1, [r2, #8]!
    for (i = 0; i < count; i++)
  40caa2:	42b2      	cmp	r2, r6
  40caa4:	d1e3      	bne.n	40ca6e <.LBB776>

0040caa6 <.LBE776>:
    sha512->buffer[SHA512_BLOCK_SIZE / sizeof(word64) - 2] = sha512->hiLen;
  40caa6:	e9da 2304 	ldrd	r2, r3, [sl, #16]
  40caaa:	e9ca 2332 	strd	r2, r3, [sl, #200]	; 0xc8
    sha512->buffer[SHA512_BLOCK_SIZE / sizeof(word64) - 1] = sha512->loLen;
  40caae:	e9da 2302 	ldrd	r2, r3, [sl, #8]
  40cab2:	e9ca 2334 	strd	r2, r3, [sl, #208]	; 0xd0
    ret = Transform(sha512);
  40cab6:	4650      	mov	r0, sl
  40cab8:	f7f3 fb6c 	bl	400194 <_etext>

0040cabc <.LVL66>:
    if (ret != 0)
  40cabc:	4602      	mov	r2, r0
  40cabe:	b118      	cbz	r0, 40cac8 <.LBB798>

0040cac0 <.LBE762>:
        return ret;

    XMEMCPY(hash, sha512->digest, SHA512_DIGEST_SIZE);

    return InitSha512(sha512);  /* reset state */
}
  40cac0:	4610      	mov	r0, r2
  40cac2:	b003      	add	sp, #12

0040cac4 <.LCFI9>:
  40cac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040cac8 <.LBB798>:
        ByteReverseWords64(sha512->digest, sha512->digest, SHA512_DIGEST_SIZE);
  40cac8:	f10a 0618 	add.w	r6, sl, #24

0040cacc <.LVL69>:
  40cacc:	f10a 0410 	add.w	r4, sl, #16
  40cad0:	f10a 0550 	add.w	r5, sl, #80	; 0x50

0040cad4 <.LBB786>:
        out[i] = ByteReverseWord64(in[i]);
  40cad4:	68a3      	ldr	r3, [r4, #8]
  40cad6:	68e1      	ldr	r1, [r4, #12]

0040cad8 <.LBB788>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40cad8:	0a18      	lsrs	r0, r3, #8
  40cada:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  40cade:	021b      	lsls	r3, r3, #8
  40cae0:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  40cae4:	4303      	orrs	r3, r0

0040cae6 <.LBE790>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  40cae6:	ea4f 4933 	mov.w	r9, r3, ror #16
  40caea:	f04f 0800 	mov.w	r8, #0

0040caee <.LBB792>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40caee:	0a0b      	lsrs	r3, r1, #8
  40caf0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  40caf4:	0209      	lsls	r1, r1, #8
  40caf6:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  40cafa:	430b      	orrs	r3, r1

0040cafc <.LBB794>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40cafc:	ea4f 4333 	mov.w	r3, r3, ror #16

0040cb00 <.LBE792>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  40cb00:	ea48 0003 	orr.w	r0, r8, r3
  40cb04:	4649      	mov	r1, r9

0040cb06 <.LBE788>:
        out[i] = ByteReverseWord64(in[i]);
  40cb06:	e9e4 0102 	strd	r0, r1, [r4, #8]!
    for (i = 0; i < count; i++)
  40cb0a:	42ac      	cmp	r4, r5
  40cb0c:	d1e2      	bne.n	40cad4 <.LBB786>

0040cb0e <.LBE786>:
    XMEMCPY(hash, sha512->digest, SHA512_DIGEST_SIZE);
  40cb0e:	4633      	mov	r3, r6
  40cb10:	46de      	mov	lr, fp
  40cb12:	3640      	adds	r6, #64	; 0x40

0040cb14 <.LVL72>:
  40cb14:	681d      	ldr	r5, [r3, #0]
  40cb16:	685c      	ldr	r4, [r3, #4]
  40cb18:	6898      	ldr	r0, [r3, #8]
  40cb1a:	68d9      	ldr	r1, [r3, #12]
  40cb1c:	f8ce 5000 	str.w	r5, [lr]
  40cb20:	f8ce 4004 	str.w	r4, [lr, #4]
  40cb24:	f8ce 0008 	str.w	r0, [lr, #8]
  40cb28:	f8ce 100c 	str.w	r1, [lr, #12]
  40cb2c:	3310      	adds	r3, #16
  40cb2e:	f10e 0e10 	add.w	lr, lr, #16
  40cb32:	42b3      	cmp	r3, r6
  40cb34:	d1ee      	bne.n	40cb14 <.LVL72>

0040cb36 <.LBB799>:
    sha512->digest[0] = W64LIT(0x6a09e667f3bcc908);
  40cb36:	a11e      	add	r1, pc, #120	; (adr r1, 40cbb0 <.LVL78+0x4>)
  40cb38:	e9d1 0100 	ldrd	r0, r1, [r1]
  40cb3c:	e9ca 0106 	strd	r0, r1, [sl, #24]
    sha512->digest[1] = W64LIT(0xbb67ae8584caa73b);
  40cb40:	a11d      	add	r1, pc, #116	; (adr r1, 40cbb8 <.LVL78+0xc>)
  40cb42:	e9d1 0100 	ldrd	r0, r1, [r1]
  40cb46:	e9ca 0108 	strd	r0, r1, [sl, #32]
    sha512->digest[2] = W64LIT(0x3c6ef372fe94f82b);
  40cb4a:	a11d      	add	r1, pc, #116	; (adr r1, 40cbc0 <.LVL78+0x14>)
  40cb4c:	e9d1 0100 	ldrd	r0, r1, [r1]
  40cb50:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
    sha512->digest[3] = W64LIT(0xa54ff53a5f1d36f1);
  40cb54:	a11c      	add	r1, pc, #112	; (adr r1, 40cbc8 <.LVL78+0x1c>)
  40cb56:	e9d1 0100 	ldrd	r0, r1, [r1]
  40cb5a:	e9ca 010c 	strd	r0, r1, [sl, #48]	; 0x30
    sha512->digest[4] = W64LIT(0x510e527fade682d1);
  40cb5e:	a11c      	add	r1, pc, #112	; (adr r1, 40cbd0 <.LVL78+0x24>)
  40cb60:	e9d1 0100 	ldrd	r0, r1, [r1]
  40cb64:	e9ca 010e 	strd	r0, r1, [sl, #56]	; 0x38
    sha512->digest[5] = W64LIT(0x9b05688c2b3e6c1f);
  40cb68:	a11b      	add	r1, pc, #108	; (adr r1, 40cbd8 <.LVL78+0x2c>)
  40cb6a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40cb6e:	e9ca 0110 	strd	r0, r1, [sl, #64]	; 0x40
    sha512->digest[6] = W64LIT(0x1f83d9abfb41bd6b);
  40cb72:	a11b      	add	r1, pc, #108	; (adr r1, 40cbe0 <.LVL78+0x34>)
  40cb74:	e9d1 0100 	ldrd	r0, r1, [r1]
  40cb78:	e9ca 0112 	strd	r0, r1, [sl, #72]	; 0x48
    sha512->digest[7] = W64LIT(0x5be0cd19137e2179);
  40cb7c:	a11a      	add	r1, pc, #104	; (adr r1, 40cbe8 <.LVL78+0x3c>)
  40cb7e:	e9d1 0100 	ldrd	r0, r1, [r1]
  40cb82:	e9ca 0114 	strd	r0, r1, [sl, #80]	; 0x50
    sha512->buffLen = 0;
  40cb86:	2300      	movs	r3, #0
  40cb88:	f8ca 3000 	str.w	r3, [sl]
    sha512->loLen   = 0;
  40cb8c:	2000      	movs	r0, #0
  40cb8e:	2100      	movs	r1, #0
  40cb90:	e9ca 0102 	strd	r0, r1, [sl, #8]
    sha512->hiLen   = 0;
  40cb94:	e9ca 0104 	strd	r0, r1, [sl, #16]
  40cb98:	e792      	b.n	40cac0 <.LBE762>

0040cb9a <.LBE799>:
        return BAD_FUNC_ARG;
  40cb9a:	f06f 02ac 	mvn.w	r2, #172	; 0xac
  40cb9e:	e78f      	b.n	40cac0 <.LBE762>

0040cba0 <.LBB801>:
        return BAD_FUNC_ARG;
  40cba0:	f06f 02ac 	mvn.w	r2, #172	; 0xac

0040cba4 <.LVL76>:
  40cba4:	e78c      	b.n	40cac0 <.LBE762>

0040cba6 <.LBE801>:
        return BAD_FUNC_ARG;
  40cba6:	f06f 02ac 	mvn.w	r2, #172	; 0xac
}
  40cbaa:	4610      	mov	r0, r2

0040cbac <.LVL78>:
  40cbac:	4770      	bx	lr
  40cbae:	bf00      	nop
  40cbb0:	f3bcc908 	.word	0xf3bcc908
  40cbb4:	6a09e667 	.word	0x6a09e667
  40cbb8:	84caa73b 	.word	0x84caa73b
  40cbbc:	bb67ae85 	.word	0xbb67ae85
  40cbc0:	fe94f82b 	.word	0xfe94f82b
  40cbc4:	3c6ef372 	.word	0x3c6ef372
  40cbc8:	5f1d36f1 	.word	0x5f1d36f1
  40cbcc:	a54ff53a 	.word	0xa54ff53a
  40cbd0:	ade682d1 	.word	0xade682d1
  40cbd4:	510e527f 	.word	0x510e527f
  40cbd8:	2b3e6c1f 	.word	0x2b3e6c1f
  40cbdc:	9b05688c 	.word	0x9b05688c
  40cbe0:	fb41bd6b 	.word	0xfb41bd6b
  40cbe4:	1f83d9ab 	.word	0x1f83d9ab
  40cbe8:	137e2179 	.word	0x137e2179
  40cbec:	5be0cd19 	.word	0x5be0cd19

Disassembly of section .text.wc_Sha384Final%63:

0040cbf0 <wc_Sha384Final>:

int wc_Sha384Final(Sha384* sha384, byte* hash)
{
    int ret;

    if (sha384 == NULL || hash == NULL) {
  40cbf0:	2800      	cmp	r0, #0
  40cbf2:	f000 8120 	beq.w	40ce36 <.LBE922>
{
  40cbf6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0040cbfa <.LCFI14>:
  40cbfa:	b083      	sub	sp, #12

0040cbfc <.LCFI15>:
  40cbfc:	468e      	mov	lr, r1
  40cbfe:	4601      	mov	r1, r0

0040cc00 <.LVL105>:
    if (sha384 == NULL || hash == NULL) {
  40cc00:	f1be 0f00 	cmp.w	lr, #0
  40cc04:	f000 8111 	beq.w	40ce2a <.LBE920>

0040cc08 <.LBB883>:
    byte* local = (byte*)sha512->buffer;
  40cc08:	f100 0358 	add.w	r3, r0, #88	; 0x58
  40cc0c:	9301      	str	r3, [sp, #4]

0040cc0e <.LVL107>:
    if (sha512 == NULL) {
  40cc0e:	2800      	cmp	r0, #0
  40cc10:	f000 810e 	beq.w	40ce30 <.LBB922>
    AddLength(sha512, sha512->buffLen);               /* before adding pads */
  40cc14:	6800      	ldr	r0, [r0, #0]

0040cc16 <.LBB885>:
    word64 tmp = sha512->loLen;
  40cc16:	e9d1 2302 	ldrd	r2, r3, [r1, #8]

0040cc1a <.LVL109>:
    if ( (sha512->loLen += len) < tmp)
  40cc1a:	eb12 0a00 	adds.w	sl, r2, r0
  40cc1e:	f143 0b00 	adc.w	fp, r3, #0
  40cc22:	e9c1 ab02 	strd	sl, fp, [r1, #8]
  40cc26:	459b      	cmp	fp, r3
  40cc28:	bf08      	it	eq
  40cc2a:	4592      	cmpeq	sl, r2
  40cc2c:	d206      	bcs.n	40cc3c <.LVL111+0x4>
        sha512->hiLen++;                       /* carry low to high */
  40cc2e:	e9d1 2304 	ldrd	r2, r3, [r1, #16]

0040cc32 <.LVL110>:
  40cc32:	3201      	adds	r2, #1
  40cc34:	f143 0300 	adc.w	r3, r3, #0

0040cc38 <.LVL111>:
  40cc38:	e9c1 2304 	strd	r2, r3, [r1, #16]
  40cc3c:	468a      	mov	sl, r1
  40cc3e:	46f3      	mov	fp, lr

0040cc40 <.LBE885>:
    local[sha512->buffLen++] = 0x80;  /* add 1 */
  40cc40:	1c43      	adds	r3, r0, #1
  40cc42:	600b      	str	r3, [r1, #0]
  40cc44:	2380      	movs	r3, #128	; 0x80
  40cc46:	9a01      	ldr	r2, [sp, #4]
  40cc48:	5413      	strb	r3, [r2, r0]
    if (sha512->buffLen > SHA512_PAD_SIZE) {
  40cc4a:	6808      	ldr	r0, [r1, #0]
  40cc4c:	2870      	cmp	r0, #112	; 0x70
  40cc4e:	d92f      	bls.n	40ccb0 <.LVL120>

0040cc50 <.LVL113>:
        XMEMSET(&local[sha512->buffLen], 0, SHA512_BLOCK_SIZE - sha512->buffLen);
  40cc50:	1a1a      	subs	r2, r3, r0
  40cc52:	2100      	movs	r1, #0

0040cc54 <.LVL114>:
  40cc54:	9b01      	ldr	r3, [sp, #4]
  40cc56:	4418      	add	r0, r3
  40cc58:	f004 f812 	bl	410c80 <memset>

0040cc5c <.LVL115>:
        sha512->buffLen += SHA512_BLOCK_SIZE - sha512->buffLen;
  40cc5c:	4652      	mov	r2, sl
  40cc5e:	2380      	movs	r3, #128	; 0x80
  40cc60:	f842 3b50 	str.w	r3, [r2], #80

0040cc64 <.LVL116>:
  40cc64:	f10a 0ed0 	add.w	lr, sl, #208	; 0xd0

0040cc68 <.LBB887>:
        out[i] = ByteReverseWord64(in[i]);
  40cc68:	6893      	ldr	r3, [r2, #8]
  40cc6a:	68d1      	ldr	r1, [r2, #12]

0040cc6c <.LBB889>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40cc6c:	0a18      	lsrs	r0, r3, #8
  40cc6e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  40cc72:	021b      	lsls	r3, r3, #8
  40cc74:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  40cc78:	4303      	orrs	r3, r0

0040cc7a <.LBE891>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  40cc7a:	ea4f 4733 	mov.w	r7, r3, ror #16
  40cc7e:	2600      	movs	r6, #0

0040cc80 <.LBB893>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40cc80:	0a0b      	lsrs	r3, r1, #8
  40cc82:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  40cc86:	0209      	lsls	r1, r1, #8
  40cc88:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  40cc8c:	430b      	orrs	r3, r1

0040cc8e <.LBB895>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40cc8e:	ea4f 4333 	mov.w	r3, r3, ror #16

0040cc92 <.LBE893>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  40cc92:	ea46 0003 	orr.w	r0, r6, r3
  40cc96:	4639      	mov	r1, r7

0040cc98 <.LBE889>:
        out[i] = ByteReverseWord64(in[i]);
  40cc98:	e9e2 0102 	strd	r0, r1, [r2, #8]!
    for (i = 0; i < count; i++)
  40cc9c:	4572      	cmp	r2, lr
  40cc9e:	d1e3      	bne.n	40cc68 <.LBB887>

0040cca0 <.LBE887>:
        ret = Transform(sha512);
  40cca0:	4650      	mov	r0, sl
  40cca2:	f7f3 fa77 	bl	400194 <_etext>

0040cca6 <.LVL119>:
        if (ret != 0)
  40cca6:	4602      	mov	r2, r0
  40cca8:	2800      	cmp	r0, #0
  40ccaa:	d151      	bne.n	40cd50 <.LBE883>
        sha512->buffLen = 0;
  40ccac:	f8ca 6000 	str.w	r6, [sl]

0040ccb0 <.LVL120>:
    XMEMSET(&local[sha512->buffLen], 0, SHA512_PAD_SIZE - sha512->buffLen);
  40ccb0:	f8da 0000 	ldr.w	r0, [sl]
  40ccb4:	f1c0 0270 	rsb	r2, r0, #112	; 0x70
  40ccb8:	2100      	movs	r1, #0
  40ccba:	9b01      	ldr	r3, [sp, #4]
  40ccbc:	4418      	add	r0, r3
  40ccbe:	f003 ffdf 	bl	410c80 <memset>

0040ccc2 <.LVL121>:
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
  40ccc2:	f8da 7008 	ldr.w	r7, [sl, #8]
  40ccc6:	f8da 600c 	ldr.w	r6, [sl, #12]
                                                         (sha512->hiLen << 3);
  40ccca:	f8da 2010 	ldr.w	r2, [sl, #16]
  40ccce:	f8da 3014 	ldr.w	r3, [sl, #20]
  40ccd2:	00d9      	lsls	r1, r3, #3
  40ccd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
  40ccd8:	00d0      	lsls	r0, r2, #3
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
  40ccda:	0f72      	lsrs	r2, r6, #29
  40ccdc:	2300      	movs	r3, #0
  40ccde:	1812      	adds	r2, r2, r0
  40cce0:	414b      	adcs	r3, r1
  40cce2:	e9ca 2304 	strd	r2, r3, [sl, #16]
    sha512->loLen = sha512->loLen << 3;
  40cce6:	00f6      	lsls	r6, r6, #3
  40cce8:	ea46 7657 	orr.w	r6, r6, r7, lsr #29
  40ccec:	00ff      	lsls	r7, r7, #3
  40ccee:	f8ca 7008 	str.w	r7, [sl, #8]
  40ccf2:	f8ca 600c 	str.w	r6, [sl, #12]

0040ccf6 <.LVL122>:
  40ccf6:	f10a 0250 	add.w	r2, sl, #80	; 0x50
  40ccfa:	f10a 06c0 	add.w	r6, sl, #192	; 0xc0

0040ccfe <.LBB897>:
        out[i] = ByteReverseWord64(in[i]);
  40ccfe:	6893      	ldr	r3, [r2, #8]
  40cd00:	68d1      	ldr	r1, [r2, #12]

0040cd02 <.LBB899>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40cd02:	0a18      	lsrs	r0, r3, #8
  40cd04:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  40cd08:	021b      	lsls	r3, r3, #8
  40cd0a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  40cd0e:	4303      	orrs	r3, r0

0040cd10 <.LBE901>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  40cd10:	ea4f 4533 	mov.w	r5, r3, ror #16
  40cd14:	2400      	movs	r4, #0

0040cd16 <.LBB903>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40cd16:	0a0b      	lsrs	r3, r1, #8
  40cd18:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  40cd1c:	0209      	lsls	r1, r1, #8
  40cd1e:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  40cd22:	430b      	orrs	r3, r1

0040cd24 <.LBB905>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40cd24:	ea4f 4333 	mov.w	r3, r3, ror #16

0040cd28 <.LBE903>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  40cd28:	ea44 0003 	orr.w	r0, r4, r3
  40cd2c:	4629      	mov	r1, r5

0040cd2e <.LBE899>:
        out[i] = ByteReverseWord64(in[i]);
  40cd2e:	e9e2 0102 	strd	r0, r1, [r2, #8]!
    for (i = 0; i < count; i++)
  40cd32:	42b2      	cmp	r2, r6
  40cd34:	d1e3      	bne.n	40ccfe <.LBB897>

0040cd36 <.LBE897>:
    sha512->buffer[SHA512_BLOCK_SIZE / sizeof(word64) - 2] = sha512->hiLen;
  40cd36:	e9da 2304 	ldrd	r2, r3, [sl, #16]
  40cd3a:	e9ca 2332 	strd	r2, r3, [sl, #200]	; 0xc8
    sha512->buffer[SHA512_BLOCK_SIZE / sizeof(word64) - 1] = sha512->loLen;
  40cd3e:	e9da 2302 	ldrd	r2, r3, [sl, #8]
  40cd42:	e9ca 2334 	strd	r2, r3, [sl, #208]	; 0xd0
    ret = Transform(sha512);
  40cd46:	4650      	mov	r0, sl
  40cd48:	f7f3 fa24 	bl	400194 <_etext>

0040cd4c <.LVL125>:
    if (ret != 0)
  40cd4c:	4602      	mov	r2, r0
  40cd4e:	b118      	cbz	r0, 40cd58 <.LBB919>

0040cd50 <.LBE883>:
        return ret;

    XMEMCPY(hash, sha384->digest, SHA384_DIGEST_SIZE);

    return InitSha384(sha384);  /* reset state */
}
  40cd50:	4610      	mov	r0, r2
  40cd52:	b003      	add	sp, #12

0040cd54 <.LCFI16>:
  40cd54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040cd58 <.LBB919>:
        ByteReverseWords64(sha512->digest, sha512->digest, SHA512_DIGEST_SIZE);
  40cd58:	f10a 0618 	add.w	r6, sl, #24

0040cd5c <.LVL128>:
  40cd5c:	f10a 0410 	add.w	r4, sl, #16
  40cd60:	f10a 0550 	add.w	r5, sl, #80	; 0x50

0040cd64 <.LBB907>:
        out[i] = ByteReverseWord64(in[i]);
  40cd64:	68a3      	ldr	r3, [r4, #8]
  40cd66:	68e1      	ldr	r1, [r4, #12]

0040cd68 <.LBB909>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40cd68:	0a18      	lsrs	r0, r3, #8
  40cd6a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  40cd6e:	021b      	lsls	r3, r3, #8
  40cd70:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  40cd74:	4303      	orrs	r3, r0

0040cd76 <.LBE911>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  40cd76:	ea4f 4933 	mov.w	r9, r3, ror #16
  40cd7a:	f04f 0800 	mov.w	r8, #0

0040cd7e <.LBB913>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40cd7e:	0a0b      	lsrs	r3, r1, #8
  40cd80:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  40cd84:	0209      	lsls	r1, r1, #8
  40cd86:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  40cd8a:	430b      	orrs	r3, r1

0040cd8c <.LBB915>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40cd8c:	ea4f 4333 	mov.w	r3, r3, ror #16

0040cd90 <.LBE913>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  40cd90:	ea48 0003 	orr.w	r0, r8, r3
  40cd94:	4649      	mov	r1, r9

0040cd96 <.LBE909>:
        out[i] = ByteReverseWord64(in[i]);
  40cd96:	e9e4 0102 	strd	r0, r1, [r4, #8]!
    for (i = 0; i < count; i++)
  40cd9a:	42ac      	cmp	r4, r5
  40cd9c:	d1e2      	bne.n	40cd64 <.LBB907>

0040cd9e <.LBE907>:
    XMEMCPY(hash, sha384->digest, SHA384_DIGEST_SIZE);
  40cd9e:	4633      	mov	r3, r6
  40cda0:	46de      	mov	lr, fp
  40cda2:	3630      	adds	r6, #48	; 0x30

0040cda4 <.LVL131>:
  40cda4:	681d      	ldr	r5, [r3, #0]
  40cda6:	685c      	ldr	r4, [r3, #4]
  40cda8:	6898      	ldr	r0, [r3, #8]
  40cdaa:	68d9      	ldr	r1, [r3, #12]
  40cdac:	f8ce 5000 	str.w	r5, [lr]
  40cdb0:	f8ce 4004 	str.w	r4, [lr, #4]
  40cdb4:	f8ce 0008 	str.w	r0, [lr, #8]
  40cdb8:	f8ce 100c 	str.w	r1, [lr, #12]
  40cdbc:	3310      	adds	r3, #16
  40cdbe:	f10e 0e10 	add.w	lr, lr, #16
  40cdc2:	42b3      	cmp	r3, r6
  40cdc4:	d1ee      	bne.n	40cda4 <.LVL131>

0040cdc6 <.LBB920>:
    sha384->digest[0] = W64LIT(0xcbbb9d5dc1059ed8);
  40cdc6:	a11e      	add	r1, pc, #120	; (adr r1, 40ce40 <.LVL137+0x4>)
  40cdc8:	e9d1 0100 	ldrd	r0, r1, [r1]
  40cdcc:	e9ca 0106 	strd	r0, r1, [sl, #24]
    sha384->digest[1] = W64LIT(0x629a292a367cd507);
  40cdd0:	a11d      	add	r1, pc, #116	; (adr r1, 40ce48 <.LVL137+0xc>)
  40cdd2:	e9d1 0100 	ldrd	r0, r1, [r1]
  40cdd6:	e9ca 0108 	strd	r0, r1, [sl, #32]
    sha384->digest[2] = W64LIT(0x9159015a3070dd17);
  40cdda:	a11d      	add	r1, pc, #116	; (adr r1, 40ce50 <.LVL137+0x14>)
  40cddc:	e9d1 0100 	ldrd	r0, r1, [r1]
  40cde0:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
    sha384->digest[3] = W64LIT(0x152fecd8f70e5939);
  40cde4:	a11c      	add	r1, pc, #112	; (adr r1, 40ce58 <.LVL137+0x1c>)
  40cde6:	e9d1 0100 	ldrd	r0, r1, [r1]
  40cdea:	e9ca 010c 	strd	r0, r1, [sl, #48]	; 0x30
    sha384->digest[4] = W64LIT(0x67332667ffc00b31);
  40cdee:	a11c      	add	r1, pc, #112	; (adr r1, 40ce60 <.LVL137+0x24>)
  40cdf0:	e9d1 0100 	ldrd	r0, r1, [r1]
  40cdf4:	e9ca 010e 	strd	r0, r1, [sl, #56]	; 0x38
    sha384->digest[5] = W64LIT(0x8eb44a8768581511);
  40cdf8:	a11b      	add	r1, pc, #108	; (adr r1, 40ce68 <.LVL137+0x2c>)
  40cdfa:	e9d1 0100 	ldrd	r0, r1, [r1]
  40cdfe:	e9ca 0110 	strd	r0, r1, [sl, #64]	; 0x40
    sha384->digest[6] = W64LIT(0xdb0c2e0d64f98fa7);
  40ce02:	a11b      	add	r1, pc, #108	; (adr r1, 40ce70 <.LVL137+0x34>)
  40ce04:	e9d1 0100 	ldrd	r0, r1, [r1]
  40ce08:	e9ca 0112 	strd	r0, r1, [sl, #72]	; 0x48
    sha384->digest[7] = W64LIT(0x47b5481dbefa4fa4);
  40ce0c:	a11a      	add	r1, pc, #104	; (adr r1, 40ce78 <.LVL137+0x3c>)
  40ce0e:	e9d1 0100 	ldrd	r0, r1, [r1]
  40ce12:	e9ca 0114 	strd	r0, r1, [sl, #80]	; 0x50
    sha384->buffLen = 0;
  40ce16:	2300      	movs	r3, #0
  40ce18:	f8ca 3000 	str.w	r3, [sl]
    sha384->loLen   = 0;
  40ce1c:	2000      	movs	r0, #0
  40ce1e:	2100      	movs	r1, #0
  40ce20:	e9ca 0102 	strd	r0, r1, [sl, #8]
    sha384->hiLen   = 0;
  40ce24:	e9ca 0104 	strd	r0, r1, [sl, #16]
  40ce28:	e792      	b.n	40cd50 <.LBE883>

0040ce2a <.LBE920>:
        return BAD_FUNC_ARG;
  40ce2a:	f06f 02ac 	mvn.w	r2, #172	; 0xac
  40ce2e:	e78f      	b.n	40cd50 <.LBE883>

0040ce30 <.LBB922>:
        return BAD_FUNC_ARG;
  40ce30:	f06f 02ac 	mvn.w	r2, #172	; 0xac

0040ce34 <.LVL135>:
  40ce34:	e78c      	b.n	40cd50 <.LBE883>

0040ce36 <.LBE922>:
        return BAD_FUNC_ARG;
  40ce36:	f06f 02ac 	mvn.w	r2, #172	; 0xac
}
  40ce3a:	4610      	mov	r0, r2

0040ce3c <.LVL137>:
  40ce3c:	4770      	bx	lr
  40ce3e:	bf00      	nop
  40ce40:	c1059ed8 	.word	0xc1059ed8
  40ce44:	cbbb9d5d 	.word	0xcbbb9d5d
  40ce48:	367cd507 	.word	0x367cd507
  40ce4c:	629a292a 	.word	0x629a292a
  40ce50:	3070dd17 	.word	0x3070dd17
  40ce54:	9159015a 	.word	0x9159015a
  40ce58:	f70e5939 	.word	0xf70e5939
  40ce5c:	152fecd8 	.word	0x152fecd8
  40ce60:	ffc00b31 	.word	0xffc00b31
  40ce64:	67332667 	.word	0x67332667
  40ce68:	68581511 	.word	0x68581511
  40ce6c:	8eb44a87 	.word	0x8eb44a87
  40ce70:	64f98fa7 	.word	0x64f98fa7
  40ce74:	db0c2e0d 	.word	0xdb0c2e0d
  40ce78:	befa4fa4 	.word	0xbefa4fa4
  40ce7c:	47b5481d 	.word	0x47b5481d

Disassembly of section .rodata.K512%64:

0040ce80 <K512>:
  40ce80:	d728ae22 428a2f98 23ef65cd 71374491     ".(../.B.e.#.D7q
  40ce90:	ec4d3b2f b5c0fbcf 8189dbbc e9b5dba5     /;M.............
  40cea0:	f348b538 3956c25b b605d019 59f111f1     8.H.[.V9.......Y
  40ceb0:	af194f9b 923f82a4 da6d8118 ab1c5ed5     .O....?...m..^..
  40cec0:	a3030242 d807aa98 45706fbe 12835b01     B........opE.[..
  40ced0:	4ee4b28c 243185be d5ffb4e2 550c7dc3     ...N..1$.....}.U
  40cee0:	f27b896f 72be5d74 3b1696b1 80deb1fe     o.{.t].r...;....
  40cef0:	25c71235 9bdc06a7 cf692694 c19bf174     5..%.....&i.t...
  40cf00:	9ef14ad2 e49b69c1 384f25e3 efbe4786     .J...i...%O8.G..
  40cf10:	8b8cd5b5 0fc19dc6 77ac9c65 240ca1cc     ........e..w...$
  40cf20:	592b0275 2de92c6f 6ea6e483 4a7484aa     u.+Yo,.-...n..tJ
  40cf30:	bd41fbd4 5cb0a9dc 831153b5 76f988da     ..A....\.S.....v
  40cf40:	ee66dfab 983e5152 2db43210 a831c66d     ..f.RQ>..2.-m.1.
  40cf50:	98fb213f b00327c8 beef0ee4 bf597fc7     ?!...'........Y.
  40cf60:	3da88fc2 c6e00bf3 930aa725 d5a79147     ...=....%...G...
  40cf70:	e003826f 06ca6351 0a0e6e70 14292967     o...Qc..pn..g)).
  40cf80:	46d22ffc 27b70a85 5c26c926 2e1b2138     ./.F...'&.&\8!..
  40cf90:	5ac42aed 4d2c6dfc 9d95b3df 53380d13     .*.Z.m,M......8S
  40cfa0:	8baf63de 650a7354 3c77b2a8 766a0abb     .c..Ts.e..w<..jv
  40cfb0:	47edaee6 81c2c92e 1482353b 92722c85     ...G....;5...,r.
  40cfc0:	4cf10364 a2bfe8a1 bc423001 a81a664b     d..L.....0B.Kf..
  40cfd0:	d0f89791 c24b8b70 0654be30 c76c51a3     ....p.K.0.T..Ql.
  40cfe0:	d6ef5218 d192e819 5565a910 d6990624     .R........eU$...
  40cff0:	5771202a f40e3585 32bbd1b8 106aa070     * qW.5.....2p.j.
  40d000:	b8d2d0c8 19a4c116 5141ab53 1e376c08     ........S.AQ.l7.
  40d010:	df8eeb99 2748774c e19b48a8 34b0bcb5     ....LwH'.H.....4
  40d020:	c5c95a63 391c0cb3 e3418acb 4ed8aa4a     cZ.....9..A.J..N
  40d030:	7763e373 5b9cca4f d6b2b8a3 682e6ff3     s.cwO..[.....o.h
  40d040:	5defb2fc 748f82ee 43172f60 78a5636f     ...]...t`/.Coc.x
  40d050:	a1f0ab72 84c87814 1a6439ec 8cc70208     r....x...9d.....
  40d060:	23631e28 90befffa de82bde9 a4506ceb     (.c#.........lP.
  40d070:	b2c67915 bef9a3f7 e372532b c67178f2     .y......+Sr..xq.
  40d080:	ea26619c ca273ece 21c0c207 d186b8c7     .a&..>'....!....
  40d090:	cde0eb1e eada7dd6 ee6ed178 f57d4f7f     .....}..x.n..O}.
  40d0a0:	72176fba 06f067aa a2c898a6 0a637dc5     .o.r.g.......}c.
  40d0b0:	bef90dae 113f9804 131c471b 1b710b35     ......?..G..5.q.
  40d0c0:	23047d84 28db77f5 40c72493 32caab7b     .}.#.w.(.$.@{..2
  40d0d0:	15c9bebc 3c9ebe0a 9c100d4c 431d67c4     .......<L....g.C
  40d0e0:	cb3e42b6 4cc5d4be fc657e2a 597f299c     .B>....L*~e..).Y
  40d0f0:	3ad6faec 5fcb6fab 4a475817 6c44198c     ...:.o._.XGJ..Dl

Disassembly of section .text.wc_HmacSetKey%65:

0040d100 <wc_HmacSetKey>:
    return ret;
}


int wc_HmacSetKey(Hmac* hmac, int type, const byte* key, word32 length)
{
  40d100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0040d104 <.LCFI1>:
    byte*  op;
    word32 i, hmac_block_size = 0;
    int    ret = 0;
    void*  heap = NULL;

    if (hmac == NULL || (key == NULL && length != 0) ||
  40d104:	2800      	cmp	r0, #0
  40d106:	f000 80ef 	beq.w	40d2e8 <.LVL103>
  40d10a:	4616      	mov	r6, r2
  40d10c:	461f      	mov	r7, r3
  40d10e:	4604      	mov	r4, r0
  40d110:	b912      	cbnz	r2, 40d118 <.LCFI1+0x14>
  40d112:	2b00      	cmp	r3, #0
  40d114:	f040 80eb 	bne.w	40d2ee <.LVL103+0x6>
        !(type == MD5 || type == SHA    || type == SHA256 || type == SHA384
  40d118:	2908      	cmp	r1, #8
  40d11a:	f200 80eb 	bhi.w	40d2f4 <.LVL103+0xc>
  40d11e:	f240 13b7 	movw	r3, #439	; 0x1b7

0040d122 <.LVL31>:
  40d122:	40cb      	lsrs	r3, r1
    if (hmac == NULL || (key == NULL && length != 0) ||
  40d124:	f013 0f01 	tst.w	r3, #1
  40d128:	f000 80e9 	beq.w	40d2fe <.LVL105>
                      || type == SHA512 || type == BLAKE2B_ID
                      || type == SHA224)) {
        return BAD_FUNC_ARG;
    }

    hmac->innerHashKeyed = 0;
  40d12c:	2300      	movs	r3, #0
  40d12e:	f884 3225 	strb.w	r3, [r4, #549]	; 0x225
    hmac->macType = (byte)type;
  40d132:	f884 1224 	strb.w	r1, [r4, #548]	; 0x224

0040d136 <.LBB4>:
    switch (type) {
  40d136:	2905      	cmp	r1, #5
  40d138:	f200 80e7 	bhi.w	40d30a <.LBB9>
  40d13c:	e8df f001 	tbb	[pc, r1]
  40d140:	e51e1903 	.word	0xe51e1903
  40d144:	2328      	.short	0x2328
            ret = wc_InitMd5(&hmac->hash.md5);
  40d146:	4620      	mov	r0, r4

0040d148 <.LVL33>:
  40d148:	f005 fe14 	bl	412d74 <wc_InitMd5>

0040d14c <.LVL34>:
  40d14c:	4605      	mov	r5, r0

0040d14e <.LVL35>:
    hmac->heap = heap;
  40d14e:	2300      	movs	r3, #0
  40d150:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220

0040d154 <.LBE4>:
    #endif /* HAVE_CAVIUM */
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    ret = _InitHmac(hmac, type, heap);
    if (ret != 0)
  40d154:	2d00      	cmp	r5, #0
  40d156:	f040 80cf 	bne.w	40d2f8 <.LVL104>
#ifdef HAVE_FIPS
    if (length < HMAC_FIPS_MIN_KEY)
        return HMAC_MIN_KEYLEN_E;
#endif

    ip = (byte*)hmac->ipad;
  40d15a:	f104 08e0 	add.w	r8, r4, #224	; 0xe0

0040d15e <.LVL37>:
    op = (byte*)hmac->opad;

    switch (hmac->macType) {
  40d15e:	f894 3224 	ldrb.w	r3, [r4, #548]	; 0x224
  40d162:	2b05      	cmp	r3, #5
  40d164:	f200 80ce 	bhi.w	40d304 <.LVL106>
  40d168:	e8df f003 	tbb	[pc, r3]
  40d16c:	cc6d5017 	.word	0xcc6d5017
  40d170:	89a4      	.short	0x89a4

0040d172 <.LBB8>:
            ret = wc_InitSha(&hmac->hash.sha);
  40d172:	4620      	mov	r0, r4

0040d174 <.LVL39>:
  40d174:	f005 fedd 	bl	412f32 <.LFE28>

0040d178 <.LVL40>:
  40d178:	4605      	mov	r5, r0

0040d17a <.LVL41>:
  40d17a:	e7e8      	b.n	40d14e <.LVL35>

0040d17c <.LVL42>:
            ret = wc_InitSha256(&hmac->hash.sha256);
  40d17c:	4620      	mov	r0, r4

0040d17e <.LVL43>:
  40d17e:	f005 fedf 	bl	412f40 <.LFE20>

0040d182 <.LVL44>:
  40d182:	4605      	mov	r5, r0

0040d184 <.LVL45>:
  40d184:	e7e3      	b.n	40d14e <.LVL35>

0040d186 <.LVL46>:
            ret = wc_InitSha384(&hmac->hash.sha384);
  40d186:	4620      	mov	r0, r4

0040d188 <.LVL47>:
  40d188:	f005 fecc 	bl	412f24 <.LFE22>

0040d18c <.LVL48>:
  40d18c:	4605      	mov	r5, r0

0040d18e <.LVL49>:
  40d18e:	e7de      	b.n	40d14e <.LVL35>

0040d190 <.LVL50>:
            ret = wc_InitSha512(&hmac->hash.sha512);
  40d190:	4620      	mov	r0, r4

0040d192 <.LVL51>:
  40d192:	f005 fec0 	bl	412f16 <.LFE162>

0040d196 <.LVL52>:
  40d196:	4605      	mov	r5, r0

0040d198 <.LVL53>:
  40d198:	e7d9      	b.n	40d14e <.LVL35>

0040d19a <.LBE8>:
    #ifndef NO_MD5
        case MD5:
            hmac_block_size = MD5_BLOCK_SIZE;
            if (length <= MD5_BLOCK_SIZE) {
  40d19a:	2f40      	cmp	r7, #64	; 0x40
  40d19c:	d81c      	bhi.n	40d1d8 <.LVL60>
                if (key != NULL) {
  40d19e:	2e00      	cmp	r6, #0
  40d1a0:	f000 80c3 	beq.w	40d32a <.LVL112>
                    XMEMCPY(ip, key, length);
  40d1a4:	463a      	mov	r2, r7
  40d1a6:	4631      	mov	r1, r6
  40d1a8:	4640      	mov	r0, r8
  40d1aa:	f001 fa03 	bl	40e5b4 <.LFE14>

0040d1ae <.LVL55>:
            hmac_block_size = MD5_BLOCK_SIZE;
  40d1ae:	2640      	movs	r6, #64	; 0x40

0040d1b0 <.LVL56>:
    #endif
    }
#endif

    if (ret == 0) {
        if (length < hmac_block_size)
  40d1b0:	42b7      	cmp	r7, r6
  40d1b2:	d322      	bcc.n	40d1fa <.LVL65>

0040d1b4 <.LVL57>:
  40d1b4:	4643      	mov	r3, r8
  40d1b6:	f204 105f 	addw	r0, r4, #351	; 0x15f
  40d1ba:	eb08 0106 	add.w	r1, r8, r6

0040d1be <.LVL58>:
            XMEMSET(ip + length, 0, hmac_block_size - length);

        for(i = 0; i < hmac_block_size; i++) {
            op[i] = ip[i] ^ OPAD;
  40d1be:	781a      	ldrb	r2, [r3, #0]
  40d1c0:	f082 025c 	eor.w	r2, r2, #92	; 0x5c
  40d1c4:	f800 2f01 	strb.w	r2, [r0, #1]!
            ip[i] ^= IPAD;
  40d1c8:	781a      	ldrb	r2, [r3, #0]
  40d1ca:	f082 0236 	eor.w	r2, r2, #54	; 0x36
  40d1ce:	f803 2b01 	strb.w	r2, [r3], #1
        for(i = 0; i < hmac_block_size; i++) {
  40d1d2:	428b      	cmp	r3, r1
  40d1d4:	d1f3      	bne.n	40d1be <.LVL58>
  40d1d6:	e08f      	b.n	40d2f8 <.LVL104>

0040d1d8 <.LVL60>:
                ret = wc_Md5Update(&hmac->hash.md5, key, length);
  40d1d8:	463a      	mov	r2, r7
  40d1da:	4631      	mov	r1, r6
  40d1dc:	4620      	mov	r0, r4
  40d1de:	f003 ff9b 	bl	411118 <.LFE23>

0040d1e2 <.LVL61>:
                if (ret != 0)
  40d1e2:	b108      	cbz	r0, 40d1e8 <.LVL61+0x6>
                ret = wc_Md5Update(&hmac->hash.md5, key, length);
  40d1e4:	4605      	mov	r5, r0
  40d1e6:	e087      	b.n	40d2f8 <.LVL104>
                ret = wc_Md5Final(&hmac->hash.md5, ip);
  40d1e8:	4641      	mov	r1, r8
  40d1ea:	4620      	mov	r0, r4

0040d1ec <.LVL62>:
  40d1ec:	f002 fd48 	bl	40fc80 <wc_Md5Final>

0040d1f0 <.LVL63>:
                if (ret != 0)
  40d1f0:	2800      	cmp	r0, #0
  40d1f2:	f040 8090 	bne.w	40d316 <.LBE9>
            hmac_block_size = MD5_BLOCK_SIZE;
  40d1f6:	2640      	movs	r6, #64	; 0x40

0040d1f8 <.LVL64>:
                length = MD5_DIGEST_SIZE;
  40d1f8:	2710      	movs	r7, #16

0040d1fa <.LVL65>:
            XMEMSET(ip + length, 0, hmac_block_size - length);
  40d1fa:	1bf2      	subs	r2, r6, r7
  40d1fc:	2100      	movs	r1, #0
  40d1fe:	eb08 0007 	add.w	r0, r8, r7
  40d202:	f003 fd3d 	bl	410c80 <memset>

0040d206 <.LVL66>:
        for(i = 0; i < hmac_block_size; i++) {
  40d206:	2e00      	cmp	r6, #0
  40d208:	d076      	beq.n	40d2f8 <.LVL104>
  40d20a:	e7d3      	b.n	40d1b4 <.LVL57>

0040d20c <.LVL67>:
            if (length <= SHA_BLOCK_SIZE) {
  40d20c:	2f40      	cmp	r7, #64	; 0x40
  40d20e:	d809      	bhi.n	40d224 <.LVL70>
                if (key != NULL) {
  40d210:	2e00      	cmp	r6, #0
  40d212:	f000 808c 	beq.w	40d32e <.LVL114>
                    XMEMCPY(ip, key, length);
  40d216:	463a      	mov	r2, r7
  40d218:	4631      	mov	r1, r6
  40d21a:	4640      	mov	r0, r8
  40d21c:	f001 f9ca 	bl	40e5b4 <.LFE14>

0040d220 <.LVL68>:
            hmac_block_size = SHA_BLOCK_SIZE;
  40d220:	2640      	movs	r6, #64	; 0x40

0040d222 <.LVL69>:
  40d222:	e7c5      	b.n	40d1b0 <.LVL56>

0040d224 <.LVL70>:
                ret = wc_ShaUpdate(&hmac->hash.sha, key, length);
  40d224:	463a      	mov	r2, r7
  40d226:	4631      	mov	r1, r6
  40d228:	4620      	mov	r0, r4
  40d22a:	f003 f819 	bl	410260 <.LFE27>

0040d22e <.LVL71>:
                if (ret != 0)
  40d22e:	b108      	cbz	r0, 40d234 <.LVL71+0x6>
                ret = wc_ShaUpdate(&hmac->hash.sha, key, length);
  40d230:	4605      	mov	r5, r0
  40d232:	e061      	b.n	40d2f8 <.LVL104>
                ret = wc_ShaFinal(&hmac->hash.sha, ip);
  40d234:	4641      	mov	r1, r8
  40d236:	4620      	mov	r0, r4

0040d238 <.LVL72>:
  40d238:	f001 f87c 	bl	40e334 <.LFE172>

0040d23c <.LVL73>:
                if (ret != 0)
  40d23c:	2800      	cmp	r0, #0
  40d23e:	d16c      	bne.n	40d31a <.LBE9+0x4>
            hmac_block_size = SHA_BLOCK_SIZE;
  40d240:	2640      	movs	r6, #64	; 0x40

0040d242 <.LVL74>:
                length = SHA_DIGEST_SIZE;
  40d242:	2714      	movs	r7, #20

0040d244 <.LVL75>:
  40d244:	e7d9      	b.n	40d1fa <.LVL65>

0040d246 <.LVL76>:
            if (length <= SHA256_BLOCK_SIZE) {
  40d246:	2f40      	cmp	r7, #64	; 0x40
  40d248:	d808      	bhi.n	40d25c <.LVL79>
                if (key != NULL) {
  40d24a:	2e00      	cmp	r6, #0
  40d24c:	d071      	beq.n	40d332 <.LVL116>
                    XMEMCPY(ip, key, length);
  40d24e:	463a      	mov	r2, r7
  40d250:	4631      	mov	r1, r6
  40d252:	4640      	mov	r0, r8
  40d254:	f001 f9ae 	bl	40e5b4 <.LFE14>

0040d258 <.LVL77>:
    		hmac_block_size = SHA256_BLOCK_SIZE;
  40d258:	2640      	movs	r6, #64	; 0x40

0040d25a <.LVL78>:
  40d25a:	e7a9      	b.n	40d1b0 <.LVL56>

0040d25c <.LVL79>:
                ret = wc_Sha256Update(&hmac->hash.sha256, key, length);
  40d25c:	463a      	mov	r2, r7
  40d25e:	4631      	mov	r1, r6
  40d260:	4620      	mov	r0, r4
  40d262:	f003 f858 	bl	410316 <.LFE18>

0040d266 <.LVL80>:
                if (ret != 0)
  40d266:	b108      	cbz	r0, 40d26c <.LVL80+0x6>
                ret = wc_Sha256Update(&hmac->hash.sha256, key, length);
  40d268:	4605      	mov	r5, r0
  40d26a:	e045      	b.n	40d2f8 <.LVL104>
                ret = wc_Sha256Final(&hmac->hash.sha256, ip);
  40d26c:	4641      	mov	r1, r8
  40d26e:	4620      	mov	r0, r4

0040d270 <.LVL81>:
  40d270:	f000 fd86 	bl	40dd80 <.LFE177>

0040d274 <.LVL82>:
                if (ret != 0)
  40d274:	2800      	cmp	r0, #0
  40d276:	d152      	bne.n	40d31e <.LBE9+0x8>
    		hmac_block_size = SHA256_BLOCK_SIZE;
  40d278:	2640      	movs	r6, #64	; 0x40

0040d27a <.LVL83>:
                length = SHA256_DIGEST_SIZE;
  40d27a:	2720      	movs	r7, #32

0040d27c <.LVL84>:
  40d27c:	e7bd      	b.n	40d1fa <.LVL65>

0040d27e <.LVL85>:
            if (length <= SHA384_BLOCK_SIZE) {
  40d27e:	2f80      	cmp	r7, #128	; 0x80
  40d280:	d808      	bhi.n	40d294 <.LVL88>
                if (key != NULL) {
  40d282:	2e00      	cmp	r6, #0
  40d284:	d057      	beq.n	40d336 <.LVL118>
                    XMEMCPY(ip, key, length);
  40d286:	463a      	mov	r2, r7
  40d288:	4631      	mov	r1, r6
  40d28a:	4640      	mov	r0, r8
  40d28c:	f001 f992 	bl	40e5b4 <.LFE14>

0040d290 <.LVL86>:
            hmac_block_size = SHA384_BLOCK_SIZE;
  40d290:	2680      	movs	r6, #128	; 0x80

0040d292 <.LVL87>:
  40d292:	e78d      	b.n	40d1b0 <.LVL56>

0040d294 <.LVL88>:
                ret = wc_Sha384Update(&hmac->hash.sha384, key, length);
  40d294:	463a      	mov	r2, r7
  40d296:	4631      	mov	r1, r6
  40d298:	4620      	mov	r0, r4
  40d29a:	f002 f99a 	bl	40f5d2 <.LBE719>

0040d29e <.LVL89>:
                if (ret != 0)
  40d29e:	b108      	cbz	r0, 40d2a4 <.LVL89+0x6>
                ret = wc_Sha384Update(&hmac->hash.sha384, key, length);
  40d2a0:	4605      	mov	r5, r0
  40d2a2:	e029      	b.n	40d2f8 <.LVL104>
                ret = wc_Sha384Final(&hmac->hash.sha384, ip);
  40d2a4:	4641      	mov	r1, r8
  40d2a6:	4620      	mov	r0, r4

0040d2a8 <.LVL90>:
  40d2a8:	f7ff fca2 	bl	40cbf0 <.LFE21>

0040d2ac <.LVL91>:
                if (ret != 0)
  40d2ac:	bbc8      	cbnz	r0, 40d322 <.LVL110>
            hmac_block_size = SHA384_BLOCK_SIZE;
  40d2ae:	2680      	movs	r6, #128	; 0x80

0040d2b0 <.LVL92>:
                length = SHA384_DIGEST_SIZE;
  40d2b0:	2730      	movs	r7, #48	; 0x30

0040d2b2 <.LVL93>:
  40d2b2:	e7a2      	b.n	40d1fa <.LVL65>

0040d2b4 <.LVL94>:
            if (length <= SHA512_BLOCK_SIZE) {
  40d2b4:	2f80      	cmp	r7, #128	; 0x80
  40d2b6:	d807      	bhi.n	40d2c8 <.LVL97>
                if (key != NULL) {
  40d2b8:	b3fe      	cbz	r6, 40d33a <.LVL120>
                    XMEMCPY(ip, key, length);
  40d2ba:	463a      	mov	r2, r7
  40d2bc:	4631      	mov	r1, r6
  40d2be:	4640      	mov	r0, r8
  40d2c0:	f001 f978 	bl	40e5b4 <.LFE14>

0040d2c4 <.LVL95>:
            hmac_block_size = SHA512_BLOCK_SIZE;
  40d2c4:	2680      	movs	r6, #128	; 0x80

0040d2c6 <.LVL96>:
  40d2c6:	e773      	b.n	40d1b0 <.LVL56>

0040d2c8 <.LVL97>:
                ret = wc_Sha512Update(&hmac->hash.sha512, key, length);
  40d2c8:	463a      	mov	r2, r7
  40d2ca:	4631      	mov	r1, r6
  40d2cc:	4620      	mov	r0, r4
  40d2ce:	f002 f90b 	bl	40f4e8 <.LFE24>

0040d2d2 <.LVL98>:
                if (ret != 0)
  40d2d2:	b108      	cbz	r0, 40d2d8 <.LVL98+0x6>
                ret = wc_Sha512Update(&hmac->hash.sha512, key, length);
  40d2d4:	4605      	mov	r5, r0
  40d2d6:	e00f      	b.n	40d2f8 <.LVL104>
                ret = wc_Sha512Final(&hmac->hash.sha512, ip);
  40d2d8:	4641      	mov	r1, r8
  40d2da:	4620      	mov	r0, r4

0040d2dc <.LVL99>:
  40d2dc:	f7ff fb40 	bl	40c960 <wc_Sha512Final>

0040d2e0 <.LVL100>:
                if (ret != 0)
  40d2e0:	bb08      	cbnz	r0, 40d326 <.LVL110+0x4>
            hmac_block_size = SHA512_BLOCK_SIZE;
  40d2e2:	2680      	movs	r6, #128	; 0x80

0040d2e4 <.LVL101>:
                length = SHA512_DIGEST_SIZE;
  40d2e4:	2740      	movs	r7, #64	; 0x40

0040d2e6 <.LVL102>:
  40d2e6:	e788      	b.n	40d1fa <.LVL65>

0040d2e8 <.LVL103>:
        return BAD_FUNC_ARG;
  40d2e8:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  40d2ec:	e004      	b.n	40d2f8 <.LVL104>
  40d2ee:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  40d2f2:	e001      	b.n	40d2f8 <.LVL104>
  40d2f4:	f06f 05ac 	mvn.w	r5, #172	; 0xac

0040d2f8 <.LVL104>:
        }
    }

    return ret;
}
  40d2f8:	4628      	mov	r0, r5
  40d2fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040d2fe <.LVL105>:
        return BAD_FUNC_ARG;
  40d2fe:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  40d302:	e7f9      	b.n	40d2f8 <.LVL104>

0040d304 <.LVL106>:
            return BAD_FUNC_ARG;
  40d304:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  40d308:	e7f6      	b.n	40d2f8 <.LVL104>

0040d30a <.LBB9>:
    hmac->heap = heap;
  40d30a:	2300      	movs	r3, #0
  40d30c:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220

0040d310 <.LVL108>:
            ret = BAD_FUNC_ARG;
  40d310:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  40d314:	e7f0      	b.n	40d2f8 <.LVL104>

0040d316 <.LBE9>:
                ret = wc_Md5Final(&hmac->hash.md5, ip);
  40d316:	4605      	mov	r5, r0
  40d318:	e7ee      	b.n	40d2f8 <.LVL104>
                ret = wc_ShaFinal(&hmac->hash.sha, ip);
  40d31a:	4605      	mov	r5, r0
  40d31c:	e7ec      	b.n	40d2f8 <.LVL104>
                ret = wc_Sha256Final(&hmac->hash.sha256, ip);
  40d31e:	4605      	mov	r5, r0
  40d320:	e7ea      	b.n	40d2f8 <.LVL104>

0040d322 <.LVL110>:
                ret = wc_Sha384Final(&hmac->hash.sha384, ip);
  40d322:	4605      	mov	r5, r0
  40d324:	e7e8      	b.n	40d2f8 <.LVL104>
                ret = wc_Sha512Final(&hmac->hash.sha512, ip);
  40d326:	4605      	mov	r5, r0

0040d328 <.LVL111>:
  40d328:	e7e6      	b.n	40d2f8 <.LVL104>

0040d32a <.LVL112>:
            hmac_block_size = MD5_BLOCK_SIZE;
  40d32a:	2640      	movs	r6, #64	; 0x40

0040d32c <.LVL113>:
  40d32c:	e740      	b.n	40d1b0 <.LVL56>

0040d32e <.LVL114>:
            hmac_block_size = SHA_BLOCK_SIZE;
  40d32e:	2640      	movs	r6, #64	; 0x40

0040d330 <.LVL115>:
  40d330:	e73e      	b.n	40d1b0 <.LVL56>

0040d332 <.LVL116>:
    		hmac_block_size = SHA256_BLOCK_SIZE;
  40d332:	2640      	movs	r6, #64	; 0x40

0040d334 <.LVL117>:
  40d334:	e73c      	b.n	40d1b0 <.LVL56>

0040d336 <.LVL118>:
            hmac_block_size = SHA384_BLOCK_SIZE;
  40d336:	2680      	movs	r6, #128	; 0x80

0040d338 <.LVL119>:
  40d338:	e73a      	b.n	40d1b0 <.LVL56>

0040d33a <.LVL120>:
            hmac_block_size = SHA512_BLOCK_SIZE;
  40d33a:	2680      	movs	r6, #128	; 0x80

0040d33c <.LVL121>:
  40d33c:	e738      	b.n	40d1b0 <.LVL56>

Disassembly of section .rodata%66:

0040d340 <.LANCHOR0>:
  40d340:	2a200a0d 	.word	0x2a200a0d
  40d344:	53202a2a 	.word	0x53202a2a
  40d348:	65747379 	.word	0x65747379
  40d34c:	6552206d 	.word	0x6552206d
  40d350:	746f6f62 	.word	0x746f6f62
  40d354:	2a2a2a20 	.word	0x2a2a2a20
  40d358:	00000a0d 	.word	0x00000a0d
  40d35c:	00082008 	.word	0x00082008
  40d360:	00000008 	.word	0x00000008
  40d364:	003e0a0d 	.word	0x003e0a0d
  40d368:	2d2d0a0d 	.word	0x2d2d0a0d
  40d36c:	2d2d2d2d 	.word	0x2d2d2d2d
  40d370:	7553202d 	.word	0x7553202d
  40d374:	726f7070 	.word	0x726f7070
  40d378:	20646574 	.word	0x20646574
  40d37c:	6d6d6f63 	.word	0x6d6d6f63
  40d380:	20646e61 	.word	0x20646e61
  40d384:	756f7267 	.word	0x756f7267
  40d388:	2d207370 	.word	0x2d207370
  40d38c:	2d2d2d2d 	.word	0x2d2d2d2d
  40d390:	0000002d 	.word	0x0000002d
  40d394:	2a200a0d 	.word	0x2a200a0d
  40d398:	00202a2a 	.word	0x00202a2a
  40d39c:	2a2a2a20 	.word	0x2a2a2a20
  40d3a0:	00000000 	.word	0x00000000
  40d3a4:	2d2d0a0d 	.word	0x2d2d0a0d
  40d3a8:	2d2d2d2d 	.word	0x2d2d2d2d
  40d3ac:	2d2d2d2d 	.word	0x2d2d2d2d
  40d3b0:	69754220 	.word	0x69754220
  40d3b4:	6920746c 	.word	0x6920746c
  40d3b8:	6f63206e 	.word	0x6f63206e
  40d3bc:	6e616d6d 	.word	0x6e616d6d
  40d3c0:	2d207364 	.word	0x2d207364
  40d3c4:	2d2d2d2d 	.word	0x2d2d2d2d
  40d3c8:	2d2d2d2d 	.word	0x2d2d2d2d
  40d3cc:	0000002d 	.word	0x0000002d
  40d3d0:	00000a0d 	.word	0x00000a0d
  40d3d4:	6e550a0d 	.word	0x6e550a0d
  40d3d8:	776f6e6b 	.word	0x776f6e6b
  40d3dc:	6f63206e 	.word	0x6f63206e
  40d3e0:	6e616d6d 	.word	0x6e616d6d
  40d3e4:	72672064 	.word	0x72672064
  40d3e8:	2e70756f 	.word	0x2e70756f
  40d3ec:	79725420 	.word	0x79725420
  40d3f0:	6c656820 	.word	0x6c656820
  40d3f4:	000a0d70 	.word	0x000a0d70
  40d3f8:	54200d0a 	.word	0x54200d0a
  40d3fc:	6d206f6f 	.word	0x6d206f6f
  40d400:	20796e61 	.word	0x20796e61
  40d404:	75677261 	.word	0x75677261
  40d408:	746e656d 	.word	0x746e656d
  40d40c:	4d202e73 	.word	0x4d202e73
  40d410:	6d697861 	.word	0x6d697861
  40d414:	61206d75 	.word	0x61206d75
  40d418:	73756772 	.word	0x73756772
  40d41c:	70757320 	.word	0x70757320
  40d420:	74726f70 	.word	0x74726f70
  40d424:	69206465 	.word	0x69206465
  40d428:	64252073 	.word	0x64252073
  40d42c:	000a0d21 	.word	0x000a0d21
  40d430:	2a2a2a20 	.word	0x2a2a2a20
  40d434:	6d6f4320 	.word	0x6d6f4320
  40d438:	646e616d 	.word	0x646e616d
  40d43c:	6f725020 	.word	0x6f725020
  40d440:	73736563 	.word	0x73736563
  40d444:	203a726f 	.word	0x203a726f
  40d448:	6e6b6e75 	.word	0x6e6b6e75
  40d44c:	206e776f 	.word	0x206e776f
  40d450:	6d6d6f63 	.word	0x6d6d6f63
  40d454:	2e646e61 	.word	0x2e646e61
  40d458:	2a2a2a20 	.word	0x2a2a2a20
  40d45c:	00000a0d 	.word	0x00000a0d
  40d460:	2a2a2a20 	.word	0x2a2a2a20
  40d464:	6d6f4320 	.word	0x6d6f4320
  40d468:	646e616d 	.word	0x646e616d
  40d46c:	6f725020 	.word	0x6f725020
  40d470:	73736563 	.word	0x73736563
  40d474:	203a726f 	.word	0x203a726f
  40d478:	61656c50 	.word	0x61656c50
  40d47c:	74206573 	.word	0x74206573
  40d480:	20657079 	.word	0x20657079
  40d484:	61206e69 	.word	0x61206e69
  40d488:	6d6f6320 	.word	0x6d6f6320
  40d48c:	646e616d 	.word	0x646e616d
  40d490:	0d2a2a2a 	.word	0x0d2a2a2a
  40d494:	0000000a 	.word	0x0000000a
  40d498:	0a0d0a0d 	.word	0x0a0d0a0d
  40d49c:	0000003e 	.word	0x0000003e
  40d4a0:	0000003e 	.word	0x0000003e
  40d4a4:	2a2a2a20 	.word	0x2a2a2a20
  40d4a8:	6d6f4320 	.word	0x6d6f4320
  40d4ac:	646e616d 	.word	0x646e616d
  40d4b0:	6f725020 	.word	0x6f725020
  40d4b4:	73736563 	.word	0x73736563
  40d4b8:	6220726f 	.word	0x6220726f
  40d4bc:	65666675 	.word	0x65666675
  40d4c0:	78652072 	.word	0x78652072
  40d4c4:	64656563 	.word	0x64656563
  40d4c8:	202e6465 	.word	0x202e6465
  40d4cc:	72746552 	.word	0x72746552
  40d4d0:	2a202e79 	.word	0x2a202e79
  40d4d4:	0a0d2a2a 	.word	0x0a0d2a2a
  40d4d8:	00000000 	.word	0x00000000
  40d4dc:	2a200a0d 	.word	0x2a200a0d
  40d4e0:	51202a2a 	.word	0x51202a2a
  40d4e4:	74746975 	.word	0x74746975
  40d4e8:	20676e69 	.word	0x20676e69
  40d4ec:	20656874 	.word	0x20656874
  40d4f0:	6d6d6f43 	.word	0x6d6d6f43
  40d4f4:	20646e61 	.word	0x20646e61
  40d4f8:	636f7250 	.word	0x636f7250
  40d4fc:	6f737365 	.word	0x6f737365
  40d500:	42202e72 	.word	0x42202e72
  40d504:	2a206579 	.word	0x2a206579
  40d508:	0a0d2a2a 	.word	0x0a0d2a2a
  40d50c:	00000000 	.word	0x00000000
  40d510:	65736572 	.word	0x65736572
  40d514:	00000074 	.word	0x00000074
  40d518:	6552203a 	.word	0x6552203a
  40d51c:	20746573 	.word	0x20746573
  40d520:	74736f68 	.word	0x74736f68
  40d524:	00000000 	.word	0x00000000
  40d528:	00000071 	.word	0x00000071
  40d52c:	7571203a 	.word	0x7571203a
  40d530:	63207469 	.word	0x63207469
  40d534:	616d6d6f 	.word	0x616d6d6f
  40d538:	7020646e 	.word	0x7020646e
  40d53c:	65636f72 	.word	0x65636f72
  40d540:	726f7373 	.word	0x726f7373
  40d544:	00000000 	.word	0x00000000
  40d548:	706c6568 	.word	0x706c6568
  40d54c:	00000000 	.word	0x00000000
  40d550:	6568203a 	.word	0x6568203a
  40d554:	706c      	.short	0x706c
	...

Disassembly of section .text._free_r%67:

0040d558 <_free_r>:
  40d558:	2900      	cmp	r1, #0
  40d55a:	d044      	beq.n	40d5e6 <.LVL43>
  40d55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0040d560 <.LCFI1>:
  40d560:	460d      	mov	r5, r1
  40d562:	4680      	mov	r8, r0
  40d564:	f005 fd34 	bl	412fd0 <__malloc_lock>

0040d568 <.LVL24>:
  40d568:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40d56c:	4969      	ldr	r1, [pc, #420]	; (40d714 <.LVL82+0xa>)
  40d56e:	f027 0301 	bic.w	r3, r7, #1
  40d572:	f1a5 0408 	sub.w	r4, r5, #8

0040d576 <.LVL25>:
  40d576:	18e2      	adds	r2, r4, r3

0040d578 <.LVL26>:
  40d578:	688e      	ldr	r6, [r1, #8]
  40d57a:	6850      	ldr	r0, [r2, #4]
  40d57c:	42b2      	cmp	r2, r6
  40d57e:	f020 0003 	bic.w	r0, r0, #3

0040d582 <.LVL27>:
  40d582:	d05e      	beq.n	40d642 <.LVL56>
  40d584:	07fe      	lsls	r6, r7, #31
  40d586:	6050      	str	r0, [r2, #4]

0040d588 <.LVL28>:
  40d588:	d40b      	bmi.n	40d5a2 <.LVL34>
  40d58a:	f855 7c08 	ldr.w	r7, [r5, #-8]

0040d58e <.LVL29>:
  40d58e:	1be4      	subs	r4, r4, r7
  40d590:	f101 0e08 	add.w	lr, r1, #8
  40d594:	68a5      	ldr	r5, [r4, #8]

0040d596 <.LVL31>:
  40d596:	4575      	cmp	r5, lr
  40d598:	443b      	add	r3, r7
  40d59a:	d06d      	beq.n	40d678 <.LVL70>
  40d59c:	68e7      	ldr	r7, [r4, #12]

0040d59e <.LVL33>:
  40d59e:	60ef      	str	r7, [r5, #12]
  40d5a0:	60bd      	str	r5, [r7, #8]

0040d5a2 <.LVL34>:
  40d5a2:	1815      	adds	r5, r2, r0
  40d5a4:	686d      	ldr	r5, [r5, #4]
  40d5a6:	07ed      	lsls	r5, r5, #31
  40d5a8:	d53e      	bpl.n	40d628 <.LCFI5>
  40d5aa:	f043 0201 	orr.w	r2, r3, #1

0040d5ae <.LVL35>:
  40d5ae:	6062      	str	r2, [r4, #4]
  40d5b0:	50e3      	str	r3, [r4, r3]

0040d5b2 <.LVL36>:
  40d5b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40d5b6:	d217      	bcs.n	40d5e8 <.LCFI3>
  40d5b8:	08db      	lsrs	r3, r3, #3

0040d5ba <.LVL37>:
  40d5ba:	1c58      	adds	r0, r3, #1
  40d5bc:	109a      	asrs	r2, r3, #2
  40d5be:	684d      	ldr	r5, [r1, #4]
  40d5c0:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40d5c4:	60a7      	str	r7, [r4, #8]
  40d5c6:	2301      	movs	r3, #1

0040d5c8 <.LVL38>:
  40d5c8:	4093      	lsls	r3, r2
  40d5ca:	eb01 02c0 	add.w	r2, r1, r0, lsl #3

0040d5ce <.LVL39>:
  40d5ce:	432b      	orrs	r3, r5
  40d5d0:	3a08      	subs	r2, #8

0040d5d2 <.LVL40>:
  40d5d2:	60e2      	str	r2, [r4, #12]
  40d5d4:	604b      	str	r3, [r1, #4]
  40d5d6:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40d5da:	60fc      	str	r4, [r7, #12]

0040d5dc <.LVL41>:
  40d5dc:	4640      	mov	r0, r8
  40d5de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

0040d5e2 <.LCFI2>:
  40d5e2:	f005 bcf7 	b.w	412fd4 <__malloc_unlock>

0040d5e6 <.LVL43>:
  40d5e6:	4770      	bx	lr

0040d5e8 <.LCFI3>:
  40d5e8:	0a5a      	lsrs	r2, r3, #9
  40d5ea:	2a04      	cmp	r2, #4
  40d5ec:	d852      	bhi.n	40d694 <.LVL74>
  40d5ee:	099a      	lsrs	r2, r3, #6
  40d5f0:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40d5f4:	00ff      	lsls	r7, r7, #3
  40d5f6:	f102 0538 	add.w	r5, r2, #56	; 0x38

0040d5fa <.LVL45>:
  40d5fa:	19c8      	adds	r0, r1, r7
  40d5fc:	59ca      	ldr	r2, [r1, r7]
  40d5fe:	3808      	subs	r0, #8

0040d600 <.LVL46>:
  40d600:	4290      	cmp	r0, r2
  40d602:	d04f      	beq.n	40d6a4 <.LVL75>
  40d604:	6851      	ldr	r1, [r2, #4]
  40d606:	f021 0103 	bic.w	r1, r1, #3
  40d60a:	428b      	cmp	r3, r1
  40d60c:	d232      	bcs.n	40d674 <.LVL68>
  40d60e:	6892      	ldr	r2, [r2, #8]
  40d610:	4290      	cmp	r0, r2
  40d612:	d1f7      	bne.n	40d604 <.LVL46+0x4>

0040d614 <.LVL48>:
  40d614:	68c3      	ldr	r3, [r0, #12]

0040d616 <.LVL49>:
  40d616:	60a0      	str	r0, [r4, #8]
  40d618:	60e3      	str	r3, [r4, #12]
  40d61a:	609c      	str	r4, [r3, #8]
  40d61c:	60c4      	str	r4, [r0, #12]
  40d61e:	4640      	mov	r0, r8

0040d620 <.LVL50>:
  40d620:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

0040d624 <.LCFI4>:
  40d624:	f005 bcd6 	b.w	412fd4 <__malloc_unlock>

0040d628 <.LCFI5>:
  40d628:	6895      	ldr	r5, [r2, #8]
  40d62a:	4f3b      	ldr	r7, [pc, #236]	; (40d718 <.LVL82+0xe>)
  40d62c:	42bd      	cmp	r5, r7
  40d62e:	4403      	add	r3, r0
  40d630:	d040      	beq.n	40d6b4 <.LVL79>
  40d632:	68d0      	ldr	r0, [r2, #12]

0040d634 <.LVL54>:
  40d634:	60e8      	str	r0, [r5, #12]
  40d636:	f043 0201 	orr.w	r2, r3, #1

0040d63a <.LVL55>:
  40d63a:	6085      	str	r5, [r0, #8]
  40d63c:	6062      	str	r2, [r4, #4]
  40d63e:	50e3      	str	r3, [r4, r3]
  40d640:	e7b7      	b.n	40d5b2 <.LVL36>

0040d642 <.LVL56>:
  40d642:	07ff      	lsls	r7, r7, #31

0040d644 <.LVL57>:
  40d644:	4403      	add	r3, r0
  40d646:	d407      	bmi.n	40d658 <.LVL64>
  40d648:	f855 2c08 	ldr.w	r2, [r5, #-8]

0040d64c <.LVL59>:
  40d64c:	1aa4      	subs	r4, r4, r2

0040d64e <.LVL60>:
  40d64e:	4413      	add	r3, r2
  40d650:	68a0      	ldr	r0, [r4, #8]

0040d652 <.LVL62>:
  40d652:	68e2      	ldr	r2, [r4, #12]

0040d654 <.LVL63>:
  40d654:	60c2      	str	r2, [r0, #12]
  40d656:	6090      	str	r0, [r2, #8]

0040d658 <.LVL64>:
  40d658:	4a30      	ldr	r2, [pc, #192]	; (40d71c <.LVL82+0x12>)
  40d65a:	6812      	ldr	r2, [r2, #0]
  40d65c:	f043 0001 	orr.w	r0, r3, #1
  40d660:	4293      	cmp	r3, r2
  40d662:	6060      	str	r0, [r4, #4]

0040d664 <.LVL65>:
  40d664:	608c      	str	r4, [r1, #8]
  40d666:	d3b9      	bcc.n	40d5dc <.LVL41>
  40d668:	4b2d      	ldr	r3, [pc, #180]	; (40d720 <.LVL82+0x16>)

0040d66a <.LVL66>:
  40d66a:	4640      	mov	r0, r8
  40d66c:	6819      	ldr	r1, [r3, #0]
  40d66e:	f003 fc37 	bl	410ee0 <.LFE0>

0040d672 <.LVL67>:
  40d672:	e7b3      	b.n	40d5dc <.LVL41>

0040d674 <.LVL68>:
  40d674:	4610      	mov	r0, r2

0040d676 <.LVL69>:
  40d676:	e7cd      	b.n	40d614 <.LVL48>

0040d678 <.LVL70>:
  40d678:	1811      	adds	r1, r2, r0
  40d67a:	6849      	ldr	r1, [r1, #4]
  40d67c:	07c9      	lsls	r1, r1, #31
  40d67e:	d444      	bmi.n	40d70a <.LVL82>
  40d680:	6891      	ldr	r1, [r2, #8]
  40d682:	68d2      	ldr	r2, [r2, #12]

0040d684 <.LVL71>:
  40d684:	60ca      	str	r2, [r1, #12]
  40d686:	4403      	add	r3, r0

0040d688 <.LVL72>:
  40d688:	f043 0001 	orr.w	r0, r3, #1

0040d68c <.LVL73>:
  40d68c:	6091      	str	r1, [r2, #8]
  40d68e:	6060      	str	r0, [r4, #4]
  40d690:	50e3      	str	r3, [r4, r3]
  40d692:	e7a3      	b.n	40d5dc <.LVL41>

0040d694 <.LVL74>:
  40d694:	2a14      	cmp	r2, #20
  40d696:	d816      	bhi.n	40d6c6 <.LVL81>
  40d698:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40d69c:	00ff      	lsls	r7, r7, #3
  40d69e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40d6a2:	e7aa      	b.n	40d5fa <.LVL45>

0040d6a4 <.LVL75>:
  40d6a4:	10aa      	asrs	r2, r5, #2

0040d6a6 <.LVL76>:
  40d6a6:	2301      	movs	r3, #1

0040d6a8 <.LVL77>:
  40d6a8:	684d      	ldr	r5, [r1, #4]

0040d6aa <.LVL78>:
  40d6aa:	4093      	lsls	r3, r2
  40d6ac:	432b      	orrs	r3, r5
  40d6ae:	604b      	str	r3, [r1, #4]
  40d6b0:	4603      	mov	r3, r0
  40d6b2:	e7b0      	b.n	40d616 <.LVL49>

0040d6b4 <.LVL79>:
  40d6b4:	f043 0201 	orr.w	r2, r3, #1

0040d6b8 <.LVL80>:
  40d6b8:	614c      	str	r4, [r1, #20]
  40d6ba:	610c      	str	r4, [r1, #16]
  40d6bc:	60e5      	str	r5, [r4, #12]
  40d6be:	60a5      	str	r5, [r4, #8]
  40d6c0:	6062      	str	r2, [r4, #4]
  40d6c2:	50e3      	str	r3, [r4, r3]
  40d6c4:	e78a      	b.n	40d5dc <.LVL41>

0040d6c6 <.LVL81>:
  40d6c6:	2a54      	cmp	r2, #84	; 0x54
  40d6c8:	d806      	bhi.n	40d6d8 <.LVL81+0x12>
  40d6ca:	0b1a      	lsrs	r2, r3, #12
  40d6cc:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40d6d0:	00ff      	lsls	r7, r7, #3
  40d6d2:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40d6d6:	e790      	b.n	40d5fa <.LVL45>
  40d6d8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40d6dc:	d806      	bhi.n	40d6ec <.LVL81+0x26>
  40d6de:	0bda      	lsrs	r2, r3, #15
  40d6e0:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40d6e4:	00ff      	lsls	r7, r7, #3
  40d6e6:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40d6ea:	e786      	b.n	40d5fa <.LVL45>
  40d6ec:	f240 5054 	movw	r0, #1364	; 0x554
  40d6f0:	4282      	cmp	r2, r0
  40d6f2:	d806      	bhi.n	40d702 <.LVL81+0x3c>
  40d6f4:	0c9a      	lsrs	r2, r3, #18
  40d6f6:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40d6fa:	00ff      	lsls	r7, r7, #3
  40d6fc:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40d700:	e77b      	b.n	40d5fa <.LVL45>
  40d702:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40d706:	257e      	movs	r5, #126	; 0x7e
  40d708:	e777      	b.n	40d5fa <.LVL45>

0040d70a <.LVL82>:
  40d70a:	f043 0101 	orr.w	r1, r3, #1
  40d70e:	6061      	str	r1, [r4, #4]
  40d710:	6013      	str	r3, [r2, #0]
  40d712:	e763      	b.n	40d5dc <.LVL41>
  40d714:	2040cc80 	.word	0x2040cc80
  40d718:	2040cc88 	.word	0x2040cc88
  40d71c:	2040dd3c 	.word	0x2040dd3c
  40d720:	2040dd34 	.word	0x2040dd34

Disassembly of section .text.ParseCmdBuffer%68:

0040d724 <ParseCmdBuffer>:
{
  40d724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0040d728 <.LCFI25>:
  40d728:	b091      	sub	sp, #68	; 0x44

0040d72a <.LCFI26>:
  40d72a:	4681      	mov	r9, r0

0040d72c <.LVL135>:
    char *argv[MAX_CMD_ARGS + 1] = {};
  40d72c:	2240      	movs	r2, #64	; 0x40
  40d72e:	2100      	movs	r1, #0
  40d730:	4668      	mov	r0, sp

0040d732 <.LVL136>:
  40d732:	f003 faa5 	bl	410c80 <memset>

0040d736 <.LVL137>:
    const void* cmdIoParam = pCmdIO->cmdIoParam;
  40d736:	f8d9 b090 	ldr.w	fp, [r9, #144]	; 0x90
    strncpy(saveCmd, pCmdIO->cmdBuff, sizeof(saveCmd));     // make a copy of the command
  40d73a:	f109 0508 	add.w	r5, r9, #8
  40d73e:	4c5e      	ldr	r4, [pc, #376]	; (40d8b8 <.LBE33+0x6>)
  40d740:	2281      	movs	r2, #129	; 0x81
  40d742:	4629      	mov	r1, r5
  40d744:	4620      	mov	r0, r4
  40d746:	f004 fa8d 	bl	411c64 <.LFE10>

0040d74a <.LBB18>:
  strsize = strlen(pRawString);
  40d74a:	4620      	mov	r0, r4
  40d74c:	f002 f898 	bl	40f880 <.LFE22>

0040d750 <.LVL140>:
  40d750:	466e      	mov	r6, sp
  int argc = 0, i = 0, strsize = 0;
  40d752:	f04f 0800 	mov.w	r8, #0
  40d756:	4642      	mov	r2, r8
  strsize = strlen(pRawString);
  40d758:	4623      	mov	r3, r4
    *pRawString++ = '\0';
  40d75a:	4647      	mov	r7, r8
  40d75c:	e002      	b.n	40d764 <.LVL143>

0040d75e <.LVL141>:
      if (++i >= strsize) {
  40d75e:	3201      	adds	r2, #1
  40d760:	4290      	cmp	r0, r2
  40d762:	dd31      	ble.n	40d7c8 <.LBE22>

0040d764 <.LVL143>:
  40d764:	461c      	mov	r4, r3

0040d766 <.LVL144>:
    while ((*pRawString == ' ') || (*pRawString == '\t')) {
  40d766:	f813 1b01 	ldrb.w	r1, [r3], #1

0040d76a <.LVL145>:
  40d76a:	2920      	cmp	r1, #32
  40d76c:	d0f7      	beq.n	40d75e <.LVL141>
  40d76e:	2909      	cmp	r1, #9
  40d770:	d0f5      	beq.n	40d75e <.LVL141>
    if (*pRawString == '\0') {
  40d772:	b319      	cbz	r1, 40d7bc <.LBB22>
    argv[argc++] = pRawString;
  40d774:	f108 0801 	add.w	r8, r8, #1

0040d778 <.LVL146>:
  40d778:	f846 4b04 	str.w	r4, [r6], #4
    while (*pRawString && (*pRawString != ' ') && (*pRawString != '\t')) {
  40d77c:	2920      	cmp	r1, #32
  40d77e:	d00a      	beq.n	40d796 <.LVL149>
  40d780:	2909      	cmp	r1, #9
  40d782:	d008      	beq.n	40d796 <.LVL149>
  40d784:	f814 3f01 	ldrb.w	r3, [r4, #1]!

0040d788 <.LVL148>:
  40d788:	f013 0fdf 	tst.w	r3, #223	; 0xdf
  40d78c:	d001      	beq.n	40d792 <.LVL148+0xa>
  40d78e:	2b09      	cmp	r3, #9
  40d790:	d1f8      	bne.n	40d784 <.LVL146+0xc>
    if (*pRawString == '\0') {
  40d792:	2b00      	cmp	r3, #0
  40d794:	d04b      	beq.n	40d82e <.LBB32>

0040d796 <.LVL149>:
    *pRawString++ = '\0';
  40d796:	1c63      	adds	r3, r4, #1

0040d798 <.LVL150>:
  40d798:	7027      	strb	r7, [r4, #0]
  while(argc < MAX_CMD_ARGS) {
  40d79a:	f1b8 0f0f 	cmp.w	r8, #15
  40d79e:	d1e1      	bne.n	40d764 <.LVL143>
  SYS_PRINT("\n\r Too many arguments. Maximum argus supported is %d!\r\n", MAX_CMD_ARGS);
  40d7a0:	210f      	movs	r1, #15
  40d7a2:	4846      	ldr	r0, [pc, #280]	; (40d8bc <.LBE33+0xa>)

0040d7a4 <.LVL151>:
  40d7a4:	f003 fe42 	bl	41142c <.LFE13>

0040d7a8 <.LBE18>:
        (*pCmdIO->pCmdApi->msg)(cmdIoParam, " *** Command Processor: Please type in a command***" LINE_TERM);
  40d7a8:	f8d9 308c 	ldr.w	r3, [r9, #140]	; 0x8c
  40d7ac:	681b      	ldr	r3, [r3, #0]
  40d7ae:	4944      	ldr	r1, [pc, #272]	; (40d8c0 <.LBE33+0xe>)
  40d7b0:	4658      	mov	r0, fp
  40d7b2:	4798      	blx	r3

0040d7b4 <.LVL153>:
    return false;
  40d7b4:	2000      	movs	r0, #0
}
  40d7b6:	b011      	add	sp, #68	; 0x44

0040d7b8 <.LCFI27>:
  40d7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040d7bc <.LBB22>:
      argv[argc] = NULL;
  40d7bc:	2200      	movs	r2, #0

0040d7be <.LVL155>:
  40d7be:	ab10      	add	r3, sp, #64	; 0x40
  40d7c0:	eb03 0388 	add.w	r3, r3, r8, lsl #2
  40d7c4:	f843 2c40 	str.w	r2, [r3, #-64]

0040d7c8 <.LBE22>:
    if(argc != 0)
  40d7c8:	f1b8 0f00 	cmp.w	r8, #0
  40d7cc:	d0ec      	beq.n	40d7a8 <.LBE18>

0040d7ce <.LBB23>:


static cmdNode* CmdRemoveTail(cmdDlList* pL)
{
    cmdNode* pN;
    if(pL->head == pL->tail)
  40d7ce:	4b3d      	ldr	r3, [pc, #244]	; (40d8c4 <.LBE33+0x12>)
  40d7d0:	681a      	ldr	r2, [r3, #0]
  40d7d2:	685c      	ldr	r4, [r3, #4]
  40d7d4:	42a2      	cmp	r2, r4
  40d7d6:	d031      	beq.n	40d83c <.LBB30>

0040d7d8 <.LVL158>:
        pL->head = pL->tail = 0;
    }
    else
    {
        pN = pL->tail;
        pL->tail = pN->prev;
  40d7d8:	6861      	ldr	r1, [r4, #4]
  40d7da:	4b3a      	ldr	r3, [pc, #232]	; (40d8c4 <.LBE33+0x12>)
  40d7dc:	6059      	str	r1, [r3, #4]
        pL->tail->next = pL->head;
  40d7de:	600a      	str	r2, [r1, #0]
        pL->head->prev = pL->tail;
  40d7e0:	685a      	ldr	r2, [r3, #4]
  40d7e2:	681b      	ldr	r3, [r3, #0]
  40d7e4:	605a      	str	r2, [r3, #4]

0040d7e6 <.LBE24>:
        strncpy(pN->cmdBuff, pCmdIO->cmdBuff, sizeof(saveCmd)); // Need save non-parsed string
  40d7e6:	2281      	movs	r2, #129	; 0x81
  40d7e8:	4629      	mov	r1, r5
  40d7ea:	f104 0008 	add.w	r0, r4, #8
  40d7ee:	f004 fa39 	bl	411c64 <.LFE10>

0040d7f2 <.LBB27>:
    if(pL->head == 0)
  40d7f2:	4b34      	ldr	r3, [pc, #208]	; (40d8c4 <.LBE33+0x12>)
  40d7f4:	681b      	ldr	r3, [r3, #0]
  40d7f6:	b32b      	cbz	r3, 40d844 <.LBB31>
        pN->next = pL->head;
  40d7f8:	6023      	str	r3, [r4, #0]
        pN->prev = pL->tail;
  40d7fa:	4b32      	ldr	r3, [pc, #200]	; (40d8c4 <.LBE33+0x12>)
  40d7fc:	685a      	ldr	r2, [r3, #4]
  40d7fe:	6062      	str	r2, [r4, #4]
        pL->tail->next = pN;
  40d800:	685a      	ldr	r2, [r3, #4]
  40d802:	6014      	str	r4, [r2, #0]
        pL->head->prev = pN;
  40d804:	681a      	ldr	r2, [r3, #0]
  40d806:	6054      	str	r4, [r2, #4]
        pL->head = pN;
  40d808:	601c      	str	r4, [r3, #0]

0040d80a <.LBE27>:
        _pCurrCmdN = 0;
  40d80a:	2200      	movs	r2, #0
  40d80c:	4b2e      	ldr	r3, [pc, #184]	; (40d8c8 <.LBE33+0x16>)
  40d80e:	601a      	str	r2, [r3, #0]

0040d810 <.LVL162>:
            if(!strcmp(argv[0], pDcpt->cmdStr))
  40d810:	9e00      	ldr	r6, [sp, #0]
  40d812:	4c2e      	ldr	r4, [pc, #184]	; (40d8cc <.LBE33+0x1a>)
        for(ix = 0, pDcpt = _builtinCmdTbl; ix < sizeof(_builtinCmdTbl)/sizeof(*_builtinCmdTbl); ix++, pDcpt++)
  40d814:	f104 0524 	add.w	r5, r4, #36	; 0x24

0040d818 <.LVL163>:
            if(!strcmp(argv[0], pDcpt->cmdStr))
  40d818:	6821      	ldr	r1, [r4, #0]
  40d81a:	4630      	mov	r0, r6
  40d81c:	f7fe ff34 	bl	40c688 <strcmp>

0040d820 <.LVL164>:
  40d820:	b1b0      	cbz	r0, 40d850 <.LBE31>
        for(ix = 0, pDcpt = _builtinCmdTbl; ix < sizeof(_builtinCmdTbl)/sizeof(*_builtinCmdTbl); ix++, pDcpt++)
  40d822:	340c      	adds	r4, #12
  40d824:	42ac      	cmp	r4, r5
  40d826:	d1f7      	bne.n	40d818 <.LVL163>
  40d828:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 40d8d8 <.LBE33+0x26>
  40d82c:	e027      	b.n	40d87e <.LVL176+0xa>

0040d82e <.LBB32>:
    argv[argc] = NULL;
  40d82e:	2200      	movs	r2, #0

0040d830 <.LVL167>:
  40d830:	ab10      	add	r3, sp, #64	; 0x40
  40d832:	eb03 0388 	add.w	r3, r3, r8, lsl #2
  40d836:	f843 2c40 	str.w	r2, [r3, #-64]
  40d83a:	e7c5      	b.n	40d7c8 <.LBE22>

0040d83c <.LBB30>:
        pL->head = pL->tail = 0;
  40d83c:	2200      	movs	r2, #0

0040d83e <.LVL169>:
  40d83e:	605a      	str	r2, [r3, #4]
  40d840:	601a      	str	r2, [r3, #0]

0040d842 <.LVL170>:
  40d842:	e7d0      	b.n	40d7e6 <.LBE24>

0040d844 <.LBB31>:
        pL->head = pL->tail = pN;
  40d844:	4b1f      	ldr	r3, [pc, #124]	; (40d8c4 <.LBE33+0x12>)
  40d846:	605c      	str	r4, [r3, #4]
  40d848:	601c      	str	r4, [r3, #0]
        pN->next = pN->prev = pN;
  40d84a:	6064      	str	r4, [r4, #4]
  40d84c:	6024      	str	r4, [r4, #0]
  40d84e:	e7dc      	b.n	40d80a <.LBE27>

0040d850 <.LBE31>:
                return (*pDcpt->cmdFnc)(pCmdIO, argc, argv);     // call command handler
  40d850:	6863      	ldr	r3, [r4, #4]
  40d852:	466a      	mov	r2, sp
  40d854:	4641      	mov	r1, r8
  40d856:	4648      	mov	r0, r9
  40d858:	4798      	blx	r3

0040d85a <.LVL173>:
  40d85a:	3000      	adds	r0, #0
  40d85c:	bf18      	it	ne
  40d85e:	2001      	movne	r0, #1
  40d860:	e7a9      	b.n	40d7b6 <.LVL153+0x2>

0040d862 <.LVL174>:
                    return !(*pDcpt->cmdFnc)(pCmdIO, argc, argv);
  40d862:	6863      	ldr	r3, [r4, #4]
  40d864:	466a      	mov	r2, sp
  40d866:	4641      	mov	r1, r8
  40d868:	4648      	mov	r0, r9
  40d86a:	4798      	blx	r3

0040d86c <.LVL175>:
  40d86c:	fab0 f080 	clz	r0, r0
  40d870:	0940      	lsrs	r0, r0, #5
  40d872:	e7a0      	b.n	40d7b6 <.LVL153+0x2>

0040d874 <.LVL176>:
  40d874:	f10a 0a10 	add.w	sl, sl, #16
        for (grp_ix=0; grp_ix<MAX_CMD_GROUP; grp_ix++)
  40d878:	4b15      	ldr	r3, [pc, #84]	; (40d8d0 <.LBE33+0x1e>)
  40d87a:	4553      	cmp	r3, sl
  40d87c:	d013      	beq.n	40d8a6 <.LVL182>
            if (_usrCmdTbl[grp_ix].pCmd == 0)
  40d87e:	f8da 4004 	ldr.w	r4, [sl, #4]
  40d882:	2c00      	cmp	r4, #0
  40d884:	d0f6      	beq.n	40d874 <.LVL176>

0040d886 <.LVL177>:
            for(ix = 0, pDcpt = _usrCmdTbl[grp_ix].pCmd; ix < _usrCmdTbl[grp_ix].nCmds; ix++, pDcpt++)
  40d886:	f8da 7000 	ldr.w	r7, [sl]
  40d88a:	2f00      	cmp	r7, #0
  40d88c:	ddf2      	ble.n	40d874 <.LVL176>
  40d88e:	2500      	movs	r5, #0

0040d890 <.LVL178>:
                if(!strcmp(argv[0], pDcpt->cmdStr))
  40d890:	6821      	ldr	r1, [r4, #0]
  40d892:	4630      	mov	r0, r6
  40d894:	f7fe fef8 	bl	40c688 <strcmp>

0040d898 <.LVL179>:
  40d898:	2800      	cmp	r0, #0
  40d89a:	d0e2      	beq.n	40d862 <.LVL174>
            for(ix = 0, pDcpt = _usrCmdTbl[grp_ix].pCmd; ix < _usrCmdTbl[grp_ix].nCmds; ix++, pDcpt++)
  40d89c:	3501      	adds	r5, #1
  40d89e:	340c      	adds	r4, #12
  40d8a0:	42af      	cmp	r7, r5
  40d8a2:	d1f5      	bne.n	40d890 <.LVL178>
  40d8a4:	e7e6      	b.n	40d874 <.LVL176>

0040d8a6 <.LVL182>:
        (*pCmdIO->pCmdApi->msg)(cmdIoParam, " *** Command Processor: unknown command. ***\r\n");
  40d8a6:	f8d9 308c 	ldr.w	r3, [r9, #140]	; 0x8c
  40d8aa:	681b      	ldr	r3, [r3, #0]
  40d8ac:	4909      	ldr	r1, [pc, #36]	; (40d8d4 <.LBE33+0x22>)
  40d8ae:	4658      	mov	r0, fp
  40d8b0:	4798      	blx	r3

0040d8b2 <.LBE33>:
    return false;
  40d8b2:	2000      	movs	r0, #0
  40d8b4:	e77f      	b.n	40d7b6 <.LVL153+0x2>
  40d8b6:	bf00      	nop
  40d8b8:	2040d984 	.word	0x2040d984
  40d8bc:	0040d3f8 	.word	0x0040d3f8
  40d8c0:	0040d460 	.word	0x0040d460
  40d8c4:	2040dd0c 	.word	0x2040dd0c
  40d8c8:	2040dd1c 	.word	0x2040dd1c
  40d8cc:	00412924 	.word	0x00412924
  40d8d0:	2040da88 	.word	0x2040da88
  40d8d4:	0040d430 	.word	0x0040d430
  40d8d8:	2040da08 	.word	0x2040da08

Disassembly of section .text.wc_HmacFinal%69:

0040d8dc <wc_HmacFinal>:

int wc_HmacFinal(Hmac* hmac, byte* hash)
{
    int ret;

    if (hmac == NULL || hash == NULL) {
  40d8dc:	2800      	cmp	r0, #0
  40d8de:	f000 80c1 	beq.w	40da64 <.LCFI6>
{
  40d8e2:	b570      	push	{r4, r5, r6, lr}

0040d8e4 <.LCFI5>:
  40d8e4:	4604      	mov	r4, r0
    if (hmac == NULL || hash == NULL) {
  40d8e6:	2900      	cmp	r1, #0
  40d8e8:	f000 80b6 	beq.w	40da58 <.LVL194>
  40d8ec:	460d      	mov	r5, r1
            (byte*)hmac->ipad, hmac->keyLen, hash, NULL, hashLen);
    #endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    if (!hmac->innerHashKeyed) {
  40d8ee:	f890 3225 	ldrb.w	r3, [r0, #549]	; 0x225
  40d8f2:	b14b      	cbz	r3, 40d908 <.LVL146>

0040d8f4 <.LVL145>:
        ret = HmacKeyInnerHash(hmac);
        if (ret != 0)
            return ret;
    }

    switch (hmac->macType) {
  40d8f4:	f894 3224 	ldrb.w	r3, [r4, #548]	; 0x224
  40d8f8:	2b05      	cmp	r3, #5
  40d8fa:	f200 80b0 	bhi.w	40da5e <.LVL195>
  40d8fe:	e8df f003 	tbb	[pc, r3]
  40d902:	2b09      	.short	0x2b09
  40d904:	6b8bae4b 	.word	0x6b8bae4b

0040d908 <.LVL146>:
        ret = HmacKeyInnerHash(hmac);
  40d908:	f004 fa6e 	bl	411de8 <HmacKeyInnerHash>

0040d90c <.LVL147>:
        if (ret != 0)
  40d90c:	4603      	mov	r3, r0
  40d90e:	2800      	cmp	r0, #0
  40d910:	d0f0      	beq.n	40d8f4 <.LVL145>
  40d912:	e01f      	b.n	40d954 <.LVL157>

0040d914 <.LVL148>:
    #ifndef NO_MD5
        case MD5:
            ret = wc_Md5Final(&hmac->hash.md5, (byte*)hmac->innerHash);
  40d914:	f504 76f0 	add.w	r6, r4, #480	; 0x1e0
  40d918:	4631      	mov	r1, r6
  40d91a:	4620      	mov	r0, r4
  40d91c:	f002 f9b0 	bl	40fc80 <wc_Md5Final>

0040d920 <.LVL149>:
            if (ret != 0)
  40d920:	4603      	mov	r3, r0
  40d922:	b9b8      	cbnz	r0, 40d954 <.LVL157>
                break;
            ret = wc_Md5Update(&hmac->hash.md5, (byte*)hmac->opad,
  40d924:	2240      	movs	r2, #64	; 0x40
  40d926:	f504 71b0 	add.w	r1, r4, #352	; 0x160
  40d92a:	4620      	mov	r0, r4

0040d92c <.LVL150>:
  40d92c:	f003 fbf4 	bl	411118 <.LFE23>

0040d930 <.LVL151>:
                                                                MD5_BLOCK_SIZE);
            if (ret != 0)
  40d930:	4603      	mov	r3, r0
  40d932:	b978      	cbnz	r0, 40d954 <.LVL157>
                break;
            ret = wc_Md5Update(&hmac->hash.md5, (byte*)hmac->innerHash,
  40d934:	2210      	movs	r2, #16
  40d936:	4631      	mov	r1, r6
  40d938:	4620      	mov	r0, r4

0040d93a <.LVL152>:
  40d93a:	f003 fbed 	bl	411118 <.LFE23>

0040d93e <.LVL153>:
                                                               MD5_DIGEST_SIZE);
            if (ret != 0)
  40d93e:	4603      	mov	r3, r0
  40d940:	b940      	cbnz	r0, 40d954 <.LVL157>
                break;
            ret = wc_Md5Final(&hmac->hash.md5, hash);
  40d942:	4629      	mov	r1, r5
  40d944:	4620      	mov	r0, r4

0040d946 <.LVL154>:
  40d946:	f002 f99b 	bl	40fc80 <wc_Md5Final>

0040d94a <.LVL155>:
  40d94a:	4603      	mov	r3, r0

0040d94c <.LVL156>:
        default:
            ret = BAD_FUNC_ARG;
            break;
    }

    if (ret == 0) {
  40d94c:	b913      	cbnz	r3, 40d954 <.LVL157>
        hmac->innerHashKeyed = 0;
  40d94e:	2200      	movs	r2, #0
  40d950:	f884 2225 	strb.w	r2, [r4, #549]	; 0x225

0040d954 <.LVL157>:
    }

    return ret;
}
  40d954:	4618      	mov	r0, r3
  40d956:	bd70      	pop	{r4, r5, r6, pc}

0040d958 <.LVL158>:
            ret = wc_ShaFinal(&hmac->hash.sha, (byte*)hmac->innerHash);
  40d958:	f504 76f0 	add.w	r6, r4, #480	; 0x1e0
  40d95c:	4631      	mov	r1, r6
  40d95e:	4620      	mov	r0, r4
  40d960:	f000 fce8 	bl	40e334 <.LFE172>

0040d964 <.LVL159>:
            if (ret != 0)
  40d964:	4603      	mov	r3, r0
  40d966:	2800      	cmp	r0, #0
  40d968:	d1f4      	bne.n	40d954 <.LVL157>
            ret = wc_ShaUpdate(&hmac->hash.sha, (byte*)hmac->opad,
  40d96a:	2240      	movs	r2, #64	; 0x40
  40d96c:	f504 71b0 	add.w	r1, r4, #352	; 0x160
  40d970:	4620      	mov	r0, r4

0040d972 <.LVL160>:
  40d972:	f002 fc75 	bl	410260 <.LFE27>

0040d976 <.LVL161>:
            if (ret != 0)
  40d976:	4603      	mov	r3, r0
  40d978:	2800      	cmp	r0, #0
  40d97a:	d1eb      	bne.n	40d954 <.LVL157>
            ret = wc_ShaUpdate(&hmac->hash.sha, (byte*)hmac->innerHash,
  40d97c:	2214      	movs	r2, #20
  40d97e:	4631      	mov	r1, r6
  40d980:	4620      	mov	r0, r4

0040d982 <.LVL162>:
  40d982:	f002 fc6d 	bl	410260 <.LFE27>

0040d986 <.LVL163>:
            if (ret != 0)
  40d986:	4603      	mov	r3, r0
  40d988:	2800      	cmp	r0, #0
  40d98a:	d1e3      	bne.n	40d954 <.LVL157>
            ret = wc_ShaFinal(&hmac->hash.sha, hash);
  40d98c:	4629      	mov	r1, r5
  40d98e:	4620      	mov	r0, r4

0040d990 <.LVL164>:
  40d990:	f000 fcd0 	bl	40e334 <.LFE172>

0040d994 <.LVL165>:
  40d994:	4603      	mov	r3, r0

0040d996 <.LVL166>:
            break;
  40d996:	e7d9      	b.n	40d94c <.LVL156>

0040d998 <.LVL167>:
            ret = wc_Sha256Final(&hmac->hash.sha256, (byte*)hmac->innerHash);
  40d998:	f504 76f0 	add.w	r6, r4, #480	; 0x1e0
  40d99c:	4631      	mov	r1, r6
  40d99e:	4620      	mov	r0, r4
  40d9a0:	f000 f9ee 	bl	40dd80 <.LFE177>

0040d9a4 <.LVL168>:
            if (ret != 0)
  40d9a4:	4603      	mov	r3, r0
  40d9a6:	2800      	cmp	r0, #0
  40d9a8:	d1d4      	bne.n	40d954 <.LVL157>
            ret = wc_Sha256Update(&hmac->hash.sha256, (byte*)hmac->opad,
  40d9aa:	2240      	movs	r2, #64	; 0x40
  40d9ac:	f504 71b0 	add.w	r1, r4, #352	; 0x160
  40d9b0:	4620      	mov	r0, r4

0040d9b2 <.LVL169>:
  40d9b2:	f002 fcb0 	bl	410316 <.LFE18>

0040d9b6 <.LVL170>:
            if (ret != 0)
  40d9b6:	4603      	mov	r3, r0
  40d9b8:	2800      	cmp	r0, #0
  40d9ba:	d1cb      	bne.n	40d954 <.LVL157>
            ret = wc_Sha256Update(&hmac->hash.sha256, (byte*)hmac->innerHash,
  40d9bc:	2220      	movs	r2, #32
  40d9be:	4631      	mov	r1, r6
  40d9c0:	4620      	mov	r0, r4

0040d9c2 <.LVL171>:
  40d9c2:	f002 fca8 	bl	410316 <.LFE18>

0040d9c6 <.LVL172>:
            if (ret != 0)
  40d9c6:	4603      	mov	r3, r0
  40d9c8:	2800      	cmp	r0, #0
  40d9ca:	d1c3      	bne.n	40d954 <.LVL157>
            ret = wc_Sha256Final(&hmac->hash.sha256, hash);
  40d9cc:	4629      	mov	r1, r5
  40d9ce:	4620      	mov	r0, r4

0040d9d0 <.LVL173>:
  40d9d0:	f000 f9d6 	bl	40dd80 <.LFE177>

0040d9d4 <.LVL174>:
  40d9d4:	4603      	mov	r3, r0

0040d9d6 <.LVL175>:
            break;
  40d9d6:	e7b9      	b.n	40d94c <.LVL156>

0040d9d8 <.LVL176>:
            ret = wc_Sha384Final(&hmac->hash.sha384, (byte*)hmac->innerHash);
  40d9d8:	f504 76f0 	add.w	r6, r4, #480	; 0x1e0
  40d9dc:	4631      	mov	r1, r6
  40d9de:	4620      	mov	r0, r4
  40d9e0:	f7ff f906 	bl	40cbf0 <.LFE21>

0040d9e4 <.LVL177>:
            if (ret != 0)
  40d9e4:	4603      	mov	r3, r0
  40d9e6:	2800      	cmp	r0, #0
  40d9e8:	d1b4      	bne.n	40d954 <.LVL157>
            ret = wc_Sha384Update(&hmac->hash.sha384, (byte*)hmac->opad,
  40d9ea:	2280      	movs	r2, #128	; 0x80
  40d9ec:	f504 71b0 	add.w	r1, r4, #352	; 0x160
  40d9f0:	4620      	mov	r0, r4

0040d9f2 <.LVL178>:
  40d9f2:	f001 fdee 	bl	40f5d2 <.LBE719>

0040d9f6 <.LVL179>:
            if (ret != 0)
  40d9f6:	4603      	mov	r3, r0
  40d9f8:	2800      	cmp	r0, #0
  40d9fa:	d1ab      	bne.n	40d954 <.LVL157>
            ret = wc_Sha384Update(&hmac->hash.sha384, (byte*)hmac->innerHash,
  40d9fc:	2230      	movs	r2, #48	; 0x30
  40d9fe:	4631      	mov	r1, r6
  40da00:	4620      	mov	r0, r4

0040da02 <.LVL180>:
  40da02:	f001 fde6 	bl	40f5d2 <.LBE719>

0040da06 <.LVL181>:
            if (ret != 0)
  40da06:	4603      	mov	r3, r0
  40da08:	2800      	cmp	r0, #0
  40da0a:	d1a3      	bne.n	40d954 <.LVL157>
            ret = wc_Sha384Final(&hmac->hash.sha384, hash);
  40da0c:	4629      	mov	r1, r5
  40da0e:	4620      	mov	r0, r4

0040da10 <.LVL182>:
  40da10:	f7ff f8ee 	bl	40cbf0 <.LFE21>

0040da14 <.LVL183>:
  40da14:	4603      	mov	r3, r0

0040da16 <.LVL184>:
            break;
  40da16:	e799      	b.n	40d94c <.LVL156>

0040da18 <.LVL185>:
            ret = wc_Sha512Final(&hmac->hash.sha512, (byte*)hmac->innerHash);
  40da18:	f504 76f0 	add.w	r6, r4, #480	; 0x1e0
  40da1c:	4631      	mov	r1, r6
  40da1e:	4620      	mov	r0, r4
  40da20:	f7fe ff9e 	bl	40c960 <wc_Sha512Final>

0040da24 <.LVL186>:
            if (ret != 0)
  40da24:	4603      	mov	r3, r0
  40da26:	2800      	cmp	r0, #0
  40da28:	d194      	bne.n	40d954 <.LVL157>
            ret = wc_Sha512Update(&hmac->hash.sha512, (byte*)hmac->opad,
  40da2a:	2280      	movs	r2, #128	; 0x80
  40da2c:	f504 71b0 	add.w	r1, r4, #352	; 0x160
  40da30:	4620      	mov	r0, r4

0040da32 <.LVL187>:
  40da32:	f001 fd59 	bl	40f4e8 <.LFE24>

0040da36 <.LVL188>:
            if (ret != 0)
  40da36:	4603      	mov	r3, r0
  40da38:	2800      	cmp	r0, #0
  40da3a:	d18b      	bne.n	40d954 <.LVL157>
            ret = wc_Sha512Update(&hmac->hash.sha512, (byte*)hmac->innerHash,
  40da3c:	2240      	movs	r2, #64	; 0x40
  40da3e:	4631      	mov	r1, r6
  40da40:	4620      	mov	r0, r4

0040da42 <.LVL189>:
  40da42:	f001 fd51 	bl	40f4e8 <.LFE24>

0040da46 <.LVL190>:
            if (ret != 0)
  40da46:	4603      	mov	r3, r0
  40da48:	2800      	cmp	r0, #0
  40da4a:	d183      	bne.n	40d954 <.LVL157>
            ret = wc_Sha512Final(&hmac->hash.sha512, hash);
  40da4c:	4629      	mov	r1, r5
  40da4e:	4620      	mov	r0, r4

0040da50 <.LVL191>:
  40da50:	f7fe ff86 	bl	40c960 <wc_Sha512Final>

0040da54 <.LVL192>:
  40da54:	4603      	mov	r3, r0

0040da56 <.LVL193>:
            break;
  40da56:	e779      	b.n	40d94c <.LVL156>

0040da58 <.LVL194>:
        return BAD_FUNC_ARG;
  40da58:	f06f 03ac 	mvn.w	r3, #172	; 0xac
  40da5c:	e77a      	b.n	40d954 <.LVL157>

0040da5e <.LVL195>:
            ret = BAD_FUNC_ARG;
  40da5e:	f06f 03ac 	mvn.w	r3, #172	; 0xac
  40da62:	e777      	b.n	40d954 <.LVL157>

0040da64 <.LCFI6>:
        return BAD_FUNC_ARG;
  40da64:	f06f 03ac 	mvn.w	r3, #172	; 0xac
}
  40da68:	4618      	mov	r0, r3

0040da6a <.LVL197>:
  40da6a:	4770      	bx	lr

Disassembly of section .text.CommandHelp%70:

0040da6c <CommandHelp>:
{
  40da6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

0040da70 <.LCFI16>:
  40da70:	4604      	mov	r4, r0
    const void* cmdIoParam = pCmdIO->cmdIoParam;
  40da72:	f8d0 5090 	ldr.w	r5, [r0, #144]	; 0x90
    if(argc == 1)
  40da76:	2901      	cmp	r1, #1
  40da78:	d004      	beq.n	40da84 <.LCFI16+0x14>
  40da7a:	4691      	mov	r9, r2
  40da7c:	4e59      	ldr	r6, [pc, #356]	; (40dbe4 <.LVL103+0x4>)
        for (groupIx=0; groupIx < MAX_CMD_GROUP; groupIx++)
  40da7e:	f106 0780 	add.w	r7, r6, #128	; 0x80
  40da82:	e067      	b.n	40db54 <.LVL85+0x6>
  40da84:	2200      	movs	r2, #0

0040da86 <.LVL65>:
  40da86:	4e57      	ldr	r6, [pc, #348]	; (40dbe4 <.LVL103+0x4>)

0040da88 <.LBB10>:
                (*pCmdIO->pCmdApi->msg)(cmdIoParam, LINE_TERM " *** ");
  40da88:	4f57      	ldr	r7, [pc, #348]	; (40dbe8 <.LVL103+0x8>)
  40da8a:	f107 0954 	add.w	r9, r7, #84	; 0x54
        for (groupIx=0; groupIx < MAX_CMD_GROUP; groupIx++)
  40da8e:	f106 0880 	add.w	r8, r6, #128	; 0x80
  40da92:	e01c      	b.n	40dace <.LVL71+0x6>

0040da94 <.LVL66>:
                (*pCmdIO->pCmdApi->msg)(cmdIoParam, LINE_TERM " *** ");
  40da94:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  40da98:	681b      	ldr	r3, [r3, #0]
  40da9a:	4649      	mov	r1, r9
  40da9c:	4628      	mov	r0, r5
  40da9e:	4798      	blx	r3

0040daa0 <.LVL67>:
                (*pCmdIO->pCmdApi->msg)(cmdIoParam, pTbl->cmdGroupName);
  40daa0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  40daa4:	681b      	ldr	r3, [r3, #0]
  40daa6:	68b1      	ldr	r1, [r6, #8]
  40daa8:	4628      	mov	r0, r5
  40daaa:	4798      	blx	r3

0040daac <.LVL68>:
                (*pCmdIO->pCmdApi->msg)(cmdIoParam, pTbl->cmdMenuStr);
  40daac:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  40dab0:	681b      	ldr	r3, [r3, #0]
  40dab2:	68f1      	ldr	r1, [r6, #12]
  40dab4:	4628      	mov	r0, r5
  40dab6:	4798      	blx	r3

0040dab8 <.LVL69>:
                (*pCmdIO->pCmdApi->msg)(cmdIoParam, " ***");
  40dab8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  40dabc:	681b      	ldr	r3, [r3, #0]
  40dabe:	f107 015c 	add.w	r1, r7, #92	; 0x5c
  40dac2:	4628      	mov	r0, r5
  40dac4:	4798      	blx	r3

0040dac6 <.LVL70>:
  40dac6:	2201      	movs	r2, #1

0040dac8 <.LVL71>:
            pTbl++;
  40dac8:	3610      	adds	r6, #16
        for (groupIx=0; groupIx < MAX_CMD_GROUP; groupIx++)
  40daca:	4546      	cmp	r6, r8
  40dacc:	d00c      	beq.n	40dae8 <.LVL75>
            if (pTbl->pCmd)
  40dace:	6873      	ldr	r3, [r6, #4]
  40dad0:	2b00      	cmp	r3, #0
  40dad2:	d0f9      	beq.n	40dac8 <.LVL71>
                if(!hadHeader)
  40dad4:	2a00      	cmp	r2, #0
  40dad6:	d1dd      	bne.n	40da94 <.LVL66>
                    (*pCmdIO->pCmdApi->msg)(cmdIoParam, LINE_TERM "------- Supported command groups ------");
  40dad8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  40dadc:	681b      	ldr	r3, [r3, #0]
  40dade:	f107 0128 	add.w	r1, r7, #40	; 0x28
  40dae2:	4628      	mov	r0, r5
  40dae4:	4798      	blx	r3

0040dae6 <.LVL74>:
  40dae6:	e7d5      	b.n	40da94 <.LVL66>

0040dae8 <.LVL75>:
        (*pCmdIO->pCmdApi->msg)(cmdIoParam, LINE_TERM "---------- Built in commands ----------");
  40dae8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  40daec:	681b      	ldr	r3, [r3, #0]
  40daee:	493f      	ldr	r1, [pc, #252]	; (40dbec <.LVL103+0xc>)
  40daf0:	4628      	mov	r0, r5
  40daf2:	4798      	blx	r3

0040daf4 <.LVL76>:
  40daf4:	4b3e      	ldr	r3, [pc, #248]	; (40dbf0 <.LVL103+0x10>)
  40daf6:	f103 060c 	add.w	r6, r3, #12

0040dafa <.LVL77>:
  40dafa:	f103 0830 	add.w	r8, r3, #48	; 0x30
            (*pCmdIO->pCmdApi->msg)(cmdIoParam, LINE_TERM " *** ");
  40dafe:	4f3a      	ldr	r7, [pc, #232]	; (40dbe8 <.LVL103+0x8>)
  40db00:	f107 0954 	add.w	r9, r7, #84	; 0x54
            (*pCmdIO->pCmdApi->msg)(cmdIoParam, " ***");
  40db04:	375c      	adds	r7, #92	; 0x5c

0040db06 <.LVL78>:
            (*pCmdIO->pCmdApi->msg)(cmdIoParam, LINE_TERM " *** ");
  40db06:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  40db0a:	681b      	ldr	r3, [r3, #0]
  40db0c:	4649      	mov	r1, r9
  40db0e:	4628      	mov	r0, r5
  40db10:	4798      	blx	r3

0040db12 <.LVL79>:
            (*pCmdIO->pCmdApi->msg)(cmdIoParam, pDcpt->cmdStr);
  40db12:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  40db16:	681b      	ldr	r3, [r3, #0]
  40db18:	f856 1c0c 	ldr.w	r1, [r6, #-12]
  40db1c:	4628      	mov	r0, r5
  40db1e:	4798      	blx	r3

0040db20 <.LVL80>:
            (*pCmdIO->pCmdApi->msg)(cmdIoParam, pDcpt->cmdDescr);
  40db20:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  40db24:	681b      	ldr	r3, [r3, #0]
  40db26:	f856 1c04 	ldr.w	r1, [r6, #-4]
  40db2a:	4628      	mov	r0, r5
  40db2c:	4798      	blx	r3

0040db2e <.LVL81>:
            (*pCmdIO->pCmdApi->msg)(cmdIoParam, " ***");
  40db2e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  40db32:	681b      	ldr	r3, [r3, #0]
  40db34:	4639      	mov	r1, r7
  40db36:	4628      	mov	r0, r5
  40db38:	4798      	blx	r3

0040db3a <.LVL82>:
  40db3a:	360c      	adds	r6, #12

0040db3c <.LVL83>:
        for(ix = 0, pDcpt = _builtinCmdTbl; ix < sizeof(_builtinCmdTbl)/sizeof(*_builtinCmdTbl); ix++, pDcpt++)
  40db3c:	4546      	cmp	r6, r8
  40db3e:	d1e2      	bne.n	40db06 <.LVL78>
        (*pCmdIO->pCmdApi->msg)(cmdIoParam, LINE_TERM);
  40db40:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  40db44:	681b      	ldr	r3, [r3, #0]
  40db46:	492b      	ldr	r1, [pc, #172]	; (40dbf4 <.LVL103+0x14>)
  40db48:	4628      	mov	r0, r5
  40db4a:	4798      	blx	r3

0040db4c <.LBE10>:
  40db4c:	e03f      	b.n	40dbce <.LVL101>

0040db4e <.LVL85>:
            pTbl++;
  40db4e:	3610      	adds	r6, #16
        for (groupIx=0; groupIx < MAX_CMD_GROUP; groupIx++)
  40db50:	42be      	cmp	r6, r7
  40db52:	d03f      	beq.n	40dbd4 <.LVL102>
            if (pTbl->pCmd)
  40db54:	6873      	ldr	r3, [r6, #4]
  40db56:	2b00      	cmp	r3, #0
  40db58:	d0f9      	beq.n	40db4e <.LVL85>
                if(strcmp(pTbl->cmdGroupName, argv[1]) == 0)
  40db5a:	f8d9 1004 	ldr.w	r1, [r9, #4]
  40db5e:	68b0      	ldr	r0, [r6, #8]
  40db60:	f7fe fd92 	bl	40c688 <strcmp>

0040db64 <.LVL88>:
  40db64:	4680      	mov	r8, r0
  40db66:	2800      	cmp	r0, #0
  40db68:	d1f1      	bne.n	40db4e <.LVL85>

0040db6a <.LVL89>:
        if(pDTbl)
  40db6a:	2e00      	cmp	r6, #0
  40db6c:	d032      	beq.n	40dbd4 <.LVL102>

0040db6e <.LVL90>:
            for(ix = 0, pDcpt = pDTbl->pCmd; ix < pDTbl->nCmds; ix++, pDcpt++)
  40db6e:	6877      	ldr	r7, [r6, #4]

0040db70 <.LVL91>:
  40db70:	6833      	ldr	r3, [r6, #0]
  40db72:	2b00      	cmp	r3, #0
  40db74:	dd25      	ble.n	40dbc2 <.LVL100>
  40db76:	370c      	adds	r7, #12

0040db78 <.LVL92>:
                (*pCmdIO->pCmdApi->msg)(cmdIoParam, LINE_TERM " *** ");
  40db78:	4b1b      	ldr	r3, [pc, #108]	; (40dbe8 <.LVL103+0x8>)
  40db7a:	f103 0a54 	add.w	sl, r3, #84	; 0x54
                (*pCmdIO->pCmdApi->msg)(cmdIoParam, " ***");
  40db7e:	f103 095c 	add.w	r9, r3, #92	; 0x5c

0040db82 <.LVL93>:
                (*pCmdIO->pCmdApi->msg)(cmdIoParam, LINE_TERM " *** ");
  40db82:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  40db86:	681b      	ldr	r3, [r3, #0]
  40db88:	4651      	mov	r1, sl
  40db8a:	4628      	mov	r0, r5
  40db8c:	4798      	blx	r3

0040db8e <.LVL94>:
                (*pCmdIO->pCmdApi->msg)(cmdIoParam, pDcpt->cmdStr);
  40db8e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  40db92:	681b      	ldr	r3, [r3, #0]
  40db94:	f857 1c0c 	ldr.w	r1, [r7, #-12]
  40db98:	4628      	mov	r0, r5
  40db9a:	4798      	blx	r3

0040db9c <.LVL95>:
                (*pCmdIO->pCmdApi->msg)(cmdIoParam, pDcpt->cmdDescr);
  40db9c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  40dba0:	681b      	ldr	r3, [r3, #0]
  40dba2:	f857 1c04 	ldr.w	r1, [r7, #-4]
  40dba6:	4628      	mov	r0, r5
  40dba8:	4798      	blx	r3

0040dbaa <.LVL96>:
                (*pCmdIO->pCmdApi->msg)(cmdIoParam, " ***");
  40dbaa:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  40dbae:	681b      	ldr	r3, [r3, #0]
  40dbb0:	4649      	mov	r1, r9
  40dbb2:	4628      	mov	r0, r5
  40dbb4:	4798      	blx	r3

0040dbb6 <.LVL97>:
            for(ix = 0, pDcpt = pDTbl->pCmd; ix < pDTbl->nCmds; ix++, pDcpt++)
  40dbb6:	f108 0801 	add.w	r8, r8, #1

0040dbba <.LVL98>:
  40dbba:	370c      	adds	r7, #12

0040dbbc <.LVL99>:
  40dbbc:	6833      	ldr	r3, [r6, #0]
  40dbbe:	4543      	cmp	r3, r8
  40dbc0:	dcdf      	bgt.n	40db82 <.LVL93>

0040dbc2 <.LVL100>:
            (*pCmdIO->pCmdApi->msg)(cmdIoParam, LINE_TERM);
  40dbc2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  40dbc6:	681b      	ldr	r3, [r3, #0]
  40dbc8:	490a      	ldr	r1, [pc, #40]	; (40dbf4 <.LVL103+0x14>)
  40dbca:	4628      	mov	r0, r5
  40dbcc:	4798      	blx	r3

0040dbce <.LVL101>:
}
  40dbce:	2000      	movs	r0, #0
  40dbd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040dbd4 <.LVL102>:
            (*pCmdIO->pCmdApi->msg)(cmdIoParam, LINE_TERM "Unknown command group. Try help" LINE_TERM );
  40dbd4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  40dbd8:	681b      	ldr	r3, [r3, #0]
  40dbda:	4907      	ldr	r1, [pc, #28]	; (40dbf8 <.LVL103+0x18>)
  40dbdc:	4628      	mov	r0, r5
  40dbde:	4798      	blx	r3

0040dbe0 <.LVL103>:
  40dbe0:	e7f5      	b.n	40dbce <.LVL101>
  40dbe2:	bf00      	nop
  40dbe4:	2040da08 	.word	0x2040da08
  40dbe8:	0040d340 	.word	0x0040d340
  40dbec:	0040d3a4 	.word	0x0040d3a4
  40dbf0:	00412924 	.word	0x00412924
  40dbf4:	0040d3d0 	.word	0x0040d3d0
  40dbf8:	0040d3d4 	.word	0x0040d3d4

Disassembly of section .text.aes_test%71:

0040dbfc <aes_test>:
{
  40dbfc:	b5f0      	push	{r4, r5, r6, r7, lr}

0040dbfe <.LCFI43>:
  40dbfe:	f2ad 4d44 	subw	sp, sp, #1092	; 0x444

0040dc02 <.LCFI44>:
    const byte msg[] = { /* "now is the time for all " w/o trailing 0 */
  40dc02:	4c5d      	ldr	r4, [pc, #372]	; (40dd78 <.LCFI45+0x2>)
  40dc04:	ad58      	add	r5, sp, #352	; 0x160
  40dc06:	f8d4 07b0 	ldr.w	r0, [r4, #1968]	; 0x7b0
  40dc0a:	f8d4 17b4 	ldr.w	r1, [r4, #1972]	; 0x7b4
  40dc0e:	f8d4 27b8 	ldr.w	r2, [r4, #1976]	; 0x7b8
  40dc12:	f8d4 37bc 	ldr.w	r3, [r4, #1980]	; 0x7bc
  40dc16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    const byte verify[] =
  40dc18:	ad54      	add	r5, sp, #336	; 0x150
  40dc1a:	f8d4 07c0 	ldr.w	r0, [r4, #1984]	; 0x7c0
  40dc1e:	f8d4 17c4 	ldr.w	r1, [r4, #1988]	; 0x7c4
  40dc22:	f8d4 27c8 	ldr.w	r2, [r4, #1992]	; 0x7c8
  40dc26:	f8d4 37cc 	ldr.w	r3, [r4, #1996]	; 0x7cc
  40dc2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    byte key[] = "0123456789abcdef   ";  /* align */
  40dc2c:	ad4f      	add	r5, sp, #316	; 0x13c
  40dc2e:	f504 66fa 	add.w	r6, r4, #2000	; 0x7d0
  40dc32:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  40dc34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  40dc36:	6833      	ldr	r3, [r6, #0]
  40dc38:	602b      	str	r3, [r5, #0]
    byte iv[]  = "1234567890abcdef   ";  /* align */
  40dc3a:	ad4a      	add	r5, sp, #296	; 0x128
  40dc3c:	f204 74e4 	addw	r4, r4, #2020	; 0x7e4
  40dc40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  40dc42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  40dc44:	6823      	ldr	r3, [r4, #0]
  40dc46:	602b      	str	r3, [r5, #0]
    CRYPT_AES_KeySet(&enc, key, AES_BLOCK_SIZE, iv, AES_ENCRYPTION);
  40dc48:	2400      	movs	r4, #0
  40dc4a:	9400      	str	r4, [sp, #0]
  40dc4c:	ab4a      	add	r3, sp, #296	; 0x128
  40dc4e:	2210      	movs	r2, #16
  40dc50:	a94f      	add	r1, sp, #316	; 0x13c
  40dc52:	a8b6      	add	r0, sp, #728	; 0x2d8
  40dc54:	f004 fe9c 	bl	412990 <.LFE0>

0040dc58 <.LVL93>:
    CRYPT_AES_KeySet(&dec, key, AES_BLOCK_SIZE, iv, AES_DECRYPTION);
  40dc58:	2301      	movs	r3, #1
  40dc5a:	9300      	str	r3, [sp, #0]
  40dc5c:	ab4a      	add	r3, sp, #296	; 0x128
  40dc5e:	2210      	movs	r2, #16
  40dc60:	a94f      	add	r1, sp, #316	; 0x13c
  40dc62:	a85c      	add	r0, sp, #368	; 0x170
  40dc64:	f004 fe94 	bl	412990 <.LFE0>

0040dc68 <.LVL94>:
    CRYPT_AES_CBC_Encrypt(&enc, cipher, msg,   AES_BLOCK_SIZE);
  40dc68:	2310      	movs	r3, #16
  40dc6a:	aa58      	add	r2, sp, #352	; 0x160
  40dc6c:	a93a      	add	r1, sp, #232	; 0xe8
  40dc6e:	a8b6      	add	r0, sp, #728	; 0x2d8
  40dc70:	f004 ff0c 	bl	412a8c <.LFE27>

0040dc74 <.LVL95>:
    CRYPT_AES_CBC_Decrypt(&dec, plain, verify, AES_BLOCK_SIZE);
  40dc74:	2310      	movs	r3, #16
  40dc76:	aa54      	add	r2, sp, #336	; 0x150
  40dc78:	a92a      	add	r1, sp, #168	; 0xa8
  40dc7a:	a85c      	add	r0, sp, #368	; 0x170
  40dc7c:	f004 ff15 	bl	412aaa <.LFE30>

0040dc80 <.LVL96>:
    appData.aes_cbc_test_result = 0;
  40dc80:	4b3e      	ldr	r3, [pc, #248]	; (40dd7c <.LCFI45+0x6>)
  40dc82:	635c      	str	r4, [r3, #52]	; 0x34
    if (memcmp(plain, msg, AES_BLOCK_SIZE))
  40dc84:	2210      	movs	r2, #16
  40dc86:	a958      	add	r1, sp, #352	; 0x160
  40dc88:	a82a      	add	r0, sp, #168	; 0xa8
  40dc8a:	f004 f81d 	bl	411cc8 <memcmp>

0040dc8e <.LVL97>:
  40dc8e:	b110      	cbz	r0, 40dc96 <.LVL97+0x8>
        appData.aes_cbc_test_result = 2;
  40dc90:	2202      	movs	r2, #2
  40dc92:	4b3a      	ldr	r3, [pc, #232]	; (40dd7c <.LCFI45+0x6>)
  40dc94:	635a      	str	r2, [r3, #52]	; 0x34
    if (memcmp(cipher, verify, AES_BLOCK_SIZE))
  40dc96:	2210      	movs	r2, #16
  40dc98:	a954      	add	r1, sp, #336	; 0x150
  40dc9a:	a83a      	add	r0, sp, #232	; 0xe8
  40dc9c:	f004 f814 	bl	411cc8 <memcmp>

0040dca0 <.LVL98>:
  40dca0:	b118      	cbz	r0, 40dcaa <.LBB2>
        appData.aes_cbc_test_result++;
  40dca2:	4a36      	ldr	r2, [pc, #216]	; (40dd7c <.LCFI45+0x6>)
  40dca4:	6b53      	ldr	r3, [r2, #52]	; 0x34
  40dca6:	3301      	adds	r3, #1
  40dca8:	6353      	str	r3, [r2, #52]	; 0x34

0040dcaa <.LBB2>:
        const byte ctrKey[] =
  40dcaa:	4d33      	ldr	r5, [pc, #204]	; (40dd78 <.LCFI45+0x2>)
  40dcac:	ac02      	add	r4, sp, #8
  40dcae:	f8d5 07f8 	ldr.w	r0, [r5, #2040]	; 0x7f8
  40dcb2:	f8d5 17fc 	ldr.w	r1, [r5, #2044]	; 0x7fc
  40dcb6:	f8d5 2800 	ldr.w	r2, [r5, #2048]	; 0x800
  40dcba:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
  40dcbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        const byte ctrIv[] =
  40dcc0:	ac06      	add	r4, sp, #24
  40dcc2:	f8d5 0808 	ldr.w	r0, [r5, #2056]	; 0x808
  40dcc6:	f8d5 180c 	ldr.w	r1, [r5, #2060]	; 0x80c
  40dcca:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
  40dcce:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
  40dcd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        const byte ctrPlain[] =
  40dcd4:	f605 0418 	addw	r4, r5, #2072	; 0x818
  40dcd8:	af0a      	add	r7, sp, #40	; 0x28
  40dcda:	f605 0558 	addw	r5, r5, #2136	; 0x858
  40dcde:	463e      	mov	r6, r7
  40dce0:	6820      	ldr	r0, [r4, #0]
  40dce2:	6861      	ldr	r1, [r4, #4]
  40dce4:	68a2      	ldr	r2, [r4, #8]
  40dce6:	68e3      	ldr	r3, [r4, #12]
  40dce8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  40dcea:	3410      	adds	r4, #16
  40dcec:	4637      	mov	r7, r6
  40dcee:	42ac      	cmp	r4, r5
  40dcf0:	d1f5      	bne.n	40dcde <.LBB2+0x34>
        const byte ctrCipher[] =
  40dcf2:	4e21      	ldr	r6, [pc, #132]	; (40dd78 <.LCFI45+0x2>)
  40dcf4:	f606 0458 	addw	r4, r6, #2136	; 0x858
  40dcf8:	af1a      	add	r7, sp, #104	; 0x68
  40dcfa:	f606 0698 	addw	r6, r6, #2200	; 0x898
  40dcfe:	463d      	mov	r5, r7
  40dd00:	6820      	ldr	r0, [r4, #0]
  40dd02:	6861      	ldr	r1, [r4, #4]
  40dd04:	68a2      	ldr	r2, [r4, #8]
  40dd06:	68e3      	ldr	r3, [r4, #12]
  40dd08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  40dd0a:	3410      	adds	r4, #16
  40dd0c:	462f      	mov	r7, r5
  40dd0e:	42b4      	cmp	r4, r6
  40dd10:	d1f5      	bne.n	40dcfe <.LBB2+0x54>
        CRYPT_AES_KeySet(&enc, ctrKey, AES_BLOCK_SIZE, ctrIv, AES_ENCRYPTION);
  40dd12:	2400      	movs	r4, #0
  40dd14:	9400      	str	r4, [sp, #0]
  40dd16:	ab06      	add	r3, sp, #24
  40dd18:	2210      	movs	r2, #16
  40dd1a:	a902      	add	r1, sp, #8
  40dd1c:	a8b6      	add	r0, sp, #728	; 0x2d8
  40dd1e:	f004 fe37 	bl	412990 <.LFE0>

0040dd22 <.LVL99>:
        CRYPT_AES_KeySet(&dec, ctrKey, AES_BLOCK_SIZE, ctrIv, AES_ENCRYPTION);
  40dd22:	9400      	str	r4, [sp, #0]
  40dd24:	ab06      	add	r3, sp, #24
  40dd26:	2210      	movs	r2, #16
  40dd28:	a902      	add	r1, sp, #8
  40dd2a:	a85c      	add	r0, sp, #368	; 0x170
  40dd2c:	f004 fe30 	bl	412990 <.LFE0>

0040dd30 <.LVL100>:
        CRYPT_AES_CTR_Encrypt(&enc, cipher, ctrPlain, AES_BLOCK_SIZE*4);
  40dd30:	2340      	movs	r3, #64	; 0x40
  40dd32:	aa0a      	add	r2, sp, #40	; 0x28
  40dd34:	a93a      	add	r1, sp, #232	; 0xe8
  40dd36:	a8b6      	add	r0, sp, #728	; 0x2d8
  40dd38:	f004 fec6 	bl	412ac8 <.LFE31>

0040dd3c <.LVL101>:
        CRYPT_AES_CTR_Encrypt(&dec, plain, ctrCipher, AES_BLOCK_SIZE*4);
  40dd3c:	2340      	movs	r3, #64	; 0x40
  40dd3e:	aa1a      	add	r2, sp, #104	; 0x68
  40dd40:	a92a      	add	r1, sp, #168	; 0xa8
  40dd42:	a85c      	add	r0, sp, #368	; 0x170
  40dd44:	f004 fec0 	bl	412ac8 <.LFE31>

0040dd48 <.LVL102>:
        appData.aes_ctr_test_result = 0;
  40dd48:	4b0c      	ldr	r3, [pc, #48]	; (40dd7c <.LCFI45+0x6>)
  40dd4a:	639c      	str	r4, [r3, #56]	; 0x38
        if (memcmp(plain, ctrPlain, AES_BLOCK_SIZE*4))
  40dd4c:	2240      	movs	r2, #64	; 0x40
  40dd4e:	a90a      	add	r1, sp, #40	; 0x28
  40dd50:	a82a      	add	r0, sp, #168	; 0xa8
  40dd52:	f003 ffb9 	bl	411cc8 <memcmp>

0040dd56 <.LVL103>:
  40dd56:	b110      	cbz	r0, 40dd5e <.LVL103+0x8>
            appData.aes_ctr_test_result = 2;
  40dd58:	2202      	movs	r2, #2
  40dd5a:	4b08      	ldr	r3, [pc, #32]	; (40dd7c <.LCFI45+0x6>)
  40dd5c:	639a      	str	r2, [r3, #56]	; 0x38
        if (memcmp(cipher, ctrCipher, AES_BLOCK_SIZE*4))
  40dd5e:	2240      	movs	r2, #64	; 0x40
  40dd60:	a91a      	add	r1, sp, #104	; 0x68
  40dd62:	a83a      	add	r0, sp, #232	; 0xe8
  40dd64:	f003 ffb0 	bl	411cc8 <memcmp>

0040dd68 <.LVL104>:
  40dd68:	b118      	cbz	r0, 40dd72 <.LBE2>
            appData.aes_ctr_test_result++;
  40dd6a:	4a04      	ldr	r2, [pc, #16]	; (40dd7c <.LCFI45+0x6>)
  40dd6c:	6b93      	ldr	r3, [r2, #56]	; 0x38
  40dd6e:	3301      	adds	r3, #1
  40dd70:	6393      	str	r3, [r2, #56]	; 0x38

0040dd72 <.LBE2>:
}
  40dd72:	f20d 4d44 	addw	sp, sp, #1092	; 0x444

0040dd76 <.LCFI45>:
  40dd76:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40dd78:	004089cc 	.word	0x004089cc
  40dd7c:	2040db08 	.word	0x2040db08

Disassembly of section .text.wc_Sha256Final%72:

0040dd80 <wc_Sha256Final>:

        return XTRANSFORM(sha256, local);
    }

    int wc_Sha256Final(Sha256* sha256, byte* hash)
    {
  40dd80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0040dd82 <.LCFI8>:
        int ret;

        if (sha256 == NULL || hash == NULL) {
  40dd82:	2800      	cmp	r0, #0
  40dd84:	f000 80a9 	beq.w	40deda <.LVL93>
  40dd88:	4604      	mov	r4, r0
  40dd8a:	2900      	cmp	r1, #0
  40dd8c:	f000 80a5 	beq.w	40deda <.LVL93>

0040dd90 <.LBB240>:
        byte* local = (byte*)sha256->buffer;
  40dd90:	f100 0620 	add.w	r6, r0, #32

0040dd94 <.LVL71>:
        if (sha256 == NULL) {
  40dd94:	2800      	cmp	r0, #0
  40dd96:	f000 80a3 	beq.w	40dee0 <.LBB265>
        AddLength(sha256, sha256->buffLen);  /* before adding pads */
  40dd9a:	6e03      	ldr	r3, [r0, #96]	; 0x60

0040dd9c <.LBB242>:
        word32 tmp = sha256->loLen;
  40dd9c:	6e40      	ldr	r0, [r0, #100]	; 0x64

0040dd9e <.LVL73>:
        if ( (sha256->loLen += len) < tmp)
  40dd9e:	181a      	adds	r2, r3, r0
  40dda0:	6662      	str	r2, [r4, #100]	; 0x64
  40dda2:	4290      	cmp	r0, r2
  40dda4:	d902      	bls.n	40ddac <.LVL73+0xe>
            sha256->hiLen++;                       /* carry low to high */
  40dda6:	6ea2      	ldr	r2, [r4, #104]	; 0x68
  40dda8:	3201      	adds	r2, #1
  40ddaa:	66a2      	str	r2, [r4, #104]	; 0x68
  40ddac:	460d      	mov	r5, r1

0040ddae <.LBE242>:
        local[sha256->buffLen++] = 0x80;     /* add 1 */
  40ddae:	1c5a      	adds	r2, r3, #1
  40ddb0:	6622      	str	r2, [r4, #96]	; 0x60
  40ddb2:	2280      	movs	r2, #128	; 0x80
  40ddb4:	54f2      	strb	r2, [r6, r3]
        if (sha256->buffLen > SHA256_PAD_SIZE) {
  40ddb6:	6e20      	ldr	r0, [r4, #96]	; 0x60
  40ddb8:	2838      	cmp	r0, #56	; 0x38
  40ddba:	d921      	bls.n	40de00 <.LVL81>
            XMEMSET(&local[sha256->buffLen], 0,
  40ddbc:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
  40ddc0:	2100      	movs	r1, #0

0040ddc2 <.LVL75>:
  40ddc2:	4430      	add	r0, r6
  40ddc4:	f002 ff5c 	bl	410c80 <memset>

0040ddc8 <.LVL76>:
            sha256->buffLen += SHA256_BLOCK_SIZE - sha256->buffLen;
  40ddc8:	2340      	movs	r3, #64	; 0x40
  40ddca:	6623      	str	r3, [r4, #96]	; 0x60

0040ddcc <.LVL77>:
  40ddcc:	f104 011c 	add.w	r1, r4, #28
  40ddd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c

0040ddd4 <.LBB244>:
        out[i] = ByteReverseWord32(in[i]);
  40ddd4:	684a      	ldr	r2, [r1, #4]

0040ddd6 <.LBB246>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40ddd6:	0a13      	lsrs	r3, r2, #8
  40ddd8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  40dddc:	0212      	lsls	r2, r2, #8
  40ddde:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
  40dde2:	4313      	orrs	r3, r2

0040dde4 <.LBB248>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40dde4:	ea4f 4333 	mov.w	r3, r3, ror #16

0040dde8 <.LBE246>:
        out[i] = ByteReverseWord32(in[i]);
  40dde8:	f841 3f04 	str.w	r3, [r1, #4]!
    for (i = 0; i < count; i++)
  40ddec:	4281      	cmp	r1, r0
  40ddee:	d1f1      	bne.n	40ddd4 <.LBB244>

0040ddf0 <.LBE244>:
            ret = XTRANSFORM(sha256, local);
  40ddf0:	4620      	mov	r0, r4
  40ddf2:	f7fd fe55 	bl	40baa0 <.LFE5>

0040ddf6 <.LVL80>:
            if (ret != 0)
  40ddf6:	4607      	mov	r7, r0
  40ddf8:	2800      	cmp	r0, #0
  40ddfa:	d16c      	bne.n	40ded6 <.LBE263>
            sha256->buffLen = 0;
  40ddfc:	2300      	movs	r3, #0
  40ddfe:	6623      	str	r3, [r4, #96]	; 0x60

0040de00 <.LVL81>:
        XMEMSET(&local[sha256->buffLen], 0, SHA256_PAD_SIZE - sha256->buffLen);
  40de00:	6e20      	ldr	r0, [r4, #96]	; 0x60
  40de02:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
  40de06:	2100      	movs	r1, #0
  40de08:	4430      	add	r0, r6
  40de0a:	f002 ff39 	bl	410c80 <memset>

0040de0e <.LVL82>:
        sha256->hiLen = (sha256->loLen >> (8 * sizeof(sha256->loLen) - 3)) +
  40de0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
                                                         (sha256->hiLen << 3);
  40de10:	6ea1      	ldr	r1, [r4, #104]	; 0x68
        sha256->hiLen = (sha256->loLen >> (8 * sizeof(sha256->loLen) - 3)) +
  40de12:	0f5a      	lsrs	r2, r3, #29
  40de14:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
  40de18:	66a2      	str	r2, [r4, #104]	; 0x68
        sha256->loLen = sha256->loLen << 3;
  40de1a:	00db      	lsls	r3, r3, #3
  40de1c:	6663      	str	r3, [r4, #100]	; 0x64

0040de1e <.LVL83>:
  40de1e:	f104 011c 	add.w	r1, r4, #28
  40de22:	f104 005c 	add.w	r0, r4, #92	; 0x5c

0040de26 <.LBB250>:
        out[i] = ByteReverseWord32(in[i]);
  40de26:	684a      	ldr	r2, [r1, #4]

0040de28 <.LBB252>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40de28:	0a13      	lsrs	r3, r2, #8
  40de2a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  40de2e:	0212      	lsls	r2, r2, #8
  40de30:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
  40de34:	4313      	orrs	r3, r2

0040de36 <.LBB254>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40de36:	ea4f 4333 	mov.w	r3, r3, ror #16

0040de3a <.LBE252>:
        out[i] = ByteReverseWord32(in[i]);
  40de3a:	f841 3f04 	str.w	r3, [r1, #4]!
    for (i = 0; i < count; i++)
  40de3e:	4281      	cmp	r1, r0
  40de40:	d1f1      	bne.n	40de26 <.LBB250>

0040de42 <.LBE250>:
        XMEMCPY(&local[SHA256_PAD_SIZE], &sha256->hiLen, sizeof(word32));
  40de42:	6ea3      	ldr	r3, [r4, #104]	; 0x68
  40de44:	65a3      	str	r3, [r4, #88]	; 0x58
        XMEMCPY(&local[SHA256_PAD_SIZE + sizeof(word32)], &sha256->loLen,
  40de46:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40de48:	65e3      	str	r3, [r4, #92]	; 0x5c
        return XTRANSFORM(sha256, local);
  40de4a:	4620      	mov	r0, r4
  40de4c:	f7fd fe28 	bl	40baa0 <.LFE5>

0040de50 <.LBE240>:
        #endif
        }
    #endif /* WOLFSSL_ASYNC_CRYPT */

        ret = Sha256Final(sha256);
        if (ret != 0)
  40de50:	4607      	mov	r7, r0
  40de52:	2800      	cmp	r0, #0
  40de54:	d13f      	bne.n	40ded6 <.LBE263>
            return ret;

    #if defined(LITTLE_ENDIAN_ORDER)
        ByteReverseWords(sha256->digest, sha256->digest, SHA256_DIGEST_SIZE);
  40de56:	4626      	mov	r6, r4

0040de58 <.LVL87>:
  40de58:	1f21      	subs	r1, r4, #4
  40de5a:	f104 001c 	add.w	r0, r4, #28

0040de5e <.LBB257>:
        out[i] = ByteReverseWord32(in[i]);
  40de5e:	684a      	ldr	r2, [r1, #4]

0040de60 <.LBB259>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40de60:	0a13      	lsrs	r3, r2, #8
  40de62:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  40de66:	0212      	lsls	r2, r2, #8
  40de68:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
  40de6c:	4313      	orrs	r3, r2

0040de6e <.LBB261>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40de6e:	ea4f 4333 	mov.w	r3, r3, ror #16

0040de72 <.LBE259>:
        out[i] = ByteReverseWord32(in[i]);
  40de72:	f841 3f04 	str.w	r3, [r1, #4]!
    for (i = 0; i < count; i++)
  40de76:	4281      	cmp	r1, r0
  40de78:	d1f1      	bne.n	40de5e <.LBB257>

0040de7a <.LBE257>:
    #endif
        XMEMCPY(hash, sha256->digest, SHA256_DIGEST_SIZE);
  40de7a:	6830      	ldr	r0, [r6, #0]
  40de7c:	6871      	ldr	r1, [r6, #4]
  40de7e:	68b2      	ldr	r2, [r6, #8]
  40de80:	68f3      	ldr	r3, [r6, #12]
  40de82:	6028      	str	r0, [r5, #0]
  40de84:	6069      	str	r1, [r5, #4]
  40de86:	60aa      	str	r2, [r5, #8]
  40de88:	60eb      	str	r3, [r5, #12]
  40de8a:	6930      	ldr	r0, [r6, #16]
  40de8c:	6971      	ldr	r1, [r6, #20]
  40de8e:	69b2      	ldr	r2, [r6, #24]
  40de90:	69f3      	ldr	r3, [r6, #28]
  40de92:	6128      	str	r0, [r5, #16]
  40de94:	6169      	str	r1, [r5, #20]
  40de96:	61aa      	str	r2, [r5, #24]
  40de98:	61eb      	str	r3, [r5, #28]

0040de9a <.LBB263>:
    XMEMSET(sha256->digest, 0, sizeof(sha256->digest));
  40de9a:	2220      	movs	r2, #32
  40de9c:	2100      	movs	r1, #0
  40de9e:	4620      	mov	r0, r4
  40dea0:	f002 feee 	bl	410c80 <memset>

0040dea4 <.LVL91>:
    sha256->digest[0] = 0x6A09E667L;
  40dea4:	4b10      	ldr	r3, [pc, #64]	; (40dee8 <.LVL95+0x4>)
  40dea6:	6023      	str	r3, [r4, #0]
    sha256->digest[1] = 0xBB67AE85L;
  40dea8:	4b10      	ldr	r3, [pc, #64]	; (40deec <.LVL95+0x8>)
  40deaa:	6063      	str	r3, [r4, #4]
    sha256->digest[2] = 0x3C6EF372L;
  40deac:	4b10      	ldr	r3, [pc, #64]	; (40def0 <.LVL95+0xc>)
  40deae:	60a3      	str	r3, [r4, #8]
    sha256->digest[3] = 0xA54FF53AL;
  40deb0:	4b10      	ldr	r3, [pc, #64]	; (40def4 <.LVL95+0x10>)
  40deb2:	60e3      	str	r3, [r4, #12]
    sha256->digest[4] = 0x510E527FL;
  40deb4:	4b10      	ldr	r3, [pc, #64]	; (40def8 <.LVL95+0x14>)
  40deb6:	6123      	str	r3, [r4, #16]
    sha256->digest[5] = 0x9B05688CL;
  40deb8:	4b10      	ldr	r3, [pc, #64]	; (40defc <.LVL95+0x18>)
  40deba:	6163      	str	r3, [r4, #20]
    sha256->digest[6] = 0x1F83D9ABL;
  40debc:	4b10      	ldr	r3, [pc, #64]	; (40df00 <.LVL95+0x1c>)
  40debe:	61a3      	str	r3, [r4, #24]
    sha256->digest[7] = 0x5BE0CD19L;
  40dec0:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
  40dec4:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
  40dec8:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
  40decc:	61e3      	str	r3, [r4, #28]
    sha256->buffLen = 0;
  40dece:	2300      	movs	r3, #0
  40ded0:	6623      	str	r3, [r4, #96]	; 0x60
    sha256->loLen   = 0;
  40ded2:	6663      	str	r3, [r4, #100]	; 0x64
    sha256->hiLen   = 0;
  40ded4:	66a3      	str	r3, [r4, #104]	; 0x68

0040ded6 <.LBE263>:

        return InitSha256(sha256);  /* reset state */
    }
  40ded6:	4638      	mov	r0, r7
  40ded8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0040deda <.LVL93>:
            return BAD_FUNC_ARG;
  40deda:	f06f 07ac 	mvn.w	r7, #172	; 0xac
  40dede:	e7fa      	b.n	40ded6 <.LBE263>

0040dee0 <.LBB265>:
            return BAD_FUNC_ARG;
  40dee0:	f06f 07ac 	mvn.w	r7, #172	; 0xac

0040dee4 <.LVL95>:
  40dee4:	e7f7      	b.n	40ded6 <.LBE263>
  40dee6:	bf00      	nop
  40dee8:	6a09e667 	.word	0x6a09e667
  40deec:	bb67ae85 	.word	0xbb67ae85
  40def0:	3c6ef372 	.word	0x3c6ef372
  40def4:	a54ff53a 	.word	0xa54ff53a
  40def8:	510e527f 	.word	0x510e527f
  40defc:	9b05688c 	.word	0x9b05688c
  40df00:	1f83d9ab 	.word	0x1f83d9ab

Disassembly of section .text.wc_AesCtrEncrypt%73:

0040df04 <wc_AesCtrEncrypt>:

        int wc_AesCtrEncrypt(Aes* aes, byte* out, const byte* in, word32 sz)
        {
            byte* tmp;

            if (aes == NULL || out == NULL || in == NULL) {
  40df04:	2a00      	cmp	r2, #0
  40df06:	bf18      	it	ne
  40df08:	2900      	cmpne	r1, #0
  40df0a:	f000 80b4 	beq.w	40e076 <.LCFI23>
        {
  40df0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0040df12 <.LCFI19>:
  40df12:	b083      	sub	sp, #12

0040df14 <.LCFI20>:
  40df14:	4604      	mov	r4, r0
  40df16:	461e      	mov	r6, r3
  40df18:	4689      	mov	r9, r1
  40df1a:	4690      	mov	r8, r2
            if (aes == NULL || out == NULL || in == NULL) {
  40df1c:	2800      	cmp	r0, #0
  40df1e:	f000 80a7 	beq.w	40e070 <.LVL252>
                return BAD_FUNC_ARG;
            }
            tmp = (byte*)aes->tmp + AES_BLOCK_SIZE - aes->left;
  40df22:	f500 7384 	add.w	r3, r0, #264	; 0x108

0040df26 <.LVL213>:
  40df26:	461a      	mov	r2, r3

0040df28 <.LVL214>:
  40df28:	9300      	str	r3, [sp, #0]
  40df2a:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
  40df2e:	f1c3 0110 	rsb	r1, r3, #16

0040df32 <.LVL215>:
  40df32:	4411      	add	r1, r2

0040df34 <.LVL216>:

            /* consume any unused bytes left in aes->tmp */
            while (aes->left && sz) {
  40df34:	b18e      	cbz	r6, 40df5a <.LVL222+0x6>
  40df36:	b183      	cbz	r3, 40df5a <.LVL222+0x6>

0040df38 <.LVL217>:
               *(out++) = *(in++) ^ *(tmp++);
  40df38:	f818 3b01 	ldrb.w	r3, [r8], #1

0040df3c <.LVL218>:
  40df3c:	f811 2b01 	ldrb.w	r2, [r1], #1

0040df40 <.LVL219>:
  40df40:	4053      	eors	r3, r2
  40df42:	f809 3b01 	strb.w	r3, [r9], #1

0040df46 <.LVL220>:
               aes->left--;
  40df46:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
  40df4a:	3b01      	subs	r3, #1
  40df4c:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118

0040df50 <.LVL221>:
            while (aes->left && sz) {
  40df50:	f116 36ff 	adds.w	r6, r6, #4294967295

0040df54 <.LVL222>:
  40df54:	d001      	beq.n	40df5a <.LVL222+0x6>
  40df56:	2b00      	cmp	r3, #0
  40df58:	d1ee      	bne.n	40df38 <.LVL217>
               sz--;
            }

            /* do as many block size ops as possible */
            while (sz >= AES_BLOCK_SIZE) {
  40df5a:	2e0f      	cmp	r6, #15
  40df5c:	d952      	bls.n	40e004 <.LBE187>
  40df5e:	46b2      	mov	sl, r6
  40df60:	4647      	mov	r7, r8
  40df62:	464d      	mov	r5, r9
                wc_AesEncrypt(aes, (byte*)aes->reg, out);
  40df64:	f104 03f8 	add.w	r3, r4, #248	; 0xf8
                xorbuf(out, in, AES_BLOCK_SIZE);

                out += AES_BLOCK_SIZE;
                in  += AES_BLOCK_SIZE;
                sz  -= AES_BLOCK_SIZE;
                aes->left = 0;
  40df68:	f04f 0b00 	mov.w	fp, #0
  40df6c:	9601      	str	r6, [sp, #4]
  40df6e:	461e      	mov	r6, r3

0040df70 <.LVL223>:
  40df70:	e014      	b.n	40df9c <.LBE184+0x12>

0040df72 <.LVL224>:
  40df72:	1e69      	subs	r1, r5, #1
  40df74:	1e78      	subs	r0, r7, #1
  40df76:	f105 0e0f 	add.w	lr, r5, #15

0040df7a <.LBB184>:
        for (i = 0; i < count; i++) b[i] ^= m[i];
  40df7a:	784b      	ldrb	r3, [r1, #1]
  40df7c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  40df80:	4053      	eors	r3, r2
  40df82:	f801 3f01 	strb.w	r3, [r1, #1]!
  40df86:	4571      	cmp	r1, lr
  40df88:	d1f7      	bne.n	40df7a <.LBB184>

0040df8a <.LBE184>:
                out += AES_BLOCK_SIZE;
  40df8a:	3510      	adds	r5, #16
                in  += AES_BLOCK_SIZE;
  40df8c:	3710      	adds	r7, #16
                sz  -= AES_BLOCK_SIZE;
  40df8e:	f1aa 0a10 	sub.w	sl, sl, #16
                aes->left = 0;
  40df92:	f8c4 b118 	str.w	fp, [r4, #280]	; 0x118
            while (sz >= AES_BLOCK_SIZE) {
  40df96:	f1ba 0f0f 	cmp.w	sl, #15
  40df9a:	d929      	bls.n	40dff0 <.LVL237>
                wc_AesEncrypt(aes, (byte*)aes->reg, out);
  40df9c:	462a      	mov	r2, r5
  40df9e:	4631      	mov	r1, r6
  40dfa0:	4620      	mov	r0, r4
  40dfa2:	f7fc feb1 	bl	40ad08 <.LBE150>

0040dfa6 <.LBB190>:
                if (++inOutCtr[i])  /* we're done unless we overflow */
  40dfa6:	f894 3107 	ldrb.w	r3, [r4, #263]	; 0x107
  40dfaa:	3301      	adds	r3, #1
  40dfac:	b2db      	uxtb	r3, r3
  40dfae:	f884 3107 	strb.w	r3, [r4, #263]	; 0x107
  40dfb2:	b95b      	cbnz	r3, 40dfcc <.LBB192>
  40dfb4:	f204 1207 	addw	r2, r4, #263	; 0x107
  40dfb8:	4631      	mov	r1, r6

0040dfba <.LVL232>:
  40dfba:	f812 3c01 	ldrb.w	r3, [r2, #-1]
  40dfbe:	3301      	adds	r3, #1
  40dfc0:	b2db      	uxtb	r3, r3
  40dfc2:	f802 3d01 	strb.w	r3, [r2, #-1]!

0040dfc6 <.LVL233>:
  40dfc6:	b90b      	cbnz	r3, 40dfcc <.LBB192>

0040dfc8 <.LVL234>:
            for (i = AES_BLOCK_SIZE - 1; i >= 0; i--) {
  40dfc8:	428a      	cmp	r2, r1
  40dfca:	d1f6      	bne.n	40dfba <.LVL232>

0040dfcc <.LBB192>:
    if (((wolfssl_word)buf | (wolfssl_word)mask | count) % WOLFSSL_WORD_SIZE == 0)
  40dfcc:	ea45 0307 	orr.w	r3, r5, r7
  40dfd0:	f013 0f03 	tst.w	r3, #3
  40dfd4:	d1cd      	bne.n	40df72 <.LVL224>
  40dfd6:	1f29      	subs	r1, r5, #4
  40dfd8:	1f38      	subs	r0, r7, #4
  40dfda:	f105 0e0c 	add.w	lr, r5, #12

0040dfde <.LBB187>:
    for (i = 0; i < n; i++) r[i] ^= a[i];
  40dfde:	684b      	ldr	r3, [r1, #4]
  40dfe0:	f850 2f04 	ldr.w	r2, [r0, #4]!
  40dfe4:	4053      	eors	r3, r2
  40dfe6:	f841 3f04 	str.w	r3, [r1, #4]!
  40dfea:	4571      	cmp	r1, lr
  40dfec:	d1f7      	bne.n	40dfde <.LBB187>
  40dfee:	e7cc      	b.n	40df8a <.LBE184>

0040dff0 <.LVL237>:
  40dff0:	9e01      	ldr	r6, [sp, #4]
  40dff2:	f1a6 0310 	sub.w	r3, r6, #16
  40dff6:	f023 030f 	bic.w	r3, r3, #15
  40dffa:	3310      	adds	r3, #16
  40dffc:	4499      	add	r9, r3
  40dffe:	4498      	add	r8, r3
  40e000:	f006 060f 	and.w	r6, r6, #15

0040e004 <.LBE187>:
            }

            /* handle non block size remaining and store unused byte count in left */
            if (sz) {
  40e004:	b91e      	cbnz	r6, 40e00e <.LCFI22>
                    *(out++) = *(in++) ^ *(tmp++);
                    aes->left--;
                }
            }

            return 0;
  40e006:	2000      	movs	r0, #0
        }
  40e008:	b003      	add	sp, #12

0040e00a <.LCFI21>:
  40e00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040e00e <.LCFI22>:
                wc_AesEncrypt(aes, (byte*)aes->reg, (byte*)aes->tmp);
  40e00e:	f104 05f8 	add.w	r5, r4, #248	; 0xf8
  40e012:	9a00      	ldr	r2, [sp, #0]
  40e014:	4629      	mov	r1, r5
  40e016:	4620      	mov	r0, r4
  40e018:	f7fc fe76 	bl	40ad08 <.LBE150>

0040e01c <.LBB193>:
                if (++inOutCtr[i])  /* we're done unless we overflow */
  40e01c:	f894 3107 	ldrb.w	r3, [r4, #263]	; 0x107
  40e020:	3301      	adds	r3, #1
  40e022:	b2db      	uxtb	r3, r3
  40e024:	f884 3107 	strb.w	r3, [r4, #263]	; 0x107
  40e028:	b95b      	cbnz	r3, 40e042 <.LBE193>
  40e02a:	f204 1207 	addw	r2, r4, #263	; 0x107
  40e02e:	4629      	mov	r1, r5

0040e030 <.LVL241>:
  40e030:	f812 3c01 	ldrb.w	r3, [r2, #-1]
  40e034:	3301      	adds	r3, #1
  40e036:	b2db      	uxtb	r3, r3
  40e038:	f802 3d01 	strb.w	r3, [r2, #-1]!

0040e03c <.LVL242>:
  40e03c:	b90b      	cbnz	r3, 40e042 <.LBE193>

0040e03e <.LVL243>:
            for (i = AES_BLOCK_SIZE - 1; i >= 0; i--) {
  40e03e:	4291      	cmp	r1, r2
  40e040:	d1f6      	bne.n	40e030 <.LVL241>

0040e042 <.LBE193>:
                aes->left = AES_BLOCK_SIZE;
  40e042:	2310      	movs	r3, #16
  40e044:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118

0040e048 <.LVL245>:
  40e048:	f109 39ff 	add.w	r9, r9, #4294967295

0040e04c <.LVL246>:
  40e04c:	4446      	add	r6, r8

0040e04e <.LVL247>:
  40e04e:	9900      	ldr	r1, [sp, #0]

0040e050 <.LVL248>:
                    *(out++) = *(in++) ^ *(tmp++);
  40e050:	f818 3b01 	ldrb.w	r3, [r8], #1

0040e054 <.LVL249>:
  40e054:	f811 2b01 	ldrb.w	r2, [r1], #1

0040e058 <.LVL250>:
  40e058:	4053      	eors	r3, r2
  40e05a:	f809 3f01 	strb.w	r3, [r9, #1]!
                    aes->left--;
  40e05e:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
  40e062:	3b01      	subs	r3, #1
  40e064:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118

0040e068 <.LVL251>:
                while (sz--) {
  40e068:	45b0      	cmp	r8, r6
  40e06a:	d1f1      	bne.n	40e050 <.LVL248>
            return 0;
  40e06c:	2000      	movs	r0, #0
  40e06e:	e7cb      	b.n	40e008 <.LBE187+0x4>

0040e070 <.LVL252>:
                return BAD_FUNC_ARG;
  40e070:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040e074 <.LVL253>:
  40e074:	e7c8      	b.n	40e008 <.LBE187+0x4>

0040e076 <.LCFI23>:
  40e076:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040e07a <.LVL255>:
        }
  40e07a:	4770      	bx	lr

Disassembly of section .text.DesSetKey%74:

0040e07c <DesSetKey>:

        *left = rotrFixed(*left^work, 4U);
    }

    static int DesSetKey(const byte* key, int dir, word32* out)
    {
  40e07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0040e080 <.LCFI4>:
  40e080:	b0a1      	sub	sp, #132	; 0x84

0040e082 <.LCFI5>:
  40e082:	9101      	str	r1, [sp, #4]
  40e084:	9200      	str	r2, [sp, #0]

0040e086 <.LVL85>:
  40e086:	4d51      	ldr	r5, [pc, #324]	; (40e1cc <.LBE156+0x8>)
  40e088:	1e6a      	subs	r2, r5, #1

0040e08a <.LVL86>:
  40e08a:	f10d 0107 	add.w	r1, sp, #7

0040e08e <.LVL87>:
  40e08e:	3537      	adds	r5, #55	; 0x37

0040e090 <.LBB155>:

            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
                l = pc1[j] - 1;                    /* integer bit location        */
                m = l & 07;                        /* find bit                    */
                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
                    bytebit[m])                    /* and which bit of that byte  */
  40e090:	4e4f      	ldr	r6, [pc, #316]	; (40e1d0 <.LBE156+0xc>)

0040e092 <.LVL88>:
                l = pc1[j] - 1;                    /* integer bit location        */
  40e092:	f812 3f01 	ldrb.w	r3, [r2, #1]!

0040e096 <.LVL89>:
  40e096:	3b01      	subs	r3, #1

0040e098 <.LVL90>:
                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
  40e098:	10dc      	asrs	r4, r3, #3
  40e09a:	5d04      	ldrb	r4, [r0, r4]
                m = l & 07;                        /* find bit                    */
  40e09c:	f003 0307 	and.w	r3, r3, #7

0040e0a0 <.LVL91>:
                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
  40e0a0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]

0040e0a4 <.LVL92>:
                    ? 1 : 0;                       /* and store 1-bit result      */
  40e0a4:	421c      	tst	r4, r3
  40e0a6:	bf14      	ite	ne
  40e0a8:	2301      	movne	r3, #1
  40e0aa:	2300      	moveq	r3, #0
  40e0ac:	f801 3f01 	strb.w	r3, [r1, #1]!

0040e0b0 <.LVL93>:
            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
  40e0b0:	42aa      	cmp	r2, r5
  40e0b2:	d1ee      	bne.n	40e092 <.LVL88>
  40e0b4:	4e47      	ldr	r6, [pc, #284]	; (40e1d4 <.LBE156+0x10>)
  40e0b6:	9b00      	ldr	r3, [sp, #0]
  40e0b8:	f103 0904 	add.w	r9, r3, #4
  40e0bc:	f106 0810 	add.w	r8, r6, #16
  40e0c0:	46ce      	mov	lr, r9
            }

            for (i = 0; i < 16; i++) {            /* key chunk for each iteration */
                XMEMSET(ks, 0, 8);                /* Clear key schedule */
  40e0c2:	a81e      	add	r0, sp, #120	; 0x78

0040e0c4 <.LVL94>:
  40e0c4:	f8df c114 	ldr.w	ip, [pc, #276]	; 40e1dc <.LBE156+0x18>

                /* rotate left and right halves independently */
                for (j = 0; j < 48; j++) {        /* select bits individually     */
                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
                        l= j % 6;                 /* mask it in if it's there     */
                        ks[j/6] |= bytebit[l] >> 2;
  40e0c8:	4d43      	ldr	r5, [pc, #268]	; (40e1d8 <.LBE156+0x14>)
  40e0ca:	4c41      	ldr	r4, [pc, #260]	; (40e1d0 <.LBE156+0xc>)
  40e0cc:	46b3      	mov	fp, r6
  40e0ce:	e041      	b.n	40e154 <.LVL103+0x4>

0040e0d0 <.LVL95>:
  40e0d0:	f10c 37ff 	add.w	r7, ip, #4294967295
                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
  40e0d4:	2300      	movs	r3, #0
  40e0d6:	e002      	b.n	40e0de <.LVL96+0x6>

0040e0d8 <.LVL96>:
                for (j = 0; j < 48; j++) {        /* select bits individually     */
  40e0d8:	3301      	adds	r3, #1
  40e0da:	2b30      	cmp	r3, #48	; 0x30
  40e0dc:	d016      	beq.n	40e10c <.LVL100>
                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
  40e0de:	f817 2f01 	ldrb.w	r2, [r7, #1]!
  40e0e2:	a920      	add	r1, sp, #128	; 0x80
  40e0e4:	440a      	add	r2, r1
  40e0e6:	f812 2c41 	ldrb.w	r2, [r2, #-65]
  40e0ea:	2a00      	cmp	r2, #0
  40e0ec:	d0f4      	beq.n	40e0d8 <.LVL96>

0040e0ee <.LVL99>:
                        ks[j/6] |= bytebit[l] >> 2;
  40e0ee:	fb85 1203 	smull	r1, r2, r5, r3
  40e0f2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
                        l= j % 6;                 /* mask it in if it's there     */
  40e0f6:	eb02 0142 	add.w	r1, r2, r2, lsl #1
  40e0fa:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
                        ks[j/6] |= bytebit[l] >> 2;
  40e0fe:	f854 6021 	ldr.w	r6, [r4, r1, lsl #2]
  40e102:	5c81      	ldrb	r1, [r0, r2]
  40e104:	ea41 01a6 	orr.w	r1, r1, r6, asr #2
  40e108:	5481      	strb	r1, [r0, r2]
  40e10a:	e7e5      	b.n	40e0d8 <.LVL96>

0040e10c <.LVL100>:
                    }
                }

                /* Now convert to odd/even interleaved form for use in F */
                out[2*i] = ((word32) ks[0] << 24)
  40e10c:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
                         | ((word32) ks[2] << 16)
  40e110:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a

0040e114 <.LVL101>:
  40e114:	041b      	lsls	r3, r3, #16
  40e116:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                         | ((word32) ks[4] << 8)
                         | ((word32) ks[6]);
  40e11a:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
  40e11e:	4313      	orrs	r3, r2
                         | ((word32) ks[4] << 8)
  40e120:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
                         | ((word32) ks[6]);
  40e124:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                out[2*i] = ((word32) ks[0] << 24)
  40e128:	f84e 3c04 	str.w	r3, [lr, #-4]

                out[2*i + 1] = ((word32) ks[1] << 24)
  40e12c:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
                             | ((word32) ks[3] << 16)
  40e130:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
  40e134:	041b      	lsls	r3, r3, #16
  40e136:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                             | ((word32) ks[5] << 8)
                             | ((word32) ks[7]);
  40e13a:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
  40e13e:	4313      	orrs	r3, r2
                             | ((word32) ks[5] << 8)
  40e140:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
                             | ((word32) ks[7]);
  40e144:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                out[2*i + 1] = ((word32) ks[1] << 24)
  40e148:	f84e 3b08 	str.w	r3, [lr], #8

0040e14c <.LVL102>:
  40e14c:	f10b 0b01 	add.w	fp, fp, #1

0040e150 <.LVL103>:
            for (i = 0; i < 16; i++) {            /* key chunk for each iteration */
  40e150:	45c3      	cmp	fp, r8
  40e152:	d01e      	beq.n	40e192 <.LVL111>
                XMEMSET(ks, 0, 8);                /* Clear key schedule */
  40e154:	2300      	movs	r3, #0
  40e156:	6003      	str	r3, [r0, #0]
  40e158:	6043      	str	r3, [r0, #4]

0040e15a <.LVL105>:
                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
  40e15a:	f89b 7000 	ldrb.w	r7, [fp]

0040e15e <.LVL106>:
  40e15e:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
  40e162:	463b      	mov	r3, r7
                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
  40e164:	2200      	movs	r2, #0
                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
  40e166:	f04f 0a1c 	mov.w	sl, #28

0040e16a <.LVL107>:
  40e16a:	459a      	cmp	sl, r3
  40e16c:	bfd8      	it	le
  40e16e:	3b1c      	suble	r3, #28

0040e170 <.LVL108>:
  40e170:	ae20      	add	r6, sp, #128	; 0x80
  40e172:	4433      	add	r3, r6
  40e174:	f813 3c78 	ldrb.w	r3, [r3, #-120]
                    pcr[j] =
  40e178:	f801 3f01 	strb.w	r3, [r1, #1]!
                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
  40e17c:	3201      	adds	r2, #1

0040e17e <.LVL109>:
  40e17e:	2a38      	cmp	r2, #56	; 0x38
  40e180:	d0a6      	beq.n	40e0d0 <.LVL95>
                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
  40e182:	18bb      	adds	r3, r7, r2

0040e184 <.LVL110>:
  40e184:	2a1c      	cmp	r2, #28
  40e186:	bfb4      	ite	lt
  40e188:	f04f 0a1c 	movlt.w	sl, #28
  40e18c:	f04f 0a38 	movge.w	sl, #56	; 0x38
  40e190:	e7eb      	b.n	40e16a <.LVL107>

0040e192 <.LVL111>:
            }

            /* reverse key schedule order */
            if (dir == DES_DECRYPTION) {
  40e192:	9b01      	ldr	r3, [sp, #4]
  40e194:	2b01      	cmp	r3, #1
  40e196:	d003      	beq.n	40e1a0 <.LCFI7>

0040e198 <.LBE155>:
            XFREE(buffer, NULL, DYNAMIC_TYPE_TMP_BUFFER);
    #endif
        }

        return 0;
    }
  40e198:	2000      	movs	r0, #0
  40e19a:	b021      	add	sp, #132	; 0x84

0040e19c <.LCFI6>:
  40e19c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040e1a0 <.LCFI7>:
  40e1a0:	9b00      	ldr	r3, [sp, #0]
  40e1a2:	461a      	mov	r2, r3
  40e1a4:	f103 0440 	add.w	r4, r3, #64	; 0x40

0040e1a8 <.LBB156>:
                    word32 swap = out[i];
  40e1a8:	f859 1c04 	ldr.w	r1, [r9, #-4]
                    out[i] = out[DES_KS_SIZE - 2 - i];
  40e1ac:	6f98      	ldr	r0, [r3, #120]	; 0x78
  40e1ae:	f849 0c04 	str.w	r0, [r9, #-4]
                    out[DES_KS_SIZE - 2 - i] = swap;
  40e1b2:	6799      	str	r1, [r3, #120]	; 0x78
                    swap = out[i + 1];
  40e1b4:	6851      	ldr	r1, [r2, #4]
                    out[i + 1] = out[DES_KS_SIZE - 1 - i];
  40e1b6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
  40e1b8:	6050      	str	r0, [r2, #4]
                    out[DES_KS_SIZE - 1 - i] = swap;
  40e1ba:	67d9      	str	r1, [r3, #124]	; 0x7c
  40e1bc:	3208      	adds	r2, #8
  40e1be:	3b08      	subs	r3, #8
  40e1c0:	f109 0908 	add.w	r9, r9, #8

0040e1c4 <.LBE156>:
                for (i = 0; i < 16; i += 2) {
  40e1c4:	42a2      	cmp	r2, r4
  40e1c6:	d1ef      	bne.n	40e1a8 <.LBB156>
  40e1c8:	e7e6      	b.n	40e198 <.LBE155>
  40e1ca:	bf00      	nop
  40e1cc:	004124f8 	.word	0x004124f8
  40e1d0:	004129b0 	.word	0x004129b0
  40e1d4:	00412e88 	.word	0x00412e88
  40e1d8:	2aaaaaab 	.word	0x2aaaaaab
  40e1dc:	0041263c 	.word	0x0041263c

Disassembly of section .text.Console_UART_Tasks%75:

0040e1e0 <Console_UART_Tasks>:
        consUartData.isReadComplete = true;
    }
}

void Console_UART_Tasks(SYS_MODULE_OBJ object)
{
  40e1e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0040e1e4 <.LCFI5>:
    /* Update the application state machine based
     * on the current state */
    struct QPacket pkt;
    size_t *sizeRead;

    switch(consUartData.state)
  40e1e4:	4b4c      	ldr	r3, [pc, #304]	; (40e318 <.LVL45+0x4>)
  40e1e6:	781b      	ldrb	r3, [r3, #0]
  40e1e8:	2b08      	cmp	r3, #8
  40e1ea:	f200 8093 	bhi.w	40e314 <.LVL45>
  40e1ee:	e8df f003 	tbb	[pc, r3]
  40e1f2:	9105      	.short	0x9105
  40e1f4:	6029124f 	.word	0x6029124f
  40e1f8:	9191      	.short	0x9191
  40e1fa:	8f          	.byte	0x8f
  40e1fb:	00          	.byte	0x00
    {
        case CONSOLE_UART_STATE_INIT:

            /* Register a callback with device layer to get event notification (for end point 0) */
            USART1_WriteCallbackRegister(UARTDeviceWriteCallback, 0);
  40e1fc:	2100      	movs	r1, #0
  40e1fe:	4847      	ldr	r0, [pc, #284]	; (40e31c <.LVL45+0x8>)

0040e200 <.LVL19>:
  40e200:	f004 fe52 	bl	412ea8 <.LFE170>

0040e204 <.LVL20>:
            USART1_ReadCallbackRegister(UARTDeviceReadCallback, 0);
  40e204:	2100      	movs	r1, #0
  40e206:	4846      	ldr	r0, [pc, #280]	; (40e320 <.LVL45+0xc>)
  40e208:	f004 fe56 	bl	412eb8 <.LFE150>

0040e20c <.LVL21>:

            /* If the driver was opened, it is ready for operation */
            consUartData.state = CONSOLE_UART_STATE_READY;
  40e20c:	2202      	movs	r2, #2
  40e20e:	4b42      	ldr	r3, [pc, #264]	; (40e318 <.LVL45+0x4>)
  40e210:	701a      	strb	r2, [r3, #0]

            break;
  40e212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040e216 <.LVL22>:

        case CONSOLE_UART_STATE_SCHEDULE_READ:

            consUartData.state = CONSOLE_UART_STATE_WAIT_FOR_READ_COMPLETE;
  40e216:	2204      	movs	r2, #4
  40e218:	4b3f      	ldr	r3, [pc, #252]	; (40e318 <.LVL45+0x4>)
  40e21a:	701a      	strb	r2, [r3, #0]

            if (readQueue.numElem)
  40e21c:	4b41      	ldr	r3, [pc, #260]	; (40e324 <.LVL45+0x10>)
  40e21e:	689b      	ldr	r3, [r3, #8]
  40e220:	2b00      	cmp	r3, #0
  40e222:	d077      	beq.n	40e314 <.LVL45>
            {
                consUartData.isReadComplete = false;
  40e224:	2200      	movs	r2, #0
  40e226:	4b3c      	ldr	r3, [pc, #240]	; (40e318 <.LVL45+0x4>)
  40e228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                pkt = rdQueueElements[readQueue.tailPos];
  40e22c:	4b3e      	ldr	r3, [pc, #248]	; (40e328 <.LVL45+0x14>)
  40e22e:	4a3d      	ldr	r2, [pc, #244]	; (40e324 <.LVL45+0x10>)
  40e230:	6812      	ldr	r2, [r2, #0]
  40e232:	eb03 01c2 	add.w	r1, r3, r2, lsl #3

0040e236 <.LVL23>:

                USART1_Read (pkt.data.buf, pkt.sz);
  40e236:	6849      	ldr	r1, [r1, #4]

0040e238 <.LVL24>:
  40e238:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]

0040e23c <.LVL25>:
  40e23c:	f004 f920 	bl	412480 <.LFE145>

0040e240 <.LVL26>:
  40e240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040e244 <.LVL27>:
            }
            break;

        case CONSOLE_UART_STATE_WAIT_FOR_READ_COMPLETE:

            if(consUartData.isReadComplete)
  40e244:	4b34      	ldr	r3, [pc, #208]	; (40e318 <.LVL45+0x4>)
  40e246:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
  40e24a:	b943      	cbnz	r3, 40e25e <.LVL27+0x1a>
                    consUartData.state = CONSOLE_UART_STATE_SCHEDULE_READ;
                }
            }
            else
            {
                if (writeQueue.numElem)
  40e24c:	4b37      	ldr	r3, [pc, #220]	; (40e32c <.LVL45+0x18>)
  40e24e:	689b      	ldr	r3, [r3, #8]
  40e250:	2b00      	cmp	r3, #0
  40e252:	d05f      	beq.n	40e314 <.LVL45>
                {
                    consUartData.state = CONSOLE_UART_STATE_SCHEDULE_WRITE;
  40e254:	2205      	movs	r2, #5
  40e256:	4b30      	ldr	r3, [pc, #192]	; (40e318 <.LVL45+0x4>)
  40e258:	701a      	strb	r2, [r3, #0]
  40e25a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                sizeRead = &rdQueueElements[readQueue.tailPos].sz;
  40e25e:	4c31      	ldr	r4, [pc, #196]	; (40e324 <.LVL45+0x10>)
  40e260:	6825      	ldr	r5, [r4, #0]

0040e262 <.LVL28>:
                popQueue(&readQueue);
  40e262:	4620      	mov	r0, r4

0040e264 <.LVL29>:
  40e264:	f004 fc6a 	bl	412b3c <.LFE4>

0040e268 <.LVL30>:
                if (readQueue.numElem == 0)
  40e268:	68a3      	ldr	r3, [r4, #8]
  40e26a:	b963      	cbnz	r3, 40e286 <.LVL31+0xa>
                    if (consUartData.rdCallback != NULL)
  40e26c:	4b2a      	ldr	r3, [pc, #168]	; (40e318 <.LVL45+0x4>)
  40e26e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  40e270:	b123      	cbz	r3, 40e27c <.LVL31>
                sizeRead = &rdQueueElements[readQueue.tailPos].sz;
  40e272:	482d      	ldr	r0, [pc, #180]	; (40e328 <.LVL45+0x14>)
  40e274:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
                        consUartData.rdCallback(sizeRead);
  40e278:	3004      	adds	r0, #4
  40e27a:	4798      	blx	r3

0040e27c <.LVL31>:
                    consUartData.state = CONSOLE_UART_STATE_READY;
  40e27c:	2202      	movs	r2, #2
  40e27e:	4b26      	ldr	r3, [pc, #152]	; (40e318 <.LVL45+0x4>)
  40e280:	701a      	strb	r2, [r3, #0]
  40e282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    consUartData.state = CONSOLE_UART_STATE_SCHEDULE_READ;
  40e286:	2203      	movs	r2, #3
  40e288:	4b23      	ldr	r3, [pc, #140]	; (40e318 <.LVL45+0x4>)
  40e28a:	701a      	strb	r2, [r3, #0]
  40e28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040e290 <.LVL33>:
            }
            break;

        case CONSOLE_UART_STATE_READY:

            if (readQueue.numElem)
  40e290:	4b24      	ldr	r3, [pc, #144]	; (40e324 <.LVL45+0x10>)
  40e292:	689b      	ldr	r3, [r3, #8]
  40e294:	b943      	cbnz	r3, 40e2a8 <.LVL33+0x18>
            {
                consUartData.state = CONSOLE_UART_STATE_SCHEDULE_READ;
            }
            else if (writeQueue.numElem)
  40e296:	4b25      	ldr	r3, [pc, #148]	; (40e32c <.LVL45+0x18>)
  40e298:	689b      	ldr	r3, [r3, #8]
  40e29a:	2b00      	cmp	r3, #0
  40e29c:	d03a      	beq.n	40e314 <.LVL45>
            {
                /* If there is data to be written, then try writing it */
                consUartData.state = CONSOLE_UART_STATE_SCHEDULE_WRITE;
  40e29e:	2205      	movs	r2, #5
  40e2a0:	4b1d      	ldr	r3, [pc, #116]	; (40e318 <.LVL45+0x4>)
  40e2a2:	701a      	strb	r2, [r3, #0]
  40e2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                consUartData.state = CONSOLE_UART_STATE_SCHEDULE_READ;
  40e2a8:	2203      	movs	r2, #3
  40e2aa:	4b1b      	ldr	r3, [pc, #108]	; (40e318 <.LVL45+0x4>)
  40e2ac:	701a      	strb	r2, [r3, #0]
  40e2ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            }
            break;

        case CONSOLE_UART_STATE_SCHEDULE_WRITE:

            if (writeQueue.numElem)
  40e2b2:	4b1e      	ldr	r3, [pc, #120]	; (40e32c <.LVL45+0x18>)
  40e2b4:	689b      	ldr	r3, [r3, #8]
  40e2b6:	b36b      	cbz	r3, 40e314 <.LVL45>
            {
                /* This means there is data to sent out */
                pkt = wrQueueElements[writeQueue.tailPos];
  40e2b8:	4b1d      	ldr	r3, [pc, #116]	; (40e330 <.LVL45+0x1c>)
  40e2ba:	4a1c      	ldr	r2, [pc, #112]	; (40e32c <.LVL45+0x18>)
  40e2bc:	6812      	ldr	r2, [r2, #0]
  40e2be:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
  40e2c2:	f853 6032 	ldr.w	r6, [r3, r2, lsl #3]

0040e2c6 <.LVL34>:
  40e2c6:	684d      	ldr	r5, [r1, #4]

0040e2c8 <.LBB6>:

                    if(status == true)
                    {
                        /* This means this buffer was added successfully to
                         * the PLIB. Do a callback. */
                        if (consUartData.wrCallback != NULL)
  40e2c8:	f8df 804c 	ldr.w	r8, [pc, #76]	; 40e318 <.LVL45+0x4>
                        {
                            consUartData.wrCallback((void *)wrQueueElements[writeQueue.tailPos].data.cbuf);
                        }

                        /* Remove this element from the write queue */
                        popQueue(&writeQueue);
  40e2cc:	4c17      	ldr	r4, [pc, #92]	; (40e32c <.LVL45+0x18>)
                        pkt = wrQueueElements[writeQueue.tailPos];
  40e2ce:	461f      	mov	r7, r3
  40e2d0:	e00e      	b.n	40e2f0 <.LBB7>

0040e2d2 <.LVL36>:
                            consUartData.wrCallback((void *)wrQueueElements[writeQueue.tailPos].data.cbuf);
  40e2d2:	6822      	ldr	r2, [r4, #0]
  40e2d4:	f857 0032 	ldr.w	r0, [r7, r2, lsl #3]

0040e2d8 <.LVL37>:
  40e2d8:	4798      	blx	r3
                        popQueue(&writeQueue);
  40e2da:	4620      	mov	r0, r4
  40e2dc:	f004 fc2e 	bl	412b3c <.LFE4>

0040e2e0 <.LVL39>:
                        pkt = wrQueueElements[writeQueue.tailPos];
  40e2e0:	6823      	ldr	r3, [r4, #0]
  40e2e2:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
  40e2e6:	f857 6033 	ldr.w	r6, [r7, r3, lsl #3]

0040e2ea <.LVL40>:
  40e2ea:	6855      	ldr	r5, [r2, #4]

0040e2ec <.LBE6>:
                    {
                        /* Got an invalid handle. This most likely means
                         * that the write buffer queue is full */
                    }

                } while(writeQueue.numElem);
  40e2ec:	68a3      	ldr	r3, [r4, #8]
  40e2ee:	b153      	cbz	r3, 40e306 <.LBE7>

0040e2f0 <.LBB7>:
                    bool status = USART1_Write(pkt.data.buf, pkt.sz);
  40e2f0:	4629      	mov	r1, r5
  40e2f2:	4630      	mov	r0, r6
  40e2f4:	f003 fedc 	bl	4120b0 <.LFE20>

0040e2f8 <.LVL42>:
                    if(status == true)
  40e2f8:	2800      	cmp	r0, #0
  40e2fa:	d0f7      	beq.n	40e2ec <.LBE6>
                        if (consUartData.wrCallback != NULL)
  40e2fc:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
  40e300:	2b00      	cmp	r3, #0
  40e302:	d1e6      	bne.n	40e2d2 <.LVL36>
  40e304:	e7e9      	b.n	40e2da <.LVL37+0x2>

0040e306 <.LBE7>:
                /* If we are here, it either means there is nothing more to
                 * write of the write buffer queue is full. We cannot do much
                 * with respect to write at point. We move the state to
                 * ready */

                consUartData.state = CONSOLE_UART_STATE_READY;
  40e306:	2202      	movs	r2, #2
  40e308:	4b03      	ldr	r3, [pc, #12]	; (40e318 <.LVL45+0x4>)
  40e30a:	701a      	strb	r2, [r3, #0]
  40e30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040e310 <.LVL44>:
        case CONSOLE_UART_STATE_OPERATIONAL_ERROR:

            /* We arrive at this state if the UART driver reports an error on a read or write operation
               We will attempt to recover by flushing the local buffers */

            Console_UART_Flush();
  40e310:	f004 f85c 	bl	4123cc <Console_UART_Flush>

0040e314 <.LVL45>:
  40e314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40e318:	2040dba8 	.word	0x2040dba8
  40e31c:	00412e99 	.word	0x00412e99
  40e320:	00412d15 	.word	0x00412d15
  40e324:	2040dcb8 	.word	0x2040dcb8
  40e328:	2040db58 	.word	0x2040db58
  40e32c:	2040dccc 	.word	0x2040dccc
  40e330:	2040d488 	.word	0x2040d488

Disassembly of section .text.wc_ShaFinal%76:

0040e334 <wc_ShaFinal>:

int wc_ShaFinal(Sha* sha, byte* hash)
{
    byte* local;

    if (sha == NULL || hash == NULL) {
  40e334:	2800      	cmp	r0, #0
  40e336:	f000 8097 	beq.w	40e468 <.LCFI7>
{
  40e33a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0040e33c <.LCFI6>:
  40e33c:	4605      	mov	r5, r0
    if (sha == NULL || hash == NULL) {
  40e33e:	2900      	cmp	r1, #0
  40e340:	f000 808f 	beq.w	40e462 <.LVL393>
        return BAD_FUNC_ARG;
    }

    local = (byte*)sha->buffer;
  40e344:	f100 070c 	add.w	r7, r0, #12

0040e348 <.LVL372>:
        return IntelQaSymSha(&sha->asyncDev, hash, NULL, SHA_DIGEST_SIZE);
    #endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    AddLength(sha, sha->buffLen);  /* before adding pads */
  40e348:	6803      	ldr	r3, [r0, #0]

0040e34a <.LBB805>:
    word32 tmp = sha->loLen;
  40e34a:	6840      	ldr	r0, [r0, #4]

0040e34c <.LVL374>:
    if ( (sha->loLen += len) < tmp)
  40e34c:	181a      	adds	r2, r3, r0
  40e34e:	606a      	str	r2, [r5, #4]
  40e350:	4290      	cmp	r0, r2
  40e352:	d902      	bls.n	40e35a <.LVL374+0xe>
        sha->hiLen++;                       /* carry low to high */
  40e354:	68aa      	ldr	r2, [r5, #8]
  40e356:	3201      	adds	r2, #1
  40e358:	60aa      	str	r2, [r5, #8]
  40e35a:	460e      	mov	r6, r1

0040e35c <.LBE805>:

    local[sha->buffLen++] = 0x80;  /* add 1 */
  40e35c:	1c5a      	adds	r2, r3, #1
  40e35e:	602a      	str	r2, [r5, #0]
  40e360:	2280      	movs	r2, #128	; 0x80
  40e362:	54fa      	strb	r2, [r7, r3]

    /* pad with zeros */
    if (sha->buffLen > SHA_PAD_SIZE) {
  40e364:	6828      	ldr	r0, [r5, #0]
  40e366:	2838      	cmp	r0, #56	; 0x38
  40e368:	d85a      	bhi.n	40e420 <.LVL386>

0040e36a <.LVL376>:
        ByteReverseWords(sha->buffer, sha->buffer, SHA_BLOCK_SIZE);
#endif
        XTRANSFORM(sha, local);
        sha->buffLen = 0;
    }
    XMEMSET(&local[sha->buffLen], 0, SHA_PAD_SIZE - sha->buffLen);
  40e36a:	462c      	mov	r4, r5
  40e36c:	f854 0b08 	ldr.w	r0, [r4], #8
  40e370:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
  40e374:	2100      	movs	r1, #0
  40e376:	4438      	add	r0, r7
  40e378:	f002 fc82 	bl	410c80 <memset>

0040e37c <.LVL377>:
  40e37c:	f105 0148 	add.w	r1, r5, #72	; 0x48

0040e380 <.LBB807>:
        out[i] = ByteReverseWord32(in[i]);
  40e380:	6862      	ldr	r2, [r4, #4]

0040e382 <.LBB809>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40e382:	0a13      	lsrs	r3, r2, #8
  40e384:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  40e388:	0212      	lsls	r2, r2, #8
  40e38a:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
  40e38e:	4313      	orrs	r3, r2

0040e390 <.LBB811>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40e390:	ea4f 4333 	mov.w	r3, r3, ror #16

0040e394 <.LBE809>:
        out[i] = ByteReverseWord32(in[i]);
  40e394:	f844 3f04 	str.w	r3, [r4, #4]!
    for (i = 0; i < count; i++)
  40e398:	428c      	cmp	r4, r1
  40e39a:	d1f1      	bne.n	40e380 <.LBB807>

0040e39c <.LBE807>:
    ByteReverseWords(sha->buffer, sha->buffer, SHA_BLOCK_SIZE);
#endif

    /* store lengths */
    /* put lengths in bits */
    sha->hiLen = (sha->loLen >> (8*sizeof(sha->loLen) - 3)) + (sha->hiLen << 3);
  40e39c:	686b      	ldr	r3, [r5, #4]
  40e39e:	68a9      	ldr	r1, [r5, #8]
  40e3a0:	0f5a      	lsrs	r2, r3, #29
  40e3a2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
  40e3a6:	60aa      	str	r2, [r5, #8]
    sha->loLen = sha->loLen << 3;
  40e3a8:	00db      	lsls	r3, r3, #3
  40e3aa:	606b      	str	r3, [r5, #4]

    /* ! length ordering dependent on digest endian type ! */
    XMEMCPY(&local[SHA_PAD_SIZE], &sha->hiLen, sizeof(word32));
  40e3ac:	646a      	str	r2, [r5, #68]	; 0x44
    XMEMCPY(&local[SHA_PAD_SIZE + sizeof(word32)], &sha->loLen, sizeof(word32));
  40e3ae:	64ab      	str	r3, [r5, #72]	; 0x48
    ByteReverseWords(&sha->buffer[SHA_PAD_SIZE/sizeof(word32)],
                     &sha->buffer[SHA_PAD_SIZE/sizeof(word32)],
                     2 * sizeof(word32));
#endif

    XTRANSFORM(sha, local);
  40e3b0:	4639      	mov	r1, r7
  40e3b2:	4628      	mov	r0, r5
  40e3b4:	f7f7 ff10 	bl	4061d8 <Transform>

0040e3b8 <.LVL380>:
#ifdef LITTLE_ENDIAN_ORDER
    ByteReverseWords(sha->digest, sha->digest, SHA_DIGEST_SIZE);
  40e3b8:	f105 044c 	add.w	r4, r5, #76	; 0x4c

0040e3bc <.LVL381>:
  40e3bc:	f105 0148 	add.w	r1, r5, #72	; 0x48
  40e3c0:	f105 005c 	add.w	r0, r5, #92	; 0x5c

0040e3c4 <.LBB813>:
        out[i] = ByteReverseWord32(in[i]);
  40e3c4:	684a      	ldr	r2, [r1, #4]

0040e3c6 <.LBB815>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40e3c6:	0a13      	lsrs	r3, r2, #8
  40e3c8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  40e3cc:	0212      	lsls	r2, r2, #8
  40e3ce:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
  40e3d2:	4313      	orrs	r3, r2

0040e3d4 <.LBB817>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40e3d4:	ea4f 4333 	mov.w	r3, r3, ror #16

0040e3d8 <.LBE815>:
        out[i] = ByteReverseWord32(in[i]);
  40e3d8:	f841 3f04 	str.w	r3, [r1, #4]!
    for (i = 0; i < count; i++)
  40e3dc:	4281      	cmp	r1, r0
  40e3de:	d1f1      	bne.n	40e3c4 <.LBB813>

0040e3e0 <.LBE813>:
#endif
    XMEMCPY(hash, sha->digest, SHA_DIGEST_SIZE);
  40e3e0:	6823      	ldr	r3, [r4, #0]
  40e3e2:	6860      	ldr	r0, [r4, #4]
  40e3e4:	68a1      	ldr	r1, [r4, #8]
  40e3e6:	68e2      	ldr	r2, [r4, #12]
  40e3e8:	6033      	str	r3, [r6, #0]
  40e3ea:	6070      	str	r0, [r6, #4]
  40e3ec:	60b1      	str	r1, [r6, #8]
  40e3ee:	60f2      	str	r2, [r6, #12]
  40e3f0:	6923      	ldr	r3, [r4, #16]
  40e3f2:	6133      	str	r3, [r6, #16]

0040e3f4 <.LBB819>:
        sha->digest[0] = 0x67452301L;
  40e3f4:	4b1e      	ldr	r3, [pc, #120]	; (40e470 <.LVL396+0x4>)
  40e3f6:	64eb      	str	r3, [r5, #76]	; 0x4c
        sha->digest[1] = 0xEFCDAB89L;
  40e3f8:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
  40e3fc:	652b      	str	r3, [r5, #80]	; 0x50
        sha->digest[2] = 0x98BADCFEL;
  40e3fe:	f103 4329 	add.w	r3, r3, #2835349504	; 0xa9000000
  40e402:	f5a3 1396 	sub.w	r3, r3, #1228800	; 0x12c000
  40e406:	f6a3 638b 	subw	r3, r3, #3723	; 0xe8b
  40e40a:	656b      	str	r3, [r5, #84]	; 0x54
        sha->digest[3] = 0x10325476L;
  40e40c:	f1a3 3388 	sub.w	r3, r3, #2290649224	; 0x88888888
  40e410:	65ab      	str	r3, [r5, #88]	; 0x58
        sha->digest[4] = 0xC3D2E1F0L;
  40e412:	4b18      	ldr	r3, [pc, #96]	; (40e474 <.LVL396+0x8>)
  40e414:	65eb      	str	r3, [r5, #92]	; 0x5c
        sha->buffLen = 0;
  40e416:	2000      	movs	r0, #0
  40e418:	6028      	str	r0, [r5, #0]
        sha->loLen   = 0;
  40e41a:	6068      	str	r0, [r5, #4]
        sha->hiLen   = 0;
  40e41c:	60a8      	str	r0, [r5, #8]

0040e41e <.LBE819>:

    return InitSha(sha); /* reset state */
  40e41e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0040e420 <.LVL386>:
        XMEMSET(&local[sha->buffLen], 0, SHA_BLOCK_SIZE - sha->buffLen);
  40e420:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
  40e424:	2100      	movs	r1, #0

0040e426 <.LVL387>:
  40e426:	4438      	add	r0, r7
  40e428:	f002 fc2a 	bl	410c80 <memset>

0040e42c <.LVL388>:
        sha->buffLen += SHA_BLOCK_SIZE - sha->buffLen;
  40e42c:	4629      	mov	r1, r5
  40e42e:	2340      	movs	r3, #64	; 0x40
  40e430:	f841 3b08 	str.w	r3, [r1], #8

0040e434 <.LVL389>:
  40e434:	f105 0048 	add.w	r0, r5, #72	; 0x48

0040e438 <.LBB821>:
        out[i] = ByteReverseWord32(in[i]);
  40e438:	684a      	ldr	r2, [r1, #4]

0040e43a <.LBB823>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40e43a:	0a13      	lsrs	r3, r2, #8
  40e43c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  40e440:	0212      	lsls	r2, r2, #8
  40e442:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
  40e446:	4313      	orrs	r3, r2

0040e448 <.LBB825>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40e448:	ea4f 4333 	mov.w	r3, r3, ror #16

0040e44c <.LBE823>:
        out[i] = ByteReverseWord32(in[i]);
  40e44c:	f841 3f04 	str.w	r3, [r1, #4]!
    for (i = 0; i < count; i++)
  40e450:	4281      	cmp	r1, r0
  40e452:	d1f1      	bne.n	40e438 <.LBB821>

0040e454 <.LBE821>:
        XTRANSFORM(sha, local);
  40e454:	4639      	mov	r1, r7
  40e456:	4628      	mov	r0, r5
  40e458:	f7f7 febe 	bl	4061d8 <Transform>

0040e45c <.LVL392>:
        sha->buffLen = 0;
  40e45c:	2300      	movs	r3, #0
  40e45e:	602b      	str	r3, [r5, #0]
  40e460:	e783      	b.n	40e36a <.LVL376>

0040e462 <.LVL393>:
        return BAD_FUNC_ARG;
  40e462:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040e466 <.LVL394>:
}
  40e466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0040e468 <.LCFI7>:
        return BAD_FUNC_ARG;
  40e468:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040e46c <.LVL396>:
  40e46c:	4770      	bx	lr
  40e46e:	bf00      	nop
  40e470:	67452301 	.word	0x67452301
  40e474:	c3d2e1f0 	.word	0xc3d2e1f0

Disassembly of section .text.Hash_df%77:

0040e478 <Hash_df>:
{
  40e478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0040e47c <.LCFI2>:
  40e47c:	b0a9      	sub	sp, #164	; 0xa4

0040e47e <.LCFI3>:
  40e47e:	4617      	mov	r7, r2
  40e480:	f8dd a0d0 	ldr.w	sl, [sp, #208]	; 0xd0
  40e484:	f8dd b0d4 	ldr.w	fp, [sp, #212]	; 0xd4
  40e488:	f88d 3007 	strb.w	r3, [sp, #7]

0040e48c <.LBB37>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40e48c:	f3c2 1357 	ubfx	r3, r2, #5, #24

0040e490 <.LVL11>:
  40e490:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  40e494:	02d2      	lsls	r2, r2, #11

0040e496 <.LVL12>:
  40e496:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
  40e49a:	4313      	orrs	r3, r2

0040e49c <.LBB39>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40e49c:	ea4f 4333 	mov.w	r3, r3, ror #16

0040e4a0 <.LBE37>:
    bits = ByteReverseWord32(bits);
  40e4a0:	9326      	str	r3, [sp, #152]	; 0x98
        + ((outSz % OUTPUT_BLOCK_LEN) ? 1 : 0);
  40e4a2:	f017 081f 	ands.w	r8, r7, #31
  40e4a6:	bf18      	it	ne
  40e4a8:	f04f 0801 	movne.w	r8, #1

0040e4ac <.LVL13>:
    for (i = 0, ctr = 1; i < len; i++, ctr++) {
  40e4ac:	2301      	movs	r3, #1
  40e4ae:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
  40e4b2:	eb18 1857 	adds.w	r8, r8, r7, lsr #5

0040e4b6 <.LVL14>:
  40e4b6:	d069      	beq.n	40e58c <.LVL42>
  40e4b8:	460d      	mov	r5, r1
  40e4ba:	2600      	movs	r6, #0
            ret = wc_Sha256Update(&sha, &ctr, sizeof(ctr));
  40e4bc:	4699      	mov	r9, r3
  40e4be:	e044      	b.n	40e54a <.LVL30>

0040e4c0 <.LVL15>:
            ret = wc_Sha256Update(&sha, (byte*)&bits, sizeof(bits));
  40e4c0:	2204      	movs	r2, #4
  40e4c2:	a926      	add	r1, sp, #152	; 0x98
  40e4c4:	a80a      	add	r0, sp, #40	; 0x28

0040e4c6 <.LVL16>:
  40e4c6:	f001 ff26 	bl	410316 <.LFE18>

0040e4ca <.LVL17>:
        if (ret == 0) {
  40e4ca:	4604      	mov	r4, r0
  40e4cc:	b9f8      	cbnz	r0, 40e50e <.LVL24>
            if (type != drbgInitV)
  40e4ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40e4d2:	2b04      	cmp	r3, #4
  40e4d4:	d008      	beq.n	40e4e8 <.LVL20>
                ret = wc_Sha256Update(&sha, &type, sizeof(type));
  40e4d6:	464a      	mov	r2, r9
  40e4d8:	f10d 0107 	add.w	r1, sp, #7
  40e4dc:	a80a      	add	r0, sp, #40	; 0x28

0040e4de <.LVL18>:
  40e4de:	f001 ff1a 	bl	410316 <.LFE18>

0040e4e2 <.LVL19>:
        if (ret == 0)
  40e4e2:	4604      	mov	r4, r0
  40e4e4:	2800      	cmp	r0, #0
  40e4e6:	d140      	bne.n	40e56a <.LVL34>

0040e4e8 <.LVL20>:
            ret = wc_Sha256Update(&sha, inA, inASz);
  40e4e8:	9a33      	ldr	r2, [sp, #204]	; 0xcc
  40e4ea:	9932      	ldr	r1, [sp, #200]	; 0xc8
  40e4ec:	a80a      	add	r0, sp, #40	; 0x28
  40e4ee:	f001 ff12 	bl	410316 <.LFE18>

0040e4f2 <.LVL21>:
        if (ret == 0) {
  40e4f2:	4604      	mov	r4, r0
  40e4f4:	2800      	cmp	r0, #0
  40e4f6:	d159      	bne.n	40e5ac <.LCFI5>
            if (inB != NULL && inBSz > 0)
  40e4f8:	f1ba 0f00 	cmp.w	sl, #0
  40e4fc:	d002      	beq.n	40e504 <.LVL22>
  40e4fe:	f1bb 0f00 	cmp.w	fp, #0
  40e502:	d136      	bne.n	40e572 <.LVL36>

0040e504 <.LVL22>:
            ret = wc_Sha256Final(&sha, digest);
  40e504:	a902      	add	r1, sp, #8
  40e506:	a80a      	add	r0, sp, #40	; 0x28
  40e508:	f7ff fc3a 	bl	40dd80 <.LFE177>

0040e50c <.LVL23>:
  40e50c:	4604      	mov	r4, r0

0040e50e <.LVL24>:
        wc_Sha256Free(&sha);
  40e50e:	a80a      	add	r0, sp, #40	; 0x28

0040e510 <.LVL25>:
  40e510:	f003 fb0d 	bl	411b2e <.LFE20>

0040e514 <.LVL26>:
        if (ret == 0) {
  40e514:	b98c      	cbnz	r4, 40e53a <.LVL28>
            if (outSz > OUTPUT_BLOCK_LEN) {
  40e516:	2f20      	cmp	r7, #32
  40e518:	d932      	bls.n	40e580 <.LVL40>
                XMEMCPY(out, digest, OUTPUT_BLOCK_LEN);
  40e51a:	f10d 0e08 	add.w	lr, sp, #8
  40e51e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  40e522:	6028      	str	r0, [r5, #0]
  40e524:	6069      	str	r1, [r5, #4]
  40e526:	60aa      	str	r2, [r5, #8]
  40e528:	60eb      	str	r3, [r5, #12]
  40e52a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  40e52e:	6128      	str	r0, [r5, #16]
  40e530:	6169      	str	r1, [r5, #20]
  40e532:	61aa      	str	r2, [r5, #24]
  40e534:	61eb      	str	r3, [r5, #28]
                outSz -= OUTPUT_BLOCK_LEN;
  40e536:	3f20      	subs	r7, #32
                out += OUTPUT_BLOCK_LEN;
  40e538:	3520      	adds	r5, #32

0040e53a <.LVL28>:
    for (i = 0, ctr = 1; i < len; i++, ctr++) {
  40e53a:	3601      	adds	r6, #1
  40e53c:	f89d 309f 	ldrb.w	r3, [sp, #159]	; 0x9f
  40e540:	3301      	adds	r3, #1
  40e542:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
  40e546:	45b0      	cmp	r8, r6
  40e548:	d021      	beq.n	40e58e <.LBB41>

0040e54a <.LVL30>:
        ret = wc_InitSha256(&sha);
  40e54a:	a80a      	add	r0, sp, #40	; 0x28
  40e54c:	f004 fcf8 	bl	412f40 <.LFE20>

0040e550 <.LVL31>:
        if (ret != 0)
  40e550:	4604      	mov	r4, r0
  40e552:	b9e0      	cbnz	r0, 40e58e <.LBB41>
            ret = wc_Sha256Update(&sha, &ctr, sizeof(ctr));
  40e554:	464a      	mov	r2, r9
  40e556:	f10d 019f 	add.w	r1, sp, #159	; 0x9f
  40e55a:	a80a      	add	r0, sp, #40	; 0x28

0040e55c <.LVL32>:
  40e55c:	f001 fedb 	bl	410316 <.LFE18>

0040e560 <.LVL33>:
        if (ret == 0)
  40e560:	4604      	mov	r4, r0
  40e562:	2800      	cmp	r0, #0
  40e564:	d0ac      	beq.n	40e4c0 <.LVL15>
        if (ret == 0)
  40e566:	2c00      	cmp	r4, #0
  40e568:	d0cc      	beq.n	40e504 <.LVL22>

0040e56a <.LVL34>:
        wc_Sha256Free(&sha);
  40e56a:	a80a      	add	r0, sp, #40	; 0x28
  40e56c:	f003 fadf 	bl	411b2e <.LFE20>

0040e570 <.LVL35>:
  40e570:	e7e3      	b.n	40e53a <.LVL28>

0040e572 <.LVL36>:
                ret = wc_Sha256Update(&sha, inB, inBSz);
  40e572:	465a      	mov	r2, fp
  40e574:	4651      	mov	r1, sl
  40e576:	a80a      	add	r0, sp, #40	; 0x28

0040e578 <.LVL37>:
  40e578:	f001 fecd 	bl	410316 <.LFE18>

0040e57c <.LVL38>:
  40e57c:	4604      	mov	r4, r0

0040e57e <.LVL39>:
  40e57e:	e7f2      	b.n	40e566 <.LVL33+0x6>

0040e580 <.LVL40>:
                XMEMCPY(out, digest, outSz);
  40e580:	463a      	mov	r2, r7
  40e582:	a902      	add	r1, sp, #8
  40e584:	4628      	mov	r0, r5
  40e586:	f000 f815 	bl	40e5b4 <.LFE14>

0040e58a <.LVL41>:
  40e58a:	e7d6      	b.n	40e53a <.LVL28>

0040e58c <.LVL42>:
    int ret = DRBG_FAILURE;
  40e58c:	2402      	movs	r4, #2

0040e58e <.LBB41>:
    volatile byte* z = (volatile byte*)mem;
  40e58e:	ab02      	add	r3, sp, #8

0040e590 <.LVL44>:
    while (len--) *z++ = 0;
  40e590:	2000      	movs	r0, #0
  40e592:	a90a      	add	r1, sp, #40	; 0x28

0040e594 <.LVL45>:
  40e594:	1c5a      	adds	r2, r3, #1

0040e596 <.LVL46>:
  40e596:	7018      	strb	r0, [r3, #0]

0040e598 <.LVL47>:
  40e598:	4613      	mov	r3, r2
  40e59a:	428a      	cmp	r2, r1
  40e59c:	d1fa      	bne.n	40e594 <.LVL45>

0040e59e <.LBE41>:
    return (ret == 0) ? DRBG_SUCCESS : DRBG_FAILURE;
  40e59e:	2c00      	cmp	r4, #0
  40e5a0:	bf18      	it	ne
  40e5a2:	2402      	movne	r4, #2

0040e5a4 <.LVL49>:
}
  40e5a4:	4620      	mov	r0, r4
  40e5a6:	b029      	add	sp, #164	; 0xa4

0040e5a8 <.LCFI4>:
  40e5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040e5ac <.LCFI5>:
        wc_Sha256Free(&sha);
  40e5ac:	a80a      	add	r0, sp, #40	; 0x28
  40e5ae:	f003 fabe 	bl	411b2e <.LFE20>

0040e5b2 <.LVL51>:
  40e5b2:	e7c2      	b.n	40e53a <.LVL28>

Disassembly of section .text%78:

0040e5b4 <memcpy>:
  40e5b4:	4684      	mov	ip, r0
  40e5b6:	ea41 0300 	orr.w	r3, r1, r0
  40e5ba:	f013 0303 	ands.w	r3, r3, #3
  40e5be:	d16d      	bne.n	40e69c <memcpy+0xe8>
  40e5c0:	3a40      	subs	r2, #64	; 0x40
  40e5c2:	d341      	bcc.n	40e648 <memcpy+0x94>
  40e5c4:	f851 3b04 	ldr.w	r3, [r1], #4
  40e5c8:	f840 3b04 	str.w	r3, [r0], #4
  40e5cc:	f851 3b04 	ldr.w	r3, [r1], #4
  40e5d0:	f840 3b04 	str.w	r3, [r0], #4
  40e5d4:	f851 3b04 	ldr.w	r3, [r1], #4
  40e5d8:	f840 3b04 	str.w	r3, [r0], #4
  40e5dc:	f851 3b04 	ldr.w	r3, [r1], #4
  40e5e0:	f840 3b04 	str.w	r3, [r0], #4
  40e5e4:	f851 3b04 	ldr.w	r3, [r1], #4
  40e5e8:	f840 3b04 	str.w	r3, [r0], #4
  40e5ec:	f851 3b04 	ldr.w	r3, [r1], #4
  40e5f0:	f840 3b04 	str.w	r3, [r0], #4
  40e5f4:	f851 3b04 	ldr.w	r3, [r1], #4
  40e5f8:	f840 3b04 	str.w	r3, [r0], #4
  40e5fc:	f851 3b04 	ldr.w	r3, [r1], #4
  40e600:	f840 3b04 	str.w	r3, [r0], #4
  40e604:	f851 3b04 	ldr.w	r3, [r1], #4
  40e608:	f840 3b04 	str.w	r3, [r0], #4
  40e60c:	f851 3b04 	ldr.w	r3, [r1], #4
  40e610:	f840 3b04 	str.w	r3, [r0], #4
  40e614:	f851 3b04 	ldr.w	r3, [r1], #4
  40e618:	f840 3b04 	str.w	r3, [r0], #4
  40e61c:	f851 3b04 	ldr.w	r3, [r1], #4
  40e620:	f840 3b04 	str.w	r3, [r0], #4
  40e624:	f851 3b04 	ldr.w	r3, [r1], #4
  40e628:	f840 3b04 	str.w	r3, [r0], #4
  40e62c:	f851 3b04 	ldr.w	r3, [r1], #4
  40e630:	f840 3b04 	str.w	r3, [r0], #4
  40e634:	f851 3b04 	ldr.w	r3, [r1], #4
  40e638:	f840 3b04 	str.w	r3, [r0], #4
  40e63c:	f851 3b04 	ldr.w	r3, [r1], #4
  40e640:	f840 3b04 	str.w	r3, [r0], #4
  40e644:	3a40      	subs	r2, #64	; 0x40
  40e646:	d2bd      	bcs.n	40e5c4 <memcpy+0x10>
  40e648:	3230      	adds	r2, #48	; 0x30
  40e64a:	d311      	bcc.n	40e670 <memcpy+0xbc>
  40e64c:	f851 3b04 	ldr.w	r3, [r1], #4
  40e650:	f840 3b04 	str.w	r3, [r0], #4
  40e654:	f851 3b04 	ldr.w	r3, [r1], #4
  40e658:	f840 3b04 	str.w	r3, [r0], #4
  40e65c:	f851 3b04 	ldr.w	r3, [r1], #4
  40e660:	f840 3b04 	str.w	r3, [r0], #4
  40e664:	f851 3b04 	ldr.w	r3, [r1], #4
  40e668:	f840 3b04 	str.w	r3, [r0], #4
  40e66c:	3a10      	subs	r2, #16
  40e66e:	d2ed      	bcs.n	40e64c <memcpy+0x98>
  40e670:	320c      	adds	r2, #12
  40e672:	d305      	bcc.n	40e680 <memcpy+0xcc>
  40e674:	f851 3b04 	ldr.w	r3, [r1], #4
  40e678:	f840 3b04 	str.w	r3, [r0], #4
  40e67c:	3a04      	subs	r2, #4
  40e67e:	d2f9      	bcs.n	40e674 <memcpy+0xc0>
  40e680:	3204      	adds	r2, #4
  40e682:	d008      	beq.n	40e696 <memcpy+0xe2>
  40e684:	07d2      	lsls	r2, r2, #31
  40e686:	bf1c      	itt	ne
  40e688:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40e68c:	f800 3b01 	strbne.w	r3, [r0], #1
  40e690:	d301      	bcc.n	40e696 <memcpy+0xe2>
  40e692:	880b      	ldrh	r3, [r1, #0]
  40e694:	8003      	strh	r3, [r0, #0]
  40e696:	4660      	mov	r0, ip
  40e698:	4770      	bx	lr
  40e69a:	bf00      	nop
  40e69c:	2a08      	cmp	r2, #8
  40e69e:	d313      	bcc.n	40e6c8 <memcpy+0x114>
  40e6a0:	078b      	lsls	r3, r1, #30
  40e6a2:	d08d      	beq.n	40e5c0 <memcpy+0xc>
  40e6a4:	f010 0303 	ands.w	r3, r0, #3
  40e6a8:	d08a      	beq.n	40e5c0 <memcpy+0xc>
  40e6aa:	f1c3 0304 	rsb	r3, r3, #4
  40e6ae:	1ad2      	subs	r2, r2, r3
  40e6b0:	07db      	lsls	r3, r3, #31
  40e6b2:	bf1c      	itt	ne
  40e6b4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40e6b8:	f800 3b01 	strbne.w	r3, [r0], #1
  40e6bc:	d380      	bcc.n	40e5c0 <memcpy+0xc>
  40e6be:	f831 3b02 	ldrh.w	r3, [r1], #2
  40e6c2:	f820 3b02 	strh.w	r3, [r0], #2
  40e6c6:	e77b      	b.n	40e5c0 <memcpy+0xc>
  40e6c8:	3a04      	subs	r2, #4
  40e6ca:	d3d9      	bcc.n	40e680 <memcpy+0xcc>
  40e6cc:	3a01      	subs	r2, #1
  40e6ce:	f811 3b01 	ldrb.w	r3, [r1], #1
  40e6d2:	f800 3b01 	strb.w	r3, [r0], #1
  40e6d6:	d2f9      	bcs.n	40e6cc <memcpy+0x118>
  40e6d8:	780b      	ldrb	r3, [r1, #0]
  40e6da:	7003      	strb	r3, [r0, #0]
  40e6dc:	784b      	ldrb	r3, [r1, #1]
  40e6de:	7043      	strb	r3, [r0, #1]
  40e6e0:	788b      	ldrb	r3, [r1, #2]
  40e6e2:	7083      	strb	r3, [r0, #2]
  40e6e4:	4660      	mov	r0, ip
  40e6e6:	4770      	bx	lr

Disassembly of section .text.DesRawProcessBlock%79:

0040e6e8 <DesRawProcessBlock>:

        return wc_Des3_SetIV(des, iv);
    }

    static void DesRawProcessBlock(word32* lIn, word32* rIn, const word32* kptr)
    {
  40e6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0040e6ec <.LCFI0>:
        word32 l = *lIn, r = *rIn, i;
  40e6ec:	6807      	ldr	r7, [r0, #0]

0040e6ee <.LVL1>:
  40e6ee:	f8d1 e000 	ldr.w	lr, [r1]

0040e6f2 <.LVL2>:
  40e6f2:	4616      	mov	r6, r2
  40e6f4:	3280      	adds	r2, #128	; 0x80

0040e6f6 <.LBB68>:

        for (i=0; i<8; i++)
        {
            word32 work = rotrFixed(r, 4U) ^ kptr[4*i+0];
            l ^= Spbox[6][(work) & 0x3f]
  40e6f6:	4b47      	ldr	r3, [pc, #284]	; (40e814 <.LVL21>)

0040e6f8 <.LVL4>:
            word32 work = rotrFixed(r, 4U) ^ kptr[4*i+0];
  40e6f8:	6834      	ldr	r4, [r6, #0]
  40e6fa:	ea84 1c3e 	eor.w	ip, r4, lr, ror #4

0040e6fe <.LVL5>:
              ^  Spbox[4][(work >> 8) & 0x3f]
              ^  Spbox[2][(work >> 16) & 0x3f]
              ^  Spbox[0][(work >> 24) & 0x3f];
            work = r ^ kptr[4*i+1];
  40e6fe:	6874      	ldr	r4, [r6, #4]
  40e700:	ea8e 0404 	eor.w	r4, lr, r4

0040e704 <.LVL6>:
            l ^= Spbox[6][(work) & 0x3f]
  40e704:	f00c 053f 	and.w	r5, ip, #63	; 0x3f
  40e708:	f505 75c0 	add.w	r5, r5, #384	; 0x180

0040e70c <.LVL7>:
            l ^= Spbox[7][(work) & 0x3f]
  40e70c:	f004 083f 	and.w	r8, r4, #63	; 0x3f
  40e710:	f508 78e0 	add.w	r8, r8, #448	; 0x1c0
  40e714:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]

0040e718 <.LVL8>:
  40e718:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
  40e71c:	ea85 0508 	eor.w	r5, r5, r8
              ^  Spbox[4][(work >> 8) & 0x3f]
  40e720:	f3cc 2805 	ubfx	r8, ip, #8, #6
  40e724:	f508 7880 	add.w	r8, r8, #256	; 0x100
            l ^= Spbox[7][(work) & 0x3f]
  40e728:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
  40e72c:	ea85 0508 	eor.w	r5, r5, r8
              ^  Spbox[2][(work >> 16) & 0x3f]
  40e730:	f3cc 4805 	ubfx	r8, ip, #16, #6
  40e734:	f108 0880 	add.w	r8, r8, #128	; 0x80
            l ^= Spbox[7][(work) & 0x3f]
  40e738:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
  40e73c:	ea85 0508 	eor.w	r5, r5, r8
              ^  Spbox[0][(work >> 24) & 0x3f];
  40e740:	f3cc 6c05 	ubfx	ip, ip, #24, #6

0040e744 <.LVL9>:
            l ^= Spbox[7][(work) & 0x3f]
  40e744:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
  40e748:	ea85 050c 	eor.w	r5, r5, ip
              ^  Spbox[5][(work >> 8) & 0x3f]
  40e74c:	f3c4 2c05 	ubfx	ip, r4, #8, #6
  40e750:	f50c 7ca0 	add.w	ip, ip, #320	; 0x140
            l ^= Spbox[7][(work) & 0x3f]
  40e754:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
  40e758:	ea85 050c 	eor.w	r5, r5, ip
              ^  Spbox[3][(work >> 16) & 0x3f]
  40e75c:	f3c4 4c05 	ubfx	ip, r4, #16, #6
  40e760:	f10c 0cc0 	add.w	ip, ip, #192	; 0xc0
            l ^= Spbox[7][(work) & 0x3f]
  40e764:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
  40e768:	ea85 050c 	eor.w	r5, r5, ip
              ^  Spbox[1][(work >> 24) & 0x3f];
  40e76c:	f3c4 6405 	ubfx	r4, r4, #24, #6

0040e770 <.LVL10>:
  40e770:	3440      	adds	r4, #64	; 0x40
            l ^= Spbox[7][(work) & 0x3f]
  40e772:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
  40e776:	4065      	eors	r5, r4
  40e778:	406f      	eors	r7, r5

0040e77a <.LVL11>:

            work = rotrFixed(l, 4U) ^ kptr[4*i+2];
  40e77a:	68b5      	ldr	r5, [r6, #8]
  40e77c:	ea85 1537 	eor.w	r5, r5, r7, ror #4

0040e780 <.LVL12>:
            r ^= Spbox[6][(work) & 0x3f]
              ^  Spbox[4][(work >> 8) & 0x3f]
              ^  Spbox[2][(work >> 16) & 0x3f]
              ^  Spbox[0][(work >> 24) & 0x3f];
            work = l ^ kptr[4*i+3];
  40e780:	68f4      	ldr	r4, [r6, #12]
  40e782:	ea87 0c04 	eor.w	ip, r7, r4

0040e786 <.LVL13>:
            r ^= Spbox[6][(work) & 0x3f]
  40e786:	f005 043f 	and.w	r4, r5, #63	; 0x3f
  40e78a:	f504 74c0 	add.w	r4, r4, #384	; 0x180

0040e78e <.LVL14>:
            r ^= Spbox[7][(work) & 0x3f]
  40e78e:	f00c 083f 	and.w	r8, ip, #63	; 0x3f
  40e792:	f508 78e0 	add.w	r8, r8, #448	; 0x1c0
  40e796:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]

0040e79a <.LVL15>:
  40e79a:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
  40e79e:	ea84 0408 	eor.w	r4, r4, r8
  40e7a2:	ea84 040e 	eor.w	r4, r4, lr
              ^  Spbox[5][(work >> 8) & 0x3f]
  40e7a6:	f3cc 2e05 	ubfx	lr, ip, #8, #6

0040e7aa <.LVL16>:
  40e7aa:	f50e 7ea0 	add.w	lr, lr, #320	; 0x140
  40e7ae:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
  40e7b2:	ea84 040e 	eor.w	r4, r4, lr
              ^  Spbox[3][(work >> 16) & 0x3f]
  40e7b6:	f3cc 4e05 	ubfx	lr, ip, #16, #6
  40e7ba:	f10e 0ec0 	add.w	lr, lr, #192	; 0xc0
  40e7be:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
  40e7c2:	ea84 040e 	eor.w	r4, r4, lr
              ^  Spbox[1][(work >> 24) & 0x3f];
  40e7c6:	f3cc 6c05 	ubfx	ip, ip, #24, #6

0040e7ca <.LVL17>:
  40e7ca:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
  40e7ce:	f853 e02c 	ldr.w	lr, [r3, ip, lsl #2]
  40e7d2:	ea84 040e 	eor.w	r4, r4, lr
              ^  Spbox[4][(work >> 8) & 0x3f]
  40e7d6:	f3c5 2e05 	ubfx	lr, r5, #8, #6
  40e7da:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
  40e7de:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
  40e7e2:	ea84 040e 	eor.w	r4, r4, lr
              ^  Spbox[2][(work >> 16) & 0x3f]
  40e7e6:	f3c5 4e05 	ubfx	lr, r5, #16, #6
  40e7ea:	f10e 0e80 	add.w	lr, lr, #128	; 0x80
  40e7ee:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
  40e7f2:	ea84 040e 	eor.w	r4, r4, lr
              ^  Spbox[0][(work >> 24) & 0x3f];
  40e7f6:	f3c5 6505 	ubfx	r5, r5, #24, #6
            r ^= Spbox[7][(work) & 0x3f]
  40e7fa:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
  40e7fe:	ea84 0e05 	eor.w	lr, r4, r5

0040e802 <.LVL18>:
  40e802:	3610      	adds	r6, #16

0040e804 <.LBE68>:
        for (i=0; i<8; i++)
  40e804:	42b2      	cmp	r2, r6
  40e806:	f47f af77 	bne.w	40e6f8 <.LVL4>
        }

        *lIn = l; *rIn = r;
  40e80a:	6007      	str	r7, [r0, #0]

0040e80c <.LVL20>:
  40e80c:	f8c1 e000 	str.w	lr, [r1]
  40e810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040e814 <.LVL21>:
  40e814:	004094d0 	.word	0x004094d0

Disassembly of section .text.Des3ProcessBlock%80:

0040e818 <Des3ProcessBlock>:
        XMEMCPY(out, &r, sizeof(r));
        XMEMCPY(out + sizeof(r), &l, sizeof(l));
    }

    static void Des3ProcessBlock(Des3* des, const byte* in, byte* out)
    {
  40e818:	b5f0      	push	{r4, r5, r6, r7, lr}

0040e81a <.LCFI1>:
  40e81a:	b083      	sub	sp, #12

0040e81c <.LCFI2>:
  40e81c:	4606      	mov	r6, r0
  40e81e:	4614      	mov	r4, r2
        word32 l, r;

        XMEMCPY(&l, in, sizeof(l));
  40e820:	680b      	ldr	r3, [r1, #0]
        XMEMCPY(&r, in + sizeof(l), sizeof(r));
  40e822:	6849      	ldr	r1, [r1, #4]

0040e824 <.LBB113>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40e824:	0a1a      	lsrs	r2, r3, #8

0040e826 <.LVL24>:
  40e826:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
  40e82a:	021b      	lsls	r3, r3, #8

0040e82c <.LVL25>:
  40e82c:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  40e830:	431a      	orrs	r2, r3

0040e832 <.LBB115>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40e832:	ea4f 4232 	mov.w	r2, r2, ror #16

0040e836 <.LBB117>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40e836:	0a0b      	lsrs	r3, r1, #8
  40e838:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  40e83c:	0209      	lsls	r1, r1, #8

0040e83e <.LVL28>:
  40e83e:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  40e842:	430b      	orrs	r3, r1

0040e844 <.LBB119>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40e844:	ea4f 3333 	mov.w	r3, r3, ror #12

0040e848 <.LBE121>:
        work = (*left ^ *right) & 0xf0f0f0f0;
  40e848:	ea82 0103 	eor.w	r1, r2, r3
  40e84c:	f001 31f0 	and.w	r1, r1, #4042322160	; 0xf0f0f0f0

0040e850 <.LVL30>:
        *left ^= work;
  40e850:	404a      	eors	r2, r1

0040e852 <.LVL31>:
        *right = rotrFixed(*right^work, 20U);
  40e852:	404b      	eors	r3, r1

0040e854 <.LBB123>:
        return (x >> y) | (x << (sizeof(y) * 8 - y));
  40e854:	ea4f 5333 	mov.w	r3, r3, ror #20

0040e858 <.LBE123>:
        work = (*left ^ *right) & 0xffff0000;
  40e858:	ea82 0103 	eor.w	r1, r2, r3

0040e85c <.LVL34>:
  40e85c:	4d39      	ldr	r5, [pc, #228]	; (40e944 <.LVL83>)
  40e85e:	4029      	ands	r1, r5

0040e860 <.LVL35>:
        *left ^= work;
  40e860:	404a      	eors	r2, r1

0040e862 <.LVL36>:
        *right = rotrFixed(*right^work, 18U);
  40e862:	404b      	eors	r3, r1

0040e864 <.LBB125>:
  40e864:	ea4f 43b3 	mov.w	r3, r3, ror #18

0040e868 <.LBE125>:
        work = (*left ^ *right) & 0x33333333;
  40e868:	ea82 0103 	eor.w	r1, r2, r3

0040e86c <.LVL39>:
  40e86c:	f001 3133 	and.w	r1, r1, #858993459	; 0x33333333

0040e870 <.LVL40>:
        *left ^= work;
  40e870:	404a      	eors	r2, r1

0040e872 <.LVL41>:
        *right = rotrFixed(*right^work, 6U);
  40e872:	404b      	eors	r3, r1

0040e874 <.LBB127>:
  40e874:	ea4f 13b3 	mov.w	r3, r3, ror #6

0040e878 <.LBE127>:
        work = (*left ^ *right) & 0x00ff00ff;
  40e878:	ea82 0103 	eor.w	r1, r2, r3

0040e87c <.LVL44>:
  40e87c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff

0040e880 <.LVL45>:
        *left ^= work;
  40e880:	404a      	eors	r2, r1

0040e882 <.LVL46>:
        *right = rotlFixed(*right^work, 9U);
  40e882:	404b      	eors	r3, r1

0040e884 <.LBB129>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40e884:	ea4f 53f3 	mov.w	r3, r3, ror #23

0040e888 <.LBE129>:
        work = (*left ^ *right) & 0xaaaaaaaa;
  40e888:	ea82 0103 	eor.w	r1, r2, r3

0040e88c <.LVL49>:
  40e88c:	f001 31aa 	and.w	r1, r1, #2863311530	; 0xaaaaaaaa

0040e890 <.LVL50>:
        *left = rotlFixed(*left^work, 1U);
  40e890:	404a      	eors	r2, r1

0040e892 <.LBB131>:
  40e892:	ea4f 72f2 	mov.w	r2, r2, ror #31

0040e896 <.LBE131>:
  40e896:	9201      	str	r2, [sp, #4]
        *right ^= work;
  40e898:	404b      	eors	r3, r1
  40e89a:	af02      	add	r7, sp, #8
  40e89c:	f847 3d08 	str.w	r3, [r7, #-8]!

0040e8a0 <.LBE119>:
            l = ByteReverseWord32(l);
            r = ByteReverseWord32(r);
        #endif
        IPERM(&l,&r);

        DesRawProcessBlock(&l, &r, des->key[0]);
  40e8a0:	4602      	mov	r2, r0
  40e8a2:	4639      	mov	r1, r7
  40e8a4:	a801      	add	r0, sp, #4

0040e8a6 <.LVL52>:
  40e8a6:	f7ff ff1f 	bl	40e6e8 <L0>

0040e8aa <.LVL53>:
        DesRawProcessBlock(&r, &l, des->key[1]);
  40e8aa:	f106 0280 	add.w	r2, r6, #128	; 0x80
  40e8ae:	a901      	add	r1, sp, #4
  40e8b0:	4638      	mov	r0, r7
  40e8b2:	f7ff ff19 	bl	40e6e8 <L0>

0040e8b6 <.LVL54>:
        DesRawProcessBlock(&l, &r, des->key[2]);
  40e8b6:	f506 7280 	add.w	r2, r6, #256	; 0x100
  40e8ba:	4639      	mov	r1, r7
  40e8bc:	a801      	add	r0, sp, #4
  40e8be:	f7ff ff13 	bl	40e6e8 <L0>

0040e8c2 <.LBB133>:
        return (x >> y) | (x << (sizeof(y) * 8 - y));
  40e8c2:	9a00      	ldr	r2, [sp, #0]
  40e8c4:	ea4f 0272 	mov.w	r2, r2, ror #1

0040e8c8 <.LBE135>:
        work = (*left ^ *right) & 0xaaaaaaaa;
  40e8c8:	9b01      	ldr	r3, [sp, #4]
  40e8ca:	ea82 0103 	eor.w	r1, r2, r3
  40e8ce:	f001 31aa 	and.w	r1, r1, #2863311530	; 0xaaaaaaaa

0040e8d2 <.LVL57>:
        *right ^= work;
  40e8d2:	404a      	eors	r2, r1

0040e8d4 <.LVL58>:
        *left = rotrFixed(*left^work, 9U);
  40e8d4:	404b      	eors	r3, r1

0040e8d6 <.LBB137>:
  40e8d6:	ea4f 2373 	mov.w	r3, r3, ror #9

0040e8da <.LBE137>:
        work = (*left ^ *right) & 0x00ff00ff;
  40e8da:	ea82 0103 	eor.w	r1, r2, r3

0040e8de <.LVL61>:
  40e8de:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff

0040e8e2 <.LVL62>:
        *right ^= work;
  40e8e2:	404a      	eors	r2, r1

0040e8e4 <.LVL63>:
        *left = rotlFixed(*left^work, 6U);
  40e8e4:	404b      	eors	r3, r1

0040e8e6 <.LBB139>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40e8e6:	ea4f 63b3 	mov.w	r3, r3, ror #26

0040e8ea <.LBE139>:
        work = (*left ^ *right) & 0x33333333;
  40e8ea:	ea82 0103 	eor.w	r1, r2, r3

0040e8ee <.LVL66>:
  40e8ee:	f001 3133 	and.w	r1, r1, #858993459	; 0x33333333

0040e8f2 <.LVL67>:
        *right ^= work;
  40e8f2:	404a      	eors	r2, r1

0040e8f4 <.LVL68>:
        *left = rotlFixed(*left^work, 18U);
  40e8f4:	404b      	eors	r3, r1

0040e8f6 <.LBB141>:
  40e8f6:	ea4f 33b3 	mov.w	r3, r3, ror #14

0040e8fa <.LBE141>:
        work = (*left ^ *right) & 0xffff0000;
  40e8fa:	ea82 0103 	eor.w	r1, r2, r3

0040e8fe <.LVL71>:
  40e8fe:	400d      	ands	r5, r1

0040e900 <.LVL72>:
        *right ^= work;
  40e900:	406a      	eors	r2, r5

0040e902 <.LVL73>:
        *left = rotlFixed(*left^work, 20U);
  40e902:	406b      	eors	r3, r5

0040e904 <.LBB143>:
  40e904:	ea4f 3333 	mov.w	r3, r3, ror #12

0040e908 <.LBE143>:
        work = (*left ^ *right) & 0xf0f0f0f0;
  40e908:	ea82 0103 	eor.w	r1, r2, r3
  40e90c:	f001 31f0 	and.w	r1, r1, #4042322160	; 0xf0f0f0f0

0040e910 <.LVL76>:
        *right ^= work;
  40e910:	404a      	eors	r2, r1

0040e912 <.LVL77>:
        *left = rotrFixed(*left^work, 4U);
  40e912:	404b      	eors	r3, r1

0040e914 <.LBB145>:
        return (x >> y) | (x << (sizeof(y) * 8 - y));
  40e914:	ea4f 1333 	mov.w	r3, r3, ror #4

0040e918 <.LBB147>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40e918:	0211      	lsls	r1, r2, #8
  40e91a:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  40e91e:	0a12      	lsrs	r2, r2, #8

0040e920 <.LVL80>:
  40e920:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
  40e924:	430a      	orrs	r2, r1

0040e926 <.LBB149>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40e926:	ea4f 4232 	mov.w	r2, r2, ror #16

0040e92a <.LBE147>:
        FPERM(&l,&r);
        #ifdef LITTLE_ENDIAN_ORDER
            l = ByteReverseWord32(l);
            r = ByteReverseWord32(r);
        #endif
        XMEMCPY(out, &r, sizeof(r));
  40e92a:	6022      	str	r2, [r4, #0]

0040e92c <.LBB151>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40e92c:	0a1a      	lsrs	r2, r3, #8
  40e92e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
  40e932:	021b      	lsls	r3, r3, #8

0040e934 <.LVL81>:
  40e934:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  40e938:	4313      	orrs	r3, r2

0040e93a <.LBB153>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40e93a:	ea4f 4333 	mov.w	r3, r3, ror #16

0040e93e <.LBE151>:
        XMEMCPY(out + sizeof(r), &l, sizeof(l));
  40e93e:	6063      	str	r3, [r4, #4]
    }
  40e940:	b003      	add	sp, #12

0040e942 <.LCFI3>:
  40e942:	bdf0      	pop	{r4, r5, r6, r7, pc}

0040e944 <.LVL83>:
  40e944:	ffff0000 	.word	0xffff0000

Disassembly of section .text.quorem%81:

0040e948 <quorem>:
  40e948:	6902      	ldr	r2, [r0, #16]
  40e94a:	690b      	ldr	r3, [r1, #16]

0040e94c <.LVL1>:
  40e94c:	4293      	cmp	r3, r2
  40e94e:	f300 808d 	bgt.w	40ea6c <.LCFI3>
  40e952:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0040e956 <.LCFI0>:
  40e956:	f103 38ff 	add.w	r8, r3, #4294967295
  40e95a:	f101 0714 	add.w	r7, r1, #20

0040e95e <.LVL2>:
  40e95e:	f100 0b14 	add.w	fp, r0, #20
  40e962:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40e966:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  40e96a:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40e96e:	b083      	sub	sp, #12

0040e970 <.LCFI1>:
  40e970:	3201      	adds	r2, #1
  40e972:	fbb3 f9f2 	udiv	r9, r3, r2
  40e976:	eb0b 0304 	add.w	r3, fp, r4
  40e97a:	9400      	str	r4, [sp, #0]
  40e97c:	eb07 0a04 	add.w	sl, r7, r4

0040e980 <.LVL3>:
  40e980:	9301      	str	r3, [sp, #4]

0040e982 <.LVL4>:
  40e982:	f1b9 0f00 	cmp.w	r9, #0
  40e986:	d039      	beq.n	40e9fc <.LVL23>
  40e988:	2500      	movs	r5, #0
  40e98a:	462e      	mov	r6, r5
  40e98c:	46bc      	mov	ip, r7
  40e98e:	46de      	mov	lr, fp

0040e990 <.LVL5>:
  40e990:	f85c 4b04 	ldr.w	r4, [ip], #4

0040e994 <.LVL6>:
  40e994:	f8de 3000 	ldr.w	r3, [lr]
  40e998:	b2a2      	uxth	r2, r4
  40e99a:	fb09 5502 	mla	r5, r9, r2, r5

0040e99e <.LVL7>:
  40e99e:	0c22      	lsrs	r2, r4, #16
  40e9a0:	0c2c      	lsrs	r4, r5, #16

0040e9a2 <.LVL8>:
  40e9a2:	fb09 4202 	mla	r2, r9, r2, r4

0040e9a6 <.LVL9>:
  40e9a6:	b2ad      	uxth	r5, r5

0040e9a8 <.LVL10>:
  40e9a8:	1b75      	subs	r5, r6, r5
  40e9aa:	b296      	uxth	r6, r2

0040e9ac <.LVL11>:
  40e9ac:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  40e9b0:	fa15 f383 	uxtah	r3, r5, r3
  40e9b4:	eb06 4623 	add.w	r6, r6, r3, asr #16
  40e9b8:	b29b      	uxth	r3, r3
  40e9ba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  40e9be:	45e2      	cmp	sl, ip
  40e9c0:	ea4f 4512 	mov.w	r5, r2, lsr #16

0040e9c4 <.LVL12>:
  40e9c4:	f84e 3b04 	str.w	r3, [lr], #4

0040e9c8 <.LVL13>:
  40e9c8:	ea4f 4626 	mov.w	r6, r6, asr #16

0040e9cc <.LVL14>:
  40e9cc:	d2e0      	bcs.n	40e990 <.LVL5>
  40e9ce:	9b00      	ldr	r3, [sp, #0]
  40e9d0:	f85b 3003 	ldr.w	r3, [fp, r3]
  40e9d4:	b993      	cbnz	r3, 40e9fc <.LVL23>

0040e9d6 <.LVL15>:
  40e9d6:	9c01      	ldr	r4, [sp, #4]
  40e9d8:	1f23      	subs	r3, r4, #4

0040e9da <.LVL16>:
  40e9da:	459b      	cmp	fp, r3
  40e9dc:	d20c      	bcs.n	40e9f8 <.LVL22>
  40e9de:	f854 3c04 	ldr.w	r3, [r4, #-4]

0040e9e2 <.LVL17>:
  40e9e2:	b94b      	cbnz	r3, 40e9f8 <.LVL22>
  40e9e4:	f1a4 0308 	sub.w	r3, r4, #8
  40e9e8:	e002      	b.n	40e9f0 <.LVL19+0x2>

0040e9ea <.LVL18>:
  40e9ea:	681a      	ldr	r2, [r3, #0]
  40e9ec:	3b04      	subs	r3, #4

0040e9ee <.LVL19>:
  40e9ee:	b91a      	cbnz	r2, 40e9f8 <.LVL22>
  40e9f0:	459b      	cmp	fp, r3
  40e9f2:	f108 38ff 	add.w	r8, r8, #4294967295

0040e9f6 <.LVL21>:
  40e9f6:	d3f8      	bcc.n	40e9ea <.LVL18>

0040e9f8 <.LVL22>:
  40e9f8:	f8c0 8010 	str.w	r8, [r0, #16]

0040e9fc <.LVL23>:
  40e9fc:	4604      	mov	r4, r0
  40e9fe:	f003 fdb3 	bl	412568 <.LFE17>

0040ea02 <.LVL24>:
  40ea02:	2800      	cmp	r0, #0
  40ea04:	db2e      	blt.n	40ea64 <.LVL46>
  40ea06:	f109 0901 	add.w	r9, r9, #1

0040ea0a <.LVL25>:
  40ea0a:	465d      	mov	r5, fp
  40ea0c:	2300      	movs	r3, #0

0040ea0e <.LVL26>:
  40ea0e:	f857 1b04 	ldr.w	r1, [r7], #4

0040ea12 <.LVL27>:
  40ea12:	6828      	ldr	r0, [r5, #0]
  40ea14:	b28a      	uxth	r2, r1
  40ea16:	1a9a      	subs	r2, r3, r2
  40ea18:	0c0b      	lsrs	r3, r1, #16

0040ea1a <.LVL28>:
  40ea1a:	fa12 f280 	uxtah	r2, r2, r0

0040ea1e <.LVL29>:
  40ea1e:	ebc3 4310 	rsb	r3, r3, r0, lsr #16

0040ea22 <.LVL30>:
  40ea22:	eb03 4322 	add.w	r3, r3, r2, asr #16

0040ea26 <.LVL31>:
  40ea26:	b292      	uxth	r2, r2

0040ea28 <.LVL32>:
  40ea28:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40ea2c:	45ba      	cmp	sl, r7
  40ea2e:	f845 2b04 	str.w	r2, [r5], #4

0040ea32 <.LVL33>:
  40ea32:	ea4f 4323 	mov.w	r3, r3, asr #16

0040ea36 <.LVL34>:
  40ea36:	d2ea      	bcs.n	40ea0e <.LVL26>

0040ea38 <.LVL35>:
  40ea38:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  40ea3c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2

0040ea40 <.LVL36>:
  40ea40:	b982      	cbnz	r2, 40ea64 <.LVL46>

0040ea42 <.LVL37>:
  40ea42:	1f1a      	subs	r2, r3, #4

0040ea44 <.LVL38>:
  40ea44:	4593      	cmp	fp, r2
  40ea46:	d20b      	bcs.n	40ea60 <.LVL45>
  40ea48:	f853 2c04 	ldr.w	r2, [r3, #-4]

0040ea4c <.LVL39>:
  40ea4c:	b942      	cbnz	r2, 40ea60 <.LVL45>
  40ea4e:	3b08      	subs	r3, #8

0040ea50 <.LVL40>:
  40ea50:	e002      	b.n	40ea58 <.LVL42+0x2>

0040ea52 <.LVL41>:
  40ea52:	681a      	ldr	r2, [r3, #0]
  40ea54:	3b04      	subs	r3, #4

0040ea56 <.LVL42>:
  40ea56:	b91a      	cbnz	r2, 40ea60 <.LVL45>
  40ea58:	459b      	cmp	fp, r3
  40ea5a:	f108 38ff 	add.w	r8, r8, #4294967295

0040ea5e <.LVL44>:
  40ea5e:	d3f8      	bcc.n	40ea52 <.LVL41>

0040ea60 <.LVL45>:
  40ea60:	f8c4 8010 	str.w	r8, [r4, #16]

0040ea64 <.LVL46>:
  40ea64:	4648      	mov	r0, r9
  40ea66:	b003      	add	sp, #12

0040ea68 <.LCFI2>:
  40ea68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040ea6c <.LCFI3>:
  40ea6c:	2000      	movs	r0, #0

0040ea6e <.LVL48>:
  40ea6e:	4770      	bx	lr

Disassembly of section .text.USART1_InterruptHandler%82:

0040ea70 <USART1_InterruptHandler>:

    return;
}

void USART1_InterruptHandler( void )
{
  40ea70:	b570      	push	{r4, r5, r6, lr}

0040ea72 <.LCFI0>:
    /* Error status */
    uint32_t errorStatus = (USART1_REGS->US_CSR & (US_CSR_OVRE_Msk | US_CSR_FRAME_Msk | US_CSR_PARE_Msk));
  40ea72:	4b46      	ldr	r3, [pc, #280]	; (40eb8c <.LBB11+0xe>)
  40ea74:	695b      	ldr	r3, [r3, #20]

0040ea76 <.LVL0>:

    if(errorStatus != 0)
  40ea76:	f013 0fe0 	tst.w	r3, #224	; 0xe0
  40ea7a:	d00e      	beq.n	40ea9a <.LVL1+0x1c>
    {
        /* Client must call USARTx_ErrorGet() function to clear the errors */

        /* USART errors are normally associated with the receiver, hence calling
         * receiver context */
        if( usart1Obj.rxCallback != NULL )
  40ea7c:	4b44      	ldr	r3, [pc, #272]	; (40eb90 <.LBB11+0x12>)

0040ea7e <.LVL1>:
  40ea7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40ea80:	b113      	cbz	r3, 40ea88 <.LVL1+0xa>
        {
            usart1Obj.rxCallback(usart1Obj.rxContext);
  40ea82:	4a43      	ldr	r2, [pc, #268]	; (40eb90 <.LBB11+0x12>)
  40ea84:	6a90      	ldr	r0, [r2, #40]	; 0x28
  40ea86:	4798      	blx	r3
        }

        usart1Obj.rxBusyStatus = false;
  40ea88:	4b41      	ldr	r3, [pc, #260]	; (40eb90 <.LBB11+0x12>)
  40ea8a:	2200      	movs	r2, #0
  40ea8c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        usart1Obj.rxSize = 0;
  40ea90:	61da      	str	r2, [r3, #28]
        usart1Obj.rxProcessedSize = 0;
  40ea92:	621a      	str	r2, [r3, #32]

        /* Disable Read, Overrun, Parity and Framing error interrupts */
        USART1_REGS->US_IDR = (US_IDR_RXRDY_Msk | US_IDR_FRAME_Msk | US_IDR_PARE_Msk | US_IDR_OVRE_Msk);
  40ea94:	22e1      	movs	r2, #225	; 0xe1
  40ea96:	4b3d      	ldr	r3, [pc, #244]	; (40eb8c <.LBB11+0xe>)
  40ea98:	60da      	str	r2, [r3, #12]
    }

    /* Receiver status */
    if(US_CSR_RXRDY_Msk == (USART1_REGS->US_CSR& US_CSR_RXRDY_Msk))
  40ea9a:	4b3c      	ldr	r3, [pc, #240]	; (40eb8c <.LBB11+0xe>)
  40ea9c:	695b      	ldr	r3, [r3, #20]
  40ea9e:	f013 0f01 	tst.w	r3, #1
  40eaa2:	d105      	bne.n	40eab0 <.LBB6>
    {
        USART1_ISR_RX_Handler();
    }

    /* Transmitter status */
    if(US_CSR_TXEMPTY_Msk == (USART1_REGS->US_CSR& US_CSR_TXEMPTY_Msk))
  40eaa4:	4b39      	ldr	r3, [pc, #228]	; (40eb8c <.LBB11+0xe>)
  40eaa6:	695b      	ldr	r3, [r3, #20]
  40eaa8:	f413 7f00 	tst.w	r3, #512	; 0x200
  40eaac:	d134      	bne.n	40eb18 <.LBB8>
  40eaae:	bd70      	pop	{r4, r5, r6, pc}

0040eab0 <.LBB6>:
    if(usart1Obj.rxBusyStatus == true)
  40eab0:	4b37      	ldr	r3, [pc, #220]	; (40eb90 <.LBB11+0x12>)
  40eab2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
  40eab6:	2b00      	cmp	r3, #0
  40eab8:	d0f4      	beq.n	40eaa4 <.LVL1+0x26>
        while((US_CSR_RXRDY_Msk == (USART1_REGS->US_CSR& US_CSR_RXRDY_Msk)) && (usart1Obj.rxSize > usart1Obj.rxProcessedSize) )
  40eaba:	4b34      	ldr	r3, [pc, #208]	; (40eb8c <.LBB11+0xe>)
  40eabc:	695b      	ldr	r3, [r3, #20]
  40eabe:	f013 0f01 	tst.w	r3, #1
  40eac2:	d023      	beq.n	40eb0c <.LBB6+0x5c>
  40eac4:	4a32      	ldr	r2, [pc, #200]	; (40eb90 <.LBB11+0x12>)
  40eac6:	6a13      	ldr	r3, [r2, #32]
  40eac8:	69d2      	ldr	r2, [r2, #28]
  40eaca:	429a      	cmp	r2, r3
  40eacc:	d90e      	bls.n	40eaec <.LBB6+0x3c>
            usart1Obj.rxBuffer[usart1Obj.rxProcessedSize++] = (USART1_REGS->US_RHR& US_RHR_RXCHR_Msk);
  40eace:	4a30      	ldr	r2, [pc, #192]	; (40eb90 <.LBB11+0x12>)
  40ead0:	492e      	ldr	r1, [pc, #184]	; (40eb8c <.LBB11+0xe>)
  40ead2:	6990      	ldr	r0, [r2, #24]
  40ead4:	1c5c      	adds	r4, r3, #1
  40ead6:	6214      	str	r4, [r2, #32]
  40ead8:	698c      	ldr	r4, [r1, #24]
  40eada:	54c4      	strb	r4, [r0, r3]
        while((US_CSR_RXRDY_Msk == (USART1_REGS->US_CSR& US_CSR_RXRDY_Msk)) && (usart1Obj.rxSize > usart1Obj.rxProcessedSize) )
  40eadc:	694b      	ldr	r3, [r1, #20]
  40eade:	f013 0f01 	tst.w	r3, #1
  40eae2:	d013      	beq.n	40eb0c <.LBB6+0x5c>
  40eae4:	6a13      	ldr	r3, [r2, #32]
  40eae6:	69d0      	ldr	r0, [r2, #28]
  40eae8:	4283      	cmp	r3, r0
  40eaea:	d3f2      	bcc.n	40ead2 <.LBB6+0x22>
            usart1Obj.rxBusyStatus = false;
  40eaec:	4b28      	ldr	r3, [pc, #160]	; (40eb90 <.LBB11+0x12>)
  40eaee:	2200      	movs	r2, #0
  40eaf0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            usart1Obj.rxSize = 0;
  40eaf4:	61da      	str	r2, [r3, #28]
            usart1Obj.rxProcessedSize = 0;
  40eaf6:	621a      	str	r2, [r3, #32]
            USART1_REGS->US_IDR = (US_IDR_RXRDY_Msk | US_IDR_FRAME_Msk | US_IDR_PARE_Msk | US_IDR_OVRE_Msk);
  40eaf8:	21e1      	movs	r1, #225	; 0xe1
  40eafa:	4a24      	ldr	r2, [pc, #144]	; (40eb8c <.LBB11+0xe>)
  40eafc:	60d1      	str	r1, [r2, #12]
            if(usart1Obj.rxCallback != NULL)
  40eafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40eb00:	2b00      	cmp	r3, #0
  40eb02:	d0cf      	beq.n	40eaa4 <.LVL1+0x26>
                usart1Obj.rxCallback(usart1Obj.rxContext);
  40eb04:	4a22      	ldr	r2, [pc, #136]	; (40eb90 <.LBB11+0x12>)
  40eb06:	6a90      	ldr	r0, [r2, #40]	; 0x28
  40eb08:	4798      	blx	r3
  40eb0a:	e7cb      	b.n	40eaa4 <.LVL1+0x26>
        if(usart1Obj.rxProcessedSize >= usart1Obj.rxSize)
  40eb0c:	4b20      	ldr	r3, [pc, #128]	; (40eb90 <.LBB11+0x12>)
  40eb0e:	6a1a      	ldr	r2, [r3, #32]
  40eb10:	69db      	ldr	r3, [r3, #28]
  40eb12:	429a      	cmp	r2, r3
  40eb14:	d3c6      	bcc.n	40eaa4 <.LVL1+0x26>
  40eb16:	e7e9      	b.n	40eaec <.LBB6+0x3c>

0040eb18 <.LBB8>:
    if(usart1Obj.txBusyStatus == true)
  40eb18:	4b1d      	ldr	r3, [pc, #116]	; (40eb90 <.LBB11+0x12>)
  40eb1a:	7d1b      	ldrb	r3, [r3, #20]
  40eb1c:	2b00      	cmp	r3, #0
  40eb1e:	d0c6      	beq.n	40eaae <.LVL1+0x30>
        while((US_CSR_TXEMPTY_Msk == (USART1_REGS->US_CSR& US_CSR_TXEMPTY_Msk)) && (usart1Obj.txSize > usart1Obj.txProcessedSize) )
  40eb20:	4b1a      	ldr	r3, [pc, #104]	; (40eb8c <.LBB11+0xe>)
  40eb22:	695b      	ldr	r3, [r3, #20]
  40eb24:	f413 7f00 	tst.w	r3, #512	; 0x200
  40eb28:	d029      	beq.n	40eb7e <.LBB11>
  40eb2a:	4b19      	ldr	r3, [pc, #100]	; (40eb90 <.LBB11+0x12>)
  40eb2c:	685d      	ldr	r5, [r3, #4]
  40eb2e:	689b      	ldr	r3, [r3, #8]
  40eb30:	429d      	cmp	r5, r3
  40eb32:	d914      	bls.n	40eb5e <.LBB8+0x46>
            USART1_REGS->US_THR|= usart1Obj.txBuffer[usart1Obj.txProcessedSize++];
  40eb34:	4a16      	ldr	r2, [pc, #88]	; (40eb90 <.LBB11+0x12>)
  40eb36:	6814      	ldr	r4, [r2, #0]
  40eb38:	4423      	add	r3, r4
  40eb3a:	4425      	add	r5, r4
  40eb3c:	4616      	mov	r6, r2
  40eb3e:	f1c4 0401 	rsb	r4, r4, #1
  40eb42:	4912      	ldr	r1, [pc, #72]	; (40eb8c <.LBB11+0xe>)
  40eb44:	18e2      	adds	r2, r4, r3
  40eb46:	60b2      	str	r2, [r6, #8]
  40eb48:	f813 2b01 	ldrb.w	r2, [r3], #1
  40eb4c:	69c8      	ldr	r0, [r1, #28]
  40eb4e:	4302      	orrs	r2, r0
  40eb50:	61ca      	str	r2, [r1, #28]
        while((US_CSR_TXEMPTY_Msk == (USART1_REGS->US_CSR& US_CSR_TXEMPTY_Msk)) && (usart1Obj.txSize > usart1Obj.txProcessedSize) )
  40eb52:	694a      	ldr	r2, [r1, #20]
  40eb54:	f412 7f00 	tst.w	r2, #512	; 0x200
  40eb58:	d011      	beq.n	40eb7e <.LBB11>
  40eb5a:	429d      	cmp	r5, r3
  40eb5c:	d1f2      	bne.n	40eb44 <.LBB8+0x2c>
            usart1Obj.txBusyStatus = false;
  40eb5e:	4b0c      	ldr	r3, [pc, #48]	; (40eb90 <.LBB11+0x12>)
  40eb60:	2200      	movs	r2, #0
  40eb62:	751a      	strb	r2, [r3, #20]
            usart1Obj.txSize = 0;
  40eb64:	605a      	str	r2, [r3, #4]
            usart1Obj.txProcessedSize = 0;
  40eb66:	609a      	str	r2, [r3, #8]
            USART1_REGS->US_IDR = US_IDR_TXEMPTY_Msk;
  40eb68:	f44f 7100 	mov.w	r1, #512	; 0x200
  40eb6c:	4a07      	ldr	r2, [pc, #28]	; (40eb8c <.LBB11+0xe>)
  40eb6e:	60d1      	str	r1, [r2, #12]
            if(usart1Obj.txCallback != NULL)
  40eb70:	68db      	ldr	r3, [r3, #12]
  40eb72:	2b00      	cmp	r3, #0
  40eb74:	d09b      	beq.n	40eaae <.LVL1+0x30>
                usart1Obj.txCallback(usart1Obj.txContext);
  40eb76:	4a06      	ldr	r2, [pc, #24]	; (40eb90 <.LBB11+0x12>)
  40eb78:	6910      	ldr	r0, [r2, #16]
  40eb7a:	4798      	blx	r3

0040eb7c <.LBE8>:
    {
        USART1_ISR_TX_Handler();
    }

    return;
  40eb7c:	e797      	b.n	40eaae <.LVL1+0x30>

0040eb7e <.LBB11>:
        if(usart1Obj.txProcessedSize >= usart1Obj.txSize)
  40eb7e:	4b04      	ldr	r3, [pc, #16]	; (40eb90 <.LBB11+0x12>)
  40eb80:	689a      	ldr	r2, [r3, #8]
  40eb82:	685b      	ldr	r3, [r3, #4]
  40eb84:	429a      	cmp	r2, r3
  40eb86:	d392      	bcc.n	40eaae <.LVL1+0x30>
  40eb88:	e7e9      	b.n	40eb5e <.LBB8+0x46>
  40eb8a:	bf00      	nop
  40eb8c:	40028000 	.word	0x40028000
  40eb90:	20400020 	.word	0x20400020

Disassembly of section .text.__multiply%83:

0040eb94 <__multiply>:
  40eb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0040eb98 <.LCFI7>:
  40eb98:	690c      	ldr	r4, [r1, #16]
  40eb9a:	6915      	ldr	r5, [r2, #16]
  40eb9c:	42ac      	cmp	r4, r5
  40eb9e:	b083      	sub	sp, #12

0040eba0 <.LCFI8>:
  40eba0:	468b      	mov	fp, r1
  40eba2:	4616      	mov	r6, r2
  40eba4:	da04      	bge.n	40ebb0 <.LVL110>
  40eba6:	4622      	mov	r2, r4

0040eba8 <.LVL108>:
  40eba8:	46b3      	mov	fp, r6
  40ebaa:	462c      	mov	r4, r5
  40ebac:	460e      	mov	r6, r1

0040ebae <.LVL109>:
  40ebae:	4615      	mov	r5, r2

0040ebb0 <.LVL110>:
  40ebb0:	f8db 3008 	ldr.w	r3, [fp, #8]
  40ebb4:	f8db 1004 	ldr.w	r1, [fp, #4]

0040ebb8 <.LVL111>:
  40ebb8:	eb04 0805 	add.w	r8, r4, r5

0040ebbc <.LVL112>:
  40ebbc:	4598      	cmp	r8, r3
  40ebbe:	bfc8      	it	gt
  40ebc0:	3101      	addgt	r1, #1
  40ebc2:	f003 f9e3 	bl	411f8c <.LFE2>

0040ebc6 <.LVL114>:
  40ebc6:	f100 0914 	add.w	r9, r0, #20
  40ebca:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  40ebce:	45d1      	cmp	r9, sl
  40ebd0:	9000      	str	r0, [sp, #0]

0040ebd2 <.LVL115>:
  40ebd2:	d205      	bcs.n	40ebe0 <.LVL118>
  40ebd4:	464b      	mov	r3, r9
  40ebd6:	2100      	movs	r1, #0

0040ebd8 <.LVL116>:
  40ebd8:	f843 1b04 	str.w	r1, [r3], #4
  40ebdc:	459a      	cmp	sl, r3
  40ebde:	d8fb      	bhi.n	40ebd8 <.LVL116>

0040ebe0 <.LVL118>:
  40ebe0:	f106 0c14 	add.w	ip, r6, #20
  40ebe4:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  40ebe8:	f10b 0b14 	add.w	fp, fp, #20

0040ebec <.LVL119>:
  40ebec:	459c      	cmp	ip, r3
  40ebee:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2

0040ebf2 <.LVL120>:
  40ebf2:	d24c      	bcs.n	40ec8e <.LVL144>
  40ebf4:	f8cd a004 	str.w	sl, [sp, #4]
  40ebf8:	469a      	mov	sl, r3

0040ebfa <.LVL121>:
  40ebfa:	f8dc 5000 	ldr.w	r5, [ip]
  40ebfe:	b2af      	uxth	r7, r5

0040ec00 <.LVL122>:
  40ec00:	b1ef      	cbz	r7, 40ec3e <.LVL130>
  40ec02:	2100      	movs	r1, #0
  40ec04:	464d      	mov	r5, r9
  40ec06:	465e      	mov	r6, fp
  40ec08:	460c      	mov	r4, r1

0040ec0a <.LVL123>:
  40ec0a:	f856 2b04 	ldr.w	r2, [r6], #4

0040ec0e <.LVL124>:
  40ec0e:	6828      	ldr	r0, [r5, #0]
  40ec10:	b293      	uxth	r3, r2
  40ec12:	b281      	uxth	r1, r0
  40ec14:	fb07 1303 	mla	r3, r7, r3, r1
  40ec18:	0c12      	lsrs	r2, r2, #16
  40ec1a:	0c01      	lsrs	r1, r0, #16
  40ec1c:	4423      	add	r3, r4

0040ec1e <.LVL125>:
  40ec1e:	fb07 1102 	mla	r1, r7, r2, r1
  40ec22:	eb01 4113 	add.w	r1, r1, r3, lsr #16

0040ec26 <.LVL126>:
  40ec26:	b29b      	uxth	r3, r3

0040ec28 <.LVL127>:
  40ec28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40ec2c:	45b6      	cmp	lr, r6
  40ec2e:	f845 3b04 	str.w	r3, [r5], #4

0040ec32 <.LVL128>:
  40ec32:	ea4f 4411 	mov.w	r4, r1, lsr #16

0040ec36 <.LVL129>:
  40ec36:	d8e8      	bhi.n	40ec0a <.LVL123>
  40ec38:	602c      	str	r4, [r5, #0]
  40ec3a:	f8dc 5000 	ldr.w	r5, [ip]

0040ec3e <.LVL130>:
  40ec3e:	0c2d      	lsrs	r5, r5, #16

0040ec40 <.LVL131>:
  40ec40:	d01d      	beq.n	40ec7e <.LVL141>

0040ec42 <.LVL132>:
  40ec42:	f8d9 3000 	ldr.w	r3, [r9]

0040ec46 <.LVL133>:
  40ec46:	4648      	mov	r0, r9
  40ec48:	461c      	mov	r4, r3
  40ec4a:	4659      	mov	r1, fp
  40ec4c:	2200      	movs	r2, #0

0040ec4e <.LVL134>:
  40ec4e:	880e      	ldrh	r6, [r1, #0]
  40ec50:	0c24      	lsrs	r4, r4, #16
  40ec52:	fb05 4406 	mla	r4, r5, r6, r4
  40ec56:	4422      	add	r2, r4

0040ec58 <.LVL135>:
  40ec58:	b29b      	uxth	r3, r3

0040ec5a <.LVL136>:
  40ec5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40ec5e:	f840 3b04 	str.w	r3, [r0], #4

0040ec62 <.LVL137>:
  40ec62:	f851 3b04 	ldr.w	r3, [r1], #4

0040ec66 <.LVL138>:
  40ec66:	6804      	ldr	r4, [r0, #0]
  40ec68:	0c1b      	lsrs	r3, r3, #16
  40ec6a:	b2a6      	uxth	r6, r4
  40ec6c:	fb05 6303 	mla	r3, r5, r3, r6
  40ec70:	eb03 4312 	add.w	r3, r3, r2, lsr #16

0040ec74 <.LVL139>:
  40ec74:	458e      	cmp	lr, r1
  40ec76:	ea4f 4213 	mov.w	r2, r3, lsr #16

0040ec7a <.LVL140>:
  40ec7a:	d8e8      	bhi.n	40ec4e <.LVL134>
  40ec7c:	6003      	str	r3, [r0, #0]

0040ec7e <.LVL141>:
  40ec7e:	f10c 0c04 	add.w	ip, ip, #4
  40ec82:	45e2      	cmp	sl, ip
  40ec84:	f109 0904 	add.w	r9, r9, #4
  40ec88:	d8b7      	bhi.n	40ebfa <.LVL121>
  40ec8a:	f8dd a004 	ldr.w	sl, [sp, #4]

0040ec8e <.LVL144>:
  40ec8e:	f1b8 0f00 	cmp.w	r8, #0
  40ec92:	dd0b      	ble.n	40ecac <.LVL149>
  40ec94:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  40ec98:	f1aa 0a04 	sub.w	sl, sl, #4
  40ec9c:	b11b      	cbz	r3, 40eca6 <.LVL147>
  40ec9e:	e005      	b.n	40ecac <.LVL149>
  40eca0:	f85a 3d04 	ldr.w	r3, [sl, #-4]!

0040eca4 <.LVL146>:
  40eca4:	b913      	cbnz	r3, 40ecac <.LVL149>

0040eca6 <.LVL147>:
  40eca6:	f1b8 0801 	subs.w	r8, r8, #1

0040ecaa <.LVL148>:
  40ecaa:	d1f9      	bne.n	40eca0 <.LVL144+0x12>

0040ecac <.LVL149>:
  40ecac:	9800      	ldr	r0, [sp, #0]
  40ecae:	f8c0 8010 	str.w	r8, [r0, #16]
  40ecb2:	b003      	add	sp, #12

0040ecb4 <.LCFI9>:
  40ecb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section .text.Reset_Handler%84:

0040ecb8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void __attribute__((optimize("-O1"), section(".text.Reset_Handler"), long_call)) Reset_Handler(void)
{
  40ecb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0040ecba <.LCFI0>:
    uint32_t *pSrc;

    /* Call the optional application-provided _on_reset() function. */
    if (_on_reset)
  40ecba:	4b3e      	ldr	r3, [pc, #248]	; (40edb4 <.LVL15+0x2>)
  40ecbc:	b103      	cbz	r3, 40ecc0 <.LVL0>
    {
        _on_reset();
  40ecbe:	4798      	blx	r3

0040ecc0 <.LVL0>:
    }

    /* Reserved for use by MPLAB XC32. */
    if (__xc32_on_reset)
  40ecc0:	4b3d      	ldr	r3, [pc, #244]	; (40edb8 <.LVL15+0x6>)
  40ecc2:	b103      	cbz	r3, 40ecc6 <.LBB143>
        __xc32_on_reset();
  40ecc4:	4798      	blx	r3

0040ecc6 <.LBB143>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40ecc6:	f3ef 8110 	mrs	r1, PRIMASK

0040ecca <.LBB147>:
  __ASM volatile ("cpsid i" : : : "memory");
  40ecca:	b672      	cpsid	i

0040eccc <.LBE147>:
     SCB->CPACR |= (0xFu << 20);
  40eccc:	4a3b      	ldr	r2, [pc, #236]	; (40edbc <.LVL15+0xa>)
  40ecce:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  40ecd2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40ecd6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

0040ecda <.LBB149>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  40ecda:	f3bf 8f4f 	dsb	sy

0040ecde <.LBB151>:
  __ASM volatile ("isb 0xF":::"memory");
  40ecde:	f3bf 8f6f 	isb	sy

0040ece2 <.LBE151>:
    if (!prim)
  40ece2:	b901      	cbnz	r1, 40ece6 <.LBB155>

0040ece4 <.LBB153>:
  __ASM volatile ("cpsie i" : : : "memory");
  40ece4:	b662      	cpsie	i

0040ece6 <.LBB155>:
  __ASM volatile ("dsb 0xF":::"memory");
  40ece6:	f3bf 8f4f 	dsb	sy

0040ecea <.LBB159>:
  __ASM volatile ("isb 0xF":::"memory");
  40ecea:	f3bf 8f6f 	isb	sy

0040ecee <.LBE159>:
    SCB->ITCMCR &= ~(uint32_t)SCB_ITCMCR_EN_Msk;
  40ecee:	4c33      	ldr	r4, [pc, #204]	; (40edbc <.LVL15+0xa>)
  40ecf0:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  40ecf4:	f023 0301 	bic.w	r3, r3, #1
  40ecf8:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
    SCB->DTCMCR &= ~(uint32_t)SCB_ITCMCR_EN_Msk;
  40ecfc:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
  40ed00:	f023 0301 	bic.w	r3, r3, #1
  40ed04:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

0040ed08 <.LBB161>:
  __ASM volatile ("dsb 0xF":::"memory");
  40ed08:	f3bf 8f4f 	dsb	sy

0040ed0c <.LBB163>:
  __ASM volatile ("isb 0xF":::"memory");
  40ed0c:	f3bf 8f6f 	isb	sy

0040ed10 <.LBE155>:
    /* Disable TCM  */
    TCM_Disable();

    /* Initialize data after TCM is enabled.
     * Data initialization from the XC32 .dinit template */
    __pic32c_data_initialization();
  40ed10:	f002 f89c 	bl	410e4c <.LFE167>

0040ed14 <.LVL2>:
	

#  ifdef SCB_VTOR_TBLOFF_Msk
    /*  Set the vector-table base address in FLASH */
    pSrc = (uint32_t *) & __svectors;
    SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40ed14:	4b2a      	ldr	r3, [pc, #168]	; (40edc0 <.LVL15+0xe>)
  40ed16:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40ed1a:	60a3      	str	r3, [r4, #8]
#  endif /* SCB_VTOR_TBLOFF_Msk */

    /* Initialize the C library */
    __libc_init_array();
  40ed1c:	4b29      	ldr	r3, [pc, #164]	; (40edc4 <.LVL15+0x12>)
  40ed1e:	4798      	blx	r3

0040ed20 <.LBB165>:
  __ASM volatile ("dsb 0xF":::"memory");
  40ed20:	f3bf 8f4f 	dsb	sy

0040ed24 <.LBB170>:
  __ASM volatile ("isb 0xF":::"memory");
  40ed24:	f3bf 8f6f 	isb	sy

0040ed28 <.LBE170>:
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  40ed28:	2200      	movs	r2, #0
  40ed2a:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250

0040ed2e <.LBB172>:
  __ASM volatile ("dsb 0xF":::"memory");
  40ed2e:	f3bf 8f4f 	dsb	sy

0040ed32 <.LBB174>:
  __ASM volatile ("isb 0xF":::"memory");
  40ed32:	f3bf 8f6f 	isb	sy

0040ed36 <.LBE174>:
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  40ed36:	6963      	ldr	r3, [r4, #20]
  40ed38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  40ed3c:	6163      	str	r3, [r4, #20]

0040ed3e <.LBB176>:
  __ASM volatile ("dsb 0xF":::"memory");
  40ed3e:	f3bf 8f4f 	dsb	sy

0040ed42 <.LBB178>:
  __ASM volatile ("isb 0xF":::"memory");
  40ed42:	f3bf 8f6f 	isb	sy

0040ed46 <.LBB180>:
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  40ed46:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84

0040ed4a <.LBB183>:
  __ASM volatile ("dsb 0xF":::"memory");
  40ed4a:	f3bf 8f4f 	dsb	sy

0040ed4e <.LBE183>:
    __DSB();

    ccsidr = SCB->CCSIDR;
  40ed4e:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80

0040ed52 <.LVL4>:

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  40ed52:	f3c5 364e 	ubfx	r6, r5, #13, #15

0040ed56 <.LVL5>:
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  40ed56:	f3c5 05c9 	ubfx	r5, r5, #3, #10

0040ed5a <.LVL6>:
  40ed5a:	0177      	lsls	r7, r6, #5
  40ed5c:	ea4f 7c85 	mov.w	ip, r5, lsl #30
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  40ed60:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  40ed64:	4620      	mov	r0, r4
  40ed66:	ea07 040e 	and.w	r4, r7, lr
  40ed6a:	4662      	mov	r2, ip
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  40ed6c:	462b      	mov	r3, r5

0040ed6e <.LVL8>:
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  40ed6e:	ea42 0104 	orr.w	r1, r2, r4
  40ed72:	f8c0 1260 	str.w	r1, [r0, #608]	; 0x260
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
  40ed76:	3b01      	subs	r3, #1
  40ed78:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
  40ed7c:	f1b3 3fff 	cmp.w	r3, #4294967295
  40ed80:	d1f5      	bne.n	40ed6e <.LVL8>
    } while(sets-- != 0U);
  40ed82:	3e01      	subs	r6, #1
  40ed84:	3f20      	subs	r7, #32
  40ed86:	f1b6 3fff 	cmp.w	r6, #4294967295
  40ed8a:	d1ec      	bne.n	40ed66 <.LVL6+0xc>

0040ed8c <.LBB185>:
  40ed8c:	f3bf 8f4f 	dsb	sy

0040ed90 <.LBE185>:
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  40ed90:	4a0a      	ldr	r2, [pc, #40]	; (40edbc <.LVL15+0xa>)
  40ed92:	6953      	ldr	r3, [r2, #20]

0040ed94 <.LVL11>:
  40ed94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40ed98:	6153      	str	r3, [r2, #20]

0040ed9a <.LBB187>:
  40ed9a:	f3bf 8f4f 	dsb	sy

0040ed9e <.LBB189>:
  __ASM volatile ("isb 0xF":::"memory");
  40ed9e:	f3bf 8f6f 	isb	sy

0040eda2 <.LBE180>:

    /* Enable Data Cache    */
    DCache_Enable();

    /* Call the optional application-provided _on_bootstrap() function. */
    if (_on_bootstrap)
  40eda2:	4b09      	ldr	r3, [pc, #36]	; (40edc8 <.LVL15+0x16>)
  40eda4:	b103      	cbz	r3, 40eda8 <.LVL13>
    {
        _on_bootstrap();
  40eda6:	4798      	blx	r3

0040eda8 <.LVL13>:
    }

    /* Reserved for use by MPLAB XC32. */
    if (__xc32_on_bootstrap)
  40eda8:	4b08      	ldr	r3, [pc, #32]	; (40edcc <.LVL15+0x1a>)
  40edaa:	b103      	cbz	r3, 40edae <.LVL14>
    {
        __xc32_on_bootstrap();
  40edac:	4798      	blx	r3

0040edae <.LVL14>:
    }

    /* Branch to application's main function */
    main();
  40edae:	f004 f8ab 	bl	412f08 <main>

0040edb2 <.LVL15>:
  40edb2:	e7fe      	b.n	40edb2 <.LVL15>
	...
  40edbc:	e000ed00 	.word	0xe000ed00
  40edc0:	00400000 	.word	0x00400000
  40edc4:	00411ea5 	.word	0x00411ea5
	...

Disassembly of section .text.DesProcessBlock%85:

0040edd0 <DesProcessBlock>:
    {
  40edd0:	b530      	push	{r4, r5, lr}

0040edd2 <.LCFI8>:
  40edd2:	b083      	sub	sp, #12

0040edd4 <.LCFI9>:
  40edd4:	4614      	mov	r4, r2
        XMEMCPY(&l, in, sizeof(l));
  40edd6:	680b      	ldr	r3, [r1, #0]
        XMEMCPY(&r, in + sizeof(l), sizeof(r));
  40edd8:	6849      	ldr	r1, [r1, #4]

0040edda <.LBB202>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40edda:	0a1a      	lsrs	r2, r3, #8

0040eddc <.LVL120>:
  40eddc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
  40ede0:	021b      	lsls	r3, r3, #8

0040ede2 <.LVL121>:
  40ede2:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  40ede6:	431a      	orrs	r2, r3

0040ede8 <.LBB204>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40ede8:	ea4f 4232 	mov.w	r2, r2, ror #16

0040edec <.LBB206>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40edec:	0a0b      	lsrs	r3, r1, #8
  40edee:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  40edf2:	0209      	lsls	r1, r1, #8

0040edf4 <.LVL124>:
  40edf4:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  40edf8:	430b      	orrs	r3, r1

0040edfa <.LBB208>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40edfa:	ea4f 3333 	mov.w	r3, r3, ror #12

0040edfe <.LBE210>:
        work = (*left ^ *right) & 0xf0f0f0f0;
  40edfe:	ea82 0103 	eor.w	r1, r2, r3
  40ee02:	f001 31f0 	and.w	r1, r1, #4042322160	; 0xf0f0f0f0

0040ee06 <.LVL126>:
        *left ^= work;
  40ee06:	404a      	eors	r2, r1

0040ee08 <.LVL127>:
        *right = rotrFixed(*right^work, 20U);
  40ee08:	404b      	eors	r3, r1

0040ee0a <.LBB212>:
        return (x >> y) | (x << (sizeof(y) * 8 - y));
  40ee0a:	ea4f 5333 	mov.w	r3, r3, ror #20

0040ee0e <.LBE212>:
        work = (*left ^ *right) & 0xffff0000;
  40ee0e:	ea82 0103 	eor.w	r1, r2, r3

0040ee12 <.LVL130>:
  40ee12:	4d34      	ldr	r5, [pc, #208]	; (40eee4 <.LVL178+0x2>)
  40ee14:	4029      	ands	r1, r5

0040ee16 <.LVL131>:
        *left ^= work;
  40ee16:	404a      	eors	r2, r1

0040ee18 <.LVL132>:
        *right = rotrFixed(*right^work, 18U);
  40ee18:	404b      	eors	r3, r1

0040ee1a <.LBB214>:
  40ee1a:	ea4f 43b3 	mov.w	r3, r3, ror #18

0040ee1e <.LBE214>:
        work = (*left ^ *right) & 0x33333333;
  40ee1e:	ea82 0103 	eor.w	r1, r2, r3

0040ee22 <.LVL135>:
  40ee22:	f001 3133 	and.w	r1, r1, #858993459	; 0x33333333

0040ee26 <.LVL136>:
        *left ^= work;
  40ee26:	404a      	eors	r2, r1

0040ee28 <.LVL137>:
        *right = rotrFixed(*right^work, 6U);
  40ee28:	404b      	eors	r3, r1

0040ee2a <.LBB216>:
  40ee2a:	ea4f 13b3 	mov.w	r3, r3, ror #6

0040ee2e <.LBE216>:
        work = (*left ^ *right) & 0x00ff00ff;
  40ee2e:	ea82 0103 	eor.w	r1, r2, r3

0040ee32 <.LVL140>:
  40ee32:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff

0040ee36 <.LVL141>:
        *left ^= work;
  40ee36:	404a      	eors	r2, r1

0040ee38 <.LVL142>:
        *right = rotlFixed(*right^work, 9U);
  40ee38:	404b      	eors	r3, r1

0040ee3a <.LBB218>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40ee3a:	ea4f 53f3 	mov.w	r3, r3, ror #23

0040ee3e <.LBE218>:
        work = (*left ^ *right) & 0xaaaaaaaa;
  40ee3e:	ea82 0103 	eor.w	r1, r2, r3

0040ee42 <.LVL145>:
  40ee42:	f001 31aa 	and.w	r1, r1, #2863311530	; 0xaaaaaaaa

0040ee46 <.LVL146>:
        *left = rotlFixed(*left^work, 1U);
  40ee46:	404a      	eors	r2, r1

0040ee48 <.LBB220>:
  40ee48:	ea4f 72f2 	mov.w	r2, r2, ror #31

0040ee4c <.LBE220>:
  40ee4c:	9201      	str	r2, [sp, #4]
        *right ^= work;
  40ee4e:	404b      	eors	r3, r1
  40ee50:	a902      	add	r1, sp, #8

0040ee52 <.LVL147>:
  40ee52:	f841 3d08 	str.w	r3, [r1, #-8]!

0040ee56 <.LBE208>:
        DesRawProcessBlock(&l, &r, des->key);
  40ee56:	f100 0210 	add.w	r2, r0, #16
  40ee5a:	a801      	add	r0, sp, #4

0040ee5c <.LVL149>:
  40ee5c:	f7ff fc44 	bl	40e6e8 <L0>

0040ee60 <.LBB222>:
        return (x >> y) | (x << (sizeof(y) * 8 - y));
  40ee60:	9a00      	ldr	r2, [sp, #0]
  40ee62:	ea4f 0272 	mov.w	r2, r2, ror #1

0040ee66 <.LBE224>:
        work = (*left ^ *right) & 0xaaaaaaaa;
  40ee66:	9b01      	ldr	r3, [sp, #4]
  40ee68:	ea82 0103 	eor.w	r1, r2, r3
  40ee6c:	f001 31aa 	and.w	r1, r1, #2863311530	; 0xaaaaaaaa

0040ee70 <.LVL152>:
        *right ^= work;
  40ee70:	404a      	eors	r2, r1

0040ee72 <.LVL153>:
        *left = rotrFixed(*left^work, 9U);
  40ee72:	404b      	eors	r3, r1

0040ee74 <.LBB226>:
  40ee74:	ea4f 2373 	mov.w	r3, r3, ror #9

0040ee78 <.LBE226>:
        work = (*left ^ *right) & 0x00ff00ff;
  40ee78:	ea82 0103 	eor.w	r1, r2, r3

0040ee7c <.LVL156>:
  40ee7c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff

0040ee80 <.LVL157>:
        *right ^= work;
  40ee80:	404a      	eors	r2, r1

0040ee82 <.LVL158>:
        *left = rotlFixed(*left^work, 6U);
  40ee82:	404b      	eors	r3, r1

0040ee84 <.LBB228>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40ee84:	ea4f 63b3 	mov.w	r3, r3, ror #26

0040ee88 <.LBE228>:
        work = (*left ^ *right) & 0x33333333;
  40ee88:	ea82 0103 	eor.w	r1, r2, r3

0040ee8c <.LVL161>:
  40ee8c:	f001 3133 	and.w	r1, r1, #858993459	; 0x33333333

0040ee90 <.LVL162>:
        *right ^= work;
  40ee90:	404a      	eors	r2, r1

0040ee92 <.LVL163>:
        *left = rotlFixed(*left^work, 18U);
  40ee92:	404b      	eors	r3, r1

0040ee94 <.LBB230>:
  40ee94:	ea4f 33b3 	mov.w	r3, r3, ror #14

0040ee98 <.LBE230>:
        work = (*left ^ *right) & 0xffff0000;
  40ee98:	ea82 0103 	eor.w	r1, r2, r3

0040ee9c <.LVL166>:
  40ee9c:	400d      	ands	r5, r1

0040ee9e <.LVL167>:
        *right ^= work;
  40ee9e:	406a      	eors	r2, r5

0040eea0 <.LVL168>:
        *left = rotlFixed(*left^work, 20U);
  40eea0:	406b      	eors	r3, r5

0040eea2 <.LBB232>:
  40eea2:	ea4f 3333 	mov.w	r3, r3, ror #12

0040eea6 <.LBE232>:
        work = (*left ^ *right) & 0xf0f0f0f0;
  40eea6:	ea82 0103 	eor.w	r1, r2, r3
  40eeaa:	f001 31f0 	and.w	r1, r1, #4042322160	; 0xf0f0f0f0

0040eeae <.LVL171>:
        *right ^= work;
  40eeae:	404a      	eors	r2, r1

0040eeb0 <.LVL172>:
        *left = rotrFixed(*left^work, 4U);
  40eeb0:	404b      	eors	r3, r1

0040eeb2 <.LBB234>:
        return (x >> y) | (x << (sizeof(y) * 8 - y));
  40eeb2:	ea4f 1333 	mov.w	r3, r3, ror #4

0040eeb6 <.LBB236>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40eeb6:	0211      	lsls	r1, r2, #8
  40eeb8:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  40eebc:	0a12      	lsrs	r2, r2, #8

0040eebe <.LVL175>:
  40eebe:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
  40eec2:	430a      	orrs	r2, r1

0040eec4 <.LBB238>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40eec4:	ea4f 4232 	mov.w	r2, r2, ror #16

0040eec8 <.LBE236>:
        XMEMCPY(out, &r, sizeof(r));
  40eec8:	6022      	str	r2, [r4, #0]

0040eeca <.LBB240>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40eeca:	0a1a      	lsrs	r2, r3, #8
  40eecc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
  40eed0:	021b      	lsls	r3, r3, #8

0040eed2 <.LVL176>:
  40eed2:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  40eed6:	4313      	orrs	r3, r2

0040eed8 <.LBB242>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40eed8:	ea4f 4333 	mov.w	r3, r3, ror #16

0040eedc <.LBE240>:
        XMEMCPY(out + sizeof(r), &l, sizeof(l));
  40eedc:	6063      	str	r3, [r4, #4]
    }
  40eede:	b003      	add	sp, #12

0040eee0 <.LCFI10>:
  40eee0:	bd30      	pop	{r4, r5, pc}

0040eee2 <.LVL178>:
  40eee2:	bf00      	nop
  40eee4:	ffff0000 	.word	0xffff0000

Disassembly of section .text.__mdiff%86:

0040eee8 <__mdiff>:
  40eee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0040eeec <.LBB30>:
  40eeec:	690f      	ldr	r7, [r1, #16]

0040eeee <.LBE30>:
  40eeee:	460e      	mov	r6, r1

0040eef0 <.LBB35>:
  40eef0:	6911      	ldr	r1, [r2, #16]

0040eef2 <.LVL227>:
  40eef2:	1a7f      	subs	r7, r7, r1

0040eef4 <.LVL228>:
  40eef4:	2f00      	cmp	r7, #0

0040eef6 <.LBE35>:
  40eef6:	4690      	mov	r8, r2

0040eef8 <.LBB36>:
  40eef8:	d117      	bne.n	40ef2a <.LVL243>
  40eefa:	0089      	lsls	r1, r1, #2
  40eefc:	f106 0514 	add.w	r5, r6, #20
  40ef00:	f102 0e14 	add.w	lr, r2, #20
  40ef04:	186b      	adds	r3, r5, r1
  40ef06:	4471      	add	r1, lr
  40ef08:	e001      	b.n	40ef0e <.LVL233+0x4>

0040ef0a <.LVL233>:
  40ef0a:	429d      	cmp	r5, r3
  40ef0c:	d25c      	bcs.n	40efc8 <.LVL274>
  40ef0e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40ef12:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40ef16:	42a2      	cmp	r2, r4
  40ef18:	d0f7      	beq.n	40ef0a <.LVL233>
  40ef1a:	d25e      	bcs.n	40efda <.LBB37>
  40ef1c:	4633      	mov	r3, r6
  40ef1e:	462c      	mov	r4, r5

0040ef20 <.LVL238>:
  40ef20:	4646      	mov	r6, r8

0040ef22 <.LVL239>:
  40ef22:	4675      	mov	r5, lr
  40ef24:	4698      	mov	r8, r3

0040ef26 <.LBE36>:
  40ef26:	2701      	movs	r7, #1
  40ef28:	e005      	b.n	40ef36 <.LVL245>

0040ef2a <.LVL243>:
  40ef2a:	db58      	blt.n	40efde <.LBE37>

0040ef2c <.LVL244>:
  40ef2c:	f106 0514 	add.w	r5, r6, #20
  40ef30:	f108 0414 	add.w	r4, r8, #20
  40ef34:	2700      	movs	r7, #0

0040ef36 <.LVL245>:
  40ef36:	6871      	ldr	r1, [r6, #4]
  40ef38:	f003 f828 	bl	411f8c <.LFE2>

0040ef3c <.LVL246>:
  40ef3c:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40ef40:	6936      	ldr	r6, [r6, #16]

0040ef42 <.LVL247>:
  40ef42:	60c7      	str	r7, [r0, #12]
  40ef44:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40ef48:	46a6      	mov	lr, r4
  40ef4a:	eb05 0786 	add.w	r7, r5, r6, lsl #2

0040ef4e <.LVL248>:
  40ef4e:	f100 0414 	add.w	r4, r0, #20

0040ef52 <.LVL249>:
  40ef52:	2300      	movs	r3, #0

0040ef54 <.LVL250>:
  40ef54:	f85e 1b04 	ldr.w	r1, [lr], #4
  40ef58:	f855 8b04 	ldr.w	r8, [r5], #4

0040ef5c <.LVL251>:
  40ef5c:	b28a      	uxth	r2, r1
  40ef5e:	fa13 f388 	uxtah	r3, r3, r8

0040ef62 <.LVL252>:
  40ef62:	0c09      	lsrs	r1, r1, #16
  40ef64:	1a9a      	subs	r2, r3, r2

0040ef66 <.LVL253>:
  40ef66:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40ef6a:	eb03 4322 	add.w	r3, r3, r2, asr #16

0040ef6e <.LVL254>:
  40ef6e:	b292      	uxth	r2, r2

0040ef70 <.LVL255>:
  40ef70:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40ef74:	45f4      	cmp	ip, lr
  40ef76:	f844 2b04 	str.w	r2, [r4], #4

0040ef7a <.LVL256>:
  40ef7a:	ea4f 4323 	mov.w	r3, r3, asr #16

0040ef7e <.LVL257>:
  40ef7e:	d8e9      	bhi.n	40ef54 <.LVL250>

0040ef80 <.LVL258>:
  40ef80:	42af      	cmp	r7, r5
  40ef82:	d917      	bls.n	40efb4 <.LVL269>
  40ef84:	46a4      	mov	ip, r4

0040ef86 <.LVL259>:
  40ef86:	46ae      	mov	lr, r5

0040ef88 <.LVL260>:
  40ef88:	f85e 2b04 	ldr.w	r2, [lr], #4

0040ef8c <.LVL261>:
  40ef8c:	fa13 f382 	uxtah	r3, r3, r2

0040ef90 <.LVL262>:
  40ef90:	1419      	asrs	r1, r3, #16

0040ef92 <.LVL263>:
  40ef92:	eb01 4112 	add.w	r1, r1, r2, lsr #16

0040ef96 <.LVL264>:
  40ef96:	b29b      	uxth	r3, r3

0040ef98 <.LVL265>:
  40ef98:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  40ef9c:	4577      	cmp	r7, lr
  40ef9e:	f84c 2b04 	str.w	r2, [ip], #4

0040efa2 <.LVL266>:
  40efa2:	ea4f 4321 	mov.w	r3, r1, asr #16

0040efa6 <.LVL267>:
  40efa6:	d8ef      	bhi.n	40ef88 <.LVL260>
  40efa8:	43ed      	mvns	r5, r5
  40efaa:	442f      	add	r7, r5

0040efac <.LVL268>:
  40efac:	f027 0703 	bic.w	r7, r7, #3
  40efb0:	3704      	adds	r7, #4
  40efb2:	443c      	add	r4, r7

0040efb4 <.LVL269>:
  40efb4:	3c04      	subs	r4, #4
  40efb6:	b922      	cbnz	r2, 40efc2 <.LVL273+0x4>

0040efb8 <.LVL271>:
  40efb8:	f854 3d04 	ldr.w	r3, [r4, #-4]!

0040efbc <.LVL272>:
  40efbc:	3e01      	subs	r6, #1

0040efbe <.LVL273>:
  40efbe:	2b00      	cmp	r3, #0
  40efc0:	d0fa      	beq.n	40efb8 <.LVL271>
  40efc2:	6106      	str	r6, [r0, #16]
  40efc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040efc8 <.LVL274>:
  40efc8:	2100      	movs	r1, #0
  40efca:	f002 ffdf 	bl	411f8c <.LFE2>

0040efce <.LVL275>:
  40efce:	2201      	movs	r2, #1
  40efd0:	2300      	movs	r3, #0
  40efd2:	6102      	str	r2, [r0, #16]
  40efd4:	6143      	str	r3, [r0, #20]
  40efd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040efda <.LBB37>:
  40efda:	4674      	mov	r4, lr
  40efdc:	e7ab      	b.n	40ef36 <.LVL245>

0040efde <.LBE37>:
  40efde:	4633      	mov	r3, r6
  40efe0:	f106 0414 	add.w	r4, r6, #20
  40efe4:	f102 0514 	add.w	r5, r2, #20
  40efe8:	4616      	mov	r6, r2

0040efea <.LVL278>:
  40efea:	2701      	movs	r7, #1
  40efec:	4698      	mov	r8, r3
  40efee:	e7a2      	b.n	40ef36 <.LVL245>

Disassembly of section .rodata._ctype_%87:

0040eff0 <_ctype_>:
  40eff0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  40f000:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40f010:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  40f020:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  40f030:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  40f040:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  40f050:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  40f060:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  40f070:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
  40f0f0:	0000 bf00                                   ....

Disassembly of section .rodata.Td4%88:

0040f0f4 <Td4>:
  40f0f4:	0952 d56a 3630 38a5 40bf 9ea3 f381 fbd7     R.j.06.8.@......
  40f104:	e37c 8239 2f9b 87ff 8e34 4443 dec4 cbe9     |.9../..4.CD....
  40f114:	7b54 3294 c2a6 3d23 4cee 0b95 fa42 4ec3     T{.2..#=.L..B..N
  40f124:	2e08 66a1 d928 b224 5b76 49a2 8b6d 25d1     ...f(.$.v[.Im..%
  40f134:	f872 64f6 6886 1698 a4d4 cc5c 655d 92b6     r..d.h....\.]e..
  40f144:	706c 5048 edfd dab9 155e 5746 8da7 849d     lpHP....^.FW....
  40f154:	d890 00ab bc8c 0ad3 e4f7 0558 b3b8 0645     ..........X...E.
  40f164:	2cd0 8f1e 3fca 020f afc1 03bd 1301 6b8a     .,...?.........k
  40f174:	913a 4111 674f eadc f297 cecf b4f0 73e6     :..AOg.........s
  40f184:	ac96 2274 ade7 8535 f9e2 e837 751c 6edf     ..t"..5...7..u.n
  40f194:	f147 711a 291d 89c5 b76f 0e62 18aa 1bbe     G..q.)..o.b.....
  40f1a4:	56fc 4b3e d2c6 2079 db9a fec0 cd78 f45a     .V>K..y ....x.Z.
  40f1b4:	dd1f 33a8 0788 31c7 12b1 5910 8027 5fec     ...3...1...Y'.._
  40f1c4:	5160 a97f b519 0d4a e52d 9f7a c993 ef9c     `Q....J.-.z.....
  40f1d4:	e0a0 4d3b 2aae b0f5 ebc8 3cbb 5383 6199     ..;M.*.....<.S.a
  40f1e4:	2b17 7e04 77ba 26d6 69e1 6314 2155 7d0c     .+.~.w.&.i.cU!.}

Disassembly of section .rodata.K%89:

0040f1f4 <K>:
  40f1f4:	2f98 428a 4491 7137 fbcf b5c0 dba5 e9b5     ./.B.D7q........
  40f204:	c25b 3956 11f1 59f1 82a4 923f 5ed5 ab1c     [.V9...Y..?..^..
  40f214:	aa98 d807 5b01 1283 85be 2431 7dc3 550c     .....[....1$.}.U
  40f224:	5d74 72be b1fe 80de 06a7 9bdc f174 c19b     t].r........t...
  40f234:	69c1 e49b 4786 efbe 9dc6 0fc1 a1cc 240c     .i...G.........$
  40f244:	2c6f 2de9 84aa 4a74 a9dc 5cb0 88da 76f9     o,.-..tJ...\...v
  40f254:	5152 983e c66d a831 27c8 b003 7fc7 bf59     RQ>.m.1..'....Y.
  40f264:	0bf3 c6e0 9147 d5a7 6351 06ca 2967 1429     ....G...Qc..g)).
  40f274:	0a85 27b7 2138 2e1b 6dfc 4d2c 0d13 5338     ...'8!...m,M..8S
  40f284:	7354 650a 0abb 766a c92e 81c2 2c85 9272     Ts.e..jv.....,r.
  40f294:	e8a1 a2bf 664b a81a 8b70 c24b 51a3 c76c     ....Kf..p.K..Ql.
  40f2a4:	e819 d192 0624 d699 3585 f40e a070 106a     ....$....5..p.j.
  40f2b4:	c116 19a4 6c08 1e37 774c 2748 bcb5 34b0     .....l7.LwH'...4
  40f2c4:	0cb3 391c aa4a 4ed8 ca4f 5b9c 6ff3 682e     ...9J..NO..[.o.h
  40f2d4:	82ee 748f 636f 78a5 7814 84c8 0208 8cc7     ...toc.x.x......
  40f2e4:	fffa 90be 6ceb a450 a3f7 bef9 78f2 c671     .....lP......xq.

Disassembly of section .text.__ssprint_r%90:

0040f2f4 <__ssprint_r>:
  40f2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0040f2f8 <.LCFI0>:
  40f2f8:	6893      	ldr	r3, [r2, #8]
  40f2fa:	b083      	sub	sp, #12

0040f2fc <.LCFI1>:
  40f2fc:	4690      	mov	r8, r2

0040f2fe <.LVL1>:
  40f2fe:	2b00      	cmp	r3, #0
  40f300:	d070      	beq.n	40f3e4 <.LCFI3>
  40f302:	4682      	mov	sl, r0
  40f304:	460c      	mov	r4, r1
  40f306:	6817      	ldr	r7, [r2, #0]
  40f308:	688d      	ldr	r5, [r1, #8]
  40f30a:	6808      	ldr	r0, [r1, #0]

0040f30c <.LVL2>:
  40f30c:	e042      	b.n	40f394 <.LVL16>

0040f30e <.LVL3>:
  40f30e:	89a3      	ldrh	r3, [r4, #12]
  40f310:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40f314:	d02e      	beq.n	40f374 <.LBE2>

0040f316 <.LBB2>:
  40f316:	6965      	ldr	r5, [r4, #20]
  40f318:	6921      	ldr	r1, [r4, #16]
  40f31a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  40f31e:	eba0 0b01 	sub.w	fp, r0, r1

0040f322 <.LVL4>:
  40f322:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40f326:	f10b 0001 	add.w	r0, fp, #1
  40f32a:	106d      	asrs	r5, r5, #1

0040f32c <.LVL5>:
  40f32c:	4430      	add	r0, r6
  40f32e:	42a8      	cmp	r0, r5
  40f330:	462a      	mov	r2, r5
  40f332:	bf84      	itt	hi
  40f334:	4605      	movhi	r5, r0
  40f336:	462a      	movhi	r2, r5
  40f338:	055b      	lsls	r3, r3, #21
  40f33a:	d538      	bpl.n	40f3ae <.LBB3>
  40f33c:	4611      	mov	r1, r2
  40f33e:	4650      	mov	r0, sl
  40f340:	f7fb f836 	bl	40a3b0 <.LFE14>

0040f344 <.LVL7>:
  40f344:	2800      	cmp	r0, #0
  40f346:	d03c      	beq.n	40f3c2 <.L10>
  40f348:	465a      	mov	r2, fp
  40f34a:	6921      	ldr	r1, [r4, #16]
  40f34c:	9001      	str	r0, [sp, #4]
  40f34e:	f7ff f931 	bl	40e5b4 <.LFE14>

0040f352 <.LVL8>:
  40f352:	89a2      	ldrh	r2, [r4, #12]
  40f354:	9b01      	ldr	r3, [sp, #4]
  40f356:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40f35a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40f35e:	81a2      	strh	r2, [r4, #12]

0040f360 <.LVL9>:
  40f360:	eba5 020b 	sub.w	r2, r5, fp
  40f364:	eb03 000b 	add.w	r0, r3, fp
  40f368:	6165      	str	r5, [r4, #20]
  40f36a:	6123      	str	r3, [r4, #16]
  40f36c:	6020      	str	r0, [r4, #0]
  40f36e:	60a2      	str	r2, [r4, #8]
  40f370:	4635      	mov	r5, r6

0040f372 <.LVL10>:
  40f372:	46b3      	mov	fp, r6

0040f374 <.LBE2>:
  40f374:	465a      	mov	r2, fp
  40f376:	4649      	mov	r1, r9
  40f378:	f000 fbba 	bl	40faf0 <.LBE12>

0040f37c <.LVL12>:
  40f37c:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40f380:	68a2      	ldr	r2, [r4, #8]
  40f382:	6820      	ldr	r0, [r4, #0]
  40f384:	1b55      	subs	r5, r2, r5

0040f386 <.LVL13>:
  40f386:	4458      	add	r0, fp
  40f388:	1b9e      	subs	r6, r3, r6

0040f38a <.LVL14>:
  40f38a:	60a5      	str	r5, [r4, #8]
  40f38c:	6020      	str	r0, [r4, #0]

0040f38e <.LVL15>:
  40f38e:	f8c8 6008 	str.w	r6, [r8, #8]
  40f392:	b33e      	cbz	r6, 40f3e4 <.LCFI3>

0040f394 <.LVL16>:
  40f394:	687e      	ldr	r6, [r7, #4]

0040f396 <.LVL17>:
  40f396:	463b      	mov	r3, r7
  40f398:	3708      	adds	r7, #8

0040f39a <.LVL18>:
  40f39a:	2e00      	cmp	r6, #0
  40f39c:	d0fa      	beq.n	40f394 <.LVL16>
  40f39e:	42ae      	cmp	r6, r5
  40f3a0:	f8d3 9000 	ldr.w	r9, [r3]
  40f3a4:	46ab      	mov	fp, r5
  40f3a6:	d2b2      	bcs.n	40f30e <.LVL3>
  40f3a8:	4635      	mov	r5, r6

0040f3aa <.LVL19>:
  40f3aa:	46b3      	mov	fp, r6
  40f3ac:	e7e2      	b.n	40f374 <.LBE2>

0040f3ae <.LBB3>:
  40f3ae:	4650      	mov	r0, sl
  40f3b0:	f7fc f846 	bl	40b440 <.LFE18>

0040f3b4 <.LVL21>:
  40f3b4:	4603      	mov	r3, r0
  40f3b6:	2800      	cmp	r0, #0
  40f3b8:	d1d2      	bne.n	40f360 <.LVL9>
  40f3ba:	6921      	ldr	r1, [r4, #16]
  40f3bc:	4650      	mov	r0, sl

0040f3be <.LVL22>:
  40f3be:	f7fe f8cb 	bl	40d558 <_free_r>

0040f3c2 <.L10>:
  40f3c2:	230c      	movs	r3, #12
  40f3c4:	f8ca 3000 	str.w	r3, [sl]

0040f3c8 <.LBE3>:
  40f3c8:	89a3      	ldrh	r3, [r4, #12]
  40f3ca:	2200      	movs	r2, #0
  40f3cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40f3d0:	f04f 30ff 	mov.w	r0, #4294967295
  40f3d4:	81a3      	strh	r3, [r4, #12]
  40f3d6:	f8c8 2008 	str.w	r2, [r8, #8]
  40f3da:	f8c8 2004 	str.w	r2, [r8, #4]
  40f3de:	b003      	add	sp, #12

0040f3e0 <.LCFI2>:
  40f3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040f3e4 <.LCFI3>:
  40f3e4:	2000      	movs	r0, #0
  40f3e6:	f8c8 0004 	str.w	r0, [r8, #4]
  40f3ea:	b003      	add	sp, #12

0040f3ec <.LCFI4>:
  40f3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section .text.wc_RNG_GenerateBlock%91:

0040f3f0 <wc_RNG_GenerateBlock>:
}


/* place a generated block in output */
int wc_RNG_GenerateBlock(WC_RNG* rng, byte* output, word32 sz)
{
  40f3f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

0040f3f4 <.LCFI29>:
  40f3f4:	b0a5      	sub	sp, #148	; 0x94

0040f3f6 <.LCFI30>:
    int ret;

    if (rng == NULL || output == NULL)
  40f3f6:	4689      	mov	r9, r1
    XMEMSET(output, 0, sz);
    ret = CUSTOM_RAND_GENERATE_BLOCK(output, sz);
#else

#ifdef HAVE_HASHDRBG
    if (sz > RNG_MAX_BLOCK_LEN)
  40f3f8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  40f3fc:	bf94      	ite	ls
  40f3fe:	2300      	movls	r3, #0
  40f400:	2301      	movhi	r3, #1
  40f402:	2900      	cmp	r1, #0
  40f404:	bf14      	ite	ne
  40f406:	4619      	movne	r1, r3
  40f408:	f043 0101 	orreq.w	r1, r3, #1

0040f40c <.LVL255>:
  40f40c:	2900      	cmp	r1, #0
  40f40e:	d15f      	bne.n	40f4d0 <.LVL284>
  40f410:	2800      	cmp	r0, #0
  40f412:	d05d      	beq.n	40f4d0 <.LVL284>
        return BAD_FUNC_ARG;

    if (rng->status != DRBG_OK)
  40f414:	7b03      	ldrb	r3, [r0, #12]
  40f416:	2b01      	cmp	r3, #1
  40f418:	d15d      	bne.n	40f4d6 <.LVL284+0x6>
  40f41a:	4690      	mov	r8, r2
  40f41c:	4607      	mov	r7, r0
        return RNG_FAILURE_E;

    ret = Hash_DRBG_Generate(rng->drbg, output, sz);
  40f41e:	4649      	mov	r1, r9
  40f420:	6880      	ldr	r0, [r0, #8]

0040f422 <.LVL256>:
  40f422:	f7fc fe45 	bl	40c0b0 <.LFE183>

0040f426 <.LVL257>:
  40f426:	4603      	mov	r3, r0

0040f428 <.LVL258>:
    if (ret == DRBG_NEED_RESEED) {
  40f428:	2803      	cmp	r0, #3
  40f42a:	d00a      	beq.n	40f442 <.LBB126>

0040f42c <.LVL259>:
        }
        else
            ret = DRBG_CONT_FAILURE;
    }

    if (ret == DRBG_SUCCESS) {
  40f42c:	b12b      	cbz	r3, 40f43a <.LVL261>
        ret = 0;
    }
    else if (ret == DRBG_CONT_FAILURE) {
  40f42e:	2b04      	cmp	r3, #4
  40f430:	d049      	beq.n	40f4c6 <.LBE130>

0040f432 <.LVL260>:
        ret = DRBG_CONT_FIPS_E;
        rng->status = DRBG_CONT_FAILED;
    }
    else {
        ret = RNG_FAILURE_E;
        rng->status = DRBG_FAILED;
  40f432:	2302      	movs	r3, #2
  40f434:	733b      	strb	r3, [r7, #12]
        ret = RNG_FAILURE_E;
  40f436:	f06f 03c6 	mvn.w	r3, #198	; 0xc6

0040f43a <.LVL261>:

#endif /* HAVE_HASHDRBG */
#endif /* CUSTOM_RAND_GENERATE_BLOCK */

    return ret;
}
  40f43a:	4618      	mov	r0, r3
  40f43c:	b025      	add	sp, #148	; 0x94

0040f43e <.LCFI31>:
  40f43e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0040f442 <.LBB126>:
        return MEMORY_E;
    }
#endif

    if (reseed) {
        ret = wc_RNG_HealthTest(1, entropyA, sizeof(entropyA),
  40f442:	2380      	movs	r3, #128	; 0x80
  40f444:	9302      	str	r3, [sp, #8]
  40f446:	ab04      	add	r3, sp, #16
  40f448:	9301      	str	r3, [sp, #4]
  40f44a:	2320      	movs	r3, #32
  40f44c:	9300      	str	r3, [sp, #0]
  40f44e:	4b23      	ldr	r3, [pc, #140]	; (40f4dc <.LVL284+0xc>)
  40f450:	2230      	movs	r2, #48	; 0x30
  40f452:	4923      	ldr	r1, [pc, #140]	; (40f4e0 <.LVL284+0x10>)
  40f454:	2001      	movs	r0, #1

0040f456 <.LVL263>:
  40f456:	f001 fc61 	bl	410d1c <wc_RNG_HealthTest>

0040f45a <.LVL264>:
                                reseedEntropyA, sizeof(reseedEntropyA),
                                check, RNG_HEALTH_TEST_CHECK_SIZE);
        if (ret == 0) {
  40f45a:	4605      	mov	r5, r0
  40f45c:	bb98      	cbnz	r0, 40f4c6 <.LBE130>
  40f45e:	f10d 040f 	add.w	r4, sp, #15
  40f462:	4e20      	ldr	r6, [pc, #128]	; (40f4e4 <.LVL284+0x14>)
  40f464:	f10d 018f 	add.w	r1, sp, #143	; 0x8f

0040f468 <.LBB128>:
{
    int i;
    int compareSum = 0;

    for (i = 0; i < length; i++) {
        compareSum |= a[i] ^ b[i];
  40f468:	f814 3f01 	ldrb.w	r3, [r4, #1]!

0040f46c <.LVL266>:
  40f46c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
  40f470:	4053      	eors	r3, r2
  40f472:	431d      	orrs	r5, r3

0040f474 <.LVL267>:
    for (i = 0; i < length; i++) {
  40f474:	42a1      	cmp	r1, r4
  40f476:	d1f7      	bne.n	40f468 <.LBB128>

0040f478 <.LBE128>:
            if (ConstantCompare(check, outputA,
  40f478:	bb2d      	cbnz	r5, 40f4c6 <.LBE130>

0040f47a <.LBB130>:

int wc_GenerateSeed(OS_Seed* os, byte* output, word32 sz)
{
    extern int pic32c_RNG_GenerateSeed(byte* output, word32 sz);

    return pic32c_RNG_GenerateSeed(output, sz);
  40f47a:	2120      	movs	r1, #32
  40f47c:	a804      	add	r0, sp, #16

0040f47e <.LVL270>:
  40f47e:	f003 fb32 	bl	412ae6 <.LFE32>

0040f482 <.LBE131>:
            if (wc_GenerateSeed(&rng->seed, entropy, ENTROPY_SZ) == 0 &&
  40f482:	b148      	cbz	r0, 40f498 <.LBE133>
                ret = DRBG_FAILURE;
  40f484:	2302      	movs	r3, #2

0040f486 <.LBB133>:
    volatile byte* z = (volatile byte*)mem;
  40f486:	aa04      	add	r2, sp, #16

0040f488 <.LVL273>:
    while (len--) *z++ = 0;
  40f488:	2400      	movs	r4, #0
  40f48a:	a80c      	add	r0, sp, #48	; 0x30

0040f48c <.LVL274>:
  40f48c:	1c51      	adds	r1, r2, #1

0040f48e <.LVL275>:
  40f48e:	7014      	strb	r4, [r2, #0]

0040f490 <.LVL276>:
  40f490:	460a      	mov	r2, r1
  40f492:	4281      	cmp	r1, r0
  40f494:	d1fa      	bne.n	40f48c <.LVL274>
  40f496:	e7c9      	b.n	40f42c <.LVL259>

0040f498 <.LBE133>:
                Hash_DRBG_Reseed(rng->drbg, entropy, ENTROPY_SZ)
  40f498:	2220      	movs	r2, #32
  40f49a:	a904      	add	r1, sp, #16
  40f49c:	68b8      	ldr	r0, [r7, #8]
  40f49e:	f001 fd69 	bl	410f74 <.LFE2>

0040f4a2 <.LVL278>:
            if (wc_GenerateSeed(&rng->seed, entropy, ENTROPY_SZ) == 0 &&
  40f4a2:	b108      	cbz	r0, 40f4a8 <.LVL278+0x6>
                ret = DRBG_FAILURE;
  40f4a4:	2302      	movs	r3, #2
  40f4a6:	e7ee      	b.n	40f486 <.LBB133>
                ret = Hash_DRBG_Generate(rng->drbg, NULL, 0);
  40f4a8:	2200      	movs	r2, #0
  40f4aa:	4611      	mov	r1, r2
  40f4ac:	68b8      	ldr	r0, [r7, #8]
  40f4ae:	f7fc fdff 	bl	40c0b0 <.LFE183>

0040f4b2 <.LVL279>:
                if (ret == DRBG_SUCCESS)
  40f4b2:	4603      	mov	r3, r0
  40f4b4:	2800      	cmp	r0, #0
  40f4b6:	d1e6      	bne.n	40f486 <.LBB133>
                    ret = Hash_DRBG_Generate(rng->drbg, output, sz);
  40f4b8:	4642      	mov	r2, r8
  40f4ba:	4649      	mov	r1, r9
  40f4bc:	68b8      	ldr	r0, [r7, #8]

0040f4be <.LVL280>:
  40f4be:	f7fc fdf7 	bl	40c0b0 <.LFE183>

0040f4c2 <.LVL281>:
  40f4c2:	4603      	mov	r3, r0

0040f4c4 <.LVL282>:
  40f4c4:	e7df      	b.n	40f486 <.LBB133>

0040f4c6 <.LBE130>:
        rng->status = DRBG_CONT_FAILED;
  40f4c6:	2303      	movs	r3, #3
  40f4c8:	733b      	strb	r3, [r7, #12]
        ret = DRBG_CONT_FIPS_E;
  40f4ca:	f06f 03d0 	mvn.w	r3, #208	; 0xd0
  40f4ce:	e7b4      	b.n	40f43a <.LVL261>

0040f4d0 <.LVL284>:
        return BAD_FUNC_ARG;
  40f4d0:	f06f 03ac 	mvn.w	r3, #172	; 0xac
  40f4d4:	e7b1      	b.n	40f43a <.LVL261>
        return RNG_FAILURE_E;
  40f4d6:	f06f 03c6 	mvn.w	r3, #198	; 0xc6
  40f4da:	e7ae      	b.n	40f43a <.LVL261>
  40f4dc:	004129d0 	.word	0x004129d0
  40f4e0:	0041266c 	.word	0x0041266c
  40f4e4:	004112ab 	.word	0x004112ab

Disassembly of section .text.wc_Sha512Update%92:

0040f4e8 <wc_Sha512Update>:
{
  40f4e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

0040f4ec <.LCFI6>:
    if (sha512 == NULL || (data == NULL && len > 0)) {
  40f4ec:	2800      	cmp	r0, #0
  40f4ee:	d065      	beq.n	40f5bc <.LVL43>
  40f4f0:	4689      	mov	r9, r1
  40f4f2:	4615      	mov	r5, r2
  40f4f4:	4680      	mov	r8, r0
  40f4f6:	b909      	cbnz	r1, 40f4fc <.LBB700>
  40f4f8:	2a00      	cmp	r2, #0
  40f4fa:	d162      	bne.n	40f5c2 <.LVL43+0x6>

0040f4fc <.LBB700>:
    byte* local = (byte*)sha512->buffer;
  40f4fc:	f108 0b58 	add.w	fp, r8, #88	; 0x58

0040f500 <.LVL25>:
    if (sha512->buffLen >= SHA512_BLOCK_SIZE)
  40f500:	f8d8 3000 	ldr.w	r3, [r8]
  40f504:	2b7f      	cmp	r3, #127	; 0x7f
  40f506:	d85f      	bhi.n	40f5c8 <.LBB719>
    while (len) {
  40f508:	2d00      	cmp	r5, #0
  40f50a:	d060      	beq.n	40f5ce <.LBB719+0x6>
  40f50c:	f108 0ad0 	add.w	sl, r8, #208	; 0xd0
  40f510:	e004      	b.n	40f51c <.LBB717>

0040f512 <.LBB702>:
            sha512->buffLen = 0;
  40f512:	2300      	movs	r3, #0
  40f514:	f8c8 3000 	str.w	r3, [r8]

0040f518 <.LBE702>:
    while (len) {
  40f518:	2d00      	cmp	r5, #0
  40f51a:	d04b      	beq.n	40f5b4 <.LBE715>

0040f51c <.LBB717>:
        word32 add = min(len, SHA512_BLOCK_SIZE - sha512->buffLen);
  40f51c:	f8d8 0000 	ldr.w	r0, [r8]

0040f520 <.LVL28>:
  40f520:	f1c0 0480 	rsb	r4, r0, #128	; 0x80

0040f524 <.LBB703>:
    #if defined(HAVE_FIPS) && !defined(min) /* so ifdef check passes */
        #define min min
    #endif
    STATIC INLINE word32 min(word32 a, word32 b)
    {
        return a > b ? b : a;
  40f524:	42ac      	cmp	r4, r5
  40f526:	bf28      	it	cs
  40f528:	462c      	movcs	r4, r5

0040f52a <.LBE703>:
        XMEMCPY(&local[sha512->buffLen], data, add);
  40f52a:	4622      	mov	r2, r4
  40f52c:	4649      	mov	r1, r9
  40f52e:	4458      	add	r0, fp
  40f530:	f7ff f840 	bl	40e5b4 <.LFE14>

0040f534 <.LVL31>:
        sha512->buffLen += add;
  40f534:	f8d8 3000 	ldr.w	r3, [r8]
  40f538:	4423      	add	r3, r4
  40f53a:	f8c8 3000 	str.w	r3, [r8]
        data            += add;
  40f53e:	44a1      	add	r9, r4
        len             -= add;
  40f540:	1b2d      	subs	r5, r5, r4
        if (sha512->buffLen == SHA512_BLOCK_SIZE) {
  40f542:	2b80      	cmp	r3, #128	; 0x80
  40f544:	d1e8      	bne.n	40f518 <.LBE702>
  40f546:	f108 0250 	add.w	r2, r8, #80	; 0x50

0040f54a <.LBB705>:
        out[i] = ByteReverseWord64(in[i]);
  40f54a:	6893      	ldr	r3, [r2, #8]
  40f54c:	68d1      	ldr	r1, [r2, #12]

0040f54e <.LBB707>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40f54e:	0a18      	lsrs	r0, r3, #8
  40f550:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  40f554:	021b      	lsls	r3, r3, #8
  40f556:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  40f55a:	4303      	orrs	r3, r0

0040f55c <.LBE709>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  40f55c:	ea4f 4733 	mov.w	r7, r3, ror #16
  40f560:	2600      	movs	r6, #0

0040f562 <.LBB711>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40f562:	0a0b      	lsrs	r3, r1, #8
  40f564:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  40f568:	0209      	lsls	r1, r1, #8
  40f56a:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  40f56e:	430b      	orrs	r3, r1

0040f570 <.LBB713>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40f570:	ea4f 4333 	mov.w	r3, r3, ror #16

0040f574 <.LBE711>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  40f574:	ea46 0003 	orr.w	r0, r6, r3
  40f578:	4639      	mov	r1, r7

0040f57a <.LBE707>:
        out[i] = ByteReverseWord64(in[i]);
  40f57a:	e9e2 0102 	strd	r0, r1, [r2, #8]!
    for (i = 0; i < count; i++)
  40f57e:	4592      	cmp	sl, r2
  40f580:	d1e3      	bne.n	40f54a <.LBB705>

0040f582 <.LBE705>:
            ret = Transform(sha512);
  40f582:	4640      	mov	r0, r8
  40f584:	f7f0 fe06 	bl	400194 <_etext>

0040f588 <.LVL35>:
            if (ret != 0)
  40f588:	4603      	mov	r3, r0
  40f58a:	b9a0      	cbnz	r0, 40f5b6 <.LBE700>

0040f58c <.LBB715>:
    word64 tmp = sha512->loLen;
  40f58c:	e9d8 2302 	ldrd	r2, r3, [r8, #8]

0040f590 <.LVL37>:
    if ( (sha512->loLen += len) < tmp)
  40f590:	f112 0080 	adds.w	r0, r2, #128	; 0x80

0040f594 <.LVL38>:
  40f594:	f143 0100 	adc.w	r1, r3, #0
  40f598:	e9c8 0102 	strd	r0, r1, [r8, #8]
  40f59c:	4299      	cmp	r1, r3
  40f59e:	bf08      	it	eq
  40f5a0:	4290      	cmpeq	r0, r2
  40f5a2:	d2b6      	bcs.n	40f512 <.LBB702>
        sha512->hiLen++;                       /* carry low to high */
  40f5a4:	e9d8 2304 	ldrd	r2, r3, [r8, #16]

0040f5a8 <.LVL39>:
  40f5a8:	3201      	adds	r2, #1
  40f5aa:	f143 0300 	adc.w	r3, r3, #0

0040f5ae <.LVL40>:
  40f5ae:	e9c8 2304 	strd	r2, r3, [r8, #16]
  40f5b2:	e7ae      	b.n	40f512 <.LBB702>

0040f5b4 <.LBE715>:
    while (len) {
  40f5b4:	2300      	movs	r3, #0

0040f5b6 <.LBE700>:
}
  40f5b6:	4618      	mov	r0, r3
  40f5b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040f5bc <.LVL43>:
        return BAD_FUNC_ARG;
  40f5bc:	f06f 03ac 	mvn.w	r3, #172	; 0xac
  40f5c0:	e7f9      	b.n	40f5b6 <.LBE700>
  40f5c2:	f06f 03ac 	mvn.w	r3, #172	; 0xac
  40f5c6:	e7f6      	b.n	40f5b6 <.LBE700>

0040f5c8 <.LBB719>:
        return BUFFER_E;
  40f5c8:	f06f 0383 	mvn.w	r3, #131	; 0x83
  40f5cc:	e7f3      	b.n	40f5b6 <.LBE700>
    while (len) {
  40f5ce:	2300      	movs	r3, #0
  40f5d0:	e7f1      	b.n	40f5b6 <.LBE700>

Disassembly of section .text.wc_Sha384Update%93:

0040f5d2 <wc_Sha384Update>:
{
  40f5d2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

0040f5d6 <.LCFI13>:
    if (sha384 == NULL || (data == NULL && len > 0)) {
  40f5d6:	2800      	cmp	r0, #0
  40f5d8:	d065      	beq.n	40f6a6 <.LVL102>
  40f5da:	4689      	mov	r9, r1
  40f5dc:	4615      	mov	r5, r2
  40f5de:	4680      	mov	r8, r0
  40f5e0:	b909      	cbnz	r1, 40f5e6 <.LBB821>
  40f5e2:	2a00      	cmp	r2, #0
  40f5e4:	d162      	bne.n	40f6ac <.LVL102+0x6>

0040f5e6 <.LBB821>:
    byte* local = (byte*)sha512->buffer;
  40f5e6:	f108 0b58 	add.w	fp, r8, #88	; 0x58

0040f5ea <.LVL84>:
    if (sha512->buffLen >= SHA512_BLOCK_SIZE)
  40f5ea:	f8d8 3000 	ldr.w	r3, [r8]
  40f5ee:	2b7f      	cmp	r3, #127	; 0x7f
  40f5f0:	d85f      	bhi.n	40f6b2 <.LBB840>
    while (len) {
  40f5f2:	2d00      	cmp	r5, #0
  40f5f4:	d060      	beq.n	40f6b8 <.LBB840+0x6>
  40f5f6:	f108 0ad0 	add.w	sl, r8, #208	; 0xd0
  40f5fa:	e004      	b.n	40f606 <.LBB838>

0040f5fc <.LBB823>:
            sha512->buffLen = 0;
  40f5fc:	2300      	movs	r3, #0
  40f5fe:	f8c8 3000 	str.w	r3, [r8]

0040f602 <.LBE823>:
    while (len) {
  40f602:	2d00      	cmp	r5, #0
  40f604:	d04b      	beq.n	40f69e <.LBE836>

0040f606 <.LBB838>:
        word32 add = min(len, SHA512_BLOCK_SIZE - sha512->buffLen);
  40f606:	f8d8 0000 	ldr.w	r0, [r8]

0040f60a <.LVL87>:
  40f60a:	f1c0 0480 	rsb	r4, r0, #128	; 0x80

0040f60e <.LBB824>:
        return a > b ? b : a;
  40f60e:	42ac      	cmp	r4, r5
  40f610:	bf28      	it	cs
  40f612:	462c      	movcs	r4, r5

0040f614 <.LBE824>:
        XMEMCPY(&local[sha512->buffLen], data, add);
  40f614:	4622      	mov	r2, r4
  40f616:	4649      	mov	r1, r9
  40f618:	4458      	add	r0, fp
  40f61a:	f7fe ffcb 	bl	40e5b4 <.LFE14>

0040f61e <.LVL90>:
        sha512->buffLen += add;
  40f61e:	f8d8 3000 	ldr.w	r3, [r8]
  40f622:	4423      	add	r3, r4
  40f624:	f8c8 3000 	str.w	r3, [r8]
        data            += add;
  40f628:	44a1      	add	r9, r4
        len             -= add;
  40f62a:	1b2d      	subs	r5, r5, r4
        if (sha512->buffLen == SHA512_BLOCK_SIZE) {
  40f62c:	2b80      	cmp	r3, #128	; 0x80
  40f62e:	d1e8      	bne.n	40f602 <.LBE823>
  40f630:	f108 0250 	add.w	r2, r8, #80	; 0x50

0040f634 <.LBB826>:
        out[i] = ByteReverseWord64(in[i]);
  40f634:	6893      	ldr	r3, [r2, #8]
  40f636:	68d1      	ldr	r1, [r2, #12]

0040f638 <.LBB828>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40f638:	0a18      	lsrs	r0, r3, #8
  40f63a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  40f63e:	021b      	lsls	r3, r3, #8
  40f640:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  40f644:	4303      	orrs	r3, r0

0040f646 <.LBE830>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  40f646:	ea4f 4733 	mov.w	r7, r3, ror #16
  40f64a:	2600      	movs	r6, #0

0040f64c <.LBB832>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  40f64c:	0a0b      	lsrs	r3, r1, #8
  40f64e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  40f652:	0209      	lsls	r1, r1, #8
  40f654:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  40f658:	430b      	orrs	r3, r1

0040f65a <.LBB834>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40f65a:	ea4f 4333 	mov.w	r3, r3, ror #16

0040f65e <.LBE832>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  40f65e:	ea46 0003 	orr.w	r0, r6, r3
  40f662:	4639      	mov	r1, r7

0040f664 <.LBE828>:
        out[i] = ByteReverseWord64(in[i]);
  40f664:	e9e2 0102 	strd	r0, r1, [r2, #8]!
    for (i = 0; i < count; i++)
  40f668:	4592      	cmp	sl, r2
  40f66a:	d1e3      	bne.n	40f634 <.LBB826>

0040f66c <.LBE826>:
            ret = Transform(sha512);
  40f66c:	4640      	mov	r0, r8
  40f66e:	f7f0 fd91 	bl	400194 <_etext>

0040f672 <.LVL94>:
            if (ret != 0)
  40f672:	4603      	mov	r3, r0
  40f674:	b9a0      	cbnz	r0, 40f6a0 <.LBE821>

0040f676 <.LBB836>:
    word64 tmp = sha512->loLen;
  40f676:	e9d8 2302 	ldrd	r2, r3, [r8, #8]

0040f67a <.LVL96>:
    if ( (sha512->loLen += len) < tmp)
  40f67a:	f112 0080 	adds.w	r0, r2, #128	; 0x80

0040f67e <.LVL97>:
  40f67e:	f143 0100 	adc.w	r1, r3, #0
  40f682:	e9c8 0102 	strd	r0, r1, [r8, #8]
  40f686:	4299      	cmp	r1, r3
  40f688:	bf08      	it	eq
  40f68a:	4290      	cmpeq	r0, r2
  40f68c:	d2b6      	bcs.n	40f5fc <.LBB823>
        sha512->hiLen++;                       /* carry low to high */
  40f68e:	e9d8 2304 	ldrd	r2, r3, [r8, #16]

0040f692 <.LVL98>:
  40f692:	3201      	adds	r2, #1
  40f694:	f143 0300 	adc.w	r3, r3, #0

0040f698 <.LVL99>:
  40f698:	e9c8 2304 	strd	r2, r3, [r8, #16]
  40f69c:	e7ae      	b.n	40f5fc <.LBB823>

0040f69e <.LBE836>:
    while (len) {
  40f69e:	2300      	movs	r3, #0

0040f6a0 <.LBE821>:
}
  40f6a0:	4618      	mov	r0, r3
  40f6a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040f6a6 <.LVL102>:
        return BAD_FUNC_ARG;
  40f6a6:	f06f 03ac 	mvn.w	r3, #172	; 0xac
  40f6aa:	e7f9      	b.n	40f6a0 <.LBE821>
  40f6ac:	f06f 03ac 	mvn.w	r3, #172	; 0xac
  40f6b0:	e7f6      	b.n	40f6a0 <.LBE821>

0040f6b2 <.LBB840>:
        return BUFFER_E;
  40f6b2:	f06f 0383 	mvn.w	r3, #131	; 0x83
  40f6b6:	e7f3      	b.n	40f6a0 <.LBE821>
    while (len) {
  40f6b8:	2300      	movs	r3, #0
  40f6ba:	e7f1      	b.n	40f6a0 <.LBE821>

Disassembly of section .text.des3_test%94:

0040f6bc <des3_test>:
{
  40f6bc:	b570      	push	{r4, r5, r6, lr}

0040f6be <.LCFI40>:
  40f6be:	f5ad 7d74 	sub.w	sp, sp, #976	; 0x3d0

0040f6c2 <.LCFI41>:
    const byte vector[] = { /* "Now is the time for all " w/o trailing 0 */
  40f6c2:	4c36      	ldr	r4, [pc, #216]	; (40f79c <.LCFI42+0x2>)
  40f6c4:	adee      	add	r5, sp, #952	; 0x3b8
  40f6c6:	f8d4 0750 	ldr.w	r0, [r4, #1872]	; 0x750
  40f6ca:	f8d4 1754 	ldr.w	r1, [r4, #1876]	; 0x754
  40f6ce:	f8d4 2758 	ldr.w	r2, [r4, #1880]	; 0x758
  40f6d2:	f8d4 375c 	ldr.w	r3, [r4, #1884]	; 0x75c
  40f6d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  40f6d8:	f8d4 0760 	ldr.w	r0, [r4, #1888]	; 0x760
  40f6dc:	f8d4 1764 	ldr.w	r1, [r4, #1892]	; 0x764
  40f6e0:	c503      	stmia	r5!, {r0, r1}
    const byte key3[] =
  40f6e2:	ad0c      	add	r5, sp, #48	; 0x30
  40f6e4:	f8d4 0768 	ldr.w	r0, [r4, #1896]	; 0x768
  40f6e8:	f8d4 176c 	ldr.w	r1, [r4, #1900]	; 0x76c
  40f6ec:	f8d4 2770 	ldr.w	r2, [r4, #1904]	; 0x770
  40f6f0:	f8d4 3774 	ldr.w	r3, [r4, #1908]	; 0x774
  40f6f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  40f6f6:	f8d4 0778 	ldr.w	r0, [r4, #1912]	; 0x778
  40f6fa:	f8d4 177c 	ldr.w	r1, [r4, #1916]	; 0x77c
  40f6fe:	c503      	stmia	r5!, {r0, r1}
    const byte iv3[] =
  40f700:	ad06      	add	r5, sp, #24
  40f702:	f8d4 0780 	ldr.w	r0, [r4, #1920]	; 0x780
  40f706:	f8d4 1784 	ldr.w	r1, [r4, #1924]	; 0x784
  40f70a:	f8d4 2788 	ldr.w	r2, [r4, #1928]	; 0x788
  40f70e:	f8d4 378c 	ldr.w	r3, [r4, #1932]	; 0x78c
  40f712:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  40f714:	f8d4 0790 	ldr.w	r0, [r4, #1936]	; 0x790
  40f718:	f8d4 1794 	ldr.w	r1, [r4, #1940]	; 0x794
  40f71c:	c503      	stmia	r5!, {r0, r1}
    const byte verify3[] =
  40f71e:	466d      	mov	r5, sp
  40f720:	f8d4 0798 	ldr.w	r0, [r4, #1944]	; 0x798
  40f724:	f8d4 179c 	ldr.w	r1, [r4, #1948]	; 0x79c
  40f728:	f8d4 27a0 	ldr.w	r2, [r4, #1952]	; 0x7a0
  40f72c:	f8d4 37a4 	ldr.w	r3, [r4, #1956]	; 0x7a4
  40f730:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  40f732:	f8d4 07a8 	ldr.w	r0, [r4, #1960]	; 0x7a8
  40f736:	f8d4 17ac 	ldr.w	r1, [r4, #1964]	; 0x7ac
  40f73a:	c503      	stmia	r5!, {r0, r1}
    appData.des3_test_result = 0;
  40f73c:	2300      	movs	r3, #0
  40f73e:	4a18      	ldr	r2, [pc, #96]	; (40f7a0 <.LCFI42+0x6>)
  40f740:	6313      	str	r3, [r2, #48]	; 0x30
    CRYPT_TDES_KeySet(&enc, key3, iv3, DES_ENCRYPTION);
  40f742:	aa06      	add	r2, sp, #24
  40f744:	a90c      	add	r1, sp, #48	; 0x30
  40f746:	a87a      	add	r0, sp, #488	; 0x1e8
  40f748:	f003 fac0 	bl	412ccc <.LFE23>

0040f74c <.LVL87>:
    CRYPT_TDES_KeySet(&dec, key3, iv3, DES_DECRYPTION);
  40f74c:	2301      	movs	r3, #1
  40f74e:	aa06      	add	r2, sp, #24
  40f750:	a90c      	add	r1, sp, #48	; 0x30
  40f752:	a812      	add	r0, sp, #72	; 0x48
  40f754:	f003 faba 	bl	412ccc <.LFE23>

0040f758 <.LVL88>:
    CRYPT_TDES_CBC_Encrypt(&enc, cipher, vector, sizeof(vector));
  40f758:	2318      	movs	r3, #24
  40f75a:	aaee      	add	r2, sp, #952	; 0x3b8
  40f75c:	a9e2      	add	r1, sp, #904	; 0x388
  40f75e:	a87a      	add	r0, sp, #488	; 0x1e8
  40f760:	f003 f976 	bl	412a50 <.LFE1>

0040f764 <.LVL89>:
    CRYPT_TDES_CBC_Decrypt(&dec, plain, verify3, sizeof(verify3));
  40f764:	2318      	movs	r3, #24
  40f766:	466a      	mov	r2, sp
  40f768:	a9e8      	add	r1, sp, #928	; 0x3a0
  40f76a:	a812      	add	r0, sp, #72	; 0x48
  40f76c:	f003 f97f 	bl	412a6e <.LFE26>

0040f770 <.LVL90>:
    if (memcmp(plain, vector, sizeof(plain)))
  40f770:	2218      	movs	r2, #24
  40f772:	a9ee      	add	r1, sp, #952	; 0x3b8
  40f774:	a8e8      	add	r0, sp, #928	; 0x3a0
  40f776:	f002 faa7 	bl	411cc8 <memcmp>

0040f77a <.LVL91>:
  40f77a:	b110      	cbz	r0, 40f782 <.LVL91+0x8>
        appData.des3_test_result = 2;
  40f77c:	2202      	movs	r2, #2
  40f77e:	4b08      	ldr	r3, [pc, #32]	; (40f7a0 <.LCFI42+0x6>)
  40f780:	631a      	str	r2, [r3, #48]	; 0x30
    if (memcmp(cipher, verify3, sizeof(cipher)))
  40f782:	2218      	movs	r2, #24
  40f784:	4669      	mov	r1, sp
  40f786:	a8e2      	add	r0, sp, #904	; 0x388
  40f788:	f002 fa9e 	bl	411cc8 <memcmp>

0040f78c <.LVL92>:
  40f78c:	b118      	cbz	r0, 40f796 <.LVL92+0xa>
        appData.des3_test_result++;
  40f78e:	4a04      	ldr	r2, [pc, #16]	; (40f7a0 <.LCFI42+0x6>)
  40f790:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40f792:	3301      	adds	r3, #1
  40f794:	6313      	str	r3, [r2, #48]	; 0x30
}
  40f796:	f50d 7d74 	add.w	sp, sp, #976	; 0x3d0

0040f79a <.LCFI42>:
  40f79a:	bd70      	pop	{r4, r5, r6, pc}
  40f79c:	004089cc 	.word	0x004089cc
  40f7a0:	2040db08 	.word	0x2040db08

Disassembly of section .text.wc_InitRng_ex%95:

0040f7a4 <wc_InitRng_ex>:
    if (rng == NULL)
  40f7a4:	2800      	cmp	r0, #0
  40f7a6:	d063      	beq.n	40f870 <.LCFI27>
{
  40f7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0040f7ac <.LCFI23>:
  40f7ac:	b0a4      	sub	sp, #144	; 0x90

0040f7ae <.LCFI24>:
  40f7ae:	4607      	mov	r7, r0
  40f7b0:	4690      	mov	r8, r2
    rng->heap = heap;
  40f7b2:	6041      	str	r1, [r0, #4]
    rng->drbg = NULL;
  40f7b4:	2000      	movs	r0, #0

0040f7b6 <.LVL221>:
  40f7b6:	60b8      	str	r0, [r7, #8]
    rng->status = DRBG_NOT_INIT;
  40f7b8:	7338      	strb	r0, [r7, #12]

0040f7ba <.LBB106>:
        ret = wc_RNG_HealthTest(0, entropyB, sizeof(entropyB),
  40f7ba:	2380      	movs	r3, #128	; 0x80
  40f7bc:	9302      	str	r3, [sp, #8]
  40f7be:	ab04      	add	r3, sp, #16
  40f7c0:	9301      	str	r3, [sp, #4]
  40f7c2:	9000      	str	r0, [sp, #0]
  40f7c4:	4603      	mov	r3, r0
  40f7c6:	2230      	movs	r2, #48	; 0x30

0040f7c8 <.LVL223>:
  40f7c8:	492b      	ldr	r1, [pc, #172]	; (40f878 <.LVL251+0x4>)

0040f7ca <.LVL224>:
  40f7ca:	f001 faa7 	bl	410d1c <wc_RNG_HealthTest>

0040f7ce <.LVL225>:
        if (ret == 0) {
  40f7ce:	4604      	mov	r4, r0
  40f7d0:	2800      	cmp	r0, #0
  40f7d2:	d148      	bne.n	40f866 <.LVL248>
  40f7d4:	f10d 010f 	add.w	r1, sp, #15
  40f7d8:	4d28      	ldr	r5, [pc, #160]	; (40f87c <.LVL251+0x8>)
  40f7da:	f10d 028f 	add.w	r2, sp, #143	; 0x8f

0040f7de <.LBB108>:
        compareSum |= a[i] ^ b[i];
  40f7de:	f811 3f01 	ldrb.w	r3, [r1, #1]!

0040f7e2 <.LVL227>:
  40f7e2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
  40f7e6:	4073      	eors	r3, r6
  40f7e8:	431c      	orrs	r4, r3

0040f7ea <.LVL228>:
    for (i = 0; i < length; i++) {
  40f7ea:	428a      	cmp	r2, r1
  40f7ec:	d1f7      	bne.n	40f7de <.LBB108>

0040f7ee <.LBE108>:
            if (ConstantCompare(check, outputB,
  40f7ee:	2c00      	cmp	r4, #0
  40f7f0:	d139      	bne.n	40f866 <.LVL248>

0040f7f2 <.LBB110>:
                (struct DRBG*)XMALLOC(sizeof(DRBG), rng->heap,
  40f7f2:	2078      	movs	r0, #120	; 0x78
  40f7f4:	f003 fa76 	bl	412ce4 <.LFE24>

0040f7f8 <.LVL231>:
        rng->drbg =
  40f7f8:	60b8      	str	r0, [r7, #8]
        if (rng->drbg == NULL) {
  40f7fa:	b1d0      	cbz	r0, 40f832 <.LVL237>

0040f7fc <.LBB111>:
    return pic32c_RNG_GenerateSeed(output, sz);
  40f7fc:	2130      	movs	r1, #48	; 0x30
  40f7fe:	a804      	add	r0, sp, #16

0040f800 <.LVL233>:
  40f800:	f003 f971 	bl	412ae6 <.LFE32>

0040f804 <.LBE111>:
        else if (wc_GenerateSeed(&rng->seed, entropy, ENTROPY_NONCE_SZ) == 0 &&
  40f804:	b108      	cbz	r0, 40f80a <.LBE111+0x6>
            ret = DRBG_FAILURE;
  40f806:	2002      	movs	r0, #2
  40f808:	e015      	b.n	40f836 <.LBB113>
                 Hash_DRBG_Instantiate(rng->drbg, entropy, ENTROPY_NONCE_SZ,
  40f80a:	68b8      	ldr	r0, [r7, #8]
  40f80c:	f8cd 8008 	str.w	r8, [sp, #8]
  40f810:	687b      	ldr	r3, [r7, #4]
  40f812:	9301      	str	r3, [sp, #4]
  40f814:	2300      	movs	r3, #0
  40f816:	9300      	str	r3, [sp, #0]
  40f818:	2230      	movs	r2, #48	; 0x30
  40f81a:	a904      	add	r1, sp, #16
  40f81c:	f002 f952 	bl	411ac4 <Hash_DRBG_Instantiate>

0040f820 <.LVL235>:
        else if (wc_GenerateSeed(&rng->seed, entropy, ENTROPY_NONCE_SZ) == 0 &&
  40f820:	b108      	cbz	r0, 40f826 <.LVL235+0x6>
            ret = DRBG_FAILURE;
  40f822:	2002      	movs	r0, #2
  40f824:	e007      	b.n	40f836 <.LBB113>
            ret = Hash_DRBG_Generate(rng->drbg, NULL, 0);
  40f826:	2200      	movs	r2, #0
  40f828:	4611      	mov	r1, r2
  40f82a:	68b8      	ldr	r0, [r7, #8]
  40f82c:	f7fc fc40 	bl	40c0b0 <.LFE183>

0040f830 <.LVL236>:
  40f830:	e001      	b.n	40f836 <.LBB113>

0040f832 <.LVL237>:
            ret = MEMORY_E;
  40f832:	f06f 007c 	mvn.w	r0, #124	; 0x7c

0040f836 <.LBB113>:
    volatile byte* z = (volatile byte*)mem;
  40f836:	ab04      	add	r3, sp, #16

0040f838 <.LVL239>:
    while (len--) *z++ = 0;
  40f838:	2400      	movs	r4, #0
  40f83a:	a910      	add	r1, sp, #64	; 0x40

0040f83c <.LVL240>:
  40f83c:	1c5a      	adds	r2, r3, #1

0040f83e <.LVL241>:
  40f83e:	701c      	strb	r4, [r3, #0]

0040f840 <.LVL242>:
  40f840:	4613      	mov	r3, r2
  40f842:	428a      	cmp	r2, r1
  40f844:	d1fa      	bne.n	40f83c <.LVL240>

0040f846 <.LBE110>:
     if (ret == DRBG_SUCCESS) {
  40f846:	b158      	cbz	r0, 40f860 <.LCFI26>
    else if (ret == DRBG_CONT_FAILURE) {
  40f848:	2804      	cmp	r0, #4
  40f84a:	d00c      	beq.n	40f866 <.LVL248>
    else if (ret == DRBG_FAILURE) {
  40f84c:	2802      	cmp	r0, #2
        rng->status = DRBG_FAILED;
  40f84e:	f04f 0302 	mov.w	r3, #2
  40f852:	733b      	strb	r3, [r7, #12]

0040f854 <.LVL244>:
        ret = RNG_FAILURE_E;
  40f854:	bf08      	it	eq
  40f856:	f06f 00c6 	mvneq.w	r0, #198	; 0xc6

0040f85a <.LVL245>:
}
  40f85a:	b024      	add	sp, #144	; 0x90

0040f85c <.LCFI25>:
  40f85c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040f860 <.LCFI26>:
        rng->status = DRBG_OK;
  40f860:	2301      	movs	r3, #1
  40f862:	733b      	strb	r3, [r7, #12]

0040f864 <.LVL247>:
  40f864:	e7f9      	b.n	40f85a <.LVL245>

0040f866 <.LVL248>:
        rng->status = DRBG_CONT_FAILED;
  40f866:	2303      	movs	r3, #3
  40f868:	733b      	strb	r3, [r7, #12]

0040f86a <.LVL249>:
        ret = DRBG_CONT_FIPS_E;
  40f86a:	f06f 00d0 	mvn.w	r0, #208	; 0xd0
  40f86e:	e7f4      	b.n	40f85a <.LVL245>

0040f870 <.LCFI27>:
        return BAD_FUNC_ARG;
  40f870:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040f874 <.LVL251>:
  40f874:	4770      	bx	lr
  40f876:	bf00      	nop
  40f878:	0041269c 	.word	0x0041269c
  40f87c:	0041132b 	.word	0x0041132b

Disassembly of section .text%96:

0040f880 <strlen>:
  40f880:	f890 f000 	pld	[r0]
  40f884:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  40f888:	f020 0107 	bic.w	r1, r0, #7
  40f88c:	f06f 0c00 	mvn.w	ip, #0
  40f890:	f010 0407 	ands.w	r4, r0, #7
  40f894:	f891 f020 	pld	[r1, #32]
  40f898:	f040 8049 	bne.w	40f92e <strlen+0xae>
  40f89c:	f04f 0400 	mov.w	r4, #0
  40f8a0:	f06f 0007 	mvn.w	r0, #7
  40f8a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  40f8a8:	f891 f040 	pld	[r1, #64]	; 0x40
  40f8ac:	f100 0008 	add.w	r0, r0, #8
  40f8b0:	fa82 f24c 	uadd8	r2, r2, ip
  40f8b4:	faa4 f28c 	sel	r2, r4, ip
  40f8b8:	fa83 f34c 	uadd8	r3, r3, ip
  40f8bc:	faa2 f38c 	sel	r3, r2, ip
  40f8c0:	bb4b      	cbnz	r3, 40f916 <strlen+0x96>
  40f8c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  40f8c6:	fa82 f24c 	uadd8	r2, r2, ip
  40f8ca:	f100 0008 	add.w	r0, r0, #8
  40f8ce:	faa4 f28c 	sel	r2, r4, ip
  40f8d2:	fa83 f34c 	uadd8	r3, r3, ip
  40f8d6:	faa2 f38c 	sel	r3, r2, ip
  40f8da:	b9e3      	cbnz	r3, 40f916 <strlen+0x96>
  40f8dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  40f8e0:	fa82 f24c 	uadd8	r2, r2, ip
  40f8e4:	f100 0008 	add.w	r0, r0, #8
  40f8e8:	faa4 f28c 	sel	r2, r4, ip
  40f8ec:	fa83 f34c 	uadd8	r3, r3, ip
  40f8f0:	faa2 f38c 	sel	r3, r2, ip
  40f8f4:	b97b      	cbnz	r3, 40f916 <strlen+0x96>
  40f8f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40f8fa:	f101 0120 	add.w	r1, r1, #32
  40f8fe:	fa82 f24c 	uadd8	r2, r2, ip
  40f902:	f100 0008 	add.w	r0, r0, #8
  40f906:	faa4 f28c 	sel	r2, r4, ip
  40f90a:	fa83 f34c 	uadd8	r3, r3, ip
  40f90e:	faa2 f38c 	sel	r3, r2, ip
  40f912:	2b00      	cmp	r3, #0
  40f914:	d0c6      	beq.n	40f8a4 <strlen+0x24>
  40f916:	2a00      	cmp	r2, #0
  40f918:	bf04      	itt	eq
  40f91a:	3004      	addeq	r0, #4
  40f91c:	461a      	moveq	r2, r3
  40f91e:	ba12      	rev	r2, r2
  40f920:	fab2 f282 	clz	r2, r2
  40f924:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  40f928:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40f92c:	4770      	bx	lr
  40f92e:	e9d1 2300 	ldrd	r2, r3, [r1]
  40f932:	f004 0503 	and.w	r5, r4, #3
  40f936:	f1c4 0000 	rsb	r0, r4, #0
  40f93a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40f93e:	f014 0f04 	tst.w	r4, #4
  40f942:	f891 f040 	pld	[r1, #64]	; 0x40
  40f946:	fa0c f505 	lsl.w	r5, ip, r5
  40f94a:	ea62 0205 	orn	r2, r2, r5
  40f94e:	bf1c      	itt	ne
  40f950:	ea63 0305 	ornne	r3, r3, r5
  40f954:	4662      	movne	r2, ip
  40f956:	f04f 0400 	mov.w	r4, #0
  40f95a:	e7a9      	b.n	40f8b0 <strlen+0x30>

Disassembly of section .text.wc_AesCbcDecrypt%97:

0040f95c <wc_AesCbcDecrypt>:
        if (aes == NULL || out == NULL || in == NULL
  40f95c:	2900      	cmp	r1, #0
  40f95e:	bf18      	it	ne
  40f960:	2800      	cmpne	r0, #0
  40f962:	d05d      	beq.n	40fa20 <.LCFI18>
    {
  40f964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

0040f968 <.LCFI17>:
  40f968:	4615      	mov	r5, r2
  40f96a:	4681      	mov	r9, r0
  40f96c:	460e      	mov	r6, r1
        if (aes == NULL || out == NULL || in == NULL
  40f96e:	2a00      	cmp	r2, #0
  40f970:	d04b      	beq.n	40fa0a <.LVL204>
                                       || sz % AES_BLOCK_SIZE != 0) {
  40f972:	f013 0f0f 	tst.w	r3, #15
  40f976:	d14c      	bne.n	40fa12 <.LVL206>
        blocks = sz / AES_BLOCK_SIZE;
  40f978:	091b      	lsrs	r3, r3, #4

0040f97a <.LVL193>:
        while (blocks--) {
  40f97a:	f103 38ff 	add.w	r8, r3, #4294967295

0040f97e <.LVL194>:
  40f97e:	2b00      	cmp	r3, #0
  40f980:	d04b      	beq.n	40fa1a <.LVL208>
            XMEMCPY(aes->tmp, in, AES_BLOCK_SIZE);
  40f982:	f500 7484 	add.w	r4, r0, #264	; 0x108
            xorbuf(out, (byte*)aes->reg, AES_BLOCK_SIZE);
  40f986:	f100 07f8 	add.w	r7, r0, #248	; 0xf8
  40f98a:	e01b      	b.n	40f9c4 <.LBE168+0x1e>

0040f98c <.LVL195>:
  40f98c:	1e73      	subs	r3, r6, #1
  40f98e:	f109 01f7 	add.w	r1, r9, #247	; 0xf7
  40f992:	f106 0e0f 	add.w	lr, r6, #15

0040f996 <.LBB168>:
        for (i = 0; i < count; i++) b[i] ^= m[i];
  40f996:	785a      	ldrb	r2, [r3, #1]
  40f998:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  40f99c:	4042      	eors	r2, r0
  40f99e:	f803 2f01 	strb.w	r2, [r3, #1]!
  40f9a2:	4573      	cmp	r3, lr
  40f9a4:	d1f7      	bne.n	40f996 <.LBB168>

0040f9a6 <.LBE168>:
            XMEMCPY(aes->reg, aes->tmp, AES_BLOCK_SIZE);
  40f9a6:	6820      	ldr	r0, [r4, #0]
  40f9a8:	6861      	ldr	r1, [r4, #4]
  40f9aa:	68a2      	ldr	r2, [r4, #8]
  40f9ac:	68e3      	ldr	r3, [r4, #12]
  40f9ae:	6038      	str	r0, [r7, #0]
  40f9b0:	6079      	str	r1, [r7, #4]
  40f9b2:	60ba      	str	r2, [r7, #8]
  40f9b4:	60fb      	str	r3, [r7, #12]
            out += AES_BLOCK_SIZE;
  40f9b6:	3610      	adds	r6, #16
            in  += AES_BLOCK_SIZE;
  40f9b8:	3510      	adds	r5, #16
        while (blocks--) {
  40f9ba:	f108 38ff 	add.w	r8, r8, #4294967295
  40f9be:	f1b8 3fff 	cmp.w	r8, #4294967295
  40f9c2:	d01f      	beq.n	40fa04 <.LBE171>
            XMEMCPY(aes->tmp, in, AES_BLOCK_SIZE);
  40f9c4:	6828      	ldr	r0, [r5, #0]
  40f9c6:	6869      	ldr	r1, [r5, #4]
  40f9c8:	68aa      	ldr	r2, [r5, #8]
  40f9ca:	68eb      	ldr	r3, [r5, #12]
  40f9cc:	6020      	str	r0, [r4, #0]
  40f9ce:	6061      	str	r1, [r4, #4]
  40f9d0:	60a2      	str	r2, [r4, #8]
  40f9d2:	60e3      	str	r3, [r4, #12]
            wc_AesDecrypt(aes, (byte*)aes->tmp, out);
  40f9d4:	4632      	mov	r2, r6
  40f9d6:	4621      	mov	r1, r4
  40f9d8:	4648      	mov	r0, r9
  40f9da:	f7fb fb7b 	bl	40b0d4 <.LFE15>

0040f9de <.LBB174>:
    if (((wolfssl_word)buf | (wolfssl_word)mask | count) % WOLFSSL_WORD_SIZE == 0)
  40f9de:	ea46 0307 	orr.w	r3, r6, r7
  40f9e2:	f013 0f03 	tst.w	r3, #3
  40f9e6:	d1d1      	bne.n	40f98c <.LVL195>
  40f9e8:	1f33      	subs	r3, r6, #4
  40f9ea:	f109 01f4 	add.w	r1, r9, #244	; 0xf4
  40f9ee:	f106 0e0c 	add.w	lr, r6, #12

0040f9f2 <.LBB171>:
    for (i = 0; i < n; i++) r[i] ^= a[i];
  40f9f2:	685a      	ldr	r2, [r3, #4]
  40f9f4:	f851 0f04 	ldr.w	r0, [r1, #4]!
  40f9f8:	4042      	eors	r2, r0
  40f9fa:	f843 2f04 	str.w	r2, [r3, #4]!
  40f9fe:	4573      	cmp	r3, lr
  40fa00:	d1f7      	bne.n	40f9f2 <.LBB171>
  40fa02:	e7d0      	b.n	40f9a6 <.LBE168>

0040fa04 <.LBE171>:
        return 0;
  40fa04:	2000      	movs	r0, #0
  40fa06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040fa0a <.LVL204>:
            return BAD_FUNC_ARG;
  40fa0a:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040fa0e <.LVL205>:
  40fa0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040fa12 <.LVL206>:
  40fa12:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040fa16 <.LVL207>:
  40fa16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040fa1a <.LVL208>:
        return 0;
  40fa1a:	2000      	movs	r0, #0

0040fa1c <.LVL209>:
    }
  40fa1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040fa20 <.LCFI18>:
            return BAD_FUNC_ARG;
  40fa20:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040fa24 <.LVL211>:
    }
  40fa24:	4770      	bx	lr

Disassembly of section .text.TIME_PLIB_Callback%98:

0040fa28 <TIME_PLIB_Callback>:

    return;
}

static void TIME_PLIB_Callback(uintptr_t context)
{
  40fa28:	b510      	push	{r4, lr}

0040fa2a <.LBB12>:
    counterObj->interruptContext = true;
  40fa2a:	4a30      	ldr	r2, [pc, #192]	; (40faec <.LVL67+0x2>)
  40fa2c:	2301      	movs	r3, #1
  40fa2e:	6293      	str	r3, [r2, #40]	; 0x28

0040fa30 <.LBB14>:
    uint32_t counter32Low = counterObj->counter & HW_COUNTER_MAX;
  40fa30:	6993      	ldr	r3, [r2, #24]
  40fa32:	b29b      	uxth	r3, r3

0040fa34 <.LVL47>:
    uint32_t counter32High = counterObj->counter >> HW_COUNTER_WIDTH;
  40fa34:	6991      	ldr	r1, [r2, #24]
  40fa36:	0c09      	lsrs	r1, r1, #16

0040fa38 <.LVL48>:
    uint32_t periodDelta = counterObj->timePeriod;
  40fa38:	6950      	ldr	r0, [r2, #20]

0040fa3a <.LVL49>:
    if(counterObj->timePeriod != counterObj->timePeriodPrevious)
  40fa3a:	6912      	ldr	r2, [r2, #16]
  40fa3c:	4290      	cmp	r0, r2
  40fa3e:	d003      	beq.n	40fa48 <.LVL50+0x4>
        if(counterObj->timePeriod > counterObj->timePeriodPrevious)
  40fa40:	d927      	bls.n	40fa92 <.LVL60>
            periodDelta = counterObj->timePeriod - counterObj->timePeriodPrevious;
  40fa42:	1a82      	subs	r2, r0, r2

0040fa44 <.LVL50>:
        counterObj->timePeriodPrevious = counterObj->timePeriod;
  40fa44:	4c29      	ldr	r4, [pc, #164]	; (40faec <.LVL67+0x2>)
  40fa46:	6120      	str	r0, [r4, #16]
    if((counter32Low + periodDelta) > HW_COUNTER_MAX)
  40fa48:	4413      	add	r3, r2

0040fa4a <.LVL52>:
  40fa4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  40fa4e:	d307      	bcc.n	40fa60 <.LVL53+0xa>
        counter32Low = ((counter32Low + periodDelta) - HW_COUNTER_MAX);
  40fa50:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
  40fa54:	3bff      	subs	r3, #255	; 0xff

0040fa56 <.LVL53>:
        if(counter32High < HW_COUNTER_MAX)
  40fa56:	f64f 74fe 	movw	r4, #65534	; 0xfffe
  40fa5a:	42a1      	cmp	r1, r4
  40fa5c:	d81e      	bhi.n	40fa9c <.LVL62>
            counter32High++;
  40fa5e:	3101      	adds	r1, #1
    counterObj->counter = ((counter32High << HW_COUNTER_WIDTH) | (counter32Low & HW_COUNTER_MAX));
  40fa60:	b29b      	uxth	r3, r3

0040fa62 <.LVL55>:
  40fa62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40fa66:	4921      	ldr	r1, [pc, #132]	; (40faec <.LVL67+0x2>)

0040fa68 <.LVL56>:
  40fa68:	618b      	str	r3, [r1, #24]
    if(counterObj->tmrActive != NULL)
  40fa6a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  40fa6c:	b16b      	cbz	r3, 40fa8a <.LVL59>
        if(counterObj->tmrActive->timeRemaining > counterObj->timePeriod)
  40fa6e:	6919      	ldr	r1, [r3, #16]
  40fa70:	4288      	cmp	r0, r1
            counterObj->tmrActive->timeRemaining -= periodDelta;
  40fa72:	bf34      	ite	cc
  40fa74:	1a8a      	subcc	r2, r1, r2

0040fa76 <.LVL57>:
            counterObj->tmrActive->timeRemaining = 0;
  40fa76:	2200      	movcs	r2, #0
  40fa78:	611a      	str	r2, [r3, #16]

0040fa7a <.LBE14>:
    if((counterObj->tmrActive != NULL) && (counterObj->tmrActive->timeRemaining == 0))
  40fa7a:	4b1c      	ldr	r3, [pc, #112]	; (40faec <.LVL67+0x2>)
  40fa7c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  40fa7e:	b124      	cbz	r4, 40fa8a <.LVL59>
  40fa80:	6923      	ldr	r3, [r4, #16]
  40fa82:	b1d3      	cbz	r3, 40faba <.LBE17>
        timerHardwarePeriod_update(counterObj);
  40fa84:	4819      	ldr	r0, [pc, #100]	; (40faec <.LVL67+0x2>)
  40fa86:	f002 fd19 	bl	4124bc <.LFE148>

0040fa8a <.LVL59>:
    counterObj->interruptContext = false;
  40fa8a:	2200      	movs	r2, #0
  40fa8c:	4b17      	ldr	r3, [pc, #92]	; (40faec <.LVL67+0x2>)
  40fa8e:	629a      	str	r2, [r3, #40]	; 0x28
  40fa90:	bd10      	pop	{r4, pc}

0040fa92 <.LVL60>:
  40fa92:	f64f 74ff 	movw	r4, #65535	; 0xffff
  40fa96:	4404      	add	r4, r0

0040fa98 <.LBB17>:
            periodDelta = (HW_COUNTER_MAX - counterObj->timePeriodPrevious) + counterObj->timePeriod;
  40fa98:	1aa2      	subs	r2, r4, r2

0040fa9a <.LVL61>:
  40fa9a:	e7d3      	b.n	40fa44 <.LVL50>

0040fa9c <.LVL62>:
            if(counterObj->highCounter < COUNTER_MAX)
  40fa9c:	4913      	ldr	r1, [pc, #76]	; (40faec <.LVL67+0x2>)
  40fa9e:	69c9      	ldr	r1, [r1, #28]
  40faa0:	f1b1 3fff 	cmp.w	r1, #4294967295
  40faa4:	d005      	beq.n	40fab2 <.LVL62+0x16>
                counterObj->highCounter++;
  40faa6:	4c11      	ldr	r4, [pc, #68]	; (40faec <.LVL67+0x2>)
  40faa8:	69e1      	ldr	r1, [r4, #28]
  40faaa:	3101      	adds	r1, #1
  40faac:	61e1      	str	r1, [r4, #28]
            counter32High = 0;
  40faae:	2100      	movs	r1, #0
  40fab0:	e7d6      	b.n	40fa60 <.LVL53+0xa>
                counterObj->highCounter = 0;
  40fab2:	2100      	movs	r1, #0
  40fab4:	4c0d      	ldr	r4, [pc, #52]	; (40faec <.LVL67+0x2>)
  40fab6:	61e1      	str	r1, [r4, #28]
  40fab8:	e7d2      	b.n	40fa60 <.LVL53+0xa>

0040faba <.LBE17>:
        counterObj->tmrElapsed = true;
  40faba:	2301      	movs	r3, #1
  40fabc:	4a0b      	ldr	r2, [pc, #44]	; (40faec <.LVL67+0x2>)
  40fabe:	6253      	str	r3, [r2, #36]	; 0x24

0040fac0 <.LBB18>:
    timerObj->tmrElapsed = true;
  40fac0:	61e3      	str	r3, [r4, #28]
    if(timerObj->callback != NULL)
  40fac2:	6963      	ldr	r3, [r4, #20]
  40fac4:	b10b      	cbz	r3, 40faca <.LBB18+0xa>
        timerObj->callback(timerObj->context);
  40fac6:	69a0      	ldr	r0, [r4, #24]
  40fac8:	4798      	blx	r3
    timer_removeFromList(timerObj);
  40faca:	4620      	mov	r0, r4
  40facc:	f001 fee0 	bl	411890 <.LFE143>

0040fad0 <.LVL66>:
    if(timerObj->type == SYS_TIME_PERIODIC)
  40fad0:	7a23      	ldrb	r3, [r4, #8]
  40fad2:	2b01      	cmp	r3, #1
  40fad4:	d006      	beq.n	40fae4 <.LBB21>
        timerObj->active = false;
  40fad6:	2300      	movs	r3, #0
  40fad8:	6063      	str	r3, [r4, #4]

0040fada <.LBE18>:
    if(counterObj->tmrActive != NULL)
  40fada:	4b04      	ldr	r3, [pc, #16]	; (40faec <.LVL67+0x2>)
  40fadc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40fade:	2b00      	cmp	r3, #0
  40fae0:	d1d0      	bne.n	40fa84 <.LBE14+0xa>
  40fae2:	e7d2      	b.n	40fa8a <.LVL59>

0040fae4 <.LBB21>:
        timer_addToList(timerObj);
  40fae4:	4620      	mov	r0, r4
  40fae6:	f001 fce1 	bl	4114ac <.LFE7>

0040faea <.LVL67>:
  40faea:	e7f6      	b.n	40fada <.LBE18>
  40faec:	2040dbf8 	.word	0x2040dbf8

Disassembly of section .text.memmove%99:

0040faf0 <memmove>:
  40faf0:	4288      	cmp	r0, r1
  40faf2:	b5f0      	push	{r4, r5, r6, r7, lr}

0040faf4 <.LCFI0>:
  40faf4:	d90d      	bls.n	40fb12 <.LVL6>
  40faf6:	188b      	adds	r3, r1, r2
  40faf8:	4298      	cmp	r0, r3
  40fafa:	d20a      	bcs.n	40fb12 <.LVL6>

0040fafc <.LVL1>:
  40fafc:	1884      	adds	r4, r0, r2

0040fafe <.LVL2>:
  40fafe:	2a00      	cmp	r2, #0
  40fb00:	d051      	beq.n	40fba6 <.LVL26>
  40fb02:	4622      	mov	r2, r4

0040fb04 <.LVL3>:
  40fb04:	f813 4d01 	ldrb.w	r4, [r3, #-1]!

0040fb08 <.LVL4>:
  40fb08:	f802 4d01 	strb.w	r4, [r2, #-1]!

0040fb0c <.LVL5>:
  40fb0c:	4299      	cmp	r1, r3
  40fb0e:	d1f9      	bne.n	40fb04 <.LVL3>
  40fb10:	bdf0      	pop	{r4, r5, r6, r7, pc}

0040fb12 <.LVL6>:
  40fb12:	2a0f      	cmp	r2, #15
  40fb14:	d948      	bls.n	40fba8 <.LVL27>
  40fb16:	ea41 0300 	orr.w	r3, r1, r0
  40fb1a:	079b      	lsls	r3, r3, #30
  40fb1c:	d146      	bne.n	40fbac <.LVL27+0x4>
  40fb1e:	f100 0410 	add.w	r4, r0, #16
  40fb22:	f101 0310 	add.w	r3, r1, #16
  40fb26:	4615      	mov	r5, r2

0040fb28 <.LVL7>:
  40fb28:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40fb2c:	f844 6c10 	str.w	r6, [r4, #-16]

0040fb30 <.LVL8>:
  40fb30:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40fb34:	f844 6c0c 	str.w	r6, [r4, #-12]

0040fb38 <.LVL9>:
  40fb38:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40fb3c:	f844 6c08 	str.w	r6, [r4, #-8]

0040fb40 <.LVL10>:
  40fb40:	3d10      	subs	r5, #16
  40fb42:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40fb46:	f844 6c04 	str.w	r6, [r4, #-4]
  40fb4a:	2d0f      	cmp	r5, #15
  40fb4c:	f103 0310 	add.w	r3, r3, #16

0040fb50 <.LVL12>:
  40fb50:	f104 0410 	add.w	r4, r4, #16
  40fb54:	d8e8      	bhi.n	40fb28 <.LVL7>
  40fb56:	f1a2 0310 	sub.w	r3, r2, #16

0040fb5a <.LVL13>:
  40fb5a:	f023 030f 	bic.w	r3, r3, #15
  40fb5e:	f002 0e0f 	and.w	lr, r2, #15
  40fb62:	3310      	adds	r3, #16
  40fb64:	f1be 0f03 	cmp.w	lr, #3
  40fb68:	4419      	add	r1, r3

0040fb6a <.LVL14>:
  40fb6a:	4403      	add	r3, r0

0040fb6c <.LVL15>:
  40fb6c:	d921      	bls.n	40fbb2 <.LVL29>
  40fb6e:	1f1e      	subs	r6, r3, #4
  40fb70:	460d      	mov	r5, r1
  40fb72:	4674      	mov	r4, lr

0040fb74 <.LVL16>:
  40fb74:	3c04      	subs	r4, #4

0040fb76 <.LVL17>:
  40fb76:	f855 7b04 	ldr.w	r7, [r5], #4

0040fb7a <.LVL18>:
  40fb7a:	f846 7f04 	str.w	r7, [r6, #4]!
  40fb7e:	2c03      	cmp	r4, #3
  40fb80:	d8f8      	bhi.n	40fb74 <.LVL16>
  40fb82:	f1ae 0404 	sub.w	r4, lr, #4

0040fb86 <.LVL19>:
  40fb86:	f024 0403 	bic.w	r4, r4, #3
  40fb8a:	3404      	adds	r4, #4
  40fb8c:	4421      	add	r1, r4
  40fb8e:	4423      	add	r3, r4
  40fb90:	f002 0203 	and.w	r2, r2, #3

0040fb94 <.LVL20>:
  40fb94:	b162      	cbz	r2, 40fbb0 <.LVL28>

0040fb96 <.LVL21>:
  40fb96:	3b01      	subs	r3, #1

0040fb98 <.LVL22>:
  40fb98:	440a      	add	r2, r1

0040fb9a <.LVL23>:
  40fb9a:	f811 4b01 	ldrb.w	r4, [r1], #1

0040fb9e <.LVL24>:
  40fb9e:	f803 4f01 	strb.w	r4, [r3, #1]!

0040fba2 <.LVL25>:
  40fba2:	428a      	cmp	r2, r1
  40fba4:	d1f9      	bne.n	40fb9a <.LVL23>

0040fba6 <.LVL26>:
  40fba6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0040fba8 <.LVL27>:
  40fba8:	4603      	mov	r3, r0
  40fbaa:	e7f3      	b.n	40fb94 <.LVL20>
  40fbac:	4603      	mov	r3, r0
  40fbae:	e7f2      	b.n	40fb96 <.LVL21>

0040fbb0 <.LVL28>:
  40fbb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0040fbb2 <.LVL29>:
  40fbb2:	4672      	mov	r2, lr
  40fbb4:	e7ee      	b.n	40fb94 <.LVL20>

0040fbb6 <.LFE17>:
  40fbb6:	bf00      	nop

Disassembly of section .rodata.__mprec_tens%100:

0040fbb8 <__mprec_tens>:
  40fbb8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  40fbc8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  40fbd8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  40fbe8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  40fbf8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  40fc08:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  40fc18:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  40fc28:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  40fc38:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  40fc48:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  40fc58:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  40fc68:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  40fc78:	9db4 79d9 7843 44ea                         ...yCx.D

Disassembly of section .text.wc_Md5Final%101:

0040fc80 <wc_Md5Final>:

int wc_Md5Final(Md5* md5, byte* hash)
{
    byte* local;

    if (md5 == NULL || hash == NULL) {
  40fc80:	2800      	cmp	r0, #0
  40fc82:	d059      	beq.n	40fd38 <.LCFI7>
{
  40fc84:	b570      	push	{r4, r5, r6, lr}

0040fc86 <.LCFI6>:
  40fc86:	4604      	mov	r4, r0
    if (md5 == NULL || hash == NULL) {
  40fc88:	2900      	cmp	r1, #0
  40fc8a:	d052      	beq.n	40fd32 <.LVL364>
        return IntelQaSymMd5(&md5->asyncDev, hash, NULL, MD5_DIGEST_SIZE);
    #endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    local = (byte*)md5->buffer;
  40fc8c:	f100 060c 	add.w	r6, r0, #12

0040fc90 <.LVL351>:

    AddMd5Length(md5, md5->buffLen);  /* before adding pads */
  40fc90:	6803      	ldr	r3, [r0, #0]

0040fc92 <.LBB151>:
    word32 tmp = md5->loLen;
  40fc92:	6840      	ldr	r0, [r0, #4]

0040fc94 <.LVL353>:
    if ((md5->loLen += len) < tmp) {
  40fc94:	181a      	adds	r2, r3, r0
  40fc96:	6062      	str	r2, [r4, #4]
  40fc98:	4290      	cmp	r0, r2
  40fc9a:	d902      	bls.n	40fca2 <.LVL353+0xe>
        md5->hiLen++;                       /* carry low to high */
  40fc9c:	68a2      	ldr	r2, [r4, #8]
  40fc9e:	3201      	adds	r2, #1
  40fca0:	60a2      	str	r2, [r4, #8]
  40fca2:	460d      	mov	r5, r1

0040fca4 <.LBE151>:
    local[md5->buffLen++] = 0x80;  /* add 1 */
  40fca4:	1c5a      	adds	r2, r3, #1
  40fca6:	6022      	str	r2, [r4, #0]
  40fca8:	2280      	movs	r2, #128	; 0x80
  40fcaa:	54f2      	strb	r2, [r6, r3]

    /* pad with zeros */
    if (md5->buffLen > MD5_PAD_SIZE) {
  40fcac:	6820      	ldr	r0, [r4, #0]
  40fcae:	2838      	cmp	r0, #56	; 0x38
  40fcb0:	d831      	bhi.n	40fd16 <.LVL360>

0040fcb2 <.LVL355>:
        ByteReverseWords(md5->buffer, md5->buffer, MD5_BLOCK_SIZE);
    #endif
        XTRANSFORM(md5, local);
        md5->buffLen = 0;
    }
    XMEMSET(&local[md5->buffLen], 0, MD5_PAD_SIZE - md5->buffLen);
  40fcb2:	6820      	ldr	r0, [r4, #0]
  40fcb4:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
  40fcb8:	2100      	movs	r1, #0
  40fcba:	4430      	add	r0, r6
  40fcbc:	f000 ffe0 	bl	410c80 <memset>

0040fcc0 <.LVL356>:
#if defined(BIG_ENDIAN_ORDER) && !defined(FREESCALE_MMCAU_SHA)
    ByteReverseWords(md5->buffer, md5->buffer, MD5_BLOCK_SIZE);
#endif

    /* put lengths in bits */
    md5->hiLen = (md5->loLen >> (8*sizeof(md5->loLen) - 3)) +
  40fcc0:	6863      	ldr	r3, [r4, #4]
                 (md5->hiLen << 3);
  40fcc2:	68a1      	ldr	r1, [r4, #8]
    md5->hiLen = (md5->loLen >> (8*sizeof(md5->loLen) - 3)) +
  40fcc4:	0f5a      	lsrs	r2, r3, #29
  40fcc6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
  40fcca:	60a2      	str	r2, [r4, #8]
    md5->loLen = md5->loLen << 3;
  40fccc:	00db      	lsls	r3, r3, #3
  40fcce:	6063      	str	r3, [r4, #4]

    /* store lengths */
    /* ! length ordering dependent on digest endian type ! */
    XMEMCPY(&local[MD5_PAD_SIZE], &md5->loLen, sizeof(word32));
  40fcd0:	6463      	str	r3, [r4, #68]	; 0x44
    XMEMCPY(&local[MD5_PAD_SIZE + sizeof(word32)], &md5->hiLen, sizeof(word32));
  40fcd2:	64a2      	str	r2, [r4, #72]	; 0x48

    /* final transform and result to hash */
    XTRANSFORM(md5, local);
  40fcd4:	4620      	mov	r0, r4
  40fcd6:	f7f9 fffb 	bl	409cd0 <Transform>

0040fcda <.LVL357>:
#ifdef BIG_ENDIAN_ORDER
    ByteReverseWords(md5->digest, md5->digest, MD5_DIGEST_SIZE);
#endif
    XMEMCPY(hash, md5->digest, MD5_DIGEST_SIZE);
  40fcda:	4623      	mov	r3, r4
  40fcdc:	f853 0f4c 	ldr.w	r0, [r3, #76]!
  40fce0:	6859      	ldr	r1, [r3, #4]
  40fce2:	689a      	ldr	r2, [r3, #8]
  40fce4:	68db      	ldr	r3, [r3, #12]
  40fce6:	6028      	str	r0, [r5, #0]
  40fce8:	6069      	str	r1, [r5, #4]
  40fcea:	60aa      	str	r2, [r5, #8]
  40fcec:	60eb      	str	r3, [r5, #12]

0040fcee <.LBB153>:
    md5->digest[0] = 0x67452301L;
  40fcee:	4b14      	ldr	r3, [pc, #80]	; (40fd40 <.LVL367+0x4>)
  40fcf0:	64e3      	str	r3, [r4, #76]	; 0x4c
    md5->digest[1] = 0xefcdab89L;
  40fcf2:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
  40fcf6:	6523      	str	r3, [r4, #80]	; 0x50
    md5->digest[2] = 0x98badcfeL;
  40fcf8:	f103 4329 	add.w	r3, r3, #2835349504	; 0xa9000000
  40fcfc:	f5a3 1396 	sub.w	r3, r3, #1228800	; 0x12c000
  40fd00:	f6a3 638b 	subw	r3, r3, #3723	; 0xe8b
  40fd04:	6563      	str	r3, [r4, #84]	; 0x54
    md5->digest[3] = 0x10325476L;
  40fd06:	f1a3 3388 	sub.w	r3, r3, #2290649224	; 0x88888888
  40fd0a:	65a3      	str	r3, [r4, #88]	; 0x58
    md5->buffLen = 0;
  40fd0c:	2000      	movs	r0, #0
  40fd0e:	6020      	str	r0, [r4, #0]
    md5->loLen   = 0;
  40fd10:	6060      	str	r0, [r4, #4]
    md5->hiLen   = 0;
  40fd12:	60a0      	str	r0, [r4, #8]

0040fd14 <.LBE153>:

    return _InitMd5(md5); /* reset state */
  40fd14:	bd70      	pop	{r4, r5, r6, pc}

0040fd16 <.LVL360>:
        XMEMSET(&local[md5->buffLen], 0, MD5_BLOCK_SIZE - md5->buffLen);
  40fd16:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
  40fd1a:	2100      	movs	r1, #0

0040fd1c <.LVL361>:
  40fd1c:	4430      	add	r0, r6
  40fd1e:	f000 ffaf 	bl	410c80 <memset>

0040fd22 <.LVL362>:
        md5->buffLen += MD5_BLOCK_SIZE - md5->buffLen;
  40fd22:	2340      	movs	r3, #64	; 0x40
  40fd24:	6023      	str	r3, [r4, #0]
        XTRANSFORM(md5, local);
  40fd26:	4620      	mov	r0, r4
  40fd28:	f7f9 ffd2 	bl	409cd0 <Transform>

0040fd2c <.LVL363>:
        md5->buffLen = 0;
  40fd2c:	2300      	movs	r3, #0
  40fd2e:	6023      	str	r3, [r4, #0]
  40fd30:	e7bf      	b.n	40fcb2 <.LVL355>

0040fd32 <.LVL364>:
        return BAD_FUNC_ARG;
  40fd32:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040fd36 <.LVL365>:
}
  40fd36:	bd70      	pop	{r4, r5, r6, pc}

0040fd38 <.LCFI7>:
        return BAD_FUNC_ARG;
  40fd38:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0040fd3c <.LVL367>:
  40fd3c:	4770      	bx	lr
  40fd3e:	bf00      	nop
  40fd40:	67452301 	.word	0x67452301

Disassembly of section .text.des_test%102:

0040fd44 <des_test>:
{
  40fd44:	b570      	push	{r4, r5, r6, lr}

0040fd46 <.LCFI37>:
  40fd46:	b0e4      	sub	sp, #400	; 0x190

0040fd48 <.LCFI38>:
    const byte exp_pt[] = { /* "now is the time for all " w/o trailing 0 */
  40fd48:	4c2c      	ldr	r4, [pc, #176]	; (40fdfc <.LCFI39+0x2>)
  40fd4a:	ad5e      	add	r5, sp, #376	; 0x178
  40fd4c:	f8d4 0710 	ldr.w	r0, [r4, #1808]	; 0x710
  40fd50:	f8d4 1714 	ldr.w	r1, [r4, #1812]	; 0x714
  40fd54:	f8d4 2718 	ldr.w	r2, [r4, #1816]	; 0x718
  40fd58:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
  40fd5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  40fd5e:	f8d4 0720 	ldr.w	r0, [r4, #1824]	; 0x720
  40fd62:	f8d4 1724 	ldr.w	r1, [r4, #1828]	; 0x724
  40fd66:	c503      	stmia	r5!, {r0, r1}
    const byte key[] =
  40fd68:	ab08      	add	r3, sp, #32
  40fd6a:	f8d4 0728 	ldr.w	r0, [r4, #1832]	; 0x728
  40fd6e:	f8d4 172c 	ldr.w	r1, [r4, #1836]	; 0x72c
  40fd72:	c303      	stmia	r3!, {r0, r1}
    const byte iv[] =
  40fd74:	ab06      	add	r3, sp, #24
  40fd76:	f8d4 0730 	ldr.w	r0, [r4, #1840]	; 0x730
  40fd7a:	f8d4 1734 	ldr.w	r1, [r4, #1844]	; 0x734
  40fd7e:	c303      	stmia	r3!, {r0, r1}
    const byte exp_ct[] =
  40fd80:	466d      	mov	r5, sp
  40fd82:	f8d4 0738 	ldr.w	r0, [r4, #1848]	; 0x738
  40fd86:	f8d4 173c 	ldr.w	r1, [r4, #1852]	; 0x73c
  40fd8a:	f8d4 2740 	ldr.w	r2, [r4, #1856]	; 0x740
  40fd8e:	f8d4 3744 	ldr.w	r3, [r4, #1860]	; 0x744
  40fd92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  40fd94:	f8d4 0748 	ldr.w	r0, [r4, #1864]	; 0x748
  40fd98:	f8d4 174c 	ldr.w	r1, [r4, #1868]	; 0x74c
  40fd9c:	c503      	stmia	r5!, {r0, r1}
    appData.des_test_result = 0;
  40fd9e:	2300      	movs	r3, #0
  40fda0:	4a17      	ldr	r2, [pc, #92]	; (40fe00 <.LCFI39+0x6>)
  40fda2:	62d3      	str	r3, [r2, #44]	; 0x2c
    wc_Des_SetKey(&enc, key, iv, DES_ENCRYPTION);
  40fda4:	aa06      	add	r2, sp, #24
  40fda6:	a908      	add	r1, sp, #32
  40fda8:	a82e      	add	r0, sp, #184	; 0xb8
  40fdaa:	f002 feab 	bl	412b04 <.LFE166>

0040fdae <.LVL81>:
    wc_Des_CbcEncrypt(&enc, gen_ct, exp_pt, sizeof(exp_pt));
  40fdae:	2318      	movs	r3, #24
  40fdb0:	aa5e      	add	r2, sp, #376	; 0x178
  40fdb2:	a952      	add	r1, sp, #328	; 0x148
  40fdb4:	a82e      	add	r0, sp, #184	; 0xb8
  40fdb6:	f001 fbf9 	bl	4115ac <.LFE19>

0040fdba <.LVL82>:
    wc_Des_SetKey(&dec, key, iv, DES_DECRYPTION);
  40fdba:	2301      	movs	r3, #1
  40fdbc:	aa06      	add	r2, sp, #24
  40fdbe:	a908      	add	r1, sp, #32
  40fdc0:	a80a      	add	r0, sp, #40	; 0x28
  40fdc2:	f002 fe9f 	bl	412b04 <.LFE166>

0040fdc6 <.LVL83>:
    wc_Des_CbcDecrypt(&dec, gen_pt, exp_ct, sizeof(exp_ct));
  40fdc6:	2318      	movs	r3, #24
  40fdc8:	466a      	mov	r2, sp
  40fdca:	a958      	add	r1, sp, #352	; 0x160
  40fdcc:	a80a      	add	r0, sp, #40	; 0x28
  40fdce:	f001 f95f 	bl	411090 <.LFE11>

0040fdd2 <.LVL84>:
    if (memcmp(gen_pt, exp_pt, sizeof(gen_pt)))
  40fdd2:	2218      	movs	r2, #24
  40fdd4:	a95e      	add	r1, sp, #376	; 0x178
  40fdd6:	a858      	add	r0, sp, #352	; 0x160
  40fdd8:	f001 ff76 	bl	411cc8 <memcmp>

0040fddc <.LVL85>:
  40fddc:	b110      	cbz	r0, 40fde4 <.LVL85+0x8>
        appData.des_test_result = 2;
  40fdde:	2202      	movs	r2, #2
  40fde0:	4b07      	ldr	r3, [pc, #28]	; (40fe00 <.LCFI39+0x6>)
  40fde2:	62da      	str	r2, [r3, #44]	; 0x2c
    if (memcmp(gen_ct, exp_ct, sizeof(gen_ct)))
  40fde4:	2218      	movs	r2, #24
  40fde6:	4669      	mov	r1, sp
  40fde8:	a852      	add	r0, sp, #328	; 0x148
  40fdea:	f001 ff6d 	bl	411cc8 <memcmp>

0040fdee <.LVL86>:
  40fdee:	b118      	cbz	r0, 40fdf8 <.LVL86+0xa>
        appData.des_test_result++;
  40fdf0:	4a03      	ldr	r2, [pc, #12]	; (40fe00 <.LCFI39+0x6>)
  40fdf2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  40fdf4:	3301      	adds	r3, #1
  40fdf6:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  40fdf8:	b064      	add	sp, #400	; 0x190

0040fdfa <.LCFI39>:
  40fdfa:	bd70      	pop	{r4, r5, r6, pc}
  40fdfc:	004089cc 	.word	0x004089cc
  40fe00:	2040db08 	.word	0x2040db08

Disassembly of section .text.sha_test%103:

0040fe04 <sha_test>:
{
  40fe04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

0040fe08 <.LCFI6>:
  40fe08:	b097      	sub	sp, #92	; 0x5c

0040fe0a <.LCFI7>:
  40fe0a:	af00      	add	r7, sp, #0

0040fe0c <.LCFI8>:
  40fe0c:	f5ad 7d20 	sub.w	sp, sp, #640	; 0x280
  40fe10:	f10d 057f 	add.w	r5, sp, #127	; 0x7f
  40fe14:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
    test_sha[0] = d;
  40fe18:	4b27      	ldr	r3, [pc, #156]	; (40feb8 <.LCFI10+0x4>)
  40fe1a:	f503 7298 	add.w	r2, r3, #304	; 0x130
  40fe1e:	607a      	str	r2, [r7, #4]
  40fe20:	f503 72da 	add.w	r2, r3, #436	; 0x1b4
  40fe24:	60ba      	str	r2, [r7, #8]
  40fe26:	2280      	movs	r2, #128	; 0x80
  40fe28:	60fa      	str	r2, [r7, #12]
  40fe2a:	2214      	movs	r2, #20
  40fe2c:	613a      	str	r2, [r7, #16]
    test_sha[1] = b;
  40fe2e:	f503 71e6 	add.w	r1, r3, #460	; 0x1cc
  40fe32:	6179      	str	r1, [r7, #20]
  40fe34:	f503 7102 	add.w	r1, r3, #520	; 0x208
  40fe38:	61b9      	str	r1, [r7, #24]
  40fe3a:	2138      	movs	r1, #56	; 0x38
  40fe3c:	61f9      	str	r1, [r7, #28]
  40fe3e:	623a      	str	r2, [r7, #32]
    test_sha[2] = c;
  40fe40:	f503 7108 	add.w	r1, r3, #544	; 0x220
  40fe44:	6279      	str	r1, [r7, #36]	; 0x24
  40fe46:	f503 7119 	add.w	r1, r3, #612	; 0x264
  40fe4a:	62b9      	str	r1, [r7, #40]	; 0x28
  40fe4c:	2140      	movs	r1, #64	; 0x40
  40fe4e:	62f9      	str	r1, [r7, #44]	; 0x2c
  40fe50:	633a      	str	r2, [r7, #48]	; 0x30
    test_sha[3] = a;
  40fe52:	f103 0108 	add.w	r1, r3, #8
  40fe56:	6379      	str	r1, [r7, #52]	; 0x34
  40fe58:	f503 731f 	add.w	r3, r3, #636	; 0x27c
  40fe5c:	63bb      	str	r3, [r7, #56]	; 0x38
  40fe5e:	2303      	movs	r3, #3
  40fe60:	63fb      	str	r3, [r7, #60]	; 0x3c
  40fe62:	643a      	str	r2, [r7, #64]	; 0x40
    CRYPT_SHA_Initialize(&sha);
  40fe64:	4628      	mov	r0, r5
  40fe66:	f002 ffe7 	bl	412e38 <.LFE15>

0040fe6a <.LVL14>:
    appData.sha_test_result = 0;
  40fe6a:	2200      	movs	r2, #0
  40fe6c:	4b13      	ldr	r3, [pc, #76]	; (40febc <.LCFI10+0x8>)
  40fe6e:	609a      	str	r2, [r3, #8]

0040fe70 <.LVL15>:
  40fe70:	1d3c      	adds	r4, r7, #4
  40fe72:	f107 0944 	add.w	r9, r7, #68	; 0x44
        if (memcmp(hash, test_sha[i].output, SHA_DIGEST_SIZE) != 0)
  40fe76:	f04f 0814 	mov.w	r8, #20
            appData.sha_test_result++;
  40fe7a:	461e      	mov	r6, r3
  40fe7c:	e002      	b.n	40fe84 <.LVL16+0x6>

0040fe7e <.LVL16>:
  40fe7e:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  40fe80:	454c      	cmp	r4, r9
  40fe82:	d015      	beq.n	40feb0 <.LVL19+0xc>
        CRYPT_SHA_DataAdd(&sha, (byte*)test_sha[i].input, (word32)test_sha[i].inLen);
  40fe84:	68a2      	ldr	r2, [r4, #8]
  40fe86:	6821      	ldr	r1, [r4, #0]
  40fe88:	4628      	mov	r0, r5
  40fe8a:	f002 feb3 	bl	412bf4 <.LFE3>

0040fe8e <.LVL17>:
        CRYPT_SHA_Finalize(&sha, hash);
  40fe8e:	f107 0144 	add.w	r1, r7, #68	; 0x44
  40fe92:	4628      	mov	r0, r5
  40fe94:	f002 feba 	bl	412c0c <.LFE6>

0040fe98 <.LVL18>:
        if (memcmp(hash, test_sha[i].output, SHA_DIGEST_SIZE) != 0)
  40fe98:	4642      	mov	r2, r8
  40fe9a:	6861      	ldr	r1, [r4, #4]
  40fe9c:	f107 0044 	add.w	r0, r7, #68	; 0x44
  40fea0:	f001 ff12 	bl	411cc8 <memcmp>

0040fea4 <.LVL19>:
  40fea4:	2800      	cmp	r0, #0
  40fea6:	d0ea      	beq.n	40fe7e <.LVL16>
            appData.sha_test_result++;
  40fea8:	68b3      	ldr	r3, [r6, #8]
  40feaa:	3301      	adds	r3, #1
  40feac:	60b3      	str	r3, [r6, #8]
  40feae:	e7e6      	b.n	40fe7e <.LVL16>
}
  40feb0:	375c      	adds	r7, #92	; 0x5c

0040feb2 <.LCFI9>:
  40feb2:	46bd      	mov	sp, r7

0040feb4 <.LCFI10>:
  40feb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40feb8:	004089cc 	.word	0x004089cc
  40febc:	2040db08 	.word	0x2040db08

Disassembly of section .text.strcpy%104:

0040fec0 <strcpy>:
  40fec0:	ea80 0201 	eor.w	r2, r0, r1
  40fec4:	4684      	mov	ip, r0
  40fec6:	f012 0f03 	tst.w	r2, #3
  40feca:	d14f      	bne.n	40ff6c <strcpy+0xac>
  40fecc:	f011 0f03 	tst.w	r1, #3
  40fed0:	d132      	bne.n	40ff38 <strcpy+0x78>
  40fed2:	f84d 4d04 	str.w	r4, [sp, #-4]!
  40fed6:	f011 0f04 	tst.w	r1, #4
  40feda:	f851 3b04 	ldr.w	r3, [r1], #4
  40fede:	d00b      	beq.n	40fef8 <strcpy+0x38>
  40fee0:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  40fee4:	439a      	bics	r2, r3
  40fee6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40feea:	bf04      	itt	eq
  40feec:	f84c 3b04 	streq.w	r3, [ip], #4
  40fef0:	f851 3b04 	ldreq.w	r3, [r1], #4
  40fef4:	d116      	bne.n	40ff24 <strcpy+0x64>
  40fef6:	bf00      	nop
  40fef8:	f851 4b04 	ldr.w	r4, [r1], #4
  40fefc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  40ff00:	439a      	bics	r2, r3
  40ff02:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40ff06:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  40ff0a:	d10b      	bne.n	40ff24 <strcpy+0x64>
  40ff0c:	f84c 3b04 	str.w	r3, [ip], #4
  40ff10:	43a2      	bics	r2, r4
  40ff12:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40ff16:	bf04      	itt	eq
  40ff18:	f851 3b04 	ldreq.w	r3, [r1], #4
  40ff1c:	f84c 4b04 	streq.w	r4, [ip], #4
  40ff20:	d0ea      	beq.n	40fef8 <strcpy+0x38>
  40ff22:	4623      	mov	r3, r4
  40ff24:	f80c 3b01 	strb.w	r3, [ip], #1
  40ff28:	f013 0fff 	tst.w	r3, #255	; 0xff
  40ff2c:	ea4f 2333 	mov.w	r3, r3, ror #8
  40ff30:	d1f8      	bne.n	40ff24 <strcpy+0x64>
  40ff32:	f85d 4b04 	ldr.w	r4, [sp], #4
  40ff36:	4770      	bx	lr
  40ff38:	f011 0f01 	tst.w	r1, #1
  40ff3c:	d006      	beq.n	40ff4c <strcpy+0x8c>
  40ff3e:	f811 2b01 	ldrb.w	r2, [r1], #1
  40ff42:	f80c 2b01 	strb.w	r2, [ip], #1
  40ff46:	2a00      	cmp	r2, #0
  40ff48:	bf08      	it	eq
  40ff4a:	4770      	bxeq	lr
  40ff4c:	f011 0f02 	tst.w	r1, #2
  40ff50:	d0bf      	beq.n	40fed2 <strcpy+0x12>
  40ff52:	f831 2b02 	ldrh.w	r2, [r1], #2
  40ff56:	f012 0fff 	tst.w	r2, #255	; 0xff
  40ff5a:	bf16      	itet	ne
  40ff5c:	f82c 2b02 	strhne.w	r2, [ip], #2
  40ff60:	f88c 2000 	strbeq.w	r2, [ip]
  40ff64:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  40ff68:	d1b3      	bne.n	40fed2 <strcpy+0x12>
  40ff6a:	4770      	bx	lr
  40ff6c:	f811 2b01 	ldrb.w	r2, [r1], #1
  40ff70:	f80c 2b01 	strb.w	r2, [ip], #1
  40ff74:	2a00      	cmp	r2, #0
  40ff76:	d1f9      	bne.n	40ff6c <strcpy+0xac>
  40ff78:	4770      	bx	lr

0040ff7a <.LFE0>:
  40ff7a:	bf00      	nop

Disassembly of section .text.__d2b%105:

0040ff7c <__d2b>:
  40ff7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

0040ff80 <.LCFI17>:
  40ff80:	ec57 6b10 	vmov	r6, r7, d0
  40ff84:	b083      	sub	sp, #12

0040ff86 <.LCFI18>:
  40ff86:	4688      	mov	r8, r1
  40ff88:	2101      	movs	r1, #1

0040ff8a <.LVL324>:
  40ff8a:	463c      	mov	r4, r7
  40ff8c:	f3c7 550a 	ubfx	r5, r7, #20, #11
  40ff90:	4617      	mov	r7, r2
  40ff92:	f001 fffb 	bl	411f8c <.LFE2>

0040ff96 <.LVL326>:
  40ff96:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40ff9a:	4681      	mov	r9, r0

0040ff9c <.LVL327>:
  40ff9c:	b10d      	cbz	r5, 40ffa2 <.LVL327+0x6>
  40ff9e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40ffa2:	9401      	str	r4, [sp, #4]
  40ffa4:	b31e      	cbz	r6, 40ffee <.LCFI20>
  40ffa6:	a802      	add	r0, sp, #8

0040ffa8 <.LVL328>:
  40ffa8:	f840 6d08 	str.w	r6, [r0, #-8]!
  40ffac:	f001 febc 	bl	411d28 <__lo0bits>

0040ffb0 <.LVL329>:
  40ffb0:	2800      	cmp	r0, #0
  40ffb2:	d134      	bne.n	41001e <.LCFI22>
  40ffb4:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40ffb8:	f8c9 2014 	str.w	r2, [r9, #20]
  40ffbc:	2b00      	cmp	r3, #0
  40ffbe:	bf0c      	ite	eq
  40ffc0:	2101      	moveq	r1, #1
  40ffc2:	2102      	movne	r1, #2
  40ffc4:	f8c9 3018 	str.w	r3, [r9, #24]
  40ffc8:	f8c9 1010 	str.w	r1, [r9, #16]

0040ffcc <.LVL330>:
  40ffcc:	b9dd      	cbnz	r5, 410006 <.LVL338+0x4>
  40ffce:	eb09 0381 	add.w	r3, r9, r1, lsl #2
  40ffd2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432

0040ffd6 <.LVL331>:
  40ffd6:	f8c8 0000 	str.w	r0, [r8]
  40ffda:	6918      	ldr	r0, [r3, #16]

0040ffdc <.LVL332>:
  40ffdc:	f002 f9d6 	bl	41238c <.LFE3>

0040ffe0 <.LVL333>:
  40ffe0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40ffe4:	6038      	str	r0, [r7, #0]
  40ffe6:	4648      	mov	r0, r9
  40ffe8:	b003      	add	sp, #12

0040ffea <.LCFI19>:
  40ffea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0040ffee <.LCFI20>:
  40ffee:	a801      	add	r0, sp, #4

0040fff0 <.LVL335>:
  40fff0:	f001 fe9a 	bl	411d28 <__lo0bits>

0040fff4 <.LVL336>:
  40fff4:	9b01      	ldr	r3, [sp, #4]
  40fff6:	f8c9 3014 	str.w	r3, [r9, #20]
  40fffa:	2101      	movs	r1, #1
  40fffc:	3020      	adds	r0, #32

0040fffe <.LVL337>:
  40fffe:	f8c9 1010 	str.w	r1, [r9, #16]

00410002 <.LVL338>:
  410002:	2d00      	cmp	r5, #0
  410004:	d0e3      	beq.n	40ffce <.LVL330+0x2>
  410006:	f2a5 4533 	subw	r5, r5, #1075	; 0x433

0041000a <.LVL339>:
  41000a:	4405      	add	r5, r0

0041000c <.LVL340>:
  41000c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35

00410010 <.LVL341>:
  410010:	f8c8 5000 	str.w	r5, [r8]
  410014:	6038      	str	r0, [r7, #0]
  410016:	4648      	mov	r0, r9
  410018:	b003      	add	sp, #12

0041001a <.LCFI21>:
  41001a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0041001e <.LCFI22>:
  41001e:	e89d 000a 	ldmia.w	sp, {r1, r3}
  410022:	f1c0 0220 	rsb	r2, r0, #32
  410026:	fa03 f202 	lsl.w	r2, r3, r2
  41002a:	430a      	orrs	r2, r1
  41002c:	40c3      	lsrs	r3, r0
  41002e:	9301      	str	r3, [sp, #4]
  410030:	f8c9 2014 	str.w	r2, [r9, #20]
  410034:	e7c2      	b.n	40ffbc <.LVL329+0xc>

00410036 <.LFE31>:
  410036:	bf00      	nop

Disassembly of section .text.hmac_sha512_test%106:

00410038 <hmac_sha512_test>:
{
  410038:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

0041003c <.LCFI34>:
  41003c:	f5ad 7d2b 	sub.w	sp, sp, #684	; 0x2ac

00410040 <.LCFI35>:
    const char* keys[]=
  410040:	ad0d      	add	r5, sp, #52	; 0x34
  410042:	4b29      	ldr	r3, [pc, #164]	; (4100e8 <.LCFI36+0x6>)
  410044:	f503 629d 	add.w	r2, r3, #1256	; 0x4e8
  410048:	ca07      	ldmia	r2, {r0, r1, r2}
  41004a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    test_hmac[0] = a;
  41004e:	f203 424c 	addw	r2, r3, #1100	; 0x44c
  410052:	9201      	str	r2, [sp, #4]
  410054:	f203 6244 	addw	r2, r3, #1604	; 0x644
  410058:	9202      	str	r2, [sp, #8]
  41005a:	2208      	movs	r2, #8
  41005c:	9203      	str	r2, [sp, #12]
  41005e:	2240      	movs	r2, #64	; 0x40
  410060:	9204      	str	r2, [sp, #16]
    test_hmac[1] = b;
  410062:	f203 416c 	addw	r1, r3, #1132	; 0x46c
  410066:	9105      	str	r1, [sp, #20]
  410068:	f503 61d1 	add.w	r1, r3, #1672	; 0x688
  41006c:	9106      	str	r1, [sp, #24]
  41006e:	211c      	movs	r1, #28
  410070:	9107      	str	r1, [sp, #28]
  410072:	9208      	str	r2, [sp, #32]
    test_hmac[2] = c;
  410074:	f503 6194 	add.w	r1, r3, #1184	; 0x4a0
  410078:	9109      	str	r1, [sp, #36]	; 0x24
  41007a:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
  41007e:	930a      	str	r3, [sp, #40]	; 0x28
  410080:	2332      	movs	r3, #50	; 0x32
  410082:	930b      	str	r3, [sp, #44]	; 0x2c
  410084:	920c      	str	r2, [sp, #48]	; 0x30
    appData.hmac_sha512_test_result = 0;
  410086:	2200      	movs	r2, #0
  410088:	4b18      	ldr	r3, [pc, #96]	; (4100ec <.LCFI36+0xa>)
  41008a:	629a      	str	r2, [r3, #40]	; 0x28

0041008c <.LVL74>:
  41008c:	ac01      	add	r4, sp, #4
  41008e:	46a9      	mov	r9, r5
        wc_HmacSetKey(&hmac, SHA512, (byte*)keys[i], (word32)strlen(keys[i]));
  410090:	f04f 0804 	mov.w	r8, #4
            appData.hmac_sha512_test_result++;
  410094:	461f      	mov	r7, r3
  410096:	e002      	b.n	41009e <.LVL75+0x6>

00410098 <.LVL75>:
  410098:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  41009a:	454c      	cmp	r4, r9
  41009c:	d01f      	beq.n	4100de <.LVL80+0xc>
        wc_HmacSetKey(&hmac, SHA512, (byte*)keys[i], (word32)strlen(keys[i]));
  41009e:	f855 6b04 	ldr.w	r6, [r5], #4
  4100a2:	4630      	mov	r0, r6
  4100a4:	f7ff fbec 	bl	40f880 <.LFE22>

004100a8 <.LVL76>:
  4100a8:	4603      	mov	r3, r0
  4100aa:	4632      	mov	r2, r6
  4100ac:	4641      	mov	r1, r8
  4100ae:	a820      	add	r0, sp, #128	; 0x80
  4100b0:	f7fd f826 	bl	40d100 <wc_HmacSetKey>

004100b4 <.LVL77>:
        wc_HmacUpdate(&hmac, (byte*)test_hmac[i].input,
  4100b4:	68a2      	ldr	r2, [r4, #8]
  4100b6:	6821      	ldr	r1, [r4, #0]
  4100b8:	a820      	add	r0, sp, #128	; 0x80
  4100ba:	f001 f8b5 	bl	411228 <.LFE1>

004100be <.LVL78>:
        wc_HmacFinal(&hmac, hash);
  4100be:	a910      	add	r1, sp, #64	; 0x40
  4100c0:	a820      	add	r0, sp, #128	; 0x80
  4100c2:	f7fd fc0b 	bl	40d8dc <.LFE22>

004100c6 <.LVL79>:
        if (memcmp(hash, test_hmac[i].output, SHA512_DIGEST_SIZE) != 0)
  4100c6:	2240      	movs	r2, #64	; 0x40
  4100c8:	6861      	ldr	r1, [r4, #4]
  4100ca:	eb0d 0002 	add.w	r0, sp, r2
  4100ce:	f001 fdfb 	bl	411cc8 <memcmp>

004100d2 <.LVL80>:
  4100d2:	2800      	cmp	r0, #0
  4100d4:	d0e0      	beq.n	410098 <.LVL75>
            appData.hmac_sha512_test_result++;
  4100d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4100d8:	3301      	adds	r3, #1
  4100da:	62bb      	str	r3, [r7, #40]	; 0x28
  4100dc:	e7dc      	b.n	410098 <.LVL75>
}
  4100de:	f50d 7d2b 	add.w	sp, sp, #684	; 0x2ac

004100e2 <.LCFI36>:
  4100e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4100e6:	bf00      	nop
  4100e8:	004089cc 	.word	0x004089cc
  4100ec:	2040db08 	.word	0x2040db08

Disassembly of section .text.wc_InitSha512_ex%107:

004100f0 <wc_InitSha512_ex>:
        if (sha512 == NULL)
  4100f0:	2800      	cmp	r0, #0
  4100f2:	d035      	beq.n	410160 <.LVL21>
    {
  4100f4:	b430      	push	{r4, r5}

004100f6 <.LCFI4>:
  4100f6:	4603      	mov	r3, r0
        sha512->heap = heap;
  4100f8:	f8c0 10d8 	str.w	r1, [r0, #216]	; 0xd8

004100fc <.LBB679>:
    sha512->digest[0] = W64LIT(0x6a09e667f3bcc908);
  4100fc:	a11a      	add	r1, pc, #104	; (adr r1, 410168 <.LVL22+0x4>)
  4100fe:	e9d1 0100 	ldrd	r0, r1, [r1]

00410102 <.LVL19>:
  410102:	e9c3 0106 	strd	r0, r1, [r3, #24]
    sha512->digest[1] = W64LIT(0xbb67ae8584caa73b);
  410106:	a11a      	add	r1, pc, #104	; (adr r1, 410170 <.LVL22+0xc>)
  410108:	e9d1 0100 	ldrd	r0, r1, [r1]
  41010c:	e9c3 0108 	strd	r0, r1, [r3, #32]
    sha512->digest[2] = W64LIT(0x3c6ef372fe94f82b);
  410110:	a119      	add	r1, pc, #100	; (adr r1, 410178 <.LVL22+0x14>)
  410112:	e9d1 0100 	ldrd	r0, r1, [r1]
  410116:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
    sha512->digest[3] = W64LIT(0xa54ff53a5f1d36f1);
  41011a:	a119      	add	r1, pc, #100	; (adr r1, 410180 <.LVL22+0x1c>)
  41011c:	e9d1 0100 	ldrd	r0, r1, [r1]
  410120:	e9c3 010c 	strd	r0, r1, [r3, #48]	; 0x30
    sha512->digest[4] = W64LIT(0x510e527fade682d1);
  410124:	a118      	add	r1, pc, #96	; (adr r1, 410188 <.LVL22+0x24>)
  410126:	e9d1 0100 	ldrd	r0, r1, [r1]
  41012a:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
    sha512->digest[5] = W64LIT(0x9b05688c2b3e6c1f);
  41012e:	a118      	add	r1, pc, #96	; (adr r1, 410190 <.LVL22+0x2c>)
  410130:	e9d1 0100 	ldrd	r0, r1, [r1]
  410134:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
    sha512->digest[6] = W64LIT(0x1f83d9abfb41bd6b);
  410138:	a117      	add	r1, pc, #92	; (adr r1, 410198 <.LVL22+0x34>)
  41013a:	e9d1 0100 	ldrd	r0, r1, [r1]
  41013e:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
    sha512->digest[7] = W64LIT(0x5be0cd19137e2179);
  410142:	a117      	add	r1, pc, #92	; (adr r1, 4101a0 <.LVL22+0x3c>)
  410144:	e9d1 0100 	ldrd	r0, r1, [r1]
  410148:	e9c3 0114 	strd	r0, r1, [r3, #80]	; 0x50
    sha512->buffLen = 0;
  41014c:	2000      	movs	r0, #0
  41014e:	6018      	str	r0, [r3, #0]
    sha512->loLen   = 0;
  410150:	2400      	movs	r4, #0
  410152:	2500      	movs	r5, #0
  410154:	e9c3 4502 	strd	r4, r5, [r3, #8]
    sha512->hiLen   = 0;
  410158:	e9c3 4504 	strd	r4, r5, [r3, #16]

0041015c <.LBE679>:
    }
  41015c:	bc30      	pop	{r4, r5}

0041015e <.LCFI5>:
  41015e:	4770      	bx	lr

00410160 <.LVL21>:
            return BAD_FUNC_ARG;
  410160:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00410164 <.LVL22>:
  410164:	4770      	bx	lr
  410166:	bf00      	nop
  410168:	f3bcc908 	.word	0xf3bcc908
  41016c:	6a09e667 	.word	0x6a09e667
  410170:	84caa73b 	.word	0x84caa73b
  410174:	bb67ae85 	.word	0xbb67ae85
  410178:	fe94f82b 	.word	0xfe94f82b
  41017c:	3c6ef372 	.word	0x3c6ef372
  410180:	5f1d36f1 	.word	0x5f1d36f1
  410184:	a54ff53a 	.word	0xa54ff53a
  410188:	ade682d1 	.word	0xade682d1
  41018c:	510e527f 	.word	0x510e527f
  410190:	2b3e6c1f 	.word	0x2b3e6c1f
  410194:	9b05688c 	.word	0x9b05688c
  410198:	fb41bd6b 	.word	0xfb41bd6b
  41019c:	1f83d9ab 	.word	0x1f83d9ab
  4101a0:	137e2179 	.word	0x137e2179
  4101a4:	5be0cd19 	.word	0x5be0cd19

Disassembly of section .text.wc_InitSha384_ex%108:

004101a8 <wc_InitSha384_ex>:
#else
int wc_InitSha384_ex(Sha384* sha384, void* heap, int devId)
{
    int ret;

    if (sha384 == NULL) {
  4101a8:	2800      	cmp	r0, #0
  4101aa:	d035      	beq.n	410218 <.LVL142>
{
  4101ac:	b430      	push	{r4, r5}

004101ae <.LCFI19>:
  4101ae:	4603      	mov	r3, r0
        return BAD_FUNC_ARG;
    }

    sha384->heap = heap;
  4101b0:	f8c0 10d8 	str.w	r1, [r0, #216]	; 0xd8

004101b4 <.LBB925>:
    sha384->digest[0] = W64LIT(0xcbbb9d5dc1059ed8);
  4101b4:	a11a      	add	r1, pc, #104	; (adr r1, 410220 <.LVL143+0x4>)
  4101b6:	e9d1 0100 	ldrd	r0, r1, [r1]

004101ba <.LVL140>:
  4101ba:	e9c3 0106 	strd	r0, r1, [r3, #24]
    sha384->digest[1] = W64LIT(0x629a292a367cd507);
  4101be:	a11a      	add	r1, pc, #104	; (adr r1, 410228 <.LVL143+0xc>)
  4101c0:	e9d1 0100 	ldrd	r0, r1, [r1]
  4101c4:	e9c3 0108 	strd	r0, r1, [r3, #32]
    sha384->digest[2] = W64LIT(0x9159015a3070dd17);
  4101c8:	a119      	add	r1, pc, #100	; (adr r1, 410230 <.LVL143+0x14>)
  4101ca:	e9d1 0100 	ldrd	r0, r1, [r1]
  4101ce:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
    sha384->digest[3] = W64LIT(0x152fecd8f70e5939);
  4101d2:	a119      	add	r1, pc, #100	; (adr r1, 410238 <.LVL143+0x1c>)
  4101d4:	e9d1 0100 	ldrd	r0, r1, [r1]
  4101d8:	e9c3 010c 	strd	r0, r1, [r3, #48]	; 0x30
    sha384->digest[4] = W64LIT(0x67332667ffc00b31);
  4101dc:	a118      	add	r1, pc, #96	; (adr r1, 410240 <.LVL143+0x24>)
  4101de:	e9d1 0100 	ldrd	r0, r1, [r1]
  4101e2:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
    sha384->digest[5] = W64LIT(0x8eb44a8768581511);
  4101e6:	a118      	add	r1, pc, #96	; (adr r1, 410248 <.LVL143+0x2c>)
  4101e8:	e9d1 0100 	ldrd	r0, r1, [r1]
  4101ec:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
    sha384->digest[6] = W64LIT(0xdb0c2e0d64f98fa7);
  4101f0:	a117      	add	r1, pc, #92	; (adr r1, 410250 <.LVL143+0x34>)
  4101f2:	e9d1 0100 	ldrd	r0, r1, [r1]
  4101f6:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
    sha384->digest[7] = W64LIT(0x47b5481dbefa4fa4);
  4101fa:	a117      	add	r1, pc, #92	; (adr r1, 410258 <.LVL143+0x3c>)
  4101fc:	e9d1 0100 	ldrd	r0, r1, [r1]
  410200:	e9c3 0114 	strd	r0, r1, [r3, #80]	; 0x50
    sha384->buffLen = 0;
  410204:	2000      	movs	r0, #0
  410206:	6018      	str	r0, [r3, #0]
    sha384->loLen   = 0;
  410208:	2400      	movs	r4, #0
  41020a:	2500      	movs	r5, #0
  41020c:	e9c3 4502 	strd	r4, r5, [r3, #8]
    sha384->hiLen   = 0;
  410210:	e9c3 4504 	strd	r4, r5, [r3, #16]

00410214 <.LBE925>:
#else
    (void)devId;
#endif /* WOLFSSL_ASYNC_CRYPT */

    return ret;
}
  410214:	bc30      	pop	{r4, r5}

00410216 <.LCFI20>:
  410216:	4770      	bx	lr

00410218 <.LVL142>:
        return BAD_FUNC_ARG;
  410218:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041021c <.LVL143>:
  41021c:	4770      	bx	lr
  41021e:	bf00      	nop
  410220:	c1059ed8 	.word	0xc1059ed8
  410224:	cbbb9d5d 	.word	0xcbbb9d5d
  410228:	367cd507 	.word	0x367cd507
  41022c:	629a292a 	.word	0x629a292a
  410230:	3070dd17 	.word	0x3070dd17
  410234:	9159015a 	.word	0x9159015a
  410238:	f70e5939 	.word	0xf70e5939
  41023c:	152fecd8 	.word	0x152fecd8
  410240:	ffc00b31 	.word	0xffc00b31
  410244:	67332667 	.word	0x67332667
  410248:	68581511 	.word	0x68581511
  41024c:	8eb44a87 	.word	0x8eb44a87
  410250:	64f98fa7 	.word	0x64f98fa7
  410254:	db0c2e0d 	.word	0xdb0c2e0d
  410258:	befa4fa4 	.word	0xbefa4fa4
  41025c:	47b5481d 	.word	0x47b5481d

Disassembly of section .text.wc_ShaUpdate%109:

00410260 <wc_ShaUpdate>:
    if (sha == NULL ||(data == NULL && len > 0)) {
  410260:	2800      	cmp	r0, #0
  410262:	d04a      	beq.n	4102fa <.LCFI4>
{
  410264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

00410268 <.LCFI3>:
  410268:	460f      	mov	r7, r1
  41026a:	4616      	mov	r6, r2
  41026c:	4604      	mov	r4, r0
    if (sha == NULL ||(data == NULL && len > 0)) {
  41026e:	b909      	cbnz	r1, 410274 <.LCFI3+0xc>
  410270:	2a00      	cmp	r2, #0
  410272:	d145      	bne.n	410300 <.LCFI5>
    local = (byte*)sha->buffer;
  410274:	f104 080c 	add.w	r8, r4, #12

00410278 <.LVL351>:
    if (sha->buffLen >= SHA_BLOCK_SIZE)
  410278:	6823      	ldr	r3, [r4, #0]
  41027a:	2b3f      	cmp	r3, #63	; 0x3f
  41027c:	d844      	bhi.n	410308 <.LVL367>
    while (len) {
  41027e:	2e00      	cmp	r6, #0
  410280:	d046      	beq.n	410310 <.LVL369>
  410282:	f104 0548 	add.w	r5, r4, #72	; 0x48

00410286 <.LBB771>:
            sha->buffLen = 0;
  410286:	f04f 0900 	mov.w	r9, #0
  41028a:	e002      	b.n	410292 <.LBB782>

0041028c <.LVL352>:
  41028c:	f8c4 9000 	str.w	r9, [r4]

00410290 <.LBE771>:
    while (len) {
  410290:	b386      	cbz	r6, 4102f4 <.LBE780>

00410292 <.LBB782>:
        word32 add = min(len, SHA_BLOCK_SIZE - sha->buffLen);
  410292:	6820      	ldr	r0, [r4, #0]

00410294 <.LVL353>:
  410294:	f1c0 0a40 	rsb	sl, r0, #64	; 0x40

00410298 <.LBB772>:
        return a > b ? b : a;
  410298:	45b2      	cmp	sl, r6
  41029a:	bf28      	it	cs
  41029c:	46b2      	movcs	sl, r6

0041029e <.LBE772>:
        XMEMCPY(&local[sha->buffLen], data, add);
  41029e:	4652      	mov	r2, sl
  4102a0:	4639      	mov	r1, r7
  4102a2:	4440      	add	r0, r8
  4102a4:	f7fe f986 	bl	40e5b4 <.LFE14>

004102a8 <.LVL356>:
        sha->buffLen += add;
  4102a8:	6823      	ldr	r3, [r4, #0]
  4102aa:	4453      	add	r3, sl
  4102ac:	6023      	str	r3, [r4, #0]
        data         += add;
  4102ae:	4457      	add	r7, sl
        len          -= add;
  4102b0:	eba6 060a 	sub.w	r6, r6, sl
        if (sha->buffLen == SHA_BLOCK_SIZE) {
  4102b4:	2b40      	cmp	r3, #64	; 0x40
  4102b6:	d1eb      	bne.n	410290 <.LBE771>
  4102b8:	f104 0108 	add.w	r1, r4, #8

004102bc <.LBB774>:
        out[i] = ByteReverseWord32(in[i]);
  4102bc:	684a      	ldr	r2, [r1, #4]

004102be <.LBB776>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  4102be:	0a13      	lsrs	r3, r2, #8
  4102c0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  4102c4:	0212      	lsls	r2, r2, #8
  4102c6:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
  4102ca:	4313      	orrs	r3, r2

004102cc <.LBB778>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  4102cc:	ea4f 4333 	mov.w	r3, r3, ror #16

004102d0 <.LBE776>:
        out[i] = ByteReverseWord32(in[i]);
  4102d0:	f841 3f04 	str.w	r3, [r1, #4]!
    for (i = 0; i < count; i++)
  4102d4:	42a9      	cmp	r1, r5
  4102d6:	d1f1      	bne.n	4102bc <.LBB774>

004102d8 <.LBE774>:
            XTRANSFORM(sha, local);
  4102d8:	4641      	mov	r1, r8
  4102da:	4620      	mov	r0, r4
  4102dc:	f7f5 ff7c 	bl	4061d8 <Transform>

004102e0 <.LBB780>:
    word32 tmp = sha->loLen;
  4102e0:	6862      	ldr	r2, [r4, #4]

004102e2 <.LVL361>:
    if ( (sha->loLen += len) < tmp)
  4102e2:	f102 0340 	add.w	r3, r2, #64	; 0x40
  4102e6:	6063      	str	r3, [r4, #4]
  4102e8:	429a      	cmp	r2, r3
  4102ea:	d9cf      	bls.n	41028c <.LVL352>
        sha->hiLen++;                       /* carry low to high */
  4102ec:	68a3      	ldr	r3, [r4, #8]
  4102ee:	3301      	adds	r3, #1
  4102f0:	60a3      	str	r3, [r4, #8]
  4102f2:	e7cb      	b.n	41028c <.LVL352>

004102f4 <.LBE780>:
    return 0;
  4102f4:	2000      	movs	r0, #0
  4102f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004102fa <.LCFI4>:
        return BAD_FUNC_ARG;
  4102fa:	f06f 00ac 	mvn.w	r0, #172	; 0xac

004102fe <.LVL364>:
  4102fe:	4770      	bx	lr

00410300 <.LCFI5>:
  410300:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00410304 <.LVL366>:
  410304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00410308 <.LVL367>:
        return BUFFER_E;
  410308:	f06f 0083 	mvn.w	r0, #131	; 0x83

0041030c <.LVL368>:
  41030c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00410310 <.LVL369>:
    return 0;
  410310:	2000      	movs	r0, #0

00410312 <.LVL370>:
}
  410312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

Disassembly of section .text.wc_Sha256Update%110:

00410316 <wc_Sha256Update>:
        if (sha256 == NULL || (data == NULL && len > 0)) {
  410316:	2800      	cmp	r0, #0
  410318:	d04c      	beq.n	4103b4 <.LBB214>

0041031a <.LBE196>:
    {
  41031a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

0041031e <.LCFI5>:
  41031e:	460f      	mov	r7, r1
  410320:	4616      	mov	r6, r2
  410322:	4604      	mov	r4, r0

00410324 <.LBB213>:
        if (sha256 == NULL || (data == NULL && len > 0)) {
  410324:	b909      	cbnz	r1, 41032a <.LBB213+0x6>
  410326:	2a00      	cmp	r2, #0
  410328:	d148      	bne.n	4103bc <.LBB215>
        local = (byte*)sha256->buffer;
  41032a:	f104 0820 	add.w	r8, r4, #32

0041032e <.LVL49>:
        if (sha256->buffLen >= SHA256_BLOCK_SIZE)
  41032e:	6e23      	ldr	r3, [r4, #96]	; 0x60
  410330:	2b3f      	cmp	r3, #63	; 0x3f
  410332:	d846      	bhi.n	4103c2 <.LVL67>
        while (len) {
  410334:	2e00      	cmp	r6, #0
  410336:	d047      	beq.n	4103c8 <.LVL67+0x6>
  410338:	f104 055c 	add.w	r5, r4, #92	; 0x5c

0041033c <.LBB198>:
                sha256->buffLen = 0;
  41033c:	f04f 0900 	mov.w	r9, #0
  410340:	e002      	b.n	410348 <.LBB209>

00410342 <.LVL50>:
  410342:	f8c4 9060 	str.w	r9, [r4, #96]	; 0x60

00410346 <.LBE198>:
        while (len) {
  410346:	b38e      	cbz	r6, 4103ac <.LBE207>

00410348 <.LBB209>:
            word32 add = min(len, SHA256_BLOCK_SIZE - sha256->buffLen);
  410348:	6e20      	ldr	r0, [r4, #96]	; 0x60

0041034a <.LVL52>:
  41034a:	f1c0 0a40 	rsb	sl, r0, #64	; 0x40

0041034e <.LBB199>:
        return a > b ? b : a;
  41034e:	45b2      	cmp	sl, r6
  410350:	bf28      	it	cs
  410352:	46b2      	movcs	sl, r6

00410354 <.LBE199>:
            XMEMCPY(&local[sha256->buffLen], data, add);
  410354:	4652      	mov	r2, sl
  410356:	4639      	mov	r1, r7
  410358:	4440      	add	r0, r8
  41035a:	f7fe f92b 	bl	40e5b4 <.LFE14>

0041035e <.LVL55>:
            sha256->buffLen += add;
  41035e:	6e23      	ldr	r3, [r4, #96]	; 0x60
  410360:	4453      	add	r3, sl
  410362:	6623      	str	r3, [r4, #96]	; 0x60
            data            += add;
  410364:	4457      	add	r7, sl
            len             -= add;
  410366:	eba6 060a 	sub.w	r6, r6, sl
            if (sha256->buffLen == SHA256_BLOCK_SIZE) {
  41036a:	2b40      	cmp	r3, #64	; 0x40
  41036c:	d1eb      	bne.n	410346 <.LBE198>
  41036e:	f104 011c 	add.w	r1, r4, #28

00410372 <.LBB201>:
        out[i] = ByteReverseWord32(in[i]);
  410372:	684a      	ldr	r2, [r1, #4]

00410374 <.LBB203>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  410374:	0a13      	lsrs	r3, r2, #8
  410376:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  41037a:	0212      	lsls	r2, r2, #8
  41037c:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
  410380:	4313      	orrs	r3, r2

00410382 <.LBB205>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  410382:	ea4f 4333 	mov.w	r3, r3, ror #16

00410386 <.LBE203>:
        out[i] = ByteReverseWord32(in[i]);
  410386:	f841 3f04 	str.w	r3, [r1, #4]!
    for (i = 0; i < count; i++)
  41038a:	42a9      	cmp	r1, r5
  41038c:	d1f1      	bne.n	410372 <.LBB201>

0041038e <.LBE201>:
                ret = XTRANSFORM(sha256, local);
  41038e:	4620      	mov	r0, r4
  410390:	f7fb fb86 	bl	40baa0 <.LFE5>

00410394 <.LVL59>:
                if (ret != 0) {
  410394:	4603      	mov	r3, r0
  410396:	b950      	cbnz	r0, 4103ae <.LBE213>

00410398 <.LBB207>:
        word32 tmp = sha256->loLen;
  410398:	6e62      	ldr	r2, [r4, #100]	; 0x64

0041039a <.LVL61>:
        if ( (sha256->loLen += len) < tmp)
  41039a:	f102 0340 	add.w	r3, r2, #64	; 0x40
  41039e:	6663      	str	r3, [r4, #100]	; 0x64
  4103a0:	429a      	cmp	r2, r3
  4103a2:	d9ce      	bls.n	410342 <.LVL50>
            sha256->hiLen++;                       /* carry low to high */
  4103a4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
  4103a6:	3301      	adds	r3, #1
  4103a8:	66a3      	str	r3, [r4, #104]	; 0x68
  4103aa:	e7ca      	b.n	410342 <.LVL50>

004103ac <.LBE207>:
        while (len) {
  4103ac:	2300      	movs	r3, #0

004103ae <.LBE213>:
    }
  4103ae:	4618      	mov	r0, r3
  4103b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004103b4 <.LBB214>:
            return BAD_FUNC_ARG;
  4103b4:	f06f 03ac 	mvn.w	r3, #172	; 0xac

004103b8 <.LBE214>:
    }
  4103b8:	4618      	mov	r0, r3

004103ba <.LVL65>:
  4103ba:	4770      	bx	lr

004103bc <.LBB215>:
            return BAD_FUNC_ARG;
  4103bc:	f06f 03ac 	mvn.w	r3, #172	; 0xac
  4103c0:	e7f5      	b.n	4103ae <.LBE213>

004103c2 <.LVL67>:
            return BUFFER_E;
  4103c2:	f06f 0383 	mvn.w	r3, #131	; 0x83
  4103c6:	e7f2      	b.n	4103ae <.LBE213>
        while (len) {
  4103c8:	2300      	movs	r3, #0

004103ca <.LBE215>:
        return Sha256Update(sha256, data, len);
  4103ca:	e7f0      	b.n	4103ae <.LBE213>

Disassembly of section .text.md5_test%111:

004103cc <md5_test>:
{
  4103cc:	b570      	push	{r4, r5, r6, lr}

004103ce <.LCFI3>:
  4103ce:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218

004103d2 <.LCFI4>:
    test_md5[0] = a;
  4103d2:	4b29      	ldr	r3, [pc, #164]	; (410478 <.LCFI5+0x2>)
  4103d4:	f103 0208 	add.w	r2, r3, #8
  4103d8:	9200      	str	r2, [sp, #0]
  4103da:	f103 020c 	add.w	r2, r3, #12
  4103de:	9201      	str	r2, [sp, #4]
  4103e0:	2203      	movs	r2, #3
  4103e2:	9202      	str	r2, [sp, #8]
  4103e4:	2210      	movs	r2, #16
  4103e6:	9203      	str	r2, [sp, #12]
    test_md5[1] = b;
  4103e8:	f103 0120 	add.w	r1, r3, #32
  4103ec:	9104      	str	r1, [sp, #16]
  4103ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
  4103f2:	9105      	str	r1, [sp, #20]
  4103f4:	210e      	movs	r1, #14
  4103f6:	9106      	str	r1, [sp, #24]
  4103f8:	9207      	str	r2, [sp, #28]
    test_md5[2] = c;
  4103fa:	f103 0144 	add.w	r1, r3, #68	; 0x44
  4103fe:	9108      	str	r1, [sp, #32]
  410400:	f103 0160 	add.w	r1, r3, #96	; 0x60
  410404:	9109      	str	r1, [sp, #36]	; 0x24
  410406:	211a      	movs	r1, #26
  410408:	910a      	str	r1, [sp, #40]	; 0x28
  41040a:	920b      	str	r2, [sp, #44]	; 0x2c
    test_md5[3] = d;
  41040c:	f103 0174 	add.w	r1, r3, #116	; 0x74
  410410:	910c      	str	r1, [sp, #48]	; 0x30
  410412:	f103 01b4 	add.w	r1, r3, #180	; 0xb4
  410416:	910d      	str	r1, [sp, #52]	; 0x34
  410418:	213e      	movs	r1, #62	; 0x3e
  41041a:	910e      	str	r1, [sp, #56]	; 0x38
  41041c:	920f      	str	r2, [sp, #60]	; 0x3c
    test_md5[4] = e;
  41041e:	f103 01c8 	add.w	r1, r3, #200	; 0xc8
  410422:	9110      	str	r1, [sp, #64]	; 0x40
  410424:	f503 738e 	add.w	r3, r3, #284	; 0x11c
  410428:	9311      	str	r3, [sp, #68]	; 0x44
  41042a:	2350      	movs	r3, #80	; 0x50
  41042c:	9312      	str	r3, [sp, #72]	; 0x48
  41042e:	9213      	str	r2, [sp, #76]	; 0x4c
    CRYPT_MD5_Initialize(&md5);
  410430:	a818      	add	r0, sp, #96	; 0x60
  410432:	f002 fcef 	bl	412e14 <.LBE48>

00410436 <.LVL7>:
    appData.md5_test_result = 0;
  410436:	2200      	movs	r2, #0
  410438:	4b10      	ldr	r3, [pc, #64]	; (41047c <.LCFI5+0x6>)
  41043a:	605a      	str	r2, [r3, #4]

0041043c <.LVL8>:
  41043c:	466c      	mov	r4, sp
  41043e:	ad14      	add	r5, sp, #80	; 0x50
            appData.md5_test_result++;
  410440:	461e      	mov	r6, r3
  410442:	e002      	b.n	41044a <.LVL9+0x6>

00410444 <.LVL9>:
  410444:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  410446:	42ac      	cmp	r4, r5
  410448:	d013      	beq.n	410472 <.LVL12+0xc>
        CRYPT_MD5_DataAdd(&md5, (byte*)test_md5[i].input, (word32)test_md5[i].inLen);
  41044a:	68a2      	ldr	r2, [r4, #8]
  41044c:	6821      	ldr	r1, [r4, #0]
  41044e:	a818      	add	r0, sp, #96	; 0x60
  410450:	f002 fbb8 	bl	412bc4 <.LFE162>

00410454 <.LVL10>:
        CRYPT_MD5_Finalize(&md5, hash);
  410454:	a914      	add	r1, sp, #80	; 0x50
  410456:	a818      	add	r0, sp, #96	; 0x60
  410458:	f002 fbc0 	bl	412bdc <.LFE2>

0041045c <.LVL11>:
        if (memcmp(hash, test_md5[i].output, MD5_DIGEST_SIZE) != 0)
  41045c:	2210      	movs	r2, #16
  41045e:	6861      	ldr	r1, [r4, #4]
  410460:	a814      	add	r0, sp, #80	; 0x50
  410462:	f001 fc31 	bl	411cc8 <memcmp>

00410466 <.LVL12>:
  410466:	2800      	cmp	r0, #0
  410468:	d0ec      	beq.n	410444 <.LVL9>
            appData.md5_test_result++;
  41046a:	6873      	ldr	r3, [r6, #4]
  41046c:	3301      	adds	r3, #1
  41046e:	6073      	str	r3, [r6, #4]
  410470:	e7e8      	b.n	410444 <.LVL9>
}
  410472:	f50d 7d06 	add.w	sp, sp, #536	; 0x218

00410476 <.LCFI5>:
  410476:	bd70      	pop	{r4, r5, r6, pc}
  410478:	004089cc 	.word	0x004089cc
  41047c:	2040db08 	.word	0x2040db08

Disassembly of section .text.hmac_md5_test%112:

00410480 <hmac_md5_test>:
{
  410480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

00410484 <.LCFI22>:
  410484:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c

00410488 <.LCFI23>:
    const char* keys[]=
  410488:	ad0d      	add	r5, sp, #52	; 0x34
  41048a:	4b28      	ldr	r3, [pc, #160]	; (41052c <.LCFI24+0x6>)
  41048c:	f503 6288 	add.w	r2, r3, #1088	; 0x440
  410490:	ca07      	ldmia	r2, {r0, r1, r2}
  410492:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    test_hmac[0] = a;
  410496:	f203 424c 	addw	r2, r3, #1100	; 0x44c
  41049a:	9201      	str	r2, [sp, #4]
  41049c:	f503 628b 	add.w	r2, r3, #1112	; 0x458
  4104a0:	9202      	str	r2, [sp, #8]
  4104a2:	2208      	movs	r2, #8
  4104a4:	9203      	str	r2, [sp, #12]
  4104a6:	2210      	movs	r2, #16
  4104a8:	9204      	str	r2, [sp, #16]
    test_hmac[1] = b;
  4104aa:	f203 416c 	addw	r1, r3, #1132	; 0x46c
  4104ae:	9105      	str	r1, [sp, #20]
  4104b0:	f203 418c 	addw	r1, r3, #1164	; 0x48c
  4104b4:	9106      	str	r1, [sp, #24]
  4104b6:	211c      	movs	r1, #28
  4104b8:	9107      	str	r1, [sp, #28]
  4104ba:	9208      	str	r2, [sp, #32]
    test_hmac[2] = c;
  4104bc:	f503 6194 	add.w	r1, r3, #1184	; 0x4a0
  4104c0:	9109      	str	r1, [sp, #36]	; 0x24
  4104c2:	f203 43d4 	addw	r3, r3, #1236	; 0x4d4
  4104c6:	930a      	str	r3, [sp, #40]	; 0x28
  4104c8:	2332      	movs	r3, #50	; 0x32
  4104ca:	930b      	str	r3, [sp, #44]	; 0x2c
  4104cc:	920c      	str	r2, [sp, #48]	; 0x30
    appData.hmac_md5_test_result = 0;
  4104ce:	2200      	movs	r2, #0
  4104d0:	4b17      	ldr	r3, [pc, #92]	; (410530 <.LCFI24+0xa>)
  4104d2:	619a      	str	r2, [r3, #24]

004104d4 <.LVL42>:
  4104d4:	ac01      	add	r4, sp, #4
  4104d6:	46a9      	mov	r9, r5
        wc_HmacSetKey(&hmac, MD5, (byte*)keys[i], (word32)strlen(keys[i]));
  4104d8:	4690      	mov	r8, r2
            appData.hmac_md5_test_result++;
  4104da:	461f      	mov	r7, r3
  4104dc:	e002      	b.n	4104e4 <.LVL43+0x6>

004104de <.LVL43>:
  4104de:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  4104e0:	454c      	cmp	r4, r9
  4104e2:	d01e      	beq.n	410522 <.LVL48+0xc>
        wc_HmacSetKey(&hmac, MD5, (byte*)keys[i], (word32)strlen(keys[i]));
  4104e4:	f855 6b04 	ldr.w	r6, [r5], #4
  4104e8:	4630      	mov	r0, r6
  4104ea:	f7ff f9c9 	bl	40f880 <.LFE22>

004104ee <.LVL44>:
  4104ee:	4603      	mov	r3, r0
  4104f0:	4632      	mov	r2, r6
  4104f2:	4641      	mov	r1, r8
  4104f4:	a814      	add	r0, sp, #80	; 0x50
  4104f6:	f7fc fe03 	bl	40d100 <wc_HmacSetKey>

004104fa <.LVL45>:
        wc_HmacUpdate(&hmac, (byte*)test_hmac[i].input,
  4104fa:	68a2      	ldr	r2, [r4, #8]
  4104fc:	6821      	ldr	r1, [r4, #0]
  4104fe:	a814      	add	r0, sp, #80	; 0x50
  410500:	f000 fe92 	bl	411228 <.LFE1>

00410504 <.LVL46>:
        wc_HmacFinal(&hmac, hash);
  410504:	a910      	add	r1, sp, #64	; 0x40
  410506:	a814      	add	r0, sp, #80	; 0x50
  410508:	f7fd f9e8 	bl	40d8dc <.LFE22>

0041050c <.LVL47>:
        if (memcmp(hash, test_hmac[i].output, MD5_DIGEST_SIZE) != 0)
  41050c:	2210      	movs	r2, #16
  41050e:	6861      	ldr	r1, [r4, #4]
  410510:	a810      	add	r0, sp, #64	; 0x40
  410512:	f001 fbd9 	bl	411cc8 <memcmp>

00410516 <.LVL48>:
  410516:	2800      	cmp	r0, #0
  410518:	d0e1      	beq.n	4104de <.LVL43>
            appData.hmac_md5_test_result++;
  41051a:	69bb      	ldr	r3, [r7, #24]
  41051c:	3301      	adds	r3, #1
  41051e:	61bb      	str	r3, [r7, #24]
  410520:	e7dd      	b.n	4104de <.LVL43>
}
  410522:	f50d 7d1f 	add.w	sp, sp, #636	; 0x27c

00410526 <.LCFI24>:
  410526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  41052a:	bf00      	nop
  41052c:	004089cc 	.word	0x004089cc
  410530:	2040db08 	.word	0x2040db08

Disassembly of section .text.hmac_sha_test%113:

00410534 <hmac_sha_test>:
{
  410534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

00410538 <.LCFI25>:
  410538:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c

0041053c <.LCFI26>:
    const char* keys[]=
  41053c:	ad0c      	add	r5, sp, #48	; 0x30
  41053e:	4b28      	ldr	r3, [pc, #160]	; (4105e0 <.LCFI27+0x4>)
  410540:	f503 629d 	add.w	r2, r3, #1256	; 0x4e8
  410544:	ca07      	ldmia	r2, {r0, r1, r2}
  410546:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    test_hmac[0] = a;
  41054a:	f203 424c 	addw	r2, r3, #1100	; 0x44c
  41054e:	9200      	str	r2, [sp, #0]
  410550:	f203 42f4 	addw	r2, r3, #1268	; 0x4f4
  410554:	9201      	str	r2, [sp, #4]
  410556:	2208      	movs	r2, #8
  410558:	9202      	str	r2, [sp, #8]
  41055a:	2214      	movs	r2, #20
  41055c:	9203      	str	r2, [sp, #12]
    test_hmac[1] = b;
  41055e:	f203 416c 	addw	r1, r3, #1132	; 0x46c
  410562:	9104      	str	r1, [sp, #16]
  410564:	f203 510c 	addw	r1, r3, #1292	; 0x50c
  410568:	9105      	str	r1, [sp, #20]
  41056a:	211c      	movs	r1, #28
  41056c:	9106      	str	r1, [sp, #24]
  41056e:	9207      	str	r2, [sp, #28]
    test_hmac[2] = c;
  410570:	f503 6194 	add.w	r1, r3, #1184	; 0x4a0
  410574:	9108      	str	r1, [sp, #32]
  410576:	f203 5324 	addw	r3, r3, #1316	; 0x524
  41057a:	9309      	str	r3, [sp, #36]	; 0x24
  41057c:	2332      	movs	r3, #50	; 0x32
  41057e:	930a      	str	r3, [sp, #40]	; 0x28
  410580:	920b      	str	r2, [sp, #44]	; 0x2c
    appData.hmac_sha_test_result = 0;
  410582:	2200      	movs	r2, #0
  410584:	4b17      	ldr	r3, [pc, #92]	; (4105e4 <.LCFI27+0x8>)
  410586:	61da      	str	r2, [r3, #28]

00410588 <.LVL50>:
  410588:	466c      	mov	r4, sp
  41058a:	46a9      	mov	r9, r5
        wc_HmacSetKey(&hmac, SHA, (byte*)keys[i], (word32)strlen(keys[i]));
  41058c:	f04f 0801 	mov.w	r8, #1
            appData.hmac_sha_test_result++;
  410590:	461f      	mov	r7, r3
  410592:	e002      	b.n	41059a <.LVL51+0x6>

00410594 <.LVL51>:
  410594:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  410596:	454c      	cmp	r4, r9
  410598:	d01e      	beq.n	4105d8 <.LVL56+0xc>
        wc_HmacSetKey(&hmac, SHA, (byte*)keys[i], (word32)strlen(keys[i]));
  41059a:	f855 6b04 	ldr.w	r6, [r5], #4
  41059e:	4630      	mov	r0, r6
  4105a0:	f7ff f96e 	bl	40f880 <.LFE22>

004105a4 <.LVL52>:
  4105a4:	4603      	mov	r3, r0
  4105a6:	4632      	mov	r2, r6
  4105a8:	4641      	mov	r1, r8
  4105aa:	a814      	add	r0, sp, #80	; 0x50
  4105ac:	f7fc fda8 	bl	40d100 <wc_HmacSetKey>

004105b0 <.LVL53>:
        wc_HmacUpdate(&hmac, (byte*)test_hmac[i].input,
  4105b0:	68a2      	ldr	r2, [r4, #8]
  4105b2:	6821      	ldr	r1, [r4, #0]
  4105b4:	a814      	add	r0, sp, #80	; 0x50
  4105b6:	f000 fe37 	bl	411228 <.LFE1>

004105ba <.LVL54>:
        wc_HmacFinal(&hmac, hash);
  4105ba:	a90f      	add	r1, sp, #60	; 0x3c
  4105bc:	a814      	add	r0, sp, #80	; 0x50
  4105be:	f7fd f98d 	bl	40d8dc <.LFE22>

004105c2 <.LVL55>:
        if (memcmp(hash, test_hmac[i].output, SHA_DIGEST_SIZE) != 0)
  4105c2:	2214      	movs	r2, #20
  4105c4:	6861      	ldr	r1, [r4, #4]
  4105c6:	a80f      	add	r0, sp, #60	; 0x3c
  4105c8:	f001 fb7e 	bl	411cc8 <memcmp>

004105cc <.LVL56>:
  4105cc:	2800      	cmp	r0, #0
  4105ce:	d0e1      	beq.n	410594 <.LVL51>
            appData.hmac_sha_test_result++;
  4105d0:	69fb      	ldr	r3, [r7, #28]
  4105d2:	3301      	adds	r3, #1
  4105d4:	61fb      	str	r3, [r7, #28]
  4105d6:	e7dd      	b.n	410594 <.LVL51>
}
  4105d8:	f50d 7d1f 	add.w	sp, sp, #636	; 0x27c

004105dc <.LCFI27>:
  4105dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4105e0:	004089cc 	.word	0x004089cc
  4105e4:	2040db08 	.word	0x2040db08

Disassembly of section .text.hmac_sha256_test%114:

004105e8 <hmac_sha256_test>:
{
  4105e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

004105ec <.LCFI28>:
  4105ec:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c

004105f0 <.LCFI29>:
    const char* keys[]=
  4105f0:	ad0d      	add	r5, sp, #52	; 0x34
  4105f2:	4b28      	ldr	r3, [pc, #160]	; (410694 <.LCFI30+0x4>)
  4105f4:	f503 629d 	add.w	r2, r3, #1256	; 0x4e8
  4105f8:	ca07      	ldmia	r2, {r0, r1, r2}
  4105fa:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    test_hmac[0] = a;
  4105fe:	f203 424c 	addw	r2, r3, #1100	; 0x44c
  410602:	9201      	str	r2, [sp, #4]
  410604:	f203 523c 	addw	r2, r3, #1340	; 0x53c
  410608:	9202      	str	r2, [sp, #8]
  41060a:	2208      	movs	r2, #8
  41060c:	9203      	str	r2, [sp, #12]
  41060e:	2220      	movs	r2, #32
  410610:	9204      	str	r2, [sp, #16]
    test_hmac[1] = b;
  410612:	f203 416c 	addw	r1, r3, #1132	; 0x46c
  410616:	9105      	str	r1, [sp, #20]
  410618:	f503 61ac 	add.w	r1, r3, #1376	; 0x560
  41061c:	9106      	str	r1, [sp, #24]
  41061e:	211c      	movs	r1, #28
  410620:	9107      	str	r1, [sp, #28]
  410622:	9208      	str	r2, [sp, #32]
    test_hmac[2] = c;
  410624:	f503 6194 	add.w	r1, r3, #1184	; 0x4a0
  410628:	9109      	str	r1, [sp, #36]	; 0x24
  41062a:	f203 5384 	addw	r3, r3, #1412	; 0x584
  41062e:	930a      	str	r3, [sp, #40]	; 0x28
  410630:	2332      	movs	r3, #50	; 0x32
  410632:	930b      	str	r3, [sp, #44]	; 0x2c
  410634:	920c      	str	r2, [sp, #48]	; 0x30
    appData.hmac_sha256_test_result = 0;
  410636:	2200      	movs	r2, #0
  410638:	4b17      	ldr	r3, [pc, #92]	; (410698 <.LCFI30+0x8>)
  41063a:	621a      	str	r2, [r3, #32]

0041063c <.LVL58>:
  41063c:	ac01      	add	r4, sp, #4
  41063e:	46a9      	mov	r9, r5
        wc_HmacSetKey(&hmac, SHA256, (byte*)keys[i], (word32)strlen(keys[i]));
  410640:	f04f 0802 	mov.w	r8, #2
            appData.hmac_sha256_test_result++;
  410644:	461f      	mov	r7, r3
  410646:	e002      	b.n	41064e <.LVL59+0x6>

00410648 <.LVL59>:
  410648:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  41064a:	454c      	cmp	r4, r9
  41064c:	d01e      	beq.n	41068c <.LVL64+0xc>
        wc_HmacSetKey(&hmac, SHA256, (byte*)keys[i], (word32)strlen(keys[i]));
  41064e:	f855 6b04 	ldr.w	r6, [r5], #4
  410652:	4630      	mov	r0, r6
  410654:	f7ff f914 	bl	40f880 <.LFE22>

00410658 <.LVL60>:
  410658:	4603      	mov	r3, r0
  41065a:	4632      	mov	r2, r6
  41065c:	4641      	mov	r1, r8
  41065e:	a818      	add	r0, sp, #96	; 0x60
  410660:	f7fc fd4e 	bl	40d100 <wc_HmacSetKey>

00410664 <.LVL61>:
        wc_HmacUpdate(&hmac, (byte*)test_hmac[i].input,
  410664:	68a2      	ldr	r2, [r4, #8]
  410666:	6821      	ldr	r1, [r4, #0]
  410668:	a818      	add	r0, sp, #96	; 0x60
  41066a:	f000 fddd 	bl	411228 <.LFE1>

0041066e <.LVL62>:
        wc_HmacFinal(&hmac, hash);
  41066e:	a910      	add	r1, sp, #64	; 0x40
  410670:	a818      	add	r0, sp, #96	; 0x60
  410672:	f7fd f933 	bl	40d8dc <.LFE22>

00410676 <.LVL63>:
        if (memcmp(hash, test_hmac[i].output, SHA256_DIGEST_SIZE) != 0)
  410676:	2220      	movs	r2, #32
  410678:	6861      	ldr	r1, [r4, #4]
  41067a:	a810      	add	r0, sp, #64	; 0x40
  41067c:	f001 fb24 	bl	411cc8 <memcmp>

00410680 <.LVL64>:
  410680:	2800      	cmp	r0, #0
  410682:	d0e1      	beq.n	410648 <.LVL59>
            appData.hmac_sha256_test_result++;
  410684:	6a3b      	ldr	r3, [r7, #32]
  410686:	3301      	adds	r3, #1
  410688:	623b      	str	r3, [r7, #32]
  41068a:	e7dd      	b.n	410648 <.LVL59>
}
  41068c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c

00410690 <.LCFI30>:
  410690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  410694:	004089cc 	.word	0x004089cc
  410698:	2040db08 	.word	0x2040db08

Disassembly of section .text.hmac_sha384_test%115:

0041069c <hmac_sha384_test>:
{
  41069c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

004106a0 <.LCFI31>:
  4106a0:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c

004106a4 <.LCFI32>:
    const char* keys[]=
  4106a4:	ad0d      	add	r5, sp, #52	; 0x34
  4106a6:	4b28      	ldr	r3, [pc, #160]	; (410748 <.LCFI33+0x4>)
  4106a8:	f503 629d 	add.w	r2, r3, #1256	; 0x4e8
  4106ac:	ca07      	ldmia	r2, {r0, r1, r2}
  4106ae:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    test_hmac[0] = a;
  4106b2:	f203 424c 	addw	r2, r3, #1100	; 0x44c
  4106b6:	9201      	str	r2, [sp, #4]
  4106b8:	f503 62b5 	add.w	r2, r3, #1448	; 0x5a8
  4106bc:	9202      	str	r2, [sp, #8]
  4106be:	2208      	movs	r2, #8
  4106c0:	9203      	str	r2, [sp, #12]
  4106c2:	2230      	movs	r2, #48	; 0x30
  4106c4:	9204      	str	r2, [sp, #16]
    test_hmac[1] = b;
  4106c6:	f203 416c 	addw	r1, r3, #1132	; 0x46c
  4106ca:	9105      	str	r1, [sp, #20]
  4106cc:	f203 51dc 	addw	r1, r3, #1500	; 0x5dc
  4106d0:	9106      	str	r1, [sp, #24]
  4106d2:	211c      	movs	r1, #28
  4106d4:	9107      	str	r1, [sp, #28]
  4106d6:	9208      	str	r2, [sp, #32]
    test_hmac[2] = c;
  4106d8:	f503 6194 	add.w	r1, r3, #1184	; 0x4a0
  4106dc:	9109      	str	r1, [sp, #36]	; 0x24
  4106de:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
  4106e2:	930a      	str	r3, [sp, #40]	; 0x28
  4106e4:	2332      	movs	r3, #50	; 0x32
  4106e6:	930b      	str	r3, [sp, #44]	; 0x2c
  4106e8:	920c      	str	r2, [sp, #48]	; 0x30
    appData.hmac_sha384_test_result = 0;
  4106ea:	2200      	movs	r2, #0
  4106ec:	4b17      	ldr	r3, [pc, #92]	; (41074c <.LCFI33+0x8>)
  4106ee:	625a      	str	r2, [r3, #36]	; 0x24

004106f0 <.LVL66>:
  4106f0:	ac01      	add	r4, sp, #4
  4106f2:	46a9      	mov	r9, r5
        wc_HmacSetKey(&hmac, SHA384, (byte*)keys[i], (word32)strlen(keys[i]));
  4106f4:	f04f 0805 	mov.w	r8, #5
            appData.hmac_sha384_test_result++;
  4106f8:	461f      	mov	r7, r3
  4106fa:	e002      	b.n	410702 <.LVL67+0x6>

004106fc <.LVL67>:
  4106fc:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  4106fe:	454c      	cmp	r4, r9
  410700:	d01e      	beq.n	410740 <.LVL72+0xc>
        wc_HmacSetKey(&hmac, SHA384, (byte*)keys[i], (word32)strlen(keys[i]));
  410702:	f855 6b04 	ldr.w	r6, [r5], #4
  410706:	4630      	mov	r0, r6
  410708:	f7ff f8ba 	bl	40f880 <.LFE22>

0041070c <.LVL68>:
  41070c:	4603      	mov	r3, r0
  41070e:	4632      	mov	r2, r6
  410710:	4641      	mov	r1, r8
  410712:	a81c      	add	r0, sp, #112	; 0x70
  410714:	f7fc fcf4 	bl	40d100 <wc_HmacSetKey>

00410718 <.LVL69>:
        wc_HmacUpdate(&hmac, (byte*)test_hmac[i].input,
  410718:	68a2      	ldr	r2, [r4, #8]
  41071a:	6821      	ldr	r1, [r4, #0]
  41071c:	a81c      	add	r0, sp, #112	; 0x70
  41071e:	f000 fd83 	bl	411228 <.LFE1>

00410722 <.LVL70>:
        wc_HmacFinal(&hmac, hash);
  410722:	a910      	add	r1, sp, #64	; 0x40
  410724:	a81c      	add	r0, sp, #112	; 0x70
  410726:	f7fd f8d9 	bl	40d8dc <.LFE22>

0041072a <.LVL71>:
        if (memcmp(hash, test_hmac[i].output, SHA384_DIGEST_SIZE) != 0)
  41072a:	2230      	movs	r2, #48	; 0x30
  41072c:	6861      	ldr	r1, [r4, #4]
  41072e:	a810      	add	r0, sp, #64	; 0x40
  410730:	f001 faca 	bl	411cc8 <memcmp>

00410734 <.LVL72>:
  410734:	2800      	cmp	r0, #0
  410736:	d0e1      	beq.n	4106fc <.LVL67>
            appData.hmac_sha384_test_result++;
  410738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  41073a:	3301      	adds	r3, #1
  41073c:	627b      	str	r3, [r7, #36]	; 0x24
  41073e:	e7dd      	b.n	4106fc <.LVL67>
}
  410740:	f50d 7d27 	add.w	sp, sp, #668	; 0x29c

00410744 <.LCFI33>:
  410744:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  410748:	004089cc 	.word	0x004089cc
  41074c:	2040db08 	.word	0x2040db08

Disassembly of section .text.wc_Des3_CbcDecrypt%116:

00410750 <wc_Des3_CbcDecrypt>:

    int wc_Des3_CbcDecrypt(Des3* des, byte* out, const byte* in, word32 sz)
    {
        word32 blocks;

        if (des == NULL || out == NULL || in == NULL) {
  410750:	2a00      	cmp	r2, #0
  410752:	bf18      	it	ne
  410754:	2900      	cmpne	r1, #0
  410756:	d051      	beq.n	4107fc <.LCFI16>
    {
  410758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

0041075c <.LCFI15>:
  41075c:	4682      	mov	sl, r0
  41075e:	460c      	mov	r4, r1
  410760:	4616      	mov	r6, r2
        if (des == NULL || out == NULL || in == NULL) {
  410762:	2800      	cmp	r0, #0
  410764:	d043      	beq.n	4107ee <.LVL240>
            }
        #endif
        }
    #endif /* WOLFSSL_ASYNC_CRYPT */

        blocks = sz / DES_BLOCK_SIZE;
  410766:	08db      	lsrs	r3, r3, #3

00410768 <.LVL229>:
        while (blocks--) {
  410768:	f103 38ff 	add.w	r8, r3, #4294967295

0041076c <.LVL230>:
  41076c:	2b00      	cmp	r3, #0
  41076e:	d042      	beq.n	4107f6 <.LVL242>
  410770:	1e4f      	subs	r7, r1, #1
            XMEMCPY(des->tmp, in, DES_BLOCK_SIZE);
  410772:	f500 75c4 	add.w	r5, r0, #392	; 0x188
            Des3ProcessBlock(des, (byte*)des->tmp, out);
            xorbuf(out, (byte*)des->reg, DES_BLOCK_SIZE);
  410776:	f500 79c0 	add.w	r9, r0, #384	; 0x180
  41077a:	e019      	b.n	4107b0 <.LBE285+0x1c>

0041077c <.LBB285>:
    for (i = 0; i < n; i++) r[i] ^= a[i];
  41077c:	f8d7 3001 	ldr.w	r3, [r7, #1]
  410780:	f8da 2180 	ldr.w	r2, [sl, #384]	; 0x180
  410784:	4053      	eors	r3, r2
  410786:	f8c7 3001 	str.w	r3, [r7, #1]

0041078a <.LVL232>:
  41078a:	6863      	ldr	r3, [r4, #4]
  41078c:	f8da 2184 	ldr.w	r2, [sl, #388]	; 0x184
  410790:	4053      	eors	r3, r2
  410792:	6063      	str	r3, [r4, #4]

00410794 <.LBE285>:
            XMEMCPY(des->reg, des->tmp, DES_BLOCK_SIZE);
  410794:	682a      	ldr	r2, [r5, #0]
  410796:	686b      	ldr	r3, [r5, #4]
  410798:	f8c9 2000 	str.w	r2, [r9]
  41079c:	f8c9 3004 	str.w	r3, [r9, #4]

            out += DES_BLOCK_SIZE;
  4107a0:	3408      	adds	r4, #8
            in  += DES_BLOCK_SIZE;
  4107a2:	3608      	adds	r6, #8
        while (blocks--) {
  4107a4:	f108 38ff 	add.w	r8, r8, #4294967295
  4107a8:	3708      	adds	r7, #8
  4107aa:	f1b8 3fff 	cmp.w	r8, #4294967295
  4107ae:	d01b      	beq.n	4107e8 <.LBE289>
            XMEMCPY(des->tmp, in, DES_BLOCK_SIZE);
  4107b0:	6832      	ldr	r2, [r6, #0]
  4107b2:	6873      	ldr	r3, [r6, #4]
  4107b4:	602a      	str	r2, [r5, #0]
  4107b6:	606b      	str	r3, [r5, #4]
            Des3ProcessBlock(des, (byte*)des->tmp, out);
  4107b8:	4622      	mov	r2, r4
  4107ba:	4629      	mov	r1, r5
  4107bc:	4650      	mov	r0, sl
  4107be:	f7fe f82b 	bl	40e818 <.LFE19>

004107c2 <.LBB291>:
    if (((wolfssl_word)buf | (wolfssl_word)mask | count) % WOLFSSL_WORD_SIZE == 0)
  4107c2:	ea44 0309 	orr.w	r3, r4, r9
  4107c6:	f013 0f03 	tst.w	r3, #3
  4107ca:	d0d7      	beq.n	41077c <.LBB285>
  4107cc:	f20a 117f 	addw	r1, sl, #383	; 0x17f
  4107d0:	f104 0e07 	add.w	lr, r4, #7
  4107d4:	463b      	mov	r3, r7

004107d6 <.LBB289>:
        for (i = 0; i < count; i++) b[i] ^= m[i];
  4107d6:	785a      	ldrb	r2, [r3, #1]
  4107d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  4107dc:	4042      	eors	r2, r0
  4107de:	f803 2f01 	strb.w	r2, [r3, #1]!
  4107e2:	4573      	cmp	r3, lr
  4107e4:	d1f7      	bne.n	4107d6 <.LBB289>
  4107e6:	e7d5      	b.n	410794 <.LBE285>

004107e8 <.LBE289>:
        }
        return 0;
  4107e8:	2000      	movs	r0, #0
  4107ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004107ee <.LVL240>:
            return BAD_FUNC_ARG;
  4107ee:	f06f 00ac 	mvn.w	r0, #172	; 0xac

004107f2 <.LVL241>:
  4107f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004107f6 <.LVL242>:
        return 0;
  4107f6:	2000      	movs	r0, #0

004107f8 <.LVL243>:
    }
  4107f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004107fc <.LCFI16>:
            return BAD_FUNC_ARG;
  4107fc:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00410800 <.LVL245>:
    }
  410800:	4770      	bx	lr

Disassembly of section .text.wc_AesCbcEncrypt%117:

00410802 <wc_AesCbcEncrypt>:
        if (aes == NULL || out == NULL || in == NULL) {
  410802:	2a00      	cmp	r2, #0
  410804:	bf18      	it	ne
  410806:	2900      	cmpne	r1, #0
  410808:	d04f      	beq.n	4108aa <.LCFI16>
    {
  41080a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

0041080e <.LCFI15>:
  41080e:	4682      	mov	sl, r0
  410810:	091b      	lsrs	r3, r3, #4

00410812 <.LVL174>:
  410812:	460d      	mov	r5, r1
  410814:	4690      	mov	r8, r2
        if (aes == NULL || out == NULL || in == NULL) {
  410816:	2800      	cmp	r0, #0
  410818:	d040      	beq.n	41089c <.LVL186>
        while (blocks--) {
  41081a:	f103 39ff 	add.w	r9, r3, #4294967295

0041081e <.LVL175>:
  41081e:	2b00      	cmp	r3, #0
  410820:	d040      	beq.n	4108a4 <.LVL188>
            xorbuf((byte*)aes->reg, in, AES_BLOCK_SIZE);
  410822:	f100 04f8 	add.w	r4, r0, #248	; 0xf8
  410826:	f500 7782 	add.w	r7, r0, #260	; 0x104
  41082a:	f200 1607 	addw	r6, r0, #263	; 0x107
  41082e:	e020      	b.n	410872 <.LBB162>

00410830 <.LVL176>:
  410830:	f10a 03f7 	add.w	r3, sl, #247	; 0xf7
  410834:	f108 31ff 	add.w	r1, r8, #4294967295

00410838 <.LBB156>:
  410838:	785a      	ldrb	r2, [r3, #1]
  41083a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  41083e:	4042      	eors	r2, r0
  410840:	f803 2f01 	strb.w	r2, [r3, #1]!
  410844:	42b3      	cmp	r3, r6
  410846:	d1f7      	bne.n	410838 <.LBB156>

00410848 <.LBE156>:
            wc_AesEncrypt(aes, (byte*)aes->reg, (byte*)aes->reg);
  410848:	4622      	mov	r2, r4
  41084a:	4621      	mov	r1, r4
  41084c:	4650      	mov	r0, sl
  41084e:	f7fa fa5b 	bl	40ad08 <.LBE150>

00410852 <.LVL179>:
            XMEMCPY(out, aes->reg, AES_BLOCK_SIZE);
  410852:	6820      	ldr	r0, [r4, #0]
  410854:	6861      	ldr	r1, [r4, #4]
  410856:	68a2      	ldr	r2, [r4, #8]
  410858:	68e3      	ldr	r3, [r4, #12]
  41085a:	6028      	str	r0, [r5, #0]
  41085c:	6069      	str	r1, [r5, #4]
  41085e:	60aa      	str	r2, [r5, #8]
  410860:	60eb      	str	r3, [r5, #12]
            out += AES_BLOCK_SIZE;
  410862:	3510      	adds	r5, #16
            in  += AES_BLOCK_SIZE;
  410864:	f108 0810 	add.w	r8, r8, #16
        while (blocks--) {
  410868:	f109 39ff 	add.w	r9, r9, #4294967295
  41086c:	f1b9 3fff 	cmp.w	r9, #4294967295
  410870:	d011      	beq.n	410896 <.LBE159>

00410872 <.LBB162>:
    if (((wolfssl_word)buf | (wolfssl_word)mask | count) % WOLFSSL_WORD_SIZE == 0)
  410872:	ea44 0308 	orr.w	r3, r4, r8
  410876:	f013 0f03 	tst.w	r3, #3
  41087a:	d1d9      	bne.n	410830 <.LVL176>
  41087c:	f10a 03f4 	add.w	r3, sl, #244	; 0xf4
  410880:	f1a8 0104 	sub.w	r1, r8, #4

00410884 <.LBB159>:
    for (i = 0; i < n; i++) r[i] ^= a[i];
  410884:	685a      	ldr	r2, [r3, #4]
  410886:	f851 0f04 	ldr.w	r0, [r1, #4]!
  41088a:	4042      	eors	r2, r0
  41088c:	f843 2f04 	str.w	r2, [r3, #4]!
  410890:	42bb      	cmp	r3, r7
  410892:	d1f7      	bne.n	410884 <.LBB159>
  410894:	e7d8      	b.n	410848 <.LBE156>

00410896 <.LBE159>:
        return 0;
  410896:	2000      	movs	r0, #0
  410898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0041089c <.LVL186>:
            return BAD_FUNC_ARG;
  41089c:	f06f 00ac 	mvn.w	r0, #172	; 0xac

004108a0 <.LVL187>:
  4108a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004108a4 <.LVL188>:
        return 0;
  4108a4:	2000      	movs	r0, #0

004108a6 <.LVL189>:
    }
  4108a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004108aa <.LCFI16>:
            return BAD_FUNC_ARG;
  4108aa:	f06f 00ac 	mvn.w	r0, #172	; 0xac

004108ae <.LVL191>:
    }
  4108ae:	4770      	bx	lr

Disassembly of section .text.__lshift%118:

004108b0 <__lshift>:
  4108b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

004108b4 <.LCFI11>:
  4108b4:	4691      	mov	r9, r2
  4108b6:	690a      	ldr	r2, [r1, #16]

004108b8 <.LVL184>:
  4108b8:	688b      	ldr	r3, [r1, #8]
  4108ba:	ea4f 1469 	mov.w	r4, r9, asr #5

004108be <.LVL185>:
  4108be:	eb04 0802 	add.w	r8, r4, r2
  4108c2:	f108 0501 	add.w	r5, r8, #1
  4108c6:	429d      	cmp	r5, r3
  4108c8:	460e      	mov	r6, r1
  4108ca:	4607      	mov	r7, r0
  4108cc:	6849      	ldr	r1, [r1, #4]

004108ce <.LVL186>:
  4108ce:	dd04      	ble.n	4108da <.LVL188+0x2>
  4108d0:	005b      	lsls	r3, r3, #1

004108d2 <.LVL187>:
  4108d2:	429d      	cmp	r5, r3
  4108d4:	f101 0101 	add.w	r1, r1, #1

004108d8 <.LVL188>:
  4108d8:	dcfa      	bgt.n	4108d0 <.LVL186+0x2>
  4108da:	4638      	mov	r0, r7

004108dc <.LVL189>:
  4108dc:	f001 fb56 	bl	411f8c <.LFE2>

004108e0 <.LVL190>:
  4108e0:	2c00      	cmp	r4, #0
  4108e2:	f100 0314 	add.w	r3, r0, #20

004108e6 <.LVL191>:
  4108e6:	dd06      	ble.n	4108f6 <.LVL193+0x4>
  4108e8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  4108ec:	2100      	movs	r1, #0

004108ee <.LVL192>:
  4108ee:	f843 1b04 	str.w	r1, [r3], #4

004108f2 <.LVL193>:
  4108f2:	429a      	cmp	r2, r3
  4108f4:	d1fb      	bne.n	4108ee <.LVL192>
  4108f6:	6934      	ldr	r4, [r6, #16]

004108f8 <.LVL194>:
  4108f8:	f106 0114 	add.w	r1, r6, #20

004108fc <.LVL195>:
  4108fc:	f019 091f 	ands.w	r9, r9, #31

00410900 <.LVL196>:
  410900:	eb01 0e84 	add.w	lr, r1, r4, lsl #2

00410904 <.LVL197>:
  410904:	d01d      	beq.n	410942 <.LVL208>
  410906:	f1c9 0c20 	rsb	ip, r9, #32

0041090a <.LVL198>:
  41090a:	2200      	movs	r2, #0

0041090c <.LVL199>:
  41090c:	680c      	ldr	r4, [r1, #0]
  41090e:	fa04 f409 	lsl.w	r4, r4, r9
  410912:	4314      	orrs	r4, r2
  410914:	f843 4b04 	str.w	r4, [r3], #4

00410918 <.LVL200>:
  410918:	f851 2b04 	ldr.w	r2, [r1], #4

0041091c <.LVL201>:
  41091c:	458e      	cmp	lr, r1
  41091e:	fa22 f20c 	lsr.w	r2, r2, ip

00410922 <.LVL202>:
  410922:	d8f3      	bhi.n	41090c <.LVL199>
  410924:	601a      	str	r2, [r3, #0]
  410926:	b10a      	cbz	r2, 41092c <.LBB24>

00410928 <.LVL203>:
  410928:	f108 0502 	add.w	r5, r8, #2

0041092c <.LBB24>:
  41092c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  41092e:	6872      	ldr	r2, [r6, #4]

00410930 <.LBE24>:
  410930:	3d01      	subs	r5, #1

00410932 <.LBB28>:
  410932:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]

00410936 <.LBE28>:
  410936:	6105      	str	r5, [r0, #16]

00410938 <.LBB29>:
  410938:	6031      	str	r1, [r6, #0]
  41093a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]

0041093e <.LBE29>:
  41093e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00410942 <.LVL208>:
  410942:	3b04      	subs	r3, #4

00410944 <.LVL209>:
  410944:	f851 2b04 	ldr.w	r2, [r1], #4

00410948 <.LVL210>:
  410948:	f843 2f04 	str.w	r2, [r3, #4]!
  41094c:	458e      	cmp	lr, r1
  41094e:	d8f9      	bhi.n	410944 <.LVL209>
  410950:	e7ec      	b.n	41092c <.LBB24>

00410952 <.LFE26>:
  410952:	bf00      	nop

Disassembly of section .text.__register_exitproc%119:

00410954 <__register_exitproc>:
  410954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

00410958 <.LCFI0>:
  410958:	4c25      	ldr	r4, [pc, #148]	; (4109f0 <.LVL14+0x2>)
  41095a:	6825      	ldr	r5, [r4, #0]
  41095c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148

00410960 <.LVL1>:
  410960:	4606      	mov	r6, r0
  410962:	4688      	mov	r8, r1
  410964:	4692      	mov	sl, r2
  410966:	4699      	mov	r9, r3
  410968:	b3c4      	cbz	r4, 4109dc <.LVL11>
  41096a:	6860      	ldr	r0, [r4, #4]

0041096c <.LVL2>:
  41096c:	281f      	cmp	r0, #31
  41096e:	dc17      	bgt.n	4109a0 <.LVL6>
  410970:	1c43      	adds	r3, r0, #1

00410972 <.LVL3>:
  410972:	b176      	cbz	r6, 410992 <.LVL5>

00410974 <.LVL4>:
  410974:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  410978:	2201      	movs	r2, #1
  41097a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  41097e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  410982:	4082      	lsls	r2, r0
  410984:	4311      	orrs	r1, r2
  410986:	2e02      	cmp	r6, #2
  410988:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  41098c:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  410990:	d01e      	beq.n	4109d0 <.LVL10>

00410992 <.LVL5>:
  410992:	3002      	adds	r0, #2
  410994:	6063      	str	r3, [r4, #4]
  410996:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  41099a:	2000      	movs	r0, #0
  41099c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004109a0 <.LVL6>:
  4109a0:	4b14      	ldr	r3, [pc, #80]	; (4109f4 <.LVL14+0x6>)

004109a2 <.LVL7>:
  4109a2:	b303      	cbz	r3, 4109e6 <.LVL13>
  4109a4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4109a8:	f002 fa8e 	bl	412ec8 <.LFE151>

004109ac <.LVL8>:
  4109ac:	4604      	mov	r4, r0
  4109ae:	b1d0      	cbz	r0, 4109e6 <.LVL13>
  4109b0:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4109b4:	2700      	movs	r7, #0
  4109b6:	e880 0088 	stmia.w	r0, {r3, r7}
  4109ba:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4109be:	4638      	mov	r0, r7

004109c0 <.LVL9>:
  4109c0:	2301      	movs	r3, #1
  4109c2:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4109c6:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  4109ca:	2e00      	cmp	r6, #0
  4109cc:	d0e1      	beq.n	410992 <.LVL5>
  4109ce:	e7d1      	b.n	410974 <.LVL4>

004109d0 <.LVL10>:
  4109d0:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  4109d4:	430a      	orrs	r2, r1
  4109d6:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4109da:	e7da      	b.n	410992 <.LVL5>

004109dc <.LVL11>:
  4109dc:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4109e0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4109e4:	e7c1      	b.n	41096a <.LVL1+0xa>

004109e6 <.LVL13>:
  4109e6:	f04f 30ff 	mov.w	r0, #4294967295
  4109ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004109ee <.LVL14>:
  4109ee:	bf00      	nop
  4109f0:	00412fcc 	.word	0x00412fcc
  4109f4:	00412ec9 	.word	0x00412ec9

Disassembly of section .text.DisplayNodeMsg%120:

004109f8 <DisplayNodeMsg>:
{
  4109f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

004109fc <.LCFI14>:
  4109fc:	4604      	mov	r4, r0
  4109fe:	4689      	mov	r9, r1
    if((nCmdLen = strlen(pNext->cmdBuff)))
  410a00:	f101 0a08 	add.w	sl, r1, #8
  410a04:	4650      	mov	r0, sl

00410a06 <.LVL41>:
  410a06:	f7fe ff3b 	bl	40f880 <.LFE22>

00410a0a <.LVL42>:
  410a0a:	2800      	cmp	r0, #0
  410a0c:	d035      	beq.n	410a7a <.LVL55>
  410a0e:	4680      	mov	r8, r0
  410a10:	4605      	mov	r5, r0
        oCmdLen = pCmdIO->cmdEnd-pCmdIO->cmdBuff;
  410a12:	f104 0708 	add.w	r7, r4, #8
  410a16:	6866      	ldr	r6, [r4, #4]
  410a18:	1bf6      	subs	r6, r6, r7

00410a1a <.LVL43>:
        while(oCmdLen>nCmdLen)
  410a1a:	42b0      	cmp	r0, r6
  410a1c:	da2f      	bge.n	410a7e <.LVL56>
            (*pCmdIO->pCmdApi->msg)(pCmdIO->cmdIoParam, "\b \b");     // clear the old command
  410a1e:	f8df b074 	ldr.w	fp, [pc, #116]	; 410a94 <.LVL56+0x16>

00410a22 <.LVL44>:
  410a22:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  410a26:	681b      	ldr	r3, [r3, #0]
  410a28:	4659      	mov	r1, fp
  410a2a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
  410a2e:	4798      	blx	r3

00410a30 <.LVL45>:
            oCmdLen--;
  410a30:	3e01      	subs	r6, #1
        while(oCmdLen>nCmdLen)
  410a32:	42b5      	cmp	r5, r6
  410a34:	d1f5      	bne.n	410a22 <.LVL44>

00410a36 <.LVL47>:
            (*pCmdIO->pCmdApi->msg)(pCmdIO->cmdIoParam, "\b");
  410a36:	4e14      	ldr	r6, [pc, #80]	; (410a88 <.LVL56+0xa>)

00410a38 <.LVL48>:
  410a38:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  410a3c:	681b      	ldr	r3, [r3, #0]
  410a3e:	4631      	mov	r1, r6
  410a40:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
  410a44:	4798      	blx	r3

00410a46 <.LVL49>:
        while(oCmdLen--)
  410a46:	3d01      	subs	r5, #1

00410a48 <.LVL50>:
  410a48:	d1f6      	bne.n	410a38 <.LVL48>

00410a4a <.LVL51>:
        strcpy(pCmdIO->cmdBuff, pNext->cmdBuff);
  410a4a:	4651      	mov	r1, sl
  410a4c:	4638      	mov	r0, r7
  410a4e:	f7ff fa37 	bl	40fec0 <.LFE166>

00410a52 <.LVL52>:
        (*pCmdIO->pCmdApi->msg)(pCmdIO->cmdIoParam, "\r\n>");
  410a52:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  410a56:	681b      	ldr	r3, [r3, #0]
  410a58:	490c      	ldr	r1, [pc, #48]	; (410a8c <.LVL56+0xe>)
  410a5a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
  410a5e:	4798      	blx	r3

00410a60 <.LVL53>:
        (*pCmdIO->pCmdApi->msg)(pCmdIO->cmdIoParam, pCmdIO->cmdBuff);
  410a60:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  410a64:	681b      	ldr	r3, [r3, #0]
  410a66:	4639      	mov	r1, r7
  410a68:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
  410a6c:	4798      	blx	r3

00410a6e <.LVL54>:
        pCmdIO->cmdPnt = pCmdIO->cmdEnd = pCmdIO->cmdBuff+nCmdLen;
  410a6e:	4447      	add	r7, r8
  410a70:	6067      	str	r7, [r4, #4]
  410a72:	6027      	str	r7, [r4, #0]
        _pCurrCmdN = pNext;
  410a74:	4b06      	ldr	r3, [pc, #24]	; (410a90 <.LVL56+0x12>)
  410a76:	f8c3 9000 	str.w	r9, [r3]

00410a7a <.LVL55>:
  410a7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00410a7e <.LVL56>:
        while(oCmdLen--)
  410a7e:	2e00      	cmp	r6, #0
  410a80:	d0e3      	beq.n	410a4a <.LVL51>
        oCmdLen = pCmdIO->cmdEnd-pCmdIO->cmdBuff;
  410a82:	4635      	mov	r5, r6
  410a84:	e7d7      	b.n	410a36 <.LVL47>
  410a86:	bf00      	nop
  410a88:	0040d360 	.word	0x0040d360
  410a8c:	0040d364 	.word	0x0040d364
  410a90:	2040dd1c 	.word	0x2040dd1c
  410a94:	0040d35c 	.word	0x0040d35c

Disassembly of section .text%121:

00410aa0 <memchr>:
  410aa0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  410aa4:	2a10      	cmp	r2, #16
  410aa6:	db2b      	blt.n	410b00 <memchr+0x60>
  410aa8:	f010 0f07 	tst.w	r0, #7
  410aac:	d008      	beq.n	410ac0 <memchr+0x20>
  410aae:	f810 3b01 	ldrb.w	r3, [r0], #1
  410ab2:	3a01      	subs	r2, #1
  410ab4:	428b      	cmp	r3, r1
  410ab6:	d02d      	beq.n	410b14 <memchr+0x74>
  410ab8:	f010 0f07 	tst.w	r0, #7
  410abc:	b342      	cbz	r2, 410b10 <memchr+0x70>
  410abe:	d1f6      	bne.n	410aae <memchr+0xe>
  410ac0:	b4f0      	push	{r4, r5, r6, r7}
  410ac2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  410ac6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  410aca:	f022 0407 	bic.w	r4, r2, #7
  410ace:	f07f 0700 	mvns.w	r7, #0
  410ad2:	2300      	movs	r3, #0
  410ad4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  410ad8:	3c08      	subs	r4, #8
  410ada:	ea85 0501 	eor.w	r5, r5, r1
  410ade:	ea86 0601 	eor.w	r6, r6, r1
  410ae2:	fa85 f547 	uadd8	r5, r5, r7
  410ae6:	faa3 f587 	sel	r5, r3, r7
  410aea:	fa86 f647 	uadd8	r6, r6, r7
  410aee:	faa5 f687 	sel	r6, r5, r7
  410af2:	b98e      	cbnz	r6, 410b18 <memchr+0x78>
  410af4:	d1ee      	bne.n	410ad4 <memchr+0x34>
  410af6:	bcf0      	pop	{r4, r5, r6, r7}
  410af8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  410afc:	f002 0207 	and.w	r2, r2, #7
  410b00:	b132      	cbz	r2, 410b10 <memchr+0x70>
  410b02:	f810 3b01 	ldrb.w	r3, [r0], #1
  410b06:	3a01      	subs	r2, #1
  410b08:	ea83 0301 	eor.w	r3, r3, r1
  410b0c:	b113      	cbz	r3, 410b14 <memchr+0x74>
  410b0e:	d1f8      	bne.n	410b02 <memchr+0x62>
  410b10:	2000      	movs	r0, #0
  410b12:	4770      	bx	lr
  410b14:	3801      	subs	r0, #1
  410b16:	4770      	bx	lr
  410b18:	2d00      	cmp	r5, #0
  410b1a:	bf06      	itte	eq
  410b1c:	4635      	moveq	r5, r6
  410b1e:	3803      	subeq	r0, #3
  410b20:	3807      	subne	r0, #7
  410b22:	f015 0f01 	tst.w	r5, #1
  410b26:	d107      	bne.n	410b38 <memchr+0x98>
  410b28:	3001      	adds	r0, #1
  410b2a:	f415 7f80 	tst.w	r5, #256	; 0x100
  410b2e:	bf02      	ittt	eq
  410b30:	3001      	addeq	r0, #1
  410b32:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  410b36:	3001      	addeq	r0, #1
  410b38:	bcf0      	pop	{r4, r5, r6, r7}
  410b3a:	3801      	subs	r0, #1
  410b3c:	4770      	bx	lr

00410b3e <L0>:
  410b3e:	bf00      	nop

Disassembly of section .text.__pow5mult%122:

00410b40 <__pow5mult>:
  410b40:	f012 0303 	ands.w	r3, r2, #3
  410b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

00410b48 <.LCFI10>:
  410b48:	4614      	mov	r4, r2

00410b4a <.LVL152>:
  410b4a:	4607      	mov	r7, r0
  410b4c:	d12e      	bne.n	410bac <.LVL173>
  410b4e:	460d      	mov	r5, r1

00410b50 <.LVL153>:
  410b50:	10a4      	asrs	r4, r4, #2

00410b52 <.LVL154>:
  410b52:	d01c      	beq.n	410b8e <.LVL165>
  410b54:	6cbe      	ldr	r6, [r7, #72]	; 0x48

00410b56 <.LVL155>:
  410b56:	b396      	cbz	r6, 410bbe <.LBB20>
  410b58:	07e3      	lsls	r3, r4, #31
  410b5a:	f04f 0800 	mov.w	r8, #0
  410b5e:	d406      	bmi.n	410b6e <.LVL161>

00410b60 <.LVL156>:
  410b60:	1064      	asrs	r4, r4, #1

00410b62 <.LVL157>:
  410b62:	d014      	beq.n	410b8e <.LVL165>

00410b64 <.LVL158>:
  410b64:	6830      	ldr	r0, [r6, #0]

00410b66 <.LVL159>:
  410b66:	b1a8      	cbz	r0, 410b94 <.LVL166>
  410b68:	4606      	mov	r6, r0

00410b6a <.LVL160>:
  410b6a:	07e3      	lsls	r3, r4, #31
  410b6c:	d5f8      	bpl.n	410b60 <.LVL156>

00410b6e <.LVL161>:
  410b6e:	4632      	mov	r2, r6
  410b70:	4629      	mov	r1, r5
  410b72:	4638      	mov	r0, r7
  410b74:	f7fe f80e 	bl	40eb94 <.LBE11>

00410b78 <.LBB16>:
  410b78:	b1b5      	cbz	r5, 410ba8 <.LVL171>
  410b7a:	686a      	ldr	r2, [r5, #4]
  410b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c

00410b7e <.LBE16>:
  410b7e:	1064      	asrs	r4, r4, #1

00410b80 <.LBB19>:
  410b80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  410b84:	6029      	str	r1, [r5, #0]
  410b86:	f843 5022 	str.w	r5, [r3, r2, lsl #2]

00410b8a <.LBE19>:
  410b8a:	4605      	mov	r5, r0

00410b8c <.LVL164>:
  410b8c:	d1ea      	bne.n	410b64 <.LVL158>

00410b8e <.LVL165>:
  410b8e:	4628      	mov	r0, r5
  410b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00410b94 <.LVL166>:
  410b94:	4632      	mov	r2, r6
  410b96:	4631      	mov	r1, r6
  410b98:	4638      	mov	r0, r7

00410b9a <.LVL167>:
  410b9a:	f7fd fffb 	bl	40eb94 <.LBE11>

00410b9e <.LVL168>:
  410b9e:	6030      	str	r0, [r6, #0]

00410ba0 <.LVL169>:
  410ba0:	f8c0 8000 	str.w	r8, [r0]
  410ba4:	4606      	mov	r6, r0

00410ba6 <.LVL170>:
  410ba6:	e7e0      	b.n	410b6a <.LVL160>

00410ba8 <.LVL171>:
  410ba8:	4605      	mov	r5, r0

00410baa <.LVL172>:
  410baa:	e7d9      	b.n	410b60 <.LVL156>

00410bac <.LVL173>:
  410bac:	1e5a      	subs	r2, r3, #1

00410bae <.LVL174>:
  410bae:	4d0b      	ldr	r5, [pc, #44]	; (410bdc <.LVL182+0x6>)
  410bb0:	2300      	movs	r3, #0

00410bb2 <.LVL175>:
  410bb2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]

00410bb6 <.LVL176>:
  410bb6:	f000 fcb9 	bl	41152c <.LFE146>

00410bba <.LVL177>:
  410bba:	4605      	mov	r5, r0

00410bbc <.LVL178>:
  410bbc:	e7c8      	b.n	410b50 <.LVL153>

00410bbe <.LBB20>:
  410bbe:	2101      	movs	r1, #1
  410bc0:	4638      	mov	r0, r7
  410bc2:	f001 f9e3 	bl	411f8c <.LFE2>

00410bc6 <.LVL180>:
  410bc6:	f240 2171 	movw	r1, #625	; 0x271
  410bca:	2201      	movs	r2, #1

00410bcc <.LBE20>:
  410bcc:	2300      	movs	r3, #0

00410bce <.LBB23>:
  410bce:	6141      	str	r1, [r0, #20]
  410bd0:	6102      	str	r2, [r0, #16]
  410bd2:	4606      	mov	r6, r0

00410bd4 <.LBE23>:
  410bd4:	64b8      	str	r0, [r7, #72]	; 0x48

00410bd6 <.LVL182>:
  410bd6:	6003      	str	r3, [r0, #0]
  410bd8:	e7be      	b.n	410b58 <.LVL155+0x2>
  410bda:	bf00      	nop
  410bdc:	00412fbc 	.word	0x00412fbc

Disassembly of section .text.wc_Des3_CbcEncrypt%123:

00410be0 <wc_Des3_CbcEncrypt>:
        if (des == NULL || out == NULL || in == NULL) {
  410be0:	2a00      	cmp	r2, #0
  410be2:	bf18      	it	ne
  410be4:	2900      	cmpne	r1, #0
  410be6:	d047      	beq.n	410c78 <.LCFI14>
    {
  410be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

00410bec <.LCFI13>:
  410bec:	4680      	mov	r8, r0
  410bee:	460f      	mov	r7, r1
        if (des == NULL || out == NULL || in == NULL) {
  410bf0:	b3d8      	cbz	r0, 410c6a <.LVL222>
        blocks = sz / DES_BLOCK_SIZE;
  410bf2:	08db      	lsrs	r3, r3, #3

00410bf4 <.LVL208>:
        while (blocks--) {
  410bf4:	f103 39ff 	add.w	r9, r3, #4294967295

00410bf8 <.LVL209>:
  410bf8:	b3db      	cbz	r3, 410c72 <.LVL224>
  410bfa:	1e56      	subs	r6, r2, #1
            xorbuf((byte*)des->reg, in, DES_BLOCK_SIZE);
  410bfc:	f500 75c0 	add.w	r5, r0, #384	; 0x180
  410c00:	f200 1487 	addw	r4, r0, #391	; 0x187
  410c04:	e01d      	b.n	410c42 <.LBB279>

00410c06 <.LBB273>:
  410c06:	f8d8 3180 	ldr.w	r3, [r8, #384]	; 0x180
  410c0a:	f8d6 2001 	ldr.w	r2, [r6, #1]
  410c0e:	4053      	eors	r3, r2
  410c10:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180

00410c14 <.LVL211>:
  410c14:	f8d8 3184 	ldr.w	r3, [r8, #388]	; 0x184
  410c18:	f8d6 2005 	ldr.w	r2, [r6, #5]
  410c1c:	4053      	eors	r3, r2
  410c1e:	f8c8 3184 	str.w	r3, [r8, #388]	; 0x184

00410c22 <.LBE273>:
            Des3ProcessBlock(des, (byte*)des->reg, (byte*)des->reg);
  410c22:	462a      	mov	r2, r5
  410c24:	4629      	mov	r1, r5
  410c26:	4640      	mov	r0, r8
  410c28:	f7fd fdf6 	bl	40e818 <.LFE19>

00410c2c <.LVL213>:
            XMEMCPY(out, des->reg, DES_BLOCK_SIZE);
  410c2c:	682a      	ldr	r2, [r5, #0]
  410c2e:	686b      	ldr	r3, [r5, #4]
  410c30:	603a      	str	r2, [r7, #0]
  410c32:	607b      	str	r3, [r7, #4]
            out += DES_BLOCK_SIZE;
  410c34:	3708      	adds	r7, #8

00410c36 <.LVL214>:
        while (blocks--) {
  410c36:	f109 39ff 	add.w	r9, r9, #4294967295
  410c3a:	3608      	adds	r6, #8

00410c3c <.LVL216>:
  410c3c:	f1b9 3fff 	cmp.w	r9, #4294967295
  410c40:	d010      	beq.n	410c64 <.LBE277>

00410c42 <.LBB279>:
    if (((wolfssl_word)buf | (wolfssl_word)mask | count) % WOLFSSL_WORD_SIZE == 0)
  410c42:	1c73      	adds	r3, r6, #1

00410c44 <.LVL218>:
  410c44:	432b      	orrs	r3, r5

00410c46 <.LVL219>:
  410c46:	f013 0f03 	tst.w	r3, #3
  410c4a:	d0dc      	beq.n	410c06 <.LBB273>
  410c4c:	f208 137f 	addw	r3, r8, #383	; 0x17f
  410c50:	4631      	mov	r1, r6

00410c52 <.LBB277>:
        for (i = 0; i < count; i++) b[i] ^= m[i];
  410c52:	785a      	ldrb	r2, [r3, #1]
  410c54:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  410c58:	4042      	eors	r2, r0
  410c5a:	f803 2f01 	strb.w	r2, [r3, #1]!
  410c5e:	42a3      	cmp	r3, r4
  410c60:	d1f7      	bne.n	410c52 <.LBB277>
  410c62:	e7de      	b.n	410c22 <.LBE273>

00410c64 <.LBE277>:
        return 0;
  410c64:	2000      	movs	r0, #0
  410c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00410c6a <.LVL222>:
            return BAD_FUNC_ARG;
  410c6a:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00410c6e <.LVL223>:
  410c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00410c72 <.LVL224>:
        return 0;
  410c72:	2000      	movs	r0, #0

00410c74 <.LVL225>:
    }
  410c74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00410c78 <.LCFI14>:
            return BAD_FUNC_ARG;
  410c78:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00410c7c <.LVL227>:
    }
  410c7c:	4770      	bx	lr

Disassembly of section .text.memset%124:

00410c80 <memset>:
  410c80:	b470      	push	{r4, r5, r6}

00410c82 <.LCFI0>:
  410c82:	0786      	lsls	r6, r0, #30
  410c84:	d046      	beq.n	410d14 <.LCFI2>
  410c86:	1e54      	subs	r4, r2, #1

00410c88 <.LVL1>:
  410c88:	2a00      	cmp	r2, #0
  410c8a:	d041      	beq.n	410d10 <.LVL25>
  410c8c:	b2ca      	uxtb	r2, r1
  410c8e:	4603      	mov	r3, r0
  410c90:	e002      	b.n	410c98 <.LVL4>

00410c92 <.LVL2>:
  410c92:	f114 34ff 	adds.w	r4, r4, #4294967295

00410c96 <.LVL3>:
  410c96:	d33b      	bcc.n	410d10 <.LVL25>

00410c98 <.LVL4>:
  410c98:	f803 2b01 	strb.w	r2, [r3], #1
  410c9c:	079d      	lsls	r5, r3, #30
  410c9e:	d1f8      	bne.n	410c92 <.LVL2>

00410ca0 <.LVL6>:
  410ca0:	2c03      	cmp	r4, #3
  410ca2:	d92e      	bls.n	410d02 <.LVL22>
  410ca4:	b2cd      	uxtb	r5, r1

00410ca6 <.LVL7>:
  410ca6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8

00410caa <.LVL8>:
  410caa:	2c0f      	cmp	r4, #15
  410cac:	ea45 4505 	orr.w	r5, r5, r5, lsl #16

00410cb0 <.LVL9>:
  410cb0:	d919      	bls.n	410ce6 <.LVL17+0x2>
  410cb2:	f103 0210 	add.w	r2, r3, #16
  410cb6:	4626      	mov	r6, r4

00410cb8 <.LVL10>:
  410cb8:	3e10      	subs	r6, #16

00410cba <.LVL11>:
  410cba:	2e0f      	cmp	r6, #15
  410cbc:	f842 5c10 	str.w	r5, [r2, #-16]

00410cc0 <.LVL12>:
  410cc0:	f842 5c0c 	str.w	r5, [r2, #-12]

00410cc4 <.LVL13>:
  410cc4:	f842 5c08 	str.w	r5, [r2, #-8]

00410cc8 <.LVL14>:
  410cc8:	f842 5c04 	str.w	r5, [r2, #-4]
  410ccc:	f102 0210 	add.w	r2, r2, #16

00410cd0 <.LVL15>:
  410cd0:	d8f2      	bhi.n	410cb8 <.LVL10>
  410cd2:	f1a4 0210 	sub.w	r2, r4, #16

00410cd6 <.LVL16>:
  410cd6:	f022 020f 	bic.w	r2, r2, #15
  410cda:	f004 040f 	and.w	r4, r4, #15
  410cde:	3210      	adds	r2, #16
  410ce0:	2c03      	cmp	r4, #3
  410ce2:	4413      	add	r3, r2

00410ce4 <.LVL17>:
  410ce4:	d90d      	bls.n	410d02 <.LVL22>
  410ce6:	461e      	mov	r6, r3
  410ce8:	4622      	mov	r2, r4

00410cea <.LVL18>:
  410cea:	3a04      	subs	r2, #4

00410cec <.LVL19>:
  410cec:	2a03      	cmp	r2, #3
  410cee:	f846 5b04 	str.w	r5, [r6], #4

00410cf2 <.LVL20>:
  410cf2:	d8fa      	bhi.n	410cea <.LVL18>
  410cf4:	1f22      	subs	r2, r4, #4

00410cf6 <.LVL21>:
  410cf6:	f022 0203 	bic.w	r2, r2, #3
  410cfa:	3204      	adds	r2, #4
  410cfc:	4413      	add	r3, r2
  410cfe:	f004 0403 	and.w	r4, r4, #3

00410d02 <.LVL22>:
  410d02:	b12c      	cbz	r4, 410d10 <.LVL25>
  410d04:	b2c9      	uxtb	r1, r1

00410d06 <.LVL23>:
  410d06:	441c      	add	r4, r3
  410d08:	f803 1b01 	strb.w	r1, [r3], #1
  410d0c:	429c      	cmp	r4, r3
  410d0e:	d1fb      	bne.n	410d08 <.LVL23+0x2>

00410d10 <.LVL25>:
  410d10:	bc70      	pop	{r4, r5, r6}

00410d12 <.LCFI1>:
  410d12:	4770      	bx	lr

00410d14 <.LCFI2>:
  410d14:	4614      	mov	r4, r2
  410d16:	4603      	mov	r3, r0
  410d18:	e7c2      	b.n	410ca0 <.LVL6>

00410d1a <.LFE17>:
  410d1a:	bf00      	nop

Disassembly of section .text.wc_RNG_HealthTest%125:

00410d1c <wc_RNG_HealthTest>:
{
  410d1c:	b570      	push	{r4, r5, r6, lr}

00410d1e <.LCFI19>:
  410d1e:	b0a2      	sub	sp, #136	; 0x88

00410d20 <.LCFI20>:
  410d20:	9d27      	ldr	r5, [sp, #156]	; 0x9c

00410d22 <.LVL195>:
    if (entropyA == NULL || output == NULL) {
  410d22:	2900      	cmp	r1, #0
  410d24:	d03e      	beq.n	410da4 <.LVL217>
  410d26:	460c      	mov	r4, r1
  410d28:	2d00      	cmp	r5, #0
  410d2a:	d03b      	beq.n	410da4 <.LVL217>
    if (reseed != 0 && entropyB == NULL) {
  410d2c:	b108      	cbz	r0, 410d32 <.LVL195+0x10>
  410d2e:	2b00      	cmp	r3, #0
  410d30:	d03b      	beq.n	410daa <.LVL217+0x6>
    if (outputSz != RNG_HEALTH_TEST_CHECK_SIZE) {
  410d32:	9928      	ldr	r1, [sp, #160]	; 0xa0

00410d34 <.LVL196>:
  410d34:	2980      	cmp	r1, #128	; 0x80
  410d36:	d13b      	bne.n	410db0 <.LVL218>
  410d38:	4621      	mov	r1, r4
  410d3a:	461e      	mov	r6, r3
  410d3c:	4604      	mov	r4, r0

00410d3e <.LVL197>:
    if (Hash_DRBG_Instantiate(drbg, entropyA, entropyASz, NULL, 0, NULL,
  410d3e:	f06f 0301 	mvn.w	r3, #1

00410d42 <.LVL198>:
  410d42:	9302      	str	r3, [sp, #8]
  410d44:	2300      	movs	r3, #0
  410d46:	9301      	str	r3, [sp, #4]
  410d48:	9300      	str	r3, [sp, #0]
  410d4a:	a804      	add	r0, sp, #16

00410d4c <.LVL199>:
  410d4c:	f000 feba 	bl	411ac4 <Hash_DRBG_Instantiate>

00410d50 <.LVL200>:
  410d50:	b9c8      	cbnz	r0, 410d86 <.LVL210>
    if (reseed) {
  410d52:	b12c      	cbz	r4, 410d60 <.LVL202+0x2>
        if (Hash_DRBG_Reseed(drbg, entropyB, entropyBSz) != 0) {
  410d54:	9a26      	ldr	r2, [sp, #152]	; 0x98
  410d56:	4631      	mov	r1, r6
  410d58:	a804      	add	r0, sp, #16

00410d5a <.LVL201>:
  410d5a:	f000 f90b 	bl	410f74 <.LFE2>

00410d5e <.LVL202>:
  410d5e:	b9f0      	cbnz	r0, 410d9e <.LCFI22>
    if (Hash_DRBG_Generate(drbg, output, outputSz) != 0) {
  410d60:	2280      	movs	r2, #128	; 0x80
  410d62:	4629      	mov	r1, r5
  410d64:	a804      	add	r0, sp, #16

00410d66 <.LVL203>:
  410d66:	f7fb f9a3 	bl	40c0b0 <.LFE183>

00410d6a <.LVL204>:
  410d6a:	b110      	cbz	r0, 410d72 <.LVL206>
    int ret = -1;
  410d6c:	f04f 34ff 	mov.w	r4, #4294967295

00410d70 <.LVL205>:
  410d70:	e00b      	b.n	410d8a <.L113>

00410d72 <.LVL206>:
    if (Hash_DRBG_Generate(drbg, output, outputSz) != 0) {
  410d72:	2280      	movs	r2, #128	; 0x80
  410d74:	4629      	mov	r1, r5
  410d76:	a804      	add	r0, sp, #16

00410d78 <.LVL207>:
  410d78:	f7fb f99a 	bl	40c0b0 <.LFE183>

00410d7c <.LVL208>:
  410d7c:	3000      	adds	r0, #0
  410d7e:	bf18      	it	ne
  410d80:	2001      	movne	r0, #1
  410d82:	4244      	negs	r4, r0

00410d84 <.LVL209>:
  410d84:	e001      	b.n	410d8a <.L113>

00410d86 <.LVL210>:
    int ret = -1;
  410d86:	f04f 34ff 	mov.w	r4, #4294967295

00410d8a <.L113>:
    if (Hash_DRBG_Uninstantiate(drbg) != 0) {
  410d8a:	a804      	add	r0, sp, #16

00410d8c <.LVL212>:
  410d8c:	f001 fc3c 	bl	412608 <.LFE0>

00410d90 <.LVL213>:
  410d90:	2800      	cmp	r0, #0
        ret = -1;
  410d92:	bf18      	it	ne
  410d94:	f04f 34ff 	movne.w	r4, #4294967295

00410d98 <.LVL214>:
}
  410d98:	4620      	mov	r0, r4
  410d9a:	b022      	add	sp, #136	; 0x88

00410d9c <.LCFI21>:
  410d9c:	bd70      	pop	{r4, r5, r6, pc}

00410d9e <.LCFI22>:
    int ret = -1;
  410d9e:	f04f 34ff 	mov.w	r4, #4294967295

00410da2 <.LVL216>:
  410da2:	e7f2      	b.n	410d8a <.L113>

00410da4 <.LVL217>:
        return BAD_FUNC_ARG;
  410da4:	f06f 04ac 	mvn.w	r4, #172	; 0xac
  410da8:	e7f6      	b.n	410d98 <.LVL214>
        return BAD_FUNC_ARG;
  410daa:	f06f 04ac 	mvn.w	r4, #172	; 0xac
  410dae:	e7f3      	b.n	410d98 <.LVL214>

00410db0 <.LVL218>:
        return ret;
  410db0:	f04f 34ff 	mov.w	r4, #4294967295

00410db4 <.LVL219>:
  410db4:	e7f0      	b.n	410d98 <.LVL214>

Disassembly of section .text.sha256_test%126:

00410db8 <sha256_test>:
{
  410db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

00410dbc <.LCFI11>:
  410dbc:	b090      	sub	sp, #64	; 0x40

00410dbe <.LCFI12>:
  410dbe:	af00      	add	r7, sp, #0

00410dc0 <.LCFI13>:
  410dc0:	f5ad 7d20 	sub.w	sp, sp, #640	; 0x280
  410dc4:	f10d 057f 	add.w	r5, sp, #127	; 0x7f
  410dc8:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
    test_sha[0] = a;
  410dcc:	4b1d      	ldr	r3, [pc, #116]	; (410e44 <.LCFI15+0x6>)
  410dce:	f103 0208 	add.w	r2, r3, #8
  410dd2:	603a      	str	r2, [r7, #0]
  410dd4:	f503 7225 	add.w	r2, r3, #660	; 0x294
  410dd8:	607a      	str	r2, [r7, #4]
  410dda:	2203      	movs	r2, #3
  410ddc:	60ba      	str	r2, [r7, #8]
  410dde:	2220      	movs	r2, #32
  410de0:	60fa      	str	r2, [r7, #12]
    test_sha[1] = b;
  410de2:	f503 71e6 	add.w	r1, r3, #460	; 0x1cc
  410de6:	6139      	str	r1, [r7, #16]
  410de8:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
  410dec:	617b      	str	r3, [r7, #20]
  410dee:	2338      	movs	r3, #56	; 0x38
  410df0:	61bb      	str	r3, [r7, #24]
  410df2:	61fa      	str	r2, [r7, #28]
    CRYPT_SHA256_Initialize(&sha);
  410df4:	4628      	mov	r0, r5
  410df6:	f002 f827 	bl	412e48 <.LFE4>

00410dfa <.LVL21>:
    appData.sha256_test_result = 0;
  410dfa:	2400      	movs	r4, #0
  410dfc:	4b12      	ldr	r3, [pc, #72]	; (410e48 <.LCFI15+0xa>)
  410dfe:	60dc      	str	r4, [r3, #12]

00410e00 <.LVL22>:
            appData.sha256_test_result++;
  410e00:	4698      	mov	r8, r3
  410e02:	e002      	b.n	410e0a <.LVL23+0x6>

00410e04 <.LVL23>:
  410e04:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  410e06:	2c20      	cmp	r4, #32
  410e08:	d017      	beq.n	410e3a <.LVL26+0x10>
  410e0a:	193e      	adds	r6, r7, r4
        CRYPT_SHA256_DataAdd(&sha, (byte*)test_sha[i].input,(word32)test_sha[i].inLen);
  410e0c:	68b2      	ldr	r2, [r6, #8]
  410e0e:	5939      	ldr	r1, [r7, r4]
  410e10:	4628      	mov	r0, r5
  410e12:	f001 ff07 	bl	412c24 <.LFE7>

00410e16 <.LVL24>:
        CRYPT_SHA256_Finalize(&sha, hash);
  410e16:	f107 0120 	add.w	r1, r7, #32
  410e1a:	4628      	mov	r0, r5
  410e1c:	f001 ff0e 	bl	412c3c <.LFE10>

00410e20 <.LVL25>:
        if (memcmp(hash, test_sha[i].output, SHA256_DIGEST_SIZE) != 0)
  410e20:	2220      	movs	r2, #32
  410e22:	6871      	ldr	r1, [r6, #4]
  410e24:	18b8      	adds	r0, r7, r2
  410e26:	f000 ff4f 	bl	411cc8 <memcmp>

00410e2a <.LVL26>:
  410e2a:	2800      	cmp	r0, #0
  410e2c:	d0ea      	beq.n	410e04 <.LVL23>
            appData.sha256_test_result++;
  410e2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
  410e32:	3301      	adds	r3, #1
  410e34:	f8c8 300c 	str.w	r3, [r8, #12]
  410e38:	e7e4      	b.n	410e04 <.LVL23>
}
  410e3a:	3740      	adds	r7, #64	; 0x40

00410e3c <.LCFI14>:
  410e3c:	46bd      	mov	sp, r7

00410e3e <.LCFI15>:
  410e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  410e42:	bf00      	nop
  410e44:	004089cc 	.word	0x004089cc
  410e48:	2040db08 	.word	0x2040db08

Disassembly of section .text.__pic32c_data_initialization%127:

00410e4c <__pic32c_data_initialization>:
  410e4c:	4921      	ldr	r1, [pc, #132]	; (410ed4 <.LFE167+0x88>)
  410e4e:	680b      	ldr	r3, [r1, #0]
  410e50:	b430      	push	{r4, r5}
  410e52:	b113      	cbz	r3, 410e5a <__pic32c_data_initialization+0xe>
  410e54:	4b20      	ldr	r3, [pc, #128]	; (410ed8 <.LFE167+0x8c>)
  410e56:	681a      	ldr	r2, [r3, #0]
  410e58:	bb72      	cbnz	r2, 410eb8 <__pic32c_data_initialization+0x6c>
  410e5a:	4820      	ldr	r0, [pc, #128]	; (410edc <.LFE167+0x90>)
  410e5c:	2500      	movs	r5, #0
  410e5e:	6801      	ldr	r1, [r0, #0]
  410e60:	b9c1      	cbnz	r1, 410e94 <__pic32c_data_initialization+0x48>
  410e62:	6842      	ldr	r2, [r0, #4]
  410e64:	b332      	cbz	r2, 410eb4 <__pic32c_data_initialization+0x68>
  410e66:	6883      	ldr	r3, [r0, #8]
  410e68:	300c      	adds	r0, #12
  410e6a:	b1d3      	cbz	r3, 410ea2 <__pic32c_data_initialization+0x56>
  410e6c:	3901      	subs	r1, #1
  410e6e:	4603      	mov	r3, r0
  410e70:	f813 4b01 	ldrb.w	r4, [r3], #1
  410e74:	f801 4f01 	strb.w	r4, [r1, #1]!
  410e78:	1a1c      	subs	r4, r3, r0
  410e7a:	4294      	cmp	r4, r2
  410e7c:	d3f8      	bcc.n	410e70 <__pic32c_data_initialization+0x24>
  410e7e:	f012 0303 	ands.w	r3, r2, #3
  410e82:	bf18      	it	ne
  410e84:	2301      	movne	r3, #1
  410e86:	eb03 0292 	add.w	r2, r3, r2, lsr #2
  410e8a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  410e8e:	6801      	ldr	r1, [r0, #0]
  410e90:	2900      	cmp	r1, #0
  410e92:	d0e6      	beq.n	410e62 <__pic32c_data_initialization+0x16>
  410e94:	6884      	ldr	r4, [r0, #8]
  410e96:	6842      	ldr	r2, [r0, #4]
  410e98:	460b      	mov	r3, r1
  410e9a:	300c      	adds	r0, #12
  410e9c:	b93c      	cbnz	r4, 410eae <__pic32c_data_initialization+0x62>
  410e9e:	2a00      	cmp	r2, #0
  410ea0:	d0dd      	beq.n	410e5e <__pic32c_data_initialization+0x12>
  410ea2:	441a      	add	r2, r3
  410ea4:	f803 5b01 	strb.w	r5, [r3], #1
  410ea8:	4293      	cmp	r3, r2
  410eaa:	d1fb      	bne.n	410ea4 <__pic32c_data_initialization+0x58>
  410eac:	e7d7      	b.n	410e5e <__pic32c_data_initialization+0x12>
  410eae:	2a00      	cmp	r2, #0
  410eb0:	d1dc      	bne.n	410e6c <__pic32c_data_initialization+0x20>
  410eb2:	e7e4      	b.n	410e7e <__pic32c_data_initialization+0x32>
  410eb4:	bc30      	pop	{r4, r5}
  410eb6:	4770      	bx	lr
  410eb8:	428b      	cmp	r3, r1
  410eba:	d2ce      	bcs.n	410e5a <__pic32c_data_initialization+0xe>
  410ebc:	43da      	mvns	r2, r3
  410ebe:	440a      	add	r2, r1
  410ec0:	f022 0203 	bic.w	r2, r2, #3
  410ec4:	3204      	adds	r2, #4
  410ec6:	441a      	add	r2, r3
  410ec8:	2100      	movs	r1, #0
  410eca:	f843 1b04 	str.w	r1, [r3], #4
  410ece:	4293      	cmp	r3, r2
  410ed0:	d1fb      	bne.n	410eca <__pic32c_data_initialization+0x7e>
  410ed2:	e7c2      	b.n	410e5a <__pic32c_data_initialization+0xe>
  410ed4:	20400054 	.word	0x20400054
  410ed8:	20400000 	.word	0x20400000
  410edc:	004070a0 	.word	0x004070a0

Disassembly of section .text._malloc_trim_r%128:

00410ee0 <_malloc_trim_r>:
  410ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

00410ee2 <.LCFI0>:
  410ee2:	4f21      	ldr	r7, [pc, #132]	; (410f68 <.LVL22+0x6>)
  410ee4:	460c      	mov	r4, r1
  410ee6:	4606      	mov	r6, r0
  410ee8:	f002 f872 	bl	412fd0 <__malloc_lock>

00410eec <.LVL1>:
  410eec:	68bb      	ldr	r3, [r7, #8]
  410eee:	685d      	ldr	r5, [r3, #4]
  410ef0:	f1c4 046f 	rsb	r4, r4, #111	; 0x6f

00410ef4 <.LVL2>:
  410ef4:	f025 0503 	bic.w	r5, r5, #3

00410ef8 <.LVL3>:
  410ef8:	442c      	add	r4, r5
  410efa:	f024 047f 	bic.w	r4, r4, #127	; 0x7f
  410efe:	3c80      	subs	r4, #128	; 0x80

00410f00 <.LVL4>:
  410f00:	2c7f      	cmp	r4, #127	; 0x7f
  410f02:	dd07      	ble.n	410f14 <.LVL6>
  410f04:	2100      	movs	r1, #0
  410f06:	4630      	mov	r0, r6
  410f08:	f001 fd30 	bl	41296c <.LFE149>

00410f0c <.LVL5>:
  410f0c:	68bb      	ldr	r3, [r7, #8]
  410f0e:	442b      	add	r3, r5
  410f10:	4298      	cmp	r0, r3
  410f12:	d004      	beq.n	410f1e <.LVL8>

00410f14 <.LVL6>:
  410f14:	4630      	mov	r0, r6
  410f16:	f002 f85d 	bl	412fd4 <__malloc_unlock>

00410f1a <.LVL7>:
  410f1a:	2000      	movs	r0, #0
  410f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00410f1e <.LVL8>:
  410f1e:	4261      	negs	r1, r4
  410f20:	4630      	mov	r0, r6

00410f22 <.LVL9>:
  410f22:	f001 fd23 	bl	41296c <.LFE149>

00410f26 <.LVL10>:
  410f26:	3001      	adds	r0, #1

00410f28 <.LVL11>:
  410f28:	d00d      	beq.n	410f46 <.LVL16>
  410f2a:	4a10      	ldr	r2, [pc, #64]	; (410f6c <.LVL22+0xa>)
  410f2c:	68b9      	ldr	r1, [r7, #8]
  410f2e:	6813      	ldr	r3, [r2, #0]
  410f30:	1b2d      	subs	r5, r5, r4

00410f32 <.LVL12>:
  410f32:	f045 0501 	orr.w	r5, r5, #1
  410f36:	4630      	mov	r0, r6

00410f38 <.LVL13>:
  410f38:	1b1c      	subs	r4, r3, r4

00410f3a <.LVL14>:
  410f3a:	604d      	str	r5, [r1, #4]
  410f3c:	6014      	str	r4, [r2, #0]
  410f3e:	f002 f849 	bl	412fd4 <__malloc_unlock>

00410f42 <.LVL15>:
  410f42:	2001      	movs	r0, #1
  410f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00410f46 <.LVL16>:
  410f46:	2100      	movs	r1, #0
  410f48:	4630      	mov	r0, r6

00410f4a <.LVL17>:
  410f4a:	f001 fd0f 	bl	41296c <.LFE149>

00410f4e <.LVL18>:
  410f4e:	68ba      	ldr	r2, [r7, #8]
  410f50:	1a83      	subs	r3, r0, r2

00410f52 <.LVL19>:
  410f52:	2b0f      	cmp	r3, #15
  410f54:	ddde      	ble.n	410f14 <.LVL6>
  410f56:	4c06      	ldr	r4, [pc, #24]	; (410f70 <.LVL22+0xe>)

00410f58 <.LVL20>:
  410f58:	4904      	ldr	r1, [pc, #16]	; (410f6c <.LVL22+0xa>)
  410f5a:	6824      	ldr	r4, [r4, #0]
  410f5c:	f043 0301 	orr.w	r3, r3, #1

00410f60 <.LVL21>:
  410f60:	1b00      	subs	r0, r0, r4

00410f62 <.LVL22>:
  410f62:	6053      	str	r3, [r2, #4]
  410f64:	6008      	str	r0, [r1, #0]
  410f66:	e7d5      	b.n	410f14 <.LVL6>
  410f68:	2040cc80 	.word	0x2040cc80
  410f6c:	2040dc28 	.word	0x2040dc28
  410f70:	2040dd38 	.word	0x2040dd38

Disassembly of section .text.Hash_DRBG_Reseed%129:

00410f74 <Hash_DRBG_Reseed>:
{
  410f74:	b5f0      	push	{r4, r5, r6, r7, lr}

00410f76 <.LCFI10>:
  410f76:	b093      	sub	sp, #76	; 0x4c

00410f78 <.LCFI11>:
  410f78:	4604      	mov	r4, r0
    if (Hash_df(drbg, seed, sizeof(seed), drbgReseed, drbg->V, sizeof(drbg->V),
  410f7a:	f100 0608 	add.w	r6, r0, #8
  410f7e:	9203      	str	r2, [sp, #12]
  410f80:	9102      	str	r1, [sp, #8]
  410f82:	2237      	movs	r2, #55	; 0x37

00410f84 <.LVL63>:
  410f84:	9201      	str	r2, [sp, #4]
  410f86:	9600      	str	r6, [sp, #0]
  410f88:	2301      	movs	r3, #1
  410f8a:	a904      	add	r1, sp, #16

00410f8c <.LVL64>:
  410f8c:	f7fd fa74 	bl	40e478 <.LFE19>

00410f90 <.LVL65>:
  410f90:	b118      	cbz	r0, 410f9a <.LCFI13>
        return DRBG_FAILURE;
  410f92:	2302      	movs	r3, #2
}
  410f94:	4618      	mov	r0, r3
  410f96:	b013      	add	sp, #76	; 0x4c

00410f98 <.LCFI12>:
  410f98:	bdf0      	pop	{r4, r5, r6, r7, pc}

00410f9a <.LCFI13>:
    XMEMCPY(drbg->V, seed, sizeof(drbg->V));
  410f9a:	f10d 0e10 	add.w	lr, sp, #16
  410f9e:	4635      	mov	r5, r6
  410fa0:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
  410fa4:	4677      	mov	r7, lr
  410fa6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
  410fa8:	6028      	str	r0, [r5, #0]
  410faa:	6069      	str	r1, [r5, #4]
  410fac:	60aa      	str	r2, [r5, #8]
  410fae:	60eb      	str	r3, [r5, #12]
  410fb0:	46be      	mov	lr, r7
  410fb2:	3510      	adds	r5, #16
  410fb4:	4567      	cmp	r7, ip
  410fb6:	d1f5      	bne.n	410fa4 <.LCFI13+0xa>
  410fb8:	6838      	ldr	r0, [r7, #0]
  410fba:	6028      	str	r0, [r5, #0]
  410fbc:	88ba      	ldrh	r2, [r7, #4]
  410fbe:	79bb      	ldrb	r3, [r7, #6]
  410fc0:	80aa      	strh	r2, [r5, #4]
  410fc2:	71ab      	strb	r3, [r5, #6]

00410fc4 <.LBB43>:
    volatile byte* z = (volatile byte*)mem;
  410fc4:	ab04      	add	r3, sp, #16

00410fc6 <.LVL68>:
    while (len--) *z++ = 0;
  410fc6:	2000      	movs	r0, #0
  410fc8:	f10d 0147 	add.w	r1, sp, #71	; 0x47

00410fcc <.LVL69>:
  410fcc:	1c5a      	adds	r2, r3, #1

00410fce <.LVL70>:
  410fce:	7018      	strb	r0, [r3, #0]

00410fd0 <.LVL71>:
  410fd0:	4613      	mov	r3, r2
  410fd2:	428a      	cmp	r2, r1
  410fd4:	d1fa      	bne.n	410fcc <.LVL69>

00410fd6 <.LBE43>:
    if (Hash_df(drbg, drbg->C, sizeof(drbg->C), drbgInitC, drbg->V,
  410fd6:	2300      	movs	r3, #0
  410fd8:	9303      	str	r3, [sp, #12]
  410fda:	9302      	str	r3, [sp, #8]
  410fdc:	2237      	movs	r2, #55	; 0x37
  410fde:	9201      	str	r2, [sp, #4]
  410fe0:	9600      	str	r6, [sp, #0]
  410fe2:	f104 013f 	add.w	r1, r4, #63	; 0x3f
  410fe6:	4620      	mov	r0, r4
  410fe8:	f7fd fa46 	bl	40e478 <.LFE19>

00410fec <.LVL73>:
  410fec:	4603      	mov	r3, r0
  410fee:	b108      	cbz	r0, 410ff4 <.LVL73+0x8>
        return DRBG_FAILURE;
  410ff0:	2302      	movs	r3, #2
  410ff2:	e7cf      	b.n	410f94 <.LVL65+0x4>
    drbg->reseedCtr = 1;
  410ff4:	2201      	movs	r2, #1
  410ff6:	6022      	str	r2, [r4, #0]
    drbg->lastBlock = 0;
  410ff8:	2200      	movs	r2, #0
  410ffa:	6062      	str	r2, [r4, #4]
    drbg->matchCount = 0;
  410ffc:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76
    return DRBG_SUCCESS;
  411000:	e7c8      	b.n	410f94 <.LVL65+0x4>

Disassembly of section .text.SYS_CMD_DELETE%130:

00411004 <SYS_CMD_DELETE>:
{
  411004:	b508      	push	{r3, lr}

00411006 <.LCFI35>:
    SYS_CMD_DEVICE_NODE* p_listnode = cmdIODevList.head;
  411006:	4b21      	ldr	r3, [pc, #132]	; (41108c <.LVL308+0x6>)
  411008:	685a      	ldr	r2, [r3, #4]

0041100a <.LVL288>:
    if((p_listnode==NULL) || (pDevNode==NULL))
  41100a:	4601      	mov	r1, r0
  41100c:	2800      	cmp	r0, #0
  41100e:	bf18      	it	ne
  411010:	2a00      	cmpne	r2, #0
  411012:	bf0c      	ite	eq
  411014:	2001      	moveq	r0, #1

00411016 <.LVL289>:
  411016:	2000      	movne	r0, #0
  411018:	d035      	beq.n	411086 <.LVL308>
    if(p_listnode == pDevNode)
  41101a:	428a      	cmp	r2, r1
  41101c:	d009      	beq.n	411032 <.LVL295>

0041101e <.LVL290>:
    while (p_listnode)
  41101e:	b13a      	cbz	r2, 411030 <.LVL294>
        p_listnode   = p_listnode->next;
  411020:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98

00411024 <.LVL292>:
    while (p_listnode)
  411024:	2b00      	cmp	r3, #0
  411026:	d02d      	beq.n	411084 <.LVL307>
        if(p_listnode == pDevNode)
  411028:	4299      	cmp	r1, r3
  41102a:	d017      	beq.n	41105c <.LVL302>
        p_listnode   = p_listnode->next;
  41102c:	461a      	mov	r2, r3

0041102e <.LVL293>:
  41102e:	e7f7      	b.n	411020 <.LVL290+0x2>

00411030 <.LVL294>:
  411030:	bd08      	pop	{r3, pc}

00411032 <.LVL295>:
        cmdIODevList.num--;
  411032:	4b16      	ldr	r3, [pc, #88]	; (41108c <.LVL308+0x6>)
  411034:	6818      	ldr	r0, [r3, #0]
  411036:	3801      	subs	r0, #1
  411038:	6018      	str	r0, [r3, #0]
        if(cmdIODevList.tail == pDevNode)
  41103a:	689b      	ldr	r3, [r3, #8]
  41103c:	4299      	cmp	r1, r3
  41103e:	d008      	beq.n	411052 <.LVL299>
            cmdIODevList.head = p_listnode->next;
  411040:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98

00411044 <.LVL296>:
  411044:	4b11      	ldr	r3, [pc, #68]	; (41108c <.LVL308+0x6>)
  411046:	605a      	str	r2, [r3, #4]

00411048 <.LVL297>:
        free(pDevNode);
  411048:	4608      	mov	r0, r1
  41104a:	f001 ff45 	bl	412ed8 <.LFE0>

0041104e <.LVL298>:
        return true;
  41104e:	2001      	movs	r0, #1
  411050:	bd08      	pop	{r3, pc}

00411052 <.LVL299>:
            cmdIODevList.head = NULL;
  411052:	4b0e      	ldr	r3, [pc, #56]	; (41108c <.LVL308+0x6>)
  411054:	2200      	movs	r2, #0

00411056 <.LVL300>:
  411056:	605a      	str	r2, [r3, #4]

00411058 <.LVL301>:
            cmdIODevList.tail = NULL;
  411058:	609a      	str	r2, [r3, #8]
  41105a:	e7f5      	b.n	411048 <.LVL297>

0041105c <.LVL302>:
            pre_listnode->next = p_listnode->next;
  41105c:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98

00411060 <.LVL303>:
  411060:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
            if (cmdIODevList.tail==pDevNode) {
  411064:	4909      	ldr	r1, [pc, #36]	; (41108c <.LVL308+0x6>)
  411066:	6889      	ldr	r1, [r1, #8]
  411068:	428b      	cmp	r3, r1
  41106a:	d008      	beq.n	41107e <.LVL306>
            cmdIODevList.num--;
  41106c:	4907      	ldr	r1, [pc, #28]	; (41108c <.LVL308+0x6>)
  41106e:	680a      	ldr	r2, [r1, #0]

00411070 <.LVL304>:
  411070:	3a01      	subs	r2, #1
  411072:	600a      	str	r2, [r1, #0]
            free(pDevNode);
  411074:	4618      	mov	r0, r3
  411076:	f001 ff2f 	bl	412ed8 <.LFE0>

0041107a <.LVL305>:
            return true;
  41107a:	2001      	movs	r0, #1
  41107c:	bd08      	pop	{r3, pc}

0041107e <.LVL306>:
                cmdIODevList.tail = pre_listnode;
  41107e:	4903      	ldr	r1, [pc, #12]	; (41108c <.LVL308+0x6>)
  411080:	608a      	str	r2, [r1, #8]
  411082:	e7f3      	b.n	41106c <.LVL303+0xc>

00411084 <.LVL307>:
  411084:	bd08      	pop	{r3, pc}

00411086 <.LVL308>:
        return false;
  411086:	2000      	movs	r0, #0
}
  411088:	bd08      	pop	{r3, pc}
  41108a:	bf00      	nop
  41108c:	2040dcf8 	.word	0x2040dcf8

Disassembly of section .text.wc_Des_CbcDecrypt%131:

00411090 <wc_Des_CbcDecrypt>:
    {
  411090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

00411094 <.LCFI12>:
        word32 blocks = sz / DES_BLOCK_SIZE;
  411094:	08db      	lsrs	r3, r3, #3

00411096 <.LVL195>:
        while (blocks--) {
  411096:	2b00      	cmp	r3, #0
  411098:	d03b      	beq.n	411112 <.LBE265>
  41109a:	4604      	mov	r4, r0
  41109c:	460d      	mov	r5, r1
  41109e:	4617      	mov	r7, r2
  4110a0:	f103 39ff 	add.w	r9, r3, #4294967295

004110a4 <.LVL196>:
  4110a4:	f101 38ff 	add.w	r8, r1, #4294967295
            XMEMCPY(des->tmp, in, DES_BLOCK_SIZE);
  4110a8:	f100 0608 	add.w	r6, r0, #8
  4110ac:	e016      	b.n	4110dc <.LBE261+0x1a>

004110ae <.LBB261>:
    for (i = 0; i < n; i++) r[i] ^= a[i];
  4110ae:	f8d8 3001 	ldr.w	r3, [r8, #1]
  4110b2:	6822      	ldr	r2, [r4, #0]
  4110b4:	4053      	eors	r3, r2
  4110b6:	f8c8 3001 	str.w	r3, [r8, #1]

004110ba <.LVL198>:
  4110ba:	686b      	ldr	r3, [r5, #4]
  4110bc:	6862      	ldr	r2, [r4, #4]
  4110be:	4053      	eors	r3, r2
  4110c0:	606b      	str	r3, [r5, #4]

004110c2 <.LBE261>:
            XMEMCPY(des->reg, des->tmp, DES_BLOCK_SIZE);
  4110c2:	6832      	ldr	r2, [r6, #0]
  4110c4:	6873      	ldr	r3, [r6, #4]
  4110c6:	6022      	str	r2, [r4, #0]
  4110c8:	6063      	str	r3, [r4, #4]
            out += DES_BLOCK_SIZE;
  4110ca:	3508      	adds	r5, #8
            in  += DES_BLOCK_SIZE;
  4110cc:	3708      	adds	r7, #8
        while (blocks--) {
  4110ce:	f109 39ff 	add.w	r9, r9, #4294967295
  4110d2:	f108 0808 	add.w	r8, r8, #8
  4110d6:	f1b9 3fff 	cmp.w	r9, #4294967295
  4110da:	d01a      	beq.n	411112 <.LBE265>
            XMEMCPY(des->tmp, in, DES_BLOCK_SIZE);
  4110dc:	683a      	ldr	r2, [r7, #0]
  4110de:	687b      	ldr	r3, [r7, #4]
  4110e0:	6032      	str	r2, [r6, #0]
  4110e2:	6073      	str	r3, [r6, #4]
            DesProcessBlock(des, (byte*)des->tmp, out);
  4110e4:	462a      	mov	r2, r5
  4110e6:	4631      	mov	r1, r6
  4110e8:	4620      	mov	r0, r4
  4110ea:	f7fd fe71 	bl	40edd0 <.LFE168>

004110ee <.LBB267>:
    if (((wolfssl_word)buf | (wolfssl_word)mask | count) % WOLFSSL_WORD_SIZE == 0)
  4110ee:	ea45 0304 	orr.w	r3, r5, r4
  4110f2:	f013 0f03 	tst.w	r3, #3
  4110f6:	d0da      	beq.n	4110ae <.LBB261>
  4110f8:	1e61      	subs	r1, r4, #1
  4110fa:	f105 0e07 	add.w	lr, r5, #7
  4110fe:	4643      	mov	r3, r8

00411100 <.LBB265>:
        for (i = 0; i < count; i++) b[i] ^= m[i];
  411100:	785a      	ldrb	r2, [r3, #1]
  411102:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  411106:	4042      	eors	r2, r0
  411108:	f803 2f01 	strb.w	r2, [r3, #1]!
  41110c:	4573      	cmp	r3, lr
  41110e:	d1f7      	bne.n	411100 <.LBB265>
  411110:	e7d7      	b.n	4110c2 <.LBE261>

00411112 <.LBE265>:
    }
  411112:	2000      	movs	r0, #0
  411114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

Disassembly of section .text.wc_Md5Update%132:

00411118 <wc_Md5Update>:
    if (md5 == NULL || (data == NULL && len > 0)) {
  411118:	b3a0      	cbz	r0, 411184 <.LCFI4>
{
  41111a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

0041111e <.LCFI3>:
  41111e:	460f      	mov	r7, r1
  411120:	4615      	mov	r5, r2
  411122:	4606      	mov	r6, r0
    if (md5 == NULL || (data == NULL && len > 0)) {
  411124:	b901      	cbnz	r1, 411128 <.LCFI3+0xa>
  411126:	bb82      	cbnz	r2, 41118a <.LCFI5>
    local = (byte*)md5->buffer;
  411128:	f106 080c 	add.w	r8, r6, #12

0041112c <.LVL331>:
    if (md5->buffLen >= MD5_BLOCK_SIZE)
  41112c:	6833      	ldr	r3, [r6, #0]
  41112e:	2b3f      	cmp	r3, #63	; 0x3f
  411130:	d82f      	bhi.n	411192 <.LVL346>
    while (len) {
  411132:	b395      	cbz	r5, 41119a <.LVL348>

00411134 <.LBB141>:
            md5->buffLen = 0;
  411134:	f04f 0900 	mov.w	r9, #0
  411138:	e002      	b.n	411140 <.LBB146>

0041113a <.LVL332>:
  41113a:	f8c6 9000 	str.w	r9, [r6]

0041113e <.LBE141>:
    while (len) {
  41113e:	b1f5      	cbz	r5, 41117e <.LBE144>

00411140 <.LBB146>:
        word32 add = min(len, MD5_BLOCK_SIZE - md5->buffLen);
  411140:	6830      	ldr	r0, [r6, #0]

00411142 <.LVL333>:
  411142:	f1c0 0440 	rsb	r4, r0, #64	; 0x40

00411146 <.LBB142>:
        return a > b ? b : a;
  411146:	42ac      	cmp	r4, r5
  411148:	bf28      	it	cs
  41114a:	462c      	movcs	r4, r5

0041114c <.LBE142>:
        XMEMCPY(&local[md5->buffLen], data, add);
  41114c:	4622      	mov	r2, r4
  41114e:	4639      	mov	r1, r7
  411150:	4440      	add	r0, r8
  411152:	f7fd fa2f 	bl	40e5b4 <.LFE14>

00411156 <.LVL336>:
        md5->buffLen += add;
  411156:	6833      	ldr	r3, [r6, #0]
  411158:	4423      	add	r3, r4
  41115a:	6033      	str	r3, [r6, #0]
        data         += add;
  41115c:	4427      	add	r7, r4
        len          -= add;
  41115e:	1b2d      	subs	r5, r5, r4
        if (md5->buffLen == MD5_BLOCK_SIZE) {
  411160:	2b40      	cmp	r3, #64	; 0x40
  411162:	d1ec      	bne.n	41113e <.LBE141>
            XTRANSFORM(md5, local);
  411164:	4630      	mov	r0, r6
  411166:	f7f8 fdb3 	bl	409cd0 <Transform>

0041116a <.LBB144>:
    word32 tmp = md5->loLen;
  41116a:	6872      	ldr	r2, [r6, #4]

0041116c <.LVL340>:
    if ((md5->loLen += len) < tmp) {
  41116c:	f102 0340 	add.w	r3, r2, #64	; 0x40
  411170:	6073      	str	r3, [r6, #4]
  411172:	429a      	cmp	r2, r3
  411174:	d9e1      	bls.n	41113a <.LVL332>
        md5->hiLen++;                       /* carry low to high */
  411176:	68b3      	ldr	r3, [r6, #8]
  411178:	3301      	adds	r3, #1
  41117a:	60b3      	str	r3, [r6, #8]
  41117c:	e7dd      	b.n	41113a <.LVL332>

0041117e <.LBE144>:
    return ret;
  41117e:	2000      	movs	r0, #0
  411180:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00411184 <.LCFI4>:
        return BAD_FUNC_ARG;
  411184:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00411188 <.LVL343>:
  411188:	4770      	bx	lr

0041118a <.LCFI5>:
  41118a:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041118e <.LVL345>:
  41118e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00411192 <.LVL346>:
        return BUFFER_E;
  411192:	f06f 0083 	mvn.w	r0, #131	; 0x83

00411196 <.LVL347>:
  411196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0041119a <.LVL348>:
    return ret;
  41119a:	2000      	movs	r0, #0

0041119c <.LVL349>:
}
  41119c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

Disassembly of section .text.SYS_CMD_Initialize%133:

004111a0 <SYS_CMD_Initialize>:
{
  4111a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

004111a4 <.LCFI34>:
  4111a4:	4606      	mov	r6, r0

004111a6 <.LVL271>:
    CommandCleanup();       // just in case we have to deallocate previous data
  4111a6:	f000 ff5f 	bl	412068 <.LFE164>

004111aa <.LVL272>:
  4111aa:	2503      	movs	r5, #3

004111ac <.LBB45>:
        pN = (cmdNode*)malloc(sizeof(*pN));
  4111ac:	278c      	movs	r7, #140	; 0x8c
        pN->cmdBuff[0] = '\0';
  4111ae:	f04f 0800 	mov.w	r8, #0

004111b2 <.LBB46>:
    if(pL->head == 0)
  4111b2:	4c19      	ldr	r4, [pc, #100]	; (411218 <.LVL286+0x2>)

004111b4 <.LBE46>:
        pN = (cmdNode*)malloc(sizeof(*pN));
  4111b4:	4638      	mov	r0, r7
  4111b6:	f001 fe87 	bl	412ec8 <.LFE151>

004111ba <.LVL274>:
        if(!pN)
  4111ba:	4603      	mov	r3, r0
  4111bc:	b340      	cbz	r0, 411210 <.LBB53>
        pN->cmdBuff[0] = '\0';
  4111be:	f880 8008 	strb.w	r8, [r0, #8]

004111c2 <.LBB50>:
    if(pL->head == 0)
  4111c2:	6822      	ldr	r2, [r4, #0]
  4111c4:	b1ca      	cbz	r2, 4111fa <.LBB51>
        pN->next = pL->head;
  4111c6:	6002      	str	r2, [r0, #0]
        pN->prev = pL->tail;
  4111c8:	6862      	ldr	r2, [r4, #4]
  4111ca:	6042      	str	r2, [r0, #4]
        pL->tail->next = pN;
  4111cc:	6010      	str	r0, [r2, #0]
        pL->head->prev = pN;
  4111ce:	6822      	ldr	r2, [r4, #0]
  4111d0:	6050      	str	r0, [r2, #4]
        pL->head = pN;
  4111d2:	6020      	str	r0, [r4, #0]

004111d4 <.LBE45>:
    for(ix = 0; ix<COMMAND_HISTORY_DEPTH; ix++)
  4111d4:	3d01      	subs	r5, #1

004111d6 <.LVL277>:
  4111d6:	d1ed      	bne.n	4111b4 <.LBE46>
    _pCurrCmdN = 0;
  4111d8:	2200      	movs	r2, #0
  4111da:	4b10      	ldr	r3, [pc, #64]	; (41121c <.LVL286+0x6>)
  4111dc:	601a      	str	r2, [r3, #0]
    if (initConfig != NULL)
  4111de:	b18e      	cbz	r6, 411204 <.LBE51>
        SYS_CMDIO_ADD(&sysConsoleApi, &initConfig->consoleCmdIOParam, initConfig->consoleCmdIOParam);
  4111e0:	4631      	mov	r1, r6
  4111e2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
  4111e6:	480e      	ldr	r0, [pc, #56]	; (411220 <.LVL286+0xa>)

004111e8 <.LVL278>:
  4111e8:	f000 fd0a 	bl	411c00 <.LFE15>

004111ec <.LVL279>:
    _cmdAppData.moduleInFd = STDIN_FILENO;
  4111ec:	4b0d      	ldr	r3, [pc, #52]	; (411224 <.LVL286+0xe>)
  4111ee:	2200      	movs	r2, #0
  4111f0:	611a      	str	r2, [r3, #16]
    _cmdAppData.moduleOutFd = STDOUT_FILENO;
  4111f2:	2001      	movs	r0, #1
  4111f4:	6158      	str	r0, [r3, #20]
    return true;
  4111f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004111fa <.LBB51>:
        pL->head = pL->tail = pN;
  4111fa:	6060      	str	r0, [r4, #4]
  4111fc:	6020      	str	r0, [r4, #0]
        pN->next = pN->prev = pN;
  4111fe:	6058      	str	r0, [r3, #4]
  411200:	6018      	str	r0, [r3, #0]
  411202:	e7e7      	b.n	4111d4 <.LBE45>

00411204 <.LBE51>:
        SYS_CMDIO_ADD(&sysConsoleApi, NULL, SYS_CMD_SINGLE_CHARACTER_READ_CONSOLE_IO_PARAM);
  411204:	2200      	movs	r2, #0
  411206:	4611      	mov	r1, r2
  411208:	4805      	ldr	r0, [pc, #20]	; (411220 <.LVL286+0xa>)

0041120a <.LVL282>:
  41120a:	f000 fcf9 	bl	411c00 <.LFE15>

0041120e <.LVL283>:
  41120e:	e7ed      	b.n	4111ec <.LVL279>

00411210 <.LBB53>:
            return false;
  411210:	2000      	movs	r0, #0

00411212 <.LBE53>:
}
  411212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00411216 <.LVL286>:
  411216:	bf00      	nop
  411218:	2040dd0c 	.word	0x2040dd0c
  41121c:	2040dd1c 	.word	0x2040dd1c
  411220:	00412d5c 	.word	0x00412d5c
  411224:	2040dc8c 	.word	0x2040dc8c

Disassembly of section .text.wc_HmacUpdate%134:

00411228 <wc_HmacUpdate>:
    if (hmac == NULL) {
  411228:	2800      	cmp	r0, #0
  41122a:	d039      	beq.n	4112a0 <.LCFI3>
{
  41122c:	b570      	push	{r4, r5, r6, lr}

0041122e <.LCFI2>:
  41122e:	4604      	mov	r4, r0
  411230:	4616      	mov	r6, r2
  411232:	460d      	mov	r5, r1
    if (!hmac->innerHashKeyed) {
  411234:	f890 3225 	ldrb.w	r3, [r0, #549]	; 0x225
  411238:	b143      	cbz	r3, 41124c <.LVL124>

0041123a <.LVL123>:
    switch (hmac->macType) {
  41123a:	f894 3224 	ldrb.w	r3, [r4, #548]	; 0x224
  41123e:	2b05      	cmp	r3, #5
  411240:	d832      	bhi.n	4112a8 <.LCFI4>
  411242:	e8df f003 	tbb	[pc, r3]
  411246:	1109      	.short	0x1109
  411248:	1f263118 	.word	0x1f263118

0041124c <.LVL124>:
        ret = HmacKeyInnerHash(hmac);
  41124c:	f000 fdcc 	bl	411de8 <HmacKeyInnerHash>

00411250 <.LVL125>:
        if (ret != 0)
  411250:	4603      	mov	r3, r0
  411252:	2800      	cmp	r0, #0
  411254:	d0f1      	beq.n	41123a <.LVL123>
  411256:	e005      	b.n	411264 <.LVL128>

00411258 <.LVL126>:
            ret = wc_Md5Update(&hmac->hash.md5, msg, length);
  411258:	4632      	mov	r2, r6
  41125a:	4629      	mov	r1, r5
  41125c:	4620      	mov	r0, r4
  41125e:	f7ff ff5b 	bl	411118 <.LFE23>

00411262 <.LVL127>:
  411262:	4603      	mov	r3, r0

00411264 <.LVL128>:
}
  411264:	4618      	mov	r0, r3
  411266:	bd70      	pop	{r4, r5, r6, pc}

00411268 <.LVL129>:
            ret = wc_ShaUpdate(&hmac->hash.sha, msg, length);
  411268:	4632      	mov	r2, r6
  41126a:	4629      	mov	r1, r5
  41126c:	4620      	mov	r0, r4
  41126e:	f7fe fff7 	bl	410260 <.LFE27>

00411272 <.LVL130>:
  411272:	4603      	mov	r3, r0

00411274 <.LVL131>:
            break;
  411274:	e7f6      	b.n	411264 <.LVL128>

00411276 <.LVL132>:
            ret = wc_Sha256Update(&hmac->hash.sha256, msg, length);
  411276:	4632      	mov	r2, r6
  411278:	4629      	mov	r1, r5
  41127a:	4620      	mov	r0, r4
  41127c:	f7ff f84b 	bl	410316 <.LFE18>

00411280 <.LVL133>:
  411280:	4603      	mov	r3, r0

00411282 <.LVL134>:
            break;
  411282:	e7ef      	b.n	411264 <.LVL128>

00411284 <.LVL135>:
            ret = wc_Sha384Update(&hmac->hash.sha384, msg, length);
  411284:	4632      	mov	r2, r6
  411286:	4629      	mov	r1, r5
  411288:	4620      	mov	r0, r4
  41128a:	f7fe f9a2 	bl	40f5d2 <.LBE719>

0041128e <.LVL136>:
  41128e:	4603      	mov	r3, r0

00411290 <.LVL137>:
            break;
  411290:	e7e8      	b.n	411264 <.LVL128>

00411292 <.LVL138>:
            ret = wc_Sha512Update(&hmac->hash.sha512, msg, length);
  411292:	4632      	mov	r2, r6
  411294:	4629      	mov	r1, r5
  411296:	4620      	mov	r0, r4
  411298:	f7fe f926 	bl	40f4e8 <.LFE24>

0041129c <.LVL139>:
  41129c:	4603      	mov	r3, r0

0041129e <.LVL140>:
            break;
  41129e:	e7e1      	b.n	411264 <.LVL128>

004112a0 <.LCFI3>:
        return BAD_FUNC_ARG;
  4112a0:	f06f 03ac 	mvn.w	r3, #172	; 0xac
}
  4112a4:	4618      	mov	r0, r3

004112a6 <.LVL142>:
  4112a6:	4770      	bx	lr

004112a8 <.LCFI4>:
    switch (hmac->macType) {
  4112a8:	2300      	movs	r3, #0
  4112aa:	e7db      	b.n	411264 <.LVL128>

Disassembly of section .rodata.outputA%135:

004112ac <outputA>:
  4112ac:	ee04 3bc6 31b2 2cdf 0a63 fb1a 24e7 9d94     ...;.1.,c....$..
  4112bc:	5a00 7858 e151 79aa 475e 4773 b0c8 6256     .ZXxQ..y^GsG..Vb
  4112cc:	181c dcbd 8ddd fc99 c25f 20b9 d853 accf     ........_.. S...
  4112dc:	0bfb 83b8 0512 d1fa d6dd 71c0 8a31 1860     ...........q1.`.
  4112ec:	3bf0 f573 e4ed d0d4 f971 03de 7afd 10ea     .;s.....q....z..
  4112fc:	925d b899 99af 07aa db5b b94d 28aa 8dc1     ].......[.M..(..
  41130c:	4b17 ee56 012a 094d 9688 22ff c982 a855     .KV.*.M...."..U.
  41131c:	6919 69e0 8cfa 07e0 80a1 3a18 df07 17ae     .i.i.......:....

Disassembly of section .rodata.outputB%136:

0041132c <outputB>:
  41132c:	e1d3 c360 995b 40f3 62b2 6482 75d1 6010     ..`.[..@.b.d.u.`
  41133c:	04e0 a35d ff83 a557 737d 73a6 b8d2 0dd8     ..]...W.}s.s....
  41134c:	f6aa c3a6 915a 45bb d779 d03f fec8 11d1     ....Z..Ey.?.....
  41135c:	39b0 0613 8a82 eddf 8f52 8101 b321 bdfe     .9......R...!...
  41136c:	43c3 97e7 7db8 63bb 13db de33 d1d9 e1ec     .C...}.c..3.....
  41137c:	cf77 b7a6 e81f 1dab 66a4 ed24 1564 1ce5     w........f$.d...
  41138c:	e2cd cac7 e286 9983 ea0e 91eb 0412 5215     ...............R
  41139c:	228b 9195 8102 2db0 31d4 c9f4 04f7 df27     .".....-.1....'.

Disassembly of section .text.SendCommandPrint%137:

004113ac <SendCommandPrint>:
{
  4113ac:	b40e      	push	{r1, r2, r3}

004113ae <.LCFI8>:
  4113ae:	b530      	push	{r4, r5, lr}

004113b0 <.LCFI9>:
  4113b0:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408

004113b4 <.LCFI10>:
  4113b4:	f20d 4314 	addw	r3, sp, #1044	; 0x414
  4113b8:	f853 2b04 	ldr.w	r2, [r3], #4

004113bc <.LVL30>:
    va_start( args, format );
  4113bc:	9301      	str	r3, [sp, #4]
    len = vsnprintf(tmpBuf, SYS_CMD_PRINT_BUFFER_SIZE, format, args);
  4113be:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4113c2:	a802      	add	r0, sp, #8

004113c4 <.LVL31>:
  4113c4:	f001 fb34 	bl	412a30 <.LFE1>

004113c8 <.LVL32>:
    if (len > 0 && len < SYS_CMD_PRINT_BUFFER_SIZE)
  4113c8:	1e42      	subs	r2, r0, #1
  4113ca:	f240 33fe 	movw	r3, #1022	; 0x3fe
  4113ce:	429a      	cmp	r2, r3
  4113d0:	d821      	bhi.n	411416 <.LVL39>
  4113d2:	4604      	mov	r4, r0
        tmpBuf[len] = '\0';
  4113d4:	2200      	movs	r2, #0
  4113d6:	ab02      	add	r3, sp, #8
  4113d8:	541a      	strb	r2, [r3, r0]
        if (len + printBuffPtr >= SYS_CMD_PRINT_BUFFER_SIZE)
  4113da:	4b12      	ldr	r3, [pc, #72]	; (411424 <.LCFI13+0x4>)
  4113dc:	681b      	ldr	r3, [r3, #0]
  4113de:	4403      	add	r3, r0
  4113e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  4113e4:	d301      	bcc.n	4113ea <.LVL32+0x22>
            printBuffPtr = 0;
  4113e6:	4b0f      	ldr	r3, [pc, #60]	; (411424 <.LCFI13+0x4>)
  4113e8:	601a      	str	r2, [r3, #0]
        strcpy(&printBuff[printBuffPtr], tmpBuf);
  4113ea:	4b0e      	ldr	r3, [pc, #56]	; (411424 <.LCFI13+0x4>)
  4113ec:	681b      	ldr	r3, [r3, #0]
  4113ee:	4d0e      	ldr	r5, [pc, #56]	; (411428 <.LCFI13+0x8>)
  4113f0:	441d      	add	r5, r3
  4113f2:	a902      	add	r1, sp, #8
  4113f4:	4628      	mov	r0, r5

004113f6 <.LVL33>:
  4113f6:	f7fe fd63 	bl	40fec0 <.LFE166>

004113fa <.LVL34>:
        SendCommandMessage(NULL, &printBuff[printBuffPtr]);
  4113fa:	4629      	mov	r1, r5
  4113fc:	2000      	movs	r0, #0
  4113fe:	f001 fca1 	bl	412d44 <.LFE18>

00411402 <.LVL35>:
        if (padding > 0)
  411402:	f014 0203 	ands.w	r2, r4, #3

00411406 <.LVL36>:
            padding = 4 - padding;
  411406:	bf18      	it	ne
  411408:	f1c2 0204 	rsbne	r2, r2, #4
        printBuffPtr += len + padding;
  41140c:	4b05      	ldr	r3, [pc, #20]	; (411424 <.LCFI13+0x4>)
  41140e:	6819      	ldr	r1, [r3, #0]
  411410:	440c      	add	r4, r1

00411412 <.LVL38>:
  411412:	4414      	add	r4, r2
  411414:	601c      	str	r4, [r3, #0]

00411416 <.LVL39>:
}
  411416:	f50d 6d81 	add.w	sp, sp, #1032	; 0x408

0041141a <.LCFI11>:
  41141a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}

0041141e <.LCFI12>:
  41141e:	b003      	add	sp, #12

00411420 <.LCFI13>:
  411420:	4770      	bx	lr
  411422:	bf00      	nop
  411424:	2040dd20 	.word	0x2040dd20
  411428:	2040d088 	.word	0x2040d088

Disassembly of section .text.SYS_CMD_PRINT%138:

0041142c <SYS_CMD_PRINT>:
{
  41142c:	b40f      	push	{r0, r1, r2, r3}

0041142e <.LCFI19>:
  41142e:	b530      	push	{r4, r5, lr}

00411430 <.LCFI20>:
  411430:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c

00411434 <.LCFI21>:
  411434:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
  411438:	f853 2b04 	ldr.w	r2, [r3], #4

0041143c <.LVL125>:
    va_start( args, format );
  41143c:	9301      	str	r3, [sp, #4]
    len = vsnprintf(tmpBuf, SYS_CMD_PRINT_BUFFER_SIZE, format, args);
  41143e:	f44f 6180 	mov.w	r1, #1024	; 0x400
  411442:	a802      	add	r0, sp, #8
  411444:	f001 faf4 	bl	412a30 <.LFE1>

00411448 <.LVL126>:
    if (len > 0 && len < SYS_CMD_PRINT_BUFFER_SIZE)
  411448:	1e42      	subs	r2, r0, #1
  41144a:	f240 33fe 	movw	r3, #1022	; 0x3fe
  41144e:	429a      	cmp	r2, r3
  411450:	d821      	bhi.n	411496 <.LVL133>
  411452:	4604      	mov	r4, r0
        tmpBuf[len] = '\0';
  411454:	2200      	movs	r2, #0
  411456:	ab02      	add	r3, sp, #8
  411458:	541a      	strb	r2, [r3, r0]
        if (len + printBuffPtr >= SYS_CMD_PRINT_BUFFER_SIZE)
  41145a:	4b12      	ldr	r3, [pc, #72]	; (4114a4 <.LCFI24+0x4>)
  41145c:	681b      	ldr	r3, [r3, #0]
  41145e:	4403      	add	r3, r0
  411460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  411464:	d301      	bcc.n	41146a <.LVL126+0x22>
            printBuffPtr = 0;
  411466:	4b0f      	ldr	r3, [pc, #60]	; (4114a4 <.LCFI24+0x4>)
  411468:	601a      	str	r2, [r3, #0]
        strcpy(&printBuff[printBuffPtr], tmpBuf);
  41146a:	4b0e      	ldr	r3, [pc, #56]	; (4114a4 <.LCFI24+0x4>)
  41146c:	681b      	ldr	r3, [r3, #0]
  41146e:	4d0e      	ldr	r5, [pc, #56]	; (4114a8 <.LCFI24+0x8>)
  411470:	441d      	add	r5, r3
  411472:	a902      	add	r1, sp, #8
  411474:	4628      	mov	r0, r5

00411476 <.LVL127>:
  411476:	f7fe fd23 	bl	40fec0 <.LFE166>

0041147a <.LVL128>:
        SendCommandMessage(NULL, &printBuff[printBuffPtr]);
  41147a:	4629      	mov	r1, r5
  41147c:	2000      	movs	r0, #0
  41147e:	f001 fc61 	bl	412d44 <.LFE18>

00411482 <.LVL129>:
        if (padding > 0)
  411482:	f014 0203 	ands.w	r2, r4, #3

00411486 <.LVL130>:
            padding = 4 - padding;
  411486:	bf18      	it	ne
  411488:	f1c2 0204 	rsbne	r2, r2, #4
        printBuffPtr += len + padding;
  41148c:	4b05      	ldr	r3, [pc, #20]	; (4114a4 <.LCFI24+0x4>)
  41148e:	6819      	ldr	r1, [r3, #0]
  411490:	440c      	add	r4, r1

00411492 <.LVL132>:
  411492:	4414      	add	r4, r2
  411494:	601c      	str	r4, [r3, #0]

00411496 <.LVL133>:
}
  411496:	f20d 4d0c 	addw	sp, sp, #1036	; 0x40c

0041149a <.LCFI22>:
  41149a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}

0041149e <.LCFI23>:
  41149e:	b004      	add	sp, #16

004114a0 <.LCFI24>:
  4114a0:	4770      	bx	lr
  4114a2:	bf00      	nop
  4114a4:	2040dd20 	.word	0x2040dd20
  4114a8:	2040d088 	.word	0x2040d088

Disassembly of section .text.timer_addToList%139:

004114ac <timer_addToList>:
{
  4114ac:	b538      	push	{r3, r4, r5, lr}

004114ae <.LCFI3>:
  4114ae:	4605      	mov	r5, r0
    SYS_TIME_TIMER_OBJ *tmr = counter->tmrActive;
  4114b0:	4b1d      	ldr	r3, [pc, #116]	; (411528 <.LVL43+0x4>)
  4114b2:	6adc      	ldr	r4, [r3, #44]	; 0x2c

004114b4 <.LVL27>:
    time_resourceLock();
  4114b4:	f7fb f8da 	bl	40c66c <.LFE1>

004114b8 <.LVL28>:
    while(tmr != NULL)
  4114b8:	b324      	cbz	r4, 411504 <.LVL40>
        timeTotal += tmr->timeRemaining;
  4114ba:	6922      	ldr	r2, [r4, #16]

004114bc <.LVL29>:
        if(timeTotal > timer->timeRemaining)
  4114bc:	6928      	ldr	r0, [r5, #16]
  4114be:	4282      	cmp	r2, r0
  4114c0:	d80c      	bhi.n	4114dc <.LVL35>
        tmr = tmr->tmrNext;
  4114c2:	6a23      	ldr	r3, [r4, #32]

004114c4 <.LVL31>:
    while(tmr != NULL)
  4114c4:	b1fb      	cbz	r3, 411506 <.LVL41>
        timeTotal += tmr->timeRemaining;
  4114c6:	6919      	ldr	r1, [r3, #16]
  4114c8:	440a      	add	r2, r1
        if(timeTotal > timer->timeRemaining)
  4114ca:	4282      	cmp	r2, r0
  4114cc:	d807      	bhi.n	4114de <.LVL36>
        tmr = tmr->tmrNext;
  4114ce:	461c      	mov	r4, r3

004114d0 <.LVL33>:
  4114d0:	e7f7      	b.n	4114c2 <.LVL29+0x6>

004114d2 <.LVL34>:
            timer->timeRemaining -= timeTotal;
  4114d2:	692b      	ldr	r3, [r5, #16]
  4114d4:	1a9b      	subs	r3, r3, r2
  4114d6:	612b      	str	r3, [r5, #16]
  4114d8:	2300      	movs	r3, #0
  4114da:	e008      	b.n	4114ee <.LVL38>

004114dc <.LVL35>:
    SYS_TIME_TIMER_OBJ *tmr = counter->tmrActive;
  4114dc:	4623      	mov	r3, r4

004114de <.LVL36>:
    if(tmr == counter->tmrActive)
  4114de:	4912      	ldr	r1, [pc, #72]	; (411528 <.LVL43+0x4>)
  4114e0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4114e2:	4299      	cmp	r1, r3
  4114e4:	d013      	beq.n	41150e <.LVL41+0x8>
            timer->timeRemaining -= (timeTotal - tmr->timeRemaining);
  4114e6:	6919      	ldr	r1, [r3, #16]
  4114e8:	1a8a      	subs	r2, r1, r2

004114ea <.LVL37>:
  4114ea:	4410      	add	r0, r2
  4114ec:	6128      	str	r0, [r5, #16]

004114ee <.LVL38>:
        timer->tmrNext = tmr;
  4114ee:	622b      	str	r3, [r5, #32]
        prevTmr->tmrNext = timer;
  4114f0:	6225      	str	r5, [r4, #32]
    if(timer->tmrNext != NULL)
  4114f2:	6a2b      	ldr	r3, [r5, #32]
  4114f4:	b11b      	cbz	r3, 4114fe <.LVL38+0x10>
        timer->tmrNext->timeRemaining -= timer->timeRemaining;
  4114f6:	691a      	ldr	r2, [r3, #16]
  4114f8:	6929      	ldr	r1, [r5, #16]
  4114fa:	1a52      	subs	r2, r2, r1
  4114fc:	611a      	str	r2, [r3, #16]
    time_resourceUnlock();
  4114fe:	f001 f9c1 	bl	412884 <.LFE14>

00411502 <.LVL39>:
    return;
  411502:	bd38      	pop	{r3, r4, r5, pc}

00411504 <.LVL40>:
    uint32_t timeTotal = 0;
  411504:	2200      	movs	r2, #0

00411506 <.LVL41>:
    if(tmr == counter->tmrActive)
  411506:	4b08      	ldr	r3, [pc, #32]	; (411528 <.LVL43+0x4>)
  411508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  41150a:	2b00      	cmp	r3, #0
  41150c:	d1e1      	bne.n	4114d2 <.LVL34>
        timer->tmrNext = prevTmr;
  41150e:	622c      	str	r4, [r5, #32]
        counter->tmrActive = timer;
  411510:	4b05      	ldr	r3, [pc, #20]	; (411528 <.LVL43+0x4>)
  411512:	62dd      	str	r5, [r3, #44]	; 0x2c
        counter->tmrElapsed = false;
  411514:	2200      	movs	r2, #0

00411516 <.LVL42>:
  411516:	625a      	str	r2, [r3, #36]	; 0x24
        if(counter->interruptContext == false)
  411518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  41151a:	2b00      	cmp	r3, #0
  41151c:	d1e9      	bne.n	4114f2 <.LVL38+0x4>
            timerHardwarePeriod_update(counter);
  41151e:	4802      	ldr	r0, [pc, #8]	; (411528 <.LVL43+0x4>)
  411520:	f000 ffcc 	bl	4124bc <.LFE148>

00411524 <.LVL43>:
  411524:	e7e5      	b.n	4114f2 <.LVL38+0x4>
  411526:	bf00      	nop
  411528:	2040dbf8 	.word	0x2040dbf8

Disassembly of section .text.__multadd%140:

0041152c <__multadd>:
  41152c:	b5f0      	push	{r4, r5, r6, r7, lr}

0041152e <.LCFI1>:
  41152e:	690c      	ldr	r4, [r1, #16]
  411530:	b083      	sub	sp, #12

00411532 <.LCFI2>:
  411532:	460d      	mov	r5, r1
  411534:	4606      	mov	r6, r0

00411536 <.LVL13>:
  411536:	f101 0e14 	add.w	lr, r1, #20

0041153a <.LVL14>:
  41153a:	2700      	movs	r7, #0

0041153c <.LVL15>:
  41153c:	f8de 0000 	ldr.w	r0, [lr]

00411540 <.LVL16>:
  411540:	b281      	uxth	r1, r0
  411542:	fb02 3301 	mla	r3, r2, r1, r3

00411546 <.LVL17>:
  411546:	0c01      	lsrs	r1, r0, #16
  411548:	0c18      	lsrs	r0, r3, #16

0041154a <.LVL18>:
  41154a:	fb02 0101 	mla	r1, r2, r1, r0

0041154e <.LVL19>:
  41154e:	b29b      	uxth	r3, r3

00411550 <.LVL20>:
  411550:	3701      	adds	r7, #1

00411552 <.LVL21>:
  411552:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  411556:	42bc      	cmp	r4, r7
  411558:	f84e 3b04 	str.w	r3, [lr], #4

0041155c <.LVL22>:
  41155c:	ea4f 4311 	mov.w	r3, r1, lsr #16

00411560 <.LVL23>:
  411560:	dcec      	bgt.n	41153c <.LVL15>
  411562:	b13b      	cbz	r3, 411574 <.LVL26+0x4>
  411564:	68aa      	ldr	r2, [r5, #8]

00411566 <.LVL24>:
  411566:	4294      	cmp	r4, r2
  411568:	da07      	bge.n	41157a <.LCFI4>

0041156a <.LVL25>:
  41156a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  41156e:	3401      	adds	r4, #1

00411570 <.LVL26>:
  411570:	6153      	str	r3, [r2, #20]
  411572:	612c      	str	r4, [r5, #16]
  411574:	4628      	mov	r0, r5
  411576:	b003      	add	sp, #12

00411578 <.LCFI3>:
  411578:	bdf0      	pop	{r4, r5, r6, r7, pc}

0041157a <.LCFI4>:
  41157a:	6869      	ldr	r1, [r5, #4]

0041157c <.LVL28>:
  41157c:	9301      	str	r3, [sp, #4]
  41157e:	3101      	adds	r1, #1
  411580:	4630      	mov	r0, r6
  411582:	f000 fd03 	bl	411f8c <.LFE2>

00411586 <.LVL29>:
  411586:	692a      	ldr	r2, [r5, #16]
  411588:	3202      	adds	r2, #2
  41158a:	f105 010c 	add.w	r1, r5, #12
  41158e:	4607      	mov	r7, r0

00411590 <.LVL30>:
  411590:	0092      	lsls	r2, r2, #2
  411592:	300c      	adds	r0, #12

00411594 <.LVL31>:
  411594:	f7fd f80e 	bl	40e5b4 <.LFE14>

00411598 <.LBB12>:
  411598:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  41159a:	6869      	ldr	r1, [r5, #4]

0041159c <.LBE12>:
  41159c:	9b01      	ldr	r3, [sp, #4]

0041159e <.LBB15>:
  41159e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  4115a2:	6028      	str	r0, [r5, #0]
  4115a4:	f842 5021 	str.w	r5, [r2, r1, lsl #2]

004115a8 <.LBE15>:
  4115a8:	463d      	mov	r5, r7

004115aa <.LVL34>:
  4115aa:	e7de      	b.n	41156a <.LVL25>

Disassembly of section .text.wc_Des_CbcEncrypt%141:

004115ac <wc_Des_CbcEncrypt>:
    {
  4115ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

004115b0 <.LCFI11>:
        word32 blocks = sz / DES_BLOCK_SIZE;
  4115b0:	08db      	lsrs	r3, r3, #3

004115b2 <.LVL180>:
        while (blocks--) {
  4115b2:	b3bb      	cbz	r3, 411624 <.LBE253>
  4115b4:	4680      	mov	r8, r0
  4115b6:	460f      	mov	r7, r1
  4115b8:	f103 39ff 	add.w	r9, r3, #4294967295

004115bc <.LVL181>:
  4115bc:	1e56      	subs	r6, r2, #1
            xorbuf((byte*)des->reg, in, DES_BLOCK_SIZE);
  4115be:	4605      	mov	r5, r0
  4115c0:	1dc4      	adds	r4, r0, #7
  4115c2:	e01d      	b.n	411600 <.LBB255>

004115c4 <.LBB249>:
    for (i = 0; i < n; i++) r[i] ^= a[i];
  4115c4:	f8d8 3000 	ldr.w	r3, [r8]
  4115c8:	f8d6 2001 	ldr.w	r2, [r6, #1]
  4115cc:	4053      	eors	r3, r2
  4115ce:	f8c8 3000 	str.w	r3, [r8]

004115d2 <.LVL183>:
  4115d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
  4115d6:	f8d6 2005 	ldr.w	r2, [r6, #5]
  4115da:	4053      	eors	r3, r2
  4115dc:	f8c8 3004 	str.w	r3, [r8, #4]

004115e0 <.LBE249>:
            DesProcessBlock(des, (byte*)des->reg, (byte*)des->reg);
  4115e0:	462a      	mov	r2, r5
  4115e2:	4629      	mov	r1, r5
  4115e4:	4628      	mov	r0, r5
  4115e6:	f7fd fbf3 	bl	40edd0 <.LFE168>

004115ea <.LVL185>:
            XMEMCPY(out, des->reg, DES_BLOCK_SIZE);
  4115ea:	682a      	ldr	r2, [r5, #0]
  4115ec:	686b      	ldr	r3, [r5, #4]
  4115ee:	603a      	str	r2, [r7, #0]
  4115f0:	607b      	str	r3, [r7, #4]
            out += DES_BLOCK_SIZE;
  4115f2:	3708      	adds	r7, #8

004115f4 <.LVL186>:
        while (blocks--) {
  4115f4:	f109 39ff 	add.w	r9, r9, #4294967295
  4115f8:	3608      	adds	r6, #8

004115fa <.LVL188>:
  4115fa:	f1b9 3fff 	cmp.w	r9, #4294967295
  4115fe:	d011      	beq.n	411624 <.LBE253>

00411600 <.LBB255>:
    if (((wolfssl_word)buf | (wolfssl_word)mask | count) % WOLFSSL_WORD_SIZE == 0)
  411600:	1c73      	adds	r3, r6, #1

00411602 <.LVL190>:
  411602:	ea48 0303 	orr.w	r3, r8, r3

00411606 <.LVL191>:
  411606:	f013 0f03 	tst.w	r3, #3
  41160a:	d0db      	beq.n	4115c4 <.LBB249>
  41160c:	f108 33ff 	add.w	r3, r8, #4294967295
  411610:	4632      	mov	r2, r6

00411612 <.LBB253>:
        for (i = 0; i < count; i++) b[i] ^= m[i];
  411612:	7859      	ldrb	r1, [r3, #1]
  411614:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  411618:	4041      	eors	r1, r0
  41161a:	f803 1f01 	strb.w	r1, [r3, #1]!
  41161e:	42a3      	cmp	r3, r4
  411620:	d1f7      	bne.n	411612 <.LBB253>
  411622:	e7dd      	b.n	4115e0 <.LBE249>

00411624 <.LBE253>:
    }
  411624:	2000      	movs	r0, #0
  411626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

Disassembly of section .text.sha384_test%142:

0041162c <sha384_test>:
{
  41162c:	b570      	push	{r4, r5, r6, lr}

0041162e <.LCFI16>:
  41162e:	b0d4      	sub	sp, #336	; 0x150

00411630 <.LCFI17>:
    test_sha[0] = a;
  411630:	4b1b      	ldr	r3, [pc, #108]	; (4116a0 <.LCFI18+0x2>)
  411632:	f103 0208 	add.w	r2, r3, #8
  411636:	9200      	str	r2, [sp, #0]
  411638:	f503 7237 	add.w	r2, r3, #732	; 0x2dc
  41163c:	9201      	str	r2, [sp, #4]
  41163e:	2203      	movs	r2, #3
  411640:	9202      	str	r2, [sp, #8]
  411642:	2230      	movs	r2, #48	; 0x30
  411644:	9203      	str	r2, [sp, #12]
    test_sha[1] = b;
  411646:	f503 7144 	add.w	r1, r3, #784	; 0x310
  41164a:	9104      	str	r1, [sp, #16]
  41164c:	f503 7361 	add.w	r3, r3, #900	; 0x384
  411650:	9305      	str	r3, [sp, #20]
  411652:	2370      	movs	r3, #112	; 0x70
  411654:	9306      	str	r3, [sp, #24]
  411656:	9207      	str	r2, [sp, #28]
    CRYPT_SHA384_Initialize(&sha);
  411658:	a814      	add	r0, sp, #80	; 0x50
  41165a:	f001 fbfd 	bl	412e58 <.LFE8>

0041165e <.LVL28>:
    appData.sha384_test_result = 0;
  41165e:	2400      	movs	r4, #0
  411660:	4b10      	ldr	r3, [pc, #64]	; (4116a4 <.LCFI18+0x6>)
  411662:	611c      	str	r4, [r3, #16]

00411664 <.LVL29>:
            appData.sha384_test_result++;
  411664:	461e      	mov	r6, r3
  411666:	e002      	b.n	41166e <.LVL30+0x6>

00411668 <.LVL30>:
  411668:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  41166a:	2c20      	cmp	r4, #32
  41166c:	d016      	beq.n	41169c <.LVL33+0xc>
  41166e:	eb0d 0504 	add.w	r5, sp, r4
        CRYPT_SHA384_DataAdd(&sha, (byte*)test_sha[i].input,(word32)test_sha[i].inLen);
  411672:	68aa      	ldr	r2, [r5, #8]
  411674:	f85d 1004 	ldr.w	r1, [sp, r4]
  411678:	a814      	add	r0, sp, #80	; 0x50
  41167a:	f001 faeb 	bl	412c54 <.LFE11>

0041167e <.LVL31>:
        CRYPT_SHA384_Finalize(&sha, hash);
  41167e:	a908      	add	r1, sp, #32
  411680:	a814      	add	r0, sp, #80	; 0x50
  411682:	f001 faf3 	bl	412c6c <.LFE13>

00411686 <.LVL32>:
        if (memcmp(hash, test_sha[i].output, SHA384_DIGEST_SIZE) != 0)
  411686:	2230      	movs	r2, #48	; 0x30
  411688:	6869      	ldr	r1, [r5, #4]
  41168a:	a808      	add	r0, sp, #32
  41168c:	f000 fb1c 	bl	411cc8 <memcmp>

00411690 <.LVL33>:
  411690:	2800      	cmp	r0, #0
  411692:	d0e9      	beq.n	411668 <.LVL30>
            appData.sha384_test_result++;
  411694:	6933      	ldr	r3, [r6, #16]
  411696:	3301      	adds	r3, #1
  411698:	6133      	str	r3, [r6, #16]
  41169a:	e7e5      	b.n	411668 <.LVL30>
}
  41169c:	b054      	add	sp, #336	; 0x150

0041169e <.LCFI18>:
  41169e:	bd70      	pop	{r4, r5, r6, pc}
  4116a0:	004089cc 	.word	0x004089cc
  4116a4:	2040db08 	.word	0x2040db08

Disassembly of section .text.sha512_test%143:

004116a8 <sha512_test>:
{
  4116a8:	b570      	push	{r4, r5, r6, lr}

004116aa <.LCFI19>:
  4116aa:	b0e0      	sub	sp, #384	; 0x180

004116ac <.LCFI20>:
    test_sha[0] = a;
  4116ac:	4b1b      	ldr	r3, [pc, #108]	; (41171c <.LCFI21+0x2>)
  4116ae:	f103 0208 	add.w	r2, r3, #8
  4116b2:	9200      	str	r2, [sp, #0]
  4116b4:	f503 726e 	add.w	r2, r3, #952	; 0x3b8
  4116b8:	9201      	str	r2, [sp, #4]
  4116ba:	2203      	movs	r2, #3
  4116bc:	9202      	str	r2, [sp, #8]
  4116be:	2240      	movs	r2, #64	; 0x40
  4116c0:	9203      	str	r2, [sp, #12]
    test_sha[1] = b;
  4116c2:	f503 7144 	add.w	r1, r3, #784	; 0x310
  4116c6:	9104      	str	r1, [sp, #16]
  4116c8:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
  4116cc:	9305      	str	r3, [sp, #20]
  4116ce:	2370      	movs	r3, #112	; 0x70
  4116d0:	9306      	str	r3, [sp, #24]
  4116d2:	9207      	str	r2, [sp, #28]
    CRYPT_SHA512_Initialize(&sha);
  4116d4:	a818      	add	r0, sp, #96	; 0x60
  4116d6:	f001 fbc7 	bl	412e68 <.LFE12>

004116da <.LVL35>:
    appData.sha512_test_result = 0;
  4116da:	2400      	movs	r4, #0
  4116dc:	4b10      	ldr	r3, [pc, #64]	; (411720 <.LCFI21+0x6>)
  4116de:	615c      	str	r4, [r3, #20]

004116e0 <.LVL36>:
            appData.sha512_test_result++;
  4116e0:	461e      	mov	r6, r3
  4116e2:	e002      	b.n	4116ea <.LVL37+0x6>

004116e4 <.LVL37>:
  4116e4:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  4116e6:	2c20      	cmp	r4, #32
  4116e8:	d016      	beq.n	411718 <.LVL40+0xc>
  4116ea:	eb0d 0504 	add.w	r5, sp, r4
        CRYPT_SHA512_DataAdd(&sha, (byte*)test_sha[i].input,(word32)test_sha[i].inLen);
  4116ee:	68aa      	ldr	r2, [r5, #8]
  4116f0:	f85d 1004 	ldr.w	r1, [sp, r4]
  4116f4:	a818      	add	r0, sp, #96	; 0x60
  4116f6:	f001 fac5 	bl	412c84 <.LFE14>

004116fa <.LVL38>:
        CRYPT_SHA512_Finalize(&sha, hash);
  4116fa:	a908      	add	r1, sp, #32
  4116fc:	a818      	add	r0, sp, #96	; 0x60
  4116fe:	f001 facd 	bl	412c9c <.LFE16>

00411702 <.LVL39>:
        if (memcmp(hash, test_sha[i].output, SHA512_DIGEST_SIZE) != 0)
  411702:	2240      	movs	r2, #64	; 0x40
  411704:	6869      	ldr	r1, [r5, #4]
  411706:	a808      	add	r0, sp, #32
  411708:	f000 fade 	bl	411cc8 <memcmp>

0041170c <.LVL40>:
  41170c:	2800      	cmp	r0, #0
  41170e:	d0e9      	beq.n	4116e4 <.LVL37>
            appData.sha512_test_result++;
  411710:	6973      	ldr	r3, [r6, #20]
  411712:	3301      	adds	r3, #1
  411714:	6173      	str	r3, [r6, #20]
  411716:	e7e5      	b.n	4116e4 <.LVL37>
}
  411718:	b060      	add	sp, #384	; 0x180

0041171a <.LCFI21>:
  41171a:	bd70      	pop	{r4, r5, r6, pc}
  41171c:	004089cc 	.word	0x004089cc
  411720:	2040db08 	.word	0x2040db08

Disassembly of section .text.frexp%144:

00411728 <frexp>:
  411728:	b430      	push	{r4, r5}

0041172a <.LCFI0>:
  41172a:	b082      	sub	sp, #8

0041172c <.LCFI1>:
  41172c:	ed8d 0b00 	vstr	d0, [sp]

00411730 <.LBB2>:
  411730:	9b01      	ldr	r3, [sp, #4]

00411732 <.LBE2>:
  411732:	4c1b      	ldr	r4, [pc, #108]	; (4117a0 <.LVL14+0x12>)

00411734 <.LBB3>:
  411734:	9d00      	ldr	r5, [sp, #0]

00411736 <.LBE3>:
  411736:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000

0041173a <.LVL3>:
  41173a:	2200      	movs	r2, #0
  41173c:	42a1      	cmp	r1, r4
  41173e:	6002      	str	r2, [r0, #0]
  411740:	dc17      	bgt.n	411772 <.LBE6+0x4>
  411742:	ea55 0401 	orrs.w	r4, r5, r1
  411746:	d014      	beq.n	411772 <.LBE6+0x4>
  411748:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  41174c:	db16      	blt.n	41177c <.LCFI4>
  41174e:	4615      	mov	r5, r2

00411750 <.LVL4>:
  411750:	f023 44ff 	bic.w	r4, r3, #2139095040	; 0x7f800000
  411754:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000

00411758 <.LBB4>:
  411758:	e9dd 2300 	ldrd	r2, r3, [sp]
  41175c:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000

00411760 <.LBE4>:
  411760:	1509      	asrs	r1, r1, #20

00411762 <.LBB5>:
  411762:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000

00411766 <.LBE5>:
  411766:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe

0041176a <.LBB6>:
  41176a:	e9cd 2300 	strd	r2, r3, [sp]

0041176e <.LBE6>:
  41176e:	4429      	add	r1, r5
  411770:	6001      	str	r1, [r0, #0]
  411772:	ed9d 0b00 	vldr	d0, [sp]
  411776:	b002      	add	sp, #8

00411778 <.LCFI2>:
  411778:	bc30      	pop	{r4, r5}

0041177a <.LCFI3>:
  41177a:	4770      	bx	lr

0041177c <.LCFI4>:
  41177c:	ed9f 7b06 	vldr	d7, [pc, #24]	; 411798 <.LVL14+0xa>
  411780:	ee20 7b07 	vmul.f64	d7, d0, d7
  411784:	ed8d 7b00 	vstr	d7, [sp]

00411788 <.LBB7>:
  411788:	9b01      	ldr	r3, [sp, #4]

0041178a <.LBE7>:
  41178a:	f06f 0535 	mvn.w	r5, #53	; 0x35

0041178e <.LVL14>:
  41178e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
  411792:	e7dd      	b.n	411750 <.LVL4>
  411794:	f3af 8000 	nop.w
  411798:	00000000 	.word	0x00000000
  41179c:	43500000 	.word	0x43500000
  4117a0:	7fefffff 	.word	0x7fefffff

Disassembly of section .text.wc_Des3_SetKey%145:

004117a4 <wc_Des3_SetKey>:
    {
  4117a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

004117a6 <.LCFI18>:
        if (des == NULL || key == NULL || dir < 0) {
  4117a6:	460f      	mov	r7, r1
  4117a8:	fab1 f181 	clz	r1, r1

004117ac <.LVL259>:
  4117ac:	0949      	lsrs	r1, r1, #5
  4117ae:	ea51 71d3 	orrs.w	r1, r1, r3, lsr #31
  4117b2:	d12f      	bne.n	411814 <.LVL271>
  4117b4:	b370      	cbz	r0, 411814 <.LVL271>
  4117b6:	461c      	mov	r4, r3
  4117b8:	4616      	mov	r6, r2
  4117ba:	4605      	mov	r5, r0
        ret = DesSetKey(key + (dir == DES_ENCRYPTION ? 0:16), dir, des->key[0]);
  4117bc:	2b00      	cmp	r3, #0
  4117be:	bf0c      	ite	eq
  4117c0:	2000      	moveq	r0, #0

004117c2 <.LVL260>:
  4117c2:	2010      	movne	r0, #16
  4117c4:	462a      	mov	r2, r5

004117c6 <.LVL261>:
  4117c6:	4619      	mov	r1, r3
  4117c8:	4438      	add	r0, r7
  4117ca:	f7fc fc57 	bl	40e07c <.LFE28>

004117ce <.LVL262>:
        if (ret != 0)
  4117ce:	4603      	mov	r3, r0
  4117d0:	b108      	cbz	r0, 4117d6 <.LVL264>

004117d2 <.LVL263>:
    }
  4117d2:	4618      	mov	r0, r3
  4117d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

004117d6 <.LVL264>:
        ret = DesSetKey(key + 8, !dir, des->key[1]);
  4117d6:	f105 0280 	add.w	r2, r5, #128	; 0x80
  4117da:	fab4 f184 	clz	r1, r4
  4117de:	0949      	lsrs	r1, r1, #5
  4117e0:	f107 0008 	add.w	r0, r7, #8

004117e4 <.LVL265>:
  4117e4:	f7fc fc4a 	bl	40e07c <.LFE28>

004117e8 <.LVL266>:
        if (ret != 0)
  4117e8:	4603      	mov	r3, r0
  4117ea:	2800      	cmp	r0, #0
  4117ec:	d1f1      	bne.n	4117d2 <.LVL263>
        ret = DesSetKey(key + (dir == DES_DECRYPTION ? 0:16), dir, des->key[2]);
  4117ee:	2c01      	cmp	r4, #1
  4117f0:	bf0c      	ite	eq
  4117f2:	2000      	moveq	r0, #0

004117f4 <.LVL267>:
  4117f4:	2010      	movne	r0, #16
  4117f6:	f505 7280 	add.w	r2, r5, #256	; 0x100
  4117fa:	4621      	mov	r1, r4
  4117fc:	4438      	add	r0, r7
  4117fe:	f7fc fc3d 	bl	40e07c <.LFE28>

00411802 <.LVL268>:
        if (ret != 0)
  411802:	4603      	mov	r3, r0
  411804:	2800      	cmp	r0, #0
  411806:	d1e4      	bne.n	4117d2 <.LVL263>
        return wc_Des3_SetIV(des, iv);
  411808:	4631      	mov	r1, r6
  41180a:	4628      	mov	r0, r5

0041180c <.LVL269>:
  41180c:	f000 ffea 	bl	4127e4 <.LFE1>

00411810 <.LVL270>:
  411810:	4603      	mov	r3, r0
  411812:	e7de      	b.n	4117d2 <.LVL263>

00411814 <.LVL271>:
            return BAD_FUNC_ARG;
  411814:	f06f 03ac 	mvn.w	r3, #172	; 0xac

00411818 <.LVL272>:
  411818:	e7db      	b.n	4117d2 <.LVL263>

Disassembly of section .text.CLK_Initialize%146:

0041181c <CLK_Initialize>:
Clock Initialize
*********************************************************************************/
void CLK_Initialize( void )
{
    /* Set Flash Wait States and  Enable Code Loop Optimization */
    EFC_REGS->EEFC_FMR = EEFC_FMR_FWS(6) | EEFC_FMR_CLOE_Msk;
  41181c:	4a17      	ldr	r2, [pc, #92]	; (41187c <.LBE8+0xa>)
  41181e:	4b18      	ldr	r3, [pc, #96]	; (411880 <.LBE8+0xe>)
  411820:	601a      	str	r2, [r3, #0]

00411822 <.LBB6>:
    PMC_REGS->CKGR_PLLAR = CKGR_PLLAR_ONE_Msk | CKGR_PLLAR_PLLACOUNT(0x3f) |
  411822:	4a18      	ldr	r2, [pc, #96]	; (411884 <.LBE8+0x12>)
  411824:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  411828:	629a      	str	r2, [r3, #40]	; 0x28
    while ( (PMC_REGS->PMC_SR & PMC_SR_LOCKA_Msk) != PMC_SR_LOCKA_Msk);
  41182a:	461a      	mov	r2, r3
  41182c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  41182e:	f013 0f02 	tst.w	r3, #2
  411832:	d0fb      	beq.n	41182c <.LBB6+0xa>

00411834 <.LBB8>:
    PMC_REGS->PMC_MCKR = (PMC_REGS->PMC_MCKR & ~PMC_MCKR_PRES_Msk) | PMC_MCKR_PRES_CLK_1;
  411834:	4a14      	ldr	r2, [pc, #80]	; (411888 <.LBE8+0x16>)
  411836:	6b13      	ldr	r3, [r2, #48]	; 0x30
  411838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  41183c:	6313      	str	r3, [r2, #48]	; 0x30
    while ((PMC_REGS->PMC_SR & PMC_SR_MCKRDY_Msk) != PMC_SR_MCKRDY_Msk);
  41183e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  411840:	f013 0f08 	tst.w	r3, #8
  411844:	d0fb      	beq.n	41183e <.LBB8+0xa>
    PMC_REGS->PMC_MCKR = (PMC_REGS->PMC_MCKR & ~PMC_MCKR_MDIV_Msk) | PMC_MCKR_MDIV_PCK_DIV2;
  411846:	4a10      	ldr	r2, [pc, #64]	; (411888 <.LBE8+0x16>)
  411848:	6b13      	ldr	r3, [r2, #48]	; 0x30
  41184a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  41184e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  411852:	6313      	str	r3, [r2, #48]	; 0x30
    while ((PMC_REGS->PMC_SR & PMC_SR_MCKRDY_Msk) != PMC_SR_MCKRDY_Msk);
  411854:	6e93      	ldr	r3, [r2, #104]	; 0x68
  411856:	f013 0f08 	tst.w	r3, #8
  41185a:	d0fb      	beq.n	411854 <.LBB8+0x20>
    PMC_REGS->PMC_MCKR = (PMC_REGS->PMC_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_PLLA_CLK;
  41185c:	4a0a      	ldr	r2, [pc, #40]	; (411888 <.LBE8+0x16>)
  41185e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  411860:	f023 0303 	bic.w	r3, r3, #3
  411864:	f043 0302 	orr.w	r3, r3, #2
  411868:	6313      	str	r3, [r2, #48]	; 0x30
    while ((PMC_REGS->PMC_SR & PMC_SR_MCKRDY_Msk) != PMC_SR_MCKRDY_Msk);
  41186a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  41186c:	f013 0f08 	tst.w	r3, #8
  411870:	d0fb      	beq.n	41186a <.LBB8+0x36>

00411872 <.LBE8>:




    /* Enable Peripheral Clock */
    PMC_REGS->PMC_PCER0=0x4035c00;
  411872:	4a06      	ldr	r2, [pc, #24]	; (41188c <.LBE8+0x1a>)
  411874:	4b04      	ldr	r3, [pc, #16]	; (411888 <.LBE8+0x16>)
  411876:	611a      	str	r2, [r3, #16]
  411878:	4770      	bx	lr
  41187a:	bf00      	nop
  41187c:	04000600 	.word	0x04000600
  411880:	400e0c00 	.word	0x400e0c00
  411884:	20183f01 	.word	0x20183f01
  411888:	400e0600 	.word	0x400e0600
  41188c:	04035c00 	.word	0x04035c00

Disassembly of section .text.timer_removeFromList%147:

00411890 <timer_removeFromList>:
{
  411890:	b538      	push	{r3, r4, r5, lr}

00411892 <.LCFI2>:
  411892:	4604      	mov	r4, r0
    SYS_TIME_TIMER_OBJ *tmr = counter->tmrActive;
  411894:	4b1a      	ldr	r3, [pc, #104]	; (411900 <.LVL24+0x12>)
  411896:	6add      	ldr	r5, [r3, #44]	; 0x2c

00411898 <.LVL14>:
    time_resourceLock();
  411898:	f7fa fee8 	bl	40c66c <.LFE1>

0041189c <.LVL15>:
        if(tmr == timer)
  41189c:	42a5      	cmp	r5, r4
  41189e:	d010      	beq.n	4118c2 <.LVL19>
        else if(tmr->tmrNext == timer)
  4118a0:	6a2a      	ldr	r2, [r5, #32]
  4118a2:	4294      	cmp	r4, r2
  4118a4:	d01f      	beq.n	4118e6 <.LVL22>

004118a6 <.LVL16>:
        tmr->timeRemaining = tmr->time;
  4118a6:	68d3      	ldr	r3, [r2, #12]
  4118a8:	6113      	str	r3, [r2, #16]
    }while(tmr->tmrNext != NULL);
  4118aa:	6a13      	ldr	r3, [r2, #32]
  4118ac:	b1c3      	cbz	r3, 4118e0 <.LVL20>
        else if(tmr->tmrNext == timer)
  4118ae:	6a13      	ldr	r3, [r2, #32]
  4118b0:	429c      	cmp	r4, r3
  4118b2:	d019      	beq.n	4118e8 <.LVL23>

004118b4 <.LVL17>:
        tmr->timeRemaining = tmr->time;
  4118b4:	68da      	ldr	r2, [r3, #12]
  4118b6:	611a      	str	r2, [r3, #16]
        else if(tmr->tmrNext == timer)
  4118b8:	461a      	mov	r2, r3
    }while(tmr->tmrNext != NULL);
  4118ba:	6a1b      	ldr	r3, [r3, #32]

004118bc <.LVL18>:
  4118bc:	2b00      	cmp	r3, #0
  4118be:	d1f6      	bne.n	4118ae <.LVL16+0x8>
  4118c0:	e00e      	b.n	4118e0 <.LVL20>

004118c2 <.LVL19>:
            if(counter->tmrElapsed == false)
  4118c2:	4b0f      	ldr	r3, [pc, #60]	; (411900 <.LVL24+0x12>)
  4118c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4118c6:	b923      	cbnz	r3, 4118d2 <.LVL19+0x10>
                tmr->tmrNext->timeRemaining += tmr->timeRemaining;;
  4118c8:	6a2a      	ldr	r2, [r5, #32]
  4118ca:	6913      	ldr	r3, [r2, #16]
  4118cc:	6929      	ldr	r1, [r5, #16]
  4118ce:	440b      	add	r3, r1
  4118d0:	6113      	str	r3, [r2, #16]
            counter->tmrActive = tmr->tmrNext;
  4118d2:	6a2a      	ldr	r2, [r5, #32]
  4118d4:	4b0a      	ldr	r3, [pc, #40]	; (411900 <.LVL24+0x12>)
  4118d6:	62da      	str	r2, [r3, #44]	; 0x2c
            timer->timeRemaining = timer->time;
  4118d8:	68eb      	ldr	r3, [r5, #12]
  4118da:	612b      	str	r3, [r5, #16]
            timer->tmrNext = NULL;
  4118dc:	2300      	movs	r3, #0
  4118de:	622b      	str	r3, [r5, #32]

004118e0 <.LVL20>:
    time_resourceUnlock();
  4118e0:	f000 ffd0 	bl	412884 <.LFE14>

004118e4 <.LVL21>:
  4118e4:	bd38      	pop	{r3, r4, r5, pc}

004118e6 <.LVL22>:
    SYS_TIME_TIMER_OBJ *tmr = counter->tmrActive;
  4118e6:	462a      	mov	r2, r5

004118e8 <.LVL23>:
            tmr->tmrNext = timer->tmrNext;
  4118e8:	6a23      	ldr	r3, [r4, #32]
  4118ea:	6213      	str	r3, [r2, #32]
            tmr->tmrNext->timeRemaining += timer->timeRemaining;
  4118ec:	691a      	ldr	r2, [r3, #16]

004118ee <.LVL24>:
  4118ee:	6921      	ldr	r1, [r4, #16]
  4118f0:	440a      	add	r2, r1
  4118f2:	611a      	str	r2, [r3, #16]
            timer->timeRemaining = timer->time;
  4118f4:	68e3      	ldr	r3, [r4, #12]
  4118f6:	6123      	str	r3, [r4, #16]
            timer->tmrNext = NULL;
  4118f8:	2300      	movs	r3, #0
  4118fa:	6223      	str	r3, [r4, #32]
            break;
  4118fc:	e7f0      	b.n	4118e0 <.LVL20>
  4118fe:	bf00      	nop
  411900:	2040dbf8 	.word	0x2040dbf8

Disassembly of section .text._vsnprintf_r%148:

00411904 <_vsnprintf_r>:
  411904:	b570      	push	{r4, r5, r6, lr}

00411906 <.LCFI0>:
  411906:	1e14      	subs	r4, r2, #0
  411908:	b09a      	sub	sp, #104	; 0x68

0041190a <.LCFI1>:
  41190a:	4605      	mov	r5, r0
  41190c:	db2e      	blt.n	41196c <.LCFI7>
  41190e:	461a      	mov	r2, r3

00411910 <.LVL1>:
  411910:	f44f 7302 	mov.w	r3, #520	; 0x208

00411914 <.LVL2>:
  411914:	9100      	str	r1, [sp, #0]
  411916:	9104      	str	r1, [sp, #16]
  411918:	f8ad 300c 	strh.w	r3, [sp, #12]
  41191c:	d011      	beq.n	411942 <.LCFI3>
  41191e:	3c01      	subs	r4, #1

00411920 <.LVL3>:
  411920:	f64f 76ff 	movw	r6, #65535	; 0xffff
  411924:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  411926:	9402      	str	r4, [sp, #8]
  411928:	4669      	mov	r1, sp

0041192a <.LVL4>:
  41192a:	9405      	str	r4, [sp, #20]
  41192c:	f8ad 600e 	strh.w	r6, [sp, #14]
  411930:	f7f0 ffda 	bl	4028e8 <_svfprintf_r>

00411934 <.LVL5>:
  411934:	1c42      	adds	r2, r0, #1
  411936:	db12      	blt.n	41195e <.LCFI5>
  411938:	9b00      	ldr	r3, [sp, #0]
  41193a:	2200      	movs	r2, #0
  41193c:	701a      	strb	r2, [r3, #0]
  41193e:	b01a      	add	sp, #104	; 0x68

00411940 <.LCFI2>:
  411940:	bd70      	pop	{r4, r5, r6, pc}

00411942 <.LCFI3>:
  411942:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  411944:	9402      	str	r4, [sp, #8]
  411946:	f64f 76ff 	movw	r6, #65535	; 0xffff
  41194a:	4669      	mov	r1, sp

0041194c <.LVL7>:
  41194c:	9405      	str	r4, [sp, #20]
  41194e:	f8ad 600e 	strh.w	r6, [sp, #14]
  411952:	f7f0 ffc9 	bl	4028e8 <_svfprintf_r>

00411956 <.LVL8>:
  411956:	1c43      	adds	r3, r0, #1
  411958:	db04      	blt.n	411964 <.LVL11>

0041195a <.LVL9>:
  41195a:	b01a      	add	sp, #104	; 0x68

0041195c <.LCFI4>:
  41195c:	bd70      	pop	{r4, r5, r6, pc}

0041195e <.LCFI5>:
  41195e:	238b      	movs	r3, #139	; 0x8b
  411960:	602b      	str	r3, [r5, #0]
  411962:	e7e9      	b.n	411938 <.LVL5+0x4>

00411964 <.LVL11>:
  411964:	238b      	movs	r3, #139	; 0x8b
  411966:	602b      	str	r3, [r5, #0]
  411968:	b01a      	add	sp, #104	; 0x68

0041196a <.LCFI6>:
  41196a:	bd70      	pop	{r4, r5, r6, pc}

0041196c <.LCFI7>:
  41196c:	238b      	movs	r3, #139	; 0x8b

0041196e <.LVL13>:
  41196e:	6003      	str	r3, [r0, #0]
  411970:	f04f 30ff 	mov.w	r0, #4294967295

00411974 <.LVL14>:
  411974:	e7f1      	b.n	41195a <.LVL9>

00411976 <.LFE2>:
  411976:	bf00      	nop

Disassembly of section .text.PIO_Initialize%149:

00411978 <PIO_Initialize>:
    See plib_pio.h for more details.
*/
void PIO_Initialize ( void )
{
    /* Selected System IO pins are configured as GPIO */
    MATRIX_REGS->CCFG_SYSIO|= 0x00000010;
  411978:	4a1a      	ldr	r2, [pc, #104]	; (4119e4 <PIO_Initialize+0x6c>)
  41197a:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  41197e:	f043 0310 	orr.w	r3, r3, #16
  411982:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
    /************************ PIO A Initialization ************************/
    /* PORTA PIO Disable and Peripheral Enable*/
    ((pio_registers_t*)PIO_PORT_A)->PIO_PDR = ~0xFFDFFFFF;
  411986:	f502 22b1 	add.w	r2, r2, #362496	; 0x58800
  41198a:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
  41198e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  411992:	6053      	str	r3, [r2, #4]


    /* PORTA Pull Up Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_A)->PIO_PUDR = ~0x00000000;
  411994:	f04f 33ff 	mov.w	r3, #4294967295
  411998:	6613      	str	r3, [r2, #96]	; 0x60

    /* PORTA Pull Down Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_A)->PIO_PPDDR = ~0x00000000;
  41199a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* PORTA Output Write Enable */
    ((pio_registers_t*)PIO_PORT_A)->PIO_OWER = PIO_OWER_Msk;
  41199e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0



    /************************ PIO B Initialization ************************/
    /* PORTB Peripheral Function Selection */
    ((pio_registers_t*)PIO_PORT_B)->PIO_ABCDSR[0]= 0x00000010;
  4119a2:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4119a6:	2110      	movs	r1, #16
  4119a8:	6711      	str	r1, [r2, #112]	; 0x70
    ((pio_registers_t*)PIO_PORT_B)->PIO_ABCDSR[1]= 0x00000010;
  4119aa:	6751      	str	r1, [r2, #116]	; 0x74
    /* PORTB PIO Disable and Peripheral Enable*/
    ((pio_registers_t*)PIO_PORT_B)->PIO_PDR = ~0xFFFFFFEF;
  4119ac:	6051      	str	r1, [r2, #4]


    /* PORTB Pull Up Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_B)->PIO_PUDR = ~0x00000000;
  4119ae:	6613      	str	r3, [r2, #96]	; 0x60

    /* PORTB Pull Down Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_B)->PIO_PPDDR = ~0x00000000;
  4119b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* PORTB Output Write Enable */
    ((pio_registers_t*)PIO_PORT_B)->PIO_OWER = PIO_OWER_Msk;
  4119b4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    /************************ PIO C Initialization ************************/


    /* PORTC Pull Up Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_C)->PIO_PUDR = ~0x00000000;
  4119b8:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4119bc:	6613      	str	r3, [r2, #96]	; 0x60

    /* PORTC Pull Down Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_C)->PIO_PPDDR = ~0x00000000;
  4119be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* PORTC Output Write Enable */
    ((pio_registers_t*)PIO_PORT_C)->PIO_OWER = PIO_OWER_Msk;
  4119c2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    /************************ PIO D Initialization ************************/


    /* PORTD Pull Up Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_D)->PIO_PUDR = ~0x00000000;
  4119c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4119ca:	6613      	str	r3, [r2, #96]	; 0x60

    /* PORTD Pull Down Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_D)->PIO_PPDDR = ~0x00000000;
  4119cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* PORTD Output Write Enable */
    ((pio_registers_t*)PIO_PORT_D)->PIO_OWER = PIO_OWER_Msk;
  4119d0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    /************************ PIO E Initialization ************************/


    /* PORTE Pull Up Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_E)->PIO_PUDR = ~0x00000000;
  4119d4:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4119d8:	6613      	str	r3, [r2, #96]	; 0x60

    /* PORTE Pull Down Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_E)->PIO_PPDDR = ~0x00000000;
  4119da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* PORTE Output Write Enable */
    ((pio_registers_t*)PIO_PORT_E)->PIO_OWER = PIO_OWER_Msk;
  4119de:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  4119e2:	4770      	bx	lr
  4119e4:	40088000 	.word	0x40088000

Disassembly of section .text.SYS_TIME_Initialize%150:

004119e8 <SYS_TIME_Initialize>:
// Section: System Interface Functions
// *****************************************************************************
// *****************************************************************************
SYS_MODULE_OBJ SYS_TIME_Initialize( const SYS_MODULE_INDEX index, const SYS_MODULE_INIT * const init )
{
    if(init == 0 || index != SYS_TIME_INDEX_0)
  4119e8:	2900      	cmp	r1, #0
  4119ea:	d02b      	beq.n	411a44 <.LCFI6>
{
  4119ec:	b538      	push	{r3, r4, r5, lr}

004119ee <.LCFI5>:
  4119ee:	460b      	mov	r3, r1
    if(init == 0 || index != SYS_TIME_INDEX_0)
  4119f0:	b110      	cbz	r0, 4119f8 <.LBB24>
    {
        return SYS_MODULE_OBJ_INVALID;
  4119f2:	f04f 30ff 	mov.w	r0, #4294967295

004119f6 <.LVL69>:
    memset(timers, 0, sizeof(timers));

    gSystemCounterObj.status = SYS_STATUS_READY;

    return (SYS_MODULE_OBJ)&gSystemCounterObj;
}
  4119f6:	bd38      	pop	{r3, r4, r5, pc}

004119f8 <.LBB24>:
    counterObj->timePlib = initData->timePlib;
  4119f8:	680a      	ldr	r2, [r1, #0]
  4119fa:	4c14      	ldr	r4, [pc, #80]	; (411a4c <.LVL79+0x4>)
  4119fc:	6062      	str	r2, [r4, #4]
    counterObj->timeFrequency = initData->timeFrequency;
  4119fe:	6889      	ldr	r1, [r1, #8]

00411a00 <.LVL71>:
  411a00:	60e1      	str	r1, [r4, #12]
    counterObj->timeInterrupt = initData->timeInterrupt;
  411a02:	f993 3004 	ldrsb.w	r3, [r3, #4]

00411a06 <.LVL72>:
  411a06:	7223      	strb	r3, [r4, #8]
    counterObj->timePeriodPrevious = HW_COUNTER_MAX;
  411a08:	f64f 73ff 	movw	r3, #65535	; 0xffff
  411a0c:	6123      	str	r3, [r4, #16]
    counterObj->timePeriod = HW_COUNTER_MAX;
  411a0e:	6163      	str	r3, [r4, #20]
    counterObj->counter = 0;
  411a10:	2500      	movs	r5, #0
  411a12:	61a5      	str	r5, [r4, #24]
    counterObj->tmrActive = NULL;
  411a14:	62e5      	str	r5, [r4, #44]	; 0x2c
    counterObj->tmrElapsed = false;
  411a16:	6265      	str	r5, [r4, #36]	; 0x24
    counterObj->interruptContext = false;
  411a18:	62a5      	str	r5, [r4, #40]	; 0x28
    counterObj->timePlib->timerCallbackSet(TIME_PLIB_Callback, 0);
  411a1a:	6813      	ldr	r3, [r2, #0]
  411a1c:	4629      	mov	r1, r5
  411a1e:	480c      	ldr	r0, [pc, #48]	; (411a50 <.LVL79+0x8>)

00411a20 <.LVL73>:
  411a20:	4798      	blx	r3

00411a22 <.LVL74>:
    counterObj->timePlib->timerPeriodSet(counterObj->timePeriod);
  411a22:	6863      	ldr	r3, [r4, #4]
  411a24:	685b      	ldr	r3, [r3, #4]
  411a26:	6960      	ldr	r0, [r4, #20]
  411a28:	4798      	blx	r3
    counterObj->timePlib->timerStart();
  411a2a:	6863      	ldr	r3, [r4, #4]
  411a2c:	689b      	ldr	r3, [r3, #8]
  411a2e:	4798      	blx	r3

00411a30 <.LBE24>:
    memset(timers, 0, sizeof(timers));
  411a30:	f44f 72c8 	mov.w	r2, #400	; 0x190
  411a34:	4629      	mov	r1, r5
  411a36:	4807      	ldr	r0, [pc, #28]	; (411a54 <.LVL79+0xc>)
  411a38:	f7ff f922 	bl	410c80 <memset>

00411a3c <.LVL77>:
    gSystemCounterObj.status = SYS_STATUS_READY;
  411a3c:	2302      	movs	r3, #2
  411a3e:	7023      	strb	r3, [r4, #0]
    return (SYS_MODULE_OBJ)&gSystemCounterObj;
  411a40:	4620      	mov	r0, r4
  411a42:	bd38      	pop	{r3, r4, r5, pc}

00411a44 <.LCFI6>:
        return SYS_MODULE_OBJ_INVALID;
  411a44:	f04f 30ff 	mov.w	r0, #4294967295

00411a48 <.LVL79>:
  411a48:	4770      	bx	lr
  411a4a:	bf00      	nop
  411a4c:	2040dbf8 	.word	0x2040dbf8
  411a50:	0040fa29 	.word	0x0040fa29
  411a54:	2040d688 	.word	0x2040d688

Disassembly of section .text%151:

00411a58 <__do_global_dtors_aux>:
  411a58:	b510      	push	{r4, lr}
  411a5a:	4c05      	ldr	r4, [pc, #20]	; (411a70 <.LFE152+0x18>)
  411a5c:	7823      	ldrb	r3, [r4, #0]
  411a5e:	b933      	cbnz	r3, 411a6e <__do_global_dtors_aux+0x16>
  411a60:	4b04      	ldr	r3, [pc, #16]	; (411a74 <.LFE152+0x1c>)
  411a62:	b113      	cbz	r3, 411a6a <__do_global_dtors_aux+0x12>
  411a64:	4804      	ldr	r0, [pc, #16]	; (411a78 <.LFE152+0x20>)
  411a66:	f3af 8000 	nop.w
  411a6a:	2301      	movs	r3, #1
  411a6c:	7023      	strb	r3, [r4, #0]
  411a6e:	bd10      	pop	{r4, pc}
  411a70:	2040dc70 	.word	0x2040dc70
	...

00411a7c <frame_dummy>:
  411a7c:	4b0c      	ldr	r3, [pc, #48]	; (411ab0 <frame_dummy+0x34>)
  411a7e:	b143      	cbz	r3, 411a92 <frame_dummy+0x16>
  411a80:	480c      	ldr	r0, [pc, #48]	; (411ab4 <frame_dummy+0x38>)
  411a82:	490d      	ldr	r1, [pc, #52]	; (411ab8 <frame_dummy+0x3c>)
  411a84:	b510      	push	{r4, lr}
  411a86:	f3af 8000 	nop.w
  411a8a:	480c      	ldr	r0, [pc, #48]	; (411abc <frame_dummy+0x40>)
  411a8c:	6803      	ldr	r3, [r0, #0]
  411a8e:	b923      	cbnz	r3, 411a9a <frame_dummy+0x1e>
  411a90:	bd10      	pop	{r4, pc}
  411a92:	480a      	ldr	r0, [pc, #40]	; (411abc <frame_dummy+0x40>)
  411a94:	6803      	ldr	r3, [r0, #0]
  411a96:	b933      	cbnz	r3, 411aa6 <frame_dummy+0x2a>
  411a98:	4770      	bx	lr
  411a9a:	4b09      	ldr	r3, [pc, #36]	; (411ac0 <frame_dummy+0x44>)
  411a9c:	2b00      	cmp	r3, #0
  411a9e:	d0f7      	beq.n	411a90 <frame_dummy+0x14>
  411aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  411aa4:	4718      	bx	r3
  411aa6:	4b06      	ldr	r3, [pc, #24]	; (411ac0 <frame_dummy+0x44>)
  411aa8:	2b00      	cmp	r3, #0
  411aaa:	d0f5      	beq.n	411a98 <frame_dummy+0x1c>
  411aac:	4718      	bx	r3
  411aae:	bf00      	nop
	...
  411ab8:	2040dc74 	.word	0x2040dc74
	...

Disassembly of section .text.Hash_DRBG_Instantiate%152:

00411ac4 <Hash_DRBG_Instantiate>:
{
  411ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

00411ac8 <.LCFI6>:
  411ac8:	b084      	sub	sp, #16

00411aca <.LCFI7>:
  411aca:	4604      	mov	r4, r0
  411acc:	460e      	mov	r6, r1
  411ace:	4617      	mov	r7, r2
  411ad0:	4698      	mov	r8, r3

00411ad2 <.LVL53>:
    XMEMSET(drbg, 0, sizeof(DRBG));
  411ad2:	2278      	movs	r2, #120	; 0x78

00411ad4 <.LVL54>:
  411ad4:	2100      	movs	r1, #0

00411ad6 <.LVL55>:
  411ad6:	f7ff f8d3 	bl	410c80 <memset>

00411ada <.LVL56>:
    if (Hash_df(drbg, drbg->V, sizeof(drbg->V), drbgInitV, seed, seedSz,
  411ada:	f104 0508 	add.w	r5, r4, #8
  411ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  411ae0:	9303      	str	r3, [sp, #12]
  411ae2:	f8cd 8008 	str.w	r8, [sp, #8]
  411ae6:	9701      	str	r7, [sp, #4]
  411ae8:	9600      	str	r6, [sp, #0]
  411aea:	2304      	movs	r3, #4
  411aec:	2237      	movs	r2, #55	; 0x37
  411aee:	4629      	mov	r1, r5
  411af0:	4620      	mov	r0, r4
  411af2:	f7fc fcc1 	bl	40e478 <.LFE19>

00411af6 <.LVL57>:
  411af6:	b120      	cbz	r0, 411b02 <.LCFI9>
    int ret = DRBG_FAILURE;
  411af8:	2302      	movs	r3, #2

00411afa <.LVL58>:
}
  411afa:	4618      	mov	r0, r3
  411afc:	b004      	add	sp, #16

00411afe <.LCFI8>:
  411afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00411b02 <.LCFI9>:
        Hash_df(drbg, drbg->C, sizeof(drbg->C), drbgInitC, drbg->V,
  411b02:	2300      	movs	r3, #0
  411b04:	9303      	str	r3, [sp, #12]
  411b06:	9302      	str	r3, [sp, #8]
  411b08:	2237      	movs	r2, #55	; 0x37
  411b0a:	9201      	str	r2, [sp, #4]
  411b0c:	9500      	str	r5, [sp, #0]
  411b0e:	f104 013f 	add.w	r1, r4, #63	; 0x3f
  411b12:	4620      	mov	r0, r4
  411b14:	f7fc fcb0 	bl	40e478 <.LFE19>

00411b18 <.LVL60>:
                                              nonce, nonceSz) == DRBG_SUCCESS &&
  411b18:	4603      	mov	r3, r0
  411b1a:	b108      	cbz	r0, 411b20 <.LVL60+0x8>
    int ret = DRBG_FAILURE;
  411b1c:	2302      	movs	r3, #2
    return ret;
  411b1e:	e7ec      	b.n	411afa <.LVL58>
        drbg->reseedCtr = 1;
  411b20:	2201      	movs	r2, #1
  411b22:	6022      	str	r2, [r4, #0]
        drbg->lastBlock = 0;
  411b24:	2200      	movs	r2, #0
  411b26:	6062      	str	r2, [r4, #4]
        drbg->matchCount = 0;
  411b28:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76

00411b2c <.LVL61>:
  411b2c:	e7e5      	b.n	411afa <.LVL58>

Disassembly of section .text.SYS_Initialize%153:

00411b30 <SYS_Initialize>:

  Remarks:
 */

void SYS_Initialize ( void* data )
{
  411b30:	b510      	push	{r4, lr}

00411b32 <.LCFI0>:
    CLK_Initialize();
  411b32:	f7ff fe73 	bl	41181c <CLK_Initialize>

00411b36 <.LVL1>:
	PIO_Initialize();
  411b36:	f7ff ff1f 	bl	411978 <PIO_Initialize>

00411b3a <.LVL2>:

    NVIC_Initialize();
  411b3a:	f000 fb87 	bl	41224c <NVIC_Initialize>

00411b3e <.LVL3>:
	RSWDT_REGS->RSWDT_MR = RSWDT_MR_WDDIS_Msk;	// Disable RSWDT 
  411b3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  411b42:	4a0f      	ldr	r2, [pc, #60]	; (411b80 <.LVL10+0x4>)
  411b44:	6053      	str	r3, [r2, #4]
	WDT_REGS->WDT_MR = WDT_MR_WDDIS_Msk; 		// Disable WDT 
  411b46:	3ab0      	subs	r2, #176	; 0xb0
  411b48:	6053      	str	r3, [r2, #4]
 
    TC1_CH0_TimerInitialize(); 
  411b4a:	f000 feaf 	bl	4128ac <.LBE4>

00411b4e <.LVL4>:
     
    
	USART1_Initialize();
  411b4e:	f000 fc79 	bl	412444 <.LFE19>

00411b52 <.LVL5>:


    sysObj.sysConsole0 = SYS_CONSOLE_Initialize(SYS_CONSOLE_INDEX_0, (SYS_MODULE_INIT *)&consUsartInit0);
  411b52:	490c      	ldr	r1, [pc, #48]	; (411b84 <.LVL10+0x8>)
  411b54:	2000      	movs	r0, #0
  411b56:	f000 fa3f 	bl	411fd8 <.LFE17>

00411b5a <.LVL6>:
  411b5a:	4c0b      	ldr	r4, [pc, #44]	; (411b88 <.LVL10+0xc>)
  411b5c:	6020      	str	r0, [r4, #0]
    sysObj.sysDebug = SYS_DEBUG_Initialize(SYS_DEBUG_INDEX_0, (SYS_MODULE_INIT*)&debugInit);
  411b5e:	490b      	ldr	r1, [pc, #44]	; (411b8c <.LVL10+0x10>)
  411b60:	2000      	movs	r0, #0
  411b62:	f000 ff55 	bl	412a10 <.LFE167>

00411b66 <.LVL7>:
  411b66:	6060      	str	r0, [r4, #4]
    SYS_CMD_Initialize((SYS_MODULE_INIT*)&sysCmdInit);
  411b68:	4809      	ldr	r0, [pc, #36]	; (411b90 <.LVL10+0x14>)
  411b6a:	f7ff fb19 	bl	4111a0 <.LFE18>

00411b6e <.LVL8>:

    sysObj.sysTime = SYS_TIME_Initialize(SYS_TIME_INDEX_0, (SYS_MODULE_INIT *)&sysTimeInitData);
  411b6e:	4909      	ldr	r1, [pc, #36]	; (411b94 <.LVL10+0x18>)
  411b70:	2000      	movs	r0, #0
  411b72:	f7ff ff39 	bl	4119e8 <.LFE149>

00411b76 <.LVL9>:
  411b76:	60a0      	str	r0, [r4, #8]


    APP_Initialize();
  411b78:	f001 f9f0 	bl	412f5c <.LFE23>

00411b7c <.LVL10>:
  411b7c:	bd10      	pop	{r4, pc}
  411b7e:	bf00      	nop
  411b80:	400e1900 	.word	0x400e1900
  411b84:	2040dd04 	.word	0x2040dd04
  411b88:	20400000 	.word	0x20400000
  411b8c:	2040c854 	.word	0x2040c854
  411b90:	2040dd44 	.word	0x2040dd44
  411b94:	2040dce0 	.word	0x2040dce0

Disassembly of section .text.wc_InitSha256_ex%154:

00411b98 <wc_InitSha256_ex>:
        if (sha256 == NULL)
  411b98:	b300      	cbz	r0, 411bdc <.LCFI4>
    {
  411b9a:	b510      	push	{r4, lr}

00411b9c <.LCFI3>:
  411b9c:	4604      	mov	r4, r0
        sha256->heap = heap;
  411b9e:	66c1      	str	r1, [r0, #108]	; 0x6c

00411ba0 <.LBB181>:
    XMEMSET(sha256->digest, 0, sizeof(sha256->digest));
  411ba0:	2220      	movs	r2, #32

00411ba2 <.LVL42>:
  411ba2:	2100      	movs	r1, #0

00411ba4 <.LVL43>:
  411ba4:	f7ff f86c 	bl	410c80 <memset>

00411ba8 <.LVL44>:
    sha256->digest[0] = 0x6A09E667L;
  411ba8:	4b0e      	ldr	r3, [pc, #56]	; (411be4 <.LVL47+0x4>)
  411baa:	6023      	str	r3, [r4, #0]
    sha256->digest[1] = 0xBB67AE85L;
  411bac:	4b0e      	ldr	r3, [pc, #56]	; (411be8 <.LVL47+0x8>)
  411bae:	6063      	str	r3, [r4, #4]
    sha256->digest[2] = 0x3C6EF372L;
  411bb0:	4b0e      	ldr	r3, [pc, #56]	; (411bec <.LVL47+0xc>)
  411bb2:	60a3      	str	r3, [r4, #8]
    sha256->digest[3] = 0xA54FF53AL;
  411bb4:	4b0e      	ldr	r3, [pc, #56]	; (411bf0 <.LVL47+0x10>)
  411bb6:	60e3      	str	r3, [r4, #12]
    sha256->digest[4] = 0x510E527FL;
  411bb8:	4b0e      	ldr	r3, [pc, #56]	; (411bf4 <.LVL47+0x14>)
  411bba:	6123      	str	r3, [r4, #16]
    sha256->digest[5] = 0x9B05688CL;
  411bbc:	4b0e      	ldr	r3, [pc, #56]	; (411bf8 <.LVL47+0x18>)
  411bbe:	6163      	str	r3, [r4, #20]
    sha256->digest[6] = 0x1F83D9ABL;
  411bc0:	4b0e      	ldr	r3, [pc, #56]	; (411bfc <.LVL47+0x1c>)
  411bc2:	61a3      	str	r3, [r4, #24]
    sha256->digest[7] = 0x5BE0CD19L;
  411bc4:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
  411bc8:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
  411bcc:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
  411bd0:	61e3      	str	r3, [r4, #28]
    sha256->buffLen = 0;
  411bd2:	2000      	movs	r0, #0
  411bd4:	6620      	str	r0, [r4, #96]	; 0x60
    sha256->loLen   = 0;
  411bd6:	6660      	str	r0, [r4, #100]	; 0x64
    sha256->hiLen   = 0;
  411bd8:	66a0      	str	r0, [r4, #104]	; 0x68

00411bda <.LBE181>:
  411bda:	bd10      	pop	{r4, pc}

00411bdc <.LCFI4>:
            return BAD_FUNC_ARG;
  411bdc:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00411be0 <.LVL47>:
  411be0:	4770      	bx	lr
  411be2:	bf00      	nop
  411be4:	6a09e667 	.word	0x6a09e667
  411be8:	bb67ae85 	.word	0xbb67ae85
  411bec:	3c6ef372 	.word	0x3c6ef372
  411bf0:	a54ff53a 	.word	0xa54ff53a
  411bf4:	510e527f 	.word	0x510e527f
  411bf8:	9b05688c 	.word	0x9b05688c
  411bfc:	1f83d9ab 	.word	0x1f83d9ab

Disassembly of section .text.SYS_CMDIO_ADD%155:

00411c00 <SYS_CMDIO_ADD>:
{
  411c00:	b570      	push	{r4, r5, r6, lr}

00411c02 <.LCFI33>:
  411c02:	4606      	mov	r6, r0
  411c04:	460d      	mov	r5, r1
  411c06:	4614      	mov	r4, r2
    pDevNode = (SYS_CMD_DEVICE_NODE*)malloc(sizeof(*pDevNode));
  411c08:	20a0      	movs	r0, #160	; 0xa0

00411c0a <.LVL266>:
  411c0a:	f001 f95d 	bl	412ec8 <.LFE151>

00411c0e <.LVL267>:
    if (!pDevNode)
  411c0e:	4603      	mov	r3, r0
  411c10:	b1d8      	cbz	r0, 411c4a <.LVL267+0x3c>
    pDevNode->pCmdApi = opApi;
  411c12:	f8c0 608c 	str.w	r6, [r0, #140]	; 0x8c
    pDevNode->cmdIoParam = cmdIoParam;
  411c16:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    pDevNode->cmdPnt = pDevNode->cmdEnd = pDevNode->cmdBuff;
  411c1a:	f100 0208 	add.w	r2, r0, #8
  411c1e:	6042      	str	r2, [r0, #4]
  411c20:	6002      	str	r2, [r0, #0]
    pDevNode->cmdIoType = cmdIoType;
  411c22:	f880 4094 	strb.w	r4, [r0, #148]	; 0x94
    if (cmdIoType == SYS_CMD_SINGLE_CHARACTER_READ_CONSOLE_IO_PARAM)
  411c26:	b994      	cbnz	r4, 411c4e <.LVL269>
        pDevNode->cmdState = SYS_CMD_STATE_DISABLE;
  411c28:	2200      	movs	r2, #0
  411c2a:	f880 209c 	strb.w	r2, [r0, #156]	; 0x9c
    cmdIODevList.num++;
  411c2e:	4a0c      	ldr	r2, [pc, #48]	; (411c60 <.LVL269+0x12>)
  411c30:	6811      	ldr	r1, [r2, #0]
  411c32:	3101      	adds	r1, #1
  411c34:	6011      	str	r1, [r2, #0]
    pDevNode->next = NULL;
  411c36:	2100      	movs	r1, #0
  411c38:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
    if(cmdIODevList.head == NULL)
  411c3c:	6852      	ldr	r2, [r2, #4]
  411c3e:	b152      	cbz	r2, 411c56 <.LVL269+0x8>
        cmdIODevList.tail->next = pDevNode;
  411c40:	4a07      	ldr	r2, [pc, #28]	; (411c60 <.LVL269+0x12>)
  411c42:	6891      	ldr	r1, [r2, #8]
  411c44:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
        cmdIODevList.tail = pDevNode;
  411c48:	6093      	str	r3, [r2, #8]
}
  411c4a:	4618      	mov	r0, r3

00411c4c <.LVL268>:
  411c4c:	bd70      	pop	{r4, r5, r6, pc}

00411c4e <.LVL269>:
        pDevNode->cmdState = SYS_CMD_STATE_SETUP_READ;
  411c4e:	2201      	movs	r2, #1
  411c50:	f880 209c 	strb.w	r2, [r0, #156]	; 0x9c
  411c54:	e7eb      	b.n	411c2e <.LVL267+0x20>
        cmdIODevList.head = pDevNode;
  411c56:	4a02      	ldr	r2, [pc, #8]	; (411c60 <.LVL269+0x12>)
  411c58:	6053      	str	r3, [r2, #4]
        cmdIODevList.tail = pDevNode;
  411c5a:	6093      	str	r3, [r2, #8]
  411c5c:	e7f5      	b.n	411c4a <.LVL267+0x3c>
  411c5e:	bf00      	nop
  411c60:	2040dcf8 	.word	0x2040dcf8

Disassembly of section .text.strncpy%156:

00411c64 <strncpy>:
  411c64:	ea40 0301 	orr.w	r3, r0, r1
  411c68:	f013 0f03 	tst.w	r3, #3
  411c6c:	b470      	push	{r4, r5, r6}

00411c6e <.LCFI0>:
  411c6e:	4603      	mov	r3, r0
  411c70:	d024      	beq.n	411cbc <.LVL16>

00411c72 <.LVL1>:
  411c72:	b1a2      	cbz	r2, 411c9e <.LVL11+0xa>
  411c74:	780c      	ldrb	r4, [r1, #0]
  411c76:	701c      	strb	r4, [r3, #0]
  411c78:	3a01      	subs	r2, #1

00411c7a <.LVL3>:
  411c7a:	3301      	adds	r3, #1
  411c7c:	3101      	adds	r1, #1
  411c7e:	b13c      	cbz	r4, 411c90 <.LVL10>

00411c80 <.LVL6>:
  411c80:	b16a      	cbz	r2, 411c9e <.LVL11+0xa>
  411c82:	f811 4b01 	ldrb.w	r4, [r1], #1

00411c86 <.LVL7>:
  411c86:	f803 4b01 	strb.w	r4, [r3], #1

00411c8a <.LVL8>:
  411c8a:	3a01      	subs	r2, #1

00411c8c <.LVL9>:
  411c8c:	2c00      	cmp	r4, #0
  411c8e:	d1f7      	bne.n	411c80 <.LVL6>

00411c90 <.LVL10>:
  411c90:	b12a      	cbz	r2, 411c9e <.LVL11+0xa>
  411c92:	441a      	add	r2, r3

00411c94 <.LVL11>:
  411c94:	2100      	movs	r1, #0
  411c96:	f803 1b01 	strb.w	r1, [r3], #1
  411c9a:	429a      	cmp	r2, r3
  411c9c:	d1fb      	bne.n	411c96 <.LVL11+0x2>
  411c9e:	bc70      	pop	{r4, r5, r6}

00411ca0 <.LCFI1>:
  411ca0:	4770      	bx	lr

00411ca2 <.LCFI2>:
  411ca2:	460e      	mov	r6, r1

00411ca4 <.LVL14>:
  411ca4:	f851 5b04 	ldr.w	r5, [r1], #4
  411ca8:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
  411cac:	ea24 0405 	bic.w	r4, r4, r5
  411cb0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  411cb4:	d105      	bne.n	411cc2 <.LVL17>
  411cb6:	f843 5b04 	str.w	r5, [r3], #4

00411cba <.LVL15>:
  411cba:	3a04      	subs	r2, #4

00411cbc <.LVL16>:
  411cbc:	2a03      	cmp	r2, #3
  411cbe:	d8f0      	bhi.n	411ca2 <.LCFI2>
  411cc0:	e7d7      	b.n	411c72 <.LVL1>

00411cc2 <.LVL17>:
  411cc2:	4631      	mov	r1, r6
  411cc4:	e7d6      	b.n	411c74 <.LVL1+0x2>

00411cc6 <.LFE0>:
  411cc6:	bf00      	nop

Disassembly of section .text.memcmp%157:

00411cc8 <memcmp>:
  411cc8:	2a03      	cmp	r2, #3
  411cca:	b470      	push	{r4, r5, r6}

00411ccc <.LCFI0>:
  411ccc:	d922      	bls.n	411d14 <.LVL11>
  411cce:	ea40 0301 	orr.w	r3, r0, r1
  411cd2:	079b      	lsls	r3, r3, #30
  411cd4:	d011      	beq.n	411cfa <.LCFI2>

00411cd6 <.LVL1>:
  411cd6:	7803      	ldrb	r3, [r0, #0]
  411cd8:	780c      	ldrb	r4, [r1, #0]
  411cda:	42a3      	cmp	r3, r4
  411cdc:	d11d      	bne.n	411d1a <.LVL11+0x6>
  411cde:	440a      	add	r2, r1
  411ce0:	3101      	adds	r1, #1
  411ce2:	e005      	b.n	411cf0 <.LVL4>

00411ce4 <.LVL2>:
  411ce4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  411ce8:	f811 4b01 	ldrb.w	r4, [r1], #1

00411cec <.LVL3>:
  411cec:	42a3      	cmp	r3, r4
  411cee:	d114      	bne.n	411d1a <.LVL11+0x6>

00411cf0 <.LVL4>:
  411cf0:	4291      	cmp	r1, r2
  411cf2:	d1f7      	bne.n	411ce4 <.LVL2>

00411cf4 <.LVL5>:
  411cf4:	2000      	movs	r0, #0
  411cf6:	bc70      	pop	{r4, r5, r6}

00411cf8 <.LCFI1>:
  411cf8:	4770      	bx	lr

00411cfa <.LCFI2>:
  411cfa:	680d      	ldr	r5, [r1, #0]
  411cfc:	6806      	ldr	r6, [r0, #0]
  411cfe:	42ae      	cmp	r6, r5
  411d00:	460c      	mov	r4, r1
  411d02:	4603      	mov	r3, r0

00411d04 <.LVL7>:
  411d04:	f101 0104 	add.w	r1, r1, #4

00411d08 <.LVL8>:
  411d08:	f100 0004 	add.w	r0, r0, #4

00411d0c <.LVL9>:
  411d0c:	d108      	bne.n	411d20 <.LCFI4>
  411d0e:	3a04      	subs	r2, #4

00411d10 <.LVL10>:
  411d10:	2a03      	cmp	r2, #3
  411d12:	d8f2      	bhi.n	411cfa <.LCFI2>

00411d14 <.LVL11>:
  411d14:	2a00      	cmp	r2, #0
  411d16:	d1de      	bne.n	411cd6 <.LVL1>
  411d18:	e7ec      	b.n	411cf4 <.LVL5>
  411d1a:	1b18      	subs	r0, r3, r4
  411d1c:	bc70      	pop	{r4, r5, r6}

00411d1e <.LCFI3>:
  411d1e:	4770      	bx	lr

00411d20 <.LCFI4>:
  411d20:	4621      	mov	r1, r4

00411d22 <.LVL13>:
  411d22:	4618      	mov	r0, r3

00411d24 <.LVL14>:
  411d24:	e7d7      	b.n	411cd6 <.LVL1>

00411d26 <.LFE0>:
  411d26:	bf00      	nop

Disassembly of section .text.__lo0bits%158:

00411d28 <__lo0bits>:
  411d28:	6803      	ldr	r3, [r0, #0]

00411d2a <.LVL80>:
  411d2a:	f013 0207 	ands.w	r2, r3, #7
  411d2e:	4601      	mov	r1, r0
  411d30:	d007      	beq.n	411d42 <.LVL84>
  411d32:	07da      	lsls	r2, r3, #31
  411d34:	d421      	bmi.n	411d7a <.LVL100>
  411d36:	0798      	lsls	r0, r3, #30

00411d38 <.LVL81>:
  411d38:	d421      	bmi.n	411d7e <.LVL101+0x2>
  411d3a:	089b      	lsrs	r3, r3, #2

00411d3c <.LVL82>:
  411d3c:	600b      	str	r3, [r1, #0]

00411d3e <.LVL83>:
  411d3e:	2002      	movs	r0, #2
  411d40:	4770      	bx	lr

00411d42 <.LVL84>:
  411d42:	b298      	uxth	r0, r3

00411d44 <.LVL85>:
  411d44:	b198      	cbz	r0, 411d6e <.LVL96>
  411d46:	4610      	mov	r0, r2

00411d48 <.LVL86>:
  411d48:	f013 0fff 	tst.w	r3, #255	; 0xff
  411d4c:	bf04      	itt	eq
  411d4e:	0a1b      	lsreq	r3, r3, #8

00411d50 <.LVL87>:
  411d50:	3008      	addeq	r0, #8

00411d52 <.LVL88>:
  411d52:	071a      	lsls	r2, r3, #28
  411d54:	bf04      	itt	eq
  411d56:	091b      	lsreq	r3, r3, #4

00411d58 <.LVL89>:
  411d58:	3004      	addeq	r0, #4

00411d5a <.LVL90>:
  411d5a:	079a      	lsls	r2, r3, #30
  411d5c:	bf04      	itt	eq
  411d5e:	089b      	lsreq	r3, r3, #2

00411d60 <.LVL91>:
  411d60:	3002      	addeq	r0, #2

00411d62 <.LVL92>:
  411d62:	07da      	lsls	r2, r3, #31
  411d64:	d407      	bmi.n	411d76 <.LVL99>

00411d66 <.LVL93>:
  411d66:	085b      	lsrs	r3, r3, #1

00411d68 <.LVL94>:
  411d68:	d104      	bne.n	411d74 <.LVL98>
  411d6a:	2020      	movs	r0, #32

00411d6c <.LVL95>:
  411d6c:	4770      	bx	lr

00411d6e <.LVL96>:
  411d6e:	0c1b      	lsrs	r3, r3, #16
  411d70:	2010      	movs	r0, #16
  411d72:	e7e9      	b.n	411d48 <.LVL86>

00411d74 <.LVL98>:
  411d74:	3001      	adds	r0, #1

00411d76 <.LVL99>:
  411d76:	600b      	str	r3, [r1, #0]
  411d78:	4770      	bx	lr

00411d7a <.LVL100>:
  411d7a:	2000      	movs	r0, #0

00411d7c <.LVL101>:
  411d7c:	4770      	bx	lr
  411d7e:	085b      	lsrs	r3, r3, #1

00411d80 <.LVL102>:
  411d80:	600b      	str	r3, [r1, #0]

00411d82 <.LVL103>:
  411d82:	2001      	movs	r0, #1
  411d84:	4770      	bx	lr

00411d86 <.LFE22>:
  411d86:	bf00      	nop

Disassembly of section .text._calloc_r%159:

00411d88 <_calloc_r>:
  411d88:	b510      	push	{r4, lr}

00411d8a <.LCFI0>:
  411d8a:	fb02 f101 	mul.w	r1, r2, r1

00411d8e <.LVL1>:
  411d8e:	f7f8 fb0f 	bl	40a3b0 <.LFE14>

00411d92 <.LVL2>:
  411d92:	4604      	mov	r4, r0
  411d94:	b1d8      	cbz	r0, 411dce <.LBE2>

00411d96 <.LVL3>:
  411d96:	f850 2c04 	ldr.w	r2, [r0, #-4]
  411d9a:	f022 0203 	bic.w	r2, r2, #3

00411d9e <.LBB2>:
  411d9e:	3a04      	subs	r2, #4

00411da0 <.LVL5>:
  411da0:	2a24      	cmp	r2, #36	; 0x24
  411da2:	d818      	bhi.n	411dd6 <.LBE4>

00411da4 <.LBB3>:
  411da4:	2a13      	cmp	r2, #19
  411da6:	d914      	bls.n	411dd2 <.LBB4>

00411da8 <.LVL7>:
  411da8:	2300      	movs	r3, #0
  411daa:	2a1b      	cmp	r2, #27
  411dac:	6003      	str	r3, [r0, #0]

00411dae <.LVL8>:
  411dae:	6043      	str	r3, [r0, #4]
  411db0:	d916      	bls.n	411de0 <.LBB5>

00411db2 <.LVL9>:
  411db2:	2a24      	cmp	r2, #36	; 0x24
  411db4:	6083      	str	r3, [r0, #8]

00411db6 <.LVL10>:
  411db6:	60c3      	str	r3, [r0, #12]
  411db8:	bf11      	iteee	ne
  411dba:	f100 0210 	addne.w	r2, r0, #16

00411dbe <.LVL11>:
  411dbe:	6103      	streq	r3, [r0, #16]
  411dc0:	6143      	streq	r3, [r0, #20]
  411dc2:	f100 0218 	addeq.w	r2, r0, #24

00411dc6 <.LVL12>:
  411dc6:	2300      	movs	r3, #0
  411dc8:	6013      	str	r3, [r2, #0]

00411dca <.LVL13>:
  411dca:	6053      	str	r3, [r2, #4]
  411dcc:	6093      	str	r3, [r2, #8]

00411dce <.LBE2>:
  411dce:	4620      	mov	r0, r4

00411dd0 <.LVL15>:
  411dd0:	bd10      	pop	{r4, pc}

00411dd2 <.LBB4>:
  411dd2:	4602      	mov	r2, r0

00411dd4 <.LVL17>:
  411dd4:	e7f7      	b.n	411dc6 <.LVL12>

00411dd6 <.LBE4>:
  411dd6:	2100      	movs	r1, #0
  411dd8:	f7fe ff52 	bl	410c80 <memset>

00411ddc <.LBE6>:
  411ddc:	4620      	mov	r0, r4
  411dde:	bd10      	pop	{r4, pc}

00411de0 <.LBB5>:
  411de0:	f100 0208 	add.w	r2, r0, #8

00411de4 <.LVL21>:
  411de4:	e7ef      	b.n	411dc6 <.LVL12>

00411de6 <.LBE5>:
  411de6:	bf00      	nop

Disassembly of section .text.HmacKeyInnerHash%160:

00411de8 <HmacKeyInnerHash>:
{
  411de8:	b510      	push	{r4, lr}

00411dea <.LCFI0>:
  411dea:	4604      	mov	r4, r0

00411dec <.LVL1>:
    switch (hmac->macType) {
  411dec:	f890 3224 	ldrb.w	r3, [r0, #548]	; 0x224
  411df0:	2b05      	cmp	r3, #5
  411df2:	d826      	bhi.n	411e42 <.LVL11>
  411df4:	e8df f003 	tbb	[pc, r3]
  411df8:	25130d03 	.word	0x25130d03
  411dfc:	191f      	.short	0x191f
            ret = wc_Md5Update(&hmac->hash.md5, (byte*)hmac->ipad,
  411dfe:	2240      	movs	r2, #64	; 0x40
  411e00:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
  411e04:	f7ff f988 	bl	411118 <.LFE23>

00411e08 <.LVL2>:
    if (ret == 0)
  411e08:	b910      	cbnz	r0, 411e10 <.LVL2+0x8>
        hmac->innerHashKeyed = 1;
  411e0a:	2301      	movs	r3, #1
  411e0c:	f884 3225 	strb.w	r3, [r4, #549]	; 0x225
}
  411e10:	bd10      	pop	{r4, pc}

00411e12 <.LVL3>:
            ret = wc_ShaUpdate(&hmac->hash.sha, (byte*)hmac->ipad,
  411e12:	2240      	movs	r2, #64	; 0x40
  411e14:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
  411e18:	f7fe fa22 	bl	410260 <.LFE27>

00411e1c <.LVL4>:
            break;
  411e1c:	e7f4      	b.n	411e08 <.LVL2>

00411e1e <.LVL5>:
            ret = wc_Sha256Update(&hmac->hash.sha256, (byte*)hmac->ipad,
  411e1e:	2240      	movs	r2, #64	; 0x40
  411e20:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
  411e24:	f7fe fa77 	bl	410316 <.LFE18>

00411e28 <.LVL6>:
            break;
  411e28:	e7ee      	b.n	411e08 <.LVL2>

00411e2a <.LVL7>:
            ret = wc_Sha384Update(&hmac->hash.sha384, (byte*)hmac->ipad,
  411e2a:	2280      	movs	r2, #128	; 0x80
  411e2c:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
  411e30:	f7fd fbcf 	bl	40f5d2 <.LBE719>

00411e34 <.LVL8>:
            break;
  411e34:	e7e8      	b.n	411e08 <.LVL2>

00411e36 <.LVL9>:
            ret = wc_Sha512Update(&hmac->hash.sha512, (byte*)hmac->ipad,
  411e36:	2280      	movs	r2, #128	; 0x80
  411e38:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
  411e3c:	f7fd fb54 	bl	40f4e8 <.LFE24>

00411e40 <.LVL10>:
            break;
  411e40:	e7e2      	b.n	411e08 <.LVL2>

00411e42 <.LVL11>:
    int ret = 0;
  411e42:	2000      	movs	r0, #0

00411e44 <.LVL12>:
  411e44:	e7e0      	b.n	411e08 <.LVL2>

Disassembly of section .text.Console_UART_Read%161:

00411e48 <Console_UART_Read>:
    while ((readQueue.numElem < readQueue.elemArrSz) && (rdBytes < count))
  411e48:	4b15      	ldr	r3, [pc, #84]	; (411ea0 <.LCFI8+0x4>)
  411e4a:	6898      	ldr	r0, [r3, #8]

00411e4c <.LVL47>:
  411e4c:	691b      	ldr	r3, [r3, #16]
  411e4e:	4298      	cmp	r0, r3
  411e50:	d222      	bcs.n	411e98 <.LBE13>
  411e52:	b30a      	cbz	r2, 411e98 <.LBE13>
{
  411e54:	b5f0      	push	{r4, r5, r6, r7, lr}

00411e56 <.LCFI6>:
    while ((readQueue.numElem < readQueue.elemArrSz) && (rdBytes < count))
  411e56:	2000      	movs	r0, #0

00411e58 <.LBB10>:
    q->qPkts[q->nextPos] = pkt;
  411e58:	4b11      	ldr	r3, [pc, #68]	; (411ea0 <.LCFI8+0x4>)
  411e5a:	2701      	movs	r7, #1
    (q->nextPos < (q->elemArrSz - 1)) ? q->nextPos++ : (q->nextPos = 0);
  411e5c:	4686      	mov	lr, r0
  411e5e:	e009      	b.n	411e74 <.LBB13>

00411e60 <.LVL48>:
  411e60:	3401      	adds	r4, #1
  411e62:	605c      	str	r4, [r3, #4]
    q->numElem++;
  411e64:	689c      	ldr	r4, [r3, #8]
  411e66:	3401      	adds	r4, #1
  411e68:	609c      	str	r4, [r3, #8]

00411e6a <.LBE10>:
        rdBytes++;
  411e6a:	3001      	adds	r0, #1
    while ((readQueue.numElem < readQueue.elemArrSz) && (rdBytes < count))
  411e6c:	4282      	cmp	r2, r0
  411e6e:	d915      	bls.n	411e9c <.LCFI8>
  411e70:	42a5      	cmp	r5, r4
  411e72:	d910      	bls.n	411e96 <.LVL53>

00411e74 <.LBB13>:
    q->qPkts[q->nextPos] = pkt;
  411e74:	685d      	ldr	r5, [r3, #4]
  411e76:	68dc      	ldr	r4, [r3, #12]
  411e78:	eb04 06c5 	add.w	r6, r4, r5, lsl #3
  411e7c:	eb01 0c00 	add.w	ip, r1, r0

00411e80 <.LVL52>:
  411e80:	f844 c035 	str.w	ip, [r4, r5, lsl #3]
  411e84:	6077      	str	r7, [r6, #4]
    (q->nextPos < (q->elemArrSz - 1)) ? q->nextPos++ : (q->nextPos = 0);
  411e86:	685c      	ldr	r4, [r3, #4]
  411e88:	691d      	ldr	r5, [r3, #16]
  411e8a:	1e6e      	subs	r6, r5, #1
  411e8c:	42b4      	cmp	r4, r6
  411e8e:	d3e7      	bcc.n	411e60 <.LVL48>
  411e90:	f8c3 e004 	str.w	lr, [r3, #4]
  411e94:	e7e6      	b.n	411e64 <.LVL48+0x4>

00411e96 <.LVL53>:
  411e96:	bdf0      	pop	{r4, r5, r6, r7, pc}

00411e98 <.LBE13>:
    size_t rdBytes = 0;
  411e98:	2000      	movs	r0, #0
  411e9a:	4770      	bx	lr

00411e9c <.LCFI8>:
}
  411e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  411e9e:	bf00      	nop
  411ea0:	2040dcb8 	.word	0x2040dcb8

Disassembly of section .text.__libc_init_array%162:

00411ea4 <__libc_init_array>:
  411ea4:	b570      	push	{r4, r5, r6, lr}

00411ea6 <.LCFI0>:
  411ea6:	4e0f      	ldr	r6, [pc, #60]	; (411ee4 <.LVL13+0x2>)
  411ea8:	4d0f      	ldr	r5, [pc, #60]	; (411ee8 <.LVL13+0x6>)
  411eaa:	1b76      	subs	r6, r6, r5

00411eac <.LVL0>:
  411eac:	10b6      	asrs	r6, r6, #2

00411eae <.LVL1>:
  411eae:	bf18      	it	ne
  411eb0:	2400      	movne	r4, #0
  411eb2:	d005      	beq.n	411ec0 <.LVL5>

00411eb4 <.LVL2>:
  411eb4:	3401      	adds	r4, #1

00411eb6 <.LVL3>:
  411eb6:	f855 3b04 	ldr.w	r3, [r5], #4
  411eba:	4798      	blx	r3

00411ebc <.LVL4>:
  411ebc:	42a6      	cmp	r6, r4
  411ebe:	d1f9      	bne.n	411eb4 <.LVL2>

00411ec0 <.LVL5>:
  411ec0:	4e0a      	ldr	r6, [pc, #40]	; (411eec <.LVL13+0xa>)

00411ec2 <.LVL6>:
  411ec2:	4d0b      	ldr	r5, [pc, #44]	; (411ef0 <.LVL13+0xe>)
  411ec4:	1b76      	subs	r6, r6, r5
  411ec6:	f7ee f94f 	bl	400168 <_init>

00411eca <.LVL7>:
  411eca:	10b6      	asrs	r6, r6, #2

00411ecc <.LVL8>:
  411ecc:	bf18      	it	ne
  411ece:	2400      	movne	r4, #0
  411ed0:	d006      	beq.n	411ee0 <.LVL12>

00411ed2 <.LVL9>:
  411ed2:	3401      	adds	r4, #1

00411ed4 <.LVL10>:
  411ed4:	f855 3b04 	ldr.w	r3, [r5], #4
  411ed8:	4798      	blx	r3

00411eda <.LVL11>:
  411eda:	42a6      	cmp	r6, r4
  411edc:	d1f9      	bne.n	411ed2 <.LVL9>
  411ede:	bd70      	pop	{r4, r5, r6, pc}

00411ee0 <.LVL12>:
  411ee0:	bd70      	pop	{r4, r5, r6, pc}

00411ee2 <.LVL13>:
  411ee2:	bf00      	nop
  411ee4:	00400174 	.word	0x00400174
  411ee8:	00400174 	.word	0x00400174
  411eec:	0040017c 	.word	0x0040017c
  411ef0:	00400174 	.word	0x00400174

Disassembly of section .text.Console_UART_Write%163:

00411ef4 <Console_UART_Write>:
{
  411ef4:	b538      	push	{r3, r4, r5, lr}

00411ef6 <.LCFI0>:
  411ef6:	460d      	mov	r5, r1
  411ef8:	4614      	mov	r4, r2

00411efa <.LVL3>:
    if (writeQueue.numElem >= writeQueue.elemArrSz)
  411efa:	4b10      	ldr	r3, [pc, #64]	; (411f3c <.LVL9+0x4>)
  411efc:	689a      	ldr	r2, [r3, #8]

00411efe <.LVL4>:
  411efe:	691b      	ldr	r3, [r3, #16]
  411f00:	429a      	cmp	r2, r3
  411f02:	d216      	bcs.n	411f32 <.LVL7>

00411f04 <.LBB4>:
    q->qPkts[q->nextPos] = pkt;
  411f04:	4b0d      	ldr	r3, [pc, #52]	; (411f3c <.LVL9+0x4>)
  411f06:	6859      	ldr	r1, [r3, #4]
  411f08:	68da      	ldr	r2, [r3, #12]
  411f0a:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
  411f0e:	f842 5031 	str.w	r5, [r2, r1, lsl #3]
  411f12:	6044      	str	r4, [r0, #4]
    (q->nextPos < (q->elemArrSz - 1)) ? q->nextPos++ : (q->nextPos = 0);
  411f14:	685a      	ldr	r2, [r3, #4]
  411f16:	691b      	ldr	r3, [r3, #16]
  411f18:	3b01      	subs	r3, #1
  411f1a:	429a      	cmp	r2, r3
  411f1c:	bf34      	ite	cc
  411f1e:	3201      	addcc	r2, #1
  411f20:	2200      	movcs	r2, #0
  411f22:	4b06      	ldr	r3, [pc, #24]	; (411f3c <.LVL9+0x4>)
  411f24:	605a      	str	r2, [r3, #4]
    q->numElem++;
  411f26:	4a05      	ldr	r2, [pc, #20]	; (411f3c <.LVL9+0x4>)
  411f28:	6893      	ldr	r3, [r2, #8]
  411f2a:	3301      	adds	r3, #1
  411f2c:	6093      	str	r3, [r2, #8]

00411f2e <.LBE4>:
}
  411f2e:	4620      	mov	r0, r4
  411f30:	bd38      	pop	{r3, r4, r5, pc}

00411f32 <.LVL7>:
        popQueue(&writeQueue);
  411f32:	4802      	ldr	r0, [pc, #8]	; (411f3c <.LVL9+0x4>)

00411f34 <.LVL8>:
  411f34:	f000 fe02 	bl	412b3c <.LFE4>

00411f38 <.LVL9>:
  411f38:	e7e4      	b.n	411f04 <.LBB4>
  411f3a:	bf00      	nop
  411f3c:	2040dccc 	.word	0x2040dccc

Disassembly of section .text.sprintf%164:

00411f40 <sprintf>:
  411f40:	b40e      	push	{r1, r2, r3}

00411f42 <.LCFI6>:
  411f42:	b5f0      	push	{r4, r5, r6, r7, lr}

00411f44 <.LCFI7>:
  411f44:	b09c      	sub	sp, #112	; 0x70

00411f46 <.LCFI8>:
  411f46:	ab21      	add	r3, sp, #132	; 0x84
  411f48:	490f      	ldr	r1, [pc, #60]	; (411f88 <.LCFI11+0x4>)
  411f4a:	f853 2b04 	ldr.w	r2, [r3], #4
  411f4e:	9301      	str	r3, [sp, #4]
  411f50:	4605      	mov	r5, r0
  411f52:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  411f56:	6808      	ldr	r0, [r1, #0]

00411f58 <.LVL4>:
  411f58:	9502      	str	r5, [sp, #8]
  411f5a:	f44f 7702 	mov.w	r7, #520	; 0x208
  411f5e:	f64f 76ff 	movw	r6, #65535	; 0xffff
  411f62:	a902      	add	r1, sp, #8
  411f64:	9506      	str	r5, [sp, #24]
  411f66:	f8ad 7014 	strh.w	r7, [sp, #20]
  411f6a:	9404      	str	r4, [sp, #16]
  411f6c:	9407      	str	r4, [sp, #28]
  411f6e:	f8ad 6016 	strh.w	r6, [sp, #22]
  411f72:	f7f0 fcb9 	bl	4028e8 <_svfprintf_r>

00411f76 <.LVL5>:
  411f76:	9b02      	ldr	r3, [sp, #8]
  411f78:	2200      	movs	r2, #0
  411f7a:	701a      	strb	r2, [r3, #0]
  411f7c:	b01c      	add	sp, #112	; 0x70

00411f7e <.LCFI9>:
  411f7e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

00411f82 <.LCFI10>:
  411f82:	b003      	add	sp, #12

00411f84 <.LCFI11>:
  411f84:	4770      	bx	lr
  411f86:	bf00      	nop
  411f88:	2040dd28 	.word	0x2040dd28

Disassembly of section .text._Balloc%165:

00411f8c <_Balloc>:
  411f8c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  411f8e:	b570      	push	{r4, r5, r6, lr}

00411f90 <.LCFI0>:
  411f90:	4605      	mov	r5, r0
  411f92:	460c      	mov	r4, r1
  411f94:	b14b      	cbz	r3, 411faa <.LVL3>

00411f96 <.LVL1>:
  411f96:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]

00411f9a <.LVL2>:
  411f9a:	b180      	cbz	r0, 411fbe <.LVL6>
  411f9c:	6802      	ldr	r2, [r0, #0]
  411f9e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  411fa2:	2300      	movs	r3, #0
  411fa4:	6103      	str	r3, [r0, #16]
  411fa6:	60c3      	str	r3, [r0, #12]
  411fa8:	bd70      	pop	{r4, r5, r6, pc}

00411faa <.LVL3>:
  411faa:	2221      	movs	r2, #33	; 0x21
  411fac:	2104      	movs	r1, #4

00411fae <.LVL4>:
  411fae:	f7ff feeb 	bl	411d88 <_calloc_r>

00411fb2 <.LVL5>:
  411fb2:	64e8      	str	r0, [r5, #76]	; 0x4c
  411fb4:	4603      	mov	r3, r0
  411fb6:	2800      	cmp	r0, #0
  411fb8:	d1ed      	bne.n	411f96 <.LVL1>
  411fba:	2000      	movs	r0, #0
  411fbc:	bd70      	pop	{r4, r5, r6, pc}

00411fbe <.LVL6>:
  411fbe:	2101      	movs	r1, #1
  411fc0:	fa01 f604 	lsl.w	r6, r1, r4
  411fc4:	1d72      	adds	r2, r6, #5
  411fc6:	4628      	mov	r0, r5

00411fc8 <.LVL8>:
  411fc8:	0092      	lsls	r2, r2, #2
  411fca:	f7ff fedd 	bl	411d88 <_calloc_r>

00411fce <.LVL9>:
  411fce:	2800      	cmp	r0, #0
  411fd0:	d0f3      	beq.n	411fba <.LVL5+0x8>
  411fd2:	6044      	str	r4, [r0, #4]
  411fd4:	6086      	str	r6, [r0, #8]
  411fd6:	e7e4      	b.n	411fa2 <.LVL2+0x8>

Disassembly of section .text.SYS_CONSOLE_Initialize%166:

00411fd8 <SYS_CONSOLE_Initialize>:
SYS_MODULE_OBJ SYS_CONSOLE_Initialize( const SYS_MODULE_INDEX index, const SYS_MODULE_INIT * const init )
{
    SYS_CONSOLE_INIT *initConfig = (SYS_CONSOLE_INIT*)init;

    /* Confirm valid arguments */
    if (index >= SYS_CONSOLE_DEVICE_MAX_INSTANCES || init == NULL)
  411fd8:	b908      	cbnz	r0, 411fde <SYS_CONSOLE_Initialize+0x6>
  411fda:	4603      	mov	r3, r0
  411fdc:	b911      	cbnz	r1, 411fe4 <.LVL2>
        return SYS_MODULE_OBJ_INVALID;
  411fde:	f04f 30ff 	mov.w	r0, #4294967295

00411fe2 <.LVL1>:
  411fe2:	4770      	bx	lr

00411fe4 <.LVL2>:

    if ((consoleDeviceInstance[index].consoleDeviceInstanceStatus == SYS_STATUS_UNINITIALIZED) && initConfig)
  411fe4:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  411fe8:	480c      	ldr	r0, [pc, #48]	; (41201c <.LVL5+0x6>)

00411fea <.LVL3>:
  411fea:	f910 2022 	ldrsb.w	r2, [r0, r2, lsl #2]
  411fee:	b992      	cbnz	r2, 412016 <.LVL5>
  411ff0:	b189      	cbz	r1, 412016 <.LVL5>
{
  411ff2:	b430      	push	{r4, r5}

00411ff4 <.LCFI0>:
    {
        consoleDeviceInstance[index].consoleDevHandle = CONSOLE_DEVICE_HANDLE_INVALID;
  411ff4:	4604      	mov	r4, r0
  411ff6:	005a      	lsls	r2, r3, #1
  411ff8:	18d0      	adds	r0, r2, r3
  411ffa:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  411ffe:	f04f 35ff 	mov.w	r5, #4294967295
  412002:	6085      	str	r5, [r0, #8]

        consoleDeviceInstance[index].consoleInstanceDevDesc = initConfig->consDevDesc;
  412004:	6849      	ldr	r1, [r1, #4]

00412006 <.LVL4>:
  412006:	6041      	str	r1, [r0, #4]
        consoleDeviceInstance[index].consoleDeviceInstanceStatus = SYS_STATUS_READY;
  412008:	441a      	add	r2, r3
  41200a:	2102      	movs	r1, #2
  41200c:	f804 1022 	strb.w	r1, [r4, r2, lsl #2]

        return index;
  412010:	4618      	mov	r0, r3
    }

    return SYS_MODULE_OBJ_INVALID;
}
  412012:	bc30      	pop	{r4, r5}

00412014 <.LCFI1>:
  412014:	4770      	bx	lr

00412016 <.LVL5>:
    return SYS_MODULE_OBJ_INVALID;
  412016:	f04f 30ff 	mov.w	r0, #4294967295
  41201a:	4770      	bx	lr
  41201c:	2040dcec 	.word	0x2040dcec

Disassembly of section .text.Console_UART_Status%167:

00412020 <Console_UART_Status>:
    if (consUartData.state == CONSOLE_UART_STATE_INIT)
  412020:	4b0e      	ldr	r3, [pc, #56]	; (41205c <.LFE0+0x3c>)
  412022:	781b      	ldrb	r3, [r3, #0]
  412024:	b1ab      	cbz	r3, 412052 <Console_UART_Status+0x32>
    if (consUartData.state == CONSOLE_UART_STATE_CRITICAL_ERROR || consUartData.state == CONSOLE_UART_STATE_OPERATIONAL_ERROR || consUartData.overflowFlag)
  412026:	3b07      	subs	r3, #7
  412028:	b2db      	uxtb	r3, r3
  41202a:	2b01      	cmp	r3, #1
  41202c:	d913      	bls.n	412056 <Console_UART_Status+0x36>
  41202e:	4b0b      	ldr	r3, [pc, #44]	; (41205c <.LFE0+0x3c>)
  412030:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
  412034:	b10b      	cbz	r3, 41203a <Console_UART_Status+0x1a>
        status = SYS_CONSOLE_STATUS_ERROR;
  412036:	2003      	movs	r0, #3
  412038:	4770      	bx	lr
        status = (writeQueue.numElem || readQueue.numElem) ? SYS_CONSOLE_STATUS_BUSY : SYS_CONSOLE_STATUS_CONFIGURED;
  41203a:	4b09      	ldr	r3, [pc, #36]	; (412060 <.LFE0+0x40>)
  41203c:	689b      	ldr	r3, [r3, #8]
  41203e:	b10b      	cbz	r3, 412044 <Console_UART_Status+0x24>
  412040:	2002      	movs	r0, #2
}
  412042:	4770      	bx	lr
        status = (writeQueue.numElem || readQueue.numElem) ? SYS_CONSOLE_STATUS_BUSY : SYS_CONSOLE_STATUS_CONFIGURED;
  412044:	4b07      	ldr	r3, [pc, #28]	; (412064 <.LFE0+0x44>)
  412046:	689b      	ldr	r3, [r3, #8]
  412048:	2b00      	cmp	r3, #0
  41204a:	bf14      	ite	ne
  41204c:	2002      	movne	r0, #2
  41204e:	2001      	moveq	r0, #1
  412050:	4770      	bx	lr
        return status;
  412052:	2000      	movs	r0, #0
  412054:	4770      	bx	lr
        status = SYS_CONSOLE_STATUS_ERROR;
  412056:	2003      	movs	r0, #3
  412058:	4770      	bx	lr
  41205a:	bf00      	nop
  41205c:	2040dba8 	.word	0x2040dba8
  412060:	2040dccc 	.word	0x2040dccc
  412064:	2040dcb8 	.word	0x2040dcb8

Disassembly of section .text.CommandCleanup%168:

00412068 <CommandCleanup>:
{
  412068:	b538      	push	{r3, r4, r5, lr}

0041206a <.LCFI15>:
    memset(_usrCmdTbl, 0x0, sizeof(_usrCmdTbl));
  41206a:	2280      	movs	r2, #128	; 0x80
  41206c:	2100      	movs	r1, #0
  41206e:	480d      	ldr	r0, [pc, #52]	; (4120a4 <.LBE9+0xa>)
  412070:	f7fe fe06 	bl	410c80 <memset>

00412074 <.LBB4>:
    if(pL->head == pL->tail)
  412074:	4c0c      	ldr	r4, [pc, #48]	; (4120a8 <.LBE9+0xe>)
        pL->head = pL->tail = 0;
  412076:	2500      	movs	r5, #0

00412078 <.LBE4>:
    while( (pN = CmdRemoveTail(&_cmdList)) )
  412078:	e004      	b.n	412084 <.LBB9>

0041207a <.LBB8>:
        pL->head = pL->tail = 0;
  41207a:	6065      	str	r5, [r4, #4]
  41207c:	6025      	str	r5, [r4, #0]

0041207e <.LBE8>:
    while( (pN = CmdRemoveTail(&_cmdList)) )
  41207e:	b160      	cbz	r0, 41209a <.LBE9>
        free(pN);
  412080:	f000 ff2a 	bl	412ed8 <.LFE0>

00412084 <.LBB9>:
    if(pL->head == pL->tail)
  412084:	6823      	ldr	r3, [r4, #0]
  412086:	6860      	ldr	r0, [r4, #4]
  412088:	4283      	cmp	r3, r0
  41208a:	d0f6      	beq.n	41207a <.LBB8>

0041208c <.LVL61>:
        pL->tail = pN->prev;
  41208c:	6842      	ldr	r2, [r0, #4]
  41208e:	6062      	str	r2, [r4, #4]
        pL->tail->next = pL->head;
  412090:	6013      	str	r3, [r2, #0]
        pL->head->prev = pL->tail;
  412092:	6862      	ldr	r2, [r4, #4]
  412094:	6823      	ldr	r3, [r4, #0]
  412096:	605a      	str	r2, [r3, #4]
  412098:	e7f1      	b.n	41207e <.LBE8>

0041209a <.LBE9>:
    _pCurrCmdN = 0;
  41209a:	2200      	movs	r2, #0
  41209c:	4b03      	ldr	r3, [pc, #12]	; (4120ac <.LBE9+0x12>)
  41209e:	601a      	str	r2, [r3, #0]
  4120a0:	bd38      	pop	{r3, r4, r5, pc}
  4120a2:	bf00      	nop
  4120a4:	2040da08 	.word	0x2040da08
  4120a8:	2040dd0c 	.word	0x2040dd0c
  4120ac:	2040dd1c 	.word	0x2040dd1c

Disassembly of section .text.USART1_Write%169:

004120b0 <USART1_Write>:
bool USART1_Write( void *buffer, const size_t size )
{
    bool status = false;
    uint8_t * lBuffer = (uint8_t *)buffer;

    if(NULL != lBuffer)
  4120b0:	b1c8      	cbz	r0, 4120e6 <.LVL58>
    {
        /* Check if transmit request is in progress */
        if(usart1Obj.txBusyStatus == false)
  4120b2:	4b0f      	ldr	r3, [pc, #60]	; (4120f0 <.LVL61+0x4>)
  4120b4:	7d1b      	ldrb	r3, [r3, #20]
  4120b6:	b9c3      	cbnz	r3, 4120ea <.LVL60>
        {
            usart1Obj.txBuffer = lBuffer;
  4120b8:	4b0d      	ldr	r3, [pc, #52]	; (4120f0 <.LVL61+0x4>)
  4120ba:	6018      	str	r0, [r3, #0]
            usart1Obj.txSize = size;
  4120bc:	6059      	str	r1, [r3, #4]
            usart1Obj.txProcessedSize = 0;
  4120be:	2100      	movs	r1, #0

004120c0 <.LVL55>:
  4120c0:	6099      	str	r1, [r3, #8]
            usart1Obj.txBusyStatus = true;
  4120c2:	2101      	movs	r1, #1
  4120c4:	7519      	strb	r1, [r3, #20]

004120c6 <.LVL56>:
            status = true;

            /* Initiate the transfer by sending first byte */
            if(US_CSR_TXEMPTY_Msk == (USART1_REGS->US_CSR& US_CSR_TXEMPTY_Msk))
  4120c6:	4b0b      	ldr	r3, [pc, #44]	; (4120f4 <.LVL61+0x8>)
  4120c8:	695b      	ldr	r3, [r3, #20]
  4120ca:	f413 7f00 	tst.w	r3, #512	; 0x200
  4120ce:	d004      	beq.n	4120da <.LVL56+0x14>
            {
                USART1_REGS->US_THR = (US_THR_TXCHR(*lBuffer) & US_THR_TXCHR_Msk);
  4120d0:	7802      	ldrb	r2, [r0, #0]
  4120d2:	4b08      	ldr	r3, [pc, #32]	; (4120f4 <.LVL61+0x8>)
  4120d4:	61da      	str	r2, [r3, #28]
                usart1Obj.txProcessedSize++;
  4120d6:	4b06      	ldr	r3, [pc, #24]	; (4120f0 <.LVL61+0x4>)
  4120d8:	6099      	str	r1, [r3, #8]
            }

            USART1_REGS->US_IER = US_IER_TXEMPTY_Msk;
  4120da:	f44f 7200 	mov.w	r2, #512	; 0x200
  4120de:	4b05      	ldr	r3, [pc, #20]	; (4120f4 <.LVL61+0x8>)
  4120e0:	609a      	str	r2, [r3, #8]
            status = true;
  4120e2:	2001      	movs	r0, #1

004120e4 <.LVL57>:
  4120e4:	4770      	bx	lr

004120e6 <.LVL58>:
    bool status = false;
  4120e6:	2000      	movs	r0, #0

004120e8 <.LVL59>:
  4120e8:	4770      	bx	lr

004120ea <.LVL60>:
  4120ea:	2000      	movs	r0, #0

004120ec <.LVL61>:
        }
    }

    return status;
}
  4120ec:	4770      	bx	lr
  4120ee:	bf00      	nop
  4120f0:	20400020 	.word	0x20400020
  4120f4:	40028000 	.word	0x40028000

Disassembly of section .text.SYS_INT_SourceDisable%170:

004120f8 <SYS_INT_SourceDisable>:

    return;
}

bool SYS_INT_SourceDisable( INT_SOURCE source )
{
  4120f8:	b538      	push	{r3, r4, r5, lr}

004120fa <.LCFI0>:
  4120fa:	4604      	mov	r4, r0
    INT_CONTROLLER_STATUS processorStatus;
    bool intSrcStatus;

    processorStatus = SYS_INT_Disable();
  4120fc:	f000 fe78 	bl	412df0 <SYS_INT_Disable>

00412100 <.LBB50>:
  if ((int32_t)(IRQn) >= 0)
  412100:	2c00      	cmp	r4, #0
  412102:	db16      	blt.n	412132 <.LVL9>
    return((uint32_t)(((NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  412104:	0963      	lsrs	r3, r4, #5
  412106:	490c      	ldr	r1, [pc, #48]	; (412138 <.LVL9+0x6>)
  412108:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
  41210c:	f004 041f 	and.w	r4, r4, #31

00412110 <.LVL5>:
  412110:	40e5      	lsrs	r5, r4

00412112 <.LBE50>:

    intSrcStatus = NVIC_GetEnableIRQ(source);
  412112:	f005 0501 	and.w	r5, r5, #1

00412116 <.LBB52>:
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  412116:	2201      	movs	r2, #1
  412118:	fa02 f404 	lsl.w	r4, r2, r4
  41211c:	3320      	adds	r3, #32
  41211e:	f841 4023 	str.w	r4, [r1, r3, lsl #2]

00412122 <.LBB54>:
  __ASM volatile ("dsb 0xF":::"memory");
  412122:	f3bf 8f4f 	dsb	sy

00412126 <.LBB56>:
  __ASM volatile ("isb 0xF":::"memory");
  412126:	f3bf 8f6f 	isb	sy

0041212a <.LBE52>:

    NVIC_DisableIRQ( source );

    SYS_INT_Restore( processorStatus );
  41212a:	f000 fe6a 	bl	412e02 <.LFE142>

0041212e <.LVL8>:

    /* return the source status */
    return intSrcStatus;
  41212e:	4628      	mov	r0, r5
  412130:	bd38      	pop	{r3, r4, r5, pc}

00412132 <.LVL9>:
    intSrcStatus = NVIC_GetEnableIRQ(source);
  412132:	2500      	movs	r5, #0
  412134:	e7f9      	b.n	41212a <.LBE52>
  412136:	bf00      	nop
  412138:	e000e100 	.word	0xe000e100

Disassembly of section .text.wc_AesSetKey%171:

0041213c <wc_AesSetKey>:
        if (aes == NULL ||
  41213c:	b1b8      	cbz	r0, 41216e <.LCFI8>
    {
  41213e:	b510      	push	{r4, lr}

00412140 <.LCFI5>:
  412140:	b082      	sub	sp, #8

00412142 <.LCFI6>:
  412142:	4604      	mov	r4, r0
                !((keylen == 16) || (keylen == 24) || (keylen == 32))) {
  412144:	f022 0008 	bic.w	r0, r2, #8

00412148 <.LVL157>:
  412148:	2810      	cmp	r0, #16
  41214a:	d001      	beq.n	412150 <.LVL157+0x8>
  41214c:	2a20      	cmp	r2, #32
  41214e:	d111      	bne.n	412174 <.LCFI9>
        if (keylen > max_key_len) {
  412150:	2a20      	cmp	r2, #32
  412152:	d812      	bhi.n	41217a <.LCFI9+0x6>
  412154:	4620      	mov	r0, r4
        aes->keylen = keylen;
  412156:	f8c4 20f4 	str.w	r2, [r4, #244]	; 0xf4
        aes->rounds = keylen/4 + 6;
  41215a:	0894      	lsrs	r4, r2, #2

0041215c <.LVL158>:
  41215c:	3406      	adds	r4, #6
  41215e:	f8c0 40f0 	str.w	r4, [r0, #240]	; 0xf0
        return wc_AesSetKeyLocal(aes, userKey, keylen, iv, dir);
  412162:	9c04      	ldr	r4, [sp, #16]
  412164:	9400      	str	r4, [sp, #0]
  412166:	f7f8 fbcb 	bl	40a900 <.LFE2>

0041216a <.LVL159>:
    }
  41216a:	b002      	add	sp, #8

0041216c <.LCFI7>:
  41216c:	bd10      	pop	{r4, pc}

0041216e <.LCFI8>:
            return BAD_FUNC_ARG;
  41216e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412172 <.LVL161>:
  412172:	4770      	bx	lr

00412174 <.LCFI9>:
  412174:	f06f 00ac 	mvn.w	r0, #172	; 0xac
  412178:	e7f7      	b.n	41216a <.LVL159>
            return BAD_FUNC_ARG;
  41217a:	f06f 00ac 	mvn.w	r0, #172	; 0xac
  41217e:	e7f4      	b.n	41216a <.LVL159>

Disassembly of section .text.USART1_ErrorGet%172:

00412180 <USART1_ErrorGet>:
    uint32_t status = USART1_REGS->US_CSR;
  412180:	4b0f      	ldr	r3, [pc, #60]	; (4121c0 <.LVL13+0xc>)
  412182:	695b      	ldr	r3, [r3, #20]

00412184 <.LVL6>:
    USART_ERROR errors = USART_ERROR_NONE;
  412184:	f3c3 1040 	ubfx	r0, r3, #5, #1

00412188 <.LVL7>:
    if(status & US_CSR_PARE_Msk)
  412188:	f013 0f80 	tst.w	r3, #128	; 0x80
        errors |= USART_ERROR_PARITY;
  41218c:	bf18      	it	ne
  41218e:	f040 0002 	orrne.w	r0, r0, #2
    if(status & US_CSR_FRAME_Msk)
  412192:	f013 0f40 	tst.w	r3, #64	; 0x40
        errors |= USART_ERROR_FRAMING;
  412196:	bf18      	it	ne
  412198:	f040 0004 	orrne.w	r0, r0, #4
    if(errors != USART_ERROR_NONE)
  41219c:	b900      	cbnz	r0, 4121a0 <.LBB14>

0041219e <.LVL10>:
}
  41219e:	4770      	bx	lr

004121a0 <.LBB14>:
    USART1_REGS->US_CR|= US_CR_RSTSTA_Msk;
  4121a0:	4b07      	ldr	r3, [pc, #28]	; (4121c0 <.LVL13+0xc>)

004121a2 <.LVL12>:
  4121a2:	681a      	ldr	r2, [r3, #0]
  4121a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  4121a8:	601a      	str	r2, [r3, #0]
    while( US_CSR_RXRDY_Msk == (USART1_REGS->US_CSR& US_CSR_RXRDY_Msk) )
  4121aa:	695b      	ldr	r3, [r3, #20]
  4121ac:	f013 0f01 	tst.w	r3, #1
  4121b0:	d0f5      	beq.n	41219e <.LVL10>
        dummyData = (USART1_REGS->US_RHR& US_RHR_RXCHR_Msk);
  4121b2:	4b03      	ldr	r3, [pc, #12]	; (4121c0 <.LVL13+0xc>)

004121b4 <.LVL13>:
  4121b4:	699a      	ldr	r2, [r3, #24]
    while( US_CSR_RXRDY_Msk == (USART1_REGS->US_CSR& US_CSR_RXRDY_Msk) )
  4121b6:	695a      	ldr	r2, [r3, #20]
  4121b8:	f012 0f01 	tst.w	r2, #1
  4121bc:	d1fa      	bne.n	4121b4 <.LVL13>
  4121be:	e7ee      	b.n	41219e <.LVL10>
  4121c0:	40028000 	.word	0x40028000

Disassembly of section .text.pic32c_RNG_GenerateBlock%173:

004121c4 <pic32c_RNG_GenerateBlock>:


/* sz is number of bytes */
int pic32c_RNG_GenerateBlock(byte* output, word32 sz)
{
    while (sz)
  4121c4:	b1e1      	cbz	r1, 412200 <.LCFI3>
{
  4121c6:	b530      	push	{r4, r5, lr}

004121c8 <.LCFI0>:
  4121c8:	b083      	sub	sp, #12

004121ca <.LCFI1>:
  4121ca:	4605      	mov	r5, r0
  4121cc:	460a      	mov	r2, r1

004121ce <.LBB11>:
    {
        /* get 32 bits - BLOCKING */
        while (!(TRNG_REGS->TRNG_ISR & TRNG_ISR_DATRDY_Msk))
  4121ce:	4c0d      	ldr	r4, [pc, #52]	; (412204 <.LVL8+0x2>)
  4121d0:	e007      	b.n	4121e2 <.LBB14>

004121d2 <.LVL2>:
        uint32_t result = TRNG_REGS->TRNG_ODATA;

        /* stuff the data into the output buffer. Watch for buffer overrun */
        if (sz < RNG_BYTES_AT_A_TIME)
        {
            memcpy((void *)output, (void*)&result, sz);
  4121d2:	a901      	add	r1, sp, #4
  4121d4:	4628      	mov	r0, r5
  4121d6:	f7fc f9ed 	bl	40e5b4 <.LFE14>

004121da <.LVL3>:
            sz = 0;
  4121da:	2200      	movs	r2, #0

004121dc <.LBB12>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4121dc:	f3bf 8f5f 	dmb	sy

004121e0 <.LBE11>:
    while (sz)
  4121e0:	b15a      	cbz	r2, 4121fa <.LBE14>

004121e2 <.LBB14>:
        while (!(TRNG_REGS->TRNG_ISR & TRNG_ISR_DATRDY_Msk))
  4121e2:	69e3      	ldr	r3, [r4, #28]
  4121e4:	f013 0f01 	tst.w	r3, #1
  4121e8:	d0fb      	beq.n	4121e2 <.LBB14>
        uint32_t result = TRNG_REGS->TRNG_ODATA;
  4121ea:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4121ec:	9301      	str	r3, [sp, #4]
        if (sz < RNG_BYTES_AT_A_TIME)
  4121ee:	2a03      	cmp	r2, #3
  4121f0:	d9ef      	bls.n	4121d2 <.LVL2>
        }
        else
        {
            memcpy((void *)output, (void*)&result, RNG_BYTES_AT_A_TIME);
  4121f2:	f845 3b04 	str.w	r3, [r5], #4
            sz -= RNG_BYTES_AT_A_TIME;
  4121f6:	3a04      	subs	r2, #4

004121f8 <.LVL6>:
  4121f8:	e7f0      	b.n	4121dc <.LBB12>

004121fa <.LBE14>:
        /* memory barrier */
        __DMB();
    }

    return 0;
}
  4121fa:	2000      	movs	r0, #0
  4121fc:	b003      	add	sp, #12

004121fe <.LCFI2>:
  4121fe:	bd30      	pop	{r4, r5, pc}

00412200 <.LCFI3>:
  412200:	2000      	movs	r0, #0

00412202 <.LVL8>:
  412202:	4770      	bx	lr
  412204:	40070000 	.word	0x40070000

Disassembly of section .rodata%174:

00412208 <.LC5-0x24>:
  412208:	00464e49 	.word	0x00464e49
  41220c:	00666e69 	.word	0x00666e69
  412210:	004e414e 	.word	0x004e414e
  412214:	006e616e 	.word	0x006e616e
  412218:	33323130 	.word	0x33323130
  41221c:	37363534 	.word	0x37363534
  412220:	42413938 	.word	0x42413938
  412224:	46454443 	.word	0x46454443
  412228:	00000000 	.word	0x00000000

0041222c <.LC5>:
  41222c:	33323130 	.word	0x33323130
  412230:	37363534 	.word	0x37363534
  412234:	62613938 	.word	0x62613938
  412238:	66656463 	.word	0x66656463
  41223c:	00000000 	.word	0x00000000

00412240 <.LC6>:
  412240:	6c756e28 	.word	0x6c756e28
  412244:	0000296c 	.word	0x0000296c
  412248:	0030      	.short	0x0030
  41224a:	bf00      	nop

Disassembly of section .text.NVIC_Initialize%175:

0041224c <NVIC_Initialize>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  41224c:	490c      	ldr	r1, [pc, #48]	; (412280 <.LVL10+0x4>)
  41224e:	68ca      	ldr	r2, [r1, #12]

00412250 <.LVL1>:
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  412250:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700

00412254 <.LVL2>:
  412254:	0412      	lsls	r2, r2, #16
  412256:	0c12      	lsrs	r2, r2, #16

00412258 <.LVL3>:
  reg_value  =  (reg_value                                   |
  412258:	4b0a      	ldr	r3, [pc, #40]	; (412284 <.LVL10+0x8>)
  41225a:	4313      	orrs	r3, r2

0041225c <.LVL4>:
  SCB->AIRCR =  reg_value;
  41225c:	60cb      	str	r3, [r1, #12]

0041225e <.LBB22>:
  41225e:	f3bf 8f5f 	dmb	sy

00412262 <.LBB24>:
  __ASM volatile ("cpsie i" : : : "memory");
  412262:	b662      	cpsie	i

00412264 <.LBB26>:
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  412264:	4b08      	ldr	r3, [pc, #32]	; (412288 <.LVL10+0xc>)
  412266:	22e0      	movs	r2, #224	; 0xe0
  412268:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e

0041226c <.LBB28>:
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  41226c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  412270:	6019      	str	r1, [r3, #0]

00412272 <.LBB30>:
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  412272:	f883 231a 	strb.w	r2, [r3, #794]	; 0x31a

00412276 <.LBB32>:
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  412276:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  41227a:	601a      	str	r2, [r3, #0]

0041227c <.LVL10>:
  41227c:	4770      	bx	lr
  41227e:	bf00      	nop
  412280:	e000ed00 	.word	0xe000ed00
  412284:	05fa0400 	.word	0x05fa0400
  412288:	e000e100 	.word	0xe000e100

Disassembly of section .text.random_test%176:

0041228c <random_test>:
{
  41228c:	b500      	push	{lr}

0041228e <.LCFI46>:
  41228e:	b0cb      	sub	sp, #300	; 0x12c

00412290 <.LCFI47>:
    appData.random_test_result = 0;
  412290:	2200      	movs	r2, #0
  412292:	4b0d      	ldr	r3, [pc, #52]	; (4122c8 <.LVL107+0x10>)
  412294:	641a      	str	r2, [r3, #64]	; 0x40
    ret = CRYPT_RNG_Initialize(&rng);
  412296:	a808      	add	r0, sp, #32
  412298:	f000 fdee 	bl	412e78 <.LFE15>

0041229c <.LVL105>:
    if (ret != 0) 
  41229c:	b130      	cbz	r0, 4122ac <.LCFI49>
        appData.random_test_result++;
  41229e:	4a0a      	ldr	r2, [pc, #40]	; (4122c8 <.LVL107+0x10>)
  4122a0:	6c13      	ldr	r3, [r2, #64]	; 0x40
  4122a2:	3301      	adds	r3, #1
  4122a4:	6413      	str	r3, [r2, #64]	; 0x40
}
  4122a6:	b04b      	add	sp, #300	; 0x12c

004122a8 <.LCFI48>:
  4122a8:	f85d fb04 	ldr.w	pc, [sp], #4

004122ac <.LCFI49>:
        ret = CRYPT_RNG_BlockGenerate(&rng, block, sizeof(block));   
  4122ac:	2220      	movs	r2, #32
  4122ae:	4669      	mov	r1, sp
  4122b0:	eb0d 0002 	add.w	r0, sp, r2

004122b4 <.LVL106>:
  4122b4:	f000 fcfe 	bl	412cb4 <.LFE17>

004122b8 <.LVL107>:
        if (ret != 0) 
  4122b8:	2800      	cmp	r0, #0
  4122ba:	d0f4      	beq.n	4122a6 <.LVL105+0xa>
            appData.random_test_result++;
  4122bc:	4a02      	ldr	r2, [pc, #8]	; (4122c8 <.LVL107+0x10>)
  4122be:	6c13      	ldr	r3, [r2, #64]	; 0x40
  4122c0:	3301      	adds	r3, #1
  4122c2:	6413      	str	r3, [r2, #64]	; 0x40
}
  4122c4:	e7ef      	b.n	4122a6 <.LVL105+0xa>
  4122c6:	bf00      	nop
  4122c8:	2040db08 	.word	0x2040db08

Disassembly of section .text.wc_AesSetIV%177:

004122cc <wc_AesSetIV>:
    if (aes == NULL)
  4122cc:	b1d8      	cbz	r0, 412306 <.LVL113>
  4122ce:	4602      	mov	r2, r0
    if (iv)
  4122d0:	b179      	cbz	r1, 4122f2 <.LVL111>
{
  4122d2:	b430      	push	{r4, r5}

004122d4 <.LCFI2>:
        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
  4122d4:	680d      	ldr	r5, [r1, #0]
  4122d6:	684c      	ldr	r4, [r1, #4]
  4122d8:	6888      	ldr	r0, [r1, #8]

004122da <.LVL109>:
  4122da:	68c9      	ldr	r1, [r1, #12]

004122dc <.LVL110>:
  4122dc:	f8c2 50f8 	str.w	r5, [r2, #248]	; 0xf8
  4122e0:	f8c2 40fc 	str.w	r4, [r2, #252]	; 0xfc
  4122e4:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
  4122e8:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
    return 0;
  4122ec:	2000      	movs	r0, #0
}
  4122ee:	bc30      	pop	{r4, r5}

004122f0 <.LCFI3>:
  4122f0:	4770      	bx	lr

004122f2 <.LVL111>:
        XMEMSET(aes->reg,  0, AES_BLOCK_SIZE);
  4122f2:	2000      	movs	r0, #0

004122f4 <.LVL112>:
  4122f4:	f8c2 00f8 	str.w	r0, [r2, #248]	; 0xf8
  4122f8:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
  4122fc:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
  412300:	f8c2 0104 	str.w	r0, [r2, #260]	; 0x104
  412304:	4770      	bx	lr

00412306 <.LVL113>:
        return BAD_FUNC_ARG;
  412306:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041230a <.LVL114>:
  41230a:	4770      	bx	lr

Disassembly of section .text.wc_InitSha_ex%178:

0041230c <wc_InitSha_ex>:
    if (sha == NULL)
  41230c:	4603      	mov	r3, r0
  41230e:	b1b0      	cbz	r0, 41233e <.LVL348>
    sha->heap = heap;
  412310:	6601      	str	r1, [r0, #96]	; 0x60

00412312 <.LBB769>:
        sha->digest[0] = 0x67452301L;
  412312:	4a0c      	ldr	r2, [pc, #48]	; (412344 <.LVL349+0x2>)

00412314 <.LVL345>:
  412314:	64c2      	str	r2, [r0, #76]	; 0x4c
        sha->digest[1] = 0xEFCDAB89L;
  412316:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
  41231a:	6502      	str	r2, [r0, #80]	; 0x50
        sha->digest[2] = 0x98BADCFEL;
  41231c:	f102 4229 	add.w	r2, r2, #2835349504	; 0xa9000000
  412320:	f5a2 1296 	sub.w	r2, r2, #1228800	; 0x12c000
  412324:	f6a2 628b 	subw	r2, r2, #3723	; 0xe8b
  412328:	6542      	str	r2, [r0, #84]	; 0x54
        sha->digest[3] = 0x10325476L;
  41232a:	f1a2 3288 	sub.w	r2, r2, #2290649224	; 0x88888888
  41232e:	6582      	str	r2, [r0, #88]	; 0x58
        sha->digest[4] = 0xC3D2E1F0L;
  412330:	4a05      	ldr	r2, [pc, #20]	; (412348 <.LVL349+0x6>)
  412332:	65c2      	str	r2, [r0, #92]	; 0x5c
        sha->buffLen = 0;
  412334:	2000      	movs	r0, #0

00412336 <.LVL346>:
  412336:	6018      	str	r0, [r3, #0]
        sha->loLen   = 0;
  412338:	6058      	str	r0, [r3, #4]
        sha->hiLen   = 0;
  41233a:	6098      	str	r0, [r3, #8]

0041233c <.LBE769>:
  41233c:	4770      	bx	lr

0041233e <.LVL348>:
        return BAD_FUNC_ARG;
  41233e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412342 <.LVL349>:
}
  412342:	4770      	bx	lr
  412344:	67452301 	.word	0x67452301
  412348:	c3d2e1f0 	.word	0xc3d2e1f0

Disassembly of section .text.SYS_CONSOLE_Status%179:

0041234c <SYS_CONSOLE_Status>:

    SYS_STATUS_ERROR    Indicates that the specified module is in an error state
*/

SYS_STATUS SYS_CONSOLE_Status ( SYS_MODULE_OBJ object )
{
  41234c:	b508      	push	{r3, lr}

0041234e <.LCFI5>:
    SYS_STATUS ret = SYS_STATUS_ERROR;
    SYS_CONSOLE_STATUS status;
    SYS_MODULE_INDEX index = (SYS_MODULE_INDEX)object;

    if (index >= SYS_CONSOLE_DEVICE_MAX_INSTANCES)
  41234e:	b283      	uxth	r3, r0
  412350:	b9ab      	cbnz	r3, 41237e <.LVL27>
        return SYS_STATUS_ERROR;

    if (consoleDeviceInstance[index].consoleInstanceDevDesc == NULL)
  412352:	eb03 0043 	add.w	r0, r3, r3, lsl #1

00412356 <.LVL19>:
  412356:	4b0c      	ldr	r3, [pc, #48]	; (412388 <.LVL29+0x4>)

00412358 <.LVL20>:
  412358:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  41235c:	6843      	ldr	r3, [r0, #4]
  41235e:	b18b      	cbz	r3, 412384 <.LVL29>
    {
        return SYS_STATUS_UNINITIALIZED;
    }

    status = consoleDeviceInstance[index].consoleInstanceDevDesc->sysConsoleStatus();
  412360:	699b      	ldr	r3, [r3, #24]
  412362:	4798      	blx	r3

00412364 <.LVL21>:

    switch (status)
  412364:	2801      	cmp	r0, #1
  412366:	d008      	beq.n	41237a <.LVL25>
  412368:	b128      	cbz	r0, 412376 <.LVL23>
    SYS_STATUS ret = SYS_STATUS_ERROR;
  41236a:	2802      	cmp	r0, #2
  41236c:	bf0c      	ite	eq
  41236e:	2001      	moveq	r0, #1

00412370 <.LVL22>:
  412370:	f04f 30ff 	movne.w	r0, #4294967295
  412374:	bd08      	pop	{r3, pc}

00412376 <.LVL23>:
    {
        case SYS_CONSOLE_STATUS_NOT_CONFIGURED:
            ret = SYS_STATUS_UNINITIALIZED;
  412376:	2000      	movs	r0, #0

00412378 <.LVL24>:
  412378:	bd08      	pop	{r3, pc}

0041237a <.LVL25>:
            break;
        case SYS_CONSOLE_STATUS_CONFIGURED:
            ret = SYS_STATUS_READY;
  41237a:	2002      	movs	r0, #2

0041237c <.LVL26>:
            break;
  41237c:	bd08      	pop	{r3, pc}

0041237e <.LVL27>:
        return SYS_STATUS_ERROR;
  41237e:	f04f 30ff 	mov.w	r0, #4294967295

00412382 <.LVL28>:
  412382:	bd08      	pop	{r3, pc}

00412384 <.LVL29>:
        return SYS_STATUS_UNINITIALIZED;
  412384:	2000      	movs	r0, #0
        default:
            break;
    }

    return ret;
}
  412386:	bd08      	pop	{r3, pc}
  412388:	2040dcec 	.word	0x2040dcec

Disassembly of section .text.__hi0bits%180:

0041238c <__hi0bits>:
  41238c:	0c02      	lsrs	r2, r0, #16
  41238e:	0412      	lsls	r2, r2, #16
  412390:	4603      	mov	r3, r0
  412392:	b9b2      	cbnz	r2, 4123c2 <.LVL75>

00412394 <.LVL63>:
  412394:	0403      	lsls	r3, r0, #16

00412396 <.LVL64>:
  412396:	2010      	movs	r0, #16

00412398 <.LVL65>:
  412398:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  41239c:	bf04      	itt	eq
  41239e:	021b      	lsleq	r3, r3, #8

004123a0 <.LVL66>:
  4123a0:	3008      	addeq	r0, #8

004123a2 <.LVL67>:
  4123a2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  4123a6:	bf04      	itt	eq
  4123a8:	011b      	lsleq	r3, r3, #4

004123aa <.LVL68>:
  4123aa:	3004      	addeq	r0, #4

004123ac <.LVL69>:
  4123ac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  4123b0:	bf04      	itt	eq
  4123b2:	009b      	lsleq	r3, r3, #2

004123b4 <.LVL70>:
  4123b4:	3002      	addeq	r0, #2

004123b6 <.LVL71>:
  4123b6:	2b00      	cmp	r3, #0
  4123b8:	db02      	blt.n	4123c0 <.LVL74>

004123ba <.LVL72>:
  4123ba:	005b      	lsls	r3, r3, #1

004123bc <.LVL73>:
  4123bc:	d403      	bmi.n	4123c6 <.LVL77>
  4123be:	2020      	movs	r0, #32

004123c0 <.LVL74>:
  4123c0:	4770      	bx	lr

004123c2 <.LVL75>:
  4123c2:	2000      	movs	r0, #0

004123c4 <.LVL76>:
  4123c4:	e7e8      	b.n	412398 <.LVL65>

004123c6 <.LVL77>:
  4123c6:	3001      	adds	r0, #1

004123c8 <.LVL78>:
  4123c8:	4770      	bx	lr

004123ca <.LFE21>:
  4123ca:	bf00      	nop

Disassembly of section .text.Console_UART_Flush%181:

004123cc <Console_UART_Flush>:
    if (consUartData.state != CONSOLE_UART_STATE_INIT)
  4123cc:	4b0b      	ldr	r3, [pc, #44]	; (4123fc <Console_UART_Flush+0x30>)
  4123ce:	781b      	ldrb	r3, [r3, #0]
  4123d0:	b113      	cbz	r3, 4123d8 <Console_UART_Flush+0xc>
        consUartData.state = CONSOLE_UART_STATE_READY;
  4123d2:	2202      	movs	r2, #2
  4123d4:	4b09      	ldr	r3, [pc, #36]	; (4123fc <Console_UART_Flush+0x30>)
  4123d6:	701a      	strb	r2, [r3, #0]
    consUartData.overflowFlag = false;
  4123d8:	4a08      	ldr	r2, [pc, #32]	; (4123fc <Console_UART_Flush+0x30>)
  4123da:	2300      	movs	r3, #0
  4123dc:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
    consUartData.isWriteComplete = true;
  4123e0:	2001      	movs	r0, #1
  4123e2:	f882 0045 	strb.w	r0, [r2, #69]	; 0x45
    writeQueue.nextPos = 0;
  4123e6:	4906      	ldr	r1, [pc, #24]	; (412400 <Console_UART_Flush+0x34>)
  4123e8:	604b      	str	r3, [r1, #4]
    writeQueue.tailPos = 0;
  4123ea:	600b      	str	r3, [r1, #0]
    writeQueue.numElem = 0;
  4123ec:	608b      	str	r3, [r1, #8]
    consUartData.isReadComplete = true;
  4123ee:	f882 0044 	strb.w	r0, [r2, #68]	; 0x44
    readQueue.nextPos = 0;
  4123f2:	4a04      	ldr	r2, [pc, #16]	; (412404 <Console_UART_Flush+0x38>)
  4123f4:	6053      	str	r3, [r2, #4]
    readQueue.tailPos = 0;
  4123f6:	6013      	str	r3, [r2, #0]
    readQueue.numElem = 0;
  4123f8:	6093      	str	r3, [r2, #8]
  4123fa:	4770      	bx	lr
  4123fc:	2040dba8 	.word	0x2040dba8
  412400:	2040dccc 	.word	0x2040dccc
  412404:	2040dcb8 	.word	0x2040dcb8

Disassembly of section .text.CommandQuit%182:

00412408 <CommandQuit>:
{
  412408:	b538      	push	{r3, r4, r5, lr}

0041240a <.LCFI36>:
    (*pCmdIO->pCmdApi->msg)(cmdIoParam, LINE_TERM " *** Quitting the Command Processor. Bye ***\r\n" );
  41240a:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
  41240e:	681b      	ldr	r3, [r3, #0]
  412410:	490b      	ldr	r1, [pc, #44]	; (412440 <.LVL320+0x2>)

00412412 <.LVL311>:
  412412:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90

00412416 <.LVL312>:
  412416:	4798      	blx	r3

00412418 <.LVL313>:
    CommandCleanup();
  412418:	f7ff fe26 	bl	412068 <.LFE164>

0041241c <.LVL314>:
    while ((pCmdIoNode = SYS_CMDIO_GET_HANDLE(0)) != NULL)
  41241c:	2500      	movs	r5, #0
  41241e:	4628      	mov	r0, r5
  412420:	f000 fa6e 	bl	412900 <SYS_CMDIO_GET_HANDLE>

00412424 <.LVL315>:
  412424:	4604      	mov	r4, r0
  412426:	b140      	cbz	r0, 41243a <.LVL318>
        if(!SYS_CMD_DELETE(pCmdIoNode))
  412428:	4620      	mov	r0, r4
  41242a:	f7fe fdeb 	bl	411004 <SYS_CMD_DELETE>

0041242e <.LVL316>:
  41242e:	2800      	cmp	r0, #0
  412430:	d1f5      	bne.n	41241e <.LVL314+0x2>
            free(pCmdIoNode);
  412432:	4620      	mov	r0, r4
  412434:	f000 fd50 	bl	412ed8 <.LFE0>

00412438 <.LVL317>:
  412438:	e7f1      	b.n	41241e <.LVL314+0x2>

0041243a <.LVL318>:
}
  41243a:	2001      	movs	r0, #1

0041243c <.LVL319>:
  41243c:	bd38      	pop	{r3, r4, r5, pc}

0041243e <.LVL320>:
  41243e:	bf00      	nop
  412440:	0040d4dc 	.word	0x0040d4dc

Disassembly of section .text.USART1_Initialize%183:

00412444 <USART1_Initialize>:
    USART1_REGS->US_CR = (US_CR_RSTRX_Msk | US_CR_RSTTX_Msk | US_CR_RSTSTA_Msk);
  412444:	4b0c      	ldr	r3, [pc, #48]	; (412478 <.LFE19+0x34>)
  412446:	f44f 7286 	mov.w	r2, #268	; 0x10c
  41244a:	601a      	str	r2, [r3, #0]
    USART1_REGS->US_CR = (US_CR_TXEN_Msk | US_CR_RXEN_Msk);
  41244c:	2250      	movs	r2, #80	; 0x50
  41244e:	601a      	str	r2, [r3, #0]
    USART1_REGS->US_MR = ((US_MR_USCLKS_MCK) | (0 << US_MR_MODE9_Pos) | US_MR_CHRL_8_BIT | US_MR_PAR_NO | US_MR_NBSTOP_1_BIT | (0 << US_MR_SYNC_Pos) | (0 << US_MR_OVER_Pos));
  412450:	f44f 620c 	mov.w	r2, #2240	; 0x8c0
  412454:	605a      	str	r2, [r3, #4]
    USART1_REGS->US_BRGR = US_BRGR_CD(81);
  412456:	2251      	movs	r2, #81	; 0x51
  412458:	621a      	str	r2, [r3, #32]
    usart1Obj.rxBuffer = NULL;
  41245a:	4b08      	ldr	r3, [pc, #32]	; (41247c <.LFE19+0x38>)
  41245c:	2200      	movs	r2, #0
  41245e:	619a      	str	r2, [r3, #24]
    usart1Obj.rxSize = 0;
  412460:	61da      	str	r2, [r3, #28]
    usart1Obj.rxProcessedSize = 0;
  412462:	621a      	str	r2, [r3, #32]
    usart1Obj.rxBusyStatus = false;
  412464:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    usart1Obj.rxCallback = NULL;
  412468:	625a      	str	r2, [r3, #36]	; 0x24
    usart1Obj.txBuffer = NULL;
  41246a:	601a      	str	r2, [r3, #0]
    usart1Obj.txSize = 0;
  41246c:	605a      	str	r2, [r3, #4]
    usart1Obj.txProcessedSize = 0;
  41246e:	609a      	str	r2, [r3, #8]
    usart1Obj.txBusyStatus = false;
  412470:	751a      	strb	r2, [r3, #20]
    usart1Obj.txCallback = NULL;
  412472:	60da      	str	r2, [r3, #12]
  412474:	4770      	bx	lr
  412476:	bf00      	nop
  412478:	40028000 	.word	0x40028000
  41247c:	20400020 	.word	0x20400020

Disassembly of section .text.USART1_Read%184:

00412480 <USART1_Read>:
    if(NULL != lBuffer)
  412480:	b1a0      	cbz	r0, 4124ac <.LCFI5>
{
  412482:	b538      	push	{r3, r4, r5, lr}

00412484 <.LCFI4>:
  412484:	4605      	mov	r5, r0
  412486:	460c      	mov	r4, r1
        USART1_ErrorGet();
  412488:	f7ff fe7a 	bl	412180 <.LFE20>

0041248c <.LVL47>:
        if(usart1Obj.rxBusyStatus == false)
  41248c:	4b09      	ldr	r3, [pc, #36]	; (4124b4 <.LVL53>)
  41248e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
  412492:	b96b      	cbnz	r3, 4124b0 <.LCFI6>
            usart1Obj.rxBuffer = lBuffer;
  412494:	4b07      	ldr	r3, [pc, #28]	; (4124b4 <.LVL53>)
  412496:	619d      	str	r5, [r3, #24]
            usart1Obj.rxSize = size;
  412498:	61dc      	str	r4, [r3, #28]
            usart1Obj.rxProcessedSize = 0;
  41249a:	2200      	movs	r2, #0
  41249c:	621a      	str	r2, [r3, #32]
            usart1Obj.rxBusyStatus = true;
  41249e:	2001      	movs	r0, #1
  4124a0:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c

004124a4 <.LVL48>:
            USART1_REGS->US_IER = (US_IER_RXRDY_Msk | US_IER_FRAME_Msk | US_IER_PARE_Msk | US_IER_OVRE_Msk);
  4124a4:	22e1      	movs	r2, #225	; 0xe1
  4124a6:	4b04      	ldr	r3, [pc, #16]	; (4124b8 <.LVL53+0x4>)
  4124a8:	609a      	str	r2, [r3, #8]
  4124aa:	bd38      	pop	{r3, r4, r5, pc}

004124ac <.LCFI5>:
    bool status = false;
  4124ac:	2000      	movs	r0, #0

004124ae <.LVL50>:
  4124ae:	4770      	bx	lr

004124b0 <.LCFI6>:
  4124b0:	2000      	movs	r0, #0

004124b2 <.LVL52>:
}
  4124b2:	bd38      	pop	{r3, r4, r5, pc}

004124b4 <.LVL53>:
  4124b4:	20400020 	.word	0x20400020
  4124b8:	40028000 	.word	0x40028000

Disassembly of section .text.timerHardwarePeriod_update%185:

004124bc <timerHardwarePeriod_update>:
{
  4124bc:	b510      	push	{r4, lr}

004124be <.LCFI0>:
  4124be:	4604      	mov	r4, r0
    uint32_t hardwareCounter = counterObj->timePlib->timerCounterGet();
  4124c0:	6843      	ldr	r3, [r0, #4]
  4124c2:	691b      	ldr	r3, [r3, #16]
  4124c4:	4798      	blx	r3

004124c6 <.LVL4>:
    if(counterObj->tmrActive->timeRemaining > HW_COUNTER_MAX)
  4124c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4124c8:	691b      	ldr	r3, [r3, #16]
  4124ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4124ce:	d207      	bcs.n	4124e0 <.LVL8>
        countNeeded = (counterObj->tmrActive->timeRemaining + hardwareCounter);
  4124d0:	4418      	add	r0, r3

004124d2 <.LVL5>:
        if(countNeeded > HW_COUNTER_MAX)
  4124d2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  4124d6:	d305      	bcc.n	4124e4 <.LVL9>
            hardwarePeriod = (countNeeded - HW_COUNTER_MAX);
  4124d8:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00

004124dc <.LVL6>:
  4124dc:	38ff      	subs	r0, #255	; 0xff

004124de <.LVL7>:
  4124de:	e001      	b.n	4124e4 <.LVL9>

004124e0 <.LVL8>:
        hardwarePeriod = HW_COUNTER_MAX;
  4124e0:	f64f 70ff 	movw	r0, #65535	; 0xffff

004124e4 <.LVL9>:
    if(hardwarePeriod != counterObj->timePeriod)
  4124e4:	6963      	ldr	r3, [r4, #20]
  4124e6:	4298      	cmp	r0, r3
  4124e8:	d004      	beq.n	4124f4 <.LVL10>
        counterObj->timePeriodPrevious = counterObj->timePeriod;
  4124ea:	6123      	str	r3, [r4, #16]
        counterObj->timePeriod = hardwarePeriod;
  4124ec:	6160      	str	r0, [r4, #20]
        counterObj->timePlib->timerPeriodSet(counterObj->timePeriod);
  4124ee:	6863      	ldr	r3, [r4, #4]
  4124f0:	685b      	ldr	r3, [r3, #4]
  4124f2:	4798      	blx	r3

004124f4 <.LVL10>:
  4124f4:	bd10      	pop	{r4, pc}

Disassembly of section .rodata.pc1%186:

004124f8 <pc1>:
  4124f8:	3139 2129 1119 0109 323a 222a 121a 020a     91)!....:2*"....
  412508:	333b 232b 131b 030b 343c 242c 373f 272f     ;3+#....<4,$?7/'
  412518:	171f 070f 363e 262e 161e 060e 353d 252d     ....>6.&....=5-%
  412528:	151d 050d 141c 040c                         ........

Disassembly of section .text.wc_InitMd5_ex%187:

00412530 <wc_InitMd5_ex>:
    if (md5 == NULL)
  412530:	4603      	mov	r3, r0
  412532:	b1a0      	cbz	r0, 41255e <.LVL328>
    md5->heap = heap;
  412534:	65c1      	str	r1, [r0, #92]	; 0x5c

00412536 <.LBB139>:
    md5->digest[0] = 0x67452301L;
  412536:	4a0b      	ldr	r2, [pc, #44]	; (412564 <.LVL329+0x2>)

00412538 <.LVL325>:
  412538:	64c2      	str	r2, [r0, #76]	; 0x4c
    md5->digest[1] = 0xefcdab89L;
  41253a:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
  41253e:	6502      	str	r2, [r0, #80]	; 0x50
    md5->digest[2] = 0x98badcfeL;
  412540:	f102 4229 	add.w	r2, r2, #2835349504	; 0xa9000000
  412544:	f5a2 1296 	sub.w	r2, r2, #1228800	; 0x12c000
  412548:	f6a2 628b 	subw	r2, r2, #3723	; 0xe8b
  41254c:	6542      	str	r2, [r0, #84]	; 0x54
    md5->digest[3] = 0x10325476L;
  41254e:	f1a2 3288 	sub.w	r2, r2, #2290649224	; 0x88888888
  412552:	6582      	str	r2, [r0, #88]	; 0x58
    md5->buffLen = 0;
  412554:	2000      	movs	r0, #0

00412556 <.LVL326>:
  412556:	6018      	str	r0, [r3, #0]
    md5->loLen   = 0;
  412558:	6058      	str	r0, [r3, #4]
    md5->hiLen   = 0;
  41255a:	6098      	str	r0, [r3, #8]

0041255c <.LBE139>:
  41255c:	4770      	bx	lr

0041255e <.LVL328>:
        return BAD_FUNC_ARG;
  41255e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412562 <.LVL329>:
}
  412562:	4770      	bx	lr
  412564:	67452301 	.word	0x67452301

Disassembly of section .text.__mcmp%188:

00412568 <__mcmp>:
  412568:	b430      	push	{r4, r5}

0041256a <.LCFI12>:
  41256a:	690b      	ldr	r3, [r1, #16]
  41256c:	4605      	mov	r5, r0
  41256e:	6900      	ldr	r0, [r0, #16]

00412570 <.LVL212>:
  412570:	1ac0      	subs	r0, r0, r3

00412572 <.LVL213>:
  412572:	d10f      	bne.n	412594 <.LVL223>
  412574:	009b      	lsls	r3, r3, #2

00412576 <.LVL214>:
  412576:	3514      	adds	r5, #20

00412578 <.LVL215>:
  412578:	3114      	adds	r1, #20

0041257a <.LVL216>:
  41257a:	4419      	add	r1, r3

0041257c <.LVL217>:
  41257c:	442b      	add	r3, r5

0041257e <.LVL218>:
  41257e:	e001      	b.n	412584 <.LVL220>

00412580 <.LVL219>:
  412580:	429d      	cmp	r5, r3
  412582:	d207      	bcs.n	412594 <.LVL223>

00412584 <.LVL220>:
  412584:	f853 4d04 	ldr.w	r4, [r3, #-4]!

00412588 <.LVL221>:
  412588:	f851 2d04 	ldr.w	r2, [r1, #-4]!

0041258c <.LVL222>:
  41258c:	4294      	cmp	r4, r2
  41258e:	d0f7      	beq.n	412580 <.LVL219>
  412590:	d302      	bcc.n	412598 <.LCFI14>
  412592:	2001      	movs	r0, #1

00412594 <.LVL223>:
  412594:	bc30      	pop	{r4, r5}

00412596 <.LCFI13>:
  412596:	4770      	bx	lr

00412598 <.LCFI14>:
  412598:	f04f 30ff 	mov.w	r0, #4294967295

0041259c <.LVL225>:
  41259c:	e7fa      	b.n	412594 <.LVL223>

0041259e <.LFE27>:
  41259e:	bf00      	nop

Disassembly of section .text.SYS_CONSOLE_Read%189:

004125a0 <SYS_CONSOLE_Read>:
  Remarks:
    None.
*/

ssize_t SYS_CONSOLE_Read(const SYS_MODULE_INDEX index, int fd, void *buf, size_t count )
{
  4125a0:	b538      	push	{r3, r4, r5, lr}

004125a2 <.LCFI7>:
    if (consoleDeviceInstance[index].consoleDeviceInstanceStatus == SYS_STATUS_UNINITIALIZED
  4125a2:	eb00 0540 	add.w	r5, r0, r0, lsl #1
  4125a6:	4c0a      	ldr	r4, [pc, #40]	; (4125d0 <.LVL40+0x2>)
  4125a8:	f914 4025 	ldrsb.w	r4, [r4, r5, lsl #2]
  4125ac:	b15c      	cbz	r4, 4125c6 <.LVL37>
            || consoleDeviceInstance[index].consoleInstanceDevDesc == NULL)
  4125ae:	4c08      	ldr	r4, [pc, #32]	; (4125d0 <.LVL40+0x2>)
  4125b0:	eb04 0085 	add.w	r0, r4, r5, lsl #2

004125b4 <.LVL33>:
  4125b4:	6845      	ldr	r5, [r0, #4]
  4125b6:	b145      	cbz	r5, 4125ca <.LVL38+0x2>
  4125b8:	4614      	mov	r4, r2
  4125ba:	4608      	mov	r0, r1
    {
        return 0;
    }

    return consoleDeviceInstance[index].consoleInstanceDevDesc->sysConsoleRead(fd, buf, count);
  4125bc:	68ad      	ldr	r5, [r5, #8]
  4125be:	461a      	mov	r2, r3

004125c0 <.LVL34>:
  4125c0:	4621      	mov	r1, r4

004125c2 <.LVL35>:
  4125c2:	47a8      	blx	r5

004125c4 <.LVL36>:
  4125c4:	bd38      	pop	{r3, r4, r5, pc}

004125c6 <.LVL37>:
        return 0;
  4125c6:	2000      	movs	r0, #0

004125c8 <.LVL38>:
  4125c8:	bd38      	pop	{r3, r4, r5, pc}
  4125ca:	2000      	movs	r0, #0
}
  4125cc:	bd38      	pop	{r3, r4, r5, pc}

004125ce <.LVL40>:
  4125ce:	bf00      	nop
  4125d0:	2040dcec 	.word	0x2040dcec

Disassembly of section .text.__libc_fini_array%190:

004125d4 <__libc_fini_array>:
  4125d4:	b538      	push	{r3, r4, r5, lr}

004125d6 <.LCFI0>:
  4125d6:	4c0a      	ldr	r4, [pc, #40]	; (412600 <.LVL6+0x2>)
  4125d8:	4d0a      	ldr	r5, [pc, #40]	; (412604 <.LVL6+0x6>)
  4125da:	1b64      	subs	r4, r4, r5

004125dc <.LVL0>:
  4125dc:	10a4      	asrs	r4, r4, #2

004125de <.LVL1>:
  4125de:	d00a      	beq.n	4125f6 <.LVL4+0x4>
  4125e0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4125e4:	3b01      	subs	r3, #1
  4125e6:	eb05 0583 	add.w	r5, r5, r3, lsl #2

004125ea <.LVL2>:
  4125ea:	3c01      	subs	r4, #1

004125ec <.LVL3>:
  4125ec:	f855 3904 	ldr.w	r3, [r5], #-4
  4125f0:	4798      	blx	r3

004125f2 <.LVL4>:
  4125f2:	2c00      	cmp	r4, #0
  4125f4:	d1f9      	bne.n	4125ea <.LVL2>
  4125f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

004125fa <.LCFI1>:
  4125fa:	f7ed bdbf 	b.w	40017c <_fini>

004125fe <.LVL6>:
  4125fe:	bf00      	nop
  412600:	0040018c 	.word	0x0040018c
  412604:	00400188 	.word	0x00400188

Disassembly of section .text.Hash_DRBG_Uninstantiate%191:

00412608 <Hash_DRBG_Uninstantiate>:
{
  412608:	b410      	push	{r4}

0041260a <.LCFI0>:
  41260a:	f100 0478 	add.w	r4, r0, #120	; 0x78

0041260e <.LBB35>:
    volatile byte* z = (volatile byte*)mem;
  41260e:	4603      	mov	r3, r0
    while (len--) *z++ = 0;
  412610:	2100      	movs	r1, #0

00412612 <.LVL2>:
  412612:	1c5a      	adds	r2, r3, #1

00412614 <.LVL3>:
  412614:	7019      	strb	r1, [r3, #0]

00412616 <.LVL4>:
  412616:	4613      	mov	r3, r2
  412618:	42a2      	cmp	r2, r4
  41261a:	d1fa      	bne.n	412612 <.LVL2>
  41261c:	1e43      	subs	r3, r0, #1
  41261e:	f100 0177 	add.w	r1, r0, #119	; 0x77
  412622:	2000      	movs	r0, #0

00412624 <.LBE35>:
        compareSum |= compareDrbg[i] ^ 0;
  412624:	f813 2f01 	ldrb.w	r2, [r3, #1]!

00412628 <.LVL6>:
  412628:	4310      	orrs	r0, r2

0041262a <.LVL7>:
    for (i = 0; i < sizeof(DRBG); i++)
  41262a:	4299      	cmp	r1, r3
  41262c:	d1fa      	bne.n	412624 <.LBE35>
    return (compareSum == 0) ? DRBG_SUCCESS : DRBG_FAILURE;
  41262e:	2800      	cmp	r0, #0
}
  412630:	bf18      	it	ne
  412632:	2002      	movne	r0, #2

00412634 <.LVL8>:
  412634:	f85d 4b04 	ldr.w	r4, [sp], #4

00412638 <.LCFI1>:
  412638:	4770      	bx	lr

Disassembly of section .rodata.pc2%192:

0041263c <pc2>:
  41263c:	110e 180b 0501 1c03 060f 0a15 1317 040c     ................
  41264c:	081a 0710 141b 020d 3429 251f 372f 281e     ........)4.%/7.(
  41265c:	2d33 3021 312c 3827 3522 2a2e 2432 201d     3-!0,1'8"5.*2$. 

Disassembly of section .rodata.entropyA%193:

0041266c <entropyA>:
  41266c:	3663 7733 1ee4 4686 eb8d b40a eda8 3f68     c63w...F......h?
  41267c:	136a 474e 14e0 00c7 4e45 e981 5853 69a5     j.NG....EN..SX.i
  41268c:	8a80 8fa3 722a 23a6 9159 9f5a 048a 68ca     ....*r.#Y.Z....h

Disassembly of section .rodata.entropyB%194:

0041269c <entropyB>:
  41269c:	5aa6 f3d0 db45 0e4e e8ff c375 e7a2 421f     .Z..E.N...u....B
  4126ac:	12c7 629d f50f 19c1 efa9 f055 8551 fbe0     ...b......U.Q...
  4126bc:	8185 31f9 1775 6e27 e906 7d60 cbdb 2ecc     ...1u.'n..`}....

Disassembly of section .text.SYS_CONSOLE_Write%195:

004126cc <SYS_CONSOLE_Write>:
    None.
*/

ssize_t SYS_CONSOLE_Write(const SYS_MODULE_INDEX index, int fd, const char *buf, size_t count )
{
    if (index >= SYS_CONSOLE_DEVICE_MAX_INSTANCES)
  4126cc:	b970      	cbnz	r0, 4126ec <.LCFI9>
        return 0;

    if (consoleDeviceInstance[index].consoleDeviceInstanceStatus == SYS_STATUS_UNINITIALIZED
  4126ce:	480a      	ldr	r0, [pc, #40]	; (4126f8 <.LVL48>)

004126d0 <.LVL42>:
  4126d0:	f990 0000 	ldrsb.w	r0, [r0]
  4126d4:	b160      	cbz	r0, 4126f0 <.LVL47+0x2>
{
  4126d6:	b538      	push	{r3, r4, r5, lr}

004126d8 <.LCFI8>:
            || consoleDeviceInstance[index].consoleInstanceDevDesc == NULL)
  4126d8:	4807      	ldr	r0, [pc, #28]	; (4126f8 <.LVL48>)
  4126da:	6845      	ldr	r5, [r0, #4]
  4126dc:	b155      	cbz	r5, 4126f4 <.LCFI10>
  4126de:	4614      	mov	r4, r2
  4126e0:	4608      	mov	r0, r1
    {
        return 0;
    }

    return consoleDeviceInstance[index].consoleInstanceDevDesc->sysConsoleWrite(fd, buf, count);
  4126e2:	68ed      	ldr	r5, [r5, #12]
  4126e4:	461a      	mov	r2, r3

004126e6 <.LVL43>:
  4126e6:	4621      	mov	r1, r4

004126e8 <.LVL44>:
  4126e8:	47a8      	blx	r5

004126ea <.LVL45>:
  4126ea:	bd38      	pop	{r3, r4, r5, pc}

004126ec <.LCFI9>:
        return 0;
  4126ec:	2000      	movs	r0, #0

004126ee <.LVL47>:
  4126ee:	4770      	bx	lr
        return 0;
  4126f0:	2000      	movs	r0, #0
  4126f2:	4770      	bx	lr

004126f4 <.LCFI10>:
  4126f4:	2000      	movs	r0, #0
}
  4126f6:	bd38      	pop	{r3, r4, r5, pc}

004126f8 <.LVL48>:
  4126f8:	2040dcec 	.word	0x2040dcec

Disassembly of section .text.SYS_TIME_CounterGet%196:

004126fc <SYS_TIME_CounterGet>:
{
    return gSystemCounterObj.timeFrequency;
}

uint32_t SYS_TIME_CounterGet ( void )
{
  4126fc:	b510      	push	{r4, lr}

004126fe <.LCFI8>:
    SYS_TIME_COUNTER_OBJ * counterObj = (SYS_TIME_COUNTER_OBJ *)&gSystemCounterObj;
    uint32_t counterDelta = 0;
    uint32_t hardwareCounter = counterObj->timePlib->timerCounterGet();
  4126fe:	4c0a      	ldr	r4, [pc, #40]	; (412728 <.LVL92+0x4>)
  412700:	6863      	ldr	r3, [r4, #4]
  412702:	691b      	ldr	r3, [r3, #16]
  412704:	4798      	blx	r3

00412706 <.LVL88>:

    if((counterObj->timePeriod > counterObj->timePeriodPrevious) || (hardwareCounter > counterObj->timePeriod))
  412706:	6963      	ldr	r3, [r4, #20]
  412708:	6922      	ldr	r2, [r4, #16]
  41270a:	4298      	cmp	r0, r3
  41270c:	d806      	bhi.n	41271c <.LVL90>
  41270e:	4293      	cmp	r3, r2
  412710:	d804      	bhi.n	41271c <.LVL90>
    {
        counterDelta = (hardwareCounter - counterObj->timePeriodPrevious);
    }
    else
    {
        counterDelta = (HW_COUNTER_MAX - counterObj->timePeriodPrevious) + hardwareCounter;
  412712:	f64f 73ff 	movw	r3, #65535	; 0xffff
  412716:	1a9b      	subs	r3, r3, r2
  412718:	4418      	add	r0, r3

0041271a <.LVL89>:
  41271a:	e000      	b.n	41271e <.LVL91>

0041271c <.LVL90>:
        counterDelta = (hardwareCounter - counterObj->timePeriodPrevious);
  41271c:	1a80      	subs	r0, r0, r2

0041271e <.LVL91>:
    }

    return (counterObj->counter + counterDelta);
  41271e:	4b02      	ldr	r3, [pc, #8]	; (412728 <.LVL92+0x4>)
  412720:	699b      	ldr	r3, [r3, #24]
}
  412722:	4418      	add	r0, r3

00412724 <.LVL92>:
  412724:	bd10      	pop	{r4, pc}
  412726:	bf00      	nop
  412728:	2040dbf8 	.word	0x2040dbf8

Disassembly of section .text.pic32c_InitRng%197:

0041272c <pic32c_InitRng>:
    if ((PMC_REGS->PMC_PCSR1 & PmcBit) != PmcBit)
  41272c:	4b08      	ldr	r3, [pc, #32]	; (412750 <.LBE9+0x4>)
  41272e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  412732:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  412736:	d109      	bne.n	41274c <.LBE9>
        PMC_REGS->PMC_PCER1 = PmcBit;
  412738:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  41273c:	4b04      	ldr	r3, [pc, #16]	; (412750 <.LBE9+0x4>)
  41273e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        TRNG_REGS->TRNG_CR = TRNG_CR_KEY_PASSWD | TRNG_CR_ENABLE_Msk;
  412742:	4a04      	ldr	r2, [pc, #16]	; (412754 <.LBE9+0x8>)
  412744:	4b04      	ldr	r3, [pc, #16]	; (412758 <.LBE9+0xc>)
  412746:	601a      	str	r2, [r3, #0]

00412748 <.LBB9>:
  __ASM volatile ("dmb 0xF":::"memory");
  412748:	f3bf 8f5f 	dmb	sy

0041274c <.LBE9>:
}
  41274c:	2000      	movs	r0, #0
  41274e:	4770      	bx	lr
  412750:	400e0600 	.word	0x400e0600
  412754:	524e4701 	.word	0x524e4701
  412758:	40070000 	.word	0x40070000

Disassembly of section .text%198:

0041275c <__aeabi_uldivmod>:
  41275c:	b953      	cbnz	r3, 412774 <__aeabi_uldivmod+0x18>
  41275e:	b94a      	cbnz	r2, 412774 <__aeabi_uldivmod+0x18>
  412760:	2900      	cmp	r1, #0
  412762:	bf08      	it	eq
  412764:	2800      	cmpeq	r0, #0
  412766:	bf1c      	itt	ne
  412768:	f04f 31ff 	movne.w	r1, #4294967295
  41276c:	f04f 30ff 	movne.w	r0, #4294967295
  412770:	f000 bc2a 	b.w	412fc8 <__aeabi_idiv0>
  412774:	f1ad 0c08 	sub.w	ip, sp, #8
  412778:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  41277c:	f7f9 fe08 	bl	40c390 <.LBE93>
  412780:	f8dd e004 	ldr.w	lr, [sp, #4]
  412784:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  412788:	b004      	add	sp, #16
  41278a:	4770      	bx	lr

Disassembly of section .text.__ascii_mbtowc%199:

0041278c <__ascii_mbtowc>:
  41278c:	b082      	sub	sp, #8

0041278e <.LCFI2>:
  41278e:	b149      	cbz	r1, 4127a4 <.LCFI4>
  412790:	b15a      	cbz	r2, 4127aa <.LVL9+0x4>
  412792:	b16b      	cbz	r3, 4127b0 <.LCFI6>
  412794:	7813      	ldrb	r3, [r2, #0]

00412796 <.LVL4>:
  412796:	600b      	str	r3, [r1, #0]
  412798:	7812      	ldrb	r2, [r2, #0]

0041279a <.LVL5>:
  41279a:	1c10      	adds	r0, r2, #0

0041279c <.LVL6>:
  41279c:	bf18      	it	ne
  41279e:	2001      	movne	r0, #1
  4127a0:	b002      	add	sp, #8

004127a2 <.LCFI3>:
  4127a2:	4770      	bx	lr

004127a4 <.LCFI4>:
  4127a4:	a901      	add	r1, sp, #4

004127a6 <.LVL9>:
  4127a6:	2a00      	cmp	r2, #0
  4127a8:	d1f3      	bne.n	412792 <.LCFI2+0x4>
  4127aa:	4610      	mov	r0, r2

004127ac <.LVL10>:
  4127ac:	b002      	add	sp, #8

004127ae <.LCFI5>:
  4127ae:	4770      	bx	lr

004127b0 <.LCFI6>:
  4127b0:	f06f 0001 	mvn.w	r0, #1

004127b4 <.LVL13>:
  4127b4:	e7f4      	b.n	4127a0 <.LVL6+0x4>

004127b6 <.LFE18>:
  4127b6:	bf00      	nop

Disassembly of section .text._sbrk%200:

004127b8 <_sbrk>:
  4127b8:	4a07      	ldr	r2, [pc, #28]	; (4127d8 <_sbrk+0x20>)
  4127ba:	6813      	ldr	r3, [r2, #0]
  4127bc:	b143      	cbz	r3, 4127d0 <_sbrk+0x18>
  4127be:	4907      	ldr	r1, [pc, #28]	; (4127dc <_sbrk+0x24>)
  4127c0:	4418      	add	r0, r3
  4127c2:	4288      	cmp	r0, r1
  4127c4:	bf9a      	itte	ls
  4127c6:	6010      	strls	r0, [r2, #0]
  4127c8:	4618      	movls	r0, r3
  4127ca:	f04f 30ff 	movhi.w	r0, #4294967295
  4127ce:	4770      	bx	lr
  4127d0:	4b03      	ldr	r3, [pc, #12]	; (4127e0 <_sbrk+0x28>)
  4127d2:	6013      	str	r3, [r2, #0]
  4127d4:	e7f3      	b.n	4127be <_sbrk+0x6>
  4127d6:	bf00      	nop
  4127d8:	2040dd40 	.word	0x2040dd40
  4127dc:	20412d48 	.word	0x20412d48
  4127e0:	2040dd48 	.word	0x2040dd48

Disassembly of section .text.wc_Des3_SetIV%201:

004127e4 <wc_Des3_SetIV>:
        XMEMSET(des->reg,  0, DES_BLOCK_SIZE);
}

int wc_Des3_SetIV(Des3* des, const byte* iv)
{
    if (des == NULL) {
  4127e4:	4603      	mov	r3, r0
  4127e6:	b170      	cbz	r0, 412806 <.LVL256>
        return BAD_FUNC_ARG;
    }
    if (des && iv)
  4127e8:	b929      	cbnz	r1, 4127f6 <.LVL254>
        XMEMCPY(des->reg, iv, DES_BLOCK_SIZE);
    else if (des)
        XMEMSET(des->reg,  0, DES_BLOCK_SIZE);
  4127ea:	2000      	movs	r0, #0

004127ec <.LVL253>:
  4127ec:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  4127f0:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
  4127f4:	4770      	bx	lr

004127f6 <.LVL254>:
        XMEMCPY(des->reg, iv, DES_BLOCK_SIZE);
  4127f6:	6808      	ldr	r0, [r1, #0]

004127f8 <.LVL255>:
  4127f8:	684a      	ldr	r2, [r1, #4]
  4127fa:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  4127fe:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

    return 0;
  412802:	2000      	movs	r0, #0
  412804:	4770      	bx	lr

00412806 <.LVL256>:
        return BAD_FUNC_ARG;
  412806:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041280a <.LVL257>:
}
  41280a:	4770      	bx	lr

Disassembly of section .rodata.rcon%202:

0041280c <rcon>:
  41280c:	0000 0100 0000 0200 0000 0400 0000 0800     ................
  41281c:	0000 1000 0000 2000 0000 4000 0000 8000     ....... ...@....
  41282c:	0000 1b00 0000 3600                         .......6

Disassembly of section .text.ReadCommandCharacter%203:

00412834 <ReadCommandCharacter>:
{
  412834:	b508      	push	{r3, lr}

00412836 <.LCFI2>:
        if (SYS_CONSOLE_Status((SYS_MODULE_OBJ)readConsoleIndex) == SYS_STATUS_READY)
  412836:	2000      	movs	r0, #0

00412838 <.LVL14>:
  412838:	f7ff fd88 	bl	41234c <.LFE17>

0041283c <.LVL15>:
  41283c:	2802      	cmp	r0, #2
  41283e:	d001      	beq.n	412844 <.LVL15+0x8>
  412840:	2000      	movs	r0, #0
}
  412842:	bd08      	pop	{r3, pc}
            readyBytes = SYS_CONSOLE_Read(readConsoleIndex, _cmdAppData.moduleInFd, readBuff, 1);
  412844:	2301      	movs	r3, #1
  412846:	4a03      	ldr	r2, [pc, #12]	; (412854 <.LVL16+0x2>)
  412848:	4903      	ldr	r1, [pc, #12]	; (412858 <.LVL16+0x6>)
  41284a:	6909      	ldr	r1, [r1, #16]
  41284c:	2000      	movs	r0, #0
  41284e:	f7ff fea7 	bl	4125a0 <SYS_CONSOLE_Read>

00412852 <.LVL16>:
  412852:	bd08      	pop	{r3, pc}
  412854:	2040da88 	.word	0x2040da88
  412858:	2040dc8c 	.word	0x2040dc8c

Disassembly of section .text.SendCommandCharacter%204:

0041285c <SendCommandCharacter>:
{
  41285c:	b500      	push	{lr}

0041285e <.LCFI3>:
  41285e:	b083      	sub	sp, #12

00412860 <.LCFI4>:
  412860:	f88d 1007 	strb.w	r1, [sp, #7]

00412864 <.LVL18>:
        if (SYS_CONSOLE_Status((SYS_MODULE_OBJ)consoleIndex) != SYS_STATUS_READY)
  412864:	2000      	movs	r0, #0

00412866 <.LVL19>:
  412866:	f7ff fd71 	bl	41234c <.LFE17>

0041286a <.LVL20>:
  41286a:	2802      	cmp	r0, #2
  41286c:	d002      	beq.n	412874 <.LCFI6>

0041286e <.LVL21>:
}
  41286e:	b003      	add	sp, #12

00412870 <.LCFI5>:
  412870:	f85d fb04 	ldr.w	pc, [sp], #4

00412874 <.LCFI6>:
        SYS_CONSOLE_Write(consoleIndex, STDOUT_FILENO, (const char*)&c, 1);
  412874:	2301      	movs	r3, #1
  412876:	f10d 0207 	add.w	r2, sp, #7
  41287a:	4619      	mov	r1, r3
  41287c:	2000      	movs	r0, #0
  41287e:	f7ff ff25 	bl	4126cc <SYS_CONSOLE_Write>

00412882 <.LVL23>:
}
  412882:	e7f4      	b.n	41286e <.LVL21>

Disassembly of section .text.time_resourceUnlock%205:

00412884 <time_resourceUnlock>:
    SYS_INT_SourceEnable(gSystemCounterObj.timeInterrupt);
  412884:	4b07      	ldr	r3, [pc, #28]	; (4128a4 <.LVL2+0x4>)
  412886:	f993 3008 	ldrsb.w	r3, [r3, #8]

0041288a <.LBB4>:
  if ((int32_t)(IRQn) >= 0)
  41288a:	2b00      	cmp	r3, #0
  41288c:	db08      	blt.n	4128a0 <.LVL2>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  41288e:	0959      	lsrs	r1, r3, #5
  412890:	f003 031f 	and.w	r3, r3, #31

00412894 <.LVL1>:
  412894:	2201      	movs	r2, #1
  412896:	fa02 f303 	lsl.w	r3, r2, r3
  41289a:	4a03      	ldr	r2, [pc, #12]	; (4128a8 <.LVL2+0x8>)
  41289c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

004128a0 <.LVL2>:
  4128a0:	4770      	bx	lr
  4128a2:	bf00      	nop
  4128a4:	2040dbf8 	.word	0x2040dbf8
  4128a8:	e000e100 	.word	0xe000e100

Disassembly of section .text.TC1_CH0_TimerInitialize%206:

004128ac <TC1_CH0_TimerInitialize>:

/* Initialize channel in timer mode */
void TC1_CH0_TimerInitialize (void)
{
    /* Use peripheral clock */
    TC1_REGS->TC_CHANNEL[0].TC_EMR = TC_EMR_NODIVCLK_Msk;
  4128ac:	4b07      	ldr	r3, [pc, #28]	; (4128cc <.LBE4+0x20>)
  4128ae:	f44f 7280 	mov.w	r2, #256	; 0x100
  4128b2:	631a      	str	r2, [r3, #48]	; 0x30
    /* clock selection and waveform selection */
    TC1_REGS->TC_CHANNEL[0].TC_CMR =  TC_CMR_WAVSEL_UP_RC | TC_CMR_WAVE_Msk ;
  4128b4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  4128b8:	605a      	str	r2, [r3, #4]

    /* write period */
    TC1_REGS->TC_CHANNEL[0].TC_RC = 60060U;
  4128ba:	f64e 229c 	movw	r2, #60060	; 0xea9c
  4128be:	61da      	str	r2, [r3, #28]

    /* enable interrupt */
    TC1_REGS->TC_CHANNEL[0].TC_IER = TC_IER_CPCS_Msk;
  4128c0:	2210      	movs	r2, #16
  4128c2:	625a      	str	r2, [r3, #36]	; 0x24
    TC1_CH0_CallbackObj.callback_fn = NULL;
  4128c4:	2200      	movs	r2, #0
  4128c6:	4b02      	ldr	r3, [pc, #8]	; (4128d0 <.LBE4+0x24>)
  4128c8:	601a      	str	r2, [r3, #0]
  4128ca:	4770      	bx	lr
  4128cc:	40010000 	.word	0x40010000
  4128d0:	20400018 	.word	0x20400018

Disassembly of section .rodata.__mprec_bigtens%207:

004128d8 <__mprec_bigtens>:
  4128d8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  4128e8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  4128f8:	7f73bf3c 75154fdd                       <.s..O.u

Disassembly of section .text.SYS_CMDIO_GET_HANDLE%208:

00412900 <SYS_CMDIO_GET_HANDLE>:
    SYS_CMD_DEVICE_NODE* pNode = cmdIODevList.head;
  412900:	4b07      	ldr	r3, [pc, #28]	; (412920 <.LVL199+0x6>)
  412902:	685a      	ldr	r2, [r3, #4]
    if (num == 0) return ((pNode)?pNode:NULL);
  412904:	4603      	mov	r3, r0
  412906:	b140      	cbz	r0, 41291a <.LVL199>

00412908 <.LVL195>:
    while(num && pNode)
  412908:	b13a      	cbz	r2, 41291a <.LVL199>
        pNode = pNode->next;
  41290a:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
  41290e:	3b01      	subs	r3, #1

00412910 <.LVL197>:
  412910:	b21b      	sxth	r3, r3

00412912 <.LVL198>:
    while(num && pNode)
  412912:	2b00      	cmp	r3, #0
  412914:	bf18      	it	ne
  412916:	2a00      	cmpne	r2, #0
  412918:	d1f7      	bne.n	41290a <.LVL195+0x2>

0041291a <.LVL199>:
}
  41291a:	4610      	mov	r0, r2
  41291c:	4770      	bx	lr
  41291e:	bf00      	nop
  412920:	2040dcf8 	.word	0x2040dcf8

Disassembly of section .rodata._builtinCmdTbl%209:

00412924 <_builtinCmdTbl>:
  412924:	0040d510 00412d2d 0040d518 0040d528     ..@.--A...@.(.@.
  412934:	00412409 0040d52c 0040d548 0040da6d     .$A.,.@.H.@.m.@.
  412944:	0040d550                                P.@.

Disassembly of section .text.TC1_CH0_InterruptHandler%210:

00412948 <TC1_CH0_InterruptHandler>:
    TC1_CH0_CallbackObj.callback_fn = callback;
    TC1_CH0_CallbackObj.context = context;
}

void TC1_CH0_InterruptHandler(void)
{
  412948:	b508      	push	{r3, lr}

0041294a <.LCFI2>:
    TC1_CH0_TimerStatus = TC1_REGS->TC_CHANNEL[0].TC_SR;
  41294a:	4b05      	ldr	r3, [pc, #20]	; (412960 <.LCFI2+0x16>)
  41294c:	6a1a      	ldr	r2, [r3, #32]
  41294e:	4b05      	ldr	r3, [pc, #20]	; (412964 <.LCFI2+0x1a>)
  412950:	601a      	str	r2, [r3, #0]
    /* Call registered callback function */
    if (TC1_CH0_CallbackObj.callback_fn != NULL)
  412952:	4b05      	ldr	r3, [pc, #20]	; (412968 <.LCFI2+0x1e>)
  412954:	681b      	ldr	r3, [r3, #0]
  412956:	b113      	cbz	r3, 41295e <.LCFI2+0x14>
    {
        TC1_CH0_CallbackObj.callback_fn(TC1_CH0_CallbackObj.context);
  412958:	4a03      	ldr	r2, [pc, #12]	; (412968 <.LCFI2+0x1e>)
  41295a:	6850      	ldr	r0, [r2, #4]
  41295c:	4798      	blx	r3
  41295e:	bd08      	pop	{r3, pc}
  412960:	40010000 	.word	0x40010000
  412964:	2040dd24 	.word	0x2040dd24
  412968:	20400018 	.word	0x20400018

Disassembly of section .text._sbrk_r%211:

0041296c <_sbrk_r>:
  41296c:	b538      	push	{r3, r4, r5, lr}

0041296e <.LCFI0>:
  41296e:	4c07      	ldr	r4, [pc, #28]	; (41298c <.LVL4>)
  412970:	2300      	movs	r3, #0
  412972:	4605      	mov	r5, r0
  412974:	4608      	mov	r0, r1

00412976 <.LVL1>:
  412976:	6023      	str	r3, [r4, #0]
  412978:	f7ff ff1e 	bl	4127b8 <_sbrk>

0041297c <.LVL2>:
  41297c:	1c43      	adds	r3, r0, #1
  41297e:	d000      	beq.n	412982 <.LVL2+0x6>
  412980:	bd38      	pop	{r3, r4, r5, pc}
  412982:	6823      	ldr	r3, [r4, #0]
  412984:	2b00      	cmp	r3, #0
  412986:	d0fb      	beq.n	412980 <.LVL2+0x4>
  412988:	602b      	str	r3, [r5, #0]
  41298a:	bd38      	pop	{r3, r4, r5, pc}

0041298c <.LVL4>:
  41298c:	20400050 	.word	0x20400050

Disassembly of section .text.CRYPT_AES_KeySet%212:

00412990 <CRYPT_AES_KeySet>:
                     unsigned int keyLen, const unsigned char* iv, int dir)
{
    typedef char aes_test[sizeof(CRYPT_AES_CTX) >= sizeof(Aes) ? 1 : -1];
    (void)sizeof(aes_test);

    if (aes == NULL || key == NULL)
  412990:	b158      	cbz	r0, 4129aa <.LCFI54>
{
  412992:	b510      	push	{r4, lr}

00412994 <.LCFI50>:
  412994:	b082      	sub	sp, #8

00412996 <.LCFI51>:
    if (aes == NULL || key == NULL)
  412996:	b129      	cbz	r1, 4129a4 <.LCFI53>
        return BAD_FUNC_ARG;

    return wc_AesSetKey((Aes*)aes, key, keyLen, iv, dir);
  412998:	9c04      	ldr	r4, [sp, #16]
  41299a:	9400      	str	r4, [sp, #0]
  41299c:	f7ff fbce 	bl	41213c <.LFE144>

004129a0 <.LVL147>:
}
  4129a0:	b002      	add	sp, #8

004129a2 <.LCFI52>:
  4129a2:	bd10      	pop	{r4, pc}

004129a4 <.LCFI53>:
        return BAD_FUNC_ARG;
  4129a4:	f06f 00ac 	mvn.w	r0, #172	; 0xac

004129a8 <.LVL149>:
  4129a8:	e7fa      	b.n	4129a0 <.LVL147>

004129aa <.LCFI54>:
  4129aa:	f06f 00ac 	mvn.w	r0, #172	; 0xac

004129ae <.LVL151>:
  4129ae:	4770      	bx	lr

Disassembly of section .rodata.bytebit%213:

004129b0 <bytebit>:
  4129b0:	0080 0000 0040 0000 0020 0000 0010 0000     ....@... .......
  4129c0:	0008 0000 0004 0000 0002 0000 0001 0000     ................

Disassembly of section .rodata.reseedEntropyA%214:

004129d0 <reseedEntropyA>:
  4129d0:	2be6 8e8a f1e8 b641 0598 e366 e3bf 49c0     .+....A...f....I
  4129e0:	da03 acd4 df2c 229f 0180 670a bc39 d383     ....,.."...g9...

Disassembly of section .text.Console_UART_ReadC%215:

004129f0 <Console_UART_ReadC>:
{
  4129f0:	b500      	push	{lr}

004129f2 <.LCFI1>:
  4129f2:	b083      	sub	sp, #12

004129f4 <.LCFI2>:
    USART1_Read(&readBuffer, 1);
  4129f4:	2101      	movs	r1, #1
  4129f6:	f10d 0007 	add.w	r0, sp, #7

004129fa <.LVL13>:
  4129fa:	f7ff fd41 	bl	412480 <.LFE145>

004129fe <.LVL14>:
    while (USART1_ReadCountGet() == 0);
  4129fe:	f000 fad1 	bl	412fa4 <.LFE148>

00412a02 <.LVL15>:
  412a02:	2800      	cmp	r0, #0
  412a04:	d0fb      	beq.n	4129fe <.LVL14>
}
  412a06:	f89d 0007 	ldrb.w	r0, [sp, #7]
  412a0a:	b003      	add	sp, #12

00412a0c <.LCFI3>:
  412a0c:	f85d fb04 	ldr.w	pc, [sp], #4

Disassembly of section .text.SYS_DEBUG_Initialize%216:

00412a10 <SYS_DEBUG_Initialize>:

SYS_MODULE_OBJ SYS_DEBUG_Initialize(const SYS_MODULE_INDEX index, const SYS_MODULE_INIT * const init )
{
    SYS_DEBUG_INIT *initConfig = (SYS_DEBUG_INIT*)init;

    gblErrLvl = initConfig->errorLevel;
  412a10:	784a      	ldrb	r2, [r1, #1]
  412a12:	4b05      	ldr	r3, [pc, #20]	; (412a28 <.LVL1+0xa>)
  412a14:	701a      	strb	r2, [r3, #0]

    sysDebugInstance.debugConsole = initConfig->consoleIndex;
  412a16:	884a      	ldrh	r2, [r1, #2]
  412a18:	4b04      	ldr	r3, [pc, #16]	; (412a2c <.LVL1+0xe>)
  412a1a:	805a      	strh	r2, [r3, #2]
    sysDebugInstance.state = SYS_DEBUG_STATE_IDLE;
  412a1c:	2000      	movs	r0, #0

00412a1e <.LVL1>:
  412a1e:	7058      	strb	r0, [r3, #1]
    sysDebugInstance.status = SYS_STATUS_READY;
  412a20:	2202      	movs	r2, #2
  412a22:	701a      	strb	r2, [r3, #0]
    sysDebugInstance.prtBufPtr = 0;
  412a24:	6058      	str	r0, [r3, #4]

    return SYS_MODULE_OBJ_STATIC;
}
  412a26:	4770      	bx	lr
  412a28:	20400014 	.word	0x20400014
  412a2c:	2040000c 	.word	0x2040000c

Disassembly of section .text.vsnprintf%217:

00412a30 <vsnprintf>:
  412a30:	b510      	push	{r4, lr}

00412a32 <.LCFI8>:
  412a32:	b082      	sub	sp, #8

00412a34 <.LCFI9>:
  412a34:	4c05      	ldr	r4, [pc, #20]	; (412a4c <.LCFI10+0x4>)
  412a36:	9300      	str	r3, [sp, #0]
  412a38:	6824      	ldr	r4, [r4, #0]
  412a3a:	4613      	mov	r3, r2

00412a3c <.LVL16>:
  412a3c:	460a      	mov	r2, r1

00412a3e <.LVL17>:
  412a3e:	4601      	mov	r1, r0

00412a40 <.LVL18>:
  412a40:	4620      	mov	r0, r4

00412a42 <.LVL19>:
  412a42:	f7fe ff5f 	bl	411904 <.LFE145>

00412a46 <.LVL20>:
  412a46:	b002      	add	sp, #8

00412a48 <.LCFI10>:
  412a48:	bd10      	pop	{r4, pc}
  412a4a:	bf00      	nop
  412a4c:	2040dd28 	.word	0x2040dd28

Disassembly of section .text.CRYPT_TDES_CBC_Encrypt%218:

00412a50 <CRYPT_TDES_CBC_Encrypt>:
    if (tdes == NULL || out == NULL || in == NULL)
  412a50:	2a00      	cmp	r2, #0
  412a52:	bf18      	it	ne
  412a54:	2900      	cmpne	r1, #0
  412a56:	d007      	beq.n	412a68 <.LCFI47>
{
  412a58:	b538      	push	{r3, r4, r5, lr}

00412a5a <.LCFI46>:
    if (tdes == NULL || out == NULL || in == NULL)
  412a5a:	b110      	cbz	r0, 412a62 <.LVL136>
    return wc_Des3_CbcEncrypt((Des3*)tdes, out, in, inSz);
  412a5c:	f7fe f8c0 	bl	410be0 <.LFE25>

00412a60 <.LVL135>:
  412a60:	bd38      	pop	{r3, r4, r5, pc}

00412a62 <.LVL136>:
        return BAD_FUNC_ARG;
  412a62:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412a66 <.LVL137>:
}
  412a66:	bd38      	pop	{r3, r4, r5, pc}

00412a68 <.LCFI47>:
        return BAD_FUNC_ARG;
  412a68:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412a6c <.LVL139>:
  412a6c:	4770      	bx	lr

Disassembly of section .text.CRYPT_TDES_CBC_Decrypt%219:

00412a6e <CRYPT_TDES_CBC_Decrypt>:
    if (tdes == NULL || out == NULL || in == NULL)
  412a6e:	2a00      	cmp	r2, #0
  412a70:	bf18      	it	ne
  412a72:	2900      	cmpne	r1, #0
  412a74:	d007      	beq.n	412a86 <.LCFI49>
{
  412a76:	b538      	push	{r3, r4, r5, lr}

00412a78 <.LCFI48>:
    if (tdes == NULL || out == NULL || in == NULL)
  412a78:	b110      	cbz	r0, 412a80 <.LVL142>
    return wc_Des3_CbcDecrypt((Des3*)tdes, out, in, inSz);
  412a7a:	f7fd fe69 	bl	410750 <.LFE173>

00412a7e <.LVL141>:
  412a7e:	bd38      	pop	{r3, r4, r5, pc}

00412a80 <.LVL142>:
        return BAD_FUNC_ARG;
  412a80:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412a84 <.LVL143>:
}
  412a84:	bd38      	pop	{r3, r4, r5, pc}

00412a86 <.LCFI49>:
        return BAD_FUNC_ARG;
  412a86:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412a8a <.LVL145>:
  412a8a:	4770      	bx	lr

Disassembly of section .text.CRYPT_AES_CBC_Encrypt%220:

00412a8c <CRYPT_AES_CBC_Encrypt>:

/* AES CBC Encrypt */
int CRYPT_AES_CBC_Encrypt(CRYPT_AES_CTX* aes, unsigned char* out,
                          const unsigned char* in, unsigned int inSz)
{
    if (aes == NULL || out == NULL || in == NULL)
  412a8c:	2a00      	cmp	r2, #0
  412a8e:	bf18      	it	ne
  412a90:	2900      	cmpne	r1, #0
  412a92:	d007      	beq.n	412aa4 <.LCFI58>
{
  412a94:	b538      	push	{r3, r4, r5, lr}

00412a96 <.LCFI57>:
    if (aes == NULL || out == NULL || in == NULL)
  412a96:	b110      	cbz	r0, 412a9e <.LVL160>
        return BAD_FUNC_ARG;

    return wc_AesCbcEncrypt((Aes*)aes, out, in, inSz);
  412a98:	f7fd feb3 	bl	410802 <.LFE25>

00412a9c <.LVL159>:
  412a9c:	bd38      	pop	{r3, r4, r5, pc}

00412a9e <.LVL160>:
        return BAD_FUNC_ARG;
  412a9e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412aa2 <.LVL161>:
}
  412aa2:	bd38      	pop	{r3, r4, r5, pc}

00412aa4 <.LCFI58>:
        return BAD_FUNC_ARG;
  412aa4:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412aa8 <.LVL163>:
  412aa8:	4770      	bx	lr

Disassembly of section .text.CRYPT_AES_CBC_Decrypt%221:

00412aaa <CRYPT_AES_CBC_Decrypt>:

/* AES CBC Decrypt */
int CRYPT_AES_CBC_Decrypt(CRYPT_AES_CTX* aes, unsigned char* out,
                          const unsigned char* in, unsigned int inSz)
{
    if (aes == NULL || out == NULL || in == NULL)
  412aaa:	2a00      	cmp	r2, #0
  412aac:	bf18      	it	ne
  412aae:	2900      	cmpne	r1, #0
  412ab0:	d007      	beq.n	412ac2 <.LCFI60>
{
  412ab2:	b538      	push	{r3, r4, r5, lr}

00412ab4 <.LCFI59>:
    if (aes == NULL || out == NULL || in == NULL)
  412ab4:	b110      	cbz	r0, 412abc <.LVL166>
        return BAD_FUNC_ARG;

    return wc_AesCbcDecrypt((Aes*)aes, out, in, inSz);
  412ab6:	f7fc ff51 	bl	40f95c <L0>

00412aba <.LVL165>:
  412aba:	bd38      	pop	{r3, r4, r5, pc}

00412abc <.LVL166>:
        return BAD_FUNC_ARG;
  412abc:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412ac0 <.LVL167>:
}
  412ac0:	bd38      	pop	{r3, r4, r5, pc}

00412ac2 <.LCFI60>:
        return BAD_FUNC_ARG;
  412ac2:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412ac6 <.LVL169>:
  412ac6:	4770      	bx	lr

Disassembly of section .text.CRYPT_AES_CTR_Encrypt%222:

00412ac8 <CRYPT_AES_CTR_Encrypt>:

/* AES CTR Encrypt (used for decrypt too, with ENCRYPT key setup) */
int CRYPT_AES_CTR_Encrypt(CRYPT_AES_CTX* aes, unsigned char* out,
                          const unsigned char* in, unsigned int inSz)
{
    if (aes == NULL || out == NULL || in == NULL)
  412ac8:	2a00      	cmp	r2, #0
  412aca:	bf18      	it	ne
  412acc:	2900      	cmpne	r1, #0
  412ace:	d007      	beq.n	412ae0 <.LCFI62>
{
  412ad0:	b538      	push	{r3, r4, r5, lr}

00412ad2 <.LCFI61>:
    if (aes == NULL || out == NULL || in == NULL)
  412ad2:	b110      	cbz	r0, 412ada <.LVL172>
        return BAD_FUNC_ARG;

    return wc_AesCtrEncrypt((Aes*)aes, out, in, inSz);
  412ad4:	f7fb fa16 	bl	40df04 <.LBE265>

00412ad8 <.LVL171>:
  412ad8:	bd38      	pop	{r3, r4, r5, pc}

00412ada <.LVL172>:
        return BAD_FUNC_ARG;
  412ada:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412ade <.LVL173>:
}
  412ade:	bd38      	pop	{r3, r4, r5, pc}

00412ae0 <.LCFI62>:
        return BAD_FUNC_ARG;
  412ae0:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412ae4 <.LVL175>:
  412ae4:	4770      	bx	lr

Disassembly of section .text.pic32c_RNG_GenerateSeed%223:

00412ae6 <pic32c_RNG_GenerateSeed>:



/* used by random.c */
int pic32c_RNG_GenerateSeed(byte* output, word32 sz)
{
  412ae6:	b538      	push	{r3, r4, r5, lr}

00412ae8 <.LCFI4>:
  412ae8:	4604      	mov	r4, r0
  412aea:	460d      	mov	r5, r1
    int status;

    /* Make sure power is on, etc */
    status = pic32c_InitRng();
  412aec:	f7ff fe1e 	bl	41272c <.LFE156>

00412af0 <.LVL12>:
    if (!status)
  412af0:	4603      	mov	r3, r0
  412af2:	b108      	cbz	r0, 412af8 <.LVL14>
    {
        status = pic32c_RNG_GenerateBlock(output, sz);
    }

    return status;
}
  412af4:	4618      	mov	r0, r3

00412af6 <.LVL13>:
  412af6:	bd38      	pop	{r3, r4, r5, pc}

00412af8 <.LVL14>:
        status = pic32c_RNG_GenerateBlock(output, sz);
  412af8:	4629      	mov	r1, r5
  412afa:	4620      	mov	r0, r4

00412afc <.LVL15>:
  412afc:	f7ff fb62 	bl	4121c4 <.LBE14>

00412b00 <.LVL16>:
  412b00:	4603      	mov	r3, r0

00412b02 <.LVL17>:
    return status;
  412b02:	e7f7      	b.n	412af4 <.LVL12+0x4>

Disassembly of section .text.wc_Des_SetKey%224:

00412b04 <wc_Des_SetKey>:
    {
  412b04:	b570      	push	{r4, r5, r6, lr}

00412b06 <.LCFI17>:
  412b06:	4606      	mov	r6, r0
  412b08:	460c      	mov	r4, r1
  412b0a:	461d      	mov	r5, r3
        wc_Des_SetIV(des, iv);
  412b0c:	4611      	mov	r1, r2

00412b0e <.LVL249>:
  412b0e:	f000 f83f 	bl	412b90 <.LFE18>

00412b12 <.LVL250>:
        return DesSetKey(key, dir, des->key);
  412b12:	f106 0210 	add.w	r2, r6, #16
  412b16:	4629      	mov	r1, r5
  412b18:	4620      	mov	r0, r4
  412b1a:	f7fb faaf 	bl	40e07c <.LFE28>

00412b1e <.LVL251>:
    }
  412b1e:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section .text.SYS_CONSOLE_Tasks%225:

00412b20 <SYS_CONSOLE_Tasks>:
{
  412b20:	b508      	push	{r3, lr}

00412b22 <.LCFI6>:
    if (consoleDeviceInstance[(SYS_MODULE_INDEX)object].consoleInstanceDevDesc == NULL)
  412b22:	b283      	uxth	r3, r0
  412b24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  412b28:	4a03      	ldr	r2, [pc, #12]	; (412b38 <.LVL31+0x2>)
  412b2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  412b2e:	685b      	ldr	r3, [r3, #4]
  412b30:	b10b      	cbz	r3, 412b36 <.LVL31>
    consoleDeviceInstance[(SYS_MODULE_INDEX)object].consoleInstanceDevDesc->sysConsoleTasks(object);
  412b32:	695b      	ldr	r3, [r3, #20]
  412b34:	4798      	blx	r3

00412b36 <.LVL31>:
  412b36:	bd08      	pop	{r3, pc}
  412b38:	2040dcec 	.word	0x2040dcec

Disassembly of section .text.popQueue%226:

00412b3c <popQueue>:
    (q->tailPos < (q->elemArrSz - 1)) ? q->tailPos++ : (q->tailPos = 0);
  412b3c:	6802      	ldr	r2, [r0, #0]
  412b3e:	6903      	ldr	r3, [r0, #16]
  412b40:	3b01      	subs	r3, #1
  412b42:	429a      	cmp	r2, r3
  412b44:	d305      	bcc.n	412b52 <popQueue+0x16>
  412b46:	2300      	movs	r3, #0
  412b48:	6003      	str	r3, [r0, #0]
    q->numElem--;
  412b4a:	6883      	ldr	r3, [r0, #8]
  412b4c:	3b01      	subs	r3, #1
  412b4e:	6083      	str	r3, [r0, #8]
  412b50:	4770      	bx	lr
    (q->tailPos < (q->elemArrSz - 1)) ? q->tailPos++ : (q->tailPos = 0);
  412b52:	3201      	adds	r2, #1
  412b54:	6002      	str	r2, [r0, #0]
  412b56:	e7f8      	b.n	412b4a <popQueue+0xe>

Disassembly of section .text.__ascii_wctomb%227:

00412b58 <__ascii_wctomb>:
  412b58:	b121      	cbz	r1, 412b64 <.LVL4>
  412b5a:	2aff      	cmp	r2, #255	; 0xff
  412b5c:	d804      	bhi.n	412b68 <.LVL6>
  412b5e:	700a      	strb	r2, [r1, #0]
  412b60:	2001      	movs	r0, #1

00412b62 <.LVL3>:
  412b62:	4770      	bx	lr

00412b64 <.LVL4>:
  412b64:	4608      	mov	r0, r1

00412b66 <.LVL5>:
  412b66:	4770      	bx	lr

00412b68 <.LVL6>:
  412b68:	238a      	movs	r3, #138	; 0x8a

00412b6a <.LVL7>:
  412b6a:	6003      	str	r3, [r0, #0]
  412b6c:	f04f 30ff 	mov.w	r0, #4294967295

00412b70 <.LVL8>:
  412b70:	4770      	bx	lr

00412b72 <.LFE18>:
  412b72:	bf00      	nop

Disassembly of section .text._localeconv_r%228:

00412b74 <_localeconv_r>:
  412b74:	4a04      	ldr	r2, [pc, #16]	; (412b88 <.LBE19+0x6>)
  412b76:	4b05      	ldr	r3, [pc, #20]	; (412b8c <.LBE19+0xa>)
  412b78:	6812      	ldr	r2, [r2, #0]
  412b7a:	6b50      	ldr	r0, [r2, #52]	; 0x34

00412b7c <.LVL3>:
  412b7c:	2800      	cmp	r0, #0
  412b7e:	bf08      	it	eq
  412b80:	4618      	moveq	r0, r3

00412b82 <.LBE19>:
  412b82:	30f0      	adds	r0, #240	; 0xf0
  412b84:	4770      	bx	lr
  412b86:	bf00      	nop
  412b88:	2040dd28 	.word	0x2040dd28
  412b8c:	2040d818 	.word	0x2040d818

Disassembly of section .text.wc_Des_SetIV%229:

00412b90 <wc_Des_SetIV>:
    if (des && iv)
  412b90:	4603      	mov	r3, r0
  412b92:	b100      	cbz	r0, 412b96 <wc_Des_SetIV+0x6>
  412b94:	b921      	cbnz	r1, 412ba0 <wc_Des_SetIV+0x10>
    else if (des)
  412b96:	b113      	cbz	r3, 412b9e <wc_Des_SetIV+0xe>
        XMEMSET(des->reg,  0, DES_BLOCK_SIZE);
  412b98:	2200      	movs	r2, #0
  412b9a:	601a      	str	r2, [r3, #0]
  412b9c:	605a      	str	r2, [r3, #4]
  412b9e:	4770      	bx	lr
        XMEMCPY(des->reg, iv, DES_BLOCK_SIZE);
  412ba0:	6808      	ldr	r0, [r1, #0]

00412ba2 <.LVL247>:
  412ba2:	684a      	ldr	r2, [r1, #4]
  412ba4:	6018      	str	r0, [r3, #0]
  412ba6:	605a      	str	r2, [r3, #4]
  412ba8:	4770      	bx	lr

Disassembly of section .text.SYS_Tasks%230:

00412bac <SYS_Tasks>:
  Remarks:
    See prototype in system/common/sys_module.h.
*/

void SYS_Tasks ( void )
{
  412bac:	b508      	push	{r3, lr}

00412bae <.LCFI0>:
    /* Maintain system services */
    SYS_CONSOLE_Tasks(sysObj.sysConsole0);
  412bae:	4b04      	ldr	r3, [pc, #16]	; (412bc0 <.LVL2+0x2>)
  412bb0:	6818      	ldr	r0, [r3, #0]
  412bb2:	f7ff ffb5 	bl	412b20 <.LFE17>

00412bb6 <.LVL0>:
    SYS_CMD_Tasks();
  412bb6:	f7f8 fde9 	bl	40b78c <.LBE16>

00412bba <.LVL1>:
    /* Maintain Middleware & Other Libraries */
    

    /* Maintain the application's state machine. */
        /* Call Application task APP. */
    APP_Tasks();
  412bba:	f7f9 f8f7 	bl	40bdac <.LFE16>

00412bbe <.LVL2>:
  412bbe:	bd08      	pop	{r3, pc}
  412bc0:	20400000 	.word	0x20400000

Disassembly of section .text.CRYPT_MD5_DataAdd%231:

00412bc4 <CRYPT_MD5_DataAdd>:
    if (md5 == NULL || input == NULL)
  412bc4:	b138      	cbz	r0, 412bd6 <.LCFI3>
{
  412bc6:	b508      	push	{r3, lr}

00412bc8 <.LCFI2>:
    if (md5 == NULL || input == NULL)
  412bc8:	b111      	cbz	r1, 412bd0 <.LVL8>
    return wc_Md5Update((Md5*)md5, input, sz);
  412bca:	f7fe faa5 	bl	411118 <.LFE23>

00412bce <.LVL7>:
  412bce:	bd08      	pop	{r3, pc}

00412bd0 <.LVL8>:
        return BAD_FUNC_ARG;
  412bd0:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412bd4 <.LVL9>:
}
  412bd4:	bd08      	pop	{r3, pc}

00412bd6 <.LCFI3>:
        return BAD_FUNC_ARG;
  412bd6:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412bda <.LVL11>:
  412bda:	4770      	bx	lr

Disassembly of section .text.CRYPT_MD5_Finalize%232:

00412bdc <CRYPT_MD5_Finalize>:
    if (md5 == NULL || digest == NULL)
  412bdc:	b138      	cbz	r0, 412bee <.LCFI5>
{
  412bde:	b508      	push	{r3, lr}

00412be0 <.LCFI4>:
    if (md5 == NULL || digest == NULL)
  412be0:	b111      	cbz	r1, 412be8 <.LVL14>
    return wc_Md5Final((Md5*)md5, digest);
  412be2:	f7fd f84d 	bl	40fc80 <wc_Md5Final>

00412be6 <.LVL13>:
  412be6:	bd08      	pop	{r3, pc}

00412be8 <.LVL14>:
        return BAD_FUNC_ARG;
  412be8:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412bec <.LVL15>:
}
  412bec:	bd08      	pop	{r3, pc}

00412bee <.LCFI5>:
        return BAD_FUNC_ARG;
  412bee:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412bf2 <.LVL17>:
  412bf2:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA_DataAdd%233:

00412bf4 <CRYPT_SHA_DataAdd>:
    if (sha == NULL || input == NULL)
  412bf4:	b138      	cbz	r0, 412c06 <.LCFI9>
{
  412bf6:	b508      	push	{r3, lr}

00412bf8 <.LCFI8>:
    if (sha == NULL || input == NULL)
  412bf8:	b111      	cbz	r1, 412c00 <.LVL26>
    return wc_ShaUpdate((Sha*)sha, input, sz);
  412bfa:	f7fd fb31 	bl	410260 <.LFE27>

00412bfe <.LVL25>:
  412bfe:	bd08      	pop	{r3, pc}

00412c00 <.LVL26>:
        return BAD_FUNC_ARG;
  412c00:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412c04 <.LVL27>:
}
  412c04:	bd08      	pop	{r3, pc}

00412c06 <.LCFI9>:
        return BAD_FUNC_ARG;
  412c06:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412c0a <.LVL29>:
  412c0a:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA_Finalize%234:

00412c0c <CRYPT_SHA_Finalize>:
    if (sha == NULL || digest == NULL)
  412c0c:	b138      	cbz	r0, 412c1e <.LCFI11>
{
  412c0e:	b508      	push	{r3, lr}

00412c10 <.LCFI10>:
    if (sha == NULL || digest == NULL)
  412c10:	b111      	cbz	r1, 412c18 <.LVL32>
    return wc_ShaFinal((Sha*)sha, digest);
  412c12:	f7fb fb8f 	bl	40e334 <.LFE172>

00412c16 <.LVL31>:
  412c16:	bd08      	pop	{r3, pc}

00412c18 <.LVL32>:
        return BAD_FUNC_ARG;
  412c18:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412c1c <.LVL33>:
}
  412c1c:	bd08      	pop	{r3, pc}

00412c1e <.LCFI11>:
        return BAD_FUNC_ARG;
  412c1e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412c22 <.LVL35>:
  412c22:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA256_DataAdd%235:

00412c24 <CRYPT_SHA256_DataAdd>:
    if (sha256 == NULL || input == NULL)
  412c24:	b138      	cbz	r0, 412c36 <.LCFI15>
{
  412c26:	b508      	push	{r3, lr}

00412c28 <.LCFI14>:
    if (sha256 == NULL || input == NULL)
  412c28:	b111      	cbz	r1, 412c30 <.LVL44>
    return wc_Sha256Update((Sha256*)sha256, input, sz);
  412c2a:	f7fd fb74 	bl	410316 <.LFE18>

00412c2e <.LVL43>:
  412c2e:	bd08      	pop	{r3, pc}

00412c30 <.LVL44>:
        return BAD_FUNC_ARG;
  412c30:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412c34 <.LVL45>:
}
  412c34:	bd08      	pop	{r3, pc}

00412c36 <.LCFI15>:
        return BAD_FUNC_ARG;
  412c36:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412c3a <.LVL47>:
  412c3a:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA256_Finalize%236:

00412c3c <CRYPT_SHA256_Finalize>:
    if (sha256 == NULL || digest == NULL)
  412c3c:	b138      	cbz	r0, 412c4e <.LCFI17>
{
  412c3e:	b508      	push	{r3, lr}

00412c40 <.LCFI16>:
    if (sha256 == NULL || digest == NULL)
  412c40:	b111      	cbz	r1, 412c48 <.LVL50>
    return wc_Sha256Final((Sha256*)sha256, digest);
  412c42:	f7fb f89d 	bl	40dd80 <.LFE177>

00412c46 <.LVL49>:
  412c46:	bd08      	pop	{r3, pc}

00412c48 <.LVL50>:
        return BAD_FUNC_ARG;
  412c48:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412c4c <.LVL51>:
}
  412c4c:	bd08      	pop	{r3, pc}

00412c4e <.LCFI17>:
        return BAD_FUNC_ARG;
  412c4e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412c52 <.LVL53>:
  412c52:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA384_DataAdd%237:

00412c54 <CRYPT_SHA384_DataAdd>:
    if (sha384 == NULL || input == NULL)
  412c54:	b138      	cbz	r0, 412c66 <.LCFI21>
{
  412c56:	b508      	push	{r3, lr}

00412c58 <.LCFI20>:
    if (sha384 == NULL || input == NULL)
  412c58:	b111      	cbz	r1, 412c60 <.LVL60>
    return wc_Sha384Update((Sha384*)sha384, input, sz);
  412c5a:	f7fc fcba 	bl	40f5d2 <.LBE719>

00412c5e <.LVL59>:
  412c5e:	bd08      	pop	{r3, pc}

00412c60 <.LVL60>:
        return BAD_FUNC_ARG;
  412c60:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412c64 <.LVL61>:
}
  412c64:	bd08      	pop	{r3, pc}

00412c66 <.LCFI21>:
        return BAD_FUNC_ARG;
  412c66:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412c6a <.LVL63>:
  412c6a:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA384_Finalize%238:

00412c6c <CRYPT_SHA384_Finalize>:
    if (sha384 == NULL || digest == NULL)
  412c6c:	b138      	cbz	r0, 412c7e <.LCFI23>
{
  412c6e:	b508      	push	{r3, lr}

00412c70 <.LCFI22>:
    if (sha384 == NULL || digest == NULL)
  412c70:	b111      	cbz	r1, 412c78 <.LVL66>
    return wc_Sha384Final((Sha384*)sha384, digest);
  412c72:	f7f9 ffbd 	bl	40cbf0 <.LFE21>

00412c76 <.LVL65>:
  412c76:	bd08      	pop	{r3, pc}

00412c78 <.LVL66>:
        return BAD_FUNC_ARG;
  412c78:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412c7c <.LVL67>:
}
  412c7c:	bd08      	pop	{r3, pc}

00412c7e <.LCFI23>:
        return BAD_FUNC_ARG;
  412c7e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412c82 <.LVL69>:
  412c82:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA512_DataAdd%239:

00412c84 <CRYPT_SHA512_DataAdd>:
    if (sha512 == NULL || input == NULL)
  412c84:	b138      	cbz	r0, 412c96 <.LCFI27>
{
  412c86:	b508      	push	{r3, lr}

00412c88 <.LCFI26>:
    if (sha512 == NULL || input == NULL)
  412c88:	b111      	cbz	r1, 412c90 <.LVL76>
    return wc_Sha512Update((Sha512*)sha512, input, sz);
  412c8a:	f7fc fc2d 	bl	40f4e8 <.LFE24>

00412c8e <.LVL75>:
  412c8e:	bd08      	pop	{r3, pc}

00412c90 <.LVL76>:
        return BAD_FUNC_ARG;
  412c90:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412c94 <.LVL77>:
}
  412c94:	bd08      	pop	{r3, pc}

00412c96 <.LCFI27>:
        return BAD_FUNC_ARG;
  412c96:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412c9a <.LVL79>:
  412c9a:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA512_Finalize%240:

00412c9c <CRYPT_SHA512_Finalize>:
    if (sha512 == NULL || digest == NULL)
  412c9c:	b138      	cbz	r0, 412cae <.LCFI29>
{
  412c9e:	b508      	push	{r3, lr}

00412ca0 <.LCFI28>:
    if (sha512 == NULL || digest == NULL)
  412ca0:	b111      	cbz	r1, 412ca8 <.LVL82>
    return wc_Sha512Final((Sha512*)sha512, digest);
  412ca2:	f7f9 fe5d 	bl	40c960 <wc_Sha512Final>

00412ca6 <.LVL81>:
  412ca6:	bd08      	pop	{r3, pc}

00412ca8 <.LVL82>:
        return BAD_FUNC_ARG;
  412ca8:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412cac <.LVL83>:
}
  412cac:	bd08      	pop	{r3, pc}

00412cae <.LCFI29>:
        return BAD_FUNC_ARG;
  412cae:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412cb2 <.LVL85>:
  412cb2:	4770      	bx	lr

Disassembly of section .text.CRYPT_RNG_BlockGenerate%241:

00412cb4 <CRYPT_RNG_BlockGenerate>:
    if (rng == NULL || b == NULL)
  412cb4:	b138      	cbz	r0, 412cc6 <.LCFI41>
{
  412cb6:	b508      	push	{r3, lr}

00412cb8 <.LCFI40>:
    if (rng == NULL || b == NULL)
  412cb8:	b111      	cbz	r1, 412cc0 <.LVL118>
    return wc_RNG_GenerateBlock((WC_RNG*)rng, b, sz);
  412cba:	f7fc fb99 	bl	40f3f0 <.LFE18>

00412cbe <.LVL117>:
  412cbe:	bd08      	pop	{r3, pc}

00412cc0 <.LVL118>:
        return BAD_FUNC_ARG;
  412cc0:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412cc4 <.LVL119>:
}
  412cc4:	bd08      	pop	{r3, pc}

00412cc6 <.LCFI41>:
        return BAD_FUNC_ARG;
  412cc6:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412cca <.LVL121>:
  412cca:	4770      	bx	lr

Disassembly of section .text.CRYPT_TDES_KeySet%242:

00412ccc <CRYPT_TDES_KeySet>:
    if (tdes == NULL || key == NULL)
  412ccc:	b138      	cbz	r0, 412cde <.LCFI43>
{
  412cce:	b510      	push	{r4, lr}

00412cd0 <.LCFI42>:
    if (tdes == NULL || key == NULL)
  412cd0:	b111      	cbz	r1, 412cd8 <.LVL124>
    return wc_Des3_SetKey((Des3*)tdes, key, iv, dir);
  412cd2:	f7fe fd67 	bl	4117a4 <.LFE0>

00412cd6 <.LVL123>:
  412cd6:	bd10      	pop	{r4, pc}

00412cd8 <.LVL124>:
        return BAD_FUNC_ARG;
  412cd8:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412cdc <.LVL125>:
}
  412cdc:	bd10      	pop	{r4, pc}

00412cde <.LCFI43>:
        return BAD_FUNC_ARG;
  412cde:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412ce2 <.LVL127>:
  412ce2:	4770      	bx	lr

Disassembly of section .text.wolfSSL_Malloc%243:

00412ce4 <wolfSSL_Malloc>:
#ifdef WOLFSSL_DEBUG_MEMORY
void* wolfSSL_Malloc(size_t size, const char* func, unsigned int line)
#else
void* wolfSSL_Malloc(size_t size)
#endif
{
  412ce4:	b508      	push	{r3, lr}

00412ce6 <.LCFI0>:
    void* res = 0;

    if (malloc_function) {
  412ce6:	4b04      	ldr	r3, [pc, #16]	; (412cf8 <.LVL18+0x4>)
  412ce8:	681b      	ldr	r3, [r3, #0]
  412cea:	b10b      	cbz	r3, 412cf0 <.LVL17>
    #ifdef WOLFSSL_DEBUG_MEMORY
        res = malloc_function(size, func, line);
    #else
        res = malloc_function(size);
  412cec:	4798      	blx	r3

00412cee <.LVL16>:
  412cee:	bd08      	pop	{r3, pc}

00412cf0 <.LVL17>:
    #endif
    }
    else {
        res = malloc(size);
  412cf0:	f000 f8ea 	bl	412ec8 <.LFE151>

00412cf4 <.LVL18>:
        if (res == NULL)
            puts("wolfSSL_malloc failed");
    #endif

    return res;
}
  412cf4:	bd08      	pop	{r3, pc}
  412cf6:	bf00      	nop
  412cf8:	2040dd18 	.word	0x2040dd18

Disassembly of section .text.Console_UART_RegisterCallback%244:

00412cfc <Console_UART_RegisterCallback>:
    switch (event)
  412cfc:	b121      	cbz	r1, 412d08 <Console_UART_RegisterCallback+0xc>
  412cfe:	2901      	cmp	r1, #1
  412d00:	d104      	bne.n	412d0c <Console_UART_RegisterCallback+0x10>
            consUartData.rdCallback = consCallback;
  412d02:	4b03      	ldr	r3, [pc, #12]	; (412d10 <.LFE2+0x14>)
  412d04:	6498      	str	r0, [r3, #72]	; 0x48
            break;
  412d06:	4770      	bx	lr
            consUartData.wrCallback = consCallback;
  412d08:	4b01      	ldr	r3, [pc, #4]	; (412d10 <.LFE2+0x14>)
  412d0a:	64d8      	str	r0, [r3, #76]	; 0x4c
  412d0c:	4770      	bx	lr
  412d0e:	bf00      	nop
  412d10:	2040dba8 	.word	0x2040dba8

Disassembly of section .text.UARTDeviceReadCallback%245:

00412d14 <UARTDeviceReadCallback>:
{
  412d14:	b508      	push	{r3, lr}

00412d16 <.LCFI4>:
    if (USART1_ErrorGet() == 0)
  412d16:	f7ff fa33 	bl	412180 <.LFE20>

00412d1a <.LVL17>:
  412d1a:	b918      	cbnz	r0, 412d24 <.LVL17+0xa>
        consUartData.isReadComplete = true;
  412d1c:	2201      	movs	r2, #1
  412d1e:	4b02      	ldr	r3, [pc, #8]	; (412d28 <.LVL17+0xe>)
  412d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  412d24:	bd08      	pop	{r3, pc}
  412d26:	bf00      	nop
  412d28:	2040dba8 	.word	0x2040dba8

Disassembly of section .text.CommandReset%246:

00412d2c <CommandReset>:
{
  412d2c:	b508      	push	{r3, lr}

00412d2e <.LCFI0>:
    (*pCmdIO->pCmdApi->msg)(cmdIoParam, LINE_TERM " *** System Reboot ***\r\n" );
  412d2e:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
  412d32:	681b      	ldr	r3, [r3, #0]
  412d34:	4902      	ldr	r1, [pc, #8]	; (412d40 <.LVL6+0x4>)

00412d36 <.LVL4>:
  412d36:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90

00412d3a <.LVL5>:
  412d3a:	4798      	blx	r3

00412d3c <.LVL6>:
}
  412d3c:	2001      	movs	r0, #1
  412d3e:	bd08      	pop	{r3, pc}
  412d40:	0040d340 	.word	0x0040d340

Disassembly of section .text.SendCommandMessage%247:

00412d44 <SendCommandMessage>:
{
  412d44:	b510      	push	{r4, lr}

00412d46 <.LCFI7>:
  412d46:	460c      	mov	r4, r1

00412d48 <.LVL25>:
        SYS_CONSOLE_Write(consoleIndex, STDOUT_FILENO, message, strlen(message));
  412d48:	4608      	mov	r0, r1

00412d4a <.LVL26>:
  412d4a:	f7fc fd99 	bl	40f880 <.LFE22>

00412d4e <.LVL27>:
  412d4e:	4603      	mov	r3, r0
  412d50:	4622      	mov	r2, r4
  412d52:	2101      	movs	r1, #1
  412d54:	2000      	movs	r0, #0
  412d56:	f7ff fcb9 	bl	4126cc <SYS_CONSOLE_Write>

00412d5a <.LVL28>:
  412d5a:	bd10      	pop	{r4, pc}

Disassembly of section .rodata.sysConsoleApi%248:

00412d5c <sysConsoleApi>:
  412d5c:	2d45 0041 13ad 0041 285d 0041 2e27 0041     E-A...A.](A.'.A.
  412d6c:	c95d 0040 2835 0041                         ].@.5(A.

Disassembly of section .text.wc_InitMd5%249:

00412d74 <wc_InitMd5>:
#endif /* !HAVE_MD5_CUST_API */


int wc_InitMd5(Md5* md5)
{
    if (md5 == NULL) {
  412d74:	b130      	cbz	r0, 412d84 <.LCFI9>
{
  412d76:	b508      	push	{r3, lr}

00412d78 <.LCFI8>:
        return BAD_FUNC_ARG;
    }
    return wc_InitMd5_ex(md5, NULL, INVALID_DEVID);
  412d78:	f06f 0201 	mvn.w	r2, #1
  412d7c:	2100      	movs	r1, #0
  412d7e:	f7ff fbd7 	bl	412530 <wc_InitMd5_ex>

00412d82 <.LVL369>:
  412d82:	bd08      	pop	{r3, pc}

00412d84 <.LCFI9>:
        return BAD_FUNC_ARG;
  412d84:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412d88 <.LVL371>:
  412d88:	4770      	bx	lr

Disassembly of section .text.time_resourceLock%250:

0040c66c <time_resourceLock>:
{
  40c66c:	Address 0x0040c66c is out of bounds.


0040c66e <.LCFI1>:
    SYS_INT_SourceDisable(gSystemCounterObj.timeInterrupt);
  40c66e:	4b03      	ldr	r3, [pc, #12]	; (40c67c <.LVL11+0x4>)
  40c670:	f993 0008 	ldrsb.w	r0, [r3, #8]
  40c674:	f005 fd40 	bl	4120f8 <.LFE149>

0040c678 <.LVL11>:
  40c678:	bd08      	pop	{r3, pc}
  40c67a:	bf00      	nop
  40c67c:	2040dbf8 	.word	0x2040dbf8

Disassembly of section .rodata%251:

00412d8c <.LANCHOR0>:
  412d8c:	00000043 	.word	0x00000043
  412d90:	49534f50 	.word	0x49534f50
  412d94:	00000058 	.word	0x00000058
  412d98:	00000000 	.word	0x00000000
  412d9c:	002e      	.short	0x002e
  412d9e:	bf00      	nop

Disassembly of section .text.register_fini%252:

00412da0 <register_fini>:
  412da0:	4b02      	ldr	r3, [pc, #8]	; (412dac <.LVL0+0x2>)
  412da2:	b113      	cbz	r3, 412daa <.LVL0>

00412da4 <.LBB2>:
  412da4:	4802      	ldr	r0, [pc, #8]	; (412db0 <.LVL0+0x6>)
  412da6:	f000 b903 	b.w	412fb0 <.LFE155>

00412daa <.LVL0>:
  412daa:	4770      	bx	lr
  412dac:	00000000 	.word	0x00000000
  412db0:	004125d5 	.word	0x004125d5

Disassembly of section .rodata%253:

00412db4 <.LC0>:
  412db4:	69666e49 	.word	0x69666e49
  412db8:	7974696e 	.word	0x7974696e
  412dbc:	00000000 	.word	0x00000000

00412dc0 <.LC1>:
  412dc0:	004e614e 	.word	0x004e614e

00412dc4 <.LC2>:
  412dc4:	0030      	.short	0x0030
  412dc6:	bf00      	nop

Disassembly of section .text._Bfree%254:

00412dc8 <_Bfree>:
  412dc8:	b131      	cbz	r1, 412dd8 <.LVL11+0x6>
  412dca:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  412dcc:	684a      	ldr	r2, [r1, #4]
  412dce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]

00412dd2 <.LVL11>:
  412dd2:	6008      	str	r0, [r1, #0]
  412dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  412dd8:	4770      	bx	lr

00412dda <.LFE18>:
  412dda:	bf00      	nop

Disassembly of section .text.__i2b%255:

00412ddc <__i2b>:
  412ddc:	b510      	push	{r4, lr}

00412dde <.LCFI6>:
  412dde:	460c      	mov	r4, r1
  412de0:	2101      	movs	r1, #1

00412de2 <.LVL105>:
  412de2:	f7ff f8d3 	bl	411f8c <.LFE2>

00412de6 <.LVL106>:
  412de6:	2201      	movs	r2, #1
  412de8:	6144      	str	r4, [r0, #20]
  412dea:	6102      	str	r2, [r0, #16]
  412dec:	bd10      	pop	{r4, pc}

00412dee <.LFE23>:
  412dee:	bf00      	nop

Disassembly of section .text.SYS_INT_Disable%256:

00412df0 <SYS_INT_Disable>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  412df0:	f3ef 8010 	mrs	r0, PRIMASK

00412df4 <.LBB38>:
  __ASM volatile ("cpsid i" : : : "memory");
  412df4:	b672      	cpsid	i

00412df6 <.LBB40>:
  __ASM volatile ("dmb 0xF":::"memory");
  412df6:	f3bf 8f5f 	dmb	sy

00412dfa <.LBE40>:
}
  412dfa:	fab0 f080 	clz	r0, r0

00412dfe <.LVL1>:
  412dfe:	0940      	lsrs	r0, r0, #5
  412e00:	4770      	bx	lr

Disassembly of section .text.SYS_INT_Restore%257:

00412e02 <SYS_INT_Restore>:
    if(0 != state )
  412e02:	b918      	cbnz	r0, 412e0c <.LBB46>

00412e04 <.LBB42>:
  __ASM volatile ("cpsid i" : : : "memory");
  412e04:	b672      	cpsid	i

00412e06 <.LBB44>:
  __ASM volatile ("dmb 0xF":::"memory");
  412e06:	f3bf 8f5f 	dmb	sy
  412e0a:	4770      	bx	lr

00412e0c <.LBB46>:
  412e0c:	f3bf 8f5f 	dmb	sy

00412e10 <.LBB48>:
  __ASM volatile ("cpsie i" : : : "memory");
  412e10:	b662      	cpsie	i
  412e12:	4770      	bx	lr

Disassembly of section .text.CRYPT_MD5_Initialize%258:

00412e14 <CRYPT_MD5_Initialize>:
    if (md5 == NULL)
  412e14:	b120      	cbz	r0, 412e20 <.LCFI1>
{
  412e16:	b508      	push	{r3, lr}

00412e18 <.LCFI0>:
    wc_InitMd5((Md5*)md5);
  412e18:	f7ff ffac 	bl	412d74 <wc_InitMd5>

00412e1c <.LVL1>:
    return 0;
  412e1c:	2000      	movs	r0, #0
  412e1e:	bd08      	pop	{r3, pc}

00412e20 <.LCFI1>:
        return BAD_FUNC_ARG;
  412e20:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412e24 <.LVL3>:
  412e24:	4770      	bx	lr

Disassembly of section .text.IsCommandReady%259:

00412e26 <IsCommandReady>:
{
  412e26:	b508      	push	{r3, lr}

00412e28 <.LCFI1>:
        ready |= SYS_CONSOLE_Status((SYS_MODULE_OBJ)consoleIndex) == SYS_STATUS_READY;
  412e28:	2000      	movs	r0, #0

00412e2a <.LVL9>:
  412e2a:	f7ff fa8f 	bl	41234c <.LFE17>

00412e2e <.LVL10>:
}
  412e2e:	2802      	cmp	r0, #2
  412e30:	bf14      	ite	ne
  412e32:	2000      	movne	r0, #0

00412e34 <.LVL11>:
  412e34:	2001      	moveq	r0, #1
  412e36:	bd08      	pop	{r3, pc}

Disassembly of section .text.CRYPT_SHA_Initialize%260:

00412e38 <CRYPT_SHA_Initialize>:
    if (sha == NULL)
  412e38:	b118      	cbz	r0, 412e42 <.LCFI7>
{
  412e3a:	b508      	push	{r3, lr}

00412e3c <.LCFI6>:
    return wc_InitSha((Sha*)sha);
  412e3c:	f000 f879 	bl	412f32 <.LFE28>

00412e40 <.LVL19>:
  412e40:	bd08      	pop	{r3, pc}

00412e42 <.LCFI7>:
        return BAD_FUNC_ARG;
  412e42:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412e46 <.LVL21>:
  412e46:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA256_Initialize%261:

00412e48 <CRYPT_SHA256_Initialize>:
    if (sha256 == NULL)
  412e48:	b118      	cbz	r0, 412e52 <.LCFI13>
{
  412e4a:	b508      	push	{r3, lr}

00412e4c <.LCFI12>:
    return wc_InitSha256((Sha256*)sha256);
  412e4c:	f000 f878 	bl	412f40 <.LFE20>

00412e50 <.LVL37>:
  412e50:	bd08      	pop	{r3, pc}

00412e52 <.LCFI13>:
        return BAD_FUNC_ARG;
  412e52:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412e56 <.LVL39>:
  412e56:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA384_Initialize%262:

00412e58 <CRYPT_SHA384_Initialize>:
    if (sha384 == NULL)
  412e58:	b118      	cbz	r0, 412e62 <.LCFI19>
{
  412e5a:	b508      	push	{r3, lr}

00412e5c <.LCFI18>:
    return wc_InitSha384((Sha384*)sha384);
  412e5c:	f000 f862 	bl	412f24 <.LFE22>

00412e60 <.LVL55>:
  412e60:	bd08      	pop	{r3, pc}

00412e62 <.LCFI19>:
        return BAD_FUNC_ARG;
  412e62:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412e66 <.LVL57>:
  412e66:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA512_Initialize%263:

00412e68 <CRYPT_SHA512_Initialize>:
    if (sha512 == NULL)
  412e68:	b118      	cbz	r0, 412e72 <.LCFI25>
{
  412e6a:	b508      	push	{r3, lr}

00412e6c <.LCFI24>:
    return wc_InitSha512((Sha512*)sha512);
  412e6c:	f000 f853 	bl	412f16 <.LFE162>

00412e70 <.LVL71>:
  412e70:	bd08      	pop	{r3, pc}

00412e72 <.LCFI25>:
        return BAD_FUNC_ARG;
  412e72:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412e76 <.LVL73>:
  412e76:	4770      	bx	lr

Disassembly of section .text.CRYPT_RNG_Initialize%264:

00412e78 <CRYPT_RNG_Initialize>:
    if (rng == NULL)
  412e78:	b118      	cbz	r0, 412e82 <.LCFI37>
{
  412e7a:	b508      	push	{r3, lr}

00412e7c <.LCFI36>:
    return wc_InitRng((WC_RNG*)rng);
  412e7c:	f000 f867 	bl	412f4e <.LFE22>

00412e80 <.LVL107>:
  412e80:	bd08      	pop	{r3, pc}

00412e82 <.LCFI37>:
        return BAD_FUNC_ARG;
  412e82:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00412e86 <.LVL109>:
  412e86:	4770      	bx	lr

Disassembly of section .rodata.totrot%265:

00412e88 <totrot>:
  412e88:	0201 0604 0a08 0e0c 110f 1513 1917 1c1b     ................

Disassembly of section .text.UARTDeviceWriteCallback%266:

00412e98 <UARTDeviceWriteCallback>:
    consUartData.isWriteComplete = true;
  412e98:	2201      	movs	r2, #1
  412e9a:	4b02      	ldr	r3, [pc, #8]	; (412ea4 <UARTDeviceWriteCallback+0xc>)
  412e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  412ea0:	4770      	bx	lr
  412ea2:	bf00      	nop
  412ea4:	2040dba8 	.word	0x2040dba8

Disassembly of section .text.USART1_WriteCallbackRegister%267:

00412ea8 <USART1_WriteCallbackRegister>:


bool USART1_WriteCallbackRegister( USART_CALLBACK callback, uintptr_t context )
{
    usart1Obj.txCallback = callback;
  412ea8:	4b02      	ldr	r3, [pc, #8]	; (412eb4 <.LVL63+0x4>)
  412eaa:	60d8      	str	r0, [r3, #12]
    usart1Obj.txContext = context;
  412eac:	6119      	str	r1, [r3, #16]

    return true;
}
  412eae:	2001      	movs	r0, #1

00412eb0 <.LVL63>:
  412eb0:	4770      	bx	lr
  412eb2:	bf00      	nop
  412eb4:	20400020 	.word	0x20400020

Disassembly of section .text.USART1_ReadCallbackRegister%268:

00412eb8 <USART1_ReadCallbackRegister>:

bool USART1_ReadCallbackRegister( USART_CALLBACK callback, uintptr_t context )
{
    usart1Obj.rxCallback = callback;
  412eb8:	4b02      	ldr	r3, [pc, #8]	; (412ec4 <.LVL65+0x4>)
  412eba:	6258      	str	r0, [r3, #36]	; 0x24
    usart1Obj.rxContext = context;
  412ebc:	6299      	str	r1, [r3, #40]	; 0x28

    return true;
}
  412ebe:	2001      	movs	r0, #1

00412ec0 <.LVL65>:
  412ec0:	4770      	bx	lr
  412ec2:	bf00      	nop
  412ec4:	20400020 	.word	0x20400020

Disassembly of section .text.malloc%269:

00412ec8 <malloc>:
  412ec8:	4b02      	ldr	r3, [pc, #8]	; (412ed4 <.LVL2+0x2>)
  412eca:	4601      	mov	r1, r0
  412ecc:	6818      	ldr	r0, [r3, #0]

00412ece <.LVL1>:
  412ece:	f7f7 ba6f 	b.w	40a3b0 <.LFE14>

00412ed2 <.LVL2>:
  412ed2:	bf00      	nop
  412ed4:	2040dd28 	.word	0x2040dd28

Disassembly of section .text.free%270:

00412ed8 <free>:
  412ed8:	4b02      	ldr	r3, [pc, #8]	; (412ee4 <.LVL5+0x2>)
  412eda:	4601      	mov	r1, r0
  412edc:	6818      	ldr	r0, [r3, #0]

00412ede <.LVL4>:
  412ede:	f7fa bb3b 	b.w	40d558 <_free_r>

00412ee2 <.LVL5>:
  412ee2:	bf00      	nop
  412ee4:	2040dd28 	.word	0x2040dd28

Disassembly of section .rodata.blanks.8352%271:

00412ee8 <blanks.8352>:
  412ee8:	20202020 20202020 20202020 20202020                     

Disassembly of section .rodata.zeroes.8353%272:

00412ef8 <zeroes.8353>:
  412ef8:	30303030 30303030 30303030 30303030     0000000000000000

Disassembly of section .text.main%273:

00412f08 <main>:
// Section: Main Entry Point
// *****************************************************************************
// *****************************************************************************

int main ( void )
{
  412f08:	b508      	push	{r3, lr}

00412f0a <.LCFI0>:
    /* Initialize all modules */
    SYS_Initialize ( NULL );
  412f0a:	2000      	movs	r0, #0
  412f0c:	f7fe fe10 	bl	411b30 <SYS_Initialize>

00412f10 <.LVL0>:

    while ( true )
    {
        /* Maintain state machines of all polled MPLAB Harmony modules. */
        SYS_Tasks ( );
  412f10:	f7ff fe4c 	bl	412bac <SYS_Tasks>

00412f14 <.LVL1>:
  412f14:	e7fc      	b.n	412f10 <.LVL0>

Disassembly of section .text.wc_InitSha512%274:

00412f16 <wc_InitSha512>:
{
  412f16:	b508      	push	{r3, lr}

00412f18 <.LCFI12>:
    return wc_InitSha512_ex(sha512, NULL, INVALID_DEVID);
  412f18:	f06f 0201 	mvn.w	r2, #1
  412f1c:	2100      	movs	r1, #0
  412f1e:	f7fd f8e7 	bl	4100f0 <.LFE174>

00412f22 <.LVL80>:
}
  412f22:	bd08      	pop	{r3, pc}

Disassembly of section .text.wc_InitSha384%275:

00412f24 <wc_InitSha384>:
#endif

int wc_InitSha384(Sha384* sha384)
{
  412f24:	b508      	push	{r3, lr}

00412f26 <.LCFI21>:
    return wc_InitSha384_ex(sha384, NULL, INVALID_DEVID);
  412f26:	f06f 0201 	mvn.w	r2, #1
  412f2a:	2100      	movs	r1, #0
  412f2c:	f7fd f93c 	bl	4101a8 <.LFE15>

00412f30 <.LVL145>:
}
  412f30:	bd08      	pop	{r3, pc}

Disassembly of section .text.wc_InitSha%276:

00412f32 <wc_InitSha>:

#endif /* USE_SHA_SOFTWARE_IMPL */


int wc_InitSha(Sha* sha)
{
  412f32:	b508      	push	{r3, lr}

00412f34 <.LCFI8>:
    return wc_InitSha_ex(sha, NULL, INVALID_DEVID);
  412f34:	f06f 0201 	mvn.w	r2, #1
  412f38:	2100      	movs	r1, #0
  412f3a:	f7ff f9e7 	bl	41230c <.LFE22>

00412f3e <.LVL398>:
}
  412f3e:	bd08      	pop	{r3, pc}

Disassembly of section .text.wc_InitSha256%277:

00412f40 <wc_InitSha256>:

#endif /* WOLFSSL_SHA224 */


int wc_InitSha256(Sha256* sha256)
{
  412f40:	b508      	push	{r3, lr}

00412f42 <.LCFI9>:
    return wc_InitSha256_ex(sha256, NULL, INVALID_DEVID);
  412f42:	f06f 0201 	mvn.w	r2, #1
  412f46:	2100      	movs	r1, #0
  412f48:	f7fe fe26 	bl	411b98 <.LFE162>

00412f4c <.LVL97>:
}
  412f4c:	bd08      	pop	{r3, pc}

Disassembly of section .text.wc_InitRng%278:

00412f4e <wc_InitRng>:
{
  412f4e:	b508      	push	{r3, lr}

00412f50 <.LCFI28>:
    return wc_InitRng_ex(rng, NULL, INVALID_DEVID);
  412f50:	f06f 0201 	mvn.w	r2, #1
  412f54:	2100      	movs	r1, #0
  412f56:	f7fc fc25 	bl	40f7a4 <.LFE176>

00412f5a <.LVL253>:
}
  412f5a:	bd08      	pop	{r3, pc}

Disassembly of section .text.APP_Initialize%279:

00412f5c <APP_Initialize>:
    appData.state = APP_STATE_INIT;
  412f5c:	2200      	movs	r2, #0
  412f5e:	4b01      	ldr	r3, [pc, #4]	; (412f64 <.LFE23+0x8>)
  412f60:	701a      	strb	r2, [r3, #0]
  412f62:	4770      	bx	lr
  412f64:	2040db08 	.word	0x2040db08

Disassembly of section .text.TC1_CH0_TimerStart%280:

00412f68 <TC1_CH0_TimerStart>:
    TC1_REGS->TC_CHANNEL[0].TC_CCR = (TC_CCR_CLKEN_Msk | TC_CCR_SWTRG_Msk);
  412f68:	2205      	movs	r2, #5
  412f6a:	4b01      	ldr	r3, [pc, #4]	; (412f70 <.LFE182+0x8>)
  412f6c:	601a      	str	r2, [r3, #0]
  412f6e:	4770      	bx	lr
  412f70:	40010000 	.word	0x40010000

Disassembly of section .text.TC1_CH0_TimerStop%281:

00412f74 <TC1_CH0_TimerStop>:
    TC1_REGS->TC_CHANNEL[0].TC_CCR = (TC_CCR_CLKDIS_Msk);
  412f74:	2202      	movs	r2, #2
  412f76:	4b01      	ldr	r3, [pc, #4]	; (412f7c <.LFE142+0x8>)
  412f78:	601a      	str	r2, [r3, #0]
  412f7a:	4770      	bx	lr
  412f7c:	40010000 	.word	0x40010000

Disassembly of section .text.TC1_CH0_TimerPeriodSet%282:

00412f80 <TC1_CH0_TimerPeriodSet>:
    TC1_REGS->TC_CHANNEL[0].TC_RC = period;
  412f80:	4b01      	ldr	r3, [pc, #4]	; (412f88 <.LFE143+0x8>)
  412f82:	61d8      	str	r0, [r3, #28]
  412f84:	4770      	bx	lr
  412f86:	bf00      	nop
  412f88:	40010000 	.word	0x40010000

Disassembly of section .text.TC1_CH0_TimerCounterGet%283:

00412f8c <TC1_CH0_TimerCounterGet>:
    return TC1_REGS->TC_CHANNEL[0].TC_CV;
  412f8c:	4b01      	ldr	r3, [pc, #4]	; (412f94 <.LFE144+0x8>)
  412f8e:	6918      	ldr	r0, [r3, #16]
}
  412f90:	b280      	uxth	r0, r0
  412f92:	4770      	bx	lr
  412f94:	40010000 	.word	0x40010000

Disassembly of section .text.TC1_CH0_TimerCallbackRegister%284:

00412f98 <TC1_CH0_TimerCallbackRegister>:
    TC1_CH0_CallbackObj.callback_fn = callback;
  412f98:	4b01      	ldr	r3, [pc, #4]	; (412fa0 <.LFE146+0x8>)
  412f9a:	6018      	str	r0, [r3, #0]
    TC1_CH0_CallbackObj.context = context;
  412f9c:	6059      	str	r1, [r3, #4]
  412f9e:	4770      	bx	lr
  412fa0:	20400018 	.word	0x20400018

Disassembly of section .text.USART1_ReadCountGet%285:

00412fa4 <USART1_ReadCountGet>:
}

size_t USART1_ReadCountGet( void )
{
    return usart1Obj.rxProcessedSize;
}
  412fa4:	4b01      	ldr	r3, [pc, #4]	; (412fac <.LFE148+0x8>)
  412fa6:	6a18      	ldr	r0, [r3, #32]
  412fa8:	4770      	bx	lr
  412faa:	bf00      	nop
  412fac:	20400020 	.word	0x20400020

Disassembly of section .text.atexit%286:

00412fb0 <atexit>:
  412fb0:	2300      	movs	r3, #0
  412fb2:	4601      	mov	r1, r0
  412fb4:	461a      	mov	r2, r3
  412fb6:	4618      	mov	r0, r3

00412fb8 <.LVL1>:
  412fb8:	f7fd bccc 	b.w	410954 <__register_exitproc>

Disassembly of section .rodata.p05.7179%287:

00412fbc <p05.7179>:
  412fbc:	0005 0000 0019 0000 007d 0000               ........}...

Disassembly of section .text.GetCommandCharacter%288:

0040c95c <GetCommandCharacter>:
}
  40c95c:	2000      	movs	r0, #0

0040c95e <.LVL1>:
  40c95e:	4770      	bx	lr

Disassembly of section .rodata._seqDownArrow%289:

00411724 <_seqDownArrow>:
  411724:	425b bf00                                   [B..

Disassembly of section .rodata._seqLeftArrow%290:

004128d4 <_seqLeftArrow>:
  4128d4:	445b bf00                                   [D..

Disassembly of section .rodata._seqRightArrow%291:

00410a98 <_seqRightArrow>:
  410a98:	435b bf00                                   [C..

Disassembly of section .rodata._seqUpArrow%292:

00410a9c <_seqUpArrow>:
  410a9c:	415b bf00                                   [A..

Disassembly of section .text%293:

00412fc8 <__aeabi_idiv0>:
  412fc8:	4770      	bx	lr

00412fca <L0>:
  412fca:	bf00      	nop

Disassembly of section .rodata._global_impure_ptr%294:

00412fcc <_global_impure_ptr>:
  412fcc:	c858 2040                                   X.@ 

Disassembly of section .text.__malloc_lock%295:

00412fd0 <__malloc_lock>:
  412fd0:	4770      	bx	lr
  412fd2:	bf00      	nop

Disassembly of section .text.__malloc_unlock%296:

00412fd4 <__malloc_unlock>:
  412fd4:	4770      	bx	lr

00412fd6 <.LFE1>:
  412fd6:	bf00      	nop

Disassembly of section .text.Dummy_Handler%297:

0040d33e <Dummy_Handler>:

extern uint32_t _stack;

/* Brief default interrupt handler for unused IRQs.*/
void __attribute__((optimize("-O1"),section(".text.Dummy_Handler"),long_call))Dummy_Handler(void)
{
  40d33e:	e7fe      	b.n	40d33e <Dummy_Handler>

Disassembly of section .text.NonMaskableInt_Handler%298:

0040fa26 <NonMaskableInt_Handler>:
// *****************************************************************************

/* Brief default interrupt handlers for core IRQs.*/

void NonMaskableInt_Handler(void)
{
  40fa26:	e7fe      	b.n	40fa26 <NonMaskableInt_Handler>

Disassembly of section .text.HardFault_Handler%299:

00410c7e <HardFault_Handler>:
    {
    }
}

void HardFault_Handler(void)
{
  410c7e:	e7fe      	b.n	410c7e <HardFault_Handler>

Disassembly of section .text.DebugMonitor_Handler%300:

00410db6 <DebugMonitor_Handler>:
    {
    }
}

void DebugMonitor_Handler(void)
{
  410db6:	e7fe      	b.n	410db6 <DebugMonitor_Handler>

Disassembly of section .text.MemoryManagement_Handler%301:

00411002 <MemoryManagement_Handler>:
    }
}

#if (defined __CM7_REV) || (defined __CM4_REV)
void MemoryManagement_Handler(void)
{
  411002:	e7fe      	b.n	411002 <MemoryManagement_Handler>

Disassembly of section .text.BusFault_Handler%302:

0041162a <BusFault_Handler>:
    {
    }
}

void BusFault_Handler(void)
{
  41162a:	e7fe      	b.n	41162a <BusFault_Handler>

Disassembly of section .text.UsageFault_Handler%303:

0041181a <UsageFault_Handler>:
    {
    }
}

void UsageFault_Handler(void)
{
  41181a:	e7fe      	b.n	41181a <UsageFault_Handler>

Disassembly of section .text.wc_Sha256Free%304:

00411b2e <wc_Sha256Free>:

void wc_Sha256Free(Sha256* sha256)
{
  411b2e:	4770      	bx	lr
