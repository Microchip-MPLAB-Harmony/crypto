
dist\sam_e70_xplained_ultra_sw\production\sam_e70_xplained_ultra_sw.X.production.elf:     file format elf32-littlearm


Disassembly of section .vectors:

00400000 <exception_table>:
  400000:	f0 ff 45 20 f5 b3 41 00 6b 49 41 00 df 85 41 00     ..E ..A.kIA...A.
  400010:	03 a7 41 00 43 ae 41 00 f3 b3 41 00 00 00 00 00     ..A.C.A...A.....
	...
  40002c:	d7 41 41 00 7f 93 41 00 00 00 00 00 d7 41 41 00     .AA...A......AA.
  40003c:	d7 41 41 00 d7 41 41 00 d7 41 41 00 d7 41 41 00     .AA..AA..AA..AA.
  40004c:	d7 41 41 00 d7 41 41 00 d7 41 41 00 d7 41 41 00     .AA..AA..AA..AA.
  40005c:	d7 41 41 00 d7 41 41 00 00 00 00 00 d7 41 41 00     .AA..AA......AA.
  40006c:	d7 41 41 00 d7 41 41 00 d7 41 41 00 91 b0 41 00     .AA..AA..AA...A.
  40007c:	d7 41 41 00 d7 41 41 00 d7 41 41 00 d7 41 41 00     .AA..AA..AA..AA.
  40008c:	d7 41 41 00 d7 41 41 00 d7 41 41 00 d7 41 41 00     .AA..AA..AA..AA.
  40009c:	fd 1c 42 00 d7 41 41 00 d7 41 41 00 d7 41 41 00     ..B..AA..AA..AA.
  4000ac:	d7 41 41 00 d7 41 41 00 d7 41 41 00 d7 41 41 00     .AA..AA..AA..AA.
  4000bc:	d7 41 41 00 d7 41 41 00 d7 41 41 00 d7 41 41 00     .AA..AA..AA..AA.
  4000cc:	d7 41 41 00 d7 41 41 00 d7 41 41 00 d7 41 41 00     .AA..AA..AA..AA.
  4000dc:	d7 41 41 00 d7 41 41 00 d7 41 41 00 d7 41 41 00     .AA..AA..AA..AA.
  4000ec:	d7 41 41 00 d7 41 41 00 d7 41 41 00 d7 41 41 00     .AA..AA..AA..AA.
  4000fc:	d7 41 41 00 d7 41 41 00 d7 41 41 00 d7 41 41 00     .AA..AA..AA..AA.
  40010c:	d7 41 41 00 d7 41 41 00 00 00 00 00 00 00 00 00     .AA..AA.........
  40011c:	00 00 00 00 d7 41 41 00 d7 41 41 00 d7 41 41 00     .....AA..AA..AA.
  40012c:	d7 41 41 00 d7 41 41 00 d7 41 41 00 d7 41 41 00     .AA..AA..AA..AA.
  40013c:	d7 41 41 00 d7 41 41 00 d7 41 41 00 d7 41 41 00     .AA..AA..AA..AA.
  40014c:	d7 41 41 00 d7 41 41 00 d7 41 41 00 d7 41 41 00     .AA..AA..AA..AA.
  40015c:	d7 41 41 00 d7 41 41 00 d7 41 41 00                 .AA..AA..AA.

Disassembly of section .text:

00400168 <_init>:
  400168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40016a:	bf00      	nop
  40016c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40016e:	bc08      	pop	{r3}
  400170:	469e      	mov	lr, r3
  400172:	4770      	bx	lr

00400174 <__init_array_start>:
  400174:	00422195 	.word	0x00422195

00400178 <__frame_dummy_init_array_entry>:
  400178:	0041fd11                                ..A.

0040017c <_fini>:
  40017c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40017e:	bf00      	nop
  400180:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400182:	bc08      	pop	{r3}
  400184:	469e      	mov	lr, r3
  400186:	4770      	bx	lr

00400188 <__fini_array_start>:
  400188:	0041fced 	.word	0x0041fced

Disassembly of section .ARM.exidx:

0040018c <.ARM.exidx>:
  40018c:	00016fc8 	.word	0x00016fc8
  400190:	00000001 	.word	0x00000001

Disassembly of section .text._Transform%34:

00400194 <_Transform>:

#define R(i) h(i)+=S1(e(i))+Ch(e(i),f(i),g(i))+K[i+j]+(j?blk2(i):blk0(i));\
    d(i)+=h(i);h(i)+=S0(a(i))+Maj(a(i),b(i),c(i))

static int _Transform(Sha512* sha512)
{
  400194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00400198 <.LCFI0>:
  400198:	f2ad 7d94 	subw	sp, sp, #1940	; 0x794

0040019c <.LCFI1>:
  40019c:	f8cd 06cc 	str.w	r0, [sp, #1740]	; 0x6cc
#else
    word64 W[16];
#endif

    /* Copy digest to working vars */
    XMEMCPY(T, sha512->digest, sizeof(T));
  4001a0:	f100 0418 	add.w	r4, r0, #24
  4001a4:	f50d 66ea 	add.w	r6, sp, #1872	; 0x750
  4001a8:	f100 0758 	add.w	r7, r0, #88	; 0x58

004001ac <.LVL2>:
  4001ac:	4635      	mov	r5, r6
  4001ae:	6820      	ldr	r0, [r4, #0]
  4001b0:	6861      	ldr	r1, [r4, #4]
  4001b2:	68a2      	ldr	r2, [r4, #8]
  4001b4:	68e3      	ldr	r3, [r4, #12]
  4001b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  4001b8:	3410      	adds	r4, #16
  4001ba:	462e      	mov	r6, r5
  4001bc:	42bc      	cmp	r4, r7
  4001be:	d1f5      	bne.n	4001ac <.LVL2>

004001c0 <.LVL3>:
  4001c0:	f50d 63da 	add.w	r3, sp, #1744	; 0x6d0
  4001c4:	e9d3 3400 	ldrd	r3, r4, [r3]
  4001c8:	e9cd 341c 	strd	r3, r4, [sp, #112]	; 0x70
  4001cc:	f50d 63ed 	add.w	r3, sp, #1896	; 0x768
  4001d0:	e9d3 ab00 	ldrd	sl, fp, [r3]
  4001d4:	f50d 63ea 	add.w	r3, sp, #1872	; 0x750
  4001d8:	e9d3 3400 	ldrd	r3, r4, [r3]
  4001dc:	4625      	mov	r5, r4
  4001de:	461c      	mov	r4, r3
  4001e0:	f50d 63eb 	add.w	r3, sp, #1880	; 0x758
  4001e4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4001e8:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  4001ec:	f50d 63ec 	add.w	r3, sp, #1888	; 0x760
  4001f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4001f4:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8
  4001f8:	f50d 63f1 	add.w	r3, sp, #1928	; 0x788
  4001fc:	e9d3 2300 	ldrd	r2, r3, [r3]
  400200:	e9cd 2306 	strd	r2, r3, [sp, #24]
  400204:	f50d 63dc 	add.w	r3, sp, #1760	; 0x6e0
  400208:	e9d3 2300 	ldrd	r2, r3, [r3]
  40020c:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  400210:	f50d 63dd 	add.w	r3, sp, #1768	; 0x6e8
  400214:	e9d3 2300 	ldrd	r2, r3, [r3]
  400218:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  40021c:	f50d 63db 	add.w	r3, sp, #1752	; 0x6d8
  400220:	e9d3 2300 	ldrd	r2, r3, [r3]
  400224:	e9cd 2308 	strd	r2, r3, [sp, #32]
  400228:	f50d 63de 	add.w	r3, sp, #1776	; 0x6f0
  40022c:	e9d3 2300 	ldrd	r2, r3, [r3]
  400230:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
  400234:	f50d 63df 	add.w	r3, sp, #1784	; 0x6f8
  400238:	e9d3 2300 	ldrd	r2, r3, [r3]
  40023c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  400240:	f50d 63e0 	add.w	r3, sp, #1792	; 0x700
  400244:	e9d3 2300 	ldrd	r2, r3, [r3]
  400248:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  40024c:	f50d 63e1 	add.w	r3, sp, #1800	; 0x708
  400250:	e9d3 2300 	ldrd	r2, r3, [r3]
  400254:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  400258:	f50d 63e3 	add.w	r3, sp, #1816	; 0x718
  40025c:	e9d3 2300 	ldrd	r2, r3, [r3]
  400260:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  400264:	f50d 63f0 	add.w	r3, sp, #1920	; 0x780
  400268:	e9d3 2300 	ldrd	r2, r3, [r3]
  40026c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  400270:	f50d 63e2 	add.w	r3, sp, #1808	; 0x710
  400274:	e9d3 2300 	ldrd	r2, r3, [r3]
  400278:	e9cd 2300 	strd	r2, r3, [sp]
  40027c:	f50d 63e4 	add.w	r3, sp, #1824	; 0x720
  400280:	e9d3 2300 	ldrd	r2, r3, [r3]
  400284:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
  400288:	f50d 63ef 	add.w	r3, sp, #1912	; 0x778
  40028c:	e9d3 8900 	ldrd	r8, r9, [r3]
  400290:	f50d 63e5 	add.w	r3, sp, #1832	; 0x728
  400294:	e9d3 2300 	ldrd	r2, r3, [r3]
  400298:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  40029c:	f50d 63ee 	add.w	r3, sp, #1904	; 0x770
  4002a0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4002a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4002a8:	f50d 63e6 	add.w	r3, sp, #1840	; 0x730
  4002ac:	e9d3 2300 	ldrd	r2, r3, [r3]
  4002b0:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  4002b4:	f50d 63e7 	add.w	r3, sp, #1848	; 0x738
  4002b8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4002bc:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
  4002c0:	f50d 63e8 	add.w	r3, sp, #1856	; 0x740
  4002c4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4002c8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  4002cc:	f50d 63e9 	add.w	r3, sp, #1864	; 0x748
  4002d0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4002d4:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
  4002d8:	4b5a      	ldr	r3, [pc, #360]	; (400444 <.LBE365+0x4e>)
            R(m);
        }
    }
#else
    /* 80 operations, partially loop unrolled */
    for (j = 0; j < 80; j += 16) {
  4002da:	f04f 0c00 	mov.w	ip, #0
  4002de:	469e      	mov	lr, r3
  4002e0:	4667      	mov	r7, ip

004002e2 <.LVL4>:
  4002e2:	f8dd c6cc 	ldr.w	ip, [sp, #1740]	; 0x6cc

004002e6 <.LBB353>:
}


STATIC INLINE word64 rotrFixed64(word64 x, word64 y)
{
    return (x >> y) | (x << (sizeof(y) * 8 - y));
  4002e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4002ea:	0b83      	lsrs	r3, r0, #14
  4002ec:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  4002f0:	9370      	str	r3, [sp, #448]	; 0x1c0
  4002f2:	0b8b      	lsrs	r3, r1, #14
  4002f4:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
  4002f8:	9371      	str	r3, [sp, #452]	; 0x1c4

004002fa <.LBB355>:
  4002fa:	0c83      	lsrs	r3, r0, #18
  4002fc:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
  400300:	9372      	str	r3, [sp, #456]	; 0x1c8
  400302:	0c8b      	lsrs	r3, r1, #18
  400304:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
  400308:	9373      	str	r3, [sp, #460]	; 0x1cc

0040030a <.LBE355>:
        R( 0); R( 1); R( 2); R( 3);
  40030a:	ab70      	add	r3, sp, #448	; 0x1c0
  40030c:	e9d3 2300 	ldrd	r2, r3, [r3]
  400310:	a972      	add	r1, sp, #456	; 0x1c8
  400312:	e9d1 0100 	ldrd	r0, r1, [r1]
  400316:	4042      	eors	r2, r0
  400318:	404b      	eors	r3, r1
  40031a:	4610      	mov	r0, r2
  40031c:	4619      	mov	r1, r3

0040031e <.LBB357>:
  40031e:	9b03      	ldr	r3, [sp, #12]
  400320:	05db      	lsls	r3, r3, #23
  400322:	9a02      	ldr	r2, [sp, #8]
  400324:	ea43 2352 	orr.w	r3, r3, r2, lsr #9
  400328:	9375      	str	r3, [sp, #468]	; 0x1d4
  40032a:	05d3      	lsls	r3, r2, #23
  40032c:	9a03      	ldr	r2, [sp, #12]
  40032e:	ea43 2352 	orr.w	r3, r3, r2, lsr #9
  400332:	9374      	str	r3, [sp, #464]	; 0x1d0

00400334 <.LBE357>:
  400334:	ab74      	add	r3, sp, #464	; 0x1d0
  400336:	e9d3 2300 	ldrd	r2, r3, [r3]
  40033a:	4042      	eors	r2, r0
  40033c:	404b      	eors	r3, r1
  40033e:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  400342:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  400346:	ea82 0208 	eor.w	r2, r2, r8
  40034a:	ea83 0309 	eor.w	r3, r3, r9
  40034e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  400352:	4010      	ands	r0, r2
  400354:	4019      	ands	r1, r3
  400356:	4602      	mov	r2, r0
  400358:	460b      	mov	r3, r1
  40035a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40035e:	4050      	eors	r0, r2
  400360:	4059      	eors	r1, r3
  400362:	4602      	mov	r2, r0
  400364:	460b      	mov	r3, r1
  400366:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  40036a:	1880      	adds	r0, r0, r2
  40036c:	4159      	adcs	r1, r3
  40036e:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  400372:	4676      	mov	r6, lr
  400374:	e9de 2300 	ldrd	r2, r3, [lr]
  400378:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
  40037c:	2f00      	cmp	r7, #0
  40037e:	f002 8255 	beq.w	40282c <.LCFI3>

00400382 <.LBB359>:
  400382:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  400386:	0cc3      	lsrs	r3, r0, #19
  400388:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
  40038c:	9376      	str	r3, [sp, #472]	; 0x1d8
  40038e:	0ccb      	lsrs	r3, r1, #19
  400390:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
  400394:	9377      	str	r3, [sp, #476]	; 0x1dc

00400396 <.LBB361>:
  400396:	00cb      	lsls	r3, r1, #3
  400398:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
  40039c:	9379      	str	r3, [sp, #484]	; 0x1e4
  40039e:	00c3      	lsls	r3, r0, #3
  4003a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
  4003a4:	9378      	str	r3, [sp, #480]	; 0x1e0

004003a6 <.LBE361>:
  4003a6:	ab76      	add	r3, sp, #472	; 0x1d8
  4003a8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4003ac:	a978      	add	r1, sp, #480	; 0x1e0
  4003ae:	e9d1 0100 	ldrd	r0, r1, [r1]
  4003b2:	4042      	eors	r2, r0
  4003b4:	404b      	eors	r3, r1
  4003b6:	990c      	ldr	r1, [sp, #48]	; 0x30
  4003b8:	0989      	lsrs	r1, r1, #6
  4003ba:	980d      	ldr	r0, [sp, #52]	; 0x34
  4003bc:	ea41 6180 	orr.w	r1, r1, r0, lsl #26
  4003c0:	9130      	str	r1, [sp, #192]	; 0xc0
  4003c2:	0981      	lsrs	r1, r0, #6
  4003c4:	9131      	str	r1, [sp, #196]	; 0xc4
  4003c6:	e9dd 0130 	ldrd	r0, r1, [sp, #192]	; 0xc0
  4003ca:	4050      	eors	r0, r2
  4003cc:	4059      	eors	r1, r3
  4003ce:	e9cd 012e 	strd	r0, r1, [sp, #184]	; 0xb8

004003d2 <.LBB363>:
  4003d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  4003d6:	0851      	lsrs	r1, r2, #1
  4003d8:	ea41 71c3 	orr.w	r1, r1, r3, lsl #31
  4003dc:	917a      	str	r1, [sp, #488]	; 0x1e8
  4003de:	0859      	lsrs	r1, r3, #1
  4003e0:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
  4003e4:	917b      	str	r1, [sp, #492]	; 0x1ec

004003e6 <.LBB365>:
  4003e6:	0a11      	lsrs	r1, r2, #8
  4003e8:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
  4003ec:	917c      	str	r1, [sp, #496]	; 0x1f0
  4003ee:	0a19      	lsrs	r1, r3, #8
  4003f0:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
  4003f4:	917d      	str	r1, [sp, #500]	; 0x1f4

004003f6 <.LBE365>:
  4003f6:	ab7a      	add	r3, sp, #488	; 0x1e8
  4003f8:	e9d3 0100 	ldrd	r0, r1, [r3]
  4003fc:	ab7c      	add	r3, sp, #496	; 0x1f0
  4003fe:	e9d3 2300 	ldrd	r2, r3, [r3]
  400402:	4050      	eors	r0, r2
  400404:	4059      	eors	r1, r3
  400406:	9b08      	ldr	r3, [sp, #32]
  400408:	09db      	lsrs	r3, r3, #7
  40040a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40040c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
  400410:	9332      	str	r3, [sp, #200]	; 0xc8
  400412:	09d3      	lsrs	r3, r2, #7
  400414:	9333      	str	r3, [sp, #204]	; 0xcc
  400416:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
  40041a:	4042      	eors	r2, r0
  40041c:	404b      	eors	r3, r1
  40041e:	4610      	mov	r0, r2
  400420:	4619      	mov	r1, r3
  400422:	e9dd 232e 	ldrd	r2, r3, [sp, #184]	; 0xb8
  400426:	1812      	adds	r2, r2, r0
  400428:	414b      	adcs	r3, r1
  40042a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40042e:	1880      	adds	r0, r0, r2
  400430:	4159      	adcs	r1, r3
  400432:	4602      	mov	r2, r0
  400434:	460b      	mov	r3, r1
  400436:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
  40043a:	1880      	adds	r0, r0, r2
  40043c:	4159      	adcs	r1, r3
  40043e:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
  400442:	e001      	b.n	400448 <.LBE365+0x52>
  400444:	00417eb8 	.word	0x00417eb8
  400448:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  40044c:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
  400450:	1812      	adds	r2, r2, r0
  400452:	414b      	adcs	r3, r1
  400454:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
  400458:	1880      	adds	r0, r0, r2
  40045a:	4159      	adcs	r1, r3
  40045c:	4602      	mov	r2, r0
  40045e:	460b      	mov	r3, r1
  400460:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  400464:	1880      	adds	r0, r0, r2
  400466:	4159      	adcs	r1, r3
  400468:	4602      	mov	r2, r0
  40046a:	460b      	mov	r3, r1
  40046c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  400470:	eb10 020a 	adds.w	r2, r0, sl
  400474:	eb41 030b 	adc.w	r3, r1, fp
  400478:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0

0040047c <.LBB367>:
  40047c:	0f23      	lsrs	r3, r4, #28
  40047e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  400482:	937e      	str	r3, [sp, #504]	; 0x1f8
  400484:	0f2b      	lsrs	r3, r5, #28
  400486:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  40048a:	937f      	str	r3, [sp, #508]	; 0x1fc

0040048c <.LBB369>:
  40048c:	07ab      	lsls	r3, r5, #30
  40048e:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  400492:	9381      	str	r3, [sp, #516]	; 0x204
  400494:	07a3      	lsls	r3, r4, #30
  400496:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  40049a:	9380      	str	r3, [sp, #512]	; 0x200

0040049c <.LBE369>:
  40049c:	ab7e      	add	r3, sp, #504	; 0x1f8
  40049e:	e9d3 1200 	ldrd	r1, r2, [r3]
  4004a2:	ab80      	add	r3, sp, #512	; 0x200
  4004a4:	e9d3 ab00 	ldrd	sl, fp, [r3]
  4004a8:	ea81 010a 	eor.w	r1, r1, sl
  4004ac:	ea82 020b 	eor.w	r2, r2, fp
  4004b0:	4613      	mov	r3, r2
  4004b2:	460a      	mov	r2, r1

004004b4 <.LBB371>:
  4004b4:	0669      	lsls	r1, r5, #25
  4004b6:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  4004ba:	9183      	str	r1, [sp, #524]	; 0x20c
  4004bc:	0661      	lsls	r1, r4, #25
  4004be:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  4004c2:	9182      	str	r1, [sp, #520]	; 0x208

004004c4 <.LBE371>:
  4004c4:	a982      	add	r1, sp, #520	; 0x208
  4004c6:	e9d1 0100 	ldrd	r0, r1, [r1]
  4004ca:	4050      	eors	r0, r2
  4004cc:	4059      	eors	r1, r3
  4004ce:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  4004d2:	e9dd ab18 	ldrd	sl, fp, [sp, #96]	; 0x60
  4004d6:	4650      	mov	r0, sl
  4004d8:	4659      	mov	r1, fp
  4004da:	4320      	orrs	r0, r4
  4004dc:	4329      	orrs	r1, r5
  4004de:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  4004e2:	4002      	ands	r2, r0
  4004e4:	400b      	ands	r3, r1
  4004e6:	4650      	mov	r0, sl
  4004e8:	4659      	mov	r1, fp
  4004ea:	4020      	ands	r0, r4
  4004ec:	4029      	ands	r1, r5
  4004ee:	4310      	orrs	r0, r2
  4004f0:	4319      	orrs	r1, r3
  4004f2:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  4004f6:	1812      	adds	r2, r2, r0
  4004f8:	414b      	adcs	r3, r1
  4004fa:	4610      	mov	r0, r2
  4004fc:	4619      	mov	r1, r3
  4004fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  400502:	1812      	adds	r2, r2, r0
  400504:	414b      	adcs	r3, r1
  400506:	e9cd 2306 	strd	r2, r3, [sp, #24]

0040050a <.LBB373>:
  40050a:	e9dd ab2c 	ldrd	sl, fp, [sp, #176]	; 0xb0
  40050e:	4653      	mov	r3, sl
  400510:	0b9b      	lsrs	r3, r3, #14
  400512:	465a      	mov	r2, fp
  400514:	ea43 438b 	orr.w	r3, r3, fp, lsl #18
  400518:	9384      	str	r3, [sp, #528]	; 0x210
  40051a:	0b93      	lsrs	r3, r2, #14
  40051c:	4652      	mov	r2, sl
  40051e:	ea43 438a 	orr.w	r3, r3, sl, lsl #18
  400522:	9385      	str	r3, [sp, #532]	; 0x214

00400524 <.LBB375>:
  400524:	0c93      	lsrs	r3, r2, #18
  400526:	465a      	mov	r2, fp
  400528:	ea43 338b 	orr.w	r3, r3, fp, lsl #14
  40052c:	9386      	str	r3, [sp, #536]	; 0x218
  40052e:	0c93      	lsrs	r3, r2, #18
  400530:	ea43 338a 	orr.w	r3, r3, sl, lsl #14
  400534:	9387      	str	r3, [sp, #540]	; 0x21c

00400536 <.LBE375>:
  400536:	ab84      	add	r3, sp, #528	; 0x210
  400538:	e9d3 2300 	ldrd	r2, r3, [r3]
  40053c:	a986      	add	r1, sp, #536	; 0x218
  40053e:	e9d1 0100 	ldrd	r0, r1, [r1]
  400542:	4042      	eors	r2, r0
  400544:	404b      	eors	r3, r1

00400546 <.LBB377>:
  400546:	4659      	mov	r1, fp
  400548:	05c9      	lsls	r1, r1, #23
  40054a:	4650      	mov	r0, sl
  40054c:	ea41 215a 	orr.w	r1, r1, sl, lsr #9
  400550:	9189      	str	r1, [sp, #548]	; 0x224
  400552:	05c1      	lsls	r1, r0, #23
  400554:	ea41 215b 	orr.w	r1, r1, fp, lsr #9
  400558:	9188      	str	r1, [sp, #544]	; 0x220

0040055a <.LBE377>:
  40055a:	a988      	add	r1, sp, #544	; 0x220
  40055c:	e9d1 0100 	ldrd	r0, r1, [r1]
  400560:	4050      	eors	r0, r2
  400562:	4059      	eors	r1, r3
  400564:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  400568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40056c:	ea80 0008 	eor.w	r0, r0, r8
  400570:	ea81 0109 	eor.w	r1, r1, r9
  400574:	4652      	mov	r2, sl
  400576:	465b      	mov	r3, fp
  400578:	4002      	ands	r2, r0
  40057a:	400b      	ands	r3, r1
  40057c:	ea82 0a08 	eor.w	sl, r2, r8
  400580:	ea83 0b09 	eor.w	fp, r3, r9
  400584:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
  400588:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40058c:	1880      	adds	r0, r0, r2
  40058e:	4159      	adcs	r1, r3
  400590:	eb1a 0000 	adds.w	r0, sl, r0
  400594:	eb4b 0101 	adc.w	r1, fp, r1
  400598:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40059c:	2f00      	cmp	r7, #0
  40059e:	f002 814b 	beq.w	402838 <.LCFI3+0xc>

004005a2 <.LBB379>:
  4005a2:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
  4005a6:	0cc3      	lsrs	r3, r0, #19
  4005a8:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
  4005ac:	938a      	str	r3, [sp, #552]	; 0x228
  4005ae:	0ccb      	lsrs	r3, r1, #19
  4005b0:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
  4005b4:	938b      	str	r3, [sp, #556]	; 0x22c

004005b6 <.LBB381>:
  4005b6:	00cb      	lsls	r3, r1, #3
  4005b8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
  4005bc:	938d      	str	r3, [sp, #564]	; 0x234
  4005be:	00c3      	lsls	r3, r0, #3
  4005c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
  4005c4:	938c      	str	r3, [sp, #560]	; 0x230

004005c6 <.LBE381>:
  4005c6:	ab8a      	add	r3, sp, #552	; 0x228
  4005c8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4005cc:	f50d 7a0c 	add.w	sl, sp, #560	; 0x230
  4005d0:	e9da ab00 	ldrd	sl, fp, [sl]
  4005d4:	ea82 020a 	eor.w	r2, r2, sl
  4005d8:	ea83 030b 	eor.w	r3, r3, fp
  4005dc:	468b      	mov	fp, r1
  4005de:	0981      	lsrs	r1, r0, #6
  4005e0:	4658      	mov	r0, fp
  4005e2:	ea41 618b 	orr.w	r1, r1, fp, lsl #26
  4005e6:	9134      	str	r1, [sp, #208]	; 0xd0
  4005e8:	0981      	lsrs	r1, r0, #6
  4005ea:	9135      	str	r1, [sp, #212]	; 0xd4
  4005ec:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
  4005f0:	4050      	eors	r0, r2
  4005f2:	4059      	eors	r1, r3
  4005f4:	4602      	mov	r2, r0
  4005f6:	460b      	mov	r3, r1
  4005f8:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
  4005fc:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
  400600:	eb10 000a 	adds.w	r0, r0, sl
  400604:	eb41 010b 	adc.w	r1, r1, fp
  400608:	eb12 0a00 	adds.w	sl, r2, r0
  40060c:	eb43 0b01 	adc.w	fp, r3, r1
  400610:	e9cd ab08 	strd	sl, fp, [sp, #32]

00400614 <.LBB383>:
  400614:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
  400618:	0851      	lsrs	r1, r2, #1
  40061a:	ea41 71c3 	orr.w	r1, r1, r3, lsl #31
  40061e:	918e      	str	r1, [sp, #568]	; 0x238
  400620:	0859      	lsrs	r1, r3, #1
  400622:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
  400626:	918f      	str	r1, [sp, #572]	; 0x23c

00400628 <.LBB385>:
  400628:	0a11      	lsrs	r1, r2, #8
  40062a:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
  40062e:	9190      	str	r1, [sp, #576]	; 0x240
  400630:	0a19      	lsrs	r1, r3, #8
  400632:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
  400636:	9191      	str	r1, [sp, #580]	; 0x244

00400638 <.LBE385>:
  400638:	a98e      	add	r1, sp, #568	; 0x238
  40063a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40063e:	f50d 7a10 	add.w	sl, sp, #576	; 0x240
  400642:	e9da ab00 	ldrd	sl, fp, [sl]
  400646:	ea80 000a 	eor.w	r0, r0, sl
  40064a:	ea81 010b 	eor.w	r1, r1, fp
  40064e:	469b      	mov	fp, r3
  400650:	09d3      	lsrs	r3, r2, #7
  400652:	465a      	mov	r2, fp
  400654:	ea43 634b 	orr.w	r3, r3, fp, lsl #25
  400658:	9336      	str	r3, [sp, #216]	; 0xd8
  40065a:	09d3      	lsrs	r3, r2, #7
  40065c:	9337      	str	r3, [sp, #220]	; 0xdc
  40065e:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
  400662:	4042      	eors	r2, r0
  400664:	404b      	eors	r3, r1
  400666:	4610      	mov	r0, r2
  400668:	4619      	mov	r1, r3
  40066a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  40066e:	1812      	adds	r2, r2, r0
  400670:	414b      	adcs	r3, r1
  400672:	e9cd 2308 	strd	r2, r3, [sp, #32]
  400676:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  40067a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40067e:	1812      	adds	r2, r2, r0
  400680:	414b      	adcs	r3, r1
  400682:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  400686:	1880      	adds	r0, r0, r2
  400688:	4159      	adcs	r1, r3
  40068a:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  40068e:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  400692:	1812      	adds	r2, r2, r0
  400694:	414b      	adcs	r3, r1
  400696:	e9cd 2304 	strd	r2, r3, [sp, #16]

0040069a <.LBB387>:
  40069a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40069e:	0f03      	lsrs	r3, r0, #28
  4006a0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  4006a4:	9392      	str	r3, [sp, #584]	; 0x248
  4006a6:	0f0b      	lsrs	r3, r1, #28
  4006a8:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  4006ac:	9393      	str	r3, [sp, #588]	; 0x24c

004006ae <.LBB389>:
  4006ae:	078b      	lsls	r3, r1, #30
  4006b0:	ea43 0390 	orr.w	r3, r3, r0, lsr #2
  4006b4:	9395      	str	r3, [sp, #596]	; 0x254
  4006b6:	0783      	lsls	r3, r0, #30
  4006b8:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  4006bc:	9394      	str	r3, [sp, #592]	; 0x250

004006be <.LBE389>:
  4006be:	ab92      	add	r3, sp, #584	; 0x248
  4006c0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4006c4:	f50d 7a14 	add.w	sl, sp, #592	; 0x250
  4006c8:	e9da ab00 	ldrd	sl, fp, [sl]
  4006cc:	ea82 020a 	eor.w	r2, r2, sl
  4006d0:	ea83 030b 	eor.w	r3, r3, fp

004006d4 <.LBB391>:
  4006d4:	4682      	mov	sl, r0
  4006d6:	0649      	lsls	r1, r1, #25
  4006d8:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
  4006dc:	9197      	str	r1, [sp, #604]	; 0x25c
  4006de:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
  4006e2:	4651      	mov	r1, sl
  4006e4:	0649      	lsls	r1, r1, #25
  4006e6:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
  4006ea:	9196      	str	r1, [sp, #600]	; 0x258

004006ec <.LBE391>:
  4006ec:	a996      	add	r1, sp, #600	; 0x258
  4006ee:	e9d1 0100 	ldrd	r0, r1, [r1]
  4006f2:	4050      	eors	r0, r2
  4006f4:	4059      	eors	r1, r3
  4006f6:	e9cd 012a 	strd	r0, r1, [sp, #168]	; 0xa8
  4006fa:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
  4006fe:	4650      	mov	r0, sl
  400700:	4659      	mov	r1, fp
  400702:	4320      	orrs	r0, r4
  400704:	4329      	orrs	r1, r5
  400706:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  40070a:	4002      	ands	r2, r0
  40070c:	400b      	ands	r3, r1
  40070e:	4610      	mov	r0, r2
  400710:	4619      	mov	r1, r3
  400712:	4652      	mov	r2, sl
  400714:	465b      	mov	r3, fp
  400716:	4022      	ands	r2, r4
  400718:	402b      	ands	r3, r5
  40071a:	4302      	orrs	r2, r0
  40071c:	430b      	orrs	r3, r1
  40071e:	4610      	mov	r0, r2
  400720:	4619      	mov	r1, r3
  400722:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  400726:	1812      	adds	r2, r2, r0
  400728:	414b      	adcs	r3, r1
  40072a:	4610      	mov	r0, r2
  40072c:	4619      	mov	r1, r3
  40072e:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  400732:	1812      	adds	r2, r2, r0
  400734:	414b      	adcs	r3, r1
  400736:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8

0040073a <.LBB393>:
  40073a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40073e:	0b83      	lsrs	r3, r0, #14
  400740:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  400744:	9398      	str	r3, [sp, #608]	; 0x260
  400746:	0b8b      	lsrs	r3, r1, #14
  400748:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
  40074c:	9399      	str	r3, [sp, #612]	; 0x264

0040074e <.LBB395>:
  40074e:	0c83      	lsrs	r3, r0, #18
  400750:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
  400754:	939a      	str	r3, [sp, #616]	; 0x268
  400756:	0c8b      	lsrs	r3, r1, #18
  400758:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
  40075c:	939b      	str	r3, [sp, #620]	; 0x26c

0040075e <.LBE395>:
  40075e:	ab98      	add	r3, sp, #608	; 0x260
  400760:	e9d3 2300 	ldrd	r2, r3, [r3]
  400764:	f50d 7a1a 	add.w	sl, sp, #616	; 0x268
  400768:	e9da ab00 	ldrd	sl, fp, [sl]
  40076c:	ea82 020a 	eor.w	r2, r2, sl
  400770:	ea83 030b 	eor.w	r3, r3, fp

00400774 <.LBB397>:
  400774:	4682      	mov	sl, r0
  400776:	468b      	mov	fp, r1
  400778:	05c9      	lsls	r1, r1, #23
  40077a:	4650      	mov	r0, sl
  40077c:	ea41 215a 	orr.w	r1, r1, sl, lsr #9
  400780:	919d      	str	r1, [sp, #628]	; 0x274
  400782:	05c1      	lsls	r1, r0, #23
  400784:	ea41 215b 	orr.w	r1, r1, fp, lsr #9
  400788:	919c      	str	r1, [sp, #624]	; 0x270

0040078a <.LBE397>:
  40078a:	a99c      	add	r1, sp, #624	; 0x270
  40078c:	e9d1 0100 	ldrd	r0, r1, [r1]
  400790:	4050      	eors	r0, r2
  400792:	4059      	eors	r1, r3
  400794:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  400798:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  40079c:	4650      	mov	r0, sl
  40079e:	4659      	mov	r1, fp
  4007a0:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
  4007a4:	4042      	eors	r2, r0
  4007a6:	404b      	eors	r3, r1
  4007a8:	4610      	mov	r0, r2
  4007aa:	4619      	mov	r1, r3
  4007ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4007b0:	4002      	ands	r2, r0
  4007b2:	400b      	ands	r3, r1
  4007b4:	4610      	mov	r0, r2
  4007b6:	4619      	mov	r1, r3
  4007b8:	4652      	mov	r2, sl
  4007ba:	465b      	mov	r3, fp
  4007bc:	4042      	eors	r2, r0
  4007be:	404b      	eors	r3, r1
  4007c0:	4610      	mov	r0, r2
  4007c2:	4619      	mov	r1, r3
  4007c4:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
  4007c8:	eb18 0802 	adds.w	r8, r8, r2
  4007cc:	eb49 0903 	adc.w	r9, r9, r3
  4007d0:	eb18 0800 	adds.w	r8, r8, r0
  4007d4:	eb49 0901 	adc.w	r9, r9, r1
  4007d8:	2f00      	cmp	r7, #0
  4007da:	f002 8033 	beq.w	402844 <.LCFI3+0x18>

004007de <.LBB399>:
  4007de:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  4007e2:	0843      	lsrs	r3, r0, #1
  4007e4:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
  4007e8:	939e      	str	r3, [sp, #632]	; 0x278
  4007ea:	084b      	lsrs	r3, r1, #1
  4007ec:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
  4007f0:	939f      	str	r3, [sp, #636]	; 0x27c

004007f2 <.LBB401>:
  4007f2:	0a03      	lsrs	r3, r0, #8
  4007f4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  4007f8:	93a0      	str	r3, [sp, #640]	; 0x280
  4007fa:	0a0b      	lsrs	r3, r1, #8
  4007fc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  400800:	93a1      	str	r3, [sp, #644]	; 0x284

00400802 <.LBE401>:
  400802:	ab9e      	add	r3, sp, #632	; 0x278
  400804:	e9d3 2300 	ldrd	r2, r3, [r3]
  400808:	f50d 7a20 	add.w	sl, sp, #640	; 0x280
  40080c:	e9da ab00 	ldrd	sl, fp, [sl]
  400810:	ea82 020a 	eor.w	r2, r2, sl
  400814:	ea83 030b 	eor.w	r3, r3, fp
  400818:	468b      	mov	fp, r1
  40081a:	09c1      	lsrs	r1, r0, #7
  40081c:	4658      	mov	r0, fp
  40081e:	ea41 614b 	orr.w	r1, r1, fp, lsl #25
  400822:	9138      	str	r1, [sp, #224]	; 0xe0
  400824:	09c1      	lsrs	r1, r0, #7
  400826:	9139      	str	r1, [sp, #228]	; 0xe4
  400828:	e9dd 0138 	ldrd	r0, r1, [sp, #224]	; 0xe0
  40082c:	4050      	eors	r0, r2
  40082e:	4059      	eors	r1, r3
  400830:	4602      	mov	r2, r0
  400832:	460b      	mov	r3, r1
  400834:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
  400838:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
  40083c:	eb10 000a 	adds.w	r0, r0, sl
  400840:	eb41 010b 	adc.w	r1, r1, fp
  400844:	eb12 0a00 	adds.w	sl, r2, r0
  400848:	eb43 0b01 	adc.w	fp, r3, r1
  40084c:	e9cd ab1e 	strd	sl, fp, [sp, #120]	; 0x78

00400850 <.LBB403>:
  400850:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
  400854:	0cd1      	lsrs	r1, r2, #19
  400856:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
  40085a:	91a2      	str	r1, [sp, #648]	; 0x288
  40085c:	0cd9      	lsrs	r1, r3, #19
  40085e:	ea41 3142 	orr.w	r1, r1, r2, lsl #13
  400862:	91a3      	str	r1, [sp, #652]	; 0x28c

00400864 <.LBB405>:
  400864:	00d9      	lsls	r1, r3, #3
  400866:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
  40086a:	91a5      	str	r1, [sp, #660]	; 0x294
  40086c:	00d1      	lsls	r1, r2, #3
  40086e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
  400872:	91a4      	str	r1, [sp, #656]	; 0x290

00400874 <.LBE405>:
  400874:	a9a2      	add	r1, sp, #648	; 0x288
  400876:	e9d1 0100 	ldrd	r0, r1, [r1]
  40087a:	f50d 7a24 	add.w	sl, sp, #656	; 0x290
  40087e:	e9da ab00 	ldrd	sl, fp, [sl]
  400882:	ea80 000a 	eor.w	r0, r0, sl
  400886:	ea81 010b 	eor.w	r1, r1, fp
  40088a:	469b      	mov	fp, r3
  40088c:	0993      	lsrs	r3, r2, #6
  40088e:	465a      	mov	r2, fp
  400890:	ea43 638b 	orr.w	r3, r3, fp, lsl #26
  400894:	933a      	str	r3, [sp, #232]	; 0xe8
  400896:	0993      	lsrs	r3, r2, #6
  400898:	933b      	str	r3, [sp, #236]	; 0xec
  40089a:	e9dd 233a 	ldrd	r2, r3, [sp, #232]	; 0xe8
  40089e:	4042      	eors	r2, r0
  4008a0:	404b      	eors	r3, r1
  4008a2:	4610      	mov	r0, r2
  4008a4:	4619      	mov	r1, r3
  4008a6:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
  4008aa:	1812      	adds	r2, r2, r0
  4008ac:	414b      	adcs	r3, r1
  4008ae:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  4008b2:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  4008b6:	eb12 0208 	adds.w	r2, r2, r8
  4008ba:	eb43 0309 	adc.w	r3, r3, r9
  4008be:	4690      	mov	r8, r2
  4008c0:	4699      	mov	r9, r3
  4008c2:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
  4008c6:	eb12 0208 	adds.w	r2, r2, r8
  4008ca:	eb43 0309 	adc.w	r3, r3, r9
  4008ce:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
  4008d2:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  4008d6:	eb18 0802 	adds.w	r8, r8, r2
  4008da:	eb49 0903 	adc.w	r9, r9, r3
  4008de:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60

004008e2 <.LBB407>:
  4008e2:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
  4008e6:	0f03      	lsrs	r3, r0, #28
  4008e8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  4008ec:	93a6      	str	r3, [sp, #664]	; 0x298
  4008ee:	0f0b      	lsrs	r3, r1, #28
  4008f0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  4008f4:	93a7      	str	r3, [sp, #668]	; 0x29c

004008f6 <.LBB409>:
  4008f6:	078b      	lsls	r3, r1, #30
  4008f8:	ea43 0390 	orr.w	r3, r3, r0, lsr #2
  4008fc:	93a9      	str	r3, [sp, #676]	; 0x2a4
  4008fe:	0783      	lsls	r3, r0, #30
  400900:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  400904:	93a8      	str	r3, [sp, #672]	; 0x2a0

00400906 <.LBE409>:
  400906:	aba6      	add	r3, sp, #664	; 0x298
  400908:	e9d3 2300 	ldrd	r2, r3, [r3]
  40090c:	f50d 7828 	add.w	r8, sp, #672	; 0x2a0
  400910:	e9d8 ab00 	ldrd	sl, fp, [r8]
  400914:	ea82 020a 	eor.w	r2, r2, sl
  400918:	ea83 030b 	eor.w	r3, r3, fp

0040091c <.LBB411>:
  40091c:	4680      	mov	r8, r0
  40091e:	4689      	mov	r9, r1
  400920:	0649      	lsls	r1, r1, #25
  400922:	4640      	mov	r0, r8
  400924:	ea41 11d8 	orr.w	r1, r1, r8, lsr #7
  400928:	91ab      	str	r1, [sp, #684]	; 0x2ac
  40092a:	0641      	lsls	r1, r0, #25
  40092c:	ea41 11d9 	orr.w	r1, r1, r9, lsr #7
  400930:	91aa      	str	r1, [sp, #680]	; 0x2a8

00400932 <.LBE411>:
  400932:	a9aa      	add	r1, sp, #680	; 0x2a8
  400934:	e9d1 0100 	ldrd	r0, r1, [r1]
  400938:	4050      	eors	r0, r2
  40093a:	4059      	eors	r1, r3
  40093c:	e9cd 012e 	strd	r0, r1, [sp, #184]	; 0xb8
  400940:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
  400944:	4652      	mov	r2, sl
  400946:	465b      	mov	r3, fp
  400948:	4640      	mov	r0, r8
  40094a:	4649      	mov	r1, r9
  40094c:	4302      	orrs	r2, r0
  40094e:	430b      	orrs	r3, r1
  400950:	4022      	ands	r2, r4
  400952:	402b      	ands	r3, r5
  400954:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
  400958:	e9c1 2300 	strd	r2, r3, [r1]
  40095c:	4650      	mov	r0, sl
  40095e:	4659      	mov	r1, fp
  400960:	4642      	mov	r2, r8
  400962:	464b      	mov	r3, r9
  400964:	4010      	ands	r0, r2
  400966:	4019      	ands	r1, r3
  400968:	f50d 63d8 	add.w	r3, sp, #1728	; 0x6c0
  40096c:	e9d3 9a00 	ldrd	r9, sl, [r3]
  400970:	ea49 0900 	orr.w	r9, r9, r0
  400974:	ea4a 0a01 	orr.w	sl, sl, r1
  400978:	e9dd 232e 	ldrd	r2, r3, [sp, #184]	; 0xb8
  40097c:	eb12 0209 	adds.w	r2, r2, r9
  400980:	eb43 030a 	adc.w	r3, r3, sl
  400984:	4610      	mov	r0, r2
  400986:	4619      	mov	r1, r3
  400988:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  40098c:	1812      	adds	r2, r2, r0
  40098e:	414b      	adcs	r3, r1
  400990:	e9cd 232e 	strd	r2, r3, [sp, #184]	; 0xb8

00400994 <.LBB413>:
  400994:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
  400998:	4643      	mov	r3, r8
  40099a:	0b9b      	lsrs	r3, r3, #14
  40099c:	464a      	mov	r2, r9
  40099e:	ea43 4389 	orr.w	r3, r3, r9, lsl #18
  4009a2:	93ac      	str	r3, [sp, #688]	; 0x2b0
  4009a4:	0b93      	lsrs	r3, r2, #14
  4009a6:	4642      	mov	r2, r8
  4009a8:	ea43 4388 	orr.w	r3, r3, r8, lsl #18
  4009ac:	93ad      	str	r3, [sp, #692]	; 0x2b4

004009ae <.LBB415>:
  4009ae:	0c93      	lsrs	r3, r2, #18
  4009b0:	464a      	mov	r2, r9
  4009b2:	ea43 3389 	orr.w	r3, r3, r9, lsl #14
  4009b6:	93ae      	str	r3, [sp, #696]	; 0x2b8
  4009b8:	0c93      	lsrs	r3, r2, #18
  4009ba:	ea43 3388 	orr.w	r3, r3, r8, lsl #14
  4009be:	93af      	str	r3, [sp, #700]	; 0x2bc

004009c0 <.LBE415>:
  4009c0:	abac      	add	r3, sp, #688	; 0x2b0
  4009c2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4009c6:	a9ae      	add	r1, sp, #696	; 0x2b8
  4009c8:	e9d1 0100 	ldrd	r0, r1, [r1]
  4009cc:	4042      	eors	r2, r0
  4009ce:	404b      	eors	r3, r1

004009d0 <.LBB417>:
  4009d0:	4649      	mov	r1, r9
  4009d2:	05c9      	lsls	r1, r1, #23
  4009d4:	4640      	mov	r0, r8
  4009d6:	ea41 2158 	orr.w	r1, r1, r8, lsr #9
  4009da:	91b1      	str	r1, [sp, #708]	; 0x2c4
  4009dc:	05c1      	lsls	r1, r0, #23
  4009de:	ea41 2159 	orr.w	r1, r1, r9, lsr #9
  4009e2:	91b0      	str	r1, [sp, #704]	; 0x2c0

004009e4 <.LBE417>:
  4009e4:	a9b0      	add	r1, sp, #704	; 0x2c0
  4009e6:	e9d1 0100 	ldrd	r0, r1, [r1]
  4009ea:	4050      	eors	r0, r2
  4009ec:	4059      	eors	r1, r3
  4009ee:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  4009f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4009f6:	e9dd ab2c 	ldrd	sl, fp, [sp, #176]	; 0xb0
  4009fa:	4652      	mov	r2, sl
  4009fc:	465b      	mov	r3, fp
  4009fe:	4042      	eors	r2, r0
  400a00:	404b      	eors	r3, r1
  400a02:	4610      	mov	r0, r2
  400a04:	4619      	mov	r1, r3
  400a06:	4642      	mov	r2, r8
  400a08:	464b      	mov	r3, r9
  400a0a:	4002      	ands	r2, r0
  400a0c:	400b      	ands	r3, r1
  400a0e:	ea8a 0802 	eor.w	r8, sl, r2
  400a12:	ea8b 0903 	eor.w	r9, fp, r3
  400a16:	e9d6 2306 	ldrd	r2, r3, [r6, #24]
  400a1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  400a1e:	1880      	adds	r0, r0, r2
  400a20:	4159      	adcs	r1, r3
  400a22:	eb18 0000 	adds.w	r0, r8, r0
  400a26:	eb49 0101 	adc.w	r1, r9, r1
  400a2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400a2e:	2f00      	cmp	r7, #0
  400a30:	f001 870e 	beq.w	402850 <.LCFI3+0x24>

00400a34 <.LBB419>:
  400a34:	e9dd 8922 	ldrd	r8, r9, [sp, #136]	; 0x88
  400a38:	4643      	mov	r3, r8
  400a3a:	085b      	lsrs	r3, r3, #1
  400a3c:	464a      	mov	r2, r9
  400a3e:	ea43 73c9 	orr.w	r3, r3, r9, lsl #31
  400a42:	93b2      	str	r3, [sp, #712]	; 0x2c8
  400a44:	0853      	lsrs	r3, r2, #1
  400a46:	4642      	mov	r2, r8
  400a48:	ea43 73c8 	orr.w	r3, r3, r8, lsl #31
  400a4c:	93b3      	str	r3, [sp, #716]	; 0x2cc

00400a4e <.LBB421>:
  400a4e:	0a13      	lsrs	r3, r2, #8
  400a50:	464a      	mov	r2, r9
  400a52:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
  400a56:	93b4      	str	r3, [sp, #720]	; 0x2d0
  400a58:	0a13      	lsrs	r3, r2, #8
  400a5a:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
  400a5e:	93b5      	str	r3, [sp, #724]	; 0x2d4

00400a60 <.LBE421>:
  400a60:	abb2      	add	r3, sp, #712	; 0x2c8
  400a62:	e9d3 2300 	ldrd	r2, r3, [r3]
  400a66:	a9b4      	add	r1, sp, #720	; 0x2d0
  400a68:	e9d1 ab00 	ldrd	sl, fp, [r1]
  400a6c:	ea82 020a 	eor.w	r2, r2, sl
  400a70:	ea83 030b 	eor.w	r3, r3, fp
  400a74:	4641      	mov	r1, r8
  400a76:	09c9      	lsrs	r1, r1, #7
  400a78:	4648      	mov	r0, r9
  400a7a:	ea41 6149 	orr.w	r1, r1, r9, lsl #25
  400a7e:	913c      	str	r1, [sp, #240]	; 0xf0
  400a80:	09c1      	lsrs	r1, r0, #7
  400a82:	913d      	str	r1, [sp, #244]	; 0xf4
  400a84:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
  400a88:	4050      	eors	r0, r2
  400a8a:	4059      	eors	r1, r3
  400a8c:	4602      	mov	r2, r0
  400a8e:	460b      	mov	r3, r1
  400a90:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  400a94:	e9dd ab16 	ldrd	sl, fp, [sp, #88]	; 0x58
  400a98:	eb10 000a 	adds.w	r0, r0, sl
  400a9c:	eb41 010b 	adc.w	r1, r1, fp
  400aa0:	eb12 0800 	adds.w	r8, r2, r0
  400aa4:	eb43 0901 	adc.w	r9, r3, r1
  400aa8:	e9cd 8920 	strd	r8, r9, [sp, #128]	; 0x80

00400aac <.LBB423>:
  400aac:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  400ab0:	4641      	mov	r1, r8
  400ab2:	0cc9      	lsrs	r1, r1, #19
  400ab4:	4648      	mov	r0, r9
  400ab6:	ea41 3149 	orr.w	r1, r1, r9, lsl #13
  400aba:	91b6      	str	r1, [sp, #728]	; 0x2d8
  400abc:	0cc1      	lsrs	r1, r0, #19
  400abe:	4640      	mov	r0, r8
  400ac0:	ea41 3148 	orr.w	r1, r1, r8, lsl #13
  400ac4:	91b7      	str	r1, [sp, #732]	; 0x2dc

00400ac6 <.LBB425>:
  400ac6:	4649      	mov	r1, r9
  400ac8:	00c9      	lsls	r1, r1, #3
  400aca:	ea41 7158 	orr.w	r1, r1, r8, lsr #29
  400ace:	91b9      	str	r1, [sp, #740]	; 0x2e4
  400ad0:	00c1      	lsls	r1, r0, #3
  400ad2:	ea41 7159 	orr.w	r1, r1, r9, lsr #29
  400ad6:	91b8      	str	r1, [sp, #736]	; 0x2e0

00400ad8 <.LBE425>:
  400ad8:	abb6      	add	r3, sp, #728	; 0x2d8
  400ada:	e9d3 0100 	ldrd	r0, r1, [r3]
  400ade:	abb8      	add	r3, sp, #736	; 0x2e0
  400ae0:	e9d3 ab00 	ldrd	sl, fp, [r3]
  400ae4:	ea80 000a 	eor.w	r0, r0, sl
  400ae8:	ea81 010b 	eor.w	r1, r1, fp
  400aec:	4643      	mov	r3, r8
  400aee:	099b      	lsrs	r3, r3, #6
  400af0:	464a      	mov	r2, r9
  400af2:	ea43 6389 	orr.w	r3, r3, r9, lsl #26
  400af6:	933e      	str	r3, [sp, #248]	; 0xf8
  400af8:	0993      	lsrs	r3, r2, #6
  400afa:	933f      	str	r3, [sp, #252]	; 0xfc
  400afc:	e9dd 233e 	ldrd	r2, r3, [sp, #248]	; 0xf8
  400b00:	4042      	eors	r2, r0
  400b02:	404b      	eors	r3, r1
  400b04:	4610      	mov	r0, r2
  400b06:	4619      	mov	r1, r3
  400b08:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
  400b0c:	1812      	adds	r2, r2, r0
  400b0e:	414b      	adcs	r3, r1
  400b10:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  400b14:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  400b18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  400b1c:	1812      	adds	r2, r2, r0
  400b1e:	414b      	adcs	r3, r1
  400b20:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  400b24:	1880      	adds	r0, r0, r2
  400b26:	4159      	adcs	r1, r3
  400b28:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400b2c:	1902      	adds	r2, r0, r4
  400b2e:	eb41 0305 	adc.w	r3, r1, r5
  400b32:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68

00400b36 <.LBB427>:
  400b36:	e9dd 452e 	ldrd	r4, r5, [sp, #184]	; 0xb8
  400b3a:	0f23      	lsrs	r3, r4, #28
  400b3c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  400b40:	93ba      	str	r3, [sp, #744]	; 0x2e8
  400b42:	0f2b      	lsrs	r3, r5, #28
  400b44:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  400b48:	93bb      	str	r3, [sp, #748]	; 0x2ec

00400b4a <.LBB429>:
  400b4a:	07ab      	lsls	r3, r5, #30
  400b4c:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  400b50:	93bd      	str	r3, [sp, #756]	; 0x2f4
  400b52:	07a3      	lsls	r3, r4, #30
  400b54:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  400b58:	93bc      	str	r3, [sp, #752]	; 0x2f0

00400b5a <.LBE429>:
  400b5a:	abba      	add	r3, sp, #744	; 0x2e8
  400b5c:	e9d3 1200 	ldrd	r1, r2, [r3]
  400b60:	abbc      	add	r3, sp, #752	; 0x2f0
  400b62:	e9d3 ab00 	ldrd	sl, fp, [r3]
  400b66:	ea81 010a 	eor.w	r1, r1, sl
  400b6a:	ea82 020b 	eor.w	r2, r2, fp
  400b6e:	4613      	mov	r3, r2
  400b70:	460a      	mov	r2, r1

00400b72 <.LBB431>:
  400b72:	0669      	lsls	r1, r5, #25
  400b74:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  400b78:	91bf      	str	r1, [sp, #764]	; 0x2fc
  400b7a:	0661      	lsls	r1, r4, #25
  400b7c:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  400b80:	91be      	str	r1, [sp, #760]	; 0x2f8

00400b82 <.LBE431>:
  400b82:	a9be      	add	r1, sp, #760	; 0x2f8
  400b84:	e9d1 0100 	ldrd	r0, r1, [r1]
  400b88:	4050      	eors	r0, r2
  400b8a:	4059      	eors	r1, r3
  400b8c:	f50d 63d8 	add.w	r3, sp, #1728	; 0x6c0
  400b90:	e9c3 0100 	strd	r0, r1, [r3]
  400b94:	e9dd ab2a 	ldrd	sl, fp, [sp, #168]	; 0xa8
  400b98:	4650      	mov	r0, sl
  400b9a:	4659      	mov	r1, fp
  400b9c:	46a0      	mov	r8, r4
  400b9e:	4320      	orrs	r0, r4
  400ba0:	4329      	orrs	r1, r5
  400ba2:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
  400ba6:	4003      	ands	r3, r0
  400ba8:	400c      	ands	r4, r1
  400baa:	4618      	mov	r0, r3
  400bac:	4621      	mov	r1, r4
  400bae:	4652      	mov	r2, sl
  400bb0:	465b      	mov	r3, fp
  400bb2:	4644      	mov	r4, r8
  400bb4:	4022      	ands	r2, r4
  400bb6:	402b      	ands	r3, r5
  400bb8:	4310      	orrs	r0, r2
  400bba:	4319      	orrs	r1, r3
  400bbc:	f50d 63d8 	add.w	r3, sp, #1728	; 0x6c0
  400bc0:	e9d3 3400 	ldrd	r3, r4, [r3]
  400bc4:	181b      	adds	r3, r3, r0
  400bc6:	414c      	adcs	r4, r1
  400bc8:	4621      	mov	r1, r4
  400bca:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  400bce:	18e4      	adds	r4, r4, r3
  400bd0:	414d      	adcs	r5, r1

00400bd2 <.LBB433>:
  400bd2:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  400bd6:	0b83      	lsrs	r3, r0, #14
  400bd8:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  400bdc:	93c0      	str	r3, [sp, #768]	; 0x300
  400bde:	0b8b      	lsrs	r3, r1, #14
  400be0:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
  400be4:	93c1      	str	r3, [sp, #772]	; 0x304

00400be6 <.LBB435>:
  400be6:	0c83      	lsrs	r3, r0, #18
  400be8:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
  400bec:	93c2      	str	r3, [sp, #776]	; 0x308
  400bee:	0c8b      	lsrs	r3, r1, #18
  400bf0:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
  400bf4:	93c3      	str	r3, [sp, #780]	; 0x30c

00400bf6 <.LBE435>:
        R( 4); R( 5); R( 6); R( 7);
  400bf6:	abc0      	add	r3, sp, #768	; 0x300
  400bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
  400bfc:	f50d 7842 	add.w	r8, sp, #776	; 0x308
  400c00:	e9d8 ab00 	ldrd	sl, fp, [r8]
  400c04:	ea82 020a 	eor.w	r2, r2, sl
  400c08:	ea83 030b 	eor.w	r3, r3, fp

00400c0c <.LBB437>:
  400c0c:	4682      	mov	sl, r0
  400c0e:	468b      	mov	fp, r1
  400c10:	05c9      	lsls	r1, r1, #23
  400c12:	4650      	mov	r0, sl
  400c14:	ea41 215a 	orr.w	r1, r1, sl, lsr #9
  400c18:	91c5      	str	r1, [sp, #788]	; 0x314
  400c1a:	05c1      	lsls	r1, r0, #23
  400c1c:	ea41 215b 	orr.w	r1, r1, fp, lsr #9
  400c20:	91c4      	str	r1, [sp, #784]	; 0x310

00400c22 <.LBE437>:
  400c22:	a9c4      	add	r1, sp, #784	; 0x310
  400c24:	e9d1 0100 	ldrd	r0, r1, [r1]
  400c28:	4050      	eors	r0, r2
  400c2a:	4059      	eors	r1, r3
  400c2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400c30:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
  400c34:	4640      	mov	r0, r8
  400c36:	4649      	mov	r1, r9
  400c38:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  400c3c:	4042      	eors	r2, r0
  400c3e:	404b      	eors	r3, r1
  400c40:	4610      	mov	r0, r2
  400c42:	4619      	mov	r1, r3
  400c44:	4652      	mov	r2, sl
  400c46:	465b      	mov	r3, fp
  400c48:	4002      	ands	r2, r0
  400c4a:	400b      	ands	r3, r1
  400c4c:	4610      	mov	r0, r2
  400c4e:	4619      	mov	r1, r3
  400c50:	4642      	mov	r2, r8
  400c52:	464b      	mov	r3, r9
  400c54:	4042      	eors	r2, r0
  400c56:	404b      	eors	r3, r1
  400c58:	4610      	mov	r0, r2
  400c5a:	4619      	mov	r1, r3
  400c5c:	e9d6 2308 	ldrd	r2, r3, [r6, #32]
  400c60:	e9dd ab2c 	ldrd	sl, fp, [sp, #176]	; 0xb0
  400c64:	eb1a 0a02 	adds.w	sl, sl, r2
  400c68:	eb4b 0b03 	adc.w	fp, fp, r3
  400c6c:	eb1a 0200 	adds.w	r2, sl, r0
  400c70:	eb4b 0301 	adc.w	r3, fp, r1
  400c74:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
  400c78:	2f00      	cmp	r7, #0
  400c7a:	f001 85ef 	beq.w	40285c <.LCFI3+0x30>

00400c7e <.LBB439>:
  400c7e:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
  400c82:	4643      	mov	r3, r8
  400c84:	085b      	lsrs	r3, r3, #1
  400c86:	464a      	mov	r2, r9
  400c88:	ea43 73c9 	orr.w	r3, r3, r9, lsl #31
  400c8c:	93c6      	str	r3, [sp, #792]	; 0x318
  400c8e:	0853      	lsrs	r3, r2, #1
  400c90:	4642      	mov	r2, r8
  400c92:	ea43 73c8 	orr.w	r3, r3, r8, lsl #31
  400c96:	93c7      	str	r3, [sp, #796]	; 0x31c

00400c98 <.LBB441>:
  400c98:	0a13      	lsrs	r3, r2, #8
  400c9a:	464a      	mov	r2, r9
  400c9c:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
  400ca0:	93c8      	str	r3, [sp, #800]	; 0x320
  400ca2:	0a13      	lsrs	r3, r2, #8
  400ca4:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
  400ca8:	93c9      	str	r3, [sp, #804]	; 0x324

00400caa <.LBE441>:
  400caa:	abc6      	add	r3, sp, #792	; 0x318
  400cac:	e9d3 2300 	ldrd	r2, r3, [r3]
  400cb0:	a9c8      	add	r1, sp, #800	; 0x320
  400cb2:	e9d1 ab00 	ldrd	sl, fp, [r1]
  400cb6:	ea82 020a 	eor.w	r2, r2, sl
  400cba:	ea83 030b 	eor.w	r3, r3, fp
  400cbe:	4641      	mov	r1, r8
  400cc0:	09c9      	lsrs	r1, r1, #7
  400cc2:	4648      	mov	r0, r9
  400cc4:	ea41 6149 	orr.w	r1, r1, r9, lsl #25
  400cc8:	9140      	str	r1, [sp, #256]	; 0x100
  400cca:	09c1      	lsrs	r1, r0, #7
  400ccc:	9141      	str	r1, [sp, #260]	; 0x104
  400cce:	a940      	add	r1, sp, #256	; 0x100
  400cd0:	e9d1 0100 	ldrd	r0, r1, [r1]
  400cd4:	4050      	eors	r0, r2
  400cd6:	4059      	eors	r1, r3
  400cd8:	4602      	mov	r2, r0
  400cda:	460b      	mov	r3, r1
  400cdc:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
  400ce0:	e9dd ab26 	ldrd	sl, fp, [sp, #152]	; 0x98
  400ce4:	eb10 000a 	adds.w	r0, r0, sl
  400ce8:	eb41 010b 	adc.w	r1, r1, fp
  400cec:	eb12 0800 	adds.w	r8, r2, r0
  400cf0:	eb43 0901 	adc.w	r9, r3, r1
  400cf4:	e9cd 8922 	strd	r8, r9, [sp, #136]	; 0x88

00400cf8 <.LBB443>:
  400cf8:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
  400cfc:	4641      	mov	r1, r8
  400cfe:	0cc9      	lsrs	r1, r1, #19
  400d00:	4648      	mov	r0, r9
  400d02:	ea41 3149 	orr.w	r1, r1, r9, lsl #13
  400d06:	91ca      	str	r1, [sp, #808]	; 0x328
  400d08:	0cc1      	lsrs	r1, r0, #19
  400d0a:	4640      	mov	r0, r8
  400d0c:	ea41 3148 	orr.w	r1, r1, r8, lsl #13
  400d10:	91cb      	str	r1, [sp, #812]	; 0x32c

00400d12 <.LBB445>:
  400d12:	4649      	mov	r1, r9
  400d14:	00c9      	lsls	r1, r1, #3
  400d16:	ea41 7158 	orr.w	r1, r1, r8, lsr #29
  400d1a:	91cd      	str	r1, [sp, #820]	; 0x334
  400d1c:	00c1      	lsls	r1, r0, #3
  400d1e:	ea41 7159 	orr.w	r1, r1, r9, lsr #29
  400d22:	91cc      	str	r1, [sp, #816]	; 0x330

00400d24 <.LBE445>:
  400d24:	abca      	add	r3, sp, #808	; 0x328
  400d26:	e9d3 0100 	ldrd	r0, r1, [r3]
  400d2a:	abcc      	add	r3, sp, #816	; 0x330
  400d2c:	e9d3 ab00 	ldrd	sl, fp, [r3]
  400d30:	ea80 000a 	eor.w	r0, r0, sl
  400d34:	ea81 010b 	eor.w	r1, r1, fp
  400d38:	4643      	mov	r3, r8
  400d3a:	099b      	lsrs	r3, r3, #6
  400d3c:	464a      	mov	r2, r9
  400d3e:	ea43 6389 	orr.w	r3, r3, r9, lsl #26
  400d42:	9342      	str	r3, [sp, #264]	; 0x108
  400d44:	0993      	lsrs	r3, r2, #6
  400d46:	9343      	str	r3, [sp, #268]	; 0x10c
  400d48:	ab42      	add	r3, sp, #264	; 0x108
  400d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
  400d4e:	4042      	eors	r2, r0
  400d50:	404b      	eors	r3, r1
  400d52:	4610      	mov	r0, r2
  400d54:	4619      	mov	r1, r3
  400d56:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
  400d5a:	1812      	adds	r2, r2, r0
  400d5c:	414b      	adcs	r3, r1
  400d5e:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
  400d62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  400d66:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
  400d6a:	1880      	adds	r0, r0, r2
  400d6c:	4159      	adcs	r1, r3
  400d6e:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
  400d72:	1812      	adds	r2, r2, r0
  400d74:	414b      	adcs	r3, r1
  400d76:	4690      	mov	r8, r2
  400d78:	4699      	mov	r9, r3
  400d7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  400d7e:	eb12 0208 	adds.w	r2, r2, r8
  400d82:	eb43 0309 	adc.w	r3, r3, r9
  400d86:	e9cd 2306 	strd	r2, r3, [sp, #24]

00400d8a <.LBB447>:
  400d8a:	0f23      	lsrs	r3, r4, #28
  400d8c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  400d90:	93ce      	str	r3, [sp, #824]	; 0x338
  400d92:	0f2b      	lsrs	r3, r5, #28
  400d94:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  400d98:	93cf      	str	r3, [sp, #828]	; 0x33c

00400d9a <.LBB449>:
  400d9a:	07ab      	lsls	r3, r5, #30
  400d9c:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  400da0:	93d1      	str	r3, [sp, #836]	; 0x344
  400da2:	07a3      	lsls	r3, r4, #30
  400da4:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  400da8:	93d0      	str	r3, [sp, #832]	; 0x340

00400daa <.LBE449>:
  400daa:	abce      	add	r3, sp, #824	; 0x338
  400dac:	e9d3 2300 	ldrd	r2, r3, [r3]
  400db0:	a9d0      	add	r1, sp, #832	; 0x340
  400db2:	e9d1 ab00 	ldrd	sl, fp, [r1]
  400db6:	ea82 020a 	eor.w	r2, r2, sl
  400dba:	ea83 030b 	eor.w	r3, r3, fp

00400dbe <.LBB451>:
  400dbe:	0669      	lsls	r1, r5, #25
  400dc0:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  400dc4:	91d3      	str	r1, [sp, #844]	; 0x34c
  400dc6:	0661      	lsls	r1, r4, #25
  400dc8:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  400dcc:	91d2      	str	r1, [sp, #840]	; 0x348

00400dce <.LBE451>:
  400dce:	a9d2      	add	r1, sp, #840	; 0x348
  400dd0:	e9d1 ab00 	ldrd	sl, fp, [r1]
  400dd4:	ea8a 0a02 	eor.w	sl, sl, r2
  400dd8:	ea8b 0b03 	eor.w	fp, fp, r3
  400ddc:	e9cd ab02 	strd	sl, fp, [sp, #8]
  400de0:	e9dd ab2e 	ldrd	sl, fp, [sp, #184]	; 0xb8
  400de4:	4650      	mov	r0, sl
  400de6:	4659      	mov	r1, fp
  400de8:	4320      	orrs	r0, r4
  400dea:	4329      	orrs	r1, r5
  400dec:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  400df0:	4002      	ands	r2, r0
  400df2:	400b      	ands	r3, r1
  400df4:	ea0a 0a04 	and.w	sl, sl, r4
  400df8:	ea0b 0b05 	and.w	fp, fp, r5
  400dfc:	ea4a 0a02 	orr.w	sl, sl, r2
  400e00:	ea4b 0b03 	orr.w	fp, fp, r3
  400e04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  400e08:	eb12 020a 	adds.w	r2, r2, sl
  400e0c:	eb43 030b 	adc.w	r3, r3, fp
  400e10:	eb18 0a02 	adds.w	sl, r8, r2
  400e14:	eb49 0b03 	adc.w	fp, r9, r3

00400e18 <.LBB453>:
  400e18:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  400e1c:	4643      	mov	r3, r8
  400e1e:	0b9b      	lsrs	r3, r3, #14
  400e20:	464a      	mov	r2, r9
  400e22:	ea43 4389 	orr.w	r3, r3, r9, lsl #18
  400e26:	93d4      	str	r3, [sp, #848]	; 0x350
  400e28:	0b93      	lsrs	r3, r2, #14
  400e2a:	4642      	mov	r2, r8
  400e2c:	ea43 4388 	orr.w	r3, r3, r8, lsl #18
  400e30:	93d5      	str	r3, [sp, #852]	; 0x354

00400e32 <.LBB455>:
  400e32:	0c93      	lsrs	r3, r2, #18
  400e34:	464a      	mov	r2, r9
  400e36:	ea43 3389 	orr.w	r3, r3, r9, lsl #14
  400e3a:	93d6      	str	r3, [sp, #856]	; 0x358
  400e3c:	0c93      	lsrs	r3, r2, #18
  400e3e:	ea43 3388 	orr.w	r3, r3, r8, lsl #14
  400e42:	93d7      	str	r3, [sp, #860]	; 0x35c

00400e44 <.LBE455>:
  400e44:	abd4      	add	r3, sp, #848	; 0x350
  400e46:	e9d3 2300 	ldrd	r2, r3, [r3]
  400e4a:	a9d6      	add	r1, sp, #856	; 0x358
  400e4c:	e9d1 0100 	ldrd	r0, r1, [r1]
  400e50:	4042      	eors	r2, r0
  400e52:	404b      	eors	r3, r1

00400e54 <.LBB457>:
  400e54:	4649      	mov	r1, r9
  400e56:	05c9      	lsls	r1, r1, #23
  400e58:	4640      	mov	r0, r8
  400e5a:	ea41 2158 	orr.w	r1, r1, r8, lsr #9
  400e5e:	91d9      	str	r1, [sp, #868]	; 0x364
  400e60:	05c1      	lsls	r1, r0, #23
  400e62:	ea41 2159 	orr.w	r1, r1, r9, lsr #9
  400e66:	91d8      	str	r1, [sp, #864]	; 0x360

00400e68 <.LBE457>:
  400e68:	a9d8      	add	r1, sp, #864	; 0x360
  400e6a:	e9d1 0100 	ldrd	r0, r1, [r1]
  400e6e:	4050      	eors	r0, r2
  400e70:	4059      	eors	r1, r3
  400e72:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400e76:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  400e7a:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  400e7e:	4042      	eors	r2, r0
  400e80:	404b      	eors	r3, r1
  400e82:	4610      	mov	r0, r2
  400e84:	4619      	mov	r1, r3
  400e86:	4642      	mov	r2, r8
  400e88:	464b      	mov	r3, r9
  400e8a:	4002      	ands	r2, r0
  400e8c:	400b      	ands	r3, r1
  400e8e:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
  400e92:	ea88 0802 	eor.w	r8, r8, r2
  400e96:	ea89 0903 	eor.w	r9, r9, r3
  400e9a:	e9d6 230a 	ldrd	r2, r3, [r6, #40]	; 0x28
  400e9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  400ea2:	1880      	adds	r0, r0, r2
  400ea4:	4159      	adcs	r1, r3
  400ea6:	eb18 0000 	adds.w	r0, r8, r0
  400eaa:	eb49 0101 	adc.w	r1, r9, r1
  400eae:	e9cd 0104 	strd	r0, r1, [sp, #16]
  400eb2:	2f00      	cmp	r7, #0
  400eb4:	f001 84d8 	beq.w	402868 <.LCFI3+0x3c>

00400eb8 <.LBB459>:
  400eb8:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
  400ebc:	4643      	mov	r3, r8
  400ebe:	085b      	lsrs	r3, r3, #1
  400ec0:	464a      	mov	r2, r9
  400ec2:	ea43 73c9 	orr.w	r3, r3, r9, lsl #31
  400ec6:	93da      	str	r3, [sp, #872]	; 0x368
  400ec8:	0853      	lsrs	r3, r2, #1
  400eca:	4642      	mov	r2, r8
  400ecc:	ea43 73c8 	orr.w	r3, r3, r8, lsl #31
  400ed0:	93db      	str	r3, [sp, #876]	; 0x36c

00400ed2 <.LBB461>:
  400ed2:	0a13      	lsrs	r3, r2, #8
  400ed4:	464a      	mov	r2, r9
  400ed6:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
  400eda:	93dc      	str	r3, [sp, #880]	; 0x370
  400edc:	0a13      	lsrs	r3, r2, #8
  400ede:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
  400ee2:	93dd      	str	r3, [sp, #884]	; 0x374

00400ee4 <.LBE461>:
  400ee4:	abda      	add	r3, sp, #872	; 0x368
  400ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
  400eea:	a9dc      	add	r1, sp, #880	; 0x370
  400eec:	e9d1 0100 	ldrd	r0, r1, [r1]
  400ef0:	4042      	eors	r2, r0
  400ef2:	404b      	eors	r3, r1
  400ef4:	4641      	mov	r1, r8
  400ef6:	09c9      	lsrs	r1, r1, #7
  400ef8:	4648      	mov	r0, r9
  400efa:	ea41 6149 	orr.w	r1, r1, r9, lsl #25
  400efe:	9144      	str	r1, [sp, #272]	; 0x110
  400f00:	09c1      	lsrs	r1, r0, #7
  400f02:	9145      	str	r1, [sp, #276]	; 0x114
  400f04:	a944      	add	r1, sp, #272	; 0x110
  400f06:	e9d1 0100 	ldrd	r0, r1, [r1]
  400f0a:	4050      	eors	r0, r2
  400f0c:	4059      	eors	r1, r3
  400f0e:	4680      	mov	r8, r0
  400f10:	4689      	mov	r9, r1
  400f12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  400f16:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  400f1a:	1880      	adds	r0, r0, r2
  400f1c:	4159      	adcs	r1, r3
  400f1e:	eb18 0200 	adds.w	r2, r8, r0
  400f22:	eb49 0301 	adc.w	r3, r9, r1
  400f26:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28

00400f2a <.LBB463>:
  400f2a:	e9dd 8920 	ldrd	r8, r9, [sp, #128]	; 0x80
  400f2e:	4641      	mov	r1, r8
  400f30:	0cc9      	lsrs	r1, r1, #19
  400f32:	4648      	mov	r0, r9
  400f34:	ea41 3149 	orr.w	r1, r1, r9, lsl #13
  400f38:	91de      	str	r1, [sp, #888]	; 0x378
  400f3a:	0cc1      	lsrs	r1, r0, #19
  400f3c:	4640      	mov	r0, r8
  400f3e:	ea41 3148 	orr.w	r1, r1, r8, lsl #13
  400f42:	91df      	str	r1, [sp, #892]	; 0x37c

00400f44 <.LBB465>:
  400f44:	4649      	mov	r1, r9
  400f46:	00c9      	lsls	r1, r1, #3
  400f48:	ea41 7158 	orr.w	r1, r1, r8, lsr #29
  400f4c:	91e1      	str	r1, [sp, #900]	; 0x384
  400f4e:	00c1      	lsls	r1, r0, #3
  400f50:	ea41 7159 	orr.w	r1, r1, r9, lsr #29
  400f54:	91e0      	str	r1, [sp, #896]	; 0x380

00400f56 <.LBE465>:
  400f56:	abde      	add	r3, sp, #888	; 0x378
  400f58:	e9d3 0100 	ldrd	r0, r1, [r3]
  400f5c:	abe0      	add	r3, sp, #896	; 0x380
  400f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
  400f62:	4050      	eors	r0, r2
  400f64:	4059      	eors	r1, r3
  400f66:	4643      	mov	r3, r8
  400f68:	099b      	lsrs	r3, r3, #6
  400f6a:	464a      	mov	r2, r9
  400f6c:	ea43 6389 	orr.w	r3, r3, r9, lsl #26
  400f70:	9346      	str	r3, [sp, #280]	; 0x118
  400f72:	0993      	lsrs	r3, r2, #6
  400f74:	9347      	str	r3, [sp, #284]	; 0x11c
  400f76:	ab46      	add	r3, sp, #280	; 0x118
  400f78:	e9d3 2300 	ldrd	r2, r3, [r3]
  400f7c:	4042      	eors	r2, r0
  400f7e:	404b      	eors	r3, r1
  400f80:	4610      	mov	r0, r2
  400f82:	4619      	mov	r1, r3
  400f84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  400f88:	1812      	adds	r2, r2, r0
  400f8a:	414b      	adcs	r3, r1
  400f8c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  400f90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  400f94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  400f98:	1812      	adds	r2, r2, r0
  400f9a:	414b      	adcs	r3, r1
  400f9c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  400fa0:	1880      	adds	r0, r0, r2
  400fa2:	4159      	adcs	r1, r3
  400fa4:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  400fa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400fac:	1812      	adds	r2, r2, r0
  400fae:	414b      	adcs	r3, r1
  400fb0:	e9cd 2304 	strd	r2, r3, [sp, #16]

00400fb4 <.LBB467>:
  400fb4:	ea4f 731a 	mov.w	r3, sl, lsr #28
  400fb8:	ea43 130b 	orr.w	r3, r3, fp, lsl #4
  400fbc:	93e2      	str	r3, [sp, #904]	; 0x388
  400fbe:	ea4f 731b 	mov.w	r3, fp, lsr #28
  400fc2:	ea43 130a 	orr.w	r3, r3, sl, lsl #4
  400fc6:	93e3      	str	r3, [sp, #908]	; 0x38c

00400fc8 <.LBB469>:
  400fc8:	ea4f 738b 	mov.w	r3, fp, lsl #30
  400fcc:	ea43 039a 	orr.w	r3, r3, sl, lsr #2
  400fd0:	93e5      	str	r3, [sp, #916]	; 0x394
  400fd2:	ea4f 738a 	mov.w	r3, sl, lsl #30
  400fd6:	ea43 039b 	orr.w	r3, r3, fp, lsr #2
  400fda:	93e4      	str	r3, [sp, #912]	; 0x390

00400fdc <.LBE469>:
  400fdc:	abe2      	add	r3, sp, #904	; 0x388
  400fde:	e9d3 1200 	ldrd	r1, r2, [r3]
  400fe2:	abe4      	add	r3, sp, #912	; 0x390
  400fe4:	e9d3 8900 	ldrd	r8, r9, [r3]
  400fe8:	ea81 0108 	eor.w	r1, r1, r8
  400fec:	ea82 0209 	eor.w	r2, r2, r9
  400ff0:	4613      	mov	r3, r2
  400ff2:	460a      	mov	r2, r1

00400ff4 <.LBB471>:
  400ff4:	ea4f 614b 	mov.w	r1, fp, lsl #25
  400ff8:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
  400ffc:	91e7      	str	r1, [sp, #924]	; 0x39c
  400ffe:	ea4f 614a 	mov.w	r1, sl, lsl #25
  401002:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
  401006:	91e6      	str	r1, [sp, #920]	; 0x398

00401008 <.LBE471>:
  401008:	a9e6      	add	r1, sp, #920	; 0x398
  40100a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40100e:	4050      	eors	r0, r2
  401010:	4059      	eors	r1, r3
  401012:	4680      	mov	r8, r0
  401014:	4689      	mov	r9, r1
  401016:	ea44 000a 	orr.w	r0, r4, sl
  40101a:	ea45 010b 	orr.w	r1, r5, fp
  40101e:	e9dd 232e 	ldrd	r2, r3, [sp, #184]	; 0xb8
  401022:	4002      	ands	r2, r0
  401024:	400b      	ands	r3, r1
  401026:	4610      	mov	r0, r2
  401028:	4619      	mov	r1, r3
  40102a:	ea04 020a 	and.w	r2, r4, sl
  40102e:	ea05 030b 	and.w	r3, r5, fp
  401032:	4302      	orrs	r2, r0
  401034:	430b      	orrs	r3, r1
  401036:	eb12 0008 	adds.w	r0, r2, r8
  40103a:	eb43 0109 	adc.w	r1, r3, r9
  40103e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401042:	1812      	adds	r2, r2, r0
  401044:	414b      	adcs	r3, r1
  401046:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8

0040104a <.LBB473>:
  40104a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40104e:	0b83      	lsrs	r3, r0, #14
  401050:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  401054:	93e8      	str	r3, [sp, #928]	; 0x3a0
  401056:	0b8b      	lsrs	r3, r1, #14
  401058:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
  40105c:	93e9      	str	r3, [sp, #932]	; 0x3a4

0040105e <.LBB475>:
  40105e:	0c83      	lsrs	r3, r0, #18
  401060:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
  401064:	93ea      	str	r3, [sp, #936]	; 0x3a8
  401066:	0c8b      	lsrs	r3, r1, #18
  401068:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
  40106c:	93eb      	str	r3, [sp, #940]	; 0x3ac

0040106e <.LBE475>:
  40106e:	abe8      	add	r3, sp, #928	; 0x3a0
  401070:	e9d3 2300 	ldrd	r2, r3, [r3]
  401074:	f50d 786a 	add.w	r8, sp, #936	; 0x3a8
  401078:	e9d8 8900 	ldrd	r8, r9, [r8]
  40107c:	ea82 0208 	eor.w	r2, r2, r8
  401080:	ea83 0309 	eor.w	r3, r3, r9

00401084 <.LBB477>:
  401084:	4680      	mov	r8, r0
  401086:	4689      	mov	r9, r1
  401088:	05c9      	lsls	r1, r1, #23
  40108a:	4640      	mov	r0, r8
  40108c:	ea41 2158 	orr.w	r1, r1, r8, lsr #9
  401090:	91ed      	str	r1, [sp, #948]	; 0x3b4
  401092:	05c1      	lsls	r1, r0, #23
  401094:	ea41 2159 	orr.w	r1, r1, r9, lsr #9
  401098:	91ec      	str	r1, [sp, #944]	; 0x3b0

0040109a <.LBE477>:
  40109a:	a9ec      	add	r1, sp, #944	; 0x3b0
  40109c:	e9d1 0100 	ldrd	r0, r1, [r1]
  4010a0:	4050      	eors	r0, r2
  4010a2:	4059      	eors	r1, r3
  4010a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4010a8:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  4010ac:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  4010b0:	ea80 0008 	eor.w	r0, r0, r8
  4010b4:	ea81 0109 	eor.w	r1, r1, r9
  4010b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4010bc:	4002      	ands	r2, r0
  4010be:	400b      	ands	r3, r1
  4010c0:	4610      	mov	r0, r2
  4010c2:	4619      	mov	r1, r3
  4010c4:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  4010c8:	4042      	eors	r2, r0
  4010ca:	404b      	eors	r3, r1
  4010cc:	4610      	mov	r0, r2
  4010ce:	4619      	mov	r1, r3
  4010d0:	e9d6 230c 	ldrd	r2, r3, [r6, #48]	; 0x30
  4010d4:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
  4010d8:	eb18 0802 	adds.w	r8, r8, r2
  4010dc:	eb49 0903 	adc.w	r9, r9, r3
  4010e0:	eb18 0200 	adds.w	r2, r8, r0
  4010e4:	eb49 0301 	adc.w	r3, r9, r1
  4010e8:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  4010ec:	2f00      	cmp	r7, #0
  4010ee:	f001 83c1 	beq.w	402874 <.LCFI3+0x48>

004010f2 <.LBB479>:
  4010f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4010f6:	0843      	lsrs	r3, r0, #1
  4010f8:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
  4010fc:	93ee      	str	r3, [sp, #952]	; 0x3b8
  4010fe:	084b      	lsrs	r3, r1, #1
  401100:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
  401104:	93ef      	str	r3, [sp, #956]	; 0x3bc

00401106 <.LBB481>:
  401106:	0a03      	lsrs	r3, r0, #8
  401108:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  40110c:	93f0      	str	r3, [sp, #960]	; 0x3c0
  40110e:	0a0b      	lsrs	r3, r1, #8
  401110:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  401114:	93f1      	str	r3, [sp, #964]	; 0x3c4

00401116 <.LBE481>:
  401116:	abee      	add	r3, sp, #952	; 0x3b8
  401118:	e9d3 2300 	ldrd	r2, r3, [r3]
  40111c:	f50d 7870 	add.w	r8, sp, #960	; 0x3c0
  401120:	e9d8 8900 	ldrd	r8, r9, [r8]
  401124:	ea82 0208 	eor.w	r2, r2, r8
  401128:	ea83 0309 	eor.w	r3, r3, r9
  40112c:	4689      	mov	r9, r1
  40112e:	09c1      	lsrs	r1, r0, #7
  401130:	4648      	mov	r0, r9
  401132:	ea41 6149 	orr.w	r1, r1, r9, lsl #25
  401136:	9148      	str	r1, [sp, #288]	; 0x120
  401138:	09c1      	lsrs	r1, r0, #7
  40113a:	9149      	str	r1, [sp, #292]	; 0x124
  40113c:	a948      	add	r1, sp, #288	; 0x120
  40113e:	e9d1 0100 	ldrd	r0, r1, [r1]
  401142:	4050      	eors	r0, r2
  401144:	4059      	eors	r1, r3
  401146:	4602      	mov	r2, r0
  401148:	460b      	mov	r3, r1
  40114a:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
  40114e:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
  401152:	eb10 0008 	adds.w	r0, r0, r8
  401156:	eb41 0109 	adc.w	r1, r1, r9
  40115a:	eb12 0800 	adds.w	r8, r2, r0
  40115e:	eb43 0901 	adc.w	r9, r3, r1
  401162:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38

00401166 <.LBB483>:
  401166:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
  40116a:	0cd1      	lsrs	r1, r2, #19
  40116c:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
  401170:	91f2      	str	r1, [sp, #968]	; 0x3c8
  401172:	0cd9      	lsrs	r1, r3, #19
  401174:	ea41 3142 	orr.w	r1, r1, r2, lsl #13
  401178:	91f3      	str	r1, [sp, #972]	; 0x3cc

0040117a <.LBB485>:
  40117a:	00d9      	lsls	r1, r3, #3
  40117c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
  401180:	91f5      	str	r1, [sp, #980]	; 0x3d4
  401182:	00d1      	lsls	r1, r2, #3
  401184:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
  401188:	91f4      	str	r1, [sp, #976]	; 0x3d0

0040118a <.LBE485>:
  40118a:	a9f2      	add	r1, sp, #968	; 0x3c8
  40118c:	e9d1 0100 	ldrd	r0, r1, [r1]
  401190:	f50d 7874 	add.w	r8, sp, #976	; 0x3d0
  401194:	e9d8 8900 	ldrd	r8, r9, [r8]
  401198:	ea80 0008 	eor.w	r0, r0, r8
  40119c:	ea81 0109 	eor.w	r1, r1, r9
  4011a0:	4699      	mov	r9, r3
  4011a2:	0993      	lsrs	r3, r2, #6
  4011a4:	464a      	mov	r2, r9
  4011a6:	ea43 6389 	orr.w	r3, r3, r9, lsl #26
  4011aa:	934a      	str	r3, [sp, #296]	; 0x128
  4011ac:	0993      	lsrs	r3, r2, #6
  4011ae:	934b      	str	r3, [sp, #300]	; 0x12c
  4011b0:	ab4a      	add	r3, sp, #296	; 0x128
  4011b2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4011b6:	4042      	eors	r2, r0
  4011b8:	404b      	eors	r3, r1
  4011ba:	4610      	mov	r0, r2
  4011bc:	4619      	mov	r1, r3
  4011be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  4011c2:	1812      	adds	r2, r2, r0
  4011c4:	414b      	adcs	r3, r1
  4011c6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  4011ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4011ce:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
  4011d2:	1880      	adds	r0, r0, r2
  4011d4:	4159      	adcs	r1, r3
  4011d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  4011da:	1812      	adds	r2, r2, r0
  4011dc:	414b      	adcs	r3, r1
  4011de:	4610      	mov	r0, r2
  4011e0:	4619      	mov	r1, r3
  4011e2:	e9dd 232e 	ldrd	r2, r3, [sp, #184]	; 0xb8
  4011e6:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  4011ea:	1880      	adds	r0, r0, r2
  4011ec:	4159      	adcs	r1, r3
  4011ee:	4602      	mov	r2, r0
  4011f0:	460b      	mov	r3, r1
  4011f2:	e9cd 2302 	strd	r2, r3, [sp, #8]

004011f6 <.LBB487>:
  4011f6:	e9dd 892a 	ldrd	r8, r9, [sp, #168]	; 0xa8
  4011fa:	4643      	mov	r3, r8
  4011fc:	0f1b      	lsrs	r3, r3, #28
  4011fe:	464a      	mov	r2, r9
  401200:	ea43 1309 	orr.w	r3, r3, r9, lsl #4
  401204:	93f6      	str	r3, [sp, #984]	; 0x3d8
  401206:	0f13      	lsrs	r3, r2, #28
  401208:	4642      	mov	r2, r8
  40120a:	ea43 1308 	orr.w	r3, r3, r8, lsl #4
  40120e:	93f7      	str	r3, [sp, #988]	; 0x3dc

00401210 <.LBB489>:
  401210:	464b      	mov	r3, r9
  401212:	079b      	lsls	r3, r3, #30
  401214:	ea43 0398 	orr.w	r3, r3, r8, lsr #2
  401218:	93f9      	str	r3, [sp, #996]	; 0x3e4
  40121a:	0793      	lsls	r3, r2, #30
  40121c:	ea43 0399 	orr.w	r3, r3, r9, lsr #2
  401220:	93f8      	str	r3, [sp, #992]	; 0x3e0

00401222 <.LBE489>:
  401222:	abf6      	add	r3, sp, #984	; 0x3d8
  401224:	e9d3 2300 	ldrd	r2, r3, [r3]
  401228:	a9f8      	add	r1, sp, #992	; 0x3e0
  40122a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40122e:	4042      	eors	r2, r0
  401230:	404b      	eors	r3, r1

00401232 <.LBB491>:
  401232:	4649      	mov	r1, r9
  401234:	0649      	lsls	r1, r1, #25
  401236:	4640      	mov	r0, r8
  401238:	ea41 11d8 	orr.w	r1, r1, r8, lsr #7
  40123c:	91fb      	str	r1, [sp, #1004]	; 0x3ec
  40123e:	0641      	lsls	r1, r0, #25
  401240:	ea41 11d9 	orr.w	r1, r1, r9, lsr #7
  401244:	91fa      	str	r1, [sp, #1000]	; 0x3e8

00401246 <.LBE491>:
  401246:	a9fa      	add	r1, sp, #1000	; 0x3e8
  401248:	e9d1 0100 	ldrd	r0, r1, [r1]
  40124c:	4050      	eors	r0, r2
  40124e:	4059      	eors	r1, r3
  401250:	4602      	mov	r2, r0
  401252:	460b      	mov	r3, r1
  401254:	ea48 000a 	orr.w	r0, r8, sl
  401258:	ea49 010b 	orr.w	r1, r9, fp
  40125c:	4020      	ands	r0, r4
  40125e:	4029      	ands	r1, r5
  401260:	ea08 080a 	and.w	r8, r8, sl
  401264:	ea09 090b 	and.w	r9, r9, fp
  401268:	ea48 0800 	orr.w	r8, r8, r0
  40126c:	ea49 0901 	orr.w	r9, r9, r1
  401270:	eb18 0002 	adds.w	r0, r8, r2
  401274:	eb49 0103 	adc.w	r1, r9, r3
  401278:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
  40127c:	eb18 0800 	adds.w	r8, r8, r0
  401280:	eb49 0901 	adc.w	r9, r9, r1

00401284 <.LBB493>:
  401284:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  401288:	0b83      	lsrs	r3, r0, #14
  40128a:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  40128e:	93fc      	str	r3, [sp, #1008]	; 0x3f0
  401290:	0b8b      	lsrs	r3, r1, #14
  401292:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
  401296:	93fd      	str	r3, [sp, #1012]	; 0x3f4

00401298 <.LBB495>:
  401298:	0c83      	lsrs	r3, r0, #18
  40129a:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
  40129e:	93fe      	str	r3, [sp, #1016]	; 0x3f8
  4012a0:	0c8b      	lsrs	r3, r1, #18
  4012a2:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
  4012a6:	93ff      	str	r3, [sp, #1020]	; 0x3fc

004012a8 <.LBE495>:
  4012a8:	abfc      	add	r3, sp, #1008	; 0x3f0
  4012aa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4012ae:	a9fe      	add	r1, sp, #1016	; 0x3f8
  4012b0:	e9d1 0100 	ldrd	r0, r1, [r1]
  4012b4:	4042      	eors	r2, r0
  4012b6:	404b      	eors	r3, r1

004012b8 <.LBB497>:
  4012b8:	9903      	ldr	r1, [sp, #12]
  4012ba:	05c9      	lsls	r1, r1, #23
  4012bc:	9802      	ldr	r0, [sp, #8]
  4012be:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
  4012c2:	f8cd 1404 	str.w	r1, [sp, #1028]	; 0x404
  4012c6:	05c1      	lsls	r1, r0, #23
  4012c8:	9803      	ldr	r0, [sp, #12]
  4012ca:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
  4012ce:	f8cd 1400 	str.w	r1, [sp, #1024]	; 0x400

004012d2 <.LBE497>:
  4012d2:	f50d 6180 	add.w	r1, sp, #1024	; 0x400
  4012d6:	e9d1 0100 	ldrd	r0, r1, [r1]
  4012da:	4050      	eors	r0, r2
  4012dc:	4059      	eors	r1, r3
  4012de:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  4012e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4012e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4012ea:	4050      	eors	r0, r2
  4012ec:	4059      	eors	r1, r3
  4012ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4012f2:	4002      	ands	r2, r0
  4012f4:	400b      	ands	r3, r1
  4012f6:	4610      	mov	r0, r2
  4012f8:	4619      	mov	r1, r3
  4012fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  4012fe:	4042      	eors	r2, r0
  401300:	404b      	eors	r3, r1
  401302:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
  401306:	e9d6 230e 	ldrd	r2, r3, [r6, #56]	; 0x38
  40130a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  40130e:	1880      	adds	r0, r0, r2
  401310:	4159      	adcs	r1, r3
  401312:	4602      	mov	r2, r0
  401314:	460b      	mov	r3, r1
  401316:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
  40131a:	1880      	adds	r0, r0, r2
  40131c:	4159      	adcs	r1, r3
  40131e:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  401322:	2f00      	cmp	r7, #0
  401324:	f001 82ac 	beq.w	402880 <.LCFI3+0x54>

00401328 <.LBB499>:
  401328:	e9dd 0100 	ldrd	r0, r1, [sp]
  40132c:	0843      	lsrs	r3, r0, #1
  40132e:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
  401332:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
  401336:	084b      	lsrs	r3, r1, #1
  401338:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
  40133c:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c

00401340 <.LBB501>:
  401340:	0a03      	lsrs	r3, r0, #8
  401342:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  401346:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
  40134a:	0a0b      	lsrs	r3, r1, #8
  40134c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  401350:	f8cd 3414 	str.w	r3, [sp, #1044]	; 0x414

00401354 <.LBE501>:
  401354:	f50d 6381 	add.w	r3, sp, #1032	; 0x408
  401358:	e9d3 2300 	ldrd	r2, r3, [r3]
  40135c:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
  401360:	e9d1 0100 	ldrd	r0, r1, [r1]
  401364:	4042      	eors	r2, r0
  401366:	404b      	eors	r3, r1
  401368:	9900      	ldr	r1, [sp, #0]
  40136a:	09c9      	lsrs	r1, r1, #7
  40136c:	9801      	ldr	r0, [sp, #4]
  40136e:	ea41 6140 	orr.w	r1, r1, r0, lsl #25
  401372:	914c      	str	r1, [sp, #304]	; 0x130
  401374:	09c1      	lsrs	r1, r0, #7
  401376:	914d      	str	r1, [sp, #308]	; 0x134
  401378:	a94c      	add	r1, sp, #304	; 0x130
  40137a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40137e:	4050      	eors	r0, r2
  401380:	4059      	eors	r1, r3
  401382:	4602      	mov	r2, r0
  401384:	460b      	mov	r3, r1
  401386:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40138a:	1880      	adds	r0, r0, r2
  40138c:	4159      	adcs	r1, r3
  40138e:	4602      	mov	r2, r0
  401390:	460b      	mov	r3, r1
  401392:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
  401396:	1880      	adds	r0, r0, r2
  401398:	4159      	adcs	r1, r3
  40139a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40

0040139e <.LBB503>:
  40139e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4013a2:	0cd1      	lsrs	r1, r2, #19
  4013a4:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
  4013a8:	f8cd 1418 	str.w	r1, [sp, #1048]	; 0x418
  4013ac:	0cd9      	lsrs	r1, r3, #19
  4013ae:	ea41 3142 	orr.w	r1, r1, r2, lsl #13
  4013b2:	f8cd 141c 	str.w	r1, [sp, #1052]	; 0x41c

004013b6 <.LBB505>:
  4013b6:	00d9      	lsls	r1, r3, #3
  4013b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
  4013bc:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
  4013c0:	00d1      	lsls	r1, r2, #3
  4013c2:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
  4013c6:	f8cd 1420 	str.w	r1, [sp, #1056]	; 0x420

004013ca <.LBE505>:
  4013ca:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
  4013ce:	e9d3 0100 	ldrd	r0, r1, [r3]
  4013d2:	f50d 6384 	add.w	r3, sp, #1056	; 0x420
  4013d6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4013da:	4050      	eors	r0, r2
  4013dc:	4059      	eors	r1, r3
  4013de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4013e0:	099b      	lsrs	r3, r3, #6
  4013e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4013e4:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
  4013e8:	934e      	str	r3, [sp, #312]	; 0x138
  4013ea:	0993      	lsrs	r3, r2, #6
  4013ec:	934f      	str	r3, [sp, #316]	; 0x13c
  4013ee:	ab4e      	add	r3, sp, #312	; 0x138
  4013f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4013f4:	4042      	eors	r2, r0
  4013f6:	404b      	eors	r3, r1
  4013f8:	4610      	mov	r0, r2
  4013fa:	4619      	mov	r1, r3
  4013fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  401400:	1812      	adds	r2, r2, r0
  401402:	414b      	adcs	r3, r1
  401404:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  401408:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  40140c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  401410:	1812      	adds	r2, r2, r0
  401412:	414b      	adcs	r3, r1
  401414:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  401418:	1880      	adds	r0, r0, r2
  40141a:	4159      	adcs	r1, r3
  40141c:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
  401420:	1902      	adds	r2, r0, r4
  401422:	eb41 0305 	adc.w	r3, r1, r5
  401426:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60

0040142a <.LBB507>:
  40142a:	ea4f 7318 	mov.w	r3, r8, lsr #28
  40142e:	ea43 1309 	orr.w	r3, r3, r9, lsl #4
  401432:	f8cd 3428 	str.w	r3, [sp, #1064]	; 0x428
  401436:	ea4f 7319 	mov.w	r3, r9, lsr #28
  40143a:	ea43 1308 	orr.w	r3, r3, r8, lsl #4
  40143e:	f8cd 342c 	str.w	r3, [sp, #1068]	; 0x42c

00401442 <.LBB509>:
  401442:	ea4f 7389 	mov.w	r3, r9, lsl #30
  401446:	ea43 0398 	orr.w	r3, r3, r8, lsr #2
  40144a:	f8cd 3434 	str.w	r3, [sp, #1076]	; 0x434
  40144e:	ea4f 7388 	mov.w	r3, r8, lsl #30
  401452:	ea43 0399 	orr.w	r3, r3, r9, lsr #2
  401456:	f8cd 3430 	str.w	r3, [sp, #1072]	; 0x430

0040145a <.LBE509>:
  40145a:	f50d 6385 	add.w	r3, sp, #1064	; 0x428
  40145e:	e9d3 1200 	ldrd	r1, r2, [r3]
  401462:	f50d 6386 	add.w	r3, sp, #1072	; 0x430
  401466:	e9d3 3400 	ldrd	r3, r4, [r3]
  40146a:	4059      	eors	r1, r3
  40146c:	4062      	eors	r2, r4
  40146e:	4613      	mov	r3, r2
  401470:	460a      	mov	r2, r1

00401472 <.LBB511>:
  401472:	ea4f 6149 	mov.w	r1, r9, lsl #25
  401476:	ea41 11d8 	orr.w	r1, r1, r8, lsr #7
  40147a:	f8cd 143c 	str.w	r1, [sp, #1084]	; 0x43c
  40147e:	ea4f 6148 	mov.w	r1, r8, lsl #25
  401482:	ea41 11d9 	orr.w	r1, r1, r9, lsr #7
  401486:	f8cd 1438 	str.w	r1, [sp, #1080]	; 0x438

0040148a <.LBE511>:
  40148a:	f50d 6187 	add.w	r1, sp, #1080	; 0x438
  40148e:	e9d1 0100 	ldrd	r0, r1, [r1]
  401492:	4050      	eors	r0, r2
  401494:	4059      	eors	r1, r3
  401496:	4602      	mov	r2, r0
  401498:	460b      	mov	r3, r1
  40149a:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
  40149e:	ea44 0008 	orr.w	r0, r4, r8
  4014a2:	ea45 0109 	orr.w	r1, r5, r9
  4014a6:	ea00 000a 	and.w	r0, r0, sl
  4014aa:	ea01 010b 	and.w	r1, r1, fp
  4014ae:	ea04 0408 	and.w	r4, r4, r8
  4014b2:	ea05 0509 	and.w	r5, r5, r9
  4014b6:	4320      	orrs	r0, r4
  4014b8:	4329      	orrs	r1, r5
  4014ba:	1880      	adds	r0, r0, r2
  4014bc:	4159      	adcs	r1, r3
  4014be:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
  4014c2:	181b      	adds	r3, r3, r0
  4014c4:	414c      	adcs	r4, r1
  4014c6:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68

004014ca <.LBB513>:
  4014ca:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
  4014ce:	0ba3      	lsrs	r3, r4, #14
  4014d0:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
  4014d4:	f8cd 3440 	str.w	r3, [sp, #1088]	; 0x440
  4014d8:	0bab      	lsrs	r3, r5, #14
  4014da:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
  4014de:	f8cd 3444 	str.w	r3, [sp, #1092]	; 0x444

004014e2 <.LBB515>:
  4014e2:	0ca3      	lsrs	r3, r4, #18
  4014e4:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
  4014e8:	f8cd 3448 	str.w	r3, [sp, #1096]	; 0x448
  4014ec:	0cab      	lsrs	r3, r5, #18
  4014ee:	ea43 3384 	orr.w	r3, r3, r4, lsl #14
  4014f2:	f8cd 344c 	str.w	r3, [sp, #1100]	; 0x44c

004014f6 <.LBE515>:
        R( 8); R( 9); R(10); R(11);
  4014f6:	f50d 6388 	add.w	r3, sp, #1088	; 0x440
  4014fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4014fe:	f50d 6189 	add.w	r1, sp, #1096	; 0x448
  401502:	e9d1 0100 	ldrd	r0, r1, [r1]
  401506:	4042      	eors	r2, r0
  401508:	404b      	eors	r3, r1

0040150a <.LBB517>:
  40150a:	05e9      	lsls	r1, r5, #23
  40150c:	ea41 2154 	orr.w	r1, r1, r4, lsr #9
  401510:	f8cd 1454 	str.w	r1, [sp, #1108]	; 0x454
  401514:	05e1      	lsls	r1, r4, #23
  401516:	ea41 2155 	orr.w	r1, r1, r5, lsr #9
  40151a:	f8cd 1450 	str.w	r1, [sp, #1104]	; 0x450

0040151e <.LBE517>:
  40151e:	f50d 618a 	add.w	r1, sp, #1104	; 0x450
  401522:	e9d1 0100 	ldrd	r0, r1, [r1]
  401526:	4050      	eors	r0, r2
  401528:	4059      	eors	r1, r3
  40152a:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  40152e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
  401532:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
  401536:	404b      	eors	r3, r1
  401538:	4054      	eors	r4, r2
  40153a:	4625      	mov	r5, r4
  40153c:	461c      	mov	r4, r3
  40153e:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  401542:	4022      	ands	r2, r4
  401544:	402b      	ands	r3, r5
  401546:	4614      	mov	r4, r2
  401548:	461d      	mov	r5, r3
  40154a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40154e:	4062      	eors	r2, r4
  401550:	406b      	eors	r3, r5
  401552:	4614      	mov	r4, r2
  401554:	461d      	mov	r5, r3
  401556:	e9d6 2310 	ldrd	r2, r3, [r6, #64]	; 0x40
  40155a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40155e:	1880      	adds	r0, r0, r2
  401560:	4159      	adcs	r1, r3
  401562:	1820      	adds	r0, r4, r0
  401564:	eb45 0101 	adc.w	r1, r5, r1
  401568:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40156c:	2f00      	cmp	r7, #0
  40156e:	f001 818d 	beq.w	40288c <.LCFI3+0x60>

00401572 <.LBB519>:
  401572:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
  401576:	0863      	lsrs	r3, r4, #1
  401578:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
  40157c:	f8cd 3458 	str.w	r3, [sp, #1112]	; 0x458
  401580:	086b      	lsrs	r3, r5, #1
  401582:	ea43 73c4 	orr.w	r3, r3, r4, lsl #31
  401586:	f8cd 345c 	str.w	r3, [sp, #1116]	; 0x45c

0040158a <.LBB521>:
  40158a:	0a23      	lsrs	r3, r4, #8
  40158c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  401590:	f8cd 3460 	str.w	r3, [sp, #1120]	; 0x460
  401594:	0a2b      	lsrs	r3, r5, #8
  401596:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  40159a:	f8cd 3464 	str.w	r3, [sp, #1124]	; 0x464

0040159e <.LBE521>:
  40159e:	f50d 638b 	add.w	r3, sp, #1112	; 0x458
  4015a2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4015a6:	f50d 618c 	add.w	r1, sp, #1120	; 0x460
  4015aa:	e9d1 0100 	ldrd	r0, r1, [r1]
  4015ae:	4042      	eors	r2, r0
  4015b0:	404b      	eors	r3, r1
  4015b2:	09e1      	lsrs	r1, r4, #7
  4015b4:	ea41 6145 	orr.w	r1, r1, r5, lsl #25
  4015b8:	9150      	str	r1, [sp, #320]	; 0x140
  4015ba:	09e9      	lsrs	r1, r5, #7
  4015bc:	9151      	str	r1, [sp, #324]	; 0x144
  4015be:	a950      	add	r1, sp, #320	; 0x140
  4015c0:	e9d1 0100 	ldrd	r0, r1, [r1]
  4015c4:	4050      	eors	r0, r2
  4015c6:	4059      	eors	r1, r3
  4015c8:	4602      	mov	r2, r0
  4015ca:	460b      	mov	r3, r1
  4015cc:	e9dd 0100 	ldrd	r0, r1, [sp]
  4015d0:	1880      	adds	r0, r0, r2
  4015d2:	4159      	adcs	r1, r3
  4015d4:	4602      	mov	r2, r0
  4015d6:	460b      	mov	r3, r1
  4015d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4015dc:	1880      	adds	r0, r0, r2
  4015de:	4159      	adcs	r1, r3
  4015e0:	e9cd 0100 	strd	r0, r1, [sp]

004015e4 <.LBB523>:
  4015e4:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
  4015e8:	0ce1      	lsrs	r1, r4, #19
  4015ea:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
  4015ee:	f8cd 1468 	str.w	r1, [sp, #1128]	; 0x468
  4015f2:	0ce9      	lsrs	r1, r5, #19
  4015f4:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
  4015f8:	f8cd 146c 	str.w	r1, [sp, #1132]	; 0x46c

004015fc <.LBB525>:
  4015fc:	00e9      	lsls	r1, r5, #3
  4015fe:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
  401602:	f8cd 1474 	str.w	r1, [sp, #1140]	; 0x474
  401606:	00e1      	lsls	r1, r4, #3
  401608:	ea41 7155 	orr.w	r1, r1, r5, lsr #29
  40160c:	f8cd 1470 	str.w	r1, [sp, #1136]	; 0x470

00401610 <.LBE525>:
  401610:	f50d 638d 	add.w	r3, sp, #1128	; 0x468
  401614:	e9d3 0100 	ldrd	r0, r1, [r3]
  401618:	f50d 638e 	add.w	r3, sp, #1136	; 0x470
  40161c:	e9d3 2300 	ldrd	r2, r3, [r3]
  401620:	4050      	eors	r0, r2
  401622:	4059      	eors	r1, r3
  401624:	09a4      	lsrs	r4, r4, #6
  401626:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  401628:	ea44 6485 	orr.w	r4, r4, r5, lsl #26
  40162c:	9452      	str	r4, [sp, #328]	; 0x148
  40162e:	09ac      	lsrs	r4, r5, #6
  401630:	9453      	str	r4, [sp, #332]	; 0x14c
  401632:	ab52      	add	r3, sp, #328	; 0x148
  401634:	e9d3 4500 	ldrd	r4, r5, [r3]
  401638:	4044      	eors	r4, r0
  40163a:	404d      	eors	r5, r1
  40163c:	4620      	mov	r0, r4
  40163e:	e9dd 3400 	ldrd	r3, r4, [sp]
  401642:	181b      	adds	r3, r3, r0
  401644:	416c      	adcs	r4, r5
  401646:	e9cd 3400 	strd	r3, r4, [sp]
  40164a:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  40164e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  401652:	1912      	adds	r2, r2, r4
  401654:	416b      	adcs	r3, r5
  401656:	4614      	mov	r4, r2
  401658:	461d      	mov	r5, r3
  40165a:	e9dd 2300 	ldrd	r2, r3, [sp]
  40165e:	1912      	adds	r2, r2, r4
  401660:	416b      	adcs	r3, r5
  401662:	461c      	mov	r4, r3
  401664:	4613      	mov	r3, r2
  401666:	e9cd 3406 	strd	r3, r4, [sp, #24]
  40166a:	eb12 020a 	adds.w	r2, r2, sl
  40166e:	eb44 030b 	adc.w	r3, r4, fp
  401672:	4692      	mov	sl, r2
  401674:	469b      	mov	fp, r3

00401676 <.LBB527>:
  401676:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
  40167a:	0f23      	lsrs	r3, r4, #28
  40167c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  401680:	f8cd 3478 	str.w	r3, [sp, #1144]	; 0x478
  401684:	0f2b      	lsrs	r3, r5, #28
  401686:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  40168a:	f8cd 347c 	str.w	r3, [sp, #1148]	; 0x47c

0040168e <.LBB529>:
  40168e:	07ab      	lsls	r3, r5, #30
  401690:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  401694:	f8cd 3484 	str.w	r3, [sp, #1156]	; 0x484
  401698:	07a3      	lsls	r3, r4, #30
  40169a:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  40169e:	f8cd 3480 	str.w	r3, [sp, #1152]	; 0x480

004016a2 <.LBE529>:
  4016a2:	f50d 638f 	add.w	r3, sp, #1144	; 0x478
  4016a6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4016aa:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
  4016ae:	e9d1 0100 	ldrd	r0, r1, [r1]
  4016b2:	4042      	eors	r2, r0
  4016b4:	404b      	eors	r3, r1

004016b6 <.LBB531>:
  4016b6:	0669      	lsls	r1, r5, #25
  4016b8:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  4016bc:	f8cd 148c 	str.w	r1, [sp, #1164]	; 0x48c
  4016c0:	0661      	lsls	r1, r4, #25
  4016c2:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  4016c6:	f8cd 1488 	str.w	r1, [sp, #1160]	; 0x488

004016ca <.LBE531>:
  4016ca:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
  4016ce:	e9d1 0100 	ldrd	r0, r1, [r1]
  4016d2:	4050      	eors	r0, r2
  4016d4:	4059      	eors	r1, r3
  4016d6:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  4016da:	ea44 0008 	orr.w	r0, r4, r8
  4016de:	ea45 0109 	orr.w	r1, r5, r9
  4016e2:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  4016e6:	4002      	ands	r2, r0
  4016e8:	400b      	ands	r3, r1
  4016ea:	ea04 0408 	and.w	r4, r4, r8
  4016ee:	ea05 0509 	and.w	r5, r5, r9
  4016f2:	4314      	orrs	r4, r2
  4016f4:	431d      	orrs	r5, r3
  4016f6:	4620      	mov	r0, r4
  4016f8:	4629      	mov	r1, r5
  4016fa:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  4016fe:	1824      	adds	r4, r4, r0
  401700:	414d      	adcs	r5, r1
  401702:	4620      	mov	r0, r4
  401704:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
  401708:	181b      	adds	r3, r3, r0
  40170a:	416c      	adcs	r4, r5
  40170c:	e9cd 3406 	strd	r3, r4, [sp, #24]

00401710 <.LBB533>:
  401710:	ea4f 339a 	mov.w	r3, sl, lsr #14
  401714:	ea43 438b 	orr.w	r3, r3, fp, lsl #18
  401718:	f8cd 3490 	str.w	r3, [sp, #1168]	; 0x490
  40171c:	ea4f 339b 	mov.w	r3, fp, lsr #14
  401720:	ea43 438a 	orr.w	r3, r3, sl, lsl #18
  401724:	f8cd 3494 	str.w	r3, [sp, #1172]	; 0x494

00401728 <.LBB535>:
  401728:	ea4f 439a 	mov.w	r3, sl, lsr #18
  40172c:	ea43 338b 	orr.w	r3, r3, fp, lsl #14
  401730:	f8cd 3498 	str.w	r3, [sp, #1176]	; 0x498
  401734:	ea4f 439b 	mov.w	r3, fp, lsr #18
  401738:	ea43 338a 	orr.w	r3, r3, sl, lsl #14
  40173c:	f8cd 349c 	str.w	r3, [sp, #1180]	; 0x49c

00401740 <.LBE535>:
  401740:	f50d 6392 	add.w	r3, sp, #1168	; 0x490
  401744:	e9d3 2300 	ldrd	r2, r3, [r3]
  401748:	f50d 6193 	add.w	r1, sp, #1176	; 0x498
  40174c:	e9d1 0100 	ldrd	r0, r1, [r1]
  401750:	4042      	eors	r2, r0
  401752:	404b      	eors	r3, r1

00401754 <.LBB537>:
  401754:	ea4f 51cb 	mov.w	r1, fp, lsl #23
  401758:	ea41 215a 	orr.w	r1, r1, sl, lsr #9
  40175c:	f8cd 14a4 	str.w	r1, [sp, #1188]	; 0x4a4
  401760:	ea4f 51ca 	mov.w	r1, sl, lsl #23
  401764:	ea41 215b 	orr.w	r1, r1, fp, lsr #9
  401768:	f8cd 14a0 	str.w	r1, [sp, #1184]	; 0x4a0

0040176c <.LBE537>:
  40176c:	f50d 6194 	add.w	r1, sp, #1184	; 0x4a0
  401770:	e9d1 0100 	ldrd	r0, r1, [r1]
  401774:	4050      	eors	r0, r2
  401776:	4059      	eors	r1, r3
  401778:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  40177c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401780:	4614      	mov	r4, r2
  401782:	461d      	mov	r5, r3
  401784:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
  401788:	4044      	eors	r4, r0
  40178a:	404d      	eors	r5, r1
  40178c:	ea04 040a 	and.w	r4, r4, sl
  401790:	ea05 050b 	and.w	r5, r5, fp
  401794:	4062      	eors	r2, r4
  401796:	406b      	eors	r3, r5
  401798:	4614      	mov	r4, r2
  40179a:	461d      	mov	r5, r3
  40179c:	e9d6 2312 	ldrd	r2, r3, [r6, #72]	; 0x48
  4017a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4017a4:	1880      	adds	r0, r0, r2
  4017a6:	4159      	adcs	r1, r3
  4017a8:	1820      	adds	r0, r4, r0
  4017aa:	eb45 0101 	adc.w	r1, r5, r1
  4017ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4017b2:	2f00      	cmp	r7, #0
  4017b4:	f001 8070 	beq.w	402898 <.LCFI3+0x6c>

004017b8 <.LBB539>:
  4017b8:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
  4017bc:	0863      	lsrs	r3, r4, #1
  4017be:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
  4017c2:	f8cd 34a8 	str.w	r3, [sp, #1192]	; 0x4a8
  4017c6:	086b      	lsrs	r3, r5, #1
  4017c8:	ea43 73c4 	orr.w	r3, r3, r4, lsl #31
  4017cc:	f8cd 34ac 	str.w	r3, [sp, #1196]	; 0x4ac

004017d0 <.LBB541>:
  4017d0:	0a23      	lsrs	r3, r4, #8
  4017d2:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  4017d6:	f8cd 34b0 	str.w	r3, [sp, #1200]	; 0x4b0
  4017da:	0a2b      	lsrs	r3, r5, #8
  4017dc:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  4017e0:	f8cd 34b4 	str.w	r3, [sp, #1204]	; 0x4b4

004017e4 <.LBE541>:
  4017e4:	f50d 6395 	add.w	r3, sp, #1192	; 0x4a8
  4017e8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4017ec:	f50d 6196 	add.w	r1, sp, #1200	; 0x4b0
  4017f0:	e9d1 0100 	ldrd	r0, r1, [r1]
  4017f4:	4042      	eors	r2, r0
  4017f6:	404b      	eors	r3, r1
  4017f8:	09e1      	lsrs	r1, r4, #7
  4017fa:	ea41 6145 	orr.w	r1, r1, r5, lsl #25
  4017fe:	9154      	str	r1, [sp, #336]	; 0x150
  401800:	09e9      	lsrs	r1, r5, #7
  401802:	9155      	str	r1, [sp, #340]	; 0x154
  401804:	a954      	add	r1, sp, #336	; 0x150
  401806:	e9d1 0100 	ldrd	r0, r1, [r1]
  40180a:	4050      	eors	r0, r2
  40180c:	4059      	eors	r1, r3
  40180e:	4602      	mov	r2, r0
  401810:	460b      	mov	r3, r1
  401812:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  401816:	1880      	adds	r0, r0, r2
  401818:	4159      	adcs	r1, r3
  40181a:	4602      	mov	r2, r0
  40181c:	460b      	mov	r3, r1
  40181e:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
  401822:	1880      	adds	r0, r0, r2
  401824:	4159      	adcs	r1, r3
  401826:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48

0040182a <.LBB543>:
  40182a:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
  40182e:	0ce1      	lsrs	r1, r4, #19
  401830:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
  401834:	f8cd 14b8 	str.w	r1, [sp, #1208]	; 0x4b8
  401838:	0ce9      	lsrs	r1, r5, #19
  40183a:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
  40183e:	f8cd 14bc 	str.w	r1, [sp, #1212]	; 0x4bc

00401842 <.LBB545>:
  401842:	00e9      	lsls	r1, r5, #3
  401844:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
  401848:	f8cd 14c4 	str.w	r1, [sp, #1220]	; 0x4c4
  40184c:	00e1      	lsls	r1, r4, #3
  40184e:	ea41 7155 	orr.w	r1, r1, r5, lsr #29
  401852:	f8cd 14c0 	str.w	r1, [sp, #1216]	; 0x4c0

00401856 <.LBE545>:
  401856:	f50d 6397 	add.w	r3, sp, #1208	; 0x4b8
  40185a:	e9d3 0100 	ldrd	r0, r1, [r3]
  40185e:	f50d 6398 	add.w	r3, sp, #1216	; 0x4c0
  401862:	e9d3 2300 	ldrd	r2, r3, [r3]
  401866:	4050      	eors	r0, r2
  401868:	4059      	eors	r1, r3
  40186a:	09a4      	lsrs	r4, r4, #6
  40186c:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40186e:	ea44 6485 	orr.w	r4, r4, r5, lsl #26
  401872:	9456      	str	r4, [sp, #344]	; 0x158
  401874:	09ac      	lsrs	r4, r5, #6
  401876:	9457      	str	r4, [sp, #348]	; 0x15c
  401878:	ab56      	add	r3, sp, #344	; 0x158
  40187a:	e9d3 4500 	ldrd	r4, r5, [r3]
  40187e:	4044      	eors	r4, r0
  401880:	404d      	eors	r5, r1
  401882:	4620      	mov	r0, r4
  401884:	e9dd 3412 	ldrd	r3, r4, [sp, #72]	; 0x48
  401888:	181b      	adds	r3, r3, r0
  40188a:	416c      	adcs	r4, r5
  40188c:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
  401890:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  401894:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  401898:	1912      	adds	r2, r2, r4
  40189a:	416b      	adcs	r3, r5
  40189c:	4614      	mov	r4, r2
  40189e:	461d      	mov	r5, r3
  4018a0:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  4018a4:	1912      	adds	r2, r2, r4
  4018a6:	416b      	adcs	r3, r5
  4018a8:	4610      	mov	r0, r2
  4018aa:	4619      	mov	r1, r3
  4018ac:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  4018b0:	e9cd 012a 	strd	r0, r1, [sp, #168]	; 0xa8
  4018b4:	1880      	adds	r0, r0, r2
  4018b6:	4159      	adcs	r1, r3
  4018b8:	4602      	mov	r2, r0
  4018ba:	460b      	mov	r3, r1
  4018bc:	e9cd 2304 	strd	r2, r3, [sp, #16]

004018c0 <.LBB547>:
  4018c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4018c4:	0f03      	lsrs	r3, r0, #28
  4018c6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  4018ca:	f8cd 34c8 	str.w	r3, [sp, #1224]	; 0x4c8
  4018ce:	0f0b      	lsrs	r3, r1, #28
  4018d0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  4018d4:	f8cd 34cc 	str.w	r3, [sp, #1228]	; 0x4cc

004018d8 <.LBB549>:
  4018d8:	078b      	lsls	r3, r1, #30
  4018da:	ea43 0390 	orr.w	r3, r3, r0, lsr #2
  4018de:	f8cd 34d4 	str.w	r3, [sp, #1236]	; 0x4d4
  4018e2:	0783      	lsls	r3, r0, #30
  4018e4:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  4018e8:	f8cd 34d0 	str.w	r3, [sp, #1232]	; 0x4d0

004018ec <.LBE549>:
  4018ec:	f50d 6399 	add.w	r3, sp, #1224	; 0x4c8
  4018f0:	e9d3 3400 	ldrd	r3, r4, [r3]
  4018f4:	f50d 629a 	add.w	r2, sp, #1232	; 0x4d0
  4018f8:	e9d2 1200 	ldrd	r1, r2, [r2]
  4018fc:	404b      	eors	r3, r1
  4018fe:	4054      	eors	r4, r2
  401900:	461a      	mov	r2, r3
  401902:	4623      	mov	r3, r4

00401904 <.LBB551>:
  401904:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
  401908:	0669      	lsls	r1, r5, #25
  40190a:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  40190e:	f8cd 14dc 	str.w	r1, [sp, #1244]	; 0x4dc
  401912:	0661      	lsls	r1, r4, #25
  401914:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  401918:	f8cd 14d8 	str.w	r1, [sp, #1240]	; 0x4d8

0040191c <.LBE551>:
  40191c:	f50d 619b 	add.w	r1, sp, #1240	; 0x4d8
  401920:	e9d1 0100 	ldrd	r0, r1, [r1]
  401924:	4050      	eors	r0, r2
  401926:	4059      	eors	r1, r3
  401928:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  40192c:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  401930:	4322      	orrs	r2, r4
  401932:	432b      	orrs	r3, r5
  401934:	ea02 0208 	and.w	r2, r2, r8
  401938:	ea03 0309 	and.w	r3, r3, r9
  40193c:	e9cd 232e 	strd	r2, r3, [sp, #184]	; 0xb8
  401940:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
  401944:	4623      	mov	r3, r4
  401946:	4019      	ands	r1, r3
  401948:	402a      	ands	r2, r5
  40194a:	4608      	mov	r0, r1
  40194c:	e9dd 452e 	ldrd	r4, r5, [sp, #184]	; 0xb8
  401950:	4304      	orrs	r4, r0
  401952:	4315      	orrs	r5, r2
  401954:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
  401958:	1912      	adds	r2, r2, r4
  40195a:	416b      	adcs	r3, r5
  40195c:	4619      	mov	r1, r3
  40195e:	e9dd 342a 	ldrd	r3, r4, [sp, #168]	; 0xa8
  401962:	189b      	adds	r3, r3, r2
  401964:	414c      	adcs	r4, r1
  401966:	e9cd 342a 	strd	r3, r4, [sp, #168]	; 0xa8

0040196a <.LBB553>:
  40196a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  40196e:	0ba3      	lsrs	r3, r4, #14
  401970:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
  401974:	f8cd 34e0 	str.w	r3, [sp, #1248]	; 0x4e0
  401978:	0bab      	lsrs	r3, r5, #14
  40197a:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
  40197e:	f8cd 34e4 	str.w	r3, [sp, #1252]	; 0x4e4

00401982 <.LBB555>:
  401982:	0ca3      	lsrs	r3, r4, #18
  401984:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
  401988:	f8cd 34e8 	str.w	r3, [sp, #1256]	; 0x4e8
  40198c:	0cab      	lsrs	r3, r5, #18
  40198e:	ea43 3384 	orr.w	r3, r3, r4, lsl #14
  401992:	f8cd 34ec 	str.w	r3, [sp, #1260]	; 0x4ec

00401996 <.LBE555>:
  401996:	f50d 639c 	add.w	r3, sp, #1248	; 0x4e0
  40199a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40199e:	f50d 619d 	add.w	r1, sp, #1256	; 0x4e8
  4019a2:	e9d1 0100 	ldrd	r0, r1, [r1]
  4019a6:	4042      	eors	r2, r0
  4019a8:	404b      	eors	r3, r1

004019aa <.LBB557>:
  4019aa:	05e9      	lsls	r1, r5, #23
  4019ac:	ea41 2154 	orr.w	r1, r1, r4, lsr #9
  4019b0:	f8cd 14f4 	str.w	r1, [sp, #1268]	; 0x4f4
  4019b4:	05e1      	lsls	r1, r4, #23
  4019b6:	ea41 2155 	orr.w	r1, r1, r5, lsr #9
  4019ba:	f8cd 14f0 	str.w	r1, [sp, #1264]	; 0x4f0

004019be <.LBE557>:
  4019be:	f50d 619e 	add.w	r1, sp, #1264	; 0x4f0
  4019c2:	e9d1 0100 	ldrd	r0, r1, [r1]
  4019c6:	4050      	eors	r0, r2
  4019c8:	4059      	eors	r1, r3
  4019ca:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  4019ce:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
  4019d2:	ea80 030a 	eor.w	r3, r0, sl
  4019d6:	ea81 040b 	eor.w	r4, r1, fp
  4019da:	4625      	mov	r5, r4
  4019dc:	461c      	mov	r4, r3
  4019de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4019e2:	4022      	ands	r2, r4
  4019e4:	402b      	ands	r3, r5
  4019e6:	4614      	mov	r4, r2
  4019e8:	461d      	mov	r5, r3
  4019ea:	4602      	mov	r2, r0
  4019ec:	460b      	mov	r3, r1
  4019ee:	4062      	eors	r2, r4
  4019f0:	406b      	eors	r3, r5
  4019f2:	4614      	mov	r4, r2
  4019f4:	461d      	mov	r5, r3
  4019f6:	e9d6 2314 	ldrd	r2, r3, [r6, #80]	; 0x50
  4019fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4019fe:	1880      	adds	r0, r0, r2
  401a00:	4159      	adcs	r1, r3
  401a02:	1820      	adds	r0, r4, r0
  401a04:	eb45 0101 	adc.w	r1, r5, r1
  401a08:	e9cd 0102 	strd	r0, r1, [sp, #8]
  401a0c:	2f00      	cmp	r7, #0
  401a0e:	f000 8749 	beq.w	4028a4 <.LCFI3+0x78>

00401a12 <.LBB559>:
  401a12:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
  401a16:	0863      	lsrs	r3, r4, #1
  401a18:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
  401a1c:	f8cd 34f8 	str.w	r3, [sp, #1272]	; 0x4f8
  401a20:	086b      	lsrs	r3, r5, #1
  401a22:	ea43 73c4 	orr.w	r3, r3, r4, lsl #31
  401a26:	f8cd 34fc 	str.w	r3, [sp, #1276]	; 0x4fc

00401a2a <.LBB561>:
  401a2a:	0a23      	lsrs	r3, r4, #8
  401a2c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  401a30:	f8cd 3500 	str.w	r3, [sp, #1280]	; 0x500
  401a34:	0a2b      	lsrs	r3, r5, #8
  401a36:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  401a3a:	f8cd 3504 	str.w	r3, [sp, #1284]	; 0x504

00401a3e <.LBE561>:
  401a3e:	f50d 639f 	add.w	r3, sp, #1272	; 0x4f8
  401a42:	e9d3 2300 	ldrd	r2, r3, [r3]
  401a46:	f50d 61a0 	add.w	r1, sp, #1280	; 0x500
  401a4a:	e9d1 0100 	ldrd	r0, r1, [r1]
  401a4e:	4042      	eors	r2, r0
  401a50:	404b      	eors	r3, r1
  401a52:	09e1      	lsrs	r1, r4, #7
  401a54:	ea41 6145 	orr.w	r1, r1, r5, lsl #25
  401a58:	9158      	str	r1, [sp, #352]	; 0x160
  401a5a:	09e9      	lsrs	r1, r5, #7
  401a5c:	9159      	str	r1, [sp, #356]	; 0x164
  401a5e:	a958      	add	r1, sp, #352	; 0x160
  401a60:	e9d1 0100 	ldrd	r0, r1, [r1]
  401a64:	4050      	eors	r0, r2
  401a66:	4059      	eors	r1, r3
  401a68:	4602      	mov	r2, r0
  401a6a:	460b      	mov	r3, r1
  401a6c:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
  401a70:	1880      	adds	r0, r0, r2
  401a72:	4159      	adcs	r1, r3
  401a74:	4602      	mov	r2, r0
  401a76:	460b      	mov	r3, r1
  401a78:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  401a7c:	1880      	adds	r0, r0, r2
  401a7e:	4159      	adcs	r1, r3
  401a80:	e9cd 0124 	strd	r0, r1, [sp, #144]	; 0x90

00401a84 <.LBB563>:
  401a84:	e9dd 4500 	ldrd	r4, r5, [sp]
  401a88:	0ce1      	lsrs	r1, r4, #19
  401a8a:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
  401a8e:	f8cd 1508 	str.w	r1, [sp, #1288]	; 0x508
  401a92:	0ce9      	lsrs	r1, r5, #19
  401a94:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
  401a98:	f8cd 150c 	str.w	r1, [sp, #1292]	; 0x50c

00401a9c <.LBB565>:
  401a9c:	00e9      	lsls	r1, r5, #3
  401a9e:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
  401aa2:	f8cd 1514 	str.w	r1, [sp, #1300]	; 0x514
  401aa6:	00e1      	lsls	r1, r4, #3
  401aa8:	ea41 7155 	orr.w	r1, r1, r5, lsr #29
  401aac:	f8cd 1510 	str.w	r1, [sp, #1296]	; 0x510

00401ab0 <.LBE565>:
  401ab0:	f50d 63a1 	add.w	r3, sp, #1288	; 0x508
  401ab4:	e9d3 0100 	ldrd	r0, r1, [r3]
  401ab8:	f50d 63a2 	add.w	r3, sp, #1296	; 0x510
  401abc:	e9d3 2300 	ldrd	r2, r3, [r3]
  401ac0:	4050      	eors	r0, r2
  401ac2:	4059      	eors	r1, r3
  401ac4:	09a4      	lsrs	r4, r4, #6
  401ac6:	9d01      	ldr	r5, [sp, #4]
  401ac8:	ea44 6485 	orr.w	r4, r4, r5, lsl #26
  401acc:	945a      	str	r4, [sp, #360]	; 0x168
  401ace:	09ac      	lsrs	r4, r5, #6
  401ad0:	945b      	str	r4, [sp, #364]	; 0x16c
  401ad2:	ab5a      	add	r3, sp, #360	; 0x168
  401ad4:	e9d3 4500 	ldrd	r4, r5, [r3]
  401ad8:	4044      	eors	r4, r0
  401ada:	404d      	eors	r5, r1
  401adc:	4620      	mov	r0, r4
  401ade:	e9dd 3424 	ldrd	r3, r4, [sp, #144]	; 0x90
  401ae2:	181b      	adds	r3, r3, r0
  401ae4:	416c      	adcs	r4, r5
  401ae6:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
  401aea:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  401aee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401af2:	1912      	adds	r2, r2, r4
  401af4:	416b      	adcs	r3, r5
  401af6:	4614      	mov	r4, r2
  401af8:	461d      	mov	r5, r3
  401afa:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
  401afe:	1912      	adds	r2, r2, r4
  401b00:	416b      	adcs	r3, r5
  401b02:	461c      	mov	r4, r3
  401b04:	4613      	mov	r3, r2
  401b06:	e9cd 3402 	strd	r3, r4, [sp, #8]
  401b0a:	eb12 0208 	adds.w	r2, r2, r8
  401b0e:	eb44 0309 	adc.w	r3, r4, r9
  401b12:	4690      	mov	r8, r2
  401b14:	4699      	mov	r9, r3

00401b16 <.LBB567>:
  401b16:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
  401b1a:	0f23      	lsrs	r3, r4, #28
  401b1c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  401b20:	f8cd 3518 	str.w	r3, [sp, #1304]	; 0x518
  401b24:	0f2b      	lsrs	r3, r5, #28
  401b26:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  401b2a:	f8cd 351c 	str.w	r3, [sp, #1308]	; 0x51c

00401b2e <.LBB569>:
  401b2e:	07ab      	lsls	r3, r5, #30
  401b30:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  401b34:	f8cd 3524 	str.w	r3, [sp, #1316]	; 0x524
  401b38:	07a3      	lsls	r3, r4, #30
  401b3a:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  401b3e:	f8cd 3520 	str.w	r3, [sp, #1312]	; 0x520

00401b42 <.LBE569>:
  401b42:	f50d 63a3 	add.w	r3, sp, #1304	; 0x518
  401b46:	e9d3 2300 	ldrd	r2, r3, [r3]
  401b4a:	f50d 61a4 	add.w	r1, sp, #1312	; 0x520
  401b4e:	e9d1 0100 	ldrd	r0, r1, [r1]
  401b52:	4042      	eors	r2, r0
  401b54:	404b      	eors	r3, r1

00401b56 <.LBB571>:
  401b56:	0669      	lsls	r1, r5, #25
  401b58:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  401b5c:	f8cd 152c 	str.w	r1, [sp, #1324]	; 0x52c
  401b60:	0661      	lsls	r1, r4, #25
  401b62:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  401b66:	f8cd 1528 	str.w	r1, [sp, #1320]	; 0x528

00401b6a <.LBE571>:
  401b6a:	f50d 61a5 	add.w	r1, sp, #1320	; 0x528
  401b6e:	e9d1 0100 	ldrd	r0, r1, [r1]
  401b72:	4050      	eors	r0, r2
  401b74:	4059      	eors	r1, r3
  401b76:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  401b7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  401b7e:	4322      	orrs	r2, r4
  401b80:	432b      	orrs	r3, r5
  401b82:	4610      	mov	r0, r2
  401b84:	4619      	mov	r1, r3
  401b86:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  401b8a:	4002      	ands	r2, r0
  401b8c:	400b      	ands	r3, r1
  401b8e:	4610      	mov	r0, r2
  401b90:	4619      	mov	r1, r3
  401b92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  401b96:	4022      	ands	r2, r4
  401b98:	402b      	ands	r3, r5
  401b9a:	4302      	orrs	r2, r0
  401b9c:	430b      	orrs	r3, r1
  401b9e:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  401ba2:	18a4      	adds	r4, r4, r2
  401ba4:	415d      	adcs	r5, r3
  401ba6:	4620      	mov	r0, r4
  401ba8:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
  401bac:	181b      	adds	r3, r3, r0
  401bae:	416c      	adcs	r4, r5
  401bb0:	e9cd 3402 	strd	r3, r4, [sp, #8]

00401bb4 <.LBB573>:
  401bb4:	ea4f 3398 	mov.w	r3, r8, lsr #14
  401bb8:	ea43 4389 	orr.w	r3, r3, r9, lsl #18
  401bbc:	f8cd 3530 	str.w	r3, [sp, #1328]	; 0x530
  401bc0:	ea4f 3399 	mov.w	r3, r9, lsr #14
  401bc4:	ea43 4388 	orr.w	r3, r3, r8, lsl #18
  401bc8:	f8cd 3534 	str.w	r3, [sp, #1332]	; 0x534

00401bcc <.LBB575>:
  401bcc:	ea4f 4398 	mov.w	r3, r8, lsr #18
  401bd0:	ea43 3389 	orr.w	r3, r3, r9, lsl #14
  401bd4:	f8cd 3538 	str.w	r3, [sp, #1336]	; 0x538
  401bd8:	ea4f 4399 	mov.w	r3, r9, lsr #18
  401bdc:	ea43 3388 	orr.w	r3, r3, r8, lsl #14
  401be0:	f8cd 353c 	str.w	r3, [sp, #1340]	; 0x53c

00401be4 <.LBE575>:
  401be4:	f50d 63a6 	add.w	r3, sp, #1328	; 0x530
  401be8:	e9d3 2300 	ldrd	r2, r3, [r3]
  401bec:	f50d 61a7 	add.w	r1, sp, #1336	; 0x538
  401bf0:	e9d1 0100 	ldrd	r0, r1, [r1]
  401bf4:	4042      	eors	r2, r0
  401bf6:	404b      	eors	r3, r1

00401bf8 <.LBB577>:
  401bf8:	ea4f 51c9 	mov.w	r1, r9, lsl #23
  401bfc:	ea41 2158 	orr.w	r1, r1, r8, lsr #9
  401c00:	f8cd 1544 	str.w	r1, [sp, #1348]	; 0x544
  401c04:	ea4f 51c8 	mov.w	r1, r8, lsl #23
  401c08:	ea41 2159 	orr.w	r1, r1, r9, lsr #9
  401c0c:	f8cd 1540 	str.w	r1, [sp, #1344]	; 0x540

00401c10 <.LBE577>:
  401c10:	f50d 61a8 	add.w	r1, sp, #1344	; 0x540
  401c14:	e9d1 0100 	ldrd	r0, r1, [r1]
  401c18:	4050      	eors	r0, r2
  401c1a:	4059      	eors	r1, r3
  401c1c:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  401c20:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  401c24:	ea84 040a 	eor.w	r4, r4, sl
  401c28:	ea85 050b 	eor.w	r5, r5, fp
  401c2c:	ea04 0408 	and.w	r4, r4, r8
  401c30:	ea05 0509 	and.w	r5, r5, r9
  401c34:	ea84 040a 	eor.w	r4, r4, sl
  401c38:	ea85 050b 	eor.w	r5, r5, fp
  401c3c:	e9d6 2316 	ldrd	r2, r3, [r6, #88]	; 0x58
  401c40:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
  401c44:	1880      	adds	r0, r0, r2
  401c46:	4159      	adcs	r1, r3
  401c48:	1820      	adds	r0, r4, r0
  401c4a:	eb45 0101 	adc.w	r1, r5, r1
  401c4e:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  401c52:	2f00      	cmp	r7, #0
  401c54:	f000 862c 	beq.w	4028b0 <.LCFI3+0x84>

00401c58 <.LBB579>:
  401c58:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  401c5c:	0863      	lsrs	r3, r4, #1
  401c5e:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
  401c62:	f8cd 3548 	str.w	r3, [sp, #1352]	; 0x548
  401c66:	086b      	lsrs	r3, r5, #1
  401c68:	ea43 73c4 	orr.w	r3, r3, r4, lsl #31
  401c6c:	f8cd 354c 	str.w	r3, [sp, #1356]	; 0x54c

00401c70 <.LBB581>:
  401c70:	0a23      	lsrs	r3, r4, #8
  401c72:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  401c76:	f8cd 3550 	str.w	r3, [sp, #1360]	; 0x550
  401c7a:	0a2b      	lsrs	r3, r5, #8
  401c7c:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  401c80:	f8cd 3554 	str.w	r3, [sp, #1364]	; 0x554

00401c84 <.LBE581>:
  401c84:	f50d 63a9 	add.w	r3, sp, #1352	; 0x548
  401c88:	e9d3 2300 	ldrd	r2, r3, [r3]
  401c8c:	f50d 61aa 	add.w	r1, sp, #1360	; 0x550
  401c90:	e9d1 0100 	ldrd	r0, r1, [r1]
  401c94:	4042      	eors	r2, r0
  401c96:	404b      	eors	r3, r1
  401c98:	09e1      	lsrs	r1, r4, #7
  401c9a:	ea41 6145 	orr.w	r1, r1, r5, lsl #25
  401c9e:	915c      	str	r1, [sp, #368]	; 0x170
  401ca0:	09e9      	lsrs	r1, r5, #7
  401ca2:	915d      	str	r1, [sp, #372]	; 0x174
  401ca4:	a95c      	add	r1, sp, #368	; 0x170
  401ca6:	e9d1 0100 	ldrd	r0, r1, [r1]
  401caa:	4050      	eors	r0, r2
  401cac:	4059      	eors	r1, r3
  401cae:	4602      	mov	r2, r0
  401cb0:	460b      	mov	r3, r1
  401cb2:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
  401cb6:	1880      	adds	r0, r0, r2
  401cb8:	4159      	adcs	r1, r3
  401cba:	4602      	mov	r2, r0
  401cbc:	460b      	mov	r3, r1
  401cbe:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
  401cc2:	1880      	adds	r0, r0, r2
  401cc4:	4159      	adcs	r1, r3
  401cc6:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50

00401cca <.LBB583>:
  401cca:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
  401cce:	0ce1      	lsrs	r1, r4, #19
  401cd0:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
  401cd4:	f8cd 1558 	str.w	r1, [sp, #1368]	; 0x558
  401cd8:	0ce9      	lsrs	r1, r5, #19
  401cda:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
  401cde:	f8cd 155c 	str.w	r1, [sp, #1372]	; 0x55c

00401ce2 <.LBB585>:
  401ce2:	00e9      	lsls	r1, r5, #3
  401ce4:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
  401ce8:	f8cd 1564 	str.w	r1, [sp, #1380]	; 0x564
  401cec:	00e1      	lsls	r1, r4, #3
  401cee:	ea41 7155 	orr.w	r1, r1, r5, lsr #29
  401cf2:	f8cd 1560 	str.w	r1, [sp, #1376]	; 0x560

00401cf6 <.LBE585>:
  401cf6:	f50d 63ab 	add.w	r3, sp, #1368	; 0x558
  401cfa:	e9d3 0100 	ldrd	r0, r1, [r3]
  401cfe:	f50d 63ac 	add.w	r3, sp, #1376	; 0x560
  401d02:	e9d3 2300 	ldrd	r2, r3, [r3]
  401d06:	4050      	eors	r0, r2
  401d08:	4059      	eors	r1, r3
  401d0a:	09a4      	lsrs	r4, r4, #6
  401d0c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  401d0e:	ea44 6485 	orr.w	r4, r4, r5, lsl #26
  401d12:	945e      	str	r4, [sp, #376]	; 0x178
  401d14:	09ac      	lsrs	r4, r5, #6
  401d16:	945f      	str	r4, [sp, #380]	; 0x17c
  401d18:	ab5e      	add	r3, sp, #376	; 0x178
  401d1a:	e9d3 4500 	ldrd	r4, r5, [r3]
  401d1e:	4044      	eors	r4, r0
  401d20:	404d      	eors	r5, r1
  401d22:	4620      	mov	r0, r4
  401d24:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
  401d28:	181b      	adds	r3, r3, r0
  401d2a:	416c      	adcs	r4, r5
  401d2c:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
  401d30:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  401d34:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  401d38:	1912      	adds	r2, r2, r4
  401d3a:	416b      	adcs	r3, r5
  401d3c:	4614      	mov	r4, r2
  401d3e:	461d      	mov	r5, r3
  401d40:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
  401d44:	1912      	adds	r2, r2, r4
  401d46:	416b      	adcs	r3, r5
  401d48:	4610      	mov	r0, r2
  401d4a:	4619      	mov	r1, r3
  401d4c:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  401d50:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  401d54:	1880      	adds	r0, r0, r2
  401d56:	4159      	adcs	r1, r3
  401d58:	4602      	mov	r2, r0
  401d5a:	460b      	mov	r3, r1
  401d5c:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68

00401d60 <.LBB587>:
  401d60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  401d64:	0f03      	lsrs	r3, r0, #28
  401d66:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  401d6a:	f8cd 3568 	str.w	r3, [sp, #1384]	; 0x568
  401d6e:	0f0b      	lsrs	r3, r1, #28
  401d70:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  401d74:	f8cd 356c 	str.w	r3, [sp, #1388]	; 0x56c

00401d78 <.LBB589>:
  401d78:	078b      	lsls	r3, r1, #30
  401d7a:	ea43 0390 	orr.w	r3, r3, r0, lsr #2
  401d7e:	f8cd 3574 	str.w	r3, [sp, #1396]	; 0x574
  401d82:	0783      	lsls	r3, r0, #30
  401d84:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  401d88:	f8cd 3570 	str.w	r3, [sp, #1392]	; 0x570

00401d8c <.LBE589>:
  401d8c:	f50d 63ad 	add.w	r3, sp, #1384	; 0x568
  401d90:	e9d3 3400 	ldrd	r3, r4, [r3]
  401d94:	f50d 62ae 	add.w	r2, sp, #1392	; 0x570
  401d98:	e9d2 1200 	ldrd	r1, r2, [r2]
  401d9c:	404b      	eors	r3, r1
  401d9e:	4054      	eors	r4, r2
  401da0:	461a      	mov	r2, r3
  401da2:	4623      	mov	r3, r4

00401da4 <.LBB591>:
  401da4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  401da8:	0669      	lsls	r1, r5, #25
  401daa:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  401dae:	f8cd 157c 	str.w	r1, [sp, #1404]	; 0x57c
  401db2:	0661      	lsls	r1, r4, #25
  401db4:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  401db8:	f8cd 1578 	str.w	r1, [sp, #1400]	; 0x578

00401dbc <.LBE591>:
  401dbc:	f50d 61af 	add.w	r1, sp, #1400	; 0x578
  401dc0:	e9d1 0100 	ldrd	r0, r1, [r1]
  401dc4:	4050      	eors	r0, r2
  401dc6:	4059      	eors	r1, r3
  401dc8:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
  401dcc:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  401dd0:	4322      	orrs	r2, r4
  401dd2:	432b      	orrs	r3, r5
  401dd4:	4619      	mov	r1, r3
  401dd6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
  401dda:	4013      	ands	r3, r2
  401ddc:	400c      	ands	r4, r1
  401dde:	e9cd 342e 	strd	r3, r4, [sp, #184]	; 0xb8
  401de2:	e9dd 122a 	ldrd	r1, r2, [sp, #168]	; 0xa8
  401de6:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
  401dea:	4019      	ands	r1, r3
  401dec:	4022      	ands	r2, r4
  401dee:	4608      	mov	r0, r1
  401df0:	e9dd 452e 	ldrd	r4, r5, [sp, #184]	; 0xb8
  401df4:	4304      	orrs	r4, r0
  401df6:	4315      	orrs	r5, r2
  401df8:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
  401dfc:	1912      	adds	r2, r2, r4
  401dfe:	416b      	adcs	r3, r5
  401e00:	4619      	mov	r1, r3
  401e02:	e9dd 3418 	ldrd	r3, r4, [sp, #96]	; 0x60
  401e06:	189b      	adds	r3, r3, r2
  401e08:	414c      	adcs	r4, r1
  401e0a:	e9cd 342c 	strd	r3, r4, [sp, #176]	; 0xb0

00401e0e <.LBB593>:
  401e0e:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
  401e12:	0ba3      	lsrs	r3, r4, #14
  401e14:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
  401e18:	f8cd 3580 	str.w	r3, [sp, #1408]	; 0x580
  401e1c:	0bab      	lsrs	r3, r5, #14
  401e1e:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
  401e22:	f8cd 3584 	str.w	r3, [sp, #1412]	; 0x584

00401e26 <.LBB595>:
  401e26:	0ca3      	lsrs	r3, r4, #18
  401e28:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
  401e2c:	f8cd 3588 	str.w	r3, [sp, #1416]	; 0x588
  401e30:	0cab      	lsrs	r3, r5, #18
  401e32:	ea43 3384 	orr.w	r3, r3, r4, lsl #14
  401e36:	f8cd 358c 	str.w	r3, [sp, #1420]	; 0x58c

00401e3a <.LBE595>:
        R(12); R(13); R(14); R(15);
  401e3a:	f50d 63b0 	add.w	r3, sp, #1408	; 0x580
  401e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
  401e42:	f50d 61b1 	add.w	r1, sp, #1416	; 0x588
  401e46:	e9d1 0100 	ldrd	r0, r1, [r1]
  401e4a:	4042      	eors	r2, r0
  401e4c:	404b      	eors	r3, r1

00401e4e <.LBB597>:
  401e4e:	05e9      	lsls	r1, r5, #23
  401e50:	ea41 2154 	orr.w	r1, r1, r4, lsr #9
  401e54:	f8cd 1594 	str.w	r1, [sp, #1428]	; 0x594
  401e58:	05e1      	lsls	r1, r4, #23
  401e5a:	ea41 2155 	orr.w	r1, r1, r5, lsr #9
  401e5e:	f8cd 1590 	str.w	r1, [sp, #1424]	; 0x590

00401e62 <.LBE597>:
  401e62:	f50d 61b2 	add.w	r1, sp, #1424	; 0x590
  401e66:	e9d1 0100 	ldrd	r0, r1, [r1]
  401e6a:	4050      	eors	r0, r2
  401e6c:	4059      	eors	r1, r3
  401e6e:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  401e72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  401e76:	ea80 0308 	eor.w	r3, r0, r8
  401e7a:	ea81 0409 	eor.w	r4, r1, r9
  401e7e:	4625      	mov	r5, r4
  401e80:	461c      	mov	r4, r3
  401e82:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
  401e86:	4022      	ands	r2, r4
  401e88:	402b      	ands	r3, r5
  401e8a:	4614      	mov	r4, r2
  401e8c:	461d      	mov	r5, r3
  401e8e:	4602      	mov	r2, r0
  401e90:	460b      	mov	r3, r1
  401e92:	4062      	eors	r2, r4
  401e94:	406b      	eors	r3, r5
  401e96:	4614      	mov	r4, r2
  401e98:	461d      	mov	r5, r3
  401e9a:	e9d6 2318 	ldrd	r2, r3, [r6, #96]	; 0x60
  401e9e:	eb12 020a 	adds.w	r2, r2, sl
  401ea2:	eb43 030b 	adc.w	r3, r3, fp
  401ea6:	18a4      	adds	r4, r4, r2
  401ea8:	415d      	adcs	r5, r3
  401eaa:	2f00      	cmp	r7, #0
  401eac:	f000 8506 	beq.w	4028bc <.LCFI3+0x90>

00401eb0 <.LBB599>:
  401eb0:	e9dd ab26 	ldrd	sl, fp, [sp, #152]	; 0x98
  401eb4:	4653      	mov	r3, sl
  401eb6:	085b      	lsrs	r3, r3, #1
  401eb8:	465a      	mov	r2, fp
  401eba:	ea43 73cb 	orr.w	r3, r3, fp, lsl #31
  401ebe:	f8cd 3598 	str.w	r3, [sp, #1432]	; 0x598
  401ec2:	0853      	lsrs	r3, r2, #1
  401ec4:	4652      	mov	r2, sl
  401ec6:	ea43 73ca 	orr.w	r3, r3, sl, lsl #31
  401eca:	f8cd 359c 	str.w	r3, [sp, #1436]	; 0x59c

00401ece <.LBB601>:
  401ece:	0a13      	lsrs	r3, r2, #8
  401ed0:	465a      	mov	r2, fp
  401ed2:	ea43 630b 	orr.w	r3, r3, fp, lsl #24
  401ed6:	f8cd 35a0 	str.w	r3, [sp, #1440]	; 0x5a0
  401eda:	0a13      	lsrs	r3, r2, #8
  401edc:	ea43 630a 	orr.w	r3, r3, sl, lsl #24
  401ee0:	f8cd 35a4 	str.w	r3, [sp, #1444]	; 0x5a4

00401ee4 <.LBE601>:
  401ee4:	f50d 63b3 	add.w	r3, sp, #1432	; 0x598
  401ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
  401eec:	f50d 61b4 	add.w	r1, sp, #1440	; 0x5a0
  401ef0:	e9d1 0100 	ldrd	r0, r1, [r1]
  401ef4:	4042      	eors	r2, r0
  401ef6:	404b      	eors	r3, r1
  401ef8:	4651      	mov	r1, sl
  401efa:	09c9      	lsrs	r1, r1, #7
  401efc:	4658      	mov	r0, fp
  401efe:	ea41 614b 	orr.w	r1, r1, fp, lsl #25
  401f02:	9160      	str	r1, [sp, #384]	; 0x180
  401f04:	09c1      	lsrs	r1, r0, #7
  401f06:	9161      	str	r1, [sp, #388]	; 0x184
  401f08:	a960      	add	r1, sp, #384	; 0x180
  401f0a:	e9d1 0100 	ldrd	r0, r1, [r1]
  401f0e:	4050      	eors	r0, r2
  401f10:	4059      	eors	r1, r3
  401f12:	4602      	mov	r2, r0
  401f14:	460b      	mov	r3, r1
  401f16:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  401f1a:	1880      	adds	r0, r0, r2
  401f1c:	4159      	adcs	r1, r3
  401f1e:	4602      	mov	r2, r0
  401f20:	460b      	mov	r3, r1
  401f22:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  401f26:	1880      	adds	r0, r0, r2
  401f28:	4159      	adcs	r1, r3
  401f2a:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58

00401f2e <.LBB603>:
  401f2e:	e9dd ab24 	ldrd	sl, fp, [sp, #144]	; 0x90
  401f32:	4651      	mov	r1, sl
  401f34:	0cc9      	lsrs	r1, r1, #19
  401f36:	4658      	mov	r0, fp
  401f38:	ea41 314b 	orr.w	r1, r1, fp, lsl #13
  401f3c:	f8cd 15a8 	str.w	r1, [sp, #1448]	; 0x5a8
  401f40:	0cc1      	lsrs	r1, r0, #19
  401f42:	4650      	mov	r0, sl
  401f44:	ea41 314a 	orr.w	r1, r1, sl, lsl #13
  401f48:	f8cd 15ac 	str.w	r1, [sp, #1452]	; 0x5ac

00401f4c <.LBB605>:
  401f4c:	4659      	mov	r1, fp
  401f4e:	00c9      	lsls	r1, r1, #3
  401f50:	ea41 715a 	orr.w	r1, r1, sl, lsr #29
  401f54:	f8cd 15b4 	str.w	r1, [sp, #1460]	; 0x5b4
  401f58:	00c1      	lsls	r1, r0, #3
  401f5a:	ea41 715b 	orr.w	r1, r1, fp, lsr #29
  401f5e:	f8cd 15b0 	str.w	r1, [sp, #1456]	; 0x5b0

00401f62 <.LBE605>:
  401f62:	f50d 63b5 	add.w	r3, sp, #1448	; 0x5a8
  401f66:	e9d3 0100 	ldrd	r0, r1, [r3]
  401f6a:	f50d 63b6 	add.w	r3, sp, #1456	; 0x5b0
  401f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
  401f72:	4050      	eors	r0, r2
  401f74:	4059      	eors	r1, r3
  401f76:	4653      	mov	r3, sl
  401f78:	099b      	lsrs	r3, r3, #6
  401f7a:	465a      	mov	r2, fp
  401f7c:	ea43 638b 	orr.w	r3, r3, fp, lsl #26
  401f80:	9362      	str	r3, [sp, #392]	; 0x188
  401f82:	0993      	lsrs	r3, r2, #6
  401f84:	9363      	str	r3, [sp, #396]	; 0x18c
  401f86:	ab62      	add	r3, sp, #392	; 0x188
  401f88:	e9d3 2300 	ldrd	r2, r3, [r3]
  401f8c:	4042      	eors	r2, r0
  401f8e:	404b      	eors	r3, r1
  401f90:	4610      	mov	r0, r2
  401f92:	4619      	mov	r1, r3
  401f94:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  401f98:	1812      	adds	r2, r2, r0
  401f9a:	414b      	adcs	r3, r1
  401f9c:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  401fa0:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  401fa4:	1912      	adds	r2, r2, r4
  401fa6:	416b      	adcs	r3, r5
  401fa8:	e9dd ab16 	ldrd	sl, fp, [sp, #88]	; 0x58
  401fac:	eb1a 0a02 	adds.w	sl, sl, r2
  401fb0:	eb4b 0b03 	adc.w	fp, fp, r3
  401fb4:	4651      	mov	r1, sl
  401fb6:	465a      	mov	r2, fp
  401fb8:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
  401fbc:	e9cd 1218 	strd	r1, r2, [sp, #96]	; 0x60
  401fc0:	eb1a 0103 	adds.w	r1, sl, r3
  401fc4:	eb4b 0204 	adc.w	r2, fp, r4
  401fc8:	460b      	mov	r3, r1
  401fca:	4614      	mov	r4, r2
  401fcc:	e9cd 3406 	strd	r3, r4, [sp, #24]

00401fd0 <.LBB607>:
  401fd0:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  401fd4:	0f23      	lsrs	r3, r4, #28
  401fd6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  401fda:	f8cd 35b8 	str.w	r3, [sp, #1464]	; 0x5b8
  401fde:	0f2b      	lsrs	r3, r5, #28
  401fe0:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  401fe4:	f8cd 35bc 	str.w	r3, [sp, #1468]	; 0x5bc

00401fe8 <.LBB609>:
  401fe8:	07ab      	lsls	r3, r5, #30
  401fea:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  401fee:	f8cd 35c4 	str.w	r3, [sp, #1476]	; 0x5c4
  401ff2:	07a3      	lsls	r3, r4, #30
  401ff4:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  401ff8:	f8cd 35c0 	str.w	r3, [sp, #1472]	; 0x5c0

00401ffc <.LBE609>:
  401ffc:	f50d 63b7 	add.w	r3, sp, #1464	; 0x5b8
  402000:	e9d3 2300 	ldrd	r2, r3, [r3]
  402004:	f50d 61b8 	add.w	r1, sp, #1472	; 0x5c0
  402008:	e9d1 ab00 	ldrd	sl, fp, [r1]
  40200c:	ea82 020a 	eor.w	r2, r2, sl
  402010:	ea83 030b 	eor.w	r3, r3, fp

00402014 <.LBB611>:
  402014:	0669      	lsls	r1, r5, #25
  402016:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  40201a:	f8cd 15cc 	str.w	r1, [sp, #1484]	; 0x5cc
  40201e:	0661      	lsls	r1, r4, #25
  402020:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  402024:	f8cd 15c8 	str.w	r1, [sp, #1480]	; 0x5c8

00402028 <.LBE611>:
  402028:	f50d 61b9 	add.w	r1, sp, #1480	; 0x5c8
  40202c:	e9d1 0100 	ldrd	r0, r1, [r1]
  402030:	4050      	eors	r0, r2
  402032:	4059      	eors	r1, r3
  402034:	e9cd 012e 	strd	r0, r1, [sp, #184]	; 0xb8
  402038:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40203c:	4610      	mov	r0, r2
  40203e:	4619      	mov	r1, r3
  402040:	4320      	orrs	r0, r4
  402042:	4329      	orrs	r1, r5
  402044:	e9dd ab2a 	ldrd	sl, fp, [sp, #168]	; 0xa8
  402048:	ea0a 0a00 	and.w	sl, sl, r0
  40204c:	ea0b 0b01 	and.w	fp, fp, r1
  402050:	4650      	mov	r0, sl
  402052:	4659      	mov	r1, fp
  402054:	4022      	ands	r2, r4
  402056:	402b      	ands	r3, r5
  402058:	4310      	orrs	r0, r2
  40205a:	4319      	orrs	r1, r3
  40205c:	e9dd 342e 	ldrd	r3, r4, [sp, #184]	; 0xb8
  402060:	181b      	adds	r3, r3, r0
  402062:	414c      	adcs	r4, r1
  402064:	e9dd ab18 	ldrd	sl, fp, [sp, #96]	; 0x60
  402068:	eb1a 0a03 	adds.w	sl, sl, r3
  40206c:	eb4b 0b04 	adc.w	fp, fp, r4

00402070 <.LBB613>:
  402070:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  402074:	0b83      	lsrs	r3, r0, #14
  402076:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  40207a:	f8cd 35d0 	str.w	r3, [sp, #1488]	; 0x5d0
  40207e:	0b8b      	lsrs	r3, r1, #14
  402080:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
  402084:	f8cd 35d4 	str.w	r3, [sp, #1492]	; 0x5d4

00402088 <.LBB615>:
  402088:	0c83      	lsrs	r3, r0, #18
  40208a:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
  40208e:	f8cd 35d8 	str.w	r3, [sp, #1496]	; 0x5d8
  402092:	0c8b      	lsrs	r3, r1, #18
  402094:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
  402098:	f8cd 35dc 	str.w	r3, [sp, #1500]	; 0x5dc

0040209c <.LBE615>:
  40209c:	f50d 63ba 	add.w	r3, sp, #1488	; 0x5d0
  4020a0:	e9d3 4500 	ldrd	r4, r5, [r3]
  4020a4:	f50d 63bb 	add.w	r3, sp, #1496	; 0x5d8
  4020a8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4020ac:	4054      	eors	r4, r2
  4020ae:	405d      	eors	r5, r3

004020b0 <.LBB617>:
  4020b0:	05c9      	lsls	r1, r1, #23
  4020b2:	9b06      	ldr	r3, [sp, #24]
  4020b4:	ea41 2353 	orr.w	r3, r1, r3, lsr #9
  4020b8:	f8cd 35e4 	str.w	r3, [sp, #1508]	; 0x5e4
  4020bc:	9b06      	ldr	r3, [sp, #24]
  4020be:	05d9      	lsls	r1, r3, #23
  4020c0:	9b07      	ldr	r3, [sp, #28]
  4020c2:	ea41 2353 	orr.w	r3, r1, r3, lsr #9
  4020c6:	f8cd 35e0 	str.w	r3, [sp, #1504]	; 0x5e0

004020ca <.LBE617>:
  4020ca:	f50d 63bc 	add.w	r3, sp, #1504	; 0x5e0
  4020ce:	e9d3 2300 	ldrd	r2, r3, [r3]
  4020d2:	4062      	eors	r2, r4
  4020d4:	406b      	eors	r3, r5
  4020d6:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  4020da:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  4020de:	ea80 0008 	eor.w	r0, r0, r8
  4020e2:	ea81 0109 	eor.w	r1, r1, r9
  4020e6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
  4020ea:	4003      	ands	r3, r0
  4020ec:	400c      	ands	r4, r1
  4020ee:	ea83 0008 	eor.w	r0, r3, r8
  4020f2:	ea84 0109 	eor.w	r1, r4, r9
  4020f6:	e9d6 231a 	ldrd	r2, r3, [r6, #104]	; 0x68
  4020fa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  4020fe:	18a4      	adds	r4, r4, r2
  402100:	415d      	adcs	r5, r3
  402102:	1904      	adds	r4, r0, r4
  402104:	eb41 0505 	adc.w	r5, r1, r5
  402108:	e9cd 4504 	strd	r4, r5, [sp, #16]
  40210c:	2f00      	cmp	r7, #0
  40210e:	f000 83db 	beq.w	4028c8 <.LCFI3+0x9c>

00402112 <.LBB619>:
  402112:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
  402116:	0863      	lsrs	r3, r4, #1
  402118:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
  40211c:	f8cd 35e8 	str.w	r3, [sp, #1512]	; 0x5e8
  402120:	086b      	lsrs	r3, r5, #1
  402122:	ea43 73c4 	orr.w	r3, r3, r4, lsl #31
  402126:	f8cd 35ec 	str.w	r3, [sp, #1516]	; 0x5ec

0040212a <.LBB621>:
  40212a:	0a23      	lsrs	r3, r4, #8
  40212c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  402130:	f8cd 35f0 	str.w	r3, [sp, #1520]	; 0x5f0
  402134:	0a2b      	lsrs	r3, r5, #8
  402136:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  40213a:	f8cd 35f4 	str.w	r3, [sp, #1524]	; 0x5f4

0040213e <.LBE621>:
  40213e:	f50d 63bd 	add.w	r3, sp, #1512	; 0x5e8
  402142:	e9d3 2300 	ldrd	r2, r3, [r3]
  402146:	f50d 61be 	add.w	r1, sp, #1520	; 0x5f0
  40214a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40214e:	4042      	eors	r2, r0
  402150:	404b      	eors	r3, r1
  402152:	09e1      	lsrs	r1, r4, #7
  402154:	ea41 6145 	orr.w	r1, r1, r5, lsl #25
  402158:	9164      	str	r1, [sp, #400]	; 0x190
  40215a:	09e9      	lsrs	r1, r5, #7
  40215c:	9165      	str	r1, [sp, #404]	; 0x194
  40215e:	a964      	add	r1, sp, #400	; 0x190
  402160:	e9d1 0100 	ldrd	r0, r1, [r1]
  402164:	4050      	eors	r0, r2
  402166:	4059      	eors	r1, r3
  402168:	4602      	mov	r2, r0
  40216a:	460b      	mov	r3, r1
  40216c:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
  402170:	1880      	adds	r0, r0, r2
  402172:	4159      	adcs	r1, r3
  402174:	4602      	mov	r2, r0
  402176:	460b      	mov	r3, r1
  402178:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40217c:	1880      	adds	r0, r0, r2
  40217e:	4159      	adcs	r1, r3
  402180:	e9cd 0126 	strd	r0, r1, [sp, #152]	; 0x98

00402184 <.LBB623>:
  402184:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
  402188:	0ce1      	lsrs	r1, r4, #19
  40218a:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
  40218e:	f8cd 15f8 	str.w	r1, [sp, #1528]	; 0x5f8
  402192:	0ce9      	lsrs	r1, r5, #19
  402194:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
  402198:	f8cd 15fc 	str.w	r1, [sp, #1532]	; 0x5fc

0040219c <.LBB625>:
  40219c:	00e9      	lsls	r1, r5, #3
  40219e:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
  4021a2:	f8cd 1604 	str.w	r1, [sp, #1540]	; 0x604
  4021a6:	00e1      	lsls	r1, r4, #3
  4021a8:	ea41 7155 	orr.w	r1, r1, r5, lsr #29
  4021ac:	f8cd 1600 	str.w	r1, [sp, #1536]	; 0x600

004021b0 <.LBE625>:
  4021b0:	f50d 63bf 	add.w	r3, sp, #1528	; 0x5f8
  4021b4:	e9d3 0100 	ldrd	r0, r1, [r3]
  4021b8:	f50d 63c0 	add.w	r3, sp, #1536	; 0x600
  4021bc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4021c0:	4050      	eors	r0, r2
  4021c2:	4059      	eors	r1, r3
  4021c4:	09a4      	lsrs	r4, r4, #6
  4021c6:	9d15      	ldr	r5, [sp, #84]	; 0x54
  4021c8:	ea44 6485 	orr.w	r4, r4, r5, lsl #26
  4021cc:	9466      	str	r4, [sp, #408]	; 0x198
  4021ce:	09ac      	lsrs	r4, r5, #6
  4021d0:	9467      	str	r4, [sp, #412]	; 0x19c
  4021d2:	ab66      	add	r3, sp, #408	; 0x198
  4021d4:	e9d3 4500 	ldrd	r4, r5, [r3]
  4021d8:	4044      	eors	r4, r0
  4021da:	404d      	eors	r5, r1
  4021dc:	4620      	mov	r0, r4
  4021de:	e9dd 3426 	ldrd	r3, r4, [sp, #152]	; 0x98
  4021e2:	181b      	adds	r3, r3, r0
  4021e4:	416c      	adcs	r4, r5
  4021e6:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
  4021ea:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  4021ee:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
  4021f2:	1912      	adds	r2, r2, r4
  4021f4:	416b      	adcs	r3, r5
  4021f6:	4614      	mov	r4, r2
  4021f8:	461d      	mov	r5, r3
  4021fa:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
  4021fe:	1912      	adds	r2, r2, r4
  402200:	416b      	adcs	r3, r5
  402202:	4610      	mov	r0, r2
  402204:	4619      	mov	r1, r3
  402206:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  40220a:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  40220e:	1880      	adds	r0, r0, r2
  402210:	4159      	adcs	r1, r3
  402212:	4602      	mov	r2, r0
  402214:	460b      	mov	r3, r1
  402216:	e9cd 2304 	strd	r2, r3, [sp, #16]

0040221a <.LBB627>:
  40221a:	ea4f 731a 	mov.w	r3, sl, lsr #28
  40221e:	ea43 130b 	orr.w	r3, r3, fp, lsl #4
  402222:	f8cd 3608 	str.w	r3, [sp, #1544]	; 0x608
  402226:	ea4f 731b 	mov.w	r3, fp, lsr #28
  40222a:	ea43 130a 	orr.w	r3, r3, sl, lsl #4
  40222e:	f8cd 360c 	str.w	r3, [sp, #1548]	; 0x60c

00402232 <.LBB629>:
  402232:	ea4f 738b 	mov.w	r3, fp, lsl #30
  402236:	ea43 039a 	orr.w	r3, r3, sl, lsr #2
  40223a:	f8cd 3614 	str.w	r3, [sp, #1556]	; 0x614
  40223e:	ea4f 738a 	mov.w	r3, sl, lsl #30
  402242:	ea43 039b 	orr.w	r3, r3, fp, lsr #2
  402246:	f8cd 3610 	str.w	r3, [sp, #1552]	; 0x610

0040224a <.LBE629>:
  40224a:	f50d 63c1 	add.w	r3, sp, #1544	; 0x608
  40224e:	e9d3 3400 	ldrd	r3, r4, [r3]
  402252:	f50d 62c2 	add.w	r2, sp, #1552	; 0x610
  402256:	e9d2 1200 	ldrd	r1, r2, [r2]
  40225a:	404b      	eors	r3, r1
  40225c:	4054      	eors	r4, r2
  40225e:	461a      	mov	r2, r3
  402260:	4623      	mov	r3, r4

00402262 <.LBB631>:
  402262:	ea4f 614b 	mov.w	r1, fp, lsl #25
  402266:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
  40226a:	f8cd 161c 	str.w	r1, [sp, #1564]	; 0x61c
  40226e:	ea4f 614a 	mov.w	r1, sl, lsl #25
  402272:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
  402276:	f8cd 1618 	str.w	r1, [sp, #1560]	; 0x618

0040227a <.LBE631>:
  40227a:	f50d 61c3 	add.w	r1, sp, #1560	; 0x618
  40227e:	e9d1 4500 	ldrd	r4, r5, [r1]
  402282:	4054      	eors	r4, r2
  402284:	405d      	eors	r5, r3
  402286:	e9cd 452a 	strd	r4, r5, [sp, #168]	; 0xa8
  40228a:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	; 0xb0
  40228e:	ea44 000a 	orr.w	r0, r4, sl
  402292:	ea45 010b 	orr.w	r1, r5, fp
  402296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40229a:	4002      	ands	r2, r0
  40229c:	400b      	ands	r3, r1
  40229e:	ea04 040a 	and.w	r4, r4, sl
  4022a2:	ea05 050b 	and.w	r5, r5, fp
  4022a6:	4314      	orrs	r4, r2
  4022a8:	431d      	orrs	r5, r3
  4022aa:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
  4022ae:	1912      	adds	r2, r2, r4
  4022b0:	416b      	adcs	r3, r5
  4022b2:	4619      	mov	r1, r3
  4022b4:	e9dd 3418 	ldrd	r3, r4, [sp, #96]	; 0x60
  4022b8:	189b      	adds	r3, r3, r2
  4022ba:	414c      	adcs	r4, r1
  4022bc:	e9cd 342a 	strd	r3, r4, [sp, #168]	; 0xa8

004022c0 <.LBB633>:
  4022c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4022c4:	0b83      	lsrs	r3, r0, #14
  4022c6:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  4022ca:	f8cd 3620 	str.w	r3, [sp, #1568]	; 0x620
  4022ce:	0b8b      	lsrs	r3, r1, #14
  4022d0:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
  4022d4:	f8cd 3624 	str.w	r3, [sp, #1572]	; 0x624

004022d8 <.LBB635>:
  4022d8:	0c83      	lsrs	r3, r0, #18
  4022da:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
  4022de:	f8cd 3628 	str.w	r3, [sp, #1576]	; 0x628
  4022e2:	0c8b      	lsrs	r3, r1, #18
  4022e4:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
  4022e8:	f8cd 362c 	str.w	r3, [sp, #1580]	; 0x62c

004022ec <.LBE635>:
  4022ec:	f50d 63c4 	add.w	r3, sp, #1568	; 0x620
  4022f0:	e9d3 4500 	ldrd	r4, r5, [r3]
  4022f4:	f50d 63c5 	add.w	r3, sp, #1576	; 0x628
  4022f8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4022fc:	4054      	eors	r4, r2
  4022fe:	405d      	eors	r5, r3

00402300 <.LBB637>:
  402300:	05c9      	lsls	r1, r1, #23
  402302:	9b04      	ldr	r3, [sp, #16]
  402304:	ea41 2353 	orr.w	r3, r1, r3, lsr #9
  402308:	f8cd 3634 	str.w	r3, [sp, #1588]	; 0x634
  40230c:	9b04      	ldr	r3, [sp, #16]
  40230e:	05d9      	lsls	r1, r3, #23
  402310:	9b05      	ldr	r3, [sp, #20]
  402312:	ea41 2353 	orr.w	r3, r1, r3, lsr #9
  402316:	f8cd 3630 	str.w	r3, [sp, #1584]	; 0x630

0040231a <.LBE637>:
  40231a:	f50d 63c6 	add.w	r3, sp, #1584	; 0x630
  40231e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402322:	4062      	eors	r2, r4
  402324:	406b      	eors	r3, r5
  402326:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  40232a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
  40232e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  402332:	4050      	eors	r0, r2
  402334:	4059      	eors	r1, r3
  402336:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
  40233a:	4003      	ands	r3, r0
  40233c:	400c      	ands	r4, r1
  40233e:	4618      	mov	r0, r3
  402340:	4621      	mov	r1, r4
  402342:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
  402346:	4043      	eors	r3, r0
  402348:	404c      	eors	r4, r1
  40234a:	4618      	mov	r0, r3
  40234c:	e9d6 231c 	ldrd	r2, r3, [r6, #112]	; 0x70
  402350:	eb18 0802 	adds.w	r8, r8, r2
  402354:	eb49 0903 	adc.w	r9, r9, r3
  402358:	eb18 0800 	adds.w	r8, r8, r0
  40235c:	eb49 0904 	adc.w	r9, r9, r4
  402360:	2f00      	cmp	r7, #0
  402362:	f000 82b6 	beq.w	4028d2 <.LCFI3+0xa6>

00402366 <.LBB639>:
  402366:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
  40236a:	0863      	lsrs	r3, r4, #1
  40236c:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
  402370:	f8cd 3638 	str.w	r3, [sp, #1592]	; 0x638
  402374:	086b      	lsrs	r3, r5, #1
  402376:	ea43 73c4 	orr.w	r3, r3, r4, lsl #31
  40237a:	f8cd 363c 	str.w	r3, [sp, #1596]	; 0x63c

0040237e <.LBB641>:
  40237e:	0a23      	lsrs	r3, r4, #8
  402380:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  402384:	f8cd 3640 	str.w	r3, [sp, #1600]	; 0x640
  402388:	0a2b      	lsrs	r3, r5, #8
  40238a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  40238e:	f8cd 3644 	str.w	r3, [sp, #1604]	; 0x644

00402392 <.LBE641>:
  402392:	f50d 63c7 	add.w	r3, sp, #1592	; 0x638
  402396:	e9d3 2300 	ldrd	r2, r3, [r3]
  40239a:	f50d 61c8 	add.w	r1, sp, #1600	; 0x640
  40239e:	e9d1 0100 	ldrd	r0, r1, [r1]
  4023a2:	4042      	eors	r2, r0
  4023a4:	404b      	eors	r3, r1
  4023a6:	09e1      	lsrs	r1, r4, #7
  4023a8:	ea41 6145 	orr.w	r1, r1, r5, lsl #25
  4023ac:	9168      	str	r1, [sp, #416]	; 0x1a0
  4023ae:	09e9      	lsrs	r1, r5, #7
  4023b0:	9169      	str	r1, [sp, #420]	; 0x1a4
  4023b2:	a968      	add	r1, sp, #416	; 0x1a0
  4023b4:	e9d1 0100 	ldrd	r0, r1, [r1]
  4023b8:	4050      	eors	r0, r2
  4023ba:	4059      	eors	r1, r3
  4023bc:	4602      	mov	r2, r0
  4023be:	460b      	mov	r3, r1
  4023c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  4023c4:	1880      	adds	r0, r0, r2
  4023c6:	4159      	adcs	r1, r3
  4023c8:	4602      	mov	r2, r0
  4023ca:	460b      	mov	r3, r1
  4023cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4023d0:	1880      	adds	r0, r0, r2
  4023d2:	4159      	adcs	r1, r3
  4023d4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30

004023d8 <.LBB643>:
  4023d8:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  4023dc:	0ce1      	lsrs	r1, r4, #19
  4023de:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
  4023e2:	f8cd 1648 	str.w	r1, [sp, #1608]	; 0x648
  4023e6:	0ce9      	lsrs	r1, r5, #19
  4023e8:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
  4023ec:	f8cd 164c 	str.w	r1, [sp, #1612]	; 0x64c

004023f0 <.LBB645>:
  4023f0:	00e9      	lsls	r1, r5, #3
  4023f2:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
  4023f6:	f8cd 1654 	str.w	r1, [sp, #1620]	; 0x654
  4023fa:	00e1      	lsls	r1, r4, #3
  4023fc:	ea41 7155 	orr.w	r1, r1, r5, lsr #29
  402400:	f8cd 1650 	str.w	r1, [sp, #1616]	; 0x650

00402404 <.LBE645>:
  402404:	f50d 63c9 	add.w	r3, sp, #1608	; 0x648
  402408:	e9d3 0100 	ldrd	r0, r1, [r3]
  40240c:	f50d 63ca 	add.w	r3, sp, #1616	; 0x650
  402410:	e9d3 2300 	ldrd	r2, r3, [r3]
  402414:	4050      	eors	r0, r2
  402416:	4059      	eors	r1, r3
  402418:	09a4      	lsrs	r4, r4, #6
  40241a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
  40241c:	ea44 6485 	orr.w	r4, r4, r5, lsl #26
  402420:	946a      	str	r4, [sp, #424]	; 0x1a8
  402422:	09ac      	lsrs	r4, r5, #6
  402424:	946b      	str	r4, [sp, #428]	; 0x1ac
  402426:	ab6a      	add	r3, sp, #424	; 0x1a8
  402428:	e9d3 4500 	ldrd	r4, r5, [r3]
  40242c:	4044      	eors	r4, r0
  40242e:	404d      	eors	r5, r1
  402430:	4620      	mov	r0, r4
  402432:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
  402436:	181b      	adds	r3, r3, r0
  402438:	416c      	adcs	r4, r5
  40243a:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
  40243e:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
  402442:	eb14 0408 	adds.w	r4, r4, r8
  402446:	eb45 0509 	adc.w	r5, r5, r9
  40244a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  40244e:	1912      	adds	r2, r2, r4
  402450:	416b      	adcs	r3, r5
  402452:	461c      	mov	r4, r3
  402454:	4613      	mov	r3, r2
  402456:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  40245a:	e9cd 3402 	strd	r3, r4, [sp, #8]
  40245e:	eb12 0208 	adds.w	r2, r2, r8
  402462:	eb44 0309 	adc.w	r3, r4, r9
  402466:	4690      	mov	r8, r2
  402468:	4699      	mov	r9, r3

0040246a <.LBB647>:
  40246a:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
  40246e:	0f23      	lsrs	r3, r4, #28
  402470:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  402474:	f8cd 3658 	str.w	r3, [sp, #1624]	; 0x658
  402478:	0f2b      	lsrs	r3, r5, #28
  40247a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  40247e:	f8cd 365c 	str.w	r3, [sp, #1628]	; 0x65c

00402482 <.LBB649>:
  402482:	07ab      	lsls	r3, r5, #30
  402484:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  402488:	f8cd 3664 	str.w	r3, [sp, #1636]	; 0x664
  40248c:	07a3      	lsls	r3, r4, #30
  40248e:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  402492:	f8cd 3660 	str.w	r3, [sp, #1632]	; 0x660

00402496 <.LBE649>:
  402496:	f50d 63cb 	add.w	r3, sp, #1624	; 0x658
  40249a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40249e:	f50d 61cc 	add.w	r1, sp, #1632	; 0x660
  4024a2:	e9d1 0100 	ldrd	r0, r1, [r1]
  4024a6:	4042      	eors	r2, r0
  4024a8:	404b      	eors	r3, r1

004024aa <.LBB651>:
  4024aa:	0669      	lsls	r1, r5, #25
  4024ac:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  4024b0:	f8cd 166c 	str.w	r1, [sp, #1644]	; 0x66c
  4024b4:	0661      	lsls	r1, r4, #25
  4024b6:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  4024ba:	f8cd 1668 	str.w	r1, [sp, #1640]	; 0x668

004024be <.LBE651>:
  4024be:	f50d 61cd 	add.w	r1, sp, #1640	; 0x668
  4024c2:	e9d1 0100 	ldrd	r0, r1, [r1]
  4024c6:	4050      	eors	r0, r2
  4024c8:	4059      	eors	r1, r3
  4024ca:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  4024ce:	ea44 000a 	orr.w	r0, r4, sl
  4024d2:	ea45 010b 	orr.w	r1, r5, fp
  4024d6:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
  4024da:	4002      	ands	r2, r0
  4024dc:	400b      	ands	r3, r1
  4024de:	ea04 040a 	and.w	r4, r4, sl
  4024e2:	ea05 050b 	and.w	r5, r5, fp
  4024e6:	4314      	orrs	r4, r2
  4024e8:	431d      	orrs	r5, r3
  4024ea:	4620      	mov	r0, r4
  4024ec:	4629      	mov	r1, r5
  4024ee:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
  4024f2:	1824      	adds	r4, r4, r0
  4024f4:	414d      	adcs	r5, r1
  4024f6:	4620      	mov	r0, r4
  4024f8:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
  4024fc:	181b      	adds	r3, r3, r0
  4024fe:	416c      	adcs	r4, r5
  402500:	e9cd 3418 	strd	r3, r4, [sp, #96]	; 0x60

00402504 <.LBB653>:
  402504:	ea4f 3398 	mov.w	r3, r8, lsr #14
  402508:	ea43 4389 	orr.w	r3, r3, r9, lsl #18
  40250c:	f8cd 3670 	str.w	r3, [sp, #1648]	; 0x670
  402510:	ea4f 3399 	mov.w	r3, r9, lsr #14
  402514:	ea43 4388 	orr.w	r3, r3, r8, lsl #18
  402518:	f8cd 3674 	str.w	r3, [sp, #1652]	; 0x674

0040251c <.LBB655>:
  40251c:	ea4f 4398 	mov.w	r3, r8, lsr #18
  402520:	ea43 3389 	orr.w	r3, r3, r9, lsl #14
  402524:	f8cd 3678 	str.w	r3, [sp, #1656]	; 0x678
  402528:	ea4f 4399 	mov.w	r3, r9, lsr #18
  40252c:	ea43 3388 	orr.w	r3, r3, r8, lsl #14
  402530:	f8cd 367c 	str.w	r3, [sp, #1660]	; 0x67c

00402534 <.LBE655>:
  402534:	f50d 63ce 	add.w	r3, sp, #1648	; 0x670
  402538:	e9d3 2300 	ldrd	r2, r3, [r3]
  40253c:	f50d 61cf 	add.w	r1, sp, #1656	; 0x678
  402540:	e9d1 0100 	ldrd	r0, r1, [r1]
  402544:	4042      	eors	r2, r0
  402546:	404b      	eors	r3, r1

00402548 <.LBB657>:
  402548:	ea4f 51c9 	mov.w	r1, r9, lsl #23
  40254c:	ea41 2158 	orr.w	r1, r1, r8, lsr #9
  402550:	f8cd 1684 	str.w	r1, [sp, #1668]	; 0x684
  402554:	ea4f 51c8 	mov.w	r1, r8, lsl #23
  402558:	ea41 2159 	orr.w	r1, r1, r9, lsr #9
  40255c:	f8cd 1680 	str.w	r1, [sp, #1664]	; 0x680

00402560 <.LBE657>:
  402560:	f50d 61d0 	add.w	r1, sp, #1664	; 0x680
  402564:	e9d1 0100 	ldrd	r0, r1, [r1]
  402568:	4050      	eors	r0, r2
  40256a:	4059      	eors	r1, r3
  40256c:	e9cd 012e 	strd	r0, r1, [sp, #184]	; 0xb8
  402570:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  402574:	4602      	mov	r2, r0
  402576:	460b      	mov	r3, r1
  402578:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  40257c:	4062      	eors	r2, r4
  40257e:	406b      	eors	r3, r5
  402580:	ea02 0208 	and.w	r2, r2, r8
  402584:	ea03 0309 	and.w	r3, r3, r9
  402588:	4050      	eors	r0, r2
  40258a:	4059      	eors	r1, r3
  40258c:	4602      	mov	r2, r0
  40258e:	460b      	mov	r3, r1
  402590:	e9d6 011e 	ldrd	r0, r1, [r6, #120]	; 0x78
  402594:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
  402598:	1824      	adds	r4, r4, r0
  40259a:	414d      	adcs	r5, r1
  40259c:	1914      	adds	r4, r2, r4
  40259e:	eb43 0505 	adc.w	r5, r3, r5
  4025a2:	e9cd 4502 	strd	r4, r5, [sp, #8]
  4025a6:	2f00      	cmp	r7, #0
  4025a8:	f000 8198 	beq.w	4028dc <.LCFI3+0xb0>

004025ac <.LBB659>:
  4025ac:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
  4025b0:	0843      	lsrs	r3, r0, #1
  4025b2:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
  4025b6:	f8cd 3688 	str.w	r3, [sp, #1672]	; 0x688
  4025ba:	084b      	lsrs	r3, r1, #1
  4025bc:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
  4025c0:	f8cd 368c 	str.w	r3, [sp, #1676]	; 0x68c

004025c4 <.LBB661>:
  4025c4:	0a03      	lsrs	r3, r0, #8
  4025c6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  4025ca:	f8cd 3690 	str.w	r3, [sp, #1680]	; 0x690
  4025ce:	0a0b      	lsrs	r3, r1, #8
  4025d0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  4025d4:	f8cd 3694 	str.w	r3, [sp, #1684]	; 0x694

004025d8 <.LBE661>:
  4025d8:	f50d 63d1 	add.w	r3, sp, #1672	; 0x688
  4025dc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4025e0:	f50d 64d2 	add.w	r4, sp, #1680	; 0x690
  4025e4:	e9d4 4500 	ldrd	r4, r5, [r4]
  4025e8:	4062      	eors	r2, r4
  4025ea:	406b      	eors	r3, r5
  4025ec:	460d      	mov	r5, r1
  4025ee:	09c1      	lsrs	r1, r0, #7
  4025f0:	ea41 6145 	orr.w	r1, r1, r5, lsl #25
  4025f4:	916c      	str	r1, [sp, #432]	; 0x1b0
  4025f6:	09e9      	lsrs	r1, r5, #7
  4025f8:	916d      	str	r1, [sp, #436]	; 0x1b4
  4025fa:	a96c      	add	r1, sp, #432	; 0x1b0
  4025fc:	e9d1 0100 	ldrd	r0, r1, [r1]
  402600:	4050      	eors	r0, r2
  402602:	4059      	eors	r1, r3
  402604:	4602      	mov	r2, r0
  402606:	460b      	mov	r3, r1
  402608:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
  40260c:	1880      	adds	r0, r0, r2
  40260e:	4159      	adcs	r1, r3
  402610:	4602      	mov	r2, r0
  402612:	460b      	mov	r3, r1
  402614:	e9dd 0100 	ldrd	r0, r1, [sp]
  402618:	1880      	adds	r0, r0, r2
  40261a:	4159      	adcs	r1, r3
  40261c:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68

00402620 <.LBB663>:
  402620:	e9dd 5626 	ldrd	r5, r6, [sp, #152]	; 0x98
  402624:	0ce9      	lsrs	r1, r5, #19
  402626:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
  40262a:	f8cd 1698 	str.w	r1, [sp, #1688]	; 0x698
  40262e:	0cf1      	lsrs	r1, r6, #19
  402630:	ea41 3145 	orr.w	r1, r1, r5, lsl #13
  402634:	f8cd 169c 	str.w	r1, [sp, #1692]	; 0x69c

00402638 <.LBB665>:
  402638:	00f1      	lsls	r1, r6, #3
  40263a:	ea41 7155 	orr.w	r1, r1, r5, lsr #29
  40263e:	f8cd 16a4 	str.w	r1, [sp, #1700]	; 0x6a4
  402642:	00e9      	lsls	r1, r5, #3
  402644:	ea41 7156 	orr.w	r1, r1, r6, lsr #29
  402648:	f8cd 16a0 	str.w	r1, [sp, #1696]	; 0x6a0

0040264c <.LBE665>:
  40264c:	f50d 63d3 	add.w	r3, sp, #1688	; 0x698
  402650:	e9d3 0100 	ldrd	r0, r1, [r3]
  402654:	f50d 63d4 	add.w	r3, sp, #1696	; 0x6a0
  402658:	e9d3 3400 	ldrd	r3, r4, [r3]
  40265c:	4058      	eors	r0, r3
  40265e:	4061      	eors	r1, r4
  402660:	462c      	mov	r4, r5
  402662:	4635      	mov	r5, r6
  402664:	09a6      	lsrs	r6, r4, #6
  402666:	4633      	mov	r3, r6
  402668:	ea43 6685 	orr.w	r6, r3, r5, lsl #26
  40266c:	966e      	str	r6, [sp, #440]	; 0x1b8
  40266e:	09ae      	lsrs	r6, r5, #6
  402670:	966f      	str	r6, [sp, #444]	; 0x1bc
  402672:	ab6e      	add	r3, sp, #440	; 0x1b8
  402674:	e9d3 3400 	ldrd	r3, r4, [r3]
  402678:	4043      	eors	r3, r0
  40267a:	404c      	eors	r4, r1
  40267c:	4618      	mov	r0, r3
  40267e:	4621      	mov	r1, r4
  402680:	e9dd 341a 	ldrd	r3, r4, [sp, #104]	; 0x68
  402684:	181b      	adds	r3, r3, r0
  402686:	414c      	adcs	r4, r1
  402688:	e9cd 3428 	strd	r3, r4, [sp, #160]	; 0xa0
  40268c:	e9dd 452e 	ldrd	r4, r5, [sp, #184]	; 0xb8
  402690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402694:	1912      	adds	r2, r2, r4
  402696:	416b      	adcs	r3, r5
  402698:	4614      	mov	r4, r2
  40269a:	461d      	mov	r5, r3
  40269c:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
  4026a0:	1912      	adds	r2, r2, r4
  4026a2:	416b      	adcs	r3, r5
  4026a4:	4611      	mov	r1, r2
  4026a6:	461a      	mov	r2, r3
  4026a8:	e9dd 342c 	ldrd	r3, r4, [sp, #176]	; 0xb0
  4026ac:	e9cd 121a 	strd	r1, r2, [sp, #104]	; 0x68
  4026b0:	18c9      	adds	r1, r1, r3
  4026b2:	4162      	adcs	r2, r4
  4026b4:	460b      	mov	r3, r1
  4026b6:	4614      	mov	r4, r2
  4026b8:	e9cd 3402 	strd	r3, r4, [sp, #8]

004026bc <.LBB667>:
  4026bc:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
  4026c0:	0f23      	lsrs	r3, r4, #28
  4026c2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  4026c6:	f8cd 36a8 	str.w	r3, [sp, #1704]	; 0x6a8
  4026ca:	0f2b      	lsrs	r3, r5, #28
  4026cc:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  4026d0:	f8cd 36ac 	str.w	r3, [sp, #1708]	; 0x6ac

004026d4 <.LBB669>:
  4026d4:	07ab      	lsls	r3, r5, #30
  4026d6:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  4026da:	f8cd 36b4 	str.w	r3, [sp, #1716]	; 0x6b4
  4026de:	07a3      	lsls	r3, r4, #30
  4026e0:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
  4026e4:	f8cd 36b0 	str.w	r3, [sp, #1712]	; 0x6b0

004026e8 <.LBE669>:
  4026e8:	f50d 63d5 	add.w	r3, sp, #1704	; 0x6a8
  4026ec:	e9d3 2300 	ldrd	r2, r3, [r3]
  4026f0:	f50d 61d6 	add.w	r1, sp, #1712	; 0x6b0
  4026f4:	e9d1 0100 	ldrd	r0, r1, [r1]
  4026f8:	4042      	eors	r2, r0
  4026fa:	404b      	eors	r3, r1

004026fc <.LBB671>:
  4026fc:	0669      	lsls	r1, r5, #25
  4026fe:	ea41 11d4 	orr.w	r1, r1, r4, lsr #7
  402702:	f8cd 16bc 	str.w	r1, [sp, #1724]	; 0x6bc
  402706:	0661      	lsls	r1, r4, #25
  402708:	ea41 11d5 	orr.w	r1, r1, r5, lsr #7
  40270c:	f8cd 16b8 	str.w	r1, [sp, #1720]	; 0x6b8

00402710 <.LBE671>:
  402710:	f50d 61d7 	add.w	r1, sp, #1720	; 0x6b8
  402714:	e9d1 4500 	ldrd	r4, r5, [r1]
  402718:	4054      	eors	r4, r2
  40271a:	405d      	eors	r5, r3
  40271c:	e9cd 452c 	strd	r4, r5, [sp, #176]	; 0xb0
  402720:	e9dd 562a 	ldrd	r5, r6, [sp, #168]	; 0xa8
  402724:	462a      	mov	r2, r5
  402726:	4633      	mov	r3, r6
  402728:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
  40272c:	4302      	orrs	r2, r0
  40272e:	430b      	orrs	r3, r1
  402730:	ea02 000a 	and.w	r0, r2, sl
  402734:	ea03 010b 	and.w	r1, r3, fp
  402738:	e9dd 3418 	ldrd	r3, r4, [sp, #96]	; 0x60
  40273c:	401d      	ands	r5, r3
  40273e:	4026      	ands	r6, r4
  402740:	4305      	orrs	r5, r0
  402742:	430e      	orrs	r6, r1
  402744:	e9dd 342c 	ldrd	r3, r4, [sp, #176]	; 0xb0
  402748:	195b      	adds	r3, r3, r5
  40274a:	4174      	adcs	r4, r6
  40274c:	4621      	mov	r1, r4
  40274e:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
  402752:	18e4      	adds	r4, r4, r3
  402754:	414d      	adcs	r5, r1
    for (j = 0; j < 80; j += 16) {
  402756:	3710      	adds	r7, #16
  402758:	f10e 0e80 	add.w	lr, lr, #128	; 0x80
  40275c:	2f50      	cmp	r7, #80	; 0x50
  40275e:	f47d adc2 	bne.w	4002e6 <.LBB353>
    }
#endif /* USE_SLOW_SHA2 */

    /* Add the working vars back into digest */

    sha512->digest[0] += a(0);
  402762:	f8dd 06cc 	ldr.w	r0, [sp, #1740]	; 0x6cc
  402766:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
  40276a:	18a4      	adds	r4, r4, r2
  40276c:	415d      	adcs	r5, r3
  40276e:	4622      	mov	r2, r4
  402770:	462b      	mov	r3, r5
  402772:	e9c0 2306 	strd	r2, r3, [r0, #24]
    sha512->digest[1] += b(0);
  402776:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
  40277a:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
  40277e:	18a4      	adds	r4, r4, r2
  402780:	415d      	adcs	r5, r3
  402782:	4622      	mov	r2, r4
  402784:	462b      	mov	r3, r5
  402786:	e9c0 2308 	strd	r2, r3, [r0, #32]
    sha512->digest[2] += c(0);
  40278a:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
  40278e:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
  402792:	18a4      	adds	r4, r4, r2
  402794:	415d      	adcs	r5, r3
  402796:	4622      	mov	r2, r4
  402798:	462b      	mov	r3, r5
  40279a:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
    sha512->digest[3] += d(0);
  40279e:	e9d0 230c 	ldrd	r2, r3, [r0, #48]	; 0x30
  4027a2:	eb12 020a 	adds.w	r2, r2, sl
  4027a6:	eb43 030b 	adc.w	r3, r3, fp
  4027aa:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
    sha512->digest[4] += e(0);
  4027ae:	e9d0 230e 	ldrd	r2, r3, [r0, #56]	; 0x38
  4027b2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  4027b6:	18a4      	adds	r4, r4, r2
  4027b8:	415d      	adcs	r5, r3
  4027ba:	4622      	mov	r2, r4
  4027bc:	462b      	mov	r3, r5
  4027be:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
    sha512->digest[5] += f(0);
  4027c2:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
  4027c6:	eb12 0208 	adds.w	r2, r2, r8
  4027ca:	eb43 0309 	adc.w	r3, r3, r9
  4027ce:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    sha512->digest[6] += g(0);
  4027d2:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
  4027d6:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  4027da:	18a4      	adds	r4, r4, r2
  4027dc:	415d      	adcs	r5, r3
  4027de:	4622      	mov	r2, r4
  4027e0:	462b      	mov	r3, r5
  4027e2:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
    sha512->digest[7] += h(0);
  4027e6:	e9d0 2314 	ldrd	r2, r3, [r0, #80]	; 0x50
  4027ea:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
  4027ee:	18a4      	adds	r4, r4, r2
  4027f0:	415d      	adcs	r5, r3
  4027f2:	4622      	mov	r2, r4
  4027f4:	462b      	mov	r3, r5
  4027f6:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50

004027fa <.LBB673>:


/* Make sure compiler doesn't skip */
STATIC INLINE void ForceZero(const void* mem, word32 len)
{
    volatile byte* z = (volatile byte*)mem;
  4027fa:	f50d 63da 	add.w	r3, sp, #1744	; 0x6d0

004027fe <.LVL8>:

    for (w = (volatile word64*)z; len >= sizeof(*w); len -= sizeof(*w))
        *w++ = 0;
    z = (volatile byte*)w;
#endif
    while (len--) *z++ = 0;
  4027fe:	2000      	movs	r0, #0
  402800:	f50d 61ea 	add.w	r1, sp, #1872	; 0x750

00402804 <.LVL9>:
  402804:	1c5a      	adds	r2, r3, #1

00402806 <.LVL10>:
  402806:	7018      	strb	r0, [r3, #0]

00402808 <.LVL11>:
  402808:	4613      	mov	r3, r2
  40280a:	428a      	cmp	r2, r1
  40280c:	d1fa      	bne.n	402804 <.LVL9>
  40280e:	f50d 63ea 	add.w	r3, sp, #1872	; 0x750

00402812 <.LBB675>:
  402812:	2100      	movs	r1, #0

00402814 <.LVL12>:
  402814:	1c5a      	adds	r2, r3, #1

00402816 <.LVL13>:
  402816:	7019      	strb	r1, [r3, #0]

00402818 <.LVL14>:
  402818:	4613      	mov	r3, r2
  40281a:	f50d 60f2 	add.w	r0, sp, #1936	; 0x790
  40281e:	4282      	cmp	r2, r0
  402820:	d1f8      	bne.n	402814 <.LVL12>

00402822 <.LBE675>:
#ifdef WOLFSSL_SMALL_STACK
    XFREE(W, NULL, DYNAMIC_TYPE_TMP_BUFFER);
#endif

    return 0;
}
  402822:	2000      	movs	r0, #0
  402824:	f20d 7d94 	addw	sp, sp, #1940	; 0x794

00402828 <.LCFI2>:
  402828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040282c <.LCFI3>:
        R( 0); R( 1); R( 2); R( 3);
  40282c:	e9dc 2316 	ldrd	r2, r3, [ip, #88]	; 0x58
  402830:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  402834:	f7fd be08 	b.w	400448 <.LBE365+0x52>
  402838:	e9dc 2318 	ldrd	r2, r3, [ip, #96]	; 0x60
  40283c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  402840:	f7fd bf19 	b.w	400676 <.LBE385+0x3e>
  402844:	e9dc 231a 	ldrd	r2, r3, [ip, #104]	; 0x68
  402848:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  40284c:	f7fe b831 	b.w	4008b2 <.LBE405+0x3e>
  402850:	e9dc 231c 	ldrd	r2, r3, [ip, #112]	; 0x70
  402854:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  402858:	f7fe b95c 	b.w	400b14 <.LBE425+0x3c>
        R( 4); R( 5); R( 6); R( 7);
  40285c:	e9dc 231e 	ldrd	r2, r3, [ip, #120]	; 0x78
  402860:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
  402864:	f7fe ba7d 	b.w	400d62 <.LBE445+0x3e>
  402868:	e9dc 2320 	ldrd	r2, r3, [ip, #128]	; 0x80
  40286c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  402870:	f7fe bb8e 	b.w	400f90 <.LBE465+0x3a>
  402874:	e9dc 2322 	ldrd	r2, r3, [ip, #136]	; 0x88
  402878:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  40287c:	f7fe bca5 	b.w	4011ca <.LBE485+0x40>
  402880:	e9dc 2324 	ldrd	r2, r3, [ip, #144]	; 0x90
  402884:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  402888:	f7fe bdbe 	b.w	401408 <.LBE505+0x3e>
        R( 8); R( 9); R(10); R(11);
  40288c:	e9dc 3426 	ldrd	r3, r4, [ip, #152]	; 0x98
  402890:	e9cd 3400 	strd	r3, r4, [sp]
  402894:	f7fe bed9 	b.w	40164a <.LBE525+0x3a>
  402898:	e9dc 3428 	ldrd	r3, r4, [ip, #160]	; 0xa0
  40289c:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
  4028a0:	f7fe bff6 	b.w	401890 <.LBE545+0x3a>
  4028a4:	e9dc 342a 	ldrd	r3, r4, [ip, #168]	; 0xa8
  4028a8:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
  4028ac:	f7ff b91d 	b.w	401aea <.LBE565+0x3a>
  4028b0:	e9dc 342c 	ldrd	r3, r4, [ip, #176]	; 0xb0
  4028b4:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
  4028b8:	f7ff ba3a 	b.w	401d30 <.LBE585+0x3a>
        R(12); R(13); R(14); R(15);
  4028bc:	e9dc 232e 	ldrd	r2, r3, [ip, #184]	; 0xb8
  4028c0:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  4028c4:	f7ff bb6c 	b.w	401fa0 <.LBE605+0x3e>
  4028c8:	e9dc 3430 	ldrd	r3, r4, [ip, #192]	; 0xc0
  4028cc:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
  4028d0:	e48b      	b.n	4021ea <.LBE625+0x3a>
  4028d2:	e9dc 3432 	ldrd	r3, r4, [ip, #200]	; 0xc8
  4028d6:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
  4028da:	e5b0      	b.n	40243e <.LBE645+0x3a>
  4028dc:	e9dc 3434 	ldrd	r3, r4, [ip, #208]	; 0xd0
  4028e0:	e9cd 3428 	strd	r3, r4, [sp, #160]	; 0xa0
  4028e4:	e6d2      	b.n	40268c <.LBE665+0x40>

004028e6 <.LFE16>:
  4028e6:	bf00      	nop

Disassembly of section .rodata.crc_table%35:

004028e8 <crc_table>:
  4028e8:	0000 0000 3096 7707 612c ee0e 51ba 9909     .....0.w,a...Q..
  4028f8:	c419 076d f48f 706a a535 e963 95a3 9e64     ..m...jp5.c...d.
  402908:	8832 0edb b8a4 79dc e91e e0d5 d988 97d2     2......y........
  402918:	4c2b 09b6 7cbd 7eb1 2d07 e7b8 1d91 90bf     +L...|.~.-......
  402928:	1064 1db7 20f2 6ab0 7148 f3b9 41de 84be     d.... .jHq...A..
  402938:	d47d 1ada e4eb 6ddd b551 f4d4 85c7 83d3     }......mQ.......
  402948:	9856 136c a8c0 646b f97a fd62 c9ec 8a65     V.l...kdz.b...e.
  402958:	5c4f 1401 6cd9 6306 3d63 fa0f 0df5 8d08     O\...l.cc=......
  402968:	20c8 3b6e 105e 4c69 41e4 d560 7172 a267     . n;^.iL.A`.rqg.
  402978:	e4d1 3c03 d447 4b04 85fd d20d b56b a50a     ...<G..K....k...
  402988:	a8fa 35b5 986c 42b2 c9d6 dbbb f940 acbc     ...5l..B....@...
  402998:	6ce3 32d8 5c75 45df 0dcf dcd6 3d59 abd1     .l.2u\.E....Y=..
  4029a8:	30ac 26d9 003a 51de 5180 c8d7 6116 bfd0     .0.&:..Q.Q...a..
  4029b8:	f4b5 21b4 c423 56b3 9599 cfba a50f b8bd     ...!#..V........
  4029c8:	b89e 2802 8808 5f05 d9b2 c60c e924 b10b     ...(..._....$...
  4029d8:	7c87 2f6f 4c11 5868 1dab c161 2d3d b666     .|o/.LhX..a.=-f.
  4029e8:	4190 76dc 7106 01db 20bc 98d2 102a efd5     .A.v.q... ..*...
  4029f8:	8589 71b1 b51f 06b6 e4a5 9fbf d433 e8b8     ...q........3...
  402a08:	c9a2 7807 f934 0f00 a88e 9609 9818 e10e     ...x4...........
  402a18:	0dbb 7f6a 3d2d 086d 6c97 9164 5c01 e663     ..j.-=m..ld..\c.
  402a28:	51f4 6b6b 6162 1c6c 30d8 8565 004e f262     .Qkkbal..0e.N.b.
  402a38:	95ed 6c06 a57b 1b01 f4c1 8208 c457 f50f     ...l{.......W...
  402a48:	d9c6 65b0 e950 12b7 b8ea 8bbe 887c fcb9     ...eP.......|...
  402a58:	1ddf 62dd 2d49 15da 7cf3 8cd3 4c65 fbd4     ...bI-...|..eL..
  402a68:	6158 4db2 51ce 3ab5 0074 a3bc 30e2 d4bb     Xa.M.Q.:t....0..
  402a78:	a541 4adf 95d7 3dd8 c46d a4d1 f4fb d3d6     A..J...=m.......
  402a88:	e96a 4369 d9fc 346e 8846 ad67 b8d0 da60     j.iC..n4F.g...`.
  402a98:	2d73 4404 1de5 3303 4c5f aa0a 7cc9 dd0d     s-.D...3_L...|..
  402aa8:	713c 5005 41aa 2702 1010 be0b 2086 c90c     <q.P.A.'..... ..
  402ab8:	b525 5768 85b3 206f d409 b966 e49f ce61     %.hW..o ..f...a.
  402ac8:	f90e 5ede c998 29d9 9822 b0d0 a8b4 c7d7     ...^...)".......
  402ad8:	3d17 59b3 0d81 2eb4 5c3b b7bd 6cad c0ba     .=.Y....;\...l..
  402ae8:	8320 edb8 b3b6 9abf e20c 03b6 d29a 74b1      ..............t
  402af8:	4739 ead5 77af 9dd2 2615 04db 1683 73dc     9G...w...&.....s
  402b08:	0b12 e363 3b84 9464 6a3e 0d6d 5aa8 7a6a     ..c..;d.>jm..Zjz
  402b18:	cf0b e40e ff9d 9309 ae27 0a00 9eb1 7d07     ........'......}
  402b28:	9344 f00f a3d2 8708 f268 1e01 c2fe 6906     D.......h......i
  402b38:	575d f762 67cb 8065 3671 196c 06e7 6e6b     ]Wb..ge.q6l...kn
  402b48:	1b76 fed4 2be0 89d3 7a5a 10da 4acc 67dd     v....+..Zz...J.g
  402b58:	df6f f9b9 eff9 8ebe be43 17b7 8ed5 60b0     o.......C......`
  402b68:	a3e8 d6d6 937e a1d1 c2c4 38d8 f252 4fdf     ....~......8R..O
  402b78:	67f1 d1bb 5767 a6bc 06dd 3fb5 364b 48b2     .g..gW.....?K6.H
  402b88:	2bda d80d 1b4c af0a 4af6 3603 7a60 4104     .+..L....J.6`z.A
  402b98:	efc3 df60 df55 a867 8eef 316e be79 4669     ..`.U.g...n1y.iF
  402ba8:	b38c cb61 831a bc66 d2a0 256f e236 5268     ..a...f...o%6.hR
  402bb8:	7795 cc0c 4703 bb0b 16b9 2202 262f 5505     .w...G....."/&.U
  402bc8:	3bbe c5ba 0b28 b2bd 5a92 2bb4 6a04 5cb3     .;..(....Z.+.j.\
  402bd8:	ffa7 c2d7 cf31 b5d0 9e8b 2cd9 ae1d 5bde     ....1......,...[
  402be8:	c2b0 9b64 f226 ec63 a39c 756a 930a 026d     ..d.&.c...ju..m.
  402bf8:	06a9 9c09 363f eb0e 6785 7207 5713 0500     ....?6...g.r.W..
  402c08:	4a82 95bf 7a14 e2b8 2bae 7bb1 1b38 0cb6     .J...z...+.{8...
  402c18:	8e9b 92d2 be0d e5d5 efb7 7cdc df21 0bdb     ...........|!...
  402c28:	d2d4 86d3 e242 f1d4 b3f8 68dd 836e 1fda     ....B......hn...
  402c38:	16cd 81be 265b f6b9 77e1 6fb0 4777 18b7     ....[&...w.owG..
  402c48:	5ae6 8808 6a70 ff0f 3bca 6606 0b5c 1101     .Z..pj...;.f\...
  402c58:	9eff 8f65 ae69 f862 ffd3 616b cf45 166c     ..e.i.b...kaE.l.
  402c68:	e278 a00a d2ee d70d 8354 4e04 b3c2 3903     x.......T..N...9
  402c78:	2661 a767 16f7 d060 474d 4969 77db 3e6e     a&g...`.MGiI.wn>
  402c88:	6a4a aed1 5adc d9d6 0b66 40df 3bf0 37d8     Jj...Z..f..@.;.7
  402c98:	ae53 a9bc 9ec5 debb cf7f 47b2 ffe9 30b5     S..........G...0
  402ca8:	f21c bdbd c28a caba 9330 53b3 a3a6 24b4     ........0..S...$
  402cb8:	3605 bad0 0693 cdd7 5729 54de 67bf 23d9     .6......)W.T.g.#
  402cc8:	7a2e b366 4ab8 c461 1b02 5d68 2b94 2a6f     .zf..Ja...h].+o*
  402cd8:	be37 b40b 8ea1 c30c df1b 5a05 ef8d 2d02     7..........Z...-
  402ce8:	0000 0000 3141 191b 6282 3236 53c3 2b2d     ....A1...b62.S-+
  402cf8:	c504 646c f445 7d77 a786 565a 96c7 4f41     ..ldE.w}..ZV..AO
  402d08:	8a08 c8d9 bb49 d1c2 e88a faef d9cb e3f4     ....I...........
  402d18:	4f0c acb5 7e4d b5ae 2d8e 9e83 1ccf 8798     .O..M~...-......
  402d28:	1251 4ac2 2310 53d9 70d3 78f4 4192 61ef     Q..J.#.S.p.x.A.a
  402d38:	d755 2eae e614 37b5 b5d7 1c98 8496 0583     U......7........
  402d48:	9859 821b a918 9b00 fadb b02d cb9a a936     Y.........-...6.
  402d58:	5d5d e677 6c1c ff6c 3fdf d441 0e9e cd5a     ]]w..ll..?A...Z.
  402d68:	24a2 9584 15e3 8c9f 4620 a7b2 7761 bea9     .$...... F..aw..
  402d78:	e1a6 f1e8 d0e7 e8f3 8324 c3de b265 dac5     ........$...e...
  402d88:	aeaa 5d5d 9feb 4446 cc28 6f6b fd69 7670     ..]]..FD(.koi.pv
  402d98:	6bae 3931 5aef 202a 092c 0b07 386d 121c     .k19.Z* ,...m8..
  402da8:	36f3 df46 07b2 c65d 5471 ed70 6530 f46b     .6F...].qTp.0ek.
  402db8:	f3f7 bb2a c2b6 a231 9175 891c a034 9007     ..*...1.u...4...
  402dc8:	bcfb 179f 8dba 0e84 de79 25a9 ef38 3cb2     ........y..%8..<
  402dd8:	79ff 73f3 48be 6ae8 1b7d 41c5 2a3c 58de     .y.s.H.j}..A<*.X
  402de8:	4f05 f079 7e44 e962 2d87 c24f 1cc6 db54     .Oy.D~b..-O...T.
  402df8:	8a01 9415 bb40 8d0e e883 a623 d9c2 bf38     ....@.....#...8.
  402e08:	c50d 38a0 f44c 21bb a78f 0a96 96ce 138d     ...8L..!........
  402e18:	0009 5ccc 3148 45d7 628b 6efa 53ca 77e1     ...\H1.E.b.n.S.w
  402e28:	5d54 babb 6c15 a3a0 3fd6 888d 0e97 9196     T]...l...?......
  402e38:	9850 ded7 a911 c7cc fad2 ece1 cb93 f5fa     P...............
  402e48:	d75c 7262 e61d 6b79 b5de 4054 849f 594f     \.br..yk..T@..OY
  402e58:	1258 160e 2319 0f15 70da 2438 419b 3d23     X....#...p8$.A#=
  402e68:	6ba7 65fd 5ae6 7ce6 0925 57cb 3864 4ed0     .k.e.Z.|%..Wd8.N
  402e78:	aea3 0191 9fe2 188a cc21 33a7 fd60 2abc     ........!..3`..*
  402e88:	e1af ad24 d0ee b43f 832d 9f12 b26c 8609     ..$...?.-...l...
  402e98:	24ab c948 15ea d053 4629 fb7e 7768 e265     .$H...S.)F~.hwe.
  402ea8:	79f6 2f3f 48b7 3624 1b74 1d09 2a35 0412     .y?/.H$6t...5*..
  402eb8:	bcf2 4b53 8db3 5248 de70 7965 ef31 607e     ..SK..HRp.ey1.~`
  402ec8:	f3fe e7e6 c2bf fefd 917c d5d0 a03d cccb     ........|...=...
  402ed8:	36fa 838a 07bb 9a91 5478 b1bc 6539 a8a7     .6......xT..9e..
  402ee8:	984b 3b83 a90a 2298 fac9 09b5 cb88 10ae     K..;..."........
  402ef8:	5d4f 5fef 6c0e 46f4 3fcd 6dd9 0e8c 74c2     O]._.l.F.?.m...t
  402f08:	1243 f35a 2302 ea41 70c1 c16c 4180 d877     C.Z..#A..pl..Aw.
  402f18:	d747 9736 e606 8e2d b5c5 a500 8484 bc1b     G.6...-.........
  402f28:	8a1a 7141 bb5b 685a e898 4377 d9d9 5a6c     ..Aq[.Zh..wC..lZ
  402f38:	4f1e 152d 7e5f 0c36 2d9c 271b 1cdd 3e00     .O-._~6..-.'...>
  402f48:	0012 b998 3153 a083 6290 8bae 53d1 92b5     ....S1...b...S..
  402f58:	c516 ddf4 f457 c4ef a794 efc2 96d5 f6d9     ....W...........
  402f68:	bce9 ae07 8da8 b71c de6b 9c31 ef2a 852a     ........k.1.*.*.
  402f78:	79ed ca6b 48ac d370 1b6f f85d 2a2e e146     .yk..Hp.o.]..*F.
  402f88:	36e1 66de 07a0 7fc5 5463 54e8 6522 4df3     .6.f....cT.T"e.M
  402f98:	f3e5 02b2 c2a4 1ba9 9167 3084 a026 299f     ........g..0&..)
  402fa8:	aeb8 e4c5 9ff9 fdde cc3a d6f3 fd7b cfe8     ........:...{...
  402fb8:	6bbc 80a9 5afd 99b2 093e b29f 387f ab84     .k...Z..>....8..
  402fc8:	24b0 2c1c 15f1 3507 4632 1e2a 7773 0731     .$.,...52F*.sw1.
  402fd8:	e1b4 4870 d0f5 516b 8336 7a46 b277 635d     ..pH..kQ6.Fzw.]c
  402fe8:	d74e cbfa e60f d2e1 b5cc f9cc 848d e0d7     N...............
  402ff8:	124a af96 230b b68d 70c8 9da0 4189 84bb     J....#...p...A..
  403008:	5d46 0323 6c07 1a38 3fc4 3115 0e85 280e     F]#..l8..?.1...(
  403018:	9842 674f a903 7e54 fac0 5579 cb81 4c62     B.Og..T~..yU..bL
  403028:	c51f 8138 f45e 9823 a79d b30e 96dc aa15     ..8.^.#.........
  403038:	001b e554 315a fc4f 6299 d762 53d8 ce79     ..T.Z1O..bb..Sy.
  403048:	4f17 49e1 7e56 50fa 2d95 7bd7 1cd4 62cc     .O.IV~.P.-.{...b
  403058:	8a13 2d8d bb52 3496 e891 1fbb d9d0 06a0     ...-R..4........
  403068:	f3ec 5e7e c2ad 4765 916e 6c48 a02f 7553     ..~^..eGn.Hl/.Su
  403078:	36e8 3a12 07a9 2309 546a 0824 652b 113f     .6.:...#jT$.+e?.
  403088:	79e4 96a7 48a5 8fbc 1b66 a491 2a27 bd8a     .y...H..f...'*..
  403098:	bce0 f2cb 8da1 ebd0 de62 c0fd ef23 d9e6     ........b...#...
  4030a8:	e1bd 14bc d0fc 0da7 833f 268a b27e 3f91     ........?..&~..?
  4030b8:	24b9 70d0 15f8 69cb 463b 42e6 777a 5bfd     .$.p...i;F.Bzw.[
  4030c8:	6bb5 dc65 5af4 c57e 0937 ee53 3876 f748     .ke..Z~.7.S.v8H.
  4030d8:	aeb1 b809 9ff0 a112 cc33 8a3f fd72 9324     ........3.?.r.$.
  4030e8:	0000 0000 6a37 01c2 d46e 0384 be59 0246     ....7j..n...Y.F.
  4030f8:	a8dc 0709 c2eb 06cb 7cb2 048d 1685 054f     .........|....O.
  403108:	51b8 0e13 3b8f 0fd1 85d6 0d97 efe1 0c55     .Q...;........U.
  403118:	f964 091a 9353 08d8 2d0a 0a9e 473d 0b5c     d...S....-..=G\.
  403128:	a370 1c26 c947 1de4 771e 1fa2 1d29 1e60     p.&.G....w..).`.
  403138:	0bac 1b2f 619b 1aed dfc2 18ab b5f5 1969     ../..a........i.
  403148:	f2c8 1235 98ff 13f7 26a6 11b1 4c91 1073     ..5......&...Ls.
  403158:	5a14 153c 3023 14fe 8e7a 16b8 e44d 177a     .Z<.#0..z...M.z.
  403168:	46e0 384d 2cd7 398f 928e 3bc9 f8b9 3a0b     .FM8.,.9...;...:
  403178:	ee3c 3f44 840b 3e86 3a52 3cc0 5065 3d02     <.D?...>R:.<eP.=
  403188:	1758 365e 7d6f 379c c336 35da a901 3418     X.^6o}.76..5...4
  403198:	bf84 3157 d5b3 3095 6bea 32d3 01dd 3311     ..W1...0.k.2...3
  4031a8:	e590 246b 8fa7 25a9 31fe 27ef 5bc9 262d     ..k$...%.1.'.[-&
  4031b8:	4d4c 2362 277b 22a0 9922 20e6 f315 2124     LMb#{'."".. ..$!
  4031c8:	b428 2a78 de1f 2bba 6046 29fc 0a71 283e     (.x*...+F`.)q.>(
  4031d8:	1cf4 2d71 76c3 2cb3 c89a 2ef5 a2ad 2f37     ..q-.v.,......7/
  4031e8:	8dc0 709a e7f7 7158 59ae 731e 3399 72dc     ...p..Xq.Y.s.3.r
  4031f8:	251c 7793 4f2b 7651 f172 7417 9b45 75d5     .%.w+OQvr..tE..u
  403208:	dc78 7e89 b64f 7f4b 0816 7d0d 6221 7ccf     x..~O.K....}!b.|
  403218:	74a4 7980 1e93 7842 a0ca 7a04 cafd 7bc6     .t.y..Bx...z...{
  403228:	2eb0 6cbc 4487 6d7e fade 6f38 90e9 6efa     ...l.D~m..8o...n
  403238:	866c 6bb5 ec5b 6a77 5202 6831 3835 69f3     l..k[.wj.R1h58.i
  403248:	7f08 62af 153f 636d ab66 612b c151 60e9     ...b?.mcf.+aQ..`
  403258:	d7d4 65a6 bde3 6464 03ba 6622 698d 67e0     ...e..dd.."f.i.g
  403268:	cb20 48d7 a117 4915 1f4e 4b53 7579 4a91      ..H...IN.SKyu.J
  403278:	63fc 4fde 09cb 4e1c b792 4c5a dda5 4d98     .c.O...N..ZL...M
  403288:	9a98 46c4 f0af 4706 4ef6 4540 24c1 4482     ...F...G.N@E.$.D
  403298:	3244 41cd 5873 400f e62a 4249 8c1d 438b     D2.AsX.@*.IB...C
  4032a8:	6850 54f1 0267 5533 bc3e 5775 d609 56b7     Ph.Tg.3U>.uW...V
  4032b8:	c08c 53f8 aabb 523a 14e2 507c 7ed5 51be     ...S..:R..|P.~.Q
  4032c8:	39e8 5ae2 53df 5b20 ed86 5966 87b1 58a4     .9.Z.S [..fY...X
  4032d8:	9134 5deb fb03 5c29 455a 5e6f 2f6d 5fad     4..]..)\ZEo^m/._
  4032e8:	1b80 e135 71b7 e0f7 cfee e2b1 a5d9 e373     ..5..q........s.
  4032f8:	b35c e63c d96b e7fe 6732 e5b8 0d05 e47a     \.<.k...2g....z.
  403308:	4a38 ef26 200f eee4 9e56 eca2 f461 ed60     8J&.. ..V...a.`.
  403318:	e2e4 e82f 88d3 e9ed 368a ebab 5cbd ea69     ../......6...\i.
  403328:	b8f0 fd13 d2c7 fcd1 6c9e fe97 06a9 ff55     .........l....U.
  403338:	102c fa1a 7a1b fbd8 c442 f99e ae75 f85c     ,....z..B...u.\.
  403348:	e948 f300 837f f2c2 3d26 f084 5711 f146     H.......&=...WF.
  403358:	4194 f409 2ba3 f5cb 95fa f78d ffcd f64f     .A...+........O.
  403368:	5d60 d978 3757 d8ba 890e dafc e339 db3e     `]x.W7......9.>.
  403378:	f5bc de71 9f8b dfb3 21d2 ddf5 4be5 dc37     ..q......!...K7.
  403388:	0cd8 d76b 66ef d6a9 d8b6 d4ef b281 d52d     ..k..f........-.
  403398:	a404 d062 ce33 d1a0 706a d3e6 1a5d d224     ..b.3...jp..].$.
  4033a8:	fe10 c55e 9427 c49c 2a7e c6da 4049 c718     ..^.'...~*..I@..
  4033b8:	56cc c257 3cfb c395 82a2 c1d3 e895 c011     .VW..<..........
  4033c8:	afa8 cb4d c59f ca8f 7bc6 c8c9 11f1 c90b     ..M......{......
  4033d8:	0774 cc44 6d43 cd86 d31a cfc0 b92d ce02     t.D.Cm......-...
  4033e8:	9640 91af fc77 906d 422e 922b 2819 93e9     @...w.m..B+..(..
  4033f8:	3e9c 96a6 54ab 9764 eaf2 9522 80c5 94e0     .>...Td...".....
  403408:	c7f8 9fbc adcf 9e7e 1396 9c38 79a1 9dfa     ......~...8..y..
  403418:	6f24 98b5 0513 9977 bb4a 9b31 d17d 9af3     $o....w.J.1.}...
  403428:	3530 8d89 5f07 8c4b e15e 8e0d 8b69 8fcf     05..._K.^...i...
  403438:	9dec 8a80 f7db 8b42 4982 8904 23b5 88c6     ......B..I...#..
  403448:	6488 839a 0ebf 8258 b0e6 801e dad1 81dc     .d....X.........
  403458:	cc54 8493 a663 8551 183a 8717 720d 86d5     T...c.Q.:....r..
  403468:	d0a0 a9e2 ba97 a820 04ce aa66 6ef9 aba4     ...... ...f..n..
  403478:	787c aeeb 124b af29 ac12 ad6f c625 acad     |x..K.)...o.%...
  403488:	8118 a7f1 eb2f a633 5576 a475 3f41 a5b7     ..../.3.vUu.A?..
  403498:	29c4 a0f8 43f3 a13a fdaa a37c 979d a2be     .)...C:...|.....
  4034a8:	73d0 b5c4 19e7 b406 a7be b640 cd89 b782     .s........@.....
  4034b8:	db0c b2cd b13b b30f 0f62 b149 6555 b08b     ....;...b.I.Ue..
  4034c8:	2268 bbd7 485f ba15 f606 b853 9c31 b991     h".._H....S.1...
  4034d8:	8ab4 bcde e083 bd1c 5eda bf5a 34ed be98     .........^Z..4..
  4034e8:	0000 0000 6765 b8bc c88b aa09 afee 12b5     ....eg..........
  4034f8:	9757 8f62 f032 37de 5fdc 256b 38b9 9dd7     W.b.2..7._k%.8..
  403508:	28ef c5b4 4f8a 7d08 e064 6fbd 8701 d701     .(...O.}d..o....
  403518:	bfb8 4ad6 d8dd f26a 7733 e0df 1056 5863     ...J..j.3w..V.cX
  403528:	579f 5019 30fa e8a5 9f14 fa10 f871 42ac     .W.P.0......q..B
  403538:	c0c8 df7b a7ad 67c7 0843 7572 6f26 cdce     ..{....gC.ru&o..
  403548:	7f70 95ad 1815 2d11 b7fb 3fa4 d09e 8718     p......-...?....
  403558:	e827 1acf 8f42 a273 20ac b0c6 47c9 087a     '...B.s.. ...Gz.
  403568:	af3e a032 c85b 188e 67b5 0a3b 00d0 b287     >.2.[....g;.....
  403578:	3869 2f50 5f0c 97ec f0e2 8559 9787 3de5     i8P/._....Y....=
  403588:	87d1 6586 e0b4 dd3a 4f5a cf8f 283f 7733     ...e..:.ZO..?(3w
  403598:	1086 eae4 77e3 5258 d80d 40ed bf68 f851     .....wXR...@h.Q.
  4035a8:	f8a1 f02b 9fc4 4897 302a 5a22 574f e29e     ..+....H*0"ZOW..
  4035b8:	6ff6 7f49 0893 c7f5 a77d d540 c018 6dfc     .oI.....}.@....m
  4035c8:	d04e 359f b72b 8d23 18c5 9f96 7fa0 272a     N..5+.#.......*'
  4035d8:	4719 bafd 207c 0241 8f92 10f4 e8f7 a848     .G..| A.......H.
  4035e8:	583d 9b14 3f58 23a8 90b6 311d f7d3 89a1     =X..X?.#...1....
  4035f8:	cf6a 1476 a80f acca 07e1 be7f 6084 06c3     j.v..........`..
  403608:	70d2 5ea0 17b7 e61c b859 f4a9 df3c 4c15     .p.^....Y...<..L
  403618:	e785 d1c2 80e0 697e 2f0e 7bcb 486b c377     ......~i./.{kHw.
  403628:	0fa2 cb0d 68c7 73b1 c729 6104 a04c d9b8     .....h.s)..aL...
  403638:	98f5 446f ff90 fcd3 507e ee66 371b 56da     ..oD....~Pf..7.V
  403648:	274d 0eb9 4028 b605 efc6 a4b0 88a3 1c0c     M'..(@..........
  403658:	b01a 81db d77f 3967 7891 2bd2 1ff4 936e     ......g9.x.+..n.
  403668:	f703 3b26 9066 839a 3f88 912f 58ed 2993     ..&;f....?/..X.)
  403678:	6054 b444 0731 0cf8 a8df 1e4d cfba a6f1     T`D.1.....M.....
  403688:	dfec fe92 b889 462e 1767 549b 7002 ec27     .......Fg..T.p'.
  403698:	48bb 71f0 2fde c94c 8030 dbf9 e755 6345     .H.q./L.0...U.Ec
  4036a8:	a09c 6b3f c7f9 d383 6817 c136 0f72 798a     ..?k.....h6.r..y
  4036b8:	37cb e45d 50ae 5ce1 ff40 4e54 9825 f6e8     .7]..P.\@.TN%...
  4036c8:	8873 ae8b ef16 1637 40f8 0482 279d bc3e     s.....7..@...'>.
  4036d8:	1f24 21e9 7841 9955 d7af 8be0 b0ca 335c     $..!AxU.......\3
  4036e8:	b63b ed59 d15e 55e5 7eb0 4750 19d5 ffec     ;.Y.^..U.~PG....
  4036f8:	216c 623b 4609 da87 e9e7 c832 8e82 708e     l!;b.F....2....p
  403708:	9ed4 28ed f9b1 9051 565f 82e4 313a 3a58     ...(..Q._V..:1X:
  403718:	0983 a78f 6ee6 1f33 c108 0d86 a66d b53a     .....n3.....m.:.
  403728:	e1a4 bd40 86c1 05fc 292f 1749 4e4a aff5     ..@...../)I.JN..
  403738:	76f3 3222 1196 8a9e be78 982b d91d 2097     .v"2....x.+.... 
  403748:	c94b 78f4 ae2e c048 01c0 d2fd 66a5 6a41     K..x..H......fAj
  403758:	5e1c f796 3979 4f2a 9697 5d9f f1f2 e523     .^..y9*O...]..#.
  403768:	1905 4d6b 7e60 f5d7 d18e e762 b6eb 5fde     ..kM`~....b...._
  403778:	8e52 c209 e937 7ab5 46d9 6800 21bc d0bc     R...7..z.F.h.!..
  403788:	31ea 88df 568f 3063 f961 22d6 9e04 9a6a     .1...Vc0a.."..j.
  403798:	a6bd 07bd c1d8 bf01 6e36 adb4 0953 1508     ........6n..S...
  4037a8:	4e9a 1d72 29ff a5ce 8611 b77b e174 0fc7     .Nr..)....{.t...
  4037b8:	d9cd 9210 bea8 2aac 1146 3819 7623 80a5     .......*F..8#v..
  4037c8:	6675 d8c6 0110 607a aefe 72cf c99b ca73     uf....z`...r..s.
  4037d8:	f122 57a4 9647 ef18 39a9 fdad 5ecc 4511     "..WG....9...^.E
  4037e8:	ee06 764d 8963 cef1 268d dc44 41e8 64f8     ..Mvc....&D..A.d
  4037f8:	7951 f92f 1e34 4193 b1da 5326 d6bf eb9a     Qy/.4..A..&S....
  403808:	c6e9 b3f9 a18c 0b45 0e62 19f0 6907 a14c     ......E.b....iL.
  403818:	51be 3c9b 36db 8427 9935 9692 fe50 2e2e     .Q.<.6'.5...P...
  403828:	b999 2654 defc 9ee8 7112 8c5d 1677 34e1     ..T&.....q].w..4
  403838:	2ece a936 49ab 118a e645 033f 8120 bb83     ..6..I..E.?. ...
  403848:	9176 e3e0 f613 5b5c 59fd 49e9 3e98 f155     v.....\[.Y.I.>U.
  403858:	0621 6c82 6144 d43e ceaa c68b a9cf 7e37     !..lDa>.......7~
  403868:	4138 d67f 265d 6ec3 89b3 7c76 eed6 c4ca     8A..]&.n..v|....
  403878:	d66f 591d b10a e1a1 1ee4 f314 7981 4ba8     o..Y.........y.K
  403888:	69d7 13cb 0eb2 ab77 a15c b9c2 c639 017e     .i....w.\...9.~.
  403898:	fe80 9ca9 99e5 2415 360b 36a0 516e 8e1c     .......$.6.6nQ..
  4038a8:	16a7 8666 71c2 3eda de2c 2c6f b949 94d3     ..f..q.>,.o,I...
  4038b8:	81f0 0904 e695 b1b8 497b a30d 2e1e 1bb1     ........{I......
  4038c8:	3e48 43d2 592d fb6e f6c3 e9db 91a6 5167     H>.C-Yn.......gQ
  4038d8:	a91f ccb0 ce7a 740c 6194 66b9 06f1 de05     ....z..t.a.f....
  4038e8:	0000 0000 0777 9630 0eee 2c61 0999 ba51     ....w.0...a,..Q.
  4038f8:	6d07 19c4 6a70 8ff4 63e9 35a5 649e a395     .m..pj...c.5.d..
  403908:	db0e 3288 dc79 a4b8 d5e0 1ee9 d297 88d9     ...2y...........
  403918:	b609 2b4c b17e bd7c b8e7 072d bf90 911d     ..L+~.|...-.....
  403928:	b71d 6410 b06a f220 b9f3 4871 be84 de41     ...dj. ...qH..A.
  403938:	da1a 7dd4 dd6d ebe4 d4f4 51b5 d383 c785     ...}m......Q....
  403948:	6c13 5698 6b64 c0a8 62fd 7af9 658a ecc9     .l.Vdk...b.z.e..
  403958:	0114 4f5c 0663 d96c 0ffa 633d 088d f50d     ..\Oc.l...=c....
  403968:	6e3b c820 694c 5e10 60d5 e441 67a2 7271     ;n .Li.^.`A..gqr
  403978:	033c d1e4 044b 47d4 0dd2 fd85 0aa5 6bb5     <...K..G.......k
  403988:	b535 faa8 b242 6c98 bbdb d6c9 bcac 40f9     5...B..l.......@
  403998:	d832 e36c df45 755c d6dc cf0d d1ab 593d     2.l.E.\u......=Y
  4039a8:	d926 ac30 de51 3a00 d7c8 8051 d0bf 1661     &.0.Q..:..Q...a.
  4039b8:	b421 b5f4 b356 23c4 bacf 9995 bdb8 0fa5     !...V..#........
  4039c8:	0228 9eb8 055f 0888 0cc6 b2d9 0bb1 24e9     (..._..........$
  4039d8:	6f2f 877c 6858 114c 61c1 ab1d 66b6 3d2d     /o|.XhL..a...f-=
  4039e8:	dc76 9041 db01 0671 d298 bc20 d5ef 2a10     v.A...q... ....*
  4039f8:	b171 8985 b606 1fb5 bf9f a5e4 b8e8 33d4     q..............3
  403a08:	0778 a2c9 000f 34f9 0996 8ea8 0ee1 1898     x......4........
  403a18:	6a7f bb0d 6d08 2d3d 6491 976c 63e6 015c     .j...m=-.dl..c\.
  403a28:	6b6b f451 6c1c 6261 6585 d830 62f2 4e00     kkQ..lab.e0..b.N
  403a38:	066c ed95 011b 7ba5 0882 c1f4 0ff5 57c4     l......{.......W
  403a48:	b065 c6d9 b712 50e9 be8b eab8 b9fc 7c88     e......P.......|
  403a58:	dd62 df1d da15 492d d38c f37c d4fb 654c     b.....-I..|...Le
  403a68:	b24d 5861 b53a ce51 bca3 7400 bbd4 e230     M.aX:.Q....t..0.
  403a78:	df4a 41a5 d83d d795 d1a4 6dc4 d6d3 fbf4     J..A=......m....
  403a88:	6943 6ae9 6e34 fcd9 67ad 4688 60da d0b8     Ci.j4n...g.F.`..
  403a98:	0444 732d 0333 e51d 0aaa 5f4c 0ddd c97c     D.-s3.....L_..|.
  403aa8:	0550 3c71 0227 aa41 0bbe 1010 0cc9 8620     P.q<'.A....... .
  403ab8:	6857 25b5 6f20 b385 66b9 09d4 61ce 9fe4     Wh.% o...f...a..
  403ac8:	de5e 0ef9 d929 98c9 d0b0 2298 d7c7 b4a8     ^...)......"....
  403ad8:	b359 173d b42e 810d bdb7 3b5c bac0 ad6c     Y.=.......\;..l.
  403ae8:	b8ed 2083 bf9a b6b3 b603 0ce2 b174 9ad2     ... ........t...
  403af8:	d5ea 3947 d29d af77 db04 1526 dc73 8316     ..G9..w...&.s...
  403b08:	63e3 120b 6494 843b 6d0d 3e6a 6a7a a85a     .c...d;..mj>zjZ.
  403b18:	0ee4 0bcf 0993 9dff 000a 27ae 077d b19e     ...........'}...
  403b28:	0ff0 4493 0887 d2a3 011e 68f2 0669 fec2     ...D.......hi...
  403b38:	62f7 5d57 6580 cb67 6c19 7136 6b6e e706     .bW].eg..l6qnk..
  403b48:	d4fe 761b d389 e02b da10 5a7a dd67 cc4a     ...v..+...zZg.J.
  403b58:	b9f9 6fdf be8e f9ef b717 43be b060 d58e     ...o.......C`...
  403b68:	d6d6 e8a3 d1a1 7e93 d838 c4c2 df4f 52f2     .......~8...O..R
  403b78:	bbd1 f167 bca6 6757 b53f dd06 b248 4b36     ..g...Wg?...H.6K
  403b88:	0dd8 da2b 0aaf 4c1b 0336 f64a 0441 607a     ..+....L6.J.A.z`
  403b98:	60df c3ef 67a8 55df 6e31 ef8e 6946 79be     .`...g.U1n..Fi.y
  403ba8:	61cb 8cb3 66bc 1a83 6f25 a0d2 6852 36e2     .a...f..%o..Rh.6
  403bb8:	0ccc 9577 0bbb 0347 0222 b916 0555 2f26     ..w...G."...U.&/
  403bc8:	bac5 be3b bdb2 280b b42b 925a b35c 046a     ..;....(+.Z.\.j.
  403bd8:	d7c2 a7ff d0b5 31cf d92c 8b9e de5b 1dae     .......1,...[...
  403be8:	649b b0c2 63ec 26f2 6a75 9ca3 6d02 0a93     .d...c.&uj...m..
  403bf8:	099c a906 0eeb 3f36 0772 8567 0005 1357     ......6?r.g...W.
  403c08:	bf95 824a b8e2 147a b17b ae2b b60c 381b     ..J...z.{.+....8
  403c18:	d292 9b8e d5e5 0dbe dc7c b7ef db0b 21df     ........|......!
  403c28:	d386 d4d2 d4f1 42e2 dd68 f8b3 da1f 6e83     .......Bh......n
  403c38:	be81 cd16 b9f6 5b26 b06f e177 b718 7747     ......&[o.w...Gw
  403c48:	0888 e65a 0fff 706a 0666 ca3b 0111 5c0b     ..Z...jpf.;....\
  403c58:	658f ff9e 62f8 69ae 6b61 d3ff 6c16 45cf     .e...b.iak...l.E
  403c68:	0aa0 78e2 0dd7 eed2 044e 5483 0339 c2b3     ...x....N..T9...
  403c78:	67a7 6126 60d0 f716 6949 4d47 6e3e db77     .g&a.`..IiGM>nw.
  403c88:	d1ae 4a6a d6d9 dc5a df40 660b d837 f03b     ..jJ..Z.@..f7.;.
  403c98:	bca9 53ae bbde c59e b247 7fcf b530 e9ff     ...S....G...0...
  403ca8:	bdbd 1cf2 baca 8ac2 b353 3093 b424 a6a3     ........S..0$...
  403cb8:	d0ba 0536 d7cd 9306 de54 2957 d923 bf67     ..6.....T.W)#.g.
  403cc8:	66b3 2e7a 61c4 b84a 685d 021b 6f2a 942b     .fz..aJ.]h..*o+.
  403cd8:	0bb4 37be 0cc3 a18e 055a 1bdf 022d 8def     ...7....Z...-...
  403ce8:	0000 0000 1b19 4131 3632 8262 2d2b c353     ......1A26b.+-S.
  403cf8:	6c64 04c5 777d 45f4 5a56 86a7 414f c796     dl..}w.EVZ..OA..
  403d08:	d9c8 088a c2d1 49bb effa 8ae8 f4e3 cbd9     .......I........
  403d18:	b5ac 0c4f aeb5 4d7e 839e 8e2d 9887 cf1c     ..O...~M..-.....
  403d28:	c24a 5112 d953 1023 f478 d370 ef61 9241     J..QS.#.x.p.a.A.
  403d38:	ae2e 55d7 b537 14e6 981c d7b5 8305 9684     ...U7...........
  403d48:	1b82 5998 009b 18a9 2db0 dbfa 36a9 9acb     ...Y.....-...6..
  403d58:	77e6 5d5d 6cff 1c6c 41d4 df3f 5acd 9e0e     .w]].ll..A?..Z..
  403d68:	8495 a224 9f8c e315 b2a7 2046 a9be 6177     ..$.......F ..wa
  403d78:	e8f1 a6e1 f3e8 e7d0 dec3 2483 c5da 65b2     ...........$...e
  403d88:	5d5d aaae 4644 eb9f 6b6f 28cc 7076 69fd     ]]..DF..ok.(vp.i
  403d98:	3139 ae6b 2a20 ef5a 070b 2c09 1c12 6d38     91k. *Z....,..8m
  403da8:	46df f336 5dc6 b207 70ed 7154 6bf4 3065     .F6..]...pTq.ke0
  403db8:	2abb f7f3 31a2 b6c2 1c89 7591 0790 34a0     .*...1.....u...4
  403dc8:	9f17 fbbc 840e ba8d a925 79de b23c 38ef     ........%..y<..8
  403dd8:	f373 ff79 e86a be48 c541 7d1b de58 3c2a     s.y.j.H.A..}X.*<
  403de8:	79f0 054f 62e9 447e 4fc2 872d 54db c61c     .yO..b~D.O-..T..
  403df8:	1594 018a 0e8d 40bb 23a6 83e8 38bf c2d9     .......@.#...8..
  403e08:	a038 0dc5 bb21 4cf4 960a 8fa7 8d13 ce96     8...!..L........
  403e18:	cc5c 0900 d745 4831 fa6e 8b62 e177 ca53     \...E.1Hn.b.w.S.
  403e28:	bbba 545d a0a3 156c 8d88 d63f 9691 970e     ..]T..l...?.....
  403e38:	d7de 5098 ccc7 11a9 e1ec d2fa faf5 93cb     ...P............
  403e48:	6272 5cd7 796b 1de6 5440 deb5 4f59 9f84     rb.\ky..@T..YO..
  403e58:	0e16 5812 150f 1923 3824 da70 233d 9b41     ...X..#.$8p.=#A.
  403e68:	fd65 a76b e67c e65a cb57 2509 d04e 6438     e.k.|.Z.W..%N.8d
  403e78:	9101 a3ae 8a18 e29f a733 21cc bc2a 60fd     ........3..!*..`
  403e88:	24ad afe1 3fb4 eed0 129f 2d83 0986 6cb2     .$...?.....-...l
  403e98:	48c9 ab24 53d0 ea15 7efb 2946 65e2 6877     .H$..S...~F).ewh
  403ea8:	3f2f f679 2436 b748 091d 741b 1204 352a     /?y.6$H....t..*5
  403eb8:	534b f2bc 4852 b38d 6579 70de 7e60 31ef     KS..RH..ye.p`~.1
  403ec8:	e6e7 fef3 fdfe bfc2 d0d5 7c91 cbcc 3da0     ...........|...=
  403ed8:	8a83 fa36 919a bb07 bcb1 7854 a7a8 3965     ..6.......Tx..e9
  403ee8:	833b 4b98 9822 0aa9 b509 c9fa ae10 88cb     ;..K"...........
  403ef8:	ef5f 4f5d f446 0e6c d96d cd3f c274 8c0e     _.]OF.l.m.?.t...
  403f08:	5af3 4312 41ea 0223 6cc1 c170 77d8 8041     .Z.C.A#..lp..wA.
  403f18:	3697 47d7 2d8e 06e6 00a5 c5b5 1bbc 8484     .6.G.-..........
  403f28:	4171 1a8a 5a68 5bbb 7743 98e8 6c5a d9d9     qA..hZ.[Cw..Zl..
  403f38:	2d15 1e4f 360c 5f7e 1b27 9c2d 003e dd1c     .-O..6~_'.-.>...
  403f48:	98b9 1200 83a0 5331 ae8b 9062 b592 d153     ......1S..b...S.
  403f58:	f4dd 16c5 efc4 57f4 c2ef 94a7 d9f6 d596     .......W........
  403f68:	07ae e9bc 1cb7 a88d 319c 6bde 2a85 2aef     .........1.k.*.*
  403f78:	6bca ed79 70d3 ac48 5df8 6f1b 46e1 2e2a     .ky..pH..].o.F*.
  403f88:	de66 e136 c57f a007 e854 6354 f34d 2265     f.6.....T.TcM.e"
  403f98:	b202 e5f3 a91b a4c2 8430 6791 9f29 26a0     ........0..g)..&
  403fa8:	c5e4 b8ae defd f99f f3d6 3acc e8cf 7bfd     ...........:...{
  403fb8:	a980 bc6b b299 fd5a 9fb2 3e09 84ab 7f38     ..k...Z....>..8.
  403fc8:	1c2c b024 0735 f115 2a1e 3246 3107 7377     ,.$.5....*F2.1ws
  403fd8:	7048 b4e1 6b51 f5d0 467a 3683 5d63 77b2     Hp..Qk..zF.6c].w
  403fe8:	facb 4ed7 e1d2 0fe6 ccf9 ccb5 d7e0 8d84     ...N............
  403ff8:	96af 4a12 8db6 0b23 a09d c870 bb84 8941     ...J..#...p...A.
  404008:	2303 465d 381a 076c 1531 c43f 0e28 850e     .#]F.8l.1.?.(...
  404018:	4f67 4298 547e 03a9 7955 c0fa 624c 81cb     gO.B~T..Uy..Lb..
  404028:	3881 1fc5 2398 5ef4 0eb3 9da7 15aa dc96     .8...#.^........
  404038:	54e5 1b00 4ffc 5a31 62d7 9962 79ce d853     .T...O1Z.bb..yS.
  404048:	e149 174f fa50 567e d77b 952d cc62 d41c     I.O.P.~V{.-.b...
  404058:	8d2d 138a 9634 52bb bb1f 91e8 a006 d0d9     -...4..R........
  404068:	7e5e ecf3 6547 adc2 486c 6e91 5375 2fa0     ^~..Ge..lH.nuS./
  404078:	123a e836 0923 a907 2408 6a54 3f11 2b65     :.6.#....$Tj.?e+
  404088:	a796 e479 bc8f a548 91a4 661b 8abd 272a     ..y...H....f..*'
  404098:	cbf2 e0bc d0eb a18d fdc0 62de e6d9 23ef     ...........b...#
  4040a8:	bc14 bde1 a70d fcd0 8a26 3f83 913f 7eb2     ........&..??..~
  4040b8:	d070 b924 cb69 f815 e642 3b46 fd5b 7a77     p.$.i...B.F;[.wz
  4040c8:	65dc b56b 7ec5 f45a 53ee 3709 48f7 7638     .ek..~Z..S.7.H8v
  4040d8:	09b8 b1ae 12a1 f09f 3f8a 33cc 2493 72fd     .........?.3.$.r
  4040e8:	0000 0000 c201 376a 8403 6ed4 4602 59be     ......j7...n.F.Y
  4040f8:	0907 dca8 cb06 ebc2 8d04 b27c 4f05 8516     ..........|..O..
  404108:	130e b851 d10f 8f3b 970d d685 550c e1ef     ..Q...;......U..
  404118:	1a09 64f9 d808 5393 9e0a 0a2d 5c0b 3d47     ...d...S..-..\G=
  404128:	261c 70a3 e41d 47c9 a21f 1e77 601e 291d     .&.p...G..w..`.)
  404138:	2f1b ac0b ed1a 9b61 ab18 c2df 6919 f5b5     ./....a......i..
  404148:	3512 c8f2 f713 ff98 b111 a626 7310 914c     .5........&..sL.
  404158:	3c15 145a fe14 2330 b816 7a8e 7a17 4de4     .<Z...0#...z.z.M
  404168:	4d38 e046 8f39 d72c c93b 8e92 0b3a b9f8     8MF.9.,.;...:...
  404178:	443f 3cee 863e 0b84 c03c 523a 023d 6550     ?D.<>...<.:R=.Pe
  404188:	5e36 5817 9c37 6f7d da35 36c3 1834 01a9     6^.X7.}o5..64...
  404198:	5731 84bf 9530 b3d5 d332 ea6b 1133 dd01     1W..0...2.k.3...
  4041a8:	6b24 90e5 a925 a78f ef27 fe31 2d26 c95b     $k..%...'.1.&-[.
  4041b8:	6223 4c4d a022 7b27 e620 2299 2421 15f3     #bML".'{ .."!$..
  4041c8:	782a 28b4 ba2b 1fde fc29 4660 3e28 710a     *x.(+...).`F(>.q
  4041d8:	712d f41c b32c c376 f52e 9ac8 372f ada2     -q..,.v...../7..
  4041e8:	9a70 c08d 5871 f7e7 1e73 ae59 dc72 9933     p...qX..s.Y.r.3.
  4041f8:	9377 1c25 5176 2b4f 1774 72f1 d575 459b     w.%.vQO+t..ru..E
  404208:	897e 78dc 4b7f 4fb6 0d7d 1608 cf7c 2162     ~..x.K.O}...|.b!
  404218:	8079 a474 4278 931e 047a caa0 c67b fdca     y.t.xB..z...{...
  404228:	bc6c b02e 7e6d 8744 386f defa fa6e e990     l...m~D.o8..n...
  404238:	b56b 6c86 776a 5bec 3168 0252 f369 3538     k..ljw.[h1R.i.85
  404248:	af62 087f 6d63 3f15 2b61 66ab e960 51c1     b...cm.?a+.f`..Q
  404258:	a665 d4d7 6464 e3bd 2266 ba03 e067 8d69     e...dd..f"..g.i.
  404268:	d748 20cb 1549 17a1 534b 4e1f 914a 7975     H.. I...KS.NJ.uy
  404278:	de4f fc63 1c4e cb09 5a4c 92b7 984d a5dd     O.c.N...LZ..M...
  404288:	c446 989a 0647 aff0 4045 f64e 8244 c124     F...G...E@N.D.$.
  404298:	cd41 4432 0f40 7358 4942 2ae6 8b43 1d8c     A.2D@.XsBI.*C...
  4042a8:	f154 5068 3355 6702 7557 3ebc b756 09d6     T.hPU3.gWu.>V...
  4042b8:	f853 8cc0 3a52 bbaa 7c50 e214 be51 d57e     S...R:..P|..Q.~.
  4042c8:	e25a e839 205b df53 6659 86ed a458 b187     Z.9.[ S.Yf..X...
  4042d8:	eb5d 3491 295c 03fb 6f5e 5a45 ad5f 6d2f     ]..4\)..^oEZ_./m
  4042e8:	35e1 801b f7e0 b771 b1e2 eecf 73e3 d9a5     .5....q......s..
  4042f8:	3ce6 5cb3 fee7 6bd9 b8e5 3267 7ae4 050d     .<.\...k..g2.z..
  404308:	26ef 384a e4ee 0f20 a2ec 569e 60ed 61f4     .&J8.. ....V.`.a
  404318:	2fe8 e4e2 ede9 d388 abeb 8a36 69ea bd5c     ./........6..i\.
  404328:	13fd f0b8 d1fc c7d2 97fe 9e6c 55ff a906     ..........l..U..
  404338:	1afa 2c10 d8fb 1b7a 9ef9 42c4 5cf8 75ae     ...,..z....B.\.u
  404348:	00f3 48e9 c2f2 7f83 84f0 263d 46f1 1157     ...H......=&.FW.
  404358:	09f4 9441 cbf5 a32b 8df7 fa95 4ff6 cdff     ..A...+......O..
  404368:	78d9 605d bad8 5737 fcda 0e89 3edb 39e3     .x]`..7W.....>.9
  404378:	71de bcf5 b3df 8b9f f5dd d221 37dc e54b     .q........!..7K.
  404388:	6bd7 d80c a9d6 ef66 efd4 b6d8 2dd5 81b2     .k....f......-..
  404398:	62d0 04a4 a0d1 33ce e6d3 6a70 24d2 5d1a     .b.....3..pj.$.]
  4043a8:	5ec5 10fe 9cc4 2794 dac6 7e2a 18c7 4940     .^.....'..*~..@I
  4043b8:	57c2 cc56 95c3 fb3c d3c1 a282 11c0 95e8     .WV...<.........
  4043c8:	4dcb a8af 8fca 9fc5 c9c8 c67b 0bc9 f111     .M........{.....
  4043d8:	44cc 7407 86cd 436d c0cf 1ad3 02ce 2db9     .D.t..mC.......-
  4043e8:	af91 4096 6d90 77fc 2b92 2e42 e993 1928     ...@.m.w.+B...(.
  4043f8:	a696 9c3e 6497 ab54 2295 f2ea e094 c580     ..>..dT.."......
  404408:	bc9f f8c7 7e9e cfad 389c 9613 fa9d a179     .....~...8....y.
  404418:	b598 246f 7799 1305 319b 4abb f39a 7dd1     ..o$.w...1.J...}
  404428:	898d 3035 4b8c 075f 0d8e 5ee1 cf8f 698b     ..50.K_....^...i
  404438:	808a ec9d 428b dbf7 0489 8249 c688 b523     .....B....I...#.
  404448:	9a83 8864 5882 bf0e 1e80 e6b0 dc81 d1da     ..d..X..........
  404458:	9384 54cc 5185 63a6 1787 3a18 d586 0d72     ...T.Q.c...:..r.
  404468:	e2a9 a0d0 20a8 97ba 66aa ce04 a4ab f96e     ..... ...f....n.
  404478:	ebae 7c78 29af 4b12 6fad 12ac adac 25c6     ..x|.).K.o.....%
  404488:	f1a7 1881 33a6 2feb 75a4 7655 b7a5 413f     .....3./.uUv..?A
  404498:	f8a0 c429 3aa1 f343 7ca3 aafd bea2 9d97     ..)..:C..|......
  4044a8:	c4b5 d073 06b4 e719 40b6 bea7 82b7 89cd     ..s......@......
  4044b8:	cdb2 0cdb 0fb3 3bb1 49b1 620f 8bb0 5565     .......;.I.b..eU
  4044c8:	d7bb 6822 15ba 5f48 53b8 06f6 91b9 319c     .."h..H_.S.....1
  4044d8:	debc b48a 1cbd 83e0 5abf da5e 98be ed34     .........Z^...4.
  4044e8:	0000 0000 bcb8 6567 09aa 8bc8 b512 eeaf     ......ge........
  4044f8:	628f 5797 de37 32f0 6b25 dc5f d79d b938     .b.W7..2%k_...8.
  404508:	b4c5 ef28 087d 8a4f bd6f 64e0 01d7 0187     ..(.}.O.o..d....
  404518:	d64a b8bf 6af2 ddd8 dfe0 3377 6358 5610     J....j....w3Xc.V
  404528:	1950 9f57 a5e8 fa30 10fa 149f ac42 71f8     P.W...0.....B..q
  404538:	7bdf c8c0 c767 ada7 7275 4308 cecd 266f     .{..g...ur.C..o&
  404548:	ad95 707f 112d 1518 a43f fbb7 1887 9ed0     ...p-...?.......
  404558:	cf1a 27e8 73a2 428f c6b0 ac20 7a08 c947     ...'.s.B.. ..zG.
  404568:	32a0 3eaf 8e18 5bc8 3b0a b567 87b2 d000     .2.>...[.;g.....
  404578:	502f 6938 ec97 0c5f 5985 e2f0 e53d 8797     /P8i.._..Y..=...
  404588:	8665 d187 3add b4e0 8fcf 5a4f 3377 3f28     e....:....OZw3(?
  404598:	e4ea 8610 5852 e377 ed40 0dd8 51f8 68bf     ....RXw.@....Q.h
  4045a8:	2bf0 a1f8 9748 c49f 225a 2a30 9ee2 4f57     .+..H...Z"0*..WO
  4045b8:	497f f66f f5c7 9308 40d5 7da7 fc6d 18c0     .Io......@.}m...
  4045c8:	9f35 4ed0 238d 2bb7 969f c518 2a27 a07f     5..N.#.+....'*..
  4045d8:	fdba 1947 4102 7c20 f410 928f 48a8 f7e8     ..G..A |.....H..
  4045e8:	149b 3d58 a823 583f 1d31 b690 a189 d3f7     ..X=#.?X1.......
  4045f8:	7614 6acf caac 0fa8 7fbe e107 c306 8460     .v.j..........`.
  404608:	a05e d270 1ce6 b717 a9f4 59b8 154c 3cdf     ^.p........YL..<
  404618:	c2d1 85e7 7e69 e080 cb7b 0e2f 77c3 6b48     ....i~..{./..wHk
  404628:	0dcb a20f b173 c768 0461 29c7 b8d9 4ca0     ....s.h.a..)...L
  404638:	6f44 f598 d3fc 90ff 66ee 7e50 da56 1b37     Do.......fP~V.7.
  404648:	b90e 4d27 05b6 2840 b0a4 c6ef 0c1c a388     ..'M..@(........
  404658:	db81 1ab0 6739 7fd7 d22b 9178 6e93 f41f     ....9g..+.x..n..
  404668:	263b 03f7 9a83 6690 2f91 883f 9329 ed58     ;&.....f./?.).X.
  404678:	44b4 5460 f80c 3107 4d1e dfa8 f1a6 bacf     .D`T...1.M......
  404688:	92fe ecdf 2e46 89b8 9b54 6717 27ec 0270     ....F...T..g.'p.
  404698:	f071 bb48 4cc9 de2f f9db 3080 4563 55e7     q.H..L/....0cE.U
  4046a8:	3f6b 9ca0 83d3 f9c7 36c1 1768 8a79 720f     k?.......6h.y..r
  4046b8:	5de4 cb37 e15c ae50 544e 40ff e8f6 2598     .]7.\.P.NT.@...%
  4046c8:	8bae 7388 3716 16ef 8204 f840 3ebc 9d27     ...s.7....@..>'.
  4046d8:	e921 241f 5599 4178 e08b afd7 5c33 cab0     !..$.UxA....3\..
  4046e8:	59ed 3bb6 e555 5ed1 5047 b07e ecff d519     .Y.;U..^GP~.....
  4046f8:	3b62 6c21 87da 0946 32c8 e7e9 8e70 828e     b;!l..F..2..p...
  404708:	ed28 d49e 5190 b1f9 e482 5f56 583a 3a31     (....Q....V_:X1:
  404718:	8fa7 8309 331f e66e 860d 08c1 3ab5 6da6     .....3n......:.m
  404728:	40bd a4e1 fc05 c186 4917 2f29 f5af 4a4e     .@.......I)/..NJ
  404738:	2232 f376 9e8a 9611 2b98 78be 9720 1dd9     2"v......+.x ...
  404748:	f478 4bc9 48c0 2eae fdd2 c001 416a a566     x..K.H......jAf.
  404758:	96f7 1c5e 2a4f 7939 9f5d 9796 23e5 f2f1     ..^.O*9y]....#..
  404768:	6b4d 0519 d7f5 607e 62e7 8ed1 de5f ebb6     Mk....~`.b.._...
  404778:	09c2 528e b57a 37e9 0068 d946 bcd0 bc21     ...Rz..7h.F...!.
  404788:	df88 ea31 6330 8f56 d622 61f9 6a9a 049e     ..1.0cV."..a.j..
  404798:	bd07 bda6 01bf d8c1 b4ad 366e 0815 5309     ..........n6...S
  4047a8:	721d 9a4e cea5 ff29 7bb7 1186 c70f 74e1     .rN...)..{.....t
  4047b8:	1092 cdd9 ac2a a8be 1938 4611 a580 2376     ....*...8..F..v#
  4047c8:	c6d8 7566 7a60 1001 cf72 feae 73ca 9bc9     ..fu`z..r....s..
  4047d8:	a457 22f1 18ef 4796 adfd a939 1145 cc5e     W.."...G..9.E.^.
  4047e8:	4d76 06ee f1ce 6389 44dc 8d26 f864 e841     vM.....c.D&.d.A.
  4047f8:	2ff9 5179 9341 341e 2653 dab1 9aeb bfd6     ./yQA..4S&......
  404808:	f9b3 e9c6 450b 8ca1 f019 620e 4ca1 0769     .....E.....b.Li.
  404818:	9b3c be51 2784 db36 9296 3599 2e2e 50fe     <.Q..'6....5...P
  404828:	5426 99b9 e89e fcde 5d8c 1271 e134 7716     &T.......]q.4..w
  404838:	36a9 ce2e 8a11 ab49 3f03 45e6 83bb 2081     .6....I..?.E... 
  404848:	e0e3 7691 5c5b 13f6 e949 fd59 55f1 983e     ...v[\..I.Y..U>.
  404858:	826c 2106 3ed4 4461 8bc6 aace 377e cfa9     l..!.>aD....~7..
  404868:	7fd6 3841 c36e 5d26 767c b389 cac4 d6ee     ..A8n.&]|v......
  404878:	1d59 6fd6 a1e1 0ab1 14f3 e41e a84b 8179     Y..o........K.y.
  404888:	cb13 d769 77ab b20e c2b9 5ca1 7e01 39c6     ..i..w.....\.~.9
  404898:	a99c 80fe 1524 e599 a036 0b36 1c8e 6e51     ....$...6.6...Qn
  4048a8:	6686 a716 da3e c271 6f2c 2cde d394 49b9     .f..>.q.,o.,...I
  4048b8:	0409 f081 b8b1 95e6 0da3 7b49 b11b 1e2e     ..........I{....
  4048c8:	d243 483e 6efb 2d59 dbe9 c3f6 6751 a691     C.>H.nY-....Qg..
  4048d8:	b0cc 1fa9 0c74 7ace b966 9461 05de f106     ....t..zf.a.....

Disassembly of section .text._svfprintf_r%36:

004048e8 <_svfprintf_r>:
  4048e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

004048ec <.LCFI0>:
  4048ec:	ed2d 8b06 	vpush	{d8-d10}

004048f0 <.LCFI1>:
  4048f0:	b0cf      	sub	sp, #316	; 0x13c

004048f2 <.LCFI2>:
  4048f2:	460c      	mov	r4, r1
  4048f4:	9105      	str	r1, [sp, #20]
  4048f6:	4693      	mov	fp, r2
  4048f8:	930a      	str	r3, [sp, #40]	; 0x28

004048fa <.LVL1>:
  4048fa:	9011      	str	r0, [sp, #68]	; 0x44
  4048fc:	f01d fae8 	bl	421ed0 <_localeconv_r>

00404900 <.LVL2>:
  404900:	6803      	ldr	r3, [r0, #0]
  404902:	9317      	str	r3, [sp, #92]	; 0x5c

00404904 <.LVL3>:
  404904:	4618      	mov	r0, r3
  404906:	f017 febb 	bl	41c680 <strlen>

0040490a <.LVL4>:
  40490a:	89a3      	ldrh	r3, [r4, #12]
  40490c:	9015      	str	r0, [sp, #84]	; 0x54

0040490e <.LVL5>:
  40490e:	061d      	lsls	r5, r3, #24
  404910:	d503      	bpl.n	40491a <.LVL6>
  404912:	6923      	ldr	r3, [r4, #16]
  404914:	2b00      	cmp	r3, #0
  404916:	f001 8151 	beq.w	405bbc <.LBE47>

0040491a <.LVL6>:
  40491a:	2300      	movs	r3, #0
  40491c:	ed9f 8b7a 	vldr	d8, [pc, #488]	; 404b08 <.LVL46+0x4>
  404920:	ed9f 9b7b 	vldr	d9, [pc, #492]	; 404b10 <.LVL46+0xc>
  404924:	930f      	str	r3, [sp, #60]	; 0x3c
  404926:	9324      	str	r3, [sp, #144]	; 0x90
  404928:	9323      	str	r3, [sp, #140]	; 0x8c

0040492a <.LVL7>:
  40492a:	9314      	str	r3, [sp, #80]	; 0x50
  40492c:	9319      	str	r3, [sp, #100]	; 0x64
  40492e:	9312      	str	r3, [sp, #72]	; 0x48
  404930:	9318      	str	r3, [sp, #96]	; 0x60
  404932:	9316      	str	r3, [sp, #88]	; 0x58
  404934:	9303      	str	r3, [sp, #12]
  404936:	465e      	mov	r6, fp
  404938:	ab25      	add	r3, sp, #148	; 0x94

0040493a <.LVL8>:
  40493a:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 404b18 <.LVL46+0x14>
  40493e:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44

00404942 <.LVL9>:
  404942:	9322      	str	r3, [sp, #136]	; 0x88
  404944:	4699      	mov	r9, r3

00404946 <.LVL10>:
  404946:	7833      	ldrb	r3, [r6, #0]
  404948:	4634      	mov	r4, r6
  40494a:	b1e3      	cbz	r3, 404986 <.LVL18>
  40494c:	2b25      	cmp	r3, #37	; 0x25
  40494e:	d102      	bne.n	404956 <.LVL12>
  404950:	e019      	b.n	404986 <.LVL18>

00404952 <.LVL11>:
  404952:	2b25      	cmp	r3, #37	; 0x25
  404954:	d003      	beq.n	40495e <.LVL14>

00404956 <.LVL12>:
  404956:	f814 3f01 	ldrb.w	r3, [r4, #1]!

0040495a <.LVL13>:
  40495a:	2b00      	cmp	r3, #0
  40495c:	d1f9      	bne.n	404952 <.LVL11>

0040495e <.LVL14>:
  40495e:	1ba5      	subs	r5, r4, r6
  404960:	b18d      	cbz	r5, 404986 <.LVL18>
  404962:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404964:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404966:	f8c9 6000 	str.w	r6, [r9]
  40496a:	3301      	adds	r3, #1
  40496c:	442a      	add	r2, r5
  40496e:	2b07      	cmp	r3, #7
  404970:	f8c9 5004 	str.w	r5, [r9, #4]
  404974:	9224      	str	r2, [sp, #144]	; 0x90

00404976 <.LVL15>:
  404976:	9323      	str	r3, [sp, #140]	; 0x8c
  404978:	f300 809d 	bgt.w	404ab6 <.LVL36>

0040497c <.LVL16>:
  40497c:	f109 0908 	add.w	r9, r9, #8

00404980 <.LVL17>:
  404980:	9b03      	ldr	r3, [sp, #12]
  404982:	442b      	add	r3, r5
  404984:	9303      	str	r3, [sp, #12]

00404986 <.LVL18>:
  404986:	7823      	ldrb	r3, [r4, #0]
  404988:	2b00      	cmp	r3, #0
  40498a:	f001 80ca 	beq.w	405b22 <.LDL1>

0040498e <.LVL19>:
  40498e:	2300      	movs	r3, #0
  404990:	f04f 32ff 	mov.w	r2, #4294967295
  404994:	4698      	mov	r8, r3
  404996:	9307      	str	r3, [sp, #28]
  404998:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
  40499c:	1c67      	adds	r7, r4, #1

0040499e <.LVL20>:
  40499e:	7863      	ldrb	r3, [r4, #1]
  4049a0:	9204      	str	r2, [sp, #16]
  4049a2:	242b      	movs	r4, #43	; 0x2b

004049a4 <.LVL21>:
  4049a4:	2520      	movs	r5, #32

004049a6 <.LVL22>:
  4049a6:	3701      	adds	r7, #1
  4049a8:	f1a3 0220 	sub.w	r2, r3, #32
  4049ac:	2a5a      	cmp	r2, #90	; 0x5a
  4049ae:	f200 83e4 	bhi.w	40517a <.LVL218>
  4049b2:	e8df f012 	tbh	[pc, r2, lsl #1]
  4049b6:	02a5      	.short	0x02a5
  4049b8:	03e203e2 	.word	0x03e203e2
  4049bc:	03e202ae 	.word	0x03e202ae
  4049c0:	03e203e2 	.word	0x03e203e2
  4049c4:	03e2005f 	.word	0x03e2005f
  4049c8:	02b203e2 	.word	0x02b203e2
  4049cc:	03e202bf 	.word	0x03e202bf
  4049d0:	02cd007c 	.word	0x02cd007c
  4049d4:	02e703e2 	.word	0x02e703e2
  4049d8:	03d203d2 	.word	0x03d203d2
  4049dc:	03d203d2 	.word	0x03d203d2
  4049e0:	03d203d2 	.word	0x03d203d2
  4049e4:	03d203d2 	.word	0x03d203d2
  4049e8:	03e203d2 	.word	0x03e203d2
  4049ec:	03e203e2 	.word	0x03e203e2
  4049f0:	03e203e2 	.word	0x03e203e2
  4049f4:	03e203e2 	.word	0x03e203e2
  4049f8:	03e2034a 	.word	0x03e2034a
  4049fc:	0392037c 	.word	0x0392037c
  404a00:	034a034a 	.word	0x034a034a
  404a04:	03e2034a 	.word	0x03e2034a
  404a08:	03e203e2 	.word	0x03e203e2
  404a0c:	02eb03e2 	.word	0x02eb03e2
  404a10:	03e203e2 	.word	0x03e203e2
  404a14:	03e202ef 	.word	0x03e202ef
  404a18:	03e203e2 	.word	0x03e203e2
  404a1c:	03e20300 	.word	0x03e20300
  404a20:	03e20327 	.word	0x03e20327
  404a24:	029403e2 	.word	0x029403e2
  404a28:	03e203e2 	.word	0x03e203e2
  404a2c:	03e203e2 	.word	0x03e203e2
  404a30:	03e203e2 	.word	0x03e203e2
  404a34:	03e203e2 	.word	0x03e203e2
  404a38:	03e2034a 	.word	0x03e2034a
  404a3c:	0254037c 	.word	0x0254037c
  404a40:	034a034a 	.word	0x034a034a
  404a44:	02c3034a 	.word	0x02c3034a
  404a48:	005b0254 	.word	0x005b0254
  404a4c:	03b003e2 	.word	0x03b003e2
  404a50:	03ba03e2 	.word	0x03ba03e2
  404a54:	03380223 	.word	0x03380223
  404a58:	03e2005b 	.word	0x03e2005b
  404a5c:	00760300 	.word	0x00760300
  404a60:	03e2023e 	.word	0x03e2023e
  404a64:	00b303e2 	.word	0x00b303e2
  404a68:	007603e2 	.word	0x007603e2
  404a6c:	f048 0820 	orr.w	r8, r8, #32
  404a70:	783b      	ldrb	r3, [r7, #0]
  404a72:	e798      	b.n	4049a6 <.LVL22>
  404a74:	4658      	mov	r0, fp
  404a76:	f01d fa2b 	bl	421ed0 <_localeconv_r>

00404a7a <.LVL25>:
  404a7a:	6843      	ldr	r3, [r0, #4]
  404a7c:	9316      	str	r3, [sp, #88]	; 0x58

00404a7e <.LVL26>:
  404a7e:	4618      	mov	r0, r3
  404a80:	f017 fdfe 	bl	41c680 <strlen>

00404a84 <.LVL27>:
  404a84:	9018      	str	r0, [sp, #96]	; 0x60

00404a86 <.LVL28>:
  404a86:	4658      	mov	r0, fp
  404a88:	f01d fa22 	bl	421ed0 <_localeconv_r>

00404a8c <.LVL29>:
  404a8c:	6883      	ldr	r3, [r0, #8]
  404a8e:	9312      	str	r3, [sp, #72]	; 0x48

00404a90 <.LVL30>:
  404a90:	9b18      	ldr	r3, [sp, #96]	; 0x60

00404a92 <.LVL31>:
  404a92:	b133      	cbz	r3, 404aa2 <.LVL32>
  404a94:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404a96:	b123      	cbz	r3, 404aa2 <.LVL32>
  404a98:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404a9a:	781b      	ldrb	r3, [r3, #0]
  404a9c:	2b00      	cmp	r3, #0
  404a9e:	f041 8083 	bne.w	405ba8 <.LVL513>

00404aa2 <.LVL32>:
  404aa2:	783b      	ldrb	r3, [r7, #0]
  404aa4:	e77f      	b.n	4049a6 <.LVL22>

00404aa6 <.LVL33>:
  404aa6:	9a07      	ldr	r2, [sp, #28]
  404aa8:	930a      	str	r3, [sp, #40]	; 0x28
  404aaa:	4252      	negs	r2, r2
  404aac:	9207      	str	r2, [sp, #28]

00404aae <.LVL34>:
  404aae:	f048 0804 	orr.w	r8, r8, #4
  404ab2:	783b      	ldrb	r3, [r7, #0]
  404ab4:	e777      	b.n	4049a6 <.LVL22>

00404ab6 <.LVL36>:
  404ab6:	aa22      	add	r2, sp, #136	; 0x88
  404ab8:	9905      	ldr	r1, [sp, #20]
  404aba:	4658      	mov	r0, fp
  404abc:	f017 f93a 	bl	41bd34 <.LFE61>

00404ac0 <.LVL37>:
  404ac0:	b980      	cbnz	r0, 404ae4 <.LVL44>

00404ac2 <.LVL38>:
  404ac2:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00404ac6 <.LVL39>:
  404ac6:	e75b      	b.n	404980 <.LVL17>

00404ac8 <.LVL40>:
  404ac8:	aa22      	add	r2, sp, #136	; 0x88

00404aca <.LVL41>:
  404aca:	9905      	ldr	r1, [sp, #20]
  404acc:	4658      	mov	r0, fp
  404ace:	f017 f931 	bl	41bd34 <.LFE61>

00404ad2 <.LVL42>:
  404ad2:	2800      	cmp	r0, #0
  404ad4:	f000 8182 	beq.w	404ddc <.LVL119>

00404ad8 <.L189>:
  404ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404ada:	b11b      	cbz	r3, 404ae4 <.LVL44>
  404adc:	9909      	ldr	r1, [sp, #36]	; 0x24
  404ade:	9811      	ldr	r0, [sp, #68]	; 0x44
  404ae0:	f014 fc4e 	bl	419380 <_free_r>

00404ae4 <.LVL44>:
  404ae4:	9b05      	ldr	r3, [sp, #20]
  404ae6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
  404aea:	f013 0f40 	tst.w	r3, #64	; 0x40
  404aee:	9b03      	ldr	r3, [sp, #12]
  404af0:	bf18      	it	ne
  404af2:	f04f 33ff 	movne.w	r3, #4294967295
  404af6:	9303      	str	r3, [sp, #12]

00404af8 <.LVL45>:
  404af8:	9803      	ldr	r0, [sp, #12]
  404afa:	b04f      	add	sp, #316	; 0x13c

00404afc <.LCFI3>:
  404afc:	ecbd 8b06 	vpop	{d8-d10}

00404b00 <.LCFI4>:
  404b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00404b04 <.LVL46>:
  404b04:	f3af 8000 	nop.w
	...
  404b10:	ffffffff 	.word	0xffffffff
  404b14:	7fefffff 	.word	0x7fefffff
  404b18:	0042232c 	.word	0x0042232c

00404b1c <.L45>:
  404b1c:	930d      	str	r3, [sp, #52]	; 0x34
  404b1e:	f018 0f20 	tst.w	r8, #32
  404b22:	4bb4      	ldr	r3, [pc, #720]	; (404df4 <.LVL122+0x4>)
  404b24:	9314      	str	r3, [sp, #80]	; 0x50

00404b26 <.LVL48>:
  404b26:	f040 81e1 	bne.w	404eec <.LVL150>
  404b2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404b2c:	f018 0f10 	tst.w	r8, #16
  404b30:	4613      	mov	r3, r2
  404b32:	f040 859d 	bne.w	405670 <.LVL365>
  404b36:	f018 0f40 	tst.w	r8, #64	; 0x40
  404b3a:	f041 801d 	bne.w	405b78 <.LVL506>
  404b3e:	f418 7f00 	tst.w	r8, #512	; 0x200
  404b42:	f000 8595 	beq.w	405670 <.LVL365>

00404b46 <.LVL49>:
  404b46:	3304      	adds	r3, #4

00404b48 <.LVL50>:
  404b48:	7814      	ldrb	r4, [r2, #0]
  404b4a:	930a      	str	r3, [sp, #40]	; 0x28
  404b4c:	2500      	movs	r5, #0

00404b4e <.LVL51>:
  404b4e:	f018 0f01 	tst.w	r8, #1
  404b52:	d00b      	beq.n	404b6c <.LVL51+0x1e>
  404b54:	ea54 0305 	orrs.w	r3, r4, r5
  404b58:	d008      	beq.n	404b6c <.LVL51+0x1e>
  404b5a:	2330      	movs	r3, #48	; 0x30
  404b5c:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
  404b60:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
  404b64:	f048 0802 	orr.w	r8, r8, #2
  404b68:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
  404b6c:	f428 6180 	bic.w	r1, r8, #1024	; 0x400

00404b70 <.LVL53>:
  404b70:	2302      	movs	r3, #2

00404b72 <.L150>:
  404b72:	2200      	movs	r2, #0
  404b74:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b

00404b78 <.L65>:
  404b78:	9804      	ldr	r0, [sp, #16]
  404b7a:	1c42      	adds	r2, r0, #1
  404b7c:	f000 8190 	beq.w	404ea0 <.LVL139>

00404b80 <.LVL56>:
  404b80:	ea54 0205 	orrs.w	r2, r4, r5
  404b84:	f021 0880 	bic.w	r8, r1, #128	; 0x80

00404b88 <.LVL57>:
  404b88:	f040 818f 	bne.w	404eaa <.LVL140>
  404b8c:	2800      	cmp	r0, #0
  404b8e:	f040 8409 	bne.w	4053a4 <.LVL271>
  404b92:	2b00      	cmp	r3, #0
  404b94:	f040 84a2 	bne.w	4054dc <.LBE13>
  404b98:	f011 0301 	ands.w	r3, r1, #1

00404b9c <.LVL58>:
  404b9c:	ae4e      	add	r6, sp, #312	; 0x138

00404b9e <.LVL59>:
  404b9e:	9308      	str	r3, [sp, #32]
  404ba0:	d002      	beq.n	404ba8 <.LVL61>

00404ba2 <.LVL60>:
  404ba2:	2330      	movs	r3, #48	; 0x30
  404ba4:	f806 3d01 	strb.w	r3, [r6, #-1]!

00404ba8 <.LVL61>:
  404ba8:	2300      	movs	r3, #0
  404baa:	9a08      	ldr	r2, [sp, #32]
  404bac:	9309      	str	r3, [sp, #36]	; 0x24
  404bae:	9313      	str	r3, [sp, #76]	; 0x4c
  404bb0:	9310      	str	r3, [sp, #64]	; 0x40
  404bb2:	930e      	str	r3, [sp, #56]	; 0x38
  404bb4:	9b04      	ldr	r3, [sp, #16]
  404bb6:	4293      	cmp	r3, r2
  404bb8:	bfb8      	it	lt
  404bba:	4613      	movlt	r3, r2
  404bbc:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  404bc0:	9302      	str	r3, [sp, #8]

00404bc2 <.L59>:
  404bc2:	b112      	cbz	r2, 404bca <.LVL64>

00404bc4 <.LVL63>:
  404bc4:	9b02      	ldr	r3, [sp, #8]
  404bc6:	3301      	adds	r3, #1
  404bc8:	9302      	str	r3, [sp, #8]

00404bca <.LVL64>:
  404bca:	f018 0302 	ands.w	r3, r8, #2
  404bce:	930b      	str	r3, [sp, #44]	; 0x2c
  404bd0:	d002      	beq.n	404bd8 <.LVL64+0xe>
  404bd2:	9b02      	ldr	r3, [sp, #8]
  404bd4:	3302      	adds	r3, #2
  404bd6:	9302      	str	r3, [sp, #8]
  404bd8:	f018 0384 	ands.w	r3, r8, #132	; 0x84
  404bdc:	930c      	str	r3, [sp, #48]	; 0x30
  404bde:	f040 82ea 	bne.w	4051b6 <.LVL227>
  404be2:	9b07      	ldr	r3, [sp, #28]
  404be4:	9902      	ldr	r1, [sp, #8]
  404be6:	1a5c      	subs	r4, r3, r1

00404be8 <.LVL66>:
  404be8:	2c00      	cmp	r4, #0
  404bea:	f340 82e4 	ble.w	4051b6 <.LVL227>
  404bee:	2c10      	cmp	r4, #16
  404bf0:	9924      	ldr	r1, [sp, #144]	; 0x90
  404bf2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  404bf4:	4d80      	ldr	r5, [pc, #512]	; (404df8 <.LVL122+0x8>)
  404bf6:	dd25      	ble.n	404c44 <.LVL80>
  404bf8:	4648      	mov	r0, r9
  404bfa:	2310      	movs	r3, #16
  404bfc:	46c1      	mov	r9, r8
  404bfe:	46b0      	mov	r8, r6

00404c00 <.LVL67>:
  404c00:	9e05      	ldr	r6, [sp, #20]
  404c02:	e004      	b.n	404c0e <.LVL71>

00404c04 <.LVL68>:
  404c04:	3c10      	subs	r4, #16

00404c06 <.LVL69>:
  404c06:	2c10      	cmp	r4, #16
  404c08:	f100 0008 	add.w	r0, r0, #8

00404c0c <.LVL70>:
  404c0c:	dd17      	ble.n	404c3e <.LVL79>

00404c0e <.LVL71>:
  404c0e:	3201      	adds	r2, #1
  404c10:	3110      	adds	r1, #16
  404c12:	2a07      	cmp	r2, #7
  404c14:	9124      	str	r1, [sp, #144]	; 0x90

00404c16 <.LVL72>:
  404c16:	9223      	str	r2, [sp, #140]	; 0x8c
  404c18:	6005      	str	r5, [r0, #0]
  404c1a:	6043      	str	r3, [r0, #4]
  404c1c:	ddf2      	ble.n	404c04 <.LVL68>
  404c1e:	aa22      	add	r2, sp, #136	; 0x88
  404c20:	4631      	mov	r1, r6
  404c22:	4658      	mov	r0, fp

00404c24 <.LVL73>:
  404c24:	9306      	str	r3, [sp, #24]
  404c26:	f017 f885 	bl	41bd34 <.LFE61>

00404c2a <.LVL74>:
  404c2a:	2800      	cmp	r0, #0
  404c2c:	f47f af54 	bne.w	404ad8 <.L189>
  404c30:	3c10      	subs	r4, #16

00404c32 <.LVL75>:
  404c32:	2c10      	cmp	r4, #16
  404c34:	9924      	ldr	r1, [sp, #144]	; 0x90
  404c36:	9a23      	ldr	r2, [sp, #140]	; 0x8c

00404c38 <.LVL76>:
  404c38:	9b06      	ldr	r3, [sp, #24]

00404c3a <.LVL77>:
  404c3a:	a825      	add	r0, sp, #148	; 0x94

00404c3c <.LVL78>:
  404c3c:	dce7      	bgt.n	404c0e <.LVL71>

00404c3e <.LVL79>:
  404c3e:	4646      	mov	r6, r8
  404c40:	46c8      	mov	r8, r9
  404c42:	4681      	mov	r9, r0

00404c44 <.LVL80>:
  404c44:	3201      	adds	r2, #1
  404c46:	1863      	adds	r3, r4, r1
  404c48:	2a07      	cmp	r2, #7
  404c4a:	9324      	str	r3, [sp, #144]	; 0x90
  404c4c:	9223      	str	r2, [sp, #140]	; 0x8c
  404c4e:	f8c9 5000 	str.w	r5, [r9]
  404c52:	f8c9 4004 	str.w	r4, [r9, #4]
  404c56:	f300 848f 	bgt.w	405578 <.LVL333>

00404c5a <.LVL81>:
  404c5a:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  404c5e:	f109 0908 	add.w	r9, r9, #8

00404c62 <.LVL82>:
  404c62:	b172      	cbz	r2, 404c82 <.LVL84>
  404c64:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  404c66:	3201      	adds	r2, #1
  404c68:	3301      	adds	r3, #1
  404c6a:	f10d 006b 	add.w	r0, sp, #107	; 0x6b
  404c6e:	2101      	movs	r1, #1
  404c70:	2a07      	cmp	r2, #7
  404c72:	9324      	str	r3, [sp, #144]	; 0x90
  404c74:	9223      	str	r2, [sp, #140]	; 0x8c
  404c76:	e889 0003 	stmia.w	r9, {r0, r1}
  404c7a:	f300 83a9 	bgt.w	4053d0 <.LVL278>

00404c7e <.LVL83>:
  404c7e:	f109 0908 	add.w	r9, r9, #8

00404c82 <.LVL84>:
  404c82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404c84:	b16a      	cbz	r2, 404ca2 <.LVL86>
  404c86:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  404c88:	3201      	adds	r2, #1
  404c8a:	3302      	adds	r3, #2
  404c8c:	a81b      	add	r0, sp, #108	; 0x6c
  404c8e:	2102      	movs	r1, #2
  404c90:	2a07      	cmp	r2, #7
  404c92:	9324      	str	r3, [sp, #144]	; 0x90
  404c94:	9223      	str	r2, [sp, #140]	; 0x8c
  404c96:	e889 0003 	stmia.w	r9, {r0, r1}
  404c9a:	f300 83a5 	bgt.w	4053e8 <.LVL282>

00404c9e <.LVL85>:
  404c9e:	f109 0908 	add.w	r9, r9, #8

00404ca2 <.LVL86>:
  404ca2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404ca4:	2a80      	cmp	r2, #128	; 0x80
  404ca6:	f000 82eb 	beq.w	405280 <.LVL243>
  404caa:	9a04      	ldr	r2, [sp, #16]
  404cac:	9908      	ldr	r1, [sp, #32]
  404cae:	1a54      	subs	r4, r2, r1

00404cb0 <.LVL87>:
  404cb0:	2c00      	cmp	r4, #0
  404cb2:	dd36      	ble.n	404d22 <.LVL102>
  404cb4:	2c10      	cmp	r4, #16
  404cb6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  404cb8:	dd26      	ble.n	404d08 <.LVL100>
  404cba:	4649      	mov	r1, r9
  404cbc:	2510      	movs	r5, #16
  404cbe:	46a1      	mov	r9, r4
  404cc0:	9c05      	ldr	r4, [sp, #20]

00404cc2 <.LVL88>:
  404cc2:	e006      	b.n	404cd2 <.LVL92>

00404cc4 <.LVL89>:
  404cc4:	f1a9 0910 	sub.w	r9, r9, #16

00404cc8 <.LVL90>:
  404cc8:	f1b9 0f10 	cmp.w	r9, #16
  404ccc:	f101 0108 	add.w	r1, r1, #8

00404cd0 <.LVL91>:
  404cd0:	dd18      	ble.n	404d04 <.LVL99>

00404cd2 <.LVL92>:
  404cd2:	3201      	adds	r2, #1
  404cd4:	3310      	adds	r3, #16
  404cd6:	2a07      	cmp	r2, #7
  404cd8:	9324      	str	r3, [sp, #144]	; 0x90

00404cda <.LVL93>:
  404cda:	9223      	str	r2, [sp, #140]	; 0x8c
  404cdc:	f8c1 a000 	str.w	sl, [r1]
  404ce0:	604d      	str	r5, [r1, #4]
  404ce2:	ddef      	ble.n	404cc4 <.LVL89>
  404ce4:	aa22      	add	r2, sp, #136	; 0x88
  404ce6:	4621      	mov	r1, r4

00404ce8 <.LVL94>:
  404ce8:	4658      	mov	r0, fp
  404cea:	f017 f823 	bl	41bd34 <.LFE61>

00404cee <.LVL95>:
  404cee:	2800      	cmp	r0, #0
  404cf0:	f47f aef2 	bne.w	404ad8 <.L189>
  404cf4:	f1a9 0910 	sub.w	r9, r9, #16

00404cf8 <.LVL96>:
  404cf8:	f1b9 0f10 	cmp.w	r9, #16
  404cfc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404cfe:	9a23      	ldr	r2, [sp, #140]	; 0x8c

00404d00 <.LVL97>:
  404d00:	a925      	add	r1, sp, #148	; 0x94

00404d02 <.LVL98>:
  404d02:	dce6      	bgt.n	404cd2 <.LVL92>

00404d04 <.LVL99>:
  404d04:	464c      	mov	r4, r9
  404d06:	4689      	mov	r9, r1

00404d08 <.LVL100>:
  404d08:	3201      	adds	r2, #1
  404d0a:	4423      	add	r3, r4
  404d0c:	2a07      	cmp	r2, #7
  404d0e:	9324      	str	r3, [sp, #144]	; 0x90
  404d10:	9223      	str	r2, [sp, #140]	; 0x8c
  404d12:	f8c9 a000 	str.w	sl, [r9]
  404d16:	f8c9 4004 	str.w	r4, [r9, #4]
  404d1a:	f300 834d 	bgt.w	4053b8 <.LVL274>

00404d1e <.LVL101>:
  404d1e:	f109 0908 	add.w	r9, r9, #8

00404d22 <.LVL102>:
  404d22:	f418 7f80 	tst.w	r8, #256	; 0x100
  404d26:	f040 824f 	bne.w	4051c8 <.LVL228>
  404d2a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  404d2c:	9808      	ldr	r0, [sp, #32]
  404d2e:	f8c9 6000 	str.w	r6, [r9]
  404d32:	3201      	adds	r2, #1
  404d34:	4403      	add	r3, r0
  404d36:	2a07      	cmp	r2, #7
  404d38:	9324      	str	r3, [sp, #144]	; 0x90
  404d3a:	f8c9 0004 	str.w	r0, [r9, #4]
  404d3e:	9223      	str	r2, [sp, #140]	; 0x8c
  404d40:	f300 8324 	bgt.w	40538c <.LVL269>

00404d44 <.LVL103>:
  404d44:	f109 0908 	add.w	r9, r9, #8

00404d48 <.LVL104>:
  404d48:	f018 0f04 	tst.w	r8, #4
  404d4c:	d03b      	beq.n	404dc6 <.LVL117>
  404d4e:	9a07      	ldr	r2, [sp, #28]
  404d50:	9902      	ldr	r1, [sp, #8]
  404d52:	1a54      	subs	r4, r2, r1

00404d54 <.LVL105>:
  404d54:	2c00      	cmp	r4, #0
  404d56:	dd36      	ble.n	404dc6 <.LVL117>
  404d58:	2c10      	cmp	r4, #16
  404d5a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  404d5c:	4d26      	ldr	r5, [pc, #152]	; (404df8 <.LVL122+0x8>)
  404d5e:	dd1f      	ble.n	404da0 <.LVL115>
  404d60:	2610      	movs	r6, #16
  404d62:	f8dd 8014 	ldr.w	r8, [sp, #20]
  404d66:	e004      	b.n	404d72 <.LVL109>

00404d68 <.LVL106>:
  404d68:	3c10      	subs	r4, #16

00404d6a <.LVL107>:
  404d6a:	2c10      	cmp	r4, #16
  404d6c:	f109 0908 	add.w	r9, r9, #8

00404d70 <.LVL108>:
  404d70:	dd16      	ble.n	404da0 <.LVL115>

00404d72 <.LVL109>:
  404d72:	3201      	adds	r2, #1
  404d74:	3310      	adds	r3, #16
  404d76:	2a07      	cmp	r2, #7
  404d78:	9324      	str	r3, [sp, #144]	; 0x90

00404d7a <.LVL110>:
  404d7a:	9223      	str	r2, [sp, #140]	; 0x8c
  404d7c:	e889 0060 	stmia.w	r9, {r5, r6}
  404d80:	ddf2      	ble.n	404d68 <.LVL106>
  404d82:	aa22      	add	r2, sp, #136	; 0x88
  404d84:	4641      	mov	r1, r8
  404d86:	4658      	mov	r0, fp
  404d88:	f016 ffd4 	bl	41bd34 <.LFE61>

00404d8c <.LVL111>:
  404d8c:	2800      	cmp	r0, #0
  404d8e:	f47f aea3 	bne.w	404ad8 <.L189>
  404d92:	3c10      	subs	r4, #16

00404d94 <.LVL112>:
  404d94:	2c10      	cmp	r4, #16
  404d96:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404d98:	9a23      	ldr	r2, [sp, #140]	; 0x8c

00404d9a <.LVL113>:
  404d9a:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00404d9e <.LVL114>:
  404d9e:	dce8      	bgt.n	404d72 <.LVL109>

00404da0 <.LVL115>:
  404da0:	3201      	adds	r2, #1
  404da2:	4423      	add	r3, r4
  404da4:	2a07      	cmp	r2, #7
  404da6:	9324      	str	r3, [sp, #144]	; 0x90
  404da8:	9223      	str	r2, [sp, #140]	; 0x8c
  404daa:	f8c9 5000 	str.w	r5, [r9]
  404dae:	f8c9 4004 	str.w	r4, [r9, #4]
  404db2:	dd08      	ble.n	404dc6 <.LVL117>
  404db4:	aa22      	add	r2, sp, #136	; 0x88
  404db6:	9905      	ldr	r1, [sp, #20]
  404db8:	4658      	mov	r0, fp
  404dba:	f016 ffbb 	bl	41bd34 <.LFE61>

00404dbe <.LVL116>:
  404dbe:	2800      	cmp	r0, #0
  404dc0:	f47f ae8a 	bne.w	404ad8 <.L189>
  404dc4:	9b24      	ldr	r3, [sp, #144]	; 0x90

00404dc6 <.LVL117>:
  404dc6:	9a03      	ldr	r2, [sp, #12]
  404dc8:	9907      	ldr	r1, [sp, #28]
  404dca:	9802      	ldr	r0, [sp, #8]
  404dcc:	4281      	cmp	r1, r0
  404dce:	bfac      	ite	ge
  404dd0:	1852      	addge	r2, r2, r1
  404dd2:	1812      	addlt	r2, r2, r0
  404dd4:	9203      	str	r2, [sp, #12]

00404dd6 <.LVL118>:
  404dd6:	2b00      	cmp	r3, #0
  404dd8:	f47f ae76 	bne.w	404ac8 <.LVL40>

00404ddc <.LVL119>:
  404ddc:	2300      	movs	r3, #0
  404dde:	9323      	str	r3, [sp, #140]	; 0x8c

00404de0 <.LVL120>:
  404de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404de2:	b11b      	cbz	r3, 404dec <.LVL121>
  404de4:	9909      	ldr	r1, [sp, #36]	; 0x24
  404de6:	4658      	mov	r0, fp
  404de8:	f014 faca 	bl	419380 <_free_r>

00404dec <.LVL121>:
  404dec:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00404df0 <.LVL122>:
  404df0:	463e      	mov	r6, r7
  404df2:	e5a8      	b.n	404946 <.LVL10>
  404df4:	00420ee4 	.word	0x00420ee4
  404df8:	0042231c 	.word	0x0042231c

00404dfc <.LVL123>:
  404dfc:	f018 0f20 	tst.w	r8, #32
  404e00:	930d      	str	r3, [sp, #52]	; 0x34
  404e02:	f040 80ce 	bne.w	404fa2 <.LVL168+0x1e>
  404e06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404e08:	f018 0f10 	tst.w	r8, #16
  404e0c:	4613      	mov	r3, r2
  404e0e:	f040 8419 	bne.w	405644 <.LVL358>
  404e12:	f018 0f40 	tst.w	r8, #64	; 0x40
  404e16:	f040 86a2 	bne.w	405b5e <.LVL502>
  404e1a:	f418 7f00 	tst.w	r8, #512	; 0x200
  404e1e:	f000 8411 	beq.w	405644 <.LVL358>

00404e22 <.LVL124>:
  404e22:	3304      	adds	r3, #4

00404e24 <.LVL125>:
  404e24:	7814      	ldrb	r4, [r2, #0]
  404e26:	930a      	str	r3, [sp, #40]	; 0x28
  404e28:	2500      	movs	r5, #0

00404e2a <.LVL126>:
  404e2a:	f428 6180 	bic.w	r1, r8, #1024	; 0x400

00404e2e <.LVL127>:
  404e2e:	2300      	movs	r3, #0
  404e30:	e69f      	b.n	404b72 <.L150>

00404e32 <.LVL128>:
  404e32:	4641      	mov	r1, r8

00404e34 <.LVL129>:
  404e34:	068e      	lsls	r6, r1, #26

00404e36 <.LVL130>:
  404e36:	930d      	str	r3, [sp, #52]	; 0x34
  404e38:	f100 80ea 	bmi.w	405010 <.LVL180+0x6>
  404e3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404e3e:	06cd      	lsls	r5, r1, #27
  404e40:	4613      	mov	r3, r2
  404e42:	f100 8405 	bmi.w	405650 <.LVL360>
  404e46:	064c      	lsls	r4, r1, #25
  404e48:	f100 868f 	bmi.w	405b6a <.LVL504>
  404e4c:	0588      	lsls	r0, r1, #22
  404e4e:	f140 83ff 	bpl.w	405650 <.LVL360>

00404e52 <.LVL131>:
  404e52:	7814      	ldrb	r4, [r2, #0]
  404e54:	3204      	adds	r2, #4

00404e56 <.LVL132>:
  404e56:	2500      	movs	r5, #0
  404e58:	2301      	movs	r3, #1
  404e5a:	920a      	str	r2, [sp, #40]	; 0x28
  404e5c:	e689      	b.n	404b72 <.L150>

00404e5e <.LVL133>:
  404e5e:	4641      	mov	r1, r8

00404e60 <.LVL134>:
  404e60:	068c      	lsls	r4, r1, #26
  404e62:	930d      	str	r3, [sp, #52]	; 0x34
  404e64:	f100 813f 	bmi.w	4050e6 <.LVL198+0x8>
  404e68:	06c8      	lsls	r0, r1, #27
  404e6a:	f100 83f8 	bmi.w	40565e <.LVL362>
  404e6e:	064a      	lsls	r2, r1, #25
  404e70:	f100 8688 	bmi.w	405b84 <.LVL508>
  404e74:	058b      	lsls	r3, r1, #22
  404e76:	f140 83f2 	bpl.w	40565e <.LVL362>

00404e7a <.LVL135>:
  404e7a:	980a      	ldr	r0, [sp, #40]	; 0x28
  404e7c:	f990 4000 	ldrsb.w	r4, [r0]

00404e80 <.LVL136>:
  404e80:	17e5      	asrs	r5, r4, #31
  404e82:	3004      	adds	r0, #4
  404e84:	4622      	mov	r2, r4
  404e86:	462b      	mov	r3, r5
  404e88:	900a      	str	r0, [sp, #40]	; 0x28

00404e8a <.LVL137>:
  404e8a:	2a00      	cmp	r2, #0
  404e8c:	f173 0300 	sbcs.w	r3, r3, #0
  404e90:	f2c0 8139 	blt.w	405106 <.LVL201>
  404e94:	9804      	ldr	r0, [sp, #16]
  404e96:	1c42      	adds	r2, r0, #1
  404e98:	f04f 0301 	mov.w	r3, #1

00404e9c <.LVL138>:
  404e9c:	f47f ae70 	bne.w	404b80 <.LVL56>

00404ea0 <.LVL139>:
  404ea0:	ea54 0205 	orrs.w	r2, r4, r5
  404ea4:	f000 827f 	beq.w	4053a6 <.LVL272>
  404ea8:	4688      	mov	r8, r1

00404eaa <.LVL140>:
  404eaa:	2b01      	cmp	r3, #1
  404eac:	f000 831e 	beq.w	4054ec <.LVL316>
  404eb0:	2b02      	cmp	r3, #2
  404eb2:	f040 82a8 	bne.w	405406 <.LVL288>

00404eb6 <.LVL141>:
  404eb6:	9814      	ldr	r0, [sp, #80]	; 0x50

00404eb8 <.LVL142>:
  404eb8:	ae4e      	add	r6, sp, #312	; 0x138

00404eba <.LVL143>:
  404eba:	0923      	lsrs	r3, r4, #4
  404ebc:	f004 010f 	and.w	r1, r4, #15
  404ec0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  404ec4:	092a      	lsrs	r2, r5, #4
  404ec6:	461c      	mov	r4, r3

00404ec8 <.LVL144>:
  404ec8:	4615      	mov	r5, r2

00404eca <.LVL145>:
  404eca:	5c43      	ldrb	r3, [r0, r1]
  404ecc:	f806 3d01 	strb.w	r3, [r6, #-1]!

00404ed0 <.LVL146>:
  404ed0:	ea54 0305 	orrs.w	r3, r4, r5
  404ed4:	d1f1      	bne.n	404eba <.LVL143>

00404ed6 <.LVL147>:
  404ed6:	ab4e      	add	r3, sp, #312	; 0x138
  404ed8:	1b9b      	subs	r3, r3, r6
  404eda:	9308      	str	r3, [sp, #32]
  404edc:	e664      	b.n	404ba8 <.LVL61>

00404ede <.LVL148>:
  404ede:	930d      	str	r3, [sp, #52]	; 0x34
  404ee0:	f018 0f20 	tst.w	r8, #32
  404ee4:	4bb5      	ldr	r3, [pc, #724]	; (4051bc <.LVL227+0x6>)
  404ee6:	9314      	str	r3, [sp, #80]	; 0x50

00404ee8 <.LVL149>:
  404ee8:	f43f ae1f 	beq.w	404b2a <.LVL48+0x4>

00404eec <.LVL150>:
  404eec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404eee:	3507      	adds	r5, #7
  404ef0:	f025 0307 	bic.w	r3, r5, #7
  404ef4:	f103 0208 	add.w	r2, r3, #8
  404ef8:	920a      	str	r2, [sp, #40]	; 0x28

00404efa <.LVL151>:
  404efa:	e9d3 4500 	ldrd	r4, r5, [r3]
  404efe:	e626      	b.n	404b4e <.LVL51>

00404f00 <.LVL152>:
  404f00:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
  404f04:	2b00      	cmp	r3, #0
  404f06:	f47f adcc 	bne.w	404aa2 <.LVL32>
  404f0a:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
  404f0e:	783b      	ldrb	r3, [r7, #0]
  404f10:	e549      	b.n	4049a6 <.LVL22>
  404f12:	f048 0801 	orr.w	r8, r8, #1
  404f16:	783b      	ldrb	r3, [r7, #0]
  404f18:	e545      	b.n	4049a6 <.LVL22>
  404f1a:	990a      	ldr	r1, [sp, #40]	; 0x28
  404f1c:	680b      	ldr	r3, [r1, #0]
  404f1e:	9307      	str	r3, [sp, #28]
  404f20:	461a      	mov	r2, r3
  404f22:	2a00      	cmp	r2, #0
  404f24:	460b      	mov	r3, r1
  404f26:	f103 0304 	add.w	r3, r3, #4

00404f2a <.LVL154>:
  404f2a:	f6ff adbc 	blt.w	404aa6 <.LVL33>
  404f2e:	930a      	str	r3, [sp, #40]	; 0x28
  404f30:	783b      	ldrb	r3, [r7, #0]

00404f32 <.LVL155>:
  404f32:	e538      	b.n	4049a6 <.LVL22>
  404f34:	f88d 406b 	strb.w	r4, [sp, #107]	; 0x6b
  404f38:	783b      	ldrb	r3, [r7, #0]
  404f3a:	e534      	b.n	4049a6 <.LVL22>

00404f3c <.LVL156>:
  404f3c:	783b      	ldrb	r3, [r7, #0]
  404f3e:	2b68      	cmp	r3, #104	; 0x68
  404f40:	bf03      	ittte	eq
  404f42:	787b      	ldrbeq	r3, [r7, #1]
  404f44:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
  404f48:	3701      	addeq	r7, #1

00404f4a <.LVL158>:
  404f4a:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
  404f4e:	e52a      	b.n	4049a6 <.LVL22>

00404f50 <.LVL160>:
  404f50:	783b      	ldrb	r3, [r7, #0]
  404f52:	2b2a      	cmp	r3, #42	; 0x2a
  404f54:	f107 0101 	add.w	r1, r7, #1

00404f58 <.LVL161>:
  404f58:	f001 811c 	beq.w	406194 <.LVL687>

00404f5c <.LVL162>:
  404f5c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  404f60:	2a09      	cmp	r2, #9
  404f62:	460f      	mov	r7, r1
  404f64:	f201 804a 	bhi.w	405ffc <.LVL637>
  404f68:	2300      	movs	r3, #0

00404f6a <.LVL163>:
  404f6a:	4619      	mov	r1, r3

00404f6c <.LVL164>:
  404f6c:	f817 3b01 	ldrb.w	r3, [r7], #1

00404f70 <.LVL165>:
  404f70:	eb01 0181 	add.w	r1, r1, r1, lsl #2

00404f74 <.LVL166>:
  404f74:	eb02 0141 	add.w	r1, r2, r1, lsl #1

00404f78 <.LVL167>:
  404f78:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  404f7c:	2a09      	cmp	r2, #9
  404f7e:	d9f5      	bls.n	404f6c <.LVL164>
  404f80:	9104      	str	r1, [sp, #16]
  404f82:	e511      	b.n	4049a8 <.LVL22+0x2>

00404f84 <.LVL168>:
  404f84:	f048 0880 	orr.w	r8, r8, #128	; 0x80
  404f88:	783b      	ldrb	r3, [r7, #0]
  404f8a:	e50c      	b.n	4049a6 <.LVL22>
  404f8c:	f048 0808 	orr.w	r8, r8, #8
  404f90:	783b      	ldrb	r3, [r7, #0]
  404f92:	e508      	b.n	4049a6 <.LVL22>
  404f94:	f048 0810 	orr.w	r8, r8, #16
  404f98:	f018 0f20 	tst.w	r8, #32
  404f9c:	930d      	str	r3, [sp, #52]	; 0x34
  404f9e:	f43f af32 	beq.w	404e06 <.LVL123+0xa>
  404fa2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404fa4:	3507      	adds	r5, #7
  404fa6:	f025 0307 	bic.w	r3, r5, #7
  404faa:	f103 0208 	add.w	r2, r3, #8
  404fae:	920a      	str	r2, [sp, #40]	; 0x28

00404fb0 <.LVL172>:
  404fb0:	e9d3 4500 	ldrd	r4, r5, [r3]
  404fb4:	e739      	b.n	404e2a <.LVL126>

00404fb6 <.LVL173>:
  404fb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404fb8:	930d      	str	r3, [sp, #52]	; 0x34
  404fba:	6816      	ldr	r6, [r2, #0]

00404fbc <.LVL174>:
  404fbc:	2400      	movs	r4, #0
  404fbe:	f88d 406b 	strb.w	r4, [sp, #107]	; 0x6b
  404fc2:	1d15      	adds	r5, r2, #4

00404fc4 <.LVL175>:
  404fc4:	2e00      	cmp	r6, #0
  404fc6:	f000 873d 	beq.w	405e44 <.LVL593>
  404fca:	9a04      	ldr	r2, [sp, #16]
  404fcc:	1c53      	adds	r3, r2, #1
  404fce:	f000 869b 	beq.w	405d08 <.LVL549>

00404fd2 <.LBB11>:
  404fd2:	4621      	mov	r1, r4
  404fd4:	4630      	mov	r0, r6
  404fd6:	f019 f913 	bl	41e200 <memchr>

00404fda <.LVL176>:
  404fda:	9009      	str	r0, [sp, #36]	; 0x24
  404fdc:	2800      	cmp	r0, #0
  404fde:	f000 8782 	beq.w	405ee6 <.LBB63>
  404fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404fe4:	9404      	str	r4, [sp, #16]
  404fe6:	1b9b      	subs	r3, r3, r6
  404fe8:	461a      	mov	r2, r3
  404fea:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  404fee:	9308      	str	r3, [sp, #32]

00404ff0 <.LBE11>:
  404ff0:	950a      	str	r5, [sp, #40]	; 0x28

00404ff2 <.LBB12>:
  404ff2:	4623      	mov	r3, r4
  404ff4:	9202      	str	r2, [sp, #8]

00404ff6 <.LBE12>:
  404ff6:	9309      	str	r3, [sp, #36]	; 0x24
  404ff8:	9313      	str	r3, [sp, #76]	; 0x4c
  404ffa:	9310      	str	r3, [sp, #64]	; 0x40
  404ffc:	930e      	str	r3, [sp, #56]	; 0x38
  404ffe:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  405002:	e5de      	b.n	404bc2 <.L59>

00405004 <.LVL178>:
  405004:	f048 0110 	orr.w	r1, r8, #16

00405008 <.LVL179>:
  405008:	068e      	lsls	r6, r1, #26

0040500a <.LVL180>:
  40500a:	930d      	str	r3, [sp, #52]	; 0x34
  40500c:	f57f af16 	bpl.w	404e3c <.LVL130+0x6>
  405010:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  405012:	3507      	adds	r5, #7
  405014:	f025 0307 	bic.w	r3, r5, #7
  405018:	f103 0208 	add.w	r2, r3, #8
  40501c:	e9d3 4500 	ldrd	r4, r5, [r3]
  405020:	920a      	str	r2, [sp, #40]	; 0x28

00405022 <.LVL181>:
  405022:	2301      	movs	r3, #1
  405024:	e5a5      	b.n	404b72 <.L150>

00405026 <.LVL182>:
  405026:	980a      	ldr	r0, [sp, #40]	; 0x28
  405028:	4b65      	ldr	r3, [pc, #404]	; (4051c0 <.LVL227+0xa>)
  40502a:	6804      	ldr	r4, [r0, #0]
  40502c:	9314      	str	r3, [sp, #80]	; 0x50

0040502e <.LVL183>:
  40502e:	2230      	movs	r2, #48	; 0x30
  405030:	2378      	movs	r3, #120	; 0x78
  405032:	3004      	adds	r0, #4

00405034 <.LVL184>:
  405034:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
  405038:	930d      	str	r3, [sp, #52]	; 0x34
  40503a:	f048 0102 	orr.w	r1, r8, #2
  40503e:	900a      	str	r0, [sp, #40]	; 0x28
  405040:	2500      	movs	r5, #0

00405042 <.LVL185>:
  405042:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c

00405046 <.LVL186>:
  405046:	2302      	movs	r3, #2
  405048:	e593      	b.n	404b72 <.L150>

0040504a <.LVL187>:
  40504a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40504c:	930d      	str	r3, [sp, #52]	; 0x34
  40504e:	f018 0f08 	tst.w	r8, #8
  405052:	f105 0507 	add.w	r5, r5, #7
  405056:	f000 84ed 	beq.w	405a34 <.LVL468>
  40505a:	f025 0307 	bic.w	r3, r5, #7
  40505e:	ed93 8b00 	vldr	d8, [r3]

00405062 <.LVL188>:
  405062:	f103 0208 	add.w	r2, r3, #8
  405066:	920a      	str	r2, [sp, #40]	; 0x28

00405068 <.LVL189>:
  405068:	eeb0 7bc8 	vabs.f64	d7, d8
  40506c:	eeb4 7b49 	vcmp.f64	d7, d9
  405070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405074:	f340 8439 	ble.w	4058ea <.LBE27>
  405078:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
  40507c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405080:	f100 86f0 	bmi.w	405e64 <.LVL595>
  405084:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  405088:	4e4e      	ldr	r6, [pc, #312]	; (4051c4 <.LVL227+0xe>)

0040508a <.LVL190>:
  40508a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40508c:	2303      	movs	r3, #3
  40508e:	2100      	movs	r1, #0
  405090:	4618      	mov	r0, r3
  405092:	9302      	str	r3, [sp, #8]
  405094:	1f33      	subs	r3, r6, #4
  405096:	9109      	str	r1, [sp, #36]	; 0x24
  405098:	f028 0880 	bic.w	r8, r8, #128	; 0x80

0040509c <.LVL191>:
  40509c:	2c47      	cmp	r4, #71	; 0x47
  40509e:	bfd8      	it	le
  4050a0:	461e      	movle	r6, r3

004050a2 <.LVL192>:
  4050a2:	9008      	str	r0, [sp, #32]
  4050a4:	9104      	str	r1, [sp, #16]
  4050a6:	9113      	str	r1, [sp, #76]	; 0x4c
  4050a8:	9110      	str	r1, [sp, #64]	; 0x40
  4050aa:	910e      	str	r1, [sp, #56]	; 0x38
  4050ac:	e589      	b.n	404bc2 <.L59>

004050ae <.LVL193>:
  4050ae:	980a      	ldr	r0, [sp, #40]	; 0x28
  4050b0:	930d      	str	r3, [sp, #52]	; 0x34
  4050b2:	6801      	ldr	r1, [r0, #0]
  4050b4:	f88d 10d4 	strb.w	r1, [sp, #212]	; 0xd4

004050b8 <.LVL194>:
  4050b8:	2300      	movs	r3, #0
  4050ba:	4601      	mov	r1, r0
  4050bc:	461a      	mov	r2, r3
  4050be:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
  4050c2:	3104      	adds	r1, #4

004050c4 <.LVL195>:
  4050c4:	2301      	movs	r3, #1
  4050c6:	9302      	str	r3, [sp, #8]
  4050c8:	9209      	str	r2, [sp, #36]	; 0x24
  4050ca:	9204      	str	r2, [sp, #16]
  4050cc:	9213      	str	r2, [sp, #76]	; 0x4c
  4050ce:	9210      	str	r2, [sp, #64]	; 0x40
  4050d0:	920e      	str	r2, [sp, #56]	; 0x38
  4050d2:	910a      	str	r1, [sp, #40]	; 0x28
  4050d4:	9308      	str	r3, [sp, #32]
  4050d6:	ae35      	add	r6, sp, #212	; 0xd4

004050d8 <.LVL196>:
  4050d8:	e577      	b.n	404bca <.LVL64>

004050da <.LVL197>:
  4050da:	f048 0110 	orr.w	r1, r8, #16

004050de <.LVL198>:
  4050de:	068c      	lsls	r4, r1, #26
  4050e0:	930d      	str	r3, [sp, #52]	; 0x34
  4050e2:	f57f aec1 	bpl.w	404e68 <.LVL134+0x8>
  4050e6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4050e8:	3507      	adds	r5, #7
  4050ea:	f025 0507 	bic.w	r5, r5, #7
  4050ee:	e9d5 2300 	ldrd	r2, r3, [r5]
  4050f2:	2a00      	cmp	r2, #0
  4050f4:	f105 0008 	add.w	r0, r5, #8
  4050f8:	461d      	mov	r5, r3
  4050fa:	f173 0300 	sbcs.w	r3, r3, #0
  4050fe:	900a      	str	r0, [sp, #40]	; 0x28

00405100 <.LVL199>:
  405100:	4614      	mov	r4, r2

00405102 <.LVL200>:
  405102:	f6bf aec7 	bge.w	404e94 <.LVL137+0xa>

00405106 <.LVL201>:
  405106:	232d      	movs	r3, #45	; 0x2d
  405108:	4264      	negs	r4, r4

0040510a <.LVL202>:
  40510a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
  40510e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1

00405112 <.LVL203>:
  405112:	2301      	movs	r3, #1
  405114:	e530      	b.n	404b78 <.L65>

00405116 <.LVL204>:
  405116:	783b      	ldrb	r3, [r7, #0]
  405118:	2b6c      	cmp	r3, #108	; 0x6c
  40511a:	bf03      	ittte	eq
  40511c:	787b      	ldrbeq	r3, [r7, #1]
  40511e:	f048 0820 	orreq.w	r8, r8, #32
  405122:	3701      	addeq	r7, #1

00405124 <.LVL206>:
  405124:	f048 0810 	orrne.w	r8, r8, #16
  405128:	e43d      	b.n	4049a6 <.LVL22>

0040512a <.LVL208>:
  40512a:	f018 0f20 	tst.w	r8, #32
  40512e:	f040 8509 	bne.w	405b44 <.LVL499>
  405132:	f018 0f10 	tst.w	r8, #16
  405136:	d135      	bne.n	4051a4 <.LVL222>
  405138:	f018 0f40 	tst.w	r8, #64	; 0x40
  40513c:	f040 8678 	bne.w	405e30 <.LBE23>
  405140:	f418 7f00 	tst.w	r8, #512	; 0x200
  405144:	d02e      	beq.n	4051a4 <.LVL222>

00405146 <.LVL209>:
  405146:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405148:	6813      	ldr	r3, [r2, #0]
  40514a:	3204      	adds	r2, #4

0040514c <.LVL210>:
  40514c:	920a      	str	r2, [sp, #40]	; 0x28
  40514e:	f89d 200c 	ldrb.w	r2, [sp, #12]

00405152 <.LVL211>:
  405152:	701a      	strb	r2, [r3, #0]
  405154:	463e      	mov	r6, r7

00405156 <.LVL212>:
  405156:	f7ff bbf6 	b.w	404946 <.LVL10>

0040515a <.LVL213>:
  40515a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40515e:	2300      	movs	r3, #0
  405160:	4619      	mov	r1, r3

00405162 <.LVL214>:
  405162:	f817 3b01 	ldrb.w	r3, [r7], #1

00405166 <.LVL215>:
  405166:	eb01 0181 	add.w	r1, r1, r1, lsl #2

0040516a <.LVL216>:
  40516a:	eb02 0141 	add.w	r1, r2, r1, lsl #1

0040516e <.LVL217>:
  40516e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  405172:	2a09      	cmp	r2, #9
  405174:	d9f5      	bls.n	405162 <.LVL214>
  405176:	9107      	str	r1, [sp, #28]
  405178:	e416      	b.n	4049a8 <.LVL22+0x2>

0040517a <.LVL218>:
  40517a:	4619      	mov	r1, r3
  40517c:	930d      	str	r3, [sp, #52]	; 0x34
  40517e:	2b00      	cmp	r3, #0
  405180:	f000 84cf 	beq.w	405b22 <.LDL1>

00405184 <.LVL219>:
  405184:	2300      	movs	r3, #0
  405186:	2001      	movs	r0, #1
  405188:	461a      	mov	r2, r3
  40518a:	9002      	str	r0, [sp, #8]
  40518c:	f88d 10d4 	strb.w	r1, [sp, #212]	; 0xd4

00405190 <.LVL220>:
  405190:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
  405194:	9309      	str	r3, [sp, #36]	; 0x24
  405196:	9304      	str	r3, [sp, #16]
  405198:	9313      	str	r3, [sp, #76]	; 0x4c
  40519a:	9310      	str	r3, [sp, #64]	; 0x40
  40519c:	930e      	str	r3, [sp, #56]	; 0x38
  40519e:	9008      	str	r0, [sp, #32]
  4051a0:	ae35      	add	r6, sp, #212	; 0xd4

004051a2 <.LVL221>:
  4051a2:	e512      	b.n	404bca <.LVL64>

004051a4 <.LVL222>:
  4051a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4051a6:	6813      	ldr	r3, [r2, #0]
  4051a8:	3204      	adds	r2, #4

004051aa <.LVL223>:
  4051aa:	920a      	str	r2, [sp, #40]	; 0x28
  4051ac:	9a03      	ldr	r2, [sp, #12]

004051ae <.LVL224>:
  4051ae:	601a      	str	r2, [r3, #0]

004051b0 <.LVL225>:
  4051b0:	463e      	mov	r6, r7

004051b2 <.LVL226>:
  4051b2:	f7ff bbc8 	b.w	404946 <.LVL10>

004051b6 <.LVL227>:
  4051b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4051b8:	e553      	b.n	404c62 <.LVL82>
  4051ba:	bf00      	nop
  4051bc:	00420ed0 	.word	0x00420ed0
  4051c0:	00420ee4 	.word	0x00420ee4
  4051c4:	00420ec4 	.word	0x00420ec4

004051c8 <.LVL228>:
  4051c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4051ca:	2a65      	cmp	r2, #101	; 0x65
  4051cc:	f340 8096 	ble.w	4052fc <.LVL260>
  4051d0:	eeb5 8b40 	vcmp.f64	d8, #0.0
  4051d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4051d8:	f040 8139 	bne.w	40544e <.LVL295>
  4051dc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  4051de:	49c2      	ldr	r1, [pc, #776]	; (4054e8 <.LVL315+0x6>)
  4051e0:	f8c9 1000 	str.w	r1, [r9]
  4051e4:	3201      	adds	r2, #1
  4051e6:	3301      	adds	r3, #1
  4051e8:	2101      	movs	r1, #1
  4051ea:	2a07      	cmp	r2, #7
  4051ec:	9324      	str	r3, [sp, #144]	; 0x90
  4051ee:	9223      	str	r2, [sp, #140]	; 0x8c
  4051f0:	f8c9 1004 	str.w	r1, [r9, #4]
  4051f4:	f300 8444 	bgt.w	405a80 <.LBE21>

004051f8 <.LVL229>:
  4051f8:	f109 0908 	add.w	r9, r9, #8

004051fc <.LVL230>:
  4051fc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  4051fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405200:	4293      	cmp	r3, r2
  405202:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405204:	db03      	blt.n	40520e <.LVL230+0x12>
  405206:	f018 0f01 	tst.w	r8, #1
  40520a:	f43f ad9d 	beq.w	404d48 <.LVL104>
  40520e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  405210:	9815      	ldr	r0, [sp, #84]	; 0x54
  405212:	9917      	ldr	r1, [sp, #92]	; 0x5c
  405214:	f8c9 1000 	str.w	r1, [r9]
  405218:	3201      	adds	r2, #1
  40521a:	4403      	add	r3, r0
  40521c:	2a07      	cmp	r2, #7
  40521e:	f8c9 0004 	str.w	r0, [r9, #4]
  405222:	9324      	str	r3, [sp, #144]	; 0x90

00405224 <.LVL231>:
  405224:	9223      	str	r2, [sp, #140]	; 0x8c
  405226:	f300 84b2 	bgt.w	405b8e <.LVL509>

0040522a <.LVL232>:
  40522a:	f109 0908 	add.w	r9, r9, #8

0040522e <.LVL233>:
  40522e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405230:	1e54      	subs	r4, r2, #1
  405232:	2c00      	cmp	r4, #0
  405234:	f77f ad88 	ble.w	404d48 <.LVL104>
  405238:	2c10      	cmp	r4, #16
  40523a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40523c:	f340 8308 	ble.w	405850 <.LVL421>
  405240:	2510      	movs	r5, #16
  405242:	9e05      	ldr	r6, [sp, #20]
  405244:	e005      	b.n	405252 <.LVL238>

00405246 <.LVL235>:
  405246:	f109 0908 	add.w	r9, r9, #8

0040524a <.LVL236>:
  40524a:	3c10      	subs	r4, #16
  40524c:	2c10      	cmp	r4, #16
  40524e:	f340 82ff 	ble.w	405850 <.LVL421>

00405252 <.LVL238>:
  405252:	3201      	adds	r2, #1
  405254:	3310      	adds	r3, #16
  405256:	2a07      	cmp	r2, #7
  405258:	9324      	str	r3, [sp, #144]	; 0x90

0040525a <.LVL239>:
  40525a:	9223      	str	r2, [sp, #140]	; 0x8c
  40525c:	f8c9 a000 	str.w	sl, [r9]
  405260:	f8c9 5004 	str.w	r5, [r9, #4]
  405264:	ddef      	ble.n	405246 <.LVL235>
  405266:	aa22      	add	r2, sp, #136	; 0x88
  405268:	4631      	mov	r1, r6
  40526a:	4658      	mov	r0, fp
  40526c:	f016 fd62 	bl	41bd34 <.LFE61>

00405270 <.LVL240>:
  405270:	2800      	cmp	r0, #0
  405272:	f47f ac31 	bne.w	404ad8 <.L189>
  405276:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405278:	9a23      	ldr	r2, [sp, #140]	; 0x8c

0040527a <.LVL241>:
  40527a:	f10d 0994 	add.w	r9, sp, #148	; 0x94

0040527e <.LVL242>:
  40527e:	e7e4      	b.n	40524a <.LVL236>

00405280 <.LVL243>:
  405280:	9a07      	ldr	r2, [sp, #28]
  405282:	9902      	ldr	r1, [sp, #8]
  405284:	1a54      	subs	r4, r2, r1

00405286 <.LVL244>:
  405286:	2c00      	cmp	r4, #0
  405288:	f77f ad0f 	ble.w	404caa <.LVL86+0x8>
  40528c:	2c10      	cmp	r4, #16
  40528e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  405290:	dd26      	ble.n	4052e0 <.LVL257>
  405292:	4649      	mov	r1, r9
  405294:	2510      	movs	r5, #16
  405296:	46a1      	mov	r9, r4
  405298:	9c05      	ldr	r4, [sp, #20]

0040529a <.LVL245>:
  40529a:	e006      	b.n	4052aa <.LVL249>

0040529c <.LVL246>:
  40529c:	f1a9 0910 	sub.w	r9, r9, #16

004052a0 <.LVL247>:
  4052a0:	f1b9 0f10 	cmp.w	r9, #16
  4052a4:	f101 0108 	add.w	r1, r1, #8

004052a8 <.LVL248>:
  4052a8:	dd18      	ble.n	4052dc <.LVL256>

004052aa <.LVL249>:
  4052aa:	3201      	adds	r2, #1
  4052ac:	3310      	adds	r3, #16
  4052ae:	2a07      	cmp	r2, #7
  4052b0:	9324      	str	r3, [sp, #144]	; 0x90

004052b2 <.LVL250>:
  4052b2:	9223      	str	r2, [sp, #140]	; 0x8c
  4052b4:	f8c1 a000 	str.w	sl, [r1]
  4052b8:	604d      	str	r5, [r1, #4]
  4052ba:	ddef      	ble.n	40529c <.LVL246>
  4052bc:	aa22      	add	r2, sp, #136	; 0x88
  4052be:	4621      	mov	r1, r4

004052c0 <.LVL251>:
  4052c0:	4658      	mov	r0, fp
  4052c2:	f016 fd37 	bl	41bd34 <.LFE61>

004052c6 <.LVL252>:
  4052c6:	2800      	cmp	r0, #0
  4052c8:	f47f ac06 	bne.w	404ad8 <.L189>
  4052cc:	f1a9 0910 	sub.w	r9, r9, #16

004052d0 <.LVL253>:
  4052d0:	f1b9 0f10 	cmp.w	r9, #16
  4052d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4052d6:	9a23      	ldr	r2, [sp, #140]	; 0x8c

004052d8 <.LVL254>:
  4052d8:	a925      	add	r1, sp, #148	; 0x94

004052da <.LVL255>:
  4052da:	dce6      	bgt.n	4052aa <.LVL249>

004052dc <.LVL256>:
  4052dc:	464c      	mov	r4, r9
  4052de:	4689      	mov	r9, r1

004052e0 <.LVL257>:
  4052e0:	3201      	adds	r2, #1
  4052e2:	4423      	add	r3, r4
  4052e4:	2a07      	cmp	r2, #7
  4052e6:	9324      	str	r3, [sp, #144]	; 0x90
  4052e8:	9223      	str	r2, [sp, #140]	; 0x8c
  4052ea:	f8c9 a000 	str.w	sl, [r9]
  4052ee:	f8c9 4004 	str.w	r4, [r9, #4]
  4052f2:	f300 82e6 	bgt.w	4058c2 <.LVL432>

004052f6 <.LVL258>:
  4052f6:	f109 0908 	add.w	r9, r9, #8

004052fa <.LVL259>:
  4052fa:	e4d6      	b.n	404caa <.LVL86+0x8>

004052fc <.LVL260>:
  4052fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4052fe:	f8c9 6000 	str.w	r6, [r9]
  405302:	2a01      	cmp	r2, #1
  405304:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  405306:	f103 0301 	add.w	r3, r3, #1
  40530a:	f102 0201 	add.w	r2, r2, #1
  40530e:	f04f 0101 	mov.w	r1, #1
  405312:	9324      	str	r3, [sp, #144]	; 0x90
  405314:	9223      	str	r2, [sp, #140]	; 0x8c
  405316:	f8c9 1004 	str.w	r1, [r9, #4]
  40531a:	f340 82a5 	ble.w	405868 <.LBE19>
  40531e:	2a07      	cmp	r2, #7
  405320:	f300 82b5 	bgt.w	40588e <.LBE26>
  405324:	f109 0908 	add.w	r9, r9, #8

00405328 <.LVL261>:
  405328:	9815      	ldr	r0, [sp, #84]	; 0x54
  40532a:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40532c:	f8c9 1000 	str.w	r1, [r9]
  405330:	3201      	adds	r2, #1
  405332:	4403      	add	r3, r0
  405334:	2a07      	cmp	r2, #7
  405336:	9324      	str	r3, [sp, #144]	; 0x90

00405338 <.LVL262>:
  405338:	9223      	str	r2, [sp, #140]	; 0x8c
  40533a:	f8c9 0004 	str.w	r0, [r9, #4]
  40533e:	f300 82b3 	bgt.w	4058a8 <.LVL429>
  405342:	f109 0908 	add.w	r9, r9, #8

00405346 <.LVL263>:
  405346:	eeb5 8b40 	vcmp.f64	d8, #0.0
  40534a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40534e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405350:	f000 8121 	beq.w	405596 <.LVL337>
  405354:	3901      	subs	r1, #1
  405356:	3201      	adds	r2, #1
  405358:	3601      	adds	r6, #1

0040535a <.LVL264>:
  40535a:	440b      	add	r3, r1
  40535c:	2a07      	cmp	r2, #7
  40535e:	f8c9 6000 	str.w	r6, [r9]
  405362:	9223      	str	r2, [sp, #140]	; 0x8c
  405364:	9324      	str	r3, [sp, #144]	; 0x90

00405366 <.LVL265>:
  405366:	f8c9 1004 	str.w	r1, [r9, #4]
  40536a:	f300 8146 	bgt.w	4055fa <.LVL348>

0040536e <.LVL266>:
  40536e:	f109 0908 	add.w	r9, r9, #8

00405372 <.LVL267>:
  405372:	9819      	ldr	r0, [sp, #100]	; 0x64
  405374:	f8c9 0004 	str.w	r0, [r9, #4]
  405378:	3201      	adds	r2, #1
  40537a:	4403      	add	r3, r0
  40537c:	a91e      	add	r1, sp, #120	; 0x78
  40537e:	2a07      	cmp	r2, #7
  405380:	9324      	str	r3, [sp, #144]	; 0x90

00405382 <.LVL268>:
  405382:	9223      	str	r2, [sp, #140]	; 0x8c
  405384:	f8c9 1000 	str.w	r1, [r9]
  405388:	f77f acdc 	ble.w	404d44 <.LVL103>

0040538c <.LVL269>:
  40538c:	aa22      	add	r2, sp, #136	; 0x88
  40538e:	9905      	ldr	r1, [sp, #20]
  405390:	4658      	mov	r0, fp
  405392:	f016 fccf 	bl	41bd34 <.LFE61>

00405396 <.LVL270>:
  405396:	2800      	cmp	r0, #0
  405398:	f47f ab9e 	bne.w	404ad8 <.L189>
  40539c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40539e:	f10d 0994 	add.w	r9, sp, #148	; 0x94
  4053a2:	e4d1      	b.n	404d48 <.LVL104>

004053a4 <.LVL271>:
  4053a4:	4641      	mov	r1, r8

004053a6 <.LVL272>:
  4053a6:	2b01      	cmp	r3, #1
  4053a8:	f000 8135 	beq.w	405616 <.LVL351>
  4053ac:	2b02      	cmp	r3, #2
  4053ae:	d127      	bne.n	405400 <.LVL286>
  4053b0:	4688      	mov	r8, r1
  4053b2:	2400      	movs	r4, #0

004053b4 <.LVL273>:
  4053b4:	2500      	movs	r5, #0
  4053b6:	e57e      	b.n	404eb6 <.LVL141>

004053b8 <.LVL274>:
  4053b8:	aa22      	add	r2, sp, #136	; 0x88
  4053ba:	9905      	ldr	r1, [sp, #20]
  4053bc:	4658      	mov	r0, fp
  4053be:	f016 fcb9 	bl	41bd34 <.LFE61>

004053c2 <.LVL275>:
  4053c2:	2800      	cmp	r0, #0
  4053c4:	f47f ab88 	bne.w	404ad8 <.L189>
  4053c8:	9b24      	ldr	r3, [sp, #144]	; 0x90

004053ca <.LVL276>:
  4053ca:	f10d 0994 	add.w	r9, sp, #148	; 0x94

004053ce <.LVL277>:
  4053ce:	e4a8      	b.n	404d22 <.LVL102>

004053d0 <.LVL278>:
  4053d0:	aa22      	add	r2, sp, #136	; 0x88
  4053d2:	9905      	ldr	r1, [sp, #20]
  4053d4:	4658      	mov	r0, fp
  4053d6:	f016 fcad 	bl	41bd34 <.LFE61>

004053da <.LVL279>:
  4053da:	2800      	cmp	r0, #0
  4053dc:	f47f ab7c 	bne.w	404ad8 <.L189>
  4053e0:	9b24      	ldr	r3, [sp, #144]	; 0x90

004053e2 <.LVL280>:
  4053e2:	f10d 0994 	add.w	r9, sp, #148	; 0x94

004053e6 <.LVL281>:
  4053e6:	e44c      	b.n	404c82 <.LVL84>

004053e8 <.LVL282>:
  4053e8:	aa22      	add	r2, sp, #136	; 0x88
  4053ea:	9905      	ldr	r1, [sp, #20]
  4053ec:	4658      	mov	r0, fp
  4053ee:	f016 fca1 	bl	41bd34 <.LFE61>

004053f2 <.LVL283>:
  4053f2:	2800      	cmp	r0, #0
  4053f4:	f47f ab70 	bne.w	404ad8 <.L189>
  4053f8:	9b24      	ldr	r3, [sp, #144]	; 0x90

004053fa <.LVL284>:
  4053fa:	f10d 0994 	add.w	r9, sp, #148	; 0x94

004053fe <.LVL285>:
  4053fe:	e450      	b.n	404ca2 <.LVL86>

00405400 <.LVL286>:
  405400:	4688      	mov	r8, r1
  405402:	2400      	movs	r4, #0

00405404 <.LVL287>:
  405404:	2500      	movs	r5, #0

00405406 <.LVL288>:
  405406:	a94e      	add	r1, sp, #312	; 0x138

00405408 <.LVL289>:
  405408:	e000      	b.n	40540c <.LVL291>

0040540a <.LVL290>:
  40540a:	4631      	mov	r1, r6

0040540c <.LVL291>:
  40540c:	08e2      	lsrs	r2, r4, #3
  40540e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  405412:	08e8      	lsrs	r0, r5, #3
  405414:	f004 0307 	and.w	r3, r4, #7
  405418:	4605      	mov	r5, r0
  40541a:	4614      	mov	r4, r2

0040541c <.LVL292>:
  40541c:	3330      	adds	r3, #48	; 0x30
  40541e:	ea54 0205 	orrs.w	r2, r4, r5
  405422:	f801 3c01 	strb.w	r3, [r1, #-1]
  405426:	f101 36ff 	add.w	r6, r1, #4294967295

0040542a <.LVL293>:
  40542a:	d1ee      	bne.n	40540a <.LVL290>
  40542c:	f018 0f01 	tst.w	r8, #1
  405430:	f43f ad51 	beq.w	404ed6 <.LVL147>
  405434:	2b30      	cmp	r3, #48	; 0x30
  405436:	f43f ad4e 	beq.w	404ed6 <.LVL147>
  40543a:	2330      	movs	r3, #48	; 0x30
  40543c:	3902      	subs	r1, #2

0040543e <.LVL294>:
  40543e:	f806 3c01 	strb.w	r3, [r6, #-1]
  405442:	ab4e      	add	r3, sp, #312	; 0x138
  405444:	1a5b      	subs	r3, r3, r1
  405446:	9308      	str	r3, [sp, #32]
  405448:	460e      	mov	r6, r1
  40544a:	f7ff bbad 	b.w	404ba8 <.LVL61>

0040544e <.LVL295>:
  40544e:	991c      	ldr	r1, [sp, #112]	; 0x70
  405450:	2900      	cmp	r1, #0
  405452:	f340 832f 	ble.w	405ab4 <.LBE46>

00405456 <.LVL296>:
  405456:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405458:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40545a:	428a      	cmp	r2, r1
  40545c:	bfa8      	it	ge
  40545e:	460a      	movge	r2, r1

00405460 <.LBB13>:
  405460:	2a00      	cmp	r2, #0
  405462:	4614      	mov	r4, r2

00405464 <.LVL297>:
  405464:	dd0d      	ble.n	405482 <.LVL300>
  405466:	9a23      	ldr	r2, [sp, #140]	; 0x8c

00405468 <.LVL298>:
  405468:	f8c9 6000 	str.w	r6, [r9]
  40546c:	3201      	adds	r2, #1
  40546e:	4423      	add	r3, r4
  405470:	2a07      	cmp	r2, #7
  405472:	9324      	str	r3, [sp, #144]	; 0x90
  405474:	f8c9 4004 	str.w	r4, [r9, #4]
  405478:	9223      	str	r2, [sp, #140]	; 0x8c
  40547a:	f300 84cc 	bgt.w	405e16 <.LBB23>

0040547e <.LVL299>:
  40547e:	f109 0908 	add.w	r9, r9, #8

00405482 <.LVL300>:
  405482:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405484:	2c00      	cmp	r4, #0
  405486:	bfa8      	it	ge
  405488:	1b12      	subge	r2, r2, r4
  40548a:	2a00      	cmp	r2, #0
  40548c:	4614      	mov	r4, r2

0040548e <.LVL301>:
  40548e:	f340 8100 	ble.w	405692 <.LBE15>
  405492:	2c10      	cmp	r4, #16
  405494:	9a23      	ldr	r2, [sp, #140]	; 0x8c

00405496 <.LVL302>:
  405496:	f340 82d8 	ble.w	405a4a <.LBB20>
  40549a:	4649      	mov	r1, r9
  40549c:	2510      	movs	r5, #16
  40549e:	46a1      	mov	r9, r4
  4054a0:	9c05      	ldr	r4, [sp, #20]

004054a2 <.LVL303>:
  4054a2:	e006      	b.n	4054b2 <.LVL307>

004054a4 <.LVL304>:
  4054a4:	3108      	adds	r1, #8

004054a6 <.LVL305>:
  4054a6:	f1a9 0910 	sub.w	r9, r9, #16
  4054aa:	f1b9 0f10 	cmp.w	r9, #16
  4054ae:	f340 82ca 	ble.w	405a46 <.LVL471>

004054b2 <.LVL307>:
  4054b2:	3201      	adds	r2, #1
  4054b4:	3310      	adds	r3, #16
  4054b6:	2a07      	cmp	r2, #7
  4054b8:	9324      	str	r3, [sp, #144]	; 0x90

004054ba <.LVL308>:
  4054ba:	9223      	str	r2, [sp, #140]	; 0x8c
  4054bc:	f8c1 a000 	str.w	sl, [r1]
  4054c0:	604d      	str	r5, [r1, #4]
  4054c2:	ddef      	ble.n	4054a4 <.LVL304>
  4054c4:	aa22      	add	r2, sp, #136	; 0x88
  4054c6:	4621      	mov	r1, r4

004054c8 <.LVL309>:
  4054c8:	4658      	mov	r0, fp
  4054ca:	f016 fc33 	bl	41bd34 <.LFE61>

004054ce <.LVL310>:
  4054ce:	2800      	cmp	r0, #0
  4054d0:	f47f ab02 	bne.w	404ad8 <.L189>
  4054d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4054d6:	9a23      	ldr	r2, [sp, #140]	; 0x8c

004054d8 <.LVL311>:
  4054d8:	a925      	add	r1, sp, #148	; 0x94

004054da <.LVL312>:
  4054da:	e7e4      	b.n	4054a6 <.LVL305>

004054dc <.LBE13>:
  4054dc:	9b04      	ldr	r3, [sp, #16]

004054de <.LVL314>:
  4054de:	9308      	str	r3, [sp, #32]
  4054e0:	ae4e      	add	r6, sp, #312	; 0x138

004054e2 <.LVL315>:
  4054e2:	f7ff bb61 	b.w	404ba8 <.LVL61>
  4054e6:	bf00      	nop
  4054e8:	00420f00 	.word	0x00420f00

004054ec <.LVL316>:
  4054ec:	2d00      	cmp	r5, #0
  4054ee:	bf08      	it	eq
  4054f0:	2c0a      	cmpeq	r4, #10
  4054f2:	f0c0 808f 	bcc.w	405614 <.LVL350>
  4054f6:	f408 6380 	and.w	r3, r8, #1024	; 0x400

004054fa <.LVL317>:
  4054fa:	2200      	movs	r2, #0
  4054fc:	9702      	str	r7, [sp, #8]
  4054fe:	f8cd 9018 	str.w	r9, [sp, #24]
  405502:	f8cd b020 	str.w	fp, [sp, #32]
  405506:	ae4e      	add	r6, sp, #312	; 0x138

00405508 <.LVL318>:
  405508:	46c3      	mov	fp, r8
  40550a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48

0040550e <.LVL319>:
  40550e:	4617      	mov	r7, r2

00405510 <.LVL320>:
  405510:	4698      	mov	r8, r3

00405512 <.LVL321>:
  405512:	e00a      	b.n	40552a <.LVL325+0x6>

00405514 <.LVL322>:
  405514:	2300      	movs	r3, #0
  405516:	4620      	mov	r0, r4
  405518:	4629      	mov	r1, r5
  40551a:	220a      	movs	r2, #10
  40551c:	f01c f964 	bl	4217e8 <.LBE14>
  405520:	4604      	mov	r4, r0

00405522 <.LVL324>:
  405522:	460d      	mov	r5, r1

00405524 <.LVL325>:
  405524:	ea54 0305 	orrs.w	r3, r4, r5
  405528:	d07e      	beq.n	405628 <.LVL354>
  40552a:	220a      	movs	r2, #10
  40552c:	2300      	movs	r3, #0
  40552e:	4620      	mov	r0, r4
  405530:	4629      	mov	r1, r5
  405532:	f01c f959 	bl	4217e8 <.LBE14>
  405536:	3230      	adds	r2, #48	; 0x30
  405538:	f806 2c01 	strb.w	r2, [r6, #-1]
  40553c:	3701      	adds	r7, #1

0040553e <.LVL328>:
  40553e:	3e01      	subs	r6, #1

00405540 <.LVL329>:
  405540:	f1b8 0f00 	cmp.w	r8, #0
  405544:	d0e6      	beq.n	405514 <.LVL322>
  405546:	f899 3000 	ldrb.w	r3, [r9]
  40554a:	429f      	cmp	r7, r3
  40554c:	d1e2      	bne.n	405514 <.LVL322>
  40554e:	2fff      	cmp	r7, #255	; 0xff
  405550:	d0e0      	beq.n	405514 <.LVL322>
  405552:	2d00      	cmp	r5, #0
  405554:	bf08      	it	eq
  405556:	2c0a      	cmpeq	r4, #10
  405558:	d3dc      	bcc.n	405514 <.LVL322>
  40555a:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40555c:	9916      	ldr	r1, [sp, #88]	; 0x58
  40555e:	1af6      	subs	r6, r6, r3
  405560:	4630      	mov	r0, r6
  405562:	461a      	mov	r2, r3
  405564:	f01a fe30 	bl	4201c8 <strncpy>

00405568 <.LVL331>:
  405568:	f899 7001 	ldrb.w	r7, [r9, #1]
  40556c:	2f00      	cmp	r7, #0
  40556e:	d0d1      	beq.n	405514 <.LVL322>
  405570:	f109 0901 	add.w	r9, r9, #1
  405574:	2700      	movs	r7, #0
  405576:	e7cd      	b.n	405514 <.LVL322>

00405578 <.LVL333>:
  405578:	aa22      	add	r2, sp, #136	; 0x88
  40557a:	9905      	ldr	r1, [sp, #20]
  40557c:	4658      	mov	r0, fp
  40557e:	f016 fbd9 	bl	41bd34 <.LFE61>

00405582 <.LVL334>:
  405582:	2800      	cmp	r0, #0
  405584:	f47f aaa8 	bne.w	404ad8 <.L189>
  405588:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  40558c:	9b24      	ldr	r3, [sp, #144]	; 0x90

0040558e <.LVL335>:
  40558e:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00405592 <.LVL336>:
  405592:	f7ff bb66 	b.w	404c62 <.LVL82>

00405596 <.LVL337>:
  405596:	1e4c      	subs	r4, r1, #1
  405598:	2c00      	cmp	r4, #0
  40559a:	f77f aeea 	ble.w	405372 <.LVL267>
  40559e:	2c10      	cmp	r4, #16
  4055a0:	dd20      	ble.n	4055e4 <.LVL346+0x2>
  4055a2:	2510      	movs	r5, #16
  4055a4:	9e05      	ldr	r6, [sp, #20]

004055a6 <.LVL339>:
  4055a6:	e004      	b.n	4055b2 <.LVL342+0x2>

004055a8 <.LVL340>:
  4055a8:	3c10      	subs	r4, #16

004055aa <.LVL341>:
  4055aa:	2c10      	cmp	r4, #16
  4055ac:	f109 0908 	add.w	r9, r9, #8

004055b0 <.LVL342>:
  4055b0:	dd18      	ble.n	4055e4 <.LVL346+0x2>
  4055b2:	3201      	adds	r2, #1
  4055b4:	3310      	adds	r3, #16
  4055b6:	2a07      	cmp	r2, #7
  4055b8:	9324      	str	r3, [sp, #144]	; 0x90

004055ba <.LVL343>:
  4055ba:	9223      	str	r2, [sp, #140]	; 0x8c
  4055bc:	f8c9 a000 	str.w	sl, [r9]
  4055c0:	f8c9 5004 	str.w	r5, [r9, #4]
  4055c4:	ddf0      	ble.n	4055a8 <.LVL340>
  4055c6:	aa22      	add	r2, sp, #136	; 0x88
  4055c8:	4631      	mov	r1, r6
  4055ca:	4658      	mov	r0, fp
  4055cc:	f016 fbb2 	bl	41bd34 <.LFE61>

004055d0 <.LVL344>:
  4055d0:	2800      	cmp	r0, #0
  4055d2:	f47f aa81 	bne.w	404ad8 <.L189>
  4055d6:	3c10      	subs	r4, #16

004055d8 <.LVL345>:
  4055d8:	2c10      	cmp	r4, #16
  4055da:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4055dc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  4055de:	f10d 0994 	add.w	r9, sp, #148	; 0x94

004055e2 <.LVL346>:
  4055e2:	dce6      	bgt.n	4055b2 <.LVL342+0x2>
  4055e4:	3201      	adds	r2, #1
  4055e6:	4423      	add	r3, r4
  4055e8:	2a07      	cmp	r2, #7
  4055ea:	9324      	str	r3, [sp, #144]	; 0x90

004055ec <.LVL347>:
  4055ec:	9223      	str	r2, [sp, #140]	; 0x8c
  4055ee:	f8c9 a000 	str.w	sl, [r9]
  4055f2:	f8c9 4004 	str.w	r4, [r9, #4]
  4055f6:	f77f aeba 	ble.w	40536e <.LVL266>

004055fa <.LVL348>:
  4055fa:	aa22      	add	r2, sp, #136	; 0x88
  4055fc:	9905      	ldr	r1, [sp, #20]
  4055fe:	4658      	mov	r0, fp
  405600:	f016 fb98 	bl	41bd34 <.LFE61>

00405604 <.LVL349>:
  405604:	2800      	cmp	r0, #0
  405606:	f47f aa67 	bne.w	404ad8 <.L189>
  40560a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40560c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40560e:	f10d 0994 	add.w	r9, sp, #148	; 0x94
  405612:	e6ae      	b.n	405372 <.LVL267>

00405614 <.LVL350>:
  405614:	4641      	mov	r1, r8

00405616 <.LVL351>:
  405616:	ae4e      	add	r6, sp, #312	; 0x138
  405618:	3430      	adds	r4, #48	; 0x30

0040561a <.LVL352>:
  40561a:	2301      	movs	r3, #1

0040561c <.LVL353>:
  40561c:	4688      	mov	r8, r1
  40561e:	f806 4d01 	strb.w	r4, [r6, #-1]!
  405622:	9308      	str	r3, [sp, #32]
  405624:	f7ff bac0 	b.w	404ba8 <.LVL61>

00405628 <.LVL354>:
  405628:	ab4e      	add	r3, sp, #312	; 0x138
  40562a:	1b9b      	subs	r3, r3, r6
  40562c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  405630:	46d8      	mov	r8, fp
  405632:	970f      	str	r7, [sp, #60]	; 0x3c
  405634:	f8dd b020 	ldr.w	fp, [sp, #32]

00405638 <.LVL355>:
  405638:	f8dd 9018 	ldr.w	r9, [sp, #24]

0040563c <.LVL356>:
  40563c:	9f02      	ldr	r7, [sp, #8]

0040563e <.LVL357>:
  40563e:	9308      	str	r3, [sp, #32]
  405640:	f7ff bab2 	b.w	404ba8 <.LVL61>

00405644 <.LVL358>:
  405644:	681c      	ldr	r4, [r3, #0]
  405646:	3304      	adds	r3, #4
  405648:	930a      	str	r3, [sp, #40]	; 0x28

0040564a <.LVL359>:
  40564a:	2500      	movs	r5, #0
  40564c:	f7ff bbed 	b.w	404e2a <.LVL126>

00405650 <.LVL360>:
  405650:	3204      	adds	r2, #4
  405652:	681c      	ldr	r4, [r3, #0]
  405654:	920a      	str	r2, [sp, #40]	; 0x28

00405656 <.LVL361>:
  405656:	2301      	movs	r3, #1
  405658:	2500      	movs	r5, #0
  40565a:	f7ff ba8a 	b.w	404b72 <.L150>

0040565e <.LVL362>:
  40565e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405660:	6814      	ldr	r4, [r2, #0]
  405662:	4613      	mov	r3, r2
  405664:	3304      	adds	r3, #4

00405666 <.LVL363>:
  405666:	17e5      	asrs	r5, r4, #31
  405668:	930a      	str	r3, [sp, #40]	; 0x28
  40566a:	4622      	mov	r2, r4
  40566c:	462b      	mov	r3, r5

0040566e <.LVL364>:
  40566e:	e40c      	b.n	404e8a <.LVL137>

00405670 <.LVL365>:
  405670:	681c      	ldr	r4, [r3, #0]
  405672:	3304      	adds	r3, #4
  405674:	930a      	str	r3, [sp, #40]	; 0x28

00405676 <.LVL366>:
  405676:	2500      	movs	r5, #0
  405678:	f7ff ba69 	b.w	404b4e <.LVL51>

0040567c <.LBB15>:
  40567c:	aa22      	add	r2, sp, #136	; 0x88
  40567e:	9905      	ldr	r1, [sp, #20]
  405680:	4658      	mov	r0, fp
  405682:	f016 fb57 	bl	41bd34 <.LFE61>

00405686 <.LVL368>:
  405686:	2800      	cmp	r0, #0
  405688:	f47f aa26 	bne.w	404ad8 <.L189>
  40568c:	9b24      	ldr	r3, [sp, #144]	; 0x90

0040568e <.LVL369>:
  40568e:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00405692 <.LBE15>:
  405692:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405694:	f418 6f80 	tst.w	r8, #1024	; 0x400
  405698:	4432      	add	r2, r6
  40569a:	4615      	mov	r5, r2

0040569c <.LVL371>:
  40569c:	f000 8083 	beq.w	4057a6 <.LVL403>

004056a0 <.LBB16>:
  4056a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4056a2:	9608      	str	r6, [sp, #32]
  4056a4:	4618      	mov	r0, r3

004056a6 <.LBE16>:
  4056a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4056a8:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c

004056ac <.LBB17>:
  4056ac:	1871      	adds	r1, r6, r1
  4056ae:	9104      	str	r1, [sp, #16]
  4056b0:	9706      	str	r7, [sp, #24]
  4056b2:	4649      	mov	r1, r9
  4056b4:	4616      	mov	r6, r2

004056b6 <.LVL372>:
  4056b6:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
  4056ba:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c

004056be <.LVL373>:
  4056be:	9d05      	ldr	r5, [sp, #20]

004056c0 <.LBE17>:
  4056c0:	2b00      	cmp	r3, #0
  4056c2:	d05f      	beq.n	405784 <.LVL399>

004056c4 <.LVL374>:
  4056c4:	f1b8 0f00 	cmp.w	r8, #0
  4056c8:	f000 8108 	beq.w	4058dc <.LBB27>
  4056cc:	f108 38ff 	add.w	r8, r8, #4294967295

004056d0 <.LVL375>:
  4056d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4056d2:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4056d4:	600a      	str	r2, [r1, #0]
  4056d6:	3301      	adds	r3, #1
  4056d8:	4448      	add	r0, r9
  4056da:	2b07      	cmp	r3, #7
  4056dc:	9024      	str	r0, [sp, #144]	; 0x90
  4056de:	f8c1 9004 	str.w	r9, [r1, #4]
  4056e2:	9323      	str	r3, [sp, #140]	; 0x8c
  4056e4:	f300 80c8 	bgt.w	405878 <.LBB26>

004056e8 <.LVL376>:
  4056e8:	3108      	adds	r1, #8

004056ea <.LBB18>:
  4056ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4056ec:	9c04      	ldr	r4, [sp, #16]
  4056ee:	7813      	ldrb	r3, [r2, #0]
  4056f0:	1ba4      	subs	r4, r4, r6

004056f2 <.LVL378>:
  4056f2:	429c      	cmp	r4, r3
  4056f4:	bfa8      	it	ge
  4056f6:	461c      	movge	r4, r3
  4056f8:	2c00      	cmp	r4, #0
  4056fa:	dd0b      	ble.n	405714 <.LVL382>
  4056fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4056fe:	600e      	str	r6, [r1, #0]
  405700:	3301      	adds	r3, #1
  405702:	4420      	add	r0, r4
  405704:	2b07      	cmp	r3, #7
  405706:	9024      	str	r0, [sp, #144]	; 0x90

00405708 <.LVL380>:
  405708:	604c      	str	r4, [r1, #4]
  40570a:	9323      	str	r3, [sp, #140]	; 0x8c
  40570c:	f300 81ab 	bgt.w	405a66 <.LBB21>

00405710 <.LVL381>:
  405710:	7813      	ldrb	r3, [r2, #0]
  405712:	3108      	adds	r1, #8

00405714 <.LVL382>:
  405714:	2c00      	cmp	r4, #0
  405716:	bfac      	ite	ge
  405718:	1b1c      	subge	r4, r3, r4

0040571a <.LVL383>:
  40571a:	461c      	movlt	r4, r3

0040571c <.LVL384>:
  40571c:	2c00      	cmp	r4, #0
  40571e:	dd2d      	ble.n	40577c <.LBE18>
  405720:	2c10      	cmp	r4, #16
  405722:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  405724:	dd1d      	ble.n	405762 <.LVL395>
  405726:	2710      	movs	r7, #16
  405728:	e004      	b.n	405734 <.LVL388>

0040572a <.LVL385>:
  40572a:	3c10      	subs	r4, #16

0040572c <.LVL386>:
  40572c:	2c10      	cmp	r4, #16
  40572e:	f101 0108 	add.w	r1, r1, #8

00405732 <.LVL387>:
  405732:	dd16      	ble.n	405762 <.LVL395>

00405734 <.LVL388>:
  405734:	3201      	adds	r2, #1
  405736:	3010      	adds	r0, #16
  405738:	2a07      	cmp	r2, #7
  40573a:	9024      	str	r0, [sp, #144]	; 0x90

0040573c <.LVL389>:
  40573c:	9223      	str	r2, [sp, #140]	; 0x8c
  40573e:	f8c1 a000 	str.w	sl, [r1]
  405742:	604f      	str	r7, [r1, #4]
  405744:	ddf1      	ble.n	40572a <.LVL385>
  405746:	aa22      	add	r2, sp, #136	; 0x88
  405748:	4629      	mov	r1, r5

0040574a <.LVL390>:
  40574a:	4658      	mov	r0, fp
  40574c:	f016 faf2 	bl	41bd34 <.LFE61>

00405750 <.LVL391>:
  405750:	2800      	cmp	r0, #0
  405752:	f47f a9c1 	bne.w	404ad8 <.L189>
  405756:	3c10      	subs	r4, #16

00405758 <.LVL392>:
  405758:	2c10      	cmp	r4, #16
  40575a:	9824      	ldr	r0, [sp, #144]	; 0x90
  40575c:	9a23      	ldr	r2, [sp, #140]	; 0x8c

0040575e <.LVL393>:
  40575e:	a925      	add	r1, sp, #148	; 0x94

00405760 <.LVL394>:
  405760:	dce8      	bgt.n	405734 <.LVL388>

00405762 <.LVL395>:
  405762:	3201      	adds	r2, #1
  405764:	4420      	add	r0, r4
  405766:	2a07      	cmp	r2, #7
  405768:	9024      	str	r0, [sp, #144]	; 0x90
  40576a:	9223      	str	r2, [sp, #140]	; 0x8c
  40576c:	f8c1 a000 	str.w	sl, [r1]
  405770:	604c      	str	r4, [r1, #4]
  405772:	f300 8191 	bgt.w	405a98 <.LBB22>

00405776 <.LVL396>:
  405776:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405778:	781b      	ldrb	r3, [r3, #0]
  40577a:	3108      	adds	r1, #8

0040577c <.LBE18>:
  40577c:	441e      	add	r6, r3
  40577e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405780:	2b00      	cmp	r3, #0
  405782:	d19f      	bne.n	4056c4 <.LVL374>

00405784 <.LVL399>:
  405784:	f1b8 0f00 	cmp.w	r8, #0
  405788:	d1a0      	bne.n	4056cc <.LVL374+0x8>
  40578a:	4634      	mov	r4, r6
  40578c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40578e:	9e08      	ldr	r6, [sp, #32]

00405790 <.LVL400>:
  405790:	9f06      	ldr	r7, [sp, #24]
  405792:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c

00405796 <.LVL401>:
  405796:	18b2      	adds	r2, r6, r2
  405798:	4294      	cmp	r4, r2
  40579a:	4689      	mov	r9, r1
  40579c:	4621      	mov	r1, r4
  40579e:	bf28      	it	cs
  4057a0:	4611      	movcs	r1, r2
  4057a2:	4603      	mov	r3, r0

004057a4 <.LVL402>:
  4057a4:	460d      	mov	r5, r1

004057a6 <.LVL403>:
  4057a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  4057a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4057aa:	428a      	cmp	r2, r1
  4057ac:	f280 8201 	bge.w	405bb2 <.LBB47>
  4057b0:	9923      	ldr	r1, [sp, #140]	; 0x8c
  4057b2:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4057b4:	9817      	ldr	r0, [sp, #92]	; 0x5c
  4057b6:	f8c9 0000 	str.w	r0, [r9]
  4057ba:	3101      	adds	r1, #1
  4057bc:	4423      	add	r3, r4
  4057be:	2907      	cmp	r1, #7
  4057c0:	9324      	str	r3, [sp, #144]	; 0x90
  4057c2:	f8c9 4004 	str.w	r4, [r9, #4]
  4057c6:	9123      	str	r1, [sp, #140]	; 0x8c
  4057c8:	f300 828d 	bgt.w	405ce6 <.LBB50>

004057cc <.LVL404>:
  4057cc:	f109 0908 	add.w	r9, r9, #8

004057d0 <.LBB19>:
  4057d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4057d2:	1874      	adds	r4, r6, r1
  4057d4:	1b64      	subs	r4, r4, r5

004057d6 <.LVL406>:
  4057d6:	1a8a      	subs	r2, r1, r2
  4057d8:	4294      	cmp	r4, r2
  4057da:	bfa8      	it	ge
  4057dc:	4614      	movge	r4, r2
  4057de:	2c00      	cmp	r4, #0
  4057e0:	dd0d      	ble.n	4057fe <.LVL409>
  4057e2:	9923      	ldr	r1, [sp, #140]	; 0x8c
  4057e4:	f8c9 5000 	str.w	r5, [r9]
  4057e8:	3101      	adds	r1, #1
  4057ea:	4423      	add	r3, r4
  4057ec:	2907      	cmp	r1, #7
  4057ee:	9324      	str	r3, [sp, #144]	; 0x90
  4057f0:	f8c9 4004 	str.w	r4, [r9, #4]
  4057f4:	9123      	str	r1, [sp, #140]	; 0x8c
  4057f6:	f300 83bc 	bgt.w	405f72 <.LBB24>

004057fa <.LVL408>:
  4057fa:	f109 0908 	add.w	r9, r9, #8

004057fe <.LVL409>:
  4057fe:	2c00      	cmp	r4, #0
  405800:	bfac      	ite	ge
  405802:	1b14      	subge	r4, r2, r4

00405804 <.LVL410>:
  405804:	4614      	movlt	r4, r2

00405806 <.LVL411>:
  405806:	2c00      	cmp	r4, #0
  405808:	f77f aa9e 	ble.w	404d48 <.LVL104>
  40580c:	2c10      	cmp	r4, #16
  40580e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  405810:	dd1e      	ble.n	405850 <.LVL421>
  405812:	2510      	movs	r5, #16

00405814 <.LVL412>:
  405814:	9e05      	ldr	r6, [sp, #20]
  405816:	e004      	b.n	405822 <.LVL416>

00405818 <.LVL413>:
  405818:	f109 0908 	add.w	r9, r9, #8

0040581c <.LVL414>:
  40581c:	3c10      	subs	r4, #16
  40581e:	2c10      	cmp	r4, #16
  405820:	dd16      	ble.n	405850 <.LVL421>

00405822 <.LVL416>:
  405822:	3201      	adds	r2, #1
  405824:	3310      	adds	r3, #16
  405826:	2a07      	cmp	r2, #7
  405828:	9324      	str	r3, [sp, #144]	; 0x90

0040582a <.LVL417>:
  40582a:	9223      	str	r2, [sp, #140]	; 0x8c
  40582c:	f8c9 a000 	str.w	sl, [r9]
  405830:	f8c9 5004 	str.w	r5, [r9, #4]
  405834:	ddf0      	ble.n	405818 <.LVL413>
  405836:	aa22      	add	r2, sp, #136	; 0x88
  405838:	4631      	mov	r1, r6
  40583a:	4658      	mov	r0, fp
  40583c:	f016 fa7a 	bl	41bd34 <.LFE61>

00405840 <.LVL418>:
  405840:	2800      	cmp	r0, #0
  405842:	f47f a949 	bne.w	404ad8 <.L189>
  405846:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405848:	9a23      	ldr	r2, [sp, #140]	; 0x8c

0040584a <.LVL419>:
  40584a:	f10d 0994 	add.w	r9, sp, #148	; 0x94

0040584e <.LVL420>:
  40584e:	e7e5      	b.n	40581c <.LVL414>

00405850 <.LVL421>:
  405850:	3201      	adds	r2, #1
  405852:	4423      	add	r3, r4
  405854:	2a07      	cmp	r2, #7
  405856:	9324      	str	r3, [sp, #144]	; 0x90
  405858:	9223      	str	r2, [sp, #140]	; 0x8c
  40585a:	f8c9 a000 	str.w	sl, [r9]
  40585e:	f8c9 4004 	str.w	r4, [r9, #4]
  405862:	f77f aa6f 	ble.w	404d44 <.LVL103>
  405866:	e591      	b.n	40538c <.LVL269>

00405868 <.LBE19>:
  405868:	f018 0f01 	tst.w	r8, #1
  40586c:	f47f ad57 	bne.w	40531e <.LVL260+0x22>
  405870:	2a07      	cmp	r2, #7
  405872:	f77f ad7c 	ble.w	40536e <.LVL266>
  405876:	e6c0      	b.n	4055fa <.LVL348>

00405878 <.LBB26>:
  405878:	aa22      	add	r2, sp, #136	; 0x88
  40587a:	4629      	mov	r1, r5
  40587c:	4658      	mov	r0, fp
  40587e:	f016 fa59 	bl	41bd34 <.LFE61>

00405882 <.LVL424>:
  405882:	2800      	cmp	r0, #0
  405884:	f47f a928 	bne.w	404ad8 <.L189>
  405888:	9824      	ldr	r0, [sp, #144]	; 0x90

0040588a <.LVL425>:
  40588a:	a925      	add	r1, sp, #148	; 0x94

0040588c <.LVL426>:
  40588c:	e72d      	b.n	4056ea <.LBB18>

0040588e <.LBE26>:
  40588e:	aa22      	add	r2, sp, #136	; 0x88
  405890:	9905      	ldr	r1, [sp, #20]
  405892:	4658      	mov	r0, fp
  405894:	f016 fa4e 	bl	41bd34 <.LFE61>

00405898 <.LVL428>:
  405898:	2800      	cmp	r0, #0
  40589a:	f47f a91d 	bne.w	404ad8 <.L189>
  40589e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4058a0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  4058a2:	f10d 0994 	add.w	r9, sp, #148	; 0x94
  4058a6:	e53f      	b.n	405328 <.LVL261>

004058a8 <.LVL429>:
  4058a8:	aa22      	add	r2, sp, #136	; 0x88
  4058aa:	9905      	ldr	r1, [sp, #20]
  4058ac:	4658      	mov	r0, fp
  4058ae:	f016 fa41 	bl	41bd34 <.LFE61>

004058b2 <.LVL430>:
  4058b2:	2800      	cmp	r0, #0
  4058b4:	f47f a910 	bne.w	404ad8 <.L189>
  4058b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4058ba:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  4058bc:	f10d 0994 	add.w	r9, sp, #148	; 0x94

004058c0 <.LVL431>:
  4058c0:	e541      	b.n	405346 <.LVL263>

004058c2 <.LVL432>:
  4058c2:	aa22      	add	r2, sp, #136	; 0x88
  4058c4:	9905      	ldr	r1, [sp, #20]
  4058c6:	4658      	mov	r0, fp
  4058c8:	f016 fa34 	bl	41bd34 <.LFE61>

004058cc <.LVL433>:
  4058cc:	2800      	cmp	r0, #0
  4058ce:	f47f a903 	bne.w	404ad8 <.L189>
  4058d2:	9b24      	ldr	r3, [sp, #144]	; 0x90

004058d4 <.LVL434>:
  4058d4:	f10d 0994 	add.w	r9, sp, #148	; 0x94

004058d8 <.LVL435>:
  4058d8:	f7ff b9e7 	b.w	404caa <.LVL86+0x8>

004058dc <.LBB27>:
  4058dc:	9b12      	ldr	r3, [sp, #72]	; 0x48

004058de <.LVL437>:
  4058de:	3b01      	subs	r3, #1
  4058e0:	9312      	str	r3, [sp, #72]	; 0x48

004058e2 <.LVL438>:
  4058e2:	9b10      	ldr	r3, [sp, #64]	; 0x40

004058e4 <.LVL439>:
  4058e4:	3b01      	subs	r3, #1
  4058e6:	9310      	str	r3, [sp, #64]	; 0x40

004058e8 <.LVL440>:
  4058e8:	e6f2      	b.n	4056d0 <.LVL375>

004058ea <.LBE27>:
  4058ea:	eeb4 8b48 	vcmp.f64	d8, d8
  4058ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4058f2:	f180 83e3 	bvs.w	4060bc <.LBE70>
  4058f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4058f8:	2b61      	cmp	r3, #97	; 0x61
  4058fa:	f000 82b8 	beq.w	405e6e <.LVL595+0xa>
  4058fe:	2b41      	cmp	r3, #65	; 0x41
  405900:	f000 8178 	beq.w	405bf4 <.LVL523>
  405904:	9b04      	ldr	r3, [sp, #16]
  405906:	3301      	adds	r3, #1
  405908:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40590a:	f023 0520 	bic.w	r5, r3, #32
  40590e:	f000 839d 	beq.w	40604c <.LBE69>
  405912:	2d47      	cmp	r5, #71	; 0x47
  405914:	d104      	bne.n	405920 <.LBB28>
  405916:	9b04      	ldr	r3, [sp, #16]
  405918:	2b00      	cmp	r3, #0
  40591a:	bf08      	it	eq
  40591c:	2301      	moveq	r3, #1
  40591e:	9304      	str	r3, [sp, #16]

00405920 <.LBB28>:
  405920:	ee18 3a90 	vmov	r3, s17

00405924 <.LBE28>:
  405924:	f448 7280 	orr.w	r2, r8, #256	; 0x100

00405928 <.LBB43>:
  405928:	2b00      	cmp	r3, #0

0040592a <.LBE43>:
  40592a:	9202      	str	r2, [sp, #8]

0040592c <.LBB44>:
  40592c:	f04f 0300 	mov.w	r3, #0
  405930:	f2c0 82b8 	blt.w	405ea4 <.LBB62>
  405934:	eeb0 ab48 	vmov.f64	d10, d8
  405938:	9306      	str	r3, [sp, #24]
  40593a:	9309      	str	r3, [sp, #36]	; 0x24

0040593c <.LVL445>:
  40593c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40593e:	2b66      	cmp	r3, #102	; 0x66
  405940:	f000 82ef 	beq.w	405f22 <.LBB64>
  405944:	2b46      	cmp	r3, #70	; 0x46
  405946:	f000 83d8 	beq.w	4060fa <.LBB71>
  40594a:	eeb0 0b4a 	vmov.f64	d0, d10
  40594e:	2d45      	cmp	r5, #69	; 0x45
  405950:	bf0a      	itet	eq
  405952:	9b04      	ldreq	r3, [sp, #16]
  405954:	9c04      	ldrne	r4, [sp, #16]
  405956:	1c5c      	addeq	r4, r3, #1

00405958 <.LVL446>:
  405958:	aa20      	add	r2, sp, #128	; 0x80

0040595a <.LVL447>:
  40595a:	ab1d      	add	r3, sp, #116	; 0x74
  40595c:	9201      	str	r2, [sp, #4]
  40595e:	9300      	str	r3, [sp, #0]
  405960:	4622      	mov	r2, r4
  405962:	ab1c      	add	r3, sp, #112	; 0x70

00405964 <.LVL448>:
  405964:	2102      	movs	r1, #2
  405966:	4658      	mov	r0, fp
  405968:	f007 fa4e 	bl	40ce08 <_dtoa_r>

0040596c <.LVL449>:
  40596c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40596e:	2b67      	cmp	r3, #103	; 0x67
  405970:	4606      	mov	r6, r0

00405972 <.LVL450>:
  405972:	f040 8395 	bne.w	4060a0 <.LBB70>
  405976:	f018 0f01 	tst.w	r8, #1
  40597a:	f040 8343 	bne.w	406004 <.LBB66>

0040597e <.LVL451>:
  40597e:	9b20      	ldr	r3, [sp, #128]	; 0x80

00405980 <.LVL452>:
  405980:	46c6      	mov	lr, r8
  405982:	1b9b      	subs	r3, r3, r6
  405984:	f8dd 8008 	ldr.w	r8, [sp, #8]
  405988:	930f      	str	r3, [sp, #60]	; 0x3c

0040598a <.LBE44>:
  40598a:	2d47      	cmp	r5, #71	; 0x47
  40598c:	f000 81cf 	beq.w	405d2e <.LVL554>
  405990:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405992:	2b46      	cmp	r3, #70	; 0x46
  405994:	f000 82b3 	beq.w	405efe <.LVL607>
  405998:	2b65      	cmp	r3, #101	; 0x65
  40599a:	f340 8412 	ble.w	4061c2 <.LVL694>
  40599e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4059a0:	2b66      	cmp	r3, #102	; 0x66
  4059a2:	f000 82ac 	beq.w	405efe <.LVL607>
  4059a6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  4059a8:	930e      	str	r3, [sp, #56]	; 0x38

004059aa <.LVL454>:
  4059aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4059ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4059ae:	4619      	mov	r1, r3
  4059b0:	4291      	cmp	r1, r2
  4059b2:	4613      	mov	r3, r2
  4059b4:	f300 8260 	bgt.w	405e78 <.LVL596>

004059b8 <.LVL455>:
  4059b8:	f01e 0f01 	tst.w	lr, #1
  4059bc:	f000 8363 	beq.w	406086 <.LVL655>
  4059c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4059c2:	4413      	add	r3, r2
  4059c4:	9308      	str	r3, [sp, #32]

004059c6 <.LVL456>:
  4059c6:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  4059ca:	f000 8310 	beq.w	405fee <.LVL635>
  4059ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4059d0:	2b00      	cmp	r3, #0
  4059d2:	f340 830c 	ble.w	405fee <.LVL635>
  4059d6:	2367      	movs	r3, #103	; 0x67
  4059d8:	930d      	str	r3, [sp, #52]	; 0x34

004059da <.LVL457>:
  4059da:	9812      	ldr	r0, [sp, #72]	; 0x48
  4059dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4059de:	2300      	movs	r3, #0
  4059e0:	9313      	str	r3, [sp, #76]	; 0x4c
  4059e2:	9310      	str	r3, [sp, #64]	; 0x40
  4059e4:	7803      	ldrb	r3, [r0, #0]

004059e6 <.LVL458>:
  4059e6:	2bff      	cmp	r3, #255	; 0xff
  4059e8:	d00e      	beq.n	405a08 <.LVL461+0x8>
  4059ea:	429a      	cmp	r2, r3
  4059ec:	dd0c      	ble.n	405a08 <.LVL461+0x8>
  4059ee:	7841      	ldrb	r1, [r0, #1]
  4059f0:	1ad2      	subs	r2, r2, r3
  4059f2:	2900      	cmp	r1, #0
  4059f4:	f000 8184 	beq.w	405d00 <.LBE50>
  4059f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4059fa:	3301      	adds	r3, #1
  4059fc:	9310      	str	r3, [sp, #64]	; 0x40

004059fe <.LVL460>:
  4059fe:	460b      	mov	r3, r1

00405a00 <.LVL461>:
  405a00:	2bff      	cmp	r3, #255	; 0xff
  405a02:	f100 0001 	add.w	r0, r0, #1
  405a06:	d1f0      	bne.n	4059ea <.LVL458+0x4>
  405a08:	920e      	str	r2, [sp, #56]	; 0x38
  405a0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405a0c:	9a13      	ldr	r2, [sp, #76]	; 0x4c

00405a0e <.LVL463>:
  405a0e:	9908      	ldr	r1, [sp, #32]
  405a10:	9012      	str	r0, [sp, #72]	; 0x48
  405a12:	4413      	add	r3, r2
  405a14:	9a18      	ldr	r2, [sp, #96]	; 0x60
  405a16:	fb02 1303 	mla	r3, r2, r3, r1
  405a1a:	9308      	str	r3, [sp, #32]

00405a1c <.LVL464>:
  405a1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31

00405a20 <.LVL465>:
  405a20:	9302      	str	r3, [sp, #8]

00405a22 <.LVL466>:
  405a22:	9b06      	ldr	r3, [sp, #24]
  405a24:	2b00      	cmp	r3, #0
  405a26:	f040 817b 	bne.w	405d20 <.LVL552>
  405a2a:	9304      	str	r3, [sp, #16]

00405a2c <.LVL467>:
  405a2c:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  405a30:	f7ff b8c7 	b.w	404bc2 <.L59>

00405a34 <.LVL468>:
  405a34:	f025 0507 	bic.w	r5, r5, #7
  405a38:	f105 0308 	add.w	r3, r5, #8
  405a3c:	ed95 8b00 	vldr	d8, [r5]

00405a40 <.LVL469>:
  405a40:	930a      	str	r3, [sp, #40]	; 0x28

00405a42 <.LVL470>:
  405a42:	f7ff bb11 	b.w	405068 <.LVL189>

00405a46 <.LVL471>:
  405a46:	464c      	mov	r4, r9
  405a48:	4689      	mov	r9, r1

00405a4a <.LBB20>:
  405a4a:	3201      	adds	r2, #1
  405a4c:	4423      	add	r3, r4
  405a4e:	2a07      	cmp	r2, #7
  405a50:	9324      	str	r3, [sp, #144]	; 0x90
  405a52:	9223      	str	r2, [sp, #140]	; 0x8c
  405a54:	f8c9 a000 	str.w	sl, [r9]
  405a58:	f8c9 4004 	str.w	r4, [r9, #4]
  405a5c:	f73f ae0e 	bgt.w	40567c <.LBB15>

00405a60 <.LVL473>:
  405a60:	f109 0908 	add.w	r9, r9, #8

00405a64 <.LVL474>:
  405a64:	e615      	b.n	405692 <.LBE15>

00405a66 <.LBB21>:
  405a66:	aa22      	add	r2, sp, #136	; 0x88
  405a68:	4629      	mov	r1, r5

00405a6a <.LVL476>:
  405a6a:	4658      	mov	r0, fp
  405a6c:	f016 f962 	bl	41bd34 <.LFE61>

00405a70 <.LVL477>:
  405a70:	2800      	cmp	r0, #0
  405a72:	f47f a831 	bne.w	404ad8 <.L189>
  405a76:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405a78:	9824      	ldr	r0, [sp, #144]	; 0x90

00405a7a <.LVL478>:
  405a7a:	781b      	ldrb	r3, [r3, #0]
  405a7c:	a925      	add	r1, sp, #148	; 0x94

00405a7e <.LVL479>:
  405a7e:	e649      	b.n	405714 <.LVL382>

00405a80 <.LBE21>:
  405a80:	aa22      	add	r2, sp, #136	; 0x88
  405a82:	9905      	ldr	r1, [sp, #20]
  405a84:	4658      	mov	r0, fp
  405a86:	f016 f955 	bl	41bd34 <.LFE61>

00405a8a <.LVL481>:
  405a8a:	2800      	cmp	r0, #0
  405a8c:	f47f a824 	bne.w	404ad8 <.L189>

00405a90 <.LVL482>:
  405a90:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00405a94 <.LVL483>:
  405a94:	f7ff bbb2 	b.w	4051fc <.LVL230>

00405a98 <.LBB22>:
  405a98:	aa22      	add	r2, sp, #136	; 0x88
  405a9a:	4629      	mov	r1, r5
  405a9c:	4658      	mov	r0, fp
  405a9e:	f016 f949 	bl	41bd34 <.LFE61>

00405aa2 <.LVL485>:
  405aa2:	2800      	cmp	r0, #0
  405aa4:	f47f a818 	bne.w	404ad8 <.L189>
  405aa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405aaa:	9824      	ldr	r0, [sp, #144]	; 0x90

00405aac <.LVL486>:
  405aac:	781b      	ldrb	r3, [r3, #0]
  405aae:	a925      	add	r1, sp, #148	; 0x94

00405ab0 <.LBE22>:
  405ab0:	441e      	add	r6, r3
  405ab2:	e664      	b.n	40577e <.LBE18+0x2>

00405ab4 <.LBE46>:
  405ab4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  405ab6:	48c2      	ldr	r0, [pc, #776]	; (405dc0 <.LVL571+0x2>)
  405ab8:	f8c9 0000 	str.w	r0, [r9]
  405abc:	3201      	adds	r2, #1
  405abe:	3301      	adds	r3, #1
  405ac0:	2001      	movs	r0, #1
  405ac2:	2a07      	cmp	r2, #7
  405ac4:	9324      	str	r3, [sp, #144]	; 0x90
  405ac6:	9223      	str	r2, [sp, #140]	; 0x8c
  405ac8:	f8c9 0004 	str.w	r0, [r9, #4]
  405acc:	f300 8085 	bgt.w	405bda <.LVL519>

00405ad0 <.LVL490>:
  405ad0:	f109 0908 	add.w	r9, r9, #8

00405ad4 <.LVL491>:
  405ad4:	b929      	cbnz	r1, 405ae2 <.LVL491+0xe>
  405ad6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405ad8:	b91a      	cbnz	r2, 405ae2 <.LVL491+0xe>
  405ada:	f018 0f01 	tst.w	r8, #1
  405ade:	f43f a933 	beq.w	404d48 <.LVL104>
  405ae2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  405ae4:	9c15      	ldr	r4, [sp, #84]	; 0x54

00405ae6 <.LVL492>:
  405ae6:	9817      	ldr	r0, [sp, #92]	; 0x5c
  405ae8:	f8c9 0000 	str.w	r0, [r9]
  405aec:	3201      	adds	r2, #1
  405aee:	4423      	add	r3, r4
  405af0:	2a07      	cmp	r2, #7
  405af2:	9324      	str	r3, [sp, #144]	; 0x90

00405af4 <.LVL493>:
  405af4:	f8c9 4004 	str.w	r4, [r9, #4]
  405af8:	9223      	str	r2, [sp, #140]	; 0x8c
  405afa:	f300 826a 	bgt.w	405fd2 <.LVL632>
  405afe:	f109 0908 	add.w	r9, r9, #8

00405b02 <.LVL494>:
  405b02:	2900      	cmp	r1, #0
  405b04:	f2c0 8244 	blt.w	405f90 <.LBE24>

00405b08 <.LVL495>:
  405b08:	980f      	ldr	r0, [sp, #60]	; 0x3c
  405b0a:	f8c9 6000 	str.w	r6, [r9]
  405b0e:	3201      	adds	r2, #1
  405b10:	4403      	add	r3, r0
  405b12:	2a07      	cmp	r2, #7
  405b14:	9324      	str	r3, [sp, #144]	; 0x90

00405b16 <.LVL496>:
  405b16:	9223      	str	r2, [sp, #140]	; 0x8c
  405b18:	f8c9 0004 	str.w	r0, [r9, #4]
  405b1c:	f77f a912 	ble.w	404d44 <.LVL103>
  405b20:	e434      	b.n	40538c <.LVL269>

00405b22 <.LDL1>:
  405b22:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405b24:	2b00      	cmp	r3, #0
  405b26:	f43e afdd 	beq.w	404ae4 <.LVL44>
  405b2a:	9c05      	ldr	r4, [sp, #20]
  405b2c:	9811      	ldr	r0, [sp, #68]	; 0x44
  405b2e:	aa22      	add	r2, sp, #136	; 0x88
  405b30:	4621      	mov	r1, r4
  405b32:	f016 f8ff 	bl	41bd34 <.LFE61>

00405b36 <.LVL498>:
  405b36:	2800      	cmp	r0, #0
  405b38:	f43e afd4 	beq.w	404ae4 <.LVL44>
  405b3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405b40:	f7fe bfd3 	b.w	404aea <.LVL44+0x6>

00405b44 <.LVL499>:
  405b44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405b46:	9903      	ldr	r1, [sp, #12]
  405b48:	6813      	ldr	r3, [r2, #0]
  405b4a:	17cd      	asrs	r5, r1, #31
  405b4c:	4608      	mov	r0, r1
  405b4e:	3204      	adds	r2, #4

00405b50 <.LVL500>:
  405b50:	4629      	mov	r1, r5
  405b52:	920a      	str	r2, [sp, #40]	; 0x28
  405b54:	e9c3 0100 	strd	r0, r1, [r3]
  405b58:	463e      	mov	r6, r7

00405b5a <.LVL501>:
  405b5a:	f7fe bef4 	b.w	404946 <.LVL10>

00405b5e <.LVL502>:
  405b5e:	3304      	adds	r3, #4
  405b60:	8814      	ldrh	r4, [r2, #0]
  405b62:	930a      	str	r3, [sp, #40]	; 0x28

00405b64 <.LVL503>:
  405b64:	2500      	movs	r5, #0
  405b66:	f7ff b960 	b.w	404e2a <.LVL126>

00405b6a <.LVL504>:
  405b6a:	8814      	ldrh	r4, [r2, #0]
  405b6c:	3204      	adds	r2, #4
  405b6e:	2500      	movs	r5, #0
  405b70:	2301      	movs	r3, #1
  405b72:	920a      	str	r2, [sp, #40]	; 0x28

00405b74 <.LVL505>:
  405b74:	f7fe bffd 	b.w	404b72 <.L150>

00405b78 <.LVL506>:
  405b78:	3304      	adds	r3, #4
  405b7a:	8814      	ldrh	r4, [r2, #0]
  405b7c:	930a      	str	r3, [sp, #40]	; 0x28

00405b7e <.LVL507>:
  405b7e:	2500      	movs	r5, #0
  405b80:	f7fe bfe5 	b.w	404b4e <.LVL51>

00405b84 <.LVL508>:
  405b84:	980a      	ldr	r0, [sp, #40]	; 0x28
  405b86:	f9b0 4000 	ldrsh.w	r4, [r0]
  405b8a:	f7ff b979 	b.w	404e80 <.LVL136>

00405b8e <.LVL509>:
  405b8e:	aa22      	add	r2, sp, #136	; 0x88
  405b90:	9905      	ldr	r1, [sp, #20]
  405b92:	4658      	mov	r0, fp
  405b94:	f016 f8ce 	bl	41bd34 <.LFE61>

00405b98 <.LVL510>:
  405b98:	2800      	cmp	r0, #0
  405b9a:	f47e af9d 	bne.w	404ad8 <.L189>
  405b9e:	9b24      	ldr	r3, [sp, #144]	; 0x90

00405ba0 <.LVL511>:
  405ba0:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00405ba4 <.LVL512>:
  405ba4:	f7ff bb43 	b.w	40522e <.LVL233>

00405ba8 <.LVL513>:
  405ba8:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
  405bac:	783b      	ldrb	r3, [r7, #0]
  405bae:	f7fe befa 	b.w	4049a6 <.LVL22>

00405bb2 <.LBB47>:
  405bb2:	f018 0f01 	tst.w	r8, #1
  405bb6:	f43f ae0b 	beq.w	4057d0 <.LBB19>
  405bba:	e5f9      	b.n	4057b0 <.LVL403+0xa>

00405bbc <.LBE47>:
  405bbc:	2140      	movs	r1, #64	; 0x40
  405bbe:	9811      	ldr	r0, [sp, #68]	; 0x44

00405bc0 <.LVL517>:
  405bc0:	f00b f88e 	bl	410ce0 <.LFE20>

00405bc4 <.LVL518>:
  405bc4:	9a05      	ldr	r2, [sp, #20]
  405bc6:	6010      	str	r0, [r2, #0]
  405bc8:	6110      	str	r0, [r2, #16]
  405bca:	2800      	cmp	r0, #0
  405bcc:	f000 82f1 	beq.w	4061b2 <.LBE76>
  405bd0:	9a05      	ldr	r2, [sp, #20]
  405bd2:	2340      	movs	r3, #64	; 0x40
  405bd4:	6153      	str	r3, [r2, #20]
  405bd6:	f7fe bea0 	b.w	40491a <.LVL6>

00405bda <.LVL519>:
  405bda:	aa22      	add	r2, sp, #136	; 0x88
  405bdc:	9905      	ldr	r1, [sp, #20]
  405bde:	4658      	mov	r0, fp
  405be0:	f016 f8a8 	bl	41bd34 <.LFE61>

00405be4 <.LVL520>:
  405be4:	2800      	cmp	r0, #0
  405be6:	f47e af77 	bne.w	404ad8 <.L189>
  405bea:	991c      	ldr	r1, [sp, #112]	; 0x70
  405bec:	9b24      	ldr	r3, [sp, #144]	; 0x90

00405bee <.LVL521>:
  405bee:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00405bf2 <.LVL522>:
  405bf2:	e76f      	b.n	405ad4 <.LVL491>

00405bf4 <.LVL523>:
  405bf4:	2330      	movs	r3, #48	; 0x30
  405bf6:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
  405bfa:	2358      	movs	r3, #88	; 0x58
  405bfc:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
  405c00:	9b04      	ldr	r3, [sp, #16]
  405c02:	2b63      	cmp	r3, #99	; 0x63
  405c04:	f048 0402 	orr.w	r4, r8, #2

00405c08 <.LVL524>:
  405c08:	f300 8240 	bgt.w	40608c <.LVL656>
  405c0c:	2300      	movs	r3, #0
  405c0e:	9309      	str	r3, [sp, #36]	; 0x24
  405c10:	ae35      	add	r6, sp, #212	; 0xd4

00405c12 <.LBB48>:
  405c12:	ee18 3a90 	vmov	r3, s17
  405c16:	2b00      	cmp	r3, #0
  405c18:	9b0d      	ldr	r3, [sp, #52]	; 0x34

00405c1a <.LBE48>:
  405c1a:	f448 7281 	orr.w	r2, r8, #258	; 0x102
  405c1e:	9202      	str	r2, [sp, #8]

00405c20 <.LBB49>:
  405c20:	46a0      	mov	r8, r4
  405c22:	f023 0520 	bic.w	r5, r3, #32
  405c26:	f2c0 813e 	blt.w	405ea6 <.LVL602>
  405c2a:	eeb0 ab48 	vmov.f64	d10, d8
  405c2e:	2300      	movs	r3, #0
  405c30:	9306      	str	r3, [sp, #24]

00405c32 <.LVL527>:
  405c32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405c34:	2b61      	cmp	r3, #97	; 0x61
  405c36:	f000 81ec 	beq.w	406012 <.LBB68>
  405c3a:	2b41      	cmp	r3, #65	; 0x41
  405c3c:	f47f ae7e 	bne.w	40593c <.LVL445>
  405c40:	eeb0 0b4a 	vmov.f64	d0, d10
  405c44:	a81c      	add	r0, sp, #112	; 0x70

00405c46 <.LVL528>:
  405c46:	f019 fce3 	bl	41f610 <.LFE106>

00405c4a <.LVL529>:
  405c4a:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
  405c4e:	ee20 0b07 	vmul.f64	d0, d0, d7

00405c52 <.LVL530>:
  405c52:	eeb5 0b40 	vcmp.f64	d0, #0.0
  405c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405c5a:	d101      	bne.n	405c60 <.LVL530+0xe>
  405c5c:	2301      	movs	r3, #1
  405c5e:	931c      	str	r3, [sp, #112]	; 0x70
  405c60:	4c58      	ldr	r4, [pc, #352]	; (405dc4 <.LVL571+0x6>)

00405c62 <.LVL531>:
  405c62:	9b04      	ldr	r3, [sp, #16]
  405c64:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
  405c68:	3b01      	subs	r3, #1
  405c6a:	4631      	mov	r1, r6
  405c6c:	e005      	b.n	405c7a <.LVL533>

00405c6e <.LVL532>:
  405c6e:	eeb5 0b40 	vcmp.f64	d0, #0.0
  405c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405c76:	d014      	beq.n	405ca2 <.LVL536+0x6>
  405c78:	4611      	mov	r1, r2

00405c7a <.LVL533>:
  405c7a:	ee20 0b05 	vmul.f64	d0, d0, d5
  405c7e:	eefd 6bc0 	vcvt.s32.f64	s13, d0

00405c82 <.LVL535>:
  405c82:	460a      	mov	r2, r1
  405c84:	ee16 0a90 	vmov	r0, s13
  405c88:	f1b3 3fff 	cmp.w	r3, #4294967295
  405c8c:	5c20      	ldrb	r0, [r4, r0]
  405c8e:	f802 0b01 	strb.w	r0, [r2], #1
  405c92:	eeb8 7be6 	vcvt.f64.s32	d7, s13
  405c96:	4618      	mov	r0, r3
  405c98:	ee30 0b47 	vsub.f64	d0, d0, d7

00405c9c <.LVL536>:
  405c9c:	f103 33ff 	add.w	r3, r3, #4294967295
  405ca0:	d1e5      	bne.n	405c6e <.LVL532>
  405ca2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
  405ca6:	eeb4 0bc7 	vcmpe.f64	d0, d7
  405caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405cae:	f300 80ff 	bgt.w	405eb0 <.LVL604>
  405cb2:	eeb4 0b47 	vcmp.f64	d0, d7
  405cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405cba:	d104      	bne.n	405cc6 <.LVL537>
  405cbc:	ee16 3a90 	vmov	r3, s13
  405cc0:	07db      	lsls	r3, r3, #31
  405cc2:	f100 80f5 	bmi.w	405eb0 <.LVL604>

00405cc6 <.LVL537>:
  405cc6:	2800      	cmp	r0, #0
  405cc8:	db07      	blt.n	405cda <.LVL541>
  405cca:	1814      	adds	r4, r2, r0

00405ccc <.LVL538>:
  405ccc:	2330      	movs	r3, #48	; 0x30

00405cce <.LVL539>:
  405cce:	f801 3f01 	strb.w	r3, [r1, #1]!

00405cd2 <.LVL540>:
  405cd2:	42a1      	cmp	r1, r4
  405cd4:	d1fb      	bne.n	405cce <.LVL539>
  405cd6:	3001      	adds	r0, #1
  405cd8:	4402      	add	r2, r0

00405cda <.LVL541>:
  405cda:	1b93      	subs	r3, r2, r6
  405cdc:	46c6      	mov	lr, r8
  405cde:	930f      	str	r3, [sp, #60]	; 0x3c

00405ce0 <.LVL542>:
  405ce0:	f8dd 8008 	ldr.w	r8, [sp, #8]
  405ce4:	e651      	b.n	40598a <.LBE44>

00405ce6 <.LBB50>:
  405ce6:	aa22      	add	r2, sp, #136	; 0x88
  405ce8:	9905      	ldr	r1, [sp, #20]
  405cea:	4658      	mov	r0, fp
  405cec:	f016 f822 	bl	41bd34 <.LFE61>

00405cf0 <.LVL544>:
  405cf0:	2800      	cmp	r0, #0
  405cf2:	f47e aef1 	bne.w	404ad8 <.L189>
  405cf6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  405cf8:	9b24      	ldr	r3, [sp, #144]	; 0x90

00405cfa <.LVL545>:
  405cfa:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00405cfe <.LVL546>:
  405cfe:	e567      	b.n	4057d0 <.LBB19>

00405d00 <.LBE50>:
  405d00:	9913      	ldr	r1, [sp, #76]	; 0x4c
  405d02:	3101      	adds	r1, #1
  405d04:	9113      	str	r1, [sp, #76]	; 0x4c

00405d06 <.LVL548>:
  405d06:	e66e      	b.n	4059e6 <.LVL458>

00405d08 <.LVL549>:
  405d08:	4630      	mov	r0, r6
  405d0a:	9404      	str	r4, [sp, #16]
  405d0c:	f016 fcb8 	bl	41c680 <strlen>

00405d10 <.LVL550>:
  405d10:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
  405d14:	9008      	str	r0, [sp, #32]

00405d16 <.LVL551>:
  405d16:	950a      	str	r5, [sp, #40]	; 0x28
  405d18:	9202      	str	r2, [sp, #8]
  405d1a:	4623      	mov	r3, r4
  405d1c:	f7ff b96b 	b.w	404ff6 <.LBE12>

00405d20 <.LVL552>:
  405d20:	222d      	movs	r2, #45	; 0x2d
  405d22:	2300      	movs	r3, #0
  405d24:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
  405d28:	9304      	str	r3, [sp, #16]

00405d2a <.LVL553>:
  405d2a:	f7fe bf4b 	b.w	404bc4 <.LVL63>

00405d2e <.LVL554>:
  405d2e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  405d30:	930e      	str	r3, [sp, #56]	; 0x38
  405d32:	1cda      	adds	r2, r3, #3
  405d34:	db03      	blt.n	405d3e <.LVL555>
  405d36:	9a04      	ldr	r2, [sp, #16]
  405d38:	4293      	cmp	r3, r2
  405d3a:	f77f ae36 	ble.w	4059aa <.LVL454>

00405d3e <.LVL555>:
  405d3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405d40:	3b02      	subs	r3, #2

00405d42 <.LVL556>:
  405d42:	930d      	str	r3, [sp, #52]	; 0x34
  405d44:	f023 0520 	bic.w	r5, r3, #32

00405d48 <.LVL557>:
  405d48:	9b0e      	ldr	r3, [sp, #56]	; 0x38

00405d4a <.LBB51>:
  405d4a:	2d41      	cmp	r5, #65	; 0x41

00405d4c <.LBE51>:
  405d4c:	f103 33ff 	add.w	r3, r3, #4294967295
  405d50:	931c      	str	r3, [sp, #112]	; 0x70

00405d52 <.LBB59>:
  405d52:	f000 8159 	beq.w	406008 <.LBB67>

00405d56 <.LVL559>:
  405d56:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
  405d5a:	2100      	movs	r1, #0

00405d5c <.LVL560>:
  405d5c:	2b00      	cmp	r3, #0
  405d5e:	bfb8      	it	lt
  405d60:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38

00405d62 <.LVL561>:
  405d62:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  405d66:	bfba      	itte	lt
  405d68:	f1c3 0301 	rsblt	r3, r3, #1

00405d6c <.LVL562>:
  405d6c:	222d      	movlt	r2, #45	; 0x2d
  405d6e:	222b      	movge	r2, #43	; 0x2b
  405d70:	2b09      	cmp	r3, #9
  405d72:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79

00405d76 <.LVL563>:
  405d76:	f340 815d 	ble.w	406034 <.LBB69>
  405d7a:	f10d 0487 	add.w	r4, sp, #135	; 0x87

00405d7e <.LVL564>:
  405d7e:	4620      	mov	r0, r4
  405d80:	4d11      	ldr	r5, [pc, #68]	; (405dc8 <.LVL571+0xa>)
  405d82:	e000      	b.n	405d86 <.LVL566>

00405d84 <.LVL565>:
  405d84:	4610      	mov	r0, r2

00405d86 <.LVL566>:
  405d86:	fb85 1203 	smull	r1, r2, r5, r3
  405d8a:	17d9      	asrs	r1, r3, #31
  405d8c:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  405d90:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  405d94:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  405d98:	3230      	adds	r2, #48	; 0x30
  405d9a:	2909      	cmp	r1, #9
  405d9c:	f800 2c01 	strb.w	r2, [r0, #-1]
  405da0:	460b      	mov	r3, r1

00405da2 <.LVL567>:
  405da2:	f100 32ff 	add.w	r2, r0, #4294967295

00405da6 <.LVL568>:
  405da6:	dced      	bgt.n	405d84 <.LVL565>

00405da8 <.LVL569>:
  405da8:	3330      	adds	r3, #48	; 0x30
  405daa:	3802      	subs	r0, #2
  405dac:	b2db      	uxtb	r3, r3
  405dae:	4284      	cmp	r4, r0
  405db0:	f802 3c01 	strb.w	r3, [r2, #-1]
  405db4:	f240 81fa 	bls.w	4061ac <.LBB76>
  405db8:	f10d 007a 	add.w	r0, sp, #122	; 0x7a

00405dbc <.LVL570>:
  405dbc:	4611      	mov	r1, r2

00405dbe <.LVL571>:
  405dbe:	e007      	b.n	405dd0 <.LVL573>
  405dc0:	00420f00 	.word	0x00420f00
  405dc4:	00420ed0 	.word	0x00420ed0
  405dc8:	66666667 	.word	0x66666667

00405dcc <.LVL572>:
  405dcc:	f811 3b01 	ldrb.w	r3, [r1], #1

00405dd0 <.LVL573>:
  405dd0:	f800 3b01 	strb.w	r3, [r0], #1

00405dd4 <.LVL574>:
  405dd4:	428c      	cmp	r4, r1
  405dd6:	d1f9      	bne.n	405dcc <.LVL572>
  405dd8:	3401      	adds	r4, #1
  405dda:	1aa2      	subs	r2, r4, r2

00405ddc <.LVL575>:
  405ddc:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
  405de0:	441a      	add	r2, r3

00405de2 <.LVL576>:
  405de2:	ab1e      	add	r3, sp, #120	; 0x78

00405de4 <.LVL577>:
  405de4:	1ad3      	subs	r3, r2, r3

00405de6 <.LBE59>:
  405de6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c

00405de8 <.LBB60>:
  405de8:	9319      	str	r3, [sp, #100]	; 0x64

00405dea <.LBE60>:
  405dea:	2a01      	cmp	r2, #1
  405dec:	4413      	add	r3, r2
  405dee:	9308      	str	r3, [sp, #32]

00405df0 <.LVL581>:
  405df0:	f340 81ad 	ble.w	40614e <.LBE72>
  405df4:	9b08      	ldr	r3, [sp, #32]

00405df6 <.LVL582>:
  405df6:	9a15      	ldr	r2, [sp, #84]	; 0x54
  405df8:	4413      	add	r3, r2
  405dfa:	9308      	str	r3, [sp, #32]
  405dfc:	2300      	movs	r3, #0
  405dfe:	9313      	str	r3, [sp, #76]	; 0x4c
  405e00:	9310      	str	r3, [sp, #64]	; 0x40
  405e02:	930e      	str	r3, [sp, #56]	; 0x38
  405e04:	9b08      	ldr	r3, [sp, #32]
  405e06:	f42e 6e80 	bic.w	lr, lr, #1024	; 0x400
  405e0a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405e0e:	f44e 7880 	orr.w	r8, lr, #256	; 0x100

00405e12 <.LVL584>:
  405e12:	9302      	str	r3, [sp, #8]
  405e14:	e605      	b.n	405a22 <.LVL466>

00405e16 <.LBB23>:
  405e16:	aa22      	add	r2, sp, #136	; 0x88
  405e18:	9905      	ldr	r1, [sp, #20]
  405e1a:	4658      	mov	r0, fp
  405e1c:	f015 ff8a 	bl	41bd34 <.LFE61>

00405e20 <.LVL586>:
  405e20:	2800      	cmp	r0, #0
  405e22:	f47e ae59 	bne.w	404ad8 <.L189>
  405e26:	9b24      	ldr	r3, [sp, #144]	; 0x90

00405e28 <.LVL587>:
  405e28:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00405e2c <.LVL588>:
  405e2c:	f7ff bb29 	b.w	405482 <.LVL300>

00405e30 <.LBE23>:
  405e30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405e32:	6813      	ldr	r3, [r2, #0]
  405e34:	3204      	adds	r2, #4

00405e36 <.LVL590>:
  405e36:	920a      	str	r2, [sp, #40]	; 0x28
  405e38:	f8bd 200c 	ldrh.w	r2, [sp, #12]

00405e3c <.LVL591>:
  405e3c:	801a      	strh	r2, [r3, #0]
  405e3e:	463e      	mov	r6, r7

00405e40 <.LVL592>:
  405e40:	f7fe bd81 	b.w	404946 <.LVL10>

00405e44 <.LVL593>:
  405e44:	9b04      	ldr	r3, [sp, #16]
  405e46:	9613      	str	r6, [sp, #76]	; 0x4c
  405e48:	2b06      	cmp	r3, #6
  405e4a:	bf28      	it	cs
  405e4c:	2306      	movcs	r3, #6
  405e4e:	4632      	mov	r2, r6
  405e50:	9604      	str	r6, [sp, #16]
  405e52:	9610      	str	r6, [sp, #64]	; 0x40
  405e54:	960e      	str	r6, [sp, #56]	; 0x38
  405e56:	9609      	str	r6, [sp, #36]	; 0x24
  405e58:	9302      	str	r3, [sp, #8]

00405e5a <.LVL594>:
  405e5a:	950a      	str	r5, [sp, #40]	; 0x28
  405e5c:	9308      	str	r3, [sp, #32]
  405e5e:	4eae      	ldr	r6, [pc, #696]	; (406118 <.LVL671+0x2>)
  405e60:	f7fe beaf 	b.w	404bc2 <.L59>

00405e64 <.LVL595>:
  405e64:	222d      	movs	r2, #45	; 0x2d
  405e66:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
  405e6a:	f7ff b90d 	b.w	405088 <.LVL189+0x20>
  405e6e:	2330      	movs	r3, #48	; 0x30
  405e70:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
  405e74:	2378      	movs	r3, #120	; 0x78
  405e76:	e6c1      	b.n	405bfc <.LVL523+0x8>

00405e78 <.LVL596>:
  405e78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405e7a:	9a15      	ldr	r2, [sp, #84]	; 0x54
  405e7c:	4413      	add	r3, r2
  405e7e:	9308      	str	r3, [sp, #32]

00405e80 <.LVL597>:
  405e80:	9b0e      	ldr	r3, [sp, #56]	; 0x38

00405e82 <.LVL598>:
  405e82:	2b00      	cmp	r3, #0
  405e84:	f340 814e 	ble.w	406124 <.LBE71>
  405e88:	2367      	movs	r3, #103	; 0x67
  405e8a:	930d      	str	r3, [sp, #52]	; 0x34

00405e8c <.LVL599>:
  405e8c:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  405e90:	f47f ada3 	bne.w	4059da <.LVL457>
  405e94:	9b08      	ldr	r3, [sp, #32]
  405e96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405e9a:	9302      	str	r3, [sp, #8]

00405e9c <.LVL600>:
  405e9c:	2300      	movs	r3, #0
  405e9e:	9313      	str	r3, [sp, #76]	; 0x4c
  405ea0:	9310      	str	r3, [sp, #64]	; 0x40
  405ea2:	e5be      	b.n	405a22 <.LVL466>

00405ea4 <.LBB62>:
  405ea4:	9309      	str	r3, [sp, #36]	; 0x24

00405ea6 <.LVL602>:
  405ea6:	232d      	movs	r3, #45	; 0x2d
  405ea8:	9306      	str	r3, [sp, #24]
  405eaa:	eeb1 ab48 	vneg.f64	d10, d8

00405eae <.LVL603>:
  405eae:	e6c0      	b.n	405c32 <.LVL527>

00405eb0 <.LVL604>:
  405eb0:	9120      	str	r1, [sp, #128]	; 0x80
  405eb2:	f812 0c01 	ldrb.w	r0, [r2, #-1]

00405eb6 <.LVL605>:
  405eb6:	7be3      	ldrb	r3, [r4, #15]
  405eb8:	4283      	cmp	r3, r0
  405eba:	f040 8150 	bne.w	40615e <.LBB74>
  405ebe:	4613      	mov	r3, r2
  405ec0:	f04f 0e30 	mov.w	lr, #48	; 0x30
  405ec4:	f803 ec01 	strb.w	lr, [r3, #-1]
  405ec8:	9b20      	ldr	r3, [sp, #128]	; 0x80
  405eca:	1e59      	subs	r1, r3, #1
  405ecc:	9120      	str	r1, [sp, #128]	; 0x80
  405ece:	f813 1c01 	ldrb.w	r1, [r3, #-1]
  405ed2:	4281      	cmp	r1, r0
  405ed4:	d0f6      	beq.n	405ec4 <.LVL605+0xe>
  405ed6:	2939      	cmp	r1, #57	; 0x39
  405ed8:	bf16      	itet	ne
  405eda:	3101      	addne	r1, #1
  405edc:	7aa1      	ldrbeq	r1, [r4, #10]
  405ede:	b2c9      	uxtbne	r1, r1
  405ee0:	f803 1c01 	strb.w	r1, [r3, #-1]
  405ee4:	e6f9      	b.n	405cda <.LVL541>

00405ee6 <.LBB63>:
  405ee6:	9b04      	ldr	r3, [sp, #16]
  405ee8:	9302      	str	r3, [sp, #8]
  405eea:	9308      	str	r3, [sp, #32]

00405eec <.LBE63>:
  405eec:	9004      	str	r0, [sp, #16]
  405eee:	950a      	str	r5, [sp, #40]	; 0x28
  405ef0:	9013      	str	r0, [sp, #76]	; 0x4c
  405ef2:	9010      	str	r0, [sp, #64]	; 0x40
  405ef4:	900e      	str	r0, [sp, #56]	; 0x38
  405ef6:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  405efa:	f7fe be62 	b.w	404bc2 <.L59>

00405efe <.LVL607>:
  405efe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  405f00:	930e      	str	r3, [sp, #56]	; 0x38
  405f02:	2b00      	cmp	r3, #0
  405f04:	9b04      	ldr	r3, [sp, #16]
  405f06:	f340 812d 	ble.w	406164 <.LBE74>

00405f0a <.LVL608>:
  405f0a:	2b00      	cmp	r3, #0
  405f0c:	f040 80ec 	bne.w	4060e8 <.LVL665>
  405f10:	f01e 0f01 	tst.w	lr, #1
  405f14:	f040 80e8 	bne.w	4060e8 <.LVL665>
  405f18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405f1a:	9308      	str	r3, [sp, #32]
  405f1c:	2366      	movs	r3, #102	; 0x66
  405f1e:	930d      	str	r3, [sp, #52]	; 0x34
  405f20:	e7b4      	b.n	405e8c <.LVL599>

00405f22 <.LBB64>:
  405f22:	9c04      	ldr	r4, [sp, #16]
  405f24:	eeb0 0b4a 	vmov.f64	d0, d10
  405f28:	aa20      	add	r2, sp, #128	; 0x80

00405f2a <.LVL610>:
  405f2a:	ab1d      	add	r3, sp, #116	; 0x74
  405f2c:	9201      	str	r2, [sp, #4]
  405f2e:	9300      	str	r3, [sp, #0]
  405f30:	2103      	movs	r1, #3
  405f32:	ab1c      	add	r3, sp, #112	; 0x70

00405f34 <.LVL611>:
  405f34:	4622      	mov	r2, r4
  405f36:	4658      	mov	r0, fp
  405f38:	f006 ff66 	bl	40ce08 <_dtoa_r>

00405f3c <.LVL612>:
  405f3c:	4606      	mov	r6, r0

00405f3e <.LVL613>:
  405f3e:	1901      	adds	r1, r0, r4

00405f40 <.LVL614>:
  405f40:	7833      	ldrb	r3, [r6, #0]
  405f42:	2b30      	cmp	r3, #48	; 0x30
  405f44:	f000 80f9 	beq.w	40613a <.LBB72>
  405f48:	9c1c      	ldr	r4, [sp, #112]	; 0x70

00405f4a <.LVL615>:
  405f4a:	4421      	add	r1, r4
  405f4c:	eeb5 ab40 	vcmp.f64	d10, #0.0
  405f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405f54:	d00b      	beq.n	405f6e <.LVL618>
  405f56:	9b20      	ldr	r3, [sp, #128]	; 0x80
  405f58:	4299      	cmp	r1, r3
  405f5a:	f67f ad11 	bls.w	405980 <.LVL452>
  405f5e:	2030      	movs	r0, #48	; 0x30

00405f60 <.LVL617>:
  405f60:	1c5a      	adds	r2, r3, #1
  405f62:	9220      	str	r2, [sp, #128]	; 0x80
  405f64:	7018      	strb	r0, [r3, #0]
  405f66:	9b20      	ldr	r3, [sp, #128]	; 0x80
  405f68:	4299      	cmp	r1, r3
  405f6a:	d8f9      	bhi.n	405f60 <.LVL617>
  405f6c:	e508      	b.n	405980 <.LVL452>

00405f6e <.LVL618>:
  405f6e:	460b      	mov	r3, r1
  405f70:	e506      	b.n	405980 <.LVL452>

00405f72 <.LBB24>:
  405f72:	aa22      	add	r2, sp, #136	; 0x88
  405f74:	9905      	ldr	r1, [sp, #20]
  405f76:	4658      	mov	r0, fp
  405f78:	f015 fedc 	bl	41bd34 <.LFE61>

00405f7c <.LVL620>:
  405f7c:	2800      	cmp	r0, #0
  405f7e:	f47e adab 	bne.w	404ad8 <.L189>
  405f82:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  405f84:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405f86:	9b24      	ldr	r3, [sp, #144]	; 0x90

00405f88 <.LVL621>:
  405f88:	1a8a      	subs	r2, r1, r2
  405f8a:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00405f8e <.LVL622>:
  405f8e:	e436      	b.n	4057fe <.LVL409>

00405f90 <.LBE24>:
  405f90:	424c      	negs	r4, r1
  405f92:	3110      	adds	r1, #16

00405f94 <.LVL624>:
  405f94:	da5d      	bge.n	406052 <.LVL651>
  405f96:	2510      	movs	r5, #16
  405f98:	e004      	b.n	405fa4 <.LVL626+0x6>

00405f9a <.LVL625>:
  405f9a:	f109 0908 	add.w	r9, r9, #8

00405f9e <.LVL626>:
  405f9e:	3c10      	subs	r4, #16
  405fa0:	2c10      	cmp	r4, #16
  405fa2:	dd56      	ble.n	406052 <.LVL651>
  405fa4:	3201      	adds	r2, #1
  405fa6:	3310      	adds	r3, #16
  405fa8:	2a07      	cmp	r2, #7
  405faa:	9324      	str	r3, [sp, #144]	; 0x90

00405fac <.LVL629>:
  405fac:	9223      	str	r2, [sp, #140]	; 0x8c
  405fae:	f8c9 a000 	str.w	sl, [r9]
  405fb2:	f8c9 5004 	str.w	r5, [r9, #4]
  405fb6:	ddf0      	ble.n	405f9a <.LVL625>
  405fb8:	aa22      	add	r2, sp, #136	; 0x88
  405fba:	9905      	ldr	r1, [sp, #20]
  405fbc:	4658      	mov	r0, fp
  405fbe:	f015 feb9 	bl	41bd34 <.LFE61>

00405fc2 <.LVL630>:
  405fc2:	2800      	cmp	r0, #0
  405fc4:	f47e ad88 	bne.w	404ad8 <.L189>
  405fc8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405fca:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  405fcc:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00405fd0 <.LVL631>:
  405fd0:	e7e5      	b.n	405f9e <.LVL626>

00405fd2 <.LVL632>:
  405fd2:	aa22      	add	r2, sp, #136	; 0x88
  405fd4:	9905      	ldr	r1, [sp, #20]
  405fd6:	4658      	mov	r0, fp
  405fd8:	f015 feac 	bl	41bd34 <.LFE61>

00405fdc <.LVL633>:
  405fdc:	2800      	cmp	r0, #0
  405fde:	f47e ad7b 	bne.w	404ad8 <.L189>
  405fe2:	991c      	ldr	r1, [sp, #112]	; 0x70
  405fe4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405fe6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  405fe8:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00405fec <.LVL634>:
  405fec:	e589      	b.n	405b02 <.LVL494>

00405fee <.LVL635>:
  405fee:	9b08      	ldr	r3, [sp, #32]
  405ff0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405ff4:	9302      	str	r3, [sp, #8]

00405ff6 <.LVL636>:
  405ff6:	2367      	movs	r3, #103	; 0x67
  405ff8:	930d      	str	r3, [sp, #52]	; 0x34
  405ffa:	e74f      	b.n	405e9c <.LVL600>

00405ffc <.LVL637>:
  405ffc:	2200      	movs	r2, #0
  405ffe:	9204      	str	r2, [sp, #16]
  406000:	f7fe bcd2 	b.w	4049a8 <.LVL22+0x2>

00406004 <.LBB66>:
  406004:	1931      	adds	r1, r6, r4

00406006 <.LVL639>:
  406006:	e7a1      	b.n	405f4c <.LVL615+0x2>

00406008 <.LBB67>:
  406008:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40600a:	320f      	adds	r2, #15
  40600c:	b2d2      	uxtb	r2, r2
  40600e:	2101      	movs	r1, #1
  406010:	e6a4      	b.n	405d5c <.LVL560>

00406012 <.LBB68>:
  406012:	eeb0 0b4a 	vmov.f64	d0, d10
  406016:	a81c      	add	r0, sp, #112	; 0x70

00406018 <.LVL642>:
  406018:	f019 fafa 	bl	41f610 <.LFE106>

0040601c <.LVL643>:
  40601c:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
  406020:	ee20 0b07 	vmul.f64	d0, d0, d7

00406024 <.LVL644>:
  406024:	eeb5 0b40 	vcmp.f64	d0, #0.0
  406028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40602c:	f000 80af 	beq.w	40618e <.LBB75>
  406030:	4c3a      	ldr	r4, [pc, #232]	; (40611c <.LVL671+0x6>)
  406032:	e616      	b.n	405c62 <.LVL531>

00406034 <.LBB69>:
  406034:	2900      	cmp	r1, #0
  406036:	f040 808f 	bne.w	406158 <.LBB73>

0040603a <.LVL646>:
  40603a:	2230      	movs	r2, #48	; 0x30
  40603c:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
  406040:	f10d 027b 	add.w	r2, sp, #123	; 0x7b

00406044 <.LVL647>:
  406044:	3330      	adds	r3, #48	; 0x30

00406046 <.LVL648>:
  406046:	7013      	strb	r3, [r2, #0]
  406048:	3201      	adds	r2, #1
  40604a:	e6ca      	b.n	405de2 <.LVL576>

0040604c <.LBE69>:
  40604c:	2306      	movs	r3, #6
  40604e:	9304      	str	r3, [sp, #16]
  406050:	e466      	b.n	405920 <.LBB28>

00406052 <.LVL651>:
  406052:	3201      	adds	r2, #1
  406054:	4423      	add	r3, r4
  406056:	2a07      	cmp	r2, #7
  406058:	f8c9 a000 	str.w	sl, [r9]
  40605c:	f8c9 4004 	str.w	r4, [r9, #4]
  406060:	9324      	str	r3, [sp, #144]	; 0x90
  406062:	9223      	str	r2, [sp, #140]	; 0x8c
  406064:	f109 0908 	add.w	r9, r9, #8
  406068:	f77f ad4e 	ble.w	405b08 <.LVL495>
  40606c:	aa22      	add	r2, sp, #136	; 0x88
  40606e:	9905      	ldr	r1, [sp, #20]
  406070:	4658      	mov	r0, fp
  406072:	f015 fe5f 	bl	41bd34 <.LFE61>

00406076 <.LVL653>:
  406076:	2800      	cmp	r0, #0
  406078:	f47e ad2e 	bne.w	404ad8 <.L189>
  40607c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40607e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  406080:	f10d 0994 	add.w	r9, sp, #148	; 0x94

00406084 <.LVL654>:
  406084:	e540      	b.n	405b08 <.LVL495>

00406086 <.LVL655>:
  406086:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406088:	9308      	str	r3, [sp, #32]
  40608a:	e49c      	b.n	4059c6 <.LVL456>

0040608c <.LVL656>:
  40608c:	1c59      	adds	r1, r3, #1
  40608e:	4658      	mov	r0, fp
  406090:	f00a fe26 	bl	410ce0 <.LFE20>

00406094 <.LVL657>:
  406094:	4606      	mov	r6, r0

00406096 <.LVL658>:
  406096:	2800      	cmp	r0, #0
  406098:	f000 8096 	beq.w	4061c8 <.LVL695>
  40609c:	9009      	str	r0, [sp, #36]	; 0x24
  40609e:	e5b8      	b.n	405c12 <.LBB48>

004060a0 <.LBB70>:
  4060a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4060a2:	2b47      	cmp	r3, #71	; 0x47
  4060a4:	d1ae      	bne.n	406004 <.LBB66>
  4060a6:	f018 0f01 	tst.w	r8, #1
  4060aa:	f43f ac68 	beq.w	40597e <.LVL451>
  4060ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4060b0:	2b46      	cmp	r3, #70	; 0x46
  4060b2:	eb06 0104 	add.w	r1, r6, r4

004060b6 <.LVL660>:
  4060b6:	f43f af43 	beq.w	405f40 <.LVL614>
  4060ba:	e747      	b.n	405f4c <.LVL615+0x2>

004060bc <.LBE70>:
  4060bc:	4e18      	ldr	r6, [pc, #96]	; (406120 <.LVL671+0xa>)

004060be <.LVL662>:
  4060be:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  4060c0:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
  4060c4:	2300      	movs	r3, #0
  4060c6:	4619      	mov	r1, r3
  4060c8:	2003      	movs	r0, #3
  4060ca:	9309      	str	r3, [sp, #36]	; 0x24
  4060cc:	1f33      	subs	r3, r6, #4
  4060ce:	9104      	str	r1, [sp, #16]
  4060d0:	9002      	str	r0, [sp, #8]
  4060d2:	f028 0880 	bic.w	r8, r8, #128	; 0x80

004060d6 <.LVL663>:
  4060d6:	2c47      	cmp	r4, #71	; 0x47
  4060d8:	bfd8      	it	le
  4060da:	461e      	movle	r6, r3

004060dc <.LVL664>:
  4060dc:	9113      	str	r1, [sp, #76]	; 0x4c
  4060de:	9110      	str	r1, [sp, #64]	; 0x40
  4060e0:	910e      	str	r1, [sp, #56]	; 0x38
  4060e2:	9008      	str	r0, [sp, #32]
  4060e4:	f7fe bd6d 	b.w	404bc2 <.L59>

004060e8 <.LVL665>:
  4060e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4060ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4060ec:	4413      	add	r3, r2
  4060ee:	9a04      	ldr	r2, [sp, #16]
  4060f0:	441a      	add	r2, r3
  4060f2:	2366      	movs	r3, #102	; 0x66
  4060f4:	9208      	str	r2, [sp, #32]

004060f6 <.LVL666>:
  4060f6:	930d      	str	r3, [sp, #52]	; 0x34
  4060f8:	e6c8      	b.n	405e8c <.LVL599>

004060fa <.LBB71>:
  4060fa:	9c04      	ldr	r4, [sp, #16]
  4060fc:	eeb0 0b4a 	vmov.f64	d0, d10
  406100:	aa20      	add	r2, sp, #128	; 0x80

00406102 <.LVL668>:
  406102:	ab1d      	add	r3, sp, #116	; 0x74
  406104:	9201      	str	r2, [sp, #4]
  406106:	9300      	str	r3, [sp, #0]
  406108:	4622      	mov	r2, r4
  40610a:	ab1c      	add	r3, sp, #112	; 0x70

0040610c <.LVL669>:
  40610c:	2103      	movs	r1, #3
  40610e:	4658      	mov	r0, fp
  406110:	f006 fe7a 	bl	40ce08 <_dtoa_r>

00406114 <.LVL670>:
  406114:	4606      	mov	r6, r0

00406116 <.LVL671>:
  406116:	e7ca      	b.n	4060ae <.LBB70+0xe>
  406118:	00420ef8 	.word	0x00420ef8
  40611c:	00420ee4 	.word	0x00420ee4
  406120:	00420ecc 	.word	0x00420ecc

00406124 <.LBE71>:
  406124:	9a08      	ldr	r2, [sp, #32]
  406126:	f1c3 0301 	rsb	r3, r3, #1
  40612a:	441a      	add	r2, r3
  40612c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  406130:	9302      	str	r3, [sp, #8]

00406132 <.LVL673>:
  406132:	2367      	movs	r3, #103	; 0x67
  406134:	9208      	str	r2, [sp, #32]

00406136 <.LVL674>:
  406136:	930d      	str	r3, [sp, #52]	; 0x34
  406138:	e6b0      	b.n	405e9c <.LVL600>

0040613a <.LBB72>:
  40613a:	eeb5 ab40 	vcmp.f64	d10, #0.0
  40613e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  406142:	f43f af01 	beq.w	405f48 <.LVL614+0x8>
  406146:	f1c4 0401 	rsb	r4, r4, #1

0040614a <.LVL676>:
  40614a:	941c      	str	r4, [sp, #112]	; 0x70
  40614c:	e6fd      	b.n	405f4a <.LVL615>

0040614e <.LBE72>:
  40614e:	f01e 0f01 	tst.w	lr, #1
  406152:	f43f ae53 	beq.w	405dfc <.LVL582+0x6>
  406156:	e64d      	b.n	405df4 <.LVL581+0x4>

00406158 <.LBB73>:
  406158:	f10d 027a 	add.w	r2, sp, #122	; 0x7a

0040615c <.LVL679>:
  40615c:	e772      	b.n	406044 <.LVL647>

0040615e <.LBB74>:
  40615e:	4601      	mov	r1, r0
  406160:	4613      	mov	r3, r2
  406162:	e6b8      	b.n	405ed6 <.LVL605+0x20>

00406164 <.LBE74>:
  406164:	b913      	cbnz	r3, 40616c <.LBE74+0x8>
  406166:	f01e 0f01 	tst.w	lr, #1
  40616a:	d00a      	beq.n	406182 <.LVL683>
  40616c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40616e:	9a04      	ldr	r2, [sp, #16]
  406170:	3301      	adds	r3, #1
  406172:	441a      	add	r2, r3
  406174:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  406178:	9302      	str	r3, [sp, #8]

0040617a <.LVL682>:
  40617a:	2366      	movs	r3, #102	; 0x66
  40617c:	9208      	str	r2, [sp, #32]
  40617e:	930d      	str	r3, [sp, #52]	; 0x34
  406180:	e68c      	b.n	405e9c <.LVL600>

00406182 <.LVL683>:
  406182:	2301      	movs	r3, #1
  406184:	9302      	str	r3, [sp, #8]

00406186 <.LVL684>:
  406186:	9308      	str	r3, [sp, #32]

00406188 <.LVL685>:
  406188:	2366      	movs	r3, #102	; 0x66
  40618a:	930d      	str	r3, [sp, #52]	; 0x34
  40618c:	e686      	b.n	405e9c <.LVL600>

0040618e <.LBB75>:
  40618e:	2301      	movs	r3, #1
  406190:	931c      	str	r3, [sp, #112]	; 0x70
  406192:	e74d      	b.n	406030 <.LVL644+0xc>

00406194 <.LVL687>:
  406194:	980a      	ldr	r0, [sp, #40]	; 0x28
  406196:	787b      	ldrb	r3, [r7, #1]

00406198 <.LVL688>:
  406198:	6802      	ldr	r2, [r0, #0]
  40619a:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
  40619e:	9204      	str	r2, [sp, #16]

004061a0 <.LBE75>:
  4061a0:	4602      	mov	r2, r0
  4061a2:	3204      	adds	r2, #4

004061a4 <.LVL689>:
  4061a4:	460f      	mov	r7, r1

004061a6 <.LVL690>:
  4061a6:	920a      	str	r2, [sp, #40]	; 0x28
  4061a8:	f7fe bbfd 	b.w	4049a6 <.LVL22>

004061ac <.LBB76>:
  4061ac:	f10d 027a 	add.w	r2, sp, #122	; 0x7a

004061b0 <.LVL692>:
  4061b0:	e617      	b.n	405de2 <.LVL576>

004061b2 <.LBE76>:
  4061b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4061b4:	230c      	movs	r3, #12
  4061b6:	6013      	str	r3, [r2, #0]
  4061b8:	f04f 33ff 	mov.w	r3, #4294967295
  4061bc:	9303      	str	r3, [sp, #12]
  4061be:	f7fe bc9b 	b.w	404af8 <.LVL45>

004061c2 <.LVL694>:
  4061c2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  4061c4:	930e      	str	r3, [sp, #56]	; 0x38
  4061c6:	e5bf      	b.n	405d48 <.LVL557>

004061c8 <.LVL695>:
  4061c8:	9a05      	ldr	r2, [sp, #20]
  4061ca:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4061ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4061d2:	8193      	strh	r3, [r2, #12]
  4061d4:	f7fe bc89 	b.w	404aea <.LVL44+0x6>

Disassembly of section .rodata.sample_text%37:

004061d8 <sample_text>:
  4061d8:	6942 646f 6569 6573 206c 7563 6970 6164     Biodiesel cupida
  4061e8:	6174 2074 616d 6672 2c61 6320 696c 6863     tat marfa, clich
  4061f8:	2065 7561 6574 7020 7475 6120 6220 7269     e aute put a bir
  406208:	2064 6e6f 6920 2074 6e69 6963 6964 7564     d on it incididu
  406218:	746e 6520 696c 0a74 6f70 616c 6f72 6469     nt elit.polaroid
  406228:	202e 7553 746e 7420 7461 6f74 656f 2064     . Sunt tattooed 
  406238:	6562 7073 6b6f 2065 6572 7270 6865 6e65     bespoke reprehen
  406248:	6564 6972 2e74 5320 6e69 2074 7774 6565     derit. Sint twee
  406258:	6f20 6772 6e61 6369 6920 0a64 616d 6672      organic id.marf
  406268:	2e61 4320 6d6f 6f6d 6f64 7620 6e65 6169     a. Commodo venia
  406278:	206d 6461 6520 7373 2065 6167 7473 6f72     m ad esse gastro
  406288:	7570 2e62 3320 7720 6c6f 2066 6f6d 6e6f     pub. 3 wolf moon
  406298:	7320 7261 6f74 6972 6c61 7620 7265 2c6f      sartorial vero,
  4062a8:	700a 616c 6469 6420 6c65 6365 7574 2073     .plaid delectus 
  4062b8:	6962 646f 6569 6573 206c 7173 6975 2064     biodiesel squid 
  4062c8:	312b 7620 6369 2e65 5020 736f 2d74 7269     +1 vice. Post-ir
  4062d8:	6e6f 6369 6b20 6665 6966 6579 2068 656c     onic keffiyeh le
  4062e8:	6767 6e69 7367 730a 6c65 6966 7365 6320     ggings.selfies c
  4062f8:	6172 2079 6166 2070 6f68 646f 6569 202c     ray fap hoodie, 
  406308:	6f66 6172 6567 6120 696e 2e6d 4320 7261     forage anim. Car
  406318:	656c 2073 7563 6970 6164 6174 2074 6873     les cupidatat sh
  406328:	726f 6465 7469 6863 202c 4856 0a53 6d73     oreditch, VHS.sm
  406338:	6c61 206c 6162 6374 2068 656d 6767 6e69     all batch meggin
  406348:	7367 6b20 676f 2069 6f64 6f6c 6572 6620     gs kogi dolore f
  406358:	6f6f 2064 7274 6375 206b 6562 7073 6b6f     ood truck bespok
  406368:	2065 6167 7473 6f72 7570 2e62 0a0a 6554     e gastropub...Te
  406378:	7272 2079 6972 6863 7261 7364 6e6f 6120     rry richardson a
  406388:	6964 6970 6973 6963 676e 6120 7463 6175     dipisicing actua
  406398:	6c6c 2079 7974 6570 7277 7469 7265 7420     lly typewriter t
  4063a8:	6d75 6c62 2c72 7420 6577 2065 6877 7461     umblr, twee what
  4063b8:	7665 7265 660a 756f 2072 6f6c 6f6b 7920     ever.four loko y
  4063c8:	756f 7020 6f72 6162 6c62 2079 6168 6576     ou probably have
  4063d8:	276e 2074 6568 7261 2064 666f 7420 6568     n't heard of the
  4063e8:	206d 6968 6867 6c20 6669 2e65 4d20 7365     m high life. Mes
  4063f8:	6573 676e 7265 6220 6761 770a 6168 6574     senger bag.whate
  406408:	6576 2072 6174 7474 6f6f 6465 6420 6565     ver tattooed dee
  406418:	2070 2076 6c6d 736b 6b68 202e 7242 6f6f     p v mlkshk. Broo
  406428:	6c6b 6e79 7020 6e69 6574 6572 7473 6120     klyn pinterest a
  406438:	7373 6d75 6e65 6164 6320 6968 6c6c 6177     ssumenda chillwa
  406448:	6576 650a 2c74 6220 6e61 736b 2079 6c75     ve.et, banksy ul
  406458:	616c 636d 206f 656d 7373 6e65 6567 2072     lamco messenger 
  406468:	6162 2067 6d75 6d61 2069 6170 6972 7461     bag umami pariat
  406478:	7275 6420 7269 6365 2074 7274 6461 2065     ur direct trade 
  406488:	6f66 6172 6567 0a2e 7954 6570 7277 7469     forage..Typewrit
  406498:	7265 6320 6c75 6170 7420 7972 682d 7261     er culpa try-har
  4064a8:	2c64 7020 7261 6169 7574 2072 6973 746e     d, pariatur sint
  4064b8:	6220 6f72 6b6f 796c 206e 656d 6767 6e69      brooklyn meggin
  4064c8:	7367 202e 6547 746e 6972 7966 660a 6f6f     gs. Gentrify.foo
  4064d8:	2064 7274 6375 206b 656e 7478 6c20 7665     d truck next lev
  4064e8:	6c65 202c 6f74 7375 656c 2064 7269 6e6f     el, tousled iron
  4064f8:	2079 6f6e 206e 6573 696d 746f 6369 2073     y non semiotics 
  406508:	4250 2052 7465 6968 6163 206c 6e61 6d69     PBR ethical anim
  406518:	6320 6572 0a64 6572 6461 6d79 6461 2e65      cred.readymade.
  406528:	4d20 6d75 6c62 6365 726f 2065 7262 6e75      Mumblecore brun
  406538:	6863 6c20 6d6f 206f 646f 2064 7566 7574     ch lomo odd futu
  406548:	6572 202c 6f70 7472 616c 646e 6f20 6772     re, portland org
  406558:	6e61 6369 7420 7265 7972 720a 6369 6168     anic terry.richa
  406568:	6472 6f73 206e 6c65 7469 6c20 6765 6967     rdson elit leggi
  406578:	676e 2073 6461 7069 7369 6369 6e69 2067     ngs adipisicing 
  406588:	6e65 756e 2069 6172 2077 6564 696e 206d     ennui raw denim 
  406598:	6162 6a6e 206f 6568 6c6c 2e61 4720 646f     banjo hella. God
  4065a8:	7261 0a64 696d 7478 7061 2065 6f70 616c     ard.mixtape pola
  4065b8:	6f72 6469 202c 6f70 6b72 6220 6c65 796c     roid, pork belly
  4065c8:	7220 6165 7964 616d 6564 6f20 6772 6e61      readymade organ
  4065d8:	6369 6320 6172 2079 7974 6570 7277 7469     ic cray typewrit
  4065e8:	7265 6820 6c65 6576 6974 6163 660a 756f     er helvetica.fou
  4065f8:	2072 6f6c 6f6b 7720 6168 6574 6576 2072     r loko whatever 
  406608:	7473 6572 7465 6120 7472 7920 2072 6166     street art yr fa
  406618:	6d72 742d 2d6f 6174 6c62 2e65 0a0a 6956     rm-to-table...Vi
  406628:	796e 206c 656b 7479 7261 7620 6369 2065     nyl keytar vice 
  406638:	6f74 7566 202e 6f4c 6163 6f76 6572 7920     tofu. Locavore y
  406648:	756f 7020 6f72 6162 6c62 2079 6168 6576     ou probably have
  406658:	276e 2074 6568 7261 2064 666f 7420 6568     n't heard of the
  406668:	206d 7570 0a67 6970 6b63 656c 2c64 6820     m pug.pickled, h
  406678:	6c65 616c 7420 6e6f 2078 616c 6f62 6572     ella tonx labore
  406688:	7420 7572 6666 7561 2074 4944 2059 6c6d      truffaut DIY ml
  406698:	736b 6b68 6520 696c 2074 6f63 6273 2079     kshk elit cosby 
  4066a8:	7773 6165 6574 2072 6973 746e 650a 2074     sweater sint.et 
  4066b8:	756d 626d 656c 6f63 6572 202e 6c45 7469     mumblecore. Elit
  4066c8:	7320 6177 2067 6573 696d 746f 6369 2c73      swag semiotics,
  4066d8:	7220 7065 6572 6568 646e 7265 7469 4420      reprehenderit D
  4066e8:	5949 7320 7261 6f74 6972 6c61 6e20 7369     IY sartorial nis
  4066f8:	2069 6775 0a68 656e 6373 7569 746e 7020     i ugh.nesciunt p
  406708:	6775 7020 726f 206b 6562 6c6c 2079 6177     ug pork belly wa
  406718:	6679 7261 7265 2073 6573 666c 6569 2073     yfarers selfies 
  406728:	6564 656c 7463 7375 202e 7445 6968 6163     delectus. Ethica
  406738:	206c 6f68 646f 6569 730a 6965 6174 206e     l hoodie.seitan 
  406748:	6966 676e 7265 7473 6361 6568 6b20 6c61     fingerstache kal
  406758:	2065 6863 7069 2e73 5420 7265 7972 7220     e chips. Terry r
  406768:	6369 6168 6472 6f73 206e 7261 6974 6173     ichardson artisa
  406778:	206e 6977 6c6c 6169 736d 7562 6772 0a2c     n williamsburg,.
  406788:	6965 7375 6f6d 2064 6166 6e6e 2079 6170     eiusmod fanny pa
  406798:	6b63 6920 6f72 796e 7420 6e6f 2078 6e65     ck irony tonx en
  4067a8:	756e 2069 6f6c 662d 2069 6e69 6963 6964     nui lo-fi incidi
  4067b8:	7564 746e 7420 666f 2075 4f59 4f4c 720a     dunt tofu YOLO.r
  4067c8:	6165 7964 616d 6564 202e 2d38 6962 2074     eadymade. 8-bit 
  4067d8:	6573 2064 7465 6e68 6369 6220 6165 6472     sed ethnic beard
  4067e8:	6f20 6666 6369 6169 202e 6f50 7275 6f2d      officia. Pour-o
  4067f8:	6576 2072 7069 6f68 656e 4420 5949 6220     ver iphone DIY b
  406808:	7475 6863 7265 0a2c 7465 6e68 6369 6120     utcher,.ethnic a
  406818:	7472 7020 7261 7974 7120 6975 6c20 7465     rt party qui let
  406828:	6574 7072 6572 7373 6e20 7369 2069 7270     terpress nisi pr
  406838:	696f 6564 746e 6a20 6165 206e 6873 726f     oident jean shor
  406848:	7374 6d20 6b6c 6873 0a6b 6f6c 6163 6f76     ts mlkshk.locavo
  406858:	6572 0a2e 4e0a 7261 6877 6c61 6620 656c     re...Narwhal fle
  406868:	6978 6174 6972 6e61 6c20 7465 6574 7072     xitarian letterp
  406878:	6572 7373 202c 6f64 6720 756c 6574 2d6e     ress, do gluten-
  406888:	7266 6565 7620 6c6f 7075 6174 6574 6e20     free voluptate n
  406898:	7865 2074 656c 6576 0a6c 6162 686e 6d20     ext level.banh m
  4068a8:	2069 6f74 786e 6920 636e 6469 6469 6e75     i tonx incididun
  4068b8:	2074 6163 6c72 7365 4420 5949 202e 644f     t carles DIY. Od
  4068c8:	2064 7566 7574 6572 6e20 6c75 616c 3820     d future nulla 8
  4068d8:	622d 7469 6220 6165 6472 7520 0a74 6963     -bit beard ut.ci
  4068e8:	6c6c 6d75 7020 6369 6c6b 6465 7620 6c65     llum pickled vel
  4068f8:	7469 202c 4f59 4f4c 6f20 6666 6369 6169     it, YOLO officia
  406908:	7920 756f 7020 6f72 6162 6c62 2079 6168      you probably ha
  406918:	6576 276e 2074 6568 7261 2064 666f 7420     ven't heard of t
  406928:	6568 0a6d 7274 7375 2074 7566 646e 6720     hem.trust fund g
  406938:	7361 7274 706f 6275 202e 694e 6973 6120     astropub. Nisi a
  406948:	6964 6970 6973 6963 676e 7420 7461 6f74     dipisicing tatto
  406958:	656f 2c64 4120 7375 6974 206e 6c6d 736b     oed, Austin mlks
  406968:	6b68 3920 2730 0a73 6d73 6c61 206c 6162     hk 90's.small ba
  406978:	6374 2068 6d61 7265 6369 6e61 6120 7070     tch american app
  406988:	7261 6c65 202e 7550 2074 2061 6962 6472     arel. Put a bird
  406998:	6f20 206e 7469 6320 736f 7962 7320 6577      on it cosby swe
  4069a8:	7461 7265 6220 6665 726f 2065 6874 7965     ater before they
  4069b8:	730a 6c6f 2064 756f 2074 6f70 6b72 6220     .sold out pork b
  4069c8:	6c65 796c 6b20 676f 2069 6568 6c6c 2e61     elly kogi hella.
  4069d8:	5320 7274 6565 2074 7261 2074 6f6d 6c6c      Street art moll
  4069e8:	7469 7320 7375 6174 6e69 6261 656c 7020     it sustainable p
  4069f8:	6c6f 7261 696f 2c64 440a 5949 6520 6874     olaroid,.DIY eth
  406a08:	696e 2063 6165 7020 6775 6220 6165 6472     nic ea pug beard
  406a18:	6420 6572 6d61 6163 6374 6568 2072 6f63      dreamcatcher co
  406a28:	6273 2079 7773 6165 6574 2072 616d 6e67     sby sweater magn
  406a38:	2061 6373 6e65 7365 6574 2072 696e 6973     a scenester nisi
  406a48:	0a2e 6553 2064 6f70 6b72 6220 6c65 796c     ..Sed pork belly
  406a58:	7320 616b 6574 6f62 7261 2064 6f6d 6c6c      skateboard moll
  406a68:	7469 202c 616c 6f62 6572 7020 6f72 6469     it, labore proid
  406a78:	6e65 2074 6965 7375 6f6d 2e64 5320 6972     ent eiusmod. Sri
  406a88:	6172 6863 0a61 7865 6563 7470 7565 2072     racha.excepteur 
  406a98:	6f63 6273 2079 7773 6165 6574 2c72 6120     cosby sweater, a
  406aa8:	696e 206d 6564 6573 7572 746e 6c20 6261     nim deserunt lab
  406ab8:	726f 6d75 6520 2075 6c61 7169 6975 2070     orum eu aliquip 
  406ac8:	7465 6968 6163 206c 7465 6e0a 7565 7274     ethical et.neutr
  406ad8:	2061 4250 2052 6573 766c 6761 2e65 0a0a     a PBR selvage...
  406ae8:	6152 2077 6564 696e 206d 6f70 6b72 6220     Raw denim pork b
  406af8:	6c65 796c 7420 7572 6666 7561 2c74 6920     elly truffaut, i
  406b08:	6f72 796e 7020 616c 6469 7320 7375 6174     rony plaid susta
  406b18:	6e69 6261 656c 7020 7475 6120 6220 7269     inable put a bir
  406b28:	2064 6e6f 6920 0a74 656e 7478 6c20 7665     d on it.next lev
  406b38:	6c65 6a20 6165 206e 6873 726f 7374 6520     el jean shorts e
  406b48:	6578 6372 7469 7461 6f69 2e6e 4820 7361     xercitation. Has
  406b58:	7468 6761 6b20 7965 6174 2072 6877 7461     htag keytar what
  406b68:	7665 7265 202c 696e 6968 0a6c 7561 6874     ever, nihil.auth
  406b78:	6e65 6974 2063 6c61 7169 6975 2070 6964     entic aliquip di
  406b88:	7273 7075 2074 616c 6f62 7572 2e6d 5420     srupt laborum. T
  406b98:	7461 6f74 656f 2064 6573 666c 6569 2073     attooed selfies 
  406ba8:	6564 6573 7572 746e 7420 7572 7473 6620     deserunt trust f
  406bb8:	6e75 0a64 6177 6679 7261 7265 2e73 3320     und.wayfarers. 3
  406bc8:	7720 6c6f 2066 6f6d 6e6f 7320 6e79 6874      wolf moon synth
  406bd8:	6320 7568 6372 2d68 656b 2079 6173 7472      church-key sart
  406be8:	726f 6169 2c6c 6720 7361 7274 706f 6275     orial, gastropub
  406bf8:	6c20 6765 6967 676e 0a73 6174 7474 6f6f      leggings.tattoo
  406c08:	6465 202e 614c 6f62 6572 6820 6769 2068     ed. Labore high 
  406c18:	696c 6566 6320 6d6f 6f6d 6f64 202c 656d     life commodo, me
  406c28:	6767 6e69 7367 7220 7761 6420 6e65 6d69     ggings raw denim
  406c38:	6620 6e69 6567 7372 6174 6863 2065 7570      fingerstache pu
  406c48:	0a67 7274 7375 2074 7566 646e 6c20 6765     g.trust fund leg
  406c58:	6967 676e 2073 6573 7469 6e61 6620 726f     gings seitan for
  406c68:	6761 2e65 4e20 736f 7274 6475 7520 6c6c     age. Nostrud ull
  406c78:	6d61 6f63 6420 6975 2c73 7220 7065 6572     amco duis, repre
  406c88:	6568 646e 7265 7469 690a 636e 6469 6469     henderit.incidid
  406c98:	6e75 2074 6c66 6e61 656e 206c 7573 7473     unt flannel sust
  406ca8:	6961 616e 6c62 2065 6568 766c 7465 6369     ainable helvetic
  406cb8:	2061 6f70 6b72 6220 6c65 796c 7020 6775     a pork belly pug
  406cc8:	6220 6e61 736b 2079 6f79 0a75 7270 626f      banksy you.prob
  406cd8:	6261 796c 6820 7661 6e65 7427 6820 6165     ably haven't hea
  406ce8:	6472 6f20 2066 6874 6d65 6e20 7365 6963     rd of them nesci
  406cf8:	6e75 2074 6166 6d72 742d 2d6f 6174 6c62     unt farm-to-tabl
  406d08:	2e65 4420 7369 7572 7470 6e20 736f 7274     e. Disrupt nostr
  406d18:	6475 6d0a 6c6f 696c 2074 616d 6e67 2c61     ud.mollit magna,
  406d28:	7320 6972 6172 6863 2061 6173 7472 726f      sriracha sartor
  406d38:	6169 206c 6568 766c 7465 6369 2e61 0a0a     ial helvetica...
  406d48:	754e 6c6c 2061 6f6b 6967 7220 7065 6572     Nulla kogi repre
  406d58:	6568 646e 7265 7469 202c 6b73 7461 6265     henderit, skateb
  406d68:	616f 6472 7320 7375 6174 6e69 6261 656c     oard sustainable
  406d78:	6420 6975 2073 6461 7069 7369 6369 6e69      duis adipisicin
  406d88:	2067 6976 6172 0a6c 6461 6620 6e61 796e     g viral.ad fanny
  406d98:	7020 6361 206b 6173 766c 6169 202e 6146      pack salvia. Fa
  406da8:	6e6e 2079 6170 6b63 7420 7572 7473 6620     nny pack trust f
  406db8:	6e75 2064 6f79 2075 7270 626f 6261 796c     und you probably
  406dc8:	6820 7661 6e65 7427 6820 6165 6472 6f0a      haven't heard.o
  406dd8:	2066 6874 6d65 5920 4c4f 204f 6976 6563     f them YOLO vice
  406de8:	6e20 6869 6c69 202e 654b 6666 7969 6865      nihil. Keffiyeh
  406df8:	6320 6172 2079 6f6c 662d 2069 6970 746e      cray lo-fi pint
  406e08:	7265 7365 2074 6163 6472 6769 6e61 6120     erest cardigan a
  406e18:	696c 7571 2c61 720a 7065 6572 6568 646e     liqua,.reprehend
  406e28:	7265 7469 6120 7475 2e65 4320 6c75 6170     erit aute. Culpa
  406e38:	7420 756f 6c73 6465 7720 6c69 696c 6d61      tousled william
  406e48:	6273 7275 2c67 6d20 7261 6166 6c20 6d6f     sburg, marfa lom
  406e58:	206f 6361 7574 6c61 796c 6120 696e 0a6d     o actually anim.
  406e68:	6b73 7461 6265 616f 6472 202e 7049 6f68     skateboard. Ipho
  406e78:	656e 6120 696c 7571 2061 6775 2c68 7320     ne aliqua ugh, s
  406e88:	6d65 6f69 6974 7363 7020 7261 6169 7574     emiotics pariatu
  406e98:	2072 6576 6f72 7220 6165 7964 616d 6564     r vero readymade
  406ea8:	6f0a 6772 6e61 6369 202e 614d 6672 2061     .organic. Marfa 
  406eb8:	7173 6975 2064 756e 6c6c 2c61 6920 206e     squid nulla, in 
  406ec8:	616c 6f62 7572 206d 6964 7273 7075 2074     laborum disrupt 
  406ed8:	616c 6f62 6972 2073 7269 7275 2065 6167     laboris irure ga
  406ee8:	7473 6f72 7570 2e62 560a 6e65 6169 206d     stropub..Veniam 
  406ef8:	7573 746e 6620 6f6f 2064 7274 6375 206b     sunt food truck 
  406f08:	656c 6767 6e69 7367 202c 6973 746e 7620     leggings, sint v
  406f18:	6e69 6c79 6620 7061 0a2e 480a 6c65 616c     inyl fap...Hella
  406f28:	6420 6c6f 726f 2065 6f70 6b72 6220 6c65      dolore pork bel
  406f38:	796c 202c 7274 6675 6166 7475 6320 7261     ly, truffaut car
  406f48:	656c 2073 6f79 2075 7270 626f 6261 796c     les you probably
  406f58:	6820 7661 6e65 7427 6820 6165 6472 6f20      haven't heard o
  406f68:	0a66 6874 6d65 5020 5242 6820 6c65 6576     f.them PBR helve
  406f78:	6974 6163 6920 206e 6173 6970 6e65 6574     tica in sapiente
  406f88:	202e 6146 6873 6f69 206e 7861 2065 6775     . Fashion axe ug
  406f98:	2068 7562 6873 6977 6b63 6120 656d 6972     h bushwick ameri
  406fa8:	6163 0a6e 7061 6170 6572 2e6c 4620 6e69     can.apparel. Fin
  406fb8:	6567 7372 6174 6863 2065 6573 2064 7069     gerstache sed ip
  406fc8:	6f68 656e 202c 656a 6e61 7320 6f68 7472     hone, jean short
  406fd8:	2073 6c62 6575 6220 746f 6c74 2065 696e     s blue bottle ni
  406fe8:	6973 6220 7375 7768 6369 0a6b 6c66 7865     si bushwick.flex
  406ff8:	7469 7261 6169 206e 666f 6966 6963 2061     itarian officia 
  407008:	6576 696e 6d61 7020 616c 6469 6220 7365     veniam plaid bes
  407018:	6f70 656b 6620 7061 5920 4c4f 204f 6f6c     poke fap YOLO lo
  407028:	662d 2e69 4220 6f6c 0a67 656c 7474 7265     -fi. Blog.letter
  407038:	7270 7365 2073 756d 626d 656c 6f63 6572     press mumblecore
  407048:	202c 6f66 646f 7420 7572 6b63 6920 2064     , food truck id 
  407058:	7263 7961 6220 6f72 6b6f 796c 206e 6963     cray brooklyn ci
  407068:	6c6c 6d75 6120 2064 6573 2e64 410a 7373     llum ad sed..Ass
  407078:	6d75 6e65 6164 6320 6168 626d 6172 2079     umenda chambray 
  407088:	6177 6679 7261 7265 2073 6976 796e 206c     wayfarers vinyl 
  407098:	696d 7478 7061 2065 7573 7473 6961 616e     mixtape sustaina
  4070a8:	6c62 2e65 5620 5348 7620 6e69 6c79 640a     ble. VHS vinyl.d
  4070b8:	6c65 6365 7574 2c73 6320 6c75 6170 7720     electus, culpa w
  4070c8:	6c69 696c 6d61 6273 7275 2067 6f70 616c     illiamsburg pola
  4070d8:	6f72 6469 6320 696c 6863 2065 7773 6761     roid cliche swag
  4070e8:	6320 7568 6372 2d68 656b 2079 7973 746e      church-key synt
  4070f8:	2068 6f6b 6967 6d0a 6761 616e 7020 706f     h kogi.magna pop
  407108:	752d 2070 696c 6574 6172 6c6c 2e79 5320     -up literally. S
  407118:	6177 2067 6874 6e75 6564 6372 7461 2073     wag thundercats 
  407128:	6e65 756e 2069 6873 726f 6465 7469 6863     ennui shoreditch
  407138:	7620 6765 6e61 700a 7469 6863 6f66 6b72      vegan.pitchfork
  407148:	6e20 7565 7274 2061 7274 6675 6166 7475      neutra truffaut
  407158:	6520 7374 2c79 7320 6465 7320 6e69 6c67      etsy, sed singl
  407168:	2d65 726f 6769 6e69 6320 666f 6566 2065     e-origin coffee 
  407178:	7263 6661 2074 6562 7265 0a2e 4f0a 6964     craft beer...Odi
  407188:	206f 656c 7474 7265 7270 7365 2073 7262     o letterpress br
  407198:	6f6f 6c6b 6e79 6520 696c 2e74 4e20 6c75     ooklyn elit. Nul
  4071a8:	616c 7320 6e69 6c67 2d65 726f 6769 6e69     la single-origin
  4071b8:	6320 666f 6566 2065 6e69 6f20 6363 6561      coffee in occae
  4071c8:	6163 0a74 656d 6767 6e69 7367 202e 7249     cat.meggings. Ir
  4071d8:	6e6f 2079 656d 6767 6e69 7367 3820 622d     ony meggings 8-b
  4071e8:	7469 202c 6863 6c69 776c 7661 2065 6f6c     it, chillwave lo
  4071f8:	662d 2069 6461 7069 7369 6369 6e69 2067     -fi adipisicing 
  407208:	7263 6465 640a 6572 6d61 6163 6374 6568     cred.dreamcatche
  407218:	2072 6576 696e 6d61 202e 7550 2074 2061     r veniam. Put a 
  407228:	6962 6472 6f20 206e 7469 6920 6f72 796e     bird on it irony
  407238:	7520 616d 696d 202c 7274 7375 2074 7566      umami, trust fu
  407248:	646e 6220 7375 7768 6369 0a6b 6f6c 6163     nd bushwick.loca
  407258:	6f76 6572 6b20 6c61 2065 6863 7069 2e73     vore kale chips.
  407268:	5320 6972 6172 6863 2061 7773 6761 7420      Sriracha swag t
  407278:	7568 646e 7265 6163 7374 202c 6863 6c69     hundercats, chil
  407288:	776c 7661 2065 6964 7273 7075 0a74 6f74     lwave disrupt.to
  407298:	7375 656c 2064 6562 7261 2064 6f6d 6c6c     usled beard moll
  4072a8:	7469 6d20 7375 6174 6863 2065 656c 6767     it mustache legg
  4072b8:	6e69 7367 7020 726f 6c74 6e61 2064 656e     ings portland ne
  4072c8:	7478 6c20 7665 6c65 202e 694e 6968 206c     xt level. Nihil 
  4072d8:	7365 6573 650a 7473 202c 6b73 7461 6265     esse.est, skateb
  4072e8:	616f 6472 6120 7472 7020 7261 7974 6520     oard art party e
  4072f8:	7374 2079 6874 6e75 6564 6372 7461 2073     tsy thundercats 
  407308:	6573 2064 7264 6165 636d 7461 6863 7265     sed dreamcatcher
  407318:	7520 2074 7069 6f68 656e 730a 6177 2067      ut iphone.swag 
  407328:	6f63 736e 6365 6574 7574 2072 7465 202e     consectetur et. 
  407338:	7249 7275 2065 6b73 7461 6265 616f 6472     Irure skateboard
  407348:	6220 6e61 6f6a 202c 756e 6c6c 2061 6564      banjo, nulla de
  407358:	6573 7572 746e 6d20 7365 6573 676e 7265     serunt messenger
  407368:	620a 6761 6420 6c6f 726f 7420 7265 7972     .bag dolor terry
  407378:	7220 6369 6168 6472 6f73 206e 6173 6970      richardson sapi
  407388:	6e65 6574 0a2e 0000                         ente....

Disassembly of section .text.inflate%38:

00407390 <inflate>:
 */

int ZEXPORT inflate(strm, flush)
z_streamp strm;
int flush;
{
  407390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00407394 <.LCFI16>:
  407394:	b08f      	sub	sp, #60	; 0x3c

00407396 <.LCFI17>:
    unsigned char hbuf[4];      /* buffer for gzip header crc calculation */
#endif
    static const unsigned short order[19] = /* permutation of code lengths */
        {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};

    if (strm == Z_NULL || strm->state == Z_NULL || strm->next_out == Z_NULL ||
  407396:	2800      	cmp	r0, #0
  407398:	f001 803a 	beq.w	408410 <.LVL483>
  40739c:	4681      	mov	r9, r0
  40739e:	69c6      	ldr	r6, [r0, #28]
  4073a0:	2e00      	cmp	r6, #0
  4073a2:	f001 803a 	beq.w	40841a <.LVL483+0xa>
  4073a6:	68c2      	ldr	r2, [r0, #12]
  4073a8:	2a00      	cmp	r2, #0
  4073aa:	f001 803b 	beq.w	408424 <.LVL483+0x14>
  4073ae:	6802      	ldr	r2, [r0, #0]
  4073b0:	2a00      	cmp	r2, #0
  4073b2:	d040      	beq.n	407436 <.LVL114>

004073b4 <.LVL104>:
        (strm->next_in == Z_NULL && strm->avail_in != 0))
        return Z_STREAM_ERROR;

    state = (struct inflate_state FAR *)strm->state;
    if (state->mode == TYPE) state->mode = TYPEDO;      /* skip check */
  4073b4:	7832      	ldrb	r2, [r6, #0]
  4073b6:	2a0b      	cmp	r2, #11
  4073b8:	d044      	beq.n	407444 <.LVL115>
  4073ba:	9107      	str	r1, [sp, #28]
    LOAD();
  4073bc:	f8d9 300c 	ldr.w	r3, [r9, #12]
  4073c0:	9306      	str	r3, [sp, #24]

004073c2 <.LVL105>:
  4073c2:	f8d9 3010 	ldr.w	r3, [r9, #16]

004073c6 <.LVL106>:
  4073c6:	9305      	str	r3, [sp, #20]

004073c8 <.LVL107>:
  4073c8:	f8d9 a000 	ldr.w	sl, [r9]

004073cc <.LVL108>:
  4073cc:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4073d0:	9208      	str	r2, [sp, #32]

004073d2 <.LVL109>:
  4073d2:	f8d6 b038 	ldr.w	fp, [r6, #56]	; 0x38

004073d6 <.LVL110>:
  4073d6:	6bf4      	ldr	r4, [r6, #60]	; 0x3c

004073d8 <.LVL111>:
    in = have;
    out = left;
  4073d8:	9304      	str	r3, [sp, #16]
    LOAD();
  4073da:	4615      	mov	r5, r2
    ret = Z_OK;
  4073dc:	2300      	movs	r3, #0

004073de <.LVL112>:
  4073de:	9303      	str	r3, [sp, #12]
            state->mode = LENGTH;
        case LENGTH:
            if (state->wrap && state->flags) {
                NEEDBITS(32);
                if (hold != (state->total & 0xffffffffUL)) {
                    strm->msg = (char *)"incorrect length check";
  4073e0:	4baf      	ldr	r3, [pc, #700]	; (4076a0 <.LVL161+0x6>)
  4073e2:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
  4073e6:	9309      	str	r3, [sp, #36]	; 0x24
  4073e8:	4bae      	ldr	r3, [pc, #696]	; (4076a4 <.LVL161+0xa>)
  4073ea:	3324      	adds	r3, #36	; 0x24
  4073ec:	930a      	str	r3, [sp, #40]	; 0x28

004073ee <.LVL113>:
        switch (state->mode) {
  4073ee:	7833      	ldrb	r3, [r6, #0]
  4073f0:	2b1e      	cmp	r3, #30
  4073f2:	d82d      	bhi.n	407450 <.LVL116+0x6>
  4073f4:	e8df f013 	tbh	[pc, r3, lsl #1]
  4073f8:	00540066 	.word	0x00540066
  4073fc:	015a0120 	.word	0x015a0120
  407400:	018501ca 	.word	0x018501ca
  407404:	022701b0 	.word	0x022701b0
  407408:	00420261 	.word	0x00420261
  40740c:	03320326 	.word	0x03320326
  407410:	038f0337 	.word	0x038f0337
  407414:	03bf03bd 	.word	0x03bf03bd
  407418:	03fa0030 	.word	0x03fa0030
  40741c:	05830468 	.word	0x05830468
  407420:	06480585 	.word	0x06480585
  407424:	06f60672 	.word	0x06f60672
  407428:	0762071b 	.word	0x0762071b
  40742c:	07c90771 	.word	0x07c90771
  407430:	07f00029 	.word	0x07f00029
  407434:	081b      	.short	0x081b

00407436 <.LVL114>:
        (strm->next_in == Z_NULL && strm->avail_in != 0))
  407436:	6842      	ldr	r2, [r0, #4]
  407438:	2a00      	cmp	r2, #0
  40743a:	d0bb      	beq.n	4073b4 <.LVL104>
        return Z_STREAM_ERROR;
  40743c:	f06f 0301 	mvn.w	r3, #1
  407440:	9303      	str	r3, [sp, #12]
  407442:	e2b8      	b.n	4079b6 <.LVL227>

00407444 <.LVL115>:
    if (state->mode == TYPE) state->mode = TYPEDO;      /* skip check */
  407444:	220c      	movs	r2, #12
  407446:	7032      	strb	r2, [r6, #0]
  407448:	e7b7      	b.n	4073ba <.LVL104+0x6>

0040744a <.LVL116>:
                Tracev((stderr, "inflate:   length matches trailer\n"));
            }
#endif
            state->mode = DONE;
        case DONE:
            ret = Z_STREAM_END;
  40744a:	2301      	movs	r3, #1
  40744c:	9303      	str	r3, [sp, #12]
  40744e:	e247      	b.n	4078e0 <.L124>
            goto inf_leave;
        case MEM:
            return Z_MEM_ERROR;
        case SYNC:
        default:
            return Z_STREAM_ERROR;
  407450:	f06f 0301 	mvn.w	r3, #1
  407454:	9303      	str	r3, [sp, #12]
  407456:	e2ae      	b.n	4079b6 <.LVL227>
            NEEDBITS(14);
  407458:	2c0d      	cmp	r4, #13
  40745a:	f200 83ae 	bhi.w	407bba <.LVL276>
  40745e:	2d00      	cmp	r5, #0
  407460:	f000 823e 	beq.w	4078e0 <.L124>
  407464:	3d01      	subs	r5, #1
  407466:	f81a 3b01 	ldrb.w	r3, [sl], #1

0040746a <.LVL118>:
  40746a:	40a3      	lsls	r3, r4
  40746c:	449b      	add	fp, r3
  40746e:	3408      	adds	r4, #8

00407470 <.LVL120>:
  407470:	2c0d      	cmp	r4, #13
  407472:	f200 83a2 	bhi.w	407bba <.LVL276>
  407476:	2d00      	cmp	r5, #0
  407478:	d1f4      	bne.n	407464 <.LVL116+0x1a>
  40747a:	e231      	b.n	4078e0 <.L124>
            NEEDBITS(32);
  40747c:	2c1f      	cmp	r4, #31
  40747e:	f200 82cb 	bhi.w	407a18 <.LVL234+0xc>
  407482:	2d00      	cmp	r5, #0
  407484:	f000 822c 	beq.w	4078e0 <.L124>
  407488:	3d01      	subs	r5, #1
  40748a:	f81a 3b01 	ldrb.w	r3, [sl], #1

0040748e <.LVL122>:
  40748e:	40a3      	lsls	r3, r4
  407490:	449b      	add	fp, r3
  407492:	3408      	adds	r4, #8

00407494 <.LVL124>:
  407494:	2c1f      	cmp	r4, #31
  407496:	f200 82bf 	bhi.w	407a18 <.LVL234+0xc>
  40749a:	2d00      	cmp	r5, #0
  40749c:	d1f4      	bne.n	407488 <.LVL120+0x18>
  40749e:	e21f      	b.n	4078e0 <.L124>
            NEEDBITS(16);
  4074a0:	2c0f      	cmp	r4, #15
  4074a2:	f200 8097 	bhi.w	4075d4 <.LVL147>
  4074a6:	2d00      	cmp	r5, #0
  4074a8:	f000 821a 	beq.w	4078e0 <.L124>
  4074ac:	3d01      	subs	r5, #1
  4074ae:	f81a 3b01 	ldrb.w	r3, [sl], #1

004074b2 <.LVL126>:
  4074b2:	40a3      	lsls	r3, r4
  4074b4:	449b      	add	fp, r3
  4074b6:	3408      	adds	r4, #8

004074b8 <.LVL128>:
  4074b8:	2c0f      	cmp	r4, #15
  4074ba:	f200 808b 	bhi.w	4075d4 <.LVL147>
  4074be:	2d00      	cmp	r5, #0
  4074c0:	d1f4      	bne.n	4074ac <.LVL124+0x18>
  4074c2:	e20d      	b.n	4078e0 <.L124>
            if (state->wrap == 0) {
  4074c4:	68b2      	ldr	r2, [r6, #8]
  4074c6:	b17a      	cbz	r2, 4074e8 <.LVL132+0xa>
            NEEDBITS(16);
  4074c8:	2c0f      	cmp	r4, #15
  4074ca:	d810      	bhi.n	4074ee <.LVL132+0x10>
  4074cc:	2d00      	cmp	r5, #0
  4074ce:	f000 8207 	beq.w	4078e0 <.L124>
  4074d2:	3d01      	subs	r5, #1
  4074d4:	f81a 3b01 	ldrb.w	r3, [sl], #1

004074d8 <.LVL130>:
  4074d8:	40a3      	lsls	r3, r4
  4074da:	449b      	add	fp, r3
  4074dc:	3408      	adds	r4, #8

004074de <.LVL132>:
  4074de:	2c0f      	cmp	r4, #15
  4074e0:	d805      	bhi.n	4074ee <.LVL132+0x10>
  4074e2:	2d00      	cmp	r5, #0
  4074e4:	d1f5      	bne.n	4074d2 <.LVL128+0x1a>
  4074e6:	e1fb      	b.n	4078e0 <.L124>
                state->mode = TYPEDO;
  4074e8:	230c      	movs	r3, #12
  4074ea:	7033      	strb	r3, [r6, #0]
                break;
  4074ec:	e77f      	b.n	4073ee <.LVL113>
            if ((state->wrap & 2) && hold == 0x8b1f) {  /* gzip header */
  4074ee:	f012 0f02 	tst.w	r2, #2
  4074f2:	d003      	beq.n	4074fc <.LVL132+0x1e>
  4074f4:	f648 331f 	movw	r3, #35615	; 0x8b1f
  4074f8:	459b      	cmp	fp, r3
  4074fa:	d020      	beq.n	40753e <.LVL132+0x60>
            state->flags = 0;           /* expect zlib header */
  4074fc:	2300      	movs	r3, #0
  4074fe:	6133      	str	r3, [r6, #16]
            if (state->head != Z_NULL)
  407500:	6a33      	ldr	r3, [r6, #32]
  407502:	b113      	cbz	r3, 40750a <.LVL132+0x2c>
                state->head->done = -1;
  407504:	f04f 32ff 	mov.w	r2, #4294967295
  407508:	631a      	str	r2, [r3, #48]	; 0x30
            if (!(state->wrap & 1) ||   /* check if zlib header allowed */
  40750a:	68b3      	ldr	r3, [r6, #8]
  40750c:	f013 0f01 	tst.w	r3, #1
  407510:	d00f      	beq.n	407532 <.LVL132+0x54>
                ((BITS(8) << 8) + (hold >> 8)) % 31) {
  407512:	ea4f 230b 	mov.w	r3, fp, lsl #8
  407516:	b29b      	uxth	r3, r3
  407518:	eb03 231b 	add.w	r3, r3, fp, lsr #8
  40751c:	4a62      	ldr	r2, [pc, #392]	; (4076a8 <.LVL161+0xe>)
  40751e:	fba2 1203 	umull	r1, r2, r2, r3
  407522:	1a9f      	subs	r7, r3, r2
  407524:	eb02 0257 	add.w	r2, r2, r7, lsr #1
  407528:	0917      	lsrs	r7, r2, #4
  40752a:	ebc7 1747 	rsb	r7, r7, r7, lsl #5
            if (!(state->wrap & 1) ||   /* check if zlib header allowed */
  40752e:	1bdf      	subs	r7, r3, r7
  407530:	d01c      	beq.n	40756c <.LVL137>
                strm->msg = (char *)"incorrect header check";
  407532:	4b5b      	ldr	r3, [pc, #364]	; (4076a0 <.LVL161+0x6>)
  407534:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  407538:	231d      	movs	r3, #29
  40753a:	7033      	strb	r3, [r6, #0]
                break;
  40753c:	e757      	b.n	4073ee <.LVL113>
                state->check = crc32(0L, Z_NULL, 0);
  40753e:	2200      	movs	r2, #0
  407540:	4611      	mov	r1, r2
  407542:	4610      	mov	r0, r2
  407544:	f010 f8d2 	bl	4176ec <.LFE21>

00407548 <.LVL133>:
  407548:	61b0      	str	r0, [r6, #24]
                CRC2(state->check, hold);
  40754a:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
  40754e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8

00407552 <.LVL134>:
  407552:	f88d b035 	strb.w	fp, [sp, #53]	; 0x35
  407556:	2202      	movs	r2, #2
  407558:	a90d      	add	r1, sp, #52	; 0x34
  40755a:	f010 f8c7 	bl	4176ec <.LFE21>

0040755e <.LVL135>:
  40755e:	61b0      	str	r0, [r6, #24]

00407560 <.LVL136>:
                state->mode = FLAGS;
  407560:	2301      	movs	r3, #1
  407562:	7033      	strb	r3, [r6, #0]
                INITBITS();
  407564:	f04f 0b00 	mov.w	fp, #0
  407568:	465c      	mov	r4, fp
                break;
  40756a:	e740      	b.n	4073ee <.LVL113>

0040756c <.LVL137>:
            if (BITS(4) != Z_DEFLATED) {
  40756c:	f00b 030f 	and.w	r3, fp, #15
  407570:	2b08      	cmp	r3, #8
  407572:	d006      	beq.n	407582 <.LVL137+0x16>
                strm->msg = (char *)"unknown compression method";
  407574:	4b4a      	ldr	r3, [pc, #296]	; (4076a0 <.LVL161+0x6>)
  407576:	3318      	adds	r3, #24
  407578:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  40757c:	231d      	movs	r3, #29
  40757e:	7033      	strb	r3, [r6, #0]
                break;
  407580:	e735      	b.n	4073ee <.LVL113>
            DROPBITS(4);
  407582:	ea4f 1b1b 	mov.w	fp, fp, lsr #4

00407586 <.LVL138>:
            len = BITS(4) + 8;
  407586:	f00b 030f 	and.w	r3, fp, #15
  40758a:	3308      	adds	r3, #8

0040758c <.LVL139>:
            if (state->wbits == 0)
  40758c:	6a72      	ldr	r2, [r6, #36]	; 0x24
  40758e:	b9ba      	cbnz	r2, 4075c0 <.LVL144>
                state->wbits = len;
  407590:	6273      	str	r3, [r6, #36]	; 0x24
            state->dmax = 1U << len;
  407592:	2201      	movs	r2, #1
  407594:	fa02 f303 	lsl.w	r3, r2, r3

00407598 <.LVL140>:
  407598:	6173      	str	r3, [r6, #20]
            strm->adler = state->check = adler32(0L, Z_NULL, 0);
  40759a:	2200      	movs	r2, #0
  40759c:	4611      	mov	r1, r2
  40759e:	4610      	mov	r0, r2
  4075a0:	f00f faf6 	bl	416b90 <.LFE16>

004075a4 <.LVL141>:
  4075a4:	61b0      	str	r0, [r6, #24]
  4075a6:	f8c9 0030 	str.w	r0, [r9, #48]	; 0x30
            state->mode = hold & 0x200 ? DICTID : TYPE;
  4075aa:	f40b 7b00 	and.w	fp, fp, #512	; 0x200

004075ae <.LVL142>:
  4075ae:	f1bb 0f00 	cmp.w	fp, #0
  4075b2:	bf14      	ite	ne
  4075b4:	2309      	movne	r3, #9
  4075b6:	230b      	moveq	r3, #11
  4075b8:	7033      	strb	r3, [r6, #0]

004075ba <.LVL143>:
            INITBITS();
  4075ba:	46bb      	mov	fp, r7
  4075bc:	2400      	movs	r4, #0
            break;
  4075be:	e716      	b.n	4073ee <.LVL113>

004075c0 <.LVL144>:
            else if (len > state->wbits) {
  4075c0:	4293      	cmp	r3, r2
  4075c2:	d9e6      	bls.n	407592 <.LVL139+0x6>
            DROPBITS(4);
  4075c4:	3c04      	subs	r4, #4

004075c6 <.LVL145>:
                strm->msg = (char *)"invalid window size";
  4075c6:	4b36      	ldr	r3, [pc, #216]	; (4076a0 <.LVL161+0x6>)

004075c8 <.LVL146>:
  4075c8:	3334      	adds	r3, #52	; 0x34
  4075ca:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  4075ce:	231d      	movs	r3, #29
  4075d0:	7033      	strb	r3, [r6, #0]
                break;
  4075d2:	e70c      	b.n	4073ee <.LVL113>

004075d4 <.LVL147>:
            state->flags = (int)(hold);
  4075d4:	f8c6 b010 	str.w	fp, [r6, #16]
            if ((state->flags & 0xff) != Z_DEFLATED) {
  4075d8:	fa5f f38b 	uxtb.w	r3, fp
  4075dc:	2b08      	cmp	r3, #8
  4075de:	d006      	beq.n	4075ee <.LVL147+0x1a>
                strm->msg = (char *)"unknown compression method";
  4075e0:	4b2f      	ldr	r3, [pc, #188]	; (4076a0 <.LVL161+0x6>)
  4075e2:	3318      	adds	r3, #24
  4075e4:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  4075e8:	231d      	movs	r3, #29
  4075ea:	7033      	strb	r3, [r6, #0]
                break;
  4075ec:	e6ff      	b.n	4073ee <.LVL113>
            if (state->flags & 0xe000) {
  4075ee:	f41b 4f60 	tst.w	fp, #57344	; 0xe000
  4075f2:	d006      	beq.n	407602 <.LVL147+0x2e>
                strm->msg = (char *)"unknown header flags set";
  4075f4:	4b2a      	ldr	r3, [pc, #168]	; (4076a0 <.LVL161+0x6>)
  4075f6:	3348      	adds	r3, #72	; 0x48
  4075f8:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  4075fc:	231d      	movs	r3, #29
  4075fe:	7033      	strb	r3, [r6, #0]
                break;
  407600:	e6f5      	b.n	4073ee <.LVL113>
            if (state->head != Z_NULL)
  407602:	6a33      	ldr	r3, [r6, #32]
  407604:	b113      	cbz	r3, 40760c <.LVL147+0x38>
                state->head->text = (int)((hold >> 8) & 1);
  407606:	f3cb 2200 	ubfx	r2, fp, #8, #1
  40760a:	601a      	str	r2, [r3, #0]
            if (state->flags & 0x0200) CRC2(state->check, hold);
  40760c:	6933      	ldr	r3, [r6, #16]
  40760e:	f413 7f00 	tst.w	r3, #512	; 0x200
  407612:	d104      	bne.n	40761e <.LVL149>

00407614 <.LVL148>:
            state->mode = TIME;
  407614:	2302      	movs	r3, #2
  407616:	7033      	strb	r3, [r6, #0]
            INITBITS();
  407618:	2400      	movs	r4, #0
  40761a:	46a3      	mov	fp, r4
  40761c:	e00e      	b.n	40763c <.LVL152+0x4>

0040761e <.LVL149>:
            if (state->flags & 0x0200) CRC2(state->check, hold);
  40761e:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
  407622:	ea4f 2b1b 	mov.w	fp, fp, lsr #8

00407626 <.LVL150>:
  407626:	f88d b035 	strb.w	fp, [sp, #53]	; 0x35
  40762a:	2202      	movs	r2, #2
  40762c:	a90d      	add	r1, sp, #52	; 0x34
  40762e:	69b0      	ldr	r0, [r6, #24]
  407630:	f010 f85c 	bl	4176ec <.LFE21>

00407634 <.LVL151>:
  407634:	61b0      	str	r0, [r6, #24]
  407636:	e7ed      	b.n	407614 <.LVL148>

00407638 <.LVL152>:
            NEEDBITS(32);
  407638:	2c1f      	cmp	r4, #31
  40763a:	d80d      	bhi.n	407658 <.LVL157+0xa>
  40763c:	2d00      	cmp	r5, #0
  40763e:	f000 814f 	beq.w	4078e0 <.L124>
  407642:	3d01      	subs	r5, #1
  407644:	f81a 3b01 	ldrb.w	r3, [sl], #1

00407648 <.LVL155>:
  407648:	40a3      	lsls	r3, r4
  40764a:	449b      	add	fp, r3
  40764c:	3408      	adds	r4, #8

0040764e <.LVL157>:
  40764e:	2c1f      	cmp	r4, #31
  407650:	d802      	bhi.n	407658 <.LVL157+0xa>
  407652:	2d00      	cmp	r5, #0
  407654:	d1f5      	bne.n	407642 <.LVL152+0xa>
  407656:	e143      	b.n	4078e0 <.L124>
            if (state->head != Z_NULL)
  407658:	6a33      	ldr	r3, [r6, #32]
  40765a:	b10b      	cbz	r3, 407660 <.LVL157+0x12>
                state->head->time = hold;
  40765c:	f8c3 b004 	str.w	fp, [r3, #4]
            if (state->flags & 0x0200) CRC4(state->check, hold);
  407660:	6933      	ldr	r3, [r6, #16]
  407662:	f413 7f00 	tst.w	r3, #512	; 0x200
  407666:	d105      	bne.n	407674 <.LVL159>

00407668 <.LVL158>:
            state->mode = OS;
  407668:	2303      	movs	r3, #3
  40766a:	7033      	strb	r3, [r6, #0]
            INITBITS();
  40766c:	f04f 0b00 	mov.w	fp, #0
  407670:	465c      	mov	r4, fp
  407672:	e01d      	b.n	4076b0 <.LVL162+0x4>

00407674 <.LVL159>:
            if (state->flags & 0x0200) CRC4(state->check, hold);
  407674:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
  407678:	ea4f 231b 	mov.w	r3, fp, lsr #8
  40767c:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
  407680:	ea4f 431b 	mov.w	r3, fp, lsr #16
  407684:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  407688:	ea4f 6b1b 	mov.w	fp, fp, lsr #24

0040768c <.LVL160>:
  40768c:	f88d b037 	strb.w	fp, [sp, #55]	; 0x37
  407690:	2204      	movs	r2, #4
  407692:	a90d      	add	r1, sp, #52	; 0x34
  407694:	69b0      	ldr	r0, [r6, #24]
  407696:	f010 f829 	bl	4176ec <.LFE21>

0040769a <.LVL161>:
  40769a:	61b0      	str	r0, [r6, #24]
  40769c:	e7e4      	b.n	407668 <.LVL158>
  40769e:	bf00      	nop
  4076a0:	00418dd8 	.word	0x00418dd8
  4076a4:	00421a98 	.word	0x00421a98
  4076a8:	08421085 	.word	0x08421085

004076ac <.LVL162>:
            NEEDBITS(16);
  4076ac:	2c0f      	cmp	r4, #15
  4076ae:	d80d      	bhi.n	4076cc <.LVL167+0xa>
  4076b0:	2d00      	cmp	r5, #0
  4076b2:	f000 8115 	beq.w	4078e0 <.L124>
  4076b6:	3d01      	subs	r5, #1
  4076b8:	f81a 3b01 	ldrb.w	r3, [sl], #1

004076bc <.LVL165>:
  4076bc:	40a3      	lsls	r3, r4
  4076be:	449b      	add	fp, r3
  4076c0:	3408      	adds	r4, #8

004076c2 <.LVL167>:
  4076c2:	2c0f      	cmp	r4, #15
  4076c4:	d802      	bhi.n	4076cc <.LVL167+0xa>
  4076c6:	2d00      	cmp	r5, #0
  4076c8:	d1f5      	bne.n	4076b6 <.LVL162+0xa>
  4076ca:	e109      	b.n	4078e0 <.L124>
            if (state->head != Z_NULL) {
  4076cc:	6a33      	ldr	r3, [r6, #32]
  4076ce:	b133      	cbz	r3, 4076de <.LVL167+0x1c>
                state->head->xflags = (int)(hold & 0xff);
  4076d0:	fa5f f28b 	uxtb.w	r2, fp
  4076d4:	609a      	str	r2, [r3, #8]
                state->head->os = (int)(hold >> 8);
  4076d6:	6a33      	ldr	r3, [r6, #32]
  4076d8:	ea4f 221b 	mov.w	r2, fp, lsr #8
  4076dc:	60da      	str	r2, [r3, #12]
            if (state->flags & 0x0200) CRC2(state->check, hold);
  4076de:	6933      	ldr	r3, [r6, #16]
  4076e0:	f413 7f00 	tst.w	r3, #512	; 0x200
  4076e4:	d145      	bne.n	407772 <.LVL177+0x2c>

004076e6 <.LVL168>:
            state->mode = EXLEN;
  4076e6:	2304      	movs	r3, #4
  4076e8:	7033      	strb	r3, [r6, #0]
            if (state->flags & 0x0400) {
  4076ea:	6933      	ldr	r3, [r6, #16]
  4076ec:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4076f0:	d160      	bne.n	4077b4 <.LVL186>
            INITBITS();
  4076f2:	2400      	movs	r4, #0
  4076f4:	46a3      	mov	fp, r4

004076f6 <.LVL169>:
            else if (state->head != Z_NULL)
  4076f6:	6a33      	ldr	r3, [r6, #32]
  4076f8:	b10b      	cbz	r3, 4076fe <.LVL170>
                state->head->extra = Z_NULL;
  4076fa:	2200      	movs	r2, #0
  4076fc:	611a      	str	r2, [r3, #16]

004076fe <.LVL170>:
            state->mode = EXTRA;
  4076fe:	2305      	movs	r3, #5
  407700:	7033      	strb	r3, [r6, #0]
            if (state->flags & 0x0400) {
  407702:	6933      	ldr	r3, [r6, #16]
  407704:	f413 6f80 	tst.w	r3, #1024	; 0x400
  407708:	d022      	beq.n	407750 <.LVL177+0xa>
                copy = state->length;
  40770a:	6c33      	ldr	r3, [r6, #64]	; 0x40

0040770c <.LVL171>:
  40770c:	462f      	mov	r7, r5
  40770e:	429d      	cmp	r5, r3
  407710:	bf28      	it	cs
  407712:	461f      	movcs	r7, r3

00407714 <.LVL172>:
                if (copy) {
  407714:	b1c7      	cbz	r7, 407748 <.LVL177+0x2>
                    if (state->head != Z_NULL &&
  407716:	6a32      	ldr	r2, [r6, #32]
  407718:	b16a      	cbz	r2, 407736 <.LVL174>
                        state->head->extra != Z_NULL) {
  40771a:	6910      	ldr	r0, [r2, #16]
                    if (state->head != Z_NULL &&
  40771c:	b158      	cbz	r0, 407736 <.LVL174>
                        len = state->head->extra_len - state->length;
  40771e:	6951      	ldr	r1, [r2, #20]
  407720:	1acb      	subs	r3, r1, r3

00407722 <.LVL173>:
                        zmemcpy(state->head->extra + len, next,
  407722:	4418      	add	r0, r3
                                len + copy > state->head->extra_max ?
  407724:	6992      	ldr	r2, [r2, #24]
  407726:	18f9      	adds	r1, r7, r3
                        zmemcpy(state->head->extra + len, next,
  407728:	4291      	cmp	r1, r2
  40772a:	bf8c      	ite	hi
  40772c:	1ad2      	subhi	r2, r2, r3
  40772e:	463a      	movls	r2, r7
  407730:	4651      	mov	r1, sl
  407732:	f013 f927 	bl	41a984 <.LFE14>

00407736 <.LVL174>:
                    if (state->flags & 0x0200)
  407736:	6933      	ldr	r3, [r6, #16]
  407738:	f413 7f00 	tst.w	r3, #512	; 0x200
  40773c:	d15a      	bne.n	4077f4 <.LVL194>
                    have -= copy;
  40773e:	1bed      	subs	r5, r5, r7
                    next += copy;
  407740:	44ba      	add	sl, r7
                    state->length -= copy;
  407742:	6c33      	ldr	r3, [r6, #64]	; 0x40
  407744:	1bdf      	subs	r7, r3, r7

00407746 <.LVL177>:
  407746:	6437      	str	r7, [r6, #64]	; 0x40
                if (state->length) goto inf_leave;
  407748:	6c33      	ldr	r3, [r6, #64]	; 0x40
  40774a:	2b00      	cmp	r3, #0
  40774c:	f040 80c8 	bne.w	4078e0 <.L124>
            state->length = 0;
  407750:	2300      	movs	r3, #0
  407752:	6433      	str	r3, [r6, #64]	; 0x40
            state->mode = NAME;
  407754:	2306      	movs	r3, #6
  407756:	7033      	strb	r3, [r6, #0]
            if (state->flags & 0x0800) {
  407758:	6933      	ldr	r3, [r6, #16]
  40775a:	f413 6f00 	tst.w	r3, #2048	; 0x800
  40775e:	f000 8085 	beq.w	40786c <.LVL207>
                if (have == 0) goto inf_leave;
  407762:	2d00      	cmp	r5, #0
  407764:	f000 80bc 	beq.w	4078e0 <.L124>
  407768:	f10a 31ff 	add.w	r1, sl, #4294967295
  40776c:	2700      	movs	r7, #0
  40776e:	468e      	mov	lr, r1
  407770:	e04a      	b.n	407808 <.LVL197>
            if (state->flags & 0x0200) CRC2(state->check, hold);
  407772:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
  407776:	ea4f 2b1b 	mov.w	fp, fp, lsr #8

0040777a <.LVL178>:
  40777a:	f88d b035 	strb.w	fp, [sp, #53]	; 0x35
  40777e:	2202      	movs	r2, #2
  407780:	a90d      	add	r1, sp, #52	; 0x34
  407782:	69b0      	ldr	r0, [r6, #24]
  407784:	f00f ffb2 	bl	4176ec <.LFE21>

00407788 <.LVL179>:
  407788:	61b0      	str	r0, [r6, #24]
  40778a:	e7ac      	b.n	4076e6 <.LVL168>

0040778c <.LVL180>:
            if (state->flags & 0x0400) {
  40778c:	6933      	ldr	r3, [r6, #16]
  40778e:	f413 6f80 	tst.w	r3, #1024	; 0x400
  407792:	d0b0      	beq.n	4076f6 <.LVL169>
                NEEDBITS(16);
  407794:	2c0f      	cmp	r4, #15
  407796:	d810      	bhi.n	4077ba <.LVL187>
  407798:	2d00      	cmp	r5, #0
  40779a:	f000 80a1 	beq.w	4078e0 <.L124>
  40779e:	3d01      	subs	r5, #1
  4077a0:	f81a 3b01 	ldrb.w	r3, [sl], #1

004077a4 <.LVL183>:
  4077a4:	40a3      	lsls	r3, r4
  4077a6:	449b      	add	fp, r3
  4077a8:	3408      	adds	r4, #8

004077aa <.LVL185>:
  4077aa:	2c0f      	cmp	r4, #15
  4077ac:	d805      	bhi.n	4077ba <.LVL187>
  4077ae:	2d00      	cmp	r5, #0
  4077b0:	d1f5      	bne.n	40779e <.LVL180+0x12>
  4077b2:	e095      	b.n	4078e0 <.L124>

004077b4 <.LVL186>:
            INITBITS();
  4077b4:	2400      	movs	r4, #0
  4077b6:	46a3      	mov	fp, r4
  4077b8:	e7ee      	b.n	407798 <.LVL180+0xc>

004077ba <.LVL187>:
                state->length = (unsigned)(hold);
  4077ba:	f8c6 b040 	str.w	fp, [r6, #64]	; 0x40
                if (state->head != Z_NULL)
  4077be:	6a33      	ldr	r3, [r6, #32]
  4077c0:	b10b      	cbz	r3, 4077c6 <.LVL187+0xc>
                    state->head->extra_len = (unsigned)hold;
  4077c2:	f8c3 b014 	str.w	fp, [r3, #20]
                if (state->flags & 0x0200) CRC2(state->check, hold);
  4077c6:	6933      	ldr	r3, [r6, #16]
  4077c8:	f413 7f00 	tst.w	r3, #512	; 0x200
  4077cc:	d102      	bne.n	4077d4 <.LVL190>
                INITBITS();
  4077ce:	2400      	movs	r4, #0

004077d0 <.LVL188>:
  4077d0:	46a3      	mov	fp, r4

004077d2 <.LVL189>:
  4077d2:	e794      	b.n	4076fe <.LVL170>

004077d4 <.LVL190>:
                if (state->flags & 0x0200) CRC2(state->check, hold);
  4077d4:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
  4077d8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8

004077dc <.LVL191>:
  4077dc:	f88d b035 	strb.w	fp, [sp, #53]	; 0x35
  4077e0:	2202      	movs	r2, #2
  4077e2:	a90d      	add	r1, sp, #52	; 0x34
  4077e4:	69b0      	ldr	r0, [r6, #24]
  4077e6:	f00f ff81 	bl	4176ec <.LFE21>

004077ea <.LVL192>:
  4077ea:	61b0      	str	r0, [r6, #24]
                INITBITS();
  4077ec:	f04f 0b00 	mov.w	fp, #0
  4077f0:	465c      	mov	r4, fp

004077f2 <.LVL193>:
  4077f2:	e784      	b.n	4076fe <.LVL170>

004077f4 <.LVL194>:
                        state->check = crc32(state->check, next, copy);
  4077f4:	463a      	mov	r2, r7
  4077f6:	4651      	mov	r1, sl
  4077f8:	69b0      	ldr	r0, [r6, #24]
  4077fa:	f00f ff77 	bl	4176ec <.LFE21>

004077fe <.LVL195>:
  4077fe:	61b0      	str	r0, [r6, #24]
  407800:	e79d      	b.n	40773e <.LVL174+0x8>

00407802 <.LVL196>:
                } while (len && copy < have);
  407802:	b192      	cbz	r2, 40782a <.LVL199+0x1c>
  407804:	42bd      	cmp	r5, r7
  407806:	d910      	bls.n	40782a <.LVL199+0x1c>

00407808 <.LVL197>:
                    len = (unsigned)(next[copy++]);
  407808:	3701      	adds	r7, #1
  40780a:	f81e 2f01 	ldrb.w	r2, [lr, #1]!

0040780e <.LVL199>:
                    if (state->head != Z_NULL &&
  40780e:	6a33      	ldr	r3, [r6, #32]
  407810:	2b00      	cmp	r3, #0
  407812:	d0f6      	beq.n	407802 <.LVL196>
                            state->head->name != Z_NULL &&
  407814:	69d9      	ldr	r1, [r3, #28]
                    if (state->head != Z_NULL &&
  407816:	2900      	cmp	r1, #0
  407818:	d0f3      	beq.n	407802 <.LVL196>
                            state->length < state->head->name_max)
  40781a:	6c30      	ldr	r0, [r6, #64]	; 0x40
                            state->head->name != Z_NULL &&
  40781c:	6a1b      	ldr	r3, [r3, #32]
  40781e:	4298      	cmp	r0, r3
  407820:	d2ef      	bcs.n	407802 <.LVL196>
                        state->head->name[state->length++] = len;
  407822:	1c43      	adds	r3, r0, #1
  407824:	6433      	str	r3, [r6, #64]	; 0x40
  407826:	540a      	strb	r2, [r1, r0]
  407828:	e7eb      	b.n	407802 <.LVL196>
  40782a:	4690      	mov	r8, r2
                if (state->flags & 0x0200)
  40782c:	6933      	ldr	r3, [r6, #16]
  40782e:	f413 7f00 	tst.w	r3, #512	; 0x200
  407832:	d114      	bne.n	40785e <.LVL204>

00407834 <.LVL200>:
                have -= copy;
  407834:	1bed      	subs	r5, r5, r7
                next += copy;
  407836:	44ba      	add	sl, r7
                if (len) goto inf_leave;
  407838:	f1b8 0f00 	cmp.w	r8, #0
  40783c:	d150      	bne.n	4078e0 <.L124>

0040783e <.LVL203>:
            state->length = 0;
  40783e:	2300      	movs	r3, #0
  407840:	6433      	str	r3, [r6, #64]	; 0x40
            state->mode = COMMENT;
  407842:	2307      	movs	r3, #7
  407844:	7033      	strb	r3, [r6, #0]
            if (state->flags & 0x1000) {
  407846:	6933      	ldr	r3, [r6, #16]
  407848:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  40784c:	f000 80be 	beq.w	4079cc <.LVL231>
                if (have == 0) goto inf_leave;
  407850:	2d00      	cmp	r5, #0
  407852:	d045      	beq.n	4078e0 <.L124>
  407854:	f10a 31ff 	add.w	r1, sl, #4294967295
  407858:	2700      	movs	r7, #0
  40785a:	468e      	mov	lr, r1
  40785c:	e00f      	b.n	40787e <.LVL209>

0040785e <.LVL204>:
                    state->check = crc32(state->check, next, copy);
  40785e:	463a      	mov	r2, r7

00407860 <.LVL205>:
  407860:	4651      	mov	r1, sl
  407862:	69b0      	ldr	r0, [r6, #24]
  407864:	f00f ff42 	bl	4176ec <.LFE21>

00407868 <.LVL206>:
  407868:	61b0      	str	r0, [r6, #24]
  40786a:	e7e3      	b.n	407834 <.LVL200>

0040786c <.LVL207>:
            else if (state->head != Z_NULL)
  40786c:	6a33      	ldr	r3, [r6, #32]
  40786e:	2b00      	cmp	r3, #0
  407870:	d0e5      	beq.n	40783e <.LVL203>
                state->head->name = Z_NULL;
  407872:	2200      	movs	r2, #0
  407874:	61da      	str	r2, [r3, #28]
  407876:	e7e2      	b.n	40783e <.LVL203>

00407878 <.LVL208>:
                } while (len && copy < have);
  407878:	b192      	cbz	r2, 4078a0 <.LVL211+0x1c>
  40787a:	42bd      	cmp	r5, r7
  40787c:	d910      	bls.n	4078a0 <.LVL211+0x1c>

0040787e <.LVL209>:
                    len = (unsigned)(next[copy++]);
  40787e:	3701      	adds	r7, #1
  407880:	f81e 2f01 	ldrb.w	r2, [lr, #1]!

00407884 <.LVL211>:
                    if (state->head != Z_NULL &&
  407884:	6a33      	ldr	r3, [r6, #32]
  407886:	2b00      	cmp	r3, #0
  407888:	d0f6      	beq.n	407878 <.LVL208>
                            state->head->comment != Z_NULL &&
  40788a:	6a59      	ldr	r1, [r3, #36]	; 0x24
                    if (state->head != Z_NULL &&
  40788c:	2900      	cmp	r1, #0
  40788e:	d0f3      	beq.n	407878 <.LVL208>
                            state->length < state->head->comm_max)
  407890:	6c30      	ldr	r0, [r6, #64]	; 0x40
                            state->head->comment != Z_NULL &&
  407892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  407894:	4298      	cmp	r0, r3
  407896:	d2ef      	bcs.n	407878 <.LVL208>
                        state->head->comment[state->length++] = len;
  407898:	1c43      	adds	r3, r0, #1
  40789a:	6433      	str	r3, [r6, #64]	; 0x40
  40789c:	540a      	strb	r2, [r1, r0]
  40789e:	e7eb      	b.n	407878 <.LVL208>
  4078a0:	4690      	mov	r8, r2
                if (state->flags & 0x0200)
  4078a2:	6933      	ldr	r3, [r6, #16]
  4078a4:	f413 7f00 	tst.w	r3, #512	; 0x200
  4078a8:	f040 8089 	bne.w	4079be <.LCFI19>

004078ac <.LVL212>:
                have -= copy;
  4078ac:	1bed      	subs	r5, r5, r7
                next += copy;
  4078ae:	44ba      	add	sl, r7
                if (len) goto inf_leave;
  4078b0:	f1b8 0f00 	cmp.w	r8, #0
  4078b4:	d114      	bne.n	4078e0 <.L124>

004078b6 <.LVL215>:
            state->mode = HCRC;
  4078b6:	2308      	movs	r3, #8
  4078b8:	7033      	strb	r3, [r6, #0]
            if (state->flags & 0x0200) {
  4078ba:	6932      	ldr	r2, [r6, #16]
  4078bc:	f412 7f00 	tst.w	r2, #512	; 0x200
  4078c0:	f000 8097 	beq.w	4079f2 <.LVL233>
                NEEDBITS(16);
  4078c4:	2c0f      	cmp	r4, #15
  4078c6:	f200 8088 	bhi.w	4079da <.LVL231+0xe>
  4078ca:	b14d      	cbz	r5, 4078e0 <.L124>
  4078cc:	3d01      	subs	r5, #1
  4078ce:	f81a 3b01 	ldrb.w	r3, [sl], #1

004078d2 <.LVL217>:
  4078d2:	40a3      	lsls	r3, r4
  4078d4:	449b      	add	fp, r3
  4078d6:	3408      	adds	r4, #8

004078d8 <.LVL219>:
  4078d8:	2c0f      	cmp	r4, #15
  4078da:	d87e      	bhi.n	4079da <.LVL231+0xe>
  4078dc:	2d00      	cmp	r5, #0
  4078de:	d1f5      	bne.n	4078cc <.LVL215+0x16>

004078e0 <.L124>:
       If there was no progress during the inflate() call, return a buffer
       error.  Call updatewindow() to create and/or update the window state.
       Note: a memory error from inflate() is non-recoverable.
     */
  inf_leave:
    RESTORE();
  4078e0:	9b06      	ldr	r3, [sp, #24]
  4078e2:	f8c9 300c 	str.w	r3, [r9, #12]
  4078e6:	9b05      	ldr	r3, [sp, #20]
  4078e8:	f8c9 3010 	str.w	r3, [r9, #16]
  4078ec:	f8c9 a000 	str.w	sl, [r9]
  4078f0:	f8c9 5004 	str.w	r5, [r9, #4]
  4078f4:	f8c6 b038 	str.w	fp, [r6, #56]	; 0x38
  4078f8:	63f4      	str	r4, [r6, #60]	; 0x3c
    if (state->wsize || (out != strm->avail_out && state->mode < BAD &&
  4078fa:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  4078fc:	b963      	cbnz	r3, 407918 <.L124+0x38>
  4078fe:	f8d9 3010 	ldr.w	r3, [r9, #16]
  407902:	9a04      	ldr	r2, [sp, #16]
  407904:	429a      	cmp	r2, r3
  407906:	d00e      	beq.n	407926 <.LVL221+0x6>
  407908:	7833      	ldrb	r3, [r6, #0]
  40790a:	2b1c      	cmp	r3, #28
  40790c:	d80b      	bhi.n	407926 <.LVL221+0x6>
            (state->mode < CHECK || flush != Z_FINISH)))
  40790e:	9a07      	ldr	r2, [sp, #28]
  407910:	2a04      	cmp	r2, #4
  407912:	d101      	bne.n	407918 <.L124+0x38>
  407914:	2b19      	cmp	r3, #25
  407916:	d806      	bhi.n	407926 <.LVL221+0x6>
        if (updatewindow(strm, out)) {
  407918:	9904      	ldr	r1, [sp, #16]
  40791a:	4648      	mov	r0, r9
  40791c:	f016 f930 	bl	41db80 <.LFE163>

00407920 <.LVL221>:
  407920:	2800      	cmp	r0, #0
  407922:	f040 8562 	bne.w	4083ea <.LVL479>
            state->mode = MEM;
            return Z_MEM_ERROR;
        }
    in -= strm->avail_in;
  407926:	f8d9 5004 	ldr.w	r5, [r9, #4]

0040792a <.LVL222>:
  40792a:	9b08      	ldr	r3, [sp, #32]
  40792c:	1b5d      	subs	r5, r3, r5

0040792e <.LVL223>:
    out -= strm->avail_out;
  40792e:	f8d9 4010 	ldr.w	r4, [r9, #16]

00407932 <.LVL224>:
  407932:	9b04      	ldr	r3, [sp, #16]
  407934:	1b1c      	subs	r4, r3, r4

00407936 <.LVL225>:
    strm->total_in += in;
  407936:	f8d9 3008 	ldr.w	r3, [r9, #8]
  40793a:	442b      	add	r3, r5
  40793c:	f8c9 3008 	str.w	r3, [r9, #8]
    strm->total_out += out;
  407940:	f8d9 3014 	ldr.w	r3, [r9, #20]
  407944:	4423      	add	r3, r4
  407946:	f8c9 3014 	str.w	r3, [r9, #20]
    state->total += out;
  40794a:	69f3      	ldr	r3, [r6, #28]
  40794c:	4423      	add	r3, r4
  40794e:	61f3      	str	r3, [r6, #28]
    if (state->wrap && out)
  407950:	68b3      	ldr	r3, [r6, #8]
  407952:	b173      	cbz	r3, 407972 <.LVL226+0x6>
  407954:	b16c      	cbz	r4, 407972 <.LVL226+0x6>
        strm->adler = state->check =
            UPDATE(state->check, strm->next_out - out, out);
  407956:	6933      	ldr	r3, [r6, #16]
  407958:	2b00      	cmp	r3, #0
  40795a:	f000 854d 	beq.w	4083f8 <.LVL481>
  40795e:	f8d9 100c 	ldr.w	r1, [r9, #12]
  407962:	4622      	mov	r2, r4
  407964:	1b09      	subs	r1, r1, r4
  407966:	69b0      	ldr	r0, [r6, #24]
  407968:	f00f fec0 	bl	4176ec <.LFE21>

0040796c <.LVL226>:
        strm->adler = state->check =
  40796c:	61b0      	str	r0, [r6, #24]
  40796e:	f8c9 0030 	str.w	r0, [r9, #48]	; 0x30
    strm->data_type = state->bits + (state->last ? 64 : 0) +
  407972:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
  407974:	6873      	ldr	r3, [r6, #4]
  407976:	2b00      	cmp	r3, #0
  407978:	bf14      	ite	ne
  40797a:	2340      	movne	r3, #64	; 0x40
  40797c:	2300      	moveq	r3, #0
  40797e:	4413      	add	r3, r2
                      (state->mode == TYPE ? 128 : 0) +
  407980:	7832      	ldrb	r2, [r6, #0]
  407982:	2a0b      	cmp	r2, #11
  407984:	f000 8558 	beq.w	408438 <.LVL486>
                      (state->mode == LEN_ || state->mode == COPY_ ? 256 : 0);
  407988:	2a13      	cmp	r2, #19
  40798a:	d002      	beq.n	407992 <.LVL226+0x26>
  40798c:	2a0e      	cmp	r2, #14
  40798e:	f040 853c 	bne.w	40840a <.LVL482+0x4>
  407992:	f44f 7280 	mov.w	r2, #256	; 0x100
                      (state->mode == TYPE ? 128 : 0) +
  407996:	4413      	add	r3, r2
    strm->data_type = state->bits + (state->last ? 64 : 0) +
  407998:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
    if (((in == 0 && out == 0) || flush == Z_FINISH) && ret == Z_OK)
  40799c:	2d00      	cmp	r5, #0
  40799e:	bf08      	it	eq
  4079a0:	2c00      	cmpeq	r4, #0
  4079a2:	d002      	beq.n	4079aa <.LVL226+0x3e>
  4079a4:	9b07      	ldr	r3, [sp, #28]
  4079a6:	2b04      	cmp	r3, #4
  4079a8:	d105      	bne.n	4079b6 <.LVL227>
        ret = Z_BUF_ERROR;
  4079aa:	9b03      	ldr	r3, [sp, #12]
  4079ac:	2b00      	cmp	r3, #0
  4079ae:	bf08      	it	eq
  4079b0:	f06f 0304 	mvneq.w	r3, #4
  4079b4:	9303      	str	r3, [sp, #12]

004079b6 <.LVL227>:
    return ret;
}
  4079b6:	9803      	ldr	r0, [sp, #12]
  4079b8:	b00f      	add	sp, #60	; 0x3c

004079ba <.LCFI18>:
  4079ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004079be <.LCFI19>:
                    state->check = crc32(state->check, next, copy);
  4079be:	463a      	mov	r2, r7

004079c0 <.LVL229>:
  4079c0:	4651      	mov	r1, sl
  4079c2:	69b0      	ldr	r0, [r6, #24]
  4079c4:	f00f fe92 	bl	4176ec <.LFE21>

004079c8 <.LVL230>:
  4079c8:	61b0      	str	r0, [r6, #24]
  4079ca:	e76f      	b.n	4078ac <.LVL212>

004079cc <.LVL231>:
            else if (state->head != Z_NULL)
  4079cc:	6a33      	ldr	r3, [r6, #32]
  4079ce:	2b00      	cmp	r3, #0
  4079d0:	f43f af71 	beq.w	4078b6 <.LVL215>
                state->head->comment = Z_NULL;
  4079d4:	2200      	movs	r2, #0
  4079d6:	625a      	str	r2, [r3, #36]	; 0x24
  4079d8:	e76d      	b.n	4078b6 <.LVL215>
                if (hold != (state->check & 0xffff)) {
  4079da:	8b33      	ldrh	r3, [r6, #24]
  4079dc:	455b      	cmp	r3, fp
  4079de:	d006      	beq.n	4079ee <.LVL231+0x22>
                    strm->msg = (char *)"header crc mismatch";
  4079e0:	4bb3      	ldr	r3, [pc, #716]	; (407cb0 <.LVL290+0x14>)
  4079e2:	3364      	adds	r3, #100	; 0x64
  4079e4:	f8c9 3018 	str.w	r3, [r9, #24]
                    state->mode = BAD;
  4079e8:	231d      	movs	r3, #29
  4079ea:	7033      	strb	r3, [r6, #0]
                    break;
  4079ec:	e4ff      	b.n	4073ee <.LVL113>
                INITBITS();
  4079ee:	2400      	movs	r4, #0

004079f0 <.LVL232>:
  4079f0:	46a3      	mov	fp, r4

004079f2 <.LVL233>:
            if (state->head != Z_NULL) {
  4079f2:	6a33      	ldr	r3, [r6, #32]
  4079f4:	b12b      	cbz	r3, 407a02 <.LVL233+0x10>
                state->head->hcrc = (int)((state->flags >> 9) & 1);
  4079f6:	f3c2 2240 	ubfx	r2, r2, #9, #1
  4079fa:	62da      	str	r2, [r3, #44]	; 0x2c
                state->head->done = 1;
  4079fc:	6a33      	ldr	r3, [r6, #32]
  4079fe:	2201      	movs	r2, #1
  407a00:	631a      	str	r2, [r3, #48]	; 0x30
            strm->adler = state->check = crc32(0L, Z_NULL, 0);
  407a02:	2200      	movs	r2, #0
  407a04:	4611      	mov	r1, r2
  407a06:	4610      	mov	r0, r2
  407a08:	f00f fe70 	bl	4176ec <.LFE21>

00407a0c <.LVL234>:
  407a0c:	61b0      	str	r0, [r6, #24]
  407a0e:	f8c9 0030 	str.w	r0, [r9, #48]	; 0x30
            state->mode = TYPE;
  407a12:	230b      	movs	r3, #11
  407a14:	7033      	strb	r3, [r6, #0]
            break;
  407a16:	e4ea      	b.n	4073ee <.LVL113>
            strm->adler = state->check = ZSWAP32(hold);
  407a18:	ea4f 630b 	mov.w	r3, fp, lsl #24
  407a1c:	eb03 631b 	add.w	r3, r3, fp, lsr #24
  407a20:	ea4f 221b 	mov.w	r2, fp, lsr #8
  407a24:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
  407a28:	4413      	add	r3, r2
  407a2a:	ea4f 2b0b 	mov.w	fp, fp, lsl #8

00407a2e <.LVL235>:
  407a2e:	f40b 0b7f 	and.w	fp, fp, #16711680	; 0xff0000
  407a32:	445b      	add	r3, fp
  407a34:	61b3      	str	r3, [r6, #24]
  407a36:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30

00407a3a <.LVL236>:
            state->mode = DICT;
  407a3a:	230a      	movs	r3, #10
  407a3c:	7033      	strb	r3, [r6, #0]
            INITBITS();
  407a3e:	f04f 0b00 	mov.w	fp, #0
  407a42:	465c      	mov	r4, fp

00407a44 <.LVL237>:
            if (state->havedict == 0) {
  407a44:	68f3      	ldr	r3, [r6, #12]
  407a46:	b343      	cbz	r3, 407a9a <.LVL244>
            strm->adler = state->check = adler32(0L, Z_NULL, 0);
  407a48:	2200      	movs	r2, #0
  407a4a:	4611      	mov	r1, r2
  407a4c:	4610      	mov	r0, r2
  407a4e:	f00f f89f 	bl	416b90 <.LFE16>

00407a52 <.LVL238>:
  407a52:	61b0      	str	r0, [r6, #24]
  407a54:	f8c9 0030 	str.w	r0, [r9, #48]	; 0x30
            state->mode = TYPE;
  407a58:	230b      	movs	r3, #11
  407a5a:	7033      	strb	r3, [r6, #0]
            if (flush == Z_BLOCK || flush == Z_TREES) goto inf_leave;
  407a5c:	9b07      	ldr	r3, [sp, #28]
  407a5e:	3b05      	subs	r3, #5
  407a60:	2b01      	cmp	r3, #1
  407a62:	f67f af3d 	bls.w	4078e0 <.L124>
            if (state->last) {
  407a66:	6873      	ldr	r3, [r6, #4]
  407a68:	bb3b      	cbnz	r3, 407aba <.LVL244+0x20>
            NEEDBITS(3);
  407a6a:	2c02      	cmp	r4, #2
  407a6c:	d82e      	bhi.n	407acc <.LVL244+0x32>
  407a6e:	2d00      	cmp	r5, #0
  407a70:	f43f af36 	beq.w	4078e0 <.L124>
  407a74:	3d01      	subs	r5, #1
  407a76:	f10a 0201 	add.w	r2, sl, #1

00407a7a <.LVL240>:
  407a7a:	f89a 3000 	ldrb.w	r3, [sl]
  407a7e:	40a3      	lsls	r3, r4
  407a80:	449b      	add	fp, r3
  407a82:	3408      	adds	r4, #8
            state->last = BITS(1);
  407a84:	f00b 0301 	and.w	r3, fp, #1
  407a88:	6073      	str	r3, [r6, #4]

00407a8a <.LVL243>:
            switch (BITS(2)) {
  407a8a:	f3cb 0341 	ubfx	r3, fp, #1, #2
  407a8e:	2b03      	cmp	r3, #3
  407a90:	d820      	bhi.n	407ad4 <.LVL247+0x4>
  407a92:	e8df f003 	tbb	[pc, r3]
  407a96:	241d      	.short	0x241d
  407a98:	3936      	.short	0x3936

00407a9a <.LVL244>:
                RESTORE();
  407a9a:	9b06      	ldr	r3, [sp, #24]
  407a9c:	f8c9 300c 	str.w	r3, [r9, #12]
  407aa0:	9b05      	ldr	r3, [sp, #20]
  407aa2:	f8c9 3010 	str.w	r3, [r9, #16]
  407aa6:	f8c9 a000 	str.w	sl, [r9]
  407aaa:	f8c9 5004 	str.w	r5, [r9, #4]
  407aae:	f8c6 b038 	str.w	fp, [r6, #56]	; 0x38
  407ab2:	63f4      	str	r4, [r6, #60]	; 0x3c
                return Z_NEED_DICT;
  407ab4:	2302      	movs	r3, #2
  407ab6:	9303      	str	r3, [sp, #12]
  407ab8:	e77d      	b.n	4079b6 <.LVL227>
                BYTEBITS();
  407aba:	f004 0307 	and.w	r3, r4, #7
  407abe:	fa2b fb03 	lsr.w	fp, fp, r3
  407ac2:	f024 0407 	bic.w	r4, r4, #7
                state->mode = CHECK;
  407ac6:	231a      	movs	r3, #26
  407ac8:	7033      	strb	r3, [r6, #0]
                break;
  407aca:	e490      	b.n	4073ee <.LVL113>
            NEEDBITS(3);
  407acc:	4652      	mov	r2, sl
  407ace:	e7d9      	b.n	407a84 <.LVL240+0xa>

00407ad0 <.LVL247>:
                state->mode = STORED;
  407ad0:	230d      	movs	r3, #13
  407ad2:	7033      	strb	r3, [r6, #0]
            DROPBITS(2);
  407ad4:	ea4f 0bdb 	mov.w	fp, fp, lsr #3

00407ad8 <.LVL248>:
  407ad8:	3c03      	subs	r4, #3

00407ada <.LVL249>:
            break;
  407ada:	4692      	mov	sl, r2
  407adc:	e487      	b.n	4073ee <.LVL113>

00407ade <.LBB4>:
    state->lencode = lenfix;
  407ade:	4b75      	ldr	r3, [pc, #468]	; (407cb4 <.LVL290+0x18>)
  407ae0:	64f3      	str	r3, [r6, #76]	; 0x4c
    state->lenbits = 9;
  407ae2:	2309      	movs	r3, #9
  407ae4:	6573      	str	r3, [r6, #84]	; 0x54
    state->distcode = distfix;
  407ae6:	4b74      	ldr	r3, [pc, #464]	; (407cb8 <.LVL290+0x1c>)
  407ae8:	6533      	str	r3, [r6, #80]	; 0x50
    state->distbits = 5;
  407aea:	2305      	movs	r3, #5
  407aec:	65b3      	str	r3, [r6, #88]	; 0x58

00407aee <.LBE4>:
                state->mode = LEN_;             /* decode codes */
  407aee:	2313      	movs	r3, #19
  407af0:	7033      	strb	r3, [r6, #0]
                if (flush == Z_TREES) {
  407af2:	9b07      	ldr	r3, [sp, #28]
  407af4:	2b06      	cmp	r3, #6
  407af6:	d1ed      	bne.n	407ad4 <.LVL247+0x4>
                    DROPBITS(2);
  407af8:	ea4f 0bdb 	mov.w	fp, fp, lsr #3

00407afc <.LVL252>:
  407afc:	3c03      	subs	r4, #3

00407afe <.LVL253>:
                    goto inf_leave;
  407afe:	4692      	mov	sl, r2
  407b00:	e6ee      	b.n	4078e0 <.L124>

00407b02 <.LVL254>:
                state->mode = TABLE;
  407b02:	2310      	movs	r3, #16
  407b04:	7033      	strb	r3, [r6, #0]
                break;
  407b06:	e7e5      	b.n	407ad4 <.LVL247+0x4>
                strm->msg = (char *)"invalid block type";
  407b08:	4b69      	ldr	r3, [pc, #420]	; (407cb0 <.LVL290+0x14>)
  407b0a:	3378      	adds	r3, #120	; 0x78
  407b0c:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  407b10:	231d      	movs	r3, #29
  407b12:	7033      	strb	r3, [r6, #0]
  407b14:	e7de      	b.n	407ad4 <.LVL247+0x4>

00407b16 <.LVL255>:
            BYTEBITS();                         /* go to byte boundary */
  407b16:	f004 0307 	and.w	r3, r4, #7
  407b1a:	fa2b fb03 	lsr.w	fp, fp, r3
  407b1e:	f024 0407 	bic.w	r4, r4, #7
            NEEDBITS(32);
  407b22:	2c1f      	cmp	r4, #31
  407b24:	d80d      	bhi.n	407b42 <.LVL261+0xa>
  407b26:	2d00      	cmp	r5, #0
  407b28:	f43f aeda 	beq.w	4078e0 <.L124>
  407b2c:	3d01      	subs	r5, #1
  407b2e:	f81a 3b01 	ldrb.w	r3, [sl], #1

00407b32 <.LVL259>:
  407b32:	40a3      	lsls	r3, r4
  407b34:	449b      	add	fp, r3
  407b36:	3408      	adds	r4, #8

00407b38 <.LVL261>:
  407b38:	2c1f      	cmp	r4, #31
  407b3a:	d802      	bhi.n	407b42 <.LVL261+0xa>
  407b3c:	2d00      	cmp	r5, #0
  407b3e:	d1f5      	bne.n	407b2c <.LVL255+0x16>
  407b40:	e6ce      	b.n	4078e0 <.L124>
            if ((hold & 0xffff) != ((hold >> 16) ^ 0xffff)) {
  407b42:	fa1f f28b 	uxth.w	r2, fp
  407b46:	f64f 73ff 	movw	r3, #65535	; 0xffff
  407b4a:	ea83 431b 	eor.w	r3, r3, fp, lsr #16
  407b4e:	429a      	cmp	r2, r3
  407b50:	d006      	beq.n	407b60 <.LVL261+0x28>
                strm->msg = (char *)"invalid stored block lengths";
  407b52:	4b57      	ldr	r3, [pc, #348]	; (407cb0 <.LVL290+0x14>)
  407b54:	338c      	adds	r3, #140	; 0x8c
  407b56:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  407b5a:	231d      	movs	r3, #29
  407b5c:	7033      	strb	r3, [r6, #0]
                break;
  407b5e:	e446      	b.n	4073ee <.LVL113>
            state->length = (unsigned)hold & 0xffff;
  407b60:	6432      	str	r2, [r6, #64]	; 0x40

00407b62 <.LVL262>:
            state->mode = COPY_;
  407b62:	230e      	movs	r3, #14
  407b64:	7033      	strb	r3, [r6, #0]
            if (flush == Z_TREES) goto inf_leave;
  407b66:	9b07      	ldr	r3, [sp, #28]
  407b68:	2b06      	cmp	r3, #6
  407b6a:	f000 843a 	beq.w	4083e2 <.LVL478>
            INITBITS();
  407b6e:	2400      	movs	r4, #0
  407b70:	46a3      	mov	fp, r4

00407b72 <.LVL263>:
            state->mode = COPY;
  407b72:	230f      	movs	r3, #15
  407b74:	7033      	strb	r3, [r6, #0]
            copy = state->length;
  407b76:	6c37      	ldr	r7, [r6, #64]	; 0x40

00407b78 <.LVL264>:
            if (copy) {
  407b78:	b1e7      	cbz	r7, 407bb4 <.LVL275>
  407b7a:	9b05      	ldr	r3, [sp, #20]
  407b7c:	429f      	cmp	r7, r3
  407b7e:	bf28      	it	cs
  407b80:	461f      	movcs	r7, r3

00407b82 <.LVL265>:
  407b82:	42af      	cmp	r7, r5
  407b84:	bf28      	it	cs
  407b86:	462f      	movcs	r7, r5

00407b88 <.LVL266>:
                if (copy == 0) goto inf_leave;
  407b88:	2f00      	cmp	r7, #0
  407b8a:	f43f aea9 	beq.w	4078e0 <.L124>
                zmemcpy(put, next, copy);
  407b8e:	463a      	mov	r2, r7
  407b90:	4651      	mov	r1, sl
  407b92:	f8dd 8018 	ldr.w	r8, [sp, #24]
  407b96:	4640      	mov	r0, r8
  407b98:	f012 fef4 	bl	41a984 <.LFE14>

00407b9c <.LVL267>:
                have -= copy;
  407b9c:	1bed      	subs	r5, r5, r7
                next += copy;
  407b9e:	44ba      	add	sl, r7
                left -= copy;
  407ba0:	9b05      	ldr	r3, [sp, #20]
  407ba2:	1bdb      	subs	r3, r3, r7
  407ba4:	9305      	str	r3, [sp, #20]

00407ba6 <.LVL270>:
                put += copy;
  407ba6:	4643      	mov	r3, r8

00407ba8 <.LVL271>:
  407ba8:	443b      	add	r3, r7
  407baa:	9306      	str	r3, [sp, #24]

00407bac <.LVL272>:
                state->length -= copy;
  407bac:	6c33      	ldr	r3, [r6, #64]	; 0x40

00407bae <.LVL273>:
  407bae:	1bdf      	subs	r7, r3, r7

00407bb0 <.LVL274>:
  407bb0:	6437      	str	r7, [r6, #64]	; 0x40
                break;
  407bb2:	e41c      	b.n	4073ee <.LVL113>

00407bb4 <.LVL275>:
            state->mode = TYPE;
  407bb4:	230b      	movs	r3, #11
  407bb6:	7033      	strb	r3, [r6, #0]
            break;
  407bb8:	e419      	b.n	4073ee <.LVL113>

00407bba <.LVL276>:
            state->nlen = BITS(5) + 257;
  407bba:	f00b 021f 	and.w	r2, fp, #31
  407bbe:	f202 1201 	addw	r2, r2, #257	; 0x101
  407bc2:	6632      	str	r2, [r6, #96]	; 0x60

00407bc4 <.LVL277>:
            state->ndist = BITS(5) + 1;
  407bc4:	f3cb 1344 	ubfx	r3, fp, #5, #5
  407bc8:	3301      	adds	r3, #1
  407bca:	6673      	str	r3, [r6, #100]	; 0x64

00407bcc <.LVL278>:
            state->ncode = BITS(4) + 4;
  407bcc:	f3cb 2183 	ubfx	r1, fp, #10, #4
  407bd0:	3104      	adds	r1, #4
  407bd2:	65f1      	str	r1, [r6, #92]	; 0x5c
            DROPBITS(4);
  407bd4:	ea4f 3b9b 	mov.w	fp, fp, lsr #14

00407bd8 <.LVL279>:
  407bd8:	3c0e      	subs	r4, #14

00407bda <.LVL280>:
            if (state->nlen > 286 || state->ndist > 30) {
  407bda:	2b1e      	cmp	r3, #30
  407bdc:	d82d      	bhi.n	407c3a <.LVL287>
  407bde:	f5b2 7f8f 	cmp.w	r2, #286	; 0x11e
  407be2:	d82a      	bhi.n	407c3a <.LVL287>
            state->have = 0;
  407be4:	2300      	movs	r3, #0
  407be6:	66b3      	str	r3, [r6, #104]	; 0x68
            state->mode = LENLENS;
  407be8:	2311      	movs	r3, #17
  407bea:	7033      	strb	r3, [r6, #0]
            while (state->have < state->ncode) {
  407bec:	6eb3      	ldr	r3, [r6, #104]	; 0x68
  407bee:	6df7      	ldr	r7, [r6, #92]	; 0x5c
  407bf0:	42bb      	cmp	r3, r7
  407bf2:	d22d      	bcs.n	407c50 <.LVL289>
  407bf4:	1c58      	adds	r0, r3, #1
  407bf6:	4a31      	ldr	r2, [pc, #196]	; (407cbc <.LVL290+0x20>)
  407bf8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  407bfc:	1e99      	subs	r1, r3, #2
  407bfe:	3701      	adds	r7, #1
                NEEDBITS(3);
  407c00:	2c02      	cmp	r4, #2
  407c02:	d822      	bhi.n	407c4a <.LVL287+0x10>
  407c04:	2d00      	cmp	r5, #0
  407c06:	f43f ae6b 	beq.w	4078e0 <.L124>
  407c0a:	3d01      	subs	r5, #1
  407c0c:	f10a 0201 	add.w	r2, sl, #1

00407c10 <.LVL282>:
  407c10:	f89a 3000 	ldrb.w	r3, [sl]
  407c14:	40a3      	lsls	r3, r4
  407c16:	449b      	add	fp, r3
  407c18:	3408      	adds	r4, #8
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
  407c1a:	66b0      	str	r0, [r6, #104]	; 0x68
  407c1c:	f831 3f02 	ldrh.w	r3, [r1, #2]!
  407c20:	3338      	adds	r3, #56	; 0x38
  407c22:	f00b 0e07 	and.w	lr, fp, #7
  407c26:	f826 e013 	strh.w	lr, [r6, r3, lsl #1]
                DROPBITS(3);
  407c2a:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
  407c2e:	3c03      	subs	r4, #3
  407c30:	3001      	adds	r0, #1
            while (state->have < state->ncode) {
  407c32:	42b8      	cmp	r0, r7
  407c34:	d00b      	beq.n	407c4e <.LVL288>
  407c36:	4692      	mov	sl, r2
  407c38:	e7e2      	b.n	407c00 <.LVL280+0x26>

00407c3a <.LVL287>:
                strm->msg = (char *)"too many length or distance symbols";
  407c3a:	4b1d      	ldr	r3, [pc, #116]	; (407cb0 <.LVL290+0x14>)
  407c3c:	33ac      	adds	r3, #172	; 0xac
  407c3e:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  407c42:	231d      	movs	r3, #29
  407c44:	7033      	strb	r3, [r6, #0]
                break;
  407c46:	f7ff bbd2 	b.w	4073ee <.LVL113>
                NEEDBITS(3);
  407c4a:	4652      	mov	r2, sl
  407c4c:	e7e5      	b.n	407c1a <.LVL282+0xa>

00407c4e <.LVL288>:
  407c4e:	4692      	mov	sl, r2

00407c50 <.LVL289>:
            while (state->have < 19)
  407c50:	6eb3      	ldr	r3, [r6, #104]	; 0x68
  407c52:	2b12      	cmp	r3, #18
  407c54:	d80e      	bhi.n	407c74 <.LVL289+0x24>
  407c56:	4a19      	ldr	r2, [pc, #100]	; (407cbc <.LVL290+0x20>)
  407c58:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  407c5c:	1e9a      	subs	r2, r3, #2
                state->lens[order[state->have++]] = 0;
  407c5e:	2100      	movs	r1, #0
  407c60:	980a      	ldr	r0, [sp, #40]	; 0x28
  407c62:	f832 3f02 	ldrh.w	r3, [r2, #2]!
  407c66:	3338      	adds	r3, #56	; 0x38
  407c68:	f826 1013 	strh.w	r1, [r6, r3, lsl #1]
            while (state->have < 19)
  407c6c:	4290      	cmp	r0, r2
  407c6e:	d1f8      	bne.n	407c62 <.LVL289+0x12>
  407c70:	2313      	movs	r3, #19
  407c72:	66b3      	str	r3, [r6, #104]	; 0x68
            state->next = state->codes;
  407c74:	f506 63a6 	add.w	r3, r6, #1328	; 0x530
  407c78:	66f3      	str	r3, [r6, #108]	; 0x6c
            state->lencode = (code const FAR *)(state->next);
  407c7a:	64f3      	str	r3, [r6, #76]	; 0x4c
            state->lenbits = 7;
  407c7c:	2307      	movs	r3, #7
  407c7e:	6573      	str	r3, [r6, #84]	; 0x54
                                &(state->lenbits), state->work);
  407c80:	f506 733c 	add.w	r3, r6, #752	; 0x2f0
            ret = inflate_table(CODES, state->lens, 19, &(state->next),
  407c84:	9301      	str	r3, [sp, #4]
  407c86:	f106 0354 	add.w	r3, r6, #84	; 0x54
  407c8a:	9300      	str	r3, [sp, #0]
  407c8c:	f106 036c 	add.w	r3, r6, #108	; 0x6c
  407c90:	2213      	movs	r2, #19
  407c92:	f106 0170 	add.w	r1, r6, #112	; 0x70
  407c96:	2000      	movs	r0, #0
  407c98:	f00c fe68 	bl	41496c <inflate_table>

00407c9c <.LVL290>:
            if (ret) {
  407c9c:	9003      	str	r0, [sp, #12]
  407c9e:	b178      	cbz	r0, 407cc0 <.LVL290+0x24>
                strm->msg = (char *)"invalid code lengths set";
  407ca0:	4b03      	ldr	r3, [pc, #12]	; (407cb0 <.LVL290+0x14>)
  407ca2:	33d0      	adds	r3, #208	; 0xd0
  407ca4:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  407ca8:	231d      	movs	r3, #29
  407caa:	7033      	strb	r3, [r6, #0]
                break;
  407cac:	f7ff bb9f 	b.w	4073ee <.LVL113>
  407cb0:	00418dd8 	.word	0x00418dd8
  407cb4:	0040f8ac 	.word	0x0040f8ac
  407cb8:	0041f120 	.word	0x0041f120
  407cbc:	00421a98 	.word	0x00421a98
            state->have = 0;
  407cc0:	2300      	movs	r3, #0
  407cc2:	66b3      	str	r3, [r6, #104]	; 0x68
            state->mode = CODELENS;
  407cc4:	2312      	movs	r3, #18
  407cc6:	7033      	strb	r3, [r6, #0]

00407cc8 <.LVL291>:
            while (state->have < state->nlen + state->ndist) {
  407cc8:	6e32      	ldr	r2, [r6, #96]	; 0x60
  407cca:	6e73      	ldr	r3, [r6, #100]	; 0x64
  407ccc:	eb02 0e03 	add.w	lr, r2, r3
                    here = state->lencode[BITS(state->lenbits)];
  407cd0:	f04f 0c01 	mov.w	ip, #1
            while (state->have < state->nlen + state->ndist) {
  407cd4:	6eb1      	ldr	r1, [r6, #104]	; 0x68
  407cd6:	4571      	cmp	r1, lr
  407cd8:	f080 80bb 	bcs.w	407e52 <.LVL342>
                    here = state->lencode[BITS(state->lenbits)];
  407cdc:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  407cde:	6d73      	ldr	r3, [r6, #84]	; 0x54
  407ce0:	fa0c f303 	lsl.w	r3, ip, r3
  407ce4:	1e58      	subs	r0, r3, #1
  407ce6:	ea0b 0300 	and.w	r3, fp, r0
  407cea:	eb02 0383 	add.w	r3, r2, r3, lsl #2

00407cee <.LVL292>:
  407cee:	785f      	ldrb	r7, [r3, #1]

00407cf0 <.LVL293>:
  407cf0:	885b      	ldrh	r3, [r3, #2]

00407cf2 <.LVL294>:
                    if ((unsigned)(here.bits) <= bits) break;
  407cf2:	46b8      	mov	r8, r7
  407cf4:	42bc      	cmp	r4, r7
  407cf6:	d214      	bcs.n	407d22 <.LVL303>
                    PULLBYTE();
  407cf8:	2d00      	cmp	r5, #0
  407cfa:	f43f adf1 	beq.w	4078e0 <.L124>

00407cfe <.LVL295>:
  407cfe:	3d01      	subs	r5, #1
  407d00:	f81a 3b01 	ldrb.w	r3, [sl], #1

00407d04 <.LVL297>:
  407d04:	40a3      	lsls	r3, r4
  407d06:	449b      	add	fp, r3
  407d08:	3408      	adds	r4, #8

00407d0a <.LVL299>:
                    here = state->lencode[BITS(state->lenbits)];
  407d0a:	ea0b 0300 	and.w	r3, fp, r0
  407d0e:	eb02 0383 	add.w	r3, r2, r3, lsl #2

00407d12 <.LVL300>:
  407d12:	785f      	ldrb	r7, [r3, #1]

00407d14 <.LVL301>:
  407d14:	885b      	ldrh	r3, [r3, #2]

00407d16 <.LVL302>:
                    if ((unsigned)(here.bits) <= bits) break;
  407d16:	46b8      	mov	r8, r7
  407d18:	42a7      	cmp	r7, r4
  407d1a:	d902      	bls.n	407d22 <.LVL303>
                    PULLBYTE();
  407d1c:	2d00      	cmp	r5, #0
  407d1e:	d1ee      	bne.n	407cfe <.LVL295>
  407d20:	e5de      	b.n	4078e0 <.L124>

00407d22 <.LVL303>:
                if (here.val < 16) {
  407d22:	2b0f      	cmp	r3, #15
  407d24:	d809      	bhi.n	407d3a <.LVL303+0x18>
                    DROPBITS(here.bits);
  407d26:	fa2b fb07 	lsr.w	fp, fp, r7
  407d2a:	eba4 0408 	sub.w	r4, r4, r8
                    state->lens[state->have++] = here.val;
  407d2e:	1c4a      	adds	r2, r1, #1
  407d30:	66b2      	str	r2, [r6, #104]	; 0x68
  407d32:	3138      	adds	r1, #56	; 0x38
  407d34:	f826 3011 	strh.w	r3, [r6, r1, lsl #1]
  407d38:	e7cc      	b.n	407cd4 <.LVL291+0xc>
                    if (here.val == 16) {
  407d3a:	2b10      	cmp	r3, #16
  407d3c:	d013      	beq.n	407d66 <.LVL309+0xa>
                    else if (here.val == 17) {
  407d3e:	2b11      	cmp	r3, #17
  407d40:	d03b      	beq.n	407dba <.LVL320+0x10>
                        NEEDBITS(here.bits + 7);
  407d42:	463a      	mov	r2, r7
  407d44:	3707      	adds	r7, #7
  407d46:	42a7      	cmp	r7, r4
  407d48:	d959      	bls.n	407dfe <.LVL331>
  407d4a:	2d00      	cmp	r5, #0
  407d4c:	f43f adc8 	beq.w	4078e0 <.L124>
  407d50:	3d01      	subs	r5, #1
  407d52:	f81a 3b01 	ldrb.w	r3, [sl], #1

00407d56 <.LVL307>:
  407d56:	40a3      	lsls	r3, r4
  407d58:	449b      	add	fp, r3
  407d5a:	3408      	adds	r4, #8

00407d5c <.LVL309>:
  407d5c:	42bc      	cmp	r4, r7
  407d5e:	d24e      	bcs.n	407dfe <.LVL331>
  407d60:	2d00      	cmp	r5, #0
  407d62:	d1f5      	bne.n	407d50 <.LVL303+0x2e>
  407d64:	e5bc      	b.n	4078e0 <.L124>
                        NEEDBITS(here.bits + 2);
  407d66:	463a      	mov	r2, r7
  407d68:	3702      	adds	r7, #2
  407d6a:	42a7      	cmp	r7, r4
  407d6c:	d90d      	bls.n	407d8a <.LVL313+0xa>
  407d6e:	2d00      	cmp	r5, #0
  407d70:	f43f adb6 	beq.w	4078e0 <.L124>
  407d74:	3d01      	subs	r5, #1
  407d76:	f81a 3b01 	ldrb.w	r3, [sl], #1

00407d7a <.LVL311>:
  407d7a:	40a3      	lsls	r3, r4
  407d7c:	449b      	add	fp, r3
  407d7e:	3408      	adds	r4, #8

00407d80 <.LVL313>:
  407d80:	42bc      	cmp	r4, r7
  407d82:	d202      	bcs.n	407d8a <.LVL313+0xa>
  407d84:	2d00      	cmp	r5, #0
  407d86:	d1f5      	bne.n	407d74 <.LVL309+0x18>
  407d88:	e5aa      	b.n	4078e0 <.L124>
                        DROPBITS(here.bits);
  407d8a:	fa2b fb02 	lsr.w	fp, fp, r2
  407d8e:	eba4 0408 	sub.w	r4, r4, r8
                        if (state->have == 0) {
  407d92:	b151      	cbz	r1, 407daa <.LVL320>
                        len = state->lens[state->have - 1];
  407d94:	f101 0337 	add.w	r3, r1, #55	; 0x37
  407d98:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]

00407d9c <.LVL316>:
                        copy = 3 + BITS(2);
  407d9c:	f00b 0203 	and.w	r2, fp, #3
  407da0:	3203      	adds	r2, #3

00407da2 <.LVL317>:
                        DROPBITS(2);
  407da2:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
  407da6:	3c02      	subs	r4, #2
  407da8:	e038      	b.n	407e1c <.LVL338>

00407daa <.LVL320>:
                            strm->msg = (char *)"invalid bit length repeat";
  407daa:	4bc0      	ldr	r3, [pc, #768]	; (4080ac <.LVL395+0xa>)
  407dac:	33ec      	adds	r3, #236	; 0xec
  407dae:	f8c9 3018 	str.w	r3, [r9, #24]
                            state->mode = BAD;
  407db2:	231d      	movs	r3, #29
  407db4:	7033      	strb	r3, [r6, #0]
                            break;
  407db6:	f7ff bb1a 	b.w	4073ee <.LVL113>
                        NEEDBITS(here.bits + 3);
  407dba:	463a      	mov	r2, r7
  407dbc:	3703      	adds	r7, #3
  407dbe:	42a7      	cmp	r7, r4
  407dc0:	d90d      	bls.n	407dde <.LVL324+0xa>
  407dc2:	2d00      	cmp	r5, #0
  407dc4:	f43f ad8c 	beq.w	4078e0 <.L124>
  407dc8:	3d01      	subs	r5, #1
  407dca:	f81a 3b01 	ldrb.w	r3, [sl], #1

00407dce <.LVL322>:
  407dce:	40a3      	lsls	r3, r4
  407dd0:	449b      	add	fp, r3
  407dd2:	3408      	adds	r4, #8

00407dd4 <.LVL324>:
  407dd4:	42bc      	cmp	r4, r7
  407dd6:	d202      	bcs.n	407dde <.LVL324+0xa>
  407dd8:	2d00      	cmp	r5, #0
  407dda:	d1f5      	bne.n	407dc8 <.LVL320+0x1e>
  407ddc:	e580      	b.n	4078e0 <.L124>
                        DROPBITS(here.bits);
  407dde:	fa2b fb02 	lsr.w	fp, fp, r2

00407de2 <.LVL325>:
                        copy = 3 + BITS(3);
  407de2:	f00b 0207 	and.w	r2, fp, #7

00407de6 <.LVL326>:
  407de6:	3203      	adds	r2, #3

00407de8 <.LVL327>:
                        DROPBITS(3);
  407de8:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
  407dec:	f1c8 28ff 	rsb	r8, r8, #4278255360	; 0xff00ff00

00407df0 <.LVL329>:
  407df0:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
  407df4:	f108 08fd 	add.w	r8, r8, #253	; 0xfd
  407df8:	4444      	add	r4, r8

00407dfa <.LVL330>:
                        len = 0;
  407dfa:	2000      	movs	r0, #0
  407dfc:	e00e      	b.n	407e1c <.LVL338>

00407dfe <.LVL331>:
                        DROPBITS(here.bits);
  407dfe:	fa2b fb02 	lsr.w	fp, fp, r2

00407e02 <.LVL332>:
                        copy = 11 + BITS(7);
  407e02:	f00b 027f 	and.w	r2, fp, #127	; 0x7f

00407e06 <.LVL333>:
  407e06:	320b      	adds	r2, #11

00407e08 <.LVL334>:
                        DROPBITS(7);
  407e08:	ea4f 1bdb 	mov.w	fp, fp, lsr #7
  407e0c:	f1c8 28ff 	rsb	r8, r8, #4278255360	; 0xff00ff00

00407e10 <.LVL336>:
  407e10:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
  407e14:	f108 08f9 	add.w	r8, r8, #249	; 0xf9
  407e18:	4444      	add	r4, r8

00407e1a <.LVL337>:
                        len = 0;
  407e1a:	2000      	movs	r0, #0

00407e1c <.LVL338>:
                    if (state->have + copy > state->nlen + state->ndist) {
  407e1c:	1857      	adds	r7, r2, r1
  407e1e:	45be      	cmp	lr, r7
  407e20:	d30f      	bcc.n	407e42 <.LVL341>

00407e22 <.LVL339>:
                    while (copy--)
  407e22:	2a00      	cmp	r2, #0
  407e24:	f43f af56 	beq.w	407cd4 <.LVL291+0xc>
  407e28:	eb06 0341 	add.w	r3, r6, r1, lsl #1
  407e2c:	336e      	adds	r3, #110	; 0x6e
  407e2e:	3137      	adds	r1, #55	; 0x37
  407e30:	440a      	add	r2, r1

00407e32 <.LVL340>:
  407e32:	eb06 0242 	add.w	r2, r6, r2, lsl #1
                        state->lens[state->have++] = (unsigned short)len;
  407e36:	f823 0f02 	strh.w	r0, [r3, #2]!
                    while (copy--)
  407e3a:	4293      	cmp	r3, r2
  407e3c:	d1fb      	bne.n	407e36 <.LVL340+0x4>
  407e3e:	66b7      	str	r7, [r6, #104]	; 0x68
  407e40:	e748      	b.n	407cd4 <.LVL291+0xc>

00407e42 <.LVL341>:
                        strm->msg = (char *)"invalid bit length repeat";
  407e42:	4b9a      	ldr	r3, [pc, #616]	; (4080ac <.LVL395+0xa>)
  407e44:	33ec      	adds	r3, #236	; 0xec
  407e46:	f8c9 3018 	str.w	r3, [r9, #24]
                        state->mode = BAD;
  407e4a:	231d      	movs	r3, #29
  407e4c:	7033      	strb	r3, [r6, #0]
                        break;
  407e4e:	f7ff bace 	b.w	4073ee <.LVL113>

00407e52 <.LVL342>:
            if (state->mode == BAD) break;
  407e52:	7833      	ldrb	r3, [r6, #0]
  407e54:	2b1d      	cmp	r3, #29
  407e56:	f43f aaca 	beq.w	4073ee <.LVL113>
            if (state->lens[256] == 0) {
  407e5a:	f8b6 3270 	ldrh.w	r3, [r6, #624]	; 0x270
  407e5e:	b943      	cbnz	r3, 407e72 <.LVL342+0x20>
                strm->msg = (char *)"invalid code -- missing end-of-block";
  407e60:	4b92      	ldr	r3, [pc, #584]	; (4080ac <.LVL395+0xa>)
  407e62:	f503 7384 	add.w	r3, r3, #264	; 0x108
  407e66:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  407e6a:	231d      	movs	r3, #29
  407e6c:	7033      	strb	r3, [r6, #0]
                break;
  407e6e:	f7ff babe 	b.w	4073ee <.LVL113>
            state->next = state->codes;
  407e72:	f506 63a6 	add.w	r3, r6, #1328	; 0x530
  407e76:	66f3      	str	r3, [r6, #108]	; 0x6c
            state->lencode = (code const FAR *)(state->next);
  407e78:	64f3      	str	r3, [r6, #76]	; 0x4c
            state->lenbits = 9;
  407e7a:	2309      	movs	r3, #9
  407e7c:	6573      	str	r3, [r6, #84]	; 0x54
            ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),
  407e7e:	f106 0770 	add.w	r7, r6, #112	; 0x70
  407e82:	f106 036c 	add.w	r3, r6, #108	; 0x6c
  407e86:	461a      	mov	r2, r3
  407e88:	930b      	str	r3, [sp, #44]	; 0x2c
                                &(state->lenbits), state->work);
  407e8a:	f506 783c 	add.w	r8, r6, #752	; 0x2f0
            ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),
  407e8e:	f8cd 8004 	str.w	r8, [sp, #4]
  407e92:	f106 0354 	add.w	r3, r6, #84	; 0x54
  407e96:	9300      	str	r3, [sp, #0]
  407e98:	4613      	mov	r3, r2
  407e9a:	6e32      	ldr	r2, [r6, #96]	; 0x60
  407e9c:	4639      	mov	r1, r7
  407e9e:	2001      	movs	r0, #1
  407ea0:	f00c fd64 	bl	41496c <inflate_table>

00407ea4 <.LVL343>:
            if (ret) {
  407ea4:	9003      	str	r0, [sp, #12]
  407ea6:	b140      	cbz	r0, 407eba <.LVL343+0x16>
                strm->msg = (char *)"invalid literal/lengths set";
  407ea8:	4b80      	ldr	r3, [pc, #512]	; (4080ac <.LVL395+0xa>)
  407eaa:	f503 7398 	add.w	r3, r3, #304	; 0x130
  407eae:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  407eb2:	231d      	movs	r3, #29
  407eb4:	7033      	strb	r3, [r6, #0]
                break;
  407eb6:	f7ff ba9a 	b.w	4073ee <.LVL113>
            state->distcode = (code const FAR *)(state->next);
  407eba:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
  407ebc:	6533      	str	r3, [r6, #80]	; 0x50
            state->distbits = 6;
  407ebe:	2306      	movs	r3, #6
  407ec0:	65b3      	str	r3, [r6, #88]	; 0x58
            ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,
  407ec2:	6e31      	ldr	r1, [r6, #96]	; 0x60
  407ec4:	f8cd 8004 	str.w	r8, [sp, #4]
  407ec8:	f106 0358 	add.w	r3, r6, #88	; 0x58
  407ecc:	9300      	str	r3, [sp, #0]
  407ece:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407ed0:	6e72      	ldr	r2, [r6, #100]	; 0x64
  407ed2:	eb07 0141 	add.w	r1, r7, r1, lsl #1
  407ed6:	2002      	movs	r0, #2

00407ed8 <.LVL344>:
  407ed8:	f00c fd48 	bl	41496c <inflate_table>

00407edc <.LVL345>:
            if (ret) {
  407edc:	9003      	str	r0, [sp, #12]
  407ede:	b140      	cbz	r0, 407ef2 <.LVL345+0x16>
                strm->msg = (char *)"invalid distances set";
  407ee0:	4b72      	ldr	r3, [pc, #456]	; (4080ac <.LVL395+0xa>)
  407ee2:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
  407ee6:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  407eea:	231d      	movs	r3, #29
  407eec:	7033      	strb	r3, [r6, #0]
                break;
  407eee:	f7ff ba7e 	b.w	4073ee <.LVL113>
            state->mode = LEN_;
  407ef2:	2313      	movs	r3, #19
  407ef4:	7033      	strb	r3, [r6, #0]
            if (flush == Z_TREES) goto inf_leave;
  407ef6:	9b07      	ldr	r3, [sp, #28]
  407ef8:	2b06      	cmp	r3, #6
  407efa:	f43f acf1 	beq.w	4078e0 <.L124>

00407efe <.LVL346>:
            state->mode = LEN;
  407efe:	2314      	movs	r3, #20
  407f00:	7033      	strb	r3, [r6, #0]
            if (have >= 6 && left >= 258) {
  407f02:	2d05      	cmp	r5, #5
  407f04:	d903      	bls.n	407f0e <.LVL346+0x10>
  407f06:	9a05      	ldr	r2, [sp, #20]
  407f08:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
  407f0c:	d22a      	bcs.n	407f64 <.LVL359>
            state->back = 0;
  407f0e:	2200      	movs	r2, #0
  407f10:	f641 33c4 	movw	r3, #7108	; 0x1bc4
  407f14:	50f2      	str	r2, [r6, r3]
                here = state->lencode[BITS(state->lenbits)];
  407f16:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  407f18:	6d73      	ldr	r3, [r6, #84]	; 0x54
  407f1a:	2701      	movs	r7, #1
  407f1c:	409f      	lsls	r7, r3
  407f1e:	3f01      	subs	r7, #1
  407f20:	ea0b 0307 	and.w	r3, fp, r7
  407f24:	eb02 0083 	add.w	r0, r2, r3, lsl #2
  407f28:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]

00407f2c <.LVL347>:
  407f2c:	7843      	ldrb	r3, [r0, #1]

00407f2e <.LVL348>:
  407f2e:	8840      	ldrh	r0, [r0, #2]

00407f30 <.LVL349>:
                if ((unsigned)(here.bits) <= bits) break;
  407f30:	930b      	str	r3, [sp, #44]	; 0x2c
  407f32:	429c      	cmp	r4, r3
  407f34:	d23f      	bcs.n	407fb6 <.LVL370>
                PULLBYTE();
  407f36:	2d00      	cmp	r5, #0
  407f38:	f43f acd2 	beq.w	4078e0 <.L124>

00407f3c <.LVL350>:
  407f3c:	3d01      	subs	r5, #1
  407f3e:	f81a 3b01 	ldrb.w	r3, [sl], #1

00407f42 <.LVL352>:
  407f42:	40a3      	lsls	r3, r4
  407f44:	449b      	add	fp, r3
  407f46:	3408      	adds	r4, #8

00407f48 <.LVL354>:
                here = state->lencode[BITS(state->lenbits)];
  407f48:	ea0b 0307 	and.w	r3, fp, r7
  407f4c:	eb02 0083 	add.w	r0, r2, r3, lsl #2

00407f50 <.LVL355>:
  407f50:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]

00407f54 <.LVL356>:
  407f54:	7843      	ldrb	r3, [r0, #1]

00407f56 <.LVL357>:
  407f56:	8840      	ldrh	r0, [r0, #2]

00407f58 <.LVL358>:
                if ((unsigned)(here.bits) <= bits) break;
  407f58:	469e      	mov	lr, r3
  407f5a:	42a3      	cmp	r3, r4
  407f5c:	d92a      	bls.n	407fb4 <.LVL369>
                PULLBYTE();
  407f5e:	2d00      	cmp	r5, #0
  407f60:	d1ec      	bne.n	407f3c <.LVL350>
  407f62:	e4bd      	b.n	4078e0 <.L124>

00407f64 <.LVL359>:
                RESTORE();
  407f64:	9b06      	ldr	r3, [sp, #24]
  407f66:	f8c9 300c 	str.w	r3, [r9, #12]
  407f6a:	f8c9 2010 	str.w	r2, [r9, #16]
  407f6e:	f8c9 a000 	str.w	sl, [r9]
  407f72:	f8c9 5004 	str.w	r5, [r9, #4]
  407f76:	f8c6 b038 	str.w	fp, [r6, #56]	; 0x38
  407f7a:	63f4      	str	r4, [r6, #60]	; 0x3c
                inflate_fast(strm, out);
  407f7c:	9904      	ldr	r1, [sp, #16]
  407f7e:	4648      	mov	r0, r9
  407f80:	f00a ff08 	bl	412d94 <.LFE31>

00407f84 <.LVL360>:
                LOAD();
  407f84:	f8d9 300c 	ldr.w	r3, [r9, #12]
  407f88:	9306      	str	r3, [sp, #24]

00407f8a <.LVL361>:
  407f8a:	f8d9 3010 	ldr.w	r3, [r9, #16]

00407f8e <.LVL362>:
  407f8e:	9305      	str	r3, [sp, #20]

00407f90 <.LVL363>:
  407f90:	f8d9 a000 	ldr.w	sl, [r9]
  407f94:	f8d9 5004 	ldr.w	r5, [r9, #4]
  407f98:	f8d6 b038 	ldr.w	fp, [r6, #56]	; 0x38
  407f9c:	6bf4      	ldr	r4, [r6, #60]	; 0x3c
                if (state->mode == TYPE)
  407f9e:	7833      	ldrb	r3, [r6, #0]

00407fa0 <.LVL368>:
  407fa0:	2b0b      	cmp	r3, #11
  407fa2:	f47f aa24 	bne.w	4073ee <.LVL113>
                    state->back = -1;
  407fa6:	f04f 32ff 	mov.w	r2, #4294967295
  407faa:	f641 33c4 	movw	r3, #7108	; 0x1bc4
  407fae:	50f2      	str	r2, [r6, r3]
  407fb0:	f7ff ba1d 	b.w	4073ee <.LVL113>

00407fb4 <.LVL369>:
  407fb4:	930b      	str	r3, [sp, #44]	; 0x2c

00407fb6 <.LVL370>:
            if (here.op && (here.op & 0xf0) == 0) {
  407fb6:	2900      	cmp	r1, #0
  407fb8:	d03b      	beq.n	408032 <.LVL386>
  407fba:	f011 0ff0 	tst.w	r1, #240	; 0xf0
  407fbe:	d138      	bne.n	408032 <.LVL386>
                    here = state->lencode[last.val +
  407fc0:	4680      	mov	r8, r0
                            (BITS(last.bits + last.op) >> last.bits)];
  407fc2:	461f      	mov	r7, r3
  407fc4:	4419      	add	r1, r3
  407fc6:	f04f 0c01 	mov.w	ip, #1
  407fca:	fa0c fc01 	lsl.w	ip, ip, r1
  407fce:	f10c 3cff 	add.w	ip, ip, #4294967295
  407fd2:	ea0c 010b 	and.w	r1, ip, fp
  407fd6:	fa21 f303 	lsr.w	r3, r1, r3
                    here = state->lencode[last.val +
  407fda:	4403      	add	r3, r0
  407fdc:	eb02 0083 	add.w	r0, r2, r3, lsl #2
  407fe0:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]

00407fe4 <.LVL371>:
  407fe4:	7843      	ldrb	r3, [r0, #1]

00407fe6 <.LVL372>:
  407fe6:	8840      	ldrh	r0, [r0, #2]

00407fe8 <.LVL373>:
                    if ((unsigned)(last.bits + here.bits) <= bits) break;
  407fe8:	eb03 0e07 	add.w	lr, r3, r7
  407fec:	45a6      	cmp	lr, r4
  407fee:	d919      	bls.n	408024 <.LVL383>
                    PULLBYTE();
  407ff0:	2d00      	cmp	r5, #0
  407ff2:	f43f ac75 	beq.w	4078e0 <.L124>

00407ff6 <.LVL374>:
  407ff6:	3d01      	subs	r5, #1
  407ff8:	f81a 3b01 	ldrb.w	r3, [sl], #1

00407ffc <.LVL376>:
  407ffc:	40a3      	lsls	r3, r4
  407ffe:	449b      	add	fp, r3
  408000:	3408      	adds	r4, #8

00408002 <.LVL378>:
                            (BITS(last.bits + last.op) >> last.bits)];
  408002:	ea0b 030c 	and.w	r3, fp, ip
  408006:	40fb      	lsrs	r3, r7
                    here = state->lencode[last.val +
  408008:	4443      	add	r3, r8
  40800a:	eb02 0083 	add.w	r0, r2, r3, lsl #2

0040800e <.LVL379>:
  40800e:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]

00408012 <.LVL380>:
  408012:	7843      	ldrb	r3, [r0, #1]

00408014 <.LVL381>:
  408014:	8840      	ldrh	r0, [r0, #2]

00408016 <.LVL382>:
                    if ((unsigned)(last.bits + here.bits) <= bits) break;
  408016:	eb03 0e07 	add.w	lr, r3, r7
  40801a:	45a6      	cmp	lr, r4
  40801c:	d902      	bls.n	408024 <.LVL383>
                    PULLBYTE();
  40801e:	2d00      	cmp	r5, #0
  408020:	d1e9      	bne.n	407ff6 <.LVL374>
  408022:	e45d      	b.n	4078e0 <.L124>

00408024 <.LVL383>:
                DROPBITS(last.bits);
  408024:	fa2b fb07 	lsr.w	fp, fp, r7
  408028:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40802a:	1aa4      	subs	r4, r4, r2
                state->back += last.bits;
  40802c:	f641 32c4 	movw	r2, #7108	; 0x1bc4
  408030:	50b7      	str	r7, [r6, r2]

00408032 <.LVL386>:
            DROPBITS(here.bits);
  408032:	fa2b fb03 	lsr.w	fp, fp, r3
  408036:	1ae4      	subs	r4, r4, r3
            state->back += here.bits;
  408038:	f641 37c4 	movw	r7, #7108	; 0x1bc4
  40803c:	59f2      	ldr	r2, [r6, r7]
  40803e:	4413      	add	r3, r2

00408040 <.LVL389>:
  408040:	51f3      	str	r3, [r6, r7]
            state->length = (unsigned)here.val;
  408042:	6430      	str	r0, [r6, #64]	; 0x40
            if ((int)(here.op) == 0) {
  408044:	b919      	cbnz	r1, 40804e <.LVL389+0xe>
                state->mode = LIT;
  408046:	2319      	movs	r3, #25
  408048:	7033      	strb	r3, [r6, #0]
                break;
  40804a:	f7ff b9d0 	b.w	4073ee <.LVL113>
            if (here.op & 32) {
  40804e:	f011 0f20 	tst.w	r1, #32
  408052:	d008      	beq.n	408066 <.LVL389+0x26>
                state->back = -1;
  408054:	f04f 32ff 	mov.w	r2, #4294967295
  408058:	f641 33c4 	movw	r3, #7108	; 0x1bc4
  40805c:	50f2      	str	r2, [r6, r3]
                state->mode = TYPE;
  40805e:	230b      	movs	r3, #11
  408060:	7033      	strb	r3, [r6, #0]
                break;
  408062:	f7ff b9c4 	b.w	4073ee <.LVL113>
            if (here.op & 64) {
  408066:	f011 0f40 	tst.w	r1, #64	; 0x40
  40806a:	d008      	beq.n	40807e <.LVL389+0x3e>
                strm->msg = (char *)"invalid literal/length code";
  40806c:	4b0f      	ldr	r3, [pc, #60]	; (4080ac <.LVL395+0xa>)
  40806e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
  408072:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  408076:	231d      	movs	r3, #29
  408078:	7033      	strb	r3, [r6, #0]
                break;
  40807a:	f7ff b9b8 	b.w	4073ee <.LVL113>
            state->extra = (unsigned)(here.op) & 15;
  40807e:	f001 010f 	and.w	r1, r1, #15

00408082 <.LVL390>:
  408082:	64b1      	str	r1, [r6, #72]	; 0x48
            state->mode = LENEXT;
  408084:	2315      	movs	r3, #21
  408086:	7033      	strb	r3, [r6, #0]

00408088 <.LVL391>:
            if (state->extra) {
  408088:	6cb2      	ldr	r2, [r6, #72]	; 0x48
  40808a:	b30a      	cbz	r2, 4080d0 <.LVL395+0x2e>
                NEEDBITS(state->extra);
  40808c:	4294      	cmp	r4, r2
  40808e:	d20f      	bcs.n	4080b0 <.LVL395+0xe>
  408090:	2d00      	cmp	r5, #0
  408092:	f43f ac25 	beq.w	4078e0 <.L124>
  408096:	3d01      	subs	r5, #1
  408098:	f81a 3b01 	ldrb.w	r3, [sl], #1

0040809c <.LVL393>:
  40809c:	40a3      	lsls	r3, r4
  40809e:	449b      	add	fp, r3
  4080a0:	3408      	adds	r4, #8

004080a2 <.LVL395>:
  4080a2:	42a2      	cmp	r2, r4
  4080a4:	d904      	bls.n	4080b0 <.LVL395+0xe>
  4080a6:	2d00      	cmp	r5, #0
  4080a8:	d1f5      	bne.n	408096 <.LVL391+0xe>
  4080aa:	e419      	b.n	4078e0 <.L124>
  4080ac:	00418dd8 	.word	0x00418dd8
                state->length += BITS(state->extra);
  4080b0:	2301      	movs	r3, #1
  4080b2:	4093      	lsls	r3, r2
  4080b4:	3b01      	subs	r3, #1
  4080b6:	ea03 030b 	and.w	r3, r3, fp
  4080ba:	6c31      	ldr	r1, [r6, #64]	; 0x40
  4080bc:	440b      	add	r3, r1
  4080be:	6433      	str	r3, [r6, #64]	; 0x40
                DROPBITS(state->extra);
  4080c0:	fa2b fb02 	lsr.w	fp, fp, r2
  4080c4:	1aa4      	subs	r4, r4, r2
                state->back += state->extra;
  4080c6:	f641 31c4 	movw	r1, #7108	; 0x1bc4
  4080ca:	5873      	ldr	r3, [r6, r1]
  4080cc:	4413      	add	r3, r2
  4080ce:	5073      	str	r3, [r6, r1]
            state->was = state->length;
  4080d0:	6c32      	ldr	r2, [r6, #64]	; 0x40
  4080d2:	f641 33c8 	movw	r3, #7112	; 0x1bc8
  4080d6:	50f2      	str	r2, [r6, r3]
            state->mode = DIST;
  4080d8:	2316      	movs	r3, #22
  4080da:	7033      	strb	r3, [r6, #0]
                here = state->distcode[BITS(state->distbits)];
  4080dc:	6d32      	ldr	r2, [r6, #80]	; 0x50
  4080de:	6db3      	ldr	r3, [r6, #88]	; 0x58
  4080e0:	2701      	movs	r7, #1
  4080e2:	409f      	lsls	r7, r3
  4080e4:	3f01      	subs	r7, #1
  4080e6:	ea0b 0307 	and.w	r3, fp, r7
  4080ea:	eb02 0083 	add.w	r0, r2, r3, lsl #2
  4080ee:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]

004080f2 <.LVL398>:
  4080f2:	7843      	ldrb	r3, [r0, #1]

004080f4 <.LVL399>:
  4080f4:	8840      	ldrh	r0, [r0, #2]

004080f6 <.LVL400>:
                if ((unsigned)(here.bits) <= bits) break;
  4080f6:	930b      	str	r3, [sp, #44]	; 0x2c
  4080f8:	429c      	cmp	r4, r3
  4080fa:	d218      	bcs.n	40812e <.LVL410>
                PULLBYTE();
  4080fc:	2d00      	cmp	r5, #0
  4080fe:	f43f abef 	beq.w	4078e0 <.L124>

00408102 <.LVL401>:
  408102:	3d01      	subs	r5, #1
  408104:	f81a 3b01 	ldrb.w	r3, [sl], #1

00408108 <.LVL403>:
  408108:	40a3      	lsls	r3, r4
  40810a:	449b      	add	fp, r3
  40810c:	3408      	adds	r4, #8

0040810e <.LVL405>:
                here = state->distcode[BITS(state->distbits)];
  40810e:	ea0b 0307 	and.w	r3, fp, r7
  408112:	eb02 0083 	add.w	r0, r2, r3, lsl #2

00408116 <.LVL406>:
  408116:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]

0040811a <.LVL407>:
  40811a:	7843      	ldrb	r3, [r0, #1]

0040811c <.LVL408>:
  40811c:	8840      	ldrh	r0, [r0, #2]

0040811e <.LVL409>:
                if ((unsigned)(here.bits) <= bits) break;
  40811e:	469e      	mov	lr, r3
  408120:	42a3      	cmp	r3, r4
  408122:	d903      	bls.n	40812c <.LVL409+0xe>
                PULLBYTE();
  408124:	2d00      	cmp	r5, #0
  408126:	d1ec      	bne.n	408102 <.LVL401>
  408128:	f7ff bbda 	b.w	4078e0 <.L124>
  40812c:	930b      	str	r3, [sp, #44]	; 0x2c

0040812e <.LVL410>:
            if ((here.op & 0xf0) == 0) {
  40812e:	f011 0ff0 	tst.w	r1, #240	; 0xf0
  408132:	d13d      	bne.n	4081b0 <.LVL426>
                    here = state->distcode[last.val +
  408134:	4680      	mov	r8, r0
                            (BITS(last.bits + last.op) >> last.bits)];
  408136:	461f      	mov	r7, r3
  408138:	4419      	add	r1, r3
  40813a:	f04f 0c01 	mov.w	ip, #1
  40813e:	fa0c fc01 	lsl.w	ip, ip, r1
  408142:	f10c 3cff 	add.w	ip, ip, #4294967295
  408146:	ea0c 010b 	and.w	r1, ip, fp
  40814a:	fa21 f303 	lsr.w	r3, r1, r3
                    here = state->distcode[last.val +
  40814e:	4403      	add	r3, r0
  408150:	eb02 0083 	add.w	r0, r2, r3, lsl #2
  408154:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]

00408158 <.LVL411>:
  408158:	7843      	ldrb	r3, [r0, #1]

0040815a <.LVL412>:
  40815a:	8840      	ldrh	r0, [r0, #2]

0040815c <.LVL413>:
                    if ((unsigned)(last.bits + here.bits) <= bits) break;
  40815c:	eb03 0e07 	add.w	lr, r3, r7
  408160:	45a6      	cmp	lr, r4
  408162:	d91a      	bls.n	40819a <.LVL423>
                    PULLBYTE();
  408164:	2d00      	cmp	r5, #0
  408166:	f43f abbb 	beq.w	4078e0 <.L124>

0040816a <.LVL414>:
  40816a:	3d01      	subs	r5, #1
  40816c:	f81a 3b01 	ldrb.w	r3, [sl], #1

00408170 <.LVL416>:
  408170:	40a3      	lsls	r3, r4
  408172:	449b      	add	fp, r3
  408174:	3408      	adds	r4, #8

00408176 <.LVL418>:
                            (BITS(last.bits + last.op) >> last.bits)];
  408176:	ea0b 030c 	and.w	r3, fp, ip
  40817a:	40fb      	lsrs	r3, r7
                    here = state->distcode[last.val +
  40817c:	4443      	add	r3, r8
  40817e:	eb02 0083 	add.w	r0, r2, r3, lsl #2

00408182 <.LVL419>:
  408182:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]

00408186 <.LVL420>:
  408186:	7843      	ldrb	r3, [r0, #1]

00408188 <.LVL421>:
  408188:	8840      	ldrh	r0, [r0, #2]

0040818a <.LVL422>:
                    if ((unsigned)(last.bits + here.bits) <= bits) break;
  40818a:	eb03 0e07 	add.w	lr, r3, r7
  40818e:	45a6      	cmp	lr, r4
  408190:	d903      	bls.n	40819a <.LVL423>
                    PULLBYTE();
  408192:	2d00      	cmp	r5, #0
  408194:	d1e9      	bne.n	40816a <.LVL414>
  408196:	f7ff bba3 	b.w	4078e0 <.L124>

0040819a <.LVL423>:
                DROPBITS(last.bits);
  40819a:	fa2b fb07 	lsr.w	fp, fp, r7
  40819e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4081a0:	1aa4      	subs	r4, r4, r2
                state->back += last.bits;
  4081a2:	f641 3ec4 	movw	lr, #7108	; 0x1bc4
  4081a6:	f856 200e 	ldr.w	r2, [r6, lr]
  4081aa:	443a      	add	r2, r7
  4081ac:	f846 200e 	str.w	r2, [r6, lr]

004081b0 <.LVL426>:
            DROPBITS(here.bits);
  4081b0:	fa2b fb03 	lsr.w	fp, fp, r3
  4081b4:	1ae4      	subs	r4, r4, r3
            state->back += here.bits;
  4081b6:	f641 37c4 	movw	r7, #7108	; 0x1bc4
  4081ba:	59f2      	ldr	r2, [r6, r7]
  4081bc:	4413      	add	r3, r2

004081be <.LVL429>:
  4081be:	51f3      	str	r3, [r6, r7]
            if (here.op & 64) {
  4081c0:	f011 0f40 	tst.w	r1, #64	; 0x40
  4081c4:	d008      	beq.n	4081d8 <.LVL429+0x1a>
                strm->msg = (char *)"invalid distance code";
  4081c6:	4b9e      	ldr	r3, [pc, #632]	; (408440 <.LVL486+0x8>)
  4081c8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
  4081cc:	f8c9 3018 	str.w	r3, [r9, #24]
                state->mode = BAD;
  4081d0:	231d      	movs	r3, #29
  4081d2:	7033      	strb	r3, [r6, #0]
                break;
  4081d4:	f7ff b90b 	b.w	4073ee <.LVL113>
            state->offset = (unsigned)here.val;
  4081d8:	6470      	str	r0, [r6, #68]	; 0x44
            state->extra = (unsigned)(here.op) & 15;
  4081da:	f001 010f 	and.w	r1, r1, #15

004081de <.LVL430>:
  4081de:	64b1      	str	r1, [r6, #72]	; 0x48
            state->mode = DISTEXT;
  4081e0:	2317      	movs	r3, #23
  4081e2:	7033      	strb	r3, [r6, #0]

004081e4 <.LVL431>:
            if (state->extra) {
  4081e4:	6cb2      	ldr	r2, [r6, #72]	; 0x48
  4081e6:	b302      	cbz	r2, 40822a <.LVL435+0x2c>
                NEEDBITS(state->extra);
  4081e8:	4294      	cmp	r4, r2
  4081ea:	d20e      	bcs.n	40820a <.LVL435+0xc>
  4081ec:	2d00      	cmp	r5, #0
  4081ee:	f43f ab77 	beq.w	4078e0 <.L124>
  4081f2:	3d01      	subs	r5, #1
  4081f4:	f81a 3b01 	ldrb.w	r3, [sl], #1

004081f8 <.LVL433>:
  4081f8:	40a3      	lsls	r3, r4
  4081fa:	449b      	add	fp, r3
  4081fc:	3408      	adds	r4, #8

004081fe <.LVL435>:
  4081fe:	42a2      	cmp	r2, r4
  408200:	d903      	bls.n	40820a <.LVL435+0xc>
  408202:	2d00      	cmp	r5, #0
  408204:	d1f5      	bne.n	4081f2 <.LVL431+0xe>
  408206:	f7ff bb6b 	b.w	4078e0 <.L124>
                state->offset += BITS(state->extra);
  40820a:	2301      	movs	r3, #1
  40820c:	4093      	lsls	r3, r2
  40820e:	3b01      	subs	r3, #1
  408210:	ea03 030b 	and.w	r3, r3, fp
  408214:	6c71      	ldr	r1, [r6, #68]	; 0x44
  408216:	440b      	add	r3, r1
  408218:	6473      	str	r3, [r6, #68]	; 0x44
                DROPBITS(state->extra);
  40821a:	fa2b fb02 	lsr.w	fp, fp, r2
  40821e:	1aa4      	subs	r4, r4, r2
                state->back += state->extra;
  408220:	f641 31c4 	movw	r1, #7108	; 0x1bc4
  408224:	5873      	ldr	r3, [r6, r1]
  408226:	4413      	add	r3, r2
  408228:	5073      	str	r3, [r6, r1]
            state->mode = MATCH;
  40822a:	2318      	movs	r3, #24
  40822c:	7033      	strb	r3, [r6, #0]
            if (left == 0) goto inf_leave;
  40822e:	9b05      	ldr	r3, [sp, #20]
  408230:	2b00      	cmp	r3, #0
  408232:	f43f ab55 	beq.w	4078e0 <.L124>
            copy = out - left;
  408236:	9a04      	ldr	r2, [sp, #16]
  408238:	1ad0      	subs	r0, r2, r3

0040823a <.LVL438>:
            if (state->offset > copy) {         /* copy from window */
  40823a:	6c73      	ldr	r3, [r6, #68]	; 0x44
  40823c:	4298      	cmp	r0, r3
  40823e:	d21d      	bcs.n	40827c <.LVL443>
                copy = state->offset - copy;
  408240:	1a18      	subs	r0, r3, r0
                if (copy > state->whave) {
  408242:	6af3      	ldr	r3, [r6, #44]	; 0x2c
  408244:	4298      	cmp	r0, r3
  408246:	d90c      	bls.n	408262 <.LVL438+0x28>
                    if (state->sane) {
  408248:	f506 53de 	add.w	r3, r6, #7104	; 0x1bc0
  40824c:	681b      	ldr	r3, [r3, #0]
  40824e:	b143      	cbz	r3, 408262 <.LVL438+0x28>
                        strm->msg = (char *)"invalid distance too far back";
  408250:	4b7b      	ldr	r3, [pc, #492]	; (408440 <.LVL486+0x8>)
  408252:	f503 73cc 	add.w	r3, r3, #408	; 0x198
  408256:	f8c9 3018 	str.w	r3, [r9, #24]
                        state->mode = BAD;
  40825a:	231d      	movs	r3, #29
  40825c:	7033      	strb	r3, [r6, #0]
                        break;
  40825e:	f7ff b8c6 	b.w	4073ee <.LVL113>
                if (copy > state->wnext) {
  408262:	6b33      	ldr	r3, [r6, #48]	; 0x30
  408264:	4298      	cmp	r0, r3
                    copy -= state->wnext;
  408266:	bf84      	itt	hi
  408268:	1ac0      	subhi	r0, r0, r3
                    from = state->window + (state->wsize - copy);
  40826a:	6ab3      	ldrhi	r3, [r6, #40]	; 0x28
                    from = state->window + (state->wnext - copy);
  40826c:	1a1b      	subs	r3, r3, r0
  40826e:	6b72      	ldr	r2, [r6, #52]	; 0x34
  408270:	4413      	add	r3, r2

00408272 <.LVL441>:
  408272:	6c32      	ldr	r2, [r6, #64]	; 0x40
  408274:	4290      	cmp	r0, r2
  408276:	bf28      	it	cs
  408278:	4610      	movcs	r0, r2

0040827a <.LVL442>:
  40827a:	e002      	b.n	408282 <.LVL444+0x2>

0040827c <.LVL443>:
                from = put - state->offset;
  40827c:	9a06      	ldr	r2, [sp, #24]
  40827e:	1ad3      	subs	r3, r2, r3

00408280 <.LVL444>:
                copy = state->length;
  408280:	6c30      	ldr	r0, [r6, #64]	; 0x40
  408282:	9905      	ldr	r1, [sp, #20]
  408284:	4288      	cmp	r0, r1
  408286:	bf28      	it	cs
  408288:	4608      	movcs	r0, r1
            left -= copy;
  40828a:	1a0a      	subs	r2, r1, r0
  40828c:	9205      	str	r2, [sp, #20]

0040828e <.LVL447>:
            state->length -= copy;
  40828e:	6c32      	ldr	r2, [r6, #64]	; 0x40

00408290 <.LVL448>:
  408290:	1a12      	subs	r2, r2, r0
  408292:	6432      	str	r2, [r6, #64]	; 0x40
  408294:	9a06      	ldr	r2, [sp, #24]
  408296:	3a01      	subs	r2, #1
  408298:	181f      	adds	r7, r3, r0

0040829a <.LVL449>:
                *put++ = *from++;
  40829a:	f813 1b01 	ldrb.w	r1, [r3], #1

0040829e <.LVL450>:
  40829e:	f802 1f01 	strb.w	r1, [r2, #1]!
            } while (--copy);
  4082a2:	42bb      	cmp	r3, r7
  4082a4:	d1f9      	bne.n	40829a <.LVL449>
  4082a6:	9b06      	ldr	r3, [sp, #24]

004082a8 <.LVL451>:
  4082a8:	4403      	add	r3, r0
  4082aa:	9306      	str	r3, [sp, #24]
            if (state->length == 0) state->mode = LEN;
  4082ac:	6c33      	ldr	r3, [r6, #64]	; 0x40
  4082ae:	2b00      	cmp	r3, #0
  4082b0:	f47f a89d 	bne.w	4073ee <.LVL113>
  4082b4:	2314      	movs	r3, #20
  4082b6:	7033      	strb	r3, [r6, #0]
  4082b8:	f7ff b899 	b.w	4073ee <.LVL113>

004082bc <.LVL452>:
            if (left == 0) goto inf_leave;
  4082bc:	9a05      	ldr	r2, [sp, #20]
  4082be:	2a00      	cmp	r2, #0
  4082c0:	f43f ab0e 	beq.w	4078e0 <.L124>

004082c4 <.LVL453>:
            *put++ = (unsigned char)(state->length);
  4082c4:	6c33      	ldr	r3, [r6, #64]	; 0x40
  4082c6:	9806      	ldr	r0, [sp, #24]
  4082c8:	7003      	strb	r3, [r0, #0]
            left--;
  4082ca:	1e53      	subs	r3, r2, #1
  4082cc:	9305      	str	r3, [sp, #20]

004082ce <.LVL454>:
            state->mode = LEN;
  4082ce:	2314      	movs	r3, #20

004082d0 <.LVL455>:
  4082d0:	7033      	strb	r3, [r6, #0]
            *put++ = (unsigned char)(state->length);
  4082d2:	1c43      	adds	r3, r0, #1

004082d4 <.LVL456>:
  4082d4:	9306      	str	r3, [sp, #24]
            break;
  4082d6:	f7ff b88a 	b.w	4073ee <.LVL113>

004082da <.LVL457>:
            if (state->wrap) {
  4082da:	68b3      	ldr	r3, [r6, #8]
  4082dc:	2b00      	cmp	r3, #0
  4082de:	d052      	beq.n	408386 <.LVL471>
                NEEDBITS(32);
  4082e0:	2c1f      	cmp	r4, #31
  4082e2:	d80e      	bhi.n	408302 <.LVL461+0xc>
  4082e4:	2d00      	cmp	r5, #0
  4082e6:	f43f aafb 	beq.w	4078e0 <.L124>
  4082ea:	3d01      	subs	r5, #1
  4082ec:	f81a 3b01 	ldrb.w	r3, [sl], #1

004082f0 <.LVL459>:
  4082f0:	40a3      	lsls	r3, r4
  4082f2:	449b      	add	fp, r3
  4082f4:	3408      	adds	r4, #8

004082f6 <.LVL461>:
  4082f6:	2c1f      	cmp	r4, #31
  4082f8:	d803      	bhi.n	408302 <.LVL461+0xc>
  4082fa:	2d00      	cmp	r5, #0
  4082fc:	d1f5      	bne.n	4082ea <.LVL457+0x10>
  4082fe:	f7ff baef 	b.w	4078e0 <.L124>
                out -= left;
  408302:	9b04      	ldr	r3, [sp, #16]
  408304:	9a05      	ldr	r2, [sp, #20]
  408306:	1a99      	subs	r1, r3, r2

00408308 <.LVL462>:
                strm->total_out += out;
  408308:	f8d9 3014 	ldr.w	r3, [r9, #20]
  40830c:	440b      	add	r3, r1
  40830e:	f8c9 3014 	str.w	r3, [r9, #20]
                state->total += out;
  408312:	69f3      	ldr	r3, [r6, #28]
  408314:	440b      	add	r3, r1
  408316:	61f3      	str	r3, [r6, #28]
                if (out)
  408318:	b151      	cbz	r1, 408330 <.LVL465>
                        UPDATE(state->check, put - out, out);
  40831a:	6933      	ldr	r3, [r6, #16]
  40831c:	b333      	cbz	r3, 40836c <.LVL466>
  40831e:	460a      	mov	r2, r1
  408320:	9b06      	ldr	r3, [sp, #24]
  408322:	1a59      	subs	r1, r3, r1

00408324 <.LVL463>:
  408324:	69b0      	ldr	r0, [r6, #24]
  408326:	f00f f9e1 	bl	4176ec <.LFE21>

0040832a <.LVL464>:
                    strm->adler = state->check =
  40832a:	61b0      	str	r0, [r6, #24]
  40832c:	f8c9 0030 	str.w	r0, [r9, #48]	; 0x30

00408330 <.LVL465>:
                     state->flags ? hold :
  408330:	6933      	ldr	r3, [r6, #16]
  408332:	bb13      	cbnz	r3, 40837a <.LVL469>
                     ZSWAP32(hold)) != state->check) {
  408334:	ea4f 630b 	mov.w	r3, fp, lsl #24
                     state->flags ? hold :
  408338:	eb03 631b 	add.w	r3, r3, fp, lsr #24
                     ZSWAP32(hold)) != state->check) {
  40833c:	ea4f 221b 	mov.w	r2, fp, lsr #8
  408340:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
                     state->flags ? hold :
  408344:	4413      	add	r3, r2
                     ZSWAP32(hold)) != state->check) {
  408346:	ea4f 220b 	mov.w	r2, fp, lsl #8
  40834a:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
                     state->flags ? hold :
  40834e:	4413      	add	r3, r2
                if ((
  408350:	69b2      	ldr	r2, [r6, #24]
  408352:	4293      	cmp	r3, r2
  408354:	d013      	beq.n	40837e <.LVL469+0x4>
                    strm->msg = (char *)"incorrect data check";
  408356:	4b3a      	ldr	r3, [pc, #232]	; (408440 <.LVL486+0x8>)
  408358:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
  40835c:	f8c9 3018 	str.w	r3, [r9, #24]
                    state->mode = BAD;
  408360:	231d      	movs	r3, #29
  408362:	7033      	strb	r3, [r6, #0]
                    break;
  408364:	9b05      	ldr	r3, [sp, #20]
  408366:	9304      	str	r3, [sp, #16]
  408368:	f7ff b841 	b.w	4073ee <.LVL113>

0040836c <.LVL466>:
                        UPDATE(state->check, put - out, out);
  40836c:	460a      	mov	r2, r1
  40836e:	9b06      	ldr	r3, [sp, #24]
  408370:	1a59      	subs	r1, r3, r1

00408372 <.LVL467>:
  408372:	69b0      	ldr	r0, [r6, #24]
  408374:	f00e fc0c 	bl	416b90 <.LFE16>

00408378 <.LVL468>:
  408378:	e7d7      	b.n	40832a <.LVL464>

0040837a <.LVL469>:
  40837a:	465b      	mov	r3, fp
  40837c:	e7e8      	b.n	408350 <.LVL465+0x20>
  40837e:	9b05      	ldr	r3, [sp, #20]
  408380:	9304      	str	r3, [sp, #16]
                INITBITS();
  408382:	2400      	movs	r4, #0

00408384 <.LVL470>:
  408384:	46a3      	mov	fp, r4

00408386 <.LVL471>:
            state->mode = LENGTH;
  408386:	231b      	movs	r3, #27
  408388:	7033      	strb	r3, [r6, #0]
            if (state->wrap && state->flags) {
  40838a:	68b3      	ldr	r3, [r6, #8]
  40838c:	b1f3      	cbz	r3, 4083cc <.LVL477>
  40838e:	6933      	ldr	r3, [r6, #16]
  408390:	b1e3      	cbz	r3, 4083cc <.LVL477>
                NEEDBITS(32);
  408392:	2c1f      	cmp	r4, #31
  408394:	d80e      	bhi.n	4083b4 <.LVL475+0xc>
  408396:	2d00      	cmp	r5, #0
  408398:	f43f aaa2 	beq.w	4078e0 <.L124>
  40839c:	3d01      	subs	r5, #1
  40839e:	f81a 3b01 	ldrb.w	r3, [sl], #1

004083a2 <.LVL473>:
  4083a2:	40a3      	lsls	r3, r4
  4083a4:	449b      	add	fp, r3
  4083a6:	3408      	adds	r4, #8

004083a8 <.LVL475>:
  4083a8:	2c1f      	cmp	r4, #31
  4083aa:	d803      	bhi.n	4083b4 <.LVL475+0xc>
  4083ac:	2d00      	cmp	r5, #0
  4083ae:	d1f5      	bne.n	40839c <.LVL471+0x16>
  4083b0:	f7ff ba96 	b.w	4078e0 <.L124>
                if (hold != (state->total & 0xffffffffUL)) {
  4083b4:	69f3      	ldr	r3, [r6, #28]
  4083b6:	455b      	cmp	r3, fp
  4083b8:	d006      	beq.n	4083c8 <.LVL475+0x20>
                    strm->msg = (char *)"incorrect length check";
  4083ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4083bc:	f8c9 3018 	str.w	r3, [r9, #24]
                    state->mode = BAD;
  4083c0:	231d      	movs	r3, #29
  4083c2:	7033      	strb	r3, [r6, #0]
                    break;
  4083c4:	f7ff b813 	b.w	4073ee <.LVL113>
                INITBITS();
  4083c8:	2400      	movs	r4, #0

004083ca <.LVL476>:
  4083ca:	46a3      	mov	fp, r4

004083cc <.LVL477>:
            state->mode = DONE;
  4083cc:	231c      	movs	r3, #28
  4083ce:	7033      	strb	r3, [r6, #0]
            ret = Z_STREAM_END;
  4083d0:	2301      	movs	r3, #1
  4083d2:	9303      	str	r3, [sp, #12]
  4083d4:	f7ff ba84 	b.w	4078e0 <.L124>
            ret = Z_DATA_ERROR;
  4083d8:	f06f 0302 	mvn.w	r3, #2
  4083dc:	9303      	str	r3, [sp, #12]
  4083de:	f7ff ba7f 	b.w	4078e0 <.L124>

004083e2 <.LVL478>:
            INITBITS();
  4083e2:	2400      	movs	r4, #0
  4083e4:	46a3      	mov	fp, r4
  4083e6:	f7ff ba7b 	b.w	4078e0 <.L124>

004083ea <.LVL479>:
            state->mode = MEM;
  4083ea:	231e      	movs	r3, #30
  4083ec:	7033      	strb	r3, [r6, #0]
            return Z_MEM_ERROR;
  4083ee:	f06f 0303 	mvn.w	r3, #3
  4083f2:	9303      	str	r3, [sp, #12]

004083f4 <.LVL480>:
  4083f4:	f7ff badf 	b.w	4079b6 <.LVL227>

004083f8 <.LVL481>:
            UPDATE(state->check, strm->next_out - out, out);
  4083f8:	f8d9 100c 	ldr.w	r1, [r9, #12]
  4083fc:	4622      	mov	r2, r4
  4083fe:	1b09      	subs	r1, r1, r4
  408400:	69b0      	ldr	r0, [r6, #24]
  408402:	f00e fbc5 	bl	416b90 <.LFE16>

00408406 <.LVL482>:
  408406:	f7ff bab1 	b.w	40796c <.LVL226>
                      (state->mode == LEN_ || state->mode == COPY_ ? 256 : 0);
  40840a:	2200      	movs	r2, #0
  40840c:	f7ff bac3 	b.w	407996 <.LVL226+0x2a>

00408410 <.LVL483>:
        return Z_STREAM_ERROR;
  408410:	f06f 0301 	mvn.w	r3, #1
  408414:	9303      	str	r3, [sp, #12]
  408416:	f7ff bace 	b.w	4079b6 <.LVL227>
  40841a:	f06f 0301 	mvn.w	r3, #1
  40841e:	9303      	str	r3, [sp, #12]
  408420:	f7ff bac9 	b.w	4079b6 <.LVL227>
  408424:	f06f 0301 	mvn.w	r3, #1
  408428:	9303      	str	r3, [sp, #12]
  40842a:	f7ff bac4 	b.w	4079b6 <.LVL227>

0040842e <.LVL484>:
            return Z_MEM_ERROR;
  40842e:	f06f 0303 	mvn.w	r3, #3
  408432:	9303      	str	r3, [sp, #12]
  408434:	f7ff babf 	b.w	4079b6 <.LVL227>

00408438 <.LVL486>:
    strm->data_type = state->bits + (state->last ? 64 : 0) +
  408438:	3380      	adds	r3, #128	; 0x80
                      (state->mode == LEN_ || state->mode == COPY_ ? 256 : 0);
  40843a:	2200      	movs	r2, #0
  40843c:	f7ff baab 	b.w	407996 <.LVL226+0x2a>
  408440:	00418dd8 	.word	0x00418dd8

Disassembly of section .rodata.Td%39:

00408444 <Td>:
  408444:	51f4a750 7e416553 1a17a4c3 3a275e96     P..QSeA~.....^':
  408454:	3bab6bcb 1f9d45f1 acfa58ab 4be30393     .k.;.E...X.....K
  408464:	2030fa55 ad766df6 88cc7691 f5024c25     U.0 .mv..v..%L..
  408474:	4fe5d7fc c52acbd7 26354480 b562a38f     ...O..*..D5&..b.
  408484:	deb15a49 25ba1b67 45ea0e98 5dfec0e1     IZ..g..%...E...]
  408494:	c32f7502 814cf012 8d4697a3 6bd3f9c6     .u/...L...F....k
  4084a4:	038f5fe7 15929c95 bf6d7aeb 955259da     ._.......zm..YR.
  4084b4:	d4be832d 587421d3 49e06929 8ec9c844     -....!tX)i.ID...
  4084c4:	75c2896a f48e7978 99583e6b 27b971dd     j..uxy..k>X..q.'
  4084d4:	bee14fb6 f088ad17 c920ac66 7dce3ab4     .O......f. ..:.}
  4084e4:	63df4a18 e51a3182 97513360 62537f45     .J.c.1..`3Q.E.Sb
  4084f4:	b16477e0 bb6bae84 fe81a01c f9082b94     .wd...k......+..
  408504:	70486858 8f45fd19 94de6c87 527bf8b7     XhHp..E..l....{R
  408514:	ab73d323 724b02e2 e31f8f57 6655ab2a     #.s...KrW...*.Uf
  408524:	b2eb2807 2fb5c203 86c57b9a d33708a5     .(...../.{....7.
  408534:	302887f2 23bfa5b2 02036aba ed16825c     ..(0...#.j..\...
  408544:	8acf1c2b a779b492 f307f2f0 4e69e2a1     +.....y.......iN
  408554:	65daf4cd 0605bed5 d134621f c4a6fe8a     ...e.....b4.....
  408564:	342e539d a2f355a0 058ae132 a4f6eb75     .S.4.U..2...u...
  408574:	0b83ec39 4060efaa 5e719f06 bd6e1051     9.....`@..q^Q.n.
  408584:	3e218af9 96dd063d dd3e05ae 4de6bd46     ..!>=.....>.F..M
  408594:	91548db5 71c45d05 0406d46f 605015ff     ..T..].qo.....P`
  4085a4:	1998fb24 d6bde997 894043cc 67d99e77     $........C@.w..g
  4085b4:	b0e842bd 07898b88 e7195b38 79c8eedb     .B......8[.....y
  4085c4:	a17c0a47 7c420fe9 f8841ec9 00000000     G.|...B|........
  4085d4:	09808683 322bed48 1e1170ac 6c5a724e     ....H.+2.p..NrZl
  4085e4:	fd0efffb 0f853856 3daed51e 362d3927     ....V8.....='9-6
  4085f4:	0a0fd964 685ca621 9b5b54d1 24362e3a     d...!.\h.T[.:.6$
  408604:	0c0a67b1 9357e70f b4ee96d2 1b9b919e     .g....W.........
  408614:	80c0c54f 61dc20a2 5a774b69 1c121a16     O.... .aiKwZ....
  408624:	e293ba0a c0a02ae5 3c22e043 121b171d     .....*..C."<....
  408634:	0e090d0b f28bc7ad 2db6a8b9 141ea9c8     ...........-....
  408644:	57f11985 af75074c ee99ddbb a37f60fd     ...WL.u......`..
  408654:	f701269f 5c72f5bc 44663bc5 5bfb7e34     .&....r\.;fD4~.[
  408664:	8b432976 cb23c6dc b6edfc68 b8e4f163     v)C...#.h...c...
  408674:	d731dcca 42638510 13972240 84c61120     ..1...cB@".. ...
  408684:	854a247d d2bb3df8 aef93211 c729a16d     }$J..=...2..m.).
  408694:	1d9e2f4b dcb230f3 0d8652ec 77c1e3d0     K/...0...R.....w
  4086a4:	2bb3166c a970b999 119448fa 47e96422     l..+..p..H.."d.G
  4086b4:	a8fc8cc4 a0f03f1a 567d2cd8 223390ef     .....?...,}V..3"
  4086c4:	87494ec7 d938d1c1 8ccaa2fe 98d40b36     .NI...8.....6...
  4086d4:	a6f581cf a57ade28 dab78e26 3fadbfa4     ....(.z.&......?
  4086e4:	2c3a9de4 5078920d 6a5fcc9b 547e4662     ..:,..xP.._jbF~T
  4086f4:	f68d13c2 90d8b8e8 2e39f75e 82c3aff5     ........^.9.....
  408704:	9f5d80be 69d0937c 6fd52da9 cf2512b3     ..].|..i.-.o..%.
  408714:	c8ac993b 10187da7 e89c636e db3bbb7b     ;....}..nc..{.;.
  408724:	cd267809 6e5918f4 ec9ab701 834f9aa8     .x&...Yn......O.
  408734:	e6956e65 aaffe67e 21bccf08 ef15e8e6     en..~......!....
  408744:	bae79bd9 4a6f36ce ea9f09d4 29b07cd6     .....6oJ.....|.)
  408754:	31a4b2af 2a3f2331 c6a59430 35a266c0     ...11#?*0....f.5
  408764:	744ebc37 fc82caa6 e090d0b0 33a7d815     7.Nt...........3
  408774:	f104984a 41ecdaf7 7fcd500e 1791f62f     J......A.P../...
  408784:	764dd68d 43efb04d ccaa4d54 e49604df     ..MvM..CTM......
  408794:	9ed1b5e3 4c6a881b c12c1fb8 4665517f     ......jL..,..QeF
  4087a4:	9d5eea04 018c355d fa877473 fb0b412e     ..^.]5..st...A..
  4087b4:	b3671d5a 92dbd252 e9105633 6dd64713     Z.g.R...3V...G.m
  4087c4:	9ad7618c 37a10c7a 59f8148e eb133c89     .a..z..7...Y.<..
  4087d4:	cea927ee b761c935 e11ce5ed 7a47b13c     .'..5.a.....<.Gz
  4087e4:	9cd2df59 55f2733f 1814ce79 73c737bf     Y...?s.Uy....7.s
  4087f4:	53f7cdea 5ffdaa5b df3d6f14 7844db86     ...S[.._.o=...Dx
  408804:	caaff381 b968c43e 3824342c c2a3405f     ....>.h.,4$8_@..
  408814:	161dc372 bce2250c 283c498b ff0d9541     r....%...I<(A...
  408824:	39a80171 080cb3de d8b4e49c 6456c190     q..9..........Vd
  408834:	7bcb8461 d532b670 486c5c74 d0b85742     a..{p.2.t\lHBW..
  408844:	5051f4a7 537e4165 c31a17a4 963a275e     ..QPeA~S....^':.
  408854:	cb3bab6b f11f9d45 abacfa58 934be303     k.;.E...X.....K.
  408864:	552030fa f6ad766d 9188cc76 25f5024c     .0 Umv..v...L..%
  408874:	fc4fe5d7 d7c52acb 80263544 8fb562a3     ..O..*..D5&..b..
  408884:	49deb15a 6725ba1b 9845ea0e e15dfec0     Z..I..%g..E...].
  408894:	02c32f75 12814cf0 a38d4697 c66bd3f9     u/...L...F....k.
  4088a4:	e7038f5f 9515929c ebbf6d7a da955259     _.......zm..YR..
  4088b4:	2dd4be83 d3587421 2949e069 448ec9c8     ...-!tX.i.I)...D
  4088c4:	6a75c289 78f48e79 6b99583e dd27b971     ..ujy..x>X.kq.'.
  4088d4:	b6bee14f 17f088ad 66c920ac b47dce3a     O........ .f:.}.
  4088e4:	1863df4a 82e51a31 60975133 4562537f     J.c.1...3Q.`.SbE
  4088f4:	e0b16477 84bb6bae 1cfe81a0 94f9082b     wd...k......+...
  408904:	58704868 198f45fd 8794de6c b7527bf8     hHpX.E..l....{R.
  408914:	23ab73d3 e2724b02 57e31f8f 2a6655ab     .s.#.Kr....W.Uf*
  408924:	07b2eb28 032fb5c2 9a86c57b a5d33708     (...../.{....7..
  408934:	f2302887 b223bfa5 ba02036a 5ced1682     .(0...#.j......\
  408944:	2b8acf1c 92a779b4 f0f307f2 a14e69e2     ...+.y.......iN.
  408954:	cd65daf4 d50605be 1fd13462 8ac4a6fe     ..e.....b4......
  408964:	9d342e53 a0a2f355 32058ae1 75a4f6eb     S.4.U......2...u
  408974:	390b83ec aa4060ef 065e719f 51bd6e10     ...9.`@..q^..n.Q
  408984:	f93e218a 3d96dd06 aedd3e05 464de6bd     .!>....=.>....MF
  408994:	b591548d 0571c45d 6f0406d4 ff605015     .T..].q....o.P`.
  4089a4:	241998fb 97d6bde9 cc894043 7767d99e     ...$....C@....gw
  4089b4:	bdb0e842 8807898b 38e7195b db79c8ee     B.......[..8..y.
  4089c4:	47a17c0a e97c420f c9f8841e 00000000     .|.G.B|.........
  4089d4:	83098086 48322bed ac1e1170 4e6c5a72     .....+2Hp...rZlN
  4089e4:	fbfd0eff 560f8538 1e3daed5 27362d39     ....8..V..=.9-6'
  4089f4:	640a0fd9 21685ca6 d19b5b54 3a24362e     ...d.\h!T[...6$:
  408a04:	b10c0a67 0f9357e7 d2b4ee96 9e1b9b91     g....W..........
  408a14:	4f80c0c5 a261dc20 695a774b 161c121a     ...O .a.KwZi....
  408a24:	0ae293ba e5c0a02a 433c22e0 1d121b17     ....*...."<C....
  408a34:	0b0e090d adf28bc7 b92db6a8 c8141ea9     ..........-.....
  408a44:	8557f119 4caf7507 bbee99dd fda37f60     ..W..u.L....`...
  408a54:	9ff70126 bc5c72f5 c544663b 345bfb7e     &....r\.;fD.~.[4
  408a64:	768b4329 dccb23c6 68b6edfc 63b8e4f1     )C.v.#.....h...c
  408a74:	cad731dc 10426385 40139722 2084c611     .1...cB."..@... 
  408a84:	7d854a24 f8d2bb3d 11aef932 6dc729a1     $J.}=...2....).m
  408a94:	4b1d9e2f f3dcb230 ec0d8652 d077c1e3     /..K0...R.....w.
  408aa4:	6c2bb316 99a970b9 fa119448 2247e964     ..+l.p..H...d.G"
  408ab4:	c4a8fc8c 1aa0f03f d8567d2c ef223390     ....?...,}V..3".
  408ac4:	c787494e c1d938d1 fe8ccaa2 3698d40b     NI...8.........6
  408ad4:	cfa6f581 28a57ade 26dab78e a43fadbf     .....z.(...&..?.
  408ae4:	e42c3a9d 0d507892 9b6a5fcc 62547e46     .:,..xP.._j.F~Tb
  408af4:	c2f68d13 e890d8b8 5e2e39f7 f582c3af     .........9.^....
  408b04:	be9f5d80 7c69d093 a96fd52d b3cf2512     .]....i|-.o..%..
  408b14:	3bc8ac99 a710187d 6ee89c63 7bdb3bbb     ...;}...c..n.;.{
  408b24:	09cd2678 f46e5918 01ec9ab7 a8834f9a     x&...Yn......O..
  408b34:	65e6956e 7eaaffe6 0821bccf e6ef15e8     n..e...~..!.....
  408b44:	d9bae79b ce4a6f36 d4ea9f09 d629b07c     ....6oJ.....|.).
  408b54:	af31a4b2 312a3f23 30c6a594 c035a266     ..1.#?*1...0f.5.
  408b64:	37744ebc a6fc82ca b0e090d0 1533a7d8     .Nt7..........3.
  408b74:	4af10498 f741ecda 0e7fcd50 2f1791f6     ...J..A.P....../
  408b84:	8d764dd6 4d43efb0 54ccaa4d dfe49604     .Mv...CMM..T....
  408b94:	e39ed1b5 1b4c6a88 b8c12c1f 7f466551     .....jL..,..QeF.
  408ba4:	049d5eea 5d018c35 73fa8774 2efb0b41     .^..5..]t..sA...
  408bb4:	5ab3671d 5292dbd2 33e91056 136dd647     .g.Z...RV..3G.m.
  408bc4:	8c9ad761 7a37a10c 8e59f814 89eb133c     a.....7z..Y.<...
  408bd4:	eecea927 35b761c9 ede11ce5 3c7a47b1     '....a.5.....Gz<
  408be4:	599cd2df 3f55f273 791814ce bf73c737     ...Ys.U?...y7.s.
  408bf4:	ea53f7cd 5b5ffdaa 14df3d6f 867844db     ..S..._[o=...Dx.
  408c04:	81caaff3 3eb968c4 2c382434 5fc2a340     .....h.>4$8,@.._
  408c14:	72161dc3 0cbce225 8b283c49 41ff0d95     ...r%...I<(....A
  408c24:	7139a801 de080cb3 9cd8b4e4 906456c1     ..9q.........Vd.
  408c34:	617bcb84 70d532b6 74486c5c 42d0b857     ..{a.2.p\lHtW..B
  408c44:	a75051f4 65537e41 a4c31a17 5e963a27     .QP.A~Se....':.^
  408c54:	6bcb3bab 45f11f9d 58abacfa 03934be3     .;.k...E...X.K..
  408c64:	fa552030 6df6ad76 769188cc 4c25f502     0 U.v..m...v..%L
  408c74:	d7fc4fe5 cbd7c52a 44802635 a38fb562     .O..*...5&.Db...
  408c84:	5a49deb1 1b6725ba 0e9845ea c0e15dfe     ..IZ.%g..E...]..
  408c94:	7502c32f f012814c 97a38d46 f9c66bd3     /..uL...F....k..
  408ca4:	5fe7038f 9c951592 7aebbf6d 59da9552     ..._....m..zR..Y
  408cb4:	832dd4be 21d35874 692949e0 c8448ec9     ..-.tX.!.I)i..D.
  408cc4:	896a75c2 7978f48e 3e6b9958 71dd27b9     .uj...xyX.k>.'.q
  408cd4:	4fb6bee1 ad17f088 ac66c920 3ab47dce     ...O.... .f..}.:
  408ce4:	4a1863df 3182e51a 33609751 7f456253     .c.J...1Q.`3SbE.
  408cf4:	77e0b164 ae84bb6b a01cfe81 2b94f908     d..wk..........+
  408d04:	68587048 fd198f45 6c8794de f8b7527b     HpXhE......l{R..
  408d14:	d323ab73 02e2724b 8f57e31f ab2a6655     s.#.Kr....W.Uf*.
  408d24:	2807b2eb c2032fb5 7b9a86c5 08a5d337     ...(./.....{7...
  408d34:	87f23028 a5b223bf 6aba0203 825ced16     (0...#.....j..\.
  408d44:	1c2b8acf b492a779 f2f0f307 e2a14e69     ..+.y.......iN..
  408d54:	f4cd65da bed50605 621fd134 fe8ac4a6     .e......4..b....
  408d64:	539d342e 55a0a2f3 e132058a eb75a4f6     .4.S...U..2...u.
  408d74:	ec390b83 efaa4060 9f065e71 1051bd6e     ..9.`@..q^..n.Q.
  408d84:	8af93e21 063d96dd 05aedd3e bd464de6     !>....=.>....MF.
  408d94:	8db59154 5d0571c4 d46f0406 15ff6050     T....q.]..o.P`..
  408da4:	fb241998 e997d6bd 43cc8940 9e7767d9     ..$.....@..C.gw.
  408db4:	42bdb0e8 8b880789 5b38e719 eedb79c8     ...B......8[.y..
  408dc4:	0a47a17c 0fe97c42 1ec9f884 00000000     |.G.B|..........
  408dd4:	86830980 ed48322b 70ac1e11 724e6c5a     ....+2H....pZlNr
  408de4:	fffbfd0e 38560f85 d51e3dae 3927362d     ......V8.=..-6'9
  408df4:	d9640a0f a621685c 54d19b5b 2e3a2436     ..d.\h!.[..T6$:.
  408e04:	67b10c0a e70f9357 96d2b4ee 919e1b9b     ...gW...........
  408e14:	c54f80c0 20a261dc 4b695a77 1a161c12     ..O..a. wZiK....
  408e24:	ba0ae293 2ae5c0a0 e0433c22 171d121b     .......*"<C.....
  408e34:	0d0b0e09 c7adf28b a8b92db6 a9c8141e     .........-......
  408e44:	198557f1 074caf75 ddbbee99 60fda37f     .W..u.L........`
  408e54:	269ff701 f5bc5c72 3bc54466 7e345bfb     ...&r\..fD.;.[4~
  408e64:	29768b43 c6dccb23 fc68b6ed f163b8e4     C.v)#.....h...c.
  408e74:	dccad731 85104263 22401397 112084c6     1...cB....@".. .
  408e84:	247d854a 3df8d2bb 3211aef9 a16dc729     J.}$...=...2).m.
  408e94:	2f4b1d9e 30f3dcb2 52ec0d86 e3d077c1     ..K/...0...R.w..
  408ea4:	166c2bb3 b999a970 48fa1194 642247e9     .+l.p......H.G"d
  408eb4:	8cc4a8fc 3f1aa0f0 2cd8567d 90ef2233     .......?}V.,3"..
  408ec4:	4ec78749 d1c1d938 a2fe8cca 0b3698d4     I..N8.........6.
  408ed4:	81cfa6f5 de28a57a 8e26dab7 bfa43fad     ....z.(...&..?..
  408ee4:	9de42c3a 920d5078 cc9b6a5f 4662547e     :,..xP.._j..~TbF
  408ef4:	13c2f68d b8e890d8 f75e2e39 aff582c3     ........9.^.....
  408f04:	80be9f5d 937c69d0 2da96fd5 12b3cf25     ]....i|..o.-%...
  408f14:	993bc8ac 7da71018 636ee89c bb7bdb3b     ..;....}..nc;.{.
  408f24:	7809cd26 18f46e59 b701ec9a 9aa8834f     &..xYn......O...
  408f34:	6e65e695 e67eaaff cf0821bc e8e6ef15     ..en..~..!......
  408f44:	9bd9bae7 36ce4a6f 09d4ea9f 7cd629b0     ....oJ.6.....).|
  408f54:	b2af31a4 23312a3f 9430c6a5 66c035a2     .1..?*1#..0..5.f
  408f64:	bc37744e caa6fc82 d0b0e090 d81533a7     Nt7..........3..
  408f74:	984af104 daf741ec 500e7fcd f62f1791     ..J..A.....P../.
  408f84:	d68d764d b04d43ef 4d54ccaa 04dfe496     Mv...CM...TM....
  408f94:	b5e39ed1 881b4c6a 1fb8c12c 517f4665     ....jL..,...eF.Q
  408fa4:	ea049d5e 355d018c 7473fa87 412efb0b     ^.....]5..st...A
  408fb4:	1d5ab367 d25292db 5633e910 47136dd6     g.Z...R...3V.m.G
  408fc4:	618c9ad7 0c7a37a1 148e59f8 3c89eb13     ...a.7z..Y.....<
  408fd4:	27eecea9 c935b761 e5ede11c b13c7a47     ...'a.5.....Gz<.
  408fe4:	df599cd2 733f55f2 ce791814 37bf73c7     ..Y..U?s..y..s.7
  408ff4:	cdea53f7 aa5b5ffd 6f14df3d db867844     .S..._[.=..oDx..
  409004:	f381caaf c43eb968 342c3824 405fc2a3     ....h.>.$8,4.._@
  409014:	c372161d 250cbce2 498b283c 9541ff0d     ..r....%<(.I..A.
  409024:	017139a8 b3de080c e49cd8b4 c1906456     .9q.........Vd..
  409034:	84617bcb b670d532 5c74486c 5742d0b8     .{a.2.p.lHt\..BW
  409044:	f4a75051 4165537e 17a4c31a 275e963a     QP..~SeA....:.^'
  409054:	ab6bcb3b 9d45f11f fa58abac e303934b     ;.k...E...X.K...
  409064:	30fa5520 766df6ad cc769188 024c25f5      U.0..mv..v..%L.
  409074:	e5d7fc4f 2acbd7c5 35448026 62a38fb5     O......*&.D5...b
  409084:	b15a49de ba1b6725 ea0e9845 fec0e15d     .IZ.%g..E...]...
  409094:	2f7502c3 4cf01281 4697a38d d3f9c66b     ..u/...L...Fk...
  4090a4:	8f5fe703 929c9515 6d7aebbf 5259da95     .._.......zm..YR
  4090b4:	be832dd4 7421d358 e0692949 c9c8448e     .-..X.!tI)i..D..
  4090c4:	c2896a75 8e7978f4 583e6b99 b971dd27     uj...xy..k>X'.q.
  4090d4:	e14fb6be 88ad17f0 20ac66c9 ce3ab47d     ..O......f. }.:.
  4090e4:	df4a1863 1a3182e5 51336097 537f4562     c.J...1..`3QbE.S
  4090f4:	6477e0b1 6bae84bb 81a01cfe 082b94f9     ..wd...k......+.
  409104:	48685870 45fd198f de6c8794 7bf8b752     pXhH...E..l.R..{
  409114:	73d323ab 4b02e272 1f8f57e3 55ab2a66     .#.sr..K.W..f*.U
  409124:	eb2807b2 b5c2032f c57b9a86 3708a5d3     ..(./.....{....7
  409134:	2887f230 bfa5b223 036aba02 16825ced     0..(#.....j..\..
  409144:	cf1c2b8a 79b492a7 07f2f0f3 69e2a14e     .+.....y....N..i
  409154:	daf4cd65 05bed506 34621fd1 a6fe8ac4     e.........b4....
  409164:	2e539d34 f355a0a2 8ae13205 f6eb75a4     4.S...U..2...u..
  409174:	83ec390b 60efaa40 719f065e 6e1051bd     .9..@..`^..q.Q.n
  409184:	218af93e dd063d96 3e05aedd e6bd464d     >..!.=.....>MF..
  409194:	548db591 c45d0571 06d46f04 5015ff60     ...Tq.]..o..`..P
  4091a4:	98fb2419 bde997d6 4043cc89 d99e7767     .$........C@gw..
  4091b4:	e842bdb0 898b8807 195b38e7 c8eedb79     ..B......8[.y...
  4091c4:	7c0a47a1 420fe97c 841ec9f8 00000000     .G.||..B........
  4091d4:	80868309 2bed4832 1170ac1e 5a724e6c     ....2H.+..p.lNrZ
  4091e4:	0efffbfd 8538560f aed51e3d 2d392736     .....V8.=...6'9-
  4091f4:	0fd9640a 5ca62168 5b54d19b 362e3a24     .d..h!.\..T[$:.6
  409204:	0a67b10c 57e70f93 ee96d2b4 9b919e1b     ..g....W........
  409214:	c0c54f80 dc20a261 774b695a 121a161c     .O..a. .ZiKw....
  409224:	93ba0ae2 a02ae5c0 22e0433c 1b171d12     ......*.<C."....
  409234:	090d0b0e 8bc7adf2 b6a8b92d 1ea9c814     ........-.......
  409244:	f1198557 75074caf 99ddbbee 7f60fda3     W....L.u......`.
  409254:	01269ff7 72f5bc5c 663bc544 fb7e345b     ..&.\..rD.;f[4~.
  409264:	4329768b 23c6dccb edfc68b6 e4f163b8     .v)C...#.h...c..
  409274:	31dccad7 63851042 97224013 c6112084     ...1B..c.@".. ..
  409284:	4a247d85 bb3df8d2 f93211ae 29a16dc7     .}$J..=...2..m.)
  409294:	9e2f4b1d b230f3dc 8652ec0d c1e3d077     .K/...0...R.w...
  4092a4:	b3166c2b 70b999a9 9448fa11 e9642247     +l.....p..H.G"d.
  4092b4:	fc8cc4a8 f03f1aa0 7d2cd856 3390ef22     ......?.V.,}"..3
  4092c4:	494ec787 38d1c1d9 caa2fe8c d40b3698     ..NI...8.....6..
  4092d4:	f581cfa6 7ade28a5 b78e26da adbfa43f     .....(.z.&..?...
  4092e4:	3a9de42c 78920d50 5fcc9b6a 7e466254     ,..:P..xj.._TbF~
  4092f4:	8d13c2f6 d8b8e890 39f75e2e c3aff582     .........^.9....
  409304:	5d80be9f d0937c69 d52da96f 2512b3cf     ...]i|..o.-....%
  409314:	ac993bc8 187da710 9c636ee8 3bbb7bdb     .;....}..nc..{.;
  409324:	267809cd 5918f46e 9ab701ec 4f9aa883     ..x&n..Y.......O
  409334:	956e65e6 ffe67eaa bccf0821 15e8e6ef     .en..~..!.......
  409344:	e79bd9ba 6f36ce4a 9f09d4ea b07cd629     ....J.6o....).|.
  409354:	a4b2af31 3f23312a a59430c6 a266c035     1...*1#?.0..5.f.
  409364:	4ebc3774 82caa6fc 90d0b0e0 a7d81533     t7.N........3...
  409374:	04984af1 ecdaf741 cd500e7f 91f62f17     .J..A.....P../..
  409384:	4dd68d76 efb04d43 aa4d54cc 9604dfe4     v..MCM...TM.....
  409394:	d1b5e39e 6a881b4c 2c1fb8c1 65517f46     ....L..j...,F.Qe
  4093a4:	5eea049d 8c355d01 877473fa 0b412efb     ...^.]5..st...A.
  4093b4:	671d5ab3 dbd25292 105633e9 d647136d     .Z.g.R...3V.m.G.
  4093c4:	d7618c9a a10c7a37 f8148e59 133c89eb     ..a.7z..Y.....<.
  4093d4:	a927eece 61c935b7 1ce5ede1 47b13c7a     ..'..5.a....z<.G
  4093e4:	d2df599c f2733f55 14ce7918 c737bf73     .Y..U?s..y..s.7.
  4093f4:	f7cdea53 fdaa5b5f 3d6f14df 44db8678     S..._[....o=x..D
  409404:	aff381ca 68c43eb9 24342c38 a3405fc2     .....>.h8,4$._@.
  409414:	1dc37216 e2250cbc 3c498b28 0d9541ff     .r....%.(.I<.A..
  409424:	a8017139 0cb3de08 b4e49cd8 56c19064     9q..........d..V
  409434:	cb84617b 32b670d5 6c5c7448 b85742d0     {a...p.2Ht\l.BW.

Disassembly of section .rodata.Te%40:

00409444 <Te>:
  409444:	c66363a5 f87c7c84 ee777799 f67b7b8d     .cc..||..ww..{{.
  409454:	fff2f20d d66b6bbd de6f6fb1 91c5c554     .....kk..oo.T...
  409464:	60303050 02010103 ce6767a9 562b2b7d     P00`.....gg.}++V
  409474:	e7fefe19 b5d7d762 4dababe6 ec76769a     ....b......M.vv.
  409484:	8fcaca45 1f82829d 89c9c940 fa7d7d87     E.......@....}}.
  409494:	effafa15 b25959eb 8e4747c9 fbf0f00b     .....YY..GG.....
  4094a4:	41adadec b3d4d467 5fa2a2fd 45afafea     ...Ag......_...E
  4094b4:	239c9cbf 53a4a4f7 e4727296 9bc0c05b     ...#...S.rr.[...
  4094c4:	75b7b7c2 e1fdfd1c 3d9393ae 4c26266a     ...u.......=j&&L
  4094d4:	6c36365a 7e3f3f41 f5f7f702 83cccc4f     Z66lA??~....O...
  4094e4:	6834345c 51a5a5f4 d1e5e534 f9f1f108     \44h...Q4.......
  4094f4:	e2717193 abd8d873 62313153 2a15153f     .qq.s...S11b?..*
  409504:	0804040c 95c7c752 46232365 9dc3c35e     ....R...e##F^...
  409514:	30181828 379696a1 0a05050f 2f9a9ab5     (..0...7......./
  409524:	0e070709 24121236 1b80809b dfe2e23d     ....6..$....=...
  409534:	cdebeb26 4e272769 7fb2b2cd ea75759f     &...i''N.....uu.
  409544:	1209091b 1d83839e 582c2c74 341a1a2e     ........t,,X...4
  409554:	361b1b2d dc6e6eb2 b45a5aee 5ba0a0fb     -..6.nn..ZZ....[
  409564:	a45252f6 763b3b4d b7d6d661 7db3b3ce     .RR.M;;va......}
  409574:	5229297b dde3e33e 5e2f2f71 13848497     {))R>...q//^....
  409584:	a65353f5 b9d1d168 00000000 c1eded2c     .SS.h.......,...
  409594:	40202060 e3fcfc1f 79b1b1c8 b65b5bed     `  @.......y.[[.
  4095a4:	d46a6abe 8dcbcb46 67bebed9 7239394b     .jj.F......gK99r
  4095b4:	944a4ade 984c4cd4 b05858e8 85cfcf4a     .JJ..LL..XX.J...
  4095c4:	bbd0d06b c5efef2a 4faaaae5 edfbfb16     k...*......O....
  4095d4:	864343c5 9a4d4dd7 66333355 11858594     .CC..MM.U33f....
  4095e4:	8a4545cf e9f9f910 04020206 fe7f7f81     .EE.............
  4095f4:	a05050f0 783c3c44 259f9fba 4ba8a8e3     .PP.D<<x...%...K
  409604:	a25151f3 5da3a3fe 804040c0 058f8f8a     .QQ....].@@.....
  409614:	3f9292ad 219d9dbc 70383848 f1f5f504     ...?...!H88p....
  409624:	63bcbcdf 77b6b6c1 afdada75 42212163     ...c...wu...c!!B
  409634:	20101030 e5ffff1a fdf3f30e bfd2d26d     0.. ........m...
  409644:	81cdcd4c 180c0c14 26131335 c3ecec2f     L.......5..&/...
  409654:	be5f5fe1 359797a2 884444cc 2e171739     .__....5.DD.9...
  409664:	93c4c457 55a7a7f2 fc7e7e82 7a3d3d47     W......U.~~.G==z
  409674:	c86464ac ba5d5de7 3219192b e6737395     .dd..]].+..2.ss.
  409684:	c06060a0 19818198 9e4f4fd1 a3dcdc7f     .``......OO.....
  409694:	44222266 542a2a7e 3b9090ab 0b888883     f""D~**T...;....
  4096a4:	8c4646ca c7eeee29 6bb8b8d3 2814143c     .FF.)......k<..(
  4096b4:	a7dede79 bc5e5ee2 160b0b1d addbdb76     y....^^.....v...
  4096c4:	dbe0e03b 64323256 743a3a4e 140a0a1e     ;...V22dN::t....
  4096d4:	924949db 0c06060a 4824246c b85c5ce4     .II.....l$$H.\\.
  4096e4:	9fc2c25d bdd3d36e 43acacef c46262a6     ]...n......C.bb.
  4096f4:	399191a8 319595a4 d3e4e437 f279798b     ...9...17....yy.
  409704:	d5e7e732 8bc8c843 6e373759 da6d6db7     2...C...Y77n.mm.
  409714:	018d8d8c b1d5d564 9c4e4ed2 49a9a9e0     ....d....NN....I
  409724:	d86c6cb4 ac5656fa f3f4f407 cfeaea25     .ll..VV.....%...
  409734:	ca6565af f47a7a8e 47aeaee9 10080818     .ee..zz....G....
  409744:	6fbabad5 f0787888 4a25256f 5c2e2e72     ...o.xx.o%%Jr..\
  409754:	381c1c24 57a6a6f1 73b4b4c7 97c6c651     $..8...W...sQ...
  409764:	cbe8e823 a1dddd7c e874749c 3e1f1f21     #...|....tt.!..>
  409774:	964b4bdd 61bdbddc 0d8b8b86 0f8a8a85     .KK....a........
  409784:	e0707090 7c3e3e42 71b5b5c4 cc6666aa     .pp.B>>|...q.ff.
  409794:	904848d8 06030305 f7f6f601 1c0e0e12     .HH.............
  4097a4:	c26161a3 6a35355f ae5757f9 69b9b9d0     .aa._55j.WW....i
  4097b4:	17868691 99c1c158 3a1d1d27 279e9eb9     ....X...'..:...'
  4097c4:	d9e1e138 ebf8f813 2b9898b3 22111133     8..........+3.."
  4097d4:	d26969bb a9d9d970 078e8e89 339494a7     .ii.p..........3
  4097e4:	2d9b9bb6 3c1e1e22 15878792 c9e9e920     ...-"..<.... ...
  4097f4:	87cece49 aa5555ff 50282878 a5dfdf7a     I....UU.x((Pz...
  409804:	038c8c8f 59a1a1f8 09898980 1a0d0d17     .......Y........
  409814:	65bfbfda d7e6e631 844242c6 d06868b8     ...e1....BB..hh.
  409824:	824141c3 299999b0 5a2d2d77 1e0f0f11     .AA....)w--Z....
  409834:	7bb0b0cb a85454fc 6dbbbbd6 2c16163a     ...{.TT....m:..,
  409844:	a5c66363 84f87c7c 99ee7777 8df67b7b     cc..||..ww..{{..
  409854:	0dfff2f2 bdd66b6b b1de6f6f 5491c5c5     ....kk..oo.....T
  409864:	50603030 03020101 a9ce6767 7d562b2b     00`P....gg..++V}
  409874:	19e7fefe 62b5d7d7 e64dabab 9aec7676     .......b..M.vv..
  409884:	458fcaca 9d1f8282 4089c9c9 87fa7d7d     ...E.......@}}..
  409894:	15effafa ebb25959 c98e4747 0bfbf0f0     ....YY..GG......
  4098a4:	ec41adad 67b3d4d4 fd5fa2a2 ea45afaf     ..A....g.._...E.
  4098b4:	bf239c9c f753a4a4 96e47272 5b9bc0c0     ..#...S.rr.....[
  4098c4:	c275b7b7 1ce1fdfd ae3d9393 6a4c2626     ..u.......=.&&Lj
  4098d4:	5a6c3636 417e3f3f 02f5f7f7 4f83cccc     66lZ??~A.......O
  4098e4:	5c683434 f451a5a5 34d1e5e5 08f9f1f1     44h\..Q....4....
  4098f4:	93e27171 73abd8d8 53623131 3f2a1515     qq.....s11bS..*?
  409904:	0c080404 5295c7c7 65462323 5e9dc3c3     .......R##Fe...^
  409914:	28301818 a1379696 0f0a0505 b52f9a9a     ..0(..7......./.
  409924:	090e0707 36241212 9b1b8080 3ddfe2e2     ......$6.......=
  409934:	26cdebeb 694e2727 cd7fb2b2 9fea7575     ...&''Ni....uu..
  409944:	1b120909 9e1d8383 74582c2c 2e341a1a     ........,,Xt..4.
  409954:	2d361b1b b2dc6e6e eeb45a5a fb5ba0a0     ..6-nn..ZZ....[.
  409964:	f6a45252 4d763b3b 61b7d6d6 ce7db3b3     RR..;;vM...a..}.
  409974:	7b522929 3edde3e3 715e2f2f 97138484     ))R{...>//^q....
  409984:	f5a65353 68b9d1d1 00000000 2cc1eded     SS.....h.......,
  409994:	60402020 1fe3fcfc c879b1b1 edb65b5b       @`......y.[[..
  4099a4:	bed46a6a 468dcbcb d967bebe 4b723939     jj.....F..g.99rK
  4099b4:	de944a4a d4984c4c e8b05858 4a85cfcf     JJ..LL..XX.....J
  4099c4:	6bbbd0d0 2ac5efef e54faaaa 16edfbfb     ...k...*..O.....
  4099d4:	c5864343 d79a4d4d 55663333 94118585     CC..MM..33fU....
  4099e4:	cf8a4545 10e9f9f9 06040202 81fe7f7f     EE..............
  4099f4:	f0a05050 44783c3c ba259f9f e34ba8a8     PP..<<xD..%...K.
  409a04:	f3a25151 fe5da3a3 c0804040 8a058f8f     QQ....].@@......
  409a14:	ad3f9292 bc219d9d 48703838 04f1f5f5     ..?...!.88pH....
  409a24:	df63bcbc c177b6b6 75afdada 63422121     ..c...w....u!!Bc
  409a34:	30201010 1ae5ffff 0efdf3f3 6dbfd2d2     .. 0...........m
  409a44:	4c81cdcd 14180c0c 35261313 2fc3ecec     ...L......&5.../
  409a54:	e1be5f5f a2359797 cc884444 392e1717     __....5.DD.....9
  409a64:	5793c4c4 f255a7a7 82fc7e7e 477a3d3d     ...W..U.~~..==zG
  409a74:	acc86464 e7ba5d5d 2b321919 95e67373     dd..]]....2+ss..
  409a84:	a0c06060 98198181 d19e4f4f 7fa3dcdc     ``......OO......
  409a94:	66442222 7e542a2a ab3b9090 830b8888     ""Df**T~..;.....
  409aa4:	ca8c4646 29c7eeee d36bb8b8 3c281414     FF.....)..k...(<
  409ab4:	79a7dede e2bc5e5e 1d160b0b 76addbdb     ...y^^.........v
  409ac4:	3bdbe0e0 56643232 4e743a3a 1e140a0a     ...;22dV::tN....
  409ad4:	db924949 0a0c0606 6c482424 e4b85c5c     II......$$Hl\\..
  409ae4:	5d9fc2c2 6ebdd3d3 ef43acac a6c46262     ...]...n..C.bb..
  409af4:	a8399191 a4319595 37d3e4e4 8bf27979     ..9...1....7yy..
  409b04:	32d5e7e7 438bc8c8 596e3737 b7da6d6d     ...2...C77nYmm..
  409b14:	8c018d8d 64b1d5d5 d29c4e4e e049a9a9     .......dNN....I.
  409b24:	b4d86c6c faac5656 07f3f4f4 25cfeaea     ll..VV.........%
  409b34:	afca6565 8ef47a7a e947aeae 18100808     ee..zz....G.....
  409b44:	d56fbaba 88f07878 6f4a2525 725c2e2e     ..o.xx..%%Jo..\r
  409b54:	24381c1c f157a6a6 c773b4b4 5197c6c6     ..8$..W...s....Q
  409b64:	23cbe8e8 7ca1dddd 9ce87474 213e1f1f     ...#...|tt....>!
  409b74:	dd964b4b dc61bdbd 860d8b8b 850f8a8a     KK....a.........
  409b84:	90e07070 427c3e3e c471b5b5 aacc6666     pp..>>|B..q.ff..
  409b94:	d8904848 05060303 01f7f6f6 121c0e0e     HH..............
  409ba4:	a3c26161 5f6a3535 f9ae5757 d069b9b9     aa..55j_WW....i.
  409bb4:	91178686 5899c1c1 273a1d1d b9279e9e     .......X..:'..'.
  409bc4:	38d9e1e1 13ebf8f8 b32b9898 33221111     ...8......+..."3
  409bd4:	bbd26969 70a9d9d9 89078e8e a7339494     ii.....p......3.
  409be4:	b62d9b9b 223c1e1e 92158787 20c9e9e9     ..-...<"....... 
  409bf4:	4987cece ffaa5555 78502828 7aa5dfdf     ...IUU..((Px...z
  409c04:	8f038c8c f859a1a1 80098989 171a0d0d     ......Y.........
  409c14:	da65bfbf 31d7e6e6 c6844242 b8d06868     ..e....1BB..hh..
  409c24:	c3824141 b0299999 775a2d2d 111e0f0f     AA....).--Zw....
  409c34:	cb7bb0b0 fca85454 d66dbbbb 3a2c1616     ..{.TT....m...,:
  409c44:	63a5c663 7c84f87c 7799ee77 7b8df67b     c..c|..|w..w{..{
  409c54:	f20dfff2 6bbdd66b 6fb1de6f c55491c5     ....k..ko..o..T.
  409c64:	30506030 01030201 67a9ce67 2b7d562b     0`P0....g..g+V}+
  409c74:	fe19e7fe d762b5d7 abe64dab 769aec76     ......b..M..v..v
  409c84:	ca458fca 829d1f82 c94089c9 7d87fa7d     ..E.......@.}..}
  409c94:	fa15effa 59ebb259 47c98e47 f00bfbf0     ....Y..YG..G....
  409ca4:	adec41ad d467b3d4 a2fd5fa2 afea45af     .A....g.._...E..
  409cb4:	9cbf239c a4f753a4 7296e472 c05b9bc0     .#...S..r..r..[.
  409cc4:	b7c275b7 fd1ce1fd 93ae3d93 266a4c26     .u.......=..&Lj&
  409cd4:	365a6c36 3f417e3f f702f5f7 cc4f83cc     6lZ6?~A?......O.
  409ce4:	345c6834 a5f451a5 e534d1e5 f108f9f1     4h\4.Q....4.....
  409cf4:	7193e271 d873abd8 31536231 153f2a15     q..q..s.1bS1.*?.
  409d04:	040c0804 c75295c7 23654623 c35e9dc3     ......R.#Fe#..^.
  409d14:	18283018 96a13796 050f0a05 9ab52f9a     .0(..7......./..
  409d24:	07090e07 12362412 809b1b80 e23ddfe2     .....$6.......=.
  409d34:	eb26cdeb 27694e27 b2cd7fb2 759fea75     ..&.'Ni'....u..u
  409d44:	091b1209 839e1d83 2c74582c 1a2e341a     ........,Xt,.4..
  409d54:	1b2d361b 6eb2dc6e 5aeeb45a a0fb5ba0     .6-.n..nZ..Z.[..
  409d64:	52f6a452 3b4d763b d661b7d6 b3ce7db3     R..R;vM;..a..}..
  409d74:	297b5229 e33edde3 2f715e2f 84971384     )R{)..>./^q/....
  409d84:	53f5a653 d168b9d1 00000000 ed2cc1ed     S..S..h.......,.
  409d94:	20604020 fc1fe3fc b1c879b1 5bedb65b      @` .....y..[..[
  409da4:	6abed46a cb468dcb bed967be 394b7239     j..j..F..g..9rK9
  409db4:	4ade944a 4cd4984c 58e8b058 cf4a85cf     J..JL..LX..X..J.
  409dc4:	d06bbbd0 ef2ac5ef aae54faa fb16edfb     ..k...*..O......
  409dd4:	43c58643 4dd79a4d 33556633 85941185     C..CM..M3fU3....
  409de4:	45cf8a45 f910e9f9 02060402 7f81fe7f     E..E............
  409df4:	50f0a050 3c44783c 9fba259f a8e34ba8     P..P<xD<.%...K..
  409e04:	51f3a251 a3fe5da3 40c08040 8f8a058f     Q..Q.]..@..@....
  409e14:	92ad3f92 9dbc219d 38487038 f504f1f5     .?...!..8pH8....
  409e24:	bcdf63bc b6c177b6 da75afda 21634221     .c...w....u.!Bc!
  409e34:	10302010 ff1ae5ff f30efdf3 d26dbfd2     . 0...........m.
  409e44:	cd4c81cd 0c14180c 13352613 ec2fc3ec     ..L......&5.../.
  409e54:	5fe1be5f 97a23597 44cc8844 17392e17     _.._.5..D..D..9.
  409e64:	c45793c4 a7f255a7 7e82fc7e 3d477a3d     ..W..U..~..~=zG=
  409e74:	64acc864 5de7ba5d 192b3219 7395e673     d..d]..].2+.s..s
  409e84:	60a0c060 81981981 4fd19e4f dc7fa3dc     `..`....O..O....
  409e94:	22664422 2a7e542a 90ab3b90 88830b88     "Df"*T~*.;......
  409ea4:	46ca8c46 ee29c7ee b8d36bb8 143c2814     F..F..)..k...(<.
  409eb4:	de79a7de 5ee2bc5e 0b1d160b db76addb     ..y.^..^......v.
  409ec4:	e03bdbe0 32566432 3a4e743a 0a1e140a     ..;.2dV2:tN:....
  409ed4:	49db9249 060a0c06 246c4824 5ce4b85c     I..I....$Hl$\..\
  409ee4:	c25d9fc2 d36ebdd3 acef43ac 62a6c462     ..]...n..C..b..b
  409ef4:	91a83991 95a43195 e437d3e4 798bf279     .9...1....7.y..y
  409f04:	e732d5e7 c8438bc8 37596e37 6db7da6d     ..2...C.7nY7m..m
  409f14:	8d8c018d d564b1d5 4ed29c4e a9e049a9     ......d.N..N.I..
  409f24:	6cb4d86c 56faac56 f407f3f4 ea25cfea     l..lV..V......%.
  409f34:	65afca65 7a8ef47a aee947ae 08181008     e..ez..z.G......
  409f44:	bad56fba 7888f078 256f4a25 2e725c2e     .o..x..x%Jo%.\r.
  409f54:	1c24381c a6f157a6 b4c773b4 c65197c6     .8$..W...s....Q.
  409f64:	e823cbe8 dd7ca1dd 749ce874 1f213e1f     ..#...|.t..t.>!.
  409f74:	4bdd964b bddc61bd 8b860d8b 8a850f8a     K..K.a..........
  409f84:	7090e070 3e427c3e b5c471b5 66aacc66     p..p>|B>.q..f..f
  409f94:	48d89048 03050603 f601f7f6 0e121c0e     H..H............
  409fa4:	61a3c261 355f6a35 57f9ae57 b9d069b9     a..a5j_5W..W.i..
  409fb4:	86911786 c15899c1 1d273a1d 9eb9279e     ......X..:'..'..
  409fc4:	e138d9e1 f813ebf8 98b32b98 11332211     ..8......+..."3.
  409fd4:	69bbd269 d970a9d9 8e89078e 94a73394     i..i..p......3..
  409fe4:	9bb62d9b 1e223c1e 87921587 e920c9e9     .-...<"....... .
  409ff4:	ce4987ce 55ffaa55 28785028 df7aa5df     ..I.U..U(Px(..z.
  40a004:	8c8f038c a1f859a1 89800989 0d171a0d     .....Y..........
  40a014:	bfda65bf e631d7e6 42c68442 68b8d068     .e....1.B..Bh..h
  40a024:	41c38241 99b02999 2d775a2d 0f111e0f     A..A.)..-Zw-....
  40a034:	b0cb7bb0 54fca854 bbd66dbb 163a2c16     .{..T..T.m...,:.
  40a044:	6363a5c6 7c7c84f8 777799ee 7b7b8df6     ..cc..||..ww..{{
  40a054:	f2f20dff 6b6bbdd6 6f6fb1de c5c55491     ......kk..oo.T..
  40a064:	30305060 01010302 6767a9ce 2b2b7d56     `P00......ggV}++
  40a074:	fefe19e7 d7d762b5 ababe64d 76769aec     .....b..M.....vv
  40a084:	caca458f 82829d1f c9c94089 7d7d87fa     .E.......@....}}
  40a094:	fafa15ef 5959ebb2 4747c98e f0f00bfb     ......YY..GG....
  40a0a4:	adadec41 d4d467b3 a2a2fd5f afafea45     A....g.._...E...
  40a0b4:	9c9cbf23 a4a4f753 727296e4 c0c05b9b     #...S.....rr.[..
  40a0c4:	b7b7c275 fdfd1ce1 9393ae3d 26266a4c     u.......=...Lj&&
  40a0d4:	36365a6c 3f3f417e f7f702f5 cccc4f83     lZ66~A??.....O..
  40a0e4:	34345c68 a5a5f451 e5e534d1 f1f108f9     h\44Q....4......
  40a0f4:	717193e2 d8d873ab 31315362 15153f2a     ..qq.s..bS11*?..
  40a104:	04040c08 c7c75295 23236546 c3c35e9d     .....R..Fe##.^..
  40a114:	18182830 9696a137 05050f0a 9a9ab52f     0(..7......./...
  40a124:	0707090e 12123624 80809b1b e2e23ddf     ....$6.......=..
  40a134:	ebeb26cd 2727694e b2b2cd7f 75759fea     .&..Ni''......uu
  40a144:	09091b12 83839e1d 2c2c7458 1a1a2e34     ........Xt,,4...
  40a154:	1b1b2d36 6e6eb2dc 5a5aeeb4 a0a0fb5b     6-....nn..ZZ[...
  40a164:	5252f6a4 3b3b4d76 d6d661b7 b3b3ce7d     ..RRvM;;.a..}...
  40a174:	29297b52 e3e33edd 2f2f715e 84849713     R{)).>..^q//....
  40a184:	5353f5a6 d1d168b9 00000000 eded2cc1     ..SS.h.......,..
  40a194:	20206040 fcfc1fe3 b1b1c879 5b5bedb6     @`  ....y.....[[
  40a1a4:	6a6abed4 cbcb468d bebed967 39394b72     ..jj.F..g...rK99
  40a1b4:	4a4ade94 4c4cd498 5858e8b0 cfcf4a85     ..JJ..LL..XX.J..
  40a1c4:	d0d06bbb efef2ac5 aaaae54f fbfb16ed     .k...*..O.......
  40a1d4:	4343c586 4d4dd79a 33335566 85859411     ..CC..MMfU33....
  40a1e4:	4545cf8a f9f910e9 02020604 7f7f81fe     ..EE............
  40a1f4:	5050f0a0 3c3c4478 9f9fba25 a8a8e34b     ..PPxD<<%...K...
  40a204:	5151f3a2 a3a3fe5d 4040c080 8f8f8a05     ..QQ].....@@....
  40a214:	9292ad3f 9d9dbc21 38384870 f5f504f1     ?...!...pH88....
  40a224:	bcbcdf63 b6b6c177 dada75af 21216342     c...w....u..Bc!!
  40a234:	10103020 ffff1ae5 f3f30efd d2d26dbf      0...........m..
  40a244:	cdcd4c81 0c0c1418 13133526 ecec2fc3     .L......&5.../..
  40a254:	5f5fe1be 9797a235 4444cc88 1717392e     ..__5.....DD.9..
  40a264:	c4c45793 a7a7f255 7e7e82fc 3d3d477a     .W..U.....~~zG==
  40a274:	6464acc8 5d5de7ba 19192b32 737395e6     ..dd..]]2+....ss
  40a284:	6060a0c0 81819819 4f4fd19e dcdc7fa3     ..``......OO....
  40a294:	22226644 2a2a7e54 9090ab3b 8888830b     Df""T~**;.......
  40a2a4:	4646ca8c eeee29c7 b8b8d36b 14143c28     ..FF.)..k...(<..
  40a2b4:	dede79a7 5e5ee2bc 0b0b1d16 dbdb76ad     .y....^^.....v..
  40a2c4:	e0e03bdb 32325664 3a3a4e74 0a0a1e14     .;..dV22tN::....
  40a2d4:	4949db92 06060a0c 24246c48 5c5ce4b8     ..II....Hl$$..\\
  40a2e4:	c2c25d9f d3d36ebd acacef43 6262a6c4     .]...n..C.....bb
  40a2f4:	9191a839 9595a431 e4e437d3 79798bf2     9...1....7....yy
  40a304:	e7e732d5 c8c8438b 3737596e 6d6db7da     .2...C..nY77..mm
  40a314:	8d8d8c01 d5d564b1 4e4ed29c a9a9e049     .....d....NNI...
  40a324:	6c6cb4d8 5656faac f4f407f3 eaea25cf     ..ll..VV.....%..
  40a334:	6565afca 7a7a8ef4 aeaee947 08081810     ..ee..zzG.......
  40a344:	babad56f 787888f0 25256f4a 2e2e725c     o.....xxJo%%\r..
  40a354:	1c1c2438 a6a6f157 b4b4c773 c6c65197     8$..W...s....Q..
  40a364:	e8e823cb dddd7ca1 74749ce8 1f1f213e     .#...|....tt>!..
  40a374:	4b4bdd96 bdbddc61 8b8b860d 8a8a850f     ..KKa...........
  40a384:	707090e0 3e3e427c b5b5c471 6666aacc     ..pp|B>>q.....ff
  40a394:	4848d890 03030506 f6f601f7 0e0e121c     ..HH............
  40a3a4:	6161a3c2 35355f6a 5757f9ae b9b9d069     ..aaj_55..WWi...
  40a3b4:	86869117 c1c15899 1d1d273a 9e9eb927     .....X..:'..'...
  40a3c4:	e1e138d9 f8f813eb 9898b32b 11113322     .8......+..."3..
  40a3d4:	6969bbd2 d9d970a9 8e8e8907 9494a733     ..ii.p......3...
  40a3e4:	9b9bb62d 1e1e223c 87879215 e9e920c9     -...<"....... ..
  40a3f4:	cece4987 5555ffaa 28287850 dfdf7aa5     .I....UUPx((.z..
  40a404:	8c8c8f03 a1a1f859 89898009 0d0d171a     ....Y...........
  40a414:	bfbfda65 e6e631d7 4242c684 6868b8d0     e....1....BB..hh
  40a424:	4141c382 9999b029 2d2d775a 0f0f111e     ..AA)...Zw--....
  40a434:	b0b0cb7b 5454fca8 bbbbd66d 16163a2c     {.....TTm...,:..

Disassembly of section .text.Transform%41:

0040a444 <Transform>:
        rotlFixed((v),5); (w) = rotlFixed((w),30);
    #define R4(v,w,x,y,z,i) (z)+= f4((w),(x),(y)) + blk1((i)) + 0xCA62C1D6+ \
        rotlFixed((v),5); (w) = rotlFixed((w),30);

    static void Transform(Sha* sha, byte* data)
    {
  40a444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0040a448 <.LCFI0>:
  40a448:	b097      	sub	sp, #92	; 0x5c

0040a44a <.LCFI1>:
  40a44a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  40a44c:	68c2      	ldr	r2, [r0, #12]
  40a44e:	eb03 0e02 	add.w	lr, r3, r2
  40a452:	4bde      	ldr	r3, [pc, #888]	; (40a7cc <.LBE551+0xc>)
  40a454:	449e      	add	lr, r3
  40a456:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  40a458:	eb0e 62f2 	add.w	r2, lr, r2, ror #27
            t = e; e = d; d = c; c = b; b = a; a = t;
        }
    #else
        /* nearly 1 K bigger in code size but 25% faster  */
        /* 4 rounds of 20 operations each. Loop unrolled. */
        R0(a,b,c,d,e, 0); R0(e,a,b,c,d, 1); R0(d,e,a,b,c, 2); R0(c,d,e,a,b, 3);
  40a45c:	6d41      	ldr	r1, [r0, #84]	; 0x54

0040a45e <.LVL2>:
  40a45e:	6d84      	ldr	r4, [r0, #88]	; 0x58
  40a460:	ea81 0e04 	eor.w	lr, r1, r4
  40a464:	6d01      	ldr	r1, [r0, #80]	; 0x50
  40a466:	ea0e 0e01 	and.w	lr, lr, r1
  40a46a:	ea8e 0e04 	eor.w	lr, lr, r4
  40a46e:	4496      	add	lr, r2

0040a470 <.LBB487>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  40a470:	6d02      	ldr	r2, [r0, #80]	; 0x50
  40a472:	ea4f 02b2 	mov.w	r2, r2, ror #2

0040a476 <.LBE487>:
  40a476:	6d41      	ldr	r1, [r0, #84]	; 0x54
  40a478:	ea81 0c02 	eor.w	ip, r1, r2
  40a47c:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
  40a47e:	ea0c 0c01 	and.w	ip, ip, r1
  40a482:	6d41      	ldr	r1, [r0, #84]	; 0x54
  40a484:	ea8c 0c01 	eor.w	ip, ip, r1
  40a488:	4621      	mov	r1, r4
  40a48a:	6904      	ldr	r4, [r0, #16]
  40a48c:	4421      	add	r1, r4
  40a48e:	4419      	add	r1, r3
  40a490:	448c      	add	ip, r1
  40a492:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27

0040a496 <.LBB489>:
  40a496:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
  40a498:	ea4f 07b1 	mov.w	r7, r1, ror #2

0040a49c <.LBE489>:
  40a49c:	f8d0 8014 	ldr.w	r8, [r0, #20]

0040a4a0 <.LVL7>:
  40a4a0:	ea82 0a07 	eor.w	sl, r2, r7
  40a4a4:	ea0a 0a0e 	and.w	sl, sl, lr
  40a4a8:	ea8a 0a02 	eor.w	sl, sl, r2
  40a4ac:	6d41      	ldr	r1, [r0, #84]	; 0x54
  40a4ae:	4441      	add	r1, r8
  40a4b0:	4419      	add	r1, r3
  40a4b2:	448a      	add	sl, r1
  40a4b4:	eb0a 6afc 	add.w	sl, sl, ip, ror #27

0040a4b8 <.LBB491>:
  40a4b8:	ea4f 0ebe 	mov.w	lr, lr, ror #2

0040a4bc <.LBE491>:
  40a4bc:	f8d0 b018 	ldr.w	fp, [r0, #24]

0040a4c0 <.LVL10>:
  40a4c0:	ea87 090e 	eor.w	r9, r7, lr
  40a4c4:	ea09 090c 	and.w	r9, r9, ip
  40a4c8:	ea89 0907 	eor.w	r9, r9, r7
  40a4cc:	eb0b 0103 	add.w	r1, fp, r3
  40a4d0:	440a      	add	r2, r1
  40a4d2:	4491      	add	r9, r2
  40a4d4:	eb09 69fa 	add.w	r9, r9, sl, ror #27

0040a4d8 <.LBB493>:
  40a4d8:	ea4f 0cbc 	mov.w	ip, ip, ror #2

0040a4dc <.LBE493>:
        R0(b,c,d,e,a, 4); R0(a,b,c,d,e, 5); R0(e,a,b,c,d, 6); R0(d,e,a,b,c, 7);
  40a4dc:	ea8e 060c 	eor.w	r6, lr, ip
  40a4e0:	ea06 060a 	and.w	r6, r6, sl
  40a4e4:	ea86 060e 	eor.w	r6, r6, lr
  40a4e8:	69c2      	ldr	r2, [r0, #28]
  40a4ea:	441a      	add	r2, r3
  40a4ec:	4417      	add	r7, r2
  40a4ee:	443e      	add	r6, r7
  40a4f0:	eb06 66f9 	add.w	r6, r6, r9, ror #27

0040a4f4 <.LBB495>:
  40a4f4:	ea4f 0aba 	mov.w	sl, sl, ror #2

0040a4f8 <.LBE495>:
  40a4f8:	ea8c 050a 	eor.w	r5, ip, sl
  40a4fc:	ea05 0509 	and.w	r5, r5, r9
  40a500:	ea85 050c 	eor.w	r5, r5, ip
  40a504:	6a02      	ldr	r2, [r0, #32]
  40a506:	441a      	add	r2, r3
  40a508:	4496      	add	lr, r2
  40a50a:	4475      	add	r5, lr
  40a50c:	eb05 65f6 	add.w	r5, r5, r6, ror #27

0040a510 <.LBB497>:
  40a510:	ea4f 09b9 	mov.w	r9, r9, ror #2

0040a514 <.LBE497>:
  40a514:	ea8a 0409 	eor.w	r4, sl, r9
  40a518:	4034      	ands	r4, r6
  40a51a:	ea84 040a 	eor.w	r4, r4, sl
  40a51e:	6a42      	ldr	r2, [r0, #36]	; 0x24
  40a520:	441a      	add	r2, r3
  40a522:	4494      	add	ip, r2
  40a524:	4464      	add	r4, ip
  40a526:	eb04 64f5 	add.w	r4, r4, r5, ror #27

0040a52a <.LBB499>:
  40a52a:	ea4f 06b6 	mov.w	r6, r6, ror #2

0040a52e <.LBE499>:
  40a52e:	ea89 0106 	eor.w	r1, r9, r6
  40a532:	4029      	ands	r1, r5
  40a534:	ea81 0109 	eor.w	r1, r1, r9
  40a538:	6a82      	ldr	r2, [r0, #40]	; 0x28
  40a53a:	441a      	add	r2, r3
  40a53c:	4492      	add	sl, r2
  40a53e:	4451      	add	r1, sl
  40a540:	eb01 61f4 	add.w	r1, r1, r4, ror #27

0040a544 <.LBB501>:
  40a544:	ea4f 05b5 	mov.w	r5, r5, ror #2

0040a548 <.LBE501>:
        R0(c,d,e,a,b, 8); R0(b,c,d,e,a, 9); R0(a,b,c,d,e,10); R0(e,a,b,c,d,11);
  40a548:	ea86 0205 	eor.w	r2, r6, r5
  40a54c:	4022      	ands	r2, r4
  40a54e:	4072      	eors	r2, r6
  40a550:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  40a552:	441f      	add	r7, r3
  40a554:	44b9      	add	r9, r7
  40a556:	444a      	add	r2, r9
  40a558:	eb02 62f1 	add.w	r2, r2, r1, ror #27

0040a55c <.LBB503>:
  40a55c:	ea4f 04b4 	mov.w	r4, r4, ror #2

0040a560 <.LBE503>:
  40a560:	ea85 0704 	eor.w	r7, r5, r4
  40a564:	400f      	ands	r7, r1
  40a566:	ea87 0c05 	eor.w	ip, r7, r5
  40a56a:	6b07      	ldr	r7, [r0, #48]	; 0x30
  40a56c:	eb07 0e03 	add.w	lr, r7, r3
  40a570:	4476      	add	r6, lr
  40a572:	eb0c 0706 	add.w	r7, ip, r6
  40a576:	eb07 67f2 	add.w	r7, r7, r2, ror #27

0040a57a <.LBB505>:
  40a57a:	ea4f 01b1 	mov.w	r1, r1, ror #2

0040a57e <.LBE505>:
  40a57e:	ea84 0e01 	eor.w	lr, r4, r1
  40a582:	ea0e 0e02 	and.w	lr, lr, r2
  40a586:	ea8e 0e04 	eor.w	lr, lr, r4
  40a58a:	6b46      	ldr	r6, [r0, #52]	; 0x34
  40a58c:	441e      	add	r6, r3
  40a58e:	4435      	add	r5, r6
  40a590:	44ae      	add	lr, r5
  40a592:	eb0e 6ef7 	add.w	lr, lr, r7, ror #27

0040a596 <.LBB507>:
  40a596:	ea4f 02b2 	mov.w	r2, r2, ror #2

0040a59a <.LBE507>:
  40a59a:	ea81 0c02 	eor.w	ip, r1, r2
  40a59e:	ea0c 0c07 	and.w	ip, ip, r7
  40a5a2:	ea8c 0c01 	eor.w	ip, ip, r1
  40a5a6:	6b85      	ldr	r5, [r0, #56]	; 0x38
  40a5a8:	441d      	add	r5, r3
  40a5aa:	442c      	add	r4, r5
  40a5ac:	44a4      	add	ip, r4
  40a5ae:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27

0040a5b2 <.LBB509>:
  40a5b2:	ea4f 07b7 	mov.w	r7, r7, ror #2

0040a5b6 <.LBE509>:
        R0(d,e,a,b,c,12); R0(c,d,e,a,b,13); R0(b,c,d,e,a,14); R0(a,b,c,d,e,15);
  40a5b6:	ea82 0a07 	eor.w	sl, r2, r7
  40a5ba:	ea0a 0a0e 	and.w	sl, sl, lr
  40a5be:	ea8a 0a02 	eor.w	sl, sl, r2
  40a5c2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  40a5c4:	441c      	add	r4, r3
  40a5c6:	4421      	add	r1, r4
  40a5c8:	448a      	add	sl, r1
  40a5ca:	eb0a 6afc 	add.w	sl, sl, ip, ror #27

0040a5ce <.LBB511>:
  40a5ce:	ea4f 0ebe 	mov.w	lr, lr, ror #2

0040a5d2 <.LBE511>:
  40a5d2:	ea87 090e 	eor.w	r9, r7, lr
  40a5d6:	ea09 090c 	and.w	r9, r9, ip
  40a5da:	ea89 0907 	eor.w	r9, r9, r7
  40a5de:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40a5e0:	4419      	add	r1, r3
  40a5e2:	440a      	add	r2, r1
  40a5e4:	4491      	add	r9, r2
  40a5e6:	eb09 69fa 	add.w	r9, r9, sl, ror #27

0040a5ea <.LBB513>:
  40a5ea:	ea4f 0cbc 	mov.w	ip, ip, ror #2

0040a5ee <.LBE513>:
  40a5ee:	ea8e 060c 	eor.w	r6, lr, ip
  40a5f2:	ea06 060a 	and.w	r6, r6, sl
  40a5f6:	ea86 060e 	eor.w	r6, r6, lr
  40a5fa:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40a5fc:	441a      	add	r2, r3
  40a5fe:	4417      	add	r7, r2
  40a600:	443e      	add	r6, r7
  40a602:	eb06 66f9 	add.w	r6, r6, r9, ror #27

0040a606 <.LBB515>:
  40a606:	ea4f 0aba 	mov.w	sl, sl, ror #2

0040a60a <.LBE515>:
  40a60a:	ea8c 050a 	eor.w	r5, ip, sl
  40a60e:	ea05 0509 	and.w	r5, r5, r9
  40a612:	ea85 050c 	eor.w	r5, r5, ip
  40a616:	6c82      	ldr	r2, [r0, #72]	; 0x48
  40a618:	441a      	add	r2, r3
  40a61a:	4496      	add	lr, r2
  40a61c:	4475      	add	r5, lr
  40a61e:	eb05 65f6 	add.w	r5, r5, r6, ror #27

0040a622 <.LBB517>:
  40a622:	ea4f 09b9 	mov.w	r9, r9, ror #2

0040a626 <.LBE517>:

        R1(e,a,b,c,d,16); R1(d,e,a,b,c,17); R1(c,d,e,a,b,18); R1(b,c,d,e,a,19);
  40a626:	68c2      	ldr	r2, [r0, #12]
  40a628:	ea82 0e08 	eor.w	lr, r2, r8
  40a62c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  40a62e:	ea8e 0e02 	eor.w	lr, lr, r2
  40a632:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40a634:	ea8e 0e02 	eor.w	lr, lr, r2

0040a638 <.LBB519>:
  40a638:	ea4f 72fe 	mov.w	r2, lr, ror #31

0040a63c <.LBE519>:
  40a63c:	ea8a 0409 	eor.w	r4, sl, r9
  40a640:	4034      	ands	r4, r6
  40a642:	ea84 040a 	eor.w	r4, r4, sl
  40a646:	9201      	str	r2, [sp, #4]
  40a648:	441a      	add	r2, r3

0040a64a <.LVL39>:
  40a64a:	4494      	add	ip, r2
  40a64c:	4464      	add	r4, ip
  40a64e:	eb04 64f5 	add.w	r4, r4, r5, ror #27

0040a652 <.LBB521>:
  40a652:	ea4f 06b6 	mov.w	r6, r6, ror #2

0040a656 <.LBE521>:
  40a656:	6901      	ldr	r1, [r0, #16]
  40a658:	ea81 020b 	eor.w	r2, r1, fp
  40a65c:	6b01      	ldr	r1, [r0, #48]	; 0x30
  40a65e:	404a      	eors	r2, r1
  40a660:	6c41      	ldr	r1, [r0, #68]	; 0x44
  40a662:	404a      	eors	r2, r1

0040a664 <.LBB523>:
  40a664:	ea4f 71f2 	mov.w	r1, r2, ror #31
  40a668:	460f      	mov	r7, r1

0040a66a <.LBE523>:
  40a66a:	ea89 0106 	eor.w	r1, r9, r6

0040a66e <.LVL44>:
  40a66e:	4029      	ands	r1, r5
  40a670:	ea81 0109 	eor.w	r1, r1, r9
  40a674:	9707      	str	r7, [sp, #28]
  40a676:	18fa      	adds	r2, r7, r3
  40a678:	4492      	add	sl, r2
  40a67a:	4451      	add	r1, sl
  40a67c:	eb01 61f4 	add.w	r1, r1, r4, ror #27

0040a680 <.LBB525>:
  40a680:	ea4f 05b5 	mov.w	r5, r5, ror #2

0040a684 <.LBE525>:
  40a684:	69c7      	ldr	r7, [r0, #28]

0040a686 <.LVL47>:
  40a686:	46be      	mov	lr, r7
  40a688:	ea88 0207 	eor.w	r2, r8, r7
  40a68c:	6b47      	ldr	r7, [r0, #52]	; 0x34
  40a68e:	407a      	eors	r2, r7
  40a690:	6c87      	ldr	r7, [r0, #72]	; 0x48
  40a692:	407a      	eors	r2, r7

0040a694 <.LBB527>:
  40a694:	ea4f 77f2 	mov.w	r7, r2, ror #31

0040a698 <.LBE527>:
  40a698:	ea86 0205 	eor.w	r2, r6, r5
  40a69c:	4022      	ands	r2, r4
  40a69e:	4072      	eors	r2, r6
  40a6a0:	9703      	str	r7, [sp, #12]
  40a6a2:	441f      	add	r7, r3

0040a6a4 <.LVL50>:
  40a6a4:	44b9      	add	r9, r7
  40a6a6:	444a      	add	r2, r9
  40a6a8:	eb02 62f1 	add.w	r2, r2, r1, ror #27

0040a6ac <.LBB529>:
  40a6ac:	ea4f 09b4 	mov.w	r9, r4, ror #2

0040a6b0 <.LBE529>:
  40a6b0:	6a04      	ldr	r4, [r0, #32]
  40a6b2:	ea8b 0704 	eor.w	r7, fp, r4
  40a6b6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  40a6b8:	4067      	eors	r7, r4
  40a6ba:	9c01      	ldr	r4, [sp, #4]
  40a6bc:	4067      	eors	r7, r4

0040a6be <.LBB531>:
  40a6be:	ea4f 74f7 	mov.w	r4, r7, ror #31

0040a6c2 <.LBE531>:
  40a6c2:	ea85 0709 	eor.w	r7, r5, r9
  40a6c6:	400f      	ands	r7, r1
  40a6c8:	406f      	eors	r7, r5
  40a6ca:	9404      	str	r4, [sp, #16]
  40a6cc:	4423      	add	r3, r4
  40a6ce:	4433      	add	r3, r6
  40a6d0:	441f      	add	r7, r3
  40a6d2:	eb07 67f2 	add.w	r7, r7, r2, ror #27

0040a6d6 <.LBB533>:
  40a6d6:	ea4f 01b1 	mov.w	r1, r1, ror #2

0040a6da <.LBE533>:

        R2(a,b,c,d,e,20); R2(e,a,b,c,d,21); R2(d,e,a,b,c,22); R2(c,d,e,a,b,23);
  40a6da:	6a46      	ldr	r6, [r0, #36]	; 0x24
  40a6dc:	ea8e 0606 	eor.w	r6, lr, r6
  40a6e0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  40a6e2:	405e      	eors	r6, r3
  40a6e4:	9b07      	ldr	r3, [sp, #28]
  40a6e6:	405e      	eors	r6, r3

0040a6e8 <.LBB535>:
  40a6e8:	ea4f 73f6 	mov.w	r3, r6, ror #31

0040a6ec <.LBE535>:
  40a6ec:	ea89 0801 	eor.w	r8, r9, r1
  40a6f0:	ea88 0802 	eor.w	r8, r8, r2
  40a6f4:	9302      	str	r3, [sp, #8]
  40a6f6:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 40a7d0 <.LBE551+0x10>
  40a6fa:	449e      	add	lr, r3
  40a6fc:	4475      	add	r5, lr
  40a6fe:	44a8      	add	r8, r5
  40a700:	eb08 68f7 	add.w	r8, r8, r7, ror #27

0040a704 <.LBB537>:
  40a704:	ea4f 02b2 	mov.w	r2, r2, ror #2

0040a708 <.LBE537>:
  40a708:	6a05      	ldr	r5, [r0, #32]
  40a70a:	6a86      	ldr	r6, [r0, #40]	; 0x28
  40a70c:	4075      	eors	r5, r6
  40a70e:	6c06      	ldr	r6, [r0, #64]	; 0x40
  40a710:	4075      	eors	r5, r6
  40a712:	9e03      	ldr	r6, [sp, #12]
  40a714:	4075      	eors	r5, r6

0040a716 <.LBB539>:
  40a716:	ea4f 73f5 	mov.w	r3, r5, ror #31

0040a71a <.LBE539>:
  40a71a:	ea81 0c02 	eor.w	ip, r1, r2
  40a71e:	ea8c 0c07 	eor.w	ip, ip, r7
  40a722:	9303      	str	r3, [sp, #12]

0040a724 <.LVL63>:
  40a724:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 40a7d0 <.LBE551+0x10>
  40a728:	449e      	add	lr, r3
  40a72a:	eb09 040e 	add.w	r4, r9, lr

0040a72e <.LVL64>:
  40a72e:	44a4      	add	ip, r4
  40a730:	eb0c 6cf8 	add.w	ip, ip, r8, ror #27

0040a734 <.LBB541>:
  40a734:	ea4f 07b7 	mov.w	r7, r7, ror #2

0040a738 <.LBE541>:
  40a738:	6a45      	ldr	r5, [r0, #36]	; 0x24
  40a73a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

0040a73c <.LVL67>:
  40a73c:	ea85 0403 	eor.w	r4, r5, r3
  40a740:	6c45      	ldr	r5, [r0, #68]	; 0x44
  40a742:	406c      	eors	r4, r5
  40a744:	9d04      	ldr	r5, [sp, #16]
  40a746:	406c      	eors	r4, r5

0040a748 <.LBB543>:
  40a748:	ea4f 73f4 	mov.w	r3, r4, ror #31

0040a74c <.LBE543>:
  40a74c:	ea82 0e07 	eor.w	lr, r2, r7
  40a750:	ea8e 0e08 	eor.w	lr, lr, r8
  40a754:	9304      	str	r3, [sp, #16]

0040a756 <.LVL70>:
  40a756:	f103 49dd 	add.w	r9, r3, #1853882368	; 0x6e800000
  40a75a:	f509 09b3 	add.w	r9, r9, #5865472	; 0x598000
  40a75e:	f509 49d7 	add.w	r9, r9, #27520	; 0x6b80
  40a762:	f109 0921 	add.w	r9, r9, #33	; 0x21
  40a766:	4449      	add	r1, r9
  40a768:	448e      	add	lr, r1
  40a76a:	eb0e 6efc 	add.w	lr, lr, ip, ror #27

0040a76e <.LBB545>:
  40a76e:	ea4f 08b8 	mov.w	r8, r8, ror #2

0040a772 <.LBE545>:
  40a772:	6a81      	ldr	r1, [r0, #40]	; 0x28
  40a774:	4689      	mov	r9, r1
  40a776:	6b01      	ldr	r1, [r0, #48]	; 0x30
  40a778:	ea89 0101 	eor.w	r1, r9, r1
  40a77c:	6c84      	ldr	r4, [r0, #72]	; 0x48
  40a77e:	4061      	eors	r1, r4
  40a780:	9c02      	ldr	r4, [sp, #8]
  40a782:	4061      	eors	r1, r4

0040a784 <.LBB547>:
  40a784:	ea4f 73f1 	mov.w	r3, r1, ror #31

0040a788 <.LBE547>:
  40a788:	ea87 0b08 	eor.w	fp, r7, r8
  40a78c:	ea8b 0b0c 	eor.w	fp, fp, ip
  40a790:	9305      	str	r3, [sp, #20]
  40a792:	f103 49dd 	add.w	r9, r3, #1853882368	; 0x6e800000
  40a796:	f509 09b3 	add.w	r9, r9, #5865472	; 0x598000
  40a79a:	f509 49d7 	add.w	r9, r9, #27520	; 0x6b80
  40a79e:	f109 0921 	add.w	r9, r9, #33	; 0x21
  40a7a2:	444a      	add	r2, r9
  40a7a4:	4493      	add	fp, r2
  40a7a6:	eb0b 6bfe 	add.w	fp, fp, lr, ror #27

0040a7aa <.LBB549>:
  40a7aa:	ea4f 0cbc 	mov.w	ip, ip, ror #2

0040a7ae <.LBE549>:
        R2(b,c,d,e,a,24); R2(a,b,c,d,e,25); R2(e,a,b,c,d,26); R2(d,e,a,b,c,27);
  40a7ae:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  40a7b0:	6b42      	ldr	r2, [r0, #52]	; 0x34
  40a7b2:	404a      	eors	r2, r1
  40a7b4:	9b01      	ldr	r3, [sp, #4]

0040a7b6 <.LVL77>:
  40a7b6:	405a      	eors	r2, r3
  40a7b8:	9903      	ldr	r1, [sp, #12]
  40a7ba:	404a      	eors	r2, r1

0040a7bc <.LBB551>:
  40a7bc:	ea4f 72f2 	mov.w	r2, r2, ror #31

0040a7c0 <.LBE551>:
  40a7c0:	ea88 0a0c 	eor.w	sl, r8, ip
  40a7c4:	ea8a 0a0e 	eor.w	sl, sl, lr
  40a7c8:	e004      	b.n	40a7d4 <.LBE551+0x14>
  40a7ca:	bf00      	nop
  40a7cc:	5a827999 	.word	0x5a827999
  40a7d0:	6ed9eba1 	.word	0x6ed9eba1
  40a7d4:	9206      	str	r2, [sp, #24]
  40a7d6:	f8df 96b8 	ldr.w	r9, [pc, #1720]	; 40ae90 <.LBE673+0x14>
  40a7da:	4491      	add	r9, r2
  40a7dc:	444f      	add	r7, r9
  40a7de:	44ba      	add	sl, r7
  40a7e0:	eb0a 6afb 	add.w	sl, sl, fp, ror #27

0040a7e4 <.LBB553>:
  40a7e4:	ea4f 0ebe 	mov.w	lr, lr, ror #2

0040a7e8 <.LBE553>:
  40a7e8:	6b01      	ldr	r1, [r0, #48]	; 0x30
  40a7ea:	6b84      	ldr	r4, [r0, #56]	; 0x38
  40a7ec:	ea81 0704 	eor.w	r7, r1, r4
  40a7f0:	9a07      	ldr	r2, [sp, #28]
  40a7f2:	4057      	eors	r7, r2
  40a7f4:	9c04      	ldr	r4, [sp, #16]
  40a7f6:	4067      	eors	r7, r4

0040a7f8 <.LBB555>:
  40a7f8:	ea4f 77f7 	mov.w	r7, r7, ror #31

0040a7fc <.LVL83>:
  40a7fc:	463c      	mov	r4, r7

0040a7fe <.LBE555>:
  40a7fe:	ea8c 090e 	eor.w	r9, ip, lr
  40a802:	ea89 090b 	eor.w	r9, r9, fp
  40a806:	f107 47dd 	add.w	r7, r7, #1853882368	; 0x6e800000
  40a80a:	f507 07b3 	add.w	r7, r7, #5865472	; 0x598000
  40a80e:	f507 47d7 	add.w	r7, r7, #27520	; 0x6b80
  40a812:	3721      	adds	r7, #33	; 0x21
  40a814:	44b8      	add	r8, r7
  40a816:	44c1      	add	r9, r8
  40a818:	eb09 69fa 	add.w	r9, r9, sl, ror #27

0040a81c <.LBB557>:
  40a81c:	ea4f 0bbb 	mov.w	fp, fp, ror #2

0040a820 <.LBE557>:
  40a820:	6b41      	ldr	r1, [r0, #52]	; 0x34
  40a822:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
  40a824:	404f      	eors	r7, r1
  40a826:	4077      	eors	r7, r6
  40a828:	9905      	ldr	r1, [sp, #20]
  40a82a:	404f      	eors	r7, r1

0040a82c <.LBB559>:
  40a82c:	ea4f 77f7 	mov.w	r7, r7, ror #31

0040a830 <.LBE559>:
  40a830:	ea8e 080b 	eor.w	r8, lr, fp
  40a834:	ea88 080a 	eor.w	r8, r8, sl
  40a838:	9707      	str	r7, [sp, #28]

0040a83a <.LVL89>:
  40a83a:	f107 47dd 	add.w	r7, r7, #1853882368	; 0x6e800000
  40a83e:	f507 07b3 	add.w	r7, r7, #5865472	; 0x598000
  40a842:	f507 47d7 	add.w	r7, r7, #27520	; 0x6b80
  40a846:	3721      	adds	r7, #33	; 0x21
  40a848:	44bc      	add	ip, r7
  40a84a:	44e0      	add	r8, ip
  40a84c:	eb08 68f9 	add.w	r8, r8, r9, ror #27

0040a850 <.LBB561>:
  40a850:	ea4f 0aba 	mov.w	sl, sl, ror #2

0040a854 <.LBE561>:
  40a854:	6b81      	ldr	r1, [r0, #56]	; 0x38
  40a856:	468c      	mov	ip, r1
  40a858:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40a85a:	ea8c 0701 	eor.w	r7, ip, r1
  40a85e:	406f      	eors	r7, r5
  40a860:	9906      	ldr	r1, [sp, #24]
  40a862:	404f      	eors	r7, r1

0040a864 <.LBB563>:
  40a864:	ea4f 77f7 	mov.w	r7, r7, ror #31

0040a868 <.LVL93>:
  40a868:	4639      	mov	r1, r7

0040a86a <.LBE563>:
  40a86a:	ea8b 070a 	eor.w	r7, fp, sl
  40a86e:	ea87 0709 	eor.w	r7, r7, r9
  40a872:	9108      	str	r1, [sp, #32]
  40a874:	f8df c618 	ldr.w	ip, [pc, #1560]	; 40ae90 <.LBE673+0x14>
  40a878:	448c      	add	ip, r1
  40a87a:	44e6      	add	lr, ip
  40a87c:	4477      	add	r7, lr
  40a87e:	eb07 67f8 	add.w	r7, r7, r8, ror #27

0040a882 <.LBB565>:
  40a882:	ea4f 09b9 	mov.w	r9, r9, ror #2

0040a886 <.LBE565>:
        R2(c,d,e,a,b,28); R2(b,c,d,e,a,29); R2(a,b,c,d,e,30); R2(e,a,b,c,d,31);
  40a886:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  40a888:	468e      	mov	lr, r1
  40a88a:	6c41      	ldr	r1, [r0, #68]	; 0x44
  40a88c:	ea8e 0e01 	eor.w	lr, lr, r1
  40a890:	9902      	ldr	r1, [sp, #8]
  40a892:	ea8e 0e01 	eor.w	lr, lr, r1
  40a896:	940d      	str	r4, [sp, #52]	; 0x34
  40a898:	ea8e 0e04 	eor.w	lr, lr, r4

0040a89c <.LBB567>:
  40a89c:	ea4f 7efe 	mov.w	lr, lr, ror #31

0040a8a0 <.LVL98>:
  40a8a0:	4671      	mov	r1, lr

0040a8a2 <.LBE567>:
  40a8a2:	ea8a 0e09 	eor.w	lr, sl, r9
  40a8a6:	ea8e 0e08 	eor.w	lr, lr, r8
  40a8aa:	9109      	str	r1, [sp, #36]	; 0x24
  40a8ac:	f101 4cdd 	add.w	ip, r1, #1853882368	; 0x6e800000
  40a8b0:	f50c 0cb3 	add.w	ip, ip, #5865472	; 0x598000
  40a8b4:	f50c 4cd7 	add.w	ip, ip, #27520	; 0x6b80
  40a8b8:	f10c 0c21 	add.w	ip, ip, #33	; 0x21
  40a8bc:	44e3      	add	fp, ip
  40a8be:	44f3      	add	fp, lr
  40a8c0:	eb0b 6bf7 	add.w	fp, fp, r7, ror #27

0040a8c4 <.LBB569>:
  40a8c4:	ea4f 08b8 	mov.w	r8, r8, ror #2

0040a8c8 <.LBE569>:
  40a8c8:	6c04      	ldr	r4, [r0, #64]	; 0x40
  40a8ca:	46a6      	mov	lr, r4
  40a8cc:	6c84      	ldr	r4, [r0, #72]	; 0x48
  40a8ce:	ea8e 0e04 	eor.w	lr, lr, r4
  40a8d2:	9c03      	ldr	r4, [sp, #12]
  40a8d4:	ea8e 0e04 	eor.w	lr, lr, r4
  40a8d8:	9c07      	ldr	r4, [sp, #28]
  40a8da:	ea8e 0e04 	eor.w	lr, lr, r4

0040a8de <.LBB571>:
  40a8de:	ea4f 7efe 	mov.w	lr, lr, ror #31

0040a8e2 <.LVL103>:
  40a8e2:	4674      	mov	r4, lr

0040a8e4 <.LBE571>:
  40a8e4:	ea89 0e08 	eor.w	lr, r9, r8
  40a8e8:	ea8e 0e07 	eor.w	lr, lr, r7
  40a8ec:	940a      	str	r4, [sp, #40]	; 0x28
  40a8ee:	f104 4cdd 	add.w	ip, r4, #1853882368	; 0x6e800000
  40a8f2:	f50c 0cb3 	add.w	ip, ip, #5865472	; 0x598000
  40a8f6:	f50c 4cd7 	add.w	ip, ip, #27520	; 0x6b80
  40a8fa:	f10c 0c21 	add.w	ip, ip, #33	; 0x21
  40a8fe:	44e2      	add	sl, ip
  40a900:	44f2      	add	sl, lr
  40a902:	eb0a 6afb 	add.w	sl, sl, fp, ror #27

0040a906 <.LBB573>:
  40a906:	ea4f 07b7 	mov.w	r7, r7, ror #2

0040a90a <.LBE573>:
  40a90a:	6c41      	ldr	r1, [r0, #68]	; 0x44
  40a90c:	ea81 0e03 	eor.w	lr, r1, r3
  40a910:	9c04      	ldr	r4, [sp, #16]
  40a912:	ea8e 0e04 	eor.w	lr, lr, r4
  40a916:	9908      	ldr	r1, [sp, #32]
  40a918:	ea8e 0e01 	eor.w	lr, lr, r1

0040a91c <.LBB575>:
  40a91c:	ea4f 7efe 	mov.w	lr, lr, ror #31

0040a920 <.LVL108>:
  40a920:	4673      	mov	r3, lr

0040a922 <.LBE575>:
  40a922:	ea88 0e07 	eor.w	lr, r8, r7
  40a926:	ea8e 0e0b 	eor.w	lr, lr, fp
  40a92a:	930e      	str	r3, [sp, #56]	; 0x38
  40a92c:	f103 4cdd 	add.w	ip, r3, #1853882368	; 0x6e800000
  40a930:	f50c 0cb3 	add.w	ip, ip, #5865472	; 0x598000
  40a934:	f50c 4cd7 	add.w	ip, ip, #27520	; 0x6b80
  40a938:	f10c 0c21 	add.w	ip, ip, #33	; 0x21
  40a93c:	44e1      	add	r9, ip
  40a93e:	44f1      	add	r9, lr
  40a940:	eb09 69fa 	add.w	r9, r9, sl, ror #27

0040a944 <.LBB577>:
  40a944:	ea4f 0bbb 	mov.w	fp, fp, ror #2

0040a948 <.LBE577>:
  40a948:	6c81      	ldr	r1, [r0, #72]	; 0x48
  40a94a:	4614      	mov	r4, r2
  40a94c:	ea81 0e02 	eor.w	lr, r1, r2
  40a950:	9a05      	ldr	r2, [sp, #20]

0040a952 <.LVL112>:
  40a952:	ea8e 0e02 	eor.w	lr, lr, r2
  40a956:	9909      	ldr	r1, [sp, #36]	; 0x24
  40a958:	ea8e 0e01 	eor.w	lr, lr, r1

0040a95c <.LBB579>:
  40a95c:	ea4f 7efe 	mov.w	lr, lr, ror #31

0040a960 <.LBE579>:
  40a960:	ea87 0c0b 	eor.w	ip, r7, fp
  40a964:	ea8c 0c0a 	eor.w	ip, ip, sl
  40a968:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
  40a96c:	f10e 4edd 	add.w	lr, lr, #1853882368	; 0x6e800000
  40a970:	f50e 0eb3 	add.w	lr, lr, #5865472	; 0x598000
  40a974:	f50e 4ed7 	add.w	lr, lr, #27520	; 0x6b80
  40a978:	f10e 0e21 	add.w	lr, lr, #33	; 0x21
  40a97c:	44f0      	add	r8, lr
  40a97e:	44c4      	add	ip, r8
  40a980:	eb0c 6cf9 	add.w	ip, ip, r9, ror #27

0040a984 <.LBB581>:
  40a984:	ea4f 0aba 	mov.w	sl, sl, ror #2

0040a988 <.LBE581>:
        R2(d,e,a,b,c,32); R2(c,d,e,a,b,33); R2(b,c,d,e,a,34); R2(a,b,c,d,e,35);
  40a988:	9b01      	ldr	r3, [sp, #4]
  40a98a:	469e      	mov	lr, r3
  40a98c:	4633      	mov	r3, r6
  40a98e:	ea8e 0e06 	eor.w	lr, lr, r6
  40a992:	9a06      	ldr	r2, [sp, #24]
  40a994:	ea8e 0e02 	eor.w	lr, lr, r2
  40a998:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a99a:	ea8e 0e01 	eor.w	lr, lr, r1

0040a99e <.LBB583>:
  40a99e:	ea4f 76fe 	mov.w	r6, lr, ror #31

0040a9a2 <.LBE583>:
  40a9a2:	ea8b 080a 	eor.w	r8, fp, sl
  40a9a6:	ea88 0809 	eor.w	r8, r8, r9
  40a9aa:	960b      	str	r6, [sp, #44]	; 0x2c
  40a9ac:	f8df e4e0 	ldr.w	lr, [pc, #1248]	; 40ae90 <.LBE673+0x14>
  40a9b0:	44b6      	add	lr, r6
  40a9b2:	4477      	add	r7, lr
  40a9b4:	44b8      	add	r8, r7
  40a9b6:	eb08 68fc 	add.w	r8, r8, ip, ror #27

0040a9ba <.LBB585>:
  40a9ba:	ea4f 09b9 	mov.w	r9, r9, ror #2

0040a9be <.LBE585>:
  40a9be:	ea84 0705 	eor.w	r7, r4, r5
  40a9c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40a9c4:	4057      	eors	r7, r2
  40a9c6:	9e0e      	ldr	r6, [sp, #56]	; 0x38

0040a9c8 <.LVL121>:
  40a9c8:	4077      	eors	r7, r6

0040a9ca <.LBB587>:
  40a9ca:	ea4f 77f7 	mov.w	r7, r7, ror #31

0040a9ce <.LBE587>:
  40a9ce:	ea8a 0e09 	eor.w	lr, sl, r9
  40a9d2:	ea8e 0e0c 	eor.w	lr, lr, ip
  40a9d6:	970c      	str	r7, [sp, #48]	; 0x30
  40a9d8:	f107 47dd 	add.w	r7, r7, #1853882368	; 0x6e800000

0040a9dc <.LVL124>:
  40a9dc:	f507 07b3 	add.w	r7, r7, #5865472	; 0x598000
  40a9e0:	f507 47d7 	add.w	r7, r7, #27520	; 0x6b80
  40a9e4:	3721      	adds	r7, #33	; 0x21
  40a9e6:	44bb      	add	fp, r7
  40a9e8:	44de      	add	lr, fp
  40a9ea:	eb0e 6ef8 	add.w	lr, lr, r8, ror #27

0040a9ee <.LBB589>:
  40a9ee:	ea4f 0cbc 	mov.w	ip, ip, ror #2

0040a9f2 <.LBE589>:
  40a9f2:	9f02      	ldr	r7, [sp, #8]
  40a9f4:	405f      	eors	r7, r3
  40a9f6:	9c07      	ldr	r4, [sp, #28]
  40a9f8:	4067      	eors	r7, r4
  40a9fa:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40a9fc:	4067      	eors	r7, r4

0040a9fe <.LBB591>:
  40a9fe:	ea4f 73f7 	mov.w	r3, r7, ror #31

0040aa02 <.LVL128>:
  40aa02:	461c      	mov	r4, r3

0040aa04 <.LBE591>:
  40aa04:	ea89 070c 	eor.w	r7, r9, ip
  40aa08:	ea87 0708 	eor.w	r7, r7, r8
  40aa0c:	f103 4bdd 	add.w	fp, r3, #1853882368	; 0x6e800000
  40aa10:	f50b 0bb3 	add.w	fp, fp, #5865472	; 0x598000
  40aa14:	f50b 4bd7 	add.w	fp, fp, #27520	; 0x6b80
  40aa18:	f10b 0b21 	add.w	fp, fp, #33	; 0x21
  40aa1c:	44da      	add	sl, fp
  40aa1e:	4457      	add	r7, sl
  40aa20:	eb07 67fe 	add.w	r7, r7, lr, ror #27

0040aa24 <.LBB593>:
  40aa24:	ea4f 08b8 	mov.w	r8, r8, ror #2

0040aa28 <.LBE593>:
  40aa28:	9e03      	ldr	r6, [sp, #12]
  40aa2a:	ea85 0a06 	eor.w	sl, r5, r6
  40aa2e:	9b08      	ldr	r3, [sp, #32]

0040aa30 <.LVL132>:
  40aa30:	ea8a 0a03 	eor.w	sl, sl, r3
  40aa34:	9d0b      	ldr	r5, [sp, #44]	; 0x2c

0040aa36 <.LVL133>:
  40aa36:	ea8a 0a05 	eor.w	sl, sl, r5

0040aa3a <.LBB595>:
  40aa3a:	ea4f 7afa 	mov.w	sl, sl, ror #31

0040aa3e <.LBE595>:
  40aa3e:	ea8c 0b08 	eor.w	fp, ip, r8
  40aa42:	ea8b 0b0e 	eor.w	fp, fp, lr
  40aa46:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  40aa4a:	f10a 4add 	add.w	sl, sl, #1853882368	; 0x6e800000

0040aa4e <.LVL136>:
  40aa4e:	f50a 0ab3 	add.w	sl, sl, #5865472	; 0x598000
  40aa52:	f50a 4ad7 	add.w	sl, sl, #27520	; 0x6b80
  40aa56:	f10a 0a21 	add.w	sl, sl, #33	; 0x21
  40aa5a:	44d1      	add	r9, sl
  40aa5c:	44cb      	add	fp, r9
  40aa5e:	eb0b 6bf7 	add.w	fp, fp, r7, ror #27

0040aa62 <.LBB597>:
  40aa62:	ea4f 0ebe 	mov.w	lr, lr, ror #2

0040aa66 <.LBE597>:
        R2(e,a,b,c,d,36); R2(d,e,a,b,c,37); R2(c,d,e,a,b,38); R2(b,c,d,e,a,39);
  40aa66:	9e02      	ldr	r6, [sp, #8]
  40aa68:	9d04      	ldr	r5, [sp, #16]
  40aa6a:	406e      	eors	r6, r5
  40aa6c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40aa6e:	406e      	eors	r6, r5
  40aa70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40aa72:	406e      	eors	r6, r5

0040aa74 <.LBB599>:
  40aa74:	ea4f 73f6 	mov.w	r3, r6, ror #31

0040aa78 <.LBE599>:
  40aa78:	ea88 060e 	eor.w	r6, r8, lr
  40aa7c:	407e      	eors	r6, r7
  40aa7e:	9302      	str	r3, [sp, #8]
  40aa80:	f103 49dd 	add.w	r9, r3, #1853882368	; 0x6e800000
  40aa84:	f509 09b3 	add.w	r9, r9, #5865472	; 0x598000
  40aa88:	f509 49d7 	add.w	r9, r9, #27520	; 0x6b80
  40aa8c:	f109 0921 	add.w	r9, r9, #33	; 0x21
  40aa90:	44cc      	add	ip, r9
  40aa92:	4466      	add	r6, ip
  40aa94:	eb06 66fb 	add.w	r6, r6, fp, ror #27

0040aa98 <.LBB601>:
  40aa98:	ea4f 07b7 	mov.w	r7, r7, ror #2

0040aa9c <.LBE601>:
  40aa9c:	9d03      	ldr	r5, [sp, #12]
  40aa9e:	9b05      	ldr	r3, [sp, #20]

0040aaa0 <.LVL143>:
  40aaa0:	405d      	eors	r5, r3
  40aaa2:	404d      	eors	r5, r1
  40aaa4:	9410      	str	r4, [sp, #64]	; 0x40
  40aaa6:	4065      	eors	r5, r4

0040aaa8 <.LBB603>:
  40aaa8:	ea4f 71f5 	mov.w	r1, r5, ror #31

0040aaac <.LBE603>:
  40aaac:	ea8e 0507 	eor.w	r5, lr, r7
  40aab0:	ea85 050b 	eor.w	r5, r5, fp
  40aab4:	9103      	str	r1, [sp, #12]
  40aab6:	f101 4cdd 	add.w	ip, r1, #1853882368	; 0x6e800000
  40aaba:	f50c 0cb3 	add.w	ip, ip, #5865472	; 0x598000
  40aabe:	f50c 4cd7 	add.w	ip, ip, #27520	; 0x6b80
  40aac2:	f10c 0c21 	add.w	ip, ip, #33	; 0x21
  40aac6:	44e0      	add	r8, ip
  40aac8:	44a8      	add	r8, r5
  40aaca:	eb08 65f6 	add.w	r5, r8, r6, ror #27

0040aace <.LBB605>:
  40aace:	ea4f 0bbb 	mov.w	fp, fp, ror #2

0040aad2 <.LBE605>:
  40aad2:	9c04      	ldr	r4, [sp, #16]

0040aad4 <.LVL148>:
  40aad4:	9b06      	ldr	r3, [sp, #24]
  40aad6:	405c      	eors	r4, r3
  40aad8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40aada:	405c      	eors	r4, r3
  40aadc:	9911      	ldr	r1, [sp, #68]	; 0x44

0040aade <.LVL149>:
  40aade:	404c      	eors	r4, r1

0040aae0 <.LBB607>:
  40aae0:	ea4f 74f4 	mov.w	r4, r4, ror #31

0040aae4 <.LVL151>:
  40aae4:	4621      	mov	r1, r4

0040aae6 <.LBE607>:
  40aae6:	ea87 040b 	eor.w	r4, r7, fp
  40aaea:	4074      	eors	r4, r6
  40aaec:	9112      	str	r1, [sp, #72]	; 0x48
  40aaee:	f101 4cdd 	add.w	ip, r1, #1853882368	; 0x6e800000
  40aaf2:	f50c 0cb3 	add.w	ip, ip, #5865472	; 0x598000
  40aaf6:	f50c 4cd7 	add.w	ip, ip, #27520	; 0x6b80
  40aafa:	f10c 0c21 	add.w	ip, ip, #33	; 0x21
  40aafe:	44e6      	add	lr, ip
  40ab00:	44a6      	add	lr, r4
  40ab02:	eb0e 64f5 	add.w	r4, lr, r5, ror #27

0040ab06 <.LBB609>:
  40ab06:	ea4f 06b6 	mov.w	r6, r6, ror #2

0040ab0a <.LBE609>:
  40ab0a:	9905      	ldr	r1, [sp, #20]

0040ab0c <.LVL155>:
  40ab0c:	4051      	eors	r1, r2
  40ab0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40ab10:	4051      	eors	r1, r2
  40ab12:	9a02      	ldr	r2, [sp, #8]
  40ab14:	4051      	eors	r1, r2

0040ab16 <.LBB611>:
  40ab16:	ea4f 72f1 	mov.w	r2, r1, ror #31

0040ab1a <.LBE611>:
  40ab1a:	ea8b 0106 	eor.w	r1, fp, r6
  40ab1e:	4069      	eors	r1, r5
  40ab20:	9204      	str	r2, [sp, #16]
  40ab22:	4bdb      	ldr	r3, [pc, #876]	; (40ae90 <.LBE673+0x14>)
  40ab24:	18d3      	adds	r3, r2, r3
  40ab26:	441f      	add	r7, r3
  40ab28:	440f      	add	r7, r1
  40ab2a:	eb07 61f4 	add.w	r1, r7, r4, ror #27

0040ab2e <.LBB613>:
  40ab2e:	ea4f 05b5 	mov.w	r5, r5, ror #2

0040ab32 <.LBE613>:

        R3(a,b,c,d,e,40); R3(e,a,b,c,d,41); R3(d,e,a,b,c,42); R3(c,d,e,a,b,43);
  40ab32:	9a07      	ldr	r2, [sp, #28]

0040ab34 <.LVL160>:
  40ab34:	9b06      	ldr	r3, [sp, #24]
  40ab36:	4053      	eors	r3, r2
  40ab38:	461a      	mov	r2, r3
  40ab3a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  40ab3c:	407a      	eors	r2, r7
  40ab3e:	9f03      	ldr	r7, [sp, #12]
  40ab40:	407a      	eors	r2, r7

0040ab42 <.LBB615>:
  40ab42:	ea4f 77f2 	mov.w	r7, r2, ror #31

0040ab46 <.LBE615>:
  40ab46:	ea44 0205 	orr.w	r2, r4, r5
  40ab4a:	4032      	ands	r2, r6
  40ab4c:	ea04 0305 	and.w	r3, r4, r5
  40ab50:	431a      	orrs	r2, r3
  40ab52:	4bd0      	ldr	r3, [pc, #832]	; (40ae94 <.LBE673+0x18>)
  40ab54:	9713      	str	r7, [sp, #76]	; 0x4c
  40ab56:	441f      	add	r7, r3
  40ab58:	44bb      	add	fp, r7
  40ab5a:	4493      	add	fp, r2
  40ab5c:	eb0b 62f1 	add.w	r2, fp, r1, ror #27

0040ab60 <.LBB617>:
  40ab60:	ea4f 09b4 	mov.w	r9, r4, ror #2

0040ab64 <.LBE617>:
  40ab64:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  40ab66:	46be      	mov	lr, r7
  40ab68:	9f08      	ldr	r7, [sp, #32]
  40ab6a:	ea8e 0707 	eor.w	r7, lr, r7
  40ab6e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40ab70:	4067      	eors	r7, r4
  40ab72:	9c12      	ldr	r4, [sp, #72]	; 0x48
  40ab74:	4067      	eors	r7, r4

0040ab76 <.LBB619>:
  40ab76:	ea4f 74f7 	mov.w	r4, r7, ror #31

0040ab7a <.LBE619>:
  40ab7a:	ea41 0809 	orr.w	r8, r1, r9
  40ab7e:	ea08 0705 	and.w	r7, r8, r5
  40ab82:	ea01 0809 	and.w	r8, r1, r9
  40ab86:	ea47 0808 	orr.w	r8, r7, r8
  40ab8a:	940d      	str	r4, [sp, #52]	; 0x34
  40ab8c:	18e7      	adds	r7, r4, r3
  40ab8e:	443e      	add	r6, r7
  40ab90:	4446      	add	r6, r8
  40ab92:	eb06 68f2 	add.w	r8, r6, r2, ror #27

0040ab96 <.LBB621>:
  40ab96:	ea4f 01b1 	mov.w	r1, r1, ror #2

0040ab9a <.LBE621>:
  40ab9a:	9e07      	ldr	r6, [sp, #28]
  40ab9c:	46b6      	mov	lr, r6
  40ab9e:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40aba0:	ea8e 0706 	eor.w	r7, lr, r6
  40aba4:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40aba6:	4067      	eors	r7, r4
  40aba8:	9e04      	ldr	r6, [sp, #16]
  40abaa:	4077      	eors	r7, r6

0040abac <.LBB623>:
  40abac:	ea4f 76f7 	mov.w	r6, r7, ror #31
  40abb0:	4637      	mov	r7, r6

0040abb2 <.LBE623>:
  40abb2:	ea42 0e01 	orr.w	lr, r2, r1
  40abb6:	ea0e 0609 	and.w	r6, lr, r9
  40abba:	ea02 0e01 	and.w	lr, r2, r1
  40abbe:	ea46 0e0e 	orr.w	lr, r6, lr
  40abc2:	9714      	str	r7, [sp, #80]	; 0x50
  40abc4:	463e      	mov	r6, r7
  40abc6:	441e      	add	r6, r3
  40abc8:	4435      	add	r5, r6
  40abca:	4475      	add	r5, lr
  40abcc:	eb05 65f8 	add.w	r5, r5, r8, ror #27

0040abd0 <.LBB625>:
  40abd0:	ea4f 02b2 	mov.w	r2, r2, ror #2

0040abd4 <.LBE625>:
  40abd4:	9f08      	ldr	r7, [sp, #32]
  40abd6:	46be      	mov	lr, r7
  40abd8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40abda:	ea8e 0b07 	eor.w	fp, lr, r7
  40abde:	9f11      	ldr	r7, [sp, #68]	; 0x44
  40abe0:	ea8b 0b07 	eor.w	fp, fp, r7
  40abe4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
  40abe6:	ea8b 0b06 	eor.w	fp, fp, r6

0040abea <.LBB627>:
  40abea:	ea4f 7efb 	mov.w	lr, fp, ror #31

0040abee <.LBE627>:
  40abee:	ea48 0c02 	orr.w	ip, r8, r2
  40abf2:	ea0c 0601 	and.w	r6, ip, r1
  40abf6:	ea08 0c02 	and.w	ip, r8, r2
  40abfa:	ea46 0c0c 	orr.w	ip, r6, ip
  40abfe:	f8cd e054 	str.w	lr, [sp, #84]	; 0x54
  40ac02:	4676      	mov	r6, lr
  40ac04:	441e      	add	r6, r3
  40ac06:	eb09 0406 	add.w	r4, r9, r6
  40ac0a:	4464      	add	r4, ip
  40ac0c:	eb04 6cf5 	add.w	ip, r4, r5, ror #27

0040ac10 <.LBB629>:
  40ac10:	ea4f 08b8 	mov.w	r8, r8, ror #2

0040ac14 <.LBE629>:
        R3(b,c,d,e,a,44); R3(a,b,c,d,e,45); R3(e,a,b,c,d,46); R3(d,e,a,b,c,47);
  40ac14:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40ac16:	46b6      	mov	lr, r6
  40ac18:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  40ac1a:	ea8e 0e06 	eor.w	lr, lr, r6
  40ac1e:	9f02      	ldr	r7, [sp, #8]
  40ac20:	ea8e 0e07 	eor.w	lr, lr, r7
  40ac24:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40ac26:	ea8e 0e04 	eor.w	lr, lr, r4

0040ac2a <.LBB631>:
  40ac2a:	ea4f 7efe 	mov.w	lr, lr, ror #31

0040ac2e <.LVL178>:
  40ac2e:	4677      	mov	r7, lr

0040ac30 <.LBE631>:
  40ac30:	ea45 0e08 	orr.w	lr, r5, r8
  40ac34:	ea0e 0402 	and.w	r4, lr, r2
  40ac38:	ea05 0e08 	and.w	lr, r5, r8
  40ac3c:	ea44 0e0e 	orr.w	lr, r4, lr
  40ac40:	9705      	str	r7, [sp, #20]
  40ac42:	463c      	mov	r4, r7
  40ac44:	441c      	add	r4, r3
  40ac46:	4421      	add	r1, r4
  40ac48:	4471      	add	r1, lr
  40ac4a:	eb01 61fc 	add.w	r1, r1, ip, ror #27

0040ac4e <.LBB633>:
  40ac4e:	ea4f 05b5 	mov.w	r5, r5, ror #2

0040ac52 <.LBE633>:
  40ac52:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40ac54:	46be      	mov	lr, r7
  40ac56:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  40ac58:	ea8e 0907 	eor.w	r9, lr, r7
  40ac5c:	9c03      	ldr	r4, [sp, #12]
  40ac5e:	ea89 0904 	eor.w	r9, r9, r4
  40ac62:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40ac64:	ea89 0904 	eor.w	r9, r9, r4

0040ac68 <.LBB635>:
  40ac68:	ea4f 7ef9 	mov.w	lr, r9, ror #31
  40ac6c:	f8cd e004 	str.w	lr, [sp, #4]

0040ac70 <.LBE635>:
  40ac70:	ea4c 0a05 	orr.w	sl, ip, r5
  40ac74:	ea0a 0408 	and.w	r4, sl, r8
  40ac78:	ea0c 0a05 	and.w	sl, ip, r5
  40ac7c:	ea44 0a0a 	orr.w	sl, r4, sl
  40ac80:	4674      	mov	r4, lr
  40ac82:	441c      	add	r4, r3
  40ac84:	4422      	add	r2, r4
  40ac86:	4492      	add	sl, r2
  40ac88:	eb0a 6af1 	add.w	sl, sl, r1, ror #27

0040ac8c <.LBB637>:
  40ac8c:	ea4f 0cbc 	mov.w	ip, ip, ror #2

0040ac90 <.LBE637>:
  40ac90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40ac92:	4691      	mov	r9, r2
  40ac94:	4056      	eors	r6, r2
  40ac96:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40ac98:	4056      	eors	r6, r2
  40ac9a:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40ac9c:	4056      	eors	r6, r2

0040ac9e <.LBB639>:
  40ac9e:	ea4f 76f6 	mov.w	r6, r6, ror #31

0040aca2 <.LVL187>:
  40aca2:	4634      	mov	r4, r6

0040aca4 <.LBE639>:
  40aca4:	ea41 060c 	orr.w	r6, r1, ip
  40aca8:	ea06 0205 	and.w	r2, r6, r5
  40acac:	ea01 060c 	and.w	r6, r1, ip
  40acb0:	4316      	orrs	r6, r2
  40acb2:	940e      	str	r4, [sp, #56]	; 0x38
  40acb4:	4622      	mov	r2, r4
  40acb6:	441a      	add	r2, r3
  40acb8:	4490      	add	r8, r2
  40acba:	4446      	add	r6, r8
  40acbc:	eb06 66fa 	add.w	r6, r6, sl, ror #27

0040acc0 <.LBB641>:
  40acc0:	ea4f 01b1 	mov.w	r1, r1, ror #2

0040acc4 <.LBE641>:
  40acc4:	463c      	mov	r4, r7
  40acc6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40acc8:	ea84 0207 	eor.w	r2, r4, r7
  40accc:	9c04      	ldr	r4, [sp, #16]
  40acce:	4062      	eors	r2, r4
  40acd0:	9c05      	ldr	r4, [sp, #20]
  40acd2:	4062      	eors	r2, r4

0040acd4 <.LBB643>:
  40acd4:	ea4f 72f2 	mov.w	r2, r2, ror #31

0040acd8 <.LVL192>:
  40acd8:	4617      	mov	r7, r2

0040acda <.LBE643>:
  40acda:	ea4a 0201 	orr.w	r2, sl, r1
  40acde:	ea02 040c 	and.w	r4, r2, ip
  40ace2:	ea0a 0201 	and.w	r2, sl, r1
  40ace6:	4322      	orrs	r2, r4
  40ace8:	9706      	str	r7, [sp, #24]
  40acea:	18fc      	adds	r4, r7, r3
  40acec:	4425      	add	r5, r4
  40acee:	4415      	add	r5, r2
  40acf0:	eb05 65f6 	add.w	r5, r5, r6, ror #27

0040acf4 <.LBB645>:
  40acf4:	ea4f 0aba 	mov.w	sl, sl, ror #2

0040acf8 <.LBE645>:
        R3(c,d,e,a,b,48); R3(b,c,d,e,a,49); R3(a,b,c,d,e,50); R3(e,a,b,c,d,51);
  40acf8:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40acfa:	46a0      	mov	r8, r4
  40acfc:	ea89 0204 	eor.w	r2, r9, r4
  40ad00:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  40ad02:	4062      	eors	r2, r4
  40ad04:	9f01      	ldr	r7, [sp, #4]
  40ad06:	407a      	eors	r2, r7

0040ad08 <.LBB647>:
  40ad08:	ea4f 72f2 	mov.w	r2, r2, ror #31

0040ad0c <.LBE647>:
  40ad0c:	ea46 040a 	orr.w	r4, r6, sl
  40ad10:	ea04 0901 	and.w	r9, r4, r1
  40ad14:	ea06 040a 	and.w	r4, r6, sl
  40ad18:	ea49 0404 	orr.w	r4, r9, r4
  40ad1c:	9207      	str	r2, [sp, #28]
  40ad1e:	eb02 0903 	add.w	r9, r2, r3
  40ad22:	44cc      	add	ip, r9
  40ad24:	eb04 090c 	add.w	r9, r4, ip
  40ad28:	eb09 69f5 	add.w	r9, r9, r5, ror #27

0040ad2c <.LBB649>:
  40ad2c:	ea4f 06b6 	mov.w	r6, r6, ror #2

0040ad30 <.LBE649>:
  40ad30:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40ad32:	46be      	mov	lr, r7
  40ad34:	9f11      	ldr	r7, [sp, #68]	; 0x44
  40ad36:	ea8e 0207 	eor.w	r2, lr, r7

0040ad3a <.LVL200>:
  40ad3a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40ad3c:	4062      	eors	r2, r4
  40ad3e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40ad40:	4062      	eors	r2, r4

0040ad42 <.LBB651>:
  40ad42:	ea4f 72f2 	mov.w	r2, r2, ror #31

0040ad46 <.LVL202>:
  40ad46:	4614      	mov	r4, r2

0040ad48 <.LBE651>:
  40ad48:	ea45 0e06 	orr.w	lr, r5, r6
  40ad4c:	ea0e 020a 	and.w	r2, lr, sl

0040ad50 <.LVL204>:
  40ad50:	ea05 0e06 	and.w	lr, r5, r6
  40ad54:	ea42 0e0e 	orr.w	lr, r2, lr
  40ad58:	940f      	str	r4, [sp, #60]	; 0x3c
  40ad5a:	4622      	mov	r2, r4
  40ad5c:	441a      	add	r2, r3
  40ad5e:	4411      	add	r1, r2
  40ad60:	4471      	add	r1, lr
  40ad62:	eb01 6ef9 	add.w	lr, r1, r9, ror #27

0040ad66 <.LBB653>:
  40ad66:	ea4f 05b5 	mov.w	r5, r5, ror #2

0040ad6a <.LBE653>:
  40ad6a:	9902      	ldr	r1, [sp, #8]
  40ad6c:	ea88 0401 	eor.w	r4, r8, r1

0040ad70 <.LVL207>:
  40ad70:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40ad72:	4054      	eors	r4, r2
  40ad74:	9906      	ldr	r1, [sp, #24]
  40ad76:	404c      	eors	r4, r1

0040ad78 <.LBB655>:
  40ad78:	ea4f 71f4 	mov.w	r1, r4, ror #31

0040ad7c <.LBE655>:
  40ad7c:	ea49 0805 	orr.w	r8, r9, r5
  40ad80:	ea08 0206 	and.w	r2, r8, r6
  40ad84:	ea09 0805 	and.w	r8, r9, r5
  40ad88:	ea42 0808 	orr.w	r8, r2, r8
  40ad8c:	9108      	str	r1, [sp, #32]
  40ad8e:	18ca      	adds	r2, r1, r3
  40ad90:	4492      	add	sl, r2
  40ad92:	44d0      	add	r8, sl
  40ad94:	eb08 68fe 	add.w	r8, r8, lr, ror #27

0040ad98 <.LBB657>:
  40ad98:	ea4f 04b9 	mov.w	r4, r9, ror #2

0040ad9c <.LBE657>:
  40ad9c:	9903      	ldr	r1, [sp, #12]

0040ad9e <.LVL212>:
  40ad9e:	4689      	mov	r9, r1
  40ada0:	4079      	eors	r1, r7
  40ada2:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40ada4:	4051      	eors	r1, r2
  40ada6:	9a07      	ldr	r2, [sp, #28]
  40ada8:	4051      	eors	r1, r2

0040adaa <.LBB659>:
  40adaa:	ea4f 77f1 	mov.w	r7, r1, ror #31

0040adae <.LBE659>:
  40adae:	ea4e 0b04 	orr.w	fp, lr, r4
  40adb2:	ea0b 0205 	and.w	r2, fp, r5
  40adb6:	ea0e 0b04 	and.w	fp, lr, r4
  40adba:	ea42 0b0b 	orr.w	fp, r2, fp
  40adbe:	9709      	str	r7, [sp, #36]	; 0x24
  40adc0:	18fa      	adds	r2, r7, r3
  40adc2:	4416      	add	r6, r2
  40adc4:	44b3      	add	fp, r6
  40adc6:	eb0b 6bf8 	add.w	fp, fp, r8, ror #27

0040adca <.LBB661>:
  40adca:	ea4f 01be 	mov.w	r1, lr, ror #2

0040adce <.LBE661>:
        R3(d,e,a,b,c,52); R3(c,d,e,a,b,53); R3(b,c,d,e,a,54); R3(a,b,c,d,e,55);
  40adce:	9f02      	ldr	r7, [sp, #8]

0040add0 <.LVL217>:
  40add0:	46be      	mov	lr, r7
  40add2:	9f12      	ldr	r7, [sp, #72]	; 0x48
  40add4:	ea8e 0c07 	eor.w	ip, lr, r7
  40add8:	9e05      	ldr	r6, [sp, #20]
  40adda:	ea8c 0c06 	eor.w	ip, ip, r6
  40adde:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  40ade0:	ea8c 0c06 	eor.w	ip, ip, r6

0040ade4 <.LBB663>:
  40ade4:	ea4f 7efc 	mov.w	lr, ip, ror #31
  40ade8:	4676      	mov	r6, lr

0040adea <.LBE663>:
  40adea:	ea48 0c01 	orr.w	ip, r8, r1
  40adee:	ea0c 0204 	and.w	r2, ip, r4
  40adf2:	ea08 0c01 	and.w	ip, r8, r1
  40adf6:	ea42 0c0c 	orr.w	ip, r2, ip
  40adfa:	f8cd e008 	str.w	lr, [sp, #8]
  40adfe:	18f2      	adds	r2, r6, r3
  40ae00:	4415      	add	r5, r2
  40ae02:	44ac      	add	ip, r5
  40ae04:	eb0c 6cfb 	add.w	ip, ip, fp, ror #27

0040ae08 <.LBB665>:
  40ae08:	ea4f 08b8 	mov.w	r8, r8, ror #2

0040ae0c <.LBE665>:
  40ae0c:	464a      	mov	r2, r9
  40ae0e:	9d04      	ldr	r5, [sp, #16]
  40ae10:	ea82 0e05 	eor.w	lr, r2, r5
  40ae14:	9e01      	ldr	r6, [sp, #4]

0040ae16 <.LVL222>:
  40ae16:	ea8e 0e06 	eor.w	lr, lr, r6
  40ae1a:	9d08      	ldr	r5, [sp, #32]
  40ae1c:	ea8e 0e05 	eor.w	lr, lr, r5

0040ae20 <.LBB667>:
  40ae20:	ea4f 7efe 	mov.w	lr, lr, ror #31

0040ae24 <.LVL224>:
  40ae24:	4675      	mov	r5, lr

0040ae26 <.LBE667>:
  40ae26:	ea4b 0908 	orr.w	r9, fp, r8
  40ae2a:	ea09 0201 	and.w	r2, r9, r1
  40ae2e:	ea0b 0908 	and.w	r9, fp, r8
  40ae32:	ea42 0909 	orr.w	r9, r2, r9
  40ae36:	f8cd e00c 	str.w	lr, [sp, #12]
  40ae3a:	18ea      	adds	r2, r5, r3
  40ae3c:	4414      	add	r4, r2
  40ae3e:	44a1      	add	r9, r4
  40ae40:	eb09 69fc 	add.w	r9, r9, ip, ror #27

0040ae44 <.LBB669>:
  40ae44:	ea4f 0bbb 	mov.w	fp, fp, ror #2

0040ae48 <.LBE669>:
  40ae48:	463e      	mov	r6, r7
  40ae4a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  40ae4c:	ea86 0704 	eor.w	r7, r6, r4
  40ae50:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  40ae52:	4077      	eors	r7, r6
  40ae54:	9d09      	ldr	r5, [sp, #36]	; 0x24

0040ae56 <.LVL228>:
  40ae56:	406f      	eors	r7, r5

0040ae58 <.LBB671>:
  40ae58:	ea4f 77f7 	mov.w	r7, r7, ror #31

0040ae5c <.LBE671>:
  40ae5c:	ea4c 0e0b 	orr.w	lr, ip, fp

0040ae60 <.LVL231>:
  40ae60:	ea0e 0208 	and.w	r2, lr, r8
  40ae64:	ea0c 0e0b 	and.w	lr, ip, fp
  40ae68:	ea42 0e0e 	orr.w	lr, r2, lr
  40ae6c:	970a      	str	r7, [sp, #40]	; 0x28
  40ae6e:	18fa      	adds	r2, r7, r3
  40ae70:	4411      	add	r1, r2
  40ae72:	448e      	add	lr, r1
  40ae74:	eb0e 6ef9 	add.w	lr, lr, r9, ror #27

0040ae78 <.LBB673>:
  40ae78:	ea4f 0cbc 	mov.w	ip, ip, ror #2

0040ae7c <.LBE673>:
  40ae7c:	9d04      	ldr	r5, [sp, #16]
  40ae7e:	46aa      	mov	sl, r5
  40ae80:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  40ae82:	ea8a 0205 	eor.w	r2, sl, r5
  40ae86:	9906      	ldr	r1, [sp, #24]
  40ae88:	404a      	eors	r2, r1
  40ae8a:	9e02      	ldr	r6, [sp, #8]
  40ae8c:	4072      	eors	r2, r6
  40ae8e:	e003      	b.n	40ae98 <.LBB675>
  40ae90:	6ed9eba1 	.word	0x6ed9eba1
  40ae94:	8f1bbcdc 	.word	0x8f1bbcdc

0040ae98 <.LBB675>:
  40ae98:	ea4f 71f2 	mov.w	r1, r2, ror #31
  40ae9c:	460e      	mov	r6, r1

0040ae9e <.LBE675>:
  40ae9e:	ea49 020c 	orr.w	r2, r9, ip
  40aea2:	ea02 010b 	and.w	r1, r2, fp

0040aea6 <.LVL236>:
  40aea6:	ea09 020c 	and.w	r2, r9, ip
  40aeaa:	430a      	orrs	r2, r1
  40aeac:	9604      	str	r6, [sp, #16]
  40aeae:	4631      	mov	r1, r6
  40aeb0:	4419      	add	r1, r3
  40aeb2:	4488      	add	r8, r1
  40aeb4:	4442      	add	r2, r8
  40aeb6:	eb02 62fe 	add.w	r2, r2, lr, ror #27

0040aeba <.LBB677>:
  40aeba:	ea4f 09b9 	mov.w	r9, r9, ror #2

0040aebe <.LBE677>:
        R3(e,a,b,c,d,56); R3(d,e,a,b,c,57); R3(c,d,e,a,b,58); R3(b,c,d,e,a,59);
  40aebe:	9f14      	ldr	r7, [sp, #80]	; 0x50

0040aec0 <.LVL239>:
  40aec0:	ea84 0607 	eor.w	r6, r4, r7

0040aec4 <.LVL240>:
  40aec4:	9c07      	ldr	r4, [sp, #28]
  40aec6:	4066      	eors	r6, r4
  40aec8:	9c03      	ldr	r4, [sp, #12]
  40aeca:	4066      	eors	r6, r4

0040aecc <.LBB679>:
  40aecc:	ea4f 74f6 	mov.w	r4, r6, ror #31

0040aed0 <.LBE679>:
  40aed0:	ea4e 0609 	orr.w	r6, lr, r9
  40aed4:	ea06 010c 	and.w	r1, r6, ip
  40aed8:	ea0e 0609 	and.w	r6, lr, r9
  40aedc:	430e      	orrs	r6, r1
  40aede:	940b      	str	r4, [sp, #44]	; 0x2c
  40aee0:	18e1      	adds	r1, r4, r3
  40aee2:	448b      	add	fp, r1
  40aee4:	445e      	add	r6, fp
  40aee6:	eb06 66f2 	add.w	r6, r6, r2, ror #27

0040aeea <.LBB681>:
  40aeea:	ea4f 0ebe 	mov.w	lr, lr, ror #2

0040aeee <.LBE681>:
  40aeee:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40aef0:	4065      	eors	r5, r4
  40aef2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40aef4:	404d      	eors	r5, r1
  40aef6:	990a      	ldr	r1, [sp, #40]	; 0x28
  40aef8:	404d      	eors	r5, r1

0040aefa <.LBB683>:
  40aefa:	ea4f 75f5 	mov.w	r5, r5, ror #31

0040aefe <.LVL246>:
  40aefe:	950c      	str	r5, [sp, #48]	; 0x30

0040af00 <.LBE683>:
  40af00:	ea42 050e 	orr.w	r5, r2, lr
  40af04:	ea05 0109 	and.w	r1, r5, r9
  40af08:	ea02 050e 	and.w	r5, r2, lr
  40af0c:	430d      	orrs	r5, r1
  40af0e:	990c      	ldr	r1, [sp, #48]	; 0x30
  40af10:	4419      	add	r1, r3
  40af12:	448c      	add	ip, r1
  40af14:	4465      	add	r5, ip
  40af16:	eb05 65f6 	add.w	r5, r5, r6, ror #27

0040af1a <.LBB685>:
  40af1a:	ea4f 02b2 	mov.w	r2, r2, ror #2

0040af1e <.LBE685>:
  40af1e:	4639      	mov	r1, r7
  40af20:	9f05      	ldr	r7, [sp, #20]
  40af22:	404f      	eors	r7, r1
  40af24:	9908      	ldr	r1, [sp, #32]
  40af26:	404f      	eors	r7, r1
  40af28:	9904      	ldr	r1, [sp, #16]
  40af2a:	404f      	eors	r7, r1

0040af2c <.LBB687>:
  40af2c:	ea4f 77f7 	mov.w	r7, r7, ror #31

0040af30 <.LBE687>:
  40af30:	ea46 0a02 	orr.w	sl, r6, r2
  40af34:	ea0a 010e 	and.w	r1, sl, lr
  40af38:	ea06 0a02 	and.w	sl, r6, r2
  40af3c:	ea41 0a0a 	orr.w	sl, r1, sl
  40af40:	970d      	str	r7, [sp, #52]	; 0x34
  40af42:	18f9      	adds	r1, r7, r3
  40af44:	4489      	add	r9, r1
  40af46:	44ca      	add	sl, r9
  40af48:	eb0a 6af5 	add.w	sl, sl, r5, ror #27

0040af4c <.LBB689>:
  40af4c:	ea4f 06b6 	mov.w	r6, r6, ror #2

0040af50 <.LBE689>:
  40af50:	4621      	mov	r1, r4
  40af52:	9c01      	ldr	r4, [sp, #4]
  40af54:	ea81 0b04 	eor.w	fp, r1, r4
  40af58:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40af5a:	ea8b 0b04 	eor.w	fp, fp, r4
  40af5e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40af60:	ea8b 0b04 	eor.w	fp, fp, r4

0040af64 <.LBB691>:
  40af64:	ea4f 7cfb 	mov.w	ip, fp, ror #31

0040af68 <.LBE691>:
  40af68:	ea45 0106 	orr.w	r1, r5, r6
  40af6c:	4011      	ands	r1, r2
  40af6e:	ea05 0806 	and.w	r8, r5, r6
  40af72:	ea41 0808 	orr.w	r8, r1, r8
  40af76:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40af7a:	4463      	add	r3, ip
  40af7c:	4473      	add	r3, lr
  40af7e:	4498      	add	r8, r3
  40af80:	eb08 68fa 	add.w	r8, r8, sl, ror #27

0040af84 <.LBB693>:
  40af84:	ea4f 05b5 	mov.w	r5, r5, ror #2

0040af88 <.LBE693>:

        R4(a,b,c,d,e,60); R4(e,a,b,c,d,61); R4(d,e,a,b,c,62); R4(c,d,e,a,b,63);
  40af88:	9f05      	ldr	r7, [sp, #20]
  40af8a:	46be      	mov	lr, r7
  40af8c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40af8e:	ea8e 0307 	eor.w	r3, lr, r7
  40af92:	9c02      	ldr	r4, [sp, #8]
  40af94:	4063      	eors	r3, r4
  40af96:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40af98:	4063      	eors	r3, r4

0040af9a <.LBB695>:
  40af9a:	ea4f 73f3 	mov.w	r3, r3, ror #31

0040af9e <.LVL259>:
  40af9e:	4619      	mov	r1, r3

0040afa0 <.LBE695>:
  40afa0:	ea86 0405 	eor.w	r4, r6, r5
  40afa4:	ea84 040a 	eor.w	r4, r4, sl
  40afa8:	4bd5      	ldr	r3, [pc, #852]	; (40b300 <.LVL342+0x30>)
  40afaa:	9105      	str	r1, [sp, #20]
  40afac:	4419      	add	r1, r3
  40afae:	440a      	add	r2, r1
  40afb0:	4414      	add	r4, r2
  40afb2:	eb04 64f8 	add.w	r4, r4, r8, ror #27

0040afb6 <.LBB697>:
  40afb6:	ea4f 0aba 	mov.w	sl, sl, ror #2

0040afba <.LBE697>:
  40afba:	9a01      	ldr	r2, [sp, #4]
  40afbc:	9906      	ldr	r1, [sp, #24]
  40afbe:	ea82 0901 	eor.w	r9, r2, r1
  40afc2:	9a03      	ldr	r2, [sp, #12]
  40afc4:	ea89 0902 	eor.w	r9, r9, r2
  40afc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40afca:	ea89 0902 	eor.w	r9, r9, r2

0040afce <.LBB699>:
  40afce:	ea4f 7ef9 	mov.w	lr, r9, ror #31
  40afd2:	4672      	mov	r2, lr

0040afd4 <.LBE699>:
  40afd4:	ea85 010a 	eor.w	r1, r5, sl
  40afd8:	ea81 0108 	eor.w	r1, r1, r8
  40afdc:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40afe0:	441a      	add	r2, r3
  40afe2:	4416      	add	r6, r2
  40afe4:	4431      	add	r1, r6
  40afe6:	eb01 61f4 	add.w	r1, r1, r4, ror #27

0040afea <.LBB701>:
  40afea:	ea4f 08b8 	mov.w	r8, r8, ror #2

0040afee <.LBE701>:
  40afee:	9a07      	ldr	r2, [sp, #28]
  40aff0:	ea87 0602 	eor.w	r6, r7, r2
  40aff4:	9f0a      	ldr	r7, [sp, #40]	; 0x28

0040aff6 <.LVL267>:
  40aff6:	407e      	eors	r6, r7
  40aff8:	9f10      	ldr	r7, [sp, #64]	; 0x40
  40affa:	407e      	eors	r6, r7

0040affc <.LBB703>:
  40affc:	ea4f 76f6 	mov.w	r6, r6, ror #31

0040b000 <.LBE703>:
  40b000:	ea8a 0c08 	eor.w	ip, sl, r8
  40b004:	ea8c 0c04 	eor.w	ip, ip, r4
  40b008:	9601      	str	r6, [sp, #4]
  40b00a:	18f2      	adds	r2, r6, r3
  40b00c:	4415      	add	r5, r2
  40b00e:	44ac      	add	ip, r5
  40b010:	eb0c 6cf1 	add.w	ip, ip, r1, ror #27

0040b014 <.LBB705>:
  40b014:	ea4f 04b4 	mov.w	r4, r4, ror #2

0040b018 <.LBE705>:
  40b018:	9f06      	ldr	r7, [sp, #24]
  40b01a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  40b01c:	ea87 0206 	eor.w	r2, r7, r6
  40b020:	9d04      	ldr	r5, [sp, #16]
  40b022:	406a      	eors	r2, r5
  40b024:	9d05      	ldr	r5, [sp, #20]
  40b026:	406a      	eors	r2, r5

0040b028 <.LBB707>:
  40b028:	ea4f 75f2 	mov.w	r5, r2, ror #31

0040b02c <.LBE707>:
  40b02c:	ea88 0e04 	eor.w	lr, r8, r4
  40b030:	ea8e 0e01 	eor.w	lr, lr, r1
  40b034:	9506      	str	r5, [sp, #24]
  40b036:	18ea      	adds	r2, r5, r3
  40b038:	4492      	add	sl, r2
  40b03a:	44d6      	add	lr, sl
  40b03c:	eb0e 6efc 	add.w	lr, lr, ip, ror #27

0040b040 <.LBB709>:
  40b040:	ea4f 01b1 	mov.w	r1, r1, ror #2

0040b044 <.LBE709>:
        R4(b,c,d,e,a,64); R4(a,b,c,d,e,65); R4(e,a,b,c,d,66); R4(d,e,a,b,c,67);
  40b044:	9a07      	ldr	r2, [sp, #28]
  40b046:	9f08      	ldr	r7, [sp, #32]
  40b048:	46ba      	mov	sl, r7
  40b04a:	407a      	eors	r2, r7
  40b04c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40b04e:	406a      	eors	r2, r5
  40b050:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40b052:	406a      	eors	r2, r5

0040b054 <.LBB711>:
  40b054:	ea4f 72f2 	mov.w	r2, r2, ror #31

0040b058 <.LBE711>:
  40b058:	ea84 0701 	eor.w	r7, r4, r1
  40b05c:	ea87 070c 	eor.w	r7, r7, ip
  40b060:	9207      	str	r2, [sp, #28]
  40b062:	441a      	add	r2, r3

0040b064 <.LVL278>:
  40b064:	4490      	add	r8, r2
  40b066:	4447      	add	r7, r8
  40b068:	eb07 67fe 	add.w	r7, r7, lr, ror #27

0040b06c <.LBB713>:
  40b06c:	ea4f 0cbc 	mov.w	ip, ip, ror #2

0040b070 <.LBE713>:
  40b070:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40b072:	4072      	eors	r2, r6
  40b074:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  40b076:	4072      	eors	r2, r6
  40b078:	9e01      	ldr	r6, [sp, #4]
  40b07a:	4072      	eors	r2, r6

0040b07c <.LBB715>:
  40b07c:	ea4f 76f2 	mov.w	r6, r2, ror #31

0040b080 <.LBE715>:
  40b080:	ea81 020c 	eor.w	r2, r1, ip
  40b084:	ea82 020e 	eor.w	r2, r2, lr
  40b088:	960f      	str	r6, [sp, #60]	; 0x3c
  40b08a:	18f5      	adds	r5, r6, r3
  40b08c:	442c      	add	r4, r5
  40b08e:	4422      	add	r2, r4
  40b090:	eb02 62f7 	add.w	r2, r2, r7, ror #27

0040b094 <.LBB717>:
  40b094:	ea4f 0ebe 	mov.w	lr, lr, ror #2

0040b098 <.LBE717>:
  40b098:	9d02      	ldr	r5, [sp, #8]
  40b09a:	ea8a 0405 	eor.w	r4, sl, r5
  40b09e:	9e0d      	ldr	r6, [sp, #52]	; 0x34

0040b0a0 <.LVL285>:
  40b0a0:	4074      	eors	r4, r6
  40b0a2:	9d06      	ldr	r5, [sp, #24]
  40b0a4:	406c      	eors	r4, r5

0040b0a6 <.LBB719>:
  40b0a6:	ea4f 74f4 	mov.w	r4, r4, ror #31

0040b0aa <.LBE719>:
  40b0aa:	ea8c 060e 	eor.w	r6, ip, lr
  40b0ae:	407e      	eors	r6, r7
  40b0b0:	18e5      	adds	r5, r4, r3
  40b0b2:	4429      	add	r1, r5
  40b0b4:	440e      	add	r6, r1
  40b0b6:	eb06 66f2 	add.w	r6, r6, r2, ror #27

0040b0ba <.LBB721>:
  40b0ba:	ea4f 07b7 	mov.w	r7, r7, ror #2

0040b0be <.LBE721>:
  40b0be:	9909      	ldr	r1, [sp, #36]	; 0x24
  40b0c0:	9d03      	ldr	r5, [sp, #12]
  40b0c2:	46a9      	mov	r9, r5
  40b0c4:	4069      	eors	r1, r5
  40b0c6:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40b0c8:	4069      	eors	r1, r5
  40b0ca:	9d07      	ldr	r5, [sp, #28]
  40b0cc:	4069      	eors	r1, r5

0040b0ce <.LBB723>:
  40b0ce:	ea4f 71f1 	mov.w	r1, r1, ror #31

0040b0d2 <.LBE723>:
  40b0d2:	ea8e 0507 	eor.w	r5, lr, r7
  40b0d6:	4055      	eors	r5, r2
  40b0d8:	9108      	str	r1, [sp, #32]
  40b0da:	eb01 0803 	add.w	r8, r1, r3
  40b0de:	44c4      	add	ip, r8
  40b0e0:	4465      	add	r5, ip
  40b0e2:	eb05 65f6 	add.w	r5, r5, r6, ror #27

0040b0e6 <.LBB725>:
  40b0e6:	ea4f 02b2 	mov.w	r2, r2, ror #2

0040b0ea <.LBE725>:
        R4(c,d,e,a,b,68); R4(b,c,d,e,a,69); R4(a,b,c,d,e,70); R4(e,a,b,c,d,71);
  40b0ea:	9902      	ldr	r1, [sp, #8]

0040b0ec <.LVL294>:
  40b0ec:	468c      	mov	ip, r1
  40b0ee:	990a      	ldr	r1, [sp, #40]	; 0x28
  40b0f0:	ea8c 0c01 	eor.w	ip, ip, r1
  40b0f4:	9905      	ldr	r1, [sp, #20]
  40b0f6:	ea8c 0c01 	eor.w	ip, ip, r1
  40b0fa:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40b0fc:	ea8c 0c01 	eor.w	ip, ip, r1

0040b100 <.LBB727>:
  40b100:	ea4f 7cfc 	mov.w	ip, ip, ror #31

0040b104 <.LBE727>:
  40b104:	ea87 0b02 	eor.w	fp, r7, r2
  40b108:	ea8b 0b06 	eor.w	fp, fp, r6
  40b10c:	f8cd c008 	str.w	ip, [sp, #8]
  40b110:	449c      	add	ip, r3

0040b112 <.LVL297>:
  40b112:	44e6      	add	lr, ip
  40b114:	44f3      	add	fp, lr
  40b116:	eb0b 6bf5 	add.w	fp, fp, r5, ror #27

0040b11a <.LBB729>:
  40b11a:	ea4f 06b6 	mov.w	r6, r6, ror #2

0040b11e <.LBE729>:
  40b11e:	9904      	ldr	r1, [sp, #16]
  40b120:	ea89 0e01 	eor.w	lr, r9, r1
  40b124:	990e      	ldr	r1, [sp, #56]	; 0x38
  40b126:	ea8e 0e01 	eor.w	lr, lr, r1
  40b12a:	ea8e 0e04 	eor.w	lr, lr, r4

0040b12e <.LBB731>:
  40b12e:	ea4f 7efe 	mov.w	lr, lr, ror #31

0040b132 <.LBE731>:
  40b132:	ea82 0a06 	eor.w	sl, r2, r6
  40b136:	ea8a 0a05 	eor.w	sl, sl, r5
  40b13a:	f8cd e00c 	str.w	lr, [sp, #12]
  40b13e:	449e      	add	lr, r3

0040b140 <.LVL302>:
  40b140:	4477      	add	r7, lr
  40b142:	44ba      	add	sl, r7
  40b144:	eb0a 6afb 	add.w	sl, sl, fp, ror #27

0040b148 <.LBB733>:
  40b148:	ea4f 05b5 	mov.w	r5, r5, ror #2

0040b14c <.LBE733>:
  40b14c:	990a      	ldr	r1, [sp, #40]	; 0x28
  40b14e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  40b150:	404f      	eors	r7, r1
  40b152:	9901      	ldr	r1, [sp, #4]
  40b154:	404f      	eors	r7, r1
  40b156:	9908      	ldr	r1, [sp, #32]
  40b158:	404f      	eors	r7, r1

0040b15a <.LBB735>:
  40b15a:	ea4f 77f7 	mov.w	r7, r7, ror #31

0040b15e <.LBE735>:
  40b15e:	ea86 0905 	eor.w	r9, r6, r5
  40b162:	ea89 090b 	eor.w	r9, r9, fp
  40b166:	9709      	str	r7, [sp, #36]	; 0x24
  40b168:	441f      	add	r7, r3

0040b16a <.LVL307>:
  40b16a:	443a      	add	r2, r7
  40b16c:	4491      	add	r9, r2
  40b16e:	eb09 69fa 	add.w	r9, r9, sl, ror #27

0040b172 <.LBB737>:
  40b172:	ea4f 0bbb 	mov.w	fp, fp, ror #2

0040b176 <.LBE737>:
  40b176:	9904      	ldr	r1, [sp, #16]
  40b178:	468e      	mov	lr, r1
  40b17a:	990c      	ldr	r1, [sp, #48]	; 0x30
  40b17c:	ea8e 0201 	eor.w	r2, lr, r1
  40b180:	9f06      	ldr	r7, [sp, #24]
  40b182:	407a      	eors	r2, r7
  40b184:	9f02      	ldr	r7, [sp, #8]
  40b186:	407a      	eors	r2, r7

0040b188 <.LBB739>:
  40b188:	ea4f 72f2 	mov.w	r2, r2, ror #31

0040b18c <.LBE739>:
  40b18c:	ea85 080b 	eor.w	r8, r5, fp
  40b190:	ea88 080a 	eor.w	r8, r8, sl
  40b194:	9204      	str	r2, [sp, #16]
  40b196:	18d7      	adds	r7, r2, r3
  40b198:	443e      	add	r6, r7
  40b19a:	44b0      	add	r8, r6
  40b19c:	eb08 68f9 	add.w	r8, r8, r9, ror #27

0040b1a0 <.LBB741>:
  40b1a0:	ea4f 0aba 	mov.w	sl, sl, ror #2

0040b1a4 <.LBE741>:
        R4(d,e,a,b,c,72); R4(c,d,e,a,b,73); R4(b,c,d,e,a,74); R4(a,b,c,d,e,75);
  40b1a4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  40b1a6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  40b1a8:	407e      	eors	r6, r7
  40b1aa:	9a07      	ldr	r2, [sp, #28]

0040b1ac <.LVL314>:
  40b1ac:	4056      	eors	r6, r2
  40b1ae:	9a03      	ldr	r2, [sp, #12]
  40b1b0:	4056      	eors	r6, r2

0040b1b2 <.LBB743>:
  40b1b2:	ea4f 76f6 	mov.w	r6, r6, ror #31

0040b1b6 <.LBE743>:
  40b1b6:	ea8b 0c0a 	eor.w	ip, fp, sl
  40b1ba:	ea8c 0c09 	eor.w	ip, ip, r9
  40b1be:	18f7      	adds	r7, r6, r3
  40b1c0:	443d      	add	r5, r7
  40b1c2:	44ac      	add	ip, r5
  40b1c4:	eb0c 6cf8 	add.w	ip, ip, r8, ror #27

0040b1c8 <.LBB745>:
  40b1c8:	ea4f 09b9 	mov.w	r9, r9, ror #2

0040b1cc <.LBE745>:
  40b1cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40b1ce:	ea81 0502 	eor.w	r5, r1, r2
  40b1d2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  40b1d4:	407d      	eors	r5, r7
  40b1d6:	9f09      	ldr	r7, [sp, #36]	; 0x24
  40b1d8:	407d      	eors	r5, r7

0040b1da <.LBB747>:
  40b1da:	ea4f 75f5 	mov.w	r5, r5, ror #31

0040b1de <.LBE747>:
  40b1de:	ea8a 0e09 	eor.w	lr, sl, r9
  40b1e2:	ea8e 0e08 	eor.w	lr, lr, r8
  40b1e6:	18ef      	adds	r7, r5, r3
  40b1e8:	44bb      	add	fp, r7
  40b1ea:	44de      	add	lr, fp
  40b1ec:	eb0e 6efc 	add.w	lr, lr, ip, ror #27

0040b1f0 <.LBB749>:
  40b1f0:	ea4f 08b8 	mov.w	r8, r8, ror #2

0040b1f4 <.LBE749>:
  40b1f4:	990d      	ldr	r1, [sp, #52]	; 0x34
  40b1f6:	9f05      	ldr	r7, [sp, #20]
  40b1f8:	404f      	eors	r7, r1
  40b1fa:	407c      	eors	r4, r7

0040b1fc <.LVL323>:
  40b1fc:	9904      	ldr	r1, [sp, #16]
  40b1fe:	404c      	eors	r4, r1

0040b200 <.LBB751>:
  40b200:	ea4f 74f4 	mov.w	r4, r4, ror #31

0040b204 <.LBE751>:
  40b204:	ea89 0708 	eor.w	r7, r9, r8
  40b208:	ea87 070c 	eor.w	r7, r7, ip
  40b20c:	eb04 0b03 	add.w	fp, r4, r3
  40b210:	44da      	add	sl, fp
  40b212:	4457      	add	r7, sl
  40b214:	eb07 67fe 	add.w	r7, r7, lr, ror #27

0040b218 <.LBB753>:
  40b218:	ea4f 0cbc 	mov.w	ip, ip, ror #2

0040b21c <.LBE753>:
  40b21c:	4692      	mov	sl, r2
  40b21e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40b220:	ea8a 0b02 	eor.w	fp, sl, r2
  40b224:	9908      	ldr	r1, [sp, #32]
  40b226:	ea8b 0101 	eor.w	r1, fp, r1
  40b22a:	404e      	eors	r6, r1

0040b22c <.LBB755>:
  40b22c:	ea4f 76f6 	mov.w	r6, r6, ror #31

0040b230 <.LBE755>:
  40b230:	ea88 0a0c 	eor.w	sl, r8, ip
  40b234:	ea8a 0a0e 	eor.w	sl, sl, lr
  40b238:	4433      	add	r3, r6
  40b23a:	444b      	add	r3, r9
  40b23c:	449a      	add	sl, r3
  40b23e:	eb0a 6af7 	add.w	sl, sl, r7, ror #27

0040b242 <.LBB757>:
  40b242:	ea4f 0ebe 	mov.w	lr, lr, ror #2

0040b246 <.LBE757>:
        R4(e,a,b,c,d,76); R4(d,e,a,b,c,77); R4(c,d,e,a,b,78); R4(b,c,d,e,a,79);
  40b246:	9905      	ldr	r1, [sp, #20]
  40b248:	9b01      	ldr	r3, [sp, #4]
  40b24a:	404b      	eors	r3, r1
  40b24c:	9902      	ldr	r1, [sp, #8]
  40b24e:	404b      	eors	r3, r1
  40b250:	405d      	eors	r5, r3

0040b252 <.LBB759>:
  40b252:	ea4f 75f5 	mov.w	r5, r5, ror #31

0040b256 <.LBE759>:
  40b256:	ea8c 010e 	eor.w	r1, ip, lr
  40b25a:	4079      	eors	r1, r7
  40b25c:	4b28      	ldr	r3, [pc, #160]	; (40b300 <.LVL342+0x30>)
  40b25e:	eb05 0903 	add.w	r9, r5, r3
  40b262:	44c8      	add	r8, r9
  40b264:	4441      	add	r1, r8
  40b266:	eb01 61fa 	add.w	r1, r1, sl, ror #27

0040b26a <.LBB761>:
  40b26a:	ea4f 07b7 	mov.w	r7, r7, ror #2

0040b26e <.LBE761>:
  40b26e:	4690      	mov	r8, r2
  40b270:	9a06      	ldr	r2, [sp, #24]
  40b272:	ea88 0902 	eor.w	r9, r8, r2
  40b276:	9a03      	ldr	r2, [sp, #12]
  40b278:	ea89 0902 	eor.w	r9, r9, r2
  40b27c:	ea89 0904 	eor.w	r9, r9, r4
  40b280:	eb03 79f9 	add.w	r9, r3, r9, ror #31
  40b284:	44cc      	add	ip, r9
  40b286:	ea8e 0907 	eor.w	r9, lr, r7
  40b28a:	ea89 090a 	eor.w	r9, r9, sl
  40b28e:	44cc      	add	ip, r9
  40b290:	eb0c 6cf1 	add.w	ip, ip, r1, ror #27

0040b294 <.LBB763>:
  40b294:	ea4f 0aba 	mov.w	sl, sl, ror #2

0040b298 <.LBE763>:
  40b298:	9a01      	ldr	r2, [sp, #4]
  40b29a:	9c07      	ldr	r4, [sp, #28]
  40b29c:	4054      	eors	r4, r2
  40b29e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40b2a0:	4054      	eors	r4, r2
  40b2a2:	4074      	eors	r4, r6
  40b2a4:	eb03 74f4 	add.w	r4, r3, r4, ror #31
  40b2a8:	44a6      	add	lr, r4
  40b2aa:	ea87 040a 	eor.w	r4, r7, sl
  40b2ae:	404c      	eors	r4, r1
  40b2b0:	44a6      	add	lr, r4
  40b2b2:	eb0e 6efc 	add.w	lr, lr, ip, ror #27

0040b2b6 <.LBB765>:
  40b2b6:	ea4f 01b1 	mov.w	r1, r1, ror #2

0040b2ba <.LBE765>:
  40b2ba:	9a06      	ldr	r2, [sp, #24]
  40b2bc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40b2be:	4054      	eors	r4, r2

0040b2c0 <.LVL340>:
  40b2c0:	9a04      	ldr	r2, [sp, #16]
  40b2c2:	4062      	eors	r2, r4
  40b2c4:	4055      	eors	r5, r2

0040b2c6 <.LVL341>:
    #endif

        /* Add the working vars back into digest state[] */
        sha->digest[0] += a;
  40b2c6:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  40b2c8:	4413      	add	r3, r2
  40b2ca:	eb03 75f5 	add.w	r5, r3, r5, ror #31
  40b2ce:	442f      	add	r7, r5

0040b2d0 <.LVL342>:
        R4(e,a,b,c,d,76); R4(d,e,a,b,c,77); R4(c,d,e,a,b,78); R4(b,c,d,e,a,79);
  40b2d0:	ea8a 0301 	eor.w	r3, sl, r1
  40b2d4:	ea83 030c 	eor.w	r3, r3, ip
        sha->digest[0] += a;
  40b2d8:	441f      	add	r7, r3
  40b2da:	eb07 67fe 	add.w	r7, r7, lr, ror #27
  40b2de:	64c7      	str	r7, [r0, #76]	; 0x4c
        sha->digest[1] += b;
  40b2e0:	6d03      	ldr	r3, [r0, #80]	; 0x50
  40b2e2:	eb03 040e 	add.w	r4, r3, lr
  40b2e6:	6504      	str	r4, [r0, #80]	; 0x50
        sha->digest[2] += c;
  40b2e8:	6d43      	ldr	r3, [r0, #84]	; 0x54
  40b2ea:	eb03 03bc 	add.w	r3, r3, ip, ror #2
  40b2ee:	6543      	str	r3, [r0, #84]	; 0x54
        sha->digest[3] += d;
  40b2f0:	6d83      	ldr	r3, [r0, #88]	; 0x58
  40b2f2:	4419      	add	r1, r3
  40b2f4:	6581      	str	r1, [r0, #88]	; 0x58
        sha->digest[4] += e;
  40b2f6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  40b2f8:	4453      	add	r3, sl
  40b2fa:	65c3      	str	r3, [r0, #92]	; 0x5c

        (void)data; /* Not used */
    }
  40b2fc:	e002      	b.n	40b304 <.LVL342+0x34>
  40b2fe:	bf00      	nop
  40b300:	ca62c1d6 	.word	0xca62c1d6
  40b304:	b017      	add	sp, #92	; 0x5c

0040b306 <.LCFI2>:
  40b306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040b30a <.LFE15>:
  40b30a:	bf00      	nop

Disassembly of section .rodata%42:

0040b30c <.rodata%42>:
  40b30c:	50434553 	.word	0x50434553
  40b310:	52323131 	.word	0x52323131
  40b314:	00000031 	.word	0x00000031
  40b318:	43374244 	.word	0x43374244
  40b31c:	46424132 	.word	0x46424132
  40b320:	33453236 	.word	0x33453236
  40b324:	36364535 	.word	0x36364535
  40b328:	36373038 	.word	0x36373038
  40b32c:	44414542 	.word	0x44414542
  40b330:	42383032 	.word	0x42383032
  40b334:	00000000 	.word	0x00000000
  40b338:	43374244 	.word	0x43374244
  40b33c:	46424132 	.word	0x46424132
  40b340:	33453236 	.word	0x33453236
  40b344:	36364535 	.word	0x36364535
  40b348:	36373038 	.word	0x36373038
  40b34c:	44414542 	.word	0x44414542
  40b350:	38383032 	.word	0x38383032
  40b354:	00000000 	.word	0x00000000
  40b358:	45393536 	.word	0x45393536
  40b35c:	41423846 	.word	0x41423846
  40b360:	39333430 	.word	0x39333430
  40b364:	45453631 	.word	0x45453631
  40b368:	39384544 	.word	0x39384544
  40b36c:	30373131 	.word	0x30373131
  40b370:	32324232 	.word	0x32324232
  40b374:	00000000 	.word	0x00000000
  40b378:	43374244 	.word	0x43374244
  40b37c:	46424132 	.word	0x46424132
  40b380:	33453236 	.word	0x33453236
  40b384:	36374535 	.word	0x36374535
  40b388:	46443832 	.word	0x46443832
  40b38c:	35364341 	.word	0x35364341
  40b390:	35433136 	.word	0x35433136
  40b394:	00000000 	.word	0x00000000
  40b398:	37383439 	.word	0x37383439
  40b39c:	39393332 	.word	0x39393332
  40b3a0:	35413539 	.word	0x35413539
  40b3a4:	36374545 	.word	0x36374545
  40b3a8:	46353542 	.word	0x46353542
  40b3ac:	46324339 	.word	0x46324339
  40b3b0:	00383930 	.word	0x00383930
  40b3b4:	43393841 	.word	0x43393841
  40b3b8:	46413545 	.word	0x46413545
  40b3bc:	34323738 	.word	0x34323738
  40b3c0:	32413043 	.word	0x32413043
  40b3c4:	45304533 	.word	0x45304533
  40b3c8:	37464630 	.word	0x37464630
  40b3cc:	30303537 	.word	0x30303537
  40b3d0:	00000000 	.word	0x00000000
  40b3d4:	50434553 	.word	0x50434553
  40b3d8:	52383231 	.word	0x52383231
  40b3dc:	00000031 	.word	0x00000031
  40b3e0:	46464646 	.word	0x46464646
  40b3e4:	44464646 	.word	0x44464646
  40b3e8:	46464646 	.word	0x46464646
  40b3ec:	46464646 	.word	0x46464646
  40b3f0:	46464646 	.word	0x46464646
  40b3f4:	46464646 	.word	0x46464646
  40b3f8:	46464646 	.word	0x46464646
  40b3fc:	46464646 	.word	0x46464646
  40b400:	00000000 	.word	0x00000000
  40b404:	46464646 	.word	0x46464646
  40b408:	44464646 	.word	0x44464646
  40b40c:	46464646 	.word	0x46464646
  40b410:	46464646 	.word	0x46464646
  40b414:	46464646 	.word	0x46464646
  40b418:	46464646 	.word	0x46464646
  40b41c:	46464646 	.word	0x46464646
  40b420:	43464646 	.word	0x43464646
  40b424:	00000000 	.word	0x00000000
  40b428:	35373845 	.word	0x35373845
  40b42c:	31433937 	.word	0x31433937
  40b430:	39373031 	.word	0x39373031
  40b434:	44333446 	.word	0x44333446
  40b438:	34323844 	.word	0x34323844
  40b43c:	43333939 	.word	0x43333939
  40b440:	45454332 	.word	0x45454332
  40b444:	33444535 	.word	0x33444535
  40b448:	00000000 	.word	0x00000000
  40b44c:	46464646 	.word	0x46464646
  40b450:	45464646 	.word	0x45464646
  40b454:	30303030 	.word	0x30303030
  40b458:	30303030 	.word	0x30303030
  40b45c:	33413537 	.word	0x33413537
  40b460:	42314430 	.word	0x42314430
  40b464:	38333039 	.word	0x38333039
  40b468:	35313141 	.word	0x35313141
  40b46c:	00000000 	.word	0x00000000
  40b470:	46313631 	.word	0x46313631
  40b474:	32353746 	.word	0x32353746
  40b478:	39384238 	.word	0x39384238
  40b47c:	44324239 	.word	0x44324239
  40b480:	38324330 	.word	0x38324330
  40b484:	43373036 	.word	0x43373036
  40b488:	43323541 	.word	0x43323541
  40b48c:	36384235 	.word	0x36384235
  40b490:	00000000 	.word	0x00000000
  40b494:	41354643 	.word	0x41354643
  40b498:	39333843 	.word	0x39333843
  40b49c:	46414235 	.word	0x46414235
  40b4a0:	33314245 	.word	0x33314245
  40b4a4:	44323043 	.word	0x44323043
  40b4a8:	32393241 	.word	0x32393241
  40b4ac:	44454444 	.word	0x44454444
  40b4b0:	33384137 	.word	0x33384137
  40b4b4:	00000000 	.word	0x00000000
  40b4b8:	50434553 	.word	0x50434553
  40b4bc:	52303631 	.word	0x52303631
  40b4c0:	00000031 	.word	0x00000031
  40b4c4:	46464646 	.word	0x46464646
  40b4c8:	46464646 	.word	0x46464646
  40b4cc:	46464646 	.word	0x46464646
  40b4d0:	46464646 	.word	0x46464646
  40b4d4:	46464646 	.word	0x46464646
  40b4d8:	46464646 	.word	0x46464646
  40b4dc:	46464646 	.word	0x46464646
  40b4e0:	46464646 	.word	0x46464646
  40b4e4:	46464637 	.word	0x46464637
  40b4e8:	46464646 	.word	0x46464646
  40b4ec:	00000000 	.word	0x00000000
  40b4f0:	46464646 	.word	0x46464646
  40b4f4:	46464646 	.word	0x46464646
  40b4f8:	46464646 	.word	0x46464646
  40b4fc:	46464646 	.word	0x46464646
  40b500:	46464646 	.word	0x46464646
  40b504:	46464646 	.word	0x46464646
  40b508:	46464646 	.word	0x46464646
  40b50c:	46464646 	.word	0x46464646
  40b510:	46464637 	.word	0x46464637
  40b514:	43464646 	.word	0x43464646
  40b518:	00000000 	.word	0x00000000
  40b51c:	37394331 	.word	0x37394331
  40b520:	43464542 	.word	0x43464542
  40b524:	44423435 	.word	0x44423435
  40b528:	42384137 	.word	0x42384137
  40b52c:	43413536 	.word	0x43413536
  40b530:	46393846 	.word	0x46393846
  40b534:	34443138 	.word	0x34443138
  40b538:	44413444 	.word	0x44413444
  40b53c:	35363543 	.word	0x35363543
  40b540:	35344146 	.word	0x35344146
  40b544:	00000000 	.word	0x00000000
  40b548:	30303031 	.word	0x30303031
  40b54c:	30303030 	.word	0x30303030
  40b550:	30303030 	.word	0x30303030
  40b554:	30303030 	.word	0x30303030
  40b558:	30303030 	.word	0x30303030
  40b55c:	43344631 	.word	0x43344631
  40b560:	32394638 	.word	0x32394638
  40b564:	44454137 	.word	0x44454137
  40b568:	37414333 	.word	0x37414333
  40b56c:	35323235 	.word	0x35323235
  40b570:	00000037 	.word	0x00000037
  40b574:	36394134 	.word	0x36394134
  40b578:	38363542 	.word	0x38363542
  40b57c:	35464538 	.word	0x35464538
  40b580:	38323337 	.word	0x38323337
  40b584:	34363634 	.word	0x34363634
  40b588:	39383936 	.word	0x39383936
  40b58c:	33433836 	.word	0x33433836
  40b590:	39424238 	.word	0x39424238
  40b594:	42433331 	.word	0x42433331
  40b598:	32384346 	.word	0x32384346
  40b59c:	00000000 	.word	0x00000000
  40b5a0:	36413332 	.word	0x36413332
  40b5a4:	35353832 	.word	0x35353832
  40b5a8:	38363133 	.word	0x38363133
  40b5ac:	44373439 	.word	0x44373439
  40b5b0:	43443935 	.word	0x43443935
  40b5b4:	32313943 	.word	0x32313943
  40b5b8:	33323430 	.word	0x33323430
  40b5bc:	37333135 	.word	0x37333135
  40b5c0:	35434137 	.word	0x35434137
  40b5c4:	32334246 	.word	0x32334246
  40b5c8:	00000000 	.word	0x00000000
  40b5cc:	50434553 	.word	0x50434553
  40b5d0:	52323931 	.word	0x52323931
  40b5d4:	00000031 	.word	0x00000031
  40b5d8:	46464646 	.word	0x46464646
  40b5dc:	46464646 	.word	0x46464646
  40b5e0:	46464646 	.word	0x46464646
  40b5e4:	46464646 	.word	0x46464646
  40b5e8:	46464646 	.word	0x46464646
  40b5ec:	46464646 	.word	0x46464646
  40b5f0:	46464646 	.word	0x46464646
  40b5f4:	45464646 	.word	0x45464646
  40b5f8:	46464646 	.word	0x46464646
  40b5fc:	46464646 	.word	0x46464646
  40b600:	46464646 	.word	0x46464646
  40b604:	46464646 	.word	0x46464646
  40b608:	00000000 	.word	0x00000000
  40b60c:	46464646 	.word	0x46464646
  40b610:	46464646 	.word	0x46464646
  40b614:	46464646 	.word	0x46464646
  40b618:	46464646 	.word	0x46464646
  40b61c:	46464646 	.word	0x46464646
  40b620:	46464646 	.word	0x46464646
  40b624:	46464646 	.word	0x46464646
  40b628:	45464646 	.word	0x45464646
  40b62c:	46464646 	.word	0x46464646
  40b630:	46464646 	.word	0x46464646
  40b634:	46464646 	.word	0x46464646
  40b638:	43464646 	.word	0x43464646
  40b63c:	00000000 	.word	0x00000000
  40b640:	31323436 	.word	0x31323436
  40b644:	39313530 	.word	0x39313530
  40b648:	43393545 	.word	0x43393545
  40b64c:	37453038 	.word	0x37453038
  40b650:	37414630 	.word	0x37414630
  40b654:	42413945 	.word	0x42413945
  40b658:	34323237 	.word	0x34323237
  40b65c:	39343033 	.word	0x39343033
  40b660:	38424546 	.word	0x38424546
  40b664:	43454544 	.word	0x43454544
  40b668:	36343143 	.word	0x36343143
  40b66c:	31423942 	.word	0x31423942
  40b670:	00000000 	.word	0x00000000
  40b674:	46464646 	.word	0x46464646
  40b678:	46464646 	.word	0x46464646
  40b67c:	46464646 	.word	0x46464646
  40b680:	46464646 	.word	0x46464646
  40b684:	46464646 	.word	0x46464646
  40b688:	46464646 	.word	0x46464646
  40b68c:	45443939 	.word	0x45443939
  40b690:	36333846 	.word	0x36333846
  40b694:	42363431 	.word	0x42363431
  40b698:	31423943 	.word	0x31423943
  40b69c:	32443442 	.word	0x32443442
  40b6a0:	31333832 	.word	0x31333832
  40b6a4:	00000000 	.word	0x00000000
  40b6a8:	44383831 	.word	0x44383831
  40b6ac:	45303841 	.word	0x45303841
  40b6b0:	30333042 	.word	0x30333042
  40b6b4:	36463039 	.word	0x36463039
  40b6b8:	46424337 	.word	0x46424337
  40b6bc:	42453032 	.word	0x42453032
  40b6c0:	31413334 	.word	0x31413334
  40b6c4:	30303838 	.word	0x30303838
  40b6c8:	46463446 	.word	0x46463446
  40b6cc:	44464130 	.word	0x44464130
  40b6d0:	46463238 	.word	0x46463238
  40b6d4:	32313031 	.word	0x32313031
  40b6d8:	00000000 	.word	0x00000000
  40b6dc:	32393137 	.word	0x32393137
  40b6e0:	46353942 	.word	0x46353942
  40b6e4:	44384346 	.word	0x44384346
  40b6e8:	36383741 	.word	0x36383741
  40b6ec:	31303133 	.word	0x31303133
  40b6f0:	36444531 	.word	0x36444531
  40b6f4:	43343242 	.word	0x43343242
  40b6f8:	37354444 	.word	0x37354444
  40b6fc:	37394633 	.word	0x37394633
  40b700:	31314137 	.word	0x31314137
  40b704:	34393745 	.word	0x34393745
  40b708:	00313138 	.word	0x00313138
  40b70c:	50434553 	.word	0x50434553
  40b710:	52343232 	.word	0x52343232
  40b714:	00000031 	.word	0x00000031
  40b718:	46464646 	.word	0x46464646
  40b71c:	46464646 	.word	0x46464646
  40b720:	46464646 	.word	0x46464646
  40b724:	46464646 	.word	0x46464646
  40b728:	46464646 	.word	0x46464646
  40b72c:	46464646 	.word	0x46464646
  40b730:	46464646 	.word	0x46464646
  40b734:	46464646 	.word	0x46464646
  40b738:	30303030 	.word	0x30303030
  40b73c:	30303030 	.word	0x30303030
  40b740:	30303030 	.word	0x30303030
  40b744:	30303030 	.word	0x30303030
  40b748:	30303030 	.word	0x30303030
  40b74c:	31303030 	.word	0x31303030
  40b750:	00000000 	.word	0x00000000
  40b754:	46464646 	.word	0x46464646
  40b758:	46464646 	.word	0x46464646
  40b75c:	46464646 	.word	0x46464646
  40b760:	46464646 	.word	0x46464646
  40b764:	46464646 	.word	0x46464646
  40b768:	46464646 	.word	0x46464646
  40b76c:	46464646 	.word	0x46464646
  40b770:	45464646 	.word	0x45464646
  40b774:	46464646 	.word	0x46464646
  40b778:	46464646 	.word	0x46464646
  40b77c:	46464646 	.word	0x46464646
  40b780:	46464646 	.word	0x46464646
  40b784:	46464646 	.word	0x46464646
  40b788:	45464646 	.word	0x45464646
  40b78c:	00000000 	.word	0x00000000
  40b790:	35303442 	.word	0x35303442
  40b794:	35384130 	.word	0x35384130
  40b798:	34304330 	.word	0x34304330
  40b79c:	42413342 	.word	0x42413342
  40b7a0:	31343546 	.word	0x31343546
  40b7a4:	36353233 	.word	0x36353233
  40b7a8:	34343035 	.word	0x34343035
  40b7ac:	37423042 	.word	0x37423042
  40b7b0:	46423744 	.word	0x46423744
  40b7b4:	41423844 	.word	0x41423844
  40b7b8:	42303732 	.word	0x42303732
  40b7bc:	33343933 	.word	0x33343933
  40b7c0:	35353332 	.word	0x35353332
  40b7c4:	34424646 	.word	0x34424646
  40b7c8:	00000000 	.word	0x00000000
  40b7cc:	46464646 	.word	0x46464646
  40b7d0:	46464646 	.word	0x46464646
  40b7d4:	46464646 	.word	0x46464646
  40b7d8:	46464646 	.word	0x46464646
  40b7dc:	46464646 	.word	0x46464646
  40b7e0:	46464646 	.word	0x46464646
  40b7e4:	46464646 	.word	0x46464646
  40b7e8:	32413631 	.word	0x32413631
  40b7ec:	38423045 	.word	0x38423045
  40b7f0:	45333046 	.word	0x45333046
  40b7f4:	44443331 	.word	0x44443331
  40b7f8:	35343932 	.word	0x35343932
  40b7fc:	43354335 	.word	0x43354335
  40b800:	44334132 	.word	0x44334132
  40b804:	00000000 	.word	0x00000000
  40b808:	45303742 	.word	0x45303742
  40b80c:	44424330 	.word	0x44424330
  40b810:	34424236 	.word	0x34424236
  40b814:	46374642 	.word	0x46374642
  40b818:	33313233 	.word	0x33313233
  40b81c:	39423039 	.word	0x39423039
  40b820:	33304134 	.word	0x33304134
  40b824:	33443143 	.word	0x33443143
  40b828:	32433635 	.word	0x32433635
  40b82c:	32323131 	.word	0x32323131
  40b830:	32333433 	.word	0x32333433
  40b834:	36443038 	.word	0x36443038
  40b838:	43353131 	.word	0x43353131
  40b83c:	31324431 	.word	0x31324431
  40b840:	00000000 	.word	0x00000000
  40b844:	37334442 	.word	0x37334442
  40b848:	38383336 	.word	0x38383336
  40b84c:	37463542 	.word	0x37463542
  40b850:	42463332 	.word	0x42463332
  40b854:	32324334 	.word	0x32324334
  40b858:	36454644 	.word	0x36454644
  40b85c:	33344443 	.word	0x33344443
  40b860:	30413537 	.word	0x30413537
  40b864:	37304135 	.word	0x37304135
  40b868:	34363734 	.word	0x34363734
  40b86c:	35443434 	.word	0x35443434
  40b870:	39393138 	.word	0x39393138
  40b874:	30303538 	.word	0x30303538
  40b878:	34334537 	.word	0x34334537
  40b87c:	00000000 	.word	0x00000000
  40b880:	4d495250 	.word	0x4d495250
  40b884:	39333245 	.word	0x39333245
  40b888:	00003156 	.word	0x00003156
  40b88c:	46464637 	.word	0x46464637
  40b890:	46464646 	.word	0x46464646
  40b894:	46464646 	.word	0x46464646
  40b898:	46464646 	.word	0x46464646
  40b89c:	46464646 	.word	0x46464646
  40b8a0:	46464646 	.word	0x46464646
  40b8a4:	46464637 	.word	0x46464637
  40b8a8:	46464646 	.word	0x46464646
  40b8ac:	46464646 	.word	0x46464646
  40b8b0:	30303038 	.word	0x30303038
  40b8b4:	30303030 	.word	0x30303030
  40b8b8:	30303030 	.word	0x30303030
  40b8bc:	46464637 	.word	0x46464637
  40b8c0:	46464646 	.word	0x46464646
  40b8c4:	46464646 	.word	0x46464646
  40b8c8:	00000000 	.word	0x00000000
  40b8cc:	46464637 	.word	0x46464637
  40b8d0:	46464646 	.word	0x46464646
  40b8d4:	46464646 	.word	0x46464646
  40b8d8:	46464646 	.word	0x46464646
  40b8dc:	46464646 	.word	0x46464646
  40b8e0:	46464646 	.word	0x46464646
  40b8e4:	46464637 	.word	0x46464637
  40b8e8:	46464646 	.word	0x46464646
  40b8ec:	46464646 	.word	0x46464646
  40b8f0:	30303038 	.word	0x30303038
  40b8f4:	30303030 	.word	0x30303030
  40b8f8:	30303030 	.word	0x30303030
  40b8fc:	46464637 	.word	0x46464637
  40b900:	46464646 	.word	0x46464646
  40b904:	43464646 	.word	0x43464646
  40b908:	00000000 	.word	0x00000000
  40b90c:	31304236 	.word	0x31304236
  40b910:	42334336 	.word	0x42334336
  40b914:	31464344 	.word	0x31464344
  40b918:	31343938 	.word	0x31343938
  40b91c:	36443044 	.word	0x36443044
  40b920:	32393435 	.word	0x32393435
  40b924:	35373431 	.word	0x35373431
  40b928:	31374143 	.word	0x31374143
  40b92c:	42443941 	.word	0x42443941
  40b930:	32424632 	.word	0x32424632
  40b934:	44314437 	.word	0x44314437
  40b938:	39373733 	.word	0x39373733
  40b93c:	35383136 	.word	0x35383136
  40b940:	34393243 	.word	0x34393243
  40b944:	41304332 	.word	0x41304332
  40b948:	00000000 	.word	0x00000000
  40b94c:	46464637 	.word	0x46464637
  40b950:	46464646 	.word	0x46464646
  40b954:	46464646 	.word	0x46464646
  40b958:	46464646 	.word	0x46464646
  40b95c:	46464646 	.word	0x46464646
  40b960:	46464646 	.word	0x46464646
  40b964:	46464637 	.word	0x46464637
  40b968:	45394646 	.word	0x45394646
  40b96c:	41394535 	.word	0x41394535
  40b970:	44354639 	.word	0x44354639
  40b974:	31373039 	.word	0x31373039
  40b978:	31444246 	.word	0x31444246
  40b97c:	36323235 	.word	0x36323235
  40b980:	30393838 	.word	0x30393838
  40b984:	42304439 	.word	0x42304439
  40b988:	00000000 	.word	0x00000000
  40b98c:	41464630 	.word	0x41464630
  40b990:	43333639 	.word	0x43333639
  40b994:	38414344 	.word	0x38414344
  40b998:	43363138 	.word	0x43363138
  40b99c:	33334343 	.word	0x33334343
  40b9a0:	34363842 	.word	0x34363842
  40b9a4:	44454232 	.word	0x44454232
  40b9a8:	35303946 	.word	0x35303946
  40b9ac:	33443343 	.word	0x33443343
  40b9b0:	37353835 	.word	0x37353835
  40b9b4:	46334433 	.word	0x46334433
  40b9b8:	42463732 	.word	0x42463732
  40b9bc:	42334442 	.word	0x42334442
  40b9c0:	39424333 	.word	0x39424333
  40b9c4:	46414141 	.word	0x46414141
  40b9c8:	00000000 	.word	0x00000000
  40b9cc:	42454437 	.word	0x42454437
  40b9d0:	34453845 	.word	0x34453845
  40b9d4:	41303945 	.word	0x41303945
  40b9d8:	45414435 	.word	0x45414435
  40b9dc:	30344536 	.word	0x30344536
  40b9e0:	41433435 	.word	0x41433435
  40b9e4:	42303335 	.word	0x42303335
  40b9e8:	36343041 	.word	0x36343041
  40b9ec:	33423435 	.word	0x33423435
  40b9f0:	38313836 	.word	0x38313836
  40b9f4:	32324543 	.word	0x32324543
  40b9f8:	39334236 	.word	0x39334236
  40b9fc:	42434346 	.word	0x42434346
  40ba00:	32304237 	.word	0x32304237
  40ba04:	45413146 	.word	0x45413146
  40ba08:	00000000 	.word	0x00000000
  40ba0c:	50434553 	.word	0x50434553
  40ba10:	52363532 	.word	0x52363532
  40ba14:	00000031 	.word	0x00000031
  40ba18:	46464646 	.word	0x46464646
  40ba1c:	46464646 	.word	0x46464646
  40ba20:	30303030 	.word	0x30303030
  40ba24:	31303030 	.word	0x31303030
  40ba28:	30303030 	.word	0x30303030
  40ba2c:	30303030 	.word	0x30303030
  40ba30:	30303030 	.word	0x30303030
  40ba34:	30303030 	.word	0x30303030
  40ba38:	30303030 	.word	0x30303030
  40ba3c:	30303030 	.word	0x30303030
  40ba40:	46464646 	.word	0x46464646
  40ba44:	46464646 	.word	0x46464646
  40ba48:	46464646 	.word	0x46464646
  40ba4c:	46464646 	.word	0x46464646
  40ba50:	46464646 	.word	0x46464646
  40ba54:	46464646 	.word	0x46464646
  40ba58:	00000000 	.word	0x00000000
  40ba5c:	46464646 	.word	0x46464646
  40ba60:	46464646 	.word	0x46464646
  40ba64:	30303030 	.word	0x30303030
  40ba68:	31303030 	.word	0x31303030
  40ba6c:	30303030 	.word	0x30303030
  40ba70:	30303030 	.word	0x30303030
  40ba74:	30303030 	.word	0x30303030
  40ba78:	30303030 	.word	0x30303030
  40ba7c:	30303030 	.word	0x30303030
  40ba80:	30303030 	.word	0x30303030
  40ba84:	46464646 	.word	0x46464646
  40ba88:	46464646 	.word	0x46464646
  40ba8c:	46464646 	.word	0x46464646
  40ba90:	46464646 	.word	0x46464646
  40ba94:	46464646 	.word	0x46464646
  40ba98:	43464646 	.word	0x43464646
  40ba9c:	00000000 	.word	0x00000000
  40baa0:	36434135 	.word	0x36434135
  40baa4:	38443533 	.word	0x38443533
  40baa8:	41334141 	.word	0x41334141
  40baac:	37453339 	.word	0x37453339
  40bab0:	42453342 	.word	0x42453342
  40bab4:	35354442 	.word	0x35354442
  40bab8:	38393637 	.word	0x38393637
  40babc:	43423638 	.word	0x43423638
  40bac0:	44313536 	.word	0x44313536
  40bac4:	30423630 	.word	0x30423630
  40bac8:	33354343 	.word	0x33354343
  40bacc:	36463042 	.word	0x36463042
  40bad0:	45434233 	.word	0x45434233
  40bad4:	45334333 	.word	0x45334333
  40bad8:	32443732 	.word	0x32443732
  40badc:	42343036 	.word	0x42343036
  40bae0:	00000000 	.word	0x00000000
  40bae4:	46464646 	.word	0x46464646
  40bae8:	46464646 	.word	0x46464646
  40baec:	30303030 	.word	0x30303030
  40baf0:	30303030 	.word	0x30303030
  40baf4:	46464646 	.word	0x46464646
  40baf8:	46464646 	.word	0x46464646
  40bafc:	46464646 	.word	0x46464646
  40bb00:	46464646 	.word	0x46464646
  40bb04:	36454342 	.word	0x36454342
  40bb08:	44414146 	.word	0x44414146
  40bb0c:	37313741 	.word	0x37313741
  40bb10:	34384539 	.word	0x34384539
  40bb14:	39423346 	.word	0x39423346
  40bb18:	32434143 	.word	0x32434143
  40bb1c:	33364346 	.word	0x33364346
  40bb20:	31353532 	.word	0x31353532
  40bb24:	00000000 	.word	0x00000000
  40bb28:	37314236 	.word	0x37314236
  40bb2c:	32463144 	.word	0x32463144
  40bb30:	43323145 	.word	0x43323145
  40bb34:	37343234 	.word	0x37343234
  40bb38:	43423846 	.word	0x43423846
  40bb3c:	35453645 	.word	0x35453645
  40bb40:	34413336 	.word	0x34413336
  40bb44:	32463034 	.word	0x32463034
  40bb48:	33303737 	.word	0x33303737
  40bb4c:	31384437 	.word	0x31384437
  40bb50:	42454432 	.word	0x42454432
  40bb54:	30413333 	.word	0x30413333
  40bb58:	31413446 	.word	0x31413446
  40bb5c:	35343933 	.word	0x35343933
  40bb60:	38393844 	.word	0x38393844
  40bb64:	36393243 	.word	0x36393243
  40bb68:	00000000 	.word	0x00000000
  40bb6c:	33454634 	.word	0x33454634
  40bb70:	32453234 	.word	0x32453234
  40bb74:	41314546 	.word	0x41314546
  40bb78:	42394637 	.word	0x42394637
  40bb7c:	37454538 	.word	0x37454538
  40bb80:	41344245 	.word	0x41344245
  40bb84:	46304337 	.word	0x46304337
  40bb88:	36314539 	.word	0x36314539
  40bb8c:	45434232 	.word	0x45434232
  40bb90:	37353333 	.word	0x37353333
  40bb94:	31334236 	.word	0x31334236
  40bb98:	45434535 	.word	0x45434535
  40bb9c:	36424243 	.word	0x36424243
  40bba0:	38363034 	.word	0x38363034
  40bba4:	46423733 	.word	0x46423733
  40bba8:	35463135 	.word	0x35463135
  40bbac:	00000000 	.word	0x00000000
  40bbb0:	50434553 	.word	0x50434553
  40bbb4:	52343833 	.word	0x52343833
  40bbb8:	00000031 	.word	0x00000031
  40bbbc:	46464646 	.word	0x46464646
  40bbc0:	46464646 	.word	0x46464646
  40bbc4:	46464646 	.word	0x46464646
  40bbc8:	46464646 	.word	0x46464646
  40bbcc:	46464646 	.word	0x46464646
  40bbd0:	46464646 	.word	0x46464646
  40bbd4:	46464646 	.word	0x46464646
  40bbd8:	46464646 	.word	0x46464646
  40bbdc:	46464646 	.word	0x46464646
  40bbe0:	46464646 	.word	0x46464646
  40bbe4:	46464646 	.word	0x46464646
  40bbe8:	46464646 	.word	0x46464646
  40bbec:	46464646 	.word	0x46464646
  40bbf0:	46464646 	.word	0x46464646
  40bbf4:	46464646 	.word	0x46464646
  40bbf8:	45464646 	.word	0x45464646
  40bbfc:	46464646 	.word	0x46464646
  40bc00:	46464646 	.word	0x46464646
  40bc04:	30303030 	.word	0x30303030
  40bc08:	30303030 	.word	0x30303030
  40bc0c:	30303030 	.word	0x30303030
  40bc10:	30303030 	.word	0x30303030
  40bc14:	46464646 	.word	0x46464646
  40bc18:	46464646 	.word	0x46464646
  40bc1c:	00000000 	.word	0x00000000
  40bc20:	46464646 	.word	0x46464646
  40bc24:	46464646 	.word	0x46464646
  40bc28:	46464646 	.word	0x46464646
  40bc2c:	46464646 	.word	0x46464646
  40bc30:	46464646 	.word	0x46464646
  40bc34:	46464646 	.word	0x46464646
  40bc38:	46464646 	.word	0x46464646
  40bc3c:	46464646 	.word	0x46464646
  40bc40:	46464646 	.word	0x46464646
  40bc44:	46464646 	.word	0x46464646
  40bc48:	46464646 	.word	0x46464646
  40bc4c:	46464646 	.word	0x46464646
  40bc50:	46464646 	.word	0x46464646
  40bc54:	46464646 	.word	0x46464646
  40bc58:	46464646 	.word	0x46464646
  40bc5c:	45464646 	.word	0x45464646
  40bc60:	46464646 	.word	0x46464646
  40bc64:	46464646 	.word	0x46464646
  40bc68:	30303030 	.word	0x30303030
  40bc6c:	30303030 	.word	0x30303030
  40bc70:	30303030 	.word	0x30303030
  40bc74:	30303030 	.word	0x30303030
  40bc78:	46464646 	.word	0x46464646
  40bc7c:	43464646 	.word	0x43464646
  40bc80:	00000000 	.word	0x00000000
  40bc84:	31333342 	.word	0x31333342
  40bc88:	37414632 	.word	0x37414632
  40bc8c:	45333245 	.word	0x45333245
  40bc90:	34453745 	.word	0x34453745
  40bc94:	45383839 	.word	0x45383839
  40bc98:	42363530 	.word	0x42363530
  40bc9c:	38463345 	.word	0x38463345
  40bca0:	39314432 	.word	0x39314432
  40bca4:	44313831 	.word	0x44313831
  40bca8:	45364339 	.word	0x45364339
  40bcac:	31384546 	.word	0x31384546
  40bcb0:	32313134 	.word	0x32313134
  40bcb4:	34313330 	.word	0x34313330
  40bcb8:	46383830 	.word	0x46383830
  40bcbc:	33313035 	.word	0x33313035
  40bcc0:	41353738 	.word	0x41353738
  40bcc4:	36353643 	.word	0x36353643
  40bcc8:	44383933 	.word	0x44383933
  40bccc:	45324138 	.word	0x45324138
  40bcd0:	44393144 	.word	0x44393144
  40bcd4:	35384132 	.word	0x35384132
  40bcd8:	44453843 	.word	0x44453843
  40bcdc:	43453344 	.word	0x43453344
  40bce0:	46454132 	.word	0x46454132
  40bce4:	00000000 	.word	0x00000000
  40bce8:	46464646 	.word	0x46464646
  40bcec:	46464646 	.word	0x46464646
  40bcf0:	46464646 	.word	0x46464646
  40bcf4:	46464646 	.word	0x46464646
  40bcf8:	46464646 	.word	0x46464646
  40bcfc:	46464646 	.word	0x46464646
  40bd00:	46464646 	.word	0x46464646
  40bd04:	46464646 	.word	0x46464646
  40bd08:	46464646 	.word	0x46464646
  40bd0c:	46464646 	.word	0x46464646
  40bd10:	46464646 	.word	0x46464646
  40bd14:	46464646 	.word	0x46464646
  40bd18:	33363743 	.word	0x33363743
  40bd1c:	31384434 	.word	0x31384434
  40bd20:	37333446 	.word	0x37333446
  40bd24:	46444432 	.word	0x46444432
  40bd28:	41313835 	.word	0x41313835
  40bd2c:	32424430 	.word	0x32424430
  40bd30:	30423834 	.word	0x30423834
  40bd34:	41373741 	.word	0x41373741
  40bd38:	43454345 	.word	0x43454345
  40bd3c:	41363931 	.word	0x41363931
  40bd40:	35434343 	.word	0x35434343
  40bd44:	33373932 	.word	0x33373932
  40bd48:	00000000 	.word	0x00000000
  40bd4c:	37384141 	.word	0x37384141
  40bd50:	32324143 	.word	0x32324143
  40bd54:	42384542 	.word	0x42384542
  40bd58:	37333530 	.word	0x37333530
  40bd5c:	31424538 	.word	0x31424538
  40bd60:	45313743 	.word	0x45313743
  40bd64:	30323346 	.word	0x30323346
  40bd68:	34374441 	.word	0x34374441
  40bd6c:	44314536 	.word	0x44314536
  40bd70:	32364233 	.word	0x32364233
  40bd74:	37414238 	.word	0x37414238
  40bd78:	38394239 	.word	0x38394239
  40bd7c:	37463935 	.word	0x37463935
  40bd80:	30453134 	.word	0x30453134
  40bd84:	34353238 	.word	0x34353238
  40bd88:	38334132 	.word	0x38334132
  40bd8c:	32303535 	.word	0x32303535
  40bd90:	44353246 	.word	0x44353246
  40bd94:	35354642 	.word	0x35354642
  40bd98:	43363932 	.word	0x43363932
  40bd9c:	34354133 	.word	0x34354133
  40bda0:	38334535 	.word	0x38334535
  40bda4:	36373237 	.word	0x36373237
  40bda8:	37424130 	.word	0x37424130
  40bdac:	00000000 	.word	0x00000000
  40bdb0:	37313633 	.word	0x37313633
  40bdb4:	41344544 	.word	0x41344544
  40bdb8:	36323639 	.word	0x36323639
  40bdbc:	46364332 	.word	0x46364332
  40bdc0:	45394435 	.word	0x45394435
  40bdc4:	46423839 	.word	0x46423839
  40bdc8:	32393239 	.word	0x32393239
  40bdcc:	39324344 	.word	0x39324344
  40bdd0:	34463846 	.word	0x34463846
  40bdd4:	44424431 	.word	0x44424431
  40bdd8:	41393832 	.word	0x41393832
  40bddc:	43373431 	.word	0x43373431
  40bde0:	41443945 	.word	0x41443945
  40bde4:	33313133 	.word	0x33313133
  40bde8:	30463542 	.word	0x30463542
  40bdec:	30433842 	.word	0x30433842
  40bdf0:	30364130 	.word	0x30364130
  40bdf4:	45433142 	.word	0x45433142
  40bdf8:	45374431 	.word	0x45374431
  40bdfc:	44393138 	.word	0x44393138
  40be00:	33344137 	.word	0x33344137
  40be04:	43374431 	.word	0x43374431
  40be08:	41453039 	.word	0x41453039
  40be0c:	46354530 	.word	0x46354530
  40be10:	00000000 	.word	0x00000000
  40be14:	50434553 	.word	0x50434553
  40be18:	52313235 	.word	0x52313235
  40be1c:	00000031 	.word	0x00000031
  40be20:	46464631 	.word	0x46464631
  40be24:	46464646 	.word	0x46464646
  40be28:	46464646 	.word	0x46464646
  40be2c:	46464646 	.word	0x46464646
  40be30:	46464646 	.word	0x46464646
  40be34:	46464646 	.word	0x46464646
  40be38:	46464646 	.word	0x46464646
  40be3c:	46464646 	.word	0x46464646
  40be40:	46464646 	.word	0x46464646
  40be44:	46464646 	.word	0x46464646
  40be48:	46464646 	.word	0x46464646
  40be4c:	46464646 	.word	0x46464646
  40be50:	46464646 	.word	0x46464646
  40be54:	46464646 	.word	0x46464646
  40be58:	46464646 	.word	0x46464646
  40be5c:	46464646 	.word	0x46464646
  40be60:	46464646 	.word	0x46464646
  40be64:	46464646 	.word	0x46464646
  40be68:	46464646 	.word	0x46464646
  40be6c:	46464646 	.word	0x46464646
  40be70:	46464646 	.word	0x46464646
  40be74:	46464646 	.word	0x46464646
  40be78:	46464646 	.word	0x46464646
  40be7c:	46464646 	.word	0x46464646
  40be80:	46464646 	.word	0x46464646
  40be84:	46464646 	.word	0x46464646
  40be88:	46464646 	.word	0x46464646
  40be8c:	46464646 	.word	0x46464646
  40be90:	46464646 	.word	0x46464646
  40be94:	46464646 	.word	0x46464646
  40be98:	46464646 	.word	0x46464646
  40be9c:	46464646 	.word	0x46464646
  40bea0:	00464646 	.word	0x00464646
  40bea4:	46464631 	.word	0x46464631
  40bea8:	46464646 	.word	0x46464646
  40beac:	46464646 	.word	0x46464646
  40beb0:	46464646 	.word	0x46464646
  40beb4:	46464646 	.word	0x46464646
  40beb8:	46464646 	.word	0x46464646
  40bebc:	46464646 	.word	0x46464646
  40bec0:	46464646 	.word	0x46464646
  40bec4:	46464646 	.word	0x46464646
  40bec8:	46464646 	.word	0x46464646
  40becc:	46464646 	.word	0x46464646
  40bed0:	46464646 	.word	0x46464646
  40bed4:	46464646 	.word	0x46464646
  40bed8:	46464646 	.word	0x46464646
  40bedc:	46464646 	.word	0x46464646
  40bee0:	46464646 	.word	0x46464646
  40bee4:	46464646 	.word	0x46464646
  40bee8:	46464646 	.word	0x46464646
  40beec:	46464646 	.word	0x46464646
  40bef0:	46464646 	.word	0x46464646
  40bef4:	46464646 	.word	0x46464646
  40bef8:	46464646 	.word	0x46464646
  40befc:	46464646 	.word	0x46464646
  40bf00:	46464646 	.word	0x46464646
  40bf04:	46464646 	.word	0x46464646
  40bf08:	46464646 	.word	0x46464646
  40bf0c:	46464646 	.word	0x46464646
  40bf10:	46464646 	.word	0x46464646
  40bf14:	46464646 	.word	0x46464646
  40bf18:	46464646 	.word	0x46464646
  40bf1c:	46464646 	.word	0x46464646
  40bf20:	46464646 	.word	0x46464646
  40bf24:	00434646 	.word	0x00434646
  40bf28:	35393135 	.word	0x35393135
  40bf2c:	39424533 	.word	0x39424533
  40bf30:	45383136 	.word	0x45383136
  40bf34:	41394331 	.word	0x41394331
  40bf38:	32394631 	.word	0x32394631
  40bf3c:	31324139 	.word	0x31324139
  40bf40:	36423041 	.word	0x36423041
  40bf44:	30343538 	.word	0x30343538
  40bf48:	32414545 	.word	0x32414545
  40bf4c:	32374144 	.word	0x32374144
  40bf50:	39394235 	.word	0x39394235
  40bf54:	35313342 	.word	0x35313342
  40bf58:	38423346 	.word	0x38423346
  40bf5c:	39383442 	.word	0x39383442
  40bf60:	45383139 	.word	0x45383139
  40bf64:	39303146 	.word	0x39303146
  40bf68:	36353145 	.word	0x36353145
  40bf6c:	39333931 	.word	0x39333931
  40bf70:	43453135 	.word	0x43453135
  40bf74:	33394537 	.word	0x33394537
  40bf78:	36314237 	.word	0x36314237
  40bf7c:	30433235 	.word	0x30433235
  40bf80:	42334442 	.word	0x42334442
  40bf84:	46423142 	.word	0x46423142
  40bf88:	35333730 	.word	0x35333730
  40bf8c:	46443337 	.word	0x46443337
  40bf90:	44333838 	.word	0x44333838
  40bf94:	34334332 	.word	0x34334332
  40bf98:	46453146 	.word	0x46453146
  40bf9c:	46313534 	.word	0x46313534
  40bfa0:	42363444 	.word	0x42363444
  40bfa4:	46333035 	.word	0x46333035
  40bfa8:	00003030 	.word	0x00003030
  40bfac:	46464631 	.word	0x46464631
  40bfb0:	46464646 	.word	0x46464646
  40bfb4:	46464646 	.word	0x46464646
  40bfb8:	46464646 	.word	0x46464646
  40bfbc:	46464646 	.word	0x46464646
  40bfc0:	46464646 	.word	0x46464646
  40bfc4:	46464646 	.word	0x46464646
  40bfc8:	46464646 	.word	0x46464646
  40bfcc:	46464646 	.word	0x46464646
  40bfd0:	46464646 	.word	0x46464646
  40bfd4:	46464646 	.word	0x46464646
  40bfd8:	46464646 	.word	0x46464646
  40bfdc:	46464646 	.word	0x46464646
  40bfe0:	46464646 	.word	0x46464646
  40bfe4:	46464646 	.word	0x46464646
  40bfe8:	46464646 	.word	0x46464646
  40bfec:	35414646 	.word	0x35414646
  40bff0:	38363831 	.word	0x38363831
  40bff4:	42333837 	.word	0x42333837
  40bff8:	39463246 	.word	0x39463246
  40bffc:	37423636 	.word	0x37423636
  40c000:	30434346 	.word	0x30434346
  40c004:	46383431 	.word	0x46383431
  40c008:	41393037 	.word	0x41393037
  40c00c:	33304435 	.word	0x33304435
  40c010:	43354242 	.word	0x43354242
  40c014:	38384239 	.word	0x38384239
  40c018:	34433939 	.word	0x34433939
  40c01c:	42454137 	.word	0x42454137
  40c020:	42463642 	.word	0x42463642
  40c024:	39453137 	.word	0x39453137
  40c028:	36383331 	.word	0x36383331
  40c02c:	00393034 	.word	0x00393034
  40c030:	35383643 	.word	0x35383643
  40c034:	36304538 	.word	0x36304538
  40c038:	34303742 	.word	0x34303742
  40c03c:	39453430 	.word	0x39453430
  40c040:	45394443 	.word	0x45394443
  40c044:	42434533 	.word	0x42434533
  40c048:	33323636 	.word	0x33323636
  40c04c:	34423539 	.word	0x34423539
  40c050:	43393234 	.word	0x43393234
  40c054:	31383436 	.word	0x31383436
  40c058:	35303933 	.word	0x35303933
  40c05c:	35424633 	.word	0x35424633
  40c060:	38463132 	.word	0x38463132
  40c064:	46413832 	.word	0x46413832
  40c068:	42363036 	.word	0x42363036
  40c06c:	44334434 	.word	0x44334434
  40c070:	31414142 	.word	0x31414142
  40c074:	45354234 	.word	0x45354234
  40c078:	46453737 	.word	0x46453737
  40c07c:	39353745 	.word	0x39353745
  40c080:	45463832 	.word	0x45463832
  40c084:	31434431 	.word	0x31434431
  40c088:	32413732 	.word	0x32413732
  40c08c:	38414646 	.word	0x38414646
  40c090:	33334544 	.word	0x33334544
  40c094:	33423834 	.word	0x33423834
  40c098:	35383143 	.word	0x35383143
  40c09c:	32344136 	.word	0x32344136
  40c0a0:	39464239 	.word	0x39464239
  40c0a4:	45374537 	.word	0x45374537
  40c0a8:	32433133 	.word	0x32433133
  40c0ac:	44423545 	.word	0x44423545
  40c0b0:	00003636 	.word	0x00003636
  40c0b4:	33383131 	.word	0x33383131
  40c0b8:	36393239 	.word	0x36393239
  40c0bc:	39383741 	.word	0x39383741
  40c0c0:	43423341 	.word	0x43423341
  40c0c4:	35343030 	.word	0x35343030
  40c0c8:	35413843 	.word	0x35413843
  40c0cc:	32344246 	.word	0x32344246
  40c0d0:	31443743 	.word	0x31443743
  40c0d4:	39394442 	.word	0x39394442
  40c0d8:	34354638 	.word	0x34354638
  40c0dc:	35393434 	.word	0x35393434
  40c0e0:	34423937 	.word	0x34423937
  40c0e4:	31383634 	.word	0x31383634
  40c0e8:	42464137 	.word	0x42464137
  40c0ec:	32373144 	.word	0x32373144
  40c0f0:	36453337 	.word	0x36453337
  40c0f4:	39433236 	.word	0x39433236
  40c0f8:	37454537 	.word	0x37454537
  40c0fc:	35393932 	.word	0x35393932
  40c100:	32344645 	.word	0x32344645
  40c104:	43303436 	.word	0x43303436
  40c108:	42303535 	.word	0x42303535
  40c10c:	33313039 	.word	0x33313039
  40c110:	30444146 	.word	0x30444146
  40c114:	33313637 	.word	0x33313637
  40c118:	37433335 	.word	0x37433335
  40c11c:	41363830 	.word	0x41363830
  40c120:	43323732 	.word	0x43323732
  40c124:	38303432 	.word	0x38303432
  40c128:	39454238 	.word	0x39454238
  40c12c:	39363734 	.word	0x39363734
  40c130:	36314446 	.word	0x36314446
  40c134:	00303536 	.word	0x00303536

Disassembly of section .dinit%43:

0040c138 <.dinit>:
  40c138:	2040d6a4 	.word	0x2040d6a4
  40c13c:	0000001c 	.word	0x0000001c
  40c140:	00000000 	.word	0x00000000
  40c144:	2040d74c 	.word	0x2040d74c
  40c148:	00000008 	.word	0x00000008
  40c14c:	00000001 	.word	0x00000001
  40c150:	00000000 	.word	0x00000000
  40c154:	2040d684 	.word	0x2040d684
  40c158:	2040c854 	.word	0x2040c854
  40c15c:	00000004 	.word	0x00000004
  40c160:	00000001 	.word	0x00000001
  40c164:	00000400 	.word	0x00000400
  40c168:	2040d754 	.word	0x2040d754
  40c16c:	00000008 	.word	0x00000008
  40c170:	00000001 	.word	0x00000001
  40c174:	2040d6c0 	.word	0x2040d6c0
  40c178:	00000017 	.word	0x00000017
  40c17c:	2040d6c0 	.word	0x2040d6c0
  40c180:	0000001c 	.word	0x0000001c
  40c184:	00000001 	.word	0x00000001
  40c188:	00422425 	.word	0x00422425
  40c18c:	00422401 	.word	0x00422401
  40c190:	004225b5 	.word	0x004225b5
  40c194:	0042240d 	.word	0x0042240d
  40c198:	004223e9 	.word	0x004223e9
  40c19c:	004223f5 	.word	0x004223f5
  40c1a0:	00422419 	.word	0x00422419
  40c1a4:	20400000 	.word	0x20400000
  40c1a8:	0000000c 	.word	0x0000000c
  40c1ac:	00000000 	.word	0x00000000
  40c1b0:	20400054 	.word	0x20400054
  40c1b4:	0000c800 	.word	0x0000c800
  40c1b8:	00000000 	.word	0x00000000
  40c1bc:	2040d75c 	.word	0x2040d75c
  40c1c0:	00000004 	.word	0x00000004
  40c1c4:	00000000 	.word	0x00000000
  40c1c8:	2040d534 	.word	0x2040d534
  40c1cc:	00000050 	.word	0x00000050
  40c1d0:	00000001 	.word	0x00000001
  40c1d4:	00010100 	.word	0x00010100
	...
  40c224:	2040d760 	.word	0x2040d760
  40c228:	00000004 	.word	0x00000004
  40c22c:	00000000 	.word	0x00000000
  40c230:	2040d764 	.word	0x2040d764
  40c234:	00000004 	.word	0x00000004
  40c238:	00000000 	.word	0x00000000
  40c23c:	2040d6dc 	.word	0x2040d6dc
  40c240:	00000014 	.word	0x00000014
  40c244:	00000001 	.word	0x00000001
  40c248:	00000000 	.word	0x00000000
  40c24c:	00420a88 	.word	0x00420a88
  40c250:	00000000 	.word	0x00000000
  40c254:	00000013 	.word	0x00000013
  40c258:	00000007 	.word	0x00000007
  40c25c:	2040d6f0 	.word	0x2040d6f0
  40c260:	00000014 	.word	0x00000014
  40c264:	00000001 	.word	0x00000001
  40c268:	0041f86c 	.word	0x0041f86c
  40c26c:	0041f7f4 	.word	0x0041f7f4
  40c270:	00000000 	.word	0x00000000
  40c274:	0000001e 	.word	0x0000001e
  40c278:	0000000f 	.word	0x0000000f
  40c27c:	2040d704 	.word	0x2040d704
  40c280:	00000014 	.word	0x00000014
  40c284:	00000001 	.word	0x00000001
  40c288:	00412498 	.word	0x00412498
  40c28c:	0041fa44 	.word	0x0041fa44
  40c290:	00000101 	.word	0x00000101
  40c294:	0000011e 	.word	0x0000011e
  40c298:	0000000f 	.word	0x0000000f
  40c29c:	2040d740 	.word	0x2040d740
  40c2a0:	0000000c 	.word	0x0000000c
  40c2a4:	00000000 	.word	0x00000000
  40c2a8:	2040d584 	.word	0x2040d584
  40c2ac:	00000050 	.word	0x00000050
  40c2b0:	00000000 	.word	0x00000000
  40c2b4:	2040d088 	.word	0x2040d088
  40c2b8:	00000200 	.word	0x00000200
  40c2bc:	00000000 	.word	0x00000000
  40c2c0:	2040d5d4 	.word	0x2040d5d4
  40c2c4:	00000050 	.word	0x00000050
  40c2c8:	00000001 	.word	0x00000001
	...
  40c310:	00000101 	.word	0x00000101
	...
  40c31c:	2040d684 	.word	0x2040d684
  40c320:	00000020 	.word	0x00000020
  40c324:	00000001 	.word	0x00000001
  40c328:	00000300 	.word	0x00000300
  40c32c:	00421cbd 	.word	0x00421cbd
  40c330:	004206a9 	.word	0x004206a9
  40c334:	00420ad5 	.word	0x00420ad5
  40c338:	004220a5 	.word	0x004220a5
  40c33c:	0041a461 	.word	0x0041a461
  40c340:	00420c95 	.word	0x00420c95
  40c344:	00421201 	.word	0x00421201
  40c348:	2040d718 	.word	0x2040d718
  40c34c:	00000014 	.word	0x00000014
  40c350:	00000001 	.word	0x00000001
	...
  40c360:	2040d584 	.word	0x2040d584
  40c364:	0000000a 	.word	0x0000000a
  40c368:	2040d72c 	.word	0x2040d72c
  40c36c:	00000014 	.word	0x00000014
  40c370:	00000001 	.word	0x00000001
	...
  40c380:	2040d088 	.word	0x2040d088
  40c384:	00000040 	.word	0x00000040
  40c388:	2040000c 	.word	0x2040000c
  40c38c:	00000009 	.word	0x00000009
  40c390:	00000000 	.word	0x00000000
  40c394:	2040d624 	.word	0x2040d624
  40c398:	00000038 	.word	0x00000038
  40c39c:	00000000 	.word	0x00000000
  40c3a0:	2040d3f4 	.word	0x2040d3f4
  40c3a4:	00000140 	.word	0x00000140
  40c3a8:	00000000 	.word	0x00000000
  40c3ac:	20400018 	.word	0x20400018
  40c3b0:	00000008 	.word	0x00000008
  40c3b4:	00000000 	.word	0x00000000
  40c3b8:	20400020 	.word	0x20400020
  40c3bc:	00000030 	.word	0x00000030
  40c3c0:	00000000 	.word	0x00000000
  40c3c4:	2040d768 	.word	0x2040d768
  40c3c8:	00000004 	.word	0x00000004
  40c3cc:	00000001 	.word	0x00000001
  40c3d0:	2040c858 	.word	0x2040c858
  40c3d4:	2040c858 	.word	0x2040c858
  40c3d8:	00000428 	.word	0x00000428
  40c3dc:	00000001 	.word	0x00000001
  40c3e0:	00000000 	.word	0x00000000
  40c3e4:	2040cb44 	.word	0x2040cb44
  40c3e8:	2040cbac 	.word	0x2040cbac
  40c3ec:	2040cc14 	.word	0x2040cc14
	...
  40c488:	00000001 	.word	0x00000001
  40c48c:	00000000 	.word	0x00000000
  40c490:	abcd330e 	.word	0xabcd330e
  40c494:	e66d1234 	.word	0xe66d1234
  40c498:	0005deec 	.word	0x0005deec
  40c49c:	0000000b 	.word	0x0000000b
	...
  40c808:	2040d288 	.word	0x2040d288
  40c80c:	0000016c 	.word	0x0000016c
  40c810:	00000001 	.word	0x00000001
  40c814:	00000043 	.word	0x00000043
	...
  40c834:	00000043 	.word	0x00000043
	...
  40c854:	00000043 	.word	0x00000043
	...
  40c874:	00000043 	.word	0x00000043
	...
  40c894:	00000043 	.word	0x00000043
	...
  40c8b4:	00000043 	.word	0x00000043
	...
  40c8d4:	00000043 	.word	0x00000043
	...
  40c8f4:	00421eb5 	.word	0x00421eb5
  40c8f8:	004218fd 	.word	0x004218fd
  40c8fc:	00000000 	.word	0x00000000
  40c900:	0041b834 	.word	0x0041b834
  40c904:	00422190 	.word	0x00422190
  40c908:	0042218c 	.word	0x0042218c
  40c90c:	0042218c 	.word	0x0042218c
  40c910:	0042218c 	.word	0x0042218c
  40c914:	0042218c 	.word	0x0042218c
  40c918:	0042218c 	.word	0x0042218c
  40c91c:	0042218c 	.word	0x0042218c
  40c920:	0042218c 	.word	0x0042218c
  40c924:	0042218c 	.word	0x0042218c
  40c928:	0042218c 	.word	0x0042218c
  40c92c:	ffffffff 	.word	0xffffffff
  40c930:	ffffffff 	.word	0xffffffff
  40c934:	ffffffff 	.word	0xffffffff
  40c938:	0000ffff 	.word	0x0000ffff
  40c93c:	53410001 	.word	0x53410001
  40c940:	00494943 	.word	0x00494943
	...
  40c95c:	53410000 	.word	0x53410000
  40c960:	00494943 	.word	0x00494943
	...
  40c980:	2040d65c 	.word	0x2040d65c
  40c984:	00000028 	.word	0x00000028
  40c988:	00000000 	.word	0x00000000
  40c98c:	2040d76c 	.word	0x2040d76c
  40c990:	00000004 	.word	0x00000004
  40c994:	00000000 	.word	0x00000000
  40c998:	2040d770 	.word	0x2040d770
  40c99c:	00000004 	.word	0x00000004
  40c9a0:	00000000 	.word	0x00000000
  40c9a4:	2040d774 	.word	0x2040d774
  40c9a8:	00000004 	.word	0x00000004
  40c9ac:	00000000 	.word	0x00000000
  40c9b0:	2040cc80 	.word	0x2040cc80
  40c9b4:	00000408 	.word	0x00000408
  40c9b8:	00000001 	.word	0x00000001
	...
  40c9c4:	2040cc80 	.word	0x2040cc80
  40c9c8:	2040cc80 	.word	0x2040cc80
  40c9cc:	2040cc88 	.word	0x2040cc88
  40c9d0:	2040cc88 	.word	0x2040cc88
  40c9d4:	2040cc90 	.word	0x2040cc90
  40c9d8:	2040cc90 	.word	0x2040cc90
  40c9dc:	2040cc98 	.word	0x2040cc98
  40c9e0:	2040cc98 	.word	0x2040cc98
  40c9e4:	2040cca0 	.word	0x2040cca0
  40c9e8:	2040cca0 	.word	0x2040cca0
  40c9ec:	2040cca8 	.word	0x2040cca8
  40c9f0:	2040cca8 	.word	0x2040cca8
  40c9f4:	2040ccb0 	.word	0x2040ccb0
  40c9f8:	2040ccb0 	.word	0x2040ccb0
  40c9fc:	2040ccb8 	.word	0x2040ccb8
  40ca00:	2040ccb8 	.word	0x2040ccb8
  40ca04:	2040ccc0 	.word	0x2040ccc0
  40ca08:	2040ccc0 	.word	0x2040ccc0
  40ca0c:	2040ccc8 	.word	0x2040ccc8
  40ca10:	2040ccc8 	.word	0x2040ccc8
  40ca14:	2040ccd0 	.word	0x2040ccd0
  40ca18:	2040ccd0 	.word	0x2040ccd0
  40ca1c:	2040ccd8 	.word	0x2040ccd8
  40ca20:	2040ccd8 	.word	0x2040ccd8
  40ca24:	2040cce0 	.word	0x2040cce0
  40ca28:	2040cce0 	.word	0x2040cce0
  40ca2c:	2040cce8 	.word	0x2040cce8
  40ca30:	2040cce8 	.word	0x2040cce8
  40ca34:	2040ccf0 	.word	0x2040ccf0
  40ca38:	2040ccf0 	.word	0x2040ccf0
  40ca3c:	2040ccf8 	.word	0x2040ccf8
  40ca40:	2040ccf8 	.word	0x2040ccf8
  40ca44:	2040cd00 	.word	0x2040cd00
  40ca48:	2040cd00 	.word	0x2040cd00
  40ca4c:	2040cd08 	.word	0x2040cd08
  40ca50:	2040cd08 	.word	0x2040cd08
  40ca54:	2040cd10 	.word	0x2040cd10
  40ca58:	2040cd10 	.word	0x2040cd10
  40ca5c:	2040cd18 	.word	0x2040cd18
  40ca60:	2040cd18 	.word	0x2040cd18
  40ca64:	2040cd20 	.word	0x2040cd20
  40ca68:	2040cd20 	.word	0x2040cd20
  40ca6c:	2040cd28 	.word	0x2040cd28
  40ca70:	2040cd28 	.word	0x2040cd28
  40ca74:	2040cd30 	.word	0x2040cd30
  40ca78:	2040cd30 	.word	0x2040cd30
  40ca7c:	2040cd38 	.word	0x2040cd38
  40ca80:	2040cd38 	.word	0x2040cd38
  40ca84:	2040cd40 	.word	0x2040cd40
  40ca88:	2040cd40 	.word	0x2040cd40
  40ca8c:	2040cd48 	.word	0x2040cd48
  40ca90:	2040cd48 	.word	0x2040cd48
  40ca94:	2040cd50 	.word	0x2040cd50
  40ca98:	2040cd50 	.word	0x2040cd50
  40ca9c:	2040cd58 	.word	0x2040cd58
  40caa0:	2040cd58 	.word	0x2040cd58
  40caa4:	2040cd60 	.word	0x2040cd60
  40caa8:	2040cd60 	.word	0x2040cd60
  40caac:	2040cd68 	.word	0x2040cd68
  40cab0:	2040cd68 	.word	0x2040cd68
  40cab4:	2040cd70 	.word	0x2040cd70
  40cab8:	2040cd70 	.word	0x2040cd70
  40cabc:	2040cd78 	.word	0x2040cd78
  40cac0:	2040cd78 	.word	0x2040cd78
  40cac4:	2040cd80 	.word	0x2040cd80
  40cac8:	2040cd80 	.word	0x2040cd80
  40cacc:	2040cd88 	.word	0x2040cd88
  40cad0:	2040cd88 	.word	0x2040cd88
  40cad4:	2040cd90 	.word	0x2040cd90
  40cad8:	2040cd90 	.word	0x2040cd90
  40cadc:	2040cd98 	.word	0x2040cd98
  40cae0:	2040cd98 	.word	0x2040cd98
  40cae4:	2040cda0 	.word	0x2040cda0
  40cae8:	2040cda0 	.word	0x2040cda0
  40caec:	2040cda8 	.word	0x2040cda8
  40caf0:	2040cda8 	.word	0x2040cda8
  40caf4:	2040cdb0 	.word	0x2040cdb0
  40caf8:	2040cdb0 	.word	0x2040cdb0
  40cafc:	2040cdb8 	.word	0x2040cdb8
  40cb00:	2040cdb8 	.word	0x2040cdb8
  40cb04:	2040cdc0 	.word	0x2040cdc0
  40cb08:	2040cdc0 	.word	0x2040cdc0
  40cb0c:	2040cdc8 	.word	0x2040cdc8
  40cb10:	2040cdc8 	.word	0x2040cdc8
  40cb14:	2040cdd0 	.word	0x2040cdd0
  40cb18:	2040cdd0 	.word	0x2040cdd0
  40cb1c:	2040cdd8 	.word	0x2040cdd8
  40cb20:	2040cdd8 	.word	0x2040cdd8
  40cb24:	2040cde0 	.word	0x2040cde0
  40cb28:	2040cde0 	.word	0x2040cde0
  40cb2c:	2040cde8 	.word	0x2040cde8
  40cb30:	2040cde8 	.word	0x2040cde8
  40cb34:	2040cdf0 	.word	0x2040cdf0
  40cb38:	2040cdf0 	.word	0x2040cdf0
  40cb3c:	2040cdf8 	.word	0x2040cdf8
  40cb40:	2040cdf8 	.word	0x2040cdf8
  40cb44:	2040ce00 	.word	0x2040ce00
  40cb48:	2040ce00 	.word	0x2040ce00
  40cb4c:	2040ce08 	.word	0x2040ce08
  40cb50:	2040ce08 	.word	0x2040ce08
  40cb54:	2040ce10 	.word	0x2040ce10
  40cb58:	2040ce10 	.word	0x2040ce10
  40cb5c:	2040ce18 	.word	0x2040ce18
  40cb60:	2040ce18 	.word	0x2040ce18
  40cb64:	2040ce20 	.word	0x2040ce20
  40cb68:	2040ce20 	.word	0x2040ce20
  40cb6c:	2040ce28 	.word	0x2040ce28
  40cb70:	2040ce28 	.word	0x2040ce28
  40cb74:	2040ce30 	.word	0x2040ce30
  40cb78:	2040ce30 	.word	0x2040ce30
  40cb7c:	2040ce38 	.word	0x2040ce38
  40cb80:	2040ce38 	.word	0x2040ce38
  40cb84:	2040ce40 	.word	0x2040ce40
  40cb88:	2040ce40 	.word	0x2040ce40
  40cb8c:	2040ce48 	.word	0x2040ce48
  40cb90:	2040ce48 	.word	0x2040ce48
  40cb94:	2040ce50 	.word	0x2040ce50
  40cb98:	2040ce50 	.word	0x2040ce50
  40cb9c:	2040ce58 	.word	0x2040ce58
  40cba0:	2040ce58 	.word	0x2040ce58
  40cba4:	2040ce60 	.word	0x2040ce60
  40cba8:	2040ce60 	.word	0x2040ce60
  40cbac:	2040ce68 	.word	0x2040ce68
  40cbb0:	2040ce68 	.word	0x2040ce68
  40cbb4:	2040ce70 	.word	0x2040ce70
  40cbb8:	2040ce70 	.word	0x2040ce70
  40cbbc:	2040ce78 	.word	0x2040ce78
  40cbc0:	2040ce78 	.word	0x2040ce78
  40cbc4:	2040ce80 	.word	0x2040ce80
  40cbc8:	2040ce80 	.word	0x2040ce80
  40cbcc:	2040ce88 	.word	0x2040ce88
  40cbd0:	2040ce88 	.word	0x2040ce88
  40cbd4:	2040ce90 	.word	0x2040ce90
  40cbd8:	2040ce90 	.word	0x2040ce90
  40cbdc:	2040ce98 	.word	0x2040ce98
  40cbe0:	2040ce98 	.word	0x2040ce98
  40cbe4:	2040cea0 	.word	0x2040cea0
  40cbe8:	2040cea0 	.word	0x2040cea0
  40cbec:	2040cea8 	.word	0x2040cea8
  40cbf0:	2040cea8 	.word	0x2040cea8
  40cbf4:	2040ceb0 	.word	0x2040ceb0
  40cbf8:	2040ceb0 	.word	0x2040ceb0
  40cbfc:	2040ceb8 	.word	0x2040ceb8
  40cc00:	2040ceb8 	.word	0x2040ceb8
  40cc04:	2040cec0 	.word	0x2040cec0
  40cc08:	2040cec0 	.word	0x2040cec0
  40cc0c:	2040cec8 	.word	0x2040cec8
  40cc10:	2040cec8 	.word	0x2040cec8
  40cc14:	2040ced0 	.word	0x2040ced0
  40cc18:	2040ced0 	.word	0x2040ced0
  40cc1c:	2040ced8 	.word	0x2040ced8
  40cc20:	2040ced8 	.word	0x2040ced8
  40cc24:	2040cee0 	.word	0x2040cee0
  40cc28:	2040cee0 	.word	0x2040cee0
  40cc2c:	2040cee8 	.word	0x2040cee8
  40cc30:	2040cee8 	.word	0x2040cee8
  40cc34:	2040cef0 	.word	0x2040cef0
  40cc38:	2040cef0 	.word	0x2040cef0
  40cc3c:	2040cef8 	.word	0x2040cef8
  40cc40:	2040cef8 	.word	0x2040cef8
  40cc44:	2040cf00 	.word	0x2040cf00
  40cc48:	2040cf00 	.word	0x2040cf00
  40cc4c:	2040cf08 	.word	0x2040cf08
  40cc50:	2040cf08 	.word	0x2040cf08
  40cc54:	2040cf10 	.word	0x2040cf10
  40cc58:	2040cf10 	.word	0x2040cf10
  40cc5c:	2040cf18 	.word	0x2040cf18
  40cc60:	2040cf18 	.word	0x2040cf18
  40cc64:	2040cf20 	.word	0x2040cf20
  40cc68:	2040cf20 	.word	0x2040cf20
  40cc6c:	2040cf28 	.word	0x2040cf28
  40cc70:	2040cf28 	.word	0x2040cf28
  40cc74:	2040cf30 	.word	0x2040cf30
  40cc78:	2040cf30 	.word	0x2040cf30
  40cc7c:	2040cf38 	.word	0x2040cf38
  40cc80:	2040cf38 	.word	0x2040cf38
  40cc84:	2040cf40 	.word	0x2040cf40
  40cc88:	2040cf40 	.word	0x2040cf40
  40cc8c:	2040cf48 	.word	0x2040cf48
  40cc90:	2040cf48 	.word	0x2040cf48
  40cc94:	2040cf50 	.word	0x2040cf50
  40cc98:	2040cf50 	.word	0x2040cf50
  40cc9c:	2040cf58 	.word	0x2040cf58
  40cca0:	2040cf58 	.word	0x2040cf58
  40cca4:	2040cf60 	.word	0x2040cf60
  40cca8:	2040cf60 	.word	0x2040cf60
  40ccac:	2040cf68 	.word	0x2040cf68
  40ccb0:	2040cf68 	.word	0x2040cf68
  40ccb4:	2040cf70 	.word	0x2040cf70
  40ccb8:	2040cf70 	.word	0x2040cf70
  40ccbc:	2040cf78 	.word	0x2040cf78
  40ccc0:	2040cf78 	.word	0x2040cf78
  40ccc4:	2040cf80 	.word	0x2040cf80
  40ccc8:	2040cf80 	.word	0x2040cf80
  40cccc:	2040cf88 	.word	0x2040cf88
  40ccd0:	2040cf88 	.word	0x2040cf88
  40ccd4:	2040cf90 	.word	0x2040cf90
  40ccd8:	2040cf90 	.word	0x2040cf90
  40ccdc:	2040cf98 	.word	0x2040cf98
  40cce0:	2040cf98 	.word	0x2040cf98
  40cce4:	2040cfa0 	.word	0x2040cfa0
  40cce8:	2040cfa0 	.word	0x2040cfa0
  40ccec:	2040cfa8 	.word	0x2040cfa8
  40ccf0:	2040cfa8 	.word	0x2040cfa8
  40ccf4:	2040cfb0 	.word	0x2040cfb0
  40ccf8:	2040cfb0 	.word	0x2040cfb0
  40ccfc:	2040cfb8 	.word	0x2040cfb8
  40cd00:	2040cfb8 	.word	0x2040cfb8
  40cd04:	2040cfc0 	.word	0x2040cfc0
  40cd08:	2040cfc0 	.word	0x2040cfc0
  40cd0c:	2040cfc8 	.word	0x2040cfc8
  40cd10:	2040cfc8 	.word	0x2040cfc8
  40cd14:	2040cfd0 	.word	0x2040cfd0
  40cd18:	2040cfd0 	.word	0x2040cfd0
  40cd1c:	2040cfd8 	.word	0x2040cfd8
  40cd20:	2040cfd8 	.word	0x2040cfd8
  40cd24:	2040cfe0 	.word	0x2040cfe0
  40cd28:	2040cfe0 	.word	0x2040cfe0
  40cd2c:	2040cfe8 	.word	0x2040cfe8
  40cd30:	2040cfe8 	.word	0x2040cfe8
  40cd34:	2040cff0 	.word	0x2040cff0
  40cd38:	2040cff0 	.word	0x2040cff0
  40cd3c:	2040cff8 	.word	0x2040cff8
  40cd40:	2040cff8 	.word	0x2040cff8
  40cd44:	2040d000 	.word	0x2040d000
  40cd48:	2040d000 	.word	0x2040d000
  40cd4c:	2040d008 	.word	0x2040d008
  40cd50:	2040d008 	.word	0x2040d008
  40cd54:	2040d010 	.word	0x2040d010
  40cd58:	2040d010 	.word	0x2040d010
  40cd5c:	2040d018 	.word	0x2040d018
  40cd60:	2040d018 	.word	0x2040d018
  40cd64:	2040d020 	.word	0x2040d020
  40cd68:	2040d020 	.word	0x2040d020
  40cd6c:	2040d028 	.word	0x2040d028
  40cd70:	2040d028 	.word	0x2040d028
  40cd74:	2040d030 	.word	0x2040d030
  40cd78:	2040d030 	.word	0x2040d030
  40cd7c:	2040d038 	.word	0x2040d038
  40cd80:	2040d038 	.word	0x2040d038
  40cd84:	2040d040 	.word	0x2040d040
  40cd88:	2040d040 	.word	0x2040d040
  40cd8c:	2040d048 	.word	0x2040d048
  40cd90:	2040d048 	.word	0x2040d048
  40cd94:	2040d050 	.word	0x2040d050
  40cd98:	2040d050 	.word	0x2040d050
  40cd9c:	2040d058 	.word	0x2040d058
  40cda0:	2040d058 	.word	0x2040d058
  40cda4:	2040d060 	.word	0x2040d060
  40cda8:	2040d060 	.word	0x2040d060
  40cdac:	2040d068 	.word	0x2040d068
  40cdb0:	2040d068 	.word	0x2040d068
  40cdb4:	2040d070 	.word	0x2040d070
  40cdb8:	2040d070 	.word	0x2040d070
  40cdbc:	2040d078 	.word	0x2040d078
  40cdc0:	2040d078 	.word	0x2040d078
  40cdc4:	2040d778 	.word	0x2040d778
  40cdc8:	00000004 	.word	0x00000004
  40cdcc:	00000001 	.word	0x00000001
  40cdd0:	ffffffff 	.word	0xffffffff
  40cdd4:	2040d77c 	.word	0x2040d77c
  40cdd8:	00000004 	.word	0x00000004
  40cddc:	00000001 	.word	0x00000001
  40cde0:	00020000 	.word	0x00020000
  40cde4:	20400050 	.word	0x20400050
  40cde8:	00000004 	.word	0x00000004
  40cdec:	00000000 	.word	0x00000000
  40cdf0:	2040d780 	.word	0x2040d780
  40cdf4:	00000004 	.word	0x00000004
	...
  40ce04:	22222222 	.word	0x22222222

Disassembly of section .text._dtoa_r%44:

0040ce08 <_dtoa_r>:
  40ce08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0040ce0c <.LCFI4>:
  40ce0c:	6c05      	ldr	r5, [r0, #64]	; 0x40
  40ce0e:	b093      	sub	sp, #76	; 0x4c

0040ce10 <.LCFI5>:
  40ce10:	4604      	mov	r4, r0
  40ce12:	ec5b ab10 	vmov	sl, fp, d0
  40ce16:	9f1c      	ldr	r7, [sp, #112]	; 0x70
  40ce18:	9101      	str	r1, [sp, #4]
  40ce1a:	4691      	mov	r9, r2
  40ce1c:	9304      	str	r3, [sp, #16]
  40ce1e:	b14d      	cbz	r5, 40ce34 <.LVL53+0x4>
  40ce20:	6c42      	ldr	r2, [r0, #68]	; 0x44

0040ce22 <.LVL50>:
  40ce22:	606a      	str	r2, [r5, #4]
  40ce24:	2301      	movs	r3, #1

0040ce26 <.LVL51>:
  40ce26:	4093      	lsls	r3, r2
  40ce28:	60ab      	str	r3, [r5, #8]
  40ce2a:	4629      	mov	r1, r5

0040ce2c <.LVL52>:
  40ce2c:	f015 f9c6 	bl	4221bc <_Bfree>

0040ce30 <.LVL53>:
  40ce30:	2300      	movs	r3, #0
  40ce32:	6423      	str	r3, [r4, #64]	; 0x40
  40ce34:	f1bb 0f00 	cmp.w	fp, #0
  40ce38:	465e      	mov	r6, fp
  40ce3a:	db35      	blt.n	40cea8 <.LVL63>
  40ce3c:	2300      	movs	r3, #0
  40ce3e:	603b      	str	r3, [r7, #0]
  40ce40:	4bc1      	ldr	r3, [pc, #772]	; (40d148 <.LVL134+0x20>)
  40ce42:	43b3      	bics	r3, r6
  40ce44:	d015      	beq.n	40ce72 <.LCFI7>
  40ce46:	ec4b ab17 	vmov	d7, sl, fp
  40ce4a:	eeb5 7b40 	vcmp.f64	d7, #0.0
  40ce4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr

0040ce52 <.LVL55>:
  40ce52:	e9cd ab02 	strd	sl, fp, [sp, #8]
  40ce56:	d12d      	bne.n	40ceb4 <.LVL64>
  40ce58:	9a04      	ldr	r2, [sp, #16]
  40ce5a:	2301      	movs	r3, #1
  40ce5c:	6013      	str	r3, [r2, #0]

0040ce5e <.LVL56>:
  40ce5e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40ce60:	2b00      	cmp	r3, #0
  40ce62:	f000 80b3 	beq.w	40cfcc <.LVL99>
  40ce66:	48b9      	ldr	r0, [pc, #740]	; (40d14c <.LVL134+0x24>)
  40ce68:	6018      	str	r0, [r3, #0]
  40ce6a:	3801      	subs	r0, #1

0040ce6c <.LVL57>:
  40ce6c:	b013      	add	sp, #76	; 0x4c

0040ce6e <.LCFI6>:
  40ce6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040ce72 <.LCFI7>:
  40ce72:	9a04      	ldr	r2, [sp, #16]
  40ce74:	f242 730f 	movw	r3, #9999	; 0x270f
  40ce78:	6013      	str	r3, [r2, #0]

0040ce7a <.LVL59>:
  40ce7a:	f1ba 0f00 	cmp.w	sl, #0
  40ce7e:	d10d      	bne.n	40ce9c <.LCFI9>
  40ce80:	f3c6 0613 	ubfx	r6, r6, #0, #20
  40ce84:	b956      	cbnz	r6, 40ce9c <.LCFI9>

0040ce86 <.LVL60>:
  40ce86:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40ce88:	48b1      	ldr	r0, [pc, #708]	; (40d150 <.LVL134+0x28>)
  40ce8a:	2b00      	cmp	r3, #0
  40ce8c:	d0ee      	beq.n	40ce6c <.LVL57>
  40ce8e:	f100 0308 	add.w	r3, r0, #8

0040ce92 <.LVL61>:
  40ce92:	9a1d      	ldr	r2, [sp, #116]	; 0x74
  40ce94:	6013      	str	r3, [r2, #0]
  40ce96:	b013      	add	sp, #76	; 0x4c

0040ce98 <.LCFI8>:
  40ce98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040ce9c <.LCFI9>:
  40ce9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40ce9e:	48ad      	ldr	r0, [pc, #692]	; (40d154 <.LVL134+0x2c>)
  40cea0:	2b00      	cmp	r3, #0
  40cea2:	d0e3      	beq.n	40ce6c <.LVL57>
  40cea4:	1cc3      	adds	r3, r0, #3
  40cea6:	e7f4      	b.n	40ce92 <.LVL61>

0040cea8 <.LVL63>:
  40cea8:	2301      	movs	r3, #1
  40ceaa:	f02b 4600 	bic.w	r6, fp, #2147483648	; 0x80000000
  40ceae:	603b      	str	r3, [r7, #0]
  40ceb0:	46b3      	mov	fp, r6
  40ceb2:	e7c5      	b.n	40ce40 <.LVL53+0x10>

0040ceb4 <.LVL64>:
  40ceb4:	a911      	add	r1, sp, #68	; 0x44
  40ceb6:	aa10      	add	r2, sp, #64	; 0x40
  40ceb8:	ed9d 0b02 	vldr	d0, [sp, #8]
  40cebc:	4620      	mov	r0, r4
  40cebe:	f010 f905 	bl	41d0cc <__d2b>

0040cec2 <.LVL65>:
  40cec2:	0d31      	lsrs	r1, r6, #20
  40cec4:	4680      	mov	r8, r0

0040cec6 <.LVL66>:
  40cec6:	d065      	beq.n	40cf94 <.LVL92>
  40cec8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40cecc:	f3c3 0013 	ubfx	r0, r3, #0, #20

0040ced0 <.LVL68>:
  40ced0:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
  40ced4:	2500      	movs	r5, #0
  40ced6:	9810      	ldr	r0, [sp, #64]	; 0x40
  40ced8:	950d      	str	r5, [sp, #52]	; 0x34
  40ceda:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff

0040cede <.LVL69>:
  40cede:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000

0040cee2 <.LVL70>:
  40cee2:	ec43 2b17 	vmov	d7, r2, r3
  40cee6:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
  40ceea:	ed9f 4b91 	vldr	d4, [pc, #580]	; 40d130 <.LVL134+0x8>
  40ceee:	ee37 6b46 	vsub.f64	d6, d7, d6
  40cef2:	ed9f 7b91 	vldr	d7, [pc, #580]	; 40d138 <.LVL134+0x10>
  40cef6:	ed9f 5b92 	vldr	d5, [pc, #584]	; 40d140 <.LVL134+0x18>
  40cefa:	eea6 7b04 	vfma.f64	d7, d6, d4
  40cefe:	ee06 1a90 	vmov	s13, r1
  40cf02:	eeb8 6be6 	vcvt.f64.s32	d6, s13
  40cf06:	eea6 7b05 	vfma.f64	d7, d6, d5

0040cf0a <.LVL71>:
  40cf0a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
  40cf0e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
  40cf12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40cf16:	edcd 6a02 	vstr	s13, [sp, #8]

0040cf1a <.LVL72>:
  40cf1a:	f100 8130 	bmi.w	40d17e <.LVL143>

0040cf1e <.LVL73>:
  40cf1e:	9d02      	ldr	r5, [sp, #8]
  40cf20:	2d16      	cmp	r5, #22
  40cf22:	f200 8101 	bhi.w	40d128 <.LVL134>
  40cf26:	4b8c      	ldr	r3, [pc, #560]	; (40d158 <.LVL134+0x30>)
  40cf28:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40cf2c:	ed93 7b00 	vldr	d7, [r3]

0040cf30 <.LVL74>:
  40cf30:	ec4b ab16 	vmov	d6, sl, fp
  40cf34:	eeb4 7bc6 	vcmpe.f64	d7, d6
  40cf38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40cf3c:	f340 8183 	ble.w	40d246 <.LVL173>
  40cf40:	1e6b      	subs	r3, r5, #1
  40cf42:	9302      	str	r3, [sp, #8]

0040cf44 <.LVL75>:
  40cf44:	2300      	movs	r3, #0

0040cf46 <.LVL76>:
  40cf46:	930b      	str	r3, [sp, #44]	; 0x2c

0040cf48 <.LVL77>:
  40cf48:	1a41      	subs	r1, r0, r1

0040cf4a <.LVL78>:
  40cf4a:	1e4b      	subs	r3, r1, #1

0040cf4c <.LVL79>:
  40cf4c:	9306      	str	r3, [sp, #24]
  40cf4e:	f100 8110 	bmi.w	40d172 <.LVL138>
  40cf52:	2300      	movs	r3, #0

0040cf54 <.LVL80>:
  40cf54:	9307      	str	r3, [sp, #28]

0040cf56 <.LVL81>:
  40cf56:	9b02      	ldr	r3, [sp, #8]
  40cf58:	2b00      	cmp	r3, #0
  40cf5a:	f2c0 8101 	blt.w	40d160 <.LVL135>

0040cf5e <.LVL82>:
  40cf5e:	9a06      	ldr	r2, [sp, #24]

0040cf60 <.LVL83>:
  40cf60:	930a      	str	r3, [sp, #40]	; 0x28
  40cf62:	4611      	mov	r1, r2

0040cf64 <.LVL84>:
  40cf64:	4419      	add	r1, r3
  40cf66:	2300      	movs	r3, #0

0040cf68 <.LVL85>:
  40cf68:	9106      	str	r1, [sp, #24]

0040cf6a <.LVL86>:
  40cf6a:	9305      	str	r3, [sp, #20]

0040cf6c <.LVL87>:
  40cf6c:	9b01      	ldr	r3, [sp, #4]
  40cf6e:	2b09      	cmp	r3, #9
  40cf70:	d82e      	bhi.n	40cfd0 <.LVL100>

0040cf72 <.LVL88>:
  40cf72:	2b05      	cmp	r3, #5
  40cf74:	f340 8550 	ble.w	40da18 <.LVL445>
  40cf78:	3b04      	subs	r3, #4

0040cf7a <.LVL89>:
  40cf7a:	9301      	str	r3, [sp, #4]

0040cf7c <.LVL90>:
  40cf7c:	2500      	movs	r5, #0

0040cf7e <.LVL91>:
  40cf7e:	9b01      	ldr	r3, [sp, #4]
  40cf80:	3b02      	subs	r3, #2
  40cf82:	2b03      	cmp	r3, #3
  40cf84:	f200 8550 	bhi.w	40da28 <.LVL447>
  40cf88:	e8df f013 	tbh	[pc, r3, lsl #1]
  40cf8c:	02860349 	.word	0x02860349
  40cf90:	03d80356 	.word	0x03d80356

0040cf94 <.LVL92>:
  40cf94:	9810      	ldr	r0, [sp, #64]	; 0x40

0040cf96 <.LVL93>:
  40cf96:	9911      	ldr	r1, [sp, #68]	; 0x44

0040cf98 <.LVL94>:
  40cf98:	4401      	add	r1, r0
  40cf9a:	f201 4332 	addw	r3, r1, #1074	; 0x432

0040cf9e <.LVL95>:
  40cf9e:	2b20      	cmp	r3, #32
  40cfa0:	f340 814a 	ble.w	40d238 <.LVL171>
  40cfa4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40

0040cfa8 <.LVL96>:
  40cfa8:	f201 4212 	addw	r2, r1, #1042	; 0x412
  40cfac:	409e      	lsls	r6, r3
  40cfae:	fa2a f302 	lsr.w	r3, sl, r2
  40cfb2:	4333      	orrs	r3, r6
  40cfb4:	ee07 3a90 	vmov	s15, r3

0040cfb8 <.LVL97>:
  40cfb8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  40cfbc:	2501      	movs	r5, #1
  40cfbe:	ec53 2b17 	vmov	r2, r3, d7
  40cfc2:	3901      	subs	r1, #1

0040cfc4 <.LVL98>:
  40cfc4:	f1a3 73f8 	sub.w	r3, r3, #32505856	; 0x1f00000
  40cfc8:	950d      	str	r5, [sp, #52]	; 0x34
  40cfca:	e78a      	b.n	40cee2 <.LVL70>

0040cfcc <.LVL99>:
  40cfcc:	4863      	ldr	r0, [pc, #396]	; (40d15c <.LVL134+0x34>)
  40cfce:	e74d      	b.n	40ce6c <.LVL57>

0040cfd0 <.LVL100>:
  40cfd0:	2100      	movs	r1, #0
  40cfd2:	6461      	str	r1, [r4, #68]	; 0x44
  40cfd4:	4620      	mov	r0, r4
  40cfd6:	4689      	mov	r9, r1
  40cfd8:	f013 fdc8 	bl	420b6c <.LFE2>

0040cfdc <.LVL101>:
  40cfdc:	f04f 36ff 	mov.w	r6, #4294967295
  40cfe0:	2301      	movs	r3, #1
  40cfe2:	9008      	str	r0, [sp, #32]
  40cfe4:	6420      	str	r0, [r4, #64]	; 0x40

0040cfe6 <.LVL102>:
  40cfe6:	f8cd 9004 	str.w	r9, [sp, #4]

0040cfea <.LVL103>:
  40cfea:	960c      	str	r6, [sp, #48]	; 0x30
  40cfec:	9309      	str	r3, [sp, #36]	; 0x24

0040cfee <.LVL104>:
  40cfee:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40cff0:	2b00      	cmp	r3, #0
  40cff2:	db7a      	blt.n	40d0ea <.LCFI11>
  40cff4:	9a02      	ldr	r2, [sp, #8]
  40cff6:	2a0e      	cmp	r2, #14
  40cff8:	dc77      	bgt.n	40d0ea <.LCFI11>
  40cffa:	4b57      	ldr	r3, [pc, #348]	; (40d158 <.LVL134+0x30>)
  40cffc:	f1b9 0f00 	cmp.w	r9, #0
  40d000:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40d004:	ed93 4b00 	vldr	d4, [r3]

0040d008 <.LVL105>:
  40d008:	f2c0 8332 	blt.w	40d670 <.LVL300>

0040d00c <.LVL106>:
  40d00c:	ec4b ab17 	vmov	d7, sl, fp
  40d010:	ee87 6b04 	vdiv.f64	d6, d7, d4
  40d014:	eebd 6bc6 	vcvt.s32.f64	s12, d6

0040d018 <.LVL107>:
  40d018:	9a08      	ldr	r2, [sp, #32]
  40d01a:	ee16 3a10 	vmov	r3, s12
  40d01e:	2e01      	cmp	r6, #1
  40d020:	f103 0330 	add.w	r3, r3, #48	; 0x30
  40d024:	eeb8 5bc6 	vcvt.f64.s32	d5, s12
  40d028:	f102 0b01 	add.w	fp, r2, #1

0040d02c <.LVL108>:
  40d02c:	7013      	strb	r3, [r2, #0]
  40d02e:	eea5 7b44 	vfms.f64	d7, d5, d4
  40d032:	d024      	beq.n	40d07e <.LVL115>
  40d034:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
  40d038:	ee27 7b03 	vmul.f64	d7, d7, d3
  40d03c:	eeb5 7b40 	vcmp.f64	d7, #0.0
  40d040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40d044:	d03c      	beq.n	40d0c0 <.L76>
  40d046:	eeb1 2b44 	vneg.f64	d2, d4
  40d04a:	9a08      	ldr	r2, [sp, #32]
  40d04c:	e006      	b.n	40d05c <.LVL110>

0040d04e <.LVL109>:
  40d04e:	ee27 7b03 	vmul.f64	d7, d7, d3
  40d052:	eeb5 7b40 	vcmp.f64	d7, #0.0
  40d056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40d05a:	d031      	beq.n	40d0c0 <.L76>

0040d05c <.LVL110>:
  40d05c:	ee87 6b04 	vdiv.f64	d6, d7, d4

0040d060 <.LVL111>:
  40d060:	eebd 6bc6 	vcvt.s32.f64	s12, d6

0040d064 <.LVL112>:
  40d064:	ee16 3a10 	vmov	r3, s12
  40d068:	3330      	adds	r3, #48	; 0x30
  40d06a:	f80b 3b01 	strb.w	r3, [fp], #1

0040d06e <.LVL113>:
  40d06e:	ebab 0302 	sub.w	r3, fp, r2
  40d072:	42b3      	cmp	r3, r6
  40d074:	eeb8 5bc6 	vcvt.f64.s32	d5, s12
  40d078:	eea2 7b05 	vfma.f64	d7, d2, d5

0040d07c <.LVL114>:
  40d07c:	d1e7      	bne.n	40d04e <.LVL109>

0040d07e <.LVL115>:
  40d07e:	ee37 7b07 	vadd.f64	d7, d7, d7
  40d082:	eeb4 4bc7 	vcmpe.f64	d4, d7
  40d086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40d08a:	d408      	bmi.n	40d09e <.LVL115+0x20>
  40d08c:	eeb4 4b47 	vcmp.f64	d4, d7
  40d090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40d094:	d114      	bne.n	40d0c0 <.L76>
  40d096:	ee16 3a10 	vmov	r3, s12
  40d09a:	07db      	lsls	r3, r3, #31
  40d09c:	d510      	bpl.n	40d0c0 <.L76>
  40d09e:	f81b 3c01 	ldrb.w	r3, [fp, #-1]

0040d0a2 <.L77>:
  40d0a2:	9908      	ldr	r1, [sp, #32]
  40d0a4:	f10b 32ff 	add.w	r2, fp, #4294967295
  40d0a8:	e004      	b.n	40d0b4 <.LVL118>

0040d0aa <.LVL117>:
  40d0aa:	4291      	cmp	r1, r2
  40d0ac:	f000 83da 	beq.w	40d864 <.LVL375>
  40d0b0:	f812 3d01 	ldrb.w	r3, [r2, #-1]!

0040d0b4 <.LVL118>:
  40d0b4:	2b39      	cmp	r3, #57	; 0x39
  40d0b6:	f102 0b01 	add.w	fp, r2, #1

0040d0ba <.LVL119>:
  40d0ba:	d0f6      	beq.n	40d0aa <.LVL117>

0040d0bc <.LVL120>:
  40d0bc:	3301      	adds	r3, #1
  40d0be:	7013      	strb	r3, [r2, #0]

0040d0c0 <.L76>:
  40d0c0:	4641      	mov	r1, r8
  40d0c2:	4620      	mov	r0, r4

0040d0c4 <.LVL122>:
  40d0c4:	f015 f87a 	bl	4221bc <_Bfree>

0040d0c8 <.LVL123>:
  40d0c8:	2200      	movs	r2, #0
  40d0ca:	9b02      	ldr	r3, [sp, #8]
  40d0cc:	f88b 2000 	strb.w	r2, [fp]
  40d0d0:	9a04      	ldr	r2, [sp, #16]
  40d0d2:	3301      	adds	r3, #1
  40d0d4:	6013      	str	r3, [r2, #0]
  40d0d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40d0d8:	2b00      	cmp	r3, #0
  40d0da:	f000 8355 	beq.w	40d788 <.LVL340>
  40d0de:	9808      	ldr	r0, [sp, #32]
  40d0e0:	f8c3 b000 	str.w	fp, [r3]
  40d0e4:	b013      	add	sp, #76	; 0x4c

0040d0e6 <.LCFI10>:
  40d0e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040d0ea <.LCFI11>:
  40d0ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40d0ec:	2a00      	cmp	r2, #0
  40d0ee:	d052      	beq.n	40d196 <.LVL145>
  40d0f0:	9a01      	ldr	r2, [sp, #4]
  40d0f2:	2a01      	cmp	r2, #1
  40d0f4:	f340 82e2 	ble.w	40d6bc <.LVL312>
  40d0f8:	9905      	ldr	r1, [sp, #20]
  40d0fa:	1e72      	subs	r2, r6, #1

0040d0fc <.LVL125>:
  40d0fc:	4291      	cmp	r1, r2
  40d0fe:	f2c0 8346 	blt.w	40d78e <.LVL341>
  40d102:	1a8b      	subs	r3, r1, r2
  40d104:	930d      	str	r3, [sp, #52]	; 0x34

0040d106 <.LVL126>:
  40d106:	2e00      	cmp	r6, #0
  40d108:	f2c0 8415 	blt.w	40d936 <.LVL411>
  40d10c:	9f07      	ldr	r7, [sp, #28]
  40d10e:	4633      	mov	r3, r6

0040d110 <.LVL127>:
  40d110:	9a07      	ldr	r2, [sp, #28]
  40d112:	441a      	add	r2, r3
  40d114:	9207      	str	r2, [sp, #28]

0040d116 <.LVL128>:
  40d116:	9a06      	ldr	r2, [sp, #24]

0040d118 <.LVL129>:
  40d118:	2101      	movs	r1, #1
  40d11a:	441a      	add	r2, r3
  40d11c:	4620      	mov	r0, r4

0040d11e <.LVL130>:
  40d11e:	9206      	str	r2, [sp, #24]

0040d120 <.LVL131>:
  40d120:	f015 f856 	bl	4221d0 <__i2b>

0040d124 <.LVL132>:
  40d124:	4605      	mov	r5, r0

0040d126 <.LVL133>:
  40d126:	e03a      	b.n	40d19e <.LVL146>

0040d128 <.LVL134>:
  40d128:	2301      	movs	r3, #1
  40d12a:	930b      	str	r3, [sp, #44]	; 0x2c
  40d12c:	e70c      	b.n	40cf48 <.LVL77>
  40d12e:	bf00      	nop
  40d130:	636f4361 	.word	0x636f4361
  40d134:	3fd287a7 	.word	0x3fd287a7
  40d138:	8b60c8b3 	.word	0x8b60c8b3
  40d13c:	3fc68a28 	.word	0x3fc68a28
  40d140:	509f79fb 	.word	0x509f79fb
  40d144:	3fd34413 	.word	0x3fd34413
  40d148:	7ff00000 	.word	0x7ff00000
  40d14c:	004221b9 	.word	0x004221b9
  40d150:	004221a8 	.word	0x004221a8
  40d154:	004221b4 	.word	0x004221b4
  40d158:	0041cc38 	.word	0x0041cc38
  40d15c:	004221b8 	.word	0x004221b8

0040d160 <.LVL135>:
  40d160:	9a07      	ldr	r2, [sp, #28]

0040d162 <.LVL136>:
  40d162:	9b02      	ldr	r3, [sp, #8]
  40d164:	1ad2      	subs	r2, r2, r3
  40d166:	425b      	negs	r3, r3
  40d168:	9305      	str	r3, [sp, #20]
  40d16a:	2300      	movs	r3, #0
  40d16c:	9207      	str	r2, [sp, #28]

0040d16e <.LVL137>:
  40d16e:	930a      	str	r3, [sp, #40]	; 0x28
  40d170:	e6fc      	b.n	40cf6c <.LVL87>

0040d172 <.LVL138>:
  40d172:	f1c1 0301 	rsb	r3, r1, #1

0040d176 <.LVL139>:
  40d176:	9307      	str	r3, [sp, #28]

0040d178 <.LVL140>:
  40d178:	2300      	movs	r3, #0

0040d17a <.LVL141>:
  40d17a:	9306      	str	r3, [sp, #24]

0040d17c <.LVL142>:
  40d17c:	e6eb      	b.n	40cf56 <.LVL81>

0040d17e <.LVL143>:
  40d17e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
  40d182:	eeb4 7b46 	vcmp.f64	d7, d6
  40d186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40d18a:	f43f aec8 	beq.w	40cf1e <.LVL73>
  40d18e:	9b02      	ldr	r3, [sp, #8]
  40d190:	3b01      	subs	r3, #1
  40d192:	9302      	str	r3, [sp, #8]

0040d194 <.LVL144>:
  40d194:	e6c3      	b.n	40cf1e <.LVL73>

0040d196 <.LVL145>:
  40d196:	9b05      	ldr	r3, [sp, #20]
  40d198:	9f07      	ldr	r7, [sp, #28]
  40d19a:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40d19c:	930d      	str	r3, [sp, #52]	; 0x34

0040d19e <.LVL146>:
  40d19e:	2f00      	cmp	r7, #0
  40d1a0:	dd0c      	ble.n	40d1bc <.LVL151>
  40d1a2:	9906      	ldr	r1, [sp, #24]
  40d1a4:	2900      	cmp	r1, #0
  40d1a6:	460b      	mov	r3, r1
  40d1a8:	dd08      	ble.n	40d1bc <.LVL151>
  40d1aa:	42b9      	cmp	r1, r7
  40d1ac:	9a07      	ldr	r2, [sp, #28]
  40d1ae:	bfa8      	it	ge
  40d1b0:	463b      	movge	r3, r7

0040d1b2 <.LVL147>:
  40d1b2:	1ad2      	subs	r2, r2, r3
  40d1b4:	1aff      	subs	r7, r7, r3

0040d1b6 <.LVL148>:
  40d1b6:	1acb      	subs	r3, r1, r3

0040d1b8 <.LVL149>:
  40d1b8:	9207      	str	r2, [sp, #28]

0040d1ba <.LVL150>:
  40d1ba:	9306      	str	r3, [sp, #24]

0040d1bc <.LVL151>:
  40d1bc:	9b05      	ldr	r3, [sp, #20]
  40d1be:	b1eb      	cbz	r3, 40d1fc <.LVL162>
  40d1c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d1c2:	2b00      	cmp	r3, #0
  40d1c4:	f000 8273 	beq.w	40d6ae <.LVL308>
  40d1c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40d1ca:	2b00      	cmp	r3, #0
  40d1cc:	dd11      	ble.n	40d1f2 <.LVL160>
  40d1ce:	461a      	mov	r2, r3
  40d1d0:	4629      	mov	r1, r5
  40d1d2:	4620      	mov	r0, r4

0040d1d4 <.LVL152>:
  40d1d4:	f011 f864 	bl	41e2a0 <__pow5mult>

0040d1d8 <.LVL153>:
  40d1d8:	4642      	mov	r2, r8
  40d1da:	4601      	mov	r1, r0
  40d1dc:	4605      	mov	r5, r0

0040d1de <.LVL154>:
  40d1de:	4620      	mov	r0, r4

0040d1e0 <.LVL155>:
  40d1e0:	f00d ffe8 	bl	41b1b4 <.LBE11>

0040d1e4 <.LVL156>:
  40d1e4:	4641      	mov	r1, r8
  40d1e6:	900e      	str	r0, [sp, #56]	; 0x38

0040d1e8 <.LVL157>:
  40d1e8:	4620      	mov	r0, r4

0040d1ea <.LVL158>:
  40d1ea:	f014 ffe7 	bl	4221bc <_Bfree>

0040d1ee <.LVL159>:
  40d1ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40d1f0:	4698      	mov	r8, r3

0040d1f2 <.LVL160>:
  40d1f2:	9b05      	ldr	r3, [sp, #20]
  40d1f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40d1f6:	1a9a      	subs	r2, r3, r2

0040d1f8 <.LVL161>:
  40d1f8:	f040 825a 	bne.w	40d6b0 <.LVL308+0x2>

0040d1fc <.LVL162>:
  40d1fc:	2101      	movs	r1, #1
  40d1fe:	4620      	mov	r0, r4

0040d200 <.LVL163>:
  40d200:	f014 ffe6 	bl	4221d0 <__i2b>

0040d204 <.LVL164>:
  40d204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d206:	9005      	str	r0, [sp, #20]

0040d208 <.LVL165>:
  40d208:	2b00      	cmp	r3, #0
  40d20a:	dd1f      	ble.n	40d24c <.LVL174>
  40d20c:	4601      	mov	r1, r0
  40d20e:	461a      	mov	r2, r3
  40d210:	4620      	mov	r0, r4

0040d212 <.LVL166>:
  40d212:	f011 f845 	bl	41e2a0 <__pow5mult>

0040d216 <.LVL167>:
  40d216:	9b01      	ldr	r3, [sp, #4]
  40d218:	9005      	str	r0, [sp, #20]

0040d21a <.LVL168>:
  40d21a:	2b01      	cmp	r3, #1
  40d21c:	f340 820f 	ble.w	40d63e <.LVL293>
  40d220:	2300      	movs	r3, #0
  40d222:	930d      	str	r3, [sp, #52]	; 0x34

0040d224 <.LVL169>:
  40d224:	9a05      	ldr	r2, [sp, #20]
  40d226:	6913      	ldr	r3, [r2, #16]
  40d228:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40d22c:	6918      	ldr	r0, [r3, #16]
  40d22e:	f013 ff89 	bl	421144 <.LFE17>

0040d232 <.LVL170>:
  40d232:	f1c0 0020 	rsb	r0, r0, #32
  40d236:	e013      	b.n	40d260 <.LVL175+0x8>

0040d238 <.LVL171>:
  40d238:	f1c3 0320 	rsb	r3, r3, #32

0040d23c <.LVL172>:
  40d23c:	fa0a f303 	lsl.w	r3, sl, r3
  40d240:	ee07 3a90 	vmov	s15, r3
  40d244:	e6b8      	b.n	40cfb8 <.LVL97>

0040d246 <.LVL173>:
  40d246:	2300      	movs	r3, #0
  40d248:	930b      	str	r3, [sp, #44]	; 0x2c
  40d24a:	e67d      	b.n	40cf48 <.LVL77>

0040d24c <.LVL174>:
  40d24c:	9b01      	ldr	r3, [sp, #4]
  40d24e:	2b01      	cmp	r3, #1
  40d250:	f340 823e 	ble.w	40d6d0 <.LVL314>
  40d254:	2300      	movs	r3, #0
  40d256:	930d      	str	r3, [sp, #52]	; 0x34

0040d258 <.LVL175>:
  40d258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d25a:	2001      	movs	r0, #1
  40d25c:	2b00      	cmp	r3, #0
  40d25e:	d1e1      	bne.n	40d224 <.LVL169>
  40d260:	9a06      	ldr	r2, [sp, #24]
  40d262:	4410      	add	r0, r2

0040d264 <.LVL176>:
  40d264:	f010 001f 	ands.w	r0, r0, #31

0040d268 <.LVL177>:
  40d268:	f000 809e 	beq.w	40d3a8 <.LVL217>
  40d26c:	f1c0 0320 	rsb	r3, r0, #32

0040d270 <.LVL178>:
  40d270:	2b04      	cmp	r3, #4
  40d272:	f340 83d4 	ble.w	40da1e <.LVL446>
  40d276:	9b07      	ldr	r3, [sp, #28]

0040d278 <.LVL179>:
  40d278:	f1c0 001c 	rsb	r0, r0, #28

0040d27c <.LVL180>:
  40d27c:	4403      	add	r3, r0
  40d27e:	9307      	str	r3, [sp, #28]

0040d280 <.LVL181>:
  40d280:	4613      	mov	r3, r2

0040d282 <.LVL182>:
  40d282:	4403      	add	r3, r0
  40d284:	4407      	add	r7, r0
  40d286:	9306      	str	r3, [sp, #24]

0040d288 <.LVL184>:
  40d288:	9b07      	ldr	r3, [sp, #28]
  40d28a:	2b00      	cmp	r3, #0
  40d28c:	dd05      	ble.n	40d29a <.LVL185+0x2>
  40d28e:	4641      	mov	r1, r8
  40d290:	461a      	mov	r2, r3
  40d292:	4620      	mov	r0, r4
  40d294:	f010 fe1c 	bl	41ded0 <.LFE23>

0040d298 <.LVL185>:
  40d298:	4680      	mov	r8, r0
  40d29a:	9b06      	ldr	r3, [sp, #24]
  40d29c:	2b00      	cmp	r3, #0
  40d29e:	dd05      	ble.n	40d2ac <.LVL187+0x2>
  40d2a0:	461a      	mov	r2, r3
  40d2a2:	9905      	ldr	r1, [sp, #20]
  40d2a4:	4620      	mov	r0, r4
  40d2a6:	f010 fe13 	bl	41ded0 <.LFE23>

0040d2aa <.LVL187>:
  40d2aa:	9005      	str	r0, [sp, #20]
  40d2ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40d2ae:	2b00      	cmp	r3, #0
  40d2b0:	f040 8083 	bne.w	40d3ba <.LVL223>
  40d2b4:	2e00      	cmp	r6, #0
  40d2b6:	f340 821e 	ble.w	40d6f6 <.LVL322>
  40d2ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d2bc:	2b00      	cmp	r3, #0
  40d2be:	f000 8096 	beq.w	40d3ee <.LVL230>

0040d2c2 <.LVL189>:
  40d2c2:	2f00      	cmp	r7, #0
  40d2c4:	dd05      	ble.n	40d2d2 <.LVL191>
  40d2c6:	4629      	mov	r1, r5
  40d2c8:	463a      	mov	r2, r7
  40d2ca:	4620      	mov	r0, r4
  40d2cc:	f010 fe00 	bl	41ded0 <.LFE23>

0040d2d0 <.LVL190>:
  40d2d0:	4605      	mov	r5, r0

0040d2d2 <.LVL191>:
  40d2d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40d2d4:	2b00      	cmp	r3, #0
  40d2d6:	f040 82ce 	bne.w	40d876 <.LVL378>
  40d2da:	462f      	mov	r7, r5

0040d2dc <.LVL192>:
  40d2dc:	9b08      	ldr	r3, [sp, #32]
  40d2de:	3e01      	subs	r6, #1
  40d2e0:	199a      	adds	r2, r3, r6
  40d2e2:	9209      	str	r2, [sp, #36]	; 0x24
  40d2e4:	f00a 0201 	and.w	r2, sl, #1
  40d2e8:	920a      	str	r2, [sp, #40]	; 0x28

0040d2ea <.LVL193>:
  40d2ea:	461e      	mov	r6, r3

0040d2ec <.LVL194>:
  40d2ec:	f8dd b014 	ldr.w	fp, [sp, #20]
  40d2f0:	4640      	mov	r0, r8
  40d2f2:	4659      	mov	r1, fp
  40d2f4:	f00d fda6 	bl	41ae44 <quorem>

0040d2f8 <.LVL195>:
  40d2f8:	4629      	mov	r1, r5
  40d2fa:	4682      	mov	sl, r0

0040d2fc <.LVL196>:
  40d2fc:	4640      	mov	r0, r8
  40d2fe:	f014 f8bd 	bl	42147c <.LBE18>

0040d302 <.LVL197>:
  40d302:	463a      	mov	r2, r7
  40d304:	4659      	mov	r1, fp
  40d306:	4681      	mov	r9, r0
  40d308:	4620      	mov	r0, r4
  40d30a:	f00e f98b 	bl	41b624 <.LFE20>

0040d30e <.LVL198>:
  40d30e:	68c3      	ldr	r3, [r0, #12]
  40d310:	4683      	mov	fp, r0
  40d312:	f10a 0230 	add.w	r2, sl, #48	; 0x30

0040d316 <.LVL199>:
  40d316:	2b00      	cmp	r3, #0
  40d318:	f040 81e5 	bne.w	40d6e6 <.LVL318>
  40d31c:	4601      	mov	r1, r0
  40d31e:	4640      	mov	r0, r8

0040d320 <.LVL200>:
  40d320:	9207      	str	r2, [sp, #28]
  40d322:	f014 f8ab 	bl	42147c <.LBE18>

0040d326 <.LVL201>:
  40d326:	4659      	mov	r1, fp
  40d328:	9006      	str	r0, [sp, #24]

0040d32a <.LVL202>:
  40d32a:	4620      	mov	r0, r4

0040d32c <.LVL203>:
  40d32c:	f014 ff46 	bl	4221bc <_Bfree>

0040d330 <.LVL204>:
  40d330:	9b06      	ldr	r3, [sp, #24]
  40d332:	9a07      	ldr	r2, [sp, #28]
  40d334:	b933      	cbnz	r3, 40d344 <.LVL205>
  40d336:	9901      	ldr	r1, [sp, #4]
  40d338:	b921      	cbnz	r1, 40d344 <.LVL205>
  40d33a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d33c:	2b00      	cmp	r3, #0
  40d33e:	f000 8343 	beq.w	40d9c8 <.LVL432>
  40d342:	9b01      	ldr	r3, [sp, #4]

0040d344 <.LVL205>:
  40d344:	f1b9 0f00 	cmp.w	r9, #0
  40d348:	f2c0 823b 	blt.w	40d7c2 <.LVL352>
  40d34c:	d105      	bne.n	40d35a <.LVL205+0x16>
  40d34e:	9901      	ldr	r1, [sp, #4]
  40d350:	b919      	cbnz	r1, 40d35a <.LVL205+0x16>
  40d352:	990a      	ldr	r1, [sp, #40]	; 0x28
  40d354:	2900      	cmp	r1, #0
  40d356:	f000 8234 	beq.w	40d7c2 <.LVL352>
  40d35a:	2b00      	cmp	r3, #0
  40d35c:	f300 829f 	bgt.w	40d89e <.LVL385>
  40d360:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d362:	7032      	strb	r2, [r6, #0]
  40d364:	f106 0901 	add.w	r9, r6, #1

0040d368 <.LVL206>:
  40d368:	429e      	cmp	r6, r3
  40d36a:	46cb      	mov	fp, r9

0040d36c <.LVL207>:
  40d36c:	f000 82a2 	beq.w	40d8b4 <.LVL390>
  40d370:	4641      	mov	r1, r8
  40d372:	2300      	movs	r3, #0
  40d374:	220a      	movs	r2, #10
  40d376:	4620      	mov	r0, r4
  40d378:	f011 ff92 	bl	41f2a0 <__multadd>

0040d37c <.LVL208>:
  40d37c:	42bd      	cmp	r5, r7
  40d37e:	4680      	mov	r8, r0

0040d380 <.LVL209>:
  40d380:	4629      	mov	r1, r5
  40d382:	f04f 0300 	mov.w	r3, #0
  40d386:	f04f 020a 	mov.w	r2, #10
  40d38a:	4620      	mov	r0, r4

0040d38c <.LVL210>:
  40d38c:	f000 81a5 	beq.w	40d6da <.LVL315>

0040d390 <.LVL211>:
  40d390:	f011 ff86 	bl	41f2a0 <__multadd>

0040d394 <.LVL212>:
  40d394:	4639      	mov	r1, r7
  40d396:	4605      	mov	r5, r0

0040d398 <.LVL213>:
  40d398:	2300      	movs	r3, #0
  40d39a:	220a      	movs	r2, #10
  40d39c:	4620      	mov	r0, r4

0040d39e <.LVL214>:
  40d39e:	f011 ff7f 	bl	41f2a0 <__multadd>

0040d3a2 <.LVL215>:
  40d3a2:	464e      	mov	r6, r9
  40d3a4:	4607      	mov	r7, r0

0040d3a6 <.LVL216>:
  40d3a6:	e7a1      	b.n	40d2ec <.LVL194>

0040d3a8 <.LVL217>:
  40d3a8:	201c      	movs	r0, #28

0040d3aa <.LVL218>:
  40d3aa:	9b07      	ldr	r3, [sp, #28]
  40d3ac:	4403      	add	r3, r0
  40d3ae:	9307      	str	r3, [sp, #28]

0040d3b0 <.LVL219>:
  40d3b0:	9b06      	ldr	r3, [sp, #24]

0040d3b2 <.LVL220>:
  40d3b2:	4403      	add	r3, r0
  40d3b4:	4407      	add	r7, r0
  40d3b6:	9306      	str	r3, [sp, #24]

0040d3b8 <.LVL222>:
  40d3b8:	e766      	b.n	40d288 <.LVL184>

0040d3ba <.LVL223>:
  40d3ba:	9905      	ldr	r1, [sp, #20]
  40d3bc:	4640      	mov	r0, r8
  40d3be:	f014 f85d 	bl	42147c <.LBE18>

0040d3c2 <.LVL224>:
  40d3c2:	2800      	cmp	r0, #0
  40d3c4:	f6bf af76 	bge.w	40d2b4 <.LVL187+0xa>
  40d3c8:	9e02      	ldr	r6, [sp, #8]

0040d3ca <.LVL225>:
  40d3ca:	4641      	mov	r1, r8
  40d3cc:	2300      	movs	r3, #0
  40d3ce:	220a      	movs	r2, #10
  40d3d0:	4620      	mov	r0, r4
  40d3d2:	3e01      	subs	r6, #1
  40d3d4:	9602      	str	r6, [sp, #8]

0040d3d6 <.LVL226>:
  40d3d6:	f011 ff63 	bl	41f2a0 <__multadd>

0040d3da <.LVL227>:
  40d3da:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d3dc:	4680      	mov	r8, r0

0040d3de <.LVL228>:
  40d3de:	2b00      	cmp	r3, #0
  40d3e0:	f040 8302 	bne.w	40d9e8 <.LVL436>

0040d3e4 <.LVL229>:
  40d3e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40d3e6:	2b00      	cmp	r3, #0
  40d3e8:	f340 830a 	ble.w	40da00 <.LVL440>
  40d3ec:	461e      	mov	r6, r3

0040d3ee <.LVL230>:
  40d3ee:	f8dd a020 	ldr.w	sl, [sp, #32]

0040d3f2 <.LVL231>:
  40d3f2:	f8dd b014 	ldr.w	fp, [sp, #20]
  40d3f6:	4657      	mov	r7, sl

0040d3f8 <.LVL232>:
  40d3f8:	e002      	b.n	40d400 <.LVL235>

0040d3fa <.LVL233>:
  40d3fa:	f011 ff51 	bl	41f2a0 <__multadd>

0040d3fe <.LVL234>:
  40d3fe:	4680      	mov	r8, r0

0040d400 <.LVL235>:
  40d400:	4659      	mov	r1, fp
  40d402:	4640      	mov	r0, r8
  40d404:	f00d fd1e 	bl	41ae44 <quorem>

0040d408 <.LVL236>:
  40d408:	f100 0930 	add.w	r9, r0, #48	; 0x30

0040d40c <.LVL237>:
  40d40c:	f807 9b01 	strb.w	r9, [r7], #1

0040d410 <.LVL238>:
  40d410:	eba7 030a 	sub.w	r3, r7, sl
  40d414:	42b3      	cmp	r3, r6
  40d416:	f04f 020a 	mov.w	r2, #10
  40d41a:	f04f 0300 	mov.w	r3, #0
  40d41e:	4641      	mov	r1, r8
  40d420:	4620      	mov	r0, r4
  40d422:	dbea      	blt.n	40d3fa <.LVL233>

0040d424 <.LVL239>:
  40d424:	9b08      	ldr	r3, [sp, #32]
  40d426:	2e01      	cmp	r6, #1
  40d428:	bfac      	ite	ge
  40d42a:	199b      	addge	r3, r3, r6
  40d42c:	3301      	addlt	r3, #1
  40d42e:	469b      	mov	fp, r3
  40d430:	f04f 0a00 	mov.w	sl, #0

0040d434 <.LVL240>:
  40d434:	4641      	mov	r1, r8
  40d436:	2201      	movs	r2, #1
  40d438:	4620      	mov	r0, r4
  40d43a:	f010 fd49 	bl	41ded0 <.LFE23>

0040d43e <.LVL241>:
  40d43e:	9905      	ldr	r1, [sp, #20]
  40d440:	4680      	mov	r8, r0

0040d442 <.LVL242>:
  40d442:	f014 f81b 	bl	42147c <.LBE18>

0040d446 <.LVL243>:
  40d446:	2800      	cmp	r0, #0
  40d448:	f340 81d7 	ble.w	40d7fa <.LVL362>
  40d44c:	f81b 2c01 	ldrb.w	r2, [fp, #-1]

0040d450 <.L142>:
  40d450:	9908      	ldr	r1, [sp, #32]
  40d452:	f10b 33ff 	add.w	r3, fp, #4294967295
  40d456:	e004      	b.n	40d462 <.LVL246>

0040d458 <.LVL245>:
  40d458:	428b      	cmp	r3, r1
  40d45a:	f000 8168 	beq.w	40d72e <.LVL331>
  40d45e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!

0040d462 <.LVL246>:
  40d462:	2a39      	cmp	r2, #57	; 0x39
  40d464:	f103 0b01 	add.w	fp, r3, #1

0040d468 <.LVL247>:
  40d468:	d0f6      	beq.n	40d458 <.LVL245>

0040d46a <.LVL248>:
  40d46a:	3201      	adds	r2, #1
  40d46c:	701a      	strb	r2, [r3, #0]

0040d46e <.L135>:
  40d46e:	9905      	ldr	r1, [sp, #20]
  40d470:	4620      	mov	r0, r4
  40d472:	f014 fea3 	bl	4221bc <_Bfree>

0040d476 <.LVL250>:
  40d476:	2d00      	cmp	r5, #0
  40d478:	f43f ae22 	beq.w	40d0c0 <.L76>
  40d47c:	f1ba 0f00 	cmp.w	sl, #0
  40d480:	d005      	beq.n	40d48e <.LVL251>
  40d482:	45aa      	cmp	sl, r5
  40d484:	d003      	beq.n	40d48e <.LVL251>
  40d486:	4651      	mov	r1, sl
  40d488:	4620      	mov	r0, r4
  40d48a:	f014 fe97 	bl	4221bc <_Bfree>

0040d48e <.LVL251>:
  40d48e:	4629      	mov	r1, r5
  40d490:	4620      	mov	r0, r4
  40d492:	f014 fe93 	bl	4221bc <_Bfree>

0040d496 <.LVL252>:
  40d496:	e613      	b.n	40d0c0 <.L76>

0040d498 <.LVL253>:
  40d498:	2300      	movs	r3, #0
  40d49a:	9309      	str	r3, [sp, #36]	; 0x24

0040d49c <.LVL254>:
  40d49c:	9b02      	ldr	r3, [sp, #8]
  40d49e:	444b      	add	r3, r9
  40d4a0:	1c5e      	adds	r6, r3, #1

0040d4a2 <.LVL255>:
  40d4a2:	2e01      	cmp	r6, #1
  40d4a4:	4637      	mov	r7, r6
  40d4a6:	930c      	str	r3, [sp, #48]	; 0x30

0040d4a8 <.LVL256>:
  40d4a8:	bfb8      	it	lt
  40d4aa:	2701      	movlt	r7, #1
  40d4ac:	960e      	str	r6, [sp, #56]	; 0x38

0040d4ae <.LVL257>:
  40d4ae:	2100      	movs	r1, #0
  40d4b0:	2f17      	cmp	r7, #23
  40d4b2:	6461      	str	r1, [r4, #68]	; 0x44
  40d4b4:	d90a      	bls.n	40d4cc <.LVL260>
  40d4b6:	2201      	movs	r2, #1
  40d4b8:	2304      	movs	r3, #4

0040d4ba <.LVL258>:
  40d4ba:	005b      	lsls	r3, r3, #1
  40d4bc:	f103 0014 	add.w	r0, r3, #20
  40d4c0:	4287      	cmp	r7, r0
  40d4c2:	4611      	mov	r1, r2
  40d4c4:	f102 0201 	add.w	r2, r2, #1
  40d4c8:	d2f7      	bcs.n	40d4ba <.LVL258>
  40d4ca:	6461      	str	r1, [r4, #68]	; 0x44

0040d4cc <.LVL260>:
  40d4cc:	4620      	mov	r0, r4
  40d4ce:	f013 fb4d 	bl	420b6c <.LFE2>

0040d4d2 <.LVL261>:
  40d4d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40d4d4:	9008      	str	r0, [sp, #32]
  40d4d6:	2b0e      	cmp	r3, #14
  40d4d8:	6420      	str	r0, [r4, #64]	; 0x40

0040d4da <.LVL262>:
  40d4da:	f63f ad88 	bhi.w	40cfee <.LVL104>

0040d4de <.LVL263>:
  40d4de:	2d00      	cmp	r5, #0
  40d4e0:	f43f ad85 	beq.w	40cfee <.LVL104>

0040d4e4 <.LVL264>:
  40d4e4:	9802      	ldr	r0, [sp, #8]
  40d4e6:	2800      	cmp	r0, #0
  40d4e8:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38

0040d4ec <.LVL265>:
  40d4ec:	f340 819a 	ble.w	40d824 <.LVL368>
  40d4f0:	4ac8      	ldr	r2, [pc, #800]	; (40d814 <.LVL365+0x4>)
  40d4f2:	f000 030f 	and.w	r3, r0, #15
  40d4f6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  40d4fa:	1103      	asrs	r3, r0, #4
  40d4fc:	06df      	lsls	r7, r3, #27
  40d4fe:	ed92 7b00 	vldr	d7, [r2]

0040d502 <.LVL266>:
  40d502:	f140 814d 	bpl.w	40d7a0 <.LVL348>
  40d506:	4ac4      	ldr	r2, [pc, #784]	; (40d818 <.LVL365+0x8>)
  40d508:	ed92 6b08 	vldr	d6, [r2, #32]
  40d50c:	ec4b ab14 	vmov	d4, sl, fp

0040d510 <.LVL267>:
  40d510:	f003 030f 	and.w	r3, r3, #15
  40d514:	2103      	movs	r1, #3
  40d516:	ee84 5b06 	vdiv.f64	d5, d4, d6

0040d51a <.LVL269>:
  40d51a:	b15b      	cbz	r3, 40d534 <.LVL273+0x6>
  40d51c:	4abe      	ldr	r2, [pc, #760]	; (40d818 <.LVL365+0x8>)

0040d51e <.LVL270>:
  40d51e:	07dd      	lsls	r5, r3, #31
  40d520:	d504      	bpl.n	40d52c <.LVL272>
  40d522:	ed92 6b00 	vldr	d6, [r2]
  40d526:	3101      	adds	r1, #1
  40d528:	ee27 7b06 	vmul.f64	d7, d7, d6

0040d52c <.LVL272>:
  40d52c:	105b      	asrs	r3, r3, #1

0040d52e <.LVL273>:
  40d52e:	f102 0208 	add.w	r2, r2, #8
  40d532:	d1f4      	bne.n	40d51e <.LVL270>
  40d534:	ee85 6b07 	vdiv.f64	d6, d5, d7

0040d538 <.LVL274>:
  40d538:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40d53a:	b13b      	cbz	r3, 40d54c <.LVL275>
  40d53c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
  40d540:	eeb4 6bc7 	vcmpe.f64	d6, d7
  40d544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40d548:	f100 8206 	bmi.w	40d958 <.LVL416>

0040d54c <.LVL275>:
  40d54c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
  40d550:	ee07 1a90 	vmov	s15, r1
  40d554:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  40d558:	eea7 5b06 	vfma.f64	d5, d7, d6
  40d55c:	ec51 0b15 	vmov	r0, r1, d5
  40d560:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000

0040d564 <.LVL276>:
  40d564:	2e00      	cmp	r6, #0
  40d566:	f000 80f8 	beq.w	40d75a <.LVL336>
  40d56a:	9a02      	ldr	r2, [sp, #8]
  40d56c:	4635      	mov	r5, r6

0040d56e <.LVL277>:
  40d56e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d570:	2b00      	cmp	r3, #0
  40d572:	f000 81a7 	beq.w	40d8c4 <.LVL396>
  40d576:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
  40d57a:	4ba6      	ldr	r3, [pc, #664]	; (40d814 <.LVL365+0x4>)
  40d57c:	9f08      	ldr	r7, [sp, #32]
  40d57e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40d582:	ed13 4b02 	vldr	d4, [r3, #-8]
  40d586:	eebd 7bc6 	vcvt.s32.f64	s14, d6
  40d58a:	ee83 5b04 	vdiv.f64	d5, d3, d4
  40d58e:	ee17 3a10 	vmov	r3, s14

0040d592 <.LVL278>:
  40d592:	ec41 0b14 	vmov	d4, r0, r1
  40d596:	3330      	adds	r3, #48	; 0x30
  40d598:	b2db      	uxtb	r3, r3
  40d59a:	ee35 5b44 	vsub.f64	d5, d5, d4

0040d59e <.LVL279>:
  40d59e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14

0040d5a2 <.LVL280>:
  40d5a2:	ee36 7b47 	vsub.f64	d7, d6, d7
  40d5a6:	eeb4 5bc7 	vcmpe.f64	d5, d7
  40d5aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40d5ae:	703b      	strb	r3, [r7, #0]
  40d5b0:	f107 0b01 	add.w	fp, r7, #1

0040d5b4 <.LVL281>:
  40d5b4:	dc31      	bgt.n	40d61a <.LVL288+0xe>
  40d5b6:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
  40d5ba:	ee33 6b47 	vsub.f64	d6, d3, d7

0040d5be <.LVL282>:
  40d5be:	eeb4 5bc6 	vcmpe.f64	d5, d6
  40d5c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40d5c6:	f300 81fa 	bgt.w	40d9be <.LVL428>

0040d5ca <.LVL283>:
  40d5ca:	2d01      	cmp	r5, #1
  40d5cc:	f000 8126 	beq.w	40d81c <.LDL1>
  40d5d0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
  40d5d4:	9b08      	ldr	r3, [sp, #32]
  40d5d6:	1959      	adds	r1, r3, r5
  40d5d8:	e00a      	b.n	40d5f0 <.LVL285>

0040d5da <.LVL284>:
  40d5da:	ee33 6b47 	vsub.f64	d6, d3, d7
  40d5de:	eeb4 6bc5 	vcmpe.f64	d6, d5
  40d5e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40d5e6:	f100 81ea 	bmi.w	40d9be <.LVL428>
  40d5ea:	458b      	cmp	fp, r1
  40d5ec:	f000 8116 	beq.w	40d81c <.LDL1>

0040d5f0 <.LVL285>:
  40d5f0:	ee27 7b04 	vmul.f64	d7, d7, d4
  40d5f4:	ee25 5b04 	vmul.f64	d5, d5, d4
  40d5f8:	eebd 6bc7 	vcvt.s32.f64	s12, d7

0040d5fc <.LVL286>:
  40d5fc:	ee16 3a10 	vmov	r3, s12
  40d600:	3330      	adds	r3, #48	; 0x30
  40d602:	b2db      	uxtb	r3, r3
  40d604:	eeb8 6bc6 	vcvt.f64.s32	d6, s12

0040d608 <.LVL287>:
  40d608:	ee37 7b46 	vsub.f64	d7, d7, d6

0040d60c <.LVL288>:
  40d60c:	eeb4 7bc5 	vcmpe.f64	d7, d5
  40d610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40d614:	f80b 3b01 	strb.w	r3, [fp], #1
  40d618:	d5df      	bpl.n	40d5da <.LVL284>
  40d61a:	9202      	str	r2, [sp, #8]

0040d61c <.LVL289>:
  40d61c:	e550      	b.n	40d0c0 <.L76>

0040d61e <.LVL290>:
  40d61e:	2300      	movs	r3, #0
  40d620:	9309      	str	r3, [sp, #36]	; 0x24

0040d622 <.LVL291>:
  40d622:	f1b9 0f00 	cmp.w	r9, #0
  40d626:	f340 80bf 	ble.w	40d7a8 <.LVL349>
  40d62a:	464f      	mov	r7, r9
  40d62c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  40d630:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  40d634:	464e      	mov	r6, r9
  40d636:	e73a      	b.n	40d4ae <.LVL257>

0040d638 <.LVL292>:
  40d638:	2301      	movs	r3, #1
  40d63a:	9309      	str	r3, [sp, #36]	; 0x24
  40d63c:	e7f1      	b.n	40d622 <.LVL291>

0040d63e <.LVL293>:
  40d63e:	f1ba 0f00 	cmp.w	sl, #0
  40d642:	f47f aded 	bne.w	40d220 <.LVL168+0x6>

0040d646 <.LVL294>:
  40d646:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40d64a:	2b00      	cmp	r3, #0
  40d64c:	f47f ae02 	bne.w	40d254 <.LVL174+0x8>
  40d650:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
  40d654:	0d1b      	lsrs	r3, r3, #20
  40d656:	051b      	lsls	r3, r3, #20
  40d658:	2b00      	cmp	r3, #0
  40d65a:	f000 81b3 	beq.w	40d9c4 <.LVL430>
  40d65e:	9b07      	ldr	r3, [sp, #28]
  40d660:	3301      	adds	r3, #1
  40d662:	9307      	str	r3, [sp, #28]

0040d664 <.LVL295>:
  40d664:	9b06      	ldr	r3, [sp, #24]

0040d666 <.LVL296>:
  40d666:	3301      	adds	r3, #1
  40d668:	9306      	str	r3, [sp, #24]

0040d66a <.LVL297>:
  40d66a:	2301      	movs	r3, #1

0040d66c <.LVL298>:
  40d66c:	930d      	str	r3, [sp, #52]	; 0x34

0040d66e <.LVL299>:
  40d66e:	e5f3      	b.n	40d258 <.LVL175>

0040d670 <.LVL300>:
  40d670:	2e00      	cmp	r6, #0
  40d672:	f73f accb 	bgt.w	40d00c <.LVL106>

0040d676 <.LVL301>:
  40d676:	f040 8083 	bne.w	40d780 <.LVL338>
  40d67a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
  40d67e:	ee24 4b07 	vmul.f64	d4, d4, d7

0040d682 <.LVL302>:
  40d682:	ec4b ab17 	vmov	d7, sl, fp
  40d686:	eeb4 4bc7 	vcmpe.f64	d4, d7
  40d68a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40d68e:	4635      	mov	r5, r6
  40d690:	9605      	str	r6, [sp, #20]

0040d692 <.LVL303>:
  40d692:	db43      	blt.n	40d71c <.L73>

0040d694 <.L74>:
  40d694:	ea6f 0309 	mvn.w	r3, r9
  40d698:	f8dd b020 	ldr.w	fp, [sp, #32]
  40d69c:	9302      	str	r3, [sp, #8]

0040d69e <.LVL305>:
  40d69e:	9905      	ldr	r1, [sp, #20]
  40d6a0:	4620      	mov	r0, r4

0040d6a2 <.LVL306>:
  40d6a2:	f014 fd8b 	bl	4221bc <_Bfree>

0040d6a6 <.LVL307>:
  40d6a6:	2d00      	cmp	r5, #0
  40d6a8:	f43f ad0a 	beq.w	40d0c0 <.L76>
  40d6ac:	e6ef      	b.n	40d48e <.LVL251>

0040d6ae <.LVL308>:
  40d6ae:	9a05      	ldr	r2, [sp, #20]
  40d6b0:	4641      	mov	r1, r8
  40d6b2:	4620      	mov	r0, r4

0040d6b4 <.LVL309>:
  40d6b4:	f010 fdf4 	bl	41e2a0 <__pow5mult>

0040d6b8 <.LVL310>:
  40d6b8:	4680      	mov	r8, r0

0040d6ba <.LVL311>:
  40d6ba:	e59f      	b.n	40d1fc <.LVL162>

0040d6bc <.LVL312>:
  40d6bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40d6be:	2a00      	cmp	r2, #0
  40d6c0:	f000 813e 	beq.w	40d940 <.LVL413>
  40d6c4:	9a05      	ldr	r2, [sp, #20]
  40d6c6:	920d      	str	r2, [sp, #52]	; 0x34

0040d6c8 <.LVL313>:
  40d6c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40d6cc:	9f07      	ldr	r7, [sp, #28]
  40d6ce:	e51f      	b.n	40d110 <.LVL127>

0040d6d0 <.LVL314>:
  40d6d0:	f1ba 0f00 	cmp.w	sl, #0
  40d6d4:	f47f adbe 	bne.w	40d254 <.LVL174+0x8>
  40d6d8:	e7b5      	b.n	40d646 <.LVL294>

0040d6da <.LVL315>:
  40d6da:	f011 fde1 	bl	41f2a0 <__multadd>

0040d6de <.LVL316>:
  40d6de:	464e      	mov	r6, r9
  40d6e0:	4605      	mov	r5, r0

0040d6e2 <.LVL317>:
  40d6e2:	4607      	mov	r7, r0
  40d6e4:	e602      	b.n	40d2ec <.LVL194>

0040d6e6 <.LVL318>:
  40d6e6:	4601      	mov	r1, r0
  40d6e8:	4620      	mov	r0, r4

0040d6ea <.LVL319>:
  40d6ea:	9206      	str	r2, [sp, #24]

0040d6ec <.LVL320>:
  40d6ec:	f014 fd66 	bl	4221bc <_Bfree>

0040d6f0 <.LVL321>:
  40d6f0:	2301      	movs	r3, #1
  40d6f2:	9a06      	ldr	r2, [sp, #24]
  40d6f4:	e626      	b.n	40d344 <.LVL205>

0040d6f6 <.LVL322>:
  40d6f6:	9b01      	ldr	r3, [sp, #4]
  40d6f8:	2b02      	cmp	r3, #2
  40d6fa:	f77f adde 	ble.w	40d2ba <.LVL187+0x10>

0040d6fe <.LVL323>:
  40d6fe:	2e00      	cmp	r6, #0
  40d700:	d1c8      	bne.n	40d694 <.L74>
  40d702:	4633      	mov	r3, r6
  40d704:	9905      	ldr	r1, [sp, #20]
  40d706:	2205      	movs	r2, #5
  40d708:	4620      	mov	r0, r4
  40d70a:	f011 fdc9 	bl	41f2a0 <__multadd>

0040d70e <.LVL324>:
  40d70e:	4601      	mov	r1, r0
  40d710:	9005      	str	r0, [sp, #20]

0040d712 <.LVL325>:
  40d712:	4640      	mov	r0, r8

0040d714 <.LVL326>:
  40d714:	f013 feb2 	bl	42147c <.LBE18>

0040d718 <.LVL327>:
  40d718:	2800      	cmp	r0, #0
  40d71a:	ddbb      	ble.n	40d694 <.L74>

0040d71c <.L73>:
  40d71c:	9a02      	ldr	r2, [sp, #8]
  40d71e:	9908      	ldr	r1, [sp, #32]
  40d720:	2331      	movs	r3, #49	; 0x31
  40d722:	3201      	adds	r2, #1
  40d724:	9202      	str	r2, [sp, #8]

0040d726 <.LVL329>:
  40d726:	700b      	strb	r3, [r1, #0]
  40d728:	f101 0b01 	add.w	fp, r1, #1

0040d72c <.LVL330>:
  40d72c:	e7b7      	b.n	40d69e <.LVL305>

0040d72e <.LVL331>:
  40d72e:	9a02      	ldr	r2, [sp, #8]
  40d730:	3201      	adds	r2, #1
  40d732:	9202      	str	r2, [sp, #8]

0040d734 <.LVL332>:
  40d734:	9a08      	ldr	r2, [sp, #32]

0040d736 <.LVL333>:
  40d736:	2331      	movs	r3, #49	; 0x31
  40d738:	7013      	strb	r3, [r2, #0]
  40d73a:	e698      	b.n	40d46e <.L135>

0040d73c <.LVL334>:
  40d73c:	2301      	movs	r3, #1
  40d73e:	9309      	str	r3, [sp, #36]	; 0x24
  40d740:	e6ac      	b.n	40d49c <.LVL254>

0040d742 <.LVL335>:
  40d742:	ee07 1a90 	vmov	s15, r1
  40d746:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
  40d74a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  40d74e:	eea6 5b07 	vfma.f64	d5, d6, d7
  40d752:	ec51 0b15 	vmov	r0, r1, d5
  40d756:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000

0040d75a <.LVL336>:
  40d75a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
  40d75e:	ee36 7b47 	vsub.f64	d7, d6, d7

0040d762 <.LVL337>:
  40d762:	ec41 0b16 	vmov	d6, r0, r1
  40d766:	eeb4 7bc6 	vcmpe.f64	d7, d6
  40d76a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40d76e:	f300 80a5 	bgt.w	40d8bc <.LVL394>
  40d772:	eeb1 6b46 	vneg.f64	d6, d6
  40d776:	eeb4 7bc6 	vcmpe.f64	d7, d6
  40d77a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40d77e:	d54d      	bpl.n	40d81c <.LDL1>

0040d780 <.LVL338>:
  40d780:	2300      	movs	r3, #0
  40d782:	9305      	str	r3, [sp, #20]

0040d784 <.LVL339>:
  40d784:	461d      	mov	r5, r3
  40d786:	e785      	b.n	40d694 <.L74>

0040d788 <.LVL340>:
  40d788:	9808      	ldr	r0, [sp, #32]
  40d78a:	f7ff bb6f 	b.w	40ce6c <.LVL57>

0040d78e <.LVL341>:
  40d78e:	9b05      	ldr	r3, [sp, #20]
  40d790:	990a      	ldr	r1, [sp, #40]	; 0x28

0040d792 <.LVL342>:
  40d792:	9205      	str	r2, [sp, #20]

0040d794 <.LVL343>:
  40d794:	1ad3      	subs	r3, r2, r3

0040d796 <.LVL344>:
  40d796:	4419      	add	r1, r3
  40d798:	2300      	movs	r3, #0

0040d79a <.LVL345>:
  40d79a:	910a      	str	r1, [sp, #40]	; 0x28

0040d79c <.LVL346>:
  40d79c:	930d      	str	r3, [sp, #52]	; 0x34

0040d79e <.LVL347>:
  40d79e:	e4b2      	b.n	40d106 <.LVL126>

0040d7a0 <.LVL348>:
  40d7a0:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
  40d7a4:	2102      	movs	r1, #2
  40d7a6:	e6b8      	b.n	40d51a <.LVL269>

0040d7a8 <.LVL349>:
  40d7a8:	2100      	movs	r1, #0
  40d7aa:	6461      	str	r1, [r4, #68]	; 0x44
  40d7ac:	4620      	mov	r0, r4
  40d7ae:	f013 f9dd 	bl	420b6c <.LFE2>

0040d7b2 <.LVL350>:
  40d7b2:	f04f 0901 	mov.w	r9, #1
  40d7b6:	9008      	str	r0, [sp, #32]
  40d7b8:	6420      	str	r0, [r4, #64]	; 0x40

0040d7ba <.LVL351>:
  40d7ba:	464e      	mov	r6, r9
  40d7bc:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  40d7c0:	e68d      	b.n	40d4de <.LVL263>

0040d7c2 <.LVL352>:
  40d7c2:	2b00      	cmp	r3, #0
  40d7c4:	4691      	mov	r9, r2

0040d7c6 <.LVL353>:
  40d7c6:	dd11      	ble.n	40d7ec <.LVL359>
  40d7c8:	4641      	mov	r1, r8
  40d7ca:	2201      	movs	r2, #1
  40d7cc:	4620      	mov	r0, r4
  40d7ce:	f010 fb7f 	bl	41ded0 <.LFE23>

0040d7d2 <.LVL354>:
  40d7d2:	9905      	ldr	r1, [sp, #20]
  40d7d4:	4680      	mov	r8, r0

0040d7d6 <.LVL355>:
  40d7d6:	f013 fe51 	bl	42147c <.LBE18>

0040d7da <.LVL356>:
  40d7da:	2800      	cmp	r0, #0
  40d7dc:	f340 80fd 	ble.w	40d9da <.LVL435>

0040d7e0 <.LVL357>:
  40d7e0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  40d7e4:	f000 80d4 	beq.w	40d990 <.L133>

0040d7e8 <.LVL358>:
  40d7e8:	f10a 0931 	add.w	r9, sl, #49	; 0x31

0040d7ec <.LVL359>:
  40d7ec:	46aa      	mov	sl, r5
  40d7ee:	f886 9000 	strb.w	r9, [r6]
  40d7f2:	f106 0b01 	add.w	fp, r6, #1

0040d7f6 <.LVL360>:
  40d7f6:	463d      	mov	r5, r7

0040d7f8 <.LVL361>:
  40d7f8:	e639      	b.n	40d46e <.L135>

0040d7fa <.LVL362>:
  40d7fa:	d104      	bne.n	40d806 <.LVL364>
  40d7fc:	f019 0f01 	tst.w	r9, #1
  40d800:	d001      	beq.n	40d806 <.LVL364>
  40d802:	e623      	b.n	40d44c <.LVL243+0x6>

0040d804 <.LVL363>:
  40d804:	4693      	mov	fp, r2

0040d806 <.LVL364>:
  40d806:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
  40d80a:	2b30      	cmp	r3, #48	; 0x30
  40d80c:	f10b 32ff 	add.w	r2, fp, #4294967295

0040d810 <.LVL365>:
  40d810:	d0f8      	beq.n	40d804 <.LVL363>
  40d812:	e62c      	b.n	40d46e <.L135>
  40d814:	0041cc38 	.word	0x0041cc38
  40d818:	00421b38 	.word	0x00421b38

0040d81c <.LDL1>:
  40d81c:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38

0040d820 <.LVL367>:
  40d820:	f7ff bbe5 	b.w	40cfee <.LVL104>

0040d824 <.LVL368>:
  40d824:	f000 8094 	beq.w	40d950 <.LVL415>
  40d828:	9b02      	ldr	r3, [sp, #8]
  40d82a:	4a88      	ldr	r2, [pc, #544]	; (40da4c <.LVL451+0x4>)
  40d82c:	425b      	negs	r3, r3

0040d82e <.LVL369>:
  40d82e:	f003 010f 	and.w	r1, r3, #15
  40d832:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
  40d836:	ed92 6b00 	vldr	d6, [r2]
  40d83a:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
  40d83e:	111b      	asrs	r3, r3, #4

0040d840 <.LVL370>:
  40d840:	ee27 6b06 	vmul.f64	d6, d7, d6
  40d844:	f000 80e1 	beq.w	40da0a <.LVL442>
  40d848:	4a81      	ldr	r2, [pc, #516]	; (40da50 <.LVL451+0x8>)
  40d84a:	2102      	movs	r1, #2

0040d84c <.LVL371>:
  40d84c:	07d8      	lsls	r0, r3, #31
  40d84e:	d504      	bpl.n	40d85a <.LVL373>
  40d850:	ed92 7b00 	vldr	d7, [r2]
  40d854:	3101      	adds	r1, #1
  40d856:	ee26 6b07 	vmul.f64	d6, d6, d7

0040d85a <.LVL373>:
  40d85a:	105b      	asrs	r3, r3, #1

0040d85c <.LVL374>:
  40d85c:	f102 0208 	add.w	r2, r2, #8
  40d860:	d1f4      	bne.n	40d84c <.LVL371>
  40d862:	e669      	b.n	40d538 <.LVL274>

0040d864 <.LVL375>:
  40d864:	9908      	ldr	r1, [sp, #32]
  40d866:	2330      	movs	r3, #48	; 0x30
  40d868:	700b      	strb	r3, [r1, #0]
  40d86a:	9b02      	ldr	r3, [sp, #8]
  40d86c:	3301      	adds	r3, #1
  40d86e:	9302      	str	r3, [sp, #8]

0040d870 <.LVL376>:
  40d870:	f81b 3c01 	ldrb.w	r3, [fp, #-1]

0040d874 <.LVL377>:
  40d874:	e422      	b.n	40d0bc <.LVL120>

0040d876 <.LVL378>:
  40d876:	6869      	ldr	r1, [r5, #4]
  40d878:	4620      	mov	r0, r4
  40d87a:	f013 f977 	bl	420b6c <.LFE2>

0040d87e <.LVL379>:
  40d87e:	692b      	ldr	r3, [r5, #16]
  40d880:	3302      	adds	r3, #2
  40d882:	4607      	mov	r7, r0

0040d884 <.LVL380>:
  40d884:	009a      	lsls	r2, r3, #2
  40d886:	f105 010c 	add.w	r1, r5, #12
  40d88a:	300c      	adds	r0, #12

0040d88c <.LVL381>:
  40d88c:	f00d f87a 	bl	41a984 <.LFE14>

0040d890 <.LVL382>:
  40d890:	4639      	mov	r1, r7
  40d892:	2201      	movs	r2, #1
  40d894:	4620      	mov	r0, r4
  40d896:	f010 fb1b 	bl	41ded0 <.LFE23>

0040d89a <.LVL383>:
  40d89a:	4607      	mov	r7, r0

0040d89c <.LVL384>:
  40d89c:	e51e      	b.n	40d2dc <.LVL192>

0040d89e <.LVL385>:
  40d89e:	2a39      	cmp	r2, #57	; 0x39
  40d8a0:	d076      	beq.n	40d990 <.L133>
  40d8a2:	f102 0901 	add.w	r9, r2, #1

0040d8a6 <.LVL386>:
  40d8a6:	46aa      	mov	sl, r5

0040d8a8 <.LVL387>:
  40d8a8:	f886 9000 	strb.w	r9, [r6]
  40d8ac:	f106 0b01 	add.w	fp, r6, #1

0040d8b0 <.LVL388>:
  40d8b0:	463d      	mov	r5, r7

0040d8b2 <.LVL389>:
  40d8b2:	e5dc      	b.n	40d46e <.L135>

0040d8b4 <.LVL390>:
  40d8b4:	46aa      	mov	sl, r5

0040d8b6 <.LVL391>:
  40d8b6:	4691      	mov	r9, r2

0040d8b8 <.LVL392>:
  40d8b8:	463d      	mov	r5, r7

0040d8ba <.LVL393>:
  40d8ba:	e5bb      	b.n	40d434 <.LVL240>

0040d8bc <.LVL394>:
  40d8bc:	2300      	movs	r3, #0
  40d8be:	9305      	str	r3, [sp, #20]

0040d8c0 <.LVL395>:
  40d8c0:	461d      	mov	r5, r3
  40d8c2:	e72b      	b.n	40d71c <.L73>

0040d8c4 <.LVL396>:
  40d8c4:	4b61      	ldr	r3, [pc, #388]	; (40da4c <.LVL451+0x4>)
  40d8c6:	eebd 7bc6 	vcvt.s32.f64	s14, d6
  40d8ca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40d8ce:	ed13 4b02 	vldr	d4, [r3, #-8]
  40d8d2:	ee17 3a10 	vmov	r3, s14

0040d8d6 <.LVL397>:
  40d8d6:	ec41 0b15 	vmov	d5, r0, r1
  40d8da:	9808      	ldr	r0, [sp, #32]

0040d8dc <.LVL398>:
  40d8dc:	ee24 4b05 	vmul.f64	d4, d4, d5

0040d8e0 <.LVL399>:
  40d8e0:	3330      	adds	r3, #48	; 0x30

0040d8e2 <.LVL400>:
  40d8e2:	2d01      	cmp	r5, #1
  40d8e4:	eeb8 7bc7 	vcvt.f64.s32	d7, s14

0040d8e8 <.LVL401>:
  40d8e8:	7003      	strb	r3, [r0, #0]
  40d8ea:	f100 0b01 	add.w	fp, r0, #1

0040d8ee <.LVL402>:
  40d8ee:	ee36 7b47 	vsub.f64	d7, d6, d7
  40d8f2:	d012      	beq.n	40d91a <.LVL409>
  40d8f4:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
  40d8f8:	9b08      	ldr	r3, [sp, #32]

0040d8fa <.LVL403>:
  40d8fa:	1959      	adds	r1, r3, r5

0040d8fc <.LVL404>:
  40d8fc:	ee27 7b05 	vmul.f64	d7, d7, d5
  40d900:	eebd 6bc7 	vcvt.s32.f64	s12, d7

0040d904 <.LVL405>:
  40d904:	ee16 3a10 	vmov	r3, s12
  40d908:	3330      	adds	r3, #48	; 0x30
  40d90a:	f80b 3b01 	strb.w	r3, [fp], #1

0040d90e <.LVL406>:
  40d90e:	458b      	cmp	fp, r1
  40d910:	eeb8 6bc6 	vcvt.f64.s32	d6, s12

0040d914 <.LVL407>:
  40d914:	ee37 7b46 	vsub.f64	d7, d7, d6

0040d918 <.LVL408>:
  40d918:	d1f0      	bne.n	40d8fc <.LVL404>

0040d91a <.LVL409>:
  40d91a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
  40d91e:	ee34 5b06 	vadd.f64	d5, d4, d6
  40d922:	eeb4 5bc7 	vcmpe.f64	d5, d7
  40d926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40d92a:	d538      	bpl.n	40d99e <.LVL424>
  40d92c:	9202      	str	r2, [sp, #8]

0040d92e <.LVL410>:
  40d92e:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
  40d932:	f7ff bbb6 	b.w	40d0a2 <.L77>

0040d936 <.LVL411>:
  40d936:	9b07      	ldr	r3, [sp, #28]
  40d938:	1b9f      	subs	r7, r3, r6

0040d93a <.LVL412>:
  40d93a:	2300      	movs	r3, #0
  40d93c:	f7ff bbe8 	b.w	40d110 <.LVL127>

0040d940 <.LVL413>:
  40d940:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40d942:	9a05      	ldr	r2, [sp, #20]
  40d944:	920d      	str	r2, [sp, #52]	; 0x34

0040d946 <.LVL414>:
  40d946:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40d94a:	9f07      	ldr	r7, [sp, #28]
  40d94c:	f7ff bbe0 	b.w	40d110 <.LVL127>

0040d950 <.LVL415>:
  40d950:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
  40d954:	2102      	movs	r1, #2
  40d956:	e5ef      	b.n	40d538 <.LVL274>

0040d958 <.LVL416>:
  40d958:	2e00      	cmp	r6, #0
  40d95a:	f43f aef2 	beq.w	40d742 <.LVL335>
  40d95e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40d960:	2b00      	cmp	r3, #0
  40d962:	f77f af5b 	ble.w	40d81c <.LDL1>

0040d966 <.LVL417>:
  40d966:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
  40d96a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
  40d96e:	3101      	adds	r1, #1

0040d970 <.LVL418>:
  40d970:	ee07 1a90 	vmov	s15, r1
  40d974:	ee26 6b04 	vmul.f64	d6, d6, d4
  40d978:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  40d97c:	9a02      	ldr	r2, [sp, #8]
  40d97e:	eea6 5b07 	vfma.f64	d5, d6, d7
  40d982:	ec51 0b15 	vmov	r0, r1, d5
  40d986:	3a01      	subs	r2, #1

0040d988 <.LVL419>:
  40d988:	461d      	mov	r5, r3
  40d98a:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000

0040d98e <.LVL420>:
  40d98e:	e5ee      	b.n	40d56e <.LVL277>

0040d990 <.L133>:
  40d990:	2239      	movs	r2, #57	; 0x39
  40d992:	46aa      	mov	sl, r5
  40d994:	7032      	strb	r2, [r6, #0]
  40d996:	463d      	mov	r5, r7

0040d998 <.LVL422>:
  40d998:	f106 0b01 	add.w	fp, r6, #1

0040d99c <.LVL423>:
  40d99c:	e558      	b.n	40d450 <.L142>

0040d99e <.LVL424>:
  40d99e:	ee36 6b44 	vsub.f64	d6, d6, d4
  40d9a2:	eeb4 6bc7 	vcmpe.f64	d6, d7
  40d9a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40d9aa:	dc01      	bgt.n	40d9b0 <.LVL426>
  40d9ac:	e736      	b.n	40d81c <.LDL1>

0040d9ae <.LVL425>:
  40d9ae:	468b      	mov	fp, r1

0040d9b0 <.LVL426>:
  40d9b0:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
  40d9b4:	2b30      	cmp	r3, #48	; 0x30
  40d9b6:	f10b 31ff 	add.w	r1, fp, #4294967295

0040d9ba <.LVL427>:
  40d9ba:	d0f8      	beq.n	40d9ae <.LVL425>
  40d9bc:	e62d      	b.n	40d61a <.LVL288+0xe>

0040d9be <.LVL428>:
  40d9be:	9202      	str	r2, [sp, #8]

0040d9c0 <.LVL429>:
  40d9c0:	f7ff bb6f 	b.w	40d0a2 <.L77>

0040d9c4 <.LVL430>:
  40d9c4:	930d      	str	r3, [sp, #52]	; 0x34

0040d9c6 <.LVL431>:
  40d9c6:	e447      	b.n	40d258 <.LVL175>

0040d9c8 <.LVL432>:
  40d9c8:	2a39      	cmp	r2, #57	; 0x39
  40d9ca:	46cb      	mov	fp, r9

0040d9cc <.LVL433>:
  40d9cc:	4691      	mov	r9, r2

0040d9ce <.LVL434>:
  40d9ce:	d0df      	beq.n	40d990 <.L133>
  40d9d0:	f1bb 0f00 	cmp.w	fp, #0
  40d9d4:	f73f af08 	bgt.w	40d7e8 <.LVL358>
  40d9d8:	e708      	b.n	40d7ec <.LVL359>

0040d9da <.LVL435>:
  40d9da:	f47f af07 	bne.w	40d7ec <.LVL359>
  40d9de:	f019 0f01 	tst.w	r9, #1
  40d9e2:	f43f af03 	beq.w	40d7ec <.LVL359>
  40d9e6:	e6fb      	b.n	40d7e0 <.LVL357>

0040d9e8 <.LVL436>:
  40d9e8:	4629      	mov	r1, r5
  40d9ea:	2300      	movs	r3, #0
  40d9ec:	220a      	movs	r2, #10
  40d9ee:	4620      	mov	r0, r4

0040d9f0 <.LVL437>:
  40d9f0:	f011 fc56 	bl	41f2a0 <__multadd>

0040d9f4 <.LVL438>:
  40d9f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40d9f6:	2b00      	cmp	r3, #0
  40d9f8:	4605      	mov	r5, r0

0040d9fa <.LVL439>:
  40d9fa:	dd08      	ble.n	40da0e <.LVL443>
  40d9fc:	461e      	mov	r6, r3
  40d9fe:	e460      	b.n	40d2c2 <.LVL189>

0040da00 <.LVL440>:
  40da00:	9b01      	ldr	r3, [sp, #4]

0040da02 <.LVL441>:
  40da02:	2b02      	cmp	r3, #2
  40da04:	dc20      	bgt.n	40da48 <.LVL451>
  40da06:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  40da08:	e4f1      	b.n	40d3ee <.LVL230>

0040da0a <.LVL442>:
  40da0a:	2102      	movs	r1, #2
  40da0c:	e594      	b.n	40d538 <.LVL274>

0040da0e <.LVL443>:
  40da0e:	9b01      	ldr	r3, [sp, #4]

0040da10 <.LVL444>:
  40da10:	2b02      	cmp	r3, #2
  40da12:	dc19      	bgt.n	40da48 <.LVL451>
  40da14:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  40da16:	e454      	b.n	40d2c2 <.LVL189>

0040da18 <.LVL445>:
  40da18:	2501      	movs	r5, #1
  40da1a:	f7ff bab0 	b.w	40cf7e <.LVL91>

0040da1e <.LVL446>:
  40da1e:	f43f ac33 	beq.w	40d288 <.LVL184>
  40da22:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  40da26:	e4c0      	b.n	40d3aa <.LVL218>

0040da28 <.LVL447>:
  40da28:	2500      	movs	r5, #0

0040da2a <.LVL448>:
  40da2a:	6465      	str	r5, [r4, #68]	; 0x44
  40da2c:	4629      	mov	r1, r5
  40da2e:	4620      	mov	r0, r4
  40da30:	f013 f89c 	bl	420b6c <.LFE2>

0040da34 <.LVL449>:
  40da34:	f04f 36ff 	mov.w	r6, #4294967295
  40da38:	2301      	movs	r3, #1
  40da3a:	9008      	str	r0, [sp, #32]
  40da3c:	46a9      	mov	r9, r5
  40da3e:	6420      	str	r0, [r4, #64]	; 0x40

0040da40 <.LVL450>:
  40da40:	960c      	str	r6, [sp, #48]	; 0x30
  40da42:	9309      	str	r3, [sp, #36]	; 0x24
  40da44:	f7ff bad3 	b.w	40cfee <.LVL104>

0040da48 <.LVL451>:
  40da48:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  40da4a:	e658      	b.n	40d6fe <.LVL323>
  40da4c:	0041cc38 	.word	0x0041cc38
  40da50:	00421b38 	.word	0x00421b38

Disassembly of section .rodata%45:

0040da54 <.LANCHOR0>:
  40da54:	00636261 	.word	0x00636261

0040da58 <.LC25>:
  40da58:	98500190 	.word	0x98500190
  40da5c:	b04fd23c 	.word	0xb04fd23c
  40da60:	7d3f96d6 	.word	0x7d3f96d6
  40da64:	727fe128 	.word	0x727fe128
  40da68:	00000000 	.word	0x00000000

0040da6c <.LC26>:
  40da6c:	7373656d 	.word	0x7373656d
  40da70:	20656761 	.word	0x20656761
  40da74:	65676964 	.word	0x65676964
  40da78:	00007473 	.word	0x00007473

0040da7c <.LC27>:
  40da7c:	7d696bf9 	.word	0x7d696bf9
  40da80:	8d93b77c 	.word	0x8d93b77c
  40da84:	312f5a52 	.word	0x312f5a52
  40da88:	d061f1aa 	.word	0xd061f1aa
  40da8c:	00000000 	.word	0x00000000

0040da90 <.LC28>:
  40da90:	64636261 	.word	0x64636261
  40da94:	68676665 	.word	0x68676665
  40da98:	6c6b6a69 	.word	0x6c6b6a69
  40da9c:	706f6e6d 	.word	0x706f6e6d
  40daa0:	74737271 	.word	0x74737271
  40daa4:	78777675 	.word	0x78777675
  40daa8:	00007a79 	.word	0x00007a79

0040daac <.LC29>:
  40daac:	d7d3fcc3 	.word	0xd7d3fcc3
  40dab0:	00e49261 	.word	0x00e49261
  40dab4:	6c49fb7d 	.word	0x6c49fb7d
  40dab8:	3be167ca 	.word	0x3be167ca
  40dabc:	00000000 	.word	0x00000000

0040dac0 <.LC30>:
  40dac0:	44434241 	.word	0x44434241
  40dac4:	48474645 	.word	0x48474645
  40dac8:	4c4b4a49 	.word	0x4c4b4a49
  40dacc:	504f4e4d 	.word	0x504f4e4d
  40dad0:	54535251 	.word	0x54535251
  40dad4:	58575655 	.word	0x58575655
  40dad8:	62615a59 	.word	0x62615a59
  40dadc:	66656463 	.word	0x66656463
  40dae0:	6a696867 	.word	0x6a696867
  40dae4:	6e6d6c6b 	.word	0x6e6d6c6b
  40dae8:	7271706f 	.word	0x7271706f
  40daec:	76757473 	.word	0x76757473
  40daf0:	7a797877 	.word	0x7a797877
  40daf4:	33323130 	.word	0x33323130
  40daf8:	37363534 	.word	0x37363534
  40dafc:	00003938 	.word	0x00003938

0040db00 <.LC31>:
  40db00:	98ab74d1 	.word	0x98ab74d1
  40db04:	f5d977d2 	.word	0xf5d977d2
  40db08:	2c1c61a5 	.word	0x2c1c61a5
  40db0c:	9f9d419f 	.word	0x9f9d419f
  40db10:	00000000 	.word	0x00000000

0040db14 <.LC32>:
  40db14:	34333231 	.word	0x34333231
  40db18:	38373635 	.word	0x38373635
  40db1c:	32313039 	.word	0x32313039
  40db20:	36353433 	.word	0x36353433
  40db24:	30393837 	.word	0x30393837
  40db28:	34333231 	.word	0x34333231
  40db2c:	38373635 	.word	0x38373635
  40db30:	32313039 	.word	0x32313039
  40db34:	36353433 	.word	0x36353433
  40db38:	30393837 	.word	0x30393837
  40db3c:	34333231 	.word	0x34333231
  40db40:	38373635 	.word	0x38373635
  40db44:	32313039 	.word	0x32313039
  40db48:	36353433 	.word	0x36353433
  40db4c:	30393837 	.word	0x30393837
  40db50:	34333231 	.word	0x34333231
  40db54:	38373635 	.word	0x38373635
  40db58:	32313039 	.word	0x32313039
  40db5c:	36353433 	.word	0x36353433
  40db60:	30393837 	.word	0x30393837
  40db64:	00000000 	.word	0x00000000

0040db68 <.LC33>:
  40db68:	a2f4ed57 	.word	0xa2f4ed57
  40db6c:	55c9e32b 	.word	0x55c9e32b
  40db70:	2eda49ac 	.word	0x2eda49ac
  40db74:	7ab60721 	.word	0x7ab60721
  40db78:	00000000 	.word	0x00000000

0040db7c <.LC34>:
  40db7c:	61616161 	.word	0x61616161
  40db80:	61616161 	.word	0x61616161
  40db84:	61616161 	.word	0x61616161
  40db88:	61616161 	.word	0x61616161
  40db8c:	61616161 	.word	0x61616161
  40db90:	61616161 	.word	0x61616161
  40db94:	61616161 	.word	0x61616161
  40db98:	61616161 	.word	0x61616161
  40db9c:	61616161 	.word	0x61616161
  40dba0:	61616161 	.word	0x61616161
  40dba4:	61616161 	.word	0x61616161
  40dba8:	61616161 	.word	0x61616161
  40dbac:	61616161 	.word	0x61616161
  40dbb0:	61616161 	.word	0x61616161
  40dbb4:	61616161 	.word	0x61616161
  40dbb8:	61616161 	.word	0x61616161
  40dbbc:	61616161 	.word	0x61616161
  40dbc0:	61616161 	.word	0x61616161
  40dbc4:	61616161 	.word	0x61616161
  40dbc8:	61616161 	.word	0x61616161
  40dbcc:	61616161 	.word	0x61616161
  40dbd0:	61616161 	.word	0x61616161
  40dbd4:	61616161 	.word	0x61616161
  40dbd8:	61616161 	.word	0x61616161
  40dbdc:	61616161 	.word	0x61616161
  40dbe0:	61616161 	.word	0x61616161
  40dbe4:	61616161 	.word	0x61616161
  40dbe8:	61616161 	.word	0x61616161
  40dbec:	61616161 	.word	0x61616161
  40dbf0:	61616161 	.word	0x61616161
  40dbf4:	61616161 	.word	0x61616161
  40dbf8:	61616161 	.word	0x61616161
  40dbfc:	00000000 	.word	0x00000000

0040dc00 <.LC35>:
  40dc00:	db3f5bad 	.word	0xdb3f5bad
  40dc04:	786752cb 	.word	0x786752cb
  40dc08:	2f9d83c2 	.word	0x2f9d83c2
  40dc0c:	53a71e15 	.word	0x53a71e15
  40dc10:	a0265e99 	.word	0xa0265e99
  40dc14:	00000000 	.word	0x00000000

0040dc18 <.LC36>:
  40dc18:	64636261 	.word	0x64636261
  40dc1c:	65646362 	.word	0x65646362
  40dc20:	66656463 	.word	0x66656463
  40dc24:	67666564 	.word	0x67666564
  40dc28:	68676665 	.word	0x68676665
  40dc2c:	69686766 	.word	0x69686766
  40dc30:	6a696867 	.word	0x6a696867
  40dc34:	6b6a6968 	.word	0x6b6a6968
  40dc38:	6c6b6a69 	.word	0x6c6b6a69
  40dc3c:	6d6c6b6a 	.word	0x6d6c6b6a
  40dc40:	6e6d6c6b 	.word	0x6e6d6c6b
  40dc44:	6f6e6d6c 	.word	0x6f6e6d6c
  40dc48:	706f6e6d 	.word	0x706f6e6d
  40dc4c:	71706f6e 	.word	0x71706f6e
  40dc50:	00000000 	.word	0x00000000

0040dc54 <.LC37>:
  40dc54:	443e9884 	.word	0x443e9884
  40dc58:	6ed23b1c 	.word	0x6ed23b1c
  40dc5c:	a14aaeba 	.word	0xa14aaeba
  40dc60:	e52951f9 	.word	0xe52951f9
  40dc64:	f17046e5 	.word	0xf17046e5
  40dc68:	00000000 	.word	0x00000000

0040dc6c <.LC38>:
  40dc6c:	61616161 	.word	0x61616161
  40dc70:	61616161 	.word	0x61616161
  40dc74:	61616161 	.word	0x61616161
  40dc78:	61616161 	.word	0x61616161
  40dc7c:	61616161 	.word	0x61616161
  40dc80:	61616161 	.word	0x61616161
  40dc84:	61616161 	.word	0x61616161
  40dc88:	61616161 	.word	0x61616161
  40dc8c:	61616161 	.word	0x61616161
  40dc90:	61616161 	.word	0x61616161
  40dc94:	61616161 	.word	0x61616161
  40dc98:	61616161 	.word	0x61616161
  40dc9c:	61616161 	.word	0x61616161
  40dca0:	61616161 	.word	0x61616161
  40dca4:	61616161 	.word	0x61616161
  40dca8:	61616161 	.word	0x61616161
  40dcac:	00000000 	.word	0x00000000

0040dcb0 <.LC39>:
  40dcb0:	82ba9800 	.word	0x82ba9800
  40dcb4:	42165c4b 	.word	0x42165c4b
  40dcb8:	12a1d77b 	.word	0x12a1d77b
  40dcbc:	2a445a2a 	.word	0x2a445a2a
  40dcc0:	4d64ec25 	.word	0x4d64ec25
  40dcc4:	00000000 	.word	0x00000000

0040dcc8 <.LC40>:
  40dcc8:	363e99a9 	.word	0x363e99a9
  40dccc:	6a810647 	.word	0x6a810647
  40dcd0:	71253eba 	.word	0x71253eba
  40dcd4:	6cc25078 	.word	0x6cc25078
  40dcd8:	9dd8d09c 	.word	0x9dd8d09c
  40dcdc:	00000000 	.word	0x00000000

0040dce0 <.LC41>:
  40dce0:	bf1678ba 	.word	0xbf1678ba
  40dce4:	eacf018f 	.word	0xeacf018f
  40dce8:	de404141 	.word	0xde404141
  40dcec:	2322ae5d 	.word	0x2322ae5d
  40dcf0:	a36103b0 	.word	0xa36103b0
  40dcf4:	9c7a1796 	.word	0x9c7a1796
  40dcf8:	61ff10b4 	.word	0x61ff10b4
  40dcfc:	ad1500f2 	.word	0xad1500f2
  40dd00:	00000000 	.word	0x00000000

0040dd04 <.LC42>:
  40dd04:	616a8d24 	.word	0x616a8d24
  40dd08:	b83806d2 	.word	0xb83806d2
  40dd0c:	9326c0e5 	.word	0x9326c0e5
  40dd10:	39603e0c 	.word	0x39603e0c
  40dd14:	59e43ca3 	.word	0x59e43ca3
  40dd18:	6721ff64 	.word	0x6721ff64
  40dd1c:	d4edecf6 	.word	0xd4edecf6
  40dd20:	c106db19 	.word	0xc106db19
  40dd24:	00000000 	.word	0x00000000

0040dd28 <.LC43>:
  40dd28:	3f7500cb 	.word	0x3f7500cb
  40dd2c:	8b5ea345 	.word	0x8b5ea345
  40dd30:	693da0b5 	.word	0x693da0b5
  40dd34:	0750c69a 	.word	0x0750c69a
  40dd38:	ab322c27 	.word	0xab322c27
  40dd3c:	63d1de0e 	.word	0x63d1de0e
  40dd40:	5a608b1a 	.word	0x5a608b1a
  40dd44:	ed5bff43 	.word	0xed5bff43
  40dd48:	2b078680 	.word	0x2b078680
  40dd4c:	23cce7a1 	.word	0x23cce7a1
  40dd50:	a1ecba58 	.word	0xa1ecba58
  40dd54:	a725c834 	.word	0xa725c834
  40dd58:	00000000 	.word	0x00000000

0040dd5c <.LC44>:
  40dd5c:	64636261 	.word	0x64636261
  40dd60:	68676665 	.word	0x68676665
  40dd64:	65646362 	.word	0x65646362
  40dd68:	69686766 	.word	0x69686766
  40dd6c:	66656463 	.word	0x66656463
  40dd70:	6a696867 	.word	0x6a696867
  40dd74:	67666564 	.word	0x67666564
  40dd78:	6b6a6968 	.word	0x6b6a6968
  40dd7c:	68676665 	.word	0x68676665
  40dd80:	6c6b6a69 	.word	0x6c6b6a69
  40dd84:	69686766 	.word	0x69686766
  40dd88:	6d6c6b6a 	.word	0x6d6c6b6a
  40dd8c:	6a696867 	.word	0x6a696867
  40dd90:	6e6d6c6b 	.word	0x6e6d6c6b
  40dd94:	6b6a6968 	.word	0x6b6a6968
  40dd98:	6f6e6d6c 	.word	0x6f6e6d6c
  40dd9c:	6c6b6a69 	.word	0x6c6b6a69
  40dda0:	706f6e6d 	.word	0x706f6e6d
  40dda4:	6d6c6b6a 	.word	0x6d6c6b6a
  40dda8:	71706f6e 	.word	0x71706f6e
  40ddac:	6e6d6c6b 	.word	0x6e6d6c6b
  40ddb0:	7271706f 	.word	0x7271706f
  40ddb4:	6f6e6d6c 	.word	0x6f6e6d6c
  40ddb8:	73727170 	.word	0x73727170
  40ddbc:	706f6e6d 	.word	0x706f6e6d
  40ddc0:	74737271 	.word	0x74737271
  40ddc4:	71706f6e 	.word	0x71706f6e
  40ddc8:	75747372 	.word	0x75747372
  40ddcc:	00000000 	.word	0x00000000

0040ddd0 <.LC45>:
  40ddd0:	330c3309 	.word	0x330c3309
  40ddd4:	e84711f7 	.word	0xe84711f7
  40ddd8:	c72f193d 	.word	0xc72f193d
  40dddc:	471bcd82 	.word	0x471bcd82
  40dde0:	171b1153 	.word	0x171b1153
  40dde4:	d2053b3b 	.word	0xd2053b3b
  40dde8:	8680a02f 	.word	0x8680a02f
  40ddec:	12f7b0e3 	.word	0x12f7b0e3
  40ddf0:	1ac7c7fc 	.word	0x1ac7c7fc
  40ddf4:	b92d7e55 	.word	0xb92d7e55
  40ddf8:	fae9c366 	.word	0xfae9c366
  40ddfc:	39607491 	.word	0x39607491
  40de00:	00000000 	.word	0x00000000

0040de04 <.LC46>:
  40de04:	a135afdd 	.word	0xa135afdd
  40de08:	ba7a6193 	.word	0xba7a6193
  40de0c:	497341cc 	.word	0x497341cc
  40de10:	314120ae 	.word	0x314120ae
  40de14:	4efae612 	.word	0x4efae612
  40de18:	a27ea989 	.word	0xa27ea989
  40de1c:	e6ee9e0a 	.word	0xe6ee9e0a
  40de20:	9ad3554b 	.word	0x9ad3554b
  40de24:	2a999221 	.word	0x2a999221
  40de28:	a8c14f27 	.word	0xa8c14f27
  40de2c:	233cba36 	.word	0x233cba36
  40de30:	bdebfea3 	.word	0xbdebfea3
  40de34:	23444d45 	.word	0x23444d45
  40de38:	0ee83c64 	.word	0x0ee83c64
  40de3c:	4fc99a2a 	.word	0x4fc99a2a
  40de40:	9fa44ca5 	.word	0x9fa44ca5
  40de44:	00000000 	.word	0x00000000

0040de48 <.LC47>:
  40de48:	759b958e 	.word	0x759b958e
  40de4c:	da13e3da 	.word	0xda13e3da
  40de50:	28f7f48c 	.word	0x28f7f48c
  40de54:	3f14fc14 	.word	0x3f14fc14
  40de58:	c679778f 	.word	0xc679778f
  40de5c:	a17f9feb 	.word	0xa17f9feb
  40de60:	adae9972 	.word	0xadae9972
  40de64:	189088b6 	.word	0x189088b6
  40de68:	9e281d50 	.word	0x9e281d50
  40de6c:	e4f70049 	.word	0xe4f70049
  40de70:	de991b33 	.word	0xde991b33
  40de74:	3a43b5c4 	.word	0x3a43b5c4
  40de78:	ee29d3c7 	.word	0xee29d3c7
  40de7c:	5426ddb6 	.word	0x5426ddb6
  40de80:	5be5965e 	.word	0x5be5965e
  40de84:	09e94b87 	.word	0x09e94b87
  40de88:	00000000 	.word	0x00000000
  40de8c:	0040e590 	.word	0x0040e590
  40de90:	0040e570 	.word	0x0040e570
  40de94:	0040e5a4 	.word	0x0040e5a4

0040de98 <.LC49>:
  40de98:	54206948 	.word	0x54206948
  40de9c:	65726568 	.word	0x65726568
  40dea0:	00000000 	.word	0x00000000

0040dea4 <.LC50>:
  40dea4:	7a729492 	.word	0x7a729492
  40dea8:	1cbb3836 	.word	0x1cbb3836
  40deac:	f88ef413 	.word	0xf88ef413
  40deb0:	9dfc8b15 	.word	0x9dfc8b15
  40deb4:	00000000 	.word	0x00000000

0040deb8 <.LC51>:
  40deb8:	74616877 	.word	0x74616877
  40debc:	206f6420 	.word	0x206f6420
  40dec0:	77206179 	.word	0x77206179
  40dec4:	20746e61 	.word	0x20746e61
  40dec8:	20726f66 	.word	0x20726f66
  40decc:	68746f6e 	.word	0x68746f6e
  40ded0:	3f676e69 	.word	0x3f676e69
  40ded4:	00000000 	.word	0x00000000

0040ded8 <.LC52>:
  40ded8:	3e780c75 	.word	0x3e780c75
  40dedc:	03b5b06a 	.word	0x03b5b06a
  40dee0:	316ea8ea 	.word	0x316ea8ea
  40dee4:	38b75d0a 	.word	0x38b75d0a
  40dee8:	00000000 	.word	0x00000000

0040deec <.LC53>:
  40deec:	dddddddd 	.word	0xdddddddd
  40def0:	dddddddd 	.word	0xdddddddd
  40def4:	dddddddd 	.word	0xdddddddd
  40def8:	dddddddd 	.word	0xdddddddd
  40defc:	dddddddd 	.word	0xdddddddd
  40df00:	dddddddd 	.word	0xdddddddd
  40df04:	dddddddd 	.word	0xdddddddd
  40df08:	dddddddd 	.word	0xdddddddd
  40df0c:	dddddddd 	.word	0xdddddddd
  40df10:	dddddddd 	.word	0xdddddddd
  40df14:	dddddddd 	.word	0xdddddddd
  40df18:	dddddddd 	.word	0xdddddddd
  40df1c:	0000dddd 	.word	0x0000dddd

0040df20 <.LC54>:
  40df20:	5234be56 	.word	0x5234be56
  40df24:	884c141d 	.word	0x884c141d
  40df28:	33c7b8db 	.word	0x33c7b8db
  40df2c:	f6b3e8f0 	.word	0xf6b3e8f0
  40df30:	00000000 	.word	0x00000000
  40df34:	0040e558 	.word	0x0040e558
  40df38:	0040e570 	.word	0x0040e570
  40df3c:	0040e578 	.word	0x0040e578

0040df40 <.LC56>:
  40df40:	863117b6 	.word	0x863117b6
  40df44:	64720555 	.word	0x64720555
  40df48:	b6c08be2 	.word	0xb6c08be2
  40df4c:	8e8c37fb 	.word	0x8e8c37fb
  40df50:	00be46f1 	.word	0x00be46f1
  40df54:	00000000 	.word	0x00000000

0040df58 <.LC57>:
  40df58:	6adffcef 	.word	0x6adffcef
  40df5c:	a22febe5 	.word	0xa22febe5
  40df60:	d51674d2 	.word	0xd51674d2
  40df64:	9cdf84f1 	.word	0x9cdf84f1
  40df68:	797c9a25 	.word	0x797c9a25
  40df6c:	00000000 	.word	0x00000000

0040df70 <.LC58>:
  40df70:	42735d12 	.word	0x42735d12
  40df74:	cd11acb9 	.word	0xcd11acb9
  40df78:	f49aa391 	.word	0xf49aa391
  40df7c:	4f7ba18a 	.word	0x4f7ba18a
  40df80:	d375f163 	.word	0xd375f163
  40df84:	00000000 	.word	0x00000000

0040df88 <.LC59>:
  40df88:	614c34b0 	.word	0x614c34b0
  40df8c:	5338dbd8 	.word	0x5338dbd8
  40df90:	ceafa85c 	.word	0xceafa85c
  40df94:	2bf10baf 	.word	0x2bf10baf
  40df98:	00c21d88 	.word	0x00c21d88
  40df9c:	a73d83c9 	.word	0xa73d83c9
  40dfa0:	6c37e926 	.word	0x6c37e926
  40dfa4:	f7cf322e 	.word	0xf7cf322e
  40dfa8:	00000000 	.word	0x00000000

0040dfac <.LC60>:
  40dfac:	46c1dc5b 	.word	0x46c1dc5b
  40dfb0:	4e7560bf 	.word	0x4e7560bf
  40dfb4:	2624046a 	.word	0x2624046a
  40dfb8:	c7759508 	.word	0xc7759508
  40dfbc:	083f005a 	.word	0x083f005a
  40dfc0:	8339279d 	.word	0x8339279d
  40dfc4:	b958ec9d 	.word	0xb958ec9d
  40dfc8:	4338ec64 	.word	0x4338ec64
  40dfcc:	00000000 	.word	0x00000000

0040dfd0 <.LC61>:
  40dfd0:	1ea93e77 	.word	0x1ea93e77
  40dfd4:	460e8036 	.word	0x460e8036
  40dfd8:	ebb84d85 	.word	0xebb84d85
  40dfdc:	a78191d0 	.word	0xa78191d0
  40dfe0:	8b095929 	.word	0x8b095929
  40dfe4:	22c1f83e 	.word	0x22c1f83e
  40dfe8:	145563d9 	.word	0x145563d9
  40dfec:	fe65d5ce 	.word	0xfe65d5ce
  40dff0:	00000000 	.word	0x00000000

0040dff4 <.LC62>:
  40dff4:	4439d0af 	.word	0x4439d0af
  40dff8:	629548d8 	.word	0x629548d8
  40dffc:	f425086b 	.word	0xf425086b
  40e000:	7f9046ab 	.word	0x7f9046ab
  40e004:	dbdaf915 	.word	0xdbdaf915
  40e008:	c61e10e4 	.word	0xc61e10e4
  40e00c:	4c03aa82 	.word	0x4c03aa82
  40e010:	9cc5eb7c 	.word	0x9cc5eb7c
  40e014:	a99eeafa 	.word	0xa99eeafa
  40e018:	7fde6e07 	.word	0x7fde6e07
  40e01c:	e852f14a 	.word	0xe852f14a
  40e020:	b69cfab2 	.word	0xb69cfab2
  40e024:	00000000 	.word	0x00000000

0040e028 <.LC63>:
  40e028:	e3d245af 	.word	0xe3d245af
  40e02c:	31404876 	.word	0x31404876
  40e030:	d2787f61 	.word	0xd2787f61
  40e034:	1b6b8ab5 	.word	0x1b6b8ab5
  40e038:	64f47e9c 	.word	0x64f47e9c
  40e03c:	471ba0f5 	.word	0x471ba0f5
  40e040:	73c32ee4 	.word	0x73c32ee4
  40e044:	5e442263 	.word	0x5e442263
  40e048:	ca40228e 	.word	0xca40228e
  40e04c:	c7e2695e 	.word	0xc7e2695e
  40e050:	ec39328b 	.word	0xec39328b
  40e054:	4916b2fa 	.word	0x4916b2fa
  40e058:	00000000 	.word	0x00000000

0040e05c <.LC64>:
  40e05c:	08260688 	.word	0x08260688
  40e060:	8aade6d3 	.word	0x8aade6d3
  40e064:	e0aca20a 	.word	0xe0aca20a
  40e068:	6fa8c814 	.word	0x6fa8c814
  40e06c:	d935a60a 	.word	0xd935a60a
  40e070:	eb9fac47 	.word	0xeb9fac47
  40e074:	e5f43ee8 	.word	0xe5f43ee8
  40e078:	4b146659 	.word	0x4b146659
  40e07c:	9db35a2a 	.word	0x9db35a2a
  40e080:	b91438c1 	.word	0xb91438c1
  40e084:	e1b63a4e 	.word	0xe1b63a4e
  40e088:	274fa301 	.word	0x274fa301
  40e08c:	00000000 	.word	0x00000000

0040e090 <.LC65>:
  40e090:	de7caa87 	.word	0xde7caa87
  40e094:	9d61efa5 	.word	0x9d61efa5
  40e098:	24b4f04f 	.word	0x24b4f04f
  40e09c:	b06c1d1a 	.word	0xb06c1d1a
  40e0a0:	e2f47923 	.word	0xe2f47923
  40e0a4:	78c24ece 	.word	0x78c24ece
  40e0a8:	05b3d07a 	.word	0x05b3d07a
  40e0ac:	de7ce145 	.word	0xde7ce145
  40e0b0:	b733a8da 	.word	0xb733a8da
  40e0b4:	02a7b8d6 	.word	0x02a7b8d6
  40e0b8:	4e278b03 	.word	0x4e278b03
  40e0bc:	e4f4a3ae 	.word	0xe4f4a3ae
  40e0c0:	4e919dbe 	.word	0x4e919dbe
  40e0c4:	70f161eb 	.word	0x70f161eb
  40e0c8:	206c692e 	.word	0x206c692e
  40e0cc:	5468123a 	.word	0x5468123a
  40e0d0:	00000000 	.word	0x00000000

0040e0d4 <.LC66>:
  40e0d4:	7b7a4b16 	.word	0x7b7a4b16
  40e0d8:	e219f8fc 	.word	0xe219f8fc
  40e0dc:	e7fb95e3 	.word	0xe7fb95e3
  40e0e0:	a3e0563b 	.word	0xa3e0563b
  40e0e4:	2264bd87 	.word	0x2264bd87
  40e0e8:	d61f832e 	.word	0xd61f832e
  40e0ec:	d70c2710 	.word	0xd70c2710
  40e0f0:	540525ea 	.word	0x540525ea
  40e0f4:	75bf5897 	.word	0x75bf5897
  40e0f8:	4a995ac0 	.word	0x4a995ac0
  40e0fc:	654f036d 	.word	0x654f036d
  40e100:	fde6f0f8 	.word	0xfde6f0f8
  40e104:	a3b1eaca 	.word	0xa3b1eaca
  40e108:	4b6b4a4d 	.word	0x4b6b4a4d
  40e10c:	0a076e63 	.word	0x0a076e63
  40e110:	37e7bc38 	.word	0x37e7bc38
  40e114:	00000000 	.word	0x00000000

0040e118 <.LC67>:
  40e118:	08b073fa 	.word	0x08b073fa
  40e11c:	84a2569d 	.word	0x84a2569d
  40e120:	75f0b0ef 	.word	0x75f0b0ef
  40e124:	e90b896c 	.word	0xe90b896c
  40e128:	dddbb5b1 	.word	0xdddbb5b1
  40e12c:	361ae88e 	.word	0x361ae88e
  40e130:	333ef855 	.word	0x333ef855
  40e134:	399d27b2 	.word	0x399d27b2
  40e138:	82843ebf 	.word	0x82843ebf
  40e13c:	c822a779 	.word	0xc822a779
  40e140:	a485b406 	.word	0xa485b406
  40e144:	07c8677e 	.word	0x07c8677e
  40e148:	37a346b9 	.word	0x37a346b9
  40e14c:	2694e8be 	.word	0x2694e8be
  40e150:	59882774 	.word	0x59882774
  40e154:	fb9232e1 	.word	0xfb9232e1
  40e158:	00000000 	.word	0x00000000
  40e15c:	20776f6e 	.word	0x20776f6e
  40e160:	74207369 	.word	0x74207369
  40e164:	74206568 	.word	0x74206568
  40e168:	20656d69 	.word	0x20656d69
  40e16c:	57929495 	.word	0x57929495
  40e170:	5381425f 	.word	0x5381425f
  40e174:	469dcc2c 	.word	0x469dcc2c
  40e178:	cb33a277 	.word	0xcb33a277
  40e17c:	33323130 	.word	0x33323130
  40e180:	37363534 	.word	0x37363534
  40e184:	62613938 	.word	0x62613938
  40e188:	66656463 	.word	0x66656463
  40e18c:	00202020 	.word	0x00202020
  40e190:	34333231 	.word	0x34333231
  40e194:	38373635 	.word	0x38373635
  40e198:	62613039 	.word	0x62613039
  40e19c:	66656463 	.word	0x66656463
  40e1a0:	00202020 	.word	0x00202020
  40e1a4:	16157e2b 	.word	0x16157e2b
  40e1a8:	a6d2ae28 	.word	0xa6d2ae28
  40e1ac:	8815f7ab 	.word	0x8815f7ab
  40e1b0:	3c4fcf09 	.word	0x3c4fcf09
  40e1b4:	f3f2f1f0 	.word	0xf3f2f1f0
  40e1b8:	f7f6f5f4 	.word	0xf7f6f5f4
  40e1bc:	fbfaf9f8 	.word	0xfbfaf9f8
  40e1c0:	fffefdfc 	.word	0xfffefdfc
  40e1c4:	e2bec16b 	.word	0xe2bec16b
  40e1c8:	969f402e 	.word	0x969f402e
  40e1cc:	117e3de9 	.word	0x117e3de9
  40e1d0:	2a179373 	.word	0x2a179373
  40e1d4:	578a2dae 	.word	0x578a2dae
  40e1d8:	9cac031e 	.word	0x9cac031e
  40e1dc:	ac6fb79e 	.word	0xac6fb79e
  40e1e0:	518eaf45 	.word	0x518eaf45
  40e1e4:	461cc830 	.word	0x461cc830
  40e1e8:	11e45ca3 	.word	0x11e45ca3
  40e1ec:	19c1fbe5 	.word	0x19c1fbe5
  40e1f0:	ef520a1a 	.word	0xef520a1a
  40e1f4:	45249ff6 	.word	0x45249ff6
  40e1f8:	179b4fdf 	.word	0x179b4fdf
  40e1fc:	7b412bad 	.word	0x7b412bad
  40e200:	10376ce6 	.word	0x10376ce6
  40e204:	91614d87 	.word	0x91614d87
  40e208:	26e320b6 	.word	0x26e320b6
  40e20c:	6468ef1b 	.word	0x6468ef1b
  40e210:	ceb60d99 	.word	0xceb60d99
  40e214:	6bf60698 	.word	0x6bf60698
  40e218:	fffd7079 	.word	0xfffd7079
  40e21c:	7b181786 	.word	0x7b181786
  40e220:	fffdffb9 	.word	0xfffdffb9
  40e224:	3edfe45a 	.word	0x3edfe45a
  40e228:	5ed3d5db 	.word	0x5ed3d5db
  40e22c:	02094f5b 	.word	0x02094f5b
  40e230:	ab3eb00d 	.word	0xab3eb00d
  40e234:	da1d031e 	.word	0xda1d031e
  40e238:	d103be2f 	.word	0xd103be2f
  40e23c:	a0702179 	.word	0xa0702179
  40e240:	ee9c00f3 	.word	0xee9c00f3
  40e244:	20776f6e 	.word	0x20776f6e
  40e248:	74207369 	.word	0x74207369
  40e24c:	74206568 	.word	0x74206568
  40e250:	20656d69 	.word	0x20656d69
  40e254:	20726f66 	.word	0x20726f66
  40e258:	206c6c61 	.word	0x206c6c61
  40e25c:	67452301 	.word	0x67452301
  40e260:	efcdab89 	.word	0xefcdab89
  40e264:	78563412 	.word	0x78563412
  40e268:	efcdab90 	.word	0xefcdab90
  40e26c:	b0527c8b 	.word	0xb0527c8b
  40e270:	b86c2b01 	.word	0xb86c2b01
  40e274:	f3eb0f4f 	.word	0xf3eb0f4f
  40e278:	73865ffb 	.word	0x73865ffb
  40e27c:	22b38515 	.word	0x22b38515
  40e280:	4b2b864b 	.word	0x4b2b864b
  40e284:	20776f4e 	.word	0x20776f4e
  40e288:	74207369 	.word	0x74207369
  40e28c:	74206568 	.word	0x74206568
  40e290:	20656d69 	.word	0x20656d69
  40e294:	20726f66 	.word	0x20726f66
  40e298:	206c6c61 	.word	0x206c6c61
  40e29c:	67452301 	.word	0x67452301
  40e2a0:	efcdab89 	.word	0xefcdab89
  40e2a4:	98badefe 	.word	0x98badefe
  40e2a8:	10325476 	.word	0x10325476
  40e2ac:	efcdab89 	.word	0xefcdab89
  40e2b0:	67452301 	.word	0x67452301
  40e2b4:	78563412 	.word	0x78563412
  40e2b8:	efcdab90 	.word	0xefcdab90
  40e2bc:	01010101 	.word	0x01010101
  40e2c0:	01010101 	.word	0x01010101
  40e2c4:	41312111 	.word	0x41312111
  40e2c8:	81716151 	.word	0x81716151
  40e2cc:	7e29a043 	.word	0x7e29a043
  40e2d0:	0ef884d1 	.word	0x0ef884d1
  40e2d4:	32846489 	.word	0x32846489
  40e2d8:	9808d512 	.word	0x9808d512
  40e2dc:	74159418 	.word	0x74159418
  40e2e0:	b07d1287 	.word	0xb07d1287
  40e2e4:	72657645 	.word	0x72657645
  40e2e8:	656e6f79 	.word	0x656e6f79
  40e2ec:	74656720 	.word	0x74656720
  40e2f0:	72462073 	.word	0x72462073
  40e2f4:	79616469 	.word	0x79616469
  40e2f8:	66666f20 	.word	0x66666f20
  40e2fc:	0000002e 	.word	0x0000002e
  40e300:	73736150 	.word	0x73736150
  40e304:	00000000 	.word	0x00000000
  40e308:	6c696146 	.word	0x6c696146
  40e30c:	00000000 	.word	0x00000000
  40e310:	0d0a7325 	.word	0x0d0a7325
  40e314:	2035444d 	.word	0x2035444d
  40e318:	74736574 	.word	0x74736574
  40e31c:	2020203a 	.word	0x2020203a
  40e320:	20202020 	.word	0x20202020
  40e324:	25202020 	.word	0x25202020
  40e328:	00000073 	.word	0x00000073
  40e32c:	0d0a7325 	.word	0x0d0a7325
  40e330:	20414853 	.word	0x20414853
  40e334:	74736574 	.word	0x74736574
  40e338:	2020203a 	.word	0x2020203a
  40e33c:	20202020 	.word	0x20202020
  40e340:	25202020 	.word	0x25202020
  40e344:	00000073 	.word	0x00000073
  40e348:	0d0a7325 	.word	0x0d0a7325
  40e34c:	32414853 	.word	0x32414853
  40e350:	74203635 	.word	0x74203635
  40e354:	3a747365 	.word	0x3a747365
  40e358:	20202020 	.word	0x20202020
  40e35c:	25202020 	.word	0x25202020
  40e360:	00000073 	.word	0x00000073
  40e364:	0d0a7325 	.word	0x0d0a7325
  40e368:	33414853 	.word	0x33414853
  40e36c:	74203438 	.word	0x74203438
  40e370:	3a747365 	.word	0x3a747365
  40e374:	20202020 	.word	0x20202020
  40e378:	25202020 	.word	0x25202020
  40e37c:	00000073 	.word	0x00000073
  40e380:	0d0a7325 	.word	0x0d0a7325
  40e384:	35414853 	.word	0x35414853
  40e388:	74203231 	.word	0x74203231
  40e38c:	3a747365 	.word	0x3a747365
  40e390:	20202020 	.word	0x20202020
  40e394:	25202020 	.word	0x25202020
  40e398:	00000073 	.word	0x00000073
  40e39c:	0d0a7325 	.word	0x0d0a7325
  40e3a0:	43414d48 	.word	0x43414d48
  40e3a4:	35444d5f 	.word	0x35444d5f
  40e3a8:	73657420 	.word	0x73657420
  40e3ac:	20203a74 	.word	0x20203a74
  40e3b0:	25202020 	.word	0x25202020
  40e3b4:	00000073 	.word	0x00000073
  40e3b8:	0d0a7325 	.word	0x0d0a7325
  40e3bc:	43414d48 	.word	0x43414d48
  40e3c0:	4148535f 	.word	0x4148535f
  40e3c4:	73657420 	.word	0x73657420
  40e3c8:	20203a74 	.word	0x20203a74
  40e3cc:	25202020 	.word	0x25202020
  40e3d0:	00000073 	.word	0x00000073
  40e3d4:	0d0a7325 	.word	0x0d0a7325
  40e3d8:	43414d48 	.word	0x43414d48
  40e3dc:	4148535f 	.word	0x4148535f
  40e3e0:	20363532 	.word	0x20363532
  40e3e4:	74736574 	.word	0x74736574
  40e3e8:	2520203a 	.word	0x2520203a
  40e3ec:	00000073 	.word	0x00000073
  40e3f0:	0d0a7325 	.word	0x0d0a7325
  40e3f4:	43414d48 	.word	0x43414d48
  40e3f8:	4148535f 	.word	0x4148535f
  40e3fc:	20343833 	.word	0x20343833
  40e400:	74736574 	.word	0x74736574
  40e404:	2520203a 	.word	0x2520203a
  40e408:	00000073 	.word	0x00000073
  40e40c:	0d0a7325 	.word	0x0d0a7325
  40e410:	43414d48 	.word	0x43414d48
  40e414:	4148535f 	.word	0x4148535f
  40e418:	20323135 	.word	0x20323135
  40e41c:	74736574 	.word	0x74736574
  40e420:	2520203a 	.word	0x2520203a
  40e424:	00000073 	.word	0x00000073
  40e428:	0d0a7325 	.word	0x0d0a7325
  40e42c:	20434345 	.word	0x20434345
  40e430:	74736574 	.word	0x74736574
  40e434:	2020203a 	.word	0x2020203a
  40e438:	20202020 	.word	0x20202020
  40e43c:	25202020 	.word	0x25202020
  40e440:	00000073 	.word	0x00000073
  40e444:	0d0a7325 	.word	0x0d0a7325
  40e448:	444e4152 	.word	0x444e4152
  40e44c:	74204d4f 	.word	0x74204d4f
  40e450:	3a747365 	.word	0x3a747365
  40e454:	20202020 	.word	0x20202020
  40e458:	25202020 	.word	0x25202020
  40e45c:	00000073 	.word	0x00000073
  40e460:	0d0a7325 	.word	0x0d0a7325
  40e464:	20534541 	.word	0x20534541
  40e468:	20434243 	.word	0x20434243
  40e46c:	74736574 	.word	0x74736574
  40e470:	2020203a 	.word	0x2020203a
  40e474:	25202020 	.word	0x25202020
  40e478:	00000073 	.word	0x00000073
  40e47c:	0d0a7325 	.word	0x0d0a7325
  40e480:	20534541 	.word	0x20534541
  40e484:	20525443 	.word	0x20525443
  40e488:	74736574 	.word	0x74736574
  40e48c:	2020203a 	.word	0x2020203a
  40e490:	25202020 	.word	0x25202020
  40e494:	00000073 	.word	0x00000073
  40e498:	0d0a7325 	.word	0x0d0a7325
  40e49c:	504d4f43 	.word	0x504d4f43
  40e4a0:	53534552 	.word	0x53534552
  40e4a4:	73657420 	.word	0x73657420
  40e4a8:	20203a74 	.word	0x20203a74
  40e4ac:	25202020 	.word	0x25202020
  40e4b0:	00000073 	.word	0x00000073
  40e4b4:	0d0a7325 	.word	0x0d0a7325
  40e4b8:	20534544 	.word	0x20534544
  40e4bc:	74736574 	.word	0x74736574
  40e4c0:	2020203a 	.word	0x2020203a
  40e4c4:	20202020 	.word	0x20202020
  40e4c8:	25202020 	.word	0x25202020
  40e4cc:	00000073 	.word	0x00000073
  40e4d0:	0d0a7325 	.word	0x0d0a7325
  40e4d4:	33534544 	.word	0x33534544
  40e4d8:	73657420 	.word	0x73657420
  40e4dc:	20203a74 	.word	0x20203a74
  40e4e0:	20202020 	.word	0x20202020
  40e4e4:	25202020 	.word	0x25202020
  40e4e8:	00000073 	.word	0x00000073
  40e4ec:	0d0a7325 	.word	0x0d0a7325
  40e4f0:	20415352 	.word	0x20415352
  40e4f4:	74736574 	.word	0x74736574
  40e4f8:	2020203a 	.word	0x2020203a
  40e4fc:	20202020 	.word	0x20202020
  40e500:	25202020 	.word	0x25202020
  40e504:	00000073 	.word	0x00000073
  40e508:	0d0a7325 	.word	0x0d0a7325
  40e50c:	74206f4e 	.word	0x74206f4e
  40e510:	73747365 	.word	0x73747365
  40e514:	65786520 	.word	0x65786520
  40e518:	65747563 	.word	0x65747563
  40e51c:	000d0a64 	.word	0x000d0a64
  40e520:	0d0a7325 	.word	0x0d0a7325
  40e524:	20656e4f 	.word	0x20656e4f
  40e528:	6d20726f 	.word	0x6d20726f
  40e52c:	2065726f 	.word	0x2065726f
  40e530:	74736574 	.word	0x74736574
  40e534:	61662073 	.word	0x61662073
  40e538:	64656c69 	.word	0x64656c69
  40e53c:	00000d0a 	.word	0x00000d0a
  40e540:	0d0a7325 	.word	0x0d0a7325
  40e544:	206c6c41 	.word	0x206c6c41
  40e548:	74736574 	.word	0x74736574
  40e54c:	61702073 	.word	0x61702073
  40e550:	64657373 	.word	0x64657373
  40e554:	00000d0a 	.word	0x00000d0a
  40e558:	0b0b0b0b 	.word	0x0b0b0b0b
  40e55c:	0b0b0b0b 	.word	0x0b0b0b0b
  40e560:	0b0b0b0b 	.word	0x0b0b0b0b
  40e564:	0b0b0b0b 	.word	0x0b0b0b0b
  40e568:	0b0b0b0b 	.word	0x0b0b0b0b
  40e56c:	00000000 	.word	0x00000000
  40e570:	6566654a 	.word	0x6566654a
  40e574:	00000000 	.word	0x00000000
  40e578:	aaaaaaaa 	.word	0xaaaaaaaa
  40e57c:	aaaaaaaa 	.word	0xaaaaaaaa
  40e580:	aaaaaaaa 	.word	0xaaaaaaaa
  40e584:	aaaaaaaa 	.word	0xaaaaaaaa
  40e588:	aaaaaaaa 	.word	0xaaaaaaaa
  40e58c:	00000000 	.word	0x00000000
  40e590:	0b0b0b0b 	.word	0x0b0b0b0b
  40e594:	0b0b0b0b 	.word	0x0b0b0b0b
  40e598:	0b0b0b0b 	.word	0x0b0b0b0b
  40e59c:	0b0b0b0b 	.word	0x0b0b0b0b
  40e5a0:	00000000 	.word	0x00000000
  40e5a4:	aaaaaaaa 	.word	0xaaaaaaaa
  40e5a8:	aaaaaaaa 	.word	0xaaaaaaaa
  40e5ac:	aaaaaaaa 	.word	0xaaaaaaaa
  40e5b0:	aaaaaaaa 	.word	0xaaaaaaaa
  40e5b4:	00000000 	.word	0x00000000
  40e5b8:	41200a0d 	.word	0x41200a0d
  40e5bc:	696c7070 	.word	0x696c7070
  40e5c0:	69746163 	.word	0x69746163
  40e5c4:	63206e6f 	.word	0x63206e6f
  40e5c8:	74616572 	.word	0x74616572
  40e5cc:	4f206465 	.word	0x4f206465
  40e5d0:	32207463 	.word	0x32207463
  40e5d4:	30322035 	.word	0x30322035
  40e5d8:	31203831 	.word	0x31203831
  40e5dc:	33313a36 	.word	0x33313a36
  40e5e0:	2030313a 	.word	0x2030313a
  40e5e4:	74696e69 	.word	0x74696e69
  40e5e8:	696c6169 	.word	0x696c6169
  40e5ec:	2164657a 	.word	0x2164657a
  40e5f0:	0a0d      	.short	0x0a0d
	...

Disassembly of section .text.deflate%46:

0040e5f4 <deflate>:
    int flush;
{
    int old_flush; /* value of flush param for previous deflate call */
    deflate_state *s;

    if (strm == Z_NULL || strm->state == Z_NULL ||
  40e5f4:	2800      	cmp	r0, #0
  40e5f6:	f000 84e3 	beq.w	40efc0 <.LCFI25>
{
  40e5fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

0040e5fe <.LCFI24>:
  40e5fe:	4605      	mov	r5, r0
    if (strm == Z_NULL || strm->state == Z_NULL ||
  40e600:	69c4      	ldr	r4, [r0, #28]
  40e602:	2c00      	cmp	r4, #0
  40e604:	f000 84df 	beq.w	40efc6 <.LCFI26>
        flush > Z_BLOCK || flush < 0) {
  40e608:	2905      	cmp	r1, #5
  40e60a:	f200 84e0 	bhi.w	40efce <.LVL520>

0040e60e <.LVL353>:
        return Z_STREAM_ERROR;
    }
    s = strm->state;

    if (strm->next_out == Z_NULL ||
  40e60e:	68c3      	ldr	r3, [r0, #12]
  40e610:	2b00      	cmp	r3, #0
  40e612:	d04b      	beq.n	40e6ac <.LVL357+0x6>
  40e614:	6803      	ldr	r3, [r0, #0]
  40e616:	2b00      	cmp	r3, #0
  40e618:	d045      	beq.n	40e6a6 <.LVL357>
        (strm->next_in == Z_NULL && strm->avail_in != 0) ||
        (s->status == FINISH_STATE && flush != Z_FINISH)) {
  40e61a:	6863      	ldr	r3, [r4, #4]
  40e61c:	1f0e      	subs	r6, r1, #4
  40e61e:	bf18      	it	ne
  40e620:	2601      	movne	r6, #1
  40e622:	f240 229a 	movw	r2, #666	; 0x29a
  40e626:	4293      	cmp	r3, r2
  40e628:	d101      	bne.n	40e62e <.LVL353+0x20>
  40e62a:	2e00      	cmp	r6, #0
  40e62c:	d13e      	bne.n	40e6ac <.LVL357+0x6>
        ERR_RETURN(strm, Z_STREAM_ERROR);
    }
    if (strm->avail_out == 0) ERR_RETURN(strm, Z_BUF_ERROR);
  40e62e:	692a      	ldr	r2, [r5, #16]
  40e630:	2a00      	cmp	r2, #0
  40e632:	d042      	beq.n	40e6ba <.LVL359>
  40e634:	460f      	mov	r7, r1

    s->strm = strm; /* just in case */
  40e636:	6025      	str	r5, [r4, #0]
    old_flush = s->last_flush;
  40e638:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28

0040e63c <.LVL354>:
    s->last_flush = flush;
  40e63c:	62a1      	str	r1, [r4, #40]	; 0x28

    /* Write the header */
    if (s->status == INIT_STATE) {
  40e63e:	2b2a      	cmp	r3, #42	; 0x2a
  40e640:	d042      	beq.n	40e6c8 <.LVL361>

0040e642 <.LVL355>:
            }
            strm->adler = adler32(0L, Z_NULL, 0);
        }
    }
#ifdef GZIP
    if (s->status == EXTRA_STATE) {
  40e642:	6863      	ldr	r3, [r4, #4]
  40e644:	2b45      	cmp	r3, #69	; 0x45
  40e646:	f000 80f6 	beq.w	40e836 <.LVL376+0x10a>
            }
        }
        else
            s->status = NAME_STATE;
    }
    if (s->status == NAME_STATE) {
  40e64a:	6863      	ldr	r3, [r4, #4]
  40e64c:	2b49      	cmp	r3, #73	; 0x49
  40e64e:	f000 8192 	beq.w	40e976 <.LBE45>
            }
        }
        else
            s->status = COMMENT_STATE;
    }
    if (s->status == COMMENT_STATE) {
  40e652:	6863      	ldr	r3, [r4, #4]
  40e654:	2b5b      	cmp	r3, #91	; 0x5b
  40e656:	f000 84cd 	beq.w	40eff4 <.LBE72>
                s->status = HCRC_STATE;
        }
        else
            s->status = HCRC_STATE;
    }
    if (s->status == HCRC_STATE) {
  40e65a:	6863      	ldr	r3, [r4, #4]
  40e65c:	2b67      	cmp	r3, #103	; 0x67
  40e65e:	f000 84d7 	beq.w	40f010 <.LBE73>
            s->status = BUSY_STATE;
    }
#endif

    /* Flush as much pending output as possible */
    if (s->pending != 0) {
  40e662:	6963      	ldr	r3, [r4, #20]
  40e664:	2b00      	cmp	r3, #0
  40e666:	f040 8212 	bne.w	40ea8e <.LVL420+0x14>

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
    } else if (strm->avail_in == 0 && RANK(flush) <= RANK(old_flush) &&
  40e66a:	686b      	ldr	r3, [r5, #4]
  40e66c:	2b00      	cmp	r3, #0
  40e66e:	f040 84f0 	bne.w	40f052 <.LVL531+0xa>
  40e672:	2f04      	cmp	r7, #4
  40e674:	bfcc      	ite	gt
  40e676:	2209      	movgt	r2, #9
  40e678:	2200      	movle	r2, #0
  40e67a:	ebc2 0247 	rsb	r2, r2, r7, lsl #1
  40e67e:	f1b8 0f04 	cmp.w	r8, #4
  40e682:	bfcc      	ite	gt
  40e684:	2309      	movgt	r3, #9
  40e686:	2300      	movle	r3, #0
  40e688:	ebc3 0848 	rsb	r8, r3, r8, lsl #1

0040e68c <.LVL356>:
  40e68c:	4542      	cmp	r2, r8
  40e68e:	f300 8203 	bgt.w	40ea98 <.LVL422>
  40e692:	2e00      	cmp	r6, #0
  40e694:	f000 8200 	beq.w	40ea98 <.LVL422>
               flush != Z_FINISH) {
        ERR_RETURN(strm, Z_BUF_ERROR);
  40e698:	4b99      	ldr	r3, [pc, #612]	; (40e900 <.LVL388+0x2>)
  40e69a:	69db      	ldr	r3, [r3, #28]
  40e69c:	61ab      	str	r3, [r5, #24]
  40e69e:	f06f 0004 	mvn.w	r0, #4
  40e6a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040e6a6 <.LVL357>:
        (strm->next_in == Z_NULL && strm->avail_in != 0) ||
  40e6a6:	6843      	ldr	r3, [r0, #4]
  40e6a8:	2b00      	cmp	r3, #0
  40e6aa:	d0b6      	beq.n	40e61a <.LVL353+0xc>
        ERR_RETURN(strm, Z_STREAM_ERROR);
  40e6ac:	4b94      	ldr	r3, [pc, #592]	; (40e900 <.LVL388+0x2>)
  40e6ae:	691b      	ldr	r3, [r3, #16]
  40e6b0:	61ab      	str	r3, [r5, #24]
  40e6b2:	f06f 0001 	mvn.w	r0, #1

0040e6b6 <.LVL358>:
  40e6b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040e6ba <.LVL359>:
    if (strm->avail_out == 0) ERR_RETURN(strm, Z_BUF_ERROR);
  40e6ba:	4b91      	ldr	r3, [pc, #580]	; (40e900 <.LVL388+0x2>)
  40e6bc:	69db      	ldr	r3, [r3, #28]
  40e6be:	61ab      	str	r3, [r5, #24]
  40e6c0:	f06f 0004 	mvn.w	r0, #4

0040e6c4 <.LVL360>:
  40e6c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040e6c8 <.LVL361>:
        if (s->wrap == 2) {
  40e6c8:	69a3      	ldr	r3, [r4, #24]
  40e6ca:	2b02      	cmp	r3, #2
  40e6cc:	d029      	beq.n	40e722 <.LBE42>

0040e6ce <.LBB42>:
            uInt header = (Z_DEFLATED + ((s->w_bits-8)<<4)) << 8;
  40e6ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40e6d0:	031b      	lsls	r3, r3, #12
  40e6d2:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800

0040e6d6 <.LVL362>:
            if (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2)
  40e6d6:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
  40e6da:	2a01      	cmp	r2, #1
  40e6dc:	f340 80f8 	ble.w	40e8d0 <.LBB44>
                level_flags = 0;
  40e6e0:	2100      	movs	r1, #0

0040e6e2 <.LVL363>:
            header |= (level_flags << 6);
  40e6e2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
            if (s->strstart != 0) header |= PRESET_DICT;
  40e6e6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  40e6e8:	b10a      	cbz	r2, 40e6ee <.LVL363+0xc>
  40e6ea:	f043 0320 	orr.w	r3, r3, #32
            header += 31 - (header % 31);
  40e6ee:	4985      	ldr	r1, [pc, #532]	; (40e904 <.LVL388+0x6>)

0040e6f0 <.LVL366>:
  40e6f0:	fba1 2103 	umull	r2, r1, r1, r3
  40e6f4:	1a5b      	subs	r3, r3, r1

0040e6f6 <.LVL367>:
  40e6f6:	eb01 0153 	add.w	r1, r1, r3, lsr #1
  40e6fa:	0909      	lsrs	r1, r1, #4
  40e6fc:	ebc1 1141 	rsb	r1, r1, r1, lsl #5

0040e700 <.LVL368>:
            s->status = BUSY_STATE;
  40e700:	2371      	movs	r3, #113	; 0x71
  40e702:	6063      	str	r3, [r4, #4]
            putShortMSB(s, header);
  40e704:	311f      	adds	r1, #31

0040e706 <.LVL369>:
  40e706:	4620      	mov	r0, r4

0040e708 <.LVL370>:
  40e708:	f013 fb53 	bl	421db2 <.LFE34>

0040e70c <.LVL371>:
            if (s->strstart != 0) {
  40e70c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40e70e:	2b00      	cmp	r3, #0
  40e710:	f040 80ed 	bne.w	40e8ee <.LVL386>
            strm->adler = adler32(0L, Z_NULL, 0);
  40e714:	2200      	movs	r2, #0
  40e716:	4611      	mov	r1, r2
  40e718:	4610      	mov	r0, r2
  40e71a:	f008 fa39 	bl	416b90 <.LFE16>

0040e71e <.LVL372>:
  40e71e:	6328      	str	r0, [r5, #48]	; 0x30
  40e720:	e78f      	b.n	40e642 <.LVL355>

0040e722 <.LBE42>:
            strm->adler = crc32(0L, Z_NULL, 0);
  40e722:	2200      	movs	r2, #0
  40e724:	4611      	mov	r1, r2

0040e726 <.LVL374>:
  40e726:	4610      	mov	r0, r2

0040e728 <.LVL375>:
  40e728:	f008 ffe0 	bl	4176ec <.LFE21>

0040e72c <.LVL376>:
  40e72c:	6328      	str	r0, [r5, #48]	; 0x30
            put_byte(s, 31);
  40e72e:	68a2      	ldr	r2, [r4, #8]
  40e730:	6963      	ldr	r3, [r4, #20]
  40e732:	1c59      	adds	r1, r3, #1
  40e734:	6161      	str	r1, [r4, #20]
  40e736:	211f      	movs	r1, #31
  40e738:	54d1      	strb	r1, [r2, r3]
            put_byte(s, 139);
  40e73a:	68a2      	ldr	r2, [r4, #8]
  40e73c:	6963      	ldr	r3, [r4, #20]
  40e73e:	1c59      	adds	r1, r3, #1
  40e740:	6161      	str	r1, [r4, #20]
  40e742:	218b      	movs	r1, #139	; 0x8b
  40e744:	54d1      	strb	r1, [r2, r3]
            put_byte(s, 8);
  40e746:	68a2      	ldr	r2, [r4, #8]
  40e748:	6963      	ldr	r3, [r4, #20]
  40e74a:	1c59      	adds	r1, r3, #1
  40e74c:	6161      	str	r1, [r4, #20]
  40e74e:	2108      	movs	r1, #8
  40e750:	54d1      	strb	r1, [r2, r3]
            if (s->gzhead == Z_NULL) {
  40e752:	69e2      	ldr	r2, [r4, #28]
  40e754:	2a00      	cmp	r2, #0
  40e756:	d079      	beq.n	40e84c <.LBE43>
                put_byte(s, (s->gzhead->text ? 1 : 0) +
  40e758:	6961      	ldr	r1, [r4, #20]
  40e75a:	1c4b      	adds	r3, r1, #1
  40e75c:	6163      	str	r3, [r4, #20]
  40e75e:	6813      	ldr	r3, [r2, #0]
  40e760:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40e762:	2800      	cmp	r0, #0
  40e764:	bf14      	ite	ne
  40e766:	2002      	movne	r0, #2
  40e768:	2000      	moveq	r0, #0
  40e76a:	2b00      	cmp	r3, #0
  40e76c:	bf18      	it	ne
  40e76e:	3001      	addne	r0, #1
  40e770:	6913      	ldr	r3, [r2, #16]
  40e772:	2b00      	cmp	r3, #0
  40e774:	bf0c      	ite	eq
  40e776:	2300      	moveq	r3, #0
  40e778:	2304      	movne	r3, #4
  40e77a:	4403      	add	r3, r0
  40e77c:	69d0      	ldr	r0, [r2, #28]
  40e77e:	2800      	cmp	r0, #0
  40e780:	bf0c      	ite	eq
  40e782:	2000      	moveq	r0, #0
  40e784:	2008      	movne	r0, #8
  40e786:	fa50 f383 	uxtab	r3, r0, r3
  40e78a:	6a50      	ldr	r0, [r2, #36]	; 0x24
  40e78c:	2800      	cmp	r0, #0
  40e78e:	bf0c      	ite	eq
  40e790:	2000      	moveq	r0, #0
  40e792:	2010      	movne	r0, #16
  40e794:	fa50 f383 	uxtab	r3, r0, r3
  40e798:	68a2      	ldr	r2, [r4, #8]
  40e79a:	5453      	strb	r3, [r2, r1]
                put_byte(s, (Byte)(s->gzhead->time & 0xff));
  40e79c:	68a2      	ldr	r2, [r4, #8]
  40e79e:	6963      	ldr	r3, [r4, #20]
  40e7a0:	1c59      	adds	r1, r3, #1
  40e7a2:	6161      	str	r1, [r4, #20]
  40e7a4:	69e1      	ldr	r1, [r4, #28]
  40e7a6:	6849      	ldr	r1, [r1, #4]
  40e7a8:	54d1      	strb	r1, [r2, r3]
                put_byte(s, (Byte)((s->gzhead->time >> 8) & 0xff));
  40e7aa:	68a1      	ldr	r1, [r4, #8]
  40e7ac:	6962      	ldr	r2, [r4, #20]
  40e7ae:	1c53      	adds	r3, r2, #1
  40e7b0:	6163      	str	r3, [r4, #20]
  40e7b2:	69e3      	ldr	r3, [r4, #28]
  40e7b4:	685b      	ldr	r3, [r3, #4]
  40e7b6:	0a1b      	lsrs	r3, r3, #8
  40e7b8:	548b      	strb	r3, [r1, r2]
                put_byte(s, (Byte)((s->gzhead->time >> 16) & 0xff));
  40e7ba:	68a2      	ldr	r2, [r4, #8]
  40e7bc:	6963      	ldr	r3, [r4, #20]
  40e7be:	1c59      	adds	r1, r3, #1
  40e7c0:	6161      	str	r1, [r4, #20]
  40e7c2:	69e1      	ldr	r1, [r4, #28]
  40e7c4:	88c9      	ldrh	r1, [r1, #6]
  40e7c6:	54d1      	strb	r1, [r2, r3]
                put_byte(s, (Byte)((s->gzhead->time >> 24) & 0xff));
  40e7c8:	68a2      	ldr	r2, [r4, #8]
  40e7ca:	6963      	ldr	r3, [r4, #20]
  40e7cc:	1c59      	adds	r1, r3, #1
  40e7ce:	6161      	str	r1, [r4, #20]
  40e7d0:	69e1      	ldr	r1, [r4, #28]
  40e7d2:	79c9      	ldrb	r1, [r1, #7]
  40e7d4:	54d1      	strb	r1, [r2, r3]
                put_byte(s, s->level == 9 ? 2 :
  40e7d6:	68a1      	ldr	r1, [r4, #8]
  40e7d8:	6963      	ldr	r3, [r4, #20]
  40e7da:	1c5a      	adds	r2, r3, #1
  40e7dc:	6162      	str	r2, [r4, #20]
  40e7de:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  40e7e2:	2a09      	cmp	r2, #9
  40e7e4:	d069      	beq.n	40e8ba <.LBE43+0x6e>
  40e7e6:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
  40e7ea:	2801      	cmp	r0, #1
  40e7ec:	dc67      	bgt.n	40e8be <.LBE43+0x72>
  40e7ee:	2a01      	cmp	r2, #1
  40e7f0:	dd65      	ble.n	40e8be <.LBE43+0x72>
  40e7f2:	2200      	movs	r2, #0
  40e7f4:	54ca      	strb	r2, [r1, r3]
                put_byte(s, s->gzhead->os & 0xff);
  40e7f6:	68a2      	ldr	r2, [r4, #8]
  40e7f8:	6963      	ldr	r3, [r4, #20]
  40e7fa:	1c59      	adds	r1, r3, #1
  40e7fc:	6161      	str	r1, [r4, #20]
  40e7fe:	69e1      	ldr	r1, [r4, #28]
  40e800:	68c9      	ldr	r1, [r1, #12]
  40e802:	54d1      	strb	r1, [r2, r3]
                if (s->gzhead->extra != Z_NULL) {
  40e804:	69e2      	ldr	r2, [r4, #28]
  40e806:	6913      	ldr	r3, [r2, #16]
  40e808:	b16b      	cbz	r3, 40e826 <.LVL376+0xfa>
                    put_byte(s, s->gzhead->extra_len & 0xff);
  40e80a:	68a1      	ldr	r1, [r4, #8]
  40e80c:	6963      	ldr	r3, [r4, #20]
  40e80e:	1c58      	adds	r0, r3, #1
  40e810:	6160      	str	r0, [r4, #20]
  40e812:	6952      	ldr	r2, [r2, #20]
  40e814:	54ca      	strb	r2, [r1, r3]
                    put_byte(s, (s->gzhead->extra_len >> 8) & 0xff);
  40e816:	68a1      	ldr	r1, [r4, #8]
  40e818:	6962      	ldr	r2, [r4, #20]
  40e81a:	1c53      	adds	r3, r2, #1
  40e81c:	6163      	str	r3, [r4, #20]
  40e81e:	69e3      	ldr	r3, [r4, #28]
  40e820:	695b      	ldr	r3, [r3, #20]
  40e822:	0a1b      	lsrs	r3, r3, #8
  40e824:	548b      	strb	r3, [r1, r2]
                if (s->gzhead->hcrc)
  40e826:	69e3      	ldr	r3, [r4, #28]
  40e828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40e82a:	2b00      	cmp	r3, #0
  40e82c:	d149      	bne.n	40e8c2 <.LBE43+0x76>
                s->gzindex = 0;
  40e82e:	2300      	movs	r3, #0
  40e830:	6223      	str	r3, [r4, #32]
                s->status = EXTRA_STATE;
  40e832:	2345      	movs	r3, #69	; 0x45
  40e834:	6063      	str	r3, [r4, #4]
        if (s->gzhead->extra != Z_NULL) {
  40e836:	69e0      	ldr	r0, [r4, #28]
  40e838:	6903      	ldr	r3, [r0, #16]
  40e83a:	2b00      	cmp	r3, #0
  40e83c:	f000 80a9 	beq.w	40e992 <.LBE47>

0040e840 <.LBB43>:
            uInt beg = s->pending;  /* start of bytes to update crc */
  40e840:	6961      	ldr	r1, [r4, #20]

0040e842 <.LVL377>:
            while (s->gzindex < (s->gzhead->extra_len & 0xffff)) {
  40e842:	8a83      	ldrh	r3, [r0, #20]
  40e844:	6a22      	ldr	r2, [r4, #32]
  40e846:	429a      	cmp	r2, r3
  40e848:	d375      	bcc.n	40e936 <.LVL390+0x26>
  40e84a:	e08a      	b.n	40e962 <.LVL394>

0040e84c <.LBE43>:
                put_byte(s, 0);
  40e84c:	68a1      	ldr	r1, [r4, #8]
  40e84e:	6962      	ldr	r2, [r4, #20]
  40e850:	1c53      	adds	r3, r2, #1
  40e852:	6163      	str	r3, [r4, #20]
  40e854:	2300      	movs	r3, #0
  40e856:	548b      	strb	r3, [r1, r2]
                put_byte(s, 0);
  40e858:	68a1      	ldr	r1, [r4, #8]
  40e85a:	6962      	ldr	r2, [r4, #20]
  40e85c:	1c50      	adds	r0, r2, #1
  40e85e:	6160      	str	r0, [r4, #20]
  40e860:	548b      	strb	r3, [r1, r2]
                put_byte(s, 0);
  40e862:	68a1      	ldr	r1, [r4, #8]
  40e864:	6962      	ldr	r2, [r4, #20]
  40e866:	1c50      	adds	r0, r2, #1
  40e868:	6160      	str	r0, [r4, #20]
  40e86a:	548b      	strb	r3, [r1, r2]
                put_byte(s, 0);
  40e86c:	68a1      	ldr	r1, [r4, #8]
  40e86e:	6962      	ldr	r2, [r4, #20]
  40e870:	1c50      	adds	r0, r2, #1
  40e872:	6160      	str	r0, [r4, #20]
  40e874:	548b      	strb	r3, [r1, r2]
                put_byte(s, 0);
  40e876:	68a1      	ldr	r1, [r4, #8]
  40e878:	6962      	ldr	r2, [r4, #20]
  40e87a:	1c50      	adds	r0, r2, #1
  40e87c:	6160      	str	r0, [r4, #20]
  40e87e:	548b      	strb	r3, [r1, r2]
                put_byte(s, s->level == 9 ? 2 :
  40e880:	68a1      	ldr	r1, [r4, #8]
  40e882:	6962      	ldr	r2, [r4, #20]
  40e884:	1c53      	adds	r3, r2, #1
  40e886:	6163      	str	r3, [r4, #20]
  40e888:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
  40e88c:	2b09      	cmp	r3, #9
  40e88e:	d010      	beq.n	40e8b2 <.LBE43+0x66>
  40e890:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
  40e894:	2801      	cmp	r0, #1
  40e896:	dc0e      	bgt.n	40e8b6 <.LBE43+0x6a>
  40e898:	2b01      	cmp	r3, #1
  40e89a:	dd0c      	ble.n	40e8b6 <.LBE43+0x6a>
  40e89c:	2300      	movs	r3, #0
  40e89e:	548b      	strb	r3, [r1, r2]
                put_byte(s, OS_CODE);
  40e8a0:	68a2      	ldr	r2, [r4, #8]
  40e8a2:	6963      	ldr	r3, [r4, #20]
  40e8a4:	1c59      	adds	r1, r3, #1
  40e8a6:	6161      	str	r1, [r4, #20]
  40e8a8:	2103      	movs	r1, #3
  40e8aa:	54d1      	strb	r1, [r2, r3]
                s->status = BUSY_STATE;
  40e8ac:	2371      	movs	r3, #113	; 0x71
  40e8ae:	6063      	str	r3, [r4, #4]
  40e8b0:	e6cf      	b.n	40e652 <.LVL355+0x10>
                put_byte(s, s->level == 9 ? 2 :
  40e8b2:	2302      	movs	r3, #2
  40e8b4:	e7f3      	b.n	40e89e <.LBE43+0x52>
  40e8b6:	2304      	movs	r3, #4
  40e8b8:	e7f1      	b.n	40e89e <.LBE43+0x52>
                put_byte(s, s->level == 9 ? 2 :
  40e8ba:	2202      	movs	r2, #2
  40e8bc:	e79a      	b.n	40e7f4 <.LVL376+0xc8>
  40e8be:	2204      	movs	r2, #4
  40e8c0:	e798      	b.n	40e7f4 <.LVL376+0xc8>
                    strm->adler = crc32(strm->adler, s->pending_buf,
  40e8c2:	6962      	ldr	r2, [r4, #20]
  40e8c4:	68a1      	ldr	r1, [r4, #8]
  40e8c6:	6b28      	ldr	r0, [r5, #48]	; 0x30
  40e8c8:	f008 ff10 	bl	4176ec <.LFE21>

0040e8cc <.LVL379>:
  40e8cc:	6328      	str	r0, [r5, #48]	; 0x30
  40e8ce:	e7ae      	b.n	40e82e <.LVL376+0x102>

0040e8d0 <.LBB44>:
            if (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2)
  40e8d0:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  40e8d4:	2a01      	cmp	r2, #1
  40e8d6:	dd06      	ble.n	40e8e6 <.LVL382>
            else if (s->level < 6)
  40e8d8:	2a05      	cmp	r2, #5
  40e8da:	dd06      	ble.n	40e8ea <.LVL384>
                level_flags = 3;
  40e8dc:	2a06      	cmp	r2, #6
  40e8de:	bf0c      	ite	eq
  40e8e0:	2102      	moveq	r1, #2

0040e8e2 <.LVL381>:
  40e8e2:	2103      	movne	r1, #3
  40e8e4:	e6fd      	b.n	40e6e2 <.LVL363>

0040e8e6 <.LVL382>:
                level_flags = 0;
  40e8e6:	2100      	movs	r1, #0

0040e8e8 <.LVL383>:
  40e8e8:	e6fb      	b.n	40e6e2 <.LVL363>

0040e8ea <.LVL384>:
                level_flags = 1;
  40e8ea:	2101      	movs	r1, #1

0040e8ec <.LVL385>:
  40e8ec:	e6f9      	b.n	40e6e2 <.LVL363>

0040e8ee <.LVL386>:
                putShortMSB(s, (uInt)(strm->adler >> 16));
  40e8ee:	8e69      	ldrh	r1, [r5, #50]	; 0x32
  40e8f0:	4620      	mov	r0, r4
  40e8f2:	f013 fa5e 	bl	421db2 <.LFE34>

0040e8f6 <.LVL387>:
                putShortMSB(s, (uInt)(strm->adler & 0xffff));
  40e8f6:	8e29      	ldrh	r1, [r5, #48]	; 0x30
  40e8f8:	4620      	mov	r0, r4
  40e8fa:	f013 fa5a 	bl	421db2 <.LFE34>

0040e8fe <.LVL388>:
  40e8fe:	e709      	b.n	40e714 <.LVL371+0x8>
  40e900:	00421ac0 	.word	0x00421ac0
  40e904:	08421085 	.word	0x08421085

0040e908 <.LBB45>:
                    flush_pending(strm);
  40e908:	4628      	mov	r0, r5
  40e90a:	f012 f871 	bl	4209f0 <.LFE41>

0040e90e <.LVL389>:
                    beg = s->pending;
  40e90e:	6961      	ldr	r1, [r4, #20]

0040e910 <.LVL390>:
                    if (s->pending == s->pending_buf_size)
  40e910:	68e3      	ldr	r3, [r4, #12]
  40e912:	4299      	cmp	r1, r3
  40e914:	d025      	beq.n	40e962 <.LVL394>
                put_byte(s, s->gzhead->extra[s->gzindex]);
  40e916:	6963      	ldr	r3, [r4, #20]
  40e918:	1c58      	adds	r0, r3, #1
  40e91a:	6160      	str	r0, [r4, #20]
  40e91c:	69e0      	ldr	r0, [r4, #28]
  40e91e:	6902      	ldr	r2, [r0, #16]
  40e920:	6a20      	ldr	r0, [r4, #32]
  40e922:	5c10      	ldrb	r0, [r2, r0]
  40e924:	68a2      	ldr	r2, [r4, #8]
  40e926:	54d0      	strb	r0, [r2, r3]
                s->gzindex++;
  40e928:	6a23      	ldr	r3, [r4, #32]
  40e92a:	3301      	adds	r3, #1
  40e92c:	6223      	str	r3, [r4, #32]
            while (s->gzindex < (s->gzhead->extra_len & 0xffff)) {
  40e92e:	69e0      	ldr	r0, [r4, #28]
  40e930:	8a82      	ldrh	r2, [r0, #20]
  40e932:	429a      	cmp	r2, r3
  40e934:	d910      	bls.n	40e958 <.LVL393>
                if (s->pending == s->pending_buf_size) {
  40e936:	6962      	ldr	r2, [r4, #20]
  40e938:	68e3      	ldr	r3, [r4, #12]
  40e93a:	429a      	cmp	r2, r3
  40e93c:	d1eb      	bne.n	40e916 <.LVL390+0x6>
                    if (s->gzhead->hcrc && s->pending > beg)
  40e93e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  40e940:	2b00      	cmp	r3, #0
  40e942:	d0e1      	beq.n	40e908 <.LBB45>
  40e944:	428a      	cmp	r2, r1
  40e946:	d9df      	bls.n	40e908 <.LBB45>
                        strm->adler = crc32(strm->adler, s->pending_buf + beg,
  40e948:	68a3      	ldr	r3, [r4, #8]
  40e94a:	1a52      	subs	r2, r2, r1
  40e94c:	4419      	add	r1, r3

0040e94e <.LVL391>:
  40e94e:	6b28      	ldr	r0, [r5, #48]	; 0x30
  40e950:	f008 fecc 	bl	4176ec <.LFE21>

0040e954 <.LVL392>:
  40e954:	6328      	str	r0, [r5, #48]	; 0x30
  40e956:	e7d7      	b.n	40e908 <.LBB45>

0040e958 <.LVL393>:
            if (s->gzhead->hcrc && s->pending > beg)
  40e958:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  40e95a:	b113      	cbz	r3, 40e962 <.LVL394>
  40e95c:	6962      	ldr	r2, [r4, #20]
  40e95e:	4291      	cmp	r1, r2
  40e960:	d30f      	bcc.n	40e982 <.LBB47>

0040e962 <.LVL394>:
            if (s->gzindex == s->gzhead->extra_len) {
  40e962:	69e3      	ldr	r3, [r4, #28]
  40e964:	6a22      	ldr	r2, [r4, #32]
  40e966:	695b      	ldr	r3, [r3, #20]
  40e968:	429a      	cmp	r2, r3
  40e96a:	f47f ae6e 	bne.w	40e64a <.LVL355+0x8>
                s->gzindex = 0;
  40e96e:	2300      	movs	r3, #0
  40e970:	6223      	str	r3, [r4, #32]
                s->status = NAME_STATE;
  40e972:	2349      	movs	r3, #73	; 0x49
  40e974:	6063      	str	r3, [r4, #4]

0040e976 <.LBE45>:
        if (s->gzhead->name != Z_NULL) {
  40e976:	69e3      	ldr	r3, [r4, #28]
  40e978:	69db      	ldr	r3, [r3, #28]
  40e97a:	2b00      	cmp	r3, #0
  40e97c:	d040      	beq.n	40ea00 <.LBE48>

0040e97e <.LBB46>:
            uInt beg = s->pending;  /* start of bytes to update crc */
  40e97e:	6960      	ldr	r0, [r4, #20]

0040e980 <.LVL395>:
  40e980:	e020      	b.n	40e9c4 <.LVL402>

0040e982 <.LBB47>:
                strm->adler = crc32(strm->adler, s->pending_buf + beg,
  40e982:	68a3      	ldr	r3, [r4, #8]
  40e984:	1a52      	subs	r2, r2, r1
  40e986:	4419      	add	r1, r3

0040e988 <.LVL397>:
  40e988:	6b28      	ldr	r0, [r5, #48]	; 0x30
  40e98a:	f008 feaf 	bl	4176ec <.LFE21>

0040e98e <.LVL398>:
  40e98e:	6328      	str	r0, [r5, #48]	; 0x30
  40e990:	e7e7      	b.n	40e962 <.LVL394>

0040e992 <.LBE47>:
            s->status = NAME_STATE;
  40e992:	2349      	movs	r3, #73	; 0x49
  40e994:	6063      	str	r3, [r4, #4]
  40e996:	e7ee      	b.n	40e976 <.LBE45>

0040e998 <.LBB48>:
                    flush_pending(strm);
  40e998:	4628      	mov	r0, r5
  40e99a:	f012 f829 	bl	4209f0 <.LFE41>

0040e99e <.LVL399>:
                    beg = s->pending;
  40e99e:	6960      	ldr	r0, [r4, #20]

0040e9a0 <.LVL400>:
                    if (s->pending == s->pending_buf_size) {
  40e9a0:	68e3      	ldr	r3, [r4, #12]
  40e9a2:	4298      	cmp	r0, r3
  40e9a4:	f43f ae55 	beq.w	40e652 <.LVL355+0x10>
                val = s->gzhead->name[s->gzindex++];
  40e9a8:	69e3      	ldr	r3, [r4, #28]
  40e9aa:	69da      	ldr	r2, [r3, #28]
  40e9ac:	6a23      	ldr	r3, [r4, #32]
  40e9ae:	1c59      	adds	r1, r3, #1
  40e9b0:	6221      	str	r1, [r4, #32]
  40e9b2:	5cd3      	ldrb	r3, [r2, r3]

0040e9b4 <.LVL401>:
                put_byte(s, val);
  40e9b4:	6962      	ldr	r2, [r4, #20]
  40e9b6:	1c51      	adds	r1, r2, #1
  40e9b8:	6161      	str	r1, [r4, #20]
  40e9ba:	68a1      	ldr	r1, [r4, #8]
  40e9bc:	548b      	strb	r3, [r1, r2]
            } while (val != 0);
  40e9be:	2b00      	cmp	r3, #0
  40e9c0:	f000 830f 	beq.w	40efe2 <.LBB72>

0040e9c4 <.LVL402>:
                if (s->pending == s->pending_buf_size) {
  40e9c4:	6962      	ldr	r2, [r4, #20]
  40e9c6:	68e3      	ldr	r3, [r4, #12]
  40e9c8:	429a      	cmp	r2, r3
  40e9ca:	d1ed      	bne.n	40e9a8 <.LVL400+0x8>
                    if (s->gzhead->hcrc && s->pending > beg)
  40e9cc:	69e3      	ldr	r3, [r4, #28]
  40e9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40e9d0:	2b00      	cmp	r3, #0
  40e9d2:	d0e1      	beq.n	40e998 <.LBB48>
  40e9d4:	4290      	cmp	r0, r2
  40e9d6:	d2df      	bcs.n	40e998 <.LBB48>
                        strm->adler = crc32(strm->adler, s->pending_buf + beg,
  40e9d8:	68a1      	ldr	r1, [r4, #8]
  40e9da:	1a12      	subs	r2, r2, r0
  40e9dc:	4401      	add	r1, r0
  40e9de:	6b28      	ldr	r0, [r5, #48]	; 0x30

0040e9e0 <.LVL403>:
  40e9e0:	f008 fe84 	bl	4176ec <.LFE21>

0040e9e4 <.LVL404>:
  40e9e4:	6328      	str	r0, [r5, #48]	; 0x30
  40e9e6:	e7d7      	b.n	40e998 <.LBB48>

0040e9e8 <.LVL405>:
            if (s->gzhead->hcrc && s->pending > beg)
  40e9e8:	6962      	ldr	r2, [r4, #20]
  40e9ea:	4290      	cmp	r0, r2
  40e9ec:	f080 82fe 	bcs.w	40efec <.LVL525>
                strm->adler = crc32(strm->adler, s->pending_buf + beg,
  40e9f0:	68a1      	ldr	r1, [r4, #8]
  40e9f2:	1a12      	subs	r2, r2, r0
  40e9f4:	4401      	add	r1, r0
  40e9f6:	6b28      	ldr	r0, [r5, #48]	; 0x30

0040e9f8 <.LVL406>:
  40e9f8:	f008 fe78 	bl	4176ec <.LFE21>

0040e9fc <.LVL407>:
  40e9fc:	6328      	str	r0, [r5, #48]	; 0x30
  40e9fe:	e2f5      	b.n	40efec <.LVL525>

0040ea00 <.LBE48>:
            s->status = COMMENT_STATE;
  40ea00:	235b      	movs	r3, #91	; 0x5b
  40ea02:	6063      	str	r3, [r4, #4]
  40ea04:	e2f6      	b.n	40eff4 <.LBE72>

0040ea06 <.LBB49>:
                    flush_pending(strm);
  40ea06:	4628      	mov	r0, r5
  40ea08:	f011 fff2 	bl	4209f0 <.LFE41>

0040ea0c <.LVL410>:
                    beg = s->pending;
  40ea0c:	6960      	ldr	r0, [r4, #20]

0040ea0e <.LVL411>:
                    if (s->pending == s->pending_buf_size) {
  40ea0e:	68e3      	ldr	r3, [r4, #12]
  40ea10:	4298      	cmp	r0, r3
  40ea12:	f43f ae22 	beq.w	40e65a <.LVL355+0x18>
                val = s->gzhead->comment[s->gzindex++];
  40ea16:	69e3      	ldr	r3, [r4, #28]
  40ea18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  40ea1a:	6a23      	ldr	r3, [r4, #32]
  40ea1c:	1c59      	adds	r1, r3, #1
  40ea1e:	6221      	str	r1, [r4, #32]
  40ea20:	5cd3      	ldrb	r3, [r2, r3]

0040ea22 <.LVL412>:
                put_byte(s, val);
  40ea22:	6962      	ldr	r2, [r4, #20]
  40ea24:	1c51      	adds	r1, r2, #1
  40ea26:	6161      	str	r1, [r4, #20]
  40ea28:	68a1      	ldr	r1, [r4, #8]
  40ea2a:	548b      	strb	r3, [r1, r2]
            } while (val != 0);
  40ea2c:	2b00      	cmp	r3, #0
  40ea2e:	f000 82e8 	beq.w	40f002 <.LVL528>

0040ea32 <.LVL413>:
                if (s->pending == s->pending_buf_size) {
  40ea32:	6962      	ldr	r2, [r4, #20]
  40ea34:	68e3      	ldr	r3, [r4, #12]
  40ea36:	429a      	cmp	r2, r3
  40ea38:	d1ed      	bne.n	40ea16 <.LVL411+0x8>
                    if (s->gzhead->hcrc && s->pending > beg)
  40ea3a:	69e3      	ldr	r3, [r4, #28]
  40ea3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40ea3e:	2b00      	cmp	r3, #0
  40ea40:	d0e1      	beq.n	40ea06 <.LBB49>
  40ea42:	4290      	cmp	r0, r2
  40ea44:	d2df      	bcs.n	40ea06 <.LBB49>
                        strm->adler = crc32(strm->adler, s->pending_buf + beg,
  40ea46:	68a1      	ldr	r1, [r4, #8]
  40ea48:	1a12      	subs	r2, r2, r0
  40ea4a:	4401      	add	r1, r0
  40ea4c:	6b28      	ldr	r0, [r5, #48]	; 0x30

0040ea4e <.LVL414>:
  40ea4e:	f008 fe4d 	bl	4176ec <.LFE21>

0040ea52 <.LVL415>:
  40ea52:	6328      	str	r0, [r5, #48]	; 0x30
  40ea54:	e7d7      	b.n	40ea06 <.LBB49>

0040ea56 <.LVL416>:
            if (s->gzhead->hcrc && s->pending > beg)
  40ea56:	6962      	ldr	r2, [r4, #20]
  40ea58:	4290      	cmp	r0, r2
  40ea5a:	f080 82d7 	bcs.w	40f00c <.LVL529>
                strm->adler = crc32(strm->adler, s->pending_buf + beg,
  40ea5e:	68a1      	ldr	r1, [r4, #8]
  40ea60:	1a12      	subs	r2, r2, r0
  40ea62:	4401      	add	r1, r0
  40ea64:	6b28      	ldr	r0, [r5, #48]	; 0x30

0040ea66 <.LVL417>:
  40ea66:	f008 fe41 	bl	4176ec <.LFE21>

0040ea6a <.LVL418>:
  40ea6a:	6328      	str	r0, [r5, #48]	; 0x30
  40ea6c:	e2ce      	b.n	40f00c <.LVL529>

0040ea6e <.LBE49>:
            s->status = HCRC_STATE;
  40ea6e:	2367      	movs	r3, #103	; 0x67
  40ea70:	6063      	str	r3, [r4, #4]
  40ea72:	e2cd      	b.n	40f010 <.LBE73>
                flush_pending(strm);
  40ea74:	4628      	mov	r0, r5
  40ea76:	f011 ffbb 	bl	4209f0 <.LFE41>

0040ea7a <.LVL420>:
            if (s->pending + 2 <= s->pending_buf_size) {
  40ea7a:	6963      	ldr	r3, [r4, #20]
  40ea7c:	1c99      	adds	r1, r3, #2
  40ea7e:	68e2      	ldr	r2, [r4, #12]
  40ea80:	4291      	cmp	r1, r2
  40ea82:	f63f adee 	bhi.w	40e662 <.LVL355+0x20>
  40ea86:	e2ce      	b.n	40f026 <.LBE73+0x16>
            s->status = BUSY_STATE;
  40ea88:	2371      	movs	r3, #113	; 0x71
  40ea8a:	6063      	str	r3, [r4, #4]
  40ea8c:	e5e9      	b.n	40e662 <.LVL355+0x20>
        flush_pending(strm);
  40ea8e:	4628      	mov	r0, r5
  40ea90:	f011 ffae 	bl	4209f0 <.LFE41>

0040ea94 <.LVL421>:
        if (strm->avail_out == 0) {
  40ea94:	692b      	ldr	r3, [r5, #16]
  40ea96:	b1ab      	cbz	r3, 40eac4 <.LBE50>

0040ea98 <.LVL422>:
    }

    /* User must not provide more input after the first FINISH: */
    if (s->status == FINISH_STATE && strm->avail_in != 0) {
  40ea98:	6863      	ldr	r3, [r4, #4]
  40ea9a:	f240 229a 	movw	r2, #666	; 0x29a
  40ea9e:	4293      	cmp	r3, r2
  40eaa0:	d016      	beq.n	40ead0 <.LVL424>
        ERR_RETURN(strm, Z_BUF_ERROR);
    }

    /* Start a new block or continue the current one.
     */
    if (strm->avail_in != 0 || s->lookahead != 0 ||
  40eaa2:	686a      	ldr	r2, [r5, #4]
  40eaa4:	2a00      	cmp	r2, #0
  40eaa6:	f040 82da 	bne.w	40f05e <.LBB74>
  40eaaa:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40eaac:	2a00      	cmp	r2, #0
  40eaae:	f040 82d6 	bne.w	40f05e <.LBB74>
        (flush != Z_NO_FLUSH && s->status != FINISH_STATE)) {
  40eab2:	f240 229a 	movw	r2, #666	; 0x29a
  40eab6:	4293      	cmp	r3, r2
  40eab8:	f000 82f0 	beq.w	40f09c <.LBE74>
  40eabc:	2f00      	cmp	r7, #0
  40eabe:	f040 82ce 	bne.w	40f05e <.LBB74>

0040eac2 <.LBB50>:
  40eac2:	e2eb      	b.n	40f09c <.LBE74>

0040eac4 <.LBE50>:
            s->last_flush = -1;
  40eac4:	f04f 33ff 	mov.w	r3, #4294967295
  40eac8:	62a3      	str	r3, [r4, #40]	; 0x28
            return Z_OK;
  40eaca:	2000      	movs	r0, #0
  40eacc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040ead0 <.LVL424>:
    if (s->status == FINISH_STATE && strm->avail_in != 0) {
  40ead0:	686b      	ldr	r3, [r5, #4]
  40ead2:	b923      	cbnz	r3, 40eade <.LVL424+0xe>
    if (strm->avail_in != 0 || s->lookahead != 0 ||
  40ead4:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40ead6:	2b00      	cmp	r3, #0
  40ead8:	f040 82c1 	bne.w	40f05e <.LBB74>
  40eadc:	e2de      	b.n	40f09c <.LBE74>
        ERR_RETURN(strm, Z_BUF_ERROR);
  40eade:	4b86      	ldr	r3, [pc, #536]	; (40ecf8 <.LVL459+0x1e>)
  40eae0:	69db      	ldr	r3, [r3, #28]
  40eae2:	61ab      	str	r3, [r5, #24]
  40eae4:	f06f 0004 	mvn.w	r0, #4
  40eae8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040eaec <.LBB51>:
        }

        /* Output a literal byte */
        s->match_length = 0;
        Tracevv((stderr,"%c", s->window[s->strstart]));
        _tr_tally_lit (s, s->window[s->strstart], bflush);
  40eaec:	f241 68a4 	movw	r8, #5796	; 0x16a4
  40eaf0:	44a0      	add	r8, r4
  40eaf2:	e069      	b.n	40ebc8 <.LVL439+0xa>

0040eaf4 <.LBE53>:
        s->match_length = 0;
  40eaf4:	6626      	str	r6, [r4, #96]	; 0x60

0040eaf6 <.LBB54>:
        _tr_tally_lit (s, s->window[s->strstart], bflush);
  40eaf6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40eaf8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40eafa:	5cd3      	ldrb	r3, [r2, r3]

0040eafc <.LVL426>:
  40eafc:	f504 51b5 	add.w	r1, r4, #5792	; 0x16a0
  40eb00:	6808      	ldr	r0, [r1, #0]
  40eb02:	f8d8 2000 	ldr.w	r2, [r8]
  40eb06:	f822 6010 	strh.w	r6, [r2, r0, lsl #1]
  40eb0a:	f241 6298 	movw	r2, #5784	; 0x1698
  40eb0e:	58a0      	ldr	r0, [r4, r2]
  40eb10:	680a      	ldr	r2, [r1, #0]
  40eb12:	f102 0e01 	add.w	lr, r2, #1
  40eb16:	f8c1 e000 	str.w	lr, [r1]
  40eb1a:	5483      	strb	r3, [r0, r2]
  40eb1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2

0040eb20 <.LVL427>:
  40eb20:	f8b3 2094 	ldrh.w	r2, [r3, #148]	; 0x94

0040eb24 <.LVL428>:
  40eb24:	3201      	adds	r2, #1
  40eb26:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

0040eb2a <.LVL429>:
  40eb2a:	6809      	ldr	r1, [r1, #0]
  40eb2c:	f241 639c 	movw	r3, #5788	; 0x169c
  40eb30:	58e3      	ldr	r3, [r4, r3]
  40eb32:	3b01      	subs	r3, #1

0040eb34 <.LBE54>:
        s->lookahead--;
  40eb34:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40eb36:	3a01      	subs	r2, #1
  40eb38:	6762      	str	r2, [r4, #116]	; 0x74
        s->strstart++;
  40eb3a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  40eb3c:	3201      	adds	r2, #1
  40eb3e:	66e2      	str	r2, [r4, #108]	; 0x6c
        if (bflush) FLUSH_BLOCK(s, 0);
  40eb40:	4299      	cmp	r1, r3
  40eb42:	d02d      	beq.n	40eba0 <.LVL435>

0040eb44 <.LVL431>:
        if (s->lookahead == 0) {
  40eb44:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40eb46:	2b00      	cmp	r3, #0
  40eb48:	d1d4      	bne.n	40eaf4 <.LBE53>
            fill_window(s);
  40eb4a:	4620      	mov	r0, r4
  40eb4c:	f00a f84e 	bl	418bec <fill_window>

0040eb50 <.LVL432>:
            if (s->lookahead == 0) {
  40eb50:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40eb52:	2b00      	cmp	r3, #0
  40eb54:	d1ce      	bne.n	40eaf4 <.LBE53>
                if (flush == Z_NO_FLUSH)
  40eb56:	2f00      	cmp	r7, #0
  40eb58:	f000 817d 	beq.w	40ee56 <.LBE66>
    }
    s->insert = 0;
  40eb5c:	2200      	movs	r2, #0
  40eb5e:	f241 63b4 	movw	r3, #5812	; 0x16b4
  40eb62:	50e2      	str	r2, [r4, r3]
    if (flush == Z_FINISH) {
  40eb64:	2f04      	cmp	r7, #4
  40eb66:	d033      	beq.n	40ebd0 <.LVL442>
        FLUSH_BLOCK(s, 1);
        return finish_done;
    }
    if (s->last_lit)
  40eb68:	f504 53b5 	add.w	r3, r4, #5792	; 0x16a0
  40eb6c:	681b      	ldr	r3, [r3, #0]
  40eb6e:	2b00      	cmp	r3, #0
  40eb70:	f000 819b 	beq.w	40eeaa <.LBE68>
        FLUSH_BLOCK(s, 0);
  40eb74:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  40eb76:	2a00      	cmp	r2, #0
  40eb78:	db43      	blt.n	40ec02 <.LVL444+0x12>
  40eb7a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  40eb7c:	4411      	add	r1, r2
  40eb7e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  40eb80:	2300      	movs	r3, #0
  40eb82:	1a82      	subs	r2, r0, r2
  40eb84:	4620      	mov	r0, r4
  40eb86:	f003 fa43 	bl	412010 <_tr_flush_block>

0040eb8a <.LVL433>:
  40eb8a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40eb8c:	65e3      	str	r3, [r4, #92]	; 0x5c
  40eb8e:	6820      	ldr	r0, [r4, #0]
  40eb90:	f011 ff2e 	bl	4209f0 <.LFE41>

0040eb94 <.LVL434>:
  40eb94:	6823      	ldr	r3, [r4, #0]
  40eb96:	6918      	ldr	r0, [r3, #16]
        if (bflush) FLUSH_BLOCK(s, 0);
  40eb98:	3000      	adds	r0, #0
  40eb9a:	bf18      	it	ne
  40eb9c:	2001      	movne	r0, #1
  40eb9e:	e271      	b.n	40f084 <.LVL533>

0040eba0 <.LVL435>:
  40eba0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  40eba2:	2800      	cmp	r0, #0
  40eba4:	db12      	blt.n	40ebcc <.LVL440>
  40eba6:	6ba1      	ldr	r1, [r4, #56]	; 0x38

0040eba8 <.LVL436>:
  40eba8:	4401      	add	r1, r0
  40ebaa:	2300      	movs	r3, #0

0040ebac <.LVL437>:
  40ebac:	1a12      	subs	r2, r2, r0
  40ebae:	4620      	mov	r0, r4
  40ebb0:	f003 fa2e 	bl	412010 <_tr_flush_block>

0040ebb4 <.LVL438>:
  40ebb4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40ebb6:	65e3      	str	r3, [r4, #92]	; 0x5c
  40ebb8:	6820      	ldr	r0, [r4, #0]
  40ebba:	f011 ff19 	bl	4209f0 <.LFE41>

0040ebbe <.LVL439>:
  40ebbe:	6823      	ldr	r3, [r4, #0]
  40ebc0:	691b      	ldr	r3, [r3, #16]
  40ebc2:	2b00      	cmp	r3, #0
  40ebc4:	f000 8147 	beq.w	40ee56 <.LBE66>
        s->match_length = 0;
  40ebc8:	2600      	movs	r6, #0
  40ebca:	e7bb      	b.n	40eb44 <.LVL431>

0040ebcc <.LVL440>:
        if (bflush) FLUSH_BLOCK(s, 0);
  40ebcc:	2100      	movs	r1, #0

0040ebce <.LVL441>:
  40ebce:	e7ec      	b.n	40ebaa <.LVL436+0x2>

0040ebd0 <.LVL442>:
        FLUSH_BLOCK(s, 1);
  40ebd0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  40ebd2:	2a00      	cmp	r2, #0
  40ebd4:	db13      	blt.n	40ebfe <.LVL444+0xe>
  40ebd6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  40ebd8:	4411      	add	r1, r2
  40ebda:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  40ebdc:	2301      	movs	r3, #1
  40ebde:	1a82      	subs	r2, r0, r2
  40ebe0:	4620      	mov	r0, r4
  40ebe2:	f003 fa15 	bl	412010 <_tr_flush_block>

0040ebe6 <.LVL443>:
  40ebe6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40ebe8:	65e3      	str	r3, [r4, #92]	; 0x5c
  40ebea:	6820      	ldr	r0, [r4, #0]
  40ebec:	f011 ff00 	bl	4209f0 <.LFE41>

0040ebf0 <.LVL444>:
  40ebf0:	6823      	ldr	r3, [r4, #0]
  40ebf2:	691b      	ldr	r3, [r3, #16]
        return finish_done;
  40ebf4:	2b00      	cmp	r3, #0
  40ebf6:	bf0c      	ite	eq
  40ebf8:	2002      	moveq	r0, #2
  40ebfa:	2003      	movne	r0, #3
  40ebfc:	e14d      	b.n	40ee9a <.LBE67>
        FLUSH_BLOCK(s, 1);
  40ebfe:	2100      	movs	r1, #0
  40ec00:	e7eb      	b.n	40ebda <.LVL442+0xa>
        FLUSH_BLOCK(s, 0);
  40ec02:	2100      	movs	r1, #0
  40ec04:	e7bb      	b.n	40eb7e <.LVL432+0x2e>

0040ec06 <.LBB56>:
            _tr_tally_lit (s, s->window[s->strstart], bflush);
  40ec06:	f241 66a4 	movw	r6, #5796	; 0x16a4
  40ec0a:	4426      	add	r6, r4

0040ec0c <.LBB59>:
            _tr_tally_dist(s, 1, s->match_length - MIN_MATCH, bflush);
  40ec0c:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 40ecfc <.LVL459+0x22>
  40ec10:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 40ed00 <.LVL459+0x26>
  40ec14:	e0b8      	b.n	40ed88 <.LVL473>

0040ec16 <.LBE59>:
            fill_window(s);
  40ec16:	4620      	mov	r0, r4
  40ec18:	f009 ffe8 	bl	418bec <fill_window>

0040ec1c <.LVL445>:
            if (s->lookahead <= MAX_MATCH && flush == Z_NO_FLUSH) {
  40ec1c:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40ec1e:	b91f      	cbnz	r7, 40ec28 <.LVL445+0xc>
  40ec20:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
  40ec24:	f240 8117 	bls.w	40ee56 <.LBE66>
            if (s->lookahead == 0) break; /* flush the current block */
  40ec28:	2b00      	cmp	r3, #0
  40ec2a:	f040 80b2 	bne.w	40ed92 <.LVL473+0xa>
    s->insert = 0;
  40ec2e:	2200      	movs	r2, #0
  40ec30:	f241 63b4 	movw	r3, #5812	; 0x16b4
  40ec34:	50e2      	str	r2, [r4, r3]
    if (flush == Z_FINISH) {
  40ec36:	2f04      	cmp	r7, #4
  40ec38:	f000 8119 	beq.w	40ee6e <.LVL500>
    if (s->last_lit)
  40ec3c:	f504 53b5 	add.w	r3, r4, #5792	; 0x16a0
  40ec40:	681b      	ldr	r3, [r3, #0]
  40ec42:	2b00      	cmp	r3, #0
  40ec44:	f000 8131 	beq.w	40eeaa <.LBE68>
        FLUSH_BLOCK(s, 0);
  40ec48:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  40ec4a:	2a00      	cmp	r2, #0
  40ec4c:	f2c0 812b 	blt.w	40eea6 <.LBB68+0x4>
  40ec50:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  40ec52:	4411      	add	r1, r2
  40ec54:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  40ec56:	2300      	movs	r3, #0
  40ec58:	1a82      	subs	r2, r0, r2
  40ec5a:	4620      	mov	r0, r4
  40ec5c:	f003 f9d8 	bl	412010 <_tr_flush_block>

0040ec60 <.LVL446>:
  40ec60:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40ec62:	65e3      	str	r3, [r4, #92]	; 0x5c
  40ec64:	6820      	ldr	r0, [r4, #0]
  40ec66:	f011 fec3 	bl	4209f0 <.LFE41>

0040ec6a <.LVL447>:
  40ec6a:	6823      	ldr	r3, [r4, #0]
  40ec6c:	6918      	ldr	r0, [r3, #16]

0040ec6e <.LBB65>:
        if (bflush) FLUSH_BLOCK(s, 0);
  40ec6e:	3000      	adds	r0, #0
  40ec70:	bf18      	it	ne
  40ec72:	2001      	movne	r0, #1
  40ec74:	e206      	b.n	40f084 <.LVL533>

0040ec76 <.LBB66>:
            if (prev == *++scan && prev == *++scan && prev == *++scan) {
  40ec76:	f890 c002 	ldrb.w	ip, [r0, #2]
  40ec7a:	4561      	cmp	r1, ip
  40ec7c:	f040 809c 	bne.w	40edb8 <.LBB61>

0040ec80 <.LVL449>:
  40ec80:	f890 c003 	ldrb.w	ip, [r0, #3]
  40ec84:	4561      	cmp	r1, ip
  40ec86:	f040 8097 	bne.w	40edb8 <.LBB61>
  40ec8a:	3003      	adds	r0, #3

0040ec8c <.LVL450>:
                strend = s->window + s->strstart + MAX_MATCH;
  40ec8c:	f503 7381 	add.w	r3, r3, #258	; 0x102
  40ec90:	4473      	add	r3, lr

0040ec92 <.LVL451>:
                } while (prev == *++scan && prev == *++scan &&
  40ec92:	f890 e001 	ldrb.w	lr, [r0, #1]
                         scan < strend);
  40ec96:	4571      	cmp	r1, lr
  40ec98:	d134      	bne.n	40ed04 <.LVL460>

0040ec9a <.LVL452>:
                } while (prev == *++scan && prev == *++scan &&
  40ec9a:	f890 e002 	ldrb.w	lr, [r0, #2]
  40ec9e:	4571      	cmp	r1, lr
  40eca0:	f040 80b5 	bne.w	40ee0e <.LVL482>

0040eca4 <.LVL453>:
                         prev == *++scan && prev == *++scan &&
  40eca4:	f890 e003 	ldrb.w	lr, [r0, #3]
                } while (prev == *++scan && prev == *++scan &&
  40eca8:	4571      	cmp	r1, lr
  40ecaa:	f040 80b2 	bne.w	40ee12 <.LVL484>

0040ecae <.LVL454>:
                         prev == *++scan && prev == *++scan &&
  40ecae:	f890 e004 	ldrb.w	lr, [r0, #4]
  40ecb2:	4571      	cmp	r1, lr
  40ecb4:	f040 80af 	bne.w	40ee16 <.LVL486>

0040ecb8 <.LVL455>:
                         prev == *++scan && prev == *++scan &&
  40ecb8:	f890 e005 	ldrb.w	lr, [r0, #5]
                         prev == *++scan && prev == *++scan &&
  40ecbc:	4571      	cmp	r1, lr
  40ecbe:	f040 80ac 	bne.w	40ee1a <.LVL488>

0040ecc2 <.LVL456>:
                         prev == *++scan && prev == *++scan &&
  40ecc2:	f890 e006 	ldrb.w	lr, [r0, #6]
  40ecc6:	4571      	cmp	r1, lr
  40ecc8:	f040 80a9 	bne.w	40ee1e <.LVL490>

0040eccc <.LVL457>:
                         prev == *++scan && prev == *++scan &&
  40eccc:	f890 e007 	ldrb.w	lr, [r0, #7]
                         prev == *++scan && prev == *++scan &&
  40ecd0:	4571      	cmp	r1, lr
  40ecd2:	f040 80a6 	bne.w	40ee22 <.LVL492>

0040ecd6 <.LVL458>:
                         prev == *++scan && prev == *++scan &&
  40ecd6:	f810 ef08 	ldrb.w	lr, [r0, #8]!

0040ecda <.LVL459>:
  40ecda:	458e      	cmp	lr, r1
  40ecdc:	bf14      	ite	ne
  40ecde:	f04f 0c00 	movne.w	ip, #0
  40ece2:	f04f 0c01 	moveq.w	ip, #1
  40ece6:	4298      	cmp	r0, r3
  40ece8:	bf28      	it	cs
  40ecea:	f04f 0c00 	movcs.w	ip, #0
  40ecee:	f1bc 0f00 	cmp.w	ip, #0
  40ecf2:	d1ce      	bne.n	40ec92 <.LVL451>
  40ecf4:	e007      	b.n	40ed06 <.LVL461>
  40ecf6:	bf00      	nop
  40ecf8:	00421ac0 	.word	0x00421ac0
  40ecfc:	0041b938 	.word	0x0041b938
  40ed00:	004189ec 	.word	0x004189ec

0040ed04 <.LVL460>:
                         scan < strend);
  40ed04:	3001      	adds	r0, #1

0040ed06 <.LVL461>:
                s->match_length = MAX_MATCH - (int)(strend - scan);
  40ed06:	1a1b      	subs	r3, r3, r0

0040ed08 <.LVL462>:
  40ed08:	f5c3 7381 	rsb	r3, r3, #258	; 0x102
  40ed0c:	6623      	str	r3, [r4, #96]	; 0x60
                if (s->match_length > s->lookahead)
  40ed0e:	429a      	cmp	r2, r3
  40ed10:	f080 8089 	bcs.w	40ee26 <.LVL494>
                    s->match_length = s->lookahead;
  40ed14:	6622      	str	r2, [r4, #96]	; 0x60
        if (s->match_length >= MIN_MATCH) {
  40ed16:	4613      	mov	r3, r2

0040ed18 <.LBB60>:
            _tr_tally_dist(s, 1, s->match_length - MIN_MATCH, bflush);
  40ed18:	3b03      	subs	r3, #3
  40ed1a:	b2db      	uxtb	r3, r3

0040ed1c <.LVL463>:
  40ed1c:	f504 52b5 	add.w	r2, r4, #5792	; 0x16a0
  40ed20:	6810      	ldr	r0, [r2, #0]

0040ed22 <.LVL464>:
  40ed22:	6831      	ldr	r1, [r6, #0]

0040ed24 <.LVL465>:
  40ed24:	f04f 0e01 	mov.w	lr, #1
  40ed28:	f821 e010 	strh.w	lr, [r1, r0, lsl #1]

0040ed2c <.LVL466>:
  40ed2c:	f241 6198 	movw	r1, #5784	; 0x1698
  40ed30:	5860      	ldr	r0, [r4, r1]
  40ed32:	6811      	ldr	r1, [r2, #0]
  40ed34:	448e      	add	lr, r1
  40ed36:	f8c2 e000 	str.w	lr, [r2]
  40ed3a:	5443      	strb	r3, [r0, r1]

0040ed3c <.LVL467>:
  40ed3c:	f819 3003 	ldrb.w	r3, [r9, r3]

0040ed40 <.LVL468>:
  40ed40:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  40ed44:	f8b3 1498 	ldrh.w	r1, [r3, #1176]	; 0x498

0040ed48 <.LVL469>:
  40ed48:	3101      	adds	r1, #1
  40ed4a:	f8a3 1498 	strh.w	r1, [r3, #1176]	; 0x498

0040ed4e <.LVL470>:
  40ed4e:	f898 3000 	ldrb.w	r3, [r8]
  40ed52:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  40ed56:	f8b3 1988 	ldrh.w	r1, [r3, #2440]	; 0x988
  40ed5a:	3101      	adds	r1, #1
  40ed5c:	f8a3 1988 	strh.w	r1, [r3, #2440]	; 0x988
  40ed60:	f241 639c 	movw	r3, #5788	; 0x169c
  40ed64:	58e3      	ldr	r3, [r4, r3]
  40ed66:	3b01      	subs	r3, #1
  40ed68:	6812      	ldr	r2, [r2, #0]
  40ed6a:	4293      	cmp	r3, r2
  40ed6c:	bf14      	ite	ne
  40ed6e:	2300      	movne	r3, #0
  40ed70:	2301      	moveq	r3, #1

0040ed72 <.LBE60>:
            s->lookahead -= s->match_length;
  40ed72:	6e20      	ldr	r0, [r4, #96]	; 0x60
  40ed74:	6f61      	ldr	r1, [r4, #116]	; 0x74
  40ed76:	1a09      	subs	r1, r1, r0
  40ed78:	6761      	str	r1, [r4, #116]	; 0x74
            s->strstart += s->match_length;
  40ed7a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  40ed7c:	4402      	add	r2, r0
  40ed7e:	66e2      	str	r2, [r4, #108]	; 0x6c
            s->match_length = 0;
  40ed80:	2200      	movs	r2, #0
  40ed82:	6622      	str	r2, [r4, #96]	; 0x60

0040ed84 <.LVL472>:
        if (bflush) FLUSH_BLOCK(s, 0);
  40ed84:	2b00      	cmp	r3, #0
  40ed86:	d152      	bne.n	40ee2e <.LVL495>

0040ed88 <.LVL473>:
        if (s->lookahead <= MAX_MATCH) {
  40ed88:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40ed8a:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
  40ed8e:	f67f af42 	bls.w	40ec16 <.LBE59>
        s->match_length = 0;
  40ed92:	2300      	movs	r3, #0
  40ed94:	6623      	str	r3, [r4, #96]	; 0x60
        if (s->lookahead >= MIN_MATCH && s->strstart > 0) {
  40ed96:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40ed98:	2a02      	cmp	r2, #2
  40ed9a:	d90d      	bls.n	40edb8 <.LBB61>
  40ed9c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40ed9e:	b15b      	cbz	r3, 40edb8 <.LBB61>
            scan = s->window + s->strstart - 1;
  40eda0:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
  40eda4:	1e59      	subs	r1, r3, #1
  40eda6:	eb0e 0001 	add.w	r0, lr, r1

0040edaa <.LVL474>:
            prev = *scan;
  40edaa:	f81e 1001 	ldrb.w	r1, [lr, r1]

0040edae <.LVL475>:
            if (prev == *++scan && prev == *++scan && prev == *++scan) {
  40edae:	f890 c001 	ldrb.w	ip, [r0, #1]
  40edb2:	4561      	cmp	r1, ip
  40edb4:	f43f af5f 	beq.w	40ec76 <.LBB66>

0040edb8 <.LBB61>:
            _tr_tally_lit (s, s->window[s->strstart], bflush);
  40edb8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40edba:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40edbc:	5cd3      	ldrb	r3, [r2, r3]

0040edbe <.LVL477>:
  40edbe:	f504 51b5 	add.w	r1, r4, #5792	; 0x16a0
  40edc2:	6808      	ldr	r0, [r1, #0]
  40edc4:	6832      	ldr	r2, [r6, #0]
  40edc6:	f04f 0e00 	mov.w	lr, #0
  40edca:	f822 e010 	strh.w	lr, [r2, r0, lsl #1]
  40edce:	f241 6298 	movw	r2, #5784	; 0x1698
  40edd2:	58a0      	ldr	r0, [r4, r2]
  40edd4:	680a      	ldr	r2, [r1, #0]
  40edd6:	f102 0e01 	add.w	lr, r2, #1
  40edda:	f8c1 e000 	str.w	lr, [r1]
  40edde:	5483      	strb	r3, [r0, r2]
  40ede0:	eb04 0383 	add.w	r3, r4, r3, lsl #2

0040ede4 <.LVL478>:
  40ede4:	f8b3 2094 	ldrh.w	r2, [r3, #148]	; 0x94

0040ede8 <.LVL479>:
  40ede8:	3201      	adds	r2, #1
  40edea:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

0040edee <.LVL480>:
  40edee:	f241 639c 	movw	r3, #5788	; 0x169c
  40edf2:	58e3      	ldr	r3, [r4, r3]
  40edf4:	3b01      	subs	r3, #1
  40edf6:	680a      	ldr	r2, [r1, #0]
  40edf8:	4293      	cmp	r3, r2
  40edfa:	bf14      	ite	ne
  40edfc:	2300      	movne	r3, #0
  40edfe:	2301      	moveq	r3, #1

0040ee00 <.LBE61>:
            s->lookahead--;
  40ee00:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40ee02:	3a01      	subs	r2, #1
  40ee04:	6762      	str	r2, [r4, #116]	; 0x74
            s->strstart++;
  40ee06:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  40ee08:	3201      	adds	r2, #1
  40ee0a:	66e2      	str	r2, [r4, #108]	; 0x6c
  40ee0c:	e7ba      	b.n	40ed84 <.LVL472>

0040ee0e <.LVL482>:
                } while (prev == *++scan && prev == *++scan &&
  40ee0e:	3002      	adds	r0, #2

0040ee10 <.LVL483>:
  40ee10:	e779      	b.n	40ed06 <.LVL461>

0040ee12 <.LVL484>:
  40ee12:	3003      	adds	r0, #3

0040ee14 <.LVL485>:
  40ee14:	e777      	b.n	40ed06 <.LVL461>

0040ee16 <.LVL486>:
                         prev == *++scan && prev == *++scan &&
  40ee16:	3004      	adds	r0, #4

0040ee18 <.LVL487>:
  40ee18:	e775      	b.n	40ed06 <.LVL461>

0040ee1a <.LVL488>:
  40ee1a:	3005      	adds	r0, #5

0040ee1c <.LVL489>:
  40ee1c:	e773      	b.n	40ed06 <.LVL461>

0040ee1e <.LVL490>:
                         prev == *++scan && prev == *++scan &&
  40ee1e:	3006      	adds	r0, #6

0040ee20 <.LVL491>:
  40ee20:	e771      	b.n	40ed06 <.LVL461>

0040ee22 <.LVL492>:
  40ee22:	3007      	adds	r0, #7

0040ee24 <.LVL493>:
  40ee24:	e76f      	b.n	40ed06 <.LVL461>

0040ee26 <.LVL494>:
        if (s->match_length >= MIN_MATCH) {
  40ee26:	2b02      	cmp	r3, #2
  40ee28:	f63f af76 	bhi.w	40ed18 <.LBB60>
  40ee2c:	e7c4      	b.n	40edb8 <.LBB61>

0040ee2e <.LVL495>:
        if (bflush) FLUSH_BLOCK(s, 0);
  40ee2e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  40ee30:	2a00      	cmp	r2, #0
  40ee32:	db1a      	blt.n	40ee6a <.LBB67>
  40ee34:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  40ee36:	4411      	add	r1, r2
  40ee38:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  40ee3a:	2300      	movs	r3, #0

0040ee3c <.LVL496>:
  40ee3c:	1a82      	subs	r2, r0, r2
  40ee3e:	4620      	mov	r0, r4
  40ee40:	f003 f8e6 	bl	412010 <_tr_flush_block>

0040ee44 <.LVL497>:
  40ee44:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40ee46:	65e3      	str	r3, [r4, #92]	; 0x5c
  40ee48:	6820      	ldr	r0, [r4, #0]
  40ee4a:	f011 fdd1 	bl	4209f0 <.LFE41>

0040ee4e <.LVL498>:
  40ee4e:	6823      	ldr	r3, [r4, #0]
  40ee50:	691b      	ldr	r3, [r3, #16]
  40ee52:	2b00      	cmp	r3, #0
  40ee54:	d198      	bne.n	40ed88 <.LVL473>

0040ee56 <.LBE66>:
            if (strm->avail_out == 0) {
  40ee56:	692b      	ldr	r3, [r5, #16]
  40ee58:	2b00      	cmp	r3, #0
  40ee5a:	f040 80bc 	bne.w	40efd6 <.LBB71>
                s->last_flush = -1; /* avoid BUF_ERROR next call, see above */
  40ee5e:	f04f 33ff 	mov.w	r3, #4294967295
  40ee62:	62a3      	str	r3, [r4, #40]	; 0x28
            return Z_OK;
  40ee64:	2000      	movs	r0, #0
  40ee66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040ee6a <.LBB67>:
        if (bflush) FLUSH_BLOCK(s, 0);
  40ee6a:	2100      	movs	r1, #0
  40ee6c:	e7e4      	b.n	40ee38 <.LVL495+0xa>

0040ee6e <.LVL500>:
        FLUSH_BLOCK(s, 1);
  40ee6e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  40ee70:	2a00      	cmp	r2, #0
  40ee72:	db16      	blt.n	40eea2 <.LBB68>
  40ee74:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  40ee76:	4411      	add	r1, r2
  40ee78:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  40ee7a:	2301      	movs	r3, #1
  40ee7c:	1a82      	subs	r2, r0, r2
  40ee7e:	4620      	mov	r0, r4
  40ee80:	f003 f8c6 	bl	412010 <_tr_flush_block>

0040ee84 <.LVL501>:
  40ee84:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40ee86:	65e3      	str	r3, [r4, #92]	; 0x5c
  40ee88:	6820      	ldr	r0, [r4, #0]
  40ee8a:	f011 fdb1 	bl	4209f0 <.LFE41>

0040ee8e <.LVL502>:
  40ee8e:	6823      	ldr	r3, [r4, #0]
  40ee90:	691b      	ldr	r3, [r3, #16]
        return finish_done;
  40ee92:	2b00      	cmp	r3, #0
  40ee94:	bf0c      	ite	eq
  40ee96:	2002      	moveq	r0, #2
  40ee98:	2003      	movne	r0, #3

0040ee9a <.LBE67>:
            s->status = FINISH_STATE;
  40ee9a:	f240 239a 	movw	r3, #666	; 0x29a
  40ee9e:	6063      	str	r3, [r4, #4]
  40eea0:	e0f5      	b.n	40f08e <.LVL533+0xa>

0040eea2 <.LBB68>:
        FLUSH_BLOCK(s, 1);
  40eea2:	2100      	movs	r1, #0
  40eea4:	e7e8      	b.n	40ee78 <.LVL500+0xa>
        FLUSH_BLOCK(s, 0);
  40eea6:	2100      	movs	r1, #0
  40eea8:	e6d4      	b.n	40ec54 <.LVL445+0x38>

0040eeaa <.LBE68>:
            if (flush == Z_PARTIAL_FLUSH) {
  40eeaa:	2f01      	cmp	r7, #1
  40eeac:	d016      	beq.n	40eedc <.LVL506+0x14>
            } else if (flush != Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */
  40eeae:	2f05      	cmp	r7, #5
  40eeb0:	d017      	beq.n	40eee2 <.LVL508>
                _tr_stored_block(s, (char*)0, 0L, 0);
  40eeb2:	2300      	movs	r3, #0
  40eeb4:	461a      	mov	r2, r3
  40eeb6:	4619      	mov	r1, r3
  40eeb8:	4620      	mov	r0, r4
  40eeba:	f00e f965 	bl	41d188 <_tr_stored_block>

0040eebe <.LVL505>:
                if (flush == Z_FULL_FLUSH) {
  40eebe:	2f03      	cmp	r7, #3
  40eec0:	d018      	beq.n	40eef4 <.LBB70>
            flush_pending(strm);
  40eec2:	4628      	mov	r0, r5
  40eec4:	f011 fd94 	bl	4209f0 <.LFE41>

0040eec8 <.LVL506>:
            if (strm->avail_out == 0) {
  40eec8:	692b      	ldr	r3, [r5, #16]
  40eeca:	2b00      	cmp	r3, #0
  40eecc:	f040 80e6 	bne.w	40f09c <.LBE74>
              s->last_flush = -1; /* avoid BUF_ERROR at next call, see above */
  40eed0:	f04f 33ff 	mov.w	r3, #4294967295
  40eed4:	62a3      	str	r3, [r4, #40]	; 0x28
              return Z_OK;
  40eed6:	2000      	movs	r0, #0
  40eed8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                _tr_align(s);
  40eedc:	4620      	mov	r0, r4
  40eede:	f00e ff52 	bl	41dd86 <.LFE27>

0040eee2 <.LVL508>:
            flush_pending(strm);
  40eee2:	4628      	mov	r0, r5
  40eee4:	f011 fd84 	bl	4209f0 <.LFE41>

0040eee8 <.LVL509>:
            if (strm->avail_out == 0) {
  40eee8:	692b      	ldr	r3, [r5, #16]
  40eeea:	2b00      	cmp	r3, #0
  40eeec:	d0f0      	beq.n	40eed0 <.LVL506+0x8>

0040eeee <.LBE69>:
    if (flush != Z_FINISH) return Z_OK;
  40eeee:	2000      	movs	r0, #0
  40eef0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040eef4 <.LBB70>:
                    CLEAR_HASH(s);             /* forget history */
  40eef4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  40eef8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
  40eefa:	441a      	add	r2, r3
  40eefc:	6c60      	ldr	r0, [r4, #68]	; 0x44
  40eefe:	2100      	movs	r1, #0
  40ef00:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
  40ef04:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
  40ef06:	441a      	add	r2, r3
  40ef08:	0052      	lsls	r2, r2, #1
  40ef0a:	6c60      	ldr	r0, [r4, #68]	; 0x44
  40ef0c:	f00f fb04 	bl	41e518 <.LFE14>

0040ef10 <.LVL511>:
                    if (s->lookahead == 0) {
  40ef10:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40ef12:	2b00      	cmp	r3, #0
  40ef14:	d1e5      	bne.n	40eee2 <.LVL508>
                        s->strstart = 0;
  40ef16:	66e3      	str	r3, [r4, #108]	; 0x6c
                        s->block_start = 0L;
  40ef18:	65e3      	str	r3, [r4, #92]	; 0x5c
                        s->insert = 0;
  40ef1a:	f241 62b4 	movw	r2, #5812	; 0x16b4
  40ef1e:	50a3      	str	r3, [r4, r2]
  40ef20:	e7df      	b.n	40eee2 <.LVL508>

0040ef22 <.LBE70>:
    if (s->wrap <= 0) return Z_STREAM_END;
  40ef22:	69a3      	ldr	r3, [r4, #24]
  40ef24:	2b00      	cmp	r3, #0
  40ef26:	dd59      	ble.n	40efdc <.LBE71>
    if (s->wrap == 2) {
  40ef28:	2b02      	cmp	r3, #2
  40ef2a:	d015      	beq.n	40ef58 <.LVL514+0x16>
        putShortMSB(s, (uInt)(strm->adler >> 16));
  40ef2c:	8e69      	ldrh	r1, [r5, #50]	; 0x32
  40ef2e:	4620      	mov	r0, r4
  40ef30:	f012 ff3f 	bl	421db2 <.LFE34>

0040ef34 <.LVL512>:
        putShortMSB(s, (uInt)(strm->adler & 0xffff));
  40ef34:	8e29      	ldrh	r1, [r5, #48]	; 0x30
  40ef36:	4620      	mov	r0, r4
  40ef38:	f012 ff3b 	bl	421db2 <.LFE34>

0040ef3c <.LVL513>:
    flush_pending(strm);
  40ef3c:	4628      	mov	r0, r5
  40ef3e:	f011 fd57 	bl	4209f0 <.LFE41>

0040ef42 <.LVL514>:
    if (s->wrap > 0) s->wrap = -s->wrap; /* write the trailer only once! */
  40ef42:	69a3      	ldr	r3, [r4, #24]
  40ef44:	2b00      	cmp	r3, #0
  40ef46:	dd01      	ble.n	40ef4c <.LVL514+0xa>
  40ef48:	425b      	negs	r3, r3
  40ef4a:	61a3      	str	r3, [r4, #24]
    return s->pending != 0 ? Z_OK : Z_STREAM_END;
  40ef4c:	6960      	ldr	r0, [r4, #20]
  40ef4e:	fab0 f080 	clz	r0, r0
  40ef52:	0940      	lsrs	r0, r0, #5
  40ef54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        put_byte(s, (Byte)(strm->adler & 0xff));
  40ef58:	68a2      	ldr	r2, [r4, #8]
  40ef5a:	6963      	ldr	r3, [r4, #20]
  40ef5c:	1c59      	adds	r1, r3, #1
  40ef5e:	6161      	str	r1, [r4, #20]
  40ef60:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40ef62:	54d1      	strb	r1, [r2, r3]
        put_byte(s, (Byte)((strm->adler >> 8) & 0xff));
  40ef64:	68a1      	ldr	r1, [r4, #8]
  40ef66:	6962      	ldr	r2, [r4, #20]
  40ef68:	1c53      	adds	r3, r2, #1
  40ef6a:	6163      	str	r3, [r4, #20]
  40ef6c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40ef6e:	0a1b      	lsrs	r3, r3, #8
  40ef70:	548b      	strb	r3, [r1, r2]
        put_byte(s, (Byte)((strm->adler >> 16) & 0xff));
  40ef72:	68a2      	ldr	r2, [r4, #8]
  40ef74:	6963      	ldr	r3, [r4, #20]
  40ef76:	1c59      	adds	r1, r3, #1
  40ef78:	6161      	str	r1, [r4, #20]
  40ef7a:	8e69      	ldrh	r1, [r5, #50]	; 0x32
  40ef7c:	54d1      	strb	r1, [r2, r3]
        put_byte(s, (Byte)((strm->adler >> 24) & 0xff));
  40ef7e:	68a2      	ldr	r2, [r4, #8]
  40ef80:	6963      	ldr	r3, [r4, #20]
  40ef82:	1c59      	adds	r1, r3, #1
  40ef84:	6161      	str	r1, [r4, #20]
  40ef86:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
  40ef8a:	54d1      	strb	r1, [r2, r3]
        put_byte(s, (Byte)(strm->total_in & 0xff));
  40ef8c:	68a2      	ldr	r2, [r4, #8]
  40ef8e:	6963      	ldr	r3, [r4, #20]
  40ef90:	1c59      	adds	r1, r3, #1
  40ef92:	6161      	str	r1, [r4, #20]
  40ef94:	68a9      	ldr	r1, [r5, #8]
  40ef96:	54d1      	strb	r1, [r2, r3]
        put_byte(s, (Byte)((strm->total_in >> 8) & 0xff));
  40ef98:	68a1      	ldr	r1, [r4, #8]
  40ef9a:	6962      	ldr	r2, [r4, #20]
  40ef9c:	1c53      	adds	r3, r2, #1
  40ef9e:	6163      	str	r3, [r4, #20]
  40efa0:	68ab      	ldr	r3, [r5, #8]
  40efa2:	0a1b      	lsrs	r3, r3, #8
  40efa4:	548b      	strb	r3, [r1, r2]
        put_byte(s, (Byte)((strm->total_in >> 16) & 0xff));
  40efa6:	68a2      	ldr	r2, [r4, #8]
  40efa8:	6963      	ldr	r3, [r4, #20]
  40efaa:	1c59      	adds	r1, r3, #1
  40efac:	6161      	str	r1, [r4, #20]
  40efae:	8969      	ldrh	r1, [r5, #10]
  40efb0:	54d1      	strb	r1, [r2, r3]
        put_byte(s, (Byte)((strm->total_in >> 24) & 0xff));
  40efb2:	68a2      	ldr	r2, [r4, #8]
  40efb4:	6963      	ldr	r3, [r4, #20]
  40efb6:	1c59      	adds	r1, r3, #1
  40efb8:	6161      	str	r1, [r4, #20]
  40efba:	7ae9      	ldrb	r1, [r5, #11]
  40efbc:	54d1      	strb	r1, [r2, r3]
  40efbe:	e7bd      	b.n	40ef3c <.LVL513>

0040efc0 <.LCFI25>:
        return Z_STREAM_ERROR;
  40efc0:	f06f 0001 	mvn.w	r0, #1

0040efc4 <.LVL517>:
  40efc4:	4770      	bx	lr

0040efc6 <.LCFI26>:
  40efc6:	f06f 0001 	mvn.w	r0, #1

0040efca <.LVL519>:
  40efca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040efce <.LVL520>:
  40efce:	f06f 0001 	mvn.w	r0, #1

0040efd2 <.LVL521>:
  40efd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040efd6 <.LBB71>:
            return Z_OK;
  40efd6:	2000      	movs	r0, #0
  40efd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040efdc <.LBE71>:
    if (s->wrap <= 0) return Z_STREAM_END;
  40efdc:	2001      	movs	r0, #1
  40efde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040efe2 <.LBB72>:
            if (s->gzhead->hcrc && s->pending > beg)
  40efe2:	69e3      	ldr	r3, [r4, #28]
  40efe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40efe6:	2b00      	cmp	r3, #0
  40efe8:	f47f acfe 	bne.w	40e9e8 <.LVL405>

0040efec <.LVL525>:
                s->gzindex = 0;
  40efec:	2300      	movs	r3, #0
  40efee:	6223      	str	r3, [r4, #32]
                s->status = COMMENT_STATE;
  40eff0:	235b      	movs	r3, #91	; 0x5b
  40eff2:	6063      	str	r3, [r4, #4]

0040eff4 <.LBE72>:
        if (s->gzhead->comment != Z_NULL) {
  40eff4:	69e3      	ldr	r3, [r4, #28]
  40eff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40eff8:	2b00      	cmp	r3, #0
  40effa:	f43f ad38 	beq.w	40ea6e <.LBE49>

0040effe <.LBB73>:
            uInt beg = s->pending;  /* start of bytes to update crc */
  40effe:	6960      	ldr	r0, [r4, #20]

0040f000 <.LVL527>:
  40f000:	e517      	b.n	40ea32 <.LVL413>

0040f002 <.LVL528>:
            if (s->gzhead->hcrc && s->pending > beg)
  40f002:	69e3      	ldr	r3, [r4, #28]
  40f004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40f006:	2b00      	cmp	r3, #0
  40f008:	f47f ad25 	bne.w	40ea56 <.LVL416>

0040f00c <.LVL529>:
                s->status = HCRC_STATE;
  40f00c:	2367      	movs	r3, #103	; 0x67
  40f00e:	6063      	str	r3, [r4, #4]

0040f010 <.LBE73>:
        if (s->gzhead->hcrc) {
  40f010:	69e3      	ldr	r3, [r4, #28]
  40f012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40f014:	2b00      	cmp	r3, #0
  40f016:	f43f ad37 	beq.w	40ea88 <.LVL420+0xe>
            if (s->pending + 2 > s->pending_buf_size)
  40f01a:	6963      	ldr	r3, [r4, #20]
  40f01c:	1c99      	adds	r1, r3, #2
  40f01e:	68e2      	ldr	r2, [r4, #12]
  40f020:	4291      	cmp	r1, r2
  40f022:	f63f ad27 	bhi.w	40ea74 <.LBE49+0x6>
                put_byte(s, (Byte)(strm->adler & 0xff));
  40f026:	68a2      	ldr	r2, [r4, #8]
  40f028:	1c59      	adds	r1, r3, #1
  40f02a:	6161      	str	r1, [r4, #20]
  40f02c:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40f02e:	54d1      	strb	r1, [r2, r3]
                put_byte(s, (Byte)((strm->adler >> 8) & 0xff));
  40f030:	68a1      	ldr	r1, [r4, #8]
  40f032:	6962      	ldr	r2, [r4, #20]
  40f034:	1c53      	adds	r3, r2, #1
  40f036:	6163      	str	r3, [r4, #20]
  40f038:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40f03a:	0a1b      	lsrs	r3, r3, #8
  40f03c:	548b      	strb	r3, [r1, r2]
                strm->adler = crc32(0L, Z_NULL, 0);
  40f03e:	2200      	movs	r2, #0
  40f040:	4611      	mov	r1, r2
  40f042:	4610      	mov	r0, r2
  40f044:	f008 fb52 	bl	4176ec <.LFE21>

0040f048 <.LVL531>:
  40f048:	6328      	str	r0, [r5, #48]	; 0x30
                s->status = BUSY_STATE;
  40f04a:	2371      	movs	r3, #113	; 0x71
  40f04c:	6063      	str	r3, [r4, #4]
  40f04e:	f7ff bb08 	b.w	40e662 <.LVL355+0x20>
    if (s->status == FINISH_STATE && strm->avail_in != 0) {
  40f052:	6862      	ldr	r2, [r4, #4]
  40f054:	f240 239a 	movw	r3, #666	; 0x29a
  40f058:	429a      	cmp	r2, r3
  40f05a:	f43f ad40 	beq.w	40eade <.LVL424+0xe>

0040f05e <.LBB74>:
        bstate = s->strategy == Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :
  40f05e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
  40f062:	2b02      	cmp	r3, #2
  40f064:	f43f ad42 	beq.w	40eaec <.LBB51>
  40f068:	2b03      	cmp	r3, #3
  40f06a:	f43f adcc 	beq.w	40ec06 <.LBB56>
                        (*(configuration_table[s->level].func))(s, flush));
  40f06e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
  40f072:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40f076:	4a0c      	ldr	r2, [pc, #48]	; (40f0a8 <.LVL535>)
  40f078:	eb02 0383 	add.w	r3, r2, r3, lsl #2
        bstate = s->strategy == Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :
  40f07c:	689b      	ldr	r3, [r3, #8]
  40f07e:	4639      	mov	r1, r7
  40f080:	4620      	mov	r0, r4
  40f082:	4798      	blx	r3

0040f084 <.LVL533>:
        if (bstate == finish_started || bstate == finish_done) {
  40f084:	1e83      	subs	r3, r0, #2
  40f086:	b2db      	uxtb	r3, r3
  40f088:	2b01      	cmp	r3, #1
  40f08a:	f67f af06 	bls.w	40ee9a <.LBE67>
        if (bstate == need_more || bstate == finish_started) {
  40f08e:	f010 0ffd 	tst.w	r0, #253	; 0xfd
  40f092:	f43f aee0 	beq.w	40ee56 <.LBE66>
        if (bstate == block_done) {
  40f096:	2801      	cmp	r0, #1
  40f098:	f43f af07 	beq.w	40eeaa <.LBE68>

0040f09c <.LBE74>:
    if (flush != Z_FINISH) return Z_OK;
  40f09c:	2f04      	cmp	r7, #4
  40f09e:	f43f af40 	beq.w	40ef22 <.LBE70>
  40f0a2:	2000      	movs	r0, #0
  40f0a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040f0a8 <.LVL535>:
  40f0a8:	0041f704 	.word	0x0041f704

Disassembly of section .rodata.Spbox%47:

0040f0ac <Spbox>:
  40f0ac:	01010400 00000000 00010000 01010404     ................
  40f0bc:	01010004 00010404 00000004 00010000     ................
  40f0cc:	00000400 01010400 01010404 00000400     ................
  40f0dc:	01000404 01010004 01000000 00000004     ................
  40f0ec:	00000404 01000400 01000400 00010400     ................
  40f0fc:	00010400 01010000 01010000 01000404     ................
  40f10c:	00010004 01000004 01000004 00010004     ................
  40f11c:	00000000 00000404 00010404 01000000     ................
  40f12c:	00010000 01010404 00000004 01010000     ................
  40f13c:	01010400 01000000 01000000 00000400     ................
  40f14c:	01010004 00010000 00010400 01000004     ................
  40f15c:	00000400 00000004 01000404 00010404     ................
  40f16c:	01010404 00010004 01010000 01000404     ................
  40f17c:	01000004 00000404 00010404 01010400     ................
  40f18c:	00000404 01000400 01000400 00000000     ................
  40f19c:	00010004 00010400 00000000 01010004     ................
  40f1ac:	80108020 80008000 00008000 00108020      ........... ...
  40f1bc:	00100000 00000020 80100020 80008020     .... ... ... ...
  40f1cc:	80000020 80108020 80108000 80000000      ... ...........
  40f1dc:	80008000 00100000 00000020 80100020     ........ ... ...
  40f1ec:	00108000 00100020 80008020 00000000     .... ... .......
  40f1fc:	80000000 00008000 00108020 80100000     ........ .......
  40f20c:	00100020 80000020 00000000 00108000      ... ...........
  40f21c:	00008020 80108000 80100000 00008020      ........... ...
  40f22c:	00000000 00108020 80100020 00100000     .... ... .......
  40f23c:	80008020 80100000 80108000 00008000      ...............
  40f24c:	80100000 80008000 00000020 80108020     ........ ... ...
  40f25c:	00108020 00000020 00008000 80000000      ... ...........
  40f26c:	00008020 80108000 00100000 80000020      ........... ...
  40f27c:	00100020 80008020 80000020 00100020      ... ... ... ...
  40f28c:	00108000 00000000 80008000 00008020     ............ ...
  40f29c:	80000000 80100020 80108020 00108000     .... ... .......
  40f2ac:	00000208 08020200 00000000 08020008     ................
  40f2bc:	08000200 00000000 00020208 08000200     ................
  40f2cc:	00020008 08000008 08000008 00020000     ................
  40f2dc:	08020208 00020008 08020000 00000208     ................
  40f2ec:	08000000 00000008 08020200 00000200     ................
  40f2fc:	00020200 08020000 08020008 00020208     ................
  40f30c:	08000208 00020200 00020000 08000208     ................
  40f31c:	00000008 08020208 00000200 08000000     ................
  40f32c:	08020200 08000000 00020008 00000208     ................
  40f33c:	00020000 08020200 08000200 00000000     ................
  40f34c:	00000200 00020008 08020208 08000200     ................
  40f35c:	08000008 00000200 00000000 08020008     ................
  40f36c:	08000208 00020000 08000000 08020208     ................
  40f37c:	00000008 00020208 00020200 08000008     ................
  40f38c:	08020000 08000208 00000208 08020000     ................
  40f39c:	00020208 00000008 08020008 00020200     ................
  40f3ac:	00802001 00002081 00002081 00000080     . ... ... ......
  40f3bc:	00802080 00800081 00800001 00002001     . ........... ..
  40f3cc:	00000000 00802000 00802000 00802081     ..... ... ... ..
  40f3dc:	00000081 00000000 00800080 00800001     ................
  40f3ec:	00000001 00002000 00800000 00802001     ..... ....... ..
  40f3fc:	00000080 00800000 00002001 00002080     ......... ... ..
  40f40c:	00800081 00000001 00002080 00800080     ......... ......
  40f41c:	00002000 00802080 00802081 00000081     . ... ... ......
  40f42c:	00800080 00800001 00802000 00802081     ......... ... ..
  40f43c:	00000081 00000000 00000000 00802000     ............. ..
  40f44c:	00002080 00800080 00800081 00000001     . ..............
  40f45c:	00802001 00002081 00002081 00000080     . ... ... ......
  40f46c:	00802081 00000081 00000001 00002000     . ........... ..
  40f47c:	00800001 00002001 00802080 00800081     ..... ... ......
  40f48c:	00002001 00002080 00800000 00802001     . ... ....... ..
  40f49c:	00000080 00800000 00002000 00802080     ......... ... ..
  40f4ac:	00000100 02080100 02080000 42000100     ...............B
  40f4bc:	00080000 00000100 40000000 02080000     ...........@....
  40f4cc:	40080100 00080000 02000100 40080100     ...@...........@
  40f4dc:	42000100 42080000 00080100 40000000     ...B...B.......@
  40f4ec:	02000000 40080000 40080000 00000000     .......@...@....
  40f4fc:	40000100 42080100 42080100 02000100     ...@...B...B....
  40f50c:	42080000 40000100 00000000 42000000     ...B...@.......B
  40f51c:	02080100 02000000 42000000 00080100     ...........B....
  40f52c:	00080000 42000100 00000100 02000000     .......B........
  40f53c:	40000000 02080000 42000100 40080100     ...@.......B...@
  40f54c:	02000100 40000000 42080000 02080100     .......@...B....
  40f55c:	40080100 00000100 02000000 42080000     ...@...........B
  40f56c:	42080100 00080100 42000000 42080100     ...B.......B...B
  40f57c:	02080000 00000000 40080000 42000000     ...........@...B
  40f58c:	00080100 02000100 40000100 00080000     ...........@....
  40f59c:	00000000 40080000 02080100 40000100     .......@.......@
  40f5ac:	20000010 20400000 00004000 20404010     ... ..@ .@...@@ 
  40f5bc:	20400000 00000010 20404010 00400000     ..@ .....@@ ..@.
  40f5cc:	20004000 00404010 00400000 20000010     .@. .@@...@.... 
  40f5dc:	00400010 20004000 20000000 00004010     ..@..@. ... .@..
  40f5ec:	00000000 00400010 20004010 00004000     ......@..@. .@..
  40f5fc:	00404000 20004010 00000010 20400010     .@@..@. ......@ 
  40f60c:	20400010 00000000 00404010 20404000     ..@ .....@@..@@ 
  40f61c:	00004010 00404000 20404000 20000000     .@...@@..@@ ... 
  40f62c:	20004000 00000010 20400010 00404000     .@. ......@ .@@.
  40f63c:	20404010 00400000 00004010 20000010     .@@ ..@..@..... 
  40f64c:	00400000 20004000 20000000 00004010     ..@..@. ... .@..
  40f65c:	20000010 20404010 00404000 20400000     ... .@@ .@@...@ 
  40f66c:	00404010 20404000 00000000 20400010     .@@..@@ ......@ 
  40f67c:	00000010 00004000 20400000 00404010     .....@....@ .@@.
  40f68c:	00004000 00400010 20004010 00000000     .@....@..@. ....
  40f69c:	20404000 20000000 00400010 20004010     .@@ ... ..@..@. 
  40f6ac:	00200000 04200002 04000802 00000000     .. ... .........
  40f6bc:	00000800 04000802 00200802 04200800     .......... ... .
  40f6cc:	04200802 00200000 00000000 04000002     .. ... .........
  40f6dc:	00000002 04000000 04200002 00000802     .......... .....
  40f6ec:	04000800 00200802 00200002 04000800     ...... ... .....
  40f6fc:	04000002 04200000 04200800 00200002     ...... ... ... .
  40f70c:	04200000 00000800 00000802 04200802     .. ........... .
  40f71c:	00200800 00000002 04000000 00200800     .. ........... .
  40f72c:	04000000 00200800 00200000 04000802     ...... ... .....
  40f73c:	04000802 04200002 04200002 00000002     ...... ... .....
  40f74c:	00200002 04000000 04000800 00200000     .. ........... .
  40f75c:	04200800 00000802 00200802 04200800     .. ....... ... .
  40f76c:	00000802 04000002 04200802 04200000     .......... ... .
  40f77c:	00200800 00000000 00000002 04200802     .. ........... .
  40f78c:	00000000 00200802 04200000 00000800     ...... ... .....
  40f79c:	04000002 04000800 00000800 00200002     .............. .
  40f7ac:	10001040 00001000 00040000 10041040     @...........@...
  40f7bc:	10000000 10001040 00000040 10000000     ....@...@.......
  40f7cc:	00040040 10040000 10041040 00041000     @.......@.......
  40f7dc:	10041000 00041040 00001000 00000040     ....@.......@...
  40f7ec:	10040000 10000040 10001000 00001040     ....@.......@...
  40f7fc:	00041000 00040040 10040040 10041000     ....@...@.......
  40f80c:	00001040 00000000 00000000 10040040     @...........@...
  40f81c:	10000040 10001000 00041040 00040000     @.......@.......
  40f82c:	00041040 00040000 10041000 00001000     @...............
  40f83c:	00000040 10040040 00001000 00041040     @...@.......@...
  40f84c:	10001000 00000040 10000040 10040000     ....@...@.......
  40f85c:	10040040 10000000 00040000 10001040     @...........@...
  40f86c:	00000000 10041040 00040040 10000040     ....@...@...@...
  40f87c:	10040000 10001000 10001040 00000000     ........@.......
  40f88c:	10041040 00041000 00041000 00001040     @...........@...
  40f89c:	00001040 00040040 10000000 10041000     @...@...........

Disassembly of section .rodata.lenfix.6567%48:

0040f8ac <lenfix.6567>:
  40f8ac:	00000760 00500800 00100800 00730814     `.....P.......s.
  40f8bc:	001f0712 00700800 00300800 00c00900     ......p...0.....
  40f8cc:	000a0710 00600800 00200800 00a00900     ......`... .....
  40f8dc:	00000800 00800800 00400800 00e00900     ..........@.....
  40f8ec:	00060710 00580800 00180800 00900900     ......X.........
  40f8fc:	003b0713 00780800 00380800 00d00900     ..;...x...8.....
  40f90c:	00110711 00680800 00280800 00b00900     ......h...(.....
  40f91c:	00080800 00880800 00480800 00f00900     ..........H.....
  40f92c:	00040710 00540800 00140800 00e30815     ......T.........
  40f93c:	002b0713 00740800 00340800 00c80900     ..+...t...4.....
  40f94c:	000d0711 00640800 00240800 00a80900     ......d...$.....
  40f95c:	00040800 00840800 00440800 00e80900     ..........D.....
  40f96c:	00080710 005c0800 001c0800 00980900     ......\.........
  40f97c:	00530714 007c0800 003c0800 00d80900     ..S...|...<.....
  40f98c:	00170712 006c0800 002c0800 00b80900     ......l...,.....
  40f99c:	000c0800 008c0800 004c0800 00f80900     ..........L.....
  40f9ac:	00030710 00520800 00120800 00a30815     ......R.........
  40f9bc:	00230713 00720800 00320800 00c40900     ..#...r...2.....
  40f9cc:	000b0711 00620800 00220800 00a40900     ......b...".....
  40f9dc:	00020800 00820800 00420800 00e40900     ..........B.....
  40f9ec:	00070710 005a0800 001a0800 00940900     ......Z.........
  40f9fc:	00430714 007a0800 003a0800 00d40900     ..C...z...:.....
  40fa0c:	00130712 006a0800 002a0800 00b40900     ......j...*.....
  40fa1c:	000a0800 008a0800 004a0800 00f40900     ..........J.....
  40fa2c:	00050710 00560800 00160800 00000840     ......V.....@...
  40fa3c:	00330713 00760800 00360800 00cc0900     ..3...v...6.....
  40fa4c:	000f0711 00660800 00260800 00ac0900     ......f...&.....
  40fa5c:	00060800 00860800 00460800 00ec0900     ..........F.....
  40fa6c:	00090710 005e0800 001e0800 009c0900     ......^.........
  40fa7c:	00630714 007e0800 003e0800 00dc0900     ..c...~...>.....
  40fa8c:	001b0712 006e0800 002e0800 00bc0900     ......n.........
  40fa9c:	000e0800 008e0800 004e0800 00fc0900     ..........N.....
  40faac:	00000760 00510800 00110800 00830815     `.....Q.........
  40fabc:	001f0712 00710800 00310800 00c20900     ......q...1.....
  40facc:	000a0710 00610800 00210800 00a20900     ......a...!.....
  40fadc:	00010800 00810800 00410800 00e20900     ..........A.....
  40faec:	00060710 00590800 00190800 00920900     ......Y.........
  40fafc:	003b0713 00790800 00390800 00d20900     ..;...y...9.....
  40fb0c:	00110711 00690800 00290800 00b20900     ......i...).....
  40fb1c:	00090800 00890800 00490800 00f20900     ..........I.....
  40fb2c:	00040710 00550800 00150800 01020810     ......U.........
  40fb3c:	002b0713 00750800 00350800 00ca0900     ..+...u...5.....
  40fb4c:	000d0711 00650800 00250800 00aa0900     ......e...%.....
  40fb5c:	00050800 00850800 00450800 00ea0900     ..........E.....
  40fb6c:	00080710 005d0800 001d0800 009a0900     ......].........
  40fb7c:	00530714 007d0800 003d0800 00da0900     ..S...}...=.....
  40fb8c:	00170712 006d0800 002d0800 00ba0900     ......m...-.....
  40fb9c:	000d0800 008d0800 004d0800 00fa0900     ..........M.....
  40fbac:	00030710 00530800 00130800 00c30815     ......S.........
  40fbbc:	00230713 00730800 00330800 00c60900     ..#...s...3.....
  40fbcc:	000b0711 00630800 00230800 00a60900     ......c...#.....
  40fbdc:	00030800 00830800 00430800 00e60900     ..........C.....
  40fbec:	00070710 005b0800 001b0800 00960900     ......[.........
  40fbfc:	00430714 007b0800 003b0800 00d60900     ..C...{...;.....
  40fc0c:	00130712 006b0800 002b0800 00b60900     ......k...+.....
  40fc1c:	000b0800 008b0800 004b0800 00f60900     ..........K.....
  40fc2c:	00050710 00570800 00170800 00000840     ......W.....@...
  40fc3c:	00330713 00770800 00370800 00ce0900     ..3...w...7.....
  40fc4c:	000f0711 00670800 00270800 00ae0900     ......g...'.....
  40fc5c:	00070800 00870800 00470800 00ee0900     ..........G.....
  40fc6c:	00090710 005f0800 001f0800 009e0900     ......_.........
  40fc7c:	00630714 007f0800 003f0800 00de0900     ..c.......?.....
  40fc8c:	001b0712 006f0800 002f0800 00be0900     ......o.../.....
  40fc9c:	000f0800 008f0800 004f0800 00fe0900     ..........O.....
  40fcac:	00000760 00500800 00100800 00730814     `.....P.......s.
  40fcbc:	001f0712 00700800 00300800 00c10900     ......p...0.....
  40fccc:	000a0710 00600800 00200800 00a10900     ......`... .....
  40fcdc:	00000800 00800800 00400800 00e10900     ..........@.....
  40fcec:	00060710 00580800 00180800 00910900     ......X.........
  40fcfc:	003b0713 00780800 00380800 00d10900     ..;...x...8.....
  40fd0c:	00110711 00680800 00280800 00b10900     ......h...(.....
  40fd1c:	00080800 00880800 00480800 00f10900     ..........H.....
  40fd2c:	00040710 00540800 00140800 00e30815     ......T.........
  40fd3c:	002b0713 00740800 00340800 00c90900     ..+...t...4.....
  40fd4c:	000d0711 00640800 00240800 00a90900     ......d...$.....
  40fd5c:	00040800 00840800 00440800 00e90900     ..........D.....
  40fd6c:	00080710 005c0800 001c0800 00990900     ......\.........
  40fd7c:	00530714 007c0800 003c0800 00d90900     ..S...|...<.....
  40fd8c:	00170712 006c0800 002c0800 00b90900     ......l...,.....
  40fd9c:	000c0800 008c0800 004c0800 00f90900     ..........L.....
  40fdac:	00030710 00520800 00120800 00a30815     ......R.........
  40fdbc:	00230713 00720800 00320800 00c50900     ..#...r...2.....
  40fdcc:	000b0711 00620800 00220800 00a50900     ......b...".....
  40fddc:	00020800 00820800 00420800 00e50900     ..........B.....
  40fdec:	00070710 005a0800 001a0800 00950900     ......Z.........
  40fdfc:	00430714 007a0800 003a0800 00d50900     ..C...z...:.....
  40fe0c:	00130712 006a0800 002a0800 00b50900     ......j...*.....
  40fe1c:	000a0800 008a0800 004a0800 00f50900     ..........J.....
  40fe2c:	00050710 00560800 00160800 00000840     ......V.....@...
  40fe3c:	00330713 00760800 00360800 00cd0900     ..3...v...6.....
  40fe4c:	000f0711 00660800 00260800 00ad0900     ......f...&.....
  40fe5c:	00060800 00860800 00460800 00ed0900     ..........F.....
  40fe6c:	00090710 005e0800 001e0800 009d0900     ......^.........
  40fe7c:	00630714 007e0800 003e0800 00dd0900     ..c...~...>.....
  40fe8c:	001b0712 006e0800 002e0800 00bd0900     ......n.........
  40fe9c:	000e0800 008e0800 004e0800 00fd0900     ..........N.....
  40feac:	00000760 00510800 00110800 00830815     `.....Q.........
  40febc:	001f0712 00710800 00310800 00c30900     ......q...1.....
  40fecc:	000a0710 00610800 00210800 00a30900     ......a...!.....
  40fedc:	00010800 00810800 00410800 00e30900     ..........A.....
  40feec:	00060710 00590800 00190800 00930900     ......Y.........
  40fefc:	003b0713 00790800 00390800 00d30900     ..;...y...9.....
  40ff0c:	00110711 00690800 00290800 00b30900     ......i...).....
  40ff1c:	00090800 00890800 00490800 00f30900     ..........I.....
  40ff2c:	00040710 00550800 00150800 01020810     ......U.........
  40ff3c:	002b0713 00750800 00350800 00cb0900     ..+...u...5.....
  40ff4c:	000d0711 00650800 00250800 00ab0900     ......e...%.....
  40ff5c:	00050800 00850800 00450800 00eb0900     ..........E.....
  40ff6c:	00080710 005d0800 001d0800 009b0900     ......].........
  40ff7c:	00530714 007d0800 003d0800 00db0900     ..S...}...=.....
  40ff8c:	00170712 006d0800 002d0800 00bb0900     ......m...-.....
  40ff9c:	000d0800 008d0800 004d0800 00fb0900     ..........M.....
  40ffac:	00030710 00530800 00130800 00c30815     ......S.........
  40ffbc:	00230713 00730800 00330800 00c70900     ..#...s...3.....
  40ffcc:	000b0711 00630800 00230800 00a70900     ......c...#.....
  40ffdc:	00030800 00830800 00430800 00e70900     ..........C.....
  40ffec:	00070710 005b0800 001b0800 00970900     ......[.........
  40fffc:	00430714 007b0800 003b0800 00d70900     ..C...{...;.....
  41000c:	00130712 006b0800 002b0800 00b70900     ......k...+.....
  41001c:	000b0800 008b0800 004b0800 00f70900     ..........K.....
  41002c:	00050710 00570800 00170800 00000840     ......W.....@...
  41003c:	00330713 00770800 00370800 00cf0900     ..3...w...7.....
  41004c:	000f0711 00670800 00270800 00af0900     ......g...'.....
  41005c:	00070800 00870800 00470800 00ef0900     ..........G.....
  41006c:	00090710 005f0800 001f0800 009f0900     ......_.........
  41007c:	00630714 007f0800 003f0800 00df0900     ..c.......?.....
  41008c:	001b0712 006f0800 002f0800 00bf0900     ......o.../.....
  41009c:	000f0800 008f0800 004f0800 00ff0900     ..........O.....

Disassembly of section .text.Transform%49:

004100ac <Transform>:

    #define MD5STEP(f, w, x, y, z, data, s) \
        w = rotlFixed(w + f(x, y, z) + data, s) + x

    static int Transform(Md5* md5)
    {
  4100ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

004100b0 <.LCFI0>:
  4100b0:	b083      	sub	sp, #12

004100b2 <.LCFI1>:
        /* Copy context->state[] to working vars  */
        word32 a = md5->digest[0];
        word32 b = md5->digest[1];
  4100b2:	6d05      	ldr	r5, [r0, #80]	; 0x50

004100b4 <.LVL2>:
        word32 c = md5->digest[2];
  4100b4:	6d44      	ldr	r4, [r0, #84]	; 0x54
  4100b6:	4627      	mov	r7, r4

004100b8 <.LVL3>:
        word32 d = md5->digest[3];

        MD5STEP(F1, a, b, c, d, md5->buffer[0]  + 0xd76aa478,  7);
  4100b8:	6d83      	ldr	r3, [r0, #88]	; 0x58
  4100ba:	ea84 0903 	eor.w	r9, r4, r3
  4100be:	ea09 0905 	and.w	r9, r9, r5
  4100c2:	ea89 0903 	eor.w	r9, r9, r3
  4100c6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4100c8:	68c2      	ldr	r2, [r0, #12]
  4100ca:	189a      	adds	r2, r3, r2
  4100cc:	4bdf      	ldr	r3, [pc, #892]	; (41044c <.LVL188+0x10>)
  4100ce:	4413      	add	r3, r2
  4100d0:	4499      	add	r9, r3
  4100d2:	eb05 6979 	add.w	r9, r5, r9, ror #25

004100d6 <.LVL7>:
        MD5STEP(F1, d, a, b, c, md5->buffer[1]  + 0xe8c7b756, 12);
  4100d6:	ea85 0c04 	eor.w	ip, r5, r4
  4100da:	ea0c 0c09 	and.w	ip, ip, r9
  4100de:	ea8c 0c04 	eor.w	ip, ip, r4
  4100e2:	6d83      	ldr	r3, [r0, #88]	; 0x58
  4100e4:	6902      	ldr	r2, [r0, #16]
  4100e6:	4413      	add	r3, r2
  4100e8:	4cd9      	ldr	r4, [pc, #868]	; (410450 <.LVL188+0x14>)

004100ea <.LVL10>:
  4100ea:	441c      	add	r4, r3
  4100ec:	44a4      	add	ip, r4
  4100ee:	eb09 5c3c 	add.w	ip, r9, ip, ror #20

004100f2 <.LVL12>:
        MD5STEP(F1, c, d, a, b, md5->buffer[2]  + 0x242070db, 17);
  4100f2:	ea85 0609 	eor.w	r6, r5, r9
  4100f6:	ea06 060c 	and.w	r6, r6, ip
  4100fa:	406e      	eors	r6, r5
  4100fc:	6943      	ldr	r3, [r0, #20]
  4100fe:	9701      	str	r7, [sp, #4]
  410100:	443b      	add	r3, r7
  410102:	4ad4      	ldr	r2, [pc, #848]	; (410454 <.LVL188+0x18>)
  410104:	441a      	add	r2, r3
  410106:	4416      	add	r6, r2
  410108:	eb0c 36f6 	add.w	r6, ip, r6, ror #15

0041010c <.LVL16>:
        MD5STEP(F1, b, c, d, a, md5->buffer[3]  + 0xc1bdceee, 22);
  41010c:	ea89 010c 	eor.w	r1, r9, ip
  410110:	4031      	ands	r1, r6
  410112:	ea81 0109 	eor.w	r1, r1, r9
  410116:	6983      	ldr	r3, [r0, #24]
  410118:	18ea      	adds	r2, r5, r3
  41011a:	4bcf      	ldr	r3, [pc, #828]	; (410458 <.LVL188+0x1c>)
  41011c:	4413      	add	r3, r2
  41011e:	4419      	add	r1, r3
  410120:	eb06 21b1 	add.w	r1, r6, r1, ror #10

00410124 <.LVL20>:
        MD5STEP(F1, a, b, c, d, md5->buffer[4]  + 0xf57c0faf,  7);
  410124:	ea8c 0306 	eor.w	r3, ip, r6
  410128:	400b      	ands	r3, r1
  41012a:	ea83 030c 	eor.w	r3, r3, ip
  41012e:	4acb      	ldr	r2, [pc, #812]	; (41045c <.LVL188+0x20>)
  410130:	69c4      	ldr	r4, [r0, #28]
  410132:	4422      	add	r2, r4
  410134:	4491      	add	r9, r2

00410136 <.LVL23>:
  410136:	444b      	add	r3, r9
  410138:	eb01 6373 	add.w	r3, r1, r3, ror #25

0041013c <.LVL25>:
        MD5STEP(F1, d, a, b, c, md5->buffer[5]  + 0x4787c62a, 12);
  41013c:	ea86 0401 	eor.w	r4, r6, r1
  410140:	401c      	ands	r4, r3
  410142:	4074      	eors	r4, r6
  410144:	4ac6      	ldr	r2, [pc, #792]	; (410460 <.LVL188+0x24>)
  410146:	6a07      	ldr	r7, [r0, #32]
  410148:	443a      	add	r2, r7
  41014a:	4494      	add	ip, r2

0041014c <.LVL28>:
  41014c:	4464      	add	r4, ip
  41014e:	eb03 5434 	add.w	r4, r3, r4, ror #20

00410152 <.LVL30>:
        MD5STEP(F1, c, d, a, b, md5->buffer[6]  + 0xa8304613, 17);
  410152:	ea81 0203 	eor.w	r2, r1, r3
  410156:	4022      	ands	r2, r4
  410158:	404a      	eors	r2, r1
  41015a:	f8df e36c 	ldr.w	lr, [pc, #876]	; 4104c8 <.LVL188+0x8c>
  41015e:	6a47      	ldr	r7, [r0, #36]	; 0x24
  410160:	44be      	add	lr, r7
  410162:	4476      	add	r6, lr

00410164 <.LVL33>:
  410164:	4432      	add	r2, r6
  410166:	eb04 32f2 	add.w	r2, r4, r2, ror #15

0041016a <.LVL35>:
        MD5STEP(F1, b, c, d, a, md5->buffer[7]  + 0xfd469501, 22);
  41016a:	f8d0 a028 	ldr.w	sl, [r0, #40]	; 0x28
  41016e:	ea83 0804 	eor.w	r8, r3, r4
  410172:	ea08 0802 	and.w	r8, r8, r2
  410176:	ea88 0803 	eor.w	r8, r8, r3
  41017a:	4eba      	ldr	r6, [pc, #744]	; (410464 <.LVL188+0x28>)
  41017c:	4456      	add	r6, sl
  41017e:	4431      	add	r1, r6

00410180 <.LVL39>:
  410180:	4488      	add	r8, r1
  410182:	eb02 28b8 	add.w	r8, r2, r8, ror #10

00410186 <.LVL41>:
        MD5STEP(F1, a, b, c, d, md5->buffer[8]  + 0x698098d8,  7);
  410186:	ea84 0e02 	eor.w	lr, r4, r2
  41018a:	ea0e 0e08 	and.w	lr, lr, r8
  41018e:	ea8e 0e04 	eor.w	lr, lr, r4
  410192:	49b5      	ldr	r1, [pc, #724]	; (410468 <.LVL188+0x2c>)
  410194:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  410196:	4431      	add	r1, r6
  410198:	440b      	add	r3, r1

0041019a <.LVL44>:
  41019a:	449e      	add	lr, r3
  41019c:	eb08 6e7e 	add.w	lr, r8, lr, ror #25

004101a0 <.LVL46>:
        MD5STEP(F1, d, a, b, c, md5->buffer[9]  + 0x8b44f7af, 12);
  4101a0:	ea82 0908 	eor.w	r9, r2, r8
  4101a4:	ea09 090e 	and.w	r9, r9, lr
  4101a8:	ea89 0902 	eor.w	r9, r9, r2
  4101ac:	4baf      	ldr	r3, [pc, #700]	; (41046c <.LVL188+0x30>)
  4101ae:	6b01      	ldr	r1, [r0, #48]	; 0x30
  4101b0:	440b      	add	r3, r1
  4101b2:	441c      	add	r4, r3

004101b4 <.LVL49>:
  4101b4:	44a1      	add	r9, r4
  4101b6:	eb0e 5939 	add.w	r9, lr, r9, ror #20

004101ba <.LVL51>:
        MD5STEP(F1, c, d, a, b, md5->buffer[10] + 0xffff5bb1, 17);
  4101ba:	ea88 0c0e 	eor.w	ip, r8, lr
  4101be:	ea0c 0c09 	and.w	ip, ip, r9
  4101c2:	ea8c 0c08 	eor.w	ip, ip, r8
  4101c6:	4baa      	ldr	r3, [pc, #680]	; (410470 <.LVL188+0x34>)
  4101c8:	6b41      	ldr	r1, [r0, #52]	; 0x34
  4101ca:	440b      	add	r3, r1
  4101cc:	441a      	add	r2, r3

004101ce <.LVL54>:
  4101ce:	4494      	add	ip, r2
  4101d0:	eb09 3cfc 	add.w	ip, r9, ip, ror #15

004101d4 <.LVL56>:
        MD5STEP(F1, b, c, d, a, md5->buffer[11] + 0x895cd7be, 22);
  4101d4:	ea8e 0609 	eor.w	r6, lr, r9
  4101d8:	ea06 060c 	and.w	r6, r6, ip
  4101dc:	ea86 060e 	eor.w	r6, r6, lr
  4101e0:	4ba4      	ldr	r3, [pc, #656]	; (410474 <.LVL188+0x38>)
  4101e2:	6b82      	ldr	r2, [r0, #56]	; 0x38
  4101e4:	4413      	add	r3, r2
  4101e6:	4498      	add	r8, r3

004101e8 <.LVL59>:
  4101e8:	4446      	add	r6, r8
  4101ea:	eb0c 26b6 	add.w	r6, ip, r6, ror #10

004101ee <.LVL61>:
        MD5STEP(F1, a, b, c, d, md5->buffer[12] + 0x6b901122,  7);
  4101ee:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
  4101f2:	ea89 010c 	eor.w	r1, r9, ip
  4101f6:	4031      	ands	r1, r6
  4101f8:	ea81 0109 	eor.w	r1, r1, r9
  4101fc:	4b9e      	ldr	r3, [pc, #632]	; (410478 <.LVL188+0x3c>)
  4101fe:	4443      	add	r3, r8
  410200:	449e      	add	lr, r3

00410202 <.LVL65>:
  410202:	4471      	add	r1, lr
  410204:	eb06 6171 	add.w	r1, r6, r1, ror #25

00410208 <.LVL67>:
        MD5STEP(F1, d, a, b, c, md5->buffer[13] + 0xfd987193, 12);
  410208:	ea8c 0306 	eor.w	r3, ip, r6
  41020c:	400b      	ands	r3, r1
  41020e:	ea83 030c 	eor.w	r3, r3, ip
  410212:	4a9a      	ldr	r2, [pc, #616]	; (41047c <.LVL188+0x40>)
  410214:	6c04      	ldr	r4, [r0, #64]	; 0x40
  410216:	4422      	add	r2, r4
  410218:	4491      	add	r9, r2

0041021a <.LVL70>:
  41021a:	444b      	add	r3, r9
  41021c:	eb01 5333 	add.w	r3, r1, r3, ror #20

00410220 <.LVL72>:
        MD5STEP(F1, c, d, a, b, md5->buffer[14] + 0xa679438e, 17);
  410220:	f8d0 9044 	ldr.w	r9, [r0, #68]	; 0x44
  410224:	ea86 0401 	eor.w	r4, r6, r1
  410228:	401c      	ands	r4, r3
  41022a:	4074      	eors	r4, r6
  41022c:	4a94      	ldr	r2, [pc, #592]	; (410480 <.LVL188+0x44>)
  41022e:	444a      	add	r2, r9
  410230:	4494      	add	ip, r2

00410232 <.LVL76>:
  410232:	4464      	add	r4, ip
  410234:	eb03 34f4 	add.w	r4, r3, r4, ror #15

00410238 <.LVL78>:
        MD5STEP(F1, b, c, d, a, md5->buffer[15] + 0x49b40821, 22);
  410238:	f8d0 c048 	ldr.w	ip, [r0, #72]	; 0x48
  41023c:	ea81 0203 	eor.w	r2, r1, r3
  410240:	4022      	ands	r2, r4
  410242:	404a      	eors	r2, r1
  410244:	f8df e284 	ldr.w	lr, [pc, #644]	; 4104cc <.LVL188+0x90>
  410248:	44e6      	add	lr, ip
  41024a:	4476      	add	r6, lr

0041024c <.LVL82>:
  41024c:	4432      	add	r2, r6
  41024e:	eb04 22b2 	add.w	r2, r4, r2, ror #10

00410252 <.LVL84>:

        MD5STEP(F2, a, b, c, d, md5->buffer[1]  + 0xf61e2562,  5);
  410252:	ea84 0b02 	eor.w	fp, r4, r2
  410256:	ea0b 0b03 	and.w	fp, fp, r3
  41025a:	ea8b 0b04 	eor.w	fp, fp, r4
  41025e:	4e89      	ldr	r6, [pc, #548]	; (410484 <.LVL188+0x48>)
  410260:	6907      	ldr	r7, [r0, #16]
  410262:	443e      	add	r6, r7
  410264:	4431      	add	r1, r6

00410266 <.LVL87>:
  410266:	448b      	add	fp, r1
  410268:	eb02 6bfb 	add.w	fp, r2, fp, ror #27

0041026c <.LVL89>:
        MD5STEP(F2, d, a, b, c, md5->buffer[6]  + 0xc040b340,  9);
  41026c:	ea82 0e0b 	eor.w	lr, r2, fp
  410270:	ea0e 0e04 	and.w	lr, lr, r4
  410274:	ea8e 0e02 	eor.w	lr, lr, r2
  410278:	4983      	ldr	r1, [pc, #524]	; (410488 <.LVL188+0x4c>)
  41027a:	6a46      	ldr	r6, [r0, #36]	; 0x24
  41027c:	4431      	add	r1, r6
  41027e:	440b      	add	r3, r1

00410280 <.LVL92>:
  410280:	449e      	add	lr, r3
  410282:	eb0b 5efe 	add.w	lr, fp, lr, ror #23

00410286 <.LVL94>:
        MD5STEP(F2, c, d, a, b, md5->buffer[11] + 0x265e5a51, 14);
  410286:	ea8b 030e 	eor.w	r3, fp, lr
  41028a:	4013      	ands	r3, r2
  41028c:	ea83 030b 	eor.w	r3, r3, fp
  410290:	497e      	ldr	r1, [pc, #504]	; (41048c <.LVL188+0x50>)
  410292:	6b86      	ldr	r6, [r0, #56]	; 0x38
  410294:	4431      	add	r1, r6
  410296:	440c      	add	r4, r1

00410298 <.LVL97>:
  410298:	4423      	add	r3, r4
  41029a:	eb0e 43b3 	add.w	r3, lr, r3, ror #18

0041029e <.LVL99>:
        MD5STEP(F2, b, c, d, a, md5->buffer[0]  + 0xe9b6c7aa, 20);
  41029e:	ea8e 0603 	eor.w	r6, lr, r3
  4102a2:	ea06 060b 	and.w	r6, r6, fp
  4102a6:	ea86 060e 	eor.w	r6, r6, lr
  4102aa:	4979      	ldr	r1, [pc, #484]	; (410490 <.LVL188+0x54>)
  4102ac:	68c4      	ldr	r4, [r0, #12]
  4102ae:	4421      	add	r1, r4
  4102b0:	440a      	add	r2, r1

004102b2 <.LVL102>:
  4102b2:	4416      	add	r6, r2
  4102b4:	eb03 3636 	add.w	r6, r3, r6, ror #12

004102b8 <.LVL104>:
        MD5STEP(F2, a, b, c, d, md5->buffer[5]  + 0xd62f105d,  5);
  4102b8:	ea83 0206 	eor.w	r2, r3, r6
  4102bc:	ea02 020e 	and.w	r2, r2, lr
  4102c0:	405a      	eors	r2, r3
  4102c2:	4974      	ldr	r1, [pc, #464]	; (410494 <.LVL188+0x58>)
  4102c4:	6a04      	ldr	r4, [r0, #32]
  4102c6:	4421      	add	r1, r4
  4102c8:	448b      	add	fp, r1

004102ca <.LVL107>:
  4102ca:	445a      	add	r2, fp
  4102cc:	eb06 62f2 	add.w	r2, r6, r2, ror #27

004102d0 <.LVL109>:
        MD5STEP(F2, d, a, b, c, md5->buffer[10] + 0x02441453,  9);
  4102d0:	ea86 0102 	eor.w	r1, r6, r2
  4102d4:	4019      	ands	r1, r3
  4102d6:	4071      	eors	r1, r6
  4102d8:	4c6f      	ldr	r4, [pc, #444]	; (410498 <.LVL188+0x5c>)
  4102da:	6b47      	ldr	r7, [r0, #52]	; 0x34
  4102dc:	443c      	add	r4, r7
  4102de:	44a6      	add	lr, r4

004102e0 <.LVL112>:
  4102e0:	4471      	add	r1, lr
  4102e2:	eb02 51f1 	add.w	r1, r2, r1, ror #23

004102e6 <.LVL114>:
        MD5STEP(F2, c, d, a, b, md5->buffer[15] + 0xd8a1e681, 14);
  4102e6:	ea82 0401 	eor.w	r4, r2, r1
  4102ea:	4034      	ands	r4, r6
  4102ec:	4054      	eors	r4, r2
  4102ee:	f8df e1e0 	ldr.w	lr, [pc, #480]	; 4104d0 <.LVL188+0x94>
  4102f2:	44e6      	add	lr, ip
  4102f4:	4473      	add	r3, lr

004102f6 <.LVL117>:
  4102f6:	441c      	add	r4, r3
  4102f8:	eb01 44b4 	add.w	r4, r1, r4, ror #18

004102fc <.LVL119>:
        MD5STEP(F2, b, c, d, a, md5->buffer[4]  + 0xe7d3fbc8, 20);
  4102fc:	ea81 0304 	eor.w	r3, r1, r4
  410300:	4013      	ands	r3, r2
  410302:	404b      	eors	r3, r1
  410304:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 4104d4 <.LVL188+0x98>
  410308:	69c7      	ldr	r7, [r0, #28]
  41030a:	44be      	add	lr, r7
  41030c:	4476      	add	r6, lr

0041030e <.LVL122>:
  41030e:	4433      	add	r3, r6
  410310:	eb04 3333 	add.w	r3, r4, r3, ror #12

00410314 <.LVL124>:
        MD5STEP(F2, a, b, c, d, md5->buffer[9]  + 0x21e1cde6,  5);
  410314:	ea84 0b03 	eor.w	fp, r4, r3
  410318:	ea0b 0b01 	and.w	fp, fp, r1
  41031c:	ea8b 0b04 	eor.w	fp, fp, r4
  410320:	4e5e      	ldr	r6, [pc, #376]	; (41049c <.LVL188+0x60>)
  410322:	6b07      	ldr	r7, [r0, #48]	; 0x30
  410324:	443e      	add	r6, r7
  410326:	4432      	add	r2, r6

00410328 <.LVL127>:
  410328:	4493      	add	fp, r2
  41032a:	eb03 6bfb 	add.w	fp, r3, fp, ror #27

0041032e <.LVL129>:
        MD5STEP(F2, d, a, b, c, md5->buffer[14] + 0xc33707d6,  9);
  41032e:	ea83 0e0b 	eor.w	lr, r3, fp
  410332:	ea0e 0e04 	and.w	lr, lr, r4
  410336:	ea8e 0e03 	eor.w	lr, lr, r3
  41033a:	4a59      	ldr	r2, [pc, #356]	; (4104a0 <.LVL188+0x64>)
  41033c:	444a      	add	r2, r9
  41033e:	4411      	add	r1, r2

00410340 <.LVL132>:
  410340:	448e      	add	lr, r1
  410342:	eb0b 5efe 	add.w	lr, fp, lr, ror #23

00410346 <.LVL134>:
        MD5STEP(F2, c, d, a, b, md5->buffer[3]  + 0xf4d50d87, 14);
  410346:	ea8b 060e 	eor.w	r6, fp, lr
  41034a:	401e      	ands	r6, r3
  41034c:	ea86 060b 	eor.w	r6, r6, fp
  410350:	4a54      	ldr	r2, [pc, #336]	; (4104a4 <.LVL188+0x68>)
  410352:	6981      	ldr	r1, [r0, #24]
  410354:	440a      	add	r2, r1
  410356:	4414      	add	r4, r2

00410358 <.LVL137>:
  410358:	4426      	add	r6, r4
  41035a:	eb0e 46b6 	add.w	r6, lr, r6, ror #18

0041035e <.LVL139>:
        MD5STEP(F2, b, c, d, a, md5->buffer[8]  + 0x455a14ed, 20);
  41035e:	ea8e 0206 	eor.w	r2, lr, r6
  410362:	ea02 020b 	and.w	r2, r2, fp
  410366:	ea82 020e 	eor.w	r2, r2, lr
  41036a:	494f      	ldr	r1, [pc, #316]	; (4104a8 <.LVL188+0x6c>)
  41036c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  41036e:	4421      	add	r1, r4
  410370:	440b      	add	r3, r1

00410372 <.LVL142>:
  410372:	441a      	add	r2, r3
  410374:	eb06 3232 	add.w	r2, r6, r2, ror #12

00410378 <.LVL144>:
        MD5STEP(F2, a, b, c, d, md5->buffer[13] + 0xa9e3e905,  5);
  410378:	ea86 0302 	eor.w	r3, r6, r2
  41037c:	ea03 030e 	and.w	r3, r3, lr
  410380:	4073      	eors	r3, r6
  410382:	494a      	ldr	r1, [pc, #296]	; (4104ac <.LVL188+0x70>)
  410384:	6c04      	ldr	r4, [r0, #64]	; 0x40
  410386:	4421      	add	r1, r4
  410388:	448b      	add	fp, r1

0041038a <.LVL147>:
  41038a:	445b      	add	r3, fp
  41038c:	eb02 63f3 	add.w	r3, r2, r3, ror #27

00410390 <.LVL149>:
        MD5STEP(F2, d, a, b, c, md5->buffer[2]  + 0xfcefa3f8,  9);
  410390:	ea82 0103 	eor.w	r1, r2, r3
  410394:	4031      	ands	r1, r6
  410396:	4051      	eors	r1, r2
  410398:	4c45      	ldr	r4, [pc, #276]	; (4104b0 <.LVL188+0x74>)
  41039a:	6947      	ldr	r7, [r0, #20]
  41039c:	443c      	add	r4, r7
  41039e:	44a6      	add	lr, r4

004103a0 <.LVL152>:
  4103a0:	4471      	add	r1, lr
  4103a2:	eb03 51f1 	add.w	r1, r3, r1, ror #23

004103a6 <.LVL154>:
        MD5STEP(F2, c, d, a, b, md5->buffer[7]  + 0x676f02d9, 14);
  4103a6:	ea83 0401 	eor.w	r4, r3, r1
  4103aa:	4014      	ands	r4, r2
  4103ac:	405c      	eors	r4, r3
  4103ae:	f8df e128 	ldr.w	lr, [pc, #296]	; 4104d8 <.LVL188+0x9c>
  4103b2:	44d6      	add	lr, sl
  4103b4:	4476      	add	r6, lr

004103b6 <.LVL157>:
  4103b6:	4434      	add	r4, r6
  4103b8:	eb01 44b4 	add.w	r4, r1, r4, ror #18

004103bc <.LVL159>:
        MD5STEP(F2, b, c, d, a, md5->buffer[12] + 0x8d2a4c8a, 20);
  4103bc:	ea81 0b04 	eor.w	fp, r1, r4
  4103c0:	ea03 060b 	and.w	r6, r3, fp
  4103c4:	404e      	eors	r6, r1
  4103c6:	f8df e114 	ldr.w	lr, [pc, #276]	; 4104dc <.LVL188+0xa0>
  4103ca:	44c6      	add	lr, r8
  4103cc:	4472      	add	r2, lr

004103ce <.LVL163>:
  4103ce:	4416      	add	r6, r2
  4103d0:	eb04 3636 	add.w	r6, r4, r6, ror #12

004103d4 <.LVL165>:

        MD5STEP(F3, a, b, c, d, md5->buffer[5]  + 0xfffa3942,  4);
  4103d4:	4a37      	ldr	r2, [pc, #220]	; (4104b4 <.LVL188+0x78>)
  4103d6:	6a07      	ldr	r7, [r0, #32]
  4103d8:	443a      	add	r2, r7
  4103da:	4413      	add	r3, r2

004103dc <.LVL166>:
  4103dc:	ea8b 0b06 	eor.w	fp, fp, r6
  4103e0:	445b      	add	r3, fp
  4103e2:	eb06 7333 	add.w	r3, r6, r3, ror #28

004103e6 <.LVL168>:
        MD5STEP(F3, d, a, b, c, md5->buffer[8]  + 0x8771f681, 11);
  4103e6:	ea84 0206 	eor.w	r2, r4, r6
  4103ea:	405a      	eors	r2, r3
  4103ec:	f8df e0f0 	ldr.w	lr, [pc, #240]	; 4104e0 <.LVL188+0xa4>
  4103f0:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  4103f2:	44be      	add	lr, r7
  4103f4:	4471      	add	r1, lr

004103f6 <.LVL171>:
  4103f6:	4411      	add	r1, r2
  4103f8:	eb03 5171 	add.w	r1, r3, r1, ror #21

004103fc <.LVL173>:
        MD5STEP(F3, c, d, a, b, md5->buffer[11] + 0x6d9d6122, 16);
  4103fc:	ea86 0b03 	eor.w	fp, r6, r3
  410400:	ea8b 0b01 	eor.w	fp, fp, r1
  410404:	4a2c      	ldr	r2, [pc, #176]	; (4104b8 <.LVL188+0x7c>)
  410406:	6b87      	ldr	r7, [r0, #56]	; 0x38
  410408:	443a      	add	r2, r7
  41040a:	4414      	add	r4, r2

0041040c <.LVL176>:
  41040c:	445c      	add	r4, fp
  41040e:	eb01 4434 	add.w	r4, r1, r4, ror #16

00410412 <.LVL178>:
        MD5STEP(F3, b, c, d, a, md5->buffer[14] + 0xfde5380c, 23);
  410412:	ea83 0e01 	eor.w	lr, r3, r1
  410416:	ea8e 0e04 	eor.w	lr, lr, r4
  41041a:	4a28      	ldr	r2, [pc, #160]	; (4104bc <.LVL188+0x80>)
  41041c:	444a      	add	r2, r9
  41041e:	4416      	add	r6, r2

00410420 <.LVL181>:
  410420:	44b6      	add	lr, r6
  410422:	eb04 2e7e 	add.w	lr, r4, lr, ror #9

00410426 <.LVL183>:
        MD5STEP(F3, a, b, c, d, md5->buffer[1]  + 0xa4beea44,  4);
  410426:	ea81 0204 	eor.w	r2, r1, r4
  41042a:	ea82 020e 	eor.w	r2, r2, lr
  41042e:	4e24      	ldr	r6, [pc, #144]	; (4104c0 <.LVL188+0x84>)
  410430:	6907      	ldr	r7, [r0, #16]
  410432:	443e      	add	r6, r7
  410434:	4433      	add	r3, r6

00410436 <.LVL186>:
  410436:	4413      	add	r3, r2
  410438:	eb0e 7333 	add.w	r3, lr, r3, ror #28

0041043c <.LVL188>:
        MD5STEP(F3, d, a, b, c, md5->buffer[4]  + 0x4bdecfa9, 11);
  41043c:	ea84 020e 	eor.w	r2, r4, lr
  410440:	405a      	eors	r2, r3
  410442:	4e20      	ldr	r6, [pc, #128]	; (4104c4 <.LVL188+0x88>)
  410444:	69c7      	ldr	r7, [r0, #28]
  410446:	443e      	add	r6, r7
  410448:	4431      	add	r1, r6
  41044a:	e04b      	b.n	4104e4 <.LVL191>
  41044c:	d76aa478 	.word	0xd76aa478
  410450:	e8c7b756 	.word	0xe8c7b756
  410454:	242070db 	.word	0x242070db
  410458:	c1bdceee 	.word	0xc1bdceee
  41045c:	f57c0faf 	.word	0xf57c0faf
  410460:	4787c62a 	.word	0x4787c62a
  410464:	fd469501 	.word	0xfd469501
  410468:	698098d8 	.word	0x698098d8
  41046c:	8b44f7af 	.word	0x8b44f7af
  410470:	ffff5bb1 	.word	0xffff5bb1
  410474:	895cd7be 	.word	0x895cd7be
  410478:	6b901122 	.word	0x6b901122
  41047c:	fd987193 	.word	0xfd987193
  410480:	a679438e 	.word	0xa679438e
  410484:	f61e2562 	.word	0xf61e2562
  410488:	c040b340 	.word	0xc040b340
  41048c:	265e5a51 	.word	0x265e5a51
  410490:	e9b6c7aa 	.word	0xe9b6c7aa
  410494:	d62f105d 	.word	0xd62f105d
  410498:	02441453 	.word	0x02441453
  41049c:	21e1cde6 	.word	0x21e1cde6
  4104a0:	c33707d6 	.word	0xc33707d6
  4104a4:	f4d50d87 	.word	0xf4d50d87
  4104a8:	455a14ed 	.word	0x455a14ed
  4104ac:	a9e3e905 	.word	0xa9e3e905
  4104b0:	fcefa3f8 	.word	0xfcefa3f8
  4104b4:	fffa3942 	.word	0xfffa3942
  4104b8:	6d9d6122 	.word	0x6d9d6122
  4104bc:	fde5380c 	.word	0xfde5380c
  4104c0:	a4beea44 	.word	0xa4beea44
  4104c4:	4bdecfa9 	.word	0x4bdecfa9
  4104c8:	a8304613 	.word	0xa8304613
  4104cc:	49b40821 	.word	0x49b40821
  4104d0:	d8a1e681 	.word	0xd8a1e681
  4104d4:	e7d3fbc8 	.word	0xe7d3fbc8
  4104d8:	676f02d9 	.word	0x676f02d9
  4104dc:	8d2a4c8a 	.word	0x8d2a4c8a
  4104e0:	8771f681 	.word	0x8771f681

004104e4 <.LVL191>:
  4104e4:	4411      	add	r1, r2
  4104e6:	eb03 5171 	add.w	r1, r3, r1, ror #21

004104ea <.LVL193>:
        MD5STEP(F3, c, d, a, b, md5->buffer[7]  + 0xf6bb4b60, 16);
  4104ea:	ea8e 0b03 	eor.w	fp, lr, r3
  4104ee:	ea8b 0b01 	eor.w	fp, fp, r1
  4104f2:	4a8c      	ldr	r2, [pc, #560]	; (410724 <.LVL322>)
  4104f4:	4452      	add	r2, sl
  4104f6:	4414      	add	r4, r2

004104f8 <.LVL196>:
  4104f8:	44a3      	add	fp, r4
  4104fa:	eb01 4b3b 	add.w	fp, r1, fp, ror #16

004104fe <.LVL198>:
        MD5STEP(F3, b, c, d, a, md5->buffer[10] + 0xbebfbc70, 23);
  4104fe:	ea83 0201 	eor.w	r2, r3, r1
  410502:	ea82 020b 	eor.w	r2, r2, fp
  410506:	4c88      	ldr	r4, [pc, #544]	; (410728 <.LVL322+0x4>)
  410508:	6b46      	ldr	r6, [r0, #52]	; 0x34
  41050a:	4434      	add	r4, r6
  41050c:	44a6      	add	lr, r4

0041050e <.LVL201>:
  41050e:	4472      	add	r2, lr
  410510:	eb0b 2272 	add.w	r2, fp, r2, ror #9

00410514 <.LVL203>:
        MD5STEP(F3, a, b, c, d, md5->buffer[13] + 0x289b7ec6,  4);
  410514:	ea81 040b 	eor.w	r4, r1, fp
  410518:	4054      	eors	r4, r2
  41051a:	4e84      	ldr	r6, [pc, #528]	; (41072c <.LVL322+0x8>)
  41051c:	6c07      	ldr	r7, [r0, #64]	; 0x40
  41051e:	443e      	add	r6, r7
  410520:	4433      	add	r3, r6

00410522 <.LVL206>:
  410522:	4423      	add	r3, r4
  410524:	eb02 7333 	add.w	r3, r2, r3, ror #28

00410528 <.LVL208>:
        MD5STEP(F3, d, a, b, c, md5->buffer[0]  + 0xeaa127fa, 11);
  410528:	ea8b 0e02 	eor.w	lr, fp, r2
  41052c:	ea8e 0e03 	eor.w	lr, lr, r3
  410530:	4c7f      	ldr	r4, [pc, #508]	; (410730 <.LVL322+0xc>)
  410532:	68c6      	ldr	r6, [r0, #12]
  410534:	4434      	add	r4, r6
  410536:	4421      	add	r1, r4

00410538 <.LVL211>:
  410538:	448e      	add	lr, r1
  41053a:	eb03 5e7e 	add.w	lr, r3, lr, ror #21

0041053e <.LVL213>:
        MD5STEP(F3, c, d, a, b, md5->buffer[3]  + 0xd4ef3085, 16);
  41053e:	ea82 0603 	eor.w	r6, r2, r3
  410542:	ea86 060e 	eor.w	r6, r6, lr
  410546:	497b      	ldr	r1, [pc, #492]	; (410734 <.LVL322+0x10>)
  410548:	6984      	ldr	r4, [r0, #24]
  41054a:	4421      	add	r1, r4
  41054c:	448b      	add	fp, r1

0041054e <.LVL216>:
  41054e:	445e      	add	r6, fp
  410550:	eb0e 4636 	add.w	r6, lr, r6, ror #16

00410554 <.LVL218>:
        MD5STEP(F3, b, c, d, a, md5->buffer[6]  + 0x04881d05, 23);
  410554:	ea83 0b0e 	eor.w	fp, r3, lr
  410558:	ea8b 0b06 	eor.w	fp, fp, r6
  41055c:	4976      	ldr	r1, [pc, #472]	; (410738 <.LVL322+0x14>)
  41055e:	6a44      	ldr	r4, [r0, #36]	; 0x24
  410560:	4421      	add	r1, r4
  410562:	440a      	add	r2, r1

00410564 <.LVL221>:
  410564:	4493      	add	fp, r2
  410566:	eb06 2b7b 	add.w	fp, r6, fp, ror #9

0041056a <.LVL223>:
        MD5STEP(F3, a, b, c, d, md5->buffer[9]  + 0xd9d4d039,  4);
  41056a:	ea8e 0406 	eor.w	r4, lr, r6
  41056e:	ea84 040b 	eor.w	r4, r4, fp
  410572:	4a72      	ldr	r2, [pc, #456]	; (41073c <.LVL322+0x18>)
  410574:	6b01      	ldr	r1, [r0, #48]	; 0x30
  410576:	440a      	add	r2, r1
  410578:	4413      	add	r3, r2

0041057a <.LVL226>:
  41057a:	441c      	add	r4, r3
  41057c:	eb0b 7434 	add.w	r4, fp, r4, ror #28

00410580 <.LVL228>:
        MD5STEP(F3, d, a, b, c, md5->buffer[12] + 0xe6db99e5, 11);
  410580:	ea86 010b 	eor.w	r1, r6, fp
  410584:	4061      	eors	r1, r4
  410586:	4b6e      	ldr	r3, [pc, #440]	; (410740 <.LVL322+0x1c>)
  410588:	4443      	add	r3, r8
  41058a:	449e      	add	lr, r3

0041058c <.LVL231>:
  41058c:	4471      	add	r1, lr
  41058e:	eb04 5171 	add.w	r1, r4, r1, ror #21

00410592 <.LVL233>:
        MD5STEP(F3, c, d, a, b, md5->buffer[15] + 0x1fa27cf8, 16);
  410592:	ea8b 0304 	eor.w	r3, fp, r4
  410596:	404b      	eors	r3, r1
  410598:	4a6a      	ldr	r2, [pc, #424]	; (410744 <.LVL322+0x20>)
  41059a:	4462      	add	r2, ip
  41059c:	4416      	add	r6, r2

0041059e <.LVL236>:
  41059e:	441e      	add	r6, r3
  4105a0:	eb01 4636 	add.w	r6, r1, r6, ror #16

004105a4 <.LVL238>:
        MD5STEP(F3, b, c, d, a, md5->buffer[2]  + 0xc4ac5665, 23);
  4105a4:	ea84 0201 	eor.w	r2, r4, r1
  4105a8:	4072      	eors	r2, r6
  4105aa:	4b67      	ldr	r3, [pc, #412]	; (410748 <.LVL322+0x24>)
  4105ac:	6947      	ldr	r7, [r0, #20]
  4105ae:	443b      	add	r3, r7
  4105b0:	449b      	add	fp, r3

004105b2 <.LVL241>:
  4105b2:	445a      	add	r2, fp
  4105b4:	eb06 2272 	add.w	r2, r6, r2, ror #9

004105b8 <.LVL243>:

        MD5STEP(F4, a, b, c, d, md5->buffer[0]  + 0xf4292244,  6);
  4105b8:	ea62 0301 	orn	r3, r2, r1
  4105bc:	4073      	eors	r3, r6
  4105be:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 410788 <.LVL322+0x64>
  4105c2:	68c7      	ldr	r7, [r0, #12]
  4105c4:	44be      	add	lr, r7
  4105c6:	4474      	add	r4, lr

004105c8 <.LVL246>:
  4105c8:	4423      	add	r3, r4
  4105ca:	eb02 63b3 	add.w	r3, r2, r3, ror #26

004105ce <.LVL248>:
        MD5STEP(F4, d, a, b, c, md5->buffer[7]  + 0x432aff97, 10);
  4105ce:	ea63 0b06 	orn	fp, r3, r6
  4105d2:	ea8b 0b02 	eor.w	fp, fp, r2
  4105d6:	4c5d      	ldr	r4, [pc, #372]	; (41074c <.LVL322+0x28>)
  4105d8:	4454      	add	r4, sl
  4105da:	4421      	add	r1, r4

004105dc <.LVL251>:
  4105dc:	448b      	add	fp, r1
  4105de:	eb03 5bbb 	add.w	fp, r3, fp, ror #22

004105e2 <.LVL253>:
        MD5STEP(F4, c, d, a, b, md5->buffer[14] + 0xab9423a7, 15);
  4105e2:	ea6b 0e02 	orn	lr, fp, r2
  4105e6:	ea8e 0e03 	eor.w	lr, lr, r3
  4105ea:	4959      	ldr	r1, [pc, #356]	; (410750 <.LVL322+0x2c>)
  4105ec:	4449      	add	r1, r9
  4105ee:	440e      	add	r6, r1

004105f0 <.LVL256>:
  4105f0:	44b6      	add	lr, r6
  4105f2:	eb0b 4e7e 	add.w	lr, fp, lr, ror #17

004105f6 <.LVL258>:
        MD5STEP(F4, b, c, d, a, md5->buffer[5]  + 0xfc93a039, 21);
  4105f6:	ea6e 0403 	orn	r4, lr, r3
  4105fa:	ea84 040b 	eor.w	r4, r4, fp
  4105fe:	4955      	ldr	r1, [pc, #340]	; (410754 <.LVL322+0x30>)
  410600:	6a06      	ldr	r6, [r0, #32]
  410602:	4431      	add	r1, r6
  410604:	440a      	add	r2, r1

00410606 <.LVL261>:
  410606:	4414      	add	r4, r2
  410608:	eb0e 24f4 	add.w	r4, lr, r4, ror #11

0041060c <.LVL263>:
        MD5STEP(F4, a, b, c, d, md5->buffer[12] + 0x655b59c3,  6);
  41060c:	ea64 060b 	orn	r6, r4, fp
  410610:	ea86 060e 	eor.w	r6, r6, lr
  410614:	4a50      	ldr	r2, [pc, #320]	; (410758 <.LVL322+0x34>)
  410616:	4442      	add	r2, r8
  410618:	4413      	add	r3, r2

0041061a <.LVL266>:
  41061a:	441e      	add	r6, r3
  41061c:	eb04 66b6 	add.w	r6, r4, r6, ror #26

00410620 <.LVL268>:
        MD5STEP(F4, d, a, b, c, md5->buffer[3]  + 0x8f0ccc92, 10);
  410620:	ea66 080e 	orn	r8, r6, lr
  410624:	ea88 0804 	eor.w	r8, r8, r4
  410628:	4b4c      	ldr	r3, [pc, #304]	; (41075c <.LVL322+0x38>)
  41062a:	6982      	ldr	r2, [r0, #24]
  41062c:	4413      	add	r3, r2
  41062e:	449b      	add	fp, r3

00410630 <.LVL271>:
  410630:	44d8      	add	r8, fp
  410632:	eb06 58b8 	add.w	r8, r6, r8, ror #22

00410636 <.LVL273>:
        MD5STEP(F4, c, d, a, b, md5->buffer[10] + 0xffeff47d, 15);
  410636:	ea68 0204 	orn	r2, r8, r4
  41063a:	4072      	eors	r2, r6
  41063c:	4948      	ldr	r1, [pc, #288]	; (410760 <.LVL322+0x3c>)
  41063e:	6b43      	ldr	r3, [r0, #52]	; 0x34
  410640:	4419      	add	r1, r3
  410642:	448e      	add	lr, r1

00410644 <.LVL276>:
  410644:	4472      	add	r2, lr
  410646:	eb08 4272 	add.w	r2, r8, r2, ror #17

0041064a <.LVL278>:
        MD5STEP(F4, b, c, d, a, md5->buffer[1]  + 0x85845dd1, 21);
  41064a:	ea62 0306 	orn	r3, r2, r6
  41064e:	ea83 0308 	eor.w	r3, r3, r8
  410652:	4944      	ldr	r1, [pc, #272]	; (410764 <.LVL322+0x40>)
  410654:	6907      	ldr	r7, [r0, #16]
  410656:	4439      	add	r1, r7
  410658:	440c      	add	r4, r1

0041065a <.LVL281>:
  41065a:	4423      	add	r3, r4
  41065c:	eb02 23f3 	add.w	r3, r2, r3, ror #11

00410660 <.LVL283>:
        MD5STEP(F4, a, b, c, d, md5->buffer[8]  + 0x6fa87e4f,  6);
  410660:	ea63 0e08 	orn	lr, r3, r8
  410664:	ea8e 0e02 	eor.w	lr, lr, r2
  410668:	493f      	ldr	r1, [pc, #252]	; (410768 <.LVL322+0x44>)
  41066a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  41066c:	4421      	add	r1, r4
  41066e:	440e      	add	r6, r1

00410670 <.LVL286>:
  410670:	44b6      	add	lr, r6
  410672:	eb03 6ebe 	add.w	lr, r3, lr, ror #26

00410676 <.LVL288>:
        MD5STEP(F4, d, a, b, c, md5->buffer[15] + 0xfe2ce6e0, 10);
  410676:	ea6e 0402 	orn	r4, lr, r2
  41067a:	405c      	eors	r4, r3
  41067c:	493b      	ldr	r1, [pc, #236]	; (41076c <.LVL322+0x48>)
  41067e:	4461      	add	r1, ip
  410680:	4488      	add	r8, r1

00410682 <.LVL291>:
  410682:	4444      	add	r4, r8
  410684:	eb0e 54b4 	add.w	r4, lr, r4, ror #22

00410688 <.LVL293>:
        MD5STEP(F4, c, d, a, b, md5->buffer[6]  + 0xa3014314, 15);
  410688:	ea64 0603 	orn	r6, r4, r3
  41068c:	ea86 060e 	eor.w	r6, r6, lr
  410690:	4937      	ldr	r1, [pc, #220]	; (410770 <.LVL322+0x4c>)
  410692:	6a47      	ldr	r7, [r0, #36]	; 0x24
  410694:	4439      	add	r1, r7
  410696:	440a      	add	r2, r1

00410698 <.LVL296>:
  410698:	4416      	add	r6, r2
  41069a:	eb04 4676 	add.w	r6, r4, r6, ror #17

0041069e <.LVL298>:
        MD5STEP(F4, b, c, d, a, md5->buffer[13] + 0x4e0811a1, 21);
  41069e:	ea66 0c0e 	orn	ip, r6, lr
  4106a2:	ea8c 0c04 	eor.w	ip, ip, r4
  4106a6:	4933      	ldr	r1, [pc, #204]	; (410774 <.LVL322+0x50>)
  4106a8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4106aa:	4411      	add	r1, r2
  4106ac:	440b      	add	r3, r1

004106ae <.LVL301>:
  4106ae:	449c      	add	ip, r3
  4106b0:	eb06 2cfc 	add.w	ip, r6, ip, ror #11

004106b4 <.LVL303>:
        MD5STEP(F4, a, b, c, d, md5->buffer[4]  + 0xf7537e82,  6);
  4106b4:	ea6c 0204 	orn	r2, ip, r4
  4106b8:	4072      	eors	r2, r6
  4106ba:	492f      	ldr	r1, [pc, #188]	; (410778 <.LVL322+0x54>)
  4106bc:	69c3      	ldr	r3, [r0, #28]
  4106be:	4419      	add	r1, r3
  4106c0:	448e      	add	lr, r1

004106c2 <.LVL306>:
  4106c2:	4472      	add	r2, lr
  4106c4:	eb0c 62b2 	add.w	r2, ip, r2, ror #26

004106c8 <.LVL308>:
        MD5STEP(F4, d, a, b, c, md5->buffer[11] + 0xbd3af235, 10);
  4106c8:	ea62 0306 	orn	r3, r2, r6
  4106cc:	ea83 030c 	eor.w	r3, r3, ip
  4106d0:	492a      	ldr	r1, [pc, #168]	; (41077c <.LVL322+0x58>)
  4106d2:	6b87      	ldr	r7, [r0, #56]	; 0x38
  4106d4:	4439      	add	r1, r7
  4106d6:	440c      	add	r4, r1

004106d8 <.LVL311>:
  4106d8:	441c      	add	r4, r3
  4106da:	eb02 54b4 	add.w	r4, r2, r4, ror #22

004106de <.LVL313>:
        MD5STEP(F4, c, d, a, b, md5->buffer[2]  + 0x2ad7d2bb, 15);
  4106de:	ea64 030c 	orn	r3, r4, ip
  4106e2:	4053      	eors	r3, r2
  4106e4:	4926      	ldr	r1, [pc, #152]	; (410780 <.LVL322+0x5c>)
  4106e6:	6947      	ldr	r7, [r0, #20]
  4106e8:	4439      	add	r1, r7
  4106ea:	440e      	add	r6, r1

004106ec <.LVL316>:
  4106ec:	441e      	add	r6, r3
  4106ee:	eb04 4676 	add.w	r6, r4, r6, ror #17

004106f2 <.LVL318>:
        MD5STEP(F4, b, c, d, a, md5->buffer[9]  + 0xeb86d391, 21);

        /* Add the working vars back into digest state[]  */
        md5->digest[0] += a;
  4106f2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4106f4:	4413      	add	r3, r2
  4106f6:	64c3      	str	r3, [r0, #76]	; 0x4c
        MD5STEP(F4, b, c, d, a, md5->buffer[9]  + 0xeb86d391, 21);
  4106f8:	ea66 0202 	orn	r2, r6, r2

004106fc <.LVL319>:
  4106fc:	4062      	eors	r2, r4
  4106fe:	4921      	ldr	r1, [pc, #132]	; (410784 <.LVL322+0x60>)
  410700:	6b03      	ldr	r3, [r0, #48]	; 0x30
  410702:	4419      	add	r1, r3
  410704:	448c      	add	ip, r1
  410706:	4494      	add	ip, r2
        md5->digest[1] += b;
  410708:	4435      	add	r5, r6
  41070a:	eb05 25fc 	add.w	r5, r5, ip, ror #11
  41070e:	6505      	str	r5, [r0, #80]	; 0x50
        md5->digest[2] += c;
  410710:	9b01      	ldr	r3, [sp, #4]
  410712:	4433      	add	r3, r6
  410714:	6543      	str	r3, [r0, #84]	; 0x54
        md5->digest[3] += d;
  410716:	6d83      	ldr	r3, [r0, #88]	; 0x58
  410718:	441c      	add	r4, r3

0041071a <.LVL320>:
  41071a:	6584      	str	r4, [r0, #88]	; 0x58

        return 0;
    }
  41071c:	2000      	movs	r0, #0

0041071e <.LVL321>:
  41071e:	b003      	add	sp, #12

00410720 <.LCFI2>:
  410720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00410724 <.LVL322>:
  410724:	f6bb4b60 	.word	0xf6bb4b60
  410728:	bebfbc70 	.word	0xbebfbc70
  41072c:	289b7ec6 	.word	0x289b7ec6
  410730:	eaa127fa 	.word	0xeaa127fa
  410734:	d4ef3085 	.word	0xd4ef3085
  410738:	04881d05 	.word	0x04881d05
  41073c:	d9d4d039 	.word	0xd9d4d039
  410740:	e6db99e5 	.word	0xe6db99e5
  410744:	1fa27cf8 	.word	0x1fa27cf8
  410748:	c4ac5665 	.word	0xc4ac5665
  41074c:	432aff97 	.word	0x432aff97
  410750:	ab9423a7 	.word	0xab9423a7
  410754:	fc93a039 	.word	0xfc93a039
  410758:	655b59c3 	.word	0x655b59c3
  41075c:	8f0ccc92 	.word	0x8f0ccc92
  410760:	ffeff47d 	.word	0xffeff47d
  410764:	85845dd1 	.word	0x85845dd1
  410768:	6fa87e4f 	.word	0x6fa87e4f
  41076c:	fe2ce6e0 	.word	0xfe2ce6e0
  410770:	a3014314 	.word	0xa3014314
  410774:	4e0811a1 	.word	0x4e0811a1
  410778:	f7537e82 	.word	0xf7537e82
  41077c:	bd3af235 	.word	0xbd3af235
  410780:	2ad7d2bb 	.word	0x2ad7d2bb
  410784:	eb86d391 	.word	0xeb86d391
  410788:	f4292244 	.word	0xf4292244

Disassembly of section .text.ecc_projective_add_point%50:

0041078c <ecc_projective_add_point>:
   mp       The "b" value from montgomery_setup()
   return   MP_OKAY on success
*/
int ecc_projective_add_point(ecc_point* P, ecc_point* Q, ecc_point* R,
                             mp_int* a, mp_int* modulus, mp_digit mp)
{
  41078c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00410790 <.LCFI19>:
  410790:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464

00410794 <.LCFI20>:
  410794:	f8dd 7488 	ldr.w	r7, [sp, #1160]	; 0x488
   mp_int rx, ry, rz;
#endif
   mp_int *x, *y, *z;
   int    err;

   if (P == NULL || Q == NULL || R == NULL || modulus == NULL) {
  410798:	2800      	cmp	r0, #0
  41079a:	f000 829b 	beq.w	410cd4 <.LVL461>
  41079e:	460e      	mov	r6, r1
  4107a0:	4615      	mov	r5, r2
  4107a2:	469a      	mov	sl, r3
  4107a4:	4680      	mov	r8, r0
  4107a6:	2900      	cmp	r1, #0
  4107a8:	f000 8294 	beq.w	410cd4 <.LVL461>
  4107ac:	2a00      	cmp	r2, #0
  4107ae:	f000 8294 	beq.w	410cda <.LVL461+0x6>
  4107b2:	2f00      	cmp	r7, #0
  4107b4:	f000 8291 	beq.w	410cda <.LVL461+0x6>
       return ECC_BAD_ARG_E;
   }

   /* if Q == R then swap P and Q, so we don't require a local x,y,z */
   if (Q == R) {
  4107b8:	4291      	cmp	r1, r2
  4107ba:	d00e      	beq.n	4107da <.LBB22>

004107bc <.LVL257>:
      ecc_point* tPt  = P;
      P = Q;
      Q = tPt;
   }

   if ((err = mp_init_multi(&t1, &t2, NULL, NULL, NULL, NULL)) != MP_OKAY) {
  4107bc:	2200      	movs	r2, #0

004107be <.LVL258>:
  4107be:	9201      	str	r2, [sp, #4]
  4107c0:	9200      	str	r2, [sp, #0]
  4107c2:	4613      	mov	r3, r2

004107c4 <.LVL259>:
  4107c4:	a904      	add	r1, sp, #16
  4107c6:	a88e      	add	r0, sp, #568	; 0x238
  4107c8:	f010 fcdc 	bl	421184 <mp_init_multi>

004107cc <.LVL260>:
  4107cc:	4604      	mov	r4, r0
  4107ce:	b138      	cbz	r0, 4107e0 <.LBE22>

004107d0 <.LVL261>:
   /* clean up */
   mp_clear(&t1);
   mp_clear(&t2);

   return err;
}
  4107d0:	4620      	mov	r0, r4
  4107d2:	f20d 4d64 	addw	sp, sp, #1124	; 0x464

004107d6 <.LCFI21>:
  4107d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004107da <.LBB22>:
      Q = tPt;
  4107da:	4606      	mov	r6, r0
      P = Q;
  4107dc:	4690      	mov	r8, r2
  4107de:	e7ed      	b.n	4107bc <.LVL257>

004107e0 <.LBE22>:
       err = mp_sub(modulus, Q->y, &t1);
  4107e0:	f506 790a 	add.w	r9, r6, #552	; 0x228
  4107e4:	aa8e      	add	r2, sp, #568	; 0x238
  4107e6:	4649      	mov	r1, r9
  4107e8:	4638      	mov	r0, r7

004107ea <.LVL264>:
  4107ea:	f011 fe42 	bl	422472 <.LFE71>

004107ee <.LVL265>:
   if (err == MP_OKAY) {
  4107ee:	4604      	mov	r4, r0
  4107f0:	b130      	cbz	r0, 410800 <.LVL270>

004107f2 <.L136>:
   mp_clear(&t1);
  4107f2:	a88e      	add	r0, sp, #568	; 0x238

004107f4 <.LVL267>:
  4107f4:	f011 fdec 	bl	4223d0 <.LFE16>

004107f8 <.LVL268>:
   mp_clear(&t2);
  4107f8:	a804      	add	r0, sp, #16
  4107fa:	f011 fde9 	bl	4223d0 <.LFE16>

004107fe <.LVL269>:
   return err;
  4107fe:	e7e7      	b.n	4107d0 <.LVL261>

00410800 <.LVL270>:
       if ( (mp_cmp(P->x, Q->x) == MP_EQ) &&
  410800:	4644      	mov	r4, r8
  410802:	9603      	str	r6, [sp, #12]
  410804:	4631      	mov	r1, r6
  410806:	4640      	mov	r0, r8

00410808 <.LVL271>:
  410808:	f011 fea0 	bl	42254c <.LFE66>

0041080c <.LVL272>:
  41080c:	2800      	cmp	r0, #0
  41080e:	d066      	beq.n	4108de <.LVL298>

00410810 <.LVL273>:
   y = R->y;
  410810:	f505 7a0a 	add.w	sl, r5, #552	; 0x228

00410814 <.LVL274>:
   z = R->z;
  410814:	f505 6b8a 	add.w	fp, r5, #1104	; 0x450

00410818 <.LVL275>:
       err = mp_copy(P->x, x);
  410818:	4629      	mov	r1, r5
  41081a:	4620      	mov	r0, r4
  41081c:	f011 fe3d 	bl	42249a <.LFE85>

00410820 <.LVL276>:
   if (err == MP_OKAY)
  410820:	4604      	mov	r4, r0

00410822 <.LVL277>:
  410822:	2800      	cmp	r0, #0
  410824:	f000 8088 	beq.w	410938 <.LVL307>

00410828 <.LVL278>:
   if (err == MP_OKAY)
  410828:	2c00      	cmp	r4, #0
  41082a:	f000 80e8 	beq.w	4109fe <.LVL337+0x2>
   if (err == MP_OKAY)
  41082e:	2c00      	cmp	r4, #0
  410830:	f000 8103 	beq.w	410a3a <.LVL348+0x2>
   if (err == MP_OKAY) {
  410834:	bb1c      	cbnz	r4, 41087e <.LVL288>
       if (mp_isneg(y))
  410836:	f8d5 322c 	ldr.w	r3, [r5, #556]	; 0x22c
  41083a:	2b00      	cmp	r3, #0
  41083c:	f040 811f 	bne.w	410a7e <.LVL360+0x2>

00410840 <.LVL279>:
       err = mp_add(&t1, &t1, &t1);
  410840:	aa8e      	add	r2, sp, #568	; 0x238
  410842:	4611      	mov	r1, r2
  410844:	4610      	mov	r0, r2
  410846:	f011 fe0f 	bl	422468 <.LFE68>

0041084a <.LVL280>:
  41084a:	4604      	mov	r4, r0

0041084c <.LVL281>:
   if (err == MP_OKAY) {
  41084c:	2c00      	cmp	r4, #0
  41084e:	f040 8132 	bne.w	410ab6 <.LVL370>
       if (mp_cmp(&t1, modulus) != MP_LT)
  410852:	4639      	mov	r1, r7
  410854:	a88e      	add	r0, sp, #568	; 0x238

00410856 <.LVL282>:
  410856:	f011 fe79 	bl	42254c <.LFE66>

0041085a <.LVL283>:
  41085a:	f1b0 3fff 	cmp.w	r0, #4294967295
  41085e:	d008      	beq.n	410872 <.LVL286>
           err = mp_sub(&t1, modulus, &t1);
  410860:	aa8e      	add	r2, sp, #568	; 0x238
  410862:	4639      	mov	r1, r7
  410864:	4610      	mov	r0, r2
  410866:	f011 fe04 	bl	422472 <.LFE71>

0041086a <.LVL284>:
  41086a:	4604      	mov	r4, r0

0041086c <.LVL285>:
   if (err == MP_OKAY)
  41086c:	2c00      	cmp	r4, #0
  41086e:	f040 8132 	bne.w	410ad6 <.LVL376>

00410872 <.LVL286>:
       err = mp_add(&t1, y, &t1);
  410872:	aa8e      	add	r2, sp, #568	; 0x238
  410874:	4651      	mov	r1, sl
  410876:	4610      	mov	r0, r2
  410878:	f011 fdf6 	bl	422468 <.LFE68>

0041087c <.LVL287>:
  41087c:	4604      	mov	r4, r0

0041087e <.LVL288>:
   if (err == MP_OKAY) {
  41087e:	2c00      	cmp	r4, #0
  410880:	f000 8105 	beq.w	410a8e <.LVL363+0x4>
   if (err == MP_OKAY) {
  410884:	2c00      	cmp	r4, #0
  410886:	f000 8128 	beq.w	410ada <.LVL376+0x4>

0041088a <.LVL289>:
   if (err == MP_OKAY)
  41088a:	2c00      	cmp	r4, #0
  41088c:	f000 8150 	beq.w	410b30 <.LVL390+0x4>
   if (err == MP_OKAY)
  410890:	2c00      	cmp	r4, #0
  410892:	f000 81ae 	beq.w	410bf2 <.LVL418+0x2>
   if (err == MP_OKAY)
  410896:	2c00      	cmp	r4, #0
  410898:	f000 81c8 	beq.w	410c2c <.LVL430+0x2>
   if (err == MP_OKAY)
  41089c:	2c00      	cmp	r4, #0
  41089e:	f000 81e3 	beq.w	410c68 <.LVL442+0x2>
   if (err == MP_OKAY)
  4108a2:	2c00      	cmp	r4, #0
  4108a4:	f000 8160 	beq.w	410b68 <.LVL397>
   if (err == MP_OKAY)
  4108a8:	2c00      	cmp	r4, #0
  4108aa:	d1a2      	bne.n	4107f2 <.L136>
       err = mp_sub(&t2, &t1, y);
  4108ac:	4652      	mov	r2, sl
  4108ae:	a98e      	add	r1, sp, #568	; 0x238
  4108b0:	a804      	add	r0, sp, #16

004108b2 <.LVL290>:
  4108b2:	f011 fdde 	bl	422472 <.LFE71>

004108b6 <.LVL291>:
  4108b6:	4604      	mov	r4, r0

004108b8 <.LVL292>:
   if (err == MP_OKAY) {
  4108b8:	2c00      	cmp	r4, #0
  4108ba:	d19a      	bne.n	4107f2 <.L136>
       if (mp_isneg(y))
  4108bc:	f8d5 322c 	ldr.w	r3, [r5, #556]	; 0x22c
  4108c0:	2b00      	cmp	r3, #0
  4108c2:	f040 81f6 	bne.w	410cb2 <.LVL454+0x2>

004108c6 <.LVL293>:
       if (mp_isodd(y) == MP_YES)
  4108c6:	4650      	mov	r0, sl
  4108c8:	f011 fca7 	bl	42221a <.LFE0>

004108cc <.LVL294>:
  4108cc:	2801      	cmp	r0, #1
  4108ce:	f000 81f7 	beq.w	410cc0 <.LVL458>
       err = mp_div_2(y, y);
  4108d2:	4651      	mov	r1, sl
  4108d4:	4650      	mov	r0, sl
  4108d6:	f011 fdf9 	bl	4224cc <.LFE111>

004108da <.LVL296>:
  4108da:	4604      	mov	r4, r0

004108dc <.LVL297>:
  4108dc:	e789      	b.n	4107f2 <.L136>

004108de <.LVL298>:
            (get_digit_count(Q->z) && mp_cmp(P->z, Q->z) == MP_EQ) &&
  4108de:	f506 6b8a 	add.w	fp, r6, #1104	; 0x450
  4108e2:	4658      	mov	r0, fp
  4108e4:	f011 fdfc 	bl	4224e0 <.LFE115>

004108e8 <.LVL299>:
       if ( (mp_cmp(P->x, Q->x) == MP_EQ) &&
  4108e8:	2800      	cmp	r0, #0
  4108ea:	d091      	beq.n	410810 <.LVL273>
            (get_digit_count(Q->z) && mp_cmp(P->z, Q->z) == MP_EQ) &&
  4108ec:	4659      	mov	r1, fp
  4108ee:	f508 608a 	add.w	r0, r8, #1104	; 0x450
  4108f2:	f011 fe2b 	bl	42254c <.LFE66>

004108f6 <.LVL300>:
  4108f6:	2800      	cmp	r0, #0
  4108f8:	d18a      	bne.n	410810 <.LVL273>
            (mp_cmp(P->y, Q->y) == MP_EQ || mp_cmp(P->y, &t1) == MP_EQ)) {
  4108fa:	f508 7b0a 	add.w	fp, r8, #552	; 0x228
  4108fe:	4649      	mov	r1, r9
  410900:	4658      	mov	r0, fp
  410902:	f011 fe23 	bl	42254c <.LFE66>

00410906 <.LVL301>:
            (get_digit_count(Q->z) && mp_cmp(P->z, Q->z) == MP_EQ) &&
  410906:	b130      	cbz	r0, 410916 <.LVL302+0x6>
            (mp_cmp(P->y, Q->y) == MP_EQ || mp_cmp(P->y, &t1) == MP_EQ)) {
  410908:	a98e      	add	r1, sp, #568	; 0x238
  41090a:	4658      	mov	r0, fp
  41090c:	f011 fe1e 	bl	42254c <.LFE66>

00410910 <.LVL302>:
  410910:	2800      	cmp	r0, #0
  410912:	f47f af7d 	bne.w	410810 <.LVL273>
           mp_clear(&t1);
  410916:	a88e      	add	r0, sp, #568	; 0x238
  410918:	f011 fd5a 	bl	4223d0 <.LFE16>

0041091c <.LVL303>:
           mp_clear(&t2);
  41091c:	a804      	add	r0, sp, #16
  41091e:	f011 fd57 	bl	4223d0 <.LFE16>

00410922 <.LVL304>:
          return ecc_projective_dbl_point(P, R, a, modulus, mp);
  410922:	f8dd 348c 	ldr.w	r3, [sp, #1164]	; 0x48c
  410926:	9300      	str	r3, [sp, #0]
  410928:	463b      	mov	r3, r7
  41092a:	4652      	mov	r2, sl
  41092c:	4629      	mov	r1, r5
  41092e:	4640      	mov	r0, r8
  410930:	f005 fab8 	bl	415ea4 <.LFE18>

00410934 <.LVL305>:
  410934:	4604      	mov	r4, r0

00410936 <.LVL306>:
  410936:	e74b      	b.n	4107d0 <.LVL261>

00410938 <.LVL307>:
       err = mp_copy(P->y, y);
  410938:	4651      	mov	r1, sl
  41093a:	f508 700a 	add.w	r0, r8, #552	; 0x228

0041093e <.LVL308>:
  41093e:	f011 fdac 	bl	42249a <.LFE85>

00410942 <.LVL309>:
   if (err == MP_OKAY)
  410942:	4604      	mov	r4, r0
  410944:	2800      	cmp	r0, #0
  410946:	d161      	bne.n	410a0c <.LVL340>
       err = mp_copy(P->z, z);
  410948:	4659      	mov	r1, fp
  41094a:	f508 608a 	add.w	r0, r8, #1104	; 0x450

0041094e <.LVL310>:
  41094e:	f011 fda4 	bl	42249a <.LFE85>

00410952 <.LVL311>:
   if (err == MP_OKAY) {
  410952:	4604      	mov	r4, r0
  410954:	2800      	cmp	r0, #0
  410956:	f47f af67 	bne.w	410828 <.LVL278>
       if (!mp_iszero(Q->z)) {
  41095a:	f506 688a 	add.w	r8, r6, #1104	; 0x450

0041095e <.LVL312>:
  41095e:	4640      	mov	r0, r8

00410960 <.LVL313>:
  410960:	f011 fda0 	bl	4224a4 <.LFE93>

00410964 <.LVL314>:
  410964:	b128      	cbz	r0, 410972 <.LVL318>

00410966 <.LVL315>:
       err = mp_sqr(z, &t1);
  410966:	a98e      	add	r1, sp, #568	; 0x238
  410968:	4658      	mov	r0, fp
  41096a:	f011 fda5 	bl	4224b8 <.LFE105>

0041096e <.LVL316>:
  41096e:	4604      	mov	r4, r0

00410970 <.LVL317>:
  410970:	e75a      	b.n	410828 <.LVL278>

00410972 <.LVL318>:
           err = mp_sqr(Q->z, &t1);
  410972:	a98e      	add	r1, sp, #568	; 0x238
  410974:	4640      	mov	r0, r8
  410976:	f011 fd9f 	bl	4224b8 <.LFE105>

0041097a <.LVL319>:
           if (err == MP_OKAY)
  41097a:	4604      	mov	r4, r0
  41097c:	b1f0      	cbz	r0, 4109bc <.LVL328+0x6>
           if (err == MP_OKAY)
  41097e:	2c00      	cmp	r4, #0
  410980:	f47f af52 	bne.w	410828 <.LVL278>
               err = mp_montgomery_reduce(&t1, modulus, mp);
  410984:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  410988:	4639      	mov	r1, r7
  41098a:	a88e      	add	r0, sp, #568	; 0x238

0041098c <.LVL320>:
  41098c:	f011 fd99 	bl	4224c2 <.LFE110>

00410990 <.LVL321>:
  410990:	4604      	mov	r4, r0

00410992 <.LVL322>:
           if (err == MP_OKAY)
  410992:	2c00      	cmp	r4, #0
  410994:	d13a      	bne.n	410a0c <.LVL340>
               err = mp_mul(&t1, y, y);
  410996:	4652      	mov	r2, sl
  410998:	4651      	mov	r1, sl
  41099a:	a88e      	add	r0, sp, #568	; 0x238

0041099c <.LVL323>:
  41099c:	f011 fd73 	bl	422486 <.LFE86>

004109a0 <.LVL324>:
  4109a0:	4604      	mov	r4, r0

004109a2 <.LVL325>:
           if (err == MP_OKAY)
  4109a2:	2c00      	cmp	r4, #0
  4109a4:	f47f af40 	bne.w	410828 <.LVL278>
               err = mp_montgomery_reduce(y, modulus, mp);
  4109a8:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  4109ac:	4639      	mov	r1, r7
  4109ae:	4650      	mov	r0, sl

004109b0 <.LVL326>:
  4109b0:	f011 fd87 	bl	4224c2 <.LFE110>

004109b4 <.LVL327>:
  4109b4:	4604      	mov	r4, r0

004109b6 <.LVL328>:
   if (err == MP_OKAY)
  4109b6:	2c00      	cmp	r4, #0
  4109b8:	d0d5      	beq.n	410966 <.LVL315>
  4109ba:	e036      	b.n	410a2a <.LVL345>
               err = mp_montgomery_reduce(&t1, modulus, mp);
  4109bc:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  4109c0:	4639      	mov	r1, r7
  4109c2:	a88e      	add	r0, sp, #568	; 0x238

004109c4 <.LVL329>:
  4109c4:	f011 fd7d 	bl	4224c2 <.LFE110>

004109c8 <.LVL330>:
           if (err == MP_OKAY)
  4109c8:	4604      	mov	r4, r0
  4109ca:	2800      	cmp	r0, #0
  4109cc:	d1e1      	bne.n	410992 <.LVL322>
               err = mp_mul(&t1, x, x);
  4109ce:	462a      	mov	r2, r5
  4109d0:	4629      	mov	r1, r5
  4109d2:	a88e      	add	r0, sp, #568	; 0x238

004109d4 <.LVL331>:
  4109d4:	f011 fd57 	bl	422486 <.LFE86>

004109d8 <.LVL332>:
           if (err == MP_OKAY)
  4109d8:	4604      	mov	r4, r0
  4109da:	2800      	cmp	r0, #0
  4109dc:	d1e1      	bne.n	4109a2 <.LVL325>
               err = mp_montgomery_reduce(x, modulus, mp);
  4109de:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  4109e2:	4639      	mov	r1, r7
  4109e4:	4628      	mov	r0, r5

004109e6 <.LVL333>:
  4109e6:	f011 fd6c 	bl	4224c2 <.LFE110>

004109ea <.LVL334>:
           if (err == MP_OKAY)
  4109ea:	4604      	mov	r4, r0
  4109ec:	2800      	cmp	r0, #0
  4109ee:	d1e2      	bne.n	4109b6 <.LVL328>
               err = mp_mul(Q->z, &t1, &t1);
  4109f0:	aa8e      	add	r2, sp, #568	; 0x238
  4109f2:	4611      	mov	r1, r2
  4109f4:	4640      	mov	r0, r8

004109f6 <.LVL335>:
  4109f6:	f011 fd46 	bl	422486 <.LFE86>

004109fa <.LVL336>:
  4109fa:	4604      	mov	r4, r0

004109fc <.LVL337>:
  4109fc:	e7bf      	b.n	41097e <.LVL319+0x4>
       err = mp_montgomery_reduce(&t1, modulus, mp);
  4109fe:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  410a02:	4639      	mov	r1, r7
  410a04:	a88e      	add	r0, sp, #568	; 0x238

00410a06 <.LVL338>:
  410a06:	f011 fd5c 	bl	4224c2 <.LFE110>

00410a0a <.LVL339>:
  410a0a:	4604      	mov	r4, r0

00410a0c <.LVL340>:
   if (err == MP_OKAY)
  410a0c:	b9e4      	cbnz	r4, 410a48 <.LVL351>
       err = mp_mul(Q->x, &t1, &t2);
  410a0e:	aa04      	add	r2, sp, #16
  410a10:	a98e      	add	r1, sp, #568	; 0x238
  410a12:	9803      	ldr	r0, [sp, #12]

00410a14 <.LVL341>:
  410a14:	f011 fd37 	bl	422486 <.LFE86>

00410a18 <.LVL342>:
   if (err == MP_OKAY)
  410a18:	4604      	mov	r4, r0
  410a1a:	b9e0      	cbnz	r0, 410a56 <.LVL354>
       err = mp_montgomery_reduce(&t2, modulus, mp);
  410a1c:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  410a20:	4639      	mov	r1, r7
  410a22:	a804      	add	r0, sp, #16

00410a24 <.LVL343>:
  410a24:	f011 fd4d 	bl	4224c2 <.LFE110>

00410a28 <.LVL344>:
  410a28:	4604      	mov	r4, r0

00410a2a <.LVL345>:
   if (err == MP_OKAY)
  410a2a:	b9f4      	cbnz	r4, 410a6a <.LVL357>
       err = mp_mul(z, &t1, &t1);
  410a2c:	aa8e      	add	r2, sp, #568	; 0x238
  410a2e:	4611      	mov	r1, r2
  410a30:	4658      	mov	r0, fp

00410a32 <.LVL346>:
  410a32:	f011 fd28 	bl	422486 <.LFE86>

00410a36 <.LVL347>:
  410a36:	4604      	mov	r4, r0

00410a38 <.LVL348>:
  410a38:	e6f9      	b.n	41082e <.LVL278+0x6>
       err = mp_montgomery_reduce(&t1, modulus, mp);
  410a3a:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  410a3e:	4639      	mov	r1, r7
  410a40:	a88e      	add	r0, sp, #568	; 0x238

00410a42 <.LVL349>:
  410a42:	f011 fd3e 	bl	4224c2 <.LFE110>

00410a46 <.LVL350>:
  410a46:	4604      	mov	r4, r0

00410a48 <.LVL351>:
   if (err == MP_OKAY)
  410a48:	b9fc      	cbnz	r4, 410a8a <.LVL363>
       err = mp_mul(Q->y, &t1, &t1);
  410a4a:	aa8e      	add	r2, sp, #568	; 0x238
  410a4c:	4611      	mov	r1, r2
  410a4e:	4648      	mov	r0, r9

00410a50 <.LVL352>:
  410a50:	f011 fd19 	bl	422486 <.LFE86>

00410a54 <.LVL353>:
  410a54:	4604      	mov	r4, r0

00410a56 <.LVL354>:
   if (err == MP_OKAY)
  410a56:	2c00      	cmp	r4, #0
  410a58:	f47f aef8 	bne.w	41084c <.LVL281>
       err = mp_montgomery_reduce(&t1, modulus, mp);
  410a5c:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  410a60:	4639      	mov	r1, r7
  410a62:	a88e      	add	r0, sp, #568	; 0x238

00410a64 <.LVL355>:
  410a64:	f011 fd2d 	bl	4224c2 <.LFE110>

00410a68 <.LVL356>:
  410a68:	4604      	mov	r4, r0

00410a6a <.LVL357>:
   if (err == MP_OKAY)
  410a6a:	2c00      	cmp	r4, #0
  410a6c:	f47f aefe 	bne.w	41086c <.LVL285>
       err = mp_sub(y, &t1, y);
  410a70:	4652      	mov	r2, sl
  410a72:	a98e      	add	r1, sp, #568	; 0x238
  410a74:	4650      	mov	r0, sl

00410a76 <.LVL358>:
  410a76:	f011 fcfc 	bl	422472 <.LFE71>

00410a7a <.LVL359>:
  410a7a:	4604      	mov	r4, r0

00410a7c <.LVL360>:
  410a7c:	e6da      	b.n	410834 <.LVL278+0xc>
           err = mp_add(y, modulus, y);
  410a7e:	4652      	mov	r2, sl
  410a80:	4639      	mov	r1, r7
  410a82:	4650      	mov	r0, sl

00410a84 <.LVL361>:
  410a84:	f011 fcf0 	bl	422468 <.LFE68>

00410a88 <.LVL362>:
  410a88:	4604      	mov	r4, r0

00410a8a <.LVL363>:
   if (err == MP_OKAY)
  410a8a:	b96c      	cbnz	r4, 410aa8 <.LVL367>
  410a8c:	e6d8      	b.n	410840 <.LVL279>
       if (mp_cmp(&t1, modulus) != MP_LT)
  410a8e:	4639      	mov	r1, r7
  410a90:	a88e      	add	r0, sp, #568	; 0x238

00410a92 <.LVL364>:
  410a92:	f011 fd5b 	bl	42254c <.LFE66>

00410a96 <.LVL365>:
  410a96:	f1b0 3fff 	cmp.w	r0, #4294967295
  410a9a:	d006      	beq.n	410aaa <.LVL368>
           err = mp_sub(&t1, modulus, &t1);
  410a9c:	aa8e      	add	r2, sp, #568	; 0x238
  410a9e:	4639      	mov	r1, r7
  410aa0:	4610      	mov	r0, r2
  410aa2:	f011 fce6 	bl	422472 <.LFE71>

00410aa6 <.LVL366>:
  410aa6:	4604      	mov	r4, r0

00410aa8 <.LVL367>:
   if (err == MP_OKAY)
  410aa8:	bb24      	cbnz	r4, 410af4 <.LVL380>

00410aaa <.LVL368>:
       err = mp_sub(x, &t2, x);
  410aaa:	462a      	mov	r2, r5
  410aac:	a904      	add	r1, sp, #16
  410aae:	4628      	mov	r0, r5
  410ab0:	f011 fcdf 	bl	422472 <.LFE71>

00410ab4 <.LVL369>:
  410ab4:	4604      	mov	r4, r0

00410ab6 <.LVL370>:
   if (err == MP_OKAY) {
  410ab6:	bb24      	cbnz	r4, 410b02 <.LVL383>
       if (mp_isneg(x))
  410ab8:	686b      	ldr	r3, [r5, #4]
  410aba:	b933      	cbnz	r3, 410aca <.LVL373+0x2>

00410abc <.LVL371>:
       err = mp_add(&t2, &t2, &t2);
  410abc:	aa04      	add	r2, sp, #16
  410abe:	4611      	mov	r1, r2
  410ac0:	4610      	mov	r0, r2
  410ac2:	f011 fcd1 	bl	422468 <.LFE68>

00410ac6 <.LVL372>:
  410ac6:	4604      	mov	r4, r0

00410ac8 <.LVL373>:
  410ac8:	e6dc      	b.n	410884 <.LVL288+0x6>
           err = mp_add(x, modulus, x);
  410aca:	462a      	mov	r2, r5
  410acc:	4639      	mov	r1, r7
  410ace:	4628      	mov	r0, r5

00410ad0 <.LVL374>:
  410ad0:	f011 fcca 	bl	422468 <.LFE68>

00410ad4 <.LVL375>:
  410ad4:	4604      	mov	r4, r0

00410ad6 <.LVL376>:
   if (err == MP_OKAY)
  410ad6:	bb1c      	cbnz	r4, 410b20 <.LVL387>
  410ad8:	e7f0      	b.n	410abc <.LVL371>
       if (mp_cmp(&t2, modulus) != MP_LT)
  410ada:	4639      	mov	r1, r7
  410adc:	a804      	add	r0, sp, #16

00410ade <.LVL377>:
  410ade:	f011 fd35 	bl	42254c <.LFE66>

00410ae2 <.LVL378>:
  410ae2:	f1b0 3fff 	cmp.w	r0, #4294967295
  410ae6:	d006      	beq.n	410af6 <.LVL381>
           err = mp_sub(&t2, modulus, &t2);
  410ae8:	aa04      	add	r2, sp, #16
  410aea:	4639      	mov	r1, r7
  410aec:	4610      	mov	r0, r2
  410aee:	f011 fcc0 	bl	422472 <.LFE71>

00410af2 <.LVL379>:
  410af2:	4604      	mov	r4, r0

00410af4 <.LVL380>:
   if (err == MP_OKAY)
  410af4:	bb14      	cbnz	r4, 410b3c <.LVL393>

00410af6 <.LVL381>:
       err = mp_add(&t2, x, &t2);
  410af6:	aa04      	add	r2, sp, #16
  410af8:	4629      	mov	r1, r5
  410afa:	4610      	mov	r0, r2
  410afc:	f011 fcb4 	bl	422468 <.LFE68>

00410b00 <.LVL382>:
  410b00:	4604      	mov	r4, r0

00410b02 <.LVL383>:
   if (err == MP_OKAY) {
  410b02:	2c00      	cmp	r4, #0
  410b04:	d165      	bne.n	410bd2 <.LVL413>
       if (mp_cmp(&t2, modulus) != MP_LT)
  410b06:	4639      	mov	r1, r7
  410b08:	a804      	add	r0, sp, #16

00410b0a <.LVL384>:
  410b0a:	f011 fd1f 	bl	42254c <.LFE66>

00410b0e <.LVL385>:
  410b0e:	f1b0 3fff 	cmp.w	r0, #4294967295
  410b12:	d006      	beq.n	410b22 <.LVL388>
           err = mp_sub(&t2, modulus, &t2);
  410b14:	aa04      	add	r2, sp, #16
  410b16:	4639      	mov	r1, r7
  410b18:	4610      	mov	r0, r2
  410b1a:	f011 fcaa 	bl	422472 <.LFE71>

00410b1e <.LVL386>:
  410b1e:	4604      	mov	r4, r0

00410b20 <.LVL387>:
   if (err == MP_OKAY) {
  410b20:	b964      	cbnz	r4, 410b3c <.LVL393>

00410b22 <.LVL388>:
       if (!mp_iszero(Q->z)) {
  410b22:	f506 668a 	add.w	r6, r6, #1104	; 0x450

00410b26 <.LVL389>:
  410b26:	4630      	mov	r0, r6
  410b28:	f011 fcbc 	bl	4224a4 <.LFE93>

00410b2c <.LVL390>:
  410b2c:	2800      	cmp	r0, #0
  410b2e:	d039      	beq.n	410ba4 <.LVL406>
       err = mp_mul(z, x, z);
  410b30:	465a      	mov	r2, fp
  410b32:	4629      	mov	r1, r5
  410b34:	4658      	mov	r0, fp
  410b36:	f011 fca6 	bl	422486 <.LFE86>

00410b3a <.LVL392>:
  410b3a:	4604      	mov	r4, r0

00410b3c <.LVL393>:
   if (err == MP_OKAY)
  410b3c:	2c00      	cmp	r4, #0
  410b3e:	d041      	beq.n	410bc4 <.LVL410+0x2>
   if (err == MP_OKAY)
  410b40:	2c00      	cmp	r4, #0
  410b42:	d05c      	beq.n	410bfe <.LVL421+0x2>
   if (err == MP_OKAY)
  410b44:	2c00      	cmp	r4, #0
  410b46:	d078      	beq.n	410c3a <.LVL433+0x2>
   if (err == MP_OKAY) {
  410b48:	b9a4      	cbnz	r4, 410b74 <.LVL399>
       if (mp_isneg(x))
  410b4a:	686b      	ldr	r3, [r5, #4]
  410b4c:	2b00      	cmp	r3, #0
  410b4e:	f040 8092 	bne.w	410c76 <.LVL445+0x2>

00410b52 <.LVL394>:
       err = mp_sub(&t2, x, &t2);
  410b52:	aa04      	add	r2, sp, #16
  410b54:	4629      	mov	r1, r5
  410b56:	4610      	mov	r0, r2
  410b58:	f011 fc8b 	bl	422472 <.LFE71>

00410b5c <.LVL395>:
  410b5c:	4604      	mov	r4, r0

00410b5e <.LVL396>:
   if (err == MP_OKAY) {
  410b5e:	b9b4      	cbnz	r4, 410b8e <.LVL402>
       if (mp_isneg(&t2))
  410b60:	9b05      	ldr	r3, [sp, #20]
  410b62:	2b00      	cmp	r3, #0
  410b64:	f040 8097 	bne.w	410c96 <.LVL448+0x14>

00410b68 <.LVL397>:
       err = mp_sub(&t2, x, &t2);
  410b68:	aa04      	add	r2, sp, #16
  410b6a:	4629      	mov	r1, r5
  410b6c:	4610      	mov	r0, r2
  410b6e:	f011 fc80 	bl	422472 <.LFE71>

00410b72 <.LVL398>:
  410b72:	4604      	mov	r4, r0

00410b74 <.LVL399>:
   if (err == MP_OKAY) {
  410b74:	2c00      	cmp	r4, #0
  410b76:	f47f ae9f 	bne.w	4108b8 <.LVL292>
       if (mp_isneg(&t2))
  410b7a:	9b05      	ldr	r3, [sp, #20]
  410b7c:	2b00      	cmp	r3, #0
  410b7e:	f040 8091 	bne.w	410ca4 <.LVL451+0x2>

00410b82 <.LVL400>:
       err = mp_mul(&t2, y, &t2);
  410b82:	aa04      	add	r2, sp, #16
  410b84:	4651      	mov	r1, sl
  410b86:	4610      	mov	r0, r2
  410b88:	f011 fc7d 	bl	422486 <.LFE86>

00410b8c <.LVL401>:
  410b8c:	4604      	mov	r4, r0

00410b8e <.LVL402>:
   if (err == MP_OKAY)
  410b8e:	2c00      	cmp	r4, #0
  410b90:	f040 809c 	bne.w	410ccc <.LVL460>
       err = mp_montgomery_reduce(&t2, modulus, mp);
  410b94:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  410b98:	4639      	mov	r1, r7
  410b9a:	a804      	add	r0, sp, #16

00410b9c <.LVL403>:
  410b9c:	f011 fc91 	bl	4224c2 <.LFE110>

00410ba0 <.LVL404>:
  410ba0:	4604      	mov	r4, r0

00410ba2 <.LVL405>:
  410ba2:	e681      	b.n	4108a8 <.LVL289+0x1e>

00410ba4 <.LVL406>:
           err = mp_mul(z, Q->z, z);
  410ba4:	465a      	mov	r2, fp
  410ba6:	4631      	mov	r1, r6
  410ba8:	4658      	mov	r0, fp
  410baa:	f011 fc6c 	bl	422486 <.LFE86>

00410bae <.LVL407>:
           if (err == MP_OKAY)
  410bae:	4604      	mov	r4, r0
  410bb0:	2800      	cmp	r0, #0
  410bb2:	d1c3      	bne.n	410b3c <.LVL393>
               err = mp_montgomery_reduce(z, modulus, mp);
  410bb4:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  410bb8:	4639      	mov	r1, r7
  410bba:	4658      	mov	r0, fp

00410bbc <.LVL408>:
  410bbc:	f011 fc81 	bl	4224c2 <.LFE110>

00410bc0 <.LVL409>:
  410bc0:	4604      	mov	r4, r0

00410bc2 <.LVL410>:
  410bc2:	e662      	b.n	41088a <.LVL289>
       err = mp_montgomery_reduce(z, modulus, mp);
  410bc4:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  410bc8:	4639      	mov	r1, r7
  410bca:	4658      	mov	r0, fp

00410bcc <.LVL411>:
  410bcc:	f011 fc79 	bl	4224c2 <.LFE110>

00410bd0 <.LVL412>:
  410bd0:	4604      	mov	r4, r0

00410bd2 <.LVL413>:
   if (err == MP_OKAY)
  410bd2:	b9dc      	cbnz	r4, 410c0c <.LVL424>
       err = mp_mul(&t1, x, &t1);
  410bd4:	aa8e      	add	r2, sp, #568	; 0x238
  410bd6:	4629      	mov	r1, r5
  410bd8:	4610      	mov	r0, r2

00410bda <.LVL414>:
  410bda:	f011 fc54 	bl	422486 <.LFE86>

00410bde <.LVL415>:
   if (err == MP_OKAY)
  410bde:	4604      	mov	r4, r0
  410be0:	b9d8      	cbnz	r0, 410c1a <.LVL427>
       err = mp_montgomery_reduce(&t1, modulus, mp);
  410be2:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  410be6:	4639      	mov	r1, r7
  410be8:	a88e      	add	r0, sp, #568	; 0x238

00410bea <.LVL416>:
  410bea:	f011 fc6a 	bl	4224c2 <.LFE110>

00410bee <.LVL417>:
  410bee:	4604      	mov	r4, r0

00410bf0 <.LVL418>:
  410bf0:	e64e      	b.n	410890 <.LVL289+0x6>
       err = mp_sqr(x, x);
  410bf2:	4629      	mov	r1, r5
  410bf4:	4628      	mov	r0, r5

00410bf6 <.LVL419>:
  410bf6:	f011 fc5f 	bl	4224b8 <.LFE105>

00410bfa <.LVL420>:
  410bfa:	4604      	mov	r4, r0

00410bfc <.LVL421>:
  410bfc:	e7a0      	b.n	410b40 <.LVL393+0x4>
       err = mp_montgomery_reduce(x, modulus, mp);
  410bfe:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  410c02:	4639      	mov	r1, r7
  410c04:	4628      	mov	r0, r5

00410c06 <.LVL422>:
  410c06:	f011 fc5c 	bl	4224c2 <.LFE110>

00410c0a <.LVL423>:
  410c0a:	4604      	mov	r4, r0

00410c0c <.LVL424>:
   if (err == MP_OKAY)
  410c0c:	b9e4      	cbnz	r4, 410c48 <.LVL436>
       err = mp_mul(&t2, x, &t2);
  410c0e:	aa04      	add	r2, sp, #16
  410c10:	4629      	mov	r1, r5
  410c12:	4610      	mov	r0, r2

00410c14 <.LVL425>:
  410c14:	f011 fc37 	bl	422486 <.LFE86>

00410c18 <.LVL426>:
  410c18:	4604      	mov	r4, r0

00410c1a <.LVL427>:
   if (err == MP_OKAY)
  410c1a:	b9dc      	cbnz	r4, 410c54 <.LVL439>
       err = mp_montgomery_reduce(&t2, modulus, mp);
  410c1c:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  410c20:	4639      	mov	r1, r7
  410c22:	a804      	add	r0, sp, #16

00410c24 <.LVL428>:
  410c24:	f011 fc4d 	bl	4224c2 <.LFE110>

00410c28 <.LVL429>:
  410c28:	4604      	mov	r4, r0

00410c2a <.LVL430>:
  410c2a:	e634      	b.n	410896 <.LVL289+0xc>
       err = mp_mul(&t1, x, &t1);
  410c2c:	aa8e      	add	r2, sp, #568	; 0x238
  410c2e:	4629      	mov	r1, r5
  410c30:	4610      	mov	r0, r2

00410c32 <.LVL431>:
  410c32:	f011 fc28 	bl	422486 <.LFE86>

00410c36 <.LVL432>:
  410c36:	4604      	mov	r4, r0

00410c38 <.LVL433>:
  410c38:	e784      	b.n	410b44 <.LVL393+0x8>
       err = mp_montgomery_reduce(&t1, modulus, mp);
  410c3a:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  410c3e:	4639      	mov	r1, r7
  410c40:	a88e      	add	r0, sp, #568	; 0x238

00410c42 <.LVL434>:
  410c42:	f011 fc3e 	bl	4224c2 <.LFE110>

00410c46 <.LVL435>:
  410c46:	4604      	mov	r4, r0

00410c48 <.LVL436>:
   if (err == MP_OKAY)
  410c48:	b9dc      	cbnz	r4, 410c82 <.LVL448>
       err = mp_sqr(y, x);
  410c4a:	4629      	mov	r1, r5
  410c4c:	4650      	mov	r0, sl

00410c4e <.LVL437>:
  410c4e:	f011 fc33 	bl	4224b8 <.LFE105>

00410c52 <.LVL438>:
  410c52:	4604      	mov	r4, r0

00410c54 <.LVL439>:
   if (err == MP_OKAY)
  410c54:	2c00      	cmp	r4, #0
  410c56:	d182      	bne.n	410b5e <.LVL396>
       err = mp_montgomery_reduce(x, modulus, mp);
  410c58:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
  410c5c:	4639      	mov	r1, r7
  410c5e:	4628      	mov	r0, r5

00410c60 <.LVL440>:
  410c60:	f011 fc2f 	bl	4224c2 <.LFE110>

00410c64 <.LVL441>:
  410c64:	4604      	mov	r4, r0

00410c66 <.LVL442>:
  410c66:	e619      	b.n	41089c <.LVL289+0x12>
       err = mp_sub(x, &t2, x);
  410c68:	462a      	mov	r2, r5
  410c6a:	a904      	add	r1, sp, #16
  410c6c:	4628      	mov	r0, r5

00410c6e <.LVL443>:
  410c6e:	f011 fc00 	bl	422472 <.LFE71>

00410c72 <.LVL444>:
  410c72:	4604      	mov	r4, r0

00410c74 <.LVL445>:
  410c74:	e768      	b.n	410b48 <.LVL393+0xc>
           err = mp_add(x, modulus, x);
  410c76:	462a      	mov	r2, r5
  410c78:	4639      	mov	r1, r7
  410c7a:	4628      	mov	r0, r5

00410c7c <.LVL446>:
  410c7c:	f011 fbf4 	bl	422468 <.LFE68>

00410c80 <.LVL447>:
  410c80:	4604      	mov	r4, r0

00410c82 <.LVL448>:
   if (err == MP_OKAY)
  410c82:	2c00      	cmp	r4, #0
  410c84:	f43f af65 	beq.w	410b52 <.LVL394>
   if (err == MP_OKAY)
  410c88:	2c00      	cmp	r4, #0
  410c8a:	f43f af7a 	beq.w	410b82 <.LVL400>
   if (err == MP_OKAY) {
  410c8e:	2c00      	cmp	r4, #0
  410c90:	f47f adaf 	bne.w	4107f2 <.L136>
  410c94:	e617      	b.n	4108c6 <.LVL293>
           err = mp_add(&t2, modulus, &t2);
  410c96:	aa04      	add	r2, sp, #16
  410c98:	4639      	mov	r1, r7
  410c9a:	4610      	mov	r0, r2

00410c9c <.LVL449>:
  410c9c:	f011 fbe4 	bl	422468 <.LFE68>

00410ca0 <.LVL450>:
  410ca0:	4604      	mov	r4, r0

00410ca2 <.LVL451>:
  410ca2:	e5fe      	b.n	4108a2 <.LVL289+0x18>
           err = mp_add(&t2, modulus, &t2);
  410ca4:	aa04      	add	r2, sp, #16
  410ca6:	4639      	mov	r1, r7
  410ca8:	4610      	mov	r0, r2

00410caa <.LVL452>:
  410caa:	f011 fbdd 	bl	422468 <.LFE68>

00410cae <.LVL453>:
  410cae:	4604      	mov	r4, r0

00410cb0 <.LVL454>:
  410cb0:	e7ea      	b.n	410c88 <.LVL448+0x6>
           err = mp_add(y, modulus, y);
  410cb2:	4652      	mov	r2, sl
  410cb4:	4639      	mov	r1, r7
  410cb6:	4650      	mov	r0, sl

00410cb8 <.LVL455>:
  410cb8:	f011 fbd6 	bl	422468 <.LFE68>

00410cbc <.LVL456>:
  410cbc:	4604      	mov	r4, r0

00410cbe <.LVL457>:
  410cbe:	e7e6      	b.n	410c8e <.LVL448+0xc>

00410cc0 <.LVL458>:
           err = mp_add(y, modulus, y);
  410cc0:	4652      	mov	r2, sl
  410cc2:	4639      	mov	r1, r7
  410cc4:	4650      	mov	r0, sl
  410cc6:	f011 fbcf 	bl	422468 <.LFE68>

00410cca <.LVL459>:
  410cca:	4604      	mov	r4, r0

00410ccc <.LVL460>:
   if (err == MP_OKAY)
  410ccc:	2c00      	cmp	r4, #0
  410cce:	f47f ad90 	bne.w	4107f2 <.L136>
  410cd2:	e5fe      	b.n	4108d2 <.LVL294+0x6>

00410cd4 <.LVL461>:
       return ECC_BAD_ARG_E;
  410cd4:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
  410cd8:	e57a      	b.n	4107d0 <.LVL261>
  410cda:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
  410cde:	e577      	b.n	4107d0 <.LVL261>

Disassembly of section .text._malloc_r%51:

00410ce0 <_malloc_r>:
  410ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00410ce4 <.LCFI0>:
  410ce4:	f101 060b 	add.w	r6, r1, #11
  410ce8:	2e16      	cmp	r6, #22
  410cea:	b083      	sub	sp, #12

00410cec <.LCFI1>:
  410cec:	4605      	mov	r5, r0
  410cee:	f240 809e 	bls.w	410e2e <.LVL46>

00410cf2 <.LVL1>:
  410cf2:	f036 0607 	bics.w	r6, r6, #7

00410cf6 <.LVL2>:
  410cf6:	f100 80bd 	bmi.w	410e74 <.LCFI3>
  410cfa:	42b1      	cmp	r1, r6
  410cfc:	f200 80ba 	bhi.w	410e74 <.LCFI3>
  410d00:	f00d fa7c 	bl	41e1fc <.LFE173>

00410d04 <.LVL3>:
  410d04:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  410d08:	f0c0 828b 	bcc.w	411222 <.LVL171>
  410d0c:	0a73      	lsrs	r3, r6, #9
  410d0e:	f000 80b8 	beq.w	410e82 <.LCFI5>
  410d12:	2b04      	cmp	r3, #4
  410d14:	f200 816e 	bhi.w	410ff4 <.LCFI11>
  410d18:	09b3      	lsrs	r3, r6, #6
  410d1a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  410d1e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  410d22:	00c3      	lsls	r3, r0, #3

00410d24 <.LVL4>:
  410d24:	4fb9      	ldr	r7, [pc, #740]	; (41100c <.LCFI11+0x18>)
  410d26:	443b      	add	r3, r7
  410d28:	f1a3 0108 	sub.w	r1, r3, #8

00410d2c <.LVL5>:
  410d2c:	685c      	ldr	r4, [r3, #4]

00410d2e <.LVL6>:
  410d2e:	42a1      	cmp	r1, r4
  410d30:	d106      	bne.n	410d40 <.LVL10>
  410d32:	e00c      	b.n	410d4e <.LVL14>

00410d34 <.LVL7>:
  410d34:	2a00      	cmp	r2, #0
  410d36:	f280 80aa 	bge.w	410e8e <.LVL62>

00410d3a <.LVL8>:
  410d3a:	68e4      	ldr	r4, [r4, #12]
  410d3c:	42a1      	cmp	r1, r4
  410d3e:	d006      	beq.n	410d4e <.LVL14>

00410d40 <.LVL10>:
  410d40:	6863      	ldr	r3, [r4, #4]
  410d42:	f023 0303 	bic.w	r3, r3, #3

00410d46 <.LVL11>:
  410d46:	1b9a      	subs	r2, r3, r6

00410d48 <.LVL12>:
  410d48:	2a0f      	cmp	r2, #15
  410d4a:	ddf3      	ble.n	410d34 <.LVL7>

00410d4c <.LVL13>:
  410d4c:	4670      	mov	r0, lr

00410d4e <.LVL14>:
  410d4e:	693c      	ldr	r4, [r7, #16]
  410d50:	f8df e2d0 	ldr.w	lr, [pc, #720]	; 411024 <.LCFI11+0x30>
  410d54:	4574      	cmp	r4, lr
  410d56:	f000 819f 	beq.w	411098 <.LVL115>
  410d5a:	6863      	ldr	r3, [r4, #4]
  410d5c:	f023 0303 	bic.w	r3, r3, #3

00410d60 <.LVL16>:
  410d60:	1b9a      	subs	r2, r3, r6

00410d62 <.LVL17>:
  410d62:	2a0f      	cmp	r2, #15
  410d64:	f300 8184 	bgt.w	411070 <.LVL110>
  410d68:	2a00      	cmp	r2, #0
  410d6a:	f8c7 e014 	str.w	lr, [r7, #20]
  410d6e:	f8c7 e010 	str.w	lr, [r7, #16]
  410d72:	f280 809d 	bge.w	410eb0 <.LCFI7>
  410d76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  410d7a:	f080 8155 	bcs.w	411028 <.LVL101>
  410d7e:	08db      	lsrs	r3, r3, #3

00410d80 <.LVL18>:
  410d80:	f103 0c01 	add.w	ip, r3, #1
  410d84:	1099      	asrs	r1, r3, #2
  410d86:	687a      	ldr	r2, [r7, #4]

00410d88 <.LVL19>:
  410d88:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  410d8c:	f8c4 8008 	str.w	r8, [r4, #8]
  410d90:	2301      	movs	r3, #1

00410d92 <.LVL20>:
  410d92:	408b      	lsls	r3, r1
  410d94:	eb07 01cc 	add.w	r1, r7, ip, lsl #3

00410d98 <.LVL21>:
  410d98:	4313      	orrs	r3, r2
  410d9a:	3908      	subs	r1, #8

00410d9c <.LVL22>:
  410d9c:	60e1      	str	r1, [r4, #12]
  410d9e:	607b      	str	r3, [r7, #4]

00410da0 <.LVL23>:
  410da0:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  410da4:	f8c8 400c 	str.w	r4, [r8, #12]

00410da8 <.LVL24>:
  410da8:	1082      	asrs	r2, r0, #2
  410daa:	2401      	movs	r4, #1

00410dac <.LVL25>:
  410dac:	4094      	lsls	r4, r2

00410dae <.LVL26>:
  410dae:	429c      	cmp	r4, r3
  410db0:	f200 808b 	bhi.w	410eca <.LCFI9>
  410db4:	421c      	tst	r4, r3
  410db6:	d106      	bne.n	410dc6 <.LVL30>
  410db8:	f020 0003 	bic.w	r0, r0, #3

00410dbc <.LVL27>:
  410dbc:	0064      	lsls	r4, r4, #1

00410dbe <.LVL28>:
  410dbe:	421c      	tst	r4, r3
  410dc0:	f100 0004 	add.w	r0, r0, #4

00410dc4 <.LVL29>:
  410dc4:	d0fa      	beq.n	410dbc <.LVL27>

00410dc6 <.LVL30>:
  410dc6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3

00410dca <.LVL31>:
  410dca:	46cc      	mov	ip, r9
  410dcc:	4680      	mov	r8, r0

00410dce <.LVL32>:
  410dce:	f8dc 300c 	ldr.w	r3, [ip, #12]

00410dd2 <.LVL33>:
  410dd2:	459c      	cmp	ip, r3
  410dd4:	d107      	bne.n	410de6 <.LVL36>
  410dd6:	e161      	b.n	41109c <.LVL116>

00410dd8 <.LVL34>:
  410dd8:	2a00      	cmp	r2, #0
  410dda:	f280 816f 	bge.w	4110bc <.LVL121>
  410dde:	68db      	ldr	r3, [r3, #12]
  410de0:	459c      	cmp	ip, r3
  410de2:	f000 815b 	beq.w	41109c <.LVL116>

00410de6 <.LVL36>:
  410de6:	6859      	ldr	r1, [r3, #4]
  410de8:	f021 0103 	bic.w	r1, r1, #3

00410dec <.LVL37>:
  410dec:	1b8a      	subs	r2, r1, r6

00410dee <.LVL38>:
  410dee:	2a0f      	cmp	r2, #15
  410df0:	ddf2      	ble.n	410dd8 <.LVL34>
  410df2:	f8d3 c00c 	ldr.w	ip, [r3, #12]

00410df6 <.LVL39>:
  410df6:	f8d3 8008 	ldr.w	r8, [r3, #8]

00410dfa <.LVL40>:
  410dfa:	9301      	str	r3, [sp, #4]
  410dfc:	199c      	adds	r4, r3, r6

00410dfe <.LVL41>:
  410dfe:	4628      	mov	r0, r5

00410e00 <.LVL42>:
  410e00:	f046 0601 	orr.w	r6, r6, #1
  410e04:	f042 0501 	orr.w	r5, r2, #1

00410e08 <.LVL43>:
  410e08:	605e      	str	r6, [r3, #4]
  410e0a:	f8c8 c00c 	str.w	ip, [r8, #12]
  410e0e:	f8cc 8008 	str.w	r8, [ip, #8]
  410e12:	617c      	str	r4, [r7, #20]
  410e14:	613c      	str	r4, [r7, #16]
  410e16:	f8c4 e00c 	str.w	lr, [r4, #12]
  410e1a:	f8c4 e008 	str.w	lr, [r4, #8]
  410e1e:	6065      	str	r5, [r4, #4]
  410e20:	505a      	str	r2, [r3, r1]
  410e22:	f011 fbcb 	bl	4225bc <.LFE144>

00410e26 <.LVL44>:
  410e26:	9b01      	ldr	r3, [sp, #4]
  410e28:	f103 0408 	add.w	r4, r3, #8

00410e2c <.LVL45>:
  410e2c:	e01e      	b.n	410e6c <.LVL58>

00410e2e <.LVL46>:
  410e2e:	2910      	cmp	r1, #16
  410e30:	d820      	bhi.n	410e74 <.LCFI3>
  410e32:	f00d f9e3 	bl	41e1fc <.LFE173>

00410e36 <.LVL47>:
  410e36:	2610      	movs	r6, #16

00410e38 <.LVL48>:
  410e38:	2318      	movs	r3, #24
  410e3a:	2002      	movs	r0, #2

00410e3c <.LVL49>:
  410e3c:	4f73      	ldr	r7, [pc, #460]	; (41100c <.LCFI11+0x18>)
  410e3e:	443b      	add	r3, r7

00410e40 <.LVL50>:
  410e40:	f1a3 0208 	sub.w	r2, r3, #8

00410e44 <.LVL51>:
  410e44:	685c      	ldr	r4, [r3, #4]

00410e46 <.LVL52>:
  410e46:	4294      	cmp	r4, r2
  410e48:	f000 8131 	beq.w	4110ae <.LVL119>

00410e4c <.LVL53>:
  410e4c:	6863      	ldr	r3, [r4, #4]
  410e4e:	68e1      	ldr	r1, [r4, #12]
  410e50:	68a6      	ldr	r6, [r4, #8]
  410e52:	f023 0303 	bic.w	r3, r3, #3

00410e56 <.LVL54>:
  410e56:	4423      	add	r3, r4

00410e58 <.LVL55>:
  410e58:	4628      	mov	r0, r5
  410e5a:	685a      	ldr	r2, [r3, #4]
  410e5c:	60f1      	str	r1, [r6, #12]
  410e5e:	f042 0201 	orr.w	r2, r2, #1
  410e62:	608e      	str	r6, [r1, #8]
  410e64:	605a      	str	r2, [r3, #4]

00410e66 <.LVL56>:
  410e66:	f011 fba9 	bl	4225bc <.LFE144>

00410e6a <.LVL57>:
  410e6a:	3408      	adds	r4, #8

00410e6c <.LVL58>:
  410e6c:	4620      	mov	r0, r4
  410e6e:	b003      	add	sp, #12

00410e70 <.LCFI2>:
  410e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00410e74 <.LCFI3>:
  410e74:	2400      	movs	r4, #0
  410e76:	230c      	movs	r3, #12
  410e78:	4620      	mov	r0, r4

00410e7a <.LVL60>:
  410e7a:	602b      	str	r3, [r5, #0]
  410e7c:	b003      	add	sp, #12

00410e7e <.LCFI4>:
  410e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00410e82 <.LCFI5>:
  410e82:	2040      	movs	r0, #64	; 0x40
  410e84:	f44f 7300 	mov.w	r3, #512	; 0x200
  410e88:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  410e8c:	e74a      	b.n	410d24 <.LVL4>

00410e8e <.LVL62>:
  410e8e:	4423      	add	r3, r4

00410e90 <.LVL63>:
  410e90:	68e1      	ldr	r1, [r4, #12]

00410e92 <.LVL64>:
  410e92:	685a      	ldr	r2, [r3, #4]

00410e94 <.LVL65>:
  410e94:	68a6      	ldr	r6, [r4, #8]

00410e96 <.LVL66>:
  410e96:	f042 0201 	orr.w	r2, r2, #1
  410e9a:	60f1      	str	r1, [r6, #12]
  410e9c:	4628      	mov	r0, r5
  410e9e:	608e      	str	r6, [r1, #8]
  410ea0:	605a      	str	r2, [r3, #4]

00410ea2 <.LVL67>:
  410ea2:	f011 fb8b 	bl	4225bc <.LFE144>

00410ea6 <.LVL68>:
  410ea6:	3408      	adds	r4, #8

00410ea8 <.LVL69>:
  410ea8:	4620      	mov	r0, r4
  410eaa:	b003      	add	sp, #12

00410eac <.LCFI6>:
  410eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00410eb0 <.LCFI7>:
  410eb0:	4423      	add	r3, r4

00410eb2 <.LVL71>:
  410eb2:	4628      	mov	r0, r5

00410eb4 <.LVL72>:
  410eb4:	685a      	ldr	r2, [r3, #4]

00410eb6 <.LVL73>:
  410eb6:	f042 0201 	orr.w	r2, r2, #1
  410eba:	605a      	str	r2, [r3, #4]

00410ebc <.LVL74>:
  410ebc:	f011 fb7e 	bl	4225bc <.LFE144>

00410ec0 <.LVL75>:
  410ec0:	3408      	adds	r4, #8

00410ec2 <.LVL76>:
  410ec2:	4620      	mov	r0, r4
  410ec4:	b003      	add	sp, #12

00410ec6 <.LCFI8>:
  410ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00410eca <.LCFI9>:
  410eca:	68bc      	ldr	r4, [r7, #8]

00410ecc <.LVL78>:
  410ecc:	6863      	ldr	r3, [r4, #4]
  410ece:	f023 0a03 	bic.w	sl, r3, #3
  410ed2:	45b2      	cmp	sl, r6
  410ed4:	d303      	bcc.n	410ede <.LBB4>
  410ed6:	ebaa 0306 	sub.w	r3, sl, r6
  410eda:	2b0f      	cmp	r3, #15
  410edc:	dc7a      	bgt.n	410fd4 <.LBE4>

00410ede <.LBB4>:
  410ede:	4b4c      	ldr	r3, [pc, #304]	; (411010 <.LCFI11+0x1c>)
  410ee0:	4a4c      	ldr	r2, [pc, #304]	; (411014 <.LCFI11+0x20>)
  410ee2:	9301      	str	r3, [sp, #4]
  410ee4:	6811      	ldr	r1, [r2, #0]
  410ee6:	681a      	ldr	r2, [r3, #0]
  410ee8:	eb06 0801 	add.w	r8, r6, r1
  410eec:	3201      	adds	r2, #1
  410eee:	bf16      	itet	ne
  410ef0:	f108 088f 	addne.w	r8, r8, #143	; 0x8f
  410ef4:	f108 0810 	addeq.w	r8, r8, #16
  410ef8:	f028 087f 	bicne.w	r8, r8, #127	; 0x7f
  410efc:	4641      	mov	r1, r8
  410efe:	4628      	mov	r0, r5
  410f00:	f010 fe66 	bl	421bd0 <.LFE91>

00410f04 <.LVL80>:
  410f04:	f1b0 3fff 	cmp.w	r0, #4294967295
  410f08:	eb04 0b0a 	add.w	fp, r4, sl

00410f0c <.LVL81>:
  410f0c:	4681      	mov	r9, r0

00410f0e <.LVL82>:
  410f0e:	9b01      	ldr	r3, [sp, #4]
  410f10:	f000 80f1 	beq.w	4110f6 <.LBB10+0x4>
  410f14:	4583      	cmp	fp, r0
  410f16:	f200 80ec 	bhi.w	4110f2 <.LBB10>
  410f1a:	4a3f      	ldr	r2, [pc, #252]	; (411018 <.LCFI11+0x24>)
  410f1c:	6811      	ldr	r1, [r2, #0]
  410f1e:	4441      	add	r1, r8
  410f20:	6011      	str	r1, [r2, #0]
  410f22:	f000 8147 	beq.w	4111b4 <.LBB12+0xa>

00410f26 <.LVL83>:
  410f26:	6818      	ldr	r0, [r3, #0]

00410f28 <.LVL84>:
  410f28:	9201      	str	r2, [sp, #4]
  410f2a:	3001      	adds	r0, #1
  410f2c:	bf1b      	ittet	ne
  410f2e:	eba9 0b0b 	subne.w	fp, r9, fp

00410f32 <.LVL85>:
  410f32:	4459      	addne	r1, fp
  410f34:	f8c3 9000 	streq.w	r9, [r3]
  410f38:	6011      	strne	r1, [r2, #0]
  410f3a:	f019 0107 	ands.w	r1, r9, #7

00410f3e <.LVL86>:
  410f3e:	bf1c      	itt	ne
  410f40:	f1c1 0308 	rsbne	r3, r1, #8
  410f44:	4499      	addne	r9, r3

00410f46 <.LVL87>:
  410f46:	eb09 0308 	add.w	r3, r9, r8
  410f4a:	bf14      	ite	ne
  410f4c:	f1c1 0188 	rsbne	r1, r1, #136	; 0x88

00410f50 <.LVL88>:
  410f50:	2180      	moveq	r1, #128	; 0x80
  410f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  410f56:	eba1 0803 	sub.w	r8, r1, r3

00410f5a <.LVL89>:
  410f5a:	4641      	mov	r1, r8
  410f5c:	4628      	mov	r0, r5
  410f5e:	f010 fe37 	bl	421bd0 <.LFE91>

00410f62 <.LVL90>:
  410f62:	1c43      	adds	r3, r0, #1
  410f64:	9a01      	ldr	r2, [sp, #4]
  410f66:	f000 813f 	beq.w	4111e8 <.LVL167>
  410f6a:	eba0 0309 	sub.w	r3, r0, r9
  410f6e:	4443      	add	r3, r8
  410f70:	f043 0301 	orr.w	r3, r3, #1

00410f74 <.LVL91>:
  410f74:	6811      	ldr	r1, [r2, #0]
  410f76:	f8c7 9008 	str.w	r9, [r7, #8]
  410f7a:	4441      	add	r1, r8
  410f7c:	42bc      	cmp	r4, r7
  410f7e:	f8c9 3004 	str.w	r3, [r9, #4]
  410f82:	6011      	str	r1, [r2, #0]
  410f84:	d017      	beq.n	410fb6 <.LVL94>
  410f86:	f1ba 0f0f 	cmp.w	sl, #15
  410f8a:	f240 80ee 	bls.w	41116a <.LBB11>
  410f8e:	6860      	ldr	r0, [r4, #4]
  410f90:	f1aa 030c 	sub.w	r3, sl, #12
  410f94:	f023 0307 	bic.w	r3, r3, #7

00410f98 <.LVL93>:
  410f98:	eb04 0e03 	add.w	lr, r4, r3
  410f9c:	f000 0001 	and.w	r0, r0, #1
  410fa0:	f04f 0c05 	mov.w	ip, #5
  410fa4:	4318      	orrs	r0, r3
  410fa6:	2b0f      	cmp	r3, #15
  410fa8:	6060      	str	r0, [r4, #4]
  410faa:	f8ce c004 	str.w	ip, [lr, #4]
  410fae:	f8ce c008 	str.w	ip, [lr, #8]
  410fb2:	f200 8110 	bhi.w	4111d6 <.LBB13>

00410fb6 <.LVL94>:
  410fb6:	4b19      	ldr	r3, [pc, #100]	; (41101c <.LCFI11+0x28>)
  410fb8:	68bc      	ldr	r4, [r7, #8]

00410fba <.LVL95>:
  410fba:	681a      	ldr	r2, [r3, #0]
  410fbc:	4291      	cmp	r1, r2
  410fbe:	bf88      	it	hi
  410fc0:	6019      	strhi	r1, [r3, #0]
  410fc2:	4b17      	ldr	r3, [pc, #92]	; (411020 <.LCFI11+0x2c>)
  410fc4:	681a      	ldr	r2, [r3, #0]
  410fc6:	4291      	cmp	r1, r2
  410fc8:	6862      	ldr	r2, [r4, #4]
  410fca:	bf88      	it	hi
  410fcc:	6019      	strhi	r1, [r3, #0]
  410fce:	f022 0203 	bic.w	r2, r2, #3
  410fd2:	e094      	b.n	4110fe <.LBE10>

00410fd4 <.LBE4>:
  410fd4:	19a2      	adds	r2, r4, r6
  410fd6:	f043 0301 	orr.w	r3, r3, #1

00410fda <.LVL97>:
  410fda:	f046 0601 	orr.w	r6, r6, #1
  410fde:	6066      	str	r6, [r4, #4]
  410fe0:	4628      	mov	r0, r5
  410fe2:	60ba      	str	r2, [r7, #8]

00410fe4 <.LVL98>:
  410fe4:	6053      	str	r3, [r2, #4]
  410fe6:	f011 fae9 	bl	4225bc <.LFE144>

00410fea <.LVL99>:
  410fea:	3408      	adds	r4, #8
  410fec:	4620      	mov	r0, r4
  410fee:	b003      	add	sp, #12

00410ff0 <.LCFI10>:
  410ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00410ff4 <.LCFI11>:
  410ff4:	2b14      	cmp	r3, #20
  410ff6:	d970      	bls.n	4110da <.LVL130>
  410ff8:	2b54      	cmp	r3, #84	; 0x54
  410ffa:	f200 80ac 	bhi.w	411156 <.LVL150>
  410ffe:	0b33      	lsrs	r3, r6, #12
  411000:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  411004:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  411008:	00c3      	lsls	r3, r0, #3
  41100a:	e68b      	b.n	410d24 <.LVL4>
  41100c:	2040cc80 	.word	0x2040cc80
  411010:	2040d778 	.word	0x2040d778
  411014:	2040d774 	.word	0x2040d774
  411018:	2040d65c 	.word	0x2040d65c
  41101c:	2040d76c 	.word	0x2040d76c
  411020:	2040d770 	.word	0x2040d770
  411024:	2040cc88 	.word	0x2040cc88

00411028 <.LVL101>:
  411028:	0a5a      	lsrs	r2, r3, #9

0041102a <.LVL102>:
  41102a:	2a04      	cmp	r2, #4
  41102c:	d95b      	bls.n	4110e6 <.LVL131>
  41102e:	2a14      	cmp	r2, #20
  411030:	f200 80b3 	bhi.w	41119a <.LVL159>
  411034:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  411038:	00c9      	lsls	r1, r1, #3
  41103a:	325b      	adds	r2, #91	; 0x5b

0041103c <.LVL103>:
  41103c:	eb07 0c01 	add.w	ip, r7, r1
  411040:	5879      	ldr	r1, [r7, r1]
  411042:	f1ac 0c08 	sub.w	ip, ip, #8

00411046 <.LVL104>:
  411046:	458c      	cmp	ip, r1
  411048:	f000 8093 	beq.w	411172 <.LBE11>

0041104c <.LVL105>:
  41104c:	684a      	ldr	r2, [r1, #4]
  41104e:	f022 0203 	bic.w	r2, r2, #3
  411052:	4293      	cmp	r3, r2
  411054:	d27d      	bcs.n	411152 <.LVL148>
  411056:	6889      	ldr	r1, [r1, #8]
  411058:	458c      	cmp	ip, r1
  41105a:	d1f7      	bne.n	41104c <.LVL105>

0041105c <.LVL107>:
  41105c:	f8dc 200c 	ldr.w	r2, [ip, #12]

00411060 <.LVL108>:
  411060:	687b      	ldr	r3, [r7, #4]

00411062 <.LVL109>:
  411062:	60e2      	str	r2, [r4, #12]
  411064:	f8c4 c008 	str.w	ip, [r4, #8]
  411068:	6094      	str	r4, [r2, #8]
  41106a:	f8cc 400c 	str.w	r4, [ip, #12]
  41106e:	e69b      	b.n	410da8 <.LVL24>

00411070 <.LVL110>:
  411070:	19a1      	adds	r1, r4, r6

00411072 <.LVL111>:
  411072:	f046 0c01 	orr.w	ip, r6, #1
  411076:	f042 0601 	orr.w	r6, r2, #1
  41107a:	f8c4 c004 	str.w	ip, [r4, #4]
  41107e:	4628      	mov	r0, r5

00411080 <.LVL112>:
  411080:	6179      	str	r1, [r7, #20]
  411082:	6139      	str	r1, [r7, #16]
  411084:	f8c1 e00c 	str.w	lr, [r1, #12]
  411088:	f8c1 e008 	str.w	lr, [r1, #8]
  41108c:	604e      	str	r6, [r1, #4]
  41108e:	50e2      	str	r2, [r4, r3]
  411090:	f011 fa94 	bl	4225bc <.LFE144>

00411094 <.LVL113>:
  411094:	3408      	adds	r4, #8

00411096 <.LVL114>:
  411096:	e6e9      	b.n	410e6c <.LVL58>

00411098 <.LVL115>:
  411098:	687b      	ldr	r3, [r7, #4]
  41109a:	e685      	b.n	410da8 <.LVL24>

0041109c <.LVL116>:
  41109c:	f108 0801 	add.w	r8, r8, #1

004110a0 <.LVL117>:
  4110a0:	f018 0f03 	tst.w	r8, #3
  4110a4:	f10c 0c08 	add.w	ip, ip, #8

004110a8 <.LVL118>:
  4110a8:	f47f ae91 	bne.w	410dce <.LVL32>
  4110ac:	e037      	b.n	41111e <.LVL140>

004110ae <.LVL119>:
  4110ae:	68dc      	ldr	r4, [r3, #12]
  4110b0:	42a3      	cmp	r3, r4
  4110b2:	bf08      	it	eq
  4110b4:	3002      	addeq	r0, #2
  4110b6:	f43f ae4a 	beq.w	410d4e <.LVL14>
  4110ba:	e6c7      	b.n	410e4c <.LVL53>

004110bc <.LVL121>:
  4110bc:	4419      	add	r1, r3

004110be <.LVL122>:
  4110be:	461c      	mov	r4, r3

004110c0 <.LVL123>:
  4110c0:	684a      	ldr	r2, [r1, #4]

004110c2 <.LVL124>:
  4110c2:	68db      	ldr	r3, [r3, #12]

004110c4 <.LVL125>:
  4110c4:	f854 6f08 	ldr.w	r6, [r4, #8]!

004110c8 <.LVL126>:
  4110c8:	f042 0201 	orr.w	r2, r2, #1
  4110cc:	604a      	str	r2, [r1, #4]

004110ce <.LVL127>:
  4110ce:	4628      	mov	r0, r5

004110d0 <.LVL128>:
  4110d0:	60f3      	str	r3, [r6, #12]
  4110d2:	609e      	str	r6, [r3, #8]
  4110d4:	f011 fa72 	bl	4225bc <.LFE144>

004110d8 <.LVL129>:
  4110d8:	e6c8      	b.n	410e6c <.LVL58>

004110da <.LVL130>:
  4110da:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4110de:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4110e2:	00c3      	lsls	r3, r0, #3
  4110e4:	e61e      	b.n	410d24 <.LVL4>

004110e6 <.LVL131>:
  4110e6:	099a      	lsrs	r2, r3, #6
  4110e8:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4110ec:	00c9      	lsls	r1, r1, #3
  4110ee:	3238      	adds	r2, #56	; 0x38
  4110f0:	e7a4      	b.n	41103c <.LVL103>

004110f2 <.LBB10>:
  4110f2:	42bc      	cmp	r4, r7
  4110f4:	d059      	beq.n	4111aa <.LBB12>
  4110f6:	68bc      	ldr	r4, [r7, #8]

004110f8 <.LVL133>:
  4110f8:	6862      	ldr	r2, [r4, #4]
  4110fa:	f022 0203 	bic.w	r2, r2, #3

004110fe <.LBE10>:
  4110fe:	4296      	cmp	r6, r2
  411100:	eba2 0306 	sub.w	r3, r2, r6

00411104 <.LVL135>:
  411104:	d802      	bhi.n	41110c <.LVL136>
  411106:	2b0f      	cmp	r3, #15
  411108:	f73f af64 	bgt.w	410fd4 <.LBE4>

0041110c <.LVL136>:
  41110c:	4628      	mov	r0, r5
  41110e:	f011 fa55 	bl	4225bc <.LFE144>

00411112 <.LVL137>:
  411112:	2400      	movs	r4, #0
  411114:	e6aa      	b.n	410e6c <.LVL58>

00411116 <.LVL138>:
  411116:	f859 3908 	ldr.w	r3, [r9], #-8

0041111a <.LVL139>:
  41111a:	4599      	cmp	r9, r3
  41111c:	d17f      	bne.n	41121e <.LVL170>

0041111e <.LVL140>:
  41111e:	f010 0f03 	tst.w	r0, #3
  411122:	f100 30ff 	add.w	r0, r0, #4294967295
  411126:	d1f6      	bne.n	411116 <.LVL138>
  411128:	687b      	ldr	r3, [r7, #4]
  41112a:	ea23 0304 	bic.w	r3, r3, r4
  41112e:	607b      	str	r3, [r7, #4]

00411130 <.LVL142>:
  411130:	0064      	lsls	r4, r4, #1
  411132:	429c      	cmp	r4, r3
  411134:	f63f aec9 	bhi.w	410eca <.LCFI9>
  411138:	2c00      	cmp	r4, #0
  41113a:	f43f aec6 	beq.w	410eca <.LCFI9>
  41113e:	421c      	tst	r4, r3
  411140:	4640      	mov	r0, r8

00411142 <.LVL144>:
  411142:	f47f ae40 	bne.w	410dc6 <.LVL30>

00411146 <.LVL145>:
  411146:	0064      	lsls	r4, r4, #1

00411148 <.LVL146>:
  411148:	421c      	tst	r4, r3
  41114a:	f100 0004 	add.w	r0, r0, #4

0041114e <.LVL147>:
  41114e:	d0fa      	beq.n	411146 <.LVL145>
  411150:	e639      	b.n	410dc6 <.LVL30>

00411152 <.LVL148>:
  411152:	468c      	mov	ip, r1

00411154 <.LVL149>:
  411154:	e782      	b.n	41105c <.LVL107>

00411156 <.LVL150>:
  411156:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  41115a:	d813      	bhi.n	411184 <.LVL158>
  41115c:	0bf3      	lsrs	r3, r6, #15
  41115e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  411162:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  411166:	00c3      	lsls	r3, r0, #3
  411168:	e5dc      	b.n	410d24 <.LVL4>

0041116a <.LBB11>:
  41116a:	2301      	movs	r3, #1
  41116c:	f8c9 3004 	str.w	r3, [r9, #4]

00411170 <.LVL152>:
  411170:	e7cc      	b.n	41110c <.LVL136>

00411172 <.LBE11>:
  411172:	687b      	ldr	r3, [r7, #4]

00411174 <.LVL154>:
  411174:	1092      	asrs	r2, r2, #2

00411176 <.LVL155>:
  411176:	2101      	movs	r1, #1

00411178 <.LVL156>:
  411178:	fa01 f202 	lsl.w	r2, r1, r2
  41117c:	4313      	orrs	r3, r2
  41117e:	607b      	str	r3, [r7, #4]

00411180 <.LVL157>:
  411180:	4662      	mov	r2, ip
  411182:	e76e      	b.n	411062 <.LVL109>

00411184 <.LVL158>:
  411184:	f240 5254 	movw	r2, #1364	; 0x554
  411188:	4293      	cmp	r3, r2
  41118a:	d81e      	bhi.n	4111ca <.LBE12>
  41118c:	0cb3      	lsrs	r3, r6, #18
  41118e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  411192:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  411196:	00c3      	lsls	r3, r0, #3
  411198:	e5c4      	b.n	410d24 <.LVL4>

0041119a <.LVL159>:
  41119a:	2a54      	cmp	r2, #84	; 0x54
  41119c:	d828      	bhi.n	4111f0 <.LBE13>
  41119e:	0b1a      	lsrs	r2, r3, #12
  4111a0:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4111a4:	00c9      	lsls	r1, r1, #3
  4111a6:	326e      	adds	r2, #110	; 0x6e
  4111a8:	e748      	b.n	41103c <.LVL103>

004111aa <.LBB12>:
  4111aa:	4a20      	ldr	r2, [pc, #128]	; (41122c <.LVL171+0xa>)
  4111ac:	6811      	ldr	r1, [r2, #0]
  4111ae:	4441      	add	r1, r8
  4111b0:	6011      	str	r1, [r2, #0]
  4111b2:	e6b8      	b.n	410f26 <.LVL83>
  4111b4:	f01b 0f7f 	tst.w	fp, #127	; 0x7f
  4111b8:	f47f aeb5 	bne.w	410f26 <.LVL83>

004111bc <.LVL161>:
  4111bc:	eb0a 0308 	add.w	r3, sl, r8

004111c0 <.LVL162>:
  4111c0:	68ba      	ldr	r2, [r7, #8]
  4111c2:	f043 0301 	orr.w	r3, r3, #1

004111c6 <.LVL163>:
  4111c6:	6053      	str	r3, [r2, #4]
  4111c8:	e6f5      	b.n	410fb6 <.LVL94>

004111ca <.LBE12>:
  4111ca:	207f      	movs	r0, #127	; 0x7f
  4111cc:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4111d0:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4111d4:	e5a6      	b.n	410d24 <.LVL4>

004111d6 <.LBB13>:
  4111d6:	f104 0108 	add.w	r1, r4, #8
  4111da:	4628      	mov	r0, r5
  4111dc:	9201      	str	r2, [sp, #4]
  4111de:	f008 f8cf 	bl	419380 <_free_r>

004111e2 <.LVL166>:
  4111e2:	9a01      	ldr	r2, [sp, #4]
  4111e4:	6811      	ldr	r1, [r2, #0]
  4111e6:	e6e6      	b.n	410fb6 <.LVL94>

004111e8 <.LVL167>:
  4111e8:	2301      	movs	r3, #1

004111ea <.LVL168>:
  4111ea:	f04f 0800 	mov.w	r8, #0
  4111ee:	e6c1      	b.n	410f74 <.LVL91>

004111f0 <.LBE13>:
  4111f0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4111f4:	d805      	bhi.n	411202 <.LBE13+0x12>
  4111f6:	0bda      	lsrs	r2, r3, #15
  4111f8:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4111fc:	00c9      	lsls	r1, r1, #3
  4111fe:	3277      	adds	r2, #119	; 0x77
  411200:	e71c      	b.n	41103c <.LVL103>
  411202:	f240 5154 	movw	r1, #1364	; 0x554
  411206:	428a      	cmp	r2, r1
  411208:	d805      	bhi.n	411216 <.LBE13+0x26>
  41120a:	0c9a      	lsrs	r2, r3, #18
  41120c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  411210:	00c9      	lsls	r1, r1, #3
  411212:	327c      	adds	r2, #124	; 0x7c
  411214:	e712      	b.n	41103c <.LVL103>
  411216:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  41121a:	227e      	movs	r2, #126	; 0x7e
  41121c:	e70e      	b.n	41103c <.LVL103>

0041121e <.LVL170>:
  41121e:	687b      	ldr	r3, [r7, #4]
  411220:	e786      	b.n	411130 <.LVL142>

00411222 <.LVL171>:
  411222:	08f0      	lsrs	r0, r6, #3
  411224:	f106 0308 	add.w	r3, r6, #8
  411228:	e608      	b.n	410e3c <.LVL49>
  41122a:	bf00      	nop
  41122c:	2040d65c 	.word	0x2040d65c

Disassembly of section .rodata.client_key_der_2048%52:

00411230 <client_key_der_2048>:
  411230:	a4048230 02000102 00010182 2bd103c3     0..............+
  411240:	32a439fe c8533b45 7c2a2b84 aabd9a74     .9.2E;S..+*|t...
  411250:	4707522a b236a6d6 d08e3207 c67b69ba     *R.G..6..2...i{.
  411260:	d49e44c3 2dfd4881 678ba268 c875a1bb     .D...H.-h..g..u.
  411270:	d24a2c36 ba8bf71b eff90dcf 1e81f1ec     6,J.............
  411280:	47039b7b cc65bf9a 6924657f 8914e8a6     {..G..e..e$i....
  411290:	f734e45b 9314b0c5 3a7b67f5 01e1787a     [.4......g{:zx..
  4112a0:	a6915656 d28d4213 4c9c403c df86d1ef     VV...B..<@.L....
  4112b0:	0c1b5137 f1f53ba1 e4354aa3 df96cee1     7Q...;...J5.....
  4112c0:	4ebf7e1b e810d097 813008a8 430b20af     .~.N......0.. .C
  4112d0:	6774c514 6f8232b4 88c2868d 83369940     ..tg.2.o....@.6.
  4112e0:	72401eba 52d71722 b0732465 cd19efce     ..@r"..Re$s.....
  4112f0:	6c78ffae 0312c07b 0d724ed4 a33b6d50     ..xl{....Nr.Pm;.
  411300:	5e99a33b 0cd9c89d 8ad9b385 db2654d9     ;..^.........T&.
  411310:	bbacfa6d c44c25ff 71f479d1 184086d3     m....%L..y.q..@.
  411320:	b563b013 c4304e72 2d868497 15d72f56     ..c.rN0....-V/..
  411330:	aec07ff7 e55bfcf5 d3baa1fb 00010302     ......[.........
  411340:	01820201 e6a20001 71105fd8 2e9e0864     ........._.qd...
  411350:	1e6dd16d b10ad285 2cce478c 12a06a51     m.m......G.,Qj..
  411360:	91de539e ea6d1d4c 77f27b59 d9c6d9aa     .S..L.m.Y{.w....
  411370:	e1d8ab8a 2663e416 136cb5ff a5e3b859     ......c&..l.Y...
  411380:	2e1772c8 e56f9f0c 6f763f59 c211b149     .r....o.Y?voI...
  411390:	29162e5a 8eb7de0d a2d540dc a11ee0ee     Z..).....@......
  4113a0:	db97bef4 14966386 600998cd 9c76302d     .....c.....`-0v.
  4113b0:	88e6cd3c 799247ee e2005a0b 7c115f5e     <....G.y.Z..^_.|
  4113c0:	b708f97d 2a890620 ab00fd5d b3f0e122     }... ..*]..."...
  4113d0:	5ea924bc 001f0e26 9a21fe2d d36d5b53     .$.^&...-.!.S[m.
  4113e0:	8294ab2b d8364368 22c62ff6 5d41b5fc     +...hC6../."..A]
  4113f0:	ea60330d e87e7da4 5691554b 8f575cd3     .3`..}~.KU.V.\W.
  411400:	2f17941f 9ee9deaa 8acff4a8 e4a08e4c     .../........L...
  411410:	cfb27356 69c5864f 2024f33c 0c965c8b     Vs..O..i<.$ .\..
  411420:	3b126bfa dfc1679a a5b296c6 9b0d92d5     .k.;.g..........
  411430:	24684209 50d44510 483917e4 948b35d0     .Bh$.E.P..9H.5..
  411440:	8fde116d 810259ca 24ea0081 3369f9a7     m....Y.....$..i3
  411450:	52dc71e9 2821887d bade492f cce91672     .q.R}.!(/I..r...
  411460:	0d887a47 58845794 b0813a16 a6cfa23f     Gz...W.X.:..?...
  411470:	06b01e6c e78f0029 dbac7677 5ed9c7ca     l...)...wv.....^
  411480:	90263f9b 38fcae52 bb140090 94580fb4     .?&.R..8......X.
  411490:	7e6a2fe7 21414f1c 1f5931d4 8d1a8a4e     ./j~.OA!.1Y.N...
  4114a0:	226c57a7 7ef4e5d8 cb10a632 0355a564     .Wl"...~2...d.U.
  4114b0:	0527a687 b6d7c38c ba4db227 8f47da30     ..'.....'.M.0.G.
  4114c0:	8b3dd354 98948d84 8102a558 38d50081     T.=.....X......8
  4114d0:	c58fc31b 0b470c93 c592356f c8468db0     ......G.o5....F.
  4114e0:	f58f1892 eff70a80 b980fea1 caba2ab5     .............*..
  4114f0:	a55db018 8d93d007 1c049cd8 a68e62d4     ..]..........b..
  411500:	ff018126 632a8ace aa403534 89de806d     &.....*c45@.m...
  411510:	4d576a23 93ad6e9e 0b90564e 8b739d6d     #jWM.n..NV..m.s.
  411520:	3d27ae0c aaf04ede 67786cc5 9c52946c     ..'=.N...lxgl.R.
  411530:	2d6c6737 dfafbbef c43c90a6 968dcf47     7gl-......<.G...
  411540:	b4a9989e 50a6c59f fbf0b3dc 81021774     .......P....t...
  411550:	09835e80 7cbabd62 7442bfa2 d21c7cf5     .^..b..|..Bt.|..
  411560:	0d04c969 3d3e7e85 18c31224 f329f37b     i....~>=$...{.).
  411570:	6c760e5f 41e47559 329d6984 ab22cdf3     _.vlYu.A.i.2..".
  411580:	4aba35b0 d9e53cb2 4f62b658 9ee5de5d     .5.J.<..X.bO]...
  411590:	b253ca0a b39ef72c 795b0a6b 916eec65     ..S.,...k.[ye.n.
  4115a0:	f620924e ed16fcfc e20c76d3 69b27fec     N. ......v.....i
  4115b0:	0e786b13 b464465a a025b75e 4b3a755a     .kx.ZFd.^.%.Zu:K
  4115c0:	3e3cc7ef b826fdf7 0a99c420 c3be739a     ..<>..&. ....s..
  4115d0:	81810219 9344ba00 1934ac14 60915f3b     ......D...4.;_.`
  4115e0:	d6b4f7ac 51360581 65e83d53 dc2eafdc     ......6QS=.e....
  4115f0:	7dc93e61 f0877fb8 82039b3b 72ce3729     a>.}....;...)7.r
  411600:	b1d5114e a0070cc1 8d4a9199 cf79ec7f     N.........J...y.
  411610:	e9b539f1 f762ec85 64bc7dda 0e3c224d     .9....b..}.dM"<.
  411620:	f551d6f2 c099d887 0f5d2011 e25bfd29     ..Q...... ].).[.
  411630:	d91cd9ae fc6d5621 ed5fd084 181c1510     ....!Vm..._.....
  411640:	3dc4e721 9ed0d74b 22cf956a 9e7b03c9     !..=K...j.."..{.
  411650:	fc0160e3 8081022f cf4bd011 9fb9671b     .`../.....K..g..
  411660:	86477510 c231ae65 59ac30c6 0fd95006     .uG.e.1..0.Y.P..
  411670:	f70670b5 62c8d3f0 6edaa87c d33f21f6     .p.....b|..n.!?.
  411680:	8aea5f7f 2ad93fab d251f35e e33730c2     ._...?.*^.Q..07.
  411690:	0d75a32d 34214d1e 5c7057d5 ec72bf89     -.u..M!4.Wp\..r.
  4116a0:	d5686e4a 337418cd 453a8c4e 4096e68f     Jnh...t3N.:E...@
  4116b0:	19f963eb dd513a86 f3b04b89 285d9ff9     .c...:Q..K....](
  4116c0:	35be3895 e75ccaab a1345393 39135d45     .8.5..\..S4.E].9
  4116d0:	a1464265 bff5cd9f                       eBF.....

Disassembly of section .text.APP_Tasks%53:

004116d8 <APP_Tasks>:

  Remarks:
    See prototype in app.h.
 */

void APP_Tasks(void) {
  4116d8:	b510      	push	{r4, lr}

004116da <.LCFI60>:

    /* Check the application's current state. */
    switch (appData.state) {
  4116da:	4b63      	ldr	r3, [pc, #396]	; (411868 <.LVL197+0xa>)
  4116dc:	781b      	ldrb	r3, [r3, #0]
  4116de:	2b14      	cmp	r3, #20
  4116e0:	f200 8206 	bhi.w	411af0 <.LVL218+0x6>
  4116e4:	e8df f013 	tbh	[pc, r3, lsl #1]
  4116e8:	00190015 	.word	0x00190015
  4116ec:	002d0023 	.word	0x002d0023
  4116f0:	003d0037 	.word	0x003d0037
  4116f4:	00510047 	.word	0x00510047
  4116f8:	0065005b 	.word	0x0065005b
  4116fc:	00a1006f 	.word	0x00a1006f
  411700:	008d00ab 	.word	0x008d00ab
  411704:	007900b5 	.word	0x007900b5
  411708:	00970083 	.word	0x00970083
  41170c:	020400c4 	.word	0x020400c4
  411710:	01b2      	.short	0x01b2
            /* Show Hyperterminal is working using available output functions */
            // SYS_MESSAGE("SYS_MESSAGE:" "\r\n Application created " __DATE__ " " __TIME__ " initialized!\r\n");            
            // SYS_DEBUG(SYS_ERROR_INFO,"SYS_DEBUG:" "\r\n Application created " __DATE__ " " __TIME__ " initialized!\r\n");
            // SYS_CONSOLE_Write(SYS_CONSOLE_INDEX_0, STDOUT_FILENO, msgBuffer, strlen(msgBuffer));            

            appData.state = APP_STATE_TEST_MD5;
  411712:	2201      	movs	r2, #1
  411714:	4b54      	ldr	r3, [pc, #336]	; (411868 <.LVL197+0xa>)
  411716:	701a      	strb	r2, [r3, #0]
            break;
  411718:	bd10      	pop	{r4, pc}
        }

        case APP_STATE_TEST_MD5:
#ifndef NO_MD5
            testCount++;
  41171a:	4a54      	ldr	r2, [pc, #336]	; (41186c <.LVL197+0xe>)
  41171c:	6813      	ldr	r3, [r2, #0]
  41171e:	3301      	adds	r3, #1
  411720:	6013      	str	r3, [r2, #0]
            md5_test();
  411722:	f00c f9d5 	bl	41dad0 <md5_test>

00411726 <.LVL181>:
#endif
            appData.state = APP_STATE_TEST_SHA;
  411726:	2202      	movs	r2, #2
  411728:	4b4f      	ldr	r3, [pc, #316]	; (411868 <.LVL197+0xa>)
  41172a:	701a      	strb	r2, [r3, #0]
            break;
  41172c:	bd10      	pop	{r4, pc}


         case APP_STATE_TEST_SHA:
#ifndef NO_SHA
            testCount++;
  41172e:	4a4f      	ldr	r2, [pc, #316]	; (41186c <.LVL197+0xe>)
  411730:	6813      	ldr	r3, [r2, #0]
  411732:	3301      	adds	r3, #1
  411734:	6013      	str	r3, [r2, #0]
            sha_test();
  411736:	f00b fd85 	bl	41d244 <sha_test>

0041173a <.LVL182>:
#endif
            appData.state = APP_STATE_TEST_SHA256;
  41173a:	2203      	movs	r2, #3
  41173c:	4b4a      	ldr	r3, [pc, #296]	; (411868 <.LVL197+0xa>)
  41173e:	701a      	strb	r2, [r3, #0]
            break;
  411740:	bd10      	pop	{r4, pc}

         case APP_STATE_TEST_SHA256:
#ifndef NO_SHA256
            testCount++;
  411742:	4a4a      	ldr	r2, [pc, #296]	; (41186c <.LVL197+0xe>)
  411744:	6813      	ldr	r3, [r2, #0]
  411746:	3301      	adds	r3, #1
  411748:	6013      	str	r3, [r2, #0]
            sha256_test();
  41174a:	f00d f8ab 	bl	41e8a4 <.LFE2>

0041174e <.LVL183>:
#endif
            appData.state = APP_STATE_TEST_SHA384;
  41174e:	2204      	movs	r2, #4
  411750:	4b45      	ldr	r3, [pc, #276]	; (411868 <.LVL197+0xa>)
  411752:	701a      	strb	r2, [r3, #0]
            break;
  411754:	bd10      	pop	{r4, pc}
            
        case APP_STATE_TEST_SHA384:
#ifdef WOLFSSL_SHA384
            sha384_test();
  411756:	f00d fea1 	bl	41f49c <sha384_test>

0041175a <.LVL184>:
#endif
            appData.state = APP_STATE_TEST_SHA512;
  41175a:	2205      	movs	r2, #5
  41175c:	4b42      	ldr	r3, [pc, #264]	; (411868 <.LVL197+0xa>)
  41175e:	701a      	strb	r2, [r3, #0]
            break;
  411760:	bd10      	pop	{r4, pc}

        case APP_STATE_TEST_SHA512:
#ifdef WOLFSSL_SHA512
            testCount++;
  411762:	4a42      	ldr	r2, [pc, #264]	; (41186c <.LVL197+0xe>)
  411764:	6813      	ldr	r3, [r2, #0]
  411766:	3301      	adds	r3, #1
  411768:	6013      	str	r3, [r2, #0]
            sha512_test();
  41176a:	f00d fed5 	bl	41f518 <.LFE166>

0041176e <.LVL185>:
#endif
            appData.state = APP_STATE_TEST_HMAC_MD5;
  41176e:	2206      	movs	r2, #6
  411770:	4b3d      	ldr	r3, [pc, #244]	; (411868 <.LVL197+0xa>)
  411772:	701a      	strb	r2, [r3, #0]
            break;
  411774:	bd10      	pop	{r4, pc}
  
        case APP_STATE_TEST_HMAC_MD5:
#if !defined(NO_HMAC) && !defined(NO_MD5)
            testCount++;
  411776:	4a3d      	ldr	r2, [pc, #244]	; (41186c <.LVL197+0xe>)
  411778:	6813      	ldr	r3, [r2, #0]
  41177a:	3301      	adds	r3, #1
  41177c:	6013      	str	r3, [r2, #0]
            hmac_md5_test();
  41177e:	f00b ffe5 	bl	41d74c <.LFE19>

00411782 <.LVL186>:
#endif
            appData.state = APP_STATE_TEST_HMAC_SHA;
  411782:	2207      	movs	r2, #7
  411784:	4b38      	ldr	r3, [pc, #224]	; (411868 <.LVL197+0xa>)
  411786:	701a      	strb	r2, [r3, #0]
            break;
  411788:	bd10      	pop	{r4, pc}
            
        case APP_STATE_TEST_HMAC_SHA:
#if !defined(NO_HMAC) && !defined(NO_SHA)
            testCount++;
  41178a:	4a38      	ldr	r2, [pc, #224]	; (41186c <.LVL197+0xe>)
  41178c:	6813      	ldr	r3, [r2, #0]
  41178e:	3301      	adds	r3, #1
  411790:	6013      	str	r3, [r2, #0]
            hmac_sha_test();
  411792:	f00c f835 	bl	41d800 <.LFE168>

00411796 <.LVL187>:
#endif
            appData.state = APP_STATE_TEST_HMAC_SHA256;
  411796:	2208      	movs	r2, #8
  411798:	4b33      	ldr	r3, [pc, #204]	; (411868 <.LVL197+0xa>)
  41179a:	701a      	strb	r2, [r3, #0]
            break;
  41179c:	bd10      	pop	{r4, pc}
             
        case APP_STATE_TEST_HMAC_SHA256:
#if !defined(NO_HMAC) && !defined(NO_SHA256)
            testCount++;
  41179e:	4a33      	ldr	r2, [pc, #204]	; (41186c <.LVL197+0xe>)
  4117a0:	6813      	ldr	r3, [r2, #0]
  4117a2:	3301      	adds	r3, #1
  4117a4:	6013      	str	r3, [r2, #0]
            hmac_sha256_test();
  4117a6:	f00c f885 	bl	41d8b4 <.LFE169>

004117aa <.LVL188>:
#endif
            appData.state = APP_STATE_TEST_HMAC_SHA384;
  4117aa:	2209      	movs	r2, #9
  4117ac:	4b2e      	ldr	r3, [pc, #184]	; (411868 <.LVL197+0xa>)
  4117ae:	701a      	strb	r2, [r3, #0]
            break;
  4117b0:	bd10      	pop	{r4, pc}
              
        case APP_STATE_TEST_HMAC_SHA384:
#if !defined(NO_HMAC) && defined(WOLFSSL_SHA384)
            testCount++;
  4117b2:	4a2e      	ldr	r2, [pc, #184]	; (41186c <.LVL197+0xe>)
  4117b4:	6813      	ldr	r3, [r2, #0]
  4117b6:	3301      	adds	r3, #1
  4117b8:	6013      	str	r3, [r2, #0]
            hmac_sha384_test();
  4117ba:	f00c f8d5 	bl	41d968 <.LFE170>

004117be <.LVL189>:
#endif
            appData.state = APP_STATE_TEST_HMAC_SHA512;
  4117be:	220a      	movs	r2, #10
  4117c0:	4b29      	ldr	r3, [pc, #164]	; (411868 <.LVL197+0xa>)
  4117c2:	701a      	strb	r2, [r3, #0]
            break;
  4117c4:	bd10      	pop	{r4, pc}
              
        case APP_STATE_TEST_HMAC_SHA512:
#if !defined(NO_HMAC) && defined(WOLFSSL_SHA512)
            testCount++;
  4117c6:	4a29      	ldr	r2, [pc, #164]	; (41186c <.LVL197+0xe>)
  4117c8:	6813      	ldr	r3, [r2, #0]
  4117ca:	3301      	adds	r3, #1
  4117cc:	6013      	str	r3, [r2, #0]
            hmac_sha512_test();
  4117ce:	f00b fd95 	bl	41d2fc <.LFE164>

004117d2 <.LVL190>:
#endif
            appData.state = APP_STATE_TEST_RANDOM;
  4117d2:	220f      	movs	r2, #15
  4117d4:	4b24      	ldr	r3, [pc, #144]	; (411868 <.LVL197+0xa>)
  4117d6:	701a      	strb	r2, [r3, #0]
            break;
  4117d8:	bd10      	pop	{r4, pc}
            
        case APP_STATE_TEST_RANDOM:
#ifndef NO_RNG_TEST
            testCount++;
  4117da:	4a24      	ldr	r2, [pc, #144]	; (41186c <.LVL197+0xe>)
  4117dc:	6813      	ldr	r3, [r2, #0]
  4117de:	3301      	adds	r3, #1
  4117e0:	6013      	str	r3, [r2, #0]
            random_test();
  4117e2:	f00f fda3 	bl	42132c <.LFE148>

004117e6 <.LVL191>:
#endif
            appData.state = APP_STATE_TEST_ECC;
  4117e6:	2210      	movs	r2, #16
  4117e8:	4b1f      	ldr	r3, [pc, #124]	; (411868 <.LVL197+0xa>)
  4117ea:	701a      	strb	r2, [r3, #0]
            break;
  4117ec:	bd10      	pop	{r4, pc}
			
        case APP_STATE_TEST_ECC:
#ifdef HAVE_ECC
            testCount++;
  4117ee:	4a1f      	ldr	r2, [pc, #124]	; (41186c <.LVL197+0xe>)
  4117f0:	6813      	ldr	r3, [r2, #0]
  4117f2:	3301      	adds	r3, #1
  4117f4:	6013      	str	r3, [r2, #0]
            ecc_test();
  4117f6:	f006 fc9f 	bl	418138 <ecc_test>

004117fa <.LVL192>:
#endif
            appData.state = APP_STATE_TEST_AES;
  4117fa:	220d      	movs	r2, #13
  4117fc:	4b1a      	ldr	r3, [pc, #104]	; (411868 <.LVL197+0xa>)
  4117fe:	701a      	strb	r2, [r3, #0]
            break;
  411800:	bd10      	pop	{r4, pc}
                          
        case APP_STATE_TEST_AES:
#ifndef NO_AES
            testCount++;
  411802:	4a1a      	ldr	r2, [pc, #104]	; (41186c <.LVL197+0xe>)
  411804:	6813      	ldr	r3, [r2, #0]
  411806:	3301      	adds	r3, #1
  411808:	6013      	str	r3, [r2, #0]
            aes_test();
  41180a:	f008 f911 	bl	419a30 <.LFE19>

0041180e <.LVL193>:
#endif
            appData.state = APP_STATE_TEST_COMPRESS;
  41180e:	2211      	movs	r2, #17
  411810:	4b15      	ldr	r3, [pc, #84]	; (411868 <.LVL197+0xa>)
  411812:	701a      	strb	r2, [r3, #0]
            break;
  411814:	bd10      	pop	{r4, pc}
                
        case APP_STATE_TEST_COMPRESS:
#ifdef HAVE_LIBZ
            testCount++;
  411816:	4a15      	ldr	r2, [pc, #84]	; (41186c <.LVL197+0xe>)
  411818:	6813      	ldr	r3, [r2, #0]
  41181a:	3301      	adds	r3, #1
  41181c:	6013      	str	r3, [r2, #0]
            compress_test();
  41181e:	f00b fb95 	bl	41cf4c <.LFE7>

00411822 <.LVL194>:
#endif
            appData.state = APP_STATE_TEST_DES;
  411822:	220b      	movs	r2, #11
  411824:	4b10      	ldr	r3, [pc, #64]	; (411868 <.LVL197+0xa>)
  411826:	701a      	strb	r2, [r3, #0]
            break;
  411828:	bd10      	pop	{r4, pc}
              
        case APP_STATE_TEST_DES:
#ifndef NO_DES3
            testCount++;
  41182a:	4a10      	ldr	r2, [pc, #64]	; (41186c <.LVL197+0xe>)
  41182c:	6813      	ldr	r3, [r2, #0]
  41182e:	3301      	adds	r3, #1
  411830:	6013      	str	r3, [r2, #0]
            des_test();
  411832:	f00b fa65 	bl	41cd00 <des_test>

00411836 <.LVL195>:
#endif
            appData.state = APP_STATE_TEST_DES3;
  411836:	220c      	movs	r2, #12
  411838:	4b0b      	ldr	r3, [pc, #44]	; (411868 <.LVL197+0xa>)
  41183a:	701a      	strb	r2, [r3, #0]
            break;
  41183c:	bd10      	pop	{r4, pc}
 
        case APP_STATE_TEST_DES3:
#ifndef NO_DES3
            testCount++;
  41183e:	4a0b      	ldr	r2, [pc, #44]	; (41186c <.LVL197+0xe>)
  411840:	6813      	ldr	r3, [r2, #0]
  411842:	3301      	adds	r3, #1
  411844:	6013      	str	r3, [r2, #0]
            des3_test();
  411846:	f00a fbeb 	bl	41c020 <.LFE24>

0041184a <.LVL196>:
#endif
            appData.state = APP_STATE_TEST_RSA;
  41184a:	220e      	movs	r2, #14
  41184c:	4b06      	ldr	r3, [pc, #24]	; (411868 <.LVL197+0xa>)
  41184e:	701a      	strb	r2, [r3, #0]
            break;
  411850:	bd10      	pop	{r4, pc}
        
        case APP_STATE_TEST_RSA:
#ifndef NO_RSA
            testCount++;
  411852:	4a06      	ldr	r2, [pc, #24]	; (41186c <.LVL197+0xe>)
  411854:	6813      	ldr	r3, [r2, #0]
  411856:	3301      	adds	r3, #1
  411858:	6013      	str	r3, [r2, #0]
            rsa_test();
  41185a:	f008 fc9d 	bl	41a198 <.LFE45>

0041185e <.LVL197>:
#endif
            appData.state = APP_STATE_DISPLAY_RESULTS;
  41185e:	2212      	movs	r2, #18
  411860:	4b01      	ldr	r3, [pc, #4]	; (411868 <.LVL197+0xa>)
  411862:	701a      	strb	r2, [r3, #0]
            break;
  411864:	bd10      	pop	{r4, pc}
  411866:	bf00      	nop
  411868:	2040d534 	.word	0x2040d534
  41186c:	2040d75c 	.word	0x2040d75c
                      
        case APP_STATE_DISPLAY_RESULTS:
#ifndef NO_MD5
            sprintf(printBuffer, "%s\n\rMD5 test:          %s", 
                    printBuffer, (appData.md5_test_result==expectedResult?"Pass":"Fail"));
  411870:	4ba0      	ldr	r3, [pc, #640]	; (411af4 <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rMD5 test:          %s", 
  411872:	685b      	ldr	r3, [r3, #4]
  411874:	2b00      	cmp	r3, #0
  411876:	4aa0      	ldr	r2, [pc, #640]	; (411af8 <.LVL218+0xe>)
  411878:	f1a2 0308 	sub.w	r3, r2, #8
  41187c:	bf18      	it	ne
  41187e:	4613      	movne	r3, r2
  411880:	489e      	ldr	r0, [pc, #632]	; (411afc <.LVL218+0x12>)
  411882:	4602      	mov	r2, r0
  411884:	499e      	ldr	r1, [pc, #632]	; (411b00 <.LVL218+0x16>)
  411886:	f00f f94b 	bl	420b20 <.LFE166>

0041188a <.LVL198>:
#endif

#ifndef NO_SHA
            sprintf(printBuffer, "%s\n\rSHA test:          %s", 
                    printBuffer, (appData.sha_test_result==expectedResult?"Pass":"Fail"));
  41188a:	4b9a      	ldr	r3, [pc, #616]	; (411af4 <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rSHA test:          %s", 
  41188c:	689b      	ldr	r3, [r3, #8]
  41188e:	2b00      	cmp	r3, #0
  411890:	4a99      	ldr	r2, [pc, #612]	; (411af8 <.LVL218+0xe>)
  411892:	f1a2 0308 	sub.w	r3, r2, #8
  411896:	bf18      	it	ne
  411898:	4613      	movne	r3, r2
  41189a:	4898      	ldr	r0, [pc, #608]	; (411afc <.LVL218+0x12>)
  41189c:	4602      	mov	r2, r0
  41189e:	4999      	ldr	r1, [pc, #612]	; (411b04 <.LVL218+0x1a>)
  4118a0:	f00f f93e 	bl	420b20 <.LFE166>

004118a4 <.LVL199>:
#endif

#ifndef NO_SHA256
            sprintf(printBuffer, "%s\n\rSHA256 test:       %s", 
                    printBuffer, (appData.sha256_test_result==expectedResult?"Pass":"Fail"));
  4118a4:	4b93      	ldr	r3, [pc, #588]	; (411af4 <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rSHA256 test:       %s", 
  4118a6:	68db      	ldr	r3, [r3, #12]
  4118a8:	2b00      	cmp	r3, #0
  4118aa:	4a93      	ldr	r2, [pc, #588]	; (411af8 <.LVL218+0xe>)
  4118ac:	f1a2 0308 	sub.w	r3, r2, #8
  4118b0:	bf18      	it	ne
  4118b2:	4613      	movne	r3, r2
  4118b4:	4891      	ldr	r0, [pc, #580]	; (411afc <.LVL218+0x12>)
  4118b6:	4602      	mov	r2, r0
  4118b8:	4993      	ldr	r1, [pc, #588]	; (411b08 <.LVL218+0x1e>)
  4118ba:	f00f f931 	bl	420b20 <.LFE166>

004118be <.LVL200>:
#endif

#ifdef WOLFSSL_SHA384
            sprintf(printBuffer, "%s\n\rSHA384 test:       %s", 
                    printBuffer, (appData.sha384_test_result==expectedResult?"Pass":"Fail"));
  4118be:	4b8d      	ldr	r3, [pc, #564]	; (411af4 <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rSHA384 test:       %s", 
  4118c0:	691b      	ldr	r3, [r3, #16]
  4118c2:	2b00      	cmp	r3, #0
  4118c4:	4a8c      	ldr	r2, [pc, #560]	; (411af8 <.LVL218+0xe>)
  4118c6:	f1a2 0308 	sub.w	r3, r2, #8
  4118ca:	bf18      	it	ne
  4118cc:	4613      	movne	r3, r2
  4118ce:	488b      	ldr	r0, [pc, #556]	; (411afc <.LVL218+0x12>)
  4118d0:	4602      	mov	r2, r0
  4118d2:	498e      	ldr	r1, [pc, #568]	; (411b0c <.LVL218+0x22>)
  4118d4:	f00f f924 	bl	420b20 <.LFE166>

004118d8 <.LVL201>:
#endif

#ifdef WOLFSSL_SHA512
            sprintf(printBuffer, "%s\n\rSHA512 test:       %s", 
                    printBuffer, (appData.sha512_test_result==expectedResult?"Pass":"Fail"));
  4118d8:	4b86      	ldr	r3, [pc, #536]	; (411af4 <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rSHA512 test:       %s", 
  4118da:	695b      	ldr	r3, [r3, #20]
  4118dc:	2b00      	cmp	r3, #0
  4118de:	4a86      	ldr	r2, [pc, #536]	; (411af8 <.LVL218+0xe>)
  4118e0:	f1a2 0308 	sub.w	r3, r2, #8
  4118e4:	bf18      	it	ne
  4118e6:	4613      	movne	r3, r2
  4118e8:	4884      	ldr	r0, [pc, #528]	; (411afc <.LVL218+0x12>)
  4118ea:	4602      	mov	r2, r0
  4118ec:	4988      	ldr	r1, [pc, #544]	; (411b10 <.LVL218+0x26>)
  4118ee:	f00f f917 	bl	420b20 <.LFE166>

004118f2 <.LVL202>:
#endif

#if !defined(NO_HMAC) && !defined(NO_MD5)
            sprintf(printBuffer, "%s\n\rHMAC_MD5 test:     %s", 
                    printBuffer, (appData.hmac_md5_test_result==expectedResult?"Pass":"Fail"));
  4118f2:	4b80      	ldr	r3, [pc, #512]	; (411af4 <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rHMAC_MD5 test:     %s", 
  4118f4:	699b      	ldr	r3, [r3, #24]
  4118f6:	2b00      	cmp	r3, #0
  4118f8:	4a7f      	ldr	r2, [pc, #508]	; (411af8 <.LVL218+0xe>)
  4118fa:	f1a2 0308 	sub.w	r3, r2, #8
  4118fe:	bf18      	it	ne
  411900:	4613      	movne	r3, r2
  411902:	487e      	ldr	r0, [pc, #504]	; (411afc <.LVL218+0x12>)
  411904:	4602      	mov	r2, r0
  411906:	4983      	ldr	r1, [pc, #524]	; (411b14 <.LVL218+0x2a>)
  411908:	f00f f90a 	bl	420b20 <.LFE166>

0041190c <.LVL203>:
#endif

#if !defined(NO_HMAC) && !defined(NO_SHA)
            sprintf(printBuffer, "%s\n\rHMAC_SHA test:     %s", 
                    printBuffer, (appData.hmac_sha_test_result==expectedResult?"Pass":"Fail"));
  41190c:	4b79      	ldr	r3, [pc, #484]	; (411af4 <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rHMAC_SHA test:     %s", 
  41190e:	69db      	ldr	r3, [r3, #28]
  411910:	2b00      	cmp	r3, #0
  411912:	4a79      	ldr	r2, [pc, #484]	; (411af8 <.LVL218+0xe>)
  411914:	f1a2 0308 	sub.w	r3, r2, #8
  411918:	bf18      	it	ne
  41191a:	4613      	movne	r3, r2
  41191c:	4877      	ldr	r0, [pc, #476]	; (411afc <.LVL218+0x12>)
  41191e:	4602      	mov	r2, r0
  411920:	497d      	ldr	r1, [pc, #500]	; (411b18 <.LVL218+0x2e>)
  411922:	f00f f8fd 	bl	420b20 <.LFE166>

00411926 <.LVL204>:
#endif

#if !defined(NO_HMAC) && !defined(NO_SHA256)
            sprintf(printBuffer, "%s\n\rHMAC_SHA256 test:  %s", 
                    printBuffer, (appData.hmac_sha256_test_result==expectedResult?"Pass":"Fail"));
  411926:	4b73      	ldr	r3, [pc, #460]	; (411af4 <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rHMAC_SHA256 test:  %s", 
  411928:	6a1b      	ldr	r3, [r3, #32]
  41192a:	2b00      	cmp	r3, #0
  41192c:	4a72      	ldr	r2, [pc, #456]	; (411af8 <.LVL218+0xe>)
  41192e:	f1a2 0308 	sub.w	r3, r2, #8
  411932:	bf18      	it	ne
  411934:	4613      	movne	r3, r2
  411936:	4871      	ldr	r0, [pc, #452]	; (411afc <.LVL218+0x12>)
  411938:	4602      	mov	r2, r0
  41193a:	4978      	ldr	r1, [pc, #480]	; (411b1c <.LVL218+0x32>)
  41193c:	f00f f8f0 	bl	420b20 <.LFE166>

00411940 <.LVL205>:
#endif

#if !defined(NO_HMAC) && defined(WOLFSSL_SHA384)
            sprintf(printBuffer, "%s\n\rHMAC_SHA384 test:  %s", 
                    printBuffer, (appData.hmac_sha384_test_result==expectedResult?"Pass":"Fail"));
  411940:	4b6c      	ldr	r3, [pc, #432]	; (411af4 <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rHMAC_SHA384 test:  %s", 
  411942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  411944:	2b00      	cmp	r3, #0
  411946:	4a6c      	ldr	r2, [pc, #432]	; (411af8 <.LVL218+0xe>)
  411948:	f1a2 0308 	sub.w	r3, r2, #8
  41194c:	bf18      	it	ne
  41194e:	4613      	movne	r3, r2
  411950:	486a      	ldr	r0, [pc, #424]	; (411afc <.LVL218+0x12>)
  411952:	4602      	mov	r2, r0
  411954:	4972      	ldr	r1, [pc, #456]	; (411b20 <.LVL218+0x36>)
  411956:	f00f f8e3 	bl	420b20 <.LFE166>

0041195a <.LVL206>:
#endif

#if !defined(NO_HMAC) && defined(WOLFSSL_SHA512)
            sprintf(printBuffer, "%s\n\rHMAC_SHA512 test:  %s", 
                    printBuffer, (appData.hmac_sha512_test_result==expectedResult?"Pass":"Fail"));
  41195a:	4b66      	ldr	r3, [pc, #408]	; (411af4 <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rHMAC_SHA512 test:  %s", 
  41195c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  41195e:	2b00      	cmp	r3, #0
  411960:	4a65      	ldr	r2, [pc, #404]	; (411af8 <.LVL218+0xe>)
  411962:	f1a2 0308 	sub.w	r3, r2, #8
  411966:	bf18      	it	ne
  411968:	4613      	movne	r3, r2
  41196a:	4864      	ldr	r0, [pc, #400]	; (411afc <.LVL218+0x12>)
  41196c:	4602      	mov	r2, r0
  41196e:	496d      	ldr	r1, [pc, #436]	; (411b24 <.LVL218+0x3a>)
  411970:	f00f f8d6 	bl	420b20 <.LFE166>

00411974 <.LVL207>:
#endif

#ifdef HAVE_ECC
            sprintf(printBuffer, "%s\n\rECC test:          %s", 
                    printBuffer, (appData.ecc_test_result==expectedResult?"Pass":"Fail"));
  411974:	4b5f      	ldr	r3, [pc, #380]	; (411af4 <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rECC test:          %s", 
  411976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  411978:	2b00      	cmp	r3, #0
  41197a:	4a5f      	ldr	r2, [pc, #380]	; (411af8 <.LVL218+0xe>)
  41197c:	f1a2 0308 	sub.w	r3, r2, #8
  411980:	bf18      	it	ne
  411982:	4613      	movne	r3, r2
  411984:	485d      	ldr	r0, [pc, #372]	; (411afc <.LVL218+0x12>)
  411986:	4602      	mov	r2, r0
  411988:	4967      	ldr	r1, [pc, #412]	; (411b28 <.LVL218+0x3e>)
  41198a:	f00f f8c9 	bl	420b20 <.LFE166>

0041198e <.LVL208>:
#endif
#ifndef NO_RNG_TEST
            sprintf(printBuffer, "%s\n\rRANDOM test:       %s", 
                    printBuffer, (appData.random_test_result==expectedResult?"Pass":"Fail"));
  41198e:	4b59      	ldr	r3, [pc, #356]	; (411af4 <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rRANDOM test:       %s", 
  411990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  411992:	2b00      	cmp	r3, #0
  411994:	4a58      	ldr	r2, [pc, #352]	; (411af8 <.LVL218+0xe>)
  411996:	f1a2 0308 	sub.w	r3, r2, #8
  41199a:	bf18      	it	ne
  41199c:	4613      	movne	r3, r2
  41199e:	4857      	ldr	r0, [pc, #348]	; (411afc <.LVL218+0x12>)
  4119a0:	4602      	mov	r2, r0
  4119a2:	4962      	ldr	r1, [pc, #392]	; (411b2c <.LVL218+0x42>)
  4119a4:	f00f f8bc 	bl	420b20 <.LFE166>

004119a8 <.LVL209>:
#endif
#ifndef NO_AES
            sprintf(printBuffer, "%s\n\rAES CBC test:      %s", 
                    printBuffer, (appData.aes_cbc_test_result==expectedResult?"Pass":"Fail"));
  4119a8:	4b52      	ldr	r3, [pc, #328]	; (411af4 <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rAES CBC test:      %s", 
  4119aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4119ac:	2b00      	cmp	r3, #0
  4119ae:	4a52      	ldr	r2, [pc, #328]	; (411af8 <.LVL218+0xe>)
  4119b0:	f1a2 0308 	sub.w	r3, r2, #8
  4119b4:	bf18      	it	ne
  4119b6:	4613      	movne	r3, r2
  4119b8:	4850      	ldr	r0, [pc, #320]	; (411afc <.LVL218+0x12>)
  4119ba:	4602      	mov	r2, r0
  4119bc:	495c      	ldr	r1, [pc, #368]	; (411b30 <.LVL218+0x46>)
  4119be:	f00f f8af 	bl	420b20 <.LFE166>

004119c2 <.LVL210>:
#ifdef WOLFSSL_AES_COUNTER
            sprintf(printBuffer, "%s\n\rAES CTR test:      %s", 
                     printBuffer, (appData.aes_ctr_test_result==expectedResult?"Pass":"Fail"));
  4119c2:	4b4c      	ldr	r3, [pc, #304]	; (411af4 <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rAES CTR test:      %s", 
  4119c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  4119c6:	2b00      	cmp	r3, #0
  4119c8:	4a4b      	ldr	r2, [pc, #300]	; (411af8 <.LVL218+0xe>)
  4119ca:	f1a2 0308 	sub.w	r3, r2, #8
  4119ce:	bf18      	it	ne
  4119d0:	4613      	movne	r3, r2
  4119d2:	484a      	ldr	r0, [pc, #296]	; (411afc <.LVL218+0x12>)
  4119d4:	4602      	mov	r2, r0
  4119d6:	4957      	ldr	r1, [pc, #348]	; (411b34 <.LVL218+0x4a>)
  4119d8:	f00f f8a2 	bl	420b20 <.LFE166>

004119dc <.LVL211>:
#endif                    
#endif

#ifdef HAVE_LIBZ
            sprintf(printBuffer, "%s\n\rCOMPRESS test:     %s", 
                    printBuffer, (appData.compress_test_result==expectedResult?"Pass":"Fail"));
  4119dc:	4b45      	ldr	r3, [pc, #276]	; (411af4 <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rCOMPRESS test:     %s", 
  4119de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  4119e0:	2b00      	cmp	r3, #0
  4119e2:	4a45      	ldr	r2, [pc, #276]	; (411af8 <.LVL218+0xe>)
  4119e4:	f1a2 0308 	sub.w	r3, r2, #8
  4119e8:	bf18      	it	ne
  4119ea:	4613      	movne	r3, r2
  4119ec:	4843      	ldr	r0, [pc, #268]	; (411afc <.LVL218+0x12>)
  4119ee:	4602      	mov	r2, r0
  4119f0:	4951      	ldr	r1, [pc, #324]	; (411b38 <.LVL218+0x4e>)
  4119f2:	f00f f895 	bl	420b20 <.LFE166>

004119f6 <.LVL212>:
#endif

#ifndef NO_DES3
            sprintf(printBuffer, "%s\n\rDES test:          %s", 
                    printBuffer, (appData.des_test_result==expectedResult?"Pass":"Fail"));
  4119f6:	4b3f      	ldr	r3, [pc, #252]	; (411af4 <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rDES test:          %s", 
  4119f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4119fa:	2b00      	cmp	r3, #0
  4119fc:	4a3e      	ldr	r2, [pc, #248]	; (411af8 <.LVL218+0xe>)
  4119fe:	f1a2 0308 	sub.w	r3, r2, #8
  411a02:	bf18      	it	ne
  411a04:	4613      	movne	r3, r2
  411a06:	483d      	ldr	r0, [pc, #244]	; (411afc <.LVL218+0x12>)
  411a08:	4602      	mov	r2, r0
  411a0a:	494c      	ldr	r1, [pc, #304]	; (411b3c <.LVL218+0x52>)
  411a0c:	f00f f888 	bl	420b20 <.LFE166>

00411a10 <.LVL213>:
#endif

#ifndef NO_DES3
            sprintf(printBuffer, "%s\n\rDES3 test:         %s", 
                    printBuffer, (appData.des3_test_result==expectedResult?"Pass":"Fail"));
  411a10:	4b38      	ldr	r3, [pc, #224]	; (411af4 <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rDES3 test:         %s", 
  411a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  411a14:	2b00      	cmp	r3, #0
  411a16:	4a38      	ldr	r2, [pc, #224]	; (411af8 <.LVL218+0xe>)
  411a18:	f1a2 0308 	sub.w	r3, r2, #8
  411a1c:	bf18      	it	ne
  411a1e:	4613      	movne	r3, r2
  411a20:	4836      	ldr	r0, [pc, #216]	; (411afc <.LVL218+0x12>)
  411a22:	4602      	mov	r2, r0
  411a24:	4946      	ldr	r1, [pc, #280]	; (411b40 <.LVL218+0x56>)
  411a26:	f00f f87b 	bl	420b20 <.LFE166>

00411a2a <.LVL214>:
#endif

#ifndef NO_RSA
            sprintf(printBuffer, "%s\n\rRSA test:          %s", 
                    printBuffer, (appData.rsa_test_result==expectedResult?"Pass":"Fail"));
  411a2a:	4b32      	ldr	r3, [pc, #200]	; (411af4 <.LVL218+0xa>)
            sprintf(printBuffer, "%s\n\rRSA test:          %s", 
  411a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  411a2e:	2b00      	cmp	r3, #0
  411a30:	4a31      	ldr	r2, [pc, #196]	; (411af8 <.LVL218+0xe>)
  411a32:	f1a2 0308 	sub.w	r3, r2, #8
  411a36:	bf18      	it	ne
  411a38:	4613      	movne	r3, r2
  411a3a:	4830      	ldr	r0, [pc, #192]	; (411afc <.LVL218+0x12>)
  411a3c:	4602      	mov	r2, r0
  411a3e:	4941      	ldr	r1, [pc, #260]	; (411b44 <.LVL218+0x5a>)
  411a40:	f00f f86e 	bl	420b20 <.LFE166>

00411a44 <.LVL215>:
#endif

            appData.state = APP_STATE_CHECK_RESULTS;
  411a44:	2214      	movs	r2, #20
  411a46:	4b2b      	ldr	r3, [pc, #172]	; (411af4 <.LVL218+0xa>)
  411a48:	701a      	strb	r2, [r3, #0]

            break;
  411a4a:	bd10      	pop	{r4, pc}

        case APP_STATE_CHECK_RESULTS:
            if ( testCount == 0 ) {
  411a4c:	4b3e      	ldr	r3, [pc, #248]	; (411b48 <.LVL218+0x5e>)
  411a4e:	681b      	ldr	r3, [r3, #0]
  411a50:	2b00      	cmp	r3, #0
  411a52:	d07d      	beq.n	411b50 <.LVL218+0x66>
                sprintf(printBuffer, "%s\n\rNo tests executed\n\r", printBuffer);
            }
            else if (
#ifndef NO_RNG_TEST
			    expectedResult != appData.random_test_result ||
  411a54:	4b27      	ldr	r3, [pc, #156]	; (411af4 <.LVL218+0xa>)
            else if (
  411a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  411a58:	2b00      	cmp	r3, #0
  411a5a:	d137      	bne.n	411acc <.LVL215+0x88>
#endif
#ifndef NO_MD5
                expectedResult != appData.md5_test_result || 
  411a5c:	4b25      	ldr	r3, [pc, #148]	; (411af4 <.LVL218+0xa>)
			    expectedResult != appData.random_test_result ||
  411a5e:	685b      	ldr	r3, [r3, #4]
  411a60:	2b00      	cmp	r3, #0
  411a62:	d133      	bne.n	411acc <.LVL215+0x88>
#endif
#ifndef NO_SHA                    
                expectedResult != appData.sha_test_result ||
  411a64:	4b23      	ldr	r3, [pc, #140]	; (411af4 <.LVL218+0xa>)
                expectedResult != appData.md5_test_result || 
  411a66:	689b      	ldr	r3, [r3, #8]
  411a68:	2b00      	cmp	r3, #0
  411a6a:	d12f      	bne.n	411acc <.LVL215+0x88>
#endif
#ifndef NO_SHA256                    
                expectedResult != appData.sha256_test_result ||
  411a6c:	4b21      	ldr	r3, [pc, #132]	; (411af4 <.LVL218+0xa>)
                expectedResult != appData.sha_test_result ||
  411a6e:	68db      	ldr	r3, [r3, #12]
  411a70:	2b00      	cmp	r3, #0
  411a72:	d12b      	bne.n	411acc <.LVL215+0x88>
#endif
#ifdef WOLFSSL_SHA384                    
                expectedResult != appData.sha384_test_result ||
  411a74:	4b1f      	ldr	r3, [pc, #124]	; (411af4 <.LVL218+0xa>)
                expectedResult != appData.sha256_test_result ||
  411a76:	691b      	ldr	r3, [r3, #16]
  411a78:	2b00      	cmp	r3, #0
  411a7a:	d127      	bne.n	411acc <.LVL215+0x88>
#endif
#ifdef WOLFSSL_SHA512                    
                expectedResult != appData.sha512_test_result ||
  411a7c:	4b1d      	ldr	r3, [pc, #116]	; (411af4 <.LVL218+0xa>)
                expectedResult != appData.sha384_test_result ||
  411a7e:	695b      	ldr	r3, [r3, #20]
  411a80:	bb23      	cbnz	r3, 411acc <.LVL215+0x88>
#endif
#if !defined(NO_HMAC) && !defined(NO_MD5)                    
                expectedResult != appData.hmac_md5_test_result ||
  411a82:	4b1c      	ldr	r3, [pc, #112]	; (411af4 <.LVL218+0xa>)
                expectedResult != appData.sha512_test_result ||
  411a84:	699b      	ldr	r3, [r3, #24]
  411a86:	bb0b      	cbnz	r3, 411acc <.LVL215+0x88>
#endif
#if !defined(NO_HMAC) && !defined(NO_SHA)                    
                expectedResult != appData.hmac_sha_test_result ||
  411a88:	4b1a      	ldr	r3, [pc, #104]	; (411af4 <.LVL218+0xa>)
                expectedResult != appData.hmac_md5_test_result ||
  411a8a:	69db      	ldr	r3, [r3, #28]
  411a8c:	b9f3      	cbnz	r3, 411acc <.LVL215+0x88>
#endif
#if !defined(NO_HMAC) && !defined(NO_SHA256)                    
                expectedResult != appData.hmac_sha256_test_result ||
  411a8e:	4b19      	ldr	r3, [pc, #100]	; (411af4 <.LVL218+0xa>)
                expectedResult != appData.hmac_sha_test_result ||
  411a90:	6a1b      	ldr	r3, [r3, #32]
  411a92:	b9db      	cbnz	r3, 411acc <.LVL215+0x88>
#endif
#if !defined(NO_HMAC) && defined(WOLFSSL_SHA384)                    
                expectedResult != appData.hmac_sha384_test_result ||
  411a94:	4b17      	ldr	r3, [pc, #92]	; (411af4 <.LVL218+0xa>)
                expectedResult != appData.hmac_sha256_test_result ||
  411a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  411a98:	b9c3      	cbnz	r3, 411acc <.LVL215+0x88>
#endif
#if !defined(NO_HMAC) && defined(WOLFSSL_SHA512)                    
                expectedResult != appData.hmac_sha512_test_result ||
  411a9a:	4b16      	ldr	r3, [pc, #88]	; (411af4 <.LVL218+0xa>)
                expectedResult != appData.hmac_sha384_test_result ||
  411a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  411a9e:	b9ab      	cbnz	r3, 411acc <.LVL215+0x88>
#endif
#ifdef HAVE_ECC
                expectedResult != appData.ecc_test_result ||
  411aa0:	4b14      	ldr	r3, [pc, #80]	; (411af4 <.LVL218+0xa>)
                expectedResult != appData.hmac_sha512_test_result ||
  411aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  411aa4:	b993      	cbnz	r3, 411acc <.LVL215+0x88>
#endif
#ifndef NO_AES                   
                expectedResult != appData.aes_cbc_test_result ||
  411aa6:	4b13      	ldr	r3, [pc, #76]	; (411af4 <.LVL218+0xa>)
                expectedResult != appData.ecc_test_result ||
  411aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  411aaa:	b97b      	cbnz	r3, 411acc <.LVL215+0x88>
#ifdef WOLFSSL_AES_COUNTER                    
                expectedResult != appData.aes_ctr_test_result ||
  411aac:	4b11      	ldr	r3, [pc, #68]	; (411af4 <.LVL218+0xa>)
                expectedResult != appData.aes_cbc_test_result ||
  411aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  411ab0:	b963      	cbnz	r3, 411acc <.LVL215+0x88>
#endif
#endif
#ifdef HAVE_LIBZ
                expectedResult != appData.compress_test_result ||
  411ab2:	4b10      	ldr	r3, [pc, #64]	; (411af4 <.LVL218+0xa>)
                expectedResult != appData.aes_ctr_test_result ||
  411ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  411ab6:	b94b      	cbnz	r3, 411acc <.LVL215+0x88>
#endif
#ifndef NO_DES3                   
                expectedResult != appData.des_test_result ||
  411ab8:	4b0e      	ldr	r3, [pc, #56]	; (411af4 <.LVL218+0xa>)
                expectedResult != appData.compress_test_result ||
  411aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  411abc:	b933      	cbnz	r3, 411acc <.LVL215+0x88>
                expectedResult != appData.des3_test_result ||
  411abe:	4b0d      	ldr	r3, [pc, #52]	; (411af4 <.LVL218+0xa>)
                expectedResult != appData.des_test_result ||
  411ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  411ac2:	b91b      	cbnz	r3, 411acc <.LVL215+0x88>
#endif
#ifndef NO_RSA
                expectedResult != appData.rsa_test_result ||
  411ac4:	4b0b      	ldr	r3, [pc, #44]	; (411af4 <.LVL218+0xa>)
  411ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  411ac8:	2b00      	cmp	r3, #0
  411aca:	d047      	beq.n	411b5c <.LVL219+0x2>
#endif
                expectedResult != dummy_test_result /* always false */
            ) 
            {
                /* We had an error during comparisons */
                sprintf(printBuffer, "%s\n\rOne or more tests failed\n\r", printBuffer);
  411acc:	480b      	ldr	r0, [pc, #44]	; (411afc <.LVL218+0x12>)
  411ace:	4602      	mov	r2, r0
  411ad0:	491e      	ldr	r1, [pc, #120]	; (411b4c <.LVL218+0x62>)
  411ad2:	f00f f825 	bl	420b20 <.LFE166>

00411ad6 <.LVL216>:
            } else {
                sprintf(printBuffer, "%s\n\rAll tests passed\n\r", printBuffer);
            }
            SYS_CONSOLE_Write(SYS_CONSOLE_INDEX_0, STDOUT_FILENO, printBuffer, strlen(printBuffer));
  411ad6:	4c09      	ldr	r4, [pc, #36]	; (411afc <.LVL218+0x12>)
  411ad8:	4620      	mov	r0, r4
  411ada:	f00a fdd1 	bl	41c680 <strlen>

00411ade <.LVL217>:
  411ade:	4603      	mov	r3, r0
  411ae0:	4622      	mov	r2, r4
  411ae2:	2101      	movs	r1, #1
  411ae4:	2000      	movs	r0, #0
  411ae6:	f00f fe4f 	bl	421788 <.LFE163>

00411aea <.LVL218>:
            appData.state = APP_SPIN;
  411aea:	2215      	movs	r2, #21
  411aec:	4b01      	ldr	r3, [pc, #4]	; (411af4 <.LVL218+0xa>)
  411aee:	701a      	strb	r2, [r3, #0]
  411af0:	bd10      	pop	{r4, pc}
  411af2:	bf00      	nop
  411af4:	2040d534 	.word	0x2040d534
  411af8:	0040e308 	.word	0x0040e308
  411afc:	20400054 	.word	0x20400054
  411b00:	0040e310 	.word	0x0040e310
  411b04:	0040e32c 	.word	0x0040e32c
  411b08:	0040e348 	.word	0x0040e348
  411b0c:	0040e364 	.word	0x0040e364
  411b10:	0040e380 	.word	0x0040e380
  411b14:	0040e39c 	.word	0x0040e39c
  411b18:	0040e3b8 	.word	0x0040e3b8
  411b1c:	0040e3d4 	.word	0x0040e3d4
  411b20:	0040e3f0 	.word	0x0040e3f0
  411b24:	0040e40c 	.word	0x0040e40c
  411b28:	0040e428 	.word	0x0040e428
  411b2c:	0040e444 	.word	0x0040e444
  411b30:	0040e460 	.word	0x0040e460
  411b34:	0040e47c 	.word	0x0040e47c
  411b38:	0040e498 	.word	0x0040e498
  411b3c:	0040e4b4 	.word	0x0040e4b4
  411b40:	0040e4d0 	.word	0x0040e4d0
  411b44:	0040e4ec 	.word	0x0040e4ec
  411b48:	2040d75c 	.word	0x2040d75c
  411b4c:	0040e520 	.word	0x0040e520
                sprintf(printBuffer, "%s\n\rNo tests executed\n\r", printBuffer);
  411b50:	4805      	ldr	r0, [pc, #20]	; (411b68 <.LVL220+0x2>)
  411b52:	4602      	mov	r2, r0
  411b54:	4905      	ldr	r1, [pc, #20]	; (411b6c <.LVL220+0x6>)
  411b56:	f00e ffe3 	bl	420b20 <.LFE166>

00411b5a <.LVL219>:
  411b5a:	e7bc      	b.n	411ad6 <.LVL216>
                sprintf(printBuffer, "%s\n\rAll tests passed\n\r", printBuffer);
  411b5c:	4802      	ldr	r0, [pc, #8]	; (411b68 <.LVL220+0x2>)
  411b5e:	4602      	mov	r2, r0
  411b60:	4903      	ldr	r1, [pc, #12]	; (411b70 <.LVL220+0xa>)
  411b62:	f00e ffdd 	bl	420b20 <.LFE166>

00411b66 <.LVL220>:
  411b66:	e7b6      	b.n	411ad6 <.LVL216>
  411b68:	20400054 	.word	0x20400054
  411b6c:	0040e508 	.word	0x0040e508
  411b70:	0040e540 	.word	0x0040e540

Disassembly of section .rodata.client_cert_der_2048%54:

00411b74 <client_cert_der_2048>:
  411b74:	98048230 80038230 010203a0 00090202     0...0...........
  411b84:	be754a87 3dd86691 09060d30 8648862a     .Ju..f.=0...*.H.
  411b94:	01010df7 30000505 0b318e81 03060930     .......0..1.0...
  411ba4:	13060455 31535502 060d300f 08045503     U....US1.0...U..
  411bb4:	724f0613 6e6f6765 0f301131 04550306     ..Oregon1.0...U.
  411bc4:	50081307 6c74726f 31646e61 060c300e     ...Portland1.0..
  411bd4:	0a045503 61790513 314c5353 06123014     .U....yaSSL1.0..
  411be4:	0b045503 72500b13 6172676f 6e696d6d     .U....Programmin
  411bf4:	30163167 55030614 0d130304 2e777777     g1.0...U....www.
  411c04:	73736179 6f632e6c 301d316d 2a09061b     yassl.com1.0...*
  411c14:	f7864886 0109010d 6e690e16 79406f66     .H........info@y
  411c24:	6c737361 6d6f632e 0d171e30 30313131     assl.com0...1110
  411c34:	38313432 35353132 310d175a 32373034     24182155Z..14072
  411c44:	32383130 5a353531 318e8130 0609300b     0182155Z0..1.0..
  411c54:	06045503 53550213 0d300f31 04550306     .U....US1.0...U.
  411c64:	4f061308 6f676572 3011316e 5503060f     ...Oregon1.0...U
  411c74:	08130704 74726f50 646e616c 0c300e31     ....Portland1.0.
  411c84:	04550306 7905130a 4c535361 12301431     ..U....yaSSL1.0.
  411c94:	04550306 500b130b 72676f72 696d6d61     ..U....Programmi
  411ca4:	1631676e 03061430 13030455 7777770d     ng1.0...U....www
  411cb4:	7361792e 632e6c73 1d316d6f 09061b30     .yassl.com1.0...
  411cc4:	8648862a 09010df7 690e1601 406f666e     *.H........info@
  411cd4:	73736179 6f632e6c 0182306d 060d3022     yassl.com0.."0..
  411ce4:	48862a09 010df786 00050101 0f018203     .*.H............
  411cf4:	01823000 0182020a 03c30001 39fe2bd1     .0...........+.9
  411d04:	3b4532a4 2b84c853 9a747c2a 522aaabd     .2E;S..+*|t...*R
  411d14:	a6d64707 3207b236 69bad08e 44c3c67b     .G..6..2...i{..D
  411d24:	4881d49e a2682dfd a1bb678b 2c36c875     ...H.-h..g..u.6,
  411d34:	f71bd24a 0dcfba8b f1eceff9 9b7b1e81     J.............{.
  411d44:	bf9a4703 657fcc65 e8a66924 e45b8914     .G..e..e$i....[.
  411d54:	b0c5f734 67f59314 787a3a7b 565601e1     4......g{:zx..VV
  411d64:	4213a691 403cd28d d1ef4c9c 5137df86     ...B..<@.L....7Q
  411d74:	3ba10c1b 4aa3f1f5 cee1e435 7e1bdf96     ...;...J5......~
  411d84:	d0974ebf 08a8e810 20af8130 c514430b     .N......0.. .C..
  411d94:	32b46774 868d6f82 994088c2 1eba8336     tg.2.o....@.6...
  411da4:	17227240 246552d7 efceb073 ffaecd19     @r"..Re$s.......
  411db4:	c07b6c78 4ed40312 6d500d72 a33ba33b     xl{....Nr.Pm;.;.
  411dc4:	c89d5e99 b3850cd9 54d98ad9 fa6ddb26     .^.........T&.m.
  411dd4:	25ffbbac 79d1c44c 86d371f4 b0131840     ...%L..y.q..@...
  411de4:	4e72b563 8497c430 2f562d86 7ff715d7     c.rN0....-V/....
  411df4:	fcf5aec0 a1fbe55b 0302d3ba a3010001     ....[...........
  411e04:	8130f681 061d30f3 0e1d5503 14041604     ..0..0...U......
  411e14:	6645d833 188768d7 700d547e 26c79127     3.Ef.h..~T.p'..&
  411e24:	c06585d7 06c38130 231d5503 30bb8104     ..e.0....U.#...0
  411e34:	1480b881 6645d833 188768d7 700d547e     ....3.Ef.h..~T.p
  411e44:	26c79127 c06585d7 a49481a1 81309181     '..&..e.......0.
  411e54:	300b318e 55030609 02130604 0f315355     .1.0...U....US1.
  411e64:	03060d30 13080455 65724f06 316e6f67     0...U....Oregon1
  411e74:	060f3011 07045503 6f500813 616c7472     .0...U....Portla
  411e84:	0e31646e 03060c30 130a0455 53617905     nd1.0...U....yaS
  411e94:	14314c53 03061230 130b0455 6f72500b     SL1.0...U....Pro
  411ea4:	6d617267 676e696d 14301631 04550306     gramming1.0...U.
  411eb4:	770d1303 792e7777 6c737361 6d6f632e     ...www.yassl.com
  411ec4:	1b301d31 862a0906 0df78648 16010901     1.0...*.H.......
  411ed4:	666e690e 6179406f 2e6c7373 826d6f63     .info@yassl.com.
  411ee4:	4a870009 6691be75 0c303dd8 1d550306     ...Ju..f.=0...U.
  411ef4:	30050413 ff010103 09060d30 8648862a     ...0....0...*.H.
  411f04:	01010df7 03000505 00010182 81427c1c     .............|B.
  411f14:	cf219e29 54c1d8d0 14aecc6f 68ff3809     ).!....To....8.h
  411f24:	53959a98 e67b1876 28ec7630 dea7750d     ...Sv.{.0v.(.u..
  411f34:	d58ecde0 476a2355 fc8d4e2b d8a3067d     ....U#jG+N..}...
  411f44:	d65ead0f 3300c904 d32777fb 7bb303b5     ..^....3.w'....{
  411f54:	0b317421 1a2daf4a cc8e93b3 903d5ff3     !t1.J.-......_=.
  411f64:	55e3cc3f 787b9119 094a2e24 614e18bb     ?..U..{x$.J...Na
  411f74:	0ac69c2d 889134a0 483b6b70 9479bc47     -....4..pk;HG.y.
  411f84:	324da0a2 a3c25447 51d22edc 1139294c     ..M2GT.....QL)9.
  411f94:	5e15e2ff f6369758 860606e9 959d8d0e     ...^X.6.........
  411fa4:	8bb27203 14e97c19 7388a16e 716d5868     .r...|..n..shXmq
  411fb4:	d3d5c25e de5fd213 e2be03ea cee54000     ^....._......@..
  411fc4:	3192e6fd bbebc357 2fcbac66 62e0fa1a     ...1W...f../...b
  411fd4:	93f447a2 6c4b2a43 f92f0a5e 634ae6e7     .G..C*Kl^./...Jc
  411fe4:	2aacb086 5bb4eba1 e432cd67 9a4b11b6     ...*...[g.2...K.
  411ff4:	a20d6672 fe8f764a fd83bc22 a9d5b7db     rf..Jv..".......
  412004:	b1c905ee 2b1b7e71 c0afe3e1              ....q~.+....

Disassembly of section .text._tr_flush_block%55:

00412010 <_tr_flush_block>:
void ZLIB_INTERNAL _tr_flush_block(s, buf, stored_len, last)
    deflate_state *s;
    charf *buf;       /* input block, or NULL if too old */
    ulg stored_len;   /* length of input block */
    int last;         /* one if this is the last block for a file */
{
  412010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00412014 <.LCFI24>:
  412014:	b083      	sub	sp, #12

00412016 <.LCFI25>:
  412016:	4604      	mov	r4, r0
  412018:	4689      	mov	r9, r1
  41201a:	4615      	mov	r5, r2
  41201c:	461e      	mov	r6, r3

0041201e <.LVL314>:
    ulg opt_lenb, static_lenb; /* opt_len and static_len in bytes */
    int max_blindex = 0;  /* index of last bit length code of non zero freq */

    /* Build the Huffman trees unless a stored block is forced */
    if (s->level > 0) {
  41201e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84

00412022 <.LVL315>:
  412022:	2b00      	cmp	r3, #0
  412024:	f340 8096 	ble.w	412154 <.LBE104>

        /* Check if the file is binary or text */
        if (s->strm->data_type == Z_UNKNOWN)
  412028:	f8d0 e000 	ldr.w	lr, [r0]
  41202c:	f8de 302c 	ldr.w	r3, [lr, #44]	; 0x2c
  412030:	2b02      	cmp	r3, #2
  412032:	d059      	beq.n	4120e8 <.LCFI27>

00412034 <.LVL316>:
            s->strm->data_type = detect_data_type(s);

        /* Construct the literal and distance trees */
        build_tree(s, (tree_desc *)(&(s->l_desc)));
  412034:	f604 3118 	addw	r1, r4, #2840	; 0xb18
  412038:	4620      	mov	r0, r4
  41203a:	f001 feda 	bl	413df2 <.LBE59>

0041203e <.LVL317>:
        Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
                s->static_len));

        build_tree(s, (tree_desc *)(&(s->d_desc)));
  41203e:	f604 3124 	addw	r1, r4, #2852	; 0xb24
  412042:	4620      	mov	r0, r4
  412044:	f001 fed5 	bl	413df2 <.LBE59>

00412048 <.LBB97>:
    scan_tree(s, (ct_data *)s->dyn_ltree, s->l_desc.max_code);
  412048:	f104 0794 	add.w	r7, r4, #148	; 0x94
  41204c:	f8d4 2b1c 	ldr.w	r2, [r4, #2844]	; 0xb1c
  412050:	4639      	mov	r1, r7
  412052:	4620      	mov	r0, r4
  412054:	f00a ff18 	bl	41ce88 <.LFE19>

00412058 <.LVL319>:
    scan_tree(s, (ct_data *)s->dyn_dtree, s->d_desc.max_code);
  412058:	f604 1888 	addw	r8, r4, #2440	; 0x988
  41205c:	f8d4 2b28 	ldr.w	r2, [r4, #2856]	; 0xb28
  412060:	4641      	mov	r1, r8
  412062:	4620      	mov	r0, r4
  412064:	f00a ff10 	bl	41ce88 <.LFE19>

00412068 <.LVL320>:
    build_tree(s, (tree_desc *)(&(s->bl_desc)));
  412068:	f504 6133 	add.w	r1, r4, #2864	; 0xb30
  41206c:	4620      	mov	r0, r4
  41206e:	f001 fec0 	bl	413df2 <.LBE59>

00412072 <.LVL321>:
        if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;
  412072:	f8b4 3aba 	ldrh.w	r3, [r4, #2746]	; 0xaba
  412076:	2b00      	cmp	r3, #0
  412078:	d16a      	bne.n	412150 <.LBB104>
  41207a:	4ac2      	ldr	r2, [pc, #776]	; (412384 <.LVL388+0xc>)
    for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {
  41207c:	2111      	movs	r1, #17

0041207e <.LVL322>:
        if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;
  41207e:	f812 3901 	ldrb.w	r3, [r2], #-1
  412082:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  412086:	f8b3 3a7e 	ldrh.w	r3, [r3, #2686]	; 0xa7e
  41208a:	b913      	cbnz	r3, 412092 <.LVL324>
    for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {
  41208c:	3901      	subs	r1, #1
  41208e:	2902      	cmp	r1, #2
  412090:	d1f5      	bne.n	41207e <.LVL322>

00412092 <.LVL324>:
    s->opt_len += 3*(max_blindex+1) + 5+5+4;
  412092:	f101 0b01 	add.w	fp, r1, #1
  412096:	f241 60a8 	movw	r0, #5800	; 0x16a8
  41209a:	5823      	ldr	r3, [r4, r0]
  41209c:	330e      	adds	r3, #14
  41209e:	eb0b 0e4b 	add.w	lr, fp, fp, lsl #1
  4120a2:	4473      	add	r3, lr
  4120a4:	5023      	str	r3, [r4, r0]

004120a6 <.LBE97>:
         */
        max_blindex = build_bl_tree(s);

        /* Determine the best encoding. Compute the block lengths in bytes. */
        opt_lenb = (s->opt_len+3+7)>>3;
        static_lenb = (s->static_len+3+7)>>3;
  4120a6:	f241 60ac 	movw	r0, #5804	; 0x16ac
  4120aa:	5820      	ldr	r0, [r4, r0]
  4120ac:	f100 0e0a 	add.w	lr, r0, #10
  4120b0:	ea4f 0ede 	mov.w	lr, lr, lsr #3

004120b4 <.LVL326>:
        opt_lenb = (s->opt_len+3+7)>>3;
  4120b4:	330a      	adds	r3, #10

004120b6 <.LVL327>:
  4120b6:	08db      	lsrs	r3, r3, #3

004120b8 <.LVL328>:
  4120b8:	4573      	cmp	r3, lr
  4120ba:	bf28      	it	cs
  4120bc:	4673      	movcs	r3, lr

004120be <.LVL329>:
    }

#ifdef FORCE_STORED
    if (buf != (char*)0) { /* force stored block */
#else
    if (stored_len+4 <= opt_lenb && buf != (char*)0) {
  4120be:	1d28      	adds	r0, r5, #4
  4120c0:	4298      	cmp	r0, r3
  4120c2:	d878      	bhi.n	4121b6 <.LVL359>
  4120c4:	f1b9 0f00 	cmp.w	r9, #0
  4120c8:	d075      	beq.n	4121b6 <.LVL359>

004120ca <.LVL330>:
         * Otherwise we can't have processed more than WSIZE input bytes since
         * the last block flush, because compression would have been
         * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
         * transform a block into a stored block.
         */
        _tr_stored_block(s, buf, stored_len, last);
  4120ca:	4633      	mov	r3, r6

004120cc <.LVL331>:
  4120cc:	462a      	mov	r2, r5
  4120ce:	4649      	mov	r1, r9
  4120d0:	4620      	mov	r0, r4
  4120d2:	f00b f859 	bl	41d188 <_tr_stored_block>

004120d6 <.LVL332>:
    }
    Assert (s->compressed_len == s->bits_sent, "bad compressed size");
    /* The above check is made mod 2^32, for files larger than 512 MB
     * and uLong implemented on 32 bits.
     */
    init_block(s);
  4120d6:	4620      	mov	r0, r4
  4120d8:	f00e fa88 	bl	4205ec <.LFE2>

004120dc <.LVL333>:

    if (last) {
  4120dc:	2e00      	cmp	r6, #0
  4120de:	f040 81d7 	bne.w	412490 <.LVL403>
        s->compressed_len += 7;  /* align on byte boundary */
#endif
    }
    Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
           s->compressed_len-7*last));
}
  4120e2:	b003      	add	sp, #12

004120e4 <.LCFI26>:
  4120e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004120e8 <.LCFI27>:
  4120e8:	4607      	mov	r7, r0
  4120ea:	f100 0180 	add.w	r1, r0, #128	; 0x80

004120ee <.LVL335>:
        if (s->strm->data_type == Z_UNKNOWN)
  4120ee:	4603      	mov	r3, r0
  4120f0:	4aa5      	ldr	r2, [pc, #660]	; (412388 <.LVL388+0x10>)

004120f2 <.LVL336>:
  4120f2:	e003      	b.n	4120fc <.LBB100+0x8>

004120f4 <.LBB100>:
     */
    unsigned long black_mask = 0xf3ffc07fUL;
    int n;

    /* Check for non-textual ("black-listed") bytes. */
    for (n = 0; n <= 31; n++, black_mask >>= 1)
  4120f4:	0852      	lsrs	r2, r2, #1
  4120f6:	3304      	adds	r3, #4
  4120f8:	428b      	cmp	r3, r1
  4120fa:	d00a      	beq.n	412112 <.LBB103>
        if ((black_mask & 1) && (s->dyn_ltree[n].Freq != 0))
  4120fc:	f012 0f01 	tst.w	r2, #1
  412100:	d0f8      	beq.n	4120f4 <.LBB100>
  412102:	f8b3 0094 	ldrh.w	r0, [r3, #148]	; 0x94
  412106:	2800      	cmp	r0, #0
  412108:	d0f4      	beq.n	4120f4 <.LBB100>
            return Z_BINARY;
  41210a:	2300      	movs	r3, #0

0041210c <.LBE100>:
            s->strm->data_type = detect_data_type(s);
  41210c:	f8ce 302c 	str.w	r3, [lr, #44]	; 0x2c
  412110:	e790      	b.n	412034 <.LVL316>

00412112 <.LBB103>:

    /* Check for textual ("white-listed") bytes. */
    if (s->dyn_ltree[9].Freq != 0 || s->dyn_ltree[10].Freq != 0
  412112:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
  412116:	b98b      	cbnz	r3, 41213c <.LVL344>
  412118:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
  41211c:	b983      	cbnz	r3, 412140 <.LVL344+0x4>
            || s->dyn_ltree[13].Freq != 0)
  41211e:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
  412122:	b97b      	cbnz	r3, 412144 <.LVL344+0x8>

00412124 <.LVL342>:
        return Z_TEXT;
    for (n = 32; n < LITERALS; n++)
        if (s->dyn_ltree[n].Freq != 0)
  412124:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
  412128:	b973      	cbnz	r3, 412148 <.LVL345>
  41212a:	f504 725f 	add.w	r2, r4, #892	; 0x37c

0041212e <.LVL343>:
  41212e:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
  412132:	b95b      	cbnz	r3, 41214c <.LVL346>
  412134:	3704      	adds	r7, #4
    for (n = 32; n < LITERALS; n++)
  412136:	4297      	cmp	r7, r2
  412138:	d1f9      	bne.n	41212e <.LVL343>
  41213a:	e7e7      	b.n	41210c <.LBE100>

0041213c <.LVL344>:
        return Z_TEXT;
  41213c:	2301      	movs	r3, #1
  41213e:	e7e5      	b.n	41210c <.LBE100>
  412140:	2301      	movs	r3, #1
  412142:	e7e3      	b.n	41210c <.LBE100>
  412144:	2301      	movs	r3, #1
  412146:	e7e1      	b.n	41210c <.LBE100>

00412148 <.LVL345>:
            return Z_TEXT;
  412148:	2301      	movs	r3, #1
  41214a:	e7df      	b.n	41210c <.LBE100>

0041214c <.LVL346>:
  41214c:	2301      	movs	r3, #1
  41214e:	e7dd      	b.n	41210c <.LBE100>

00412150 <.LBB104>:
    for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {
  412150:	2112      	movs	r1, #18
  412152:	e79e      	b.n	412092 <.LVL324>

00412154 <.LBE104>:
        opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  412154:	1d53      	adds	r3, r2, #5

00412156 <.LVL349>:
    if (stored_len+4 <= opt_lenb && buf != (char*)0) {
  412156:	3204      	adds	r2, #4

00412158 <.LVL350>:
  412158:	4293      	cmp	r3, r2
  41215a:	d301      	bcc.n	412160 <.LBB105>
  41215c:	2900      	cmp	r1, #0
  41215e:	d1b4      	bne.n	4120ca <.LVL330>

00412160 <.LBB105>:
        send_bits(s, (STATIC_TREES<<1)+last, 3);
  412160:	f241 63bc 	movw	r3, #5820	; 0x16bc

00412164 <.LVL352>:
  412164:	58e3      	ldr	r3, [r4, r3]
  412166:	2b0d      	cmp	r3, #13
  412168:	f340 80ef 	ble.w	41234a <.LBB125>

0041216c <.LBB106>:
  41216c:	1cb2      	adds	r2, r6, #2

0041216e <.LVL354>:
  41216e:	b292      	uxth	r2, r2

00412170 <.LVL355>:
  412170:	f241 61b8 	movw	r1, #5816	; 0x16b8
  412174:	fa02 f303 	lsl.w	r3, r2, r3
  412178:	5a60      	ldrh	r0, [r4, r1]
  41217a:	4303      	orrs	r3, r0
  41217c:	b21b      	sxth	r3, r3
  41217e:	5263      	strh	r3, [r4, r1]
  412180:	68a5      	ldr	r5, [r4, #8]

00412182 <.LVL356>:
  412182:	6960      	ldr	r0, [r4, #20]
  412184:	1c47      	adds	r7, r0, #1
  412186:	6167      	str	r7, [r4, #20]
  412188:	542b      	strb	r3, [r5, r0]
  41218a:	68a5      	ldr	r5, [r4, #8]
  41218c:	6960      	ldr	r0, [r4, #20]
  41218e:	1c43      	adds	r3, r0, #1
  412190:	6163      	str	r3, [r4, #20]
  412192:	5a63      	ldrh	r3, [r4, r1]
  412194:	0a1b      	lsrs	r3, r3, #8
  412196:	542b      	strb	r3, [r5, r0]
  412198:	f241 60bc 	movw	r0, #5820	; 0x16bc
  41219c:	5823      	ldr	r3, [r4, r0]
  41219e:	f1c3 0510 	rsb	r5, r3, #16
  4121a2:	412a      	asrs	r2, r5
  4121a4:	5262      	strh	r2, [r4, r1]
  4121a6:	3b0d      	subs	r3, #13
  4121a8:	5023      	str	r3, [r4, r0]

004121aa <.LBE105>:
        compress_block(s, (ct_data *)static_ltree, (ct_data *)static_dtree);
  4121aa:	4a78      	ldr	r2, [pc, #480]	; (41238c <.LVL388+0x14>)
  4121ac:	4978      	ldr	r1, [pc, #480]	; (412390 <.LVL388+0x18>)
  4121ae:	4620      	mov	r0, r4
  4121b0:	f004 f9c6 	bl	416540 <.LBE16>

004121b4 <.LVL358>:
  4121b4:	e78f      	b.n	4120d6 <.LVL332>

004121b6 <.LVL359>:
    } else if (s->strategy == Z_FIXED || static_lenb == opt_lenb) {
  4121b6:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
  4121ba:	2804      	cmp	r0, #4
  4121bc:	d0d0      	beq.n	412160 <.LBB105>
  4121be:	459e      	cmp	lr, r3
  4121c0:	d0ce      	beq.n	412160 <.LBB105>

004121c2 <.LBB107>:
        send_bits(s, (DYN_TREES<<1)+last, 3);
  4121c2:	f241 63bc 	movw	r3, #5820	; 0x16bc

004121c6 <.LVL361>:
  4121c6:	58e3      	ldr	r3, [r4, r3]
  4121c8:	2b0d      	cmp	r3, #13
  4121ca:	f340 80cb 	ble.w	412364 <.LBB126>

004121ce <.LBB108>:
  4121ce:	1d35      	adds	r5, r6, #4

004121d0 <.LVL363>:
  4121d0:	b2ad      	uxth	r5, r5

004121d2 <.LVL364>:
  4121d2:	f241 6eb8 	movw	lr, #5816	; 0x16b8

004121d6 <.LVL365>:
  4121d6:	fa05 f303 	lsl.w	r3, r5, r3
  4121da:	f834 000e 	ldrh.w	r0, [r4, lr]
  4121de:	4303      	orrs	r3, r0
  4121e0:	b21b      	sxth	r3, r3
  4121e2:	f824 300e 	strh.w	r3, [r4, lr]

004121e6 <.LVL366>:
  4121e6:	6960      	ldr	r0, [r4, #20]
  4121e8:	f100 0901 	add.w	r9, r0, #1

004121ec <.LVL367>:
  4121ec:	f8c4 9014 	str.w	r9, [r4, #20]
  4121f0:	68a2      	ldr	r2, [r4, #8]
  4121f2:	5413      	strb	r3, [r2, r0]
  4121f4:	6963      	ldr	r3, [r4, #20]
  4121f6:	1c58      	adds	r0, r3, #1
  4121f8:	6160      	str	r0, [r4, #20]
  4121fa:	f834 000e 	ldrh.w	r0, [r4, lr]
  4121fe:	0a00      	lsrs	r0, r0, #8
  412200:	68a2      	ldr	r2, [r4, #8]
  412202:	54d0      	strb	r0, [r2, r3]
  412204:	f241 60bc 	movw	r0, #5820	; 0x16bc
  412208:	5823      	ldr	r3, [r4, r0]
  41220a:	f1c3 0c10 	rsb	ip, r3, #16
  41220e:	fa45 f50c 	asr.w	r5, r5, ip
  412212:	f824 500e 	strh.w	r5, [r4, lr]
  412216:	3b0d      	subs	r3, #13
  412218:	5023      	str	r3, [r4, r0]

0041221a <.LBE107>:
        send_all_trees(s, s->l_desc.max_code+1, s->d_desc.max_code+1,
  41221a:	f8d4 ab1c 	ldr.w	sl, [r4, #2844]	; 0xb1c
  41221e:	f8d4 3b28 	ldr.w	r3, [r4, #2856]	; 0xb28
  412222:	9301      	str	r3, [sp, #4]

00412224 <.LBB109>:
    send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */
  412224:	f241 63bc 	movw	r3, #5820	; 0x16bc

00412228 <.LVL370>:
  412228:	58e3      	ldr	r3, [r4, r3]
  41222a:	2b0b      	cmp	r3, #11
  41222c:	f340 80b4 	ble.w	412398 <.LBB119>

00412230 <.LBB112>:
  412230:	f5aa 7080 	sub.w	r0, sl, #256	; 0x100

00412234 <.LVL372>:
  412234:	b280      	uxth	r0, r0

00412236 <.LVL373>:
  412236:	f241 6eb8 	movw	lr, #5816	; 0x16b8
  41223a:	fa00 f303 	lsl.w	r3, r0, r3
  41223e:	f834 500e 	ldrh.w	r5, [r4, lr]
  412242:	431d      	orrs	r5, r3
  412244:	b22d      	sxth	r5, r5
  412246:	f824 500e 	strh.w	r5, [r4, lr]

0041224a <.LVL374>:
  41224a:	6963      	ldr	r3, [r4, #20]
  41224c:	f103 0901 	add.w	r9, r3, #1
  412250:	f8c4 9014 	str.w	r9, [r4, #20]
  412254:	68a2      	ldr	r2, [r4, #8]
  412256:	54d5      	strb	r5, [r2, r3]
  412258:	6963      	ldr	r3, [r4, #20]
  41225a:	1c5d      	adds	r5, r3, #1
  41225c:	6165      	str	r5, [r4, #20]
  41225e:	f834 500e 	ldrh.w	r5, [r4, lr]
  412262:	0a2d      	lsrs	r5, r5, #8
  412264:	68a2      	ldr	r2, [r4, #8]
  412266:	54d5      	strb	r5, [r2, r3]
  412268:	f241 65bc 	movw	r5, #5820	; 0x16bc
  41226c:	5963      	ldr	r3, [r4, r5]
  41226e:	f1c3 0c10 	rsb	ip, r3, #16
  412272:	fa40 f00c 	asr.w	r0, r0, ip
  412276:	f824 000e 	strh.w	r0, [r4, lr]
  41227a:	3b0b      	subs	r3, #11
  41227c:	5163      	str	r3, [r4, r5]

0041227e <.LBB113>:
    send_bits(s, dcodes-1,   5);
  41227e:	f241 63bc 	movw	r3, #5820	; 0x16bc
  412282:	58e3      	ldr	r3, [r4, r3]
  412284:	2b0b      	cmp	r3, #11
  412286:	f340 8097 	ble.w	4123b8 <.LBB120>

0041228a <.LVL376>:
  41228a:	f8bd 5004 	ldrh.w	r5, [sp, #4]

0041228e <.LBB114>:
  41228e:	f241 6eb8 	movw	lr, #5816	; 0x16b8
  412292:	fa05 f003 	lsl.w	r0, r5, r3
  412296:	f834 300e 	ldrh.w	r3, [r4, lr]
  41229a:	4318      	orrs	r0, r3
  41229c:	b200      	sxth	r0, r0
  41229e:	f824 000e 	strh.w	r0, [r4, lr]
  4122a2:	6963      	ldr	r3, [r4, #20]
  4122a4:	f103 0901 	add.w	r9, r3, #1
  4122a8:	f8c4 9014 	str.w	r9, [r4, #20]
  4122ac:	68a2      	ldr	r2, [r4, #8]
  4122ae:	54d0      	strb	r0, [r2, r3]
  4122b0:	6963      	ldr	r3, [r4, #20]
  4122b2:	1c58      	adds	r0, r3, #1
  4122b4:	6160      	str	r0, [r4, #20]
  4122b6:	f834 000e 	ldrh.w	r0, [r4, lr]
  4122ba:	0a00      	lsrs	r0, r0, #8
  4122bc:	68a2      	ldr	r2, [r4, #8]
  4122be:	54d0      	strb	r0, [r2, r3]
  4122c0:	f241 60bc 	movw	r0, #5820	; 0x16bc
  4122c4:	5823      	ldr	r3, [r4, r0]
  4122c6:	f1c3 0c10 	rsb	ip, r3, #16
  4122ca:	fa45 f50c 	asr.w	r5, r5, ip
  4122ce:	f824 500e 	strh.w	r5, [r4, lr]
  4122d2:	3b0b      	subs	r3, #11
  4122d4:	5023      	str	r3, [r4, r0]

004122d6 <.LBB115>:
    send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */
  4122d6:	f241 63bc 	movw	r3, #5820	; 0x16bc
  4122da:	58e3      	ldr	r3, [r4, r3]
  4122dc:	2b0c      	cmp	r3, #12
  4122de:	dd7a      	ble.n	4123d6 <.LBB121>

004122e0 <.LBB116>:
  4122e0:	1ec8      	subs	r0, r1, #3

004122e2 <.LVL379>:
  4122e2:	b280      	uxth	r0, r0

004122e4 <.LVL380>:
  4122e4:	f241 6eb8 	movw	lr, #5816	; 0x16b8
  4122e8:	fa00 f503 	lsl.w	r5, r0, r3
  4122ec:	f834 300e 	ldrh.w	r3, [r4, lr]
  4122f0:	431d      	orrs	r5, r3
  4122f2:	b22d      	sxth	r5, r5
  4122f4:	f824 500e 	strh.w	r5, [r4, lr]
  4122f8:	6963      	ldr	r3, [r4, #20]
  4122fa:	f103 0901 	add.w	r9, r3, #1
  4122fe:	f8c4 9014 	str.w	r9, [r4, #20]
  412302:	68a2      	ldr	r2, [r4, #8]
  412304:	54d5      	strb	r5, [r2, r3]
  412306:	6963      	ldr	r3, [r4, #20]
  412308:	1c5d      	adds	r5, r3, #1
  41230a:	6165      	str	r5, [r4, #20]
  41230c:	f834 500e 	ldrh.w	r5, [r4, lr]
  412310:	0a2d      	lsrs	r5, r5, #8
  412312:	68a2      	ldr	r2, [r4, #8]
  412314:	54d5      	strb	r5, [r2, r3]
  412316:	f241 65bc 	movw	r5, #5820	; 0x16bc
  41231a:	5963      	ldr	r3, [r4, r5]
  41231c:	f1c3 0c10 	rsb	ip, r3, #16
  412320:	fa40 f00c 	asr.w	r0, r0, ip
  412324:	f824 000e 	strh.w	r0, [r4, lr]
  412328:	3b0c      	subs	r3, #12
  41232a:	5163      	str	r3, [r4, r5]

0041232c <.LBE115>:
    for (rank = 0; rank < blcodes; rank++) {
  41232c:	f1bb 0f00 	cmp.w	fp, #0
  412330:	f340 809e 	ble.w	412470 <.LBE118>
  412334:	4817      	ldr	r0, [pc, #92]	; (412394 <.LVL388+0x1c>)
  412336:	3101      	adds	r1, #1

00412338 <.LVL382>:
  412338:	4401      	add	r1, r0

0041233a <.LBB117>:
        send_bits(s, s->bl_tree[bl_order[rank]].Len, 3);
  41233a:	f241 69bc 	movw	r9, #5820	; 0x16bc
  41233e:	44a1      	add	r9, r4
  412340:	f241 6cb8 	movw	ip, #5816	; 0x16b8
  412344:	44a4      	add	ip, r4
  412346:	46b6      	mov	lr, r6
  412348:	e066      	b.n	412418 <.LBB123>

0041234a <.LBB125>:
        send_bits(s, (STATIC_TREES<<1)+last, 3);
  41234a:	f241 61b8 	movw	r1, #5816	; 0x16b8
  41234e:	1cb2      	adds	r2, r6, #2
  412350:	b292      	uxth	r2, r2
  412352:	409a      	lsls	r2, r3
  412354:	5a60      	ldrh	r0, [r4, r1]
  412356:	4302      	orrs	r2, r0
  412358:	5262      	strh	r2, [r4, r1]
  41235a:	3303      	adds	r3, #3
  41235c:	f241 62bc 	movw	r2, #5820	; 0x16bc
  412360:	50a3      	str	r3, [r4, r2]
  412362:	e722      	b.n	4121aa <.LBE105>

00412364 <.LBB126>:
        send_bits(s, (DYN_TREES<<1)+last, 3);
  412364:	f241 65b8 	movw	r5, #5816	; 0x16b8

00412368 <.LVL386>:
  412368:	1d30      	adds	r0, r6, #4
  41236a:	b280      	uxth	r0, r0
  41236c:	4098      	lsls	r0, r3
  41236e:	f834 e005 	ldrh.w	lr, [r4, r5]

00412372 <.LVL387>:
  412372:	ea40 000e 	orr.w	r0, r0, lr
  412376:	5360      	strh	r0, [r4, r5]

00412378 <.LVL388>:
  412378:	3303      	adds	r3, #3
  41237a:	f241 60bc 	movw	r0, #5820	; 0x16bc
  41237e:	5023      	str	r3, [r4, r0]
  412380:	e74b      	b.n	41221a <.LBE107>
  412382:	bf00      	nop
  412384:	0042217d 	.word	0x0042217d
  412388:	f3ffc07f 	.word	0xf3ffc07f
  41238c:	0041f86c 	.word	0x0041f86c
  412390:	00412498 	.word	0x00412498
  412394:	0042216c 	.word	0x0042216c

00412398 <.LBB119>:
    send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */
  412398:	f241 65b8 	movw	r5, #5816	; 0x16b8
  41239c:	f5aa 7080 	sub.w	r0, sl, #256	; 0x100
  4123a0:	b280      	uxth	r0, r0
  4123a2:	4098      	lsls	r0, r3
  4123a4:	f834 e005 	ldrh.w	lr, [r4, r5]
  4123a8:	ea40 000e 	orr.w	r0, r0, lr
  4123ac:	5360      	strh	r0, [r4, r5]

004123ae <.LVL390>:
  4123ae:	3305      	adds	r3, #5
  4123b0:	f241 60bc 	movw	r0, #5820	; 0x16bc
  4123b4:	5023      	str	r3, [r4, r0]
  4123b6:	e762      	b.n	41227e <.LBB113>

004123b8 <.LBB120>:
    send_bits(s, dcodes-1,   5);
  4123b8:	f241 65b8 	movw	r5, #5816	; 0x16b8
  4123bc:	f8bd 0004 	ldrh.w	r0, [sp, #4]
  4123c0:	4098      	lsls	r0, r3
  4123c2:	f834 e005 	ldrh.w	lr, [r4, r5]
  4123c6:	ea40 000e 	orr.w	r0, r0, lr
  4123ca:	5360      	strh	r0, [r4, r5]
  4123cc:	3305      	adds	r3, #5
  4123ce:	f241 60bc 	movw	r0, #5820	; 0x16bc
  4123d2:	5023      	str	r3, [r4, r0]
  4123d4:	e77f      	b.n	4122d6 <.LBB115>

004123d6 <.LBB121>:
    send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */
  4123d6:	f241 65b8 	movw	r5, #5816	; 0x16b8
  4123da:	f1ab 0004 	sub.w	r0, fp, #4
  4123de:	b280      	uxth	r0, r0
  4123e0:	4098      	lsls	r0, r3
  4123e2:	f834 e005 	ldrh.w	lr, [r4, r5]
  4123e6:	ea40 000e 	orr.w	r0, r0, lr
  4123ea:	5360      	strh	r0, [r4, r5]
  4123ec:	3304      	adds	r3, #4
  4123ee:	f241 60bc 	movw	r0, #5820	; 0x16bc
  4123f2:	5023      	str	r3, [r4, r0]
  4123f4:	e79a      	b.n	41232c <.LBE115>

004123f6 <.LBB122>:
        send_bits(s, s->bl_tree[bl_order[rank]].Len, 3);
  4123f6:	7802      	ldrb	r2, [r0, #0]
  4123f8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  4123fc:	f8b2 2a7e 	ldrh.w	r2, [r2, #2686]	; 0xa7e
  412400:	409a      	lsls	r2, r3
  412402:	f8bc 5000 	ldrh.w	r5, [ip]
  412406:	432a      	orrs	r2, r5
  412408:	f8ac 2000 	strh.w	r2, [ip]
  41240c:	3303      	adds	r3, #3
  41240e:	f8c9 3000 	str.w	r3, [r9]

00412412 <.LVL394>:
  412412:	3001      	adds	r0, #1

00412414 <.LBE122>:
    for (rank = 0; rank < blcodes; rank++) {
  412414:	4281      	cmp	r1, r0
  412416:	d02a      	beq.n	41246e <.LVL398+0xc>

00412418 <.LBB123>:
        send_bits(s, s->bl_tree[bl_order[rank]].Len, 3);
  412418:	f8d9 3000 	ldr.w	r3, [r9]
  41241c:	2b0d      	cmp	r3, #13
  41241e:	ddea      	ble.n	4123f6 <.LBB122>

00412420 <.LBB118>:
  412420:	7802      	ldrb	r2, [r0, #0]
  412422:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  412426:	f8b2 5a7e 	ldrh.w	r5, [r2, #2686]	; 0xa7e

0041242a <.LVL397>:
  41242a:	fa05 f303 	lsl.w	r3, r5, r3
  41242e:	f8bc 2000 	ldrh.w	r2, [ip]
  412432:	4313      	orrs	r3, r2
  412434:	b21b      	sxth	r3, r3
  412436:	f8ac 3000 	strh.w	r3, [ip]
  41243a:	6962      	ldr	r2, [r4, #20]
  41243c:	f102 0b01 	add.w	fp, r2, #1
  412440:	f8c4 b014 	str.w	fp, [r4, #20]
  412444:	68a6      	ldr	r6, [r4, #8]
  412446:	54b3      	strb	r3, [r6, r2]
  412448:	6963      	ldr	r3, [r4, #20]
  41244a:	1c5a      	adds	r2, r3, #1
  41244c:	6162      	str	r2, [r4, #20]
  41244e:	f8bc 2000 	ldrh.w	r2, [ip]
  412452:	0a12      	lsrs	r2, r2, #8
  412454:	68a6      	ldr	r6, [r4, #8]
  412456:	54f2      	strb	r2, [r6, r3]
  412458:	f8d9 3000 	ldr.w	r3, [r9]
  41245c:	f1c3 0210 	rsb	r2, r3, #16
  412460:	4115      	asrs	r5, r2

00412462 <.LVL398>:
  412462:	f8ac 5000 	strh.w	r5, [ip]
  412466:	3b0d      	subs	r3, #13
  412468:	f8c9 3000 	str.w	r3, [r9]
  41246c:	e7d1      	b.n	412412 <.LVL394>
  41246e:	4676      	mov	r6, lr

00412470 <.LBE118>:
    send_tree(s, (ct_data *)s->dyn_ltree, lcodes-1); /* literal tree */
  412470:	4652      	mov	r2, sl
  412472:	4639      	mov	r1, r7
  412474:	4620      	mov	r0, r4
  412476:	f002 fe26 	bl	4150c6 <.LBE100>

0041247a <.LVL400>:
    send_tree(s, (ct_data *)s->dyn_dtree, dcodes-1); /* distance tree */
  41247a:	9a01      	ldr	r2, [sp, #4]
  41247c:	4641      	mov	r1, r8
  41247e:	4620      	mov	r0, r4
  412480:	f002 fe21 	bl	4150c6 <.LBE100>

00412484 <.LBE127>:
        compress_block(s, (ct_data *)s->dyn_ltree, (ct_data *)s->dyn_dtree);
  412484:	4642      	mov	r2, r8
  412486:	4639      	mov	r1, r7
  412488:	4620      	mov	r0, r4
  41248a:	f004 f859 	bl	416540 <.LBE16>

0041248e <.LVL402>:
  41248e:	e622      	b.n	4120d6 <.LVL332>

00412490 <.LVL403>:
        bi_windup(s);
  412490:	4620      	mov	r0, r4
  412492:	f00e f9b9 	bl	420808 <.LFE69>

00412496 <.LVL404>:
}
  412496:	e624      	b.n	4120e2 <.LVL333+0x6>

Disassembly of section .rodata.static_ltree%56:

00412498 <static_ltree>:
  412498:	000c 0008 008c 0008 004c 0008 00cc 0008     ........L.......
  4124a8:	002c 0008 00ac 0008 006c 0008 00ec 0008     ,.......l.......
  4124b8:	001c 0008 009c 0008 005c 0008 00dc 0008     ........\.......
  4124c8:	003c 0008 00bc 0008 007c 0008 00fc 0008     <.......|.......
  4124d8:	0002 0008 0082 0008 0042 0008 00c2 0008     ........B.......
  4124e8:	0022 0008 00a2 0008 0062 0008 00e2 0008     ".......b.......
  4124f8:	0012 0008 0092 0008 0052 0008 00d2 0008     ........R.......
  412508:	0032 0008 00b2 0008 0072 0008 00f2 0008     2.......r.......
  412518:	000a 0008 008a 0008 004a 0008 00ca 0008     ........J.......
  412528:	002a 0008 00aa 0008 006a 0008 00ea 0008     *.......j.......
  412538:	001a 0008 009a 0008 005a 0008 00da 0008     ........Z.......
  412548:	003a 0008 00ba 0008 007a 0008 00fa 0008     :.......z.......
  412558:	0006 0008 0086 0008 0046 0008 00c6 0008     ........F.......
  412568:	0026 0008 00a6 0008 0066 0008 00e6 0008     &.......f.......
  412578:	0016 0008 0096 0008 0056 0008 00d6 0008     ........V.......
  412588:	0036 0008 00b6 0008 0076 0008 00f6 0008     6.......v.......
  412598:	000e 0008 008e 0008 004e 0008 00ce 0008     ........N.......
  4125a8:	002e 0008 00ae 0008 006e 0008 00ee 0008     ........n.......
  4125b8:	001e 0008 009e 0008 005e 0008 00de 0008     ........^.......
  4125c8:	003e 0008 00be 0008 007e 0008 00fe 0008     >.......~.......
  4125d8:	0001 0008 0081 0008 0041 0008 00c1 0008     ........A.......
  4125e8:	0021 0008 00a1 0008 0061 0008 00e1 0008     !.......a.......
  4125f8:	0011 0008 0091 0008 0051 0008 00d1 0008     ........Q.......
  412608:	0031 0008 00b1 0008 0071 0008 00f1 0008     1.......q.......
  412618:	0009 0008 0089 0008 0049 0008 00c9 0008     ........I.......
  412628:	0029 0008 00a9 0008 0069 0008 00e9 0008     ).......i.......
  412638:	0019 0008 0099 0008 0059 0008 00d9 0008     ........Y.......
  412648:	0039 0008 00b9 0008 0079 0008 00f9 0008     9.......y.......
  412658:	0005 0008 0085 0008 0045 0008 00c5 0008     ........E.......
  412668:	0025 0008 00a5 0008 0065 0008 00e5 0008     %.......e.......
  412678:	0015 0008 0095 0008 0055 0008 00d5 0008     ........U.......
  412688:	0035 0008 00b5 0008 0075 0008 00f5 0008     5.......u.......
  412698:	000d 0008 008d 0008 004d 0008 00cd 0008     ........M.......
  4126a8:	002d 0008 00ad 0008 006d 0008 00ed 0008     -.......m.......
  4126b8:	001d 0008 009d 0008 005d 0008 00dd 0008     ........].......
  4126c8:	003d 0008 00bd 0008 007d 0008 00fd 0008     =.......}.......
  4126d8:	0013 0009 0113 0009 0093 0009 0193 0009     ................
  4126e8:	0053 0009 0153 0009 00d3 0009 01d3 0009     S...S...........
  4126f8:	0033 0009 0133 0009 00b3 0009 01b3 0009     3...3...........
  412708:	0073 0009 0173 0009 00f3 0009 01f3 0009     s...s...........
  412718:	000b 0009 010b 0009 008b 0009 018b 0009     ................
  412728:	004b 0009 014b 0009 00cb 0009 01cb 0009     K...K...........
  412738:	002b 0009 012b 0009 00ab 0009 01ab 0009     +...+...........
  412748:	006b 0009 016b 0009 00eb 0009 01eb 0009     k...k...........
  412758:	001b 0009 011b 0009 009b 0009 019b 0009     ................
  412768:	005b 0009 015b 0009 00db 0009 01db 0009     [...[...........
  412778:	003b 0009 013b 0009 00bb 0009 01bb 0009     ;...;...........
  412788:	007b 0009 017b 0009 00fb 0009 01fb 0009     {...{...........
  412798:	0007 0009 0107 0009 0087 0009 0187 0009     ................
  4127a8:	0047 0009 0147 0009 00c7 0009 01c7 0009     G...G...........
  4127b8:	0027 0009 0127 0009 00a7 0009 01a7 0009     '...'...........
  4127c8:	0067 0009 0167 0009 00e7 0009 01e7 0009     g...g...........
  4127d8:	0017 0009 0117 0009 0097 0009 0197 0009     ................
  4127e8:	0057 0009 0157 0009 00d7 0009 01d7 0009     W...W...........
  4127f8:	0037 0009 0137 0009 00b7 0009 01b7 0009     7...7...........
  412808:	0077 0009 0177 0009 00f7 0009 01f7 0009     w...w...........
  412818:	000f 0009 010f 0009 008f 0009 018f 0009     ................
  412828:	004f 0009 014f 0009 00cf 0009 01cf 0009     O...O...........
  412838:	002f 0009 012f 0009 00af 0009 01af 0009     /.../...........
  412848:	006f 0009 016f 0009 00ef 0009 01ef 0009     o...o...........
  412858:	001f 0009 011f 0009 009f 0009 019f 0009     ................
  412868:	005f 0009 015f 0009 00df 0009 01df 0009     _..._...........
  412878:	003f 0009 013f 0009 00bf 0009 01bf 0009     ?...?...........
  412888:	007f 0009 017f 0009 00ff 0009 01ff 0009     ................
  412898:	0000 0007 0040 0007 0020 0007 0060 0007     ....@... ...`...
  4128a8:	0010 0007 0050 0007 0030 0007 0070 0007     ....P...0...p...
  4128b8:	0008 0007 0048 0007 0028 0007 0068 0007     ....H...(...h...
  4128c8:	0018 0007 0058 0007 0038 0007 0078 0007     ....X...8...x...
  4128d8:	0004 0007 0044 0007 0024 0007 0064 0007     ....D...$...d...
  4128e8:	0014 0007 0054 0007 0034 0007 0074 0007     ....T...4...t...
  4128f8:	0003 0008 0083 0008 0043 0008 00c3 0008     ........C.......
  412908:	0023 0008 00a3 0008 0063 0008 00e3 0008     #.......c.......

Disassembly of section .text.fp_invmod%57:

00412918 <fp_invmod>:
  return FP_OKAY;
}

/* c = 1/a (mod b) for odd b only */
int fp_invmod(fp_int *a, fp_int *b, fp_int *c)
{
  412918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

0041291c <.LCFI92>:
  41291c:	f5ad 5df1 	sub.w	sp, sp, #7712	; 0x1e20

00412920 <.LCFI93>:
  412920:	b084      	sub	sp, #16

00412922 <.LCFI94>:
  412922:	4681      	mov	r9, r0
  412924:	4688      	mov	r8, r1
  412926:	4692      	mov	sl, r2
  fp_int  x, y, u, v, B, D;
  int     neg;

  /* 2. [modified] b must be odd   */
  if (fp_iseven (b) == FP_YES) {
  412928:	680b      	ldr	r3, [r1, #0]
  41292a:	2b00      	cmp	r3, #0
  41292c:	dd04      	ble.n	412938 <.LBB126>
  41292e:	688b      	ldr	r3, [r1, #8]
  412930:	f013 0f01 	tst.w	r3, #1
  412934:	f000 80d1 	beq.w	412ada <.LBB157>

00412938 <.LBB126>:
    a->size = FP_SIZE;
#endif
#ifdef HAVE_WOLF_BIGINT
    wc_bigint_init(&a->raw);
#endif
    fp_zero(a);
  412938:	f641 4008 	movw	r0, #7176	; 0x1c08

0041293c <.LVL641>:
  41293c:	4468      	add	r0, sp
  41293e:	f00f fc01 	bl	422144 <.LFE163>

00412942 <.LBB128>:
  412942:	f50d 54cf 	add.w	r4, sp, #6624	; 0x19e0

00412946 <.LVL643>:
  412946:	4620      	mov	r0, r4
  412948:	f00f fbfc 	bl	422144 <.LFE163>

0041294c <.LBB130>:
  41294c:	f241 70b8 	movw	r0, #6072	; 0x17b8
  412950:	4468      	add	r0, sp
  412952:	f00f fbf7 	bl	422144 <.LFE163>

00412956 <.LBB132>:
  412956:	f241 5090 	movw	r0, #5520	; 0x1590
  41295a:	4468      	add	r0, sp
  41295c:	f00f fbf2 	bl	422144 <.LFE163>

00412960 <.LBB134>:
  412960:	f241 3068 	movw	r0, #4968	; 0x1368
  412964:	4468      	add	r0, sp
  412966:	f00f fbed 	bl	422144 <.LFE163>

0041296a <.LBB136>:
  41296a:	f50d 508a 	add.w	r0, sp, #4416	; 0x1140

0041296e <.LVL648>:
  41296e:	f00f fbe9 	bl	422144 <.LFE163>

00412972 <.LBE136>:
  fp_copy(b, &x);
  412972:	f641 4108 	movw	r1, #7176	; 0x1c08
  412976:	4469      	add	r1, sp
  412978:	4640      	mov	r0, r8
  41297a:	f00f f917 	bl	421bac <.LFE31>

0041297e <.LVL650>:
  fp_abs(a, &y);
  41297e:	4621      	mov	r1, r4
  412980:	4648      	mov	r0, r9
  412982:	f00f f913 	bl	421bac <.LFE31>

00412986 <.LVL651>:
  412986:	2300      	movs	r3, #0
  412988:	6063      	str	r3, [r4, #4]
  fp_copy(&x, &u);
  41298a:	f241 71b8 	movw	r1, #6072	; 0x17b8
  41298e:	4469      	add	r1, sp
  412990:	f641 4008 	movw	r0, #7176	; 0x1c08
  412994:	4468      	add	r0, sp
  412996:	f00f f909 	bl	421bac <.LFE31>

0041299a <.LVL652>:
  fp_copy(&y, &v);
  41299a:	f241 5190 	movw	r1, #5520	; 0x1590
  41299e:	4469      	add	r1, sp
  4129a0:	4620      	mov	r0, r4
  4129a2:	f00f f903 	bl	421bac <.LFE31>

004129a6 <.LVL653>:
  fp_set (&D, 1);
  4129a6:	2101      	movs	r1, #1
  4129a8:	f50d 508a 	add.w	r0, sp, #4416	; 0x1140
  4129ac:	f00f fbb4 	bl	422118 <.LFE20>

004129b0 <.LVL654>:
  while (fp_iseven (&u) == FP_YES) {
  4129b0:	f241 77b8 	movw	r7, #6072	; 0x17b8
  4129b4:	446f      	add	r7, sp
  while (fp_iseven (&v) == FP_YES) {
  4129b6:	f241 5690 	movw	r6, #5520	; 0x1590
  4129ba:	446e      	add	r6, sp
  4129bc:	4635      	mov	r5, r6
  4129be:	e1d6      	b.n	412d6e <.LVL729+0x8>

004129c0 <.LBB138>:
    fp_sub (&v, &u, &v);
  4129c0:	4622      	mov	r2, r4
  4129c2:	f50d 618a 	add.w	r1, sp, #1104	; 0x450
  4129c6:	4620      	mov	r0, r4
  4129c8:	f00e fa14 	bl	420df4 <.LFE144>

004129cc <.LVL656>:
    fp_sub (&C, &A, &C);
  4129cc:	f50d 624f 	add.w	r2, sp, #3312	; 0xcf0
  4129d0:	f50d 610a 	add.w	r1, sp, #2208	; 0x8a0
  4129d4:	4610      	mov	r0, r2
  4129d6:	f00e fa0d 	bl	420df4 <.LFE144>

004129da <.LVL657>:
    fp_sub (&D, &B, &D);
  4129da:	f60d 7218 	addw	r2, sp, #3864	; 0xf18
  4129de:	f60d 21c8 	addw	r1, sp, #2760	; 0xac8
  4129e2:	4610      	mov	r0, r2
  4129e4:	f00e fa06 	bl	420df4 <.LFE144>

004129e8 <.LVL658>:
  4129e8:	e126      	b.n	412c38 <.LVL714>
  if (fp_cmp_d (&v, 1) != FP_EQ) {
  4129ea:	2101      	movs	r1, #1
  4129ec:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
  4129f0:	f00d ffd8 	bl	4209a4 <.LFE0>

004129f4 <.LVL659>:
  4129f4:	4605      	mov	r5, r0

004129f6 <.LVL660>:
  4129f6:	bb20      	cbnz	r0, 412a42 <.LVL665+0x2>
  while (fp_cmp_d(&C, 0) == FP_LT) {
  4129f8:	2400      	movs	r4, #0
  4129fa:	e005      	b.n	412a08 <.LVL661>
      fp_add(&C, b, &C);
  4129fc:	f50d 624f 	add.w	r2, sp, #3312	; 0xcf0
  412a00:	4641      	mov	r1, r8
  412a02:	4610      	mov	r0, r2
  412a04:	f00e f8d8 	bl	420bb8 <.LFE17>

00412a08 <.LVL661>:
  while (fp_cmp_d(&C, 0) == FP_LT) {
  412a08:	4621      	mov	r1, r4
  412a0a:	f50d 604f 	add.w	r0, sp, #3312	; 0xcf0
  412a0e:	f00d ffc9 	bl	4209a4 <.LFE0>

00412a12 <.LVL662>:
  412a12:	f1b0 3fff 	cmp.w	r0, #4294967295
  412a16:	d0f1      	beq.n	4129fc <.LVL660+0x6>
  412a18:	e005      	b.n	412a26 <.LVL663>
      fp_sub(&C, b, &C);
  412a1a:	f50d 624f 	add.w	r2, sp, #3312	; 0xcf0
  412a1e:	4641      	mov	r1, r8
  412a20:	4610      	mov	r0, r2
  412a22:	f00e f9e7 	bl	420df4 <.LFE144>

00412a26 <.LVL663>:
  while (fp_cmp_mag(&C, b) != FP_LT) {
  412a26:	4641      	mov	r1, r8
  412a28:	f50d 604f 	add.w	r0, sp, #3312	; 0xcf0
  412a2c:	f00d fb03 	bl	420036 <.LFE16>

00412a30 <.LVL664>:
  412a30:	f1b0 3fff 	cmp.w	r0, #4294967295
  412a34:	d1f1      	bne.n	412a1a <.LVL662+0x8>
  fp_copy(&C, c);
  412a36:	4651      	mov	r1, sl
  412a38:	f50d 604f 	add.w	r0, sp, #3312	; 0xcf0
  412a3c:	f00f f8b6 	bl	421bac <.LFE31>

00412a40 <.LVL665>:
  412a40:	e042      	b.n	412ac8 <.LVL677>
    return FP_VAL;
  412a42:	f04f 35ff 	mov.w	r5, #4294967295
  412a46:	e03f      	b.n	412ac8 <.LVL677>

00412a48 <.LVL666>:
    return FP_VAL;
  412a48:	f04f 35ff 	mov.w	r5, #4294967295

00412a4c <.LBE138>:
    return fp_invmod_slow(a,b,c);
  412a4c:	e03c      	b.n	412ac8 <.LVL677>

00412a4e <.LVL668>:
    fp_sub (&v, &u, &v);
  412a4e:	462a      	mov	r2, r5
  412a50:	4639      	mov	r1, r7
  412a52:	4628      	mov	r0, r5
  412a54:	f00e f9ce 	bl	420df4 <.LFE144>

00412a58 <.LVL669>:
    fp_sub (&D, &B, &D);
  412a58:	f50d 528a 	add.w	r2, sp, #4416	; 0x1140
  412a5c:	f241 3168 	movw	r1, #4968	; 0x1368
  412a60:	4469      	add	r1, sp
  412a62:	4610      	mov	r0, r2
  412a64:	f00e f9c6 	bl	420df4 <.LFE144>

00412a68 <.LVL670>:
  412a68:	e17d      	b.n	412d66 <.LVL729>
  if (fp_cmp_d (&v, 1) != FP_EQ) {
  412a6a:	2101      	movs	r1, #1
  412a6c:	f241 5090 	movw	r0, #5520	; 0x1590
  412a70:	4468      	add	r0, sp
  412a72:	f00d ff97 	bl	4209a4 <.LFE0>

00412a76 <.LVL671>:
  412a76:	4605      	mov	r5, r0
  412a78:	bb60      	cbnz	r0, 412ad4 <.LCFI96>
  neg = a->sign;
  412a7a:	f8d9 6004 	ldr.w	r6, [r9, #4]

00412a7e <.LVL672>:
  while (D.sign == FP_NEG) {
  412a7e:	f50d 538a 	add.w	r3, sp, #4416	; 0x1140
  412a82:	685b      	ldr	r3, [r3, #4]
  412a84:	2b01      	cmp	r3, #1
  412a86:	d110      	bne.n	412aaa <.LVL674>
    fp_add (&D, b, &D);
  412a88:	f50d 548a 	add.w	r4, sp, #4416	; 0x1140
  412a8c:	4622      	mov	r2, r4
  412a8e:	4641      	mov	r1, r8
  412a90:	4620      	mov	r0, r4
  412a92:	f00e f891 	bl	420bb8 <.LFE17>

00412a96 <.LVL673>:
  while (D.sign == FP_NEG) {
  412a96:	6863      	ldr	r3, [r4, #4]
  412a98:	2b01      	cmp	r3, #1
  412a9a:	d0f7      	beq.n	412a8c <.LVL672+0xe>
  412a9c:	e005      	b.n	412aaa <.LVL674>
    fp_sub(&D, b, &D);
  412a9e:	f50d 528a 	add.w	r2, sp, #4416	; 0x1140
  412aa2:	4641      	mov	r1, r8
  412aa4:	4610      	mov	r0, r2
  412aa6:	f00e f9a5 	bl	420df4 <.LFE144>

00412aaa <.LVL674>:
  while (fp_cmp_mag(&D, b) != FP_LT) {
  412aaa:	4641      	mov	r1, r8
  412aac:	f50d 508a 	add.w	r0, sp, #4416	; 0x1140
  412ab0:	f00d fac1 	bl	420036 <.LFE16>

00412ab4 <.LVL675>:
  412ab4:	f1b0 3fff 	cmp.w	r0, #4294967295
  412ab8:	d1f1      	bne.n	412a9e <.LVL673+0x8>
  fp_copy (&D, c);
  412aba:	4651      	mov	r1, sl
  412abc:	f50d 508a 	add.w	r0, sp, #4416	; 0x1140
  412ac0:	f00f f874 	bl	421bac <.LFE31>

00412ac4 <.LVL676>:
  c->sign = neg;
  412ac4:	f8ca 6004 	str.w	r6, [sl, #4]

00412ac8 <.LVL677>:
}
  412ac8:	4628      	mov	r0, r5
  412aca:	f50d 5df1 	add.w	sp, sp, #7712	; 0x1e20
  412ace:	b004      	add	sp, #16

00412ad0 <.LCFI95>:
  412ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00412ad4 <.LCFI96>:
    return FP_VAL;
  412ad4:	f04f 35ff 	mov.w	r5, #4294967295
  412ad8:	e7f6      	b.n	412ac8 <.LVL677>

00412ada <.LBB157>:
  if (b->sign == FP_NEG || fp_iszero(b) == FP_YES) {
  412ada:	684b      	ldr	r3, [r1, #4]
  412adc:	2b01      	cmp	r3, #1
  412ade:	d0b3      	beq.n	412a48 <.LVL666>

00412ae0 <.LBB140>:
    fp_zero(a);
  412ae0:	4668      	mov	r0, sp

00412ae2 <.LVL681>:
  412ae2:	f00f fb2f 	bl	422144 <.LFE163>

00412ae6 <.LBB142>:
  412ae6:	a88a      	add	r0, sp, #552	; 0x228

00412ae8 <.LVL683>:
  412ae8:	f00f fb2c 	bl	422144 <.LFE163>

00412aec <.LBB144>:
  412aec:	f50d 608a 	add.w	r0, sp, #1104	; 0x450

00412af0 <.LVL685>:
  412af0:	f00f fb28 	bl	422144 <.LFE163>

00412af4 <.LBB146>:
  412af4:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678

00412af8 <.LVL687>:
  412af8:	f00f fb24 	bl	422144 <.LFE163>

00412afc <.LBB148>:
  412afc:	f50d 600a 	add.w	r0, sp, #2208	; 0x8a0

00412b00 <.LVL689>:
  412b00:	f00f fb20 	bl	422144 <.LFE163>

00412b04 <.LBB150>:
  412b04:	f60d 20c8 	addw	r0, sp, #2760	; 0xac8

00412b08 <.LVL691>:
  412b08:	f00f fb1c 	bl	422144 <.LFE163>

00412b0c <.LBB152>:
  412b0c:	f50d 604f 	add.w	r0, sp, #3312	; 0xcf0

00412b10 <.LVL693>:
  412b10:	f00f fb18 	bl	422144 <.LFE163>

00412b14 <.LBB154>:
  412b14:	f60d 7018 	addw	r0, sp, #3864	; 0xf18

00412b18 <.LVL695>:
  412b18:	f00f fb14 	bl	422144 <.LFE163>

00412b1c <.LBE154>:
  if ((res = fp_mod(a, b, &x)) != FP_OKAY) {
  412b1c:	466a      	mov	r2, sp
  412b1e:	4641      	mov	r1, r8
  412b20:	4648      	mov	r0, r9
  412b22:	f00e f922 	bl	420d6a <.LFE17>

00412b26 <.LVL697>:
  412b26:	4605      	mov	r5, r0
  412b28:	2800      	cmp	r0, #0
  412b2a:	d1cd      	bne.n	412ac8 <.LVL677>
  fp_copy(b, &y);
  412b2c:	a98a      	add	r1, sp, #552	; 0x228
  412b2e:	4640      	mov	r0, r8

00412b30 <.LVL698>:
  412b30:	f00f f83c 	bl	421bac <.LFE31>

00412b34 <.LVL699>:
  if (fp_iseven (&x) == FP_YES && fp_iseven (&y) == FP_YES) {
  412b34:	4b93      	ldr	r3, [pc, #588]	; (412d84 <.LVL729+0x1e>)
  412b36:	f641 6230 	movw	r2, #7728	; 0x1e30
  412b3a:	446a      	add	r2, sp
  412b3c:	58d3      	ldr	r3, [r2, r3]
  412b3e:	2b00      	cmp	r3, #0
  412b40:	dd03      	ble.n	412b4a <.LVL699+0x16>
  412b42:	9b02      	ldr	r3, [sp, #8]
  412b44:	f013 0f01 	tst.w	r3, #1
  412b48:	d016      	beq.n	412b78 <.LVL703+0x6>
  fp_copy (&x, &u);
  412b4a:	f50d 618a 	add.w	r1, sp, #1104	; 0x450
  412b4e:	4668      	mov	r0, sp
  412b50:	f00f f82c 	bl	421bac <.LFE31>

00412b54 <.LVL700>:
  fp_copy (&y, &v);
  412b54:	f50d 61cf 	add.w	r1, sp, #1656	; 0x678
  412b58:	a88a      	add	r0, sp, #552	; 0x228
  412b5a:	f00f f827 	bl	421bac <.LFE31>

00412b5e <.LVL701>:
  fp_set (&A, 1);
  412b5e:	2101      	movs	r1, #1
  412b60:	f50d 600a 	add.w	r0, sp, #2208	; 0x8a0
  412b64:	f00f fad8 	bl	422118 <.LFE20>

00412b68 <.LVL702>:
  fp_set (&D, 1);
  412b68:	2101      	movs	r1, #1
  412b6a:	f60d 7018 	addw	r0, sp, #3864	; 0xf18
  412b6e:	f00f fad3 	bl	422118 <.LFE20>

00412b72 <.LVL703>:
  while (fp_iseven (&v) == FP_YES) {
  412b72:	f50d 64cf 	add.w	r4, sp, #1656	; 0x678
  412b76:	e064      	b.n	412c42 <.LVL714+0xa>
  if (fp_iseven (&x) == FP_YES && fp_iseven (&y) == FP_YES) {
  412b78:	4b83      	ldr	r3, [pc, #524]	; (412d88 <.LVL729+0x22>)
  412b7a:	f641 6230 	movw	r2, #7728	; 0x1e30
  412b7e:	446a      	add	r2, sp
  412b80:	58d3      	ldr	r3, [r2, r3]
  412b82:	2b00      	cmp	r3, #0
  412b84:	dde1      	ble.n	412b4a <.LVL699+0x16>
  412b86:	9b8c      	ldr	r3, [sp, #560]	; 0x230
  412b88:	f013 0f01 	tst.w	r3, #1
  412b8c:	d1dd      	bne.n	412b4a <.LVL699+0x16>
    return FP_VAL;
  412b8e:	f04f 35ff 	mov.w	r5, #4294967295

00412b92 <.LVL704>:
  412b92:	e799      	b.n	412ac8 <.LVL677>

00412b94 <.LVL705>:
    fp_div_2 (&v, &v);
  412b94:	4621      	mov	r1, r4
  412b96:	4620      	mov	r0, r4
  412b98:	f00c f8f6 	bl	41ed88 <.LFE3>

00412b9c <.LVL706>:
    if (fp_isodd (&C) == FP_YES || fp_isodd (&D) == FP_YES) {
  412b9c:	f8dd 3cf0 	ldr.w	r3, [sp, #3312]	; 0xcf0
  412ba0:	2b00      	cmp	r3, #0
  412ba2:	dd04      	ble.n	412bae <.LVL706+0x12>
  412ba4:	f8dd 3cf8 	ldr.w	r3, [sp, #3320]	; 0xcf8
  412ba8:	f013 0f01 	tst.w	r3, #1
  412bac:	d108      	bne.n	412bc0 <.LVL706+0x24>
  412bae:	f8dd 3f18 	ldr.w	r3, [sp, #3864]	; 0xf18
  412bb2:	2b00      	cmp	r3, #0
  412bb4:	dd10      	ble.n	412bd8 <.LVL708>
  412bb6:	f8dd 3f20 	ldr.w	r3, [sp, #3872]	; 0xf20
  412bba:	f013 0f01 	tst.w	r3, #1
  412bbe:	d00b      	beq.n	412bd8 <.LVL708>
      fp_add (&C, &y, &C);
  412bc0:	f50d 624f 	add.w	r2, sp, #3312	; 0xcf0
  412bc4:	a98a      	add	r1, sp, #552	; 0x228
  412bc6:	4610      	mov	r0, r2
  412bc8:	f00d fff6 	bl	420bb8 <.LFE17>

00412bcc <.LVL707>:
      fp_sub (&D, &x, &D);
  412bcc:	f60d 7218 	addw	r2, sp, #3864	; 0xf18
  412bd0:	4669      	mov	r1, sp
  412bd2:	4610      	mov	r0, r2
  412bd4:	f00e f90e 	bl	420df4 <.LFE144>

00412bd8 <.LVL708>:
    fp_div_2 (&C, &C);
  412bd8:	f50d 614f 	add.w	r1, sp, #3312	; 0xcf0
  412bdc:	4608      	mov	r0, r1
  412bde:	f00c f8d3 	bl	41ed88 <.LFE3>

00412be2 <.LVL709>:
    fp_div_2 (&D, &D);
  412be2:	f60d 7118 	addw	r1, sp, #3864	; 0xf18
  412be6:	4608      	mov	r0, r1
  412be8:	f00c f8ce 	bl	41ed88 <.LFE3>

00412bec <.LVL710>:
  while (fp_iseven (&v) == FP_YES) {
  412bec:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
  412bf0:	2b00      	cmp	r3, #0
  412bf2:	dd04      	ble.n	412bfe <.LVL710+0x12>
  412bf4:	f8dd 3680 	ldr.w	r3, [sp, #1664]	; 0x680
  412bf8:	f013 0f01 	tst.w	r3, #1
  412bfc:	d0ca      	beq.n	412b94 <.LVL705>
  if (fp_cmp (&u, &v) != FP_LT) {
  412bfe:	4621      	mov	r1, r4
  412c00:	f50d 608a 	add.w	r0, sp, #1104	; 0x450
  412c04:	f00e fcf8 	bl	4215f8 <.LFE9>

00412c08 <.LVL711>:
  412c08:	f1b0 3fff 	cmp.w	r0, #4294967295
  412c0c:	f43f aed8 	beq.w	4129c0 <.LBB138>
    fp_sub (&u, &v, &u);
  412c10:	f50d 628a 	add.w	r2, sp, #1104	; 0x450
  412c14:	4621      	mov	r1, r4
  412c16:	4610      	mov	r0, r2
  412c18:	f00e f8ec 	bl	420df4 <.LFE144>

00412c1c <.LVL712>:
    fp_sub (&A, &C, &A);
  412c1c:	f50d 620a 	add.w	r2, sp, #2208	; 0x8a0
  412c20:	f50d 614f 	add.w	r1, sp, #3312	; 0xcf0
  412c24:	4610      	mov	r0, r2
  412c26:	f00e f8e5 	bl	420df4 <.LFE144>

00412c2a <.LVL713>:
    fp_sub (&B, &D, &B);
  412c2a:	f60d 22c8 	addw	r2, sp, #2760	; 0xac8
  412c2e:	f60d 7118 	addw	r1, sp, #3864	; 0xf18
  412c32:	4610      	mov	r0, r2
  412c34:	f00e f8de 	bl	420df4 <.LFE144>

00412c38 <.LVL714>:
  if (fp_iszero (&u) == FP_NO)
  412c38:	f8dd 3450 	ldr.w	r3, [sp, #1104]	; 0x450
  412c3c:	2b00      	cmp	r3, #0
  412c3e:	f43f aed4 	beq.w	4129ea <.LVL658+0x2>
  while (fp_iseven (&u) == FP_YES) {
  412c42:	f8dd 3450 	ldr.w	r3, [sp, #1104]	; 0x450
  412c46:	2b00      	cmp	r3, #0
  412c48:	ddd0      	ble.n	412bec <.LVL710>
  412c4a:	f8dd 3458 	ldr.w	r3, [sp, #1112]	; 0x458
  412c4e:	f013 0f01 	tst.w	r3, #1
  412c52:	d1cb      	bne.n	412bec <.LVL710>
    fp_div_2 (&u, &u);
  412c54:	f50d 618a 	add.w	r1, sp, #1104	; 0x450
  412c58:	4608      	mov	r0, r1
  412c5a:	f00c f895 	bl	41ed88 <.LFE3>

00412c5e <.LVL715>:
    if (fp_isodd (&A) == FP_YES || fp_isodd (&B) == FP_YES) {
  412c5e:	4b4b      	ldr	r3, [pc, #300]	; (412d8c <.LVL729+0x26>)
  412c60:	f641 6230 	movw	r2, #7728	; 0x1e30
  412c64:	446a      	add	r2, sp
  412c66:	58d3      	ldr	r3, [r2, r3]
  412c68:	2b00      	cmp	r3, #0
  412c6a:	dd04      	ble.n	412c76 <.LVL715+0x18>
  412c6c:	f8dd 38a8 	ldr.w	r3, [sp, #2216]	; 0x8a8
  412c70:	f013 0f01 	tst.w	r3, #1
  412c74:	d10b      	bne.n	412c8e <.LVL715+0x30>
  412c76:	4b46      	ldr	r3, [pc, #280]	; (412d90 <.LVL729+0x2a>)
  412c78:	f641 6230 	movw	r2, #7728	; 0x1e30
  412c7c:	446a      	add	r2, sp
  412c7e:	58d3      	ldr	r3, [r2, r3]
  412c80:	2b00      	cmp	r3, #0
  412c82:	dd10      	ble.n	412ca6 <.LVL717>
  412c84:	f8dd 3ad0 	ldr.w	r3, [sp, #2768]	; 0xad0
  412c88:	f013 0f01 	tst.w	r3, #1
  412c8c:	d00b      	beq.n	412ca6 <.LVL717>
      fp_add (&A, &y, &A);
  412c8e:	f50d 620a 	add.w	r2, sp, #2208	; 0x8a0
  412c92:	a98a      	add	r1, sp, #552	; 0x228
  412c94:	4610      	mov	r0, r2
  412c96:	f00d ff8f 	bl	420bb8 <.LFE17>

00412c9a <.LVL716>:
      fp_sub (&B, &x, &B);
  412c9a:	f60d 22c8 	addw	r2, sp, #2760	; 0xac8
  412c9e:	4669      	mov	r1, sp
  412ca0:	4610      	mov	r0, r2
  412ca2:	f00e f8a7 	bl	420df4 <.LFE144>

00412ca6 <.LVL717>:
    fp_div_2 (&A, &A);
  412ca6:	f50d 610a 	add.w	r1, sp, #2208	; 0x8a0
  412caa:	4608      	mov	r0, r1
  412cac:	f00c f86c 	bl	41ed88 <.LFE3>

00412cb0 <.LVL718>:
    fp_div_2 (&B, &B);
  412cb0:	f60d 21c8 	addw	r1, sp, #2760	; 0xac8
  412cb4:	4608      	mov	r0, r1
  412cb6:	f00c f867 	bl	41ed88 <.LFE3>

00412cba <.LVL719>:
  412cba:	e7c2      	b.n	412c42 <.LVL714+0xa>

00412cbc <.LBE157>:
      fp_sub (&B, &x, &B);
  412cbc:	f241 3268 	movw	r2, #4968	; 0x1368
  412cc0:	446a      	add	r2, sp
  412cc2:	f641 4108 	movw	r1, #7176	; 0x1c08
  412cc6:	4469      	add	r1, sp
  412cc8:	4610      	mov	r0, r2
  412cca:	f00e f893 	bl	420df4 <.LFE144>

00412cce <.LVL721>:
  412cce:	e010      	b.n	412cf2 <.LVL722+0x1a>
    fp_div_2 (&u, &u);
  412cd0:	4639      	mov	r1, r7
  412cd2:	4638      	mov	r0, r7
  412cd4:	f00c f858 	bl	41ed88 <.LFE3>

00412cd8 <.LVL722>:
    if (fp_isodd (&B) == FP_YES) {
  412cd8:	f241 3368 	movw	r3, #4968	; 0x1368
  412cdc:	446b      	add	r3, sp
  412cde:	681b      	ldr	r3, [r3, #0]
  412ce0:	2b00      	cmp	r3, #0
  412ce2:	dd06      	ble.n	412cf2 <.LVL722+0x1a>
  412ce4:	f241 3368 	movw	r3, #4968	; 0x1368
  412ce8:	446b      	add	r3, sp
  412cea:	689b      	ldr	r3, [r3, #8]
  412cec:	f013 0f01 	tst.w	r3, #1
  412cf0:	d1e4      	bne.n	412cbc <.LBE157>
    fp_div_2 (&B, &B);
  412cf2:	f241 3168 	movw	r1, #4968	; 0x1368
  412cf6:	4469      	add	r1, sp
  412cf8:	4608      	mov	r0, r1
  412cfa:	f00c f845 	bl	41ed88 <.LFE3>

00412cfe <.LVL723>:
  412cfe:	e036      	b.n	412d6e <.LVL729+0x8>
      fp_sub (&D, &x, &D);
  412d00:	4622      	mov	r2, r4
  412d02:	f641 4108 	movw	r1, #7176	; 0x1c08
  412d06:	4469      	add	r1, sp
  412d08:	4620      	mov	r0, r4
  412d0a:	f00e f873 	bl	420df4 <.LFE144>

00412d0e <.LVL724>:
  412d0e:	e00a      	b.n	412d26 <.LVL725+0xe>
    fp_div_2 (&v, &v);
  412d10:	4629      	mov	r1, r5
  412d12:	4628      	mov	r0, r5
  412d14:	f00c f838 	bl	41ed88 <.LFE3>

00412d18 <.LVL725>:
    if (fp_isodd (&D) == FP_YES) {
  412d18:	6823      	ldr	r3, [r4, #0]
  412d1a:	2b00      	cmp	r3, #0
  412d1c:	dd03      	ble.n	412d26 <.LVL725+0xe>
  412d1e:	68a3      	ldr	r3, [r4, #8]
  412d20:	f013 0f01 	tst.w	r3, #1
  412d24:	d1ec      	bne.n	412d00 <.LVL723+0x2>
    fp_div_2 (&D, &D);
  412d26:	4621      	mov	r1, r4
  412d28:	4620      	mov	r0, r4
  412d2a:	f00c f82d 	bl	41ed88 <.LFE3>

00412d2e <.LVL726>:
  while (fp_iseven (&v) == FP_YES) {
  412d2e:	6833      	ldr	r3, [r6, #0]
  412d30:	2b00      	cmp	r3, #0
  412d32:	dd03      	ble.n	412d3c <.LVL726+0xe>
  412d34:	68b3      	ldr	r3, [r6, #8]
  412d36:	f013 0f01 	tst.w	r3, #1
  412d3a:	d0e9      	beq.n	412d10 <.LVL724+0x2>
  if (fp_cmp (&u, &v) != FP_LT) {
  412d3c:	4629      	mov	r1, r5
  412d3e:	4638      	mov	r0, r7
  412d40:	f00e fc5a 	bl	4215f8 <.LFE9>

00412d44 <.LVL727>:
  412d44:	f1b0 3fff 	cmp.w	r0, #4294967295
  412d48:	f43f ae81 	beq.w	412a4e <.LVL668>
    fp_sub (&u, &v, &u);
  412d4c:	463a      	mov	r2, r7
  412d4e:	4629      	mov	r1, r5
  412d50:	4638      	mov	r0, r7
  412d52:	f00e f84f 	bl	420df4 <.LFE144>

00412d56 <.LVL728>:
    fp_sub (&B, &D, &B);
  412d56:	f241 3268 	movw	r2, #4968	; 0x1368
  412d5a:	446a      	add	r2, sp
  412d5c:	f50d 518a 	add.w	r1, sp, #4416	; 0x1140
  412d60:	4610      	mov	r0, r2
  412d62:	f00e f847 	bl	420df4 <.LFE144>

00412d66 <.LVL729>:
  if (fp_iszero (&u) == FP_NO) {
  412d66:	683b      	ldr	r3, [r7, #0]
  412d68:	2b00      	cmp	r3, #0
  412d6a:	f43f ae7e 	beq.w	412a6a <.LVL670+0x2>
  while (fp_iseven (&u) == FP_YES) {
  412d6e:	683b      	ldr	r3, [r7, #0]
  412d70:	2b00      	cmp	r3, #0
  412d72:	dd03      	ble.n	412d7c <.LVL729+0x16>
  412d74:	68bb      	ldr	r3, [r7, #8]
  412d76:	f013 0f01 	tst.w	r3, #1
  412d7a:	d0a9      	beq.n	412cd0 <.LVL721+0x2>
    if (fp_isodd (&D) == FP_YES) {
  412d7c:	f50d 548a 	add.w	r4, sp, #4416	; 0x1140
  412d80:	e7d5      	b.n	412d2e <.LVL726>
  412d82:	bf00      	nop
  412d84:	ffffe1d0 	.word	0xffffe1d0
  412d88:	ffffe3f8 	.word	0xffffe3f8
  412d8c:	ffffea70 	.word	0xffffea70
  412d90:	ffffec98 	.word	0xffffec98

Disassembly of section .text.inflate_fast%58:

00412d94 <inflate_fast>:
      output space.
 */
void ZLIB_INTERNAL inflate_fast(strm, start)
z_streamp strm;
unsigned start;         /* inflate()'s starting value for strm->avail_out */
{
  412d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00412d98 <.LCFI0>:
  412d98:	b093      	sub	sp, #76	; 0x4c

00412d9a <.LCFI1>:
  412d9a:	4682      	mov	sl, r0
    unsigned len;               /* match length, unused bytes */
    unsigned dist;              /* match distance */
    unsigned char FAR *from;    /* where to copy match from */

    /* copy state to local variables */
    state = (struct inflate_state FAR *)strm->state;
  412d9c:	f8d0 b01c 	ldr.w	fp, [r0, #28]
    in = strm->next_in - OFF;
  412da0:	6803      	ldr	r3, [r0, #0]
  412da2:	f103 39ff 	add.w	r9, r3, #4294967295

00412da6 <.LVL2>:
    last = in + (strm->avail_in - 5);
  412da6:	6843      	ldr	r3, [r0, #4]
  412da8:	3b05      	subs	r3, #5
  412daa:	444b      	add	r3, r9
  412dac:	9302      	str	r3, [sp, #8]

00412dae <.LVL3>:
    out = strm->next_out - OFF;
  412dae:	68c5      	ldr	r5, [r0, #12]
  412db0:	3d01      	subs	r5, #1

00412db2 <.LVL4>:
    beg = out - (start - strm->avail_out);
  412db2:	6903      	ldr	r3, [r0, #16]

00412db4 <.LVL5>:
  412db4:	1a59      	subs	r1, r3, r1

00412db6 <.LVL6>:
  412db6:	186a      	adds	r2, r5, r1
  412db8:	9206      	str	r2, [sp, #24]

00412dba <.LVL7>:
    end = out + (strm->avail_out - 257);
  412dba:	f2a3 1301 	subw	r3, r3, #257	; 0x101
  412dbe:	18eb      	adds	r3, r5, r3
  412dc0:	9301      	str	r3, [sp, #4]

00412dc2 <.LVL8>:
#ifdef INFLATE_STRICT
    dmax = state->dmax;
#endif
    wsize = state->wsize;
  412dc2:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28

00412dc6 <.LVL9>:
  412dc6:	461f      	mov	r7, r3
  412dc8:	9309      	str	r3, [sp, #36]	; 0x24

00412dca <.LVL10>:
    whave = state->whave;
  412dca:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c

00412dce <.LVL11>:
  412dce:	9307      	str	r3, [sp, #28]

00412dd0 <.LVL12>:
    wnext = state->wnext;
  412dd0:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30

00412dd4 <.LVL13>:
  412dd4:	9304      	str	r3, [sp, #16]

00412dd6 <.LVL14>:
    window = state->window;
  412dd6:	f8db 1034 	ldr.w	r1, [fp, #52]	; 0x34
  412dda:	9108      	str	r1, [sp, #32]

00412ddc <.LVL15>:
    hold = state->hold;
  412ddc:	f8db 1038 	ldr.w	r1, [fp, #56]	; 0x38

00412de0 <.LVL16>:
    bits = state->bits;
  412de0:	f8db 003c 	ldr.w	r0, [fp, #60]	; 0x3c

00412de4 <.LVL17>:
    lcode = state->lencode;
  412de4:	f8db 404c 	ldr.w	r4, [fp, #76]	; 0x4c

00412de8 <.LVL18>:
    dcode = state->distcode;
  412de8:	f8db 8050 	ldr.w	r8, [fp, #80]	; 0x50
    lmask = (1U << state->lenbits) - 1;
  412dec:	2201      	movs	r2, #1

00412dee <.LVL20>:
  412dee:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54

00412df2 <.LVL21>:
  412df2:	fa02 f303 	lsl.w	r3, r2, r3
  412df6:	1e5e      	subs	r6, r3, #1
  412df8:	9603      	str	r6, [sp, #12]

00412dfa <.LVL22>:
    dmask = (1U << state->distbits) - 1;
  412dfa:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
  412dfe:	fa02 f303 	lsl.w	r3, r2, r3
  412e02:	1e5e      	subs	r6, r3, #1

00412e04 <.LVL23>:
  412e04:	9605      	str	r6, [sp, #20]

00412e06 <.LVL24>:
                    if (bits < op) {
                        hold += (unsigned long)(PUP(in)) << bits;
                        bits += 8;
                    }
                }
                dist += (unsigned)hold & ((1U << op) - 1);
  412e06:	4616      	mov	r6, r2

00412e08 <.LVL25>:
                            } while (--op);
                            from = out - dist;  /* rest from output */
                        }
                    }
                    else if (wnext < op) {      /* wrap around window */
                        from += wsize + wnext - op;
  412e08:	463b      	mov	r3, r7
  412e0a:	9a04      	ldr	r2, [sp, #16]
  412e0c:	4413      	add	r3, r2
  412e0e:	930b      	str	r3, [sp, #44]	; 0x2c
                        if (state->sane) {
  412e10:	f50b 53de 	add.w	r3, fp, #7104	; 0x1bc0
  412e14:	930a      	str	r3, [sp, #40]	; 0x28
  412e16:	e00a      	b.n	412e2e <.LVL27+0x10>

00412e18 <.LVL26>:
            PUP(out) = (unsigned char)(here.val);
  412e18:	f885 e001 	strb.w	lr, [r5, #1]
  412e1c:	3501      	adds	r5, #1

00412e1e <.LVL27>:
        else {
            strm->msg = (char *)"invalid literal/length code";
            state->mode = BAD;
            break;
        }
    } while (in < last && out < end);
  412e1e:	9b02      	ldr	r3, [sp, #8]
  412e20:	4599      	cmp	r9, r3
  412e22:	f080 8097 	bcs.w	412f54 <.LVL84>
  412e26:	9b01      	ldr	r3, [sp, #4]
  412e28:	429d      	cmp	r5, r3
  412e2a:	f080 8093 	bcs.w	412f54 <.LVL84>
        if (bits < 15) {
  412e2e:	280e      	cmp	r0, #14
  412e30:	d80c      	bhi.n	412e4c <.LVL33>

00412e32 <.LVL28>:
            hold += (unsigned long)(PUP(in)) << bits;
  412e32:	f899 3002 	ldrb.w	r3, [r9, #2]
            bits += 8;
  412e36:	f100 0208 	add.w	r2, r0, #8

00412e3a <.LVL29>:
            hold += (unsigned long)(PUP(in)) << bits;
  412e3a:	4093      	lsls	r3, r2
            hold += (unsigned long)(PUP(in)) << bits;
  412e3c:	f899 2001 	ldrb.w	r2, [r9, #1]

00412e40 <.LVL30>:
  412e40:	4082      	lsls	r2, r0
            hold += (unsigned long)(PUP(in)) << bits;
  412e42:	4413      	add	r3, r2
  412e44:	4419      	add	r1, r3

00412e46 <.LVL31>:
            bits += 8;
  412e46:	3010      	adds	r0, #16

00412e48 <.LVL32>:
            hold += (unsigned long)(PUP(in)) << bits;
  412e48:	f109 0902 	add.w	r9, r9, #2

00412e4c <.LVL33>:
        here = lcode[hold & lmask];
  412e4c:	9b03      	ldr	r3, [sp, #12]
  412e4e:	ea01 0203 	and.w	r2, r1, r3
  412e52:	eb04 0382 	add.w	r3, r4, r2, lsl #2
  412e56:	f814 2022 	ldrb.w	r2, [r4, r2, lsl #2]

00412e5a <.LVL34>:
  412e5a:	f8b3 e002 	ldrh.w	lr, [r3, #2]

00412e5e <.LVL35>:
        op = (unsigned)(here.bits);
  412e5e:	785b      	ldrb	r3, [r3, #1]

00412e60 <.LVL36>:
        hold >>= op;
  412e60:	40d9      	lsrs	r1, r3

00412e62 <.LVL37>:
        bits -= op;
  412e62:	1ac0      	subs	r0, r0, r3
        op = (unsigned)(here.op);
  412e64:	4617      	mov	r7, r2

00412e66 <.LVL39>:
        if (op == 0) {                          /* literal */
  412e66:	2a00      	cmp	r2, #0
  412e68:	d0d6      	beq.n	412e18 <.LVL26>
        else if (op & 16) {                     /* length base */
  412e6a:	f012 0f10 	tst.w	r2, #16
  412e6e:	d121      	bne.n	412eb4 <.LVL49+0x10>
        else if ((op & 64) == 0) {              /* 2nd level length code */
  412e70:	f012 0f40 	tst.w	r2, #64	; 0x40
  412e74:	d116      	bne.n	412ea4 <.LVL49>

00412e76 <.LVL40>:
            here = lcode[here.val + (hold & ((1U << op) - 1))];
  412e76:	fa06 f707 	lsl.w	r7, r6, r7
  412e7a:	3f01      	subs	r7, #1
  412e7c:	400f      	ands	r7, r1
  412e7e:	44be      	add	lr, r7

00412e80 <.LVL41>:
  412e80:	eb04 038e 	add.w	r3, r4, lr, lsl #2

00412e84 <.LVL42>:
  412e84:	f814 202e 	ldrb.w	r2, [r4, lr, lsl #2]

00412e88 <.LVL43>:
  412e88:	f8b3 e002 	ldrh.w	lr, [r3, #2]

00412e8c <.LDL1>:
        op = (unsigned)(here.bits);
  412e8c:	785b      	ldrb	r3, [r3, #1]

00412e8e <.LVL45>:
        hold >>= op;
  412e8e:	40d9      	lsrs	r1, r3
        bits -= op;
  412e90:	1ac0      	subs	r0, r0, r3
        op = (unsigned)(here.op);
  412e92:	4617      	mov	r7, r2

00412e94 <.LVL48>:
        if (op == 0) {                          /* literal */
  412e94:	2a00      	cmp	r2, #0
  412e96:	d0bf      	beq.n	412e18 <.LVL26>
        else if (op & 16) {                     /* length base */
  412e98:	f012 0f10 	tst.w	r2, #16
  412e9c:	d10a      	bne.n	412eb4 <.LVL49+0x10>
        else if ((op & 64) == 0) {              /* 2nd level length code */
  412e9e:	f012 0f40 	tst.w	r2, #64	; 0x40
  412ea2:	d0e8      	beq.n	412e76 <.LVL40>

00412ea4 <.LVL49>:
        else if (op & 32) {                     /* end-of-block */
  412ea4:	f012 0f20 	tst.w	r2, #32
  412ea8:	f000 817c 	beq.w	4131a4 <.LVL176>
            state->mode = TYPE;
  412eac:	230b      	movs	r3, #11
  412eae:	f88b 3000 	strb.w	r3, [fp]
            break;
  412eb2:	e04f      	b.n	412f54 <.LVL84>
            len = (unsigned)(here.val);
  412eb4:	4673      	mov	r3, lr

00412eb6 <.LVL50>:
            if (op) {
  412eb6:	f012 020f 	ands.w	r2, r2, #15

00412eba <.LVL51>:
  412eba:	d00f      	beq.n	412edc <.LVL56+0xe>

00412ebc <.LVL52>:
                if (bits < op) {
  412ebc:	4282      	cmp	r2, r0
  412ebe:	d906      	bls.n	412ece <.LVL56>

00412ec0 <.LVL53>:
                    hold += (unsigned long)(PUP(in)) << bits;
  412ec0:	f899 7001 	ldrb.w	r7, [r9, #1]
  412ec4:	4087      	lsls	r7, r0
  412ec6:	4439      	add	r1, r7
                    bits += 8;
  412ec8:	3008      	adds	r0, #8
                    hold += (unsigned long)(PUP(in)) << bits;
  412eca:	f109 0901 	add.w	r9, r9, #1

00412ece <.LVL56>:
                len += (unsigned)hold & ((1U << op) - 1);
  412ece:	fa06 f702 	lsl.w	r7, r6, r2
  412ed2:	3f01      	subs	r7, #1
  412ed4:	400f      	ands	r7, r1
  412ed6:	443b      	add	r3, r7
                hold >>= op;
  412ed8:	40d1      	lsrs	r1, r2
                bits -= op;
  412eda:	1a80      	subs	r0, r0, r2
            if (bits < 15) {
  412edc:	280e      	cmp	r0, #14
  412ede:	d80c      	bhi.n	412efa <.LVL66>

00412ee0 <.LVL60>:
                hold += (unsigned long)(PUP(in)) << bits;
  412ee0:	f899 2002 	ldrb.w	r2, [r9, #2]

00412ee4 <.LVL61>:
                bits += 8;
  412ee4:	f100 0708 	add.w	r7, r0, #8

00412ee8 <.LVL62>:
                hold += (unsigned long)(PUP(in)) << bits;
  412ee8:	40ba      	lsls	r2, r7
                hold += (unsigned long)(PUP(in)) << bits;
  412eea:	f899 7001 	ldrb.w	r7, [r9, #1]

00412eee <.LVL63>:
  412eee:	4087      	lsls	r7, r0
                hold += (unsigned long)(PUP(in)) << bits;
  412ef0:	443a      	add	r2, r7
  412ef2:	4411      	add	r1, r2

00412ef4 <.LVL64>:
                bits += 8;
  412ef4:	3010      	adds	r0, #16

00412ef6 <.LVL65>:
                hold += (unsigned long)(PUP(in)) << bits;
  412ef6:	f109 0902 	add.w	r9, r9, #2

00412efa <.LVL66>:
            here = dcode[hold & dmask];
  412efa:	9a05      	ldr	r2, [sp, #20]
  412efc:	400a      	ands	r2, r1
  412efe:	eb08 0782 	add.w	r7, r8, r2, lsl #2
  412f02:	f818 2022 	ldrb.w	r2, [r8, r2, lsl #2]

00412f06 <.LVL67>:
  412f06:	f8b7 c002 	ldrh.w	ip, [r7, #2]

00412f0a <.LVL68>:
            op = (unsigned)(here.bits);
  412f0a:	787f      	ldrb	r7, [r7, #1]

00412f0c <.LVL69>:
            hold >>= op;
  412f0c:	40f9      	lsrs	r1, r7

00412f0e <.LVL70>:
            bits -= op;
  412f0e:	1bc0      	subs	r0, r0, r7
            op = (unsigned)(here.op);
  412f10:	4617      	mov	r7, r2

00412f12 <.LVL72>:
            if (op & 16) {                      /* distance base */
  412f12:	f012 0f10 	tst.w	r2, #16
  412f16:	d145      	bne.n	412fa4 <.LCFI3>
            else if ((op & 64) == 0) {          /* 2nd level distance code */
  412f18:	f012 0f40 	tst.w	r2, #64	; 0x40
  412f1c:	d114      	bne.n	412f48 <.LVL82>

00412f1e <.LVL73>:
                here = dcode[here.val + (hold & ((1U << op) - 1))];
  412f1e:	fa06 f707 	lsl.w	r7, r6, r7
  412f22:	3f01      	subs	r7, #1
  412f24:	400f      	ands	r7, r1
  412f26:	44bc      	add	ip, r7

00412f28 <.LVL74>:
  412f28:	eb08 078c 	add.w	r7, r8, ip, lsl #2

00412f2c <.LVL75>:
  412f2c:	f818 202c 	ldrb.w	r2, [r8, ip, lsl #2]

00412f30 <.LVL76>:
  412f30:	f8b7 c002 	ldrh.w	ip, [r7, #2]

00412f34 <.LDL2>:
            op = (unsigned)(here.bits);
  412f34:	787f      	ldrb	r7, [r7, #1]

00412f36 <.LVL78>:
            hold >>= op;
  412f36:	40f9      	lsrs	r1, r7
            bits -= op;
  412f38:	1bc0      	subs	r0, r0, r7
            op = (unsigned)(here.op);
  412f3a:	4617      	mov	r7, r2

00412f3c <.LVL81>:
            if (op & 16) {                      /* distance base */
  412f3c:	f012 0f10 	tst.w	r2, #16
  412f40:	d130      	bne.n	412fa4 <.LCFI3>
            else if ((op & 64) == 0) {          /* 2nd level distance code */
  412f42:	f012 0f40 	tst.w	r2, #64	; 0x40
  412f46:	d0ea      	beq.n	412f1e <.LVL73>

00412f48 <.LVL82>:
                strm->msg = (char *)"invalid distance code";
  412f48:	4b9f      	ldr	r3, [pc, #636]	; (4131c8 <.LVL180+0x6>)

00412f4a <.LVL83>:
  412f4a:	f8ca 3018 	str.w	r3, [sl, #24]
                state->mode = BAD;
  412f4e:	231d      	movs	r3, #29
  412f50:	f88b 3000 	strb.w	r3, [fp]

00412f54 <.LVL84>:

    /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
    len = bits >> 3;
    in -= len;
  412f54:	eba9 03d0 	sub.w	r3, r9, r0, lsr #3

00412f58 <.LVL85>:
  412f58:	f000 0007 	and.w	r0, r0, #7

00412f5c <.LVL86>:
    bits -= len << 3;
    hold &= (1U << bits) - 1;
  412f5c:	2201      	movs	r2, #1
  412f5e:	4082      	lsls	r2, r0
  412f60:	3a01      	subs	r2, #1
  412f62:	4011      	ands	r1, r2

    /* update state and return */
    strm->next_in = in + OFF;
  412f64:	1c5a      	adds	r2, r3, #1
  412f66:	f8ca 2000 	str.w	r2, [sl]
    strm->next_out = out + OFF;
  412f6a:	1c6a      	adds	r2, r5, #1
  412f6c:	f8ca 200c 	str.w	r2, [sl, #12]
    strm->avail_in = (unsigned)(in < last ? 5 + (last - in) : 5 - (in - last));
  412f70:	9c02      	ldr	r4, [sp, #8]

00412f72 <.LVL88>:
  412f72:	429c      	cmp	r4, r3
  412f74:	f240 811f 	bls.w	4131b6 <.LVL178>
  412f78:	1ae3      	subs	r3, r4, r3

00412f7a <.LVL89>:
  412f7a:	3305      	adds	r3, #5
  412f7c:	f8ca 3004 	str.w	r3, [sl, #4]
    strm->avail_out = (unsigned)(out < end ?
  412f80:	9b01      	ldr	r3, [sp, #4]
  412f82:	429d      	cmp	r5, r3
  412f84:	f0c0 811c 	bcc.w	4131c0 <.LVL179+0x6>
                                 257 + (end - out) : 257 - (out - end));
  412f88:	9b01      	ldr	r3, [sp, #4]
  412f8a:	1aed      	subs	r5, r5, r3

00412f8c <.LVL90>:
  412f8c:	f240 1301 	movw	r3, #257	; 0x101
  412f90:	1b5b      	subs	r3, r3, r5
    strm->avail_out = (unsigned)(out < end ?
  412f92:	f8ca 3010 	str.w	r3, [sl, #16]
    state->hold = hold;
  412f96:	f8cb 1038 	str.w	r1, [fp, #56]	; 0x38

00412f9a <.LVL91>:
    state->bits = bits;
  412f9a:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
    return;
}
  412f9e:	b013      	add	sp, #76	; 0x4c

00412fa0 <.LCFI2>:
  412fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00412fa4 <.LCFI3>:
                dist = (unsigned)(here.val);
  412fa4:	4667      	mov	r7, ip

00412fa6 <.LVL93>:
                op &= 15;                       /* number of extra bits */
  412fa6:	f002 020f 	and.w	r2, r2, #15
                if (bits < op) {
  412faa:	4282      	cmp	r2, r0
  412fac:	d90b      	bls.n	412fc6 <.LVL99>

00412fae <.LVL95>:
                    hold += (unsigned long)(PUP(in)) << bits;
  412fae:	f899 e001 	ldrb.w	lr, [r9, #1]
  412fb2:	fa0e fe00 	lsl.w	lr, lr, r0
  412fb6:	4471      	add	r1, lr
                    bits += 8;
  412fb8:	f100 0e08 	add.w	lr, r0, #8

00412fbc <.LVL97>:
                    if (bits < op) {
  412fbc:	4572      	cmp	r2, lr
  412fbe:	d860      	bhi.n	413082 <.LVL128>
                    hold += (unsigned long)(PUP(in)) << bits;
  412fc0:	f109 0901 	add.w	r9, r9, #1

00412fc4 <.LVL98>:
                    bits += 8;
  412fc4:	4670      	mov	r0, lr

00412fc6 <.LVL99>:
                dist += (unsigned)hold & ((1U << op) - 1);
  412fc6:	fa06 fe02 	lsl.w	lr, r6, r2
  412fca:	f10e 3eff 	add.w	lr, lr, #4294967295
  412fce:	ea0e 0e01 	and.w	lr, lr, r1
  412fd2:	eb0e 0c07 	add.w	ip, lr, r7

00412fd6 <.LVL100>:
                hold >>= op;
  412fd6:	40d1      	lsrs	r1, r2
                bits -= op;
  412fd8:	1a80      	subs	r0, r0, r2
                op = (unsigned)(out - beg);     /* max distance in output */
  412fda:	9a06      	ldr	r2, [sp, #24]

00412fdc <.LVL103>:
  412fdc:	1aaa      	subs	r2, r5, r2

00412fde <.LVL104>:
                if (dist > op) {                /* see if copy from window */
  412fde:	4594      	cmp	ip, r2
  412fe0:	f240 80c3 	bls.w	41316a <.LVL162>
                    op = dist - op;             /* distance back in window */
  412fe4:	ebac 0202 	sub.w	r2, ip, r2

00412fe8 <.LVL105>:
  412fe8:	920d      	str	r2, [sp, #52]	; 0x34

00412fea <.LVL106>:
                    if (op > whave) {
  412fea:	9f07      	ldr	r7, [sp, #28]
  412fec:	4297      	cmp	r7, r2
  412fee:	d203      	bcs.n	412ff8 <.LVL107+0x6>
                        if (state->sane) {
  412ff0:	9a0a      	ldr	r2, [sp, #40]	; 0x28

00412ff2 <.LVL107>:
  412ff2:	6812      	ldr	r2, [r2, #0]
  412ff4:	2a00      	cmp	r2, #0
  412ff6:	d14d      	bne.n	413094 <.LVL133>
                    from = window - OFF;
  412ff8:	9a08      	ldr	r2, [sp, #32]
  412ffa:	3a01      	subs	r2, #1
  412ffc:	920e      	str	r2, [sp, #56]	; 0x38

00412ffe <.LVL108>:
                    if (wnext == 0) {           /* very common case */
  412ffe:	9a04      	ldr	r2, [sp, #16]

00413000 <.LVL109>:
  413000:	2a00      	cmp	r2, #0
  413002:	d14e      	bne.n	4130a2 <.LVL135>
                        from += wsize - op;
  413004:	9f09      	ldr	r7, [sp, #36]	; 0x24
  413006:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  413008:	1aba      	subs	r2, r7, r2
  41300a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  41300c:	46be      	mov	lr, r7
  41300e:	443a      	add	r2, r7
  413010:	920c      	str	r2, [sp, #48]	; 0x30

00413012 <.LVL110>:
                        if (op < len) {         /* some from window */
  413012:	9a0d      	ldr	r2, [sp, #52]	; 0x34

00413014 <.LVL111>:
  413014:	4293      	cmp	r3, r2
  413016:	d918      	bls.n	41304a <.LVL116>
                            len -= op;
  413018:	1a9b      	subs	r3, r3, r2
  41301a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  41301c:	463a      	mov	r2, r7
  41301e:	9f09      	ldr	r7, [sp, #36]	; 0x24
  413020:	443a      	add	r2, r7
  413022:	920e      	str	r2, [sp, #56]	; 0x38
  413024:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  413028:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  41302a:	462f      	mov	r7, r5
  41302c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38

00413030 <.LVL113>:
                                PUP(out) = PUP(from);
  413030:	f812 ef01 	ldrb.w	lr, [r2, #1]!

00413034 <.LVL114>:
  413034:	f807 ef01 	strb.w	lr, [r7, #1]!
                            } while (--op);
  413038:	454a      	cmp	r2, r9
  41303a:	d1f9      	bne.n	413030 <.LVL113>
  41303c:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  413040:	9a0d      	ldr	r2, [sp, #52]	; 0x34

00413042 <.LVL115>:
  413042:	4415      	add	r5, r2
                            from = out - dist;  /* rest from output */
  413044:	eba5 020c 	sub.w	r2, r5, ip
  413048:	920c      	str	r2, [sp, #48]	; 0x30

0041304a <.LVL116>:
                    while (len > 2) {
  41304a:	2b02      	cmp	r3, #2
  41304c:	d90c      	bls.n	413068 <.LVL123>
  41304e:	9a0c      	ldr	r2, [sp, #48]	; 0x30

00413050 <.LVL117>:
                        PUP(out) = PUP(from);
  413050:	7857      	ldrb	r7, [r2, #1]
  413052:	706f      	strb	r7, [r5, #1]

00413054 <.LVL118>:
                        PUP(out) = PUP(from);
  413054:	7897      	ldrb	r7, [r2, #2]
  413056:	70af      	strb	r7, [r5, #2]

00413058 <.LVL119>:
                        PUP(out) = PUP(from);
  413058:	f812 7f03 	ldrb.w	r7, [r2, #3]!

0041305c <.LVL120>:
  41305c:	f805 7f03 	strb.w	r7, [r5, #3]!

00413060 <.LVL121>:
                        len -= 3;
  413060:	3b03      	subs	r3, #3

00413062 <.LVL122>:
                    while (len > 2) {
  413062:	2b02      	cmp	r3, #2
  413064:	d8f4      	bhi.n	413050 <.LVL117>
  413066:	920c      	str	r2, [sp, #48]	; 0x30

00413068 <.LVL123>:
                    if (len) {
  413068:	2b00      	cmp	r3, #0
  41306a:	f43f aed8 	beq.w	412e1e <.LVL27>

0041306e <.LVL124>:
                        PUP(out) = PUP(from);
  41306e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  413070:	7857      	ldrb	r7, [r2, #1]
  413072:	706f      	strb	r7, [r5, #1]
                        if (len > 1)
  413074:	2b01      	cmp	r3, #1
  413076:	d976      	bls.n	413166 <.LVL160>

00413078 <.LVL125>:
                            PUP(out) = PUP(from);
  413078:	9b0c      	ldr	r3, [sp, #48]	; 0x30

0041307a <.LVL126>:
  41307a:	789b      	ldrb	r3, [r3, #2]
  41307c:	70ab      	strb	r3, [r5, #2]
  41307e:	3502      	adds	r5, #2

00413080 <.LVL127>:
  413080:	e6cd      	b.n	412e1e <.LVL27>

00413082 <.LVL128>:
                        hold += (unsigned long)(PUP(in)) << bits;
  413082:	f899 c002 	ldrb.w	ip, [r9, #2]
  413086:	fa0c fe0e 	lsl.w	lr, ip, lr

0041308a <.LVL129>:
  41308a:	4471      	add	r1, lr
                        bits += 8;
  41308c:	3010      	adds	r0, #16

0041308e <.LVL131>:
                        hold += (unsigned long)(PUP(in)) << bits;
  41308e:	f109 0902 	add.w	r9, r9, #2

00413092 <.LVL132>:
  413092:	e798      	b.n	412fc6 <.LVL99>

00413094 <.LVL133>:
                            strm->msg =
  413094:	4b4d      	ldr	r3, [pc, #308]	; (4131cc <.LVL180+0xa>)

00413096 <.LVL134>:
  413096:	f8ca 3018 	str.w	r3, [sl, #24]
                            state->mode = BAD;
  41309a:	231d      	movs	r3, #29
  41309c:	f88b 3000 	strb.w	r3, [fp]
                            break;
  4130a0:	e758      	b.n	412f54 <.LVL84>

004130a2 <.LVL135>:
                    else if (wnext < op) {      /* wrap around window */
  4130a2:	9a04      	ldr	r2, [sp, #16]
  4130a4:	4696      	mov	lr, r2
  4130a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4130a8:	4596      	cmp	lr, r2
  4130aa:	d236      	bcs.n	41311a <.LVL151>
                        from += wsize + wnext - op;
  4130ac:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  4130ae:	1aba      	subs	r2, r7, r2
  4130b0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4130b2:	19d7      	adds	r7, r2, r7
  4130b4:	970c      	str	r7, [sp, #48]	; 0x30

004130b6 <.LVL136>:
                        op -= wnext;
  4130b6:	9f0d      	ldr	r7, [sp, #52]	; 0x34

004130b8 <.LVL137>:
  4130b8:	4672      	mov	r2, lr
  4130ba:	1aba      	subs	r2, r7, r2
  4130bc:	920f      	str	r2, [sp, #60]	; 0x3c

004130be <.LVL138>:
                        if (op < len) {         /* some from end of window */
  4130be:	4293      	cmp	r3, r2
  4130c0:	d9c3      	bls.n	41304a <.LVL116>
                            len -= op;
  4130c2:	1a9b      	subs	r3, r3, r2
  4130c4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4130c6:	443a      	add	r2, r7

004130c8 <.LVL140>:
  4130c8:	9210      	str	r2, [sp, #64]	; 0x40
  4130ca:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  4130ce:	463a      	mov	r2, r7
  4130d0:	462f      	mov	r7, r5
  4130d2:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40

004130d6 <.LVL141>:
                                PUP(out) = PUP(from);
  4130d6:	f812 ef01 	ldrb.w	lr, [r2, #1]!

004130da <.LVL142>:
  4130da:	f807 ef01 	strb.w	lr, [r7, #1]!
                            } while (--op);
  4130de:	454a      	cmp	r2, r9
  4130e0:	d1f9      	bne.n	4130d6 <.LVL141>
  4130e2:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
  4130e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c

004130e8 <.LVL143>:
  4130e8:	442a      	add	r2, r5
  4130ea:	4617      	mov	r7, r2

004130ec <.LVL144>:
                            if (wnext < len) {  /* some from start of window */
  4130ec:	9a04      	ldr	r2, [sp, #16]
  4130ee:	429a      	cmp	r2, r3
  4130f0:	d235      	bcs.n	41315e <.LVL159>

004130f2 <.LVL145>:
                                len -= op;
  4130f2:	1a9b      	subs	r3, r3, r2
  4130f4:	463a      	mov	r2, r7

004130f6 <.LVL147>:
  4130f6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  4130f8:	443d      	add	r5, r7
  4130fa:	46ae      	mov	lr, r5
  4130fc:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  413100:	9f0e      	ldr	r7, [sp, #56]	; 0x38

00413102 <.LVL148>:
                                    PUP(out) = PUP(from);
  413102:	f817 9f01 	ldrb.w	r9, [r7, #1]!

00413106 <.LVL149>:
  413106:	f802 9f01 	strb.w	r9, [r2, #1]!
                                } while (--op);
  41310a:	4572      	cmp	r2, lr
  41310c:	d1f9      	bne.n	413102 <.LVL148>
  41310e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
                                from = out - dist;      /* rest from output */
  413112:	eba5 020c 	sub.w	r2, r5, ip
  413116:	920c      	str	r2, [sp, #48]	; 0x30

00413118 <.LVL150>:
  413118:	e797      	b.n	41304a <.LVL116>

0041311a <.LVL151>:
                        from += wnext - op;
  41311a:	9f04      	ldr	r7, [sp, #16]
  41311c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  41311e:	1aba      	subs	r2, r7, r2
  413120:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  413122:	46be      	mov	lr, r7
  413124:	443a      	add	r2, r7
  413126:	920c      	str	r2, [sp, #48]	; 0x30

00413128 <.LVL152>:
                        if (op < len) {         /* some from window */
  413128:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  41312a:	42bb      	cmp	r3, r7
  41312c:	d98d      	bls.n	41304a <.LVL116>
                            len -= op;
  41312e:	1bdb      	subs	r3, r3, r7
  413130:	462f      	mov	r7, r5
  413132:	9a04      	ldr	r2, [sp, #16]

00413134 <.LVL154>:
  413134:	4496      	add	lr, r2
  413136:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  41313a:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  41313e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  413140:	46f1      	mov	r9, lr

00413142 <.LVL155>:
                                PUP(out) = PUP(from);
  413142:	f812 ef01 	ldrb.w	lr, [r2, #1]!

00413146 <.LVL156>:
  413146:	f807 ef01 	strb.w	lr, [r7, #1]!
                            } while (--op);
  41314a:	454a      	cmp	r2, r9
  41314c:	d1f9      	bne.n	413142 <.LVL155>
  41314e:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  413152:	9a0d      	ldr	r2, [sp, #52]	; 0x34

00413154 <.LVL157>:
  413154:	4415      	add	r5, r2
                            from = out - dist;  /* rest from output */
  413156:	eba5 020c 	sub.w	r2, r5, ip
  41315a:	920c      	str	r2, [sp, #48]	; 0x30

0041315c <.LVL158>:
  41315c:	e775      	b.n	41304a <.LVL116>

0041315e <.LVL159>:
                            from = window - OFF;
  41315e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  413160:	920c      	str	r2, [sp, #48]	; 0x30
                                PUP(out) = PUP(from);
  413162:	463d      	mov	r5, r7
  413164:	e771      	b.n	41304a <.LVL116>

00413166 <.LVL160>:
                        PUP(out) = PUP(from);
  413166:	3501      	adds	r5, #1

00413168 <.LVL161>:
  413168:	e659      	b.n	412e1e <.LVL27>

0041316a <.LVL162>:
                    from = out - dist;          /* copy direct from output */
  41316a:	eba5 020c 	sub.w	r2, r5, ip

0041316e <.LVL163>:
  41316e:	e001      	b.n	413174 <.LVL165>

00413170 <.LVL164>:
                        PUP(out) = PUP(from);
  413170:	4662      	mov	r2, ip
  413172:	4675      	mov	r5, lr

00413174 <.LVL165>:
                        PUP(out) = PUP(from);
  413174:	7857      	ldrb	r7, [r2, #1]
  413176:	706f      	strb	r7, [r5, #1]

00413178 <.LVL166>:
                        PUP(out) = PUP(from);
  413178:	7897      	ldrb	r7, [r2, #2]
  41317a:	70af      	strb	r7, [r5, #2]
  41317c:	f105 0e03 	add.w	lr, r5, #3

00413180 <.LVL167>:
  413180:	f102 0c03 	add.w	ip, r2, #3

00413184 <.LVL168>:
                        PUP(out) = PUP(from);
  413184:	78d7      	ldrb	r7, [r2, #3]
  413186:	70ef      	strb	r7, [r5, #3]
                        len -= 3;
  413188:	3b03      	subs	r3, #3
                    } while (len > 2);
  41318a:	2b02      	cmp	r3, #2
  41318c:	d8f0      	bhi.n	413170 <.LVL164>
                    if (len) {
  41318e:	b183      	cbz	r3, 4131b2 <.LVL177>

00413190 <.LVL170>:
                        PUP(out) = PUP(from);
  413190:	7917      	ldrb	r7, [r2, #4]
  413192:	712f      	strb	r7, [r5, #4]
                        if (len > 1)
  413194:	2b01      	cmp	r3, #1
  413196:	d903      	bls.n	4131a0 <.LVL174>

00413198 <.LVL171>:
                            PUP(out) = PUP(from);
  413198:	7953      	ldrb	r3, [r2, #5]

0041319a <.LVL172>:
  41319a:	716b      	strb	r3, [r5, #5]
  41319c:	3505      	adds	r5, #5

0041319e <.LVL173>:
  41319e:	e63e      	b.n	412e1e <.LVL27>

004131a0 <.LVL174>:
                        PUP(out) = PUP(from);
  4131a0:	3504      	adds	r5, #4

004131a2 <.LVL175>:
  4131a2:	e63c      	b.n	412e1e <.LVL27>

004131a4 <.LVL176>:
            strm->msg = (char *)"invalid literal/length code";
  4131a4:	4b0a      	ldr	r3, [pc, #40]	; (4131d0 <.LVL180+0xe>)
  4131a6:	f8ca 3018 	str.w	r3, [sl, #24]
            state->mode = BAD;
  4131aa:	231d      	movs	r3, #29
  4131ac:	f88b 3000 	strb.w	r3, [fp]
            break;
  4131b0:	e6d0      	b.n	412f54 <.LVL84>

004131b2 <.LVL177>:
                        PUP(out) = PUP(from);
  4131b2:	4675      	mov	r5, lr
  4131b4:	e633      	b.n	412e1e <.LVL27>

004131b6 <.LVL178>:
    strm->avail_in = (unsigned)(in < last ? 5 + (last - in) : 5 - (in - last));
  4131b6:	9a02      	ldr	r2, [sp, #8]
  4131b8:	1a9b      	subs	r3, r3, r2

004131ba <.LVL179>:
  4131ba:	f1c3 0305 	rsb	r3, r3, #5
  4131be:	e6dd      	b.n	412f7c <.LVL89+0x2>
                                 257 + (end - out) : 257 - (out - end));
  4131c0:	1b5d      	subs	r5, r3, r5

004131c2 <.LVL180>:
  4131c2:	f205 1301 	addw	r3, r5, #257	; 0x101
  4131c6:	e6e4      	b.n	412f92 <.LVL90+0x6>
  4131c8:	0042087c 	.word	0x0042087c
  4131cc:	0042085c 	.word	0x0042085c
  4131d0:	00420894 	.word	0x00420894

Disassembly of section .text.wc_ecc_verify_hash_ex%59:

004131d4 <wc_ecc_verify_hash_ex>:
   key         The corresponding public ECC key
   return      MP_OKAY if successful (even if the signature is not valid)
*/
int wc_ecc_verify_hash_ex(mp_int *r, mp_int *s, const byte* hash,
                    word32 hashlen, int* res, ecc_key* key)
{
  4131d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

004131d8 <.LCFI88>:
  4131d8:	f5ad 5dae 	sub.w	sp, sp, #5568	; 0x15c0

004131dc <.LCFI89>:
  4131dc:	b087      	sub	sp, #28

004131de <.LCFI90>:
  4131de:	4681      	mov	r9, r0
  4131e0:	468a      	mov	sl, r1
  4131e2:	4616      	mov	r6, r2
  4131e4:	9305      	str	r3, [sp, #20]
  4131e6:	f50d 53b0 	add.w	r3, sp, #5632	; 0x1600

004131ea <.LVL1048>:
  4131ea:	f8d3 8000 	ldr.w	r8, [r3]
  4131ee:	f241 6304 	movw	r3, #5636	; 0x1604

004131f2 <.LVL1049>:
  4131f2:	446b      	add	r3, sp
  4131f4:	681d      	ldr	r5, [r3, #0]

004131f6 <.LVL1050>:
   mp_int        v;
   mp_int        w;
   mp_int        u1;
   mp_int        u2;
   mp_int        e;
   DECLARE_CURVE_SPECS(ECC_CURVE_FIELD_COUNT)
  4131f6:	ac08      	add	r4, sp, #32
  4131f8:	4bb6      	ldr	r3, [pc, #728]	; (4134d4 <.LVL1123+0x8>)
  4131fa:	f241 52d8 	movw	r2, #5592	; 0x15d8

004131fe <.LVL1051>:
  4131fe:	446a      	add	r2, sp
  413200:	50d4      	str	r4, [r2, r3]
  413202:	2228      	movs	r2, #40	; 0x28
  413204:	2100      	movs	r1, #0

00413206 <.LVL1052>:
  413206:	4620      	mov	r0, r4

00413208 <.LVL1053>:
  413208:	f00b f986 	bl	41e518 <.LFE14>

0041320c <.LVL1054>:
  41320c:	ab12      	add	r3, sp, #72	; 0x48
  41320e:	61a3      	str	r3, [r4, #24]
  413210:	2305      	movs	r3, #5
  413212:	61e3      	str	r3, [r4, #28]
#else
   byte sigRS[ATECC_KEY_SIZE*2];
#endif

   if (r == NULL || s == NULL || hash == NULL || res == NULL || key == NULL)
  413214:	f1b9 0f00 	cmp.w	r9, #0
  413218:	f000 81b3 	beq.w	413582 <.LVL1142>
  41321c:	f1ba 0f00 	cmp.w	sl, #0
  413220:	f000 81af 	beq.w	413582 <.LVL1142>
  413224:	f1b8 0f00 	cmp.w	r8, #0
  413228:	bf18      	it	ne
  41322a:	2e00      	cmpne	r6, #0
  41322c:	f000 81ac 	beq.w	413588 <.LVL1142+0x6>
  413230:	2d00      	cmp	r5, #0
  413232:	f000 81a9 	beq.w	413588 <.LVL1142+0x6>
       return ECC_BAD_ARG_E;

   /* default to invalid signature */
   *res = 0;
  413236:	2300      	movs	r3, #0
  413238:	f8c8 3000 	str.w	r3, [r8]

   /* is the IDX valid ?  */
   if (wc_ecc_is_valid_idx(key->idx) != 1) {
  41323c:	6868      	ldr	r0, [r5, #4]
  41323e:	f00e fca3 	bl	421b88 <wc_ecc_is_valid_idx>

00413242 <.LVL1055>:
  413242:	4683      	mov	fp, r0
  413244:	2801      	cmp	r0, #1
  413246:	f040 81a2 	bne.w	41358e <.LVL1142+0xc>
       return BAD_COND_E;
   }

#else

   err = mp_init(&e);
  41324a:	f50d 6031 	add.w	r0, sp, #2832	; 0xb10
  41324e:	f00f f82d 	bl	4222ac <.LFE39>

00413252 <.LVL1056>:
   if (err != MP_OKAY)
  413252:	9004      	str	r0, [sp, #16]
  413254:	2800      	cmp	r0, #0
  413256:	f040 819d 	bne.w	413594 <.LVL1143>
      return MEMORY_E;

   /* read in the specs for this curve */
   err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ALL);
  41325a:	223b      	movs	r2, #59	; 0x3b
  41325c:	a907      	add	r1, sp, #28
  41325e:	6928      	ldr	r0, [r5, #16]

00413260 <.LVL1057>:
  413260:	f00a f8a8 	bl	41d3b4 <.LFE172>

00413264 <.LVL1058>:

   /* check for zero */
   if (err == MP_OKAY) {
  413264:	4604      	mov	r4, r0
  413266:	b350      	cbz	r0, 4132be <.LCFI92>

00413268 <.LVL1059>:
       if (mQ  == NULL || mG == NULL)
          err = MEMORY_E;
   }

   /*  w  = s^-1 mod n */
   if (err == MP_OKAY)
  413268:	2c00      	cmp	r4, #0
  41326a:	f000 808e 	beq.w	41338a <.LVL1091>

0041326e <.LVL1060>:
   ecc_point    *mG = NULL, *mQ = NULL;
  41326e:	2700      	movs	r7, #0
  413270:	463e      	mov	r6, r7

00413272 <.LVL1061>:
       err = mp_mulmod(r, &w, curve->order, &u2);

   /* find mG and mQ */
   if (err == MP_OKAY)
       err = mp_copy(curve->Gx, mG->x);
   if (err == MP_OKAY)
  413272:	2c00      	cmp	r4, #0
  413274:	f000 80c7 	beq.w	413406 <.LVL1101>

   if (err == MP_OKAY)
       err = mp_copy(key->pubkey.x, mQ->x);
   if (err == MP_OKAY)
       err = mp_copy(key->pubkey.y, mQ->y);
   if (err == MP_OKAY)
  413278:	2c00      	cmp	r4, #0
  41327a:	f000 80e9 	beq.w	413450 <.LVL1112>

0041327e <.LBB78>:
       /* find the montgomery mp */
       if (err == MP_OKAY)
           err = mp_montgomery_setup(curve->prime, &mp);

       /* add them */
       if (err == MP_OKAY)
  41327e:	2c00      	cmp	r4, #0
  413280:	f000 812a 	beq.w	4134d8 <.LVL1124>

00413284 <.LBE78>:
       if (mp_cmp(&v, r) == MP_EQ)
           *res = 1;
   }

   /* cleanup */
   wc_ecc_del_point_h(mG, key->heap);
  413284:	6969      	ldr	r1, [r5, #20]
  413286:	4630      	mov	r0, r6
  413288:	f009 f9e8 	bl	41c65c <.LFE22>

0041328c <.LVL1063>:
   wc_ecc_del_point_h(mQ, key->heap);
  41328c:	6969      	ldr	r1, [r5, #20]
  41328e:	4638      	mov	r0, r7
  413290:	f009 f9e4 	bl	41c65c <.LFE22>

00413294 <.LVL1064>:

   mp_clear(&e);
  413294:	f50d 6031 	add.w	r0, sp, #2832	; 0xb10
  413298:	f00f f89a 	bl	4223d0 <.LFE16>

0041329c <.LVL1065>:
   if (did_init) {
  41329c:	9b04      	ldr	r3, [sp, #16]
  41329e:	2b00      	cmp	r3, #0
  4132a0:	f040 815c 	bne.w	41355c <.LVL1137>

004132a4 <.LBB79>:
    _wc_ecc_curve_free(curve);
  4132a4:	4b8b      	ldr	r3, [pc, #556]	; (4134d4 <.LVL1123+0x8>)
  4132a6:	f241 52d8 	movw	r2, #5592	; 0x15d8
  4132aa:	446a      	add	r2, sp
  4132ac:	58d0      	ldr	r0, [r2, r3]
  4132ae:	f00c fd89 	bl	41fdc4 <.LFE46>

004132b2 <.LBE79>:
   wc_ecc_curve_free(curve);

#endif /* WOLFSSL_ATECC508A */

   return err;
}
  4132b2:	4620      	mov	r0, r4
  4132b4:	f50d 5dae 	add.w	sp, sp, #5568	; 0x15c0
  4132b8:	b007      	add	sp, #28

004132ba <.LCFI91>:
  4132ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004132be <.LCFI92>:
       if (mp_iszero(r) == MP_YES || mp_iszero(s) == MP_YES ||
  4132be:	4648      	mov	r0, r9

004132c0 <.LVL1069>:
  4132c0:	f00f f8f0 	bl	4224a4 <.LFE93>

004132c4 <.LVL1070>:
  4132c4:	2801      	cmp	r0, #1
  4132c6:	f000 8194 	beq.w	4135f2 <.LVL1159>
  4132ca:	4650      	mov	r0, sl
  4132cc:	f00f f8ea 	bl	4224a4 <.LFE93>

004132d0 <.LVL1071>:
  4132d0:	2801      	cmp	r0, #1
  4132d2:	f000 8191 	beq.w	4135f8 <.LVL1161>
           mp_cmp(r, curve->order) != MP_LT ||
  4132d6:	4b7f      	ldr	r3, [pc, #508]	; (4134d4 <.LVL1123+0x8>)
  4132d8:	f241 52d8 	movw	r2, #5592	; 0x15d8
  4132dc:	446a      	add	r2, sp
  4132de:	58d3      	ldr	r3, [r2, r3]
  4132e0:	68d9      	ldr	r1, [r3, #12]
  4132e2:	4648      	mov	r0, r9
  4132e4:	f00f f932 	bl	42254c <.LFE66>

004132e8 <.LVL1072>:
       if (mp_iszero(r) == MP_YES || mp_iszero(s) == MP_YES ||
  4132e8:	f1b0 3fff 	cmp.w	r0, #4294967295
  4132ec:	d002      	beq.n	4132f4 <.LVL1074>
           err = MP_ZERO_E;
  4132ee:	f06f 0478 	mvn.w	r4, #120	; 0x78

004132f2 <.LVL1073>:
  4132f2:	e7b9      	b.n	413268 <.LVL1059>

004132f4 <.LVL1074>:
           mp_cmp(s, curve->order) != MP_LT) {
  4132f4:	4b77      	ldr	r3, [pc, #476]	; (4134d4 <.LVL1123+0x8>)
  4132f6:	f241 52d8 	movw	r2, #5592	; 0x15d8
  4132fa:	446a      	add	r2, sp
  4132fc:	58d3      	ldr	r3, [r2, r3]
  4132fe:	68d9      	ldr	r1, [r3, #12]
  413300:	4650      	mov	r0, sl
  413302:	f00f f923 	bl	42254c <.LFE66>

00413306 <.LVL1075>:
           mp_cmp(r, curve->order) != MP_LT ||
  413306:	f1b0 3fff 	cmp.w	r0, #4294967295
  41330a:	f000 8146 	beq.w	41359a <.LBB84>
           err = MP_ZERO_E;
  41330e:	f06f 0478 	mvn.w	r4, #120	; 0x78

00413312 <.LVL1076>:
  413312:	e7a9      	b.n	413268 <.LVL1059>

00413314 <.LBB81>:
           hashlen = (orderBits + WOLFSSL_BIT_SIZE - 1) / WOLFSSL_BIT_SIZE;
  413314:	1dfb      	adds	r3, r7, #7

00413316 <.LVL1078>:
       err = mp_read_unsigned_bin(&e, hash, hashlen);
  413316:	9304      	str	r3, [sp, #16]
  413318:	08da      	lsrs	r2, r3, #3

0041331a <.LVL1079>:
  41331a:	4631      	mov	r1, r6
  41331c:	f50d 6031 	add.w	r0, sp, #2832	; 0xb10

00413320 <.LVL1080>:
  413320:	f00f f8ac 	bl	42247c <.LFE72>

00413324 <.LVL1081>:
       if (err == MP_OKAY && (WOLFSSL_BIT_SIZE * hashlen) > orderBits)
  413324:	4603      	mov	r3, r0
  413326:	2800      	cmp	r0, #0
  413328:	f040 8153 	bne.w	4135d2 <.LVL1152>
  41332c:	9b04      	ldr	r3, [sp, #16]
  41332e:	f023 0307 	bic.w	r3, r3, #7
  413332:	429f      	cmp	r7, r3
  413334:	d207      	bcs.n	413346 <.LBE81>
           mp_rshb(&e, WOLFSSL_BIT_SIZE - (orderBits & 0x7));
  413336:	f007 0107 	and.w	r1, r7, #7
  41333a:	f1c1 0108 	rsb	r1, r1, #8
  41333e:	f50d 6031 	add.w	r0, sp, #2832	; 0xb10

00413342 <.LVL1082>:
  413342:	f00f f927 	bl	422594 <.LFE97>

00413346 <.LBE81>:
       if ((err = mp_init_multi(&v, &w, &u1, &u2, NULL, NULL)) != MP_OKAY) {
  413346:	2300      	movs	r3, #0
  413348:	9301      	str	r3, [sp, #4]
  41334a:	9300      	str	r3, [sp, #0]
  41334c:	f60d 5338 	addw	r3, sp, #3384	; 0xd38
  413350:	f50d 6276 	add.w	r2, sp, #3936	; 0xf60
  413354:	f241 1188 	movw	r1, #4488	; 0x1188
  413358:	4469      	add	r1, sp
  41335a:	f241 30b0 	movw	r0, #5040	; 0x13b0
  41335e:	4468      	add	r0, sp
  413360:	f00d ff10 	bl	421184 <mp_init_multi>

00413364 <.LVL1084>:
  413364:	2800      	cmp	r0, #0
  413366:	f040 813f 	bne.w	4135e8 <.LBE85>

0041336a <.LVL1085>:
       mG = wc_ecc_new_point_h(key->heap);
  41336a:	6968      	ldr	r0, [r5, #20]
  41336c:	f00d fdea 	bl	420f44 <.LBE32>

00413370 <.LVL1086>:
  413370:	4606      	mov	r6, r0

00413372 <.LVL1087>:
       mQ = wc_ecc_new_point_h(key->heap);
  413372:	6968      	ldr	r0, [r5, #20]

00413374 <.LVL1088>:
  413374:	f00d fde6 	bl	420f44 <.LBE32>

00413378 <.LVL1089>:
       if (mQ  == NULL || mG == NULL)
  413378:	4607      	mov	r7, r0

0041337a <.LVL1090>:
  41337a:	2800      	cmp	r0, #0
  41337c:	f000 812d 	beq.w	4135da <.LVL1155>
  413380:	2e00      	cmp	r6, #0
  413382:	f000 812a 	beq.w	4135da <.LVL1155>
  413386:	465c      	mov	r4, fp
  413388:	e001      	b.n	41338e <.LVL1092>

0041338a <.LVL1091>:
   ecc_point    *mG = NULL, *mQ = NULL;
  41338a:	2700      	movs	r7, #0
  41338c:	463e      	mov	r6, r7

0041338e <.LVL1092>:
       err = mp_invmod(s, curve->order, &w);
  41338e:	4b51      	ldr	r3, [pc, #324]	; (4134d4 <.LVL1123+0x8>)
  413390:	f241 52d8 	movw	r2, #5592	; 0x15d8
  413394:	446a      	add	r2, sp
  413396:	58d3      	ldr	r3, [r2, r3]
  413398:	f241 1288 	movw	r2, #4488	; 0x1188
  41339c:	446a      	add	r2, sp
  41339e:	68d9      	ldr	r1, [r3, #12]
  4133a0:	4650      	mov	r0, sl
  4133a2:	f00f f8df 	bl	422564 <.LFE83>

004133a6 <.LVL1093>:
  4133a6:	4603      	mov	r3, r0

004133a8 <.LVL1094>:
   if (err == MP_OKAY)
  4133a8:	2b00      	cmp	r3, #0
  4133aa:	d138      	bne.n	41341e <.LVL1104>
       err = mp_mulmod(&e, &w, curve->order, &u1);
  4133ac:	4b49      	ldr	r3, [pc, #292]	; (4134d4 <.LVL1123+0x8>)

004133ae <.LVL1095>:
  4133ae:	f241 52d8 	movw	r2, #5592	; 0x15d8
  4133b2:	446a      	add	r2, sp
  4133b4:	58d2      	ldr	r2, [r2, r3]
  4133b6:	f50d 6376 	add.w	r3, sp, #3936	; 0xf60
  4133ba:	68d2      	ldr	r2, [r2, #12]
  4133bc:	f241 1188 	movw	r1, #4488	; 0x1188
  4133c0:	4469      	add	r1, sp
  4133c2:	f50d 6031 	add.w	r0, sp, #2832	; 0xb10
  4133c6:	f00f f8d1 	bl	42256c <.LFE79>

004133ca <.LVL1096>:
   if (err == MP_OKAY)
  4133ca:	4603      	mov	r3, r0
  4133cc:	bb70      	cbnz	r0, 41342c <.LVL1106>
       err = mp_mulmod(r, &w, curve->order, &u2);
  4133ce:	4b41      	ldr	r3, [pc, #260]	; (4134d4 <.LVL1123+0x8>)
  4133d0:	f241 52d8 	movw	r2, #5592	; 0x15d8
  4133d4:	446a      	add	r2, sp
  4133d6:	58d2      	ldr	r2, [r2, r3]
  4133d8:	f60d 5338 	addw	r3, sp, #3384	; 0xd38
  4133dc:	68d2      	ldr	r2, [r2, #12]
  4133de:	f241 1188 	movw	r1, #4488	; 0x1188
  4133e2:	4469      	add	r1, sp
  4133e4:	4648      	mov	r0, r9

004133e6 <.LVL1097>:
  4133e6:	f00f f8c1 	bl	42256c <.LFE79>

004133ea <.LVL1098>:
   if (err == MP_OKAY)
  4133ea:	4603      	mov	r3, r0
  4133ec:	bb28      	cbnz	r0, 41343a <.LVL1109>
       err = mp_copy(curve->Gx, mG->x);
  4133ee:	4b39      	ldr	r3, [pc, #228]	; (4134d4 <.LVL1123+0x8>)
  4133f0:	f241 52d8 	movw	r2, #5592	; 0x15d8
  4133f4:	446a      	add	r2, sp
  4133f6:	58d3      	ldr	r3, [r2, r3]
  4133f8:	4631      	mov	r1, r6
  4133fa:	6918      	ldr	r0, [r3, #16]

004133fc <.LVL1099>:
  4133fc:	f00f f84d 	bl	42249a <.LFE85>

00413400 <.LVL1100>:
  413400:	9404      	str	r4, [sp, #16]
  413402:	4604      	mov	r4, r0
  413404:	e735      	b.n	413272 <.LVL1061>

00413406 <.LVL1101>:
       err = mp_copy(curve->Gy, mG->y);
  413406:	4b33      	ldr	r3, [pc, #204]	; (4134d4 <.LVL1123+0x8>)
  413408:	f241 52d8 	movw	r2, #5592	; 0x15d8
  41340c:	446a      	add	r2, sp
  41340e:	58d3      	ldr	r3, [r2, r3]
  413410:	f506 710a 	add.w	r1, r6, #552	; 0x228
  413414:	6958      	ldr	r0, [r3, #20]
  413416:	f00f f840 	bl	42249a <.LFE85>

0041341a <.LVL1102>:
  41341a:	4603      	mov	r3, r0

0041341c <.LVL1103>:
  41341c:	9c04      	ldr	r4, [sp, #16]

0041341e <.LVL1104>:
   if (err == MP_OKAY)
  41341e:	b9fb      	cbnz	r3, 413460 <.LBB82>
       err = mp_set(mG->z, 1);
  413420:	2101      	movs	r1, #1
  413422:	f506 608a 	add.w	r0, r6, #1104	; 0x450
  413426:	f00f f856 	bl	4224d6 <.LFE113>

0041342a <.LVL1105>:
  41342a:	4603      	mov	r3, r0

0041342c <.LVL1106>:
   if (err == MP_OKAY)
  41342c:	bb6b      	cbnz	r3, 41348a <.LVL1118>
       err = mp_copy(key->pubkey.x, mQ->x);
  41342e:	4639      	mov	r1, r7
  413430:	f105 0018 	add.w	r0, r5, #24

00413434 <.LVL1107>:
  413434:	f00f f831 	bl	42249a <.LFE85>

00413438 <.LVL1108>:
  413438:	4603      	mov	r3, r0

0041343a <.LVL1109>:
   if (err == MP_OKAY)
  41343a:	2b00      	cmp	r3, #0
  41343c:	d13a      	bne.n	4134b4 <.LVL1121>
       err = mp_copy(key->pubkey.y, mQ->y);
  41343e:	f507 710a 	add.w	r1, r7, #552	; 0x228
  413442:	f505 7010 	add.w	r0, r5, #576	; 0x240

00413446 <.LVL1110>:
  413446:	f00f f828 	bl	42249a <.LFE85>

0041344a <.LVL1111>:
  41344a:	9404      	str	r4, [sp, #16]
  41344c:	4604      	mov	r4, r0
  41344e:	e713      	b.n	413278 <.LVL1061+0x6>

00413450 <.LVL1112>:
       err = mp_copy(key->pubkey.z, mQ->z);
  413450:	f507 618a 	add.w	r1, r7, #1104	; 0x450
  413454:	f505 608d 	add.w	r0, r5, #1128	; 0x468
  413458:	f00f f81f 	bl	42249a <.LFE85>

0041345c <.LVL1113>:
  41345c:	4603      	mov	r3, r0

0041345e <.LVL1114>:
  41345e:	9c04      	ldr	r4, [sp, #16]

00413460 <.LBB82>:
       if (err == MP_OKAY)
  413460:	2b00      	cmp	r3, #0
  413462:	d14a      	bne.n	4134fa <.LVL1127>
           err = wc_ecc_mulmod_ex(&u1, mG, mG, curve->Af, curve->prime, 0, key->heap);
  413464:	4b1b      	ldr	r3, [pc, #108]	; (4134d4 <.LVL1123+0x8>)

00413466 <.LVL1116>:
  413466:	f241 52d8 	movw	r2, #5592	; 0x15d8
  41346a:	446a      	add	r2, sp
  41346c:	58d2      	ldr	r2, [r2, r3]
  41346e:	6893      	ldr	r3, [r2, #8]
  413470:	6969      	ldr	r1, [r5, #20]
  413472:	9102      	str	r1, [sp, #8]
  413474:	2100      	movs	r1, #0
  413476:	9101      	str	r1, [sp, #4]
  413478:	6852      	ldr	r2, [r2, #4]
  41347a:	9200      	str	r2, [sp, #0]
  41347c:	4632      	mov	r2, r6
  41347e:	4631      	mov	r1, r6
  413480:	f50d 6076 	add.w	r0, sp, #3936	; 0xf60
  413484:	f001 f88e 	bl	4145a4 <.LFE15>

00413488 <.LVL1117>:
  413488:	4603      	mov	r3, r0

0041348a <.LVL1118>:
       if (err == MP_OKAY)
  41348a:	2b00      	cmp	r3, #0
  41348c:	d162      	bne.n	413554 <.LBB83>
           err = wc_ecc_mulmod_ex(&u2, mQ, mQ, curve->Af, curve->prime, 0, key->heap);
  41348e:	4b11      	ldr	r3, [pc, #68]	; (4134d4 <.LVL1123+0x8>)
  413490:	f241 52d8 	movw	r2, #5592	; 0x15d8
  413494:	446a      	add	r2, sp
  413496:	58d2      	ldr	r2, [r2, r3]
  413498:	6893      	ldr	r3, [r2, #8]
  41349a:	6969      	ldr	r1, [r5, #20]
  41349c:	9102      	str	r1, [sp, #8]
  41349e:	2100      	movs	r1, #0
  4134a0:	9101      	str	r1, [sp, #4]
  4134a2:	6852      	ldr	r2, [r2, #4]
  4134a4:	9200      	str	r2, [sp, #0]
  4134a6:	463a      	mov	r2, r7
  4134a8:	4639      	mov	r1, r7
  4134aa:	f60d 5038 	addw	r0, sp, #3384	; 0xd38

004134ae <.LVL1119>:
  4134ae:	f001 f879 	bl	4145a4 <.LFE15>

004134b2 <.LVL1120>:
  4134b2:	4603      	mov	r3, r0

004134b4 <.LVL1121>:
       if (err == MP_OKAY)
  4134b4:	2b00      	cmp	r3, #0
  4134b6:	f040 8094 	bne.w	4135e2 <.LBB85>
           err = mp_montgomery_setup(curve->prime, &mp);
  4134ba:	4b06      	ldr	r3, [pc, #24]	; (4134d4 <.LVL1123+0x8>)
  4134bc:	f241 52d8 	movw	r2, #5592	; 0x15d8
  4134c0:	446a      	add	r2, sp
  4134c2:	58d3      	ldr	r3, [r2, r3]
  4134c4:	a906      	add	r1, sp, #24
  4134c6:	6858      	ldr	r0, [r3, #4]

004134c8 <.LVL1122>:
  4134c8:	f00f f868 	bl	42259c <.LFE98>

004134cc <.LVL1123>:
  4134cc:	9404      	str	r4, [sp, #16]
  4134ce:	4604      	mov	r4, r0
  4134d0:	e6d5      	b.n	41327e <.LBB78>
  4134d2:	bf00      	nop
  4134d4:	ffffea44 	.word	0xffffea44

004134d8 <.LVL1124>:
           err = ecc_projective_add_point(mQ, mG, mG, curve->Af,
  4134d8:	4b49      	ldr	r3, [pc, #292]	; (413600 <.LVL1162+0x4>)
  4134da:	f241 52d8 	movw	r2, #5592	; 0x15d8
  4134de:	446a      	add	r2, sp
  4134e0:	58d2      	ldr	r2, [r2, r3]
  4134e2:	6893      	ldr	r3, [r2, #8]
  4134e4:	9906      	ldr	r1, [sp, #24]
  4134e6:	9101      	str	r1, [sp, #4]
  4134e8:	6852      	ldr	r2, [r2, #4]
  4134ea:	9200      	str	r2, [sp, #0]
  4134ec:	4632      	mov	r2, r6
  4134ee:	4631      	mov	r1, r6
  4134f0:	4638      	mov	r0, r7
  4134f2:	f7fd f94b 	bl	41078c <.LFE14>

004134f6 <.LVL1125>:
  4134f6:	4603      	mov	r3, r0

004134f8 <.LVL1126>:
  4134f8:	9c04      	ldr	r4, [sp, #16]

004134fa <.LVL1127>:
       if (err == MP_OKAY)
  4134fa:	2b00      	cmp	r3, #0
  4134fc:	d171      	bne.n	4135e2 <.LBB85>
           err = ecc_map(mG, curve->prime, mp);
  4134fe:	4b40      	ldr	r3, [pc, #256]	; (413600 <.LVL1162+0x4>)

00413500 <.LVL1128>:
  413500:	f241 52d8 	movw	r2, #5592	; 0x15d8
  413504:	446a      	add	r2, sp
  413506:	58d3      	ldr	r3, [r2, r3]
  413508:	9a06      	ldr	r2, [sp, #24]
  41350a:	6859      	ldr	r1, [r3, #4]
  41350c:	4630      	mov	r0, r6
  41350e:	f007 fc03 	bl	41ad18 <.LFE21>

00413512 <.LVL1129>:
  413512:	4603      	mov	r3, r0

00413514 <.LVL1130>:
  413514:	9404      	str	r4, [sp, #16]

00413516 <.LBE82>:
   if (err == MP_OKAY)
  413516:	b9fb      	cbnz	r3, 413558 <.LBE83>
       err = mp_mod(mG->x, curve->order, &v);
  413518:	4b39      	ldr	r3, [pc, #228]	; (413600 <.LVL1162+0x4>)
  41351a:	f241 52d8 	movw	r2, #5592	; 0x15d8
  41351e:	446a      	add	r2, sp
  413520:	58d3      	ldr	r3, [r2, r3]
  413522:	f241 32b0 	movw	r2, #5040	; 0x13b0
  413526:	446a      	add	r2, sp
  413528:	68d9      	ldr	r1, [r3, #12]
  41352a:	4630      	mov	r0, r6

0041352c <.LVL1131>:
  41352c:	f00f f822 	bl	422574 <.LFE75>

00413530 <.LVL1132>:
   if (err == MP_OKAY) {
  413530:	4604      	mov	r4, r0
  413532:	2800      	cmp	r0, #0
  413534:	f47f aea6 	bne.w	413284 <.LBE78>
       if (mp_cmp(&v, r) == MP_EQ)
  413538:	4649      	mov	r1, r9
  41353a:	f241 30b0 	movw	r0, #5040	; 0x13b0

0041353e <.LVL1133>:
  41353e:	4468      	add	r0, sp
  413540:	f00f f804 	bl	42254c <.LFE66>

00413544 <.LVL1134>:
  413544:	2800      	cmp	r0, #0
  413546:	f47f ae9d 	bne.w	413284 <.LBE78>
           *res = 1;
  41354a:	2201      	movs	r2, #1
  41354c:	f8c8 2000 	str.w	r2, [r8]
  413550:	4604      	mov	r4, r0

00413552 <.LVL1135>:
  413552:	e697      	b.n	413284 <.LBE78>

00413554 <.LBB83>:
  413554:	9404      	str	r4, [sp, #16]
  413556:	e7de      	b.n	413516 <.LBE82>

00413558 <.LBE83>:
  413558:	461c      	mov	r4, r3
  41355a:	e693      	b.n	413284 <.LBE78>

0041355c <.LVL1137>:
       mp_clear(&v);
  41355c:	f241 30b0 	movw	r0, #5040	; 0x13b0
  413560:	4468      	add	r0, sp
  413562:	f00e ff35 	bl	4223d0 <.LFE16>

00413566 <.LVL1138>:
       mp_clear(&w);
  413566:	f241 1088 	movw	r0, #4488	; 0x1188
  41356a:	4468      	add	r0, sp
  41356c:	f00e ff30 	bl	4223d0 <.LFE16>

00413570 <.LVL1139>:
       mp_clear(&u1);
  413570:	f50d 6076 	add.w	r0, sp, #3936	; 0xf60
  413574:	f00e ff2c 	bl	4223d0 <.LFE16>

00413578 <.LVL1140>:
       mp_clear(&u2);
  413578:	f60d 5038 	addw	r0, sp, #3384	; 0xd38
  41357c:	f00e ff28 	bl	4223d0 <.LFE16>

00413580 <.LVL1141>:
  413580:	e690      	b.n	4132a4 <.LBB79>

00413582 <.LVL1142>:
       return ECC_BAD_ARG_E;
  413582:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
  413586:	e694      	b.n	4132b2 <.LBE79>
  413588:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
  41358c:	e691      	b.n	4132b2 <.LBE79>
      return ECC_BAD_ARG_E;
  41358e:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
  413592:	e68e      	b.n	4132b2 <.LBE79>

00413594 <.LVL1143>:
      return MEMORY_E;
  413594:	f06f 047c 	mvn.w	r4, #124	; 0x7c
  413598:	e68b      	b.n	4132b2 <.LBE79>

0041359a <.LBB84>:
       unsigned int orderBits = mp_count_bits(curve->order);
  41359a:	4b19      	ldr	r3, [pc, #100]	; (413600 <.LVL1162+0x4>)
  41359c:	f241 52d8 	movw	r2, #5592	; 0x15d8
  4135a0:	446a      	add	r2, sp
  4135a2:	58d3      	ldr	r3, [r2, r3]
  4135a4:	68d8      	ldr	r0, [r3, #12]
  4135a6:	f00e ffed 	bl	422584 <.LFE80>

004135aa <.LVL1145>:
  4135aa:	4607      	mov	r7, r0

004135ac <.LVL1146>:
       if ( (WOLFSSL_BIT_SIZE * hashlen) > orderBits)
  4135ac:	9b05      	ldr	r3, [sp, #20]
  4135ae:	ebb0 0fc3 	cmp.w	r0, r3, lsl #3
  4135b2:	f4ff aeaf 	bcc.w	413314 <.LBB81>

004135b6 <.LVL1147>:
       err = mp_read_unsigned_bin(&e, hash, hashlen);
  4135b6:	9a05      	ldr	r2, [sp, #20]
  4135b8:	4631      	mov	r1, r6
  4135ba:	f50d 6031 	add.w	r0, sp, #2832	; 0xb10

004135be <.LVL1148>:
  4135be:	f00e ff5d 	bl	42247c <.LFE72>

004135c2 <.LVL1149>:
       if (err == MP_OKAY && (WOLFSSL_BIT_SIZE * hashlen) > orderBits)
  4135c2:	4603      	mov	r3, r0
  4135c4:	2800      	cmp	r0, #0
  4135c6:	f43f aebe 	beq.w	413346 <.LBE81>

004135ca <.LBE84>:
   int          did_init = 0;
  4135ca:	46a3      	mov	fp, r4
   ecc_point    *mG = NULL, *mQ = NULL;
  4135cc:	2700      	movs	r7, #0

004135ce <.LVL1150>:
  4135ce:	463e      	mov	r6, r7

004135d0 <.LVL1151>:
  4135d0:	e005      	b.n	4135de <.LVL1156>

004135d2 <.LVL1152>:
   int          did_init = 0;
  4135d2:	46a3      	mov	fp, r4
   ecc_point    *mG = NULL, *mQ = NULL;
  4135d4:	2700      	movs	r7, #0

004135d6 <.LVL1153>:
  4135d6:	463e      	mov	r6, r7

004135d8 <.LVL1154>:
  4135d8:	e001      	b.n	4135de <.LVL1156>

004135da <.LVL1155>:
          err = MEMORY_E;
  4135da:	f06f 037c 	mvn.w	r3, #124	; 0x7c

004135de <.LVL1156>:
  4135de:	465c      	mov	r4, fp
  4135e0:	e6e2      	b.n	4133a8 <.LVL1094>

004135e2 <.LBB85>:
  4135e2:	9404      	str	r4, [sp, #16]
  4135e4:	461c      	mov	r4, r3
  4135e6:	e64d      	b.n	413284 <.LBE78>

004135e8 <.LBE85>:
       did_init = 1;
  4135e8:	f8cd b010 	str.w	fp, [sp, #16]
          err = MEMORY_E;
  4135ec:	f06f 047c 	mvn.w	r4, #124	; 0x7c
  4135f0:	e63d      	b.n	41326e <.LVL1060>

004135f2 <.LVL1159>:
           err = MP_ZERO_E;
  4135f2:	f06f 0478 	mvn.w	r4, #120	; 0x78

004135f6 <.LVL1160>:
  4135f6:	e637      	b.n	413268 <.LVL1059>

004135f8 <.LVL1161>:
  4135f8:	f06f 0478 	mvn.w	r4, #120	; 0x78

004135fc <.LVL1162>:
  4135fc:	e634      	b.n	413268 <.LVL1059>
  4135fe:	bf00      	nop
  413600:	ffffea44 	.word	0xffffea44

Disassembly of section .text.wc_AesSetKeyLocal%60:

00413604 <wc_AesSetKeyLocal>:
    }

#else
    static int wc_AesSetKeyLocal(Aes* aes, const byte* userKey, word32 keylen,
                const byte* iv, int dir)
    {
  413604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

00413608 <.LCFI4>:
  413608:	4604      	mov	r4, r0
  41360a:	4615      	mov	r5, r2
  41360c:	4698      	mov	r8, r3

0041360e <.LVL116>:

    #ifdef WOLFSSL_AESNI
        aes->use_aesni = 0;
    #endif /* WOLFSSL_AESNI */
    #ifdef WOLFSSL_AES_COUNTER
        aes->left = 0;
  41360e:	2300      	movs	r3, #0

00413610 <.LVL117>:
  413610:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
    #endif /* WOLFSSL_AES_COUNTER */

        aes->keylen = keylen;
  413614:	f8c0 20f4 	str.w	r2, [r0, #244]	; 0xf4
        aes->rounds = (keylen/4) + 6;
  413618:	0897      	lsrs	r7, r2, #2
  41361a:	1dbb      	adds	r3, r7, #6
  41361c:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0

        XMEMCPY(rk, userKey, keylen);
  413620:	f007 f9b0 	bl	41a984 <.LFE14>

00413624 <.LBB144>:
    for (i = 0; i < count; i++)
  413624:	b18f      	cbz	r7, 41364a <.LBE144>
  413626:	4621      	mov	r1, r4
  413628:	f025 0003 	bic.w	r0, r5, #3
  41362c:	4420      	add	r0, r4

0041362e <.LVL119>:
        out[i] = ByteReverseWord32(in[i]);
  41362e:	680a      	ldr	r2, [r1, #0]

00413630 <.LBB146>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  413630:	0a13      	lsrs	r3, r2, #8
  413632:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  413636:	0212      	lsls	r2, r2, #8
  413638:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
  41363c:	4313      	orrs	r3, r2

0041363e <.LBB148>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  41363e:	ea4f 4333 	mov.w	r3, r3, ror #16

00413642 <.LBE146>:
        out[i] = ByteReverseWord32(in[i]);
  413642:	f841 3b04 	str.w	r3, [r1], #4
    for (i = 0; i < count; i++)
  413646:	4281      	cmp	r1, r0
  413648:	d1f1      	bne.n	41362e <.LVL119>

0041364a <.LBE144>:
        XMEMCPY((word32*)aes->key_ce, userKey, keylen);
    #endif

#ifdef NEED_AES_TABLES

        switch (keylen) {
  41364a:	2d18      	cmp	r5, #24
  41364c:	d04b      	beq.n	4136e6 <.LVL128>
  41364e:	2d20      	cmp	r5, #32
  413650:	f000 808d 	beq.w	41376e <.LVL134>
  413654:	2d10      	cmp	r5, #16
  413656:	d003      	beq.n	413660 <.LVL121>
            }
            break;
    #endif /* 256 */

        default:
            return BAD_FUNC_ARG;
  413658:	f06f 00ac 	mvn.w	r0, #172	; 0xac
        (void)dir;
    #endif /* HAVE_AES_DECRYPT */
#endif /* NEED_AES_TABLES */

        return wc_AesSetIV(aes, iv);
    }
  41365c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00413660 <.LVL121>:
  413660:	f104 0210 	add.w	r2, r4, #16
  413664:	4d7a      	ldr	r5, [pc, #488]	; (413850 <.LVL141+0x4>)

00413666 <.LVL122>:
  413666:	f104 0eb0 	add.w	lr, r4, #176	; 0xb0
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
  41366a:	487a      	ldr	r0, [pc, #488]	; (413854 <.LVL141+0x8>)

0041366c <.LVL123>:
                temp  = rk[3];
  41366c:	f852 1c04 	ldr.w	r1, [r2, #-4]

00413670 <.LVL124>:
                    rcon[i];
  413670:	f855 6b04 	ldr.w	r6, [r5], #4
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
  413674:	b2cb      	uxtb	r3, r1
  413676:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  41367a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
  41367e:	f852 7c10 	ldr.w	r7, [r2, #-16]
  413682:	4077      	eors	r7, r6
  413684:	407b      	eors	r3, r7
  413686:	0e0f      	lsrs	r7, r1, #24
  413688:	f507 7780 	add.w	r7, r7, #256	; 0x100
  41368c:	f810 7027 	ldrb.w	r7, [r0, r7, lsl #2]
  413690:	407b      	eors	r3, r7
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
  413692:	f3c1 4707 	ubfx	r7, r1, #16, #8
  413696:	f507 7700 	add.w	r7, r7, #512	; 0x200
  41369a:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
  41369e:	f007 477f 	and.w	r7, r7, #4278190080	; 0xff000000
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
  4136a2:	407b      	eors	r3, r7
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
  4136a4:	f3c1 2707 	ubfx	r7, r1, #8, #8
  4136a8:	f507 7740 	add.w	r7, r7, #768	; 0x300
  4136ac:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
  4136b0:	f407 077f 	and.w	r7, r7, #16711680	; 0xff0000
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
  4136b4:	407b      	eors	r3, r7
                rk[4] = rk[0] ^
  4136b6:	6013      	str	r3, [r2, #0]
                rk[5] = rk[1] ^ rk[4];
  4136b8:	f852 7c0c 	ldr.w	r7, [r2, #-12]
  4136bc:	407b      	eors	r3, r7
  4136be:	6053      	str	r3, [r2, #4]
                rk[6] = rk[2] ^ rk[5];
  4136c0:	f852 7c08 	ldr.w	r7, [r2, #-8]
  4136c4:	407b      	eors	r3, r7
  4136c6:	6093      	str	r3, [r2, #8]
                rk[7] = rk[3] ^ rk[6];
  4136c8:	404b      	eors	r3, r1
  4136ca:	60d3      	str	r3, [r2, #12]
  4136cc:	3210      	adds	r2, #16

004136ce <.LVL125>:
                if (++i == 10)
  4136ce:	4572      	cmp	r2, lr
  4136d0:	d1cc      	bne.n	41366c <.LVL123>

004136d2 <.LVL126>:
        if (dir == AES_DECRYPTION) {
  4136d2:	9b06      	ldr	r3, [sp, #24]
  4136d4:	2b01      	cmp	r3, #1
  4136d6:	f000 80c1 	beq.w	41385c <.LBB150>
        return wc_AesSetIV(aes, iv);
  4136da:	4641      	mov	r1, r8
  4136dc:	4620      	mov	r0, r4
  4136de:	f00d fcf1 	bl	4210c4 <wc_AesSetIV>

004136e2 <.LVL127>:
  4136e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004136e6 <.LVL128>:
  4136e6:	f104 0218 	add.w	r2, r4, #24
  4136ea:	4d5b      	ldr	r5, [pc, #364]	; (413858 <.LVL141+0xc>)

004136ec <.LVL129>:
  4136ec:	f104 0ed8 	add.w	lr, r4, #216	; 0xd8
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
  4136f0:	4858      	ldr	r0, [pc, #352]	; (413854 <.LVL141+0x8>)

004136f2 <.LVL130>:
                temp = rk[ 5];
  4136f2:	f852 1c04 	ldr.w	r1, [r2, #-4]

004136f6 <.LVL131>:
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
  4136f6:	f852 3c18 	ldr.w	r3, [r2, #-24]
  4136fa:	f855 7f04 	ldr.w	r7, [r5, #4]!
  4136fe:	407b      	eors	r3, r7
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
  413700:	b2cf      	uxtb	r7, r1
  413702:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
  413706:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
  41370a:	407b      	eors	r3, r7
  41370c:	0e0f      	lsrs	r7, r1, #24
  41370e:	f507 7780 	add.w	r7, r7, #256	; 0x100
  413712:	f810 7027 	ldrb.w	r7, [r0, r7, lsl #2]
  413716:	407b      	eors	r3, r7
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
  413718:	f3c1 4707 	ubfx	r7, r1, #16, #8
  41371c:	f507 7700 	add.w	r7, r7, #512	; 0x200
  413720:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
  413724:	f007 477f 	and.w	r7, r7, #4278190080	; 0xff000000
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
  413728:	407b      	eors	r3, r7
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
  41372a:	f3c1 2707 	ubfx	r7, r1, #8, #8
  41372e:	f507 7740 	add.w	r7, r7, #768	; 0x300
  413732:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
  413736:	f407 077f 	and.w	r7, r7, #16711680	; 0xff0000
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
  41373a:	407b      	eors	r3, r7
                rk[ 6] = rk[ 0] ^
  41373c:	6013      	str	r3, [r2, #0]
                rk[ 7] = rk[ 1] ^ rk[ 6];
  41373e:	f852 7c14 	ldr.w	r7, [r2, #-20]
  413742:	407b      	eors	r3, r7
  413744:	6053      	str	r3, [r2, #4]
                rk[ 8] = rk[ 2] ^ rk[ 7];
  413746:	f852 7c10 	ldr.w	r7, [r2, #-16]
  41374a:	407b      	eors	r3, r7
  41374c:	6093      	str	r3, [r2, #8]
                rk[ 9] = rk[ 3] ^ rk[ 8];
  41374e:	f852 7c0c 	ldr.w	r7, [r2, #-12]
  413752:	407b      	eors	r3, r7
  413754:	60d3      	str	r3, [r2, #12]
  413756:	3218      	adds	r2, #24

00413758 <.LVL132>:
                if (++i == 8)
  413758:	4572      	cmp	r2, lr
  41375a:	d0ba      	beq.n	4136d2 <.LVL126>
                rk[10] = rk[ 4] ^ rk[ 9];
  41375c:	f852 6c20 	ldr.w	r6, [r2, #-32]
  413760:	4073      	eors	r3, r6
  413762:	f842 3c08 	str.w	r3, [r2, #-8]
                rk[11] = rk[ 5] ^ rk[10];
  413766:	404b      	eors	r3, r1
  413768:	f842 3c04 	str.w	r3, [r2, #-4]

0041376c <.LVL133>:
                temp = rk[ 5];
  41376c:	e7c1      	b.n	4136f2 <.LVL130>

0041376e <.LVL134>:
  41376e:	f104 0220 	add.w	r2, r4, #32
  413772:	4d39      	ldr	r5, [pc, #228]	; (413858 <.LVL141+0xc>)

00413774 <.LVL135>:
  413774:	f504 7e80 	add.w	lr, r4, #256	; 0x100
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
  413778:	4936      	ldr	r1, [pc, #216]	; (413854 <.LVL141+0x8>)

0041377a <.LVL136>:
                temp = rk[ 7];
  41377a:	f852 0c04 	ldr.w	r0, [r2, #-4]

0041377e <.LVL137>:
                    (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
  41377e:	b2c3      	uxtb	r3, r0
  413780:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  413784:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
  413788:	f855 7f04 	ldr.w	r7, [r5, #4]!
  41378c:	f852 6c20 	ldr.w	r6, [r2, #-32]
  413790:	4077      	eors	r7, r6
  413792:	407b      	eors	r3, r7
  413794:	0e07      	lsrs	r7, r0, #24
  413796:	f507 7780 	add.w	r7, r7, #256	; 0x100
  41379a:	f811 7027 	ldrb.w	r7, [r1, r7, lsl #2]
  41379e:	407b      	eors	r3, r7
                    (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
  4137a0:	f3c0 4707 	ubfx	r7, r0, #16, #8
  4137a4:	f507 7700 	add.w	r7, r7, #512	; 0x200
  4137a8:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
  4137ac:	f007 477f 	and.w	r7, r7, #4278190080	; 0xff000000
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
  4137b0:	407b      	eors	r3, r7
                    (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
  4137b2:	f3c0 2707 	ubfx	r7, r0, #8, #8
  4137b6:	f507 7740 	add.w	r7, r7, #768	; 0x300
  4137ba:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
  4137be:	f407 077f 	and.w	r7, r7, #16711680	; 0xff0000
                    (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
  4137c2:	405f      	eors	r7, r3
                rk[ 8] = rk[ 0] ^
  4137c4:	6017      	str	r7, [r2, #0]
                rk[ 9] = rk[ 1] ^ rk[ 8];
  4137c6:	f852 3c1c 	ldr.w	r3, [r2, #-28]
  4137ca:	407b      	eors	r3, r7
  4137cc:	6053      	str	r3, [r2, #4]
                rk[10] = rk[ 2] ^ rk[ 9];
  4137ce:	f852 7c18 	ldr.w	r7, [r2, #-24]
  4137d2:	407b      	eors	r3, r7
  4137d4:	6093      	str	r3, [r2, #8]
                rk[11] = rk[ 3] ^ rk[10];
  4137d6:	f852 7c14 	ldr.w	r7, [r2, #-20]
  4137da:	407b      	eors	r3, r7
  4137dc:	60d3      	str	r3, [r2, #12]
  4137de:	3220      	adds	r2, #32

004137e0 <.LVL138>:
                if (++i == 7)
  4137e0:	4572      	cmp	r2, lr
  4137e2:	f43f af76 	beq.w	4136d2 <.LVL126>

004137e6 <.LVL139>:
                    (Te[3][GETBYTE(temp, 2)] & 0x00ff0000) ^
  4137e6:	f3c3 4707 	ubfx	r7, r3, #16, #8
  4137ea:	f507 7740 	add.w	r7, r7, #768	; 0x300
  4137ee:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
  4137f2:	f407 077f 	and.w	r7, r7, #16711680	; 0xff0000
                    (Te[0][GETBYTE(temp, 1)] & 0x0000ff00) ^
  4137f6:	f3c3 2c07 	ubfx	ip, r3, #8, #8
  4137fa:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
  4137fe:	f406 4c7f 	and.w	ip, r6, #65280	; 0xff00
  413802:	ea47 0c0c 	orr.w	ip, r7, ip
  413806:	f852 7c30 	ldr.w	r7, [r2, #-48]
  41380a:	ea8c 0707 	eor.w	r7, ip, r7
                    (Te[2][GETBYTE(temp, 3)] & 0xff000000) ^
  41380e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
  413812:	f50c 7c00 	add.w	ip, ip, #512	; 0x200
  413816:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
  41381a:	f006 4c7f 	and.w	ip, r6, #4278190080	; 0xff000000
                    (Te[1][GETBYTE(temp, 0)] & 0x000000ff);
  41381e:	b2db      	uxtb	r3, r3

00413820 <.LVL140>:
  413820:	f503 7380 	add.w	r3, r3, #256	; 0x100
  413824:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
                    (Te[0][GETBYTE(temp, 1)] & 0x0000ff00) ^
  413828:	ea4c 0303 	orr.w	r3, ip, r3
  41382c:	405f      	eors	r7, r3
                rk[12] = rk[ 4] ^
  41382e:	f842 7c10 	str.w	r7, [r2, #-16]
                rk[13] = rk[ 5] ^ rk[12];
  413832:	f852 3c2c 	ldr.w	r3, [r2, #-44]
  413836:	405f      	eors	r7, r3
  413838:	f842 7c0c 	str.w	r7, [r2, #-12]
                rk[14] = rk[ 6] ^ rk[13];
  41383c:	f852 3c28 	ldr.w	r3, [r2, #-40]
  413840:	407b      	eors	r3, r7
  413842:	f842 3c08 	str.w	r3, [r2, #-8]
                rk[15] = rk[ 7] ^ rk[14];
  413846:	4058      	eors	r0, r3
  413848:	f842 0c04 	str.w	r0, [r2, #-4]

0041384c <.LVL141>:
                temp = rk[ 7];
  41384c:	e795      	b.n	41377a <.LVL136>
  41384e:	bf00      	nop
  413850:	00421ae8 	.word	0x00421ae8
  413854:	00409444 	.word	0x00409444
  413858:	00421ae4 	.word	0x00421ae4

0041385c <.LBB150>:
            for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
  41385c:	f8d4 70f0 	ldr.w	r7, [r4, #240]	; 0xf0

00413860 <.LVL143>:
  413860:	00bf      	lsls	r7, r7, #2

00413862 <.LVL144>:
  413862:	d019      	beq.n	413898 <.LVL152>
  413864:	4622      	mov	r2, r4
  413866:	eb04 0387 	add.w	r3, r4, r7, lsl #2
  41386a:	2100      	movs	r1, #0

0041386c <.LVL145>:
                temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
  41386c:	6810      	ldr	r0, [r2, #0]

0041386e <.LVL146>:
  41386e:	681d      	ldr	r5, [r3, #0]
  413870:	6015      	str	r5, [r2, #0]
  413872:	6018      	str	r0, [r3, #0]
                temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
  413874:	6850      	ldr	r0, [r2, #4]
  413876:	685d      	ldr	r5, [r3, #4]
  413878:	6055      	str	r5, [r2, #4]
  41387a:	6058      	str	r0, [r3, #4]
                temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
  41387c:	6890      	ldr	r0, [r2, #8]
  41387e:	689d      	ldr	r5, [r3, #8]
  413880:	6095      	str	r5, [r2, #8]
  413882:	6098      	str	r0, [r3, #8]
                temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
  413884:	68d0      	ldr	r0, [r2, #12]
  413886:	68dd      	ldr	r5, [r3, #12]
  413888:	60d5      	str	r5, [r2, #12]
  41388a:	60d8      	str	r0, [r3, #12]
            for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
  41388c:	3104      	adds	r1, #4
  41388e:	3210      	adds	r2, #16
  413890:	3b10      	subs	r3, #16
  413892:	1a78      	subs	r0, r7, r1

00413894 <.LVL151>:
  413894:	4281      	cmp	r1, r0
  413896:	d3e9      	bcc.n	41386c <.LVL145>

00413898 <.LVL152>:
            for (i = 1; i < aes->rounds; i++) {
  413898:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
  41389c:	2b01      	cmp	r3, #1
  41389e:	f67f af1c 	bls.w	4136da <.LVL126+0x8>
  4138a2:	4621      	mov	r1, r4
  4138a4:	2501      	movs	r5, #1
                    Td[0][Te[1][GETBYTE(rk[0], 3)] & 0xff] ^
  4138a6:	4a57      	ldr	r2, [pc, #348]	; (413a04 <.LVL155+0xe>)
  4138a8:	4b57      	ldr	r3, [pc, #348]	; (413a08 <.LVL155+0x12>)

004138aa <.LVL153>:
  4138aa:	6908      	ldr	r0, [r1, #16]
  4138ac:	0e07      	lsrs	r7, r0, #24
  4138ae:	f507 7780 	add.w	r7, r7, #256	; 0x100
  4138b2:	f813 c027 	ldrb.w	ip, [r3, r7, lsl #2]
                    Td[3][Te[1][GETBYTE(rk[0], 0)] & 0xff];
  4138b6:	b2c7      	uxtb	r7, r0
  4138b8:	f507 7780 	add.w	r7, r7, #256	; 0x100
  4138bc:	f813 e027 	ldrb.w	lr, [r3, r7, lsl #2]
  4138c0:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
                    Td[2][Te[1][GETBYTE(rk[0], 1)] & 0xff] ^
  4138c4:	f852 702c 	ldr.w	r7, [r2, ip, lsl #2]
  4138c8:	f852 602e 	ldr.w	r6, [r2, lr, lsl #2]
  4138cc:	4077      	eors	r7, r6
                    Td[1][Te[1][GETBYTE(rk[0], 2)] & 0xff] ^
  4138ce:	f3c0 4e07 	ubfx	lr, r0, #16, #8
  4138d2:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
  4138d6:	f813 e02e 	ldrb.w	lr, [r3, lr, lsl #2]
  4138da:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
                    Td[2][Te[1][GETBYTE(rk[0], 1)] & 0xff] ^
  4138de:	f852 602e 	ldr.w	r6, [r2, lr, lsl #2]
  4138e2:	4077      	eors	r7, r6
  4138e4:	f3c0 2007 	ubfx	r0, r0, #8, #8
  4138e8:	f500 7080 	add.w	r0, r0, #256	; 0x100
  4138ec:	f813 0020 	ldrb.w	r0, [r3, r0, lsl #2]
  4138f0:	f500 7000 	add.w	r0, r0, #512	; 0x200
  4138f4:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
  4138f8:	4078      	eors	r0, r7
                rk[0] =
  4138fa:	6108      	str	r0, [r1, #16]
                    Td[0][Te[1][GETBYTE(rk[1], 3)] & 0xff] ^
  4138fc:	6948      	ldr	r0, [r1, #20]
  4138fe:	0e07      	lsrs	r7, r0, #24
  413900:	f507 7780 	add.w	r7, r7, #256	; 0x100
  413904:	f813 c027 	ldrb.w	ip, [r3, r7, lsl #2]
                    Td[3][Te[1][GETBYTE(rk[1], 0)] & 0xff];
  413908:	b2c7      	uxtb	r7, r0
  41390a:	f507 7780 	add.w	r7, r7, #256	; 0x100
  41390e:	f813 e027 	ldrb.w	lr, [r3, r7, lsl #2]
  413912:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
                    Td[2][Te[1][GETBYTE(rk[1], 1)] & 0xff] ^
  413916:	f852 702c 	ldr.w	r7, [r2, ip, lsl #2]
  41391a:	f852 602e 	ldr.w	r6, [r2, lr, lsl #2]
  41391e:	4077      	eors	r7, r6
                    Td[1][Te[1][GETBYTE(rk[1], 2)] & 0xff] ^
  413920:	f3c0 4e07 	ubfx	lr, r0, #16, #8
  413924:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
  413928:	f813 e02e 	ldrb.w	lr, [r3, lr, lsl #2]
  41392c:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
                    Td[2][Te[1][GETBYTE(rk[1], 1)] & 0xff] ^
  413930:	f852 602e 	ldr.w	r6, [r2, lr, lsl #2]
  413934:	4077      	eors	r7, r6
  413936:	f3c0 2007 	ubfx	r0, r0, #8, #8
  41393a:	f500 7080 	add.w	r0, r0, #256	; 0x100
  41393e:	f813 0020 	ldrb.w	r0, [r3, r0, lsl #2]
  413942:	f500 7000 	add.w	r0, r0, #512	; 0x200
  413946:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
  41394a:	4078      	eors	r0, r7
                rk[1] =
  41394c:	6148      	str	r0, [r1, #20]
                    Td[0][Te[1][GETBYTE(rk[2], 3)] & 0xff] ^
  41394e:	6988      	ldr	r0, [r1, #24]
  413950:	0e07      	lsrs	r7, r0, #24
  413952:	f507 7780 	add.w	r7, r7, #256	; 0x100
  413956:	f813 c027 	ldrb.w	ip, [r3, r7, lsl #2]
                    Td[3][Te[1][GETBYTE(rk[2], 0)] & 0xff];
  41395a:	b2c7      	uxtb	r7, r0
  41395c:	f507 7780 	add.w	r7, r7, #256	; 0x100
  413960:	f813 e027 	ldrb.w	lr, [r3, r7, lsl #2]
  413964:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
                    Td[2][Te[1][GETBYTE(rk[2], 1)] & 0xff] ^
  413968:	f852 702c 	ldr.w	r7, [r2, ip, lsl #2]
  41396c:	f852 602e 	ldr.w	r6, [r2, lr, lsl #2]
  413970:	4077      	eors	r7, r6
                    Td[1][Te[1][GETBYTE(rk[2], 2)] & 0xff] ^
  413972:	f3c0 4e07 	ubfx	lr, r0, #16, #8
  413976:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
  41397a:	f813 e02e 	ldrb.w	lr, [r3, lr, lsl #2]
  41397e:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
                    Td[2][Te[1][GETBYTE(rk[2], 1)] & 0xff] ^
  413982:	f852 602e 	ldr.w	r6, [r2, lr, lsl #2]
  413986:	4077      	eors	r7, r6
  413988:	f3c0 2007 	ubfx	r0, r0, #8, #8
  41398c:	f500 7080 	add.w	r0, r0, #256	; 0x100
  413990:	f813 0020 	ldrb.w	r0, [r3, r0, lsl #2]
  413994:	f500 7000 	add.w	r0, r0, #512	; 0x200
  413998:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
  41399c:	4078      	eors	r0, r7
                rk[2] =
  41399e:	6188      	str	r0, [r1, #24]
                    Td[0][Te[1][GETBYTE(rk[3], 3)] & 0xff] ^
  4139a0:	69c8      	ldr	r0, [r1, #28]
  4139a2:	0e07      	lsrs	r7, r0, #24
  4139a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
  4139a8:	f813 c027 	ldrb.w	ip, [r3, r7, lsl #2]
                    Td[3][Te[1][GETBYTE(rk[3], 0)] & 0xff];
  4139ac:	b2c7      	uxtb	r7, r0
  4139ae:	f507 7780 	add.w	r7, r7, #256	; 0x100
  4139b2:	f813 e027 	ldrb.w	lr, [r3, r7, lsl #2]
  4139b6:	f50e 7e40 	add.w	lr, lr, #768	; 0x300
                    Td[2][Te[1][GETBYTE(rk[3], 1)] & 0xff] ^
  4139ba:	f852 702c 	ldr.w	r7, [r2, ip, lsl #2]
  4139be:	f852 602e 	ldr.w	r6, [r2, lr, lsl #2]
  4139c2:	4077      	eors	r7, r6
                    Td[1][Te[1][GETBYTE(rk[3], 2)] & 0xff] ^
  4139c4:	f3c0 4e07 	ubfx	lr, r0, #16, #8
  4139c8:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
  4139cc:	f813 e02e 	ldrb.w	lr, [r3, lr, lsl #2]
  4139d0:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
                    Td[2][Te[1][GETBYTE(rk[3], 1)] & 0xff] ^
  4139d4:	f852 602e 	ldr.w	r6, [r2, lr, lsl #2]
  4139d8:	4077      	eors	r7, r6
  4139da:	f3c0 2007 	ubfx	r0, r0, #8, #8
  4139de:	f500 7080 	add.w	r0, r0, #256	; 0x100
  4139e2:	f813 0020 	ldrb.w	r0, [r3, r0, lsl #2]
  4139e6:	f500 7000 	add.w	r0, r0, #512	; 0x200
  4139ea:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
  4139ee:	4078      	eors	r0, r7
                rk[3] =
  4139f0:	61c8      	str	r0, [r1, #28]
            for (i = 1; i < aes->rounds; i++) {
  4139f2:	3501      	adds	r5, #1
  4139f4:	3110      	adds	r1, #16

004139f6 <.LVL155>:
  4139f6:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
  4139fa:	42a8      	cmp	r0, r5
  4139fc:	f63f af55 	bhi.w	4138aa <.LVL153>
  413a00:	e66b      	b.n	4136da <.LVL126+0x8>
  413a02:	bf00      	nop
  413a04:	00408444 	.word	0x00408444
  413a08:	00409444 	.word	0x00409444

Disassembly of section .text.RsaPrivateDecryptEx%61:

00413a0c <RsaPrivateDecryptEx>:
static int RsaPrivateDecryptEx(byte* in, word32 inLen, byte* out,
                            word32 outLen, byte** outPtr, RsaKey* key,
                            int rsa_type, byte pad_value, int pad_type,
                            enum wc_HashType hash, int mgf,
                            byte* label, word32 labelSz, WC_RNG* rng)
{
  413a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00413a10 <.LCFI27>:
  413a10:	b09b      	sub	sp, #108	; 0x6c

00413a12 <.LCFI28>:
  413a12:	9c25      	ldr	r4, [sp, #148]	; 0x94
  413a14:	f89d 609c 	ldrb.w	r6, [sp, #156]	; 0x9c
  413a18:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4

00413a1c <.LVL149>:
    int ret = RSA_WRONG_TYPE_E;

    if (in == NULL || inLen == 0 || out == NULL || key == NULL) {
  413a1c:	2800      	cmp	r0, #0
  413a1e:	f000 81d0 	beq.w	413dc2 <.LVL256>
  413a22:	4680      	mov	r8, r0
  413a24:	2900      	cmp	r1, #0
  413a26:	f000 81cc 	beq.w	413dc2 <.LVL256>
  413a2a:	2a00      	cmp	r2, #0
  413a2c:	f000 81cc 	beq.w	413dc8 <.LVL256+0x6>
  413a30:	2c00      	cmp	r4, #0
  413a32:	f000 81c9 	beq.w	413dc8 <.LVL256+0x6>
  413a36:	461f      	mov	r7, r3
  413a38:	9205      	str	r2, [sp, #20]
  413a3a:	460d      	mov	r5, r1
        return BAD_FUNC_ARG;
    }

    switch (key->state) {
  413a3c:	f241 134c 	movw	r3, #4428	; 0x114c

00413a40 <.LVL150>:
  413a40:	58e3      	ldr	r3, [r4, r3]
  413a42:	2b06      	cmp	r3, #6
  413a44:	f200 81c6 	bhi.w	413dd4 <.LBE80>
  413a48:	e8df f013 	tbh	[pc, r3, lsl #1]

00413a4c <.LVL151>:
  413a4c:	01c40007 	.word	0x01c40007
  413a50:	01c401c4 	.word	0x01c401c4
  413a54:	010d0007 	.word	0x010d0007
  413a58:	01b4      	.short	0x01b4
    case RSA_STATE_NONE:
    case RSA_STATE_DECRYPT_EXPTMOD:
        key->state = RSA_STATE_DECRYPT_EXPTMOD;
  413a5a:	2204      	movs	r2, #4
  413a5c:	f241 134c 	movw	r3, #4428	; 0x114c
  413a60:	50e2      	str	r2, [r4, r3]
        key->dataLen = inLen;
  413a62:	f241 1350 	movw	r3, #4432	; 0x1150
  413a66:	50e1      	str	r1, [r4, r3]
            }
        }
    #endif

        /* verify the tmp ptr is NULL, otherwise indicates bad state */
        if (key->data != NULL) {
  413a68:	f241 1344 	movw	r3, #4420	; 0x1144
  413a6c:	58e3      	ldr	r3, [r4, r3]
  413a6e:	b163      	cbz	r3, 413a8a <.LCFI30>
            ret = BAD_STATE_E;
  413a70:	f06f 05bf 	mvn.w	r5, #191	; 0xbf

00413a74 <.LVL152>:
    /* if async pending then return and skip done cleanup below */
    if (ret == WC_PENDING_E) {
        return ret;
    }

    key->state = RSA_STATE_NONE;
  413a74:	2200      	movs	r2, #0
  413a76:	f241 134c 	movw	r3, #4428	; 0x114c
  413a7a:	50e2      	str	r2, [r4, r3]
    wc_RsaCleanup(key);
  413a7c:	4620      	mov	r0, r4
  413a7e:	f00c fb0d 	bl	42009c <.LFE42>

00413a82 <.LVL153>:

    return ret;
}
  413a82:	4628      	mov	r0, r5
  413a84:	b01b      	add	sp, #108	; 0x6c

00413a86 <.LCFI29>:
  413a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00413a8a <.LCFI30>:
        if (outPtr == NULL) {
  413a8a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  413a8c:	2b00      	cmp	r3, #0
  413a8e:	f000 80d3 	beq.w	413c38 <.LBE32>
            key->data = out;
  413a92:	f241 1344 	movw	r3, #4420	; 0x1144
  413a96:	9a05      	ldr	r2, [sp, #20]
  413a98:	50e2      	str	r2, [r4, r3]

00413a9a <.LVL155>:
        ret = wc_RsaFunction(key->data, inLen, key->data, &key->dataLen, rsa_type,
  413a9a:	f241 1344 	movw	r3, #4420	; 0x1144
  413a9e:	58e0      	ldr	r0, [r4, r3]
  413aa0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  413aa2:	9302      	str	r3, [sp, #8]
  413aa4:	9401      	str	r4, [sp, #4]
  413aa6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  413aa8:	9300      	str	r3, [sp, #0]
  413aaa:	f241 1350 	movw	r3, #4432	; 0x1150
  413aae:	4423      	add	r3, r4
  413ab0:	4602      	mov	r2, r0
  413ab2:	4629      	mov	r1, r5
  413ab4:	f00c fdc9 	bl	42064a <.LFE2>

00413ab8 <.LVL156>:
        if (ret >= 0 || ret == WC_PENDING_E) {
  413ab8:	1e05      	subs	r5, r0, #0

00413aba <.LVL157>:
  413aba:	f280 80cf 	bge.w	413c5c <.LVL196>
  413abe:	f115 0f6c 	cmn.w	r5, #108	; 0x6c
  413ac2:	f000 80cb 	beq.w	413c5c <.LVL196>
        if (ret < 0) {
  413ac6:	2d00      	cmp	r5, #0
  413ac8:	f2c0 8176 	blt.w	413db8 <.LVL255>

00413acc <.LBB32>:
        ret = wc_RsaUnPad_ex(key->data, key->dataLen, &pad, pad_value, pad_type,
  413acc:	f241 1344 	movw	r3, #4420	; 0x1144
  413ad0:	f854 a003 	ldr.w	sl, [r4, r3]
  413ad4:	f241 1350 	movw	r3, #4432	; 0x1150
  413ad8:	f854 8003 	ldr.w	r8, [r4, r3]

00413adc <.LVL159>:
  413adc:	4620      	mov	r0, r4

00413ade <.LVL160>:
  413ade:	f00e fd51 	bl	422584 <.LFE80>

00413ae2 <.LBB33>:
    switch (padType) {
  413ae2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  413ae4:	2b00      	cmp	r3, #0
  413ae6:	f000 80e6 	beq.w	413cb6 <.LBB50>
  413aea:	2b01      	cmp	r3, #1
  413aec:	f040 816f 	bne.w	413dce <.LBB80>

00413af0 <.LBB35>:
    if (optLabel == NULL && labelLen > 0) {
  413af0:	9b2b      	ldr	r3, [sp, #172]	; 0xac

00413af2 <.LVL163>:
  413af2:	b91b      	cbnz	r3, 413afc <.LBE33>
  413af4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  413af6:	2b00      	cmp	r3, #0
  413af8:	f040 813c 	bne.w	413d74 <.LVL241>

00413afc <.LBE33>:
        ret = wc_RsaUnPad_ex(key->data, key->dataLen, &pad, pad_value, pad_type,
  413afc:	f504 538a 	add.w	r3, r4, #4416	; 0x1140
  413b00:	681b      	ldr	r3, [r3, #0]
  413b02:	9306      	str	r3, [sp, #24]

00413b04 <.LBB49>:
    hLen = wc_HashGetDigestSize(hType);
  413b04:	4648      	mov	r0, r9
  413b06:	f00d fcd5 	bl	4214b4 <wc_HashGetDigestSize>

00413b0a <.LVL164>:
    if ((hLen < 0) || (pkcsBlockLen < (2 * (word32)hLen + 2))) {
  413b0a:	f1b0 0b00 	subs.w	fp, r0, #0
  413b0e:	f2c0 8135 	blt.w	413d7c <.LBE55>
  413b12:	f10b 0501 	add.w	r5, fp, #1
  413b16:	ebb8 0f45 	cmp.w	r8, r5, lsl #1
  413b1a:	f0c0 8133 	bcc.w	413d84 <.LBE56>
    tmp = (byte*)XMALLOC(pkcsBlockLen, heap, DYNAMIC_TYPE_RSA_BUFFER);
  413b1e:	4640      	mov	r0, r8

00413b20 <.LVL165>:
  413b20:	f00e faa8 	bl	422074 <.LFE26>

00413b24 <.LVL166>:
    if (tmp == NULL) {
  413b24:	4606      	mov	r6, r0

00413b26 <.LVL167>:
  413b26:	2800      	cmp	r0, #0
  413b28:	f000 8130 	beq.w	413d8c <.LVL247>
    XMEMSET(tmp, 0, pkcsBlockLen);
  413b2c:	4642      	mov	r2, r8
  413b2e:	2100      	movs	r1, #0
  413b30:	f00a fcf2 	bl	41e518 <.LFE14>

00413b34 <.LVL168>:
  413b34:	f108 32ff 	add.w	r2, r8, #4294967295
  413b38:	9208      	str	r2, [sp, #32]
    if ((ret = RsaMGF(mgf, (byte*)(pkcsBlock + (hLen + 1)),
  413b3a:	eba2 020b 	sub.w	r2, r2, fp
  413b3e:	9207      	str	r2, [sp, #28]
  413b40:	9b06      	ldr	r3, [sp, #24]
  413b42:	9301      	str	r3, [sp, #4]
  413b44:	f8cd b000 	str.w	fp, [sp]
  413b48:	4633      	mov	r3, r6
  413b4a:	eb0a 0105 	add.w	r1, sl, r5
  413b4e:	982a      	ldr	r0, [sp, #168]	; 0xa8
  413b50:	f00b ffeb 	bl	41fb2a <.LBE177>

00413b54 <.LVL169>:
  413b54:	4605      	mov	r5, r0
  413b56:	2800      	cmp	r0, #0
  413b58:	f040 8102 	bne.w	413d60 <.LBB40>

00413b5c <.LVL170>:
    for (idx = 0; idx < (word32)hLen; idx++) {
  413b5c:	f1bb 0f00 	cmp.w	fp, #0
  413b60:	d00b      	beq.n	413b7a <.LVL172+0x10>
  413b62:	1e70      	subs	r0, r6, #1

00413b64 <.LVL171>:
  413b64:	4651      	mov	r1, sl
  413b66:	eb0a 050b 	add.w	r5, sl, fp

00413b6a <.LVL172>:
        tmp[idx] = tmp[idx] ^ pkcsBlock[1 + idx];
  413b6a:	7843      	ldrb	r3, [r0, #1]
  413b6c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
  413b70:	4053      	eors	r3, r2
  413b72:	f800 3f01 	strb.w	r3, [r0, #1]!
    for (idx = 0; idx < (word32)hLen; idx++) {
  413b76:	42a9      	cmp	r1, r5
  413b78:	d1f7      	bne.n	413b6a <.LVL172>
    if ((ret = RsaMGF(mgf, tmp, hLen, tmp + hLen,
  413b7a:	eb06 030b 	add.w	r3, r6, fp
  413b7e:	9309      	str	r3, [sp, #36]	; 0x24
  413b80:	9a06      	ldr	r2, [sp, #24]
  413b82:	9201      	str	r2, [sp, #4]
  413b84:	9a07      	ldr	r2, [sp, #28]
  413b86:	9200      	str	r2, [sp, #0]
  413b88:	465a      	mov	r2, fp
  413b8a:	4631      	mov	r1, r6
  413b8c:	982a      	ldr	r0, [sp, #168]	; 0xa8
  413b8e:	f00b ffcc 	bl	41fb2a <.LBE177>

00413b92 <.LVL173>:
  413b92:	4605      	mov	r5, r0
  413b94:	2800      	cmp	r0, #0
  413b96:	f040 80e8 	bne.w	413d6a <.LBB41>

00413b9a <.LVL174>:
    for (idx = 0; idx < (pkcsBlockLen - hLen - 1); idx++) {
  413b9a:	9a07      	ldr	r2, [sp, #28]
  413b9c:	b16a      	cbz	r2, 413bba <.LBB37>
  413b9e:	eb0a 010b 	add.w	r1, sl, fp
  413ba2:	9809      	ldr	r0, [sp, #36]	; 0x24

00413ba4 <.LVL175>:
  413ba4:	9b08      	ldr	r3, [sp, #32]
  413ba6:	4453      	add	r3, sl
  413ba8:	461d      	mov	r5, r3

00413baa <.LVL176>:
        pkcsBlock[hLen + 1 + idx] = pkcsBlock[hLen + 1 + idx] ^ tmp[idx + hLen];
  413baa:	f810 3b01 	ldrb.w	r3, [r0], #1
  413bae:	784a      	ldrb	r2, [r1, #1]
  413bb0:	4053      	eors	r3, r2
  413bb2:	f801 3f01 	strb.w	r3, [r1, #1]!
    for (idx = 0; idx < (pkcsBlockLen - hLen - 1); idx++) {
  413bb6:	42a9      	cmp	r1, r5
  413bb8:	d1f7      	bne.n	413baa <.LVL176>

00413bba <.LBB37>:
    XFREE(tmp, heap, DYNAMIC_TYPE_RSA_BUFFER);
  413bba:	4630      	mov	r0, r6
  413bbc:	f00e fa66 	bl	42208c <.LFE2>

00413bc0 <.LBE37>:
    idx = hLen + 1 + hLen;
  413bc0:	f10b 0601 	add.w	r6, fp, #1

00413bc4 <.LVL179>:
  413bc4:	445e      	add	r6, fp

00413bc6 <.LVL180>:
    while (idx < pkcsBlockLen && pkcsBlock[idx] == 0) {idx++;}
  413bc6:	4546      	cmp	r6, r8
  413bc8:	d20b      	bcs.n	413be2 <.LVL180+0x1c>
  413bca:	eb0a 0306 	add.w	r3, sl, r6
  413bce:	f81a 2006 	ldrb.w	r2, [sl, r6]
  413bd2:	b932      	cbnz	r2, 413be2 <.LVL180+0x1c>
  413bd4:	3601      	adds	r6, #1
  413bd6:	4546      	cmp	r6, r8
  413bd8:	d203      	bcs.n	413be2 <.LVL180+0x1c>
  413bda:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  413bde:	2a00      	cmp	r2, #0
  413be0:	d0f8      	beq.n	413bd4 <.LVL180+0xe>
    if ((ret = wc_Hash(hType, optLabel, labelLen, h, hLen)) != 0) {
  413be2:	f8cd b000 	str.w	fp, [sp]
  413be6:	ab0a      	add	r3, sp, #40	; 0x28
  413be8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  413bea:	992b      	ldr	r1, [sp, #172]	; 0xac
  413bec:	4648      	mov	r0, r9
  413bee:	f00a fbf6 	bl	41e3de <.LFE24>

00413bf2 <.LVL182>:
  413bf2:	4605      	mov	r5, r0
  413bf4:	2800      	cmp	r0, #0
  413bf6:	f040 80cc 	bne.w	413d92 <.LBE57>

00413bfa <.LBB38>:
STATIC INLINE int ConstantCompare(const byte* a, const byte* b, int length)
{
    int i;
    int compareSum = 0;

    for (i = 0; i < length; i++) {
  413bfa:	f1bb 0f00 	cmp.w	fp, #0
  413bfe:	dd0b      	ble.n	413c18 <.LBE38>
  413c00:	eb0a 010b 	add.w	r1, sl, fp
  413c04:	a80a      	add	r0, sp, #40	; 0x28

00413c06 <.LVL184>:
  413c06:	448b      	add	fp, r1

00413c08 <.LVL185>:
        compareSum |= a[i] ^ b[i];
  413c08:	f810 3b01 	ldrb.w	r3, [r0], #1
  413c0c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
  413c10:	4053      	eors	r3, r2
  413c12:	431d      	orrs	r5, r3
    for (i = 0; i < length; i++) {
  413c14:	4559      	cmp	r1, fp
  413c16:	d1f7      	bne.n	413c08 <.LVL185>

00413c18 <.LBE38>:
    ret += pkcsBlock[idx++] ^ 0x01; /* separator value is 0x01 */
  413c18:	1c72      	adds	r2, r6, #1

00413c1a <.LVL188>:
  413c1a:	f81a 3006 	ldrb.w	r3, [sl, r6]
  413c1e:	f083 0301 	eor.w	r3, r3, #1
  413c22:	441d      	add	r5, r3

00413c24 <.LVL189>:
    ret += pkcsBlock[0]     ^ 0x00; /* Y, the first value, should be 0 */
  413c24:	f89a 3000 	ldrb.w	r3, [sl]
    if (ret != 0) {
  413c28:	42eb      	cmn	r3, r5
  413c2a:	f040 80b4 	bne.w	413d96 <.LVL250>
    *output = (byte*)(pkcsBlock + idx);
  413c2e:	eb0a 0602 	add.w	r6, sl, r2

00413c32 <.LVL190>:
    return pkcsBlockLen - idx;
  413c32:	eba8 0502 	sub.w	r5, r8, r2

00413c36 <.LVL191>:
  413c36:	e029      	b.n	413c8c <.LBE73>

00413c38 <.LBE32>:
            key->data = (byte*)XMALLOC(inLen, key->heap, DYNAMIC_TYPE_WOLF_BIGINT);
  413c38:	4608      	mov	r0, r1

00413c3a <.LVL193>:
  413c3a:	f00e fa1b 	bl	422074 <.LFE26>

00413c3e <.LVL194>:
  413c3e:	f241 1344 	movw	r3, #4420	; 0x1144
  413c42:	50e0      	str	r0, [r4, r3]
            key->dataIsAlloc = 1;
  413c44:	2201      	movs	r2, #1
  413c46:	f241 1354 	movw	r3, #4436	; 0x1154
  413c4a:	54e2      	strb	r2, [r4, r3]
            if (key->data == NULL) {
  413c4c:	2800      	cmp	r0, #0
  413c4e:	f000 80c4 	beq.w	413dda <.LVL260>
            XMEMCPY(key->data, in, inLen);
  413c52:	462a      	mov	r2, r5
  413c54:	4641      	mov	r1, r8
  413c56:	f006 fe95 	bl	41a984 <.LFE14>

00413c5a <.LVL195>:
  413c5a:	e71e      	b.n	413a9a <.LVL155>

00413c5c <.LVL196>:
            key->state = RSA_STATE_DECRYPT_UNPAD;
  413c5c:	2205      	movs	r2, #5
  413c5e:	f241 134c 	movw	r3, #4428	; 0x114c
  413c62:	50e2      	str	r2, [r4, r3]
  413c64:	e72f      	b.n	413ac6 <.LVL157+0xc>

00413c66 <.LBB82>:
        ret = wc_RsaUnPad_ex(key->data, key->dataLen, &pad, pad_value, pad_type,
  413c66:	f241 1344 	movw	r3, #4420	; 0x1144
  413c6a:	f854 a003 	ldr.w	sl, [r4, r3]
  413c6e:	f241 1350 	movw	r3, #4432	; 0x1150
  413c72:	f854 8003 	ldr.w	r8, [r4, r3]
  413c76:	4620      	mov	r0, r4

00413c78 <.LVL198>:
  413c78:	f00e fc84 	bl	422584 <.LFE80>

00413c7c <.LBB72>:
    switch (padType) {
  413c7c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  413c7e:	b1d3      	cbz	r3, 413cb6 <.LBB50>
  413c80:	2b01      	cmp	r3, #1
  413c82:	f43f af35 	beq.w	413af0 <.LBB35>

00413c86 <.LBE72>:
        byte* pad = NULL;
  413c86:	2600      	movs	r6, #0

00413c88 <.LBB73>:
            ret = RSA_PAD_E;
  413c88:	f06f 05c8 	mvn.w	r5, #200	; 0xc8

00413c8c <.LBE73>:
        if (ret > 0 && ret <= (int)outLen && pad != NULL) {
  413c8c:	42af      	cmp	r7, r5
  413c8e:	bfa8      	it	ge
  413c90:	2d00      	cmpge	r5, #0
  413c92:	f340 808a 	ble.w	413daa <.LVL253+0x2>
  413c96:	2e00      	cmp	r6, #0
  413c98:	f000 8087 	beq.w	413daa <.LVL253+0x2>
            if (outPtr == NULL) {
  413c9c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  413c9e:	2b00      	cmp	r3, #0
  413ca0:	d07d      	beq.n	413d9e <.LBE58>
                *outPtr = pad;
  413ca2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  413ca4:	601e      	str	r6, [r3, #0]

00413ca6 <.LVL202>:
        if (ret < 0) {
  413ca6:	2d00      	cmp	r5, #0
  413ca8:	f2c0 8086 	blt.w	413db8 <.LVL255>
        key->state = RSA_STATE_DECRYPT_RES;
  413cac:	2206      	movs	r2, #6
  413cae:	f241 134c 	movw	r3, #4428	; 0x114c
  413cb2:	50e2      	str	r2, [r4, r3]

00413cb4 <.LVL203>:
  413cb4:	e080      	b.n	413db8 <.LVL255>

00413cb6 <.LBB50>:
    word32 maxOutputLen = (pkcsBlockLen > 10) ? (pkcsBlockLen - 10) : 0;
  413cb6:	f1b8 0f0a 	cmp.w	r8, #10
  413cba:	bf8c      	ite	hi
  413cbc:	f1a8 010a 	subhi.w	r1, r8, #10
  413cc0:	2100      	movls	r1, #0

00413cc2 <.LVL205>:
    if (output == NULL || pkcsBlockLen == 0) {
  413cc2:	f1b8 0f00 	cmp.w	r8, #0
  413cc6:	f000 808b 	beq.w	413de0 <.LBB59>

00413cca <.LVL206>:
    pkcsBlock++; pkcsBlockLen--;
  413cca:	f108 38ff 	add.w	r8, r8, #4294967295

00413cce <.LVL207>:
    invalid = (pkcsBlock[0] != padValue) || invalid;
  413cce:	f89a 2001 	ldrb.w	r2, [sl, #1]
    if (pkcsBlock[0] != 0x0) { /* skip past zero */
  413cd2:	f89a 3000 	ldrb.w	r3, [sl]

00413cd6 <.LVL208>:
  413cd6:	2b00      	cmp	r3, #0
  413cd8:	bf08      	it	eq
  413cda:	42b2      	cmpeq	r2, r6
  413cdc:	bf14      	ite	ne
  413cde:	2001      	movne	r0, #1
  413ce0:	2000      	moveq	r0, #0

00413ce2 <.LVL209>:
    if (padValue == RSA_BLOCK_TYPE_1) {
  413ce2:	2e01      	cmp	r6, #1
  413ce4:	d01e      	beq.n	413d24 <.LVL218>
        while (i<pkcsBlockLen && pkcsBlock[i++]) {/* Null body */}
  413ce6:	f1b8 0f01 	cmp.w	r8, #1
  413cea:	d935      	bls.n	413d58 <.LVL229>

00413cec <.LVL210>:
  413cec:	f89a 3002 	ldrb.w	r3, [sl, #2]
  413cf0:	b3a3      	cbz	r3, 413d5c <.LVL231>
  413cf2:	f10a 0302 	add.w	r3, sl, #2
  413cf6:	2602      	movs	r6, #2

00413cf8 <.LVL211>:
  413cf8:	45b0      	cmp	r8, r6
  413cfa:	d027      	beq.n	413d4c <.LVL223>
  413cfc:	3601      	adds	r6, #1
  413cfe:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  413d02:	2a00      	cmp	r2, #0
  413d04:	d1f8      	bne.n	413cf8 <.LVL211>
    if (!(i==pkcsBlockLen || pkcsBlock[i-1]==0)) {
  413d06:	45b0      	cmp	r8, r6
  413d08:	d003      	beq.n	413d12 <.LVL214>
  413d0a:	f81a 3006 	ldrb.w	r3, [sl, r6]
  413d0e:	2b00      	cmp	r3, #0
  413d10:	d169      	bne.n	413de6 <.LVL263>

00413d12 <.LVL214>:
    outputLen = pkcsBlockLen - i;
  413d12:	eba8 0506 	sub.w	r5, r8, r6

00413d16 <.LVL215>:
    if (invalid) {
  413d16:	428d      	cmp	r5, r1
  413d18:	d868      	bhi.n	413dec <.LVL264>
  413d1a:	2800      	cmp	r0, #0
  413d1c:	d166      	bne.n	413dec <.LVL264>
    *output = (byte *)(pkcsBlock + i);
  413d1e:	3601      	adds	r6, #1

00413d20 <.LVL216>:
  413d20:	4456      	add	r6, sl

00413d22 <.LVL217>:
  413d22:	e7b3      	b.n	413c8c <.LBE73>

00413d24 <.LVL218>:
        while (i<pkcsBlockLen && pkcsBlock[i++] == 0xFF) {/* Null body */}
  413d24:	f1b8 0f01 	cmp.w	r8, #1
  413d28:	d912      	bls.n	413d50 <.LVL225>

00413d2a <.LVL219>:
  413d2a:	f89a 3002 	ldrb.w	r3, [sl, #2]
  413d2e:	2bff      	cmp	r3, #255	; 0xff
  413d30:	d110      	bne.n	413d54 <.LVL227>
  413d32:	f10a 0302 	add.w	r3, sl, #2
  413d36:	2602      	movs	r6, #2

00413d38 <.LVL220>:
  413d38:	45b0      	cmp	r8, r6
  413d3a:	d005      	beq.n	413d48 <.LVL220+0x10>
  413d3c:	3601      	adds	r6, #1
  413d3e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  413d42:	2aff      	cmp	r2, #255	; 0xff
  413d44:	d0f8      	beq.n	413d38 <.LVL220>
  413d46:	e7de      	b.n	413d06 <.LVL211+0xe>
  413d48:	4646      	mov	r6, r8

00413d4a <.LVL222>:
  413d4a:	e7e2      	b.n	413d12 <.LVL214>

00413d4c <.LVL223>:
        while (i<pkcsBlockLen && pkcsBlock[i++]) {/* Null body */}
  413d4c:	4646      	mov	r6, r8

00413d4e <.LVL224>:
  413d4e:	e7e0      	b.n	413d12 <.LVL214>

00413d50 <.LVL225>:
        while (i<pkcsBlockLen && pkcsBlock[i++] == 0xFF) {/* Null body */}
  413d50:	2601      	movs	r6, #1

00413d52 <.LVL226>:
  413d52:	e7d8      	b.n	413d06 <.LVL211+0xe>

00413d54 <.LVL227>:
  413d54:	2602      	movs	r6, #2

00413d56 <.LVL228>:
  413d56:	e7d6      	b.n	413d06 <.LVL211+0xe>

00413d58 <.LVL229>:
        while (i<pkcsBlockLen && pkcsBlock[i++]) {/* Null body */}
  413d58:	2601      	movs	r6, #1

00413d5a <.LVL230>:
  413d5a:	e7d4      	b.n	413d06 <.LVL211+0xe>

00413d5c <.LVL231>:
  413d5c:	2602      	movs	r6, #2

00413d5e <.LVL232>:
  413d5e:	e7d2      	b.n	413d06 <.LVL211+0xe>

00413d60 <.LBB40>:
        XFREE(tmp, heap, DYNAMIC_TYPE_RSA_BUFFER);
  413d60:	4630      	mov	r0, r6

00413d62 <.LVL234>:
  413d62:	f00e f993 	bl	42208c <.LFE2>

00413d66 <.LBE40>:
        byte* pad = NULL;
  413d66:	2600      	movs	r6, #0

00413d68 <.LVL236>:
  413d68:	e790      	b.n	413c8c <.LBE73>

00413d6a <.LBB41>:
        XFREE(tmp, NULL, DYNAMIC_TYPE_RSA_BUFFER);
  413d6a:	4630      	mov	r0, r6

00413d6c <.LVL238>:
  413d6c:	f00e f98e 	bl	42208c <.LFE2>

00413d70 <.LBE41>:
        byte* pad = NULL;
  413d70:	2600      	movs	r6, #0

00413d72 <.LVL240>:
  413d72:	e78b      	b.n	413c8c <.LBE73>

00413d74 <.LVL241>:
  413d74:	2600      	movs	r6, #0

00413d76 <.LBB55>:
        return BUFFER_E;
  413d76:	f06f 0583 	mvn.w	r5, #131	; 0x83
  413d7a:	e787      	b.n	413c8c <.LBE73>

00413d7c <.LBE55>:
        byte* pad = NULL;
  413d7c:	2600      	movs	r6, #0

00413d7e <.LBB56>:
        return BAD_FUNC_ARG;
  413d7e:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  413d82:	e783      	b.n	413c8c <.LBE73>

00413d84 <.LBE56>:
        byte* pad = NULL;
  413d84:	2600      	movs	r6, #0

00413d86 <.LBB57>:
        return BAD_FUNC_ARG;
  413d86:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  413d8a:	e77f      	b.n	413c8c <.LBE73>

00413d8c <.LVL247>:
        return MEMORY_E;
  413d8c:	f06f 057c 	mvn.w	r5, #124	; 0x7c
  413d90:	e77c      	b.n	413c8c <.LBE73>

00413d92 <.LBE57>:
        byte* pad = NULL;
  413d92:	2600      	movs	r6, #0

00413d94 <.LVL249>:
  413d94:	e77a      	b.n	413c8c <.LBE73>

00413d96 <.LVL250>:
  413d96:	2600      	movs	r6, #0

00413d98 <.LBB58>:
        return BAD_PADDING_E;
  413d98:	f06f 05c0 	mvn.w	r5, #192	; 0xc0

00413d9c <.LVL251>:
  413d9c:	e776      	b.n	413c8c <.LBE73>

00413d9e <.LBE58>:
                XMEMCPY(out, pad, ret);
  413d9e:	462a      	mov	r2, r5
  413da0:	4631      	mov	r1, r6
  413da2:	9805      	ldr	r0, [sp, #20]
  413da4:	f006 fdee 	bl	41a984 <.LFE14>

00413da8 <.LVL253>:
  413da8:	e77d      	b.n	413ca6 <.LVL202>
        else if (ret >= 0) {
  413daa:	2d00      	cmp	r5, #0
  413dac:	db04      	blt.n	413db8 <.LVL255>
            ret = RSA_BUFFER_E;
  413dae:	f06f 0582 	mvn.w	r5, #130	; 0x82
  413db2:	e65f      	b.n	413a74 <.LVL152>

00413db4 <.LBE82>:
    int ret = RSA_WRONG_TYPE_E;
  413db4:	f06f 0581 	mvn.w	r5, #129	; 0x81

00413db8 <.LVL255>:
    if (ret == WC_PENDING_E) {
  413db8:	f115 0f6c 	cmn.w	r5, #108	; 0x6c
  413dbc:	f43f ae61 	beq.w	413a82 <.LVL153>
  413dc0:	e658      	b.n	413a74 <.LVL152>

00413dc2 <.LVL256>:
        return BAD_FUNC_ARG;
  413dc2:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  413dc6:	e65c      	b.n	413a82 <.LVL153>
  413dc8:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  413dcc:	e659      	b.n	413a82 <.LVL153>

00413dce <.LBB80>:
            ret = RSA_PAD_E;
  413dce:	f06f 05c8 	mvn.w	r5, #200	; 0xc8

00413dd2 <.LVL258>:
  413dd2:	e7f1      	b.n	413db8 <.LVL255>

00413dd4 <.LBE80>:
        ret = BAD_STATE_E;
  413dd4:	f06f 05bf 	mvn.w	r5, #191	; 0xbf
  413dd8:	e64c      	b.n	413a74 <.LVL152>

00413dda <.LVL260>:
                ret = MEMORY_E;
  413dda:	f06f 057c 	mvn.w	r5, #124	; 0x7c

00413dde <.LVL261>:
  413dde:	e649      	b.n	413a74 <.LVL152>

00413de0 <.LBB59>:
        return BAD_FUNC_ARG;
  413de0:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  413de4:	e7e8      	b.n	413db8 <.LVL255>

00413de6 <.LVL263>:
        return RSA_PAD_E;
  413de6:	f06f 05c8 	mvn.w	r5, #200	; 0xc8
  413dea:	e7e5      	b.n	413db8 <.LVL255>

00413dec <.LVL264>:
        return RSA_PAD_E;
  413dec:	f06f 05c8 	mvn.w	r5, #200	; 0xc8

00413df0 <.LVL265>:
  413df0:	e7e2      	b.n	413db8 <.LVL255>

Disassembly of section .text.build_tree%62:

00413df2 <build_tree>:
{
  413df2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00413df6 <.LCFI11>:
  413df6:	b091      	sub	sp, #68	; 0x44

00413df8 <.LCFI12>:
  413df8:	4604      	mov	r4, r0
  413dfa:	9101      	str	r1, [sp, #4]
    ct_data *tree         = desc->dyn_tree;
  413dfc:	680d      	ldr	r5, [r1, #0]

00413dfe <.LVL186>:
    const ct_data *stree  = desc->stat_desc->static_tree;
  413dfe:	688b      	ldr	r3, [r1, #8]
  413e00:	681e      	ldr	r6, [r3, #0]

00413e02 <.LVL187>:
    int elems             = desc->stat_desc->elems;
  413e02:	68df      	ldr	r7, [r3, #12]

00413e04 <.LVL188>:
    s->heap_len = 0, s->heap_max = HEAP_SIZE;
  413e04:	2200      	movs	r2, #0
  413e06:	f241 4350 	movw	r3, #5200	; 0x1450
  413e0a:	50c2      	str	r2, [r0, r3]
  413e0c:	f240 223d 	movw	r2, #573	; 0x23d
  413e10:	f241 4354 	movw	r3, #5204	; 0x1454
  413e14:	50c2      	str	r2, [r0, r3]

00413e16 <.LVL189>:
    for (n = 0; n < elems; n++) {
  413e16:	2f00      	cmp	r7, #0
  413e18:	dd38      	ble.n	413e8c <.LVL197>
  413e1a:	4629      	mov	r1, r5

00413e1c <.LVL190>:
  413e1c:	f241 4258 	movw	r2, #5208	; 0x1458
  413e20:	4402      	add	r2, r0
  413e22:	f04f 33ff 	mov.w	r3, #4294967295
  413e26:	9306      	str	r3, [sp, #24]
  413e28:	2300      	movs	r3, #0
            tree[n].Len = 0;
  413e2a:	469c      	mov	ip, r3
            s->heap[++(s->heap_len)] = max_code = n;
  413e2c:	f241 4e50 	movw	lr, #5200	; 0x1450
  413e30:	4486      	add	lr, r0
  413e32:	4680      	mov	r8, r0
  413e34:	e006      	b.n	413e44 <.LVL191+0xe>

00413e36 <.LVL191>:
            tree[n].Len = 0;
  413e36:	f8a1 c002 	strh.w	ip, [r1, #2]
    for (n = 0; n < elems; n++) {
  413e3a:	3301      	adds	r3, #1
  413e3c:	3104      	adds	r1, #4
  413e3e:	3201      	adds	r2, #1
  413e40:	429f      	cmp	r7, r3
  413e42:	d010      	beq.n	413e66 <.LVL195>
        if (tree[n].Freq != 0) {
  413e44:	f835 0023 	ldrh.w	r0, [r5, r3, lsl #2]
  413e48:	2800      	cmp	r0, #0
  413e4a:	d0f4      	beq.n	413e36 <.LVL191>
            s->heap[++(s->heap_len)] = max_code = n;
  413e4c:	f8de 0000 	ldr.w	r0, [lr]
  413e50:	1c44      	adds	r4, r0, #1
  413e52:	f8ce 4000 	str.w	r4, [lr]

00413e56 <.LVL194>:
  413e56:	eb08 0080 	add.w	r0, r8, r0, lsl #2
  413e5a:	f8c0 3b60 	str.w	r3, [r0, #2912]	; 0xb60
            s->depth[n] = 0;
  413e5e:	f882 c000 	strb.w	ip, [r2]
  413e62:	9306      	str	r3, [sp, #24]
  413e64:	e7e9      	b.n	413e3a <.LVL191+0x4>

00413e66 <.LVL195>:
  413e66:	4644      	mov	r4, r8

00413e68 <.LVL196>:
    while (s->heap_len < 2) {
  413e68:	f241 4250 	movw	r2, #5200	; 0x1450
  413e6c:	4422      	add	r2, r4
        node = s->heap[++(s->heap_len)] = (max_code < 2 ? ++max_code : 0);
  413e6e:	f04f 0e00 	mov.w	lr, #0
        tree[node].Freq = 1;
  413e72:	f04f 0801 	mov.w	r8, #1
        s->depth[node] = 0;
  413e76:	f241 4c58 	movw	ip, #5208	; 0x1458
        s->opt_len--; if (stree) s->static_len -= stree[node].Len;
  413e7a:	f241 61a8 	movw	r1, #5800	; 0x16a8
  413e7e:	4421      	add	r1, r4
  413e80:	f241 60ac 	movw	r0, #5804	; 0x16ac
  413e84:	4420      	add	r0, r4
  413e86:	f8dd 9018 	ldr.w	r9, [sp, #24]
  413e8a:	e01c      	b.n	413ec6 <.LVL201+0x1a>

00413e8c <.LVL197>:
    int max_code = -1; /* largest code with non zero frequency */
  413e8c:	f04f 33ff 	mov.w	r3, #4294967295
  413e90:	9306      	str	r3, [sp, #24]
  413e92:	e7e9      	b.n	413e68 <.LVL196>

00413e94 <.LVL198>:
        node = s->heap[++(s->heap_len)] = (max_code < 2 ? ++max_code : 0);
  413e94:	f109 0901 	add.w	r9, r9, #1
  413e98:	46ca      	mov	sl, r9
  413e9a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  413e9e:	f8c3 ab5c 	str.w	sl, [r3, #2908]	; 0xb5c

00413ea2 <.LVL200>:
        tree[node].Freq = 1;
  413ea2:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
  413ea6:	f825 802a 	strh.w	r8, [r5, sl, lsl #2]
        s->depth[node] = 0;
  413eaa:	44a2      	add	sl, r4

00413eac <.LVL201>:
  413eac:	f80a e00c 	strb.w	lr, [sl, ip]
        s->opt_len--; if (stree) s->static_len -= stree[node].Len;
  413eb0:	680b      	ldr	r3, [r1, #0]
  413eb2:	3b01      	subs	r3, #1
  413eb4:	600b      	str	r3, [r1, #0]
  413eb6:	b136      	cbz	r6, 413ec6 <.LVL201+0x1a>
  413eb8:	44b3      	add	fp, r6
  413eba:	f8bb a002 	ldrh.w	sl, [fp, #2]
  413ebe:	6803      	ldr	r3, [r0, #0]
  413ec0:	eba3 030a 	sub.w	r3, r3, sl
  413ec4:	6003      	str	r3, [r0, #0]
    while (s->heap_len < 2) {
  413ec6:	6813      	ldr	r3, [r2, #0]
  413ec8:	2b01      	cmp	r3, #1
  413eca:	dc06      	bgt.n	413eda <.LVL201+0x2e>
        node = s->heap[++(s->heap_len)] = (max_code < 2 ? ++max_code : 0);
  413ecc:	3301      	adds	r3, #1
  413ece:	6013      	str	r3, [r2, #0]
  413ed0:	f1b9 0f01 	cmp.w	r9, #1
  413ed4:	ddde      	ble.n	413e94 <.LVL198>
  413ed6:	46f2      	mov	sl, lr
  413ed8:	e7df      	b.n	413e9a <.LVL198+0x6>
  413eda:	f8cd 9018 	str.w	r9, [sp, #24]
    desc->max_code = max_code;
  413ede:	9a01      	ldr	r2, [sp, #4]
  413ee0:	f8c2 9004 	str.w	r9, [r2, #4]
    for (n = s->heap_len/2; n >= 1; n--) pqdownheap(s, tree, n);
  413ee4:	f241 4350 	movw	r3, #5200	; 0x1450
  413ee8:	58e6      	ldr	r6, [r4, r3]

00413eea <.LVL203>:
  413eea:	2e00      	cmp	r6, #0
  413eec:	bfb8      	it	lt
  413eee:	3601      	addlt	r6, #1
  413ef0:	1076      	asrs	r6, r6, #1

00413ef2 <.LVL204>:
  413ef2:	2e00      	cmp	r6, #0
  413ef4:	dd06      	ble.n	413f04 <.LVL206+0x2>
  413ef6:	4632      	mov	r2, r6
  413ef8:	4629      	mov	r1, r5
  413efa:	4620      	mov	r0, r4
  413efc:	f00a f88c 	bl	41e018 <.LFE0>

00413f00 <.LVL205>:
  413f00:	3e01      	subs	r6, #1

00413f02 <.LVL206>:
  413f02:	d1f8      	bne.n	413ef6 <.LVL204+0x4>
  413f04:	f241 4957 	movw	r9, #5207	; 0x1457

00413f08 <.LVL207>:
  413f08:	44b9      	add	r9, r7
  413f0a:	44a1      	add	r9, r4
        pqremove(s, tree, n);  /* n = node of least frequency */
  413f0c:	f241 4850 	movw	r8, #5200	; 0x1450
  413f10:	44a0      	add	r8, r4
  413f12:	f04f 0b01 	mov.w	fp, #1
        s->heap[--(s->heap_max)] = n; /* keep the nodes sorted by frequency */
  413f16:	f241 4a54 	movw	sl, #5204	; 0x1454
  413f1a:	44a2      	add	sl, r4
  413f1c:	e000      	b.n	413f20 <.LVL209>

00413f1e <.LVL208>:
        s->heap[SMALLEST] = node++;
  413f1e:	4637      	mov	r7, r6

00413f20 <.LVL209>:
        pqremove(s, tree, n);  /* n = node of least frequency */
  413f20:	f8d4 6b60 	ldr.w	r6, [r4, #2912]	; 0xb60

00413f24 <.LVL210>:
  413f24:	f8d8 3000 	ldr.w	r3, [r8]
  413f28:	1e5a      	subs	r2, r3, #1
  413f2a:	f8c8 2000 	str.w	r2, [r8]
  413f2e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  413f32:	f8d3 3b5c 	ldr.w	r3, [r3, #2908]	; 0xb5c
  413f36:	f8c4 3b60 	str.w	r3, [r4, #2912]	; 0xb60
  413f3a:	465a      	mov	r2, fp
  413f3c:	4629      	mov	r1, r5
  413f3e:	4620      	mov	r0, r4
  413f40:	f00a f86a 	bl	41e018 <.LFE0>

00413f44 <.LVL211>:
        m = s->heap[SMALLEST]; /* m = node of next least frequency */
  413f44:	f8d4 3b60 	ldr.w	r3, [r4, #2912]	; 0xb60

00413f48 <.LVL212>:
        s->heap[--(s->heap_max)] = n; /* keep the nodes sorted by frequency */
  413f48:	f8da 2000 	ldr.w	r2, [sl]
  413f4c:	eb04 0182 	add.w	r1, r4, r2, lsl #2
  413f50:	f8c1 6b58 	str.w	r6, [r1, #2904]	; 0xb58
        s->heap[--(s->heap_max)] = m;
  413f54:	3a02      	subs	r2, #2
  413f56:	f8ca 2000 	str.w	r2, [sl]
  413f5a:	f8c1 3b54 	str.w	r3, [r1, #2900]	; 0xb54
        tree[node].Freq = tree[n].Freq + tree[m].Freq;
  413f5e:	eb05 0286 	add.w	r2, r5, r6, lsl #2
  413f62:	eb05 0183 	add.w	r1, r5, r3, lsl #2
  413f66:	f835 0026 	ldrh.w	r0, [r5, r6, lsl #2]
  413f6a:	f835 e023 	ldrh.w	lr, [r5, r3, lsl #2]
  413f6e:	4470      	add	r0, lr
  413f70:	f825 0027 	strh.w	r0, [r5, r7, lsl #2]
        s->depth[node] = (uch)((s->depth[n] >= s->depth[m] ?
  413f74:	4426      	add	r6, r4

00413f76 <.LVL213>:
  413f76:	f241 4e58 	movw	lr, #5208	; 0x1458
  413f7a:	f816 000e 	ldrb.w	r0, [r6, lr]
  413f7e:	4423      	add	r3, r4

00413f80 <.LVL214>:
  413f80:	f813 300e 	ldrb.w	r3, [r3, lr]
  413f84:	4298      	cmp	r0, r3
  413f86:	bf2c      	ite	cs
  413f88:	1c43      	addcs	r3, r0, #1
  413f8a:	3301      	addcc	r3, #1
  413f8c:	b2db      	uxtb	r3, r3
  413f8e:	f809 3f01 	strb.w	r3, [r9, #1]!
        tree[n].Dad = tree[m].Dad = (ush)node;
  413f92:	b2bb      	uxth	r3, r7
  413f94:	804b      	strh	r3, [r1, #2]
  413f96:	8053      	strh	r3, [r2, #2]
        s->heap[SMALLEST] = node++;
  413f98:	1c7e      	adds	r6, r7, #1

00413f9a <.LVL215>:
  413f9a:	f8c4 7b60 	str.w	r7, [r4, #2912]	; 0xb60
        pqdownheap(s, tree, SMALLEST);
  413f9e:	465a      	mov	r2, fp
  413fa0:	4629      	mov	r1, r5
  413fa2:	4620      	mov	r0, r4
  413fa4:	f00a f838 	bl	41e018 <.LFE0>

00413fa8 <.LVL216>:
    } while (s->heap_len >= 2);
  413fa8:	f8d8 3000 	ldr.w	r3, [r8]
  413fac:	2b01      	cmp	r3, #1
  413fae:	dcb6      	bgt.n	413f1e <.LVL208>
    s->heap[--(s->heap_max)] = s->heap[SMALLEST];
  413fb0:	f241 4254 	movw	r2, #5204	; 0x1454
  413fb4:	58a3      	ldr	r3, [r4, r2]
  413fb6:	1e59      	subs	r1, r3, #1
  413fb8:	50a1      	str	r1, [r4, r2]
  413fba:	f8d4 eb60 	ldr.w	lr, [r4, #2912]	; 0xb60
  413fbe:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  413fc2:	f8c3 eb58 	str.w	lr, [r3, #2904]	; 0xb58

00413fc6 <.LBB54>:
    ct_data *tree        = desc->dyn_tree;
  413fc6:	9801      	ldr	r0, [sp, #4]
  413fc8:	6802      	ldr	r2, [r0, #0]

00413fca <.LVL218>:
    int max_code         = desc->max_code;
  413fca:	6841      	ldr	r1, [r0, #4]

00413fcc <.LVL219>:
    const ct_data *stree = desc->stat_desc->static_tree;
  413fcc:	6883      	ldr	r3, [r0, #8]
  413fce:	6818      	ldr	r0, [r3, #0]
  413fd0:	4683      	mov	fp, r0

00413fd2 <.LVL220>:
    const intf *extra    = desc->stat_desc->extra_bits;
  413fd2:	6858      	ldr	r0, [r3, #4]

00413fd4 <.LVL221>:
  413fd4:	9005      	str	r0, [sp, #20]

00413fd6 <.LVL222>:
    int base             = desc->stat_desc->extra_base;
  413fd6:	6898      	ldr	r0, [r3, #8]

00413fd8 <.LVL223>:
  413fd8:	9003      	str	r0, [sp, #12]

00413fda <.LVL224>:
    int max_length       = desc->stat_desc->max_length;
  413fda:	691b      	ldr	r3, [r3, #16]

00413fdc <.LVL225>:
  413fdc:	f604 303a 	addw	r0, r4, #2874	; 0xb3a

00413fe0 <.LVL226>:
  413fe0:	f604 375a 	addw	r7, r4, #2906	; 0xb5a
    for (bits = 0; bits <= MAX_BITS; bits++) s->bl_count[bits] = 0;
  413fe4:	2600      	movs	r6, #0

00413fe6 <.LVL227>:
  413fe6:	f820 6f02 	strh.w	r6, [r0, #2]!
  413fea:	42b8      	cmp	r0, r7
  413fec:	d1fb      	bne.n	413fe6 <.LVL227>
    tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */
  413fee:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
  413ff2:	2000      	movs	r0, #0
  413ff4:	f8ae 0002 	strh.w	r0, [lr, #2]
    for (h = s->heap_max+1; h < HEAP_SIZE; h++) {
  413ff8:	f241 4054 	movw	r0, #5204	; 0x1454
  413ffc:	5820      	ldr	r0, [r4, r0]

00413ffe <.LVL228>:
  413ffe:	1c46      	adds	r6, r0, #1

00414000 <.LVL229>:
  414000:	f5b6 7f0f 	cmp.w	r6, #572	; 0x23c
  414004:	f300 80b1 	bgt.w	41416a <.LVL263>
  414008:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  41400c:	f600 3c5c 	addw	ip, r0, #2908	; 0xb5c
  414010:	f241 404c 	movw	r0, #5196	; 0x144c
  414014:	1820      	adds	r0, r4, r0
  414016:	f04f 0800 	mov.w	r8, #0
        if (bits > max_length) bits = max_length, overflow++;
  41401a:	9304      	str	r3, [sp, #16]
        s->opt_len += (ulg)f * (bits + xbits);
  41401c:	f241 69a8 	movw	r9, #5800	; 0x16a8
  414020:	44a1      	add	r9, r4
        if (stree) s->static_len += (ulg)f * (stree[n].Len + xbits);
  414022:	f241 6aac 	movw	sl, #5804	; 0x16ac
  414026:	44a2      	add	sl, r4
        xbits = 0;
  414028:	9507      	str	r5, [sp, #28]
  41402a:	46de      	mov	lr, fp
  41402c:	9001      	str	r0, [sp, #4]

0041402e <.LVL230>:
  41402e:	9402      	str	r4, [sp, #8]
  414030:	e019      	b.n	414066 <.LVL236+0x6>

00414032 <.LVL231>:
  414032:	2700      	movs	r7, #0

00414034 <.LVL232>:
        s->opt_len += (ulg)f * (bits + xbits);
  414034:	f832 5025 	ldrh.w	r5, [r2, r5, lsl #2]

00414038 <.LVL233>:
  414038:	4438      	add	r0, r7

0041403a <.LVL234>:
  41403a:	f8d9 6000 	ldr.w	r6, [r9]
  41403e:	fb05 6000 	mla	r0, r5, r0, r6
  414042:	f8c9 0000 	str.w	r0, [r9]
        if (stree) s->static_len += (ulg)f * (stree[n].Len + xbits);
  414046:	f1be 0f00 	cmp.w	lr, #0
  41404a:	d009      	beq.n	414060 <.LVL236>
  41404c:	4474      	add	r4, lr
  41404e:	8860      	ldrh	r0, [r4, #2]
  414050:	eb00 0b07 	add.w	fp, r0, r7
  414054:	f8da 0000 	ldr.w	r0, [sl]
  414058:	fb05 050b 	mla	r5, r5, fp, r0

0041405c <.LVL235>:
  41405c:	f8ca 5000 	str.w	r5, [sl]

00414060 <.LVL236>:
    for (h = s->heap_max+1; h < HEAP_SIZE; h++) {
  414060:	9801      	ldr	r0, [sp, #4]
  414062:	4584      	cmp	ip, r0
  414064:	d020      	beq.n	4140a8 <.LVL245>
        n = s->heap[h];
  414066:	f85c 5f04 	ldr.w	r5, [ip, #4]!

0041406a <.LVL238>:
        bits = tree[tree[n].Dad].Len + 1;
  41406a:	00ac      	lsls	r4, r5, #2
  41406c:	1917      	adds	r7, r2, r4
  41406e:	8878      	ldrh	r0, [r7, #2]
  414070:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  414074:	8840      	ldrh	r0, [r0, #2]
  414076:	3001      	adds	r0, #1

00414078 <.LVL239>:
        if (bits > max_length) bits = max_length, overflow++;
  414078:	4283      	cmp	r3, r0
  41407a:	da02      	bge.n	414082 <.LVL242>

0041407c <.LVL240>:
  41407c:	f108 0801 	add.w	r8, r8, #1
  414080:	9804      	ldr	r0, [sp, #16]

00414082 <.LVL242>:
        tree[n].Len = (ush)bits;
  414082:	8078      	strh	r0, [r7, #2]
        if (n > max_code) continue; /* not a leaf node */
  414084:	42a9      	cmp	r1, r5
  414086:	dbeb      	blt.n	414060 <.LVL236>
  414088:	9f02      	ldr	r7, [sp, #8]
  41408a:	eb07 0b40 	add.w	fp, r7, r0, lsl #1
        s->bl_count[bits]++;
  41408e:	f8bb 7b3c 	ldrh.w	r7, [fp, #2876]	; 0xb3c
  414092:	3701      	adds	r7, #1
  414094:	f8ab 7b3c 	strh.w	r7, [fp, #2876]	; 0xb3c

00414098 <.LVL243>:
        if (n >= base) xbits = extra[n-base];
  414098:	9e03      	ldr	r6, [sp, #12]
  41409a:	42ae      	cmp	r6, r5
  41409c:	dcc9      	bgt.n	414032 <.LVL231>
  41409e:	1baf      	subs	r7, r5, r6
  4140a0:	9e05      	ldr	r6, [sp, #20]
  4140a2:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]

004140a6 <.LVL244>:
  4140a6:	e7c5      	b.n	414034 <.LVL232>

004140a8 <.LVL245>:
  4140a8:	9d07      	ldr	r5, [sp, #28]
  4140aa:	9c02      	ldr	r4, [sp, #8]
    if (overflow == 0) return;
  4140ac:	f1b8 0f00 	cmp.w	r8, #0
  4140b0:	d05b      	beq.n	41416a <.LVL263>
  4140b2:	f203 5c9c 	addw	ip, r3, #1436	; 0x59c
  4140b6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
  4140ba:	f10c 0e02 	add.w	lr, ip, #2

004140be <.LVL246>:
  4140be:	44a6      	add	lr, r4
  4140c0:	eb04 0743 	add.w	r7, r4, r3, lsl #1
        bits = max_length-1;
  4140c4:	1e58      	subs	r0, r3, #1

004140c6 <.LVL247>:
        while (s->bl_count[bits] == 0) bits--;
  4140c6:	f8b7 6b3a 	ldrh.w	r6, [r7, #2874]	; 0xb3a
  4140ca:	b92e      	cbnz	r6, 4140d8 <.LVL247+0x12>
  4140cc:	46f1      	mov	r9, lr
  4140ce:	3801      	subs	r0, #1
  4140d0:	f839 6d02 	ldrh.w	r6, [r9, #-2]!
  4140d4:	2e00      	cmp	r6, #0
  4140d6:	d0fa      	beq.n	4140ce <.LVL247+0x8>
  4140d8:	eb04 0040 	add.w	r0, r4, r0, lsl #1

004140dc <.LVL249>:
        s->bl_count[bits]--;      /* move one leaf down the tree */
  4140dc:	3e01      	subs	r6, #1
  4140de:	f8a0 6b3c 	strh.w	r6, [r0, #2876]	; 0xb3c
        s->bl_count[bits+1] += 2; /* move one overflow item as its brother */
  4140e2:	f8b0 6b3e 	ldrh.w	r6, [r0, #2878]	; 0xb3e
  4140e6:	3602      	adds	r6, #2
  4140e8:	f8a0 6b3e 	strh.w	r6, [r0, #2878]	; 0xb3e
        s->bl_count[max_length]--;
  4140ec:	f8b7 0b3c 	ldrh.w	r0, [r7, #2876]	; 0xb3c
  4140f0:	3801      	subs	r0, #1
  4140f2:	f8a7 0b3c 	strh.w	r0, [r7, #2876]	; 0xb3c
        overflow -= 2;
  4140f6:	f1a8 0802 	sub.w	r8, r8, #2
    } while (overflow > 0);
  4140fa:	f1b8 0f00 	cmp.w	r8, #0
  4140fe:	dce1      	bgt.n	4140c4 <.LVL246+0x6>

00414100 <.LVL251>:
    for (bits = max_length; bits != 0; bits--) {
  414100:	b39b      	cbz	r3, 41416a <.LVL263>
  414102:	f10c 0c06 	add.w	ip, ip, #6
  414106:	eb04 0b0c 	add.w	fp, r4, ip
    for (h = s->heap_max+1; h < HEAP_SIZE; h++) {
  41410a:	f240 283d 	movw	r8, #573	; 0x23d

0041410e <.LVL252>:
                s->opt_len += ((long)bits - (long)tree[m].Len)
  41410e:	f241 6aa8 	movw	sl, #5800	; 0x16a8
  414112:	44a2      	add	sl, r4
  414114:	469c      	mov	ip, r3
  414116:	e01e      	b.n	414156 <.LVL261>

00414118 <.LVL253>:
            n--;
  414118:	3b01      	subs	r3, #1
        while (n != 0) {
  41411a:	b1c3      	cbz	r3, 41414e <.LVL258+0x6>
            m = s->heap[--h];
  41411c:	f108 38ff 	add.w	r8, r8, #4294967295
  414120:	f857 0d04 	ldr.w	r0, [r7, #-4]!

00414124 <.LVL256>:
            if (m > max_code) continue;
  414124:	4281      	cmp	r1, r0
  414126:	dbf8      	blt.n	41411a <.LVL253+0x2>
            if ((unsigned) tree[m].Len != (unsigned) bits) {
  414128:	eb02 0680 	add.w	r6, r2, r0, lsl #2
  41412c:	f8b6 e002 	ldrh.w	lr, [r6, #2]
  414130:	45e6      	cmp	lr, ip
  414132:	d0f1      	beq.n	414118 <.LVL253>
                s->opt_len += ((long)bits - (long)tree[m].Len)
  414134:	ebac 0e0e 	sub.w	lr, ip, lr
                              *(long)tree[m].Freq;
  414138:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]

0041413c <.LVL257>:
                s->opt_len += ((long)bits - (long)tree[m].Len)
  41413c:	f8da 4000 	ldr.w	r4, [sl]
  414140:	fb00 400e 	mla	r0, r0, lr, r4
  414144:	f8ca 0000 	str.w	r0, [sl]

00414148 <.LVL258>:
                tree[m].Len = (ush)bits;
  414148:	f8a6 c002 	strh.w	ip, [r6, #2]
  41414c:	e7e4      	b.n	414118 <.LVL253>
  41414e:	464c      	mov	r4, r9

00414150 <.LVL259>:
    for (bits = max_length; bits != 0; bits--) {
  414150:	f1bc 0c01 	subs.w	ip, ip, #1

00414154 <.LVL260>:
  414154:	d009      	beq.n	41416a <.LVL263>

00414156 <.LVL261>:
        n = s->bl_count[bits];
  414156:	f83b 3d02 	ldrh.w	r3, [fp, #-2]!

0041415a <.LVL262>:
        while (n != 0) {
  41415a:	2b00      	cmp	r3, #0
  41415c:	d0f8      	beq.n	414150 <.LVL259>
  41415e:	eb04 0788 	add.w	r7, r4, r8, lsl #2
  414162:	f607 375c 	addw	r7, r7, #2908	; 0xb5c
  414166:	46a1      	mov	r9, r4
  414168:	e7d8      	b.n	41411c <.LVL253+0x4>

0041416a <.LVL263>:
  41416a:	f604 343a 	addw	r4, r4, #2874	; 0xb3a

0041416e <.LVL264>:
  41416e:	f10d 0122 	add.w	r1, sp, #34	; 0x22
  414172:	a810      	add	r0, sp, #64	; 0x40

00414174 <.LBB56>:
    ush code = 0;              /* running code value */
  414174:	2300      	movs	r3, #0

00414176 <.LVL265>:
        next_code[bits] = code = (code + bl_count[bits-1]) << 1;
  414176:	f834 2f02 	ldrh.w	r2, [r4, #2]!
  41417a:	4413      	add	r3, r2

0041417c <.LVL266>:
  41417c:	b29b      	uxth	r3, r3
  41417e:	005b      	lsls	r3, r3, #1
  414180:	b29b      	uxth	r3, r3

00414182 <.LVL267>:
  414182:	f821 3b02 	strh.w	r3, [r1], #2
    for (bits = 1; bits <= MAX_BITS; bits++) {
  414186:	4288      	cmp	r0, r1
  414188:	d1f5      	bne.n	414176 <.LVL265>

0041418a <.LVL268>:
    for (n = 0;  n <= max_code; n++) {
  41418a:	9b06      	ldr	r3, [sp, #24]

0041418c <.LVL269>:
  41418c:	2b00      	cmp	r3, #0
  41418e:	db1f      	blt.n	4141d0 <.LBE56>
  414190:	462e      	mov	r6, r5
  414192:	2400      	movs	r4, #0

00414194 <.LBB58>:
 */
local unsigned bi_reverse(code, len)
    unsigned code; /* the value to invert */
    int len;       /* its bit length */
{
    register unsigned res = 0;
  414194:	4627      	mov	r7, r4
  414196:	469e      	mov	lr, r3
  414198:	e003      	b.n	4141a2 <.LBB63>

0041419a <.LBE58>:
    for (n = 0;  n <= max_code; n++) {
  41419a:	3401      	adds	r4, #1
  41419c:	3604      	adds	r6, #4
  41419e:	45a6      	cmp	lr, r4
  4141a0:	db16      	blt.n	4141d0 <.LBE56>

004141a2 <.LBB63>:
        int len = tree[n].Len;
  4141a2:	8872      	ldrh	r2, [r6, #2]

004141a4 <.LVL273>:
        if (len == 0) continue;
  4141a4:	2a00      	cmp	r2, #0
  4141a6:	d0f8      	beq.n	41419a <.LBE58>
        tree[n].Code = bi_reverse(next_code[len]++, len);
  4141a8:	ab10      	add	r3, sp, #64	; 0x40
  4141aa:	eb03 0342 	add.w	r3, r3, r2, lsl #1
  4141ae:	f833 1c20 	ldrh.w	r1, [r3, #-32]
  4141b2:	1c48      	adds	r0, r1, #1
  4141b4:	f823 0c20 	strh.w	r0, [r3, #-32]

004141b8 <.LBB62>:
    register unsigned res = 0;
  4141b8:	4638      	mov	r0, r7

004141ba <.LVL275>:
    do {
        res |= code & 1;
  4141ba:	f001 0301 	and.w	r3, r1, #1
  4141be:	4303      	orrs	r3, r0

004141c0 <.LVL276>:
        code >>= 1, res <<= 1;
  4141c0:	0849      	lsrs	r1, r1, #1
  4141c2:	0058      	lsls	r0, r3, #1

004141c4 <.LVL278>:
    } while (--len > 0);
  4141c4:	3a01      	subs	r2, #1
  4141c6:	2a00      	cmp	r2, #0
  4141c8:	dcf7      	bgt.n	4141ba <.LVL275>

004141ca <.LBE62>:
        tree[n].Code = bi_reverse(next_code[len]++, len);
  4141ca:	f825 3024 	strh.w	r3, [r5, r4, lsl #2]

004141ce <.LVL281>:
  4141ce:	e7e4      	b.n	41419a <.LBE58>

004141d0 <.LBE56>:
}
  4141d0:	b011      	add	sp, #68	; 0x44

004141d2 <.LCFI13>:
  4141d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section .text.wc_AesEncrypt%63:

004141d8 <wc_AesEncrypt>:
{
  4141d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

004141dc <.LCFI0>:
    word32 r = aes->rounds >> 1;
  4141dc:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
  4141e0:	ea4f 0e53 	mov.w	lr, r3, lsr #1

004141e4 <.LVL1>:
    if (r > 7 || r == 0) {
  4141e4:	f10e 33ff 	add.w	r3, lr, #4294967295
  4141e8:	2b06      	cmp	r3, #6
  4141ea:	f200 81d6 	bhi.w	41459a <.LVL52>
  4141ee:	4692      	mov	sl, r2
    XMEMCPY(&s0, inBlock,                  sizeof(s0));
  4141f0:	680e      	ldr	r6, [r1, #0]

004141f2 <.LVL2>:
    XMEMCPY(&s1, inBlock + sizeof(s0),     sizeof(s1));
  4141f2:	684d      	ldr	r5, [r1, #4]

004141f4 <.LVL3>:
    XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
  4141f4:	688c      	ldr	r4, [r1, #8]

004141f6 <.LVL4>:
    XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
  4141f6:	68cb      	ldr	r3, [r1, #12]

004141f8 <.LBB92>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  4141f8:	0a31      	lsrs	r1, r6, #8

004141fa <.LVL6>:
  4141fa:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
  4141fe:	0231      	lsls	r1, r6, #8
  414200:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  414204:	4339      	orrs	r1, r7

00414206 <.LBE92>:
    s0 ^= rk[0];
  414206:	6806      	ldr	r6, [r0, #0]

00414208 <.LVL7>:
  414208:	ea86 4631 	eor.w	r6, r6, r1, ror #16

0041420c <.LBB94>:
  41420c:	0a29      	lsrs	r1, r5, #8
  41420e:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
  414212:	0229      	lsls	r1, r5, #8
  414214:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  414218:	4339      	orrs	r1, r7

0041421a <.LBE94>:
    s1 ^= rk[1];
  41421a:	6845      	ldr	r5, [r0, #4]

0041421c <.LVL9>:
  41421c:	ea85 4531 	eor.w	r5, r5, r1, ror #16

00414220 <.LBB96>:
  414220:	0a21      	lsrs	r1, r4, #8
  414222:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
  414226:	0221      	lsls	r1, r4, #8
  414228:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  41422c:	4339      	orrs	r1, r7

0041422e <.LBE96>:
    s2 ^= rk[2];
  41422e:	6884      	ldr	r4, [r0, #8]

00414230 <.LVL11>:
  414230:	ea84 4431 	eor.w	r4, r4, r1, ror #16

00414234 <.LBB98>:
  414234:	ea4f 2c03 	mov.w	ip, r3, lsl #8
  414238:	f00c 2cff 	and.w	ip, ip, #4278255360	; 0xff00ff00
  41423c:	0a1b      	lsrs	r3, r3, #8

0041423e <.LVL13>:
  41423e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  414242:	ea4c 0303 	orr.w	r3, ip, r3

00414246 <.LBE98>:
    s3 ^= rk[3];
  414246:	68c1      	ldr	r1, [r0, #12]
  414248:	ea81 4c33 	eor.w	ip, r1, r3, ror #16

0041424c <.LVL14>:
  41424c:	2104      	movs	r1, #4

0041424e <.LVL15>:
{
  41424e:	2320      	movs	r3, #32

00414250 <.LBB100>:
        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
  414250:	3b01      	subs	r3, #1

00414252 <.LVL17>:
  414252:	d1fd      	bne.n	414250 <.LBB100>

00414254 <.LVL18>:
    for (i = 0; i < 4; i++) {
  414254:	3901      	subs	r1, #1

00414256 <.LVL19>:
  414256:	d1fa      	bne.n	41424e <.LVL15>

00414258 <.LBE100>:
    const word32* rk = aes->key;
  414258:	4607      	mov	r7, r0
  41425a:	eb00 1e4e 	add.w	lr, r0, lr, lsl #5

0041425e <.LVL20>:
            Te[0][GETBYTE(s0, 3)]  ^
  41425e:	4bd0      	ldr	r3, [pc, #832]	; (4145a0 <.LVL52+0x6>)

00414260 <.LVL21>:
  414260:	0e31      	lsrs	r1, r6, #24
            Te[3][GETBYTE(s3, 0)]  ^
  414262:	fa5f f08c 	uxtb.w	r0, ip
  414266:	f500 7040 	add.w	r0, r0, #768	; 0x300
        t0 =
  41426a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  41426e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  414272:	4048      	eors	r0, r1
  414274:	6939      	ldr	r1, [r7, #16]
  414276:	4041      	eors	r1, r0
            Te[1][GETBYTE(s1, 2)]  ^
  414278:	f3c5 4007 	ubfx	r0, r5, #16, #8
  41427c:	f500 7080 	add.w	r0, r0, #256	; 0x100
        t0 =
  414280:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  414284:	4041      	eors	r1, r0
            Te[2][GETBYTE(s2, 1)]  ^
  414286:	f3c4 2007 	ubfx	r0, r4, #8, #8
  41428a:	f500 7000 	add.w	r0, r0, #512	; 0x200
        t0 =
  41428e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  414292:	4041      	eors	r1, r0

00414294 <.LVL22>:
            Te[0][GETBYTE(s1, 3)]  ^
  414294:	0e28      	lsrs	r0, r5, #24
            Te[3][GETBYTE(s0, 0)]  ^
  414296:	fa5f f886 	uxtb.w	r8, r6
  41429a:	f508 7840 	add.w	r8, r8, #768	; 0x300
        t1 =
  41429e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  4142a2:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
  4142a6:	ea80 0808 	eor.w	r8, r0, r8
  4142aa:	6978      	ldr	r0, [r7, #20]
  4142ac:	ea88 0000 	eor.w	r0, r8, r0
            Te[1][GETBYTE(s2, 2)]  ^
  4142b0:	f3c4 4807 	ubfx	r8, r4, #16, #8
  4142b4:	f508 7880 	add.w	r8, r8, #256	; 0x100
        t1 =
  4142b8:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
  4142bc:	ea80 0008 	eor.w	r0, r0, r8
            Te[2][GETBYTE(s3, 1)]  ^
  4142c0:	f3cc 2807 	ubfx	r8, ip, #8, #8
  4142c4:	f508 7800 	add.w	r8, r8, #512	; 0x200
        t1 =
  4142c8:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
  4142cc:	ea80 0008 	eor.w	r0, r0, r8

004142d0 <.LVL23>:
            Te[0][GETBYTE(s2, 3)] ^
  4142d0:	ea4f 6814 	mov.w	r8, r4, lsr #24
            Te[3][GETBYTE(s1, 0)]  ^
  4142d4:	fa5f f985 	uxtb.w	r9, r5
  4142d8:	f509 7940 	add.w	r9, r9, #768	; 0x300
        t2 =
  4142dc:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
  4142e0:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
  4142e4:	ea88 0809 	eor.w	r8, r8, r9
  4142e8:	69ba      	ldr	r2, [r7, #24]
  4142ea:	ea88 0802 	eor.w	r8, r8, r2
            Te[1][GETBYTE(s3, 2)]  ^
  4142ee:	f3cc 4907 	ubfx	r9, ip, #16, #8
  4142f2:	f509 7980 	add.w	r9, r9, #256	; 0x100
        t2 =
  4142f6:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
  4142fa:	ea88 0809 	eor.w	r8, r8, r9
            Te[2][GETBYTE(s0, 1)]  ^
  4142fe:	f3c6 2907 	ubfx	r9, r6, #8, #8
  414302:	f509 7900 	add.w	r9, r9, #512	; 0x200
        t2 =
  414306:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
  41430a:	ea88 0809 	eor.w	r8, r8, r9

0041430e <.LVL24>:
            Te[0][GETBYTE(s3, 3)] ^
  41430e:	ea4f 6c1c 	mov.w	ip, ip, lsr #24

00414312 <.LVL25>:
            Te[3][GETBYTE(s2, 0)]  ^
  414312:	b2e4      	uxtb	r4, r4

00414314 <.LVL26>:
  414314:	f504 7940 	add.w	r9, r4, #768	; 0x300
        t3 =
  414318:	f853 402c 	ldr.w	r4, [r3, ip, lsl #2]
  41431c:	f853 c029 	ldr.w	ip, [r3, r9, lsl #2]
  414320:	ea84 0c0c 	eor.w	ip, r4, ip
  414324:	69fc      	ldr	r4, [r7, #28]
  414326:	ea8c 0c04 	eor.w	ip, ip, r4
            Te[1][GETBYTE(s0, 2)]  ^
  41432a:	f3c6 4607 	ubfx	r6, r6, #16, #8

0041432e <.LVL27>:
  41432e:	f506 7680 	add.w	r6, r6, #256	; 0x100
        t3 =
  414332:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
  414336:	ea8c 0c04 	eor.w	ip, ip, r4
            Te[2][GETBYTE(s1, 1)]  ^
  41433a:	f3c5 2507 	ubfx	r5, r5, #8, #8

0041433e <.LVL28>:
  41433e:	f505 7500 	add.w	r5, r5, #512	; 0x200
        t3 =
  414342:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
  414346:	ea8c 0c04 	eor.w	ip, ip, r4

0041434a <.LVL29>:
        rk += 8;
  41434a:	3720      	adds	r7, #32
        if (--r == 0) {
  41434c:	4577      	cmp	r7, lr
  41434e:	d070      	beq.n	414432 <.LVL36>

00414350 <.LVL31>:
            Te[0][GETBYTE(t0, 3)] ^
  414350:	0e0d      	lsrs	r5, r1, #24
            Te[3][GETBYTE(t3, 0)] ^
  414352:	fa5f f48c 	uxtb.w	r4, ip
  414356:	f504 7440 	add.w	r4, r4, #768	; 0x300
  41435a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
  41435e:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
  414362:	406e      	eors	r6, r5
  414364:	683d      	ldr	r5, [r7, #0]
  414366:	406e      	eors	r6, r5
            Te[1][GETBYTE(t1, 2)] ^
  414368:	f3c0 4407 	ubfx	r4, r0, #16, #8
  41436c:	f504 7480 	add.w	r4, r4, #256	; 0x100
            Te[3][GETBYTE(t3, 0)] ^
  414370:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
  414374:	406e      	eors	r6, r5
            Te[2][GETBYTE(t2, 1)] ^
  414376:	f3c8 2407 	ubfx	r4, r8, #8, #8
  41437a:	f504 7400 	add.w	r4, r4, #512	; 0x200
            Te[3][GETBYTE(t3, 0)] ^
  41437e:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
  414382:	4066      	eors	r6, r4
            Te[0][GETBYTE(t1, 3)] ^
  414384:	0e05      	lsrs	r5, r0, #24
            Te[3][GETBYTE(t0, 0)] ^
  414386:	b2cc      	uxtb	r4, r1
  414388:	f504 7440 	add.w	r4, r4, #768	; 0x300
  41438c:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
  414390:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
  414394:	406c      	eors	r4, r5
  414396:	687d      	ldr	r5, [r7, #4]
  414398:	4065      	eors	r5, r4
            Te[1][GETBYTE(t2, 2)] ^
  41439a:	f3c8 4407 	ubfx	r4, r8, #16, #8
  41439e:	f504 7480 	add.w	r4, r4, #256	; 0x100
            Te[3][GETBYTE(t0, 0)] ^
  4143a2:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
  4143a6:	4065      	eors	r5, r4
            Te[2][GETBYTE(t3, 1)] ^
  4143a8:	f3cc 2407 	ubfx	r4, ip, #8, #8
  4143ac:	f504 7400 	add.w	r4, r4, #512	; 0x200
            Te[3][GETBYTE(t0, 0)] ^
  4143b0:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
  4143b4:	4065      	eors	r5, r4
            Te[0][GETBYTE(t2, 3)] ^
  4143b6:	ea4f 6418 	mov.w	r4, r8, lsr #24
            Te[3][GETBYTE(t1, 0)] ^
  4143ba:	fa5f f980 	uxtb.w	r9, r0
  4143be:	f509 7940 	add.w	r9, r9, #768	; 0x300
  4143c2:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
  4143c6:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
  4143ca:	ea84 0409 	eor.w	r4, r4, r9
  4143ce:	68ba      	ldr	r2, [r7, #8]
  4143d0:	4054      	eors	r4, r2
            Te[1][GETBYTE(t3, 2)] ^
  4143d2:	f3cc 4907 	ubfx	r9, ip, #16, #8
  4143d6:	f509 7980 	add.w	r9, r9, #256	; 0x100
            Te[3][GETBYTE(t1, 0)] ^
  4143da:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
  4143de:	ea84 0409 	eor.w	r4, r4, r9
            Te[2][GETBYTE(t0, 1)] ^
  4143e2:	f3c1 2907 	ubfx	r9, r1, #8, #8
  4143e6:	f509 7900 	add.w	r9, r9, #512	; 0x200
            Te[3][GETBYTE(t1, 0)] ^
  4143ea:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
  4143ee:	ea84 0409 	eor.w	r4, r4, r9
            Te[0][GETBYTE(t3, 3)] ^
  4143f2:	ea4f 6c1c 	mov.w	ip, ip, lsr #24

004143f6 <.LVL32>:
            Te[3][GETBYTE(t2, 0)] ^
  4143f6:	fa5f f888 	uxtb.w	r8, r8

004143fa <.LVL33>:
  4143fa:	f508 7840 	add.w	r8, r8, #768	; 0x300
  4143fe:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
  414402:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
  414406:	ea8c 0c08 	eor.w	ip, ip, r8
  41440a:	68fa      	ldr	r2, [r7, #12]
  41440c:	ea8c 0c02 	eor.w	ip, ip, r2
            Te[1][GETBYTE(t0, 2)] ^
  414410:	f3c1 4107 	ubfx	r1, r1, #16, #8

00414414 <.LVL34>:
  414414:	f501 7180 	add.w	r1, r1, #256	; 0x100
            Te[3][GETBYTE(t2, 0)] ^
  414418:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  41441c:	ea8c 0c01 	eor.w	ip, ip, r1
            Te[2][GETBYTE(t1, 1)] ^
  414420:	f3c0 2007 	ubfx	r0, r0, #8, #8

00414424 <.LVL35>:
  414424:	f500 7000 	add.w	r0, r0, #512	; 0x200
            Te[3][GETBYTE(t2, 0)] ^
  414428:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
  41442c:	ea8c 0c01 	eor.w	ip, ip, r1
        t0 =
  414430:	e716      	b.n	414260 <.LVL21>

00414432 <.LVL36>:
        (Te[1][GETBYTE(t3, 0)] & 0x000000ff) ^
  414432:	4c5b      	ldr	r4, [pc, #364]	; (4145a0 <.LVL52+0x6>)
  414434:	fa5f f38c 	uxtb.w	r3, ip
  414438:	f503 7380 	add.w	r3, r3, #256	; 0x100
  41443c:	f814 5023 	ldrb.w	r5, [r4, r3, lsl #2]
  414440:	f8de 3000 	ldr.w	r3, [lr]
  414444:	405d      	eors	r5, r3
        (Te[0][GETBYTE(t2, 1)] & 0x0000ff00) ^
  414446:	f3c8 2307 	ubfx	r3, r8, #8, #8
  41444a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
  41444e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
        (Te[1][GETBYTE(t3, 0)] & 0x000000ff) ^
  414452:	405d      	eors	r5, r3
        (Te[3][GETBYTE(t1, 2)] & 0x00ff0000) ^
  414454:	f3c0 4307 	ubfx	r3, r0, #16, #8
  414458:	f503 7340 	add.w	r3, r3, #768	; 0x300
  41445c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
  414460:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
        (Te[2][GETBYTE(t0, 3)] & 0xff000000) ^
  414464:	0e0e      	lsrs	r6, r1, #24
  414466:	f506 7600 	add.w	r6, r6, #512	; 0x200
  41446a:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
  41446e:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
  414472:	4333      	orrs	r3, r6
        (Te[1][GETBYTE(t3, 0)] & 0x000000ff) ^
  414474:	405d      	eors	r5, r3

00414476 <.LVL37>:
        (Te[1][GETBYTE(t0, 0)] & 0x000000ff) ^
  414476:	b2cb      	uxtb	r3, r1
  414478:	f503 7380 	add.w	r3, r3, #256	; 0x100
  41447c:	f814 6023 	ldrb.w	r6, [r4, r3, lsl #2]
  414480:	f8de 3004 	ldr.w	r3, [lr, #4]
  414484:	405e      	eors	r6, r3
        (Te[0][GETBYTE(t3, 1)] & 0x0000ff00) ^
  414486:	f3cc 2307 	ubfx	r3, ip, #8, #8
  41448a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
  41448e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
        (Te[1][GETBYTE(t0, 0)] & 0x000000ff) ^
  414492:	405e      	eors	r6, r3
        (Te[3][GETBYTE(t2, 2)] & 0x00ff0000) ^
  414494:	f3c8 4307 	ubfx	r3, r8, #16, #8
  414498:	f503 7340 	add.w	r3, r3, #768	; 0x300
  41449c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
  4144a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
        (Te[2][GETBYTE(t1, 3)] & 0xff000000) ^
  4144a4:	0e07      	lsrs	r7, r0, #24

004144a6 <.LVL38>:
  4144a6:	f507 7700 	add.w	r7, r7, #512	; 0x200
  4144aa:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
  4144ae:	f007 477f 	and.w	r7, r7, #4278190080	; 0xff000000
  4144b2:	433b      	orrs	r3, r7
        (Te[1][GETBYTE(t0, 0)] & 0x000000ff) ^
  4144b4:	405e      	eors	r6, r3

004144b6 <.LVL39>:
        (Te[1][GETBYTE(t1, 0)] & 0x000000ff) ^
  4144b6:	b2c3      	uxtb	r3, r0
  4144b8:	f503 7380 	add.w	r3, r3, #256	; 0x100
  4144bc:	f814 7023 	ldrb.w	r7, [r4, r3, lsl #2]
  4144c0:	f8de 3008 	ldr.w	r3, [lr, #8]
  4144c4:	405f      	eors	r7, r3
        (Te[0][GETBYTE(t0, 1)] & 0x0000ff00) ^
  4144c6:	f3c1 2307 	ubfx	r3, r1, #8, #8
  4144ca:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
  4144ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
        (Te[1][GETBYTE(t1, 0)] & 0x000000ff) ^
  4144d2:	405f      	eors	r7, r3
        (Te[3][GETBYTE(t3, 2)] & 0x00ff0000) ^
  4144d4:	f3cc 4307 	ubfx	r3, ip, #16, #8
  4144d8:	f503 7340 	add.w	r3, r3, #768	; 0x300
  4144dc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
  4144e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
        (Te[2][GETBYTE(t2, 3)] & 0xff000000) ^
  4144e4:	ea4f 6918 	mov.w	r9, r8, lsr #24
  4144e8:	f509 7900 	add.w	r9, r9, #512	; 0x200
  4144ec:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
  4144f0:	f009 497f 	and.w	r9, r9, #4278190080	; 0xff000000
  4144f4:	ea43 0309 	orr.w	r3, r3, r9
        (Te[1][GETBYTE(t1, 0)] & 0x000000ff) ^
  4144f8:	405f      	eors	r7, r3

004144fa <.LVL40>:
        (Te[1][GETBYTE(t2, 0)] & 0x000000ff) ^
  4144fa:	fa5f f388 	uxtb.w	r3, r8
  4144fe:	f503 7380 	add.w	r3, r3, #256	; 0x100
  414502:	f814 3023 	ldrb.w	r3, [r4, r3, lsl #2]
  414506:	f8de e00c 	ldr.w	lr, [lr, #12]
  41450a:	ea83 0e0e 	eor.w	lr, r3, lr
        (Te[0][GETBYTE(t1, 1)] & 0x0000ff00) ^
  41450e:	f3c0 2007 	ubfx	r0, r0, #8, #8

00414512 <.LVL41>:
  414512:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
  414516:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
        (Te[1][GETBYTE(t2, 0)] & 0x000000ff) ^
  41451a:	ea8e 0003 	eor.w	r0, lr, r3
        (Te[3][GETBYTE(t0, 2)] & 0x00ff0000) ^
  41451e:	f3c1 4307 	ubfx	r3, r1, #16, #8
  414522:	f503 7340 	add.w	r3, r3, #768	; 0x300
  414526:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]

0041452a <.LVL42>:
  41452a:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
        (Te[2][GETBYTE(t3, 3)] & 0xff000000) ^
  41452e:	ea4f 631c 	mov.w	r3, ip, lsr #24
  414532:	f503 7300 	add.w	r3, r3, #512	; 0x200
  414536:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
  41453a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
  41453e:	430b      	orrs	r3, r1
        (Te[1][GETBYTE(t2, 0)] & 0x000000ff) ^
  414540:	4043      	eors	r3, r0

00414542 <.LBB102>:
  414542:	0a29      	lsrs	r1, r5, #8
  414544:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
  414548:	0228      	lsls	r0, r5, #8
  41454a:	f000 20ff 	and.w	r0, r0, #4278255360	; 0xff00ff00
  41454e:	4301      	orrs	r1, r0

00414550 <.LBB104>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  414550:	ea4f 4131 	mov.w	r1, r1, ror #16

00414554 <.LBE102>:
    XMEMCPY(outBlock,                  &s0, sizeof(s0));
  414554:	f8ca 1000 	str.w	r1, [sl]

00414558 <.LBB106>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  414558:	0a31      	lsrs	r1, r6, #8

0041455a <.LVL45>:
  41455a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
  41455e:	0230      	lsls	r0, r6, #8
  414560:	f000 20ff 	and.w	r0, r0, #4278255360	; 0xff00ff00
  414564:	4301      	orrs	r1, r0

00414566 <.LBB108>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  414566:	ea4f 4131 	mov.w	r1, r1, ror #16

0041456a <.LBE106>:
    XMEMCPY(outBlock + sizeof(s0),     &s1, sizeof(s1));
  41456a:	f8ca 1004 	str.w	r1, [sl, #4]

0041456e <.LBB110>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  41456e:	0a39      	lsrs	r1, r7, #8

00414570 <.LVL47>:
  414570:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
  414574:	0238      	lsls	r0, r7, #8
  414576:	f000 20ff 	and.w	r0, r0, #4278255360	; 0xff00ff00
  41457a:	4301      	orrs	r1, r0

0041457c <.LBB112>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  41457c:	ea4f 4131 	mov.w	r1, r1, ror #16

00414580 <.LBE110>:
    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
  414580:	f8ca 1008 	str.w	r1, [sl, #8]

00414584 <.LBB114>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  414584:	0a19      	lsrs	r1, r3, #8

00414586 <.LVL49>:
  414586:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
  41458a:	021b      	lsls	r3, r3, #8

0041458c <.LVL50>:
  41458c:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  414590:	430b      	orrs	r3, r1

00414592 <.LBB116>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  414592:	ea4f 4333 	mov.w	r3, r3, ror #16

00414596 <.LBE114>:
    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
  414596:	f8ca 300c 	str.w	r3, [sl, #12]

0041459a <.LVL52>:
  41459a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  41459e:	bf00      	nop
  4145a0:	00409444 	.word	0x00409444

Disassembly of section .text.wc_ecc_mulmod_ex%64:

004145a4 <wc_ecc_mulmod_ex>:
{
  4145a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

004145a8 <.LCFI34>:
  4145a8:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274

004145ac <.LCFI35>:
   if (k == NULL || G == NULL || R == NULL || modulus == NULL) {
  4145ac:	2800      	cmp	r0, #0
  4145ae:	f000 8197 	beq.w	4148e0 <.LVL639>
  4145b2:	4604      	mov	r4, r0
  4145b4:	2900      	cmp	r1, #0
  4145b6:	f000 8193 	beq.w	4148e0 <.LVL639>
  4145ba:	2a00      	cmp	r2, #0
  4145bc:	f000 8193 	beq.w	4148e6 <.LVL640>
  4145c0:	98a6      	ldr	r0, [sp, #664]	; 0x298

004145c2 <.LVL529>:
  4145c2:	2800      	cmp	r0, #0
  4145c4:	f000 818f 	beq.w	4148e6 <.LVL640>
  4145c8:	9404      	str	r4, [sp, #16]
  4145ca:	9302      	str	r3, [sp, #8]
  4145cc:	9203      	str	r2, [sp, #12]
  4145ce:	460f      	mov	r7, r1

004145d0 <.LVL530>:
   XMEMSET(M, 0, sizeof(M));
  4145d0:	2220      	movs	r2, #32

004145d2 <.LVL531>:
  4145d2:	2100      	movs	r1, #0

004145d4 <.LVL532>:
  4145d4:	a894      	add	r0, sp, #592	; 0x250
  4145d6:	f009 ff9f 	bl	41e518 <.LFE14>

004145da <.LVL533>:
   if ((err = mp_montgomery_setup(modulus, &mp)) != MP_OKAY) {
  4145da:	a909      	add	r1, sp, #36	; 0x24
  4145dc:	98a6      	ldr	r0, [sp, #664]	; 0x298
  4145de:	f00d ffdd 	bl	42259c <.LFE98>

004145e2 <.LVL534>:
  4145e2:	4604      	mov	r4, r0

004145e4 <.LVL535>:
  4145e4:	b120      	cbz	r0, 4145f0 <.LCFI37>

004145e6 <.LVL536>:
}
  4145e6:	4620      	mov	r0, r4
  4145e8:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274

004145ec <.LCFI36>:
  4145ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004145f0 <.LCFI37>:
   if ((err = mp_init(&mu)) != MP_OKAY) {
  4145f0:	a80a      	add	r0, sp, #40	; 0x28

004145f2 <.LVL538>:
  4145f2:	f00d fe5b 	bl	4222ac <.LFE39>

004145f6 <.LVL539>:
  4145f6:	4604      	mov	r4, r0
  4145f8:	2800      	cmp	r0, #0
  4145fa:	d1f4      	bne.n	4145e6 <.LVL536>
   if ((err = mp_montgomery_calc_normalization(&mu, modulus)) != MP_OKAY) {
  4145fc:	99a6      	ldr	r1, [sp, #664]	; 0x298
  4145fe:	a80a      	add	r0, sp, #40	; 0x28

00414600 <.LVL540>:
  414600:	f00d ff55 	bl	4224ae <.LFE95>

00414604 <.LVL541>:
  414604:	4604      	mov	r4, r0
  414606:	2800      	cmp	r0, #0
  414608:	d139      	bne.n	41467e <.LVL555>
  41460a:	ad93      	add	r5, sp, #588	; 0x24c
  41460c:	f50d 781b 	add.w	r8, sp, #620	; 0x26c
  414610:	46a9      	mov	r9, r5

00414612 <.LVL542>:
      M[i] = wc_ecc_new_point_h(heap);
  414612:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
  414614:	f00c fc96 	bl	420f44 <.LBE32>

00414618 <.LVL543>:
  414618:	f849 0f04 	str.w	r0, [r9, #4]!
      if (M[i] == NULL) {
  41461c:	2800      	cmp	r0, #0
  41461e:	d032      	beq.n	414686 <.LVL557+0x2>
  for (i = 0; i < M_POINTS; i++) {
  414620:	45c1      	cmp	r9, r8
  414622:	d1f6      	bne.n	414612 <.LVL542>
   tG = wc_ecc_new_point_h(heap);
  414624:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
  414626:	f00c fc8d 	bl	420f44 <.LBE32>

0041462a <.LVL545>:
   if (tG == NULL)
  41462a:	4606      	mov	r6, r0
  41462c:	2800      	cmp	r0, #0
  41462e:	f000 816e 	beq.w	41490e <.LVL651>

00414632 <.LVL546>:
       if (mp_cmp_d(&mu, 1) == MP_EQ) {
  414632:	2101      	movs	r1, #1
  414634:	a80a      	add	r0, sp, #40	; 0x28

00414636 <.LVL547>:
  414636:	f00d ff8d 	bl	422554 <.LFE81>

0041463a <.LVL548>:
  41463a:	2800      	cmp	r0, #0
  41463c:	d035      	beq.n	4146aa <.LVL562>
           err = mp_mulmod(G->x, &mu, modulus, tG->x);
  41463e:	4633      	mov	r3, r6
  414640:	9aa6      	ldr	r2, [sp, #664]	; 0x298
  414642:	a90a      	add	r1, sp, #40	; 0x28
  414644:	4638      	mov	r0, r7
  414646:	f00d ff91 	bl	42256c <.LFE79>

0041464a <.LVL549>:
           if (err == MP_OKAY)
  41464a:	4604      	mov	r4, r0
  41464c:	2800      	cmp	r0, #0
  41464e:	f040 8160 	bne.w	414912 <.LVL652>
               err = mp_mulmod(G->y, &mu, modulus, tG->y);
  414652:	f506 730a 	add.w	r3, r6, #552	; 0x228
  414656:	9aa6      	ldr	r2, [sp, #664]	; 0x298
  414658:	a90a      	add	r1, sp, #40	; 0x28
  41465a:	f507 700a 	add.w	r0, r7, #552	; 0x228

0041465e <.LVL550>:
  41465e:	f00d ff85 	bl	42256c <.LFE79>

00414662 <.LVL551>:
           if (err == MP_OKAY)
  414662:	4604      	mov	r4, r0
  414664:	2800      	cmp	r0, #0
  414666:	f040 8141 	bne.w	4148ec <.LVL642>
               err = mp_mulmod(G->z, &mu, modulus, tG->z);
  41466a:	f506 638a 	add.w	r3, r6, #1104	; 0x450
  41466e:	9aa6      	ldr	r2, [sp, #664]	; 0x298
  414670:	a90a      	add	r1, sp, #40	; 0x28
  414672:	f507 608a 	add.w	r0, r7, #1104	; 0x450

00414676 <.LVL552>:
  414676:	f00d ff79 	bl	42256c <.LFE79>

0041467a <.LVL553>:
  41467a:	4604      	mov	r4, r0

0041467c <.LVL554>:
  41467c:	e02e      	b.n	4146dc <.LVL568>

0041467e <.LVL555>:
       mp_clear(&mu);
  41467e:	a80a      	add	r0, sp, #40	; 0x28

00414680 <.LVL556>:
  414680:	f00d fea6 	bl	4223d0 <.LFE16>

00414684 <.LVL557>:
       return err;
  414684:	e7af      	b.n	4145e6 <.LVL536>
  414686:	4606      	mov	r6, r0
         mp_clear(&mu);
  414688:	a80a      	add	r0, sp, #40	; 0x28
  41468a:	f00d fea1 	bl	4223d0 <.LFE16>

0041468e <.LVL558>:
         err = MEMORY_E; goto exit;
  41468e:	f06f 047c 	mvn.w	r4, #124	; 0x7c

00414692 <.L262>:
   wc_ecc_del_point_h(tG, heap);
  414692:	99a8      	ldr	r1, [sp, #672]	; 0x2a0
  414694:	4630      	mov	r0, r6
  414696:	f007 ffe1 	bl	41c65c <.LFE22>

0041469a <.LVL560>:
       wc_ecc_del_point_h(M[i], heap);
  41469a:	99a8      	ldr	r1, [sp, #672]	; 0x2a0
  41469c:	f855 0f04 	ldr.w	r0, [r5, #4]!
  4146a0:	f007 ffdc 	bl	41c65c <.LFE22>

004146a4 <.LVL561>:
   for (i = 0; i < M_POINTS; i++) {
  4146a4:	4545      	cmp	r5, r8
  4146a6:	d1f8      	bne.n	41469a <.LVL560>
  4146a8:	e79d      	b.n	4145e6 <.LVL536>

004146aa <.LVL562>:
           err = mp_copy(G->x, tG->x);
  4146aa:	4631      	mov	r1, r6
  4146ac:	4638      	mov	r0, r7
  4146ae:	f00d fef4 	bl	42249a <.LFE85>

004146b2 <.LVL563>:
           if (err == MP_OKAY)
  4146b2:	4604      	mov	r4, r0
  4146b4:	2800      	cmp	r0, #0
  4146b6:	f040 812c 	bne.w	414912 <.LVL652>
               err = mp_copy(G->y, tG->y);
  4146ba:	f506 710a 	add.w	r1, r6, #552	; 0x228
  4146be:	f507 700a 	add.w	r0, r7, #552	; 0x228

004146c2 <.LVL564>:
  4146c2:	f00d feea 	bl	42249a <.LFE85>

004146c6 <.LVL565>:
           if (err == MP_OKAY)
  4146c6:	4604      	mov	r4, r0
  4146c8:	2800      	cmp	r0, #0
  4146ca:	f040 810f 	bne.w	4148ec <.LVL642>
               err = mp_copy(G->z, tG->z);
  4146ce:	f506 618a 	add.w	r1, r6, #1104	; 0x450
  4146d2:	f507 608a 	add.w	r0, r7, #1104	; 0x450

004146d6 <.LVL566>:
  4146d6:	f00d fee0 	bl	42249a <.LFE85>

004146da <.LVL567>:
  4146da:	4604      	mov	r4, r0

004146dc <.LVL568>:
   mp_clear(&mu);
  4146dc:	a80a      	add	r0, sp, #40	; 0x28

004146de <.LVL569>:
  4146de:	f00d fe77 	bl	4223d0 <.LFE16>

004146e2 <.LVL570>:
   if (err == MP_OKAY)
  4146e2:	2c00      	cmp	r4, #0
  4146e4:	f040 8118 	bne.w	414918 <.LVL653>
       err = ecc_projective_dbl_point(tG, M[0], a, modulus, mp);
  4146e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4146ea:	9300      	str	r3, [sp, #0]
  4146ec:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  4146ee:	9a02      	ldr	r2, [sp, #8]
  4146f0:	9994      	ldr	r1, [sp, #592]	; 0x250
  4146f2:	4630      	mov	r0, r6
  4146f4:	f001 fbd6 	bl	415ea4 <.LFE18>

004146f8 <.LVL571>:
  4146f8:	4604      	mov	r4, r0
   if (err == MP_OKAY)
  4146fa:	2c00      	cmp	r4, #0
  4146fc:	f040 80fb 	bne.w	4148f6 <.LVL646>
       err = ecc_projective_dbl_point(M[0], M[0], a, modulus, mp);
  414700:	9b09      	ldr	r3, [sp, #36]	; 0x24
  414702:	9300      	str	r3, [sp, #0]
  414704:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  414706:	9a02      	ldr	r2, [sp, #8]
  414708:	9994      	ldr	r1, [sp, #592]	; 0x250
  41470a:	4608      	mov	r0, r1
  41470c:	f001 fbca 	bl	415ea4 <.LFE18>

00414710 <.LVL573>:
  414710:	4604      	mov	r4, r0

00414712 <.LVL574>:
  414712:	e101      	b.n	414918 <.LVL653>

00414714 <.LVL575>:
       err = ecc_projective_dbl_point(M[0], M[0], a, modulus, mp);
  414714:	9b09      	ldr	r3, [sp, #36]	; 0x24
  414716:	9300      	str	r3, [sp, #0]
  414718:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  41471a:	9a02      	ldr	r2, [sp, #8]
  41471c:	9994      	ldr	r1, [sp, #592]	; 0x250
  41471e:	4608      	mov	r0, r1
  414720:	f001 fbc0 	bl	415ea4 <.LFE18>

00414724 <.LVL576>:
   if (err == MP_OKAY)
  414724:	4604      	mov	r4, r0
  414726:	2800      	cmp	r0, #0
  414728:	f040 80e5 	bne.w	4148f6 <.LVL646>
  41472c:	ac94      	add	r4, sp, #592	; 0x250
           err = ecc_projective_add_point(M[j-9], tG, M[j-M_POINTS], a,
  41472e:	9fa6      	ldr	r7, [sp, #664]	; 0x298

00414730 <.LVL577>:
  414730:	6820      	ldr	r0, [r4, #0]
  414732:	f854 2f04 	ldr.w	r2, [r4, #4]!
  414736:	9b09      	ldr	r3, [sp, #36]	; 0x24
  414738:	9301      	str	r3, [sp, #4]
  41473a:	9700      	str	r7, [sp, #0]
  41473c:	9b02      	ldr	r3, [sp, #8]
  41473e:	4631      	mov	r1, r6
  414740:	f7fc f824 	bl	41078c <.LFE14>

00414744 <.LVL578>:
           if (err != MP_OKAY) break;
  414744:	2800      	cmp	r0, #0
  414746:	f040 80d5 	bne.w	4148f4 <.LVL645>

0041474a <.LVL579>:
       for (j = 9; j < 16; j++) {
  41474a:	45a1      	cmp	r9, r4
  41474c:	d1f0      	bne.n	414730 <.LVL577>
  41474e:	4607      	mov	r7, r0

00414750 <.LVL580>:
       digidx = get_digit_count(k) - 1;
  414750:	9804      	ldr	r0, [sp, #16]
  414752:	f00d fec5 	bl	4224e0 <.LFE115>

00414756 <.LVL581>:
  414756:	1e43      	subs	r3, r0, #1
  414758:	9306      	str	r3, [sp, #24]

0041475a <.LVL582>:
       mode   = 0;
  41475a:	9705      	str	r7, [sp, #20]
       bitcpy = bitbuf = 0;
  41475c:	46bb      	mov	fp, r7
       bitcnt = 1;
  41475e:	2401      	movs	r4, #1
       buf    = 0;
  414760:	f04f 0a00 	mov.w	sl, #0
       first  = 1;
  414764:	46a1      	mov	r9, r4
                   err = mp_copy(M[bitbuf-M_POINTS]->y, R->y);
  414766:	9b03      	ldr	r3, [sp, #12]

00414768 <.LVL583>:
  414768:	f503 730a 	add.w	r3, r3, #552	; 0x228
  41476c:	9307      	str	r3, [sp, #28]
  41476e:	e008      	b.n	414782 <.LVL587>

00414770 <.LVL584>:
           i = (int)(buf >> (DIGIT_BIT - 1)) & 1;
  414770:	ea4f 73da 	mov.w	r3, sl, lsr #31

00414774 <.LVL585>:
           buf <<= 1;
  414774:	ea4f 0a4a 	mov.w	sl, sl, lsl #1

00414778 <.LVL586>:
           if (mode == 0 && i == 0)
  414778:	f083 0201 	eor.w	r2, r3, #1
  41477c:	9905      	ldr	r1, [sp, #20]
  41477e:	b989      	cbnz	r1, 4147a4 <.LVL593>
  414780:	b182      	cbz	r2, 4147a4 <.LVL593>

00414782 <.LVL587>:
           if (--bitcnt == 0) {
  414782:	3c01      	subs	r4, #1

00414784 <.LVL588>:
  414784:	d1f4      	bne.n	414770 <.LVL584>

00414786 <.LVL589>:
               if (digidx == -1) {
  414786:	9a06      	ldr	r2, [sp, #24]
  414788:	f1b2 3fff 	cmp.w	r2, #4294967295
  41478c:	f000 80d5 	beq.w	41493a <.LVL657>
               buf    = get_digit(k, digidx);
  414790:	4614      	mov	r4, r2
  414792:	4611      	mov	r1, r2
  414794:	9804      	ldr	r0, [sp, #16]
  414796:	f00d fb46 	bl	421e26 <.LFE49>

0041479a <.LVL590>:
  41479a:	4682      	mov	sl, r0

0041479c <.LVL591>:
               --digidx;
  41479c:	1e63      	subs	r3, r4, #1
  41479e:	9306      	str	r3, [sp, #24]

004147a0 <.LVL592>:
               bitcnt = (int) DIGIT_BIT;
  4147a0:	2420      	movs	r4, #32
  4147a2:	e7e5      	b.n	414770 <.LVL584>

004147a4 <.LVL593>:
           if (mode == 1 && i == 0) {
  4147a4:	9905      	ldr	r1, [sp, #20]
  4147a6:	2901      	cmp	r1, #1
  4147a8:	d100      	bne.n	4147ac <.LVL593+0x8>
  4147aa:	b95a      	cbnz	r2, 4147c4 <.LVL597>
           bitbuf |= (i << (WINSIZE - ++bitcpy));
  4147ac:	f10b 0b01 	add.w	fp, fp, #1
  4147b0:	f1cb 0204 	rsb	r2, fp, #4
  4147b4:	4093      	lsls	r3, r2

004147b6 <.LVL595>:
  4147b6:	431f      	orrs	r7, r3

004147b8 <.LVL596>:
           if (bitcpy == WINSIZE) {
  4147b8:	f1bb 0f04 	cmp.w	fp, #4
  4147bc:	d00f      	beq.n	4147de <.LVL603>
           mode = 2;
  4147be:	2302      	movs	r3, #2
  4147c0:	9305      	str	r3, [sp, #20]
  4147c2:	e7de      	b.n	414782 <.LVL587>

004147c4 <.LVL597>:
               err = ecc_projective_dbl_point(R, R, a, modulus, mp);
  4147c4:	9b09      	ldr	r3, [sp, #36]	; 0x24

004147c6 <.LVL598>:
  4147c6:	9300      	str	r3, [sp, #0]
  4147c8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  4147ca:	9a02      	ldr	r2, [sp, #8]

004147cc <.LVL599>:
  4147cc:	9803      	ldr	r0, [sp, #12]
  4147ce:	4601      	mov	r1, r0
  4147d0:	f001 fb68 	bl	415ea4 <.LFE18>

004147d4 <.LVL600>:
               if (err != MP_OKAY) break;
  4147d4:	4603      	mov	r3, r0
  4147d6:	2800      	cmp	r0, #0
  4147d8:	d0d3      	beq.n	414782 <.LVL587>

004147da <.LVL601>:
         err = MEMORY_E; goto exit;
  4147da:	461c      	mov	r4, r3

004147dc <.LVL602>:
  4147dc:	e759      	b.n	414692 <.L262>

004147de <.LVL603>:
               if (first == 1) {
  4147de:	f1b9 0f01 	cmp.w	r9, #1
  4147e2:	d026      	beq.n	414832 <.LVL612>
  4147e4:	f04f 0904 	mov.w	r9, #4

004147e8 <.LVL604>:
                       err = ecc_projective_dbl_point(R, R, a, modulus, mp);
  4147e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4147ea:	9300      	str	r3, [sp, #0]
  4147ec:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  4147ee:	9a02      	ldr	r2, [sp, #8]
  4147f0:	9803      	ldr	r0, [sp, #12]
  4147f2:	4601      	mov	r1, r0
  4147f4:	f001 fb56 	bl	415ea4 <.LFE18>

004147f8 <.LVL605>:
                       if (err != MP_OKAY) break;
  4147f8:	2800      	cmp	r0, #0
  4147fa:	d17e      	bne.n	4148fa <.LVL647>

004147fc <.LVL606>:
                   for (j = 0; j < WINSIZE; j++) {
  4147fc:	f1b9 0901 	subs.w	r9, r9, #1

00414800 <.LVL607>:
  414800:	d1f2      	bne.n	4147e8 <.LVL604>
                   err = ecc_projective_add_point(R, M[bitbuf-M_POINTS], R, a,
  414802:	ab9c      	add	r3, sp, #624	; 0x270
  414804:	eb03 0787 	add.w	r7, r3, r7, lsl #2

00414808 <.LVL608>:
  414808:	f857 1c40 	ldr.w	r1, [r7, #-64]
  41480c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41480e:	9301      	str	r3, [sp, #4]
  414810:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  414812:	9300      	str	r3, [sp, #0]
  414814:	9b02      	ldr	r3, [sp, #8]
  414816:	9803      	ldr	r0, [sp, #12]
  414818:	4602      	mov	r2, r0
  41481a:	f7fb ffb7 	bl	41078c <.LFE14>

0041481e <.LVL609>:
  41481e:	4681      	mov	r9, r0

00414820 <.LVL610>:
               if (err != MP_OKAY) break;
  414820:	f1b9 0f00 	cmp.w	r9, #0
  414824:	f040 809f 	bne.w	414966 <.LVL662>
               bitcpy = bitbuf = 0;
  414828:	46cb      	mov	fp, r9

0041482a <.LVL611>:
  41482a:	464f      	mov	r7, r9
               mode = 1;
  41482c:	2301      	movs	r3, #1
  41482e:	9305      	str	r3, [sp, #20]
  414830:	e7a7      	b.n	414782 <.LVL587>

00414832 <.LVL612>:
                   err = mp_copy(M[bitbuf-M_POINTS]->x, R->x);
  414832:	ab9c      	add	r3, sp, #624	; 0x270
  414834:	eb03 0787 	add.w	r7, r3, r7, lsl #2

00414838 <.LVL613>:
  414838:	f857 7c40 	ldr.w	r7, [r7, #-64]
  41483c:	f8dd 900c 	ldr.w	r9, [sp, #12]

00414840 <.LVL614>:
  414840:	4649      	mov	r1, r9
  414842:	4638      	mov	r0, r7
  414844:	f00d fe29 	bl	42249a <.LFE85>

00414848 <.LVL615>:
                   if (err != MP_OKAY) break;
  414848:	4603      	mov	r3, r0
  41484a:	2800      	cmp	r0, #0
  41484c:	d1c5      	bne.n	4147da <.LVL601>
                   err = mp_copy(M[bitbuf-M_POINTS]->y, R->y);
  41484e:	9907      	ldr	r1, [sp, #28]
  414850:	f507 700a 	add.w	r0, r7, #552	; 0x228

00414854 <.LVL616>:
  414854:	f00d fe21 	bl	42249a <.LFE85>

00414858 <.LVL617>:
                   if (err != MP_OKAY) break;
  414858:	4603      	mov	r3, r0
  41485a:	2800      	cmp	r0, #0
  41485c:	d1bd      	bne.n	4147da <.LVL601>
                   err = mp_copy(M[bitbuf-M_POINTS]->z, R->z);
  41485e:	f509 618a 	add.w	r1, r9, #1104	; 0x450
  414862:	f507 608a 	add.w	r0, r7, #1104	; 0x450

00414866 <.LVL618>:
  414866:	f00d fe18 	bl	42249a <.LFE85>

0041486a <.LVL619>:
  41486a:	4681      	mov	r9, r0

0041486c <.LVL620>:
  41486c:	e7d8      	b.n	414820 <.LVL610>

0041486e <.LVL621>:
                   err = ecc_projective_dbl_point(R, R, a, modulus, mp);
  41486e:	9b09      	ldr	r3, [sp, #36]	; 0x24

00414870 <.LVL622>:
  414870:	9300      	str	r3, [sp, #0]
  414872:	4623      	mov	r3, r4
  414874:	9a02      	ldr	r2, [sp, #8]
  414876:	4649      	mov	r1, r9
  414878:	4648      	mov	r0, r9
  41487a:	f001 fb13 	bl	415ea4 <.LFE18>

0041487e <.LVL623>:
                   if (err != MP_OKAY) break;
  41487e:	2800      	cmp	r0, #0
  414880:	d13d      	bne.n	4148fe <.LVL649>

00414882 <.LVL624>:
               bitbuf <<= 1;
  414882:	007f      	lsls	r7, r7, #1

00414884 <.LVL625>:
               if ((bitbuf & (1 << WINSIZE)) != 0) {
  414884:	f017 0310 	ands.w	r3, r7, #16

00414888 <.LVL626>:
  414888:	d00a      	beq.n	4148a0 <.LVL629>
                       err = ecc_projective_add_point(R, tG, R, a, modulus,
  41488a:	9b09      	ldr	r3, [sp, #36]	; 0x24

0041488c <.LVL627>:
  41488c:	9301      	str	r3, [sp, #4]
  41488e:	9400      	str	r4, [sp, #0]
  414890:	9b02      	ldr	r3, [sp, #8]
  414892:	464a      	mov	r2, r9
  414894:	4631      	mov	r1, r6
  414896:	4648      	mov	r0, r9
  414898:	f7fb ff78 	bl	41078c <.LFE14>

0041489c <.LVL628>:
                       if (err != MP_OKAY) break;
  41489c:	4603      	mov	r3, r0
  41489e:	bba0      	cbnz	r0, 41490a <.LVL650>

004148a0 <.LVL629>:
           for (j = 0; j < bitcpy; j++) {
  4148a0:	f10a 0a01 	add.w	sl, sl, #1
  4148a4:	45d3      	cmp	fp, sl
  4148a6:	d019      	beq.n	4148dc <.LVL638>
               if (first == 0) {
  4148a8:	2b00      	cmp	r3, #0
  4148aa:	d0e0      	beq.n	41486e <.LVL621>
               bitbuf <<= 1;
  4148ac:	007f      	lsls	r7, r7, #1
               if ((bitbuf & (1 << WINSIZE)) != 0) {
  4148ae:	f017 0f10 	tst.w	r7, #16
  4148b2:	d0f5      	beq.n	4148a0 <.LVL629>
                       err = mp_copy(tG->x, R->x);
  4148b4:	4649      	mov	r1, r9
  4148b6:	4630      	mov	r0, r6
  4148b8:	f00d fdef 	bl	42249a <.LFE85>

004148bc <.LVL633>:
                       if (err != MP_OKAY) break;
  4148bc:	bb08      	cbnz	r0, 414902 <.LVL649+0x4>
                       err = mp_copy(tG->y, R->y);
  4148be:	9904      	ldr	r1, [sp, #16]
  4148c0:	9805      	ldr	r0, [sp, #20]

004148c2 <.LVL634>:
  4148c2:	f00d fdea 	bl	42249a <.LFE85>

004148c6 <.LVL635>:
                       if (err != MP_OKAY) break;
  4148c6:	b9f0      	cbnz	r0, 414906 <.LVL649+0x8>
                       err = mp_copy(tG->z, R->z);
  4148c8:	9906      	ldr	r1, [sp, #24]
  4148ca:	f506 608a 	add.w	r0, r6, #1104	; 0x450

004148ce <.LVL636>:
  4148ce:	f00d fde4 	bl	42249a <.LFE85>

004148d2 <.LVL637>:
                       if (err != MP_OKAY) break;
  4148d2:	4603      	mov	r3, r0
  4148d4:	2800      	cmp	r0, #0
  4148d6:	d0e3      	beq.n	4148a0 <.LVL629>
                       err = mp_copy(tG->z, R->z);
  4148d8:	4604      	mov	r4, r0
  4148da:	e6da      	b.n	414692 <.L262>

004148dc <.LVL638>:
  4148dc:	9c07      	ldr	r4, [sp, #28]
  4148de:	e01e      	b.n	41491e <.LVL654>

004148e0 <.LVL639>:
       return ECC_BAD_ARG_E;
  4148e0:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
  4148e4:	e67f      	b.n	4145e6 <.LVL536>

004148e6 <.LVL640>:
  4148e6:	f06f 04a9 	mvn.w	r4, #169	; 0xa9

004148ea <.LVL641>:
  4148ea:	e67c      	b.n	4145e6 <.LVL536>

004148ec <.LVL642>:
   mp_clear(&mu);
  4148ec:	a80a      	add	r0, sp, #40	; 0x28

004148ee <.LVL643>:
  4148ee:	f00d fd6f 	bl	4223d0 <.LFE16>

004148f2 <.LVL644>:
  4148f2:	e702      	b.n	4146fa <.LVL571+0x2>

004148f4 <.LVL645>:
           err = ecc_projective_add_point(M[j-9], tG, M[j-M_POINTS], a,
  4148f4:	4604      	mov	r4, r0

004148f6 <.LVL646>:
   if (err == MP_OKAY) {
  4148f6:	b194      	cbz	r4, 41491e <.LVL654>
  4148f8:	e6cb      	b.n	414692 <.L262>

004148fa <.LVL647>:
                       err = ecc_projective_dbl_point(R, R, a, modulus, mp);
  4148fa:	4604      	mov	r4, r0

004148fc <.LVL648>:
  4148fc:	e6c9      	b.n	414692 <.L262>

004148fe <.LVL649>:
                   err = ecc_projective_dbl_point(R, R, a, modulus, mp);
  4148fe:	4604      	mov	r4, r0
  414900:	e6c7      	b.n	414692 <.L262>
                       err = mp_copy(tG->x, R->x);
  414902:	4604      	mov	r4, r0
  414904:	e6c5      	b.n	414692 <.L262>
                       err = mp_copy(tG->y, R->y);
  414906:	4604      	mov	r4, r0
  414908:	e6c3      	b.n	414692 <.L262>

0041490a <.LVL650>:
                       err = ecc_projective_add_point(R, tG, R, a, modulus,
  41490a:	4604      	mov	r4, r0
  41490c:	e6c1      	b.n	414692 <.L262>

0041490e <.LVL651>:
       err = MEMORY_E;
  41490e:	f06f 047c 	mvn.w	r4, #124	; 0x7c

00414912 <.LVL652>:
   mp_clear(&mu);
  414912:	a80a      	add	r0, sp, #40	; 0x28
  414914:	f00d fd5c 	bl	4223d0 <.LFE16>

00414918 <.LVL653>:
   if (err == MP_OKAY)
  414918:	2c00      	cmp	r4, #0
  41491a:	f43f aefb 	beq.w	414714 <.LVL575>

0041491e <.LVL654>:
   if (err == MP_OKAY && map)
  41491e:	2c00      	cmp	r4, #0
  414920:	f47f aeb7 	bne.w	414692 <.L262>
  414924:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
  414926:	2b00      	cmp	r3, #0
  414928:	f43f aeb3 	beq.w	414692 <.L262>
       err = ecc_map(R, modulus, mp);
  41492c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  41492e:	99a6      	ldr	r1, [sp, #664]	; 0x298
  414930:	9803      	ldr	r0, [sp, #12]
  414932:	f006 f9f1 	bl	41ad18 <.LFE21>

00414936 <.LVL655>:
  414936:	4604      	mov	r4, r0

00414938 <.LVL656>:
  414938:	e6ab      	b.n	414692 <.L262>

0041493a <.LVL657>:
       if (mode == 2 && bitcpy > 0) {
  41493a:	9b05      	ldr	r3, [sp, #20]
  41493c:	2b02      	cmp	r3, #2
  41493e:	d1ee      	bne.n	41491e <.LVL654>

00414940 <.LVL658>:
           for (j = 0; j < bitcpy; j++) {
  414940:	f1bb 0f00 	cmp.w	fp, #0
  414944:	ddeb      	ble.n	41491e <.LVL654>
  414946:	46a2      	mov	sl, r4
                       err = mp_copy(tG->y, R->y);
  414948:	9903      	ldr	r1, [sp, #12]
  41494a:	f501 730a 	add.w	r3, r1, #552	; 0x228
  41494e:	9304      	str	r3, [sp, #16]

00414950 <.LVL659>:
  414950:	f506 730a 	add.w	r3, r6, #552	; 0x228
  414954:	9305      	str	r3, [sp, #20]

00414956 <.LVL660>:
                       err = mp_copy(tG->z, R->z);
  414956:	f501 638a 	add.w	r3, r1, #1104	; 0x450
  41495a:	9306      	str	r3, [sp, #24]
  41495c:	464b      	mov	r3, r9
  41495e:	9407      	str	r4, [sp, #28]
  414960:	9ca6      	ldr	r4, [sp, #664]	; 0x298
  414962:	4689      	mov	r9, r1

00414964 <.LVL661>:
  414964:	e7a0      	b.n	4148a8 <.LVL629+0x8>

00414966 <.LVL662>:
  414966:	464b      	mov	r3, r9
  414968:	e737      	b.n	4147da <.LVL601>

Disassembly of section .text.inflate_table%65:

0041496c <inflate_table>:
unsigned short FAR *lens;
unsigned codes;
code FAR * FAR *table;
unsigned FAR *bits;
unsigned short FAR *work;
{
  41496c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00414970 <.LCFI0>:
  414970:	b09f      	sub	sp, #124	; 0x7c

00414972 <.LCFI1>:
  414972:	9106      	str	r1, [sp, #24]
  414974:	9929      	ldr	r1, [sp, #164]	; 0xa4

00414976 <.LVL1>:
  414976:	f10d 0456 	add.w	r4, sp, #86	; 0x56
  41497a:	f10d 0676 	add.w	r6, sp, #118	; 0x76
       decoding tables.
     */

    /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
    for (len = 0; len <= MAXBITS; len++)
        count[len] = 0;
  41497e:	2500      	movs	r5, #0

00414980 <.LVL2>:
  414980:	f824 5f02 	strh.w	r5, [r4, #2]!
    for (len = 0; len <= MAXBITS; len++)
  414984:	42b4      	cmp	r4, r6
  414986:	d1fb      	bne.n	414980 <.LVL2>

00414988 <.LVL3>:
    for (sym = 0; sym < codes; sym++)
  414988:	b17a      	cbz	r2, 4149aa <.LVL5>
  41498a:	9c06      	ldr	r4, [sp, #24]
  41498c:	4626      	mov	r6, r4
  41498e:	eb04 0742 	add.w	r7, r4, r2, lsl #1

00414992 <.LVL4>:
        count[lens[sym]]++;
  414992:	f836 4b02 	ldrh.w	r4, [r6], #2
  414996:	ad1e      	add	r5, sp, #120	; 0x78
  414998:	eb05 0444 	add.w	r4, r5, r4, lsl #1
  41499c:	f834 5c20 	ldrh.w	r5, [r4, #-32]
  4149a0:	3501      	adds	r5, #1
  4149a2:	f824 5c20 	strh.w	r5, [r4, #-32]
    for (sym = 0; sym < codes; sym++)
  4149a6:	42be      	cmp	r6, r7
  4149a8:	d1f3      	bne.n	414992 <.LVL4>

004149aa <.LVL5>:

    /* bound code lengths, force root to be within code lengths */
    root = *bits;
    for (max = MAXBITS; max >= 1; max--)
        if (count[max] != 0) break;
  4149aa:	f8bd 4076 	ldrh.w	r4, [sp, #118]	; 0x76
  4149ae:	2c00      	cmp	r4, #0
  4149b0:	f040 81ad 	bne.w	414d0e <.LVL104>
  4149b4:	ac1d      	add	r4, sp, #116	; 0x74
    for (max = MAXBITS; max >= 1; max--)
  4149b6:	f04f 0c0e 	mov.w	ip, #14

004149ba <.LVL6>:
        if (count[max] != 0) break;
  4149ba:	f834 5902 	ldrh.w	r5, [r4], #-2
  4149be:	2d00      	cmp	r5, #0
  4149c0:	f040 8119 	bne.w	414bf6 <.LVL73>

004149c4 <.LVL7>:
    for (max = MAXBITS; max >= 1; max--)
  4149c4:	f1bc 0c01 	subs.w	ip, ip, #1

004149c8 <.LVL8>:
  4149c8:	d1f7      	bne.n	4149ba <.LVL6>

004149ca <.LVL9>:
    if (root > max) root = max;
    if (max == 0) {                     /* no symbols to code at all */
        here.op = (unsigned char)64;    /* invalid code marker */
        here.bits = (unsigned char)1;
        here.val = (unsigned short)0;
        *(*table)++ = here;             /* make a table to force an error */
  4149ca:	681a      	ldr	r2, [r3, #0]

004149cc <.LVL10>:
  4149cc:	1d11      	adds	r1, r2, #4
  4149ce:	6019      	str	r1, [r3, #0]
  4149d0:	2440      	movs	r4, #64	; 0x40
  4149d2:	7014      	strb	r4, [r2, #0]
  4149d4:	2101      	movs	r1, #1
  4149d6:	7051      	strb	r1, [r2, #1]
  4149d8:	2000      	movs	r0, #0

004149da <.LVL11>:
  4149da:	8050      	strh	r0, [r2, #2]
        *(*table)++ = here;
  4149dc:	681a      	ldr	r2, [r3, #0]
  4149de:	1d15      	adds	r5, r2, #4
  4149e0:	601d      	str	r5, [r3, #0]
  4149e2:	7014      	strb	r4, [r2, #0]
  4149e4:	7051      	strb	r1, [r2, #1]
  4149e6:	8050      	strh	r0, [r2, #2]
        *bits = 1;
  4149e8:	9b28      	ldr	r3, [sp, #160]	; 0xa0

004149ea <.LVL12>:
  4149ea:	6019      	str	r1, [r3, #0]

004149ec <.LVL13>:

    /* set return parameters */
    *table += used;
    *bits = root;
    return 0;
}
  4149ec:	b01f      	add	sp, #124	; 0x7c

004149ee <.LCFI2>:
  4149ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004149f2 <.LCFI3>:
        left -= count[len];
  4149f2:	f8bd 405a 	ldrh.w	r4, [sp, #90]	; 0x5a

004149f6 <.LVL15>:
        if (left < 0) return -1;        /* over-subscribed */
  4149f6:	f1d4 0402 	rsbs	r4, r4, #2

004149fa <.LVL16>:
  4149fa:	d502      	bpl.n	414a02 <.LVL18>
  4149fc:	f04f 30ff 	mov.w	r0, #4294967295

00414a00 <.LVL17>:
  414a00:	e7f4      	b.n	4149ec <.LVL13>

00414a02 <.LVL18>:
  414a02:	2e01      	cmp	r6, #1
  414a04:	bf38      	it	cc
  414a06:	2601      	movcc	r6, #1

00414a08 <.LVL19>:
  414a08:	9603      	str	r6, [sp, #12]
  414a0a:	f04f 0801 	mov.w	r8, #1
  414a0e:	e111      	b.n	414c34 <.LVL79>

00414a10 <.LVL20>:
    for (sym = 0; sym < codes; sym++)
  414a10:	3601      	adds	r6, #1
  414a12:	4295      	cmp	r5, r2
  414a14:	f000 8153 	beq.w	414cbe <.LVL96>
        if (lens[sym] != 0) work[offs[lens[sym]]++] = (unsigned short)sym;
  414a18:	f835 4b02 	ldrh.w	r4, [r5], #2
  414a1c:	2c00      	cmp	r4, #0
  414a1e:	d0f7      	beq.n	414a10 <.LVL20>
  414a20:	af1e      	add	r7, sp, #120	; 0x78
  414a22:	eb07 0444 	add.w	r4, r7, r4, lsl #1
  414a26:	f834 7c40 	ldrh.w	r7, [r4, #-64]
  414a2a:	f107 0e01 	add.w	lr, r7, #1
  414a2e:	f824 ec40 	strh.w	lr, [r4, #-64]
  414a32:	f821 6017 	strh.w	r6, [r1, r7, lsl #1]
  414a36:	e7eb      	b.n	414a10 <.LVL20>

00414a38 <.LVL23>:
    mask = used - 1;            /* mask for comparing low */
  414a38:	9c04      	ldr	r4, [sp, #16]
  414a3a:	1e62      	subs	r2, r4, #1
  414a3c:	9208      	str	r2, [sp, #32]

00414a3e <.LVL24>:
        (type == DISTS && used >= ENOUGH_DISTS))
  414a3e:	2802      	cmp	r0, #2
  414a40:	bf14      	ite	ne
  414a42:	2200      	movne	r2, #0

00414a44 <.LVL25>:
  414a44:	2201      	moveq	r2, #1
  414a46:	4610      	mov	r0, r2

00414a48 <.LVL26>:
  414a48:	920d      	str	r2, [sp, #52]	; 0x34
    if ((type == LENS && used >= ENOUGH_LENS) ||
  414a4a:	f5b4 7f14 	cmp.w	r4, #592	; 0x250
  414a4e:	f0c0 812b 	bcc.w	414ca8 <.LVL95>
  414a52:	2800      	cmp	r0, #0
  414a54:	f000 8128 	beq.w	414ca8 <.LVL95>
        return 1;
  414a58:	2001      	movs	r0, #1
  414a5a:	e7c7      	b.n	4149ec <.LVL13>

00414a5c <.LVL27>:
  414a5c:	9207      	str	r2, [sp, #28]

00414a5e <.LVL28>:
  414a5e:	e091      	b.n	414b84 <.LVL57>

00414a60 <.LVL29>:
            here.op = (unsigned char)0;
  414a60:	2300      	movs	r3, #0
  414a62:	9302      	str	r3, [sp, #8]

00414a64 <.LVL30>:
        incr = 1U << (len - drop);
  414a64:	eba8 000a 	sub.w	r0, r8, sl
  414a68:	fa0b f100 	lsl.w	r1, fp, r0

00414a6c <.LVL31>:
        fill = 1U << curr;
  414a6c:	fa0b f206 	lsl.w	r2, fp, r6

00414a70 <.LVL32>:
  414a70:	f06f 0303 	mvn.w	r3, #3
  414a74:	fa03 f000 	lsl.w	r0, r3, r0
            next[(huff >> drop) + fill] = here;
  414a78:	fa24 f30a 	lsr.w	r3, r4, sl
  414a7c:	4413      	add	r3, r2
  414a7e:	1a5b      	subs	r3, r3, r1
  414a80:	9f01      	ldr	r7, [sp, #4]
  414a82:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  414a86:	9f02      	ldr	r7, [sp, #8]

00414a88 <.LVL33>:
  414a88:	701f      	strb	r7, [r3, #0]
  414a8a:	f883 e001 	strb.w	lr, [r3, #1]
  414a8e:	805d      	strh	r5, [r3, #2]
  414a90:	4403      	add	r3, r0
        } while (fill != 0);
  414a92:	1a52      	subs	r2, r2, r1

00414a94 <.LVL34>:
  414a94:	d1f8      	bne.n	414a88 <.LVL33>
        incr = 1U << (len - 1);
  414a96:	f108 31ff 	add.w	r1, r8, #4294967295

00414a9a <.LVL35>:
  414a9a:	fa0b f101 	lsl.w	r1, fp, r1

00414a9e <.LVL36>:
        while (huff & incr)
  414a9e:	420c      	tst	r4, r1
  414aa0:	d002      	beq.n	414aa8 <.LVL36+0xa>
            incr >>= 1;
  414aa2:	0849      	lsrs	r1, r1, #1
        while (huff & incr)
  414aa4:	420c      	tst	r4, r1
  414aa6:	d1fc      	bne.n	414aa2 <.LVL36+0x4>
        if (incr != 0) {
  414aa8:	b111      	cbz	r1, 414ab0 <.LVL39>
            huff &= incr - 1;
  414aaa:	1e4b      	subs	r3, r1, #1
  414aac:	401c      	ands	r4, r3
            huff += incr;
  414aae:	4421      	add	r1, r4

00414ab0 <.LVL39>:
        if (--(count[len]) == 0) {
  414ab0:	ab1e      	add	r3, sp, #120	; 0x78
  414ab2:	eb03 0248 	add.w	r2, r3, r8, lsl #1

00414ab6 <.LVL40>:
  414ab6:	f832 3c20 	ldrh.w	r3, [r2, #-32]
  414aba:	3b01      	subs	r3, #1
  414abc:	b29b      	uxth	r3, r3
  414abe:	f822 3c20 	strh.w	r3, [r2, #-32]
  414ac2:	b933      	cbnz	r3, 414ad2 <.LVL40+0x1c>
            if (len == max) break;
  414ac4:	45e0      	cmp	r8, ip
  414ac6:	d075      	beq.n	414bb4 <.LVL63>
            len = lens[work[sym]];
  414ac8:	f8b9 3000 	ldrh.w	r3, [r9]
  414acc:	9a06      	ldr	r2, [sp, #24]
  414ace:	f832 8013 	ldrh.w	r8, [r2, r3, lsl #1]
        if (len > root && (huff & mask) != low) {
  414ad2:	9803      	ldr	r0, [sp, #12]
  414ad4:	4580      	cmp	r8, r0
  414ad6:	d955      	bls.n	414b84 <.LVL57>
  414ad8:	9b08      	ldr	r3, [sp, #32]
  414ada:	ea01 0203 	and.w	r2, r1, r3
  414ade:	9b07      	ldr	r3, [sp, #28]
  414ae0:	4293      	cmp	r3, r2
  414ae2:	d0bb      	beq.n	414a5c <.LVL27>
            if (drop == 0)
  414ae4:	f1ba 0f00 	cmp.w	sl, #0
  414ae8:	bf08      	it	eq
  414aea:	4682      	moveq	sl, r0
            next += min;            /* here min is 1 << curr */
  414aec:	2304      	movs	r3, #4
  414aee:	fa03 f606 	lsl.w	r6, r3, r6

00414af2 <.LVL43>:
  414af2:	9b01      	ldr	r3, [sp, #4]
  414af4:	4433      	add	r3, r6
  414af6:	9301      	str	r3, [sp, #4]

00414af8 <.LVL44>:
            curr = len - drop;
  414af8:	eba8 060a 	sub.w	r6, r8, sl

00414afc <.LVL45>:
            left = (int)(1 << curr);
  414afc:	fa0b f306 	lsl.w	r3, fp, r6

00414b00 <.LVL46>:
            while (curr + drop < max) {
  414b00:	45e0      	cmp	r8, ip
  414b02:	d219      	bcs.n	414b38 <.LVL46+0x38>
                left -= count[curr + drop];
  414b04:	a81e      	add	r0, sp, #120	; 0x78
  414b06:	eb00 0048 	add.w	r0, r0, r8, lsl #1
  414b0a:	f830 0c20 	ldrh.w	r0, [r0, #-32]
  414b0e:	1a1b      	subs	r3, r3, r0
                if (left <= 0) break;
  414b10:	2b00      	cmp	r3, #0
  414b12:	dd11      	ble.n	414b38 <.LVL46+0x38>
  414b14:	f10a 0401 	add.w	r4, sl, #1
  414b18:	4434      	add	r4, r6
  414b1a:	a816      	add	r0, sp, #88	; 0x58
  414b1c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  414b20:	3c02      	subs	r4, #2
                curr++;
  414b22:	3601      	adds	r6, #1
                left <<= 1;
  414b24:	005b      	lsls	r3, r3, #1
            while (curr + drop < max) {
  414b26:	eb0a 0006 	add.w	r0, sl, r6
  414b2a:	4584      	cmp	ip, r0
  414b2c:	d904      	bls.n	414b38 <.LVL46+0x38>
                left -= count[curr + drop];
  414b2e:	f834 0f02 	ldrh.w	r0, [r4, #2]!
  414b32:	1a1b      	subs	r3, r3, r0
                if (left <= 0) break;
  414b34:	2b00      	cmp	r3, #0
  414b36:	dcf4      	bgt.n	414b22 <.LVL46+0x22>
            used += 1U << curr;
  414b38:	fa0b f306 	lsl.w	r3, fp, r6

00414b3c <.LVL51>:
  414b3c:	9804      	ldr	r0, [sp, #16]
  414b3e:	4418      	add	r0, r3
  414b40:	4603      	mov	r3, r0
  414b42:	9004      	str	r0, [sp, #16]

00414b44 <.LVL52>:
            if ((type == LENS && used >= ENOUGH_LENS) ||
  414b44:	f240 3053 	movw	r0, #851	; 0x353

00414b48 <.LVL53>:
  414b48:	4283      	cmp	r3, r0
  414b4a:	d902      	bls.n	414b52 <.LVL54+0x4>
  414b4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30

00414b4e <.LVL54>:
  414b4e:	2b00      	cmp	r3, #0
  414b50:	d14d      	bne.n	414bee <.LVL71>
  414b52:	9b04      	ldr	r3, [sp, #16]
  414b54:	f240 204f 	movw	r0, #591	; 0x24f
  414b58:	4283      	cmp	r3, r0
  414b5a:	d902      	bls.n	414b62 <.LVL55>
  414b5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  414b5e:	2b00      	cmp	r3, #0
  414b60:	d147      	bne.n	414bf2 <.LVL71+0x4>

00414b62 <.LVL55>:
            (*table)[low].op = (unsigned char)curr;
  414b62:	0090      	lsls	r0, r2, #2
  414b64:	9d09      	ldr	r5, [sp, #36]	; 0x24

00414b66 <.LVL56>:
  414b66:	682b      	ldr	r3, [r5, #0]
  414b68:	f803 6022 	strb.w	r6, [r3, r2, lsl #2]
            (*table)[low].bits = (unsigned char)root;
  414b6c:	682b      	ldr	r3, [r5, #0]
  414b6e:	4403      	add	r3, r0
  414b70:	f89d 400c 	ldrb.w	r4, [sp, #12]
  414b74:	705c      	strb	r4, [r3, #1]
            (*table)[low].val = (unsigned short)(next - *table);
  414b76:	682b      	ldr	r3, [r5, #0]
  414b78:	4418      	add	r0, r3
  414b7a:	9c01      	ldr	r4, [sp, #4]
  414b7c:	1ae3      	subs	r3, r4, r3
  414b7e:	109b      	asrs	r3, r3, #2
  414b80:	8043      	strh	r3, [r0, #2]
            low = huff & mask;
  414b82:	9207      	str	r2, [sp, #28]

00414b84 <.LVL57>:
  414b84:	460c      	mov	r4, r1

00414b86 <.LVL58>:
        here.bits = (unsigned char)(len - drop);
  414b86:	eba8 0e0a 	sub.w	lr, r8, sl
  414b8a:	fa5f fe8e 	uxtb.w	lr, lr

00414b8e <.LVL59>:
        if ((int)(work[sym]) < end) {
  414b8e:	f839 5b02 	ldrh.w	r5, [r9], #2
  414b92:	9a05      	ldr	r2, [sp, #20]
  414b94:	42aa      	cmp	r2, r5
  414b96:	f73f af63 	bgt.w	414a60 <.LVL29>
        else if ((int)(work[sym]) > end) {
  414b9a:	da07      	bge.n	414bac <.LVL62>
            here.op = (unsigned char)(extra[work[sym]]);
  414b9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  414b9e:	f813 3015 	ldrb.w	r3, [r3, r5, lsl #1]
  414ba2:	9302      	str	r3, [sp, #8]

00414ba4 <.LVL60>:
            here.val = base[work[sym]];
  414ba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  414ba6:	f833 5015 	ldrh.w	r5, [r3, r5, lsl #1]

00414baa <.LVL61>:
  414baa:	e75b      	b.n	414a64 <.LVL30>

00414bac <.LVL62>:
            here.val = 0;
  414bac:	2500      	movs	r5, #0
            here.op = (unsigned char)(32 + 64);         /* end of block */
  414bae:	2360      	movs	r3, #96	; 0x60
  414bb0:	9302      	str	r3, [sp, #8]
  414bb2:	e757      	b.n	414a64 <.LVL30>

00414bb4 <.LVL63>:
  414bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    if (huff != 0) {
  414bb6:	b149      	cbz	r1, 414bcc <.LVL66>

00414bb8 <.LVL64>:
        next[huff] = here;
  414bb8:	9c01      	ldr	r4, [sp, #4]
  414bba:	eb04 0281 	add.w	r2, r4, r1, lsl #2
  414bbe:	2040      	movs	r0, #64	; 0x40
  414bc0:	f804 0021 	strb.w	r0, [r4, r1, lsl #2]
  414bc4:	f882 e001 	strb.w	lr, [r2, #1]
  414bc8:	2100      	movs	r1, #0

00414bca <.LVL65>:
  414bca:	8051      	strh	r1, [r2, #2]

00414bcc <.LVL66>:
    *table += used;
  414bcc:	681a      	ldr	r2, [r3, #0]
  414bce:	9904      	ldr	r1, [sp, #16]
  414bd0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  414bd4:	601a      	str	r2, [r3, #0]
    *bits = root;
  414bd6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  414bd8:	461a      	mov	r2, r3
  414bda:	9b03      	ldr	r3, [sp, #12]
  414bdc:	6013      	str	r3, [r2, #0]
    return 0;
  414bde:	2000      	movs	r0, #0
  414be0:	e704      	b.n	4149ec <.LVL13>

00414be2 <.LVL67>:
        if (left < 0) return -1;        /* over-subscribed */
  414be2:	f04f 30ff 	mov.w	r0, #4294967295

00414be6 <.LVL68>:
  414be6:	e701      	b.n	4149ec <.LVL13>

00414be8 <.LVL69>:
        return -1;                      /* incomplete set */
  414be8:	f04f 30ff 	mov.w	r0, #4294967295

00414bec <.LVL70>:
  414bec:	e6fe      	b.n	4149ec <.LVL13>

00414bee <.LVL71>:
                return 1;
  414bee:	2001      	movs	r0, #1
  414bf0:	e6fc      	b.n	4149ec <.LVL13>
  414bf2:	2001      	movs	r0, #1

00414bf4 <.LVL72>:
  414bf4:	e6fa      	b.n	4149ec <.LVL13>

00414bf6 <.LVL73>:
    root = *bits;
  414bf6:	9c28      	ldr	r4, [sp, #160]	; 0xa0
  414bf8:	6826      	ldr	r6, [r4, #0]
  414bfa:	4566      	cmp	r6, ip
  414bfc:	bf28      	it	cs
  414bfe:	4666      	movcs	r6, ip

00414c00 <.LVL74>:
    for (min = 1; min < max; min++)
  414c00:	f1bc 0f01 	cmp.w	ip, #1
  414c04:	f67f aef5 	bls.w	4149f2 <.LCFI3>

00414c08 <.LVL75>:
        if (count[min] != 0) break;
  414c08:	f8bd 405a 	ldrh.w	r4, [sp, #90]	; 0x5a
  414c0c:	2c00      	cmp	r4, #0
  414c0e:	f47f aef0 	bne.w	4149f2 <.LCFI3>
  414c12:	ac17      	add	r4, sp, #92	; 0x5c
  414c14:	f04f 0801 	mov.w	r8, #1

00414c18 <.LVL76>:
    for (min = 1; min < max; min++)
  414c18:	f108 0801 	add.w	r8, r8, #1
  414c1c:	45e0      	cmp	r8, ip
  414c1e:	d003      	beq.n	414c28 <.LVL76+0x10>
        if (count[min] != 0) break;
  414c20:	f834 5b02 	ldrh.w	r5, [r4], #2
  414c24:	2d00      	cmp	r5, #0
  414c26:	d0f7      	beq.n	414c18 <.LVL76>
  414c28:	4634      	mov	r4, r6
  414c2a:	4546      	cmp	r6, r8
  414c2c:	bf38      	it	cc
  414c2e:	4644      	movcc	r4, r8
  414c30:	9403      	str	r4, [sp, #12]

00414c32 <.LVL78>:
        left -= count[len];
  414c32:	2402      	movs	r4, #2

00414c34 <.LVL79>:
  414c34:	ad17      	add	r5, sp, #92	; 0x5c
  414c36:	af1e      	add	r7, sp, #120	; 0x78

00414c38 <.LVL80>:
  414c38:	f835 6b02 	ldrh.w	r6, [r5], #2

00414c3c <.LVL81>:
        if (left < 0) return -1;        /* over-subscribed */
  414c3c:	ebd6 0444 	rsbs	r4, r6, r4, lsl #1

00414c40 <.LVL82>:
  414c40:	d4cf      	bmi.n	414be2 <.LVL67>
    for (len = 1; len <= MAXBITS; len++) {
  414c42:	42bd      	cmp	r5, r7
  414c44:	d1f8      	bne.n	414c38 <.LVL80>
    if (left > 0 && (type == CODES || max != 1))
  414c46:	2c00      	cmp	r4, #0
  414c48:	dd04      	ble.n	414c54 <.LVL82+0x14>
  414c4a:	2800      	cmp	r0, #0
  414c4c:	d0cc      	beq.n	414be8 <.LVL69>
  414c4e:	f1bc 0f01 	cmp.w	ip, #1
  414c52:	d1c9      	bne.n	414be8 <.LVL69>
    offs[1] = 0;
  414c54:	ad1e      	add	r5, sp, #120	; 0x78
  414c56:	2400      	movs	r4, #0

00414c58 <.LVL83>:
  414c58:	f825 4d3e 	strh.w	r4, [r5, #-62]!

00414c5c <.LVL84>:
  414c5c:	f10d 065a 	add.w	r6, sp, #90	; 0x5a
  414c60:	f10d 0756 	add.w	r7, sp, #86	; 0x56

00414c64 <.LVL85>:
        offs[len + 1] = offs[len] + count[len];
  414c64:	882c      	ldrh	r4, [r5, #0]
  414c66:	f836 eb02 	ldrh.w	lr, [r6], #2
  414c6a:	4474      	add	r4, lr
  414c6c:	f825 4f02 	strh.w	r4, [r5, #2]!
    for (len = 1; len < MAXBITS; len++)
  414c70:	42bd      	cmp	r5, r7
  414c72:	d1f7      	bne.n	414c64 <.LVL85>

00414c74 <.LVL86>:
    for (sym = 0; sym < codes; sym++)
  414c74:	b31a      	cbz	r2, 414cbe <.LVL96>
  414c76:	9c06      	ldr	r4, [sp, #24]
  414c78:	4625      	mov	r5, r4
  414c7a:	eb04 0242 	add.w	r2, r4, r2, lsl #1

00414c7e <.LVL87>:
  414c7e:	2600      	movs	r6, #0
  414c80:	e6ca      	b.n	414a18 <.LVL20+0x8>

00414c82 <.LVL88>:
    next = *table;              /* current table to fill in */
  414c82:	681a      	ldr	r2, [r3, #0]
  414c84:	9201      	str	r2, [sp, #4]

00414c86 <.LVL89>:
    used = 1U << root;          /* use root table entries */
  414c86:	2201      	movs	r2, #1

00414c88 <.LVL90>:
  414c88:	9c03      	ldr	r4, [sp, #12]
  414c8a:	40a2      	lsls	r2, r4
  414c8c:	9204      	str	r2, [sp, #16]

00414c8e <.LVL91>:
    mask = used - 1;            /* mask for comparing low */
  414c8e:	3a01      	subs	r2, #1

00414c90 <.LVL92>:
  414c90:	9208      	str	r2, [sp, #32]

00414c92 <.LVL93>:
        (type == DISTS && used >= ENOUGH_DISTS))
  414c92:	2802      	cmp	r0, #2
  414c94:	bf14      	ite	ne
  414c96:	2200      	movne	r2, #0

00414c98 <.LVL94>:
  414c98:	2201      	moveq	r2, #1
  414c9a:	920d      	str	r2, [sp, #52]	; 0x34
        base = extra = work;    /* dummy value--not used */
  414c9c:	910b      	str	r1, [sp, #44]	; 0x2c
  414c9e:	910a      	str	r1, [sp, #40]	; 0x28
    if ((type == LENS && used >= ENOUGH_LENS) ||
  414ca0:	2200      	movs	r2, #0
  414ca2:	920c      	str	r2, [sp, #48]	; 0x30
        end = 19;
  414ca4:	2213      	movs	r2, #19
  414ca6:	9205      	str	r2, [sp, #20]

00414ca8 <.LVL95>:
  414ca8:	9e03      	ldr	r6, [sp, #12]
  414caa:	f04f 32ff 	mov.w	r2, #4294967295
  414cae:	9207      	str	r2, [sp, #28]
  414cb0:	2400      	movs	r4, #0
  414cb2:	46a2      	mov	sl, r4
        incr = 1U << (len - drop);
  414cb4:	f04f 0b01 	mov.w	fp, #1
  414cb8:	4689      	mov	r9, r1
  414cba:	9309      	str	r3, [sp, #36]	; 0x24
  414cbc:	e763      	b.n	414b86 <.LVL58>

00414cbe <.LVL96>:
    switch (type) {
  414cbe:	2800      	cmp	r0, #0
  414cc0:	d0df      	beq.n	414c82 <.LVL88>
  414cc2:	2801      	cmp	r0, #1
        end = -1;
  414cc4:	bf0c      	ite	eq
  414cc6:	f44f 7280 	moveq.w	r2, #256	; 0x100
  414cca:	f04f 32ff 	movne.w	r2, #4294967295
  414cce:	9205      	str	r2, [sp, #20]
  414cd0:	4a13      	ldr	r2, [pc, #76]	; (414d20 <.LVL105+0x8>)
  414cd2:	4c14      	ldr	r4, [pc, #80]	; (414d24 <.LVL105+0xc>)
  414cd4:	bf08      	it	eq
  414cd6:	4622      	moveq	r2, r4
  414cd8:	920b      	str	r2, [sp, #44]	; 0x2c
  414cda:	4a13      	ldr	r2, [pc, #76]	; (414d28 <.LVL105+0x10>)
  414cdc:	4c13      	ldr	r4, [pc, #76]	; (414d2c <.LVL105+0x14>)
  414cde:	bf08      	it	eq
  414ce0:	4622      	moveq	r2, r4
  414ce2:	920a      	str	r2, [sp, #40]	; 0x28

00414ce4 <.LVL97>:
    next = *table;              /* current table to fill in */
  414ce4:	681a      	ldr	r2, [r3, #0]

00414ce6 <.LVL98>:
  414ce6:	9201      	str	r2, [sp, #4]

00414ce8 <.LVL99>:
    used = 1U << root;          /* use root table entries */
  414ce8:	2201      	movs	r2, #1

00414cea <.LVL100>:
  414cea:	9c03      	ldr	r4, [sp, #12]
  414cec:	40a2      	lsls	r2, r4
  414cee:	9204      	str	r2, [sp, #16]

00414cf0 <.LVL101>:
    if ((type == LENS && used >= ENOUGH_LENS) ||
  414cf0:	2801      	cmp	r0, #1
  414cf2:	bf14      	ite	ne
  414cf4:	2400      	movne	r4, #0
  414cf6:	2401      	moveq	r4, #1
  414cf8:	940c      	str	r4, [sp, #48]	; 0x30
  414cfa:	f5b2 7f55 	cmp.w	r2, #852	; 0x354
  414cfe:	f4ff ae9b 	bcc.w	414a38 <.LVL23>
  414d02:	9a0c      	ldr	r2, [sp, #48]	; 0x30

00414d04 <.LVL102>:
  414d04:	2a00      	cmp	r2, #0
  414d06:	f43f ae97 	beq.w	414a38 <.LVL23>
        return 1;
  414d0a:	2001      	movs	r0, #1

00414d0c <.LVL103>:
  414d0c:	e66e      	b.n	4149ec <.LVL13>

00414d0e <.LVL104>:
    root = *bits;
  414d0e:	9c28      	ldr	r4, [sp, #160]	; 0xa0
  414d10:	6826      	ldr	r6, [r4, #0]
  414d12:	2e0f      	cmp	r6, #15
  414d14:	bf28      	it	cs
  414d16:	260f      	movcs	r6, #15

00414d18 <.LVL105>:
    for (max = MAXBITS; max >= 1; max--)
  414d18:	f04f 0c0f 	mov.w	ip, #15
  414d1c:	e774      	b.n	414c08 <.LVL75>
  414d1e:	bf00      	nop
  414d20:	00421004 	.word	0x00421004
  414d24:	00420e82 	.word	0x00420e82
  414d28:	00420fc4 	.word	0x00420fc4
  414d2c:	00420e42 	.word	0x00420e42

Disassembly of section .text.RsaPublicEncryptEx%66:

00414d30 <RsaPublicEncryptEx>:
{
  414d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00414d34 <.LCFI50>:
  414d34:	b0ab      	sub	sp, #172	; 0xac

00414d36 <.LCFI51>:
  414d36:	9c34      	ldr	r4, [sp, #208]	; 0xd0
  414d38:	f89d a0d8 	ldrb.w	sl, [sp, #216]	; 0xd8
  414d3c:	f89d b0e0 	ldrb.w	fp, [sp, #224]	; 0xe0
    if (in == NULL || inLen == 0 || out == NULL || key == NULL) {
  414d40:	2800      	cmp	r0, #0
  414d42:	f000 81a8 	beq.w	415096 <.LVL369>
  414d46:	2900      	cmp	r1, #0
  414d48:	f000 81a5 	beq.w	415096 <.LVL369>
  414d4c:	fab2 f882 	clz	r8, r2
  414d50:	ea4f 1858 	mov.w	r8, r8, lsr #5
  414d54:	2c00      	cmp	r4, #0
  414d56:	f000 81a1 	beq.w	41509c <.LVL369+0x6>
  414d5a:	f1b8 0f00 	cmp.w	r8, #0
  414d5e:	f040 819d 	bne.w	41509c <.LVL369+0x6>
  414d62:	9005      	str	r0, [sp, #20]
  414d64:	461f      	mov	r7, r3
  414d66:	4691      	mov	r9, r2
  414d68:	460d      	mov	r5, r1
    sz = wc_RsaEncryptSize(key);
  414d6a:	4620      	mov	r0, r4

00414d6c <.LVL293>:
  414d6c:	f00d fa96 	bl	42229c <wc_RsaEncryptSize>

00414d70 <.LVL294>:
  414d70:	4606      	mov	r6, r0

00414d72 <.LVL295>:
    if (sz > (int)outLen) {
  414d72:	42b8      	cmp	r0, r7
  414d74:	f300 8195 	bgt.w	4150a2 <.LVL370>
    if (sz < RSA_MIN_PAD_SZ) {
  414d78:	280a      	cmp	r0, #10
  414d7a:	f340 8195 	ble.w	4150a8 <.LVL370+0x6>
    if (inLen > (word32)(sz - RSA_MIN_PAD_SZ)) {
  414d7e:	f1a0 030b 	sub.w	r3, r0, #11
  414d82:	429d      	cmp	r5, r3
  414d84:	f200 8193 	bhi.w	4150ae <.LVL370+0xc>
    switch (key->state) {
  414d88:	f241 134c 	movw	r3, #4428	; 0x114c
  414d8c:	58e3      	ldr	r3, [r4, r3]
  414d8e:	2b03      	cmp	r3, #3
  414d90:	f200 817e 	bhi.w	415090 <.LVL368>
  414d94:	e8df f003 	tbb	[pc, r3]
  414d98:	31180202 	.word	0x31180202
        key->state = RSA_STATE_ENCRYPT_PAD;
  414d9c:	2201      	movs	r2, #1
  414d9e:	f241 134c 	movw	r3, #4428	; 0x114c
  414da2:	50e2      	str	r2, [r4, r3]
        ret = wc_RsaPad_ex(in, inLen, out, sz, pad_value, rng, pad_type, hash,
  414da4:	9006      	str	r0, [sp, #24]
  414da6:	4620      	mov	r0, r4

00414da8 <.LVL296>:
  414da8:	f00d fbec 	bl	422584 <.LFE80>

00414dac <.LBB94>:
    switch (padType)
  414dac:	9b37      	ldr	r3, [sp, #220]	; 0xdc
  414dae:	b3b3      	cbz	r3, 414e1e <.LBB112>
  414db0:	2b01      	cmp	r3, #1
  414db2:	f000 8081 	beq.w	414eb8 <.LBB102>
            ret = RSA_PAD_E;
  414db6:	f06f 08c8 	mvn.w	r8, #200	; 0xc8

00414dba <.LBE94>:
        if (ret < 0) {
  414dba:	f1b8 0f00 	cmp.w	r8, #0
  414dbe:	db20      	blt.n	414e02 <.LVL301>
        key->state = RSA_STATE_ENCRYPT_EXPTMOD;
  414dc0:	2202      	movs	r2, #2
  414dc2:	f241 134c 	movw	r3, #4428	; 0x114c
  414dc6:	50e2      	str	r2, [r4, r3]
        key->dataLen = outLen;
  414dc8:	f241 1350 	movw	r3, #4432	; 0x1150
  414dcc:	50e7      	str	r7, [r4, r3]
        ret = wc_RsaFunction(out, sz, out, &key->dataLen, rsa_type, key, rng);
  414dce:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
  414dd0:	9202      	str	r2, [sp, #8]
  414dd2:	9401      	str	r4, [sp, #4]
  414dd4:	9a35      	ldr	r2, [sp, #212]	; 0xd4
  414dd6:	9200      	str	r2, [sp, #0]
  414dd8:	4423      	add	r3, r4
  414dda:	464a      	mov	r2, r9
  414ddc:	4631      	mov	r1, r6
  414dde:	4648      	mov	r0, r9
  414de0:	f00b fc33 	bl	42064a <.LFE2>

00414de4 <.LVL299>:
        if (ret >= 0 || ret == WC_PENDING_E) {
  414de4:	f1b0 0800 	subs.w	r8, r0, #0
  414de8:	f280 814d 	bge.w	415086 <.LBE107>
  414dec:	f118 0f6c 	cmn.w	r8, #108	; 0x6c
  414df0:	f000 8149 	beq.w	415086 <.LBE107>
        if (ret < 0) {
  414df4:	f1b8 0f00 	cmp.w	r8, #0
  414df8:	db03      	blt.n	414e02 <.LVL301>

00414dfa <.LVL300>:
        ret = key->dataLen;
  414dfa:	f241 1350 	movw	r3, #4432	; 0x1150
  414dfe:	f854 8003 	ldr.w	r8, [r4, r3]

00414e02 <.LVL301>:
    if (ret == WC_PENDING_E) {
  414e02:	f118 0f6c 	cmn.w	r8, #108	; 0x6c
  414e06:	d006      	beq.n	414e16 <.LVL303>
    key->state = RSA_STATE_NONE;
  414e08:	2200      	movs	r2, #0
  414e0a:	f241 134c 	movw	r3, #4428	; 0x114c
  414e0e:	50e2      	str	r2, [r4, r3]
    wc_RsaCleanup(key);
  414e10:	4620      	mov	r0, r4
  414e12:	f00b f943 	bl	42009c <.LFE42>

00414e16 <.LVL303>:
}
  414e16:	4640      	mov	r0, r8
  414e18:	b02b      	add	sp, #172	; 0xac

00414e1a <.LCFI52>:
  414e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00414e1e <.LBB112>:
    if (input == NULL || inputLen == 0 || pkcsBlock == NULL ||
  414e1e:	2e00      	cmp	r6, #0
  414e20:	f000 8148 	beq.w	4150b4 <.LBB108>
  414e24:	f1b8 0f00 	cmp.w	r8, #0
  414e28:	f040 8144 	bne.w	4150b4 <.LBB108>
    pkcsBlock[0] = 0x0;       /* set first byte to zero and advance */
  414e2c:	2300      	movs	r3, #0

00414e2e <.LVL305>:
  414e2e:	f889 3000 	strb.w	r3, [r9]

00414e32 <.LVL306>:
    pkcsBlock++; pkcsBlockLen--;
  414e32:	f106 3bff 	add.w	fp, r6, #4294967295

00414e36 <.LVL307>:
    pkcsBlock[0] = padValue;  /* insert padValue */
  414e36:	f889 a001 	strb.w	sl, [r9, #1]
    if (padValue == RSA_BLOCK_TYPE_1) {
  414e3a:	f1ba 0f01 	cmp.w	sl, #1
  414e3e:	d019      	beq.n	414e74 <.LBE98>

00414e40 <.LBB98>:
        if (pkcsBlockLen < inputLen + 1) {
  414e40:	1c6b      	adds	r3, r5, #1
  414e42:	459b      	cmp	fp, r3
  414e44:	f0c0 813c 	bcc.w	4150c0 <.LBB100>
        padLen = pkcsBlockLen - inputLen - 1;
  414e48:	ea6f 0a05 	mvn.w	sl, r5

00414e4c <.LVL308>:
  414e4c:	44da      	add	sl, fp

00414e4e <.LVL309>:
        ret = CRYPT_RNG_BlockGenerate((CRYPT_RNG_CTX*)rng, &pkcsBlock[1], padLen);
  414e4e:	4652      	mov	r2, sl
  414e50:	f109 0102 	add.w	r1, r9, #2
  414e54:	983c      	ldr	r0, [sp, #240]	; 0xf0
  414e56:	f00d f8f5 	bl	422044 <.LFE17>

00414e5a <.LVL310>:
        if (ret != 0) {
  414e5a:	4680      	mov	r8, r0
  414e5c:	2800      	cmp	r0, #0
  414e5e:	d1ac      	bne.n	414dba <.LBE94>

00414e60 <.LVL311>:
        for (i = 1; i < padLen; i++) {
  414e60:	f1ba 0f01 	cmp.w	sl, #1
  414e64:	d912      	bls.n	414e8c <.LVL315>
  414e66:	f109 0302 	add.w	r3, r9, #2
  414e6a:	f10a 0a01 	add.w	sl, sl, #1

00414e6e <.LVL312>:
  414e6e:	44ca      	add	sl, r9

00414e70 <.LVL313>:
            if (pkcsBlock[i] == 0) pkcsBlock[i] = 0x01;
  414e70:	2101      	movs	r1, #1
  414e72:	e01c      	b.n	414eae <.LBB99+0x4>

00414e74 <.LBE98>:
        if (pkcsBlockLen < inputLen + 2) {
  414e74:	1cab      	adds	r3, r5, #2
  414e76:	459b      	cmp	fp, r3
  414e78:	f0c0 811f 	bcc.w	4150ba <.LVL372>
        XMEMSET(&pkcsBlock[1], 0xFF, pkcsBlockLen - inputLen - 2);
  414e7c:	ebab 0205 	sub.w	r2, fp, r5
  414e80:	3a02      	subs	r2, #2
  414e82:	21ff      	movs	r1, #255	; 0xff
  414e84:	f109 0002 	add.w	r0, r9, #2
  414e88:	f009 fb46 	bl	41e518 <.LFE14>

00414e8c <.LVL315>:
    pkcsBlock[pkcsBlockLen-inputLen-1] = 0;     /* separator */
  414e8c:	ebab 0b05 	sub.w	fp, fp, r5

00414e90 <.LVL316>:
  414e90:	2300      	movs	r3, #0
  414e92:	f809 300b 	strb.w	r3, [r9, fp]
    XMEMCPY(pkcsBlock+pkcsBlockLen-inputLen, input, inputLen);
  414e96:	f10b 0b01 	add.w	fp, fp, #1
  414e9a:	462a      	mov	r2, r5
  414e9c:	9905      	ldr	r1, [sp, #20]
  414e9e:	eb09 000b 	add.w	r0, r9, fp
  414ea2:	f005 fd6f 	bl	41a984 <.LFE14>

00414ea6 <.LVL317>:
  414ea6:	e78b      	b.n	414dc0 <.LBE94+0x6>

00414ea8 <.LVL318>:
  414ea8:	3301      	adds	r3, #1

00414eaa <.LBB99>:
        for (i = 1; i < padLen; i++) {
  414eaa:	459a      	cmp	sl, r3
  414eac:	d0ee      	beq.n	414e8c <.LVL315>
            if (pkcsBlock[i] == 0) pkcsBlock[i] = 0x01;
  414eae:	781a      	ldrb	r2, [r3, #0]
  414eb0:	2a00      	cmp	r2, #0
  414eb2:	d1f9      	bne.n	414ea8 <.LVL318>
  414eb4:	7019      	strb	r1, [r3, #0]
  414eb6:	e7f7      	b.n	414ea8 <.LVL318>

00414eb8 <.LBB102>:
    if (optLabel == NULL && labelLen > 0) {
  414eb8:	9b3a      	ldr	r3, [sp, #232]	; 0xe8

00414eba <.LVL320>:
  414eba:	b91b      	cbnz	r3, 414ec4 <.LBE102>
  414ebc:	9b3b      	ldr	r3, [sp, #236]	; 0xec
  414ebe:	2b00      	cmp	r3, #0
  414ec0:	f040 80cc 	bne.w	41505c <.LBE105>

00414ec4 <.LBE102>:
        ret = wc_RsaPad_ex(in, inLen, out, sz, pad_value, rng, pad_type, hash,
  414ec4:	f504 538a 	add.w	r3, r4, #4416	; 0x1140
  414ec8:	681b      	ldr	r3, [r3, #0]
  414eca:	9308      	str	r3, [sp, #32]

00414ecc <.LBB107>:
    hLen = wc_HashGetDigestSize(hType);
  414ecc:	4658      	mov	r0, fp
  414ece:	f00c faf1 	bl	4214b4 <wc_HashGetDigestSize>

00414ed2 <.LVL321>:
    if (hLen < 0) {
  414ed2:	1e03      	subs	r3, r0, #0
  414ed4:	9307      	str	r3, [sp, #28]
  414ed6:	f2c0 80c4 	blt.w	415062 <.LVL361>
        if ((word32)hLen > sizeof(lHash)) {
  414eda:	2b40      	cmp	r3, #64	; 0x40
  414edc:	f200 80c4 	bhi.w	415068 <.LVL361+0x6>
    if ((ret = wc_Hash(hType, optLabel, labelLen, lHash, hLen)) != 0) {
  414ee0:	9300      	str	r3, [sp, #0]
  414ee2:	ab0a      	add	r3, sp, #40	; 0x28
  414ee4:	9a3b      	ldr	r2, [sp, #236]	; 0xec
  414ee6:	993a      	ldr	r1, [sp, #232]	; 0xe8
  414ee8:	4658      	mov	r0, fp

00414eea <.LVL322>:
  414eea:	f009 fa78 	bl	41e3de <.LFE24>

00414eee <.LVL323>:
  414eee:	4680      	mov	r8, r0
  414ef0:	2800      	cmp	r0, #0
  414ef2:	f47f af62 	bne.w	414dba <.LBE94>
    if ((word32)(2 * hLen + 2) > pkcsBlockLen) {
  414ef6:	9b07      	ldr	r3, [sp, #28]
  414ef8:	3301      	adds	r3, #1
  414efa:	9309      	str	r3, [sp, #36]	; 0x24
  414efc:	005b      	lsls	r3, r3, #1
  414efe:	429e      	cmp	r6, r3
  414f00:	f0c0 80b5 	bcc.w	41506e <.LVL362>
    if (inputLen > (pkcsBlockLen - 2 * hLen - 2)) {
  414f04:	f1a3 0802 	sub.w	r8, r3, #2
  414f08:	1af3      	subs	r3, r6, r3
  414f0a:	429d      	cmp	r5, r3
  414f0c:	f200 80b2 	bhi.w	415074 <.LVL362+0x6>
    idx = pkcsBlockLen - 1 - inputLen;
  414f10:	1b70      	subs	r0, r6, r5

00414f12 <.LVL324>:
  414f12:	f100 3bff 	add.w	fp, r0, #4294967295

00414f16 <.LVL325>:
  414f16:	f1a0 0a02 	sub.w	sl, r0, #2

00414f1a <.LVL326>:
    psLen = pkcsBlockLen - inputLen - 2 * hLen - 2;
  414f1a:	ebaa 0808 	sub.w	r8, sl, r8

00414f1e <.LVL327>:
    if (pkcsBlockLen < inputLen) { /*make sure not writing over end of buffer */
  414f1e:	42b5      	cmp	r5, r6
  414f20:	f200 80ab 	bhi.w	41507a <.LVL363>
    XMEMCPY(pkcsBlock + (pkcsBlockLen - inputLen), input, inputLen);
  414f24:	462a      	mov	r2, r5
  414f26:	9905      	ldr	r1, [sp, #20]
  414f28:	4448      	add	r0, r9
  414f2a:	f005 fd2b 	bl	41a984 <.LFE14>

00414f2e <.LVL328>:
    pkcsBlock[idx--] = 0x01; /* PS and M separator */
  414f2e:	eb09 030b 	add.w	r3, r9, fp
  414f32:	2201      	movs	r2, #1
  414f34:	f809 200b 	strb.w	r2, [r9, fp]
    while (psLen > 0 && idx > 0) {
  414f38:	f1b8 0f00 	cmp.w	r8, #0
  414f3c:	dd0f      	ble.n	414f5e <.LVL332>
  414f3e:	f1ba 0f00 	cmp.w	sl, #0
  414f42:	d00c      	beq.n	414f5e <.LVL332>
        pkcsBlock[idx--] = 0x00;
  414f44:	2200      	movs	r2, #0
  414f46:	4651      	mov	r1, sl

00414f48 <.LVL329>:
  414f48:	3901      	subs	r1, #1
  414f4a:	f803 2d01 	strb.w	r2, [r3, #-1]!
        psLen--;
  414f4e:	f108 38ff 	add.w	r8, r8, #4294967295
    while (psLen > 0 && idx > 0) {
  414f52:	f1b8 0f00 	cmp.w	r8, #0
  414f56:	dd7b      	ble.n	415050 <.LVL356>
  414f58:	2900      	cmp	r1, #0
  414f5a:	d1f5      	bne.n	414f48 <.LVL329>
  414f5c:	468a      	mov	sl, r1

00414f5e <.LVL332>:
    idx = idx - hLen + 1;
  414f5e:	9d07      	ldr	r5, [sp, #28]

00414f60 <.LVL333>:
  414f60:	f1c5 0001 	rsb	r0, r5, #1
  414f64:	4450      	add	r0, sl
    XMEMCPY(pkcsBlock + idx, lHash, hLen);
  414f66:	462a      	mov	r2, r5
  414f68:	a90a      	add	r1, sp, #40	; 0x28
  414f6a:	4448      	add	r0, r9
  414f6c:	f005 fd0a 	bl	41a984 <.LFE14>

00414f70 <.LVL334>:
    if ((ret = CRYPT_RNG_BlockGenerate((CRYPT_RNG_CTX*)rng, seed, hLen)) != 0) {    
  414f70:	462a      	mov	r2, r5
  414f72:	a91a      	add	r1, sp, #104	; 0x68
  414f74:	983c      	ldr	r0, [sp, #240]	; 0xf0
  414f76:	f00d f865 	bl	422044 <.LFE17>

00414f7a <.LVL335>:
  414f7a:	4680      	mov	r8, r0

00414f7c <.LVL336>:
  414f7c:	2800      	cmp	r0, #0
  414f7e:	f47f af1c 	bne.w	414dba <.LBE94>
    dbMask = (byte*)XMALLOC(pkcsBlockLen - hLen - 1, heap, DYNAMIC_TYPE_RSA);
  414f82:	1e73      	subs	r3, r6, #1
  414f84:	9d07      	ldr	r5, [sp, #28]
  414f86:	eba3 0b05 	sub.w	fp, r3, r5
  414f8a:	4658      	mov	r0, fp

00414f8c <.LVL337>:
  414f8c:	f00d f872 	bl	422074 <.LFE26>

00414f90 <.LVL338>:
    if (dbMask == NULL) {
  414f90:	4682      	mov	sl, r0

00414f92 <.LVL339>:
  414f92:	2800      	cmp	r0, #0
  414f94:	d074      	beq.n	415080 <.LVL365>
    XMEMSET(dbMask, 0, pkcsBlockLen - hLen - 1); /* help static analyzer */
  414f96:	465a      	mov	r2, fp
  414f98:	2100      	movs	r1, #0
  414f9a:	f009 fabd 	bl	41e518 <.LFE14>

00414f9e <.LVL340>:
    ret = RsaMGF(mgf, seed, hLen, dbMask, pkcsBlockLen - hLen - 1, heap);
  414f9e:	9b08      	ldr	r3, [sp, #32]
  414fa0:	9301      	str	r3, [sp, #4]
  414fa2:	f8cd b000 	str.w	fp, [sp]
  414fa6:	4653      	mov	r3, sl
  414fa8:	462a      	mov	r2, r5
  414faa:	a91a      	add	r1, sp, #104	; 0x68
  414fac:	9839      	ldr	r0, [sp, #228]	; 0xe4
  414fae:	f00a fdbc 	bl	41fb2a <.LBE177>

00414fb2 <.LVL341>:
    if (ret != 0) {
  414fb2:	4680      	mov	r8, r0
  414fb4:	2800      	cmp	r0, #0
  414fb6:	d14d      	bne.n	415054 <.LBB105>

00414fb8 <.LVL342>:
    idx = hLen + 1;
  414fb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  414fba:	4615      	mov	r5, r2

00414fbc <.LVL343>:
    while (idx < pkcsBlockLen && (word32)i < (pkcsBlockLen - hLen -1)) {
  414fbc:	4296      	cmp	r6, r2
  414fbe:	d917      	bls.n	414ff0 <.LBB104>
  414fc0:	f1bb 0f00 	cmp.w	fp, #0
  414fc4:	d014      	beq.n	414ff0 <.LBB104>
  414fc6:	4650      	mov	r0, sl

00414fc8 <.LVL344>:
  414fc8:	9b07      	ldr	r3, [sp, #28]
  414fca:	eb09 0103 	add.w	r1, r9, r3
  414fce:	eb0a 0e0b 	add.w	lr, sl, fp
  414fd2:	f8dd c018 	ldr.w	ip, [sp, #24]

00414fd6 <.LVL345>:
        pkcsBlock[idx] = dbMask[i++] ^ pkcsBlock[idx];
  414fd6:	f810 3b01 	ldrb.w	r3, [r0], #1
  414fda:	f891 8001 	ldrb.w	r8, [r1, #1]
  414fde:	ea83 0308 	eor.w	r3, r3, r8
  414fe2:	f801 3f01 	strb.w	r3, [r1, #1]!
        idx++;
  414fe6:	3201      	adds	r2, #1
    while (idx < pkcsBlockLen && (word32)i < (pkcsBlockLen - hLen -1)) {
  414fe8:	4594      	cmp	ip, r2
  414fea:	d901      	bls.n	414ff0 <.LBB104>
  414fec:	4570      	cmp	r0, lr
  414fee:	d1f2      	bne.n	414fd6 <.LVL345>

00414ff0 <.LBB104>:
    XFREE(dbMask, heap, DYNAMIC_TYPE_RSA);
  414ff0:	4650      	mov	r0, sl
  414ff2:	f00d f84b 	bl	42208c <.LFE2>

00414ff6 <.LBE104>:
    pkcsBlock[idx++] = 0x00;
  414ff6:	464b      	mov	r3, r9
  414ff8:	2200      	movs	r2, #0
  414ffa:	f803 2b01 	strb.w	r2, [r3], #1
    if ((ret = RsaMGF(mgf, pkcsBlock + hLen + 1, pkcsBlockLen - hLen - 1,
  414ffe:	9a07      	ldr	r2, [sp, #28]
  415000:	1c51      	adds	r1, r2, #1
  415002:	9808      	ldr	r0, [sp, #32]
  415004:	9001      	str	r0, [sp, #4]
  415006:	9200      	str	r2, [sp, #0]
  415008:	465a      	mov	r2, fp
  41500a:	4449      	add	r1, r9
  41500c:	9839      	ldr	r0, [sp, #228]	; 0xe4
  41500e:	f00a fd8c 	bl	41fb2a <.LBE177>

00415012 <.LVL349>:
  415012:	4680      	mov	r8, r0
  415014:	2800      	cmp	r0, #0
  415016:	f47f aed0 	bne.w	414dba <.LBE94>

0041501a <.LVL350>:
    while (idx < (word32)(hLen + 1) && i < hLen) {
  41501a:	9a07      	ldr	r2, [sp, #28]
  41501c:	2a00      	cmp	r2, #0
  41501e:	f77f aecc 	ble.w	414dba <.LBE94>
  415022:	9b09      	ldr	r3, [sp, #36]	; 0x24
  415024:	2b01      	cmp	r3, #1
  415026:	f67f aec8 	bls.w	414dba <.LBE94>
  41502a:	4648      	mov	r0, r9

0041502c <.LVL351>:
  41502c:	f10d 0e67 	add.w	lr, sp, #103	; 0x67
  415030:	4641      	mov	r1, r8
  415032:	4694      	mov	ip, r2

00415034 <.LVL352>:
        pkcsBlock[idx] = pkcsBlock[idx] ^ seed[i++];
  415034:	3101      	adds	r1, #1

00415036 <.LVL353>:
  415036:	7843      	ldrb	r3, [r0, #1]
  415038:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  41503c:	4053      	eors	r3, r2
  41503e:	f800 3f01 	strb.w	r3, [r0, #1]!

00415042 <.LVL354>:
    while (idx < (word32)(hLen + 1) && i < hLen) {
  415042:	1c4b      	adds	r3, r1, #1

00415044 <.LVL355>:
  415044:	429d      	cmp	r5, r3
  415046:	f67f aeb8 	bls.w	414dba <.LBE94>
  41504a:	458c      	cmp	ip, r1
  41504c:	dcf2      	bgt.n	415034 <.LVL352>
  41504e:	e6b4      	b.n	414dba <.LBE94>

00415050 <.LVL356>:
  415050:	468a      	mov	sl, r1
  415052:	e784      	b.n	414f5e <.LVL332>

00415054 <.LBB105>:
        XFREE(dbMask, heap, DYNAMIC_TYPE_RSA);
  415054:	4650      	mov	r0, sl

00415056 <.LVL358>:
  415056:	f00d f819 	bl	42208c <.LFE2>

0041505a <.LVL359>:
  41505a:	e6ae      	b.n	414dba <.LBE94>

0041505c <.LBE105>:
        return BUFFER_E;
  41505c:	f06f 0883 	mvn.w	r8, #131	; 0x83
  415060:	e6ab      	b.n	414dba <.LBE94>

00415062 <.LVL361>:
        return hLen;
  415062:	f8dd 801c 	ldr.w	r8, [sp, #28]
  415066:	e6a8      	b.n	414dba <.LBE94>
            return MEMORY_E;
  415068:	f06f 087c 	mvn.w	r8, #124	; 0x7c
  41506c:	e6a5      	b.n	414dba <.LBE94>

0041506e <.LVL362>:
        return BAD_FUNC_ARG;
  41506e:	f06f 08ac 	mvn.w	r8, #172	; 0xac
  415072:	e6a2      	b.n	414dba <.LBE94>
        return BAD_FUNC_ARG;
  415074:	f06f 08ac 	mvn.w	r8, #172	; 0xac
  415078:	e69f      	b.n	414dba <.LBE94>

0041507a <.LVL363>:
        return BUFFER_E;
  41507a:	f06f 0883 	mvn.w	r8, #131	; 0x83

0041507e <.LVL364>:
  41507e:	e69c      	b.n	414dba <.LBE94>

00415080 <.LVL365>:
        return MEMORY_E;
  415080:	f06f 087c 	mvn.w	r8, #124	; 0x7c

00415084 <.LVL366>:
  415084:	e699      	b.n	414dba <.LBE94>

00415086 <.LBE107>:
            key->state = RSA_STATE_ENCRYPT_RES;
  415086:	2203      	movs	r2, #3
  415088:	f241 134c 	movw	r3, #4428	; 0x114c
  41508c:	50e2      	str	r2, [r4, r3]
  41508e:	e6b1      	b.n	414df4 <.LVL299+0x10>

00415090 <.LVL368>:
        ret = BAD_STATE_E;
  415090:	f06f 08bf 	mvn.w	r8, #191	; 0xbf
  415094:	e6b5      	b.n	414e02 <.LVL301>

00415096 <.LVL369>:
        return BAD_FUNC_ARG;
  415096:	f06f 08ac 	mvn.w	r8, #172	; 0xac
  41509a:	e6bc      	b.n	414e16 <.LVL303>
  41509c:	f06f 08ac 	mvn.w	r8, #172	; 0xac
  4150a0:	e6b9      	b.n	414e16 <.LVL303>

004150a2 <.LVL370>:
        return RSA_BUFFER_E;
  4150a2:	f06f 0882 	mvn.w	r8, #130	; 0x82
  4150a6:	e6b6      	b.n	414e16 <.LVL303>
        return WC_KEY_SIZE_E;
  4150a8:	f06f 08e9 	mvn.w	r8, #233	; 0xe9
  4150ac:	e6b3      	b.n	414e16 <.LVL303>
        return RSA_BUFFER_E;
  4150ae:	f06f 0882 	mvn.w	r8, #130	; 0x82
  4150b2:	e6b0      	b.n	414e16 <.LVL303>

004150b4 <.LBB108>:
        return BAD_FUNC_ARG;
  4150b4:	f06f 08ac 	mvn.w	r8, #172	; 0xac
  4150b8:	e6a6      	b.n	414e08 <.LVL301+0x6>

004150ba <.LVL372>:
            return RSA_PAD_E;
  4150ba:	f06f 08c8 	mvn.w	r8, #200	; 0xc8
  4150be:	e6a3      	b.n	414e08 <.LVL301+0x6>

004150c0 <.LBB100>:
            return RSA_PAD_E;
  4150c0:	f06f 08c8 	mvn.w	r8, #200	; 0xc8

004150c4 <.LVL373>:
  4150c4:	e6a0      	b.n	414e08 <.LVL301+0x6>

Disassembly of section .text.send_tree%67:

004150c6 <send_tree>:
{
  4150c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

004150ca <.LCFI4>:
  4150ca:	b083      	sub	sp, #12

004150cc <.LCFI5>:
    int nextlen = tree[0].Len; /* length of next code */
  4150cc:	f8b1 c002 	ldrh.w	ip, [r1, #2]

004150d0 <.LVL41>:
    if (nextlen == 0) max_count = 138, min_count = 3;
  4150d0:	f1bc 0f00 	cmp.w	ip, #0
  4150d4:	bf15      	itete	ne
  4150d6:	2604      	movne	r6, #4
  4150d8:	2603      	moveq	r6, #3
  4150da:	2307      	movne	r3, #7
  4150dc:	238a      	moveq	r3, #138	; 0x8a

004150de <.LVL42>:
    for (n = 0; n <= max_code; n++) {
  4150de:	2a00      	cmp	r2, #0
  4150e0:	9201      	str	r2, [sp, #4]
  4150e2:	f2c0 81b6 	blt.w	415452 <.LVL118>
  4150e6:	4689      	mov	r9, r1
  4150e8:	f04f 0a00 	mov.w	sl, #0
  4150ec:	f04f 32ff 	mov.w	r2, #4294967295

004150f0 <.LVL43>:
  4150f0:	46d3      	mov	fp, sl

004150f2 <.LBB2>:
            do { send_code(s, curlen, s->bl_tree); } while (--count != 0);
  4150f2:	f241 67bc 	movw	r7, #5820	; 0x16bc
  4150f6:	4407      	add	r7, r0

004150f8 <.LBB3>:
  4150f8:	f241 65b8 	movw	r5, #5816	; 0x16b8
  4150fc:	4405      	add	r5, r0

004150fe <.LBE2>:
            max_count = 138, min_count = 3;
  4150fe:	f8cd c000 	str.w	ip, [sp]
  415102:	e0be      	b.n	415282 <.LVL74>

00415104 <.LBB5>:
            do { send_code(s, curlen, s->bl_tree); } while (--count != 0);
  415104:	f8be 2a7c 	ldrh.w	r2, [lr, #2684]	; 0xa7c
  415108:	409a      	lsls	r2, r3
  41510a:	882e      	ldrh	r6, [r5, #0]
  41510c:	4332      	orrs	r2, r6
  41510e:	802a      	strh	r2, [r5, #0]
  415110:	4423      	add	r3, r4
  415112:	603b      	str	r3, [r7, #0]

00415114 <.LBE5>:
  415114:	f1bc 0c01 	subs.w	ip, ip, #1

00415118 <.LVL46>:
  415118:	f000 8099 	beq.w	41524e <.LBE11>

0041511c <.LBB6>:
  41511c:	f8be 4a7e 	ldrh.w	r4, [lr, #2686]	; 0xa7e

00415120 <.LVL48>:
  415120:	683b      	ldr	r3, [r7, #0]
  415122:	f1c4 0210 	rsb	r2, r4, #16
  415126:	4293      	cmp	r3, r2
  415128:	ddec      	ble.n	415104 <.LBB5>

0041512a <.LBB4>:
  41512a:	f8be 6a7c 	ldrh.w	r6, [lr, #2684]	; 0xa7c

0041512e <.LVL49>:
  41512e:	fa06 f203 	lsl.w	r2, r6, r3
  415132:	882b      	ldrh	r3, [r5, #0]
  415134:	431a      	orrs	r2, r3
  415136:	b212      	sxth	r2, r2
  415138:	802a      	strh	r2, [r5, #0]
  41513a:	6943      	ldr	r3, [r0, #20]
  41513c:	f103 0a01 	add.w	sl, r3, #1
  415140:	f8c0 a014 	str.w	sl, [r0, #20]
  415144:	6881      	ldr	r1, [r0, #8]
  415146:	54ca      	strb	r2, [r1, r3]
  415148:	6943      	ldr	r3, [r0, #20]
  41514a:	1c5a      	adds	r2, r3, #1
  41514c:	6142      	str	r2, [r0, #20]
  41514e:	882a      	ldrh	r2, [r5, #0]
  415150:	0a12      	lsrs	r2, r2, #8
  415152:	6881      	ldr	r1, [r0, #8]
  415154:	54ca      	strb	r2, [r1, r3]
  415156:	683a      	ldr	r2, [r7, #0]
  415158:	f1c2 0310 	rsb	r3, r2, #16
  41515c:	411e      	asrs	r6, r3

0041515e <.LVL50>:
  41515e:	802e      	strh	r6, [r5, #0]
  415160:	f1a4 0310 	sub.w	r3, r4, #16
  415164:	4413      	add	r3, r2
  415166:	603b      	str	r3, [r7, #0]

00415168 <.LBE4>:
  415168:	e7d4      	b.n	415114 <.LBE5>

0041516a <.LBE6>:
        } else if (curlen != 0) {
  41516a:	9b00      	ldr	r3, [sp, #0]

0041516c <.LVL52>:
  41516c:	2b00      	cmp	r3, #0
  41516e:	f000 80b8 	beq.w	4152e2 <.LBE15>
            if (curlen != prevlen) {
  415172:	429a      	cmp	r2, r3
  415174:	f000 80a0 	beq.w	4152b8 <.LBE13>
  415178:	eb00 0283 	add.w	r2, r0, r3, lsl #2

0041517c <.LBB7>:
                send_code(s, curlen, s->bl_tree); count--;
  41517c:	f8b2 1a7e 	ldrh.w	r1, [r2, #2686]	; 0xa7e

00415180 <.LVL54>:
  415180:	683b      	ldr	r3, [r7, #0]
  415182:	f1c1 0410 	rsb	r4, r1, #16
  415186:	42a3      	cmp	r3, r4
  415188:	f340 808d 	ble.w	4152a6 <.LBB13>

0041518c <.LBB8>:
  41518c:	f8b2 4a7c 	ldrh.w	r4, [r2, #2684]	; 0xa7c

00415190 <.LVL55>:
  415190:	fa04 f203 	lsl.w	r2, r4, r3
  415194:	882b      	ldrh	r3, [r5, #0]
  415196:	431a      	orrs	r2, r3
  415198:	b212      	sxth	r2, r2
  41519a:	802a      	strh	r2, [r5, #0]
  41519c:	6946      	ldr	r6, [r0, #20]

0041519e <.LVL56>:
  41519e:	1c73      	adds	r3, r6, #1
  4151a0:	6143      	str	r3, [r0, #20]
  4151a2:	6883      	ldr	r3, [r0, #8]
  4151a4:	559a      	strb	r2, [r3, r6]
  4151a6:	6883      	ldr	r3, [r0, #8]
  4151a8:	6946      	ldr	r6, [r0, #20]
  4151aa:	1c72      	adds	r2, r6, #1
  4151ac:	6142      	str	r2, [r0, #20]
  4151ae:	882a      	ldrh	r2, [r5, #0]
  4151b0:	0a12      	lsrs	r2, r2, #8
  4151b2:	559a      	strb	r2, [r3, r6]
  4151b4:	683b      	ldr	r3, [r7, #0]
  4151b6:	f1c3 0210 	rsb	r2, r3, #16
  4151ba:	4114      	asrs	r4, r2

004151bc <.LVL57>:
  4151bc:	802c      	strh	r4, [r5, #0]
  4151be:	3910      	subs	r1, #16

004151c0 <.LVL58>:
  4151c0:	4419      	add	r1, r3

004151c2 <.LVL59>:
  4151c2:	6039      	str	r1, [r7, #0]

004151c4 <.LBB9>:
            send_code(s, REP_3_6, s->bl_tree); send_bits(s, count-3, 2);
  4151c4:	f8b0 1abe 	ldrh.w	r1, [r0, #2750]	; 0xabe

004151c8 <.LVL61>:
  4151c8:	683b      	ldr	r3, [r7, #0]
  4151ca:	f1c1 0210 	rsb	r2, r1, #16
  4151ce:	4293      	cmp	r3, r2
  4151d0:	dd74      	ble.n	4152bc <.LBB14>

004151d2 <.LBB10>:
  4151d2:	f8b0 4abc 	ldrh.w	r4, [r0, #2748]	; 0xabc

004151d6 <.LVL62>:
  4151d6:	fa04 f203 	lsl.w	r2, r4, r3
  4151da:	882b      	ldrh	r3, [r5, #0]
  4151dc:	431a      	orrs	r2, r3
  4151de:	b212      	sxth	r2, r2
  4151e0:	802a      	strh	r2, [r5, #0]
  4151e2:	6946      	ldr	r6, [r0, #20]
  4151e4:	1c73      	adds	r3, r6, #1
  4151e6:	6143      	str	r3, [r0, #20]
  4151e8:	6883      	ldr	r3, [r0, #8]
  4151ea:	559a      	strb	r2, [r3, r6]
  4151ec:	6883      	ldr	r3, [r0, #8]
  4151ee:	6946      	ldr	r6, [r0, #20]
  4151f0:	1c72      	adds	r2, r6, #1
  4151f2:	6142      	str	r2, [r0, #20]
  4151f4:	882a      	ldrh	r2, [r5, #0]
  4151f6:	0a12      	lsrs	r2, r2, #8
  4151f8:	559a      	strb	r2, [r3, r6]
  4151fa:	683b      	ldr	r3, [r7, #0]
  4151fc:	f1c3 0210 	rsb	r2, r3, #16
  415200:	4114      	asrs	r4, r2

00415202 <.LVL63>:
  415202:	802c      	strh	r4, [r5, #0]
  415204:	3910      	subs	r1, #16

00415206 <.LVL64>:
  415206:	4419      	add	r1, r3

00415208 <.LVL65>:
  415208:	6039      	str	r1, [r7, #0]

0041520a <.LBB11>:
  41520a:	683b      	ldr	r3, [r7, #0]
  41520c:	2b0e      	cmp	r3, #14
  41520e:	dd5e      	ble.n	4152ce <.LBB15>

00415210 <.LBB12>:
  415210:	f1aa 0a03 	sub.w	sl, sl, #3

00415214 <.LVL68>:
  415214:	fa1f fa8a 	uxth.w	sl, sl

00415218 <.LVL69>:
  415218:	fa0a f203 	lsl.w	r2, sl, r3
  41521c:	882b      	ldrh	r3, [r5, #0]
  41521e:	431a      	orrs	r2, r3
  415220:	b212      	sxth	r2, r2
  415222:	802a      	strh	r2, [r5, #0]
  415224:	6883      	ldr	r3, [r0, #8]
  415226:	6941      	ldr	r1, [r0, #20]
  415228:	1c4c      	adds	r4, r1, #1
  41522a:	6144      	str	r4, [r0, #20]
  41522c:	545a      	strb	r2, [r3, r1]
  41522e:	6883      	ldr	r3, [r0, #8]
  415230:	6941      	ldr	r1, [r0, #20]
  415232:	1c4a      	adds	r2, r1, #1
  415234:	6142      	str	r2, [r0, #20]
  415236:	882a      	ldrh	r2, [r5, #0]
  415238:	0a12      	lsrs	r2, r2, #8
  41523a:	545a      	strb	r2, [r3, r1]
  41523c:	683b      	ldr	r3, [r7, #0]
  41523e:	f1c3 0210 	rsb	r2, r3, #16
  415242:	fa4a fa02 	asr.w	sl, sl, r2
  415246:	f8a5 a000 	strh.w	sl, [r5]
  41524a:	3b0e      	subs	r3, #14
  41524c:	603b      	str	r3, [r7, #0]

0041524e <.LBE11>:
        if (nextlen == 0) {
  41524e:	f1b8 0f00 	cmp.w	r8, #0
  415252:	f000 80f9 	beq.w	415448 <.LVL117>
        } else if (curlen == nextlen) {
  415256:	9900      	ldr	r1, [sp, #0]
  415258:	460a      	mov	r2, r1
  41525a:	4588      	cmp	r8, r1
  41525c:	bf0c      	ite	eq
  41525e:	2603      	moveq	r6, #3
  415260:	2604      	movne	r6, #4
  415262:	4588      	cmp	r8, r1
  415264:	bf0c      	ite	eq
  415266:	2306      	moveq	r3, #6
  415268:	2307      	movne	r3, #7
  41526a:	f04f 0a00 	mov.w	sl, #0

0041526e <.LVL71>:
    for (n = 0; n <= max_code; n++) {
  41526e:	f10b 0b01 	add.w	fp, fp, #1
  415272:	f109 0904 	add.w	r9, r9, #4
        curlen = nextlen; nextlen = tree[n+1].Len;
  415276:	f8cd 8000 	str.w	r8, [sp]

0041527a <.LVL73>:
    for (n = 0; n <= max_code; n++) {
  41527a:	9901      	ldr	r1, [sp, #4]
  41527c:	4559      	cmp	r1, fp
  41527e:	f2c0 80e8 	blt.w	415452 <.LVL118>

00415282 <.LVL74>:
        curlen = nextlen; nextlen = tree[n+1].Len;
  415282:	f8b9 8006 	ldrh.w	r8, [r9, #6]

00415286 <.LVL75>:
        if (++count < max_count && curlen == nextlen) {
  415286:	f10a 0101 	add.w	r1, sl, #1

0041528a <.LVL76>:
  41528a:	4299      	cmp	r1, r3
  41528c:	da03      	bge.n	415296 <.LVL76+0xc>
  41528e:	9c00      	ldr	r4, [sp, #0]
  415290:	45a0      	cmp	r8, r4
  415292:	f000 80d7 	beq.w	415444 <.LBE27>
        } else if (count < min_count) {
  415296:	42b1      	cmp	r1, r6
  415298:	f6bf af67 	bge.w	41516a <.LBE6>
  41529c:	9b00      	ldr	r3, [sp, #0]

0041529e <.LVL77>:
  41529e:	eb00 0e83 	add.w	lr, r0, r3, lsl #2
  4152a2:	468c      	mov	ip, r1
  4152a4:	e73a      	b.n	41511c <.LBB6>

004152a6 <.LBB13>:
                send_code(s, curlen, s->bl_tree); count--;
  4152a6:	f8b2 2a7c 	ldrh.w	r2, [r2, #2684]	; 0xa7c
  4152aa:	409a      	lsls	r2, r3
  4152ac:	882c      	ldrh	r4, [r5, #0]
  4152ae:	4322      	orrs	r2, r4
  4152b0:	802a      	strh	r2, [r5, #0]
  4152b2:	4419      	add	r1, r3

004152b4 <.LVL79>:
  4152b4:	6039      	str	r1, [r7, #0]
  4152b6:	e785      	b.n	4151c4 <.LBB9>

004152b8 <.LBE13>:
        if (++count < max_count && curlen == nextlen) {
  4152b8:	468a      	mov	sl, r1
  4152ba:	e783      	b.n	4151c4 <.LBB9>

004152bc <.LBB14>:
            send_code(s, REP_3_6, s->bl_tree); send_bits(s, count-3, 2);
  4152bc:	f8b0 2abc 	ldrh.w	r2, [r0, #2748]	; 0xabc
  4152c0:	409a      	lsls	r2, r3
  4152c2:	882c      	ldrh	r4, [r5, #0]
  4152c4:	4322      	orrs	r2, r4
  4152c6:	802a      	strh	r2, [r5, #0]
  4152c8:	4419      	add	r1, r3

004152ca <.LVL82>:
  4152ca:	6039      	str	r1, [r7, #0]
  4152cc:	e79d      	b.n	41520a <.LBB11>

004152ce <.LBB15>:
  4152ce:	f1aa 0203 	sub.w	r2, sl, #3
  4152d2:	b292      	uxth	r2, r2
  4152d4:	409a      	lsls	r2, r3
  4152d6:	8829      	ldrh	r1, [r5, #0]
  4152d8:	430a      	orrs	r2, r1
  4152da:	802a      	strh	r2, [r5, #0]
  4152dc:	3302      	adds	r3, #2
  4152de:	603b      	str	r3, [r7, #0]
  4152e0:	e7b5      	b.n	41524e <.LBE11>

004152e2 <.LBE15>:
        } else if (count <= 10) {
  4152e2:	290a      	cmp	r1, #10
  4152e4:	dc56      	bgt.n	415394 <.LBB22>

004152e6 <.LBB16>:
            send_code(s, REPZ_3_10, s->bl_tree); send_bits(s, count-3, 3);
  4152e6:	f8b0 4ac2 	ldrh.w	r4, [r0, #2754]	; 0xac2

004152ea <.LVL85>:
  4152ea:	683b      	ldr	r3, [r7, #0]
  4152ec:	f1c4 0210 	rsb	r2, r4, #16

004152f0 <.LVL86>:
  4152f0:	4293      	cmp	r3, r2
  4152f2:	dd3d      	ble.n	415370 <.LBB20>

004152f4 <.LBB17>:
  4152f4:	f8b0 cac0 	ldrh.w	ip, [r0, #2752]	; 0xac0

004152f8 <.LVL87>:
  4152f8:	fa0c f203 	lsl.w	r2, ip, r3
  4152fc:	882b      	ldrh	r3, [r5, #0]
  4152fe:	431a      	orrs	r2, r3
  415300:	b212      	sxth	r2, r2
  415302:	802a      	strh	r2, [r5, #0]
  415304:	6946      	ldr	r6, [r0, #20]

00415306 <.LVL88>:
  415306:	1c73      	adds	r3, r6, #1
  415308:	6143      	str	r3, [r0, #20]
  41530a:	6883      	ldr	r3, [r0, #8]
  41530c:	559a      	strb	r2, [r3, r6]
  41530e:	6883      	ldr	r3, [r0, #8]
  415310:	6946      	ldr	r6, [r0, #20]
  415312:	1c72      	adds	r2, r6, #1
  415314:	6142      	str	r2, [r0, #20]
  415316:	882a      	ldrh	r2, [r5, #0]
  415318:	0a12      	lsrs	r2, r2, #8
  41531a:	559a      	strb	r2, [r3, r6]
  41531c:	683b      	ldr	r3, [r7, #0]
  41531e:	f1c3 0210 	rsb	r2, r3, #16
  415322:	fa4c fc02 	asr.w	ip, ip, r2

00415326 <.LVL89>:
  415326:	f8a5 c000 	strh.w	ip, [r5]
  41532a:	3c10      	subs	r4, #16

0041532c <.LVL90>:
  41532c:	4423      	add	r3, r4
  41532e:	603b      	str	r3, [r7, #0]

00415330 <.LBB18>:
  415330:	683b      	ldr	r3, [r7, #0]
  415332:	2b0d      	cmp	r3, #13
  415334:	dd25      	ble.n	415382 <.LBB21>

00415336 <.LBB19>:
  415336:	f1aa 0202 	sub.w	r2, sl, #2

0041533a <.LVL93>:
  41533a:	b292      	uxth	r2, r2

0041533c <.LVL94>:
  41533c:	fa02 f103 	lsl.w	r1, r2, r3

00415340 <.LVL95>:
  415340:	882b      	ldrh	r3, [r5, #0]
  415342:	4319      	orrs	r1, r3
  415344:	b209      	sxth	r1, r1
  415346:	8029      	strh	r1, [r5, #0]
  415348:	6883      	ldr	r3, [r0, #8]
  41534a:	6944      	ldr	r4, [r0, #20]
  41534c:	1c66      	adds	r6, r4, #1
  41534e:	6146      	str	r6, [r0, #20]
  415350:	5519      	strb	r1, [r3, r4]
  415352:	6883      	ldr	r3, [r0, #8]
  415354:	6944      	ldr	r4, [r0, #20]
  415356:	1c61      	adds	r1, r4, #1
  415358:	6141      	str	r1, [r0, #20]
  41535a:	8829      	ldrh	r1, [r5, #0]
  41535c:	0a09      	lsrs	r1, r1, #8
  41535e:	5519      	strb	r1, [r3, r4]
  415360:	683b      	ldr	r3, [r7, #0]
  415362:	f1c3 0110 	rsb	r1, r3, #16
  415366:	410a      	asrs	r2, r1
  415368:	802a      	strh	r2, [r5, #0]
  41536a:	3b0d      	subs	r3, #13
  41536c:	603b      	str	r3, [r7, #0]

0041536e <.LBE19>:
  41536e:	e76e      	b.n	41524e <.LBE11>

00415370 <.LBB20>:
  415370:	f8b0 2ac0 	ldrh.w	r2, [r0, #2752]	; 0xac0
  415374:	409a      	lsls	r2, r3
  415376:	882e      	ldrh	r6, [r5, #0]

00415378 <.LVL97>:
  415378:	4332      	orrs	r2, r6
  41537a:	802a      	strh	r2, [r5, #0]
  41537c:	4423      	add	r3, r4
  41537e:	603b      	str	r3, [r7, #0]
  415380:	e7d6      	b.n	415330 <.LBB18>

00415382 <.LBB21>:
  415382:	1eca      	subs	r2, r1, #3
  415384:	b292      	uxth	r2, r2
  415386:	409a      	lsls	r2, r3
  415388:	8829      	ldrh	r1, [r5, #0]

0041538a <.LVL99>:
  41538a:	430a      	orrs	r2, r1
  41538c:	802a      	strh	r2, [r5, #0]
  41538e:	3303      	adds	r3, #3
  415390:	603b      	str	r3, [r7, #0]
  415392:	e75c      	b.n	41524e <.LBE11>

00415394 <.LBB22>:
            send_code(s, REPZ_11_138, s->bl_tree); send_bits(s, count-11, 7);
  415394:	f8b0 4ac6 	ldrh.w	r4, [r0, #2758]	; 0xac6

00415398 <.LVL101>:
  415398:	683b      	ldr	r3, [r7, #0]
  41539a:	f1c4 0210 	rsb	r2, r4, #16

0041539e <.LVL102>:
  41539e:	4293      	cmp	r3, r2
  4153a0:	dd3d      	ble.n	41541e <.LBB26>

004153a2 <.LBB23>:
  4153a2:	f8b0 cac4 	ldrh.w	ip, [r0, #2756]	; 0xac4

004153a6 <.LVL103>:
  4153a6:	fa0c f203 	lsl.w	r2, ip, r3
  4153aa:	882b      	ldrh	r3, [r5, #0]
  4153ac:	431a      	orrs	r2, r3
  4153ae:	b212      	sxth	r2, r2
  4153b0:	802a      	strh	r2, [r5, #0]
  4153b2:	6946      	ldr	r6, [r0, #20]

004153b4 <.LVL104>:
  4153b4:	1c73      	adds	r3, r6, #1
  4153b6:	6143      	str	r3, [r0, #20]
  4153b8:	6883      	ldr	r3, [r0, #8]
  4153ba:	559a      	strb	r2, [r3, r6]
  4153bc:	6883      	ldr	r3, [r0, #8]
  4153be:	6946      	ldr	r6, [r0, #20]
  4153c0:	1c72      	adds	r2, r6, #1
  4153c2:	6142      	str	r2, [r0, #20]
  4153c4:	882a      	ldrh	r2, [r5, #0]
  4153c6:	0a12      	lsrs	r2, r2, #8
  4153c8:	559a      	strb	r2, [r3, r6]
  4153ca:	683b      	ldr	r3, [r7, #0]
  4153cc:	f1c3 0210 	rsb	r2, r3, #16
  4153d0:	fa4c fc02 	asr.w	ip, ip, r2

004153d4 <.LVL105>:
  4153d4:	f8a5 c000 	strh.w	ip, [r5]
  4153d8:	3c10      	subs	r4, #16

004153da <.LVL106>:
  4153da:	4423      	add	r3, r4
  4153dc:	603b      	str	r3, [r7, #0]

004153de <.LBB24>:
  4153de:	683b      	ldr	r3, [r7, #0]
  4153e0:	2b09      	cmp	r3, #9
  4153e2:	dd25      	ble.n	415430 <.LBB27>

004153e4 <.LBB25>:
  4153e4:	f1aa 020a 	sub.w	r2, sl, #10

004153e8 <.LVL109>:
  4153e8:	b292      	uxth	r2, r2

004153ea <.LVL110>:
  4153ea:	fa02 f103 	lsl.w	r1, r2, r3

004153ee <.LVL111>:
  4153ee:	882b      	ldrh	r3, [r5, #0]
  4153f0:	4319      	orrs	r1, r3
  4153f2:	b209      	sxth	r1, r1
  4153f4:	8029      	strh	r1, [r5, #0]
  4153f6:	6883      	ldr	r3, [r0, #8]
  4153f8:	6944      	ldr	r4, [r0, #20]
  4153fa:	1c66      	adds	r6, r4, #1
  4153fc:	6146      	str	r6, [r0, #20]
  4153fe:	5519      	strb	r1, [r3, r4]
  415400:	6883      	ldr	r3, [r0, #8]
  415402:	6944      	ldr	r4, [r0, #20]
  415404:	1c61      	adds	r1, r4, #1
  415406:	6141      	str	r1, [r0, #20]
  415408:	8829      	ldrh	r1, [r5, #0]
  41540a:	0a09      	lsrs	r1, r1, #8
  41540c:	5519      	strb	r1, [r3, r4]
  41540e:	683b      	ldr	r3, [r7, #0]
  415410:	f1c3 0110 	rsb	r1, r3, #16
  415414:	410a      	asrs	r2, r1
  415416:	802a      	strh	r2, [r5, #0]
  415418:	3b09      	subs	r3, #9
  41541a:	603b      	str	r3, [r7, #0]

0041541c <.LBE25>:
  41541c:	e717      	b.n	41524e <.LBE11>

0041541e <.LBB26>:
  41541e:	f8b0 2ac4 	ldrh.w	r2, [r0, #2756]	; 0xac4
  415422:	409a      	lsls	r2, r3
  415424:	882e      	ldrh	r6, [r5, #0]

00415426 <.LVL113>:
  415426:	4332      	orrs	r2, r6
  415428:	802a      	strh	r2, [r5, #0]
  41542a:	4423      	add	r3, r4
  41542c:	603b      	str	r3, [r7, #0]
  41542e:	e7d6      	b.n	4153de <.LBB24>

00415430 <.LBB27>:
  415430:	f1a1 020b 	sub.w	r2, r1, #11
  415434:	b292      	uxth	r2, r2
  415436:	409a      	lsls	r2, r3
  415438:	8829      	ldrh	r1, [r5, #0]

0041543a <.LVL115>:
  41543a:	430a      	orrs	r2, r1
  41543c:	802a      	strh	r2, [r5, #0]
  41543e:	3307      	adds	r3, #7
  415440:	603b      	str	r3, [r7, #0]
  415442:	e704      	b.n	41524e <.LBE11>

00415444 <.LBE27>:
        if (++count < max_count && curlen == nextlen) {
  415444:	468a      	mov	sl, r1
  415446:	e712      	b.n	41526e <.LVL71>

00415448 <.LVL117>:
        count = 0; prevlen = curlen;
  415448:	46c2      	mov	sl, r8
  41544a:	9a00      	ldr	r2, [sp, #0]
            max_count = 138, min_count = 3;
  41544c:	2603      	movs	r6, #3
  41544e:	238a      	movs	r3, #138	; 0x8a
  415450:	e70d      	b.n	41526e <.LVL71>

00415452 <.LVL118>:
}
  415452:	b003      	add	sp, #12

00415454 <.LCFI6>:
  415454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section .text.deflate_slow%68:

00415458 <deflate_slow>:
{
  415458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

0041545c <.LCFI7>:
  41545c:	4604      	mov	r4, r0
  41545e:	460e      	mov	r6, r1

00415460 <.LBB12>:
            _tr_tally_lit(s, s->window[s->strstart-1], bflush);
  415460:	f241 65a4 	movw	r5, #5796	; 0x16a4
  415464:	4405      	add	r5, r0

00415466 <.LBB13>:
            _tr_tally_dist(s, s->strstart -1 - s->prev_match,
  415466:	f8df 9360 	ldr.w	r9, [pc, #864]	; 4157c8 <.LVL165+0x4>
  41546a:	e0b3      	b.n	4155d4 <.LVL139+0x10>

0041546c <.LBE13>:
            fill_window(s);
  41546c:	4620      	mov	r0, r4
  41546e:	f003 fbbd 	bl	418bec <fill_window>

00415472 <.LVL116>:
            if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {
  415472:	6f63      	ldr	r3, [r4, #116]	; 0x74
  415474:	b91e      	cbnz	r6, 41547e <.LVL116+0xc>
  415476:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
  41547a:	f0c0 815a 	bcc.w	415732 <.LVL155+0x18>
            if (s->lookahead == 0) break; /* flush the current block */
  41547e:	2b00      	cmp	r3, #0
  415480:	f040 80ad 	bne.w	4155de <.LVL140>
    if (s->match_available) {
  415484:	6ea3      	ldr	r3, [r4, #104]	; 0x68
  415486:	b1e3      	cbz	r3, 4154c2 <.LVL120>

00415488 <.LBB17>:
        _tr_tally_lit(s, s->window[s->strstart-1], bflush);
  415488:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  41548a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  41548c:	4413      	add	r3, r2
  41548e:	f813 3c01 	ldrb.w	r3, [r3, #-1]

00415492 <.LVL117>:
  415492:	f504 52b5 	add.w	r2, r4, #5792	; 0x16a0
  415496:	6815      	ldr	r5, [r2, #0]
  415498:	f241 61a4 	movw	r1, #5796	; 0x16a4
  41549c:	5860      	ldr	r0, [r4, r1]
  41549e:	2100      	movs	r1, #0
  4154a0:	f820 1015 	strh.w	r1, [r0, r5, lsl #1]
  4154a4:	f241 6098 	movw	r0, #5784	; 0x1698
  4154a8:	5825      	ldr	r5, [r4, r0]
  4154aa:	6810      	ldr	r0, [r2, #0]
  4154ac:	1c47      	adds	r7, r0, #1
  4154ae:	6017      	str	r7, [r2, #0]
  4154b0:	542b      	strb	r3, [r5, r0]
  4154b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2

004154b6 <.LVL118>:
  4154b6:	f8b3 2094 	ldrh.w	r2, [r3, #148]	; 0x94
  4154ba:	3201      	adds	r2, #1
  4154bc:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

004154c0 <.LBE17>:
        s->match_available = 0;
  4154c0:	66a1      	str	r1, [r4, #104]	; 0x68

004154c2 <.LVL120>:
    s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;
  4154c2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  4154c4:	4611      	mov	r1, r2
  4154c6:	2a02      	cmp	r2, #2
  4154c8:	bf28      	it	cs
  4154ca:	2102      	movcs	r1, #2
  4154cc:	f241 63b4 	movw	r3, #5812	; 0x16b4
  4154d0:	50e1      	str	r1, [r4, r3]
    if (flush == Z_FINISH) {
  4154d2:	2e04      	cmp	r6, #4
  4154d4:	f000 8112 	beq.w	4156fc <.LBE19>
    if (s->last_lit)
  4154d8:	f504 53b5 	add.w	r3, r4, #5792	; 0x16a0
  4154dc:	681b      	ldr	r3, [r3, #0]
  4154de:	2b00      	cmp	r3, #0
  4154e0:	f000 812a 	beq.w	415738 <.LVL155+0x1e>
        FLUSH_BLOCK(s, 0);
  4154e4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  4154e6:	2800      	cmp	r0, #0
  4154e8:	f2c0 8121 	blt.w	41572e <.LVL155+0x14>
  4154ec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  4154ee:	4401      	add	r1, r0
  4154f0:	2300      	movs	r3, #0
  4154f2:	1a12      	subs	r2, r2, r0
  4154f4:	4620      	mov	r0, r4
  4154f6:	f7fc fd8b 	bl	412010 <_tr_flush_block>

004154fa <.LVL121>:
  4154fa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  4154fc:	65e3      	str	r3, [r4, #92]	; 0x5c
  4154fe:	6820      	ldr	r0, [r4, #0]
  415500:	f00b fa76 	bl	4209f0 <.LFE41>

00415504 <.LVL122>:
  415504:	6823      	ldr	r3, [r4, #0]
  415506:	6918      	ldr	r0, [r3, #16]
                return need_more;
  415508:	3000      	adds	r0, #0
  41550a:	bf18      	it	ne
  41550c:	2001      	movne	r0, #1
  41550e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00415512 <.LBB15>:
            _tr_tally_dist(s, s->strstart -1 - s->prev_match,
  415512:	4bac      	ldr	r3, [pc, #688]	; (4157c4 <.LVL165>)
  415514:	eb03 11d1 	add.w	r1, r3, r1, lsr #7

00415518 <.LVL124>:
  415518:	f891 3100 	ldrb.w	r3, [r1, #256]	; 0x100
  41551c:	e0d6      	b.n	4156cc <.LVL151>

0041551e <.LBE15>:
            } while (--s->prev_length != 0);
  41551e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  415520:	3b01      	subs	r3, #1
  415522:	67a3      	str	r3, [r4, #120]	; 0x78
  415524:	b1e3      	cbz	r3, 415560 <.LVL127+0x6>
                if (++s->strstart <= max_insert) {
  415526:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  415528:	1c4f      	adds	r7, r1, #1
  41552a:	66e7      	str	r7, [r4, #108]	; 0x6c
  41552c:	42ba      	cmp	r2, r7
  41552e:	d3f6      	bcc.n	41551e <.LBE15>
                    INSERT_STRING(s, s->strstart, hash_head);
  415530:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  415532:	440b      	add	r3, r1
  415534:	78d8      	ldrb	r0, [r3, #3]
  415536:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  415538:	6da1      	ldr	r1, [r4, #88]	; 0x58
  41553a:	408b      	lsls	r3, r1
  41553c:	4043      	eors	r3, r0
  41553e:	6d60      	ldr	r0, [r4, #84]	; 0x54
  415540:	4003      	ands	r3, r0
  415542:	64a3      	str	r3, [r4, #72]	; 0x48
  415544:	6c60      	ldr	r0, [r4, #68]	; 0x44
  415546:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
  41554a:	6b63      	ldr	r3, [r4, #52]	; 0x34
  41554c:	403b      	ands	r3, r7
  41554e:	6c21      	ldr	r1, [r4, #64]	; 0x40
  415550:	f821 0013 	strh.w	r0, [r1, r3, lsl #1]

00415554 <.LVL126>:
  415554:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  415556:	6c63      	ldr	r3, [r4, #68]	; 0x44
  415558:	6ee0      	ldr	r0, [r4, #108]	; 0x6c

0041555a <.LVL127>:
  41555a:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
  41555e:	e7de      	b.n	41551e <.LBE15>
            s->match_available = 0;
  415560:	66a3      	str	r3, [r4, #104]	; 0x68
            s->match_length = MIN_MATCH-1;
  415562:	2302      	movs	r3, #2
  415564:	6623      	str	r3, [r4, #96]	; 0x60
            s->strstart++;
  415566:	6ee2      	ldr	r2, [r4, #108]	; 0x6c

00415568 <.LVL128>:
  415568:	3201      	adds	r2, #1
  41556a:	66e2      	str	r2, [r4, #108]	; 0x6c
            if (bflush) FLUSH_BLOCK(s, 0);
  41556c:	45f4      	cmp	ip, lr
  41556e:	d131      	bne.n	4155d4 <.LVL139+0x10>
  415570:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  415572:	2800      	cmp	r0, #0
  415574:	db11      	blt.n	41559a <.LVL131>
  415576:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  415578:	4401      	add	r1, r0
  41557a:	2300      	movs	r3, #0
  41557c:	1a12      	subs	r2, r2, r0
  41557e:	4620      	mov	r0, r4
  415580:	f7fc fd46 	bl	412010 <_tr_flush_block>

00415584 <.LVL129>:
  415584:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  415586:	65e3      	str	r3, [r4, #92]	; 0x5c
  415588:	6820      	ldr	r0, [r4, #0]
  41558a:	f00b fa31 	bl	4209f0 <.LFE41>

0041558e <.LVL130>:
  41558e:	6823      	ldr	r3, [r4, #0]
  415590:	691b      	ldr	r3, [r3, #16]
  415592:	b9fb      	cbnz	r3, 4155d4 <.LVL139+0x10>
  415594:	2000      	movs	r0, #0
  415596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0041559a <.LVL131>:
  41559a:	2100      	movs	r1, #0
  41559c:	e7ed      	b.n	41557a <.LVL128+0x12>

0041559e <.LBE18>:
                FLUSH_BLOCK_ONLY(s, 0);
  41559e:	6de2      	ldr	r2, [r4, #92]	; 0x5c

004155a0 <.LVL133>:
  4155a0:	2a00      	cmp	r2, #0
  4155a2:	db0d      	blt.n	4155c0 <.LVL137>
  4155a4:	6ba1      	ldr	r1, [r4, #56]	; 0x38

004155a6 <.LVL134>:
  4155a6:	4411      	add	r1, r2
  4155a8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  4155aa:	2300      	movs	r3, #0
  4155ac:	1a82      	subs	r2, r0, r2
  4155ae:	4620      	mov	r0, r4
  4155b0:	f7fc fd2e 	bl	412010 <_tr_flush_block>

004155b4 <.LVL135>:
  4155b4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  4155b6:	65e3      	str	r3, [r4, #92]	; 0x5c
  4155b8:	6820      	ldr	r0, [r4, #0]
  4155ba:	f00b fa19 	bl	4209f0 <.LFE41>

004155be <.LVL136>:
  4155be:	e0f3      	b.n	4157a8 <.LVL164>

004155c0 <.LVL137>:
  4155c0:	2100      	movs	r1, #0

004155c2 <.LVL138>:
  4155c2:	e7f1      	b.n	4155a8 <.LVL134+0x2>

004155c4 <.LVL139>:
            s->match_available = 1;
  4155c4:	2301      	movs	r3, #1
  4155c6:	66a3      	str	r3, [r4, #104]	; 0x68
            s->strstart++;
  4155c8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  4155ca:	3301      	adds	r3, #1
  4155cc:	66e3      	str	r3, [r4, #108]	; 0x6c
            s->lookahead--;
  4155ce:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4155d0:	3b01      	subs	r3, #1
  4155d2:	6763      	str	r3, [r4, #116]	; 0x74
        if (s->lookahead < MIN_LOOKAHEAD) {
  4155d4:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4155d6:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
  4155da:	f4ff af47 	bcc.w	41546c <.LBE13>

004155de <.LVL140>:
        if (s->lookahead >= MIN_MATCH) {
  4155de:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4155e0:	2b02      	cmp	r3, #2
  4155e2:	f240 80ac 	bls.w	41573e <.LVL158>
            INSERT_STRING(s, s->strstart, hash_head);
  4155e6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  4155e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4155ea:	4402      	add	r2, r0
  4155ec:	7893      	ldrb	r3, [r2, #2]
  4155ee:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  4155f0:	6da1      	ldr	r1, [r4, #88]	; 0x58
  4155f2:	408a      	lsls	r2, r1
  4155f4:	4053      	eors	r3, r2
  4155f6:	6d62      	ldr	r2, [r4, #84]	; 0x54
  4155f8:	4013      	ands	r3, r2
  4155fa:	64a3      	str	r3, [r4, #72]	; 0x48
  4155fc:	6c62      	ldr	r2, [r4, #68]	; 0x44
  4155fe:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
  415602:	6b63      	ldr	r3, [r4, #52]	; 0x34
  415604:	4003      	ands	r3, r0
  415606:	6c22      	ldr	r2, [r4, #64]	; 0x40
  415608:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

0041560c <.LVL141>:
  41560c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  41560e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  415610:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  415612:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
        s->prev_length = s->match_length, s->prev_match = s->match_start;
  415616:	6e23      	ldr	r3, [r4, #96]	; 0x60
  415618:	67a3      	str	r3, [r4, #120]	; 0x78
  41561a:	6f22      	ldr	r2, [r4, #112]	; 0x70
  41561c:	6662      	str	r2, [r4, #100]	; 0x64
        s->match_length = MIN_MATCH-1;
  41561e:	2202      	movs	r2, #2
  415620:	6622      	str	r2, [r4, #96]	; 0x60
        if (hash_head != NIL && s->prev_length < s->max_lazy_match &&
  415622:	2900      	cmp	r1, #0
  415624:	f000 8091 	beq.w	41574a <.LVL159>
  415628:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
  41562c:	4293      	cmp	r3, r2
  41562e:	f080 808c 	bcs.w	41574a <.LVL159>
            s->strstart - hash_head <= MAX_DIST(s)) {
  415632:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  415634:	1a5a      	subs	r2, r3, r1
  415636:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  415638:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
        if (hash_head != NIL && s->prev_length < s->max_lazy_match &&
  41563c:	429a      	cmp	r2, r3
  41563e:	f200 8084 	bhi.w	41574a <.LVL159>
            s->match_length = longest_match (s, hash_head);
  415642:	4620      	mov	r0, r4
  415644:	f003 ff82 	bl	41954c <.LFE1>

00415648 <.LVL142>:
  415648:	6620      	str	r0, [r4, #96]	; 0x60
            if (s->match_length <= 5 && (s->strategy == Z_FILTERED
  41564a:	2805      	cmp	r0, #5
  41564c:	d87d      	bhi.n	41574a <.LVL159>
  41564e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
  415652:	2b01      	cmp	r3, #1
  415654:	d007      	beq.n	415666 <.LVL142+0x1e>
                || (s->match_length == MIN_MATCH &&
  415656:	2803      	cmp	r0, #3
  415658:	d177      	bne.n	41574a <.LVL159>
                    s->strstart - s->match_start > TOO_FAR)
  41565a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  41565c:	6f22      	ldr	r2, [r4, #112]	; 0x70
  41565e:	1a9b      	subs	r3, r3, r2
                || (s->match_length == MIN_MATCH &&
  415660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  415664:	d971      	bls.n	41574a <.LVL159>
                s->match_length = MIN_MATCH-1;
  415666:	2302      	movs	r3, #2
  415668:	6623      	str	r3, [r4, #96]	; 0x60
        if (s->prev_length >= MIN_MATCH && s->match_length <= s->prev_length) {
  41566a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  41566c:	2b02      	cmp	r3, #2
  41566e:	d972      	bls.n	415756 <.LVL159+0xc>

00415670 <.LBB19>:
            uInt max_insert = s->strstart + s->lookahead - MIN_MATCH;
  415670:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  415672:	6f62      	ldr	r2, [r4, #116]	; 0x74
  415674:	440a      	add	r2, r1
  415676:	3a03      	subs	r2, #3

00415678 <.LBB16>:
            _tr_tally_dist(s, s->strstart -1 - s->prev_match,
  415678:	3b03      	subs	r3, #3
  41567a:	b2db      	uxtb	r3, r3

0041567c <.LVL144>:
  41567c:	6e60      	ldr	r0, [r4, #100]	; 0x64
  41567e:	1a09      	subs	r1, r1, r0
  415680:	b289      	uxth	r1, r1

00415682 <.LVL145>:
  415682:	f504 5eb5 	add.w	lr, r4, #5792	; 0x16a0
  415686:	6828      	ldr	r0, [r5, #0]
  415688:	f101 3cff 	add.w	ip, r1, #4294967295
  41568c:	f8de 7000 	ldr.w	r7, [lr]
  415690:	f820 c017 	strh.w	ip, [r0, r7, lsl #1]
  415694:	f241 6098 	movw	r0, #5784	; 0x1698
  415698:	f854 c000 	ldr.w	ip, [r4, r0]
  41569c:	f8de 0000 	ldr.w	r0, [lr]
  4156a0:	f100 0801 	add.w	r8, r0, #1
  4156a4:	f8ce 8000 	str.w	r8, [lr]
  4156a8:	f80c 3000 	strb.w	r3, [ip, r0]
  4156ac:	3902      	subs	r1, #2

004156ae <.LVL146>:
  4156ae:	b289      	uxth	r1, r1

004156b0 <.LVL147>:
  4156b0:	f819 3003 	ldrb.w	r3, [r9, r3]

004156b4 <.LVL148>:
  4156b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  4156b8:	f8b3 0498 	ldrh.w	r0, [r3, #1176]	; 0x498

004156bc <.LVL149>:
  4156bc:	3001      	adds	r0, #1
  4156be:	f8a3 0498 	strh.w	r0, [r3, #1176]	; 0x498

004156c2 <.LVL150>:
  4156c2:	29ff      	cmp	r1, #255	; 0xff
  4156c4:	f63f af25 	bhi.w	415512 <.LBB15>
  4156c8:	4b3e      	ldr	r3, [pc, #248]	; (4157c4 <.LVL165>)
  4156ca:	5c5b      	ldrb	r3, [r3, r1]

004156cc <.LVL151>:
  4156cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  4156d0:	f8b3 1988 	ldrh.w	r1, [r3, #2440]	; 0x988
  4156d4:	3101      	adds	r1, #1
  4156d6:	f8a3 1988 	strh.w	r1, [r3, #2440]	; 0x988
  4156da:	f504 53b5 	add.w	r3, r4, #5792	; 0x16a0
  4156de:	f8d3 c000 	ldr.w	ip, [r3]
  4156e2:	f241 639c 	movw	r3, #5788	; 0x169c
  4156e6:	58e3      	ldr	r3, [r4, r3]
  4156e8:	f103 3eff 	add.w	lr, r3, #4294967295

004156ec <.LBE16>:
            s->lookahead -= s->prev_length-1;
  4156ec:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  4156ee:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4156f0:	3301      	adds	r3, #1
  4156f2:	1a5b      	subs	r3, r3, r1
  4156f4:	6763      	str	r3, [r4, #116]	; 0x74
            s->prev_length -= 2;
  4156f6:	3902      	subs	r1, #2
  4156f8:	67a1      	str	r1, [r4, #120]	; 0x78
  4156fa:	e714      	b.n	415526 <.LBE15+0x8>

004156fc <.LBE19>:
        FLUSH_BLOCK(s, 1);
  4156fc:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  4156fe:	2800      	cmp	r0, #0
  415700:	db13      	blt.n	41572a <.LVL155+0x10>
  415702:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  415704:	4401      	add	r1, r0
  415706:	2301      	movs	r3, #1
  415708:	1a12      	subs	r2, r2, r0
  41570a:	4620      	mov	r0, r4
  41570c:	f7fc fc80 	bl	412010 <_tr_flush_block>

00415710 <.LVL154>:
  415710:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  415712:	65e3      	str	r3, [r4, #92]	; 0x5c
  415714:	6820      	ldr	r0, [r4, #0]
  415716:	f00b f96b 	bl	4209f0 <.LFE41>

0041571a <.LVL155>:
  41571a:	6823      	ldr	r3, [r4, #0]
  41571c:	691b      	ldr	r3, [r3, #16]
        return finish_done;
  41571e:	2b00      	cmp	r3, #0
  415720:	bf0c      	ite	eq
  415722:	2002      	moveq	r0, #2
  415724:	2003      	movne	r0, #3
  415726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        FLUSH_BLOCK(s, 1);
  41572a:	2100      	movs	r1, #0
  41572c:	e7eb      	b.n	415706 <.LBE19+0xa>
        FLUSH_BLOCK(s, 0);
  41572e:	2100      	movs	r1, #0
  415730:	e6de      	b.n	4154f0 <.LVL120+0x2e>
                return need_more;
  415732:	2000      	movs	r0, #0
  415734:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return block_done;
  415738:	2001      	movs	r0, #1
  41573a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0041573e <.LVL158>:
        s->prev_length = s->match_length, s->prev_match = s->match_start;
  41573e:	6e23      	ldr	r3, [r4, #96]	; 0x60
  415740:	67a3      	str	r3, [r4, #120]	; 0x78
  415742:	6f23      	ldr	r3, [r4, #112]	; 0x70
  415744:	6663      	str	r3, [r4, #100]	; 0x64
        s->match_length = MIN_MATCH-1;
  415746:	2302      	movs	r3, #2
  415748:	6623      	str	r3, [r4, #96]	; 0x60

0041574a <.LVL159>:
        if (s->prev_length >= MIN_MATCH && s->match_length <= s->prev_length) {
  41574a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  41574c:	2b02      	cmp	r3, #2
  41574e:	d902      	bls.n	415756 <.LVL159+0xc>
  415750:	6e22      	ldr	r2, [r4, #96]	; 0x60
  415752:	4293      	cmp	r3, r2
  415754:	d28c      	bcs.n	415670 <.LBB19>
        } else if (s->match_available) {
  415756:	6ea3      	ldr	r3, [r4, #104]	; 0x68
  415758:	2b00      	cmp	r3, #0
  41575a:	f43f af33 	beq.w	4155c4 <.LVL139>

0041575e <.LBB20>:
            _tr_tally_lit(s, s->window[s->strstart-1], bflush);
  41575e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  415760:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  415762:	4413      	add	r3, r2
  415764:	f813 3c01 	ldrb.w	r3, [r3, #-1]

00415768 <.LVL160>:
  415768:	f504 51b5 	add.w	r1, r4, #5792	; 0x16a0
  41576c:	6808      	ldr	r0, [r1, #0]
  41576e:	682a      	ldr	r2, [r5, #0]
  415770:	f04f 0e00 	mov.w	lr, #0
  415774:	f822 e010 	strh.w	lr, [r2, r0, lsl #1]
  415778:	f241 6298 	movw	r2, #5784	; 0x1698
  41577c:	58a0      	ldr	r0, [r4, r2]
  41577e:	680a      	ldr	r2, [r1, #0]
  415780:	f102 0e01 	add.w	lr, r2, #1
  415784:	f8c1 e000 	str.w	lr, [r1]
  415788:	5483      	strb	r3, [r0, r2]
  41578a:	eb04 0383 	add.w	r3, r4, r3, lsl #2

0041578e <.LVL161>:
  41578e:	f8b3 2094 	ldrh.w	r2, [r3, #148]	; 0x94

00415792 <.LVL162>:
  415792:	3201      	adds	r2, #1
  415794:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

00415798 <.LVL163>:
  415798:	f241 639c 	movw	r3, #5788	; 0x169c
  41579c:	58e3      	ldr	r3, [r4, r3]
  41579e:	3b01      	subs	r3, #1

004157a0 <.LBE20>:
            if (bflush) {
  4157a0:	680a      	ldr	r2, [r1, #0]
  4157a2:	429a      	cmp	r2, r3
  4157a4:	f43f aefb 	beq.w	41559e <.LBE18>

004157a8 <.LVL164>:
            s->strstart++;
  4157a8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  4157aa:	3301      	adds	r3, #1
  4157ac:	66e3      	str	r3, [r4, #108]	; 0x6c
            s->lookahead--;
  4157ae:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4157b0:	3b01      	subs	r3, #1
  4157b2:	6763      	str	r3, [r4, #116]	; 0x74
            if (s->strm->avail_out == 0) return need_more;
  4157b4:	6823      	ldr	r3, [r4, #0]
  4157b6:	691b      	ldr	r3, [r3, #16]
  4157b8:	2b00      	cmp	r3, #0
  4157ba:	f47f af0b 	bne.w	4155d4 <.LVL139+0x10>
  4157be:	2000      	movs	r0, #0
  4157c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

004157c4 <.LVL165>:
  4157c4:	004189ec 	.word	0x004189ec
  4157c8:	0041b938 	.word	0x0041b938

Disassembly of section .text.fp_div%69:

004157cc <fp_div>:
{
  4157cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

004157d0 <.LCFI84>:
  4157d0:	f6ad 3d04 	subw	sp, sp, #2820	; 0xb04

004157d4 <.LCFI85>:
  if (fp_iszero (b) == FP_YES) {
  4157d4:	680c      	ldr	r4, [r1, #0]
  4157d6:	2c00      	cmp	r4, #0
  4157d8:	f000 81a7 	beq.w	415b2a <.LCFI87>
  4157dc:	461d      	mov	r5, r3
  4157de:	930a      	str	r3, [sp, #40]	; 0x28
  4157e0:	9208      	str	r2, [sp, #32]
  4157e2:	9109      	str	r1, [sp, #36]	; 0x24
  4157e4:	4604      	mov	r4, r0
  4157e6:	900b      	str	r0, [sp, #44]	; 0x2c
  if (fp_cmp_mag (a, b) == FP_LT) {
  4157e8:	f00a fc25 	bl	420036 <.LFE16>

004157ec <.LVL564>:
  4157ec:	f1b0 3fff 	cmp.w	r0, #4294967295
  4157f0:	d045      	beq.n	41587e <.LVL586>

004157f2 <.LBB85>:
    fp_zero(a);
  4157f2:	f60d 00d8 	addw	r0, sp, #2264	; 0x8d8

004157f6 <.LVL566>:
  4157f6:	f00c fca5 	bl	422144 <.LFE163>

004157fa <.LBE85>:
  q.used = a->used + 2;
  4157fa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c

004157fc <.LVL568>:
  4157fc:	6823      	ldr	r3, [r4, #0]
  4157fe:	3302      	adds	r3, #2
  415800:	f8cd 38d8 	str.w	r3, [sp, #2264]	; 0x8d8

00415804 <.LBB87>:
    fp_zero(a);
  415804:	a898      	add	r0, sp, #608	; 0x260

00415806 <.LVL570>:
  415806:	f00c fc9d 	bl	422144 <.LFE163>

0041580a <.LBB89>:
  41580a:	a80e      	add	r0, sp, #56	; 0x38

0041580c <.LVL572>:
  41580c:	f00c fc9a 	bl	422144 <.LFE163>

00415810 <.LBE89>:
  fp_init_copy(&x, a);
  415810:	4621      	mov	r1, r4
  415812:	f50d 60d6 	add.w	r0, sp, #1712	; 0x6b0
  415816:	f00c fb83 	bl	421f20 <.LFE54>

0041581a <.LVL574>:
  fp_init_copy(&y, b);
  41581a:	9d09      	ldr	r5, [sp, #36]	; 0x24

0041581c <.LVL575>:
  41581c:	4629      	mov	r1, r5
  41581e:	f50d 6091 	add.w	r0, sp, #1160	; 0x488
  415822:	f00c fb7d 	bl	421f20 <.LFE54>

00415826 <.LVL576>:
  neg = (a->sign == b->sign) ? FP_ZPOS : FP_NEG;
  415826:	6862      	ldr	r2, [r4, #4]
  415828:	686b      	ldr	r3, [r5, #4]
  41582a:	1ad3      	subs	r3, r2, r3
  41582c:	bf18      	it	ne
  41582e:	2301      	movne	r3, #1
  415830:	930d      	str	r3, [sp, #52]	; 0x34

00415832 <.LVL577>:
  x.sign = y.sign = FP_ZPOS;
  415832:	2300      	movs	r3, #0

00415834 <.LVL578>:
  415834:	f8cd 348c 	str.w	r3, [sp, #1164]	; 0x48c
  415838:	f8cd 36b4 	str.w	r3, [sp, #1716]	; 0x6b4
  norm = fp_count_bits(&y) % DIGIT_BIT;
  41583c:	f50d 6091 	add.w	r0, sp, #1160	; 0x488
  415840:	f00c fb61 	bl	421f06 <.LFE26>

00415844 <.LVL579>:
  415844:	4242      	negs	r2, r0
  415846:	f000 031f 	and.w	r3, r0, #31
  41584a:	f002 021f 	and.w	r2, r2, #31
  41584e:	bf58      	it	pl
  415850:	4253      	negpl	r3, r2

00415852 <.LVL580>:
  if (norm < (int)(DIGIT_BIT-1)) {
  415852:	2b1e      	cmp	r3, #30
  415854:	dd21      	ble.n	41589a <.LVL589>
     norm = 0;
  415856:	2300      	movs	r3, #0

00415858 <.LVL581>:
  415858:	930c      	str	r3, [sp, #48]	; 0x30

0041585a <.LVL582>:
  n = x.used - 1;
  41585a:	f8dd 46b0 	ldr.w	r4, [sp, #1712]	; 0x6b0
  41585e:	f104 3aff 	add.w	sl, r4, #4294967295

00415862 <.LVL583>:
  t = y.used - 1;
  415862:	f8dd 6488 	ldr.w	r6, [sp, #1160]	; 0x488
  415866:	f106 39ff 	add.w	r9, r6, #4294967295

0041586a <.LVL584>:
  fp_lshd (&y, n - t); /* y = y*b**{n-t} */
  41586a:	ebaa 0709 	sub.w	r7, sl, r9
  41586e:	4639      	mov	r1, r7
  415870:	f50d 6091 	add.w	r0, sp, #1160	; 0x488
  415874:	f009 facb 	bl	41ee0e <.LFE26>

00415878 <.LVL585>:
    ++(q.dp[n - t]);
  415878:	f60d 05d8 	addw	r5, sp, #2264	; 0x8d8
  while (fp_cmp (&x, &y) != FP_LT) {
  41587c:	e02b      	b.n	4158d6 <.LVL595>

0041587e <.LVL586>:
    if (d != NULL) {
  41587e:	b11d      	cbz	r5, 415888 <.LVL587>
      fp_copy (a, d);
  415880:	4629      	mov	r1, r5
  415882:	4620      	mov	r0, r4
  415884:	f00c f992 	bl	421bac <.LFE31>

00415888 <.LVL587>:
    if (c != NULL) {
  415888:	9b08      	ldr	r3, [sp, #32]
  41588a:	2b00      	cmp	r3, #0
  41588c:	f000 8150 	beq.w	415b30 <.LVL626>
      fp_zero (c);
  415890:	4618      	mov	r0, r3
  415892:	f00c fc57 	bl	422144 <.LFE163>

00415896 <.LVL588>:
    return FP_OKAY;
  415896:	2000      	movs	r0, #0
  415898:	e143      	b.n	415b22 <.LVL623>

0041589a <.LVL589>:
     norm = (DIGIT_BIT-1) - norm;
  41589a:	f1c3 031f 	rsb	r3, r3, #31

0041589e <.LVL590>:
  41589e:	461c      	mov	r4, r3
  4158a0:	930c      	str	r3, [sp, #48]	; 0x30

004158a2 <.LVL591>:
     fp_mul_2d (&x, norm, &x);
  4158a2:	f50d 62d6 	add.w	r2, sp, #1712	; 0x6b0
  4158a6:	4619      	mov	r1, r3
  4158a8:	4610      	mov	r0, r2
  4158aa:	f008 fabf 	bl	41de2c <.LBE78>

004158ae <.LVL592>:
     fp_mul_2d (&y, norm, &y);
  4158ae:	f50d 6291 	add.w	r2, sp, #1160	; 0x488
  4158b2:	4621      	mov	r1, r4
  4158b4:	4610      	mov	r0, r2
  4158b6:	f008 fab9 	bl	41de2c <.LBE78>

004158ba <.LVL593>:
  4158ba:	e7ce      	b.n	41585a <.LVL582>

004158bc <.LVL594>:
    ++(q.dp[n - t]);
  4158bc:	1cba      	adds	r2, r7, #2
  4158be:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
  4158c2:	3301      	adds	r3, #1
  4158c4:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    fp_sub (&x, &y, &x);
  4158c8:	f50d 62d6 	add.w	r2, sp, #1712	; 0x6b0
  4158cc:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
  4158d0:	4610      	mov	r0, r2
  4158d2:	f00b fa8f 	bl	420df4 <.LFE144>

004158d6 <.LVL595>:
  while (fp_cmp (&x, &y) != FP_LT) {
  4158d6:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
  4158da:	f50d 60d6 	add.w	r0, sp, #1712	; 0x6b0
  4158de:	f00b fe8b 	bl	4215f8 <.LFE9>

004158e2 <.LVL596>:
  4158e2:	f1b0 3fff 	cmp.w	r0, #4294967295
  4158e6:	d1e9      	bne.n	4158bc <.LVL594>
  fp_rshd (&y, n - t);
  4158e8:	4639      	mov	r1, r7
  4158ea:	f50d 6091 	add.w	r0, sp, #1160	; 0x488
  4158ee:	f009 fb55 	bl	41ef9c <.LFE159>

004158f2 <.LVL597>:
  for (i = n; i >= (t + 1); i--) {
  4158f2:	45b2      	cmp	sl, r6
  4158f4:	f2c0 809d 	blt.w	415a32 <.LVL616>
  4158f8:	9607      	str	r6, [sp, #28]
  4158fa:	1c63      	adds	r3, r4, #1
  4158fc:	1b9b      	subs	r3, r3, r6
  4158fe:	f60d 02d8 	addw	r2, sp, #2264	; 0x8d8
  415902:	eb02 0b83 	add.w	fp, r2, r3, lsl #2
  415906:	f50d 63d6 	add.w	r3, sp, #1712	; 0x6b0
  41590a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
  41590e:	9301      	str	r3, [sp, #4]
    if (x.dp[i] == y.dp[t]) {
  415910:	f50d 6891 	add.w	r8, sp, #1160	; 0x488
      t1.dp[1] = y.dp[t];
  415914:	f8cd 8018 	str.w	r8, [sp, #24]
  415918:	e04f      	b.n	4159ba <.LVL606+0x12>

0041591a <.LVL598>:
      q.dp[i - t - 1] = (fp_digit) ((((fp_word)1) << DIGIT_BIT) - 1);
  41591a:	f04f 33ff 	mov.w	r3, #4294967295
  41591e:	f8cb 3000 	str.w	r3, [fp]
  415922:	e067      	b.n	4159f4 <.LVL611+0x4>

00415924 <.LVL599>:
      t1.dp[0] = (t - 1 < 0) ? 0 : y.dp[t - 1];
  415924:	3302      	adds	r3, #2
  415926:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
  41592a:	939a      	str	r3, [sp, #616]	; 0x268
      t1.dp[1] = y.dp[t];
  41592c:	f109 0302 	add.w	r3, r9, #2
  415930:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
  415934:	939b      	str	r3, [sp, #620]	; 0x26c
      t1.used = 2;
  415936:	2302      	movs	r3, #2
  415938:	9398      	str	r3, [sp, #608]	; 0x260
      fp_mul_d (&t1, q.dp[i - t - 1], &t1);
  41593a:	aa98      	add	r2, sp, #608	; 0x260
  41593c:	6821      	ldr	r1, [r4, #0]
  41593e:	4610      	mov	r0, r2
  415940:	f007 fb64 	bl	41d00c <.LFE176>

00415944 <.LVL600>:
      t2.dp[0] = (i - 2 < 0) ? 0 : x.dp[i - 2];
  415944:	2f02      	cmp	r7, #2
  415946:	bf54      	ite	pl
  415948:	f855 3c04 	ldrpl.w	r3, [r5, #-4]
  41594c:	2300      	movmi	r3, #0
  41594e:	9310      	str	r3, [sp, #64]	; 0x40
      t2.dp[1] = (i - 1 < 0) ? 0 : x.dp[i - 1];
  415950:	2f01      	cmp	r7, #1
  415952:	bf54      	ite	pl
  415954:	682b      	ldrpl	r3, [r5, #0]
  415956:	2300      	movmi	r3, #0
  415958:	9311      	str	r3, [sp, #68]	; 0x44
      t2.dp[2] = x.dp[i];
  41595a:	686b      	ldr	r3, [r5, #4]
  41595c:	9312      	str	r3, [sp, #72]	; 0x48
      t2.used = 3;
  41595e:	2303      	movs	r3, #3
  415960:	930e      	str	r3, [sp, #56]	; 0x38
    } while (fp_cmp_mag(&t1, &t2) == FP_GT);
  415962:	a90e      	add	r1, sp, #56	; 0x38
  415964:	a898      	add	r0, sp, #608	; 0x260
  415966:	f00a fb66 	bl	420036 <.LFE16>

0041596a <.LVL601>:
  41596a:	2801      	cmp	r0, #1
  41596c:	d109      	bne.n	415982 <.LVL602+0x8>
      q.dp[i - t - 1] = (q.dp[i - t - 1] - 1);
  41596e:	6823      	ldr	r3, [r4, #0]
  415970:	3b01      	subs	r3, #1
  415972:	6023      	str	r3, [r4, #0]
      fp_zero (&t1);
  415974:	a898      	add	r0, sp, #608	; 0x260
  415976:	f00c fbe5 	bl	422144 <.LFE163>

0041597a <.LVL602>:
      t1.dp[0] = (t - 1 < 0) ? 0 : y.dp[t - 1];
  41597a:	1eb3      	subs	r3, r6, #2
  41597c:	d5d2      	bpl.n	415924 <.LVL599>
  41597e:	2300      	movs	r3, #0
  415980:	e7d3      	b.n	41592a <.LVL599+0x6>
    fp_mul_d (&y, q.dp[i - t - 1], &t1);
  415982:	aa98      	add	r2, sp, #608	; 0x260
  415984:	6821      	ldr	r1, [r4, #0]
  415986:	9806      	ldr	r0, [sp, #24]
  415988:	f007 fb40 	bl	41d00c <.LFE176>

0041598c <.LVL603>:
    fp_lshd  (&t1, i - t - 1);
  41598c:	9904      	ldr	r1, [sp, #16]
  41598e:	a898      	add	r0, sp, #608	; 0x260
  415990:	f009 fa3d 	bl	41ee0e <.LFE26>

00415994 <.LVL604>:
    fp_sub   (&x, &t1, &x);
  415994:	f50d 62d6 	add.w	r2, sp, #1712	; 0x6b0
  415998:	a998      	add	r1, sp, #608	; 0x260
  41599a:	4610      	mov	r0, r2
  41599c:	f00b fa2a 	bl	420df4 <.LFE144>

004159a0 <.LVL605>:
    if (x.sign == FP_NEG) {
  4159a0:	f8dd 36b4 	ldr.w	r3, [sp, #1716]	; 0x6b4
  4159a4:	2b01      	cmp	r3, #1
  4159a6:	d032      	beq.n	415a0e <.LVL612>

004159a8 <.LVL606>:
  for (i = n; i >= (t + 1); i--) {
  4159a8:	f10a 3aff 	add.w	sl, sl, #4294967295
  4159ac:	f1ab 0b04 	sub.w	fp, fp, #4
  4159b0:	9b01      	ldr	r3, [sp, #4]
  4159b2:	3b04      	subs	r3, #4
  4159b4:	9301      	str	r3, [sp, #4]
  4159b6:	4556      	cmp	r6, sl
  4159b8:	dc3b      	bgt.n	415a32 <.LVL616>
    if (i > x.used) {
  4159ba:	f8dd 36b0 	ldr.w	r3, [sp, #1712]	; 0x6b0
  4159be:	4553      	cmp	r3, sl
  4159c0:	dbf2      	blt.n	4159a8 <.LVL606>
  4159c2:	9b01      	ldr	r3, [sp, #4]
  4159c4:	9305      	str	r3, [sp, #20]
    if (x.dp[i] == y.dp[t]) {
  4159c6:	685b      	ldr	r3, [r3, #4]
  4159c8:	f109 0202 	add.w	r2, r9, #2
  4159cc:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
  4159d0:	4293      	cmp	r3, r2
  4159d2:	d0a2      	beq.n	41591a <.LVL598>

004159d4 <.LBB91>:
      tmp = ((fp_word) x.dp[i]) << ((fp_word) DIGIT_BIT);
  4159d4:	9303      	str	r3, [sp, #12]
  4159d6:	2300      	movs	r3, #0
  4159d8:	9302      	str	r3, [sp, #8]

004159da <.LVL608>:
      tmp |= ((fp_word) x.dp[i - 1]);
  4159da:	9b01      	ldr	r3, [sp, #4]
  4159dc:	6818      	ldr	r0, [r3, #0]

004159de <.LVL609>:
      tmp /= ((fp_word)y.dp[t]);
  4159de:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  4159e2:	4623      	mov	r3, r4
  4159e4:	ea44 0400 	orr.w	r4, r4, r0
  4159e8:	4620      	mov	r0, r4

004159ea <.LVL610>:
  4159ea:	4629      	mov	r1, r5
  4159ec:	f00b fefc 	bl	4217e8 <.LBE14>

004159f0 <.LVL611>:
      q.dp[i - t - 1] = (fp_digit) (tmp);
  4159f0:	f8cb 0000 	str.w	r0, [fp]
  4159f4:	4657      	mov	r7, sl
  4159f6:	9b07      	ldr	r3, [sp, #28]
  4159f8:	ebaa 0303 	sub.w	r3, sl, r3
  4159fc:	9304      	str	r3, [sp, #16]
  4159fe:	465c      	mov	r4, fp

00415a00 <.LBE91>:
    q.dp[i - t - 1] = (q.dp[i - t - 1] + 1);
  415a00:	f8db 3000 	ldr.w	r3, [fp]
  415a04:	3301      	adds	r3, #1
  415a06:	f8cb 3000 	str.w	r3, [fp]
      t2.dp[0] = (i - 2 < 0) ? 0 : x.dp[i - 2];
  415a0a:	9d05      	ldr	r5, [sp, #20]
  415a0c:	e7af      	b.n	41596e <.LVL601+0x4>

00415a0e <.LVL612>:
      fp_copy (&y, &t1);
  415a0e:	a998      	add	r1, sp, #608	; 0x260
  415a10:	9806      	ldr	r0, [sp, #24]
  415a12:	f00c f8cb 	bl	421bac <.LFE31>

00415a16 <.LVL613>:
      fp_lshd (&t1, i - t - 1);
  415a16:	9904      	ldr	r1, [sp, #16]
  415a18:	a898      	add	r0, sp, #608	; 0x260
  415a1a:	f009 f9f8 	bl	41ee0e <.LFE26>

00415a1e <.LVL614>:
      fp_add (&x, &t1, &x);
  415a1e:	f50d 62d6 	add.w	r2, sp, #1712	; 0x6b0
  415a22:	a998      	add	r1, sp, #608	; 0x260
  415a24:	4610      	mov	r0, r2
  415a26:	f00b f8c7 	bl	420bb8 <.LFE17>

00415a2a <.LVL615>:
      q.dp[i - t - 1] = q.dp[i - t - 1] - 1;
  415a2a:	6823      	ldr	r3, [r4, #0]
  415a2c:	3b01      	subs	r3, #1
  415a2e:	6023      	str	r3, [r4, #0]
  415a30:	e7ba      	b.n	4159a8 <.LVL606>

00415a32 <.LVL616>:
  x.sign = x.used == 0 ? FP_ZPOS : a->sign;
  415a32:	f8dd 36b0 	ldr.w	r3, [sp, #1712]	; 0x6b0
  415a36:	b10b      	cbz	r3, 415a3c <.LVL616+0xa>
  415a38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  415a3a:	685b      	ldr	r3, [r3, #4]
  415a3c:	f8cd 36b4 	str.w	r3, [sp, #1716]	; 0x6b4
  if (c != NULL) {
  415a40:	9b08      	ldr	r3, [sp, #32]
  415a42:	b34b      	cbz	r3, 415a98 <.LVL617+0x4>
    fp_clamp (&q);
  415a44:	f8dd 28d8 	ldr.w	r2, [sp, #2264]	; 0x8d8
  415a48:	b1da      	cbz	r2, 415a82 <.LVL616+0x50>
  415a4a:	1e53      	subs	r3, r2, #1
  415a4c:	1c51      	adds	r1, r2, #1
  415a4e:	f60d 00d8 	addw	r0, sp, #2264	; 0x8d8
  415a52:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
  415a56:	b979      	cbnz	r1, 415a78 <.LVL616+0x46>
  415a58:	f50d 6130 	add.w	r1, sp, #2816	; 0xb00
  415a5c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  415a60:	f5a2 7209 	sub.w	r2, r2, #548	; 0x224
  415a64:	e000      	b.n	415a68 <.LVL616+0x36>
  415a66:	4603      	mov	r3, r0
  415a68:	b14b      	cbz	r3, 415a7e <.LVL616+0x4c>
  415a6a:	1e58      	subs	r0, r3, #1
  415a6c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  415a70:	2900      	cmp	r1, #0
  415a72:	d0f8      	beq.n	415a66 <.LVL616+0x34>
  415a74:	f8cd 38d8 	str.w	r3, [sp, #2264]	; 0x8d8
  415a78:	f8dd 38dc 	ldr.w	r3, [sp, #2268]	; 0x8dc
  415a7c:	e002      	b.n	415a84 <.LVL616+0x52>
  415a7e:	f8cd 38d8 	str.w	r3, [sp, #2264]	; 0x8d8
  415a82:	2300      	movs	r3, #0
  415a84:	f8cd 38dc 	str.w	r3, [sp, #2268]	; 0x8dc
    fp_copy (&q, c);
  415a88:	9c08      	ldr	r4, [sp, #32]
  415a8a:	4621      	mov	r1, r4
  415a8c:	f60d 00d8 	addw	r0, sp, #2264	; 0x8d8
  415a90:	f00c f88c 	bl	421bac <.LFE31>

00415a94 <.LVL617>:
    c->sign = neg;
  415a94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  415a96:	6063      	str	r3, [r4, #4]
  if (d != NULL) {
  415a98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  415a9a:	2b00      	cmp	r3, #0
  415a9c:	d04a      	beq.n	415b34 <.LVL627>
    fp_div_2d (&x, norm, &x, NULL);
  415a9e:	2300      	movs	r3, #0
  415aa0:	f50d 62d6 	add.w	r2, sp, #1712	; 0x6b0
  415aa4:	990c      	ldr	r1, [sp, #48]	; 0x30
  415aa6:	4610      	mov	r0, r2
  415aa8:	f008 f918 	bl	41dcdc <.LFE25>

00415aac <.LVL618>:
    for (i = b->used; i < x.used; i++) {
  415aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
  415aae:	681b      	ldr	r3, [r3, #0]

00415ab0 <.LVL619>:
  415ab0:	f8dd 06b0 	ldr.w	r0, [sp, #1712]	; 0x6b0
  415ab4:	4283      	cmp	r3, r0
  415ab6:	da0e      	bge.n	415ad6 <.LVL621+0x8>
  415ab8:	f50d 62d6 	add.w	r2, sp, #1712	; 0x6b0
  415abc:	eb02 0383 	add.w	r3, r2, r3, lsl #2

00415ac0 <.LVL620>:
  415ac0:	3304      	adds	r3, #4
  415ac2:	1c42      	adds	r2, r0, #1
  415ac4:	f50d 61d6 	add.w	r1, sp, #1712	; 0x6b0
  415ac8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
        x.dp[i] = 0;
  415acc:	2100      	movs	r1, #0

00415ace <.LVL621>:
  415ace:	f843 1f04 	str.w	r1, [r3, #4]!
    for (i = b->used; i < x.used; i++) {
  415ad2:	4293      	cmp	r3, r2
  415ad4:	d1fb      	bne.n	415ace <.LVL621>
    fp_clamp(&x);
  415ad6:	b1d8      	cbz	r0, 415b10 <.LVL621+0x42>
  415ad8:	1e43      	subs	r3, r0, #1
  415ada:	1c42      	adds	r2, r0, #1
  415adc:	f50d 61d6 	add.w	r1, sp, #1712	; 0x6b0
  415ae0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  415ae4:	b97a      	cbnz	r2, 415b06 <.LVL621+0x38>
  415ae6:	f50d 6230 	add.w	r2, sp, #2816	; 0xb00
  415aea:	eb02 0280 	add.w	r2, r2, r0, lsl #2
  415aee:	f2a2 424c 	subw	r2, r2, #1100	; 0x44c
  415af2:	e000      	b.n	415af6 <.LVL621+0x28>
  415af4:	4603      	mov	r3, r0
  415af6:	b14b      	cbz	r3, 415b0c <.LVL621+0x3e>
  415af8:	1e58      	subs	r0, r3, #1
  415afa:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  415afe:	2900      	cmp	r1, #0
  415b00:	d0f8      	beq.n	415af4 <.LVL621+0x26>
  415b02:	f8cd 36b0 	str.w	r3, [sp, #1712]	; 0x6b0
  415b06:	f8dd 36b4 	ldr.w	r3, [sp, #1716]	; 0x6b4
  415b0a:	e002      	b.n	415b12 <.LVL621+0x44>
  415b0c:	f8cd 36b0 	str.w	r3, [sp, #1712]	; 0x6b0
  415b10:	2300      	movs	r3, #0
  415b12:	f8cd 36b4 	str.w	r3, [sp, #1716]	; 0x6b4
    fp_copy (&x, d);
  415b16:	990a      	ldr	r1, [sp, #40]	; 0x28
  415b18:	f50d 60d6 	add.w	r0, sp, #1712	; 0x6b0
  415b1c:	f00c f846 	bl	421bac <.LFE31>

00415b20 <.LVL622>:
  return FP_OKAY;
  415b20:	2000      	movs	r0, #0

00415b22 <.LVL623>:
}
  415b22:	f60d 3d04 	addw	sp, sp, #2820	; 0xb04

00415b26 <.LCFI86>:
  415b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00415b2a <.LCFI87>:
    return FP_VAL;
  415b2a:	f04f 30ff 	mov.w	r0, #4294967295

00415b2e <.LVL625>:
  415b2e:	e7f8      	b.n	415b22 <.LVL623>

00415b30 <.LVL626>:
    return FP_OKAY;
  415b30:	2000      	movs	r0, #0
  415b32:	e7f6      	b.n	415b22 <.LVL623>

00415b34 <.LVL627>:
  return FP_OKAY;
  415b34:	2000      	movs	r0, #0
  415b36:	e7f4      	b.n	415b22 <.LVL623>

Disassembly of section .text.wc_AesDecrypt%70:

00415b38 <wc_AesDecrypt>:
{
  415b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

00415b3c <.LCFI1>:
    word32 r = aes->rounds >> 1;
  415b3c:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
  415b40:	ea4f 0e53 	mov.w	lr, r3, lsr #1

00415b44 <.LVL54>:
    if (r > 7 || r == 0) {
  415b44:	f10e 33ff 	add.w	r3, lr, #4294967295
  415b48:	2b06      	cmp	r3, #6
  415b4a:	f200 81a5 	bhi.w	415e98 <.LVL107>
  415b4e:	4692      	mov	sl, r2
    XMEMCPY(&s0, inBlock,                  sizeof(s0));
  415b50:	680e      	ldr	r6, [r1, #0]

00415b52 <.LVL55>:
    XMEMCPY(&s1, inBlock + sizeof(s0),     sizeof(s1));
  415b52:	684d      	ldr	r5, [r1, #4]

00415b54 <.LVL56>:
    XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
  415b54:	688c      	ldr	r4, [r1, #8]

00415b56 <.LVL57>:
    XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
  415b56:	68cb      	ldr	r3, [r1, #12]

00415b58 <.LBB118>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  415b58:	0a31      	lsrs	r1, r6, #8

00415b5a <.LVL59>:
  415b5a:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
  415b5e:	0231      	lsls	r1, r6, #8
  415b60:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  415b64:	4339      	orrs	r1, r7

00415b66 <.LBE118>:
    s0 ^= rk[0];
  415b66:	6806      	ldr	r6, [r0, #0]

00415b68 <.LVL60>:
  415b68:	ea86 4631 	eor.w	r6, r6, r1, ror #16

00415b6c <.LBB120>:
  415b6c:	0a29      	lsrs	r1, r5, #8
  415b6e:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
  415b72:	0229      	lsls	r1, r5, #8
  415b74:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  415b78:	4339      	orrs	r1, r7

00415b7a <.LBE120>:
    s1 ^= rk[1];
  415b7a:	6845      	ldr	r5, [r0, #4]

00415b7c <.LVL62>:
  415b7c:	ea85 4531 	eor.w	r5, r5, r1, ror #16

00415b80 <.LBB122>:
  415b80:	0a21      	lsrs	r1, r4, #8
  415b82:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
  415b86:	0221      	lsls	r1, r4, #8
  415b88:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  415b8c:	ea4c 0101 	orr.w	r1, ip, r1

00415b90 <.LBE122>:
    s2 ^= rk[2];
  415b90:	6884      	ldr	r4, [r0, #8]

00415b92 <.LVL64>:
  415b92:	ea84 4c31 	eor.w	ip, r4, r1, ror #16

00415b96 <.LBB124>:
  415b96:	ea4f 2803 	mov.w	r8, r3, lsl #8
  415b9a:	f008 28ff 	and.w	r8, r8, #4278255360	; 0xff00ff00
  415b9e:	0a1b      	lsrs	r3, r3, #8

00415ba0 <.LVL66>:
  415ba0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  415ba4:	ea48 0303 	orr.w	r3, r8, r3

00415ba8 <.LBE124>:
    s3 ^= rk[3];
  415ba8:	68c1      	ldr	r1, [r0, #12]
  415baa:	ea81 4833 	eor.w	r8, r1, r3, ror #16

00415bae <.LVL67>:
  415bae:	2104      	movs	r1, #4

00415bb0 <.LVL68>:
{
  415bb0:	2320      	movs	r3, #32

00415bb2 <.LBB126>:
        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
  415bb2:	3b01      	subs	r3, #1

00415bb4 <.LVL70>:
  415bb4:	d1fd      	bne.n	415bb2 <.LBB126>

00415bb6 <.LVL71>:
    for (i = 0; i < 4; i++) {
  415bb6:	3901      	subs	r1, #1

00415bb8 <.LVL72>:
  415bb8:	d1fa      	bne.n	415bb0 <.LVL68>

00415bba <.LBE126>:
    const word32* rk = aes->key;
  415bba:	4607      	mov	r7, r0
  415bbc:	eb00 1e4e 	add.w	lr, r0, lr, lsl #5

00415bc0 <.LVL73>:
            Td[0][GETBYTE(s0, 3)] ^
  415bc0:	4bb6      	ldr	r3, [pc, #728]	; (415e9c <.LVL107+0x4>)

00415bc2 <.LVL74>:
  415bc2:	0e30      	lsrs	r0, r6, #24
            Td[3][GETBYTE(s1, 0)] ^
  415bc4:	b2e9      	uxtb	r1, r5
  415bc6:	f501 7140 	add.w	r1, r1, #768	; 0x300
        t0 =
  415bca:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  415bce:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  415bd2:	404c      	eors	r4, r1
  415bd4:	6939      	ldr	r1, [r7, #16]
  415bd6:	404c      	eors	r4, r1
            Td[1][GETBYTE(s3, 2)] ^
  415bd8:	f3c8 4107 	ubfx	r1, r8, #16, #8
  415bdc:	f501 7180 	add.w	r1, r1, #256	; 0x100
        t0 =
  415be0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  415be4:	404c      	eors	r4, r1
            Td[2][GETBYTE(s2, 1)] ^
  415be6:	f3cc 2107 	ubfx	r1, ip, #8, #8
  415bea:	f501 7100 	add.w	r1, r1, #512	; 0x200
        t0 =
  415bee:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  415bf2:	404c      	eors	r4, r1

00415bf4 <.LVL75>:
            Td[0][GETBYTE(s1, 3)] ^
  415bf4:	0e29      	lsrs	r1, r5, #24
            Td[3][GETBYTE(s2, 0)] ^
  415bf6:	fa5f f08c 	uxtb.w	r0, ip
  415bfa:	f500 7040 	add.w	r0, r0, #768	; 0x300
        t1 =
  415bfe:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  415c02:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  415c06:	4048      	eors	r0, r1
  415c08:	6979      	ldr	r1, [r7, #20]
  415c0a:	4041      	eors	r1, r0
            Td[1][GETBYTE(s0, 2)] ^
  415c0c:	f3c6 4007 	ubfx	r0, r6, #16, #8
  415c10:	f500 7080 	add.w	r0, r0, #256	; 0x100
        t1 =
  415c14:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  415c18:	4041      	eors	r1, r0
            Td[2][GETBYTE(s3, 1)] ^
  415c1a:	f3c8 2007 	ubfx	r0, r8, #8, #8
  415c1e:	f500 7000 	add.w	r0, r0, #512	; 0x200
        t1 =
  415c22:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  415c26:	4041      	eors	r1, r0

00415c28 <.LVL76>:
            Td[0][GETBYTE(s2, 3)] ^
  415c28:	ea4f 601c 	mov.w	r0, ip, lsr #24
            Td[3][GETBYTE(s3, 0)] ^
  415c2c:	fa5f f988 	uxtb.w	r9, r8
  415c30:	f509 7940 	add.w	r9, r9, #768	; 0x300
        t2 =
  415c34:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  415c38:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
  415c3c:	ea80 0909 	eor.w	r9, r0, r9
  415c40:	69b8      	ldr	r0, [r7, #24]
  415c42:	ea89 0000 	eor.w	r0, r9, r0
            Td[1][GETBYTE(s1, 2)] ^
  415c46:	f3c5 4907 	ubfx	r9, r5, #16, #8
  415c4a:	f509 7980 	add.w	r9, r9, #256	; 0x100
        t2 =
  415c4e:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
  415c52:	ea80 0009 	eor.w	r0, r0, r9
            Td[2][GETBYTE(s0, 1)] ^
  415c56:	f3c6 2907 	ubfx	r9, r6, #8, #8
  415c5a:	f509 7900 	add.w	r9, r9, #512	; 0x200
        t2 =
  415c5e:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
  415c62:	ea80 0009 	eor.w	r0, r0, r9

00415c66 <.LVL77>:
            Td[0][GETBYTE(s3, 3)] ^
  415c66:	ea4f 6818 	mov.w	r8, r8, lsr #24

00415c6a <.LVL78>:
            Td[3][GETBYTE(s0, 0)] ^
  415c6a:	b2f6      	uxtb	r6, r6

00415c6c <.LVL79>:
  415c6c:	f506 7940 	add.w	r9, r6, #768	; 0x300
        t3 =
  415c70:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
  415c74:	f853 8029 	ldr.w	r8, [r3, r9, lsl #2]
  415c78:	ea86 0808 	eor.w	r8, r6, r8
  415c7c:	69fe      	ldr	r6, [r7, #28]
  415c7e:	ea88 0806 	eor.w	r8, r8, r6
            Td[1][GETBYTE(s2, 2)] ^
  415c82:	f3cc 4c07 	ubfx	ip, ip, #16, #8

00415c86 <.LVL80>:
  415c86:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
        t3 =
  415c8a:	f853 602c 	ldr.w	r6, [r3, ip, lsl #2]
  415c8e:	ea88 0806 	eor.w	r8, r8, r6
            Td[2][GETBYTE(s1, 1)] ^
  415c92:	f3c5 2507 	ubfx	r5, r5, #8, #8

00415c96 <.LVL81>:
  415c96:	f505 7500 	add.w	r5, r5, #512	; 0x200
        t3 =
  415c9a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
  415c9e:	ea88 0806 	eor.w	r8, r8, r6

00415ca2 <.LVL82>:
        rk += 8;
  415ca2:	3720      	adds	r7, #32
        if (--r == 0) {
  415ca4:	4577      	cmp	r7, lr
  415ca6:	d074      	beq.n	415d92 <.LVL89>

00415ca8 <.LVL84>:
            Td[0][GETBYTE(t0, 3)] ^
  415ca8:	0e26      	lsrs	r6, r4, #24
            Td[3][GETBYTE(t1, 0)] ^
  415caa:	b2cd      	uxtb	r5, r1
  415cac:	f505 7540 	add.w	r5, r5, #768	; 0x300
  415cb0:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
  415cb4:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
  415cb8:	406e      	eors	r6, r5
  415cba:	683d      	ldr	r5, [r7, #0]
  415cbc:	406e      	eors	r6, r5
            Td[1][GETBYTE(t3, 2)] ^
  415cbe:	f3c8 4507 	ubfx	r5, r8, #16, #8
  415cc2:	f505 7580 	add.w	r5, r5, #256	; 0x100
            Td[3][GETBYTE(t1, 0)] ^
  415cc6:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
  415cca:	406e      	eors	r6, r5
            Td[2][GETBYTE(t2, 1)] ^
  415ccc:	f3c0 2507 	ubfx	r5, r0, #8, #8
  415cd0:	f505 7500 	add.w	r5, r5, #512	; 0x200
            Td[3][GETBYTE(t1, 0)] ^
  415cd4:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
  415cd8:	406e      	eors	r6, r5
            Td[0][GETBYTE(t1, 3)] ^
  415cda:	0e0d      	lsrs	r5, r1, #24
            Td[3][GETBYTE(t2, 0)] ^
  415cdc:	fa5f fc80 	uxtb.w	ip, r0
  415ce0:	f50c 7c40 	add.w	ip, ip, #768	; 0x300
  415ce4:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
  415ce8:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
  415cec:	ea85 0c0c 	eor.w	ip, r5, ip
  415cf0:	687d      	ldr	r5, [r7, #4]
  415cf2:	ea8c 0505 	eor.w	r5, ip, r5
            Td[1][GETBYTE(t0, 2)] ^
  415cf6:	f3c4 4c07 	ubfx	ip, r4, #16, #8
  415cfa:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
            Td[3][GETBYTE(t2, 0)] ^
  415cfe:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
  415d02:	ea85 050c 	eor.w	r5, r5, ip
            Td[2][GETBYTE(t3, 1)] ^
  415d06:	f3c8 2c07 	ubfx	ip, r8, #8, #8
  415d0a:	f50c 7c00 	add.w	ip, ip, #512	; 0x200
            Td[3][GETBYTE(t2, 0)] ^
  415d0e:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
  415d12:	ea85 050c 	eor.w	r5, r5, ip
            Td[0][GETBYTE(t2, 3)] ^
  415d16:	ea4f 6c10 	mov.w	ip, r0, lsr #24
            Td[3][GETBYTE(t3, 0)] ^
  415d1a:	fa5f f988 	uxtb.w	r9, r8
  415d1e:	f509 7940 	add.w	r9, r9, #768	; 0x300
  415d22:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
  415d26:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
  415d2a:	ea8c 0c09 	eor.w	ip, ip, r9
  415d2e:	68ba      	ldr	r2, [r7, #8]
  415d30:	ea8c 0c02 	eor.w	ip, ip, r2
            Td[1][GETBYTE(t1, 2)] ^
  415d34:	f3c1 4907 	ubfx	r9, r1, #16, #8
  415d38:	f509 7980 	add.w	r9, r9, #256	; 0x100
            Td[3][GETBYTE(t3, 0)] ^
  415d3c:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
  415d40:	ea8c 0c09 	eor.w	ip, ip, r9
            Td[2][GETBYTE(t0, 1)] ^
  415d44:	f3c4 2907 	ubfx	r9, r4, #8, #8
  415d48:	f509 7900 	add.w	r9, r9, #512	; 0x200
            Td[3][GETBYTE(t3, 0)] ^
  415d4c:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
  415d50:	ea8c 0c09 	eor.w	ip, ip, r9
            Td[0][GETBYTE(t3, 3)] ^
  415d54:	ea4f 6818 	mov.w	r8, r8, lsr #24

00415d58 <.LVL85>:
            Td[3][GETBYTE(t0, 0)] ^
  415d58:	b2e4      	uxtb	r4, r4

00415d5a <.LVL86>:
  415d5a:	f504 7940 	add.w	r9, r4, #768	; 0x300
  415d5e:	f853 4028 	ldr.w	r4, [r3, r8, lsl #2]
  415d62:	f853 8029 	ldr.w	r8, [r3, r9, lsl #2]
  415d66:	ea84 0808 	eor.w	r8, r4, r8
  415d6a:	68fc      	ldr	r4, [r7, #12]
  415d6c:	ea88 0804 	eor.w	r8, r8, r4
            Td[1][GETBYTE(t2, 2)] ^
  415d70:	f3c0 4007 	ubfx	r0, r0, #16, #8

00415d74 <.LVL87>:
  415d74:	f500 7080 	add.w	r0, r0, #256	; 0x100
            Td[3][GETBYTE(t0, 0)] ^
  415d78:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  415d7c:	ea88 0804 	eor.w	r8, r8, r4
            Td[2][GETBYTE(t1, 1)] ^
  415d80:	f3c1 2107 	ubfx	r1, r1, #8, #8

00415d84 <.LVL88>:
  415d84:	f501 7100 	add.w	r1, r1, #512	; 0x200
            Td[3][GETBYTE(t0, 0)] ^
  415d88:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
  415d8c:	ea88 0804 	eor.w	r8, r8, r4
        t0 =
  415d90:	e717      	b.n	415bc2 <.LVL74>

00415d92 <.LVL89>:
        ((word32)Td4[GETBYTE(t1, 0)]) ^
  415d92:	4b43      	ldr	r3, [pc, #268]	; (415ea0 <.LVL107+0x8>)
  415d94:	b2cd      	uxtb	r5, r1
  415d96:	5d5e      	ldrb	r6, [r3, r5]
  415d98:	f8de 5000 	ldr.w	r5, [lr]
  415d9c:	406e      	eors	r6, r5
        ((word32)Td4[GETBYTE(t0, 3)] << 24) ^
  415d9e:	0e25      	lsrs	r5, r4, #24
  415da0:	5d5d      	ldrb	r5, [r3, r5]
        ((word32)Td4[GETBYTE(t1, 0)]) ^
  415da2:	ea86 6605 	eor.w	r6, r6, r5, lsl #24
        ((word32)Td4[GETBYTE(t3, 2)] << 16) ^
  415da6:	f3c8 4507 	ubfx	r5, r8, #16, #8
  415daa:	5d5d      	ldrb	r5, [r3, r5]
        ((word32)Td4[GETBYTE(t1, 0)]) ^
  415dac:	ea86 4605 	eor.w	r6, r6, r5, lsl #16
        ((word32)Td4[GETBYTE(t2, 1)] <<  8) ^
  415db0:	f3c0 2507 	ubfx	r5, r0, #8, #8
  415db4:	5d5d      	ldrb	r5, [r3, r5]
        ((word32)Td4[GETBYTE(t1, 0)]) ^
  415db6:	ea86 2605 	eor.w	r6, r6, r5, lsl #8

00415dba <.LVL90>:
        ((word32)Td4[GETBYTE(t2, 0)]) ^
  415dba:	b2c5      	uxtb	r5, r0
  415dbc:	5d5f      	ldrb	r7, [r3, r5]

00415dbe <.LVL91>:
  415dbe:	f8de 5004 	ldr.w	r5, [lr, #4]
  415dc2:	406f      	eors	r7, r5
        ((word32)Td4[GETBYTE(t1, 3)] << 24) ^
  415dc4:	0e0d      	lsrs	r5, r1, #24
  415dc6:	5d5d      	ldrb	r5, [r3, r5]
        ((word32)Td4[GETBYTE(t2, 0)]) ^
  415dc8:	ea87 6705 	eor.w	r7, r7, r5, lsl #24
        ((word32)Td4[GETBYTE(t0, 2)] << 16) ^
  415dcc:	f3c4 4507 	ubfx	r5, r4, #16, #8
  415dd0:	5d5d      	ldrb	r5, [r3, r5]
        ((word32)Td4[GETBYTE(t2, 0)]) ^
  415dd2:	ea87 4705 	eor.w	r7, r7, r5, lsl #16
        ((word32)Td4[GETBYTE(t3, 1)] <<  8) ^
  415dd6:	f3c8 2507 	ubfx	r5, r8, #8, #8
  415dda:	5d5d      	ldrb	r5, [r3, r5]
        ((word32)Td4[GETBYTE(t2, 0)]) ^
  415ddc:	ea87 2705 	eor.w	r7, r7, r5, lsl #8

00415de0 <.LVL92>:
        ((word32)Td4[GETBYTE(t3, 0)]) ^
  415de0:	fa5f f588 	uxtb.w	r5, r8
  415de4:	f813 c005 	ldrb.w	ip, [r3, r5]
  415de8:	f8de 5008 	ldr.w	r5, [lr, #8]
  415dec:	ea8c 0505 	eor.w	r5, ip, r5
        ((word32)Td4[GETBYTE(t2, 3)] << 24) ^
  415df0:	ea4f 6c10 	mov.w	ip, r0, lsr #24
  415df4:	f813 c00c 	ldrb.w	ip, [r3, ip]
        ((word32)Td4[GETBYTE(t3, 0)]) ^
  415df8:	ea85 650c 	eor.w	r5, r5, ip, lsl #24
        ((word32)Td4[GETBYTE(t1, 2)] << 16) ^
  415dfc:	f3c1 4c07 	ubfx	ip, r1, #16, #8
  415e00:	f813 c00c 	ldrb.w	ip, [r3, ip]
        ((word32)Td4[GETBYTE(t3, 0)]) ^
  415e04:	ea85 450c 	eor.w	r5, r5, ip, lsl #16
        ((word32)Td4[GETBYTE(t0, 1)] <<  8) ^
  415e08:	f3c4 2c07 	ubfx	ip, r4, #8, #8
  415e0c:	f813 c00c 	ldrb.w	ip, [r3, ip]
        ((word32)Td4[GETBYTE(t3, 0)]) ^
  415e10:	ea85 250c 	eor.w	r5, r5, ip, lsl #8

00415e14 <.LVL93>:
        ((word32)Td4[GETBYTE(t0, 0)]) ^
  415e14:	b2e4      	uxtb	r4, r4

00415e16 <.LVL94>:
  415e16:	5d1c      	ldrb	r4, [r3, r4]
  415e18:	f8de e00c 	ldr.w	lr, [lr, #12]
  415e1c:	ea84 040e 	eor.w	r4, r4, lr
        ((word32)Td4[GETBYTE(t3, 3)] << 24) ^
  415e20:	ea4f 6818 	mov.w	r8, r8, lsr #24

00415e24 <.LVL95>:
  415e24:	f813 e008 	ldrb.w	lr, [r3, r8]
        ((word32)Td4[GETBYTE(t0, 0)]) ^
  415e28:	ea84 640e 	eor.w	r4, r4, lr, lsl #24
        ((word32)Td4[GETBYTE(t2, 2)] << 16) ^
  415e2c:	f3c0 4007 	ubfx	r0, r0, #16, #8

00415e30 <.LVL96>:
  415e30:	5c18      	ldrb	r0, [r3, r0]
        ((word32)Td4[GETBYTE(t0, 0)]) ^
  415e32:	ea84 4000 	eor.w	r0, r4, r0, lsl #16
        ((word32)Td4[GETBYTE(t1, 1)] <<  8) ^
  415e36:	f3c1 2107 	ubfx	r1, r1, #8, #8

00415e3a <.LVL97>:
  415e3a:	5c5b      	ldrb	r3, [r3, r1]
        ((word32)Td4[GETBYTE(t0, 0)]) ^
  415e3c:	ea80 2303 	eor.w	r3, r0, r3, lsl #8

00415e40 <.LBB128>:
  415e40:	0a31      	lsrs	r1, r6, #8
  415e42:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
  415e46:	0230      	lsls	r0, r6, #8
  415e48:	f000 20ff 	and.w	r0, r0, #4278255360	; 0xff00ff00
  415e4c:	4301      	orrs	r1, r0

00415e4e <.LBB130>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  415e4e:	ea4f 4131 	mov.w	r1, r1, ror #16

00415e52 <.LBE128>:
    XMEMCPY(outBlock,                  &s0, sizeof(s0));
  415e52:	f8ca 1000 	str.w	r1, [sl]

00415e56 <.LBB132>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  415e56:	0a39      	lsrs	r1, r7, #8

00415e58 <.LVL100>:
  415e58:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
  415e5c:	0238      	lsls	r0, r7, #8
  415e5e:	f000 20ff 	and.w	r0, r0, #4278255360	; 0xff00ff00
  415e62:	4301      	orrs	r1, r0

00415e64 <.LBB134>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  415e64:	ea4f 4131 	mov.w	r1, r1, ror #16

00415e68 <.LBE132>:
    XMEMCPY(outBlock + sizeof(s0),     &s1, sizeof(s1));
  415e68:	f8ca 1004 	str.w	r1, [sl, #4]

00415e6c <.LBB136>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  415e6c:	0a29      	lsrs	r1, r5, #8

00415e6e <.LVL102>:
  415e6e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
  415e72:	0228      	lsls	r0, r5, #8
  415e74:	f000 20ff 	and.w	r0, r0, #4278255360	; 0xff00ff00
  415e78:	4301      	orrs	r1, r0

00415e7a <.LBB138>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  415e7a:	ea4f 4131 	mov.w	r1, r1, ror #16

00415e7e <.LBE136>:
    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
  415e7e:	f8ca 1008 	str.w	r1, [sl, #8]

00415e82 <.LBB140>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  415e82:	0a19      	lsrs	r1, r3, #8

00415e84 <.LVL104>:
  415e84:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
  415e88:	021b      	lsls	r3, r3, #8

00415e8a <.LVL105>:
  415e8a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  415e8e:	430b      	orrs	r3, r1

00415e90 <.LBB142>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  415e90:	ea4f 4333 	mov.w	r3, r3, ror #16

00415e94 <.LBE140>:
    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
  415e94:	f8ca 300c 	str.w	r3, [sl, #12]

00415e98 <.LVL107>:
  415e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  415e9c:	00408444 	.word	0x00408444
  415ea0:	0041ba38 	.word	0x0041ba38

Disassembly of section .text.ecc_projective_dbl_point%71:

00415ea4 <ecc_projective_dbl_point>:
{
  415ea4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

00415ea8 <.LCFI15>:
  415ea8:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c

00415eac <.LCFI16>:
   if (P == NULL || R == NULL || modulus == NULL)
  415eac:	2b00      	cmp	r3, #0
  415eae:	bf18      	it	ne
  415eb0:	2900      	cmpne	r1, #0
  415eb2:	f000 819c 	beq.w	4161ee <.LVL255>
  415eb6:	460d      	mov	r5, r1
  415eb8:	4698      	mov	r8, r3
  415eba:	2800      	cmp	r0, #0
  415ebc:	f000 8197 	beq.w	4161ee <.LVL255>
  415ec0:	4606      	mov	r6, r0
   if ((err = mp_init_multi(&t1, &t2, NULL, NULL, NULL, NULL)) != MP_OKAY) {
  415ec2:	2200      	movs	r2, #0

00415ec4 <.LVL116>:
  415ec4:	9201      	str	r2, [sp, #4]
  415ec6:	9200      	str	r2, [sp, #0]
  415ec8:	4613      	mov	r3, r2

00415eca <.LVL117>:
  415eca:	a902      	add	r1, sp, #8

00415ecc <.LVL118>:
  415ecc:	a88c      	add	r0, sp, #560	; 0x230

00415ece <.LVL119>:
  415ece:	f00b f959 	bl	421184 <mp_init_multi>

00415ed2 <.LVL120>:
  415ed2:	4604      	mov	r4, r0
  415ed4:	b120      	cbz	r0, 415ee0 <.LCFI18>

00415ed6 <.LVL121>:
}
  415ed6:	4620      	mov	r0, r4
  415ed8:	f20d 4d5c 	addw	sp, sp, #1116	; 0x45c

00415edc <.LCFI17>:
  415edc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00415ee0 <.LCFI18>:
   y = R->y;
  415ee0:	f505 770a 	add.w	r7, r5, #552	; 0x228

00415ee4 <.LVL123>:
   z = R->z;
  415ee4:	f505 698a 	add.w	r9, r5, #1104	; 0x450

00415ee8 <.LVL124>:
       err = mp_copy(P->x, x);
  415ee8:	4629      	mov	r1, r5
  415eea:	4630      	mov	r0, r6

00415eec <.LVL125>:
  415eec:	f00c fad5 	bl	42249a <.LFE85>

00415ef0 <.LVL126>:
   if (err == MP_OKAY)
  415ef0:	4604      	mov	r4, r0
  415ef2:	b1f0      	cbz	r0, 415f32 <.LVL130>
   if (err == MP_OKAY)
  415ef4:	2c00      	cmp	r4, #0
  415ef6:	d038      	beq.n	415f6a <.LVL139+0x2>
      if (err == MP_OKAY)
  415ef8:	2c00      	cmp	r4, #0
  415efa:	d05a      	beq.n	415fb2 <.LVL153>
      if (err == MP_OKAY)
  415efc:	2c00      	cmp	r4, #0
  415efe:	d07e      	beq.n	415ffe <.LVL166>
      if (err == MP_OKAY)
  415f00:	2c00      	cmp	r4, #0
  415f02:	f000 80a0 	beq.w	416046 <.LVL179>
   if (err == MP_OKAY)
  415f06:	2c00      	cmp	r4, #0
  415f08:	f000 80c7 	beq.w	41609a <.LVL193>
   if (err == MP_OKAY) {
  415f0c:	2c00      	cmp	r4, #0
  415f0e:	f000 80e0 	beq.w	4160d2 <.LVL204+0x2>
   if (err == MP_OKAY)
  415f12:	2c00      	cmp	r4, #0
  415f14:	f000 8100 	beq.w	416118 <.LVL218+0x6>
   if (err == MP_OKAY)
  415f18:	2c00      	cmp	r4, #0
  415f1a:	f000 8116 	beq.w	41614a <.LVL228>
   if (err == MP_OKAY)
  415f1e:	2c00      	cmp	r4, #0
  415f20:	f000 8126 	beq.w	416170 <.LVL234>

00415f24 <.LVL127>:
   mp_clear(&t1);
  415f24:	a88c      	add	r0, sp, #560	; 0x230
  415f26:	f00c fa53 	bl	4223d0 <.LFE16>

00415f2a <.LVL128>:
   mp_clear(&t2);
  415f2a:	a802      	add	r0, sp, #8
  415f2c:	f00c fa50 	bl	4223d0 <.LFE16>

00415f30 <.LVL129>:
   return err;
  415f30:	e7d1      	b.n	415ed6 <.LVL121>

00415f32 <.LVL130>:
       err = mp_copy(P->y, y);
  415f32:	4639      	mov	r1, r7
  415f34:	f506 700a 	add.w	r0, r6, #552	; 0x228

00415f38 <.LVL131>:
  415f38:	f00c faaf 	bl	42249a <.LFE85>

00415f3c <.LVL132>:
   if (err == MP_OKAY)
  415f3c:	4604      	mov	r4, r0
  415f3e:	b9d0      	cbnz	r0, 415f76 <.LVL142>
       err = mp_copy(P->z, z);
  415f40:	4649      	mov	r1, r9
  415f42:	f506 608a 	add.w	r0, r6, #1104	; 0x450

00415f46 <.LVL133>:
  415f46:	f00c faa8 	bl	42249a <.LFE85>

00415f4a <.LVL134>:
   if (err == MP_OKAY)
  415f4a:	4604      	mov	r4, r0
  415f4c:	b9d8      	cbnz	r0, 415f86 <.LVL145>
       err = mp_sqr(z, &t1);
  415f4e:	a98c      	add	r1, sp, #560	; 0x230
  415f50:	4648      	mov	r0, r9

00415f52 <.LVL135>:
  415f52:	f00c fab1 	bl	4224b8 <.LFE105>

00415f56 <.LVL136>:
   if (err == MP_OKAY)
  415f56:	4604      	mov	r4, r0
  415f58:	b9e0      	cbnz	r0, 415f94 <.LVL148>
       err = mp_montgomery_reduce(&t1, modulus, mp);
  415f5a:	f8dd 2478 	ldr.w	r2, [sp, #1144]	; 0x478
  415f5e:	4641      	mov	r1, r8
  415f60:	a88c      	add	r0, sp, #560	; 0x230

00415f62 <.LVL137>:
  415f62:	f00c faae 	bl	4224c2 <.LFE110>

00415f66 <.LVL138>:
  415f66:	4604      	mov	r4, r0

00415f68 <.LVL139>:
  415f68:	e7c4      	b.n	415ef4 <.LVL126+0x4>
       err = mp_mul(z, y, z);
  415f6a:	464a      	mov	r2, r9
  415f6c:	4639      	mov	r1, r7
  415f6e:	4648      	mov	r0, r9

00415f70 <.LVL140>:
  415f70:	f00c fa89 	bl	422486 <.LFE86>

00415f74 <.LVL141>:
  415f74:	4604      	mov	r4, r0

00415f76 <.LVL142>:
   if (err == MP_OKAY)
  415f76:	bb14      	cbnz	r4, 415fbe <.LVL155>
       err = mp_montgomery_reduce(z, modulus, mp);
  415f78:	f8dd 2478 	ldr.w	r2, [sp, #1144]	; 0x478
  415f7c:	4641      	mov	r1, r8
  415f7e:	4648      	mov	r0, r9

00415f80 <.LVL143>:
  415f80:	f00c fa9f 	bl	4224c2 <.LFE110>

00415f84 <.LVL144>:
  415f84:	4604      	mov	r4, r0

00415f86 <.LVL145>:
   if (err == MP_OKAY)
  415f86:	bbc4      	cbnz	r4, 415ffa <.LVL165>
       err = mp_add(z, z, z);
  415f88:	464a      	mov	r2, r9
  415f8a:	4649      	mov	r1, r9
  415f8c:	4648      	mov	r0, r9

00415f8e <.LVL146>:
  415f8e:	f00c fa6b 	bl	422468 <.LFE68>

00415f92 <.LVL147>:
  415f92:	4604      	mov	r4, r0

00415f94 <.LVL148>:
   if (err == MP_OKAY) {
  415f94:	b9e4      	cbnz	r4, 415fd0 <.LVL158>
       if (mp_cmp(z, modulus) != MP_LT)
  415f96:	4641      	mov	r1, r8
  415f98:	4648      	mov	r0, r9

00415f9a <.LVL149>:
  415f9a:	f00c fad7 	bl	42254c <.LFE66>

00415f9e <.LVL150>:
  415f9e:	f1b0 3fff 	cmp.w	r0, #4294967295
  415fa2:	d006      	beq.n	415fb2 <.LVL153>
           err = mp_sub(z, modulus, z);
  415fa4:	464a      	mov	r2, r9
  415fa6:	4641      	mov	r1, r8
  415fa8:	4648      	mov	r0, r9
  415faa:	f00c fa62 	bl	422472 <.LFE71>

00415fae <.LVL151>:
  415fae:	4604      	mov	r4, r0

00415fb0 <.LVL152>:
  415fb0:	e7a2      	b.n	415ef8 <.LVL126+0x8>

00415fb2 <.LVL153>:
          err = mp_sub(x, &t1, &t2);
  415fb2:	aa02      	add	r2, sp, #8
  415fb4:	a98c      	add	r1, sp, #560	; 0x230
  415fb6:	4628      	mov	r0, r5
  415fb8:	f00c fa5b 	bl	422472 <.LFE71>

00415fbc <.LVL154>:
  415fbc:	4604      	mov	r4, r0

00415fbe <.LVL155>:
      if (err == MP_OKAY) {
  415fbe:	bb24      	cbnz	r4, 41600a <.LVL168>
          if (mp_isneg(&t2))
  415fc0:	9b03      	ldr	r3, [sp, #12]
  415fc2:	b9a3      	cbnz	r3, 415fee <.LVL162+0x2>

00415fc4 <.LVL156>:
          err = mp_add(&t1, x, &t1);
  415fc4:	aa8c      	add	r2, sp, #560	; 0x230
  415fc6:	4629      	mov	r1, r5
  415fc8:	4610      	mov	r0, r2
  415fca:	f00c fa4d 	bl	422468 <.LFE68>

00415fce <.LVL157>:
  415fce:	4604      	mov	r4, r0

00415fd0 <.LVL158>:
      if (err == MP_OKAY) {
  415fd0:	bb54      	cbnz	r4, 416028 <.LVL174>
          if (mp_cmp(&t1, modulus) != MP_LT)
  415fd2:	4641      	mov	r1, r8
  415fd4:	a88c      	add	r0, sp, #560	; 0x230

00415fd6 <.LVL159>:
  415fd6:	f00c fab9 	bl	42254c <.LFE66>

00415fda <.LVL160>:
  415fda:	f1b0 3fff 	cmp.w	r0, #4294967295
  415fde:	d00e      	beq.n	415ffe <.LVL166>
              err = mp_sub(&t1, modulus, &t1);
  415fe0:	aa8c      	add	r2, sp, #560	; 0x230
  415fe2:	4641      	mov	r1, r8
  415fe4:	4610      	mov	r0, r2
  415fe6:	f00c fa44 	bl	422472 <.LFE71>

00415fea <.LVL161>:
  415fea:	4604      	mov	r4, r0

00415fec <.LVL162>:
  415fec:	e786      	b.n	415efc <.LVL126+0xc>
              err = mp_add(&t2, modulus, &t2);
  415fee:	aa02      	add	r2, sp, #8
  415ff0:	4641      	mov	r1, r8
  415ff2:	4610      	mov	r0, r2

00415ff4 <.LVL163>:
  415ff4:	f00c fa38 	bl	422468 <.LFE68>

00415ff8 <.LVL164>:
  415ff8:	4604      	mov	r4, r0

00415ffa <.LVL165>:
      if (err == MP_OKAY)
  415ffa:	b974      	cbnz	r4, 41601a <.LVL171>
  415ffc:	e7e2      	b.n	415fc4 <.LVL156>

00415ffe <.LVL166>:
          err = mp_mul(&t1, &t2, &t2);
  415ffe:	aa02      	add	r2, sp, #8
  416000:	4611      	mov	r1, r2
  416002:	a88c      	add	r0, sp, #560	; 0x230
  416004:	f00c fa3f 	bl	422486 <.LFE86>

00416008 <.LVL167>:
  416008:	4604      	mov	r4, r0

0041600a <.LVL168>:
      if (err == MP_OKAY)
  41600a:	bb14      	cbnz	r4, 416052 <.LVL181>
          err = mp_montgomery_reduce(&t2, modulus, mp);
  41600c:	f8dd 2478 	ldr.w	r2, [sp, #1144]	; 0x478
  416010:	4641      	mov	r1, r8
  416012:	a802      	add	r0, sp, #8

00416014 <.LVL169>:
  416014:	f00c fa55 	bl	4224c2 <.LFE110>

00416018 <.LVL170>:
  416018:	4604      	mov	r4, r0

0041601a <.LVL171>:
      if (err == MP_OKAY)
  41601a:	bb44      	cbnz	r4, 41606e <.LVL185>
          err = mp_add(&t2, &t2, &t1);
  41601c:	aa8c      	add	r2, sp, #560	; 0x230
  41601e:	a902      	add	r1, sp, #8
  416020:	4608      	mov	r0, r1

00416022 <.LVL172>:
  416022:	f00c fa21 	bl	422468 <.LFE68>

00416026 <.LVL173>:
  416026:	4604      	mov	r4, r0

00416028 <.LVL174>:
      if (err == MP_OKAY) {
  416028:	bb44      	cbnz	r4, 41607c <.LVL188>
          if (mp_cmp(&t1, modulus) != MP_LT)
  41602a:	4641      	mov	r1, r8
  41602c:	a88c      	add	r0, sp, #560	; 0x230

0041602e <.LVL175>:
  41602e:	f00c fa8d 	bl	42254c <.LFE66>

00416032 <.LVL176>:
  416032:	f1b0 3fff 	cmp.w	r0, #4294967295
  416036:	d006      	beq.n	416046 <.LVL179>
              err = mp_sub(&t1, modulus, &t1);
  416038:	aa8c      	add	r2, sp, #560	; 0x230
  41603a:	4641      	mov	r1, r8
  41603c:	4610      	mov	r0, r2
  41603e:	f00c fa18 	bl	422472 <.LFE71>

00416042 <.LVL177>:
  416042:	4604      	mov	r4, r0

00416044 <.LVL178>:
  416044:	e75c      	b.n	415f00 <.LVL126+0x10>

00416046 <.LVL179>:
          err = mp_add(&t1, &t2, &t1);
  416046:	aa8c      	add	r2, sp, #560	; 0x230
  416048:	a902      	add	r1, sp, #8
  41604a:	4610      	mov	r0, r2
  41604c:	f00c fa0c 	bl	422468 <.LFE68>

00416050 <.LVL180>:
  416050:	4604      	mov	r4, r0

00416052 <.LVL181>:
      if (err == MP_OKAY) {
  416052:	bb3c      	cbnz	r4, 4160a4 <.LVL195>
          if (mp_cmp(&t1, modulus) != MP_LT)
  416054:	4641      	mov	r1, r8
  416056:	a88c      	add	r0, sp, #560	; 0x230

00416058 <.LVL182>:
  416058:	f00c fa78 	bl	42254c <.LFE66>

0041605c <.LVL183>:
  41605c:	f1b0 3fff 	cmp.w	r0, #4294967295
  416060:	d006      	beq.n	416070 <.LVL186>
              err = mp_sub(&t1, modulus, &t1);
  416062:	aa8c      	add	r2, sp, #560	; 0x230
  416064:	4641      	mov	r1, r8
  416066:	4610      	mov	r0, r2
  416068:	f00c fa03 	bl	422472 <.LFE71>

0041606c <.LVL184>:
  41606c:	4604      	mov	r4, r0

0041606e <.LVL185>:
   if (err == MP_OKAY)
  41606e:	bb0c      	cbnz	r4, 4160b4 <.LVL198>

00416070 <.LVL186>:
       err = mp_add(y, y, y);
  416070:	463a      	mov	r2, r7
  416072:	4639      	mov	r1, r7
  416074:	4638      	mov	r0, r7
  416076:	f00c f9f7 	bl	422468 <.LFE68>

0041607a <.LVL187>:
  41607a:	4604      	mov	r4, r0

0041607c <.LVL188>:
   if (err == MP_OKAY) {
  41607c:	bb04      	cbnz	r4, 4160c0 <.LVL201>
       if (mp_cmp(y, modulus) != MP_LT)
  41607e:	4641      	mov	r1, r8
  416080:	4638      	mov	r0, r7

00416082 <.LVL189>:
  416082:	f00c fa63 	bl	42254c <.LFE66>

00416086 <.LVL190>:
  416086:	f1b0 3fff 	cmp.w	r0, #4294967295
  41608a:	d006      	beq.n	41609a <.LVL193>
           err = mp_sub(y, modulus, y);
  41608c:	463a      	mov	r2, r7
  41608e:	4641      	mov	r1, r8
  416090:	4638      	mov	r0, r7
  416092:	f00c f9ee 	bl	422472 <.LFE71>

00416096 <.LVL191>:
  416096:	4604      	mov	r4, r0

00416098 <.LVL192>:
  416098:	e735      	b.n	415f06 <.LVL126+0x16>

0041609a <.LVL193>:
       err = mp_sqr(y, y);
  41609a:	4639      	mov	r1, r7
  41609c:	4638      	mov	r0, r7
  41609e:	f00c fa0b 	bl	4224b8 <.LFE105>

004160a2 <.LVL194>:
  4160a2:	4604      	mov	r4, r0

004160a4 <.LVL195>:
   if (err == MP_OKAY)
  4160a4:	bbac      	cbnz	r4, 416112 <.LVL218>
       err = mp_montgomery_reduce(y, modulus, mp);
  4160a6:	f8dd 2478 	ldr.w	r2, [sp, #1144]	; 0x478
  4160aa:	4641      	mov	r1, r8
  4160ac:	4638      	mov	r0, r7

004160ae <.LVL196>:
  4160ae:	f00c fa08 	bl	4224c2 <.LFE110>

004160b2 <.LVL197>:
  4160b2:	4604      	mov	r4, r0

004160b4 <.LVL198>:
   if (err == MP_OKAY)
  4160b4:	b9bc      	cbnz	r4, 4160e6 <.LVL209>
       err = mp_sqr(y, &t2);
  4160b6:	a902      	add	r1, sp, #8
  4160b8:	4638      	mov	r0, r7

004160ba <.LVL199>:
  4160ba:	f00c f9fd 	bl	4224b8 <.LFE105>

004160be <.LVL200>:
  4160be:	4604      	mov	r4, r0

004160c0 <.LVL201>:
   if (err == MP_OKAY)
  4160c0:	b9c4      	cbnz	r4, 4160f4 <.LVL212>
       err = mp_montgomery_reduce(&t2, modulus, mp);
  4160c2:	f8dd 2478 	ldr.w	r2, [sp, #1144]	; 0x478
  4160c6:	4641      	mov	r1, r8
  4160c8:	a802      	add	r0, sp, #8

004160ca <.LVL202>:
  4160ca:	f00c f9fa 	bl	4224c2 <.LFE110>

004160ce <.LVL203>:
  4160ce:	4604      	mov	r4, r0

004160d0 <.LVL204>:
  4160d0:	e71c      	b.n	415f0c <.LVL126+0x1c>
       if (mp_isodd(&t2) == MP_YES)
  4160d2:	a802      	add	r0, sp, #8

004160d4 <.LVL205>:
  4160d4:	f00c f8a1 	bl	42221a <.LFE0>

004160d8 <.LVL206>:
  4160d8:	2801      	cmp	r0, #1
  4160da:	d014      	beq.n	416106 <.LVL216>

004160dc <.LVL207>:
       err = mp_div_2(&t2, &t2);
  4160dc:	a902      	add	r1, sp, #8
  4160de:	4608      	mov	r0, r1
  4160e0:	f00c f9f4 	bl	4224cc <.LFE111>

004160e4 <.LVL208>:
  4160e4:	4604      	mov	r4, r0

004160e6 <.LVL209>:
   if (err == MP_OKAY)
  4160e6:	bb24      	cbnz	r4, 416132 <.LVL224>
       err = mp_mul(y, x, y);
  4160e8:	463a      	mov	r2, r7
  4160ea:	4629      	mov	r1, r5
  4160ec:	4638      	mov	r0, r7

004160ee <.LVL210>:
  4160ee:	f00c f9ca 	bl	422486 <.LFE86>

004160f2 <.LVL211>:
  4160f2:	4604      	mov	r4, r0

004160f4 <.LVL212>:
   if (err == MP_OKAY)
  4160f4:	bb2c      	cbnz	r4, 416142 <.LVL227>
       err = mp_montgomery_reduce(y, modulus, mp);
  4160f6:	f8dd 2478 	ldr.w	r2, [sp, #1144]	; 0x478
  4160fa:	4641      	mov	r1, r8
  4160fc:	4638      	mov	r0, r7

004160fe <.LVL213>:
  4160fe:	f00c f9e0 	bl	4224c2 <.LFE110>

00416102 <.LVL214>:
  416102:	4604      	mov	r4, r0

00416104 <.LVL215>:
  416104:	e705      	b.n	415f12 <.LVL126+0x22>

00416106 <.LVL216>:
           err = mp_add(&t2, modulus, &t2);
  416106:	aa02      	add	r2, sp, #8
  416108:	4641      	mov	r1, r8
  41610a:	4610      	mov	r0, r2
  41610c:	f00c f9ac 	bl	422468 <.LFE68>

00416110 <.LVL217>:
  416110:	4604      	mov	r4, r0

00416112 <.LVL218>:
   if (err == MP_OKAY)
  416112:	2c00      	cmp	r4, #0
  416114:	d0e2      	beq.n	4160dc <.LVL207>
  416116:	e004      	b.n	416122 <.LVL221>
       err = mp_sqr(&t1, x);
  416118:	4629      	mov	r1, r5
  41611a:	a88c      	add	r0, sp, #560	; 0x230

0041611c <.LVL219>:
  41611c:	f00c f9cc 	bl	4224b8 <.LFE105>

00416120 <.LVL220>:
  416120:	4604      	mov	r4, r0

00416122 <.LVL221>:
   if (err == MP_OKAY)
  416122:	b9c4      	cbnz	r4, 416156 <.LVL230>
       err = mp_montgomery_reduce(x, modulus, mp);
  416124:	f8dd 2478 	ldr.w	r2, [sp, #1144]	; 0x478
  416128:	4641      	mov	r1, r8
  41612a:	4628      	mov	r0, r5

0041612c <.LVL222>:
  41612c:	f00c f9c9 	bl	4224c2 <.LFE110>

00416130 <.LVL223>:
  416130:	4604      	mov	r4, r0

00416132 <.LVL224>:
   if (err == MP_OKAY)
  416132:	2c00      	cmp	r4, #0
  416134:	d151      	bne.n	4161da <.LVL251>
       err = mp_sub(x, y, x);
  416136:	462a      	mov	r2, r5
  416138:	4639      	mov	r1, r7
  41613a:	4628      	mov	r0, r5

0041613c <.LVL225>:
  41613c:	f00c f999 	bl	422472 <.LFE71>

00416140 <.LVL226>:
  416140:	4604      	mov	r4, r0

00416142 <.LVL227>:
   if (err == MP_OKAY) {
  416142:	b98c      	cbnz	r4, 416168 <.LVL233>
       if (mp_isneg(x))
  416144:	686b      	ldr	r3, [r5, #4]
  416146:	2b00      	cmp	r3, #0
  416148:	d13a      	bne.n	4161c0 <.LVL245+0x2>

0041614a <.LVL228>:
       err = mp_sub(x, y, x);
  41614a:	462a      	mov	r2, r5
  41614c:	4639      	mov	r1, r7
  41614e:	4628      	mov	r0, r5
  416150:	f00c f98f 	bl	422472 <.LFE71>

00416154 <.LVL229>:
  416154:	4604      	mov	r4, r0

00416156 <.LVL230>:
   if (err == MP_OKAY) {
  416156:	b98c      	cbnz	r4, 41617c <.LVL236>
       if (mp_isneg(x))
  416158:	686b      	ldr	r3, [r5, #4]
  41615a:	bbc3      	cbnz	r3, 4161ce <.LVL248+0x2>

0041615c <.LVL231>:
       err = mp_sub(y, x, y);
  41615c:	463a      	mov	r2, r7
  41615e:	4629      	mov	r1, r5
  416160:	4638      	mov	r0, r7
  416162:	f00c f986 	bl	422472 <.LFE71>

00416166 <.LVL232>:
  416166:	4604      	mov	r4, r0

00416168 <.LVL233>:
   if (err == MP_OKAY) {
  416168:	b9dc      	cbnz	r4, 4161a2 <.LVL242>
       if (mp_isneg(y))
  41616a:	f8d5 322c 	ldr.w	r3, [r5, #556]	; 0x22c
  41616e:	bbbb      	cbnz	r3, 4161e0 <.LVL251+0x6>

00416170 <.LVL234>:
       err = mp_mul(y, &t1, y);
  416170:	463a      	mov	r2, r7
  416172:	a98c      	add	r1, sp, #560	; 0x230
  416174:	4638      	mov	r0, r7
  416176:	f00c f986 	bl	422486 <.LFE86>

0041617a <.LVL235>:
  41617a:	4604      	mov	r4, r0

0041617c <.LVL236>:
   if (err == MP_OKAY)
  41617c:	2c00      	cmp	r4, #0
  41617e:	f47f aed1 	bne.w	415f24 <.LVL127>
       err = mp_montgomery_reduce(y, modulus, mp);
  416182:	f8dd 2478 	ldr.w	r2, [sp, #1144]	; 0x478
  416186:	4641      	mov	r1, r8
  416188:	4638      	mov	r0, r7

0041618a <.LVL237>:
  41618a:	f00c f99a 	bl	4224c2 <.LFE110>

0041618e <.LVL238>:
  41618e:	4604      	mov	r4, r0

00416190 <.LVL239>:
   if (err == MP_OKAY)
  416190:	2c00      	cmp	r4, #0
  416192:	f47f aec7 	bne.w	415f24 <.LVL127>
       err = mp_sub(y, &t2, y);
  416196:	463a      	mov	r2, r7
  416198:	a902      	add	r1, sp, #8
  41619a:	4638      	mov	r0, r7

0041619c <.LVL240>:
  41619c:	f00c f969 	bl	422472 <.LFE71>

004161a0 <.LVL241>:
  4161a0:	4604      	mov	r4, r0

004161a2 <.LVL242>:
   if (err == MP_OKAY) {
  4161a2:	2c00      	cmp	r4, #0
  4161a4:	f47f aebe 	bne.w	415f24 <.LVL127>
       if (mp_isneg(y))
  4161a8:	f8d5 422c 	ldr.w	r4, [r5, #556]	; 0x22c
  4161ac:	2c00      	cmp	r4, #0
  4161ae:	f43f aeb9 	beq.w	415f24 <.LVL127>
           err = mp_add(y, modulus, y);
  4161b2:	463a      	mov	r2, r7
  4161b4:	4641      	mov	r1, r8
  4161b6:	4638      	mov	r0, r7

004161b8 <.LVL243>:
  4161b8:	f00c f956 	bl	422468 <.LFE68>

004161bc <.LVL244>:
  4161bc:	4604      	mov	r4, r0

004161be <.LVL245>:
  4161be:	e6b1      	b.n	415f24 <.LVL127>
           err = mp_add(x, modulus, x);
  4161c0:	462a      	mov	r2, r5
  4161c2:	4641      	mov	r1, r8
  4161c4:	4628      	mov	r0, r5

004161c6 <.LVL246>:
  4161c6:	f00c f94f 	bl	422468 <.LFE68>

004161ca <.LVL247>:
  4161ca:	4604      	mov	r4, r0

004161cc <.LVL248>:
  4161cc:	e6a4      	b.n	415f18 <.LVL126+0x28>
           err = mp_add(x, modulus, x);
  4161ce:	462a      	mov	r2, r5
  4161d0:	4641      	mov	r1, r8
  4161d2:	4628      	mov	r0, r5

004161d4 <.LVL249>:
  4161d4:	f00c f948 	bl	422468 <.LFE68>

004161d8 <.LVL250>:
  4161d8:	4604      	mov	r4, r0

004161da <.LVL251>:
   if (err == MP_OKAY)
  4161da:	2c00      	cmp	r4, #0
  4161dc:	d1d8      	bne.n	416190 <.LVL239>
  4161de:	e7bd      	b.n	41615c <.LVL231>
           err = mp_add(y, modulus, y);
  4161e0:	463a      	mov	r2, r7
  4161e2:	4641      	mov	r1, r8
  4161e4:	4638      	mov	r0, r7

004161e6 <.LVL252>:
  4161e6:	f00c f93f 	bl	422468 <.LFE68>

004161ea <.LVL253>:
  4161ea:	4604      	mov	r4, r0

004161ec <.LVL254>:
  4161ec:	e697      	b.n	415f1e <.LVL126+0x2e>

004161ee <.LVL255>:
       return ECC_BAD_ARG_E;
  4161ee:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
  4161f2:	e670      	b.n	415ed6 <.LVL121>

Disassembly of section .text._realloc_r%72:

004161f4 <_realloc_r>:
  4161f4:	2900      	cmp	r1, #0
  4161f6:	f000 8095 	beq.w	416324 <.LCFI6>
  4161fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

004161fe <.LCFI0>:
  4161fe:	460d      	mov	r5, r1
  416200:	4616      	mov	r6, r2
  416202:	b083      	sub	sp, #12

00416204 <.LCFI1>:
  416204:	4680      	mov	r8, r0
  416206:	f106 070b 	add.w	r7, r6, #11
  41620a:	f007 fff7 	bl	41e1fc <.LFE173>

0041620e <.LVL1>:
  41620e:	f855 ec04 	ldr.w	lr, [r5, #-4]
  416212:	2f16      	cmp	r7, #22
  416214:	f02e 0403 	bic.w	r4, lr, #3
  416218:	f1a5 0908 	sub.w	r9, r5, #8

0041621c <.LVL2>:
  41621c:	d83c      	bhi.n	416298 <.LVL18>
  41621e:	2210      	movs	r2, #16
  416220:	4617      	mov	r7, r2

00416222 <.LVL3>:
  416222:	42be      	cmp	r6, r7
  416224:	d83d      	bhi.n	4162a2 <.LVL19+0x6>
  416226:	4294      	cmp	r4, r2
  416228:	da43      	bge.n	4162b2 <.LCFI3>
  41622a:	4bc4      	ldr	r3, [pc, #784]	; (41653c <.LVL142+0x2>)
  41622c:	6899      	ldr	r1, [r3, #8]
  41622e:	eb09 0004 	add.w	r0, r9, r4

00416232 <.LVL4>:
  416232:	4288      	cmp	r0, r1
  416234:	f000 80b4 	beq.w	4163a0 <.LVL65>
  416238:	6843      	ldr	r3, [r0, #4]
  41623a:	f023 0101 	bic.w	r1, r3, #1
  41623e:	4401      	add	r1, r0
  416240:	6849      	ldr	r1, [r1, #4]
  416242:	07c9      	lsls	r1, r1, #31
  416244:	d54c      	bpl.n	4162e0 <.LCFI5>

00416246 <.LVL5>:
  416246:	f01e 0f01 	tst.w	lr, #1
  41624a:	f000 809b 	beq.w	416384 <.LBE12>

0041624e <.LVL6>:
  41624e:	4631      	mov	r1, r6
  416250:	4640      	mov	r0, r8
  416252:	f7fa fd45 	bl	410ce0 <.LFE20>

00416256 <.LVL7>:
  416256:	4606      	mov	r6, r0

00416258 <.LVL8>:
  416258:	2800      	cmp	r0, #0
  41625a:	d03a      	beq.n	4162d2 <.LVL26>

0041625c <.LVL9>:
  41625c:	f855 3c04 	ldr.w	r3, [r5, #-4]
  416260:	f023 0301 	bic.w	r3, r3, #1
  416264:	444b      	add	r3, r9
  416266:	f1a0 0208 	sub.w	r2, r0, #8

0041626a <.LVL10>:
  41626a:	429a      	cmp	r2, r3
  41626c:	f000 8121 	beq.w	4164b2 <.LBE24>

00416270 <.LBB2>:
  416270:	1f22      	subs	r2, r4, #4

00416272 <.LVL11>:
  416272:	2a24      	cmp	r2, #36	; 0x24
  416274:	f200 8107 	bhi.w	416486 <.LBB21>

00416278 <.LBB3>:
  416278:	2a13      	cmp	r2, #19
  41627a:	f200 80db 	bhi.w	416434 <.LBB18>
  41627e:	4603      	mov	r3, r0
  416280:	462a      	mov	r2, r5

00416282 <.LVL13>:
  416282:	6811      	ldr	r1, [r2, #0]
  416284:	6019      	str	r1, [r3, #0]

00416286 <.LVL14>:
  416286:	6851      	ldr	r1, [r2, #4]
  416288:	6059      	str	r1, [r3, #4]
  41628a:	6892      	ldr	r2, [r2, #8]

0041628c <.LVL15>:
  41628c:	609a      	str	r2, [r3, #8]

0041628e <.LBE2>:
  41628e:	4629      	mov	r1, r5
  416290:	4640      	mov	r0, r8
  416292:	f003 f875 	bl	419380 <_free_r>

00416296 <.LVL17>:
  416296:	e01c      	b.n	4162d2 <.LVL26>

00416298 <.LVL18>:
  416298:	f027 0707 	bic.w	r7, r7, #7

0041629c <.LVL19>:
  41629c:	2f00      	cmp	r7, #0
  41629e:	463a      	mov	r2, r7
  4162a0:	dabf      	bge.n	416222 <.LVL3>
  4162a2:	2600      	movs	r6, #0

004162a4 <.LVL20>:
  4162a4:	230c      	movs	r3, #12
  4162a6:	4630      	mov	r0, r6
  4162a8:	f8c8 3000 	str.w	r3, [r8]
  4162ac:	b003      	add	sp, #12

004162ae <.LCFI2>:
  4162ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004162b2 <.LCFI3>:
  4162b2:	462e      	mov	r6, r5

004162b4 <.L11>:
  4162b4:	1be3      	subs	r3, r4, r7

004162b6 <.LVL23>:
  4162b6:	2b0f      	cmp	r3, #15
  4162b8:	d81e      	bhi.n	4162f8 <.LVL35>
  4162ba:	f8d9 3004 	ldr.w	r3, [r9, #4]

004162be <.LVL24>:
  4162be:	f003 0301 	and.w	r3, r3, #1
  4162c2:	4323      	orrs	r3, r4
  4162c4:	444c      	add	r4, r9

004162c6 <.LVL25>:
  4162c6:	f8c9 3004 	str.w	r3, [r9, #4]
  4162ca:	6863      	ldr	r3, [r4, #4]
  4162cc:	f043 0301 	orr.w	r3, r3, #1
  4162d0:	6063      	str	r3, [r4, #4]

004162d2 <.LVL26>:
  4162d2:	4640      	mov	r0, r8
  4162d4:	f00c f972 	bl	4225bc <.LFE144>

004162d8 <.LVL27>:
  4162d8:	4630      	mov	r0, r6
  4162da:	b003      	add	sp, #12

004162dc <.LCFI4>:
  4162dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004162e0 <.LCFI5>:
  4162e0:	f023 0303 	bic.w	r3, r3, #3

004162e4 <.LVL29>:
  4162e4:	18e1      	adds	r1, r4, r3
  4162e6:	4291      	cmp	r1, r2
  4162e8:	db1f      	blt.n	41632a <.LCFI7>
  4162ea:	68c3      	ldr	r3, [r0, #12]

004162ec <.LVL30>:
  4162ec:	6882      	ldr	r2, [r0, #8]

004162ee <.LVL31>:
  4162ee:	462e      	mov	r6, r5

004162f0 <.LVL32>:
  4162f0:	60d3      	str	r3, [r2, #12]
  4162f2:	460c      	mov	r4, r1

004162f4 <.LVL33>:
  4162f4:	609a      	str	r2, [r3, #8]

004162f6 <.LVL34>:
  4162f6:	e7dd      	b.n	4162b4 <.L11>

004162f8 <.LVL35>:
  4162f8:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4162fc:	eb09 0107 	add.w	r1, r9, r7

00416300 <.LVL36>:
  416300:	f002 0201 	and.w	r2, r2, #1
  416304:	444c      	add	r4, r9

00416306 <.LVL37>:
  416306:	f043 0301 	orr.w	r3, r3, #1

0041630a <.LVL38>:
  41630a:	4317      	orrs	r7, r2

0041630c <.LVL39>:
  41630c:	f8c9 7004 	str.w	r7, [r9, #4]
  416310:	604b      	str	r3, [r1, #4]
  416312:	6863      	ldr	r3, [r4, #4]
  416314:	f043 0301 	orr.w	r3, r3, #1
  416318:	3108      	adds	r1, #8

0041631a <.LVL40>:
  41631a:	6063      	str	r3, [r4, #4]
  41631c:	4640      	mov	r0, r8
  41631e:	f003 f82f 	bl	419380 <_free_r>

00416322 <.LVL41>:
  416322:	e7d6      	b.n	4162d2 <.LVL26>

00416324 <.LCFI6>:
  416324:	4611      	mov	r1, r2

00416326 <.LVL43>:
  416326:	f7fa bcdb 	b.w	410ce0 <.LFE20>

0041632a <.LCFI7>:
  41632a:	f01e 0f01 	tst.w	lr, #1
  41632e:	d18e      	bne.n	41624e <.LVL6>
  416330:	f855 1c08 	ldr.w	r1, [r5, #-8]
  416334:	eba9 0a01 	sub.w	sl, r9, r1

00416338 <.LVL45>:
  416338:	f8da 1004 	ldr.w	r1, [sl, #4]
  41633c:	f021 0103 	bic.w	r1, r1, #3

00416340 <.LVL46>:
  416340:	440b      	add	r3, r1

00416342 <.LVL47>:
  416342:	4423      	add	r3, r4
  416344:	4293      	cmp	r3, r2
  416346:	db25      	blt.n	416394 <.LVL63>
  416348:	68c2      	ldr	r2, [r0, #12]

0041634a <.LVL48>:
  41634a:	6881      	ldr	r1, [r0, #8]

0041634c <.LVL49>:
  41634c:	4656      	mov	r6, sl

0041634e <.LVL50>:
  41634e:	60ca      	str	r2, [r1, #12]
  416350:	6091      	str	r1, [r2, #8]

00416352 <.LVL51>:
  416352:	f8da 100c 	ldr.w	r1, [sl, #12]

00416356 <.LVL52>:
  416356:	f856 0f08 	ldr.w	r0, [r6, #8]!

0041635a <.LBB7>:
  41635a:	1f22      	subs	r2, r4, #4
  41635c:	2a24      	cmp	r2, #36	; 0x24

0041635e <.LBE7>:
  41635e:	60c1      	str	r1, [r0, #12]
  416360:	6088      	str	r0, [r1, #8]

00416362 <.LBB12>:
  416362:	f200 8094 	bhi.w	41648e <.LBB22>

00416366 <.LBB8>:
  416366:	2a13      	cmp	r2, #19
  416368:	d96f      	bls.n	41644a <.LBB19>

0041636a <.LVL56>:
  41636a:	6829      	ldr	r1, [r5, #0]

0041636c <.LVL57>:
  41636c:	f8ca 1008 	str.w	r1, [sl, #8]

00416370 <.LVL58>:
  416370:	6869      	ldr	r1, [r5, #4]
  416372:	f8ca 100c 	str.w	r1, [sl, #12]
  416376:	2a1b      	cmp	r2, #27
  416378:	f200 80a2 	bhi.w	4164c0 <.LBB10>
  41637c:	3508      	adds	r5, #8

0041637e <.LVL59>:
  41637e:	f10a 0210 	add.w	r2, sl, #16

00416382 <.LVL60>:
  416382:	e063      	b.n	41644c <.LVL92>

00416384 <.LBE12>:
  416384:	f855 3c08 	ldr.w	r3, [r5, #-8]
  416388:	eba9 0a03 	sub.w	sl, r9, r3

0041638c <.LVL62>:
  41638c:	f8da 1004 	ldr.w	r1, [sl, #4]
  416390:	f021 0103 	bic.w	r1, r1, #3

00416394 <.LVL63>:
  416394:	1863      	adds	r3, r4, r1
  416396:	4293      	cmp	r3, r2
  416398:	f6ff af59 	blt.w	41624e <.LVL6>
  41639c:	4656      	mov	r6, sl

0041639e <.LVL64>:
  41639e:	e7d8      	b.n	416352 <.LVL51>

004163a0 <.LVL65>:
  4163a0:	6841      	ldr	r1, [r0, #4]
  4163a2:	f021 0b03 	bic.w	fp, r1, #3

004163a6 <.LVL66>:
  4163a6:	44a3      	add	fp, r4

004163a8 <.LVL67>:
  4163a8:	f107 0010 	add.w	r0, r7, #16

004163ac <.LVL68>:
  4163ac:	4583      	cmp	fp, r0
  4163ae:	da56      	bge.n	41645e <.LBE20>

004163b0 <.LVL69>:
  4163b0:	f01e 0f01 	tst.w	lr, #1
  4163b4:	f47f af4b 	bne.w	41624e <.LVL6>
  4163b8:	f855 1c08 	ldr.w	r1, [r5, #-8]

004163bc <.LVL70>:
  4163bc:	eba9 0a01 	sub.w	sl, r9, r1

004163c0 <.LVL71>:
  4163c0:	f8da 1004 	ldr.w	r1, [sl, #4]
  4163c4:	f021 0103 	bic.w	r1, r1, #3

004163c8 <.LVL72>:
  4163c8:	448b      	add	fp, r1
  4163ca:	4558      	cmp	r0, fp
  4163cc:	dce2      	bgt.n	416394 <.LVL63>
  4163ce:	4656      	mov	r6, sl

004163d0 <.LVL73>:
  4163d0:	f8da 100c 	ldr.w	r1, [sl, #12]

004163d4 <.LVL74>:
  4163d4:	f856 0f08 	ldr.w	r0, [r6, #8]!

004163d8 <.LBB13>:
  4163d8:	1f22      	subs	r2, r4, #4
  4163da:	2a24      	cmp	r2, #36	; 0x24

004163dc <.LBE13>:
  4163dc:	60c1      	str	r1, [r0, #12]
  4163de:	6088      	str	r0, [r1, #8]

004163e0 <.LBB17>:
  4163e0:	f200 808f 	bhi.w	416502 <.LBE15>

004163e4 <.LBB14>:
  4163e4:	2a13      	cmp	r2, #19
  4163e6:	f240 808a 	bls.w	4164fe <.LBB15>

004163ea <.LVL78>:
  4163ea:	6829      	ldr	r1, [r5, #0]

004163ec <.LVL79>:
  4163ec:	f8ca 1008 	str.w	r1, [sl, #8]

004163f0 <.LVL80>:
  4163f0:	6869      	ldr	r1, [r5, #4]
  4163f2:	f8ca 100c 	str.w	r1, [sl, #12]
  4163f6:	2a1b      	cmp	r2, #27
  4163f8:	f200 808a 	bhi.w	416510 <.LBB16>
  4163fc:	3508      	adds	r5, #8

004163fe <.LVL81>:
  4163fe:	f10a 0210 	add.w	r2, sl, #16

00416402 <.LVL82>:
  416402:	6829      	ldr	r1, [r5, #0]
  416404:	6011      	str	r1, [r2, #0]

00416406 <.LVL83>:
  416406:	6869      	ldr	r1, [r5, #4]
  416408:	6051      	str	r1, [r2, #4]
  41640a:	68a9      	ldr	r1, [r5, #8]
  41640c:	6091      	str	r1, [r2, #8]

0041640e <.LBE14>:
  41640e:	eb0a 0107 	add.w	r1, sl, r7
  416412:	ebab 0207 	sub.w	r2, fp, r7
  416416:	f042 0201 	orr.w	r2, r2, #1
  41641a:	6099      	str	r1, [r3, #8]
  41641c:	604a      	str	r2, [r1, #4]
  41641e:	f8da 3004 	ldr.w	r3, [sl, #4]
  416422:	f003 0301 	and.w	r3, r3, #1
  416426:	431f      	orrs	r7, r3

00416428 <.LVL85>:
  416428:	4640      	mov	r0, r8
  41642a:	f8ca 7004 	str.w	r7, [sl, #4]
  41642e:	f00c f8c5 	bl	4225bc <.LFE144>

00416432 <.LVL86>:
  416432:	e751      	b.n	4162d8 <.LVL27>

00416434 <.LBB18>:
  416434:	682b      	ldr	r3, [r5, #0]
  416436:	6003      	str	r3, [r0, #0]

00416438 <.LVL88>:
  416438:	686b      	ldr	r3, [r5, #4]
  41643a:	6043      	str	r3, [r0, #4]
  41643c:	2a1b      	cmp	r2, #27
  41643e:	d82d      	bhi.n	41649c <.LBB24>
  416440:	f100 0308 	add.w	r3, r0, #8

00416444 <.LVL89>:
  416444:	f105 0208 	add.w	r2, r5, #8

00416448 <.LVL90>:
  416448:	e71b      	b.n	416282 <.LVL13>

0041644a <.LBB19>:
  41644a:	4632      	mov	r2, r6

0041644c <.LVL92>:
  41644c:	6829      	ldr	r1, [r5, #0]
  41644e:	6011      	str	r1, [r2, #0]

00416450 <.LVL93>:
  416450:	6869      	ldr	r1, [r5, #4]
  416452:	6051      	str	r1, [r2, #4]
  416454:	68a9      	ldr	r1, [r5, #8]
  416456:	6091      	str	r1, [r2, #8]

00416458 <.LBE19>:
  416458:	461c      	mov	r4, r3

0041645a <.LBB20>:
  41645a:	46d1      	mov	r9, sl

0041645c <.LVL95>:
  41645c:	e72a      	b.n	4162b4 <.L11>

0041645e <.LBE20>:
  41645e:	eb09 0107 	add.w	r1, r9, r7

00416462 <.LVL97>:
  416462:	ebab 0b07 	sub.w	fp, fp, r7

00416466 <.LVL98>:
  416466:	f04b 0201 	orr.w	r2, fp, #1
  41646a:	6099      	str	r1, [r3, #8]
  41646c:	604a      	str	r2, [r1, #4]

0041646e <.LVL99>:
  41646e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  416472:	f003 0301 	and.w	r3, r3, #1
  416476:	431f      	orrs	r7, r3

00416478 <.LVL100>:
  416478:	4640      	mov	r0, r8

0041647a <.LVL101>:
  41647a:	f845 7c04 	str.w	r7, [r5, #-4]
  41647e:	f00c f89d 	bl	4225bc <.LFE144>

00416482 <.LVL102>:
  416482:	462e      	mov	r6, r5

00416484 <.LVL103>:
  416484:	e728      	b.n	4162d8 <.LVL27>

00416486 <.LBB21>:
  416486:	4629      	mov	r1, r5
  416488:	f006 fb72 	bl	41cb70 <memmove>

0041648c <.LVL105>:
  41648c:	e6ff      	b.n	41628e <.LBE2>

0041648e <.LBB22>:
  41648e:	4629      	mov	r1, r5

00416490 <.LVL107>:
  416490:	4630      	mov	r0, r6

00416492 <.LBE22>:
  416492:	461c      	mov	r4, r3

00416494 <.LBB23>:
  416494:	46d1      	mov	r9, sl

00416496 <.LVL110>:
  416496:	f006 fb6b 	bl	41cb70 <memmove>

0041649a <.LVL111>:
  41649a:	e70b      	b.n	4162b4 <.L11>

0041649c <.LBB24>:
  41649c:	68ab      	ldr	r3, [r5, #8]
  41649e:	6083      	str	r3, [r0, #8]

004164a0 <.LVL113>:
  4164a0:	68eb      	ldr	r3, [r5, #12]
  4164a2:	60c3      	str	r3, [r0, #12]
  4164a4:	2a24      	cmp	r2, #36	; 0x24
  4164a6:	d017      	beq.n	4164d8 <.LBB26>
  4164a8:	f100 0310 	add.w	r3, r0, #16

004164ac <.LVL114>:
  4164ac:	f105 0210 	add.w	r2, r5, #16

004164b0 <.LVL115>:
  4164b0:	e6e7      	b.n	416282 <.LVL13>

004164b2 <.LBE24>:
  4164b2:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4164b6:	f023 0303 	bic.w	r3, r3, #3
  4164ba:	441c      	add	r4, r3

004164bc <.LVL117>:
  4164bc:	462e      	mov	r6, r5
  4164be:	e6f9      	b.n	4162b4 <.L11>

004164c0 <.LBB10>:
  4164c0:	68a9      	ldr	r1, [r5, #8]
  4164c2:	f8ca 1010 	str.w	r1, [sl, #16]

004164c6 <.LVL119>:
  4164c6:	68e9      	ldr	r1, [r5, #12]
  4164c8:	f8ca 1014 	str.w	r1, [sl, #20]
  4164cc:	2a24      	cmp	r2, #36	; 0x24
  4164ce:	d00c      	beq.n	4164ea <.LBB11>
  4164d0:	3510      	adds	r5, #16

004164d2 <.LVL120>:
  4164d2:	f10a 0218 	add.w	r2, sl, #24

004164d6 <.LVL121>:
  4164d6:	e7b9      	b.n	41644c <.LVL92>

004164d8 <.LBB26>:
  4164d8:	692b      	ldr	r3, [r5, #16]
  4164da:	6103      	str	r3, [r0, #16]
  4164dc:	696b      	ldr	r3, [r5, #20]
  4164de:	6143      	str	r3, [r0, #20]
  4164e0:	f105 0218 	add.w	r2, r5, #24

004164e4 <.LVL123>:
  4164e4:	f100 0318 	add.w	r3, r0, #24

004164e8 <.LVL124>:
  4164e8:	e6cb      	b.n	416282 <.LVL13>

004164ea <.LBB11>:
  4164ea:	692a      	ldr	r2, [r5, #16]

004164ec <.LVL126>:
  4164ec:	f8ca 2018 	str.w	r2, [sl, #24]
  4164f0:	696a      	ldr	r2, [r5, #20]
  4164f2:	f8ca 201c 	str.w	r2, [sl, #28]
  4164f6:	3518      	adds	r5, #24

004164f8 <.LVL127>:
  4164f8:	f10a 0220 	add.w	r2, sl, #32

004164fc <.LVL128>:
  4164fc:	e7a6      	b.n	41644c <.LVL92>

004164fe <.LBB15>:
  4164fe:	4632      	mov	r2, r6

00416500 <.LVL130>:
  416500:	e77f      	b.n	416402 <.LVL82>

00416502 <.LBE15>:
  416502:	4629      	mov	r1, r5

00416504 <.LVL132>:
  416504:	4630      	mov	r0, r6

00416506 <.LVL133>:
  416506:	9301      	str	r3, [sp, #4]
  416508:	f006 fb32 	bl	41cb70 <memmove>

0041650c <.LVL134>:
  41650c:	9b01      	ldr	r3, [sp, #4]
  41650e:	e77e      	b.n	41640e <.LBE14>

00416510 <.LBB16>:
  416510:	68a9      	ldr	r1, [r5, #8]
  416512:	f8ca 1010 	str.w	r1, [sl, #16]

00416516 <.LVL136>:
  416516:	68e9      	ldr	r1, [r5, #12]
  416518:	f8ca 1014 	str.w	r1, [sl, #20]
  41651c:	2a24      	cmp	r2, #36	; 0x24
  41651e:	d003      	beq.n	416528 <.LVL139>
  416520:	3510      	adds	r5, #16

00416522 <.LVL137>:
  416522:	f10a 0218 	add.w	r2, sl, #24

00416526 <.LVL138>:
  416526:	e76c      	b.n	416402 <.LVL82>

00416528 <.LVL139>:
  416528:	692a      	ldr	r2, [r5, #16]

0041652a <.LVL140>:
  41652a:	f8ca 2018 	str.w	r2, [sl, #24]
  41652e:	696a      	ldr	r2, [r5, #20]
  416530:	f8ca 201c 	str.w	r2, [sl, #28]
  416534:	3518      	adds	r5, #24

00416536 <.LVL141>:
  416536:	f10a 0220 	add.w	r2, sl, #32

0041653a <.LVL142>:
  41653a:	e762      	b.n	416402 <.LVL82>
  41653c:	2040cc80 	.word	0x2040cc80

Disassembly of section .text.compress_block%73:

00416540 <compress_block>:
{
  416540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00416544 <.LCFI7>:
  416544:	b083      	sub	sp, #12

00416546 <.LCFI8>:
  416546:	9201      	str	r2, [sp, #4]

00416548 <.LVL120>:
    if (s->last_lit != 0) do {
  416548:	f500 53b5 	add.w	r3, r0, #5792	; 0x16a0
  41654c:	681b      	ldr	r3, [r3, #0]
  41654e:	2b00      	cmp	r3, #0
  416550:	f000 8153 	beq.w	4167fa <.LBB44>
  416554:	2400      	movs	r4, #0
        dist = s->d_buf[lx];
  416556:	f241 6ba4 	movw	fp, #5796	; 0x16a4
  41655a:	4483      	add	fp, r0
        lc = s->l_buf[lx++];
  41655c:	f241 6a98 	movw	sl, #5784	; 0x1698
  416560:	4482      	add	sl, r0

00416562 <.LBB28>:
            send_code(s, code+LITERALS+1, ltree); /* send the length code */
  416562:	f241 66bc 	movw	r6, #5820	; 0x16bc
  416566:	4406      	add	r6, r0

00416568 <.LBE28>:
            code = d_code(dist);
  416568:	9100      	str	r1, [sp, #0]
  41656a:	e011      	b.n	416590 <.LVL125>

0041656c <.LBB30>:
            send_code(s, lc, ltree); /* send a literal byte */
  41656c:	f241 64b8 	movw	r4, #5816	; 0x16b8
  416570:	9900      	ldr	r1, [sp, #0]
  416572:	f831 2022 	ldrh.w	r2, [r1, r2, lsl #2]

00416576 <.LVL122>:
  416576:	409a      	lsls	r2, r3
  416578:	5b07      	ldrh	r7, [r0, r4]
  41657a:	433a      	orrs	r2, r7
  41657c:	5302      	strh	r2, [r0, r4]

0041657e <.LVL123>:
  41657e:	442b      	add	r3, r5
  416580:	6033      	str	r3, [r6, #0]

00416582 <.LBE30>:
        lc = s->l_buf[lx++];
  416582:	464c      	mov	r4, r9
    } while (lx < s->last_lit);
  416584:	f500 53b5 	add.w	r3, r0, #5792	; 0x16a0
  416588:	681b      	ldr	r3, [r3, #0]
  41658a:	4599      	cmp	r9, r3
  41658c:	f080 8134 	bcs.w	4167f8 <.LVL176>

00416590 <.LVL125>:
        dist = s->d_buf[lx];
  416590:	f8db 3000 	ldr.w	r3, [fp]
  416594:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]

00416598 <.LVL126>:
        lc = s->l_buf[lx++];
  416598:	f104 0901 	add.w	r9, r4, #1

0041659c <.LVL127>:
  41659c:	f8da 2000 	ldr.w	r2, [sl]
  4165a0:	5d12      	ldrb	r2, [r2, r4]

004165a2 <.LVL128>:
        if (dist == 0) {
  4165a2:	bb53      	cbnz	r3, 4165fa <.LBE32>

004165a4 <.LBB32>:
            send_code(s, lc, ltree); /* send a literal byte */
  4165a4:	9900      	ldr	r1, [sp, #0]
  4165a6:	eb01 0382 	add.w	r3, r1, r2, lsl #2

004165aa <.LVL129>:
  4165aa:	885d      	ldrh	r5, [r3, #2]

004165ac <.LVL130>:
  4165ac:	6833      	ldr	r3, [r6, #0]
  4165ae:	f1c5 0410 	rsb	r4, r5, #16

004165b2 <.LVL131>:
  4165b2:	42a3      	cmp	r3, r4
  4165b4:	ddda      	ble.n	41656c <.LBB30>

004165b6 <.LBB31>:
  4165b6:	f831 e022 	ldrh.w	lr, [r1, r2, lsl #2]

004165ba <.LVL132>:
  4165ba:	f241 67b8 	movw	r7, #5816	; 0x16b8
  4165be:	fa0e f403 	lsl.w	r4, lr, r3
  4165c2:	5bc3      	ldrh	r3, [r0, r7]
  4165c4:	431c      	orrs	r4, r3
  4165c6:	b224      	sxth	r4, r4
  4165c8:	53c4      	strh	r4, [r0, r7]

004165ca <.LVL133>:
  4165ca:	6943      	ldr	r3, [r0, #20]
  4165cc:	1c5a      	adds	r2, r3, #1

004165ce <.LVL134>:
  4165ce:	6142      	str	r2, [r0, #20]
  4165d0:	6882      	ldr	r2, [r0, #8]
  4165d2:	54d4      	strb	r4, [r2, r3]
  4165d4:	6882      	ldr	r2, [r0, #8]
  4165d6:	6944      	ldr	r4, [r0, #20]
  4165d8:	1c63      	adds	r3, r4, #1
  4165da:	6143      	str	r3, [r0, #20]
  4165dc:	5bc3      	ldrh	r3, [r0, r7]
  4165de:	0a1b      	lsrs	r3, r3, #8
  4165e0:	5513      	strb	r3, [r2, r4]
  4165e2:	6832      	ldr	r2, [r6, #0]
  4165e4:	f1c2 0310 	rsb	r3, r2, #16
  4165e8:	fa4e fe03 	asr.w	lr, lr, r3

004165ec <.LVL135>:
  4165ec:	f820 e007 	strh.w	lr, [r0, r7]
  4165f0:	f1a5 0310 	sub.w	r3, r5, #16
  4165f4:	4413      	add	r3, r2
  4165f6:	6033      	str	r3, [r6, #0]

004165f8 <.LBE31>:
  4165f8:	e7c3      	b.n	416582 <.LBE30>

004165fa <.LBE32>:
            code = _length_code[lc];
  4165fa:	4c9c      	ldr	r4, [pc, #624]	; (41686c <.LBE45+0x2>)
  4165fc:	f814 e002 	ldrb.w	lr, [r4, r2]

00416600 <.LBB33>:
            send_code(s, code+LITERALS+1, ltree); /* send the length code */
  416600:	f20e 1701 	addw	r7, lr, #257	; 0x101
  416604:	9900      	ldr	r1, [sp, #0]
  416606:	eb01 0487 	add.w	r4, r1, r7, lsl #2
  41660a:	8865      	ldrh	r5, [r4, #2]

0041660c <.LVL138>:
  41660c:	6834      	ldr	r4, [r6, #0]
  41660e:	f1c5 0c10 	rsb	ip, r5, #16
  416612:	4564      	cmp	r4, ip
  416614:	f340 80b6 	ble.w	416784 <.LBB40>

00416618 <.LBB29>:
  416618:	f831 8027 	ldrh.w	r8, [r1, r7, lsl #2]

0041661c <.LVL139>:
  41661c:	f241 6cb8 	movw	ip, #5816	; 0x16b8
  416620:	fa08 f404 	lsl.w	r4, r8, r4
  416624:	f830 700c 	ldrh.w	r7, [r0, ip]
  416628:	433c      	orrs	r4, r7
  41662a:	b224      	sxth	r4, r4
  41662c:	f820 400c 	strh.w	r4, [r0, ip]
  416630:	6947      	ldr	r7, [r0, #20]
  416632:	1c79      	adds	r1, r7, #1
  416634:	6141      	str	r1, [r0, #20]
  416636:	6881      	ldr	r1, [r0, #8]
  416638:	55cc      	strb	r4, [r1, r7]
  41663a:	6944      	ldr	r4, [r0, #20]
  41663c:	1c67      	adds	r7, r4, #1
  41663e:	6147      	str	r7, [r0, #20]
  416640:	f830 700c 	ldrh.w	r7, [r0, ip]
  416644:	0a3f      	lsrs	r7, r7, #8
  416646:	6881      	ldr	r1, [r0, #8]
  416648:	550f      	strb	r7, [r1, r4]
  41664a:	6834      	ldr	r4, [r6, #0]
  41664c:	f1c4 0710 	rsb	r7, r4, #16
  416650:	fa48 f807 	asr.w	r8, r8, r7

00416654 <.LVL140>:
  416654:	f820 800c 	strh.w	r8, [r0, ip]
  416658:	3d10      	subs	r5, #16

0041665a <.LVL141>:
  41665a:	442c      	add	r4, r5
  41665c:	6034      	str	r4, [r6, #0]

0041665e <.LBE29>:
            extra = extra_lbits[code];
  41665e:	4c84      	ldr	r4, [pc, #528]	; (416870 <.LBE45+0x6>)
  416660:	f854 502e 	ldr.w	r5, [r4, lr, lsl #2]

00416664 <.LVL143>:
            if (extra != 0) {
  416664:	b365      	cbz	r5, 4166c0 <.LBE34>
                lc -= base_length[code];
  416666:	4c83      	ldr	r4, [pc, #524]	; (416874 <.LBE45+0xa>)
  416668:	f854 402e 	ldr.w	r4, [r4, lr, lsl #2]
  41666c:	1b12      	subs	r2, r2, r4

0041666e <.LBB34>:
                send_bits(s, lc, extra);       /* send the extra length bits */
  41666e:	6837      	ldr	r7, [r6, #0]
  416670:	f1c5 0410 	rsb	r4, r5, #16
  416674:	42a7      	cmp	r7, r4
  416676:	f340 8094 	ble.w	4167a2 <.LBB41>

0041667a <.LVL145>:
  41667a:	b292      	uxth	r2, r2

0041667c <.LBB35>:
  41667c:	f241 6eb8 	movw	lr, #5816	; 0x16b8

00416680 <.LVL147>:
  416680:	fa02 f707 	lsl.w	r7, r2, r7
  416684:	f830 400e 	ldrh.w	r4, [r0, lr]
  416688:	4327      	orrs	r7, r4
  41668a:	b23f      	sxth	r7, r7
  41668c:	f820 700e 	strh.w	r7, [r0, lr]
  416690:	6944      	ldr	r4, [r0, #20]
  416692:	f104 0801 	add.w	r8, r4, #1
  416696:	f8c0 8014 	str.w	r8, [r0, #20]
  41669a:	6881      	ldr	r1, [r0, #8]
  41669c:	550f      	strb	r7, [r1, r4]
  41669e:	6944      	ldr	r4, [r0, #20]
  4166a0:	1c67      	adds	r7, r4, #1
  4166a2:	6147      	str	r7, [r0, #20]
  4166a4:	f830 700e 	ldrh.w	r7, [r0, lr]
  4166a8:	0a3f      	lsrs	r7, r7, #8
  4166aa:	6881      	ldr	r1, [r0, #8]
  4166ac:	550f      	strb	r7, [r1, r4]
  4166ae:	6834      	ldr	r4, [r6, #0]
  4166b0:	f1c4 0710 	rsb	r7, r4, #16
  4166b4:	413a      	asrs	r2, r7
  4166b6:	f820 200e 	strh.w	r2, [r0, lr]
  4166ba:	3d10      	subs	r5, #16

004166bc <.LVL148>:
  4166bc:	4425      	add	r5, r4

004166be <.LVL149>:
  4166be:	6035      	str	r5, [r6, #0]

004166c0 <.LBE34>:
            dist--; /* dist is now the match distance - 1 */
  4166c0:	3b01      	subs	r3, #1
            code = d_code(dist);
  4166c2:	2bff      	cmp	r3, #255	; 0xff
  4166c4:	d879      	bhi.n	4167ba <.LBE41>
  4166c6:	4a6c      	ldr	r2, [pc, #432]	; (416878 <.LBE45+0xe>)
  4166c8:	5cd7      	ldrb	r7, [r2, r3]

004166ca <.LBB36>:
            send_code(s, code, dtree);       /* send the distance code */
  4166ca:	9901      	ldr	r1, [sp, #4]
  4166cc:	eb01 0287 	add.w	r2, r1, r7, lsl #2
  4166d0:	8855      	ldrh	r5, [r2, #2]

004166d2 <.LVL152>:
  4166d2:	6832      	ldr	r2, [r6, #0]
  4166d4:	f1c5 0410 	rsb	r4, r5, #16
  4166d8:	42a2      	cmp	r2, r4
  4166da:	dd74      	ble.n	4167c6 <.LBB42>

004166dc <.LBB37>:
  4166dc:	f831 c027 	ldrh.w	ip, [r1, r7, lsl #2]

004166e0 <.LVL153>:
  4166e0:	f241 6eb8 	movw	lr, #5816	; 0x16b8
  4166e4:	fa0c f202 	lsl.w	r2, ip, r2
  4166e8:	f830 400e 	ldrh.w	r4, [r0, lr]
  4166ec:	4322      	orrs	r2, r4
  4166ee:	b212      	sxth	r2, r2
  4166f0:	f820 200e 	strh.w	r2, [r0, lr]
  4166f4:	6944      	ldr	r4, [r0, #20]
  4166f6:	f104 0801 	add.w	r8, r4, #1
  4166fa:	f8c0 8014 	str.w	r8, [r0, #20]
  4166fe:	6881      	ldr	r1, [r0, #8]
  416700:	550a      	strb	r2, [r1, r4]
  416702:	6942      	ldr	r2, [r0, #20]
  416704:	1c54      	adds	r4, r2, #1
  416706:	6144      	str	r4, [r0, #20]
  416708:	f830 400e 	ldrh.w	r4, [r0, lr]
  41670c:	0a24      	lsrs	r4, r4, #8
  41670e:	6881      	ldr	r1, [r0, #8]
  416710:	548c      	strb	r4, [r1, r2]
  416712:	6832      	ldr	r2, [r6, #0]
  416714:	f1c2 0410 	rsb	r4, r2, #16
  416718:	fa4c fc04 	asr.w	ip, ip, r4

0041671c <.LVL154>:
  41671c:	f820 c00e 	strh.w	ip, [r0, lr]
  416720:	3d10      	subs	r5, #16

00416722 <.LVL155>:
  416722:	4415      	add	r5, r2

00416724 <.LVL156>:
  416724:	6035      	str	r5, [r6, #0]

00416726 <.LBE36>:
            extra = extra_dbits[code];
  416726:	4a55      	ldr	r2, [pc, #340]	; (41687c <.LBE45+0x12>)
  416728:	f852 4027 	ldr.w	r4, [r2, r7, lsl #2]

0041672c <.LVL157>:
            if (extra != 0) {
  41672c:	2c00      	cmp	r4, #0
  41672e:	f43f af28 	beq.w	416582 <.LBE30>
                dist -= base_dist[code];
  416732:	4a53      	ldr	r2, [pc, #332]	; (416880 <.LBE45+0x16>)
  416734:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
  416738:	1a9b      	subs	r3, r3, r2

0041673a <.LBB38>:
                send_bits(s, dist, extra);   /* send the extra distance bits */
  41673a:	6832      	ldr	r2, [r6, #0]
  41673c:	f1c4 0510 	rsb	r5, r4, #16
  416740:	42aa      	cmp	r2, r5
  416742:	dd4f      	ble.n	4167e4 <.LBB43>

00416744 <.LBB39>:
  416744:	b29b      	uxth	r3, r3

00416746 <.LVL160>:
  416746:	f241 65b8 	movw	r5, #5816	; 0x16b8
  41674a:	fa03 f702 	lsl.w	r7, r3, r2

0041674e <.LVL161>:
  41674e:	5b42      	ldrh	r2, [r0, r5]
  416750:	4317      	orrs	r7, r2
  416752:	b23f      	sxth	r7, r7
  416754:	5347      	strh	r7, [r0, r5]
  416756:	6942      	ldr	r2, [r0, #20]
  416758:	f102 0c01 	add.w	ip, r2, #1
  41675c:	f8c0 c014 	str.w	ip, [r0, #20]
  416760:	6881      	ldr	r1, [r0, #8]
  416762:	548f      	strb	r7, [r1, r2]
  416764:	6942      	ldr	r2, [r0, #20]
  416766:	1c57      	adds	r7, r2, #1
  416768:	6147      	str	r7, [r0, #20]
  41676a:	5b47      	ldrh	r7, [r0, r5]
  41676c:	0a3f      	lsrs	r7, r7, #8
  41676e:	6881      	ldr	r1, [r0, #8]
  416770:	548f      	strb	r7, [r1, r2]
  416772:	6832      	ldr	r2, [r6, #0]
  416774:	f1c2 0710 	rsb	r7, r2, #16
  416778:	413b      	asrs	r3, r7
  41677a:	5343      	strh	r3, [r0, r5]
  41677c:	3c10      	subs	r4, #16

0041677e <.LVL162>:
  41677e:	4414      	add	r4, r2

00416780 <.LVL163>:
  416780:	6034      	str	r4, [r6, #0]

00416782 <.LBE39>:
  416782:	e6fe      	b.n	416582 <.LBE30>

00416784 <.LBB40>:
            send_code(s, code+LITERALS+1, ltree); /* send the length code */
  416784:	f241 6cb8 	movw	ip, #5816	; 0x16b8
  416788:	9900      	ldr	r1, [sp, #0]
  41678a:	f831 7027 	ldrh.w	r7, [r1, r7, lsl #2]
  41678e:	40a7      	lsls	r7, r4
  416790:	f830 800c 	ldrh.w	r8, [r0, ip]
  416794:	ea47 0708 	orr.w	r7, r7, r8
  416798:	f820 700c 	strh.w	r7, [r0, ip]
  41679c:	4425      	add	r5, r4

0041679e <.LVL165>:
  41679e:	6035      	str	r5, [r6, #0]
  4167a0:	e75d      	b.n	41665e <.LBE29>

004167a2 <.LBB41>:
                send_bits(s, lc, extra);       /* send the extra length bits */
  4167a2:	f241 64b8 	movw	r4, #5816	; 0x16b8
  4167a6:	b292      	uxth	r2, r2

004167a8 <.LVL167>:
  4167a8:	40ba      	lsls	r2, r7
  4167aa:	f830 e004 	ldrh.w	lr, [r0, r4]

004167ae <.LVL168>:
  4167ae:	ea42 020e 	orr.w	r2, r2, lr
  4167b2:	5302      	strh	r2, [r0, r4]
  4167b4:	443d      	add	r5, r7

004167b6 <.LVL169>:
  4167b6:	6035      	str	r5, [r6, #0]
  4167b8:	e782      	b.n	4166c0 <.LBE34>

004167ba <.LBE41>:
            code = d_code(dist);
  4167ba:	4a2f      	ldr	r2, [pc, #188]	; (416878 <.LBE45+0xe>)
  4167bc:	eb02 12d3 	add.w	r2, r2, r3, lsr #7
  4167c0:	f892 7100 	ldrb.w	r7, [r2, #256]	; 0x100
  4167c4:	e781      	b.n	4166ca <.LBB36>

004167c6 <.LBB42>:
            send_code(s, code, dtree);       /* send the distance code */
  4167c6:	f241 6eb8 	movw	lr, #5816	; 0x16b8
  4167ca:	9901      	ldr	r1, [sp, #4]
  4167cc:	f831 4027 	ldrh.w	r4, [r1, r7, lsl #2]
  4167d0:	4094      	lsls	r4, r2
  4167d2:	f830 c00e 	ldrh.w	ip, [r0, lr]
  4167d6:	ea44 040c 	orr.w	r4, r4, ip
  4167da:	f820 400e 	strh.w	r4, [r0, lr]
  4167de:	4415      	add	r5, r2

004167e0 <.LVL171>:
  4167e0:	6035      	str	r5, [r6, #0]
  4167e2:	e7a0      	b.n	416726 <.LBE36>

004167e4 <.LBB43>:
                send_bits(s, dist, extra);   /* send the extra distance bits */
  4167e4:	f241 65b8 	movw	r5, #5816	; 0x16b8
  4167e8:	b29b      	uxth	r3, r3

004167ea <.LVL173>:
  4167ea:	4093      	lsls	r3, r2
  4167ec:	5b47      	ldrh	r7, [r0, r5]

004167ee <.LVL174>:
  4167ee:	433b      	orrs	r3, r7
  4167f0:	5343      	strh	r3, [r0, r5]
  4167f2:	4414      	add	r4, r2

004167f4 <.LVL175>:
  4167f4:	6034      	str	r4, [r6, #0]
  4167f6:	e6c4      	b.n	416582 <.LBE30>

004167f8 <.LVL176>:
  4167f8:	9900      	ldr	r1, [sp, #0]

004167fa <.LBB44>:
    send_code(s, END_BLOCK, ltree);
  4167fa:	f8b1 4402 	ldrh.w	r4, [r1, #1026]	; 0x402

004167fe <.LVL178>:
  4167fe:	f241 63bc 	movw	r3, #5820	; 0x16bc
  416802:	58c3      	ldr	r3, [r0, r3]
  416804:	f1c4 0210 	rsb	r2, r4, #16
  416808:	4293      	cmp	r3, r2
  41680a:	dc0e      	bgt.n	41682a <.LBB45>
  41680c:	f241 65b8 	movw	r5, #5816	; 0x16b8
  416810:	f8b1 2400 	ldrh.w	r2, [r1, #1024]	; 0x400
  416814:	409a      	lsls	r2, r3
  416816:	5b41      	ldrh	r1, [r0, r5]
  416818:	430a      	orrs	r2, r1
  41681a:	5342      	strh	r2, [r0, r5]
  41681c:	4423      	add	r3, r4
  41681e:	f241 62bc 	movw	r2, #5820	; 0x16bc
  416822:	5083      	str	r3, [r0, r2]

00416824 <.LBE44>:
}
  416824:	b003      	add	sp, #12

00416826 <.LCFI9>:
  416826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0041682a <.LBB45>:
    send_code(s, END_BLOCK, ltree);
  41682a:	f8b1 5400 	ldrh.w	r5, [r1, #1024]	; 0x400

0041682e <.LVL181>:
  41682e:	f241 61b8 	movw	r1, #5816	; 0x16b8
  416832:	fa05 f203 	lsl.w	r2, r5, r3
  416836:	5a43      	ldrh	r3, [r0, r1]
  416838:	431a      	orrs	r2, r3
  41683a:	b212      	sxth	r2, r2
  41683c:	5242      	strh	r2, [r0, r1]
  41683e:	6886      	ldr	r6, [r0, #8]
  416840:	6943      	ldr	r3, [r0, #20]
  416842:	1c5f      	adds	r7, r3, #1
  416844:	6147      	str	r7, [r0, #20]
  416846:	54f2      	strb	r2, [r6, r3]
  416848:	6886      	ldr	r6, [r0, #8]
  41684a:	6942      	ldr	r2, [r0, #20]
  41684c:	1c53      	adds	r3, r2, #1
  41684e:	6143      	str	r3, [r0, #20]
  416850:	5a43      	ldrh	r3, [r0, r1]
  416852:	0a1b      	lsrs	r3, r3, #8
  416854:	54b3      	strb	r3, [r6, r2]
  416856:	f241 63bc 	movw	r3, #5820	; 0x16bc
  41685a:	58c2      	ldr	r2, [r0, r3]
  41685c:	f1c2 0610 	rsb	r6, r2, #16
  416860:	4135      	asrs	r5, r6

00416862 <.LVL182>:
  416862:	5245      	strh	r5, [r0, r1]
  416864:	3c10      	subs	r4, #16

00416866 <.LVL183>:
  416866:	4414      	add	r4, r2

00416868 <.LVL184>:
  416868:	50c4      	str	r4, [r0, r3]

0041686a <.LBE45>:
  41686a:	e7db      	b.n	416824 <.LBE44>
  41686c:	0041b938 	.word	0x0041b938
  416870:	0041fa44 	.word	0x0041fa44
  416874:	0041f9d0 	.word	0x0041f9d0
  416878:	004189ec 	.word	0x004189ec
  41687c:	0041f7f4 	.word	0x0041f7f4
  416880:	0041f77c 	.word	0x0041f77c

Disassembly of section .text.Transform%74:

00416884 <Transform>:
    #ifndef XTRANSFORM
         #define XTRANSFORM(S, B) Transform((S))
     #endif

    static int Transform(Sha256* sha256)
    {
  416884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00416888 <.LCFI0>:
  416888:	b0cb      	sub	sp, #300	; 0x12c

0041688a <.LCFI1>:
  41688a:	f1a0 0a04 	sub.w	sl, r0, #4
  41688e:	ab41      	add	r3, sp, #260	; 0x104
  416890:	9300      	str	r3, [sp, #0]
  416892:	f100 011c 	add.w	r1, r0, #28
  416896:	4652      	mov	r2, sl

00416898 <.LVL2>:
        word32 W[SHA256_BLOCK_SIZE];
    #endif

        /* Copy context->state[] to working vars */
        for (i = 0; i < 8; i++)
            S[i] = sha256->digest[i];
  416898:	f852 4f04 	ldr.w	r4, [r2, #4]!
  41689c:	f843 4f04 	str.w	r4, [r3, #4]!
        for (i = 0; i < 8; i++)
  4168a0:	428a      	cmp	r2, r1
  4168a2:	d1f9      	bne.n	416898 <.LVL2>
  4168a4:	9201      	str	r2, [sp, #4]
  4168a6:	301c      	adds	r0, #28

004168a8 <.LVL3>:
  4168a8:	ab01      	add	r3, sp, #4
  4168aa:	a911      	add	r1, sp, #68	; 0x44

004168ac <.LVL4>:

        for (i = 0; i < 16; i++)
            W[i] = sha256->buffer[i];
  4168ac:	f850 2f04 	ldr.w	r2, [r0, #4]!
  4168b0:	f843 2f04 	str.w	r2, [r3, #4]!
        for (i = 0; i < 16; i++)
  4168b4:	428b      	cmp	r3, r1
  4168b6:	d1f9      	bne.n	4168ac <.LVL4>
  4168b8:	f10d 0908 	add.w	r9, sp, #8
  4168bc:	ac32      	add	r4, sp, #200	; 0xc8
  4168be:	4648      	mov	r0, r9
  4168c0:	4605      	mov	r5, r0

        for (i = 16; i < SHA256_BLOCK_SIZE; i++)
            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
  4168c2:	6b82      	ldr	r2, [r0, #56]	; 0x38
  4168c4:	f850 1f04 	ldr.w	r1, [r0, #4]!

004168c8 <.LBB143>:
        return (x >> y) | (x << (sizeof(y) * 8 - y));
  4168c8:	ea4f 43f2 	mov.w	r3, r2, ror #19

004168cc <.LBE143>:
  4168cc:	ea83 4372 	eor.w	r3, r3, r2, ror #17
  4168d0:	ea83 2392 	eor.w	r3, r3, r2, lsr #10
  4168d4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  4168d6:	682d      	ldr	r5, [r5, #0]
  4168d8:	442a      	add	r2, r5
  4168da:	4413      	add	r3, r2

004168dc <.LBB145>:
  4168dc:	ea4f 42b1 	mov.w	r2, r1, ror #18

004168e0 <.LBE145>:
  4168e0:	ea82 12f1 	eor.w	r2, r2, r1, ror #7
  4168e4:	ea82 02d1 	eor.w	r2, r2, r1, lsr #3
  4168e8:	4413      	add	r3, r2
  4168ea:	63c3      	str	r3, [r0, #60]	; 0x3c
        for (i = 16; i < SHA256_BLOCK_SIZE; i++)
  4168ec:	42a0      	cmp	r0, r4
  4168ee:	d1e7      	bne.n	4168c0 <.LVL4+0x14>
  4168f0:	f8dd c124 	ldr.w	ip, [sp, #292]	; 0x124
  4168f4:	9a45      	ldr	r2, [sp, #276]	; 0x114
  4168f6:	f8dd e120 	ldr.w	lr, [sp, #288]	; 0x120
  4168fa:	9944      	ldr	r1, [sp, #272]	; 0x110
  4168fc:	9f47      	ldr	r7, [sp, #284]	; 0x11c
  4168fe:	9d43      	ldr	r5, [sp, #268]	; 0x10c
  416900:	9b46      	ldr	r3, [sp, #280]	; 0x118
  416902:	9842      	ldr	r0, [sp, #264]	; 0x108
  416904:	f8df 8284 	ldr.w	r8, [pc, #644]	; 416b8c <.LVL39+0x4>
  416908:	46d3      	mov	fp, sl
  41690a:	46ca      	mov	sl, r9

0041690c <.LVL5>:
  41690c:	46c1      	mov	r9, r8

0041690e <.LBB147>:
  41690e:	ea4f 24f3 	mov.w	r4, r3, ror #11

00416912 <.LBE147>:

        for (i = 0; i < SHA256_BLOCK_SIZE; i += 8) {
            RND(S[0],S[1],S[2],S[3],S[4],S[5],S[6],S[7],i+0);
  416912:	ea84 14b3 	eor.w	r4, r4, r3, ror #6
  416916:	ea84 6873 	eor.w	r8, r4, r3, ror #25
  41691a:	f8d9 4000 	ldr.w	r4, [r9]
  41691e:	f8da 6000 	ldr.w	r6, [sl]
  416922:	4434      	add	r4, r6
  416924:	4444      	add	r4, r8
  416926:	ea8e 0607 	eor.w	r6, lr, r7
  41692a:	401e      	ands	r6, r3
  41692c:	ea86 060e 	eor.w	r6, r6, lr
  416930:	4434      	add	r4, r6
  416932:	44a4      	add	ip, r4

00416934 <.LVL6>:
  416934:	4462      	add	r2, ip

00416936 <.LBB149>:
  416936:	ea4f 3470 	mov.w	r4, r0, ror #13

0041693a <.LBE149>:
  41693a:	ea84 04b0 	eor.w	r4, r4, r0, ror #2
  41693e:	ea84 54b0 	eor.w	r4, r4, r0, ror #22
  416942:	ea40 0605 	orr.w	r6, r0, r5
  416946:	400e      	ands	r6, r1
  416948:	ea00 0805 	and.w	r8, r0, r5
  41694c:	ea46 0608 	orr.w	r6, r6, r8
  416950:	4434      	add	r4, r6

00416952 <.LVL7>:
  416952:	44a4      	add	ip, r4

00416954 <.LVL8>:
            RND(S[7],S[0],S[1],S[2],S[3],S[4],S[5],S[6],i+1);
  416954:	f8d9 4004 	ldr.w	r4, [r9, #4]

00416958 <.LVL9>:
  416958:	f8da 6004 	ldr.w	r6, [sl, #4]
  41695c:	4434      	add	r4, r6
  41695e:	4474      	add	r4, lr
  416960:	ea83 0e07 	eor.w	lr, r3, r7
  416964:	ea0e 0e02 	and.w	lr, lr, r2
  416968:	ea8e 0e07 	eor.w	lr, lr, r7
  41696c:	4474      	add	r4, lr

0041696e <.LBB151>:
  41696e:	ea4f 2ef2 	mov.w	lr, r2, ror #11

00416972 <.LBE151>:
  416972:	ea8e 1eb2 	eor.w	lr, lr, r2, ror #6
  416976:	ea8e 6e72 	eor.w	lr, lr, r2, ror #25
  41697a:	4474      	add	r4, lr

0041697c <.LVL10>:
  41697c:	eb04 0e01 	add.w	lr, r4, r1

00416980 <.LBB153>:
  416980:	ea4f 317c 	mov.w	r1, ip, ror #13

00416984 <.LBE153>:
  416984:	ea81 01bc 	eor.w	r1, r1, ip, ror #2
  416988:	ea81 51bc 	eor.w	r1, r1, ip, ror #22
  41698c:	ea4c 0600 	orr.w	r6, ip, r0
  416990:	402e      	ands	r6, r5
  416992:	ea0c 0800 	and.w	r8, ip, r0
  416996:	ea46 0608 	orr.w	r6, r6, r8
  41699a:	4431      	add	r1, r6

0041699c <.LVL11>:
  41699c:	4421      	add	r1, r4

0041699e <.LVL12>:
            RND(S[6],S[7],S[0],S[1],S[2],S[3],S[4],S[5],i+2);
  41699e:	f8d9 4008 	ldr.w	r4, [r9, #8]

004169a2 <.LVL13>:
  4169a2:	f8da 6008 	ldr.w	r6, [sl, #8]
  4169a6:	4434      	add	r4, r6
  4169a8:	443c      	add	r4, r7
  4169aa:	ea82 0703 	eor.w	r7, r2, r3
  4169ae:	ea07 070e 	and.w	r7, r7, lr
  4169b2:	405f      	eors	r7, r3
  4169b4:	443c      	add	r4, r7

004169b6 <.LBB155>:
  4169b6:	ea4f 27fe 	mov.w	r7, lr, ror #11

004169ba <.LBE155>:
  4169ba:	ea87 17be 	eor.w	r7, r7, lr, ror #6
  4169be:	ea87 677e 	eor.w	r7, r7, lr, ror #25
  4169c2:	4427      	add	r7, r4

004169c4 <.LVL14>:
  4169c4:	443d      	add	r5, r7

004169c6 <.LBB157>:
  4169c6:	ea4f 3471 	mov.w	r4, r1, ror #13

004169ca <.LBE157>:
  4169ca:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
  4169ce:	ea84 54b1 	eor.w	r4, r4, r1, ror #22
  4169d2:	ea4c 0601 	orr.w	r6, ip, r1
  4169d6:	4006      	ands	r6, r0
  4169d8:	ea0c 0801 	and.w	r8, ip, r1
  4169dc:	ea46 0608 	orr.w	r6, r6, r8
  4169e0:	4434      	add	r4, r6

004169e2 <.LVL15>:
  4169e2:	443c      	add	r4, r7

004169e4 <.LVL16>:
            RND(S[5],S[6],S[7],S[0],S[1],S[2],S[3],S[4],i+3);
  4169e4:	f8d9 600c 	ldr.w	r6, [r9, #12]
  4169e8:	f8da 700c 	ldr.w	r7, [sl, #12]

004169ec <.LVL17>:
  4169ec:	443e      	add	r6, r7
  4169ee:	4433      	add	r3, r6
  4169f0:	ea82 060e 	eor.w	r6, r2, lr
  4169f4:	402e      	ands	r6, r5
  4169f6:	4056      	eors	r6, r2
  4169f8:	4433      	add	r3, r6

004169fa <.LBB159>:
  4169fa:	ea4f 26f5 	mov.w	r6, r5, ror #11

004169fe <.LBE159>:
  4169fe:	ea86 16b5 	eor.w	r6, r6, r5, ror #6
  416a02:	ea86 6675 	eor.w	r6, r6, r5, ror #25
  416a06:	441e      	add	r6, r3

00416a08 <.LVL18>:
  416a08:	eb06 0800 	add.w	r8, r6, r0

00416a0c <.LBB161>:
  416a0c:	ea4f 3374 	mov.w	r3, r4, ror #13

00416a10 <.LBE161>:
  416a10:	ea83 03b4 	eor.w	r3, r3, r4, ror #2
  416a14:	ea83 53b4 	eor.w	r3, r3, r4, ror #22
  416a18:	ea41 0004 	orr.w	r0, r1, r4
  416a1c:	ea00 000c 	and.w	r0, r0, ip
  416a20:	ea01 0704 	and.w	r7, r1, r4
  416a24:	4338      	orrs	r0, r7
  416a26:	4403      	add	r3, r0

00416a28 <.LVL19>:
  416a28:	4433      	add	r3, r6

00416a2a <.LVL20>:
            RND(S[4],S[5],S[6],S[7],S[0],S[1],S[2],S[3],i+4);
  416a2a:	f8d9 0010 	ldr.w	r0, [r9, #16]
  416a2e:	f8da 6010 	ldr.w	r6, [sl, #16]

00416a32 <.LVL21>:
  416a32:	4430      	add	r0, r6
  416a34:	4402      	add	r2, r0
  416a36:	ea8e 0005 	eor.w	r0, lr, r5
  416a3a:	ea00 0008 	and.w	r0, r0, r8
  416a3e:	ea80 000e 	eor.w	r0, r0, lr
  416a42:	4402      	add	r2, r0

00416a44 <.LBB163>:
  416a44:	ea4f 20f8 	mov.w	r0, r8, ror #11

00416a48 <.LBE163>:
  416a48:	ea80 10b8 	eor.w	r0, r0, r8, ror #6
  416a4c:	ea80 6078 	eor.w	r0, r0, r8, ror #25
  416a50:	4410      	add	r0, r2

00416a52 <.LVL22>:
  416a52:	4484      	add	ip, r0

00416a54 <.LBB165>:
  416a54:	ea4f 3273 	mov.w	r2, r3, ror #13

00416a58 <.LBE165>:
  416a58:	ea82 02b3 	eor.w	r2, r2, r3, ror #2
  416a5c:	ea82 52b3 	eor.w	r2, r2, r3, ror #22
  416a60:	ea44 0603 	orr.w	r6, r4, r3
  416a64:	400e      	ands	r6, r1
  416a66:	ea04 0703 	and.w	r7, r4, r3
  416a6a:	433e      	orrs	r6, r7
  416a6c:	4432      	add	r2, r6

00416a6e <.LVL23>:
  416a6e:	4402      	add	r2, r0

00416a70 <.LVL24>:
            RND(S[3],S[4],S[5],S[6],S[7],S[0],S[1],S[2],i+5);
  416a70:	f8d9 0014 	ldr.w	r0, [r9, #20]

00416a74 <.LVL25>:
  416a74:	f8da 6014 	ldr.w	r6, [sl, #20]
  416a78:	4430      	add	r0, r6
  416a7a:	4470      	add	r0, lr
  416a7c:	ea85 0e08 	eor.w	lr, r5, r8
  416a80:	ea0e 0e0c 	and.w	lr, lr, ip
  416a84:	ea8e 0e05 	eor.w	lr, lr, r5
  416a88:	4470      	add	r0, lr

00416a8a <.LBB167>:
  416a8a:	ea4f 2efc 	mov.w	lr, ip, ror #11

00416a8e <.LBE167>:
  416a8e:	ea8e 1ebc 	eor.w	lr, lr, ip, ror #6
  416a92:	ea8e 6e7c 	eor.w	lr, lr, ip, ror #25
  416a96:	4470      	add	r0, lr

00416a98 <.LVL26>:
  416a98:	eb01 0e00 	add.w	lr, r1, r0

00416a9c <.LBB169>:
  416a9c:	ea4f 3172 	mov.w	r1, r2, ror #13

00416aa0 <.LBE169>:
  416aa0:	ea81 01b2 	eor.w	r1, r1, r2, ror #2
  416aa4:	ea81 51b2 	eor.w	r1, r1, r2, ror #22
  416aa8:	ea43 0602 	orr.w	r6, r3, r2
  416aac:	4026      	ands	r6, r4
  416aae:	ea03 0702 	and.w	r7, r3, r2
  416ab2:	433e      	orrs	r6, r7
  416ab4:	4431      	add	r1, r6

00416ab6 <.LVL27>:
  416ab6:	4401      	add	r1, r0

00416ab8 <.LVL28>:
            RND(S[2],S[3],S[4],S[5],S[6],S[7],S[0],S[1],i+6);
  416ab8:	f8d9 0018 	ldr.w	r0, [r9, #24]

00416abc <.LVL29>:
  416abc:	f8da 6018 	ldr.w	r6, [sl, #24]
  416ac0:	4430      	add	r0, r6
  416ac2:	4405      	add	r5, r0
  416ac4:	ea88 000c 	eor.w	r0, r8, ip
  416ac8:	ea00 000e 	and.w	r0, r0, lr
  416acc:	ea80 0008 	eor.w	r0, r0, r8
  416ad0:	4405      	add	r5, r0

00416ad2 <.LBB171>:
  416ad2:	ea4f 20fe 	mov.w	r0, lr, ror #11

00416ad6 <.LBE171>:
  416ad6:	ea80 10be 	eor.w	r0, r0, lr, ror #6
  416ada:	ea80 607e 	eor.w	r0, r0, lr, ror #25
  416ade:	4428      	add	r0, r5

00416ae0 <.LVL30>:
  416ae0:	1827      	adds	r7, r4, r0

00416ae2 <.LBB173>:
  416ae2:	ea4f 3571 	mov.w	r5, r1, ror #13

00416ae6 <.LBE173>:
  416ae6:	ea85 05b1 	eor.w	r5, r5, r1, ror #2
  416aea:	ea85 55b1 	eor.w	r5, r5, r1, ror #22
  416aee:	ea42 0401 	orr.w	r4, r2, r1
  416af2:	401c      	ands	r4, r3
  416af4:	ea02 0601 	and.w	r6, r2, r1
  416af8:	4334      	orrs	r4, r6
  416afa:	4425      	add	r5, r4

00416afc <.LVL31>:
  416afc:	4405      	add	r5, r0

00416afe <.LVL32>:
            RND(S[1],S[2],S[3],S[4],S[5],S[6],S[7],S[0],i+7);
  416afe:	f8d9 001c 	ldr.w	r0, [r9, #28]

00416b02 <.LVL33>:
  416b02:	f8da 401c 	ldr.w	r4, [sl, #28]
  416b06:	4420      	add	r0, r4
  416b08:	4440      	add	r0, r8
  416b0a:	ea8c 080e 	eor.w	r8, ip, lr
  416b0e:	ea08 0807 	and.w	r8, r8, r7
  416b12:	ea88 080c 	eor.w	r8, r8, ip
  416b16:	4440      	add	r0, r8

00416b18 <.LBB175>:
  416b18:	ea4f 28f7 	mov.w	r8, r7, ror #11

00416b1c <.LBE175>:
  416b1c:	ea88 18b7 	eor.w	r8, r8, r7, ror #6
  416b20:	ea88 6877 	eor.w	r8, r8, r7, ror #25
  416b24:	4480      	add	r8, r0

00416b26 <.LVL34>:
  416b26:	4443      	add	r3, r8

00416b28 <.LBB177>:
  416b28:	ea4f 3075 	mov.w	r0, r5, ror #13

00416b2c <.LBE177>:
  416b2c:	ea80 00b5 	eor.w	r0, r0, r5, ror #2
  416b30:	ea80 50b5 	eor.w	r0, r0, r5, ror #22
  416b34:	ea41 0405 	orr.w	r4, r1, r5
  416b38:	4014      	ands	r4, r2
  416b3a:	ea01 0605 	and.w	r6, r1, r5
  416b3e:	4334      	orrs	r4, r6
  416b40:	4420      	add	r0, r4

00416b42 <.LVL35>:
  416b42:	4440      	add	r0, r8

00416b44 <.LVL36>:
  416b44:	f109 0920 	add.w	r9, r9, #32
  416b48:	f10a 0a20 	add.w	sl, sl, #32
        for (i = 0; i < SHA256_BLOCK_SIZE; i += 8) {
  416b4c:	4c0e      	ldr	r4, [pc, #56]	; (416b88 <.LVL39>)
  416b4e:	45a1      	cmp	r9, r4
  416b50:	f47f aedd 	bne.w	41690e <.LBB147>
  416b54:	46da      	mov	sl, fp
  416b56:	f8cd c124 	str.w	ip, [sp, #292]	; 0x124
  416b5a:	9346      	str	r3, [sp, #280]	; 0x118
  416b5c:	f8cd e120 	str.w	lr, [sp, #288]	; 0x120
  416b60:	9747      	str	r7, [sp, #284]	; 0x11c
  416b62:	9042      	str	r0, [sp, #264]	; 0x108
  416b64:	9543      	str	r5, [sp, #268]	; 0x10c
  416b66:	9144      	str	r1, [sp, #272]	; 0x110
  416b68:	9245      	str	r2, [sp, #276]	; 0x114
  416b6a:	9a00      	ldr	r2, [sp, #0]

00416b6c <.LVL37>:
  416b6c:	9801      	ldr	r0, [sp, #4]

00416b6e <.LVL38>:
        }

        /* Add the working vars back into digest state[] */
        for (i = 0; i < 8; i++) {
            sha256->digest[i] += S[i];
  416b6e:	f8da 3004 	ldr.w	r3, [sl, #4]
  416b72:	f852 1f04 	ldr.w	r1, [r2, #4]!
  416b76:	440b      	add	r3, r1
  416b78:	f84a 3f04 	str.w	r3, [sl, #4]!
        for (i = 0; i < 8; i++) {
  416b7c:	4582      	cmp	sl, r0
  416b7e:	d1f6      	bne.n	416b6e <.LVL38>
    #ifdef WOLFSSL_SMALL_STACK
        XFREE(W, NULL, DYNAMIC_TYPE_TMP_BUFFER);
    #endif

        return 0;
    }
  416b80:	2000      	movs	r0, #0
  416b82:	b04b      	add	sp, #300	; 0x12c

00416b84 <.LCFI2>:
  416b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00416b88 <.LVL39>:
  416b88:	0041bc38 	.word	0x0041bc38
  416b8c:	0041bb38 	.word	0x0041bb38

Disassembly of section .text.adler32%75:

00416b90 <adler32>:
/* ========================================================================= */
uLong ZEXPORT adler32(adler, buf, len)
    uLong adler;
    const Bytef *buf;
    uInt len;
{
  416b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00416b94 <.LCFI2>:
  416b94:	b08b      	sub	sp, #44	; 0x2c

00416b96 <.LCFI3>:
  416b96:	9107      	str	r1, [sp, #28]
  416b98:	9209      	str	r2, [sp, #36]	; 0x24
    unsigned long sum2;
    unsigned n;

    /* split Adler-32 into component sums */
    sum2 = (adler >> 16) & 0xffff;
  416b9a:	0c03      	lsrs	r3, r0, #16
  416b9c:	9301      	str	r3, [sp, #4]

00416b9e <.LVL22>:
    adler &= 0xffff;
  416b9e:	b280      	uxth	r0, r0

00416ba0 <.LVL23>:

    /* in case user likes doing a byte at a time, keep it fast */
    if (len == 1) {
  416ba0:	2a01      	cmp	r2, #1
  416ba2:	d00d      	beq.n	416bc0 <.LVL25>
            sum2 -= BASE;
        return adler | (sum2 << 16);
    }

    /* initial Adler-32 value (deferred check for len == 1 speed) */
    if (buf == Z_NULL)
  416ba4:	9b07      	ldr	r3, [sp, #28]

00416ba6 <.LVL24>:
  416ba6:	2b00      	cmp	r3, #0
  416ba8:	f000 8152 	beq.w	416e50 <.LVL106>
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
  416bac:	9a09      	ldr	r2, [sp, #36]	; 0x24
  416bae:	2a0f      	cmp	r2, #15
  416bb0:	d91b      	bls.n	416bea <.LVL34>
        MOD28(sum2);            /* only added so many BASE's */
        return adler | (sum2 << 16);
    }

    /* do length NMAX blocks -- requires just one modulo operation */
    while (len >= NMAX) {
  416bb2:	f241 53af 	movw	r3, #5551	; 0x15af
  416bb6:	429a      	cmp	r2, r3
  416bb8:	f240 814c 	bls.w	416e54 <.LVL108>
  416bbc:	4683      	mov	fp, r0
  416bbe:	e03b      	b.n	416c38 <.LVL46>

00416bc0 <.LVL25>:
        adler += buf[0];
  416bc0:	780b      	ldrb	r3, [r1, #0]

00416bc2 <.LVL26>:
  416bc2:	4418      	add	r0, r3
        if (adler >= BASE)
  416bc4:	f64f 73f0 	movw	r3, #65520	; 0xfff0
  416bc8:	4298      	cmp	r0, r3
  416bca:	d902      	bls.n	416bd2 <.LVL29>
            adler -= BASE;
  416bcc:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00

00416bd0 <.LVL28>:
  416bd0:	38f1      	subs	r0, #241	; 0xf1

00416bd2 <.LVL29>:
        sum2 += adler;
  416bd2:	9b01      	ldr	r3, [sp, #4]
  416bd4:	4403      	add	r3, r0

00416bd6 <.LVL30>:
        if (sum2 >= BASE)
  416bd6:	f64f 72f0 	movw	r2, #65520	; 0xfff0
  416bda:	4293      	cmp	r3, r2
  416bdc:	d902      	bls.n	416be4 <.LVL32>
            sum2 -= BASE;
  416bde:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00

00416be2 <.LVL31>:
  416be2:	3bf1      	subs	r3, #241	; 0xf1

00416be4 <.LVL32>:
        return adler | (sum2 << 16);
  416be4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16

00416be8 <.LVL33>:
  416be8:	e021      	b.n	416c2e <.LVL44>

00416bea <.LVL34>:
        while (len--) {
  416bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
  416bec:	b15b      	cbz	r3, 416c06 <.LVL41>
  416bee:	9c07      	ldr	r4, [sp, #28]
  416bf0:	4423      	add	r3, r4
  416bf2:	461a      	mov	r2, r3

00416bf4 <.LVL35>:
  416bf4:	9901      	ldr	r1, [sp, #4]

00416bf6 <.LVL36>:
  416bf6:	4623      	mov	r3, r4

00416bf8 <.LVL37>:
            adler += *buf++;
  416bf8:	f813 4b01 	ldrb.w	r4, [r3], #1

00416bfc <.LVL38>:
  416bfc:	4420      	add	r0, r4
            sum2 += adler;
  416bfe:	4401      	add	r1, r0
        while (len--) {
  416c00:	4293      	cmp	r3, r2
  416c02:	d1f9      	bne.n	416bf8 <.LVL37>
  416c04:	9101      	str	r1, [sp, #4]

00416c06 <.LVL41>:
        if (adler >= BASE)
  416c06:	f64f 73f0 	movw	r3, #65520	; 0xfff0
  416c0a:	4298      	cmp	r0, r3
  416c0c:	d902      	bls.n	416c14 <.LVL43>
            adler -= BASE;
  416c0e:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00

00416c12 <.LVL42>:
  416c12:	38f1      	subs	r0, #241	; 0xf1

00416c14 <.LVL43>:
        MOD28(sum2);            /* only added so many BASE's */
  416c14:	4b95      	ldr	r3, [pc, #596]	; (416e6c <.LVL110+0x4>)
  416c16:	9901      	ldr	r1, [sp, #4]
  416c18:	460a      	mov	r2, r1
  416c1a:	fba3 2302 	umull	r2, r3, r3, r2
  416c1e:	0bdb      	lsrs	r3, r3, #15
  416c20:	ebc3 3203 	rsb	r2, r3, r3, lsl #12
  416c24:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  416c28:	1acb      	subs	r3, r1, r3
        return adler | (sum2 << 16);
  416c2a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16

00416c2e <.LVL44>:
        MOD(sum2);
    }

    /* return recombined sums */
    return adler | (sum2 << 16);
}
  416c2e:	b00b      	add	sp, #44	; 0x2c

00416c30 <.LCFI4>:
  416c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00416c34 <.LCFI5>:
        len -= NMAX;
  416c34:	9b08      	ldr	r3, [sp, #32]
  416c36:	9309      	str	r3, [sp, #36]	; 0x24

00416c38 <.LVL46>:
  416c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
  416c3a:	f5a3 53ad 	sub.w	r3, r3, #5536	; 0x15a0
  416c3e:	3b10      	subs	r3, #16
  416c40:	9308      	str	r3, [sp, #32]

00416c42 <.LVL47>:
  416c42:	9a07      	ldr	r2, [sp, #28]
  416c44:	f102 0410 	add.w	r4, r2, #16
  416c48:	f502 53ae 	add.w	r3, r2, #5568	; 0x15c0
  416c4c:	9306      	str	r3, [sp, #24]

00416c4e <.LVL48>:
            DO16(buf);          /* 16 sums unrolled */
  416c4e:	f814 3c10 	ldrb.w	r3, [r4, #-16]
  416c52:	445b      	add	r3, fp

00416c54 <.LVL49>:
  416c54:	f814 ac0f 	ldrb.w	sl, [r4, #-15]
  416c58:	449a      	add	sl, r3

00416c5a <.LVL50>:
  416c5a:	f814 9c0e 	ldrb.w	r9, [r4, #-14]
  416c5e:	44d1      	add	r9, sl

00416c60 <.LVL51>:
  416c60:	f814 2c0d 	ldrb.w	r2, [r4, #-13]
  416c64:	444a      	add	r2, r9

00416c66 <.LVL52>:
  416c66:	f814 8c0c 	ldrb.w	r8, [r4, #-12]
  416c6a:	9202      	str	r2, [sp, #8]
  416c6c:	eb08 0002 	add.w	r0, r8, r2

00416c70 <.LVL53>:
  416c70:	f814 8c0b 	ldrb.w	r8, [r4, #-11]
  416c74:	9003      	str	r0, [sp, #12]
  416c76:	4440      	add	r0, r8

00416c78 <.LVL54>:
  416c78:	f814 8c0a 	ldrb.w	r8, [r4, #-10]
  416c7c:	9004      	str	r0, [sp, #16]
  416c7e:	4480      	add	r8, r0

00416c80 <.LVL55>:
  416c80:	f814 cc09 	ldrb.w	ip, [r4, #-9]
  416c84:	44c4      	add	ip, r8

00416c86 <.LVL56>:
  416c86:	f814 ec08 	ldrb.w	lr, [r4, #-8]
  416c8a:	44e6      	add	lr, ip

00416c8c <.LVL57>:
  416c8c:	f814 7c07 	ldrb.w	r7, [r4, #-7]
  416c90:	4477      	add	r7, lr

00416c92 <.LVL58>:
  416c92:	f814 6c06 	ldrb.w	r6, [r4, #-6]
  416c96:	443e      	add	r6, r7

00416c98 <.LVL59>:
  416c98:	f814 5c05 	ldrb.w	r5, [r4, #-5]
  416c9c:	4435      	add	r5, r6

00416c9e <.LVL60>:
  416c9e:	f814 0c04 	ldrb.w	r0, [r4, #-4]
  416ca2:	4428      	add	r0, r5

00416ca4 <.LVL61>:
  416ca4:	f814 1c03 	ldrb.w	r1, [r4, #-3]
  416ca8:	4401      	add	r1, r0

00416caa <.LVL62>:
  416caa:	f814 2c02 	ldrb.w	r2, [r4, #-2]
  416cae:	9105      	str	r1, [sp, #20]
  416cb0:	440a      	add	r2, r1

00416cb2 <.LVL63>:
  416cb2:	f814 bc01 	ldrb.w	fp, [r4, #-1]
  416cb6:	4493      	add	fp, r2

00416cb8 <.LVL64>:
  416cb8:	4453      	add	r3, sl
  416cba:	444b      	add	r3, r9
  416cbc:	9902      	ldr	r1, [sp, #8]
  416cbe:	440b      	add	r3, r1
  416cc0:	9903      	ldr	r1, [sp, #12]
  416cc2:	440b      	add	r3, r1
  416cc4:	9904      	ldr	r1, [sp, #16]
  416cc6:	440b      	add	r3, r1
  416cc8:	4498      	add	r8, r3
  416cca:	44c4      	add	ip, r8
  416ccc:	44e6      	add	lr, ip
  416cce:	4477      	add	r7, lr
  416cd0:	443e      	add	r6, r7
  416cd2:	4435      	add	r5, r6
  416cd4:	4428      	add	r0, r5
  416cd6:	9b05      	ldr	r3, [sp, #20]
  416cd8:	4403      	add	r3, r0
  416cda:	441a      	add	r2, r3
  416cdc:	445a      	add	r2, fp
  416cde:	9b01      	ldr	r3, [sp, #4]
  416ce0:	4413      	add	r3, r2
  416ce2:	9301      	str	r3, [sp, #4]

00416ce4 <.LVL65>:
  416ce4:	3410      	adds	r4, #16

00416ce6 <.LVL66>:
        } while (--n);
  416ce6:	9b06      	ldr	r3, [sp, #24]

00416ce8 <.LVL67>:
  416ce8:	429c      	cmp	r4, r3
  416cea:	d1b0      	bne.n	416c4e <.LVL48>
  416cec:	9b07      	ldr	r3, [sp, #28]
  416cee:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
  416cf2:	3310      	adds	r3, #16
  416cf4:	9307      	str	r3, [sp, #28]
        MOD(adler);
  416cf6:	4b5d      	ldr	r3, [pc, #372]	; (416e6c <.LVL110+0x4>)
  416cf8:	fba3 230b 	umull	r2, r3, r3, fp
  416cfc:	0bdb      	lsrs	r3, r3, #15
  416cfe:	ebc3 3203 	rsb	r2, r3, r3, lsl #12
  416d02:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  416d06:	ebab 0b03 	sub.w	fp, fp, r3
        MOD(sum2);
  416d0a:	9901      	ldr	r1, [sp, #4]
  416d0c:	4a57      	ldr	r2, [pc, #348]	; (416e6c <.LVL110+0x4>)
  416d0e:	fba2 2301 	umull	r2, r3, r2, r1
  416d12:	0bdb      	lsrs	r3, r3, #15
  416d14:	ebc3 3203 	rsb	r2, r3, r3, lsl #12
  416d18:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  416d1c:	1acb      	subs	r3, r1, r3
  416d1e:	9301      	str	r3, [sp, #4]

00416d20 <.LVL69>:
    while (len >= NMAX) {
  416d20:	9b08      	ldr	r3, [sp, #32]

00416d22 <.LVL70>:
  416d22:	f241 52af 	movw	r2, #5551	; 0x15af
  416d26:	4293      	cmp	r3, r2
  416d28:	d884      	bhi.n	416c34 <.LCFI5>
  416d2a:	4658      	mov	r0, fp
    if (len) {                  /* avoid modulos if none remaining */
  416d2c:	2b00      	cmp	r3, #0
  416d2e:	f000 808b 	beq.w	416e48 <.LVL102+0x28>
        while (len >= 16) {
  416d32:	2b0f      	cmp	r3, #15
  416d34:	f240 8094 	bls.w	416e60 <.LVL109>

00416d38 <.LVL71>:
  416d38:	9b07      	ldr	r3, [sp, #28]
  416d3a:	f103 0510 	add.w	r5, r3, #16
    if (len) {                  /* avoid modulos if none remaining */
  416d3e:	9b08      	ldr	r3, [sp, #32]
  416d40:	9302      	str	r3, [sp, #8]

00416d42 <.LVL72>:
            len -= 16;
  416d42:	9b02      	ldr	r3, [sp, #8]
  416d44:	3b10      	subs	r3, #16
  416d46:	9302      	str	r3, [sp, #8]

00416d48 <.LVL73>:
            DO16(buf);
  416d48:	f815 3c10 	ldrb.w	r3, [r5, #-16]

00416d4c <.LVL74>:
  416d4c:	4403      	add	r3, r0

00416d4e <.LVL75>:
  416d4e:	f815 bc0f 	ldrb.w	fp, [r5, #-15]
  416d52:	449b      	add	fp, r3

00416d54 <.LVL76>:
  416d54:	f815 ac0e 	ldrb.w	sl, [r5, #-14]
  416d58:	44da      	add	sl, fp

00416d5a <.LVL77>:
  416d5a:	f815 9c0d 	ldrb.w	r9, [r5, #-13]
  416d5e:	44d1      	add	r9, sl

00416d60 <.LVL78>:
  416d60:	f815 8c0c 	ldrb.w	r8, [r5, #-12]
  416d64:	44c8      	add	r8, r9

00416d66 <.LVL79>:
  416d66:	f815 cc0b 	ldrb.w	ip, [r5, #-11]
  416d6a:	44c4      	add	ip, r8

00416d6c <.LVL80>:
  416d6c:	f815 ec0a 	ldrb.w	lr, [r5, #-10]
  416d70:	44e6      	add	lr, ip

00416d72 <.LVL81>:
  416d72:	f815 2c09 	ldrb.w	r2, [r5, #-9]
  416d76:	4472      	add	r2, lr
  416d78:	4611      	mov	r1, r2

00416d7a <.LVL82>:
  416d7a:	f815 2c08 	ldrb.w	r2, [r5, #-8]
  416d7e:	9103      	str	r1, [sp, #12]
  416d80:	1850      	adds	r0, r2, r1

00416d82 <.LVL83>:
  416d82:	f815 2c07 	ldrb.w	r2, [r5, #-7]
  416d86:	9004      	str	r0, [sp, #16]
  416d88:	1814      	adds	r4, r2, r0

00416d8a <.LVL84>:
  416d8a:	f815 7c06 	ldrb.w	r7, [r5, #-6]
  416d8e:	9405      	str	r4, [sp, #20]
  416d90:	4427      	add	r7, r4

00416d92 <.LVL85>:
  416d92:	f815 6c05 	ldrb.w	r6, [r5, #-5]
  416d96:	443e      	add	r6, r7

00416d98 <.LVL86>:
  416d98:	f815 4c04 	ldrb.w	r4, [r5, #-4]
  416d9c:	4434      	add	r4, r6

00416d9e <.LVL87>:
  416d9e:	f815 1c03 	ldrb.w	r1, [r5, #-3]
  416da2:	4421      	add	r1, r4

00416da4 <.LVL88>:
  416da4:	f815 2c02 	ldrb.w	r2, [r5, #-2]
  416da8:	9106      	str	r1, [sp, #24]
  416daa:	440a      	add	r2, r1

00416dac <.LVL89>:
  416dac:	f815 0c01 	ldrb.w	r0, [r5, #-1]
  416db0:	4410      	add	r0, r2

00416db2 <.LVL90>:
  416db2:	445b      	add	r3, fp
  416db4:	4453      	add	r3, sl
  416db6:	444b      	add	r3, r9
  416db8:	4443      	add	r3, r8
  416dba:	4463      	add	r3, ip
  416dbc:	4473      	add	r3, lr
  416dbe:	9903      	ldr	r1, [sp, #12]
  416dc0:	468e      	mov	lr, r1
  416dc2:	440b      	add	r3, r1
  416dc4:	9904      	ldr	r1, [sp, #16]
  416dc6:	440b      	add	r3, r1
  416dc8:	9905      	ldr	r1, [sp, #20]
  416dca:	440b      	add	r3, r1
  416dcc:	443b      	add	r3, r7
  416dce:	4433      	add	r3, r6
  416dd0:	4423      	add	r3, r4
  416dd2:	9906      	ldr	r1, [sp, #24]
  416dd4:	440b      	add	r3, r1
  416dd6:	4413      	add	r3, r2
  416dd8:	4403      	add	r3, r0
  416dda:	9a01      	ldr	r2, [sp, #4]
  416ddc:	441a      	add	r2, r3
  416dde:	9201      	str	r2, [sp, #4]

00416de0 <.LVL91>:
  416de0:	3510      	adds	r5, #16

00416de2 <.LVL92>:
        while (len >= 16) {
  416de2:	9b02      	ldr	r3, [sp, #8]
  416de4:	2b0f      	cmp	r3, #15
  416de6:	d8ac      	bhi.n	416d42 <.LVL72>
  416de8:	9908      	ldr	r1, [sp, #32]
  416dea:	f1a1 0310 	sub.w	r3, r1, #16
  416dee:	f023 020f 	bic.w	r2, r3, #15

00416df2 <.LVL93>:
  416df2:	3210      	adds	r2, #16
  416df4:	9c07      	ldr	r4, [sp, #28]
  416df6:	4414      	add	r4, r2
  416df8:	9407      	str	r4, [sp, #28]
  416dfa:	f1a1 0211 	sub.w	r2, r1, #17

00416dfe <.LVL94>:
        while (len--) {
  416dfe:	f023 030f 	bic.w	r3, r3, #15
  416e02:	1ad2      	subs	r2, r2, r3

00416e04 <.LVL95>:
  416e04:	f011 0f0f 	tst.w	r1, #15
  416e08:	d00a      	beq.n	416e20 <.LVL102>

00416e0a <.LVL96>:
  416e0a:	9907      	ldr	r1, [sp, #28]
  416e0c:	1e4b      	subs	r3, r1, #1
  416e0e:	440a      	add	r2, r1

00416e10 <.LVL97>:
  416e10:	9901      	ldr	r1, [sp, #4]

00416e12 <.LVL98>:
            adler += *buf++;
  416e12:	f813 4f01 	ldrb.w	r4, [r3, #1]!

00416e16 <.LVL99>:
  416e16:	4420      	add	r0, r4
            sum2 += adler;
  416e18:	4401      	add	r1, r0
        while (len--) {
  416e1a:	429a      	cmp	r2, r3
  416e1c:	d1f9      	bne.n	416e12 <.LVL98>
  416e1e:	9101      	str	r1, [sp, #4]

00416e20 <.LVL102>:
        MOD(adler);
  416e20:	4b12      	ldr	r3, [pc, #72]	; (416e6c <.LVL110+0x4>)
  416e22:	fba3 1200 	umull	r1, r2, r3, r0
  416e26:	0bd2      	lsrs	r2, r2, #15
  416e28:	ebc2 3102 	rsb	r1, r2, r2, lsl #12
  416e2c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
  416e30:	1a80      	subs	r0, r0, r2
        MOD(sum2);
  416e32:	9901      	ldr	r1, [sp, #4]
  416e34:	460a      	mov	r2, r1
  416e36:	fba3 2302 	umull	r2, r3, r3, r2
  416e3a:	0bdb      	lsrs	r3, r3, #15
  416e3c:	ebc3 3203 	rsb	r2, r3, r3, lsl #12
  416e40:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  416e44:	1acb      	subs	r3, r1, r3
  416e46:	9301      	str	r3, [sp, #4]
    return adler | (sum2 << 16);
  416e48:	9b01      	ldr	r3, [sp, #4]
  416e4a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16

00416e4e <.LVL105>:
  416e4e:	e6ee      	b.n	416c2e <.LVL44>

00416e50 <.LVL106>:
        return 1L;
  416e50:	2001      	movs	r0, #1

00416e52 <.LVL107>:
  416e52:	e6ec      	b.n	416c2e <.LVL44>

00416e54 <.LVL108>:
    if (len) {                  /* avoid modulos if none remaining */
  416e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
  416e56:	2b00      	cmp	r3, #0
  416e58:	d0f6      	beq.n	416e48 <.LVL102+0x28>
  416e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  416e5c:	9308      	str	r3, [sp, #32]
  416e5e:	e76b      	b.n	416d38 <.LVL71>

00416e60 <.LVL109>:
        while (len--) {
  416e60:	4a03      	ldr	r2, [pc, #12]	; (416e70 <.LVL110+0x8>)
  416e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
  416e64:	4413      	add	r3, r2
  416e66:	461a      	mov	r2, r3

00416e68 <.LVL110>:
  416e68:	e7cf      	b.n	416e0a <.LVL96>
  416e6a:	bf00      	nop
  416e6c:	80078071 	.word	0x80078071
  416e70:	ffffea4f 	.word	0xffffea4f

Disassembly of section .text.Hash_DRBG_Generate%76:

00416e74 <Hash_DRBG_Generate>:
    }
}

/* Returns: DRBG_SUCCESS, DRBG_NEED_RESEED, or DRBG_FAILURE */
static int Hash_DRBG_Generate(DRBG* drbg, byte* out, word32 outSz)
{
  416e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00416e78 <.LCFI14>:
  416e78:	b0d9      	sub	sp, #356	; 0x164

00416e7a <.LCFI15>:
  416e7a:	4690      	mov	r8, r2

00416e7c <.LVL75>:
    int ret = DRBG_NEED_RESEED;
    Sha256 sha;
    DECLARE_VAR(digest, byte, SHA256_DIGEST_SIZE, drbg->heap);

    if (drbg->reseedCtr != RESEED_INTERVAL) {
  416e7c:	6803      	ldr	r3, [r0, #0]
  416e7e:	4ab4      	ldr	r2, [pc, #720]	; (417150 <.LVL182+0x4>)

00416e80 <.LVL76>:
  416e80:	4293      	cmp	r3, r2
  416e82:	f000 811b 	beq.w	4170bc <.LBE67>
  416e86:	4606      	mov	r6, r0
  416e88:	460d      	mov	r5, r1

00416e8a <.LBB67>:
        byte type = drbgGenerateH;
  416e8a:	2203      	movs	r2, #3
  416e8c:	f88d 2003 	strb.w	r2, [sp, #3]
        word32 reseedCtr = drbg->reseedCtr;
  416e90:	9301      	str	r3, [sp, #4]

00416e92 <.LBB68>:
    if (outSz == 0) outSz = 1;
  416e92:	f1b8 0f00 	cmp.w	r8, #0
  416e96:	f000 8121 	beq.w	4170dc <.LBB89>
    len = (outSz / OUTPUT_BLOCK_LEN) + ((outSz % OUTPUT_BLOCK_LEN) ? 1 : 0);
  416e9a:	f018 091f 	ands.w	r9, r8, #31
  416e9e:	bf18      	it	ne
  416ea0:	f04f 0901 	movne.w	r9, #1
  416ea4:	eb09 1958 	add.w	r9, r9, r8, lsr #5

00416ea8 <.LVL78>:
    XMEMCPY(data, V, sizeof(data));
  416ea8:	f100 0408 	add.w	r4, r0, #8

00416eac <.LVL79>:
  416eac:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
  416eb0:	f100 0c38 	add.w	ip, r0, #56	; 0x38

00416eb4 <.LVL80>:
  416eb4:	4677      	mov	r7, lr
  416eb6:	6820      	ldr	r0, [r4, #0]
  416eb8:	6861      	ldr	r1, [r4, #4]
  416eba:	68a2      	ldr	r2, [r4, #8]
  416ebc:	68e3      	ldr	r3, [r4, #12]
  416ebe:	c70f      	stmia	r7!, {r0, r1, r2, r3}
  416ec0:	3410      	adds	r4, #16
  416ec2:	46be      	mov	lr, r7
  416ec4:	4564      	cmp	r4, ip
  416ec6:	d1f5      	bne.n	416eb4 <.LVL80>
  416ec8:	6820      	ldr	r0, [r4, #0]
  416eca:	6038      	str	r0, [r7, #0]
  416ecc:	88a2      	ldrh	r2, [r4, #4]
  416ece:	79a3      	ldrb	r3, [r4, #6]
  416ed0:	80ba      	strh	r2, [r7, #4]
  416ed2:	71bb      	strb	r3, [r7, #6]

00416ed4 <.LVL81>:
    for (i = 0; i < len; i++) {
  416ed4:	f1b9 0f00 	cmp.w	r9, #0
  416ed8:	f300 8119 	bgt.w	41710e <.LVL170>
    int ret = DRBG_FAILURE;
  416edc:	2702      	movs	r7, #2

00416ede <.LVL82>:
  416ede:	ab0a      	add	r3, sp, #40	; 0x28

00416ee0 <.LBB70>:
    while (len--) *z++ = 0;
  416ee0:	2000      	movs	r0, #0
  416ee2:	f10d 015f 	add.w	r1, sp, #95	; 0x5f

00416ee6 <.LVL84>:
  416ee6:	1c5a      	adds	r2, r3, #1

00416ee8 <.LVL85>:
  416ee8:	7018      	strb	r0, [r3, #0]

00416eea <.LVL86>:
  416eea:	4613      	mov	r3, r2
  416eec:	428a      	cmp	r2, r1
  416eee:	d1fa      	bne.n	416ee6 <.LVL84>

00416ef0 <.LBE70>:
    return (ret == 0) ? DRBG_SUCCESS : DRBG_FAILURE;
  416ef0:	2f00      	cmp	r7, #0
  416ef2:	f000 8116 	beq.w	417122 <.LBE89>
  416ef6:	2402      	movs	r4, #2
  416ef8:	e0e1      	b.n	4170be <.LBB91>

00416efa <.LVL88>:
            ret = wc_Sha256Update(&sha, data, sizeof(data));
  416efa:	465a      	mov	r2, fp
  416efc:	4651      	mov	r1, sl
  416efe:	a818      	add	r0, sp, #96	; 0x60

00416f00 <.LVL89>:
  416f00:	f006 fbc9 	bl	41d696 <.LFE18>

00416f04 <.LVL90>:
        if (ret == 0)
  416f04:	4607      	mov	r7, r0
  416f06:	2800      	cmp	r0, #0
  416f08:	f040 8107 	bne.w	41711a <.LVL171>
            ret = wc_Sha256Final(&sha, digest);
  416f0c:	a902      	add	r1, sp, #8
  416f0e:	a818      	add	r0, sp, #96	; 0x60

00416f10 <.LVL91>:
  416f10:	f002 fe52 	bl	419bb8 <.LFE175>

00416f14 <.LVL92>:
  416f14:	4607      	mov	r7, r0

00416f16 <.LVL93>:
        wc_Sha256Free(&sha);
  416f16:	a818      	add	r0, sp, #96	; 0x60

00416f18 <.LVL94>:
  416f18:	f004 fc8b 	bl	41b832 <.LFE38>

00416f1c <.LVL95>:
        if (ret == 0) {
  416f1c:	2f00      	cmp	r7, #0
  416f1e:	d146      	bne.n	416fae <.LVL110>
            XMEMCPY(&checkBlock, digest, sizeof(word32));
  416f20:	9b02      	ldr	r3, [sp, #8]

00416f22 <.LVL96>:
            if (drbg->reseedCtr > 1 && checkBlock == drbg->lastBlock) {
  416f22:	6832      	ldr	r2, [r6, #0]
  416f24:	2a01      	cmp	r2, #1
  416f26:	d902      	bls.n	416f2e <.LVL96+0xc>
  416f28:	6872      	ldr	r2, [r6, #4]
  416f2a:	4293      	cmp	r3, r2
  416f2c:	d02f      	beq.n	416f8e <.LBE72>
                drbg->matchCount = 0;
  416f2e:	2200      	movs	r2, #0
  416f30:	f886 2076 	strb.w	r2, [r6, #118]	; 0x76
                drbg->lastBlock = checkBlock;
  416f34:	6073      	str	r3, [r6, #4]

00416f36 <.LVL97>:
            if (out != NULL && outSz != 0) {
  416f36:	b3d5      	cbz	r5, 416fae <.LVL110>
  416f38:	f1b8 0f00 	cmp.w	r8, #0
  416f3c:	d037      	beq.n	416fae <.LVL110>
                if (outSz >= OUTPUT_BLOCK_LEN) {
  416f3e:	f1b8 0f1f 	cmp.w	r8, #31
  416f42:	d92d      	bls.n	416fa0 <.LVL107+0xe>
                    XMEMCPY(out, digest, OUTPUT_BLOCK_LEN);
  416f44:	f10d 0e08 	add.w	lr, sp, #8

00416f48 <.LVL98>:
  416f48:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}

00416f4c <.LVL99>:
  416f4c:	6028      	str	r0, [r5, #0]
  416f4e:	6069      	str	r1, [r5, #4]
  416f50:	60aa      	str	r2, [r5, #8]
  416f52:	60eb      	str	r3, [r5, #12]
  416f54:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}

00416f58 <.LVL100>:
  416f58:	6128      	str	r0, [r5, #16]
  416f5a:	6169      	str	r1, [r5, #20]
  416f5c:	61aa      	str	r2, [r5, #24]
  416f5e:	61eb      	str	r3, [r5, #28]
                    outSz -= OUTPUT_BLOCK_LEN;
  416f60:	f1a8 0820 	sub.w	r8, r8, #32
                    out += OUTPUT_BLOCK_LEN;
  416f64:	3520      	adds	r5, #32

00416f66 <.LBB72>:
        data[i]++;
  416f66:	f89a 3036 	ldrb.w	r3, [sl, #54]	; 0x36
  416f6a:	3301      	adds	r3, #1
  416f6c:	b2db      	uxtb	r3, r3
  416f6e:	f88a 3036 	strb.w	r3, [sl, #54]	; 0x36
        if (data[i] != 0) break;
  416f72:	b9e3      	cbnz	r3, 416fae <.LVL110>
  416f74:	f10d 025e 	add.w	r2, sp, #94	; 0x5e
  416f78:	4651      	mov	r1, sl

00416f7a <.LVL103>:
        data[i]++;
  416f7a:	f812 3c01 	ldrb.w	r3, [r2, #-1]
  416f7e:	3301      	adds	r3, #1
  416f80:	b2db      	uxtb	r3, r3
  416f82:	f802 3d01 	strb.w	r3, [r2, #-1]!

00416f86 <.LVL104>:
        if (data[i] != 0) break;
  416f86:	b993      	cbnz	r3, 416fae <.LVL110>

00416f88 <.LVL105>:
    for (i = dataSz - 1; i >= 0; i--)
  416f88:	4291      	cmp	r1, r2
  416f8a:	d1f6      	bne.n	416f7a <.LVL103>
  416f8c:	e00f      	b.n	416fae <.LVL110>

00416f8e <.LBE72>:
                if (drbg->matchCount == 1) {
  416f8e:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76

00416f92 <.LVL107>:
  416f92:	2b01      	cmp	r3, #1
  416f94:	f000 80d5 	beq.w	417142 <.LBB90>
                    drbg->matchCount = 1;
  416f98:	2301      	movs	r3, #1
  416f9a:	f886 3076 	strb.w	r3, [r6, #118]	; 0x76
  416f9e:	e7ca      	b.n	416f36 <.LVL97>
                    XMEMCPY(out, digest, outSz);
  416fa0:	4642      	mov	r2, r8
  416fa2:	a902      	add	r1, sp, #8

00416fa4 <.LVL108>:
  416fa4:	4628      	mov	r0, r5
  416fa6:	f003 fced 	bl	41a984 <.LFE14>

00416faa <.LVL109>:
                    outSz = 0;
  416faa:	f04f 0800 	mov.w	r8, #0

00416fae <.LVL110>:
    for (i = 0; i < len; i++) {
  416fae:	3401      	adds	r4, #1
  416fb0:	45a1      	cmp	r9, r4
  416fb2:	dd94      	ble.n	416ede <.LVL82>

00416fb4 <.LVL112>:
        ret = wc_InitSha256(&sha);
  416fb4:	a818      	add	r0, sp, #96	; 0x60
  416fb6:	f00b f9eb 	bl	422390 <.LFE20>

00416fba <.LVL113>:
        if (ret == 0)
  416fba:	4607      	mov	r7, r0
  416fbc:	2800      	cmp	r0, #0
  416fbe:	d09c      	beq.n	416efa <.LVL88>

00416fc0 <.LVL114>:
        wc_Sha256Free(&sha);
  416fc0:	a818      	add	r0, sp, #96	; 0x60
  416fc2:	f004 fc36 	bl	41b832 <.LFE38>

00416fc6 <.LVL115>:
  416fc6:	e7f2      	b.n	416fae <.LVL110>

00416fc8 <.LBE68>:
            ret = wc_InitSha256_ex(&sha, drbg->heap, drbg->devId);
        #else
            ret = wc_InitSha256(&sha);
        #endif
            if (ret == 0)
                ret = wc_Sha256Update(&sha, &type, sizeof(type));
  416fc8:	2201      	movs	r2, #1
  416fca:	f10d 0103 	add.w	r1, sp, #3
  416fce:	a83c      	add	r0, sp, #240	; 0xf0

00416fd0 <.LVL117>:
  416fd0:	f006 fb61 	bl	41d696 <.LFE18>

00416fd4 <.LVL118>:
            if (ret == 0)
  416fd4:	4604      	mov	r4, r0
  416fd6:	2800      	cmp	r0, #0
  416fd8:	f040 80b5 	bne.w	417146 <.LBE90>
                ret = wc_Sha256Update(&sha, drbg->V, sizeof(drbg->V));
  416fdc:	2237      	movs	r2, #55	; 0x37
  416fde:	4629      	mov	r1, r5
  416fe0:	a83c      	add	r0, sp, #240	; 0xf0

00416fe2 <.LVL119>:
  416fe2:	f006 fb58 	bl	41d696 <.LFE18>

00416fe6 <.LVL120>:
            if (ret == 0)
  416fe6:	4604      	mov	r4, r0
  416fe8:	2800      	cmp	r0, #0
  416fea:	f040 80a3 	bne.w	417134 <.LVL175+0x8>
                ret = wc_Sha256Final(&sha, digest);
  416fee:	a934      	add	r1, sp, #208	; 0xd0
  416ff0:	a83c      	add	r0, sp, #240	; 0xf0

00416ff2 <.LVL121>:
  416ff2:	f002 fde1 	bl	419bb8 <.LFE175>

00416ff6 <.LVL122>:
  416ff6:	4604      	mov	r4, r0

00416ff8 <.LVL123>:

            wc_Sha256Free(&sha);
  416ff8:	a83c      	add	r0, sp, #240	; 0xf0

00416ffa <.LVL124>:
  416ffa:	f004 fc1a 	bl	41b832 <.LFE38>

00416ffe <.LVL125>:

            if (ret == 0) {
  416ffe:	2c00      	cmp	r4, #0
  417000:	f040 809b 	bne.w	41713a <.LVL177>
  417004:	f106 023f 	add.w	r2, r6, #63	; 0x3f
  417008:	a83c      	add	r0, sp, #240	; 0xf0
  41700a:	f10d 0cd0 	add.w	ip, sp, #208	; 0xd0
  41700e:	4611      	mov	r1, r2
  417010:	2300      	movs	r3, #0

00417012 <.LBB76>:
            carry += d[dIdx] + s[sIdx];
  417012:	f811 ec01 	ldrb.w	lr, [r1, #-1]
  417016:	f810 7d01 	ldrb.w	r7, [r0, #-1]!
  41701a:	4473      	add	r3, lr

0041701c <.LVL127>:
  41701c:	443b      	add	r3, r7

0041701e <.LVL128>:
            d[dIdx] = (byte)carry;
  41701e:	f801 3d01 	strb.w	r3, [r1, #-1]!

00417022 <.LVL129>:
            carry >>= 8;
  417022:	f3c3 230f 	ubfx	r3, r3, #8, #16

00417026 <.LVL130>:
        for (sIdx = sLen - 1, dIdx = dLen - 1; sIdx >= 0; dIdx--, sIdx--)
  417026:	4560      	cmp	r0, ip
  417028:	d1f3      	bne.n	417012 <.LBB76>

0041702a <.LVL131>:
        for (; carry != 0 && dIdx >= 0; dIdx--) {
  41702a:	b16b      	cbz	r3, 417048 <.LVL139>
  41702c:	f106 011f 	add.w	r1, r6, #31

00417030 <.LVL132>:
        for (sIdx = sLen - 1, dIdx = dLen - 1; sIdx >= 0; dIdx--, sIdx--)
  417030:	2016      	movs	r0, #22

00417032 <.LVL133>:
            carry += d[dIdx];
  417032:	f811 7c01 	ldrb.w	r7, [r1, #-1]
  417036:	443b      	add	r3, r7

00417038 <.LVL134>:
  417038:	b29b      	uxth	r3, r3

0041703a <.LVL135>:
            d[dIdx] = (byte)carry;
  41703a:	f801 3d01 	strb.w	r3, [r1, #-1]!

0041703e <.LVL136>:
        for (; carry != 0 && dIdx >= 0; dIdx--) {
  41703e:	3801      	subs	r0, #1
  417040:	0a1b      	lsrs	r3, r3, #8

00417042 <.LVL138>:
  417042:	d001      	beq.n	417048 <.LVL139>
  417044:	2800      	cmp	r0, #0
  417046:	daf4      	bge.n	417032 <.LVL133>

00417048 <.LVL139>:
  417048:	f106 0076 	add.w	r0, r6, #118	; 0x76
        for (sIdx = sLen - 1, dIdx = dLen - 1; sIdx >= 0; dIdx--, sIdx--)
  41704c:	4611      	mov	r1, r2

0041704e <.LBB79>:
    word16 carry = 0;
  41704e:	2300      	movs	r3, #0

00417050 <.LBB81>:
            carry += d[dIdx] + s[sIdx];
  417050:	f811 ec01 	ldrb.w	lr, [r1, #-1]
  417054:	f810 7d01 	ldrb.w	r7, [r0, #-1]!
  417058:	4473      	add	r3, lr

0041705a <.LVL141>:
  41705a:	443b      	add	r3, r7

0041705c <.LVL142>:
            d[dIdx] = (byte)carry;
  41705c:	f801 3d01 	strb.w	r3, [r1, #-1]!

00417060 <.LVL143>:
            carry >>= 8;
  417060:	f3c3 230f 	ubfx	r3, r3, #8, #16

00417064 <.LVL144>:
        for (sIdx = sLen - 1, dIdx = dLen - 1; sIdx >= 0; dIdx--, sIdx--)
  417064:	428d      	cmp	r5, r1
  417066:	d1f3      	bne.n	417050 <.LBB81>

00417068 <.LBE79>:
                array_add(drbg->V, sizeof(drbg->V), digest, SHA256_DIGEST_SIZE);
                array_add(drbg->V, sizeof(drbg->V), drbg->C, sizeof(drbg->C));
            #ifdef LITTLE_ENDIAN_ORDER
                reseedCtr = ByteReverseWord32(reseedCtr);
  417068:	9901      	ldr	r1, [sp, #4]

0041706a <.LBB82>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  41706a:	0a0b      	lsrs	r3, r1, #8
  41706c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  417070:	0209      	lsls	r1, r1, #8
  417072:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  417076:	430b      	orrs	r3, r1

00417078 <.LBB84>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  417078:	ea4f 4333 	mov.w	r3, r3, ror #16

0041707c <.LBE82>:
  41707c:	9301      	str	r3, [sp, #4]

0041707e <.LVL146>:
  41707e:	a902      	add	r1, sp, #8
  417080:	f106 073b 	add.w	r7, r6, #59	; 0x3b

00417084 <.LBB86>:
    word16 carry = 0;
  417084:	2300      	movs	r3, #0

00417086 <.LBB88>:
            carry += d[dIdx] + s[sIdx];
  417086:	f812 5c01 	ldrb.w	r5, [r2, #-1]
  41708a:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
  41708e:	442b      	add	r3, r5

00417090 <.LVL148>:
  417090:	4403      	add	r3, r0

00417092 <.LVL149>:
            d[dIdx] = (byte)carry;
  417092:	f802 3d01 	strb.w	r3, [r2, #-1]!

00417096 <.LVL150>:
            carry >>= 8;
  417096:	f3c3 230f 	ubfx	r3, r3, #8, #16

0041709a <.LVL151>:
        for (sIdx = sLen - 1, dIdx = dLen - 1; sIdx >= 0; dIdx--, sIdx--)
  41709a:	42ba      	cmp	r2, r7
  41709c:	d1f3      	bne.n	417086 <.LBB88>

0041709e <.LVL152>:
        for (; carry != 0 && dIdx >= 0; dIdx--) {
  41709e:	2b00      	cmp	r3, #0
  4170a0:	d04b      	beq.n	41713a <.LVL177>
        for (sIdx = sLen - 1, dIdx = dLen - 1; sIdx >= 0; dIdx--, sIdx--)
  4170a2:	2132      	movs	r1, #50	; 0x32

004170a4 <.LVL153>:
            carry += d[dIdx];
  4170a4:	f812 0c01 	ldrb.w	r0, [r2, #-1]
  4170a8:	4403      	add	r3, r0

004170aa <.LVL154>:
  4170aa:	b29b      	uxth	r3, r3

004170ac <.LVL155>:
            d[dIdx] = (byte)carry;
  4170ac:	f802 3d01 	strb.w	r3, [r2, #-1]!

004170b0 <.LVL156>:
        for (; carry != 0 && dIdx >= 0; dIdx--) {
  4170b0:	3901      	subs	r1, #1
  4170b2:	0a1b      	lsrs	r3, r3, #8

004170b4 <.LVL158>:
  4170b4:	d041      	beq.n	41713a <.LVL177>
  4170b6:	2900      	cmp	r1, #0
  4170b8:	daf4      	bge.n	4170a4 <.LVL153>
  4170ba:	e03e      	b.n	41713a <.LVL177>

004170bc <.LBE67>:
    int ret = DRBG_NEED_RESEED;
  4170bc:	2403      	movs	r4, #3

004170be <.LBB91>:
    volatile byte* z = (volatile byte*)mem;
  4170be:	ab34      	add	r3, sp, #208	; 0xd0

004170c0 <.LVL161>:
    while (len--) *z++ = 0;
  4170c0:	2000      	movs	r0, #0
  4170c2:	a93c      	add	r1, sp, #240	; 0xf0

004170c4 <.LVL162>:
  4170c4:	1c5a      	adds	r2, r3, #1

004170c6 <.LVL163>:
  4170c6:	7018      	strb	r0, [r3, #0]

004170c8 <.LVL164>:
  4170c8:	4613      	mov	r3, r2
  4170ca:	428a      	cmp	r2, r1
  4170cc:	d1fa      	bne.n	4170c4 <.LVL162>

004170ce <.LBE91>:
    }
    ForceZero(digest, SHA256_DIGEST_SIZE);

    FREE_VAR(digest, drbg->heap);

    return (ret == 0) ? DRBG_SUCCESS : DRBG_FAILURE;
  4170ce:	2c00      	cmp	r4, #0
  4170d0:	bf18      	it	ne
  4170d2:	2402      	movne	r4, #2

004170d4 <.LVL166>:
}
  4170d4:	4620      	mov	r0, r4
  4170d6:	b059      	add	sp, #356	; 0x164

004170d8 <.LCFI16>:
  4170d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004170dc <.LBB89>:
    XMEMCPY(data, V, sizeof(data));
  4170dc:	f100 0408 	add.w	r4, r0, #8
  4170e0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
  4170e4:	f100 0c38 	add.w	ip, r0, #56	; 0x38

004170e8 <.LVL168>:
  4170e8:	4677      	mov	r7, lr
  4170ea:	6820      	ldr	r0, [r4, #0]
  4170ec:	6861      	ldr	r1, [r4, #4]
  4170ee:	68a2      	ldr	r2, [r4, #8]
  4170f0:	68e3      	ldr	r3, [r4, #12]
  4170f2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
  4170f4:	3410      	adds	r4, #16
  4170f6:	46be      	mov	lr, r7
  4170f8:	4564      	cmp	r4, ip
  4170fa:	d1f5      	bne.n	4170e8 <.LVL168>
  4170fc:	6820      	ldr	r0, [r4, #0]
  4170fe:	6038      	str	r0, [r7, #0]
  417100:	88a2      	ldrh	r2, [r4, #4]
  417102:	79a3      	ldrb	r3, [r4, #6]
  417104:	80ba      	strh	r2, [r7, #4]
  417106:	71bb      	strb	r3, [r7, #6]

00417108 <.LVL169>:
    len = (outSz / OUTPUT_BLOCK_LEN) + ((outSz % OUTPUT_BLOCK_LEN) ? 1 : 0);
  417108:	f04f 0901 	mov.w	r9, #1
    if (outSz == 0) outSz = 1;
  41710c:	46c8      	mov	r8, r9

0041710e <.LVL170>:
  41710e:	2400      	movs	r4, #0
            ret = wc_Sha256Update(&sha, data, sizeof(data));
  417110:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
  417114:	f04f 0b37 	mov.w	fp, #55	; 0x37
  417118:	e74c      	b.n	416fb4 <.LVL112>

0041711a <.LVL171>:
        wc_Sha256Free(&sha);
  41711a:	a818      	add	r0, sp, #96	; 0x60
  41711c:	f004 fb89 	bl	41b832 <.LFE38>

00417120 <.LVL172>:
  417120:	e745      	b.n	416fae <.LVL110>

00417122 <.LBE89>:
        ret = Hash_gen(drbg, out, outSz, drbg->V);
  417122:	f106 0508 	add.w	r5, r6, #8

00417126 <.LVL174>:
            ret = wc_InitSha256(&sha);
  417126:	a83c      	add	r0, sp, #240	; 0xf0
  417128:	f00b f932 	bl	422390 <.LFE20>

0041712c <.LVL175>:
            if (ret == 0)
  41712c:	4604      	mov	r4, r0
  41712e:	2800      	cmp	r0, #0
  417130:	f43f af4a 	beq.w	416fc8 <.LBE68>
            wc_Sha256Free(&sha);
  417134:	a83c      	add	r0, sp, #240	; 0xf0

00417136 <.LVL176>:
  417136:	f004 fb7c 	bl	41b832 <.LFE38>

0041713a <.LVL177>:
            drbg->reseedCtr++;
  41713a:	6833      	ldr	r3, [r6, #0]
  41713c:	3301      	adds	r3, #1
  41713e:	6033      	str	r3, [r6, #0]
  417140:	e7bd      	b.n	4170be <.LBB91>

00417142 <.LBB90>:
                    return DRBG_CONT_FAILURE;
  417142:	2404      	movs	r4, #4

00417144 <.LVL179>:
  417144:	e7bb      	b.n	4170be <.LBB91>

00417146 <.LBE90>:
            wc_Sha256Free(&sha);
  417146:	a83c      	add	r0, sp, #240	; 0xf0

00417148 <.LVL181>:
  417148:	f004 fb73 	bl	41b832 <.LFE38>

0041714c <.LVL182>:
  41714c:	e7f5      	b.n	41713a <.LVL177>
  41714e:	bf00      	nop
  417150:	000f4240 	.word	0x000f4240

Disassembly of section .text%77:

00417154 <__udivmoddi4>:
  417154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  417158:	468c      	mov	ip, r1
  41715a:	460d      	mov	r5, r1
  41715c:	4604      	mov	r4, r0
  41715e:	9e08      	ldr	r6, [sp, #32]
  417160:	2b00      	cmp	r3, #0
  417162:	d151      	bne.n	417208 <__udivmoddi4+0xb4>
  417164:	428a      	cmp	r2, r1
  417166:	4617      	mov	r7, r2
  417168:	d96d      	bls.n	417246 <__udivmoddi4+0xf2>
  41716a:	fab2 fe82 	clz	lr, r2
  41716e:	f1be 0f00 	cmp.w	lr, #0
  417172:	d00b      	beq.n	41718c <__udivmoddi4+0x38>
  417174:	f1ce 0c20 	rsb	ip, lr, #32
  417178:	fa01 f50e 	lsl.w	r5, r1, lr
  41717c:	fa20 fc0c 	lsr.w	ip, r0, ip
  417180:	fa02 f70e 	lsl.w	r7, r2, lr
  417184:	ea4c 0c05 	orr.w	ip, ip, r5
  417188:	fa00 f40e 	lsl.w	r4, r0, lr
  41718c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  417190:	0c25      	lsrs	r5, r4, #16
  417192:	fbbc f8fa 	udiv	r8, ip, sl
  417196:	fa1f f987 	uxth.w	r9, r7
  41719a:	fb0a cc18 	mls	ip, sl, r8, ip
  41719e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4171a2:	fb08 f309 	mul.w	r3, r8, r9
  4171a6:	42ab      	cmp	r3, r5
  4171a8:	d90a      	bls.n	4171c0 <__udivmoddi4+0x6c>
  4171aa:	19ed      	adds	r5, r5, r7
  4171ac:	f108 32ff 	add.w	r2, r8, #4294967295
  4171b0:	f080 8123 	bcs.w	4173fa <__udivmoddi4+0x2a6>
  4171b4:	42ab      	cmp	r3, r5
  4171b6:	f240 8120 	bls.w	4173fa <__udivmoddi4+0x2a6>
  4171ba:	f1a8 0802 	sub.w	r8, r8, #2
  4171be:	443d      	add	r5, r7
  4171c0:	1aed      	subs	r5, r5, r3
  4171c2:	b2a4      	uxth	r4, r4
  4171c4:	fbb5 f0fa 	udiv	r0, r5, sl
  4171c8:	fb0a 5510 	mls	r5, sl, r0, r5
  4171cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4171d0:	fb00 f909 	mul.w	r9, r0, r9
  4171d4:	45a1      	cmp	r9, r4
  4171d6:	d909      	bls.n	4171ec <__udivmoddi4+0x98>
  4171d8:	19e4      	adds	r4, r4, r7
  4171da:	f100 33ff 	add.w	r3, r0, #4294967295
  4171de:	f080 810a 	bcs.w	4173f6 <__udivmoddi4+0x2a2>
  4171e2:	45a1      	cmp	r9, r4
  4171e4:	f240 8107 	bls.w	4173f6 <__udivmoddi4+0x2a2>
  4171e8:	3802      	subs	r0, #2
  4171ea:	443c      	add	r4, r7
  4171ec:	eba4 0409 	sub.w	r4, r4, r9
  4171f0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4171f4:	2100      	movs	r1, #0
  4171f6:	2e00      	cmp	r6, #0
  4171f8:	d061      	beq.n	4172be <__udivmoddi4+0x16a>
  4171fa:	fa24 f40e 	lsr.w	r4, r4, lr
  4171fe:	2300      	movs	r3, #0
  417200:	6034      	str	r4, [r6, #0]
  417202:	6073      	str	r3, [r6, #4]
  417204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  417208:	428b      	cmp	r3, r1
  41720a:	d907      	bls.n	41721c <__udivmoddi4+0xc8>
  41720c:	2e00      	cmp	r6, #0
  41720e:	d054      	beq.n	4172ba <__udivmoddi4+0x166>
  417210:	2100      	movs	r1, #0
  417212:	e886 0021 	stmia.w	r6, {r0, r5}
  417216:	4608      	mov	r0, r1
  417218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  41721c:	fab3 f183 	clz	r1, r3
  417220:	2900      	cmp	r1, #0
  417222:	f040 808e 	bne.w	417342 <__udivmoddi4+0x1ee>
  417226:	42ab      	cmp	r3, r5
  417228:	d302      	bcc.n	417230 <__udivmoddi4+0xdc>
  41722a:	4282      	cmp	r2, r0
  41722c:	f200 80fa 	bhi.w	417424 <__udivmoddi4+0x2d0>
  417230:	1a84      	subs	r4, r0, r2
  417232:	eb65 0503 	sbc.w	r5, r5, r3
  417236:	2001      	movs	r0, #1
  417238:	46ac      	mov	ip, r5
  41723a:	2e00      	cmp	r6, #0
  41723c:	d03f      	beq.n	4172be <__udivmoddi4+0x16a>
  41723e:	e886 1010 	stmia.w	r6, {r4, ip}
  417242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  417246:	b912      	cbnz	r2, 41724e <__udivmoddi4+0xfa>
  417248:	2701      	movs	r7, #1
  41724a:	fbb7 f7f2 	udiv	r7, r7, r2
  41724e:	fab7 fe87 	clz	lr, r7
  417252:	f1be 0f00 	cmp.w	lr, #0
  417256:	d134      	bne.n	4172c2 <__udivmoddi4+0x16e>
  417258:	1beb      	subs	r3, r5, r7
  41725a:	0c3a      	lsrs	r2, r7, #16
  41725c:	fa1f fc87 	uxth.w	ip, r7
  417260:	2101      	movs	r1, #1
  417262:	fbb3 f8f2 	udiv	r8, r3, r2
  417266:	0c25      	lsrs	r5, r4, #16
  417268:	fb02 3318 	mls	r3, r2, r8, r3
  41726c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  417270:	fb0c f308 	mul.w	r3, ip, r8
  417274:	42ab      	cmp	r3, r5
  417276:	d907      	bls.n	417288 <__udivmoddi4+0x134>
  417278:	19ed      	adds	r5, r5, r7
  41727a:	f108 30ff 	add.w	r0, r8, #4294967295
  41727e:	d202      	bcs.n	417286 <__udivmoddi4+0x132>
  417280:	42ab      	cmp	r3, r5
  417282:	f200 80d1 	bhi.w	417428 <__udivmoddi4+0x2d4>
  417286:	4680      	mov	r8, r0
  417288:	1aed      	subs	r5, r5, r3
  41728a:	b2a3      	uxth	r3, r4
  41728c:	fbb5 f0f2 	udiv	r0, r5, r2
  417290:	fb02 5510 	mls	r5, r2, r0, r5
  417294:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  417298:	fb0c fc00 	mul.w	ip, ip, r0
  41729c:	45a4      	cmp	ip, r4
  41729e:	d907      	bls.n	4172b0 <__udivmoddi4+0x15c>
  4172a0:	19e4      	adds	r4, r4, r7
  4172a2:	f100 33ff 	add.w	r3, r0, #4294967295
  4172a6:	d202      	bcs.n	4172ae <__udivmoddi4+0x15a>
  4172a8:	45a4      	cmp	ip, r4
  4172aa:	f200 80b8 	bhi.w	41741e <__udivmoddi4+0x2ca>
  4172ae:	4618      	mov	r0, r3
  4172b0:	eba4 040c 	sub.w	r4, r4, ip
  4172b4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4172b8:	e79d      	b.n	4171f6 <__udivmoddi4+0xa2>
  4172ba:	4631      	mov	r1, r6
  4172bc:	4630      	mov	r0, r6
  4172be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4172c2:	f1ce 0420 	rsb	r4, lr, #32
  4172c6:	fa05 f30e 	lsl.w	r3, r5, lr
  4172ca:	fa07 f70e 	lsl.w	r7, r7, lr
  4172ce:	fa20 f804 	lsr.w	r8, r0, r4
  4172d2:	0c3a      	lsrs	r2, r7, #16
  4172d4:	fa25 f404 	lsr.w	r4, r5, r4
  4172d8:	ea48 0803 	orr.w	r8, r8, r3
  4172dc:	fbb4 f1f2 	udiv	r1, r4, r2
  4172e0:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4172e4:	fb02 4411 	mls	r4, r2, r1, r4
  4172e8:	fa1f fc87 	uxth.w	ip, r7
  4172ec:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4172f0:	fb01 f30c 	mul.w	r3, r1, ip
  4172f4:	42ab      	cmp	r3, r5
  4172f6:	fa00 f40e 	lsl.w	r4, r0, lr
  4172fa:	d909      	bls.n	417310 <__udivmoddi4+0x1bc>
  4172fc:	19ed      	adds	r5, r5, r7
  4172fe:	f101 30ff 	add.w	r0, r1, #4294967295
  417302:	f080 808a 	bcs.w	41741a <__udivmoddi4+0x2c6>
  417306:	42ab      	cmp	r3, r5
  417308:	f240 8087 	bls.w	41741a <__udivmoddi4+0x2c6>
  41730c:	3902      	subs	r1, #2
  41730e:	443d      	add	r5, r7
  417310:	1aeb      	subs	r3, r5, r3
  417312:	fa1f f588 	uxth.w	r5, r8
  417316:	fbb3 f0f2 	udiv	r0, r3, r2
  41731a:	fb02 3310 	mls	r3, r2, r0, r3
  41731e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  417322:	fb00 f30c 	mul.w	r3, r0, ip
  417326:	42ab      	cmp	r3, r5
  417328:	d907      	bls.n	41733a <__udivmoddi4+0x1e6>
  41732a:	19ed      	adds	r5, r5, r7
  41732c:	f100 38ff 	add.w	r8, r0, #4294967295
  417330:	d26f      	bcs.n	417412 <__udivmoddi4+0x2be>
  417332:	42ab      	cmp	r3, r5
  417334:	d96d      	bls.n	417412 <__udivmoddi4+0x2be>
  417336:	3802      	subs	r0, #2
  417338:	443d      	add	r5, r7
  41733a:	1aeb      	subs	r3, r5, r3
  41733c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  417340:	e78f      	b.n	417262 <__udivmoddi4+0x10e>
  417342:	f1c1 0720 	rsb	r7, r1, #32
  417346:	fa22 f807 	lsr.w	r8, r2, r7
  41734a:	408b      	lsls	r3, r1
  41734c:	fa05 f401 	lsl.w	r4, r5, r1
  417350:	ea48 0303 	orr.w	r3, r8, r3
  417354:	fa20 fe07 	lsr.w	lr, r0, r7
  417358:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  41735c:	40fd      	lsrs	r5, r7
  41735e:	ea4e 0e04 	orr.w	lr, lr, r4
  417362:	fbb5 f9fc 	udiv	r9, r5, ip
  417366:	ea4f 441e 	mov.w	r4, lr, lsr #16
  41736a:	fb0c 5519 	mls	r5, ip, r9, r5
  41736e:	fa1f f883 	uxth.w	r8, r3
  417372:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  417376:	fb09 f408 	mul.w	r4, r9, r8
  41737a:	42ac      	cmp	r4, r5
  41737c:	fa02 f201 	lsl.w	r2, r2, r1
  417380:	fa00 fa01 	lsl.w	sl, r0, r1
  417384:	d908      	bls.n	417398 <__udivmoddi4+0x244>
  417386:	18ed      	adds	r5, r5, r3
  417388:	f109 30ff 	add.w	r0, r9, #4294967295
  41738c:	d243      	bcs.n	417416 <__udivmoddi4+0x2c2>
  41738e:	42ac      	cmp	r4, r5
  417390:	d941      	bls.n	417416 <__udivmoddi4+0x2c2>
  417392:	f1a9 0902 	sub.w	r9, r9, #2
  417396:	441d      	add	r5, r3
  417398:	1b2d      	subs	r5, r5, r4
  41739a:	fa1f fe8e 	uxth.w	lr, lr
  41739e:	fbb5 f0fc 	udiv	r0, r5, ip
  4173a2:	fb0c 5510 	mls	r5, ip, r0, r5
  4173a6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4173aa:	fb00 f808 	mul.w	r8, r0, r8
  4173ae:	45a0      	cmp	r8, r4
  4173b0:	d907      	bls.n	4173c2 <__udivmoddi4+0x26e>
  4173b2:	18e4      	adds	r4, r4, r3
  4173b4:	f100 35ff 	add.w	r5, r0, #4294967295
  4173b8:	d229      	bcs.n	41740e <__udivmoddi4+0x2ba>
  4173ba:	45a0      	cmp	r8, r4
  4173bc:	d927      	bls.n	41740e <__udivmoddi4+0x2ba>
  4173be:	3802      	subs	r0, #2
  4173c0:	441c      	add	r4, r3
  4173c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4173c6:	eba4 0408 	sub.w	r4, r4, r8
  4173ca:	fba0 8902 	umull	r8, r9, r0, r2
  4173ce:	454c      	cmp	r4, r9
  4173d0:	46c6      	mov	lr, r8
  4173d2:	464d      	mov	r5, r9
  4173d4:	d315      	bcc.n	417402 <__udivmoddi4+0x2ae>
  4173d6:	d012      	beq.n	4173fe <__udivmoddi4+0x2aa>
  4173d8:	b156      	cbz	r6, 4173f0 <__udivmoddi4+0x29c>
  4173da:	ebba 030e 	subs.w	r3, sl, lr
  4173de:	eb64 0405 	sbc.w	r4, r4, r5
  4173e2:	fa04 f707 	lsl.w	r7, r4, r7
  4173e6:	40cb      	lsrs	r3, r1
  4173e8:	431f      	orrs	r7, r3
  4173ea:	40cc      	lsrs	r4, r1
  4173ec:	6037      	str	r7, [r6, #0]
  4173ee:	6074      	str	r4, [r6, #4]
  4173f0:	2100      	movs	r1, #0
  4173f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4173f6:	4618      	mov	r0, r3
  4173f8:	e6f8      	b.n	4171ec <__udivmoddi4+0x98>
  4173fa:	4690      	mov	r8, r2
  4173fc:	e6e0      	b.n	4171c0 <__udivmoddi4+0x6c>
  4173fe:	45c2      	cmp	sl, r8
  417400:	d2ea      	bcs.n	4173d8 <__udivmoddi4+0x284>
  417402:	ebb8 0e02 	subs.w	lr, r8, r2
  417406:	eb69 0503 	sbc.w	r5, r9, r3
  41740a:	3801      	subs	r0, #1
  41740c:	e7e4      	b.n	4173d8 <__udivmoddi4+0x284>
  41740e:	4628      	mov	r0, r5
  417410:	e7d7      	b.n	4173c2 <__udivmoddi4+0x26e>
  417412:	4640      	mov	r0, r8
  417414:	e791      	b.n	41733a <__udivmoddi4+0x1e6>
  417416:	4681      	mov	r9, r0
  417418:	e7be      	b.n	417398 <__udivmoddi4+0x244>
  41741a:	4601      	mov	r1, r0
  41741c:	e778      	b.n	417310 <__udivmoddi4+0x1bc>
  41741e:	3802      	subs	r0, #2
  417420:	443c      	add	r4, r7
  417422:	e745      	b.n	4172b0 <__udivmoddi4+0x15c>
  417424:	4608      	mov	r0, r1
  417426:	e708      	b.n	41723a <__udivmoddi4+0xe6>
  417428:	f1a8 0802 	sub.w	r8, r8, #2
  41742c:	443d      	add	r5, r7
  41742e:	e72b      	b.n	417288 <__udivmoddi4+0x134>

Disassembly of section .text.deflate_fast%78:

00417430 <deflate_fast>:
{
  417430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

00417434 <.LCFI8>:
  417434:	4604      	mov	r4, r0
  417436:	4688      	mov	r8, r1

00417438 <.LBB21>:
            _tr_tally_lit (s, s->window[s->strstart], bflush);
  417438:	f241 65a4 	movw	r5, #5796	; 0x16a4
  41743c:	4405      	add	r5, r0

0041743e <.LBB22>:
            _tr_tally_dist(s, s->strstart - s->match_start,
  41743e:	4fa9      	ldr	r7, [pc, #676]	; (4176e4 <.LVL206>)
  417440:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 4176e8 <.LVL206+0x4>
  417444:	e07e      	b.n	417544 <.LVL182>

00417446 <.LBE22>:
            fill_window(s);
  417446:	4620      	mov	r0, r4
  417448:	f001 fbd0 	bl	418bec <fill_window>

0041744c <.LVL168>:
            if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {
  41744c:	6f63      	ldr	r3, [r4, #116]	; 0x74
  41744e:	f1b8 0f00 	cmp.w	r8, #0
  417452:	d103      	bne.n	41745c <.LVL168+0x10>
  417454:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
  417458:	f0c0 813e 	bcc.w	4176d8 <.LVL203+0x18>
            if (s->lookahead == 0) break; /* flush the current block */
  41745c:	2b00      	cmp	r3, #0
  41745e:	d176      	bne.n	41754e <.LVL183>
    s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;
  417460:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  417462:	4611      	mov	r1, r2
  417464:	2a02      	cmp	r2, #2
  417466:	bf28      	it	cs
  417468:	2102      	movcs	r1, #2
  41746a:	f241 63b4 	movw	r3, #5812	; 0x16b4
  41746e:	50e1      	str	r1, [r4, r3]
    if (flush == Z_FINISH) {
  417470:	f1b8 0f04 	cmp.w	r8, #4
  417474:	f000 8115 	beq.w	4176a2 <.LVL201>
    if (s->last_lit)
  417478:	f504 53b5 	add.w	r3, r4, #5792	; 0x16a0
  41747c:	681b      	ldr	r3, [r3, #0]
  41747e:	2b00      	cmp	r3, #0
  417480:	f000 812d 	beq.w	4176de <.LVL203+0x1e>
        FLUSH_BLOCK(s, 0);
  417484:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  417486:	2800      	cmp	r0, #0
  417488:	f2c0 8124 	blt.w	4176d4 <.LVL203+0x14>
  41748c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  41748e:	4401      	add	r1, r0
  417490:	2300      	movs	r3, #0
  417492:	1a12      	subs	r2, r2, r0
  417494:	4620      	mov	r0, r4
  417496:	f7fa fdbb 	bl	412010 <_tr_flush_block>

0041749a <.LVL169>:
  41749a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  41749c:	65e3      	str	r3, [r4, #92]	; 0x5c
  41749e:	6820      	ldr	r0, [r4, #0]
  4174a0:	f009 faa6 	bl	4209f0 <.LFE41>

004174a4 <.LVL170>:
  4174a4:	6823      	ldr	r3, [r4, #0]
  4174a6:	6918      	ldr	r0, [r3, #16]
                return need_more;
  4174a8:	3000      	adds	r0, #0
  4174aa:	bf18      	it	ne
  4174ac:	2001      	movne	r0, #1
  4174ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

004174b2 <.LVL171>:
            s->match_length = longest_match (s, hash_head);
  4174b2:	4620      	mov	r0, r4
  4174b4:	f002 f84a 	bl	41954c <.LFE1>

004174b8 <.LVL172>:
  4174b8:	6620      	str	r0, [r4, #96]	; 0x60
  4174ba:	e06b      	b.n	417594 <.LVL185>

004174bc <.LBB23>:
            _tr_tally_dist(s, s->strstart - s->match_start,
  4174bc:	eb09 13d3 	add.w	r3, r9, r3, lsr #7

004174c0 <.LVL174>:
  4174c0:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
  4174c4:	e08f      	b.n	4175e6 <.LVL193>

004174c6 <.LBE23>:
                s->strstart += s->match_length;
  4174c6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  4174c8:	4413      	add	r3, r2
  4174ca:	66e3      	str	r3, [r4, #108]	; 0x6c
                s->match_length = 0;
  4174cc:	2200      	movs	r2, #0
  4174ce:	6622      	str	r2, [r4, #96]	; 0x60
                s->ins_h = s->window[s->strstart];
  4174d0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  4174d2:	5cca      	ldrb	r2, [r1, r3]
  4174d4:	64a2      	str	r2, [r4, #72]	; 0x48
                UPDATE_HASH(s, s->ins_h, s->window[s->strstart+1]);
  4174d6:	440b      	add	r3, r1
  4174d8:	785b      	ldrb	r3, [r3, #1]
  4174da:	6da1      	ldr	r1, [r4, #88]	; 0x58
  4174dc:	408a      	lsls	r2, r1
  4174de:	4053      	eors	r3, r2
  4174e0:	6d62      	ldr	r2, [r4, #84]	; 0x54
  4174e2:	4013      	ands	r3, r2
  4174e4:	64a3      	str	r3, [r4, #72]	; 0x48
  4174e6:	e02a      	b.n	41753e <.LBE24+0xc>

004174e8 <.LBB24>:
            _tr_tally_lit (s, s->window[s->strstart], bflush);
  4174e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4174ea:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  4174ec:	5cd3      	ldrb	r3, [r2, r3]

004174ee <.LVL177>:
  4174ee:	f504 52b5 	add.w	r2, r4, #5792	; 0x16a0
  4174f2:	6810      	ldr	r0, [r2, #0]
  4174f4:	6829      	ldr	r1, [r5, #0]
  4174f6:	f04f 0e00 	mov.w	lr, #0
  4174fa:	f821 e010 	strh.w	lr, [r1, r0, lsl #1]
  4174fe:	f241 6198 	movw	r1, #5784	; 0x1698
  417502:	5860      	ldr	r0, [r4, r1]
  417504:	6811      	ldr	r1, [r2, #0]
  417506:	f101 0e01 	add.w	lr, r1, #1
  41750a:	f8c2 e000 	str.w	lr, [r2]
  41750e:	5443      	strb	r3, [r0, r1]
  417510:	eb04 0383 	add.w	r3, r4, r3, lsl #2

00417514 <.LVL178>:
  417514:	f8b3 1094 	ldrh.w	r1, [r3, #148]	; 0x94

00417518 <.LVL179>:
  417518:	3101      	adds	r1, #1
  41751a:	f8a3 1094 	strh.w	r1, [r3, #148]	; 0x94

0041751e <.LVL180>:
  41751e:	f241 639c 	movw	r3, #5788	; 0x169c
  417522:	58e3      	ldr	r3, [r4, r3]
  417524:	f103 3eff 	add.w	lr, r3, #4294967295
  417528:	6810      	ldr	r0, [r2, #0]
  41752a:	4586      	cmp	lr, r0
  41752c:	bf14      	ite	ne
  41752e:	2000      	movne	r0, #0
  417530:	2001      	moveq	r0, #1

00417532 <.LBE24>:
            s->lookahead--;
  417532:	6f63      	ldr	r3, [r4, #116]	; 0x74
  417534:	3b01      	subs	r3, #1
  417536:	6763      	str	r3, [r4, #116]	; 0x74
            s->strstart++;
  417538:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  41753a:	3301      	adds	r3, #1
  41753c:	66e3      	str	r3, [r4, #108]	; 0x6c
        if (bflush) FLUSH_BLOCK(s, 0);
  41753e:	2800      	cmp	r0, #0
  417540:	f040 8095 	bne.w	41766e <.LVL196+0x16>

00417544 <.LVL182>:
        if (s->lookahead < MIN_LOOKAHEAD) {
  417544:	6f63      	ldr	r3, [r4, #116]	; 0x74
  417546:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
  41754a:	f4ff af7c 	bcc.w	417446 <.LBE22>

0041754e <.LVL183>:
        if (s->lookahead >= MIN_MATCH) {
  41754e:	6f63      	ldr	r3, [r4, #116]	; 0x74
  417550:	2b02      	cmp	r3, #2
  417552:	d91f      	bls.n	417594 <.LVL185>
            INSERT_STRING(s, s->strstart, hash_head);
  417554:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  417556:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  417558:	4413      	add	r3, r2
  41755a:	789b      	ldrb	r3, [r3, #2]
  41755c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  41755e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  417560:	4081      	lsls	r1, r0
  417562:	404b      	eors	r3, r1
  417564:	6d61      	ldr	r1, [r4, #84]	; 0x54
  417566:	400b      	ands	r3, r1
  417568:	64a3      	str	r3, [r4, #72]	; 0x48
  41756a:	6c61      	ldr	r1, [r4, #68]	; 0x44
  41756c:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
  417570:	6b63      	ldr	r3, [r4, #52]	; 0x34
  417572:	401a      	ands	r2, r3
  417574:	6c23      	ldr	r3, [r4, #64]	; 0x40
  417576:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

0041757a <.LVL184>:
  41757a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  41757c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  41757e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  417580:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
        if (hash_head != NIL && s->strstart - hash_head <= MAX_DIST(s)) {
  417584:	b131      	cbz	r1, 417594 <.LVL185>
  417586:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  417588:	1a5a      	subs	r2, r3, r1
  41758a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  41758c:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
  417590:	429a      	cmp	r2, r3
  417592:	d98e      	bls.n	4174b2 <.LVL171>

00417594 <.LVL185>:
        if (s->match_length >= MIN_MATCH) {
  417594:	6e23      	ldr	r3, [r4, #96]	; 0x60
  417596:	2b02      	cmp	r3, #2
  417598:	d9a6      	bls.n	4174e8 <.LBB24>

0041759a <.LBB25>:
            _tr_tally_dist(s, s->strstart - s->match_start,
  41759a:	3b03      	subs	r3, #3
  41759c:	b2da      	uxtb	r2, r3

0041759e <.LVL186>:
  41759e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  4175a0:	6f21      	ldr	r1, [r4, #112]	; 0x70
  4175a2:	1a5b      	subs	r3, r3, r1
  4175a4:	b29b      	uxth	r3, r3

004175a6 <.LVL187>:
  4175a6:	f504 5eb5 	add.w	lr, r4, #5792	; 0x16a0
  4175aa:	f8de 0000 	ldr.w	r0, [lr]
  4175ae:	6829      	ldr	r1, [r5, #0]
  4175b0:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
  4175b4:	f241 6198 	movw	r1, #5784	; 0x1698
  4175b8:	5860      	ldr	r0, [r4, r1]
  4175ba:	f8de 1000 	ldr.w	r1, [lr]
  4175be:	f101 0c01 	add.w	ip, r1, #1
  4175c2:	f8ce c000 	str.w	ip, [lr]
  4175c6:	5442      	strb	r2, [r0, r1]
  4175c8:	3b01      	subs	r3, #1

004175ca <.LVL188>:
  4175ca:	b29b      	uxth	r3, r3

004175cc <.LVL189>:
  4175cc:	5cba      	ldrb	r2, [r7, r2]

004175ce <.LVL190>:
  4175ce:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  4175d2:	f8b2 1498 	ldrh.w	r1, [r2, #1176]	; 0x498

004175d6 <.LVL191>:
  4175d6:	3101      	adds	r1, #1
  4175d8:	f8a2 1498 	strh.w	r1, [r2, #1176]	; 0x498

004175dc <.LVL192>:
  4175dc:	2bff      	cmp	r3, #255	; 0xff
  4175de:	f63f af6d 	bhi.w	4174bc <.LBB23>
  4175e2:	f819 3003 	ldrb.w	r3, [r9, r3]

004175e6 <.LVL193>:
  4175e6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  4175ea:	f8b3 2988 	ldrh.w	r2, [r3, #2440]	; 0x988
  4175ee:	3201      	adds	r2, #1
  4175f0:	f8a3 2988 	strh.w	r2, [r3, #2440]	; 0x988
  4175f4:	f241 639c 	movw	r3, #5788	; 0x169c
  4175f8:	58e3      	ldr	r3, [r4, r3]
  4175fa:	f103 3eff 	add.w	lr, r3, #4294967295
  4175fe:	f504 53b5 	add.w	r3, r4, #5792	; 0x16a0
  417602:	6818      	ldr	r0, [r3, #0]
  417604:	4586      	cmp	lr, r0
  417606:	bf14      	ite	ne
  417608:	2000      	movne	r0, #0
  41760a:	2001      	moveq	r0, #1

0041760c <.LBE25>:
            s->lookahead -= s->match_length;
  41760c:	6e23      	ldr	r3, [r4, #96]	; 0x60
  41760e:	6f62      	ldr	r2, [r4, #116]	; 0x74
  417610:	1ad2      	subs	r2, r2, r3
  417612:	6762      	str	r2, [r4, #116]	; 0x74
            if (s->match_length <= s->max_insert_length &&
  417614:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
  417618:	428b      	cmp	r3, r1
  41761a:	f63f af54 	bhi.w	4174c6 <.LBE23>
  41761e:	2a02      	cmp	r2, #2
  417620:	f67f af51 	bls.w	4174c6 <.LBE23>
                s->match_length--; /* string at strstart already in table */
  417624:	3b01      	subs	r3, #1
  417626:	6623      	str	r3, [r4, #96]	; 0x60
                    s->strstart++;
  417628:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  41762a:	1c4a      	adds	r2, r1, #1
  41762c:	66e2      	str	r2, [r4, #108]	; 0x6c
                    INSERT_STRING(s, s->strstart, hash_head);
  41762e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  417630:	440b      	add	r3, r1
  417632:	78db      	ldrb	r3, [r3, #3]
  417634:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  417636:	6da6      	ldr	r6, [r4, #88]	; 0x58
  417638:	40b1      	lsls	r1, r6
  41763a:	404b      	eors	r3, r1
  41763c:	6d61      	ldr	r1, [r4, #84]	; 0x54
  41763e:	400b      	ands	r3, r1
  417640:	64a3      	str	r3, [r4, #72]	; 0x48
  417642:	6c61      	ldr	r1, [r4, #68]	; 0x44
  417644:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
  417648:	6b63      	ldr	r3, [r4, #52]	; 0x34
  41764a:	401a      	ands	r2, r3
  41764c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  41764e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

00417652 <.LVL195>:
  417652:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  417654:	6c63      	ldr	r3, [r4, #68]	; 0x44
  417656:	6ee1      	ldr	r1, [r4, #108]	; 0x6c

00417658 <.LVL196>:
  417658:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
                } while (--s->match_length != 0);
  41765c:	6e23      	ldr	r3, [r4, #96]	; 0x60
  41765e:	3b01      	subs	r3, #1
  417660:	6623      	str	r3, [r4, #96]	; 0x60
  417662:	2b00      	cmp	r3, #0
  417664:	d1e0      	bne.n	417628 <.LBE25+0x1c>
                s->strstart++;
  417666:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  417668:	3301      	adds	r3, #1
  41766a:	66e3      	str	r3, [r4, #108]	; 0x6c
  41766c:	e767      	b.n	41753e <.LBE24+0xc>
        if (bflush) FLUSH_BLOCK(s, 0);
  41766e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  417670:	2a00      	cmp	r2, #0
  417672:	db14      	blt.n	41769e <.LVL200>
  417674:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  417676:	4411      	add	r1, r2
  417678:	6ee0      	ldr	r0, [r4, #108]	; 0x6c

0041767a <.LVL197>:
  41767a:	2300      	movs	r3, #0
  41767c:	1a82      	subs	r2, r0, r2
  41767e:	4620      	mov	r0, r4
  417680:	f7fa fcc6 	bl	412010 <_tr_flush_block>

00417684 <.LVL198>:
  417684:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  417686:	65e3      	str	r3, [r4, #92]	; 0x5c
  417688:	6820      	ldr	r0, [r4, #0]
  41768a:	f009 f9b1 	bl	4209f0 <.LFE41>

0041768e <.LVL199>:
  41768e:	6823      	ldr	r3, [r4, #0]
  417690:	691b      	ldr	r3, [r3, #16]
  417692:	2b00      	cmp	r3, #0
  417694:	f47f af56 	bne.w	417544 <.LVL182>
  417698:	2000      	movs	r0, #0
  41769a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0041769e <.LVL200>:
  41769e:	2100      	movs	r1, #0
  4176a0:	e7ea      	b.n	417678 <.LVL196+0x20>

004176a2 <.LVL201>:
        FLUSH_BLOCK(s, 1);
  4176a2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  4176a4:	2800      	cmp	r0, #0
  4176a6:	db13      	blt.n	4176d0 <.LVL203+0x10>
  4176a8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  4176aa:	4401      	add	r1, r0
  4176ac:	2301      	movs	r3, #1
  4176ae:	1a12      	subs	r2, r2, r0
  4176b0:	4620      	mov	r0, r4
  4176b2:	f7fa fcad 	bl	412010 <_tr_flush_block>

004176b6 <.LVL202>:
  4176b6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  4176b8:	65e3      	str	r3, [r4, #92]	; 0x5c
  4176ba:	6820      	ldr	r0, [r4, #0]
  4176bc:	f009 f998 	bl	4209f0 <.LFE41>

004176c0 <.LVL203>:
  4176c0:	6823      	ldr	r3, [r4, #0]
  4176c2:	691b      	ldr	r3, [r3, #16]
        return finish_done;
  4176c4:	2b00      	cmp	r3, #0
  4176c6:	bf0c      	ite	eq
  4176c8:	2002      	moveq	r0, #2
  4176ca:	2003      	movne	r0, #3
  4176cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        FLUSH_BLOCK(s, 1);
  4176d0:	2100      	movs	r1, #0
  4176d2:	e7eb      	b.n	4176ac <.LVL201+0xa>
        FLUSH_BLOCK(s, 0);
  4176d4:	2100      	movs	r1, #0
  4176d6:	e6db      	b.n	417490 <.LVL168+0x44>
                return need_more;
  4176d8:	2000      	movs	r0, #0
  4176da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return block_done;
  4176de:	2001      	movs	r0, #1
}
  4176e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

004176e4 <.LVL206>:
  4176e4:	0041b938 	.word	0x0041b938
  4176e8:	004189ec 	.word	0x004189ec

Disassembly of section .text.crc32%79:

004176ec <crc32>:
unsigned long ZEXPORT crc32(crc, buf, len)
    unsigned long crc;
    const unsigned char FAR *buf;
    uInt len;
{
    if (buf == Z_NULL) return 0UL;
  4176ec:	2900      	cmp	r1, #0
  4176ee:	f000 814b 	beq.w	417988 <.LBE5>
{
  4176f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

004176f6 <.LCFI4>:
  4176f6:	460c      	mov	r4, r1

004176f8 <.LBB5>:
{
    register z_crc_t c;
    register const z_crc_t FAR *buf4;

    c = (z_crc_t)crc;
    c = ~c;
  4176f8:	43c0      	mvns	r0, r0

004176fa <.LVL36>:
    while (len && ((ptrdiff_t)buf & 3)) {
  4176fa:	2a00      	cmp	r2, #0
  4176fc:	f000 8146 	beq.w	41798c <.LBB10>
  417700:	f011 0f03 	tst.w	r1, #3
  417704:	f000 813e 	beq.w	417984 <.LVL85>
        c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
  417708:	49a1      	ldr	r1, [pc, #644]	; (417990 <.LBB10+0x4>)

0041770a <.LVL37>:
  41770a:	f814 3b01 	ldrb.w	r3, [r4], #1

0041770e <.LVL38>:
  41770e:	4043      	eors	r3, r0
  417710:	b2db      	uxtb	r3, r3
  417712:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  417716:	ea83 2010 	eor.w	r0, r3, r0, lsr #8

0041771a <.LVL39>:
    while (len && ((ptrdiff_t)buf & 3)) {
  41771a:	3a01      	subs	r2, #1

0041771c <.LVL40>:
  41771c:	f000 812f 	beq.w	41797e <.LVL83>
  417720:	f014 0f03 	tst.w	r4, #3
  417724:	d1f1      	bne.n	41770a <.LVL37>
        c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
  417726:	46a0      	mov	r8, r4

00417728 <.LVL41>:
        len--;
    }

    buf4 = (const z_crc_t FAR *)(const void FAR *)buf;
    while (len >= 32) {
  417728:	2a1f      	cmp	r2, #31
  41772a:	f240 80ed 	bls.w	417908 <.LVL70>
  41772e:	f108 0520 	add.w	r5, r8, #32
  417732:	4616      	mov	r6, r2
        DOLIT32;
  417734:	4b96      	ldr	r3, [pc, #600]	; (417990 <.LBB10+0x4>)

00417736 <.LVL42>:
  417736:	f855 1c20 	ldr.w	r1, [r5, #-32]
  41773a:	4048      	eors	r0, r1
  41773c:	f3c0 4107 	ubfx	r1, r0, #16, #8
  417740:	f501 7180 	add.w	r1, r1, #256	; 0x100
  417744:	f853 e021 	ldr.w	lr, [r3, r1, lsl #2]

00417748 <.LVL44>:
  417748:	b2c1      	uxtb	r1, r0
  41774a:	f501 7140 	add.w	r1, r1, #768	; 0x300
  41774e:	ea4f 6c10 	mov.w	ip, r0, lsr #24
  417752:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
  417756:	f853 102c 	ldr.w	r1, [r3, ip, lsl #2]
  41775a:	404f      	eors	r7, r1
  41775c:	f855 1c1c 	ldr.w	r1, [r5, #-28]
  417760:	404f      	eors	r7, r1
  417762:	f3c0 2007 	ubfx	r0, r0, #8, #8

00417766 <.LVL45>:
  417766:	f500 7000 	add.w	r0, r0, #512	; 0x200
  41776a:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
  41776e:	4079      	eors	r1, r7
  417770:	ea8e 0101 	eor.w	r1, lr, r1

00417774 <.LVL46>:
  417774:	f3c1 4007 	ubfx	r0, r1, #16, #8
  417778:	f500 7080 	add.w	r0, r0, #256	; 0x100
  41777c:	f853 e020 	ldr.w	lr, [r3, r0, lsl #2]

00417780 <.LVL47>:
  417780:	b2c8      	uxtb	r0, r1
  417782:	f500 7040 	add.w	r0, r0, #768	; 0x300
  417786:	ea4f 6c11 	mov.w	ip, r1, lsr #24
  41778a:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
  41778e:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
  417792:	4047      	eors	r7, r0
  417794:	f855 0c18 	ldr.w	r0, [r5, #-24]
  417798:	4047      	eors	r7, r0
  41779a:	f3c1 2107 	ubfx	r1, r1, #8, #8

0041779e <.LVL48>:
  41779e:	f501 7100 	add.w	r1, r1, #512	; 0x200
  4177a2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  4177a6:	4078      	eors	r0, r7
  4177a8:	ea8e 0000 	eor.w	r0, lr, r0

004177ac <.LVL49>:
  4177ac:	f3c0 4107 	ubfx	r1, r0, #16, #8
  4177b0:	f501 7180 	add.w	r1, r1, #256	; 0x100
  4177b4:	f853 e021 	ldr.w	lr, [r3, r1, lsl #2]

004177b8 <.LVL50>:
  4177b8:	b2c1      	uxtb	r1, r0
  4177ba:	f501 7140 	add.w	r1, r1, #768	; 0x300
  4177be:	ea4f 6c10 	mov.w	ip, r0, lsr #24
  4177c2:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
  4177c6:	f853 102c 	ldr.w	r1, [r3, ip, lsl #2]
  4177ca:	404f      	eors	r7, r1
  4177cc:	f855 1c14 	ldr.w	r1, [r5, #-20]
  4177d0:	404f      	eors	r7, r1
  4177d2:	f3c0 2007 	ubfx	r0, r0, #8, #8

004177d6 <.LVL51>:
  4177d6:	f500 7000 	add.w	r0, r0, #512	; 0x200
  4177da:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
  4177de:	4079      	eors	r1, r7
  4177e0:	ea8e 0101 	eor.w	r1, lr, r1

004177e4 <.LVL52>:
  4177e4:	f3c1 4007 	ubfx	r0, r1, #16, #8
  4177e8:	f500 7080 	add.w	r0, r0, #256	; 0x100
  4177ec:	f853 e020 	ldr.w	lr, [r3, r0, lsl #2]

004177f0 <.LVL53>:
  4177f0:	b2c8      	uxtb	r0, r1
  4177f2:	f500 7040 	add.w	r0, r0, #768	; 0x300
  4177f6:	0e0f      	lsrs	r7, r1, #24
  4177f8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  4177fc:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
  417800:	4078      	eors	r0, r7
  417802:	f855 7c10 	ldr.w	r7, [r5, #-16]
  417806:	4078      	eors	r0, r7
  417808:	f3c1 2107 	ubfx	r1, r1, #8, #8

0041780c <.LVL54>:
  41780c:	f501 7100 	add.w	r1, r1, #512	; 0x200
  417810:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  417814:	4048      	eors	r0, r1
  417816:	ea80 000e 	eor.w	r0, r0, lr

0041781a <.LVL55>:
  41781a:	f3c0 4107 	ubfx	r1, r0, #16, #8
  41781e:	f501 7180 	add.w	r1, r1, #256	; 0x100
  417822:	f853 e021 	ldr.w	lr, [r3, r1, lsl #2]

00417826 <.LVL56>:
  417826:	b2c1      	uxtb	r1, r0
  417828:	f501 7140 	add.w	r1, r1, #768	; 0x300
  41782c:	0e07      	lsrs	r7, r0, #24
  41782e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  417832:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
  417836:	4079      	eors	r1, r7
  417838:	f855 7c0c 	ldr.w	r7, [r5, #-12]
  41783c:	4079      	eors	r1, r7
  41783e:	f3c0 2007 	ubfx	r0, r0, #8, #8

00417842 <.LVL57>:
  417842:	f500 7000 	add.w	r0, r0, #512	; 0x200
  417846:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  41784a:	4041      	eors	r1, r0
  41784c:	ea81 010e 	eor.w	r1, r1, lr

00417850 <.LVL58>:
  417850:	f3c1 4007 	ubfx	r0, r1, #16, #8
  417854:	f500 7080 	add.w	r0, r0, #256	; 0x100
  417858:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

0041785c <.LVL59>:
  41785c:	b2cf      	uxtb	r7, r1
  41785e:	f507 7740 	add.w	r7, r7, #768	; 0x300
  417862:	ea4f 6e11 	mov.w	lr, r1, lsr #24
  417866:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
  41786a:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
  41786e:	ea87 070e 	eor.w	r7, r7, lr
  417872:	f855 4c08 	ldr.w	r4, [r5, #-8]
  417876:	4067      	eors	r7, r4
  417878:	f3c1 2107 	ubfx	r1, r1, #8, #8

0041787c <.LVL60>:
  41787c:	f501 7100 	add.w	r1, r1, #512	; 0x200
  417880:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  417884:	4079      	eors	r1, r7
  417886:	4048      	eors	r0, r1

00417888 <.LVL61>:
  417888:	f3c0 4107 	ubfx	r1, r0, #16, #8
  41788c:	f501 7180 	add.w	r1, r1, #256	; 0x100
  417890:	f853 e021 	ldr.w	lr, [r3, r1, lsl #2]

00417894 <.LVL62>:
  417894:	b2c1      	uxtb	r1, r0
  417896:	f501 7140 	add.w	r1, r1, #768	; 0x300
  41789a:	0e07      	lsrs	r7, r0, #24
  41789c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  4178a0:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
  4178a4:	4079      	eors	r1, r7
  4178a6:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4178aa:	4079      	eors	r1, r7
  4178ac:	f3c0 2007 	ubfx	r0, r0, #8, #8

004178b0 <.LVL63>:
  4178b0:	f500 7000 	add.w	r0, r0, #512	; 0x200
  4178b4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  4178b8:	4041      	eors	r1, r0
  4178ba:	ea8e 0101 	eor.w	r1, lr, r1

004178be <.LVL64>:
  4178be:	f3c1 4007 	ubfx	r0, r1, #16, #8
  4178c2:	f500 7080 	add.w	r0, r0, #256	; 0x100
  4178c6:	f853 e020 	ldr.w	lr, [r3, r0, lsl #2]
  4178ca:	b2cf      	uxtb	r7, r1
  4178cc:	f507 7740 	add.w	r7, r7, #768	; 0x300
  4178d0:	0e08      	lsrs	r0, r1, #24
  4178d2:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
  4178d6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  4178da:	4047      	eors	r7, r0
  4178dc:	f3c1 2107 	ubfx	r1, r1, #8, #8

004178e0 <.LVL65>:
  4178e0:	f501 7100 	add.w	r1, r1, #512	; 0x200
  4178e4:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  4178e8:	4078      	eors	r0, r7
  4178ea:	ea8e 0000 	eor.w	r0, lr, r0

004178ee <.LVL66>:
        len -= 32;
  4178ee:	3e20      	subs	r6, #32
  4178f0:	3520      	adds	r5, #32

004178f2 <.LVL68>:
    while (len >= 32) {
  4178f2:	2e1f      	cmp	r6, #31
  4178f4:	f63f af1f 	bhi.w	417736 <.LVL42>
  4178f8:	f1a2 0320 	sub.w	r3, r2, #32
  4178fc:	f023 031f 	bic.w	r3, r3, #31
  417900:	3320      	adds	r3, #32
  417902:	4498      	add	r8, r3

00417904 <.LVL69>:
  417904:	f002 021f 	and.w	r2, r2, #31

00417908 <.LVL70>:
    }
    while (len >= 4) {
  417908:	2a03      	cmp	r2, #3
  41790a:	d927      	bls.n	41795c <.LVL77>
  41790c:	4616      	mov	r6, r2
  41790e:	4647      	mov	r7, r8
        DOLIT4;
  417910:	4d1f      	ldr	r5, [pc, #124]	; (417990 <.LBB10+0x4>)

00417912 <.LVL71>:
  417912:	f857 3b04 	ldr.w	r3, [r7], #4

00417916 <.LVL72>:
  417916:	4043      	eors	r3, r0

00417918 <.LVL73>:
  417918:	f3c3 4107 	ubfx	r1, r3, #16, #8
  41791c:	f501 7180 	add.w	r1, r1, #256	; 0x100
  417920:	f855 e021 	ldr.w	lr, [r5, r1, lsl #2]
  417924:	b2d9      	uxtb	r1, r3
  417926:	f501 7140 	add.w	r1, r1, #768	; 0x300
  41792a:	0e18      	lsrs	r0, r3, #24
  41792c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
  417930:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
  417934:	4041      	eors	r1, r0
  417936:	f3c3 2307 	ubfx	r3, r3, #8, #8

0041793a <.LVL74>:
  41793a:	f503 7300 	add.w	r3, r3, #512	; 0x200
  41793e:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
  417942:	4048      	eors	r0, r1
  417944:	ea8e 0000 	eor.w	r0, lr, r0

00417948 <.LVL75>:
        len -= 4;
  417948:	3e04      	subs	r6, #4

0041794a <.LVL76>:
    while (len >= 4) {
  41794a:	2e03      	cmp	r6, #3
  41794c:	d8e1      	bhi.n	417912 <.LVL71>
  41794e:	1f13      	subs	r3, r2, #4
  417950:	f023 0303 	bic.w	r3, r3, #3
  417954:	3304      	adds	r3, #4
  417956:	4498      	add	r8, r3
  417958:	f002 0203 	and.w	r2, r2, #3

0041795c <.LVL77>:
    }
    buf = (const unsigned char FAR *)buf4;

    if (len) do {
  41795c:	b162      	cbz	r2, 417978 <.LVL81>
  41795e:	4442      	add	r2, r8
  417960:	4644      	mov	r4, r8
        c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
  417962:	490b      	ldr	r1, [pc, #44]	; (417990 <.LBB10+0x4>)

00417964 <.LVL78>:
  417964:	f814 3b01 	ldrb.w	r3, [r4], #1

00417968 <.LVL79>:
  417968:	4043      	eors	r3, r0
  41796a:	b2db      	uxtb	r3, r3
  41796c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  417970:	ea83 2010 	eor.w	r0, r3, r0, lsr #8
    } while (--len);
  417974:	42a2      	cmp	r2, r4
  417976:	d1f5      	bne.n	417964 <.LVL78>

00417978 <.LVL81>:
    c = ~c;
  417978:	43c0      	mvns	r0, r0

0041797a <.LVL82>:
  41797a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041797e <.LVL83>:
        c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
  41797e:	46a0      	mov	r8, r4

00417980 <.LVL84>:
    while (len >= 4) {
  417980:	2200      	movs	r2, #0
  417982:	e7eb      	b.n	41795c <.LVL77>

00417984 <.LVL85>:
    while (len && ((ptrdiff_t)buf & 3)) {
  417984:	4688      	mov	r8, r1
  417986:	e6cf      	b.n	417728 <.LVL41>

00417988 <.LBE5>:
    if (buf == Z_NULL) return 0UL;
  417988:	2000      	movs	r0, #0

0041798a <.LVL87>:
  41798a:	4770      	bx	lr

0041798c <.LBB10>:
    while (len && ((ptrdiff_t)buf & 3)) {
  41798c:	4688      	mov	r8, r1
  41798e:	e7f7      	b.n	417980 <.LVL84>
  417990:	004028e8 	.word	0x004028e8

Disassembly of section .text.wc_Sha512Final%80:

00417998 <wc_Sha512Final>:

int wc_Sha512Final(Sha512* sha512, byte* hash)
{
    int ret;

    if (sha512 == NULL || hash == NULL) {
  417998:	2800      	cmp	r0, #0
  41799a:	f000 8120 	beq.w	417bde <.LBE801>
{
  41799e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

004179a2 <.LCFI7>:
  4179a2:	b083      	sub	sp, #12

004179a4 <.LCFI8>:
  4179a4:	468e      	mov	lr, r1
  4179a6:	4601      	mov	r1, r0

004179a8 <.LVL46>:
    if (sha512 == NULL || hash == NULL) {
  4179a8:	f1be 0f00 	cmp.w	lr, #0
  4179ac:	f000 8111 	beq.w	417bd2 <.LBE799>

004179b0 <.LBB762>:
    byte* local = (byte*)sha512->buffer;
  4179b0:	f100 0358 	add.w	r3, r0, #88	; 0x58
  4179b4:	9301      	str	r3, [sp, #4]

004179b6 <.LVL48>:
    if (sha512 == NULL) {
  4179b6:	2800      	cmp	r0, #0
  4179b8:	f000 810e 	beq.w	417bd8 <.LBB801>
    AddLength(sha512, sha512->buffLen);               /* before adding pads */
  4179bc:	6800      	ldr	r0, [r0, #0]

004179be <.LBB764>:
    word64 tmp = sha512->loLen;
  4179be:	e9d1 2302 	ldrd	r2, r3, [r1, #8]

004179c2 <.LVL50>:
    if ( (sha512->loLen += len) < tmp)
  4179c2:	eb12 0a00 	adds.w	sl, r2, r0
  4179c6:	f143 0b00 	adc.w	fp, r3, #0
  4179ca:	e9c1 ab02 	strd	sl, fp, [r1, #8]
  4179ce:	459b      	cmp	fp, r3
  4179d0:	bf08      	it	eq
  4179d2:	4592      	cmpeq	sl, r2
  4179d4:	d206      	bcs.n	4179e4 <.LVL52+0x4>
        sha512->hiLen++;                       /* carry low to high */
  4179d6:	e9d1 2304 	ldrd	r2, r3, [r1, #16]

004179da <.LVL51>:
  4179da:	3201      	adds	r2, #1
  4179dc:	f143 0300 	adc.w	r3, r3, #0

004179e0 <.LVL52>:
  4179e0:	e9c1 2304 	strd	r2, r3, [r1, #16]
  4179e4:	468a      	mov	sl, r1
  4179e6:	46f3      	mov	fp, lr

004179e8 <.LBE764>:
    local[sha512->buffLen++] = 0x80;  /* add 1 */
  4179e8:	1c43      	adds	r3, r0, #1
  4179ea:	600b      	str	r3, [r1, #0]
  4179ec:	2380      	movs	r3, #128	; 0x80
  4179ee:	9a01      	ldr	r2, [sp, #4]
  4179f0:	5413      	strb	r3, [r2, r0]
    if (sha512->buffLen > SHA512_PAD_SIZE) {
  4179f2:	6808      	ldr	r0, [r1, #0]
  4179f4:	2870      	cmp	r0, #112	; 0x70
  4179f6:	d92f      	bls.n	417a58 <.LVL61>

004179f8 <.LVL54>:
        XMEMSET(&local[sha512->buffLen], 0, SHA512_BLOCK_SIZE - sha512->buffLen);
  4179f8:	1a1a      	subs	r2, r3, r0
  4179fa:	2100      	movs	r1, #0

004179fc <.LVL55>:
  4179fc:	9b01      	ldr	r3, [sp, #4]
  4179fe:	4418      	add	r0, r3
  417a00:	f006 fd8a 	bl	41e518 <.LFE14>

00417a04 <.LVL56>:
        sha512->buffLen += SHA512_BLOCK_SIZE - sha512->buffLen;
  417a04:	4652      	mov	r2, sl
  417a06:	2380      	movs	r3, #128	; 0x80
  417a08:	f842 3b50 	str.w	r3, [r2], #80

00417a0c <.LVL57>:
  417a0c:	f10a 0ed0 	add.w	lr, sl, #208	; 0xd0

00417a10 <.LBB766>:
        out[i] = ByteReverseWord64(in[i]);
  417a10:	6893      	ldr	r3, [r2, #8]
  417a12:	68d1      	ldr	r1, [r2, #12]

00417a14 <.LBB768>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  417a14:	0a18      	lsrs	r0, r3, #8
  417a16:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  417a1a:	021b      	lsls	r3, r3, #8
  417a1c:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  417a20:	4303      	orrs	r3, r0

00417a22 <.LBE770>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  417a22:	ea4f 4733 	mov.w	r7, r3, ror #16
  417a26:	2600      	movs	r6, #0

00417a28 <.LBB772>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  417a28:	0a0b      	lsrs	r3, r1, #8
  417a2a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  417a2e:	0209      	lsls	r1, r1, #8
  417a30:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  417a34:	430b      	orrs	r3, r1

00417a36 <.LBB774>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  417a36:	ea4f 4333 	mov.w	r3, r3, ror #16

00417a3a <.LBE772>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  417a3a:	ea46 0003 	orr.w	r0, r6, r3
  417a3e:	4639      	mov	r1, r7

00417a40 <.LBE768>:
        out[i] = ByteReverseWord64(in[i]);
  417a40:	e9e2 0102 	strd	r0, r1, [r2, #8]!
    for (i = 0; i < count; i++)
  417a44:	4572      	cmp	r2, lr
  417a46:	d1e3      	bne.n	417a10 <.LBB766>

00417a48 <.LBE766>:
        ret = Transform(sha512);
  417a48:	4650      	mov	r0, sl
  417a4a:	f7e8 fba3 	bl	400194 <_etext>

00417a4e <.LVL60>:
        if (ret != 0)
  417a4e:	4602      	mov	r2, r0
  417a50:	2800      	cmp	r0, #0
  417a52:	d151      	bne.n	417af8 <.LBE762>
        sha512->buffLen = 0;
  417a54:	f8ca 6000 	str.w	r6, [sl]

00417a58 <.LVL61>:
    XMEMSET(&local[sha512->buffLen], 0, SHA512_PAD_SIZE - sha512->buffLen);
  417a58:	f8da 0000 	ldr.w	r0, [sl]
  417a5c:	f1c0 0270 	rsb	r2, r0, #112	; 0x70
  417a60:	2100      	movs	r1, #0
  417a62:	9b01      	ldr	r3, [sp, #4]
  417a64:	4418      	add	r0, r3
  417a66:	f006 fd57 	bl	41e518 <.LFE14>

00417a6a <.LVL62>:
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
  417a6a:	f8da 7008 	ldr.w	r7, [sl, #8]
  417a6e:	f8da 600c 	ldr.w	r6, [sl, #12]
                                                         (sha512->hiLen << 3);
  417a72:	f8da 2010 	ldr.w	r2, [sl, #16]
  417a76:	f8da 3014 	ldr.w	r3, [sl, #20]
  417a7a:	00d9      	lsls	r1, r3, #3
  417a7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
  417a80:	00d0      	lsls	r0, r2, #3
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
  417a82:	0f72      	lsrs	r2, r6, #29
  417a84:	2300      	movs	r3, #0
  417a86:	1812      	adds	r2, r2, r0
  417a88:	414b      	adcs	r3, r1
  417a8a:	e9ca 2304 	strd	r2, r3, [sl, #16]
    sha512->loLen = sha512->loLen << 3;
  417a8e:	00f6      	lsls	r6, r6, #3
  417a90:	ea46 7657 	orr.w	r6, r6, r7, lsr #29
  417a94:	00ff      	lsls	r7, r7, #3
  417a96:	f8ca 7008 	str.w	r7, [sl, #8]
  417a9a:	f8ca 600c 	str.w	r6, [sl, #12]

00417a9e <.LVL63>:
  417a9e:	f10a 0250 	add.w	r2, sl, #80	; 0x50
  417aa2:	f10a 06c0 	add.w	r6, sl, #192	; 0xc0

00417aa6 <.LBB776>:
        out[i] = ByteReverseWord64(in[i]);
  417aa6:	6893      	ldr	r3, [r2, #8]
  417aa8:	68d1      	ldr	r1, [r2, #12]

00417aaa <.LBB778>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  417aaa:	0a18      	lsrs	r0, r3, #8
  417aac:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  417ab0:	021b      	lsls	r3, r3, #8
  417ab2:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  417ab6:	4303      	orrs	r3, r0

00417ab8 <.LBE780>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  417ab8:	ea4f 4533 	mov.w	r5, r3, ror #16
  417abc:	2400      	movs	r4, #0

00417abe <.LBB782>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  417abe:	0a0b      	lsrs	r3, r1, #8
  417ac0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  417ac4:	0209      	lsls	r1, r1, #8
  417ac6:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  417aca:	430b      	orrs	r3, r1

00417acc <.LBB784>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  417acc:	ea4f 4333 	mov.w	r3, r3, ror #16

00417ad0 <.LBE782>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  417ad0:	ea44 0003 	orr.w	r0, r4, r3
  417ad4:	4629      	mov	r1, r5

00417ad6 <.LBE778>:
        out[i] = ByteReverseWord64(in[i]);
  417ad6:	e9e2 0102 	strd	r0, r1, [r2, #8]!
    for (i = 0; i < count; i++)
  417ada:	42b2      	cmp	r2, r6
  417adc:	d1e3      	bne.n	417aa6 <.LBB776>

00417ade <.LBE776>:
    sha512->buffer[SHA512_BLOCK_SIZE / sizeof(word64) - 2] = sha512->hiLen;
  417ade:	e9da 2304 	ldrd	r2, r3, [sl, #16]
  417ae2:	e9ca 2332 	strd	r2, r3, [sl, #200]	; 0xc8
    sha512->buffer[SHA512_BLOCK_SIZE / sizeof(word64) - 1] = sha512->loLen;
  417ae6:	e9da 2302 	ldrd	r2, r3, [sl, #8]
  417aea:	e9ca 2334 	strd	r2, r3, [sl, #208]	; 0xd0
    ret = Transform(sha512);
  417aee:	4650      	mov	r0, sl
  417af0:	f7e8 fb50 	bl	400194 <_etext>

00417af4 <.LVL66>:
    if (ret != 0)
  417af4:	4602      	mov	r2, r0
  417af6:	b118      	cbz	r0, 417b00 <.LBB798>

00417af8 <.LBE762>:
        return ret;

    XMEMCPY(hash, sha512->digest, SHA512_DIGEST_SIZE);

    return InitSha512(sha512);  /* reset state */
}
  417af8:	4610      	mov	r0, r2
  417afa:	b003      	add	sp, #12

00417afc <.LCFI9>:
  417afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00417b00 <.LBB798>:
        ByteReverseWords64(sha512->digest, sha512->digest, SHA512_DIGEST_SIZE);
  417b00:	f10a 0618 	add.w	r6, sl, #24

00417b04 <.LVL69>:
  417b04:	f10a 0410 	add.w	r4, sl, #16
  417b08:	f10a 0550 	add.w	r5, sl, #80	; 0x50

00417b0c <.LBB786>:
        out[i] = ByteReverseWord64(in[i]);
  417b0c:	68a3      	ldr	r3, [r4, #8]
  417b0e:	68e1      	ldr	r1, [r4, #12]

00417b10 <.LBB788>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  417b10:	0a18      	lsrs	r0, r3, #8
  417b12:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  417b16:	021b      	lsls	r3, r3, #8
  417b18:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  417b1c:	4303      	orrs	r3, r0

00417b1e <.LBE790>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  417b1e:	ea4f 4933 	mov.w	r9, r3, ror #16
  417b22:	f04f 0800 	mov.w	r8, #0

00417b26 <.LBB792>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  417b26:	0a0b      	lsrs	r3, r1, #8
  417b28:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  417b2c:	0209      	lsls	r1, r1, #8
  417b2e:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  417b32:	430b      	orrs	r3, r1

00417b34 <.LBB794>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  417b34:	ea4f 4333 	mov.w	r3, r3, ror #16

00417b38 <.LBE792>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  417b38:	ea48 0003 	orr.w	r0, r8, r3
  417b3c:	4649      	mov	r1, r9

00417b3e <.LBE788>:
        out[i] = ByteReverseWord64(in[i]);
  417b3e:	e9e4 0102 	strd	r0, r1, [r4, #8]!
    for (i = 0; i < count; i++)
  417b42:	42ac      	cmp	r4, r5
  417b44:	d1e2      	bne.n	417b0c <.LBB786>

00417b46 <.LBE786>:
    XMEMCPY(hash, sha512->digest, SHA512_DIGEST_SIZE);
  417b46:	4633      	mov	r3, r6
  417b48:	46de      	mov	lr, fp
  417b4a:	3640      	adds	r6, #64	; 0x40

00417b4c <.LVL72>:
  417b4c:	681d      	ldr	r5, [r3, #0]
  417b4e:	685c      	ldr	r4, [r3, #4]
  417b50:	6898      	ldr	r0, [r3, #8]
  417b52:	68d9      	ldr	r1, [r3, #12]
  417b54:	f8ce 5000 	str.w	r5, [lr]
  417b58:	f8ce 4004 	str.w	r4, [lr, #4]
  417b5c:	f8ce 0008 	str.w	r0, [lr, #8]
  417b60:	f8ce 100c 	str.w	r1, [lr, #12]
  417b64:	3310      	adds	r3, #16
  417b66:	f10e 0e10 	add.w	lr, lr, #16
  417b6a:	42b3      	cmp	r3, r6
  417b6c:	d1ee      	bne.n	417b4c <.LVL72>

00417b6e <.LBB799>:
    sha512->digest[0] = W64LIT(0x6a09e667f3bcc908);
  417b6e:	a11e      	add	r1, pc, #120	; (adr r1, 417be8 <.LVL78+0x4>)
  417b70:	e9d1 0100 	ldrd	r0, r1, [r1]
  417b74:	e9ca 0106 	strd	r0, r1, [sl, #24]
    sha512->digest[1] = W64LIT(0xbb67ae8584caa73b);
  417b78:	a11d      	add	r1, pc, #116	; (adr r1, 417bf0 <.LVL78+0xc>)
  417b7a:	e9d1 0100 	ldrd	r0, r1, [r1]
  417b7e:	e9ca 0108 	strd	r0, r1, [sl, #32]
    sha512->digest[2] = W64LIT(0x3c6ef372fe94f82b);
  417b82:	a11d      	add	r1, pc, #116	; (adr r1, 417bf8 <.LVL78+0x14>)
  417b84:	e9d1 0100 	ldrd	r0, r1, [r1]
  417b88:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
    sha512->digest[3] = W64LIT(0xa54ff53a5f1d36f1);
  417b8c:	a11c      	add	r1, pc, #112	; (adr r1, 417c00 <.LVL78+0x1c>)
  417b8e:	e9d1 0100 	ldrd	r0, r1, [r1]
  417b92:	e9ca 010c 	strd	r0, r1, [sl, #48]	; 0x30
    sha512->digest[4] = W64LIT(0x510e527fade682d1);
  417b96:	a11c      	add	r1, pc, #112	; (adr r1, 417c08 <.LVL78+0x24>)
  417b98:	e9d1 0100 	ldrd	r0, r1, [r1]
  417b9c:	e9ca 010e 	strd	r0, r1, [sl, #56]	; 0x38
    sha512->digest[5] = W64LIT(0x9b05688c2b3e6c1f);
  417ba0:	a11b      	add	r1, pc, #108	; (adr r1, 417c10 <.LVL78+0x2c>)
  417ba2:	e9d1 0100 	ldrd	r0, r1, [r1]
  417ba6:	e9ca 0110 	strd	r0, r1, [sl, #64]	; 0x40
    sha512->digest[6] = W64LIT(0x1f83d9abfb41bd6b);
  417baa:	a11b      	add	r1, pc, #108	; (adr r1, 417c18 <.LVL78+0x34>)
  417bac:	e9d1 0100 	ldrd	r0, r1, [r1]
  417bb0:	e9ca 0112 	strd	r0, r1, [sl, #72]	; 0x48
    sha512->digest[7] = W64LIT(0x5be0cd19137e2179);
  417bb4:	a11a      	add	r1, pc, #104	; (adr r1, 417c20 <.LVL78+0x3c>)
  417bb6:	e9d1 0100 	ldrd	r0, r1, [r1]
  417bba:	e9ca 0114 	strd	r0, r1, [sl, #80]	; 0x50
    sha512->buffLen = 0;
  417bbe:	2300      	movs	r3, #0
  417bc0:	f8ca 3000 	str.w	r3, [sl]
    sha512->loLen   = 0;
  417bc4:	2000      	movs	r0, #0
  417bc6:	2100      	movs	r1, #0
  417bc8:	e9ca 0102 	strd	r0, r1, [sl, #8]
    sha512->hiLen   = 0;
  417bcc:	e9ca 0104 	strd	r0, r1, [sl, #16]
  417bd0:	e792      	b.n	417af8 <.LBE762>

00417bd2 <.LBE799>:
        return BAD_FUNC_ARG;
  417bd2:	f06f 02ac 	mvn.w	r2, #172	; 0xac
  417bd6:	e78f      	b.n	417af8 <.LBE762>

00417bd8 <.LBB801>:
        return BAD_FUNC_ARG;
  417bd8:	f06f 02ac 	mvn.w	r2, #172	; 0xac

00417bdc <.LVL76>:
  417bdc:	e78c      	b.n	417af8 <.LBE762>

00417bde <.LBE801>:
        return BAD_FUNC_ARG;
  417bde:	f06f 02ac 	mvn.w	r2, #172	; 0xac
}
  417be2:	4610      	mov	r0, r2

00417be4 <.LVL78>:
  417be4:	4770      	bx	lr
  417be6:	bf00      	nop
  417be8:	f3bcc908 	.word	0xf3bcc908
  417bec:	6a09e667 	.word	0x6a09e667
  417bf0:	84caa73b 	.word	0x84caa73b
  417bf4:	bb67ae85 	.word	0xbb67ae85
  417bf8:	fe94f82b 	.word	0xfe94f82b
  417bfc:	3c6ef372 	.word	0x3c6ef372
  417c00:	5f1d36f1 	.word	0x5f1d36f1
  417c04:	a54ff53a 	.word	0xa54ff53a
  417c08:	ade682d1 	.word	0xade682d1
  417c0c:	510e527f 	.word	0x510e527f
  417c10:	2b3e6c1f 	.word	0x2b3e6c1f
  417c14:	9b05688c 	.word	0x9b05688c
  417c18:	fb41bd6b 	.word	0xfb41bd6b
  417c1c:	1f83d9ab 	.word	0x1f83d9ab
  417c20:	137e2179 	.word	0x137e2179
  417c24:	5be0cd19 	.word	0x5be0cd19

Disassembly of section .text.wc_Sha384Final%81:

00417c28 <wc_Sha384Final>:

int wc_Sha384Final(Sha384* sha384, byte* hash)
{
    int ret;

    if (sha384 == NULL || hash == NULL) {
  417c28:	2800      	cmp	r0, #0
  417c2a:	f000 8120 	beq.w	417e6e <.LBE922>
{
  417c2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00417c32 <.LCFI14>:
  417c32:	b083      	sub	sp, #12

00417c34 <.LCFI15>:
  417c34:	468e      	mov	lr, r1
  417c36:	4601      	mov	r1, r0

00417c38 <.LVL105>:
    if (sha384 == NULL || hash == NULL) {
  417c38:	f1be 0f00 	cmp.w	lr, #0
  417c3c:	f000 8111 	beq.w	417e62 <.LBE920>

00417c40 <.LBB883>:
    byte* local = (byte*)sha512->buffer;
  417c40:	f100 0358 	add.w	r3, r0, #88	; 0x58
  417c44:	9301      	str	r3, [sp, #4]

00417c46 <.LVL107>:
    if (sha512 == NULL) {
  417c46:	2800      	cmp	r0, #0
  417c48:	f000 810e 	beq.w	417e68 <.LBB922>
    AddLength(sha512, sha512->buffLen);               /* before adding pads */
  417c4c:	6800      	ldr	r0, [r0, #0]

00417c4e <.LBB885>:
    word64 tmp = sha512->loLen;
  417c4e:	e9d1 2302 	ldrd	r2, r3, [r1, #8]

00417c52 <.LVL109>:
    if ( (sha512->loLen += len) < tmp)
  417c52:	eb12 0a00 	adds.w	sl, r2, r0
  417c56:	f143 0b00 	adc.w	fp, r3, #0
  417c5a:	e9c1 ab02 	strd	sl, fp, [r1, #8]
  417c5e:	459b      	cmp	fp, r3
  417c60:	bf08      	it	eq
  417c62:	4592      	cmpeq	sl, r2
  417c64:	d206      	bcs.n	417c74 <.LVL111+0x4>
        sha512->hiLen++;                       /* carry low to high */
  417c66:	e9d1 2304 	ldrd	r2, r3, [r1, #16]

00417c6a <.LVL110>:
  417c6a:	3201      	adds	r2, #1
  417c6c:	f143 0300 	adc.w	r3, r3, #0

00417c70 <.LVL111>:
  417c70:	e9c1 2304 	strd	r2, r3, [r1, #16]
  417c74:	468a      	mov	sl, r1
  417c76:	46f3      	mov	fp, lr

00417c78 <.LBE885>:
    local[sha512->buffLen++] = 0x80;  /* add 1 */
  417c78:	1c43      	adds	r3, r0, #1
  417c7a:	600b      	str	r3, [r1, #0]
  417c7c:	2380      	movs	r3, #128	; 0x80
  417c7e:	9a01      	ldr	r2, [sp, #4]
  417c80:	5413      	strb	r3, [r2, r0]
    if (sha512->buffLen > SHA512_PAD_SIZE) {
  417c82:	6808      	ldr	r0, [r1, #0]
  417c84:	2870      	cmp	r0, #112	; 0x70
  417c86:	d92f      	bls.n	417ce8 <.LVL120>

00417c88 <.LVL113>:
        XMEMSET(&local[sha512->buffLen], 0, SHA512_BLOCK_SIZE - sha512->buffLen);
  417c88:	1a1a      	subs	r2, r3, r0
  417c8a:	2100      	movs	r1, #0

00417c8c <.LVL114>:
  417c8c:	9b01      	ldr	r3, [sp, #4]
  417c8e:	4418      	add	r0, r3
  417c90:	f006 fc42 	bl	41e518 <.LFE14>

00417c94 <.LVL115>:
        sha512->buffLen += SHA512_BLOCK_SIZE - sha512->buffLen;
  417c94:	4652      	mov	r2, sl
  417c96:	2380      	movs	r3, #128	; 0x80
  417c98:	f842 3b50 	str.w	r3, [r2], #80

00417c9c <.LVL116>:
  417c9c:	f10a 0ed0 	add.w	lr, sl, #208	; 0xd0

00417ca0 <.LBB887>:
        out[i] = ByteReverseWord64(in[i]);
  417ca0:	6893      	ldr	r3, [r2, #8]
  417ca2:	68d1      	ldr	r1, [r2, #12]

00417ca4 <.LBB889>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  417ca4:	0a18      	lsrs	r0, r3, #8
  417ca6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  417caa:	021b      	lsls	r3, r3, #8
  417cac:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  417cb0:	4303      	orrs	r3, r0

00417cb2 <.LBE891>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  417cb2:	ea4f 4733 	mov.w	r7, r3, ror #16
  417cb6:	2600      	movs	r6, #0

00417cb8 <.LBB893>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  417cb8:	0a0b      	lsrs	r3, r1, #8
  417cba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  417cbe:	0209      	lsls	r1, r1, #8
  417cc0:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  417cc4:	430b      	orrs	r3, r1

00417cc6 <.LBB895>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  417cc6:	ea4f 4333 	mov.w	r3, r3, ror #16

00417cca <.LBE893>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  417cca:	ea46 0003 	orr.w	r0, r6, r3
  417cce:	4639      	mov	r1, r7

00417cd0 <.LBE889>:
        out[i] = ByteReverseWord64(in[i]);
  417cd0:	e9e2 0102 	strd	r0, r1, [r2, #8]!
    for (i = 0; i < count; i++)
  417cd4:	4572      	cmp	r2, lr
  417cd6:	d1e3      	bne.n	417ca0 <.LBB887>

00417cd8 <.LBE887>:
        ret = Transform(sha512);
  417cd8:	4650      	mov	r0, sl
  417cda:	f7e8 fa5b 	bl	400194 <_etext>

00417cde <.LVL119>:
        if (ret != 0)
  417cde:	4602      	mov	r2, r0
  417ce0:	2800      	cmp	r0, #0
  417ce2:	d151      	bne.n	417d88 <.LBE883>
        sha512->buffLen = 0;
  417ce4:	f8ca 6000 	str.w	r6, [sl]

00417ce8 <.LVL120>:
    XMEMSET(&local[sha512->buffLen], 0, SHA512_PAD_SIZE - sha512->buffLen);
  417ce8:	f8da 0000 	ldr.w	r0, [sl]
  417cec:	f1c0 0270 	rsb	r2, r0, #112	; 0x70
  417cf0:	2100      	movs	r1, #0
  417cf2:	9b01      	ldr	r3, [sp, #4]
  417cf4:	4418      	add	r0, r3
  417cf6:	f006 fc0f 	bl	41e518 <.LFE14>

00417cfa <.LVL121>:
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
  417cfa:	f8da 7008 	ldr.w	r7, [sl, #8]
  417cfe:	f8da 600c 	ldr.w	r6, [sl, #12]
                                                         (sha512->hiLen << 3);
  417d02:	f8da 2010 	ldr.w	r2, [sl, #16]
  417d06:	f8da 3014 	ldr.w	r3, [sl, #20]
  417d0a:	00d9      	lsls	r1, r3, #3
  417d0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
  417d10:	00d0      	lsls	r0, r2, #3
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
  417d12:	0f72      	lsrs	r2, r6, #29
  417d14:	2300      	movs	r3, #0
  417d16:	1812      	adds	r2, r2, r0
  417d18:	414b      	adcs	r3, r1
  417d1a:	e9ca 2304 	strd	r2, r3, [sl, #16]
    sha512->loLen = sha512->loLen << 3;
  417d1e:	00f6      	lsls	r6, r6, #3
  417d20:	ea46 7657 	orr.w	r6, r6, r7, lsr #29
  417d24:	00ff      	lsls	r7, r7, #3
  417d26:	f8ca 7008 	str.w	r7, [sl, #8]
  417d2a:	f8ca 600c 	str.w	r6, [sl, #12]

00417d2e <.LVL122>:
  417d2e:	f10a 0250 	add.w	r2, sl, #80	; 0x50
  417d32:	f10a 06c0 	add.w	r6, sl, #192	; 0xc0

00417d36 <.LBB897>:
        out[i] = ByteReverseWord64(in[i]);
  417d36:	6893      	ldr	r3, [r2, #8]
  417d38:	68d1      	ldr	r1, [r2, #12]

00417d3a <.LBB899>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  417d3a:	0a18      	lsrs	r0, r3, #8
  417d3c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  417d40:	021b      	lsls	r3, r3, #8
  417d42:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  417d46:	4303      	orrs	r3, r0

00417d48 <.LBE901>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  417d48:	ea4f 4533 	mov.w	r5, r3, ror #16
  417d4c:	2400      	movs	r4, #0

00417d4e <.LBB903>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  417d4e:	0a0b      	lsrs	r3, r1, #8
  417d50:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  417d54:	0209      	lsls	r1, r1, #8
  417d56:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  417d5a:	430b      	orrs	r3, r1

00417d5c <.LBB905>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  417d5c:	ea4f 4333 	mov.w	r3, r3, ror #16

00417d60 <.LBE903>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  417d60:	ea44 0003 	orr.w	r0, r4, r3
  417d64:	4629      	mov	r1, r5

00417d66 <.LBE899>:
        out[i] = ByteReverseWord64(in[i]);
  417d66:	e9e2 0102 	strd	r0, r1, [r2, #8]!
    for (i = 0; i < count; i++)
  417d6a:	42b2      	cmp	r2, r6
  417d6c:	d1e3      	bne.n	417d36 <.LBB897>

00417d6e <.LBE897>:
    sha512->buffer[SHA512_BLOCK_SIZE / sizeof(word64) - 2] = sha512->hiLen;
  417d6e:	e9da 2304 	ldrd	r2, r3, [sl, #16]
  417d72:	e9ca 2332 	strd	r2, r3, [sl, #200]	; 0xc8
    sha512->buffer[SHA512_BLOCK_SIZE / sizeof(word64) - 1] = sha512->loLen;
  417d76:	e9da 2302 	ldrd	r2, r3, [sl, #8]
  417d7a:	e9ca 2334 	strd	r2, r3, [sl, #208]	; 0xd0
    ret = Transform(sha512);
  417d7e:	4650      	mov	r0, sl
  417d80:	f7e8 fa08 	bl	400194 <_etext>

00417d84 <.LVL125>:
    if (ret != 0)
  417d84:	4602      	mov	r2, r0
  417d86:	b118      	cbz	r0, 417d90 <.LBB919>

00417d88 <.LBE883>:
        return ret;

    XMEMCPY(hash, sha384->digest, SHA384_DIGEST_SIZE);

    return InitSha384(sha384);  /* reset state */
}
  417d88:	4610      	mov	r0, r2
  417d8a:	b003      	add	sp, #12

00417d8c <.LCFI16>:
  417d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00417d90 <.LBB919>:
        ByteReverseWords64(sha512->digest, sha512->digest, SHA512_DIGEST_SIZE);
  417d90:	f10a 0618 	add.w	r6, sl, #24

00417d94 <.LVL128>:
  417d94:	f10a 0410 	add.w	r4, sl, #16
  417d98:	f10a 0550 	add.w	r5, sl, #80	; 0x50

00417d9c <.LBB907>:
        out[i] = ByteReverseWord64(in[i]);
  417d9c:	68a3      	ldr	r3, [r4, #8]
  417d9e:	68e1      	ldr	r1, [r4, #12]

00417da0 <.LBB909>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  417da0:	0a18      	lsrs	r0, r3, #8
  417da2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  417da6:	021b      	lsls	r3, r3, #8
  417da8:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  417dac:	4303      	orrs	r3, r0

00417dae <.LBE911>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  417dae:	ea4f 4933 	mov.w	r9, r3, ror #16
  417db2:	f04f 0800 	mov.w	r8, #0

00417db6 <.LBB913>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  417db6:	0a0b      	lsrs	r3, r1, #8
  417db8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  417dbc:	0209      	lsls	r1, r1, #8
  417dbe:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  417dc2:	430b      	orrs	r3, r1

00417dc4 <.LBB915>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  417dc4:	ea4f 4333 	mov.w	r3, r3, ror #16

00417dc8 <.LBE913>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  417dc8:	ea48 0003 	orr.w	r0, r8, r3
  417dcc:	4649      	mov	r1, r9

00417dce <.LBE909>:
        out[i] = ByteReverseWord64(in[i]);
  417dce:	e9e4 0102 	strd	r0, r1, [r4, #8]!
    for (i = 0; i < count; i++)
  417dd2:	42ac      	cmp	r4, r5
  417dd4:	d1e2      	bne.n	417d9c <.LBB907>

00417dd6 <.LBE907>:
    XMEMCPY(hash, sha384->digest, SHA384_DIGEST_SIZE);
  417dd6:	4633      	mov	r3, r6
  417dd8:	46de      	mov	lr, fp
  417dda:	3630      	adds	r6, #48	; 0x30

00417ddc <.LVL131>:
  417ddc:	681d      	ldr	r5, [r3, #0]
  417dde:	685c      	ldr	r4, [r3, #4]
  417de0:	6898      	ldr	r0, [r3, #8]
  417de2:	68d9      	ldr	r1, [r3, #12]
  417de4:	f8ce 5000 	str.w	r5, [lr]
  417de8:	f8ce 4004 	str.w	r4, [lr, #4]
  417dec:	f8ce 0008 	str.w	r0, [lr, #8]
  417df0:	f8ce 100c 	str.w	r1, [lr, #12]
  417df4:	3310      	adds	r3, #16
  417df6:	f10e 0e10 	add.w	lr, lr, #16
  417dfa:	42b3      	cmp	r3, r6
  417dfc:	d1ee      	bne.n	417ddc <.LVL131>

00417dfe <.LBB920>:
    sha384->digest[0] = W64LIT(0xcbbb9d5dc1059ed8);
  417dfe:	a11e      	add	r1, pc, #120	; (adr r1, 417e78 <.LVL137+0x4>)
  417e00:	e9d1 0100 	ldrd	r0, r1, [r1]
  417e04:	e9ca 0106 	strd	r0, r1, [sl, #24]
    sha384->digest[1] = W64LIT(0x629a292a367cd507);
  417e08:	a11d      	add	r1, pc, #116	; (adr r1, 417e80 <.LVL137+0xc>)
  417e0a:	e9d1 0100 	ldrd	r0, r1, [r1]
  417e0e:	e9ca 0108 	strd	r0, r1, [sl, #32]
    sha384->digest[2] = W64LIT(0x9159015a3070dd17);
  417e12:	a11d      	add	r1, pc, #116	; (adr r1, 417e88 <.LVL137+0x14>)
  417e14:	e9d1 0100 	ldrd	r0, r1, [r1]
  417e18:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
    sha384->digest[3] = W64LIT(0x152fecd8f70e5939);
  417e1c:	a11c      	add	r1, pc, #112	; (adr r1, 417e90 <.LVL137+0x1c>)
  417e1e:	e9d1 0100 	ldrd	r0, r1, [r1]
  417e22:	e9ca 010c 	strd	r0, r1, [sl, #48]	; 0x30
    sha384->digest[4] = W64LIT(0x67332667ffc00b31);
  417e26:	a11c      	add	r1, pc, #112	; (adr r1, 417e98 <.LVL137+0x24>)
  417e28:	e9d1 0100 	ldrd	r0, r1, [r1]
  417e2c:	e9ca 010e 	strd	r0, r1, [sl, #56]	; 0x38
    sha384->digest[5] = W64LIT(0x8eb44a8768581511);
  417e30:	a11b      	add	r1, pc, #108	; (adr r1, 417ea0 <.LVL137+0x2c>)
  417e32:	e9d1 0100 	ldrd	r0, r1, [r1]
  417e36:	e9ca 0110 	strd	r0, r1, [sl, #64]	; 0x40
    sha384->digest[6] = W64LIT(0xdb0c2e0d64f98fa7);
  417e3a:	a11b      	add	r1, pc, #108	; (adr r1, 417ea8 <.LVL137+0x34>)
  417e3c:	e9d1 0100 	ldrd	r0, r1, [r1]
  417e40:	e9ca 0112 	strd	r0, r1, [sl, #72]	; 0x48
    sha384->digest[7] = W64LIT(0x47b5481dbefa4fa4);
  417e44:	a11a      	add	r1, pc, #104	; (adr r1, 417eb0 <.LVL137+0x3c>)
  417e46:	e9d1 0100 	ldrd	r0, r1, [r1]
  417e4a:	e9ca 0114 	strd	r0, r1, [sl, #80]	; 0x50
    sha384->buffLen = 0;
  417e4e:	2300      	movs	r3, #0
  417e50:	f8ca 3000 	str.w	r3, [sl]
    sha384->loLen   = 0;
  417e54:	2000      	movs	r0, #0
  417e56:	2100      	movs	r1, #0
  417e58:	e9ca 0102 	strd	r0, r1, [sl, #8]
    sha384->hiLen   = 0;
  417e5c:	e9ca 0104 	strd	r0, r1, [sl, #16]
  417e60:	e792      	b.n	417d88 <.LBE883>

00417e62 <.LBE920>:
        return BAD_FUNC_ARG;
  417e62:	f06f 02ac 	mvn.w	r2, #172	; 0xac
  417e66:	e78f      	b.n	417d88 <.LBE883>

00417e68 <.LBB922>:
        return BAD_FUNC_ARG;
  417e68:	f06f 02ac 	mvn.w	r2, #172	; 0xac

00417e6c <.LVL135>:
  417e6c:	e78c      	b.n	417d88 <.LBE883>

00417e6e <.LBE922>:
        return BAD_FUNC_ARG;
  417e6e:	f06f 02ac 	mvn.w	r2, #172	; 0xac
}
  417e72:	4610      	mov	r0, r2

00417e74 <.LVL137>:
  417e74:	4770      	bx	lr
  417e76:	bf00      	nop
  417e78:	c1059ed8 	.word	0xc1059ed8
  417e7c:	cbbb9d5d 	.word	0xcbbb9d5d
  417e80:	367cd507 	.word	0x367cd507
  417e84:	629a292a 	.word	0x629a292a
  417e88:	3070dd17 	.word	0x3070dd17
  417e8c:	9159015a 	.word	0x9159015a
  417e90:	f70e5939 	.word	0xf70e5939
  417e94:	152fecd8 	.word	0x152fecd8
  417e98:	ffc00b31 	.word	0xffc00b31
  417e9c:	67332667 	.word	0x67332667
  417ea0:	68581511 	.word	0x68581511
  417ea4:	8eb44a87 	.word	0x8eb44a87
  417ea8:	64f98fa7 	.word	0x64f98fa7
  417eac:	db0c2e0d 	.word	0xdb0c2e0d
  417eb0:	befa4fa4 	.word	0xbefa4fa4
  417eb4:	47b5481d 	.word	0x47b5481d

Disassembly of section .rodata.K512%82:

00417eb8 <K512>:
  417eb8:	d728ae22 428a2f98 23ef65cd 71374491     ".(../.B.e.#.D7q
  417ec8:	ec4d3b2f b5c0fbcf 8189dbbc e9b5dba5     /;M.............
  417ed8:	f348b538 3956c25b b605d019 59f111f1     8.H.[.V9.......Y
  417ee8:	af194f9b 923f82a4 da6d8118 ab1c5ed5     .O....?...m..^..
  417ef8:	a3030242 d807aa98 45706fbe 12835b01     B........opE.[..
  417f08:	4ee4b28c 243185be d5ffb4e2 550c7dc3     ...N..1$.....}.U
  417f18:	f27b896f 72be5d74 3b1696b1 80deb1fe     o.{.t].r...;....
  417f28:	25c71235 9bdc06a7 cf692694 c19bf174     5..%.....&i.t...
  417f38:	9ef14ad2 e49b69c1 384f25e3 efbe4786     .J...i...%O8.G..
  417f48:	8b8cd5b5 0fc19dc6 77ac9c65 240ca1cc     ........e..w...$
  417f58:	592b0275 2de92c6f 6ea6e483 4a7484aa     u.+Yo,.-...n..tJ
  417f68:	bd41fbd4 5cb0a9dc 831153b5 76f988da     ..A....\.S.....v
  417f78:	ee66dfab 983e5152 2db43210 a831c66d     ..f.RQ>..2.-m.1.
  417f88:	98fb213f b00327c8 beef0ee4 bf597fc7     ?!...'........Y.
  417f98:	3da88fc2 c6e00bf3 930aa725 d5a79147     ...=....%...G...
  417fa8:	e003826f 06ca6351 0a0e6e70 14292967     o...Qc..pn..g)).
  417fb8:	46d22ffc 27b70a85 5c26c926 2e1b2138     ./.F...'&.&\8!..
  417fc8:	5ac42aed 4d2c6dfc 9d95b3df 53380d13     .*.Z.m,M......8S
  417fd8:	8baf63de 650a7354 3c77b2a8 766a0abb     .c..Ts.e..w<..jv
  417fe8:	47edaee6 81c2c92e 1482353b 92722c85     ...G....;5...,r.
  417ff8:	4cf10364 a2bfe8a1 bc423001 a81a664b     d..L.....0B.Kf..
  418008:	d0f89791 c24b8b70 0654be30 c76c51a3     ....p.K.0.T..Ql.
  418018:	d6ef5218 d192e819 5565a910 d6990624     .R........eU$...
  418028:	5771202a f40e3585 32bbd1b8 106aa070     * qW.5.....2p.j.
  418038:	b8d2d0c8 19a4c116 5141ab53 1e376c08     ........S.AQ.l7.
  418048:	df8eeb99 2748774c e19b48a8 34b0bcb5     ....LwH'.H.....4
  418058:	c5c95a63 391c0cb3 e3418acb 4ed8aa4a     cZ.....9..A.J..N
  418068:	7763e373 5b9cca4f d6b2b8a3 682e6ff3     s.cwO..[.....o.h
  418078:	5defb2fc 748f82ee 43172f60 78a5636f     ...]...t`/.Coc.x
  418088:	a1f0ab72 84c87814 1a6439ec 8cc70208     r....x...9d.....
  418098:	23631e28 90befffa de82bde9 a4506ceb     (.c#.........lP.
  4180a8:	b2c67915 bef9a3f7 e372532b c67178f2     .y......+Sr..xq.
  4180b8:	ea26619c ca273ece 21c0c207 d186b8c7     .a&..>'....!....
  4180c8:	cde0eb1e eada7dd6 ee6ed178 f57d4f7f     .....}..x.n..O}.
  4180d8:	72176fba 06f067aa a2c898a6 0a637dc5     .o.r.g.......}c.
  4180e8:	bef90dae 113f9804 131c471b 1b710b35     ......?..G..5.q.
  4180f8:	23047d84 28db77f5 40c72493 32caab7b     .}.#.w.(.$.@{..2
  418108:	15c9bebc 3c9ebe0a 9c100d4c 431d67c4     .......<L....g.C
  418118:	cb3e42b6 4cc5d4be fc657e2a 597f299c     .B>....L*~e..).Y
  418128:	3ad6faec 5fcb6fab 4a475817 6c44198c     ...:.o._.XGJ..Dl

Disassembly of section .text.ecc_test%83:

00418138 <ecc_test>:
{
  418138:	b530      	push	{r4, r5, lr}

0041813a <.LCFI34>:
  41813a:	f5ad 5d2d 	sub.w	sp, sp, #11072	; 0x2b40

0041813e <.LCFI35>:
  41813e:	b087      	sub	sp, #28

00418140 <.LCFI36>:
    appData.ecc_test_result = 12;
  418140:	220c      	movs	r2, #12
  418142:	4b94      	ldr	r3, [pc, #592]	; (418394 <.LCFI38+0x16>)
  418144:	645a      	str	r2, [r3, #68]	; 0x44
    ret = CRYPT_RNG_Initialize(&rng);
  418146:	f642 2050 	movw	r0, #10832	; 0x2a50
  41814a:	4468      	add	r0, sp
  41814c:	f00a f896 	bl	42227c <.LFE15>

00418150 <.LVL75>:
    if (ret == 0)
  418150:	b918      	cbnz	r0, 41815a <.LVL75+0xa>
        appData.ecc_test_result--;
  418152:	4a90      	ldr	r2, [pc, #576]	; (418394 <.LCFI38+0x16>)
  418154:	6c53      	ldr	r3, [r2, #68]	; 0x44
  418156:	3b01      	subs	r3, #1
  418158:	6453      	str	r3, [r2, #68]	; 0x44
    wc_ecc_init(&userA);
  41815a:	f241 1078 	movw	r0, #4472	; 0x1178

0041815e <.LVL76>:
  41815e:	4468      	add	r0, sp
  418160:	f00a f8fa 	bl	422358 <.LBE3>

00418164 <.LVL77>:
    wc_ecc_init(&userB);
  418164:	f50d 600c 	add.w	r0, sp, #2240	; 0x8c0
  418168:	f00a f8f6 	bl	422358 <.LBE3>

0041816c <.LVL78>:
    wc_ecc_init(&pubKey);
  41816c:	a802      	add	r0, sp, #8
  41816e:	f00a f8f3 	bl	422358 <.LBE3>

00418172 <.LVL79>:
    ret = wc_ecc_make_key((struct RNG *)&rng, 32, &userA);
  418172:	f241 1278 	movw	r2, #4472	; 0x1178
  418176:	446a      	add	r2, sp
  418178:	2120      	movs	r1, #32
  41817a:	f642 2050 	movw	r0, #10832	; 0x2a50
  41817e:	4468      	add	r0, sp
  418180:	f00a f968 	bl	422454 <wc_ecc_make_key>

00418184 <.LVL80>:
    ret = wc_ecc_make_key((struct RNG *)&rng, 32, &userB);
  418184:	f50d 620c 	add.w	r2, sp, #2240	; 0x8c0
  418188:	2120      	movs	r1, #32
  41818a:	f642 2050 	movw	r0, #10832	; 0x2a50
  41818e:	4468      	add	r0, sp
  418190:	f00a f960 	bl	422454 <wc_ecc_make_key>

00418194 <.LVL81>:
    if (ret == 0)
  418194:	b918      	cbnz	r0, 41819e <.LVL81+0xa>
        appData.ecc_test_result--;
  418196:	4a7f      	ldr	r2, [pc, #508]	; (418394 <.LCFI38+0x16>)
  418198:	6c53      	ldr	r3, [r2, #68]	; 0x44
  41819a:	3b01      	subs	r3, #1
  41819c:	6453      	str	r3, [r2, #68]	; 0x44
    x = sizeof(sharedA);
  41819e:	f641 2338 	movw	r3, #6712	; 0x1a38
  4181a2:	446b      	add	r3, sp
  4181a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4181a8:	601c      	str	r4, [r3, #0]
    ret = wc_ecc_shared_secret(&userA, &userB, sharedA, &x);
  4181aa:	f242 6250 	movw	r2, #9808	; 0x2650
  4181ae:	446a      	add	r2, sp
  4181b0:	f50d 610c 	add.w	r1, sp, #2240	; 0x8c0
  4181b4:	f241 1078 	movw	r0, #4472	; 0x1178

004181b8 <.LVL82>:
  4181b8:	4468      	add	r0, sp
  4181ba:	f007 fd27 	bl	41fc0c <.LBE19>

004181be <.LVL83>:
    y = sizeof(sharedB);
  4181be:	4b76      	ldr	r3, [pc, #472]	; (418398 <.LCFI38+0x1a>)
  4181c0:	f642 3258 	movw	r2, #11096	; 0x2b58
  4181c4:	446a      	add	r2, sp
  4181c6:	50d4      	str	r4, [r2, r3]
    ret = wc_ecc_shared_secret(&userB, &userA, sharedB, &y);
  4181c8:	4413      	add	r3, r2
  4181ca:	f242 2250 	movw	r2, #8784	; 0x2250
  4181ce:	446a      	add	r2, sp
  4181d0:	f241 1178 	movw	r1, #4472	; 0x1178
  4181d4:	4469      	add	r1, sp
  4181d6:	f50d 600c 	add.w	r0, sp, #2240	; 0x8c0
  4181da:	f007 fd17 	bl	41fc0c <.LBE19>

004181de <.LVL84>:
    if (ret == 0)
  4181de:	b918      	cbnz	r0, 4181e8 <.LVL84+0xa>
        appData.ecc_test_result--;
  4181e0:	4a6c      	ldr	r2, [pc, #432]	; (418394 <.LCFI38+0x16>)
  4181e2:	6c53      	ldr	r3, [r2, #68]	; 0x44
  4181e4:	3b01      	subs	r3, #1
  4181e6:	6453      	str	r3, [r2, #68]	; 0x44
    if (y == x)
  4181e8:	f641 2338 	movw	r3, #6712	; 0x1a38
  4181ec:	446b      	add	r3, sp
  4181ee:	681a      	ldr	r2, [r3, #0]
  4181f0:	4b69      	ldr	r3, [pc, #420]	; (418398 <.LCFI38+0x1a>)
  4181f2:	f642 3158 	movw	r1, #11096	; 0x2b58
  4181f6:	4469      	add	r1, sp
  4181f8:	58cb      	ldr	r3, [r1, r3]
  4181fa:	4293      	cmp	r3, r2
  4181fc:	f000 80bf 	beq.w	41837e <.LCFI38>
    if (!(memcmp(sharedA, sharedB, x)))
  418200:	f242 2150 	movw	r1, #8784	; 0x2250
  418204:	4469      	add	r1, sp
  418206:	f242 6050 	movw	r0, #9808	; 0x2650

0041820a <.LVL85>:
  41820a:	4468      	add	r0, sp
  41820c:	f008 f930 	bl	420470 <memcmp>

00418210 <.LVL86>:
  418210:	b918      	cbnz	r0, 41821a <.LVL86+0xa>
        appData.ecc_test_result--;
  418212:	4a60      	ldr	r2, [pc, #384]	; (418394 <.LCFI38+0x16>)
  418214:	6c53      	ldr	r3, [r2, #68]	; 0x44
  418216:	3b01      	subs	r3, #1
  418218:	6453      	str	r3, [r2, #68]	; 0x44
    x = sizeof(exportBuf);
  41821a:	f641 2238 	movw	r2, #6712	; 0x1a38
  41821e:	446a      	add	r2, sp
  418220:	f44f 6380 	mov.w	r3, #1024	; 0x400
  418224:	6013      	str	r3, [r2, #0]
    ret = wc_ecc_export_x963(&userA, exportBuf, &x);
  418226:	f641 213c 	movw	r1, #6716	; 0x1a3c
  41822a:	4469      	add	r1, sp
  41822c:	f241 1078 	movw	r0, #4472	; 0x1178
  418230:	4468      	add	r0, sp
  418232:	f003 fd01 	bl	41bc38 <wc_ecc_export_x963>

00418236 <.LVL87>:
    if (ret == 0)
  418236:	b918      	cbnz	r0, 418240 <.LVL87+0xa>
        appData.ecc_test_result--;
  418238:	4a56      	ldr	r2, [pc, #344]	; (418394 <.LCFI38+0x16>)
  41823a:	6c53      	ldr	r3, [r2, #68]	; 0x44
  41823c:	3b01      	subs	r3, #1
  41823e:	6453      	str	r3, [r2, #68]	; 0x44
    ret = wc_ecc_import_x963(exportBuf, x, &pubKey);
  418240:	aa02      	add	r2, sp, #8
  418242:	f641 2338 	movw	r3, #6712	; 0x1a38
  418246:	446b      	add	r3, sp
  418248:	6819      	ldr	r1, [r3, #0]
  41824a:	f641 203c 	movw	r0, #6716	; 0x1a3c

0041824e <.LVL88>:
  41824e:	4468      	add	r0, sp
  418250:	f00a f905 	bl	42245e <.LFE48>

00418254 <.LVL89>:
    if (ret == 0)
  418254:	b918      	cbnz	r0, 41825e <.LVL89+0xa>
        appData.ecc_test_result--;
  418256:	4a4f      	ldr	r2, [pc, #316]	; (418394 <.LCFI38+0x16>)
  418258:	6c53      	ldr	r3, [r2, #68]	; 0x44
  41825a:	3b01      	subs	r3, #1
  41825c:	6453      	str	r3, [r2, #68]	; 0x44
    y = sizeof(sharedB);
  41825e:	4b4e      	ldr	r3, [pc, #312]	; (418398 <.LCFI38+0x1a>)
  418260:	f44f 6280 	mov.w	r2, #1024	; 0x400
  418264:	f642 3158 	movw	r1, #11096	; 0x2b58
  418268:	4469      	add	r1, sp
  41826a:	50ca      	str	r2, [r1, r3]
    ret = wc_ecc_shared_secret(&userB, &pubKey, sharedB, &y);
  41826c:	440b      	add	r3, r1
  41826e:	f242 2250 	movw	r2, #8784	; 0x2250
  418272:	446a      	add	r2, sp
  418274:	a902      	add	r1, sp, #8
  418276:	f50d 600c 	add.w	r0, sp, #2240	; 0x8c0

0041827a <.LVL90>:
  41827a:	f007 fcc7 	bl	41fc0c <.LBE19>

0041827e <.LVL91>:
    if (ret == 0)
  41827e:	b918      	cbnz	r0, 418288 <.LVL91+0xa>
        appData.ecc_test_result--;
  418280:	4a44      	ldr	r2, [pc, #272]	; (418394 <.LCFI38+0x16>)
  418282:	6c53      	ldr	r3, [r2, #68]	; 0x44
  418284:	3b01      	subs	r3, #1
  418286:	6453      	str	r3, [r2, #68]	; 0x44
    if (!(memcmp(sharedA, sharedB, y)))
  418288:	4b43      	ldr	r3, [pc, #268]	; (418398 <.LCFI38+0x1a>)
  41828a:	f642 3258 	movw	r2, #11096	; 0x2b58
  41828e:	446a      	add	r2, sp
  418290:	58d2      	ldr	r2, [r2, r3]
  418292:	f242 2150 	movw	r1, #8784	; 0x2250
  418296:	4469      	add	r1, sp
  418298:	f242 6050 	movw	r0, #9808	; 0x2650

0041829c <.LVL92>:
  41829c:	4468      	add	r0, sp
  41829e:	f008 f8e7 	bl	420470 <memcmp>

004182a2 <.LVL93>:
  4182a2:	b918      	cbnz	r0, 4182ac <.LVL94>
        appData.ecc_test_result--;
  4182a4:	4a3b      	ldr	r2, [pc, #236]	; (418394 <.LCFI38+0x16>)
  4182a6:	6c53      	ldr	r3, [r2, #68]	; 0x44
  4182a8:	3b01      	subs	r3, #1
  4182aa:	6453      	str	r3, [r2, #68]	; 0x44

004182ac <.LVL94>:
  4182ac:	f641 613c 	movw	r1, #7740	; 0x1e3c
  4182b0:	4469      	add	r1, sp
  4182b2:	f641 6050 	movw	r0, #7760	; 0x1e50
  4182b6:	4468      	add	r0, sp
{
  4182b8:	460b      	mov	r3, r1

004182ba <.LVL95>:
        digest[i] = i;
  4182ba:	1a5a      	subs	r2, r3, r1
  4182bc:	f803 2b01 	strb.w	r2, [r3], #1
    for (i = 0; i < (int)sizeof(digest); i++)
  4182c0:	4283      	cmp	r3, r0
  4182c2:	d1fa      	bne.n	4182ba <.LVL95>
    x = sizeof(sig);
  4182c4:	f641 2438 	movw	r4, #6712	; 0x1a38
  4182c8:	446c      	add	r4, sp
  4182ca:	f44f 6380 	mov.w	r3, #1024	; 0x400

004182ce <.LVL97>:
  4182ce:	6023      	str	r3, [r4, #0]
    ret = wc_ecc_sign_hash(digest, sizeof(digest), sig, &x, (struct RNG *)&rng, &userA);
  4182d0:	f241 1578 	movw	r5, #4472	; 0x1178
  4182d4:	446d      	add	r5, sp
  4182d6:	9501      	str	r5, [sp, #4]
  4182d8:	f642 2350 	movw	r3, #10832	; 0x2a50
  4182dc:	446b      	add	r3, sp
  4182de:	9300      	str	r3, [sp, #0]
  4182e0:	4623      	mov	r3, r4
  4182e2:	f641 6250 	movw	r2, #7760	; 0x1e50
  4182e6:	446a      	add	r2, sp
  4182e8:	2114      	movs	r1, #20
  4182ea:	f641 603c 	movw	r0, #7740	; 0x1e3c
  4182ee:	4468      	add	r0, sp
  4182f0:	f004 fa34 	bl	41c75c <L0>

004182f4 <.LVL98>:
    verify = 0;
  4182f4:	4b29      	ldr	r3, [pc, #164]	; (41839c <.LCFI38+0x1e>)
  4182f6:	f642 3258 	movw	r2, #11096	; 0x2b58
  4182fa:	446a      	add	r2, sp
  4182fc:	441a      	add	r2, r3
  4182fe:	2100      	movs	r1, #0
  418300:	f642 3058 	movw	r0, #11096	; 0x2b58
  418304:	4468      	add	r0, sp
  418306:	50c1      	str	r1, [r0, r3]
    ret = wc_ecc_verify_hash(sig, x, digest, sizeof(digest), &verify, &userA);
  418308:	6821      	ldr	r1, [r4, #0]
  41830a:	9501      	str	r5, [sp, #4]
  41830c:	9200      	str	r2, [sp, #0]
  41830e:	2314      	movs	r3, #20
  418310:	f641 623c 	movw	r2, #7740	; 0x1e3c
  418314:	446a      	add	r2, sp
  418316:	f641 6050 	movw	r0, #7760	; 0x1e50
  41831a:	4468      	add	r0, sp
  41831c:	f004 faf4 	bl	41c908 <.LFE17>

00418320 <.LVL99>:
    if (ret == 0)
  418320:	b918      	cbnz	r0, 41832a <.LVL99+0xa>
        appData.ecc_test_result--;
  418322:	4a1c      	ldr	r2, [pc, #112]	; (418394 <.LCFI38+0x16>)
  418324:	6c53      	ldr	r3, [r2, #68]	; 0x44
  418326:	3b01      	subs	r3, #1
  418328:	6453      	str	r3, [r2, #68]	; 0x44
    if (verify == 1)
  41832a:	4b1c      	ldr	r3, [pc, #112]	; (41839c <.LCFI38+0x1e>)
  41832c:	f642 3258 	movw	r2, #11096	; 0x2b58
  418330:	446a      	add	r2, sp
  418332:	58d3      	ldr	r3, [r2, r3]
  418334:	2b01      	cmp	r3, #1
  418336:	d027      	beq.n	418388 <.LCFI38+0xa>
    x = sizeof(exportBuf);
  418338:	f641 2238 	movw	r2, #6712	; 0x1a38
  41833c:	446a      	add	r2, sp
  41833e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  418342:	6013      	str	r3, [r2, #0]
    ret = wc_ecc_export_private_only(&userA, exportBuf, &x);
  418344:	f641 213c 	movw	r1, #6716	; 0x1a3c
  418348:	4469      	add	r1, sp
  41834a:	f241 1078 	movw	r0, #4472	; 0x1178

0041834e <.LVL100>:
  41834e:	4468      	add	r0, sp
  418350:	f007 fffe 	bl	420350 <.LFE24>

00418354 <.LVL101>:
    if (ret == 0)
  418354:	b918      	cbnz	r0, 41835e <.LVL101+0xa>
        appData.ecc_test_result--;
  418356:	4a0f      	ldr	r2, [pc, #60]	; (418394 <.LCFI38+0x16>)
  418358:	6c53      	ldr	r3, [r2, #68]	; 0x44
  41835a:	3b01      	subs	r3, #1
  41835c:	6453      	str	r3, [r2, #68]	; 0x44
    wc_ecc_free(&pubKey);
  41835e:	a802      	add	r0, sp, #8

00418360 <.LVL102>:
  418360:	f009 fb36 	bl	4219d0 <.LFE27>

00418364 <.LVL103>:
    wc_ecc_free(&userB);
  418364:	f50d 600c 	add.w	r0, sp, #2240	; 0x8c0
  418368:	f009 fb32 	bl	4219d0 <.LFE27>

0041836c <.LVL104>:
    wc_ecc_free(&userA);
  41836c:	f241 1078 	movw	r0, #4472	; 0x1178
  418370:	4468      	add	r0, sp
  418372:	f009 fb2d 	bl	4219d0 <.LFE27>

00418376 <.LVL105>:
}
  418376:	f50d 5d2d 	add.w	sp, sp, #11072	; 0x2b40
  41837a:	b007      	add	sp, #28

0041837c <.LCFI37>:
  41837c:	bd30      	pop	{r4, r5, pc}

0041837e <.LCFI38>:
        appData.ecc_test_result--;
  41837e:	4905      	ldr	r1, [pc, #20]	; (418394 <.LCFI38+0x16>)
  418380:	6c4b      	ldr	r3, [r1, #68]	; 0x44
  418382:	3b01      	subs	r3, #1
  418384:	644b      	str	r3, [r1, #68]	; 0x44
  418386:	e73b      	b.n	418200 <.LVL84+0x22>
        appData.ecc_test_result--;
  418388:	4a02      	ldr	r2, [pc, #8]	; (418394 <.LCFI38+0x16>)
  41838a:	6c53      	ldr	r3, [r2, #68]	; 0x44
  41838c:	3b01      	subs	r3, #1
  41838e:	6453      	str	r3, [r2, #68]	; 0x44
  418390:	e7d2      	b.n	418338 <.LVL99+0x18>
  418392:	bf00      	nop
  418394:	2040d534 	.word	0x2040d534
  418398:	ffffeedc 	.word	0xffffeedc
  41839c:	ffffeed8 	.word	0xffffeed8

Disassembly of section .text.wc_HmacSetKey%84:

004183a0 <wc_HmacSetKey>:
    return ret;
}


int wc_HmacSetKey(Hmac* hmac, int type, const byte* key, word32 length)
{
  4183a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

004183a4 <.LCFI1>:
    byte*  op;
    word32 i, hmac_block_size = 0;
    int    ret = 0;
    void*  heap = NULL;

    if (hmac == NULL || (key == NULL && length != 0) ||
  4183a4:	2800      	cmp	r0, #0
  4183a6:	f000 80ef 	beq.w	418588 <.LVL103>
  4183aa:	4616      	mov	r6, r2
  4183ac:	461f      	mov	r7, r3
  4183ae:	4604      	mov	r4, r0
  4183b0:	b912      	cbnz	r2, 4183b8 <.LCFI1+0x14>
  4183b2:	2b00      	cmp	r3, #0
  4183b4:	f040 80eb 	bne.w	41858e <.LVL103+0x6>
        !(type == MD5 || type == SHA    || type == SHA256 || type == SHA384
  4183b8:	2908      	cmp	r1, #8
  4183ba:	f200 80eb 	bhi.w	418594 <.LVL103+0xc>
  4183be:	f240 13b7 	movw	r3, #439	; 0x1b7

004183c2 <.LVL31>:
  4183c2:	40cb      	lsrs	r3, r1
    if (hmac == NULL || (key == NULL && length != 0) ||
  4183c4:	f013 0f01 	tst.w	r3, #1
  4183c8:	f000 80e9 	beq.w	41859e <.LVL105>
                      || type == SHA512 || type == BLAKE2B_ID
                      || type == SHA224)) {
        return BAD_FUNC_ARG;
    }

    hmac->innerHashKeyed = 0;
  4183cc:	2300      	movs	r3, #0
  4183ce:	f884 3225 	strb.w	r3, [r4, #549]	; 0x225
    hmac->macType = (byte)type;
  4183d2:	f884 1224 	strb.w	r1, [r4, #548]	; 0x224

004183d6 <.LBB4>:
    switch (type) {
  4183d6:	2905      	cmp	r1, #5
  4183d8:	f200 80e7 	bhi.w	4185aa <.LBB9>
  4183dc:	e8df f001 	tbb	[pc, r1]
  4183e0:	e51e1903 	.word	0xe51e1903
  4183e4:	2328      	.short	0x2328
            ret = wc_InitMd5(&hmac->hash.md5);
  4183e6:	4620      	mov	r0, r4

004183e8 <.LVL33>:
  4183e8:	f009 fe8b 	bl	422102 <.LFE18>

004183ec <.LVL34>:
  4183ec:	4605      	mov	r5, r0

004183ee <.LVL35>:
    hmac->heap = heap;
  4183ee:	2300      	movs	r3, #0
  4183f0:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220

004183f4 <.LBE4>:
    #endif /* HAVE_CAVIUM */
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    ret = _InitHmac(hmac, type, heap);
    if (ret != 0)
  4183f4:	2d00      	cmp	r5, #0
  4183f6:	f040 80cf 	bne.w	418598 <.LVL104>
#ifdef HAVE_FIPS
    if (length < HMAC_FIPS_MIN_KEY)
        return HMAC_MIN_KEYLEN_E;
#endif

    ip = (byte*)hmac->ipad;
  4183fa:	f104 08e0 	add.w	r8, r4, #224	; 0xe0

004183fe <.LVL37>:
    op = (byte*)hmac->opad;

    switch (hmac->macType) {
  4183fe:	f894 3224 	ldrb.w	r3, [r4, #548]	; 0x224
  418402:	2b05      	cmp	r3, #5
  418404:	f200 80ce 	bhi.w	4185a4 <.LVL106>
  418408:	e8df f003 	tbb	[pc, r3]
  41840c:	cc6d5017 	.word	0xcc6d5017
  418410:	89a4      	.short	0x89a4

00418412 <.LBB8>:
            ret = wc_InitSha(&hmac->hash.sha);
  418412:	4620      	mov	r0, r4

00418414 <.LVL39>:
  418414:	f009 ffb5 	bl	422382 <.LFE28>

00418418 <.LVL40>:
  418418:	4605      	mov	r5, r0

0041841a <.LVL41>:
  41841a:	e7e8      	b.n	4183ee <.LVL35>

0041841c <.LVL42>:
            ret = wc_InitSha256(&hmac->hash.sha256);
  41841c:	4620      	mov	r0, r4

0041841e <.LVL43>:
  41841e:	f009 ffb7 	bl	422390 <.LFE20>

00418422 <.LVL44>:
  418422:	4605      	mov	r5, r0

00418424 <.LVL45>:
  418424:	e7e3      	b.n	4183ee <.LVL35>

00418426 <.LVL46>:
            ret = wc_InitSha384(&hmac->hash.sha384);
  418426:	4620      	mov	r0, r4

00418428 <.LVL47>:
  418428:	f009 ffa4 	bl	422374 <.LFE22>

0041842c <.LVL48>:
  41842c:	4605      	mov	r5, r0

0041842e <.LVL49>:
  41842e:	e7de      	b.n	4183ee <.LVL35>

00418430 <.LVL50>:
            ret = wc_InitSha512(&hmac->hash.sha512);
  418430:	4620      	mov	r0, r4

00418432 <.LVL51>:
  418432:	f009 ff98 	bl	422366 <.LFE52>

00418436 <.LVL52>:
  418436:	4605      	mov	r5, r0

00418438 <.LVL53>:
  418438:	e7d9      	b.n	4183ee <.LVL35>

0041843a <.LBE8>:
    #ifndef NO_MD5
        case MD5:
            hmac_block_size = MD5_BLOCK_SIZE;
            if (length <= MD5_BLOCK_SIZE) {
  41843a:	2f40      	cmp	r7, #64	; 0x40
  41843c:	d81c      	bhi.n	418478 <.LVL60>
                if (key != NULL) {
  41843e:	2e00      	cmp	r6, #0
  418440:	f000 80c3 	beq.w	4185ca <.LVL112>
                    XMEMCPY(ip, key, length);
  418444:	463a      	mov	r2, r7
  418446:	4631      	mov	r1, r6
  418448:	4640      	mov	r0, r8
  41844a:	f002 fa9b 	bl	41a984 <.LFE14>

0041844e <.LVL55>:
            hmac_block_size = MD5_BLOCK_SIZE;
  41844e:	2640      	movs	r6, #64	; 0x40

00418450 <.LVL56>:
    #endif
    }
#endif

    if (ret == 0) {
        if (length < hmac_block_size)
  418450:	42b7      	cmp	r7, r6
  418452:	d322      	bcc.n	41849a <.LVL65>

00418454 <.LVL57>:
  418454:	4643      	mov	r3, r8
  418456:	f204 105f 	addw	r0, r4, #351	; 0x15f
  41845a:	eb08 0106 	add.w	r1, r8, r6

0041845e <.LVL58>:
            XMEMSET(ip + length, 0, hmac_block_size - length);

        for(i = 0; i < hmac_block_size; i++) {
            op[i] = ip[i] ^ OPAD;
  41845e:	781a      	ldrb	r2, [r3, #0]
  418460:	f082 025c 	eor.w	r2, r2, #92	; 0x5c
  418464:	f800 2f01 	strb.w	r2, [r0, #1]!
            ip[i] ^= IPAD;
  418468:	781a      	ldrb	r2, [r3, #0]
  41846a:	f082 0236 	eor.w	r2, r2, #54	; 0x36
  41846e:	f803 2b01 	strb.w	r2, [r3], #1
        for(i = 0; i < hmac_block_size; i++) {
  418472:	428b      	cmp	r3, r1
  418474:	d1f3      	bne.n	41845e <.LVL58>
  418476:	e08f      	b.n	418598 <.LVL104>

00418478 <.LVL60>:
                ret = wc_Md5Update(&hmac->hash.md5, key, length);
  418478:	463a      	mov	r2, r7
  41847a:	4631      	mov	r1, r6
  41847c:	4620      	mov	r0, r4
  41847e:	f006 fbb7 	bl	41ebf0 <.LFE23>

00418482 <.LVL61>:
                if (ret != 0)
  418482:	b108      	cbz	r0, 418488 <.LVL61+0x6>
                ret = wc_Md5Update(&hmac->hash.md5, key, length);
  418484:	4605      	mov	r5, r0
  418486:	e087      	b.n	418598 <.LVL104>
                ret = wc_Md5Final(&hmac->hash.md5, ip);
  418488:	4641      	mov	r1, r8
  41848a:	4620      	mov	r0, r4

0041848c <.LVL62>:
  41848c:	f004 fc9a 	bl	41cdc4 <.LFE177>

00418490 <.LVL63>:
                if (ret != 0)
  418490:	2800      	cmp	r0, #0
  418492:	f040 8090 	bne.w	4185b6 <.LBE9>
            hmac_block_size = MD5_BLOCK_SIZE;
  418496:	2640      	movs	r6, #64	; 0x40

00418498 <.LVL64>:
                length = MD5_DIGEST_SIZE;
  418498:	2710      	movs	r7, #16

0041849a <.LVL65>:
            XMEMSET(ip + length, 0, hmac_block_size - length);
  41849a:	1bf2      	subs	r2, r6, r7
  41849c:	2100      	movs	r1, #0
  41849e:	eb08 0007 	add.w	r0, r8, r7
  4184a2:	f006 f839 	bl	41e518 <.LFE14>

004184a6 <.LVL66>:
        for(i = 0; i < hmac_block_size; i++) {
  4184a6:	2e00      	cmp	r6, #0
  4184a8:	d076      	beq.n	418598 <.LVL104>
  4184aa:	e7d3      	b.n	418454 <.LVL57>

004184ac <.LVL67>:
            if (length <= SHA_BLOCK_SIZE) {
  4184ac:	2f40      	cmp	r7, #64	; 0x40
  4184ae:	d809      	bhi.n	4184c4 <.LVL70>
                if (key != NULL) {
  4184b0:	2e00      	cmp	r6, #0
  4184b2:	f000 808c 	beq.w	4185ce <.LVL114>
                    XMEMCPY(ip, key, length);
  4184b6:	463a      	mov	r2, r7
  4184b8:	4631      	mov	r1, r6
  4184ba:	4640      	mov	r0, r8
  4184bc:	f002 fa62 	bl	41a984 <.LFE14>

004184c0 <.LVL68>:
            hmac_block_size = SHA_BLOCK_SIZE;
  4184c0:	2640      	movs	r6, #64	; 0x40

004184c2 <.LVL69>:
  4184c2:	e7c5      	b.n	418450 <.LVL56>

004184c4 <.LVL70>:
                ret = wc_ShaUpdate(&hmac->hash.sha, key, length);
  4184c4:	463a      	mov	r2, r7
  4184c6:	4631      	mov	r1, r6
  4184c8:	4620      	mov	r0, r4
  4184ca:	f005 f889 	bl	41d5e0 <.LFE27>

004184ce <.LVL71>:
                if (ret != 0)
  4184ce:	b108      	cbz	r0, 4184d4 <.LVL71+0x6>
                ret = wc_ShaUpdate(&hmac->hash.sha, key, length);
  4184d0:	4605      	mov	r5, r0
  4184d2:	e061      	b.n	418598 <.LVL104>
                ret = wc_ShaFinal(&hmac->hash.sha, ip);
  4184d4:	4641      	mov	r1, r8
  4184d6:	4620      	mov	r0, r4

004184d8 <.LVL72>:
  4184d8:	f002 f914 	bl	41a704 <wc_ShaFinal>

004184dc <.LVL73>:
                if (ret != 0)
  4184dc:	2800      	cmp	r0, #0
  4184de:	d16c      	bne.n	4185ba <.LBE9+0x4>
            hmac_block_size = SHA_BLOCK_SIZE;
  4184e0:	2640      	movs	r6, #64	; 0x40

004184e2 <.LVL74>:
                length = SHA_DIGEST_SIZE;
  4184e2:	2714      	movs	r7, #20

004184e4 <.LVL75>:
  4184e4:	e7d9      	b.n	41849a <.LVL65>

004184e6 <.LVL76>:
            if (length <= SHA256_BLOCK_SIZE) {
  4184e6:	2f40      	cmp	r7, #64	; 0x40
  4184e8:	d808      	bhi.n	4184fc <.LVL79>
                if (key != NULL) {
  4184ea:	2e00      	cmp	r6, #0
  4184ec:	d071      	beq.n	4185d2 <.LVL116>
                    XMEMCPY(ip, key, length);
  4184ee:	463a      	mov	r2, r7
  4184f0:	4631      	mov	r1, r6
  4184f2:	4640      	mov	r0, r8
  4184f4:	f002 fa46 	bl	41a984 <.LFE14>

004184f8 <.LVL77>:
    		hmac_block_size = SHA256_BLOCK_SIZE;
  4184f8:	2640      	movs	r6, #64	; 0x40

004184fa <.LVL78>:
  4184fa:	e7a9      	b.n	418450 <.LVL56>

004184fc <.LVL79>:
                ret = wc_Sha256Update(&hmac->hash.sha256, key, length);
  4184fc:	463a      	mov	r2, r7
  4184fe:	4631      	mov	r1, r6
  418500:	4620      	mov	r0, r4
  418502:	f005 f8c8 	bl	41d696 <.LFE18>

00418506 <.LVL80>:
                if (ret != 0)
  418506:	b108      	cbz	r0, 41850c <.LVL80+0x6>
                ret = wc_Sha256Update(&hmac->hash.sha256, key, length);
  418508:	4605      	mov	r5, r0
  41850a:	e045      	b.n	418598 <.LVL104>
                ret = wc_Sha256Final(&hmac->hash.sha256, ip);
  41850c:	4641      	mov	r1, r8
  41850e:	4620      	mov	r0, r4

00418510 <.LVL81>:
  418510:	f001 fb52 	bl	419bb8 <.LFE175>

00418514 <.LVL82>:
                if (ret != 0)
  418514:	2800      	cmp	r0, #0
  418516:	d152      	bne.n	4185be <.LBE9+0x8>
    		hmac_block_size = SHA256_BLOCK_SIZE;
  418518:	2640      	movs	r6, #64	; 0x40

0041851a <.LVL83>:
                length = SHA256_DIGEST_SIZE;
  41851a:	2720      	movs	r7, #32

0041851c <.LVL84>:
  41851c:	e7bd      	b.n	41849a <.LVL65>

0041851e <.LVL85>:
            if (length <= SHA384_BLOCK_SIZE) {
  41851e:	2f80      	cmp	r7, #128	; 0x80
  418520:	d808      	bhi.n	418534 <.LVL88>
                if (key != NULL) {
  418522:	2e00      	cmp	r6, #0
  418524:	d057      	beq.n	4185d6 <.LVL118>
                    XMEMCPY(ip, key, length);
  418526:	463a      	mov	r2, r7
  418528:	4631      	mov	r1, r6
  41852a:	4640      	mov	r0, r8
  41852c:	f002 fa2a 	bl	41a984 <.LFE14>

00418530 <.LVL86>:
            hmac_block_size = SHA384_BLOCK_SIZE;
  418530:	2680      	movs	r6, #128	; 0x80

00418532 <.LVL87>:
  418532:	e78d      	b.n	418450 <.LVL56>

00418534 <.LVL88>:
                ret = wc_Sha384Update(&hmac->hash.sha384, key, length);
  418534:	463a      	mov	r2, r7
  418536:	4631      	mov	r1, r6
  418538:	4620      	mov	r0, r4
  41853a:	f003 fe5c 	bl	41c1f6 <.LBE719>

0041853e <.LVL89>:
                if (ret != 0)
  41853e:	b108      	cbz	r0, 418544 <.LVL89+0x6>
                ret = wc_Sha384Update(&hmac->hash.sha384, key, length);
  418540:	4605      	mov	r5, r0
  418542:	e029      	b.n	418598 <.LVL104>
                ret = wc_Sha384Final(&hmac->hash.sha384, ip);
  418544:	4641      	mov	r1, r8
  418546:	4620      	mov	r0, r4

00418548 <.LVL90>:
  418548:	f7ff fb6e 	bl	417c28 <.LFE21>

0041854c <.LVL91>:
                if (ret != 0)
  41854c:	bbc8      	cbnz	r0, 4185c2 <.LVL110>
            hmac_block_size = SHA384_BLOCK_SIZE;
  41854e:	2680      	movs	r6, #128	; 0x80

00418550 <.LVL92>:
                length = SHA384_DIGEST_SIZE;
  418550:	2730      	movs	r7, #48	; 0x30

00418552 <.LVL93>:
  418552:	e7a2      	b.n	41849a <.LVL65>

00418554 <.LVL94>:
            if (length <= SHA512_BLOCK_SIZE) {
  418554:	2f80      	cmp	r7, #128	; 0x80
  418556:	d807      	bhi.n	418568 <.LVL97>
                if (key != NULL) {
  418558:	b3fe      	cbz	r6, 4185da <.LVL120>
                    XMEMCPY(ip, key, length);
  41855a:	463a      	mov	r2, r7
  41855c:	4631      	mov	r1, r6
  41855e:	4640      	mov	r0, r8
  418560:	f002 fa10 	bl	41a984 <.LFE14>

00418564 <.LVL95>:
            hmac_block_size = SHA512_BLOCK_SIZE;
  418564:	2680      	movs	r6, #128	; 0x80

00418566 <.LVL96>:
  418566:	e773      	b.n	418450 <.LVL56>

00418568 <.LVL97>:
                ret = wc_Sha512Update(&hmac->hash.sha512, key, length);
  418568:	463a      	mov	r2, r7
  41856a:	4631      	mov	r1, r6
  41856c:	4620      	mov	r0, r4
  41856e:	f003 fdcd 	bl	41c10c <.LFE178>

00418572 <.LVL98>:
                if (ret != 0)
  418572:	b108      	cbz	r0, 418578 <.LVL98+0x6>
                ret = wc_Sha512Update(&hmac->hash.sha512, key, length);
  418574:	4605      	mov	r5, r0
  418576:	e00f      	b.n	418598 <.LVL104>
                ret = wc_Sha512Final(&hmac->hash.sha512, ip);
  418578:	4641      	mov	r1, r8
  41857a:	4620      	mov	r0, r4

0041857c <.LVL99>:
  41857c:	f7ff fa0c 	bl	417998 <wc_Sha512Final>

00418580 <.LVL100>:
                if (ret != 0)
  418580:	bb08      	cbnz	r0, 4185c6 <.LVL110+0x4>
            hmac_block_size = SHA512_BLOCK_SIZE;
  418582:	2680      	movs	r6, #128	; 0x80

00418584 <.LVL101>:
                length = SHA512_DIGEST_SIZE;
  418584:	2740      	movs	r7, #64	; 0x40

00418586 <.LVL102>:
  418586:	e788      	b.n	41849a <.LVL65>

00418588 <.LVL103>:
        return BAD_FUNC_ARG;
  418588:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  41858c:	e004      	b.n	418598 <.LVL104>
  41858e:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  418592:	e001      	b.n	418598 <.LVL104>
  418594:	f06f 05ac 	mvn.w	r5, #172	; 0xac

00418598 <.LVL104>:
        }
    }

    return ret;
}
  418598:	4628      	mov	r0, r5
  41859a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041859e <.LVL105>:
        return BAD_FUNC_ARG;
  41859e:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  4185a2:	e7f9      	b.n	418598 <.LVL104>

004185a4 <.LVL106>:
            return BAD_FUNC_ARG;
  4185a4:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  4185a8:	e7f6      	b.n	418598 <.LVL104>

004185aa <.LBB9>:
    hmac->heap = heap;
  4185aa:	2300      	movs	r3, #0
  4185ac:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220

004185b0 <.LVL108>:
            ret = BAD_FUNC_ARG;
  4185b0:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  4185b4:	e7f0      	b.n	418598 <.LVL104>

004185b6 <.LBE9>:
                ret = wc_Md5Final(&hmac->hash.md5, ip);
  4185b6:	4605      	mov	r5, r0
  4185b8:	e7ee      	b.n	418598 <.LVL104>
                ret = wc_ShaFinal(&hmac->hash.sha, ip);
  4185ba:	4605      	mov	r5, r0
  4185bc:	e7ec      	b.n	418598 <.LVL104>
                ret = wc_Sha256Final(&hmac->hash.sha256, ip);
  4185be:	4605      	mov	r5, r0
  4185c0:	e7ea      	b.n	418598 <.LVL104>

004185c2 <.LVL110>:
                ret = wc_Sha384Final(&hmac->hash.sha384, ip);
  4185c2:	4605      	mov	r5, r0
  4185c4:	e7e8      	b.n	418598 <.LVL104>
                ret = wc_Sha512Final(&hmac->hash.sha512, ip);
  4185c6:	4605      	mov	r5, r0

004185c8 <.LVL111>:
  4185c8:	e7e6      	b.n	418598 <.LVL104>

004185ca <.LVL112>:
            hmac_block_size = MD5_BLOCK_SIZE;
  4185ca:	2640      	movs	r6, #64	; 0x40

004185cc <.LVL113>:
  4185cc:	e740      	b.n	418450 <.LVL56>

004185ce <.LVL114>:
            hmac_block_size = SHA_BLOCK_SIZE;
  4185ce:	2640      	movs	r6, #64	; 0x40

004185d0 <.LVL115>:
  4185d0:	e73e      	b.n	418450 <.LVL56>

004185d2 <.LVL116>:
    		hmac_block_size = SHA256_BLOCK_SIZE;
  4185d2:	2640      	movs	r6, #64	; 0x40

004185d4 <.LVL117>:
  4185d4:	e73c      	b.n	418450 <.LVL56>

004185d6 <.LVL118>:
            hmac_block_size = SHA384_BLOCK_SIZE;
  4185d6:	2680      	movs	r6, #128	; 0x80

004185d8 <.LVL119>:
  4185d8:	e73a      	b.n	418450 <.LVL56>

004185da <.LVL120>:
            hmac_block_size = SHA512_BLOCK_SIZE;
  4185da:	2680      	movs	r6, #128	; 0x80

004185dc <.LVL121>:
  4185dc:	e738      	b.n	418450 <.LVL56>

Disassembly of section .rodata.ecc_sets%85:

004185e0 <ecc_sets>:
  4185e0:	000e 0000 0008 0000 b30c 0040 b318 0040     ..........@...@.
  4185f0:	b338 0040 b358 0040 b378 0040 b398 0040     8.@.X.@.x.@...@.
  418600:	b3b4 0040 2504 0042 0005 0000 00b6 0000     ..@..%B.........
  418610:	0001 0000 0010 0000 000a 0000 b3d4 0040     ..............@.
  418620:	b3e0 0040 b404 0040 b428 0040 b44c 0040     ..@...@.(.@.L.@.
  418630:	b470 0040 b494 0040 250c 0042 0005 0000     p.@...@..%B.....
  418640:	00cc 0000 0001 0000 0014 0000 000c 0000     ................
  418650:	b4b8 0040 b4c4 0040 b4f0 0040 b51c 0040     ..@...@...@...@.
  418660:	b548 0040 b574 0040 b5a0 0040 2514 0042     H.@.t.@...@..%B.
  418670:	0005 0000 00b8 0000 0001 0000 0018 0000     ................
  418680:	0001 0000 b5cc 0040 b5d8 0040 b60c 0040     ......@...@...@.
  418690:	b640 0040 b674 0040 b6a8 0040 b6dc 0040     @.@.t.@...@...@.
  4186a0:	251c 0042 0008 0000 0208 0000 0001 0000     .%B.............
  4186b0:	001c 0000 000e 0000 b70c 0040 b718 0040     ..........@...@.
  4186c0:	b754 0040 b790 0040 b7cc 0040 b808 0040     T.@...@...@...@.
  4186d0:	b844 0040 2524 0042 0005 0000 00d1 0000     D.@.$%B.........
  4186e0:	0001 0000 001e 0000 0004 0000 b880 0040     ..............@.
  4186f0:	b88c 0040 b8cc 0040 b90c 0040 b94c 0040     ..@...@...@.L.@.
  418700:	b98c 0040 b9cc 0040 24fc 0042 0008 0000     ..@...@..$B.....
  418710:	020b 0000 0001 0000 0020 0000 0007 0000     ........ .......
  418720:	ba0c 0040 ba18 0040 ba5c 0040 baa0 0040     ..@...@.\.@...@.
  418730:	bae4 0040 bb28 0040 bb6c 0040 252c 0042     ..@.(.@.l.@.,%B.
  418740:	0008 0000 020e 0000 0001 0000 0030 0000     ............0...
  418750:	000f 0000 bbb0 0040 bbbc 0040 bc20 0040     ......@...@. .@.
  418760:	bc84 0040 bce8 0040 bd4c 0040 bdb0 0040     ..@...@.L.@...@.
  418770:	2534 0042 0005 0000 00d2 0000 0001 0000     4%B.............
  418780:	0042 0000 0010 0000 be14 0040 be20 0040     B.........@. .@.
  418790:	bea4 0040 bf28 0040 bfac 0040 c030 0040     ..@.(.@...@.0.@.
  4187a0:	c0b4 0040 253c 0042 0005 0000 00d3 0000     ..@.<%B.........
  4187b0:	0001 0000 0000 0000 ffff ffff 0000 0000     ................
	...

Disassembly of section .text.wc_ecc_sign_hash_ex%86:

004187e8 <wc_ecc_sign_hash_ex>:
{
  4187e8:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}

004187ec <.LCFI80>:
  4187ec:	f6ad 5d38 	subw	sp, sp, #3384	; 0xd38

004187f0 <.LCFI81>:
  4187f0:	4607      	mov	r7, r0
  4187f2:	468a      	mov	sl, r1
  4187f4:	4616      	mov	r6, r2
  4187f6:	461d      	mov	r5, r3
   DECLARE_CURVE_SPECS(1)
  4187f8:	f50d 640c 	add.w	r4, sp, #2240	; 0x8c0
  4187fc:	f8cd 48bc 	str.w	r4, [sp, #2236]	; 0x8bc
  418800:	2228      	movs	r2, #40	; 0x28

00418802 <.LVL953>:
  418802:	2100      	movs	r1, #0

00418804 <.LVL954>:
  418804:	4620      	mov	r0, r4

00418806 <.LVL955>:
  418806:	f005 fe87 	bl	41e518 <.LFE14>

0041880a <.LVL956>:
  41880a:	f60d 03e8 	addw	r3, sp, #2280	; 0x8e8
  41880e:	61a3      	str	r3, [r4, #24]
  418810:	2301      	movs	r3, #1
  418812:	61e3      	str	r3, [r4, #28]
   if (in == NULL || r == NULL || s == NULL || key == NULL || rng == NULL)
  418814:	2f00      	cmp	r7, #0
  418816:	f000 80d0 	beq.w	4189ba <.LBE64>
  41881a:	f8dd 3d58 	ldr.w	r3, [sp, #3416]	; 0xd58
  41881e:	2b00      	cmp	r3, #0
  418820:	f000 80cb 	beq.w	4189ba <.LBE64>
  418824:	f8dd 3d5c 	ldr.w	r3, [sp, #3420]	; 0xd5c
  418828:	2d00      	cmp	r5, #0
  41882a:	bf18      	it	ne
  41882c:	2b00      	cmpne	r3, #0
  41882e:	f000 80c7 	beq.w	4189c0 <.LBE64+0x6>
  418832:	2e00      	cmp	r6, #0
  418834:	f000 80c4 	beq.w	4189c0 <.LBE64+0x6>
   if (key->type != ECC_PRIVATEKEY) {
  418838:	682b      	ldr	r3, [r5, #0]
  41883a:	2b02      	cmp	r3, #2
  41883c:	f040 80c3 	bne.w	4189c6 <.LBE64+0xc>
   if (wc_ecc_is_valid_idx(key->idx) != 1) {
  418840:	6868      	ldr	r0, [r5, #4]
  418842:	f009 f9a1 	bl	421b88 <wc_ecc_is_valid_idx>

00418846 <.LVL957>:
  418846:	2801      	cmp	r0, #1
  418848:	f040 80c0 	bne.w	4189cc <.LBE64+0x12>
   if ((err = mp_init(&e)) != MP_OKAY) {
  41884c:	f50d 6031 	add.w	r0, sp, #2832	; 0xb10
  418850:	f009 fd2c 	bl	4222ac <.LFE39>

00418854 <.LVL958>:
  418854:	4604      	mov	r4, r0
  418856:	b120      	cbz	r0, 418862 <.LCFI83>

00418858 <.LVL959>:
}
  418858:	4620      	mov	r0, r4
  41885a:	f60d 5d38 	addw	sp, sp, #3384	; 0xd38

0041885e <.LCFI82>:
  41885e:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00418862 <.LCFI83>:
   err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ORDER);
  418862:	2208      	movs	r2, #8
  418864:	f60d 01bc 	addw	r1, sp, #2236	; 0x8bc
  418868:	6928      	ldr	r0, [r5, #16]

0041886a <.LVL961>:
  41886a:	f004 fda3 	bl	41d3b4 <.LFE172>

0041886e <.LVL962>:
   if (err == MP_OKAY) {
  41886e:	4604      	mov	r4, r0
  418870:	b140      	cbz	r0, 418884 <.LBB63>

00418872 <.LVL963>:
   mp_clear(&e);
  418872:	f50d 6031 	add.w	r0, sp, #2832	; 0xb10
  418876:	f009 fdab 	bl	4223d0 <.LFE16>

0041887a <.LBB61>:
    _wc_ecc_curve_free(curve);
  41887a:	f8dd 08bc 	ldr.w	r0, [sp, #2236]	; 0x8bc
  41887e:	f007 faa1 	bl	41fdc4 <.LFE46>

00418882 <.LVL965>:
  418882:	e7e9      	b.n	418858 <.LVL959>

00418884 <.LBB63>:
       word32 orderBits = mp_count_bits(curve->order);
  418884:	f8dd 38bc 	ldr.w	r3, [sp, #2236]	; 0x8bc
  418888:	68d8      	ldr	r0, [r3, #12]

0041888a <.LVL967>:
  41888a:	f009 fe7b 	bl	422584 <.LFE80>

0041888e <.LVL968>:
  41888e:	4683      	mov	fp, r0

00418890 <.LVL969>:
       if ((WOLFSSL_BIT_SIZE * inlen) > orderBits)
  418890:	ebb0 0fca 	cmp.w	r0, sl, lsl #3
  418894:	f080 809f 	bcs.w	4189d6 <.LVL1006>
           inlen = (orderBits + WOLFSSL_BIT_SIZE - 1) / WOLFSSL_BIT_SIZE;
  418898:	f100 0a07 	add.w	sl, r0, #7

0041889c <.LVL970>:
       err = mp_read_unsigned_bin(&e, (byte*)in, inlen);
  41889c:	ea4f 02da 	mov.w	r2, sl, lsr #3

004188a0 <.LVL971>:
  4188a0:	4639      	mov	r1, r7
  4188a2:	f50d 6031 	add.w	r0, sp, #2832	; 0xb10

004188a6 <.LVL972>:
  4188a6:	f009 fde9 	bl	42247c <.LFE72>

004188aa <.LVL973>:
       if (err == MP_OKAY && (WOLFSSL_BIT_SIZE * inlen) > orderBits)
  4188aa:	2800      	cmp	r0, #0
  4188ac:	f040 8091 	bne.w	4189d2 <.LBB65>
  4188b0:	f02a 0a07 	bic.w	sl, sl, #7

004188b4 <.LVL974>:
  4188b4:	45d3      	cmp	fp, sl
  4188b6:	d207      	bcs.n	4188c8 <.LBB64>
           mp_rshb(&e, WOLFSSL_BIT_SIZE - (orderBits & 0x7));
  4188b8:	f00b 0107 	and.w	r1, fp, #7
  4188bc:	f1c1 0108 	rsb	r1, r1, #8
  4188c0:	f50d 6031 	add.w	r0, sp, #2832	; 0xb10

004188c4 <.LVL975>:
  4188c4:	f009 fe66 	bl	422594 <.LFE97>

004188c8 <.LBB64>:
       if (wc_ecc_init_ex(&pubkey, key->heap, INVALID_DEVID) == MP_OKAY) {
  4188c8:	f06f 0201 	mvn.w	r2, #1
  4188cc:	6969      	ldr	r1, [r5, #20]
  4188ce:	a801      	add	r0, sp, #4
  4188d0:	f008 f997 	bl	420c02 <.LFE16>

004188d4 <.LVL977>:
  4188d4:	2800      	cmp	r0, #0
  4188d6:	d1cc      	bne.n	418872 <.LVL963>
  4188d8:	f04f 0940 	mov.w	r9, #64	; 0x40
  4188dc:	e010      	b.n	418900 <.LVL984>

004188de <.LVL978>:
                   mp_clear(pubkey.pubkey.x);
  4188de:	a807      	add	r0, sp, #28
  4188e0:	f009 fd76 	bl	4223d0 <.LFE16>

004188e4 <.LVL979>:
                   mp_clear(pubkey.pubkey.y);
  4188e4:	a891      	add	r0, sp, #580	; 0x244
  4188e6:	f009 fd73 	bl	4223d0 <.LFE16>

004188ea <.LVL980>:
                   mp_clear(pubkey.pubkey.z);
  4188ea:	f20d 406c 	addw	r0, sp, #1132	; 0x46c
  4188ee:	f009 fd6f 	bl	4223d0 <.LFE16>

004188f2 <.LVL981>:
                   mp_forcezero(&pubkey.k);
  4188f2:	f20d 6094 	addw	r0, sp, #1684	; 0x694
  4188f6:	f009 fe25 	bl	422544 <mp_forcezero>

004188fa <.LVL982>:
               if (++loop_check > 64) {
  4188fa:	f1b9 0901 	subs.w	r9, r9, #1

004188fe <.LVL983>:
  4188fe:	d056      	beq.n	4189ae <.LVL1001+0x6>

00418900 <.LVL984>:
               err = wc_ecc_make_key_ex(rng, key->dp->size, &pubkey,
  418900:	6929      	ldr	r1, [r5, #16]
  418902:	684b      	ldr	r3, [r1, #4]
  418904:	aa01      	add	r2, sp, #4
  418906:	6809      	ldr	r1, [r1, #0]
  418908:	4630      	mov	r0, r6
  41890a:	f000 fefd 	bl	419708 <.LFE18>

0041890e <.LVL985>:
               if (err != MP_OKAY) break;
  41890e:	4604      	mov	r4, r0
  418910:	2800      	cmp	r0, #0
  418912:	d14e      	bne.n	4189b2 <.LVL1002>
               err = mp_mod(pubkey.pubkey.x, curve->order, r);
  418914:	f8dd 38bc 	ldr.w	r3, [sp, #2236]	; 0x8bc
  418918:	f8dd 2d58 	ldr.w	r2, [sp, #3416]	; 0xd58
  41891c:	68d9      	ldr	r1, [r3, #12]
  41891e:	a807      	add	r0, sp, #28

00418920 <.LVL986>:
  418920:	f009 fe28 	bl	422574 <.LFE75>

00418924 <.LVL987>:
               if (err != MP_OKAY) break;
  418924:	4604      	mov	r4, r0
  418926:	2800      	cmp	r0, #0
  418928:	d143      	bne.n	4189b2 <.LVL1002>
               if (mp_iszero(r) == MP_YES) {
  41892a:	f8dd 0d58 	ldr.w	r0, [sp, #3416]	; 0xd58

0041892e <.LVL988>:
  41892e:	f009 fdb9 	bl	4224a4 <.LFE93>

00418932 <.LVL989>:
  418932:	2801      	cmp	r0, #1
  418934:	d0d3      	beq.n	4188de <.LVL978>
                   err = mp_invmod(&pubkey.k, curve->order, &pubkey.k);
  418936:	f8dd 38bc 	ldr.w	r3, [sp, #2236]	; 0x8bc
  41893a:	f20d 6294 	addw	r2, sp, #1684	; 0x694
  41893e:	68d9      	ldr	r1, [r3, #12]
  418940:	4610      	mov	r0, r2
  418942:	f009 fe0f 	bl	422564 <.LFE83>

00418946 <.LVL990>:
                   if (err != MP_OKAY) break;
  418946:	4604      	mov	r4, r0
  418948:	bb98      	cbnz	r0, 4189b2 <.LVL1002>
                   err = mp_mulmod(&key->k, r, curve->order, s);
  41894a:	f8dd 28bc 	ldr.w	r2, [sp, #2236]	; 0x8bc
  41894e:	f8dd 3d5c 	ldr.w	r3, [sp, #3420]	; 0xd5c
  418952:	68d2      	ldr	r2, [r2, #12]
  418954:	f8dd 1d58 	ldr.w	r1, [sp, #3416]	; 0xd58
  418958:	f505 60d2 	add.w	r0, r5, #1680	; 0x690

0041895c <.LVL991>:
  41895c:	f009 fe06 	bl	42256c <.LFE79>

00418960 <.LVL992>:
                   if (err != MP_OKAY) break;
  418960:	4604      	mov	r4, r0
  418962:	bb30      	cbnz	r0, 4189b2 <.LVL1002>
                   err = mp_add(&e, s, s);
  418964:	f8dd 2d5c 	ldr.w	r2, [sp, #3420]	; 0xd5c
  418968:	4611      	mov	r1, r2
  41896a:	f50d 6031 	add.w	r0, sp, #2832	; 0xb10

0041896e <.LVL993>:
  41896e:	f009 fd7b 	bl	422468 <.LFE68>

00418972 <.LVL994>:
                   if (err != MP_OKAY) break;
  418972:	4604      	mov	r4, r0
  418974:	b9e8      	cbnz	r0, 4189b2 <.LVL1002>
                   err = mp_mod(s, curve->order, s);
  418976:	f8dd 38bc 	ldr.w	r3, [sp, #2236]	; 0x8bc
  41897a:	f8dd 2d5c 	ldr.w	r2, [sp, #3420]	; 0xd5c
  41897e:	68d9      	ldr	r1, [r3, #12]
  418980:	4610      	mov	r0, r2

00418982 <.LVL995>:
  418982:	f009 fdf7 	bl	422574 <.LFE75>

00418986 <.LVL996>:
                   if (err != MP_OKAY) break;
  418986:	4604      	mov	r4, r0
  418988:	b998      	cbnz	r0, 4189b2 <.LVL1002>
                   err = mp_mulmod(s, &pubkey.k, curve->order, s);
  41898a:	f8dd 28bc 	ldr.w	r2, [sp, #2236]	; 0x8bc
  41898e:	f8dd 3d5c 	ldr.w	r3, [sp, #3420]	; 0xd5c
  418992:	68d2      	ldr	r2, [r2, #12]
  418994:	f20d 6194 	addw	r1, sp, #1684	; 0x694
  418998:	4618      	mov	r0, r3

0041899a <.LVL997>:
  41899a:	f009 fde7 	bl	42256c <.LFE79>

0041899e <.LVL998>:
  41899e:	4604      	mov	r4, r0

004189a0 <.LVL999>:
                   if (mp_iszero(s) == MP_NO)
  4189a0:	f8dd 0d5c 	ldr.w	r0, [sp, #3420]	; 0xd5c

004189a4 <.LVL1000>:
  4189a4:	f009 fd7e 	bl	4224a4 <.LFE93>

004189a8 <.LVL1001>:
  4189a8:	2800      	cmp	r0, #0
  4189aa:	d1a6      	bne.n	4188fa <.LVL982>
  4189ac:	e001      	b.n	4189b2 <.LVL1002>
                    err = RNG_FAILURE_E;
  4189ae:	f06f 04c6 	mvn.w	r4, #198	; 0xc6

004189b2 <.LVL1002>:
           wc_ecc_free(&pubkey);
  4189b2:	a801      	add	r0, sp, #4
  4189b4:	f009 f80c 	bl	4219d0 <.LFE27>

004189b8 <.LVL1003>:
  4189b8:	e75b      	b.n	418872 <.LVL963>

004189ba <.LBE64>:
       return ECC_BAD_ARG_E;
  4189ba:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
  4189be:	e74b      	b.n	418858 <.LVL959>
  4189c0:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
  4189c4:	e748      	b.n	418858 <.LVL959>
      return ECC_BAD_ARG_E;
  4189c6:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
  4189ca:	e745      	b.n	418858 <.LVL959>
      return ECC_BAD_ARG_E;
  4189cc:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
  4189d0:	e742      	b.n	418858 <.LVL959>

004189d2 <.LBB65>:
       err = mp_read_unsigned_bin(&e, (byte*)in, inlen);
  4189d2:	4604      	mov	r4, r0
  4189d4:	e74d      	b.n	418872 <.LVL963>

004189d6 <.LVL1006>:
  4189d6:	4652      	mov	r2, sl
  4189d8:	4639      	mov	r1, r7
  4189da:	f50d 6031 	add.w	r0, sp, #2832	; 0xb10

004189de <.LVL1007>:
  4189de:	f009 fd4d 	bl	42247c <.LFE72>

004189e2 <.LVL1008>:
       if (err == MP_OKAY && (WOLFSSL_BIT_SIZE * inlen) > orderBits)
  4189e2:	2800      	cmp	r0, #0
  4189e4:	f43f af70 	beq.w	4188c8 <.LBB64>
       err = mp_read_unsigned_bin(&e, (byte*)in, inlen);
  4189e8:	4604      	mov	r4, r0
  4189ea:	e742      	b.n	418872 <.LVL963>

Disassembly of section .rodata._dist_code%87:

004189ec <_dist_code>:
  4189ec:	0100 0302 0404 0505 0606 0606 0707 0707     ................
  4189fc:	0808 0808 0808 0808 0909 0909 0909 0909     ................
  418a0c:	0a0a 0a0a 0a0a 0a0a 0a0a 0a0a 0a0a 0a0a     ................
  418a1c:	0b0b 0b0b 0b0b 0b0b 0b0b 0b0b 0b0b 0b0b     ................
  418a2c:	0c0c 0c0c 0c0c 0c0c 0c0c 0c0c 0c0c 0c0c     ................
  418a3c:	0c0c 0c0c 0c0c 0c0c 0c0c 0c0c 0c0c 0c0c     ................
  418a4c:	0d0d 0d0d 0d0d 0d0d 0d0d 0d0d 0d0d 0d0d     ................
  418a5c:	0d0d 0d0d 0d0d 0d0d 0d0d 0d0d 0d0d 0d0d     ................
  418a6c:	0e0e 0e0e 0e0e 0e0e 0e0e 0e0e 0e0e 0e0e     ................
  418a7c:	0e0e 0e0e 0e0e 0e0e 0e0e 0e0e 0e0e 0e0e     ................
  418a8c:	0e0e 0e0e 0e0e 0e0e 0e0e 0e0e 0e0e 0e0e     ................
  418a9c:	0e0e 0e0e 0e0e 0e0e 0e0e 0e0e 0e0e 0e0e     ................
  418aac:	0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f     ................
  418abc:	0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f     ................
  418acc:	0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f     ................
  418adc:	0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f     ................
  418aec:	0000 1110 1212 1313 1414 1414 1515 1515     ................
  418afc:	1616 1616 1616 1616 1717 1717 1717 1717     ................
  418b0c:	1818 1818 1818 1818 1818 1818 1818 1818     ................
  418b1c:	1919 1919 1919 1919 1919 1919 1919 1919     ................
  418b2c:	1a1a 1a1a 1a1a 1a1a 1a1a 1a1a 1a1a 1a1a     ................
  418b3c:	1a1a 1a1a 1a1a 1a1a 1a1a 1a1a 1a1a 1a1a     ................
  418b4c:	1b1b 1b1b 1b1b 1b1b 1b1b 1b1b 1b1b 1b1b     ................
  418b5c:	1b1b 1b1b 1b1b 1b1b 1b1b 1b1b 1b1b 1b1b     ................
  418b6c:	1c1c 1c1c 1c1c 1c1c 1c1c 1c1c 1c1c 1c1c     ................
  418b7c:	1c1c 1c1c 1c1c 1c1c 1c1c 1c1c 1c1c 1c1c     ................
  418b8c:	1c1c 1c1c 1c1c 1c1c 1c1c 1c1c 1c1c 1c1c     ................
  418b9c:	1c1c 1c1c 1c1c 1c1c 1c1c 1c1c 1c1c 1c1c     ................
  418bac:	1d1d 1d1d 1d1d 1d1d 1d1d 1d1d 1d1d 1d1d     ................
  418bbc:	1d1d 1d1d 1d1d 1d1d 1d1d 1d1d 1d1d 1d1d     ................
  418bcc:	1d1d 1d1d 1d1d 1d1d 1d1d 1d1d 1d1d 1d1d     ................
  418bdc:	1d1d 1d1d 1d1d 1d1d 1d1d 1d1d 1d1d 1d1d     ................

Disassembly of section .text.fill_window%88:

00418bec <fill_window>:
{
  418bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

00418bf0 <.LCFI5>:
  418bf0:	4604      	mov	r4, r0
    uInt wsize = s->w_size;
  418bf2:	6ac6      	ldr	r6, [r0, #44]	; 0x2c

00418bf4 <.LVL61>:
            p = &s->prev[n];
  418bf4:	0077      	lsls	r7, r6, #1
        if (s->lookahead + s->insert >= MIN_MATCH) {
  418bf6:	f241 65b4 	movw	r5, #5812	; 0x16b4
  418bfa:	4405      	add	r5, r0
  418bfc:	e067      	b.n	418cce <.LVL84>

00418bfe <.LVL62>:
            zmemcpy(s->window, s->window+wsize, (unsigned)wsize);
  418bfe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  418c00:	4632      	mov	r2, r6
  418c02:	1981      	adds	r1, r0, r6
  418c04:	f001 febe 	bl	41a984 <.LFE14>

00418c08 <.LVL63>:
            s->match_start -= wsize;
  418c08:	6f23      	ldr	r3, [r4, #112]	; 0x70
  418c0a:	1b9b      	subs	r3, r3, r6
  418c0c:	6723      	str	r3, [r4, #112]	; 0x70
            s->strstart    -= wsize; /* we now have strstart >= MAX_DIST */
  418c0e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  418c10:	1b9b      	subs	r3, r3, r6
  418c12:	66e3      	str	r3, [r4, #108]	; 0x6c
            s->block_start -= (long) wsize;
  418c14:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  418c16:	1b9b      	subs	r3, r3, r6
  418c18:	65e3      	str	r3, [r4, #92]	; 0x5c
            n = s->hash_size;
  418c1a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c

00418c1c <.LVL64>:
            p = &s->head[n];
  418c1c:	6c61      	ldr	r1, [r4, #68]	; 0x44
  418c1e:	eb01 0142 	add.w	r1, r1, r2, lsl #1

00418c22 <.LVL65>:
  418c22:	2000      	movs	r0, #0

00418c24 <.LVL66>:
                m = *--p;
  418c24:	f831 3c02 	ldrh.w	r3, [r1, #-2]

00418c28 <.LVL67>:
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
  418c28:	429e      	cmp	r6, r3
  418c2a:	bf94      	ite	ls
  418c2c:	1b9b      	subls	r3, r3, r6

00418c2e <.LVL68>:
  418c2e:	4603      	movhi	r3, r0
  418c30:	f821 3d02 	strh.w	r3, [r1, #-2]!

00418c34 <.LVL69>:
            } while (--n);
  418c34:	3a01      	subs	r2, #1

00418c36 <.LVL70>:
  418c36:	d1f5      	bne.n	418c24 <.LVL66>

00418c38 <.LVL71>:
            p = &s->prev[n];
  418c38:	6c21      	ldr	r1, [r4, #64]	; 0x40
  418c3a:	4439      	add	r1, r7

00418c3c <.LVL72>:
            n = wsize;
  418c3c:	4630      	mov	r0, r6

00418c3e <.LVL73>:
                m = *--p;
  418c3e:	f831 3c02 	ldrh.w	r3, [r1, #-2]

00418c42 <.LVL74>:
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
  418c42:	429e      	cmp	r6, r3
  418c44:	bf94      	ite	ls
  418c46:	1b9b      	subls	r3, r3, r6

00418c48 <.LVL75>:
  418c48:	4613      	movhi	r3, r2
  418c4a:	f821 3d02 	strh.w	r3, [r1, #-2]!

00418c4e <.LVL76>:
            } while (--n);
  418c4e:	3801      	subs	r0, #1

00418c50 <.LVL77>:
  418c50:	d1f5      	bne.n	418c3e <.LVL73>
            more += wsize;
  418c52:	44b0      	add	r8, r6
  418c54:	e047      	b.n	418ce6 <.LVL85+0xc>

00418c56 <.LVL79>:
        n = read_buf(s->strm, s->window + s->strstart + s->lookahead, more);
  418c56:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  418c58:	6f61      	ldr	r1, [r4, #116]	; 0x74
  418c5a:	440a      	add	r2, r1
  418c5c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  418c5e:	eb01 0a02 	add.w	sl, r1, r2

00418c62 <.LBB6>:
    strm->avail_in  -= len;
  418c62:	eba3 0308 	sub.w	r3, r3, r8
  418c66:	f8c9 3004 	str.w	r3, [r9, #4]
    zmemcpy(buf, strm->next_in, len);
  418c6a:	4642      	mov	r2, r8
  418c6c:	f8d9 1000 	ldr.w	r1, [r9]
  418c70:	4650      	mov	r0, sl
  418c72:	f001 fe87 	bl	41a984 <.LFE14>

00418c76 <.LVL80>:
    if (strm->state->wrap == 1) {
  418c76:	f8d9 301c 	ldr.w	r3, [r9, #28]
  418c7a:	699b      	ldr	r3, [r3, #24]
  418c7c:	2b01      	cmp	r3, #1
  418c7e:	d00c      	beq.n	418c9a <.LVL80+0x24>
    else if (strm->state->wrap == 2) {
  418c80:	2b02      	cmp	r3, #2
  418c82:	d013      	beq.n	418cac <.LVL81+0x6>
    strm->next_in  += len;
  418c84:	f8d9 3000 	ldr.w	r3, [r9]
  418c88:	4443      	add	r3, r8
  418c8a:	f8c9 3000 	str.w	r3, [r9]
    strm->total_in += len;
  418c8e:	f8d9 3008 	ldr.w	r3, [r9, #8]
  418c92:	4443      	add	r3, r8
  418c94:	f8c9 3008 	str.w	r3, [r9, #8]
  418c98:	e033      	b.n	418d02 <.LBE9>
        strm->adler = adler32(strm->adler, buf, len);
  418c9a:	4642      	mov	r2, r8
  418c9c:	4651      	mov	r1, sl
  418c9e:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
  418ca2:	f7fd ff75 	bl	416b90 <.LFE16>

00418ca6 <.LVL81>:
  418ca6:	f8c9 0030 	str.w	r0, [r9, #48]	; 0x30
  418caa:	e7eb      	b.n	418c84 <.LVL80+0xe>
        strm->adler = crc32(strm->adler, buf, len);
  418cac:	4642      	mov	r2, r8
  418cae:	4651      	mov	r1, sl
  418cb0:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
  418cb4:	f7fe fd1a 	bl	4176ec <.LFE21>

00418cb8 <.LVL82>:
  418cb8:	f8c9 0030 	str.w	r0, [r9, #48]	; 0x30
  418cbc:	e7e2      	b.n	418c84 <.LVL80+0xe>

00418cbe <.LBE6>:
    } while (s->lookahead < MIN_LOOKAHEAD && s->strm->avail_in != 0);
  418cbe:	6f63      	ldr	r3, [r4, #116]	; 0x74
  418cc0:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
  418cc4:	d253      	bcs.n	418d6e <.LBE10>
  418cc6:	6823      	ldr	r3, [r4, #0]
  418cc8:	685b      	ldr	r3, [r3, #4]
  418cca:	2b00      	cmp	r3, #0
  418ccc:	d04f      	beq.n	418d6e <.LBE10>

00418cce <.LVL84>:
        more = (unsigned)(s->window_size -(ulg)s->lookahead -(ulg)s->strstart);
  418cce:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  418cd0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  418cd2:	6f61      	ldr	r1, [r4, #116]	; 0x74
  418cd4:	1a5b      	subs	r3, r3, r1
  418cd6:	eba3 0802 	sub.w	r8, r3, r2

00418cda <.LVL85>:
        if (s->strstart >= wsize+MAX_DIST(s)) {
  418cda:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  418cdc:	4433      	add	r3, r6
  418cde:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
  418ce2:	429a      	cmp	r2, r3
  418ce4:	d28b      	bcs.n	418bfe <.LVL62>
        if (s->strm->avail_in == 0) break;
  418ce6:	f8d4 9000 	ldr.w	r9, [r4]
  418cea:	f8d9 3004 	ldr.w	r3, [r9, #4]
  418cee:	2b00      	cmp	r3, #0
  418cf0:	d03d      	beq.n	418d6e <.LBE10>

00418cf2 <.LVL86>:
  418cf2:	4598      	cmp	r8, r3
  418cf4:	bf28      	it	cs
  418cf6:	4698      	movcs	r8, r3

00418cf8 <.LBB9>:
    if (len == 0) return 0;
  418cf8:	f1b8 0f00 	cmp.w	r8, #0
  418cfc:	d1ab      	bne.n	418c56 <.LVL79>
  418cfe:	f04f 0800 	mov.w	r8, #0

00418d02 <.LBE9>:
        s->lookahead += n;
  418d02:	6f63      	ldr	r3, [r4, #116]	; 0x74
  418d04:	4443      	add	r3, r8
  418d06:	6763      	str	r3, [r4, #116]	; 0x74
        if (s->lookahead + s->insert >= MIN_MATCH) {
  418d08:	682a      	ldr	r2, [r5, #0]
  418d0a:	4413      	add	r3, r2
  418d0c:	2b02      	cmp	r3, #2
  418d0e:	d9d6      	bls.n	418cbe <.LBE6>

00418d10 <.LBB10>:
            uInt str = s->strstart - s->insert;
  418d10:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  418d12:	1a9a      	subs	r2, r3, r2

00418d14 <.LVL89>:
            s->ins_h = s->window[str];
  418d14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  418d16:	5c99      	ldrb	r1, [r3, r2]
  418d18:	64a1      	str	r1, [r4, #72]	; 0x48
            UPDATE_HASH(s, s->ins_h, s->window[str + 1]);
  418d1a:	4413      	add	r3, r2
  418d1c:	785b      	ldrb	r3, [r3, #1]
  418d1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  418d20:	4081      	lsls	r1, r0
  418d22:	404b      	eors	r3, r1
  418d24:	6d61      	ldr	r1, [r4, #84]	; 0x54
  418d26:	400b      	ands	r3, r1
  418d28:	64a3      	str	r3, [r4, #72]	; 0x48
            while (s->insert) {
  418d2a:	682b      	ldr	r3, [r5, #0]
  418d2c:	2b00      	cmp	r3, #0
  418d2e:	d0c6      	beq.n	418cbe <.LBE6>
                UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);
  418d30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  418d32:	4413      	add	r3, r2
  418d34:	789b      	ldrb	r3, [r3, #2]
  418d36:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  418d38:	6da0      	ldr	r0, [r4, #88]	; 0x58
  418d3a:	4081      	lsls	r1, r0
  418d3c:	404b      	eors	r3, r1
  418d3e:	6d61      	ldr	r1, [r4, #84]	; 0x54
  418d40:	400b      	ands	r3, r1
  418d42:	64a3      	str	r3, [r4, #72]	; 0x48
                s->prev[str & s->w_mask] = s->head[s->ins_h];
  418d44:	6c61      	ldr	r1, [r4, #68]	; 0x44
  418d46:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
  418d4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
  418d4c:	4013      	ands	r3, r2
  418d4e:	6c21      	ldr	r1, [r4, #64]	; 0x40
  418d50:	f821 0013 	strh.w	r0, [r1, r3, lsl #1]
                s->head[s->ins_h] = (Pos)str;
  418d54:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  418d56:	6c63      	ldr	r3, [r4, #68]	; 0x44
  418d58:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
                str++;
  418d5c:	3201      	adds	r2, #1
                s->insert--;
  418d5e:	682b      	ldr	r3, [r5, #0]
  418d60:	3b01      	subs	r3, #1
  418d62:	602b      	str	r3, [r5, #0]
                if (s->lookahead + s->insert < MIN_MATCH)
  418d64:	6f61      	ldr	r1, [r4, #116]	; 0x74
  418d66:	440b      	add	r3, r1
  418d68:	2b02      	cmp	r3, #2
  418d6a:	d8de      	bhi.n	418d2a <.LVL89+0x16>
  418d6c:	e7a7      	b.n	418cbe <.LBE6>

00418d6e <.LBE10>:
    if (s->high_water < s->window_size) {
  418d6e:	f504 53b6 	add.w	r3, r4, #5824	; 0x16c0
  418d72:	6818      	ldr	r0, [r3, #0]
  418d74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  418d76:	4298      	cmp	r0, r3
  418d78:	d22c      	bcs.n	418dd4 <.LVL103>

00418d7a <.LBB11>:
        ulg curr = s->strstart + (ulg)(s->lookahead);
  418d7a:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  418d7c:	6f62      	ldr	r2, [r4, #116]	; 0x74
  418d7e:	18ae      	adds	r6, r5, r2

00418d80 <.LVL92>:
        if (s->high_water < curr) {
  418d80:	42b0      	cmp	r0, r6
  418d82:	d211      	bcs.n	418da8 <.LVL98>
            init = s->window_size - curr;
  418d84:	1b9d      	subs	r5, r3, r6

00418d86 <.LVL93>:
  418d86:	f5b5 7f81 	cmp.w	r5, #258	; 0x102
  418d8a:	bf28      	it	cs
  418d8c:	f44f 7581 	movcs.w	r5, #258	; 0x102
            zmemzero(s->window + curr, (unsigned)init);
  418d90:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  418d92:	462a      	mov	r2, r5
  418d94:	2100      	movs	r1, #0
  418d96:	4430      	add	r0, r6
  418d98:	f005 fbbe 	bl	41e518 <.LFE14>

00418d9c <.LVL95>:
            s->high_water = curr + init;
  418d9c:	f504 54b6 	add.w	r4, r4, #5824	; 0x16c0

00418da0 <.LVL96>:
  418da0:	4435      	add	r5, r6

00418da2 <.LVL97>:
  418da2:	6025      	str	r5, [r4, #0]
  418da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00418da8 <.LVL98>:
        else if (s->high_water < (ulg)curr + WIN_INIT) {
  418da8:	f506 7281 	add.w	r2, r6, #258	; 0x102
  418dac:	4290      	cmp	r0, r2
  418dae:	d211      	bcs.n	418dd4 <.LVL103>
            init = (ulg)curr + WIN_INIT - s->high_water;
  418db0:	1a35      	subs	r5, r6, r0
  418db2:	f505 7581 	add.w	r5, r5, #258	; 0x102

00418db6 <.LVL99>:
            if (init > s->window_size - s->high_water)
  418db6:	1a1b      	subs	r3, r3, r0
  418db8:	429d      	cmp	r5, r3
  418dba:	bf28      	it	cs
  418dbc:	461d      	movcs	r5, r3
            zmemzero(s->window + s->high_water, (unsigned)init);
  418dbe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  418dc0:	462a      	mov	r2, r5
  418dc2:	2100      	movs	r1, #0
  418dc4:	4418      	add	r0, r3
  418dc6:	f005 fba7 	bl	41e518 <.LFE14>

00418dca <.LVL101>:
            s->high_water += init;
  418dca:	f504 54b6 	add.w	r4, r4, #5824	; 0x16c0

00418dce <.LVL102>:
  418dce:	6823      	ldr	r3, [r4, #0]
  418dd0:	442b      	add	r3, r5
  418dd2:	6023      	str	r3, [r4, #0]

00418dd4 <.LVL103>:
  418dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

Disassembly of section .rodata%89:

00418dd8 <.rodata%89>:
  418dd8:	6f636e69 	.word	0x6f636e69
  418ddc:	63657272 	.word	0x63657272
  418de0:	65682074 	.word	0x65682074
  418de4:	72656461 	.word	0x72656461
  418de8:	65686320 	.word	0x65686320
  418dec:	00006b63 	.word	0x00006b63
  418df0:	6e6b6e75 	.word	0x6e6b6e75
  418df4:	206e776f 	.word	0x206e776f
  418df8:	706d6f63 	.word	0x706d6f63
  418dfc:	73736572 	.word	0x73736572
  418e00:	206e6f69 	.word	0x206e6f69
  418e04:	6874656d 	.word	0x6874656d
  418e08:	0000646f 	.word	0x0000646f
  418e0c:	61766e69 	.word	0x61766e69
  418e10:	2064696c 	.word	0x2064696c
  418e14:	646e6977 	.word	0x646e6977
  418e18:	7320776f 	.word	0x7320776f
  418e1c:	00657a69 	.word	0x00657a69
  418e20:	6e6b6e75 	.word	0x6e6b6e75
  418e24:	206e776f 	.word	0x206e776f
  418e28:	64616568 	.word	0x64616568
  418e2c:	66207265 	.word	0x66207265
  418e30:	7367616c 	.word	0x7367616c
  418e34:	74657320 	.word	0x74657320
  418e38:	00000000 	.word	0x00000000
  418e3c:	64616568 	.word	0x64616568
  418e40:	63207265 	.word	0x63207265
  418e44:	6d206372 	.word	0x6d206372
  418e48:	616d7369 	.word	0x616d7369
  418e4c:	00686374 	.word	0x00686374
  418e50:	61766e69 	.word	0x61766e69
  418e54:	2064696c 	.word	0x2064696c
  418e58:	636f6c62 	.word	0x636f6c62
  418e5c:	7974206b 	.word	0x7974206b
  418e60:	00006570 	.word	0x00006570
  418e64:	61766e69 	.word	0x61766e69
  418e68:	2064696c 	.word	0x2064696c
  418e6c:	726f7473 	.word	0x726f7473
  418e70:	62206465 	.word	0x62206465
  418e74:	6b636f6c 	.word	0x6b636f6c
  418e78:	6e656c20 	.word	0x6e656c20
  418e7c:	73687467 	.word	0x73687467
  418e80:	00000000 	.word	0x00000000
  418e84:	206f6f74 	.word	0x206f6f74
  418e88:	796e616d 	.word	0x796e616d
  418e8c:	6e656c20 	.word	0x6e656c20
  418e90:	20687467 	.word	0x20687467
  418e94:	6420726f 	.word	0x6420726f
  418e98:	61747369 	.word	0x61747369
  418e9c:	2065636e 	.word	0x2065636e
  418ea0:	626d7973 	.word	0x626d7973
  418ea4:	00736c6f 	.word	0x00736c6f
  418ea8:	61766e69 	.word	0x61766e69
  418eac:	2064696c 	.word	0x2064696c
  418eb0:	65646f63 	.word	0x65646f63
  418eb4:	6e656c20 	.word	0x6e656c20
  418eb8:	73687467 	.word	0x73687467
  418ebc:	74657320 	.word	0x74657320
  418ec0:	00000000 	.word	0x00000000
  418ec4:	61766e69 	.word	0x61766e69
  418ec8:	2064696c 	.word	0x2064696c
  418ecc:	20746962 	.word	0x20746962
  418ed0:	676e656c 	.word	0x676e656c
  418ed4:	72206874 	.word	0x72206874
  418ed8:	61657065 	.word	0x61657065
  418edc:	00000074 	.word	0x00000074
  418ee0:	61766e69 	.word	0x61766e69
  418ee4:	2064696c 	.word	0x2064696c
  418ee8:	65646f63 	.word	0x65646f63
  418eec:	202d2d20 	.word	0x202d2d20
  418ef0:	7373696d 	.word	0x7373696d
  418ef4:	20676e69 	.word	0x20676e69
  418ef8:	2d646e65 	.word	0x2d646e65
  418efc:	622d666f 	.word	0x622d666f
  418f00:	6b636f6c 	.word	0x6b636f6c
  418f04:	00000000 	.word	0x00000000
  418f08:	61766e69 	.word	0x61766e69
  418f0c:	2064696c 	.word	0x2064696c
  418f10:	6574696c 	.word	0x6574696c
  418f14:	2f6c6172 	.word	0x2f6c6172
  418f18:	676e656c 	.word	0x676e656c
  418f1c:	20736874 	.word	0x20736874
  418f20:	00746573 	.word	0x00746573
  418f24:	61766e69 	.word	0x61766e69
  418f28:	2064696c 	.word	0x2064696c
  418f2c:	74736964 	.word	0x74736964
  418f30:	65636e61 	.word	0x65636e61
  418f34:	65732073 	.word	0x65732073
  418f38:	00000074 	.word	0x00000074
  418f3c:	61766e69 	.word	0x61766e69
  418f40:	2064696c 	.word	0x2064696c
  418f44:	6574696c 	.word	0x6574696c
  418f48:	2f6c6172 	.word	0x2f6c6172
  418f4c:	676e656c 	.word	0x676e656c
  418f50:	63206874 	.word	0x63206874
  418f54:	0065646f 	.word	0x0065646f
  418f58:	61766e69 	.word	0x61766e69
  418f5c:	2064696c 	.word	0x2064696c
  418f60:	74736964 	.word	0x74736964
  418f64:	65636e61 	.word	0x65636e61
  418f68:	646f6320 	.word	0x646f6320
  418f6c:	00000065 	.word	0x00000065
  418f70:	61766e69 	.word	0x61766e69
  418f74:	2064696c 	.word	0x2064696c
  418f78:	74736964 	.word	0x74736964
  418f7c:	65636e61 	.word	0x65636e61
  418f80:	6f6f7420 	.word	0x6f6f7420
  418f84:	72616620 	.word	0x72616620
  418f88:	63616220 	.word	0x63616220
  418f8c:	0000006b 	.word	0x0000006b
  418f90:	6f636e69 	.word	0x6f636e69
  418f94:	63657272 	.word	0x63657272
  418f98:	61642074 	.word	0x61642074
  418f9c:	63206174 	.word	0x63206174
  418fa0:	6b636568 	.word	0x6b636568
  418fa4:	00000000 	.word	0x00000000
  418fa8:	6f636e69 	.word	0x6f636e69
  418fac:	63657272 	.word	0x63657272
  418fb0:	656c2074 	.word	0x656c2074
  418fb4:	6874676e 	.word	0x6874676e
  418fb8:	65686320 	.word	0x65686320
  418fbc:	6b63      	.short	0x6b63
	...

Disassembly of section .text.deflateInit2_%90:

00418fc0 <deflateInit2_>:
{
  418fc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

00418fc4 <.LCFI33>:
  418fc4:	461e      	mov	r6, r3
  418fc6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  418fc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30

00418fca <.LVL569>:
    if (version == Z_NULL || version[0] != my_version[0] ||
  418fca:	2b00      	cmp	r3, #0
  418fcc:	f000 80c5 	beq.w	41915a <.LVL594>
  418fd0:	4605      	mov	r5, r0
  418fd2:	4688      	mov	r8, r1
  418fd4:	4692      	mov	sl, r2
  418fd6:	781b      	ldrb	r3, [r3, #0]
  418fd8:	2b31      	cmp	r3, #49	; 0x31
  418fda:	f040 80c2 	bne.w	419162 <.LVL596>
  418fde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  418fe0:	2b38      	cmp	r3, #56	; 0x38
  418fe2:	f040 80be 	bne.w	419162 <.LVL596>
    if (strm == Z_NULL) return Z_STREAM_ERROR;
  418fe6:	2800      	cmp	r0, #0
  418fe8:	f000 80bf 	beq.w	41916a <.LVL598>
    strm->msg = Z_NULL;
  418fec:	2300      	movs	r3, #0
  418fee:	6183      	str	r3, [r0, #24]
    if (strm->zalloc == (alloc_func)0) {
  418ff0:	6a03      	ldr	r3, [r0, #32]
  418ff2:	2b00      	cmp	r3, #0
  418ff4:	f000 8095 	beq.w	419122 <.LVL587>
    if (strm->zfree == (free_func)0)
  418ff8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  418ffa:	2b00      	cmp	r3, #0
  418ffc:	f000 8096 	beq.w	41912c <.LVL587+0xa>
    if (level == Z_DEFAULT_COMPRESSION) level = 6;
  419000:	f1b8 3fff 	cmp.w	r8, #4294967295
  419004:	bf08      	it	eq
  419006:	f04f 0806 	moveq.w	r8, #6

0041900a <.LVL570>:
    if (windowBits < 0) { /* suppress zlib wrapper */
  41900a:	2e00      	cmp	r6, #0
  41900c:	f2c0 8091 	blt.w	419132 <.LVL588>
    else if (windowBits > 15) {
  419010:	2e0f      	cmp	r6, #15
  419012:	f340 8092 	ble.w	41913a <.LVL590>

00419016 <.LVL571>:
        windowBits -= 16;
  419016:	3e10      	subs	r6, #16
        wrap = 2;       /* write gzip wrapper instead */
  419018:	f04f 0902 	mov.w	r9, #2

0041901c <.LVL573>:
    if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method != Z_DEFLATED ||
  41901c:	1e7b      	subs	r3, r7, #1
  41901e:	2b08      	cmp	r3, #8
  419020:	f200 80a7 	bhi.w	419172 <.LVL600>
        windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
  419024:	f1a6 0308 	sub.w	r3, r6, #8
    if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method != Z_DEFLATED ||
  419028:	2b07      	cmp	r3, #7
  41902a:	f200 80a6 	bhi.w	41917a <.LVL602>
  41902e:	f1ba 0f08 	cmp.w	sl, #8
  419032:	f040 80a2 	bne.w	41917a <.LVL602>
        strategy < 0 || strategy > Z_FIXED) {
  419036:	f1b8 0f09 	cmp.w	r8, #9
  41903a:	f200 80a2 	bhi.w	419182 <.LVL604>
  41903e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  419040:	2b04      	cmp	r3, #4
  419042:	f200 809e 	bhi.w	419182 <.LVL604>
    if (windowBits == 8) windowBits = 9;  /* until 256-byte window bug fixed */
  419046:	2e08      	cmp	r6, #8
  419048:	bf08      	it	eq
  41904a:	2609      	moveq	r6, #9
    s = (deflate_state *) ZALLOC(strm, 1, sizeof(deflate_state));
  41904c:	6a2b      	ldr	r3, [r5, #32]
  41904e:	f241 62c4 	movw	r2, #5828	; 0x16c4

00419052 <.LVL575>:
  419052:	2101      	movs	r1, #1
  419054:	6aa8      	ldr	r0, [r5, #40]	; 0x28

00419056 <.LVL576>:
  419056:	4798      	blx	r3

00419058 <.LVL577>:
    if (s == Z_NULL) return Z_MEM_ERROR;
  419058:	4604      	mov	r4, r0
  41905a:	2800      	cmp	r0, #0
  41905c:	f000 8095 	beq.w	41918a <.LVL606>
    strm->state = (struct internal_state FAR *)s;
  419060:	61e8      	str	r0, [r5, #28]
    s->strm = strm;
  419062:	6005      	str	r5, [r0, #0]
    s->wrap = wrap;
  419064:	f8c0 9018 	str.w	r9, [r0, #24]
    s->gzhead = Z_NULL;
  419068:	f04f 0b00 	mov.w	fp, #0
  41906c:	f8c0 b01c 	str.w	fp, [r0, #28]
    s->w_bits = windowBits;
  419070:	6306      	str	r6, [r0, #48]	; 0x30
    s->w_size = 1 << s->w_bits;
  419072:	f04f 0901 	mov.w	r9, #1

00419076 <.LVL578>:
  419076:	fa09 f106 	lsl.w	r1, r9, r6
  41907a:	62c1      	str	r1, [r0, #44]	; 0x2c
    s->w_mask = s->w_size - 1;
  41907c:	1e4b      	subs	r3, r1, #1
  41907e:	6343      	str	r3, [r0, #52]	; 0x34
    s->hash_bits = memLevel + 7;
  419080:	1dfb      	adds	r3, r7, #7
  419082:	6503      	str	r3, [r0, #80]	; 0x50
    s->hash_size = 1 << s->hash_bits;
  419084:	fa09 f303 	lsl.w	r3, r9, r3
  419088:	64c3      	str	r3, [r0, #76]	; 0x4c
    s->hash_mask = s->hash_size - 1;
  41908a:	3b01      	subs	r3, #1
  41908c:	6543      	str	r3, [r0, #84]	; 0x54
    s->hash_shift =  ((s->hash_bits+MIN_MATCH-1)/MIN_MATCH);
  41908e:	f107 0309 	add.w	r3, r7, #9
  419092:	4a40      	ldr	r2, [pc, #256]	; (419194 <.LVL608+0x2>)
  419094:	fba2 2303 	umull	r2, r3, r2, r3
  419098:	fa23 f309 	lsr.w	r3, r3, r9
  41909c:	6583      	str	r3, [r0, #88]	; 0x58
    s->window = (Bytef *) ZALLOC(strm, s->w_size, 2*sizeof(Byte));
  41909e:	6a2b      	ldr	r3, [r5, #32]
  4190a0:	2202      	movs	r2, #2
  4190a2:	6aa8      	ldr	r0, [r5, #40]	; 0x28

004190a4 <.LVL579>:
  4190a4:	4798      	blx	r3

004190a6 <.LVL580>:
  4190a6:	63a0      	str	r0, [r4, #56]	; 0x38
    s->prev   = (Posf *)  ZALLOC(strm, s->w_size, sizeof(Pos));
  4190a8:	6a2b      	ldr	r3, [r5, #32]
  4190aa:	2202      	movs	r2, #2
  4190ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  4190ae:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  4190b0:	4798      	blx	r3

004190b2 <.LVL581>:
  4190b2:	6420      	str	r0, [r4, #64]	; 0x40
    s->head   = (Posf *)  ZALLOC(strm, s->hash_size, sizeof(Pos));
  4190b4:	6a2b      	ldr	r3, [r5, #32]
  4190b6:	2202      	movs	r2, #2
  4190b8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  4190ba:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  4190bc:	4798      	blx	r3

004190be <.LVL582>:
  4190be:	6460      	str	r0, [r4, #68]	; 0x44
    s->high_water = 0;      /* nothing written to s->window yet */
  4190c0:	f504 53b6 	add.w	r3, r4, #5824	; 0x16c0
  4190c4:	f8c3 b000 	str.w	fp, [r3]
    s->lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */
  4190c8:	3706      	adds	r7, #6
  4190ca:	fa09 f107 	lsl.w	r1, r9, r7
  4190ce:	f241 669c 	movw	r6, #5788	; 0x169c

004190d2 <.LVL583>:
  4190d2:	51a1      	str	r1, [r4, r6]
    overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
  4190d4:	6a2b      	ldr	r3, [r5, #32]
  4190d6:	2204      	movs	r2, #4
  4190d8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  4190da:	4798      	blx	r3

004190dc <.LVL584>:
    s->pending_buf = (uchf *) overlay;
  4190dc:	60a0      	str	r0, [r4, #8]
    s->pending_buf_size = (ulg)s->lit_bufsize * (sizeof(ush)+2L);
  4190de:	59a3      	ldr	r3, [r4, r6]
  4190e0:	009a      	lsls	r2, r3, #2
  4190e2:	60e2      	str	r2, [r4, #12]
    if (s->window == Z_NULL || s->prev == Z_NULL || s->head == Z_NULL ||
  4190e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4190e6:	b35a      	cbz	r2, 419140 <.LVL591>
  4190e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4190ea:	b34a      	cbz	r2, 419140 <.LVL591>
  4190ec:	6c62      	ldr	r2, [r4, #68]	; 0x44
  4190ee:	b33a      	cbz	r2, 419140 <.LVL591>
  4190f0:	b330      	cbz	r0, 419140 <.LVL591>
    s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  4190f2:	f023 0201 	bic.w	r2, r3, #1
  4190f6:	4402      	add	r2, r0
  4190f8:	f241 61a4 	movw	r1, #5796	; 0x16a4
  4190fc:	5062      	str	r2, [r4, r1]
    s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  4190fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  419102:	4418      	add	r0, r3

00419104 <.LVL585>:
  419104:	f241 6398 	movw	r3, #5784	; 0x1698
  419108:	50e0      	str	r0, [r4, r3]
    s->level = level;
  41910a:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
    s->strategy = strategy;
  41910e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  419110:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    s->method = (Byte)method;
  419114:	f884 a024 	strb.w	sl, [r4, #36]	; 0x24
    return deflateReset(strm);
  419118:	4628      	mov	r0, r5
  41911a:	f006 fab7 	bl	41f68c <.LFE0>

0041911e <.LVL586>:
  41911e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00419122 <.LVL587>:
        strm->zalloc = zcalloc;
  419122:	4b1d      	ldr	r3, [pc, #116]	; (419198 <.LVL608+0x6>)
  419124:	6203      	str	r3, [r0, #32]
        strm->opaque = (voidpf)0;
  419126:	2300      	movs	r3, #0
  419128:	6283      	str	r3, [r0, #40]	; 0x28
  41912a:	e765      	b.n	418ff8 <.LVL569+0x2e>
        strm->zfree = zcfree;
  41912c:	4b1b      	ldr	r3, [pc, #108]	; (41919c <.LVL608+0xa>)
  41912e:	626b      	str	r3, [r5, #36]	; 0x24
  419130:	e766      	b.n	419000 <.LVL569+0x36>

00419132 <.LVL588>:
        windowBits = -windowBits;
  419132:	4276      	negs	r6, r6
        wrap = 0;
  419134:	f04f 0900 	mov.w	r9, #0
  419138:	e770      	b.n	41901c <.LVL573>

0041913a <.LVL590>:
    int wrap = 1;
  41913a:	f04f 0901 	mov.w	r9, #1
  41913e:	e76d      	b.n	41901c <.LVL573>

00419140 <.LVL591>:
        s->status = FINISH_STATE;
  419140:	f240 239a 	movw	r3, #666	; 0x29a
  419144:	6063      	str	r3, [r4, #4]
        strm->msg = (char*)ERR_MSG(Z_MEM_ERROR);
  419146:	4b16      	ldr	r3, [pc, #88]	; (4191a0 <.LVL608+0xe>)
  419148:	699b      	ldr	r3, [r3, #24]
  41914a:	61ab      	str	r3, [r5, #24]
        deflateEnd (strm);
  41914c:	4628      	mov	r0, r5

0041914e <.LVL592>:
  41914e:	f005 f995 	bl	41e47c <.LFE2>

00419152 <.LVL593>:
        return Z_MEM_ERROR;
  419152:	f06f 0003 	mvn.w	r0, #3
  419156:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0041915a <.LVL594>:
        return Z_VERSION_ERROR;
  41915a:	f06f 0005 	mvn.w	r0, #5

0041915e <.LVL595>:
  41915e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00419162 <.LVL596>:
  419162:	f06f 0005 	mvn.w	r0, #5

00419166 <.LVL597>:
  419166:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0041916a <.LVL598>:
    if (strm == Z_NULL) return Z_STREAM_ERROR;
  41916a:	f06f 0001 	mvn.w	r0, #1

0041916e <.LVL599>:
  41916e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00419172 <.LVL600>:
        return Z_STREAM_ERROR;
  419172:	f06f 0001 	mvn.w	r0, #1

00419176 <.LVL601>:
  419176:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0041917a <.LVL602>:
  41917a:	f06f 0001 	mvn.w	r0, #1

0041917e <.LVL603>:
  41917e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00419182 <.LVL604>:
  419182:	f06f 0001 	mvn.w	r0, #1

00419186 <.LVL605>:
  419186:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0041918a <.LVL606>:
    if (s == Z_NULL) return Z_MEM_ERROR;
  41918a:	f06f 0003 	mvn.w	r0, #3

0041918e <.LVL607>:
}
  41918e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00419192 <.LVL608>:
  419192:	bf00      	nop
  419194:	aaaaaaab 	.word	0xaaaaaaab
  419198:	004223dd 	.word	0x004223dd
  41919c:	004224eb 	.word	0x004224eb
  4191a0:	00421ac0 	.word	0x00421ac0

Disassembly of section .text.wc_RsaFunctionSync%91:

004191a4 <wc_RsaFunctionSync>:
{
  4191a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

004191a8 <.LCFI19>:
  4191a8:	f2ad 6d7c 	subw	sp, sp, #1660	; 0x67c

004191ac <.LCFI20>:
  4191ac:	4604      	mov	r4, r0
  4191ae:	460d      	mov	r5, r1
  4191b0:	4616      	mov	r6, r2
  4191b2:	461f      	mov	r7, r3

004191b4 <.LVL89>:
    if (mp_init(&tmp) != MP_OKAY)
  4191b4:	f50d 608a 	add.w	r0, sp, #1104	; 0x450

004191b8 <.LVL90>:
  4191b8:	f009 f878 	bl	4222ac <.LFE39>

004191bc <.LVL91>:
  4191bc:	2800      	cmp	r0, #0
  4191be:	f040 80db 	bne.w	419378 <.LVL141>
    if (mp_read_unsigned_bin(&tmp, (byte*)in, inLen) != MP_OKAY)
  4191c2:	462a      	mov	r2, r5
  4191c4:	4621      	mov	r1, r4
  4191c6:	f50d 608a 	add.w	r0, sp, #1104	; 0x450
  4191ca:	f009 f957 	bl	42247c <.LFE72>

004191ce <.LVL92>:
  4191ce:	2800      	cmp	r0, #0
  4191d0:	f040 80c1 	bne.w	419356 <.LVL134>
    switch(type) {
  4191d4:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
  4191d8:	2b03      	cmp	r3, #3
  4191da:	f200 80c7 	bhi.w	41936c <.LVL137>
  4191de:	e8df f003 	tbb	[pc, r3]
  4191e2:	8d8d      	.short	0x8d8d
  4191e4:	0202      	.short	0x0202

004191e6 <.LBB19>:
        if (mp_init(&tmpa) != MP_OKAY)
  4191e6:	4668      	mov	r0, sp
  4191e8:	f009 f860 	bl	4222ac <.LFE39>

004191ec <.LVL93>:
  4191ec:	b110      	cbz	r0, 4191f4 <.LVL95>
            ERROR_OUT(MP_INIT_E);
  4191ee:	f06f 046d 	mvn.w	r4, #109	; 0x6d

004191f2 <.LVL94>:
  4191f2:	e0b2      	b.n	41935a <.L68>

004191f4 <.LVL95>:
        if (mp_init(&tmpb) != MP_OKAY) {
  4191f4:	a88a      	add	r0, sp, #552	; 0x228
  4191f6:	f009 f859 	bl	4222ac <.LFE39>

004191fa <.LVL96>:
  4191fa:	b128      	cbz	r0, 419208 <.LVL99>
            mp_clear(&tmpa);
  4191fc:	4668      	mov	r0, sp
  4191fe:	f009 f8e7 	bl	4223d0 <.LFE16>

00419202 <.LVL97>:
            ERROR_OUT(MP_INIT_E);
  419202:	f06f 046d 	mvn.w	r4, #109	; 0x6d

00419206 <.LVL98>:
  419206:	e0a8      	b.n	41935a <.L68>

00419208 <.LVL99>:
        r = mp_exptmod(&tmp, &key->dP, &key->p, &tmpa);
  419208:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
  41920c:	f503 68cf 	add.w	r8, r3, #1656	; 0x678
  419210:	466b      	mov	r3, sp
  419212:	4642      	mov	r2, r8
  419214:	f8dd 169c 	ldr.w	r1, [sp, #1692]	; 0x69c
  419218:	f601 21c8 	addw	r1, r1, #2760	; 0xac8
  41921c:	f50d 608a 	add.w	r0, sp, #1104	; 0x450
  419220:	f009 f9ac 	bl	42257c <.LFE78>

00419224 <.LVL100>:
        ret = RET_ERR(ret, r, MP_EXPTMOD_E);
  419224:	1c04      	adds	r4, r0, #0

00419226 <.LVL101>:
  419226:	bf18      	it	ne
  419228:	2401      	movne	r4, #1
  41922a:	4264      	negs	r4, r4
  41922c:	f024 096f 	bic.w	r9, r4, #111	; 0x6f

00419230 <.LVL102>:
        r = mp_exptmod(&tmp, &key->dQ, &key->q, &tmpb);
  419230:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
  419234:	f503 650a 	add.w	r5, r3, #2208	; 0x8a0

00419238 <.LVL103>:
  419238:	ab8a      	add	r3, sp, #552	; 0x228
  41923a:	462a      	mov	r2, r5
  41923c:	f8dd 169c 	ldr.w	r1, [sp, #1692]	; 0x69c
  419240:	f501 614f 	add.w	r1, r1, #3312	; 0xcf0
  419244:	f50d 608a 	add.w	r0, sp, #1104	; 0x450

00419248 <.LVL104>:
  419248:	f009 f998 	bl	42257c <.LFE78>

0041924c <.LVL105>:
        ret = RET_ERR(ret, r, MP_EXPTMOD_E);
  41924c:	1c04      	adds	r4, r0, #0
  41924e:	bf18      	it	ne
  419250:	2401      	movne	r4, #1
  419252:	4264      	negs	r4, r4
  419254:	f024 046f 	bic.w	r4, r4, #111	; 0x6f
  419258:	f1b9 0f00 	cmp.w	r9, #0
  41925c:	bf18      	it	ne
  41925e:	2400      	movne	r4, #0
  419260:	ea44 0409 	orr.w	r4, r4, r9

00419264 <.LVL106>:
        r = mp_sub(&tmpa, &tmpb, &tmp);
  419264:	f50d 628a 	add.w	r2, sp, #1104	; 0x450
  419268:	a98a      	add	r1, sp, #552	; 0x228
  41926a:	4668      	mov	r0, sp

0041926c <.LVL107>:
  41926c:	f009 f901 	bl	422472 <.LFE71>

00419270 <.LVL108>:
        ret = RET_ERR(ret, r, MP_SUB_E);
  419270:	1c03      	adds	r3, r0, #0
  419272:	bf18      	it	ne
  419274:	2301      	movne	r3, #1
  419276:	425b      	negs	r3, r3
  419278:	f023 0371 	bic.w	r3, r3, #113	; 0x71
  41927c:	2c00      	cmp	r4, #0
  41927e:	bf18      	it	ne
  419280:	2300      	movne	r3, #0
  419282:	431c      	orrs	r4, r3
        r = mp_mulmod(&tmp, &key->u, &key->p, &tmp);
  419284:	f50d 638a 	add.w	r3, sp, #1104	; 0x450
  419288:	4642      	mov	r2, r8
  41928a:	f8dd 169c 	ldr.w	r1, [sp, #1692]	; 0x69c
  41928e:	f601 7118 	addw	r1, r1, #3864	; 0xf18
  419292:	4618      	mov	r0, r3

00419294 <.LVL110>:
  419294:	f009 f96a 	bl	42256c <.LFE79>

00419298 <.LVL111>:
        ret = RET_ERR(ret, r, MP_MULMOD_E);
  419298:	1c03      	adds	r3, r0, #0
  41929a:	bf18      	it	ne
  41929c:	2301      	movne	r3, #1
  41929e:	425b      	negs	r3, r3
  4192a0:	f023 0374 	bic.w	r3, r3, #116	; 0x74
  4192a4:	2c00      	cmp	r4, #0
  4192a6:	bf18      	it	ne
  4192a8:	2300      	movne	r3, #0
  4192aa:	431c      	orrs	r4, r3
        r = mp_mul(&tmp, &key->q, &tmp);
  4192ac:	f50d 628a 	add.w	r2, sp, #1104	; 0x450
  4192b0:	4629      	mov	r1, r5
  4192b2:	4610      	mov	r0, r2

004192b4 <.LVL113>:
  4192b4:	f009 f8e7 	bl	422486 <.LFE86>

004192b8 <.LVL114>:
        ret = RET_ERR(ret, r, MP_MUL_E);
  4192b8:	1c03      	adds	r3, r0, #0
  4192ba:	bf18      	it	ne
  4192bc:	2301      	movne	r3, #1
  4192be:	425b      	negs	r3, r3
  4192c0:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  4192c4:	2c00      	cmp	r4, #0
  4192c6:	bf18      	it	ne
  4192c8:	2300      	movne	r3, #0
  4192ca:	431c      	orrs	r4, r3
        r = mp_add(&tmp, &tmpb, &tmp);
  4192cc:	f50d 628a 	add.w	r2, sp, #1104	; 0x450
  4192d0:	a98a      	add	r1, sp, #552	; 0x228
  4192d2:	4610      	mov	r0, r2

004192d4 <.LVL116>:
  4192d4:	f009 f8c8 	bl	422468 <.LFE68>

004192d8 <.LVL117>:
        ret = RET_ERR(ret, r, MP_ADD_E);
  4192d8:	1c03      	adds	r3, r0, #0
  4192da:	bf18      	it	ne
  4192dc:	2301      	movne	r3, #1
  4192de:	425b      	negs	r3, r3
  4192e0:	f023 0372 	bic.w	r3, r3, #114	; 0x72
  4192e4:	2c00      	cmp	r4, #0
  4192e6:	bf18      	it	ne
  4192e8:	2300      	movne	r3, #0
  4192ea:	431c      	orrs	r4, r3
        mp_clear(&tmpa);
  4192ec:	4668      	mov	r0, sp

004192ee <.LVL119>:
  4192ee:	f009 f86f 	bl	4223d0 <.LFE16>

004192f2 <.LVL120>:
        mp_clear(&tmpb);
  4192f2:	a88a      	add	r0, sp, #552	; 0x228
  4192f4:	f009 f86c 	bl	4223d0 <.LFE16>

004192f8 <.LVL121>:
        if (ret != 0) {
  4192f8:	bb7c      	cbnz	r4, 41935a <.L68>
  4192fa:	e009      	b.n	419310 <.LVL124>

004192fc <.LBE19>:
        if (mp_exptmod(&tmp, &key->e, &key->n, &tmp) != MP_OKAY)
  4192fc:	f50d 638a 	add.w	r3, sp, #1104	; 0x450
  419300:	f8dd 269c 	ldr.w	r2, [sp, #1692]	; 0x69c
  419304:	f502 710a 	add.w	r1, r2, #552	; 0x228
  419308:	4618      	mov	r0, r3
  41930a:	f009 f937 	bl	42257c <.LFE78>

0041930e <.LVL123>:
  41930e:	bb80      	cbnz	r0, 419372 <.LCFI22>

00419310 <.LVL124>:
    keyLen = wc_RsaEncryptSize(key);
  419310:	f8dd 069c 	ldr.w	r0, [sp, #1692]	; 0x69c
  419314:	f008 ffc2 	bl	42229c <wc_RsaEncryptSize>

00419318 <.LVL125>:
  419318:	4604      	mov	r4, r0

0041931a <.LVL126>:
    if (keyLen > *outLen) {
  41931a:	683b      	ldr	r3, [r7, #0]
  41931c:	4298      	cmp	r0, r3
  41931e:	d902      	bls.n	419326 <.LVL126+0xc>
        ERROR_OUT(RSA_BUFFER_E);
  419320:	f06f 0482 	mvn.w	r4, #130	; 0x82
  419324:	e019      	b.n	41935a <.L68>
    len = mp_unsigned_bin_size(&tmp);
  419326:	f50d 608a 	add.w	r0, sp, #1104	; 0x450

0041932a <.LVL127>:
  41932a:	f009 f917 	bl	42255c <.LFE82>

0041932e <.LVL128>:
    while (len < keyLen) {
  41932e:	4284      	cmp	r4, r0
  419330:	d906      	bls.n	419340 <.LVL131>
  419332:	1a23      	subs	r3, r4, r0
  419334:	4433      	add	r3, r6
        *out++ = 0x00;
  419336:	2200      	movs	r2, #0
  419338:	f806 2b01 	strb.w	r2, [r6], #1
    while (len < keyLen) {
  41933c:	429e      	cmp	r6, r3
  41933e:	d1fb      	bne.n	419338 <.LVL128+0xa>

00419340 <.LVL131>:
    *outLen = keyLen;
  419340:	603c      	str	r4, [r7, #0]
    if (mp_to_unsigned_bin(&tmp, out) != MP_OKAY)
  419342:	4631      	mov	r1, r6
  419344:	f50d 608a 	add.w	r0, sp, #1104	; 0x450
  419348:	f009 f8a2 	bl	422490 <.LFE73>

0041934c <.LVL132>:
  41934c:	1e04      	subs	r4, r0, #0

0041934e <.LVL133>:
        ERROR_OUT(MP_TO_E);
  41934e:	bf18      	it	ne
  419350:	f06f 0470 	mvnne.w	r4, #112	; 0x70
  419354:	e001      	b.n	41935a <.L68>

00419356 <.LVL134>:
        ERROR_OUT(MP_READ_E);
  419356:	f06f 046e 	mvn.w	r4, #110	; 0x6e

0041935a <.L68>:
    mp_clear(&tmp);
  41935a:	f50d 608a 	add.w	r0, sp, #1104	; 0x450
  41935e:	f009 f837 	bl	4223d0 <.LFE16>

00419362 <.LVL136>:
}
  419362:	4620      	mov	r0, r4
  419364:	f20d 6d7c 	addw	sp, sp, #1660	; 0x67c

00419368 <.LCFI21>:
  419368:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0041936c <.LVL137>:
        ERROR_OUT(RSA_WRONG_TYPE_E);
  41936c:	f06f 0481 	mvn.w	r4, #129	; 0x81

00419370 <.LVL138>:
  419370:	e7f3      	b.n	41935a <.L68>

00419372 <.LCFI22>:
            ERROR_OUT(MP_EXPTMOD_E);
  419372:	f06f 046f 	mvn.w	r4, #111	; 0x6f

00419376 <.LVL140>:
  419376:	e7f0      	b.n	41935a <.L68>

00419378 <.LVL141>:
        return MP_INIT_E;
  419378:	f06f 046d 	mvn.w	r4, #109	; 0x6d

0041937c <.LVL142>:
  41937c:	e7f1      	b.n	419362 <.LVL136>

Disassembly of section .text._free_r%92:

00419380 <_free_r>:
  419380:	2900      	cmp	r1, #0
  419382:	d044      	beq.n	41940e <.LVL43>
  419384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

00419388 <.LCFI1>:
  419388:	460d      	mov	r5, r1
  41938a:	4680      	mov	r8, r0
  41938c:	f004 ff36 	bl	41e1fc <.LFE173>

00419390 <.LVL24>:
  419390:	f855 7c04 	ldr.w	r7, [r5, #-4]
  419394:	4969      	ldr	r1, [pc, #420]	; (41953c <.LVL82+0xa>)
  419396:	f027 0301 	bic.w	r3, r7, #1
  41939a:	f1a5 0408 	sub.w	r4, r5, #8

0041939e <.LVL25>:
  41939e:	18e2      	adds	r2, r4, r3

004193a0 <.LVL26>:
  4193a0:	688e      	ldr	r6, [r1, #8]
  4193a2:	6850      	ldr	r0, [r2, #4]
  4193a4:	42b2      	cmp	r2, r6
  4193a6:	f020 0003 	bic.w	r0, r0, #3

004193aa <.LVL27>:
  4193aa:	d05e      	beq.n	41946a <.LVL56>
  4193ac:	07fe      	lsls	r6, r7, #31
  4193ae:	6050      	str	r0, [r2, #4]

004193b0 <.LVL28>:
  4193b0:	d40b      	bmi.n	4193ca <.LVL34>
  4193b2:	f855 7c08 	ldr.w	r7, [r5, #-8]

004193b6 <.LVL29>:
  4193b6:	1be4      	subs	r4, r4, r7
  4193b8:	f101 0e08 	add.w	lr, r1, #8
  4193bc:	68a5      	ldr	r5, [r4, #8]

004193be <.LVL31>:
  4193be:	4575      	cmp	r5, lr
  4193c0:	443b      	add	r3, r7
  4193c2:	d06d      	beq.n	4194a0 <.LVL70>
  4193c4:	68e7      	ldr	r7, [r4, #12]

004193c6 <.LVL33>:
  4193c6:	60ef      	str	r7, [r5, #12]
  4193c8:	60bd      	str	r5, [r7, #8]

004193ca <.LVL34>:
  4193ca:	1815      	adds	r5, r2, r0
  4193cc:	686d      	ldr	r5, [r5, #4]
  4193ce:	07ed      	lsls	r5, r5, #31
  4193d0:	d53e      	bpl.n	419450 <.LCFI5>
  4193d2:	f043 0201 	orr.w	r2, r3, #1

004193d6 <.LVL35>:
  4193d6:	6062      	str	r2, [r4, #4]
  4193d8:	50e3      	str	r3, [r4, r3]

004193da <.LVL36>:
  4193da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4193de:	d217      	bcs.n	419410 <.LCFI3>
  4193e0:	08db      	lsrs	r3, r3, #3

004193e2 <.LVL37>:
  4193e2:	1c58      	adds	r0, r3, #1
  4193e4:	109a      	asrs	r2, r3, #2
  4193e6:	684d      	ldr	r5, [r1, #4]
  4193e8:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4193ec:	60a7      	str	r7, [r4, #8]
  4193ee:	2301      	movs	r3, #1

004193f0 <.LVL38>:
  4193f0:	4093      	lsls	r3, r2
  4193f2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3

004193f6 <.LVL39>:
  4193f6:	432b      	orrs	r3, r5
  4193f8:	3a08      	subs	r2, #8

004193fa <.LVL40>:
  4193fa:	60e2      	str	r2, [r4, #12]
  4193fc:	604b      	str	r3, [r1, #4]
  4193fe:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  419402:	60fc      	str	r4, [r7, #12]

00419404 <.LVL41>:
  419404:	4640      	mov	r0, r8
  419406:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

0041940a <.LCFI2>:
  41940a:	f009 b8d7 	b.w	4225bc <.LFE144>

0041940e <.LVL43>:
  41940e:	4770      	bx	lr

00419410 <.LCFI3>:
  419410:	0a5a      	lsrs	r2, r3, #9
  419412:	2a04      	cmp	r2, #4
  419414:	d852      	bhi.n	4194bc <.LVL74>
  419416:	099a      	lsrs	r2, r3, #6
  419418:	f102 0739 	add.w	r7, r2, #57	; 0x39
  41941c:	00ff      	lsls	r7, r7, #3
  41941e:	f102 0538 	add.w	r5, r2, #56	; 0x38

00419422 <.LVL45>:
  419422:	19c8      	adds	r0, r1, r7
  419424:	59ca      	ldr	r2, [r1, r7]
  419426:	3808      	subs	r0, #8

00419428 <.LVL46>:
  419428:	4290      	cmp	r0, r2
  41942a:	d04f      	beq.n	4194cc <.LVL75>
  41942c:	6851      	ldr	r1, [r2, #4]
  41942e:	f021 0103 	bic.w	r1, r1, #3
  419432:	428b      	cmp	r3, r1
  419434:	d232      	bcs.n	41949c <.LVL68>
  419436:	6892      	ldr	r2, [r2, #8]
  419438:	4290      	cmp	r0, r2
  41943a:	d1f7      	bne.n	41942c <.LVL46+0x4>

0041943c <.LVL48>:
  41943c:	68c3      	ldr	r3, [r0, #12]

0041943e <.LVL49>:
  41943e:	60a0      	str	r0, [r4, #8]
  419440:	60e3      	str	r3, [r4, #12]
  419442:	609c      	str	r4, [r3, #8]
  419444:	60c4      	str	r4, [r0, #12]
  419446:	4640      	mov	r0, r8

00419448 <.LVL50>:
  419448:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

0041944c <.LCFI4>:
  41944c:	f009 b8b6 	b.w	4225bc <.LFE144>

00419450 <.LCFI5>:
  419450:	6895      	ldr	r5, [r2, #8]
  419452:	4f3b      	ldr	r7, [pc, #236]	; (419540 <.LVL82+0xe>)
  419454:	42bd      	cmp	r5, r7
  419456:	4403      	add	r3, r0
  419458:	d040      	beq.n	4194dc <.LVL79>
  41945a:	68d0      	ldr	r0, [r2, #12]

0041945c <.LVL54>:
  41945c:	60e8      	str	r0, [r5, #12]
  41945e:	f043 0201 	orr.w	r2, r3, #1

00419462 <.LVL55>:
  419462:	6085      	str	r5, [r0, #8]
  419464:	6062      	str	r2, [r4, #4]
  419466:	50e3      	str	r3, [r4, r3]
  419468:	e7b7      	b.n	4193da <.LVL36>

0041946a <.LVL56>:
  41946a:	07ff      	lsls	r7, r7, #31

0041946c <.LVL57>:
  41946c:	4403      	add	r3, r0
  41946e:	d407      	bmi.n	419480 <.LVL64>
  419470:	f855 2c08 	ldr.w	r2, [r5, #-8]

00419474 <.LVL59>:
  419474:	1aa4      	subs	r4, r4, r2

00419476 <.LVL60>:
  419476:	4413      	add	r3, r2
  419478:	68a0      	ldr	r0, [r4, #8]

0041947a <.LVL62>:
  41947a:	68e2      	ldr	r2, [r4, #12]

0041947c <.LVL63>:
  41947c:	60c2      	str	r2, [r0, #12]
  41947e:	6090      	str	r0, [r2, #8]

00419480 <.LVL64>:
  419480:	4a30      	ldr	r2, [pc, #192]	; (419544 <.LVL82+0x12>)
  419482:	6812      	ldr	r2, [r2, #0]
  419484:	f043 0001 	orr.w	r0, r3, #1
  419488:	4293      	cmp	r3, r2
  41948a:	6060      	str	r0, [r4, #4]

0041948c <.LVL65>:
  41948c:	608c      	str	r4, [r1, #8]
  41948e:	d3b9      	bcc.n	419404 <.LVL41>
  419490:	4b2d      	ldr	r3, [pc, #180]	; (419548 <.LVL82+0x16>)

00419492 <.LVL66>:
  419492:	4640      	mov	r0, r8
  419494:	6819      	ldr	r1, [r3, #0]
  419496:	f005 f9bb 	bl	41e810 <.LFE0>

0041949a <.LVL67>:
  41949a:	e7b3      	b.n	419404 <.LVL41>

0041949c <.LVL68>:
  41949c:	4610      	mov	r0, r2

0041949e <.LVL69>:
  41949e:	e7cd      	b.n	41943c <.LVL48>

004194a0 <.LVL70>:
  4194a0:	1811      	adds	r1, r2, r0
  4194a2:	6849      	ldr	r1, [r1, #4]
  4194a4:	07c9      	lsls	r1, r1, #31
  4194a6:	d444      	bmi.n	419532 <.LVL82>
  4194a8:	6891      	ldr	r1, [r2, #8]
  4194aa:	68d2      	ldr	r2, [r2, #12]

004194ac <.LVL71>:
  4194ac:	60ca      	str	r2, [r1, #12]
  4194ae:	4403      	add	r3, r0

004194b0 <.LVL72>:
  4194b0:	f043 0001 	orr.w	r0, r3, #1

004194b4 <.LVL73>:
  4194b4:	6091      	str	r1, [r2, #8]
  4194b6:	6060      	str	r0, [r4, #4]
  4194b8:	50e3      	str	r3, [r4, r3]
  4194ba:	e7a3      	b.n	419404 <.LVL41>

004194bc <.LVL74>:
  4194bc:	2a14      	cmp	r2, #20
  4194be:	d816      	bhi.n	4194ee <.LVL81>
  4194c0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4194c4:	00ff      	lsls	r7, r7, #3
  4194c6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4194ca:	e7aa      	b.n	419422 <.LVL45>

004194cc <.LVL75>:
  4194cc:	10aa      	asrs	r2, r5, #2

004194ce <.LVL76>:
  4194ce:	2301      	movs	r3, #1

004194d0 <.LVL77>:
  4194d0:	684d      	ldr	r5, [r1, #4]

004194d2 <.LVL78>:
  4194d2:	4093      	lsls	r3, r2
  4194d4:	432b      	orrs	r3, r5
  4194d6:	604b      	str	r3, [r1, #4]
  4194d8:	4603      	mov	r3, r0
  4194da:	e7b0      	b.n	41943e <.LVL49>

004194dc <.LVL79>:
  4194dc:	f043 0201 	orr.w	r2, r3, #1

004194e0 <.LVL80>:
  4194e0:	614c      	str	r4, [r1, #20]
  4194e2:	610c      	str	r4, [r1, #16]
  4194e4:	60e5      	str	r5, [r4, #12]
  4194e6:	60a5      	str	r5, [r4, #8]
  4194e8:	6062      	str	r2, [r4, #4]
  4194ea:	50e3      	str	r3, [r4, r3]
  4194ec:	e78a      	b.n	419404 <.LVL41>

004194ee <.LVL81>:
  4194ee:	2a54      	cmp	r2, #84	; 0x54
  4194f0:	d806      	bhi.n	419500 <.LVL81+0x12>
  4194f2:	0b1a      	lsrs	r2, r3, #12
  4194f4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4194f8:	00ff      	lsls	r7, r7, #3
  4194fa:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4194fe:	e790      	b.n	419422 <.LVL45>
  419500:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  419504:	d806      	bhi.n	419514 <.LVL81+0x26>
  419506:	0bda      	lsrs	r2, r3, #15
  419508:	f102 0778 	add.w	r7, r2, #120	; 0x78
  41950c:	00ff      	lsls	r7, r7, #3
  41950e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  419512:	e786      	b.n	419422 <.LVL45>
  419514:	f240 5054 	movw	r0, #1364	; 0x554
  419518:	4282      	cmp	r2, r0
  41951a:	d806      	bhi.n	41952a <.LVL81+0x3c>
  41951c:	0c9a      	lsrs	r2, r3, #18
  41951e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  419522:	00ff      	lsls	r7, r7, #3
  419524:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  419528:	e77b      	b.n	419422 <.LVL45>
  41952a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  41952e:	257e      	movs	r5, #126	; 0x7e
  419530:	e777      	b.n	419422 <.LVL45>

00419532 <.LVL82>:
  419532:	f043 0101 	orr.w	r1, r3, #1
  419536:	6061      	str	r1, [r4, #4]
  419538:	6013      	str	r3, [r2, #0]
  41953a:	e763      	b.n	419404 <.LVL41>
  41953c:	2040cc80 	.word	0x2040cc80
  419540:	2040cc88 	.word	0x2040cc88
  419544:	2040d77c 	.word	0x2040d77c
  419548:	2040d774 	.word	0x2040d774

Disassembly of section .text.longest_match%93:

0041954c <longest_match>:
{
  41954c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00419550 <.LCFI2>:
  419550:	b085      	sub	sp, #20

00419552 <.LCFI3>:
    unsigned chain_length = s->max_chain_length;/* max hash chain length */
  419552:	6fc3      	ldr	r3, [r0, #124]	; 0x7c

00419554 <.LVL2>:
    register Bytef *scan = s->window + s->strstart; /* current string */
  419554:	6b85      	ldr	r5, [r0, #56]	; 0x38
  419556:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  419558:	18ac      	adds	r4, r5, r2
  41955a:	9400      	str	r4, [sp, #0]

0041955c <.LVL3>:
    int best_len = s->prev_length;              /* best match length so far */
  41955c:	f8d0 8078 	ldr.w	r8, [r0, #120]	; 0x78
  419560:	4644      	mov	r4, r8

00419562 <.LVL4>:
    int nice_match = s->nice_match;             /* stop if match long enough */
  419562:	f8d0 6090 	ldr.w	r6, [r0, #144]	; 0x90
  419566:	9601      	str	r6, [sp, #4]

00419568 <.LVL5>:
    IPos limit = s->strstart > (IPos)MAX_DIST(s) ?
  419568:	6ac6      	ldr	r6, [r0, #44]	; 0x2c

0041956a <.LVL6>:
  41956a:	f5a6 7783 	sub.w	r7, r6, #262	; 0x106
        s->strstart - (IPos)MAX_DIST(s) : NIL;
  41956e:	42ba      	cmp	r2, r7
  419570:	d920      	bls.n	4195b4 <.LVL15>
  419572:	f502 7783 	add.w	r7, r2, #262	; 0x106
  419576:	eba7 0a06 	sub.w	sl, r7, r6

0041957a <.LVL7>:
    Posf *prev = s->prev;
  41957a:	f8d0 e040 	ldr.w	lr, [r0, #64]	; 0x40

0041957e <.LVL8>:
    uInt wmask = s->w_mask;
  41957e:	f8d0 c034 	ldr.w	ip, [r0, #52]	; 0x34

00419582 <.LVL9>:
    register Bytef *strend = s->window + s->strstart + MAX_MATCH;
  419582:	f502 7281 	add.w	r2, r2, #258	; 0x102
  419586:	18aa      	adds	r2, r5, r2
  419588:	9202      	str	r2, [sp, #8]

0041958a <.LVL10>:
    register Byte scan_end1  = scan[best_len-1];
  41958a:	9f00      	ldr	r7, [sp, #0]
  41958c:	463a      	mov	r2, r7

0041958e <.LVL11>:
  41958e:	4442      	add	r2, r8
  419590:	f812 9c01 	ldrb.w	r9, [r2, #-1]

00419594 <.LVL12>:
    register Byte scan_end   = scan[best_len];
  419594:	f817 7008 	ldrb.w	r7, [r7, r8]

00419598 <.LVL13>:
    if (s->prev_length >= s->good_match) {
  419598:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
  41959c:	4590      	cmp	r8, r2
        chain_length >>= 2;
  41959e:	bf28      	it	cs
  4195a0:	089b      	lsrcs	r3, r3, #2
    if ((uInt)nice_match > s->lookahead) nice_match = s->lookahead;
  4195a2:	6f46      	ldr	r6, [r0, #116]	; 0x74
  4195a4:	9a01      	ldr	r2, [sp, #4]
  4195a6:	42b2      	cmp	r2, r6
  4195a8:	bf28      	it	cs
  4195aa:	4632      	movcs	r2, r6
  4195ac:	9201      	str	r2, [sp, #4]
  4195ae:	4656      	mov	r6, sl
  4195b0:	4683      	mov	fp, r0
  4195b2:	e022      	b.n	4195fa <.LVL27+0x2>

004195b4 <.LVL15>:
        s->strstart - (IPos)MAX_DIST(s) : NIL;
  4195b4:	f04f 0a00 	mov.w	sl, #0
  4195b8:	e7df      	b.n	41957a <.LVL7>

004195ba <.LVL16>:
  4195ba:	9b03      	ldr	r3, [sp, #12]
  4195bc:	4683      	mov	fp, r0
                 scan < strend);
  4195be:	f108 0801 	add.w	r8, r8, #1

004195c2 <.LVL17>:
        len = MAX_MATCH - (int)(strend - scan);
  4195c2:	9a02      	ldr	r2, [sp, #8]
  4195c4:	eba2 0208 	sub.w	r2, r2, r8
  4195c8:	f5c2 7281 	rsb	r2, r2, #258	; 0x102

004195cc <.LVL18>:
        if (len > best_len) {
  4195cc:	4294      	cmp	r4, r2
  4195ce:	da0b      	bge.n	4195e8 <.LVL23>
            s->match_start = cur_match;
  4195d0:	f8cb 1070 	str.w	r1, [fp, #112]	; 0x70

004195d4 <.LVL19>:
            if (len >= nice_match) break;
  4195d4:	9801      	ldr	r0, [sp, #4]

004195d6 <.LVL20>:
  4195d6:	4290      	cmp	r0, r2
  4195d8:	f340 808b 	ble.w	4196f2 <.LVL56>
            scan_end1  = scan[best_len-1];
  4195dc:	9800      	ldr	r0, [sp, #0]
  4195de:	1884      	adds	r4, r0, r2
  4195e0:	f814 9c01 	ldrb.w	r9, [r4, #-1]
            scan_end   = scan[best_len];
  4195e4:	5c87      	ldrb	r7, [r0, r2]
        len = MAX_MATCH - (int)(strend - scan);
  4195e6:	4614      	mov	r4, r2

004195e8 <.LVL23>:
    } while ((cur_match = prev[cur_match & wmask]) > limit
  4195e8:	ea01 010c 	and.w	r1, r1, ip

004195ec <.LVL24>:
  4195ec:	f83e 1011 	ldrh.w	r1, [lr, r1, lsl #1]

004195f0 <.LVL25>:
             && --chain_length != 0);
  4195f0:	428e      	cmp	r6, r1
  4195f2:	f080 8081 	bcs.w	4196f8 <.LVL57>

004195f6 <.LVL26>:
  4195f6:	3b01      	subs	r3, #1

004195f8 <.LVL27>:
  4195f8:	d079      	beq.n	4196ee <.LVL55>
        match = s->window + cur_match;
  4195fa:	186a      	adds	r2, r5, r1

004195fc <.LVL28>:
        if (match[best_len]   != scan_end  ||
  4195fc:	f812 8004 	ldrb.w	r8, [r2, r4]
  419600:	45b8      	cmp	r8, r7
  419602:	d1f1      	bne.n	4195e8 <.LVL23>
            match[best_len-1] != scan_end1 ||
  419604:	eb02 0804 	add.w	r8, r2, r4
        if (match[best_len]   != scan_end  ||
  419608:	f818 8c01 	ldrb.w	r8, [r8, #-1]
  41960c:	45c8      	cmp	r8, r9
  41960e:	d1eb      	bne.n	4195e8 <.LVL23>
            match[best_len-1] != scan_end1 ||
  419610:	f892 a000 	ldrb.w	sl, [r2]
  419614:	9800      	ldr	r0, [sp, #0]
  419616:	f890 8000 	ldrb.w	r8, [r0]
  41961a:	45c2      	cmp	sl, r8
  41961c:	d1e4      	bne.n	4195e8 <.LVL23>

0041961e <.LVL29>:
            *match            != *scan     ||
  41961e:	f892 a001 	ldrb.w	sl, [r2, #1]
  419622:	f890 8001 	ldrb.w	r8, [r0, #1]
  419626:	45c2      	cmp	sl, r8
  419628:	d1de      	bne.n	4195e8 <.LVL23>
        scan += 2, match++;
  41962a:	f100 0802 	add.w	r8, r0, #2

0041962e <.LVL30>:
  41962e:	3202      	adds	r2, #2

00419630 <.LVL31>:
  419630:	9303      	str	r3, [sp, #12]
  419632:	9b02      	ldr	r3, [sp, #8]

00419634 <.LVL32>:
  419634:	4658      	mov	r0, fp

00419636 <.LVL33>:
                 scan < strend);
  419636:	f898 b001 	ldrb.w	fp, [r8, #1]
  41963a:	f892 a001 	ldrb.w	sl, [r2, #1]
  41963e:	45d3      	cmp	fp, sl
  419640:	d1bb      	bne.n	4195ba <.LVL16>

00419642 <.LVL34>:
        } while (*++scan == *++match && *++scan == *++match &&
  419642:	f898 b002 	ldrb.w	fp, [r8, #2]
  419646:	f892 a002 	ldrb.w	sl, [r2, #2]
  41964a:	45d3      	cmp	fp, sl
  41964c:	d131      	bne.n	4196b2 <.LVL43>

0041964e <.LVL35>:
  41964e:	f898 b003 	ldrb.w	fp, [r8, #3]
  419652:	f892 a003 	ldrb.w	sl, [r2, #3]
  419656:	45d3      	cmp	fp, sl
  419658:	d130      	bne.n	4196bc <.LVL45>

0041965a <.LVL36>:
                 *++scan == *++match && *++scan == *++match &&
  41965a:	f898 b004 	ldrb.w	fp, [r8, #4]
  41965e:	f892 a004 	ldrb.w	sl, [r2, #4]
  419662:	45d3      	cmp	fp, sl
  419664:	d12f      	bne.n	4196c6 <.LVL47>

00419666 <.LVL37>:
  419666:	f898 b005 	ldrb.w	fp, [r8, #5]
  41966a:	f892 a005 	ldrb.w	sl, [r2, #5]
  41966e:	45d3      	cmp	fp, sl
  419670:	d12e      	bne.n	4196d0 <.LVL49>

00419672 <.LVL38>:
                 *++scan == *++match && *++scan == *++match &&
  419672:	f898 b006 	ldrb.w	fp, [r8, #6]
  419676:	f892 a006 	ldrb.w	sl, [r2, #6]
  41967a:	45d3      	cmp	fp, sl
  41967c:	d12d      	bne.n	4196da <.LVL51>

0041967e <.LVL39>:
  41967e:	f898 b007 	ldrb.w	fp, [r8, #7]
  419682:	f892 a007 	ldrb.w	sl, [r2, #7]
  419686:	45d3      	cmp	fp, sl
  419688:	d12c      	bne.n	4196e4 <.LVL53>

0041968a <.LVL40>:
                 *++scan == *++match && *++scan == *++match &&
  41968a:	f818 af08 	ldrb.w	sl, [r8, #8]!

0041968e <.LVL41>:
  41968e:	f812 bf08 	ldrb.w	fp, [r2, #8]!

00419692 <.LVL42>:
  419692:	45da      	cmp	sl, fp
  419694:	bf14      	ite	ne
  419696:	f04f 0a00 	movne.w	sl, #0
  41969a:	f04f 0a01 	moveq.w	sl, #1
  41969e:	4543      	cmp	r3, r8
  4196a0:	bf98      	it	ls
  4196a2:	f04f 0a00 	movls.w	sl, #0
  4196a6:	f1ba 0f00 	cmp.w	sl, #0
  4196aa:	d1c4      	bne.n	419636 <.LVL33>
  4196ac:	9b03      	ldr	r3, [sp, #12]
  4196ae:	4683      	mov	fp, r0
  4196b0:	e787      	b.n	4195c2 <.LVL17>

004196b2 <.LVL43>:
  4196b2:	9b03      	ldr	r3, [sp, #12]
  4196b4:	4683      	mov	fp, r0
        } while (*++scan == *++match && *++scan == *++match &&
  4196b6:	f108 0802 	add.w	r8, r8, #2

004196ba <.LVL44>:
  4196ba:	e782      	b.n	4195c2 <.LVL17>

004196bc <.LVL45>:
  4196bc:	9b03      	ldr	r3, [sp, #12]
  4196be:	4683      	mov	fp, r0
  4196c0:	f108 0803 	add.w	r8, r8, #3

004196c4 <.LVL46>:
  4196c4:	e77d      	b.n	4195c2 <.LVL17>

004196c6 <.LVL47>:
  4196c6:	9b03      	ldr	r3, [sp, #12]
  4196c8:	4683      	mov	fp, r0
                 *++scan == *++match && *++scan == *++match &&
  4196ca:	f108 0804 	add.w	r8, r8, #4

004196ce <.LVL48>:
  4196ce:	e778      	b.n	4195c2 <.LVL17>

004196d0 <.LVL49>:
  4196d0:	9b03      	ldr	r3, [sp, #12]
  4196d2:	4683      	mov	fp, r0
  4196d4:	f108 0805 	add.w	r8, r8, #5

004196d8 <.LVL50>:
  4196d8:	e773      	b.n	4195c2 <.LVL17>

004196da <.LVL51>:
  4196da:	9b03      	ldr	r3, [sp, #12]
  4196dc:	4683      	mov	fp, r0
                 *++scan == *++match && *++scan == *++match &&
  4196de:	f108 0806 	add.w	r8, r8, #6

004196e2 <.LVL52>:
  4196e2:	e76e      	b.n	4195c2 <.LVL17>

004196e4 <.LVL53>:
  4196e4:	9b03      	ldr	r3, [sp, #12]
  4196e6:	4683      	mov	fp, r0
  4196e8:	f108 0807 	add.w	r8, r8, #7

004196ec <.LVL54>:
  4196ec:	e769      	b.n	4195c2 <.LVL17>

004196ee <.LVL55>:
  4196ee:	4658      	mov	r0, fp
  4196f0:	e003      	b.n	4196fa <.LVL58>

004196f2 <.LVL56>:
  4196f2:	4658      	mov	r0, fp
        len = MAX_MATCH - (int)(strend - scan);
  4196f4:	4614      	mov	r4, r2
  4196f6:	e000      	b.n	4196fa <.LVL58>

004196f8 <.LVL57>:
  4196f8:	4658      	mov	r0, fp

004196fa <.LVL58>:
  4196fa:	6f40      	ldr	r0, [r0, #116]	; 0x74

004196fc <.LVL59>:
}
  4196fc:	42a0      	cmp	r0, r4
  4196fe:	bf28      	it	cs
  419700:	4620      	movcs	r0, r4
  419702:	b005      	add	sp, #20

00419704 <.LCFI4>:
  419704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section .text.wc_ecc_make_key_ex%94:

00419708 <wc_ecc_make_key_ex>:
{
  419708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

0041970c <.LCFI67>:
  41970c:	f5ad 6d35 	sub.w	sp, sp, #2896	; 0xb50

00419710 <.LCFI68>:
  419710:	4680      	mov	r8, r0
  419712:	460e      	mov	r6, r1
  419714:	4614      	mov	r4, r2
  419716:	461f      	mov	r7, r3

00419718 <.LVL863>:
    DECLARE_CURVE_SPECS(ECC_CURVE_FIELD_COUNT)
  419718:	ad18      	add	r5, sp, #96	; 0x60
  41971a:	9517      	str	r5, [sp, #92]	; 0x5c
  41971c:	2228      	movs	r2, #40	; 0x28

0041971e <.LVL864>:
  41971e:	2100      	movs	r1, #0

00419720 <.LVL865>:
  419720:	4628      	mov	r0, r5

00419722 <.LVL866>:
  419722:	f004 fef9 	bl	41e518 <.LFE14>

00419726 <.LVL867>:
  419726:	ab22      	add	r3, sp, #136	; 0x88
  419728:	61ab      	str	r3, [r5, #24]
  41972a:	2305      	movs	r3, #5
  41972c:	61eb      	str	r3, [r5, #28]
    if (key == NULL || rng == NULL) {
  41972e:	2c00      	cmp	r4, #0
  419730:	f000 80ac 	beq.w	41988c <.LVL923>
  419734:	f1b8 0f00 	cmp.w	r8, #0
  419738:	f000 80a8 	beq.w	41988c <.LVL923>

0041973c <.LBB45>:
    key->state = ECC_STATE_NONE;
  41973c:	2300      	movs	r3, #0
  41973e:	60a3      	str	r3, [r4, #8]

00419740 <.LBE45>:
    err = wc_ecc_set_curve(key, keysize, curve_id);
  419740:	463a      	mov	r2, r7
  419742:	4631      	mov	r1, r6
  419744:	4620      	mov	r0, r4
  419746:	f006 fa29 	bl	41fb9c <.LFE19>

0041974a <.LVL870>:
    if (err != 0) {
  41974a:	4605      	mov	r5, r0
  41974c:	b120      	cbz	r0, 419758 <.LCFI70>

0041974e <.LVL871>:
}
  41974e:	4628      	mov	r0, r5
  419750:	f50d 6d35 	add.w	sp, sp, #2896	; 0xb50

00419754 <.LCFI69>:
  419754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00419758 <.LCFI70>:
    err = mp_init(&key->k);
  419758:	f504 67d2 	add.w	r7, r4, #1680	; 0x690

0041975c <.LVL873>:
  41975c:	4638      	mov	r0, r7

0041975e <.LVL874>:
  41975e:	f008 fda5 	bl	4222ac <.LFE39>

00419762 <.LVL875>:
    if (err == MP_OKAY) {
  419762:	4605      	mov	r5, r0
  419764:	b168      	cbz	r0, 419782 <.LBE47>
    ecc_point*     base = NULL;
  419766:	2600      	movs	r6, #0

00419768 <.LVL876>:
    if (err == MP_OKAY)
  419768:	b36d      	cbz	r5, 4197c6 <.LVL891+0x2>
    if (err == MP_OKAY)
  41976a:	2d00      	cmp	r5, #0
  41976c:	d17e      	bne.n	41986c <.LBE55>
        key->type = ECC_PRIVATEKEY;
  41976e:	2302      	movs	r3, #2
  419770:	6023      	str	r3, [r4, #0]

00419772 <.LVL877>:
    wc_ecc_del_point_h(base, key->heap);
  419772:	6961      	ldr	r1, [r4, #20]
  419774:	4630      	mov	r0, r6
  419776:	f002 ff71 	bl	41c65c <.LFE22>

0041977a <.LBB47>:
    _wc_ecc_curve_free(curve);
  41977a:	9817      	ldr	r0, [sp, #92]	; 0x5c
  41977c:	f006 fb22 	bl	41fdc4 <.LFE46>

00419780 <.LVL879>:
  419780:	e7e5      	b.n	41974e <.LVL871>

00419782 <.LBE47>:
        err = mp_init_multi(key->pubkey.x, key->pubkey.y, key->pubkey.z,
  419782:	2300      	movs	r3, #0
  419784:	9301      	str	r3, [sp, #4]
  419786:	9300      	str	r3, [sp, #0]
  419788:	f504 628d 	add.w	r2, r4, #1128	; 0x468
  41978c:	f504 7110 	add.w	r1, r4, #576	; 0x240
  419790:	f104 0018 	add.w	r0, r4, #24

00419794 <.LVL881>:
  419794:	f007 fcf6 	bl	421184 <mp_init_multi>

00419798 <.LVL882>:
    if (err == MP_OKAY) {
  419798:	4605      	mov	r5, r0
  41979a:	2800      	cmp	r0, #0
  41979c:	d17b      	bne.n	419896 <.LVL925>
        base = wc_ecc_new_point_h(key->heap);
  41979e:	6960      	ldr	r0, [r4, #20]

004197a0 <.LVL883>:
  4197a0:	f007 fbd0 	bl	420f44 <.LBE32>

004197a4 <.LVL884>:
        if (base == NULL)
  4197a4:	4606      	mov	r6, r0

004197a6 <.LVL885>:
  4197a6:	2800      	cmp	r0, #0
  4197a8:	d073      	beq.n	419892 <.LVL924>

004197aa <.LVL886>:
        err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ALL);
  4197aa:	223b      	movs	r2, #59	; 0x3b
  4197ac:	a917      	add	r1, sp, #92	; 0x5c
  4197ae:	6920      	ldr	r0, [r4, #16]

004197b0 <.LVL887>:
  4197b0:	f003 fe00 	bl	41d3b4 <.LFE172>

004197b4 <.LVL888>:
  4197b4:	4605      	mov	r5, r0

004197b6 <.LVL889>:
    if (err == MP_OKAY)
  4197b6:	bb6d      	cbnz	r5, 419814 <.LBE49>
        err = mp_copy(curve->Gx, base->x);
  4197b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4197ba:	4631      	mov	r1, r6
  4197bc:	6918      	ldr	r0, [r3, #16]
  4197be:	f008 fe6c 	bl	42249a <.LFE85>

004197c2 <.LVL890>:
  4197c2:	4605      	mov	r5, r0

004197c4 <.LVL891>:
  4197c4:	e7d0      	b.n	419768 <.LVL876>
        err = mp_copy(curve->Gy, base->y);
  4197c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4197c8:	f506 710a 	add.w	r1, r6, #552	; 0x228
  4197cc:	6958      	ldr	r0, [r3, #20]

004197ce <.LVL892>:
  4197ce:	f008 fe64 	bl	42249a <.LFE85>

004197d2 <.LVL893>:
    if (err == MP_OKAY)
  4197d2:	4605      	mov	r5, r0
  4197d4:	b9f0      	cbnz	r0, 419814 <.LBE49>
        err = mp_set(base->z, 1);
  4197d6:	2101      	movs	r1, #1
  4197d8:	f506 608a 	add.w	r0, r6, #1104	; 0x450

004197dc <.LVL894>:
  4197dc:	f008 fe7b 	bl	4224d6 <.LFE113>

004197e0 <.LVL895>:
    if (err == MP_OKAY)
  4197e0:	4605      	mov	r5, r0
  4197e2:	2800      	cmp	r0, #0
  4197e4:	d142      	bne.n	41986c <.LBE55>
        err = wc_ecc_gen_k(rng, key->dp->size, &key->k, curve->order);
  4197e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4197e8:	f8d3 a00c 	ldr.w	sl, [r3, #12]

004197ec <.LVL896>:
  4197ec:	6923      	ldr	r3, [r4, #16]

004197ee <.LBB49>:
    size += 8;
  4197ee:	681b      	ldr	r3, [r3, #0]
  4197f0:	f103 0908 	add.w	r9, r3, #8

004197f4 <.LVL897>:
    err = wc_RNG_GenerateBlock(rng, buf, size);
  4197f4:	464a      	mov	r2, r9
  4197f6:	a904      	add	r1, sp, #16
  4197f8:	4640      	mov	r0, r8

004197fa <.LVL898>:
  4197fa:	f002 fb95 	bl	41bf28 <.LFE18>

004197fe <.LVL899>:
    if (err == 0)
  4197fe:	4605      	mov	r5, r0

00419800 <.LVL900>:
  419800:	b1c8      	cbz	r0, 419836 <.LBB55>

00419802 <.LBB51>:
    volatile byte* z = (volatile byte*)mem;
  419802:	ab04      	add	r3, sp, #16

00419804 <.LVL902>:
    while (len--) *z++ = 0;
  419804:	2000      	movs	r0, #0
  419806:	f10d 0152 	add.w	r1, sp, #82	; 0x52

0041980a <.LVL903>:
  41980a:	1c5a      	adds	r2, r3, #1

0041980c <.LVL904>:
  41980c:	7018      	strb	r0, [r3, #0]

0041980e <.LVL905>:
  41980e:	4613      	mov	r3, r2
  419810:	428a      	cmp	r2, r1
  419812:	d1fa      	bne.n	41980a <.LVL903>

00419814 <.LBE49>:
    if (err == MP_OKAY)
  419814:	bb55      	cbnz	r5, 41986c <.LBE55>
            curve->Af, curve->prime, 1, key->heap);
  419816:	9a17      	ldr	r2, [sp, #92]	; 0x5c
        err = wc_ecc_mulmod_ex(&key->k, base, &key->pubkey,
  419818:	6893      	ldr	r3, [r2, #8]
  41981a:	6961      	ldr	r1, [r4, #20]
  41981c:	9102      	str	r1, [sp, #8]
  41981e:	2101      	movs	r1, #1
  419820:	9101      	str	r1, [sp, #4]
  419822:	6852      	ldr	r2, [r2, #4]
  419824:	9200      	str	r2, [sp, #0]
  419826:	f104 0218 	add.w	r2, r4, #24
  41982a:	4631      	mov	r1, r6
  41982c:	4638      	mov	r0, r7
  41982e:	f7fa feb9 	bl	4145a4 <.LFE15>

00419832 <.LVL907>:
  419832:	4605      	mov	r5, r0

00419834 <.LVL908>:
  419834:	e799      	b.n	41976a <.LVL876+0x2>

00419836 <.LBB55>:
        err = mp_read_unsigned_bin(k, (byte*)buf, size);
  419836:	464a      	mov	r2, r9
  419838:	a904      	add	r1, sp, #16
  41983a:	4638      	mov	r0, r7

0041983c <.LVL910>:
  41983c:	f008 fe1e 	bl	42247c <.LFE72>

00419840 <.LVL911>:
    if (err == MP_OKAY) {
  419840:	4605      	mov	r5, r0
  419842:	2800      	cmp	r0, #0
  419844:	d1dd      	bne.n	419802 <.LBB51>
        if (mp_iszero(k) == MP_YES)
  419846:	4638      	mov	r0, r7

00419848 <.LVL912>:
  419848:	f008 fe2c 	bl	4224a4 <.LFE93>

0041984c <.LVL913>:
  41984c:	2801      	cmp	r0, #1
  41984e:	d024      	beq.n	41989a <.LBB56>

00419850 <.LVL914>:
        if (mp_cmp(k, order) != MP_LT) {
  419850:	4651      	mov	r1, sl
  419852:	4638      	mov	r0, r7
  419854:	f008 fe7a 	bl	42254c <.LFE66>

00419858 <.LVL915>:
  419858:	f1b0 3fff 	cmp.w	r0, #4294967295
  41985c:	d0d1      	beq.n	419802 <.LBB51>
            err = mp_mod(k, order, k);
  41985e:	463a      	mov	r2, r7
  419860:	4651      	mov	r1, sl
  419862:	4638      	mov	r0, r7
  419864:	f008 fe86 	bl	422574 <.LFE75>

00419868 <.LVL916>:
  419868:	4605      	mov	r5, r0

0041986a <.LVL917>:
  41986a:	e7ca      	b.n	419802 <.LBB51>

0041986c <.LBE55>:
        mp_clear(key->pubkey.x);
  41986c:	f104 0018 	add.w	r0, r4, #24
  419870:	f008 fdae 	bl	4223d0 <.LFE16>

00419874 <.LVL919>:
        mp_clear(key->pubkey.y);
  419874:	f504 7010 	add.w	r0, r4, #576	; 0x240
  419878:	f008 fdaa 	bl	4223d0 <.LFE16>

0041987c <.LVL920>:
        mp_clear(key->pubkey.z);
  41987c:	f504 608d 	add.w	r0, r4, #1128	; 0x468
  419880:	f008 fda6 	bl	4223d0 <.LFE16>

00419884 <.LVL921>:
        mp_forcezero(&key->k);
  419884:	4638      	mov	r0, r7
  419886:	f008 fe5d 	bl	422544 <mp_forcezero>

0041988a <.LVL922>:
  41988a:	e772      	b.n	419772 <.LVL877>

0041988c <.LVL923>:
        return BAD_FUNC_ARG;
  41988c:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  419890:	e75d      	b.n	41974e <.LVL871>

00419892 <.LVL924>:
            err = MEMORY_E;
  419892:	f06f 057c 	mvn.w	r5, #124	; 0x7c

00419896 <.LVL925>:
{
  419896:	2600      	movs	r6, #0
  419898:	e78d      	b.n	4197b6 <.LVL889>

0041989a <.LBB56>:
          err = MP_ZERO_E;
  41989a:	f06f 0578 	mvn.w	r5, #120	; 0x78

0041989e <.LVL927>:
  41989e:	e7b0      	b.n	419802 <.LBB51>

Disassembly of section .text.wc_HmacFinal%95:

004198a0 <wc_HmacFinal>:

int wc_HmacFinal(Hmac* hmac, byte* hash)
{
    int ret;

    if (hmac == NULL || hash == NULL) {
  4198a0:	2800      	cmp	r0, #0
  4198a2:	f000 80c1 	beq.w	419a28 <.LCFI6>
{
  4198a6:	b570      	push	{r4, r5, r6, lr}

004198a8 <.LCFI5>:
  4198a8:	4604      	mov	r4, r0
    if (hmac == NULL || hash == NULL) {
  4198aa:	2900      	cmp	r1, #0
  4198ac:	f000 80b6 	beq.w	419a1c <.LVL194>
  4198b0:	460d      	mov	r5, r1
            (byte*)hmac->ipad, hmac->keyLen, hash, NULL, hashLen);
    #endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    if (!hmac->innerHashKeyed) {
  4198b2:	f890 3225 	ldrb.w	r3, [r0, #549]	; 0x225
  4198b6:	b14b      	cbz	r3, 4198cc <.LVL146>

004198b8 <.LVL145>:
        ret = HmacKeyInnerHash(hmac);
        if (ret != 0)
            return ret;
    }

    switch (hmac->macType) {
  4198b8:	f894 3224 	ldrb.w	r3, [r4, #548]	; 0x224
  4198bc:	2b05      	cmp	r3, #5
  4198be:	f200 80b0 	bhi.w	419a22 <.LVL195>
  4198c2:	e8df f003 	tbb	[pc, r3]
  4198c6:	2b09      	.short	0x2b09
  4198c8:	6b8bae4b 	.word	0x6b8bae4b

004198cc <.LVL146>:
        ret = HmacKeyInnerHash(hmac);
  4198cc:	f006 fe30 	bl	420530 <HmacKeyInnerHash>

004198d0 <.LVL147>:
        if (ret != 0)
  4198d0:	4603      	mov	r3, r0
  4198d2:	2800      	cmp	r0, #0
  4198d4:	d0f0      	beq.n	4198b8 <.LVL145>
  4198d6:	e01f      	b.n	419918 <.LVL157>

004198d8 <.LVL148>:
    #ifndef NO_MD5
        case MD5:
            ret = wc_Md5Final(&hmac->hash.md5, (byte*)hmac->innerHash);
  4198d8:	f504 76f0 	add.w	r6, r4, #480	; 0x1e0
  4198dc:	4631      	mov	r1, r6
  4198de:	4620      	mov	r0, r4
  4198e0:	f003 fa70 	bl	41cdc4 <.LFE177>

004198e4 <.LVL149>:
            if (ret != 0)
  4198e4:	4603      	mov	r3, r0
  4198e6:	b9b8      	cbnz	r0, 419918 <.LVL157>
                break;
            ret = wc_Md5Update(&hmac->hash.md5, (byte*)hmac->opad,
  4198e8:	2240      	movs	r2, #64	; 0x40
  4198ea:	f504 71b0 	add.w	r1, r4, #352	; 0x160
  4198ee:	4620      	mov	r0, r4

004198f0 <.LVL150>:
  4198f0:	f005 f97e 	bl	41ebf0 <.LFE23>

004198f4 <.LVL151>:
                                                                MD5_BLOCK_SIZE);
            if (ret != 0)
  4198f4:	4603      	mov	r3, r0
  4198f6:	b978      	cbnz	r0, 419918 <.LVL157>
                break;
            ret = wc_Md5Update(&hmac->hash.md5, (byte*)hmac->innerHash,
  4198f8:	2210      	movs	r2, #16
  4198fa:	4631      	mov	r1, r6
  4198fc:	4620      	mov	r0, r4

004198fe <.LVL152>:
  4198fe:	f005 f977 	bl	41ebf0 <.LFE23>

00419902 <.LVL153>:
                                                               MD5_DIGEST_SIZE);
            if (ret != 0)
  419902:	4603      	mov	r3, r0
  419904:	b940      	cbnz	r0, 419918 <.LVL157>
                break;
            ret = wc_Md5Final(&hmac->hash.md5, hash);
  419906:	4629      	mov	r1, r5
  419908:	4620      	mov	r0, r4

0041990a <.LVL154>:
  41990a:	f003 fa5b 	bl	41cdc4 <.LFE177>

0041990e <.LVL155>:
  41990e:	4603      	mov	r3, r0

00419910 <.LVL156>:
        default:
            ret = BAD_FUNC_ARG;
            break;
    }

    if (ret == 0) {
  419910:	b913      	cbnz	r3, 419918 <.LVL157>
        hmac->innerHashKeyed = 0;
  419912:	2200      	movs	r2, #0
  419914:	f884 2225 	strb.w	r2, [r4, #549]	; 0x225

00419918 <.LVL157>:
    }

    return ret;
}
  419918:	4618      	mov	r0, r3
  41991a:	bd70      	pop	{r4, r5, r6, pc}

0041991c <.LVL158>:
            ret = wc_ShaFinal(&hmac->hash.sha, (byte*)hmac->innerHash);
  41991c:	f504 76f0 	add.w	r6, r4, #480	; 0x1e0
  419920:	4631      	mov	r1, r6
  419922:	4620      	mov	r0, r4
  419924:	f000 feee 	bl	41a704 <wc_ShaFinal>

00419928 <.LVL159>:
            if (ret != 0)
  419928:	4603      	mov	r3, r0
  41992a:	2800      	cmp	r0, #0
  41992c:	d1f4      	bne.n	419918 <.LVL157>
            ret = wc_ShaUpdate(&hmac->hash.sha, (byte*)hmac->opad,
  41992e:	2240      	movs	r2, #64	; 0x40
  419930:	f504 71b0 	add.w	r1, r4, #352	; 0x160
  419934:	4620      	mov	r0, r4

00419936 <.LVL160>:
  419936:	f003 fe53 	bl	41d5e0 <.LFE27>

0041993a <.LVL161>:
            if (ret != 0)
  41993a:	4603      	mov	r3, r0
  41993c:	2800      	cmp	r0, #0
  41993e:	d1eb      	bne.n	419918 <.LVL157>
            ret = wc_ShaUpdate(&hmac->hash.sha, (byte*)hmac->innerHash,
  419940:	2214      	movs	r2, #20
  419942:	4631      	mov	r1, r6
  419944:	4620      	mov	r0, r4

00419946 <.LVL162>:
  419946:	f003 fe4b 	bl	41d5e0 <.LFE27>

0041994a <.LVL163>:
            if (ret != 0)
  41994a:	4603      	mov	r3, r0
  41994c:	2800      	cmp	r0, #0
  41994e:	d1e3      	bne.n	419918 <.LVL157>
            ret = wc_ShaFinal(&hmac->hash.sha, hash);
  419950:	4629      	mov	r1, r5
  419952:	4620      	mov	r0, r4

00419954 <.LVL164>:
  419954:	f000 fed6 	bl	41a704 <wc_ShaFinal>

00419958 <.LVL165>:
  419958:	4603      	mov	r3, r0

0041995a <.LVL166>:
            break;
  41995a:	e7d9      	b.n	419910 <.LVL156>

0041995c <.LVL167>:
            ret = wc_Sha256Final(&hmac->hash.sha256, (byte*)hmac->innerHash);
  41995c:	f504 76f0 	add.w	r6, r4, #480	; 0x1e0
  419960:	4631      	mov	r1, r6
  419962:	4620      	mov	r0, r4
  419964:	f000 f928 	bl	419bb8 <.LFE175>

00419968 <.LVL168>:
            if (ret != 0)
  419968:	4603      	mov	r3, r0
  41996a:	2800      	cmp	r0, #0
  41996c:	d1d4      	bne.n	419918 <.LVL157>
            ret = wc_Sha256Update(&hmac->hash.sha256, (byte*)hmac->opad,
  41996e:	2240      	movs	r2, #64	; 0x40
  419970:	f504 71b0 	add.w	r1, r4, #352	; 0x160
  419974:	4620      	mov	r0, r4

00419976 <.LVL169>:
  419976:	f003 fe8e 	bl	41d696 <.LFE18>

0041997a <.LVL170>:
            if (ret != 0)
  41997a:	4603      	mov	r3, r0
  41997c:	2800      	cmp	r0, #0
  41997e:	d1cb      	bne.n	419918 <.LVL157>
            ret = wc_Sha256Update(&hmac->hash.sha256, (byte*)hmac->innerHash,
  419980:	2220      	movs	r2, #32
  419982:	4631      	mov	r1, r6
  419984:	4620      	mov	r0, r4

00419986 <.LVL171>:
  419986:	f003 fe86 	bl	41d696 <.LFE18>

0041998a <.LVL172>:
            if (ret != 0)
  41998a:	4603      	mov	r3, r0
  41998c:	2800      	cmp	r0, #0
  41998e:	d1c3      	bne.n	419918 <.LVL157>
            ret = wc_Sha256Final(&hmac->hash.sha256, hash);
  419990:	4629      	mov	r1, r5
  419992:	4620      	mov	r0, r4

00419994 <.LVL173>:
  419994:	f000 f910 	bl	419bb8 <.LFE175>

00419998 <.LVL174>:
  419998:	4603      	mov	r3, r0

0041999a <.LVL175>:
            break;
  41999a:	e7b9      	b.n	419910 <.LVL156>

0041999c <.LVL176>:
            ret = wc_Sha384Final(&hmac->hash.sha384, (byte*)hmac->innerHash);
  41999c:	f504 76f0 	add.w	r6, r4, #480	; 0x1e0
  4199a0:	4631      	mov	r1, r6
  4199a2:	4620      	mov	r0, r4
  4199a4:	f7fe f940 	bl	417c28 <.LFE21>

004199a8 <.LVL177>:
            if (ret != 0)
  4199a8:	4603      	mov	r3, r0
  4199aa:	2800      	cmp	r0, #0
  4199ac:	d1b4      	bne.n	419918 <.LVL157>
            ret = wc_Sha384Update(&hmac->hash.sha384, (byte*)hmac->opad,
  4199ae:	2280      	movs	r2, #128	; 0x80
  4199b0:	f504 71b0 	add.w	r1, r4, #352	; 0x160
  4199b4:	4620      	mov	r0, r4

004199b6 <.LVL178>:
  4199b6:	f002 fc1e 	bl	41c1f6 <.LBE719>

004199ba <.LVL179>:
            if (ret != 0)
  4199ba:	4603      	mov	r3, r0
  4199bc:	2800      	cmp	r0, #0
  4199be:	d1ab      	bne.n	419918 <.LVL157>
            ret = wc_Sha384Update(&hmac->hash.sha384, (byte*)hmac->innerHash,
  4199c0:	2230      	movs	r2, #48	; 0x30
  4199c2:	4631      	mov	r1, r6
  4199c4:	4620      	mov	r0, r4

004199c6 <.LVL180>:
  4199c6:	f002 fc16 	bl	41c1f6 <.LBE719>

004199ca <.LVL181>:
            if (ret != 0)
  4199ca:	4603      	mov	r3, r0
  4199cc:	2800      	cmp	r0, #0
  4199ce:	d1a3      	bne.n	419918 <.LVL157>
            ret = wc_Sha384Final(&hmac->hash.sha384, hash);
  4199d0:	4629      	mov	r1, r5
  4199d2:	4620      	mov	r0, r4

004199d4 <.LVL182>:
  4199d4:	f7fe f928 	bl	417c28 <.LFE21>

004199d8 <.LVL183>:
  4199d8:	4603      	mov	r3, r0

004199da <.LVL184>:
            break;
  4199da:	e799      	b.n	419910 <.LVL156>

004199dc <.LVL185>:
            ret = wc_Sha512Final(&hmac->hash.sha512, (byte*)hmac->innerHash);
  4199dc:	f504 76f0 	add.w	r6, r4, #480	; 0x1e0
  4199e0:	4631      	mov	r1, r6
  4199e2:	4620      	mov	r0, r4
  4199e4:	f7fd ffd8 	bl	417998 <wc_Sha512Final>

004199e8 <.LVL186>:
            if (ret != 0)
  4199e8:	4603      	mov	r3, r0
  4199ea:	2800      	cmp	r0, #0
  4199ec:	d194      	bne.n	419918 <.LVL157>
            ret = wc_Sha512Update(&hmac->hash.sha512, (byte*)hmac->opad,
  4199ee:	2280      	movs	r2, #128	; 0x80
  4199f0:	f504 71b0 	add.w	r1, r4, #352	; 0x160
  4199f4:	4620      	mov	r0, r4

004199f6 <.LVL187>:
  4199f6:	f002 fb89 	bl	41c10c <.LFE178>

004199fa <.LVL188>:
            if (ret != 0)
  4199fa:	4603      	mov	r3, r0
  4199fc:	2800      	cmp	r0, #0
  4199fe:	d18b      	bne.n	419918 <.LVL157>
            ret = wc_Sha512Update(&hmac->hash.sha512, (byte*)hmac->innerHash,
  419a00:	2240      	movs	r2, #64	; 0x40
  419a02:	4631      	mov	r1, r6
  419a04:	4620      	mov	r0, r4

00419a06 <.LVL189>:
  419a06:	f002 fb81 	bl	41c10c <.LFE178>

00419a0a <.LVL190>:
            if (ret != 0)
  419a0a:	4603      	mov	r3, r0
  419a0c:	2800      	cmp	r0, #0
  419a0e:	d183      	bne.n	419918 <.LVL157>
            ret = wc_Sha512Final(&hmac->hash.sha512, hash);
  419a10:	4629      	mov	r1, r5
  419a12:	4620      	mov	r0, r4

00419a14 <.LVL191>:
  419a14:	f7fd ffc0 	bl	417998 <wc_Sha512Final>

00419a18 <.LVL192>:
  419a18:	4603      	mov	r3, r0

00419a1a <.LVL193>:
            break;
  419a1a:	e779      	b.n	419910 <.LVL156>

00419a1c <.LVL194>:
        return BAD_FUNC_ARG;
  419a1c:	f06f 03ac 	mvn.w	r3, #172	; 0xac
  419a20:	e77a      	b.n	419918 <.LVL157>

00419a22 <.LVL195>:
            ret = BAD_FUNC_ARG;
  419a22:	f06f 03ac 	mvn.w	r3, #172	; 0xac
  419a26:	e777      	b.n	419918 <.LVL157>

00419a28 <.LCFI6>:
        return BAD_FUNC_ARG;
  419a28:	f06f 03ac 	mvn.w	r3, #172	; 0xac
}
  419a2c:	4618      	mov	r0, r3

00419a2e <.LVL197>:
  419a2e:	4770      	bx	lr

Disassembly of section .text.aes_test%96:

00419a30 <aes_test>:
{
  419a30:	b5f0      	push	{r4, r5, r6, r7, lr}

00419a32 <.LCFI43>:
  419a32:	f2ad 4d44 	subw	sp, sp, #1092	; 0x444

00419a36 <.LCFI44>:
    const byte msg[] = { /* "now is the time for all " w/o trailing 0 */
  419a36:	4c5e      	ldr	r4, [pc, #376]	; (419bb0 <.LCFI45+0x2>)
  419a38:	ad58      	add	r5, sp, #352	; 0x160
  419a3a:	f8d4 0708 	ldr.w	r0, [r4, #1800]	; 0x708
  419a3e:	f8d4 170c 	ldr.w	r1, [r4, #1804]	; 0x70c
  419a42:	f8d4 2710 	ldr.w	r2, [r4, #1808]	; 0x710
  419a46:	f8d4 3714 	ldr.w	r3, [r4, #1812]	; 0x714
  419a4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    const byte verify[] =
  419a4c:	ad54      	add	r5, sp, #336	; 0x150
  419a4e:	f8d4 0718 	ldr.w	r0, [r4, #1816]	; 0x718
  419a52:	f8d4 171c 	ldr.w	r1, [r4, #1820]	; 0x71c
  419a56:	f8d4 2720 	ldr.w	r2, [r4, #1824]	; 0x720
  419a5a:	f8d4 3724 	ldr.w	r3, [r4, #1828]	; 0x724
  419a5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    byte key[] = "0123456789abcdef   ";  /* align */
  419a60:	ad4f      	add	r5, sp, #316	; 0x13c
  419a62:	f504 66e5 	add.w	r6, r4, #1832	; 0x728
  419a66:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  419a68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  419a6a:	6833      	ldr	r3, [r6, #0]
  419a6c:	602b      	str	r3, [r5, #0]
    byte iv[]  = "1234567890abcdef   ";  /* align */
  419a6e:	ad4a      	add	r5, sp, #296	; 0x128
  419a70:	f204 743c 	addw	r4, r4, #1852	; 0x73c
  419a74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  419a76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  419a78:	6823      	ldr	r3, [r4, #0]
  419a7a:	602b      	str	r3, [r5, #0]
    CRYPT_AES_KeySet(&enc, key, AES_BLOCK_SIZE, iv, AES_ENCRYPTION);
  419a7c:	2300      	movs	r3, #0
  419a7e:	9300      	str	r3, [sp, #0]
  419a80:	ab4a      	add	r3, sp, #296	; 0x128
  419a82:	2210      	movs	r2, #16
  419a84:	a94f      	add	r1, sp, #316	; 0x13c
  419a86:	a8b6      	add	r0, sp, #728	; 0x2d8
  419a88:	f008 f8e7 	bl	421c5a <.LFE1>

00419a8c <.LVL110>:
    CRYPT_AES_KeySet(&dec, key, AES_BLOCK_SIZE, iv, AES_DECRYPTION);
  419a8c:	2301      	movs	r3, #1
  419a8e:	9300      	str	r3, [sp, #0]
  419a90:	ab4a      	add	r3, sp, #296	; 0x128
  419a92:	2210      	movs	r2, #16
  419a94:	a94f      	add	r1, sp, #316	; 0x13c
  419a96:	a85c      	add	r0, sp, #368	; 0x170
  419a98:	f008 f8df 	bl	421c5a <.LFE1>

00419a9c <.LVL111>:
    CRYPT_AES_CBC_Encrypt(&enc, cipher, msg,   AES_BLOCK_SIZE);
  419a9c:	2310      	movs	r3, #16
  419a9e:	aa58      	add	r2, sp, #352	; 0x160
  419aa0:	a93a      	add	r1, sp, #232	; 0xe8
  419aa2:	a8b6      	add	r0, sp, #728	; 0x2d8
  419aa4:	f008 f958 	bl	421d58 <.LFE29>

00419aa8 <.LVL112>:
    CRYPT_AES_CBC_Decrypt(&dec, plain, verify, AES_BLOCK_SIZE);
  419aa8:	2310      	movs	r3, #16
  419aaa:	aa54      	add	r2, sp, #336	; 0x150
  419aac:	a92a      	add	r1, sp, #168	; 0xa8
  419aae:	a85c      	add	r0, sp, #368	; 0x170
  419ab0:	f008 f961 	bl	421d76 <.LFE32>

00419ab4 <.LVL113>:
    appData.aes_cbc_test_result = numCbcSubTests;
  419ab4:	2202      	movs	r2, #2
  419ab6:	4b3f      	ldr	r3, [pc, #252]	; (419bb4 <.LCFI45+0x6>)
  419ab8:	635a      	str	r2, [r3, #52]	; 0x34
    if (!(memcmp(plain, msg, AES_BLOCK_SIZE)))
  419aba:	2210      	movs	r2, #16
  419abc:	a958      	add	r1, sp, #352	; 0x160
  419abe:	a82a      	add	r0, sp, #168	; 0xa8
  419ac0:	f006 fcd6 	bl	420470 <memcmp>

00419ac4 <.LVL114>:
  419ac4:	b910      	cbnz	r0, 419acc <.LVL114+0x8>
        appData.aes_cbc_test_result--;
  419ac6:	2201      	movs	r2, #1
  419ac8:	4b3a      	ldr	r3, [pc, #232]	; (419bb4 <.LCFI45+0x6>)
  419aca:	635a      	str	r2, [r3, #52]	; 0x34
    if (!(memcmp(cipher, verify, AES_BLOCK_SIZE)))
  419acc:	2210      	movs	r2, #16
  419ace:	a954      	add	r1, sp, #336	; 0x150
  419ad0:	a83a      	add	r0, sp, #232	; 0xe8
  419ad2:	f006 fccd 	bl	420470 <memcmp>

00419ad6 <.LVL115>:
  419ad6:	b918      	cbnz	r0, 419ae0 <.LBB2>
        appData.aes_cbc_test_result--;
  419ad8:	4a36      	ldr	r2, [pc, #216]	; (419bb4 <.LCFI45+0x6>)
  419ada:	6b53      	ldr	r3, [r2, #52]	; 0x34
  419adc:	3b01      	subs	r3, #1
  419ade:	6353      	str	r3, [r2, #52]	; 0x34

00419ae0 <.LBB2>:
        const byte ctrKey[] =
  419ae0:	4d33      	ldr	r5, [pc, #204]	; (419bb0 <.LCFI45+0x2>)
  419ae2:	ac02      	add	r4, sp, #8
  419ae4:	f8d5 0750 	ldr.w	r0, [r5, #1872]	; 0x750
  419ae8:	f8d5 1754 	ldr.w	r1, [r5, #1876]	; 0x754
  419aec:	f8d5 2758 	ldr.w	r2, [r5, #1880]	; 0x758
  419af0:	f8d5 375c 	ldr.w	r3, [r5, #1884]	; 0x75c
  419af4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        const byte ctrIv[] =
  419af6:	ac06      	add	r4, sp, #24
  419af8:	f8d5 0760 	ldr.w	r0, [r5, #1888]	; 0x760
  419afc:	f8d5 1764 	ldr.w	r1, [r5, #1892]	; 0x764
  419b00:	f8d5 2768 	ldr.w	r2, [r5, #1896]	; 0x768
  419b04:	f8d5 376c 	ldr.w	r3, [r5, #1900]	; 0x76c
  419b08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        const byte ctrPlain[] =
  419b0a:	f505 64ee 	add.w	r4, r5, #1904	; 0x770
  419b0e:	af0a      	add	r7, sp, #40	; 0x28
  419b10:	f505 65f6 	add.w	r5, r5, #1968	; 0x7b0
  419b14:	463e      	mov	r6, r7
  419b16:	6820      	ldr	r0, [r4, #0]
  419b18:	6861      	ldr	r1, [r4, #4]
  419b1a:	68a2      	ldr	r2, [r4, #8]
  419b1c:	68e3      	ldr	r3, [r4, #12]
  419b1e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  419b20:	3410      	adds	r4, #16
  419b22:	4637      	mov	r7, r6
  419b24:	42ac      	cmp	r4, r5
  419b26:	d1f5      	bne.n	419b14 <.LBB2+0x34>
        const byte ctrCipher[] =
  419b28:	4e21      	ldr	r6, [pc, #132]	; (419bb0 <.LCFI45+0x2>)
  419b2a:	f506 64f6 	add.w	r4, r6, #1968	; 0x7b0
  419b2e:	af1a      	add	r7, sp, #104	; 0x68
  419b30:	f506 66fe 	add.w	r6, r6, #2032	; 0x7f0
  419b34:	463d      	mov	r5, r7
  419b36:	6820      	ldr	r0, [r4, #0]
  419b38:	6861      	ldr	r1, [r4, #4]
  419b3a:	68a2      	ldr	r2, [r4, #8]
  419b3c:	68e3      	ldr	r3, [r4, #12]
  419b3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  419b40:	3410      	adds	r4, #16
  419b42:	462f      	mov	r7, r5
  419b44:	42b4      	cmp	r4, r6
  419b46:	d1f5      	bne.n	419b34 <.LBB2+0x54>
        CRYPT_AES_KeySet(&enc, ctrKey, AES_BLOCK_SIZE, ctrIv, AES_ENCRYPTION);
  419b48:	2400      	movs	r4, #0
  419b4a:	9400      	str	r4, [sp, #0]
  419b4c:	ab06      	add	r3, sp, #24
  419b4e:	2210      	movs	r2, #16
  419b50:	a902      	add	r1, sp, #8
  419b52:	a8b6      	add	r0, sp, #728	; 0x2d8
  419b54:	f008 f881 	bl	421c5a <.LFE1>

00419b58 <.LVL116>:
        CRYPT_AES_KeySet(&dec, ctrKey, AES_BLOCK_SIZE, ctrIv, AES_ENCRYPTION);
  419b58:	9400      	str	r4, [sp, #0]
  419b5a:	ab06      	add	r3, sp, #24
  419b5c:	2210      	movs	r2, #16
  419b5e:	a902      	add	r1, sp, #8
  419b60:	a85c      	add	r0, sp, #368	; 0x170
  419b62:	f008 f87a 	bl	421c5a <.LFE1>

00419b66 <.LVL117>:
        CRYPT_AES_CTR_Encrypt(&enc, cipher, ctrPlain, AES_BLOCK_SIZE*4);
  419b66:	2340      	movs	r3, #64	; 0x40
  419b68:	aa0a      	add	r2, sp, #40	; 0x28
  419b6a:	a93a      	add	r1, sp, #232	; 0xe8
  419b6c:	a8b6      	add	r0, sp, #728	; 0x2d8
  419b6e:	f008 f911 	bl	421d94 <.LFE33>

00419b72 <.LVL118>:
        CRYPT_AES_CTR_Encrypt(&dec, plain, ctrCipher, AES_BLOCK_SIZE*4);
  419b72:	2340      	movs	r3, #64	; 0x40
  419b74:	aa1a      	add	r2, sp, #104	; 0x68
  419b76:	a92a      	add	r1, sp, #168	; 0xa8
  419b78:	a85c      	add	r0, sp, #368	; 0x170
  419b7a:	f008 f90b 	bl	421d94 <.LFE33>

00419b7e <.LVL119>:
        appData.aes_ctr_test_result = numCtrSubTests;
  419b7e:	2202      	movs	r2, #2
  419b80:	4b0c      	ldr	r3, [pc, #48]	; (419bb4 <.LCFI45+0x6>)
  419b82:	639a      	str	r2, [r3, #56]	; 0x38
        if (!(memcmp(plain, ctrPlain, AES_BLOCK_SIZE*4)))
  419b84:	2240      	movs	r2, #64	; 0x40
  419b86:	a90a      	add	r1, sp, #40	; 0x28
  419b88:	a82a      	add	r0, sp, #168	; 0xa8
  419b8a:	f006 fc71 	bl	420470 <memcmp>

00419b8e <.LVL120>:
  419b8e:	b910      	cbnz	r0, 419b96 <.LVL120+0x8>
            appData.aes_ctr_test_result--;
  419b90:	2201      	movs	r2, #1
  419b92:	4b08      	ldr	r3, [pc, #32]	; (419bb4 <.LCFI45+0x6>)
  419b94:	639a      	str	r2, [r3, #56]	; 0x38
        if (!(memcmp(cipher, ctrCipher, AES_BLOCK_SIZE*4)))
  419b96:	2240      	movs	r2, #64	; 0x40
  419b98:	a91a      	add	r1, sp, #104	; 0x68
  419b9a:	a83a      	add	r0, sp, #232	; 0xe8
  419b9c:	f006 fc68 	bl	420470 <memcmp>

00419ba0 <.LVL121>:
  419ba0:	b918      	cbnz	r0, 419baa <.LBE2>
            appData.aes_ctr_test_result--;
  419ba2:	4a04      	ldr	r2, [pc, #16]	; (419bb4 <.LCFI45+0x6>)
  419ba4:	6b93      	ldr	r3, [r2, #56]	; 0x38
  419ba6:	3b01      	subs	r3, #1
  419ba8:	6393      	str	r3, [r2, #56]	; 0x38

00419baa <.LBE2>:
}
  419baa:	f20d 4d44 	addw	sp, sp, #1092	; 0x444

00419bae <.LCFI45>:
  419bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  419bb0:	0040da54 	.word	0x0040da54
  419bb4:	2040d534 	.word	0x2040d534

Disassembly of section .text.wc_Sha256Final%97:

00419bb8 <wc_Sha256Final>:

        return XTRANSFORM(sha256, local);
    }

    int wc_Sha256Final(Sha256* sha256, byte* hash)
    {
  419bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

00419bba <.LCFI8>:
        int ret;

        if (sha256 == NULL || hash == NULL) {
  419bba:	2800      	cmp	r0, #0
  419bbc:	f000 80a9 	beq.w	419d12 <.LVL93>
  419bc0:	4604      	mov	r4, r0
  419bc2:	2900      	cmp	r1, #0
  419bc4:	f000 80a5 	beq.w	419d12 <.LVL93>

00419bc8 <.LBB240>:
        byte* local = (byte*)sha256->buffer;
  419bc8:	f100 0620 	add.w	r6, r0, #32

00419bcc <.LVL71>:
        if (sha256 == NULL) {
  419bcc:	2800      	cmp	r0, #0
  419bce:	f000 80a3 	beq.w	419d18 <.LBB265>
        AddLength(sha256, sha256->buffLen);  /* before adding pads */
  419bd2:	6e03      	ldr	r3, [r0, #96]	; 0x60

00419bd4 <.LBB242>:
        word32 tmp = sha256->loLen;
  419bd4:	6e40      	ldr	r0, [r0, #100]	; 0x64

00419bd6 <.LVL73>:
        if ( (sha256->loLen += len) < tmp)
  419bd6:	181a      	adds	r2, r3, r0
  419bd8:	6662      	str	r2, [r4, #100]	; 0x64
  419bda:	4290      	cmp	r0, r2
  419bdc:	d902      	bls.n	419be4 <.LVL73+0xe>
            sha256->hiLen++;                       /* carry low to high */
  419bde:	6ea2      	ldr	r2, [r4, #104]	; 0x68
  419be0:	3201      	adds	r2, #1
  419be2:	66a2      	str	r2, [r4, #104]	; 0x68
  419be4:	460d      	mov	r5, r1

00419be6 <.LBE242>:
        local[sha256->buffLen++] = 0x80;     /* add 1 */
  419be6:	1c5a      	adds	r2, r3, #1
  419be8:	6622      	str	r2, [r4, #96]	; 0x60
  419bea:	2280      	movs	r2, #128	; 0x80
  419bec:	54f2      	strb	r2, [r6, r3]
        if (sha256->buffLen > SHA256_PAD_SIZE) {
  419bee:	6e20      	ldr	r0, [r4, #96]	; 0x60
  419bf0:	2838      	cmp	r0, #56	; 0x38
  419bf2:	d921      	bls.n	419c38 <.LVL81>
            XMEMSET(&local[sha256->buffLen], 0,
  419bf4:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
  419bf8:	2100      	movs	r1, #0

00419bfa <.LVL75>:
  419bfa:	4430      	add	r0, r6
  419bfc:	f004 fc8c 	bl	41e518 <.LFE14>

00419c00 <.LVL76>:
            sha256->buffLen += SHA256_BLOCK_SIZE - sha256->buffLen;
  419c00:	2340      	movs	r3, #64	; 0x40
  419c02:	6623      	str	r3, [r4, #96]	; 0x60

00419c04 <.LVL77>:
  419c04:	f104 011c 	add.w	r1, r4, #28
  419c08:	f104 005c 	add.w	r0, r4, #92	; 0x5c

00419c0c <.LBB244>:
        out[i] = ByteReverseWord32(in[i]);
  419c0c:	684a      	ldr	r2, [r1, #4]

00419c0e <.LBB246>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  419c0e:	0a13      	lsrs	r3, r2, #8
  419c10:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  419c14:	0212      	lsls	r2, r2, #8
  419c16:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
  419c1a:	4313      	orrs	r3, r2

00419c1c <.LBB248>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  419c1c:	ea4f 4333 	mov.w	r3, r3, ror #16

00419c20 <.LBE246>:
        out[i] = ByteReverseWord32(in[i]);
  419c20:	f841 3f04 	str.w	r3, [r1, #4]!
    for (i = 0; i < count; i++)
  419c24:	4281      	cmp	r1, r0
  419c26:	d1f1      	bne.n	419c0c <.LBB244>

00419c28 <.LBE244>:
            ret = XTRANSFORM(sha256, local);
  419c28:	4620      	mov	r0, r4
  419c2a:	f7fc fe2b 	bl	416884 <.LBE46>

00419c2e <.LVL80>:
            if (ret != 0)
  419c2e:	4607      	mov	r7, r0
  419c30:	2800      	cmp	r0, #0
  419c32:	d16c      	bne.n	419d0e <.LBE263>
            sha256->buffLen = 0;
  419c34:	2300      	movs	r3, #0
  419c36:	6623      	str	r3, [r4, #96]	; 0x60

00419c38 <.LVL81>:
        XMEMSET(&local[sha256->buffLen], 0, SHA256_PAD_SIZE - sha256->buffLen);
  419c38:	6e20      	ldr	r0, [r4, #96]	; 0x60
  419c3a:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
  419c3e:	2100      	movs	r1, #0
  419c40:	4430      	add	r0, r6
  419c42:	f004 fc69 	bl	41e518 <.LFE14>

00419c46 <.LVL82>:
        sha256->hiLen = (sha256->loLen >> (8 * sizeof(sha256->loLen) - 3)) +
  419c46:	6e63      	ldr	r3, [r4, #100]	; 0x64
                                                         (sha256->hiLen << 3);
  419c48:	6ea1      	ldr	r1, [r4, #104]	; 0x68
        sha256->hiLen = (sha256->loLen >> (8 * sizeof(sha256->loLen) - 3)) +
  419c4a:	0f5a      	lsrs	r2, r3, #29
  419c4c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
  419c50:	66a2      	str	r2, [r4, #104]	; 0x68
        sha256->loLen = sha256->loLen << 3;
  419c52:	00db      	lsls	r3, r3, #3
  419c54:	6663      	str	r3, [r4, #100]	; 0x64

00419c56 <.LVL83>:
  419c56:	f104 011c 	add.w	r1, r4, #28
  419c5a:	f104 005c 	add.w	r0, r4, #92	; 0x5c

00419c5e <.LBB250>:
        out[i] = ByteReverseWord32(in[i]);
  419c5e:	684a      	ldr	r2, [r1, #4]

00419c60 <.LBB252>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  419c60:	0a13      	lsrs	r3, r2, #8
  419c62:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  419c66:	0212      	lsls	r2, r2, #8
  419c68:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
  419c6c:	4313      	orrs	r3, r2

00419c6e <.LBB254>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  419c6e:	ea4f 4333 	mov.w	r3, r3, ror #16

00419c72 <.LBE252>:
        out[i] = ByteReverseWord32(in[i]);
  419c72:	f841 3f04 	str.w	r3, [r1, #4]!
    for (i = 0; i < count; i++)
  419c76:	4281      	cmp	r1, r0
  419c78:	d1f1      	bne.n	419c5e <.LBB250>

00419c7a <.LBE250>:
        XMEMCPY(&local[SHA256_PAD_SIZE], &sha256->hiLen, sizeof(word32));
  419c7a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
  419c7c:	65a3      	str	r3, [r4, #88]	; 0x58
        XMEMCPY(&local[SHA256_PAD_SIZE + sizeof(word32)], &sha256->loLen,
  419c7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  419c80:	65e3      	str	r3, [r4, #92]	; 0x5c
        return XTRANSFORM(sha256, local);
  419c82:	4620      	mov	r0, r4
  419c84:	f7fc fdfe 	bl	416884 <.LBE46>

00419c88 <.LBE240>:
        #endif
        }
    #endif /* WOLFSSL_ASYNC_CRYPT */

        ret = Sha256Final(sha256);
        if (ret != 0)
  419c88:	4607      	mov	r7, r0
  419c8a:	2800      	cmp	r0, #0
  419c8c:	d13f      	bne.n	419d0e <.LBE263>
            return ret;

    #if defined(LITTLE_ENDIAN_ORDER)
        ByteReverseWords(sha256->digest, sha256->digest, SHA256_DIGEST_SIZE);
  419c8e:	4626      	mov	r6, r4

00419c90 <.LVL87>:
  419c90:	1f21      	subs	r1, r4, #4
  419c92:	f104 001c 	add.w	r0, r4, #28

00419c96 <.LBB257>:
        out[i] = ByteReverseWord32(in[i]);
  419c96:	684a      	ldr	r2, [r1, #4]

00419c98 <.LBB259>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  419c98:	0a13      	lsrs	r3, r2, #8
  419c9a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  419c9e:	0212      	lsls	r2, r2, #8
  419ca0:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
  419ca4:	4313      	orrs	r3, r2

00419ca6 <.LBB261>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  419ca6:	ea4f 4333 	mov.w	r3, r3, ror #16

00419caa <.LBE259>:
        out[i] = ByteReverseWord32(in[i]);
  419caa:	f841 3f04 	str.w	r3, [r1, #4]!
    for (i = 0; i < count; i++)
  419cae:	4281      	cmp	r1, r0
  419cb0:	d1f1      	bne.n	419c96 <.LBB257>

00419cb2 <.LBE257>:
    #endif
        XMEMCPY(hash, sha256->digest, SHA256_DIGEST_SIZE);
  419cb2:	6830      	ldr	r0, [r6, #0]
  419cb4:	6871      	ldr	r1, [r6, #4]
  419cb6:	68b2      	ldr	r2, [r6, #8]
  419cb8:	68f3      	ldr	r3, [r6, #12]
  419cba:	6028      	str	r0, [r5, #0]
  419cbc:	6069      	str	r1, [r5, #4]
  419cbe:	60aa      	str	r2, [r5, #8]
  419cc0:	60eb      	str	r3, [r5, #12]
  419cc2:	6930      	ldr	r0, [r6, #16]
  419cc4:	6971      	ldr	r1, [r6, #20]
  419cc6:	69b2      	ldr	r2, [r6, #24]
  419cc8:	69f3      	ldr	r3, [r6, #28]
  419cca:	6128      	str	r0, [r5, #16]
  419ccc:	6169      	str	r1, [r5, #20]
  419cce:	61aa      	str	r2, [r5, #24]
  419cd0:	61eb      	str	r3, [r5, #28]

00419cd2 <.LBB263>:
    XMEMSET(sha256->digest, 0, sizeof(sha256->digest));
  419cd2:	2220      	movs	r2, #32
  419cd4:	2100      	movs	r1, #0
  419cd6:	4620      	mov	r0, r4
  419cd8:	f004 fc1e 	bl	41e518 <.LFE14>

00419cdc <.LVL91>:
    sha256->digest[0] = 0x6A09E667L;
  419cdc:	4b10      	ldr	r3, [pc, #64]	; (419d20 <.LVL95+0x4>)
  419cde:	6023      	str	r3, [r4, #0]
    sha256->digest[1] = 0xBB67AE85L;
  419ce0:	4b10      	ldr	r3, [pc, #64]	; (419d24 <.LVL95+0x8>)
  419ce2:	6063      	str	r3, [r4, #4]
    sha256->digest[2] = 0x3C6EF372L;
  419ce4:	4b10      	ldr	r3, [pc, #64]	; (419d28 <.LVL95+0xc>)
  419ce6:	60a3      	str	r3, [r4, #8]
    sha256->digest[3] = 0xA54FF53AL;
  419ce8:	4b10      	ldr	r3, [pc, #64]	; (419d2c <.LVL95+0x10>)
  419cea:	60e3      	str	r3, [r4, #12]
    sha256->digest[4] = 0x510E527FL;
  419cec:	4b10      	ldr	r3, [pc, #64]	; (419d30 <.LVL95+0x14>)
  419cee:	6123      	str	r3, [r4, #16]
    sha256->digest[5] = 0x9B05688CL;
  419cf0:	4b10      	ldr	r3, [pc, #64]	; (419d34 <.LVL95+0x18>)
  419cf2:	6163      	str	r3, [r4, #20]
    sha256->digest[6] = 0x1F83D9ABL;
  419cf4:	4b10      	ldr	r3, [pc, #64]	; (419d38 <.LVL95+0x1c>)
  419cf6:	61a3      	str	r3, [r4, #24]
    sha256->digest[7] = 0x5BE0CD19L;
  419cf8:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
  419cfc:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
  419d00:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
  419d04:	61e3      	str	r3, [r4, #28]
    sha256->buffLen = 0;
  419d06:	2300      	movs	r3, #0
  419d08:	6623      	str	r3, [r4, #96]	; 0x60
    sha256->loLen   = 0;
  419d0a:	6663      	str	r3, [r4, #100]	; 0x64
    sha256->hiLen   = 0;
  419d0c:	66a3      	str	r3, [r4, #104]	; 0x68

00419d0e <.LBE263>:

        return InitSha256(sha256);  /* reset state */
    }
  419d0e:	4638      	mov	r0, r7
  419d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00419d12 <.LVL93>:
            return BAD_FUNC_ARG;
  419d12:	f06f 07ac 	mvn.w	r7, #172	; 0xac
  419d16:	e7fa      	b.n	419d0e <.LBE263>

00419d18 <.LBB265>:
            return BAD_FUNC_ARG;
  419d18:	f06f 07ac 	mvn.w	r7, #172	; 0xac

00419d1c <.LVL95>:
  419d1c:	e7f7      	b.n	419d0e <.LBE263>
  419d1e:	bf00      	nop
  419d20:	6a09e667 	.word	0x6a09e667
  419d24:	bb67ae85 	.word	0xbb67ae85
  419d28:	3c6ef372 	.word	0x3c6ef372
  419d2c:	a54ff53a 	.word	0xa54ff53a
  419d30:	510e527f 	.word	0x510e527f
  419d34:	9b05688c 	.word	0x9b05688c
  419d38:	1f83d9ab 	.word	0x1f83d9ab

Disassembly of section .text.fp_sqr_comba%98:

00419d3c <fp_sqr_comba>:
{
  419d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00419d40 <.LCFI77>:
  419d40:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c

00419d44 <.LCFI78>:
  419d44:	9005      	str	r0, [sp, #20]
  419d46:	910b      	str	r1, [sp, #44]	; 0x2c
  pa = A->used + A->used;
  419d48:	6803      	ldr	r3, [r0, #0]
  419d4a:	005b      	lsls	r3, r3, #1

00419d4c <.LVL505>:
  419d4c:	2b87      	cmp	r3, #135	; 0x87
  419d4e:	bfa8      	it	ge
  419d50:	2387      	movge	r3, #135	; 0x87

00419d52 <.LVL506>:
  419d52:	9308      	str	r3, [sp, #32]

00419d54 <.LVL507>:
  if (A == B) {
  419d54:	4288      	cmp	r0, r1
  419d56:	d012      	beq.n	419d7e <.LBB70>
     fp_zero(B);
  419d58:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  419d5a:	4620      	mov	r0, r4

00419d5c <.LVL508>:
  419d5c:	f008 f9f2 	bl	422144 <.LFE163>

00419d60 <.LVL509>:
     dst = B;
  419d60:	940a      	str	r4, [sp, #40]	; 0x28

00419d62 <.LVL510>:
  for (ix = 0; ix < pa; ix++) {
  419d62:	9b08      	ldr	r3, [sp, #32]
  419d64:	2b00      	cmp	r3, #0
  419d66:	dd7c      	ble.n	419e62 <.LBE69>
  419d68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  419d6a:	3304      	adds	r3, #4
  419d6c:	9304      	str	r3, [sp, #16]
  419d6e:	f04f 0a00 	mov.w	sl, #0
  419d72:	46d1      	mov	r9, sl
  419d74:	46d3      	mov	fp, sl

00419d76 <.LBB67>:
      tmpx = A->dp + tx;
  419d76:	9b05      	ldr	r3, [sp, #20]
  419d78:	3308      	adds	r3, #8
  419d7a:	9309      	str	r3, [sp, #36]	; 0x24
  419d7c:	e014      	b.n	419da8 <.LBB73>

00419d7e <.LBB70>:
    fp_zero(a);
  419d7e:	a80c      	add	r0, sp, #48	; 0x30

00419d80 <.LVL512>:
  419d80:	f008 f9e0 	bl	422144 <.LFE163>

00419d84 <.LBE70>:
     dst = &tmp;
  419d84:	ab0c      	add	r3, sp, #48	; 0x30

00419d86 <.LVL514>:
  419d86:	930a      	str	r3, [sp, #40]	; 0x28
  419d88:	e7eb      	b.n	419d62 <.LVL510>

00419d8a <.LBB72>:
      COMBA_FORWARD;
  419d8a:	f04f 0e00 	mov.w	lr, #0
  419d8e:	e04d      	b.n	419e2c <.LVL541>

00419d90 <.LVL516>:
  419d90:	4649      	mov	r1, r9
  419d92:	46d1      	mov	r9, sl
  419d94:	46f2      	mov	sl, lr

00419d96 <.LVL517>:
      COMBA_STORE(dst->dp[ix]);
  419d96:	9b04      	ldr	r3, [sp, #16]
  419d98:	f843 1f04 	str.w	r1, [r3, #4]!

00419d9c <.LVL518>:
  419d9c:	9304      	str	r3, [sp, #16]

00419d9e <.LBE72>:
  for (ix = 0; ix < pa; ix++) {
  419d9e:	f10b 0b01 	add.w	fp, fp, #1
  419da2:	9b08      	ldr	r3, [sp, #32]
  419da4:	455b      	cmp	r3, fp
  419da6:	d05c      	beq.n	419e62 <.LBE69>

00419da8 <.LBB73>:
      ty = MIN(A->used-1, ix);
  419da8:	9b05      	ldr	r3, [sp, #20]
  419daa:	6819      	ldr	r1, [r3, #0]
  419dac:	1e4b      	subs	r3, r1, #1
  419dae:	455b      	cmp	r3, fp
  419db0:	bfa8      	it	ge
  419db2:	465b      	movge	r3, fp

00419db4 <.LVL521>:
      tx = ix - ty;
  419db4:	ebab 0003 	sub.w	r0, fp, r3

00419db8 <.LVL522>:
      tmpx = A->dp + tx;
  419db8:	9c09      	ldr	r4, [sp, #36]	; 0x24
  419dba:	eb04 0880 	add.w	r8, r4, r0, lsl #2

00419dbe <.LVL523>:
      tmpy = A->dp + ty;
  419dbe:	eb04 0c83 	add.w	ip, r4, r3, lsl #2

00419dc2 <.LVL524>:
      iy = MIN(A->used-tx, ty+1);
  419dc2:	1c5a      	adds	r2, r3, #1
  419dc4:	1a09      	subs	r1, r1, r0
  419dc6:	4291      	cmp	r1, r2
  419dc8:	bfa8      	it	ge
  419dca:	4611      	movge	r1, r2

00419dcc <.LVL525>:
      iy = MIN(iy, (ty-tx+1)>>1);
  419dcc:	1a1a      	subs	r2, r3, r0
  419dce:	3201      	adds	r2, #1
  419dd0:	1052      	asrs	r2, r2, #1
  419dd2:	428a      	cmp	r2, r1
  419dd4:	bfa8      	it	ge
  419dd6:	460a      	movge	r2, r1

00419dd8 <.LVL526>:
      for (iz = 0; iz < iy; iz++) {
  419dd8:	2a00      	cmp	r2, #0
  419dda:	ddd6      	ble.n	419d8a <.LBB72>
  419ddc:	f04f 0e00 	mov.w	lr, #0
  419de0:	4673      	mov	r3, lr

00419de2 <.LBB68>:
          SQRADD2(*tmpx++, *tmpy--);
  419de2:	f858 0b04 	ldr.w	r0, [r8], #4

00419de6 <.LVL528>:
  419de6:	f85c 1904 	ldr.w	r1, [ip], #-4

00419dea <.LVL529>:
  419dea:	fba0 0101 	umull	r0, r1, r0, r1

00419dee <.LVL530>:
  419dee:	eb10 0409 	adds.w	r4, r0, r9
  419df2:	f141 0500 	adc.w	r5, r1, #0

00419df6 <.LVL531>:
  419df6:	9500      	str	r5, [sp, #0]
  419df8:	2600      	movs	r6, #0
  419dfa:	9601      	str	r6, [sp, #4]
  419dfc:	e9dd 6700 	ldrd	r6, r7, [sp]
  419e00:	eb16 060a 	adds.w	r6, r6, sl
  419e04:	f147 0700 	adc.w	r7, r7, #0

00419e08 <.LVL532>:
  419e08:	1900      	adds	r0, r0, r4

00419e0a <.LVL533>:
  419e0a:	f141 0100 	adc.w	r1, r1, #0

00419e0e <.LVL534>:
  419e0e:	4681      	mov	r9, r0

00419e10 <.LVL535>:
  419e10:	9102      	str	r1, [sp, #8]
  419e12:	2100      	movs	r1, #0
  419e14:	9103      	str	r1, [sp, #12]
  419e16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]

00419e1a <.LVL536>:
  419e1a:	1980      	adds	r0, r0, r6
  419e1c:	f141 0100 	adc.w	r1, r1, #0

00419e20 <.LVL537>:
  419e20:	4682      	mov	sl, r0

00419e22 <.LVL538>:
  419e22:	4439      	add	r1, r7
  419e24:	448e      	add	lr, r1

00419e26 <.LBE68>:
      for (iz = 0; iz < iy; iz++) {
  419e26:	3301      	adds	r3, #1

00419e28 <.LVL540>:
  419e28:	429a      	cmp	r2, r3
  419e2a:	d1da      	bne.n	419de2 <.LBB68>

00419e2c <.LVL541>:
      if ((ix&1) == 0) {
  419e2c:	f01b 0f01 	tst.w	fp, #1
  419e30:	d1ae      	bne.n	419d90 <.LVL516>

00419e32 <.LBB69>:
          SQRADD(A->dp[ix>>1], A->dp[ix>>1]);
  419e32:	ea4f 036b 	mov.w	r3, fp, asr #1
  419e36:	3302      	adds	r3, #2
  419e38:	9a05      	ldr	r2, [sp, #20]

00419e3a <.LVL542>:
  419e3a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
  419e3e:	464a      	mov	r2, r9
  419e40:	2300      	movs	r3, #0
  419e42:	fbe1 2301 	umlal	r2, r3, r1, r1

00419e46 <.LVL543>:
  419e46:	4611      	mov	r1, r2

00419e48 <.LVL544>:
  419e48:	9306      	str	r3, [sp, #24]
  419e4a:	2300      	movs	r3, #0
  419e4c:	9307      	str	r3, [sp, #28]
  419e4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]

00419e52 <.LVL545>:
  419e52:	eb12 020a 	adds.w	r2, r2, sl
  419e56:	f143 0300 	adc.w	r3, r3, #0

00419e5a <.LVL546>:
  419e5a:	4691      	mov	r9, r2

00419e5c <.LVL547>:
  419e5c:	eb0e 0a03 	add.w	sl, lr, r3

00419e60 <.LVL548>:
  419e60:	e799      	b.n	419d96 <.LVL517>

00419e62 <.LBE69>:
  dst->used = pa;
  419e62:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  419e64:	4622      	mov	r2, r4
  419e66:	9908      	ldr	r1, [sp, #32]
  419e68:	460b      	mov	r3, r1
  419e6a:	6011      	str	r1, [r2, #0]
  fp_clamp (dst);
  419e6c:	b319      	cbz	r1, 419eb6 <.LCFI80+0x6>
  419e6e:	1e4a      	subs	r2, r1, #1
  419e70:	3301      	adds	r3, #1
  419e72:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
  419e76:	b963      	cbnz	r3, 419e92 <.LBE69+0x30>
  419e78:	eb04 0381 	add.w	r3, r4, r1, lsl #2
  419e7c:	3304      	adds	r3, #4
  419e7e:	e000      	b.n	419e82 <.LBE69+0x20>
  419e80:	4602      	mov	r2, r0
  419e82:	b1aa      	cbz	r2, 419eb0 <.LCFI80>
  419e84:	1e50      	subs	r0, r2, #1
  419e86:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  419e8a:	2900      	cmp	r1, #0
  419e8c:	d0f8      	beq.n	419e80 <.LBE69+0x1e>
  419e8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  419e90:	601a      	str	r2, [r3, #0]
  419e92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  419e94:	685b      	ldr	r3, [r3, #4]
  419e96:	990a      	ldr	r1, [sp, #40]	; 0x28
  419e98:	460a      	mov	r2, r1
  419e9a:	604b      	str	r3, [r1, #4]
  if (dst != B) {
  419e9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  419e9e:	428a      	cmp	r2, r1
  419ea0:	d002      	beq.n	419ea8 <.LVL550>
     fp_copy(dst, B);
  419ea2:	4610      	mov	r0, r2
  419ea4:	f007 fe82 	bl	421bac <.LFE31>

00419ea8 <.LVL550>:
}
  419ea8:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c

00419eac <.LCFI79>:
  419eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00419eb0 <.LCFI80>:
  419eb0:	2300      	movs	r3, #0
  419eb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  419eb4:	6013      	str	r3, [r2, #0]
  fp_clamp (dst);
  419eb6:	2300      	movs	r3, #0
  419eb8:	e7ed      	b.n	419e96 <.LBE69+0x34>

Disassembly of section .text.wc_AesCtrEncrypt%99:

00419eba <wc_AesCtrEncrypt>:

        int wc_AesCtrEncrypt(Aes* aes, byte* out, const byte* in, word32 sz)
        {
            byte* tmp;

            if (aes == NULL || out == NULL || in == NULL) {
  419eba:	2a00      	cmp	r2, #0
  419ebc:	bf18      	it	ne
  419ebe:	2900      	cmpne	r1, #0
  419ec0:	f000 80b4 	beq.w	41a02c <.LCFI23>
        {
  419ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

00419ec8 <.LCFI19>:
  419ec8:	b083      	sub	sp, #12

00419eca <.LCFI20>:
  419eca:	4604      	mov	r4, r0
  419ecc:	461e      	mov	r6, r3
  419ece:	4689      	mov	r9, r1
  419ed0:	4690      	mov	r8, r2
            if (aes == NULL || out == NULL || in == NULL) {
  419ed2:	2800      	cmp	r0, #0
  419ed4:	f000 80a7 	beq.w	41a026 <.LVL252>
                return BAD_FUNC_ARG;
            }
            tmp = (byte*)aes->tmp + AES_BLOCK_SIZE - aes->left;
  419ed8:	f500 7384 	add.w	r3, r0, #264	; 0x108

00419edc <.LVL213>:
  419edc:	461a      	mov	r2, r3

00419ede <.LVL214>:
  419ede:	9300      	str	r3, [sp, #0]
  419ee0:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
  419ee4:	f1c3 0110 	rsb	r1, r3, #16

00419ee8 <.LVL215>:
  419ee8:	4411      	add	r1, r2

00419eea <.LVL216>:

            /* consume any unused bytes left in aes->tmp */
            while (aes->left && sz) {
  419eea:	b18e      	cbz	r6, 419f10 <.LVL222+0x6>
  419eec:	b183      	cbz	r3, 419f10 <.LVL222+0x6>

00419eee <.LVL217>:
               *(out++) = *(in++) ^ *(tmp++);
  419eee:	f818 3b01 	ldrb.w	r3, [r8], #1

00419ef2 <.LVL218>:
  419ef2:	f811 2b01 	ldrb.w	r2, [r1], #1

00419ef6 <.LVL219>:
  419ef6:	4053      	eors	r3, r2
  419ef8:	f809 3b01 	strb.w	r3, [r9], #1

00419efc <.LVL220>:
               aes->left--;
  419efc:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
  419f00:	3b01      	subs	r3, #1
  419f02:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118

00419f06 <.LVL221>:
            while (aes->left && sz) {
  419f06:	f116 36ff 	adds.w	r6, r6, #4294967295

00419f0a <.LVL222>:
  419f0a:	d001      	beq.n	419f10 <.LVL222+0x6>
  419f0c:	2b00      	cmp	r3, #0
  419f0e:	d1ee      	bne.n	419eee <.LVL217>
               sz--;
            }

            /* do as many block size ops as possible */
            while (sz >= AES_BLOCK_SIZE) {
  419f10:	2e0f      	cmp	r6, #15
  419f12:	d952      	bls.n	419fba <.LBE187>
  419f14:	46b2      	mov	sl, r6
  419f16:	4647      	mov	r7, r8
  419f18:	464d      	mov	r5, r9
                wc_AesEncrypt(aes, (byte*)aes->reg, out);
  419f1a:	f104 03f8 	add.w	r3, r4, #248	; 0xf8
                xorbuf(out, in, AES_BLOCK_SIZE);

                out += AES_BLOCK_SIZE;
                in  += AES_BLOCK_SIZE;
                sz  -= AES_BLOCK_SIZE;
                aes->left = 0;
  419f1e:	f04f 0b00 	mov.w	fp, #0
  419f22:	9601      	str	r6, [sp, #4]
  419f24:	461e      	mov	r6, r3

00419f26 <.LVL223>:
  419f26:	e014      	b.n	419f52 <.LBE184+0x12>

00419f28 <.LVL224>:
  419f28:	1e69      	subs	r1, r5, #1
  419f2a:	1e78      	subs	r0, r7, #1
  419f2c:	f105 0e0f 	add.w	lr, r5, #15

00419f30 <.LBB184>:
        for (i = 0; i < count; i++) b[i] ^= m[i];
  419f30:	784b      	ldrb	r3, [r1, #1]
  419f32:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  419f36:	4053      	eors	r3, r2
  419f38:	f801 3f01 	strb.w	r3, [r1, #1]!
  419f3c:	4571      	cmp	r1, lr
  419f3e:	d1f7      	bne.n	419f30 <.LBB184>

00419f40 <.LBE184>:
                out += AES_BLOCK_SIZE;
  419f40:	3510      	adds	r5, #16
                in  += AES_BLOCK_SIZE;
  419f42:	3710      	adds	r7, #16
                sz  -= AES_BLOCK_SIZE;
  419f44:	f1aa 0a10 	sub.w	sl, sl, #16
                aes->left = 0;
  419f48:	f8c4 b118 	str.w	fp, [r4, #280]	; 0x118
            while (sz >= AES_BLOCK_SIZE) {
  419f4c:	f1ba 0f0f 	cmp.w	sl, #15
  419f50:	d929      	bls.n	419fa6 <.LVL237>
                wc_AesEncrypt(aes, (byte*)aes->reg, out);
  419f52:	462a      	mov	r2, r5
  419f54:	4631      	mov	r1, r6
  419f56:	4620      	mov	r0, r4
  419f58:	f7fa f93e 	bl	4141d8 <wc_AesEncrypt>

00419f5c <.LBB190>:
                if (++inOutCtr[i])  /* we're done unless we overflow */
  419f5c:	f894 3107 	ldrb.w	r3, [r4, #263]	; 0x107
  419f60:	3301      	adds	r3, #1
  419f62:	b2db      	uxtb	r3, r3
  419f64:	f884 3107 	strb.w	r3, [r4, #263]	; 0x107
  419f68:	b95b      	cbnz	r3, 419f82 <.LBB192>
  419f6a:	f204 1207 	addw	r2, r4, #263	; 0x107
  419f6e:	4631      	mov	r1, r6

00419f70 <.LVL232>:
  419f70:	f812 3c01 	ldrb.w	r3, [r2, #-1]
  419f74:	3301      	adds	r3, #1
  419f76:	b2db      	uxtb	r3, r3
  419f78:	f802 3d01 	strb.w	r3, [r2, #-1]!

00419f7c <.LVL233>:
  419f7c:	b90b      	cbnz	r3, 419f82 <.LBB192>

00419f7e <.LVL234>:
            for (i = AES_BLOCK_SIZE - 1; i >= 0; i--) {
  419f7e:	428a      	cmp	r2, r1
  419f80:	d1f6      	bne.n	419f70 <.LVL232>

00419f82 <.LBB192>:
    if (((wolfssl_word)buf | (wolfssl_word)mask | count) % WOLFSSL_WORD_SIZE == 0)
  419f82:	ea45 0307 	orr.w	r3, r5, r7
  419f86:	f013 0f03 	tst.w	r3, #3
  419f8a:	d1cd      	bne.n	419f28 <.LVL224>
  419f8c:	1f29      	subs	r1, r5, #4
  419f8e:	1f38      	subs	r0, r7, #4
  419f90:	f105 0e0c 	add.w	lr, r5, #12

00419f94 <.LBB187>:
    for (i = 0; i < n; i++) r[i] ^= a[i];
  419f94:	684b      	ldr	r3, [r1, #4]
  419f96:	f850 2f04 	ldr.w	r2, [r0, #4]!
  419f9a:	4053      	eors	r3, r2
  419f9c:	f841 3f04 	str.w	r3, [r1, #4]!
  419fa0:	4571      	cmp	r1, lr
  419fa2:	d1f7      	bne.n	419f94 <.LBB187>
  419fa4:	e7cc      	b.n	419f40 <.LBE184>

00419fa6 <.LVL237>:
  419fa6:	9e01      	ldr	r6, [sp, #4]
  419fa8:	f1a6 0310 	sub.w	r3, r6, #16
  419fac:	f023 030f 	bic.w	r3, r3, #15
  419fb0:	3310      	adds	r3, #16
  419fb2:	4499      	add	r9, r3
  419fb4:	4498      	add	r8, r3
  419fb6:	f006 060f 	and.w	r6, r6, #15

00419fba <.LBE187>:
            }

            /* handle non block size remaining and store unused byte count in left */
            if (sz) {
  419fba:	b91e      	cbnz	r6, 419fc4 <.LCFI22>
                    *(out++) = *(in++) ^ *(tmp++);
                    aes->left--;
                }
            }

            return 0;
  419fbc:	2000      	movs	r0, #0
        }
  419fbe:	b003      	add	sp, #12

00419fc0 <.LCFI21>:
  419fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00419fc4 <.LCFI22>:
                wc_AesEncrypt(aes, (byte*)aes->reg, (byte*)aes->tmp);
  419fc4:	f104 05f8 	add.w	r5, r4, #248	; 0xf8
  419fc8:	9a00      	ldr	r2, [sp, #0]
  419fca:	4629      	mov	r1, r5
  419fcc:	4620      	mov	r0, r4
  419fce:	f7fa f903 	bl	4141d8 <wc_AesEncrypt>

00419fd2 <.LBB193>:
                if (++inOutCtr[i])  /* we're done unless we overflow */
  419fd2:	f894 3107 	ldrb.w	r3, [r4, #263]	; 0x107
  419fd6:	3301      	adds	r3, #1
  419fd8:	b2db      	uxtb	r3, r3
  419fda:	f884 3107 	strb.w	r3, [r4, #263]	; 0x107
  419fde:	b95b      	cbnz	r3, 419ff8 <.LBE193>
  419fe0:	f204 1207 	addw	r2, r4, #263	; 0x107
  419fe4:	4629      	mov	r1, r5

00419fe6 <.LVL241>:
  419fe6:	f812 3c01 	ldrb.w	r3, [r2, #-1]
  419fea:	3301      	adds	r3, #1
  419fec:	b2db      	uxtb	r3, r3
  419fee:	f802 3d01 	strb.w	r3, [r2, #-1]!

00419ff2 <.LVL242>:
  419ff2:	b90b      	cbnz	r3, 419ff8 <.LBE193>

00419ff4 <.LVL243>:
            for (i = AES_BLOCK_SIZE - 1; i >= 0; i--) {
  419ff4:	4291      	cmp	r1, r2
  419ff6:	d1f6      	bne.n	419fe6 <.LVL241>

00419ff8 <.LBE193>:
                aes->left = AES_BLOCK_SIZE;
  419ff8:	2310      	movs	r3, #16
  419ffa:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118

00419ffe <.LVL245>:
  419ffe:	f109 39ff 	add.w	r9, r9, #4294967295

0041a002 <.LVL246>:
  41a002:	4446      	add	r6, r8

0041a004 <.LVL247>:
  41a004:	9900      	ldr	r1, [sp, #0]

0041a006 <.LVL248>:
                    *(out++) = *(in++) ^ *(tmp++);
  41a006:	f818 3b01 	ldrb.w	r3, [r8], #1

0041a00a <.LVL249>:
  41a00a:	f811 2b01 	ldrb.w	r2, [r1], #1

0041a00e <.LVL250>:
  41a00e:	4053      	eors	r3, r2
  41a010:	f809 3f01 	strb.w	r3, [r9, #1]!
                    aes->left--;
  41a014:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
  41a018:	3b01      	subs	r3, #1
  41a01a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118

0041a01e <.LVL251>:
                while (sz--) {
  41a01e:	45b0      	cmp	r8, r6
  41a020:	d1f1      	bne.n	41a006 <.LVL248>
            return 0;
  41a022:	2000      	movs	r0, #0
  41a024:	e7cb      	b.n	419fbe <.LBE187+0x4>

0041a026 <.LVL252>:
                return BAD_FUNC_ARG;
  41a026:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041a02a <.LVL253>:
  41a02a:	e7c8      	b.n	419fbe <.LBE187+0x4>

0041a02c <.LCFI23>:
  41a02c:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041a030 <.LVL255>:
        }
  41a030:	4770      	bx	lr

Disassembly of section .text.fp_montgomery_reduce%100:

0041a032 <fp_montgomery_reduce>:
{
  41a032:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0041a036 <.LCFI19>:
  41a036:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234

0041a03a <.LCFI20>:
   if (m->used > (FP_SIZE/2)) {
  41a03a:	f8d1 b000 	ldr.w	fp, [r1]
  41a03e:	f1bb 0f44 	cmp.w	fp, #68	; 0x44
  41a042:	dd03      	ble.n	41a04c <.LCFI22>

0041a044 <.LVL161>:
}
  41a044:	f50d 7d0d 	add.w	sp, sp, #564	; 0x234

0041a048 <.LCFI21>:
  41a048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0041a04c <.LCFI22>:
  41a04c:	4691      	mov	r9, r2
  41a04e:	4688      	mov	r8, r1
  41a050:	4604      	mov	r4, r0
  41a052:	9000      	str	r0, [sp, #0]
   XMEMSET(c, 0, sizeof(c));
  41a054:	f44f 7209 	mov.w	r2, #548	; 0x224

0041a058 <.LVL163>:
  41a058:	2100      	movs	r1, #0

0041a05a <.LVL164>:
  41a05a:	a803      	add	r0, sp, #12

0041a05c <.LVL165>:
  41a05c:	f004 fa5c 	bl	41e518 <.LFE14>

0041a060 <.LVL166>:
   oldused = a->used;
  41a060:	6823      	ldr	r3, [r4, #0]
  41a062:	4619      	mov	r1, r3
  41a064:	9301      	str	r3, [sp, #4]

0041a066 <.LVL167>:
   for (x = 0; x < oldused; x++) {
  41a066:	2b00      	cmp	r3, #0
  41a068:	dd0b      	ble.n	41a082 <.LVL169>
  41a06a:	4623      	mov	r3, r4
  41a06c:	3304      	adds	r3, #4
  41a06e:	aa02      	add	r2, sp, #8
  41a070:	1c48      	adds	r0, r1, #1
  41a072:	eb04 0080 	add.w	r0, r4, r0, lsl #2

0041a076 <.LVL168>:
       c[x] = a->dp[x];
  41a076:	f853 1f04 	ldr.w	r1, [r3, #4]!
  41a07a:	f842 1f04 	str.w	r1, [r2, #4]!
   for (x = 0; x < oldused; x++) {
  41a07e:	4283      	cmp	r3, r0
  41a080:	d1f9      	bne.n	41a076 <.LVL168>

0041a082 <.LVL169>:
   for (x = 0; x < pa; x++) {
  41a082:	f1bb 0f00 	cmp.w	fp, #0
  41a086:	dd30      	ble.n	41a0ea <.LBE9>
  41a088:	af02      	add	r7, sp, #8
  41a08a:	ea4f 038b 	mov.w	r3, fp, lsl #2
  41a08e:	aa03      	add	r2, sp, #12
  41a090:	eb02 0e03 	add.w	lr, r2, r3
  41a094:	3b04      	subs	r3, #4
  41a096:	eb02 0c03 	add.w	ip, r2, r3

0041a09a <.LBB6>:
           PROPCARRY;
  41a09a:	f04f 0a01 	mov.w	sl, #1
  41a09e:	e00a      	b.n	41a0b6 <.LBB9>

0041a0a0 <.LVL170>:
  41a0a0:	4652      	mov	r2, sl

0041a0a2 <.LVL171>:
  41a0a2:	680b      	ldr	r3, [r1, #0]
  41a0a4:	4413      	add	r3, r2
  41a0a6:	f841 3b04 	str.w	r3, [r1], #4

0041a0aa <.LBE7>:
       while (cy) {
  41a0aa:	4293      	cmp	r3, r2
  41a0ac:	d3f8      	bcc.n	41a0a0 <.LVL170>

0041a0ae <.LVL173>:
  41a0ae:	f10e 0e04 	add.w	lr, lr, #4

0041a0b2 <.LBE6>:
   for (x = 0; x < pa; x++) {
  41a0b2:	4567      	cmp	r7, ip
  41a0b4:	d019      	beq.n	41a0ea <.LBE9>

0041a0b6 <.LBB9>:
       LOOP_START;
  41a0b6:	f857 5f04 	ldr.w	r5, [r7, #4]!
  41a0ba:	fb05 f509 	mul.w	r5, r5, r9

0041a0be <.LVL175>:
       tmpm = m->dp;
  41a0be:	f108 0008 	add.w	r0, r8, #8

0041a0c2 <.LVL176>:
  41a0c2:	4676      	mov	r6, lr
  41a0c4:	4639      	mov	r1, r7
  41a0c6:	2200      	movs	r2, #0

0041a0c8 <.LBB8>:
          INNERMUL;
  41a0c8:	f850 4b04 	ldr.w	r4, [r0], #4

0041a0cc <.LVL178>:
  41a0cc:	2300      	movs	r3, #0
  41a0ce:	fbe5 2304 	umlal	r2, r3, r5, r4

0041a0d2 <.LVL179>:
  41a0d2:	680c      	ldr	r4, [r1, #0]
  41a0d4:	1912      	adds	r2, r2, r4
  41a0d6:	f143 0300 	adc.w	r3, r3, #0

0041a0da <.LVL180>:
  41a0da:	f841 2b04 	str.w	r2, [r1], #4

0041a0de <.LVL181>:
  41a0de:	461a      	mov	r2, r3

0041a0e0 <.LBE8>:
       for (; y < pa; y++) {
  41a0e0:	42b1      	cmp	r1, r6
  41a0e2:	d1f1      	bne.n	41a0c8 <.LBB8>

0041a0e4 <.LVL183>:
       while (cy) {
  41a0e4:	2b00      	cmp	r3, #0
  41a0e6:	d1dc      	bne.n	41a0a2 <.LVL171>
  41a0e8:	e7e1      	b.n	41a0ae <.LVL173>

0041a0ea <.LBE9>:
  _c   = c + pa;
  41a0ea:	ea4f 018b 	mov.w	r1, fp, lsl #2
  41a0ee:	ab03      	add	r3, sp, #12
  41a0f0:	1858      	adds	r0, r3, r1

0041a0f2 <.LVL185>:
  tmpm = a->dp;
  41a0f2:	9c00      	ldr	r4, [sp, #0]
  41a0f4:	4623      	mov	r3, r4
  41a0f6:	f104 0208 	add.w	r2, r4, #8

0041a0fa <.LVL186>:
  for (x = 0; x < pa+1; x++) {
  41a0fa:	f10b 0601 	add.w	r6, fp, #1
  41a0fe:	2e00      	cmp	r6, #0
  41a100:	dd22      	ble.n	41a148 <.LVL198>
  41a102:	3304      	adds	r3, #4
  41a104:	1855      	adds	r5, r2, r1

0041a106 <.LVL187>:
     *tmpm++ = *_c++;
  41a106:	f850 4b04 	ldr.w	r4, [r0], #4

0041a10a <.LVL188>:
  41a10a:	f843 4f04 	str.w	r4, [r3, #4]!

0041a10e <.LVL189>:
  for (x = 0; x < pa+1; x++) {
  41a10e:	42ab      	cmp	r3, r5
  41a110:	d1f9      	bne.n	41a106 <.LVL187>
  41a112:	1d0b      	adds	r3, r1, #4
  41a114:	441a      	add	r2, r3

0041a116 <.LVL190>:
  for (; x < oldused; x++) {
  41a116:	9b01      	ldr	r3, [sp, #4]
  41a118:	42b3      	cmp	r3, r6
  41a11a:	dd3a      	ble.n	41a192 <.LVL202>
  for (x = 0; x < pa+1; x++) {
  41a11c:	4633      	mov	r3, r6

0041a11e <.LVL191>:
     *tmpm++ = 0;
  41a11e:	2000      	movs	r0, #0

0041a120 <.LVL192>:
  41a120:	9c01      	ldr	r4, [sp, #4]

0041a122 <.LVL193>:
  41a122:	f842 0b04 	str.w	r0, [r2], #4

0041a126 <.LVL194>:
  for (; x < oldused; x++) {
  41a126:	3301      	adds	r3, #1

0041a128 <.LVL195>:
  41a128:	429c      	cmp	r4, r3
  41a12a:	d1fa      	bne.n	41a122 <.LVL193>

0041a12c <.LVL196>:
  a->used = pa+1;
  41a12c:	9b00      	ldr	r3, [sp, #0]
  41a12e:	601e      	str	r6, [r3, #0]
  fp_clamp(a);
  41a130:	b1f6      	cbz	r6, 41a170 <.LVL199+0x1e>
  41a132:	f10b 0302 	add.w	r3, fp, #2
  41a136:	9800      	ldr	r0, [sp, #0]
  41a138:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  41a13c:	b993      	cbnz	r3, 41a164 <.LVL199+0x12>
  41a13e:	f101 0308 	add.w	r3, r1, #8
  41a142:	4403      	add	r3, r0
  41a144:	465a      	mov	r2, fp

0041a146 <.LVL197>:
  41a146:	e005      	b.n	41a154 <.LVL199+0x2>

0041a148 <.LVL198>:
  for (; x < oldused; x++) {
  41a148:	9b01      	ldr	r3, [sp, #4]
  41a14a:	2b00      	cmp	r3, #0
  41a14c:	ddee      	ble.n	41a12c <.LVL196>
  for (x = 0; x < pa+1; x++) {
  41a14e:	2300      	movs	r3, #0
  41a150:	e7e5      	b.n	41a11e <.LVL191>

0041a152 <.LVL199>:
  fp_clamp(a);
  41a152:	4602      	mov	r2, r0
  41a154:	b14a      	cbz	r2, 41a16a <.LVL199+0x18>
  41a156:	1e50      	subs	r0, r2, #1
  41a158:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  41a15c:	2900      	cmp	r1, #0
  41a15e:	d0f8      	beq.n	41a152 <.LVL199>
  41a160:	9b00      	ldr	r3, [sp, #0]
  41a162:	601a      	str	r2, [r3, #0]
  41a164:	9b00      	ldr	r3, [sp, #0]
  41a166:	685b      	ldr	r3, [r3, #4]
  41a168:	e003      	b.n	41a172 <.LVL199+0x20>
  41a16a:	2300      	movs	r3, #0
  41a16c:	9a00      	ldr	r2, [sp, #0]
  41a16e:	6013      	str	r3, [r2, #0]
  41a170:	2300      	movs	r3, #0
  41a172:	9c00      	ldr	r4, [sp, #0]
  41a174:	6063      	str	r3, [r4, #4]
  if (fp_cmp_mag (a, m) != FP_LT) {
  41a176:	4641      	mov	r1, r8
  41a178:	4620      	mov	r0, r4
  41a17a:	f005 ff5c 	bl	420036 <.LFE16>

0041a17e <.LVL200>:
  41a17e:	f1b0 3fff 	cmp.w	r0, #4294967295
  41a182:	f43f af5f 	beq.w	41a044 <.LVL161>
    s_fp_sub (a, m, a);
  41a186:	4622      	mov	r2, r4
  41a188:	4641      	mov	r1, r8
  41a18a:	4620      	mov	r0, r4
  41a18c:	f002 f8a8 	bl	41c2e0 <.LBE840>

0041a190 <.LVL201>:
  41a190:	e758      	b.n	41a044 <.LVL161>

0041a192 <.LVL202>:
  a->used = pa+1;
  41a192:	9b00      	ldr	r3, [sp, #0]
  41a194:	601e      	str	r6, [r3, #0]
  41a196:	e7cc      	b.n	41a132 <.LVL196+0x6>

Disassembly of section .text.rsa_test%101:

0041a198 <rsa_test>:
{
  41a198:	b570      	push	{r4, r5, r6, lr}

0041a19a <.LCFI56>:
  41a19a:	f5ad 5d9c 	sub.w	sp, sp, #4992	; 0x1380

0041a19e <.LCFI57>:
  41a19e:	b084      	sub	sp, #16

0041a1a0 <.LCFI58>:
    word32 idx = 0;
  41a1a0:	2200      	movs	r2, #0
  41a1a2:	4b51      	ldr	r3, [pc, #324]	; (41a2e8 <.LVL178>)
  41a1a4:	f241 3190 	movw	r1, #5008	; 0x1390
  41a1a8:	4469      	add	r1, sp
  41a1aa:	50ca      	str	r2, [r1, r3]
    byte   in[] = "Everyone gets Friday off.";
  41a1ac:	ac82      	add	r4, sp, #520	; 0x208
  41a1ae:	4d4f      	ldr	r5, [pc, #316]	; (41a2ec <.LVL178+0x4>)
  41a1b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  41a1b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  41a1b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  41a1b8:	c403      	stmia	r4!, {r0, r1}
  41a1ba:	8022      	strh	r2, [r4, #0]
    word32 inLen = (word32)strlen((char*)in);
  41a1bc:	a882      	add	r0, sp, #520	; 0x208
  41a1be:	f002 fa5f 	bl	41c680 <strlen>

0041a1c2 <.LVL152>:
  41a1c2:	4605      	mov	r5, r0

0041a1c4 <.LVL153>:
    appData.rsa_test_result = 9;
  41a1c4:	2209      	movs	r2, #9
  41a1c6:	4b4a      	ldr	r3, [pc, #296]	; (41a2f0 <.LVL178+0x8>)
  41a1c8:	63da      	str	r2, [r3, #60]	; 0x3c
    tmp = (byte*)malloc(FOURK_BUF);
  41a1ca:	f44f 5080 	mov.w	r0, #4096	; 0x1000

0041a1ce <.LVL154>:
  41a1ce:	f008 f895 	bl	4222fc <.LFE0>

0041a1d2 <.LVL155>:
    if (tmp != NULL)
  41a1d2:	4604      	mov	r4, r0
  41a1d4:	b110      	cbz	r0, 41a1dc <.LVL155+0xa>
        appData.rsa_test_result--;
  41a1d6:	2208      	movs	r2, #8
  41a1d8:	4b45      	ldr	r3, [pc, #276]	; (41a2f0 <.LVL178+0x8>)
  41a1da:	63da      	str	r2, [r3, #60]	; 0x3c
    XMEMCPY(tmp, client_key_der_2048, sizeof_client_key_der_2048);
  41a1dc:	f44f 6695 	mov.w	r6, #1192	; 0x4a8
  41a1e0:	4632      	mov	r2, r6
  41a1e2:	4944      	ldr	r1, [pc, #272]	; (41a2f4 <.LVL178+0xc>)
  41a1e4:	4620      	mov	r0, r4

0041a1e6 <.LVL156>:
  41a1e6:	f000 fbcd 	bl	41a984 <.LFE14>

0041a1ea <.LVL157>:
    wc_InitRsaKey(&key, 0);
  41a1ea:	2100      	movs	r1, #0
  41a1ec:	a88e      	add	r0, sp, #568	; 0x238
  41a1ee:	f008 f8e9 	bl	4223c4 <.LFE14>

0041a1f2 <.LVL158>:
    ret = wc_RsaPrivateKeyDecode(tmp, &idx, &key, (word32)bytes);
  41a1f2:	4633      	mov	r3, r6
  41a1f4:	aa8e      	add	r2, sp, #568	; 0x238
  41a1f6:	a989      	add	r1, sp, #548	; 0x224
  41a1f8:	4620      	mov	r0, r4
  41a1fa:	f001 fa97 	bl	41b72c <.LFE28>

0041a1fe <.LVL159>:
    if (ret == 0) appData.rsa_test_result--;
  41a1fe:	b918      	cbnz	r0, 41a208 <.LVL159+0xa>
  41a200:	4a3b      	ldr	r2, [pc, #236]	; (41a2f0 <.LVL178+0x8>)
  41a202:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  41a204:	3b01      	subs	r3, #1
  41a206:	63d3      	str	r3, [r2, #60]	; 0x3c
    ret = CRYPT_RNG_Initialize((CRYPT_RNG_CTX*)&rng);
  41a208:	a88a      	add	r0, sp, #552	; 0x228

0041a20a <.LVL160>:
  41a20a:	f008 f837 	bl	42227c <.LFE15>

0041a20e <.LVL161>:
    if (ret == 0) appData.rsa_test_result--;
  41a20e:	b918      	cbnz	r0, 41a218 <.LVL161+0xa>
  41a210:	4a37      	ldr	r2, [pc, #220]	; (41a2f0 <.LVL178+0x8>)
  41a212:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  41a214:	3b01      	subs	r3, #1
  41a216:	63d3      	str	r3, [r2, #60]	; 0x3c
    ret = wc_RsaPublicEncrypt(in, inLen, out, sizeof(out), &key, &rng);
  41a218:	ab8a      	add	r3, sp, #552	; 0x228
  41a21a:	9301      	str	r3, [sp, #4]
  41a21c:	ab8e      	add	r3, sp, #568	; 0x238
  41a21e:	9300      	str	r3, [sp, #0]
  41a220:	f44f 7380 	mov.w	r3, #256	; 0x100
  41a224:	aa42      	add	r2, sp, #264	; 0x108
  41a226:	4629      	mov	r1, r5
  41a228:	a882      	add	r0, sp, #520	; 0x208

0041a22a <.LVL162>:
  41a22a:	f007 fc99 	bl	421b60 <wc_RsaPublicEncrypt>

0041a22e <.LVL163>:
    if (ret >= 0) appData.rsa_test_result--;
  41a22e:	1e01      	subs	r1, r0, #0
  41a230:	db03      	blt.n	41a23a <.LVL163+0xc>
  41a232:	4a2f      	ldr	r2, [pc, #188]	; (41a2f0 <.LVL178+0x8>)
  41a234:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  41a236:	3b01      	subs	r3, #1
  41a238:	63d3      	str	r3, [r2, #60]	; 0x3c
    ret = wc_RsaPrivateDecrypt(out, ret, plain, sizeof(plain), &key);
  41a23a:	ab8e      	add	r3, sp, #568	; 0x238
  41a23c:	9300      	str	r3, [sp, #0]
  41a23e:	f44f 7380 	mov.w	r3, #256	; 0x100
  41a242:	aa02      	add	r2, sp, #8
  41a244:	a842      	add	r0, sp, #264	; 0x108

0041a246 <.LVL164>:
  41a246:	f007 fbd7 	bl	4219f8 <.LFE56>

0041a24a <.LVL165>:
    if (ret >= 0) appData.rsa_test_result--;
  41a24a:	2800      	cmp	r0, #0
  41a24c:	db03      	blt.n	41a256 <.LVL165+0xc>
  41a24e:	4a28      	ldr	r2, [pc, #160]	; (41a2f0 <.LVL178+0x8>)
  41a250:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  41a252:	3b01      	subs	r3, #1
  41a254:	63d3      	str	r3, [r2, #60]	; 0x3c
    if (!(memcmp(plain, in, inLen))) appData.rsa_test_result--;
  41a256:	462a      	mov	r2, r5
  41a258:	a982      	add	r1, sp, #520	; 0x208
  41a25a:	a802      	add	r0, sp, #8

0041a25c <.LVL166>:
  41a25c:	f006 f908 	bl	420470 <memcmp>

0041a260 <.LVL167>:
  41a260:	b918      	cbnz	r0, 41a26a <.LVL167+0xa>
  41a262:	4a23      	ldr	r2, [pc, #140]	; (41a2f0 <.LVL178+0x8>)
  41a264:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  41a266:	3b01      	subs	r3, #1
  41a268:	63d3      	str	r3, [r2, #60]	; 0x3c
    ret = wc_RsaSSL_Sign(in, inLen, out, sizeof(out), &key, &rng);
  41a26a:	ab8a      	add	r3, sp, #552	; 0x228
  41a26c:	9301      	str	r3, [sp, #4]
  41a26e:	ab8e      	add	r3, sp, #568	; 0x238
  41a270:	9300      	str	r3, [sp, #0]
  41a272:	f44f 7380 	mov.w	r3, #256	; 0x100
  41a276:	aa42      	add	r2, sp, #264	; 0x108
  41a278:	4629      	mov	r1, r5
  41a27a:	a882      	add	r0, sp, #520	; 0x208
  41a27c:	f007 fbd0 	bl	421a20 <.LFE34>

0041a280 <.LVL168>:
    if (ret >= 0) appData.rsa_test_result--;
  41a280:	1e06      	subs	r6, r0, #0
  41a282:	db03      	blt.n	41a28c <.LVL168+0xc>
  41a284:	4a1a      	ldr	r2, [pc, #104]	; (41a2f0 <.LVL178+0x8>)
  41a286:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  41a288:	3b01      	subs	r3, #1
  41a28a:	63d3      	str	r3, [r2, #60]	; 0x3c
    memset(plain, 0, sizeof(plain));
  41a28c:	f44f 7580 	mov.w	r5, #256	; 0x100

0041a290 <.LVL169>:
  41a290:	462a      	mov	r2, r5
  41a292:	2100      	movs	r1, #0
  41a294:	a802      	add	r0, sp, #8

0041a296 <.LVL170>:
  41a296:	f004 f93f 	bl	41e518 <.LFE14>

0041a29a <.LVL171>:
    ret = wc_RsaSSL_Verify(out, ret, plain, sizeof(plain), &key);
  41a29a:	ab8e      	add	r3, sp, #568	; 0x238
  41a29c:	9300      	str	r3, [sp, #0]
  41a29e:	462b      	mov	r3, r5
  41a2a0:	aa02      	add	r2, sp, #8
  41a2a2:	4631      	mov	r1, r6
  41a2a4:	a842      	add	r0, sp, #264	; 0x108
  41a2a6:	f007 face 	bl	421846 <.LFE7>

0041a2aa <.LVL172>:
    if (ret >= 0) appData.rsa_test_result--;
  41a2aa:	1e02      	subs	r2, r0, #0
  41a2ac:	db03      	blt.n	41a2b6 <.LVL172+0xc>
  41a2ae:	4910      	ldr	r1, [pc, #64]	; (41a2f0 <.LVL178+0x8>)
  41a2b0:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  41a2b2:	3b01      	subs	r3, #1
  41a2b4:	63cb      	str	r3, [r1, #60]	; 0x3c
    if (!(memcmp(plain, in, ret))) appData.rsa_test_result--;
  41a2b6:	a982      	add	r1, sp, #520	; 0x208
  41a2b8:	a802      	add	r0, sp, #8

0041a2ba <.LVL173>:
  41a2ba:	f006 f8d9 	bl	420470 <memcmp>

0041a2be <.LVL174>:
  41a2be:	b918      	cbnz	r0, 41a2c8 <.LVL174+0xa>
  41a2c0:	4a0b      	ldr	r2, [pc, #44]	; (41a2f0 <.LVL178+0x8>)
  41a2c2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  41a2c4:	3b01      	subs	r3, #1
  41a2c6:	63d3      	str	r3, [r2, #60]	; 0x3c
    XMEMCPY(tmp, client_cert_der_2048, sizeof_client_cert_der_2048);
  41a2c8:	f240 429c 	movw	r2, #1180	; 0x49c
  41a2cc:	490a      	ldr	r1, [pc, #40]	; (41a2f8 <.LVL178+0x10>)
  41a2ce:	4620      	mov	r0, r4
  41a2d0:	f000 fb58 	bl	41a984 <.LFE14>

0041a2d4 <.LVL175>:
    wc_FreeRsaKey(&key);
  41a2d4:	a88e      	add	r0, sp, #568	; 0x238
  41a2d6:	f004 fb2d 	bl	41e934 <.LFE165>

0041a2da <.LVL176>:
    free(tmp);
  41a2da:	4620      	mov	r0, r4
  41a2dc:	f008 f816 	bl	42230c <.LFE0>

0041a2e0 <.LVL177>:
}
  41a2e0:	f50d 5d9c 	add.w	sp, sp, #4992	; 0x1380
  41a2e4:	b004      	add	sp, #16

0041a2e6 <.LCFI59>:
  41a2e6:	bd70      	pop	{r4, r5, r6, pc}

0041a2e8 <.LVL178>:
  41a2e8:	ffffee94 	.word	0xffffee94
  41a2ec:	0040e2e4 	.word	0x0040e2e4
  41a2f0:	2040d534 	.word	0x2040d534
  41a2f4:	00411230 	.word	0x00411230
  41a2f8:	00411b74 	.word	0x00411b74

Disassembly of section .text.DesSetKey%102:

0041a2fc <DesSetKey>:

        *left = rotrFixed(*left^work, 4U);
    }

    static int DesSetKey(const byte* key, int dir, word32* out)
    {
  41a2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0041a300 <.LCFI4>:
  41a300:	b0a1      	sub	sp, #132	; 0x84

0041a302 <.LCFI5>:
  41a302:	9101      	str	r1, [sp, #4]
  41a304:	9200      	str	r2, [sp, #0]

0041a306 <.LVL85>:
  41a306:	4d51      	ldr	r5, [pc, #324]	; (41a44c <.LBE156+0x8>)
  41a308:	1e6a      	subs	r2, r5, #1

0041a30a <.LVL86>:
  41a30a:	f10d 0107 	add.w	r1, sp, #7

0041a30e <.LVL87>:
  41a30e:	3537      	adds	r5, #55	; 0x37

0041a310 <.LBB155>:

            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
                l = pc1[j] - 1;                    /* integer bit location        */
                m = l & 07;                        /* find bit                    */
                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
                    bytebit[m])                    /* and which bit of that byte  */
  41a310:	4e4f      	ldr	r6, [pc, #316]	; (41a450 <.LBE156+0xc>)

0041a312 <.LVL88>:
                l = pc1[j] - 1;                    /* integer bit location        */
  41a312:	f812 3f01 	ldrb.w	r3, [r2, #1]!

0041a316 <.LVL89>:
  41a316:	3b01      	subs	r3, #1

0041a318 <.LVL90>:
                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
  41a318:	10dc      	asrs	r4, r3, #3
  41a31a:	5d04      	ldrb	r4, [r0, r4]
                m = l & 07;                        /* find bit                    */
  41a31c:	f003 0307 	and.w	r3, r3, #7

0041a320 <.LVL91>:
                pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
  41a320:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]

0041a324 <.LVL92>:
                    ? 1 : 0;                       /* and store 1-bit result      */
  41a324:	421c      	tst	r4, r3
  41a326:	bf14      	ite	ne
  41a328:	2301      	movne	r3, #1
  41a32a:	2300      	moveq	r3, #0
  41a32c:	f801 3f01 	strb.w	r3, [r1, #1]!

0041a330 <.LVL93>:
            for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
  41a330:	42aa      	cmp	r2, r5
  41a332:	d1ee      	bne.n	41a312 <.LVL88>
  41a334:	4e47      	ldr	r6, [pc, #284]	; (41a454 <.LBE156+0x10>)
  41a336:	9b00      	ldr	r3, [sp, #0]
  41a338:	f103 0904 	add.w	r9, r3, #4
  41a33c:	f106 0810 	add.w	r8, r6, #16
  41a340:	46ce      	mov	lr, r9
            }

            for (i = 0; i < 16; i++) {            /* key chunk for each iteration */
                XMEMSET(ks, 0, 8);                /* Clear key schedule */
  41a342:	a81e      	add	r0, sp, #120	; 0x78

0041a344 <.LVL94>:
  41a344:	f8df c114 	ldr.w	ip, [pc, #276]	; 41a45c <.LBE156+0x18>

                /* rotate left and right halves independently */
                for (j = 0; j < 48; j++) {        /* select bits individually     */
                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
                        l= j % 6;                 /* mask it in if it's there     */
                        ks[j/6] |= bytebit[l] >> 2;
  41a348:	4d43      	ldr	r5, [pc, #268]	; (41a458 <.LBE156+0x14>)
  41a34a:	4c41      	ldr	r4, [pc, #260]	; (41a450 <.LBE156+0xc>)
  41a34c:	46b3      	mov	fp, r6
  41a34e:	e041      	b.n	41a3d4 <.LVL103+0x4>

0041a350 <.LVL95>:
  41a350:	f10c 37ff 	add.w	r7, ip, #4294967295
                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
  41a354:	2300      	movs	r3, #0
  41a356:	e002      	b.n	41a35e <.LVL96+0x6>

0041a358 <.LVL96>:
                for (j = 0; j < 48; j++) {        /* select bits individually     */
  41a358:	3301      	adds	r3, #1
  41a35a:	2b30      	cmp	r3, #48	; 0x30
  41a35c:	d016      	beq.n	41a38c <.LVL100>
                    if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
  41a35e:	f817 2f01 	ldrb.w	r2, [r7, #1]!
  41a362:	a920      	add	r1, sp, #128	; 0x80
  41a364:	440a      	add	r2, r1
  41a366:	f812 2c41 	ldrb.w	r2, [r2, #-65]
  41a36a:	2a00      	cmp	r2, #0
  41a36c:	d0f4      	beq.n	41a358 <.LVL96>

0041a36e <.LVL99>:
                        ks[j/6] |= bytebit[l] >> 2;
  41a36e:	fb85 1203 	smull	r1, r2, r5, r3
  41a372:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
                        l= j % 6;                 /* mask it in if it's there     */
  41a376:	eb02 0142 	add.w	r1, r2, r2, lsl #1
  41a37a:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
                        ks[j/6] |= bytebit[l] >> 2;
  41a37e:	f854 6021 	ldr.w	r6, [r4, r1, lsl #2]
  41a382:	5c81      	ldrb	r1, [r0, r2]
  41a384:	ea41 01a6 	orr.w	r1, r1, r6, asr #2
  41a388:	5481      	strb	r1, [r0, r2]
  41a38a:	e7e5      	b.n	41a358 <.LVL96>

0041a38c <.LVL100>:
                    }
                }

                /* Now convert to odd/even interleaved form for use in F */
                out[2*i] = ((word32) ks[0] << 24)
  41a38c:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
                         | ((word32) ks[2] << 16)
  41a390:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a

0041a394 <.LVL101>:
  41a394:	041b      	lsls	r3, r3, #16
  41a396:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                         | ((word32) ks[4] << 8)
                         | ((word32) ks[6]);
  41a39a:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
  41a39e:	4313      	orrs	r3, r2
                         | ((word32) ks[4] << 8)
  41a3a0:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
                         | ((word32) ks[6]);
  41a3a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                out[2*i] = ((word32) ks[0] << 24)
  41a3a8:	f84e 3c04 	str.w	r3, [lr, #-4]

                out[2*i + 1] = ((word32) ks[1] << 24)
  41a3ac:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
                             | ((word32) ks[3] << 16)
  41a3b0:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
  41a3b4:	041b      	lsls	r3, r3, #16
  41a3b6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                             | ((word32) ks[5] << 8)
                             | ((word32) ks[7]);
  41a3ba:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
  41a3be:	4313      	orrs	r3, r2
                             | ((word32) ks[5] << 8)
  41a3c0:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
                             | ((word32) ks[7]);
  41a3c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                out[2*i + 1] = ((word32) ks[1] << 24)
  41a3c8:	f84e 3b08 	str.w	r3, [lr], #8

0041a3cc <.LVL102>:
  41a3cc:	f10b 0b01 	add.w	fp, fp, #1

0041a3d0 <.LVL103>:
            for (i = 0; i < 16; i++) {            /* key chunk for each iteration */
  41a3d0:	45c3      	cmp	fp, r8
  41a3d2:	d01e      	beq.n	41a412 <.LVL111>
                XMEMSET(ks, 0, 8);                /* Clear key schedule */
  41a3d4:	2300      	movs	r3, #0
  41a3d6:	6003      	str	r3, [r0, #0]
  41a3d8:	6043      	str	r3, [r0, #4]

0041a3da <.LVL105>:
                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
  41a3da:	f89b 7000 	ldrb.w	r7, [fp]

0041a3de <.LVL106>:
  41a3de:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
  41a3e2:	463b      	mov	r3, r7
                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
  41a3e4:	2200      	movs	r2, #0
                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
  41a3e6:	f04f 0a1c 	mov.w	sl, #28

0041a3ea <.LVL107>:
  41a3ea:	459a      	cmp	sl, r3
  41a3ec:	bfd8      	it	le
  41a3ee:	3b1c      	suble	r3, #28

0041a3f0 <.LVL108>:
  41a3f0:	ae20      	add	r6, sp, #128	; 0x80
  41a3f2:	4433      	add	r3, r6
  41a3f4:	f813 3c78 	ldrb.w	r3, [r3, #-120]
                    pcr[j] =
  41a3f8:	f801 3f01 	strb.w	r3, [r1, #1]!
                for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
  41a3fc:	3201      	adds	r2, #1

0041a3fe <.LVL109>:
  41a3fe:	2a38      	cmp	r2, #56	; 0x38
  41a400:	d0a6      	beq.n	41a350 <.LVL95>
                          pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
  41a402:	18bb      	adds	r3, r7, r2

0041a404 <.LVL110>:
  41a404:	2a1c      	cmp	r2, #28
  41a406:	bfb4      	ite	lt
  41a408:	f04f 0a1c 	movlt.w	sl, #28
  41a40c:	f04f 0a38 	movge.w	sl, #56	; 0x38
  41a410:	e7eb      	b.n	41a3ea <.LVL107>

0041a412 <.LVL111>:
            }

            /* reverse key schedule order */
            if (dir == DES_DECRYPTION) {
  41a412:	9b01      	ldr	r3, [sp, #4]
  41a414:	2b01      	cmp	r3, #1
  41a416:	d003      	beq.n	41a420 <.LCFI7>

0041a418 <.LBE155>:
            XFREE(buffer, NULL, DYNAMIC_TYPE_TMP_BUFFER);
    #endif
        }

        return 0;
    }
  41a418:	2000      	movs	r0, #0
  41a41a:	b021      	add	sp, #132	; 0x84

0041a41c <.LCFI6>:
  41a41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0041a420 <.LCFI7>:
  41a420:	9b00      	ldr	r3, [sp, #0]
  41a422:	461a      	mov	r2, r3
  41a424:	f103 0440 	add.w	r4, r3, #64	; 0x40

0041a428 <.LBB156>:
                    word32 swap = out[i];
  41a428:	f859 1c04 	ldr.w	r1, [r9, #-4]
                    out[i] = out[DES_KS_SIZE - 2 - i];
  41a42c:	6f98      	ldr	r0, [r3, #120]	; 0x78
  41a42e:	f849 0c04 	str.w	r0, [r9, #-4]
                    out[DES_KS_SIZE - 2 - i] = swap;
  41a432:	6799      	str	r1, [r3, #120]	; 0x78
                    swap = out[i + 1];
  41a434:	6851      	ldr	r1, [r2, #4]
                    out[i + 1] = out[DES_KS_SIZE - 1 - i];
  41a436:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
  41a438:	6050      	str	r0, [r2, #4]
                    out[DES_KS_SIZE - 1 - i] = swap;
  41a43a:	67d9      	str	r1, [r3, #124]	; 0x7c
  41a43c:	3208      	adds	r2, #8
  41a43e:	3b08      	subs	r3, #8
  41a440:	f109 0908 	add.w	r9, r9, #8

0041a444 <.LBE156>:
                for (i = 0; i < 16; i += 2) {
  41a444:	42a2      	cmp	r2, r4
  41a446:	d1ef      	bne.n	41a428 <.LBB156>
  41a448:	e7e6      	b.n	41a418 <.LBE155>
  41a44a:	bf00      	nop
  41a44c:	0042139c 	.word	0x0042139c
  41a450:	00421c7c 	.word	0x00421c7c
  41a454:	0042228c 	.word	0x0042228c
  41a458:	2aaaaaab 	.word	0x2aaaaaab
  41a45c:	004216c8 	.word	0x004216c8

Disassembly of section .text.Console_UART_Tasks%103:

0041a460 <Console_UART_Tasks>:
        consUartData.isReadComplete = true;
    }
}

void Console_UART_Tasks(SYS_MODULE_OBJ object)
{
  41a460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0041a464 <.LCFI5>:
    /* Update the application state machine based
     * on the current state */
    struct QPacket pkt;
    size_t *sizeRead;

    switch(consUartData.state)
  41a464:	4b4c      	ldr	r3, [pc, #304]	; (41a598 <.LVL45+0x4>)
  41a466:	781b      	ldrb	r3, [r3, #0]
  41a468:	2b08      	cmp	r3, #8
  41a46a:	f200 8093 	bhi.w	41a594 <.LVL45>
  41a46e:	e8df f003 	tbb	[pc, r3]
  41a472:	9105      	.short	0x9105
  41a474:	6029124f 	.word	0x6029124f
  41a478:	9191      	.short	0x9191
  41a47a:	8f          	.byte	0x8f
  41a47b:	00          	.byte	0x00
    {
        case CONSOLE_UART_STATE_INIT:

            /* Register a callback with device layer to get event notification (for end point 0) */
            USART1_WriteCallbackRegister(UARTDeviceWriteCallback, 0);
  41a47c:	2100      	movs	r1, #0
  41a47e:	4847      	ldr	r0, [pc, #284]	; (41a59c <.LVL45+0x8>)

0041a480 <.LVL19>:
  41a480:	f007 ff24 	bl	4222cc <.LFE171>

0041a484 <.LVL20>:
            USART1_ReadCallbackRegister(UARTDeviceReadCallback, 0);
  41a484:	2100      	movs	r1, #0
  41a486:	4846      	ldr	r0, [pc, #280]	; (41a5a0 <.LVL45+0xc>)
  41a488:	f007 ff28 	bl	4222dc <.LFE150>

0041a48c <.LVL21>:

            /* If the driver was opened, it is ready for operation */
            consUartData.state = CONSOLE_UART_STATE_READY;
  41a48c:	2202      	movs	r2, #2
  41a48e:	4b42      	ldr	r3, [pc, #264]	; (41a598 <.LVL45+0x4>)
  41a490:	701a      	strb	r2, [r3, #0]

            break;
  41a492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041a496 <.LVL22>:

        case CONSOLE_UART_STATE_SCHEDULE_READ:

            consUartData.state = CONSOLE_UART_STATE_WAIT_FOR_READ_COMPLETE;
  41a496:	2204      	movs	r2, #4
  41a498:	4b3f      	ldr	r3, [pc, #252]	; (41a598 <.LVL45+0x4>)
  41a49a:	701a      	strb	r2, [r3, #0]

            if (readQueue.numElem)
  41a49c:	4b41      	ldr	r3, [pc, #260]	; (41a5a4 <.LVL45+0x10>)
  41a49e:	689b      	ldr	r3, [r3, #8]
  41a4a0:	2b00      	cmp	r3, #0
  41a4a2:	d077      	beq.n	41a594 <.LVL45>
            {
                consUartData.isReadComplete = false;
  41a4a4:	2200      	movs	r2, #0
  41a4a6:	4b3c      	ldr	r3, [pc, #240]	; (41a598 <.LVL45+0x4>)
  41a4a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                pkt = rdQueueElements[readQueue.tailPos];
  41a4ac:	4b3e      	ldr	r3, [pc, #248]	; (41a5a8 <.LVL45+0x14>)
  41a4ae:	4a3d      	ldr	r2, [pc, #244]	; (41a5a4 <.LVL45+0x10>)
  41a4b0:	6812      	ldr	r2, [r2, #0]
  41a4b2:	eb03 01c2 	add.w	r1, r3, r2, lsl #3

0041a4b6 <.LVL23>:

                USART1_Read (pkt.data.buf, pkt.sz);
  41a4b6:	6849      	ldr	r1, [r1, #4]

0041a4b8 <.LVL24>:
  41a4b8:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]

0041a4bc <.LVL25>:
  41a4bc:	f006 ff18 	bl	4212f0 <.LFE145>

0041a4c0 <.LVL26>:
  41a4c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041a4c4 <.LVL27>:
            }
            break;

        case CONSOLE_UART_STATE_WAIT_FOR_READ_COMPLETE:

            if(consUartData.isReadComplete)
  41a4c4:	4b34      	ldr	r3, [pc, #208]	; (41a598 <.LVL45+0x4>)
  41a4c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
  41a4ca:	b943      	cbnz	r3, 41a4de <.LVL27+0x1a>
                    consUartData.state = CONSOLE_UART_STATE_SCHEDULE_READ;
                }
            }
            else
            {
                if (writeQueue.numElem)
  41a4cc:	4b37      	ldr	r3, [pc, #220]	; (41a5ac <.LVL45+0x18>)
  41a4ce:	689b      	ldr	r3, [r3, #8]
  41a4d0:	2b00      	cmp	r3, #0
  41a4d2:	d05f      	beq.n	41a594 <.LVL45>
                {
                    consUartData.state = CONSOLE_UART_STATE_SCHEDULE_WRITE;
  41a4d4:	2205      	movs	r2, #5
  41a4d6:	4b30      	ldr	r3, [pc, #192]	; (41a598 <.LVL45+0x4>)
  41a4d8:	701a      	strb	r2, [r3, #0]
  41a4da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                sizeRead = &rdQueueElements[readQueue.tailPos].sz;
  41a4de:	4c31      	ldr	r4, [pc, #196]	; (41a5a4 <.LVL45+0x10>)
  41a4e0:	6825      	ldr	r5, [r4, #0]

0041a4e2 <.LVL28>:
                popQueue(&readQueue);
  41a4e2:	4620      	mov	r0, r4

0041a4e4 <.LVL29>:
  41a4e4:	f007 fcbc 	bl	421e60 <.LFE4>

0041a4e8 <.LVL30>:
                if (readQueue.numElem == 0)
  41a4e8:	68a3      	ldr	r3, [r4, #8]
  41a4ea:	b963      	cbnz	r3, 41a506 <.LVL31+0xa>
                    if (consUartData.rdCallback != NULL)
  41a4ec:	4b2a      	ldr	r3, [pc, #168]	; (41a598 <.LVL45+0x4>)
  41a4ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  41a4f0:	b123      	cbz	r3, 41a4fc <.LVL31>
                sizeRead = &rdQueueElements[readQueue.tailPos].sz;
  41a4f2:	482d      	ldr	r0, [pc, #180]	; (41a5a8 <.LVL45+0x14>)
  41a4f4:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
                        consUartData.rdCallback(sizeRead);
  41a4f8:	3004      	adds	r0, #4
  41a4fa:	4798      	blx	r3

0041a4fc <.LVL31>:
                    consUartData.state = CONSOLE_UART_STATE_READY;
  41a4fc:	2202      	movs	r2, #2
  41a4fe:	4b26      	ldr	r3, [pc, #152]	; (41a598 <.LVL45+0x4>)
  41a500:	701a      	strb	r2, [r3, #0]
  41a502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    consUartData.state = CONSOLE_UART_STATE_SCHEDULE_READ;
  41a506:	2203      	movs	r2, #3
  41a508:	4b23      	ldr	r3, [pc, #140]	; (41a598 <.LVL45+0x4>)
  41a50a:	701a      	strb	r2, [r3, #0]
  41a50c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041a510 <.LVL33>:
            }
            break;

        case CONSOLE_UART_STATE_READY:

            if (readQueue.numElem)
  41a510:	4b24      	ldr	r3, [pc, #144]	; (41a5a4 <.LVL45+0x10>)
  41a512:	689b      	ldr	r3, [r3, #8]
  41a514:	b943      	cbnz	r3, 41a528 <.LVL33+0x18>
            {
                consUartData.state = CONSOLE_UART_STATE_SCHEDULE_READ;
            }
            else if (writeQueue.numElem)
  41a516:	4b25      	ldr	r3, [pc, #148]	; (41a5ac <.LVL45+0x18>)
  41a518:	689b      	ldr	r3, [r3, #8]
  41a51a:	2b00      	cmp	r3, #0
  41a51c:	d03a      	beq.n	41a594 <.LVL45>
            {
                /* If there is data to be written, then try writing it */
                consUartData.state = CONSOLE_UART_STATE_SCHEDULE_WRITE;
  41a51e:	2205      	movs	r2, #5
  41a520:	4b1d      	ldr	r3, [pc, #116]	; (41a598 <.LVL45+0x4>)
  41a522:	701a      	strb	r2, [r3, #0]
  41a524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                consUartData.state = CONSOLE_UART_STATE_SCHEDULE_READ;
  41a528:	2203      	movs	r2, #3
  41a52a:	4b1b      	ldr	r3, [pc, #108]	; (41a598 <.LVL45+0x4>)
  41a52c:	701a      	strb	r2, [r3, #0]
  41a52e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            }
            break;

        case CONSOLE_UART_STATE_SCHEDULE_WRITE:

            if (writeQueue.numElem)
  41a532:	4b1e      	ldr	r3, [pc, #120]	; (41a5ac <.LVL45+0x18>)
  41a534:	689b      	ldr	r3, [r3, #8]
  41a536:	b36b      	cbz	r3, 41a594 <.LVL45>
            {
                /* This means there is data to sent out */
                pkt = wrQueueElements[writeQueue.tailPos];
  41a538:	4b1d      	ldr	r3, [pc, #116]	; (41a5b0 <.LVL45+0x1c>)
  41a53a:	4a1c      	ldr	r2, [pc, #112]	; (41a5ac <.LVL45+0x18>)
  41a53c:	6812      	ldr	r2, [r2, #0]
  41a53e:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
  41a542:	f853 6032 	ldr.w	r6, [r3, r2, lsl #3]

0041a546 <.LVL34>:
  41a546:	684d      	ldr	r5, [r1, #4]

0041a548 <.LBB6>:

                    if(status == true)
                    {
                        /* This means this buffer was added successfully to
                         * the PLIB. Do a callback. */
                        if (consUartData.wrCallback != NULL)
  41a548:	f8df 804c 	ldr.w	r8, [pc, #76]	; 41a598 <.LVL45+0x4>
                        {
                            consUartData.wrCallback((void *)wrQueueElements[writeQueue.tailPos].data.cbuf);
                        }

                        /* Remove this element from the write queue */
                        popQueue(&writeQueue);
  41a54c:	4c17      	ldr	r4, [pc, #92]	; (41a5ac <.LVL45+0x18>)
                        pkt = wrQueueElements[writeQueue.tailPos];
  41a54e:	461f      	mov	r7, r3
  41a550:	e00e      	b.n	41a570 <.LBB7>

0041a552 <.LVL36>:
                            consUartData.wrCallback((void *)wrQueueElements[writeQueue.tailPos].data.cbuf);
  41a552:	6822      	ldr	r2, [r4, #0]
  41a554:	f857 0032 	ldr.w	r0, [r7, r2, lsl #3]

0041a558 <.LVL37>:
  41a558:	4798      	blx	r3
                        popQueue(&writeQueue);
  41a55a:	4620      	mov	r0, r4
  41a55c:	f007 fc80 	bl	421e60 <.LFE4>

0041a560 <.LVL39>:
                        pkt = wrQueueElements[writeQueue.tailPos];
  41a560:	6823      	ldr	r3, [r4, #0]
  41a562:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
  41a566:	f857 6033 	ldr.w	r6, [r7, r3, lsl #3]

0041a56a <.LVL40>:
  41a56a:	6855      	ldr	r5, [r2, #4]

0041a56c <.LBE6>:
                    {
                        /* Got an invalid handle. This most likely means
                         * that the write buffer queue is full */
                    }

                } while(writeQueue.numElem);
  41a56c:	68a3      	ldr	r3, [r4, #8]
  41a56e:	b153      	cbz	r3, 41a586 <.LBE7>

0041a570 <.LBB7>:
                    bool status = USART1_Write(pkt.data.buf, pkt.sz);
  41a570:	4629      	mov	r1, r5
  41a572:	4630      	mov	r0, r6
  41a574:	f006 fbb2 	bl	420cdc <.LFE165>

0041a578 <.LVL42>:
                    if(status == true)
  41a578:	2800      	cmp	r0, #0
  41a57a:	d0f7      	beq.n	41a56c <.LBE6>
                        if (consUartData.wrCallback != NULL)
  41a57c:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
  41a580:	2b00      	cmp	r3, #0
  41a582:	d1e6      	bne.n	41a552 <.LVL36>
  41a584:	e7e9      	b.n	41a55a <.LVL37+0x2>

0041a586 <.LBE7>:
                /* If we are here, it either means there is nothing more to
                 * write of the write buffer queue is full. We cannot do much
                 * with respect to write at point. We move the state to
                 * ready */

                consUartData.state = CONSOLE_UART_STATE_READY;
  41a586:	2202      	movs	r2, #2
  41a588:	4b03      	ldr	r3, [pc, #12]	; (41a598 <.LVL45+0x4>)
  41a58a:	701a      	strb	r2, [r3, #0]
  41a58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041a590 <.LVL44>:
        case CONSOLE_UART_STATE_OPERATIONAL_ERROR:

            /* We arrive at this state if the UART driver reports an error on a read or write operation
               We will attempt to recover by flushing the local buffers */

            Console_UART_Flush();
  41a590:	f006 fe36 	bl	421200 <Console_UART_Flush>

0041a594 <.LVL45>:
  41a594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41a598:	2040d5d4 	.word	0x2040d5d4
  41a59c:	004222bd 	.word	0x004222bd
  41a5a0:	004220bd 	.word	0x004220bd
  41a5a4:	2040d718 	.word	0x2040d718
  41a5a8:	2040d584 	.word	0x2040d584
  41a5ac:	2040d72c 	.word	0x2040d72c
  41a5b0:	2040d088 	.word	0x2040d088

Disassembly of section .text.deflate_stored%104:

0041a5b4 <deflate_stored>:
{
  41a5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0041a5b8 <.LCFI9>:
  41a5b8:	4604      	mov	r4, r0
  41a5ba:	4688      	mov	r8, r1

0041a5bc <.LVL208>:
    if (max_block_size > s->pending_buf_size - 5) {
  41a5bc:	68c5      	ldr	r5, [r0, #12]
  41a5be:	3d05      	subs	r5, #5
    ulg max_block_size = 0xffff;
  41a5c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41a5c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  41a5c8:	4295      	cmp	r5, r2
  41a5ca:	bf88      	it	hi
  41a5cc:	461d      	movhi	r5, r3
        s->lookahead = 0;
  41a5ce:	2600      	movs	r6, #0
  41a5d0:	4637      	mov	r7, r6
  41a5d2:	e049      	b.n	41a668 <.LVL216+0x1c>

0041a5d4 <.LVL209>:
            fill_window(s);
  41a5d4:	4620      	mov	r0, r4
  41a5d6:	f7fe fb09 	bl	418bec <fill_window>

0041a5da <.LVL210>:
            if (s->lookahead == 0 && flush == Z_NO_FLUSH) return need_more;
  41a5da:	6f63      	ldr	r3, [r4, #116]	; 0x74
  41a5dc:	b91b      	cbnz	r3, 41a5e6 <.LVL210+0xc>
  41a5de:	f1b8 0f00 	cmp.w	r8, #0
  41a5e2:	f000 8085 	beq.w	41a6f0 <.LVL223+0x18>
            if (s->lookahead == 0) break; /* flush the current block */
  41a5e6:	2b00      	cmp	r3, #0
  41a5e8:	d141      	bne.n	41a66e <.LVL216+0x22>
    s->insert = 0;
  41a5ea:	2200      	movs	r2, #0
  41a5ec:	f241 63b4 	movw	r3, #5812	; 0x16b4
  41a5f0:	50e2      	str	r2, [r4, r3]
    if (flush == Z_FINISH) {
  41a5f2:	f1b8 0f04 	cmp.w	r8, #4
  41a5f6:	d05f      	beq.n	41a6b8 <.LVL220+0x12>
    if ((long)s->strstart > s->block_start)
  41a5f8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  41a5fa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  41a5fc:	4290      	cmp	r0, r2
  41a5fe:	dd7d      	ble.n	41a6fc <.LVL223+0x24>
        FLUSH_BLOCK(s, 0);
  41a600:	2a00      	cmp	r2, #0
  41a602:	db73      	blt.n	41a6ec <.LVL223+0x14>
  41a604:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  41a606:	4411      	add	r1, r2
  41a608:	2300      	movs	r3, #0
  41a60a:	1a82      	subs	r2, r0, r2
  41a60c:	4620      	mov	r0, r4
  41a60e:	f7f7 fcff 	bl	412010 <_tr_flush_block>

0041a612 <.LVL211>:
  41a612:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  41a614:	65e3      	str	r3, [r4, #92]	; 0x5c
  41a616:	6820      	ldr	r0, [r4, #0]
  41a618:	f006 f9ea 	bl	4209f0 <.LFE41>

0041a61c <.LVL212>:
  41a61c:	6823      	ldr	r3, [r4, #0]
  41a61e:	6918      	ldr	r0, [r3, #16]
            if (s->lookahead == 0 && flush == Z_NO_FLUSH) return need_more;
  41a620:	3000      	adds	r0, #0
  41a622:	bf18      	it	ne
  41a624:	2001      	movne	r0, #1
  41a626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041a62a <.LVL213>:
            s->lookahead = (uInt)(s->strstart - max_start);
  41a62a:	1a9b      	subs	r3, r3, r2
  41a62c:	6763      	str	r3, [r4, #116]	; 0x74
            s->strstart = (uInt)max_start;
  41a62e:	66e2      	str	r2, [r4, #108]	; 0x6c
            FLUSH_BLOCK(s, 0);
  41a630:	2800      	cmp	r0, #0
  41a632:	db28      	blt.n	41a686 <.LVL217+0xa>
  41a634:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  41a636:	4401      	add	r1, r0
  41a638:	463b      	mov	r3, r7
  41a63a:	1a12      	subs	r2, r2, r0

0041a63c <.LVL214>:
  41a63c:	4620      	mov	r0, r4
  41a63e:	f7f7 fce7 	bl	412010 <_tr_flush_block>

0041a642 <.LVL215>:
  41a642:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  41a644:	65e3      	str	r3, [r4, #92]	; 0x5c
  41a646:	6820      	ldr	r0, [r4, #0]
  41a648:	f006 f9d2 	bl	4209f0 <.LFE41>

0041a64c <.LVL216>:
  41a64c:	6823      	ldr	r3, [r4, #0]
  41a64e:	691b      	ldr	r3, [r3, #16]
  41a650:	2b00      	cmp	r3, #0
  41a652:	d050      	beq.n	41a6f6 <.LVL223+0x1e>
        if (s->strstart - (uInt)s->block_start >= MAX_DIST(s)) {
  41a654:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  41a656:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  41a658:	4611      	mov	r1, r2
  41a65a:	eba0 0e02 	sub.w	lr, r0, r2
  41a65e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  41a660:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
  41a664:	459e      	cmp	lr, r3
  41a666:	d210      	bcs.n	41a68a <.LVL218>
        if (s->lookahead <= 1) {
  41a668:	6f63      	ldr	r3, [r4, #116]	; 0x74
  41a66a:	2b01      	cmp	r3, #1
  41a66c:	d9b2      	bls.n	41a5d4 <.LVL209>
        s->strstart += s->lookahead;
  41a66e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  41a670:	6f62      	ldr	r2, [r4, #116]	; 0x74
  41a672:	4413      	add	r3, r2
  41a674:	66e3      	str	r3, [r4, #108]	; 0x6c
        s->lookahead = 0;
  41a676:	6766      	str	r6, [r4, #116]	; 0x74
        max_start = s->block_start + max_block_size;
  41a678:	6de0      	ldr	r0, [r4, #92]	; 0x5c
  41a67a:	182a      	adds	r2, r5, r0

0041a67c <.LVL217>:
        if (s->strstart == 0 || (ulg)s->strstart >= max_start) {
  41a67c:	4293      	cmp	r3, r2
  41a67e:	d2d4      	bcs.n	41a62a <.LVL213>
  41a680:	2b00      	cmp	r3, #0
  41a682:	d1e7      	bne.n	41a654 <.LVL216+0x8>
  41a684:	e7d1      	b.n	41a62a <.LVL213>
            FLUSH_BLOCK(s, 0);
  41a686:	4639      	mov	r1, r7
  41a688:	e7d6      	b.n	41a638 <.LVL213+0xe>

0041a68a <.LVL218>:
            FLUSH_BLOCK(s, 0);
  41a68a:	2a00      	cmp	r2, #0
  41a68c:	db12      	blt.n	41a6b4 <.LVL220+0xe>
  41a68e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  41a690:	4419      	add	r1, r3
  41a692:	4633      	mov	r3, r6
  41a694:	1a82      	subs	r2, r0, r2
  41a696:	4620      	mov	r0, r4
  41a698:	f7f7 fcba 	bl	412010 <_tr_flush_block>

0041a69c <.LVL219>:
  41a69c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  41a69e:	65e3      	str	r3, [r4, #92]	; 0x5c
  41a6a0:	6820      	ldr	r0, [r4, #0]
  41a6a2:	f006 f9a5 	bl	4209f0 <.LFE41>

0041a6a6 <.LVL220>:
  41a6a6:	6823      	ldr	r3, [r4, #0]
  41a6a8:	691b      	ldr	r3, [r3, #16]
  41a6aa:	2b00      	cmp	r3, #0
  41a6ac:	d1dc      	bne.n	41a668 <.LVL216+0x1c>
  41a6ae:	2000      	movs	r0, #0
  41a6b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41a6b4:	4631      	mov	r1, r6
  41a6b6:	e7ec      	b.n	41a692 <.LVL218+0x8>
        FLUSH_BLOCK(s, 1);
  41a6b8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  41a6ba:	2a00      	cmp	r2, #0
  41a6bc:	db14      	blt.n	41a6e8 <.LVL223+0x10>
  41a6be:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  41a6c0:	4411      	add	r1, r2
  41a6c2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  41a6c4:	2301      	movs	r3, #1
  41a6c6:	1a82      	subs	r2, r0, r2
  41a6c8:	4620      	mov	r0, r4
  41a6ca:	f7f7 fca1 	bl	412010 <_tr_flush_block>

0041a6ce <.LVL222>:
  41a6ce:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  41a6d0:	65e3      	str	r3, [r4, #92]	; 0x5c
  41a6d2:	6820      	ldr	r0, [r4, #0]
  41a6d4:	f006 f98c 	bl	4209f0 <.LFE41>

0041a6d8 <.LVL223>:
  41a6d8:	6823      	ldr	r3, [r4, #0]
  41a6da:	691b      	ldr	r3, [r3, #16]
        return finish_done;
  41a6dc:	2b00      	cmp	r3, #0
  41a6de:	bf0c      	ite	eq
  41a6e0:	2002      	moveq	r0, #2
  41a6e2:	2003      	movne	r0, #3
  41a6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLUSH_BLOCK(s, 1);
  41a6e8:	2100      	movs	r1, #0
  41a6ea:	e7ea      	b.n	41a6c2 <.LVL220+0x1c>
        FLUSH_BLOCK(s, 0);
  41a6ec:	2100      	movs	r1, #0
  41a6ee:	e78b      	b.n	41a608 <.LVL210+0x2e>
            if (s->lookahead == 0 && flush == Z_NO_FLUSH) return need_more;
  41a6f0:	2000      	movs	r0, #0
  41a6f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            FLUSH_BLOCK(s, 0);
  41a6f6:	2000      	movs	r0, #0
  41a6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return block_done;
  41a6fc:	2001      	movs	r0, #1
}
  41a6fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section .text.wc_ShaFinal%105:

0041a704 <wc_ShaFinal>:

int wc_ShaFinal(Sha* sha, byte* hash)
{
    byte* local;

    if (sha == NULL || hash == NULL) {
  41a704:	2800      	cmp	r0, #0
  41a706:	f000 8097 	beq.w	41a838 <.LCFI7>
{
  41a70a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041a70c <.LCFI6>:
  41a70c:	4605      	mov	r5, r0
    if (sha == NULL || hash == NULL) {
  41a70e:	2900      	cmp	r1, #0
  41a710:	f000 808f 	beq.w	41a832 <.LVL393>
        return BAD_FUNC_ARG;
    }

    local = (byte*)sha->buffer;
  41a714:	f100 070c 	add.w	r7, r0, #12

0041a718 <.LVL372>:
        return IntelQaSymSha(&sha->asyncDev, hash, NULL, SHA_DIGEST_SIZE);
    #endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    AddLength(sha, sha->buffLen);  /* before adding pads */
  41a718:	6803      	ldr	r3, [r0, #0]

0041a71a <.LBB805>:
    word32 tmp = sha->loLen;
  41a71a:	6840      	ldr	r0, [r0, #4]

0041a71c <.LVL374>:
    if ( (sha->loLen += len) < tmp)
  41a71c:	181a      	adds	r2, r3, r0
  41a71e:	606a      	str	r2, [r5, #4]
  41a720:	4290      	cmp	r0, r2
  41a722:	d902      	bls.n	41a72a <.LVL374+0xe>
        sha->hiLen++;                       /* carry low to high */
  41a724:	68aa      	ldr	r2, [r5, #8]
  41a726:	3201      	adds	r2, #1
  41a728:	60aa      	str	r2, [r5, #8]
  41a72a:	460e      	mov	r6, r1

0041a72c <.LBE805>:

    local[sha->buffLen++] = 0x80;  /* add 1 */
  41a72c:	1c5a      	adds	r2, r3, #1
  41a72e:	602a      	str	r2, [r5, #0]
  41a730:	2280      	movs	r2, #128	; 0x80
  41a732:	54fa      	strb	r2, [r7, r3]

    /* pad with zeros */
    if (sha->buffLen > SHA_PAD_SIZE) {
  41a734:	6828      	ldr	r0, [r5, #0]
  41a736:	2838      	cmp	r0, #56	; 0x38
  41a738:	d85a      	bhi.n	41a7f0 <.LVL386>

0041a73a <.LVL376>:
        ByteReverseWords(sha->buffer, sha->buffer, SHA_BLOCK_SIZE);
#endif
        XTRANSFORM(sha, local);
        sha->buffLen = 0;
    }
    XMEMSET(&local[sha->buffLen], 0, SHA_PAD_SIZE - sha->buffLen);
  41a73a:	462c      	mov	r4, r5
  41a73c:	f854 0b08 	ldr.w	r0, [r4], #8
  41a740:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
  41a744:	2100      	movs	r1, #0
  41a746:	4438      	add	r0, r7
  41a748:	f003 fee6 	bl	41e518 <.LFE14>

0041a74c <.LVL377>:
  41a74c:	f105 0148 	add.w	r1, r5, #72	; 0x48

0041a750 <.LBB807>:
        out[i] = ByteReverseWord32(in[i]);
  41a750:	6862      	ldr	r2, [r4, #4]

0041a752 <.LBB809>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  41a752:	0a13      	lsrs	r3, r2, #8
  41a754:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  41a758:	0212      	lsls	r2, r2, #8
  41a75a:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
  41a75e:	4313      	orrs	r3, r2

0041a760 <.LBB811>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  41a760:	ea4f 4333 	mov.w	r3, r3, ror #16

0041a764 <.LBE809>:
        out[i] = ByteReverseWord32(in[i]);
  41a764:	f844 3f04 	str.w	r3, [r4, #4]!
    for (i = 0; i < count; i++)
  41a768:	428c      	cmp	r4, r1
  41a76a:	d1f1      	bne.n	41a750 <.LBB807>

0041a76c <.LBE807>:
    ByteReverseWords(sha->buffer, sha->buffer, SHA_BLOCK_SIZE);
#endif

    /* store lengths */
    /* put lengths in bits */
    sha->hiLen = (sha->loLen >> (8*sizeof(sha->loLen) - 3)) + (sha->hiLen << 3);
  41a76c:	686b      	ldr	r3, [r5, #4]
  41a76e:	68a9      	ldr	r1, [r5, #8]
  41a770:	0f5a      	lsrs	r2, r3, #29
  41a772:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
  41a776:	60aa      	str	r2, [r5, #8]
    sha->loLen = sha->loLen << 3;
  41a778:	00db      	lsls	r3, r3, #3
  41a77a:	606b      	str	r3, [r5, #4]

    /* ! length ordering dependent on digest endian type ! */
    XMEMCPY(&local[SHA_PAD_SIZE], &sha->hiLen, sizeof(word32));
  41a77c:	646a      	str	r2, [r5, #68]	; 0x44
    XMEMCPY(&local[SHA_PAD_SIZE + sizeof(word32)], &sha->loLen, sizeof(word32));
  41a77e:	64ab      	str	r3, [r5, #72]	; 0x48
    ByteReverseWords(&sha->buffer[SHA_PAD_SIZE/sizeof(word32)],
                     &sha->buffer[SHA_PAD_SIZE/sizeof(word32)],
                     2 * sizeof(word32));
#endif

    XTRANSFORM(sha, local);
  41a780:	4639      	mov	r1, r7
  41a782:	4628      	mov	r0, r5
  41a784:	f7ef fe5e 	bl	40a444 <Transform>

0041a788 <.LVL380>:
#ifdef LITTLE_ENDIAN_ORDER
    ByteReverseWords(sha->digest, sha->digest, SHA_DIGEST_SIZE);
  41a788:	f105 044c 	add.w	r4, r5, #76	; 0x4c

0041a78c <.LVL381>:
  41a78c:	f105 0148 	add.w	r1, r5, #72	; 0x48
  41a790:	f105 005c 	add.w	r0, r5, #92	; 0x5c

0041a794 <.LBB813>:
        out[i] = ByteReverseWord32(in[i]);
  41a794:	684a      	ldr	r2, [r1, #4]

0041a796 <.LBB815>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  41a796:	0a13      	lsrs	r3, r2, #8
  41a798:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  41a79c:	0212      	lsls	r2, r2, #8
  41a79e:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
  41a7a2:	4313      	orrs	r3, r2

0041a7a4 <.LBB817>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  41a7a4:	ea4f 4333 	mov.w	r3, r3, ror #16

0041a7a8 <.LBE815>:
        out[i] = ByteReverseWord32(in[i]);
  41a7a8:	f841 3f04 	str.w	r3, [r1, #4]!
    for (i = 0; i < count; i++)
  41a7ac:	4281      	cmp	r1, r0
  41a7ae:	d1f1      	bne.n	41a794 <.LBB813>

0041a7b0 <.LBE813>:
#endif
    XMEMCPY(hash, sha->digest, SHA_DIGEST_SIZE);
  41a7b0:	6823      	ldr	r3, [r4, #0]
  41a7b2:	6860      	ldr	r0, [r4, #4]
  41a7b4:	68a1      	ldr	r1, [r4, #8]
  41a7b6:	68e2      	ldr	r2, [r4, #12]
  41a7b8:	6033      	str	r3, [r6, #0]
  41a7ba:	6070      	str	r0, [r6, #4]
  41a7bc:	60b1      	str	r1, [r6, #8]
  41a7be:	60f2      	str	r2, [r6, #12]
  41a7c0:	6923      	ldr	r3, [r4, #16]
  41a7c2:	6133      	str	r3, [r6, #16]

0041a7c4 <.LBB819>:
        sha->digest[0] = 0x67452301L;
  41a7c4:	4b1e      	ldr	r3, [pc, #120]	; (41a840 <.LVL396+0x4>)
  41a7c6:	64eb      	str	r3, [r5, #76]	; 0x4c
        sha->digest[1] = 0xEFCDAB89L;
  41a7c8:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
  41a7cc:	652b      	str	r3, [r5, #80]	; 0x50
        sha->digest[2] = 0x98BADCFEL;
  41a7ce:	f103 4329 	add.w	r3, r3, #2835349504	; 0xa9000000
  41a7d2:	f5a3 1396 	sub.w	r3, r3, #1228800	; 0x12c000
  41a7d6:	f6a3 638b 	subw	r3, r3, #3723	; 0xe8b
  41a7da:	656b      	str	r3, [r5, #84]	; 0x54
        sha->digest[3] = 0x10325476L;
  41a7dc:	f1a3 3388 	sub.w	r3, r3, #2290649224	; 0x88888888
  41a7e0:	65ab      	str	r3, [r5, #88]	; 0x58
        sha->digest[4] = 0xC3D2E1F0L;
  41a7e2:	4b18      	ldr	r3, [pc, #96]	; (41a844 <.LVL396+0x8>)
  41a7e4:	65eb      	str	r3, [r5, #92]	; 0x5c
        sha->buffLen = 0;
  41a7e6:	2000      	movs	r0, #0
  41a7e8:	6028      	str	r0, [r5, #0]
        sha->loLen   = 0;
  41a7ea:	6068      	str	r0, [r5, #4]
        sha->hiLen   = 0;
  41a7ec:	60a8      	str	r0, [r5, #8]

0041a7ee <.LBE819>:

    return InitSha(sha); /* reset state */
  41a7ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041a7f0 <.LVL386>:
        XMEMSET(&local[sha->buffLen], 0, SHA_BLOCK_SIZE - sha->buffLen);
  41a7f0:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
  41a7f4:	2100      	movs	r1, #0

0041a7f6 <.LVL387>:
  41a7f6:	4438      	add	r0, r7
  41a7f8:	f003 fe8e 	bl	41e518 <.LFE14>

0041a7fc <.LVL388>:
        sha->buffLen += SHA_BLOCK_SIZE - sha->buffLen;
  41a7fc:	4629      	mov	r1, r5
  41a7fe:	2340      	movs	r3, #64	; 0x40
  41a800:	f841 3b08 	str.w	r3, [r1], #8

0041a804 <.LVL389>:
  41a804:	f105 0048 	add.w	r0, r5, #72	; 0x48

0041a808 <.LBB821>:
        out[i] = ByteReverseWord32(in[i]);
  41a808:	684a      	ldr	r2, [r1, #4]

0041a80a <.LBB823>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  41a80a:	0a13      	lsrs	r3, r2, #8
  41a80c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  41a810:	0212      	lsls	r2, r2, #8
  41a812:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
  41a816:	4313      	orrs	r3, r2

0041a818 <.LBB825>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  41a818:	ea4f 4333 	mov.w	r3, r3, ror #16

0041a81c <.LBE823>:
        out[i] = ByteReverseWord32(in[i]);
  41a81c:	f841 3f04 	str.w	r3, [r1, #4]!
    for (i = 0; i < count; i++)
  41a820:	4281      	cmp	r1, r0
  41a822:	d1f1      	bne.n	41a808 <.LBB821>

0041a824 <.LBE821>:
        XTRANSFORM(sha, local);
  41a824:	4639      	mov	r1, r7
  41a826:	4628      	mov	r0, r5
  41a828:	f7ef fe0c 	bl	40a444 <Transform>

0041a82c <.LVL392>:
        sha->buffLen = 0;
  41a82c:	2300      	movs	r3, #0
  41a82e:	602b      	str	r3, [r5, #0]
  41a830:	e783      	b.n	41a73a <.LVL376>

0041a832 <.LVL393>:
        return BAD_FUNC_ARG;
  41a832:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041a836 <.LVL394>:
}
  41a836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041a838 <.LCFI7>:
        return BAD_FUNC_ARG;
  41a838:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041a83c <.LVL396>:
  41a83c:	4770      	bx	lr
  41a83e:	bf00      	nop
  41a840:	67452301 	.word	0x67452301
  41a844:	c3d2e1f0 	.word	0xc3d2e1f0

Disassembly of section .text.Hash_df%106:

0041a848 <Hash_df>:
{
  41a848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0041a84c <.LCFI2>:
  41a84c:	b0a9      	sub	sp, #164	; 0xa4

0041a84e <.LCFI3>:
  41a84e:	4617      	mov	r7, r2
  41a850:	f8dd a0d0 	ldr.w	sl, [sp, #208]	; 0xd0
  41a854:	f8dd b0d4 	ldr.w	fp, [sp, #212]	; 0xd4
  41a858:	f88d 3007 	strb.w	r3, [sp, #7]

0041a85c <.LBB37>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  41a85c:	f3c2 1357 	ubfx	r3, r2, #5, #24

0041a860 <.LVL11>:
  41a860:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  41a864:	02d2      	lsls	r2, r2, #11

0041a866 <.LVL12>:
  41a866:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
  41a86a:	4313      	orrs	r3, r2

0041a86c <.LBB39>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  41a86c:	ea4f 4333 	mov.w	r3, r3, ror #16

0041a870 <.LBE37>:
    bits = ByteReverseWord32(bits);
  41a870:	9326      	str	r3, [sp, #152]	; 0x98
        + ((outSz % OUTPUT_BLOCK_LEN) ? 1 : 0);
  41a872:	f017 081f 	ands.w	r8, r7, #31
  41a876:	bf18      	it	ne
  41a878:	f04f 0801 	movne.w	r8, #1

0041a87c <.LVL13>:
    for (i = 0, ctr = 1; i < len; i++, ctr++) {
  41a87c:	2301      	movs	r3, #1
  41a87e:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
  41a882:	eb18 1857 	adds.w	r8, r8, r7, lsr #5

0041a886 <.LVL14>:
  41a886:	d069      	beq.n	41a95c <.LVL42>
  41a888:	460d      	mov	r5, r1
  41a88a:	2600      	movs	r6, #0
            ret = wc_Sha256Update(&sha, &ctr, sizeof(ctr));
  41a88c:	4699      	mov	r9, r3
  41a88e:	e044      	b.n	41a91a <.LVL30>

0041a890 <.LVL15>:
            ret = wc_Sha256Update(&sha, (byte*)&bits, sizeof(bits));
  41a890:	2204      	movs	r2, #4
  41a892:	a926      	add	r1, sp, #152	; 0x98
  41a894:	a80a      	add	r0, sp, #40	; 0x28

0041a896 <.LVL16>:
  41a896:	f002 fefe 	bl	41d696 <.LFE18>

0041a89a <.LVL17>:
        if (ret == 0) {
  41a89a:	4604      	mov	r4, r0
  41a89c:	b9f8      	cbnz	r0, 41a8de <.LVL24>
            if (type != drbgInitV)
  41a89e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  41a8a2:	2b04      	cmp	r3, #4
  41a8a4:	d008      	beq.n	41a8b8 <.LVL20>
                ret = wc_Sha256Update(&sha, &type, sizeof(type));
  41a8a6:	464a      	mov	r2, r9
  41a8a8:	f10d 0107 	add.w	r1, sp, #7
  41a8ac:	a80a      	add	r0, sp, #40	; 0x28

0041a8ae <.LVL18>:
  41a8ae:	f002 fef2 	bl	41d696 <.LFE18>

0041a8b2 <.LVL19>:
        if (ret == 0)
  41a8b2:	4604      	mov	r4, r0
  41a8b4:	2800      	cmp	r0, #0
  41a8b6:	d140      	bne.n	41a93a <.LVL34>

0041a8b8 <.LVL20>:
            ret = wc_Sha256Update(&sha, inA, inASz);
  41a8b8:	9a33      	ldr	r2, [sp, #204]	; 0xcc
  41a8ba:	9932      	ldr	r1, [sp, #200]	; 0xc8
  41a8bc:	a80a      	add	r0, sp, #40	; 0x28
  41a8be:	f002 feea 	bl	41d696 <.LFE18>

0041a8c2 <.LVL21>:
        if (ret == 0) {
  41a8c2:	4604      	mov	r4, r0
  41a8c4:	2800      	cmp	r0, #0
  41a8c6:	d159      	bne.n	41a97c <.LCFI5>
            if (inB != NULL && inBSz > 0)
  41a8c8:	f1ba 0f00 	cmp.w	sl, #0
  41a8cc:	d002      	beq.n	41a8d4 <.LVL22>
  41a8ce:	f1bb 0f00 	cmp.w	fp, #0
  41a8d2:	d136      	bne.n	41a942 <.LVL36>

0041a8d4 <.LVL22>:
            ret = wc_Sha256Final(&sha, digest);
  41a8d4:	a902      	add	r1, sp, #8
  41a8d6:	a80a      	add	r0, sp, #40	; 0x28
  41a8d8:	f7ff f96e 	bl	419bb8 <.LFE175>

0041a8dc <.LVL23>:
  41a8dc:	4604      	mov	r4, r0

0041a8de <.LVL24>:
        wc_Sha256Free(&sha);
  41a8de:	a80a      	add	r0, sp, #40	; 0x28

0041a8e0 <.LVL25>:
  41a8e0:	f000 ffa7 	bl	41b832 <.LFE38>

0041a8e4 <.LVL26>:
        if (ret == 0) {
  41a8e4:	b98c      	cbnz	r4, 41a90a <.LVL28>
            if (outSz > OUTPUT_BLOCK_LEN) {
  41a8e6:	2f20      	cmp	r7, #32
  41a8e8:	d932      	bls.n	41a950 <.LVL40>
                XMEMCPY(out, digest, OUTPUT_BLOCK_LEN);
  41a8ea:	f10d 0e08 	add.w	lr, sp, #8
  41a8ee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  41a8f2:	6028      	str	r0, [r5, #0]
  41a8f4:	6069      	str	r1, [r5, #4]
  41a8f6:	60aa      	str	r2, [r5, #8]
  41a8f8:	60eb      	str	r3, [r5, #12]
  41a8fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  41a8fe:	6128      	str	r0, [r5, #16]
  41a900:	6169      	str	r1, [r5, #20]
  41a902:	61aa      	str	r2, [r5, #24]
  41a904:	61eb      	str	r3, [r5, #28]
                outSz -= OUTPUT_BLOCK_LEN;
  41a906:	3f20      	subs	r7, #32
                out += OUTPUT_BLOCK_LEN;
  41a908:	3520      	adds	r5, #32

0041a90a <.LVL28>:
    for (i = 0, ctr = 1; i < len; i++, ctr++) {
  41a90a:	3601      	adds	r6, #1
  41a90c:	f89d 309f 	ldrb.w	r3, [sp, #159]	; 0x9f
  41a910:	3301      	adds	r3, #1
  41a912:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
  41a916:	45b0      	cmp	r8, r6
  41a918:	d021      	beq.n	41a95e <.LBB41>

0041a91a <.LVL30>:
        ret = wc_InitSha256(&sha);
  41a91a:	a80a      	add	r0, sp, #40	; 0x28
  41a91c:	f007 fd38 	bl	422390 <.LFE20>

0041a920 <.LVL31>:
        if (ret != 0)
  41a920:	4604      	mov	r4, r0
  41a922:	b9e0      	cbnz	r0, 41a95e <.LBB41>
            ret = wc_Sha256Update(&sha, &ctr, sizeof(ctr));
  41a924:	464a      	mov	r2, r9
  41a926:	f10d 019f 	add.w	r1, sp, #159	; 0x9f
  41a92a:	a80a      	add	r0, sp, #40	; 0x28

0041a92c <.LVL32>:
  41a92c:	f002 feb3 	bl	41d696 <.LFE18>

0041a930 <.LVL33>:
        if (ret == 0)
  41a930:	4604      	mov	r4, r0
  41a932:	2800      	cmp	r0, #0
  41a934:	d0ac      	beq.n	41a890 <.LVL15>
        if (ret == 0)
  41a936:	2c00      	cmp	r4, #0
  41a938:	d0cc      	beq.n	41a8d4 <.LVL22>

0041a93a <.LVL34>:
        wc_Sha256Free(&sha);
  41a93a:	a80a      	add	r0, sp, #40	; 0x28
  41a93c:	f000 ff79 	bl	41b832 <.LFE38>

0041a940 <.LVL35>:
  41a940:	e7e3      	b.n	41a90a <.LVL28>

0041a942 <.LVL36>:
                ret = wc_Sha256Update(&sha, inB, inBSz);
  41a942:	465a      	mov	r2, fp
  41a944:	4651      	mov	r1, sl
  41a946:	a80a      	add	r0, sp, #40	; 0x28

0041a948 <.LVL37>:
  41a948:	f002 fea5 	bl	41d696 <.LFE18>

0041a94c <.LVL38>:
  41a94c:	4604      	mov	r4, r0

0041a94e <.LVL39>:
  41a94e:	e7f2      	b.n	41a936 <.LVL33+0x6>

0041a950 <.LVL40>:
                XMEMCPY(out, digest, outSz);
  41a950:	463a      	mov	r2, r7
  41a952:	a902      	add	r1, sp, #8
  41a954:	4628      	mov	r0, r5
  41a956:	f000 f815 	bl	41a984 <.LFE14>

0041a95a <.LVL41>:
  41a95a:	e7d6      	b.n	41a90a <.LVL28>

0041a95c <.LVL42>:
    int ret = DRBG_FAILURE;
  41a95c:	2402      	movs	r4, #2

0041a95e <.LBB41>:
    volatile byte* z = (volatile byte*)mem;
  41a95e:	ab02      	add	r3, sp, #8

0041a960 <.LVL44>:
    while (len--) *z++ = 0;
  41a960:	2000      	movs	r0, #0
  41a962:	a90a      	add	r1, sp, #40	; 0x28

0041a964 <.LVL45>:
  41a964:	1c5a      	adds	r2, r3, #1

0041a966 <.LVL46>:
  41a966:	7018      	strb	r0, [r3, #0]

0041a968 <.LVL47>:
  41a968:	4613      	mov	r3, r2
  41a96a:	428a      	cmp	r2, r1
  41a96c:	d1fa      	bne.n	41a964 <.LVL45>

0041a96e <.LBE41>:
    return (ret == 0) ? DRBG_SUCCESS : DRBG_FAILURE;
  41a96e:	2c00      	cmp	r4, #0
  41a970:	bf18      	it	ne
  41a972:	2402      	movne	r4, #2

0041a974 <.LVL49>:
}
  41a974:	4620      	mov	r0, r4
  41a976:	b029      	add	sp, #164	; 0xa4

0041a978 <.LCFI4>:
  41a978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0041a97c <.LCFI5>:
        wc_Sha256Free(&sha);
  41a97c:	a80a      	add	r0, sp, #40	; 0x28
  41a97e:	f000 ff58 	bl	41b832 <.LFE38>

0041a982 <.LVL51>:
  41a982:	e7c2      	b.n	41a90a <.LVL28>

Disassembly of section .text%107:

0041a984 <memcpy>:
  41a984:	4684      	mov	ip, r0
  41a986:	ea41 0300 	orr.w	r3, r1, r0
  41a98a:	f013 0303 	ands.w	r3, r3, #3
  41a98e:	d16d      	bne.n	41aa6c <memcpy+0xe8>
  41a990:	3a40      	subs	r2, #64	; 0x40
  41a992:	d341      	bcc.n	41aa18 <memcpy+0x94>
  41a994:	f851 3b04 	ldr.w	r3, [r1], #4
  41a998:	f840 3b04 	str.w	r3, [r0], #4
  41a99c:	f851 3b04 	ldr.w	r3, [r1], #4
  41a9a0:	f840 3b04 	str.w	r3, [r0], #4
  41a9a4:	f851 3b04 	ldr.w	r3, [r1], #4
  41a9a8:	f840 3b04 	str.w	r3, [r0], #4
  41a9ac:	f851 3b04 	ldr.w	r3, [r1], #4
  41a9b0:	f840 3b04 	str.w	r3, [r0], #4
  41a9b4:	f851 3b04 	ldr.w	r3, [r1], #4
  41a9b8:	f840 3b04 	str.w	r3, [r0], #4
  41a9bc:	f851 3b04 	ldr.w	r3, [r1], #4
  41a9c0:	f840 3b04 	str.w	r3, [r0], #4
  41a9c4:	f851 3b04 	ldr.w	r3, [r1], #4
  41a9c8:	f840 3b04 	str.w	r3, [r0], #4
  41a9cc:	f851 3b04 	ldr.w	r3, [r1], #4
  41a9d0:	f840 3b04 	str.w	r3, [r0], #4
  41a9d4:	f851 3b04 	ldr.w	r3, [r1], #4
  41a9d8:	f840 3b04 	str.w	r3, [r0], #4
  41a9dc:	f851 3b04 	ldr.w	r3, [r1], #4
  41a9e0:	f840 3b04 	str.w	r3, [r0], #4
  41a9e4:	f851 3b04 	ldr.w	r3, [r1], #4
  41a9e8:	f840 3b04 	str.w	r3, [r0], #4
  41a9ec:	f851 3b04 	ldr.w	r3, [r1], #4
  41a9f0:	f840 3b04 	str.w	r3, [r0], #4
  41a9f4:	f851 3b04 	ldr.w	r3, [r1], #4
  41a9f8:	f840 3b04 	str.w	r3, [r0], #4
  41a9fc:	f851 3b04 	ldr.w	r3, [r1], #4
  41aa00:	f840 3b04 	str.w	r3, [r0], #4
  41aa04:	f851 3b04 	ldr.w	r3, [r1], #4
  41aa08:	f840 3b04 	str.w	r3, [r0], #4
  41aa0c:	f851 3b04 	ldr.w	r3, [r1], #4
  41aa10:	f840 3b04 	str.w	r3, [r0], #4
  41aa14:	3a40      	subs	r2, #64	; 0x40
  41aa16:	d2bd      	bcs.n	41a994 <memcpy+0x10>
  41aa18:	3230      	adds	r2, #48	; 0x30
  41aa1a:	d311      	bcc.n	41aa40 <memcpy+0xbc>
  41aa1c:	f851 3b04 	ldr.w	r3, [r1], #4
  41aa20:	f840 3b04 	str.w	r3, [r0], #4
  41aa24:	f851 3b04 	ldr.w	r3, [r1], #4
  41aa28:	f840 3b04 	str.w	r3, [r0], #4
  41aa2c:	f851 3b04 	ldr.w	r3, [r1], #4
  41aa30:	f840 3b04 	str.w	r3, [r0], #4
  41aa34:	f851 3b04 	ldr.w	r3, [r1], #4
  41aa38:	f840 3b04 	str.w	r3, [r0], #4
  41aa3c:	3a10      	subs	r2, #16
  41aa3e:	d2ed      	bcs.n	41aa1c <memcpy+0x98>
  41aa40:	320c      	adds	r2, #12
  41aa42:	d305      	bcc.n	41aa50 <memcpy+0xcc>
  41aa44:	f851 3b04 	ldr.w	r3, [r1], #4
  41aa48:	f840 3b04 	str.w	r3, [r0], #4
  41aa4c:	3a04      	subs	r2, #4
  41aa4e:	d2f9      	bcs.n	41aa44 <memcpy+0xc0>
  41aa50:	3204      	adds	r2, #4
  41aa52:	d008      	beq.n	41aa66 <memcpy+0xe2>
  41aa54:	07d2      	lsls	r2, r2, #31
  41aa56:	bf1c      	itt	ne
  41aa58:	f811 3b01 	ldrbne.w	r3, [r1], #1
  41aa5c:	f800 3b01 	strbne.w	r3, [r0], #1
  41aa60:	d301      	bcc.n	41aa66 <memcpy+0xe2>
  41aa62:	880b      	ldrh	r3, [r1, #0]
  41aa64:	8003      	strh	r3, [r0, #0]
  41aa66:	4660      	mov	r0, ip
  41aa68:	4770      	bx	lr
  41aa6a:	bf00      	nop
  41aa6c:	2a08      	cmp	r2, #8
  41aa6e:	d313      	bcc.n	41aa98 <memcpy+0x114>
  41aa70:	078b      	lsls	r3, r1, #30
  41aa72:	d08d      	beq.n	41a990 <memcpy+0xc>
  41aa74:	f010 0303 	ands.w	r3, r0, #3
  41aa78:	d08a      	beq.n	41a990 <memcpy+0xc>
  41aa7a:	f1c3 0304 	rsb	r3, r3, #4
  41aa7e:	1ad2      	subs	r2, r2, r3
  41aa80:	07db      	lsls	r3, r3, #31
  41aa82:	bf1c      	itt	ne
  41aa84:	f811 3b01 	ldrbne.w	r3, [r1], #1
  41aa88:	f800 3b01 	strbne.w	r3, [r0], #1
  41aa8c:	d380      	bcc.n	41a990 <memcpy+0xc>
  41aa8e:	f831 3b02 	ldrh.w	r3, [r1], #2
  41aa92:	f820 3b02 	strh.w	r3, [r0], #2
  41aa96:	e77b      	b.n	41a990 <memcpy+0xc>
  41aa98:	3a04      	subs	r2, #4
  41aa9a:	d3d9      	bcc.n	41aa50 <memcpy+0xcc>
  41aa9c:	3a01      	subs	r2, #1
  41aa9e:	f811 3b01 	ldrb.w	r3, [r1], #1
  41aaa2:	f800 3b01 	strb.w	r3, [r0], #1
  41aaa6:	d2f9      	bcs.n	41aa9c <memcpy+0x118>
  41aaa8:	780b      	ldrb	r3, [r1, #0]
  41aaaa:	7003      	strb	r3, [r0, #0]
  41aaac:	784b      	ldrb	r3, [r1, #1]
  41aaae:	7043      	strb	r3, [r0, #1]
  41aab0:	788b      	ldrb	r3, [r1, #2]
  41aab2:	7083      	strb	r3, [r0, #2]
  41aab4:	4660      	mov	r0, ip
  41aab6:	4770      	bx	lr

Disassembly of section .text.DesRawProcessBlock%108:

0041aab8 <DesRawProcessBlock>:

        return wc_Des3_SetIV(des, iv);
    }

    static void DesRawProcessBlock(word32* lIn, word32* rIn, const word32* kptr)
    {
  41aab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0041aabc <.LCFI0>:
        word32 l = *lIn, r = *rIn, i;
  41aabc:	6807      	ldr	r7, [r0, #0]

0041aabe <.LVL1>:
  41aabe:	f8d1 e000 	ldr.w	lr, [r1]

0041aac2 <.LVL2>:
  41aac2:	4616      	mov	r6, r2
  41aac4:	3280      	adds	r2, #128	; 0x80

0041aac6 <.LBB68>:

        for (i=0; i<8; i++)
        {
            word32 work = rotrFixed(r, 4U) ^ kptr[4*i+0];
            l ^= Spbox[6][(work) & 0x3f]
  41aac6:	4b47      	ldr	r3, [pc, #284]	; (41abe4 <.LVL21>)

0041aac8 <.LVL4>:
            word32 work = rotrFixed(r, 4U) ^ kptr[4*i+0];
  41aac8:	6834      	ldr	r4, [r6, #0]
  41aaca:	ea84 1c3e 	eor.w	ip, r4, lr, ror #4

0041aace <.LVL5>:
              ^  Spbox[4][(work >> 8) & 0x3f]
              ^  Spbox[2][(work >> 16) & 0x3f]
              ^  Spbox[0][(work >> 24) & 0x3f];
            work = r ^ kptr[4*i+1];
  41aace:	6874      	ldr	r4, [r6, #4]
  41aad0:	ea8e 0404 	eor.w	r4, lr, r4

0041aad4 <.LVL6>:
            l ^= Spbox[6][(work) & 0x3f]
  41aad4:	f00c 053f 	and.w	r5, ip, #63	; 0x3f
  41aad8:	f505 75c0 	add.w	r5, r5, #384	; 0x180

0041aadc <.LVL7>:
            l ^= Spbox[7][(work) & 0x3f]
  41aadc:	f004 083f 	and.w	r8, r4, #63	; 0x3f
  41aae0:	f508 78e0 	add.w	r8, r8, #448	; 0x1c0
  41aae4:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]

0041aae8 <.LVL8>:
  41aae8:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
  41aaec:	ea85 0508 	eor.w	r5, r5, r8
              ^  Spbox[4][(work >> 8) & 0x3f]
  41aaf0:	f3cc 2805 	ubfx	r8, ip, #8, #6
  41aaf4:	f508 7880 	add.w	r8, r8, #256	; 0x100
            l ^= Spbox[7][(work) & 0x3f]
  41aaf8:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
  41aafc:	ea85 0508 	eor.w	r5, r5, r8
              ^  Spbox[2][(work >> 16) & 0x3f]
  41ab00:	f3cc 4805 	ubfx	r8, ip, #16, #6
  41ab04:	f108 0880 	add.w	r8, r8, #128	; 0x80
            l ^= Spbox[7][(work) & 0x3f]
  41ab08:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
  41ab0c:	ea85 0508 	eor.w	r5, r5, r8
              ^  Spbox[0][(work >> 24) & 0x3f];
  41ab10:	f3cc 6c05 	ubfx	ip, ip, #24, #6

0041ab14 <.LVL9>:
            l ^= Spbox[7][(work) & 0x3f]
  41ab14:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
  41ab18:	ea85 050c 	eor.w	r5, r5, ip
              ^  Spbox[5][(work >> 8) & 0x3f]
  41ab1c:	f3c4 2c05 	ubfx	ip, r4, #8, #6
  41ab20:	f50c 7ca0 	add.w	ip, ip, #320	; 0x140
            l ^= Spbox[7][(work) & 0x3f]
  41ab24:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
  41ab28:	ea85 050c 	eor.w	r5, r5, ip
              ^  Spbox[3][(work >> 16) & 0x3f]
  41ab2c:	f3c4 4c05 	ubfx	ip, r4, #16, #6
  41ab30:	f10c 0cc0 	add.w	ip, ip, #192	; 0xc0
            l ^= Spbox[7][(work) & 0x3f]
  41ab34:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
  41ab38:	ea85 050c 	eor.w	r5, r5, ip
              ^  Spbox[1][(work >> 24) & 0x3f];
  41ab3c:	f3c4 6405 	ubfx	r4, r4, #24, #6

0041ab40 <.LVL10>:
  41ab40:	3440      	adds	r4, #64	; 0x40
            l ^= Spbox[7][(work) & 0x3f]
  41ab42:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
  41ab46:	4065      	eors	r5, r4
  41ab48:	406f      	eors	r7, r5

0041ab4a <.LVL11>:

            work = rotrFixed(l, 4U) ^ kptr[4*i+2];
  41ab4a:	68b5      	ldr	r5, [r6, #8]
  41ab4c:	ea85 1537 	eor.w	r5, r5, r7, ror #4

0041ab50 <.LVL12>:
            r ^= Spbox[6][(work) & 0x3f]
              ^  Spbox[4][(work >> 8) & 0x3f]
              ^  Spbox[2][(work >> 16) & 0x3f]
              ^  Spbox[0][(work >> 24) & 0x3f];
            work = l ^ kptr[4*i+3];
  41ab50:	68f4      	ldr	r4, [r6, #12]
  41ab52:	ea87 0c04 	eor.w	ip, r7, r4

0041ab56 <.LVL13>:
            r ^= Spbox[6][(work) & 0x3f]
  41ab56:	f005 043f 	and.w	r4, r5, #63	; 0x3f
  41ab5a:	f504 74c0 	add.w	r4, r4, #384	; 0x180

0041ab5e <.LVL14>:
            r ^= Spbox[7][(work) & 0x3f]
  41ab5e:	f00c 083f 	and.w	r8, ip, #63	; 0x3f
  41ab62:	f508 78e0 	add.w	r8, r8, #448	; 0x1c0
  41ab66:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]

0041ab6a <.LVL15>:
  41ab6a:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
  41ab6e:	ea84 0408 	eor.w	r4, r4, r8
  41ab72:	ea84 040e 	eor.w	r4, r4, lr
              ^  Spbox[5][(work >> 8) & 0x3f]
  41ab76:	f3cc 2e05 	ubfx	lr, ip, #8, #6

0041ab7a <.LVL16>:
  41ab7a:	f50e 7ea0 	add.w	lr, lr, #320	; 0x140
  41ab7e:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
  41ab82:	ea84 040e 	eor.w	r4, r4, lr
              ^  Spbox[3][(work >> 16) & 0x3f]
  41ab86:	f3cc 4e05 	ubfx	lr, ip, #16, #6
  41ab8a:	f10e 0ec0 	add.w	lr, lr, #192	; 0xc0
  41ab8e:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
  41ab92:	ea84 040e 	eor.w	r4, r4, lr
              ^  Spbox[1][(work >> 24) & 0x3f];
  41ab96:	f3cc 6c05 	ubfx	ip, ip, #24, #6

0041ab9a <.LVL17>:
  41ab9a:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
  41ab9e:	f853 e02c 	ldr.w	lr, [r3, ip, lsl #2]
  41aba2:	ea84 040e 	eor.w	r4, r4, lr
              ^  Spbox[4][(work >> 8) & 0x3f]
  41aba6:	f3c5 2e05 	ubfx	lr, r5, #8, #6
  41abaa:	f50e 7e80 	add.w	lr, lr, #256	; 0x100
  41abae:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
  41abb2:	ea84 040e 	eor.w	r4, r4, lr
              ^  Spbox[2][(work >> 16) & 0x3f]
  41abb6:	f3c5 4e05 	ubfx	lr, r5, #16, #6
  41abba:	f10e 0e80 	add.w	lr, lr, #128	; 0x80
  41abbe:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
  41abc2:	ea84 040e 	eor.w	r4, r4, lr
              ^  Spbox[0][(work >> 24) & 0x3f];
  41abc6:	f3c5 6505 	ubfx	r5, r5, #24, #6
            r ^= Spbox[7][(work) & 0x3f]
  41abca:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
  41abce:	ea84 0e05 	eor.w	lr, r4, r5

0041abd2 <.LVL18>:
  41abd2:	3610      	adds	r6, #16

0041abd4 <.LBE68>:
        for (i=0; i<8; i++)
  41abd4:	42b2      	cmp	r2, r6
  41abd6:	f47f af77 	bne.w	41aac8 <.LVL4>
        }

        *lIn = l; *rIn = r;
  41abda:	6007      	str	r7, [r0, #0]

0041abdc <.LVL20>:
  41abdc:	f8c1 e000 	str.w	lr, [r1]
  41abe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041abe4 <.LVL21>:
  41abe4:	0040f0ac 	.word	0x0040f0ac

Disassembly of section .text.Des3ProcessBlock%109:

0041abe8 <Des3ProcessBlock>:
        XMEMCPY(out, &r, sizeof(r));
        XMEMCPY(out + sizeof(r), &l, sizeof(l));
    }

    static void Des3ProcessBlock(Des3* des, const byte* in, byte* out)
    {
  41abe8:	b5f0      	push	{r4, r5, r6, r7, lr}

0041abea <.LCFI1>:
  41abea:	b083      	sub	sp, #12

0041abec <.LCFI2>:
  41abec:	4606      	mov	r6, r0
  41abee:	4614      	mov	r4, r2
        word32 l, r;

        XMEMCPY(&l, in, sizeof(l));
  41abf0:	680b      	ldr	r3, [r1, #0]
        XMEMCPY(&r, in + sizeof(l), sizeof(r));
  41abf2:	6849      	ldr	r1, [r1, #4]

0041abf4 <.LBB113>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  41abf4:	0a1a      	lsrs	r2, r3, #8

0041abf6 <.LVL24>:
  41abf6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
  41abfa:	021b      	lsls	r3, r3, #8

0041abfc <.LVL25>:
  41abfc:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  41ac00:	431a      	orrs	r2, r3

0041ac02 <.LBB115>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  41ac02:	ea4f 4232 	mov.w	r2, r2, ror #16

0041ac06 <.LBB117>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  41ac06:	0a0b      	lsrs	r3, r1, #8
  41ac08:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  41ac0c:	0209      	lsls	r1, r1, #8

0041ac0e <.LVL28>:
  41ac0e:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  41ac12:	430b      	orrs	r3, r1

0041ac14 <.LBB119>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  41ac14:	ea4f 3333 	mov.w	r3, r3, ror #12

0041ac18 <.LBE121>:
        work = (*left ^ *right) & 0xf0f0f0f0;
  41ac18:	ea82 0103 	eor.w	r1, r2, r3
  41ac1c:	f001 31f0 	and.w	r1, r1, #4042322160	; 0xf0f0f0f0

0041ac20 <.LVL30>:
        *left ^= work;
  41ac20:	404a      	eors	r2, r1

0041ac22 <.LVL31>:
        *right = rotrFixed(*right^work, 20U);
  41ac22:	404b      	eors	r3, r1

0041ac24 <.LBB123>:
        return (x >> y) | (x << (sizeof(y) * 8 - y));
  41ac24:	ea4f 5333 	mov.w	r3, r3, ror #20

0041ac28 <.LBE123>:
        work = (*left ^ *right) & 0xffff0000;
  41ac28:	ea82 0103 	eor.w	r1, r2, r3

0041ac2c <.LVL34>:
  41ac2c:	4d39      	ldr	r5, [pc, #228]	; (41ad14 <.LVL83>)
  41ac2e:	4029      	ands	r1, r5

0041ac30 <.LVL35>:
        *left ^= work;
  41ac30:	404a      	eors	r2, r1

0041ac32 <.LVL36>:
        *right = rotrFixed(*right^work, 18U);
  41ac32:	404b      	eors	r3, r1

0041ac34 <.LBB125>:
  41ac34:	ea4f 43b3 	mov.w	r3, r3, ror #18

0041ac38 <.LBE125>:
        work = (*left ^ *right) & 0x33333333;
  41ac38:	ea82 0103 	eor.w	r1, r2, r3

0041ac3c <.LVL39>:
  41ac3c:	f001 3133 	and.w	r1, r1, #858993459	; 0x33333333

0041ac40 <.LVL40>:
        *left ^= work;
  41ac40:	404a      	eors	r2, r1

0041ac42 <.LVL41>:
        *right = rotrFixed(*right^work, 6U);
  41ac42:	404b      	eors	r3, r1

0041ac44 <.LBB127>:
  41ac44:	ea4f 13b3 	mov.w	r3, r3, ror #6

0041ac48 <.LBE127>:
        work = (*left ^ *right) & 0x00ff00ff;
  41ac48:	ea82 0103 	eor.w	r1, r2, r3

0041ac4c <.LVL44>:
  41ac4c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff

0041ac50 <.LVL45>:
        *left ^= work;
  41ac50:	404a      	eors	r2, r1

0041ac52 <.LVL46>:
        *right = rotlFixed(*right^work, 9U);
  41ac52:	404b      	eors	r3, r1

0041ac54 <.LBB129>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  41ac54:	ea4f 53f3 	mov.w	r3, r3, ror #23

0041ac58 <.LBE129>:
        work = (*left ^ *right) & 0xaaaaaaaa;
  41ac58:	ea82 0103 	eor.w	r1, r2, r3

0041ac5c <.LVL49>:
  41ac5c:	f001 31aa 	and.w	r1, r1, #2863311530	; 0xaaaaaaaa

0041ac60 <.LVL50>:
        *left = rotlFixed(*left^work, 1U);
  41ac60:	404a      	eors	r2, r1

0041ac62 <.LBB131>:
  41ac62:	ea4f 72f2 	mov.w	r2, r2, ror #31

0041ac66 <.LBE131>:
  41ac66:	9201      	str	r2, [sp, #4]
        *right ^= work;
  41ac68:	404b      	eors	r3, r1
  41ac6a:	af02      	add	r7, sp, #8
  41ac6c:	f847 3d08 	str.w	r3, [r7, #-8]!

0041ac70 <.LBE119>:
            l = ByteReverseWord32(l);
            r = ByteReverseWord32(r);
        #endif
        IPERM(&l,&r);

        DesRawProcessBlock(&l, &r, des->key[0]);
  41ac70:	4602      	mov	r2, r0
  41ac72:	4639      	mov	r1, r7
  41ac74:	a801      	add	r0, sp, #4

0041ac76 <.LVL52>:
  41ac76:	f7ff ff1f 	bl	41aab8 <L0>

0041ac7a <.LVL53>:
        DesRawProcessBlock(&r, &l, des->key[1]);
  41ac7a:	f106 0280 	add.w	r2, r6, #128	; 0x80
  41ac7e:	a901      	add	r1, sp, #4
  41ac80:	4638      	mov	r0, r7
  41ac82:	f7ff ff19 	bl	41aab8 <L0>

0041ac86 <.LVL54>:
        DesRawProcessBlock(&l, &r, des->key[2]);
  41ac86:	f506 7280 	add.w	r2, r6, #256	; 0x100
  41ac8a:	4639      	mov	r1, r7
  41ac8c:	a801      	add	r0, sp, #4
  41ac8e:	f7ff ff13 	bl	41aab8 <L0>

0041ac92 <.LBB133>:
        return (x >> y) | (x << (sizeof(y) * 8 - y));
  41ac92:	9a00      	ldr	r2, [sp, #0]
  41ac94:	ea4f 0272 	mov.w	r2, r2, ror #1

0041ac98 <.LBE135>:
        work = (*left ^ *right) & 0xaaaaaaaa;
  41ac98:	9b01      	ldr	r3, [sp, #4]
  41ac9a:	ea82 0103 	eor.w	r1, r2, r3
  41ac9e:	f001 31aa 	and.w	r1, r1, #2863311530	; 0xaaaaaaaa

0041aca2 <.LVL57>:
        *right ^= work;
  41aca2:	404a      	eors	r2, r1

0041aca4 <.LVL58>:
        *left = rotrFixed(*left^work, 9U);
  41aca4:	404b      	eors	r3, r1

0041aca6 <.LBB137>:
  41aca6:	ea4f 2373 	mov.w	r3, r3, ror #9

0041acaa <.LBE137>:
        work = (*left ^ *right) & 0x00ff00ff;
  41acaa:	ea82 0103 	eor.w	r1, r2, r3

0041acae <.LVL61>:
  41acae:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff

0041acb2 <.LVL62>:
        *right ^= work;
  41acb2:	404a      	eors	r2, r1

0041acb4 <.LVL63>:
        *left = rotlFixed(*left^work, 6U);
  41acb4:	404b      	eors	r3, r1

0041acb6 <.LBB139>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  41acb6:	ea4f 63b3 	mov.w	r3, r3, ror #26

0041acba <.LBE139>:
        work = (*left ^ *right) & 0x33333333;
  41acba:	ea82 0103 	eor.w	r1, r2, r3

0041acbe <.LVL66>:
  41acbe:	f001 3133 	and.w	r1, r1, #858993459	; 0x33333333

0041acc2 <.LVL67>:
        *right ^= work;
  41acc2:	404a      	eors	r2, r1

0041acc4 <.LVL68>:
        *left = rotlFixed(*left^work, 18U);
  41acc4:	404b      	eors	r3, r1

0041acc6 <.LBB141>:
  41acc6:	ea4f 33b3 	mov.w	r3, r3, ror #14

0041acca <.LBE141>:
        work = (*left ^ *right) & 0xffff0000;
  41acca:	ea82 0103 	eor.w	r1, r2, r3

0041acce <.LVL71>:
  41acce:	400d      	ands	r5, r1

0041acd0 <.LVL72>:
        *right ^= work;
  41acd0:	406a      	eors	r2, r5

0041acd2 <.LVL73>:
        *left = rotlFixed(*left^work, 20U);
  41acd2:	406b      	eors	r3, r5

0041acd4 <.LBB143>:
  41acd4:	ea4f 3333 	mov.w	r3, r3, ror #12

0041acd8 <.LBE143>:
        work = (*left ^ *right) & 0xf0f0f0f0;
  41acd8:	ea82 0103 	eor.w	r1, r2, r3
  41acdc:	f001 31f0 	and.w	r1, r1, #4042322160	; 0xf0f0f0f0

0041ace0 <.LVL76>:
        *right ^= work;
  41ace0:	404a      	eors	r2, r1

0041ace2 <.LVL77>:
        *left = rotrFixed(*left^work, 4U);
  41ace2:	404b      	eors	r3, r1

0041ace4 <.LBB145>:
        return (x >> y) | (x << (sizeof(y) * 8 - y));
  41ace4:	ea4f 1333 	mov.w	r3, r3, ror #4

0041ace8 <.LBB147>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  41ace8:	0211      	lsls	r1, r2, #8
  41acea:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  41acee:	0a12      	lsrs	r2, r2, #8

0041acf0 <.LVL80>:
  41acf0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
  41acf4:	430a      	orrs	r2, r1

0041acf6 <.LBB149>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  41acf6:	ea4f 4232 	mov.w	r2, r2, ror #16

0041acfa <.LBE147>:
        FPERM(&l,&r);
        #ifdef LITTLE_ENDIAN_ORDER
            l = ByteReverseWord32(l);
            r = ByteReverseWord32(r);
        #endif
        XMEMCPY(out, &r, sizeof(r));
  41acfa:	6022      	str	r2, [r4, #0]

0041acfc <.LBB151>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  41acfc:	0a1a      	lsrs	r2, r3, #8
  41acfe:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
  41ad02:	021b      	lsls	r3, r3, #8

0041ad04 <.LVL81>:
  41ad04:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  41ad08:	4313      	orrs	r3, r2

0041ad0a <.LBB153>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  41ad0a:	ea4f 4333 	mov.w	r3, r3, ror #16

0041ad0e <.LBE151>:
        XMEMCPY(out + sizeof(r), &l, sizeof(l));
  41ad0e:	6063      	str	r3, [r4, #4]
    }
  41ad10:	b003      	add	sp, #12

0041ad12 <.LCFI3>:
  41ad12:	bdf0      	pop	{r4, r5, r6, r7, pc}

0041ad14 <.LVL83>:
  41ad14:	ffff0000 	.word	0xffff0000

Disassembly of section .text.ecc_map%110:

0041ad18 <ecc_map>:
{
  41ad18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

0041ad1c <.LCFI23>:
  41ad1c:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c

0041ad20 <.LCFI24>:
   if (P == NULL || modulus == NULL)
  41ad20:	2800      	cmp	r0, #0
  41ad22:	f000 8088 	beq.w	41ae36 <.LVL509>
  41ad26:	4604      	mov	r4, r0
  41ad28:	2900      	cmp	r1, #0
  41ad2a:	f000 8084 	beq.w	41ae36 <.LVL509>
  41ad2e:	4617      	mov	r7, r2
  41ad30:	460d      	mov	r5, r1
   if (mp_cmp_d(P->z, 0) == MP_EQ) {
  41ad32:	f500 688a 	add.w	r8, r0, #1104	; 0x450
  41ad36:	2100      	movs	r1, #0

0041ad38 <.LVL463>:
  41ad38:	4640      	mov	r0, r8

0041ad3a <.LVL464>:
  41ad3a:	f007 fc0b 	bl	422554 <.LFE81>

0041ad3e <.LVL465>:
  41ad3e:	b990      	cbnz	r0, 41ad66 <.LVL472>
       err = mp_set(P->x, 0);
  41ad40:	2100      	movs	r1, #0
  41ad42:	4620      	mov	r0, r4
  41ad44:	f007 fbc7 	bl	4224d6 <.LFE113>

0041ad48 <.LVL466>:
       if (err == MP_OKAY)
  41ad48:	4606      	mov	r6, r0
  41ad4a:	bb40      	cbnz	r0, 41ad9e <.LVL480>
           err = mp_set(P->y, 0);
  41ad4c:	2100      	movs	r1, #0
  41ad4e:	f504 700a 	add.w	r0, r4, #552	; 0x228

0041ad52 <.LVL467>:
  41ad52:	f007 fbc0 	bl	4224d6 <.LFE113>

0041ad56 <.LVL468>:
       if (err == MP_OKAY)
  41ad56:	4606      	mov	r6, r0
  41ad58:	bb08      	cbnz	r0, 41ad9e <.LVL480>
           err = mp_set(P->z, 1);
  41ad5a:	2101      	movs	r1, #1
  41ad5c:	4640      	mov	r0, r8

0041ad5e <.LVL469>:
  41ad5e:	f007 fbba 	bl	4224d6 <.LFE113>

0041ad62 <.LVL470>:
  41ad62:	4606      	mov	r6, r0

0041ad64 <.LVL471>:
  41ad64:	e01b      	b.n	41ad9e <.LVL480>

0041ad66 <.LVL472>:
   if ((err = mp_init_multi(&t1, &t2, NULL, NULL, NULL, NULL)) != MP_OKAY) {
  41ad66:	2200      	movs	r2, #0
  41ad68:	9201      	str	r2, [sp, #4]
  41ad6a:	9200      	str	r2, [sp, #0]
  41ad6c:	4613      	mov	r3, r2
  41ad6e:	a902      	add	r1, sp, #8
  41ad70:	a88c      	add	r0, sp, #560	; 0x230
  41ad72:	f006 fa07 	bl	421184 <mp_init_multi>

0041ad76 <.LVL473>:
  41ad76:	2800      	cmp	r0, #0
  41ad78:	d160      	bne.n	41ae3c <.LVL510>

0041ad7a <.LVL474>:
   y = P->y;
  41ad7a:	f504 790a 	add.w	r9, r4, #552	; 0x228

0041ad7e <.LVL475>:
   err = mp_montgomery_reduce(z, modulus, mp);
  41ad7e:	463a      	mov	r2, r7
  41ad80:	4629      	mov	r1, r5
  41ad82:	4640      	mov	r0, r8

0041ad84 <.LVL476>:
  41ad84:	f007 fb9d 	bl	4224c2 <.LFE110>

0041ad88 <.LVL477>:
   if (err == MP_OKAY)
  41ad88:	4606      	mov	r6, r0
  41ad8a:	b168      	cbz	r0, 41ada8 <.LCFI26>
   if (err == MP_OKAY)
  41ad8c:	b33e      	cbz	r6, 41adde <.LVL490+0x2>
   if (err == MP_OKAY)
  41ad8e:	2e00      	cmp	r6, #0
  41ad90:	d043      	beq.n	41ae1a <.LVL502+0x2>
   mp_clear(&t1);
  41ad92:	a88c      	add	r0, sp, #560	; 0x230

0041ad94 <.LVL478>:
  41ad94:	f007 fb1c 	bl	4223d0 <.LFE16>

0041ad98 <.LVL479>:
   mp_clear(&t2);
  41ad98:	a802      	add	r0, sp, #8
  41ad9a:	f007 fb19 	bl	4223d0 <.LFE16>

0041ad9e <.LVL480>:
}
  41ad9e:	4630      	mov	r0, r6
  41ada0:	f20d 4d5c 	addw	sp, sp, #1116	; 0x45c

0041ada4 <.LCFI25>:
  41ada4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0041ada8 <.LCFI26>:
       err = mp_invmod(z, modulus, &t1);
  41ada8:	aa8c      	add	r2, sp, #560	; 0x230
  41adaa:	4629      	mov	r1, r5
  41adac:	4640      	mov	r0, r8

0041adae <.LVL482>:
  41adae:	f007 fbd9 	bl	422564 <.LFE83>

0041adb2 <.LVL483>:
   if (err == MP_OKAY)
  41adb2:	4606      	mov	r6, r0
  41adb4:	b9c8      	cbnz	r0, 41adea <.LVL493>
       err = mp_sqr(&t1, &t2);
  41adb6:	a902      	add	r1, sp, #8
  41adb8:	a88c      	add	r0, sp, #560	; 0x230

0041adba <.LVL484>:
  41adba:	f007 fb7d 	bl	4224b8 <.LFE105>

0041adbe <.LVL485>:
   if (err == MP_OKAY)
  41adbe:	4606      	mov	r6, r0
  41adc0:	b9d0      	cbnz	r0, 41adf8 <.LVL496>
       err = mp_mod(&t2, modulus, &t2);
  41adc2:	aa02      	add	r2, sp, #8
  41adc4:	4629      	mov	r1, r5
  41adc6:	4610      	mov	r0, r2

0041adc8 <.LVL486>:
  41adc8:	f007 fbd4 	bl	422574 <.LFE75>

0041adcc <.LVL487>:
   if (err == MP_OKAY)
  41adcc:	4606      	mov	r6, r0
  41adce:	b9d8      	cbnz	r0, 41ae08 <.LVL499>
       err = mp_mul(&t1, &t2, &t1);
  41add0:	aa8c      	add	r2, sp, #560	; 0x230
  41add2:	a902      	add	r1, sp, #8
  41add4:	4610      	mov	r0, r2

0041add6 <.LVL488>:
  41add6:	f007 fb56 	bl	422486 <.LFE86>

0041adda <.LVL489>:
  41adda:	4606      	mov	r6, r0

0041addc <.LVL490>:
  41addc:	e7d6      	b.n	41ad8c <.LVL477+0x4>
       err = mp_mod(&t1, modulus, &t1);
  41adde:	aa8c      	add	r2, sp, #560	; 0x230
  41ade0:	4629      	mov	r1, r5
  41ade2:	4610      	mov	r0, r2

0041ade4 <.LVL491>:
  41ade4:	f007 fbc6 	bl	422574 <.LFE75>

0041ade8 <.LVL492>:
  41ade8:	4606      	mov	r6, r0

0041adea <.LVL493>:
   if (err == MP_OKAY)
  41adea:	b9e6      	cbnz	r6, 41ae26 <.LVL505>
       err = mp_mul(x, &t2, x);
  41adec:	4622      	mov	r2, r4
  41adee:	a902      	add	r1, sp, #8
  41adf0:	4620      	mov	r0, r4

0041adf2 <.LVL494>:
  41adf2:	f007 fb48 	bl	422486 <.LFE86>

0041adf6 <.LVL495>:
  41adf6:	4606      	mov	r6, r0

0041adf8 <.LVL496>:
   if (err == MP_OKAY)
  41adf8:	2e00      	cmp	r6, #0
  41adfa:	d1ca      	bne.n	41ad92 <.LVL477+0xa>
       err = mp_montgomery_reduce(x, modulus, mp);
  41adfc:	463a      	mov	r2, r7
  41adfe:	4629      	mov	r1, r5
  41ae00:	4620      	mov	r0, r4

0041ae02 <.LVL497>:
  41ae02:	f007 fb5e 	bl	4224c2 <.LFE110>

0041ae06 <.LVL498>:
  41ae06:	4606      	mov	r6, r0

0041ae08 <.LVL499>:
   if (err == MP_OKAY)
  41ae08:	2e00      	cmp	r6, #0
  41ae0a:	d1c2      	bne.n	41ad92 <.LVL477+0xa>
       err = mp_mul(y, &t1, y);
  41ae0c:	464a      	mov	r2, r9
  41ae0e:	a98c      	add	r1, sp, #560	; 0x230
  41ae10:	4648      	mov	r0, r9

0041ae12 <.LVL500>:
  41ae12:	f007 fb38 	bl	422486 <.LFE86>

0041ae16 <.LVL501>:
  41ae16:	4606      	mov	r6, r0

0041ae18 <.LVL502>:
  41ae18:	e7b9      	b.n	41ad8e <.LVL477+0x6>
       err = mp_montgomery_reduce(y, modulus, mp);
  41ae1a:	463a      	mov	r2, r7
  41ae1c:	4629      	mov	r1, r5
  41ae1e:	4648      	mov	r0, r9

0041ae20 <.LVL503>:
  41ae20:	f007 fb4f 	bl	4224c2 <.LFE110>

0041ae24 <.LVL504>:
  41ae24:	4606      	mov	r6, r0

0041ae26 <.LVL505>:
   if (err == MP_OKAY)
  41ae26:	2e00      	cmp	r6, #0
  41ae28:	d1b3      	bne.n	41ad92 <.LVL477+0xa>
       err = mp_set(z, 1);
  41ae2a:	2101      	movs	r1, #1
  41ae2c:	4640      	mov	r0, r8

0041ae2e <.LVL506>:
  41ae2e:	f007 fb52 	bl	4224d6 <.LFE113>

0041ae32 <.LVL507>:
  41ae32:	4606      	mov	r6, r0

0041ae34 <.LVL508>:
  41ae34:	e7ad      	b.n	41ad92 <.LVL477+0xa>

0041ae36 <.LVL509>:
       return ECC_BAD_ARG_E;
  41ae36:	f06f 06a9 	mvn.w	r6, #169	; 0xa9
  41ae3a:	e7b0      	b.n	41ad9e <.LVL480>

0041ae3c <.LVL510>:
      return MEMORY_E;
  41ae3c:	f06f 067c 	mvn.w	r6, #124	; 0x7c
  41ae40:	e7ad      	b.n	41ad9e <.LVL480>

Disassembly of section .text.quorem%111:

0041ae44 <quorem>:
  41ae44:	6902      	ldr	r2, [r0, #16]
  41ae46:	690b      	ldr	r3, [r1, #16]

0041ae48 <.LVL1>:
  41ae48:	4293      	cmp	r3, r2
  41ae4a:	f300 808d 	bgt.w	41af68 <.LCFI3>
  41ae4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0041ae52 <.LCFI0>:
  41ae52:	f103 38ff 	add.w	r8, r3, #4294967295
  41ae56:	f101 0714 	add.w	r7, r1, #20

0041ae5a <.LVL2>:
  41ae5a:	f100 0b14 	add.w	fp, r0, #20
  41ae5e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  41ae62:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  41ae66:	ea4f 0488 	mov.w	r4, r8, lsl #2
  41ae6a:	b083      	sub	sp, #12

0041ae6c <.LCFI1>:
  41ae6c:	3201      	adds	r2, #1
  41ae6e:	fbb3 f9f2 	udiv	r9, r3, r2
  41ae72:	eb0b 0304 	add.w	r3, fp, r4
  41ae76:	9400      	str	r4, [sp, #0]
  41ae78:	eb07 0a04 	add.w	sl, r7, r4

0041ae7c <.LVL3>:
  41ae7c:	9301      	str	r3, [sp, #4]

0041ae7e <.LVL4>:
  41ae7e:	f1b9 0f00 	cmp.w	r9, #0
  41ae82:	d039      	beq.n	41aef8 <.LVL23>
  41ae84:	2500      	movs	r5, #0
  41ae86:	462e      	mov	r6, r5
  41ae88:	46bc      	mov	ip, r7
  41ae8a:	46de      	mov	lr, fp

0041ae8c <.LVL5>:
  41ae8c:	f85c 4b04 	ldr.w	r4, [ip], #4

0041ae90 <.LVL6>:
  41ae90:	f8de 3000 	ldr.w	r3, [lr]
  41ae94:	b2a2      	uxth	r2, r4
  41ae96:	fb09 5502 	mla	r5, r9, r2, r5

0041ae9a <.LVL7>:
  41ae9a:	0c22      	lsrs	r2, r4, #16
  41ae9c:	0c2c      	lsrs	r4, r5, #16

0041ae9e <.LVL8>:
  41ae9e:	fb09 4202 	mla	r2, r9, r2, r4

0041aea2 <.LVL9>:
  41aea2:	b2ad      	uxth	r5, r5

0041aea4 <.LVL10>:
  41aea4:	1b75      	subs	r5, r6, r5
  41aea6:	b296      	uxth	r6, r2

0041aea8 <.LVL11>:
  41aea8:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  41aeac:	fa15 f383 	uxtah	r3, r5, r3
  41aeb0:	eb06 4623 	add.w	r6, r6, r3, asr #16
  41aeb4:	b29b      	uxth	r3, r3
  41aeb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  41aeba:	45e2      	cmp	sl, ip
  41aebc:	ea4f 4512 	mov.w	r5, r2, lsr #16

0041aec0 <.LVL12>:
  41aec0:	f84e 3b04 	str.w	r3, [lr], #4

0041aec4 <.LVL13>:
  41aec4:	ea4f 4626 	mov.w	r6, r6, asr #16

0041aec8 <.LVL14>:
  41aec8:	d2e0      	bcs.n	41ae8c <.LVL5>
  41aeca:	9b00      	ldr	r3, [sp, #0]
  41aecc:	f85b 3003 	ldr.w	r3, [fp, r3]
  41aed0:	b993      	cbnz	r3, 41aef8 <.LVL23>

0041aed2 <.LVL15>:
  41aed2:	9c01      	ldr	r4, [sp, #4]
  41aed4:	1f23      	subs	r3, r4, #4

0041aed6 <.LVL16>:
  41aed6:	459b      	cmp	fp, r3
  41aed8:	d20c      	bcs.n	41aef4 <.LVL22>
  41aeda:	f854 3c04 	ldr.w	r3, [r4, #-4]

0041aede <.LVL17>:
  41aede:	b94b      	cbnz	r3, 41aef4 <.LVL22>
  41aee0:	f1a4 0308 	sub.w	r3, r4, #8
  41aee4:	e002      	b.n	41aeec <.LVL19+0x2>

0041aee6 <.LVL18>:
  41aee6:	681a      	ldr	r2, [r3, #0]
  41aee8:	3b04      	subs	r3, #4

0041aeea <.LVL19>:
  41aeea:	b91a      	cbnz	r2, 41aef4 <.LVL22>
  41aeec:	459b      	cmp	fp, r3
  41aeee:	f108 38ff 	add.w	r8, r8, #4294967295

0041aef2 <.LVL21>:
  41aef2:	d3f8      	bcc.n	41aee6 <.LVL18>

0041aef4 <.LVL22>:
  41aef4:	f8c0 8010 	str.w	r8, [r0, #16]

0041aef8 <.LVL23>:
  41aef8:	4604      	mov	r4, r0
  41aefa:	f006 fabf 	bl	42147c <.LBE18>

0041aefe <.LVL24>:
  41aefe:	2800      	cmp	r0, #0
  41af00:	db2e      	blt.n	41af60 <.LVL46>
  41af02:	f109 0901 	add.w	r9, r9, #1

0041af06 <.LVL25>:
  41af06:	465d      	mov	r5, fp
  41af08:	2300      	movs	r3, #0

0041af0a <.LVL26>:
  41af0a:	f857 1b04 	ldr.w	r1, [r7], #4

0041af0e <.LVL27>:
  41af0e:	6828      	ldr	r0, [r5, #0]
  41af10:	b28a      	uxth	r2, r1
  41af12:	1a9a      	subs	r2, r3, r2
  41af14:	0c0b      	lsrs	r3, r1, #16

0041af16 <.LVL28>:
  41af16:	fa12 f280 	uxtah	r2, r2, r0

0041af1a <.LVL29>:
  41af1a:	ebc3 4310 	rsb	r3, r3, r0, lsr #16

0041af1e <.LVL30>:
  41af1e:	eb03 4322 	add.w	r3, r3, r2, asr #16

0041af22 <.LVL31>:
  41af22:	b292      	uxth	r2, r2

0041af24 <.LVL32>:
  41af24:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  41af28:	45ba      	cmp	sl, r7
  41af2a:	f845 2b04 	str.w	r2, [r5], #4

0041af2e <.LVL33>:
  41af2e:	ea4f 4323 	mov.w	r3, r3, asr #16

0041af32 <.LVL34>:
  41af32:	d2ea      	bcs.n	41af0a <.LVL26>

0041af34 <.LVL35>:
  41af34:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  41af38:	eb0b 0388 	add.w	r3, fp, r8, lsl #2

0041af3c <.LVL36>:
  41af3c:	b982      	cbnz	r2, 41af60 <.LVL46>

0041af3e <.LVL37>:
  41af3e:	1f1a      	subs	r2, r3, #4

0041af40 <.LVL38>:
  41af40:	4593      	cmp	fp, r2
  41af42:	d20b      	bcs.n	41af5c <.LVL45>
  41af44:	f853 2c04 	ldr.w	r2, [r3, #-4]

0041af48 <.LVL39>:
  41af48:	b942      	cbnz	r2, 41af5c <.LVL45>
  41af4a:	3b08      	subs	r3, #8

0041af4c <.LVL40>:
  41af4c:	e002      	b.n	41af54 <.LVL42+0x2>

0041af4e <.LVL41>:
  41af4e:	681a      	ldr	r2, [r3, #0]
  41af50:	3b04      	subs	r3, #4

0041af52 <.LVL42>:
  41af52:	b91a      	cbnz	r2, 41af5c <.LVL45>
  41af54:	459b      	cmp	fp, r3
  41af56:	f108 38ff 	add.w	r8, r8, #4294967295

0041af5a <.LVL44>:
  41af5a:	d3f8      	bcc.n	41af4e <.LVL41>

0041af5c <.LVL45>:
  41af5c:	f8c4 8010 	str.w	r8, [r4, #16]

0041af60 <.LVL46>:
  41af60:	4648      	mov	r0, r9
  41af62:	b003      	add	sp, #12

0041af64 <.LCFI2>:
  41af64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0041af68 <.LCFI3>:
  41af68:	2000      	movs	r0, #0

0041af6a <.LVL48>:
  41af6a:	4770      	bx	lr

Disassembly of section .text._fp_exptmod%112:

0041af6c <_fp_exptmod>:
{
  41af6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0041af70 <.LCFI110>:
  41af70:	f2ad 6d94 	subw	sp, sp, #1684	; 0x694

0041af74 <.LCFI111>:
  41af74:	4604      	mov	r4, r0
  41af76:	9102      	str	r1, [sp, #8]
  41af78:	9200      	str	r2, [sp, #0]
  41af7a:	9303      	str	r3, [sp, #12]
  if ((err = fp_montgomery_setup (P, &mp)) != FP_OKAY) {
  41af7c:	a905      	add	r1, sp, #20

0041af7e <.LVL757>:
  41af7e:	4610      	mov	r0, r2

0041af80 <.LVL758>:
  41af80:	f006 f800 	bl	420f84 <.LFE25>

0041af84 <.LVL759>:
  41af84:	4606      	mov	r6, r0
  41af86:	b120      	cbz	r0, 41af92 <.LBB176>

0041af88 <.LVL760>:
}
  41af88:	4630      	mov	r0, r6
  41af8a:	f20d 6d94 	addw	sp, sp, #1684	; 0x694

0041af8e <.LCFI112>:
  41af8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0041af92 <.LBB176>:
    fp_zero(a);
  41af92:	a806      	add	r0, sp, #24

0041af94 <.LVL763>:
  41af94:	f007 f8d6 	bl	422144 <.LFE163>

0041af98 <.LBB178>:
  41af98:	a890      	add	r0, sp, #576	; 0x240

0041af9a <.LVL765>:
  41af9a:	f007 f8d3 	bl	422144 <.LFE163>

0041af9e <.LBB180>:
  41af9e:	f50d 608d 	add.w	r0, sp, #1128	; 0x468

0041afa2 <.LVL767>:
  41afa2:	f007 f8cf 	bl	422144 <.LFE163>

0041afa6 <.LBE180>:
  fp_montgomery_calc_normalization (&R[0], P);
  41afa6:	9d00      	ldr	r5, [sp, #0]
  41afa8:	4629      	mov	r1, r5
  41afaa:	a806      	add	r0, sp, #24
  41afac:	f004 f878 	bl	41f0a0 <.LFE16>

0041afb0 <.LVL769>:
  if (fp_cmp_mag(P, G) != FP_GT) {
  41afb0:	4621      	mov	r1, r4
  41afb2:	4628      	mov	r0, r5
  41afb4:	f005 f83f 	bl	420036 <.LFE16>

0041afb8 <.LVL770>:
  41afb8:	2801      	cmp	r0, #1
  41afba:	d015      	beq.n	41afe8 <.LVL775>
     fp_mod(G, P, &R[1]);
  41afbc:	aa90      	add	r2, sp, #576	; 0x240
  41afbe:	4629      	mov	r1, r5
  41afc0:	4620      	mov	r0, r4
  41afc2:	f005 fed2 	bl	420d6a <.LFE17>

0041afc6 <.LVL771>:
  fp_mulmod (&R[1], &R[0], P, &R[1]);
  41afc6:	ab90      	add	r3, sp, #576	; 0x240
  41afc8:	9a00      	ldr	r2, [sp, #0]
  41afca:	a906      	add	r1, sp, #24
  41afcc:	4618      	mov	r0, r3
  41afce:	f006 fc51 	bl	421874 <.LFE37>

0041afd2 <.LVL772>:
  digidx = X->used - 1;
  41afd2:	9b02      	ldr	r3, [sp, #8]
  41afd4:	681b      	ldr	r3, [r3, #0]
  41afd6:	f103 39ff 	add.w	r9, r3, #4294967295

0041afda <.LVL773>:
  bitcnt = 1;
  41afda:	2601      	movs	r6, #1

0041afdc <.LVL774>:
  buf    = 0;
  41afdc:	2700      	movs	r7, #0
    fp_mul(&R[0], &R[1], &R[y^1]); fp_montgomery_reduce(&R[y^1], P, mp);
  41afde:	f10d 0818 	add.w	r8, sp, #24
    fp_copy((fp_int*) ( ((wolfssl_word)&R[0] & wc_off_on_addr[y^1]) +
  41afe2:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 41b08c <.LVL794+0x2>
  41afe6:	e039      	b.n	41b05c <.LVL785>

0041afe8 <.LVL775>:
     fp_copy(G, &R[1]);
  41afe8:	a990      	add	r1, sp, #576	; 0x240
  41afea:	4620      	mov	r0, r4
  41afec:	f006 fdde 	bl	421bac <.LFE31>

0041aff0 <.LVL776>:
  41aff0:	e7e9      	b.n	41afc6 <.LVL771>

0041aff2 <.LVL777>:
    y     = (int)(buf >> (DIGIT_BIT - 1)) & 1;
  41aff2:	0ffc      	lsrs	r4, r7, #31

0041aff4 <.LVL778>:
    fp_mul(&R[0], &R[1], &R[y^1]); fp_montgomery_reduce(&R[y^1], P, mp);
  41aff4:	f084 0501 	eor.w	r5, r4, #1
  41aff8:	007f      	lsls	r7, r7, #1

0041affa <.LVL779>:
  41affa:	f44f 730a 	mov.w	r3, #552	; 0x228
  41affe:	fb03 8305 	mla	r3, r3, r5, r8
  41b002:	f50d 7a10 	add.w	sl, sp, #576	; 0x240
  41b006:	9301      	str	r3, [sp, #4]
  41b008:	461a      	mov	r2, r3
  41b00a:	4651      	mov	r1, sl
  41b00c:	4640      	mov	r0, r8
  41b00e:	f006 fc48 	bl	4218a2 <.LFE32>

0041b012 <.LVL780>:
  41b012:	9a05      	ldr	r2, [sp, #20]
  41b014:	9900      	ldr	r1, [sp, #0]
  41b016:	9801      	ldr	r0, [sp, #4]
  41b018:	f7ff f80b 	bl	41a032 <.LFE28>

0041b01c <.LVL781>:
    fp_copy((fp_int*) ( ((wolfssl_word)&R[0] & wc_off_on_addr[y^1]) +
  41b01c:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
  41b020:	ea08 0303 	and.w	r3, r8, r3
                        ((wolfssl_word)&R[1] & wc_off_on_addr[y]) ),
  41b024:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
  41b028:	ea0a 0404 	and.w	r4, sl, r4
    fp_copy((fp_int*) ( ((wolfssl_word)&R[0] & wc_off_on_addr[y^1]) +
  41b02c:	441c      	add	r4, r3
  41b02e:	f50d 638d 	add.w	r3, sp, #1128	; 0x468
  41b032:	4619      	mov	r1, r3
  41b034:	4620      	mov	r0, r4
  41b036:	f006 fdb9 	bl	421bac <.LFE31>

0041b03a <.LVL782>:
    fp_sqr(&R[2], &R[2]);          fp_montgomery_reduce(&R[2], P, mp);
  41b03a:	f50d 638d 	add.w	r3, sp, #1128	; 0x468
  41b03e:	4619      	mov	r1, r3
  41b040:	4618      	mov	r0, r3
  41b042:	f006 fc87 	bl	421954 <.LFE1>

0041b046 <.LVL783>:
  41b046:	9a05      	ldr	r2, [sp, #20]
  41b048:	9900      	ldr	r1, [sp, #0]
  41b04a:	f50d 608d 	add.w	r0, sp, #1128	; 0x468
  41b04e:	f7fe fff0 	bl	41a032 <.LFE28>

0041b052 <.LVL784>:
    fp_copy(&R[2],
  41b052:	4621      	mov	r1, r4
  41b054:	f50d 608d 	add.w	r0, sp, #1128	; 0x468
  41b058:	f006 fda8 	bl	421bac <.LFE31>

0041b05c <.LVL785>:
    if (--bitcnt == 0) {
  41b05c:	3e01      	subs	r6, #1

0041b05e <.LVL786>:
  41b05e:	d1c8      	bne.n	41aff2 <.LVL777>

0041b060 <.LVL787>:
      if (digidx == -1) {
  41b060:	f1b9 3fff 	cmp.w	r9, #4294967295
  41b064:	d008      	beq.n	41b078 <.LVL792>

0041b066 <.LVL788>:
      buf    = X->dp[digidx--];
  41b066:	f109 0302 	add.w	r3, r9, #2

0041b06a <.LVL789>:
  41b06a:	9a02      	ldr	r2, [sp, #8]
  41b06c:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]

0041b070 <.LVL790>:
  41b070:	f109 39ff 	add.w	r9, r9, #4294967295

0041b074 <.LVL791>:
      bitcnt = (int)DIGIT_BIT;
  41b074:	2620      	movs	r6, #32
  41b076:	e7bc      	b.n	41aff2 <.LVL777>

0041b078 <.LVL792>:
   fp_montgomery_reduce(&R[0], P, mp);
  41b078:	9a05      	ldr	r2, [sp, #20]
  41b07a:	9900      	ldr	r1, [sp, #0]
  41b07c:	a806      	add	r0, sp, #24
  41b07e:	f7fe ffd8 	bl	41a032 <.LFE28>

0041b082 <.LVL793>:
   fp_copy(&R[0], Y);
  41b082:	9903      	ldr	r1, [sp, #12]
  41b084:	a806      	add	r0, sp, #24
  41b086:	f006 fd91 	bl	421bac <.LFE31>

0041b08a <.LVL794>:
   return FP_OKAY;
  41b08a:	e77d      	b.n	41af88 <.LVL760>
  41b08c:	004225a4 	.word	0x004225a4

Disassembly of section .text.USART1_InterruptHandler%113:

0041b090 <USART1_InterruptHandler>:

    return;
}

void USART1_InterruptHandler( void )
{
  41b090:	b570      	push	{r4, r5, r6, lr}

0041b092 <.LCFI0>:
    /* Error status */
    uint32_t errorStatus = (USART1_REGS->US_CSR & (US_CSR_OVRE_Msk | US_CSR_FRAME_Msk | US_CSR_PARE_Msk));
  41b092:	4b46      	ldr	r3, [pc, #280]	; (41b1ac <.LBB11+0xe>)
  41b094:	695b      	ldr	r3, [r3, #20]

0041b096 <.LVL0>:

    if(errorStatus != 0)
  41b096:	f013 0fe0 	tst.w	r3, #224	; 0xe0
  41b09a:	d00e      	beq.n	41b0ba <.LVL1+0x1c>
    {
        /* Client must call USARTx_ErrorGet() function to clear the errors */

        /* USART errors are normally associated with the receiver, hence calling
         * receiver context */
        if( usart1Obj.rxCallback != NULL )
  41b09c:	4b44      	ldr	r3, [pc, #272]	; (41b1b0 <.LBB11+0x12>)

0041b09e <.LVL1>:
  41b09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  41b0a0:	b113      	cbz	r3, 41b0a8 <.LVL1+0xa>
        {
            usart1Obj.rxCallback(usart1Obj.rxContext);
  41b0a2:	4a43      	ldr	r2, [pc, #268]	; (41b1b0 <.LBB11+0x12>)
  41b0a4:	6a90      	ldr	r0, [r2, #40]	; 0x28
  41b0a6:	4798      	blx	r3
        }

        usart1Obj.rxBusyStatus = false;
  41b0a8:	4b41      	ldr	r3, [pc, #260]	; (41b1b0 <.LBB11+0x12>)
  41b0aa:	2200      	movs	r2, #0
  41b0ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        usart1Obj.rxSize = 0;
  41b0b0:	61da      	str	r2, [r3, #28]
        usart1Obj.rxProcessedSize = 0;
  41b0b2:	621a      	str	r2, [r3, #32]

        /* Disable Read, Overrun, Parity and Framing error interrupts */
        USART1_REGS->US_IDR = (US_IDR_RXRDY_Msk | US_IDR_FRAME_Msk | US_IDR_PARE_Msk | US_IDR_OVRE_Msk);
  41b0b4:	22e1      	movs	r2, #225	; 0xe1
  41b0b6:	4b3d      	ldr	r3, [pc, #244]	; (41b1ac <.LBB11+0xe>)
  41b0b8:	60da      	str	r2, [r3, #12]
    }

    /* Receiver status */
    if(US_CSR_RXRDY_Msk == (USART1_REGS->US_CSR& US_CSR_RXRDY_Msk))
  41b0ba:	4b3c      	ldr	r3, [pc, #240]	; (41b1ac <.LBB11+0xe>)
  41b0bc:	695b      	ldr	r3, [r3, #20]
  41b0be:	f013 0f01 	tst.w	r3, #1
  41b0c2:	d105      	bne.n	41b0d0 <.LBB6>
    {
        USART1_ISR_RX_Handler();
    }

    /* Transmitter status */
    if(US_CSR_TXEMPTY_Msk == (USART1_REGS->US_CSR& US_CSR_TXEMPTY_Msk))
  41b0c4:	4b39      	ldr	r3, [pc, #228]	; (41b1ac <.LBB11+0xe>)
  41b0c6:	695b      	ldr	r3, [r3, #20]
  41b0c8:	f413 7f00 	tst.w	r3, #512	; 0x200
  41b0cc:	d134      	bne.n	41b138 <.LBB8>
  41b0ce:	bd70      	pop	{r4, r5, r6, pc}

0041b0d0 <.LBB6>:
    if(usart1Obj.rxBusyStatus == true)
  41b0d0:	4b37      	ldr	r3, [pc, #220]	; (41b1b0 <.LBB11+0x12>)
  41b0d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
  41b0d6:	2b00      	cmp	r3, #0
  41b0d8:	d0f4      	beq.n	41b0c4 <.LVL1+0x26>
        while((US_CSR_RXRDY_Msk == (USART1_REGS->US_CSR& US_CSR_RXRDY_Msk)) && (usart1Obj.rxSize > usart1Obj.rxProcessedSize) )
  41b0da:	4b34      	ldr	r3, [pc, #208]	; (41b1ac <.LBB11+0xe>)
  41b0dc:	695b      	ldr	r3, [r3, #20]
  41b0de:	f013 0f01 	tst.w	r3, #1
  41b0e2:	d023      	beq.n	41b12c <.LBB6+0x5c>
  41b0e4:	4a32      	ldr	r2, [pc, #200]	; (41b1b0 <.LBB11+0x12>)
  41b0e6:	6a13      	ldr	r3, [r2, #32]
  41b0e8:	69d2      	ldr	r2, [r2, #28]
  41b0ea:	429a      	cmp	r2, r3
  41b0ec:	d90e      	bls.n	41b10c <.LBB6+0x3c>
            usart1Obj.rxBuffer[usart1Obj.rxProcessedSize++] = (USART1_REGS->US_RHR& US_RHR_RXCHR_Msk);
  41b0ee:	4a30      	ldr	r2, [pc, #192]	; (41b1b0 <.LBB11+0x12>)
  41b0f0:	492e      	ldr	r1, [pc, #184]	; (41b1ac <.LBB11+0xe>)
  41b0f2:	6990      	ldr	r0, [r2, #24]
  41b0f4:	1c5c      	adds	r4, r3, #1
  41b0f6:	6214      	str	r4, [r2, #32]
  41b0f8:	698c      	ldr	r4, [r1, #24]
  41b0fa:	54c4      	strb	r4, [r0, r3]
        while((US_CSR_RXRDY_Msk == (USART1_REGS->US_CSR& US_CSR_RXRDY_Msk)) && (usart1Obj.rxSize > usart1Obj.rxProcessedSize) )
  41b0fc:	694b      	ldr	r3, [r1, #20]
  41b0fe:	f013 0f01 	tst.w	r3, #1
  41b102:	d013      	beq.n	41b12c <.LBB6+0x5c>
  41b104:	6a13      	ldr	r3, [r2, #32]
  41b106:	69d0      	ldr	r0, [r2, #28]
  41b108:	4283      	cmp	r3, r0
  41b10a:	d3f2      	bcc.n	41b0f2 <.LBB6+0x22>
            usart1Obj.rxBusyStatus = false;
  41b10c:	4b28      	ldr	r3, [pc, #160]	; (41b1b0 <.LBB11+0x12>)
  41b10e:	2200      	movs	r2, #0
  41b110:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            usart1Obj.rxSize = 0;
  41b114:	61da      	str	r2, [r3, #28]
            usart1Obj.rxProcessedSize = 0;
  41b116:	621a      	str	r2, [r3, #32]
            USART1_REGS->US_IDR = (US_IDR_RXRDY_Msk | US_IDR_FRAME_Msk | US_IDR_PARE_Msk | US_IDR_OVRE_Msk);
  41b118:	21e1      	movs	r1, #225	; 0xe1
  41b11a:	4a24      	ldr	r2, [pc, #144]	; (41b1ac <.LBB11+0xe>)
  41b11c:	60d1      	str	r1, [r2, #12]
            if(usart1Obj.rxCallback != NULL)
  41b11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  41b120:	2b00      	cmp	r3, #0
  41b122:	d0cf      	beq.n	41b0c4 <.LVL1+0x26>
                usart1Obj.rxCallback(usart1Obj.rxContext);
  41b124:	4a22      	ldr	r2, [pc, #136]	; (41b1b0 <.LBB11+0x12>)
  41b126:	6a90      	ldr	r0, [r2, #40]	; 0x28
  41b128:	4798      	blx	r3
  41b12a:	e7cb      	b.n	41b0c4 <.LVL1+0x26>
        if(usart1Obj.rxProcessedSize >= usart1Obj.rxSize)
  41b12c:	4b20      	ldr	r3, [pc, #128]	; (41b1b0 <.LBB11+0x12>)
  41b12e:	6a1a      	ldr	r2, [r3, #32]
  41b130:	69db      	ldr	r3, [r3, #28]
  41b132:	429a      	cmp	r2, r3
  41b134:	d3c6      	bcc.n	41b0c4 <.LVL1+0x26>
  41b136:	e7e9      	b.n	41b10c <.LBB6+0x3c>

0041b138 <.LBB8>:
    if(usart1Obj.txBusyStatus == true)
  41b138:	4b1d      	ldr	r3, [pc, #116]	; (41b1b0 <.LBB11+0x12>)
  41b13a:	7d1b      	ldrb	r3, [r3, #20]
  41b13c:	2b00      	cmp	r3, #0
  41b13e:	d0c6      	beq.n	41b0ce <.LVL1+0x30>
        while((US_CSR_TXEMPTY_Msk == (USART1_REGS->US_CSR& US_CSR_TXEMPTY_Msk)) && (usart1Obj.txSize > usart1Obj.txProcessedSize) )
  41b140:	4b1a      	ldr	r3, [pc, #104]	; (41b1ac <.LBB11+0xe>)
  41b142:	695b      	ldr	r3, [r3, #20]
  41b144:	f413 7f00 	tst.w	r3, #512	; 0x200
  41b148:	d029      	beq.n	41b19e <.LBB11>
  41b14a:	4b19      	ldr	r3, [pc, #100]	; (41b1b0 <.LBB11+0x12>)
  41b14c:	685d      	ldr	r5, [r3, #4]
  41b14e:	689b      	ldr	r3, [r3, #8]
  41b150:	429d      	cmp	r5, r3
  41b152:	d914      	bls.n	41b17e <.LBB8+0x46>
            USART1_REGS->US_THR|= usart1Obj.txBuffer[usart1Obj.txProcessedSize++];
  41b154:	4a16      	ldr	r2, [pc, #88]	; (41b1b0 <.LBB11+0x12>)
  41b156:	6814      	ldr	r4, [r2, #0]
  41b158:	4423      	add	r3, r4
  41b15a:	4425      	add	r5, r4
  41b15c:	4616      	mov	r6, r2
  41b15e:	f1c4 0401 	rsb	r4, r4, #1
  41b162:	4912      	ldr	r1, [pc, #72]	; (41b1ac <.LBB11+0xe>)
  41b164:	18e2      	adds	r2, r4, r3
  41b166:	60b2      	str	r2, [r6, #8]
  41b168:	f813 2b01 	ldrb.w	r2, [r3], #1
  41b16c:	69c8      	ldr	r0, [r1, #28]
  41b16e:	4302      	orrs	r2, r0
  41b170:	61ca      	str	r2, [r1, #28]
        while((US_CSR_TXEMPTY_Msk == (USART1_REGS->US_CSR& US_CSR_TXEMPTY_Msk)) && (usart1Obj.txSize > usart1Obj.txProcessedSize) )
  41b172:	694a      	ldr	r2, [r1, #20]
  41b174:	f412 7f00 	tst.w	r2, #512	; 0x200
  41b178:	d011      	beq.n	41b19e <.LBB11>
  41b17a:	429d      	cmp	r5, r3
  41b17c:	d1f2      	bne.n	41b164 <.LBB8+0x2c>
            usart1Obj.txBusyStatus = false;
  41b17e:	4b0c      	ldr	r3, [pc, #48]	; (41b1b0 <.LBB11+0x12>)
  41b180:	2200      	movs	r2, #0
  41b182:	751a      	strb	r2, [r3, #20]
            usart1Obj.txSize = 0;
  41b184:	605a      	str	r2, [r3, #4]
            usart1Obj.txProcessedSize = 0;
  41b186:	609a      	str	r2, [r3, #8]
            USART1_REGS->US_IDR = US_IDR_TXEMPTY_Msk;
  41b188:	f44f 7100 	mov.w	r1, #512	; 0x200
  41b18c:	4a07      	ldr	r2, [pc, #28]	; (41b1ac <.LBB11+0xe>)
  41b18e:	60d1      	str	r1, [r2, #12]
            if(usart1Obj.txCallback != NULL)
  41b190:	68db      	ldr	r3, [r3, #12]
  41b192:	2b00      	cmp	r3, #0
  41b194:	d09b      	beq.n	41b0ce <.LVL1+0x30>
                usart1Obj.txCallback(usart1Obj.txContext);
  41b196:	4a06      	ldr	r2, [pc, #24]	; (41b1b0 <.LBB11+0x12>)
  41b198:	6910      	ldr	r0, [r2, #16]
  41b19a:	4798      	blx	r3

0041b19c <.LBE8>:
    {
        USART1_ISR_TX_Handler();
    }

    return;
  41b19c:	e797      	b.n	41b0ce <.LVL1+0x30>

0041b19e <.LBB11>:
        if(usart1Obj.txProcessedSize >= usart1Obj.txSize)
  41b19e:	4b04      	ldr	r3, [pc, #16]	; (41b1b0 <.LBB11+0x12>)
  41b1a0:	689a      	ldr	r2, [r3, #8]
  41b1a2:	685b      	ldr	r3, [r3, #4]
  41b1a4:	429a      	cmp	r2, r3
  41b1a6:	d392      	bcc.n	41b0ce <.LVL1+0x30>
  41b1a8:	e7e9      	b.n	41b17e <.LBB8+0x46>
  41b1aa:	bf00      	nop
  41b1ac:	40028000 	.word	0x40028000
  41b1b0:	20400020 	.word	0x20400020

Disassembly of section .text.__multiply%114:

0041b1b4 <__multiply>:
  41b1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0041b1b8 <.LCFI7>:
  41b1b8:	690c      	ldr	r4, [r1, #16]
  41b1ba:	6915      	ldr	r5, [r2, #16]
  41b1bc:	42ac      	cmp	r4, r5
  41b1be:	b083      	sub	sp, #12

0041b1c0 <.LCFI8>:
  41b1c0:	468b      	mov	fp, r1
  41b1c2:	4616      	mov	r6, r2
  41b1c4:	da04      	bge.n	41b1d0 <.LVL110>
  41b1c6:	4622      	mov	r2, r4

0041b1c8 <.LVL108>:
  41b1c8:	46b3      	mov	fp, r6
  41b1ca:	462c      	mov	r4, r5
  41b1cc:	460e      	mov	r6, r1

0041b1ce <.LVL109>:
  41b1ce:	4615      	mov	r5, r2

0041b1d0 <.LVL110>:
  41b1d0:	f8db 3008 	ldr.w	r3, [fp, #8]
  41b1d4:	f8db 1004 	ldr.w	r1, [fp, #4]

0041b1d8 <.LVL111>:
  41b1d8:	eb04 0805 	add.w	r8, r4, r5

0041b1dc <.LVL112>:
  41b1dc:	4598      	cmp	r8, r3
  41b1de:	bfc8      	it	gt
  41b1e0:	3101      	addgt	r1, #1
  41b1e2:	f005 fcc3 	bl	420b6c <.LFE2>

0041b1e6 <.LVL114>:
  41b1e6:	f100 0914 	add.w	r9, r0, #20
  41b1ea:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  41b1ee:	45d1      	cmp	r9, sl
  41b1f0:	9000      	str	r0, [sp, #0]

0041b1f2 <.LVL115>:
  41b1f2:	d205      	bcs.n	41b200 <.LVL118>
  41b1f4:	464b      	mov	r3, r9
  41b1f6:	2100      	movs	r1, #0

0041b1f8 <.LVL116>:
  41b1f8:	f843 1b04 	str.w	r1, [r3], #4
  41b1fc:	459a      	cmp	sl, r3
  41b1fe:	d8fb      	bhi.n	41b1f8 <.LVL116>

0041b200 <.LVL118>:
  41b200:	f106 0c14 	add.w	ip, r6, #20
  41b204:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  41b208:	f10b 0b14 	add.w	fp, fp, #20

0041b20c <.LVL119>:
  41b20c:	459c      	cmp	ip, r3
  41b20e:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2

0041b212 <.LVL120>:
  41b212:	d24c      	bcs.n	41b2ae <.LVL144>
  41b214:	f8cd a004 	str.w	sl, [sp, #4]
  41b218:	469a      	mov	sl, r3

0041b21a <.LVL121>:
  41b21a:	f8dc 5000 	ldr.w	r5, [ip]
  41b21e:	b2af      	uxth	r7, r5

0041b220 <.LVL122>:
  41b220:	b1ef      	cbz	r7, 41b25e <.LVL130>
  41b222:	2100      	movs	r1, #0
  41b224:	464d      	mov	r5, r9
  41b226:	465e      	mov	r6, fp
  41b228:	460c      	mov	r4, r1

0041b22a <.LVL123>:
  41b22a:	f856 2b04 	ldr.w	r2, [r6], #4

0041b22e <.LVL124>:
  41b22e:	6828      	ldr	r0, [r5, #0]
  41b230:	b293      	uxth	r3, r2
  41b232:	b281      	uxth	r1, r0
  41b234:	fb07 1303 	mla	r3, r7, r3, r1
  41b238:	0c12      	lsrs	r2, r2, #16
  41b23a:	0c01      	lsrs	r1, r0, #16
  41b23c:	4423      	add	r3, r4

0041b23e <.LVL125>:
  41b23e:	fb07 1102 	mla	r1, r7, r2, r1
  41b242:	eb01 4113 	add.w	r1, r1, r3, lsr #16

0041b246 <.LVL126>:
  41b246:	b29b      	uxth	r3, r3

0041b248 <.LVL127>:
  41b248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  41b24c:	45b6      	cmp	lr, r6
  41b24e:	f845 3b04 	str.w	r3, [r5], #4

0041b252 <.LVL128>:
  41b252:	ea4f 4411 	mov.w	r4, r1, lsr #16

0041b256 <.LVL129>:
  41b256:	d8e8      	bhi.n	41b22a <.LVL123>
  41b258:	602c      	str	r4, [r5, #0]
  41b25a:	f8dc 5000 	ldr.w	r5, [ip]

0041b25e <.LVL130>:
  41b25e:	0c2d      	lsrs	r5, r5, #16

0041b260 <.LVL131>:
  41b260:	d01d      	beq.n	41b29e <.LVL141>

0041b262 <.LVL132>:
  41b262:	f8d9 3000 	ldr.w	r3, [r9]

0041b266 <.LVL133>:
  41b266:	4648      	mov	r0, r9
  41b268:	461c      	mov	r4, r3
  41b26a:	4659      	mov	r1, fp
  41b26c:	2200      	movs	r2, #0

0041b26e <.LVL134>:
  41b26e:	880e      	ldrh	r6, [r1, #0]
  41b270:	0c24      	lsrs	r4, r4, #16
  41b272:	fb05 4406 	mla	r4, r5, r6, r4
  41b276:	4422      	add	r2, r4

0041b278 <.LVL135>:
  41b278:	b29b      	uxth	r3, r3

0041b27a <.LVL136>:
  41b27a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  41b27e:	f840 3b04 	str.w	r3, [r0], #4

0041b282 <.LVL137>:
  41b282:	f851 3b04 	ldr.w	r3, [r1], #4

0041b286 <.LVL138>:
  41b286:	6804      	ldr	r4, [r0, #0]
  41b288:	0c1b      	lsrs	r3, r3, #16
  41b28a:	b2a6      	uxth	r6, r4
  41b28c:	fb05 6303 	mla	r3, r5, r3, r6
  41b290:	eb03 4312 	add.w	r3, r3, r2, lsr #16

0041b294 <.LVL139>:
  41b294:	458e      	cmp	lr, r1
  41b296:	ea4f 4213 	mov.w	r2, r3, lsr #16

0041b29a <.LVL140>:
  41b29a:	d8e8      	bhi.n	41b26e <.LVL134>
  41b29c:	6003      	str	r3, [r0, #0]

0041b29e <.LVL141>:
  41b29e:	f10c 0c04 	add.w	ip, ip, #4
  41b2a2:	45e2      	cmp	sl, ip
  41b2a4:	f109 0904 	add.w	r9, r9, #4
  41b2a8:	d8b7      	bhi.n	41b21a <.LVL121>
  41b2aa:	f8dd a004 	ldr.w	sl, [sp, #4]

0041b2ae <.LVL144>:
  41b2ae:	f1b8 0f00 	cmp.w	r8, #0
  41b2b2:	dd0b      	ble.n	41b2cc <.LVL149>
  41b2b4:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  41b2b8:	f1aa 0a04 	sub.w	sl, sl, #4
  41b2bc:	b11b      	cbz	r3, 41b2c6 <.LVL147>
  41b2be:	e005      	b.n	41b2cc <.LVL149>
  41b2c0:	f85a 3d04 	ldr.w	r3, [sl, #-4]!

0041b2c4 <.LVL146>:
  41b2c4:	b913      	cbnz	r3, 41b2cc <.LVL149>

0041b2c6 <.LVL147>:
  41b2c6:	f1b8 0801 	subs.w	r8, r8, #1

0041b2ca <.LVL148>:
  41b2ca:	d1f9      	bne.n	41b2c0 <.LVL144+0x12>

0041b2cc <.LVL149>:
  41b2cc:	9800      	ldr	r0, [sp, #0]
  41b2ce:	f8c0 8010 	str.w	r8, [r0, #16]
  41b2d2:	b003      	add	sp, #12

0041b2d4 <.LCFI9>:
  41b2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section .text.fp_mul_comba%115:

0041b2d8 <fp_mul_comba>:
{
  41b2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0041b2dc <.LCFI64>:
  41b2dc:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254

0041b2e0 <.LCFI65>:
  41b2e0:	4605      	mov	r5, r0
  41b2e2:	9007      	str	r0, [sp, #28]
  41b2e4:	460e      	mov	r6, r1
  41b2e6:	9108      	str	r1, [sp, #32]
  41b2e8:	9209      	str	r2, [sp, #36]	; 0x24

0041b2ea <.LVL421>:
   pa = A->used + B->used;
  41b2ea:	6803      	ldr	r3, [r0, #0]
  41b2ec:	680a      	ldr	r2, [r1, #0]

0041b2ee <.LVL422>:
  41b2ee:	4413      	add	r3, r2

0041b2f0 <.LVL423>:
  41b2f0:	2b87      	cmp	r3, #135	; 0x87
  41b2f2:	bfa8      	it	ge
  41b2f4:	2387      	movge	r3, #135	; 0x87

0041b2f6 <.LVL424>:
  41b2f6:	461c      	mov	r4, r3
  41b2f8:	9302      	str	r3, [sp, #8]

0041b2fa <.LBB52>:
    fp_zero(a);
  41b2fa:	a80a      	add	r0, sp, #40	; 0x28

0041b2fc <.LVL426>:
  41b2fc:	f006 ff22 	bl	422144 <.LFE163>

0041b300 <.LBE52>:
   for (ix = 0; ix < pa; ix++) {
  41b300:	2c00      	cmp	r4, #0
  41b302:	dd4b      	ble.n	41b39c <.LVL451>
      ty = MIN(ix, B->used-1);
  41b304:	4632      	mov	r2, r6
  41b306:	f852 3b08 	ldr.w	r3, [r2], #8
  41b30a:	9206      	str	r2, [sp, #24]
  41b30c:	3b01      	subs	r3, #1
  41b30e:	9303      	str	r3, [sp, #12]
      iy = MIN(A->used-tx, ty+1);
  41b310:	462b      	mov	r3, r5
  41b312:	f853 2b08 	ldr.w	r2, [r3], #8
  41b316:	9204      	str	r2, [sp, #16]
  41b318:	9305      	str	r3, [sp, #20]
  41b31a:	ab0b      	add	r3, sp, #44	; 0x2c
  41b31c:	9301      	str	r3, [sp, #4]
  41b31e:	2500      	movs	r5, #0

0041b320 <.LVL428>:
  41b320:	46ac      	mov	ip, r5
  41b322:	46ae      	mov	lr, r5
  41b324:	e00b      	b.n	41b33e <.LVL433>

0041b326 <.LVL429>:
      for (iz = 0; iz < iy; ++iz) {
  41b326:	4663      	mov	r3, ip
  41b328:	46ac      	mov	ip, r5

0041b32a <.LVL430>:
      COMBA_FORWARD;
  41b32a:	2500      	movs	r5, #0

0041b32c <.LVL431>:
      COMBA_STORE(dst->dp[ix]);
  41b32c:	9a01      	ldr	r2, [sp, #4]
  41b32e:	f842 3f04 	str.w	r3, [r2, #4]!
  41b332:	9201      	str	r2, [sp, #4]
   for (ix = 0; ix < pa; ix++) {
  41b334:	f10e 0e01 	add.w	lr, lr, #1

0041b338 <.LVL432>:
  41b338:	9b02      	ldr	r3, [sp, #8]
  41b33a:	4573      	cmp	r3, lr
  41b33c:	d02e      	beq.n	41b39c <.LVL451>

0041b33e <.LVL433>:
      ty = MIN(ix, B->used-1);
  41b33e:	9b03      	ldr	r3, [sp, #12]
  41b340:	4573      	cmp	r3, lr
  41b342:	bfa8      	it	ge
  41b344:	4673      	movge	r3, lr
  41b346:	461f      	mov	r7, r3

0041b348 <.LVL434>:
      tx = ix - ty;
  41b348:	ebae 0303 	sub.w	r3, lr, r3

0041b34c <.LVL435>:
      tmpx = A->dp + tx;
  41b34c:	9a05      	ldr	r2, [sp, #20]
  41b34e:	eb02 0483 	add.w	r4, r2, r3, lsl #2

0041b352 <.LVL436>:
      tmpy = B->dp + ty;
  41b352:	9a06      	ldr	r2, [sp, #24]
  41b354:	eb02 0687 	add.w	r6, r2, r7, lsl #2

0041b358 <.LVL437>:
      iy = MIN(A->used-tx, ty+1);
  41b358:	3701      	adds	r7, #1

0041b35a <.LVL438>:
  41b35a:	9a04      	ldr	r2, [sp, #16]
  41b35c:	1ad3      	subs	r3, r2, r3

0041b35e <.LVL439>:
  41b35e:	429f      	cmp	r7, r3
  41b360:	bfa8      	it	ge
  41b362:	461f      	movge	r7, r3

0041b364 <.LVL440>:
      for (iz = 0; iz < iy; ++iz) {
  41b364:	2f00      	cmp	r7, #0
  41b366:	ddde      	ble.n	41b326 <.LVL429>
  41b368:	2200      	movs	r2, #0
  41b36a:	4613      	mov	r3, r2

0041b36c <.LBB54>:
          MULADD(_tmpx, _tmpy);
  41b36c:	f854 bb04 	ldr.w	fp, [r4], #4

0041b370 <.LVL442>:
  41b370:	f856 a904 	ldr.w	sl, [r6], #-4

0041b374 <.LVL443>:
  41b374:	4660      	mov	r0, ip
  41b376:	2100      	movs	r1, #0
  41b378:	fbea 010b 	umlal	r0, r1, sl, fp

0041b37c <.LVL444>:
  41b37c:	4684      	mov	ip, r0

0041b37e <.LVL445>:
  41b37e:	f04f 0900 	mov.w	r9, #0
  41b382:	eb11 0a05 	adds.w	sl, r1, r5
  41b386:	f149 0b00 	adc.w	fp, r9, #0

0041b38a <.LVL446>:
  41b38a:	4655      	mov	r5, sl
  41b38c:	445a      	add	r2, fp

0041b38e <.LBE54>:
      for (iz = 0; iz < iy; ++iz) {
  41b38e:	3301      	adds	r3, #1

0041b390 <.LVL449>:
  41b390:	429f      	cmp	r7, r3
  41b392:	d1eb      	bne.n	41b36c <.LBB54>

0041b394 <.LBB57>:
          MULADD(_tmpx, _tmpy);
  41b394:	4603      	mov	r3, r0

0041b396 <.LVL450>:
  41b396:	46d4      	mov	ip, sl
  41b398:	4615      	mov	r5, r2

0041b39a <.LBE57>:
  41b39a:	e7c7      	b.n	41b32c <.LVL431>

0041b39c <.LVL451>:
  dst->used = pa;
  41b39c:	9902      	ldr	r1, [sp, #8]
  41b39e:	910a      	str	r1, [sp, #40]	; 0x28
  dst->sign = A->sign ^ B->sign;
  41b3a0:	9b07      	ldr	r3, [sp, #28]
  41b3a2:	685c      	ldr	r4, [r3, #4]
  41b3a4:	9b08      	ldr	r3, [sp, #32]
  41b3a6:	685b      	ldr	r3, [r3, #4]
  41b3a8:	405c      	eors	r4, r3
  41b3aa:	940b      	str	r4, [sp, #44]	; 0x2c
  fp_clamp(dst);
  41b3ac:	460b      	mov	r3, r1
  41b3ae:	b1f1      	cbz	r1, 41b3ee <.LCFI67+0x4>
  41b3b0:	1e4a      	subs	r2, r1, #1
  41b3b2:	3301      	adds	r3, #1
  41b3b4:	a80a      	add	r0, sp, #40	; 0x28

0041b3b6 <.LVL452>:
  41b3b6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  41b3ba:	b96b      	cbnz	r3, 41b3d8 <.LVL453+0x1a>
  41b3bc:	a894      	add	r0, sp, #592	; 0x250

0041b3be <.LVL453>:
  41b3be:	eb00 0381 	add.w	r3, r0, r1, lsl #2
  41b3c2:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
  41b3c6:	e000      	b.n	41b3ca <.LVL453+0xc>
  41b3c8:	4602      	mov	r2, r0
  41b3ca:	b172      	cbz	r2, 41b3ea <.LCFI67>
  41b3cc:	1e50      	subs	r0, r2, #1
  41b3ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  41b3d2:	2900      	cmp	r1, #0
  41b3d4:	d0f8      	beq.n	41b3c8 <.LVL453+0xa>
  41b3d6:	920a      	str	r2, [sp, #40]	; 0x28
  41b3d8:	940b      	str	r4, [sp, #44]	; 0x2c
  fp_copy(dst, C);
  41b3da:	9909      	ldr	r1, [sp, #36]	; 0x24
  41b3dc:	a80a      	add	r0, sp, #40	; 0x28

0041b3de <.LVL454>:
  41b3de:	f006 fbe5 	bl	421bac <.LFE31>

0041b3e2 <.LVL455>:
}
  41b3e2:	f50d 7d15 	add.w	sp, sp, #596	; 0x254

0041b3e6 <.LCFI66>:
  41b3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0041b3ea <.LCFI67>:
  41b3ea:	2300      	movs	r3, #0
  41b3ec:	930a      	str	r3, [sp, #40]	; 0x28
  fp_clamp(dst);
  41b3ee:	2400      	movs	r4, #0
  41b3f0:	e7f2      	b.n	41b3d8 <.LVL453+0x1a>

Disassembly of section .text.Reset_Handler%116:

0041b3f4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void __attribute__((optimize("-O1"), section(".text.Reset_Handler"), long_call)) Reset_Handler(void)
{
  41b3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041b3f6 <.LCFI0>:
    uint32_t *pSrc;

    /* Call the optional application-provided _on_reset() function. */
    if (_on_reset)
  41b3f6:	4b3e      	ldr	r3, [pc, #248]	; (41b4f0 <.LVL15+0x2>)
  41b3f8:	b103      	cbz	r3, 41b3fc <.LVL0>
    {
        _on_reset();
  41b3fa:	4798      	blx	r3

0041b3fc <.LVL0>:
    }

    /* Reserved for use by MPLAB XC32. */
    if (__xc32_on_reset)
  41b3fc:	4b3d      	ldr	r3, [pc, #244]	; (41b4f4 <.LVL15+0x6>)
  41b3fe:	b103      	cbz	r3, 41b402 <.LBB143>
        __xc32_on_reset();
  41b400:	4798      	blx	r3

0041b402 <.LBB143>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  41b402:	f3ef 8110 	mrs	r1, PRIMASK

0041b406 <.LBB147>:
  __ASM volatile ("cpsid i" : : : "memory");
  41b406:	b672      	cpsid	i

0041b408 <.LBE147>:
     SCB->CPACR |= (0xFu << 20);
  41b408:	4a3b      	ldr	r2, [pc, #236]	; (41b4f8 <.LVL15+0xa>)
  41b40a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  41b40e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  41b412:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

0041b416 <.LBB149>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  41b416:	f3bf 8f4f 	dsb	sy

0041b41a <.LBB151>:
  __ASM volatile ("isb 0xF":::"memory");
  41b41a:	f3bf 8f6f 	isb	sy

0041b41e <.LBE151>:
    if (!prim)
  41b41e:	b901      	cbnz	r1, 41b422 <.LBB155>

0041b420 <.LBB153>:
  __ASM volatile ("cpsie i" : : : "memory");
  41b420:	b662      	cpsie	i

0041b422 <.LBB155>:
  __ASM volatile ("dsb 0xF":::"memory");
  41b422:	f3bf 8f4f 	dsb	sy

0041b426 <.LBB159>:
  __ASM volatile ("isb 0xF":::"memory");
  41b426:	f3bf 8f6f 	isb	sy

0041b42a <.LBE159>:
    SCB->ITCMCR &= ~(uint32_t)SCB_ITCMCR_EN_Msk;
  41b42a:	4c33      	ldr	r4, [pc, #204]	; (41b4f8 <.LVL15+0xa>)
  41b42c:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  41b430:	f023 0301 	bic.w	r3, r3, #1
  41b434:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
    SCB->DTCMCR &= ~(uint32_t)SCB_ITCMCR_EN_Msk;
  41b438:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
  41b43c:	f023 0301 	bic.w	r3, r3, #1
  41b440:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

0041b444 <.LBB161>:
  __ASM volatile ("dsb 0xF":::"memory");
  41b444:	f3bf 8f4f 	dsb	sy

0041b448 <.LBB163>:
  __ASM volatile ("isb 0xF":::"memory");
  41b448:	f3bf 8f6f 	isb	sy

0041b44c <.LBE155>:
    /* Disable TCM  */
    TCM_Disable();

    /* Initialize data after TCM is enabled.
     * Data initialization from the XC32 .dinit template */
    __pic32c_data_initialization();
  41b44c:	f003 f996 	bl	41e77c <.LFE163>

0041b450 <.LVL2>:
	

#  ifdef SCB_VTOR_TBLOFF_Msk
    /*  Set the vector-table base address in FLASH */
    pSrc = (uint32_t *) & __svectors;
    SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  41b450:	4b2a      	ldr	r3, [pc, #168]	; (41b4fc <.LVL15+0xe>)
  41b452:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  41b456:	60a3      	str	r3, [r4, #8]
#  endif /* SCB_VTOR_TBLOFF_Msk */

    /* Initialize the C library */
    __libc_init_array();
  41b458:	4b29      	ldr	r3, [pc, #164]	; (41b500 <.LVL15+0x12>)
  41b45a:	4798      	blx	r3

0041b45c <.LBB165>:
  __ASM volatile ("dsb 0xF":::"memory");
  41b45c:	f3bf 8f4f 	dsb	sy

0041b460 <.LBB170>:
  __ASM volatile ("isb 0xF":::"memory");
  41b460:	f3bf 8f6f 	isb	sy

0041b464 <.LBE170>:
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  41b464:	2200      	movs	r2, #0
  41b466:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250

0041b46a <.LBB172>:
  __ASM volatile ("dsb 0xF":::"memory");
  41b46a:	f3bf 8f4f 	dsb	sy

0041b46e <.LBB174>:
  __ASM volatile ("isb 0xF":::"memory");
  41b46e:	f3bf 8f6f 	isb	sy

0041b472 <.LBE174>:
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  41b472:	6963      	ldr	r3, [r4, #20]
  41b474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  41b478:	6163      	str	r3, [r4, #20]

0041b47a <.LBB176>:
  __ASM volatile ("dsb 0xF":::"memory");
  41b47a:	f3bf 8f4f 	dsb	sy

0041b47e <.LBB178>:
  __ASM volatile ("isb 0xF":::"memory");
  41b47e:	f3bf 8f6f 	isb	sy

0041b482 <.LBB180>:
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  41b482:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84

0041b486 <.LBB183>:
  __ASM volatile ("dsb 0xF":::"memory");
  41b486:	f3bf 8f4f 	dsb	sy

0041b48a <.LBE183>:
    __DSB();

    ccsidr = SCB->CCSIDR;
  41b48a:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80

0041b48e <.LVL4>:

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  41b48e:	f3c5 364e 	ubfx	r6, r5, #13, #15

0041b492 <.LVL5>:
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  41b492:	f3c5 05c9 	ubfx	r5, r5, #3, #10

0041b496 <.LVL6>:
  41b496:	0177      	lsls	r7, r6, #5
  41b498:	ea4f 7c85 	mov.w	ip, r5, lsl #30
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  41b49c:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  41b4a0:	4620      	mov	r0, r4
  41b4a2:	ea07 040e 	and.w	r4, r7, lr
  41b4a6:	4662      	mov	r2, ip
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  41b4a8:	462b      	mov	r3, r5

0041b4aa <.LVL8>:
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  41b4aa:	ea42 0104 	orr.w	r1, r2, r4
  41b4ae:	f8c0 1260 	str.w	r1, [r0, #608]	; 0x260
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
  41b4b2:	3b01      	subs	r3, #1
  41b4b4:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
  41b4b8:	f1b3 3fff 	cmp.w	r3, #4294967295
  41b4bc:	d1f5      	bne.n	41b4aa <.LVL8>
    } while(sets-- != 0U);
  41b4be:	3e01      	subs	r6, #1
  41b4c0:	3f20      	subs	r7, #32
  41b4c2:	f1b6 3fff 	cmp.w	r6, #4294967295
  41b4c6:	d1ec      	bne.n	41b4a2 <.LVL6+0xc>

0041b4c8 <.LBB185>:
  41b4c8:	f3bf 8f4f 	dsb	sy

0041b4cc <.LBE185>:
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  41b4cc:	4a0a      	ldr	r2, [pc, #40]	; (41b4f8 <.LVL15+0xa>)
  41b4ce:	6953      	ldr	r3, [r2, #20]

0041b4d0 <.LVL11>:
  41b4d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  41b4d4:	6153      	str	r3, [r2, #20]

0041b4d6 <.LBB187>:
  41b4d6:	f3bf 8f4f 	dsb	sy

0041b4da <.LBB189>:
  __ASM volatile ("isb 0xF":::"memory");
  41b4da:	f3bf 8f6f 	isb	sy

0041b4de <.LBE180>:

    /* Enable Data Cache    */
    DCache_Enable();

    /* Call the optional application-provided _on_bootstrap() function. */
    if (_on_bootstrap)
  41b4de:	4b09      	ldr	r3, [pc, #36]	; (41b504 <.LVL15+0x16>)
  41b4e0:	b103      	cbz	r3, 41b4e4 <.LVL13>
    {
        _on_bootstrap();
  41b4e2:	4798      	blx	r3

0041b4e4 <.LVL13>:
    }

    /* Reserved for use by MPLAB XC32. */
    if (__xc32_on_bootstrap)
  41b4e4:	4b08      	ldr	r3, [pc, #32]	; (41b508 <.LVL15+0x1a>)
  41b4e6:	b103      	cbz	r3, 41b4ea <.LVL14>
    {
        __xc32_on_bootstrap();
  41b4e8:	4798      	blx	r3

0041b4ea <.LVL14>:
    }

    /* Branch to application's main function */
    main();
  41b4ea:	f006 ff27 	bl	42233c <main>

0041b4ee <.LVL15>:
  41b4ee:	e7fe      	b.n	41b4ee <.LVL15>
	...
  41b4f8:	e000ed00 	.word	0xe000ed00
  41b4fc:	00400000 	.word	0x00400000
  41b500:	00420955 	.word	0x00420955
	...

Disassembly of section .text.DesProcessBlock%117:

0041b50c <DesProcessBlock>:
    {
  41b50c:	b530      	push	{r4, r5, lr}

0041b50e <.LCFI8>:
  41b50e:	b083      	sub	sp, #12

0041b510 <.LCFI9>:
  41b510:	4614      	mov	r4, r2
        XMEMCPY(&l, in, sizeof(l));
  41b512:	680b      	ldr	r3, [r1, #0]
        XMEMCPY(&r, in + sizeof(l), sizeof(r));
  41b514:	6849      	ldr	r1, [r1, #4]

0041b516 <.LBB202>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  41b516:	0a1a      	lsrs	r2, r3, #8

0041b518 <.LVL120>:
  41b518:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
  41b51c:	021b      	lsls	r3, r3, #8

0041b51e <.LVL121>:
  41b51e:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  41b522:	431a      	orrs	r2, r3

0041b524 <.LBB204>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  41b524:	ea4f 4232 	mov.w	r2, r2, ror #16

0041b528 <.LBB206>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  41b528:	0a0b      	lsrs	r3, r1, #8
  41b52a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  41b52e:	0209      	lsls	r1, r1, #8

0041b530 <.LVL124>:
  41b530:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  41b534:	430b      	orrs	r3, r1

0041b536 <.LBB208>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  41b536:	ea4f 3333 	mov.w	r3, r3, ror #12

0041b53a <.LBE210>:
        work = (*left ^ *right) & 0xf0f0f0f0;
  41b53a:	ea82 0103 	eor.w	r1, r2, r3
  41b53e:	f001 31f0 	and.w	r1, r1, #4042322160	; 0xf0f0f0f0

0041b542 <.LVL126>:
        *left ^= work;
  41b542:	404a      	eors	r2, r1

0041b544 <.LVL127>:
        *right = rotrFixed(*right^work, 20U);
  41b544:	404b      	eors	r3, r1

0041b546 <.LBB212>:
        return (x >> y) | (x << (sizeof(y) * 8 - y));
  41b546:	ea4f 5333 	mov.w	r3, r3, ror #20

0041b54a <.LBE212>:
        work = (*left ^ *right) & 0xffff0000;
  41b54a:	ea82 0103 	eor.w	r1, r2, r3

0041b54e <.LVL130>:
  41b54e:	4d34      	ldr	r5, [pc, #208]	; (41b620 <.LVL178+0x2>)
  41b550:	4029      	ands	r1, r5

0041b552 <.LVL131>:
        *left ^= work;
  41b552:	404a      	eors	r2, r1

0041b554 <.LVL132>:
        *right = rotrFixed(*right^work, 18U);
  41b554:	404b      	eors	r3, r1

0041b556 <.LBB214>:
  41b556:	ea4f 43b3 	mov.w	r3, r3, ror #18

0041b55a <.LBE214>:
        work = (*left ^ *right) & 0x33333333;
  41b55a:	ea82 0103 	eor.w	r1, r2, r3

0041b55e <.LVL135>:
  41b55e:	f001 3133 	and.w	r1, r1, #858993459	; 0x33333333

0041b562 <.LVL136>:
        *left ^= work;
  41b562:	404a      	eors	r2, r1

0041b564 <.LVL137>:
        *right = rotrFixed(*right^work, 6U);
  41b564:	404b      	eors	r3, r1

0041b566 <.LBB216>:
  41b566:	ea4f 13b3 	mov.w	r3, r3, ror #6

0041b56a <.LBE216>:
        work = (*left ^ *right) & 0x00ff00ff;
  41b56a:	ea82 0103 	eor.w	r1, r2, r3

0041b56e <.LVL140>:
  41b56e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff

0041b572 <.LVL141>:
        *left ^= work;
  41b572:	404a      	eors	r2, r1

0041b574 <.LVL142>:
        *right = rotlFixed(*right^work, 9U);
  41b574:	404b      	eors	r3, r1

0041b576 <.LBB218>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  41b576:	ea4f 53f3 	mov.w	r3, r3, ror #23

0041b57a <.LBE218>:
        work = (*left ^ *right) & 0xaaaaaaaa;
  41b57a:	ea82 0103 	eor.w	r1, r2, r3

0041b57e <.LVL145>:
  41b57e:	f001 31aa 	and.w	r1, r1, #2863311530	; 0xaaaaaaaa

0041b582 <.LVL146>:
        *left = rotlFixed(*left^work, 1U);
  41b582:	404a      	eors	r2, r1

0041b584 <.LBB220>:
  41b584:	ea4f 72f2 	mov.w	r2, r2, ror #31

0041b588 <.LBE220>:
  41b588:	9201      	str	r2, [sp, #4]
        *right ^= work;
  41b58a:	404b      	eors	r3, r1
  41b58c:	a902      	add	r1, sp, #8

0041b58e <.LVL147>:
  41b58e:	f841 3d08 	str.w	r3, [r1, #-8]!

0041b592 <.LBE208>:
        DesRawProcessBlock(&l, &r, des->key);
  41b592:	f100 0210 	add.w	r2, r0, #16
  41b596:	a801      	add	r0, sp, #4

0041b598 <.LVL149>:
  41b598:	f7ff fa8e 	bl	41aab8 <L0>

0041b59c <.LBB222>:
        return (x >> y) | (x << (sizeof(y) * 8 - y));
  41b59c:	9a00      	ldr	r2, [sp, #0]
  41b59e:	ea4f 0272 	mov.w	r2, r2, ror #1

0041b5a2 <.LBE224>:
        work = (*left ^ *right) & 0xaaaaaaaa;
  41b5a2:	9b01      	ldr	r3, [sp, #4]
  41b5a4:	ea82 0103 	eor.w	r1, r2, r3
  41b5a8:	f001 31aa 	and.w	r1, r1, #2863311530	; 0xaaaaaaaa

0041b5ac <.LVL152>:
        *right ^= work;
  41b5ac:	404a      	eors	r2, r1

0041b5ae <.LVL153>:
        *left = rotrFixed(*left^work, 9U);
  41b5ae:	404b      	eors	r3, r1

0041b5b0 <.LBB226>:
  41b5b0:	ea4f 2373 	mov.w	r3, r3, ror #9

0041b5b4 <.LBE226>:
        work = (*left ^ *right) & 0x00ff00ff;
  41b5b4:	ea82 0103 	eor.w	r1, r2, r3

0041b5b8 <.LVL156>:
  41b5b8:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff

0041b5bc <.LVL157>:
        *right ^= work;
  41b5bc:	404a      	eors	r2, r1

0041b5be <.LVL158>:
        *left = rotlFixed(*left^work, 6U);
  41b5be:	404b      	eors	r3, r1

0041b5c0 <.LBB228>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  41b5c0:	ea4f 63b3 	mov.w	r3, r3, ror #26

0041b5c4 <.LBE228>:
        work = (*left ^ *right) & 0x33333333;
  41b5c4:	ea82 0103 	eor.w	r1, r2, r3

0041b5c8 <.LVL161>:
  41b5c8:	f001 3133 	and.w	r1, r1, #858993459	; 0x33333333

0041b5cc <.LVL162>:
        *right ^= work;
  41b5cc:	404a      	eors	r2, r1

0041b5ce <.LVL163>:
        *left = rotlFixed(*left^work, 18U);
  41b5ce:	404b      	eors	r3, r1

0041b5d0 <.LBB230>:
  41b5d0:	ea4f 33b3 	mov.w	r3, r3, ror #14

0041b5d4 <.LBE230>:
        work = (*left ^ *right) & 0xffff0000;
  41b5d4:	ea82 0103 	eor.w	r1, r2, r3

0041b5d8 <.LVL166>:
  41b5d8:	400d      	ands	r5, r1

0041b5da <.LVL167>:
        *right ^= work;
  41b5da:	406a      	eors	r2, r5

0041b5dc <.LVL168>:
        *left = rotlFixed(*left^work, 20U);
  41b5dc:	406b      	eors	r3, r5

0041b5de <.LBB232>:
  41b5de:	ea4f 3333 	mov.w	r3, r3, ror #12

0041b5e2 <.LBE232>:
        work = (*left ^ *right) & 0xf0f0f0f0;
  41b5e2:	ea82 0103 	eor.w	r1, r2, r3
  41b5e6:	f001 31f0 	and.w	r1, r1, #4042322160	; 0xf0f0f0f0

0041b5ea <.LVL171>:
        *right ^= work;
  41b5ea:	404a      	eors	r2, r1

0041b5ec <.LVL172>:
        *left = rotrFixed(*left^work, 4U);
  41b5ec:	404b      	eors	r3, r1

0041b5ee <.LBB234>:
        return (x >> y) | (x << (sizeof(y) * 8 - y));
  41b5ee:	ea4f 1333 	mov.w	r3, r3, ror #4

0041b5f2 <.LBB236>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  41b5f2:	0211      	lsls	r1, r2, #8
  41b5f4:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  41b5f8:	0a12      	lsrs	r2, r2, #8

0041b5fa <.LVL175>:
  41b5fa:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
  41b5fe:	430a      	orrs	r2, r1

0041b600 <.LBB238>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  41b600:	ea4f 4232 	mov.w	r2, r2, ror #16

0041b604 <.LBE236>:
        XMEMCPY(out, &r, sizeof(r));
  41b604:	6022      	str	r2, [r4, #0]

0041b606 <.LBB240>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  41b606:	0a1a      	lsrs	r2, r3, #8
  41b608:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
  41b60c:	021b      	lsls	r3, r3, #8

0041b60e <.LVL176>:
  41b60e:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  41b612:	4313      	orrs	r3, r2

0041b614 <.LBB242>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  41b614:	ea4f 4333 	mov.w	r3, r3, ror #16

0041b618 <.LBE240>:
        XMEMCPY(out + sizeof(r), &l, sizeof(l));
  41b618:	6063      	str	r3, [r4, #4]
    }
  41b61a:	b003      	add	sp, #12

0041b61c <.LCFI10>:
  41b61c:	bd30      	pop	{r4, r5, pc}

0041b61e <.LVL178>:
  41b61e:	bf00      	nop
  41b620:	ffff0000 	.word	0xffff0000

Disassembly of section .text.__mdiff%118:

0041b624 <__mdiff>:
  41b624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0041b628 <.LBB30>:
  41b628:	690f      	ldr	r7, [r1, #16]

0041b62a <.LBE30>:
  41b62a:	460e      	mov	r6, r1

0041b62c <.LBB35>:
  41b62c:	6911      	ldr	r1, [r2, #16]

0041b62e <.LVL227>:
  41b62e:	1a7f      	subs	r7, r7, r1

0041b630 <.LVL228>:
  41b630:	2f00      	cmp	r7, #0

0041b632 <.LBE35>:
  41b632:	4690      	mov	r8, r2

0041b634 <.LBB36>:
  41b634:	d117      	bne.n	41b666 <.LVL243>
  41b636:	0089      	lsls	r1, r1, #2
  41b638:	f106 0514 	add.w	r5, r6, #20
  41b63c:	f102 0e14 	add.w	lr, r2, #20
  41b640:	186b      	adds	r3, r5, r1
  41b642:	4471      	add	r1, lr
  41b644:	e001      	b.n	41b64a <.LVL233+0x4>

0041b646 <.LVL233>:
  41b646:	429d      	cmp	r5, r3
  41b648:	d25c      	bcs.n	41b704 <.LVL274>
  41b64a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  41b64e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  41b652:	42a2      	cmp	r2, r4
  41b654:	d0f7      	beq.n	41b646 <.LVL233>
  41b656:	d25e      	bcs.n	41b716 <.LBB37>
  41b658:	4633      	mov	r3, r6
  41b65a:	462c      	mov	r4, r5

0041b65c <.LVL238>:
  41b65c:	4646      	mov	r6, r8

0041b65e <.LVL239>:
  41b65e:	4675      	mov	r5, lr
  41b660:	4698      	mov	r8, r3

0041b662 <.LBE36>:
  41b662:	2701      	movs	r7, #1
  41b664:	e005      	b.n	41b672 <.LVL245>

0041b666 <.LVL243>:
  41b666:	db58      	blt.n	41b71a <.LBE37>

0041b668 <.LVL244>:
  41b668:	f106 0514 	add.w	r5, r6, #20
  41b66c:	f108 0414 	add.w	r4, r8, #20
  41b670:	2700      	movs	r7, #0

0041b672 <.LVL245>:
  41b672:	6871      	ldr	r1, [r6, #4]
  41b674:	f005 fa7a 	bl	420b6c <.LFE2>

0041b678 <.LVL246>:
  41b678:	f8d8 3010 	ldr.w	r3, [r8, #16]
  41b67c:	6936      	ldr	r6, [r6, #16]

0041b67e <.LVL247>:
  41b67e:	60c7      	str	r7, [r0, #12]
  41b680:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  41b684:	46a6      	mov	lr, r4
  41b686:	eb05 0786 	add.w	r7, r5, r6, lsl #2

0041b68a <.LVL248>:
  41b68a:	f100 0414 	add.w	r4, r0, #20

0041b68e <.LVL249>:
  41b68e:	2300      	movs	r3, #0

0041b690 <.LVL250>:
  41b690:	f85e 1b04 	ldr.w	r1, [lr], #4
  41b694:	f855 8b04 	ldr.w	r8, [r5], #4

0041b698 <.LVL251>:
  41b698:	b28a      	uxth	r2, r1
  41b69a:	fa13 f388 	uxtah	r3, r3, r8

0041b69e <.LVL252>:
  41b69e:	0c09      	lsrs	r1, r1, #16
  41b6a0:	1a9a      	subs	r2, r3, r2

0041b6a2 <.LVL253>:
  41b6a2:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  41b6a6:	eb03 4322 	add.w	r3, r3, r2, asr #16

0041b6aa <.LVL254>:
  41b6aa:	b292      	uxth	r2, r2

0041b6ac <.LVL255>:
  41b6ac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  41b6b0:	45f4      	cmp	ip, lr
  41b6b2:	f844 2b04 	str.w	r2, [r4], #4

0041b6b6 <.LVL256>:
  41b6b6:	ea4f 4323 	mov.w	r3, r3, asr #16

0041b6ba <.LVL257>:
  41b6ba:	d8e9      	bhi.n	41b690 <.LVL250>

0041b6bc <.LVL258>:
  41b6bc:	42af      	cmp	r7, r5
  41b6be:	d917      	bls.n	41b6f0 <.LVL269>
  41b6c0:	46a4      	mov	ip, r4

0041b6c2 <.LVL259>:
  41b6c2:	46ae      	mov	lr, r5

0041b6c4 <.LVL260>:
  41b6c4:	f85e 2b04 	ldr.w	r2, [lr], #4

0041b6c8 <.LVL261>:
  41b6c8:	fa13 f382 	uxtah	r3, r3, r2

0041b6cc <.LVL262>:
  41b6cc:	1419      	asrs	r1, r3, #16

0041b6ce <.LVL263>:
  41b6ce:	eb01 4112 	add.w	r1, r1, r2, lsr #16

0041b6d2 <.LVL264>:
  41b6d2:	b29b      	uxth	r3, r3

0041b6d4 <.LVL265>:
  41b6d4:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  41b6d8:	4577      	cmp	r7, lr
  41b6da:	f84c 2b04 	str.w	r2, [ip], #4

0041b6de <.LVL266>:
  41b6de:	ea4f 4321 	mov.w	r3, r1, asr #16

0041b6e2 <.LVL267>:
  41b6e2:	d8ef      	bhi.n	41b6c4 <.LVL260>
  41b6e4:	43ed      	mvns	r5, r5
  41b6e6:	442f      	add	r7, r5

0041b6e8 <.LVL268>:
  41b6e8:	f027 0703 	bic.w	r7, r7, #3
  41b6ec:	3704      	adds	r7, #4
  41b6ee:	443c      	add	r4, r7

0041b6f0 <.LVL269>:
  41b6f0:	3c04      	subs	r4, #4
  41b6f2:	b922      	cbnz	r2, 41b6fe <.LVL273+0x4>

0041b6f4 <.LVL271>:
  41b6f4:	f854 3d04 	ldr.w	r3, [r4, #-4]!

0041b6f8 <.LVL272>:
  41b6f8:	3e01      	subs	r6, #1

0041b6fa <.LVL273>:
  41b6fa:	2b00      	cmp	r3, #0
  41b6fc:	d0fa      	beq.n	41b6f4 <.LVL271>
  41b6fe:	6106      	str	r6, [r0, #16]
  41b700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041b704 <.LVL274>:
  41b704:	2100      	movs	r1, #0
  41b706:	f005 fa31 	bl	420b6c <.LFE2>

0041b70a <.LVL275>:
  41b70a:	2201      	movs	r2, #1
  41b70c:	2300      	movs	r3, #0
  41b70e:	6102      	str	r2, [r0, #16]
  41b710:	6143      	str	r3, [r0, #20]
  41b712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041b716 <.LBB37>:
  41b716:	4674      	mov	r4, lr
  41b718:	e7ab      	b.n	41b672 <.LVL245>

0041b71a <.LBE37>:
  41b71a:	4633      	mov	r3, r6
  41b71c:	f106 0414 	add.w	r4, r6, #20
  41b720:	f102 0514 	add.w	r5, r2, #20
  41b724:	4616      	mov	r6, r2

0041b726 <.LVL278>:
  41b726:	2701      	movs	r7, #1
  41b728:	4698      	mov	r8, r3
  41b72a:	e7a2      	b.n	41b672 <.LVL245>

Disassembly of section .text.wc_RsaPrivateKeyDecode%119:

0041b72c <wc_RsaPrivateKeyDecode>:
int wc_RsaPrivateKeyDecode(const byte* input, word32* inOutIdx, RsaKey* key,
                        word32 inSz)
{
    int version, length;

    if (inOutIdx == NULL) {
  41b72c:	2900      	cmp	r1, #0
  41b72e:	d062      	beq.n	41b7f6 <.LCFI60>
{
  41b730:	b5f0      	push	{r4, r5, r6, r7, lr}

0041b732 <.LCFI57>:
  41b732:	b083      	sub	sp, #12

0041b734 <.LCFI58>:
  41b734:	460d      	mov	r5, r1
  41b736:	461e      	mov	r6, r3
  41b738:	4617      	mov	r7, r2
  41b73a:	4604      	mov	r4, r0
        return BAD_FUNC_ARG;
    }
    if (GetSequence(input, inOutIdx, &length, inSz) < 0)
  41b73c:	466a      	mov	r2, sp

0041b73e <.LVL327>:
  41b73e:	f006 fcd5 	bl	4220ec <.LFE164>

0041b742 <.LVL328>:
  41b742:	2800      	cmp	r0, #0
  41b744:	db5a      	blt.n	41b7fc <.LCFI61>
        return ASN_PARSE_E;

    if (GetMyVersion(input, inOutIdx, &version, inSz) < 0)
  41b746:	4633      	mov	r3, r6
  41b748:	aa01      	add	r2, sp, #4
  41b74a:	4629      	mov	r1, r5
  41b74c:	4620      	mov	r0, r4
  41b74e:	f005 fe09 	bl	421364 <.LFE174>

0041b752 <.LVL329>:
  41b752:	2800      	cmp	r0, #0
  41b754:	db55      	blt.n	41b802 <.LCFI61+0x6>
        return ASN_PARSE_E;

    key->type = RSA_PRIVATE;
  41b756:	2201      	movs	r2, #1
  41b758:	f241 1348 	movw	r3, #4424	; 0x1148
  41b75c:	50fa      	str	r2, [r7, r3]

    if (GetInt(&key->n,  input, inOutIdx, inSz) < 0 ||
  41b75e:	4633      	mov	r3, r6
  41b760:	462a      	mov	r2, r5
  41b762:	4621      	mov	r1, r4
  41b764:	4638      	mov	r0, r7
  41b766:	f004 fff9 	bl	42075c <.LFE0>

0041b76a <.LVL330>:
  41b76a:	2800      	cmp	r0, #0
  41b76c:	db4c      	blt.n	41b808 <.LCFI61+0xc>
        GetInt(&key->e,  input, inOutIdx, inSz) < 0 ||
  41b76e:	4633      	mov	r3, r6
  41b770:	462a      	mov	r2, r5
  41b772:	4621      	mov	r1, r4
  41b774:	f507 700a 	add.w	r0, r7, #552	; 0x228
  41b778:	f004 fff0 	bl	42075c <.LFE0>

0041b77c <.LVL331>:
    if (GetInt(&key->n,  input, inOutIdx, inSz) < 0 ||
  41b77c:	2800      	cmp	r0, #0
  41b77e:	db46      	blt.n	41b80e <.LCFI61+0x12>
        GetInt(&key->d,  input, inOutIdx, inSz) < 0 ||
  41b780:	4633      	mov	r3, r6
  41b782:	462a      	mov	r2, r5
  41b784:	4621      	mov	r1, r4
  41b786:	f507 608a 	add.w	r0, r7, #1104	; 0x450
  41b78a:	f004 ffe7 	bl	42075c <.LFE0>

0041b78e <.LVL332>:
        GetInt(&key->e,  input, inOutIdx, inSz) < 0 ||
  41b78e:	2800      	cmp	r0, #0
  41b790:	db40      	blt.n	41b814 <.LCFI61+0x18>
        GetInt(&key->p,  input, inOutIdx, inSz) < 0 ||
  41b792:	4633      	mov	r3, r6
  41b794:	462a      	mov	r2, r5
  41b796:	4621      	mov	r1, r4
  41b798:	f507 60cf 	add.w	r0, r7, #1656	; 0x678
  41b79c:	f004 ffde 	bl	42075c <.LFE0>

0041b7a0 <.LVL333>:
        GetInt(&key->d,  input, inOutIdx, inSz) < 0 ||
  41b7a0:	2800      	cmp	r0, #0
  41b7a2:	db3a      	blt.n	41b81a <.LCFI61+0x1e>
        GetInt(&key->q,  input, inOutIdx, inSz) < 0 ||
  41b7a4:	4633      	mov	r3, r6
  41b7a6:	462a      	mov	r2, r5
  41b7a8:	4621      	mov	r1, r4
  41b7aa:	f507 600a 	add.w	r0, r7, #2208	; 0x8a0
  41b7ae:	f004 ffd5 	bl	42075c <.LFE0>

0041b7b2 <.LVL334>:
        GetInt(&key->p,  input, inOutIdx, inSz) < 0 ||
  41b7b2:	2800      	cmp	r0, #0
  41b7b4:	db34      	blt.n	41b820 <.LCFI61+0x24>
        GetInt(&key->dP, input, inOutIdx, inSz) < 0 ||
  41b7b6:	4633      	mov	r3, r6
  41b7b8:	462a      	mov	r2, r5
  41b7ba:	4621      	mov	r1, r4
  41b7bc:	f607 20c8 	addw	r0, r7, #2760	; 0xac8
  41b7c0:	f004 ffcc 	bl	42075c <.LFE0>

0041b7c4 <.LVL335>:
        GetInt(&key->q,  input, inOutIdx, inSz) < 0 ||
  41b7c4:	2800      	cmp	r0, #0
  41b7c6:	db2e      	blt.n	41b826 <.LCFI61+0x2a>
        GetInt(&key->dQ, input, inOutIdx, inSz) < 0 ||
  41b7c8:	4633      	mov	r3, r6
  41b7ca:	462a      	mov	r2, r5
  41b7cc:	4621      	mov	r1, r4
  41b7ce:	f507 604f 	add.w	r0, r7, #3312	; 0xcf0
  41b7d2:	f004 ffc3 	bl	42075c <.LFE0>

0041b7d6 <.LVL336>:
        GetInt(&key->dP, input, inOutIdx, inSz) < 0 ||
  41b7d6:	2800      	cmp	r0, #0
  41b7d8:	db28      	blt.n	41b82c <.LCFI61+0x30>
        GetInt(&key->u,  input, inOutIdx, inSz) < 0 )  return ASN_RSA_KEY_E;
  41b7da:	4633      	mov	r3, r6
  41b7dc:	462a      	mov	r2, r5
  41b7de:	4621      	mov	r1, r4
  41b7e0:	f607 7018 	addw	r0, r7, #3864	; 0xf18
  41b7e4:	f004 ffba 	bl	42075c <.LFE0>

0041b7e8 <.LVL337>:
        GetInt(&key->dQ, input, inOutIdx, inSz) < 0 ||
  41b7e8:	2800      	cmp	r0, #0
        GetInt(&key->u,  input, inOutIdx, inSz) < 0 )  return ASN_RSA_KEY_E;
  41b7ea:	bfac      	ite	ge
  41b7ec:	2000      	movge	r0, #0
  41b7ee:	f06f 008e 	mvnlt.w	r0, #142	; 0x8e
        return BAD_STATE_E;
    }
#endif

    return 0;
}
  41b7f2:	b003      	add	sp, #12

0041b7f4 <.LCFI59>:
  41b7f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0041b7f6 <.LCFI60>:
        return BAD_FUNC_ARG;
  41b7f6:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041b7fa <.LVL339>:
  41b7fa:	4770      	bx	lr

0041b7fc <.LCFI61>:
        return ASN_PARSE_E;
  41b7fc:	f06f 008b 	mvn.w	r0, #139	; 0x8b
  41b800:	e7f7      	b.n	41b7f2 <.LVL337+0xa>
        return ASN_PARSE_E;
  41b802:	f06f 008b 	mvn.w	r0, #139	; 0x8b
  41b806:	e7f4      	b.n	41b7f2 <.LVL337+0xa>
        GetInt(&key->u,  input, inOutIdx, inSz) < 0 )  return ASN_RSA_KEY_E;
  41b808:	f06f 008e 	mvn.w	r0, #142	; 0x8e
  41b80c:	e7f1      	b.n	41b7f2 <.LVL337+0xa>
  41b80e:	f06f 008e 	mvn.w	r0, #142	; 0x8e
  41b812:	e7ee      	b.n	41b7f2 <.LVL337+0xa>
  41b814:	f06f 008e 	mvn.w	r0, #142	; 0x8e
  41b818:	e7eb      	b.n	41b7f2 <.LVL337+0xa>
  41b81a:	f06f 008e 	mvn.w	r0, #142	; 0x8e
  41b81e:	e7e8      	b.n	41b7f2 <.LVL337+0xa>
  41b820:	f06f 008e 	mvn.w	r0, #142	; 0x8e
  41b824:	e7e5      	b.n	41b7f2 <.LVL337+0xa>
  41b826:	f06f 008e 	mvn.w	r0, #142	; 0x8e
  41b82a:	e7e2      	b.n	41b7f2 <.LVL337+0xa>
  41b82c:	f06f 008e 	mvn.w	r0, #142	; 0x8e
  41b830:	e7df      	b.n	41b7f2 <.LVL337+0xa>

Disassembly of section .rodata._ctype_%120:

0041b834 <_ctype_>:
  41b834:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  41b844:	2020 2020 2020 2020 2020 2020 2020 2020                     
  41b854:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  41b864:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  41b874:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  41b884:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  41b894:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  41b8a4:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  41b8b4:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
  41b934:	0000 bf00                                   ....

Disassembly of section .rodata._length_code%121:

0041b938 <_length_code>:
  41b938:	0100 0302 0504 0706 0808 0909 0a0a 0b0b     ................
  41b948:	0c0c 0c0c 0d0d 0d0d 0e0e 0e0e 0f0f 0f0f     ................
  41b958:	1010 1010 1010 1010 1111 1111 1111 1111     ................
  41b968:	1212 1212 1212 1212 1313 1313 1313 1313     ................
  41b978:	1414 1414 1414 1414 1414 1414 1414 1414     ................
  41b988:	1515 1515 1515 1515 1515 1515 1515 1515     ................
  41b998:	1616 1616 1616 1616 1616 1616 1616 1616     ................
  41b9a8:	1717 1717 1717 1717 1717 1717 1717 1717     ................
  41b9b8:	1818 1818 1818 1818 1818 1818 1818 1818     ................
  41b9c8:	1818 1818 1818 1818 1818 1818 1818 1818     ................
  41b9d8:	1919 1919 1919 1919 1919 1919 1919 1919     ................
  41b9e8:	1919 1919 1919 1919 1919 1919 1919 1919     ................
  41b9f8:	1a1a 1a1a 1a1a 1a1a 1a1a 1a1a 1a1a 1a1a     ................
  41ba08:	1a1a 1a1a 1a1a 1a1a 1a1a 1a1a 1a1a 1a1a     ................
  41ba18:	1b1b 1b1b 1b1b 1b1b 1b1b 1b1b 1b1b 1b1b     ................
  41ba28:	1b1b 1b1b 1b1b 1b1b 1b1b 1b1b 1b1b 1c1b     ................

Disassembly of section .rodata.Td4%122:

0041ba38 <Td4>:
  41ba38:	0952 d56a 3630 38a5 40bf 9ea3 f381 fbd7     R.j.06.8.@......
  41ba48:	e37c 8239 2f9b 87ff 8e34 4443 dec4 cbe9     |.9../..4.CD....
  41ba58:	7b54 3294 c2a6 3d23 4cee 0b95 fa42 4ec3     T{.2..#=.L..B..N
  41ba68:	2e08 66a1 d928 b224 5b76 49a2 8b6d 25d1     ...f(.$.v[.Im..%
  41ba78:	f872 64f6 6886 1698 a4d4 cc5c 655d 92b6     r..d.h....\.]e..
  41ba88:	706c 5048 edfd dab9 155e 5746 8da7 849d     lpHP....^.FW....
  41ba98:	d890 00ab bc8c 0ad3 e4f7 0558 b3b8 0645     ..........X...E.
  41baa8:	2cd0 8f1e 3fca 020f afc1 03bd 1301 6b8a     .,...?.........k
  41bab8:	913a 4111 674f eadc f297 cecf b4f0 73e6     :..AOg.........s
  41bac8:	ac96 2274 ade7 8535 f9e2 e837 751c 6edf     ..t"..5...7..u.n
  41bad8:	f147 711a 291d 89c5 b76f 0e62 18aa 1bbe     G..q.)..o.b.....
  41bae8:	56fc 4b3e d2c6 2079 db9a fec0 cd78 f45a     .V>K..y ....x.Z.
  41baf8:	dd1f 33a8 0788 31c7 12b1 5910 8027 5fec     ...3...1...Y'.._
  41bb08:	5160 a97f b519 0d4a e52d 9f7a c993 ef9c     `Q....J.-.z.....
  41bb18:	e0a0 4d3b 2aae b0f5 ebc8 3cbb 5383 6199     ..;M.*.....<.S.a
  41bb28:	2b17 7e04 77ba 26d6 69e1 6314 2155 7d0c     .+.~.w.&.i.cU!.}

Disassembly of section .rodata.K%123:

0041bb38 <K>:
  41bb38:	2f98 428a 4491 7137 fbcf b5c0 dba5 e9b5     ./.B.D7q........
  41bb48:	c25b 3956 11f1 59f1 82a4 923f 5ed5 ab1c     [.V9...Y..?..^..
  41bb58:	aa98 d807 5b01 1283 85be 2431 7dc3 550c     .....[....1$.}.U
  41bb68:	5d74 72be b1fe 80de 06a7 9bdc f174 c19b     t].r........t...
  41bb78:	69c1 e49b 4786 efbe 9dc6 0fc1 a1cc 240c     .i...G.........$
  41bb88:	2c6f 2de9 84aa 4a74 a9dc 5cb0 88da 76f9     o,.-..tJ...\...v
  41bb98:	5152 983e c66d a831 27c8 b003 7fc7 bf59     RQ>.m.1..'....Y.
  41bba8:	0bf3 c6e0 9147 d5a7 6351 06ca 2967 1429     ....G...Qc..g)).
  41bbb8:	0a85 27b7 2138 2e1b 6dfc 4d2c 0d13 5338     ...'8!...m,M..8S
  41bbc8:	7354 650a 0abb 766a c92e 81c2 2c85 9272     Ts.e..jv.....,r.
  41bbd8:	e8a1 a2bf 664b a81a 8b70 c24b 51a3 c76c     ....Kf..p.K..Ql.
  41bbe8:	e819 d192 0624 d699 3585 f40e a070 106a     ....$....5..p.j.
  41bbf8:	c116 19a4 6c08 1e37 774c 2748 bcb5 34b0     .....l7.LwH'...4
  41bc08:	0cb3 391c aa4a 4ed8 ca4f 5b9c 6ff3 682e     ...9J..NO..[.o.h
  41bc18:	82ee 748f 636f 78a5 7814 84c8 0208 8cc7     ...toc.x.x......
  41bc28:	fffa 90be 6ceb a450 a3f7 bef9 78f2 c671     .....lP......xq.

Disassembly of section .text.wc_ecc_export_x963%124:

0041bc38 <wc_ecc_export_x963>:
}


/* export public ECC key in ANSI X9.63 format */
int wc_ecc_export_x963(ecc_key* key, byte* out, word32* outLen)
{
  41bc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0041bc3c <.LCFI104>:
  41bc3c:	b0c1      	sub	sp, #260	; 0x104

0041bc3e <.LCFI105>:
#endif
   word32 pubxlen, pubylen;
#endif /* WOLFSSL_ATECC508A */

   /* return length needed only */
   if (key != NULL && out == NULL && outLen != NULL) {
  41bc3e:	460f      	mov	r7, r1
  41bc40:	fab1 f181 	clz	r1, r1

0041bc44 <.LVL1247>:
  41bc44:	0949      	lsrs	r1, r1, #5
  41bc46:	4615      	mov	r5, r2
  41bc48:	2a00      	cmp	r2, #0
  41bc4a:	bf0c      	ite	eq
  41bc4c:	2200      	moveq	r2, #0
  41bc4e:	f001 0201 	andne.w	r2, r1, #1

0041bc52 <.LVL1248>:
  41bc52:	b10a      	cbz	r2, 41bc58 <.LVL1248+0x6>
  41bc54:	2800      	cmp	r0, #0
  41bc56:	d13a      	bne.n	41bcce <.LCFI107>
      numlen = key->dp->size;
      *outLen = 1 + 2*numlen;
      return LENGTH_ONLY_E;
   }

   if (key == NULL || out == NULL || outLen == NULL)
  41bc58:	2d00      	cmp	r5, #0
  41bc5a:	bf08      	it	eq
  41bc5c:	f041 0101 	orreq.w	r1, r1, #1
  41bc60:	2900      	cmp	r1, #0
  41bc62:	d15e      	bne.n	41bd22 <.LVL1273>
  41bc64:	2800      	cmp	r0, #0
  41bc66:	d05c      	beq.n	41bd22 <.LVL1273>
  41bc68:	4604      	mov	r4, r0
      return ECC_BAD_ARG_E;

   if (wc_ecc_is_valid_idx(key->idx) == 0) {
  41bc6a:	6840      	ldr	r0, [r0, #4]

0041bc6c <.LVL1249>:
  41bc6c:	f005 ff8c 	bl	421b88 <wc_ecc_is_valid_idx>

0041bc70 <.LVL1250>:
  41bc70:	2800      	cmp	r0, #0
  41bc72:	d059      	beq.n	41bd28 <.LVL1274>
      return ECC_BAD_ARG_E;
   }
   numlen = key->dp->size;
  41bc74:	6923      	ldr	r3, [r4, #16]
  41bc76:	681e      	ldr	r6, [r3, #0]

0041bc78 <.LVL1251>:

    /* verify room in out buffer */
   if (*outLen < (1 + 2*numlen)) {
  41bc78:	ea4f 0946 	mov.w	r9, r6, lsl #1
  41bc7c:	f109 0901 	add.w	r9, r9, #1
  41bc80:	682b      	ldr	r3, [r5, #0]
  41bc82:	454b      	cmp	r3, r9
  41bc84:	d32b      	bcc.n	41bcde <.LVL1265>
   ret = BAD_COND_E;

#else

   /* verify public key length is less than key size */
   pubxlen = mp_unsigned_bin_size(key->pubkey.x);
  41bc86:	f104 0a18 	add.w	sl, r4, #24
  41bc8a:	4650      	mov	r0, sl
  41bc8c:	f006 fc66 	bl	42255c <.LFE82>

0041bc90 <.LVL1252>:
  41bc90:	4680      	mov	r8, r0

0041bc92 <.LVL1253>:
   pubylen = mp_unsigned_bin_size(key->pubkey.y);
  41bc92:	f504 7410 	add.w	r4, r4, #576	; 0x240

0041bc96 <.LVL1254>:
  41bc96:	4620      	mov	r0, r4

0041bc98 <.LVL1255>:
  41bc98:	f006 fc60 	bl	42255c <.LFE82>

0041bc9c <.LVL1256>:
  41bc9c:	4683      	mov	fp, r0

0041bc9e <.LVL1257>:
   if ((pubxlen > numlen) || (pubylen > numlen)) {
  41bc9e:	4546      	cmp	r6, r8
  41bca0:	d345      	bcc.n	41bd2e <.LVL1275>
  41bca2:	4286      	cmp	r6, r0
  41bca4:	d343      	bcc.n	41bd2e <.LVL1275>
      WOLFSSL_MSG("Public key x/y invalid!");
      return BUFFER_E;
   }

   /* store byte 0x04 */
   out[0] = 0x04;
  41bca6:	2304      	movs	r3, #4
  41bca8:	703b      	strb	r3, [r7, #0]
   if (buf == NULL)
      return MEMORY_E;
#endif

   /* pad and store x */
   XMEMSET(buf, 0, ECC_BUFSIZE);
  41bcaa:	f44f 7280 	mov.w	r2, #256	; 0x100
  41bcae:	2100      	movs	r1, #0
  41bcb0:	4668      	mov	r0, sp

0041bcb2 <.LVL1258>:
  41bcb2:	f002 fc31 	bl	41e518 <.LFE14>

0041bcb6 <.LVL1259>:
   ret = mp_to_unsigned_bin(key->pubkey.x, buf + (numlen - pubxlen));
  41bcb6:	eba6 0108 	sub.w	r1, r6, r8
  41bcba:	4469      	add	r1, sp
  41bcbc:	4650      	mov	r0, sl
  41bcbe:	f006 fbe7 	bl	422490 <.LFE73>

0041bcc2 <.LVL1260>:
   if (ret != MP_OKAY)
  41bcc2:	4680      	mov	r8, r0

0041bcc4 <.LVL1261>:
  41bcc4:	b180      	cbz	r0, 41bce8 <.LVL1266>

0041bcc6 <.LVL1262>:
   XFREE(buf, NULL, DYNAMIC_TYPE_ECC_BUFFER);
#endif
#endif /* WOLFSSL_ATECC508A */

   return ret;
}
  41bcc6:	4640      	mov	r0, r8
  41bcc8:	b041      	add	sp, #260	; 0x104

0041bcca <.LCFI106>:
  41bcca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0041bcce <.LCFI107>:
      numlen = key->dp->size;
  41bcce:	6903      	ldr	r3, [r0, #16]
      *outLen = 1 + 2*numlen;
  41bcd0:	681b      	ldr	r3, [r3, #0]
  41bcd2:	005b      	lsls	r3, r3, #1
  41bcd4:	3301      	adds	r3, #1
  41bcd6:	602b      	str	r3, [r5, #0]

0041bcd8 <.LVL1264>:
      return LENGTH_ONLY_E;
  41bcd8:	f06f 08c9 	mvn.w	r8, #201	; 0xc9
  41bcdc:	e7f3      	b.n	41bcc6 <.LVL1262>

0041bcde <.LVL1265>:
      *outLen = 1 + 2*numlen;
  41bcde:	f8c5 9000 	str.w	r9, [r5]
      return BUFFER_E;
  41bce2:	f06f 0883 	mvn.w	r8, #131	; 0x83
  41bce6:	e7ee      	b.n	41bcc6 <.LVL1262>

0041bce8 <.LVL1266>:
   XMEMCPY(out+1, buf, numlen);
  41bce8:	4632      	mov	r2, r6
  41bcea:	4669      	mov	r1, sp
  41bcec:	1c78      	adds	r0, r7, #1

0041bcee <.LVL1267>:
  41bcee:	f7fe fe49 	bl	41a984 <.LFE14>

0041bcf2 <.LVL1268>:
   XMEMSET(buf, 0, ECC_BUFSIZE);
  41bcf2:	f44f 7280 	mov.w	r2, #256	; 0x100
  41bcf6:	2100      	movs	r1, #0
  41bcf8:	4668      	mov	r0, sp
  41bcfa:	f002 fc0d 	bl	41e518 <.LFE14>

0041bcfe <.LVL1269>:
   ret = mp_to_unsigned_bin(key->pubkey.y, buf + (numlen - pubylen));
  41bcfe:	eba6 010b 	sub.w	r1, r6, fp
  41bd02:	4469      	add	r1, sp
  41bd04:	4620      	mov	r0, r4
  41bd06:	f006 fbc3 	bl	422490 <.LFE73>

0041bd0a <.LVL1270>:
   if (ret != MP_OKAY)
  41bd0a:	4680      	mov	r8, r0
  41bd0c:	2800      	cmp	r0, #0
  41bd0e:	d1da      	bne.n	41bcc6 <.LVL1262>
   XMEMCPY(out+1+numlen, buf, numlen);
  41bd10:	1c70      	adds	r0, r6, #1

0041bd12 <.LVL1271>:
  41bd12:	4632      	mov	r2, r6
  41bd14:	4669      	mov	r1, sp
  41bd16:	4438      	add	r0, r7
  41bd18:	f7fe fe34 	bl	41a984 <.LFE14>

0041bd1c <.LVL1272>:
   *outLen = 1 + 2*numlen;
  41bd1c:	f8c5 9000 	str.w	r9, [r5]
  41bd20:	e7d1      	b.n	41bcc6 <.LVL1262>

0041bd22 <.LVL1273>:
      return ECC_BAD_ARG_E;
  41bd22:	f06f 08a9 	mvn.w	r8, #169	; 0xa9
  41bd26:	e7ce      	b.n	41bcc6 <.LVL1262>

0041bd28 <.LVL1274>:
      return ECC_BAD_ARG_E;
  41bd28:	f06f 08a9 	mvn.w	r8, #169	; 0xa9
  41bd2c:	e7cb      	b.n	41bcc6 <.LVL1262>

0041bd2e <.LVL1275>:
      return BUFFER_E;
  41bd2e:	f06f 0883 	mvn.w	r8, #131	; 0x83

0041bd32 <.LVL1276>:
  41bd32:	e7c8      	b.n	41bcc6 <.LVL1262>

Disassembly of section .text.__ssprint_r%125:

0041bd34 <__ssprint_r>:
  41bd34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0041bd38 <.LCFI0>:
  41bd38:	6893      	ldr	r3, [r2, #8]
  41bd3a:	b083      	sub	sp, #12

0041bd3c <.LCFI1>:
  41bd3c:	4690      	mov	r8, r2

0041bd3e <.LVL1>:
  41bd3e:	2b00      	cmp	r3, #0
  41bd40:	d070      	beq.n	41be24 <.LCFI3>
  41bd42:	4682      	mov	sl, r0
  41bd44:	460c      	mov	r4, r1
  41bd46:	6817      	ldr	r7, [r2, #0]
  41bd48:	688d      	ldr	r5, [r1, #8]
  41bd4a:	6808      	ldr	r0, [r1, #0]

0041bd4c <.LVL2>:
  41bd4c:	e042      	b.n	41bdd4 <.LVL16>

0041bd4e <.LVL3>:
  41bd4e:	89a3      	ldrh	r3, [r4, #12]
  41bd50:	f413 6f90 	tst.w	r3, #1152	; 0x480
  41bd54:	d02e      	beq.n	41bdb4 <.LBE2>

0041bd56 <.LBB2>:
  41bd56:	6965      	ldr	r5, [r4, #20]
  41bd58:	6921      	ldr	r1, [r4, #16]
  41bd5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  41bd5e:	eba0 0b01 	sub.w	fp, r0, r1

0041bd62 <.LVL4>:
  41bd62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  41bd66:	f10b 0001 	add.w	r0, fp, #1
  41bd6a:	106d      	asrs	r5, r5, #1

0041bd6c <.LVL5>:
  41bd6c:	4430      	add	r0, r6
  41bd6e:	42a8      	cmp	r0, r5
  41bd70:	462a      	mov	r2, r5
  41bd72:	bf84      	itt	hi
  41bd74:	4605      	movhi	r5, r0
  41bd76:	462a      	movhi	r2, r5
  41bd78:	055b      	lsls	r3, r3, #21
  41bd7a:	d538      	bpl.n	41bdee <.LBB3>
  41bd7c:	4611      	mov	r1, r2
  41bd7e:	4650      	mov	r0, sl
  41bd80:	f7f4 ffae 	bl	410ce0 <.LFE20>

0041bd84 <.LVL7>:
  41bd84:	2800      	cmp	r0, #0
  41bd86:	d03c      	beq.n	41be02 <.L10>
  41bd88:	465a      	mov	r2, fp
  41bd8a:	6921      	ldr	r1, [r4, #16]
  41bd8c:	9001      	str	r0, [sp, #4]
  41bd8e:	f7fe fdf9 	bl	41a984 <.LFE14>

0041bd92 <.LVL8>:
  41bd92:	89a2      	ldrh	r2, [r4, #12]
  41bd94:	9b01      	ldr	r3, [sp, #4]
  41bd96:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  41bd9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  41bd9e:	81a2      	strh	r2, [r4, #12]

0041bda0 <.LVL9>:
  41bda0:	eba5 020b 	sub.w	r2, r5, fp
  41bda4:	eb03 000b 	add.w	r0, r3, fp
  41bda8:	6165      	str	r5, [r4, #20]
  41bdaa:	6123      	str	r3, [r4, #16]
  41bdac:	6020      	str	r0, [r4, #0]
  41bdae:	60a2      	str	r2, [r4, #8]
  41bdb0:	4635      	mov	r5, r6

0041bdb2 <.LVL10>:
  41bdb2:	46b3      	mov	fp, r6

0041bdb4 <.LBE2>:
  41bdb4:	465a      	mov	r2, fp
  41bdb6:	4649      	mov	r1, r9
  41bdb8:	f000 feda 	bl	41cb70 <memmove>

0041bdbc <.LVL12>:
  41bdbc:	f8d8 3008 	ldr.w	r3, [r8, #8]
  41bdc0:	68a2      	ldr	r2, [r4, #8]
  41bdc2:	6820      	ldr	r0, [r4, #0]
  41bdc4:	1b55      	subs	r5, r2, r5

0041bdc6 <.LVL13>:
  41bdc6:	4458      	add	r0, fp
  41bdc8:	1b9e      	subs	r6, r3, r6

0041bdca <.LVL14>:
  41bdca:	60a5      	str	r5, [r4, #8]
  41bdcc:	6020      	str	r0, [r4, #0]

0041bdce <.LVL15>:
  41bdce:	f8c8 6008 	str.w	r6, [r8, #8]
  41bdd2:	b33e      	cbz	r6, 41be24 <.LCFI3>

0041bdd4 <.LVL16>:
  41bdd4:	687e      	ldr	r6, [r7, #4]

0041bdd6 <.LVL17>:
  41bdd6:	463b      	mov	r3, r7
  41bdd8:	3708      	adds	r7, #8

0041bdda <.LVL18>:
  41bdda:	2e00      	cmp	r6, #0
  41bddc:	d0fa      	beq.n	41bdd4 <.LVL16>
  41bdde:	42ae      	cmp	r6, r5
  41bde0:	f8d3 9000 	ldr.w	r9, [r3]
  41bde4:	46ab      	mov	fp, r5
  41bde6:	d2b2      	bcs.n	41bd4e <.LVL3>
  41bde8:	4635      	mov	r5, r6

0041bdea <.LVL19>:
  41bdea:	46b3      	mov	fp, r6
  41bdec:	e7e2      	b.n	41bdb4 <.LBE2>

0041bdee <.LBB3>:
  41bdee:	4650      	mov	r0, sl
  41bdf0:	f7fa fa00 	bl	4161f4 <.LFE21>

0041bdf4 <.LVL21>:
  41bdf4:	4603      	mov	r3, r0
  41bdf6:	2800      	cmp	r0, #0
  41bdf8:	d1d2      	bne.n	41bda0 <.LVL9>
  41bdfa:	6921      	ldr	r1, [r4, #16]
  41bdfc:	4650      	mov	r0, sl

0041bdfe <.LVL22>:
  41bdfe:	f7fd fabf 	bl	419380 <_free_r>

0041be02 <.L10>:
  41be02:	230c      	movs	r3, #12
  41be04:	f8ca 3000 	str.w	r3, [sl]

0041be08 <.LBE3>:
  41be08:	89a3      	ldrh	r3, [r4, #12]
  41be0a:	2200      	movs	r2, #0
  41be0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  41be10:	f04f 30ff 	mov.w	r0, #4294967295
  41be14:	81a3      	strh	r3, [r4, #12]
  41be16:	f8c8 2008 	str.w	r2, [r8, #8]
  41be1a:	f8c8 2004 	str.w	r2, [r8, #4]
  41be1e:	b003      	add	sp, #12

0041be20 <.LCFI2>:
  41be20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0041be24 <.LCFI3>:
  41be24:	2000      	movs	r0, #0
  41be26:	f8c8 0004 	str.w	r0, [r8, #4]
  41be2a:	b003      	add	sp, #12

0041be2c <.LCFI4>:
  41be2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section .text.RsaMGF1%126:

0041be30 <RsaMGF1>:
{
  41be30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0041be34 <.LCFI2>:
  41be34:	b09b      	sub	sp, #108	; 0x6c

0041be36 <.LCFI3>:
  41be36:	9004      	str	r0, [sp, #16]
  41be38:	9105      	str	r1, [sp, #20]
  41be3a:	4692      	mov	sl, r2
  41be3c:	9306      	str	r3, [sp, #24]
  41be3e:	9d24      	ldr	r5, [sp, #144]	; 0x90
    hLen    = wc_HashGetDigestSize(hType);
  41be40:	f005 fb38 	bl	4214b4 <wc_HashGetDigestSize>

0041be44 <.LVL13>:
    if (hLen < 0) {
  41be44:	1e06      	subs	r6, r0, #0
  41be46:	db66      	blt.n	41bf16 <.LBE18>
    if ((seedSz + 4) > sizeof(tmpA) || (word32)hLen > sizeof(tmpA)) {
  41be48:	f10a 0304 	add.w	r3, sl, #4
  41be4c:	9303      	str	r3, [sp, #12]
  41be4e:	2b44      	cmp	r3, #68	; 0x44
  41be50:	d801      	bhi.n	41be56 <.LVL13+0x12>
  41be52:	2e44      	cmp	r6, #68	; 0x44
  41be54:	d911      	bls.n	41be7a <.LBE14>
        tmpSz = ((seedSz + 4) > (word32)hLen)? seedSz + 4: (word32)hLen;
  41be56:	9b03      	ldr	r3, [sp, #12]
  41be58:	42b3      	cmp	r3, r6
  41be5a:	bf38      	it	cc
  41be5c:	4633      	movcc	r3, r6
  41be5e:	469b      	mov	fp, r3

0041be60 <.LVL14>:
        tmp = (byte*)XMALLOC(tmpSz, heap, DYNAMIC_TYPE_RSA_BUFFER);
  41be60:	4618      	mov	r0, r3

0041be62 <.LVL15>:
  41be62:	f006 f907 	bl	422074 <.LFE26>

0041be66 <.LVL16>:
        if (tmp == NULL) {
  41be66:	4680      	mov	r8, r0
  41be68:	2800      	cmp	r0, #0
  41be6a:	d059      	beq.n	41bf20 <.LCFI5>
        tmpF = 1; /* make sure to free memory when done */
  41be6c:	2301      	movs	r3, #1
  41be6e:	9307      	str	r3, [sp, #28]

0041be70 <.LVL17>:
        tmp  = tmpA;
  41be70:	2400      	movs	r4, #0
  41be72:	4627      	mov	r7, r4

0041be74 <.LBB14>:
        tmp[seedSz + 1] = (counter >> 16) & 0xFF;
  41be74:	eb08 090a 	add.w	r9, r8, sl
  41be78:	e014      	b.n	41bea4 <.LBB17>

0041be7a <.LBE14>:
        tmpSz = sizeof(tmpA);
  41be7a:	f04f 0b44 	mov.w	fp, #68	; 0x44
        tmpF = 0; /* no need to free memory at end */
  41be7e:	2300      	movs	r3, #0
  41be80:	9307      	str	r3, [sp, #28]
        tmp  = tmpA;
  41be82:	f10d 0824 	add.w	r8, sp, #36	; 0x24
  41be86:	e7f3      	b.n	41be70 <.LVL17>

0041be88 <.LVL19>:
  41be88:	4604      	mov	r4, r0

0041be8a <.LBB15>:
                XFREE(tmp, heap, DYNAMIC_TYPE_RSA_BUFFER);
  41be8a:	9b07      	ldr	r3, [sp, #28]
  41be8c:	2b00      	cmp	r3, #0
  41be8e:	d043      	beq.n	41bf18 <.LVL36>
  41be90:	f1b8 0f00 	cmp.w	r8, #0
  41be94:	d040      	beq.n	41bf18 <.LVL36>
  41be96:	4640      	mov	r0, r8

0041be98 <.LVL21>:
  41be98:	f006 f8f8 	bl	42208c <.LFE2>

0041be9c <.LVL22>:
  41be9c:	e03c      	b.n	41bf18 <.LVL36>

0041be9e <.LBE15>:
        counter++;
  41be9e:	3701      	adds	r7, #1

0041bea0 <.LBE16>:
    } while (idx < outSz);
  41bea0:	42a5      	cmp	r5, r4
  41bea2:	d92e      	bls.n	41bf02 <.LVL31>

0041bea4 <.LBB17>:
        XMEMCPY(tmp, seed, seedSz);
  41bea4:	4652      	mov	r2, sl
  41bea6:	9905      	ldr	r1, [sp, #20]
  41bea8:	4640      	mov	r0, r8
  41beaa:	f7fe fd6b 	bl	41a984 <.LFE14>

0041beae <.LVL26>:
        tmp[seedSz]     = (counter >> 24) & 0xFF;
  41beae:	0e3b      	lsrs	r3, r7, #24
  41beb0:	f808 300a 	strb.w	r3, [r8, sl]
        tmp[seedSz + 1] = (counter >> 16) & 0xFF;
  41beb4:	0c3b      	lsrs	r3, r7, #16
  41beb6:	f889 3001 	strb.w	r3, [r9, #1]
        tmp[seedSz + 2] = (counter >>  8) & 0xFF;
  41beba:	0a3b      	lsrs	r3, r7, #8
  41bebc:	f889 3002 	strb.w	r3, [r9, #2]
        tmp[seedSz + 3] = (counter)       & 0xFF;
  41bec0:	f889 7003 	strb.w	r7, [r9, #3]
        if ((ret = wc_Hash(hType, tmp, (seedSz + 4), tmp, tmpSz)) != 0) {
  41bec4:	f8cd b000 	str.w	fp, [sp]
  41bec8:	4643      	mov	r3, r8
  41beca:	9a03      	ldr	r2, [sp, #12]
  41becc:	4641      	mov	r1, r8
  41bece:	9804      	ldr	r0, [sp, #16]
  41bed0:	f002 fa85 	bl	41e3de <.LFE24>

0041bed4 <.LVL27>:
  41bed4:	4686      	mov	lr, r0
  41bed6:	2800      	cmp	r0, #0
  41bed8:	d1d6      	bne.n	41be88 <.LVL19>
        for (i = 0; i < hLen && idx < outSz; i++) {
  41beda:	2e00      	cmp	r6, #0
  41bedc:	dddf      	ble.n	41be9e <.LBE15>
  41bede:	42ac      	cmp	r4, r5
  41bee0:	d2dd      	bcs.n	41be9e <.LBE15>
  41bee2:	f108 31ff 	add.w	r1, r8, #4294967295
  41bee6:	9b06      	ldr	r3, [sp, #24]
  41bee8:	191a      	adds	r2, r3, r4
  41beea:	4603      	mov	r3, r0

0041beec <.LVL28>:
            out[idx++] = tmp[i];
  41beec:	3401      	adds	r4, #1
  41beee:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  41bef2:	f802 0b01 	strb.w	r0, [r2], #1
        for (i = 0; i < hLen && idx < outSz; i++) {
  41bef6:	3301      	adds	r3, #1
  41bef8:	429e      	cmp	r6, r3
  41befa:	ddd0      	ble.n	41be9e <.LBE15>
  41befc:	42a5      	cmp	r5, r4
  41befe:	d8f5      	bhi.n	41beec <.LVL28>
  41bf00:	e7cd      	b.n	41be9e <.LBE15>

0041bf02 <.LVL31>:
  41bf02:	4674      	mov	r4, lr

0041bf04 <.LBB18>:
        XFREE(tmp, heap, DYNAMIC_TYPE_RSA_BUFFER);
  41bf04:	f1b8 0f00 	cmp.w	r8, #0
  41bf08:	d006      	beq.n	41bf18 <.LVL36>

0041bf0a <.LVL33>:
  41bf0a:	9b07      	ldr	r3, [sp, #28]
  41bf0c:	b123      	cbz	r3, 41bf18 <.LVL36>
  41bf0e:	4640      	mov	r0, r8
  41bf10:	f006 f8bc 	bl	42208c <.LFE2>

0041bf14 <.LVL34>:
  41bf14:	e000      	b.n	41bf18 <.LVL36>

0041bf16 <.LBE18>:
        return hLen;
  41bf16:	4634      	mov	r4, r6

0041bf18 <.LVL36>:
}
  41bf18:	4620      	mov	r0, r4
  41bf1a:	b01b      	add	sp, #108	; 0x6c

0041bf1c <.LCFI4>:
  41bf1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0041bf20 <.LCFI5>:
            return MEMORY_E;
  41bf20:	f06f 037c 	mvn.w	r3, #124	; 0x7c
  41bf24:	461c      	mov	r4, r3
  41bf26:	e7f7      	b.n	41bf18 <.LVL36>

Disassembly of section .text.wc_RNG_GenerateBlock%127:

0041bf28 <wc_RNG_GenerateBlock>:
}


/* place a generated block in output */
int wc_RNG_GenerateBlock(WC_RNG* rng, byte* output, word32 sz)
{
  41bf28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

0041bf2c <.LCFI29>:
  41bf2c:	b0a5      	sub	sp, #148	; 0x94

0041bf2e <.LCFI30>:
    int ret;

    if (rng == NULL || output == NULL)
  41bf2e:	4689      	mov	r9, r1
    XMEMSET(output, 0, sz);
    ret = CUSTOM_RAND_GENERATE_BLOCK(output, sz);
#else

#ifdef HAVE_HASHDRBG
    if (sz > RNG_MAX_BLOCK_LEN)
  41bf30:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  41bf34:	bf94      	ite	ls
  41bf36:	2300      	movls	r3, #0
  41bf38:	2301      	movhi	r3, #1
  41bf3a:	2900      	cmp	r1, #0
  41bf3c:	bf14      	ite	ne
  41bf3e:	4619      	movne	r1, r3
  41bf40:	f043 0101 	orreq.w	r1, r3, #1

0041bf44 <.LVL255>:
  41bf44:	2900      	cmp	r1, #0
  41bf46:	d15f      	bne.n	41c008 <.LVL284>
  41bf48:	2800      	cmp	r0, #0
  41bf4a:	d05d      	beq.n	41c008 <.LVL284>
        return BAD_FUNC_ARG;

    if (rng->status != DRBG_OK)
  41bf4c:	7b03      	ldrb	r3, [r0, #12]
  41bf4e:	2b01      	cmp	r3, #1
  41bf50:	d15d      	bne.n	41c00e <.LVL284+0x6>
  41bf52:	4690      	mov	r8, r2
  41bf54:	4607      	mov	r7, r0
        return RNG_FAILURE_E;

    ret = Hash_DRBG_Generate(rng->drbg, output, sz);
  41bf56:	4649      	mov	r1, r9
  41bf58:	6880      	ldr	r0, [r0, #8]

0041bf5a <.LVL256>:
  41bf5a:	f7fa ff8b 	bl	416e74 <.LFE0>

0041bf5e <.LVL257>:
  41bf5e:	4603      	mov	r3, r0

0041bf60 <.LVL258>:
    if (ret == DRBG_NEED_RESEED) {
  41bf60:	2803      	cmp	r0, #3
  41bf62:	d00a      	beq.n	41bf7a <.LBB126>

0041bf64 <.LVL259>:
        }
        else
            ret = DRBG_CONT_FAILURE;
    }

    if (ret == DRBG_SUCCESS) {
  41bf64:	b12b      	cbz	r3, 41bf72 <.LVL261>
        ret = 0;
    }
    else if (ret == DRBG_CONT_FAILURE) {
  41bf66:	2b04      	cmp	r3, #4
  41bf68:	d049      	beq.n	41bffe <.LBE130>

0041bf6a <.LVL260>:
        ret = DRBG_CONT_FIPS_E;
        rng->status = DRBG_CONT_FAILED;
    }
    else {
        ret = RNG_FAILURE_E;
        rng->status = DRBG_FAILED;
  41bf6a:	2302      	movs	r3, #2
  41bf6c:	733b      	strb	r3, [r7, #12]
        ret = RNG_FAILURE_E;
  41bf6e:	f06f 03c6 	mvn.w	r3, #198	; 0xc6

0041bf72 <.LVL261>:

#endif /* HAVE_HASHDRBG */
#endif /* CUSTOM_RAND_GENERATE_BLOCK */

    return ret;
}
  41bf72:	4618      	mov	r0, r3
  41bf74:	b025      	add	sp, #148	; 0x94

0041bf76 <.LCFI31>:
  41bf76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0041bf7a <.LBB126>:
        return MEMORY_E;
    }
#endif

    if (reseed) {
        ret = wc_RNG_HealthTest(1, entropyA, sizeof(entropyA),
  41bf7a:	2380      	movs	r3, #128	; 0x80
  41bf7c:	9302      	str	r3, [sp, #8]
  41bf7e:	ab04      	add	r3, sp, #16
  41bf80:	9301      	str	r3, [sp, #4]
  41bf82:	2320      	movs	r3, #32
  41bf84:	9300      	str	r3, [sp, #0]
  41bf86:	4b23      	ldr	r3, [pc, #140]	; (41c014 <.LVL284+0xc>)
  41bf88:	2230      	movs	r2, #48	; 0x30
  41bf8a:	4923      	ldr	r1, [pc, #140]	; (41c018 <.LVL284+0x10>)
  41bf8c:	2001      	movs	r0, #1

0041bf8e <.LVL263>:
  41bf8e:	f002 fb11 	bl	41e5b4 <wc_RNG_HealthTest>

0041bf92 <.LVL264>:
                                reseedEntropyA, sizeof(reseedEntropyA),
                                check, RNG_HEALTH_TEST_CHECK_SIZE);
        if (ret == 0) {
  41bf92:	4605      	mov	r5, r0
  41bf94:	bb98      	cbnz	r0, 41bffe <.LBE130>
  41bf96:	f10d 040f 	add.w	r4, sp, #15
  41bf9a:	4e20      	ldr	r6, [pc, #128]	; (41c01c <.LVL284+0x14>)
  41bf9c:	f10d 018f 	add.w	r1, sp, #143	; 0x8f

0041bfa0 <.LBB128>:
        compareSum |= a[i] ^ b[i];
  41bfa0:	f814 3f01 	ldrb.w	r3, [r4, #1]!

0041bfa4 <.LVL266>:
  41bfa4:	f816 2f01 	ldrb.w	r2, [r6, #1]!
  41bfa8:	4053      	eors	r3, r2
  41bfaa:	431d      	orrs	r5, r3

0041bfac <.LVL267>:
    for (i = 0; i < length; i++) {
  41bfac:	42a1      	cmp	r1, r4
  41bfae:	d1f7      	bne.n	41bfa0 <.LBB128>

0041bfb0 <.LBE128>:
            if (ConstantCompare(check, outputA,
  41bfb0:	bb2d      	cbnz	r5, 41bffe <.LBE130>

0041bfb2 <.LBB130>:

int wc_GenerateSeed(OS_Seed* os, byte* output, word32 sz)
{
    extern int same70_RNG_GenerateSeed(byte* output, word32 sz);

    return same70_RNG_GenerateSeed(output, sz);
  41bfb2:	2120      	movs	r1, #32
  41bfb4:	a804      	add	r0, sp, #16

0041bfb6 <.LVL270>:
  41bfb6:	f005 ff0b 	bl	421dd0 <.LFE11>

0041bfba <.LBE131>:
            if (wc_GenerateSeed(&rng->seed, entropy, ENTROPY_SZ) == 0 &&
  41bfba:	b148      	cbz	r0, 41bfd0 <.LBE133>
                ret = DRBG_FAILURE;
  41bfbc:	2302      	movs	r3, #2

0041bfbe <.LBB133>:
    volatile byte* z = (volatile byte*)mem;
  41bfbe:	aa04      	add	r2, sp, #16

0041bfc0 <.LVL273>:
    while (len--) *z++ = 0;
  41bfc0:	2400      	movs	r4, #0
  41bfc2:	a80c      	add	r0, sp, #48	; 0x30

0041bfc4 <.LVL274>:
  41bfc4:	1c51      	adds	r1, r2, #1

0041bfc6 <.LVL275>:
  41bfc6:	7014      	strb	r4, [r2, #0]

0041bfc8 <.LVL276>:
  41bfc8:	460a      	mov	r2, r1
  41bfca:	4281      	cmp	r1, r0
  41bfcc:	d1fa      	bne.n	41bfc4 <.LVL274>
  41bfce:	e7c9      	b.n	41bf64 <.LVL259>

0041bfd0 <.LBE133>:
                Hash_DRBG_Reseed(rng->drbg, entropy, ENTROPY_SZ)
  41bfd0:	2220      	movs	r2, #32
  41bfd2:	a904      	add	r1, sp, #16
  41bfd4:	68b8      	ldr	r0, [r7, #8]
  41bfd6:	f002 fcf5 	bl	41e9c4 <.LFE17>

0041bfda <.LVL278>:
            if (wc_GenerateSeed(&rng->seed, entropy, ENTROPY_SZ) == 0 &&
  41bfda:	b108      	cbz	r0, 41bfe0 <.LVL278+0x6>
                ret = DRBG_FAILURE;
  41bfdc:	2302      	movs	r3, #2
  41bfde:	e7ee      	b.n	41bfbe <.LBB133>
                ret = Hash_DRBG_Generate(rng->drbg, NULL, 0);
  41bfe0:	2200      	movs	r2, #0
  41bfe2:	4611      	mov	r1, r2
  41bfe4:	68b8      	ldr	r0, [r7, #8]
  41bfe6:	f7fa ff45 	bl	416e74 <.LFE0>

0041bfea <.LVL279>:
                if (ret == DRBG_SUCCESS)
  41bfea:	4603      	mov	r3, r0
  41bfec:	2800      	cmp	r0, #0
  41bfee:	d1e6      	bne.n	41bfbe <.LBB133>
                    ret = Hash_DRBG_Generate(rng->drbg, output, sz);
  41bff0:	4642      	mov	r2, r8
  41bff2:	4649      	mov	r1, r9
  41bff4:	68b8      	ldr	r0, [r7, #8]

0041bff6 <.LVL280>:
  41bff6:	f7fa ff3d 	bl	416e74 <.LFE0>

0041bffa <.LVL281>:
  41bffa:	4603      	mov	r3, r0

0041bffc <.LVL282>:
  41bffc:	e7df      	b.n	41bfbe <.LBB133>

0041bffe <.LBE130>:
        rng->status = DRBG_CONT_FAILED;
  41bffe:	2303      	movs	r3, #3
  41c000:	733b      	strb	r3, [r7, #12]
        ret = DRBG_CONT_FIPS_E;
  41c002:	f06f 03d0 	mvn.w	r3, #208	; 0xd0
  41c006:	e7b4      	b.n	41bf72 <.LVL261>

0041c008 <.LVL284>:
        return BAD_FUNC_ARG;
  41c008:	f06f 03ac 	mvn.w	r3, #172	; 0xac
  41c00c:	e7b1      	b.n	41bf72 <.LVL261>
        return RNG_FAILURE_E;
  41c00e:	f06f 03c6 	mvn.w	r3, #198	; 0xc6
  41c012:	e7ae      	b.n	41bf72 <.LVL261>
  41c014:	00421c9c 	.word	0x00421c9c
  41c018:	004216f8 	.word	0x004216f8
  41c01c:	0041f19f 	.word	0x0041f19f

Disassembly of section .text.des3_test%128:

0041c020 <des3_test>:
{
  41c020:	b570      	push	{r4, r5, r6, lr}

0041c022 <.LCFI53>:
  41c022:	f5ad 7d74 	sub.w	sp, sp, #976	; 0x3d0

0041c026 <.LCFI54>:
    const byte vector[] = { /* "Now is the time for all " w/o trailing 0 */
  41c026:	4c37      	ldr	r4, [pc, #220]	; (41c104 <.LCFI55+0x2>)
  41c028:	adee      	add	r5, sp, #952	; 0x3b8
  41c02a:	f8d4 0830 	ldr.w	r0, [r4, #2096]	; 0x830
  41c02e:	f8d4 1834 	ldr.w	r1, [r4, #2100]	; 0x834
  41c032:	f8d4 2838 	ldr.w	r2, [r4, #2104]	; 0x838
  41c036:	f8d4 383c 	ldr.w	r3, [r4, #2108]	; 0x83c
  41c03a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  41c03c:	f8d4 0840 	ldr.w	r0, [r4, #2112]	; 0x840
  41c040:	f8d4 1844 	ldr.w	r1, [r4, #2116]	; 0x844
  41c044:	c503      	stmia	r5!, {r0, r1}
    const byte key3[] =
  41c046:	ad0c      	add	r5, sp, #48	; 0x30
  41c048:	f8d4 0848 	ldr.w	r0, [r4, #2120]	; 0x848
  41c04c:	f8d4 184c 	ldr.w	r1, [r4, #2124]	; 0x84c
  41c050:	f8d4 2850 	ldr.w	r2, [r4, #2128]	; 0x850
  41c054:	f8d4 3854 	ldr.w	r3, [r4, #2132]	; 0x854
  41c058:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  41c05a:	f8d4 0858 	ldr.w	r0, [r4, #2136]	; 0x858
  41c05e:	f8d4 185c 	ldr.w	r1, [r4, #2140]	; 0x85c
  41c062:	c503      	stmia	r5!, {r0, r1}
    const byte iv3[] =
  41c064:	ad06      	add	r5, sp, #24
  41c066:	f8d4 0860 	ldr.w	r0, [r4, #2144]	; 0x860
  41c06a:	f8d4 1864 	ldr.w	r1, [r4, #2148]	; 0x864
  41c06e:	f8d4 2868 	ldr.w	r2, [r4, #2152]	; 0x868
  41c072:	f8d4 386c 	ldr.w	r3, [r4, #2156]	; 0x86c
  41c076:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  41c078:	f8d4 0870 	ldr.w	r0, [r4, #2160]	; 0x870
  41c07c:	f8d4 1874 	ldr.w	r1, [r4, #2164]	; 0x874
  41c080:	c503      	stmia	r5!, {r0, r1}
    const byte verify3[] =
  41c082:	466d      	mov	r5, sp
  41c084:	f8d4 0878 	ldr.w	r0, [r4, #2168]	; 0x878
  41c088:	f8d4 187c 	ldr.w	r1, [r4, #2172]	; 0x87c
  41c08c:	f8d4 2880 	ldr.w	r2, [r4, #2176]	; 0x880
  41c090:	f8d4 3884 	ldr.w	r3, [r4, #2180]	; 0x884
  41c094:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  41c096:	f8d4 0888 	ldr.w	r0, [r4, #2184]	; 0x888
  41c09a:	f8d4 188c 	ldr.w	r1, [r4, #2188]	; 0x88c
  41c09e:	c503      	stmia	r5!, {r0, r1}
    appData.des3_test_result = numSubTests;
  41c0a0:	2202      	movs	r2, #2
  41c0a2:	4b19      	ldr	r3, [pc, #100]	; (41c108 <.LCFI55+0x6>)
  41c0a4:	631a      	str	r2, [r3, #48]	; 0x30
    CRYPT_TDES_KeySet(&enc, key3, iv3, DES_ENCRYPTION);
  41c0a6:	2300      	movs	r3, #0
  41c0a8:	aa06      	add	r2, sp, #24
  41c0aa:	a90c      	add	r1, sp, #48	; 0x30
  41c0ac:	a87a      	add	r0, sp, #488	; 0x1e8
  41c0ae:	f005 ffd5 	bl	42205c <.LFE25>

0041c0b2 <.LVL146>:
    CRYPT_TDES_KeySet(&dec, key3, iv3, DES_DECRYPTION);
  41c0b2:	2301      	movs	r3, #1
  41c0b4:	aa06      	add	r2, sp, #24
  41c0b6:	a90c      	add	r1, sp, #48	; 0x30
  41c0b8:	a812      	add	r0, sp, #72	; 0x48
  41c0ba:	f005 ffcf 	bl	42205c <.LFE25>

0041c0be <.LVL147>:
    CRYPT_TDES_CBC_Encrypt(&enc, cipher, vector, sizeof(vector));
  41c0be:	2318      	movs	r3, #24
  41c0c0:	aaee      	add	r2, sp, #952	; 0x3b8
  41c0c2:	a9e2      	add	r1, sp, #904	; 0x388
  41c0c4:	a87a      	add	r0, sp, #488	; 0x1e8
  41c0c6:	f005 fe29 	bl	421d1c <.LFE150>

0041c0ca <.LVL148>:
    CRYPT_TDES_CBC_Decrypt(&dec, plain, verify3, sizeof(verify3));
  41c0ca:	2318      	movs	r3, #24
  41c0cc:	466a      	mov	r2, sp
  41c0ce:	a9e8      	add	r1, sp, #928	; 0x3a0
  41c0d0:	a812      	add	r0, sp, #72	; 0x48
  41c0d2:	f005 fe32 	bl	421d3a <.LFE28>

0041c0d6 <.LVL149>:
    if (!(memcmp(plain, vector, sizeof(plain))))
  41c0d6:	2218      	movs	r2, #24
  41c0d8:	a9ee      	add	r1, sp, #952	; 0x3b8
  41c0da:	a8e8      	add	r0, sp, #928	; 0x3a0
  41c0dc:	f004 f9c8 	bl	420470 <memcmp>

0041c0e0 <.LVL150>:
  41c0e0:	b918      	cbnz	r0, 41c0ea <.LVL150+0xa>
        appData.des3_test_result--;
  41c0e2:	4a09      	ldr	r2, [pc, #36]	; (41c108 <.LCFI55+0x6>)
  41c0e4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  41c0e6:	3b01      	subs	r3, #1
  41c0e8:	6313      	str	r3, [r2, #48]	; 0x30
    if (!(memcmp(cipher, verify3, sizeof(cipher))))
  41c0ea:	2218      	movs	r2, #24
  41c0ec:	4669      	mov	r1, sp
  41c0ee:	a8e2      	add	r0, sp, #904	; 0x388
  41c0f0:	f004 f9be 	bl	420470 <memcmp>

0041c0f4 <.LVL151>:
  41c0f4:	b918      	cbnz	r0, 41c0fe <.LVL151+0xa>
        appData.des3_test_result--;
  41c0f6:	4a04      	ldr	r2, [pc, #16]	; (41c108 <.LCFI55+0x6>)
  41c0f8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  41c0fa:	3b01      	subs	r3, #1
  41c0fc:	6313      	str	r3, [r2, #48]	; 0x30
}
  41c0fe:	f50d 7d74 	add.w	sp, sp, #976	; 0x3d0

0041c102 <.LCFI55>:
  41c102:	bd70      	pop	{r4, r5, r6, pc}
  41c104:	0040da54 	.word	0x0040da54
  41c108:	2040d534 	.word	0x2040d534

Disassembly of section .text.wc_Sha512Update%129:

0041c10c <wc_Sha512Update>:
{
  41c10c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

0041c110 <.LCFI6>:
    if (sha512 == NULL || (data == NULL && len > 0)) {
  41c110:	2800      	cmp	r0, #0
  41c112:	d065      	beq.n	41c1e0 <.LVL43>
  41c114:	4689      	mov	r9, r1
  41c116:	4615      	mov	r5, r2
  41c118:	4680      	mov	r8, r0
  41c11a:	b909      	cbnz	r1, 41c120 <.LBB700>
  41c11c:	2a00      	cmp	r2, #0
  41c11e:	d162      	bne.n	41c1e6 <.LVL43+0x6>

0041c120 <.LBB700>:
    byte* local = (byte*)sha512->buffer;
  41c120:	f108 0b58 	add.w	fp, r8, #88	; 0x58

0041c124 <.LVL25>:
    if (sha512->buffLen >= SHA512_BLOCK_SIZE)
  41c124:	f8d8 3000 	ldr.w	r3, [r8]
  41c128:	2b7f      	cmp	r3, #127	; 0x7f
  41c12a:	d85f      	bhi.n	41c1ec <.LBB719>
    while (len) {
  41c12c:	2d00      	cmp	r5, #0
  41c12e:	d060      	beq.n	41c1f2 <.LBB719+0x6>
  41c130:	f108 0ad0 	add.w	sl, r8, #208	; 0xd0
  41c134:	e004      	b.n	41c140 <.LBB717>

0041c136 <.LBB702>:
            sha512->buffLen = 0;
  41c136:	2300      	movs	r3, #0
  41c138:	f8c8 3000 	str.w	r3, [r8]

0041c13c <.LBE702>:
    while (len) {
  41c13c:	2d00      	cmp	r5, #0
  41c13e:	d04b      	beq.n	41c1d8 <.LBE715>

0041c140 <.LBB717>:
        word32 add = min(len, SHA512_BLOCK_SIZE - sha512->buffLen);
  41c140:	f8d8 0000 	ldr.w	r0, [r8]

0041c144 <.LVL28>:
  41c144:	f1c0 0480 	rsb	r4, r0, #128	; 0x80

0041c148 <.LBB703>:
    #if defined(HAVE_FIPS) && !defined(min) /* so ifdef check passes */
        #define min min
    #endif
    STATIC INLINE word32 min(word32 a, word32 b)
    {
        return a > b ? b : a;
  41c148:	42ac      	cmp	r4, r5
  41c14a:	bf28      	it	cs
  41c14c:	462c      	movcs	r4, r5

0041c14e <.LBE703>:
        XMEMCPY(&local[sha512->buffLen], data, add);
  41c14e:	4622      	mov	r2, r4
  41c150:	4649      	mov	r1, r9
  41c152:	4458      	add	r0, fp
  41c154:	f7fe fc16 	bl	41a984 <.LFE14>

0041c158 <.LVL31>:
        sha512->buffLen += add;
  41c158:	f8d8 3000 	ldr.w	r3, [r8]
  41c15c:	4423      	add	r3, r4
  41c15e:	f8c8 3000 	str.w	r3, [r8]
        data            += add;
  41c162:	44a1      	add	r9, r4
        len             -= add;
  41c164:	1b2d      	subs	r5, r5, r4
        if (sha512->buffLen == SHA512_BLOCK_SIZE) {
  41c166:	2b80      	cmp	r3, #128	; 0x80
  41c168:	d1e8      	bne.n	41c13c <.LBE702>
  41c16a:	f108 0250 	add.w	r2, r8, #80	; 0x50

0041c16e <.LBB705>:
        out[i] = ByteReverseWord64(in[i]);
  41c16e:	6893      	ldr	r3, [r2, #8]
  41c170:	68d1      	ldr	r1, [r2, #12]

0041c172 <.LBB707>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  41c172:	0a18      	lsrs	r0, r3, #8
  41c174:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  41c178:	021b      	lsls	r3, r3, #8
  41c17a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  41c17e:	4303      	orrs	r3, r0

0041c180 <.LBE709>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  41c180:	ea4f 4733 	mov.w	r7, r3, ror #16
  41c184:	2600      	movs	r6, #0

0041c186 <.LBB711>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  41c186:	0a0b      	lsrs	r3, r1, #8
  41c188:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  41c18c:	0209      	lsls	r1, r1, #8
  41c18e:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  41c192:	430b      	orrs	r3, r1

0041c194 <.LBB713>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  41c194:	ea4f 4333 	mov.w	r3, r3, ror #16

0041c198 <.LBE711>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  41c198:	ea46 0003 	orr.w	r0, r6, r3
  41c19c:	4639      	mov	r1, r7

0041c19e <.LBE707>:
        out[i] = ByteReverseWord64(in[i]);
  41c19e:	e9e2 0102 	strd	r0, r1, [r2, #8]!
    for (i = 0; i < count; i++)
  41c1a2:	4592      	cmp	sl, r2
  41c1a4:	d1e3      	bne.n	41c16e <.LBB705>

0041c1a6 <.LBE705>:
            ret = Transform(sha512);
  41c1a6:	4640      	mov	r0, r8
  41c1a8:	f7e3 fff4 	bl	400194 <_etext>

0041c1ac <.LVL35>:
            if (ret != 0)
  41c1ac:	4603      	mov	r3, r0
  41c1ae:	b9a0      	cbnz	r0, 41c1da <.LBE700>

0041c1b0 <.LBB715>:
    word64 tmp = sha512->loLen;
  41c1b0:	e9d8 2302 	ldrd	r2, r3, [r8, #8]

0041c1b4 <.LVL37>:
    if ( (sha512->loLen += len) < tmp)
  41c1b4:	f112 0080 	adds.w	r0, r2, #128	; 0x80

0041c1b8 <.LVL38>:
  41c1b8:	f143 0100 	adc.w	r1, r3, #0
  41c1bc:	e9c8 0102 	strd	r0, r1, [r8, #8]
  41c1c0:	4299      	cmp	r1, r3
  41c1c2:	bf08      	it	eq
  41c1c4:	4290      	cmpeq	r0, r2
  41c1c6:	d2b6      	bcs.n	41c136 <.LBB702>
        sha512->hiLen++;                       /* carry low to high */
  41c1c8:	e9d8 2304 	ldrd	r2, r3, [r8, #16]

0041c1cc <.LVL39>:
  41c1cc:	3201      	adds	r2, #1
  41c1ce:	f143 0300 	adc.w	r3, r3, #0

0041c1d2 <.LVL40>:
  41c1d2:	e9c8 2304 	strd	r2, r3, [r8, #16]
  41c1d6:	e7ae      	b.n	41c136 <.LBB702>

0041c1d8 <.LBE715>:
    while (len) {
  41c1d8:	2300      	movs	r3, #0

0041c1da <.LBE700>:
}
  41c1da:	4618      	mov	r0, r3
  41c1dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0041c1e0 <.LVL43>:
        return BAD_FUNC_ARG;
  41c1e0:	f06f 03ac 	mvn.w	r3, #172	; 0xac
  41c1e4:	e7f9      	b.n	41c1da <.LBE700>
  41c1e6:	f06f 03ac 	mvn.w	r3, #172	; 0xac
  41c1ea:	e7f6      	b.n	41c1da <.LBE700>

0041c1ec <.LBB719>:
        return BUFFER_E;
  41c1ec:	f06f 0383 	mvn.w	r3, #131	; 0x83
  41c1f0:	e7f3      	b.n	41c1da <.LBE700>
    while (len) {
  41c1f2:	2300      	movs	r3, #0
  41c1f4:	e7f1      	b.n	41c1da <.LBE700>

Disassembly of section .text.wc_Sha384Update%130:

0041c1f6 <wc_Sha384Update>:
{
  41c1f6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

0041c1fa <.LCFI13>:
    if (sha384 == NULL || (data == NULL && len > 0)) {
  41c1fa:	2800      	cmp	r0, #0
  41c1fc:	d065      	beq.n	41c2ca <.LVL102>
  41c1fe:	4689      	mov	r9, r1
  41c200:	4615      	mov	r5, r2
  41c202:	4680      	mov	r8, r0
  41c204:	b909      	cbnz	r1, 41c20a <.LBB821>
  41c206:	2a00      	cmp	r2, #0
  41c208:	d162      	bne.n	41c2d0 <.LVL102+0x6>

0041c20a <.LBB821>:
    byte* local = (byte*)sha512->buffer;
  41c20a:	f108 0b58 	add.w	fp, r8, #88	; 0x58

0041c20e <.LVL84>:
    if (sha512->buffLen >= SHA512_BLOCK_SIZE)
  41c20e:	f8d8 3000 	ldr.w	r3, [r8]
  41c212:	2b7f      	cmp	r3, #127	; 0x7f
  41c214:	d85f      	bhi.n	41c2d6 <.LBB840>
    while (len) {
  41c216:	2d00      	cmp	r5, #0
  41c218:	d060      	beq.n	41c2dc <.LBB840+0x6>
  41c21a:	f108 0ad0 	add.w	sl, r8, #208	; 0xd0
  41c21e:	e004      	b.n	41c22a <.LBB838>

0041c220 <.LBB823>:
            sha512->buffLen = 0;
  41c220:	2300      	movs	r3, #0
  41c222:	f8c8 3000 	str.w	r3, [r8]

0041c226 <.LBE823>:
    while (len) {
  41c226:	2d00      	cmp	r5, #0
  41c228:	d04b      	beq.n	41c2c2 <.LBE836>

0041c22a <.LBB838>:
        word32 add = min(len, SHA512_BLOCK_SIZE - sha512->buffLen);
  41c22a:	f8d8 0000 	ldr.w	r0, [r8]

0041c22e <.LVL87>:
  41c22e:	f1c0 0480 	rsb	r4, r0, #128	; 0x80

0041c232 <.LBB824>:
        return a > b ? b : a;
  41c232:	42ac      	cmp	r4, r5
  41c234:	bf28      	it	cs
  41c236:	462c      	movcs	r4, r5

0041c238 <.LBE824>:
        XMEMCPY(&local[sha512->buffLen], data, add);
  41c238:	4622      	mov	r2, r4
  41c23a:	4649      	mov	r1, r9
  41c23c:	4458      	add	r0, fp
  41c23e:	f7fe fba1 	bl	41a984 <.LFE14>

0041c242 <.LVL90>:
        sha512->buffLen += add;
  41c242:	f8d8 3000 	ldr.w	r3, [r8]
  41c246:	4423      	add	r3, r4
  41c248:	f8c8 3000 	str.w	r3, [r8]
        data            += add;
  41c24c:	44a1      	add	r9, r4
        len             -= add;
  41c24e:	1b2d      	subs	r5, r5, r4
        if (sha512->buffLen == SHA512_BLOCK_SIZE) {
  41c250:	2b80      	cmp	r3, #128	; 0x80
  41c252:	d1e8      	bne.n	41c226 <.LBE823>
  41c254:	f108 0250 	add.w	r2, r8, #80	; 0x50

0041c258 <.LBB826>:
        out[i] = ByteReverseWord64(in[i]);
  41c258:	6893      	ldr	r3, [r2, #8]
  41c25a:	68d1      	ldr	r1, [r2, #12]

0041c25c <.LBB828>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  41c25c:	0a18      	lsrs	r0, r3, #8
  41c25e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
  41c262:	021b      	lsls	r3, r3, #8
  41c264:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
  41c268:	4303      	orrs	r3, r0

0041c26a <.LBE830>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  41c26a:	ea4f 4733 	mov.w	r7, r3, ror #16
  41c26e:	2600      	movs	r6, #0

0041c270 <.LBB832>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  41c270:	0a0b      	lsrs	r3, r1, #8
  41c272:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  41c276:	0209      	lsls	r1, r1, #8
  41c278:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
  41c27c:	430b      	orrs	r3, r1

0041c27e <.LBB834>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  41c27e:	ea4f 4333 	mov.w	r3, r3, ror #16

0041c282 <.LBE832>:
	return (word64)(ByteReverseWord32((word32)value)) << 32 |
  41c282:	ea46 0003 	orr.w	r0, r6, r3
  41c286:	4639      	mov	r1, r7

0041c288 <.LBE828>:
        out[i] = ByteReverseWord64(in[i]);
  41c288:	e9e2 0102 	strd	r0, r1, [r2, #8]!
    for (i = 0; i < count; i++)
  41c28c:	4592      	cmp	sl, r2
  41c28e:	d1e3      	bne.n	41c258 <.LBB826>

0041c290 <.LBE826>:
            ret = Transform(sha512);
  41c290:	4640      	mov	r0, r8
  41c292:	f7e3 ff7f 	bl	400194 <_etext>

0041c296 <.LVL94>:
            if (ret != 0)
  41c296:	4603      	mov	r3, r0
  41c298:	b9a0      	cbnz	r0, 41c2c4 <.LBE821>

0041c29a <.LBB836>:
    word64 tmp = sha512->loLen;
  41c29a:	e9d8 2302 	ldrd	r2, r3, [r8, #8]

0041c29e <.LVL96>:
    if ( (sha512->loLen += len) < tmp)
  41c29e:	f112 0080 	adds.w	r0, r2, #128	; 0x80

0041c2a2 <.LVL97>:
  41c2a2:	f143 0100 	adc.w	r1, r3, #0
  41c2a6:	e9c8 0102 	strd	r0, r1, [r8, #8]
  41c2aa:	4299      	cmp	r1, r3
  41c2ac:	bf08      	it	eq
  41c2ae:	4290      	cmpeq	r0, r2
  41c2b0:	d2b6      	bcs.n	41c220 <.LBB823>
        sha512->hiLen++;                       /* carry low to high */
  41c2b2:	e9d8 2304 	ldrd	r2, r3, [r8, #16]

0041c2b6 <.LVL98>:
  41c2b6:	3201      	adds	r2, #1
  41c2b8:	f143 0300 	adc.w	r3, r3, #0

0041c2bc <.LVL99>:
  41c2bc:	e9c8 2304 	strd	r2, r3, [r8, #16]
  41c2c0:	e7ae      	b.n	41c220 <.LBB823>

0041c2c2 <.LBE836>:
    while (len) {
  41c2c2:	2300      	movs	r3, #0

0041c2c4 <.LBE821>:
}
  41c2c4:	4618      	mov	r0, r3
  41c2c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0041c2ca <.LVL102>:
        return BAD_FUNC_ARG;
  41c2ca:	f06f 03ac 	mvn.w	r3, #172	; 0xac
  41c2ce:	e7f9      	b.n	41c2c4 <.LBE821>
  41c2d0:	f06f 03ac 	mvn.w	r3, #172	; 0xac
  41c2d4:	e7f6      	b.n	41c2c4 <.LBE821>

0041c2d6 <.LBB840>:
        return BUFFER_E;
  41c2d6:	f06f 0383 	mvn.w	r3, #131	; 0x83
  41c2da:	e7f3      	b.n	41c2c4 <.LBE821>
    while (len) {
  41c2dc:	2300      	movs	r3, #0
  41c2de:	e7f1      	b.n	41c2c4 <.LBE821>

Disassembly of section .text.s_fp_sub%131:

0041c2e0 <s_fp_sub>:
{
  41c2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0041c2e4 <.LCFI1>:
  41c2e4:	b085      	sub	sp, #20

0041c2e6 <.LCFI2>:
  41c2e6:	9201      	str	r2, [sp, #4]
  oldused  = c->used;
  41c2e8:	6813      	ldr	r3, [r2, #0]
  41c2ea:	9302      	str	r3, [sp, #8]

0041c2ec <.LVL20>:
  oldbused = b->used;
  41c2ec:	f8d1 c000 	ldr.w	ip, [r1]
  c->used  = a->used;
  41c2f0:	6803      	ldr	r3, [r0, #0]

0041c2f2 <.LVL22>:
  41c2f2:	461c      	mov	r4, r3
  41c2f4:	9303      	str	r3, [sp, #12]
  41c2f6:	6014      	str	r4, [r2, #0]

0041c2f8 <.LVL23>:
  for (x = 0; x < oldbused; x++) {
  41c2f8:	f1bc 0f00 	cmp.w	ip, #0
  41c2fc:	dd4a      	ble.n	41c394 <.LVL41>
  41c2fe:	f100 0e04 	add.w	lr, r0, #4
  41c302:	1d0e      	adds	r6, r1, #4
  41c304:	1d17      	adds	r7, r2, #4
  41c306:	2200      	movs	r2, #0

0041c308 <.LVL24>:
  41c308:	2300      	movs	r3, #0
  41c30a:	2100      	movs	r1, #0

0041c30c <.LVL25>:
     t         = ((fp_word)a->dp[x]) - (((fp_word)b->dp[x]) + t);
  41c30c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
  41c310:	2500      	movs	r5, #0
  41c312:	1aa2      	subs	r2, r4, r2

0041c314 <.LVL26>:
  41c314:	eb65 0303 	sbc.w	r3, r5, r3
  41c318:	f856 4f04 	ldr.w	r4, [r6, #4]!
  41c31c:	1b12      	subs	r2, r2, r4
  41c31e:	f163 0300 	sbc.w	r3, r3, #0

0041c322 <.LVL27>:
     c->dp[x]  = (fp_digit)t;
  41c322:	f847 2f04 	str.w	r2, [r7, #4]!
     t         = (t >> DIGIT_BIT)&1;
  41c326:	f003 0201 	and.w	r2, r3, #1

0041c32a <.LVL28>:
  41c32a:	2300      	movs	r3, #0

0041c32c <.LVL29>:
  for (x = 0; x < oldbused; x++) {
  41c32c:	3101      	adds	r1, #1
  41c32e:	458c      	cmp	ip, r1
  41c330:	d1ec      	bne.n	41c30c <.LVL25>
  for (; x < a->used; x++) {
  41c332:	6804      	ldr	r4, [r0, #0]
  41c334:	42a1      	cmp	r1, r4
  41c336:	da13      	bge.n	41c360 <.LVL35+0x8>
  41c338:	008e      	lsls	r6, r1, #2
  41c33a:	3604      	adds	r6, #4
  41c33c:	1987      	adds	r7, r0, r6
  41c33e:	9c01      	ldr	r4, [sp, #4]
  41c340:	4426      	add	r6, r4
     t         = ((fp_word)a->dp[x]) - t;
  41c342:	f857 4f04 	ldr.w	r4, [r7, #4]!
  41c346:	2500      	movs	r5, #0
  41c348:	1aa2      	subs	r2, r4, r2

0041c34a <.LVL32>:
  41c34a:	eb65 0303 	sbc.w	r3, r5, r3

0041c34e <.LVL33>:
     c->dp[x]  = (fp_digit)t;
  41c34e:	f846 2f04 	str.w	r2, [r6, #4]!
     t         = (t >> DIGIT_BIT)&1;
  41c352:	f003 0201 	and.w	r2, r3, #1

0041c356 <.LVL34>:
  41c356:	2300      	movs	r3, #0

0041c358 <.LVL35>:
  for (; x < a->used; x++) {
  41c358:	3101      	adds	r1, #1
  41c35a:	6804      	ldr	r4, [r0, #0]
  41c35c:	428c      	cmp	r4, r1
  41c35e:	dcf0      	bgt.n	41c342 <.LVL29+0x16>
  for (; x < oldused; x++) {
  41c360:	9802      	ldr	r0, [sp, #8]

0041c362 <.LVL37>:
  41c362:	4288      	cmp	r0, r1
  41c364:	dd09      	ble.n	41c37a <.LVL38+0xa>
  41c366:	9b01      	ldr	r3, [sp, #4]
  41c368:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  41c36c:	3304      	adds	r3, #4
     c->dp[x] = 0;
  41c36e:	2200      	movs	r2, #0

0041c370 <.LVL38>:
  41c370:	f843 2f04 	str.w	r2, [r3, #4]!
  for (; x < oldused; x++) {
  41c374:	3101      	adds	r1, #1
  41c376:	4288      	cmp	r0, r1
  41c378:	d1fa      	bne.n	41c370 <.LVL38>
  fp_clamp(c);
  41c37a:	9903      	ldr	r1, [sp, #12]

0041c37c <.LVL40>:
  41c37c:	b301      	cbz	r1, 41c3c0 <.LCFI4+0x4>
  41c37e:	460a      	mov	r2, r1
  41c380:	1e4b      	subs	r3, r1, #1
  41c382:	3201      	adds	r2, #1
  41c384:	9c01      	ldr	r4, [sp, #4]
  41c386:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  41c38a:	b982      	cbnz	r2, 41c3ae <.LVL44+0x12>
  41c38c:	eb04 0281 	add.w	r2, r4, r1, lsl #2
  41c390:	3204      	adds	r2, #4
  41c392:	e004      	b.n	41c39e <.LVL44+0x2>

0041c394 <.LVL41>:
  t       = 0;
  41c394:	2200      	movs	r2, #0

0041c396 <.LVL42>:
  41c396:	2300      	movs	r3, #0
  for (x = 0; x < oldbused; x++) {
  41c398:	2100      	movs	r1, #0

0041c39a <.LVL43>:
  41c39a:	e7ca      	b.n	41c332 <.LVL29+0x6>

0041c39c <.LVL44>:
  fp_clamp(c);
  41c39c:	4603      	mov	r3, r0
  41c39e:	b16b      	cbz	r3, 41c3bc <.LCFI4>
  41c3a0:	1e58      	subs	r0, r3, #1
  41c3a2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  41c3a6:	2900      	cmp	r1, #0
  41c3a8:	d0f8      	beq.n	41c39c <.LVL44>
  41c3aa:	9a01      	ldr	r2, [sp, #4]
  41c3ac:	6013      	str	r3, [r2, #0]
  41c3ae:	9b01      	ldr	r3, [sp, #4]
  41c3b0:	685b      	ldr	r3, [r3, #4]
  41c3b2:	9a01      	ldr	r2, [sp, #4]
  41c3b4:	6053      	str	r3, [r2, #4]
}
  41c3b6:	b005      	add	sp, #20

0041c3b8 <.LCFI3>:
  41c3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0041c3bc <.LCFI4>:
  41c3bc:	9a01      	ldr	r2, [sp, #4]
  41c3be:	6013      	str	r3, [r2, #0]
  fp_clamp(c);
  41c3c0:	2300      	movs	r3, #0
  41c3c2:	e7f6      	b.n	41c3b2 <.LVL44+0x16>

Disassembly of section .text.wc_ecc_import_x963_ex%132:

0041c3c4 <wc_ecc_import_x963_ex>:

#ifdef HAVE_ECC_KEY_IMPORT
/* import public ECC key in ANSI X9.63 format */
int wc_ecc_import_x963_ex(const byte* in, word32 inLen, ecc_key* key,
                          int curve_id)
{
  41c3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0041c3c8 <.LCFI118>:
  41c3c8:	b083      	sub	sp, #12

0041c3ca <.LCFI119>:
    int err = MP_OKAY;
#ifndef WOLFSSL_ATECC508A
    int compressed = 0;
#endif /* !WOLFSSL_ATECC508A */

    if (in == NULL || key == NULL)
  41c3ca:	2800      	cmp	r0, #0
  41c3cc:	d03b      	beq.n	41c446 <.LVL1418>
  41c3ce:	4606      	mov	r6, r0
  41c3d0:	b3ca      	cbz	r2, 41c446 <.LVL1418>
        return BAD_FUNC_ARG;

    /* must be odd */
    if ((inLen & 1) == 0) {
  41c3d2:	f011 0f01 	tst.w	r1, #1
  41c3d6:	d039      	beq.n	41c44c <.LVL1418+0x6>
  41c3d8:	461f      	mov	r7, r3
  41c3da:	4614      	mov	r4, r2
  41c3dc:	460d      	mov	r5, r1

0041c3de <.LBB114>:
    key->state = ECC_STATE_NONE;
  41c3de:	2300      	movs	r3, #0

0041c3e0 <.LVL1400>:
  41c3e0:	6093      	str	r3, [r2, #8]

0041c3e2 <.LBE114>:
        alt_fp_init(key->pubkey.x);
        alt_fp_init(key->pubkey.y);
        alt_fp_init(key->pubkey.z);
        err = mp_init(&key->k);
    #else
        err = mp_init_multi(&key->k,
  41c3e2:	f502 6bd2 	add.w	fp, r2, #1680	; 0x690
                    key->pubkey.x, key->pubkey.y, key->pubkey.z, NULL, NULL);
  41c3e6:	f102 0818 	add.w	r8, r2, #24
  41c3ea:	f502 7910 	add.w	r9, r2, #576	; 0x240
  41c3ee:	f502 6a8d 	add.w	sl, r2, #1128	; 0x468
        err = mp_init_multi(&key->k,
  41c3f2:	9301      	str	r3, [sp, #4]
  41c3f4:	9300      	str	r3, [sp, #0]
  41c3f6:	4653      	mov	r3, sl
  41c3f8:	464a      	mov	r2, r9

0041c3fa <.LVL1402>:
  41c3fa:	4641      	mov	r1, r8

0041c3fc <.LVL1403>:
  41c3fc:	4658      	mov	r0, fp

0041c3fe <.LVL1404>:
  41c3fe:	f004 fec1 	bl	421184 <mp_init_multi>

0041c402 <.LVL1405>:
    #endif
    if (err != MP_OKAY)
  41c402:	bb30      	cbnz	r0, 41c452 <.LVL1419>
        return MEMORY_E;

    /* check for 4, 2, or 3 */
    if (in[0] != 0x04 && in[0] != 0x02 && in[0] != 0x03) {
  41c404:	7833      	ldrb	r3, [r6, #0]
  41c406:	3b02      	subs	r3, #2
  41c408:	b2db      	uxtb	r3, r3
  41c40a:	2b02      	cmp	r3, #2
  41c40c:	d924      	bls.n	41c458 <.LVL1421>

0041c40e <.LVL1406>:
        err = ASN_PARSE_E;
    }

    if (in[0] == 0x02 || in[0] == 0x03) {
  41c40e:	2b01      	cmp	r3, #1
  41c410:	d906      	bls.n	41c420 <.LCFI121>
        err = ASN_PARSE_E;
  41c412:	f06f 048b 	mvn.w	r4, #139	; 0x8b

0041c416 <.LVL1407>:
#ifdef WOLFSSL_VALIDATE_ECC_IMPORT
    if (err == MP_OKAY)
        err = wc_ecc_check_key(key);
#endif

    if (err != MP_OKAY) {
  41c416:	b94c      	cbnz	r4, 41c42c <.LVL1413>

0041c418 <.LVL1408>:
        mp_clear(&key->k);
    }
#endif /* WOLFSSL_ATECC508A */

    return err;
}
  41c418:	4620      	mov	r0, r4
  41c41a:	b003      	add	sp, #12

0041c41c <.LCFI120>:
  41c41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0041c420 <.LCFI121>:
  41c420:	f06f 04ad 	mvn.w	r4, #173	; 0xad

0041c424 <.LVL1410>:
  41c424:	e036      	b.n	41c494 <.LVL1432>

0041c426 <.LVL1411>:
    if (in[0] == 0x02 || in[0] == 0x03) {
  41c426:	f06f 04ad 	mvn.w	r4, #173	; 0xad

0041c42a <.LVL1412>:
  41c42a:	e033      	b.n	41c494 <.LVL1432>

0041c42c <.LVL1413>:
        mp_clear(key->pubkey.x);
  41c42c:	4640      	mov	r0, r8
  41c42e:	f005 ffcf 	bl	4223d0 <.LFE16>

0041c432 <.LVL1414>:
        mp_clear(key->pubkey.y);
  41c432:	4648      	mov	r0, r9
  41c434:	f005 ffcc 	bl	4223d0 <.LFE16>

0041c438 <.LVL1415>:
        mp_clear(key->pubkey.z);
  41c438:	4650      	mov	r0, sl
  41c43a:	f005 ffc9 	bl	4223d0 <.LFE16>

0041c43e <.LVL1416>:
        mp_clear(&key->k);
  41c43e:	4658      	mov	r0, fp
  41c440:	f005 ffc6 	bl	4223d0 <.LFE16>

0041c444 <.LVL1417>:
  41c444:	e7e8      	b.n	41c418 <.LVL1408>

0041c446 <.LVL1418>:
        return BAD_FUNC_ARG;
  41c446:	f06f 04ac 	mvn.w	r4, #172	; 0xac
  41c44a:	e7e5      	b.n	41c418 <.LVL1408>
        return ECC_BAD_ARG_E;
  41c44c:	f06f 04a9 	mvn.w	r4, #169	; 0xa9
  41c450:	e7e2      	b.n	41c418 <.LVL1408>

0041c452 <.LVL1419>:
        return MEMORY_E;
  41c452:	f06f 047c 	mvn.w	r4, #124	; 0x7c

0041c456 <.LVL1420>:
  41c456:	e7df      	b.n	41c418 <.LVL1408>

0041c458 <.LVL1421>:
    if (in[0] == 0x02 || in[0] == 0x03) {
  41c458:	2b01      	cmp	r3, #1
  41c45a:	d9e4      	bls.n	41c426 <.LVL1411>

0041c45c <.LBB116>:
        keysize = ((inLen-1)>>1);
  41c45c:	1e69      	subs	r1, r5, #1
        err = wc_ecc_set_curve(key, keysize, curve_id);
  41c45e:	463a      	mov	r2, r7
  41c460:	0849      	lsrs	r1, r1, #1

0041c462 <.LVL1423>:
  41c462:	4620      	mov	r0, r4
  41c464:	f003 fb9a 	bl	41fb9c <.LFE19>

0041c468 <.LVL1424>:
        key->type = ECC_PUBLICKEY;
  41c468:	2301      	movs	r3, #1
  41c46a:	6023      	str	r3, [r4, #0]

0041c46c <.LBE116>:
    if (err == MP_OKAY)
  41c46c:	4604      	mov	r4, r0

0041c46e <.LVL1425>:
  41c46e:	2800      	cmp	r0, #0
  41c470:	d1dc      	bne.n	41c42c <.LVL1413>
        err = mp_read_unsigned_bin(key->pubkey.x, (byte*)in+1, (inLen-1)>>1);
  41c472:	1e6a      	subs	r2, r5, #1
  41c474:	40da      	lsrs	r2, r3

0041c476 <.LVL1426>:
  41c476:	18f1      	adds	r1, r6, r3
  41c478:	4640      	mov	r0, r8

0041c47a <.LVL1427>:
  41c47a:	f005 ffff 	bl	42247c <.LFE72>

0041c47e <.LVL1428>:
    if (err == MP_OKAY && compressed == 0)
  41c47e:	4604      	mov	r4, r0
  41c480:	2800      	cmp	r0, #0
  41c482:	d1d3      	bne.n	41c42c <.LVL1413>
        err = mp_read_unsigned_bin(key->pubkey.y, (byte*)in+1+((inLen-1)>>1),
  41c484:	1e6a      	subs	r2, r5, #1
  41c486:	0852      	lsrs	r2, r2, #1

0041c488 <.LVL1429>:
  41c488:	1c51      	adds	r1, r2, #1
  41c48a:	4431      	add	r1, r6
  41c48c:	4648      	mov	r0, r9

0041c48e <.LVL1430>:
  41c48e:	f005 fff5 	bl	42247c <.LFE72>

0041c492 <.LVL1431>:
  41c492:	4604      	mov	r4, r0

0041c494 <.LVL1432>:
    if (err == MP_OKAY)
  41c494:	2c00      	cmp	r4, #0
  41c496:	d1c9      	bne.n	41c42c <.LVL1413>
        err = mp_set(key->pubkey.z, 1);
  41c498:	2101      	movs	r1, #1
  41c49a:	4650      	mov	r0, sl
  41c49c:	f006 f81b 	bl	4224d6 <.LFE113>

0041c4a0 <.LVL1433>:
  41c4a0:	4604      	mov	r4, r0

0041c4a2 <.LVL1434>:
  41c4a2:	e7b8      	b.n	41c416 <.LVL1407>

Disassembly of section .text.wc_ecc_shared_secret_gen%133:

0041c4a4 <wc_ecc_shared_secret_gen>:
{
  41c4a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

0041c4a8 <.LCFI57>:
  41c4a8:	f5ad 6d92 	sub.w	sp, sp, #1168	; 0x490

0041c4ac <.LCFI58>:
  41c4ac:	4605      	mov	r5, r0
  41c4ae:	460f      	mov	r7, r1
  41c4b0:	4690      	mov	r8, r2
  41c4b2:	461e      	mov	r6, r3
    DECLARE_CURVE_SPECS(2)
  41c4b4:	ac06      	add	r4, sp, #24
  41c4b6:	9405      	str	r4, [sp, #20]
  41c4b8:	2228      	movs	r2, #40	; 0x28

0041c4ba <.LVL792>:
  41c4ba:	2100      	movs	r1, #0

0041c4bc <.LVL793>:
  41c4bc:	4620      	mov	r0, r4

0041c4be <.LVL794>:
  41c4be:	f002 f82b 	bl	41e518 <.LFE14>

0041c4c2 <.LVL795>:
  41c4c2:	ab10      	add	r3, sp, #64	; 0x40
  41c4c4:	61a3      	str	r3, [r4, #24]
  41c4c6:	2302      	movs	r3, #2
  41c4c8:	61e3      	str	r3, [r4, #28]
    if (private_key == NULL || point == NULL || out == NULL ||
  41c4ca:	2d00      	cmp	r5, #0
  41c4cc:	d04f      	beq.n	41c56e <.LBE35>
  41c4ce:	2f00      	cmp	r7, #0
  41c4d0:	d04d      	beq.n	41c56e <.LBE35>
  41c4d2:	f1b8 0f00 	cmp.w	r8, #0
  41c4d6:	d04d      	beq.n	41c574 <.LBE35+0x6>
  41c4d8:	2e00      	cmp	r6, #0
  41c4da:	d04b      	beq.n	41c574 <.LBE35+0x6>
    err = wc_ecc_curve_load(private_key->dp, &curve,
  41c4dc:	2203      	movs	r2, #3
  41c4de:	a905      	add	r1, sp, #20
  41c4e0:	6928      	ldr	r0, [r5, #16]
  41c4e2:	f000 ff67 	bl	41d3b4 <.LFE172>

0041c4e6 <.LVL796>:
    if (err != MP_OKAY)
  41c4e6:	4604      	mov	r4, r0
  41c4e8:	b120      	cbz	r0, 41c4f4 <.LCFI60>

0041c4ea <.LVL797>:
}
  41c4ea:	4620      	mov	r0, r4
  41c4ec:	f50d 6d92 	add.w	sp, sp, #1168	; 0x490

0041c4f0 <.LCFI59>:
  41c4f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0041c4f4 <.LCFI60>:
        err = wc_ecc_shared_secret_gen_sync(private_key, point,
  41c4f4:	f8dd a014 	ldr.w	sl, [sp, #20]

0041c4f8 <.LBB29>:
    mp_int* k = &private_key->k;
  41c4f8:	f505 64d2 	add.w	r4, r5, #1680	; 0x690

0041c4fc <.LVL800>:
    result = wc_ecc_new_point_h(private_key->heap);
  41c4fc:	6968      	ldr	r0, [r5, #20]

0041c4fe <.LVL801>:
  41c4fe:	f004 fd21 	bl	420f44 <.LBE32>

0041c502 <.LVL802>:
    if (result == NULL) {
  41c502:	4681      	mov	r9, r0
  41c504:	b380      	cbz	r0, 41c568 <.LVL819>
    err = wc_ecc_mulmod_ex(k, point, result,
  41c506:	f8da 3008 	ldr.w	r3, [sl, #8]
  41c50a:	696a      	ldr	r2, [r5, #20]
  41c50c:	9202      	str	r2, [sp, #8]
  41c50e:	2201      	movs	r2, #1
  41c510:	9201      	str	r2, [sp, #4]
  41c512:	f8da 2004 	ldr.w	r2, [sl, #4]
  41c516:	9200      	str	r2, [sp, #0]
  41c518:	4602      	mov	r2, r0
  41c51a:	4639      	mov	r1, r7
  41c51c:	4620      	mov	r0, r4

0041c51e <.LVL803>:
  41c51e:	f7f8 f841 	bl	4145a4 <.LFE15>

0041c522 <.LVL804>:
    if (err == MP_OKAY) {
  41c522:	4604      	mov	r4, r0

0041c524 <.LVL805>:
  41c524:	b148      	cbz	r0, 41c53a <.LBB35>
    word32 x = 0;
  41c526:	2700      	movs	r7, #0

0041c528 <.LVL806>:
    *outlen = x;
  41c528:	6037      	str	r7, [r6, #0]
    wc_ecc_del_point_h(result, private_key->heap);
  41c52a:	6969      	ldr	r1, [r5, #20]
  41c52c:	4648      	mov	r0, r9
  41c52e:	f000 f895 	bl	41c65c <.LFE22>

0041c532 <.LBB33>:
    _wc_ecc_curve_free(curve);
  41c532:	9805      	ldr	r0, [sp, #20]
  41c534:	f003 fc46 	bl	41fdc4 <.LFE46>

0041c538 <.LVL808>:
  41c538:	e7d7      	b.n	41c4ea <.LVL797>

0041c53a <.LBB35>:
        x = mp_unsigned_bin_size(curve->prime);
  41c53a:	f8da 0004 	ldr.w	r0, [sl, #4]

0041c53e <.LVL810>:
  41c53e:	f006 f80d 	bl	42255c <.LFE82>

0041c542 <.LVL811>:
  41c542:	4607      	mov	r7, r0

0041c544 <.LVL812>:
        if (*outlen < x) {
  41c544:	6833      	ldr	r3, [r6, #0]
  41c546:	4298      	cmp	r0, r3
  41c548:	d817      	bhi.n	41c57a <.LBB36>

0041c54a <.LVL813>:
        XMEMSET(out, 0, x);
  41c54a:	4602      	mov	r2, r0
  41c54c:	2100      	movs	r1, #0
  41c54e:	4640      	mov	r0, r8

0041c550 <.LVL814>:
  41c550:	f001 ffe2 	bl	41e518 <.LFE14>

0041c554 <.LVL815>:
                                 (x - mp_unsigned_bin_size(result->x)));
  41c554:	4648      	mov	r0, r9
  41c556:	f006 f801 	bl	42255c <.LFE82>

0041c55a <.LVL816>:
  41c55a:	1a39      	subs	r1, r7, r0
        err = mp_to_unsigned_bin(result->x,out +
  41c55c:	4441      	add	r1, r8
  41c55e:	4648      	mov	r0, r9
  41c560:	f005 ff96 	bl	422490 <.LFE73>

0041c564 <.LVL817>:
  41c564:	4604      	mov	r4, r0

0041c566 <.LVL818>:
  41c566:	e7df      	b.n	41c528 <.LVL806>

0041c568 <.LVL819>:
        return MEMORY_E;
  41c568:	f06f 047c 	mvn.w	r4, #124	; 0x7c

0041c56c <.LVL820>:
  41c56c:	e7e1      	b.n	41c532 <.LBB33>

0041c56e <.LBE35>:
        return BAD_FUNC_ARG;
  41c56e:	f06f 04ac 	mvn.w	r4, #172	; 0xac
  41c572:	e7ba      	b.n	41c4ea <.LVL797>
  41c574:	f06f 04ac 	mvn.w	r4, #172	; 0xac
  41c578:	e7b7      	b.n	41c4ea <.LVL797>

0041c57a <.LBB36>:
            err = BUFFER_E;
  41c57a:	f06f 0483 	mvn.w	r4, #131	; 0x83

0041c57e <.LVL823>:
  41c57e:	e7d3      	b.n	41c528 <.LVL806>

Disassembly of section .text.wc_InitRng_ex%134:

0041c580 <wc_InitRng_ex>:
    if (rng == NULL)
  41c580:	2800      	cmp	r0, #0
  41c582:	d063      	beq.n	41c64c <.LCFI27>
{
  41c584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0041c588 <.LCFI23>:
  41c588:	b0a4      	sub	sp, #144	; 0x90

0041c58a <.LCFI24>:
  41c58a:	4607      	mov	r7, r0
  41c58c:	4690      	mov	r8, r2
    rng->heap = heap;
  41c58e:	6041      	str	r1, [r0, #4]
    rng->drbg = NULL;
  41c590:	2000      	movs	r0, #0

0041c592 <.LVL221>:
  41c592:	60b8      	str	r0, [r7, #8]
    rng->status = DRBG_NOT_INIT;
  41c594:	7338      	strb	r0, [r7, #12]

0041c596 <.LBB106>:
        ret = wc_RNG_HealthTest(0, entropyB, sizeof(entropyB),
  41c596:	2380      	movs	r3, #128	; 0x80
  41c598:	9302      	str	r3, [sp, #8]
  41c59a:	ab04      	add	r3, sp, #16
  41c59c:	9301      	str	r3, [sp, #4]
  41c59e:	9000      	str	r0, [sp, #0]
  41c5a0:	4603      	mov	r3, r0
  41c5a2:	2230      	movs	r2, #48	; 0x30

0041c5a4 <.LVL223>:
  41c5a4:	492b      	ldr	r1, [pc, #172]	; (41c654 <.LVL251+0x4>)

0041c5a6 <.LVL224>:
  41c5a6:	f002 f805 	bl	41e5b4 <wc_RNG_HealthTest>

0041c5aa <.LVL225>:
        if (ret == 0) {
  41c5aa:	4604      	mov	r4, r0
  41c5ac:	2800      	cmp	r0, #0
  41c5ae:	d148      	bne.n	41c642 <.LVL248>
  41c5b0:	f10d 010f 	add.w	r1, sp, #15
  41c5b4:	4d28      	ldr	r5, [pc, #160]	; (41c658 <.LVL251+0x8>)
  41c5b6:	f10d 028f 	add.w	r2, sp, #143	; 0x8f

0041c5ba <.LBB108>:
        compareSum |= a[i] ^ b[i];
  41c5ba:	f811 3f01 	ldrb.w	r3, [r1, #1]!

0041c5be <.LVL227>:
  41c5be:	f815 6f01 	ldrb.w	r6, [r5, #1]!
  41c5c2:	4073      	eors	r3, r6
  41c5c4:	431c      	orrs	r4, r3

0041c5c6 <.LVL228>:
    for (i = 0; i < length; i++) {
  41c5c6:	428a      	cmp	r2, r1
  41c5c8:	d1f7      	bne.n	41c5ba <.LBB108>

0041c5ca <.LBE108>:
            if (ConstantCompare(check, outputB,
  41c5ca:	2c00      	cmp	r4, #0
  41c5cc:	d139      	bne.n	41c642 <.LVL248>

0041c5ce <.LBB110>:
                (struct DRBG*)XMALLOC(sizeof(DRBG), rng->heap,
  41c5ce:	2078      	movs	r0, #120	; 0x78
  41c5d0:	f005 fd50 	bl	422074 <.LFE26>

0041c5d4 <.LVL231>:
        rng->drbg =
  41c5d4:	60b8      	str	r0, [r7, #8]
        if (rng->drbg == NULL) {
  41c5d6:	b1d0      	cbz	r0, 41c60e <.LVL237>

0041c5d8 <.LBB111>:
    return same70_RNG_GenerateSeed(output, sz);
  41c5d8:	2130      	movs	r1, #48	; 0x30
  41c5da:	a804      	add	r0, sp, #16

0041c5dc <.LVL233>:
  41c5dc:	f005 fbf8 	bl	421dd0 <.LFE11>

0041c5e0 <.LBE111>:
        else if (wc_GenerateSeed(&rng->seed, entropy, ENTROPY_NONCE_SZ) == 0 &&
  41c5e0:	b108      	cbz	r0, 41c5e6 <.LBE111+0x6>
            ret = DRBG_FAILURE;
  41c5e2:	2002      	movs	r0, #2
  41c5e4:	e015      	b.n	41c612 <.LBB113>
                 Hash_DRBG_Instantiate(rng->drbg, entropy, ENTROPY_NONCE_SZ,
  41c5e6:	68b8      	ldr	r0, [r7, #8]
  41c5e8:	f8cd 8008 	str.w	r8, [sp, #8]
  41c5ec:	687b      	ldr	r3, [r7, #4]
  41c5ee:	9301      	str	r3, [sp, #4]
  41c5f0:	2300      	movs	r3, #0
  41c5f2:	9300      	str	r3, [sp, #0]
  41c5f4:	2230      	movs	r2, #48	; 0x30
  41c5f6:	a904      	add	r1, sp, #16
  41c5f8:	f003 fc19 	bl	41fe2e <.LFE14>

0041c5fc <.LVL235>:
        else if (wc_GenerateSeed(&rng->seed, entropy, ENTROPY_NONCE_SZ) == 0 &&
  41c5fc:	b108      	cbz	r0, 41c602 <.LVL235+0x6>
            ret = DRBG_FAILURE;
  41c5fe:	2002      	movs	r0, #2
  41c600:	e007      	b.n	41c612 <.LBB113>
            ret = Hash_DRBG_Generate(rng->drbg, NULL, 0);
  41c602:	2200      	movs	r2, #0
  41c604:	4611      	mov	r1, r2
  41c606:	68b8      	ldr	r0, [r7, #8]
  41c608:	f7fa fc34 	bl	416e74 <.LFE0>

0041c60c <.LVL236>:
  41c60c:	e001      	b.n	41c612 <.LBB113>

0041c60e <.LVL237>:
            ret = MEMORY_E;
  41c60e:	f06f 007c 	mvn.w	r0, #124	; 0x7c

0041c612 <.LBB113>:
    volatile byte* z = (volatile byte*)mem;
  41c612:	ab04      	add	r3, sp, #16

0041c614 <.LVL239>:
    while (len--) *z++ = 0;
  41c614:	2400      	movs	r4, #0
  41c616:	a910      	add	r1, sp, #64	; 0x40

0041c618 <.LVL240>:
  41c618:	1c5a      	adds	r2, r3, #1

0041c61a <.LVL241>:
  41c61a:	701c      	strb	r4, [r3, #0]

0041c61c <.LVL242>:
  41c61c:	4613      	mov	r3, r2
  41c61e:	428a      	cmp	r2, r1
  41c620:	d1fa      	bne.n	41c618 <.LVL240>

0041c622 <.LBE110>:
     if (ret == DRBG_SUCCESS) {
  41c622:	b158      	cbz	r0, 41c63c <.LCFI26>
    else if (ret == DRBG_CONT_FAILURE) {
  41c624:	2804      	cmp	r0, #4
  41c626:	d00c      	beq.n	41c642 <.LVL248>
    else if (ret == DRBG_FAILURE) {
  41c628:	2802      	cmp	r0, #2
        rng->status = DRBG_FAILED;
  41c62a:	f04f 0302 	mov.w	r3, #2
  41c62e:	733b      	strb	r3, [r7, #12]

0041c630 <.LVL244>:
        ret = RNG_FAILURE_E;
  41c630:	bf08      	it	eq
  41c632:	f06f 00c6 	mvneq.w	r0, #198	; 0xc6

0041c636 <.LVL245>:
}
  41c636:	b024      	add	sp, #144	; 0x90

0041c638 <.LCFI25>:
  41c638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041c63c <.LCFI26>:
        rng->status = DRBG_OK;
  41c63c:	2301      	movs	r3, #1
  41c63e:	733b      	strb	r3, [r7, #12]

0041c640 <.LVL247>:
  41c640:	e7f9      	b.n	41c636 <.LVL245>

0041c642 <.LVL248>:
        rng->status = DRBG_CONT_FAILED;
  41c642:	2303      	movs	r3, #3
  41c644:	733b      	strb	r3, [r7, #12]

0041c646 <.LVL249>:
        ret = DRBG_CONT_FIPS_E;
  41c646:	f06f 00d0 	mvn.w	r0, #208	; 0xd0
  41c64a:	e7f4      	b.n	41c636 <.LVL245>

0041c64c <.LCFI27>:
        return BAD_FUNC_ARG;
  41c64c:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041c650 <.LVL251>:
  41c650:	4770      	bx	lr
  41c652:	bf00      	nop
  41c654:	00421728 	.word	0x00421728
  41c658:	0041f21f 	.word	0x0041f21f

Disassembly of section .text%135:

0041c680 <strlen>:
  41c680:	f890 f000 	pld	[r0]
  41c684:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  41c688:	f020 0107 	bic.w	r1, r0, #7
  41c68c:	f06f 0c00 	mvn.w	ip, #0
  41c690:	f010 0407 	ands.w	r4, r0, #7
  41c694:	f891 f020 	pld	[r1, #32]
  41c698:	f040 8049 	bne.w	41c72e <strlen+0xae>
  41c69c:	f04f 0400 	mov.w	r4, #0
  41c6a0:	f06f 0007 	mvn.w	r0, #7
  41c6a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  41c6a8:	f891 f040 	pld	[r1, #64]	; 0x40
  41c6ac:	f100 0008 	add.w	r0, r0, #8
  41c6b0:	fa82 f24c 	uadd8	r2, r2, ip
  41c6b4:	faa4 f28c 	sel	r2, r4, ip
  41c6b8:	fa83 f34c 	uadd8	r3, r3, ip
  41c6bc:	faa2 f38c 	sel	r3, r2, ip
  41c6c0:	bb4b      	cbnz	r3, 41c716 <strlen+0x96>
  41c6c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  41c6c6:	fa82 f24c 	uadd8	r2, r2, ip
  41c6ca:	f100 0008 	add.w	r0, r0, #8
  41c6ce:	faa4 f28c 	sel	r2, r4, ip
  41c6d2:	fa83 f34c 	uadd8	r3, r3, ip
  41c6d6:	faa2 f38c 	sel	r3, r2, ip
  41c6da:	b9e3      	cbnz	r3, 41c716 <strlen+0x96>
  41c6dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  41c6e0:	fa82 f24c 	uadd8	r2, r2, ip
  41c6e4:	f100 0008 	add.w	r0, r0, #8
  41c6e8:	faa4 f28c 	sel	r2, r4, ip
  41c6ec:	fa83 f34c 	uadd8	r3, r3, ip
  41c6f0:	faa2 f38c 	sel	r3, r2, ip
  41c6f4:	b97b      	cbnz	r3, 41c716 <strlen+0x96>
  41c6f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  41c6fa:	f101 0120 	add.w	r1, r1, #32
  41c6fe:	fa82 f24c 	uadd8	r2, r2, ip
  41c702:	f100 0008 	add.w	r0, r0, #8
  41c706:	faa4 f28c 	sel	r2, r4, ip
  41c70a:	fa83 f34c 	uadd8	r3, r3, ip
  41c70e:	faa2 f38c 	sel	r3, r2, ip
  41c712:	2b00      	cmp	r3, #0
  41c714:	d0c6      	beq.n	41c6a4 <strlen+0x24>
  41c716:	2a00      	cmp	r2, #0
  41c718:	bf04      	itt	eq
  41c71a:	3004      	addeq	r0, #4
  41c71c:	461a      	moveq	r2, r3
  41c71e:	ba12      	rev	r2, r2
  41c720:	fab2 f282 	clz	r2, r2
  41c724:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  41c728:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  41c72c:	4770      	bx	lr
  41c72e:	e9d1 2300 	ldrd	r2, r3, [r1]
  41c732:	f004 0503 	and.w	r5, r4, #3
  41c736:	f1c4 0000 	rsb	r0, r4, #0
  41c73a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  41c73e:	f014 0f04 	tst.w	r4, #4
  41c742:	f891 f040 	pld	[r1, #64]	; 0x40
  41c746:	fa0c f505 	lsl.w	r5, ip, r5
  41c74a:	ea62 0205 	orn	r2, r2, r5
  41c74e:	bf1c      	itt	ne
  41c750:	ea63 0305 	ornne	r3, r3, r5
  41c754:	4662      	movne	r2, ip
  41c756:	f04f 0400 	mov.w	r4, #0
  41c75a:	e7a9      	b.n	41c6b0 <strlen+0x30>

Disassembly of section .text.wc_ecc_sign_hash%136:

0041c75c <wc_ecc_sign_hash>:
{
  41c75c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

0041c760 <.LCFI84>:
  41c760:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c

0041c764 <.LCFI85>:
  41c764:	f8dd 447c 	ldr.w	r4, [sp, #1148]	; 0x47c

0041c768 <.LVL1010>:
    if (in == NULL || out == NULL || outlen == NULL || key == NULL ||
  41c768:	2800      	cmp	r0, #0
  41c76a:	d05e      	beq.n	41c82a <.LVL1044>
  41c76c:	4680      	mov	r8, r0
  41c76e:	2a00      	cmp	r2, #0
  41c770:	d05b      	beq.n	41c82a <.LVL1044>
  41c772:	2c00      	cmp	r4, #0
  41c774:	bf18      	it	ne
  41c776:	2b00      	cmpne	r3, #0
  41c778:	d05a      	beq.n	41c830 <.LVL1045>
  41c77a:	f8dd 0478 	ldr.w	r0, [sp, #1144]	; 0x478

0041c77e <.LVL1011>:
  41c77e:	2800      	cmp	r0, #0
  41c780:	d056      	beq.n	41c830 <.LVL1045>
  41c782:	461f      	mov	r7, r3
  41c784:	4616      	mov	r6, r2
  41c786:	4689      	mov	r9, r1
    switch(key->state) {
  41c788:	68a5      	ldr	r5, [r4, #8]
  41c78a:	2d03      	cmp	r5, #3
  41c78c:	d005      	beq.n	41c79a <.LVL1011+0x1c>
  41c78e:	2d04      	cmp	r5, #4
  41c790:	d028      	beq.n	41c7e4 <.LVL1028>
  41c792:	b115      	cbz	r5, 41c79a <.LVL1011+0x1c>
            err = BAD_STATE_E;
  41c794:	f06f 05bf 	mvn.w	r5, #191	; 0xbf
  41c798:	e033      	b.n	41c802 <.LVL1036>
            key->state = ECC_STATE_SIGN_DO;
  41c79a:	2303      	movs	r3, #3

0041c79c <.LVL1012>:
  41c79c:	60a3      	str	r3, [r4, #8]

0041c79e <.LBB70>:
        XMEMSET(*r, 0, sizeof(mp_int));
  41c79e:	f44f 750a 	mov.w	r5, #552	; 0x228
  41c7a2:	462a      	mov	r2, r5

0041c7a4 <.LVL1014>:
  41c7a4:	2100      	movs	r1, #0

0041c7a6 <.LVL1015>:
  41c7a6:	a88c      	add	r0, sp, #560	; 0x230

0041c7a8 <.LVL1016>:
  41c7a8:	f001 feb6 	bl	41e518 <.LFE14>

0041c7ac <.LVL1017>:
        XMEMSET(*s, 0, sizeof(mp_int));
  41c7ac:	462a      	mov	r2, r5
  41c7ae:	2100      	movs	r1, #0
  41c7b0:	a802      	add	r0, sp, #8

0041c7b2 <.LVL1018>:
  41c7b2:	f001 feb1 	bl	41e518 <.LFE14>

0041c7b6 <.LBE70>:
            if ((err = mp_init_multi(r, s, NULL, NULL, NULL, NULL)) != MP_OKAY){
  41c7b6:	2200      	movs	r2, #0
  41c7b8:	9201      	str	r2, [sp, #4]
  41c7ba:	9200      	str	r2, [sp, #0]
  41c7bc:	4613      	mov	r3, r2
  41c7be:	a902      	add	r1, sp, #8

0041c7c0 <.LVL1020>:
  41c7c0:	a88c      	add	r0, sp, #560	; 0x230

0041c7c2 <.LVL1021>:
  41c7c2:	f004 fcdf 	bl	421184 <mp_init_multi>

0041c7c6 <.LVL1022>:
  41c7c6:	4605      	mov	r5, r0
  41c7c8:	b9d8      	cbnz	r0, 41c802 <.LVL1036>
            err = wc_ecc_sign_hash_ex(in, inlen, rng, key, r, s);
  41c7ca:	ab02      	add	r3, sp, #8

0041c7cc <.LVL1023>:
  41c7cc:	9301      	str	r3, [sp, #4]
  41c7ce:	ab8c      	add	r3, sp, #560	; 0x230

0041c7d0 <.LVL1024>:
  41c7d0:	9300      	str	r3, [sp, #0]
  41c7d2:	4623      	mov	r3, r4

0041c7d4 <.LVL1025>:
  41c7d4:	f8dd 2478 	ldr.w	r2, [sp, #1144]	; 0x478
  41c7d8:	4649      	mov	r1, r9
  41c7da:	4640      	mov	r0, r8

0041c7dc <.LVL1026>:
  41c7dc:	f7fc f804 	bl	4187e8 <wc_ecc_sign_hash_ex>

0041c7e0 <.LVL1027>:
            if (err < 0) {
  41c7e0:	1e05      	subs	r5, r0, #0
  41c7e2:	db0e      	blt.n	41c802 <.LVL1036>

0041c7e4 <.LVL1028>:
            key->state = ECC_STATE_SIGN_ENCODE;
  41c7e4:	2304      	movs	r3, #4
  41c7e6:	60a3      	str	r3, [r4, #8]
            err = StoreECC_DSA_Sig(out, outlen, r, s);
  41c7e8:	ab02      	add	r3, sp, #8

0041c7ea <.LVL1029>:
  41c7ea:	aa8c      	add	r2, sp, #560	; 0x230

0041c7ec <.LVL1030>:
  41c7ec:	4639      	mov	r1, r7
  41c7ee:	4630      	mov	r0, r6
  41c7f0:	f002 fed0 	bl	41f594 <.LFE167>

0041c7f4 <.LVL1031>:
  41c7f4:	4605      	mov	r5, r0

0041c7f6 <.LVL1032>:
            mp_clear(r);
  41c7f6:	a88c      	add	r0, sp, #560	; 0x230

0041c7f8 <.LVL1033>:
  41c7f8:	f005 fdea 	bl	4223d0 <.LFE16>

0041c7fc <.LVL1034>:
            mp_clear(s);
  41c7fc:	a802      	add	r0, sp, #8

0041c7fe <.LVL1035>:
  41c7fe:	f005 fde7 	bl	4223d0 <.LFE16>

0041c802 <.LVL1036>:
    if (err == WC_PENDING_E) {
  41c802:	f115 0f6c 	cmn.w	r5, #108	; 0x6c
  41c806:	d00c      	beq.n	41c822 <.LCFI87>

0041c808 <.LBB72>:
        mp_clear(*r);
  41c808:	a88c      	add	r0, sp, #560	; 0x230

0041c80a <.LVL1038>:
  41c80a:	f005 fde1 	bl	4223d0 <.LFE16>

0041c80e <.LVL1039>:
        mp_clear(*s);
  41c80e:	a802      	add	r0, sp, #8

0041c810 <.LVL1040>:
  41c810:	f005 fdde 	bl	4223d0 <.LFE16>

0041c814 <.LBE72>:
    key->state = ECC_STATE_NONE;
  41c814:	2300      	movs	r3, #0
  41c816:	60a3      	str	r3, [r4, #8]

0041c818 <.LVL1042>:
}
  41c818:	4628      	mov	r0, r5
  41c81a:	f20d 4d5c 	addw	sp, sp, #1116	; 0x45c

0041c81e <.LCFI86>:
  41c81e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0041c822 <.LCFI87>:
        key->state++;
  41c822:	68a3      	ldr	r3, [r4, #8]
  41c824:	3301      	adds	r3, #1
  41c826:	60a3      	str	r3, [r4, #8]
        return err;
  41c828:	e7f6      	b.n	41c818 <.LVL1042>

0041c82a <.LVL1044>:
        return ECC_BAD_ARG_E;
  41c82a:	f06f 05a9 	mvn.w	r5, #169	; 0xa9
  41c82e:	e7f3      	b.n	41c818 <.LVL1042>

0041c830 <.LVL1045>:
  41c830:	f06f 05a9 	mvn.w	r5, #169	; 0xa9

0041c834 <.LVL1046>:
  41c834:	e7f0      	b.n	41c818 <.LVL1042>

Disassembly of section .text.s_fp_add%137:

0041c836 <s_fp_add>:
{
  41c836:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

0041c83a <.LCFI0>:
  41c83a:	4690      	mov	r8, r2
  y       = MAX(a->used, b->used);
  41c83c:	680a      	ldr	r2, [r1, #0]

0041c83e <.LVL1>:
  41c83e:	6803      	ldr	r3, [r0, #0]
  41c840:	429a      	cmp	r2, r3
  41c842:	bfb8      	it	lt
  41c844:	461a      	movlt	r2, r3

0041c846 <.LVL2>:
  oldused = MIN(c->used, FP_SIZE);   /* help static analysis w/ largest size */
  41c846:	f8d8 3000 	ldr.w	r3, [r8]
  41c84a:	2b88      	cmp	r3, #136	; 0x88
  41c84c:	bfa8      	it	ge
  41c84e:	2388      	movge	r3, #136	; 0x88
  41c850:	469c      	mov	ip, r3

0041c852 <.LVL3>:
  c->used = y;
  41c852:	f8c8 2000 	str.w	r2, [r8]

0041c856 <.LVL4>:
  for (x = 0; x < y; x++) {
  41c856:	2a00      	cmp	r2, #0
  41c858:	dd4f      	ble.n	41c8fa <.LVL17>
  41c85a:	4696      	mov	lr, r2
  41c85c:	1d06      	adds	r6, r0, #4
  41c85e:	1d0a      	adds	r2, r1, #4

0041c860 <.LVL5>:
  41c860:	f108 0704 	add.w	r7, r8, #4
  41c864:	2400      	movs	r4, #0
  41c866:	2500      	movs	r5, #0
  41c868:	2300      	movs	r3, #0

0041c86a <.LVL6>:
      t         += ((fp_word)a->dp[x]) + ((fp_word)b->dp[x]);
  41c86a:	f856 9f04 	ldr.w	r9, [r6, #4]!
  41c86e:	f852 0f04 	ldr.w	r0, [r2, #4]!
  41c872:	2100      	movs	r1, #0
  41c874:	eb10 0009 	adds.w	r0, r0, r9
  41c878:	f141 0100 	adc.w	r1, r1, #0
  41c87c:	1900      	adds	r0, r0, r4
  41c87e:	4169      	adcs	r1, r5

0041c880 <.LVL7>:
      c->dp[x]   = (fp_digit)t;
  41c880:	f847 0f04 	str.w	r0, [r7, #4]!
      t        >>= DIGIT_BIT;
  41c884:	460c      	mov	r4, r1
  41c886:	2500      	movs	r5, #0

0041c888 <.LVL8>:
  for (x = 0; x < y; x++) {
  41c888:	3301      	adds	r3, #1
  41c88a:	459e      	cmp	lr, r3
  41c88c:	d1ed      	bne.n	41c86a <.LVL6>
  41c88e:	1e5a      	subs	r2, r3, #1
  if (t != 0 && x < FP_SIZE) {
  41c890:	ea54 0105 	orrs.w	r1, r4, r5
  41c894:	d005      	beq.n	41c8a2 <.LVL11>
  41c896:	2b87      	cmp	r3, #135	; 0x87
  41c898:	dc03      	bgt.n	41c8a2 <.LVL11>
     c->dp[c->used++] = (fp_digit)t;
  41c89a:	3302      	adds	r3, #2

0041c89c <.LVL10>:
  41c89c:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
     ++x;
  41c8a0:	1c93      	adds	r3, r2, #2

0041c8a2 <.LVL11>:
  c->used = x;
  41c8a2:	f8c8 3000 	str.w	r3, [r8]
  for (; x < oldused; x++) {
  41c8a6:	4563      	cmp	r3, ip
  41c8a8:	da09      	bge.n	41c8be <.LVL15>

0041c8aa <.LVL12>:
  41c8aa:	eb08 0183 	add.w	r1, r8, r3, lsl #2
  41c8ae:	3104      	adds	r1, #4
  for (x = 0; x < y; x++) {
  41c8b0:	461a      	mov	r2, r3
     c->dp[x] = 0;
  41c8b2:	2000      	movs	r0, #0

0041c8b4 <.LVL13>:
  41c8b4:	f841 0f04 	str.w	r0, [r1, #4]!
  for (; x < oldused; x++) {
  41c8b8:	3201      	adds	r2, #1
  41c8ba:	4594      	cmp	ip, r2
  41c8bc:	d1fa      	bne.n	41c8b4 <.LVL13>

0041c8be <.LVL15>:
  fp_clamp(c);
  41c8be:	b1d3      	cbz	r3, 41c8f6 <.LVL15+0x38>
  41c8c0:	1e5a      	subs	r2, r3, #1
  41c8c2:	1c59      	adds	r1, r3, #1
  41c8c4:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
  41c8c8:	b961      	cbnz	r1, 41c8e4 <.LVL15+0x26>
  41c8ca:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  41c8ce:	3304      	adds	r3, #4
  41c8d0:	e000      	b.n	41c8d4 <.LVL15+0x16>
  41c8d2:	4602      	mov	r2, r0
  41c8d4:	b162      	cbz	r2, 41c8f0 <.LVL15+0x32>
  41c8d6:	1e50      	subs	r0, r2, #1
  41c8d8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  41c8dc:	2900      	cmp	r1, #0
  41c8de:	d0f8      	beq.n	41c8d2 <.LVL15+0x14>
  41c8e0:	f8c8 2000 	str.w	r2, [r8]
  41c8e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
  41c8e8:	f8c8 3004 	str.w	r3, [r8, #4]
}
  41c8ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  41c8f0:	2300      	movs	r3, #0
  41c8f2:	f8c8 3000 	str.w	r3, [r8]
  fp_clamp(c);
  41c8f6:	2300      	movs	r3, #0
  41c8f8:	e7f6      	b.n	41c8e8 <.LVL15+0x2a>

0041c8fa <.LVL17>:
  c->used = x;
  41c8fa:	2300      	movs	r3, #0

0041c8fc <.LVL18>:
  41c8fc:	f8c8 3000 	str.w	r3, [r8]
  for (; x < oldused; x++) {
  41c900:	459c      	cmp	ip, r3
  41c902:	ddf8      	ble.n	41c8f6 <.LVL15+0x38>
  for (x = 0; x < y; x++) {
  41c904:	2300      	movs	r3, #0
  41c906:	e7d0      	b.n	41c8aa <.LVL12>

Disassembly of section .text.wc_ecc_verify_hash%138:

0041c908 <wc_ecc_verify_hash>:
{
  41c908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0041c90c <.LCFI93>:
  41c90c:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c

0041c910 <.LCFI94>:
  41c910:	f8dd 5480 	ldr.w	r5, [sp, #1152]	; 0x480
  41c914:	f8dd 4484 	ldr.w	r4, [sp, #1156]	; 0x484

0041c918 <.LVL1164>:
    if (sig == NULL || hash == NULL || res == NULL || key == NULL) {
  41c918:	2800      	cmp	r0, #0
  41c91a:	d057      	beq.n	41c9cc <.LVL1195>
  41c91c:	4607      	mov	r7, r0
  41c91e:	2a00      	cmp	r2, #0
  41c920:	d054      	beq.n	41c9cc <.LVL1195>
  41c922:	2d00      	cmp	r5, #0
  41c924:	d055      	beq.n	41c9d2 <.LVL1195+0x6>
  41c926:	2c00      	cmp	r4, #0
  41c928:	d053      	beq.n	41c9d2 <.LVL1195+0x6>
  41c92a:	461e      	mov	r6, r3
  41c92c:	4690      	mov	r8, r2
  41c92e:	4689      	mov	r9, r1
    switch(key->state) {
  41c930:	68a3      	ldr	r3, [r4, #8]

0041c932 <.LVL1165>:
  41c932:	2b07      	cmp	r3, #7
  41c934:	d841      	bhi.n	41c9ba <.LCFI96>
  41c936:	e8df f003 	tbb	[pc, r3]

0041c93a <.LVL1166>:
  41c93a:	4004      	.short	0x4004
  41c93c:	04404040 	.word	0x04404040
  41c940:	2a1e      	.short	0x2a1e
            key->state = ECC_STATE_VERIFY_DECODE;
  41c942:	2305      	movs	r3, #5
  41c944:	60a3      	str	r3, [r4, #8]
            *res = 0;
  41c946:	f04f 0a00 	mov.w	sl, #0
  41c94a:	f8c5 a000 	str.w	sl, [r5]

0041c94e <.LBB90>:
        XMEMSET(*r, 0, sizeof(mp_int));
  41c94e:	f44f 7b0a 	mov.w	fp, #552	; 0x228
  41c952:	465a      	mov	r2, fp
  41c954:	4651      	mov	r1, sl

0041c956 <.LVL1168>:
  41c956:	a88c      	add	r0, sp, #560	; 0x230

0041c958 <.LVL1169>:
  41c958:	f001 fdde 	bl	41e518 <.LFE14>

0041c95c <.LVL1170>:
        XMEMSET(*s, 0, sizeof(mp_int));
  41c95c:	465a      	mov	r2, fp
  41c95e:	4651      	mov	r1, sl
  41c960:	a802      	add	r0, sp, #8

0041c962 <.LVL1171>:
  41c962:	f001 fdd9 	bl	41e518 <.LFE14>

0041c966 <.LBE90>:
            err = DecodeECC_DSA_Sig(sig, siglen, r, s);
  41c966:	ab02      	add	r3, sp, #8

0041c968 <.LVL1173>:
  41c968:	aa8c      	add	r2, sp, #560	; 0x230

0041c96a <.LVL1174>:
  41c96a:	4649      	mov	r1, r9
  41c96c:	4638      	mov	r0, r7
  41c96e:	f003 fa93 	bl	41fe98 <.LFE20>

0041c972 <.LVL1175>:
            if (err < 0) {
  41c972:	1e07      	subs	r7, r0, #0

0041c974 <.LVL1176>:
  41c974:	db23      	blt.n	41c9be <.LVL1194>

0041c976 <.LVL1177>:
            key->state = ECC_STATE_VERIFY_DO;
  41c976:	2306      	movs	r3, #6
  41c978:	60a3      	str	r3, [r4, #8]
            err = wc_ecc_verify_hash_ex(r, s, hash, hashlen, res, key);
  41c97a:	9401      	str	r4, [sp, #4]
  41c97c:	9500      	str	r5, [sp, #0]
  41c97e:	4633      	mov	r3, r6
  41c980:	4642      	mov	r2, r8
  41c982:	a902      	add	r1, sp, #8

0041c984 <.LVL1178>:
  41c984:	a88c      	add	r0, sp, #560	; 0x230

0041c986 <.LVL1179>:
  41c986:	f7f6 fc25 	bl	4131d4 <.LFE0>

0041c98a <.LVL1180>:
            if (err < 0) {
  41c98a:	1e07      	subs	r7, r0, #0
  41c98c:	db17      	blt.n	41c9be <.LVL1194>

0041c98e <.LVL1181>:
            key->state = ECC_STATE_VERIFY_RES;
  41c98e:	2307      	movs	r3, #7
  41c990:	60a3      	str	r3, [r4, #8]

0041c992 <.LVL1182>:
            mp_clear(r);
  41c992:	a88c      	add	r0, sp, #560	; 0x230

0041c994 <.LVL1183>:
  41c994:	f005 fd1c 	bl	4223d0 <.LFE16>

0041c998 <.LVL1184>:
            mp_clear(s);
  41c998:	a802      	add	r0, sp, #8

0041c99a <.LVL1185>:
  41c99a:	f005 fd19 	bl	4223d0 <.LFE16>

0041c99e <.LVL1186>:
            err = 0;
  41c99e:	2700      	movs	r7, #0

0041c9a0 <.LBB92>:
        mp_clear(*r);
  41c9a0:	a88c      	add	r0, sp, #560	; 0x230

0041c9a2 <.LVL1188>:
  41c9a2:	f005 fd15 	bl	4223d0 <.LFE16>

0041c9a6 <.LVL1189>:
        mp_clear(*s);
  41c9a6:	a802      	add	r0, sp, #8

0041c9a8 <.LVL1190>:
  41c9a8:	f005 fd12 	bl	4223d0 <.LFE16>

0041c9ac <.LBE92>:
    key->state = ECC_STATE_NONE;
  41c9ac:	2300      	movs	r3, #0
  41c9ae:	60a3      	str	r3, [r4, #8]

0041c9b0 <.LVL1192>:
}
  41c9b0:	4638      	mov	r0, r7
  41c9b2:	f20d 4d5c 	addw	sp, sp, #1116	; 0x45c

0041c9b6 <.LCFI95>:
  41c9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0041c9ba <.LCFI96>:
            err = BAD_STATE_E;
  41c9ba:	f06f 07bf 	mvn.w	r7, #191	; 0xbf

0041c9be <.LVL1194>:
    if (err == WC_PENDING_E) {
  41c9be:	f117 0f6c 	cmn.w	r7, #108	; 0x6c
  41c9c2:	d1ed      	bne.n	41c9a0 <.LBB92>
        key->state++;
  41c9c4:	68a3      	ldr	r3, [r4, #8]
  41c9c6:	3301      	adds	r3, #1
  41c9c8:	60a3      	str	r3, [r4, #8]
        return err;
  41c9ca:	e7f1      	b.n	41c9b0 <.LVL1192>

0041c9cc <.LVL1195>:
        return ECC_BAD_ARG_E;
  41c9cc:	f06f 07a9 	mvn.w	r7, #169	; 0xa9
  41c9d0:	e7ee      	b.n	41c9b0 <.LVL1192>
  41c9d2:	f06f 07a9 	mvn.w	r7, #169	; 0xa9

0041c9d6 <.LVL1196>:
  41c9d6:	e7eb      	b.n	41c9b0 <.LVL1192>

Disassembly of section .text.SYS_TIME_PLIBCallback%139:

0041c9d8 <SYS_TIME_PLIBCallback>:
        }
    }
}

static void SYS_TIME_PLIBCallback(uintptr_t context)
{
  41c9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0041c9dc <.LCFI23>:
    SYS_TIME_COUNTER_OBJ* counterObj = (SYS_TIME_COUNTER_OBJ *)&gSystemCounterObj;
    SYS_TIME_TIMER_OBJ* tmrActive = counterObj->tmrActive;
  41c9dc:	4c2f      	ldr	r4, [pc, #188]	; (41ca9c <.LVL234>)
  41c9de:	6b25      	ldr	r5, [r4, #48]	; 0x30

0041c9e0 <.LVL210>:
    uint32_t elapsedCount = 0;
    bool interruptState;

    counterObj->hwTimerCurrentValue = counterObj->timePlib->timerCounterGet();
  41c9e0:	6863      	ldr	r3, [r4, #4]
  41c9e2:	699b      	ldr	r3, [r3, #24]
  41c9e4:	4798      	blx	r3

0041c9e6 <.LVL211>:
  41c9e6:	6160      	str	r0, [r4, #20]

    elapsedCount = SYS_TIME_GetElapsedCount(counterObj->hwTimerCurrentValue);
  41c9e8:	f005 fb74 	bl	4220d4 <.LFE172>

0041c9ec <.LVL212>:
  41c9ec:	4606      	mov	r6, r0

0041c9ee <.LVL213>:

    if (tmrActive != NULL)
  41c9ee:	2d00      	cmp	r5, #0
  41c9f0:	d047      	beq.n	41ca82 <.LVL228>
    {
        counterObj->interruptNestingCount++;
  41c9f2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  41c9f6:	3301      	adds	r3, #1
  41c9f8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

0041c9fc <.LBB49>:
    SYS_TIME_UpdateTimerList(elapsedCounts);
  41c9fc:	f004 ff68 	bl	4218d0 <SYS_TIME_UpdateTimerList>

0041ca00 <.LBB51>:
    SYS_TIME_TIMER_OBJ* tmrActive = counterObj->tmrActive;
  41ca00:	6b24      	ldr	r4, [r4, #48]	; 0x30

0041ca02 <.LVL216>:
    while (tmrActive != NULL)
  41ca02:	b134      	cbz	r4, 41ca12 <.LVL218>
        if(tmrActive->relativeTimePending == 0)
  41ca04:	68a3      	ldr	r3, [r4, #8]
  41ca06:	b923      	cbnz	r3, 41ca12 <.LVL218>
            tmrActive->tmrElapsedFlag = true;
  41ca08:	2501      	movs	r5, #1

0041ca0a <.LVL217>:
                    tmrActive->active = false;
  41ca0a:	f04f 0800 	mov.w	r8, #0
            tmrActive = counterObj->tmrActive;
  41ca0e:	4f23      	ldr	r7, [pc, #140]	; (41ca9c <.LVL234>)
  41ca10:	e011      	b.n	41ca36 <.LVL221+0x14>

0041ca12 <.LVL218>:
  41ca12:	4c23      	ldr	r4, [pc, #140]	; (41caa0 <.LVL234+0x4>)

0041ca14 <.LVL219>:
  41ca14:	f504 75a0 	add.w	r5, r4, #320	; 0x140

0041ca18 <.LBB54>:
            timers[i].tmrElapsed = false;
  41ca18:	2700      	movs	r7, #0
  41ca1a:	e01f      	b.n	41ca5c <.LBB56+0x4>

0041ca1c <.LBB55>:
                SYS_TIME_TimerDestroy(tmrActive->tmrHandle);
  41ca1c:	69e0      	ldr	r0, [r4, #28]
  41ca1e:	f004 fc2b 	bl	421278 <.LFE158>

0041ca22 <.LVL221>:
            if(tmrActive->callback != NULL)
  41ca22:	68e3      	ldr	r3, [r4, #12]
  41ca24:	b10b      	cbz	r3, 41ca2a <.LVL221+0x8>
                tmrActive->callback(tmrActive->context);
  41ca26:	6920      	ldr	r0, [r4, #16]
  41ca28:	4798      	blx	r3
            tmrActive = counterObj->tmrActive;
  41ca2a:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    while (tmrActive != NULL)
  41ca2c:	2c00      	cmp	r4, #0
  41ca2e:	d0f0      	beq.n	41ca12 <.LVL218>
        if(tmrActive->relativeTimePending == 0)
  41ca30:	68a3      	ldr	r3, [r4, #8]
  41ca32:	2b00      	cmp	r3, #0
  41ca34:	d1ed      	bne.n	41ca12 <.LVL218>
            tmrActive->tmrElapsedFlag = true;
  41ca36:	7525      	strb	r5, [r4, #20]
            tmrActive->tmrElapsed = true;
  41ca38:	7565      	strb	r5, [r4, #21]
            if ((tmrActive->type == SYS_TIME_SINGLE) && (tmrActive->callback != NULL))
  41ca3a:	78a3      	ldrb	r3, [r4, #2]
  41ca3c:	b913      	cbnz	r3, 41ca44 <.LVL221+0x22>
  41ca3e:	68e3      	ldr	r3, [r4, #12]
  41ca40:	2b00      	cmp	r3, #0
  41ca42:	d1eb      	bne.n	41ca1c <.LBB55>
                SYS_TIME_RemoveFromList(tmrActive);
  41ca44:	4620      	mov	r0, r4
  41ca46:	f003 ff33 	bl	4208b0 <SYS_TIME_RemoveFromList>

0041ca4a <.LVL224>:
                if (tmrActive->type == SYS_TIME_SINGLE)
  41ca4a:	78a3      	ldrb	r3, [r4, #2]
  41ca4c:	2b00      	cmp	r3, #0
  41ca4e:	d1e8      	bne.n	41ca22 <.LVL221>
                    tmrActive->active = false;
  41ca50:	f884 8001 	strb.w	r8, [r4, #1]
  41ca54:	e7e5      	b.n	41ca22 <.LVL221>

0041ca56 <.LVL225>:
  41ca56:	3420      	adds	r4, #32

0041ca58 <.LBB56>:
    for (uint8_t i = 0; i < SYS_TIME_MAX_TIMERS; i++)
  41ca58:	42ac      	cmp	r4, r5
  41ca5a:	d00c      	beq.n	41ca76 <.LBE49>
  41ca5c:	4620      	mov	r0, r4
        if (timers[i].tmrElapsed == true)
  41ca5e:	7d63      	ldrb	r3, [r4, #21]
  41ca60:	2b00      	cmp	r3, #0
  41ca62:	d0f8      	beq.n	41ca56 <.LVL225>
            timers[i].tmrElapsed = false;
  41ca64:	7567      	strb	r7, [r4, #21]
            if (timers[i].type == SYS_TIME_PERIODIC)
  41ca66:	78a3      	ldrb	r3, [r4, #2]
  41ca68:	2b01      	cmp	r3, #1
  41ca6a:	d1f4      	bne.n	41ca56 <.LVL225>
                timers[i].relativeTimePending = timers[i].requestedTime;
  41ca6c:	6863      	ldr	r3, [r4, #4]
  41ca6e:	60a3      	str	r3, [r4, #8]
                SYS_TIME_AddToList(&timers[i]);
  41ca70:	f001 fe3a 	bl	41e6e8 <SYS_TIME_AddToList>

0041ca74 <.LVL226>:
  41ca74:	e7ef      	b.n	41ca56 <.LVL225>

0041ca76 <.LBE49>:

        SYS_TIME_UpdateTime(elapsedCount);

        counterObj->interruptNestingCount--;
  41ca76:	4a09      	ldr	r2, [pc, #36]	; (41ca9c <.LVL234>)
  41ca78:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
  41ca7c:	3b01      	subs	r3, #1
  41ca7e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c

0041ca82 <.LVL228>:
    }
    SYS_TIME_Counter64Update(elapsedCount);
  41ca82:	4630      	mov	r0, r6
  41ca84:	f005 f9fa 	bl	421e7c <.LFE164>

0041ca88 <.LVL229>:

    interruptState = SYS_INT_Disable();
  41ca88:	f005 fbac 	bl	4221e4 <SYS_INT_Disable>

0041ca8c <.LVL230>:
  41ca8c:	4604      	mov	r4, r0

0041ca8e <.LVL231>:
    SYS_TIME_HwTimerCompareUpdate();
  41ca8e:	f002 fa43 	bl	41ef18 <.LFE18>

0041ca92 <.LVL232>:
    SYS_INT_Restore(interruptState);
  41ca92:	4620      	mov	r0, r4
  41ca94:	f005 fbaf 	bl	4221f6 <.LFE142>

0041ca98 <.LVL233>:
  41ca98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041ca9c <.LVL234>:
  41ca9c:	2040d624 	.word	0x2040d624
  41caa0:	2040d3f4 	.word	0x2040d3f4

Disassembly of section .text.wc_AesCbcDecrypt%140:

0041caa4 <wc_AesCbcDecrypt>:
        if (aes == NULL || out == NULL || in == NULL
  41caa4:	2900      	cmp	r1, #0
  41caa6:	bf18      	it	ne
  41caa8:	2800      	cmpne	r0, #0
  41caaa:	d05d      	beq.n	41cb68 <.LCFI18>
    {
  41caac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

0041cab0 <.LCFI17>:
  41cab0:	4615      	mov	r5, r2
  41cab2:	4681      	mov	r9, r0
  41cab4:	460e      	mov	r6, r1
        if (aes == NULL || out == NULL || in == NULL
  41cab6:	2a00      	cmp	r2, #0
  41cab8:	d04b      	beq.n	41cb52 <.LVL204>
                                       || sz % AES_BLOCK_SIZE != 0) {
  41caba:	f013 0f0f 	tst.w	r3, #15
  41cabe:	d14c      	bne.n	41cb5a <.LVL206>
        blocks = sz / AES_BLOCK_SIZE;
  41cac0:	091b      	lsrs	r3, r3, #4

0041cac2 <.LVL193>:
        while (blocks--) {
  41cac2:	f103 38ff 	add.w	r8, r3, #4294967295

0041cac6 <.LVL194>:
  41cac6:	2b00      	cmp	r3, #0
  41cac8:	d04b      	beq.n	41cb62 <.LVL208>
            XMEMCPY(aes->tmp, in, AES_BLOCK_SIZE);
  41caca:	f500 7484 	add.w	r4, r0, #264	; 0x108
            xorbuf(out, (byte*)aes->reg, AES_BLOCK_SIZE);
  41cace:	f100 07f8 	add.w	r7, r0, #248	; 0xf8
  41cad2:	e01b      	b.n	41cb0c <.LBE168+0x1e>

0041cad4 <.LVL195>:
  41cad4:	1e73      	subs	r3, r6, #1
  41cad6:	f109 01f7 	add.w	r1, r9, #247	; 0xf7
  41cada:	f106 0e0f 	add.w	lr, r6, #15

0041cade <.LBB168>:
        for (i = 0; i < count; i++) b[i] ^= m[i];
  41cade:	785a      	ldrb	r2, [r3, #1]
  41cae0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  41cae4:	4042      	eors	r2, r0
  41cae6:	f803 2f01 	strb.w	r2, [r3, #1]!
  41caea:	4573      	cmp	r3, lr
  41caec:	d1f7      	bne.n	41cade <.LBB168>

0041caee <.LBE168>:
            XMEMCPY(aes->reg, aes->tmp, AES_BLOCK_SIZE);
  41caee:	6820      	ldr	r0, [r4, #0]
  41caf0:	6861      	ldr	r1, [r4, #4]
  41caf2:	68a2      	ldr	r2, [r4, #8]
  41caf4:	68e3      	ldr	r3, [r4, #12]
  41caf6:	6038      	str	r0, [r7, #0]
  41caf8:	6079      	str	r1, [r7, #4]
  41cafa:	60ba      	str	r2, [r7, #8]
  41cafc:	60fb      	str	r3, [r7, #12]
            out += AES_BLOCK_SIZE;
  41cafe:	3610      	adds	r6, #16
            in  += AES_BLOCK_SIZE;
  41cb00:	3510      	adds	r5, #16
        while (blocks--) {
  41cb02:	f108 38ff 	add.w	r8, r8, #4294967295
  41cb06:	f1b8 3fff 	cmp.w	r8, #4294967295
  41cb0a:	d01f      	beq.n	41cb4c <.LBE171>
            XMEMCPY(aes->tmp, in, AES_BLOCK_SIZE);
  41cb0c:	6828      	ldr	r0, [r5, #0]
  41cb0e:	6869      	ldr	r1, [r5, #4]
  41cb10:	68aa      	ldr	r2, [r5, #8]
  41cb12:	68eb      	ldr	r3, [r5, #12]
  41cb14:	6020      	str	r0, [r4, #0]
  41cb16:	6061      	str	r1, [r4, #4]
  41cb18:	60a2      	str	r2, [r4, #8]
  41cb1a:	60e3      	str	r3, [r4, #12]
            wc_AesDecrypt(aes, (byte*)aes->tmp, out);
  41cb1c:	4632      	mov	r2, r6
  41cb1e:	4621      	mov	r1, r4
  41cb20:	4648      	mov	r0, r9
  41cb22:	f7f9 f809 	bl	415b38 <.LFE25>

0041cb26 <.LBB174>:
    if (((wolfssl_word)buf | (wolfssl_word)mask | count) % WOLFSSL_WORD_SIZE == 0)
  41cb26:	ea46 0307 	orr.w	r3, r6, r7
  41cb2a:	f013 0f03 	tst.w	r3, #3
  41cb2e:	d1d1      	bne.n	41cad4 <.LVL195>
  41cb30:	1f33      	subs	r3, r6, #4
  41cb32:	f109 01f4 	add.w	r1, r9, #244	; 0xf4
  41cb36:	f106 0e0c 	add.w	lr, r6, #12

0041cb3a <.LBB171>:
    for (i = 0; i < n; i++) r[i] ^= a[i];
  41cb3a:	685a      	ldr	r2, [r3, #4]
  41cb3c:	f851 0f04 	ldr.w	r0, [r1, #4]!
  41cb40:	4042      	eors	r2, r0
  41cb42:	f843 2f04 	str.w	r2, [r3, #4]!
  41cb46:	4573      	cmp	r3, lr
  41cb48:	d1f7      	bne.n	41cb3a <.LBB171>
  41cb4a:	e7d0      	b.n	41caee <.LBE168>

0041cb4c <.LBE171>:
        return 0;
  41cb4c:	2000      	movs	r0, #0
  41cb4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0041cb52 <.LVL204>:
            return BAD_FUNC_ARG;
  41cb52:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041cb56 <.LVL205>:
  41cb56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0041cb5a <.LVL206>:
  41cb5a:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041cb5e <.LVL207>:
  41cb5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0041cb62 <.LVL208>:
        return 0;
  41cb62:	2000      	movs	r0, #0

0041cb64 <.LVL209>:
    }
  41cb64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0041cb68 <.LCFI18>:
            return BAD_FUNC_ARG;
  41cb68:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041cb6c <.LVL211>:
    }
  41cb6c:	4770      	bx	lr

Disassembly of section .text.memmove%141:

0041cb70 <memmove>:
  41cb70:	4288      	cmp	r0, r1
  41cb72:	b5f0      	push	{r4, r5, r6, r7, lr}

0041cb74 <.LCFI0>:
  41cb74:	d90d      	bls.n	41cb92 <.LVL6>
  41cb76:	188b      	adds	r3, r1, r2
  41cb78:	4298      	cmp	r0, r3
  41cb7a:	d20a      	bcs.n	41cb92 <.LVL6>

0041cb7c <.LVL1>:
  41cb7c:	1884      	adds	r4, r0, r2

0041cb7e <.LVL2>:
  41cb7e:	2a00      	cmp	r2, #0
  41cb80:	d051      	beq.n	41cc26 <.LVL26>
  41cb82:	4622      	mov	r2, r4

0041cb84 <.LVL3>:
  41cb84:	f813 4d01 	ldrb.w	r4, [r3, #-1]!

0041cb88 <.LVL4>:
  41cb88:	f802 4d01 	strb.w	r4, [r2, #-1]!

0041cb8c <.LVL5>:
  41cb8c:	4299      	cmp	r1, r3
  41cb8e:	d1f9      	bne.n	41cb84 <.LVL3>
  41cb90:	bdf0      	pop	{r4, r5, r6, r7, pc}

0041cb92 <.LVL6>:
  41cb92:	2a0f      	cmp	r2, #15
  41cb94:	d948      	bls.n	41cc28 <.LVL27>
  41cb96:	ea41 0300 	orr.w	r3, r1, r0
  41cb9a:	079b      	lsls	r3, r3, #30
  41cb9c:	d146      	bne.n	41cc2c <.LVL27+0x4>
  41cb9e:	f100 0410 	add.w	r4, r0, #16
  41cba2:	f101 0310 	add.w	r3, r1, #16
  41cba6:	4615      	mov	r5, r2

0041cba8 <.LVL7>:
  41cba8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  41cbac:	f844 6c10 	str.w	r6, [r4, #-16]

0041cbb0 <.LVL8>:
  41cbb0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  41cbb4:	f844 6c0c 	str.w	r6, [r4, #-12]

0041cbb8 <.LVL9>:
  41cbb8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  41cbbc:	f844 6c08 	str.w	r6, [r4, #-8]

0041cbc0 <.LVL10>:
  41cbc0:	3d10      	subs	r5, #16
  41cbc2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  41cbc6:	f844 6c04 	str.w	r6, [r4, #-4]
  41cbca:	2d0f      	cmp	r5, #15
  41cbcc:	f103 0310 	add.w	r3, r3, #16

0041cbd0 <.LVL12>:
  41cbd0:	f104 0410 	add.w	r4, r4, #16
  41cbd4:	d8e8      	bhi.n	41cba8 <.LVL7>
  41cbd6:	f1a2 0310 	sub.w	r3, r2, #16

0041cbda <.LVL13>:
  41cbda:	f023 030f 	bic.w	r3, r3, #15
  41cbde:	f002 0e0f 	and.w	lr, r2, #15
  41cbe2:	3310      	adds	r3, #16
  41cbe4:	f1be 0f03 	cmp.w	lr, #3
  41cbe8:	4419      	add	r1, r3

0041cbea <.LVL14>:
  41cbea:	4403      	add	r3, r0

0041cbec <.LVL15>:
  41cbec:	d921      	bls.n	41cc32 <.LVL29>
  41cbee:	1f1e      	subs	r6, r3, #4
  41cbf0:	460d      	mov	r5, r1
  41cbf2:	4674      	mov	r4, lr

0041cbf4 <.LVL16>:
  41cbf4:	3c04      	subs	r4, #4

0041cbf6 <.LVL17>:
  41cbf6:	f855 7b04 	ldr.w	r7, [r5], #4

0041cbfa <.LVL18>:
  41cbfa:	f846 7f04 	str.w	r7, [r6, #4]!
  41cbfe:	2c03      	cmp	r4, #3
  41cc00:	d8f8      	bhi.n	41cbf4 <.LVL16>
  41cc02:	f1ae 0404 	sub.w	r4, lr, #4

0041cc06 <.LVL19>:
  41cc06:	f024 0403 	bic.w	r4, r4, #3
  41cc0a:	3404      	adds	r4, #4
  41cc0c:	4421      	add	r1, r4
  41cc0e:	4423      	add	r3, r4
  41cc10:	f002 0203 	and.w	r2, r2, #3

0041cc14 <.LVL20>:
  41cc14:	b162      	cbz	r2, 41cc30 <.LVL28>

0041cc16 <.LVL21>:
  41cc16:	3b01      	subs	r3, #1

0041cc18 <.LVL22>:
  41cc18:	440a      	add	r2, r1

0041cc1a <.LVL23>:
  41cc1a:	f811 4b01 	ldrb.w	r4, [r1], #1

0041cc1e <.LVL24>:
  41cc1e:	f803 4f01 	strb.w	r4, [r3, #1]!

0041cc22 <.LVL25>:
  41cc22:	428a      	cmp	r2, r1
  41cc24:	d1f9      	bne.n	41cc1a <.LVL23>

0041cc26 <.LVL26>:
  41cc26:	bdf0      	pop	{r4, r5, r6, r7, pc}

0041cc28 <.LVL27>:
  41cc28:	4603      	mov	r3, r0
  41cc2a:	e7f3      	b.n	41cc14 <.LVL20>
  41cc2c:	4603      	mov	r3, r0
  41cc2e:	e7f2      	b.n	41cc16 <.LVL21>

0041cc30 <.LVL28>:
  41cc30:	bdf0      	pop	{r4, r5, r6, r7, pc}

0041cc32 <.LVL29>:
  41cc32:	4672      	mov	r2, lr
  41cc34:	e7ee      	b.n	41cc14 <.LVL20>

0041cc36 <.LFE17>:
  41cc36:	bf00      	nop

Disassembly of section .rodata.__mprec_tens%142:

0041cc38 <__mprec_tens>:
  41cc38:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  41cc48:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  41cc58:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  41cc68:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  41cc78:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  41cc88:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  41cc98:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  41cca8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  41ccb8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  41ccc8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  41ccd8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  41cce8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  41ccf8:	9db4 79d9 7843 44ea                         ...yCx.D

Disassembly of section .text.des_test%143:

0041cd00 <des_test>:
{
  41cd00:	b570      	push	{r4, r5, r6, lr}

0041cd02 <.LCFI50>:
  41cd02:	b0e4      	sub	sp, #400	; 0x190

0041cd04 <.LCFI51>:
    const byte exp_pt[] = { /* "now is the time for all " w/o trailing 0 */
  41cd04:	4c2d      	ldr	r4, [pc, #180]	; (41cdbc <.LCFI52+0x2>)
  41cd06:	ad5e      	add	r5, sp, #376	; 0x178
  41cd08:	f8d4 07f0 	ldr.w	r0, [r4, #2032]	; 0x7f0
  41cd0c:	f8d4 17f4 	ldr.w	r1, [r4, #2036]	; 0x7f4
  41cd10:	f8d4 27f8 	ldr.w	r2, [r4, #2040]	; 0x7f8
  41cd14:	f8d4 37fc 	ldr.w	r3, [r4, #2044]	; 0x7fc
  41cd18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  41cd1a:	f8d4 0800 	ldr.w	r0, [r4, #2048]	; 0x800
  41cd1e:	f8d4 1804 	ldr.w	r1, [r4, #2052]	; 0x804
  41cd22:	c503      	stmia	r5!, {r0, r1}
    const byte key[] =
  41cd24:	ab08      	add	r3, sp, #32
  41cd26:	f8d4 0808 	ldr.w	r0, [r4, #2056]	; 0x808
  41cd2a:	f8d4 180c 	ldr.w	r1, [r4, #2060]	; 0x80c
  41cd2e:	c303      	stmia	r3!, {r0, r1}
    const byte iv[] =
  41cd30:	ab06      	add	r3, sp, #24
  41cd32:	f8d4 0810 	ldr.w	r0, [r4, #2064]	; 0x810
  41cd36:	f8d4 1814 	ldr.w	r1, [r4, #2068]	; 0x814
  41cd3a:	c303      	stmia	r3!, {r0, r1}
    const byte exp_ct[] =
  41cd3c:	466d      	mov	r5, sp
  41cd3e:	f8d4 0818 	ldr.w	r0, [r4, #2072]	; 0x818
  41cd42:	f8d4 181c 	ldr.w	r1, [r4, #2076]	; 0x81c
  41cd46:	f8d4 2820 	ldr.w	r2, [r4, #2080]	; 0x820
  41cd4a:	f8d4 3824 	ldr.w	r3, [r4, #2084]	; 0x824
  41cd4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  41cd50:	f8d4 0828 	ldr.w	r0, [r4, #2088]	; 0x828
  41cd54:	f8d4 182c 	ldr.w	r1, [r4, #2092]	; 0x82c
  41cd58:	c503      	stmia	r5!, {r0, r1}
    appData.des_test_result = numSubTests;
  41cd5a:	2202      	movs	r2, #2
  41cd5c:	4b18      	ldr	r3, [pc, #96]	; (41cdc0 <.LCFI52+0x6>)
  41cd5e:	62da      	str	r2, [r3, #44]	; 0x2c
    wc_Des_SetKey(&enc, key, iv, DES_ENCRYPTION);
  41cd60:	2300      	movs	r3, #0
  41cd62:	aa06      	add	r2, sp, #24
  41cd64:	a908      	add	r1, sp, #32
  41cd66:	a82e      	add	r0, sp, #184	; 0xb8
  41cd68:	f005 f841 	bl	421dee <.LFE167>

0041cd6c <.LVL139>:
    wc_Des_CbcEncrypt(&enc, gen_ct, exp_pt, sizeof(exp_pt));
  41cd6c:	2318      	movs	r3, #24
  41cd6e:	aa5e      	add	r2, sp, #376	; 0x178
  41cd70:	a952      	add	r1, sp, #328	; 0x148
  41cd72:	a82e      	add	r0, sp, #184	; 0xb8
  41cd74:	f002 fad4 	bl	41f320 <.LFE19>

0041cd78 <.LVL140>:
    wc_Des_SetKey(&dec, key, iv, DES_DECRYPTION);
  41cd78:	2301      	movs	r3, #1
  41cd7a:	aa06      	add	r2, sp, #24
  41cd7c:	a908      	add	r1, sp, #32
  41cd7e:	a80a      	add	r0, sp, #40	; 0x28
  41cd80:	f005 f835 	bl	421dee <.LFE167>

0041cd84 <.LVL141>:
    wc_Des_CbcDecrypt(&dec, gen_pt, exp_ct, sizeof(exp_ct));
  41cd84:	2318      	movs	r3, #24
  41cd86:	466a      	mov	r2, sp
  41cd88:	a958      	add	r1, sp, #352	; 0x160
  41cd8a:	a80a      	add	r0, sp, #40	; 0x28
  41cd8c:	f001 feec 	bl	41eb68 <.LFE149>

0041cd90 <.LVL142>:
    if (!(memcmp(gen_pt, exp_pt, sizeof(gen_pt))))
  41cd90:	2218      	movs	r2, #24
  41cd92:	a95e      	add	r1, sp, #376	; 0x178
  41cd94:	a858      	add	r0, sp, #352	; 0x160
  41cd96:	f003 fb6b 	bl	420470 <memcmp>

0041cd9a <.LVL143>:
  41cd9a:	b918      	cbnz	r0, 41cda4 <.LVL143+0xa>
        appData.des_test_result--;
  41cd9c:	4a08      	ldr	r2, [pc, #32]	; (41cdc0 <.LCFI52+0x6>)
  41cd9e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  41cda0:	3b01      	subs	r3, #1
  41cda2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (!(memcmp(gen_ct, exp_ct, sizeof(gen_ct))))
  41cda4:	2218      	movs	r2, #24
  41cda6:	4669      	mov	r1, sp
  41cda8:	a852      	add	r0, sp, #328	; 0x148
  41cdaa:	f003 fb61 	bl	420470 <memcmp>

0041cdae <.LVL144>:
  41cdae:	b918      	cbnz	r0, 41cdb8 <.LVL144+0xa>
        appData.des_test_result--;
  41cdb0:	4a03      	ldr	r2, [pc, #12]	; (41cdc0 <.LCFI52+0x6>)
  41cdb2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  41cdb4:	3b01      	subs	r3, #1
  41cdb6:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  41cdb8:	b064      	add	sp, #400	; 0x190

0041cdba <.LCFI52>:
  41cdba:	bd70      	pop	{r4, r5, r6, pc}
  41cdbc:	0040da54 	.word	0x0040da54
  41cdc0:	2040d534 	.word	0x2040d534

Disassembly of section .text.wc_Md5Final%144:

0041cdc4 <wc_Md5Final>:

int wc_Md5Final(Md5* md5, byte* hash)
{
    byte* local;

    if (md5 == NULL || hash == NULL) {
  41cdc4:	2800      	cmp	r0, #0
  41cdc6:	d059      	beq.n	41ce7c <.LCFI7>
{
  41cdc8:	b570      	push	{r4, r5, r6, lr}

0041cdca <.LCFI6>:
  41cdca:	4604      	mov	r4, r0
    if (md5 == NULL || hash == NULL) {
  41cdcc:	2900      	cmp	r1, #0
  41cdce:	d052      	beq.n	41ce76 <.LVL364>
        return IntelQaSymMd5(&md5->asyncDev, hash, NULL, MD5_DIGEST_SIZE);
    #endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    local = (byte*)md5->buffer;
  41cdd0:	f100 060c 	add.w	r6, r0, #12

0041cdd4 <.LVL351>:

    AddMd5Length(md5, md5->buffLen);  /* before adding pads */
  41cdd4:	6803      	ldr	r3, [r0, #0]

0041cdd6 <.LBB151>:
    word32 tmp = md5->loLen;
  41cdd6:	6840      	ldr	r0, [r0, #4]

0041cdd8 <.LVL353>:
    if ((md5->loLen += len) < tmp) {
  41cdd8:	181a      	adds	r2, r3, r0
  41cdda:	6062      	str	r2, [r4, #4]
  41cddc:	4290      	cmp	r0, r2
  41cdde:	d902      	bls.n	41cde6 <.LVL353+0xe>
        md5->hiLen++;                       /* carry low to high */
  41cde0:	68a2      	ldr	r2, [r4, #8]
  41cde2:	3201      	adds	r2, #1
  41cde4:	60a2      	str	r2, [r4, #8]
  41cde6:	460d      	mov	r5, r1

0041cde8 <.LBE151>:
    local[md5->buffLen++] = 0x80;  /* add 1 */
  41cde8:	1c5a      	adds	r2, r3, #1
  41cdea:	6022      	str	r2, [r4, #0]
  41cdec:	2280      	movs	r2, #128	; 0x80
  41cdee:	54f2      	strb	r2, [r6, r3]

    /* pad with zeros */
    if (md5->buffLen > MD5_PAD_SIZE) {
  41cdf0:	6820      	ldr	r0, [r4, #0]
  41cdf2:	2838      	cmp	r0, #56	; 0x38
  41cdf4:	d831      	bhi.n	41ce5a <.LVL360>

0041cdf6 <.LVL355>:
        ByteReverseWords(md5->buffer, md5->buffer, MD5_BLOCK_SIZE);
    #endif
        XTRANSFORM(md5, local);
        md5->buffLen = 0;
    }
    XMEMSET(&local[md5->buffLen], 0, MD5_PAD_SIZE - md5->buffLen);
  41cdf6:	6820      	ldr	r0, [r4, #0]
  41cdf8:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
  41cdfc:	2100      	movs	r1, #0
  41cdfe:	4430      	add	r0, r6
  41ce00:	f001 fb8a 	bl	41e518 <.LFE14>

0041ce04 <.LVL356>:
#if defined(BIG_ENDIAN_ORDER) && !defined(FREESCALE_MMCAU_SHA)
    ByteReverseWords(md5->buffer, md5->buffer, MD5_BLOCK_SIZE);
#endif

    /* put lengths in bits */
    md5->hiLen = (md5->loLen >> (8*sizeof(md5->loLen) - 3)) +
  41ce04:	6863      	ldr	r3, [r4, #4]
                 (md5->hiLen << 3);
  41ce06:	68a1      	ldr	r1, [r4, #8]
    md5->hiLen = (md5->loLen >> (8*sizeof(md5->loLen) - 3)) +
  41ce08:	0f5a      	lsrs	r2, r3, #29
  41ce0a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
  41ce0e:	60a2      	str	r2, [r4, #8]
    md5->loLen = md5->loLen << 3;
  41ce10:	00db      	lsls	r3, r3, #3
  41ce12:	6063      	str	r3, [r4, #4]

    /* store lengths */
    /* ! length ordering dependent on digest endian type ! */
    XMEMCPY(&local[MD5_PAD_SIZE], &md5->loLen, sizeof(word32));
  41ce14:	6463      	str	r3, [r4, #68]	; 0x44
    XMEMCPY(&local[MD5_PAD_SIZE + sizeof(word32)], &md5->hiLen, sizeof(word32));
  41ce16:	64a2      	str	r2, [r4, #72]	; 0x48

    /* final transform and result to hash */
    XTRANSFORM(md5, local);
  41ce18:	4620      	mov	r0, r4
  41ce1a:	f7f3 f947 	bl	4100ac <Transform>

0041ce1e <.LVL357>:
#ifdef BIG_ENDIAN_ORDER
    ByteReverseWords(md5->digest, md5->digest, MD5_DIGEST_SIZE);
#endif
    XMEMCPY(hash, md5->digest, MD5_DIGEST_SIZE);
  41ce1e:	4623      	mov	r3, r4
  41ce20:	f853 0f4c 	ldr.w	r0, [r3, #76]!
  41ce24:	6859      	ldr	r1, [r3, #4]
  41ce26:	689a      	ldr	r2, [r3, #8]
  41ce28:	68db      	ldr	r3, [r3, #12]
  41ce2a:	6028      	str	r0, [r5, #0]
  41ce2c:	6069      	str	r1, [r5, #4]
  41ce2e:	60aa      	str	r2, [r5, #8]
  41ce30:	60eb      	str	r3, [r5, #12]

0041ce32 <.LBB153>:
    md5->digest[0] = 0x67452301L;
  41ce32:	4b14      	ldr	r3, [pc, #80]	; (41ce84 <.LVL367+0x4>)
  41ce34:	64e3      	str	r3, [r4, #76]	; 0x4c
    md5->digest[1] = 0xefcdab89L;
  41ce36:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
  41ce3a:	6523      	str	r3, [r4, #80]	; 0x50
    md5->digest[2] = 0x98badcfeL;
  41ce3c:	f103 4329 	add.w	r3, r3, #2835349504	; 0xa9000000
  41ce40:	f5a3 1396 	sub.w	r3, r3, #1228800	; 0x12c000
  41ce44:	f6a3 638b 	subw	r3, r3, #3723	; 0xe8b
  41ce48:	6563      	str	r3, [r4, #84]	; 0x54
    md5->digest[3] = 0x10325476L;
  41ce4a:	f1a3 3388 	sub.w	r3, r3, #2290649224	; 0x88888888
  41ce4e:	65a3      	str	r3, [r4, #88]	; 0x58
    md5->buffLen = 0;
  41ce50:	2000      	movs	r0, #0
  41ce52:	6020      	str	r0, [r4, #0]
    md5->loLen   = 0;
  41ce54:	6060      	str	r0, [r4, #4]
    md5->hiLen   = 0;
  41ce56:	60a0      	str	r0, [r4, #8]

0041ce58 <.LBE153>:

    return _InitMd5(md5); /* reset state */
  41ce58:	bd70      	pop	{r4, r5, r6, pc}

0041ce5a <.LVL360>:
        XMEMSET(&local[md5->buffLen], 0, MD5_BLOCK_SIZE - md5->buffLen);
  41ce5a:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
  41ce5e:	2100      	movs	r1, #0

0041ce60 <.LVL361>:
  41ce60:	4430      	add	r0, r6
  41ce62:	f001 fb59 	bl	41e518 <.LFE14>

0041ce66 <.LVL362>:
        md5->buffLen += MD5_BLOCK_SIZE - md5->buffLen;
  41ce66:	2340      	movs	r3, #64	; 0x40
  41ce68:	6023      	str	r3, [r4, #0]
        XTRANSFORM(md5, local);
  41ce6a:	4620      	mov	r0, r4
  41ce6c:	f7f3 f91e 	bl	4100ac <Transform>

0041ce70 <.LVL363>:
        md5->buffLen = 0;
  41ce70:	2300      	movs	r3, #0
  41ce72:	6023      	str	r3, [r4, #0]
  41ce74:	e7bf      	b.n	41cdf6 <.LVL355>

0041ce76 <.LVL364>:
        return BAD_FUNC_ARG;
  41ce76:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041ce7a <.LVL365>:
}
  41ce7a:	bd70      	pop	{r4, r5, r6, pc}

0041ce7c <.LCFI7>:
        return BAD_FUNC_ARG;
  41ce7c:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041ce80 <.LVL367>:
  41ce80:	4770      	bx	lr
  41ce82:	bf00      	nop
  41ce84:	67452301 	.word	0x67452301

Disassembly of section .text.scan_tree%145:

0041ce88 <scan_tree>:
{
  41ce88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

0041ce8c <.LCFI3>:
    int nextlen = tree[0].Len; /* length of next code */
  41ce8c:	884c      	ldrh	r4, [r1, #2]

0041ce8e <.LVL17>:
    if (nextlen == 0) max_count = 138, min_count = 3;
  41ce8e:	2c00      	cmp	r4, #0
  41ce90:	bf15      	itete	ne
  41ce92:	2704      	movne	r7, #4
  41ce94:	2703      	moveq	r7, #3
  41ce96:	f04f 0e07 	movne.w	lr, #7
  41ce9a:	f04f 0e8a 	moveq.w	lr, #138	; 0x8a

0041ce9e <.LVL18>:
    tree[max_code+1].Len = (ush)0xffff; /* guard */
  41ce9e:	eb01 0382 	add.w	r3, r1, r2, lsl #2
  41cea2:	f64f 75ff 	movw	r5, #65535	; 0xffff
  41cea6:	80dd      	strh	r5, [r3, #6]

0041cea8 <.LVL19>:
    for (n = 0; n <= max_code; n++) {
  41cea8:	2a00      	cmp	r2, #0
  41ceaa:	db4d      	blt.n	41cf48 <.LVL38>
  41ceac:	2300      	movs	r3, #0
  41ceae:	f04f 3cff 	mov.w	ip, #4294967295
  41ceb2:	461e      	mov	r6, r3
            max_count = 138, min_count = 3;
  41ceb4:	f04f 0903 	mov.w	r9, #3
  41ceb8:	f04f 088a 	mov.w	r8, #138	; 0x8a
  41cebc:	e01a      	b.n	41cef4 <.LVL28>

0041cebe <.LVL20>:
        } else if (count < min_count) {
  41cebe:	42bb      	cmp	r3, r7
  41cec0:	da1f      	bge.n	41cf02 <.LVL29+0xc>
  41cec2:	eb00 0784 	add.w	r7, r0, r4, lsl #2

0041cec6 <.LVL21>:
            s->bl_tree[curlen].Freq += count;
  41cec6:	f8b7 ea7c 	ldrh.w	lr, [r7, #2684]	; 0xa7c

0041ceca <.LVL22>:
  41ceca:	4473      	add	r3, lr

0041cecc <.LVL23>:
  41cecc:	f8a7 3a7c 	strh.w	r3, [r7, #2684]	; 0xa7c

0041ced0 <.LVL24>:
        if (nextlen == 0) {
  41ced0:	b3ad      	cbz	r5, 41cf3e <.LVL37>
        } else if (curlen == nextlen) {
  41ced2:	46a4      	mov	ip, r4
  41ced4:	42a5      	cmp	r5, r4
  41ced6:	bf0c      	ite	eq
  41ced8:	2703      	moveq	r7, #3
  41ceda:	2704      	movne	r7, #4
  41cedc:	42a5      	cmp	r5, r4
  41cede:	bf0c      	ite	eq
  41cee0:	f04f 0e06 	moveq.w	lr, #6
  41cee4:	f04f 0e07 	movne.w	lr, #7
  41cee8:	2300      	movs	r3, #0

0041ceea <.LVL25>:
    for (n = 0; n <= max_code; n++) {
  41ceea:	3601      	adds	r6, #1
  41ceec:	3104      	adds	r1, #4
        curlen = nextlen; nextlen = tree[n+1].Len;
  41ceee:	462c      	mov	r4, r5

0041cef0 <.LVL27>:
    for (n = 0; n <= max_code; n++) {
  41cef0:	42b2      	cmp	r2, r6
  41cef2:	db29      	blt.n	41cf48 <.LVL38>

0041cef4 <.LVL28>:
        curlen = nextlen; nextlen = tree[n+1].Len;
  41cef4:	88cd      	ldrh	r5, [r1, #6]

0041cef6 <.LVL29>:
        if (++count < max_count && curlen == nextlen) {
  41cef6:	3301      	adds	r3, #1
  41cef8:	42a5      	cmp	r5, r4
  41cefa:	d1e0      	bne.n	41cebe <.LVL20>
  41cefc:	4573      	cmp	r3, lr
  41cefe:	dade      	bge.n	41cebe <.LVL20>
  41cf00:	e7f3      	b.n	41ceea <.LVL25>
        } else if (curlen != 0) {
  41cf02:	b174      	cbz	r4, 41cf22 <.LVL33>
            if (curlen != prevlen) s->bl_tree[curlen].Freq++;
  41cf04:	45a4      	cmp	ip, r4
  41cf06:	d006      	beq.n	41cf16 <.LVL32+0x6>
  41cf08:	eb00 0784 	add.w	r7, r0, r4, lsl #2

0041cf0c <.LVL31>:
  41cf0c:	f8b7 3a7c 	ldrh.w	r3, [r7, #2684]	; 0xa7c

0041cf10 <.LVL32>:
  41cf10:	3301      	adds	r3, #1
  41cf12:	f8a7 3a7c 	strh.w	r3, [r7, #2684]	; 0xa7c
            s->bl_tree[REP_3_6].Freq++;
  41cf16:	f8b0 3abc 	ldrh.w	r3, [r0, #2748]	; 0xabc
  41cf1a:	3301      	adds	r3, #1
  41cf1c:	f8a0 3abc 	strh.w	r3, [r0, #2748]	; 0xabc
  41cf20:	e7d6      	b.n	41ced0 <.LVL24>

0041cf22 <.LVL33>:
        } else if (count <= 10) {
  41cf22:	2b0a      	cmp	r3, #10
  41cf24:	dc05      	bgt.n	41cf32 <.LVL35>
            s->bl_tree[REPZ_3_10].Freq++;
  41cf26:	f8b0 3ac0 	ldrh.w	r3, [r0, #2752]	; 0xac0

0041cf2a <.LVL34>:
  41cf2a:	3301      	adds	r3, #1
  41cf2c:	f8a0 3ac0 	strh.w	r3, [r0, #2752]	; 0xac0
  41cf30:	e7ce      	b.n	41ced0 <.LVL24>

0041cf32 <.LVL35>:
            s->bl_tree[REPZ_11_138].Freq++;
  41cf32:	f8b0 3ac4 	ldrh.w	r3, [r0, #2756]	; 0xac4

0041cf36 <.LVL36>:
  41cf36:	3301      	adds	r3, #1
  41cf38:	f8a0 3ac4 	strh.w	r3, [r0, #2756]	; 0xac4
  41cf3c:	e7c8      	b.n	41ced0 <.LVL24>

0041cf3e <.LVL37>:
        count = 0; prevlen = curlen;
  41cf3e:	462b      	mov	r3, r5
  41cf40:	46a4      	mov	ip, r4
            max_count = 138, min_count = 3;
  41cf42:	464f      	mov	r7, r9
  41cf44:	46c6      	mov	lr, r8
  41cf46:	e7d0      	b.n	41ceea <.LVL25>

0041cf48 <.LVL38>:
  41cf48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

Disassembly of section .text.compress_test%146:

0041cf4c <compress_test>:
{
  41cf4c:	b530      	push	{r4, r5, lr}

0041cf4e <.LCFI46>:
  41cf4e:	b083      	sub	sp, #12

0041cf50 <.LCFI47>:
    c = calloc(cSz, sizeof(byte));
  41cf50:	2101      	movs	r1, #1
  41cf52:	f241 10c7 	movw	r0, #4551	; 0x11c7
  41cf56:	f005 f9c9 	bl	4222ec <.LFE151>

0041cf5a <.LVL123>:
  41cf5a:	4604      	mov	r4, r0

0041cf5c <.LVL124>:
    d = calloc(dSz, sizeof(byte));
  41cf5c:	2101      	movs	r1, #1
  41cf5e:	f241 10b7 	movw	r0, #4535	; 0x11b7

0041cf62 <.LVL125>:
  41cf62:	f005 f9c3 	bl	4222ec <.LFE151>

0041cf66 <.LVL126>:
  41cf66:	4605      	mov	r5, r0

0041cf68 <.LVL127>:
    if (c != NULL && d != NULL)
  41cf68:	b1cc      	cbz	r4, 41cf9e <.LVL130>
  41cf6a:	b1c0      	cbz	r0, 41cf9e <.LVL130>
        appData.compress_test_result--;
  41cf6c:	2203      	movs	r2, #3
  41cf6e:	4b25      	ldr	r3, [pc, #148]	; (41d004 <.LVL137+0xe>)
  41cf70:	649a      	str	r2, [r3, #72]	; 0x48
    if ((appData.compress_test_result == numSubTests-1) && 
  41cf72:	2300      	movs	r3, #0
  41cf74:	9300      	str	r3, [sp, #0]
  41cf76:	f241 13b7 	movw	r3, #4535	; 0x11b7
  41cf7a:	4a23      	ldr	r2, [pc, #140]	; (41d008 <.LVL137+0x12>)
  41cf7c:	f241 11c7 	movw	r1, #4551	; 0x11c7
  41cf80:	4620      	mov	r0, r4

0041cf82 <.LVL128>:
  41cf82:	f002 f84d 	bl	41f020 <wc_Compress>

0041cf86 <.LVL129>:
  41cf86:	1e03      	subs	r3, r0, #0
  41cf88:	db03      	blt.n	41cf92 <.LVL129+0xc>
        appData.compress_test_result--;
  41cf8a:	491e      	ldr	r1, [pc, #120]	; (41d004 <.LVL137+0xe>)
  41cf8c:	6c8a      	ldr	r2, [r1, #72]	; 0x48
  41cf8e:	3a01      	subs	r2, #1
  41cf90:	648a      	str	r2, [r1, #72]	; 0x48
  41cf92:	f241 12c7 	movw	r2, #4551	; 0x11c7
  41cf96:	2b00      	cmp	r3, #0
  41cf98:	bfd8      	it	le
  41cf9a:	4613      	movle	r3, r2
  41cf9c:	e004      	b.n	41cfa8 <.LVL131>

0041cf9e <.LVL130>:
    appData.compress_test_result = numSubTests;
  41cf9e:	2204      	movs	r2, #4
  41cfa0:	4b18      	ldr	r3, [pc, #96]	; (41d004 <.LVL137+0xe>)
  41cfa2:	649a      	str	r2, [r3, #72]	; 0x48
  41cfa4:	f241 13c7 	movw	r3, #4551	; 0x11c7

0041cfa8 <.LVL131>:
    if ((appData.compress_test_result == numSubTests-2) && 
  41cfa8:	4a16      	ldr	r2, [pc, #88]	; (41d004 <.LVL137+0xe>)
  41cfaa:	6c92      	ldr	r2, [r2, #72]	; 0x48
  41cfac:	2a02      	cmp	r2, #2
  41cfae:	d00d      	beq.n	41cfcc <.LCFI49>

0041cfb0 <.LVL132>:
    if ((appData.compress_test_result == numSubTests-3) && 
  41cfb0:	4b14      	ldr	r3, [pc, #80]	; (41d004 <.LVL137+0xe>)
  41cfb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  41cfb4:	2b01      	cmp	r3, #1
  41cfb6:	d018      	beq.n	41cfea <.LVL136+0x12>
    if (c) free(c);
  41cfb8:	b114      	cbz	r4, 41cfc0 <.LVL133>
  41cfba:	4620      	mov	r0, r4
  41cfbc:	f005 f9a6 	bl	42230c <.LFE0>

0041cfc0 <.LVL133>:
    if (d) free(d);
  41cfc0:	b115      	cbz	r5, 41cfc8 <.LVL134>
  41cfc2:	4628      	mov	r0, r5
  41cfc4:	f005 f9a2 	bl	42230c <.LFE0>

0041cfc8 <.LVL134>:
}
  41cfc8:	b003      	add	sp, #12

0041cfca <.LCFI48>:
  41cfca:	bd30      	pop	{r4, r5, pc}

0041cfcc <.LCFI49>:
         wc_DeCompress(d, dSz, c, cSz) == (int)dSz)
  41cfcc:	4622      	mov	r2, r4
  41cfce:	f241 11b7 	movw	r1, #4535	; 0x11b7
  41cfd2:	4628      	mov	r0, r5
  41cfd4:	f002 ff94 	bl	41ff00 <.LFE107>

0041cfd8 <.LVL136>:
    if ((appData.compress_test_result == numSubTests-2) && 
  41cfd8:	f241 13b7 	movw	r3, #4535	; 0x11b7
  41cfdc:	4298      	cmp	r0, r3
  41cfde:	d1e7      	bne.n	41cfb0 <.LVL132>
        appData.compress_test_result--;
  41cfe0:	4a08      	ldr	r2, [pc, #32]	; (41d004 <.LVL137+0xe>)
  41cfe2:	6c93      	ldr	r3, [r2, #72]	; 0x48
  41cfe4:	3b01      	subs	r3, #1
  41cfe6:	6493      	str	r3, [r2, #72]	; 0x48
  41cfe8:	e7e2      	b.n	41cfb0 <.LVL132>
         !(memcmp(d, sample_text, dSz)))
  41cfea:	f241 12b7 	movw	r2, #4535	; 0x11b7
  41cfee:	4906      	ldr	r1, [pc, #24]	; (41d008 <.LVL137+0x12>)
  41cff0:	4628      	mov	r0, r5
  41cff2:	f003 fa3d 	bl	420470 <memcmp>

0041cff6 <.LVL137>:
    if ((appData.compress_test_result == numSubTests-3) && 
  41cff6:	2800      	cmp	r0, #0
  41cff8:	d1de      	bne.n	41cfb8 <.LVL132+0x8>
        appData.compress_test_result--;
  41cffa:	2200      	movs	r2, #0
  41cffc:	4b01      	ldr	r3, [pc, #4]	; (41d004 <.LVL137+0xe>)
  41cffe:	649a      	str	r2, [r3, #72]	; 0x48
  41d000:	e7da      	b.n	41cfb8 <.LVL132+0x8>
  41d002:	bf00      	nop
  41d004:	2040d534 	.word	0x2040d534
  41d008:	004061d8 	.word	0x004061d8

Disassembly of section .text.fp_mul_d%147:

0041d00c <fp_mul_d>:
{
  41d00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0041d010 <.LCFI6>:
  41d010:	b083      	sub	sp, #12

0041d012 <.LCFI7>:
   oldused = c->used;
  41d012:	f8d2 8000 	ldr.w	r8, [r2]
   c->used = a->used;
  41d016:	6803      	ldr	r3, [r0, #0]
  41d018:	9301      	str	r3, [sp, #4]
  41d01a:	6013      	str	r3, [r2, #0]
   c->sign = a->sign;
  41d01c:	6843      	ldr	r3, [r0, #4]
  41d01e:	9300      	str	r3, [sp, #0]
  41d020:	6053      	str	r3, [r2, #4]

0041d022 <.LVL61>:
   for (x = 0; x < a->used; x++) {
  41d022:	6803      	ldr	r3, [r0, #0]
  41d024:	2b00      	cmp	r3, #0
  41d026:	dd3d      	ble.n	41d0a4 <.LVL71>
  41d028:	f100 0e04 	add.w	lr, r0, #4
  41d02c:	1d13      	adds	r3, r2, #4
  41d02e:	f04f 0c00 	mov.w	ip, #0
  41d032:	2400      	movs	r4, #0
  41d034:	2500      	movs	r5, #0
       w         = ((fp_word)a->dp[x]) * ((fp_word)b) + w;
  41d036:	46e1      	mov	r9, ip
  41d038:	e000      	b.n	41d03c <.LVL63>

0041d03a <.LVL62>:
   for (x = 0; x < a->used; x++) {
  41d03a:	46b4      	mov	ip, r6

0041d03c <.LVL63>:
       w         = ((fp_word)a->dp[x]) * ((fp_word)b) + w;
  41d03c:	f85e 6f04 	ldr.w	r6, [lr, #4]!
  41d040:	46a2      	mov	sl, r4
  41d042:	46ab      	mov	fp, r5
  41d044:	fbe1 ab06 	umlal	sl, fp, r1, r6

0041d048 <.LVL64>:
       c->dp[x]  = (fp_digit)w;
  41d048:	f843 af04 	str.w	sl, [r3, #4]!
       w         = w >> DIGIT_BIT;
  41d04c:	465c      	mov	r4, fp
  41d04e:	464d      	mov	r5, r9

0041d050 <.LVL65>:
   for (x = 0; x < a->used; x++) {
  41d050:	f10c 0601 	add.w	r6, ip, #1

0041d054 <.LVL66>:
  41d054:	6807      	ldr	r7, [r0, #0]
  41d056:	42b7      	cmp	r7, r6
  41d058:	dcef      	bgt.n	41d03a <.LVL62>
   if (w != 0 && (a->used != FP_SIZE)) {
  41d05a:	2f88      	cmp	r7, #136	; 0x88
  41d05c:	d00c      	beq.n	41d078 <.LVL68>
  41d05e:	ea5b 0309 	orrs.w	r3, fp, r9
  41d062:	d009      	beq.n	41d078 <.LVL68>
      c->dp[c->used++] = (fp_digit) w;
  41d064:	9901      	ldr	r1, [sp, #4]

0041d066 <.LVL67>:
  41d066:	460b      	mov	r3, r1
  41d068:	3301      	adds	r3, #1
  41d06a:	6013      	str	r3, [r2, #0]
  41d06c:	f101 0b02 	add.w	fp, r1, #2
  41d070:	f842 402b 	str.w	r4, [r2, fp, lsl #2]
      ++x;
  41d074:	f10c 0602 	add.w	r6, ip, #2

0041d078 <.LVL68>:
   for (; x < oldused; x++) {
  41d078:	45b0      	cmp	r8, r6
  41d07a:	dd08      	ble.n	41d08e <.LVL68+0x16>
  41d07c:	eb02 0386 	add.w	r3, r2, r6, lsl #2
  41d080:	3304      	adds	r3, #4
      c->dp[x] = 0;
  41d082:	2100      	movs	r1, #0
  41d084:	f843 1f04 	str.w	r1, [r3, #4]!
   for (; x < oldused; x++) {
  41d088:	3601      	adds	r6, #1
  41d08a:	45b0      	cmp	r8, r6
  41d08c:	d1fa      	bne.n	41d084 <.LVL68+0xc>
   fp_clamp(c);
  41d08e:	6811      	ldr	r1, [r2, #0]
  41d090:	b1a1      	cbz	r1, 41d0bc <.LVL72+0x14>
  41d092:	1e4b      	subs	r3, r1, #1
  41d094:	1c48      	adds	r0, r1, #1

0041d096 <.LVL70>:
  41d096:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
  41d09a:	b988      	cbnz	r0, 41d0c0 <.LVL72+0x18>
  41d09c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  41d0a0:	3104      	adds	r1, #4
  41d0a2:	e002      	b.n	41d0aa <.LVL72+0x2>

0041d0a4 <.LVL71>:
   for (x = 0; x < a->used; x++) {
  41d0a4:	2600      	movs	r6, #0
  41d0a6:	e7e7      	b.n	41d078 <.LVL68>

0041d0a8 <.LVL72>:
   fp_clamp(c);
  41d0a8:	4623      	mov	r3, r4
  41d0aa:	b133      	cbz	r3, 41d0ba <.LVL72+0x12>
  41d0ac:	1e5c      	subs	r4, r3, #1
  41d0ae:	f851 0d04 	ldr.w	r0, [r1, #-4]!
  41d0b2:	2800      	cmp	r0, #0
  41d0b4:	d0f8      	beq.n	41d0a8 <.LVL72>
  41d0b6:	6013      	str	r3, [r2, #0]
  41d0b8:	e002      	b.n	41d0c0 <.LVL72+0x18>
  41d0ba:	6013      	str	r3, [r2, #0]
  41d0bc:	2300      	movs	r3, #0
  41d0be:	9300      	str	r3, [sp, #0]
  41d0c0:	9b00      	ldr	r3, [sp, #0]
  41d0c2:	6053      	str	r3, [r2, #4]
}
  41d0c4:	b003      	add	sp, #12

0041d0c6 <.LCFI8>:
  41d0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section .text.__d2b%148:

0041d0cc <__d2b>:
  41d0cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

0041d0d0 <.LCFI17>:
  41d0d0:	ec57 6b10 	vmov	r6, r7, d0
  41d0d4:	b083      	sub	sp, #12

0041d0d6 <.LCFI18>:
  41d0d6:	4688      	mov	r8, r1
  41d0d8:	2101      	movs	r1, #1

0041d0da <.LVL324>:
  41d0da:	463c      	mov	r4, r7
  41d0dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
  41d0e0:	4617      	mov	r7, r2
  41d0e2:	f003 fd43 	bl	420b6c <.LFE2>

0041d0e6 <.LVL326>:
  41d0e6:	f3c4 0413 	ubfx	r4, r4, #0, #20
  41d0ea:	4681      	mov	r9, r0

0041d0ec <.LVL327>:
  41d0ec:	b10d      	cbz	r5, 41d0f2 <.LVL327+0x6>
  41d0ee:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  41d0f2:	9401      	str	r4, [sp, #4]
  41d0f4:	b31e      	cbz	r6, 41d13e <.LCFI20>
  41d0f6:	a802      	add	r0, sp, #8

0041d0f8 <.LVL328>:
  41d0f8:	f840 6d08 	str.w	r6, [r0, #-8]!
  41d0fc:	f003 f9e8 	bl	4204d0 <__lo0bits>

0041d100 <.LVL329>:
  41d100:	2800      	cmp	r0, #0
  41d102:	d134      	bne.n	41d16e <.LCFI22>
  41d104:	e89d 000c 	ldmia.w	sp, {r2, r3}
  41d108:	f8c9 2014 	str.w	r2, [r9, #20]
  41d10c:	2b00      	cmp	r3, #0
  41d10e:	bf0c      	ite	eq
  41d110:	2101      	moveq	r1, #1
  41d112:	2102      	movne	r1, #2
  41d114:	f8c9 3018 	str.w	r3, [r9, #24]
  41d118:	f8c9 1010 	str.w	r1, [r9, #16]

0041d11c <.LVL330>:
  41d11c:	b9dd      	cbnz	r5, 41d156 <.LVL338+0x4>
  41d11e:	eb09 0381 	add.w	r3, r9, r1, lsl #2
  41d122:	f2a0 4032 	subw	r0, r0, #1074	; 0x432

0041d126 <.LVL331>:
  41d126:	f8c8 0000 	str.w	r0, [r8]
  41d12a:	6918      	ldr	r0, [r3, #16]

0041d12c <.LVL332>:
  41d12c:	f004 f80a 	bl	421144 <.LFE17>

0041d130 <.LVL333>:
  41d130:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  41d134:	6038      	str	r0, [r7, #0]
  41d136:	4648      	mov	r0, r9
  41d138:	b003      	add	sp, #12

0041d13a <.LCFI19>:
  41d13a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0041d13e <.LCFI20>:
  41d13e:	a801      	add	r0, sp, #4

0041d140 <.LVL335>:
  41d140:	f003 f9c6 	bl	4204d0 <__lo0bits>

0041d144 <.LVL336>:
  41d144:	9b01      	ldr	r3, [sp, #4]
  41d146:	f8c9 3014 	str.w	r3, [r9, #20]
  41d14a:	2101      	movs	r1, #1
  41d14c:	3020      	adds	r0, #32

0041d14e <.LVL337>:
  41d14e:	f8c9 1010 	str.w	r1, [r9, #16]

0041d152 <.LVL338>:
  41d152:	2d00      	cmp	r5, #0
  41d154:	d0e3      	beq.n	41d11e <.LVL330+0x2>
  41d156:	f2a5 4533 	subw	r5, r5, #1075	; 0x433

0041d15a <.LVL339>:
  41d15a:	4405      	add	r5, r0

0041d15c <.LVL340>:
  41d15c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35

0041d160 <.LVL341>:
  41d160:	f8c8 5000 	str.w	r5, [r8]
  41d164:	6038      	str	r0, [r7, #0]
  41d166:	4648      	mov	r0, r9
  41d168:	b003      	add	sp, #12

0041d16a <.LCFI21>:
  41d16a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0041d16e <.LCFI22>:
  41d16e:	e89d 000a 	ldmia.w	sp, {r1, r3}
  41d172:	f1c0 0220 	rsb	r2, r0, #32
  41d176:	fa03 f202 	lsl.w	r2, r3, r2
  41d17a:	430a      	orrs	r2, r1
  41d17c:	40c3      	lsrs	r3, r0
  41d17e:	9301      	str	r3, [sp, #4]
  41d180:	f8c9 2014 	str.w	r2, [r9, #20]
  41d184:	e7c2      	b.n	41d10c <.LVL329+0xc>

0041d186 <.LFE31>:
  41d186:	bf00      	nop

Disassembly of section .text._tr_stored_block%149:

0041d188 <_tr_stored_block>:
{
  41d188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041d18a <.LCFI21>:
  41d18a:	4604      	mov	r4, r0
  41d18c:	460d      	mov	r5, r1
  41d18e:	4616      	mov	r6, r2

0041d190 <.LBB68>:
    send_bits(s, (STORED_BLOCK<<1)+last, 3);    /* send block type */
  41d190:	f241 62bc 	movw	r2, #5820	; 0x16bc

0041d194 <.LVL289>:
  41d194:	5882      	ldr	r2, [r0, r2]
  41d196:	2a0d      	cmp	r2, #13
  41d198:	dc34      	bgt.n	41d204 <.LVL300>
  41d19a:	f241 61b8 	movw	r1, #5816	; 0x16b8

0041d19e <.LVL290>:
  41d19e:	b29b      	uxth	r3, r3

0041d1a0 <.LVL291>:
  41d1a0:	4093      	lsls	r3, r2
  41d1a2:	5a40      	ldrh	r0, [r0, r1]

0041d1a4 <.LVL292>:
  41d1a4:	4303      	orrs	r3, r0
  41d1a6:	5263      	strh	r3, [r4, r1]
  41d1a8:	3203      	adds	r2, #3
  41d1aa:	f241 63bc 	movw	r3, #5820	; 0x16bc
  41d1ae:	50e2      	str	r2, [r4, r3]

0041d1b0 <.LBB70>:
    deflate_state *s;
    charf    *buf;    /* the input data */
    unsigned len;     /* its length */
    int      header;  /* true if block header must be written */
{
    bi_windup(s);        /* align on byte boundary */
  41d1b0:	4620      	mov	r0, r4
  41d1b2:	f003 fb29 	bl	420808 <.LFE69>

0041d1b6 <.LVL294>:

    if (header) {
        put_short(s, (ush)len);
  41d1b6:	68a1      	ldr	r1, [r4, #8]
  41d1b8:	6963      	ldr	r3, [r4, #20]
  41d1ba:	1c5a      	adds	r2, r3, #1
  41d1bc:	6162      	str	r2, [r4, #20]
  41d1be:	b2f2      	uxtb	r2, r6
  41d1c0:	54ca      	strb	r2, [r1, r3]
  41d1c2:	68a0      	ldr	r0, [r4, #8]
  41d1c4:	6961      	ldr	r1, [r4, #20]
  41d1c6:	1c4b      	adds	r3, r1, #1
  41d1c8:	6163      	str	r3, [r4, #20]
  41d1ca:	b2b3      	uxth	r3, r6
  41d1cc:	0a1f      	lsrs	r7, r3, #8
  41d1ce:	5447      	strb	r7, [r0, r1]
        put_short(s, (ush)~len);
  41d1d0:	68a0      	ldr	r0, [r4, #8]
  41d1d2:	6961      	ldr	r1, [r4, #20]
  41d1d4:	1c4f      	adds	r7, r1, #1
  41d1d6:	6167      	str	r7, [r4, #20]
  41d1d8:	43d2      	mvns	r2, r2
  41d1da:	5442      	strb	r2, [r0, r1]
  41d1dc:	68a1      	ldr	r1, [r4, #8]
  41d1de:	6962      	ldr	r2, [r4, #20]
  41d1e0:	1c50      	adds	r0, r2, #1
  41d1e2:	6160      	str	r0, [r4, #20]
  41d1e4:	43db      	mvns	r3, r3
  41d1e6:	f3c3 2307 	ubfx	r3, r3, #8, #8
  41d1ea:	548b      	strb	r3, [r1, r2]

0041d1ec <.LVL295>:
#endif
    }
#ifdef DEBUG
    s->bits_sent += (ulg)len<<3;
#endif
    while (len--) {
  41d1ec:	b14e      	cbz	r6, 41d202 <.LVL299>
  41d1ee:	19aa      	adds	r2, r5, r6

0041d1f0 <.LVL296>:
        put_byte(s, *buf++);
  41d1f0:	68a1      	ldr	r1, [r4, #8]
  41d1f2:	6963      	ldr	r3, [r4, #20]
  41d1f4:	1c58      	adds	r0, r3, #1
  41d1f6:	6160      	str	r0, [r4, #20]
  41d1f8:	f815 0b01 	ldrb.w	r0, [r5], #1

0041d1fc <.LVL297>:
  41d1fc:	54c8      	strb	r0, [r1, r3]

0041d1fe <.LVL298>:
    while (len--) {
  41d1fe:	42aa      	cmp	r2, r5
  41d200:	d1f6      	bne.n	41d1f0 <.LVL296>

0041d202 <.LVL299>:
  41d202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041d204 <.LVL300>:
  41d204:	b29b      	uxth	r3, r3

0041d206 <.LBB69>:
    send_bits(s, (STORED_BLOCK<<1)+last, 3);    /* send block type */
  41d206:	f241 61b8 	movw	r1, #5816	; 0x16b8

0041d20a <.LVL302>:
  41d20a:	fa03 f202 	lsl.w	r2, r3, r2
  41d20e:	5a40      	ldrh	r0, [r0, r1]

0041d210 <.LVL303>:
  41d210:	4302      	orrs	r2, r0
  41d212:	b212      	sxth	r2, r2
  41d214:	5262      	strh	r2, [r4, r1]
  41d216:	6960      	ldr	r0, [r4, #20]
  41d218:	1c47      	adds	r7, r0, #1
  41d21a:	6167      	str	r7, [r4, #20]
  41d21c:	68a7      	ldr	r7, [r4, #8]
  41d21e:	543a      	strb	r2, [r7, r0]
  41d220:	68a0      	ldr	r0, [r4, #8]
  41d222:	6967      	ldr	r7, [r4, #20]
  41d224:	1c7a      	adds	r2, r7, #1
  41d226:	6162      	str	r2, [r4, #20]
  41d228:	5a62      	ldrh	r2, [r4, r1]
  41d22a:	0a12      	lsrs	r2, r2, #8
  41d22c:	55c2      	strb	r2, [r0, r7]
  41d22e:	f241 60bc 	movw	r0, #5820	; 0x16bc
  41d232:	5822      	ldr	r2, [r4, r0]
  41d234:	f1c2 0710 	rsb	r7, r2, #16
  41d238:	413b      	asrs	r3, r7
  41d23a:	5263      	strh	r3, [r4, r1]
  41d23c:	3a0d      	subs	r2, #13
  41d23e:	5022      	str	r2, [r4, r0]

0041d240 <.LBE69>:
  41d240:	e7b6      	b.n	41d1b0 <.LBB70>

Disassembly of section .text.sha_test%150:

0041d244 <sha_test>:
{
  41d244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

0041d248 <.LCFI3>:
  41d248:	b097      	sub	sp, #92	; 0x5c

0041d24a <.LCFI4>:
  41d24a:	af00      	add	r7, sp, #0

0041d24c <.LCFI5>:
  41d24c:	f5ad 7d20 	sub.w	sp, sp, #640	; 0x280
  41d250:	f10d 057f 	add.w	r5, sp, #127	; 0x7f
  41d254:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
    test_sha[0] = d;
  41d258:	4b26      	ldr	r3, [pc, #152]	; (41d2f4 <.LCFI7+0x4>)
  41d25a:	f503 7294 	add.w	r2, r3, #296	; 0x128
  41d25e:	607a      	str	r2, [r7, #4]
  41d260:	f503 72d6 	add.w	r2, r3, #428	; 0x1ac
  41d264:	60ba      	str	r2, [r7, #8]
  41d266:	2280      	movs	r2, #128	; 0x80
  41d268:	60fa      	str	r2, [r7, #12]
  41d26a:	2214      	movs	r2, #20
  41d26c:	613a      	str	r2, [r7, #16]
    test_sha[1] = b;
  41d26e:	f503 71e2 	add.w	r1, r3, #452	; 0x1c4
  41d272:	6179      	str	r1, [r7, #20]
  41d274:	f503 7100 	add.w	r1, r3, #512	; 0x200
  41d278:	61b9      	str	r1, [r7, #24]
  41d27a:	2138      	movs	r1, #56	; 0x38
  41d27c:	61f9      	str	r1, [r7, #28]
  41d27e:	623a      	str	r2, [r7, #32]
    test_sha[2] = c;
  41d280:	f503 7106 	add.w	r1, r3, #536	; 0x218
  41d284:	6279      	str	r1, [r7, #36]	; 0x24
  41d286:	f503 7117 	add.w	r1, r3, #604	; 0x25c
  41d28a:	62b9      	str	r1, [r7, #40]	; 0x28
  41d28c:	2140      	movs	r1, #64	; 0x40
  41d28e:	62f9      	str	r1, [r7, #44]	; 0x2c
  41d290:	633a      	str	r2, [r7, #48]	; 0x30
    test_sha[3] = a;
  41d292:	637b      	str	r3, [r7, #52]	; 0x34
  41d294:	f503 731d 	add.w	r3, r3, #628	; 0x274
  41d298:	63bb      	str	r3, [r7, #56]	; 0x38
  41d29a:	2303      	movs	r3, #3
  41d29c:	63fb      	str	r3, [r7, #60]	; 0x3c
  41d29e:	643a      	str	r2, [r7, #64]	; 0x40
    CRYPT_SHA_Initialize(&sha);
  41d2a0:	4628      	mov	r0, r5
  41d2a2:	f004 ffcb 	bl	42223c <.LFE70>

0041d2a6 <.LVL8>:
    appData.sha_test_result = times;
  41d2a6:	2204      	movs	r2, #4
  41d2a8:	4b13      	ldr	r3, [pc, #76]	; (41d2f8 <.LCFI7+0x8>)
  41d2aa:	609a      	str	r2, [r3, #8]

0041d2ac <.LVL9>:
  41d2ac:	18bc      	adds	r4, r7, r2
  41d2ae:	f107 0944 	add.w	r9, r7, #68	; 0x44
        if (memcmp(hash, test_sha[i].output, SHA_DIGEST_SIZE) == 0)
  41d2b2:	f04f 0814 	mov.w	r8, #20
            appData.sha_test_result--;
  41d2b6:	461e      	mov	r6, r3
  41d2b8:	e002      	b.n	41d2c0 <.LVL10+0x6>

0041d2ba <.LVL10>:
  41d2ba:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  41d2bc:	454c      	cmp	r4, r9
  41d2be:	d015      	beq.n	41d2ec <.LVL13+0xc>
        CRYPT_SHA_DataAdd(&sha, (byte*)test_sha[i].input, (word32)test_sha[i].inLen);
  41d2c0:	68a2      	ldr	r2, [r4, #8]
  41d2c2:	6821      	ldr	r1, [r4, #0]
  41d2c4:	4628      	mov	r0, r5
  41d2c6:	f004 fe5d 	bl	421f84 <.LFE3>

0041d2ca <.LVL11>:
        CRYPT_SHA_Finalize(&sha, hash);
  41d2ca:	f107 0144 	add.w	r1, r7, #68	; 0x44
  41d2ce:	4628      	mov	r0, r5
  41d2d0:	f004 fe64 	bl	421f9c <.LFE6>

0041d2d4 <.LVL12>:
        if (memcmp(hash, test_sha[i].output, SHA_DIGEST_SIZE) == 0)
  41d2d4:	4642      	mov	r2, r8
  41d2d6:	6861      	ldr	r1, [r4, #4]
  41d2d8:	f107 0044 	add.w	r0, r7, #68	; 0x44
  41d2dc:	f003 f8c8 	bl	420470 <memcmp>

0041d2e0 <.LVL13>:
  41d2e0:	2800      	cmp	r0, #0
  41d2e2:	d1ea      	bne.n	41d2ba <.LVL10>
            appData.sha_test_result--;
  41d2e4:	68b3      	ldr	r3, [r6, #8]
  41d2e6:	3b01      	subs	r3, #1
  41d2e8:	60b3      	str	r3, [r6, #8]
  41d2ea:	e7e6      	b.n	41d2ba <.LVL10>
}
  41d2ec:	375c      	adds	r7, #92	; 0x5c

0041d2ee <.LCFI6>:
  41d2ee:	46bd      	mov	sp, r7

0041d2f0 <.LCFI7>:
  41d2f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  41d2f4:	0040da54 	.word	0x0040da54
  41d2f8:	2040d534 	.word	0x2040d534

Disassembly of section .text.hmac_sha512_test%151:

0041d2fc <hmac_sha512_test>:
{
  41d2fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

0041d300 <.LCFI31>:
  41d300:	f5ad 7d2b 	sub.w	sp, sp, #684	; 0x2ac

0041d304 <.LCFI32>:
    const char* keys[]=
  41d304:	ad0d      	add	r5, sp, #52	; 0x34
  41d306:	4b29      	ldr	r3, [pc, #164]	; (41d3ac <.LCFI33+0x6>)
  41d308:	f503 629c 	add.w	r2, r3, #1248	; 0x4e0
  41d30c:	ca07      	ldmia	r2, {r0, r1, r2}
  41d30e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    test_hmac[0] = a;
  41d312:	f203 4244 	addw	r2, r3, #1092	; 0x444
  41d316:	9201      	str	r2, [sp, #4]
  41d318:	f203 623c 	addw	r2, r3, #1596	; 0x63c
  41d31c:	9202      	str	r2, [sp, #8]
  41d31e:	2208      	movs	r2, #8
  41d320:	9203      	str	r2, [sp, #12]
  41d322:	2240      	movs	r2, #64	; 0x40
  41d324:	9204      	str	r2, [sp, #16]
    test_hmac[1] = b;
  41d326:	f203 4164 	addw	r1, r3, #1124	; 0x464
  41d32a:	9105      	str	r1, [sp, #20]
  41d32c:	f503 61d0 	add.w	r1, r3, #1664	; 0x680
  41d330:	9106      	str	r1, [sp, #24]
  41d332:	211c      	movs	r1, #28
  41d334:	9107      	str	r1, [sp, #28]
  41d336:	9208      	str	r2, [sp, #32]
    test_hmac[2] = c;
  41d338:	f503 6193 	add.w	r1, r3, #1176	; 0x498
  41d33c:	9109      	str	r1, [sp, #36]	; 0x24
  41d33e:	f203 63c4 	addw	r3, r3, #1732	; 0x6c4
  41d342:	930a      	str	r3, [sp, #40]	; 0x28
  41d344:	2332      	movs	r3, #50	; 0x32
  41d346:	930b      	str	r3, [sp, #44]	; 0x2c
  41d348:	920c      	str	r2, [sp, #48]	; 0x30
    appData.hmac_sha512_test_result = times;
  41d34a:	2203      	movs	r2, #3
  41d34c:	4b18      	ldr	r3, [pc, #96]	; (41d3b0 <.LCFI33+0xa>)
  41d34e:	629a      	str	r2, [r3, #40]	; 0x28

0041d350 <.LVL68>:
  41d350:	ac01      	add	r4, sp, #4
  41d352:	46a9      	mov	r9, r5
        wc_HmacSetKey(&hmac, SHA512, (byte*)keys[i], (word32)strlen(keys[i]));
  41d354:	f04f 0804 	mov.w	r8, #4
            appData.hmac_sha512_test_result--;
  41d358:	461f      	mov	r7, r3
  41d35a:	e002      	b.n	41d362 <.LVL69+0x6>

0041d35c <.LVL69>:
  41d35c:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  41d35e:	454c      	cmp	r4, r9
  41d360:	d01f      	beq.n	41d3a2 <.LVL74+0xc>
        wc_HmacSetKey(&hmac, SHA512, (byte*)keys[i], (word32)strlen(keys[i]));
  41d362:	f855 6b04 	ldr.w	r6, [r5], #4
  41d366:	4630      	mov	r0, r6
  41d368:	f7ff f98a 	bl	41c680 <strlen>

0041d36c <.LVL70>:
  41d36c:	4603      	mov	r3, r0
  41d36e:	4632      	mov	r2, r6
  41d370:	4641      	mov	r1, r8
  41d372:	a820      	add	r0, sp, #128	; 0x80
  41d374:	f7fb f814 	bl	4183a0 <.LFE173>

0041d378 <.LVL71>:
        wc_HmacUpdate(&hmac, (byte*)test_hmac[i].input,
  41d378:	68a2      	ldr	r2, [r4, #8]
  41d37a:	6821      	ldr	r1, [r4, #0]
  41d37c:	a820      	add	r0, sp, #128	; 0x80
  41d37e:	f001 fd89 	bl	41ee94 <.LFE56>

0041d382 <.LVL72>:
        wc_HmacFinal(&hmac, hash);
  41d382:	a910      	add	r1, sp, #64	; 0x40
  41d384:	a820      	add	r0, sp, #128	; 0x80
  41d386:	f7fc fa8b 	bl	4198a0 <.LBE56>

0041d38a <.LVL73>:
        if (memcmp(hash, test_hmac[i].output, SHA512_DIGEST_SIZE) == 0)
  41d38a:	2240      	movs	r2, #64	; 0x40
  41d38c:	6861      	ldr	r1, [r4, #4]
  41d38e:	eb0d 0002 	add.w	r0, sp, r2
  41d392:	f003 f86d 	bl	420470 <memcmp>

0041d396 <.LVL74>:
  41d396:	2800      	cmp	r0, #0
  41d398:	d1e0      	bne.n	41d35c <.LVL69>
            appData.hmac_sha512_test_result--;
  41d39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  41d39c:	3b01      	subs	r3, #1
  41d39e:	62bb      	str	r3, [r7, #40]	; 0x28
  41d3a0:	e7dc      	b.n	41d35c <.LVL69>
}
  41d3a2:	f50d 7d2b 	add.w	sp, sp, #684	; 0x2ac

0041d3a6 <.LCFI33>:
  41d3a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  41d3aa:	bf00      	nop
  41d3ac:	0040da54 	.word	0x0040da54
  41d3b0:	2040d534 	.word	0x2040d534

Disassembly of section .text.wc_ecc_curve_load%152:

0041d3b4 <wc_ecc_curve_load>:
{
  41d3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041d3b6 <.LCFI7>:
    if (dp == NULL || pCurve == NULL)
  41d3b6:	2800      	cmp	r0, #0
  41d3b8:	d055      	beq.n	41d466 <.LVL66>
  41d3ba:	4606      	mov	r6, r0
  41d3bc:	2900      	cmp	r1, #0
  41d3be:	d052      	beq.n	41d466 <.LVL66>
    curve = *pCurve;
  41d3c0:	680d      	ldr	r5, [r1, #0]

0041d3c2 <.LVL43>:
    if (curve->dp != dp) {
  41d3c2:	682b      	ldr	r3, [r5, #0]
  41d3c4:	4298      	cmp	r0, r3
  41d3c6:	d002      	beq.n	41d3ce <.LVL43+0xc>
        curve->load_mask = 0;
  41d3c8:	2300      	movs	r3, #0
  41d3ca:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    curve->dp = dp; /* set dp info */
  41d3ce:	602e      	str	r6, [r5, #0]
    load_items = (~curve->load_mask & load_mask);
  41d3d0:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
  41d3d4:	ea22 0403 	bic.w	r4, r2, r3

0041d3d8 <.LVL44>:
    curve->load_mask |= load_items;
  41d3d8:	4323      	orrs	r3, r4
  41d3da:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24

0041d3de <.LVL45>:
    if (load_items & ECC_CURVE_FIELD_PRIME)
  41d3de:	f014 0f01 	tst.w	r4, #1
  41d3e2:	d10f      	bne.n	41d404 <.LVL48>
    x = 0;
  41d3e4:	2700      	movs	r7, #0

0041d3e6 <.LVL46>:
    if (load_items & ECC_CURVE_FIELD_AF)
  41d3e6:	f014 0f02 	tst.w	r4, #2
  41d3ea:	d113      	bne.n	41d414 <.LVL54>
    if (load_items & ECC_CURVE_FIELD_ORDER)
  41d3ec:	f014 0f08 	tst.w	r4, #8
  41d3f0:	d119      	bne.n	41d426 <.LVL55+0x4>
    if (load_items & ECC_CURVE_FIELD_GX)
  41d3f2:	f014 0f10 	tst.w	r4, #16
  41d3f6:	d11f      	bne.n	41d438 <.LVL57+0x4>
    if (load_items & ECC_CURVE_FIELD_GY)
  41d3f8:	f014 0f20 	tst.w	r4, #32
  41d3fc:	d124      	bne.n	41d448 <.LVL59+0x4>
    if (x != 0) {
  41d3fe:	bb67      	cbnz	r7, 41d45a <.LBB15>

0041d400 <.LVL47>:
}
  41d400:	4638      	mov	r0, r7
  41d402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041d404 <.LVL48>:
        x += wc_ecc_curve_load_item(dp->prime, &curve->prime, curve,
  41d404:	2301      	movs	r3, #1
  41d406:	462a      	mov	r2, r5

0041d408 <.LVL49>:
  41d408:	1d29      	adds	r1, r5, #4

0041d40a <.LVL50>:
  41d40a:	68f0      	ldr	r0, [r6, #12]

0041d40c <.LVL51>:
  41d40c:	f003 fa7a 	bl	420904 <.LFE162>

0041d410 <.LVL52>:
  41d410:	4607      	mov	r7, r0

0041d412 <.LVL53>:
  41d412:	e7e8      	b.n	41d3e6 <.LVL46>

0041d414 <.LVL54>:
        x += wc_ecc_curve_load_item(dp->Af, &curve->Af, curve,
  41d414:	2302      	movs	r3, #2
  41d416:	462a      	mov	r2, r5
  41d418:	f105 0108 	add.w	r1, r5, #8
  41d41c:	6930      	ldr	r0, [r6, #16]
  41d41e:	f003 fa71 	bl	420904 <.LFE162>

0041d422 <.LVL55>:
  41d422:	4407      	add	r7, r0
  41d424:	e7e2      	b.n	41d3ec <.LVL46+0x6>
        x += wc_ecc_curve_load_item(dp->order, &curve->order, curve,
  41d426:	2308      	movs	r3, #8
  41d428:	462a      	mov	r2, r5
  41d42a:	f105 010c 	add.w	r1, r5, #12
  41d42e:	69b0      	ldr	r0, [r6, #24]
  41d430:	f003 fa68 	bl	420904 <.LFE162>

0041d434 <.LVL57>:
  41d434:	4407      	add	r7, r0
  41d436:	e7dc      	b.n	41d3f2 <.LVL46+0xc>
        x += wc_ecc_curve_load_item(dp->Gx, &curve->Gx, curve,
  41d438:	2310      	movs	r3, #16
  41d43a:	462a      	mov	r2, r5
  41d43c:	18e9      	adds	r1, r5, r3
  41d43e:	69f0      	ldr	r0, [r6, #28]
  41d440:	f003 fa60 	bl	420904 <.LFE162>

0041d444 <.LVL59>:
  41d444:	4407      	add	r7, r0
  41d446:	e7d7      	b.n	41d3f8 <.LVL46+0x12>
        x += wc_ecc_curve_load_item(dp->Gy, &curve->Gy, curve,
  41d448:	2320      	movs	r3, #32
  41d44a:	462a      	mov	r2, r5
  41d44c:	f105 0114 	add.w	r1, r5, #20
  41d450:	6a30      	ldr	r0, [r6, #32]
  41d452:	f003 fa57 	bl	420904 <.LFE162>

0041d456 <.LVL61>:
  41d456:	4407      	add	r7, r0
  41d458:	e7d1      	b.n	41d3fe <.LVL46+0x18>

0041d45a <.LBB15>:
    _wc_ecc_curve_free(curve);
  41d45a:	4628      	mov	r0, r5
  41d45c:	f002 fcb2 	bl	41fdc4 <.LFE46>

0041d460 <.LBE15>:
        ret = MP_READ_E;
  41d460:	f06f 076e 	mvn.w	r7, #110	; 0x6e

0041d464 <.LVL65>:
  41d464:	e7cc      	b.n	41d400 <.LVL47>

0041d466 <.LVL66>:
        return BAD_FUNC_ARG;
  41d466:	f06f 07ac 	mvn.w	r7, #172	; 0xac
  41d46a:	e7c9      	b.n	41d400 <.LVL47>

Disassembly of section .text.wc_InitSha512_ex%153:

0041d470 <wc_InitSha512_ex>:
        if (sha512 == NULL)
  41d470:	2800      	cmp	r0, #0
  41d472:	d035      	beq.n	41d4e0 <.LVL21>
    {
  41d474:	b430      	push	{r4, r5}

0041d476 <.LCFI4>:
  41d476:	4603      	mov	r3, r0
        sha512->heap = heap;
  41d478:	f8c0 10d8 	str.w	r1, [r0, #216]	; 0xd8

0041d47c <.LBB679>:
    sha512->digest[0] = W64LIT(0x6a09e667f3bcc908);
  41d47c:	a11a      	add	r1, pc, #104	; (adr r1, 41d4e8 <.LVL22+0x4>)
  41d47e:	e9d1 0100 	ldrd	r0, r1, [r1]

0041d482 <.LVL19>:
  41d482:	e9c3 0106 	strd	r0, r1, [r3, #24]
    sha512->digest[1] = W64LIT(0xbb67ae8584caa73b);
  41d486:	a11a      	add	r1, pc, #104	; (adr r1, 41d4f0 <.LVL22+0xc>)
  41d488:	e9d1 0100 	ldrd	r0, r1, [r1]
  41d48c:	e9c3 0108 	strd	r0, r1, [r3, #32]
    sha512->digest[2] = W64LIT(0x3c6ef372fe94f82b);
  41d490:	a119      	add	r1, pc, #100	; (adr r1, 41d4f8 <.LVL22+0x14>)
  41d492:	e9d1 0100 	ldrd	r0, r1, [r1]
  41d496:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
    sha512->digest[3] = W64LIT(0xa54ff53a5f1d36f1);
  41d49a:	a119      	add	r1, pc, #100	; (adr r1, 41d500 <.LVL22+0x1c>)
  41d49c:	e9d1 0100 	ldrd	r0, r1, [r1]
  41d4a0:	e9c3 010c 	strd	r0, r1, [r3, #48]	; 0x30
    sha512->digest[4] = W64LIT(0x510e527fade682d1);
  41d4a4:	a118      	add	r1, pc, #96	; (adr r1, 41d508 <.LVL22+0x24>)
  41d4a6:	e9d1 0100 	ldrd	r0, r1, [r1]
  41d4aa:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
    sha512->digest[5] = W64LIT(0x9b05688c2b3e6c1f);
  41d4ae:	a118      	add	r1, pc, #96	; (adr r1, 41d510 <.LVL22+0x2c>)
  41d4b0:	e9d1 0100 	ldrd	r0, r1, [r1]
  41d4b4:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
    sha512->digest[6] = W64LIT(0x1f83d9abfb41bd6b);
  41d4b8:	a117      	add	r1, pc, #92	; (adr r1, 41d518 <.LVL22+0x34>)
  41d4ba:	e9d1 0100 	ldrd	r0, r1, [r1]
  41d4be:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
    sha512->digest[7] = W64LIT(0x5be0cd19137e2179);
  41d4c2:	a117      	add	r1, pc, #92	; (adr r1, 41d520 <.LVL22+0x3c>)
  41d4c4:	e9d1 0100 	ldrd	r0, r1, [r1]
  41d4c8:	e9c3 0114 	strd	r0, r1, [r3, #80]	; 0x50
    sha512->buffLen = 0;
  41d4cc:	2000      	movs	r0, #0
  41d4ce:	6018      	str	r0, [r3, #0]
    sha512->loLen   = 0;
  41d4d0:	2400      	movs	r4, #0
  41d4d2:	2500      	movs	r5, #0
  41d4d4:	e9c3 4502 	strd	r4, r5, [r3, #8]
    sha512->hiLen   = 0;
  41d4d8:	e9c3 4504 	strd	r4, r5, [r3, #16]

0041d4dc <.LBE679>:
    }
  41d4dc:	bc30      	pop	{r4, r5}

0041d4de <.LCFI5>:
  41d4de:	4770      	bx	lr

0041d4e0 <.LVL21>:
            return BAD_FUNC_ARG;
  41d4e0:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d4e4 <.LVL22>:
  41d4e4:	4770      	bx	lr
  41d4e6:	bf00      	nop
  41d4e8:	f3bcc908 	.word	0xf3bcc908
  41d4ec:	6a09e667 	.word	0x6a09e667
  41d4f0:	84caa73b 	.word	0x84caa73b
  41d4f4:	bb67ae85 	.word	0xbb67ae85
  41d4f8:	fe94f82b 	.word	0xfe94f82b
  41d4fc:	3c6ef372 	.word	0x3c6ef372
  41d500:	5f1d36f1 	.word	0x5f1d36f1
  41d504:	a54ff53a 	.word	0xa54ff53a
  41d508:	ade682d1 	.word	0xade682d1
  41d50c:	510e527f 	.word	0x510e527f
  41d510:	2b3e6c1f 	.word	0x2b3e6c1f
  41d514:	9b05688c 	.word	0x9b05688c
  41d518:	fb41bd6b 	.word	0xfb41bd6b
  41d51c:	1f83d9ab 	.word	0x1f83d9ab
  41d520:	137e2179 	.word	0x137e2179
  41d524:	5be0cd19 	.word	0x5be0cd19

Disassembly of section .text.wc_InitSha384_ex%154:

0041d528 <wc_InitSha384_ex>:
#else
int wc_InitSha384_ex(Sha384* sha384, void* heap, int devId)
{
    int ret;

    if (sha384 == NULL) {
  41d528:	2800      	cmp	r0, #0
  41d52a:	d035      	beq.n	41d598 <.LVL142>
{
  41d52c:	b430      	push	{r4, r5}

0041d52e <.LCFI19>:
  41d52e:	4603      	mov	r3, r0
        return BAD_FUNC_ARG;
    }

    sha384->heap = heap;
  41d530:	f8c0 10d8 	str.w	r1, [r0, #216]	; 0xd8

0041d534 <.LBB925>:
    sha384->digest[0] = W64LIT(0xcbbb9d5dc1059ed8);
  41d534:	a11a      	add	r1, pc, #104	; (adr r1, 41d5a0 <.LVL143+0x4>)
  41d536:	e9d1 0100 	ldrd	r0, r1, [r1]

0041d53a <.LVL140>:
  41d53a:	e9c3 0106 	strd	r0, r1, [r3, #24]
    sha384->digest[1] = W64LIT(0x629a292a367cd507);
  41d53e:	a11a      	add	r1, pc, #104	; (adr r1, 41d5a8 <.LVL143+0xc>)
  41d540:	e9d1 0100 	ldrd	r0, r1, [r1]
  41d544:	e9c3 0108 	strd	r0, r1, [r3, #32]
    sha384->digest[2] = W64LIT(0x9159015a3070dd17);
  41d548:	a119      	add	r1, pc, #100	; (adr r1, 41d5b0 <.LVL143+0x14>)
  41d54a:	e9d1 0100 	ldrd	r0, r1, [r1]
  41d54e:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
    sha384->digest[3] = W64LIT(0x152fecd8f70e5939);
  41d552:	a119      	add	r1, pc, #100	; (adr r1, 41d5b8 <.LVL143+0x1c>)
  41d554:	e9d1 0100 	ldrd	r0, r1, [r1]
  41d558:	e9c3 010c 	strd	r0, r1, [r3, #48]	; 0x30
    sha384->digest[4] = W64LIT(0x67332667ffc00b31);
  41d55c:	a118      	add	r1, pc, #96	; (adr r1, 41d5c0 <.LVL143+0x24>)
  41d55e:	e9d1 0100 	ldrd	r0, r1, [r1]
  41d562:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
    sha384->digest[5] = W64LIT(0x8eb44a8768581511);
  41d566:	a118      	add	r1, pc, #96	; (adr r1, 41d5c8 <.LVL143+0x2c>)
  41d568:	e9d1 0100 	ldrd	r0, r1, [r1]
  41d56c:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
    sha384->digest[6] = W64LIT(0xdb0c2e0d64f98fa7);
  41d570:	a117      	add	r1, pc, #92	; (adr r1, 41d5d0 <.LVL143+0x34>)
  41d572:	e9d1 0100 	ldrd	r0, r1, [r1]
  41d576:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
    sha384->digest[7] = W64LIT(0x47b5481dbefa4fa4);
  41d57a:	a117      	add	r1, pc, #92	; (adr r1, 41d5d8 <.LVL143+0x3c>)
  41d57c:	e9d1 0100 	ldrd	r0, r1, [r1]
  41d580:	e9c3 0114 	strd	r0, r1, [r3, #80]	; 0x50
    sha384->buffLen = 0;
  41d584:	2000      	movs	r0, #0
  41d586:	6018      	str	r0, [r3, #0]
    sha384->loLen   = 0;
  41d588:	2400      	movs	r4, #0
  41d58a:	2500      	movs	r5, #0
  41d58c:	e9c3 4502 	strd	r4, r5, [r3, #8]
    sha384->hiLen   = 0;
  41d590:	e9c3 4504 	strd	r4, r5, [r3, #16]

0041d594 <.LBE925>:
#else
    (void)devId;
#endif /* WOLFSSL_ASYNC_CRYPT */

    return ret;
}
  41d594:	bc30      	pop	{r4, r5}

0041d596 <.LCFI20>:
  41d596:	4770      	bx	lr

0041d598 <.LVL142>:
        return BAD_FUNC_ARG;
  41d598:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d59c <.LVL143>:
  41d59c:	4770      	bx	lr
  41d59e:	bf00      	nop
  41d5a0:	c1059ed8 	.word	0xc1059ed8
  41d5a4:	cbbb9d5d 	.word	0xcbbb9d5d
  41d5a8:	367cd507 	.word	0x367cd507
  41d5ac:	629a292a 	.word	0x629a292a
  41d5b0:	3070dd17 	.word	0x3070dd17
  41d5b4:	9159015a 	.word	0x9159015a
  41d5b8:	f70e5939 	.word	0xf70e5939
  41d5bc:	152fecd8 	.word	0x152fecd8
  41d5c0:	ffc00b31 	.word	0xffc00b31
  41d5c4:	67332667 	.word	0x67332667
  41d5c8:	68581511 	.word	0x68581511
  41d5cc:	8eb44a87 	.word	0x8eb44a87
  41d5d0:	64f98fa7 	.word	0x64f98fa7
  41d5d4:	db0c2e0d 	.word	0xdb0c2e0d
  41d5d8:	befa4fa4 	.word	0xbefa4fa4
  41d5dc:	47b5481d 	.word	0x47b5481d

Disassembly of section .text.wc_ShaUpdate%155:

0041d5e0 <wc_ShaUpdate>:
    if (sha == NULL ||(data == NULL && len > 0)) {
  41d5e0:	2800      	cmp	r0, #0
  41d5e2:	d04a      	beq.n	41d67a <.LCFI4>
{
  41d5e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

0041d5e8 <.LCFI3>:
  41d5e8:	460f      	mov	r7, r1
  41d5ea:	4616      	mov	r6, r2
  41d5ec:	4604      	mov	r4, r0
    if (sha == NULL ||(data == NULL && len > 0)) {
  41d5ee:	b909      	cbnz	r1, 41d5f4 <.LCFI3+0xc>
  41d5f0:	2a00      	cmp	r2, #0
  41d5f2:	d145      	bne.n	41d680 <.LCFI5>
    local = (byte*)sha->buffer;
  41d5f4:	f104 080c 	add.w	r8, r4, #12

0041d5f8 <.LVL351>:
    if (sha->buffLen >= SHA_BLOCK_SIZE)
  41d5f8:	6823      	ldr	r3, [r4, #0]
  41d5fa:	2b3f      	cmp	r3, #63	; 0x3f
  41d5fc:	d844      	bhi.n	41d688 <.LVL367>
    while (len) {
  41d5fe:	2e00      	cmp	r6, #0
  41d600:	d046      	beq.n	41d690 <.LVL369>
  41d602:	f104 0548 	add.w	r5, r4, #72	; 0x48

0041d606 <.LBB771>:
            sha->buffLen = 0;
  41d606:	f04f 0900 	mov.w	r9, #0
  41d60a:	e002      	b.n	41d612 <.LBB782>

0041d60c <.LVL352>:
  41d60c:	f8c4 9000 	str.w	r9, [r4]

0041d610 <.LBE771>:
    while (len) {
  41d610:	b386      	cbz	r6, 41d674 <.LBE780>

0041d612 <.LBB782>:
        word32 add = min(len, SHA_BLOCK_SIZE - sha->buffLen);
  41d612:	6820      	ldr	r0, [r4, #0]

0041d614 <.LVL353>:
  41d614:	f1c0 0a40 	rsb	sl, r0, #64	; 0x40

0041d618 <.LBB772>:
        return a > b ? b : a;
  41d618:	45b2      	cmp	sl, r6
  41d61a:	bf28      	it	cs
  41d61c:	46b2      	movcs	sl, r6

0041d61e <.LBE772>:
        XMEMCPY(&local[sha->buffLen], data, add);
  41d61e:	4652      	mov	r2, sl
  41d620:	4639      	mov	r1, r7
  41d622:	4440      	add	r0, r8
  41d624:	f7fd f9ae 	bl	41a984 <.LFE14>

0041d628 <.LVL356>:
        sha->buffLen += add;
  41d628:	6823      	ldr	r3, [r4, #0]
  41d62a:	4453      	add	r3, sl
  41d62c:	6023      	str	r3, [r4, #0]
        data         += add;
  41d62e:	4457      	add	r7, sl
        len          -= add;
  41d630:	eba6 060a 	sub.w	r6, r6, sl
        if (sha->buffLen == SHA_BLOCK_SIZE) {
  41d634:	2b40      	cmp	r3, #64	; 0x40
  41d636:	d1eb      	bne.n	41d610 <.LBE771>
  41d638:	f104 0108 	add.w	r1, r4, #8

0041d63c <.LBB774>:
        out[i] = ByteReverseWord32(in[i]);
  41d63c:	684a      	ldr	r2, [r1, #4]

0041d63e <.LBB776>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  41d63e:	0a13      	lsrs	r3, r2, #8
  41d640:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  41d644:	0212      	lsls	r2, r2, #8
  41d646:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
  41d64a:	4313      	orrs	r3, r2

0041d64c <.LBB778>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  41d64c:	ea4f 4333 	mov.w	r3, r3, ror #16

0041d650 <.LBE776>:
        out[i] = ByteReverseWord32(in[i]);
  41d650:	f841 3f04 	str.w	r3, [r1, #4]!
    for (i = 0; i < count; i++)
  41d654:	42a9      	cmp	r1, r5
  41d656:	d1f1      	bne.n	41d63c <.LBB774>

0041d658 <.LBE774>:
            XTRANSFORM(sha, local);
  41d658:	4641      	mov	r1, r8
  41d65a:	4620      	mov	r0, r4
  41d65c:	f7ec fef2 	bl	40a444 <Transform>

0041d660 <.LBB780>:
    word32 tmp = sha->loLen;
  41d660:	6862      	ldr	r2, [r4, #4]

0041d662 <.LVL361>:
    if ( (sha->loLen += len) < tmp)
  41d662:	f102 0340 	add.w	r3, r2, #64	; 0x40
  41d666:	6063      	str	r3, [r4, #4]
  41d668:	429a      	cmp	r2, r3
  41d66a:	d9cf      	bls.n	41d60c <.LVL352>
        sha->hiLen++;                       /* carry low to high */
  41d66c:	68a3      	ldr	r3, [r4, #8]
  41d66e:	3301      	adds	r3, #1
  41d670:	60a3      	str	r3, [r4, #8]
  41d672:	e7cb      	b.n	41d60c <.LVL352>

0041d674 <.LBE780>:
    return 0;
  41d674:	2000      	movs	r0, #0
  41d676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0041d67a <.LCFI4>:
        return BAD_FUNC_ARG;
  41d67a:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d67e <.LVL364>:
  41d67e:	4770      	bx	lr

0041d680 <.LCFI5>:
  41d680:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041d684 <.LVL366>:
  41d684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0041d688 <.LVL367>:
        return BUFFER_E;
  41d688:	f06f 0083 	mvn.w	r0, #131	; 0x83

0041d68c <.LVL368>:
  41d68c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0041d690 <.LVL369>:
    return 0;
  41d690:	2000      	movs	r0, #0

0041d692 <.LVL370>:
}
  41d692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

Disassembly of section .text.wc_Sha256Update%156:

0041d696 <wc_Sha256Update>:
        if (sha256 == NULL || (data == NULL && len > 0)) {
  41d696:	2800      	cmp	r0, #0
  41d698:	d04c      	beq.n	41d734 <.LBB214>

0041d69a <.LBE196>:
    {
  41d69a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

0041d69e <.LCFI5>:
  41d69e:	460f      	mov	r7, r1
  41d6a0:	4616      	mov	r6, r2
  41d6a2:	4604      	mov	r4, r0

0041d6a4 <.LBB213>:
        if (sha256 == NULL || (data == NULL && len > 0)) {
  41d6a4:	b909      	cbnz	r1, 41d6aa <.LBB213+0x6>
  41d6a6:	2a00      	cmp	r2, #0
  41d6a8:	d148      	bne.n	41d73c <.LBB215>
        local = (byte*)sha256->buffer;
  41d6aa:	f104 0820 	add.w	r8, r4, #32

0041d6ae <.LVL49>:
        if (sha256->buffLen >= SHA256_BLOCK_SIZE)
  41d6ae:	6e23      	ldr	r3, [r4, #96]	; 0x60
  41d6b0:	2b3f      	cmp	r3, #63	; 0x3f
  41d6b2:	d846      	bhi.n	41d742 <.LVL67>
        while (len) {
  41d6b4:	2e00      	cmp	r6, #0
  41d6b6:	d047      	beq.n	41d748 <.LVL67+0x6>
  41d6b8:	f104 055c 	add.w	r5, r4, #92	; 0x5c

0041d6bc <.LBB198>:
                sha256->buffLen = 0;
  41d6bc:	f04f 0900 	mov.w	r9, #0
  41d6c0:	e002      	b.n	41d6c8 <.LBB209>

0041d6c2 <.LVL50>:
  41d6c2:	f8c4 9060 	str.w	r9, [r4, #96]	; 0x60

0041d6c6 <.LBE198>:
        while (len) {
  41d6c6:	b38e      	cbz	r6, 41d72c <.LBE207>

0041d6c8 <.LBB209>:
            word32 add = min(len, SHA256_BLOCK_SIZE - sha256->buffLen);
  41d6c8:	6e20      	ldr	r0, [r4, #96]	; 0x60

0041d6ca <.LVL52>:
  41d6ca:	f1c0 0a40 	rsb	sl, r0, #64	; 0x40

0041d6ce <.LBB199>:
        return a > b ? b : a;
  41d6ce:	45b2      	cmp	sl, r6
  41d6d0:	bf28      	it	cs
  41d6d2:	46b2      	movcs	sl, r6

0041d6d4 <.LBE199>:
            XMEMCPY(&local[sha256->buffLen], data, add);
  41d6d4:	4652      	mov	r2, sl
  41d6d6:	4639      	mov	r1, r7
  41d6d8:	4440      	add	r0, r8
  41d6da:	f7fd f953 	bl	41a984 <.LFE14>

0041d6de <.LVL55>:
            sha256->buffLen += add;
  41d6de:	6e23      	ldr	r3, [r4, #96]	; 0x60
  41d6e0:	4453      	add	r3, sl
  41d6e2:	6623      	str	r3, [r4, #96]	; 0x60
            data            += add;
  41d6e4:	4457      	add	r7, sl
            len             -= add;
  41d6e6:	eba6 060a 	sub.w	r6, r6, sl
            if (sha256->buffLen == SHA256_BLOCK_SIZE) {
  41d6ea:	2b40      	cmp	r3, #64	; 0x40
  41d6ec:	d1eb      	bne.n	41d6c6 <.LBE198>
  41d6ee:	f104 011c 	add.w	r1, r4, #28

0041d6f2 <.LBB201>:
        out[i] = ByteReverseWord32(in[i]);
  41d6f2:	684a      	ldr	r2, [r1, #4]

0041d6f4 <.LBB203>:
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  41d6f4:	0a13      	lsrs	r3, r2, #8
  41d6f6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
  41d6fa:	0212      	lsls	r2, r2, #8
  41d6fc:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
  41d700:	4313      	orrs	r3, r2

0041d702 <.LBB205>:
        return (x << y) | (x >> (sizeof(y) * 8 - y));
  41d702:	ea4f 4333 	mov.w	r3, r3, ror #16

0041d706 <.LBE203>:
        out[i] = ByteReverseWord32(in[i]);
  41d706:	f841 3f04 	str.w	r3, [r1, #4]!
    for (i = 0; i < count; i++)
  41d70a:	42a9      	cmp	r1, r5
  41d70c:	d1f1      	bne.n	41d6f2 <.LBB201>

0041d70e <.LBE201>:
                ret = XTRANSFORM(sha256, local);
  41d70e:	4620      	mov	r0, r4
  41d710:	f7f9 f8b8 	bl	416884 <.LBE46>

0041d714 <.LVL59>:
                if (ret != 0) {
  41d714:	4603      	mov	r3, r0
  41d716:	b950      	cbnz	r0, 41d72e <.LBE213>

0041d718 <.LBB207>:
        word32 tmp = sha256->loLen;
  41d718:	6e62      	ldr	r2, [r4, #100]	; 0x64

0041d71a <.LVL61>:
        if ( (sha256->loLen += len) < tmp)
  41d71a:	f102 0340 	add.w	r3, r2, #64	; 0x40
  41d71e:	6663      	str	r3, [r4, #100]	; 0x64
  41d720:	429a      	cmp	r2, r3
  41d722:	d9ce      	bls.n	41d6c2 <.LVL50>
            sha256->hiLen++;                       /* carry low to high */
  41d724:	6ea3      	ldr	r3, [r4, #104]	; 0x68
  41d726:	3301      	adds	r3, #1
  41d728:	66a3      	str	r3, [r4, #104]	; 0x68
  41d72a:	e7ca      	b.n	41d6c2 <.LVL50>

0041d72c <.LBE207>:
        while (len) {
  41d72c:	2300      	movs	r3, #0

0041d72e <.LBE213>:
    }
  41d72e:	4618      	mov	r0, r3
  41d730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0041d734 <.LBB214>:
            return BAD_FUNC_ARG;
  41d734:	f06f 03ac 	mvn.w	r3, #172	; 0xac

0041d738 <.LBE214>:
    }
  41d738:	4618      	mov	r0, r3

0041d73a <.LVL65>:
  41d73a:	4770      	bx	lr

0041d73c <.LBB215>:
            return BAD_FUNC_ARG;
  41d73c:	f06f 03ac 	mvn.w	r3, #172	; 0xac
  41d740:	e7f5      	b.n	41d72e <.LBE213>

0041d742 <.LVL67>:
            return BUFFER_E;
  41d742:	f06f 0383 	mvn.w	r3, #131	; 0x83
  41d746:	e7f2      	b.n	41d72e <.LBE213>
        while (len) {
  41d748:	2300      	movs	r3, #0

0041d74a <.LBE215>:
        return Sha256Update(sha256, data, len);
  41d74a:	e7f0      	b.n	41d72e <.LBE213>

Disassembly of section .text.hmac_md5_test%157:

0041d74c <hmac_md5_test>:
{
  41d74c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

0041d750 <.LCFI19>:
  41d750:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c

0041d754 <.LCFI20>:
    const char* keys[]=
  41d754:	ad0d      	add	r5, sp, #52	; 0x34
  41d756:	4b28      	ldr	r3, [pc, #160]	; (41d7f8 <.LCFI21+0x4>)
  41d758:	f503 6287 	add.w	r2, r3, #1080	; 0x438
  41d75c:	ca07      	ldmia	r2, {r0, r1, r2}
  41d75e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    test_hmac[0] = a;
  41d762:	f203 4244 	addw	r2, r3, #1092	; 0x444
  41d766:	9201      	str	r2, [sp, #4]
  41d768:	f503 628a 	add.w	r2, r3, #1104	; 0x450
  41d76c:	9202      	str	r2, [sp, #8]
  41d76e:	2208      	movs	r2, #8
  41d770:	9203      	str	r2, [sp, #12]
  41d772:	2210      	movs	r2, #16
  41d774:	9204      	str	r2, [sp, #16]
    test_hmac[1] = b;
  41d776:	f203 4164 	addw	r1, r3, #1124	; 0x464
  41d77a:	9105      	str	r1, [sp, #20]
  41d77c:	f203 4184 	addw	r1, r3, #1156	; 0x484
  41d780:	9106      	str	r1, [sp, #24]
  41d782:	211c      	movs	r1, #28
  41d784:	9107      	str	r1, [sp, #28]
  41d786:	9208      	str	r2, [sp, #32]
    test_hmac[2] = c;
  41d788:	f503 6193 	add.w	r1, r3, #1176	; 0x498
  41d78c:	9109      	str	r1, [sp, #36]	; 0x24
  41d78e:	f203 43cc 	addw	r3, r3, #1228	; 0x4cc
  41d792:	930a      	str	r3, [sp, #40]	; 0x28
  41d794:	2332      	movs	r3, #50	; 0x32
  41d796:	930b      	str	r3, [sp, #44]	; 0x2c
  41d798:	920c      	str	r2, [sp, #48]	; 0x30
    appData.hmac_md5_test_result = times;
  41d79a:	2203      	movs	r2, #3
  41d79c:	4b17      	ldr	r3, [pc, #92]	; (41d7fc <.LCFI21+0x8>)
  41d79e:	619a      	str	r2, [r3, #24]

0041d7a0 <.LVL36>:
  41d7a0:	ac01      	add	r4, sp, #4
  41d7a2:	46a9      	mov	r9, r5
        wc_HmacSetKey(&hmac, MD5, (byte*)keys[i], (word32)strlen(keys[i]));
  41d7a4:	f04f 0800 	mov.w	r8, #0
            appData.hmac_md5_test_result--;
  41d7a8:	461f      	mov	r7, r3
  41d7aa:	e002      	b.n	41d7b2 <.LVL37+0x6>

0041d7ac <.LVL37>:
  41d7ac:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  41d7ae:	454c      	cmp	r4, r9
  41d7b0:	d01e      	beq.n	41d7f0 <.LVL42+0xc>
        wc_HmacSetKey(&hmac, MD5, (byte*)keys[i], (word32)strlen(keys[i]));
  41d7b2:	f855 6b04 	ldr.w	r6, [r5], #4
  41d7b6:	4630      	mov	r0, r6
  41d7b8:	f7fe ff62 	bl	41c680 <strlen>

0041d7bc <.LVL38>:
  41d7bc:	4603      	mov	r3, r0
  41d7be:	4632      	mov	r2, r6
  41d7c0:	4641      	mov	r1, r8
  41d7c2:	a814      	add	r0, sp, #80	; 0x50
  41d7c4:	f7fa fdec 	bl	4183a0 <.LFE173>

0041d7c8 <.LVL39>:
        wc_HmacUpdate(&hmac, (byte*)test_hmac[i].input,
  41d7c8:	68a2      	ldr	r2, [r4, #8]
  41d7ca:	6821      	ldr	r1, [r4, #0]
  41d7cc:	a814      	add	r0, sp, #80	; 0x50
  41d7ce:	f001 fb61 	bl	41ee94 <.LFE56>

0041d7d2 <.LVL40>:
        wc_HmacFinal(&hmac, hash);
  41d7d2:	a910      	add	r1, sp, #64	; 0x40
  41d7d4:	a814      	add	r0, sp, #80	; 0x50
  41d7d6:	f7fc f863 	bl	4198a0 <.LBE56>

0041d7da <.LVL41>:
        if (memcmp(hash, test_hmac[i].output, MD5_DIGEST_SIZE) == 0)
  41d7da:	2210      	movs	r2, #16
  41d7dc:	6861      	ldr	r1, [r4, #4]
  41d7de:	a810      	add	r0, sp, #64	; 0x40
  41d7e0:	f002 fe46 	bl	420470 <memcmp>

0041d7e4 <.LVL42>:
  41d7e4:	2800      	cmp	r0, #0
  41d7e6:	d1e1      	bne.n	41d7ac <.LVL37>
            appData.hmac_md5_test_result--;
  41d7e8:	69bb      	ldr	r3, [r7, #24]
  41d7ea:	3b01      	subs	r3, #1
  41d7ec:	61bb      	str	r3, [r7, #24]
  41d7ee:	e7dd      	b.n	41d7ac <.LVL37>
}
  41d7f0:	f50d 7d1f 	add.w	sp, sp, #636	; 0x27c

0041d7f4 <.LCFI21>:
  41d7f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  41d7f8:	0040da54 	.word	0x0040da54
  41d7fc:	2040d534 	.word	0x2040d534

Disassembly of section .text.hmac_sha_test%158:

0041d800 <hmac_sha_test>:
{
  41d800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

0041d804 <.LCFI22>:
  41d804:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c

0041d808 <.LCFI23>:
    const char* keys[]=
  41d808:	ad0c      	add	r5, sp, #48	; 0x30
  41d80a:	4b28      	ldr	r3, [pc, #160]	; (41d8ac <.LCFI24+0x4>)
  41d80c:	f503 629c 	add.w	r2, r3, #1248	; 0x4e0
  41d810:	ca07      	ldmia	r2, {r0, r1, r2}
  41d812:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    test_hmac[0] = a;
  41d816:	f203 4244 	addw	r2, r3, #1092	; 0x444
  41d81a:	9200      	str	r2, [sp, #0]
  41d81c:	f203 42ec 	addw	r2, r3, #1260	; 0x4ec
  41d820:	9201      	str	r2, [sp, #4]
  41d822:	2208      	movs	r2, #8
  41d824:	9202      	str	r2, [sp, #8]
  41d826:	2214      	movs	r2, #20
  41d828:	9203      	str	r2, [sp, #12]
    test_hmac[1] = b;
  41d82a:	f203 4164 	addw	r1, r3, #1124	; 0x464
  41d82e:	9104      	str	r1, [sp, #16]
  41d830:	f203 5104 	addw	r1, r3, #1284	; 0x504
  41d834:	9105      	str	r1, [sp, #20]
  41d836:	211c      	movs	r1, #28
  41d838:	9106      	str	r1, [sp, #24]
  41d83a:	9207      	str	r2, [sp, #28]
    test_hmac[2] = c;
  41d83c:	f503 6193 	add.w	r1, r3, #1176	; 0x498
  41d840:	9108      	str	r1, [sp, #32]
  41d842:	f203 531c 	addw	r3, r3, #1308	; 0x51c
  41d846:	9309      	str	r3, [sp, #36]	; 0x24
  41d848:	2332      	movs	r3, #50	; 0x32
  41d84a:	930a      	str	r3, [sp, #40]	; 0x28
  41d84c:	920b      	str	r2, [sp, #44]	; 0x2c
    appData.hmac_sha_test_result = times;
  41d84e:	2203      	movs	r2, #3
  41d850:	4b17      	ldr	r3, [pc, #92]	; (41d8b0 <.LCFI24+0x8>)
  41d852:	61da      	str	r2, [r3, #28]

0041d854 <.LVL44>:
  41d854:	466c      	mov	r4, sp
  41d856:	46a9      	mov	r9, r5
        wc_HmacSetKey(&hmac, SHA, (byte*)keys[i], (word32)strlen(keys[i]));
  41d858:	f04f 0801 	mov.w	r8, #1
            appData.hmac_sha_test_result--;
  41d85c:	461f      	mov	r7, r3
  41d85e:	e002      	b.n	41d866 <.LVL45+0x6>

0041d860 <.LVL45>:
  41d860:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  41d862:	454c      	cmp	r4, r9
  41d864:	d01e      	beq.n	41d8a4 <.LVL50+0xc>
        wc_HmacSetKey(&hmac, SHA, (byte*)keys[i], (word32)strlen(keys[i]));
  41d866:	f855 6b04 	ldr.w	r6, [r5], #4
  41d86a:	4630      	mov	r0, r6
  41d86c:	f7fe ff08 	bl	41c680 <strlen>

0041d870 <.LVL46>:
  41d870:	4603      	mov	r3, r0
  41d872:	4632      	mov	r2, r6
  41d874:	4641      	mov	r1, r8
  41d876:	a814      	add	r0, sp, #80	; 0x50
  41d878:	f7fa fd92 	bl	4183a0 <.LFE173>

0041d87c <.LVL47>:
        wc_HmacUpdate(&hmac, (byte*)test_hmac[i].input,
  41d87c:	68a2      	ldr	r2, [r4, #8]
  41d87e:	6821      	ldr	r1, [r4, #0]
  41d880:	a814      	add	r0, sp, #80	; 0x50
  41d882:	f001 fb07 	bl	41ee94 <.LFE56>

0041d886 <.LVL48>:
        wc_HmacFinal(&hmac, hash);
  41d886:	a90f      	add	r1, sp, #60	; 0x3c
  41d888:	a814      	add	r0, sp, #80	; 0x50
  41d88a:	f7fc f809 	bl	4198a0 <.LBE56>

0041d88e <.LVL49>:
        if (memcmp(hash, test_hmac[i].output, SHA_DIGEST_SIZE) == 0)
  41d88e:	2214      	movs	r2, #20
  41d890:	6861      	ldr	r1, [r4, #4]
  41d892:	a80f      	add	r0, sp, #60	; 0x3c
  41d894:	f002 fdec 	bl	420470 <memcmp>

0041d898 <.LVL50>:
  41d898:	2800      	cmp	r0, #0
  41d89a:	d1e1      	bne.n	41d860 <.LVL45>
            appData.hmac_sha_test_result--;
  41d89c:	69fb      	ldr	r3, [r7, #28]
  41d89e:	3b01      	subs	r3, #1
  41d8a0:	61fb      	str	r3, [r7, #28]
  41d8a2:	e7dd      	b.n	41d860 <.LVL45>
}
  41d8a4:	f50d 7d1f 	add.w	sp, sp, #636	; 0x27c

0041d8a8 <.LCFI24>:
  41d8a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  41d8ac:	0040da54 	.word	0x0040da54
  41d8b0:	2040d534 	.word	0x2040d534

Disassembly of section .text.hmac_sha256_test%159:

0041d8b4 <hmac_sha256_test>:
{
  41d8b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

0041d8b8 <.LCFI25>:
  41d8b8:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c

0041d8bc <.LCFI26>:
    const char* keys[]=
  41d8bc:	ad0d      	add	r5, sp, #52	; 0x34
  41d8be:	4b28      	ldr	r3, [pc, #160]	; (41d960 <.LCFI27+0x4>)
  41d8c0:	f503 629c 	add.w	r2, r3, #1248	; 0x4e0
  41d8c4:	ca07      	ldmia	r2, {r0, r1, r2}
  41d8c6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    test_hmac[0] = a;
  41d8ca:	f203 4244 	addw	r2, r3, #1092	; 0x444
  41d8ce:	9201      	str	r2, [sp, #4]
  41d8d0:	f203 5234 	addw	r2, r3, #1332	; 0x534
  41d8d4:	9202      	str	r2, [sp, #8]
  41d8d6:	2208      	movs	r2, #8
  41d8d8:	9203      	str	r2, [sp, #12]
  41d8da:	2220      	movs	r2, #32
  41d8dc:	9204      	str	r2, [sp, #16]
    test_hmac[1] = b;
  41d8de:	f203 4164 	addw	r1, r3, #1124	; 0x464
  41d8e2:	9105      	str	r1, [sp, #20]
  41d8e4:	f503 61ab 	add.w	r1, r3, #1368	; 0x558
  41d8e8:	9106      	str	r1, [sp, #24]
  41d8ea:	211c      	movs	r1, #28
  41d8ec:	9107      	str	r1, [sp, #28]
  41d8ee:	9208      	str	r2, [sp, #32]
    test_hmac[2] = c;
  41d8f0:	f503 6193 	add.w	r1, r3, #1176	; 0x498
  41d8f4:	9109      	str	r1, [sp, #36]	; 0x24
  41d8f6:	f203 537c 	addw	r3, r3, #1404	; 0x57c
  41d8fa:	930a      	str	r3, [sp, #40]	; 0x28
  41d8fc:	2332      	movs	r3, #50	; 0x32
  41d8fe:	930b      	str	r3, [sp, #44]	; 0x2c
  41d900:	920c      	str	r2, [sp, #48]	; 0x30
    appData.hmac_sha256_test_result = times;
  41d902:	2203      	movs	r2, #3
  41d904:	4b17      	ldr	r3, [pc, #92]	; (41d964 <.LCFI27+0x8>)
  41d906:	621a      	str	r2, [r3, #32]

0041d908 <.LVL52>:
  41d908:	ac01      	add	r4, sp, #4
  41d90a:	46a9      	mov	r9, r5
        wc_HmacSetKey(&hmac, SHA256, (byte*)keys[i], (word32)strlen(keys[i]));
  41d90c:	f04f 0802 	mov.w	r8, #2
            appData.hmac_sha256_test_result--;
  41d910:	461f      	mov	r7, r3
  41d912:	e002      	b.n	41d91a <.LVL53+0x6>

0041d914 <.LVL53>:
  41d914:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  41d916:	454c      	cmp	r4, r9
  41d918:	d01e      	beq.n	41d958 <.LVL58+0xc>
        wc_HmacSetKey(&hmac, SHA256, (byte*)keys[i], (word32)strlen(keys[i]));
  41d91a:	f855 6b04 	ldr.w	r6, [r5], #4
  41d91e:	4630      	mov	r0, r6
  41d920:	f7fe feae 	bl	41c680 <strlen>

0041d924 <.LVL54>:
  41d924:	4603      	mov	r3, r0
  41d926:	4632      	mov	r2, r6
  41d928:	4641      	mov	r1, r8
  41d92a:	a818      	add	r0, sp, #96	; 0x60
  41d92c:	f7fa fd38 	bl	4183a0 <.LFE173>

0041d930 <.LVL55>:
        wc_HmacUpdate(&hmac, (byte*)test_hmac[i].input,
  41d930:	68a2      	ldr	r2, [r4, #8]
  41d932:	6821      	ldr	r1, [r4, #0]
  41d934:	a818      	add	r0, sp, #96	; 0x60
  41d936:	f001 faad 	bl	41ee94 <.LFE56>

0041d93a <.LVL56>:
        wc_HmacFinal(&hmac, hash);
  41d93a:	a910      	add	r1, sp, #64	; 0x40
  41d93c:	a818      	add	r0, sp, #96	; 0x60
  41d93e:	f7fb ffaf 	bl	4198a0 <.LBE56>

0041d942 <.LVL57>:
        if (memcmp(hash, test_hmac[i].output, SHA256_DIGEST_SIZE) == 0)
  41d942:	2220      	movs	r2, #32
  41d944:	6861      	ldr	r1, [r4, #4]
  41d946:	a810      	add	r0, sp, #64	; 0x40
  41d948:	f002 fd92 	bl	420470 <memcmp>

0041d94c <.LVL58>:
  41d94c:	2800      	cmp	r0, #0
  41d94e:	d1e1      	bne.n	41d914 <.LVL53>
            appData.hmac_sha256_test_result--;
  41d950:	6a3b      	ldr	r3, [r7, #32]
  41d952:	3b01      	subs	r3, #1
  41d954:	623b      	str	r3, [r7, #32]
  41d956:	e7dd      	b.n	41d914 <.LVL53>
}
  41d958:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c

0041d95c <.LCFI27>:
  41d95c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  41d960:	0040da54 	.word	0x0040da54
  41d964:	2040d534 	.word	0x2040d534

Disassembly of section .text.hmac_sha384_test%160:

0041d968 <hmac_sha384_test>:
{
  41d968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

0041d96c <.LCFI28>:
  41d96c:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c

0041d970 <.LCFI29>:
    const char* keys[]=
  41d970:	ad0d      	add	r5, sp, #52	; 0x34
  41d972:	4b28      	ldr	r3, [pc, #160]	; (41da14 <.LCFI30+0x4>)
  41d974:	f503 629c 	add.w	r2, r3, #1248	; 0x4e0
  41d978:	ca07      	ldmia	r2, {r0, r1, r2}
  41d97a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    test_hmac[0] = a;
  41d97e:	f203 4244 	addw	r2, r3, #1092	; 0x444
  41d982:	9201      	str	r2, [sp, #4]
  41d984:	f503 62b4 	add.w	r2, r3, #1440	; 0x5a0
  41d988:	9202      	str	r2, [sp, #8]
  41d98a:	2208      	movs	r2, #8
  41d98c:	9203      	str	r2, [sp, #12]
  41d98e:	2230      	movs	r2, #48	; 0x30
  41d990:	9204      	str	r2, [sp, #16]
    test_hmac[1] = b;
  41d992:	f203 4164 	addw	r1, r3, #1124	; 0x464
  41d996:	9105      	str	r1, [sp, #20]
  41d998:	f203 51d4 	addw	r1, r3, #1492	; 0x5d4
  41d99c:	9106      	str	r1, [sp, #24]
  41d99e:	211c      	movs	r1, #28
  41d9a0:	9107      	str	r1, [sp, #28]
  41d9a2:	9208      	str	r2, [sp, #32]
    test_hmac[2] = c;
  41d9a4:	f503 6193 	add.w	r1, r3, #1176	; 0x498
  41d9a8:	9109      	str	r1, [sp, #36]	; 0x24
  41d9aa:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
  41d9ae:	930a      	str	r3, [sp, #40]	; 0x28
  41d9b0:	2332      	movs	r3, #50	; 0x32
  41d9b2:	930b      	str	r3, [sp, #44]	; 0x2c
  41d9b4:	920c      	str	r2, [sp, #48]	; 0x30
    appData.hmac_sha384_test_result = times;
  41d9b6:	2203      	movs	r2, #3
  41d9b8:	4b17      	ldr	r3, [pc, #92]	; (41da18 <.LCFI30+0x8>)
  41d9ba:	625a      	str	r2, [r3, #36]	; 0x24

0041d9bc <.LVL60>:
  41d9bc:	ac01      	add	r4, sp, #4
  41d9be:	46a9      	mov	r9, r5
        wc_HmacSetKey(&hmac, SHA384, (byte*)keys[i], (word32)strlen(keys[i]));
  41d9c0:	f04f 0805 	mov.w	r8, #5
            appData.hmac_sha384_test_result--;
  41d9c4:	461f      	mov	r7, r3
  41d9c6:	e002      	b.n	41d9ce <.LVL61+0x6>

0041d9c8 <.LVL61>:
  41d9c8:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  41d9ca:	454c      	cmp	r4, r9
  41d9cc:	d01e      	beq.n	41da0c <.LVL66+0xc>
        wc_HmacSetKey(&hmac, SHA384, (byte*)keys[i], (word32)strlen(keys[i]));
  41d9ce:	f855 6b04 	ldr.w	r6, [r5], #4
  41d9d2:	4630      	mov	r0, r6
  41d9d4:	f7fe fe54 	bl	41c680 <strlen>

0041d9d8 <.LVL62>:
  41d9d8:	4603      	mov	r3, r0
  41d9da:	4632      	mov	r2, r6
  41d9dc:	4641      	mov	r1, r8
  41d9de:	a81c      	add	r0, sp, #112	; 0x70
  41d9e0:	f7fa fcde 	bl	4183a0 <.LFE173>

0041d9e4 <.LVL63>:
        wc_HmacUpdate(&hmac, (byte*)test_hmac[i].input,
  41d9e4:	68a2      	ldr	r2, [r4, #8]
  41d9e6:	6821      	ldr	r1, [r4, #0]
  41d9e8:	a81c      	add	r0, sp, #112	; 0x70
  41d9ea:	f001 fa53 	bl	41ee94 <.LFE56>

0041d9ee <.LVL64>:
        wc_HmacFinal(&hmac, hash);
  41d9ee:	a910      	add	r1, sp, #64	; 0x40
  41d9f0:	a81c      	add	r0, sp, #112	; 0x70
  41d9f2:	f7fb ff55 	bl	4198a0 <.LBE56>

0041d9f6 <.LVL65>:
        if (memcmp(hash, test_hmac[i].output, SHA384_DIGEST_SIZE) == 0)
  41d9f6:	2230      	movs	r2, #48	; 0x30
  41d9f8:	6861      	ldr	r1, [r4, #4]
  41d9fa:	a810      	add	r0, sp, #64	; 0x40
  41d9fc:	f002 fd38 	bl	420470 <memcmp>

0041da00 <.LVL66>:
  41da00:	2800      	cmp	r0, #0
  41da02:	d1e1      	bne.n	41d9c8 <.LVL61>
            appData.hmac_sha384_test_result--;
  41da04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  41da06:	3b01      	subs	r3, #1
  41da08:	627b      	str	r3, [r7, #36]	; 0x24
  41da0a:	e7dd      	b.n	41d9c8 <.LVL61>
}
  41da0c:	f50d 7d27 	add.w	sp, sp, #668	; 0x29c

0041da10 <.LCFI30>:
  41da10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  41da14:	0040da54 	.word	0x0040da54
  41da18:	2040d534 	.word	0x2040d534

Disassembly of section .text.wc_Des3_CbcDecrypt%161:

0041da1c <wc_Des3_CbcDecrypt>:

    int wc_Des3_CbcDecrypt(Des3* des, byte* out, const byte* in, word32 sz)
    {
        word32 blocks;

        if (des == NULL || out == NULL || in == NULL) {
  41da1c:	2a00      	cmp	r2, #0
  41da1e:	bf18      	it	ne
  41da20:	2900      	cmpne	r1, #0
  41da22:	d051      	beq.n	41dac8 <.LCFI16>
    {
  41da24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

0041da28 <.LCFI15>:
  41da28:	4682      	mov	sl, r0
  41da2a:	460c      	mov	r4, r1
  41da2c:	4616      	mov	r6, r2
        if (des == NULL || out == NULL || in == NULL) {
  41da2e:	2800      	cmp	r0, #0
  41da30:	d043      	beq.n	41daba <.LVL240>
            }
        #endif
        }
    #endif /* WOLFSSL_ASYNC_CRYPT */

        blocks = sz / DES_BLOCK_SIZE;
  41da32:	08db      	lsrs	r3, r3, #3

0041da34 <.LVL229>:
        while (blocks--) {
  41da34:	f103 38ff 	add.w	r8, r3, #4294967295

0041da38 <.LVL230>:
  41da38:	2b00      	cmp	r3, #0
  41da3a:	d042      	beq.n	41dac2 <.LVL242>
  41da3c:	1e4f      	subs	r7, r1, #1
            XMEMCPY(des->tmp, in, DES_BLOCK_SIZE);
  41da3e:	f500 75c4 	add.w	r5, r0, #392	; 0x188
            Des3ProcessBlock(des, (byte*)des->tmp, out);
            xorbuf(out, (byte*)des->reg, DES_BLOCK_SIZE);
  41da42:	f500 79c0 	add.w	r9, r0, #384	; 0x180
  41da46:	e019      	b.n	41da7c <.LBE285+0x1c>

0041da48 <.LBB285>:
    for (i = 0; i < n; i++) r[i] ^= a[i];
  41da48:	f8d7 3001 	ldr.w	r3, [r7, #1]
  41da4c:	f8da 2180 	ldr.w	r2, [sl, #384]	; 0x180
  41da50:	4053      	eors	r3, r2
  41da52:	f8c7 3001 	str.w	r3, [r7, #1]

0041da56 <.LVL232>:
  41da56:	6863      	ldr	r3, [r4, #4]
  41da58:	f8da 2184 	ldr.w	r2, [sl, #388]	; 0x184
  41da5c:	4053      	eors	r3, r2
  41da5e:	6063      	str	r3, [r4, #4]

0041da60 <.LBE285>:
            XMEMCPY(des->reg, des->tmp, DES_BLOCK_SIZE);
  41da60:	682a      	ldr	r2, [r5, #0]
  41da62:	686b      	ldr	r3, [r5, #4]
  41da64:	f8c9 2000 	str.w	r2, [r9]
  41da68:	f8c9 3004 	str.w	r3, [r9, #4]

            out += DES_BLOCK_SIZE;
  41da6c:	3408      	adds	r4, #8
            in  += DES_BLOCK_SIZE;
  41da6e:	3608      	adds	r6, #8
        while (blocks--) {
  41da70:	f108 38ff 	add.w	r8, r8, #4294967295
  41da74:	3708      	adds	r7, #8
  41da76:	f1b8 3fff 	cmp.w	r8, #4294967295
  41da7a:	d01b      	beq.n	41dab4 <.LBE289>
            XMEMCPY(des->tmp, in, DES_BLOCK_SIZE);
  41da7c:	6832      	ldr	r2, [r6, #0]
  41da7e:	6873      	ldr	r3, [r6, #4]
  41da80:	602a      	str	r2, [r5, #0]
  41da82:	606b      	str	r3, [r5, #4]
            Des3ProcessBlock(des, (byte*)des->tmp, out);
  41da84:	4622      	mov	r2, r4
  41da86:	4629      	mov	r1, r5
  41da88:	4650      	mov	r0, sl
  41da8a:	f7fd f8ad 	bl	41abe8 <.LFE19>

0041da8e <.LBB291>:
    if (((wolfssl_word)buf | (wolfssl_word)mask | count) % WOLFSSL_WORD_SIZE == 0)
  41da8e:	ea44 0309 	orr.w	r3, r4, r9
  41da92:	f013 0f03 	tst.w	r3, #3
  41da96:	d0d7      	beq.n	41da48 <.LBB285>
  41da98:	f20a 117f 	addw	r1, sl, #383	; 0x17f
  41da9c:	f104 0e07 	add.w	lr, r4, #7
  41daa0:	463b      	mov	r3, r7

0041daa2 <.LBB289>:
        for (i = 0; i < count; i++) b[i] ^= m[i];
  41daa2:	785a      	ldrb	r2, [r3, #1]
  41daa4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  41daa8:	4042      	eors	r2, r0
  41daaa:	f803 2f01 	strb.w	r2, [r3, #1]!
  41daae:	4573      	cmp	r3, lr
  41dab0:	d1f7      	bne.n	41daa2 <.LBB289>
  41dab2:	e7d5      	b.n	41da60 <.LBE285>

0041dab4 <.LBE289>:
        }
        return 0;
  41dab4:	2000      	movs	r0, #0
  41dab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0041daba <.LVL240>:
            return BAD_FUNC_ARG;
  41daba:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041dabe <.LVL241>:
  41dabe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0041dac2 <.LVL242>:
        return 0;
  41dac2:	2000      	movs	r0, #0

0041dac4 <.LVL243>:
    }
  41dac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0041dac8 <.LCFI16>:
            return BAD_FUNC_ARG;
  41dac8:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041dacc <.LVL245>:
    }
  41dacc:	4770      	bx	lr

Disassembly of section .text.md5_test%162:

0041dad0 <md5_test>:
{
  41dad0:	b570      	push	{r4, r5, r6, lr}

0041dad2 <.LCFI0>:
  41dad2:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218

0041dad6 <.LCFI1>:
    test_md5[0] = a;
  41dad6:	4b28      	ldr	r3, [pc, #160]	; (41db78 <.LCFI2+0x4>)
  41dad8:	9300      	str	r3, [sp, #0]
  41dada:	1d1a      	adds	r2, r3, #4
  41dadc:	9201      	str	r2, [sp, #4]
  41dade:	2203      	movs	r2, #3
  41dae0:	9202      	str	r2, [sp, #8]
  41dae2:	2210      	movs	r2, #16
  41dae4:	9203      	str	r2, [sp, #12]
    test_md5[1] = b;
  41dae6:	f103 0118 	add.w	r1, r3, #24
  41daea:	9104      	str	r1, [sp, #16]
  41daec:	f103 0128 	add.w	r1, r3, #40	; 0x28
  41daf0:	9105      	str	r1, [sp, #20]
  41daf2:	210e      	movs	r1, #14
  41daf4:	9106      	str	r1, [sp, #24]
  41daf6:	9207      	str	r2, [sp, #28]
    test_md5[2] = c;
  41daf8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
  41dafc:	9108      	str	r1, [sp, #32]
  41dafe:	f103 0158 	add.w	r1, r3, #88	; 0x58
  41db02:	9109      	str	r1, [sp, #36]	; 0x24
  41db04:	211a      	movs	r1, #26
  41db06:	910a      	str	r1, [sp, #40]	; 0x28
  41db08:	920b      	str	r2, [sp, #44]	; 0x2c
    test_md5[3] = d;
  41db0a:	f103 016c 	add.w	r1, r3, #108	; 0x6c
  41db0e:	910c      	str	r1, [sp, #48]	; 0x30
  41db10:	f103 01ac 	add.w	r1, r3, #172	; 0xac
  41db14:	910d      	str	r1, [sp, #52]	; 0x34
  41db16:	213e      	movs	r1, #62	; 0x3e
  41db18:	910e      	str	r1, [sp, #56]	; 0x38
  41db1a:	920f      	str	r2, [sp, #60]	; 0x3c
    test_md5[4] = e;
  41db1c:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
  41db20:	9110      	str	r1, [sp, #64]	; 0x40
  41db22:	f503 738a 	add.w	r3, r3, #276	; 0x114
  41db26:	9311      	str	r3, [sp, #68]	; 0x44
  41db28:	2350      	movs	r3, #80	; 0x50
  41db2a:	9312      	str	r3, [sp, #72]	; 0x48
  41db2c:	9213      	str	r2, [sp, #76]	; 0x4c
    CRYPT_MD5_Initialize(&md5);
  41db2e:	a818      	add	r0, sp, #96	; 0x60
  41db30:	f004 fb6a 	bl	422208 <.LBE48>

0041db34 <.LVL1>:
    appData.md5_test_result = times;
  41db34:	2205      	movs	r2, #5
  41db36:	4b11      	ldr	r3, [pc, #68]	; (41db7c <.LCFI2+0x8>)
  41db38:	605a      	str	r2, [r3, #4]

0041db3a <.LVL2>:
  41db3a:	466c      	mov	r4, sp
  41db3c:	ad14      	add	r5, sp, #80	; 0x50
            appData.md5_test_result--;
  41db3e:	461e      	mov	r6, r3
  41db40:	e002      	b.n	41db48 <.LVL3+0x6>

0041db42 <.LVL3>:
  41db42:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  41db44:	42ac      	cmp	r4, r5
  41db46:	d013      	beq.n	41db70 <.LVL6+0xc>
        CRYPT_MD5_DataAdd(&md5, (byte*)test_md5[i].input, (word32)test_md5[i].inLen);
  41db48:	68a2      	ldr	r2, [r4, #8]
  41db4a:	6821      	ldr	r1, [r4, #0]
  41db4c:	a818      	add	r0, sp, #96	; 0x60
  41db4e:	f004 fa01 	bl	421f54 <.LFE142>

0041db52 <.LVL4>:
        CRYPT_MD5_Finalize(&md5, hash);
  41db52:	a914      	add	r1, sp, #80	; 0x50
  41db54:	a818      	add	r0, sp, #96	; 0x60
  41db56:	f004 fa09 	bl	421f6c <.LFE2>

0041db5a <.LVL5>:
        if (memcmp(hash, test_md5[i].output, MD5_DIGEST_SIZE) == 0)
  41db5a:	2210      	movs	r2, #16
  41db5c:	6861      	ldr	r1, [r4, #4]
  41db5e:	a814      	add	r0, sp, #80	; 0x50
  41db60:	f002 fc86 	bl	420470 <memcmp>

0041db64 <.LVL6>:
  41db64:	2800      	cmp	r0, #0
  41db66:	d1ec      	bne.n	41db42 <.LVL3>
            appData.md5_test_result--;
  41db68:	6873      	ldr	r3, [r6, #4]
  41db6a:	3b01      	subs	r3, #1
  41db6c:	6073      	str	r3, [r6, #4]
  41db6e:	e7e8      	b.n	41db42 <.LVL3>
}
  41db70:	f50d 7d06 	add.w	sp, sp, #536	; 0x218

0041db74 <.LCFI2>:
  41db74:	bd70      	pop	{r4, r5, r6, pc}
  41db76:	bf00      	nop
  41db78:	0040da54 	.word	0x0040da54
  41db7c:	2040d534 	.word	0x2040d534

Disassembly of section .text.updatewindow%163:

0041db80 <updatewindow>:
{
  41db80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041db82 <.LCFI2>:
  41db82:	4607      	mov	r7, r0
  41db84:	460e      	mov	r6, r1
    state = (struct inflate_state FAR *)strm->state;
  41db86:	69c4      	ldr	r4, [r0, #28]
    if (state->window == Z_NULL) {
  41db88:	6b63      	ldr	r3, [r4, #52]	; 0x34
  41db8a:	b343      	cbz	r3, 41dbde <.LVL26>

0041db8c <.LVL19>:
    if (state->wsize == 0) {
  41db8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  41db8e:	b933      	cbnz	r3, 41db9e <.LVL19+0x12>
        state->wsize = 1U << state->wbits;
  41db90:	6a62      	ldr	r2, [r4, #36]	; 0x24
  41db92:	2301      	movs	r3, #1
  41db94:	4093      	lsls	r3, r2
  41db96:	62a3      	str	r3, [r4, #40]	; 0x28
        state->wnext = 0;
  41db98:	2300      	movs	r3, #0
  41db9a:	6323      	str	r3, [r4, #48]	; 0x30
        state->whave = 0;
  41db9c:	62e3      	str	r3, [r4, #44]	; 0x2c
    copy = out - strm->avail_out;
  41db9e:	693b      	ldr	r3, [r7, #16]
  41dba0:	1af6      	subs	r6, r6, r3

0041dba2 <.LVL20>:
    if (copy >= state->wsize) {
  41dba2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  41dba4:	42ae      	cmp	r6, r5
  41dba6:	d227      	bcs.n	41dbf8 <.LVL30>
        dist = state->wsize - state->wnext;
  41dba8:	6b23      	ldr	r3, [r4, #48]	; 0x30
  41dbaa:	1aed      	subs	r5, r5, r3

0041dbac <.LVL21>:
  41dbac:	42b5      	cmp	r5, r6
  41dbae:	bf28      	it	cs
  41dbb0:	4635      	movcs	r5, r6
        zmemcpy(state->window + state->wnext, strm->next_out - copy, dist);
  41dbb2:	6b60      	ldr	r0, [r4, #52]	; 0x34
  41dbb4:	68f9      	ldr	r1, [r7, #12]
  41dbb6:	462a      	mov	r2, r5
  41dbb8:	1b89      	subs	r1, r1, r6
  41dbba:	4418      	add	r0, r3
  41dbbc:	f7fc fee2 	bl	41a984 <.LFE14>

0041dbc0 <.LVL23>:
        if (copy) {
  41dbc0:	1b76      	subs	r6, r6, r5

0041dbc2 <.LVL24>:
  41dbc2:	d124      	bne.n	41dc0e <.LVL32>
            state->wnext += dist;
  41dbc4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  41dbc6:	442b      	add	r3, r5
  41dbc8:	6323      	str	r3, [r4, #48]	; 0x30
            if (state->wnext == state->wsize) state->wnext = 0;
  41dbca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  41dbcc:	4293      	cmp	r3, r2
  41dbce:	d029      	beq.n	41dc24 <.LVL33+0xa>
            if (state->whave < state->wsize) state->whave += dist;
  41dbd0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  41dbd2:	428a      	cmp	r2, r1
  41dbd4:	d929      	bls.n	41dc2a <.LVL33+0x10>
  41dbd6:	440d      	add	r5, r1

0041dbd8 <.LVL25>:
  41dbd8:	62e5      	str	r5, [r4, #44]	; 0x2c
    return 0;
  41dbda:	2000      	movs	r0, #0
  41dbdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041dbde <.LVL26>:
                        ZALLOC(strm, 1U << state->wbits,
  41dbde:	2301      	movs	r3, #1
  41dbe0:	6a61      	ldr	r1, [r4, #36]	; 0x24

0041dbe2 <.LVL27>:
  41dbe2:	6a05      	ldr	r5, [r0, #32]
  41dbe4:	461a      	mov	r2, r3
  41dbe6:	fa03 f101 	lsl.w	r1, r3, r1
  41dbea:	6a80      	ldr	r0, [r0, #40]	; 0x28

0041dbec <.LVL28>:
  41dbec:	47a8      	blx	r5

0041dbee <.LVL29>:
        state->window = (unsigned char FAR *)
  41dbee:	6360      	str	r0, [r4, #52]	; 0x34
        if (state->window == Z_NULL) return 1;
  41dbf0:	2800      	cmp	r0, #0
  41dbf2:	d1cb      	bne.n	41db8c <.LVL19>
  41dbf4:	2001      	movs	r0, #1
  41dbf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041dbf8 <.LVL30>:
        zmemcpy(state->window, strm->next_out - state->wsize, state->wsize);
  41dbf8:	68f9      	ldr	r1, [r7, #12]
  41dbfa:	462a      	mov	r2, r5
  41dbfc:	1b49      	subs	r1, r1, r5
  41dbfe:	6b60      	ldr	r0, [r4, #52]	; 0x34
  41dc00:	f7fc fec0 	bl	41a984 <.LFE14>

0041dc04 <.LVL31>:
        state->wnext = 0;
  41dc04:	2000      	movs	r0, #0
  41dc06:	6320      	str	r0, [r4, #48]	; 0x30
        state->whave = state->wsize;
  41dc08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  41dc0a:	62e3      	str	r3, [r4, #44]	; 0x2c
  41dc0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041dc0e <.LVL32>:
            zmemcpy(state->window, strm->next_out - copy, copy);
  41dc0e:	68f9      	ldr	r1, [r7, #12]
  41dc10:	4632      	mov	r2, r6
  41dc12:	1b89      	subs	r1, r1, r6
  41dc14:	6b60      	ldr	r0, [r4, #52]	; 0x34
  41dc16:	f7fc feb5 	bl	41a984 <.LFE14>

0041dc1a <.LVL33>:
            state->wnext = copy;
  41dc1a:	6326      	str	r6, [r4, #48]	; 0x30
            state->whave = state->wsize;
  41dc1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  41dc1e:	62e3      	str	r3, [r4, #44]	; 0x2c
    return 0;
  41dc20:	2000      	movs	r0, #0
  41dc22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (state->wnext == state->wsize) state->wnext = 0;
  41dc24:	2300      	movs	r3, #0
  41dc26:	6323      	str	r3, [r4, #48]	; 0x30
  41dc28:	e7d2      	b.n	41dbd0 <.LVL24+0xe>
    return 0;
  41dc2a:	2000      	movs	r0, #0
}
  41dc2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

Disassembly of section .text.wc_AesCbcEncrypt%164:

0041dc2e <wc_AesCbcEncrypt>:
        if (aes == NULL || out == NULL || in == NULL) {
  41dc2e:	2a00      	cmp	r2, #0
  41dc30:	bf18      	it	ne
  41dc32:	2900      	cmpne	r1, #0
  41dc34:	d04f      	beq.n	41dcd6 <.LCFI16>
    {
  41dc36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

0041dc3a <.LCFI15>:
  41dc3a:	4682      	mov	sl, r0
  41dc3c:	091b      	lsrs	r3, r3, #4

0041dc3e <.LVL174>:
  41dc3e:	460d      	mov	r5, r1
  41dc40:	4690      	mov	r8, r2
        if (aes == NULL || out == NULL || in == NULL) {
  41dc42:	2800      	cmp	r0, #0
  41dc44:	d040      	beq.n	41dcc8 <.LVL186>
        while (blocks--) {
  41dc46:	f103 39ff 	add.w	r9, r3, #4294967295

0041dc4a <.LVL175>:
  41dc4a:	2b00      	cmp	r3, #0
  41dc4c:	d040      	beq.n	41dcd0 <.LVL188>
            xorbuf((byte*)aes->reg, in, AES_BLOCK_SIZE);
  41dc4e:	f100 04f8 	add.w	r4, r0, #248	; 0xf8
  41dc52:	f500 7782 	add.w	r7, r0, #260	; 0x104
  41dc56:	f200 1607 	addw	r6, r0, #263	; 0x107
  41dc5a:	e020      	b.n	41dc9e <.LBB162>

0041dc5c <.LVL176>:
  41dc5c:	f10a 03f7 	add.w	r3, sl, #247	; 0xf7
  41dc60:	f108 31ff 	add.w	r1, r8, #4294967295

0041dc64 <.LBB156>:
  41dc64:	785a      	ldrb	r2, [r3, #1]
  41dc66:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  41dc6a:	4042      	eors	r2, r0
  41dc6c:	f803 2f01 	strb.w	r2, [r3, #1]!
  41dc70:	42b3      	cmp	r3, r6
  41dc72:	d1f7      	bne.n	41dc64 <.LBB156>

0041dc74 <.LBE156>:
            wc_AesEncrypt(aes, (byte*)aes->reg, (byte*)aes->reg);
  41dc74:	4622      	mov	r2, r4
  41dc76:	4621      	mov	r1, r4
  41dc78:	4650      	mov	r0, sl
  41dc7a:	f7f6 faad 	bl	4141d8 <wc_AesEncrypt>

0041dc7e <.LVL179>:
            XMEMCPY(out, aes->reg, AES_BLOCK_SIZE);
  41dc7e:	6820      	ldr	r0, [r4, #0]
  41dc80:	6861      	ldr	r1, [r4, #4]
  41dc82:	68a2      	ldr	r2, [r4, #8]
  41dc84:	68e3      	ldr	r3, [r4, #12]
  41dc86:	6028      	str	r0, [r5, #0]
  41dc88:	6069      	str	r1, [r5, #4]
  41dc8a:	60aa      	str	r2, [r5, #8]
  41dc8c:	60eb      	str	r3, [r5, #12]
            out += AES_BLOCK_SIZE;
  41dc8e:	3510      	adds	r5, #16
            in  += AES_BLOCK_SIZE;
  41dc90:	f108 0810 	add.w	r8, r8, #16
        while (blocks--) {
  41dc94:	f109 39ff 	add.w	r9, r9, #4294967295
  41dc98:	f1b9 3fff 	cmp.w	r9, #4294967295
  41dc9c:	d011      	beq.n	41dcc2 <.LBE159>

0041dc9e <.LBB162>:
    if (((wolfssl_word)buf | (wolfssl_word)mask | count) % WOLFSSL_WORD_SIZE == 0)
  41dc9e:	ea44 0308 	orr.w	r3, r4, r8
  41dca2:	f013 0f03 	tst.w	r3, #3
  41dca6:	d1d9      	bne.n	41dc5c <.LVL176>
  41dca8:	f10a 03f4 	add.w	r3, sl, #244	; 0xf4
  41dcac:	f1a8 0104 	sub.w	r1, r8, #4

0041dcb0 <.LBB159>:
    for (i = 0; i < n; i++) r[i] ^= a[i];
  41dcb0:	685a      	ldr	r2, [r3, #4]
  41dcb2:	f851 0f04 	ldr.w	r0, [r1, #4]!
  41dcb6:	4042      	eors	r2, r0
  41dcb8:	f843 2f04 	str.w	r2, [r3, #4]!
  41dcbc:	42bb      	cmp	r3, r7
  41dcbe:	d1f7      	bne.n	41dcb0 <.LBB159>
  41dcc0:	e7d8      	b.n	41dc74 <.LBE156>

0041dcc2 <.LBE159>:
        return 0;
  41dcc2:	2000      	movs	r0, #0
  41dcc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0041dcc8 <.LVL186>:
            return BAD_FUNC_ARG;
  41dcc8:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041dccc <.LVL187>:
  41dccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0041dcd0 <.LVL188>:
        return 0;
  41dcd0:	2000      	movs	r0, #0

0041dcd2 <.LVL189>:
    }
  41dcd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0041dcd6 <.LCFI16>:
            return BAD_FUNC_ARG;
  41dcd6:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041dcda <.LVL191>:
    }
  41dcda:	4770      	bx	lr

Disassembly of section .text.fp_div_2d%165:

0041dcdc <fp_div_2d>:
{
  41dcdc:	b5f0      	push	{r4, r5, r6, r7, lr}

0041dcde <.LCFI71>:
  41dcde:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c

0041dce2 <.LCFI72>:
  41dce2:	4607      	mov	r7, r0
  41dce4:	4614      	mov	r4, r2
  41dce6:	461d      	mov	r5, r3
  if (b <= 0) {
  41dce8:	1e0e      	subs	r6, r1, #0
  41dcea:	dd21      	ble.n	41dd30 <.LVL486>

0041dcec <.LBB60>:
    fp_zero(a);
  41dcec:	4668      	mov	r0, sp

0041dcee <.LVL480>:
  41dcee:	f004 fa29 	bl	422144 <.LFE163>

0041dcf2 <.LBE60>:
  if (d != NULL) {
  41dcf2:	b125      	cbz	r5, 41dcfe <.LVL482>
    fp_mod_2d (a, b, &t);
  41dcf4:	466a      	mov	r2, sp
  41dcf6:	4631      	mov	r1, r6
  41dcf8:	4638      	mov	r0, r7
  41dcfa:	f000 fca8 	bl	41e64e <.LFE27>

0041dcfe <.LVL482>:
  fp_copy(a, c);
  41dcfe:	4621      	mov	r1, r4
  41dd00:	4638      	mov	r0, r7
  41dd02:	f003 ff53 	bl	421bac <.LFE31>

0041dd06 <.LVL483>:
  if (b >= (int)DIGIT_BIT) {
  41dd06:	2e1f      	cmp	r6, #31
  41dd08:	dc1a      	bgt.n	41dd40 <.LVL489+0x2>
  D = (b % DIGIT_BIT);
  41dd0a:	4273      	negs	r3, r6
  41dd0c:	f006 011f 	and.w	r1, r6, #31
  41dd10:	f003 031f 	and.w	r3, r3, #31
  41dd14:	bf58      	it	pl
  41dd16:	4259      	negpl	r1, r3

0041dd18 <.LVL484>:
  if (D != 0) {
  41dd18:	b9e1      	cbnz	r1, 41dd54 <.LVL491>

0041dd1a <.LVL485>:
  fp_clamp (c);
  41dd1a:	6822      	ldr	r2, [r4, #0]
  41dd1c:	b34a      	cbz	r2, 41dd72 <.LVL492+0x18>
  41dd1e:	1e53      	subs	r3, r2, #1
  41dd20:	1c51      	adds	r1, r2, #1
  41dd22:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
  41dd26:	bb09      	cbnz	r1, 41dd6c <.LVL492+0x12>
  41dd28:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  41dd2c:	3204      	adds	r2, #4
  41dd2e:	e016      	b.n	41dd5e <.LVL492+0x4>

0041dd30 <.LVL486>:
    fp_copy (a, c);
  41dd30:	4611      	mov	r1, r2

0041dd32 <.LVL487>:
  41dd32:	f003 ff3b 	bl	421bac <.LFE31>

0041dd36 <.LVL488>:
    if (d != NULL) {
  41dd36:	b31d      	cbz	r5, 41dd80 <.LVL493>
      fp_zero (d);
  41dd38:	4628      	mov	r0, r5
  41dd3a:	f004 fa03 	bl	422144 <.LFE163>

0041dd3e <.LVL489>:
  41dd3e:	e01f      	b.n	41dd80 <.LVL493>
    fp_rshd (c, b / DIGIT_BIT);
  41dd40:	4631      	mov	r1, r6
  41dd42:	2e00      	cmp	r6, #0
  41dd44:	bfb8      	it	lt
  41dd46:	f106 011f 	addlt.w	r1, r6, #31
  41dd4a:	1149      	asrs	r1, r1, #5
  41dd4c:	4620      	mov	r0, r4
  41dd4e:	f001 f925 	bl	41ef9c <.LFE159>

0041dd52 <.LVL490>:
  41dd52:	e7da      	b.n	41dd0a <.LVL483+0x4>

0041dd54 <.LVL491>:
    fp_rshb(c, D);
  41dd54:	4620      	mov	r0, r4
  41dd56:	f001 ff91 	bl	41fc7c <.LFE40>

0041dd5a <.LVL492>:
  41dd5a:	e7de      	b.n	41dd1a <.LVL485>
  fp_clamp (c);
  41dd5c:	4603      	mov	r3, r0
  41dd5e:	b13b      	cbz	r3, 41dd70 <.LVL492+0x16>
  41dd60:	1e58      	subs	r0, r3, #1
  41dd62:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  41dd66:	2900      	cmp	r1, #0
  41dd68:	d0f8      	beq.n	41dd5c <.LVL492+0x2>
  41dd6a:	6023      	str	r3, [r4, #0]
  41dd6c:	6863      	ldr	r3, [r4, #4]
  41dd6e:	e001      	b.n	41dd74 <.LVL492+0x1a>
  41dd70:	6023      	str	r3, [r4, #0]
  41dd72:	2300      	movs	r3, #0
  41dd74:	6063      	str	r3, [r4, #4]
  if (d != NULL) {
  41dd76:	b11d      	cbz	r5, 41dd80 <.LVL493>
    fp_copy (&t, d);
  41dd78:	4629      	mov	r1, r5
  41dd7a:	4668      	mov	r0, sp
  41dd7c:	f003 ff16 	bl	421bac <.LFE31>

0041dd80 <.LVL493>:
}
  41dd80:	f50d 7d0b 	add.w	sp, sp, #556	; 0x22c

0041dd84 <.LCFI73>:
  41dd84:	bdf0      	pop	{r4, r5, r6, r7, pc}

Disassembly of section .text._tr_align%166:

0041dd86 <_tr_align>:
{
  41dd86:	b570      	push	{r4, r5, r6, lr}

0041dd88 <.LBB73>:
    send_bits(s, STATIC_TREES<<1, 3);
  41dd88:	f241 63bc 	movw	r3, #5820	; 0x16bc
  41dd8c:	58c3      	ldr	r3, [r0, r3]
  41dd8e:	2b0d      	cmp	r3, #13
  41dd90:	dd29      	ble.n	41dde6 <.LBB77>

0041dd92 <.LBB74>:
  41dd92:	f241 62b8 	movw	r2, #5816	; 0x16b8
  41dd96:	2102      	movs	r1, #2
  41dd98:	fa01 f303 	lsl.w	r3, r1, r3
  41dd9c:	5a84      	ldrh	r4, [r0, r2]
  41dd9e:	4323      	orrs	r3, r4
  41dda0:	b21b      	sxth	r3, r3
  41dda2:	5283      	strh	r3, [r0, r2]
  41dda4:	6885      	ldr	r5, [r0, #8]
  41dda6:	6944      	ldr	r4, [r0, #20]
  41dda8:	1c66      	adds	r6, r4, #1
  41ddaa:	6146      	str	r6, [r0, #20]
  41ddac:	552b      	strb	r3, [r5, r4]
  41ddae:	6885      	ldr	r5, [r0, #8]
  41ddb0:	6944      	ldr	r4, [r0, #20]
  41ddb2:	1c63      	adds	r3, r4, #1
  41ddb4:	6143      	str	r3, [r0, #20]
  41ddb6:	5a83      	ldrh	r3, [r0, r2]
  41ddb8:	0a1b      	lsrs	r3, r3, #8
  41ddba:	552b      	strb	r3, [r5, r4]
  41ddbc:	f241 64bc 	movw	r4, #5820	; 0x16bc
  41ddc0:	5903      	ldr	r3, [r0, r4]
  41ddc2:	f1c3 0510 	rsb	r5, r3, #16
  41ddc6:	4129      	asrs	r1, r5
  41ddc8:	5281      	strh	r1, [r0, r2]
  41ddca:	3b0d      	subs	r3, #13
  41ddcc:	5103      	str	r3, [r0, r4]

0041ddce <.LBB75>:
    send_code(s, END_BLOCK, static_ltree);
  41ddce:	f241 63bc 	movw	r3, #5820	; 0x16bc
  41ddd2:	58c3      	ldr	r3, [r0, r3]
  41ddd4:	2b09      	cmp	r3, #9
  41ddd6:	dc12      	bgt.n	41ddfe <.LBB76>
  41ddd8:	3307      	adds	r3, #7
  41ddda:	f241 62bc 	movw	r2, #5820	; 0x16bc
  41ddde:	5083      	str	r3, [r0, r2]

0041dde0 <.LBE75>:
    bi_flush(s);
  41dde0:	f002 fae6 	bl	4203b0 <.LFE69>

0041dde4 <.LVL310>:
  41dde4:	bd70      	pop	{r4, r5, r6, pc}

0041dde6 <.LBB77>:
    send_bits(s, STATIC_TREES<<1, 3);
  41dde6:	f241 61b8 	movw	r1, #5816	; 0x16b8
  41ddea:	2202      	movs	r2, #2
  41ddec:	409a      	lsls	r2, r3
  41ddee:	5a44      	ldrh	r4, [r0, r1]
  41ddf0:	4322      	orrs	r2, r4
  41ddf2:	5242      	strh	r2, [r0, r1]
  41ddf4:	3303      	adds	r3, #3
  41ddf6:	f241 62bc 	movw	r2, #5820	; 0x16bc
  41ddfa:	5083      	str	r3, [r0, r2]
  41ddfc:	e7e7      	b.n	41ddce <.LBB75>

0041ddfe <.LBB76>:
    send_code(s, END_BLOCK, static_ltree);
  41ddfe:	f241 62b8 	movw	r2, #5816	; 0x16b8
  41de02:	5a84      	ldrh	r4, [r0, r2]
  41de04:	6881      	ldr	r1, [r0, #8]
  41de06:	6943      	ldr	r3, [r0, #20]
  41de08:	1c5d      	adds	r5, r3, #1
  41de0a:	6145      	str	r5, [r0, #20]
  41de0c:	54cc      	strb	r4, [r1, r3]
  41de0e:	6884      	ldr	r4, [r0, #8]
  41de10:	6941      	ldr	r1, [r0, #20]
  41de12:	1c4b      	adds	r3, r1, #1
  41de14:	6143      	str	r3, [r0, #20]
  41de16:	5a83      	ldrh	r3, [r0, r2]
  41de18:	0a1b      	lsrs	r3, r3, #8
  41de1a:	5463      	strb	r3, [r4, r1]
  41de1c:	f241 61bc 	movw	r1, #5820	; 0x16bc
  41de20:	5843      	ldr	r3, [r0, r1]
  41de22:	2400      	movs	r4, #0
  41de24:	5284      	strh	r4, [r0, r2]
  41de26:	3b09      	subs	r3, #9
  41de28:	5043      	str	r3, [r0, r1]

0041de2a <.LBE76>:
  41de2a:	e7d9      	b.n	41dde0 <.LBE75>

Disassembly of section .text.fp_mul_2d%167:

0041de2c <fp_mul_2d>:
{
  41de2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041de2e <.LCFI61>:
  41de2e:	460f      	mov	r7, r1
  41de30:	4614      	mov	r4, r2
   fp_copy(a, c);
  41de32:	4611      	mov	r1, r2

0041de34 <.LVL393>:
  41de34:	f003 feba 	bl	421bac <.LFE31>

0041de38 <.LVL394>:
   if (b >= DIGIT_BIT) {
  41de38:	2f1f      	cmp	r7, #31
  41de3a:	dc12      	bgt.n	41de62 <.LVL399>
   b %= DIGIT_BIT;
  41de3c:	427b      	negs	r3, r7
  41de3e:	f007 071f 	and.w	r7, r7, #31

0041de42 <.LVL395>:
  41de42:	f003 031f 	and.w	r3, r3, #31
  41de46:	bf58      	it	pl
  41de48:	425f      	negpl	r7, r3

0041de4a <.LVL396>:
   if (b != 0) {
  41de4a:	b347      	cbz	r7, 41de9e <.LVL407>

0041de4c <.LVL397>:
      shift = DIGIT_BIT - b;
  41de4c:	f1c7 0c20 	rsb	ip, r7, #32

0041de50 <.LVL398>:
      for (x = 0; x < c->used; x++) {
  41de50:	f8d4 e000 	ldr.w	lr, [r4]
  41de54:	f1be 0f00 	cmp.w	lr, #0
  41de58:	dd21      	ble.n	41de9e <.LVL407>
  41de5a:	1d21      	adds	r1, r4, #4
  41de5c:	2000      	movs	r0, #0
  41de5e:	4606      	mov	r6, r0
  41de60:	e00a      	b.n	41de78 <.LVL402>

0041de62 <.LVL399>:
      fp_lshd(c, b/DIGIT_BIT);
  41de62:	4639      	mov	r1, r7
  41de64:	2f00      	cmp	r7, #0
  41de66:	bfb8      	it	lt
  41de68:	f107 011f 	addlt.w	r1, r7, #31
  41de6c:	1149      	asrs	r1, r1, #5
  41de6e:	4620      	mov	r0, r4
  41de70:	f000 ffcd 	bl	41ee0e <.LFE26>

0041de74 <.LVL400>:
  41de74:	e7e2      	b.n	41de3c <.LVL394+0x4>

0041de76 <.LVL401>:
      for (x = 0; x < c->used; x++) {
  41de76:	4610      	mov	r0, r2

0041de78 <.LVL402>:
          carrytmp = c->dp[x] >> shift;
  41de78:	684b      	ldr	r3, [r1, #4]
  41de7a:	fa23 f50c 	lsr.w	r5, r3, ip

0041de7e <.LVL403>:
          c->dp[x] = (c->dp[x] << b) + carry;
  41de7e:	40bb      	lsls	r3, r7
  41de80:	4433      	add	r3, r6
  41de82:	f841 3f04 	str.w	r3, [r1, #4]!

0041de86 <.LVL404>:
      for (x = 0; x < c->used; x++) {
  41de86:	1c42      	adds	r2, r0, #1

0041de88 <.LVL405>:
          carrytmp = c->dp[x] >> shift;
  41de88:	462e      	mov	r6, r5
      for (x = 0; x < c->used; x++) {
  41de8a:	4572      	cmp	r2, lr
  41de8c:	d1f3      	bne.n	41de76 <.LVL401>
      if (carry && x < FP_SIZE) {
  41de8e:	b135      	cbz	r5, 41de9e <.LVL407>
  41de90:	2a87      	cmp	r2, #135	; 0x87
  41de92:	dc04      	bgt.n	41de9e <.LVL407>
         c->dp[c->used++] = carry;
  41de94:	3002      	adds	r0, #2
  41de96:	6020      	str	r0, [r4, #0]
  41de98:	3202      	adds	r2, #2

0041de9a <.LVL406>:
  41de9a:	f844 5022 	str.w	r5, [r4, r2, lsl #2]

0041de9e <.LVL407>:
   fp_clamp(c);
  41de9e:	6822      	ldr	r2, [r4, #0]
  41dea0:	b1a2      	cbz	r2, 41decc <.LVL407+0x2e>
  41dea2:	1e53      	subs	r3, r2, #1
  41dea4:	1c51      	adds	r1, r2, #1
  41dea6:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
  41deaa:	b959      	cbnz	r1, 41dec4 <.LVL407+0x26>
  41deac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  41deb0:	3204      	adds	r2, #4
  41deb2:	e000      	b.n	41deb6 <.LVL407+0x18>
  41deb4:	4603      	mov	r3, r0
  41deb6:	b143      	cbz	r3, 41deca <.LVL407+0x2c>
  41deb8:	1e58      	subs	r0, r3, #1
  41deba:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  41debe:	2900      	cmp	r1, #0
  41dec0:	d0f8      	beq.n	41deb4 <.LVL407+0x16>
  41dec2:	6023      	str	r3, [r4, #0]
  41dec4:	6863      	ldr	r3, [r4, #4]
  41dec6:	6063      	str	r3, [r4, #4]
}
  41dec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41deca:	6023      	str	r3, [r4, #0]
   fp_clamp(c);
  41decc:	2300      	movs	r3, #0
  41dece:	e7fa      	b.n	41dec6 <.LVL407+0x28>

Disassembly of section .text.__lshift%168:

0041ded0 <__lshift>:
  41ded0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

0041ded4 <.LCFI11>:
  41ded4:	4691      	mov	r9, r2
  41ded6:	690a      	ldr	r2, [r1, #16]

0041ded8 <.LVL184>:
  41ded8:	688b      	ldr	r3, [r1, #8]
  41deda:	ea4f 1469 	mov.w	r4, r9, asr #5

0041dede <.LVL185>:
  41dede:	eb04 0802 	add.w	r8, r4, r2
  41dee2:	f108 0501 	add.w	r5, r8, #1
  41dee6:	429d      	cmp	r5, r3
  41dee8:	460e      	mov	r6, r1
  41deea:	4607      	mov	r7, r0
  41deec:	6849      	ldr	r1, [r1, #4]

0041deee <.LVL186>:
  41deee:	dd04      	ble.n	41defa <.LVL188+0x2>
  41def0:	005b      	lsls	r3, r3, #1

0041def2 <.LVL187>:
  41def2:	429d      	cmp	r5, r3
  41def4:	f101 0101 	add.w	r1, r1, #1

0041def8 <.LVL188>:
  41def8:	dcfa      	bgt.n	41def0 <.LVL186+0x2>
  41defa:	4638      	mov	r0, r7

0041defc <.LVL189>:
  41defc:	f002 fe36 	bl	420b6c <.LFE2>

0041df00 <.LVL190>:
  41df00:	2c00      	cmp	r4, #0
  41df02:	f100 0314 	add.w	r3, r0, #20

0041df06 <.LVL191>:
  41df06:	dd06      	ble.n	41df16 <.LVL193+0x4>
  41df08:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  41df0c:	2100      	movs	r1, #0

0041df0e <.LVL192>:
  41df0e:	f843 1b04 	str.w	r1, [r3], #4

0041df12 <.LVL193>:
  41df12:	429a      	cmp	r2, r3
  41df14:	d1fb      	bne.n	41df0e <.LVL192>
  41df16:	6934      	ldr	r4, [r6, #16]

0041df18 <.LVL194>:
  41df18:	f106 0114 	add.w	r1, r6, #20

0041df1c <.LVL195>:
  41df1c:	f019 091f 	ands.w	r9, r9, #31

0041df20 <.LVL196>:
  41df20:	eb01 0e84 	add.w	lr, r1, r4, lsl #2

0041df24 <.LVL197>:
  41df24:	d01d      	beq.n	41df62 <.LVL208>
  41df26:	f1c9 0c20 	rsb	ip, r9, #32

0041df2a <.LVL198>:
  41df2a:	2200      	movs	r2, #0

0041df2c <.LVL199>:
  41df2c:	680c      	ldr	r4, [r1, #0]
  41df2e:	fa04 f409 	lsl.w	r4, r4, r9
  41df32:	4314      	orrs	r4, r2
  41df34:	f843 4b04 	str.w	r4, [r3], #4

0041df38 <.LVL200>:
  41df38:	f851 2b04 	ldr.w	r2, [r1], #4

0041df3c <.LVL201>:
  41df3c:	458e      	cmp	lr, r1
  41df3e:	fa22 f20c 	lsr.w	r2, r2, ip

0041df42 <.LVL202>:
  41df42:	d8f3      	bhi.n	41df2c <.LVL199>
  41df44:	601a      	str	r2, [r3, #0]
  41df46:	b10a      	cbz	r2, 41df4c <.LBB24>

0041df48 <.LVL203>:
  41df48:	f108 0502 	add.w	r5, r8, #2

0041df4c <.LBB24>:
  41df4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  41df4e:	6872      	ldr	r2, [r6, #4]

0041df50 <.LBE24>:
  41df50:	3d01      	subs	r5, #1

0041df52 <.LBB28>:
  41df52:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]

0041df56 <.LBE28>:
  41df56:	6105      	str	r5, [r0, #16]

0041df58 <.LBB29>:
  41df58:	6031      	str	r1, [r6, #0]
  41df5a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]

0041df5e <.LBE29>:
  41df5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0041df62 <.LVL208>:
  41df62:	3b04      	subs	r3, #4

0041df64 <.LVL209>:
  41df64:	f851 2b04 	ldr.w	r2, [r1], #4

0041df68 <.LVL210>:
  41df68:	f843 2f04 	str.w	r2, [r3, #4]!
  41df6c:	458e      	cmp	lr, r1
  41df6e:	d8f9      	bhi.n	41df64 <.LVL209>
  41df70:	e7ec      	b.n	41df4c <.LBB24>

0041df72 <.LFE26>:
  41df72:	bf00      	nop

Disassembly of section .text.__register_exitproc%169:

0041df74 <__register_exitproc>:
  41df74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

0041df78 <.LCFI0>:
  41df78:	4c25      	ldr	r4, [pc, #148]	; (41e010 <.LVL14+0x2>)
  41df7a:	6825      	ldr	r5, [r4, #0]
  41df7c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148

0041df80 <.LVL1>:
  41df80:	4606      	mov	r6, r0
  41df82:	4688      	mov	r8, r1
  41df84:	4692      	mov	sl, r2
  41df86:	4699      	mov	r9, r3
  41df88:	b3c4      	cbz	r4, 41dffc <.LVL11>
  41df8a:	6860      	ldr	r0, [r4, #4]

0041df8c <.LVL2>:
  41df8c:	281f      	cmp	r0, #31
  41df8e:	dc17      	bgt.n	41dfc0 <.LVL6>
  41df90:	1c43      	adds	r3, r0, #1

0041df92 <.LVL3>:
  41df92:	b176      	cbz	r6, 41dfb2 <.LVL5>

0041df94 <.LVL4>:
  41df94:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  41df98:	2201      	movs	r2, #1
  41df9a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  41df9e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  41dfa2:	4082      	lsls	r2, r0
  41dfa4:	4311      	orrs	r1, r2
  41dfa6:	2e02      	cmp	r6, #2
  41dfa8:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  41dfac:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  41dfb0:	d01e      	beq.n	41dff0 <.LVL10>

0041dfb2 <.LVL5>:
  41dfb2:	3002      	adds	r0, #2
  41dfb4:	6063      	str	r3, [r4, #4]
  41dfb6:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  41dfba:	2000      	movs	r0, #0
  41dfbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0041dfc0 <.LVL6>:
  41dfc0:	4b14      	ldr	r3, [pc, #80]	; (41e014 <.LVL14+0x6>)

0041dfc2 <.LVL7>:
  41dfc2:	b303      	cbz	r3, 41e006 <.LVL13>
  41dfc4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  41dfc8:	f004 f998 	bl	4222fc <.LFE0>

0041dfcc <.LVL8>:
  41dfcc:	4604      	mov	r4, r0
  41dfce:	b1d0      	cbz	r0, 41e006 <.LVL13>
  41dfd0:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  41dfd4:	2700      	movs	r7, #0
  41dfd6:	e880 0088 	stmia.w	r0, {r3, r7}
  41dfda:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  41dfde:	4638      	mov	r0, r7

0041dfe0 <.LVL9>:
  41dfe0:	2301      	movs	r3, #1
  41dfe2:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  41dfe6:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  41dfea:	2e00      	cmp	r6, #0
  41dfec:	d0e1      	beq.n	41dfb2 <.LVL5>
  41dfee:	e7d1      	b.n	41df94 <.LVL4>

0041dff0 <.LVL10>:
  41dff0:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  41dff4:	430a      	orrs	r2, r1
  41dff6:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  41dffa:	e7da      	b.n	41dfb2 <.LVL5>

0041dffc <.LVL11>:
  41dffc:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  41e000:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  41e004:	e7c1      	b.n	41df8a <.LVL1+0xa>

0041e006 <.LVL13>:
  41e006:	f04f 30ff 	mov.w	r0, #4294967295
  41e00a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0041e00e <.LVL14>:
  41e00e:	bf00      	nop
  41e010:	0041d46c 	.word	0x0041d46c
  41e014:	004222fd 	.word	0x004222fd

Disassembly of section .text.pqdownheap%170:

0041e018 <pqdownheap>:
{
  41e018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

0041e01c <.LCFI2>:
    int v = s->heap[k];
  41e01c:	eb00 0382 	add.w	r3, r0, r2, lsl #2
  41e020:	f8d3 8b5c 	ldr.w	r8, [r3, #2908]	; 0xb5c
    int j = k << 1;  /* left son of k */
  41e024:	0053      	lsls	r3, r2, #1

0041e026 <.LVL6>:
    while (j <= s->heap_len) {
  41e026:	f241 4450 	movw	r4, #5200	; 0x1450
  41e02a:	5907      	ldr	r7, [r0, r4]
  41e02c:	42bb      	cmp	r3, r7
  41e02e:	dc3e      	bgt.n	41e0ae <.LVL13>
        if (smaller(tree, v, s->heap[j], s->depth)) break;
  41e030:	eb01 0e88 	add.w	lr, r1, r8, lsl #2
            smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {
  41e034:	f241 4c58 	movw	ip, #5208	; 0x1458
        if (smaller(tree, v, s->heap[j], s->depth)) break;
  41e038:	eb00 0908 	add.w	r9, r0, r8
  41e03c:	44e1      	add	r9, ip
  41e03e:	e01d      	b.n	41e07c <.LVL11>
            smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {
  41e040:	4482      	add	sl, r0
  41e042:	4483      	add	fp, r0
  41e044:	f81a 600c 	ldrb.w	r6, [sl, ip]
  41e048:	f81b 500c 	ldrb.w	r5, [fp, ip]
  41e04c:	42ae      	cmp	r6, r5
  41e04e:	bf88      	it	hi
  41e050:	461c      	movhi	r4, r3
  41e052:	e000      	b.n	41e056 <.LVL7>
  41e054:	461c      	mov	r4, r3

0041e056 <.LVL7>:
        if (smaller(tree, v, s->heap[j], s->depth)) break;
  41e056:	f8be 6000 	ldrh.w	r6, [lr]
  41e05a:	eb00 0384 	add.w	r3, r0, r4, lsl #2
  41e05e:	f8d3 3b5c 	ldr.w	r3, [r3, #2908]	; 0xb5c
  41e062:	f831 5023 	ldrh.w	r5, [r1, r3, lsl #2]
  41e066:	42ae      	cmp	r6, r5
  41e068:	d321      	bcc.n	41e0ae <.LVL13>
  41e06a:	d019      	beq.n	41e0a0 <.LVL12>
        s->heap[k] = s->heap[j];  k = j;
  41e06c:	eb00 0282 	add.w	r2, r0, r2, lsl #2

0041e070 <.LVL8>:
  41e070:	f8c2 3b5c 	str.w	r3, [r2, #2908]	; 0xb5c

0041e074 <.LVL9>:
        j <<= 1;
  41e074:	0063      	lsls	r3, r4, #1

0041e076 <.LVL10>:
  41e076:	4622      	mov	r2, r4
    while (j <= s->heap_len) {
  41e078:	42bb      	cmp	r3, r7
  41e07a:	dc18      	bgt.n	41e0ae <.LVL13>

0041e07c <.LVL11>:
        if (j < s->heap_len &&
  41e07c:	429f      	cmp	r7, r3
  41e07e:	dde9      	ble.n	41e054 <.LVL6+0x2e>
            smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {
  41e080:	1c5c      	adds	r4, r3, #1
  41e082:	eb00 0583 	add.w	r5, r0, r3, lsl #2
  41e086:	f8d5 ab60 	ldr.w	sl, [r5, #2912]	; 0xb60
  41e08a:	f831 602a 	ldrh.w	r6, [r1, sl, lsl #2]
  41e08e:	f8d5 bb5c 	ldr.w	fp, [r5, #2908]	; 0xb5c
  41e092:	f831 502b 	ldrh.w	r5, [r1, fp, lsl #2]
        if (j < s->heap_len &&
  41e096:	42ae      	cmp	r6, r5
  41e098:	d3dd      	bcc.n	41e056 <.LVL7>
            smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {
  41e09a:	d0d1      	beq.n	41e040 <.LVL6+0x1a>
  41e09c:	461c      	mov	r4, r3
  41e09e:	e7da      	b.n	41e056 <.LVL7>

0041e0a0 <.LVL12>:
        if (smaller(tree, v, s->heap[j], s->depth)) break;
  41e0a0:	18c5      	adds	r5, r0, r3
  41e0a2:	f899 6000 	ldrb.w	r6, [r9]
  41e0a6:	f815 500c 	ldrb.w	r5, [r5, ip]
  41e0aa:	42ae      	cmp	r6, r5
  41e0ac:	d8de      	bhi.n	41e06c <.LVL7+0x16>

0041e0ae <.LVL13>:
    s->heap[k] = v;
  41e0ae:	eb00 0282 	add.w	r2, r0, r2, lsl #2

0041e0b2 <.LVL14>:
  41e0b2:	f8c2 8b5c 	str.w	r8, [r2, #2908]	; 0xb5c
  41e0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section .text.mp_read_radix%171:

0041e0bc <mp_read_radix>:
  return FP_OKAY;
}

/* fast math conversion */
int mp_read_radix(mp_int *a, const char *str, int radix)
{
  41e0bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

0041e0c0 <.LCFI142>:
  41e0c0:	4606      	mov	r6, r0
  41e0c2:	4688      	mov	r8, r1
  41e0c4:	4617      	mov	r7, r2

0041e0c6 <.LBB194>:
  fp_zero (a);
  41e0c6:	f004 f83d 	bl	422144 <.LFE163>

0041e0ca <.LVL866>:
  if (radix < 2 || radix > 64) {
  41e0ca:	1ebb      	subs	r3, r7, #2
  41e0cc:	2b3e      	cmp	r3, #62	; 0x3e
  41e0ce:	d83f      	bhi.n	41e150 <.LVL883>
  41e0d0:	46b9      	mov	r9, r7
  if (*str == '-') {
  41e0d2:	f898 3000 	ldrb.w	r3, [r8]
  41e0d6:	2b2d      	cmp	r3, #45	; 0x2d
  41e0d8:	d00b      	beq.n	41e0f2 <.LVL869>
    neg = FP_ZPOS;
  41e0da:	f04f 0a00 	mov.w	sl, #0

0041e0de <.LVL867>:
  while (*str) {
  41e0de:	f898 5000 	ldrb.w	r5, [r8]
  41e0e2:	bb3d      	cbnz	r5, 41e134 <.LVL879>

0041e0e4 <.LVL868>:
  if (fp_iszero(a) != FP_YES) {
  41e0e4:	6830      	ldr	r0, [r6, #0]
  41e0e6:	b3a8      	cbz	r0, 41e154 <.LBE194>
     a->sign = neg;
  41e0e8:	f8c6 a004 	str.w	sl, [r6, #4]
  return FP_OKAY;
  41e0ec:	2000      	movs	r0, #0
  41e0ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0041e0f2 <.LVL869>:
    ++str;
  41e0f2:	f108 0801 	add.w	r8, r8, #1

0041e0f6 <.LVL870>:
    neg = FP_NEG;
  41e0f6:	f04f 0a01 	mov.w	sl, #1
  41e0fa:	e7f0      	b.n	41e0de <.LVL867>

0041e0fc <.LBB196>:
    ch = (char)((radix <= 36) ? XTOUPPER((unsigned char)*str) : *str);
  41e0fc:	f003 fecc 	bl	421e98 <.LFE161>

0041e100 <.LVL872>:
  41e100:	4428      	add	r0, r5
  41e102:	7843      	ldrb	r3, [r0, #1]
  41e104:	f003 0303 	and.w	r3, r3, #3
  41e108:	2b02      	cmp	r3, #2
  41e10a:	bf08      	it	eq
  41e10c:	3d20      	subeq	r5, #32

0041e10e <.LBE196>:
  41e10e:	b2ed      	uxtb	r5, r5
  41e110:	e012      	b.n	41e138 <.LVL880>

0041e112 <.LVL874>:
    for (y = 0; y < 64; y++) {
  41e112:	2400      	movs	r4, #0

0041e114 <.LVL875>:
    if (y < radix) {
  41e114:	42a7      	cmp	r7, r4
  41e116:	dde5      	ble.n	41e0e4 <.LVL868>
      fp_mul_d (a, (fp_digit) radix, a);
  41e118:	4632      	mov	r2, r6
  41e11a:	4649      	mov	r1, r9
  41e11c:	4630      	mov	r0, r6
  41e11e:	f7fe ff75 	bl	41d00c <.LFE176>

0041e122 <.LVL876>:
      fp_add_d (a, (fp_digit) y, a);
  41e122:	4632      	mov	r2, r6
  41e124:	4621      	mov	r1, r4
  41e126:	4630      	mov	r0, r6
  41e128:	f003 fc29 	bl	42197e <.LFE38>

0041e12c <.LVL877>:
  while (*str) {
  41e12c:	f818 5f01 	ldrb.w	r5, [r8, #1]!

0041e130 <.LVL878>:
  41e130:	2d00      	cmp	r5, #0
  41e132:	d0d7      	beq.n	41e0e4 <.LVL868>

0041e134 <.LVL879>:
    ch = (char)((radix <= 36) ? XTOUPPER((unsigned char)*str) : *str);
  41e134:	2f24      	cmp	r7, #36	; 0x24
  41e136:	dde1      	ble.n	41e0fc <.LBB196>

0041e138 <.LVL880>:
      if (ch == fp_s_rmap[y]) {
  41e138:	2d30      	cmp	r5, #48	; 0x30
  41e13a:	d0ea      	beq.n	41e112 <.LVL874>
  41e13c:	4b06      	ldr	r3, [pc, #24]	; (41e158 <.LVL885>)
    for (y = 0; y < 64; y++) {
  41e13e:	2401      	movs	r4, #1

0041e140 <.LVL881>:
      if (ch == fp_s_rmap[y]) {
  41e140:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  41e144:	42aa      	cmp	r2, r5
  41e146:	d0e5      	beq.n	41e114 <.LVL875>
    for (y = 0; y < 64; y++) {
  41e148:	3401      	adds	r4, #1
  41e14a:	2c40      	cmp	r4, #64	; 0x40
  41e14c:	d1f8      	bne.n	41e140 <.LVL881>
  41e14e:	e7e1      	b.n	41e114 <.LVL875>

0041e150 <.LVL883>:
    return FP_VAL;
  41e150:	f04f 30ff 	mov.w	r0, #4294967295

0041e154 <.LBE194>:
    return fp_read_radix(a, str, radix);
}
  41e154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0041e158 <.LVL885>:
  41e158:	00420164 	.word	0x00420164

Disassembly of section .text.SYS_TIME_Initialize%172:

0041e15c <SYS_TIME_Initialize>:
// Section: System Interface Functions
// *****************************************************************************
// *****************************************************************************
SYS_MODULE_OBJ SYS_TIME_Initialize( const SYS_MODULE_INDEX index, const SYS_MODULE_INIT * const init )
{
    if(init == 0 || index != SYS_TIME_INDEX_0)
  41e15c:	2900      	cmp	r1, #0
  41e15e:	d042      	beq.n	41e1e6 <.LCFI12>
{
  41e160:	b538      	push	{r3, r4, r5, lr}

0041e162 <.LCFI11>:
  41e162:	460d      	mov	r5, r1
    if(init == 0 || index != SYS_TIME_INDEX_0)
  41e164:	b110      	cbz	r0, 41e16c <.LBB36>
    {
        return SYS_MODULE_OBJ_INVALID;
  41e166:	f04f 30ff 	mov.w	r0, #4294967295

0041e16a <.LVL125>:
    memset(timers, 0, sizeof(timers));

    gSystemCounterObj.status = SYS_STATUS_READY;

    return (SYS_MODULE_OBJ)&gSystemCounterObj;
}
  41e16a:	bd38      	pop	{r3, r4, r5, pc}

0041e16c <.LBB36>:
// *****************************************************************************
/* Function: OSAL_RESULT OSAL_MUTEX_Create(OSAL_MUTEX_HANDLE_TYPE mutexID)
 */
static OSAL_RESULT __attribute__((always_inline)) OSAL_MUTEX_Create(OSAL_MUTEX_HANDLE_TYPE* mutexID)
{
   *mutexID = 1;
  41e16c:	4c1f      	ldr	r4, [pc, #124]	; (41e1ec <.LVL138+0x2>)
  41e16e:	2301      	movs	r3, #1
  41e170:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

0041e174 <.LBB38>:
    counterObj->timePlib = initData->timePlib;
  41e174:	680b      	ldr	r3, [r1, #0]
  41e176:	6063      	str	r3, [r4, #4]
    counterObj->hwTimerFrequency = counterObj->timePlib->timerFrequencyGet();
  41e178:	689b      	ldr	r3, [r3, #8]
  41e17a:	4798      	blx	r3

0041e17c <.LVL128>:
  41e17c:	60e0      	str	r0, [r4, #12]

0041e17e <.LVL129>:
    cpuCyclesPerTimerClock=(SYS_TIME_CPU_CLOCK_FREQUENCY/counterObj->hwTimerFrequency);
  41e17e:	4b1c      	ldr	r3, [pc, #112]	; (41e1f0 <.LVL138+0x6>)
  41e180:	fbb3 f0f0 	udiv	r0, r3, r0

0041e184 <.LVL130>:
    counterObj->hwTimerCompareMargin=(SYS_TIME_COMPARE_UPDATE_EXECUTION_CYCLES/cpuCyclesPerTimerClock) +2;
  41e184:	f44f 7361 	mov.w	r3, #900	; 0x384
  41e188:	fb93 f3f0 	sdiv	r3, r3, r0
  41e18c:	3302      	adds	r3, #2
  41e18e:	6223      	str	r3, [r4, #32]
    counterObj->hwTimerIntNum = initData->hwTimerIntNum;
  41e190:	f995 3004 	ldrsb.w	r3, [r5, #4]
  41e194:	7223      	strb	r3, [r4, #8]
    counterObj->hwTimerPreviousValue = 0;
  41e196:	2100      	movs	r1, #0
  41e198:	6121      	str	r1, [r4, #16]
    counterObj->hwTimerPeriodValue = SYS_TIME_HW_COUNTER_PERIOD;
  41e19a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41e19e:	61a3      	str	r3, [r4, #24]
    counterObj->hwTimerCompareValue = SYS_TIME_HW_COUNTER_HALF_PERIOD;
  41e1a0:	f647 73ff 	movw	r3, #32767	; 0x7fff
  41e1a4:	61e3      	str	r3, [r4, #28]
    counterObj->swCounter64Low = 0;
  41e1a6:	6261      	str	r1, [r4, #36]	; 0x24
    counterObj->swCounter64High = 0;
  41e1a8:	62a1      	str	r1, [r4, #40]	; 0x28
    counterObj->tmrActive = NULL;
  41e1aa:	6321      	str	r1, [r4, #48]	; 0x30
    counterObj->interruptNestingCount = 0;
  41e1ac:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
    counterObj->timePlib->timerCallbackSet(SYS_TIME_PLIBCallback, 0);
  41e1b0:	6863      	ldr	r3, [r4, #4]
  41e1b2:	681b      	ldr	r3, [r3, #0]
  41e1b4:	480f      	ldr	r0, [pc, #60]	; (41e1f4 <.LVL138+0xa>)

0041e1b6 <.LVL131>:
  41e1b6:	4798      	blx	r3

0041e1b8 <.LVL132>:
    if (counterObj->timePlib->timerPeriodSet != NULL)
  41e1b8:	6863      	ldr	r3, [r4, #4]
  41e1ba:	685b      	ldr	r3, [r3, #4]
  41e1bc:	b10b      	cbz	r3, 41e1c2 <.LVL132+0xa>
        counterObj->timePlib->timerPeriodSet(counterObj->hwTimerPeriodValue);
  41e1be:	69a0      	ldr	r0, [r4, #24]
  41e1c0:	4798      	blx	r3
    counterObj->timePlib->timerCompareSet(counterObj->hwTimerCompareValue);
  41e1c2:	4c0a      	ldr	r4, [pc, #40]	; (41e1ec <.LVL138+0x2>)
  41e1c4:	6863      	ldr	r3, [r4, #4]
  41e1c6:	68db      	ldr	r3, [r3, #12]
  41e1c8:	69e0      	ldr	r0, [r4, #28]
  41e1ca:	4798      	blx	r3
    counterObj->timePlib->timerStart();
  41e1cc:	6863      	ldr	r3, [r4, #4]
  41e1ce:	691b      	ldr	r3, [r3, #16]
  41e1d0:	4798      	blx	r3

0041e1d2 <.LBE38>:
    memset(timers, 0, sizeof(timers));
  41e1d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
  41e1d6:	2100      	movs	r1, #0
  41e1d8:	4807      	ldr	r0, [pc, #28]	; (41e1f8 <.LVL138+0xe>)
  41e1da:	f000 f99d 	bl	41e518 <.LFE14>

0041e1de <.LVL136>:
    gSystemCounterObj.status = SYS_STATUS_READY;
  41e1de:	2302      	movs	r3, #2
  41e1e0:	7023      	strb	r3, [r4, #0]
    return (SYS_MODULE_OBJ)&gSystemCounterObj;
  41e1e2:	4620      	mov	r0, r4
  41e1e4:	bd38      	pop	{r3, r4, r5, pc}

0041e1e6 <.LCFI12>:
        return SYS_MODULE_OBJ_INVALID;
  41e1e6:	f04f 30ff 	mov.w	r0, #4294967295

0041e1ea <.LVL138>:
  41e1ea:	4770      	bx	lr
  41e1ec:	2040d624 	.word	0x2040d624
  41e1f0:	11e1a300 	.word	0x11e1a300
  41e1f4:	0041c9d9 	.word	0x0041c9d9
  41e1f8:	2040d3f4 	.word	0x2040d3f4

Disassembly of section .text%173:

0041e200 <memchr>:
  41e200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  41e204:	2a10      	cmp	r2, #16
  41e206:	db2b      	blt.n	41e260 <memchr+0x60>
  41e208:	f010 0f07 	tst.w	r0, #7
  41e20c:	d008      	beq.n	41e220 <memchr+0x20>
  41e20e:	f810 3b01 	ldrb.w	r3, [r0], #1
  41e212:	3a01      	subs	r2, #1
  41e214:	428b      	cmp	r3, r1
  41e216:	d02d      	beq.n	41e274 <memchr+0x74>
  41e218:	f010 0f07 	tst.w	r0, #7
  41e21c:	b342      	cbz	r2, 41e270 <memchr+0x70>
  41e21e:	d1f6      	bne.n	41e20e <memchr+0xe>
  41e220:	b4f0      	push	{r4, r5, r6, r7}
  41e222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  41e226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  41e22a:	f022 0407 	bic.w	r4, r2, #7
  41e22e:	f07f 0700 	mvns.w	r7, #0
  41e232:	2300      	movs	r3, #0
  41e234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  41e238:	3c08      	subs	r4, #8
  41e23a:	ea85 0501 	eor.w	r5, r5, r1
  41e23e:	ea86 0601 	eor.w	r6, r6, r1
  41e242:	fa85 f547 	uadd8	r5, r5, r7
  41e246:	faa3 f587 	sel	r5, r3, r7
  41e24a:	fa86 f647 	uadd8	r6, r6, r7
  41e24e:	faa5 f687 	sel	r6, r5, r7
  41e252:	b98e      	cbnz	r6, 41e278 <memchr+0x78>
  41e254:	d1ee      	bne.n	41e234 <memchr+0x34>
  41e256:	bcf0      	pop	{r4, r5, r6, r7}
  41e258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  41e25c:	f002 0207 	and.w	r2, r2, #7
  41e260:	b132      	cbz	r2, 41e270 <memchr+0x70>
  41e262:	f810 3b01 	ldrb.w	r3, [r0], #1
  41e266:	3a01      	subs	r2, #1
  41e268:	ea83 0301 	eor.w	r3, r3, r1
  41e26c:	b113      	cbz	r3, 41e274 <memchr+0x74>
  41e26e:	d1f8      	bne.n	41e262 <memchr+0x62>
  41e270:	2000      	movs	r0, #0
  41e272:	4770      	bx	lr
  41e274:	3801      	subs	r0, #1
  41e276:	4770      	bx	lr
  41e278:	2d00      	cmp	r5, #0
  41e27a:	bf06      	itte	eq
  41e27c:	4635      	moveq	r5, r6
  41e27e:	3803      	subeq	r0, #3
  41e280:	3807      	subne	r0, #7
  41e282:	f015 0f01 	tst.w	r5, #1
  41e286:	d107      	bne.n	41e298 <memchr+0x98>
  41e288:	3001      	adds	r0, #1
  41e28a:	f415 7f80 	tst.w	r5, #256	; 0x100
  41e28e:	bf02      	ittt	eq
  41e290:	3001      	addeq	r0, #1
  41e292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  41e296:	3001      	addeq	r0, #1
  41e298:	bcf0      	pop	{r4, r5, r6, r7}
  41e29a:	3801      	subs	r0, #1
  41e29c:	4770      	bx	lr

0041e29e <L0>:
  41e29e:	bf00      	nop

Disassembly of section .text.__pow5mult%174:

0041e2a0 <__pow5mult>:
  41e2a0:	f012 0303 	ands.w	r3, r2, #3
  41e2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0041e2a8 <.LCFI10>:
  41e2a8:	4614      	mov	r4, r2

0041e2aa <.LVL152>:
  41e2aa:	4607      	mov	r7, r0
  41e2ac:	d12e      	bne.n	41e30c <.LVL173>
  41e2ae:	460d      	mov	r5, r1

0041e2b0 <.LVL153>:
  41e2b0:	10a4      	asrs	r4, r4, #2

0041e2b2 <.LVL154>:
  41e2b2:	d01c      	beq.n	41e2ee <.LVL165>
  41e2b4:	6cbe      	ldr	r6, [r7, #72]	; 0x48

0041e2b6 <.LVL155>:
  41e2b6:	b396      	cbz	r6, 41e31e <.LBB20>
  41e2b8:	07e3      	lsls	r3, r4, #31
  41e2ba:	f04f 0800 	mov.w	r8, #0
  41e2be:	d406      	bmi.n	41e2ce <.LVL161>

0041e2c0 <.LVL156>:
  41e2c0:	1064      	asrs	r4, r4, #1

0041e2c2 <.LVL157>:
  41e2c2:	d014      	beq.n	41e2ee <.LVL165>

0041e2c4 <.LVL158>:
  41e2c4:	6830      	ldr	r0, [r6, #0]

0041e2c6 <.LVL159>:
  41e2c6:	b1a8      	cbz	r0, 41e2f4 <.LVL166>
  41e2c8:	4606      	mov	r6, r0

0041e2ca <.LVL160>:
  41e2ca:	07e3      	lsls	r3, r4, #31
  41e2cc:	d5f8      	bpl.n	41e2c0 <.LVL156>

0041e2ce <.LVL161>:
  41e2ce:	4632      	mov	r2, r6
  41e2d0:	4629      	mov	r1, r5
  41e2d2:	4638      	mov	r0, r7
  41e2d4:	f7fc ff6e 	bl	41b1b4 <.LBE11>

0041e2d8 <.LBB16>:
  41e2d8:	b1b5      	cbz	r5, 41e308 <.LVL171>
  41e2da:	686a      	ldr	r2, [r5, #4]
  41e2dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c

0041e2de <.LBE16>:
  41e2de:	1064      	asrs	r4, r4, #1

0041e2e0 <.LBB19>:
  41e2e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  41e2e4:	6029      	str	r1, [r5, #0]
  41e2e6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]

0041e2ea <.LBE19>:
  41e2ea:	4605      	mov	r5, r0

0041e2ec <.LVL164>:
  41e2ec:	d1ea      	bne.n	41e2c4 <.LVL158>

0041e2ee <.LVL165>:
  41e2ee:	4628      	mov	r0, r5
  41e2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041e2f4 <.LVL166>:
  41e2f4:	4632      	mov	r2, r6
  41e2f6:	4631      	mov	r1, r6
  41e2f8:	4638      	mov	r0, r7

0041e2fa <.LVL167>:
  41e2fa:	f7fc ff5b 	bl	41b1b4 <.LBE11>

0041e2fe <.LVL168>:
  41e2fe:	6030      	str	r0, [r6, #0]

0041e300 <.LVL169>:
  41e300:	f8c0 8000 	str.w	r8, [r0]
  41e304:	4606      	mov	r6, r0

0041e306 <.LVL170>:
  41e306:	e7e0      	b.n	41e2ca <.LVL160>

0041e308 <.LVL171>:
  41e308:	4605      	mov	r5, r0

0041e30a <.LVL172>:
  41e30a:	e7d9      	b.n	41e2c0 <.LVL156>

0041e30c <.LVL173>:
  41e30c:	1e5a      	subs	r2, r3, #1

0041e30e <.LVL174>:
  41e30e:	4d0b      	ldr	r5, [pc, #44]	; (41e33c <.LVL182+0x6>)
  41e310:	2300      	movs	r3, #0

0041e312 <.LVL175>:
  41e312:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]

0041e316 <.LVL176>:
  41e316:	f000 ffc3 	bl	41f2a0 <__multadd>

0041e31a <.LVL177>:
  41e31a:	4605      	mov	r5, r0

0041e31c <.LVL178>:
  41e31c:	e7c8      	b.n	41e2b0 <.LVL153>

0041e31e <.LBB20>:
  41e31e:	2101      	movs	r1, #1
  41e320:	4638      	mov	r0, r7
  41e322:	f002 fc23 	bl	420b6c <.LFE2>

0041e326 <.LVL180>:
  41e326:	f240 2171 	movw	r1, #625	; 0x271
  41e32a:	2201      	movs	r2, #1

0041e32c <.LBE20>:
  41e32c:	2300      	movs	r3, #0

0041e32e <.LBB23>:
  41e32e:	6141      	str	r1, [r0, #20]
  41e330:	6102      	str	r2, [r0, #16]
  41e332:	4606      	mov	r6, r0

0041e334 <.LBE23>:
  41e334:	64b8      	str	r0, [r7, #72]	; 0x48

0041e336 <.LVL182>:
  41e336:	6003      	str	r3, [r0, #0]
  41e338:	e7be      	b.n	41e2b8 <.LVL155+0x2>
  41e33a:	bf00      	nop
  41e33c:	00422448 	.word	0x00422448

Disassembly of section .text.wc_Des3_CbcEncrypt%175:

0041e340 <wc_Des3_CbcEncrypt>:
        if (des == NULL || out == NULL || in == NULL) {
  41e340:	2a00      	cmp	r2, #0
  41e342:	bf18      	it	ne
  41e344:	2900      	cmpne	r1, #0
  41e346:	d047      	beq.n	41e3d8 <.LCFI14>
    {
  41e348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

0041e34c <.LCFI13>:
  41e34c:	4680      	mov	r8, r0
  41e34e:	460f      	mov	r7, r1
        if (des == NULL || out == NULL || in == NULL) {
  41e350:	b3d8      	cbz	r0, 41e3ca <.LVL222>
        blocks = sz / DES_BLOCK_SIZE;
  41e352:	08db      	lsrs	r3, r3, #3

0041e354 <.LVL208>:
        while (blocks--) {
  41e354:	f103 39ff 	add.w	r9, r3, #4294967295

0041e358 <.LVL209>:
  41e358:	b3db      	cbz	r3, 41e3d2 <.LVL224>
  41e35a:	1e56      	subs	r6, r2, #1
            xorbuf((byte*)des->reg, in, DES_BLOCK_SIZE);
  41e35c:	f500 75c0 	add.w	r5, r0, #384	; 0x180
  41e360:	f200 1487 	addw	r4, r0, #391	; 0x187
  41e364:	e01d      	b.n	41e3a2 <.LBB279>

0041e366 <.LBB273>:
  41e366:	f8d8 3180 	ldr.w	r3, [r8, #384]	; 0x180
  41e36a:	f8d6 2001 	ldr.w	r2, [r6, #1]
  41e36e:	4053      	eors	r3, r2
  41e370:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180

0041e374 <.LVL211>:
  41e374:	f8d8 3184 	ldr.w	r3, [r8, #388]	; 0x184
  41e378:	f8d6 2005 	ldr.w	r2, [r6, #5]
  41e37c:	4053      	eors	r3, r2
  41e37e:	f8c8 3184 	str.w	r3, [r8, #388]	; 0x184

0041e382 <.LBE273>:
            Des3ProcessBlock(des, (byte*)des->reg, (byte*)des->reg);
  41e382:	462a      	mov	r2, r5
  41e384:	4629      	mov	r1, r5
  41e386:	4640      	mov	r0, r8
  41e388:	f7fc fc2e 	bl	41abe8 <.LFE19>

0041e38c <.LVL213>:
            XMEMCPY(out, des->reg, DES_BLOCK_SIZE);
  41e38c:	682a      	ldr	r2, [r5, #0]
  41e38e:	686b      	ldr	r3, [r5, #4]
  41e390:	603a      	str	r2, [r7, #0]
  41e392:	607b      	str	r3, [r7, #4]
            out += DES_BLOCK_SIZE;
  41e394:	3708      	adds	r7, #8

0041e396 <.LVL214>:
        while (blocks--) {
  41e396:	f109 39ff 	add.w	r9, r9, #4294967295
  41e39a:	3608      	adds	r6, #8

0041e39c <.LVL216>:
  41e39c:	f1b9 3fff 	cmp.w	r9, #4294967295
  41e3a0:	d010      	beq.n	41e3c4 <.LBE277>

0041e3a2 <.LBB279>:
    if (((wolfssl_word)buf | (wolfssl_word)mask | count) % WOLFSSL_WORD_SIZE == 0)
  41e3a2:	1c73      	adds	r3, r6, #1

0041e3a4 <.LVL218>:
  41e3a4:	432b      	orrs	r3, r5

0041e3a6 <.LVL219>:
  41e3a6:	f013 0f03 	tst.w	r3, #3
  41e3aa:	d0dc      	beq.n	41e366 <.LBB273>
  41e3ac:	f208 137f 	addw	r3, r8, #383	; 0x17f
  41e3b0:	4631      	mov	r1, r6

0041e3b2 <.LBB277>:
        for (i = 0; i < count; i++) b[i] ^= m[i];
  41e3b2:	785a      	ldrb	r2, [r3, #1]
  41e3b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  41e3b8:	4042      	eors	r2, r0
  41e3ba:	f803 2f01 	strb.w	r2, [r3, #1]!
  41e3be:	42a3      	cmp	r3, r4
  41e3c0:	d1f7      	bne.n	41e3b2 <.LBB277>
  41e3c2:	e7de      	b.n	41e382 <.LBE273>

0041e3c4 <.LBE277>:
        return 0;
  41e3c4:	2000      	movs	r0, #0
  41e3c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0041e3ca <.LVL222>:
            return BAD_FUNC_ARG;
  41e3ca:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e3ce <.LVL223>:
  41e3ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0041e3d2 <.LVL224>:
        return 0;
  41e3d2:	2000      	movs	r0, #0

0041e3d4 <.LVL225>:
    }
  41e3d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0041e3d8 <.LCFI14>:
            return BAD_FUNC_ARG;
  41e3d8:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e3dc <.LVL227>:
    }
  41e3dc:	4770      	bx	lr

Disassembly of section .text.wc_Hash%176:

0041e3de <wc_Hash>:
}

/* Generic Hashing Wrapper */
int wc_Hash(enum wc_HashType hash_type, const byte* data,
    word32 data_len, byte* hash, word32 hash_len)
{
  41e3de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041e3e0 <.LCFI27>:
  41e3e0:	4604      	mov	r4, r0
  41e3e2:	460d      	mov	r5, r1
  41e3e4:	4616      	mov	r6, r2
  41e3e6:	461f      	mov	r7, r3

0041e3e8 <.LVL130>:
    int ret = HASH_TYPE_E; /* Default to hash type error */
    word32 dig_size;

    /* Validate hash buffer size */
    dig_size = wc_HashGetDigestSize(hash_type);
  41e3e8:	f003 f864 	bl	4214b4 <wc_HashGetDigestSize>

0041e3ec <.LVL131>:
    if (hash_len < dig_size) {
  41e3ec:	9b06      	ldr	r3, [sp, #24]
  41e3ee:	4298      	cmp	r0, r3
  41e3f0:	d83d      	bhi.n	41e46e <.LVL152>
    (void)data;
    (void)data_len;
    (void)hash;
    (void)hash_len;

    switch(hash_type)
  41e3f2:	1ee0      	subs	r0, r4, #3

0041e3f4 <.LVL132>:
  41e3f4:	2806      	cmp	r0, #6
  41e3f6:	d805      	bhi.n	41e404 <.LVL132+0x10>
  41e3f8:	e8df f000 	tbb	[pc, r0]
  41e3fc:	1c150e07 	.word	0x1c150e07
  41e400:	2a23      	.short	0x2a23
  41e402:	3c          	.byte	0x3c
  41e403:	00          	.byte	0x00
        /* Not Supported */
        case WC_HASH_TYPE_MD2:
        case WC_HASH_TYPE_MD4:
        case WC_HASH_TYPE_NONE:
        default:
            ret = BAD_FUNC_ARG;
  41e404:	f06f 03ac 	mvn.w	r3, #172	; 0xac
  41e408:	e036      	b.n	41e478 <.LVL154>
            ret = wc_Md5Hash(data, data_len, hash);
  41e40a:	463a      	mov	r2, r7
  41e40c:	4631      	mov	r1, r6
  41e40e:	4628      	mov	r0, r5
  41e410:	f003 f86b 	bl	4214ea <.LFE1>

0041e414 <.LVL133>:
  41e414:	4603      	mov	r3, r0

0041e416 <.LVL134>:
            break;
  41e416:	e02f      	b.n	41e478 <.LVL154>

0041e418 <.LVL135>:
            ret = wc_ShaHash(data, data_len, hash);
  41e418:	463a      	mov	r2, r7
  41e41a:	4631      	mov	r1, r6
  41e41c:	4628      	mov	r0, r5
  41e41e:	f003 f9fb 	bl	421818 <L0>

0041e422 <.LVL136>:
  41e422:	4603      	mov	r3, r0

0041e424 <.LVL137>:
            break;
  41e424:	e028      	b.n	41e478 <.LVL154>

0041e426 <.LVL138>:
            ret = wc_Sha256Hash(data, data_len, hash);
  41e426:	463a      	mov	r2, r7
  41e428:	4631      	mov	r1, r6
  41e42a:	4628      	mov	r0, r5
  41e42c:	f003 f878 	bl	421520 <.LFE6>

0041e430 <.LVL139>:
  41e430:	4603      	mov	r3, r0

0041e432 <.LVL140>:
            break;
  41e432:	e021      	b.n	41e478 <.LVL154>

0041e434 <.LVL141>:
            ret = wc_Sha384Hash(data, data_len, hash);
  41e434:	463a      	mov	r2, r7
  41e436:	4631      	mov	r1, r6
  41e438:	4628      	mov	r0, r5
  41e43a:	f003 f8a7 	bl	42158c <.LFE9>

0041e43e <.LVL142>:
  41e43e:	4603      	mov	r3, r0

0041e440 <.LVL143>:
            break;
  41e440:	e01a      	b.n	41e478 <.LVL154>

0041e442 <.LVL144>:
            ret = wc_Sha512Hash(data, data_len, hash);
  41e442:	463a      	mov	r2, r7
  41e444:	4631      	mov	r1, r6
  41e446:	4628      	mov	r0, r5
  41e448:	f003 f885 	bl	421556 <.LFE8>

0041e44c <.LVL145>:
  41e44c:	4603      	mov	r3, r0

0041e44e <.LVL146>:
            break;
  41e44e:	e013      	b.n	41e478 <.LVL154>

0041e450 <.LVL147>:
            ret = wc_Md5Hash(data, data_len, hash);
  41e450:	463a      	mov	r2, r7
  41e452:	4631      	mov	r1, r6
  41e454:	4628      	mov	r0, r5
  41e456:	f003 f848 	bl	4214ea <.LFE1>

0041e45a <.LVL148>:
            if (ret == 0) {
  41e45a:	4603      	mov	r3, r0
  41e45c:	b960      	cbnz	r0, 41e478 <.LVL154>
                ret = wc_ShaHash(data, data_len, &hash[MD5_DIGEST_SIZE]);
  41e45e:	f107 0210 	add.w	r2, r7, #16
  41e462:	4631      	mov	r1, r6
  41e464:	4628      	mov	r0, r5

0041e466 <.LVL149>:
  41e466:	f003 f9d7 	bl	421818 <L0>

0041e46a <.LVL150>:
  41e46a:	4603      	mov	r3, r0

0041e46c <.LVL151>:
  41e46c:	e004      	b.n	41e478 <.LVL154>

0041e46e <.LVL152>:
        return BUFFER_E;
  41e46e:	f06f 0383 	mvn.w	r3, #131	; 0x83
  41e472:	e001      	b.n	41e478 <.LVL154>

0041e474 <.LVL153>:
    int ret = HASH_TYPE_E; /* Default to hash type error */
  41e474:	f06f 03e7 	mvn.w	r3, #231	; 0xe7

0041e478 <.LVL154>:
            break;
    }
    return ret;
}
  41e478:	4618      	mov	r0, r3
  41e47a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

Disassembly of section .text.deflateEnd%177:

0041e47c <deflateEnd>:
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  41e47c:	2800      	cmp	r0, #0
  41e47e:	d041      	beq.n	41e504 <.LCFI31>
{
  41e480:	b538      	push	{r3, r4, r5, lr}

0041e482 <.LCFI30>:
  41e482:	4604      	mov	r4, r0
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  41e484:	69c3      	ldr	r3, [r0, #28]
  41e486:	2b00      	cmp	r3, #0
  41e488:	d03f      	beq.n	41e50a <.LCFI32>
    status = strm->state->status;
  41e48a:	685d      	ldr	r5, [r3, #4]

0041e48c <.LVL554>:
    if (status != INIT_STATE &&
  41e48c:	f1a5 012a 	sub.w	r1, r5, #42	; 0x2a
  41e490:	291f      	cmp	r1, #31
  41e492:	d827      	bhi.n	41e4e4 <.LVL561>
  41e494:	4a1e      	ldr	r2, [pc, #120]	; (41e510 <.LVL567>)
  41e496:	40ca      	lsrs	r2, r1
  41e498:	f012 0f01 	tst.w	r2, #1
  41e49c:	d022      	beq.n	41e4e4 <.LVL561>
    TRY_FREE(strm, strm->state->pending_buf);
  41e49e:	6899      	ldr	r1, [r3, #8]
  41e4a0:	b111      	cbz	r1, 41e4a8 <.LVL555+0x2>
  41e4a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  41e4a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28

0041e4a6 <.LVL555>:
  41e4a6:	4798      	blx	r3
    TRY_FREE(strm, strm->state->head);
  41e4a8:	69e3      	ldr	r3, [r4, #28]
  41e4aa:	6c59      	ldr	r1, [r3, #68]	; 0x44
  41e4ac:	b111      	cbz	r1, 41e4b4 <.LVL555+0xe>
  41e4ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
  41e4b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  41e4b2:	4798      	blx	r3
    TRY_FREE(strm, strm->state->prev);
  41e4b4:	69e3      	ldr	r3, [r4, #28]
  41e4b6:	6c19      	ldr	r1, [r3, #64]	; 0x40
  41e4b8:	b111      	cbz	r1, 41e4c0 <.LVL555+0x1a>
  41e4ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
  41e4bc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  41e4be:	4798      	blx	r3
    TRY_FREE(strm, strm->state->window);
  41e4c0:	69e3      	ldr	r3, [r4, #28]
  41e4c2:	6b99      	ldr	r1, [r3, #56]	; 0x38
  41e4c4:	b111      	cbz	r1, 41e4cc <.LVL555+0x26>
  41e4c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  41e4c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  41e4ca:	4798      	blx	r3
    ZFREE(strm, strm->state);
  41e4cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  41e4ce:	69e1      	ldr	r1, [r4, #28]
  41e4d0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  41e4d2:	4798      	blx	r3
    strm->state = Z_NULL;
  41e4d4:	2300      	movs	r3, #0
  41e4d6:	61e3      	str	r3, [r4, #28]
    return status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;
  41e4d8:	2d71      	cmp	r5, #113	; 0x71
  41e4da:	bf0c      	ite	eq
  41e4dc:	f06f 0002 	mvneq.w	r0, #2
  41e4e0:	4618      	movne	r0, r3
  41e4e2:	bd38      	pop	{r3, r4, r5, pc}

0041e4e4 <.LVL561>:
        status != COMMENT_STATE &&
  41e4e4:	f1a5 015b 	sub.w	r1, r5, #91	; 0x5b
  41e4e8:	2916      	cmp	r1, #22
  41e4ea:	d804      	bhi.n	41e4f6 <.LVL561+0x12>
  41e4ec:	4a09      	ldr	r2, [pc, #36]	; (41e514 <.LVL567+0x4>)
  41e4ee:	40ca      	lsrs	r2, r1
        status != NAME_STATE &&
  41e4f0:	f012 0f01 	tst.w	r2, #1
  41e4f4:	d1d3      	bne.n	41e49e <.LVL554+0x12>
        status != BUSY_STATE &&
  41e4f6:	f240 229a 	movw	r2, #666	; 0x29a
  41e4fa:	4295      	cmp	r5, r2
  41e4fc:	d0cf      	beq.n	41e49e <.LVL554+0x12>
      return Z_STREAM_ERROR;
  41e4fe:	f06f 0001 	mvn.w	r0, #1

0041e502 <.LVL562>:
}
  41e502:	bd38      	pop	{r3, r4, r5, pc}

0041e504 <.LCFI31>:
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  41e504:	f06f 0001 	mvn.w	r0, #1

0041e508 <.LVL564>:
  41e508:	4770      	bx	lr

0041e50a <.LCFI32>:
  41e50a:	f06f 0001 	mvn.w	r0, #1

0041e50e <.LVL566>:
  41e50e:	bd38      	pop	{r3, r4, r5, pc}

0041e510 <.LVL567>:
  41e510:	88000001 	.word	0x88000001
  41e514:	00401001 	.word	0x00401001

Disassembly of section .text.memset%178:

0041e518 <memset>:
  41e518:	b470      	push	{r4, r5, r6}

0041e51a <.LCFI0>:
  41e51a:	0786      	lsls	r6, r0, #30
  41e51c:	d046      	beq.n	41e5ac <.LCFI2>
  41e51e:	1e54      	subs	r4, r2, #1

0041e520 <.LVL1>:
  41e520:	2a00      	cmp	r2, #0
  41e522:	d041      	beq.n	41e5a8 <.LVL25>
  41e524:	b2ca      	uxtb	r2, r1
  41e526:	4603      	mov	r3, r0
  41e528:	e002      	b.n	41e530 <.LVL4>

0041e52a <.LVL2>:
  41e52a:	f114 34ff 	adds.w	r4, r4, #4294967295

0041e52e <.LVL3>:
  41e52e:	d33b      	bcc.n	41e5a8 <.LVL25>

0041e530 <.LVL4>:
  41e530:	f803 2b01 	strb.w	r2, [r3], #1
  41e534:	079d      	lsls	r5, r3, #30
  41e536:	d1f8      	bne.n	41e52a <.LVL2>

0041e538 <.LVL6>:
  41e538:	2c03      	cmp	r4, #3
  41e53a:	d92e      	bls.n	41e59a <.LVL22>
  41e53c:	b2cd      	uxtb	r5, r1

0041e53e <.LVL7>:
  41e53e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8

0041e542 <.LVL8>:
  41e542:	2c0f      	cmp	r4, #15
  41e544:	ea45 4505 	orr.w	r5, r5, r5, lsl #16

0041e548 <.LVL9>:
  41e548:	d919      	bls.n	41e57e <.LVL17+0x2>
  41e54a:	f103 0210 	add.w	r2, r3, #16
  41e54e:	4626      	mov	r6, r4

0041e550 <.LVL10>:
  41e550:	3e10      	subs	r6, #16

0041e552 <.LVL11>:
  41e552:	2e0f      	cmp	r6, #15
  41e554:	f842 5c10 	str.w	r5, [r2, #-16]

0041e558 <.LVL12>:
  41e558:	f842 5c0c 	str.w	r5, [r2, #-12]

0041e55c <.LVL13>:
  41e55c:	f842 5c08 	str.w	r5, [r2, #-8]

0041e560 <.LVL14>:
  41e560:	f842 5c04 	str.w	r5, [r2, #-4]
  41e564:	f102 0210 	add.w	r2, r2, #16

0041e568 <.LVL15>:
  41e568:	d8f2      	bhi.n	41e550 <.LVL10>
  41e56a:	f1a4 0210 	sub.w	r2, r4, #16

0041e56e <.LVL16>:
  41e56e:	f022 020f 	bic.w	r2, r2, #15
  41e572:	f004 040f 	and.w	r4, r4, #15
  41e576:	3210      	adds	r2, #16
  41e578:	2c03      	cmp	r4, #3
  41e57a:	4413      	add	r3, r2

0041e57c <.LVL17>:
  41e57c:	d90d      	bls.n	41e59a <.LVL22>
  41e57e:	461e      	mov	r6, r3
  41e580:	4622      	mov	r2, r4

0041e582 <.LVL18>:
  41e582:	3a04      	subs	r2, #4

0041e584 <.LVL19>:
  41e584:	2a03      	cmp	r2, #3
  41e586:	f846 5b04 	str.w	r5, [r6], #4

0041e58a <.LVL20>:
  41e58a:	d8fa      	bhi.n	41e582 <.LVL18>
  41e58c:	1f22      	subs	r2, r4, #4

0041e58e <.LVL21>:
  41e58e:	f022 0203 	bic.w	r2, r2, #3
  41e592:	3204      	adds	r2, #4
  41e594:	4413      	add	r3, r2
  41e596:	f004 0403 	and.w	r4, r4, #3

0041e59a <.LVL22>:
  41e59a:	b12c      	cbz	r4, 41e5a8 <.LVL25>
  41e59c:	b2c9      	uxtb	r1, r1

0041e59e <.LVL23>:
  41e59e:	441c      	add	r4, r3
  41e5a0:	f803 1b01 	strb.w	r1, [r3], #1
  41e5a4:	429c      	cmp	r4, r3
  41e5a6:	d1fb      	bne.n	41e5a0 <.LVL23+0x2>

0041e5a8 <.LVL25>:
  41e5a8:	bc70      	pop	{r4, r5, r6}

0041e5aa <.LCFI1>:
  41e5aa:	4770      	bx	lr

0041e5ac <.LCFI2>:
  41e5ac:	4614      	mov	r4, r2
  41e5ae:	4603      	mov	r3, r0
  41e5b0:	e7c2      	b.n	41e538 <.LVL6>

0041e5b2 <.LFE17>:
  41e5b2:	bf00      	nop

Disassembly of section .text.wc_RNG_HealthTest%179:

0041e5b4 <wc_RNG_HealthTest>:
{
  41e5b4:	b570      	push	{r4, r5, r6, lr}

0041e5b6 <.LCFI19>:
  41e5b6:	b0a2      	sub	sp, #136	; 0x88

0041e5b8 <.LCFI20>:
  41e5b8:	9d27      	ldr	r5, [sp, #156]	; 0x9c

0041e5ba <.LVL195>:
    if (entropyA == NULL || output == NULL) {
  41e5ba:	2900      	cmp	r1, #0
  41e5bc:	d03e      	beq.n	41e63c <.LVL217>
  41e5be:	460c      	mov	r4, r1
  41e5c0:	2d00      	cmp	r5, #0
  41e5c2:	d03b      	beq.n	41e63c <.LVL217>
    if (reseed != 0 && entropyB == NULL) {
  41e5c4:	b108      	cbz	r0, 41e5ca <.LVL195+0x10>
  41e5c6:	2b00      	cmp	r3, #0
  41e5c8:	d03b      	beq.n	41e642 <.LVL217+0x6>
    if (outputSz != RNG_HEALTH_TEST_CHECK_SIZE) {
  41e5ca:	9928      	ldr	r1, [sp, #160]	; 0xa0

0041e5cc <.LVL196>:
  41e5cc:	2980      	cmp	r1, #128	; 0x80
  41e5ce:	d13b      	bne.n	41e648 <.LVL218>
  41e5d0:	4621      	mov	r1, r4
  41e5d2:	461e      	mov	r6, r3
  41e5d4:	4604      	mov	r4, r0

0041e5d6 <.LVL197>:
    if (Hash_DRBG_Instantiate(drbg, entropyA, entropyASz, NULL, 0, NULL,
  41e5d6:	f06f 0301 	mvn.w	r3, #1

0041e5da <.LVL198>:
  41e5da:	9302      	str	r3, [sp, #8]
  41e5dc:	2300      	movs	r3, #0
  41e5de:	9301      	str	r3, [sp, #4]
  41e5e0:	9300      	str	r3, [sp, #0]
  41e5e2:	a804      	add	r0, sp, #16

0041e5e4 <.LVL199>:
  41e5e4:	f001 fc23 	bl	41fe2e <.LFE14>

0041e5e8 <.LVL200>:
  41e5e8:	b9c8      	cbnz	r0, 41e61e <.LVL210>
    if (reseed) {
  41e5ea:	b12c      	cbz	r4, 41e5f8 <.LVL202+0x2>
        if (Hash_DRBG_Reseed(drbg, entropyB, entropyBSz) != 0) {
  41e5ec:	9a26      	ldr	r2, [sp, #152]	; 0x98
  41e5ee:	4631      	mov	r1, r6
  41e5f0:	a804      	add	r0, sp, #16

0041e5f2 <.LVL201>:
  41e5f2:	f000 f9e7 	bl	41e9c4 <.LFE17>

0041e5f6 <.LVL202>:
  41e5f6:	b9f0      	cbnz	r0, 41e636 <.LCFI22>
    if (Hash_DRBG_Generate(drbg, output, outputSz) != 0) {
  41e5f8:	2280      	movs	r2, #128	; 0x80
  41e5fa:	4629      	mov	r1, r5
  41e5fc:	a804      	add	r0, sp, #16

0041e5fe <.LVL203>:
  41e5fe:	f7f8 fc39 	bl	416e74 <.LFE0>

0041e602 <.LVL204>:
  41e602:	b110      	cbz	r0, 41e60a <.LVL206>
    int ret = -1;
  41e604:	f04f 34ff 	mov.w	r4, #4294967295

0041e608 <.LVL205>:
  41e608:	e00b      	b.n	41e622 <.L113>

0041e60a <.LVL206>:
    if (Hash_DRBG_Generate(drbg, output, outputSz) != 0) {
  41e60a:	2280      	movs	r2, #128	; 0x80
  41e60c:	4629      	mov	r1, r5
  41e60e:	a804      	add	r0, sp, #16

0041e610 <.LVL207>:
  41e610:	f7f8 fc30 	bl	416e74 <.LFE0>

0041e614 <.LVL208>:
  41e614:	3000      	adds	r0, #0
  41e616:	bf18      	it	ne
  41e618:	2001      	movne	r0, #1
  41e61a:	4244      	negs	r4, r0

0041e61c <.LVL209>:
  41e61c:	e001      	b.n	41e622 <.L113>

0041e61e <.LVL210>:
    int ret = -1;
  41e61e:	f04f 34ff 	mov.w	r4, #4294967295

0041e622 <.L113>:
    if (Hash_DRBG_Uninstantiate(drbg) != 0) {
  41e622:	a804      	add	r0, sp, #16

0041e624 <.LVL212>:
  41e624:	f003 f836 	bl	421694 <.LFE0>

0041e628 <.LVL213>:
  41e628:	2800      	cmp	r0, #0
        ret = -1;
  41e62a:	bf18      	it	ne
  41e62c:	f04f 34ff 	movne.w	r4, #4294967295

0041e630 <.LVL214>:
}
  41e630:	4620      	mov	r0, r4
  41e632:	b022      	add	sp, #136	; 0x88

0041e634 <.LCFI21>:
  41e634:	bd70      	pop	{r4, r5, r6, pc}

0041e636 <.LCFI22>:
    int ret = -1;
  41e636:	f04f 34ff 	mov.w	r4, #4294967295

0041e63a <.LVL216>:
  41e63a:	e7f2      	b.n	41e622 <.L113>

0041e63c <.LVL217>:
        return BAD_FUNC_ARG;
  41e63c:	f06f 04ac 	mvn.w	r4, #172	; 0xac
  41e640:	e7f6      	b.n	41e630 <.LVL214>
        return BAD_FUNC_ARG;
  41e642:	f06f 04ac 	mvn.w	r4, #172	; 0xac
  41e646:	e7f3      	b.n	41e630 <.LVL214>

0041e648 <.LVL218>:
        return ret;
  41e648:	f04f 34ff 	mov.w	r4, #4294967295

0041e64c <.LVL219>:
  41e64c:	e7f0      	b.n	41e630 <.LVL214>

Disassembly of section .text.fp_mod_2d%180:

0041e64e <fp_mod_2d>:
{
  41e64e:	b570      	push	{r4, r5, r6, lr}

0041e650 <.LCFI70>:
  41e650:	4614      	mov	r4, r2
   if (b <= 0) {
  41e652:	1e0d      	subs	r5, r1, #0
  41e654:	dd33      	ble.n	41e6be <.LVL473>
  41e656:	4606      	mov	r6, r0
   fp_copy(a, c);
  41e658:	4611      	mov	r1, r2

0041e65a <.LVL466>:
  41e65a:	f003 faa7 	bl	421bac <.LFE31>

0041e65e <.LVL467>:
   if (b >= (DIGIT_BIT * a->used)) {
  41e65e:	6833      	ldr	r3, [r6, #0]
  41e660:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
  41e664:	da3e      	bge.n	41e6e4 <.LVL477>
  for (x = (b / DIGIT_BIT) + ((b % DIGIT_BIT) == 0 ? 0 : 1); x < c->used; x++) {
  41e666:	462b      	mov	r3, r5
  41e668:	2d00      	cmp	r5, #0
  41e66a:	bfb8      	it	lt
  41e66c:	f105 031f 	addlt.w	r3, r5, #31
  41e670:	115e      	asrs	r6, r3, #5

0041e672 <.LVL468>:
  41e672:	f015 031f 	ands.w	r3, r5, #31
  41e676:	bf18      	it	ne
  41e678:	2301      	movne	r3, #1
  41e67a:	4433      	add	r3, r6

0041e67c <.LVL469>:
  41e67c:	6821      	ldr	r1, [r4, #0]
  41e67e:	428b      	cmp	r3, r1
  41e680:	da08      	bge.n	41e694 <.LVL469+0x18>
  41e682:	eb04 0283 	add.w	r2, r4, r3, lsl #2
  41e686:	3204      	adds	r2, #4
    c->dp[x] = 0;
  41e688:	2000      	movs	r0, #0
  41e68a:	f842 0f04 	str.w	r0, [r2, #4]!
  for (x = (b / DIGIT_BIT) + ((b % DIGIT_BIT) == 0 ? 0 : 1); x < c->used; x++) {
  41e68e:	3301      	adds	r3, #1
  41e690:	428b      	cmp	r3, r1
  41e692:	d1fa      	bne.n	41e68a <.LVL469+0xe>
  41e694:	eb04 0386 	add.w	r3, r4, r6, lsl #2

0041e698 <.LVL471>:
  c->dp[b / DIGIT_BIT] &= ~((fp_digit)0) >> (DIGIT_BIT - b);
  41e698:	f1c5 0520 	rsb	r5, r5, #32

0041e69c <.LVL472>:
  41e69c:	f04f 32ff 	mov.w	r2, #4294967295
  41e6a0:	fa22 f505 	lsr.w	r5, r2, r5
  41e6a4:	689a      	ldr	r2, [r3, #8]
  41e6a6:	402a      	ands	r2, r5
  41e6a8:	609a      	str	r2, [r3, #8]
  fp_clamp (c);
  41e6aa:	b1c1      	cbz	r1, 41e6de <.LVL476+0x18>
  41e6ac:	1e4a      	subs	r2, r1, #1
  41e6ae:	1c4b      	adds	r3, r1, #1
  41e6b0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
  41e6b4:	b97b      	cbnz	r3, 41e6d6 <.LVL476+0x10>
  41e6b6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
  41e6ba:	3304      	adds	r3, #4
  41e6bc:	e004      	b.n	41e6c8 <.LVL476+0x2>

0041e6be <.LVL473>:
      fp_zero(c);
  41e6be:	4610      	mov	r0, r2

0041e6c0 <.LVL474>:
  41e6c0:	f003 fd40 	bl	422144 <.LFE163>

0041e6c4 <.LVL475>:
      return;
  41e6c4:	bd70      	pop	{r4, r5, r6, pc}

0041e6c6 <.LVL476>:
  fp_clamp (c);
  41e6c6:	4602      	mov	r2, r0
  41e6c8:	b13a      	cbz	r2, 41e6da <.LVL476+0x14>
  41e6ca:	1e50      	subs	r0, r2, #1
  41e6cc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  41e6d0:	2900      	cmp	r1, #0
  41e6d2:	d0f8      	beq.n	41e6c6 <.LVL476>
  41e6d4:	6022      	str	r2, [r4, #0]
  41e6d6:	6863      	ldr	r3, [r4, #4]
  41e6d8:	e002      	b.n	41e6e0 <.LVL476+0x1a>
  41e6da:	2300      	movs	r3, #0
  41e6dc:	6023      	str	r3, [r4, #0]
  41e6de:	2300      	movs	r3, #0
  41e6e0:	6063      	str	r3, [r4, #4]
  41e6e2:	bd70      	pop	{r4, r5, r6, pc}

0041e6e4 <.LVL477>:
  41e6e4:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section .text.SYS_TIME_AddToList%181:

0041e6e8 <SYS_TIME_AddToList>:
    SYS_TIME_TIMER_OBJ* tmr = counter->tmrActive;
  41e6e8:	4b23      	ldr	r3, [pc, #140]	; (41e778 <.LVL71>)
  41e6ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30

0041e6ec <.LVL52>:
    if (newTimer == NULL)
  41e6ec:	2800      	cmp	r0, #0
  41e6ee:	d03f      	beq.n	41e770 <.LCFI6>
{
  41e6f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0041e6f4 <.LCFI5>:
  41e6f4:	4684      	mov	ip, r0
    newTimerTime = newTimer->relativeTimePending;
  41e6f6:	f8d0 8008 	ldr.w	r8, [r0, #8]

0041e6fa <.LVL53>:
    if (tmr == NULL)
  41e6fa:	b1b2      	cbz	r2, 41e72a <.LVL58>
            if ((total_time + tmr->relativeTimePending) > newTimerTime)
  41e6fc:	6894      	ldr	r4, [r2, #8]
  41e6fe:	2500      	movs	r5, #0
  41e700:	4646      	mov	r6, r8
  41e702:	2700      	movs	r7, #0
  41e704:	42af      	cmp	r7, r5
  41e706:	bf08      	it	eq
  41e708:	45a0      	cmpeq	r8, r4
  41e70a:	d328      	bcc.n	41e75e <.LVL65>

0041e70c <.LVL54>:
            tmr = tmr->tmrNext;
  41e70c:	6993      	ldr	r3, [r2, #24]

0041e70e <.LVL55>:
        while (tmr != NULL)
  41e70e:	b18b      	cbz	r3, 41e734 <.LVL61>
            if ((total_time + tmr->relativeTimePending) > newTimerTime)
  41e710:	6899      	ldr	r1, [r3, #8]
  41e712:	468e      	mov	lr, r1
  41e714:	1860      	adds	r0, r4, r1
  41e716:	f145 0100 	adc.w	r1, r5, #0
  41e71a:	428f      	cmp	r7, r1
  41e71c:	bf08      	it	eq
  41e71e:	4286      	cmpeq	r6, r0
  41e720:	d31b      	bcc.n	41e75a <.LVL64>
  41e722:	4604      	mov	r4, r0

0041e724 <.LVL56>:
  41e724:	460d      	mov	r5, r1
            tmr = tmr->tmrNext;
  41e726:	461a      	mov	r2, r3

0041e728 <.LVL57>:
  41e728:	e7f0      	b.n	41e70c <.LVL54>

0041e72a <.LVL58>:
        counter->tmrActive = newTimer;
  41e72a:	4b13      	ldr	r3, [pc, #76]	; (41e778 <.LVL71>)
  41e72c:	6318      	str	r0, [r3, #48]	; 0x30

0041e72e <.LVL59>:
        isHeadTimerUpdated = true;
  41e72e:	2001      	movs	r0, #1

0041e730 <.LVL60>:
  41e730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041e734 <.LVL61>:
            tmr = tmr->tmrNext;
  41e734:	4619      	mov	r1, r3

0041e736 <.LVL62>:
        if (prevTmr == NULL)
  41e736:	b1a2      	cbz	r2, 41e762 <.LVL66>
            newTimer->tmrNext = prevTmr->tmrNext;
  41e738:	f8cc 3018 	str.w	r3, [ip, #24]
            prevTmr->tmrNext = newTimer;
  41e73c:	f8c2 c018 	str.w	ip, [r2, #24]
    bool isHeadTimerUpdated = false;
  41e740:	2000      	movs	r0, #0

0041e742 <.LVL63>:
        newTimer->relativeTimePending = newTimerTime - total_time;
  41e742:	eba8 0404 	sub.w	r4, r8, r4
  41e746:	f8cc 4008 	str.w	r4, [ip, #8]
        if (newTimer->tmrNext != NULL)
  41e74a:	f8dc 3018 	ldr.w	r3, [ip, #24]
  41e74e:	b18b      	cbz	r3, 41e774 <.LCFI7>
            newTimer->tmrNext->relativeTimePending -= newTimer->relativeTimePending;
  41e750:	689a      	ldr	r2, [r3, #8]
  41e752:	1b14      	subs	r4, r2, r4
  41e754:	609c      	str	r4, [r3, #8]
  41e756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041e75a <.LVL64>:
            tmr = tmr->tmrNext;
  41e75a:	4619      	mov	r1, r3
  41e75c:	e7eb      	b.n	41e736 <.LVL62>

0041e75e <.LVL65>:
            if ((total_time + tmr->relativeTimePending) > newTimerTime)
  41e75e:	4611      	mov	r1, r2
  41e760:	2400      	movs	r4, #0

0041e762 <.LVL66>:
            counter->tmrActive = newTimer;
  41e762:	4b05      	ldr	r3, [pc, #20]	; (41e778 <.LVL71>)
  41e764:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
            newTimer->tmrNext = tmr;
  41e768:	f8cc 1018 	str.w	r1, [ip, #24]

0041e76c <.LVL67>:
            isHeadTimerUpdated = true;
  41e76c:	2001      	movs	r0, #1
  41e76e:	e7e8      	b.n	41e742 <.LVL63>

0041e770 <.LCFI6>:
        return isHeadTimerUpdated;
  41e770:	2000      	movs	r0, #0

0041e772 <.LVL69>:
  41e772:	4770      	bx	lr

0041e774 <.LCFI7>:
}
  41e774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041e778 <.LVL71>:
  41e778:	2040d624 	.word	0x2040d624

Disassembly of section .text.__pic32c_data_initialization%182:

0041e77c <__pic32c_data_initialization>:
  41e77c:	4921      	ldr	r1, [pc, #132]	; (41e804 <.LFE163+0x88>)
  41e77e:	680b      	ldr	r3, [r1, #0]
  41e780:	b430      	push	{r4, r5}
  41e782:	b113      	cbz	r3, 41e78a <__pic32c_data_initialization+0xe>
  41e784:	4b20      	ldr	r3, [pc, #128]	; (41e808 <.LFE163+0x8c>)
  41e786:	681a      	ldr	r2, [r3, #0]
  41e788:	bb72      	cbnz	r2, 41e7e8 <__pic32c_data_initialization+0x6c>
  41e78a:	4820      	ldr	r0, [pc, #128]	; (41e80c <.LFE163+0x90>)
  41e78c:	2500      	movs	r5, #0
  41e78e:	6801      	ldr	r1, [r0, #0]
  41e790:	b9c1      	cbnz	r1, 41e7c4 <__pic32c_data_initialization+0x48>
  41e792:	6842      	ldr	r2, [r0, #4]
  41e794:	b332      	cbz	r2, 41e7e4 <__pic32c_data_initialization+0x68>
  41e796:	6883      	ldr	r3, [r0, #8]
  41e798:	300c      	adds	r0, #12
  41e79a:	b1d3      	cbz	r3, 41e7d2 <__pic32c_data_initialization+0x56>
  41e79c:	3901      	subs	r1, #1
  41e79e:	4603      	mov	r3, r0
  41e7a0:	f813 4b01 	ldrb.w	r4, [r3], #1
  41e7a4:	f801 4f01 	strb.w	r4, [r1, #1]!
  41e7a8:	1a1c      	subs	r4, r3, r0
  41e7aa:	4294      	cmp	r4, r2
  41e7ac:	d3f8      	bcc.n	41e7a0 <__pic32c_data_initialization+0x24>
  41e7ae:	f012 0303 	ands.w	r3, r2, #3
  41e7b2:	bf18      	it	ne
  41e7b4:	2301      	movne	r3, #1
  41e7b6:	eb03 0292 	add.w	r2, r3, r2, lsr #2
  41e7ba:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  41e7be:	6801      	ldr	r1, [r0, #0]
  41e7c0:	2900      	cmp	r1, #0
  41e7c2:	d0e6      	beq.n	41e792 <__pic32c_data_initialization+0x16>
  41e7c4:	6884      	ldr	r4, [r0, #8]
  41e7c6:	6842      	ldr	r2, [r0, #4]
  41e7c8:	460b      	mov	r3, r1
  41e7ca:	300c      	adds	r0, #12
  41e7cc:	b93c      	cbnz	r4, 41e7de <__pic32c_data_initialization+0x62>
  41e7ce:	2a00      	cmp	r2, #0
  41e7d0:	d0dd      	beq.n	41e78e <__pic32c_data_initialization+0x12>
  41e7d2:	441a      	add	r2, r3
  41e7d4:	f803 5b01 	strb.w	r5, [r3], #1
  41e7d8:	4293      	cmp	r3, r2
  41e7da:	d1fb      	bne.n	41e7d4 <__pic32c_data_initialization+0x58>
  41e7dc:	e7d7      	b.n	41e78e <__pic32c_data_initialization+0x12>
  41e7de:	2a00      	cmp	r2, #0
  41e7e0:	d1dc      	bne.n	41e79c <__pic32c_data_initialization+0x20>
  41e7e2:	e7e4      	b.n	41e7ae <__pic32c_data_initialization+0x32>
  41e7e4:	bc30      	pop	{r4, r5}
  41e7e6:	4770      	bx	lr
  41e7e8:	428b      	cmp	r3, r1
  41e7ea:	d2ce      	bcs.n	41e78a <__pic32c_data_initialization+0xe>
  41e7ec:	43da      	mvns	r2, r3
  41e7ee:	440a      	add	r2, r1
  41e7f0:	f022 0203 	bic.w	r2, r2, #3
  41e7f4:	3204      	adds	r2, #4
  41e7f6:	441a      	add	r2, r3
  41e7f8:	2100      	movs	r1, #0
  41e7fa:	f843 1b04 	str.w	r1, [r3], #4
  41e7fe:	4293      	cmp	r3, r2
  41e800:	d1fb      	bne.n	41e7fa <__pic32c_data_initialization+0x7e>
  41e802:	e7c2      	b.n	41e78a <__pic32c_data_initialization+0xe>
  41e804:	20400054 	.word	0x20400054
  41e808:	20400000 	.word	0x20400000
  41e80c:	0040c138 	.word	0x0040c138

Disassembly of section .text._malloc_trim_r%183:

0041e810 <_malloc_trim_r>:
  41e810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041e812 <.LCFI0>:
  41e812:	4f21      	ldr	r7, [pc, #132]	; (41e898 <.LVL22+0x6>)
  41e814:	460c      	mov	r4, r1
  41e816:	4606      	mov	r6, r0
  41e818:	f7ff fcf0 	bl	41e1fc <.LFE173>

0041e81c <.LVL1>:
  41e81c:	68bb      	ldr	r3, [r7, #8]
  41e81e:	685d      	ldr	r5, [r3, #4]
  41e820:	f1c4 046f 	rsb	r4, r4, #111	; 0x6f

0041e824 <.LVL2>:
  41e824:	f025 0503 	bic.w	r5, r5, #3

0041e828 <.LVL3>:
  41e828:	442c      	add	r4, r5
  41e82a:	f024 047f 	bic.w	r4, r4, #127	; 0x7f
  41e82e:	3c80      	subs	r4, #128	; 0x80

0041e830 <.LVL4>:
  41e830:	2c7f      	cmp	r4, #127	; 0x7f
  41e832:	dd07      	ble.n	41e844 <.LVL6>
  41e834:	2100      	movs	r1, #0
  41e836:	4630      	mov	r0, r6
  41e838:	f003 f9ca 	bl	421bd0 <.LFE91>

0041e83c <.LVL5>:
  41e83c:	68bb      	ldr	r3, [r7, #8]
  41e83e:	442b      	add	r3, r5
  41e840:	4298      	cmp	r0, r3
  41e842:	d004      	beq.n	41e84e <.LVL8>

0041e844 <.LVL6>:
  41e844:	4630      	mov	r0, r6
  41e846:	f003 feb9 	bl	4225bc <.LFE144>

0041e84a <.LVL7>:
  41e84a:	2000      	movs	r0, #0
  41e84c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041e84e <.LVL8>:
  41e84e:	4261      	negs	r1, r4
  41e850:	4630      	mov	r0, r6

0041e852 <.LVL9>:
  41e852:	f003 f9bd 	bl	421bd0 <.LFE91>

0041e856 <.LVL10>:
  41e856:	3001      	adds	r0, #1

0041e858 <.LVL11>:
  41e858:	d00d      	beq.n	41e876 <.LVL16>
  41e85a:	4a10      	ldr	r2, [pc, #64]	; (41e89c <.LVL22+0xa>)
  41e85c:	68b9      	ldr	r1, [r7, #8]
  41e85e:	6813      	ldr	r3, [r2, #0]
  41e860:	1b2d      	subs	r5, r5, r4

0041e862 <.LVL12>:
  41e862:	f045 0501 	orr.w	r5, r5, #1
  41e866:	4630      	mov	r0, r6

0041e868 <.LVL13>:
  41e868:	1b1c      	subs	r4, r3, r4

0041e86a <.LVL14>:
  41e86a:	604d      	str	r5, [r1, #4]
  41e86c:	6014      	str	r4, [r2, #0]
  41e86e:	f003 fea5 	bl	4225bc <.LFE144>

0041e872 <.LVL15>:
  41e872:	2001      	movs	r0, #1
  41e874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041e876 <.LVL16>:
  41e876:	2100      	movs	r1, #0
  41e878:	4630      	mov	r0, r6

0041e87a <.LVL17>:
  41e87a:	f003 f9a9 	bl	421bd0 <.LFE91>

0041e87e <.LVL18>:
  41e87e:	68ba      	ldr	r2, [r7, #8]
  41e880:	1a83      	subs	r3, r0, r2

0041e882 <.LVL19>:
  41e882:	2b0f      	cmp	r3, #15
  41e884:	ddde      	ble.n	41e844 <.LVL6>
  41e886:	4c06      	ldr	r4, [pc, #24]	; (41e8a0 <.LVL22+0xe>)

0041e888 <.LVL20>:
  41e888:	4904      	ldr	r1, [pc, #16]	; (41e89c <.LVL22+0xa>)
  41e88a:	6824      	ldr	r4, [r4, #0]
  41e88c:	f043 0301 	orr.w	r3, r3, #1

0041e890 <.LVL21>:
  41e890:	1b00      	subs	r0, r0, r4

0041e892 <.LVL22>:
  41e892:	6053      	str	r3, [r2, #4]
  41e894:	6008      	str	r0, [r1, #0]
  41e896:	e7d5      	b.n	41e844 <.LVL6>
  41e898:	2040cc80 	.word	0x2040cc80
  41e89c:	2040d65c 	.word	0x2040d65c
  41e8a0:	2040d778 	.word	0x2040d778

Disassembly of section .text.sha256_test%184:

0041e8a4 <sha256_test>:
{
  41e8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0041e8a8 <.LCFI8>:
  41e8a8:	b090      	sub	sp, #64	; 0x40

0041e8aa <.LCFI9>:
  41e8aa:	af00      	add	r7, sp, #0

0041e8ac <.LCFI10>:
  41e8ac:	f5ad 7d20 	sub.w	sp, sp, #640	; 0x280
  41e8b0:	f10d 057f 	add.w	r5, sp, #127	; 0x7f
  41e8b4:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
    test_sha[0] = a;
  41e8b8:	4b1c      	ldr	r3, [pc, #112]	; (41e92c <.LCFI12+0x4>)
  41e8ba:	603b      	str	r3, [r7, #0]
  41e8bc:	f503 7223 	add.w	r2, r3, #652	; 0x28c
  41e8c0:	607a      	str	r2, [r7, #4]
  41e8c2:	2203      	movs	r2, #3
  41e8c4:	60ba      	str	r2, [r7, #8]
  41e8c6:	2220      	movs	r2, #32
  41e8c8:	60fa      	str	r2, [r7, #12]
    test_sha[1] = b;
  41e8ca:	f503 71e2 	add.w	r1, r3, #452	; 0x1c4
  41e8ce:	6139      	str	r1, [r7, #16]
  41e8d0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
  41e8d4:	617b      	str	r3, [r7, #20]
  41e8d6:	2338      	movs	r3, #56	; 0x38
  41e8d8:	61bb      	str	r3, [r7, #24]
  41e8da:	61fa      	str	r2, [r7, #28]
    CRYPT_SHA256_Initialize(&sha);
  41e8dc:	4628      	mov	r0, r5
  41e8de:	f003 fcb5 	bl	42224c <.LFE4>

0041e8e2 <.LVL15>:
    appData.sha256_test_result = times;
  41e8e2:	2202      	movs	r2, #2
  41e8e4:	4b12      	ldr	r3, [pc, #72]	; (41e930 <.LCFI12+0x8>)
  41e8e6:	60da      	str	r2, [r3, #12]

0041e8e8 <.LVL16>:
  41e8e8:	2400      	movs	r4, #0
            appData.sha256_test_result--;
  41e8ea:	4698      	mov	r8, r3
  41e8ec:	e002      	b.n	41e8f4 <.LVL17+0x6>

0041e8ee <.LVL17>:
  41e8ee:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  41e8f0:	2c20      	cmp	r4, #32
  41e8f2:	d017      	beq.n	41e924 <.LVL20+0x10>
  41e8f4:	193e      	adds	r6, r7, r4
        CRYPT_SHA256_DataAdd(&sha, (byte*)test_sha[i].input,(word32)test_sha[i].inLen);
  41e8f6:	68b2      	ldr	r2, [r6, #8]
  41e8f8:	5939      	ldr	r1, [r7, r4]
  41e8fa:	4628      	mov	r0, r5
  41e8fc:	f003 fb5a 	bl	421fb4 <.LFE7>

0041e900 <.LVL18>:
        CRYPT_SHA256_Finalize(&sha, hash);
  41e900:	f107 0120 	add.w	r1, r7, #32
  41e904:	4628      	mov	r0, r5
  41e906:	f003 fb61 	bl	421fcc <.LFE10>

0041e90a <.LVL19>:
        if (memcmp(hash, test_sha[i].output, SHA256_DIGEST_SIZE) == 0)
  41e90a:	2220      	movs	r2, #32
  41e90c:	6871      	ldr	r1, [r6, #4]
  41e90e:	18b8      	adds	r0, r7, r2
  41e910:	f001 fdae 	bl	420470 <memcmp>

0041e914 <.LVL20>:
  41e914:	2800      	cmp	r0, #0
  41e916:	d1ea      	bne.n	41e8ee <.LVL17>
            appData.sha256_test_result--;
  41e918:	f8d8 300c 	ldr.w	r3, [r8, #12]
  41e91c:	3b01      	subs	r3, #1
  41e91e:	f8c8 300c 	str.w	r3, [r8, #12]
  41e922:	e7e4      	b.n	41e8ee <.LVL17>
}
  41e924:	3740      	adds	r7, #64	; 0x40

0041e926 <.LCFI11>:
  41e926:	46bd      	mov	sp, r7

0041e928 <.LCFI12>:
  41e928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41e92c:	0040da54 	.word	0x0040da54
  41e930:	2040d534 	.word	0x2040d534

Disassembly of section .text.wc_FreeRsaKey%185:

0041e934 <wc_FreeRsaKey>:
    if (key == NULL) {
  41e934:	2800      	cmp	r0, #0
  41e936:	d042      	beq.n	41e9be <.LCFI16>
{
  41e938:	b510      	push	{r4, lr}

0041e93a <.LCFI15>:
  41e93a:	4604      	mov	r4, r0
    wc_RsaCleanup(key);
  41e93c:	f001 fbae 	bl	42009c <.LFE42>

0041e940 <.LVL66>:
    if (key->type == RSA_PRIVATE) {
  41e940:	f241 1348 	movw	r3, #4424	; 0x1148
  41e944:	58e3      	ldr	r3, [r4, r3]
  41e946:	2b01      	cmp	r3, #1
  41e948:	d020      	beq.n	41e98c <.LVL74+0x4>
    mp_clear(&key->u);
  41e94a:	f604 7018 	addw	r0, r4, #3864	; 0xf18
  41e94e:	f003 fd3f 	bl	4223d0 <.LFE16>

0041e952 <.LVL67>:
    mp_clear(&key->dQ);
  41e952:	f504 604f 	add.w	r0, r4, #3312	; 0xcf0
  41e956:	f003 fd3b 	bl	4223d0 <.LFE16>

0041e95a <.LVL68>:
    mp_clear(&key->dP);
  41e95a:	f604 20c8 	addw	r0, r4, #2760	; 0xac8
  41e95e:	f003 fd37 	bl	4223d0 <.LFE16>

0041e962 <.LVL69>:
    mp_clear(&key->q);
  41e962:	f504 600a 	add.w	r0, r4, #2208	; 0x8a0
  41e966:	f003 fd33 	bl	4223d0 <.LFE16>

0041e96a <.LVL70>:
    mp_clear(&key->p);
  41e96a:	f504 60cf 	add.w	r0, r4, #1656	; 0x678
  41e96e:	f003 fd2f 	bl	4223d0 <.LFE16>

0041e972 <.LVL71>:
    mp_clear(&key->d);
  41e972:	f504 608a 	add.w	r0, r4, #1104	; 0x450
  41e976:	f003 fd2b 	bl	4223d0 <.LFE16>

0041e97a <.LVL72>:
    mp_clear(&key->e);
  41e97a:	f504 700a 	add.w	r0, r4, #552	; 0x228
  41e97e:	f003 fd27 	bl	4223d0 <.LFE16>

0041e982 <.LVL73>:
    mp_clear(&key->n);
  41e982:	4620      	mov	r0, r4
  41e984:	f003 fd24 	bl	4223d0 <.LFE16>

0041e988 <.LVL74>:
    return ret;
  41e988:	2000      	movs	r0, #0
  41e98a:	bd10      	pop	{r4, pc}
        mp_forcezero(&key->u);
  41e98c:	f604 7018 	addw	r0, r4, #3864	; 0xf18
  41e990:	f003 fdd8 	bl	422544 <mp_forcezero>

0041e994 <.LVL76>:
        mp_forcezero(&key->dQ);
  41e994:	f504 604f 	add.w	r0, r4, #3312	; 0xcf0
  41e998:	f003 fdd4 	bl	422544 <mp_forcezero>

0041e99c <.LVL77>:
        mp_forcezero(&key->dP);
  41e99c:	f604 20c8 	addw	r0, r4, #2760	; 0xac8
  41e9a0:	f003 fdd0 	bl	422544 <mp_forcezero>

0041e9a4 <.LVL78>:
        mp_forcezero(&key->q);
  41e9a4:	f504 600a 	add.w	r0, r4, #2208	; 0x8a0
  41e9a8:	f003 fdcc 	bl	422544 <mp_forcezero>

0041e9ac <.LVL79>:
        mp_forcezero(&key->p);
  41e9ac:	f504 60cf 	add.w	r0, r4, #1656	; 0x678
  41e9b0:	f003 fdc8 	bl	422544 <mp_forcezero>

0041e9b4 <.LVL80>:
        mp_forcezero(&key->d);
  41e9b4:	f504 608a 	add.w	r0, r4, #1104	; 0x450
  41e9b8:	f003 fdc4 	bl	422544 <mp_forcezero>

0041e9bc <.LVL81>:
  41e9bc:	e7c5      	b.n	41e94a <.LVL66+0xa>

0041e9be <.LCFI16>:
        return BAD_FUNC_ARG;
  41e9be:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041e9c2 <.LVL83>:
  41e9c2:	4770      	bx	lr

Disassembly of section .text.Hash_DRBG_Reseed%186:

0041e9c4 <Hash_DRBG_Reseed>:
{
  41e9c4:	b5f0      	push	{r4, r5, r6, r7, lr}

0041e9c6 <.LCFI10>:
  41e9c6:	b093      	sub	sp, #76	; 0x4c

0041e9c8 <.LCFI11>:
  41e9c8:	4604      	mov	r4, r0
    if (Hash_df(drbg, seed, sizeof(seed), drbgReseed, drbg->V, sizeof(drbg->V),
  41e9ca:	f100 0608 	add.w	r6, r0, #8
  41e9ce:	9203      	str	r2, [sp, #12]
  41e9d0:	9102      	str	r1, [sp, #8]
  41e9d2:	2237      	movs	r2, #55	; 0x37

0041e9d4 <.LVL63>:
  41e9d4:	9201      	str	r2, [sp, #4]
  41e9d6:	9600      	str	r6, [sp, #0]
  41e9d8:	2301      	movs	r3, #1
  41e9da:	a904      	add	r1, sp, #16

0041e9dc <.LVL64>:
  41e9dc:	f7fb ff34 	bl	41a848 <.LFE19>

0041e9e0 <.LVL65>:
  41e9e0:	b118      	cbz	r0, 41e9ea <.LCFI13>
        return DRBG_FAILURE;
  41e9e2:	2302      	movs	r3, #2
}
  41e9e4:	4618      	mov	r0, r3
  41e9e6:	b013      	add	sp, #76	; 0x4c

0041e9e8 <.LCFI12>:
  41e9e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0041e9ea <.LCFI13>:
    XMEMCPY(drbg->V, seed, sizeof(drbg->V));
  41e9ea:	f10d 0e10 	add.w	lr, sp, #16
  41e9ee:	4635      	mov	r5, r6
  41e9f0:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
  41e9f4:	4677      	mov	r7, lr
  41e9f6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
  41e9f8:	6028      	str	r0, [r5, #0]
  41e9fa:	6069      	str	r1, [r5, #4]
  41e9fc:	60aa      	str	r2, [r5, #8]
  41e9fe:	60eb      	str	r3, [r5, #12]
  41ea00:	46be      	mov	lr, r7
  41ea02:	3510      	adds	r5, #16
  41ea04:	4567      	cmp	r7, ip
  41ea06:	d1f5      	bne.n	41e9f4 <.LCFI13+0xa>
  41ea08:	6838      	ldr	r0, [r7, #0]
  41ea0a:	6028      	str	r0, [r5, #0]
  41ea0c:	88ba      	ldrh	r2, [r7, #4]
  41ea0e:	79bb      	ldrb	r3, [r7, #6]
  41ea10:	80aa      	strh	r2, [r5, #4]
  41ea12:	71ab      	strb	r3, [r5, #6]

0041ea14 <.LBB43>:
    volatile byte* z = (volatile byte*)mem;
  41ea14:	ab04      	add	r3, sp, #16

0041ea16 <.LVL68>:
    while (len--) *z++ = 0;
  41ea16:	2000      	movs	r0, #0
  41ea18:	f10d 0147 	add.w	r1, sp, #71	; 0x47

0041ea1c <.LVL69>:
  41ea1c:	1c5a      	adds	r2, r3, #1

0041ea1e <.LVL70>:
  41ea1e:	7018      	strb	r0, [r3, #0]

0041ea20 <.LVL71>:
  41ea20:	4613      	mov	r3, r2
  41ea22:	428a      	cmp	r2, r1
  41ea24:	d1fa      	bne.n	41ea1c <.LVL69>

0041ea26 <.LBE43>:
    if (Hash_df(drbg, drbg->C, sizeof(drbg->C), drbgInitC, drbg->V,
  41ea26:	2300      	movs	r3, #0
  41ea28:	9303      	str	r3, [sp, #12]
  41ea2a:	9302      	str	r3, [sp, #8]
  41ea2c:	2237      	movs	r2, #55	; 0x37
  41ea2e:	9201      	str	r2, [sp, #4]
  41ea30:	9600      	str	r6, [sp, #0]
  41ea32:	f104 013f 	add.w	r1, r4, #63	; 0x3f
  41ea36:	4620      	mov	r0, r4
  41ea38:	f7fb ff06 	bl	41a848 <.LFE19>

0041ea3c <.LVL73>:
  41ea3c:	4603      	mov	r3, r0
  41ea3e:	b108      	cbz	r0, 41ea44 <.LVL73+0x8>
        return DRBG_FAILURE;
  41ea40:	2302      	movs	r3, #2
  41ea42:	e7cf      	b.n	41e9e4 <.LVL65+0x4>
    drbg->reseedCtr = 1;
  41ea44:	2201      	movs	r2, #1
  41ea46:	6022      	str	r2, [r4, #0]
    drbg->lastBlock = 0;
  41ea48:	2200      	movs	r2, #0
  41ea4a:	6062      	str	r2, [r4, #4]
    drbg->matchCount = 0;
  41ea4c:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76
    return DRBG_SUCCESS;
  41ea50:	e7c8      	b.n	41e9e4 <.LVL65+0x4>

Disassembly of section .rodata%187:

0041ea54 <.rodata%187>:
  41ea54:	2e322e31 	.word	0x2e322e31
  41ea58:	00000037 	.word	0x00000037
  41ea5c:	6465656e 	.word	0x6465656e
  41ea60:	63696420 	.word	0x63696420
  41ea64:	6e6f6974 	.word	0x6e6f6974
  41ea68:	00797261 	.word	0x00797261
  41ea6c:	65727473 	.word	0x65727473
  41ea70:	65206d61 	.word	0x65206d61
  41ea74:	0000646e 	.word	0x0000646e
  41ea78:	00000000 	.word	0x00000000
  41ea7c:	656c6966 	.word	0x656c6966
  41ea80:	72726520 	.word	0x72726520
  41ea84:	0000726f 	.word	0x0000726f
  41ea88:	65727473 	.word	0x65727473
  41ea8c:	65206d61 	.word	0x65206d61
  41ea90:	726f7272 	.word	0x726f7272
  41ea94:	00000000 	.word	0x00000000
  41ea98:	61746164 	.word	0x61746164
  41ea9c:	72726520 	.word	0x72726520
  41eaa0:	0000726f 	.word	0x0000726f
  41eaa4:	75736e69 	.word	0x75736e69
  41eaa8:	63696666 	.word	0x63696666
  41eaac:	746e6569 	.word	0x746e6569
  41eab0:	6d656d20 	.word	0x6d656d20
  41eab4:	0079726f 	.word	0x0079726f
  41eab8:	66667562 	.word	0x66667562
  41eabc:	65207265 	.word	0x65207265
  41eac0:	726f7272 	.word	0x726f7272
  41eac4:	00000000 	.word	0x00000000
  41eac8:	6f636e69 	.word	0x6f636e69
  41eacc:	7461706d 	.word	0x7461706d
  41ead0:	656c6269 	.word	0x656c6269
  41ead4:	72657620 	.word	0x72657620
  41ead8:	6e6f6973 	.word	0x6e6f6973
  41eadc:	00          	.byte	0x00
  41eadd:	00          	.byte	0x00
  41eade:	bf00      	nop

Disassembly of section .text.PIO_Initialize%188:

0041eae0 <PIO_Initialize>:
    See plib_pio.h for more details.
*/
void PIO_Initialize ( void )
{
    /* Selected System IO pins are configured as GPIO */
    MATRIX_REGS->CCFG_SYSIO |= 0x10;
  41eae0:	4a20      	ldr	r2, [pc, #128]	; (41eb64 <PIO_Initialize+0x84>)
  41eae2:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  41eae6:	f043 0310 	orr.w	r3, r3, #16
  41eaea:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    /************************ PIO A Initialization ************************/
    /* PORTA PIO Disable and Peripheral Enable*/
    ((pio_registers_t*)PIO_PORT_A)->PIO_PDR = 0x200000;
  41eaee:	f502 22b1 	add.w	r2, r2, #362496	; 0x58800
  41eaf2:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
  41eaf6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  41eafa:	6053      	str	r3, [r2, #4]
    /* PORTA Pull Up Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_A)->PIO_PUDR = ~0x800;
  41eafc:	f46f 6300 	mvn.w	r3, #2048	; 0x800
  41eb00:	6613      	str	r3, [r2, #96]	; 0x60
    ((pio_registers_t*)PIO_PORT_A)->PIO_PUER = 0x800;
  41eb02:	f44f 6300 	mov.w	r3, #2048	; 0x800
  41eb06:	6653      	str	r3, [r2, #100]	; 0x64
    /* PORTA Pull Down Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_A)->PIO_PPDDR = 0xFFFFFFFF;
  41eb08:	f04f 33ff 	mov.w	r3, #4294967295
  41eb0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* PORTA Output Write Enable */
    ((pio_registers_t*)PIO_PORT_A)->PIO_OWER = PIO_OWER_Msk;
  41eb10:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    /* PORTA Output Direction Enable */
    ((pio_registers_t*)PIO_PORT_A)->PIO_OER = 0x20;
  41eb14:	2120      	movs	r1, #32
  41eb16:	6111      	str	r1, [r2, #16]
    /* PORTA Initial state High */
    ((pio_registers_t*)PIO_PORT_A)->PIO_SODR = 0x20;
  41eb18:	6311      	str	r1, [r2, #48]	; 0x30

    /************************ PIO B Initialization ************************/
    /* PORTB Peripheral Function Selection */
    ((pio_registers_t*)PIO_PORT_B)->PIO_ABCDSR[0]= 0x10;
  41eb1a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  41eb1e:	2110      	movs	r1, #16
  41eb20:	6711      	str	r1, [r2, #112]	; 0x70
    ((pio_registers_t*)PIO_PORT_B)->PIO_ABCDSR[1]= 0x10;
  41eb22:	6751      	str	r1, [r2, #116]	; 0x74
    /* PORTB PIO Disable and Peripheral Enable*/
    ((pio_registers_t*)PIO_PORT_B)->PIO_PDR = 0x10;
  41eb24:	6051      	str	r1, [r2, #4]
    /* PORTB Pull Up Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_B)->PIO_PUDR = 0xFFFFFFFF;
  41eb26:	6613      	str	r3, [r2, #96]	; 0x60
    /* PORTB Pull Down Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_B)->PIO_PPDDR = 0xFFFFFFFF;
  41eb28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* PORTB Output Write Enable */
    ((pio_registers_t*)PIO_PORT_B)->PIO_OWER = PIO_OWER_Msk;
  41eb2c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    /* PORTB Output Direction Enable */
    ((pio_registers_t*)PIO_PORT_B)->PIO_OER = 0x100;
  41eb30:	f44f 7180 	mov.w	r1, #256	; 0x100
  41eb34:	6111      	str	r1, [r2, #16]
    /* PORTB Initial state High */
    ((pio_registers_t*)PIO_PORT_B)->PIO_SODR = 0x100;
  41eb36:	6311      	str	r1, [r2, #48]	; 0x30

    /************************ PIO C Initialization ************************/
    /* PORTC Pull Up Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_C)->PIO_PUDR = 0xFFFFFFFF;
  41eb38:	f502 7200 	add.w	r2, r2, #512	; 0x200
  41eb3c:	6613      	str	r3, [r2, #96]	; 0x60
    /* PORTC Pull Down Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_C)->PIO_PPDDR = 0xFFFFFFFF;
  41eb3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* PORTC Output Write Enable */
    ((pio_registers_t*)PIO_PORT_C)->PIO_OWER = PIO_OWER_Msk;
  41eb42:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    /************************ PIO D Initialization ************************/
    /* PORTD Pull Up Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_D)->PIO_PUDR = 0xFFFFFFFF;
  41eb46:	f502 7200 	add.w	r2, r2, #512	; 0x200
  41eb4a:	6613      	str	r3, [r2, #96]	; 0x60
    /* PORTD Pull Down Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_D)->PIO_PPDDR = 0xFFFFFFFF;
  41eb4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* PORTD Output Write Enable */
    ((pio_registers_t*)PIO_PORT_D)->PIO_OWER = PIO_OWER_Msk;
  41eb50:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    /************************ PIO E Initialization ************************/
    /* PORTE Pull Up Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_E)->PIO_PUDR = 0xFFFFFFFF;
  41eb54:	f502 7200 	add.w	r2, r2, #512	; 0x200
  41eb58:	6613      	str	r3, [r2, #96]	; 0x60
    /* PORTE Pull Down Enable/Disable as per MHC selection */
    ((pio_registers_t*)PIO_PORT_E)->PIO_PPDDR = 0xFFFFFFFF;
  41eb5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* PORTE Output Write Enable */
    ((pio_registers_t*)PIO_PORT_E)->PIO_OWER = PIO_OWER_Msk;
  41eb5e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  41eb62:	4770      	bx	lr
  41eb64:	40088000 	.word	0x40088000

Disassembly of section .text.wc_Des_CbcDecrypt%189:

0041eb68 <wc_Des_CbcDecrypt>:
    {
  41eb68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

0041eb6c <.LCFI12>:
        word32 blocks = sz / DES_BLOCK_SIZE;
  41eb6c:	08db      	lsrs	r3, r3, #3

0041eb6e <.LVL195>:
        while (blocks--) {
  41eb6e:	2b00      	cmp	r3, #0
  41eb70:	d03b      	beq.n	41ebea <.LBE265>
  41eb72:	4604      	mov	r4, r0
  41eb74:	460d      	mov	r5, r1
  41eb76:	4617      	mov	r7, r2
  41eb78:	f103 39ff 	add.w	r9, r3, #4294967295

0041eb7c <.LVL196>:
  41eb7c:	f101 38ff 	add.w	r8, r1, #4294967295
            XMEMCPY(des->tmp, in, DES_BLOCK_SIZE);
  41eb80:	f100 0608 	add.w	r6, r0, #8
  41eb84:	e016      	b.n	41ebb4 <.LBE261+0x1a>

0041eb86 <.LBB261>:
    for (i = 0; i < n; i++) r[i] ^= a[i];
  41eb86:	f8d8 3001 	ldr.w	r3, [r8, #1]
  41eb8a:	6822      	ldr	r2, [r4, #0]
  41eb8c:	4053      	eors	r3, r2
  41eb8e:	f8c8 3001 	str.w	r3, [r8, #1]

0041eb92 <.LVL198>:
  41eb92:	686b      	ldr	r3, [r5, #4]
  41eb94:	6862      	ldr	r2, [r4, #4]
  41eb96:	4053      	eors	r3, r2
  41eb98:	606b      	str	r3, [r5, #4]

0041eb9a <.LBE261>:
            XMEMCPY(des->reg, des->tmp, DES_BLOCK_SIZE);
  41eb9a:	6832      	ldr	r2, [r6, #0]
  41eb9c:	6873      	ldr	r3, [r6, #4]
  41eb9e:	6022      	str	r2, [r4, #0]
  41eba0:	6063      	str	r3, [r4, #4]
            out += DES_BLOCK_SIZE;
  41eba2:	3508      	adds	r5, #8
            in  += DES_BLOCK_SIZE;
  41eba4:	3708      	adds	r7, #8
        while (blocks--) {
  41eba6:	f109 39ff 	add.w	r9, r9, #4294967295
  41ebaa:	f108 0808 	add.w	r8, r8, #8
  41ebae:	f1b9 3fff 	cmp.w	r9, #4294967295
  41ebb2:	d01a      	beq.n	41ebea <.LBE265>
            XMEMCPY(des->tmp, in, DES_BLOCK_SIZE);
  41ebb4:	683a      	ldr	r2, [r7, #0]
  41ebb6:	687b      	ldr	r3, [r7, #4]
  41ebb8:	6032      	str	r2, [r6, #0]
  41ebba:	6073      	str	r3, [r6, #4]
            DesProcessBlock(des, (byte*)des->tmp, out);
  41ebbc:	462a      	mov	r2, r5
  41ebbe:	4631      	mov	r1, r6
  41ebc0:	4620      	mov	r0, r4
  41ebc2:	f7fc fca3 	bl	41b50c <.LFE169>

0041ebc6 <.LBB267>:
    if (((wolfssl_word)buf | (wolfssl_word)mask | count) % WOLFSSL_WORD_SIZE == 0)
  41ebc6:	ea45 0304 	orr.w	r3, r5, r4
  41ebca:	f013 0f03 	tst.w	r3, #3
  41ebce:	d0da      	beq.n	41eb86 <.LBB261>
  41ebd0:	1e61      	subs	r1, r4, #1
  41ebd2:	f105 0e07 	add.w	lr, r5, #7
  41ebd6:	4643      	mov	r3, r8

0041ebd8 <.LBB265>:
        for (i = 0; i < count; i++) b[i] ^= m[i];
  41ebd8:	785a      	ldrb	r2, [r3, #1]
  41ebda:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  41ebde:	4042      	eors	r2, r0
  41ebe0:	f803 2f01 	strb.w	r2, [r3, #1]!
  41ebe4:	4573      	cmp	r3, lr
  41ebe6:	d1f7      	bne.n	41ebd8 <.LBB265>
  41ebe8:	e7d7      	b.n	41eb9a <.LBE261>

0041ebea <.LBE265>:
    }
  41ebea:	2000      	movs	r0, #0
  41ebec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

Disassembly of section .text.wc_Md5Update%190:

0041ebf0 <wc_Md5Update>:
    if (md5 == NULL || (data == NULL && len > 0)) {
  41ebf0:	b3a0      	cbz	r0, 41ec5c <.LCFI4>
{
  41ebf2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

0041ebf6 <.LCFI3>:
  41ebf6:	460f      	mov	r7, r1
  41ebf8:	4615      	mov	r5, r2
  41ebfa:	4606      	mov	r6, r0
    if (md5 == NULL || (data == NULL && len > 0)) {
  41ebfc:	b901      	cbnz	r1, 41ec00 <.LCFI3+0xa>
  41ebfe:	bb82      	cbnz	r2, 41ec62 <.LCFI5>
    local = (byte*)md5->buffer;
  41ec00:	f106 080c 	add.w	r8, r6, #12

0041ec04 <.LVL331>:
    if (md5->buffLen >= MD5_BLOCK_SIZE)
  41ec04:	6833      	ldr	r3, [r6, #0]
  41ec06:	2b3f      	cmp	r3, #63	; 0x3f
  41ec08:	d82f      	bhi.n	41ec6a <.LVL346>
    while (len) {
  41ec0a:	b395      	cbz	r5, 41ec72 <.LVL348>

0041ec0c <.LBB141>:
            md5->buffLen = 0;
  41ec0c:	f04f 0900 	mov.w	r9, #0
  41ec10:	e002      	b.n	41ec18 <.LBB146>

0041ec12 <.LVL332>:
  41ec12:	f8c6 9000 	str.w	r9, [r6]

0041ec16 <.LBE141>:
    while (len) {
  41ec16:	b1f5      	cbz	r5, 41ec56 <.LBE144>

0041ec18 <.LBB146>:
        word32 add = min(len, MD5_BLOCK_SIZE - md5->buffLen);
  41ec18:	6830      	ldr	r0, [r6, #0]

0041ec1a <.LVL333>:
  41ec1a:	f1c0 0440 	rsb	r4, r0, #64	; 0x40

0041ec1e <.LBB142>:
        return a > b ? b : a;
  41ec1e:	42ac      	cmp	r4, r5
  41ec20:	bf28      	it	cs
  41ec22:	462c      	movcs	r4, r5

0041ec24 <.LBE142>:
        XMEMCPY(&local[md5->buffLen], data, add);
  41ec24:	4622      	mov	r2, r4
  41ec26:	4639      	mov	r1, r7
  41ec28:	4440      	add	r0, r8
  41ec2a:	f7fb feab 	bl	41a984 <.LFE14>

0041ec2e <.LVL336>:
        md5->buffLen += add;
  41ec2e:	6833      	ldr	r3, [r6, #0]
  41ec30:	4423      	add	r3, r4
  41ec32:	6033      	str	r3, [r6, #0]
        data         += add;
  41ec34:	4427      	add	r7, r4
        len          -= add;
  41ec36:	1b2d      	subs	r5, r5, r4
        if (md5->buffLen == MD5_BLOCK_SIZE) {
  41ec38:	2b40      	cmp	r3, #64	; 0x40
  41ec3a:	d1ec      	bne.n	41ec16 <.LBE141>
            XTRANSFORM(md5, local);
  41ec3c:	4630      	mov	r0, r6
  41ec3e:	f7f1 fa35 	bl	4100ac <Transform>

0041ec42 <.LBB144>:
    word32 tmp = md5->loLen;
  41ec42:	6872      	ldr	r2, [r6, #4]

0041ec44 <.LVL340>:
    if ((md5->loLen += len) < tmp) {
  41ec44:	f102 0340 	add.w	r3, r2, #64	; 0x40
  41ec48:	6073      	str	r3, [r6, #4]
  41ec4a:	429a      	cmp	r2, r3
  41ec4c:	d9e1      	bls.n	41ec12 <.LVL332>
        md5->hiLen++;                       /* carry low to high */
  41ec4e:	68b3      	ldr	r3, [r6, #8]
  41ec50:	3301      	adds	r3, #1
  41ec52:	60b3      	str	r3, [r6, #8]
  41ec54:	e7dd      	b.n	41ec12 <.LVL332>

0041ec56 <.LBE144>:
    return ret;
  41ec56:	2000      	movs	r0, #0
  41ec58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0041ec5c <.LCFI4>:
        return BAD_FUNC_ARG;
  41ec5c:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041ec60 <.LVL343>:
  41ec60:	4770      	bx	lr

0041ec62 <.LCFI5>:
  41ec62:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041ec66 <.LVL345>:
  41ec66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0041ec6a <.LVL346>:
        return BUFFER_E;
  41ec6a:	f06f 0083 	mvn.w	r0, #131	; 0x83

0041ec6e <.LVL347>:
  41ec6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0041ec72 <.LVL348>:
    return ret;
  41ec72:	2000      	movs	r0, #0

0041ec74 <.LVL349>:
}
  41ec74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

Disassembly of section .text.wc_InitRsaKey_ex%191:

0041ec78 <wc_InitRsaKey_ex>:
{
  41ec78:	b570      	push	{r4, r5, r6, lr}

0041ec7a <.LCFI10>:
  41ec7a:	b082      	sub	sp, #8

0041ec7c <.LCFI11>:
    if (key == NULL) {
  41ec7c:	2800      	cmp	r0, #0
  41ec7e:	d03c      	beq.n	41ecfa <.LVL62>
  41ec80:	4604      	mov	r4, r0
    key->type = RSA_TYPE_UNKNOWN;
  41ec82:	f04f 32ff 	mov.w	r2, #4294967295

0041ec86 <.LVL52>:
  41ec86:	f241 1348 	movw	r3, #4424	; 0x1148
  41ec8a:	50c2      	str	r2, [r0, r3]
    key->state = RSA_STATE_NONE;
  41ec8c:	2200      	movs	r2, #0
  41ec8e:	f241 134c 	movw	r3, #4428	; 0x114c
  41ec92:	50c2      	str	r2, [r0, r3]
    key->heap = heap;
  41ec94:	f500 538a 	add.w	r3, r0, #4416	; 0x1140
  41ec98:	6019      	str	r1, [r3, #0]
    key->data = NULL;
  41ec9a:	f241 1344 	movw	r3, #4420	; 0x1144
  41ec9e:	50c2      	str	r2, [r0, r3]
    key->dataLen = 0;
  41eca0:	f241 1350 	movw	r3, #4432	; 0x1150
  41eca4:	50c2      	str	r2, [r0, r3]
    key->dataIsAlloc = 0;
  41eca6:	f241 1354 	movw	r3, #4436	; 0x1154
  41ecaa:	54c2      	strb	r2, [r0, r3]
    ret = mp_init_multi(&key->n, &key->e, NULL, NULL, NULL, NULL);
  41ecac:	f500 760a 	add.w	r6, r0, #552	; 0x228
  41ecb0:	9201      	str	r2, [sp, #4]
  41ecb2:	9200      	str	r2, [sp, #0]
  41ecb4:	4613      	mov	r3, r2
  41ecb6:	4631      	mov	r1, r6

0041ecb8 <.LVL53>:
  41ecb8:	f002 fa64 	bl	421184 <mp_init_multi>

0041ecbc <.LVL54>:
    if (ret != MP_OKAY)
  41ecbc:	4605      	mov	r5, r0
  41ecbe:	b110      	cbz	r0, 41ecc6 <.LCFI13>

0041ecc0 <.LVL55>:
}
  41ecc0:	4628      	mov	r0, r5
  41ecc2:	b002      	add	sp, #8

0041ecc4 <.LCFI12>:
  41ecc4:	bd70      	pop	{r4, r5, r6, pc}

0041ecc6 <.LCFI13>:
    ret = mp_init_multi(&key->d, &key->p, &key->q, &key->dP, &key->dQ, &key->u);
  41ecc6:	f604 7318 	addw	r3, r4, #3864	; 0xf18
  41ecca:	9301      	str	r3, [sp, #4]
  41eccc:	f504 634f 	add.w	r3, r4, #3312	; 0xcf0
  41ecd0:	9300      	str	r3, [sp, #0]
  41ecd2:	f604 23c8 	addw	r3, r4, #2760	; 0xac8
  41ecd6:	f504 620a 	add.w	r2, r4, #2208	; 0x8a0
  41ecda:	f504 61cf 	add.w	r1, r4, #1656	; 0x678
  41ecde:	f504 608a 	add.w	r0, r4, #1104	; 0x450

0041ece2 <.LVL57>:
  41ece2:	f002 fa4f 	bl	421184 <mp_init_multi>

0041ece6 <.LVL58>:
    if (ret != MP_OKAY) {
  41ece6:	4605      	mov	r5, r0
  41ece8:	2800      	cmp	r0, #0
  41ecea:	d0e9      	beq.n	41ecc0 <.LVL55>
        mp_clear(&key->n);
  41ecec:	4620      	mov	r0, r4

0041ecee <.LVL59>:
  41ecee:	f003 fb6f 	bl	4223d0 <.LFE16>

0041ecf2 <.LVL60>:
        mp_clear(&key->e);
  41ecf2:	4630      	mov	r0, r6
  41ecf4:	f003 fb6c 	bl	4223d0 <.LFE16>

0041ecf8 <.LVL61>:
        return ret;
  41ecf8:	e7e2      	b.n	41ecc0 <.LVL55>

0041ecfa <.LVL62>:
        return BAD_FUNC_ARG;
  41ecfa:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  41ecfe:	e7df      	b.n	41ecc0 <.LVL55>

Disassembly of section .text.inflateInit2_%192:

0041ed00 <inflateInit2_>:
{
  41ed00:	b570      	push	{r4, r5, r6, lr}

0041ed02 <.LCFI9>:
    if (version == Z_NULL || version[0] != ZLIB_VERSION[0] ||
  41ed02:	2a00      	cmp	r2, #0
  41ed04:	d030      	beq.n	41ed68 <.LVL79>
  41ed06:	7812      	ldrb	r2, [r2, #0]

0041ed08 <.LVL66>:
  41ed08:	2a31      	cmp	r2, #49	; 0x31
  41ed0a:	d130      	bne.n	41ed6e <.LVL80>
  41ed0c:	2b38      	cmp	r3, #56	; 0x38
  41ed0e:	d12e      	bne.n	41ed6e <.LVL80>
    if (strm == Z_NULL) return Z_STREAM_ERROR;
  41ed10:	2800      	cmp	r0, #0
  41ed12:	d02f      	beq.n	41ed74 <.LVL80+0x6>
    strm->msg = Z_NULL;                 /* in case we return an error */
  41ed14:	2300      	movs	r3, #0

0041ed16 <.LVL67>:
  41ed16:	6183      	str	r3, [r0, #24]
    if (strm->zalloc == (alloc_func)0) {
  41ed18:	6a03      	ldr	r3, [r0, #32]
  41ed1a:	b1b3      	cbz	r3, 41ed4a <.LVL75>
    if (strm->zfree == (free_func)0)
  41ed1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
  41ed1e:	b1cb      	cbz	r3, 41ed54 <.LVL75+0xa>
  41ed20:	460d      	mov	r5, r1
  41ed22:	4604      	mov	r4, r0
    state = (struct inflate_state FAR *)
  41ed24:	6a03      	ldr	r3, [r0, #32]
  41ed26:	f641 32cc 	movw	r2, #7116	; 0x1bcc
  41ed2a:	2101      	movs	r1, #1

0041ed2c <.LVL68>:
  41ed2c:	6a80      	ldr	r0, [r0, #40]	; 0x28

0041ed2e <.LVL69>:
  41ed2e:	4798      	blx	r3

0041ed30 <.LVL70>:
    if (state == Z_NULL) return Z_MEM_ERROR;
  41ed30:	4606      	mov	r6, r0
  41ed32:	b310      	cbz	r0, 41ed7a <.LVL81>
    strm->state = (struct internal_state FAR *)state;
  41ed34:	61e0      	str	r0, [r4, #28]
    state->window = Z_NULL;
  41ed36:	2300      	movs	r3, #0
  41ed38:	6343      	str	r3, [r0, #52]	; 0x34
    ret = inflateReset2(strm, windowBits);
  41ed3a:	4629      	mov	r1, r5
  41ed3c:	4620      	mov	r0, r4

0041ed3e <.LVL71>:
  41ed3e:	f001 fc26 	bl	42058e <.LFE17>

0041ed42 <.LVL72>:
    if (ret != Z_OK) {
  41ed42:	4605      	mov	r5, r0

0041ed44 <.LVL73>:
  41ed44:	b948      	cbnz	r0, 41ed5a <.LVL76>

0041ed46 <.LVL74>:
}
  41ed46:	4628      	mov	r0, r5
  41ed48:	bd70      	pop	{r4, r5, r6, pc}

0041ed4a <.LVL75>:
        strm->zalloc = zcalloc;
  41ed4a:	4b0d      	ldr	r3, [pc, #52]	; (41ed80 <.LVL82+0x2>)
  41ed4c:	6203      	str	r3, [r0, #32]
        strm->opaque = (voidpf)0;
  41ed4e:	2300      	movs	r3, #0
  41ed50:	6283      	str	r3, [r0, #40]	; 0x28
  41ed52:	e7e3      	b.n	41ed1c <.LVL67+0x6>
        strm->zfree = zcfree;
  41ed54:	4b0b      	ldr	r3, [pc, #44]	; (41ed84 <.LVL82+0x6>)
  41ed56:	6243      	str	r3, [r0, #36]	; 0x24
  41ed58:	e7e2      	b.n	41ed20 <.LVL67+0xa>

0041ed5a <.LVL76>:
        ZFREE(strm, state);
  41ed5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  41ed5c:	4631      	mov	r1, r6
  41ed5e:	6aa0      	ldr	r0, [r4, #40]	; 0x28

0041ed60 <.LVL77>:
  41ed60:	4798      	blx	r3

0041ed62 <.LVL78>:
        strm->state = Z_NULL;
  41ed62:	2300      	movs	r3, #0
  41ed64:	61e3      	str	r3, [r4, #28]
  41ed66:	e7ee      	b.n	41ed46 <.LVL74>

0041ed68 <.LVL79>:
        return Z_VERSION_ERROR;
  41ed68:	f06f 0505 	mvn.w	r5, #5
  41ed6c:	e7eb      	b.n	41ed46 <.LVL74>

0041ed6e <.LVL80>:
  41ed6e:	f06f 0505 	mvn.w	r5, #5
  41ed72:	e7e8      	b.n	41ed46 <.LVL74>
    if (strm == Z_NULL) return Z_STREAM_ERROR;
  41ed74:	f06f 0501 	mvn.w	r5, #1
  41ed78:	e7e5      	b.n	41ed46 <.LVL74>

0041ed7a <.LVL81>:
    if (state == Z_NULL) return Z_MEM_ERROR;
  41ed7a:	f06f 0503 	mvn.w	r5, #3

0041ed7e <.LVL82>:
  41ed7e:	e7e2      	b.n	41ed46 <.LVL74>
  41ed80:	004223dd 	.word	0x004223dd
  41ed84:	004224eb 	.word	0x004224eb

Disassembly of section .text.fp_div_2%193:

0041ed88 <fp_div_2>:
{
  41ed88:	b5f0      	push	{r4, r5, r6, r7, lr}

0041ed8a <.LCFI9>:
  oldused = b->used;
  41ed8a:	680e      	ldr	r6, [r1, #0]
  b->used = a->used;
  41ed8c:	4686      	mov	lr, r0
  41ed8e:	f85e 2b08 	ldr.w	r2, [lr], #8
  41ed92:	460f      	mov	r7, r1
  41ed94:	f847 2b08 	str.w	r2, [r7], #8

0041ed98 <.LBB5>:
    tmpa = a->dp + b->used - 1;
  41ed98:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
  41ed9c:	4415      	add	r5, r2
  41ed9e:	00ad      	lsls	r5, r5, #2
  41eda0:	44ae      	add	lr, r5
    tmpb = b->dp + b->used - 1;
  41eda2:	443d      	add	r5, r7

0041eda4 <.LVL76>:
    for (x = b->used - 1; x >= 0; x--) {
  41eda4:	3a01      	subs	r2, #1

0041eda6 <.LVL77>:
  41eda6:	d40d      	bmi.n	41edc4 <.LVL84>
  41eda8:	2300      	movs	r3, #0

0041edaa <.LVL78>:
      rr = *tmpa & 1;
  41edaa:	f85e 4904 	ldr.w	r4, [lr], #-4

0041edae <.LVL79>:
      *tmpb-- = (*tmpa-- >> 1) | (r << (DIGIT_BIT - 1));
  41edae:	07db      	lsls	r3, r3, #31

0041edb0 <.LVL80>:
  41edb0:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
  41edb4:	f845 3904 	str.w	r3, [r5], #-4

0041edb8 <.LVL81>:
    for (x = b->used - 1; x >= 0; x--) {
  41edb8:	3a01      	subs	r2, #1

0041edba <.LVL82>:
      rr = *tmpa & 1;
  41edba:	f004 0301 	and.w	r3, r4, #1

0041edbe <.LVL83>:
    for (x = b->used - 1; x >= 0; x--) {
  41edbe:	f1b2 3fff 	cmp.w	r2, #4294967295
  41edc2:	d1f2      	bne.n	41edaa <.LVL78>

0041edc4 <.LVL84>:
    tmpb = b->dp + b->used;
  41edc4:	680b      	ldr	r3, [r1, #0]
  41edc6:	eb07 0283 	add.w	r2, r7, r3, lsl #2

0041edca <.LVL85>:
    for (x = b->used; x < oldused; x++) {
  41edca:	429e      	cmp	r6, r3
  41edcc:	dd05      	ble.n	41edda <.LBE5>
      *tmpb++ = 0;
  41edce:	2400      	movs	r4, #0
  41edd0:	f842 4b04 	str.w	r4, [r2], #4

0041edd4 <.LVL86>:
    for (x = b->used; x < oldused; x++) {
  41edd4:	3301      	adds	r3, #1

0041edd6 <.LVL87>:
  41edd6:	429e      	cmp	r6, r3
  41edd8:	d1fa      	bne.n	41edd0 <.LVL85+0x6>

0041edda <.LBE5>:
  b->sign = a->sign;
  41edda:	6845      	ldr	r5, [r0, #4]
  41eddc:	604d      	str	r5, [r1, #4]
  fp_clamp (b);
  41edde:	680a      	ldr	r2, [r1, #0]

0041ede0 <.LVL88>:
  41ede0:	b192      	cbz	r2, 41ee08 <.LVL90+0x22>
  41ede2:	1e53      	subs	r3, r2, #1

0041ede4 <.LVL89>:
  41ede4:	1c50      	adds	r0, r2, #1

0041ede6 <.LVL90>:
  41ede6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
  41edea:	b970      	cbnz	r0, 41ee0a <.LVL90+0x24>
  41edec:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  41edf0:	3204      	adds	r2, #4
  41edf2:	e000      	b.n	41edf6 <.LVL90+0x10>
  41edf4:	4623      	mov	r3, r4
  41edf6:	b133      	cbz	r3, 41ee06 <.LVL90+0x20>
  41edf8:	1e5c      	subs	r4, r3, #1
  41edfa:	f852 0d04 	ldr.w	r0, [r2, #-4]!
  41edfe:	2800      	cmp	r0, #0
  41ee00:	d0f8      	beq.n	41edf4 <.LVL90+0xe>
  41ee02:	600b      	str	r3, [r1, #0]
  41ee04:	e001      	b.n	41ee0a <.LVL90+0x24>
  41ee06:	600b      	str	r3, [r1, #0]
  41ee08:	2500      	movs	r5, #0
  41ee0a:	604d      	str	r5, [r1, #4]
}
  41ee0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

Disassembly of section .text.fp_lshd%194:

0041ee0e <fp_lshd>:
{
  41ee0e:	b4f0      	push	{r4, r5, r6, r7}

0041ee10 <.LCFI26>:
    y = MIN(a->used + x - 1, (int)(FP_SIZE-1));
  41ee10:	6803      	ldr	r3, [r0, #0]
  41ee12:	440b      	add	r3, r1
  41ee14:	1e5e      	subs	r6, r3, #1
  41ee16:	2e87      	cmp	r6, #135	; 0x87
  41ee18:	bfa8      	it	ge
  41ee1a:	2687      	movge	r6, #135	; 0x87

0041ee1c <.LVL238>:
    a->used = y + 1;
  41ee1c:	1c77      	adds	r7, r6, #1
  41ee1e:	6007      	str	r7, [r0, #0]
    for (; y >= x; y--) {
  41ee20:	42b1      	cmp	r1, r6
  41ee22:	dc25      	bgt.n	41ee70 <.LVL244>
  41ee24:	f1c1 0202 	rsb	r2, r1, #2
  41ee28:	4432      	add	r2, r6
  41ee2a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  41ee2e:	3204      	adds	r2, #4
  41ee30:	eb00 0486 	add.w	r4, r0, r6, lsl #2
  41ee34:	340c      	adds	r4, #12
  41ee36:	4633      	mov	r3, r6

0041ee38 <.LVL239>:
        a->dp[y] = a->dp[y-x];
  41ee38:	f852 5d04 	ldr.w	r5, [r2, #-4]!
  41ee3c:	f844 5d04 	str.w	r5, [r4, #-4]!
    for (; y >= x; y--) {
  41ee40:	3b01      	subs	r3, #1
  41ee42:	4299      	cmp	r1, r3
  41ee44:	ddf8      	ble.n	41ee38 <.LVL239>
    for (; y >= 0; y--) {
  41ee46:	2b00      	cmp	r3, #0
  41ee48:	db09      	blt.n	41ee5e <.LVL241+0xc>
  41ee4a:	eb00 0283 	add.w	r2, r0, r3, lsl #2
  41ee4e:	320c      	adds	r2, #12
        a->dp[y] = 0;
  41ee50:	2100      	movs	r1, #0

0041ee52 <.LVL241>:
  41ee52:	f842 1d04 	str.w	r1, [r2, #-4]!
    for (; y >= 0; y--) {
  41ee56:	3b01      	subs	r3, #1
  41ee58:	f1b3 3fff 	cmp.w	r3, #4294967295
  41ee5c:	d1f9      	bne.n	41ee52 <.LVL241>
    fp_clamp(a);
  41ee5e:	b1bf      	cbz	r7, 41ee90 <.LCFI28+0x4>
  41ee60:	1cb3      	adds	r3, r6, #2

0041ee62 <.LVL243>:
  41ee62:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  41ee66:	b96b      	cbnz	r3, 41ee84 <.LVL245+0x10>
  41ee68:	eb00 0386 	add.w	r3, r0, r6, lsl #2
  41ee6c:	3308      	adds	r3, #8
  41ee6e:	e002      	b.n	41ee76 <.LVL245+0x2>

0041ee70 <.LVL244>:
    y = MIN(a->used + x - 1, (int)(FP_SIZE-1));
  41ee70:	4633      	mov	r3, r6
  41ee72:	e7e8      	b.n	41ee46 <.LVL239+0xe>

0041ee74 <.LVL245>:
    fp_clamp(a);
  41ee74:	460e      	mov	r6, r1
  41ee76:	b14e      	cbz	r6, 41ee8c <.LCFI28>
  41ee78:	1e71      	subs	r1, r6, #1
  41ee7a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  41ee7e:	2a00      	cmp	r2, #0
  41ee80:	d0f8      	beq.n	41ee74 <.LVL245>
  41ee82:	6006      	str	r6, [r0, #0]
  41ee84:	6843      	ldr	r3, [r0, #4]
  41ee86:	6043      	str	r3, [r0, #4]
}
  41ee88:	bcf0      	pop	{r4, r5, r6, r7}

0041ee8a <.LCFI27>:
  41ee8a:	4770      	bx	lr

0041ee8c <.LCFI28>:
  41ee8c:	2300      	movs	r3, #0
  41ee8e:	6003      	str	r3, [r0, #0]
    fp_clamp(a);
  41ee90:	2300      	movs	r3, #0
  41ee92:	e7f8      	b.n	41ee86 <.LVL245+0x12>

Disassembly of section .text.wc_HmacUpdate%195:

0041ee94 <wc_HmacUpdate>:
    if (hmac == NULL) {
  41ee94:	2800      	cmp	r0, #0
  41ee96:	d039      	beq.n	41ef0c <.LCFI3>
{
  41ee98:	b570      	push	{r4, r5, r6, lr}

0041ee9a <.LCFI2>:
  41ee9a:	4604      	mov	r4, r0
  41ee9c:	4616      	mov	r6, r2
  41ee9e:	460d      	mov	r5, r1
    if (!hmac->innerHashKeyed) {
  41eea0:	f890 3225 	ldrb.w	r3, [r0, #549]	; 0x225
  41eea4:	b143      	cbz	r3, 41eeb8 <.LVL124>

0041eea6 <.LVL123>:
    switch (hmac->macType) {
  41eea6:	f894 3224 	ldrb.w	r3, [r4, #548]	; 0x224
  41eeaa:	2b05      	cmp	r3, #5
  41eeac:	d832      	bhi.n	41ef14 <.LCFI4>
  41eeae:	e8df f003 	tbb	[pc, r3]
  41eeb2:	1109      	.short	0x1109
  41eeb4:	1f263118 	.word	0x1f263118

0041eeb8 <.LVL124>:
        ret = HmacKeyInnerHash(hmac);
  41eeb8:	f001 fb3a 	bl	420530 <HmacKeyInnerHash>

0041eebc <.LVL125>:
        if (ret != 0)
  41eebc:	4603      	mov	r3, r0
  41eebe:	2800      	cmp	r0, #0
  41eec0:	d0f1      	beq.n	41eea6 <.LVL123>
  41eec2:	e005      	b.n	41eed0 <.LVL128>

0041eec4 <.LVL126>:
            ret = wc_Md5Update(&hmac->hash.md5, msg, length);
  41eec4:	4632      	mov	r2, r6
  41eec6:	4629      	mov	r1, r5
  41eec8:	4620      	mov	r0, r4
  41eeca:	f7ff fe91 	bl	41ebf0 <.LFE23>

0041eece <.LVL127>:
  41eece:	4603      	mov	r3, r0

0041eed0 <.LVL128>:
}
  41eed0:	4618      	mov	r0, r3
  41eed2:	bd70      	pop	{r4, r5, r6, pc}

0041eed4 <.LVL129>:
            ret = wc_ShaUpdate(&hmac->hash.sha, msg, length);
  41eed4:	4632      	mov	r2, r6
  41eed6:	4629      	mov	r1, r5
  41eed8:	4620      	mov	r0, r4
  41eeda:	f7fe fb81 	bl	41d5e0 <.LFE27>

0041eede <.LVL130>:
  41eede:	4603      	mov	r3, r0

0041eee0 <.LVL131>:
            break;
  41eee0:	e7f6      	b.n	41eed0 <.LVL128>

0041eee2 <.LVL132>:
            ret = wc_Sha256Update(&hmac->hash.sha256, msg, length);
  41eee2:	4632      	mov	r2, r6
  41eee4:	4629      	mov	r1, r5
  41eee6:	4620      	mov	r0, r4
  41eee8:	f7fe fbd5 	bl	41d696 <.LFE18>

0041eeec <.LVL133>:
  41eeec:	4603      	mov	r3, r0

0041eeee <.LVL134>:
            break;
  41eeee:	e7ef      	b.n	41eed0 <.LVL128>

0041eef0 <.LVL135>:
            ret = wc_Sha384Update(&hmac->hash.sha384, msg, length);
  41eef0:	4632      	mov	r2, r6
  41eef2:	4629      	mov	r1, r5
  41eef4:	4620      	mov	r0, r4
  41eef6:	f7fd f97e 	bl	41c1f6 <.LBE719>

0041eefa <.LVL136>:
  41eefa:	4603      	mov	r3, r0

0041eefc <.LVL137>:
            break;
  41eefc:	e7e8      	b.n	41eed0 <.LVL128>

0041eefe <.LVL138>:
            ret = wc_Sha512Update(&hmac->hash.sha512, msg, length);
  41eefe:	4632      	mov	r2, r6
  41ef00:	4629      	mov	r1, r5
  41ef02:	4620      	mov	r0, r4
  41ef04:	f7fd f902 	bl	41c10c <.LFE178>

0041ef08 <.LVL139>:
  41ef08:	4603      	mov	r3, r0

0041ef0a <.LVL140>:
            break;
  41ef0a:	e7e1      	b.n	41eed0 <.LVL128>

0041ef0c <.LCFI3>:
        return BAD_FUNC_ARG;
  41ef0c:	f06f 03ac 	mvn.w	r3, #172	; 0xac
}
  41ef10:	4618      	mov	r0, r3

0041ef12 <.LVL142>:
  41ef12:	4770      	bx	lr

0041ef14 <.LCFI4>:
    switch (hmac->macType) {
  41ef14:	2300      	movs	r3, #0
  41ef16:	e7db      	b.n	41eed0 <.LVL128>

Disassembly of section .text.SYS_TIME_HwTimerCompareUpdate%196:

0041ef18 <SYS_TIME_HwTimerCompareUpdate>:
{
  41ef18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041ef1a <.LCFI0>:
    SYS_TIME_TIMER_OBJ* tmrActive = counterObj->tmrActive;
  41ef1a:	4b1f      	ldr	r3, [pc, #124]	; (41ef98 <.LVL29+0x8>)
  41ef1c:	6b19      	ldr	r1, [r3, #48]	; 0x30

0041ef1e <.LVL19>:
    counterObj->hwTimerPreviousValue = counterObj->hwTimerCurrentValue;
  41ef1e:	695a      	ldr	r2, [r3, #20]
  41ef20:	611a      	str	r2, [r3, #16]
    if (tmrActive != NULL)
  41ef22:	2900      	cmp	r1, #0
  41ef24:	d02f      	beq.n	41ef86 <.LVL27>
        if (tmrActive->relativeTimePending > SYS_TIME_HW_COUNTER_HALF_PERIOD)
  41ef26:	688c      	ldr	r4, [r1, #8]
  41ef28:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
            nextHwCounterValue = counterObj->hwTimerCurrentValue + SYS_TIME_HW_COUNTER_HALF_PERIOD;
  41ef2c:	bf28      	it	cs
  41ef2e:	f647 74ff 	movwcs	r4, #32767	; 0x7fff
            nextHwCounterValue = counterObj->hwTimerCurrentValue + tmrActive->relativeTimePending;
  41ef32:	4414      	add	r4, r2
  41ef34:	2500      	movs	r5, #0

0041ef36 <.LVL20>:
    currHwCounterValue = counterObj->timePlib->timerCounterGet();
  41ef36:	4e18      	ldr	r6, [pc, #96]	; (41ef98 <.LVL29+0x8>)
  41ef38:	6873      	ldr	r3, [r6, #4]
  41ef3a:	699b      	ldr	r3, [r3, #24]
  41ef3c:	4798      	blx	r3

0041ef3e <.LVL21>:
  41ef3e:	2100      	movs	r1, #0

0041ef40 <.LVL22>:
    if (currHwCounterValue < counterObj->hwTimerPreviousValue)
  41ef40:	6932      	ldr	r2, [r6, #16]
  41ef42:	2300      	movs	r3, #0
  41ef44:	4299      	cmp	r1, r3
  41ef46:	bf08      	it	eq
  41ef48:	4290      	cmpeq	r0, r2
  41ef4a:	d204      	bcs.n	41ef56 <.LVL24>
        currHwCounterValue = SYS_TIME_HW_COUNTER_PERIOD + currHwCounterValue;
  41ef4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  41ef50:	2300      	movs	r3, #0
  41ef52:	1880      	adds	r0, r0, r2

0041ef54 <.LVL23>:
  41ef54:	4159      	adcs	r1, r3

0041ef56 <.LVL24>:
    if (nextHwCounterValue  < (currHwCounterValue + counterObj->hwTimerCompareMargin))
  41ef56:	4b10      	ldr	r3, [pc, #64]	; (41ef98 <.LVL29+0x8>)
  41ef58:	6a1b      	ldr	r3, [r3, #32]
  41ef5a:	18c6      	adds	r6, r0, r3
  41ef5c:	f141 0700 	adc.w	r7, r1, #0
  41ef60:	42bd      	cmp	r5, r7
  41ef62:	bf08      	it	eq
  41ef64:	42b4      	cmpeq	r4, r6
  41ef66:	d213      	bcs.n	41ef90 <.LVL29>
        counterObj->hwTimerCompareValue = currHwCounterValue + counterObj->hwTimerCompareMargin;
  41ef68:	4418      	add	r0, r3

0041ef6a <.LVL25>:
  41ef6a:	4b0b      	ldr	r3, [pc, #44]	; (41ef98 <.LVL29+0x8>)
  41ef6c:	61d8      	str	r0, [r3, #28]
    if ((counterObj->hwTimerCompareValue & SYS_TIME_HW_COUNTER_PERIOD) == 0)
  41ef6e:	4b0a      	ldr	r3, [pc, #40]	; (41ef98 <.LVL29+0x8>)
  41ef70:	8b9b      	ldrh	r3, [r3, #28]
  41ef72:	b913      	cbnz	r3, 41ef7a <.LVL25+0x10>
        counterObj->hwTimerCompareValue = 1;
  41ef74:	2201      	movs	r2, #1
  41ef76:	4b08      	ldr	r3, [pc, #32]	; (41ef98 <.LVL29+0x8>)
  41ef78:	61da      	str	r2, [r3, #28]
    counterObj->timePlib->timerCompareSet(counterObj->hwTimerCompareValue);
  41ef7a:	4b07      	ldr	r3, [pc, #28]	; (41ef98 <.LVL29+0x8>)
  41ef7c:	685a      	ldr	r2, [r3, #4]
  41ef7e:	68d2      	ldr	r2, [r2, #12]
  41ef80:	69d8      	ldr	r0, [r3, #28]
  41ef82:	4790      	blx	r2
  41ef84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041ef86 <.LVL27>:
        nextHwCounterValue = counterObj->hwTimerCurrentValue + SYS_TIME_HW_COUNTER_HALF_PERIOD;
  41ef86:	f647 74ff 	movw	r4, #32767	; 0x7fff
  41ef8a:	4414      	add	r4, r2
  41ef8c:	2500      	movs	r5, #0

0041ef8e <.LVL28>:
  41ef8e:	e7d2      	b.n	41ef36 <.LVL20>

0041ef90 <.LVL29>:
        counterObj->hwTimerCompareValue = nextHwCounterValue;
  41ef90:	4b01      	ldr	r3, [pc, #4]	; (41ef98 <.LVL29+0x8>)
  41ef92:	61dc      	str	r4, [r3, #28]
  41ef94:	e7eb      	b.n	41ef6e <.LVL25+0x4>
  41ef96:	bf00      	nop
  41ef98:	2040d624 	.word	0x2040d624

Disassembly of section .text.fp_rshd%197:

0041ef9c <fp_rshd>:
{
  41ef9c:	b570      	push	{r4, r5, r6, lr}

0041ef9e <.LCFI37>:
  if (x >= a->used) {
  41ef9e:	6806      	ldr	r6, [r0, #0]
  41efa0:	428e      	cmp	r6, r1
  41efa2:	dd25      	ble.n	41eff0 <.LVL322>

0041efa4 <.LVL313>:
   for (y = 0; y < a->used - x; y++) {
  41efa4:	1a75      	subs	r5, r6, r1
  41efa6:	2d00      	cmp	r5, #0
  41efa8:	dd25      	ble.n	41eff6 <.LVL324>
  41efaa:	eb00 0281 	add.w	r2, r0, r1, lsl #2
  41efae:	3204      	adds	r2, #4
  41efb0:	1d01      	adds	r1, r0, #4

0041efb2 <.LVL314>:
  41efb2:	2300      	movs	r3, #0

0041efb4 <.LVL315>:
      a->dp[y] = a->dp[y+x];
  41efb4:	f852 4f04 	ldr.w	r4, [r2, #4]!
  41efb8:	f841 4f04 	str.w	r4, [r1, #4]!
   for (y = 0; y < a->used - x; y++) {
  41efbc:	3301      	adds	r3, #1
  41efbe:	42ab      	cmp	r3, r5
  41efc0:	d1f8      	bne.n	41efb4 <.LVL315>

0041efc2 <.LVL317>:
   for (; y < a->used; y++) {
  41efc2:	42ae      	cmp	r6, r5
  41efc4:	dd29      	ble.n	41f01a <.LVL326>
   for (y = 0; y < a->used - x; y++) {
  41efc6:	462b      	mov	r3, r5

0041efc8 <.LVL318>:
  41efc8:	eb00 0283 	add.w	r2, r0, r3, lsl #2
  41efcc:	3204      	adds	r2, #4
      a->dp[y] = 0;
  41efce:	2100      	movs	r1, #0

0041efd0 <.LVL319>:
  41efd0:	f842 1f04 	str.w	r1, [r2, #4]!
   for (; y < a->used; y++) {
  41efd4:	3301      	adds	r3, #1
  41efd6:	429e      	cmp	r6, r3
  41efd8:	d1fa      	bne.n	41efd0 <.LVL319>

0041efda <.LVL321>:
   a->used -= x;
  41efda:	6005      	str	r5, [r0, #0]
   fp_clamp(a);
  41efdc:	b1d5      	cbz	r5, 41f014 <.LVL325+0x16>
  41efde:	1e6b      	subs	r3, r5, #1
  41efe0:	1c6a      	adds	r2, r5, #1
  41efe2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  41efe6:	b992      	cbnz	r2, 41f00e <.LVL325+0x10>
  41efe8:	eb00 0285 	add.w	r2, r0, r5, lsl #2
  41efec:	3204      	adds	r2, #4
  41efee:	e007      	b.n	41f000 <.LVL325+0x2>

0041eff0 <.LVL322>:
     fp_zero(a);
  41eff0:	f003 f8a8 	bl	422144 <.LFE163>

0041eff4 <.LVL323>:
     return;
  41eff4:	bd70      	pop	{r4, r5, r6, pc}

0041eff6 <.LVL324>:
   for (; y < a->used; y++) {
  41eff6:	2e00      	cmp	r6, #0
  41eff8:	ddef      	ble.n	41efda <.LVL321>
  41effa:	2300      	movs	r3, #0
  41effc:	e7e4      	b.n	41efc8 <.LVL318>

0041effe <.LVL325>:
   fp_clamp(a);
  41effe:	4623      	mov	r3, r4
  41f000:	b13b      	cbz	r3, 41f012 <.LVL325+0x14>
  41f002:	1e5c      	subs	r4, r3, #1
  41f004:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  41f008:	2900      	cmp	r1, #0
  41f00a:	d0f8      	beq.n	41effe <.LVL325>
  41f00c:	6003      	str	r3, [r0, #0]
  41f00e:	6843      	ldr	r3, [r0, #4]
  41f010:	e001      	b.n	41f016 <.LVL325+0x18>
  41f012:	6003      	str	r3, [r0, #0]
  41f014:	2300      	movs	r3, #0
  41f016:	6043      	str	r3, [r0, #4]
  41f018:	bd70      	pop	{r4, r5, r6, pc}

0041f01a <.LVL326>:
   a->used -= x;
  41f01a:	6005      	str	r5, [r0, #0]
  41f01c:	e7df      	b.n	41efde <.LVL321+0x4>

Disassembly of section .text.wc_Compress%198:

0041f020 <wc_Compress>:
 * Note, the output buffer still needs to be larger than the input buffer.
 * The right chunk of data won't compress at all, and the lookup table will
 * add to the size of the output. The libz code says the compressed
 * buffer should be srcSz + 0.1% + 12.
 */
{
  41f020:	b510      	push	{r4, lr}

0041f022 <.LCFI3>:
  41f022:	b092      	sub	sp, #72	; 0x48

0041f024 <.LCFI4>:
    z_stream stream;
    int result = 0;

    stream.next_in = (Bytef*)in;
  41f024:	9204      	str	r2, [sp, #16]
    stream.avail_in = (uInt)inSz;
  41f026:	9305      	str	r3, [sp, #20]
#ifdef MAXSEG_64K
    /* Check for source > 64K on 16-bit machine: */
    if ((uLong)stream.avail_in != inSz) return COMPRESS_INIT_E;
#endif
    stream.next_out = out;
  41f028:	9007      	str	r0, [sp, #28]
    stream.avail_out = (uInt)outSz;
  41f02a:	9108      	str	r1, [sp, #32]
    if ((uLong)stream.avail_out != outSz) return COMPRESS_INIT_E;

    stream.zalloc = (alloc_func)myAlloc;
  41f02c:	4b19      	ldr	r3, [pc, #100]	; (41f094 <.LVL19+0xc>)

0041f02e <.LVL9>:
  41f02e:	930c      	str	r3, [sp, #48]	; 0x30
    stream.zfree = (free_func)myFree;
  41f030:	4b19      	ldr	r3, [pc, #100]	; (41f098 <.LVL19+0x10>)
  41f032:	930d      	str	r3, [sp, #52]	; 0x34
    stream.opaque = (voidpf)0;
  41f034:	2300      	movs	r3, #0
  41f036:	930e      	str	r3, [sp, #56]	; 0x38

    if (deflateInit2(&stream, Z_DEFAULT_COMPRESSION, Z_DEFLATED,
  41f038:	9b14      	ldr	r3, [sp, #80]	; 0x50
  41f03a:	2b00      	cmp	r3, #0
  41f03c:	bf14      	ite	ne
  41f03e:	2304      	movne	r3, #4
  41f040:	2300      	moveq	r3, #0
  41f042:	2238      	movs	r2, #56	; 0x38

0041f044 <.LVL10>:
  41f044:	9203      	str	r2, [sp, #12]
  41f046:	4a15      	ldr	r2, [pc, #84]	; (41f09c <.LVL19+0x14>)
  41f048:	9202      	str	r2, [sp, #8]
  41f04a:	9301      	str	r3, [sp, #4]
  41f04c:	2301      	movs	r3, #1
  41f04e:	9300      	str	r3, [sp, #0]
  41f050:	230b      	movs	r3, #11
  41f052:	2208      	movs	r2, #8
  41f054:	f04f 31ff 	mov.w	r1, #4294967295

0041f058 <.LVL11>:
  41f058:	a804      	add	r0, sp, #16

0041f05a <.LVL12>:
  41f05a:	f7f9 ffb1 	bl	418fc0 <deflateInit2_>

0041f05e <.LVL13>:
  41f05e:	b9b0      	cbnz	r0, 41f08e <.LVL19+0x6>
                     DEFLATE_DEFAULT_WINDOWBITS, DEFLATE_DEFAULT_MEMLEVEL,
                     flags ? Z_FIXED : Z_DEFAULT_STRATEGY) != Z_OK)
        return COMPRESS_INIT_E;

    if (deflate(&stream, Z_FINISH) != Z_STREAM_END) {
  41f060:	2104      	movs	r1, #4
  41f062:	a804      	add	r0, sp, #16
  41f064:	f7ef fac6 	bl	40e5f4 <deflate>

0041f068 <.LVL14>:
  41f068:	2801      	cmp	r0, #1
  41f06a:	d10a      	bne.n	41f082 <.LCFI6>
        deflateEnd(&stream);
        return COMPRESS_E;
    }

    result = (int)stream.total_out;
  41f06c:	9c09      	ldr	r4, [sp, #36]	; 0x24

0041f06e <.LVL15>:

    if (deflateEnd(&stream) != Z_OK)
  41f06e:	a804      	add	r0, sp, #16
  41f070:	f7ff fa04 	bl	41e47c <.LFE2>

0041f074 <.LVL16>:
  41f074:	2800      	cmp	r0, #0
        result = COMPRESS_E;
  41f076:	bf18      	it	ne
  41f078:	f06f 04b7 	mvnne.w	r4, #183	; 0xb7

0041f07c <.LVL17>:

    return result;
}
  41f07c:	4620      	mov	r0, r4
  41f07e:	b012      	add	sp, #72	; 0x48

0041f080 <.LCFI5>:
  41f080:	bd10      	pop	{r4, pc}

0041f082 <.LCFI6>:
        deflateEnd(&stream);
  41f082:	a804      	add	r0, sp, #16
  41f084:	f7ff f9fa 	bl	41e47c <.LFE2>

0041f088 <.LVL19>:
        return COMPRESS_E;
  41f088:	f06f 04b7 	mvn.w	r4, #183	; 0xb7
  41f08c:	e7f6      	b.n	41f07c <.LVL17>
        return COMPRESS_INIT_E;
  41f08e:	f06f 04b6 	mvn.w	r4, #182	; 0xb6
  41f092:	e7f3      	b.n	41f07c <.LVL17>
  41f094:	004223b9 	.word	0x004223b9
  41f098:	0042234b 	.word	0x0042234b
  41f09c:	004224f4 	.word	0x004224f4

Disassembly of section .text.fp_montgomery_calc_normalization%199:

0041f0a0 <fp_montgomery_calc_normalization>:
{
  41f0a0:	b570      	push	{r4, r5, r6, lr}

0041f0a2 <.LCFI36>:
  41f0a2:	4604      	mov	r4, r0
  41f0a4:	460e      	mov	r6, r1
  bits = fp_count_bits (b) % DIGIT_BIT;
  41f0a6:	4608      	mov	r0, r1

0041f0a8 <.LVL296>:
  41f0a8:	f002 ff2d 	bl	421f06 <.LFE26>

0041f0ac <.LVL297>:
  41f0ac:	4243      	negs	r3, r0
  41f0ae:	f000 051f 	and.w	r5, r0, #31
  41f0b2:	f003 031f 	and.w	r3, r3, #31
  41f0b6:	bf58      	it	pl
  41f0b8:	425d      	negpl	r5, r3

0041f0ba <.LVL298>:
  if (!bits) bits = DIGIT_BIT;
  41f0ba:	b33d      	cbz	r5, 41f10c <.LVL309>
  if (b->used > 1) {
  41f0bc:	6831      	ldr	r1, [r6, #0]
  41f0be:	2901      	cmp	r1, #1
  41f0c0:	dd09      	ble.n	41f0d6 <.LVL301>
     fp_2expt (a, (b->used - 1) * DIGIT_BIT + bits - 1);
  41f0c2:	eb05 1141 	add.w	r1, r5, r1, lsl #5
  41f0c6:	3921      	subs	r1, #33	; 0x21
  41f0c8:	4620      	mov	r0, r4
  41f0ca:	f002 f87a 	bl	4211c2 <.LFE70>

0041f0ce <.LVL299>:
  for (x = bits - 1; x < (int)DIGIT_BIT; x++) {
  41f0ce:	3d01      	subs	r5, #1

0041f0d0 <.LVL300>:
  41f0d0:	2d1f      	cmp	r5, #31
  41f0d2:	dd09      	ble.n	41f0e8 <.LVL303+0x6>
  41f0d4:	bd70      	pop	{r4, r5, r6, pc}

0041f0d6 <.LVL301>:
     fp_set(a, 1);
  41f0d6:	2101      	movs	r1, #1
  41f0d8:	4620      	mov	r0, r4
  41f0da:	f003 f81d 	bl	422118 <.LFE20>

0041f0de <.LVL302>:
  for (x = bits - 1; x < (int)DIGIT_BIT; x++) {
  41f0de:	2500      	movs	r5, #0
  41f0e0:	e002      	b.n	41f0e8 <.LVL303+0x6>

0041f0e2 <.LVL303>:
  41f0e2:	3501      	adds	r5, #1
  41f0e4:	2d1f      	cmp	r5, #31
  41f0e6:	dc10      	bgt.n	41f10a <.LVL308+0x2>
    fp_mul_2 (a, a);
  41f0e8:	4621      	mov	r1, r4
  41f0ea:	4620      	mov	r0, r4
  41f0ec:	f001 f808 	bl	420100 <.LBE13>

0041f0f0 <.LVL306>:
    if (fp_cmp_mag (a, b) != FP_LT) {
  41f0f0:	4631      	mov	r1, r6
  41f0f2:	4620      	mov	r0, r4
  41f0f4:	f000 ff9f 	bl	420036 <.LFE16>

0041f0f8 <.LVL307>:
  41f0f8:	f1b0 3fff 	cmp.w	r0, #4294967295
  41f0fc:	d0f1      	beq.n	41f0e2 <.LVL303>
      s_fp_sub (a, b, a);
  41f0fe:	4622      	mov	r2, r4
  41f100:	4631      	mov	r1, r6
  41f102:	4620      	mov	r0, r4
  41f104:	f7fd f8ec 	bl	41c2e0 <.LBE840>

0041f108 <.LVL308>:
  41f108:	e7eb      	b.n	41f0e2 <.LVL303>
  41f10a:	bd70      	pop	{r4, r5, r6, pc}

0041f10c <.LVL309>:
  if (b->used > 1) {
  41f10c:	6831      	ldr	r1, [r6, #0]
  41f10e:	2901      	cmp	r1, #1
  41f110:	dde1      	ble.n	41f0d6 <.LVL301>
     fp_2expt (a, (b->used - 1) * DIGIT_BIT + bits - 1);
  41f112:	0149      	lsls	r1, r1, #5
  41f114:	3901      	subs	r1, #1
  41f116:	4620      	mov	r0, r4
  41f118:	f002 f853 	bl	4211c2 <.LFE70>

0041f11c <.LVL310>:
  for (x = bits - 1; x < (int)DIGIT_BIT; x++) {
  41f11c:	251f      	movs	r5, #31

0041f11e <.LVL311>:
  41f11e:	e7e3      	b.n	41f0e8 <.LVL303+0x6>

Disassembly of section .rodata.distfix.6568%200:

0041f120 <distfix.6568>:
  41f120:	0510 0001 0517 0101 0513 0011 051b 1001     ................
  41f130:	0511 0005 0519 0401 0515 0041 051d 4001     ..........A....@
  41f140:	0510 0003 0518 0201 0514 0021 051c 2001     ..........!.... 
  41f150:	0512 0009 051a 0801 0516 0081 0540 0000     ............@...
  41f160:	0510 0002 0517 0181 0513 0019 051b 1801     ................
  41f170:	0511 0007 0519 0601 0515 0061 051d 6001     ..........a....`
  41f180:	0510 0004 0518 0301 0514 0031 051c 3001     ..........1....0
  41f190:	0512 000d 051a 0c01 0516 00c1 0540 0000     ............@...

Disassembly of section .rodata.outputA%201:

0041f1a0 <outputA>:
  41f1a0:	ee04 3bc6 31b2 2cdf 0a63 fb1a 24e7 9d94     ...;.1.,c....$..
  41f1b0:	5a00 7858 e151 79aa 475e 4773 b0c8 6256     .ZXxQ..y^GsG..Vb
  41f1c0:	181c dcbd 8ddd fc99 c25f 20b9 d853 accf     ........_.. S...
  41f1d0:	0bfb 83b8 0512 d1fa d6dd 71c0 8a31 1860     ...........q1.`.
  41f1e0:	3bf0 f573 e4ed d0d4 f971 03de 7afd 10ea     .;s.....q....z..
  41f1f0:	925d b899 99af 07aa db5b b94d 28aa 8dc1     ].......[.M..(..
  41f200:	4b17 ee56 012a 094d 9688 22ff c982 a855     .KV.*.M...."..U.
  41f210:	6919 69e0 8cfa 07e0 80a1 3a18 df07 17ae     .i.i.......:....

Disassembly of section .rodata.outputB%202:

0041f220 <outputB>:
  41f220:	e1d3 c360 995b 40f3 62b2 6482 75d1 6010     ..`.[..@.b.d.u.`
  41f230:	04e0 a35d ff83 a557 737d 73a6 b8d2 0dd8     ..]...W.}s.s....
  41f240:	f6aa c3a6 915a 45bb d779 d03f fec8 11d1     ....Z..Ey.?.....
  41f250:	39b0 0613 8a82 eddf 8f52 8101 b321 bdfe     .9......R...!...
  41f260:	43c3 97e7 7db8 63bb 13db de33 d1d9 e1ec     .C...}.c..3.....
  41f270:	cf77 b7a6 e81f 1dab 66a4 ed24 1564 1ce5     w........f$.d...
  41f280:	e2cd cac7 e286 9983 ea0e 91eb 0412 5215     ...............R
  41f290:	228b 9195 8102 2db0 31d4 c9f4 04f7 df27     .".....-.1....'.

Disassembly of section .text.__multadd%203:

0041f2a0 <__multadd>:
  41f2a0:	b5f0      	push	{r4, r5, r6, r7, lr}

0041f2a2 <.LCFI1>:
  41f2a2:	690c      	ldr	r4, [r1, #16]
  41f2a4:	b083      	sub	sp, #12

0041f2a6 <.LCFI2>:
  41f2a6:	460d      	mov	r5, r1
  41f2a8:	4606      	mov	r6, r0

0041f2aa <.LVL13>:
  41f2aa:	f101 0e14 	add.w	lr, r1, #20

0041f2ae <.LVL14>:
  41f2ae:	2700      	movs	r7, #0

0041f2b0 <.LVL15>:
  41f2b0:	f8de 0000 	ldr.w	r0, [lr]

0041f2b4 <.LVL16>:
  41f2b4:	b281      	uxth	r1, r0
  41f2b6:	fb02 3301 	mla	r3, r2, r1, r3

0041f2ba <.LVL17>:
  41f2ba:	0c01      	lsrs	r1, r0, #16
  41f2bc:	0c18      	lsrs	r0, r3, #16

0041f2be <.LVL18>:
  41f2be:	fb02 0101 	mla	r1, r2, r1, r0

0041f2c2 <.LVL19>:
  41f2c2:	b29b      	uxth	r3, r3

0041f2c4 <.LVL20>:
  41f2c4:	3701      	adds	r7, #1

0041f2c6 <.LVL21>:
  41f2c6:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  41f2ca:	42bc      	cmp	r4, r7
  41f2cc:	f84e 3b04 	str.w	r3, [lr], #4

0041f2d0 <.LVL22>:
  41f2d0:	ea4f 4311 	mov.w	r3, r1, lsr #16

0041f2d4 <.LVL23>:
  41f2d4:	dcec      	bgt.n	41f2b0 <.LVL15>
  41f2d6:	b13b      	cbz	r3, 41f2e8 <.LVL26+0x4>
  41f2d8:	68aa      	ldr	r2, [r5, #8]

0041f2da <.LVL24>:
  41f2da:	4294      	cmp	r4, r2
  41f2dc:	da07      	bge.n	41f2ee <.LCFI4>

0041f2de <.LVL25>:
  41f2de:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  41f2e2:	3401      	adds	r4, #1

0041f2e4 <.LVL26>:
  41f2e4:	6153      	str	r3, [r2, #20]
  41f2e6:	612c      	str	r4, [r5, #16]
  41f2e8:	4628      	mov	r0, r5
  41f2ea:	b003      	add	sp, #12

0041f2ec <.LCFI3>:
  41f2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

0041f2ee <.LCFI4>:
  41f2ee:	6869      	ldr	r1, [r5, #4]

0041f2f0 <.LVL28>:
  41f2f0:	9301      	str	r3, [sp, #4]
  41f2f2:	3101      	adds	r1, #1
  41f2f4:	4630      	mov	r0, r6
  41f2f6:	f001 fc39 	bl	420b6c <.LFE2>

0041f2fa <.LVL29>:
  41f2fa:	692a      	ldr	r2, [r5, #16]
  41f2fc:	3202      	adds	r2, #2
  41f2fe:	f105 010c 	add.w	r1, r5, #12
  41f302:	4607      	mov	r7, r0

0041f304 <.LVL30>:
  41f304:	0092      	lsls	r2, r2, #2
  41f306:	300c      	adds	r0, #12

0041f308 <.LVL31>:
  41f308:	f7fb fb3c 	bl	41a984 <.LFE14>

0041f30c <.LBB12>:
  41f30c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  41f30e:	6869      	ldr	r1, [r5, #4]

0041f310 <.LBE12>:
  41f310:	9b01      	ldr	r3, [sp, #4]

0041f312 <.LBB15>:
  41f312:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  41f316:	6028      	str	r0, [r5, #0]
  41f318:	f842 5021 	str.w	r5, [r2, r1, lsl #2]

0041f31c <.LBE15>:
  41f31c:	463d      	mov	r5, r7

0041f31e <.LVL34>:
  41f31e:	e7de      	b.n	41f2de <.LVL25>

Disassembly of section .text.wc_Des_CbcEncrypt%204:

0041f320 <wc_Des_CbcEncrypt>:
    {
  41f320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

0041f324 <.LCFI11>:
        word32 blocks = sz / DES_BLOCK_SIZE;
  41f324:	08db      	lsrs	r3, r3, #3

0041f326 <.LVL180>:
        while (blocks--) {
  41f326:	b3bb      	cbz	r3, 41f398 <.LBE253>
  41f328:	4680      	mov	r8, r0
  41f32a:	460f      	mov	r7, r1
  41f32c:	f103 39ff 	add.w	r9, r3, #4294967295

0041f330 <.LVL181>:
  41f330:	1e56      	subs	r6, r2, #1
            xorbuf((byte*)des->reg, in, DES_BLOCK_SIZE);
  41f332:	4605      	mov	r5, r0
  41f334:	1dc4      	adds	r4, r0, #7
  41f336:	e01d      	b.n	41f374 <.LBB255>

0041f338 <.LBB249>:
    for (i = 0; i < n; i++) r[i] ^= a[i];
  41f338:	f8d8 3000 	ldr.w	r3, [r8]
  41f33c:	f8d6 2001 	ldr.w	r2, [r6, #1]
  41f340:	4053      	eors	r3, r2
  41f342:	f8c8 3000 	str.w	r3, [r8]

0041f346 <.LVL183>:
  41f346:	f8d8 3004 	ldr.w	r3, [r8, #4]
  41f34a:	f8d6 2005 	ldr.w	r2, [r6, #5]
  41f34e:	4053      	eors	r3, r2
  41f350:	f8c8 3004 	str.w	r3, [r8, #4]

0041f354 <.LBE249>:
            DesProcessBlock(des, (byte*)des->reg, (byte*)des->reg);
  41f354:	462a      	mov	r2, r5
  41f356:	4629      	mov	r1, r5
  41f358:	4628      	mov	r0, r5
  41f35a:	f7fc f8d7 	bl	41b50c <.LFE169>

0041f35e <.LVL185>:
            XMEMCPY(out, des->reg, DES_BLOCK_SIZE);
  41f35e:	682a      	ldr	r2, [r5, #0]
  41f360:	686b      	ldr	r3, [r5, #4]
  41f362:	603a      	str	r2, [r7, #0]
  41f364:	607b      	str	r3, [r7, #4]
            out += DES_BLOCK_SIZE;
  41f366:	3708      	adds	r7, #8

0041f368 <.LVL186>:
        while (blocks--) {
  41f368:	f109 39ff 	add.w	r9, r9, #4294967295
  41f36c:	3608      	adds	r6, #8

0041f36e <.LVL188>:
  41f36e:	f1b9 3fff 	cmp.w	r9, #4294967295
  41f372:	d011      	beq.n	41f398 <.LBE253>

0041f374 <.LBB255>:
    if (((wolfssl_word)buf | (wolfssl_word)mask | count) % WOLFSSL_WORD_SIZE == 0)
  41f374:	1c73      	adds	r3, r6, #1

0041f376 <.LVL190>:
  41f376:	ea48 0303 	orr.w	r3, r8, r3

0041f37a <.LVL191>:
  41f37a:	f013 0f03 	tst.w	r3, #3
  41f37e:	d0db      	beq.n	41f338 <.LBB249>
  41f380:	f108 33ff 	add.w	r3, r8, #4294967295
  41f384:	4632      	mov	r2, r6

0041f386 <.LBB253>:
        for (i = 0; i < count; i++) b[i] ^= m[i];
  41f386:	7859      	ldrb	r1, [r3, #1]
  41f388:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  41f38c:	4041      	eors	r1, r0
  41f38e:	f803 1f01 	strb.w	r1, [r3, #1]!
  41f392:	42a3      	cmp	r3, r4
  41f394:	d1f7      	bne.n	41f386 <.LBB253>
  41f396:	e7dd      	b.n	41f354 <.LBE249>

0041f398 <.LBE253>:
    }
  41f398:	2000      	movs	r0, #0
  41f39a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

Disassembly of section .text.wc_ecc_shared_secret_ex%205:

0041f39e <wc_ecc_shared_secret_ex>:
    if (private_key == NULL || point == NULL || out == NULL ||
  41f39e:	2800      	cmp	r0, #0
  41f3a0:	d039      	beq.n	41f416 <.LCFI62>
{
  41f3a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041f3a4 <.LCFI61>:
  41f3a4:	4604      	mov	r4, r0
    if (private_key == NULL || point == NULL || out == NULL ||
  41f3a6:	b351      	cbz	r1, 41f3fe <.LVL833>
  41f3a8:	b362      	cbz	r2, 41f404 <.LVL835>
  41f3aa:	b35b      	cbz	r3, 41f404 <.LVL835>
    if (private_key->type != ECC_PRIVATEKEY) {
  41f3ac:	6800      	ldr	r0, [r0, #0]

0041f3ae <.LVL825>:
  41f3ae:	2802      	cmp	r0, #2
  41f3b0:	d12b      	bne.n	41f40a <.LVL836+0x2>
  41f3b2:	461f      	mov	r7, r3
  41f3b4:	4616      	mov	r6, r2
  41f3b6:	460d      	mov	r5, r1
    if (wc_ecc_is_valid_idx(private_key->idx) == 0)
  41f3b8:	6860      	ldr	r0, [r4, #4]
  41f3ba:	f002 fbe5 	bl	421b88 <wc_ecc_is_valid_idx>

0041f3be <.LVL826>:
  41f3be:	b338      	cbz	r0, 41f410 <.LVL838>
    switch(private_key->state) {
  41f3c0:	68a3      	ldr	r3, [r4, #8]
  41f3c2:	2b00      	cmp	r3, #0
  41f3c4:	db12      	blt.n	41f3ec <.LVL831>
  41f3c6:	2b01      	cmp	r3, #1
  41f3c8:	dd05      	ble.n	41f3d6 <.LVL829>
  41f3ca:	2b02      	cmp	r3, #2
  41f3cc:	d10e      	bne.n	41f3ec <.LVL831>

0041f3ce <.LVL827>:
            err = 0;
  41f3ce:	2000      	movs	r0, #0

0041f3d0 <.LVL828>:
    private_key->state = ECC_STATE_NONE;
  41f3d0:	2300      	movs	r3, #0
  41f3d2:	60a3      	str	r3, [r4, #8]
    return err;
  41f3d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041f3d6 <.LVL829>:
            private_key->state = ECC_STATE_SHARED_SEC_GEN;
  41f3d6:	2301      	movs	r3, #1
  41f3d8:	60a3      	str	r3, [r4, #8]
            err = wc_ecc_shared_secret_gen(private_key, point, out, outlen);
  41f3da:	463b      	mov	r3, r7
  41f3dc:	4632      	mov	r2, r6
  41f3de:	4629      	mov	r1, r5
  41f3e0:	4620      	mov	r0, r4
  41f3e2:	f7fd f85f 	bl	41c4a4 <.LFE67>

0041f3e6 <.LVL830>:
            if (err < 0) {
  41f3e6:	2800      	cmp	r0, #0
  41f3e8:	daf1      	bge.n	41f3ce <.LVL827>
  41f3ea:	e001      	b.n	41f3f0 <.LVL832>

0041f3ec <.LVL831>:
            err = BAD_STATE_E;
  41f3ec:	f06f 00bf 	mvn.w	r0, #191	; 0xbf

0041f3f0 <.LVL832>:
    if (err == WC_PENDING_E) {
  41f3f0:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
  41f3f4:	d1ec      	bne.n	41f3d0 <.LVL828>
        private_key->state++;
  41f3f6:	68a3      	ldr	r3, [r4, #8]
  41f3f8:	3301      	adds	r3, #1
  41f3fa:	60a3      	str	r3, [r4, #8]
        return err;
  41f3fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041f3fe <.LVL833>:
        return BAD_FUNC_ARG;
  41f3fe:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041f402 <.LVL834>:
  41f402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041f404 <.LVL835>:
  41f404:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041f408 <.LVL836>:
  41f408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return ECC_BAD_ARG_E;
  41f40a:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
  41f40e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041f410 <.LVL838>:
        return ECC_BAD_ARG_E;
  41f410:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
}
  41f414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041f416 <.LCFI62>:
        return BAD_FUNC_ARG;
  41f416:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041f41a <.LVL840>:
}
  41f41a:	4770      	bx	lr

Disassembly of section .text.deflateResetKeep%206:

0041f41c <deflateResetKeep>:
    if (strm == Z_NULL || strm->state == Z_NULL ||
  41f41c:	b310      	cbz	r0, 41f464 <.LCFI14>
{
  41f41e:	b538      	push	{r3, r4, r5, lr}

0041f420 <.LCFI13>:
  41f420:	4604      	mov	r4, r0
    if (strm == Z_NULL || strm->state == Z_NULL ||
  41f422:	69c5      	ldr	r5, [r0, #28]
  41f424:	b30d      	cbz	r5, 41f46a <.LCFI15>
  41f426:	6a02      	ldr	r2, [r0, #32]
  41f428:	b312      	cbz	r2, 41f470 <.LVL274>
        strm->zalloc == (alloc_func)0 || strm->zfree == (free_func)0) {
  41f42a:	6a42      	ldr	r2, [r0, #36]	; 0x24
  41f42c:	b31a      	cbz	r2, 41f476 <.LVL276>
    strm->total_in = strm->total_out = 0;
  41f42e:	2200      	movs	r2, #0
  41f430:	6142      	str	r2, [r0, #20]
  41f432:	6082      	str	r2, [r0, #8]
    strm->msg = Z_NULL; /* use zfree if we ever allocate msg dynamically */
  41f434:	6182      	str	r2, [r0, #24]
    strm->data_type = Z_UNKNOWN;
  41f436:	2102      	movs	r1, #2
  41f438:	62c1      	str	r1, [r0, #44]	; 0x2c

0041f43a <.LVL266>:
    s->pending = 0;
  41f43a:	616a      	str	r2, [r5, #20]
    s->pending_out = s->pending_buf;
  41f43c:	68aa      	ldr	r2, [r5, #8]
  41f43e:	612a      	str	r2, [r5, #16]
    if (s->wrap < 0) {
  41f440:	69aa      	ldr	r2, [r5, #24]
  41f442:	2a00      	cmp	r2, #0
  41f444:	db0b      	blt.n	41f45e <.LVL269>
    s->status = s->wrap ? INIT_STATE : BUSY_STATE;
  41f446:	69ab      	ldr	r3, [r5, #24]
  41f448:	b1c3      	cbz	r3, 41f47c <.LVL278>
  41f44a:	222a      	movs	r2, #42	; 0x2a
  41f44c:	606a      	str	r2, [r5, #4]
        s->wrap == 2 ? crc32(0L, Z_NULL, 0) :
  41f44e:	2b02      	cmp	r3, #2
  41f450:	d116      	bne.n	41f480 <.LVL278+0x4>
  41f452:	2200      	movs	r2, #0
  41f454:	4611      	mov	r1, r2
  41f456:	4610      	mov	r0, r2

0041f458 <.LVL267>:
  41f458:	f7f8 f948 	bl	4176ec <.LFE21>

0041f45c <.LVL268>:
  41f45c:	e015      	b.n	41f48a <.LVL280>

0041f45e <.LVL269>:
        s->wrap = -s->wrap; /* was made negative by deflate(..., Z_FINISH); */
  41f45e:	4252      	negs	r2, r2
  41f460:	61aa      	str	r2, [r5, #24]
  41f462:	e7f0      	b.n	41f446 <.LVL266+0xc>

0041f464 <.LCFI14>:
        return Z_STREAM_ERROR;
  41f464:	f06f 0001 	mvn.w	r0, #1

0041f468 <.LVL271>:
  41f468:	4770      	bx	lr

0041f46a <.LCFI15>:
  41f46a:	f06f 0001 	mvn.w	r0, #1

0041f46e <.LVL273>:
  41f46e:	bd38      	pop	{r3, r4, r5, pc}

0041f470 <.LVL274>:
  41f470:	f06f 0001 	mvn.w	r0, #1

0041f474 <.LVL275>:
  41f474:	bd38      	pop	{r3, r4, r5, pc}

0041f476 <.LVL276>:
  41f476:	f06f 0001 	mvn.w	r0, #1

0041f47a <.LVL277>:
  41f47a:	bd38      	pop	{r3, r4, r5, pc}

0041f47c <.LVL278>:
    s->status = s->wrap ? INIT_STATE : BUSY_STATE;
  41f47c:	2371      	movs	r3, #113	; 0x71
  41f47e:	606b      	str	r3, [r5, #4]
        s->wrap == 2 ? crc32(0L, Z_NULL, 0) :
  41f480:	2200      	movs	r2, #0
  41f482:	4611      	mov	r1, r2
  41f484:	4610      	mov	r0, r2

0041f486 <.LVL279>:
  41f486:	f7f7 fb83 	bl	416b90 <.LFE16>

0041f48a <.LVL280>:
    strm->adler =
  41f48a:	6320      	str	r0, [r4, #48]	; 0x30
    s->last_flush = Z_NO_FLUSH;
  41f48c:	2400      	movs	r4, #0

0041f48e <.LVL281>:
  41f48e:	62ac      	str	r4, [r5, #40]	; 0x28
    _tr_init(s);
  41f490:	4628      	mov	r0, r5
  41f492:	f001 fad3 	bl	420a3c <.LFE12>

0041f496 <.LVL282>:
    return Z_OK;
  41f496:	4620      	mov	r0, r4
  41f498:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section .text.sha384_test%207:

0041f49c <sha384_test>:
{
  41f49c:	b570      	push	{r4, r5, r6, lr}

0041f49e <.LCFI13>:
  41f49e:	b0d4      	sub	sp, #336	; 0x150

0041f4a0 <.LCFI14>:
    test_sha[0] = a;
  41f4a0:	4b1b      	ldr	r3, [pc, #108]	; (41f510 <.LCFI15+0x4>)
  41f4a2:	9300      	str	r3, [sp, #0]
  41f4a4:	f503 7235 	add.w	r2, r3, #724	; 0x2d4
  41f4a8:	9201      	str	r2, [sp, #4]
  41f4aa:	2203      	movs	r2, #3
  41f4ac:	9202      	str	r2, [sp, #8]
  41f4ae:	2230      	movs	r2, #48	; 0x30
  41f4b0:	9203      	str	r2, [sp, #12]
    test_sha[1] = b;
  41f4b2:	f503 7142 	add.w	r1, r3, #776	; 0x308
  41f4b6:	9104      	str	r1, [sp, #16]
  41f4b8:	f503 735f 	add.w	r3, r3, #892	; 0x37c
  41f4bc:	9305      	str	r3, [sp, #20]
  41f4be:	2370      	movs	r3, #112	; 0x70
  41f4c0:	9306      	str	r3, [sp, #24]
  41f4c2:	9207      	str	r2, [sp, #28]
    CRYPT_SHA384_Initialize(&sha);
  41f4c4:	a814      	add	r0, sp, #80	; 0x50
  41f4c6:	f002 fec9 	bl	42225c <.LFE8>

0041f4ca <.LVL22>:
    appData.sha384_test_result = times;
  41f4ca:	2202      	movs	r2, #2
  41f4cc:	4b11      	ldr	r3, [pc, #68]	; (41f514 <.LCFI15+0x8>)
  41f4ce:	611a      	str	r2, [r3, #16]

0041f4d0 <.LVL23>:
  41f4d0:	2400      	movs	r4, #0
            appData.sha384_test_result--;
  41f4d2:	461e      	mov	r6, r3
  41f4d4:	e002      	b.n	41f4dc <.LVL24+0x6>

0041f4d6 <.LVL24>:
  41f4d6:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  41f4d8:	2c20      	cmp	r4, #32
  41f4da:	d016      	beq.n	41f50a <.LVL27+0xc>
  41f4dc:	eb0d 0504 	add.w	r5, sp, r4
        CRYPT_SHA384_DataAdd(&sha, (byte*)test_sha[i].input,(word32)test_sha[i].inLen);
  41f4e0:	68aa      	ldr	r2, [r5, #8]
  41f4e2:	f85d 1004 	ldr.w	r1, [sp, r4]
  41f4e6:	a814      	add	r0, sp, #80	; 0x50
  41f4e8:	f002 fd7c 	bl	421fe4 <.LFE11>

0041f4ec <.LVL25>:
        CRYPT_SHA384_Finalize(&sha, hash);
  41f4ec:	a908      	add	r1, sp, #32
  41f4ee:	a814      	add	r0, sp, #80	; 0x50
  41f4f0:	f002 fd84 	bl	421ffc <.LFE13>

0041f4f4 <.LVL26>:
        if (memcmp(hash, test_sha[i].output, SHA384_DIGEST_SIZE) == 0)
  41f4f4:	2230      	movs	r2, #48	; 0x30
  41f4f6:	6869      	ldr	r1, [r5, #4]
  41f4f8:	a808      	add	r0, sp, #32
  41f4fa:	f000 ffb9 	bl	420470 <memcmp>

0041f4fe <.LVL27>:
  41f4fe:	2800      	cmp	r0, #0
  41f500:	d1e9      	bne.n	41f4d6 <.LVL24>
            appData.sha384_test_result--;
  41f502:	6933      	ldr	r3, [r6, #16]
  41f504:	3b01      	subs	r3, #1
  41f506:	6133      	str	r3, [r6, #16]
  41f508:	e7e5      	b.n	41f4d6 <.LVL24>
}
  41f50a:	b054      	add	sp, #336	; 0x150

0041f50c <.LCFI15>:
  41f50c:	bd70      	pop	{r4, r5, r6, pc}
  41f50e:	bf00      	nop
  41f510:	0040da54 	.word	0x0040da54
  41f514:	2040d534 	.word	0x2040d534

Disassembly of section .text.sha512_test%208:

0041f518 <sha512_test>:
{
  41f518:	b570      	push	{r4, r5, r6, lr}

0041f51a <.LCFI16>:
  41f51a:	b0e0      	sub	sp, #384	; 0x180

0041f51c <.LCFI17>:
    test_sha[0] = a;
  41f51c:	4b1b      	ldr	r3, [pc, #108]	; (41f58c <.LCFI18+0x4>)
  41f51e:	9300      	str	r3, [sp, #0]
  41f520:	f503 726c 	add.w	r2, r3, #944	; 0x3b0
  41f524:	9201      	str	r2, [sp, #4]
  41f526:	2203      	movs	r2, #3
  41f528:	9202      	str	r2, [sp, #8]
  41f52a:	2240      	movs	r2, #64	; 0x40
  41f52c:	9203      	str	r2, [sp, #12]
    test_sha[1] = b;
  41f52e:	f503 7142 	add.w	r1, r3, #776	; 0x308
  41f532:	9104      	str	r1, [sp, #16]
  41f534:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
  41f538:	9305      	str	r3, [sp, #20]
  41f53a:	2370      	movs	r3, #112	; 0x70
  41f53c:	9306      	str	r3, [sp, #24]
  41f53e:	9207      	str	r2, [sp, #28]
    CRYPT_SHA512_Initialize(&sha);
  41f540:	a818      	add	r0, sp, #96	; 0x60
  41f542:	f002 fe93 	bl	42226c <.LFE12>

0041f546 <.LVL29>:
    appData.sha512_test_result = times;
  41f546:	2202      	movs	r2, #2
  41f548:	4b11      	ldr	r3, [pc, #68]	; (41f590 <.LCFI18+0x8>)
  41f54a:	615a      	str	r2, [r3, #20]

0041f54c <.LVL30>:
  41f54c:	2400      	movs	r4, #0
            appData.sha512_test_result--;
  41f54e:	461e      	mov	r6, r3
  41f550:	e002      	b.n	41f558 <.LVL31+0x6>

0041f552 <.LVL31>:
  41f552:	3410      	adds	r4, #16
    for (i = 0; i < times; ++i) {
  41f554:	2c20      	cmp	r4, #32
  41f556:	d016      	beq.n	41f586 <.LVL34+0xc>
  41f558:	eb0d 0504 	add.w	r5, sp, r4
        CRYPT_SHA512_DataAdd(&sha, (byte*)test_sha[i].input,(word32)test_sha[i].inLen);
  41f55c:	68aa      	ldr	r2, [r5, #8]
  41f55e:	f85d 1004 	ldr.w	r1, [sp, r4]
  41f562:	a818      	add	r0, sp, #96	; 0x60
  41f564:	f002 fd56 	bl	422014 <.LFE14>

0041f568 <.LVL32>:
        CRYPT_SHA512_Finalize(&sha, hash);
  41f568:	a908      	add	r1, sp, #32
  41f56a:	a818      	add	r0, sp, #96	; 0x60
  41f56c:	f002 fd5e 	bl	42202c <.LFE16>

0041f570 <.LVL33>:
        if (memcmp(hash, test_sha[i].output, SHA512_DIGEST_SIZE) == 0)
  41f570:	2240      	movs	r2, #64	; 0x40
  41f572:	6869      	ldr	r1, [r5, #4]
  41f574:	a808      	add	r0, sp, #32
  41f576:	f000 ff7b 	bl	420470 <memcmp>

0041f57a <.LVL34>:
  41f57a:	2800      	cmp	r0, #0
  41f57c:	d1e9      	bne.n	41f552 <.LVL31>
            appData.sha512_test_result--;
  41f57e:	6973      	ldr	r3, [r6, #20]
  41f580:	3b01      	subs	r3, #1
  41f582:	6173      	str	r3, [r6, #20]
  41f584:	e7e5      	b.n	41f552 <.LVL31>
}
  41f586:	b060      	add	sp, #384	; 0x180

0041f588 <.LCFI18>:
  41f588:	bd70      	pop	{r4, r5, r6, pc}
  41f58a:	bf00      	nop
  41f58c:	0040da54 	.word	0x0040da54
  41f590:	2040d534 	.word	0x2040d534

Disassembly of section .text.StoreECC_DSA_Sig%209:

0041f594 <StoreECC_DSA_Sig>:

#ifdef HAVE_ECC

/* Der Encode r & s ints into out, outLen is (in/out) size */
int StoreECC_DSA_Sig(byte* out, word32* outLen, mp_int* r, mp_int* s)
{
  41f594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

0041f598 <.LCFI148>:
  41f598:	4607      	mov	r7, r0
  41f59a:	4688      	mov	r8, r1
  41f59c:	4615      	mov	r5, r2
  41f59e:	461e      	mov	r6, r3

0041f5a0 <.LVL1187>:
    int    rSz;                           /* encoding size */
    int    sSz;
    word32 headerSz = 4;   /* 2*ASN_TAG + 2*LEN(ENUM) */

    /* If the leading bit on the INTEGER is a 1, add a leading zero */
    int rLeadingZero = mp_leading_bit(r);
  41f5a0:	4610      	mov	r0, r2

0041f5a2 <.LVL1188>:
  41f5a2:	f002 fff3 	bl	42258c <.LFE96>

0041f5a6 <.LVL1189>:
  41f5a6:	4604      	mov	r4, r0

0041f5a8 <.LVL1190>:
    int sLeadingZero = mp_leading_bit(s);
  41f5a8:	4630      	mov	r0, r6

0041f5aa <.LVL1191>:
  41f5aa:	f002 ffef 	bl	42258c <.LFE96>

0041f5ae <.LVL1192>:
  41f5ae:	4681      	mov	r9, r0

0041f5b0 <.LVL1193>:
    int rLen = mp_unsigned_bin_size(r);   /* big int size */
  41f5b0:	4628      	mov	r0, r5

0041f5b2 <.LVL1194>:
  41f5b2:	f002 ffd3 	bl	42255c <.LFE82>

0041f5b6 <.LVL1195>:
  41f5b6:	4682      	mov	sl, r0

0041f5b8 <.LVL1196>:
    int sLen = mp_unsigned_bin_size(s);
  41f5b8:	4630      	mov	r0, r6

0041f5ba <.LVL1197>:
  41f5ba:	f002 ffcf 	bl	42255c <.LFE82>

0041f5be <.LVL1198>:

    if (*outLen < (rLen + rLeadingZero + sLen + sLeadingZero +
  41f5be:	4454      	add	r4, sl

0041f5c0 <.LVL1199>:
  41f5c0:	4404      	add	r4, r0
  41f5c2:	eb04 0309 	add.w	r3, r4, r9
  41f5c6:	1d18      	adds	r0, r3, #4

0041f5c8 <.LVL1200>:
                   headerSz + 2))  /* SEQ_TAG + LEN(ENUM) */
  41f5c8:	3306      	adds	r3, #6
    if (*outLen < (rLen + rLeadingZero + sLen + sLeadingZero +
  41f5ca:	f8d8 2000 	ldr.w	r2, [r8]
  41f5ce:	429a      	cmp	r2, r3
  41f5d0:	d31a      	bcc.n	41f608 <.LVL1211>
        return BUFFER_E;

    idx = SetSequence(rLen + rLeadingZero + sLen+sLeadingZero + headerSz, out);
  41f5d2:	4639      	mov	r1, r7
  41f5d4:	f002 fe2a 	bl	42222c <.LFE94>

0041f5d8 <.LVL1201>:
  41f5d8:	4604      	mov	r4, r0

0041f5da <.LVL1202>:

    /* store r */
    rSz = SetASNIntMP(r, -1, &out[idx]);
  41f5da:	183a      	adds	r2, r7, r0
  41f5dc:	f04f 31ff 	mov.w	r1, #4294967295
  41f5e0:	4628      	mov	r0, r5

0041f5e2 <.LVL1203>:
  41f5e2:	f000 fa69 	bl	41fab8 <SetASNIntMP>

0041f5e6 <.LVL1204>:
    if (rSz < 0)
  41f5e6:	2800      	cmp	r0, #0
  41f5e8:	db10      	blt.n	41f60c <.LVL1212>
        return rSz;
    idx += rSz;
  41f5ea:	4404      	add	r4, r0

    /* store s */
    sSz = SetASNIntMP(s, -1, &out[idx]);
  41f5ec:	193a      	adds	r2, r7, r4
  41f5ee:	f04f 31ff 	mov.w	r1, #4294967295
  41f5f2:	4630      	mov	r0, r6

0041f5f4 <.LVL1206>:
  41f5f4:	f000 fa60 	bl	41fab8 <SetASNIntMP>

0041f5f8 <.LVL1207>:
    if (sSz < 0)
  41f5f8:	2800      	cmp	r0, #0
  41f5fa:	db07      	blt.n	41f60c <.LVL1212>

0041f5fc <.LVL1208>:
        return sSz;
    idx += sSz;
  41f5fc:	4420      	add	r0, r4

0041f5fe <.LVL1209>:

    *outLen = idx;
  41f5fe:	f8c8 0000 	str.w	r0, [r8]

    return 0;
  41f602:	2000      	movs	r0, #0

0041f604 <.LVL1210>:
  41f604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0041f608 <.LVL1211>:
        return BUFFER_E;
  41f608:	f06f 0083 	mvn.w	r0, #131	; 0x83

0041f60c <.LVL1212>:
}
  41f60c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

Disassembly of section .text.frexp%210:

0041f610 <frexp>:
  41f610:	b430      	push	{r4, r5}

0041f612 <.LCFI0>:
  41f612:	b082      	sub	sp, #8

0041f614 <.LCFI1>:
  41f614:	ed8d 0b00 	vstr	d0, [sp]

0041f618 <.LBB2>:
  41f618:	9b01      	ldr	r3, [sp, #4]

0041f61a <.LBE2>:
  41f61a:	4c1b      	ldr	r4, [pc, #108]	; (41f688 <.LVL14+0x12>)

0041f61c <.LBB3>:
  41f61c:	9d00      	ldr	r5, [sp, #0]

0041f61e <.LBE3>:
  41f61e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000

0041f622 <.LVL3>:
  41f622:	2200      	movs	r2, #0
  41f624:	42a1      	cmp	r1, r4
  41f626:	6002      	str	r2, [r0, #0]
  41f628:	dc17      	bgt.n	41f65a <.LBE6+0x4>
  41f62a:	ea55 0401 	orrs.w	r4, r5, r1
  41f62e:	d014      	beq.n	41f65a <.LBE6+0x4>
  41f630:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  41f634:	db16      	blt.n	41f664 <.LCFI4>
  41f636:	4615      	mov	r5, r2

0041f638 <.LVL4>:
  41f638:	f023 44ff 	bic.w	r4, r3, #2139095040	; 0x7f800000
  41f63c:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000

0041f640 <.LBB4>:
  41f640:	e9dd 2300 	ldrd	r2, r3, [sp]
  41f644:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000

0041f648 <.LBE4>:
  41f648:	1509      	asrs	r1, r1, #20

0041f64a <.LBB5>:
  41f64a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000

0041f64e <.LBE5>:
  41f64e:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe

0041f652 <.LBB6>:
  41f652:	e9cd 2300 	strd	r2, r3, [sp]

0041f656 <.LBE6>:
  41f656:	4429      	add	r1, r5
  41f658:	6001      	str	r1, [r0, #0]
  41f65a:	ed9d 0b00 	vldr	d0, [sp]
  41f65e:	b002      	add	sp, #8

0041f660 <.LCFI2>:
  41f660:	bc30      	pop	{r4, r5}

0041f662 <.LCFI3>:
  41f662:	4770      	bx	lr

0041f664 <.LCFI4>:
  41f664:	ed9f 7b06 	vldr	d7, [pc, #24]	; 41f680 <.LVL14+0xa>
  41f668:	ee20 7b07 	vmul.f64	d7, d0, d7
  41f66c:	ed8d 7b00 	vstr	d7, [sp]

0041f670 <.LBB7>:
  41f670:	9b01      	ldr	r3, [sp, #4]

0041f672 <.LBE7>:
  41f672:	f06f 0535 	mvn.w	r5, #53	; 0x35

0041f676 <.LVL14>:
  41f676:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
  41f67a:	e7dd      	b.n	41f638 <.LVL4>
  41f67c:	f3af 8000 	nop.w
  41f680:	00000000 	.word	0x00000000
  41f684:	43500000 	.word	0x43500000
  41f688:	7fefffff 	.word	0x7fefffff

Disassembly of section .text.deflateReset%211:

0041f68c <deflateReset>:
{
  41f68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041f68e <.LCFI16>:
  41f68e:	4604      	mov	r4, r0
    ret = deflateResetKeep(strm);
  41f690:	f7ff fec4 	bl	41f41c <.LFE43>

0041f694 <.LVL284>:
    if (ret == Z_OK)
  41f694:	4606      	mov	r6, r0
  41f696:	b108      	cbz	r0, 41f69c <.LVL286>

0041f698 <.LVL285>:
}
  41f698:	4630      	mov	r0, r6
  41f69a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041f69c <.LVL286>:
        lm_init(strm->state);
  41f69c:	69e4      	ldr	r4, [r4, #28]

0041f69e <.LBB28>:
    s->window_size = (ulg)2L*s->w_size;
  41f69e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  41f6a0:	005b      	lsls	r3, r3, #1
  41f6a2:	63e3      	str	r3, [r4, #60]	; 0x3c
    CLEAR_HASH(s);
  41f6a4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
  41f6a8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  41f6aa:	4413      	add	r3, r2
  41f6ac:	6c61      	ldr	r1, [r4, #68]	; 0x44
  41f6ae:	2500      	movs	r5, #0
  41f6b0:	f821 5013 	strh.w	r5, [r1, r3, lsl #1]
  41f6b4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  41f6b6:	441a      	add	r2, r3
  41f6b8:	0052      	lsls	r2, r2, #1
  41f6ba:	4629      	mov	r1, r5
  41f6bc:	6c60      	ldr	r0, [r4, #68]	; 0x44

0041f6be <.LVL288>:
  41f6be:	f7fe ff2b 	bl	41e518 <.LFE14>

0041f6c2 <.LVL289>:
    s->max_lazy_match   = configuration_table[s->level].max_lazy;
  41f6c2:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  41f6c6:	4b0e      	ldr	r3, [pc, #56]	; (41f700 <.LBE28+0x2>)
  41f6c8:	0042      	lsls	r2, r0, #1
  41f6ca:	1811      	adds	r1, r2, r0
  41f6cc:	0089      	lsls	r1, r1, #2
  41f6ce:	185f      	adds	r7, r3, r1
  41f6d0:	f8b7 e002 	ldrh.w	lr, [r7, #2]
  41f6d4:	f8c4 e080 	str.w	lr, [r4, #128]	; 0x80
    s->good_match       = configuration_table[s->level].good_length;
  41f6d8:	5a59      	ldrh	r1, [r3, r1]
  41f6da:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    s->nice_match       = configuration_table[s->level].nice_length;
  41f6de:	88b9      	ldrh	r1, [r7, #4]
  41f6e0:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    s->max_chain_length = configuration_table[s->level].max_chain;
  41f6e4:	88fb      	ldrh	r3, [r7, #6]
  41f6e6:	67e3      	str	r3, [r4, #124]	; 0x7c
    s->strstart = 0;
  41f6e8:	66e5      	str	r5, [r4, #108]	; 0x6c
    s->block_start = 0L;
  41f6ea:	65e5      	str	r5, [r4, #92]	; 0x5c
    s->lookahead = 0;
  41f6ec:	6765      	str	r5, [r4, #116]	; 0x74
    s->insert = 0;
  41f6ee:	f241 63b4 	movw	r3, #5812	; 0x16b4
  41f6f2:	50e5      	str	r5, [r4, r3]
    s->match_length = s->prev_length = MIN_MATCH-1;
  41f6f4:	2302      	movs	r3, #2
  41f6f6:	67a3      	str	r3, [r4, #120]	; 0x78
  41f6f8:	6623      	str	r3, [r4, #96]	; 0x60
    s->match_available = 0;
  41f6fa:	66a5      	str	r5, [r4, #104]	; 0x68
    s->ins_h = 0;
  41f6fc:	64a5      	str	r5, [r4, #72]	; 0x48

0041f6fe <.LBE28>:
    return ret;
  41f6fe:	e7cb      	b.n	41f698 <.LVL285>
  41f700:	0041f704 	.word	0x0041f704

Disassembly of section .rodata.configuration_table%212:

0041f704 <configuration_table>:
	...
  41f70c:	0041a5b5 00040004 00040008 00417431     ..A.........1tA.
  41f71c:	00050004 00080010 00417431 00060004     ........1tA.....
  41f72c:	00200020 00417431 00040004 00100010      . .1tA.........
  41f73c:	00415459 00100008 00200020 00415459     YTA..... . .YTA.
  41f74c:	00100008 00800080 00415459 00200008     ........YTA... .
  41f75c:	01000080 00415459 00800020 04000102     ....YTA. .......
  41f76c:	00415459 01020020 10000102 00415459     YTA. .......YTA.

Disassembly of section .rodata.base_dist%213:

0041f77c <base_dist>:
  41f77c:	00000000 00000001 00000002 00000003     ................
  41f78c:	00000004 00000006 00000008 0000000c     ................
  41f79c:	00000010 00000018 00000020 00000030     ........ ...0...
  41f7ac:	00000040 00000060 00000080 000000c0     @...`...........
  41f7bc:	00000100 00000180 00000200 00000300     ................
  41f7cc:	00000400 00000600 00000800 00000c00     ................
  41f7dc:	00001000 00001800 00002000 00003000     ......... ...0..
  41f7ec:	00004000 00006000                       .@...`..

Disassembly of section .rodata.extra_dbits%214:

0041f7f4 <extra_dbits>:
	...
  41f804:	00000001 00000001 00000002 00000002     ................
  41f814:	00000003 00000003 00000004 00000004     ................
  41f824:	00000005 00000005 00000006 00000006     ................
  41f834:	00000007 00000007 00000008 00000008     ................
  41f844:	00000009 00000009 0000000a 0000000a     ................
  41f854:	0000000b 0000000b 0000000c 0000000c     ................
  41f864:	0000000d 0000000d                       ........

Disassembly of section .rodata.static_dtree%215:

0041f86c <static_dtree>:
  41f86c:	00050000 00050010 00050008 00050018     ................
  41f87c:	00050004 00050014 0005000c 0005001c     ................
  41f88c:	00050002 00050012 0005000a 0005001a     ................
  41f89c:	00050006 00050016 0005000e 0005001e     ................
  41f8ac:	00050001 00050011 00050009 00050019     ................
  41f8bc:	00050005 00050015 0005000d 0005001d     ................
  41f8cc:	00050003 00050013 0005000b 0005001b     ................
  41f8dc:	00050007 00050017                       ........

Disassembly of section .text.wc_Des3_SetKey%216:

0041f8e4 <wc_Des3_SetKey>:
    {
  41f8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041f8e6 <.LCFI18>:
        if (des == NULL || key == NULL || dir < 0) {
  41f8e6:	460f      	mov	r7, r1
  41f8e8:	fab1 f181 	clz	r1, r1

0041f8ec <.LVL259>:
  41f8ec:	0949      	lsrs	r1, r1, #5
  41f8ee:	ea51 71d3 	orrs.w	r1, r1, r3, lsr #31
  41f8f2:	d12f      	bne.n	41f954 <.LVL271>
  41f8f4:	b370      	cbz	r0, 41f954 <.LVL271>
  41f8f6:	461c      	mov	r4, r3
  41f8f8:	4616      	mov	r6, r2
  41f8fa:	4605      	mov	r5, r0
        ret = DesSetKey(key + (dir == DES_ENCRYPTION ? 0:16), dir, des->key[0]);
  41f8fc:	2b00      	cmp	r3, #0
  41f8fe:	bf0c      	ite	eq
  41f900:	2000      	moveq	r0, #0

0041f902 <.LVL260>:
  41f902:	2010      	movne	r0, #16
  41f904:	462a      	mov	r2, r5

0041f906 <.LVL261>:
  41f906:	4619      	mov	r1, r3
  41f908:	4438      	add	r0, r7
  41f90a:	f7fa fcf7 	bl	41a2fc <.LFE179>

0041f90e <.LVL262>:
        if (ret != 0)
  41f90e:	4603      	mov	r3, r0
  41f910:	b108      	cbz	r0, 41f916 <.LVL264>

0041f912 <.LVL263>:
    }
  41f912:	4618      	mov	r0, r3
  41f914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041f916 <.LVL264>:
        ret = DesSetKey(key + 8, !dir, des->key[1]);
  41f916:	f105 0280 	add.w	r2, r5, #128	; 0x80
  41f91a:	fab4 f184 	clz	r1, r4
  41f91e:	0949      	lsrs	r1, r1, #5
  41f920:	f107 0008 	add.w	r0, r7, #8

0041f924 <.LVL265>:
  41f924:	f7fa fcea 	bl	41a2fc <.LFE179>

0041f928 <.LVL266>:
        if (ret != 0)
  41f928:	4603      	mov	r3, r0
  41f92a:	2800      	cmp	r0, #0
  41f92c:	d1f1      	bne.n	41f912 <.LVL263>
        ret = DesSetKey(key + (dir == DES_DECRYPTION ? 0:16), dir, des->key[2]);
  41f92e:	2c01      	cmp	r4, #1
  41f930:	bf0c      	ite	eq
  41f932:	2000      	moveq	r0, #0

0041f934 <.LVL267>:
  41f934:	2010      	movne	r0, #16
  41f936:	f505 7280 	add.w	r2, r5, #256	; 0x100
  41f93a:	4621      	mov	r1, r4
  41f93c:	4438      	add	r0, r7
  41f93e:	f7fa fcdd 	bl	41a2fc <.LFE179>

0041f942 <.LVL268>:
        if (ret != 0)
  41f942:	4603      	mov	r3, r0
  41f944:	2800      	cmp	r0, #0
  41f946:	d1e4      	bne.n	41f912 <.LVL263>
        return wc_Des3_SetIV(des, iv);
  41f948:	4631      	mov	r1, r6
  41f94a:	4628      	mov	r0, r5

0041f94c <.LVL269>:
  41f94c:	f002 f82c 	bl	4219a8 <.LFE106>

0041f950 <.LVL270>:
  41f950:	4603      	mov	r3, r0
  41f952:	e7de      	b.n	41f912 <.LVL263>

0041f954 <.LVL271>:
            return BAD_FUNC_ARG;
  41f954:	f06f 03ac 	mvn.w	r3, #172	; 0xac

0041f958 <.LVL272>:
  41f958:	e7db      	b.n	41f912 <.LVL263>

Disassembly of section .text.CLK_Initialize%217:

0041f95c <CLK_Initialize>:
Clock Initialize
*********************************************************************************/
void CLK_Initialize( void )
{
    /* Set Flash Wait States and  Enable Code Loop Optimization */
    EFC_REGS->EEFC_FMR = EEFC_FMR_FWS(6) | EEFC_FMR_CLOE_Msk;
  41f95c:	4a17      	ldr	r2, [pc, #92]	; (41f9bc <.LBE8+0xa>)
  41f95e:	4b18      	ldr	r3, [pc, #96]	; (41f9c0 <.LBE8+0xe>)
  41f960:	601a      	str	r2, [r3, #0]

0041f962 <.LBB6>:
    PMC_REGS->CKGR_PLLAR = CKGR_PLLAR_ONE_Msk | CKGR_PLLAR_PLLACOUNT(0x3f) |
  41f962:	4a18      	ldr	r2, [pc, #96]	; (41f9c4 <.LBE8+0x12>)
  41f964:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  41f968:	629a      	str	r2, [r3, #40]	; 0x28
    while ( (PMC_REGS->PMC_SR & PMC_SR_LOCKA_Msk) != PMC_SR_LOCKA_Msk);
  41f96a:	461a      	mov	r2, r3
  41f96c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  41f96e:	f013 0f02 	tst.w	r3, #2
  41f972:	d0fb      	beq.n	41f96c <.LBB6+0xa>

0041f974 <.LBB8>:
    PMC_REGS->PMC_MCKR = (PMC_REGS->PMC_MCKR & ~PMC_MCKR_PRES_Msk) | PMC_MCKR_PRES_CLK_1;
  41f974:	4a14      	ldr	r2, [pc, #80]	; (41f9c8 <.LBE8+0x16>)
  41f976:	6b13      	ldr	r3, [r2, #48]	; 0x30
  41f978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  41f97c:	6313      	str	r3, [r2, #48]	; 0x30
    while ((PMC_REGS->PMC_SR & PMC_SR_MCKRDY_Msk) != PMC_SR_MCKRDY_Msk);
  41f97e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  41f980:	f013 0f08 	tst.w	r3, #8
  41f984:	d0fb      	beq.n	41f97e <.LBB8+0xa>
    PMC_REGS->PMC_MCKR = (PMC_REGS->PMC_MCKR & ~PMC_MCKR_MDIV_Msk) | PMC_MCKR_MDIV_PCK_DIV2;
  41f986:	4a10      	ldr	r2, [pc, #64]	; (41f9c8 <.LBE8+0x16>)
  41f988:	6b13      	ldr	r3, [r2, #48]	; 0x30
  41f98a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  41f98e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  41f992:	6313      	str	r3, [r2, #48]	; 0x30
    while ((PMC_REGS->PMC_SR & PMC_SR_MCKRDY_Msk) != PMC_SR_MCKRDY_Msk);
  41f994:	6e93      	ldr	r3, [r2, #104]	; 0x68
  41f996:	f013 0f08 	tst.w	r3, #8
  41f99a:	d0fb      	beq.n	41f994 <.LBB8+0x20>
    PMC_REGS->PMC_MCKR = (PMC_REGS->PMC_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_PLLA_CLK;
  41f99c:	4a0a      	ldr	r2, [pc, #40]	; (41f9c8 <.LBE8+0x16>)
  41f99e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  41f9a0:	f023 0303 	bic.w	r3, r3, #3
  41f9a4:	f043 0302 	orr.w	r3, r3, #2
  41f9a8:	6313      	str	r3, [r2, #48]	; 0x30
    while ((PMC_REGS->PMC_SR & PMC_SR_MCKRDY_Msk) != PMC_SR_MCKRDY_Msk);
  41f9aa:	6e93      	ldr	r3, [r2, #104]	; 0x68
  41f9ac:	f013 0f08 	tst.w	r3, #8
  41f9b0:	d0fb      	beq.n	41f9aa <.LBB8+0x36>

0041f9b2 <.LBE8>:




    /* Enable Peripheral Clock */
    PMC_REGS->PMC_PCER0=0x835c00;
  41f9b2:	4a06      	ldr	r2, [pc, #24]	; (41f9cc <.LBE8+0x1a>)
  41f9b4:	4b04      	ldr	r3, [pc, #16]	; (41f9c8 <.LBE8+0x16>)
  41f9b6:	611a      	str	r2, [r3, #16]
  41f9b8:	4770      	bx	lr
  41f9ba:	bf00      	nop
  41f9bc:	04000600 	.word	0x04000600
  41f9c0:	400e0c00 	.word	0x400e0c00
  41f9c4:	20183f01 	.word	0x20183f01
  41f9c8:	400e0600 	.word	0x400e0600
  41f9cc:	00835c00 	.word	0x00835c00

Disassembly of section .rodata.base_length%218:

0041f9d0 <base_length>:
  41f9d0:	00000000 00000001 00000002 00000003     ................
  41f9e0:	00000004 00000005 00000006 00000007     ................
  41f9f0:	00000008 0000000a 0000000c 0000000e     ................
  41fa00:	00000010 00000014 00000018 0000001c     ................
  41fa10:	00000020 00000028 00000030 00000038      ...(...0...8...
  41fa20:	00000040 00000050 00000060 00000070     @...P...`...p...
  41fa30:	00000080 000000a0 000000c0 000000e0     ................
  41fa40:	00000000                                ....

Disassembly of section .rodata.extra_lbits%219:

0041fa44 <extra_lbits>:
	...
  41fa64:	00000001 00000001 00000001 00000001     ................
  41fa74:	00000002 00000002 00000002 00000002     ................
  41fa84:	00000003 00000003 00000003 00000003     ................
  41fa94:	00000004 00000004 00000004 00000004     ................
  41faa4:	00000005 00000005 00000005 00000005     ................
  41fab4:	00000000                                ....

Disassembly of section .text.SetASNIntMP%220:

0041fab8 <SetASNIntMP>:
{
  41fab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0041fabc <.LCFI105>:
  41fabc:	4606      	mov	r6, r0
  41fabe:	460f      	mov	r7, r1
  41fac0:	4615      	mov	r5, r2

0041fac2 <.LVL552>:
    leadingBit = mp_leading_bit(n);
  41fac2:	f002 fd63 	bl	42258c <.LFE96>

0041fac6 <.LVL553>:
  41fac6:	4680      	mov	r8, r0

0041fac8 <.LVL554>:
    length = mp_unsigned_bin_size(n);
  41fac8:	4630      	mov	r0, r6

0041faca <.LVL555>:
  41faca:	f002 fd47 	bl	42255c <.LFE82>

0041face <.LVL556>:
  41face:	4604      	mov	r4, r0

0041fad0 <.LVL557>:
    idx = SetASNInt(length, leadingBit ? 0x80 : 0x00, output);
  41fad0:	f1b8 0f00 	cmp.w	r8, #0
  41fad4:	d11d      	bne.n	41fb12 <.LBB177>

0041fad6 <.LBB174>:
    output[idx++] = ASN_INTEGER;
  41fad6:	4629      	mov	r1, r5
  41fad8:	2302      	movs	r3, #2
  41fada:	f801 3b01 	strb.w	r3, [r1], #1
    idx += SetLength(len, output + idx);
  41fade:	f000 fe68 	bl	4207b2 <.LFE30>

0041fae2 <.LVL559>:
  41fae2:	1c41      	adds	r1, r0, #1

0041fae4 <.LVL560>:
    return idx;
  41fae4:	4688      	mov	r8, r1

0041fae6 <.LBE174>:
    if (maxSz >= 0 && (idx + length) > maxSz)
  41fae6:	2f00      	cmp	r7, #0
  41fae8:	db02      	blt.n	41faf0 <.LBE174+0xa>
  41faea:	1863      	adds	r3, r4, r1
  41faec:	429f      	cmp	r7, r3
  41faee:	db08      	blt.n	41fb02 <.LVL564>
    err = mp_to_unsigned_bin(n, output + idx);
  41faf0:	4429      	add	r1, r5
  41faf2:	4630      	mov	r0, r6
  41faf4:	f002 fccc 	bl	422490 <.LFE73>

0041faf8 <.LVL562>:
    if (err != MP_OKAY)
  41faf8:	b938      	cbnz	r0, 41fb0a <.LVL565>
    idx += length;
  41fafa:	eb04 0008 	add.w	r0, r4, r8

0041fafe <.LVL563>:
    return idx;
  41fafe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041fb02 <.LVL564>:
        return BUFFER_E;
  41fb02:	f06f 0083 	mvn.w	r0, #131	; 0x83
  41fb06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041fb0a <.LVL565>:
        return MP_TO_E;
  41fb0a:	f06f 0070 	mvn.w	r0, #112	; 0x70

0041fb0e <.LVL566>:
  41fb0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041fb12 <.LBB177>:
    output[idx++] = ASN_INTEGER;
  41fb12:	4629      	mov	r1, r5
  41fb14:	2302      	movs	r3, #2
  41fb16:	f801 3b01 	strb.w	r3, [r1], #1

0041fb1a <.LVL568>:
    idx += SetLength(len, output + idx);
  41fb1a:	3001      	adds	r0, #1

0041fb1c <.LVL569>:
  41fb1c:	f000 fe49 	bl	4207b2 <.LFE30>

0041fb20 <.LVL570>:
        output[idx++] = 0x00;
  41fb20:	1c81      	adds	r1, r0, #2

0041fb22 <.LVL571>:
  41fb22:	4428      	add	r0, r5
  41fb24:	2300      	movs	r3, #0
  41fb26:	7043      	strb	r3, [r0, #1]
  41fb28:	e7dc      	b.n	41fae4 <.LVL560>

Disassembly of section .text.RsaMGF%221:

0041fb2a <RsaMGF>:
{
  41fb2a:	b500      	push	{lr}

0041fb2c <.LCFI6>:
  41fb2c:	b083      	sub	sp, #12

0041fb2e <.LCFI7>:
    switch(type) {
  41fb2e:	3801      	subs	r0, #1

0041fb30 <.LVL39>:
  41fb30:	2819      	cmp	r0, #25
  41fb32:	d830      	bhi.n	41fb96 <.LVL48>
  41fb34:	e8df f000 	tbb	[pc, r0]
  41fb38:	2f271f17 	.word	0x2f271f17
  41fb3c:	2f2f2f2f 	.word	0x2f2f2f2f
  41fb40:	2f2f2f2f 	.word	0x2f2f2f2f
  41fb44:	2f2f2f2f 	.word	0x2f2f2f2f
  41fb48:	2f2f2f2f 	.word	0x2f2f2f2f
  41fb4c:	2f2f2f2f 	.word	0x2f2f2f2f
  41fb50:	0d2f      	.short	0x0d2f
            ret = RsaMGF1(WC_HASH_TYPE_SHA, seed, seedSz, out, outSz, heap);
  41fb52:	9805      	ldr	r0, [sp, #20]

0041fb54 <.LVL40>:
  41fb54:	9001      	str	r0, [sp, #4]
  41fb56:	9804      	ldr	r0, [sp, #16]
  41fb58:	9000      	str	r0, [sp, #0]
  41fb5a:	2004      	movs	r0, #4
  41fb5c:	f7fc f968 	bl	41be30 <.LFE18>

0041fb60 <.LVL41>:
}
  41fb60:	b003      	add	sp, #12

0041fb62 <.LCFI8>:
  41fb62:	f85d fb04 	ldr.w	pc, [sp], #4

0041fb66 <.LCFI9>:
            ret = RsaMGF1(WC_HASH_TYPE_SHA256, seed, seedSz, out, outSz, heap);
  41fb66:	9805      	ldr	r0, [sp, #20]
  41fb68:	9001      	str	r0, [sp, #4]
  41fb6a:	9804      	ldr	r0, [sp, #16]
  41fb6c:	9000      	str	r0, [sp, #0]
  41fb6e:	2005      	movs	r0, #5
  41fb70:	f7fc f95e 	bl	41be30 <.LFE18>

0041fb74 <.LVL43>:
            break;
  41fb74:	e7f4      	b.n	41fb60 <.LVL41>

0041fb76 <.LVL44>:
            ret = RsaMGF1(WC_HASH_TYPE_SHA384, seed, seedSz, out, outSz, heap);
  41fb76:	9805      	ldr	r0, [sp, #20]
  41fb78:	9001      	str	r0, [sp, #4]
  41fb7a:	9804      	ldr	r0, [sp, #16]
  41fb7c:	9000      	str	r0, [sp, #0]
  41fb7e:	2006      	movs	r0, #6
  41fb80:	f7fc f956 	bl	41be30 <.LFE18>

0041fb84 <.LVL45>:
            break;
  41fb84:	e7ec      	b.n	41fb60 <.LVL41>

0041fb86 <.LVL46>:
            ret = RsaMGF1(WC_HASH_TYPE_SHA512, seed, seedSz, out, outSz, heap);
  41fb86:	9805      	ldr	r0, [sp, #20]
  41fb88:	9001      	str	r0, [sp, #4]
  41fb8a:	9804      	ldr	r0, [sp, #16]
  41fb8c:	9000      	str	r0, [sp, #0]
  41fb8e:	2007      	movs	r0, #7
  41fb90:	f7fc f94e 	bl	41be30 <.LFE18>

0041fb94 <.LVL47>:
            break;
  41fb94:	e7e4      	b.n	41fb60 <.LVL41>

0041fb96 <.LVL48>:
            ret = BAD_FUNC_ARG;
  41fb96:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041fb9a <.LVL49>:
    return ret;
  41fb9a:	e7e1      	b.n	41fb60 <.LVL41>

Disassembly of section .text.wc_ecc_set_curve%222:

0041fb9c <wc_ecc_set_curve>:
{
  41fb9c:	b470      	push	{r4, r5, r6}

0041fb9e <.LCFI8>:
    if (keysize <= 0 && curve_id < 0) {
  41fb9e:	460e      	mov	r6, r1
  41fba0:	2900      	cmp	r1, #0
  41fba2:	dc01      	bgt.n	41fba8 <.LCFI8+0xa>
  41fba4:	2a00      	cmp	r2, #0
  41fba6:	db23      	blt.n	41fbf0 <.LBE18>
    if (keysize > ECC_MAXSIZE) {
  41fba8:	2e42      	cmp	r6, #66	; 0x42
  41fbaa:	dc24      	bgt.n	41fbf6 <.LVL81>
    if (key->idx != ECC_CUSTOM_IDX) {
  41fbac:	6843      	ldr	r3, [r0, #4]
  41fbae:	f1b3 3fff 	cmp.w	r3, #4294967295
  41fbb2:	d023      	beq.n	41fbfc <.LVL83>

0041fbb4 <.LBB17>:
        key->idx = 0;
  41fbb4:	2100      	movs	r1, #0

0041fbb6 <.LVL68>:
  41fbb6:	6041      	str	r1, [r0, #4]
        key->dp = NULL;
  41fbb8:	6101      	str	r1, [r0, #16]

0041fbba <.LVL69>:
  41fbba:	4b13      	ldr	r3, [pc, #76]	; (41fc08 <.LVL86+0x4>)
  41fbbc:	240e      	movs	r4, #14
  41fbbe:	e005      	b.n	41fbcc <.LVL70+0xc>

0041fbc0 <.LVL70>:
            else if (keysize <= ecc_sets[x].size) {
  41fbc0:	42a6      	cmp	r6, r4
  41fbc2:	dd08      	ble.n	41fbd6 <.LVL70+0x16>
        for (x = 0; ecc_sets[x].size != 0; x++) {
  41fbc4:	3101      	adds	r1, #1
  41fbc6:	f853 4f34 	ldr.w	r4, [r3, #52]!
  41fbca:	b174      	cbz	r4, 41fbea <.LBB18>
            if (curve_id > ECC_CURVE_DEF) {
  41fbcc:	2a00      	cmp	r2, #0
  41fbce:	ddf7      	ble.n	41fbc0 <.LVL70>
                if (curve_id == ecc_sets[x].id)
  41fbd0:	685d      	ldr	r5, [r3, #4]
  41fbd2:	42aa      	cmp	r2, r5
  41fbd4:	d1f6      	bne.n	41fbc4 <.LVL70+0x4>
        if (ecc_sets[x].size == 0) {
  41fbd6:	b19c      	cbz	r4, 41fc00 <.LBB19>
        key->idx = x;
  41fbd8:	6041      	str	r1, [r0, #4]
        key->dp  = &ecc_sets[x];
  41fbda:	2234      	movs	r2, #52	; 0x34

0041fbdc <.LVL73>:
  41fbdc:	4b0a      	ldr	r3, [pc, #40]	; (41fc08 <.LVL86+0x4>)
  41fbde:	fb02 3101 	mla	r1, r2, r1, r3

0041fbe2 <.LVL74>:
  41fbe2:	6101      	str	r1, [r0, #16]

0041fbe4 <.LBE17>:
    return 0;
  41fbe4:	2000      	movs	r0, #0

0041fbe6 <.LVL75>:
}
  41fbe6:	bc70      	pop	{r4, r5, r6}

0041fbe8 <.LCFI9>:
  41fbe8:	4770      	bx	lr

0041fbea <.LBB18>:
            return ECC_CURVE_OID_E;
  41fbea:	f06f 00ab 	mvn.w	r0, #171	; 0xab

0041fbee <.LVL78>:
  41fbee:	e7fa      	b.n	41fbe6 <.LVL75>

0041fbf0 <.LBE18>:
        return BAD_FUNC_ARG;
  41fbf0:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041fbf4 <.LVL80>:
  41fbf4:	e7f7      	b.n	41fbe6 <.LVL75>

0041fbf6 <.LVL81>:
        return ECC_BAD_ARG_E;
  41fbf6:	f06f 00a9 	mvn.w	r0, #169	; 0xa9

0041fbfa <.LVL82>:
  41fbfa:	e7f4      	b.n	41fbe6 <.LVL75>

0041fbfc <.LVL83>:
    return 0;
  41fbfc:	2000      	movs	r0, #0

0041fbfe <.LVL84>:
  41fbfe:	e7f2      	b.n	41fbe6 <.LVL75>

0041fc00 <.LBB19>:
            return ECC_CURVE_OID_E;
  41fc00:	f06f 00ab 	mvn.w	r0, #171	; 0xab

0041fc04 <.LVL86>:
  41fc04:	e7ef      	b.n	41fbe6 <.LVL75>
  41fc06:	bf00      	nop
  41fc08:	004185e0 	.word	0x004185e0

Disassembly of section .text.wc_ecc_shared_secret%223:

0041fc0c <wc_ecc_shared_secret>:
   if (private_key == NULL || public_key == NULL || out == NULL ||
  41fc0c:	2800      	cmp	r0, #0
  41fc0e:	d032      	beq.n	41fc76 <.LCFI64>
{
  41fc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0041fc12 <.LCFI63>:
  41fc12:	4605      	mov	r5, r0
   if (private_key == NULL || public_key == NULL || out == NULL ||
  41fc14:	b1e9      	cbz	r1, 41fc52 <.LVL846>
  41fc16:	b1fa      	cbz	r2, 41fc58 <.LVL848>
  41fc18:	b1f3      	cbz	r3, 41fc58 <.LVL848>
   if (private_key->type != ECC_PRIVATEKEY) {
  41fc1a:	6800      	ldr	r0, [r0, #0]

0041fc1c <.LVL842>:
  41fc1c:	2802      	cmp	r0, #2
  41fc1e:	d11e      	bne.n	41fc5e <.LVL849+0x2>
  41fc20:	461f      	mov	r7, r3
  41fc22:	4616      	mov	r6, r2
  41fc24:	460c      	mov	r4, r1
   if (wc_ecc_is_valid_idx(private_key->idx) == 0 ||
  41fc26:	6868      	ldr	r0, [r5, #4]
  41fc28:	f001 ffae 	bl	421b88 <wc_ecc_is_valid_idx>

0041fc2c <.LVL843>:
  41fc2c:	b1d0      	cbz	r0, 41fc64 <.LVL851>
       wc_ecc_is_valid_idx(public_key->idx)  == 0) {
  41fc2e:	6860      	ldr	r0, [r4, #4]
  41fc30:	f001 ffaa 	bl	421b88 <wc_ecc_is_valid_idx>

0041fc34 <.LVL844>:
   if (wc_ecc_is_valid_idx(private_key->idx) == 0 ||
  41fc34:	b1c8      	cbz	r0, 41fc6a <.LVL851+0x6>
   if (private_key->dp->id != public_key->dp->id) {
  41fc36:	692a      	ldr	r2, [r5, #16]
  41fc38:	6923      	ldr	r3, [r4, #16]
  41fc3a:	6852      	ldr	r2, [r2, #4]
  41fc3c:	685b      	ldr	r3, [r3, #4]
  41fc3e:	429a      	cmp	r2, r3
  41fc40:	d116      	bne.n	41fc70 <.LVL851+0xc>
   err = wc_ecc_shared_secret_ex(private_key, &public_key->pubkey, out, outlen);
  41fc42:	463b      	mov	r3, r7
  41fc44:	4632      	mov	r2, r6
  41fc46:	f104 0118 	add.w	r1, r4, #24
  41fc4a:	4628      	mov	r0, r5
  41fc4c:	f7ff fba7 	bl	41f39e <.LFE22>

0041fc50 <.LVL845>:
   return err;
  41fc50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041fc52 <.LVL846>:
       return BAD_FUNC_ARG;
  41fc52:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041fc56 <.LVL847>:
  41fc56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041fc58 <.LVL848>:
  41fc58:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041fc5c <.LVL849>:
  41fc5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return ECC_BAD_ARG_E;
  41fc5e:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
  41fc62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041fc64 <.LVL851>:
      return ECC_BAD_ARG_E;
  41fc64:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
  41fc68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41fc6a:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
  41fc6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return ECC_BAD_ARG_E;
  41fc70:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
}
  41fc74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0041fc76 <.LCFI64>:
       return BAD_FUNC_ARG;
  41fc76:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041fc7a <.LVL855>:
}
  41fc7a:	4770      	bx	lr

Disassembly of section .text.fp_rshb%224:

0041fc7c <fp_rshb>:
{
  41fc7c:	b5f0      	push	{r4, r5, r6, r7, lr}

0041fc7e <.LCFI29>:
    mask = (((fp_digit)1) << D) - 1;
  41fc7e:	2701      	movs	r7, #1
  41fc80:	408f      	lsls	r7, r1

0041fc82 <.LVL248>:
    tmpc = c->dp + (c->used - 1);
  41fc82:	4604      	mov	r4, r0
  41fc84:	f854 5b08 	ldr.w	r5, [r4], #8
  41fc88:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
  41fc8c:	442b      	add	r3, r5
  41fc8e:	eb04 0483 	add.w	r4, r4, r3, lsl #2

0041fc92 <.LVL249>:
    for (x = c->used - 1; x >= 0; x--) {
  41fc92:	3d01      	subs	r5, #1

0041fc94 <.LVL250>:
  41fc94:	d411      	bmi.n	41fcba <.LVL259>
  41fc96:	3f01      	subs	r7, #1

0041fc98 <.LVL251>:
  41fc98:	f1c1 0e20 	rsb	lr, r1, #32

0041fc9c <.LVL252>:
  41fc9c:	2300      	movs	r3, #0

0041fc9e <.LVL253>:
      rr = *tmpc & mask;
  41fc9e:	6826      	ldr	r6, [r4, #0]

0041fca0 <.LVL254>:
      *tmpc = (*tmpc >> D) | (r << shift);
  41fca0:	fa26 f201 	lsr.w	r2, r6, r1
  41fca4:	fa03 f30e 	lsl.w	r3, r3, lr

0041fca8 <.LVL255>:
  41fca8:	4313      	orrs	r3, r2
  41fcaa:	f844 3904 	str.w	r3, [r4], #-4

0041fcae <.LVL256>:
    for (x = c->used - 1; x >= 0; x--) {
  41fcae:	3d01      	subs	r5, #1
      rr = *tmpc & mask;
  41fcb0:	ea07 0306 	and.w	r3, r7, r6

0041fcb4 <.LVL258>:
    for (x = c->used - 1; x >= 0; x--) {
  41fcb4:	f1b5 3fff 	cmp.w	r5, #4294967295
  41fcb8:	d1f1      	bne.n	41fc9e <.LVL253>

0041fcba <.LVL259>:
    fp_clamp(c);
  41fcba:	6802      	ldr	r2, [r0, #0]
  41fcbc:	b1a2      	cbz	r2, 41fce8 <.LVL261+0x18>
  41fcbe:	1e53      	subs	r3, r2, #1
  41fcc0:	1c51      	adds	r1, r2, #1

0041fcc2 <.LVL260>:
  41fcc2:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
  41fcc6:	b959      	cbnz	r1, 41fce0 <.LVL261+0x10>
  41fcc8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  41fccc:	3204      	adds	r2, #4
  41fcce:	e000      	b.n	41fcd2 <.LVL261+0x2>

0041fcd0 <.LVL261>:
  41fcd0:	4623      	mov	r3, r4
  41fcd2:	b143      	cbz	r3, 41fce6 <.LVL261+0x16>
  41fcd4:	1e5c      	subs	r4, r3, #1
  41fcd6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  41fcda:	2900      	cmp	r1, #0
  41fcdc:	d0f8      	beq.n	41fcd0 <.LVL261>
  41fcde:	6003      	str	r3, [r0, #0]
  41fce0:	6843      	ldr	r3, [r0, #4]
  41fce2:	6043      	str	r3, [r0, #4]
}
  41fce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  41fce6:	6003      	str	r3, [r0, #0]
    fp_clamp(c);
  41fce8:	2300      	movs	r3, #0
  41fcea:	e7fa      	b.n	41fce2 <.LVL261+0x12>

Disassembly of section .text%225:

0041fcec <__do_global_dtors_aux>:
  41fcec:	b510      	push	{r4, lr}
  41fcee:	4c05      	ldr	r4, [pc, #20]	; (41fd04 <.LFE57+0x18>)
  41fcf0:	7823      	ldrb	r3, [r4, #0]
  41fcf2:	b933      	cbnz	r3, 41fd02 <__do_global_dtors_aux+0x16>
  41fcf4:	4b04      	ldr	r3, [pc, #16]	; (41fd08 <.LFE57+0x1c>)
  41fcf6:	b113      	cbz	r3, 41fcfe <__do_global_dtors_aux+0x12>
  41fcf8:	4804      	ldr	r0, [pc, #16]	; (41fd0c <.LFE57+0x20>)
  41fcfa:	f3af 8000 	nop.w
  41fcfe:	2301      	movs	r3, #1
  41fd00:	7023      	strb	r3, [r4, #0]
  41fd02:	bd10      	pop	{r4, pc}
  41fd04:	2040d6a4 	.word	0x2040d6a4
	...

0041fd10 <frame_dummy>:
  41fd10:	4b0c      	ldr	r3, [pc, #48]	; (41fd44 <frame_dummy+0x34>)
  41fd12:	b143      	cbz	r3, 41fd26 <frame_dummy+0x16>
  41fd14:	480c      	ldr	r0, [pc, #48]	; (41fd48 <frame_dummy+0x38>)
  41fd16:	490d      	ldr	r1, [pc, #52]	; (41fd4c <frame_dummy+0x3c>)
  41fd18:	b510      	push	{r4, lr}
  41fd1a:	f3af 8000 	nop.w
  41fd1e:	480c      	ldr	r0, [pc, #48]	; (41fd50 <frame_dummy+0x40>)
  41fd20:	6803      	ldr	r3, [r0, #0]
  41fd22:	b923      	cbnz	r3, 41fd2e <frame_dummy+0x1e>
  41fd24:	bd10      	pop	{r4, pc}
  41fd26:	480a      	ldr	r0, [pc, #40]	; (41fd50 <frame_dummy+0x40>)
  41fd28:	6803      	ldr	r3, [r0, #0]
  41fd2a:	b933      	cbnz	r3, 41fd3a <frame_dummy+0x2a>
  41fd2c:	4770      	bx	lr
  41fd2e:	4b09      	ldr	r3, [pc, #36]	; (41fd54 <frame_dummy+0x44>)
  41fd30:	2b00      	cmp	r3, #0
  41fd32:	d0f7      	beq.n	41fd24 <frame_dummy+0x14>
  41fd34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  41fd38:	4718      	bx	r3
  41fd3a:	4b06      	ldr	r3, [pc, #24]	; (41fd54 <frame_dummy+0x44>)
  41fd3c:	2b00      	cmp	r3, #0
  41fd3e:	d0f5      	beq.n	41fd2c <frame_dummy+0x1c>
  41fd40:	4718      	bx	r3
  41fd42:	bf00      	nop
	...
  41fd4c:	2040d6a8 	.word	0x2040d6a8
	...

Disassembly of section .text.fp_read_unsigned_bin%226:

0041fd58 <fp_read_unsigned_bin>:
{
  41fd58:	b570      	push	{r4, r5, r6, lr}

0041fd5a <.LCFI34>:
  41fd5a:	4605      	mov	r5, r0
  41fd5c:	460c      	mov	r4, r1
  41fd5e:	4616      	mov	r6, r2
  fp_zero (a);
  41fd60:	f002 f9f0 	bl	422144 <.LFE163>

0041fd64 <.LVL283>:
  if (c > 0 && (word32)c > maxC) {
  41fd64:	f5b6 7f08 	cmp.w	r6, #544	; 0x220
  41fd68:	dd04      	ble.n	41fd74 <.LBB13>

0041fd6a <.LBB12>:
     int excess = (c - maxC);
  41fd6a:	f5a6 7308 	sub.w	r3, r6, #544	; 0x220

0041fd6e <.LVL284>:
     c -= excess;
  41fd6e:	f44f 7608 	mov.w	r6, #544	; 0x220

0041fd72 <.LVL285>:
     b += excess;
  41fd72:	441c      	add	r4, r3

0041fd74 <.LBB13>:
     unsigned char *pd = (unsigned char *)a->dp;
  41fd74:	f105 0308 	add.w	r3, r5, #8

0041fd78 <.LVL287>:
     a->used = (c + sizeof(fp_digit) - 1)/sizeof(fp_digit);
  41fd78:	1cf2      	adds	r2, r6, #3
  41fd7a:	0892      	lsrs	r2, r2, #2
  41fd7c:	602a      	str	r2, [r5, #0]
     for (c -= 1; c >= 0; c -= 1) {
  41fd7e:	2e01      	cmp	r6, #1
  41fd80:	d407      	bmi.n	41fd92 <.LBE13>
  41fd82:	4433      	add	r3, r6

0041fd84 <.LVL288>:
  41fd84:	19a2      	adds	r2, r4, r6
       pd[c] = *b++;
  41fd86:	f814 1b01 	ldrb.w	r1, [r4], #1

0041fd8a <.LVL289>:
  41fd8a:	f803 1d01 	strb.w	r1, [r3, #-1]!

0041fd8e <.LVL290>:
     for (c -= 1; c >= 0; c -= 1) {
  41fd8e:	4294      	cmp	r4, r2
  41fd90:	d1f9      	bne.n	41fd86 <.LVL288+0x2>

0041fd92 <.LBE13>:
  fp_clamp (a);
  41fd92:	682a      	ldr	r2, [r5, #0]
  41fd94:	b1a2      	cbz	r2, 41fdc0 <.LBE13+0x2e>
  41fd96:	1e53      	subs	r3, r2, #1
  41fd98:	1c51      	adds	r1, r2, #1
  41fd9a:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
  41fd9e:	b959      	cbnz	r1, 41fdb8 <.LBE13+0x26>
  41fda0:	eb05 0282 	add.w	r2, r5, r2, lsl #2
  41fda4:	3204      	adds	r2, #4
  41fda6:	e000      	b.n	41fdaa <.LBE13+0x18>
  41fda8:	4603      	mov	r3, r0
  41fdaa:	b143      	cbz	r3, 41fdbe <.LBE13+0x2c>
  41fdac:	1e58      	subs	r0, r3, #1
  41fdae:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  41fdb2:	2900      	cmp	r1, #0
  41fdb4:	d0f8      	beq.n	41fda8 <.LBE13+0x16>
  41fdb6:	602b      	str	r3, [r5, #0]
  41fdb8:	686b      	ldr	r3, [r5, #4]
  41fdba:	606b      	str	r3, [r5, #4]
}
  41fdbc:	bd70      	pop	{r4, r5, r6, pc}
  41fdbe:	602b      	str	r3, [r5, #0]
  fp_clamp (a);
  41fdc0:	2300      	movs	r3, #0
  41fdc2:	e7fa      	b.n	41fdba <.LBE13+0x28>

Disassembly of section .text._wc_ecc_curve_free%227:

0041fdc4 <_wc_ecc_curve_free>:
    if (curve == NULL) {
  41fdc4:	b390      	cbz	r0, 41fe2c <.LCFI1>
{
  41fdc6:	b510      	push	{r4, lr}

0041fdc8 <.LCFI0>:
  41fdc8:	4604      	mov	r4, r0
    if (curve->load_mask & ECC_CURVE_FIELD_PRIME)
  41fdca:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
  41fdce:	f013 0f01 	tst.w	r3, #1
  41fdd2:	d117      	bne.n	41fe04 <.LVL2>

0041fdd4 <.LVL1>:
    if (curve->load_mask & ECC_CURVE_FIELD_AF)
  41fdd4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  41fdd8:	f013 0f02 	tst.w	r3, #2
  41fddc:	d116      	bne.n	41fe0c <.LVL4+0x2>
    if (curve->load_mask & ECC_CURVE_FIELD_ORDER)
  41fdde:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  41fde2:	f013 0f08 	tst.w	r3, #8
  41fde6:	d115      	bne.n	41fe14 <.LVL5+0x2>
    if (curve->load_mask & ECC_CURVE_FIELD_GX)
  41fde8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  41fdec:	f013 0f10 	tst.w	r3, #16
  41fdf0:	d114      	bne.n	41fe1c <.LVL6+0x2>
    if (curve->load_mask & ECC_CURVE_FIELD_GY)
  41fdf2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  41fdf6:	f013 0f20 	tst.w	r3, #32
  41fdfa:	d113      	bne.n	41fe24 <.LVL7+0x2>
    curve->load_mask = 0;
  41fdfc:	2300      	movs	r3, #0
  41fdfe:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  41fe02:	bd10      	pop	{r4, pc}

0041fe04 <.LVL2>:
        mp_clear(curve->prime);
  41fe04:	6840      	ldr	r0, [r0, #4]

0041fe06 <.LVL3>:
  41fe06:	f002 fae3 	bl	4223d0 <.LFE16>

0041fe0a <.LVL4>:
  41fe0a:	e7e3      	b.n	41fdd4 <.LVL1>
        mp_clear(curve->Af);
  41fe0c:	68a0      	ldr	r0, [r4, #8]
  41fe0e:	f002 fadf 	bl	4223d0 <.LFE16>

0041fe12 <.LVL5>:
  41fe12:	e7e4      	b.n	41fdde <.LVL1+0xa>
        mp_clear(curve->order);
  41fe14:	68e0      	ldr	r0, [r4, #12]
  41fe16:	f002 fadb 	bl	4223d0 <.LFE16>

0041fe1a <.LVL6>:
  41fe1a:	e7e5      	b.n	41fde8 <.LVL1+0x14>
        mp_clear(curve->Gx);
  41fe1c:	6920      	ldr	r0, [r4, #16]
  41fe1e:	f002 fad7 	bl	4223d0 <.LFE16>

0041fe22 <.LVL7>:
  41fe22:	e7e6      	b.n	41fdf2 <.LVL1+0x1e>
        mp_clear(curve->Gy);
  41fe24:	6960      	ldr	r0, [r4, #20]
  41fe26:	f002 fad3 	bl	4223d0 <.LFE16>

0041fe2a <.LVL8>:
  41fe2a:	e7e7      	b.n	41fdfc <.LVL1+0x28>

0041fe2c <.LCFI1>:
  41fe2c:	4770      	bx	lr

Disassembly of section .text.Hash_DRBG_Instantiate%228:

0041fe2e <Hash_DRBG_Instantiate>:
{
  41fe2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

0041fe32 <.LCFI6>:
  41fe32:	b084      	sub	sp, #16

0041fe34 <.LCFI7>:
  41fe34:	4604      	mov	r4, r0
  41fe36:	460e      	mov	r6, r1
  41fe38:	4617      	mov	r7, r2
  41fe3a:	4698      	mov	r8, r3

0041fe3c <.LVL53>:
    XMEMSET(drbg, 0, sizeof(DRBG));
  41fe3c:	2278      	movs	r2, #120	; 0x78

0041fe3e <.LVL54>:
  41fe3e:	2100      	movs	r1, #0

0041fe40 <.LVL55>:
  41fe40:	f7fe fb6a 	bl	41e518 <.LFE14>

0041fe44 <.LVL56>:
    if (Hash_df(drbg, drbg->V, sizeof(drbg->V), drbgInitV, seed, seedSz,
  41fe44:	f104 0508 	add.w	r5, r4, #8
  41fe48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41fe4a:	9303      	str	r3, [sp, #12]
  41fe4c:	f8cd 8008 	str.w	r8, [sp, #8]
  41fe50:	9701      	str	r7, [sp, #4]
  41fe52:	9600      	str	r6, [sp, #0]
  41fe54:	2304      	movs	r3, #4
  41fe56:	2237      	movs	r2, #55	; 0x37
  41fe58:	4629      	mov	r1, r5
  41fe5a:	4620      	mov	r0, r4
  41fe5c:	f7fa fcf4 	bl	41a848 <.LFE19>

0041fe60 <.LVL57>:
  41fe60:	b120      	cbz	r0, 41fe6c <.LCFI9>
    int ret = DRBG_FAILURE;
  41fe62:	2302      	movs	r3, #2

0041fe64 <.LVL58>:
}
  41fe64:	4618      	mov	r0, r3
  41fe66:	b004      	add	sp, #16

0041fe68 <.LCFI8>:
  41fe68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0041fe6c <.LCFI9>:
        Hash_df(drbg, drbg->C, sizeof(drbg->C), drbgInitC, drbg->V,
  41fe6c:	2300      	movs	r3, #0
  41fe6e:	9303      	str	r3, [sp, #12]
  41fe70:	9302      	str	r3, [sp, #8]
  41fe72:	2237      	movs	r2, #55	; 0x37
  41fe74:	9201      	str	r2, [sp, #4]
  41fe76:	9500      	str	r5, [sp, #0]
  41fe78:	f104 013f 	add.w	r1, r4, #63	; 0x3f
  41fe7c:	4620      	mov	r0, r4
  41fe7e:	f7fa fce3 	bl	41a848 <.LFE19>

0041fe82 <.LVL60>:
                                              nonce, nonceSz) == DRBG_SUCCESS &&
  41fe82:	4603      	mov	r3, r0
  41fe84:	b108      	cbz	r0, 41fe8a <.LVL60+0x8>
    int ret = DRBG_FAILURE;
  41fe86:	2302      	movs	r3, #2
    return ret;
  41fe88:	e7ec      	b.n	41fe64 <.LVL58>
        drbg->reseedCtr = 1;
  41fe8a:	2201      	movs	r2, #1
  41fe8c:	6022      	str	r2, [r4, #0]
        drbg->lastBlock = 0;
  41fe8e:	2200      	movs	r2, #0
  41fe90:	6062      	str	r2, [r4, #4]
        drbg->matchCount = 0;
  41fe92:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76

0041fe96 <.LVL61>:
  41fe96:	e7e5      	b.n	41fe64 <.LVL58>

Disassembly of section .text.DecodeECC_DSA_Sig%229:

0041fe98 <DecodeECC_DSA_Sig>:


/* Der Decode ECC-DSA Signature, r & s stored as big ints */
int DecodeECC_DSA_Sig(const byte* sig, word32 sigLen, mp_int* r, mp_int* s)
{
  41fe98:	b5f0      	push	{r4, r5, r6, r7, lr}

0041fe9a <.LCFI149>:
  41fe9a:	b083      	sub	sp, #12

0041fe9c <.LCFI150>:
  41fe9c:	4605      	mov	r5, r0
  41fe9e:	460c      	mov	r4, r1
  41fea0:	4616      	mov	r6, r2
  41fea2:	461f      	mov	r7, r3
    word32 idx = 0;
  41fea4:	2300      	movs	r3, #0

0041fea6 <.LVL1214>:
  41fea6:	9301      	str	r3, [sp, #4]
    int    len = 0;
  41fea8:	aa02      	add	r2, sp, #8

0041feaa <.LVL1215>:
  41feaa:	f842 3d08 	str.w	r3, [r2, #-8]!

    if (GetSequence(sig, &idx, &len, sigLen) < 0) {
  41feae:	460b      	mov	r3, r1
  41feb0:	a901      	add	r1, sp, #4

0041feb2 <.LVL1216>:
  41feb2:	f002 f91b 	bl	4220ec <.LFE164>

0041feb6 <.LVL1217>:
  41feb6:	2800      	cmp	r0, #0
  41feb8:	db19      	blt.n	41feee <.LCFI152>
        return ASN_ECC_KEY_E;
    }

    if ((word32)len > (sigLen - idx)) {
  41feba:	9b01      	ldr	r3, [sp, #4]
  41febc:	1ae3      	subs	r3, r4, r3
  41febe:	9a00      	ldr	r2, [sp, #0]
  41fec0:	4293      	cmp	r3, r2
  41fec2:	d317      	bcc.n	41fef4 <.LCFI152+0x6>
        return ASN_ECC_KEY_E;
    }

    if (GetInt(r, sig, &idx, sigLen) < 0) {
  41fec4:	4623      	mov	r3, r4
  41fec6:	aa01      	add	r2, sp, #4
  41fec8:	4629      	mov	r1, r5
  41feca:	4630      	mov	r0, r6
  41fecc:	f000 fc46 	bl	42075c <.LFE0>

0041fed0 <.LVL1218>:
  41fed0:	2800      	cmp	r0, #0
  41fed2:	db12      	blt.n	41fefa <.LCFI152+0xc>
        return ASN_ECC_KEY_E;
    }

    if (GetInt(s, sig, &idx, sigLen) < 0) {
  41fed4:	4623      	mov	r3, r4
  41fed6:	aa01      	add	r2, sp, #4
  41fed8:	4629      	mov	r1, r5
  41feda:	4638      	mov	r0, r7
  41fedc:	f000 fc3e 	bl	42075c <.LFE0>

0041fee0 <.LVL1219>:
  41fee0:	2800      	cmp	r0, #0
        return ASN_ECC_KEY_E;
    }

    return 0;
  41fee2:	bfb4      	ite	lt
  41fee4:	f06f 00aa 	mvnlt.w	r0, #170	; 0xaa
  41fee8:	2000      	movge	r0, #0
}
  41feea:	b003      	add	sp, #12

0041feec <.LCFI151>:
  41feec:	bdf0      	pop	{r4, r5, r6, r7, pc}

0041feee <.LCFI152>:
        return ASN_ECC_KEY_E;
  41feee:	f06f 00aa 	mvn.w	r0, #170	; 0xaa
  41fef2:	e7fa      	b.n	41feea <.LVL1219+0xa>
        return ASN_ECC_KEY_E;
  41fef4:	f06f 00aa 	mvn.w	r0, #170	; 0xaa
  41fef8:	e7f7      	b.n	41feea <.LVL1219+0xa>
        return ASN_ECC_KEY_E;
  41fefa:	f06f 00aa 	mvn.w	r0, #170	; 0xaa
  41fefe:	e7f4      	b.n	41feea <.LVL1219+0xa>

Disassembly of section .text.wc_DeCompress%230:

0041ff00 <wc_DeCompress>:
 *
 * return:
 *    negative - error code
 *    positive - bytes stored in out buffer
 */ 
{
  41ff00:	b510      	push	{r4, lr}

0041ff02 <.LCFI7>:
  41ff02:	b08e      	sub	sp, #56	; 0x38

0041ff04 <.LCFI8>:
    z_stream stream;
    int result = 0;

    stream.next_in = (Bytef*)in;
  41ff04:	9200      	str	r2, [sp, #0]
    stream.avail_in = (uInt)inSz;
  41ff06:	9301      	str	r3, [sp, #4]
    /* Check for source > 64K on 16-bit machine: */
    if ((uLong)stream.avail_in != inSz) return DECOMPRESS_INIT_E;

    stream.next_out = out;
  41ff08:	9003      	str	r0, [sp, #12]
    stream.avail_out = (uInt)outSz;
  41ff0a:	9104      	str	r1, [sp, #16]
    if ((uLong)stream.avail_out != outSz) return DECOMPRESS_INIT_E;

    stream.zalloc = (alloc_func)myAlloc;
  41ff0c:	4b13      	ldr	r3, [pc, #76]	; (41ff5c <.LVL32+0xe>)

0041ff0e <.LVL22>:
  41ff0e:	9308      	str	r3, [sp, #32]
    stream.zfree = (free_func)myFree;
  41ff10:	4b13      	ldr	r3, [pc, #76]	; (41ff60 <.LVL32+0x12>)
  41ff12:	9309      	str	r3, [sp, #36]	; 0x24
    stream.opaque = (voidpf)0;
  41ff14:	2300      	movs	r3, #0
  41ff16:	930a      	str	r3, [sp, #40]	; 0x28

    if (inflateInit2(&stream, DEFLATE_DEFAULT_WINDOWBITS) != Z_OK)
  41ff18:	2338      	movs	r3, #56	; 0x38
  41ff1a:	4a12      	ldr	r2, [pc, #72]	; (41ff64 <.LVL32+0x16>)

0041ff1c <.LVL23>:
  41ff1c:	210b      	movs	r1, #11

0041ff1e <.LVL24>:
  41ff1e:	4668      	mov	r0, sp

0041ff20 <.LVL25>:
  41ff20:	f7fe feee 	bl	41ed00 <.LFE15>

0041ff24 <.LVL26>:
  41ff24:	b9b0      	cbnz	r0, 41ff54 <.LVL32+0x6>
        return DECOMPRESS_INIT_E;

    if (inflate(&stream, Z_FINISH) != Z_STREAM_END) {
  41ff26:	2104      	movs	r1, #4
  41ff28:	4668      	mov	r0, sp
  41ff2a:	f7e7 fa31 	bl	407390 <inflate>

0041ff2e <.LVL27>:
  41ff2e:	2801      	cmp	r0, #1
  41ff30:	d10a      	bne.n	41ff48 <.LCFI10>
        inflateEnd(&stream);
        return DECOMPRESS_E;
    }
    
    result = (int)stream.total_out;
  41ff32:	9c05      	ldr	r4, [sp, #20]

0041ff34 <.LVL28>:

    if (inflateEnd(&stream) != Z_OK)
  41ff34:	4668      	mov	r0, sp
  41ff36:	f001 fb44 	bl	4215c2 <.LFE10>

0041ff3a <.LVL29>:
  41ff3a:	2800      	cmp	r0, #0
        result = DECOMPRESS_E;
  41ff3c:	bf18      	it	ne
  41ff3e:	f06f 04b9 	mvnne.w	r4, #185	; 0xb9

0041ff42 <.LVL30>:

    return result;
}
  41ff42:	4620      	mov	r0, r4
  41ff44:	b00e      	add	sp, #56	; 0x38

0041ff46 <.LCFI9>:
  41ff46:	bd10      	pop	{r4, pc}

0041ff48 <.LCFI10>:
        inflateEnd(&stream);
  41ff48:	4668      	mov	r0, sp
  41ff4a:	f001 fb3a 	bl	4215c2 <.LFE10>

0041ff4e <.LVL32>:
        return DECOMPRESS_E;
  41ff4e:	f06f 04b9 	mvn.w	r4, #185	; 0xb9
  41ff52:	e7f6      	b.n	41ff42 <.LVL30>
        return DECOMPRESS_INIT_E;
  41ff54:	f06f 04b8 	mvn.w	r4, #184	; 0xb8
  41ff58:	e7f3      	b.n	41ff42 <.LVL30>
  41ff5a:	bf00      	nop
  41ff5c:	004223b9 	.word	0x004223b9
  41ff60:	0042234b 	.word	0x0042234b
  41ff64:	004224f4 	.word	0x004224f4

Disassembly of section .text.wc_InitSha256_ex%231:

0041ff68 <wc_InitSha256_ex>:
        if (sha256 == NULL)
  41ff68:	b300      	cbz	r0, 41ffac <.LCFI4>
    {
  41ff6a:	b510      	push	{r4, lr}

0041ff6c <.LCFI3>:
  41ff6c:	4604      	mov	r4, r0
        sha256->heap = heap;
  41ff6e:	66c1      	str	r1, [r0, #108]	; 0x6c

0041ff70 <.LBB181>:
    XMEMSET(sha256->digest, 0, sizeof(sha256->digest));
  41ff70:	2220      	movs	r2, #32

0041ff72 <.LVL42>:
  41ff72:	2100      	movs	r1, #0

0041ff74 <.LVL43>:
  41ff74:	f7fe fad0 	bl	41e518 <.LFE14>

0041ff78 <.LVL44>:
    sha256->digest[0] = 0x6A09E667L;
  41ff78:	4b0e      	ldr	r3, [pc, #56]	; (41ffb4 <.LVL47+0x4>)
  41ff7a:	6023      	str	r3, [r4, #0]
    sha256->digest[1] = 0xBB67AE85L;
  41ff7c:	4b0e      	ldr	r3, [pc, #56]	; (41ffb8 <.LVL47+0x8>)
  41ff7e:	6063      	str	r3, [r4, #4]
    sha256->digest[2] = 0x3C6EF372L;
  41ff80:	4b0e      	ldr	r3, [pc, #56]	; (41ffbc <.LVL47+0xc>)
  41ff82:	60a3      	str	r3, [r4, #8]
    sha256->digest[3] = 0xA54FF53AL;
  41ff84:	4b0e      	ldr	r3, [pc, #56]	; (41ffc0 <.LVL47+0x10>)
  41ff86:	60e3      	str	r3, [r4, #12]
    sha256->digest[4] = 0x510E527FL;
  41ff88:	4b0e      	ldr	r3, [pc, #56]	; (41ffc4 <.LVL47+0x14>)
  41ff8a:	6123      	str	r3, [r4, #16]
    sha256->digest[5] = 0x9B05688CL;
  41ff8c:	4b0e      	ldr	r3, [pc, #56]	; (41ffc8 <.LVL47+0x18>)
  41ff8e:	6163      	str	r3, [r4, #20]
    sha256->digest[6] = 0x1F83D9ABL;
  41ff90:	4b0e      	ldr	r3, [pc, #56]	; (41ffcc <.LVL47+0x1c>)
  41ff92:	61a3      	str	r3, [r4, #24]
    sha256->digest[7] = 0x5BE0CD19L;
  41ff94:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
  41ff98:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
  41ff9c:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
  41ffa0:	61e3      	str	r3, [r4, #28]
    sha256->buffLen = 0;
  41ffa2:	2000      	movs	r0, #0
  41ffa4:	6620      	str	r0, [r4, #96]	; 0x60
    sha256->loLen   = 0;
  41ffa6:	6660      	str	r0, [r4, #100]	; 0x64
    sha256->hiLen   = 0;
  41ffa8:	66a0      	str	r0, [r4, #104]	; 0x68

0041ffaa <.LBE181>:
  41ffaa:	bd10      	pop	{r4, pc}

0041ffac <.LCFI4>:
            return BAD_FUNC_ARG;
  41ffac:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0041ffb0 <.LVL47>:
  41ffb0:	4770      	bx	lr
  41ffb2:	bf00      	nop
  41ffb4:	6a09e667 	.word	0x6a09e667
  41ffb8:	bb67ae85 	.word	0xbb67ae85
  41ffbc:	3c6ef372 	.word	0x3c6ef372
  41ffc0:	a54ff53a 	.word	0xa54ff53a
  41ffc4:	510e527f 	.word	0x510e527f
  41ffc8:	9b05688c 	.word	0x9b05688c
  41ffcc:	1f83d9ab 	.word	0x1f83d9ab

Disassembly of section .text.GetLength%232:

0041ffd0 <GetLength>:
{
  41ffd0:	b5f0      	push	{r4, r5, r6, r7, lr}

0041ffd2 <.LCFI12>:
    word32  idx = *inOutIdx;
  41ffd2:	680e      	ldr	r6, [r1, #0]

0041ffd4 <.LVL94>:
    *len = 0;    /* default length */
  41ffd4:	2400      	movs	r4, #0
  41ffd6:	6014      	str	r4, [r2, #0]
    if ((idx + 1) > maxIdx) {   /* for first read */
  41ffd8:	1c77      	adds	r7, r6, #1
  41ffda:	429f      	cmp	r7, r3
  41ffdc:	d81f      	bhi.n	42001e <.LBE69>

0041ffde <.LVL95>:
    b = input[idx++];
  41ffde:	1985      	adds	r5, r0, r6
  41ffe0:	5d84      	ldrb	r4, [r0, r6]

0041ffe2 <.LVL96>:
    if (b >= ASN_LONG_LENGTH) {
  41ffe2:	f014 0f80 	tst.w	r4, #128	; 0x80
  41ffe6:	d108      	bne.n	41fffa <.LBB69>
        length = b;
  41ffe8:	4620      	mov	r0, r4

0041ffea <.LVL97>:
    if ((idx + length) > maxIdx) {   /* for user of length */
  41ffea:	19c4      	adds	r4, r0, r7
  41ffec:	42a3      	cmp	r3, r4
  41ffee:	d31c      	bcc.n	42002a <.LBE70>
    *inOutIdx = idx;
  41fff0:	600f      	str	r7, [r1, #0]
    if (length > 0)
  41fff2:	2800      	cmp	r0, #0
  41fff4:	dd1e      	ble.n	420034 <.LVL114>
        *len = length;
  41fff6:	6010      	str	r0, [r2, #0]
  41fff8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0041fffa <.LBB69>:
        word32 bytes = b & 0x7F;
  41fffa:	f004 047f 	and.w	r4, r4, #127	; 0x7f

0041fffe <.LVL99>:
        if ((idx + bytes) > maxIdx) {   /* for reading bytes */
  41fffe:	eb07 0e04 	add.w	lr, r7, r4
  420002:	4573      	cmp	r3, lr
  420004:	d30e      	bcc.n	420024 <.LBB70>

00420006 <.LVL100>:
        while (bytes--) {
  420006:	b19c      	cbz	r4, 420030 <.LVL112>
  420008:	4434      	add	r4, r6

0042000a <.LVL101>:
  42000a:	4404      	add	r4, r0
  42000c:	2000      	movs	r0, #0

0042000e <.LVL102>:
            length = (length << 8) | b;
  42000e:	f815 6f01 	ldrb.w	r6, [r5, #1]!

00420012 <.LVL103>:
  420012:	ea46 2000 	orr.w	r0, r6, r0, lsl #8

00420016 <.LVL104>:
        while (bytes--) {
  420016:	42a5      	cmp	r5, r4
  420018:	d1f9      	bne.n	42000e <.LVL102>
            b = input[idx++];
  42001a:	4677      	mov	r7, lr

0042001c <.LVL105>:
  42001c:	e7e5      	b.n	41ffea <.LVL97>

0042001e <.LBE69>:
        return BUFFER_E;
  42001e:	f06f 0083 	mvn.w	r0, #131	; 0x83

00420022 <.LVL107>:
  420022:	bdf0      	pop	{r4, r5, r6, r7, pc}

00420024 <.LBB70>:
            return BUFFER_E;
  420024:	f06f 0083 	mvn.w	r0, #131	; 0x83

00420028 <.LVL109>:
  420028:	bdf0      	pop	{r4, r5, r6, r7, pc}

0042002a <.LBE70>:
        return BUFFER_E;
  42002a:	f06f 0083 	mvn.w	r0, #131	; 0x83

0042002e <.LVL111>:
  42002e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00420030 <.LVL112>:
    *inOutIdx = idx;
  420030:	600f      	str	r7, [r1, #0]

00420032 <.LVL113>:
  420032:	2000      	movs	r0, #0

00420034 <.LVL114>:
}
  420034:	bdf0      	pop	{r4, r5, r6, r7, pc}

Disassembly of section .text.fp_cmp_mag%233:

00420036 <fp_cmp_mag>:
   if (a->used > b->used) {
  420036:	6802      	ldr	r2, [r0, #0]
  420038:	680b      	ldr	r3, [r1, #0]
  42003a:	429a      	cmp	r2, r3
  42003c:	dc20      	bgt.n	420080 <.LVL107>
   } else if (a->used < b->used) {
  42003e:	db21      	blt.n	420084 <.LVL109>

00420040 <.LVL102>:
      for (x = a->used - 1; x >= 0; x--) {
  420040:	1e53      	subs	r3, r2, #1

00420042 <.LVL103>:
  420042:	d422      	bmi.n	42008a <.LVL111>
{
  420044:	b430      	push	{r4, r5}

00420046 <.LCFI13>:
          if (a->dp[x] > b->dp[x]) {
  420046:	1c9c      	adds	r4, r3, #2
  420048:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
  42004c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
  420050:	42a5      	cmp	r5, r4
  420052:	d81c      	bhi.n	42008e <.LCFI15>
          } else if (a->dp[x] < b->dp[x]) {
  420054:	d31d      	bcc.n	420092 <.LVL115>
  420056:	0092      	lsls	r2, r2, #2
  420058:	3204      	adds	r2, #4
  42005a:	4410      	add	r0, r2

0042005c <.LVL104>:
  42005c:	4411      	add	r1, r2

0042005e <.LVL105>:
      for (x = a->used - 1; x >= 0; x--) {
  42005e:	3b01      	subs	r3, #1
  420060:	f1b3 3fff 	cmp.w	r3, #4294967295
  420064:	d009      	beq.n	42007a <.LVL105+0x1c>
          if (a->dp[x] > b->dp[x]) {
  420066:	f850 4d04 	ldr.w	r4, [r0, #-4]!
  42006a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  42006e:	4294      	cmp	r4, r2
  420070:	d812      	bhi.n	420098 <.LVL117>
          } else if (a->dp[x] < b->dp[x]) {
  420072:	d2f4      	bcs.n	42005e <.LVL105>
             return FP_LT;
  420074:	f04f 30ff 	mov.w	r0, #4294967295
  420078:	e000      	b.n	42007c <.LVL105+0x1e>
   return FP_EQ;
  42007a:	2000      	movs	r0, #0
}
  42007c:	bc30      	pop	{r4, r5}

0042007e <.LCFI14>:
  42007e:	4770      	bx	lr

00420080 <.LVL107>:
      return FP_GT;
  420080:	2001      	movs	r0, #1

00420082 <.LVL108>:
  420082:	4770      	bx	lr

00420084 <.LVL109>:
      return FP_LT;
  420084:	f04f 30ff 	mov.w	r0, #4294967295

00420088 <.LVL110>:
  420088:	4770      	bx	lr

0042008a <.LVL111>:
   return FP_EQ;
  42008a:	2000      	movs	r0, #0

0042008c <.LVL112>:
  42008c:	4770      	bx	lr

0042008e <.LCFI15>:
             return FP_GT;
  42008e:	2001      	movs	r0, #1

00420090 <.LVL114>:
  420090:	e7f4      	b.n	42007c <.LVL105+0x1e>

00420092 <.LVL115>:
             return FP_LT;
  420092:	f04f 30ff 	mov.w	r0, #4294967295

00420096 <.LVL116>:
  420096:	e7f1      	b.n	42007c <.LVL105+0x1e>

00420098 <.LVL117>:
             return FP_GT;
  420098:	2001      	movs	r0, #1
  42009a:	e7ef      	b.n	42007c <.LVL105+0x1e>

Disassembly of section .text.wc_RsaCleanup%234:

0042009c <wc_RsaCleanup>:
    if (key && key->data) {
  42009c:	b378      	cbz	r0, 4200fe <.LCFI1>
{
  42009e:	b510      	push	{r4, lr}

004200a0 <.LCFI0>:
  4200a0:	4604      	mov	r4, r0
    if (key && key->data) {
  4200a2:	f241 1344 	movw	r3, #4420	; 0x1144
  4200a6:	58c0      	ldr	r0, [r0, r3]

004200a8 <.LVL1>:
  4200a8:	b1b0      	cbz	r0, 4200d8 <.LBE10+0x16>
        if (key->dataIsAlloc) {
  4200aa:	f241 1354 	movw	r3, #4436	; 0x1154
  4200ae:	5ce3      	ldrb	r3, [r4, r3]
  4200b0:	b15b      	cbz	r3, 4200ca <.LBE10+0x8>
            if (key->type == RSA_PRIVATE_DECRYPT ||
  4200b2:	f241 1348 	movw	r3, #4424	; 0x1148
  4200b6:	58e3      	ldr	r3, [r4, r3]
  4200b8:	3b02      	subs	r3, #2
  4200ba:	2b01      	cmp	r3, #1
  4200bc:	d90d      	bls.n	4200da <.LBE10+0x18>

004200be <.LBB10>:
            XFREE(key->data, key->heap, DYNAMIC_TYPE_WOLF_BIGINT);
  4200be:	f001 ffe5 	bl	42208c <.LFE2>

004200c2 <.LBE10>:
            key->dataIsAlloc = 0;
  4200c2:	2200      	movs	r2, #0
  4200c4:	f241 1354 	movw	r3, #4436	; 0x1154
  4200c8:	54e2      	strb	r2, [r4, r3]
        key->data = NULL;
  4200ca:	2300      	movs	r3, #0
  4200cc:	f241 1244 	movw	r2, #4420	; 0x1144
  4200d0:	50a3      	str	r3, [r4, r2]
        key->dataLen = 0;
  4200d2:	f241 1250 	movw	r2, #4432	; 0x1150
  4200d6:	50a3      	str	r3, [r4, r2]
  4200d8:	bd10      	pop	{r4, pc}
                ForceZero(key->data, key->dataLen);
  4200da:	f241 1350 	movw	r3, #4432	; 0x1150
  4200de:	58e2      	ldr	r2, [r4, r3]

004200e0 <.LBB11>:
    while (len--) *z++ = 0;
  4200e0:	2a00      	cmp	r2, #0
  4200e2:	d0ec      	beq.n	4200be <.LBB10>
  4200e4:	4402      	add	r2, r0

004200e6 <.LVL6>:
  4200e6:	2100      	movs	r1, #0

004200e8 <.LVL7>:
  4200e8:	1c43      	adds	r3, r0, #1

004200ea <.LVL8>:
  4200ea:	7001      	strb	r1, [r0, #0]
  4200ec:	4618      	mov	r0, r3
  4200ee:	429a      	cmp	r2, r3
  4200f0:	d1fa      	bne.n	4200e8 <.LVL7>

004200f2 <.LBB13>:
            XFREE(key->data, key->heap, DYNAMIC_TYPE_WOLF_BIGINT);
  4200f2:	f241 1344 	movw	r3, #4420	; 0x1144

004200f6 <.LVL9>:
  4200f6:	58e0      	ldr	r0, [r4, r3]

004200f8 <.LVL10>:
  4200f8:	2800      	cmp	r0, #0
  4200fa:	d0e2      	beq.n	4200c2 <.LBE10>
  4200fc:	e7df      	b.n	4200be <.LBB10>

004200fe <.LCFI1>:
  4200fe:	4770      	bx	lr

Disassembly of section .text.fp_mul_2%235:

00420100 <fp_mul_2>:
{
  420100:	b5f0      	push	{r4, r5, r6, r7, lr}

00420102 <.LCFI5>:
  oldused = b->used;
  420102:	f8d1 c000 	ldr.w	ip, [r1]
  b->used = a->used;
  420106:	6803      	ldr	r3, [r0, #0]
  420108:	460d      	mov	r5, r1
  42010a:	f845 3b08 	str.w	r3, [r5], #8

0042010e <.LBB4>:
    for (x = 0; x < a->used; x++) {
  42010e:	6803      	ldr	r3, [r0, #0]
  420110:	2b00      	cmp	r3, #0
  420112:	dd19      	ble.n	420148 <.LVL54>
  420114:	f100 0e04 	add.w	lr, r0, #4
  420118:	462e      	mov	r6, r5
  42011a:	2300      	movs	r3, #0
  42011c:	461a      	mov	r2, r3

0042011e <.LVL49>:
      rr = *tmpa >> ((fp_digit)(DIGIT_BIT - 1));
  42011e:	f85e 4f04 	ldr.w	r4, [lr, #4]!
  420122:	0fe7      	lsrs	r7, r4, #31

00420124 <.LVL50>:
      *tmpb++ = ((*tmpa++ << ((fp_digit)1)) | r);
  420124:	ea43 0344 	orr.w	r3, r3, r4, lsl #1

00420128 <.LVL51>:
  420128:	f846 3b04 	str.w	r3, [r6], #4

0042012c <.LVL52>:
    for (x = 0; x < a->used; x++) {
  42012c:	3201      	adds	r2, #1

0042012e <.LVL53>:
      rr = *tmpa >> ((fp_digit)(DIGIT_BIT - 1));
  42012e:	463b      	mov	r3, r7
    for (x = 0; x < a->used; x++) {
  420130:	6804      	ldr	r4, [r0, #0]
  420132:	4294      	cmp	r4, r2
  420134:	dcf3      	bgt.n	42011e <.LVL49>
    if (r != 0 && b->used != (FP_SIZE-1)) {
  420136:	b13f      	cbz	r7, 420148 <.LVL54>
  420138:	680b      	ldr	r3, [r1, #0]
  42013a:	2b87      	cmp	r3, #135	; 0x87
  42013c:	d004      	beq.n	420148 <.LVL54>
      *tmpb = 1;
  42013e:	2301      	movs	r3, #1
  420140:	6033      	str	r3, [r6, #0]
      ++(b->used);
  420142:	680b      	ldr	r3, [r1, #0]
  420144:	3301      	adds	r3, #1
  420146:	600b      	str	r3, [r1, #0]

00420148 <.LVL54>:
    tmpb = b->dp + b->used;
  420148:	680b      	ldr	r3, [r1, #0]
  42014a:	eb05 0283 	add.w	r2, r5, r3, lsl #2

0042014e <.LVL55>:
    for (x = b->used; x < oldused; x++) {
  42014e:	459c      	cmp	ip, r3
  420150:	dd05      	ble.n	42015e <.LBE4>
      *tmpb++ = 0;
  420152:	2400      	movs	r4, #0
  420154:	f842 4b04 	str.w	r4, [r2], #4

00420158 <.LVL56>:
    for (x = b->used; x < oldused; x++) {
  420158:	3301      	adds	r3, #1

0042015a <.LVL57>:
  42015a:	459c      	cmp	ip, r3
  42015c:	d1fa      	bne.n	420154 <.LVL55+0x6>

0042015e <.LBE4>:
  b->sign = a->sign;
  42015e:	6843      	ldr	r3, [r0, #4]

00420160 <.LVL58>:
  420160:	604b      	str	r3, [r1, #4]
  420162:	bdf0      	pop	{r4, r5, r6, r7, pc}

Disassembly of section .rodata%236:

00420164 <.rodata%236>:
  420164:	33323130 	.word	0x33323130
  420168:	37363534 	.word	0x37363534
  42016c:	42413938 	.word	0x42413938
  420170:	46454443 	.word	0x46454443
  420174:	4a494847 	.word	0x4a494847
  420178:	4e4d4c4b 	.word	0x4e4d4c4b
  42017c:	5251504f 	.word	0x5251504f
  420180:	56555453 	.word	0x56555453
  420184:	5a595857 	.word	0x5a595857
  420188:	20202020 	.word	0x20202020
  42018c:	20202020 	.word	0x20202020
  420190:	20202020 	.word	0x20202020
  420194:	20202020 	.word	0x20202020
  420198:	20202020 	.word	0x20202020
  42019c:	20202020 	.word	0x20202020
  4201a0:	20202020 	.word	0x20202020
  4201a4:	20202020 	.word	0x20202020
  4201a8:	64636261 	.word	0x64636261
  4201ac:	68676665 	.word	0x68676665
  4201b0:	6c6b6a69 	.word	0x6c6b6a69
  4201b4:	706f6e6d 	.word	0x706f6e6d
  4201b8:	74737271 	.word	0x74737271
  4201bc:	78777675 	.word	0x78777675
  4201c0:	2f2b7a79 	.word	0x2f2b7a79
  4201c4:	00          	.byte	0x00
  4201c5:	00          	.byte	0x00
  4201c6:	bf00      	nop

Disassembly of section .text.strncpy%237:

004201c8 <strncpy>:
  4201c8:	ea40 0301 	orr.w	r3, r0, r1
  4201cc:	f013 0f03 	tst.w	r3, #3
  4201d0:	b470      	push	{r4, r5, r6}

004201d2 <.LCFI0>:
  4201d2:	4603      	mov	r3, r0
  4201d4:	d024      	beq.n	420220 <.LVL16>

004201d6 <.LVL1>:
  4201d6:	b1a2      	cbz	r2, 420202 <.LVL11+0xa>
  4201d8:	780c      	ldrb	r4, [r1, #0]
  4201da:	701c      	strb	r4, [r3, #0]
  4201dc:	3a01      	subs	r2, #1

004201de <.LVL3>:
  4201de:	3301      	adds	r3, #1
  4201e0:	3101      	adds	r1, #1
  4201e2:	b13c      	cbz	r4, 4201f4 <.LVL10>

004201e4 <.LVL6>:
  4201e4:	b16a      	cbz	r2, 420202 <.LVL11+0xa>
  4201e6:	f811 4b01 	ldrb.w	r4, [r1], #1

004201ea <.LVL7>:
  4201ea:	f803 4b01 	strb.w	r4, [r3], #1

004201ee <.LVL8>:
  4201ee:	3a01      	subs	r2, #1

004201f0 <.LVL9>:
  4201f0:	2c00      	cmp	r4, #0
  4201f2:	d1f7      	bne.n	4201e4 <.LVL6>

004201f4 <.LVL10>:
  4201f4:	b12a      	cbz	r2, 420202 <.LVL11+0xa>
  4201f6:	441a      	add	r2, r3

004201f8 <.LVL11>:
  4201f8:	2100      	movs	r1, #0
  4201fa:	f803 1b01 	strb.w	r1, [r3], #1
  4201fe:	429a      	cmp	r2, r3
  420200:	d1fb      	bne.n	4201fa <.LVL11+0x2>
  420202:	bc70      	pop	{r4, r5, r6}

00420204 <.LCFI1>:
  420204:	4770      	bx	lr

00420206 <.LCFI2>:
  420206:	460e      	mov	r6, r1

00420208 <.LVL14>:
  420208:	f851 5b04 	ldr.w	r5, [r1], #4
  42020c:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
  420210:	ea24 0405 	bic.w	r4, r4, r5
  420214:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  420218:	d105      	bne.n	420226 <.LVL17>
  42021a:	f843 5b04 	str.w	r5, [r3], #4

0042021e <.LVL15>:
  42021e:	3a04      	subs	r2, #4

00420220 <.LVL16>:
  420220:	2a03      	cmp	r2, #3
  420222:	d8f0      	bhi.n	420206 <.LCFI2>
  420224:	e7d7      	b.n	4201d6 <.LVL1>

00420226 <.LVL17>:
  420226:	4631      	mov	r1, r6
  420228:	e7d6      	b.n	4201d8 <.LVL1+0x2>

0042022a <.LFE0>:
  42022a:	bf00      	nop

Disassembly of section .text.fp_exptmod%238:

0042022c <fp_exptmod>:
{
  42022c:	b570      	push	{r4, r5, r6, lr}

0042022e <.LCFI116>:
  42022e:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228

00420232 <.LCFI117>:
   if (P->used > (FP_SIZE/2)) {
  420232:	6815      	ldr	r5, [r2, #0]
  420234:	2d44      	cmp	r5, #68	; 0x44
  420236:	dc27      	bgt.n	420288 <.LBE182>
  420238:	461e      	mov	r6, r3
  42023a:	4615      	mov	r5, r2
  42023c:	460c      	mov	r4, r1
   if (X->sign == FP_NEG) {
  42023e:	684b      	ldr	r3, [r1, #4]

00420240 <.LVL800>:
  420240:	2b01      	cmp	r3, #1
  420242:	d007      	beq.n	420254 <.LBB182>
      return _fp_exptmod(G, X, P, Y);
  420244:	4633      	mov	r3, r6
  420246:	f7fa fe91 	bl	41af6c <.LFE17>

0042024a <.LVL801>:
  42024a:	4602      	mov	r2, r0

0042024c <.LVL802>:
}
  42024c:	4610      	mov	r0, r2
  42024e:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228

00420252 <.LCFI118>:
  420252:	bd70      	pop	{r4, r5, r6, pc}

00420254 <.LBB182>:
      fp_init_copy(&tmp, G);
  420254:	4601      	mov	r1, r0

00420256 <.LVL804>:
  420256:	4668      	mov	r0, sp

00420258 <.LVL805>:
  420258:	f001 fe62 	bl	421f20 <.LFE54>

0042025c <.LVL806>:
      if ((err = fp_invmod(&tmp, P, &tmp)) != FP_OKAY) {
  42025c:	466a      	mov	r2, sp
  42025e:	4629      	mov	r1, r5
  420260:	4668      	mov	r0, sp
  420262:	f7f2 fb59 	bl	412918 <fp_invmod>

00420266 <.LVL807>:
  420266:	4602      	mov	r2, r0
  420268:	2800      	cmp	r0, #0
  42026a:	d1ef      	bne.n	42024c <.LVL802>
      X->sign = FP_ZPOS;
  42026c:	2300      	movs	r3, #0
  42026e:	6063      	str	r3, [r4, #4]
      err =  _fp_exptmod(&tmp, X, P, Y);
  420270:	4633      	mov	r3, r6
  420272:	462a      	mov	r2, r5
  420274:	4621      	mov	r1, r4
  420276:	4668      	mov	r0, sp

00420278 <.LVL808>:
  420278:	f7fa fe78 	bl	41af6c <.LFE17>

0042027c <.LVL809>:
  42027c:	4602      	mov	r2, r0

0042027e <.LVL810>:
      if (X != Y) {
  42027e:	42b4      	cmp	r4, r6
  420280:	d0e4      	beq.n	42024c <.LVL802>
         X->sign = FP_NEG;
  420282:	2301      	movs	r3, #1
  420284:	6063      	str	r3, [r4, #4]
  420286:	e7e1      	b.n	42024c <.LVL802>

00420288 <.LBE182>:
      return FP_VAL;
  420288:	f04f 32ff 	mov.w	r2, #4294967295

0042028c <.LVL812>:
  42028c:	e7de      	b.n	42024c <.LVL802>

Disassembly of section .text.SYS_Initialize%239:

00420290 <SYS_Initialize>:

  Remarks:
 */

void SYS_Initialize ( void* data )
{
  420290:	b510      	push	{r4, lr}

00420292 <.LCFI0>:
    CLK_Initialize();
  420292:	f7ff fb63 	bl	41f95c <CLK_Initialize>

00420296 <.LVL1>:
	PIO_Initialize();
  420296:	f7fe fc23 	bl	41eae0 <PIO_Initialize>

0042029a <.LVL2>:


    NVIC_Initialize();
  42029a:	f000 fe33 	bl	420f04 <NVIC_Initialize>

0042029e <.LVL3>:
	RSWDT_REGS->RSWDT_MR = RSWDT_MR_WDDIS_Msk;	// Disable RSWDT 
  42029e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4202a2:	4a0e      	ldr	r2, [pc, #56]	; (4202dc <.LVL10+0x2>)
  4202a4:	6053      	str	r3, [r2, #4]

	WDT_REGS->WDT_MR = WDT_MR_WDDIS_Msk; 		// Disable WDT 
  4202a6:	3ab0      	subs	r2, #176	; 0xb0
  4202a8:	6053      	str	r3, [r2, #4]

	BSP_Initialize();
  4202aa:	f001 fe47 	bl	421f3c <BSP_Initialize>

004202ae <.LVL4>:
 
    TC0_CH0_TimerInitialize(); 
  4202ae:	f001 fc2f 	bl	421b10 <TC0_CH0_TimerInitialize>

004202b2 <.LVL5>:
     
    
	USART1_Initialize();
  4202b2:	f000 ffff 	bl	4212b4 <.LFE186>

004202b6 <.LVL6>:



    sysObj.sysConsole0 = SYS_CONSOLE_Initialize(SYS_CONSOLE_INDEX_0, (SYS_MODULE_INIT *)&consUsartInit0);
  4202b6:	490a      	ldr	r1, [pc, #40]	; (4202e0 <.LVL10+0x6>)
  4202b8:	2000      	movs	r0, #0
  4202ba:	f000 fcc7 	bl	420c4c <SYS_CONSOLE_Initialize>

004202be <.LVL7>:
  4202be:	4c09      	ldr	r4, [pc, #36]	; (4202e4 <.LVL10+0xa>)
  4202c0:	6020      	str	r0, [r4, #0]
    sysObj.sysDebug = SYS_DEBUG_Initialize(SYS_DEBUG_INDEX_0, (SYS_MODULE_INIT*)&debugInit);
  4202c2:	4909      	ldr	r1, [pc, #36]	; (4202e8 <.LVL10+0xe>)
  4202c4:	2000      	movs	r0, #0
  4202c6:	f001 fd09 	bl	421cdc <.LFE168>

004202ca <.LVL8>:
  4202ca:	6060      	str	r0, [r4, #4]

    sysObj.sysTime = SYS_TIME_Initialize(SYS_TIME_INDEX_0, (SYS_MODULE_INIT *)&sysTimeInitData);
  4202cc:	4907      	ldr	r1, [pc, #28]	; (4202ec <.LVL10+0x12>)
  4202ce:	2000      	movs	r0, #0
  4202d0:	f7fd ff44 	bl	41e15c <.LFE109>

004202d4 <.LVL9>:
  4202d4:	60a0      	str	r0, [r4, #8]


    APP_Initialize();
  4202d6:	f002 f869 	bl	4223ac <.LFE23>

004202da <.LVL10>:
  4202da:	bd10      	pop	{r4, pc}
  4202dc:	400e1900 	.word	0x400e1900
  4202e0:	2040d74c 	.word	0x2040d74c
  4202e4:	20400000 	.word	0x20400000
  4202e8:	2040c854 	.word	0x2040c854
  4202ec:	2040d754 	.word	0x2040d754

Disassembly of section .text.GetASNInt%240:

004202f0 <GetASNInt>:
{
  4202f0:	b570      	push	{r4, r5, r6, lr}

004202f2 <.LCFI17>:
  4202f2:	b082      	sub	sp, #8

004202f4 <.LCFI18>:
  4202f4:	4606      	mov	r6, r0
  4202f6:	460d      	mov	r5, r1
  4202f8:	4614      	mov	r4, r2
    ret = GetASNHeader(input, ASN_INTEGER, inOutIdx, len, maxIdx);
  4202fa:	9300      	str	r3, [sp, #0]
  4202fc:	4613      	mov	r3, r2

004202fe <.LVL129>:
  4202fe:	460a      	mov	r2, r1

00420300 <.LVL130>:
  420300:	2102      	movs	r1, #2

00420302 <.LVL131>:
  420302:	f000 fd0f 	bl	420d24 <.LFE149>

00420306 <.LVL132>:
    if (ret < 0)
  420306:	2800      	cmp	r0, #0
  420308:	db1c      	blt.n	420344 <.LVL135+0x2>
    if (*len > 0) {
  42030a:	6822      	ldr	r2, [r4, #0]
  42030c:	2a00      	cmp	r2, #0
  42030e:	dd1b      	ble.n	420348 <.LCFI20>
        if ((input[*inOutIdx] == 0x00) && (*len > 1)) {
  420310:	6829      	ldr	r1, [r5, #0]
  420312:	5c73      	ldrb	r3, [r6, r1]
  420314:	2a01      	cmp	r2, #1
  420316:	dd0f      	ble.n	420338 <.LVL134>
  420318:	b973      	cbnz	r3, 420338 <.LVL134>
            (*inOutIdx)++;
  42031a:	3101      	adds	r1, #1
  42031c:	6029      	str	r1, [r5, #0]
            (*len)--;
  42031e:	6823      	ldr	r3, [r4, #0]
  420320:	3b01      	subs	r3, #1
  420322:	6023      	str	r3, [r4, #0]
            if (*len > 0 && (input[*inOutIdx] & 0x80) == 0)
  420324:	2b00      	cmp	r3, #0
  420326:	dd11      	ble.n	42034c <.LVL138>
  420328:	682b      	ldr	r3, [r5, #0]
  42032a:	56f3      	ldrsb	r3, [r6, r3]
    return 0;
  42032c:	2b00      	cmp	r3, #0
  42032e:	bfac      	ite	ge
  420330:	f06f 008b 	mvnge.w	r0, #139	; 0x8b

00420334 <.LVL133>:
  420334:	2000      	movlt	r0, #0
  420336:	e005      	b.n	420344 <.LVL135+0x2>

00420338 <.LVL134>:
        else if ((input[*inOutIdx] & 0x80) == 0x80)
  420338:	b25b      	sxtb	r3, r3
    return 0;
  42033a:	2b00      	cmp	r3, #0
  42033c:	bfb4      	ite	lt
  42033e:	f06f 008b 	mvnlt.w	r0, #139	; 0x8b

00420342 <.LVL135>:
  420342:	2000      	movge	r0, #0
}
  420344:	b002      	add	sp, #8

00420346 <.LCFI19>:
  420346:	bd70      	pop	{r4, r5, r6, pc}

00420348 <.LCFI20>:
    return 0;
  420348:	2000      	movs	r0, #0

0042034a <.LVL137>:
  42034a:	e7fb      	b.n	420344 <.LVL135+0x2>

0042034c <.LVL138>:
  42034c:	2000      	movs	r0, #0

0042034e <.LVL139>:
  42034e:	e7f9      	b.n	420344 <.LVL135+0x2>

Disassembly of section .text.wc_ecc_export_private_only%241:

00420350 <wc_ecc_export_private_only>:
   return MP_OKAY on success */
int wc_ecc_export_private_only(ecc_key* key, byte* out, word32* outLen)
{
    word32 numlen;

    if (key == NULL || out == NULL || outLen == NULL) {
  420350:	2a00      	cmp	r2, #0
  420352:	bf18      	it	ne
  420354:	2900      	cmpne	r1, #0
  420356:	d028      	beq.n	4203aa <.LCFI124>
{
  420358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

0042035a <.LCFI123>:
  42035a:	460f      	mov	r7, r1
  42035c:	4616      	mov	r6, r2
    if (key == NULL || out == NULL || outLen == NULL) {
  42035e:	b1f0      	cbz	r0, 42039e <.LVL1446>
  420360:	4604      	mov	r4, r0
        return BAD_FUNC_ARG;
    }

    if (wc_ecc_is_valid_idx(key->idx) == 0) {
  420362:	6840      	ldr	r0, [r0, #4]

00420364 <.LVL1438>:
  420364:	f001 fc10 	bl	421b88 <wc_ecc_is_valid_idx>

00420368 <.LVL1439>:
  420368:	b1e0      	cbz	r0, 4203a4 <.LVL1448>
        return ECC_BAD_ARG_E;
    }
    numlen = key->dp->size;
  42036a:	6923      	ldr	r3, [r4, #16]
  42036c:	681d      	ldr	r5, [r3, #0]

0042036e <.LVL1440>:

    if (*outLen < numlen) {
  42036e:	6833      	ldr	r3, [r6, #0]
  420370:	429d      	cmp	r5, r3
  420372:	d810      	bhi.n	420396 <.LVL1445>
        *outLen = numlen;
        return BUFFER_E;
    }
    *outLen = numlen;
  420374:	6035      	str	r5, [r6, #0]
    XMEMSET(out, 0, *outLen);
  420376:	462a      	mov	r2, r5
  420378:	2100      	movs	r1, #0
  42037a:	4638      	mov	r0, r7
  42037c:	f7fe f8cc 	bl	41e518 <.LFE14>

00420380 <.LVL1441>:
   /* TODO: Implement equiv call to ATECC508A */
   return BAD_COND_E;

#else

    return mp_to_unsigned_bin(&key->k, out + (numlen -
  420380:	f504 64d2 	add.w	r4, r4, #1680	; 0x690

00420384 <.LVL1442>:
                                           mp_unsigned_bin_size(&key->k)));
  420384:	4620      	mov	r0, r4
  420386:	f002 f8e9 	bl	42255c <.LFE82>

0042038a <.LVL1443>:
    return mp_to_unsigned_bin(&key->k, out + (numlen -
  42038a:	1a28      	subs	r0, r5, r0
  42038c:	1839      	adds	r1, r7, r0
  42038e:	4620      	mov	r0, r4
  420390:	f002 f87e 	bl	422490 <.LFE73>

00420394 <.LVL1444>:
  420394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00420396 <.LVL1445>:
        *outLen = numlen;
  420396:	6035      	str	r5, [r6, #0]
        return BUFFER_E;
  420398:	f06f 0083 	mvn.w	r0, #131	; 0x83
  42039c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0042039e <.LVL1446>:
        return BAD_FUNC_ARG;
  42039e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

004203a2 <.LVL1447>:
  4203a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

004203a4 <.LVL1448>:
        return ECC_BAD_ARG_E;
  4203a4:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
#endif /* WOLFSSL_ATECC508A */
}
  4203a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

004203aa <.LCFI124>:
        return BAD_FUNC_ARG;
  4203aa:	f06f 00ac 	mvn.w	r0, #172	; 0xac

004203ae <.LVL1450>:
}
  4203ae:	4770      	bx	lr

Disassembly of section .text.bi_flush%242:

004203b0 <bi_flush>:
{
  4203b0:	b410      	push	{r4}

004203b2 <.LCFI14>:
    if (s->bi_valid == 16) {
  4203b2:	f241 63bc 	movw	r3, #5820	; 0x16bc
  4203b6:	58c3      	ldr	r3, [r0, r3]
  4203b8:	2b10      	cmp	r3, #16
  4203ba:	d014      	beq.n	4203e6 <.LCFI16>
    } else if (s->bi_valid >= 8) {
  4203bc:	2b07      	cmp	r3, #7
  4203be:	dd0f      	ble.n	4203e0 <.LCFI14+0x2e>
        put_byte(s, (Byte)s->bi_buf);
  4203c0:	6881      	ldr	r1, [r0, #8]
  4203c2:	6942      	ldr	r2, [r0, #20]
  4203c4:	1c53      	adds	r3, r2, #1
  4203c6:	6143      	str	r3, [r0, #20]
  4203c8:	f241 63b8 	movw	r3, #5816	; 0x16b8
  4203cc:	5ac4      	ldrh	r4, [r0, r3]
  4203ce:	548c      	strb	r4, [r1, r2]
        s->bi_buf >>= 8;
  4203d0:	5ac2      	ldrh	r2, [r0, r3]
  4203d2:	0a12      	lsrs	r2, r2, #8
  4203d4:	52c2      	strh	r2, [r0, r3]
        s->bi_valid -= 8;
  4203d6:	f241 62bc 	movw	r2, #5820	; 0x16bc
  4203da:	5883      	ldr	r3, [r0, r2]
  4203dc:	3b08      	subs	r3, #8
  4203de:	5083      	str	r3, [r0, r2]
}
  4203e0:	f85d 4b04 	ldr.w	r4, [sp], #4

004203e4 <.LCFI15>:
  4203e4:	4770      	bx	lr

004203e6 <.LCFI16>:
        put_short(s, s->bi_buf);
  4203e6:	6881      	ldr	r1, [r0, #8]
  4203e8:	6942      	ldr	r2, [r0, #20]
  4203ea:	1c53      	adds	r3, r2, #1
  4203ec:	6143      	str	r3, [r0, #20]
  4203ee:	f241 63b8 	movw	r3, #5816	; 0x16b8
  4203f2:	5ac4      	ldrh	r4, [r0, r3]
  4203f4:	548c      	strb	r4, [r1, r2]
  4203f6:	6884      	ldr	r4, [r0, #8]
  4203f8:	6941      	ldr	r1, [r0, #20]
  4203fa:	1c4a      	adds	r2, r1, #1
  4203fc:	6142      	str	r2, [r0, #20]
  4203fe:	5ac2      	ldrh	r2, [r0, r3]
  420400:	0a12      	lsrs	r2, r2, #8
  420402:	5462      	strb	r2, [r4, r1]
        s->bi_buf = 0;
  420404:	2200      	movs	r2, #0
  420406:	52c2      	strh	r2, [r0, r3]
        s->bi_valid = 0;
  420408:	f241 63bc 	movw	r3, #5820	; 0x16bc
  42040c:	50c2      	str	r2, [r0, r3]
  42040e:	e7e7      	b.n	4203e0 <.LCFI14+0x2e>

Disassembly of section .text._calloc_r%243:

00420410 <_calloc_r>:
  420410:	b510      	push	{r4, lr}

00420412 <.LCFI0>:
  420412:	fb02 f101 	mul.w	r1, r2, r1

00420416 <.LVL1>:
  420416:	f7f0 fc63 	bl	410ce0 <.LFE20>

0042041a <.LVL2>:
  42041a:	4604      	mov	r4, r0
  42041c:	b1d8      	cbz	r0, 420456 <.LBE2>

0042041e <.LVL3>:
  42041e:	f850 2c04 	ldr.w	r2, [r0, #-4]
  420422:	f022 0203 	bic.w	r2, r2, #3

00420426 <.LBB2>:
  420426:	3a04      	subs	r2, #4

00420428 <.LVL5>:
  420428:	2a24      	cmp	r2, #36	; 0x24
  42042a:	d818      	bhi.n	42045e <.LBE4>

0042042c <.LBB3>:
  42042c:	2a13      	cmp	r2, #19
  42042e:	d914      	bls.n	42045a <.LBB4>

00420430 <.LVL7>:
  420430:	2300      	movs	r3, #0
  420432:	2a1b      	cmp	r2, #27
  420434:	6003      	str	r3, [r0, #0]

00420436 <.LVL8>:
  420436:	6043      	str	r3, [r0, #4]
  420438:	d916      	bls.n	420468 <.LBB5>

0042043a <.LVL9>:
  42043a:	2a24      	cmp	r2, #36	; 0x24
  42043c:	6083      	str	r3, [r0, #8]

0042043e <.LVL10>:
  42043e:	60c3      	str	r3, [r0, #12]
  420440:	bf11      	iteee	ne
  420442:	f100 0210 	addne.w	r2, r0, #16

00420446 <.LVL11>:
  420446:	6103      	streq	r3, [r0, #16]
  420448:	6143      	streq	r3, [r0, #20]
  42044a:	f100 0218 	addeq.w	r2, r0, #24

0042044e <.LVL12>:
  42044e:	2300      	movs	r3, #0
  420450:	6013      	str	r3, [r2, #0]

00420452 <.LVL13>:
  420452:	6053      	str	r3, [r2, #4]
  420454:	6093      	str	r3, [r2, #8]

00420456 <.LBE2>:
  420456:	4620      	mov	r0, r4

00420458 <.LVL15>:
  420458:	bd10      	pop	{r4, pc}

0042045a <.LBB4>:
  42045a:	4602      	mov	r2, r0

0042045c <.LVL17>:
  42045c:	e7f7      	b.n	42044e <.LVL12>

0042045e <.LBE4>:
  42045e:	2100      	movs	r1, #0
  420460:	f7fe f85a 	bl	41e518 <.LFE14>

00420464 <.LBE6>:
  420464:	4620      	mov	r0, r4
  420466:	bd10      	pop	{r4, pc}

00420468 <.LBB5>:
  420468:	f100 0208 	add.w	r2, r0, #8

0042046c <.LVL21>:
  42046c:	e7ef      	b.n	42044e <.LVL12>

0042046e <.LBE5>:
  42046e:	bf00      	nop

Disassembly of section .text.memcmp%244:

00420470 <memcmp>:
  420470:	2a03      	cmp	r2, #3
  420472:	b470      	push	{r4, r5, r6}

00420474 <.LCFI0>:
  420474:	d922      	bls.n	4204bc <.LVL11>
  420476:	ea40 0301 	orr.w	r3, r0, r1
  42047a:	079b      	lsls	r3, r3, #30
  42047c:	d011      	beq.n	4204a2 <.LCFI2>

0042047e <.LVL1>:
  42047e:	7803      	ldrb	r3, [r0, #0]
  420480:	780c      	ldrb	r4, [r1, #0]
  420482:	42a3      	cmp	r3, r4
  420484:	d11d      	bne.n	4204c2 <.LVL11+0x6>
  420486:	440a      	add	r2, r1
  420488:	3101      	adds	r1, #1
  42048a:	e005      	b.n	420498 <.LVL4>

0042048c <.LVL2>:
  42048c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  420490:	f811 4b01 	ldrb.w	r4, [r1], #1

00420494 <.LVL3>:
  420494:	42a3      	cmp	r3, r4
  420496:	d114      	bne.n	4204c2 <.LVL11+0x6>

00420498 <.LVL4>:
  420498:	4291      	cmp	r1, r2
  42049a:	d1f7      	bne.n	42048c <.LVL2>

0042049c <.LVL5>:
  42049c:	2000      	movs	r0, #0
  42049e:	bc70      	pop	{r4, r5, r6}

004204a0 <.LCFI1>:
  4204a0:	4770      	bx	lr

004204a2 <.LCFI2>:
  4204a2:	680d      	ldr	r5, [r1, #0]
  4204a4:	6806      	ldr	r6, [r0, #0]
  4204a6:	42ae      	cmp	r6, r5
  4204a8:	460c      	mov	r4, r1
  4204aa:	4603      	mov	r3, r0

004204ac <.LVL7>:
  4204ac:	f101 0104 	add.w	r1, r1, #4

004204b0 <.LVL8>:
  4204b0:	f100 0004 	add.w	r0, r0, #4

004204b4 <.LVL9>:
  4204b4:	d108      	bne.n	4204c8 <.LCFI4>
  4204b6:	3a04      	subs	r2, #4

004204b8 <.LVL10>:
  4204b8:	2a03      	cmp	r2, #3
  4204ba:	d8f2      	bhi.n	4204a2 <.LCFI2>

004204bc <.LVL11>:
  4204bc:	2a00      	cmp	r2, #0
  4204be:	d1de      	bne.n	42047e <.LVL1>
  4204c0:	e7ec      	b.n	42049c <.LVL5>
  4204c2:	1b18      	subs	r0, r3, r4
  4204c4:	bc70      	pop	{r4, r5, r6}

004204c6 <.LCFI3>:
  4204c6:	4770      	bx	lr

004204c8 <.LCFI4>:
  4204c8:	4621      	mov	r1, r4

004204ca <.LVL13>:
  4204ca:	4618      	mov	r0, r3

004204cc <.LVL14>:
  4204cc:	e7d7      	b.n	42047e <.LVL1>

004204ce <.LFE0>:
  4204ce:	bf00      	nop

Disassembly of section .text.__lo0bits%245:

004204d0 <__lo0bits>:
  4204d0:	6803      	ldr	r3, [r0, #0]

004204d2 <.LVL80>:
  4204d2:	f013 0207 	ands.w	r2, r3, #7
  4204d6:	4601      	mov	r1, r0
  4204d8:	d007      	beq.n	4204ea <.LVL84>
  4204da:	07da      	lsls	r2, r3, #31
  4204dc:	d421      	bmi.n	420522 <.LVL100>
  4204de:	0798      	lsls	r0, r3, #30

004204e0 <.LVL81>:
  4204e0:	d421      	bmi.n	420526 <.LVL101+0x2>
  4204e2:	089b      	lsrs	r3, r3, #2

004204e4 <.LVL82>:
  4204e4:	600b      	str	r3, [r1, #0]

004204e6 <.LVL83>:
  4204e6:	2002      	movs	r0, #2
  4204e8:	4770      	bx	lr

004204ea <.LVL84>:
  4204ea:	b298      	uxth	r0, r3

004204ec <.LVL85>:
  4204ec:	b198      	cbz	r0, 420516 <.LVL96>
  4204ee:	4610      	mov	r0, r2

004204f0 <.LVL86>:
  4204f0:	f013 0fff 	tst.w	r3, #255	; 0xff
  4204f4:	bf04      	itt	eq
  4204f6:	0a1b      	lsreq	r3, r3, #8

004204f8 <.LVL87>:
  4204f8:	3008      	addeq	r0, #8

004204fa <.LVL88>:
  4204fa:	071a      	lsls	r2, r3, #28
  4204fc:	bf04      	itt	eq
  4204fe:	091b      	lsreq	r3, r3, #4

00420500 <.LVL89>:
  420500:	3004      	addeq	r0, #4

00420502 <.LVL90>:
  420502:	079a      	lsls	r2, r3, #30
  420504:	bf04      	itt	eq
  420506:	089b      	lsreq	r3, r3, #2

00420508 <.LVL91>:
  420508:	3002      	addeq	r0, #2

0042050a <.LVL92>:
  42050a:	07da      	lsls	r2, r3, #31
  42050c:	d407      	bmi.n	42051e <.LVL99>

0042050e <.LVL93>:
  42050e:	085b      	lsrs	r3, r3, #1

00420510 <.LVL94>:
  420510:	d104      	bne.n	42051c <.LVL98>
  420512:	2020      	movs	r0, #32

00420514 <.LVL95>:
  420514:	4770      	bx	lr

00420516 <.LVL96>:
  420516:	0c1b      	lsrs	r3, r3, #16
  420518:	2010      	movs	r0, #16
  42051a:	e7e9      	b.n	4204f0 <.LVL86>

0042051c <.LVL98>:
  42051c:	3001      	adds	r0, #1

0042051e <.LVL99>:
  42051e:	600b      	str	r3, [r1, #0]
  420520:	4770      	bx	lr

00420522 <.LVL100>:
  420522:	2000      	movs	r0, #0

00420524 <.LVL101>:
  420524:	4770      	bx	lr
  420526:	085b      	lsrs	r3, r3, #1

00420528 <.LVL102>:
  420528:	600b      	str	r3, [r1, #0]

0042052a <.LVL103>:
  42052a:	2001      	movs	r0, #1
  42052c:	4770      	bx	lr

0042052e <.LFE22>:
  42052e:	bf00      	nop

Disassembly of section .text.HmacKeyInnerHash%246:

00420530 <HmacKeyInnerHash>:
{
  420530:	b510      	push	{r4, lr}

00420532 <.LCFI0>:
  420532:	4604      	mov	r4, r0

00420534 <.LVL1>:
    switch (hmac->macType) {
  420534:	f890 3224 	ldrb.w	r3, [r0, #548]	; 0x224
  420538:	2b05      	cmp	r3, #5
  42053a:	d826      	bhi.n	42058a <.LVL11>
  42053c:	e8df f003 	tbb	[pc, r3]
  420540:	25130d03 	.word	0x25130d03
  420544:	191f      	.short	0x191f
            ret = wc_Md5Update(&hmac->hash.md5, (byte*)hmac->ipad,
  420546:	2240      	movs	r2, #64	; 0x40
  420548:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
  42054c:	f7fe fb50 	bl	41ebf0 <.LFE23>

00420550 <.LVL2>:
    if (ret == 0)
  420550:	b910      	cbnz	r0, 420558 <.LVL2+0x8>
        hmac->innerHashKeyed = 1;
  420552:	2301      	movs	r3, #1
  420554:	f884 3225 	strb.w	r3, [r4, #549]	; 0x225
}
  420558:	bd10      	pop	{r4, pc}

0042055a <.LVL3>:
            ret = wc_ShaUpdate(&hmac->hash.sha, (byte*)hmac->ipad,
  42055a:	2240      	movs	r2, #64	; 0x40
  42055c:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
  420560:	f7fd f83e 	bl	41d5e0 <.LFE27>

00420564 <.LVL4>:
            break;
  420564:	e7f4      	b.n	420550 <.LVL2>

00420566 <.LVL5>:
            ret = wc_Sha256Update(&hmac->hash.sha256, (byte*)hmac->ipad,
  420566:	2240      	movs	r2, #64	; 0x40
  420568:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
  42056c:	f7fd f893 	bl	41d696 <.LFE18>

00420570 <.LVL6>:
            break;
  420570:	e7ee      	b.n	420550 <.LVL2>

00420572 <.LVL7>:
            ret = wc_Sha384Update(&hmac->hash.sha384, (byte*)hmac->ipad,
  420572:	2280      	movs	r2, #128	; 0x80
  420574:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
  420578:	f7fb fe3d 	bl	41c1f6 <.LBE719>

0042057c <.LVL8>:
            break;
  42057c:	e7e8      	b.n	420550 <.LVL2>

0042057e <.LVL9>:
            ret = wc_Sha512Update(&hmac->hash.sha512, (byte*)hmac->ipad,
  42057e:	2280      	movs	r2, #128	; 0x80
  420580:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
  420584:	f7fb fdc2 	bl	41c10c <.LFE178>

00420588 <.LVL10>:
            break;
  420588:	e7e2      	b.n	420550 <.LVL2>

0042058a <.LVL11>:
    int ret = 0;
  42058a:	2000      	movs	r0, #0

0042058c <.LVL12>:
  42058c:	e7e0      	b.n	420550 <.LVL2>

Disassembly of section .text.inflateReset2%247:

0042058e <inflateReset2>:
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  42058e:	b320      	cbz	r0, 4205da <.LCFI7>
{
  420590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

00420592 <.LCFI6>:
  420592:	4605      	mov	r5, r0
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  420594:	69c4      	ldr	r4, [r0, #28]
  420596:	b31c      	cbz	r4, 4205e0 <.LCFI8>

00420598 <.LVL50>:
    if (windowBits < 0) {
  420598:	2900      	cmp	r1, #0
  42059a:	db1b      	blt.n	4205d4 <.LVL57>
        wrap = (windowBits >> 4) + 1;
  42059c:	110e      	asrs	r6, r1, #4
  42059e:	3601      	adds	r6, #1

004205a0 <.LVL51>:
        if (windowBits < 48)
  4205a0:	292f      	cmp	r1, #47	; 0x2f
            windowBits &= 15;
  4205a2:	bfd8      	it	le
  4205a4:	f001 010f 	andle.w	r1, r1, #15

004205a8 <.LVL52>:
    if (windowBits && (windowBits < 8 || windowBits > 15))
  4205a8:	460f      	mov	r7, r1
  4205aa:	f1a1 0308 	sub.w	r3, r1, #8
  4205ae:	2b07      	cmp	r3, #7
  4205b0:	d900      	bls.n	4205b4 <.LVL52+0xc>
  4205b2:	b9c1      	cbnz	r1, 4205e6 <.LVL63>
    if (state->window != Z_NULL && state->wbits != (unsigned)windowBits) {
  4205b4:	6b61      	ldr	r1, [r4, #52]	; 0x34

004205b6 <.LVL53>:
  4205b6:	b139      	cbz	r1, 4205c8 <.LVL54+0x6>
  4205b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4205ba:	429f      	cmp	r7, r3
  4205bc:	d004      	beq.n	4205c8 <.LVL54+0x6>
        ZFREE(strm, state->window);
  4205be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  4205c0:	6aa8      	ldr	r0, [r5, #40]	; 0x28

004205c2 <.LVL54>:
  4205c2:	4798      	blx	r3
        state->window = Z_NULL;
  4205c4:	2300      	movs	r3, #0
  4205c6:	6363      	str	r3, [r4, #52]	; 0x34
    state->wrap = wrap;
  4205c8:	60a6      	str	r6, [r4, #8]
    state->wbits = (unsigned)windowBits;
  4205ca:	6267      	str	r7, [r4, #36]	; 0x24
    return inflateReset(strm);
  4205cc:	4628      	mov	r0, r5
  4205ce:	f001 fb33 	bl	421c38 <.LFE65>

004205d2 <.LVL56>:
  4205d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

004205d4 <.LVL57>:
        windowBits = -windowBits;
  4205d4:	4249      	negs	r1, r1
        wrap = 0;
  4205d6:	2600      	movs	r6, #0
  4205d8:	e7e6      	b.n	4205a8 <.LVL52>

004205da <.LCFI7>:
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  4205da:	f06f 0001 	mvn.w	r0, #1

004205de <.LVL60>:
  4205de:	4770      	bx	lr

004205e0 <.LCFI8>:
  4205e0:	f06f 0001 	mvn.w	r0, #1

004205e4 <.LVL62>:
  4205e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

004205e6 <.LVL63>:
        return Z_STREAM_ERROR;
  4205e6:	f06f 0001 	mvn.w	r0, #1

004205ea <.LVL64>:
}
  4205ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

Disassembly of section .text.init_block%248:

004205ec <init_block>:
{
  4205ec:	b410      	push	{r4}

004205ee <.LCFI0>:
  4205ee:	4604      	mov	r4, r0
  4205f0:	f500 618f 	add.w	r1, r0, #1144	; 0x478
  4205f4:	4603      	mov	r3, r0
    for (n = 0; n < L_CODES;  n++) s->dyn_ltree[n].Freq = 0;
  4205f6:	2200      	movs	r2, #0

004205f8 <.LVL2>:
  4205f8:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
  4205fc:	3304      	adds	r3, #4
  4205fe:	428b      	cmp	r3, r1
  420600:	d1fa      	bne.n	4205f8 <.LVL2>
  420602:	f100 0178 	add.w	r1, r0, #120	; 0x78
  420606:	4603      	mov	r3, r0
    for (n = 0; n < D_CODES;  n++) s->dyn_dtree[n].Freq = 0;
  420608:	2200      	movs	r2, #0
  42060a:	f8a3 2988 	strh.w	r2, [r3, #2440]	; 0x988
  42060e:	3304      	adds	r3, #4
  420610:	428b      	cmp	r3, r1
  420612:	d1fa      	bne.n	42060a <.LVL2+0x12>
  420614:	f100 024c 	add.w	r2, r0, #76	; 0x4c
    for (n = 0; n < BL_CODES; n++) s->bl_tree[n].Freq = 0;
  420618:	2300      	movs	r3, #0
  42061a:	f8a4 3a7c 	strh.w	r3, [r4, #2684]	; 0xa7c
  42061e:	3404      	adds	r4, #4
  420620:	4294      	cmp	r4, r2
  420622:	d1fa      	bne.n	42061a <.LVL2+0x22>
    s->dyn_ltree[END_BLOCK].Freq = 1;
  420624:	2301      	movs	r3, #1
  420626:	f8a0 3494 	strh.w	r3, [r0, #1172]	; 0x494
    s->opt_len = s->static_len = 0L;
  42062a:	2300      	movs	r3, #0
  42062c:	f241 62ac 	movw	r2, #5804	; 0x16ac
  420630:	5083      	str	r3, [r0, r2]
  420632:	f241 62a8 	movw	r2, #5800	; 0x16a8
  420636:	5083      	str	r3, [r0, r2]
    s->last_lit = s->matches = 0;
  420638:	f241 62b0 	movw	r2, #5808	; 0x16b0
  42063c:	5083      	str	r3, [r0, r2]
  42063e:	f500 50b5 	add.w	r0, r0, #5792	; 0x16a0

00420642 <.LVL3>:
  420642:	6003      	str	r3, [r0, #0]
}
  420644:	f85d 4b04 	ldr.w	r4, [sp], #4

00420648 <.LCFI1>:
  420648:	4770      	bx	lr

Disassembly of section .text.wc_RsaFunction%249:

0042064a <wc_RsaFunction>:
{
  42064a:	b570      	push	{r4, r5, r6, lr}

0042064c <.LCFI23>:
  42064c:	b084      	sub	sp, #16

0042064e <.LCFI24>:
  42064e:	9d08      	ldr	r5, [sp, #32]
  420650:	9c09      	ldr	r4, [sp, #36]	; 0x24
    if (key == NULL || in == NULL || inLen == 0 || out == NULL ||
  420652:	b1fc      	cbz	r4, 420694 <.LCFI26>
  420654:	b1f0      	cbz	r0, 420694 <.LCFI26>
  420656:	2a00      	cmp	r2, #0
  420658:	bf18      	it	ne
  42065a:	2900      	cmpne	r1, #0
  42065c:	d01d      	beq.n	42069a <.LCFI26+0x6>
  42065e:	b1e3      	cbz	r3, 42069a <.LCFI26+0x6>
            outLen == NULL || *outLen == 0 || type == RSA_TYPE_UNKNOWN) {
  420660:	681e      	ldr	r6, [r3, #0]
  420662:	b1ee      	cbz	r6, 4206a0 <.LCFI26+0xc>
  420664:	f1b5 3fff 	cmp.w	r5, #4294967295
  420668:	d01a      	beq.n	4206a0 <.LCFI26+0xc>
        ret = wc_RsaFunctionSync(in, inLen, out, outLen, type, key, rng);
  42066a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  42066c:	9602      	str	r6, [sp, #8]
  42066e:	9401      	str	r4, [sp, #4]
  420670:	9500      	str	r5, [sp, #0]
  420672:	f7f8 fd97 	bl	4191a4 <.LFE1>

00420676 <.LVL144>:
    if (ret < 0 && ret != WC_PENDING_E) {
  420676:	1e05      	subs	r5, r0, #0
  420678:	da09      	bge.n	42068e <.LVL146>
  42067a:	f115 0f6c 	cmn.w	r5, #108	; 0x6c
  42067e:	d006      	beq.n	42068e <.LVL146>
        key->state = RSA_STATE_NONE;
  420680:	2200      	movs	r2, #0
  420682:	f241 134c 	movw	r3, #4428	; 0x114c
  420686:	50e2      	str	r2, [r4, r3]
        wc_RsaCleanup(key);
  420688:	4620      	mov	r0, r4

0042068a <.LVL145>:
  42068a:	f7ff fd07 	bl	42009c <.LFE42>

0042068e <.LVL146>:
}
  42068e:	4628      	mov	r0, r5
  420690:	b004      	add	sp, #16

00420692 <.LCFI25>:
  420692:	bd70      	pop	{r4, r5, r6, pc}

00420694 <.LCFI26>:
        return BAD_FUNC_ARG;
  420694:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  420698:	e7f9      	b.n	42068e <.LVL146>
  42069a:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  42069e:	e7f6      	b.n	42068e <.LVL146>
  4206a0:	f06f 05ac 	mvn.w	r5, #172	; 0xac
  4206a4:	e7f3      	b.n	42068e <.LVL146>

Disassembly of section .text.Console_UART_Read%250:

004206a8 <Console_UART_Read>:
    while ((readQueue.numElem < readQueue.elemArrSz) && (rdBytes < count))
  4206a8:	4b15      	ldr	r3, [pc, #84]	; (420700 <.LCFI8+0x4>)
  4206aa:	6898      	ldr	r0, [r3, #8]

004206ac <.LVL47>:
  4206ac:	691b      	ldr	r3, [r3, #16]
  4206ae:	4298      	cmp	r0, r3
  4206b0:	d222      	bcs.n	4206f8 <.LBE13>
  4206b2:	b30a      	cbz	r2, 4206f8 <.LBE13>
{
  4206b4:	b5f0      	push	{r4, r5, r6, r7, lr}

004206b6 <.LCFI6>:
    while ((readQueue.numElem < readQueue.elemArrSz) && (rdBytes < count))
  4206b6:	2000      	movs	r0, #0

004206b8 <.LBB10>:
    q->qPkts[q->nextPos] = pkt;
  4206b8:	4b11      	ldr	r3, [pc, #68]	; (420700 <.LCFI8+0x4>)
  4206ba:	2701      	movs	r7, #1
    (q->nextPos < (q->elemArrSz - 1)) ? q->nextPos++ : (q->nextPos = 0);
  4206bc:	4686      	mov	lr, r0
  4206be:	e009      	b.n	4206d4 <.LBB13>

004206c0 <.LVL48>:
  4206c0:	3401      	adds	r4, #1
  4206c2:	605c      	str	r4, [r3, #4]
    q->numElem++;
  4206c4:	689c      	ldr	r4, [r3, #8]
  4206c6:	3401      	adds	r4, #1
  4206c8:	609c      	str	r4, [r3, #8]

004206ca <.LBE10>:
        rdBytes++;
  4206ca:	3001      	adds	r0, #1
    while ((readQueue.numElem < readQueue.elemArrSz) && (rdBytes < count))
  4206cc:	4282      	cmp	r2, r0
  4206ce:	d915      	bls.n	4206fc <.LCFI8>
  4206d0:	42a5      	cmp	r5, r4
  4206d2:	d910      	bls.n	4206f6 <.LVL53>

004206d4 <.LBB13>:
    q->qPkts[q->nextPos] = pkt;
  4206d4:	685d      	ldr	r5, [r3, #4]
  4206d6:	68dc      	ldr	r4, [r3, #12]
  4206d8:	eb04 06c5 	add.w	r6, r4, r5, lsl #3
  4206dc:	eb01 0c00 	add.w	ip, r1, r0

004206e0 <.LVL52>:
  4206e0:	f844 c035 	str.w	ip, [r4, r5, lsl #3]
  4206e4:	6077      	str	r7, [r6, #4]
    (q->nextPos < (q->elemArrSz - 1)) ? q->nextPos++ : (q->nextPos = 0);
  4206e6:	685c      	ldr	r4, [r3, #4]
  4206e8:	691d      	ldr	r5, [r3, #16]
  4206ea:	1e6e      	subs	r6, r5, #1
  4206ec:	42b4      	cmp	r4, r6
  4206ee:	d3e7      	bcc.n	4206c0 <.LVL48>
  4206f0:	f8c3 e004 	str.w	lr, [r3, #4]
  4206f4:	e7e6      	b.n	4206c4 <.LVL48+0x4>

004206f6 <.LVL53>:
  4206f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

004206f8 <.LBE13>:
    size_t rdBytes = 0;
  4206f8:	2000      	movs	r0, #0
  4206fa:	4770      	bx	lr

004206fc <.LCFI8>:
}
  4206fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4206fe:	bf00      	nop
  420700:	2040d718 	.word	0x2040d718

Disassembly of section .text.inflateResetKeep%251:

00420704 <inflateResetKeep>:
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  420704:	b320      	cbz	r0, 420750 <.LVL38>
  420706:	69c3      	ldr	r3, [r0, #28]
  420708:	b32b      	cbz	r3, 420756 <.LVL40>

0042070a <.LVL36>:
    strm->total_in = strm->total_out = state->total = 0;
  42070a:	2100      	movs	r1, #0
  42070c:	61d9      	str	r1, [r3, #28]
  42070e:	6141      	str	r1, [r0, #20]
  420710:	6081      	str	r1, [r0, #8]
    strm->msg = Z_NULL;
  420712:	6181      	str	r1, [r0, #24]
    if (state->wrap)        /* to support ill-conceived Java test suite */
  420714:	6899      	ldr	r1, [r3, #8]
  420716:	b111      	cbz	r1, 42071e <.LVL36+0x14>
        strm->adler = state->wrap & 1;
  420718:	f001 0101 	and.w	r1, r1, #1
  42071c:	6301      	str	r1, [r0, #48]	; 0x30
    state->mode = HEAD;
  42071e:	2000      	movs	r0, #0

00420720 <.LVL37>:
  420720:	7018      	strb	r0, [r3, #0]
    state->last = 0;
  420722:	6058      	str	r0, [r3, #4]
    state->havedict = 0;
  420724:	60d8      	str	r0, [r3, #12]
    state->dmax = 32768U;
  420726:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  42072a:	615a      	str	r2, [r3, #20]
    state->head = Z_NULL;
  42072c:	6218      	str	r0, [r3, #32]
    state->hold = 0;
  42072e:	6398      	str	r0, [r3, #56]	; 0x38
    state->bits = 0;
  420730:	63d8      	str	r0, [r3, #60]	; 0x3c
    state->lencode = state->distcode = state->next = state->codes;
  420732:	f503 62a6 	add.w	r2, r3, #1328	; 0x530
  420736:	66da      	str	r2, [r3, #108]	; 0x6c
  420738:	651a      	str	r2, [r3, #80]	; 0x50
  42073a:	64da      	str	r2, [r3, #76]	; 0x4c
    state->sane = 1;
  42073c:	f503 52de 	add.w	r2, r3, #7104	; 0x1bc0
  420740:	2101      	movs	r1, #1
  420742:	6011      	str	r1, [r2, #0]
    state->back = -1;
  420744:	f04f 31ff 	mov.w	r1, #4294967295
  420748:	f641 32c4 	movw	r2, #7108	; 0x1bc4
  42074c:	5099      	str	r1, [r3, r2]
    return Z_OK;
  42074e:	4770      	bx	lr

00420750 <.LVL38>:
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  420750:	f06f 0001 	mvn.w	r0, #1

00420754 <.LVL39>:
  420754:	4770      	bx	lr

00420756 <.LVL40>:
  420756:	f06f 0001 	mvn.w	r0, #1

0042075a <.LVL41>:
}
  42075a:	4770      	bx	lr

Disassembly of section .text.GetInt%252:

0042075c <GetInt>:
{
  42075c:	b570      	push	{r4, r5, r6, lr}

0042075e <.LCFI45>:
  42075e:	b082      	sub	sp, #8

00420760 <.LCFI46>:
  420760:	4606      	mov	r6, r0
  420762:	460c      	mov	r4, r1
  420764:	4615      	mov	r5, r2
    word32 idx = *inOutIdx;
  420766:	6812      	ldr	r2, [r2, #0]

00420768 <.LVL283>:
  420768:	9201      	str	r2, [sp, #4]
    ret = GetASNInt(input, &idx, &length, maxIdx);
  42076a:	466a      	mov	r2, sp
  42076c:	a901      	add	r1, sp, #4

0042076e <.LVL284>:
  42076e:	4620      	mov	r0, r4

00420770 <.LVL285>:
  420770:	f7ff fdbe 	bl	4202f0 <.LFE163>

00420774 <.LVL286>:
    if (ret != 0)
  420774:	4603      	mov	r3, r0
  420776:	b110      	cbz	r0, 42077e <.LCFI48>

00420778 <.LVL287>:
}
  420778:	4618      	mov	r0, r3
  42077a:	b002      	add	sp, #8

0042077c <.LCFI47>:
  42077c:	bd70      	pop	{r4, r5, r6, pc}

0042077e <.LCFI48>:
    if (mp_init(mpi) != MP_OKAY)
  42077e:	4630      	mov	r0, r6

00420780 <.LVL289>:
  420780:	f001 fd94 	bl	4222ac <.LFE39>

00420784 <.LVL290>:
  420784:	b990      	cbnz	r0, 4207ac <.LVL292+0x6>
    if (mp_read_unsigned_bin(mpi, (byte*)input + idx, length) != 0) {
  420786:	9a00      	ldr	r2, [sp, #0]
  420788:	9901      	ldr	r1, [sp, #4]
  42078a:	4421      	add	r1, r4
  42078c:	4630      	mov	r0, r6
  42078e:	f001 fe75 	bl	42247c <.LFE72>

00420792 <.LVL291>:
  420792:	4603      	mov	r3, r0
  420794:	b920      	cbnz	r0, 4207a0 <.LVL291+0xe>
    *inOutIdx = idx + length;
  420796:	9900      	ldr	r1, [sp, #0]
  420798:	9a01      	ldr	r2, [sp, #4]
  42079a:	440a      	add	r2, r1
  42079c:	602a      	str	r2, [r5, #0]
    return 0;
  42079e:	e7eb      	b.n	420778 <.LVL287>
        mp_clear(mpi);
  4207a0:	4630      	mov	r0, r6
  4207a2:	f001 fe15 	bl	4223d0 <.LFE16>

004207a6 <.LVL292>:
        return ASN_GETINT_E;
  4207a6:	f06f 038d 	mvn.w	r3, #141	; 0x8d
  4207aa:	e7e5      	b.n	420778 <.LVL287>
        return MP_INIT_E;
  4207ac:	f06f 036d 	mvn.w	r3, #109	; 0x6d
  4207b0:	e7e2      	b.n	420778 <.LVL287>

Disassembly of section .text.SetLength%253:

004207b2 <SetLength>:
    if (length < ASN_LONG_LENGTH)
  4207b2:	287f      	cmp	r0, #127	; 0x7f
  4207b4:	d90b      	bls.n	4207ce <.LCFI102>
{
  4207b6:	b430      	push	{r4, r5}

004207b8 <.LBB168>:
        if (value >> ((i - 1) * WOLFSSL_BIT_SIZE))
  4207b8:	0e03      	lsrs	r3, r0, #24
  4207ba:	d111      	bne.n	4207e0 <.LVL545>

004207bc <.LVL534>:
  4207bc:	0c03      	lsrs	r3, r0, #16
  4207be:	d10b      	bne.n	4207d8 <.LVL543>

004207c0 <.LVL535>:
  4207c0:	0a03      	lsrs	r3, r0, #8
  4207c2:	d10b      	bne.n	4207dc <.LVL544>

004207c4 <.LVL536>:
  4207c4:	b930      	cbnz	r0, 4207d4 <.LBB171>

004207c6 <.LBE168>:
        output[i++] = (byte)(BytePrecision(length) | ASN_LONG_LENGTH);
  4207c6:	2380      	movs	r3, #128	; 0x80
  4207c8:	700b      	strb	r3, [r1, #0]

004207ca <.LVL538>:
  4207ca:	2001      	movs	r0, #1

004207cc <.LVL539>:
  4207cc:	e01a      	b.n	420804 <.LVL550>

004207ce <.LCFI102>:
        output[i++] = (byte)length;
  4207ce:	7008      	strb	r0, [r1, #0]
  4207d0:	2001      	movs	r0, #1

004207d2 <.LVL541>:
  4207d2:	4770      	bx	lr

004207d4 <.LBB171>:
    for (i = sizeof(value); i; --i)
  4207d4:	2501      	movs	r5, #1
  4207d6:	e004      	b.n	4207e2 <.LBE171>

004207d8 <.LVL543>:
  4207d8:	2503      	movs	r5, #3
  4207da:	e002      	b.n	4207e2 <.LBE171>

004207dc <.LVL544>:
  4207dc:	2502      	movs	r5, #2
  4207de:	e000      	b.n	4207e2 <.LBE171>

004207e0 <.LVL545>:
        if (value >> ((i - 1) * WOLFSSL_BIT_SIZE))
  4207e0:	2504      	movs	r5, #4

004207e2 <.LBE171>:
        output[i++] = (byte)(BytePrecision(length) | ASN_LONG_LENGTH);
  4207e2:	f065 037f 	orn	r3, r5, #127	; 0x7f
  4207e6:	700b      	strb	r3, [r1, #0]

004207e8 <.LVL547>:
  4207e8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
  4207ec:	442b      	add	r3, r5
  4207ee:	00db      	lsls	r3, r3, #3
  4207f0:	460a      	mov	r2, r1
  4207f2:	4429      	add	r1, r5

004207f4 <.LVL548>:
            output[i] = (byte)(length >> ((j - 1) * WOLFSSL_BIT_SIZE));
  4207f4:	fa20 f403 	lsr.w	r4, r0, r3
  4207f8:	f802 4f01 	strb.w	r4, [r2, #1]!
  4207fc:	3b08      	subs	r3, #8
        for (j = BytePrecision(length); j; --j) {
  4207fe:	428a      	cmp	r2, r1
  420800:	d1f8      	bne.n	4207f4 <.LVL548>
  420802:	1c68      	adds	r0, r5, #1

00420804 <.LVL550>:
}
  420804:	bc30      	pop	{r4, r5}

00420806 <.LCFI104>:
  420806:	4770      	bx	lr

Disassembly of section .text.bi_windup%254:

00420808 <bi_windup>:
{
  420808:	b410      	push	{r4}

0042080a <.LCFI17>:
    if (s->bi_valid > 8) {
  42080a:	f241 63bc 	movw	r3, #5820	; 0x16bc
  42080e:	58c3      	ldr	r3, [r0, r3]
  420810:	2b08      	cmp	r3, #8
  420812:	dc13      	bgt.n	42083c <.LCFI19>
    } else if (s->bi_valid > 0) {
  420814:	2b00      	cmp	r3, #0
  420816:	dd07      	ble.n	420828 <.LCFI17+0x1e>
        put_byte(s, (Byte)s->bi_buf);
  420818:	6882      	ldr	r2, [r0, #8]
  42081a:	6943      	ldr	r3, [r0, #20]
  42081c:	1c59      	adds	r1, r3, #1
  42081e:	6141      	str	r1, [r0, #20]
  420820:	f241 61b8 	movw	r1, #5816	; 0x16b8
  420824:	5a41      	ldrh	r1, [r0, r1]
  420826:	54d1      	strb	r1, [r2, r3]
    s->bi_buf = 0;
  420828:	2300      	movs	r3, #0
  42082a:	f241 62b8 	movw	r2, #5816	; 0x16b8
  42082e:	5283      	strh	r3, [r0, r2]
    s->bi_valid = 0;
  420830:	f241 62bc 	movw	r2, #5820	; 0x16bc
  420834:	5083      	str	r3, [r0, r2]
}
  420836:	f85d 4b04 	ldr.w	r4, [sp], #4

0042083a <.LCFI18>:
  42083a:	4770      	bx	lr

0042083c <.LCFI19>:
        put_short(s, s->bi_buf);
  42083c:	6881      	ldr	r1, [r0, #8]
  42083e:	6942      	ldr	r2, [r0, #20]
  420840:	1c53      	adds	r3, r2, #1
  420842:	6143      	str	r3, [r0, #20]
  420844:	f241 63b8 	movw	r3, #5816	; 0x16b8
  420848:	5ac4      	ldrh	r4, [r0, r3]
  42084a:	548c      	strb	r4, [r1, r2]
  42084c:	6881      	ldr	r1, [r0, #8]
  42084e:	6942      	ldr	r2, [r0, #20]
  420850:	1c54      	adds	r4, r2, #1
  420852:	6144      	str	r4, [r0, #20]
  420854:	5ac3      	ldrh	r3, [r0, r3]
  420856:	0a1b      	lsrs	r3, r3, #8
  420858:	548b      	strb	r3, [r1, r2]
  42085a:	e7e5      	b.n	420828 <.LCFI17+0x1e>

Disassembly of section .rodata%255:

0042085c <.rodata%255>:
  42085c:	61766e69 	.word	0x61766e69
  420860:	2064696c 	.word	0x2064696c
  420864:	74736964 	.word	0x74736964
  420868:	65636e61 	.word	0x65636e61
  42086c:	6f6f7420 	.word	0x6f6f7420
  420870:	72616620 	.word	0x72616620
  420874:	63616220 	.word	0x63616220
  420878:	0000006b 	.word	0x0000006b
  42087c:	61766e69 	.word	0x61766e69
  420880:	2064696c 	.word	0x2064696c
  420884:	74736964 	.word	0x74736964
  420888:	65636e61 	.word	0x65636e61
  42088c:	646f6320 	.word	0x646f6320
  420890:	00000065 	.word	0x00000065
  420894:	61766e69 	.word	0x61766e69
  420898:	2064696c 	.word	0x2064696c
  42089c:	6574696c 	.word	0x6574696c
  4208a0:	2f6c6172 	.word	0x2f6c6172
  4208a4:	676e656c 	.word	0x676e656c
  4208a8:	63206874 	.word	0x63206874
  4208ac:	0065646f 	.word	0x0065646f

Disassembly of section .text.SYS_TIME_RemoveFromList%256:

004208b0 <SYS_TIME_RemoveFromList>:
{
  4208b0:	4601      	mov	r1, r0
    SYS_TIME_TIMER_OBJ* tmr = counter->tmrActive;
  4208b2:	4b13      	ldr	r3, [pc, #76]	; (420900 <.LVL50+0x2>)
  4208b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30

004208b6 <.LVL38>:
    while ((tmr != NULL) && (tmr != delTimer))
  4208b6:	b10a      	cbz	r2, 4208bc <.LVL38+0x6>
  4208b8:	4282      	cmp	r2, r0
  4208ba:	d103      	bne.n	4208c4 <.LVL41>
    tmr = counter->tmrActive;
  4208bc:	4613      	mov	r3, r2
    SYS_TIME_TIMER_OBJ* prevTmr = NULL;
  4208be:	2200      	movs	r2, #0

004208c0 <.LVL39>:
  4208c0:	e005      	b.n	4208ce <.LVL43>

004208c2 <.LVL40>:
        tmr = tmr->tmrNext;
  4208c2:	461a      	mov	r2, r3

004208c4 <.LVL41>:
  4208c4:	6993      	ldr	r3, [r2, #24]

004208c6 <.LVL42>:
    while ((tmr != NULL) && (tmr != delTimer))
  4208c6:	2b00      	cmp	r3, #0
  4208c8:	bf18      	it	ne
  4208ca:	4299      	cmpne	r1, r3
  4208cc:	d1f9      	bne.n	4208c2 <.LVL40>

004208ce <.LVL43>:
    if (tmr == NULL)
  4208ce:	b1ab      	cbz	r3, 4208fc <.LCFI4>
{
  4208d0:	b410      	push	{r4}

004208d2 <.LCFI1>:
    if (delTimer->tmrNext != NULL)
  4208d2:	698b      	ldr	r3, [r1, #24]

004208d4 <.LVL44>:
  4208d4:	b11b      	cbz	r3, 4208de <.LVL45+0x6>
        delTimer->tmrNext->relativeTimePending += delTimer->relativeTimePending;
  4208d6:	6898      	ldr	r0, [r3, #8]

004208d8 <.LVL45>:
  4208d8:	688c      	ldr	r4, [r1, #8]
  4208da:	4420      	add	r0, r4
  4208dc:	6098      	str	r0, [r3, #8]
    if (prevTmr == NULL)
  4208de:	b13a      	cbz	r2, 4208f0 <.LCFI3>
        prevTmr->tmrNext = delTimer->tmrNext;
  4208e0:	698b      	ldr	r3, [r1, #24]
  4208e2:	6193      	str	r3, [r2, #24]
    bool isHeadTimerUpdated = false;
  4208e4:	2000      	movs	r0, #0

004208e6 <.LVL46>:
    delTimer->tmrNext = NULL;
  4208e6:	2300      	movs	r3, #0
  4208e8:	618b      	str	r3, [r1, #24]
}
  4208ea:	f85d 4b04 	ldr.w	r4, [sp], #4

004208ee <.LCFI2>:
  4208ee:	4770      	bx	lr

004208f0 <.LCFI3>:
        counter->tmrActive = counter->tmrActive->tmrNext;
  4208f0:	4b03      	ldr	r3, [pc, #12]	; (420900 <.LVL50+0x2>)
  4208f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4208f4:	6992      	ldr	r2, [r2, #24]
  4208f6:	631a      	str	r2, [r3, #48]	; 0x30

004208f8 <.LVL48>:
        isHeadTimerUpdated = true;
  4208f8:	2001      	movs	r0, #1
  4208fa:	e7f4      	b.n	4208e6 <.LVL46>

004208fc <.LCFI4>:
        return isHeadTimerUpdated;
  4208fc:	2000      	movs	r0, #0

004208fe <.LVL50>:
  4208fe:	4770      	bx	lr
  420900:	2040d624 	.word	0x2040d624

Disassembly of section .text.wc_ecc_curve_load_item%257:

00420904 <wc_ecc_curve_load_item>:
{
  420904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

00420908 <.LCFI6>:
    if (curve->spec_use >= curve->spec_count) {
  420908:	6a14      	ldr	r4, [r2, #32]
  42090a:	69d6      	ldr	r6, [r2, #28]
  42090c:	42b4      	cmp	r4, r6
  42090e:	d21e      	bcs.n	42094e <.LVL39>
  420910:	461f      	mov	r7, r3
  420912:	4616      	mov	r6, r2
  420914:	460d      	mov	r5, r1
  420916:	4680      	mov	r8, r0
    *dst = &curve->spec_ints[curve->spec_use++];
  420918:	6990      	ldr	r0, [r2, #24]

0042091a <.LVL31>:
  42091a:	1c63      	adds	r3, r4, #1

0042091c <.LVL32>:
  42091c:	6213      	str	r3, [r2, #32]
  42091e:	f44f 730a 	mov.w	r3, #552	; 0x228
  420922:	fb03 0004 	mla	r0, r3, r4, r0
  420926:	6008      	str	r0, [r1, #0]
    err = mp_init(*dst);
  420928:	f001 fcc0 	bl	4222ac <.LFE39>

0042092c <.LVL33>:
    if (err == MP_OKAY) {
  42092c:	4603      	mov	r3, r0
  42092e:	b110      	cbz	r0, 420936 <.LVL35>

00420930 <.LVL34>:
}
  420930:	4618      	mov	r0, r3
  420932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00420936 <.LVL35>:
        curve->load_mask |= mask;
  420936:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
  42093a:	431f      	orrs	r7, r3
  42093c:	f886 7024 	strb.w	r7, [r6, #36]	; 0x24
        err = mp_read_radix(*dst, src, 16);
  420940:	2210      	movs	r2, #16
  420942:	4641      	mov	r1, r8
  420944:	6828      	ldr	r0, [r5, #0]

00420946 <.LVL36>:
  420946:	f7fd fbb9 	bl	41e0bc <mp_read_radix>

0042094a <.LVL37>:
  42094a:	4603      	mov	r3, r0

0042094c <.LVL38>:
  42094c:	e7f0      	b.n	420930 <.LVL34>

0042094e <.LVL39>:
        return ECC_BAD_ARG_E;
  42094e:	f06f 03a9 	mvn.w	r3, #169	; 0xa9

00420952 <.LVL40>:
  420952:	e7ed      	b.n	420930 <.LVL34>

Disassembly of section .text.__libc_init_array%258:

00420954 <__libc_init_array>:
  420954:	b570      	push	{r4, r5, r6, lr}

00420956 <.LCFI0>:
  420956:	4e0f      	ldr	r6, [pc, #60]	; (420994 <.LVL13+0x2>)
  420958:	4d0f      	ldr	r5, [pc, #60]	; (420998 <.LVL13+0x6>)
  42095a:	1b76      	subs	r6, r6, r5

0042095c <.LVL0>:
  42095c:	10b6      	asrs	r6, r6, #2

0042095e <.LVL1>:
  42095e:	bf18      	it	ne
  420960:	2400      	movne	r4, #0
  420962:	d005      	beq.n	420970 <.LVL5>

00420964 <.LVL2>:
  420964:	3401      	adds	r4, #1

00420966 <.LVL3>:
  420966:	f855 3b04 	ldr.w	r3, [r5], #4
  42096a:	4798      	blx	r3

0042096c <.LVL4>:
  42096c:	42a6      	cmp	r6, r4
  42096e:	d1f9      	bne.n	420964 <.LVL2>

00420970 <.LVL5>:
  420970:	4e0a      	ldr	r6, [pc, #40]	; (42099c <.LVL13+0xa>)

00420972 <.LVL6>:
  420972:	4d0b      	ldr	r5, [pc, #44]	; (4209a0 <.LVL13+0xe>)
  420974:	1b76      	subs	r6, r6, r5
  420976:	f7df fbf7 	bl	400168 <_init>

0042097a <.LVL7>:
  42097a:	10b6      	asrs	r6, r6, #2

0042097c <.LVL8>:
  42097c:	bf18      	it	ne
  42097e:	2400      	movne	r4, #0
  420980:	d006      	beq.n	420990 <.LVL12>

00420982 <.LVL9>:
  420982:	3401      	adds	r4, #1

00420984 <.LVL10>:
  420984:	f855 3b04 	ldr.w	r3, [r5], #4
  420988:	4798      	blx	r3

0042098a <.LVL11>:
  42098a:	42a6      	cmp	r6, r4
  42098c:	d1f9      	bne.n	420982 <.LVL9>
  42098e:	bd70      	pop	{r4, r5, r6, pc}

00420990 <.LVL12>:
  420990:	bd70      	pop	{r4, r5, r6, pc}

00420992 <.LVL13>:
  420992:	bf00      	nop
  420994:	00400174 	.word	0x00400174
  420998:	00400174 	.word	0x00400174
  42099c:	0040017c 	.word	0x0040017c
  4209a0:	00400174 	.word	0x00400174

Disassembly of section .text.fp_cmp_d%259:

004209a4 <fp_cmp_d>:
{
  4209a4:	b410      	push	{r4}

004209a6 <.LCFI10>:
  if (a->used == 0 && b == 0)
  4209a6:	6804      	ldr	r4, [r0, #0]
  4209a8:	fab4 f284 	clz	r2, r4
  4209ac:	0952      	lsrs	r2, r2, #5
  4209ae:	460b      	mov	r3, r1
  4209b0:	b911      	cbnz	r1, 4209b8 <.LVL93>
  4209b2:	b10a      	cbz	r2, 4209b8 <.LVL93>
    return FP_EQ;
  4209b4:	2000      	movs	r0, #0

004209b6 <.LVL92>:
  4209b6:	e007      	b.n	4209c8 <.LVL94>

004209b8 <.LVL93>:
  if ((b && a->used == 0) || a->sign == FP_NEG) {
  4209b8:	b103      	cbz	r3, 4209bc <.LVL93+0x4>
  4209ba:	b98a      	cbnz	r2, 4209e0 <.LVL97>
  4209bc:	6842      	ldr	r2, [r0, #4]
  4209be:	2a01      	cmp	r2, #1
  4209c0:	d011      	beq.n	4209e6 <.LVL99>
  if (a->used > 1) {
  4209c2:	2c01      	cmp	r4, #1
  4209c4:	dd03      	ble.n	4209ce <.LCFI12>
    return FP_GT;
  4209c6:	2001      	movs	r0, #1

004209c8 <.LVL94>:
}
  4209c8:	f85d 4b04 	ldr.w	r4, [sp], #4

004209cc <.LCFI11>:
  4209cc:	4770      	bx	lr

004209ce <.LCFI12>:
  if (a->dp[0] > b) {
  4209ce:	6880      	ldr	r0, [r0, #8]

004209d0 <.LVL96>:
  4209d0:	4283      	cmp	r3, r0
  4209d2:	d30b      	bcc.n	4209ec <.LVL100+0x2>
  } else if (a->dp[0] < b) {
  4209d4:	4283      	cmp	r3, r0
  4209d6:	f04f 30ff 	mov.w	r0, #4294967295
  4209da:	bf98      	it	ls
  4209dc:	2000      	movls	r0, #0
  4209de:	e7f3      	b.n	4209c8 <.LVL94>

004209e0 <.LVL97>:
    return FP_LT;
  4209e0:	f04f 30ff 	mov.w	r0, #4294967295

004209e4 <.LVL98>:
  4209e4:	e7f0      	b.n	4209c8 <.LVL94>

004209e6 <.LVL99>:
  4209e6:	f04f 30ff 	mov.w	r0, #4294967295

004209ea <.LVL100>:
  4209ea:	e7ed      	b.n	4209c8 <.LVL94>
    return FP_GT;
  4209ec:	2001      	movs	r0, #1
  4209ee:	e7eb      	b.n	4209c8 <.LVL94>

Disassembly of section .text.flush_pending%260:

004209f0 <flush_pending>:
{
  4209f0:	b570      	push	{r4, r5, r6, lr}

004209f2 <.LCFI6>:
  4209f2:	4605      	mov	r5, r0
    deflate_state *s = strm->state;
  4209f4:	69c6      	ldr	r6, [r0, #28]
    _tr_flush_bits(s);
  4209f6:	4630      	mov	r0, r6

004209f8 <.LVL106>:
  4209f8:	f001 fdd8 	bl	4225ac <_tr_flush_bits>

004209fc <.LVL107>:
    len = s->pending;
  4209fc:	6974      	ldr	r4, [r6, #20]

004209fe <.LVL108>:
  4209fe:	692b      	ldr	r3, [r5, #16]
  420a00:	429c      	cmp	r4, r3
  420a02:	bf28      	it	cs
  420a04:	461c      	movcs	r4, r3
    if (len == 0) return;
  420a06:	b904      	cbnz	r4, 420a0a <.LVL111>

00420a08 <.LVL110>:
  420a08:	bd70      	pop	{r4, r5, r6, pc}

00420a0a <.LVL111>:
    zmemcpy(strm->next_out, s->pending_out, len);
  420a0a:	4622      	mov	r2, r4
  420a0c:	6931      	ldr	r1, [r6, #16]
  420a0e:	68e8      	ldr	r0, [r5, #12]
  420a10:	f7f9 ffb8 	bl	41a984 <.LFE14>

00420a14 <.LVL112>:
    strm->next_out  += len;
  420a14:	68eb      	ldr	r3, [r5, #12]
  420a16:	4423      	add	r3, r4
  420a18:	60eb      	str	r3, [r5, #12]
    s->pending_out  += len;
  420a1a:	6933      	ldr	r3, [r6, #16]
  420a1c:	4423      	add	r3, r4
  420a1e:	6133      	str	r3, [r6, #16]
    strm->total_out += len;
  420a20:	696b      	ldr	r3, [r5, #20]
  420a22:	4423      	add	r3, r4
  420a24:	616b      	str	r3, [r5, #20]
    strm->avail_out  -= len;
  420a26:	692b      	ldr	r3, [r5, #16]
  420a28:	1b1b      	subs	r3, r3, r4
  420a2a:	612b      	str	r3, [r5, #16]
    s->pending -= len;
  420a2c:	6973      	ldr	r3, [r6, #20]
  420a2e:	1b1c      	subs	r4, r3, r4

00420a30 <.LVL113>:
  420a30:	6174      	str	r4, [r6, #20]
    if (s->pending == 0) {
  420a32:	2c00      	cmp	r4, #0
  420a34:	d1e8      	bne.n	420a08 <.LVL110>
        s->pending_out = s->pending_buf;
  420a36:	68b3      	ldr	r3, [r6, #8]
  420a38:	6133      	str	r3, [r6, #16]
  420a3a:	e7e5      	b.n	420a08 <.LVL110>

Disassembly of section .text._tr_init%261:

00420a3c <_tr_init>:
{
  420a3c:	b508      	push	{r3, lr}

00420a3e <.LCFI20>:
    s->l_desc.dyn_tree = s->dyn_ltree;
  420a3e:	f100 0294 	add.w	r2, r0, #148	; 0x94
  420a42:	f8c0 2b18 	str.w	r2, [r0, #2840]	; 0xb18
    s->l_desc.stat_desc = &static_l_desc;
  420a46:	4a0d      	ldr	r2, [pc, #52]	; (420a7c <.LVL286+0x2>)
  420a48:	f8c0 2b20 	str.w	r2, [r0, #2848]	; 0xb20
    s->d_desc.dyn_tree = s->dyn_dtree;
  420a4c:	f600 1288 	addw	r2, r0, #2440	; 0x988
  420a50:	f8c0 2b24 	str.w	r2, [r0, #2852]	; 0xb24
    s->d_desc.stat_desc = &static_d_desc;
  420a54:	4a0a      	ldr	r2, [pc, #40]	; (420a80 <.LVL286+0x6>)
  420a56:	f8c0 2b2c 	str.w	r2, [r0, #2860]	; 0xb2c
    s->bl_desc.dyn_tree = s->bl_tree;
  420a5a:	f600 227c 	addw	r2, r0, #2684	; 0xa7c
  420a5e:	f8c0 2b30 	str.w	r2, [r0, #2864]	; 0xb30
    s->bl_desc.stat_desc = &static_bl_desc;
  420a62:	4a08      	ldr	r2, [pc, #32]	; (420a84 <.LVL286+0xa>)
  420a64:	f8c0 2b38 	str.w	r2, [r0, #2872]	; 0xb38
    s->bi_buf = 0;
  420a68:	2200      	movs	r2, #0
  420a6a:	f241 61b8 	movw	r1, #5816	; 0x16b8
  420a6e:	5242      	strh	r2, [r0, r1]
    s->bi_valid = 0;
  420a70:	f241 61bc 	movw	r1, #5820	; 0x16bc
  420a74:	5042      	str	r2, [r0, r1]
    init_block(s);
  420a76:	f7ff fdb9 	bl	4205ec <.LFE2>

00420a7a <.LVL286>:
  420a7a:	bd08      	pop	{r3, pc}
  420a7c:	2040d704 	.word	0x2040d704
  420a80:	2040d6f0 	.word	0x2040d6f0
  420a84:	2040d6dc 	.word	0x2040d6dc

Disassembly of section .rodata.extra_blbits%262:

00420a88 <extra_blbits>:
	...
  420ac8:	00000002 00000003 00000007              ............

Disassembly of section .text.Console_UART_Write%263:

00420ad4 <Console_UART_Write>:
{
  420ad4:	b538      	push	{r3, r4, r5, lr}

00420ad6 <.LCFI0>:
  420ad6:	460d      	mov	r5, r1
  420ad8:	4614      	mov	r4, r2

00420ada <.LVL3>:
    if (writeQueue.numElem >= writeQueue.elemArrSz)
  420ada:	4b10      	ldr	r3, [pc, #64]	; (420b1c <.LVL9+0x4>)
  420adc:	689a      	ldr	r2, [r3, #8]

00420ade <.LVL4>:
  420ade:	691b      	ldr	r3, [r3, #16]
  420ae0:	429a      	cmp	r2, r3
  420ae2:	d216      	bcs.n	420b12 <.LVL7>

00420ae4 <.LBB4>:
    q->qPkts[q->nextPos] = pkt;
  420ae4:	4b0d      	ldr	r3, [pc, #52]	; (420b1c <.LVL9+0x4>)
  420ae6:	6859      	ldr	r1, [r3, #4]
  420ae8:	68da      	ldr	r2, [r3, #12]
  420aea:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
  420aee:	f842 5031 	str.w	r5, [r2, r1, lsl #3]
  420af2:	6044      	str	r4, [r0, #4]
    (q->nextPos < (q->elemArrSz - 1)) ? q->nextPos++ : (q->nextPos = 0);
  420af4:	685a      	ldr	r2, [r3, #4]
  420af6:	691b      	ldr	r3, [r3, #16]
  420af8:	3b01      	subs	r3, #1
  420afa:	429a      	cmp	r2, r3
  420afc:	bf34      	ite	cc
  420afe:	3201      	addcc	r2, #1
  420b00:	2200      	movcs	r2, #0
  420b02:	4b06      	ldr	r3, [pc, #24]	; (420b1c <.LVL9+0x4>)
  420b04:	605a      	str	r2, [r3, #4]
    q->numElem++;
  420b06:	4a05      	ldr	r2, [pc, #20]	; (420b1c <.LVL9+0x4>)
  420b08:	6893      	ldr	r3, [r2, #8]
  420b0a:	3301      	adds	r3, #1
  420b0c:	6093      	str	r3, [r2, #8]

00420b0e <.LBE4>:
}
  420b0e:	4620      	mov	r0, r4
  420b10:	bd38      	pop	{r3, r4, r5, pc}

00420b12 <.LVL7>:
        popQueue(&writeQueue);
  420b12:	4802      	ldr	r0, [pc, #8]	; (420b1c <.LVL9+0x4>)

00420b14 <.LVL8>:
  420b14:	f001 f9a4 	bl	421e60 <.LFE4>

00420b18 <.LVL9>:
  420b18:	e7e4      	b.n	420ae4 <.LBB4>
  420b1a:	bf00      	nop
  420b1c:	2040d72c 	.word	0x2040d72c

Disassembly of section .text.sprintf%264:

00420b20 <sprintf>:
  420b20:	b40e      	push	{r1, r2, r3}

00420b22 <.LCFI6>:
  420b22:	b5f0      	push	{r4, r5, r6, r7, lr}

00420b24 <.LCFI7>:
  420b24:	b09c      	sub	sp, #112	; 0x70

00420b26 <.LCFI8>:
  420b26:	ab21      	add	r3, sp, #132	; 0x84
  420b28:	490f      	ldr	r1, [pc, #60]	; (420b68 <.LCFI11+0x4>)
  420b2a:	f853 2b04 	ldr.w	r2, [r3], #4
  420b2e:	9301      	str	r3, [sp, #4]
  420b30:	4605      	mov	r5, r0
  420b32:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  420b36:	6808      	ldr	r0, [r1, #0]

00420b38 <.LVL4>:
  420b38:	9502      	str	r5, [sp, #8]
  420b3a:	f44f 7702 	mov.w	r7, #520	; 0x208
  420b3e:	f64f 76ff 	movw	r6, #65535	; 0xffff
  420b42:	a902      	add	r1, sp, #8
  420b44:	9506      	str	r5, [sp, #24]
  420b46:	f8ad 7014 	strh.w	r7, [sp, #20]
  420b4a:	9404      	str	r4, [sp, #16]
  420b4c:	9407      	str	r4, [sp, #28]
  420b4e:	f8ad 6016 	strh.w	r6, [sp, #22]
  420b52:	f7e3 fec9 	bl	4048e8 <_svfprintf_r>

00420b56 <.LVL5>:
  420b56:	9b02      	ldr	r3, [sp, #8]
  420b58:	2200      	movs	r2, #0
  420b5a:	701a      	strb	r2, [r3, #0]
  420b5c:	b01c      	add	sp, #112	; 0x70

00420b5e <.LCFI9>:
  420b5e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

00420b62 <.LCFI10>:
  420b62:	b003      	add	sp, #12

00420b64 <.LCFI11>:
  420b64:	4770      	bx	lr
  420b66:	bf00      	nop
  420b68:	2040d768 	.word	0x2040d768

Disassembly of section .text._Balloc%265:

00420b6c <_Balloc>:
  420b6c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  420b6e:	b570      	push	{r4, r5, r6, lr}

00420b70 <.LCFI0>:
  420b70:	4605      	mov	r5, r0
  420b72:	460c      	mov	r4, r1
  420b74:	b14b      	cbz	r3, 420b8a <.LVL3>

00420b76 <.LVL1>:
  420b76:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]

00420b7a <.LVL2>:
  420b7a:	b180      	cbz	r0, 420b9e <.LVL6>
  420b7c:	6802      	ldr	r2, [r0, #0]
  420b7e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  420b82:	2300      	movs	r3, #0
  420b84:	6103      	str	r3, [r0, #16]
  420b86:	60c3      	str	r3, [r0, #12]
  420b88:	bd70      	pop	{r4, r5, r6, pc}

00420b8a <.LVL3>:
  420b8a:	2221      	movs	r2, #33	; 0x21
  420b8c:	2104      	movs	r1, #4

00420b8e <.LVL4>:
  420b8e:	f7ff fc3f 	bl	420410 <.LFE19>

00420b92 <.LVL5>:
  420b92:	64e8      	str	r0, [r5, #76]	; 0x4c
  420b94:	4603      	mov	r3, r0
  420b96:	2800      	cmp	r0, #0
  420b98:	d1ed      	bne.n	420b76 <.LVL1>
  420b9a:	2000      	movs	r0, #0
  420b9c:	bd70      	pop	{r4, r5, r6, pc}

00420b9e <.LVL6>:
  420b9e:	2101      	movs	r1, #1
  420ba0:	fa01 f604 	lsl.w	r6, r1, r4
  420ba4:	1d72      	adds	r2, r6, #5
  420ba6:	4628      	mov	r0, r5

00420ba8 <.LVL8>:
  420ba8:	0092      	lsls	r2, r2, #2
  420baa:	f7ff fc31 	bl	420410 <.LFE19>

00420bae <.LVL9>:
  420bae:	2800      	cmp	r0, #0
  420bb0:	d0f3      	beq.n	420b9a <.LVL5+0x8>
  420bb2:	6044      	str	r4, [r0, #4]
  420bb4:	6086      	str	r6, [r0, #8]
  420bb6:	e7e4      	b.n	420b82 <.LVL2+0x8>

Disassembly of section .text.fp_add%266:

00420bb8 <fp_add>:
{
  420bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

00420bbc <.LCFI16>:
  420bbc:	4604      	mov	r4, r0
  420bbe:	460d      	mov	r5, r1
  420bc0:	4616      	mov	r6, r2
  sa = a->sign;
  420bc2:	6847      	ldr	r7, [r0, #4]
  sb = b->sign;
  420bc4:	f8d1 8004 	ldr.w	r8, [r1, #4]
  if (sa == sb) {
  420bc8:	4547      	cmp	r7, r8
  420bca:	d00c      	beq.n	420be6 <.LVL123>
    if (fp_cmp_mag (a, b) == FP_LT) {
  420bcc:	f7ff fa33 	bl	420036 <.LFE16>

00420bd0 <.LVL121>:
  420bd0:	f1b0 3fff 	cmp.w	r0, #4294967295
  420bd4:	d00c      	beq.n	420bf0 <.LVL124+0x4>
      c->sign = sa;
  420bd6:	6077      	str	r7, [r6, #4]
      s_fp_sub (a, b, c);
  420bd8:	4632      	mov	r2, r6
  420bda:	4629      	mov	r1, r5
  420bdc:	4620      	mov	r0, r4
  420bde:	f7fb fb7f 	bl	41c2e0 <.LBE840>

00420be2 <.LVL122>:
  420be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00420be6 <.LVL123>:
    c->sign = sa;
  420be6:	6057      	str	r7, [r2, #4]
    s_fp_add (a, b, c);
  420be8:	f7fb fe25 	bl	41c836 <.LFE54>

00420bec <.LVL124>:
  420bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      c->sign = sb;
  420bf0:	f8c6 8004 	str.w	r8, [r6, #4]
      s_fp_sub (b, a, c);
  420bf4:	4632      	mov	r2, r6
  420bf6:	4621      	mov	r1, r4
  420bf8:	4628      	mov	r0, r5
  420bfa:	f7fb fb71 	bl	41c2e0 <.LBE840>

00420bfe <.LVL126>:
  420bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section .text.wc_ecc_init_ex%267:

00420c02 <wc_ecc_init_ex>:
    if (key == NULL) {
  420c02:	b1d8      	cbz	r0, 420c3c <.LCFI75>
{
  420c04:	b530      	push	{r4, r5, lr}

00420c06 <.LCFI72>:
  420c06:	b083      	sub	sp, #12

00420c08 <.LCFI73>:
  420c08:	4604      	mov	r4, r0
  420c0a:	460d      	mov	r5, r1
    XMEMSET(key, 0, sizeof(ecc_key));
  420c0c:	f640 02b8 	movw	r2, #2232	; 0x8b8

00420c10 <.LVL931>:
  420c10:	2100      	movs	r1, #0

00420c12 <.LVL932>:
  420c12:	f7fd fc81 	bl	41e518 <.LFE14>

00420c16 <.LVL933>:
    key->state = ECC_STATE_NONE;
  420c16:	2300      	movs	r3, #0
    ret = mp_init_multi(&key->k, key->pubkey.x, key->pubkey.y, key->pubkey.z,
  420c18:	9301      	str	r3, [sp, #4]
  420c1a:	9300      	str	r3, [sp, #0]
  420c1c:	f504 638d 	add.w	r3, r4, #1128	; 0x468
  420c20:	f504 7210 	add.w	r2, r4, #576	; 0x240
  420c24:	f104 0118 	add.w	r1, r4, #24
  420c28:	f504 60d2 	add.w	r0, r4, #1680	; 0x690
  420c2c:	f000 faaa 	bl	421184 <mp_init_multi>

00420c30 <.LVL934>:
    if (ret != MP_OKAY) {
  420c30:	4603      	mov	r3, r0
  420c32:	b938      	cbnz	r0, 420c44 <.LCFI76>
    key->heap = heap;
  420c34:	6165      	str	r5, [r4, #20]
}
  420c36:	4618      	mov	r0, r3

00420c38 <.LVL935>:
  420c38:	b003      	add	sp, #12

00420c3a <.LCFI74>:
  420c3a:	bd30      	pop	{r4, r5, pc}

00420c3c <.LCFI75>:
        return BAD_FUNC_ARG;
  420c3c:	f06f 03ac 	mvn.w	r3, #172	; 0xac
}
  420c40:	4618      	mov	r0, r3

00420c42 <.LVL937>:
  420c42:	4770      	bx	lr

00420c44 <.LCFI76>:
        return MEMORY_E;
  420c44:	f06f 037c 	mvn.w	r3, #124	; 0x7c
  420c48:	e7f5      	b.n	420c36 <.LVL934+0x6>

Disassembly of section .text.SYS_CONSOLE_Initialize%268:

00420c4c <SYS_CONSOLE_Initialize>:
SYS_MODULE_OBJ SYS_CONSOLE_Initialize( const SYS_MODULE_INDEX index, const SYS_MODULE_INIT * const init )
{
    SYS_CONSOLE_INIT *initConfig = (SYS_CONSOLE_INIT*)init;

    /* Confirm valid arguments */
    if (index >= SYS_CONSOLE_DEVICE_MAX_INSTANCES || init == NULL)
  420c4c:	b908      	cbnz	r0, 420c52 <SYS_CONSOLE_Initialize+0x6>
  420c4e:	4603      	mov	r3, r0
  420c50:	b911      	cbnz	r1, 420c58 <.LVL2>
        return SYS_MODULE_OBJ_INVALID;
  420c52:	f04f 30ff 	mov.w	r0, #4294967295

00420c56 <.LVL1>:
  420c56:	4770      	bx	lr

00420c58 <.LVL2>:

    if ((consoleDeviceInstance[index].consoleDeviceInstanceStatus == SYS_STATUS_UNINITIALIZED) && initConfig)
  420c58:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  420c5c:	480c      	ldr	r0, [pc, #48]	; (420c90 <.LVL5+0x6>)

00420c5e <.LVL3>:
  420c5e:	f910 2022 	ldrsb.w	r2, [r0, r2, lsl #2]
  420c62:	b992      	cbnz	r2, 420c8a <.LVL5>
  420c64:	b189      	cbz	r1, 420c8a <.LVL5>
{
  420c66:	b430      	push	{r4, r5}

00420c68 <.LCFI0>:
    {
        consoleDeviceInstance[index].consoleDevHandle = CONSOLE_DEVICE_HANDLE_INVALID;
  420c68:	4604      	mov	r4, r0
  420c6a:	005a      	lsls	r2, r3, #1
  420c6c:	18d0      	adds	r0, r2, r3
  420c6e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  420c72:	f04f 35ff 	mov.w	r5, #4294967295
  420c76:	6085      	str	r5, [r0, #8]

        consoleDeviceInstance[index].consoleInstanceDevDesc = initConfig->consDevDesc;
  420c78:	6849      	ldr	r1, [r1, #4]

00420c7a <.LVL4>:
  420c7a:	6041      	str	r1, [r0, #4]
        consoleDeviceInstance[index].consoleDeviceInstanceStatus = SYS_STATUS_READY;
  420c7c:	441a      	add	r2, r3
  420c7e:	2102      	movs	r1, #2
  420c80:	f804 1022 	strb.w	r1, [r4, r2, lsl #2]

        return index;
  420c84:	4618      	mov	r0, r3
    }

    return SYS_MODULE_OBJ_INVALID;
}
  420c86:	bc30      	pop	{r4, r5}

00420c88 <.LCFI1>:
  420c88:	4770      	bx	lr

00420c8a <.LVL5>:
    return SYS_MODULE_OBJ_INVALID;
  420c8a:	f04f 30ff 	mov.w	r0, #4294967295
  420c8e:	4770      	bx	lr
  420c90:	2040d740 	.word	0x2040d740

Disassembly of section .text.Console_UART_Status%269:

00420c94 <Console_UART_Status>:
    if (consUartData.state == CONSOLE_UART_STATE_INIT)
  420c94:	4b0e      	ldr	r3, [pc, #56]	; (420cd0 <.LFE0+0x3c>)
  420c96:	781b      	ldrb	r3, [r3, #0]
  420c98:	b1ab      	cbz	r3, 420cc6 <Console_UART_Status+0x32>
    if (consUartData.state == CONSOLE_UART_STATE_CRITICAL_ERROR || consUartData.state == CONSOLE_UART_STATE_OPERATIONAL_ERROR || consUartData.overflowFlag)
  420c9a:	3b07      	subs	r3, #7
  420c9c:	b2db      	uxtb	r3, r3
  420c9e:	2b01      	cmp	r3, #1
  420ca0:	d913      	bls.n	420cca <Console_UART_Status+0x36>
  420ca2:	4b0b      	ldr	r3, [pc, #44]	; (420cd0 <.LFE0+0x3c>)
  420ca4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
  420ca8:	b10b      	cbz	r3, 420cae <Console_UART_Status+0x1a>
        status = SYS_CONSOLE_STATUS_ERROR;
  420caa:	2003      	movs	r0, #3
  420cac:	4770      	bx	lr
        status = (writeQueue.numElem || readQueue.numElem) ? SYS_CONSOLE_STATUS_BUSY : SYS_CONSOLE_STATUS_CONFIGURED;
  420cae:	4b09      	ldr	r3, [pc, #36]	; (420cd4 <.LFE0+0x40>)
  420cb0:	689b      	ldr	r3, [r3, #8]
  420cb2:	b10b      	cbz	r3, 420cb8 <Console_UART_Status+0x24>
  420cb4:	2002      	movs	r0, #2
}
  420cb6:	4770      	bx	lr
        status = (writeQueue.numElem || readQueue.numElem) ? SYS_CONSOLE_STATUS_BUSY : SYS_CONSOLE_STATUS_CONFIGURED;
  420cb8:	4b07      	ldr	r3, [pc, #28]	; (420cd8 <.LFE0+0x44>)
  420cba:	689b      	ldr	r3, [r3, #8]
  420cbc:	2b00      	cmp	r3, #0
  420cbe:	bf14      	ite	ne
  420cc0:	2002      	movne	r0, #2
  420cc2:	2001      	moveq	r0, #1
  420cc4:	4770      	bx	lr
        return status;
  420cc6:	2000      	movs	r0, #0
  420cc8:	4770      	bx	lr
        status = SYS_CONSOLE_STATUS_ERROR;
  420cca:	2003      	movs	r0, #3
  420ccc:	4770      	bx	lr
  420cce:	bf00      	nop
  420cd0:	2040d5d4 	.word	0x2040d5d4
  420cd4:	2040d72c 	.word	0x2040d72c
  420cd8:	2040d718 	.word	0x2040d718

Disassembly of section .text.USART1_Write%270:

00420cdc <USART1_Write>:
bool USART1_Write( void *buffer, const size_t size )
{
    bool status = false;
    uint8_t * lBuffer = (uint8_t *)buffer;

    if(NULL != lBuffer)
  420cdc:	b1c8      	cbz	r0, 420d12 <.LVL38>
    {
        /* Check if transmit request is in progress */
        if(usart1Obj.txBusyStatus == false)
  420cde:	4b0f      	ldr	r3, [pc, #60]	; (420d1c <.LVL41+0x4>)
  420ce0:	7d1b      	ldrb	r3, [r3, #20]
  420ce2:	b9c3      	cbnz	r3, 420d16 <.LVL40>
        {
            usart1Obj.txBuffer = lBuffer;
  420ce4:	4b0d      	ldr	r3, [pc, #52]	; (420d1c <.LVL41+0x4>)
  420ce6:	6018      	str	r0, [r3, #0]
            usart1Obj.txSize = size;
  420ce8:	6059      	str	r1, [r3, #4]
            usart1Obj.txProcessedSize = 0;
  420cea:	2100      	movs	r1, #0

00420cec <.LVL35>:
  420cec:	6099      	str	r1, [r3, #8]
            usart1Obj.txBusyStatus = true;
  420cee:	2101      	movs	r1, #1
  420cf0:	7519      	strb	r1, [r3, #20]

00420cf2 <.LVL36>:
            status = true;

            /* Initiate the transfer by sending first byte */
            if(US_CSR_TXEMPTY_Msk == (USART1_REGS->US_CSR& US_CSR_TXEMPTY_Msk))
  420cf2:	4b0b      	ldr	r3, [pc, #44]	; (420d20 <.LVL41+0x8>)
  420cf4:	695b      	ldr	r3, [r3, #20]
  420cf6:	f413 7f00 	tst.w	r3, #512	; 0x200
  420cfa:	d004      	beq.n	420d06 <.LVL36+0x14>
            {
                USART1_REGS->US_THR = (US_THR_TXCHR(*lBuffer) & US_THR_TXCHR_Msk);
  420cfc:	7802      	ldrb	r2, [r0, #0]
  420cfe:	4b08      	ldr	r3, [pc, #32]	; (420d20 <.LVL41+0x8>)
  420d00:	61da      	str	r2, [r3, #28]
                usart1Obj.txProcessedSize++;
  420d02:	4b06      	ldr	r3, [pc, #24]	; (420d1c <.LVL41+0x4>)
  420d04:	6099      	str	r1, [r3, #8]
            }

            USART1_REGS->US_IER = US_IER_TXEMPTY_Msk;
  420d06:	f44f 7200 	mov.w	r2, #512	; 0x200
  420d0a:	4b05      	ldr	r3, [pc, #20]	; (420d20 <.LVL41+0x8>)
  420d0c:	609a      	str	r2, [r3, #8]
            status = true;
  420d0e:	2001      	movs	r0, #1

00420d10 <.LVL37>:
  420d10:	4770      	bx	lr

00420d12 <.LVL38>:
    bool status = false;
  420d12:	2000      	movs	r0, #0

00420d14 <.LVL39>:
  420d14:	4770      	bx	lr

00420d16 <.LVL40>:
  420d16:	2000      	movs	r0, #0

00420d18 <.LVL41>:
        }
    }

    return status;
}
  420d18:	4770      	bx	lr
  420d1a:	bf00      	nop
  420d1c:	20400020 	.word	0x20400020
  420d20:	40028000 	.word	0x40028000

Disassembly of section .text.GetASNHeader%271:

00420d24 <GetASNHeader>:
{
  420d24:	b570      	push	{r4, r5, r6, lr}

00420d26 <.LCFI13>:
  420d26:	b082      	sub	sp, #8

00420d28 <.LCFI14>:
  420d28:	9e06      	ldr	r6, [sp, #24]
    word32 idx = *inOutIdx;
  420d2a:	6814      	ldr	r4, [r2, #0]
    if ((idx + 1) > maxIdx)
  420d2c:	1c65      	adds	r5, r4, #1
  420d2e:	42b5      	cmp	r5, r6
  420d30:	d812      	bhi.n	420d58 <.LCFI16>
    b = input[idx++];
  420d32:	9501      	str	r5, [sp, #4]

00420d34 <.LVL116>:
    if (b != tag)
  420d34:	5d04      	ldrb	r4, [r0, r4]

00420d36 <.LVL117>:
  420d36:	428c      	cmp	r4, r1
  420d38:	d111      	bne.n	420d5e <.LVL125>
  420d3a:	461d      	mov	r5, r3
  420d3c:	4614      	mov	r4, r2
    if (GetLength(input, &idx, &length, maxIdx) < 0)
  420d3e:	4633      	mov	r3, r6

00420d40 <.LVL118>:
  420d40:	466a      	mov	r2, sp

00420d42 <.LVL119>:
  420d42:	a901      	add	r1, sp, #4

00420d44 <.LVL120>:
  420d44:	f7ff f944 	bl	41ffd0 <.LFE15>

00420d48 <.LVL121>:
  420d48:	2800      	cmp	r0, #0
  420d4a:	db0b      	blt.n	420d64 <.LVL127>
    *len      = length;
  420d4c:	9800      	ldr	r0, [sp, #0]
  420d4e:	6028      	str	r0, [r5, #0]
    *inOutIdx = idx;
  420d50:	9b01      	ldr	r3, [sp, #4]
  420d52:	6023      	str	r3, [r4, #0]

00420d54 <.LVL122>:
}
  420d54:	b002      	add	sp, #8

00420d56 <.LCFI15>:
  420d56:	bd70      	pop	{r4, r5, r6, pc}

00420d58 <.LCFI16>:
        return BUFFER_E;
  420d58:	f06f 0083 	mvn.w	r0, #131	; 0x83

00420d5c <.LVL124>:
  420d5c:	e7fa      	b.n	420d54 <.LVL122>

00420d5e <.LVL125>:
        return ASN_PARSE_E;
  420d5e:	f06f 008b 	mvn.w	r0, #139	; 0x8b

00420d62 <.LVL126>:
  420d62:	e7f7      	b.n	420d54 <.LVL122>

00420d64 <.LVL127>:
        return ASN_PARSE_E;
  420d64:	f06f 008b 	mvn.w	r0, #139	; 0x8b
  420d68:	e7f4      	b.n	420d54 <.LVL122>

Disassembly of section .text.fp_mod%272:

00420d6a <fp_mod>:
{
  420d6a:	b570      	push	{r4, r5, r6, lr}

00420d6c <.LCFI88>:
  420d6c:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228

00420d70 <.LCFI89>:
  420d70:	4605      	mov	r5, r0
  420d72:	460c      	mov	r4, r1
  420d74:	4616      	mov	r6, r2

00420d76 <.LBB94>:
    fp_zero(a);
  420d76:	4668      	mov	r0, sp

00420d78 <.LVL630>:
  420d78:	f001 f9e4 	bl	422144 <.LFE163>

00420d7c <.LBE94>:
   if ((err = fp_div(a, b, NULL, &t)) != FP_OKAY) {
  420d7c:	466b      	mov	r3, sp
  420d7e:	2200      	movs	r2, #0
  420d80:	4621      	mov	r1, r4
  420d82:	4628      	mov	r0, r5
  420d84:	f7f4 fd22 	bl	4157cc <.LFE22>

00420d88 <.LVL632>:
  420d88:	4605      	mov	r5, r0

00420d8a <.LVL633>:
  420d8a:	b940      	cbnz	r0, 420d9e <.LVL635>
   if (t.sign != b->sign) {
  420d8c:	9a01      	ldr	r2, [sp, #4]
  420d8e:	6863      	ldr	r3, [r4, #4]
  420d90:	429a      	cmp	r2, r3
  420d92:	d008      	beq.n	420da6 <.LCFI91>
      fp_add(&t, b, c);
  420d94:	4632      	mov	r2, r6
  420d96:	4621      	mov	r1, r4
  420d98:	4668      	mov	r0, sp

00420d9a <.LVL634>:
  420d9a:	f7ff ff0d 	bl	420bb8 <.LFE17>

00420d9e <.LVL635>:
}
  420d9e:	4628      	mov	r0, r5
  420da0:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228

00420da4 <.LCFI90>:
  420da4:	bd70      	pop	{r4, r5, r6, pc}

00420da6 <.LCFI91>:
      fp_copy(&t, c);
  420da6:	4631      	mov	r1, r6
  420da8:	4668      	mov	r0, sp

00420daa <.LVL637>:
  420daa:	f000 feff 	bl	421bac <.LFE31>

00420dae <.LVL638>:
  420dae:	e7f6      	b.n	420d9e <.LVL635>

Disassembly of section .text.SYS_INT_SourceDisable%273:

00420db0 <SYS_INT_SourceDisable>:

    return;
}

bool SYS_INT_SourceDisable( INT_SOURCE source )
{
  420db0:	b538      	push	{r3, r4, r5, lr}

00420db2 <.LCFI0>:
  420db2:	4604      	mov	r4, r0
    bool processorStatus;
    bool intSrcStatus;

    processorStatus = SYS_INT_Disable();
  420db4:	f001 fa16 	bl	4221e4 <SYS_INT_Disable>

00420db8 <.LBB50>:
  if ((int32_t)(IRQn) >= 0)
  420db8:	2c00      	cmp	r4, #0
  420dba:	db16      	blt.n	420dea <.LVL9>
    return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  420dbc:	0963      	lsrs	r3, r4, #5
  420dbe:	490c      	ldr	r1, [pc, #48]	; (420df0 <.LVL9+0x6>)
  420dc0:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
  420dc4:	f004 041f 	and.w	r4, r4, #31

00420dc8 <.LVL5>:
  420dc8:	40e5      	lsrs	r5, r4

00420dca <.LBE50>:

    intSrcStatus = NVIC_GetEnableIRQ(source);
  420dca:	f005 0501 	and.w	r5, r5, #1

00420dce <.LBB52>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  420dce:	2201      	movs	r2, #1
  420dd0:	fa02 f404 	lsl.w	r4, r2, r4
  420dd4:	3320      	adds	r3, #32
  420dd6:	f841 4023 	str.w	r4, [r1, r3, lsl #2]

00420dda <.LBB54>:
  __ASM volatile ("dsb 0xF":::"memory");
  420dda:	f3bf 8f4f 	dsb	sy

00420dde <.LBB56>:
  __ASM volatile ("isb 0xF":::"memory");
  420dde:	f3bf 8f6f 	isb	sy

00420de2 <.LBE52>:

    NVIC_DisableIRQ( source );

    SYS_INT_Restore( processorStatus );
  420de2:	f001 fa08 	bl	4221f6 <.LFE142>

00420de6 <.LVL8>:

    /* return the source status */
    return intSrcStatus;
  420de6:	4628      	mov	r0, r5
  420de8:	bd38      	pop	{r3, r4, r5, pc}

00420dea <.LVL9>:
    intSrcStatus = NVIC_GetEnableIRQ(source);
  420dea:	2500      	movs	r5, #0
  420dec:	e7f9      	b.n	420de2 <.LBE52>
  420dee:	bf00      	nop
  420df0:	e000e100 	.word	0xe000e100

Disassembly of section .text.fp_sub%274:

00420df4 <fp_sub>:
{
  420df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

00420df6 <.LCFI17>:
  420df6:	4606      	mov	r6, r0
  420df8:	460d      	mov	r5, r1
  420dfa:	4617      	mov	r7, r2
  sa = a->sign;
  420dfc:	6844      	ldr	r4, [r0, #4]

00420dfe <.LVL128>:
  if (sa != sb) {
  420dfe:	684b      	ldr	r3, [r1, #4]
  420e00:	429c      	cmp	r4, r3
  420e02:	d10b      	bne.n	420e1c <.LVL131>
    if (fp_cmp_mag (a, b) != FP_LT) {
  420e04:	f7ff f917 	bl	420036 <.LFE16>

00420e08 <.LVL129>:
  420e08:	f1b0 3fff 	cmp.w	r0, #4294967295
  420e0c:	d00a      	beq.n	420e24 <.LVL132+0x2>
      c->sign = sa;
  420e0e:	607c      	str	r4, [r7, #4]
      s_fp_sub (a, b, c);
  420e10:	463a      	mov	r2, r7
  420e12:	4629      	mov	r1, r5
  420e14:	4630      	mov	r0, r6
  420e16:	f7fb fa63 	bl	41c2e0 <.LBE840>

00420e1a <.LVL130>:
  420e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00420e1c <.LVL131>:
    c->sign = sa;
  420e1c:	6054      	str	r4, [r2, #4]
    s_fp_add (a, b, c);
  420e1e:	f7fb fd0a 	bl	41c836 <.LFE54>

00420e22 <.LVL132>:
  420e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      c->sign = (sa == FP_ZPOS) ? FP_NEG : FP_ZPOS;
  420e24:	fab4 f484 	clz	r4, r4

00420e28 <.LVL134>:
  420e28:	0964      	lsrs	r4, r4, #5
  420e2a:	607c      	str	r4, [r7, #4]
      s_fp_sub (b, a, c);
  420e2c:	463a      	mov	r2, r7
  420e2e:	4631      	mov	r1, r6
  420e30:	4628      	mov	r0, r5
  420e32:	f7fb fa55 	bl	41c2e0 <.LBE840>

00420e36 <.LVL135>:
  420e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

Disassembly of section .text.wc_AesSetKey%275:

00420e38 <wc_AesSetKey>:
        if (aes == NULL ||
  420e38:	b1b8      	cbz	r0, 420e6a <.LCFI8>
    {
  420e3a:	b510      	push	{r4, lr}

00420e3c <.LCFI5>:
  420e3c:	b082      	sub	sp, #8

00420e3e <.LCFI6>:
  420e3e:	4604      	mov	r4, r0
                !((keylen == 16) || (keylen == 24) || (keylen == 32))) {
  420e40:	f022 0008 	bic.w	r0, r2, #8

00420e44 <.LVL157>:
  420e44:	2810      	cmp	r0, #16
  420e46:	d001      	beq.n	420e4c <.LVL157+0x8>
  420e48:	2a20      	cmp	r2, #32
  420e4a:	d111      	bne.n	420e70 <.LCFI9>
        if (keylen > max_key_len) {
  420e4c:	2a20      	cmp	r2, #32
  420e4e:	d812      	bhi.n	420e76 <.LCFI9+0x6>
  420e50:	4620      	mov	r0, r4
        aes->keylen = keylen;
  420e52:	f8c4 20f4 	str.w	r2, [r4, #244]	; 0xf4
        aes->rounds = keylen/4 + 6;
  420e56:	0894      	lsrs	r4, r2, #2

00420e58 <.LVL158>:
  420e58:	3406      	adds	r4, #6
  420e5a:	f8c0 40f0 	str.w	r4, [r0, #240]	; 0xf0
        return wc_AesSetKeyLocal(aes, userKey, keylen, iv, dir);
  420e5e:	9c04      	ldr	r4, [sp, #16]
  420e60:	9400      	str	r4, [sp, #0]
  420e62:	f7f2 fbcf 	bl	413604 <.LFE58>

00420e66 <.LVL159>:
    }
  420e66:	b002      	add	sp, #8

00420e68 <.LCFI7>:
  420e68:	bd10      	pop	{r4, pc}

00420e6a <.LCFI8>:
            return BAD_FUNC_ARG;
  420e6a:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00420e6e <.LVL161>:
  420e6e:	4770      	bx	lr

00420e70 <.LCFI9>:
  420e70:	f06f 00ac 	mvn.w	r0, #172	; 0xac
  420e74:	e7f7      	b.n	420e66 <.LVL159>
            return BAD_FUNC_ARG;
  420e76:	f06f 00ac 	mvn.w	r0, #172	; 0xac
  420e7a:	e7f4      	b.n	420e66 <.LVL159>

Disassembly of section .text.same70_RNG_GenerateBlock%276:

00420e7c <same70_RNG_GenerateBlock>:


/* sz is number of bytes */
int same70_RNG_GenerateBlock(byte* output, word32 sz)
{
    while (sz)
  420e7c:	b1e1      	cbz	r1, 420eb8 <.LCFI3>
{
  420e7e:	b530      	push	{r4, r5, lr}

00420e80 <.LCFI0>:
  420e80:	b083      	sub	sp, #12

00420e82 <.LCFI1>:
  420e82:	4605      	mov	r5, r0
  420e84:	460a      	mov	r2, r1

00420e86 <.LBB11>:
    {
        /* get 32 bits - BLOCKING */
        while (!(TRNG_REGS->TRNG_ISR & TRNG_ISR_DATRDY_Msk))
  420e86:	4c0d      	ldr	r4, [pc, #52]	; (420ebc <.LVL8+0x2>)
  420e88:	e007      	b.n	420e9a <.LBB14>

00420e8a <.LVL2>:
        uint32_t result = TRNG_REGS->TRNG_ODATA;

        /* stuff the data into the output buffer. Watch for buffer overrun */
        if (sz < RNG_BYTES_AT_A_TIME)
        {
            memcpy((void *)output, (void*)&result, sz);
  420e8a:	a901      	add	r1, sp, #4
  420e8c:	4628      	mov	r0, r5
  420e8e:	f7f9 fd79 	bl	41a984 <.LFE14>

00420e92 <.LVL3>:
            sz = 0;
  420e92:	2200      	movs	r2, #0

00420e94 <.LBB12>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  420e94:	f3bf 8f5f 	dmb	sy

00420e98 <.LBE11>:
    while (sz)
  420e98:	b15a      	cbz	r2, 420eb2 <.LBE14>

00420e9a <.LBB14>:
        while (!(TRNG_REGS->TRNG_ISR & TRNG_ISR_DATRDY_Msk))
  420e9a:	69e3      	ldr	r3, [r4, #28]
  420e9c:	f013 0f01 	tst.w	r3, #1
  420ea0:	d0fb      	beq.n	420e9a <.LBB14>
        uint32_t result = TRNG_REGS->TRNG_ODATA;
  420ea2:	6d23      	ldr	r3, [r4, #80]	; 0x50
  420ea4:	9301      	str	r3, [sp, #4]
        if (sz < RNG_BYTES_AT_A_TIME)
  420ea6:	2a03      	cmp	r2, #3
  420ea8:	d9ef      	bls.n	420e8a <.LVL2>
        }
        else
        {
            memcpy((void *)output, (void*)&result, RNG_BYTES_AT_A_TIME);
  420eaa:	f845 3b04 	str.w	r3, [r5], #4
            sz -= RNG_BYTES_AT_A_TIME;
  420eae:	3a04      	subs	r2, #4

00420eb0 <.LVL6>:
  420eb0:	e7f0      	b.n	420e94 <.LBB12>

00420eb2 <.LBE14>:
        /* memory barrier */
        __DMB();
    }

    return 0;
}
  420eb2:	2000      	movs	r0, #0
  420eb4:	b003      	add	sp, #12

00420eb6 <.LCFI2>:
  420eb6:	bd30      	pop	{r4, r5, pc}

00420eb8 <.LCFI3>:
  420eb8:	2000      	movs	r0, #0

00420eba <.LVL8>:
  420eba:	4770      	bx	lr
  420ebc:	40070000 	.word	0x40070000

Disassembly of section .rodata%277:

00420ec0 <.LC5-0x24>:
  420ec0:	00464e49 	.word	0x00464e49
  420ec4:	00666e69 	.word	0x00666e69
  420ec8:	004e414e 	.word	0x004e414e
  420ecc:	006e616e 	.word	0x006e616e
  420ed0:	33323130 	.word	0x33323130
  420ed4:	37363534 	.word	0x37363534
  420ed8:	42413938 	.word	0x42413938
  420edc:	46454443 	.word	0x46454443
  420ee0:	00000000 	.word	0x00000000

00420ee4 <.LC5>:
  420ee4:	33323130 	.word	0x33323130
  420ee8:	37363534 	.word	0x37363534
  420eec:	62613938 	.word	0x62613938
  420ef0:	66656463 	.word	0x66656463
  420ef4:	00000000 	.word	0x00000000

00420ef8 <.LC6>:
  420ef8:	6c756e28 	.word	0x6c756e28
  420efc:	0000296c 	.word	0x0000296c
  420f00:	0030      	.short	0x0030
  420f02:	bf00      	nop

Disassembly of section .text.NVIC_Initialize%278:

00420f04 <NVIC_Initialize>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  420f04:	490c      	ldr	r1, [pc, #48]	; (420f38 <.LVL10+0x4>)
  420f06:	68ca      	ldr	r2, [r1, #12]

00420f08 <.LVL1>:
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  420f08:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700

00420f0c <.LVL2>:
  420f0c:	0412      	lsls	r2, r2, #16
  420f0e:	0c12      	lsrs	r2, r2, #16

00420f10 <.LVL3>:
  reg_value  =  (reg_value                                   |
  420f10:	4b0a      	ldr	r3, [pc, #40]	; (420f3c <.LVL10+0x8>)
  420f12:	4313      	orrs	r3, r2

00420f14 <.LVL4>:
  SCB->AIRCR =  reg_value;
  420f14:	60cb      	str	r3, [r1, #12]

00420f16 <.LBB22>:
  420f16:	f3bf 8f5f 	dmb	sy

00420f1a <.LBB24>:
  __ASM volatile ("cpsie i" : : : "memory");
  420f1a:	b662      	cpsie	i

00420f1c <.LBB26>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  420f1c:	4b08      	ldr	r3, [pc, #32]	; (420f40 <.LVL10+0xc>)
  420f1e:	22e0      	movs	r2, #224	; 0xe0
  420f20:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e

00420f24 <.LBB28>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  420f24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  420f28:	6019      	str	r1, [r3, #0]

00420f2a <.LBB30>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  420f2a:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317

00420f2e <.LBB32>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  420f2e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  420f32:	601a      	str	r2, [r3, #0]

00420f34 <.LVL10>:
  420f34:	4770      	bx	lr
  420f36:	bf00      	nop
  420f38:	e000ed00 	.word	0xe000ed00
  420f3c:	05fa0400 	.word	0x05fa0400
  420f40:	e000e100 	.word	0xe000e100

Disassembly of section .text.wc_ecc_new_point_h%279:

00420f44 <wc_ecc_new_point_h>:
{
  420f44:	b510      	push	{r4, lr}

00420f46 <.LCFI27>:
  420f46:	b082      	sub	sp, #8

00420f48 <.LCFI28>:
   p = (ecc_point*)XMALLOC(sizeof(ecc_point), heap, DYNAMIC_TYPE_ECC);
  420f48:	f44f 60cf 	mov.w	r0, #1656	; 0x678

00420f4c <.LVL512>:
  420f4c:	f001 f892 	bl	422074 <.LFE26>

00420f50 <.LVL513>:
   if (p == NULL) {
  420f50:	4604      	mov	r4, r0
  420f52:	b178      	cbz	r0, 420f74 <.LVL516>
   XMEMSET(p, 0, sizeof(ecc_point));
  420f54:	f44f 62cf 	mov.w	r2, #1656	; 0x678
  420f58:	2100      	movs	r1, #0
  420f5a:	f7fd fadd 	bl	41e518 <.LFE14>

00420f5e <.LVL514>:
   if (mp_init_multi(p->x, p->y, p->z, NULL, NULL, NULL) != MP_OKAY) {
  420f5e:	2300      	movs	r3, #0
  420f60:	9301      	str	r3, [sp, #4]
  420f62:	9300      	str	r3, [sp, #0]
  420f64:	f504 628a 	add.w	r2, r4, #1104	; 0x450
  420f68:	f504 710a 	add.w	r1, r4, #552	; 0x228
  420f6c:	4620      	mov	r0, r4
  420f6e:	f000 f909 	bl	421184 <mp_init_multi>

00420f72 <.LVL515>:
  420f72:	b910      	cbnz	r0, 420f7a <.LBB23>

00420f74 <.LVL516>:
}
  420f74:	4620      	mov	r0, r4
  420f76:	b002      	add	sp, #8

00420f78 <.LCFI29>:
  420f78:	bd10      	pop	{r4, pc}

00420f7a <.LBB23>:
      XFREE(p, heap, DYNAMIC_TYPE_ECC);
  420f7a:	4620      	mov	r0, r4
  420f7c:	f001 f886 	bl	42208c <.LFE2>

00420f80 <.LBE23>:
      return NULL;
  420f80:	2400      	movs	r4, #0

00420f82 <.LVL519>:
  420f82:	e7f7      	b.n	420f74 <.LVL516>

Disassembly of section .text.fp_montgomery_setup%280:

00420f84 <fp_montgomery_setup>:
  b = a->dp[0];
  420f84:	6883      	ldr	r3, [r0, #8]

00420f86 <.LVL148>:
  if ((b & 1) == 0) {
  420f86:	f013 0f01 	tst.w	r3, #1
  420f8a:	d018      	beq.n	420fbe <.LVL157>
  x = (((b + 2) & 4) << 1) + b; /* here x*a==1 mod 2**4 */
  420f8c:	1c9a      	adds	r2, r3, #2
  420f8e:	0052      	lsls	r2, r2, #1
  420f90:	f002 0208 	and.w	r2, r2, #8
  420f94:	441a      	add	r2, r3

00420f96 <.LVL149>:
  x *= 2 - b * x;               /* here x*a==1 mod 2**8 */
  420f96:	fb02 f003 	mul.w	r0, r2, r3

00420f9a <.LVL150>:
  420f9a:	f1c0 0002 	rsb	r0, r0, #2
  420f9e:	fb00 f002 	mul.w	r0, r0, r2

00420fa2 <.LVL151>:
  x *= 2 - b * x;               /* here x*a==1 mod 2**16 */
  420fa2:	fb00 f203 	mul.w	r2, r0, r3
  420fa6:	f1c2 0202 	rsb	r2, r2, #2
  420faa:	fb02 f200 	mul.w	r2, r2, r0

00420fae <.LVL152>:
  x *= 2 - b * x;               /* here x*a==1 mod 2**32 */
  420fae:	fb02 f303 	mul.w	r3, r2, r3

00420fb2 <.LVL153>:
  420fb2:	3b02      	subs	r3, #2

00420fb4 <.LVL154>:
  *rho = (fp_digit) (((fp_word) 1 << ((fp_word) DIGIT_BIT)) - ((fp_word)x));
  420fb4:	fb03 f302 	mul.w	r3, r3, r2

00420fb8 <.LVL155>:
  420fb8:	600b      	str	r3, [r1, #0]

00420fba <.LVL156>:
  return FP_OKAY;
  420fba:	2000      	movs	r0, #0
  420fbc:	4770      	bx	lr

00420fbe <.LVL157>:
    return FP_VAL;
  420fbe:	f04f 30ff 	mov.w	r0, #4294967295

00420fc2 <.LVL158>:
}
  420fc2:	4770      	bx	lr

Disassembly of section .rodata.dbase.6482%281:

00420fc4 <dbase.6482>:
  420fc4:	0001 0002 0003 0004 0005 0007 0009 000d     ................
  420fd4:	0011 0019 0021 0031 0041 0061 0081 00c1     ....!.1.A.a.....
  420fe4:	0101 0181 0201 0301 0401 0601 0801 0c01     ................
  420ff4:	1001 1801 2001 3001 4001 6001 0000 0000     ..... .0.@.`....

Disassembly of section .rodata.dext.6483%282:

00421004 <dext.6483>:
  421004:	0010 0010 0010 0010 0011 0011 0012 0012     ................
  421014:	0013 0013 0014 0014 0015 0015 0016 0016     ................
  421024:	0017 0017 0018 0018 0019 0019 001a 001a     ................
  421034:	001b 001b 001c 001c 001d 001d 0040 0040     ............@.@.

Disassembly of section .rodata.lbase.6480%283:

00421044 <lbase.6480>:
  421044:	0003 0004 0005 0006 0007 0008 0009 000a     ................
  421054:	000b 000d 000f 0011 0013 0017 001b 001f     ................
  421064:	0023 002b 0033 003b 0043 0053 0063 0073     #.+.3.;.C.S.c.s.
  421074:	0083 00a3 00c3 00e3 0102 0000 0000 bf00     ................

Disassembly of section .rodata.lext.6481%284:

00421084 <lext.6481>:
  421084:	0010 0010 0010 0010 0010 0010 0010 0010     ................
  421094:	0011 0011 0011 0011 0012 0012 0012 0012     ................
  4210a4:	0013 0013 0013 0013 0014 0014 0014 0014     ................
  4210b4:	0015 0015 0015 0015 0010 004e 0044 bf00     ..........N.D...

Disassembly of section .text.wc_AesSetIV%285:

004210c4 <wc_AesSetIV>:
    if (aes == NULL)
  4210c4:	b1d8      	cbz	r0, 4210fe <.LVL113>
  4210c6:	4602      	mov	r2, r0
    if (iv)
  4210c8:	b179      	cbz	r1, 4210ea <.LVL111>
{
  4210ca:	b430      	push	{r4, r5}

004210cc <.LCFI2>:
        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
  4210cc:	680d      	ldr	r5, [r1, #0]
  4210ce:	684c      	ldr	r4, [r1, #4]
  4210d0:	6888      	ldr	r0, [r1, #8]

004210d2 <.LVL109>:
  4210d2:	68c9      	ldr	r1, [r1, #12]

004210d4 <.LVL110>:
  4210d4:	f8c2 50f8 	str.w	r5, [r2, #248]	; 0xf8
  4210d8:	f8c2 40fc 	str.w	r4, [r2, #252]	; 0xfc
  4210dc:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
  4210e0:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
    return 0;
  4210e4:	2000      	movs	r0, #0
}
  4210e6:	bc30      	pop	{r4, r5}

004210e8 <.LCFI3>:
  4210e8:	4770      	bx	lr

004210ea <.LVL111>:
        XMEMSET(aes->reg,  0, AES_BLOCK_SIZE);
  4210ea:	2000      	movs	r0, #0

004210ec <.LVL112>:
  4210ec:	f8c2 00f8 	str.w	r0, [r2, #248]	; 0xf8
  4210f0:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
  4210f4:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
  4210f8:	f8c2 0104 	str.w	r0, [r2, #260]	; 0x104
  4210fc:	4770      	bx	lr

004210fe <.LVL113>:
        return BAD_FUNC_ARG;
  4210fe:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00421102 <.LVL114>:
  421102:	4770      	bx	lr

Disassembly of section .text.wc_InitSha_ex%286:

00421104 <wc_InitSha_ex>:
    if (sha == NULL)
  421104:	4603      	mov	r3, r0
  421106:	b1b0      	cbz	r0, 421136 <.LVL348>
    sha->heap = heap;
  421108:	6601      	str	r1, [r0, #96]	; 0x60

0042110a <.LBB769>:
        sha->digest[0] = 0x67452301L;
  42110a:	4a0c      	ldr	r2, [pc, #48]	; (42113c <.LVL349+0x2>)

0042110c <.LVL345>:
  42110c:	64c2      	str	r2, [r0, #76]	; 0x4c
        sha->digest[1] = 0xEFCDAB89L;
  42110e:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
  421112:	6502      	str	r2, [r0, #80]	; 0x50
        sha->digest[2] = 0x98BADCFEL;
  421114:	f102 4229 	add.w	r2, r2, #2835349504	; 0xa9000000
  421118:	f5a2 1296 	sub.w	r2, r2, #1228800	; 0x12c000
  42111c:	f6a2 628b 	subw	r2, r2, #3723	; 0xe8b
  421120:	6542      	str	r2, [r0, #84]	; 0x54
        sha->digest[3] = 0x10325476L;
  421122:	f1a2 3288 	sub.w	r2, r2, #2290649224	; 0x88888888
  421126:	6582      	str	r2, [r0, #88]	; 0x58
        sha->digest[4] = 0xC3D2E1F0L;
  421128:	4a05      	ldr	r2, [pc, #20]	; (421140 <.LVL349+0x6>)
  42112a:	65c2      	str	r2, [r0, #92]	; 0x5c
        sha->buffLen = 0;
  42112c:	2000      	movs	r0, #0

0042112e <.LVL346>:
  42112e:	6018      	str	r0, [r3, #0]
        sha->loLen   = 0;
  421130:	6058      	str	r0, [r3, #4]
        sha->hiLen   = 0;
  421132:	6098      	str	r0, [r3, #8]

00421134 <.LBE769>:
  421134:	4770      	bx	lr

00421136 <.LVL348>:
        return BAD_FUNC_ARG;
  421136:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0042113a <.LVL349>:
}
  42113a:	4770      	bx	lr
  42113c:	67452301 	.word	0x67452301
  421140:	c3d2e1f0 	.word	0xc3d2e1f0

Disassembly of section .text.__hi0bits%287:

00421144 <__hi0bits>:
  421144:	0c02      	lsrs	r2, r0, #16
  421146:	0412      	lsls	r2, r2, #16
  421148:	4603      	mov	r3, r0
  42114a:	b9b2      	cbnz	r2, 42117a <.LVL75>

0042114c <.LVL63>:
  42114c:	0403      	lsls	r3, r0, #16

0042114e <.LVL64>:
  42114e:	2010      	movs	r0, #16

00421150 <.LVL65>:
  421150:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  421154:	bf04      	itt	eq
  421156:	021b      	lsleq	r3, r3, #8

00421158 <.LVL66>:
  421158:	3008      	addeq	r0, #8

0042115a <.LVL67>:
  42115a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  42115e:	bf04      	itt	eq
  421160:	011b      	lsleq	r3, r3, #4

00421162 <.LVL68>:
  421162:	3004      	addeq	r0, #4

00421164 <.LVL69>:
  421164:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  421168:	bf04      	itt	eq
  42116a:	009b      	lsleq	r3, r3, #2

0042116c <.LVL70>:
  42116c:	3002      	addeq	r0, #2

0042116e <.LVL71>:
  42116e:	2b00      	cmp	r3, #0
  421170:	db02      	blt.n	421178 <.LVL74>

00421172 <.LVL72>:
  421172:	005b      	lsls	r3, r3, #1

00421174 <.LVL73>:
  421174:	d403      	bmi.n	42117e <.LVL77>
  421176:	2020      	movs	r0, #32

00421178 <.LVL74>:
  421178:	4770      	bx	lr

0042117a <.LVL75>:
  42117a:	2000      	movs	r0, #0

0042117c <.LVL76>:
  42117c:	e7e8      	b.n	421150 <.LVL65>

0042117e <.LVL77>:
  42117e:	3001      	adds	r0, #1

00421180 <.LVL78>:
  421180:	4770      	bx	lr

00421182 <.LFE21>:
  421182:	bf00      	nop

Disassembly of section .text.mp_init_multi%288:

00421184 <mp_init_multi>:
{
  421184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

00421186 <.LCFI50>:
  421186:	460d      	mov	r5, r1
  421188:	4617      	mov	r7, r2
  42118a:	461e      	mov	r6, r3
  42118c:	9c07      	ldr	r4, [sp, #28]
    if (a)
  42118e:	b108      	cbz	r0, 421194 <.LBE36>

00421190 <.LBB36>:
    fp_zero(a);
  421190:	f000 ffd8 	bl	422144 <.LFE163>

00421194 <.LBE36>:
    if (b)
  421194:	b115      	cbz	r5, 42119c <.LBE38>

00421196 <.LBB38>:
    fp_zero(a);
  421196:	4628      	mov	r0, r5
  421198:	f000 ffd4 	bl	422144 <.LFE163>

0042119c <.LBE38>:
    if (c)
  42119c:	b117      	cbz	r7, 4211a4 <.LBE40>

0042119e <.LBB40>:
    fp_zero(a);
  42119e:	4638      	mov	r0, r7
  4211a0:	f000 ffd0 	bl	422144 <.LFE163>

004211a4 <.LBE40>:
    if (d)
  4211a4:	b116      	cbz	r6, 4211ac <.LBE42>

004211a6 <.LBB42>:
    fp_zero(a);
  4211a6:	4630      	mov	r0, r6
  4211a8:	f000 ffcc 	bl	422144 <.LFE163>

004211ac <.LBE42>:
    if (e)
  4211ac:	9b06      	ldr	r3, [sp, #24]
  4211ae:	b113      	cbz	r3, 4211b6 <.LBE44>

004211b0 <.LBB44>:
    fp_zero(a);
  4211b0:	4618      	mov	r0, r3
  4211b2:	f000 ffc7 	bl	422144 <.LFE163>

004211b6 <.LBE44>:
    if (f)
  4211b6:	b114      	cbz	r4, 4211be <.LBE46>

004211b8 <.LBB46>:
    fp_zero(a);
  4211b8:	4620      	mov	r0, r4
  4211ba:	f000 ffc3 	bl	422144 <.LFE163>

004211be <.LBE46>:
}
  4211be:	2000      	movs	r0, #0
  4211c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

Disassembly of section .text.fp_2expt%289:

004211c2 <fp_2expt>:
{
  4211c2:	b538      	push	{r3, r4, r5, lr}

004211c4 <.LCFI33>:
  4211c4:	4605      	mov	r5, r0
  4211c6:	460c      	mov	r4, r1
   fp_zero (a);
  4211c8:	f000 ffbc 	bl	422144 <.LFE163>

004211cc <.LVL276>:
   if (b < 0) {
  4211cc:	2c00      	cmp	r4, #0
  4211ce:	db15      	blt.n	4211fc <.LVL280>
   z = b / DIGIT_BIT;
  4211d0:	4623      	mov	r3, r4
  4211d2:	bfb8      	it	lt
  4211d4:	f104 031f 	addlt.w	r3, r4, #31
  4211d8:	115b      	asrs	r3, r3, #5

004211da <.LVL277>:
   if (z >= FP_SIZE) {
  4211da:	2b87      	cmp	r3, #135	; 0x87
  4211dc:	dc0e      	bgt.n	4211fc <.LVL280>
  a->used = z + 1;
  4211de:	1c5a      	adds	r2, r3, #1
  4211e0:	602a      	str	r2, [r5, #0]
  a->dp[z] = ((fp_digit)1) << (b % DIGIT_BIT);
  4211e2:	3302      	adds	r3, #2

004211e4 <.LVL278>:
  4211e4:	4262      	negs	r2, r4
  4211e6:	f004 041f 	and.w	r4, r4, #31

004211ea <.LVL279>:
  4211ea:	f002 021f 	and.w	r2, r2, #31
  4211ee:	bf58      	it	pl
  4211f0:	4254      	negpl	r4, r2
  4211f2:	2201      	movs	r2, #1
  4211f4:	fa02 f404 	lsl.w	r4, r2, r4
  4211f8:	f845 4023 	str.w	r4, [r5, r3, lsl #2]

004211fc <.LVL280>:
  4211fc:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section .text.Console_UART_Flush%290:

00421200 <Console_UART_Flush>:
    if (consUartData.state != CONSOLE_UART_STATE_INIT)
  421200:	4b0b      	ldr	r3, [pc, #44]	; (421230 <Console_UART_Flush+0x30>)
  421202:	781b      	ldrb	r3, [r3, #0]
  421204:	b113      	cbz	r3, 42120c <Console_UART_Flush+0xc>
        consUartData.state = CONSOLE_UART_STATE_READY;
  421206:	2202      	movs	r2, #2
  421208:	4b09      	ldr	r3, [pc, #36]	; (421230 <Console_UART_Flush+0x30>)
  42120a:	701a      	strb	r2, [r3, #0]
    consUartData.overflowFlag = false;
  42120c:	4a08      	ldr	r2, [pc, #32]	; (421230 <Console_UART_Flush+0x30>)
  42120e:	2300      	movs	r3, #0
  421210:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
    consUartData.isWriteComplete = true;
  421214:	2001      	movs	r0, #1
  421216:	f882 0045 	strb.w	r0, [r2, #69]	; 0x45
    writeQueue.nextPos = 0;
  42121a:	4906      	ldr	r1, [pc, #24]	; (421234 <Console_UART_Flush+0x34>)
  42121c:	604b      	str	r3, [r1, #4]
    writeQueue.tailPos = 0;
  42121e:	600b      	str	r3, [r1, #0]
    writeQueue.numElem = 0;
  421220:	608b      	str	r3, [r1, #8]
    consUartData.isReadComplete = true;
  421222:	f882 0044 	strb.w	r0, [r2, #68]	; 0x44
    readQueue.nextPos = 0;
  421226:	4a04      	ldr	r2, [pc, #16]	; (421238 <Console_UART_Flush+0x38>)
  421228:	6053      	str	r3, [r2, #4]
    readQueue.tailPos = 0;
  42122a:	6013      	str	r3, [r2, #0]
    readQueue.numElem = 0;
  42122c:	6093      	str	r3, [r2, #8]
  42122e:	4770      	bx	lr
  421230:	2040d5d4 	.word	0x2040d5d4
  421234:	2040d72c 	.word	0x2040d72c
  421238:	2040d718 	.word	0x2040d718

Disassembly of section .text.SYS_TIME_GetTimerObject%291:

0042123c <SYS_TIME_GetTimerObject>:
    if ((handle != SYS_TIME_HANDLE_INVALID) && (handle != 0))
  42123c:	1e43      	subs	r3, r0, #1
  42123e:	f113 0f03 	cmn.w	r3, #3
  421242:	d80f      	bhi.n	421264 <.LVL10>
        if ((handle & _SYS_TIME_INDEX_MASK) < SYS_TIME_MAX_TIMERS)
  421244:	b283      	uxth	r3, r0
  421246:	2b09      	cmp	r3, #9
  421248:	d80e      	bhi.n	421268 <.LVL12>

0042124a <.LVL6>:
            if ((timerObj->tmrHandle == handle) && (timerObj->inUse == true))
  42124a:	4a0a      	ldr	r2, [pc, #40]	; (421274 <.LVL17+0x2>)
  42124c:	eb02 1243 	add.w	r2, r2, r3, lsl #5
  421250:	69d2      	ldr	r2, [r2, #28]
  421252:	4290      	cmp	r0, r2
  421254:	d10a      	bne.n	42126c <.LVL14>
  421256:	015a      	lsls	r2, r3, #5

00421258 <.LVL7>:
  421258:	4906      	ldr	r1, [pc, #24]	; (421274 <.LVL17+0x2>)
  42125a:	5c8a      	ldrb	r2, [r1, r2]

0042125c <.LVL8>:
  42125c:	b142      	cbz	r2, 421270 <.LVL16>
            timerObj = &timers[handle & _SYS_TIME_INDEX_MASK];
  42125e:	eb01 1043 	add.w	r0, r1, r3, lsl #5

00421262 <.LVL9>:
                return timerObj;
  421262:	4770      	bx	lr

00421264 <.LVL10>:
    return NULL;
  421264:	2000      	movs	r0, #0

00421266 <.LVL11>:
  421266:	4770      	bx	lr

00421268 <.LVL12>:
  421268:	2000      	movs	r0, #0

0042126a <.LVL13>:
  42126a:	4770      	bx	lr

0042126c <.LVL14>:
  42126c:	2000      	movs	r0, #0

0042126e <.LVL15>:
  42126e:	4770      	bx	lr

00421270 <.LVL16>:
  421270:	2000      	movs	r0, #0

00421272 <.LVL17>:
}
  421272:	4770      	bx	lr
  421274:	2040d3f4 	.word	0x2040d3f4

Disassembly of section .text.SYS_TIME_TimerDestroy%292:

00421278 <SYS_TIME_TimerDestroy>:
    SYS_TIME_ResourceUnlock();
    return result;
}

SYS_TIME_RESULT SYS_TIME_TimerDestroy(SYS_TIME_HANDLE handle)
{
  421278:	b510      	push	{r4, lr}

0042127a <.LCFI22>:
  42127a:	4604      	mov	r4, r0

0042127c <.LVL195>:
    SYS_TIME_TIMER_OBJ *tmr = NULL;
    SYS_TIME_RESULT result = SYS_TIME_ERROR;

    if (SYS_TIME_ResourceLock() == false)
  42127c:	f000 f9d6 	bl	42162c <.LFE40>

00421280 <.LVL196>:
  421280:	b1b0      	cbz	r0, 4212b0 <.LVL206>
    {
        return result;
    }

    tmr = SYS_TIME_GetTimerObject(handle);
  421282:	4620      	mov	r0, r4
  421284:	f7ff ffda 	bl	42123c <.LFE170>

00421288 <.LVL197>:

    if(tmr != NULL)
  421288:	4604      	mov	r4, r0

0042128a <.LVL198>:
  42128a:	b178      	cbz	r0, 4212ac <.LVL205>
    {
        if(tmr->active == true)
  42128c:	7843      	ldrb	r3, [r0, #1]
  42128e:	b943      	cbnz	r3, 4212a2 <.LVL203>

00421290 <.LVL199>:
        {
            SYS_TIME_RemoveFromList(tmr);
            tmr->active = false;
        }
        tmr->tmrElapsedFlag = false;
  421290:	2000      	movs	r0, #0
  421292:	7520      	strb	r0, [r4, #20]
        tmr->tmrElapsed = false;
  421294:	7560      	strb	r0, [r4, #21]
        tmr->inUse = false;
  421296:	7020      	strb	r0, [r4, #0]

00421298 <.LVL200>:
        result = SYS_TIME_SUCCESS;
  421298:	4604      	mov	r4, r0

0042129a <.LVL201>:
    }

    SYS_TIME_ResourceUnlock();
  42129a:	f000 f8d3 	bl	421444 <.LFE47>

0042129e <.LVL202>:
    return result;
}
  42129e:	4620      	mov	r0, r4
  4212a0:	bd10      	pop	{r4, pc}

004212a2 <.LVL203>:
            SYS_TIME_RemoveFromList(tmr);
  4212a2:	f7ff fb05 	bl	4208b0 <SYS_TIME_RemoveFromList>

004212a6 <.LVL204>:
            tmr->active = false;
  4212a6:	2300      	movs	r3, #0
  4212a8:	7063      	strb	r3, [r4, #1]
  4212aa:	e7f1      	b.n	421290 <.LVL199>

004212ac <.LVL205>:
    SYS_TIME_RESULT result = SYS_TIME_ERROR;
  4212ac:	2401      	movs	r4, #1
  4212ae:	e7f4      	b.n	42129a <.LVL201>

004212b0 <.LVL206>:
        return result;
  4212b0:	2401      	movs	r4, #1

004212b2 <.LVL207>:
  4212b2:	e7f4      	b.n	42129e <.LVL202>

Disassembly of section .text.USART1_Initialize%293:

004212b4 <USART1_Initialize>:
    USART1_REGS->US_CR = (US_CR_RSTRX_Msk | US_CR_RSTTX_Msk | US_CR_RSTSTA_Msk);
  4212b4:	4b0c      	ldr	r3, [pc, #48]	; (4212e8 <.LFE186+0x34>)
  4212b6:	f44f 7286 	mov.w	r2, #268	; 0x10c
  4212ba:	601a      	str	r2, [r3, #0]
    USART1_REGS->US_CR = (US_CR_TXEN_Msk | US_CR_RXEN_Msk);
  4212bc:	2250      	movs	r2, #80	; 0x50
  4212be:	601a      	str	r2, [r3, #0]
    USART1_REGS->US_MR = ((US_MR_USCLKS_MCK) | (0 << US_MR_MODE9_Pos) | US_MR_CHRL_8_BIT | US_MR_PAR_NO | US_MR_NBSTOP_1_BIT | (0 << US_MR_OVER_Pos));
  4212c0:	f44f 620c 	mov.w	r2, #2240	; 0x8c0
  4212c4:	605a      	str	r2, [r3, #4]
    USART1_REGS->US_BRGR = US_BRGR_CD(81);
  4212c6:	2251      	movs	r2, #81	; 0x51
  4212c8:	621a      	str	r2, [r3, #32]
    usart1Obj.rxBuffer = NULL;
  4212ca:	4b08      	ldr	r3, [pc, #32]	; (4212ec <.LFE186+0x38>)
  4212cc:	2200      	movs	r2, #0
  4212ce:	619a      	str	r2, [r3, #24]
    usart1Obj.rxSize = 0;
  4212d0:	61da      	str	r2, [r3, #28]
    usart1Obj.rxProcessedSize = 0;
  4212d2:	621a      	str	r2, [r3, #32]
    usart1Obj.rxBusyStatus = false;
  4212d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    usart1Obj.rxCallback = NULL;
  4212d8:	625a      	str	r2, [r3, #36]	; 0x24
    usart1Obj.txBuffer = NULL;
  4212da:	601a      	str	r2, [r3, #0]
    usart1Obj.txSize = 0;
  4212dc:	605a      	str	r2, [r3, #4]
    usart1Obj.txProcessedSize = 0;
  4212de:	609a      	str	r2, [r3, #8]
    usart1Obj.txBusyStatus = false;
  4212e0:	751a      	strb	r2, [r3, #20]
    usart1Obj.txCallback = NULL;
  4212e2:	60da      	str	r2, [r3, #12]
  4212e4:	4770      	bx	lr
  4212e6:	bf00      	nop
  4212e8:	40028000 	.word	0x40028000
  4212ec:	20400020 	.word	0x20400020

Disassembly of section .text.USART1_Read%294:

004212f0 <USART1_Read>:
    if(NULL != lBuffer)
  4212f0:	b1a0      	cbz	r0, 42131c <.LCFI6>
{
  4212f2:	b538      	push	{r3, r4, r5, lr}

004212f4 <.LCFI5>:
  4212f4:	4605      	mov	r5, r0
  4212f6:	460c      	mov	r4, r1
        USART1_ErrorGet();
  4212f8:	f000 fa5e 	bl	4217b8 <.LFE6>

004212fc <.LVL27>:
        if(usart1Obj.rxBusyStatus == false)
  4212fc:	4b09      	ldr	r3, [pc, #36]	; (421324 <.LVL33>)
  4212fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
  421302:	b96b      	cbnz	r3, 421320 <.LCFI7>
            usart1Obj.rxBuffer = lBuffer;
  421304:	4b07      	ldr	r3, [pc, #28]	; (421324 <.LVL33>)
  421306:	619d      	str	r5, [r3, #24]
            usart1Obj.rxSize = size;
  421308:	61dc      	str	r4, [r3, #28]
            usart1Obj.rxProcessedSize = 0;
  42130a:	2200      	movs	r2, #0
  42130c:	621a      	str	r2, [r3, #32]
            usart1Obj.rxBusyStatus = true;
  42130e:	2001      	movs	r0, #1
  421310:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c

00421314 <.LVL28>:
            USART1_REGS->US_IER = (US_IER_RXRDY_Msk | US_IER_FRAME_Msk | US_IER_PARE_Msk | US_IER_OVRE_Msk);
  421314:	22e1      	movs	r2, #225	; 0xe1
  421316:	4b04      	ldr	r3, [pc, #16]	; (421328 <.LVL33+0x4>)
  421318:	609a      	str	r2, [r3, #8]
  42131a:	bd38      	pop	{r3, r4, r5, pc}

0042131c <.LCFI6>:
    bool status = false;
  42131c:	2000      	movs	r0, #0

0042131e <.LVL30>:
  42131e:	4770      	bx	lr

00421320 <.LCFI7>:
  421320:	2000      	movs	r0, #0

00421322 <.LVL32>:
}
  421322:	bd38      	pop	{r3, r4, r5, pc}

00421324 <.LVL33>:
  421324:	20400020 	.word	0x20400020
  421328:	40028000 	.word	0x40028000

Disassembly of section .text.random_test%295:

0042132c <random_test>:
{
  42132c:	b500      	push	{lr}

0042132e <.LCFI39>:
  42132e:	b0cb      	sub	sp, #300	; 0x12c

00421330 <.LCFI40>:
    appData.random_test_result = 1;
  421330:	2201      	movs	r2, #1
  421332:	4b0b      	ldr	r3, [pc, #44]	; (421360 <.LVL109+0x10>)
  421334:	641a      	str	r2, [r3, #64]	; 0x40
    ret = CRYPT_RNG_Initialize(&rng);
  421336:	a808      	add	r0, sp, #32
  421338:	f000 ffa0 	bl	42227c <.LFE15>

0042133c <.LVL107>:
    if (ret == 0) 
  42133c:	b110      	cbz	r0, 421344 <.LCFI42>
}
  42133e:	b04b      	add	sp, #300	; 0x12c

00421340 <.LCFI41>:
  421340:	f85d fb04 	ldr.w	pc, [sp], #4

00421344 <.LCFI42>:
        ret = CRYPT_RNG_BlockGenerate(&rng, block, sizeof(block));   
  421344:	2220      	movs	r2, #32
  421346:	4669      	mov	r1, sp
  421348:	eb0d 0002 	add.w	r0, sp, r2

0042134c <.LVL108>:
  42134c:	f000 fe7a 	bl	422044 <.LFE17>

00421350 <.LVL109>:
        if (ret == 0) 
  421350:	2800      	cmp	r0, #0
  421352:	d1f4      	bne.n	42133e <.LVL107+0x2>
            appData.random_test_result--;
  421354:	4a02      	ldr	r2, [pc, #8]	; (421360 <.LVL109+0x10>)
  421356:	6c13      	ldr	r3, [r2, #64]	; 0x40
  421358:	3b01      	subs	r3, #1
  42135a:	6413      	str	r3, [r2, #64]	; 0x40
}
  42135c:	e7ef      	b.n	42133e <.LVL107+0x2>
  42135e:	bf00      	nop
  421360:	2040d534 	.word	0x2040d534

Disassembly of section .text.GetMyVersion%296:

00421364 <GetMyVersion>:
{
  421364:	b470      	push	{r4, r5, r6}

00421366 <.LCFI42>:
    word32 idx = *inOutIdx;
  421366:	680c      	ldr	r4, [r1, #0]

00421368 <.LVL270>:
    if ((idx + MIN_VERSION_SZ) > maxIdx)
  421368:	1ce5      	adds	r5, r4, #3
  42136a:	429d      	cmp	r5, r3
  42136c:	d80d      	bhi.n	42138a <.LCFI44>
    if (input[idx++] != ASN_INTEGER)
  42136e:	1c66      	adds	r6, r4, #1

00421370 <.LVL271>:
  421370:	5d03      	ldrb	r3, [r0, r4]

00421372 <.LVL272>:
  421372:	2b02      	cmp	r3, #2
  421374:	d10c      	bne.n	421390 <.LVL278>
    if (input[idx++] != 0x01)
  421376:	3402      	adds	r4, #2

00421378 <.LVL273>:
  421378:	5d83      	ldrb	r3, [r0, r6]
  42137a:	2b01      	cmp	r3, #1
  42137c:	d10b      	bne.n	421396 <.LVL280>

0042137e <.LVL274>:
    *version  = input[idx++];
  42137e:	5d03      	ldrb	r3, [r0, r4]
  421380:	6013      	str	r3, [r2, #0]
    *inOutIdx = idx;
  421382:	600d      	str	r5, [r1, #0]
    return *version;
  421384:	6810      	ldr	r0, [r2, #0]

00421386 <.LVL275>:
}
  421386:	bc70      	pop	{r4, r5, r6}

00421388 <.LCFI43>:
  421388:	4770      	bx	lr

0042138a <.LCFI44>:
        return ASN_PARSE_E;
  42138a:	f06f 008b 	mvn.w	r0, #139	; 0x8b

0042138e <.LVL277>:
  42138e:	e7fa      	b.n	421386 <.LVL275>

00421390 <.LVL278>:
        return ASN_PARSE_E;
  421390:	f06f 008b 	mvn.w	r0, #139	; 0x8b

00421394 <.LVL279>:
  421394:	e7f7      	b.n	421386 <.LVL275>

00421396 <.LVL280>:
        return ASN_VERSION_E;
  421396:	f06f 008c 	mvn.w	r0, #140	; 0x8c

0042139a <.LVL281>:
  42139a:	e7f4      	b.n	421386 <.LVL275>

Disassembly of section .rodata.pc1%297:

0042139c <pc1>:
  42139c:	3139 2129 1119 0109 323a 222a 121a 020a     91)!....:2*"....
  4213ac:	333b 232b 131b 030b 343c 242c 373f 272f     ;3+#....<4,$?7/'
  4213bc:	171f 070f 363e 262e 161e 060e 353d 252d     ....>6.&....=5-%
  4213cc:	151d 050d 141c 040c                         ........

Disassembly of section .text.wc_InitMd5_ex%298:

004213d4 <wc_InitMd5_ex>:
    if (md5 == NULL)
  4213d4:	4603      	mov	r3, r0
  4213d6:	b1a0      	cbz	r0, 421402 <.LVL328>
    md5->heap = heap;
  4213d8:	65c1      	str	r1, [r0, #92]	; 0x5c

004213da <.LBB139>:
    md5->digest[0] = 0x67452301L;
  4213da:	4a0b      	ldr	r2, [pc, #44]	; (421408 <.LVL329+0x2>)

004213dc <.LVL325>:
  4213dc:	64c2      	str	r2, [r0, #76]	; 0x4c
    md5->digest[1] = 0xefcdab89L;
  4213de:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
  4213e2:	6502      	str	r2, [r0, #80]	; 0x50
    md5->digest[2] = 0x98badcfeL;
  4213e4:	f102 4229 	add.w	r2, r2, #2835349504	; 0xa9000000
  4213e8:	f5a2 1296 	sub.w	r2, r2, #1228800	; 0x12c000
  4213ec:	f6a2 628b 	subw	r2, r2, #3723	; 0xe8b
  4213f0:	6542      	str	r2, [r0, #84]	; 0x54
    md5->digest[3] = 0x10325476L;
  4213f2:	f1a2 3288 	sub.w	r2, r2, #2290649224	; 0x88888888
  4213f6:	6582      	str	r2, [r0, #88]	; 0x58
    md5->buffLen = 0;
  4213f8:	2000      	movs	r0, #0

004213fa <.LVL326>:
  4213fa:	6018      	str	r0, [r3, #0]
    md5->loLen   = 0;
  4213fc:	6058      	str	r0, [r3, #4]
    md5->hiLen   = 0;
  4213fe:	6098      	str	r0, [r3, #8]

00421400 <.LBE139>:
  421400:	4770      	bx	lr

00421402 <.LVL328>:
        return BAD_FUNC_ARG;
  421402:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00421406 <.LVL329>:
}
  421406:	4770      	bx	lr
  421408:	67452301 	.word	0x67452301

Disassembly of section .text.fp_to_unsigned_bin_at_pos%299:

0042140c <fp_to_unsigned_bin_at_pos>:
{
  42140c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

00421410 <.LCFI74>:
   while (fp_iszero (t) == FP_NO) {
  421410:	680b      	ldr	r3, [r1, #0]
  421412:	b1ab      	cbz	r3, 421440 <.LVL499>
  421414:	460c      	mov	r4, r1
  421416:	4605      	mov	r5, r0
  421418:	1816      	adds	r6, r2, r0
      fp_div_2d (t, 8, t, NULL);
  42141a:	f04f 0800 	mov.w	r8, #0
  42141e:	2708      	movs	r7, #8

00421420 <.LVL495>:
      b[x++] = (unsigned char) (t->dp[0] & 255);
  421420:	3501      	adds	r5, #1
  421422:	68a3      	ldr	r3, [r4, #8]
  421424:	f806 3b01 	strb.w	r3, [r6], #1
      fp_div_2d (t, 8, t, NULL);
  421428:	4643      	mov	r3, r8
  42142a:	4622      	mov	r2, r4
  42142c:	4639      	mov	r1, r7
  42142e:	4620      	mov	r0, r4
  421430:	f7fc fc54 	bl	41dcdc <.LFE25>

00421434 <.LVL497>:
   while (fp_iszero (t) == FP_NO) {
  421434:	6823      	ldr	r3, [r4, #0]
  421436:	2b00      	cmp	r3, #0
  421438:	d1f2      	bne.n	421420 <.LVL495>

0042143a <.LVL498>:
}
  42143a:	4628      	mov	r0, r5
  42143c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00421440 <.LVL499>:
   while (fp_iszero (t) == FP_NO) {
  421440:	4605      	mov	r5, r0
  return x;
  421442:	e7fa      	b.n	42143a <.LVL498>

Disassembly of section .text.SYS_TIME_ResourceUnlock%300:

00421444 <SYS_TIME_ResourceUnlock>:
    SYS_INT_SourceEnable(gSystemCounterObj.hwTimerIntNum);
  421444:	4b0b      	ldr	r3, [pc, #44]	; (421474 <.LVL4+0x4>)
  421446:	f993 3008 	ldrsb.w	r3, [r3, #8]

0042144a <.LBB16>:
  if ((int32_t)(IRQn) >= 0)
  42144a:	2b00      	cmp	r3, #0
  42144c:	db08      	blt.n	421460 <.LBE16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  42144e:	0959      	lsrs	r1, r3, #5
  421450:	f003 031f 	and.w	r3, r3, #31

00421454 <.LVL1>:
  421454:	2201      	movs	r2, #1
  421456:	fa02 f303 	lsl.w	r3, r2, r3
  42145a:	4a07      	ldr	r2, [pc, #28]	; (421478 <.LVL4+0x8>)
  42145c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

00421460 <.LBE16>:
    if(gSystemCounterObj.interruptNestingCount == 0)
  421460:	4b04      	ldr	r3, [pc, #16]	; (421474 <.LVL4+0x4>)
  421462:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
  421466:	b91b      	cbnz	r3, 421470 <.LVL4>

00421468 <.LBB18>:
// *****************************************************************************
/* Function: OSAL_RESULT OSAL_MUTEX_Unlock(OSAL_MUTEX_HANDLE_TYPE mutexID)
 */
static OSAL_RESULT __attribute__((always_inline)) OSAL_MUTEX_Unlock(OSAL_MUTEX_HANDLE_TYPE* mutexID)
{
    *mutexID = 1;
  421468:	2201      	movs	r2, #1
  42146a:	4b02      	ldr	r3, [pc, #8]	; (421474 <.LVL4+0x4>)
  42146c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

00421470 <.LVL4>:
  421470:	4770      	bx	lr
  421472:	bf00      	nop
  421474:	2040d624 	.word	0x2040d624
  421478:	e000e100 	.word	0xe000e100

Disassembly of section .text.__mcmp%301:

0042147c <__mcmp>:
  42147c:	b430      	push	{r4, r5}

0042147e <.LCFI12>:
  42147e:	690b      	ldr	r3, [r1, #16]
  421480:	4605      	mov	r5, r0
  421482:	6900      	ldr	r0, [r0, #16]

00421484 <.LVL212>:
  421484:	1ac0      	subs	r0, r0, r3

00421486 <.LVL213>:
  421486:	d10f      	bne.n	4214a8 <.LVL223>
  421488:	009b      	lsls	r3, r3, #2

0042148a <.LVL214>:
  42148a:	3514      	adds	r5, #20

0042148c <.LVL215>:
  42148c:	3114      	adds	r1, #20

0042148e <.LVL216>:
  42148e:	4419      	add	r1, r3

00421490 <.LVL217>:
  421490:	442b      	add	r3, r5

00421492 <.LVL218>:
  421492:	e001      	b.n	421498 <.LVL220>

00421494 <.LVL219>:
  421494:	429d      	cmp	r5, r3
  421496:	d207      	bcs.n	4214a8 <.LVL223>

00421498 <.LVL220>:
  421498:	f853 4d04 	ldr.w	r4, [r3, #-4]!

0042149c <.LVL221>:
  42149c:	f851 2d04 	ldr.w	r2, [r1, #-4]!

004214a0 <.LVL222>:
  4214a0:	4294      	cmp	r4, r2
  4214a2:	d0f7      	beq.n	421494 <.LVL219>
  4214a4:	d302      	bcc.n	4214ac <.LCFI14>
  4214a6:	2001      	movs	r0, #1

004214a8 <.LVL223>:
  4214a8:	bc30      	pop	{r4, r5}

004214aa <.LCFI13>:
  4214aa:	4770      	bx	lr

004214ac <.LCFI14>:
  4214ac:	f04f 30ff 	mov.w	r0, #4294967295

004214b0 <.LVL225>:
  4214b0:	e7fa      	b.n	4214a8 <.LVL223>

004214b2 <.LFE27>:
  4214b2:	bf00      	nop

Disassembly of section .text.wc_HashGetDigestSize%302:

004214b4 <wc_HashGetDigestSize>:
    switch(hash_type)
  4214b4:	3803      	subs	r0, #3

004214b6 <.LVL9>:
  4214b6:	2806      	cmp	r0, #6
  4214b8:	d811      	bhi.n	4214de <.LVL15>
  4214ba:	e8df f000 	tbb	[pc, r0]
  4214be:	0604      	.short	0x0604
  4214c0:	0e0c0a08 	.word	0x0e0c0a08
  4214c4:	13          	.byte	0x13
  4214c5:	00          	.byte	0x00
            dig_size = MD5_DIGEST_SIZE;
  4214c6:	2010      	movs	r0, #16
  4214c8:	4770      	bx	lr

004214ca <.LVL10>:
            dig_size = SHA_DIGEST_SIZE;
  4214ca:	2014      	movs	r0, #20
            break;
  4214cc:	4770      	bx	lr

004214ce <.LVL11>:
            dig_size = SHA256_DIGEST_SIZE;
  4214ce:	2020      	movs	r0, #32
            break;
  4214d0:	4770      	bx	lr

004214d2 <.LVL12>:
            dig_size = SHA384_DIGEST_SIZE;
  4214d2:	2030      	movs	r0, #48	; 0x30
            break;
  4214d4:	4770      	bx	lr

004214d6 <.LVL13>:
            dig_size = SHA512_DIGEST_SIZE;
  4214d6:	2040      	movs	r0, #64	; 0x40
            break;
  4214d8:	4770      	bx	lr

004214da <.LVL14>:
            dig_size = MD5_DIGEST_SIZE + SHA_DIGEST_SIZE;
  4214da:	2024      	movs	r0, #36	; 0x24
            break;
  4214dc:	4770      	bx	lr

004214de <.LVL15>:
            dig_size = BAD_FUNC_ARG;
  4214de:	f06f 00ac 	mvn.w	r0, #172	; 0xac
            break;
  4214e2:	4770      	bx	lr

004214e4 <.LVL16>:
    int dig_size = HASH_TYPE_E; /* Default to hash type error */
  4214e4:	f06f 00e7 	mvn.w	r0, #231	; 0xe7
}
  4214e8:	4770      	bx	lr

Disassembly of section .text.wc_Md5Hash%303:

004214ea <wc_Md5Hash>:

#if !defined(WOLFSSL_TI_HASH)

#if !defined(NO_MD5)
    int wc_Md5Hash(const byte* data, word32 len, byte* hash)
    {
  4214ea:	b570      	push	{r4, r5, r6, lr}

004214ec <.LCFI7>:
  4214ec:	b098      	sub	sp, #96	; 0x60

004214ee <.LCFI8>:
  4214ee:	4604      	mov	r4, r0
  4214f0:	460d      	mov	r5, r1
  4214f2:	4616      	mov	r6, r2
        md5 = (Md5*)XMALLOC(sizeof(Md5), NULL, DYNAMIC_TYPE_TMP_BUFFER);
        if (md5 == NULL)
            return MEMORY_E;
    #endif

        ret = wc_InitMd5(md5);
  4214f4:	4668      	mov	r0, sp

004214f6 <.LVL78>:
  4214f6:	f000 fe04 	bl	422102 <.LFE18>

004214fa <.LVL79>:
        if (ret == 0) {
  4214fa:	4603      	mov	r3, r0
  4214fc:	b110      	cbz	r0, 421504 <.LCFI10>
    #ifdef WOLFSSL_SMALL_STACK
        XFREE(md5, NULL, DYNAMIC_TYPE_TMP_BUFFER);
    #endif

        return ret;
    }
  4214fe:	4618      	mov	r0, r3

00421500 <.LVL80>:
  421500:	b018      	add	sp, #96	; 0x60

00421502 <.LCFI9>:
  421502:	bd70      	pop	{r4, r5, r6, pc}

00421504 <.LCFI10>:
            ret = wc_Md5Update(md5, data, len);
  421504:	462a      	mov	r2, r5
  421506:	4621      	mov	r1, r4
  421508:	4668      	mov	r0, sp

0042150a <.LVL82>:
  42150a:	f7fd fb71 	bl	41ebf0 <.LFE23>

0042150e <.LVL83>:
            if (ret == 0) {
  42150e:	4603      	mov	r3, r0
  421510:	2800      	cmp	r0, #0
  421512:	d1f4      	bne.n	4214fe <.LVL79+0x4>
                ret = wc_Md5Final(md5, hash);
  421514:	4631      	mov	r1, r6
  421516:	4668      	mov	r0, sp

00421518 <.LVL84>:
  421518:	f7fb fc54 	bl	41cdc4 <.LFE177>

0042151c <.LVL85>:
  42151c:	4603      	mov	r3, r0

0042151e <.LVL86>:
        return ret;
  42151e:	e7ee      	b.n	4214fe <.LVL79+0x4>

Disassembly of section .text.wc_Sha256Hash%304:

00421520 <wc_Sha256Hash>:
}
#endif /* WOLFSSL_SHA224 */

#if !defined(NO_SHA256)
    int wc_Sha256Hash(const byte* data, word32 len, byte* hash)
    {
  421520:	b570      	push	{r4, r5, r6, lr}

00421522 <.LCFI15>:
  421522:	b09c      	sub	sp, #112	; 0x70

00421524 <.LCFI16>:
  421524:	4604      	mov	r4, r0
  421526:	460d      	mov	r5, r1
  421528:	4616      	mov	r6, r2

0042152a <.LVL97>:
        sha256 = (Sha256*)XMALLOC(sizeof(Sha256), NULL, DYNAMIC_TYPE_TMP_BUFFER);
        if (sha256 == NULL)
            return MEMORY_E;
    #endif

        if ((ret = wc_InitSha256(sha256)) != 0) {
  42152a:	4668      	mov	r0, sp

0042152c <.LVL98>:
  42152c:	f000 ff30 	bl	422390 <.LFE20>

00421530 <.LVL99>:
  421530:	4603      	mov	r3, r0
  421532:	b110      	cbz	r0, 42153a <.LCFI18>
    #ifdef WOLFSSL_SMALL_STACK
        XFREE(sha256, NULL, DYNAMIC_TYPE_TMP_BUFFER);
    #endif

        return ret;
    }
  421534:	4618      	mov	r0, r3

00421536 <.LVL100>:
  421536:	b01c      	add	sp, #112	; 0x70

00421538 <.LCFI17>:
  421538:	bd70      	pop	{r4, r5, r6, pc}

0042153a <.LCFI18>:
        else if ((ret = wc_Sha256Update(sha256, data, len)) != 0) {
  42153a:	462a      	mov	r2, r5
  42153c:	4621      	mov	r1, r4
  42153e:	4668      	mov	r0, sp

00421540 <.LVL102>:
  421540:	f7fc f8a9 	bl	41d696 <.LFE18>

00421544 <.LVL103>:
  421544:	4603      	mov	r3, r0
  421546:	2800      	cmp	r0, #0
  421548:	d1f4      	bne.n	421534 <.LVL99+0x4>
        else if ((ret = wc_Sha256Final(sha256, hash)) != 0) {
  42154a:	4631      	mov	r1, r6
  42154c:	4668      	mov	r0, sp

0042154e <.LVL104>:
  42154e:	f7f8 fb33 	bl	419bb8 <.LFE175>

00421552 <.LVL105>:
  421552:	4603      	mov	r3, r0

00421554 <.LVL106>:
        return ret;
  421554:	e7ee      	b.n	421534 <.LVL99+0x4>

Disassembly of section .text.wc_Sha512Hash%305:

00421556 <wc_Sha512Hash>:
#endif /* !defined(WOLFSSL_TI_HASH) */


#if defined(WOLFSSL_SHA512)
    int wc_Sha512Hash(const byte* data, word32 len, byte* hash)
    {
  421556:	b570      	push	{r4, r5, r6, lr}

00421558 <.LCFI19>:
  421558:	b0b8      	sub	sp, #224	; 0xe0

0042155a <.LCFI20>:
  42155a:	4604      	mov	r4, r0
  42155c:	460d      	mov	r5, r1
  42155e:	4616      	mov	r6, r2

00421560 <.LVL108>:
        sha512 = (Sha512*)XMALLOC(sizeof(Sha512), NULL, DYNAMIC_TYPE_TMP_BUFFER);
        if (sha512 == NULL)
            return MEMORY_E;
    #endif

        if ((ret = wc_InitSha512(sha512)) != 0) {
  421560:	4668      	mov	r0, sp

00421562 <.LVL109>:
  421562:	f000 ff00 	bl	422366 <.LFE52>

00421566 <.LVL110>:
  421566:	4603      	mov	r3, r0
  421568:	b110      	cbz	r0, 421570 <.LCFI22>
    #ifdef WOLFSSL_SMALL_STACK
        XFREE(sha512, NULL, DYNAMIC_TYPE_TMP_BUFFER);
    #endif

        return ret;
    }
  42156a:	4618      	mov	r0, r3

0042156c <.LVL111>:
  42156c:	b038      	add	sp, #224	; 0xe0

0042156e <.LCFI21>:
  42156e:	bd70      	pop	{r4, r5, r6, pc}

00421570 <.LCFI22>:
        else if ((ret = wc_Sha512Update(sha512, data, len)) != 0) {
  421570:	462a      	mov	r2, r5
  421572:	4621      	mov	r1, r4
  421574:	4668      	mov	r0, sp

00421576 <.LVL113>:
  421576:	f7fa fdc9 	bl	41c10c <.LFE178>

0042157a <.LVL114>:
  42157a:	4603      	mov	r3, r0
  42157c:	2800      	cmp	r0, #0
  42157e:	d1f4      	bne.n	42156a <.LVL110+0x4>
        else if ((ret = wc_Sha512Final(sha512, hash)) != 0) {
  421580:	4631      	mov	r1, r6
  421582:	4668      	mov	r0, sp

00421584 <.LVL115>:
  421584:	f7f6 fa08 	bl	417998 <wc_Sha512Final>

00421588 <.LVL116>:
  421588:	4603      	mov	r3, r0

0042158a <.LVL117>:
        return ret;
  42158a:	e7ee      	b.n	42156a <.LVL110+0x4>

Disassembly of section .text.wc_Sha384Hash%306:

0042158c <wc_Sha384Hash>:

    #if defined(WOLFSSL_SHA384)
        int wc_Sha384Hash(const byte* data, word32 len, byte* hash)
        {
  42158c:	b570      	push	{r4, r5, r6, lr}

0042158e <.LCFI23>:
  42158e:	b0b8      	sub	sp, #224	; 0xe0

00421590 <.LCFI24>:
  421590:	4604      	mov	r4, r0
  421592:	460d      	mov	r5, r1
  421594:	4616      	mov	r6, r2

00421596 <.LVL119>:
            sha384 = (Sha384*)XMALLOC(sizeof(Sha384), NULL, DYNAMIC_TYPE_TMP_BUFFER);
            if (sha384 == NULL)
                return MEMORY_E;
        #endif

            if ((ret = wc_InitSha384(sha384)) != 0) {
  421596:	4668      	mov	r0, sp

00421598 <.LVL120>:
  421598:	f000 feec 	bl	422374 <.LFE22>

0042159c <.LVL121>:
  42159c:	4603      	mov	r3, r0
  42159e:	b110      	cbz	r0, 4215a6 <.LCFI26>
        #ifdef WOLFSSL_SMALL_STACK
            XFREE(sha384, NULL, DYNAMIC_TYPE_TMP_BUFFER);
        #endif

            return ret;
        }
  4215a0:	4618      	mov	r0, r3

004215a2 <.LVL122>:
  4215a2:	b038      	add	sp, #224	; 0xe0

004215a4 <.LCFI25>:
  4215a4:	bd70      	pop	{r4, r5, r6, pc}

004215a6 <.LCFI26>:
            else if ((ret = wc_Sha384Update(sha384, data, len)) != 0) {
  4215a6:	462a      	mov	r2, r5
  4215a8:	4621      	mov	r1, r4
  4215aa:	4668      	mov	r0, sp

004215ac <.LVL124>:
  4215ac:	f7fa fe23 	bl	41c1f6 <.LBE719>

004215b0 <.LVL125>:
  4215b0:	4603      	mov	r3, r0
  4215b2:	2800      	cmp	r0, #0
  4215b4:	d1f4      	bne.n	4215a0 <.LVL121+0x4>
            else if ((ret = wc_Sha384Final(sha384, hash)) != 0) {
  4215b6:	4631      	mov	r1, r6
  4215b8:	4668      	mov	r0, sp

004215ba <.LVL126>:
  4215ba:	f7f6 fb35 	bl	417c28 <.LFE21>

004215be <.LVL127>:
  4215be:	4603      	mov	r3, r0

004215c0 <.LVL128>:
            return ret;
  4215c0:	e7ee      	b.n	4215a0 <.LVL121+0x4>

Disassembly of section .text.inflateEnd%307:

004215c2 <inflateEnd>:

int ZEXPORT inflateEnd(strm)
z_streamp strm;
{
    struct inflate_state FAR *state;
    if (strm == Z_NULL || strm->state == Z_NULL || strm->zfree == (free_func)0)
  4215c2:	b180      	cbz	r0, 4215e6 <.LCFI21>
{
  4215c4:	b510      	push	{r4, lr}

004215c6 <.LCFI20>:
  4215c6:	4604      	mov	r4, r0
    if (strm == Z_NULL || strm->state == Z_NULL || strm->zfree == (free_func)0)
  4215c8:	69c3      	ldr	r3, [r0, #28]
  4215ca:	b17b      	cbz	r3, 4215ec <.LCFI22>
  4215cc:	6a42      	ldr	r2, [r0, #36]	; 0x24
  4215ce:	b182      	cbz	r2, 4215f2 <.LVL496>

004215d0 <.LVL488>:
        return Z_STREAM_ERROR;
    state = (struct inflate_state FAR *)strm->state;
    if (state->window != Z_NULL) ZFREE(strm, state->window);
  4215d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
  4215d2:	b109      	cbz	r1, 4215d8 <.LVL490>
  4215d4:	6a80      	ldr	r0, [r0, #40]	; 0x28

004215d6 <.LVL489>:
  4215d6:	4790      	blx	r2

004215d8 <.LVL490>:
    ZFREE(strm, strm->state);
  4215d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4215da:	69e1      	ldr	r1, [r4, #28]
  4215dc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  4215de:	4798      	blx	r3
    strm->state = Z_NULL;
  4215e0:	2000      	movs	r0, #0
  4215e2:	61e0      	str	r0, [r4, #28]
    Tracev((stderr, "inflate: end\n"));
    return Z_OK;
  4215e4:	bd10      	pop	{r4, pc}

004215e6 <.LCFI21>:
        return Z_STREAM_ERROR;
  4215e6:	f06f 0001 	mvn.w	r0, #1

004215ea <.LVL493>:
  4215ea:	4770      	bx	lr

004215ec <.LCFI22>:
  4215ec:	f06f 0001 	mvn.w	r0, #1

004215f0 <.LVL495>:
  4215f0:	bd10      	pop	{r4, pc}

004215f2 <.LVL496>:
  4215f2:	f06f 0001 	mvn.w	r0, #1

004215f6 <.LVL497>:
}
  4215f6:	bd10      	pop	{r4, pc}

Disassembly of section .text.fp_cmp%308:

004215f8 <fp_cmp>:
{
  4215f8:	b510      	push	{r4, lr}

004215fa <.LCFI18>:
  4215fa:	4603      	mov	r3, r0
  4215fc:	460c      	mov	r4, r1
   if (a->sign == FP_NEG && b->sign == FP_ZPOS) {
  4215fe:	6842      	ldr	r2, [r0, #4]
  421600:	2a01      	cmp	r2, #1
  421602:	d008      	beq.n	421616 <.LVL140>
   } else if (a->sign == FP_ZPOS && b->sign == FP_NEG) {
  421604:	b912      	cbnz	r2, 42160c <.LVL137+0x4>
  421606:	6860      	ldr	r0, [r4, #4]

00421608 <.LVL137>:
  421608:	2801      	cmp	r0, #1
  42160a:	d00b      	beq.n	421624 <.LVL144>
         return fp_cmp_mag(a, b);
  42160c:	4621      	mov	r1, r4

0042160e <.LVL138>:
  42160e:	4618      	mov	r0, r3
  421610:	f7fe fd11 	bl	420036 <.LFE16>

00421614 <.LVL139>:
  421614:	bd10      	pop	{r4, pc}

00421616 <.LVL140>:
   if (a->sign == FP_NEG && b->sign == FP_ZPOS) {
  421616:	684a      	ldr	r2, [r1, #4]
  421618:	b12a      	cbz	r2, 421626 <.LVL145>
         return fp_cmp_mag(b, a);
  42161a:	4601      	mov	r1, r0

0042161c <.LVL141>:
  42161c:	4620      	mov	r0, r4

0042161e <.LVL142>:
  42161e:	f7fe fd0a 	bl	420036 <.LFE16>

00421622 <.LVL143>:
  421622:	bd10      	pop	{r4, pc}

00421624 <.LVL144>:
  421624:	bd10      	pop	{r4, pc}

00421626 <.LVL145>:
      return FP_LT;
  421626:	f04f 30ff 	mov.w	r0, #4294967295

0042162a <.LVL146>:
  42162a:	bd10      	pop	{r4, pc}

Disassembly of section .text.SYS_TIME_ResourceLock%309:

0042162c <SYS_TIME_ResourceLock>:
{
  42162c:	b508      	push	{r3, lr}

0042162e <.LCFI9>:
    if (gSystemCounterObj.interruptNestingCount == 0)
  42162e:	4b0b      	ldr	r3, [pc, #44]	; (42165c <.LVL98+0x8>)
  421630:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
  421634:	b983      	cbnz	r3, 421658 <.LVL98+0x4>

00421636 <.LBB24>:
    if (*mutexID == 1)
  421636:	4b09      	ldr	r3, [pc, #36]	; (42165c <.LVL98+0x8>)
  421638:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
  42163c:	2b01      	cmp	r3, #1
  42163e:	d001      	beq.n	421644 <.LBB27>

00421640 <.LBE24>:
            return false;
  421640:	2000      	movs	r0, #0
}
  421642:	bd08      	pop	{r3, pc}

00421644 <.LBB27>:
        *mutexID = 0;
  421644:	4b05      	ldr	r3, [pc, #20]	; (42165c <.LVL98+0x8>)
  421646:	2200      	movs	r2, #0
  421648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

0042164c <.LBE27>:
            SYS_INT_SourceDisable(gSystemCounterObj.hwTimerIntNum);
  42164c:	f993 0008 	ldrsb.w	r0, [r3, #8]
  421650:	f7ff fbae 	bl	420db0 <.LFE28>

00421654 <.LVL98>:
            return true;
  421654:	2001      	movs	r0, #1
  421656:	bd08      	pop	{r3, pc}
    return true;
  421658:	2001      	movs	r0, #1
  42165a:	bd08      	pop	{r3, pc}
  42165c:	2040d624 	.word	0x2040d624

Disassembly of section .text.__libc_fini_array%310:

00421660 <__libc_fini_array>:
  421660:	b538      	push	{r3, r4, r5, lr}

00421662 <.LCFI0>:
  421662:	4c0a      	ldr	r4, [pc, #40]	; (42168c <.LVL6+0x2>)
  421664:	4d0a      	ldr	r5, [pc, #40]	; (421690 <.LVL6+0x6>)
  421666:	1b64      	subs	r4, r4, r5

00421668 <.LVL0>:
  421668:	10a4      	asrs	r4, r4, #2

0042166a <.LVL1>:
  42166a:	d00a      	beq.n	421682 <.LVL4+0x4>
  42166c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  421670:	3b01      	subs	r3, #1
  421672:	eb05 0583 	add.w	r5, r5, r3, lsl #2

00421676 <.LVL2>:
  421676:	3c01      	subs	r4, #1

00421678 <.LVL3>:
  421678:	f855 3904 	ldr.w	r3, [r5], #-4
  42167c:	4798      	blx	r3

0042167e <.LVL4>:
  42167e:	2c00      	cmp	r4, #0
  421680:	d1f9      	bne.n	421676 <.LVL2>
  421682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

00421686 <.LCFI1>:
  421686:	f7de bd79 	b.w	40017c <_fini>

0042168a <.LVL6>:
  42168a:	bf00      	nop
  42168c:	0040018c 	.word	0x0040018c
  421690:	00400188 	.word	0x00400188

Disassembly of section .text.Hash_DRBG_Uninstantiate%311:

00421694 <Hash_DRBG_Uninstantiate>:
{
  421694:	b410      	push	{r4}

00421696 <.LCFI0>:
  421696:	f100 0478 	add.w	r4, r0, #120	; 0x78

0042169a <.LBB35>:
    volatile byte* z = (volatile byte*)mem;
  42169a:	4603      	mov	r3, r0
    while (len--) *z++ = 0;
  42169c:	2100      	movs	r1, #0

0042169e <.LVL2>:
  42169e:	1c5a      	adds	r2, r3, #1

004216a0 <.LVL3>:
  4216a0:	7019      	strb	r1, [r3, #0]

004216a2 <.LVL4>:
  4216a2:	4613      	mov	r3, r2
  4216a4:	42a2      	cmp	r2, r4
  4216a6:	d1fa      	bne.n	42169e <.LVL2>
  4216a8:	1e43      	subs	r3, r0, #1
  4216aa:	f100 0177 	add.w	r1, r0, #119	; 0x77
  4216ae:	2000      	movs	r0, #0

004216b0 <.LBE35>:
        compareSum |= compareDrbg[i] ^ 0;
  4216b0:	f813 2f01 	ldrb.w	r2, [r3, #1]!

004216b4 <.LVL6>:
  4216b4:	4310      	orrs	r0, r2

004216b6 <.LVL7>:
    for (i = 0; i < sizeof(DRBG); i++)
  4216b6:	4299      	cmp	r1, r3
  4216b8:	d1fa      	bne.n	4216b0 <.LBE35>
    return (compareSum == 0) ? DRBG_SUCCESS : DRBG_FAILURE;
  4216ba:	2800      	cmp	r0, #0
}
  4216bc:	bf18      	it	ne
  4216be:	2002      	movne	r0, #2

004216c0 <.LVL8>:
  4216c0:	f85d 4b04 	ldr.w	r4, [sp], #4

004216c4 <.LCFI1>:
  4216c4:	4770      	bx	lr

Disassembly of section .rodata.pc2%312:

004216c8 <pc2>:
  4216c8:	110e 180b 0501 1c03 060f 0a15 1317 040c     ................
  4216d8:	081a 0710 141b 020d 3429 251f 372f 281e     ........)4.%/7.(
  4216e8:	2d33 3021 312c 3827 3522 2a2e 2432 201d     3-!0,1'8"5.*2$. 

Disassembly of section .rodata.entropyA%313:

004216f8 <entropyA>:
  4216f8:	3663 7733 1ee4 4686 eb8d b40a eda8 3f68     c63w...F......h?
  421708:	136a 474e 14e0 00c7 4e45 e981 5853 69a5     j.NG....EN..SX.i
  421718:	8a80 8fa3 722a 23a6 9159 9f5a 048a 68ca     ....*r.#Y.Z....h

Disassembly of section .rodata.entropyB%314:

00421728 <entropyB>:
  421728:	5aa6 f3d0 db45 0e4e e8ff c375 e7a2 421f     .Z..E.N...u....B
  421738:	12c7 629d f50f 19c1 efa9 f055 8551 fbe0     ...b......U.Q...
  421748:	8185 31f9 1775 6e27 e906 7d60 cbdb 2ecc     ...1u.'n..`}....

Disassembly of section .text.same70_InitRng%315:

00421758 <same70_InitRng>:
    if ((PMC_REGS->PMC_PCSR1 & PmcBit) != PmcBit)
  421758:	4b08      	ldr	r3, [pc, #32]	; (42177c <.LBE9+0x4>)
  42175a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  42175e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  421762:	d109      	bne.n	421778 <.LBE9>
        PMC_REGS->PMC_PCER1 = PmcBit;
  421764:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  421768:	4b04      	ldr	r3, [pc, #16]	; (42177c <.LBE9+0x4>)
  42176a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        TRNG_REGS->TRNG_CR = TRNG_CR_KEY_PASSWD | TRNG_CR_ENABLE_Msk;
  42176e:	4a04      	ldr	r2, [pc, #16]	; (421780 <.LBE9+0x8>)
  421770:	4b04      	ldr	r3, [pc, #16]	; (421784 <.LBE9+0xc>)
  421772:	601a      	str	r2, [r3, #0]

00421774 <.LBB9>:
  __ASM volatile ("dmb 0xF":::"memory");
  421774:	f3bf 8f5f 	dmb	sy

00421778 <.LBE9>:
}
  421778:	2000      	movs	r0, #0
  42177a:	4770      	bx	lr
  42177c:	400e0600 	.word	0x400e0600
  421780:	524e4701 	.word	0x524e4701
  421784:	40070000 	.word	0x40070000

Disassembly of section .text.SYS_CONSOLE_Write%316:

00421788 <SYS_CONSOLE_Write>:
    None.
*/

ssize_t SYS_CONSOLE_Write(const SYS_MODULE_INDEX index, int fd, const char *buf, size_t count )
{
    if (index >= SYS_CONSOLE_DEVICE_MAX_INSTANCES)
  421788:	b970      	cbnz	r0, 4217a8 <.LCFI9>
        return 0;

    if (consoleDeviceInstance[index].consoleDeviceInstanceStatus == SYS_STATUS_UNINITIALIZED
  42178a:	480a      	ldr	r0, [pc, #40]	; (4217b4 <.LVL48>)

0042178c <.LVL42>:
  42178c:	f990 0000 	ldrsb.w	r0, [r0]
  421790:	b160      	cbz	r0, 4217ac <.LVL47+0x2>
{
  421792:	b538      	push	{r3, r4, r5, lr}

00421794 <.LCFI8>:
            || consoleDeviceInstance[index].consoleInstanceDevDesc == NULL)
  421794:	4807      	ldr	r0, [pc, #28]	; (4217b4 <.LVL48>)
  421796:	6845      	ldr	r5, [r0, #4]
  421798:	b155      	cbz	r5, 4217b0 <.LCFI10>
  42179a:	4614      	mov	r4, r2
  42179c:	4608      	mov	r0, r1
    {
        return 0;
    }

    return consoleDeviceInstance[index].consoleInstanceDevDesc->sysConsoleWrite(fd, buf, count);
  42179e:	68ed      	ldr	r5, [r5, #12]
  4217a0:	461a      	mov	r2, r3

004217a2 <.LVL43>:
  4217a2:	4621      	mov	r1, r4

004217a4 <.LVL44>:
  4217a4:	47a8      	blx	r5

004217a6 <.LVL45>:
  4217a6:	bd38      	pop	{r3, r4, r5, pc}

004217a8 <.LCFI9>:
        return 0;
  4217a8:	2000      	movs	r0, #0

004217aa <.LVL47>:
  4217aa:	4770      	bx	lr
        return 0;
  4217ac:	2000      	movs	r0, #0
  4217ae:	4770      	bx	lr

004217b0 <.LCFI10>:
  4217b0:	2000      	movs	r0, #0
}
  4217b2:	bd38      	pop	{r3, r4, r5, pc}

004217b4 <.LVL48>:
  4217b4:	2040d740 	.word	0x2040d740

Disassembly of section .text.USART1_ErrorGet%317:

004217b8 <USART1_ErrorGet>:
    uint32_t status = USART1_REGS->US_CSR;
  4217b8:	4b0a      	ldr	r3, [pc, #40]	; (4217e4 <.LVL9+0xe>)
  4217ba:	6958      	ldr	r0, [r3, #20]

004217bc <.LVL6>:
    if(errors != USART_ERROR_NONE)
  4217bc:	f010 00e0 	ands.w	r0, r0, #224	; 0xe0

004217c0 <.LVL7>:
  4217c0:	d100      	bne.n	4217c4 <.LBB14>
}
  4217c2:	4770      	bx	lr

004217c4 <.LBB14>:
    USART1_REGS->US_CR|= US_CR_RSTSTA_Msk;
  4217c4:	681a      	ldr	r2, [r3, #0]
  4217c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  4217ca:	601a      	str	r2, [r3, #0]
    while( US_CSR_RXRDY_Msk == (USART1_REGS->US_CSR& US_CSR_RXRDY_Msk) )
  4217cc:	695b      	ldr	r3, [r3, #20]
  4217ce:	f013 0f01 	tst.w	r3, #1
  4217d2:	d0f6      	beq.n	4217c2 <.LVL7+0x2>
        dummyData = (USART1_REGS->US_RHR& US_RHR_RXCHR_Msk);
  4217d4:	4b03      	ldr	r3, [pc, #12]	; (4217e4 <.LVL9+0xe>)

004217d6 <.LVL9>:
  4217d6:	699a      	ldr	r2, [r3, #24]
    while( US_CSR_RXRDY_Msk == (USART1_REGS->US_CSR& US_CSR_RXRDY_Msk) )
  4217d8:	695a      	ldr	r2, [r3, #20]
  4217da:	f012 0f01 	tst.w	r2, #1
  4217de:	d1fa      	bne.n	4217d6 <.LVL9>
  4217e0:	e7ef      	b.n	4217c2 <.LVL7+0x2>
  4217e2:	bf00      	nop
  4217e4:	40028000 	.word	0x40028000

Disassembly of section .text%318:

004217e8 <__aeabi_uldivmod>:
  4217e8:	b953      	cbnz	r3, 421800 <__aeabi_uldivmod+0x18>
  4217ea:	b94a      	cbnz	r2, 421800 <__aeabi_uldivmod+0x18>
  4217ec:	2900      	cmp	r1, #0
  4217ee:	bf08      	it	eq
  4217f0:	2800      	cmpeq	r0, #0
  4217f2:	bf1c      	itt	ne
  4217f4:	f04f 31ff 	movne.w	r1, #4294967295
  4217f8:	f04f 30ff 	movne.w	r0, #4294967295
  4217fc:	f7f6 b8ca 	b.w	417994 <.LBE10>
  421800:	f1ad 0c08 	sub.w	ip, sp, #8
  421804:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  421808:	f7f5 fca4 	bl	417154 <.LBE93>
  42180c:	f8dd e004 	ldr.w	lr, [sp, #4]
  421810:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  421814:	b004      	add	sp, #16
  421816:	4770      	bx	lr

Disassembly of section .text.wc_ShaHash%319:

00421818 <wc_ShaHash>:
    {
  421818:	b5f0      	push	{r4, r5, r6, r7, lr}

0042181a <.LCFI11>:
  42181a:	b09b      	sub	sp, #108	; 0x6c

0042181c <.LCFI12>:
  42181c:	4606      	mov	r6, r0
  42181e:	460f      	mov	r7, r1
  421820:	4615      	mov	r5, r2

00421822 <.LVL88>:
        if ((ret = wc_InitSha(sha)) != 0) {
  421822:	a801      	add	r0, sp, #4

00421824 <.LVL89>:
  421824:	f000 fdad 	bl	422382 <.LFE28>

00421828 <.LVL90>:
  421828:	4604      	mov	r4, r0
  42182a:	b110      	cbz	r0, 421832 <.LCFI14>

0042182c <.LVL91>:
    }
  42182c:	4620      	mov	r0, r4
  42182e:	b01b      	add	sp, #108	; 0x6c

00421830 <.LCFI13>:
  421830:	bdf0      	pop	{r4, r5, r6, r7, pc}

00421832 <.LCFI14>:
            wc_ShaUpdate(sha, data, len);
  421832:	463a      	mov	r2, r7
  421834:	4631      	mov	r1, r6
  421836:	a801      	add	r0, sp, #4

00421838 <.LVL93>:
  421838:	f7fb fed2 	bl	41d5e0 <.LFE27>

0042183c <.LVL94>:
            wc_ShaFinal(sha, hash);
  42183c:	4629      	mov	r1, r5
  42183e:	a801      	add	r0, sp, #4
  421840:	f7f8 ff60 	bl	41a704 <wc_ShaFinal>

00421844 <.LVL95>:
        return ret;
  421844:	e7f2      	b.n	42182c <.LVL91>

Disassembly of section .text.wc_RsaSSL_Verify%320:

00421846 <wc_RsaSSL_Verify>:
        WC_HASH_TYPE_NONE, WC_MGF1NONE, NULL, 0, rng);
}

int wc_RsaSSL_Verify(const byte* in, word32 inLen, byte* out, word32 outLen,
                                                                 RsaKey* key)
{
  421846:	b570      	push	{r4, r5, r6, lr}

00421848 <.LCFI46>:
  421848:	b08a      	sub	sp, #40	; 0x28

0042184a <.LCFI47>:
  42184a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    WC_RNG* rng;

    if (key == NULL) {
  42184c:	b17d      	cbz	r5, 42186e <.LCFI49>

0042184e <.LVL288>:

    rng = NULL;
#ifdef WC_RSA_BLINDING
    rng = key->rng;
#endif
    return RsaPrivateDecryptEx((byte*)in, inLen, out, outLen, NULL, key,
  42184e:	2400      	movs	r4, #0
  421850:	9409      	str	r4, [sp, #36]	; 0x24
  421852:	9408      	str	r4, [sp, #32]
  421854:	9407      	str	r4, [sp, #28]
  421856:	9406      	str	r4, [sp, #24]
  421858:	9405      	str	r4, [sp, #20]
  42185a:	9404      	str	r4, [sp, #16]
  42185c:	2601      	movs	r6, #1
  42185e:	9603      	str	r6, [sp, #12]
  421860:	9602      	str	r6, [sp, #8]
  421862:	9501      	str	r5, [sp, #4]
  421864:	9400      	str	r4, [sp, #0]
  421866:	f7f2 f8d1 	bl	413a0c <.LBE150>

0042186a <.LVL289>:
        RSA_PUBLIC_DECRYPT, RSA_BLOCK_TYPE_1, WC_RSA_PKCSV15_PAD,
        WC_HASH_TYPE_NONE, WC_MGF1NONE, NULL, 0, rng);
}
  42186a:	b00a      	add	sp, #40	; 0x28

0042186c <.LCFI48>:
  42186c:	bd70      	pop	{r4, r5, r6, pc}

0042186e <.LCFI49>:
        return BAD_FUNC_ARG;
  42186e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00421872 <.LVL291>:
  421872:	e7fa      	b.n	42186a <.LVL289>

Disassembly of section .text.fp_mulmod%321:

00421874 <fp_mulmod>:
{
  421874:	b5f0      	push	{r4, r5, r6, r7, lr}

00421876 <.LCFI98>:
  421876:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c

0042187a <.LCFI99>:
  42187a:	4606      	mov	r6, r0
  42187c:	460f      	mov	r7, r1
  42187e:	4614      	mov	r4, r2
  421880:	461d      	mov	r5, r3

00421882 <.LBB160>:
    fp_zero(a);
  421882:	4668      	mov	r0, sp

00421884 <.LVL734>:
  421884:	f000 fc5e 	bl	422144 <.LFE163>

00421888 <.LBE160>:
  fp_mul(a, b, &t);
  421888:	466a      	mov	r2, sp
  42188a:	4639      	mov	r1, r7
  42188c:	4630      	mov	r0, r6
  42188e:	f000 f808 	bl	4218a2 <.LFE32>

00421892 <.LVL736>:
    err = fp_mod(&t, c, d);
  421892:	462a      	mov	r2, r5
  421894:	4621      	mov	r1, r4
  421896:	4668      	mov	r0, sp
  421898:	f7ff fa67 	bl	420d6a <.LFE17>

0042189c <.LVL737>:
}
  42189c:	f50d 7d0b 	add.w	sp, sp, #556	; 0x22c

004218a0 <.LCFI100>:
  4218a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

Disassembly of section .text.fp_mul%322:

004218a2 <fp_mul>:
{
  4218a2:	b570      	push	{r4, r5, r6, lr}

004218a4 <.LCFI68>:
  4218a4:	4614      	mov	r4, r2
    oldused = C->used;
  4218a6:	6815      	ldr	r5, [r2, #0]

004218a8 <.LVL458>:
        fp_mul_comba(A,B,C);
  4218a8:	4622      	mov	r2, r4
  4218aa:	f7f9 fd15 	bl	41b2d8 <.LFE24>

004218ae <.L408>:
    for (y = C->used; y >= 0 && y < oldused; y++) {
  4218ae:	6823      	ldr	r3, [r4, #0]

004218b0 <.LVL460>:
  4218b0:	2b00      	cmp	r3, #0
  4218b2:	db0b      	blt.n	4218cc <.LVL462+0x6>
  4218b4:	429d      	cmp	r5, r3
  4218b6:	dd09      	ble.n	4218cc <.LVL462+0x6>
  4218b8:	eb04 0283 	add.w	r2, r4, r3, lsl #2
  4218bc:	3204      	adds	r2, #4
        C->dp[y] = 0;
  4218be:	2100      	movs	r1, #0
  4218c0:	f842 1f04 	str.w	r1, [r2, #4]!

004218c4 <.LVL461>:
    for (y = C->used; y >= 0 && y < oldused; y++) {
  4218c4:	3301      	adds	r3, #1

004218c6 <.LVL462>:
  4218c6:	d401      	bmi.n	4218cc <.LVL462+0x6>
  4218c8:	429d      	cmp	r5, r3
  4218ca:	dcf9      	bgt.n	4218c0 <.LVL460+0x10>
  4218cc:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section .text.SYS_TIME_UpdateTimerList%323:

004218d0 <SYS_TIME_UpdateTimerList>:
    tmr = counterObj->tmrActive;
  4218d0:	4b09      	ldr	r3, [pc, #36]	; (4218f8 <.LVL81+0x8>)
  4218d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30

004218d4 <.LVL77>:
    while ((tmr != NULL) && (elapsedCount > 0))
  4218d4:	b162      	cbz	r2, 4218f0 <.LVL81>
  4218d6:	b158      	cbz	r0, 4218f0 <.LVL81>
            tmr->relativeTimePending = 0;
  4218d8:	2100      	movs	r1, #0
  4218da:	e004      	b.n	4218e6 <.LVL80+0x4>
            elapsedCount -= tmr->relativeTimePending;
  4218dc:	1ac0      	subs	r0, r0, r3

004218de <.LVL78>:
            tmr->relativeTimePending = 0;
  4218de:	6091      	str	r1, [r2, #8]

004218e0 <.LVL79>:
        tmr = tmr->tmrNext;
  4218e0:	6992      	ldr	r2, [r2, #24]

004218e2 <.LVL80>:
    while ((tmr != NULL) && (elapsedCount > 0))
  4218e2:	b12a      	cbz	r2, 4218f0 <.LVL81>
  4218e4:	b120      	cbz	r0, 4218f0 <.LVL81>
        if (tmr->relativeTimePending >= elapsedCount)
  4218e6:	6893      	ldr	r3, [r2, #8]
  4218e8:	4283      	cmp	r3, r0
  4218ea:	d3f7      	bcc.n	4218dc <.LVL77+0x8>
            tmr->relativeTimePending -= elapsedCount;
  4218ec:	1a1b      	subs	r3, r3, r0
  4218ee:	6093      	str	r3, [r2, #8]

004218f0 <.LVL81>:
    counterObj->hwTimerPreviousValue = counterObj->hwTimerCurrentValue;
  4218f0:	4b01      	ldr	r3, [pc, #4]	; (4218f8 <.LVL81+0x8>)
  4218f2:	695a      	ldr	r2, [r3, #20]
  4218f4:	611a      	str	r2, [r3, #16]
  4218f6:	4770      	bx	lr
  4218f8:	2040d624 	.word	0x2040d624

Disassembly of section .text.__ascii_mbtowc%324:

004218fc <__ascii_mbtowc>:
  4218fc:	b082      	sub	sp, #8

004218fe <.LCFI2>:
  4218fe:	b149      	cbz	r1, 421914 <.LCFI4>
  421900:	b15a      	cbz	r2, 42191a <.LVL9+0x4>
  421902:	b16b      	cbz	r3, 421920 <.LCFI6>
  421904:	7813      	ldrb	r3, [r2, #0]

00421906 <.LVL4>:
  421906:	600b      	str	r3, [r1, #0]
  421908:	7812      	ldrb	r2, [r2, #0]

0042190a <.LVL5>:
  42190a:	1c10      	adds	r0, r2, #0

0042190c <.LVL6>:
  42190c:	bf18      	it	ne
  42190e:	2001      	movne	r0, #1
  421910:	b002      	add	sp, #8

00421912 <.LCFI3>:
  421912:	4770      	bx	lr

00421914 <.LCFI4>:
  421914:	a901      	add	r1, sp, #4

00421916 <.LVL9>:
  421916:	2a00      	cmp	r2, #0
  421918:	d1f3      	bne.n	421902 <.LCFI2+0x4>
  42191a:	4610      	mov	r0, r2

0042191c <.LVL10>:
  42191c:	b002      	add	sp, #8

0042191e <.LCFI5>:
  42191e:	4770      	bx	lr

00421920 <.LCFI6>:
  421920:	f06f 0001 	mvn.w	r0, #1

00421924 <.LVL13>:
  421924:	e7f4      	b.n	421910 <.LVL6+0x4>

00421926 <.LFE18>:
  421926:	bf00      	nop

Disassembly of section .text._sbrk%325:

00421928 <_sbrk>:
  421928:	4a07      	ldr	r2, [pc, #28]	; (421948 <_sbrk+0x20>)
  42192a:	6813      	ldr	r3, [r2, #0]
  42192c:	b143      	cbz	r3, 421940 <_sbrk+0x18>
  42192e:	4907      	ldr	r1, [pc, #28]	; (42194c <_sbrk+0x24>)
  421930:	4418      	add	r0, r3
  421932:	4288      	cmp	r0, r1
  421934:	bf9a      	itte	ls
  421936:	6010      	strls	r0, [r2, #0]
  421938:	4618      	movls	r0, r3
  42193a:	f04f 30ff 	movhi.w	r0, #4294967295
  42193e:	4770      	bx	lr
  421940:	4b03      	ldr	r3, [pc, #12]	; (421950 <_sbrk+0x28>)
  421942:	6013      	str	r3, [r2, #0]
  421944:	e7f3      	b.n	42192e <_sbrk+0x6>
  421946:	bf00      	nop
  421948:	2040d780 	.word	0x2040d780
  42194c:	20416bf8 	.word	0x20416bf8
  421950:	2040d788 	.word	0x2040d788

Disassembly of section .text.fp_sqr%326:

00421954 <fp_sqr>:
{
  421954:	b538      	push	{r3, r4, r5, lr}

00421956 <.LCFI81>:
  421956:	460c      	mov	r4, r1
    oldused = B->used;
  421958:	680d      	ldr	r5, [r1, #0]

0042195a <.LVL553>:
       fp_sqr_comba(A, B);
  42195a:	f7f8 f9ef 	bl	419d3c <.LBE265>

0042195e <.L486>:
  for (y = B->used; y >= 0 && y < oldused; y++) {
  42195e:	6823      	ldr	r3, [r4, #0]

00421960 <.LVL555>:
  421960:	2b00      	cmp	r3, #0
  421962:	db0b      	blt.n	42197c <.LVL557+0x6>
  421964:	429d      	cmp	r5, r3
  421966:	dd09      	ble.n	42197c <.LVL557+0x6>
  421968:	eb04 0283 	add.w	r2, r4, r3, lsl #2
  42196c:	3204      	adds	r2, #4
    B->dp[y] = 0;
  42196e:	2100      	movs	r1, #0
  421970:	f842 1f04 	str.w	r1, [r2, #4]!

00421974 <.LVL556>:
  for (y = B->used; y >= 0 && y < oldused; y++) {
  421974:	3301      	adds	r3, #1

00421976 <.LVL557>:
  421976:	d401      	bmi.n	42197c <.LVL557+0x6>
  421978:	429d      	cmp	r5, r3
  42197a:	dcf9      	bgt.n	421970 <.LVL555+0x10>
  42197c:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section .text.fp_add_d%327:

0042197e <fp_add_d>:
{
  42197e:	b570      	push	{r4, r5, r6, lr}

00421980 <.LCFI138>:
  421980:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228

00421984 <.LCFI139>:
  421984:	4604      	mov	r4, r0
  421986:	460e      	mov	r6, r1
  421988:	4615      	mov	r5, r2

0042198a <.LBB189>:
    fp_zero(a);
  42198a:	4668      	mov	r0, sp

0042198c <.LVL858>:
  42198c:	f000 fbda 	bl	422144 <.LFE163>

00421990 <.LBE189>:
   fp_set(&tmp, b);
  421990:	4631      	mov	r1, r6
  421992:	4668      	mov	r0, sp
  421994:	f000 fbc0 	bl	422118 <.LFE20>

00421998 <.LVL860>:
   fp_add(a, &tmp, c);
  421998:	462a      	mov	r2, r5
  42199a:	4669      	mov	r1, sp
  42199c:	4620      	mov	r0, r4
  42199e:	f7ff f90b 	bl	420bb8 <.LFE17>

004219a2 <.LVL861>:
}
  4219a2:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228

004219a6 <.LCFI140>:
  4219a6:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section .text.wc_Des3_SetIV%328:

004219a8 <wc_Des3_SetIV>:
        XMEMSET(des->reg,  0, DES_BLOCK_SIZE);
}

int wc_Des3_SetIV(Des3* des, const byte* iv)
{
    if (des == NULL) {
  4219a8:	4603      	mov	r3, r0
  4219aa:	b170      	cbz	r0, 4219ca <.LVL256>
        return BAD_FUNC_ARG;
    }
    if (des && iv)
  4219ac:	b929      	cbnz	r1, 4219ba <.LVL254>
        XMEMCPY(des->reg, iv, DES_BLOCK_SIZE);
    else if (des)
        XMEMSET(des->reg,  0, DES_BLOCK_SIZE);
  4219ae:	2000      	movs	r0, #0

004219b0 <.LVL253>:
  4219b0:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  4219b4:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
  4219b8:	4770      	bx	lr

004219ba <.LVL254>:
        XMEMCPY(des->reg, iv, DES_BLOCK_SIZE);
  4219ba:	6808      	ldr	r0, [r1, #0]

004219bc <.LVL255>:
  4219bc:	684a      	ldr	r2, [r1, #4]
  4219be:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  4219c2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

    return 0;
  4219c6:	2000      	movs	r0, #0
  4219c8:	4770      	bx	lr

004219ca <.LVL256>:
        return BAD_FUNC_ARG;
  4219ca:	f06f 00ac 	mvn.w	r0, #172	; 0xac

004219ce <.LVL257>:
}
  4219ce:	4770      	bx	lr

Disassembly of section .text.wc_ecc_free%329:

004219d0 <wc_ecc_free>:
    if (key == NULL) {
  4219d0:	b188      	cbz	r0, 4219f6 <.LCFI79>
{
  4219d2:	b510      	push	{r4, lr}

004219d4 <.LCFI78>:
  4219d4:	4604      	mov	r4, r0
    mp_clear(key->pubkey.x);
  4219d6:	3018      	adds	r0, #24

004219d8 <.LVL946>:
  4219d8:	f000 fcfa 	bl	4223d0 <.LFE16>

004219dc <.LVL947>:
    mp_clear(key->pubkey.y);
  4219dc:	f504 7010 	add.w	r0, r4, #576	; 0x240
  4219e0:	f000 fcf6 	bl	4223d0 <.LFE16>

004219e4 <.LVL948>:
    mp_clear(key->pubkey.z);
  4219e4:	f504 608d 	add.w	r0, r4, #1128	; 0x468
  4219e8:	f000 fcf2 	bl	4223d0 <.LFE16>

004219ec <.LVL949>:
    mp_forcezero(&key->k);
  4219ec:	f504 60d2 	add.w	r0, r4, #1680	; 0x690
  4219f0:	f000 fda8 	bl	422544 <mp_forcezero>

004219f4 <.LVL950>:
  4219f4:	bd10      	pop	{r4, pc}

004219f6 <.LCFI79>:
  4219f6:	4770      	bx	lr

Disassembly of section .text.wc_RsaPrivateDecrypt%330:

004219f8 <wc_RsaPrivateDecrypt>:
{
  4219f8:	b530      	push	{r4, r5, lr}

004219fa <.LCFI37>:
  4219fa:	b08b      	sub	sp, #44	; 0x2c

004219fc <.LCFI38>:
    return RsaPrivateDecryptEx((byte*)in, inLen, out, outLen, NULL, key,
  4219fc:	2400      	movs	r4, #0
  4219fe:	9409      	str	r4, [sp, #36]	; 0x24
  421a00:	9408      	str	r4, [sp, #32]
  421a02:	9407      	str	r4, [sp, #28]
  421a04:	9406      	str	r4, [sp, #24]
  421a06:	9405      	str	r4, [sp, #20]
  421a08:	9404      	str	r4, [sp, #16]
  421a0a:	2502      	movs	r5, #2
  421a0c:	9503      	str	r5, [sp, #12]
  421a0e:	2503      	movs	r5, #3
  421a10:	9502      	str	r5, [sp, #8]
  421a12:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  421a14:	9501      	str	r5, [sp, #4]
  421a16:	9400      	str	r4, [sp, #0]
  421a18:	f7f1 fff8 	bl	413a0c <.LBE150>

00421a1c <.LVL278>:
}
  421a1c:	b00b      	add	sp, #44	; 0x2c

00421a1e <.LCFI39>:
  421a1e:	bd30      	pop	{r4, r5, pc}

Disassembly of section .text.wc_RsaSSL_Sign%331:

00421a20 <wc_RsaSSL_Sign>:
}
#endif

int wc_RsaSSL_Sign(const byte* in, word32 inLen, byte* out, word32 outLen,
                                                   RsaKey* key, WC_RNG* rng)
{
  421a20:	b510      	push	{r4, lr}

00421a22 <.LCFI60>:
  421a22:	b08a      	sub	sp, #40	; 0x28

00421a24 <.LCFI61>:
    return RsaPublicEncryptEx(in, inLen, out, outLen, key,
  421a24:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  421a26:	9408      	str	r4, [sp, #32]
  421a28:	2400      	movs	r4, #0
  421a2a:	9407      	str	r4, [sp, #28]
  421a2c:	9406      	str	r4, [sp, #24]
  421a2e:	9405      	str	r4, [sp, #20]
  421a30:	9404      	str	r4, [sp, #16]
  421a32:	9403      	str	r4, [sp, #12]
  421a34:	2401      	movs	r4, #1
  421a36:	9402      	str	r4, [sp, #8]
  421a38:	2402      	movs	r4, #2
  421a3a:	9401      	str	r4, [sp, #4]
  421a3c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  421a3e:	9400      	str	r4, [sp, #0]
  421a40:	f7f3 f976 	bl	414d30 <.LFE0>

00421a44 <.LVL379>:
        RSA_PRIVATE_ENCRYPT, RSA_BLOCK_TYPE_1, WC_RSA_PKCSV15_PAD,
        WC_HASH_TYPE_NONE, WC_MGF1NONE, NULL, 0, rng);
}
  421a44:	b00a      	add	sp, #40	; 0x28

00421a46 <.LCFI62>:
  421a46:	bd10      	pop	{r4, pc}

Disassembly of section .text.fp_reverse%332:

00421a48 <fp_reverse>:
  iy = len - 1;
  421a48:	1e4b      	subs	r3, r1, #1
  while (ix < iy) {
  421a4a:	2b00      	cmp	r3, #0
  421a4c:	dd0f      	ble.n	421a6e <.LCFI31>
{
  421a4e:	b430      	push	{r4, r5}

00421a50 <.LCFI30>:
  421a50:	1e44      	subs	r4, r0, #1
  421a52:	4401      	add	r1, r0

00421a54 <.LVL265>:
  while (ix < iy) {
  421a54:	2200      	movs	r2, #0

00421a56 <.LVL266>:
    t     = s[ix];
  421a56:	7860      	ldrb	r0, [r4, #1]

00421a58 <.LVL267>:
    s[ix] = s[iy];
  421a58:	f811 5c01 	ldrb.w	r5, [r1, #-1]
  421a5c:	f804 5f01 	strb.w	r5, [r4, #1]!
    s[iy] = t;
  421a60:	f801 0d01 	strb.w	r0, [r1, #-1]!
    ++ix;
  421a64:	3201      	adds	r2, #1
    --iy;
  421a66:	3b01      	subs	r3, #1
  while (ix < iy) {
  421a68:	429a      	cmp	r2, r3
  421a6a:	dbf4      	blt.n	421a56 <.LVL266>
}
  421a6c:	bc30      	pop	{r4, r5}

00421a6e <.LCFI31>:
  421a6e:	4770      	bx	lr

Disassembly of section .text.fp_to_unsigned_bin%333:

00421a70 <fp_to_unsigned_bin>:
{
  421a70:	b510      	push	{r4, lr}

00421a72 <.LCFI121>:
  421a72:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228

00421a76 <.LCFI122>:
  421a76:	460c      	mov	r4, r1
  fp_init_copy(&t, a);
  421a78:	4601      	mov	r1, r0

00421a7a <.LVL816>:
  421a7a:	4668      	mov	r0, sp

00421a7c <.LVL817>:
  421a7c:	f000 fa50 	bl	421f20 <.LFE54>

00421a80 <.LVL818>:
  x = fp_to_unsigned_bin_at_pos(0, &t, b);
  421a80:	4622      	mov	r2, r4
  421a82:	4669      	mov	r1, sp
  421a84:	2000      	movs	r0, #0
  421a86:	f7ff fcc1 	bl	42140c <.LFE17>

00421a8a <.LVL819>:
  fp_reverse (b, x);
  421a8a:	4601      	mov	r1, r0
  421a8c:	4620      	mov	r0, r4

00421a8e <.LVL820>:
  421a8e:	f7ff ffdb 	bl	421a48 <.LFE38>

00421a92 <.LVL821>:
}
  421a92:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228

00421a96 <.LCFI123>:
  421a96:	bd10      	pop	{r4, pc}

Disassembly of section .rodata.order.6596%334:

00421a98 <order.6596>:
  421a98:	0010 0011 0012 0000 0008 0007 0009 0006     ................
  421aa8:	000a 0005 000b 0004 000c 0003 000d 0002     ................
  421ab8:	000e 0001 000f bf00                         ........

Disassembly of section .rodata.z_errmsg%335:

00421ac0 <z_errmsg>:
  421ac0:	ea5c 0041 ea6c 0041 ea78 0041 ea7c 0041     \.A.l.A.x.A.|.A.
  421ad0:	ea88 0041 ea98 0041 eaa4 0041 eab8 0041     ..A...A...A...A.
  421ae0:	eac8 0041 ea78 0041                         ..A.x.A.

Disassembly of section .rodata.rcon%336:

00421ae8 <rcon>:
  421ae8:	0000 0100 0000 0200 0000 0400 0000 0800     ................
  421af8:	0000 1000 0000 2000 0000 4000 0000 8000     ....... ...@....
  421b08:	0000 1b00 0000 3600                         .......6

Disassembly of section .text.TC0_CH0_TimerInitialize%337:

00421b10 <TC0_CH0_TimerInitialize>:

/* Initialize channel in timer mode */
void TC0_CH0_TimerInitialize (void)
{
    /* Use peripheral clock */
    TC0_REGS->TC_CHANNEL[0].TC_EMR = TC_EMR_NODIVCLK_Msk;
  421b10:	4b07      	ldr	r3, [pc, #28]	; (421b30 <TC0_CH0_TimerInitialize+0x20>)
  421b12:	f44f 7280 	mov.w	r2, #256	; 0x100
  421b16:	631a      	str	r2, [r3, #48]	; 0x30
    /* clock selection and waveform selection */
    TC0_REGS->TC_CHANNEL[0].TC_CMR =  TC_CMR_WAVSEL_UP_RC | TC_CMR_WAVE_Msk ;
  421b18:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  421b1c:	605a      	str	r2, [r3, #4]

    /* write period */
    TC0_REGS->TC_CHANNEL[0].TC_RC = 60000U;
  421b1e:	f64e 2260 	movw	r2, #60000	; 0xea60
  421b22:	61da      	str	r2, [r3, #28]


    /* enable interrupt */
    TC0_REGS->TC_CHANNEL[0].TC_IER = TC_IER_CPAS_Msk;
  421b24:	2204      	movs	r2, #4
  421b26:	625a      	str	r2, [r3, #36]	; 0x24
    TC0_CH0_CallbackObj.callback_fn = NULL;
  421b28:	2200      	movs	r2, #0
  421b2a:	4b02      	ldr	r3, [pc, #8]	; (421b34 <TC0_CH0_TimerInitialize+0x24>)
  421b2c:	601a      	str	r2, [r3, #0]
  421b2e:	4770      	bx	lr
  421b30:	4000c000 	.word	0x4000c000
  421b34:	20400018 	.word	0x20400018

Disassembly of section .rodata.__mprec_bigtens%338:

00421b38 <__mprec_bigtens>:
  421b38:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  421b48:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  421b58:	7f73bf3c 75154fdd                       <.s..O.u

Disassembly of section .text.wc_RsaPublicEncrypt%339:

00421b60 <wc_RsaPublicEncrypt>:
{
  421b60:	b530      	push	{r4, r5, lr}

00421b62 <.LCFI54>:
  421b62:	b08b      	sub	sp, #44	; 0x2c

00421b64 <.LCFI55>:
    return RsaPublicEncryptEx(in, inLen, out, outLen, key,
  421b64:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  421b66:	9408      	str	r4, [sp, #32]
  421b68:	2400      	movs	r4, #0
  421b6a:	9407      	str	r4, [sp, #28]
  421b6c:	9406      	str	r4, [sp, #24]
  421b6e:	9405      	str	r4, [sp, #20]
  421b70:	9404      	str	r4, [sp, #16]
  421b72:	9403      	str	r4, [sp, #12]
  421b74:	2502      	movs	r5, #2
  421b76:	9502      	str	r5, [sp, #8]
  421b78:	9401      	str	r4, [sp, #4]
  421b7a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  421b7c:	9400      	str	r4, [sp, #0]
  421b7e:	f7f3 f8d7 	bl	414d30 <.LFE0>

00421b82 <.LVL375>:
}
  421b82:	b00b      	add	sp, #44	; 0x2c

00421b84 <.LCFI56>:
  421b84:	bd30      	pop	{r4, r5, pc}

Disassembly of section .text.wc_ecc_del_point_h%340:

0041c65c <wc_ecc_del_point_h>:
   if (p != NULL) {
  41c65c:	b178      	cbz	r0, 41c67e <.LCFI33>
{
  41c65e:	b510      	push	{r4, lr}

0041c660 <.LCFI32>:
  41c660:	4604      	mov	r4, r0
      mp_clear(p->x);
  41c662:	f005 feb5 	bl	4223d0 <.LFE16>

0041c666 <.LVL522>:
      mp_clear(p->y);
  41c666:	f504 700a 	add.w	r0, r4, #552	; 0x228
  41c66a:	f005 feb1 	bl	4223d0 <.LFE16>

0041c66e <.LVL523>:
      mp_clear(p->z);
  41c66e:	f504 608a 	add.w	r0, r4, #1104	; 0x450
  41c672:	f005 fead 	bl	4223d0 <.LFE16>

0041c676 <.LBB24>:
      XFREE(p, heap, DYNAMIC_TYPE_ECC);
  41c676:	4620      	mov	r0, r4
  41c678:	f005 fd08 	bl	42208c <.LFE2>

0041c67c <.LVL525>:
  41c67c:	bd10      	pop	{r4, pc}

0041c67e <.LCFI33>:
  41c67e:	4770      	bx	lr

Disassembly of section .text.wc_ecc_is_valid_idx%341:

00421b88 <wc_ecc_is_valid_idx>:
{
  421b88:	4a07      	ldr	r2, [pc, #28]	; (421ba8 <.LVL690+0x6>)
  421b8a:	2300      	movs	r3, #0

00421b8c <.LVL688>:
   for (x = 0; ecc_sets[x].size != 0; x++)
  421b8c:	3301      	adds	r3, #1
  421b8e:	f852 1f34 	ldr.w	r1, [r2, #52]!
  421b92:	2900      	cmp	r1, #0
  421b94:	d1fa      	bne.n	421b8c <.LVL688>
}
  421b96:	f1b0 3fff 	cmp.w	r0, #4294967295
  421b9a:	bfa8      	it	ge
  421b9c:	4283      	cmpge	r3, r0
  421b9e:	bfcc      	ite	gt
  421ba0:	2001      	movgt	r0, #1

00421ba2 <.LVL690>:
  421ba2:	2000      	movle	r0, #0
  421ba4:	4770      	bx	lr
  421ba6:	bf00      	nop
  421ba8:	004185e0 	.word	0x004185e0

Disassembly of section .text.fp_copy%342:

00421bac <fp_copy>:
    if (a != b) {
  421bac:	4288      	cmp	r0, r1
  421bae:	d00e      	beq.n	421bce <.LCFI60>
{
  421bb0:	b508      	push	{r3, lr}

00421bb2 <.LCFI59>:
  421bb2:	460b      	mov	r3, r1
        b->used = a->used;
  421bb4:	6802      	ldr	r2, [r0, #0]
  421bb6:	600a      	str	r2, [r1, #0]
        b->sign = a->sign;
  421bb8:	6842      	ldr	r2, [r0, #4]
  421bba:	604a      	str	r2, [r1, #4]
        XMEMCPY(b->dp, a->dp, FP_SIZE * sizeof(fp_digit));
  421bbc:	f44f 7208 	mov.w	r2, #544	; 0x220
  421bc0:	f100 0108 	add.w	r1, r0, #8

00421bc4 <.LVL388>:
  421bc4:	f103 0008 	add.w	r0, r3, #8

00421bc8 <.LVL389>:
  421bc8:	f7f8 fedc 	bl	41a984 <.LFE14>

00421bcc <.LVL390>:
  421bcc:	bd08      	pop	{r3, pc}

00421bce <.LCFI60>:
  421bce:	4770      	bx	lr

Disassembly of section .text._sbrk_r%343:

00421bd0 <_sbrk_r>:
  421bd0:	b538      	push	{r3, r4, r5, lr}

00421bd2 <.LCFI0>:
  421bd2:	4c07      	ldr	r4, [pc, #28]	; (421bf0 <.LVL4>)
  421bd4:	2300      	movs	r3, #0
  421bd6:	4605      	mov	r5, r0
  421bd8:	4608      	mov	r0, r1

00421bda <.LVL1>:
  421bda:	6023      	str	r3, [r4, #0]
  421bdc:	f7ff fea4 	bl	421928 <_sbrk>

00421be0 <.LVL2>:
  421be0:	1c43      	adds	r3, r0, #1
  421be2:	d000      	beq.n	421be6 <.LVL2+0x6>
  421be4:	bd38      	pop	{r3, r4, r5, pc}
  421be6:	6823      	ldr	r3, [r4, #0]
  421be8:	2b00      	cmp	r3, #0
  421bea:	d0fb      	beq.n	421be4 <.LVL2+0x4>
  421bec:	602b      	str	r3, [r5, #0]
  421bee:	bd38      	pop	{r3, r4, r5, pc}

00421bf0 <.LVL4>:
  421bf0:	20400050 	.word	0x20400050

Disassembly of section .text.fp_leading_bit%344:

00421bf4 <fp_leading_bit>:
    if (a->used != 0) {
  421bf4:	6801      	ldr	r1, [r0, #0]
  421bf6:	b161      	cbz	r1, 421c12 <.LBE11>

00421bf8 <.LBB10>:
        fp_digit q = a->dp[a->used - 1];
  421bf8:	3101      	adds	r1, #1
  421bfa:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]

00421bfe <.LVL230>:
  421bfe:	2204      	movs	r2, #4

00421c00 <.LBE10>:
    int bit = 0;
  421c00:	2100      	movs	r1, #0

00421c02 <.LBB11>:
            if ((unsigned char)q != 0)
  421c02:	f013 0fff 	tst.w	r3, #255	; 0xff
                bit = (q & 0x80) != 0;
  421c06:	bf18      	it	ne
  421c08:	f3c3 11c0 	ubfxne	r1, r3, #7, #1
            q >>= 8;
  421c0c:	0a1b      	lsrs	r3, r3, #8

00421c0e <.LVL233>:
        while (qSz > 0) {
  421c0e:	3a01      	subs	r2, #1

00421c10 <.LVL234>:
  421c10:	d1f7      	bne.n	421c02 <.LBB11>

00421c12 <.LBE11>:
}
  421c12:	4608      	mov	r0, r1

00421c14 <.LVL236>:
  421c14:	4770      	bx	lr

Disassembly of section .text.fp_forcezero%345:

00421c16 <fp_forcezero>:
{
  421c16:	b410      	push	{r4}

00421c18 <.LCFI45>:
    a->used = 0;
  421c18:	2300      	movs	r3, #0
  421c1a:	6003      	str	r3, [r0, #0]
    a->sign = FP_ZPOS;
  421c1c:	6043      	str	r3, [r0, #4]

00421c1e <.LVL346>:
  421c1e:	f500 740a 	add.w	r4, r0, #552	; 0x228

00421c22 <.LBB22>:
    volatile byte* z = (volatile byte*)mem;
  421c22:	f100 0308 	add.w	r3, r0, #8

00421c26 <.LVL347>:
    while (len--) *z++ = 0;
  421c26:	2100      	movs	r1, #0

00421c28 <.LVL348>:
  421c28:	1c5a      	adds	r2, r3, #1

00421c2a <.LVL349>:
  421c2a:	7019      	strb	r1, [r3, #0]

00421c2c <.LVL350>:
  421c2c:	4613      	mov	r3, r2
  421c2e:	42a2      	cmp	r2, r4
  421c30:	d1fa      	bne.n	421c28 <.LVL348>

00421c32 <.LBE22>:
}
  421c32:	f85d 4b04 	ldr.w	r4, [sp], #4

00421c36 <.LCFI46>:
  421c36:	4770      	bx	lr

Disassembly of section .text.inflateReset%346:

00421c38 <inflateReset>:
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  421c38:	b148      	cbz	r0, 421c4e <.LCFI4>
{
  421c3a:	b508      	push	{r3, lr}

00421c3c <.LCFI3>:
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  421c3c:	69c2      	ldr	r2, [r0, #28]
  421c3e:	b14a      	cbz	r2, 421c54 <.LCFI5>

00421c40 <.LVL43>:
    state->wsize = 0;
  421c40:	2300      	movs	r3, #0
  421c42:	6293      	str	r3, [r2, #40]	; 0x28
    state->whave = 0;
  421c44:	62d3      	str	r3, [r2, #44]	; 0x2c
    state->wnext = 0;
  421c46:	6313      	str	r3, [r2, #48]	; 0x30
    return inflateResetKeep(strm);
  421c48:	f7fe fd5c 	bl	420704 <.LFE167>

00421c4c <.LVL44>:
  421c4c:	bd08      	pop	{r3, pc}

00421c4e <.LCFI4>:
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  421c4e:	f06f 0001 	mvn.w	r0, #1

00421c52 <.LVL46>:
  421c52:	4770      	bx	lr

00421c54 <.LCFI5>:
  421c54:	f06f 0001 	mvn.w	r0, #1

00421c58 <.LVL48>:
}
  421c58:	bd08      	pop	{r3, pc}

Disassembly of section .text.CRYPT_AES_KeySet%347:

00421c5a <CRYPT_AES_KeySet>:
                     unsigned int keyLen, const unsigned char* iv, int dir)
{
    typedef char aes_test[sizeof(CRYPT_AES_CTX) >= sizeof(Aes) ? 1 : -1];
    (void)sizeof(aes_test);

    if (aes == NULL || key == NULL)
  421c5a:	b158      	cbz	r0, 421c74 <.LCFI61>
{
  421c5c:	b510      	push	{r4, lr}

00421c5e <.LCFI57>:
  421c5e:	b082      	sub	sp, #8

00421c60 <.LCFI58>:
    if (aes == NULL || key == NULL)
  421c60:	b129      	cbz	r1, 421c6e <.LCFI60>
        return BAD_FUNC_ARG;

    return wc_AesSetKey((Aes*)aes, key, keyLen, iv, dir);
  421c62:	9c04      	ldr	r4, [sp, #16]
  421c64:	9400      	str	r4, [sp, #0]
  421c66:	f7ff f8e7 	bl	420e38 <.LFE18>

00421c6a <.LVL159>:
}
  421c6a:	b002      	add	sp, #8

00421c6c <.LCFI59>:
  421c6c:	bd10      	pop	{r4, pc}

00421c6e <.LCFI60>:
        return BAD_FUNC_ARG;
  421c6e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00421c72 <.LVL161>:
  421c72:	e7fa      	b.n	421c6a <.LVL159>

00421c74 <.LCFI61>:
  421c74:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00421c78 <.LVL163>:
  421c78:	4770      	bx	lr

Disassembly of section .rodata.bytebit%348:

00421c7c <bytebit>:
  421c7c:	0080 0000 0040 0000 0020 0000 0010 0000     ....@... .......
  421c8c:	0008 0000 0004 0000 0002 0000 0001 0000     ................

Disassembly of section .rodata.reseedEntropyA%349:

00421c9c <reseedEntropyA>:
  421c9c:	2be6 8e8a f1e8 b641 0598 e366 e3bf 49c0     .+....A...f....I
  421cac:	da03 acd4 df2c 229f 0180 670a bc39 d383     ....,.."...g9...

Disassembly of section .text.Console_UART_ReadC%350:

00421cbc <Console_UART_ReadC>:
{
  421cbc:	b500      	push	{lr}

00421cbe <.LCFI1>:
  421cbe:	b083      	sub	sp, #12

00421cc0 <.LCFI2>:
    USART1_Read(&readBuffer, 1);
  421cc0:	2101      	movs	r1, #1
  421cc2:	f10d 0007 	add.w	r0, sp, #7

00421cc6 <.LVL13>:
  421cc6:	f7ff fb13 	bl	4212f0 <.LFE145>

00421cca <.LVL14>:
    while (USART1_ReadCountGet() == 0);
  421cca:	f000 fbb1 	bl	422430 <.LFE149>

00421cce <.LVL15>:
  421cce:	2800      	cmp	r0, #0
  421cd0:	d0fb      	beq.n	421cca <.LVL14>
}
  421cd2:	f89d 0007 	ldrb.w	r0, [sp, #7]
  421cd6:	b003      	add	sp, #12

00421cd8 <.LCFI3>:
  421cd8:	f85d fb04 	ldr.w	pc, [sp], #4

Disassembly of section .text.SYS_DEBUG_Initialize%351:

00421cdc <SYS_DEBUG_Initialize>:

SYS_MODULE_OBJ SYS_DEBUG_Initialize(const SYS_MODULE_INDEX index, const SYS_MODULE_INIT * const init )
{
    SYS_DEBUG_INIT *initConfig = (SYS_DEBUG_INIT*)init;

    gblErrLvl = initConfig->errorLevel;
  421cdc:	784a      	ldrb	r2, [r1, #1]
  421cde:	4b05      	ldr	r3, [pc, #20]	; (421cf4 <.LVL1+0xa>)
  421ce0:	701a      	strb	r2, [r3, #0]

    sysDebugInstance.debugConsole = initConfig->consoleIndex;
  421ce2:	884a      	ldrh	r2, [r1, #2]
  421ce4:	4b04      	ldr	r3, [pc, #16]	; (421cf8 <.LVL1+0xe>)
  421ce6:	805a      	strh	r2, [r3, #2]
    sysDebugInstance.state = SYS_DEBUG_STATE_IDLE;
  421ce8:	2000      	movs	r0, #0

00421cea <.LVL1>:
  421cea:	7058      	strb	r0, [r3, #1]
    sysDebugInstance.status = SYS_STATUS_READY;
  421cec:	2202      	movs	r2, #2
  421cee:	701a      	strb	r2, [r3, #0]
    sysDebugInstance.prtBufPtr = 0;
  421cf0:	6058      	str	r0, [r3, #4]

    return SYS_MODULE_OBJ_STATIC;
}
  421cf2:	4770      	bx	lr
  421cf4:	20400014 	.word	0x20400014
  421cf8:	2040000c 	.word	0x2040000c

Disassembly of section .text.TC0_CH0_InterruptHandler%352:

00421cfc <TC0_CH0_InterruptHandler>:
    TC0_CH0_CallbackObj.callback_fn = callback;
    TC0_CH0_CallbackObj.context = context;
}

void TC0_CH0_InterruptHandler(void)
{
  421cfc:	b508      	push	{r3, lr}

00421cfe <.LCFI0>:
    TC_TIMER_STATUS timer_status = TC0_REGS->TC_CHANNEL[0].TC_SR & TC_TIMER_STATUS_MSK;
  421cfe:	4b05      	ldr	r3, [pc, #20]	; (421d14 <.LVL4+0x8>)
  421d00:	6a18      	ldr	r0, [r3, #32]

00421d02 <.LVL3>:
    /* Call registered callback function */
    if (TC0_CH0_CallbackObj.callback_fn != NULL)
  421d02:	4b05      	ldr	r3, [pc, #20]	; (421d18 <.LVL4+0xc>)
  421d04:	681b      	ldr	r3, [r3, #0]
  421d06:	b123      	cbz	r3, 421d12 <.LVL4+0x6>
  421d08:	f000 0014 	and.w	r0, r0, #20

00421d0c <.LVL4>:
    {
        TC0_CH0_CallbackObj.callback_fn(timer_status, TC0_CH0_CallbackObj.context);
  421d0c:	4a02      	ldr	r2, [pc, #8]	; (421d18 <.LVL4+0xc>)
  421d0e:	6851      	ldr	r1, [r2, #4]
  421d10:	4798      	blx	r3
  421d12:	bd08      	pop	{r3, pc}
  421d14:	4000c000 	.word	0x4000c000
  421d18:	20400018 	.word	0x20400018

Disassembly of section .text.CRYPT_TDES_CBC_Encrypt%353:

00421d1c <CRYPT_TDES_CBC_Encrypt>:
    if (tdes == NULL || out == NULL || in == NULL)
  421d1c:	2a00      	cmp	r2, #0
  421d1e:	bf18      	it	ne
  421d20:	2900      	cmpne	r1, #0
  421d22:	d007      	beq.n	421d34 <.LCFI54>
{
  421d24:	b538      	push	{r3, r4, r5, lr}

00421d26 <.LCFI53>:
    if (tdes == NULL || out == NULL || in == NULL)
  421d26:	b110      	cbz	r0, 421d2e <.LVL148>
    return wc_Des3_CbcEncrypt((Des3*)tdes, out, in, inSz);
  421d28:	f7fc fb0a 	bl	41e340 <.LFE25>

00421d2c <.LVL147>:
  421d2c:	bd38      	pop	{r3, r4, r5, pc}

00421d2e <.LVL148>:
        return BAD_FUNC_ARG;
  421d2e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00421d32 <.LVL149>:
}
  421d32:	bd38      	pop	{r3, r4, r5, pc}

00421d34 <.LCFI54>:
        return BAD_FUNC_ARG;
  421d34:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00421d38 <.LVL151>:
  421d38:	4770      	bx	lr

Disassembly of section .text.CRYPT_TDES_CBC_Decrypt%354:

00421d3a <CRYPT_TDES_CBC_Decrypt>:
    if (tdes == NULL || out == NULL || in == NULL)
  421d3a:	2a00      	cmp	r2, #0
  421d3c:	bf18      	it	ne
  421d3e:	2900      	cmpne	r1, #0
  421d40:	d007      	beq.n	421d52 <.LCFI56>
{
  421d42:	b538      	push	{r3, r4, r5, lr}

00421d44 <.LCFI55>:
    if (tdes == NULL || out == NULL || in == NULL)
  421d44:	b110      	cbz	r0, 421d4c <.LVL154>
    return wc_Des3_CbcDecrypt((Des3*)tdes, out, in, inSz);
  421d46:	f7fb fe69 	bl	41da1c <.LFE171>

00421d4a <.LVL153>:
  421d4a:	bd38      	pop	{r3, r4, r5, pc}

00421d4c <.LVL154>:
        return BAD_FUNC_ARG;
  421d4c:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00421d50 <.LVL155>:
}
  421d50:	bd38      	pop	{r3, r4, r5, pc}

00421d52 <.LCFI56>:
        return BAD_FUNC_ARG;
  421d52:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00421d56 <.LVL157>:
  421d56:	4770      	bx	lr

Disassembly of section .text.CRYPT_AES_CBC_Encrypt%355:

00421d58 <CRYPT_AES_CBC_Encrypt>:

/* AES CBC Encrypt */
int CRYPT_AES_CBC_Encrypt(CRYPT_AES_CTX* aes, unsigned char* out,
                          const unsigned char* in, unsigned int inSz)
{
    if (aes == NULL || out == NULL || in == NULL)
  421d58:	2a00      	cmp	r2, #0
  421d5a:	bf18      	it	ne
  421d5c:	2900      	cmpne	r1, #0
  421d5e:	d007      	beq.n	421d70 <.LCFI65>
{
  421d60:	b538      	push	{r3, r4, r5, lr}

00421d62 <.LCFI64>:
    if (aes == NULL || out == NULL || in == NULL)
  421d62:	b110      	cbz	r0, 421d6a <.LVL172>
        return BAD_FUNC_ARG;

    return wc_AesCbcEncrypt((Aes*)aes, out, in, inSz);
  421d64:	f7fb ff63 	bl	41dc2e <.LFE7>

00421d68 <.LVL171>:
  421d68:	bd38      	pop	{r3, r4, r5, pc}

00421d6a <.LVL172>:
        return BAD_FUNC_ARG;
  421d6a:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00421d6e <.LVL173>:
}
  421d6e:	bd38      	pop	{r3, r4, r5, pc}

00421d70 <.LCFI65>:
        return BAD_FUNC_ARG;
  421d70:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00421d74 <.LVL175>:
  421d74:	4770      	bx	lr

Disassembly of section .text.CRYPT_AES_CBC_Decrypt%356:

00421d76 <CRYPT_AES_CBC_Decrypt>:

/* AES CBC Decrypt */
int CRYPT_AES_CBC_Decrypt(CRYPT_AES_CTX* aes, unsigned char* out,
                          const unsigned char* in, unsigned int inSz)
{
    if (aes == NULL || out == NULL || in == NULL)
  421d76:	2a00      	cmp	r2, #0
  421d78:	bf18      	it	ne
  421d7a:	2900      	cmpne	r1, #0
  421d7c:	d007      	beq.n	421d8e <.LCFI67>
{
  421d7e:	b538      	push	{r3, r4, r5, lr}

00421d80 <.LCFI66>:
    if (aes == NULL || out == NULL || in == NULL)
  421d80:	b110      	cbz	r0, 421d88 <.LVL178>
        return BAD_FUNC_ARG;

    return wc_AesCbcDecrypt((Aes*)aes, out, in, inSz);
  421d82:	f7fa fe8f 	bl	41caa4 <.LFE170>

00421d86 <.LVL177>:
  421d86:	bd38      	pop	{r3, r4, r5, pc}

00421d88 <.LVL178>:
        return BAD_FUNC_ARG;
  421d88:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00421d8c <.LVL179>:
}
  421d8c:	bd38      	pop	{r3, r4, r5, pc}

00421d8e <.LCFI67>:
        return BAD_FUNC_ARG;
  421d8e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00421d92 <.LVL181>:
  421d92:	4770      	bx	lr

Disassembly of section .text.CRYPT_AES_CTR_Encrypt%357:

00421d94 <CRYPT_AES_CTR_Encrypt>:

/* AES CTR Encrypt (used for decrypt too, with ENCRYPT key setup) */
int CRYPT_AES_CTR_Encrypt(CRYPT_AES_CTX* aes, unsigned char* out,
                          const unsigned char* in, unsigned int inSz)
{
    if (aes == NULL || out == NULL || in == NULL)
  421d94:	2a00      	cmp	r2, #0
  421d96:	bf18      	it	ne
  421d98:	2900      	cmpne	r1, #0
  421d9a:	d007      	beq.n	421dac <.LCFI69>
{
  421d9c:	b538      	push	{r3, r4, r5, lr}

00421d9e <.LCFI68>:
    if (aes == NULL || out == NULL || in == NULL)
  421d9e:	b110      	cbz	r0, 421da6 <.LVL184>
        return BAD_FUNC_ARG;

    return wc_AesCtrEncrypt((Aes*)aes, out, in, inSz);
  421da0:	f7f8 f88b 	bl	419eba <.LFE39>

00421da4 <.LVL183>:
  421da4:	bd38      	pop	{r3, r4, r5, pc}

00421da6 <.LVL184>:
        return BAD_FUNC_ARG;
  421da6:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00421daa <.LVL185>:
}
  421daa:	bd38      	pop	{r3, r4, r5, pc}

00421dac <.LCFI69>:
        return BAD_FUNC_ARG;
  421dac:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00421db0 <.LVL187>:
  421db0:	4770      	bx	lr

Disassembly of section .text.putShortMSB%358:

00421db2 <putShortMSB>:
{
  421db2:	b410      	push	{r4}

00421db4 <.LCFI0>:
    put_byte(s, (Byte)(b >> 8));
  421db4:	6882      	ldr	r2, [r0, #8]
  421db6:	6943      	ldr	r3, [r0, #20]
  421db8:	1c5c      	adds	r4, r3, #1
  421dba:	6144      	str	r4, [r0, #20]
  421dbc:	0a0c      	lsrs	r4, r1, #8
  421dbe:	54d4      	strb	r4, [r2, r3]
    put_byte(s, (Byte)(b & 0xff));
  421dc0:	6882      	ldr	r2, [r0, #8]
  421dc2:	6943      	ldr	r3, [r0, #20]
  421dc4:	1c5c      	adds	r4, r3, #1
  421dc6:	6144      	str	r4, [r0, #20]
  421dc8:	54d1      	strb	r1, [r2, r3]
}
  421dca:	f85d 4b04 	ldr.w	r4, [sp], #4

00421dce <.LCFI1>:
  421dce:	4770      	bx	lr

Disassembly of section .text.same70_RNG_GenerateSeed%359:

00421dd0 <same70_RNG_GenerateSeed>:



/* used by random.c */
int same70_RNG_GenerateSeed(byte* output, word32 sz)
{
  421dd0:	b538      	push	{r3, r4, r5, lr}

00421dd2 <.LCFI4>:
  421dd2:	4604      	mov	r4, r0
  421dd4:	460d      	mov	r5, r1
    int status;

    /* Make sure power is on, etc */
    status = same70_InitRng();
  421dd6:	f7ff fcbf 	bl	421758 <same70_InitRng>

00421dda <.LVL12>:
    if (!status)
  421dda:	4603      	mov	r3, r0
  421ddc:	b108      	cbz	r0, 421de2 <.LVL14>
    {
        status = same70_RNG_GenerateBlock(output, sz);
    }

    return status;
}
  421dde:	4618      	mov	r0, r3

00421de0 <.LVL13>:
  421de0:	bd38      	pop	{r3, r4, r5, pc}

00421de2 <.LVL14>:
        status = same70_RNG_GenerateBlock(output, sz);
  421de2:	4629      	mov	r1, r5
  421de4:	4620      	mov	r0, r4

00421de6 <.LVL15>:
  421de6:	f7ff f849 	bl	420e7c <.LFE20>

00421dea <.LVL16>:
  421dea:	4603      	mov	r3, r0

00421dec <.LVL17>:
    return status;
  421dec:	e7f7      	b.n	421dde <.LVL12+0x4>

Disassembly of section .text.wc_Des_SetKey%360:

00421dee <wc_Des_SetKey>:
    {
  421dee:	b570      	push	{r4, r5, r6, lr}

00421df0 <.LCFI17>:
  421df0:	4606      	mov	r6, r0
  421df2:	460c      	mov	r4, r1
  421df4:	461d      	mov	r5, r3
        wc_Des_SetIV(des, iv);
  421df6:	4611      	mov	r1, r2

00421df8 <.LVL249>:
  421df8:	f000 f878 	bl	421eec <.LFE18>

00421dfc <.LVL250>:
        return DesSetKey(key, dir, des->key);
  421dfc:	f106 0210 	add.w	r2, r6, #16
  421e00:	4629      	mov	r1, r5
  421e02:	4620      	mov	r0, r4
  421e04:	f7f8 fa7a 	bl	41a2fc <.LFE179>

00421e08 <.LVL251>:
    }
  421e08:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section .text.fp_unsigned_bin_size%361:

00421e0a <fp_unsigned_bin_size>:
{
  421e0a:	b508      	push	{r3, lr}

00421e0c <.LCFI25>:
  int     size = fp_count_bits (a);
  421e0c:	f000 f87b 	bl	421f06 <.LFE26>

00421e10 <.LVL227>:
  return (size / 8 + ((size & 7) != 0 ? 1 : 0));
  421e10:	f010 0307 	ands.w	r3, r0, #7
  421e14:	bf18      	it	ne
  421e16:	2301      	movne	r3, #1
  421e18:	4602      	mov	r2, r0
  421e1a:	2800      	cmp	r0, #0
  421e1c:	bfb8      	it	lt
  421e1e:	1dc2      	addlt	r2, r0, #7
}
  421e20:	eb03 00e2 	add.w	r0, r3, r2, asr #3

00421e24 <.LVL228>:
  421e24:	bd08      	pop	{r3, pc}

Disassembly of section .text.get_digit%362:

00421e26 <get_digit>:
    return a->used;
}

mp_digit get_digit(mp_int* a, int n)
{
    if (a == NULL)
  421e26:	b140      	cbz	r0, 421e3a <.LVL7>
        return 0;

    return (n >= a->used || n < 0) ? 0 : a->dp[n];
  421e28:	6802      	ldr	r2, [r0, #0]
  421e2a:	428a      	cmp	r2, r1
  421e2c:	dd07      	ble.n	421e3e <.LVL9>
  421e2e:	2900      	cmp	r1, #0
  421e30:	db05      	blt.n	421e3e <.LVL9>
  421e32:	3102      	adds	r1, #2

00421e34 <.LVL5>:
  421e34:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]

00421e38 <.LVL6>:
  421e38:	4770      	bx	lr

00421e3a <.LVL7>:
        return 0;
  421e3a:	2000      	movs	r0, #0

00421e3c <.LVL8>:
  421e3c:	4770      	bx	lr

00421e3e <.LVL9>:
    return (n >= a->used || n < 0) ? 0 : a->dp[n];
  421e3e:	2000      	movs	r0, #0

00421e40 <.LVL10>:
}
  421e40:	4770      	bx	lr

Disassembly of section .text.SYS_CONSOLE_Tasks%363:

00421e44 <SYS_CONSOLE_Tasks>:
{
  421e44:	b508      	push	{r3, lr}

00421e46 <.LCFI6>:
    if (consoleDeviceInstance[(SYS_MODULE_INDEX)object].consoleInstanceDevDesc == NULL)
  421e46:	b283      	uxth	r3, r0
  421e48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  421e4c:	4a03      	ldr	r2, [pc, #12]	; (421e5c <.LVL31+0x2>)
  421e4e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  421e52:	685b      	ldr	r3, [r3, #4]
  421e54:	b10b      	cbz	r3, 421e5a <.LVL31>
    consoleDeviceInstance[(SYS_MODULE_INDEX)object].consoleInstanceDevDesc->sysConsoleTasks(object);
  421e56:	695b      	ldr	r3, [r3, #20]
  421e58:	4798      	blx	r3

00421e5a <.LVL31>:
  421e5a:	bd08      	pop	{r3, pc}
  421e5c:	2040d740 	.word	0x2040d740

Disassembly of section .text.popQueue%364:

00421e60 <popQueue>:
    (q->tailPos < (q->elemArrSz - 1)) ? q->tailPos++ : (q->tailPos = 0);
  421e60:	6802      	ldr	r2, [r0, #0]
  421e62:	6903      	ldr	r3, [r0, #16]
  421e64:	3b01      	subs	r3, #1
  421e66:	429a      	cmp	r2, r3
  421e68:	d305      	bcc.n	421e76 <popQueue+0x16>
  421e6a:	2300      	movs	r3, #0
  421e6c:	6003      	str	r3, [r0, #0]
    q->numElem--;
  421e6e:	6883      	ldr	r3, [r0, #8]
  421e70:	3b01      	subs	r3, #1
  421e72:	6083      	str	r3, [r0, #8]
  421e74:	4770      	bx	lr
    (q->tailPos < (q->elemArrSz - 1)) ? q->tailPos++ : (q->tailPos = 0);
  421e76:	3201      	adds	r2, #1
  421e78:	6002      	str	r2, [r0, #0]
  421e7a:	e7f8      	b.n	421e6e <popQueue+0xe>

Disassembly of section .text.SYS_TIME_Counter64Update%365:

00421e7c <SYS_TIME_Counter64Update>:
    uint32_t prevSwCounter32Bit = counterObj->swCounter64Low;
  421e7c:	4a05      	ldr	r2, [pc, #20]	; (421e94 <.LVL35+0x8>)
  421e7e:	6a53      	ldr	r3, [r2, #36]	; 0x24

00421e80 <.LVL31>:
    newSwCounter32Bit = prevSwCounter32Bit + elapsedCount;
  421e80:	4418      	add	r0, r3

00421e82 <.LBE22>:
    counterObj->swCounter64Low = SYS_TIME_Counter32Update(elapsedCount, &isSwCounter32Oveflow);
  421e82:	6250      	str	r0, [r2, #36]	; 0x24
    if (isSwCounter32Oveflow == true)
  421e84:	4283      	cmp	r3, r0
  421e86:	d800      	bhi.n	421e8a <.LVL34>

00421e88 <.LVL33>:
  421e88:	4770      	bx	lr

00421e8a <.LVL34>:
        counterObj->swCounter64High++;
  421e8a:	6a93      	ldr	r3, [r2, #40]	; 0x28

00421e8c <.LVL35>:
  421e8c:	3301      	adds	r3, #1
  421e8e:	6293      	str	r3, [r2, #40]	; 0x28
}
  421e90:	e7fa      	b.n	421e88 <.LVL33>
  421e92:	bf00      	nop
  421e94:	2040d624 	.word	0x2040d624

Disassembly of section .text.__locale_ctype_ptr%366:

00421e98 <__locale_ctype_ptr>:
  421e98:	4b04      	ldr	r3, [pc, #16]	; (421eac <.LBE20+0x6>)
  421e9a:	4a05      	ldr	r2, [pc, #20]	; (421eb0 <.LBE20+0xa>)
  421e9c:	681b      	ldr	r3, [r3, #0]
  421e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  421ea0:	2b00      	cmp	r3, #0
  421ea2:	bf08      	it	eq
  421ea4:	4613      	moveq	r3, r2

00421ea6 <.LBE20>:
  421ea6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
  421eaa:	4770      	bx	lr
  421eac:	2040d768 	.word	0x2040d768
  421eb0:	2040d288 	.word	0x2040d288

Disassembly of section .text.__ascii_wctomb%367:

00421eb4 <__ascii_wctomb>:
  421eb4:	b121      	cbz	r1, 421ec0 <.LVL4>
  421eb6:	2aff      	cmp	r2, #255	; 0xff
  421eb8:	d804      	bhi.n	421ec4 <.LVL6>
  421eba:	700a      	strb	r2, [r1, #0]
  421ebc:	2001      	movs	r0, #1

00421ebe <.LVL3>:
  421ebe:	4770      	bx	lr

00421ec0 <.LVL4>:
  421ec0:	4608      	mov	r0, r1

00421ec2 <.LVL5>:
  421ec2:	4770      	bx	lr

00421ec4 <.LVL6>:
  421ec4:	238a      	movs	r3, #138	; 0x8a

00421ec6 <.LVL7>:
  421ec6:	6003      	str	r3, [r0, #0]
  421ec8:	f04f 30ff 	mov.w	r0, #4294967295

00421ecc <.LVL8>:
  421ecc:	4770      	bx	lr

00421ece <.LFE18>:
  421ece:	bf00      	nop

Disassembly of section .text._localeconv_r%368:

00421ed0 <_localeconv_r>:
  421ed0:	4a04      	ldr	r2, [pc, #16]	; (421ee4 <.LBE19+0x6>)
  421ed2:	4b05      	ldr	r3, [pc, #20]	; (421ee8 <.LBE19+0xa>)
  421ed4:	6812      	ldr	r2, [r2, #0]
  421ed6:	6b50      	ldr	r0, [r2, #52]	; 0x34

00421ed8 <.LVL3>:
  421ed8:	2800      	cmp	r0, #0
  421eda:	bf08      	it	eq
  421edc:	4618      	moveq	r0, r3

00421ede <.LBE19>:
  421ede:	30f0      	adds	r0, #240	; 0xf0
  421ee0:	4770      	bx	lr
  421ee2:	bf00      	nop
  421ee4:	2040d768 	.word	0x2040d768
  421ee8:	2040d288 	.word	0x2040d288

Disassembly of section .text.wc_Des_SetIV%369:

00421eec <wc_Des_SetIV>:
    if (des && iv)
  421eec:	4603      	mov	r3, r0
  421eee:	b100      	cbz	r0, 421ef2 <wc_Des_SetIV+0x6>
  421ef0:	b921      	cbnz	r1, 421efc <wc_Des_SetIV+0x10>
    else if (des)
  421ef2:	b113      	cbz	r3, 421efa <wc_Des_SetIV+0xe>
        XMEMSET(des->reg,  0, DES_BLOCK_SIZE);
  421ef4:	2200      	movs	r2, #0
  421ef6:	601a      	str	r2, [r3, #0]
  421ef8:	605a      	str	r2, [r3, #4]
  421efa:	4770      	bx	lr
        XMEMCPY(des->reg, iv, DES_BLOCK_SIZE);
  421efc:	6808      	ldr	r0, [r1, #0]

00421efe <.LVL247>:
  421efe:	684a      	ldr	r2, [r1, #4]
  421f00:	6018      	str	r0, [r3, #0]
  421f02:	605a      	str	r2, [r3, #4]
  421f04:	4770      	bx	lr

Disassembly of section .text.fp_count_bits%370:

00421f06 <fp_count_bits>:
  if (a->used == 0) {
  421f06:	6802      	ldr	r2, [r0, #0]
  421f08:	b142      	cbz	r2, 421f1c <.LVL224>
  r = (a->used - 1) * DIGIT_BIT;
  421f0a:	1e53      	subs	r3, r2, #1
  421f0c:	015a      	lsls	r2, r3, #5

00421f0e <.LVL220>:
  q = a->dp[a->used - 1];
  421f0e:	3302      	adds	r3, #2
  421f10:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

00421f14 <.LVL221>:
  while (q > ((fp_digit) 0)) {
  421f14:	b113      	cbz	r3, 421f1c <.LVL224>
    ++r;
  421f16:	3201      	adds	r2, #1

00421f18 <.LVL222>:
  while (q > ((fp_digit) 0)) {
  421f18:	085b      	lsrs	r3, r3, #1

00421f1a <.LVL223>:
  421f1a:	d1fc      	bne.n	421f16 <.LVL221+0x2>

00421f1c <.LVL224>:
}
  421f1c:	4610      	mov	r0, r2

00421f1e <.LVL225>:
  421f1e:	4770      	bx	lr

Disassembly of section .text.fp_init_copy%371:

00421f20 <fp_init_copy>:
    if (a != b) {
  421f20:	4288      	cmp	r0, r1
  421f22:	d009      	beq.n	421f38 <.LCFI83>
{
  421f24:	b538      	push	{r3, r4, r5, lr}

00421f26 <.LCFI82>:
  421f26:	460d      	mov	r5, r1
  421f28:	4604      	mov	r4, r0

00421f2a <.LBB76>:
    fp_zero(a);
  421f2a:	f000 f90b 	bl	422144 <.LFE163>

00421f2e <.LBE76>:
        fp_copy(b, a);
  421f2e:	4621      	mov	r1, r4
  421f30:	4628      	mov	r0, r5
  421f32:	f7ff fe3b 	bl	421bac <.LFE31>

00421f36 <.LVL561>:
  421f36:	bd38      	pop	{r3, r4, r5, pc}

00421f38 <.LCFI83>:
  421f38:	4770      	bx	lr

Disassembly of section .text.BSP_Initialize%372:

00421f3c <BSP_Initialize>:
void BSP_Initialize(void )
{


    /* Switch off LEDs */
		LED1_Off(); 
  421f3c:	2220      	movs	r2, #32
  421f3e:	4b04      	ldr	r3, [pc, #16]	; (421f50 <BSP_Initialize+0x14>)
  421f40:	631a      	str	r2, [r3, #48]	; 0x30
		LED2_Off(); 
  421f42:	f44f 7280 	mov.w	r2, #256	; 0x100
  421f46:	f503 7300 	add.w	r3, r3, #512	; 0x200
  421f4a:	631a      	str	r2, [r3, #48]	; 0x30
  421f4c:	4770      	bx	lr
  421f4e:	bf00      	nop
  421f50:	400e0e00 	.word	0x400e0e00

Disassembly of section .text.CRYPT_MD5_DataAdd%373:

00421f54 <CRYPT_MD5_DataAdd>:
    if (md5 == NULL || input == NULL)
  421f54:	b138      	cbz	r0, 421f66 <.LCFI3>
{
  421f56:	b508      	push	{r3, lr}

00421f58 <.LCFI2>:
    if (md5 == NULL || input == NULL)
  421f58:	b111      	cbz	r1, 421f60 <.LVL8>
    return wc_Md5Update((Md5*)md5, input, sz);
  421f5a:	f7fc fe49 	bl	41ebf0 <.LFE23>

00421f5e <.LVL7>:
  421f5e:	bd08      	pop	{r3, pc}

00421f60 <.LVL8>:
        return BAD_FUNC_ARG;
  421f60:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00421f64 <.LVL9>:
}
  421f64:	bd08      	pop	{r3, pc}

00421f66 <.LCFI3>:
        return BAD_FUNC_ARG;
  421f66:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00421f6a <.LVL11>:
  421f6a:	4770      	bx	lr

Disassembly of section .text.CRYPT_MD5_Finalize%374:

00421f6c <CRYPT_MD5_Finalize>:
    if (md5 == NULL || digest == NULL)
  421f6c:	b138      	cbz	r0, 421f7e <.LCFI5>
{
  421f6e:	b508      	push	{r3, lr}

00421f70 <.LCFI4>:
    if (md5 == NULL || digest == NULL)
  421f70:	b111      	cbz	r1, 421f78 <.LVL14>
    return wc_Md5Final((Md5*)md5, digest);
  421f72:	f7fa ff27 	bl	41cdc4 <.LFE177>

00421f76 <.LVL13>:
  421f76:	bd08      	pop	{r3, pc}

00421f78 <.LVL14>:
        return BAD_FUNC_ARG;
  421f78:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00421f7c <.LVL15>:
}
  421f7c:	bd08      	pop	{r3, pc}

00421f7e <.LCFI5>:
        return BAD_FUNC_ARG;
  421f7e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00421f82 <.LVL17>:
  421f82:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA_DataAdd%375:

00421f84 <CRYPT_SHA_DataAdd>:
    if (sha == NULL || input == NULL)
  421f84:	b138      	cbz	r0, 421f96 <.LCFI9>
{
  421f86:	b508      	push	{r3, lr}

00421f88 <.LCFI8>:
    if (sha == NULL || input == NULL)
  421f88:	b111      	cbz	r1, 421f90 <.LVL26>
    return wc_ShaUpdate((Sha*)sha, input, sz);
  421f8a:	f7fb fb29 	bl	41d5e0 <.LFE27>

00421f8e <.LVL25>:
  421f8e:	bd08      	pop	{r3, pc}

00421f90 <.LVL26>:
        return BAD_FUNC_ARG;
  421f90:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00421f94 <.LVL27>:
}
  421f94:	bd08      	pop	{r3, pc}

00421f96 <.LCFI9>:
        return BAD_FUNC_ARG;
  421f96:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00421f9a <.LVL29>:
  421f9a:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA_Finalize%376:

00421f9c <CRYPT_SHA_Finalize>:
    if (sha == NULL || digest == NULL)
  421f9c:	b138      	cbz	r0, 421fae <.LCFI11>
{
  421f9e:	b508      	push	{r3, lr}

00421fa0 <.LCFI10>:
    if (sha == NULL || digest == NULL)
  421fa0:	b111      	cbz	r1, 421fa8 <.LVL32>
    return wc_ShaFinal((Sha*)sha, digest);
  421fa2:	f7f8 fbaf 	bl	41a704 <wc_ShaFinal>

00421fa6 <.LVL31>:
  421fa6:	bd08      	pop	{r3, pc}

00421fa8 <.LVL32>:
        return BAD_FUNC_ARG;
  421fa8:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00421fac <.LVL33>:
}
  421fac:	bd08      	pop	{r3, pc}

00421fae <.LCFI11>:
        return BAD_FUNC_ARG;
  421fae:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00421fb2 <.LVL35>:
  421fb2:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA256_DataAdd%377:

00421fb4 <CRYPT_SHA256_DataAdd>:
    if (sha256 == NULL || input == NULL)
  421fb4:	b138      	cbz	r0, 421fc6 <.LCFI15>
{
  421fb6:	b508      	push	{r3, lr}

00421fb8 <.LCFI14>:
    if (sha256 == NULL || input == NULL)
  421fb8:	b111      	cbz	r1, 421fc0 <.LVL44>
    return wc_Sha256Update((Sha256*)sha256, input, sz);
  421fba:	f7fb fb6c 	bl	41d696 <.LFE18>

00421fbe <.LVL43>:
  421fbe:	bd08      	pop	{r3, pc}

00421fc0 <.LVL44>:
        return BAD_FUNC_ARG;
  421fc0:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00421fc4 <.LVL45>:
}
  421fc4:	bd08      	pop	{r3, pc}

00421fc6 <.LCFI15>:
        return BAD_FUNC_ARG;
  421fc6:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00421fca <.LVL47>:
  421fca:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA256_Finalize%378:

00421fcc <CRYPT_SHA256_Finalize>:
    if (sha256 == NULL || digest == NULL)
  421fcc:	b138      	cbz	r0, 421fde <.LCFI17>
{
  421fce:	b508      	push	{r3, lr}

00421fd0 <.LCFI16>:
    if (sha256 == NULL || digest == NULL)
  421fd0:	b111      	cbz	r1, 421fd8 <.LVL50>
    return wc_Sha256Final((Sha256*)sha256, digest);
  421fd2:	f7f7 fdf1 	bl	419bb8 <.LFE175>

00421fd6 <.LVL49>:
  421fd6:	bd08      	pop	{r3, pc}

00421fd8 <.LVL50>:
        return BAD_FUNC_ARG;
  421fd8:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00421fdc <.LVL51>:
}
  421fdc:	bd08      	pop	{r3, pc}

00421fde <.LCFI17>:
        return BAD_FUNC_ARG;
  421fde:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00421fe2 <.LVL53>:
  421fe2:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA384_DataAdd%379:

00421fe4 <CRYPT_SHA384_DataAdd>:
    if (sha384 == NULL || input == NULL)
  421fe4:	b138      	cbz	r0, 421ff6 <.LCFI21>
{
  421fe6:	b508      	push	{r3, lr}

00421fe8 <.LCFI20>:
    if (sha384 == NULL || input == NULL)
  421fe8:	b111      	cbz	r1, 421ff0 <.LVL60>
    return wc_Sha384Update((Sha384*)sha384, input, sz);
  421fea:	f7fa f904 	bl	41c1f6 <.LBE719>

00421fee <.LVL59>:
  421fee:	bd08      	pop	{r3, pc}

00421ff0 <.LVL60>:
        return BAD_FUNC_ARG;
  421ff0:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00421ff4 <.LVL61>:
}
  421ff4:	bd08      	pop	{r3, pc}

00421ff6 <.LCFI21>:
        return BAD_FUNC_ARG;
  421ff6:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00421ffa <.LVL63>:
  421ffa:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA384_Finalize%380:

00421ffc <CRYPT_SHA384_Finalize>:
    if (sha384 == NULL || digest == NULL)
  421ffc:	b138      	cbz	r0, 42200e <.LCFI23>
{
  421ffe:	b508      	push	{r3, lr}

00422000 <.LCFI22>:
    if (sha384 == NULL || digest == NULL)
  422000:	b111      	cbz	r1, 422008 <.LVL66>
    return wc_Sha384Final((Sha384*)sha384, digest);
  422002:	f7f5 fe11 	bl	417c28 <.LFE21>

00422006 <.LVL65>:
  422006:	bd08      	pop	{r3, pc}

00422008 <.LVL66>:
        return BAD_FUNC_ARG;
  422008:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0042200c <.LVL67>:
}
  42200c:	bd08      	pop	{r3, pc}

0042200e <.LCFI23>:
        return BAD_FUNC_ARG;
  42200e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00422012 <.LVL69>:
  422012:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA512_DataAdd%381:

00422014 <CRYPT_SHA512_DataAdd>:
    if (sha512 == NULL || input == NULL)
  422014:	b138      	cbz	r0, 422026 <.LCFI27>
{
  422016:	b508      	push	{r3, lr}

00422018 <.LCFI26>:
    if (sha512 == NULL || input == NULL)
  422018:	b111      	cbz	r1, 422020 <.LVL76>
    return wc_Sha512Update((Sha512*)sha512, input, sz);
  42201a:	f7fa f877 	bl	41c10c <.LFE178>

0042201e <.LVL75>:
  42201e:	bd08      	pop	{r3, pc}

00422020 <.LVL76>:
        return BAD_FUNC_ARG;
  422020:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00422024 <.LVL77>:
}
  422024:	bd08      	pop	{r3, pc}

00422026 <.LCFI27>:
        return BAD_FUNC_ARG;
  422026:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0042202a <.LVL79>:
  42202a:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA512_Finalize%382:

0042202c <CRYPT_SHA512_Finalize>:
    if (sha512 == NULL || digest == NULL)
  42202c:	b138      	cbz	r0, 42203e <.LCFI29>
{
  42202e:	b508      	push	{r3, lr}

00422030 <.LCFI28>:
    if (sha512 == NULL || digest == NULL)
  422030:	b111      	cbz	r1, 422038 <.LVL82>
    return wc_Sha512Final((Sha512*)sha512, digest);
  422032:	f7f5 fcb1 	bl	417998 <wc_Sha512Final>

00422036 <.LVL81>:
  422036:	bd08      	pop	{r3, pc}

00422038 <.LVL82>:
        return BAD_FUNC_ARG;
  422038:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0042203c <.LVL83>:
}
  42203c:	bd08      	pop	{r3, pc}

0042203e <.LCFI29>:
        return BAD_FUNC_ARG;
  42203e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00422042 <.LVL85>:
  422042:	4770      	bx	lr

Disassembly of section .text.CRYPT_RNG_BlockGenerate%383:

00422044 <CRYPT_RNG_BlockGenerate>:
    if (rng == NULL || b == NULL)
  422044:	b138      	cbz	r0, 422056 <.LCFI48>
{
  422046:	b508      	push	{r3, lr}

00422048 <.LCFI47>:
    if (rng == NULL || b == NULL)
  422048:	b111      	cbz	r1, 422050 <.LVL130>
    return wc_RNG_GenerateBlock((WC_RNG*)rng, b, sz);
  42204a:	f7f9 ff6d 	bl	41bf28 <.LFE18>

0042204e <.LVL129>:
  42204e:	bd08      	pop	{r3, pc}

00422050 <.LVL130>:
        return BAD_FUNC_ARG;
  422050:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00422054 <.LVL131>:
}
  422054:	bd08      	pop	{r3, pc}

00422056 <.LCFI48>:
        return BAD_FUNC_ARG;
  422056:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0042205a <.LVL133>:
  42205a:	4770      	bx	lr

Disassembly of section .text.CRYPT_TDES_KeySet%384:

0042205c <CRYPT_TDES_KeySet>:
    if (tdes == NULL || key == NULL)
  42205c:	b138      	cbz	r0, 42206e <.LCFI50>
{
  42205e:	b510      	push	{r4, lr}

00422060 <.LCFI49>:
    if (tdes == NULL || key == NULL)
  422060:	b111      	cbz	r1, 422068 <.LVL136>
    return wc_Des3_SetKey((Des3*)tdes, key, iv, dir);
  422062:	f7fd fc3f 	bl	41f8e4 <wc_Des3_SetKey>

00422066 <.LVL135>:
  422066:	bd10      	pop	{r4, pc}

00422068 <.LVL136>:
        return BAD_FUNC_ARG;
  422068:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0042206c <.LVL137>:
}
  42206c:	bd10      	pop	{r4, pc}

0042206e <.LCFI50>:
        return BAD_FUNC_ARG;
  42206e:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00422072 <.LVL139>:
  422072:	4770      	bx	lr

Disassembly of section .text.wolfSSL_Malloc%385:

00422074 <wolfSSL_Malloc>:
#ifdef WOLFSSL_DEBUG_MEMORY
void* wolfSSL_Malloc(size_t size, const char* func, unsigned int line)
#else
void* wolfSSL_Malloc(size_t size)
#endif
{
  422074:	b508      	push	{r3, lr}

00422076 <.LCFI0>:
    void* res = 0;

    if (malloc_function) {
  422076:	4b04      	ldr	r3, [pc, #16]	; (422088 <.LVL18+0x4>)
  422078:	681b      	ldr	r3, [r3, #0]
  42207a:	b10b      	cbz	r3, 422080 <.LVL17>
    #ifdef WOLFSSL_DEBUG_MEMORY
        res = malloc_function(size, func, line);
    #else
        res = malloc_function(size);
  42207c:	4798      	blx	r3

0042207e <.LVL16>:
  42207e:	bd08      	pop	{r3, pc}

00422080 <.LVL17>:
    #endif
    }
    else {
        res = malloc(size);
  422080:	f000 f93c 	bl	4222fc <.LFE0>

00422084 <.LVL18>:
        if (res == NULL)
            puts("wolfSSL_malloc failed");
    #endif

    return res;
}
  422084:	bd08      	pop	{r3, pc}
  422086:	bf00      	nop
  422088:	2040d764 	.word	0x2040d764

Disassembly of section .text.wolfSSL_Free%386:

0042208c <wolfSSL_Free>:
#ifdef WOLFSSL_DEBUG_MEMORY
void wolfSSL_Free(void *ptr, const char* func, unsigned int line)
#else
void wolfSSL_Free(void *ptr)
#endif
{
  42208c:	b508      	push	{r3, lr}

0042208e <.LCFI1>:
    if (free_function) {
  42208e:	4b04      	ldr	r3, [pc, #16]	; (4220a0 <.LVL22+0x4>)
  422090:	681b      	ldr	r3, [r3, #0]
  422092:	b10b      	cbz	r3, 422098 <.LVL21>
    #ifdef WOLFSSL_DEBUG_MEMORY
        free_function(ptr, func, line);
    #else
        free_function(ptr);
  422094:	4798      	blx	r3

00422096 <.LVL20>:
  422096:	bd08      	pop	{r3, pc}

00422098 <.LVL21>:
    #endif
    }
    else {
        free(ptr);
  422098:	f000 f938 	bl	42230c <.LFE0>

0042209c <.LVL22>:
  42209c:	bd08      	pop	{r3, pc}
  42209e:	bf00      	nop
  4220a0:	2040d760 	.word	0x2040d760

Disassembly of section .text.Console_UART_RegisterCallback%387:

004220a4 <Console_UART_RegisterCallback>:
    switch (event)
  4220a4:	b121      	cbz	r1, 4220b0 <Console_UART_RegisterCallback+0xc>
  4220a6:	2901      	cmp	r1, #1
  4220a8:	d104      	bne.n	4220b4 <Console_UART_RegisterCallback+0x10>
            consUartData.rdCallback = consCallback;
  4220aa:	4b03      	ldr	r3, [pc, #12]	; (4220b8 <.LFE3+0x14>)
  4220ac:	6498      	str	r0, [r3, #72]	; 0x48
            break;
  4220ae:	4770      	bx	lr
            consUartData.wrCallback = consCallback;
  4220b0:	4b01      	ldr	r3, [pc, #4]	; (4220b8 <.LFE3+0x14>)
  4220b2:	64d8      	str	r0, [r3, #76]	; 0x4c
  4220b4:	4770      	bx	lr
  4220b6:	bf00      	nop
  4220b8:	2040d5d4 	.word	0x2040d5d4

Disassembly of section .text.UARTDeviceReadCallback%388:

004220bc <UARTDeviceReadCallback>:
{
  4220bc:	b508      	push	{r3, lr}

004220be <.LCFI4>:
    if (USART1_ErrorGet() == 0)
  4220be:	f7ff fb7b 	bl	4217b8 <.LFE6>

004220c2 <.LVL17>:
  4220c2:	b918      	cbnz	r0, 4220cc <.LVL17+0xa>
        consUartData.isReadComplete = true;
  4220c4:	2201      	movs	r2, #1
  4220c6:	4b02      	ldr	r3, [pc, #8]	; (4220d0 <.LVL17+0xe>)
  4220c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  4220cc:	bd08      	pop	{r3, pc}
  4220ce:	bf00      	nop
  4220d0:	2040d5d4 	.word	0x2040d5d4

Disassembly of section .text.SYS_TIME_GetElapsedCount%389:

004220d4 <SYS_TIME_GetElapsedCount>:
    if (hwTimerCurrentValue > counterObj->hwTimerPreviousValue)
  4220d4:	4b04      	ldr	r3, [pc, #16]	; (4220e8 <.LVL75+0x2>)
  4220d6:	691b      	ldr	r3, [r3, #16]
  4220d8:	4283      	cmp	r3, r0
  4220da:	d303      	bcc.n	4220e4 <.LVL74>
        elapsedCount = (SYS_TIME_HW_COUNTER_PERIOD - counterObj->hwTimerPreviousValue) + hwTimerCurrentValue + 1;
  4220dc:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
  4220e0:	4418      	add	r0, r3

004220e2 <.LVL73>:
}
  4220e2:	4770      	bx	lr

004220e4 <.LVL74>:
        elapsedCount = hwTimerCurrentValue - counterObj->hwTimerPreviousValue;
  4220e4:	1ac0      	subs	r0, r0, r3

004220e6 <.LVL75>:
  4220e6:	4770      	bx	lr
  4220e8:	2040d624 	.word	0x2040d624

Disassembly of section .text.GetSequence%390:

004220ec <GetSequence>:
{
  4220ec:	b500      	push	{lr}

004220ee <.LCFI32>:
  4220ee:	b083      	sub	sp, #12

004220f0 <.LCFI33>:
    return GetASNHeader(input, ASN_SEQUENCE | ASN_CONSTRUCTED, inOutIdx, len,
  4220f0:	9300      	str	r3, [sp, #0]
  4220f2:	4613      	mov	r3, r2

004220f4 <.LVL173>:
  4220f4:	460a      	mov	r2, r1

004220f6 <.LVL174>:
  4220f6:	2130      	movs	r1, #48	; 0x30

004220f8 <.LVL175>:
  4220f8:	f7fe fe14 	bl	420d24 <.LFE149>

004220fc <.LVL176>:
}
  4220fc:	b003      	add	sp, #12

004220fe <.LCFI34>:
  4220fe:	f85d fb04 	ldr.w	pc, [sp], #4

Disassembly of section .text.wc_InitMd5%391:

00422102 <wc_InitMd5>:
#endif /* !HAVE_MD5_CUST_API */


int wc_InitMd5(Md5* md5)
{
    if (md5 == NULL) {
  422102:	b130      	cbz	r0, 422112 <.LCFI9>
{
  422104:	b508      	push	{r3, lr}

00422106 <.LCFI8>:
        return BAD_FUNC_ARG;
    }
    return wc_InitMd5_ex(md5, NULL, INVALID_DEVID);
  422106:	f06f 0201 	mvn.w	r2, #1
  42210a:	2100      	movs	r1, #0
  42210c:	f7ff f962 	bl	4213d4 <wc_InitMd5_ex>

00422110 <.LVL369>:
  422110:	bd08      	pop	{r3, pc}

00422112 <.LCFI9>:
        return BAD_FUNC_ARG;
  422112:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00422116 <.LVL371>:
  422116:	4770      	bx	lr

Disassembly of section .text.fp_set%392:

00422118 <fp_set>:
{
  422118:	b538      	push	{r3, r4, r5, lr}

0042211a <.LCFI35>:
  42211a:	4605      	mov	r5, r0
  42211c:	460c      	mov	r4, r1
   fp_zero(a);
  42211e:	f000 f811 	bl	422144 <.LFE163>

00422122 <.LVL293>:
   a->dp[0] = b;
  422122:	60ac      	str	r4, [r5, #8]
   a->used  = a->dp[0] ? 1 : 0;
  422124:	3400      	adds	r4, #0

00422126 <.LVL294>:
  422126:	bf18      	it	ne
  422128:	2401      	movne	r4, #1
  42212a:	602c      	str	r4, [r5, #0]
  42212c:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section .text.SYS_Tasks%393:

00422130 <SYS_Tasks>:
  Remarks:
    See prototype in system/common/sys_module.h.
*/

void SYS_Tasks ( void )
{
  422130:	b508      	push	{r3, lr}

00422132 <.LCFI0>:
    /* Maintain system services */
    SYS_CONSOLE_Tasks(sysObj.sysConsole0);
  422132:	4b03      	ldr	r3, [pc, #12]	; (422140 <.LVL1+0x2>)
  422134:	6818      	ldr	r0, [r3, #0]
  422136:	f7ff fe85 	bl	421e44 <SYS_CONSOLE_Tasks>

0042213a <.LVL0>:
    /* Maintain Middleware & Other Libraries */
    

    /* Maintain the application's state machine. */
        /* Call Application task APP. */
    APP_Tasks();
  42213a:	f7ef facd 	bl	4116d8 <APP_Tasks>

0042213e <.LVL1>:
  42213e:	bd08      	pop	{r3, pc}
  422140:	20400000 	.word	0x20400000

Disassembly of section .text.fp_zero%394:

00422144 <fp_zero>:
{
  422144:	b508      	push	{r3, lr}

00422146 <.LCFI32>:
    a->used = 0;
  422146:	2100      	movs	r1, #0
  422148:	6001      	str	r1, [r0, #0]
    a->sign = FP_ZPOS;
  42214a:	6041      	str	r1, [r0, #4]
    XMEMSET(a->dp, 0, size * sizeof(fp_digit));
  42214c:	f44f 7208 	mov.w	r2, #544	; 0x220
  422150:	3008      	adds	r0, #8

00422152 <.LVL273>:
  422152:	f7fc f9e1 	bl	41e518 <.LFE14>

00422156 <.LVL274>:
  422156:	bd08      	pop	{r3, pc}

Disassembly of section .text.fp_clear%395:

00422158 <fp_clear>:
{
  422158:	b508      	push	{r3, lr}

0042215a <.LCFI44>:
    a->used = 0;
  42215a:	2100      	movs	r1, #0
  42215c:	6001      	str	r1, [r0, #0]
    a->sign = FP_ZPOS;
  42215e:	6041      	str	r1, [r0, #4]
    XMEMSET(a->dp, 0, size * sizeof(fp_digit));
  422160:	f44f 7208 	mov.w	r2, #544	; 0x220
  422164:	3008      	adds	r0, #8

00422166 <.LVL342>:
  422166:	f7fc f9d7 	bl	41e518 <.LFE14>

0042216a <.LVL343>:
  42216a:	bd08      	pop	{r3, pc}

Disassembly of section .rodata.bl_order%396:

0042216c <bl_order>:
  42216c:	1110 0012 0708 0609 050a 040b 030c 020d     ................
  42217c:	010e 000f                                   ....

Disassembly of section .rodata%397:

00422180 <.LANCHOR0>:
  422180:	00000043 	.word	0x00000043
  422184:	49534f50 	.word	0x49534f50
  422188:	00000058 	.word	0x00000058
  42218c:	00000000 	.word	0x00000000
  422190:	002e      	.short	0x002e
  422192:	bf00      	nop

Disassembly of section .text.register_fini%398:

00422194 <register_fini>:
  422194:	4b02      	ldr	r3, [pc, #8]	; (4221a0 <.LVL0+0x2>)
  422196:	b113      	cbz	r3, 42219e <.LVL0>

00422198 <.LBB2>:
  422198:	4802      	ldr	r0, [pc, #8]	; (4221a4 <.LVL0+0x6>)
  42219a:	f000 b94f 	b.w	42243c <.LFE155>

0042219e <.LVL0>:
  42219e:	4770      	bx	lr
  4221a0:	00000000 	.word	0x00000000
  4221a4:	00421661 	.word	0x00421661

Disassembly of section .rodata%399:

004221a8 <.LC0>:
  4221a8:	69666e49 	.word	0x69666e49
  4221ac:	7974696e 	.word	0x7974696e
  4221b0:	00000000 	.word	0x00000000

004221b4 <.LC1>:
  4221b4:	004e614e 	.word	0x004e614e

004221b8 <.LC2>:
  4221b8:	0030      	.short	0x0030
  4221ba:	bf00      	nop

Disassembly of section .text._Bfree%400:

004221bc <_Bfree>:
  4221bc:	b131      	cbz	r1, 4221cc <.LVL11+0x6>
  4221be:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4221c0:	684a      	ldr	r2, [r1, #4]
  4221c2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]

004221c6 <.LVL11>:
  4221c6:	6008      	str	r0, [r1, #0]
  4221c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4221cc:	4770      	bx	lr

004221ce <.LFE18>:
  4221ce:	bf00      	nop

Disassembly of section .text.__i2b%401:

004221d0 <__i2b>:
  4221d0:	b510      	push	{r4, lr}

004221d2 <.LCFI6>:
  4221d2:	460c      	mov	r4, r1
  4221d4:	2101      	movs	r1, #1

004221d6 <.LVL105>:
  4221d6:	f7fe fcc9 	bl	420b6c <.LFE2>

004221da <.LVL106>:
  4221da:	2201      	movs	r2, #1
  4221dc:	6144      	str	r4, [r0, #20]
  4221de:	6102      	str	r2, [r0, #16]
  4221e0:	bd10      	pop	{r4, pc}

004221e2 <.LFE23>:
  4221e2:	bf00      	nop

Disassembly of section .text.SYS_INT_Disable%402:

004221e4 <SYS_INT_Disable>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4221e4:	f3ef 8010 	mrs	r0, PRIMASK

004221e8 <.LBB38>:
  __ASM volatile ("cpsid i" : : : "memory");
  4221e8:	b672      	cpsid	i

004221ea <.LBB40>:
  __ASM volatile ("dmb 0xF":::"memory");
  4221ea:	f3bf 8f5f 	dmb	sy

004221ee <.LBE40>:
}
  4221ee:	fab0 f080 	clz	r0, r0

004221f2 <.LVL1>:
  4221f2:	0940      	lsrs	r0, r0, #5
  4221f4:	4770      	bx	lr

Disassembly of section .text.SYS_INT_Restore%403:

004221f6 <SYS_INT_Restore>:
    if( state == true )
  4221f6:	b918      	cbnz	r0, 422200 <.LBB46>

004221f8 <.LBB42>:
  __ASM volatile ("cpsid i" : : : "memory");
  4221f8:	b672      	cpsid	i

004221fa <.LBB44>:
  __ASM volatile ("dmb 0xF":::"memory");
  4221fa:	f3bf 8f5f 	dmb	sy
  4221fe:	4770      	bx	lr

00422200 <.LBB46>:
  422200:	f3bf 8f5f 	dmb	sy

00422204 <.LBB48>:
  __ASM volatile ("cpsie i" : : : "memory");
  422204:	b662      	cpsie	i
  422206:	4770      	bx	lr

Disassembly of section .text.CRYPT_MD5_Initialize%404:

00422208 <CRYPT_MD5_Initialize>:
    if (md5 == NULL)
  422208:	b120      	cbz	r0, 422214 <.LCFI1>
{
  42220a:	b508      	push	{r3, lr}

0042220c <.LCFI0>:
    wc_InitMd5((Md5*)md5);
  42220c:	f7ff ff79 	bl	422102 <.LFE18>

00422210 <.LVL1>:
    return 0;
  422210:	2000      	movs	r0, #0
  422212:	bd08      	pop	{r3, pc}

00422214 <.LCFI1>:
        return BAD_FUNC_ARG;
  422214:	f06f 00ac 	mvn.w	r0, #172	; 0xac

00422218 <.LVL3>:
  422218:	4770      	bx	lr

Disassembly of section .text.mp_isodd%405:

0042221a <mp_isodd>:
    return fp_isodd(a);
  42221a:	6803      	ldr	r3, [r0, #0]
  42221c:	2b00      	cmp	r3, #0
  42221e:	dd03      	ble.n	422228 <.LVL828>
  422220:	6880      	ldr	r0, [r0, #8]

00422222 <.LVL827>:
  422222:	f000 0001 	and.w	r0, r0, #1
  422226:	4770      	bx	lr

00422228 <.LVL828>:
  422228:	2000      	movs	r0, #0

0042222a <.LVL829>:
}
  42222a:	4770      	bx	lr

Disassembly of section .text.SetSequence%406:

0042222c <SetSequence>:
{
  42222c:	b508      	push	{r3, lr}

0042222e <.LCFI106>:
    output[0] = ASN_SEQUENCE | ASN_CONSTRUCTED;
  42222e:	2330      	movs	r3, #48	; 0x30
  422230:	f801 3b01 	strb.w	r3, [r1], #1

00422234 <.LVL573>:
    return SetLength(len, output + 1) + 1;
  422234:	f7fe fabd 	bl	4207b2 <.LFE30>

00422238 <.LVL574>:
}
  422238:	3001      	adds	r0, #1
  42223a:	bd08      	pop	{r3, pc}

Disassembly of section .text.CRYPT_SHA_Initialize%407:

0042223c <CRYPT_SHA_Initialize>:
    if (sha == NULL)
  42223c:	b118      	cbz	r0, 422246 <.LCFI7>
{
  42223e:	b508      	push	{r3, lr}

00422240 <.LCFI6>:
    return wc_InitSha((Sha*)sha);
  422240:	f000 f89f 	bl	422382 <.LFE28>

00422244 <.LVL19>:
  422244:	bd08      	pop	{r3, pc}

00422246 <.LCFI7>:
        return BAD_FUNC_ARG;
  422246:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0042224a <.LVL21>:
  42224a:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA256_Initialize%408:

0042224c <CRYPT_SHA256_Initialize>:
    if (sha256 == NULL)
  42224c:	b118      	cbz	r0, 422256 <.LCFI13>
{
  42224e:	b508      	push	{r3, lr}

00422250 <.LCFI12>:
    return wc_InitSha256((Sha256*)sha256);
  422250:	f000 f89e 	bl	422390 <.LFE20>

00422254 <.LVL37>:
  422254:	bd08      	pop	{r3, pc}

00422256 <.LCFI13>:
        return BAD_FUNC_ARG;
  422256:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0042225a <.LVL39>:
  42225a:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA384_Initialize%409:

0042225c <CRYPT_SHA384_Initialize>:
    if (sha384 == NULL)
  42225c:	b118      	cbz	r0, 422266 <.LCFI19>
{
  42225e:	b508      	push	{r3, lr}

00422260 <.LCFI18>:
    return wc_InitSha384((Sha384*)sha384);
  422260:	f000 f888 	bl	422374 <.LFE22>

00422264 <.LVL55>:
  422264:	bd08      	pop	{r3, pc}

00422266 <.LCFI19>:
        return BAD_FUNC_ARG;
  422266:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0042226a <.LVL57>:
  42226a:	4770      	bx	lr

Disassembly of section .text.CRYPT_SHA512_Initialize%410:

0042226c <CRYPT_SHA512_Initialize>:
    if (sha512 == NULL)
  42226c:	b118      	cbz	r0, 422276 <.LCFI25>
{
  42226e:	b508      	push	{r3, lr}

00422270 <.LCFI24>:
    return wc_InitSha512((Sha512*)sha512);
  422270:	f000 f879 	bl	422366 <.LFE52>

00422274 <.LVL71>:
  422274:	bd08      	pop	{r3, pc}

00422276 <.LCFI25>:
        return BAD_FUNC_ARG;
  422276:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0042227a <.LVL73>:
  42227a:	4770      	bx	lr

Disassembly of section .text.CRYPT_RNG_Initialize%411:

0042227c <CRYPT_RNG_Initialize>:
    if (rng == NULL)
  42227c:	b118      	cbz	r0, 422286 <.LCFI44>
{
  42227e:	b508      	push	{r3, lr}

00422280 <.LCFI43>:
    return wc_InitRng((WC_RNG*)rng);
  422280:	f000 f88d 	bl	42239e <.LFE22>

00422284 <.LVL119>:
  422284:	bd08      	pop	{r3, pc}

00422286 <.LCFI44>:
        return BAD_FUNC_ARG;
  422286:	f06f 00ac 	mvn.w	r0, #172	; 0xac

0042228a <.LVL121>:
  42228a:	4770      	bx	lr

Disassembly of section .rodata.totrot%412:

0042228c <totrot>:
  42228c:	0201 0604 0a08 0e0c 110f 1513 1917 1c1b     ................

Disassembly of section .text.wc_RsaEncryptSize%413:

0042229c <wc_RsaEncryptSize>:
}
#endif

int wc_RsaEncryptSize(RsaKey* key)
{
    if (key == NULL) {
  42229c:	b118      	cbz	r0, 4222a6 <.LCFI18>
{
  42229e:	b508      	push	{r3, lr}

004222a0 <.LCFI17>:
        return BAD_FUNC_ARG;
    }
    return mp_unsigned_bin_size(&key->n);
  4222a0:	f000 f95c 	bl	42255c <.LFE82>

004222a4 <.LVL85>:
  4222a4:	bd08      	pop	{r3, pc}

004222a6 <.LCFI18>:
        return BAD_FUNC_ARG;
  4222a6:	f06f 00ac 	mvn.w	r0, #172	; 0xac

004222aa <.LVL87>:
  4222aa:	4770      	bx	lr

Disassembly of section .text.mp_init%414:

004222ac <mp_init>:
  if (a)
  4222ac:	b120      	cbz	r0, 4222b8 <.LCFI40>
{
  4222ae:	b508      	push	{r3, lr}

004222b0 <.LBB16>:
    fp_zero(a);
  4222b0:	f7ff ff48 	bl	422144 <.LFE163>

004222b4 <.LBE16>:
}
  4222b4:	2000      	movs	r0, #0
  4222b6:	bd08      	pop	{r3, pc}

004222b8 <.LCFI40>:
  4222b8:	2000      	movs	r0, #0

004222ba <.LVL333>:
  4222ba:	4770      	bx	lr

Disassembly of section .text.UARTDeviceWriteCallback%415:

004222bc <UARTDeviceWriteCallback>:
    consUartData.isWriteComplete = true;
  4222bc:	2201      	movs	r2, #1
  4222be:	4b02      	ldr	r3, [pc, #8]	; (4222c8 <.LFE61+0xc>)
  4222c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  4222c4:	4770      	bx	lr
  4222c6:	bf00      	nop
  4222c8:	2040d5d4 	.word	0x2040d5d4

Disassembly of section .text.USART1_WriteCallbackRegister%416:

004222cc <USART1_WriteCallbackRegister>:


bool USART1_WriteCallbackRegister( USART_CALLBACK callback, uintptr_t context )
{
    usart1Obj.txCallback = callback;
  4222cc:	4b02      	ldr	r3, [pc, #8]	; (4222d8 <.LVL43+0x4>)
  4222ce:	60d8      	str	r0, [r3, #12]
    usart1Obj.txContext = context;
  4222d0:	6119      	str	r1, [r3, #16]

    return true;
}
  4222d2:	2001      	movs	r0, #1

004222d4 <.LVL43>:
  4222d4:	4770      	bx	lr
  4222d6:	bf00      	nop
  4222d8:	20400020 	.word	0x20400020

Disassembly of section .text.USART1_ReadCallbackRegister%417:

004222dc <USART1_ReadCallbackRegister>:

bool USART1_ReadCallbackRegister( USART_CALLBACK callback, uintptr_t context )
{
    usart1Obj.rxCallback = callback;
  4222dc:	4b02      	ldr	r3, [pc, #8]	; (4222e8 <.LVL45+0x4>)
  4222de:	6258      	str	r0, [r3, #36]	; 0x24
    usart1Obj.rxContext = context;
  4222e0:	6299      	str	r1, [r3, #40]	; 0x28

    return true;
}
  4222e2:	2001      	movs	r0, #1

004222e4 <.LVL45>:
  4222e4:	4770      	bx	lr
  4222e6:	bf00      	nop
  4222e8:	20400020 	.word	0x20400020

Disassembly of section .text.calloc%418:

004222ec <calloc>:
  4222ec:	4b02      	ldr	r3, [pc, #8]	; (4222f8 <.LVL3>)
  4222ee:	460a      	mov	r2, r1
  4222f0:	4601      	mov	r1, r0

004222f2 <.LVL1>:
  4222f2:	6818      	ldr	r0, [r3, #0]

004222f4 <.LVL2>:
  4222f4:	f7fe b88c 	b.w	420410 <.LFE19>

004222f8 <.LVL3>:
  4222f8:	2040d768 	.word	0x2040d768

Disassembly of section .text.malloc%419:

004222fc <malloc>:
  4222fc:	4b02      	ldr	r3, [pc, #8]	; (422308 <.LVL2+0x2>)
  4222fe:	4601      	mov	r1, r0
  422300:	6818      	ldr	r0, [r3, #0]

00422302 <.LVL1>:
  422302:	f7ee bced 	b.w	410ce0 <.LFE20>

00422306 <.LVL2>:
  422306:	bf00      	nop
  422308:	2040d768 	.word	0x2040d768

Disassembly of section .text.free%420:

0042230c <free>:
  42230c:	4b02      	ldr	r3, [pc, #8]	; (422318 <.LVL5+0x2>)
  42230e:	4601      	mov	r1, r0
  422310:	6818      	ldr	r0, [r3, #0]

00422312 <.LVL4>:
  422312:	f7f7 b835 	b.w	419380 <_free_r>

00422316 <.LVL5>:
  422316:	bf00      	nop
  422318:	2040d768 	.word	0x2040d768

Disassembly of section .rodata.blanks.8352%421:

0042231c <blanks.8352>:
  42231c:	20202020 20202020 20202020 20202020                     

Disassembly of section .rodata.zeroes.8353%422:

0042232c <zeroes.8353>:
  42232c:	30303030 30303030 30303030 30303030     0000000000000000

Disassembly of section .text.main%423:

0042233c <main>:
// Section: Main Entry Point
// *****************************************************************************
// *****************************************************************************

int main ( void )
{
  42233c:	b508      	push	{r3, lr}

0042233e <.LCFI0>:
    /* Initialize all modules */
    SYS_Initialize ( NULL );
  42233e:	2000      	movs	r0, #0
  422340:	f7fd ffa6 	bl	420290 <SYS_Initialize>

00422344 <.LVL0>:

    while ( true )
    {
        /* Maintain state machines of all polled MPLAB Harmony modules. */
        SYS_Tasks ( );
  422344:	f7ff fef4 	bl	422130 <SYS_Tasks>

00422348 <.LVL1>:
  422348:	e7fc      	b.n	422344 <.LVL0>

Disassembly of section .text.myFree%424:

0042234a <myFree>:
    XFREE(memory, opaque, DYNAMIC_TYPE_LIBZ);
  42234a:	b121      	cbz	r1, 422356 <.LCFI1>

0042234c <.LBE2>:
{
  42234c:	b508      	push	{r3, lr}

0042234e <.LCFI0>:
  42234e:	4608      	mov	r0, r1

00422350 <.LBB3>:
    XFREE(memory, opaque, DYNAMIC_TYPE_LIBZ);
  422350:	f7ff fe9c 	bl	42208c <.LFE2>

00422354 <.LVL2>:
  422354:	bd08      	pop	{r3, pc}

00422356 <.LCFI1>:
  422356:	4770      	bx	lr

Disassembly of section .text.wc_ecc_init%425:

00422358 <wc_ecc_init>:
{
  422358:	b508      	push	{r3, lr}

0042235a <.LCFI77>:
    return wc_ecc_init_ex(key, NULL, INVALID_DEVID);
  42235a:	f06f 0201 	mvn.w	r2, #1
  42235e:	2100      	movs	r1, #0
  422360:	f7fe fc4f 	bl	420c02 <.LFE16>

00422364 <.LVL940>:
}
  422364:	bd08      	pop	{r3, pc}

Disassembly of section .text.wc_InitSha512%426:

00422366 <wc_InitSha512>:
{
  422366:	b508      	push	{r3, lr}

00422368 <.LCFI12>:
    return wc_InitSha512_ex(sha512, NULL, INVALID_DEVID);
  422368:	f06f 0201 	mvn.w	r2, #1
  42236c:	2100      	movs	r1, #0
  42236e:	f7fb f87f 	bl	41d470 <wc_InitSha512_ex>

00422372 <.LVL80>:
}
  422372:	bd08      	pop	{r3, pc}

Disassembly of section .text.wc_InitSha384%427:

00422374 <wc_InitSha384>:
#endif

int wc_InitSha384(Sha384* sha384)
{
  422374:	b508      	push	{r3, lr}

00422376 <.LCFI21>:
    return wc_InitSha384_ex(sha384, NULL, INVALID_DEVID);
  422376:	f06f 0201 	mvn.w	r2, #1
  42237a:	2100      	movs	r1, #0
  42237c:	f7fb f8d4 	bl	41d528 <.LFE15>

00422380 <.LVL145>:
}
  422380:	bd08      	pop	{r3, pc}

Disassembly of section .text.wc_InitSha%428:

00422382 <wc_InitSha>:

#endif /* USE_SHA_SOFTWARE_IMPL */


int wc_InitSha(Sha* sha)
{
  422382:	b508      	push	{r3, lr}

00422384 <.LCFI8>:
    return wc_InitSha_ex(sha, NULL, INVALID_DEVID);
  422384:	f06f 0201 	mvn.w	r2, #1
  422388:	2100      	movs	r1, #0
  42238a:	f7fe febb 	bl	421104 <.LFE22>

0042238e <.LVL398>:
}
  42238e:	bd08      	pop	{r3, pc}

Disassembly of section .text.wc_InitSha256%429:

00422390 <wc_InitSha256>:

#endif /* WOLFSSL_SHA224 */


int wc_InitSha256(Sha256* sha256)
{
  422390:	b508      	push	{r3, lr}

00422392 <.LCFI9>:
    return wc_InitSha256_ex(sha256, NULL, INVALID_DEVID);
  422392:	f06f 0201 	mvn.w	r2, #1
  422396:	2100      	movs	r1, #0
  422398:	f7fd fde6 	bl	41ff68 <.LFE17>

0042239c <.LVL97>:
}
  42239c:	bd08      	pop	{r3, pc}

Disassembly of section .text.wc_InitRng%430:

0042239e <wc_InitRng>:
{
  42239e:	b508      	push	{r3, lr}

004223a0 <.LCFI28>:
    return wc_InitRng_ex(rng, NULL, INVALID_DEVID);
  4223a0:	f06f 0201 	mvn.w	r2, #1
  4223a4:	2100      	movs	r1, #0
  4223a6:	f7fa f8eb 	bl	41c580 <.LBE36>

004223aa <.LVL253>:
}
  4223aa:	bd08      	pop	{r3, pc}

Disassembly of section .text.APP_Initialize%431:

004223ac <APP_Initialize>:
    appData.state = APP_STATE_INIT;
  4223ac:	2200      	movs	r2, #0
  4223ae:	4b01      	ldr	r3, [pc, #4]	; (4223b4 <.LFE23+0x8>)
  4223b0:	701a      	strb	r2, [r3, #0]
  4223b2:	4770      	bx	lr
  4223b4:	2040d534 	.word	0x2040d534

Disassembly of section .text.myAlloc%432:

004223b8 <myAlloc>:
{
  4223b8:	b508      	push	{r3, lr}

004223ba <.LCFI2>:
    return XMALLOC(item * size, opaque, DYNAMIC_TYPE_LIBZ);
  4223ba:	fb02 f001 	mul.w	r0, r2, r1

004223be <.LVL5>:
  4223be:	f7ff fe59 	bl	422074 <.LFE26>

004223c2 <.LVL6>:
}
  4223c2:	bd08      	pop	{r3, pc}

Disassembly of section .text.wc_InitRsaKey%433:

004223c4 <wc_InitRsaKey>:
{
  4223c4:	b508      	push	{r3, lr}

004223c6 <.LCFI14>:
    return wc_InitRsaKey_ex(key, heap, INVALID_DEVID);
  4223c6:	f06f 0201 	mvn.w	r2, #1
  4223ca:	f7fc fc55 	bl	41ec78 <.LFE18>

004223ce <.LVL64>:
}
  4223ce:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_clear%434:

004223d0 <mp_clear>:
    if (a == NULL)
  4223d0:	b118      	cbz	r0, 4223da <.LCFI49>
{
  4223d2:	b508      	push	{r3, lr}

004223d4 <.LCFI48>:
    fp_clear(a);
  4223d4:	f7ff fec0 	bl	422158 <.LFE63>

004223d8 <.LVL355>:
  4223d8:	bd08      	pop	{r3, pc}

004223da <.LCFI49>:
  4223da:	4770      	bx	lr

Disassembly of section .text.zcalloc%435:

004223dc <zcalloc>:

voidpf ZLIB_INTERNAL zcalloc (opaque, items, size)
    voidpf opaque;
    unsigned items;
    unsigned size;
{
  4223dc:	b508      	push	{r3, lr}

004223de <.LCFI0>:
    if (opaque) items += size - size; /* make compiler happy */
    return sizeof(uInt) > 2 ? (voidpf)malloc(items * size) :
  4223de:	fb02 f001 	mul.w	r0, r2, r1

004223e2 <.LVL4>:
  4223e2:	f7ff ff8b 	bl	4222fc <.LFE0>

004223e6 <.LVL5>:
                              (voidpf)calloc(items, size);
}
  4223e6:	bd08      	pop	{r3, pc}

Disassembly of section .text.TC0_CH0_TimerStart%436:

004223e8 <TC0_CH0_TimerStart>:
    TC0_REGS->TC_CHANNEL[0].TC_CCR = (TC_CCR_CLKEN_Msk | TC_CCR_SWTRG_Msk);
  4223e8:	2205      	movs	r2, #5
  4223ea:	4b01      	ldr	r3, [pc, #4]	; (4223f0 <.LFE4+0x8>)
  4223ec:	601a      	str	r2, [r3, #0]
  4223ee:	4770      	bx	lr
  4223f0:	4000c000 	.word	0x4000c000

Disassembly of section .text.TC0_CH0_TimerStop%437:

004223f4 <TC0_CH0_TimerStop>:
    TC0_REGS->TC_CHANNEL[0].TC_CCR = (TC_CCR_CLKDIS_Msk);
  4223f4:	2202      	movs	r2, #2
  4223f6:	4b01      	ldr	r3, [pc, #4]	; (4223fc <.LFE142+0x8>)
  4223f8:	601a      	str	r2, [r3, #0]
  4223fa:	4770      	bx	lr
  4223fc:	4000c000 	.word	0x4000c000

Disassembly of section .text.TC0_CH0_TimerPeriodSet%438:

00422400 <TC0_CH0_TimerPeriodSet>:
    TC0_REGS->TC_CHANNEL[0].TC_RC = period;
  422400:	4b01      	ldr	r3, [pc, #4]	; (422408 <.LFE143+0x8>)
  422402:	61d8      	str	r0, [r3, #28]
  422404:	4770      	bx	lr
  422406:	bf00      	nop
  422408:	4000c000 	.word	0x4000c000

Disassembly of section .text.TC0_CH0_TimerCompareSet%439:

0042240c <TC0_CH0_TimerCompareSet>:
    TC0_REGS->TC_CHANNEL[0].TC_RA = compare;
  42240c:	4b01      	ldr	r3, [pc, #4]	; (422414 <.LFE145+0x8>)
  42240e:	6158      	str	r0, [r3, #20]
  422410:	4770      	bx	lr
  422412:	bf00      	nop
  422414:	4000c000 	.word	0x4000c000

Disassembly of section .text.TC0_CH0_TimerCounterGet%440:

00422418 <TC0_CH0_TimerCounterGet>:
    return TC0_REGS->TC_CHANNEL[0].TC_CV;
  422418:	4b01      	ldr	r3, [pc, #4]	; (422420 <.LFE146+0x8>)
  42241a:	6918      	ldr	r0, [r3, #16]
}
  42241c:	b280      	uxth	r0, r0
  42241e:	4770      	bx	lr
  422420:	4000c000 	.word	0x4000c000

Disassembly of section .text.TC0_CH0_TimerCallbackRegister%441:

00422424 <TC0_CH0_TimerCallbackRegister>:
    TC0_CH0_CallbackObj.callback_fn = callback;
  422424:	4b01      	ldr	r3, [pc, #4]	; (42242c <.LFE148+0x8>)
  422426:	6018      	str	r0, [r3, #0]
    TC0_CH0_CallbackObj.context = context;
  422428:	6059      	str	r1, [r3, #4]
  42242a:	4770      	bx	lr
  42242c:	20400018 	.word	0x20400018

Disassembly of section .text.USART1_ReadCountGet%442:

00422430 <USART1_ReadCountGet>:
}

size_t USART1_ReadCountGet( void )
{
    return usart1Obj.rxProcessedSize;
}
  422430:	4b01      	ldr	r3, [pc, #4]	; (422438 <.LFE149+0x8>)
  422432:	6a18      	ldr	r0, [r3, #32]
  422434:	4770      	bx	lr
  422436:	bf00      	nop
  422438:	20400020 	.word	0x20400020

Disassembly of section .text.atexit%443:

0042243c <atexit>:
  42243c:	2300      	movs	r3, #0
  42243e:	4601      	mov	r1, r0
  422440:	461a      	mov	r2, r3
  422442:	4618      	mov	r0, r3

00422444 <.LVL1>:
  422444:	f7fb bd96 	b.w	41df74 <__register_exitproc>

Disassembly of section .rodata.p05.7179%444:

00422448 <p05.7179>:
  422448:	0005 0000 0019 0000 007d 0000               ........}...

Disassembly of section .text.wc_ecc_make_key%445:

00422454 <wc_ecc_make_key>:
{
  422454:	b508      	push	{r3, lr}

00422456 <.LCFI71>:
    return wc_ecc_make_key_ex(rng, keysize, key, ECC_CURVE_DEF);
  422456:	2300      	movs	r3, #0
  422458:	f7f7 f956 	bl	419708 <.LFE18>

0042245c <.LVL929>:
}
  42245c:	bd08      	pop	{r3, pc}

Disassembly of section .text.wc_ecc_import_x963%446:

0042245e <wc_ecc_import_x963>:
{
  42245e:	b508      	push	{r3, lr}

00422460 <.LCFI122>:
    return wc_ecc_import_x963_ex(in, inLen, key, ECC_CURVE_DEF);
  422460:	2300      	movs	r3, #0
  422462:	f7f9 ffaf 	bl	41c3c4 <.LFE19>

00422466 <.LVL1436>:
}
  422466:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_add%447:

00422468 <mp_add>:
{
  422468:	b508      	push	{r3, lr}

0042246a <.LCFI51>:
  fp_add(a, b, c);
  42246a:	f7fe fba5 	bl	420bb8 <.LFE17>

0042246e <.LVL372>:
}
  42246e:	2000      	movs	r0, #0
  422470:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_sub%448:

00422472 <mp_sub>:
{
  422472:	b508      	push	{r3, lr}

00422474 <.LCFI52>:
  fp_sub(a, b, c);
  422474:	f7fe fcbe 	bl	420df4 <.LFE144>

00422478 <.LVL374>:
}
  422478:	2000      	movs	r0, #0
  42247a:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_read_unsigned_bin%449:

0042247c <mp_read_unsigned_bin>:
{
  42247c:	b508      	push	{r3, lr}

0042247e <.LCFI57>:
  fp_read_unsigned_bin(a, b, c);
  42247e:	f7fd fc6b 	bl	41fd58 <fp_read_unsigned_bin>

00422482 <.LVL384>:
}
  422482:	2000      	movs	r0, #0
  422484:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_mul%450:

00422486 <mp_mul>:
{
  422486:	b508      	push	{r3, lr}

00422488 <.LCFI69>:
  fp_mul(a, b, c);
  422488:	f7ff fa0b 	bl	4218a2 <.LFE32>

0042248c <.LVL464>:
}
  42248c:	2000      	movs	r0, #0
  42248e:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_to_unsigned_bin%451:

00422490 <mp_to_unsigned_bin>:
{
  422490:	b508      	push	{r3, lr}

00422492 <.LCFI124>:
  fp_to_unsigned_bin(a,b);
  422492:	f7ff faed 	bl	421a70 <.LFE59>

00422496 <.LVL823>:
}
  422496:	2000      	movs	r0, #0
  422498:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_copy%452:

0042249a <mp_copy>:
{
  42249a:	b508      	push	{r3, lr}

0042249c <.LCFI125>:
    fp_copy(a, b);
  42249c:	f7ff fb86 	bl	421bac <.LFE31>

004224a0 <.LVL825>:
}
  4224a0:	2000      	movs	r0, #0
  4224a2:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_iszero%453:

004224a4 <mp_iszero>:
    return fp_iszero(a);
  4224a4:	6800      	ldr	r0, [r0, #0]

004224a6 <.LVL831>:
}
  4224a6:	fab0 f080 	clz	r0, r0
  4224aa:	0940      	lsrs	r0, r0, #5
  4224ac:	4770      	bx	lr

Disassembly of section .text.mp_montgomery_calc_normalization%454:

004224ae <mp_montgomery_calc_normalization>:
{
  4224ae:	b508      	push	{r3, lr}

004224b0 <.LCFI137>:
    fp_montgomery_calc_normalization(a, b);
  4224b0:	f7fc fdf6 	bl	41f0a0 <.LFE16>

004224b4 <.LVL855>:
}
  4224b4:	2000      	movs	r0, #0
  4224b6:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_sqr%455:

004224b8 <mp_sqr>:

/* fast math conversion */
int mp_sqr(fp_int *A, fp_int *B)
{
  4224b8:	b508      	push	{r3, lr}

004224ba <.LCFI143>:
    fp_sqr(A, B);
  4224ba:	f7ff fa4b 	bl	421954 <.LFE1>

004224be <.LVL887>:
    return MP_OKAY;
}
  4224be:	2000      	movs	r0, #0
  4224c0:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_montgomery_reduce%456:

004224c2 <mp_montgomery_reduce>:

/* fast math conversion */
int mp_montgomery_reduce(fp_int *a, fp_int *m, fp_digit mp)
{
  4224c2:	b508      	push	{r3, lr}

004224c4 <.LCFI144>:
    fp_montgomery_reduce(a, m, mp);
  4224c4:	f7f7 fdb5 	bl	41a032 <.LFE28>

004224c8 <.LVL889>:
    return MP_OKAY;
}
  4224c8:	2000      	movs	r0, #0
  4224ca:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_div_2%457:

004224cc <mp_div_2>:
{
    return fp_montgomery_setup(a, rho);
}

int mp_div_2(fp_int * a, fp_int * b)
{
  4224cc:	b508      	push	{r3, lr}

004224ce <.LCFI146>:
    fp_div_2(a, b);
  4224ce:	f7fc fc5b 	bl	41ed88 <.LFE3>

004224d2 <.LVL893>:
    return MP_OKAY;
}
  4224d2:	2000      	movs	r0, #0
  4224d4:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_set%458:

004224d6 <mp_set>:
#endif /* HAVE_ECC */

#if defined(HAVE_ECC) || !defined(NO_RSA) || !defined(NO_DSA)
/* fast math conversion */
int mp_set(fp_int *a, fp_digit b)
{
  4224d6:	b508      	push	{r3, lr}

004224d8 <.LCFI148>:
    fp_set(a,b);
  4224d8:	f7ff fe1e 	bl	422118 <.LFE20>

004224dc <.LVL897>:
    return MP_OKAY;
}
  4224dc:	2000      	movs	r0, #0
  4224de:	bd08      	pop	{r3, pc}

Disassembly of section .text.get_digit_count%459:

004224e0 <get_digit_count>:
    if (a == NULL)
  4224e0:	b108      	cbz	r0, 4224e6 <.LVL2>
    return a->used;
  4224e2:	6800      	ldr	r0, [r0, #0]

004224e4 <.LVL1>:
  4224e4:	4770      	bx	lr

004224e6 <.LVL2>:
        return 0;
  4224e6:	2000      	movs	r0, #0

004224e8 <.LVL3>:
}
  4224e8:	4770      	bx	lr

Disassembly of section .text.zcfree%460:

004224ea <zcfree>:

void ZLIB_INTERNAL zcfree (opaque, ptr)
    voidpf opaque;
    voidpf ptr;
{
  4224ea:	b508      	push	{r3, lr}

004224ec <.LCFI1>:
    free(ptr);
  4224ec:	4608      	mov	r0, r1

004224ee <.LVL7>:
  4224ee:	f7ff ff0d 	bl	42230c <.LFE0>

004224f2 <.LVL8>:
  4224f2:	bd08      	pop	{r3, pc}

Disassembly of section .rodata%461:

004224f4 <.LANCHOR0>:
  4224f4:	2e322e31 	.word	0x2e322e31
  4224f8:	0037      	.short	0x0037
  4224fa:	bf00      	nop

Disassembly of section .rodata.ecc_oid_prime239v1%462:

004224fc <ecc_oid_prime239v1>:
  4224fc:	862a ce48 033d 0401                         *.H.=...

Disassembly of section .rodata.ecc_oid_secp112r1%463:

00422504 <ecc_oid_secp112r1>:
  422504:	812b 0004 0006 bf00                         +.......

Disassembly of section .rodata.ecc_oid_secp128r1%464:

0042250c <ecc_oid_secp128r1>:
  42250c:	812b 0004 001c bf00                         +.......

Disassembly of section .rodata.ecc_oid_secp160r1%465:

00422514 <ecc_oid_secp160r1>:
  422514:	812b 0004 0008 bf00                         +.......

Disassembly of section .rodata.ecc_oid_secp192r1%466:

0042251c <ecc_oid_secp192r1>:
  42251c:	862a ce48 033d 0101                         *.H.=...

Disassembly of section .rodata.ecc_oid_secp224r1%467:

00422524 <ecc_oid_secp224r1>:
  422524:	812b 0004 0021 bf00                         +...!...

Disassembly of section .rodata.ecc_oid_secp256r1%468:

0042252c <ecc_oid_secp256r1>:
  42252c:	862a ce48 033d 0701                         *.H.=...

Disassembly of section .rodata.ecc_oid_secp384r1%469:

00422534 <ecc_oid_secp384r1>:
  422534:	812b 0004 0022 bf00                         +..."...

Disassembly of section .rodata.ecc_oid_secp521r1%470:

0042253c <ecc_oid_secp521r1>:
  42253c:	812b 0004 0023 bf00                         +...#...

Disassembly of section .text.mp_forcezero%471:

00422544 <mp_forcezero>:
{
  422544:	b508      	push	{r3, lr}

00422546 <.LCFI47>:
    fp_forcezero(a);
  422546:	f7ff fb66 	bl	421c16 <.LFE55>

0042254a <.LVL352>:
  42254a:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_cmp%472:

0042254c <mp_cmp>:
{
  42254c:	b508      	push	{r3, lr}

0042254e <.LCFI54>:
  return fp_cmp(a, b);
  42254e:	f7ff f853 	bl	4215f8 <.LFE9>

00422552 <.LVL378>:
}
  422552:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_cmp_d%473:

00422554 <mp_cmp_d>:
{
  422554:	b508      	push	{r3, lr}

00422556 <.LCFI55>:
  return fp_cmp_d(a, b);
  422556:	f7fe fa25 	bl	4209a4 <.LFE0>

0042255a <.LVL380>:
}
  42255a:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_unsigned_bin_size%474:

0042255c <mp_unsigned_bin_size>:
{
  42255c:	b508      	push	{r3, lr}

0042255e <.LCFI56>:
  return fp_unsigned_bin_size(a);
  42255e:	f7ff fc54 	bl	421e0a <.LFE17>

00422562 <.LVL382>:
}
  422562:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_invmod%475:

00422564 <mp_invmod>:
{
  422564:	b508      	push	{r3, lr}

00422566 <.LCFI97>:
  return fp_invmod(a, b, c);
  422566:	f7f0 f9d7 	bl	412918 <fp_invmod>

0042256a <.LVL731>:
}
  42256a:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_mulmod%476:

0042256c <mp_mulmod>:
{
  42256c:	b508      	push	{r3, lr}

0042256e <.LCFI101>:
  return fp_mulmod(a, b, c, d);
  42256e:	f7ff f981 	bl	421874 <.LFE37>

00422572 <.LVL739>:
}
  422572:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_mod%477:

00422574 <mp_mod>:
{
  422574:	b508      	push	{r3, lr}

00422576 <.LCFI114>:
  return fp_mod (a, b, c);
  422576:	f7fe fbf8 	bl	420d6a <.LFE17>

0042257a <.LVL796>:
}
  42257a:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_exptmod%478:

0042257c <mp_exptmod>:
{
  42257c:	b508      	push	{r3, lr}

0042257e <.LCFI120>:
  return fp_exptmod(G, X, P, Y);
  42257e:	f7fd fe55 	bl	42022c <fp_exptmod>

00422582 <.LVL814>:
}
  422582:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_count_bits%479:

00422584 <mp_count_bits>:
{
  422584:	b508      	push	{r3, lr}

00422586 <.LCFI126>:
    return fp_count_bits(a);
  422586:	f7ff fcbe 	bl	421f06 <.LFE26>

0042258a <.LVL833>:
}
  42258a:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_leading_bit%480:

0042258c <mp_leading_bit>:
{
  42258c:	b508      	push	{r3, lr}

0042258e <.LCFI127>:
    return fp_leading_bit(a);
  42258e:	f7ff fb31 	bl	421bf4 <.LFE0>

00422592 <.LVL835>:
}
  422592:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_rshb%481:

00422594 <mp_rshb>:
{
  422594:	b508      	push	{r3, lr}

00422596 <.LCFI128>:
    fp_rshb(a, x);
  422596:	f7fd fb71 	bl	41fc7c <.LFE40>

0042259a <.LVL837>:
  42259a:	bd08      	pop	{r3, pc}

Disassembly of section .text.mp_montgomery_setup%482:

0042259c <mp_montgomery_setup>:
{
  42259c:	b508      	push	{r3, lr}

0042259e <.LCFI145>:
    return fp_montgomery_setup(a, rho);
  42259e:	f7fe fcf1 	bl	420f84 <.LFE25>

004225a2 <.LVL891>:
}
  4225a2:	bd08      	pop	{r3, pc}

Disassembly of section .rodata.wc_off_on_addr%483:

004225a4 <wc_off_on_addr>:
  4225a4:	0000 0000 ffff ffff                         ........

Disassembly of section .text._tr_flush_bits%484:

004225ac <_tr_flush_bits>:
{
  4225ac:	b508      	push	{r3, lr}

004225ae <.LCFI22>:
    bi_flush(s);
  4225ae:	f7fd feff 	bl	4203b0 <.LFE69>

004225b2 <.LVL305>:
  4225b2:	bd08      	pop	{r3, pc}

Disassembly of section .text.TC0_CH0_TimerFrequencyGet%485:

004225b4 <TC0_CH0_TimerFrequencyGet>:
}
  4225b4:	4800      	ldr	r0, [pc, #0]	; (4225b8 <.LFE12+0x4>)
  4225b6:	4770      	bx	lr
  4225b8:	08f0d180 	.word	0x08f0d180

Disassembly of section .text%486:

00417994 <__aeabi_idiv0>:
  417994:	4770      	bx	lr

00417996 <L0>:
  417996:	bf00      	nop

Disassembly of section .rodata._global_impure_ptr%487:

0041d46c <_global_impure_ptr>:
  41d46c:	c858 2040                                   X.@ 

Disassembly of section .text.__malloc_lock%488:

0041e1fc <__malloc_lock>:
  41e1fc:	4770      	bx	lr
  41e1fe:	bf00      	nop

Disassembly of section .text.__malloc_unlock%489:

004225bc <__malloc_unlock>:
  4225bc:	4770      	bx	lr

004225be <.LFE1>:
  4225be:	bf00      	nop

Disassembly of section .text.Dummy_Handler%490:

004141d6 <Dummy_Handler>:

extern uint32_t _stack;

/* Brief default interrupt handler for unused IRQs.*/
void __attribute__((optimize("-O1"),section(".text.Dummy_Handler"),long_call))Dummy_Handler(void)
{
  4141d6:	e7fe      	b.n	4141d6 <Dummy_Handler>

Disassembly of section .text.NonMaskableInt_Handler%491:

0041496a <NonMaskableInt_Handler>:
// *****************************************************************************

/* Brief default interrupt handlers for core IRQs.*/

void NonMaskableInt_Handler(void)
{
  41496a:	e7fe      	b.n	41496a <NonMaskableInt_Handler>

Disassembly of section .text.HardFault_Handler%492:

004185de <HardFault_Handler>:
    {
    }
}

void HardFault_Handler(void)
{
  4185de:	e7fe      	b.n	4185de <HardFault_Handler>

Disassembly of section .text.DebugMonitor_Handler%493:

0041937e <DebugMonitor_Handler>:
   {
   }
}

void DebugMonitor_Handler(void)
{
  41937e:	e7fe      	b.n	41937e <DebugMonitor_Handler>

Disassembly of section .text.MemoryManagement_Handler%494:

0041a702 <MemoryManagement_Handler>:
   {
   }
}

void MemoryManagement_Handler(void)
{
  41a702:	e7fe      	b.n	41a702 <MemoryManagement_Handler>

Disassembly of section .text.BusFault_Handler%495:

0041ae42 <BusFault_Handler>:
   {
   }
}

void BusFault_Handler(void)
{
  41ae42:	e7fe      	b.n	41ae42 <BusFault_Handler>

Disassembly of section .text.UsageFault_Handler%496:

0041b3f2 <UsageFault_Handler>:
   {
   }
}

void UsageFault_Handler(void)
{
  41b3f2:	e7fe      	b.n	41b3f2 <UsageFault_Handler>

Disassembly of section .text.wc_Sha256Free%497:

0041b832 <wc_Sha256Free>:

void wc_Sha256Free(Sha256* sha256)
{
  41b832:	4770      	bx	lr
