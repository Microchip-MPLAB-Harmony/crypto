var SearchFiles = ["mplab-harmony-crypto-library.html","mc-crypto-api-h-macro.html",".html",
							".html",
							"crypt-huffman-compress-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-huffman-decompress-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-md5-ctx-structure.html",".html",
							"crypt-rng-blockgenerate-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-rng-ctx-structure.html",".html",
							".html",
							"crypt-rng-deinitialize-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-rng-get-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-rng-initialize-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-aes-cbc-decrypt-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-aes-cbc-encrypt-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-aes-ctr-encrypt-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-aes-ctx-structure.html",".html",
							".html",
							"crypt-aes-direct-decrypt-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-aes-direct-encrypt-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-aes-gcm-decrypt-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-aes-gcm-encrypt-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-aes-gcm-setkey-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-aes-ivset-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-aes-keyset-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-ecc-ctx-structure.html",".html",
							"crypt-ecc-dhe-keymake-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-ecc-dhe-sharedsecretmake-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-ecc-dsa-hashsign-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-ecc-dsa-hashverify-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-ecc-free-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-ecc-initialize-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-ecc-keysizeget-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-ecc-privateimport-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-ecc-publicexport-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-ecc-publicimport-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-ecc-signaturesizeget-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-sha384-ctx-structure.html",".html",
							"crypt-rsa-encryptsizeget-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-rsa-free-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-rsa-initialize-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-rsa-privatedecrypt-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-rsa-privatekeydecode-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-rsa-publicencrypt-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-rsa-publickeydecode-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-tdes-cbc-decrypt-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-tdes-cbc-encrypt-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-tdes-ctx-structure.html",".html",
							".html",
							"crypt-tdes-ivset-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-tdes-keyset-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-hmac-ctx-structure.html",".html",
							".html",
							"crypt-hmac-dataadd-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-hmac-finalize-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-hmac-setkey-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-sha-ctx-structure.html",".html",
							".html",
							".html",
							"crypt-sha-dataadd-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-sha-datasizeset-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-sha-finalize-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-sha-initialize-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-sha224-dataadd-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-sha224-finalize-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-sha224-initialize-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-sha256-ctx-structure.html",".html",
							".html",
							".html",
							"crypt-sha256-dataadd-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-sha256-datasizeset-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-sha256-finalize-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-sha256-initialize-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-sha384-ctx-structure.html",".html",
							".html",
							"crypt-sha384-dataadd-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-sha384-finalize-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-sha384-initialize-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-sha512-ctx-structure.html",".html",
							".html",
							"crypt-sha512-dataadd-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-sha512-finalize-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							"crypt-sha512-initialize-function.html",".html",
							".html",
							".html",
							".html",
							".html",
							".html",
							".html"];

var SearchTitles = ["MPLABÂ® Harmony Crypto Library",
"MC_CRYPTO_API_H Macro",
"C",
"Description",
"CRYPT_HUFFMAN_Compress Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_HUFFMAN_DeCompress Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_MD5_CTX Structure",
"Members",
"CRYPT_RNG_BlockGenerate Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_RNG_CTX Structure",
"C",
"Members",
"CRYPT_RNG_DeInitialize Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_RNG_Get Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_RNG_Initialize Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_AES_CBC_Decrypt Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_AES_CBC_Encrypt Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_AES_CTR_Encrypt Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_AES_CTX Structure",
"C",
"Members",
"CRYPT_AES_DIRECT_Decrypt Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_AES_DIRECT_Encrypt Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_AES_GCM_Decrypt Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"CRYPT_AES_GCM_Encrypt Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"CRYPT_AES_GCM_SetKey Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_AES_IvSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_AES_KeySet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_ECC_CTX Structure",
"C",
"CRYPT_ECC_DHE_KeyMake Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_ECC_DHE_SharedSecretMake Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_ECC_DSA_HashSign Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_ECC_DSA_HashVerify Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_ECC_Free Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_ECC_Initialize Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_ECC_KeySizeGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_ECC_PrivateImport Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Example",
"CRYPT_ECC_PublicExport Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_ECC_PublicImport Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_ECC_SignatureSizeGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_SHA384_CTX Structure",
"C",
"CRYPT_RSA_EncryptSizeGet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_RSA_Free Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_RSA_Initialize Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Example",
"CRYPT_RSA_PrivateDecrypt Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_RSA_PrivateKeyDecode Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_RSA_PublicEncrypt Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_RSA_PublicKeyDecode Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_TDES_CBC_Decrypt Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_TDES_CBC_Encrypt Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_TDES_CTX Structure",
"C",
"Members",
"CRYPT_TDES_IvSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_TDES_KeySet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_HMAC_CTX Structure",
"C",
"Members",
"CRYPT_HMAC_DataAdd Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_HMAC_Finalize Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_HMAC_SetKey Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_SHA_CTX Structure",
"C",
"Public Methods",
"__attribute__ C",
"CRYPT_SHA_DataAdd Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_SHA_DataSizeSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_SHA_Finalize Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_SHA_Initialize Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_SHA224_DataAdd Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_SHA224_Finalize Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_SHA224_Initialize Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_SHA256_CTX Structure",
"C",
"Public Methods",
"__attribute__ C",
"CRYPT_SHA256_DataAdd Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_SHA256_DataSizeSet Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_SHA256_Finalize Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_SHA256_Initialize Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_SHA384_CTX Structure",
"C",
"Members",
"CRYPT_SHA384_DataAdd Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_SHA384_Finalize Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_SHA384_Initialize Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_SHA512_CTX Structure",
"C",
"Members",
"CRYPT_SHA512_DataAdd Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_SHA512_Finalize Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example",
"CRYPT_SHA512_Initialize Function",
"C",
"Description",
"Preconditions",
"Parameters",
"Returns",
"Remarks",
"Example"];

var SearchInfo = [" MPLABÂ® Harmony Crypto Library The Cryptographic Library includes functions to perform encryption decryption hashing authentication and compression within the embedded application Random number generation (RNG) functions are also provided Block Ciphers The library provides DES 3DES and AES for block cipher needs Depending on the algorithm in use CBC and CTR modes are supported Public Key Cryptography The library provides RSA and Elliptic Curve Cryptography (ECC) for Public Key Cryptography and Diffie-Hellman (DH) for key agreement arrangements Hash Functions The library provides MD5 SHA SHA-256 SHA-384 and SHA-512 for hashing These functions do not require keys or initialization vectors (IV) Random Number Generation Functions The library provides functions to generate either a single pseudo-random number or a block of such numbers Library Interface The Library Interface routines are divided into various sub-sections which address one of the blocks or the overall operation of the Cryptographic (Crypto) Library module Library Interface Section Description General Functions Provides an error string function which takes an error and converts it into human-readable text Compression Functions Provides Huffman compression and decompression functions MD5 Functions Provides data add finalize and initialize MD5 functions Random Number Generator Functions Provides get initialize and block generate RNG functions AES Encryption/Decryption Functions Provides AES encryption and decryption functions ECC Encryption/Decryption Functions Provides ECC encryption and decryption functions RSA Encryption/Decryption Functions Provides RSA encryption and decryption functions Triple DES Encryption/Decryption Functions Provides 3DES encryption and decryption functions HMAC Hash Functions Provides HMAC data add finalize and set key Hash functions SHA Hash Functions Provides SHA data add finalize and initialize Hash functions SHA256 Hash Functions Provides SHA256 data add finalize and initialize Hash functions SHA384 Hash Functions Provides SHA384 data add finalize and initialize Hash functions SHA512 Hash Functions Provides SHA512 data add finalize and initialize Hash functions ",
							" MC_CRYPTO_API_H Macro ",
							" C #define MC_CRYPTO_API_H ",
							" Description Defines the Microchip CRYPTO API layer ",
							" CRYPT_HUFFMAN_Compress Function ",
							" C int CRYPT_HUFFMAN_Compress( unsigned char* out unsigned int outSz const unsigned char* in unsigned int inSz unsigned int flags ); ",
							" Description This function compresses a block of data using Huffman encoding ",
							" Preconditions None ",
							" Parameters Parameters Description out Pointer to location to store the compressed data outSz Maximum size of the output data in bytes in Point to location of source data inSz Size of the input data in bytes flags Flags to control how compress operates ",
							" Returns negative - Error code positive - Bytes stored in the out buffer ",
							" Remarks Output buffer must be large enough to hold the contents of the operation ",
							" Example const unsigned char text[] = \" \"; unsigned int inSz = sizeof(text); unsigned int outSz; unsigned char cBuffer[1024]; int ret; ret = CRYPT_HUFFMAN_COMPRESS(cBuffer sizeof(cBuffer) text inSz 0); ",
							" CRYPT_HUFFMAN_DeCompress Function ",
							" C int CRYPT_HUFFMAN_DeCompress( unsigned char* out unsigned int outSz const unsigned char* in unsigned int inSz ); ",
							" Description This function decompresses a block of data using Huffman encoding ",
							" Preconditions None ",
							" Parameters Parameters Description out Pointer to destination buffer outSz Size of destination buffer in Pointer to source buffer to decompress inSz Size of source buffer to decompress ",
							" Returns negative - Error code positive - Bytes stored in the out buffer ",
							" Remarks Output buffer must be large enough to hold the contents of the operation ",
							" Example unsigned char cBuffer[1024]; unsigned char dBuffer[1024]; int ret ret = CRYPT_HUFFMAN_DeCompress(dBuffer sizeof(dBuffer) cBuffer msglen); ",
							" CRYPT_MD5_CTX Structure struct CRYPT_MD5_CTX { int holder[110]; }CRYPT_MD5_CTX; ",
							" Members Members Description int holder This structure should be large enough to hold the internal representation the size is checked during initiialization ",
							" CRYPT_RNG_BlockGenerate Function ",
							" C int CRYPT_RNG_BlockGenerate( CRYPT_RNG_CTX* rng unsigned char* b unsigned int sz ); ",
							" Description This function generates several random numbers and places them in the space allocated ",
							" Preconditions RNG context was initialized using the CRYPT_RNG_Initialize function ",
							" Parameters Parameters Description rng Pointer to context which saves state between calls b Pointer to buffer to store the random numbers sz Number of 8-bit random numbers to generate ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function 0 - An invalid pointer was not passed to the function ",
							" Remarks None ",
							" Example #define RANDOM_BYTE_SZ 32 int ret; CRYPT_RNG_CTX mcRng; byte out[RANDOM_BYTE_SZ]; ret = CRYPT_RNG_Initialize( mcRng); ret = CRYPT_RNG_Get( mcRng out[0]); ret = CRYPT_RNG_BlockGenerate( mcRng out RANDOM_BYTE_SZ); ret = CRYPT_RNG_Deinitialize( mcRng); ",
							" CRYPT_RNG_CTX Structure ",
							" C struct CRYPT_RNG_CTX { int holder[66]; }CRYPT_RNG_CTX; ",
							" Members Members Description int holder ; This structure should be large enough to hold the internal representation the size is checked during initialization ",
							" CRYPT_RNG_DeInitialize Function ",
							" C int CRYPT_RNG_Deinitialize( CRYPT_RNG_CTX* rng ); ",
							" Description This function frees the context that stores information relative to random number generation ",
							" Preconditions RNG context was initialized using the CRYPT_RNG_Initialize function ",
							" Parameters Parameters Description rng Pointer to random number generator context ",
							" Returns 0 - Success ",
							" Remarks None ",
							" Example #define RANDOM_BYTE_SZ 32 int ret; CRYPT_RNG_CTX mcRng; byte out[RANDOM_BYTE_SZ]; ret = CRYPT_RNG_Initialize( mcRng); ret = CRYPT_RNG_Get( mcRng out[0]); ret = CRYPT_RNG_BlockGenerate( mcRng out RANDOM_BYTE_SZ); ret = CRYPT_RNG_Deinitialize( mcRng); ",
							" CRYPT_RNG_Get Function ",
							" C int CRYPT_RNG_Get( CRYPT_RNG_CTX* rng unsigned char* b ); ",
							" Description This function gets one random number from the random number generator ",
							" Preconditions RNG context was initialized using the CRYPT_RNG_Initialize function ",
							" Parameters Parameters Description rng Pointer to context which saves state between calls b Pointer to 8-bit location to store the result ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function Less than 0 - An error occurred 0 or greater - Success ",
							" Remarks None ",
							" Example #define RANDOM_BYTE_SZ 32 int ret; CRYPT_RNG_CTX mcRng; byte out[RANDOM_BYTE_SZ]; ret = CRYPT_RNG_Initialize( mcRng); ret = CRYPT_RNG_Get( mcRng out[0]); ret = CRYPT_RNG_BlockGenerate( mcRng out RANDOM_BYTE_SZ); ret = CRYPT_RNG_Deinitialize( mcRng); ",
							" CRYPT_RNG_Initialize Function ",
							" C int CRYPT_RNG_Initialize( CRYPT_RNG_CTX* rng ); ",
							" Description This function initializes the context that stores information relative to random number generation ",
							" Preconditions None ",
							" Parameters Parameters Description rng Pointer to random number generator context ",
							" Returns negative - An error occurred setting up the random number generator 0 - An invalid pointer was not passed to the function ",
							" Remarks None ",
							" Example #define RANDOM_BYTE_SZ 32 int ret; CRYPT_RNG_CTX mcRng; byte out[RANDOM_BYTE_SZ]; ret = CRYPT_RNG_Initialize( mcRng); ret = CRYPT_RNG_Get( mcRng out[0]); ret = CRYPT_RNG_BlockGenerate( mcRng out RANDOM_BYTE_SZ); ret = CRYPT_RNG_Deinitialize( mcRng); ",
							" CRYPT_AES_CBC_Decrypt Function ",
							" C int CRYPT_AES_CBC_Decrypt( CRYPT_AES_CTX* aes unsigned char* out const unsigned char* in unsigned int inSz ); ",
							" Description This function decrypts a block of data using the AES algorithm in Cipher-Block-Chaining (CBC) mode ",
							" Preconditions Key and Initialization Vector (IV) must be set earlier with a call to CRYPT_AES_KeySet and CRYPT_AES_IvSet ",
							" Parameters Parameters Description aes Pointer to context which saves state between calls out Pointer to buffer to store the results of the decryption pass in Pointer to buffer holding the data to be decrypted inSz Size of the input data in bytes ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function 0 - An invalid pointer was not passed to the function ",
							" Remarks The output buffer must be equal in size to the input buffer ",
							" Example CRYPT_AES_CTX mcAes; int ret; byte out1[AES_TEST_SIZE]; byte out2[AES_TEST_SIZE]; strncpy((char*)key \"1234567890abcdefghijklmnopqrstuv\" 32); strncpy((char*)iv \"1234567890abcdef\" 16); ret = CRYPT_AES_KeySet( mcAes key 16 iv CRYPT_AES_ENCRYPTION); ret = CRYPT_AES_CBC_Decrypt( mcAes out2 out1 AES_TEST_SIZE); ",
							" CRYPT_AES_CBC_Encrypt Function ",
							" C int CRYPT_AES_CBC_Encrypt( CRYPT_AES_CTX* aes unsigned char* out const unsigned char* in unsigned int inSz ); ",
							" Description This function encrypts a block of data using the AES algorithm in Cipher-Block-Chaining (CBC) mode ",
							" Preconditions Key and Initialization Vector (IV) must be set earlier with a call to CRYPT_AES_KeySet and CRYPT_AES_IvSet ",
							" Parameters Parameters Description aes Pointer to context which saves state between calls out Pointer to buffer to store the results of the encryption pass in Pointer to buffer holding the data to be encrypted inSz Size of the input data in bytes ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function 0 - An invalid pointer was not passed to the function ",
							" Remarks The output buffer must be equal in size to the input buffer ",
							" Example CRYPT_AES_CTX mcAes; int ret; byte out1[AES_TEST_SIZE]; strncpy((char*)key \"1234567890abcdefghijklmnopqrstuv\" 32); strncpy((char*)iv \"1234567890abcdef\" 16); ret = CRYPT_AES_KeySet( mcAes key 16 iv CRYPT_AES_ENCRYPTION); ret = CRYPT_AES_CBC_Encrypt( mcAes out1 ourData AES_TEST_SIZE); ",
							" CRYPT_AES_CTR_Encrypt Function ",
							" C int CRYPT_AES_CTR_Encrypt( CRYPT_AES_CTX* aes unsigned char* out const unsigned char* in unsigned int inSz ); ",
							" Description This function encrypts a block of data using the AES algorithm in Counter (CTR) mode ",
							" Preconditions Key and Initialization Vector (IV) must be set earlier with a call to CRYPT_AES_KeySet and CRYPT_AES_IvSet ",
							" Parameters Parameters Description aes Pointer to context which saves state between calls out Pointer to buffer to store the results of the encryption pass in Pointer to buffer holding the data to be encrypted inSz Size of the input data in bytes ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function 0 - An invalid pointer was not passed to the function ",
							" Remarks The output buffer must be equal in size to the input buffer ",
							" Example CRYPT_AES_CTX mcAes; int ret; byte out1[AES_TEST_SIZE]; strncpy((char*)key \"1234567890abcdefghijklmnopqrstuv\" 32); strncpy((char*)iv \"1234567890abcdef\" 16); ret = CRYPT_AES_KeySet( mcAes key 16 iv CRYPT_AES_ENCRYPTION); ret = CRYPT_AES_CTR_Encrypt( mcAes out1 ourData AES_TEST_SIZE); ",
							" CRYPT_AES_CTX Structure ",
							" C struct CRYPT_AES_CTX { int holder[93]; }CRYPT_AES_CTX; ",
							" Members Members Description int holder[93]; This structure should be large enough to hold the internal representation the size is checked during initialization ",
							" CRYPT_AES_DIRECT_Decrypt Function ",
							" C int CRYPT_AES_DIRECT_Decrypt( CRYPT_AES_CTX* aes unsigned char* out const unsigned char* in ); ",
							" Description This function decrypts one block of data equal to the AES block size ",
							" Preconditions Key and Initialization Vector (IV) must be set earlier with a call to CRYPT_AES_KeySet and CRYPT_AES_IvSet ",
							" Parameters Parameters Description aes Pointer to context which saves state between calls out Pointer to buffer to store the results of the decryption in Pointer to buffer where the data to decrypt is located ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function 0 - An invalid pointer was not passed to the function ",
							" Remarks Input and output buffers must be equal in size (CRYPT_AES_BLOCK_SIZE) ",
							" Example CRYPT_AES_CTX mcAes; int ret; byte out1[CRYPT_AES_BLOCK_SIZE]; byte out2[CRYPT_AES_BLOCK_SIZE]; strncpy((char*)key \"1234567890abcdefghijklmnopqrstuv\" 32); strncpy((char*)iv \"1234567890abcdef\" 16); ret = CRYPT_AES_KeySet( mcAes key 16 iv CRYPT_AES_ENCRYPTION); ret = CRYPT_AES_DIRECT_Decrypt( mcAes out2 out1); ",
							" CRYPT_AES_DIRECT_Encrypt Function ",
							" C int CRYPT_AES_DIRECT_Encrypt( CRYPT_AES_CTX* aes unsigned char* out const unsigned char* in ); ",
							" Description This function encrypts one block of data equal to the AES block size ",
							" Preconditions Key and Initialization Vector (IV) must be set earlier with a call to CRYPT_AES_KeySet and CRYPT_AES_IvSet ",
							" Parameters Parameters Description aes Pointer to context which saves state between calls out Pointer to buffer to store the results of the encryption in Pointer to buffer where the data to encrypt is located ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function 0 - An invalid pointer was not passed to the function ",
							" Remarks Input and output buffers must be equal in size (CRYPT_AES_BLOCK_SIZE) ",
							" Example CRYPT_AES_CTX mcAes; int ret; byte out1[CRYPT_AES_BLOCK_SIZE]; strncpy((char*)key \"1234567890abcdefghijklmnopqrstuv\" 32); strncpy((char*)iv \"1234567890abcdef\" 16); ret = CRYPT_AES_KeySet( mcAes key 16 iv CRYPT_AES_ENCRYPTION); ret = CRYPT_AES_DIRECT_Encrypt( mcAes out1 ourData); ",
							" CRYPT_AES_GCM_Decrypt Function ",
							" C int CRYPT_AES_GCM_Decrypt( CRYPT_AES_CTX* aes unsigned char* out const unsigned char* in unsigned int sz const unsigned char* iv unsigned int ivSz const unsigned char* authTag unsigned int authTagSz const unsigned char* authIn unsigned int authInSz ); ",
							" Description This function decrypts a block of data using the AES algorithm in Galois/Counter Mode (GCM) ",
							" Preconditions Key must be set earlier with a call to CRYPT_AES_GCM_SetKey ",
							" Parameters Parameters Description aes Pointer to context which saves state between calls out Pointer to buffer to store the results of the decryption pass in Pointer to buffer holding the data to be decrypted sz Size of the input data in bytes iv Pointer to the initialization vector ivSz Size of the initialization vector authTag Pointer to the buffer to store the authentication tag authTagSz Size of the authentication tag authIn Pointer to the additional authentication data authInSz Size of the additional authentication data ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function -AES_GCM_AUTH_E - The authTag is incorrect 0 - An invalid pointer was not passed to the function ",
							" Remarks The output buffer must be equal in size to the input buffer ",
							" CRYPT_AES_GCM_Encrypt Function ",
							" C int CRYPT_AES_GCM_Encrypt( CRYPT_AES_CTX* aes unsigned char* out const unsigned char* in unsigned int sz const unsigned char* iv unsigned int ivSz unsigned char* authTag unsigned int authTagSz const unsigned char* authIn unsigned int authInSz ); ",
							" Description This function encrypts a block of data using the AES algorithm in Galois/Counter Mode (GCM) ",
							" Preconditions Key must be set earlier with a call to CRYPT_AES_GCM_SetKey ",
							" Parameters Parameters Description aes Pointer to context which saves state between calls out Pointer to buffer to store the results of the encryption pass in Pointer to buffer holding the data to be encrypted sz Size of the input data in bytes iv Pointer to the initialization vector ivSz Size of the initialization vector authTag Pointer to the buffer to store the authentication tag authTagSz Size of the authentication tag authIn Pointer to the additional authentication data authInSz Size of the additional authentication data ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function 0 - An invalid pointer was not passed to the function ",
							" Remarks The output buffer must be equal in size to the input buffer ",
							" CRYPT_AES_GCM_SetKey Function ",
							" C int CRYPT_AES_GCM_SetKey( CRYPT_AES_CTX* aes const unsigned char* key unsigned int len ); ",
							" Description This function sets the key that AES will later perform ",
							" Preconditions None ",
							" Parameters Parameters Description aes Pointer to context which saves state between calls key Pointer to buffer holding the key itself len Length of key in bytes ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function 0 - An invalid pointer was not passed to the function ",
							" Remarks None ",
							" Example CRYPT_AES_CTX mcAes; int ret; strncpy((char*)key \"1234567890abcdefghijklmnopqrstuv\" 32); ret = CRYPT_AES_GCM_SetKey( mcAes key 16); ",
							" CRYPT_AES_IvSet Function ",
							" C int CRYPT_AES_IvSet( CRYPT_AES_CTX* aes const unsigned char* iv ); ",
							" Description This function sets the IV that AES will use for later processing ",
							" Preconditions The key must be set previously with CRYPT_AES_KeySet ",
							" Parameters Parameters Description aes Pointer to context which saves state between calls iv Pointer to buffer holding the initialization vector ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function 0 - An invalid pointer was not passed to the function ",
							" Remarks Direction as set previously in CRYPT_AES_KeySet is preserved ",
							" Example CRYPT_AES_CTX mcAes; int ret; strncpy((char*)iv \"1234567890abcdef\" 16); ret = CRYPT_AES_IvSet( mcAes iv); ",
							" CRYPT_AES_KeySet Function ",
							" C int CRYPT_AES_KeySet( CRYPT_AES_CTX* aes const unsigned char* key unsigned int keyLen const unsigned char* iv int dir ); ",
							" Description This function sets the key IV and direction (encryption or decryption) that AES will later perform ",
							" Preconditions None ",
							" Parameters Parameters Description aes Pointer to context which saves state between calls key Pointer to buffer holding the key itself keyLen Length of key in bytes iv Pointer to buffer holding the initialization vector dir Which operation (CRYPT_AES_ENCRYPTION or CRYPT_AES_DECRYPTION) ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function 0 - An invalid pointer was not passed to the function ",
							" Remarks None ",
							" Example CRYPT_AES_CTX mcAes; int ret; strncpy((char*)key \"1234567890abcdefghijklmnopqrstuv\" 32); strncpy((char*)iv \"1234567890abcdef\" 16); ret = CRYPT_AES_KeySet( mcAes key 16 iv CRYPT_AES_ENCRYPTION); ",
							" CRYPT_ECC_CTX Structure ",
							" C struct CRYPT_ECC_CTX { void* holder; }CRYPT_ECC_CTX; ",
							" CRYPT_ECC_DHE_KeyMake Function ",
							" C int CRYPT_ECC_DHE_KeyMake( CRYPT_ECC_CTX* ecc CRYPT_RNG_CTX* rng int keySz ); ",
							" Description This function creates a new ECC key ",
							" Preconditions The context must have been initialized with a call to CRYPT_ECC_Initialize The random number generator context must have been initialized with a call to CRYPT_RNG_Initialize ",
							" Parameters Parameters Description ecc Pointer to context which saves state between calls rng Pointer to the context for the random number generator keySz The size of the key desired ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function MEMORY_E - Could not create the memory buffer for the key 0 - An invalid pointer was not passed to the function ",
							" Remarks None ",
							" Example CRYPT_ECC_CTX userA; int ret; byte sharedA[100]; unsigned int aSz = (unsigned int)sizeof(sharedA); unsigned int usedA = 0; ret = CRYPT_ECC_Initialize( userA); ret = CRYPT_ECC_DHE_KeyMake( userA mcRng 32); ",
							" CRYPT_ECC_DHE_SharedSecretMake Function ",
							" C int CRYPT_ECC_DHE_SharedSecretMake( CRYPT_ECC_CTX* priv CRYPT_ECC_CTX* pub unsigned char* out unsigned int outSz unsigned int* usedSz ); ",
							" Description This function takes two ECC contexts (one public one private) and creates a shared secret between the two The secret conforms to EC-DH from ANSU X9 63 ",
							" Preconditions Both contexts must have been initialized with a call to CRYPT_ECC_Initialize Both contexts have had their respective keys imported or created ",
							" Parameters Parameters Description priv Pointer to the private ECC context (with the private key) pub Pointer to the public ECC context (with the public key) out Destination of the shared secret outSz The max size of the shared secret usedSz Resulting size of the shared secret ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function MEMORY_E - Could not create the memory buffer for the shared secret 0 - An invalid pointer was not passed to the function ",
							" Remarks None ",
							" Example CRYPT_ECC_CTX userA; CRYPT_ECC_CTX userB; int ret; byte sharedA[100]; unsigned int aSz = (unsigned int)sizeof(sharedA); unsigned int usedA = 0; ret = CRYPT_ECC_Initialize( userA); ret = CRYPT_ECC_Initialize( userB); // Make or import the appropriate keys ret = CRYPT_ECC_DHE_SharedSecretMake( userA userB sharedA aSz usedA); ",
							" CRYPT_ECC_DSA_HashSign Function ",
							" C int CRYPT_ECC_DSA_HashSign( CRYPT_ECC_CTX* ecc CRYPT_RNG_CTX* rng unsigned char* sig unsigned int sigSz unsigned int* usedSz const unsigned char* in unsigned int inSz ); ",
							" Description This function takes a message digest and signs it using a private ECC key ",
							" Preconditions The ECC context must have been initialized with a call to CRYPT_ECC_Initialize The RNG context must have been initialized with a call to CRYPT_RNG_Initialize The private key used for the signature must have been imported or created prior to calling this function ",
							" Parameters Parameters Description ecc Pointer to ECC context which saves state between calls and holds keys rng Pointer to Random Number Generator context sig Destination for the signature sigSz The max size of the signature in bytes usedSz The resulting size of the signature in bytes in Pointer to the message digest to sign inSz The length of the digest in bytes ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function 0 - An invalid pointer was not passed to the function ",
							" Remarks None ",
							" Example CRYPT_ECC_CTX userA; int ret; byte sig[100]; unsigned int sigSz = (unsigned int)sizeof(sig); unsigned int usedA = 0; ret = CRYPT_ECC_Initialize( userA); // Import or generate private key ret = CRYPT_ECC_DSA_HashSign( userA mcRng sig sigSz usedA ourData CRYPT_SHA_DIGEST_SIZE); ",
							" CRYPT_ECC_DSA_HashVerify Function ",
							" C int CRYPT_ECC_DSA_HashVerify( CRYPT_ECC_CTX* ecc const unsigned char* sig unsigned int sigSz unsigned char* hash unsigned int hashSz int* status ); ",
							" Description This function verifies that an ECC signature is valid ",
							" Preconditions The ECC context must have been initialized with a call to CRYPT_ECC_Initialize The key used for the signature must have been imported or created prior to calling this function ",
							" Parameters Parameters Description ecc Pointer to context which saves state between calls sig The signature to verify sigSz The length of the signature (octets) hash The hash (message digest) that was signed hashSz The length of the hash (octets) status Result of signature (1 == valid 0 == invalid) ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function MEMORY_E - Memory could not be allocated for the operation 0 - An invalid pointer was not passed to the function ",
							" Remarks None ",
							" Example CRYPT_ECC_CTX userA; int ret; byte sig[100]; unsigned int sigSz = (unsigned int)sizeof(sig); unsigned int usedA = 0; int verifyStatus = 0; ret = CRYPT_ECC_Initialize( userA); // Import or generate private key ret = CRYPT_ECC_DSA_HashVerify( userA sig sigSz ourData CRYPT_SHA_DIGEST_SIZE verifyStatus); ",
							" CRYPT_ECC_Free Function ",
							" C int CRYPT_ECC_Free( CRYPT_ECC_CTX* ecc ); ",
							" Description This function cleans up memory allocated for an ECC Context ",
							" Preconditions The context must have been initialized previously with a call to CRYPT_ECC_Initialize ",
							" Parameters Parameters Description ecc Pointer to context to clean up ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function 0 - An invalid pointer was not passed to the function ",
							" Remarks None ",
							" Example CRYPT_ECC_CTX userA; int ret; ret = CRYPT_ECC_Initialize( userA); ret = CRYPT_ECC_Free( userA); ",
							" CRYPT_ECC_Initialize Function ",
							" C int CRYPT_ECC_Initialize( CRYPT_ECC_CTX* ecc ); ",
							" Description This function initializes the context used for Elliptic Curve Cryptography (ECC) The context is then passed to calls to perform key building encryption decryption etc ",
							" Preconditions None ",
							" Parameters Parameters Description ecc Pointer to context to initialize ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function -1 - Unable to allocate memory for the keys 0 - An invalid pointer was not passed to the function ",
							" Remarks None ",
							" Example CRYPT_ECC_CTX userA; int ret; ret = CRYPT_ECC_Initialize( userA); ",
							" CRYPT_ECC_KeySizeGet Function ",
							" C int CRYPT_ECC_KeySizeGet( CRYPT_ECC_CTX* ecc ); ",
							" Description This function returns the size of the ECC key in octets ",
							" Preconditions The ECC context must have been initialized with a call to CRYPT_ECC_Initialize The key must have been imported or created prior to calling this function ",
							" Parameters Parameters Description ecc Pointer to context which saves state between calls and contains the key ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function int - The size of the key in octets ",
							" Remarks None ",
							" Example CRYPT_ECC_CTX userA; int ret; byte sig[100]; unsigned int sigSz = (unsigned int)sizeof(sig); unsigned int usedA = 0; ret = CRYPT_ECC_Initialize( userA); // Import or generate private key ret = CRYPT_ECC_KeySizeGet( userA); ",
							" CRYPT_ECC_PrivateImport Function ",
							" C int CRYPT_ECC_PrivateImport( CRYPT_ECC_CTX* ecc const unsigned char* priv unsigned int privSz const unsigned char* pub unsigned int pubSz ); ",
							" Description This function imports a public/private key pair in X9 63 format ",
							" Preconditions The context must have been initialized with a call to CRYPT_ECC_Initialize ",
							" Parameters Parameters Description ecc Pointer to context which saves state between calls priv Pointer to the private key privSz Size of the private key in bytes pub Pointer to the public key pubSz Size of the public key in bytes ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function 0 - An invalid pointer was not passed to the function ",
							" Example CRYPT_ECC_CTX ecc; CRYPT_ECC_Initialize( ecc); CRYPT_ECC_PrivateImport( ecc priv_key sizeof(priv_key) pub_key sizeof(pub_key)); ",
							" CRYPT_ECC_PublicExport Function ",
							" C int CRYPT_ECC_PublicExport( CRYPT_ECC_CTX* ecc unsigned char* out unsigned int outSz unsigned int* usedSz ); ",
							" Description This function takes an ECC public key and exports it in ANSI X9 63 format ",
							" Preconditions The context must be initialized previously with a call to CRYPT_ECC_Initialize The key must also have been constructed with a call to CRYPT_ECC_DHE_KeyMake A random number generator must have been initialized with a call to CRYPT_RNG_Initialize ",
							" Parameters Parameters Description ecc Pointer to context which saves state between calls out Buffer in which to store the public key outSz The available size of the buffer in bytes usedSz Return value indicating how many bytes were used ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function BUFFER_E - The output buffer was too small to store the key 0 - An invalid ppointer was not passed to the function ",
							" Remarks None ",
							" Example CRYPT_ECC_CTX userA; int ret; byte sharedA[100]; unsigned int aSz = (unsigned int)sizeof(sharedA); unsigned int usedA = 0; ret = CRYPT_ECC_Initialize( userA); ret = CRYPT_ECC_DHE_KeyMake( userA mcRng 32); ret = CRYPT_ECC_PublicExport( userA sharedA aSz usedA); ",
							" CRYPT_ECC_PublicImport Function ",
							" C int CRYPT_ECC_PublicImport( CRYPT_ECC_CTX* ecc const unsigned char* in unsigned int inSz ); ",
							" Description This function imports a public key in ANSI X9 63 format into the ECC context ",
							" Preconditions The ECC context must have previously been initialized with a call to CRYPT_ECC_Initialize ",
							" Parameters Parameters Description ecc Pointer to context which saves state between calls in Input buffer that holds the public key inSz Size of the input buffer in bytes ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function MEMORY_E - Memory could not be allocated for the key ASN_PARSE_E - There was a parse error while going through the key 0 - An invalid ppointer was not passed to the function ",
							" Remarks None ",
							" Example CRYPT_ECC_CTX userB; int ret; byte sharedA[100]; unsigned int aSz = (unsigned int)sizeof(sharedA); unsigned int usedA; ret = CRYPT_ECC_Initialize( userB); ret = CRYPT_ECC_PublicImport( userB sharedA usedA); ",
							" CRYPT_ECC_SignatureSizeGet Function ",
							" C int CRYPT_ECC_SignatureSizeGet( CRYPT_ECC_CTX* ecc ); ",
							" Description This function returns the size of the signature in a given context in octets ",
							" Preconditions The ECC context must have been initialized with a call to CRYPT_ECC_Initialize The keys must have been imported or created prior to calling this function ",
							" Parameters Parameters Description ecc Pointer to context which saves state between calls and contains the signature ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function int - The size of the signature ",
							" Remarks None ",
							" Example CRYPT_ECC_CTX userA; int ret; byte sig[100]; unsigned int sigSz = (unsigned int)sizeof(sig); unsigned int usedA = 0; ret = CRYPT_ECC_Initialize( userA); // Import or generate private key ret = CRYPT_ECC_SignatureSizeGet( userA); ",
							" CRYPT_SHA384_CTX Structure ",
							" C struct CRYPT_RSA_CTX { void* holder; }; ",
							" CRYPT_RSA_EncryptSizeGet Function ",
							" C int CRYPT_RSA_EncryptSizeGet( CRYPT_RSA_CTX* rsa ); ",
							" Description This function retrieves the size of the RSA key in use for the context ",
							" Preconditions The context must be initialized with a call to CRYPT_RSA_Initialize and the keys decoded either with CRYPT_RSA_PrivateKeyDecode or CRYPT_RSA_PublicKeyDecode ",
							" Parameters Parameters Description rsa Pointer to context which saves state between calls ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function int - Size of the key ",
							" Remarks None ",
							" Example CRYPT_RSA_CTX mcRsa; int ret; unsigned int keySz = (unsigned int)sizeof(client_key_der_1024); byte out1[256]; ret = CRYPT_RSA_Initialize( mcRsa); ret = CRYPT_RSA_PrivateKeyDecode( mcRsa client_key_der_1024 keySz); ret = CRYPT_RSA_EncryptSizeGet( mcRsa); ",
							" CRYPT_RSA_Free Function ",
							" C int CRYPT_RSA_Free( CRYPT_RSA_CTX* rsa ); ",
							" Description This function releases the memory used during RSA processing for storing the public/private key ",
							" Preconditions The context must have been set up previously with a call to CRYPT_RSA_Initialize ",
							" Parameters Parameters Description rsa Pointer to context to clean up ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function 0 - An invalid pointer was not passed to the function ",
							" Remarks None ",
							" Example CRYPT_RSA_CTX mcRsa; int ret; ret = CRYPT_RSA_Initialize( mcRsa); ret = CRYPT_RSA_Free( mcRsa); ",
							" CRYPT_RSA_Initialize Function ",
							" C int CRYPT_RSA_Initialize( CRYPT_RSA_CTX* rsa ); ",
							" Description This function initializes the context used during public-key RSA encryption and decryption ",
							" Preconditions None ",
							" Parameters Parameters Description rsa Pointer to RSA context which saves state between calls ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function -1 - Unable to allocate the memory necessary for the key 0 - An invalid pointer was not passed to the function ",
							" Example CRYPT_RSA_CTX mcRsa; int ret; ret = CRYPT_RSA_Initialize( mcRsa); ",
							" CRYPT_RSA_PrivateDecrypt Function ",
							" C int CRYPT_RSA_PrivateDecrypt( CRYPT_RSA_CTX* rsa unsigned char* out unsigned int outSz const unsigned char* in unsigned int inSz ); ",
							" Description This function decrypts a data block using a private key ",
							" Preconditions The context must be initialized using CRYPT_RSA_Initialize and the private key decoded using CRYPT_RSA_PrivateKeyDecode prior to calling this function ",
							" Parameters Parameters Description rsa Pointer to context which saves state between calls out Pointer to output buffer to store results outSz Size of output buffer in Pointer to source buffer to be decrypted inSz Size of input buffer ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function int - Size of the actual output ",
							" Remarks None ",
							" Example CRYPT_RSA_CTX mcRsa; int ret; unsigned int keySz = (unsigned int)sizeof(client_key_der_1024); byte out1[256]; ret = CRYPT_RSA_Initialize( mcRsa); ret = CRYPT_RSA_PrivateKeyDecode( mcRsa client_key_der_1024 keySz); ret = CRYPT_RSA_PrivateDecrypt( mcRsa out2 sizeof(out2) out1 RSA_TEST_SIZE); ",
							" CRYPT_RSA_PrivateKeyDecode Function ",
							" C int CRYPT_RSA_PrivateKeyDecode( CRYPT_RSA_CTX* rsa const unsigned char* in unsigned int inSz ); ",
							" Description This function builds a private key from a DER-formatted certificate DER stands for Distinguished Encoding Rules ",
							" Preconditions The context must have been initialized with a call to CRYPT_RSA_Initialize ",
							" Parameters Parameters Description rsa Pointer to context which saves state between calls in Pointer to buffer containing the certificate to process to extract the private key inSz Size of the input data in bytes ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function 0 - An invalid pointer was not passed to the function ",
							" Remarks None ",
							" Example CRYPT_RSA_CTX mcRsa; int ret; unsigned int keySz = (unsigned int)sizeof(client_key_der_1024); ret = CRYPT_RSA_Initialize( mcRsa); ret = CRYPT_RSA_PrivateKeyDecode( mcRsa client_key_der_1024 keySz); ",
							" CRYPT_RSA_PublicEncrypt Function ",
							" C int CRYPT_RSA_PublicEncrypt( CRYPT_RSA_CTX* rsa unsigned char* out unsigned int outSz const unsigned char* in unsigned int inSz CRYPT_RNG_CTX* rng ); ",
							" Description This function encrypts a data block using a public key ",
							" Preconditions The context must be initialized using CRYPT_RSA_Initialize and the public key decoded using RYPT_RSA_PublicKeyDecode prior to calling this function The random number generator must be initialized with a call to CRYPT_RNG_Initialize ",
							" Parameters Parameters Description rsa Pointer to context which saves state between calls out Pointer to output buffer to store results outSz Size of output buffer in Pointer to source buffer to be encrypted inSz Size of input buffer rng Pointer to Random Number Generator (RNG) context ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function int - Size of the actual output ",
							" Remarks None ",
							" Example CRYPT_RSA_CTX mcRsa; CRYPT_RNG_CTX mcRng; int ret; unsigned int keySz = (unsigned int)sizeof(client_key_der_1024); byte out1[256]; ret = CRYPT_RSA_Initialize( mcRsa); ret = CRYPT_RNG_Initialize( mcRng); ret = CRYPT_RSA_PublicKeyDecode( mcRsa client_key_der_1024 keySz); ret = CRYPT_RSA_PublicEncrypt( mcRsa out1 sizeof(out1) ourData RSA_TEST_SIZE mcRng); ",
							" CRYPT_RSA_PublicKeyDecode Function ",
							" C int CRYPT_RSA_PublicKeyDecode( CRYPT_RSA_CTX* rsa const unsigned char* in unsigned int inSz ); ",
							" Description This function builds a public key from a DER-formatted certificate DER stands for Distinguished Encoding Rules ",
							" Preconditions The context must have been initialized with a call to CRYPT_RSA_Initialize ",
							" Parameters Parameters Description rsa Pointer to context which saves state between calls in Pointer to buffer containing the certificate to process to extract the public key inSz Size of the input data in bytes ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function 0 - An invalid pointer was not passed to the function ",
							" Remarks None ",
							" Example CRYPT_RSA_CTX mcRsa; int ret; unsigned int keySz = (unsigned int)sizeof(client_key_der_1024); ret = CRYPT_RSA_Initialize( mcRsa); ret = CRYPT_RSA_PublicKeyDecode( mcRsa client_key_der_1024 keySz); ret = CRYPT_RSA_PublicEncrypt( mcRsa out1 sizeof(out1) ourData RSA_TEST_SIZE mcRng); ",
							" CRYPT_TDES_CBC_Decrypt Function ",
							" C int CRYPT_TDES_CBC_Decrypt( CRYPT_TDES_CTX* tdes unsigned char* out const unsigned char* in unsigned int inSz ); ",
							" Description This function decrypts a block of data using a Triple DES algorithm ",
							" Preconditions The context tdes must be set earlier using CRYPT_TDES_KeySet The input block must be a multiple of 8 bytes long ",
							" Parameters Parameters Description tdes Pointer to context which saves state between calls out Pointer to output buffer to store the results in Pointer to input buffer for the source of the data inSz Size of the input data buffer ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function 0 - An invalid pointer was not passed to the function ",
							" Remarks Input data must have a length that is a multiple of 8 bytes Output data will be zero-padded at the end if the original data was not a multiple of 8 bytes long ",
							" Example CRYPT_TDES_CTX mcDes3; int ret; byte out1[TDES_SIZE]; byte out2[TDES_SIZE]; strncpy((char*)key \"1234567890abcdefghijklmn\" 24); strncpy((char*)iv \"12345678\" 8); ret = CRYPT_TDES_KeySet( mcDes3 key iv CRYPT_TDES_ENCRYPTION); ret = CRYPT_TDES_CBC_Encrypt( mcDes3 out1 ourData TDES_SIZE); ret = CRYPT_TDES_KeySet( mcDes3 key iv CRYPT_TDES_DECRYPTION); ret = CRYPT_TDES_CBC_Decrypt( mcDes3 out2 out1 TDES_TEST_SIZE); ",
							" CRYPT_TDES_CBC_Encrypt Function ",
							" C int CRYPT_TDES_CBC_Encrypt( CRYPT_TDES_CTX* tdes unsigned char* out const unsigned char* in unsigned int inSz ); ",
							" Description This function encrypts a block of data using a Triple DES algorithm ",
							" Preconditions The context tdes must be set earlier using CRYPT_TDES_KeySet The input block must be a multiple of 8 bytes long ",
							" Parameters Parameters Description tdes Pointer to context which saves state between calls out Pointer to output buffer to store the results in Pointer to input buffer for the source of the data inSz Size of the input data buffer ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function 0 - An invalid pointer was not passed to the function ",
							" Remarks The input data must be padded at the end with zeros to make the length a multiple of 8 ",
							" Example CRYPT_TDES_CTX mcDes3; int ret; byte out1[TDES_SIZE]; byte out2[TDES_SIZE]; strncpy((char*)key \"1234567890abcdefghijklmn\" 24); strncpy((char*)iv \"12345678\" 8); ret = CRYPT_TDES_KeySet( mcDes3 key iv CRYPT_TDES_ENCRYPTION); ret = CRYPT_TDES_CBC_Encrypt( mcDes3 out1 ourData TDES_SIZE); ret = CRYPT_TDES_KeySet( mcDes3 key iv CRYPT_TDES_DECRYPTION); ret = CRYPT_TDES_CBC_Decrypt( mcDes3 out2 out1 TDES_TEST_SIZE); ",
							" CRYPT_TDES_CTX Structure ",
							" C struct CRYPT_TDES_CTX { int holder[112]; }CRYPT_TDES_CTX; ",
							" Members Members Description int holder This structure should be large enough to hold the internal representation the size is checked during initialization ",
							" CRYPT_TDES_IvSet Function ",
							" C int CRYPT_TDES_IvSet( CRYPT_TDES_CTX* tdes const unsigned char* iv ); ",
							" Description This function changes the initialization vector (IV) of a TDES context but leaves the key alone ",
							" Preconditions None ",
							" Parameters Parameters Description tdes Pointer to context which saves state between calls iv Pointer to buffer holding the initialization vector Must be 8 bytes in size ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function 0 - An invalid pointer was not passed to the function ",
							" Remarks The IV must be 8 bytes long ",
							" Example CRYPT_TDES_CTX mcDes3; int ret; byte out1[TDES_SIZE]; byte out2[TDES_SIZE]; strncpy((char*)key \"1234567890abcdefghijklmn\" 24); strncpy((char*)iv \"12345678\" 8); ret = CRYPT_TDES_KeySet( mcDes3 key iv CRYPT_TDES_ENCRYPTION); ret = CRYPT_TDES_IvSet( mcDes3 iv); ret = CRYPT_TDES_CBC_Encrypt( mcDes3 out1 ourData TDES_SIZE); ret = CRYPT_TDES_KeySet( mcDes3 key iv CRYPT_TDES_DECRYPTION); ret = CRYPT_TDES_CBC_Decrypt( mcDes3 out2 out1 TDES_TEST_SIZE); ",
							" CRYPT_TDES_KeySet Function ",
							" C int CRYPT_TDES_KeySet( CRYPT_TDES_CTX* tdes const unsigned char* key const unsigned char* iv int dir ); ",
							" Description This function sets the key and initialization vector (IV) for a set of Triple-DES operations ",
							" Preconditions None ",
							" Parameters Parameters Description tdes Pointer to context which saves state between calls key Pointer to buffer holding the key Must be 24 bytes in size iv Pointer to buffer holding the initialization vector Must be 8 bytes in size dir Indicates whether encryption or decryption will be done Can be set to CRYPT_TDES_ENCRYPTION for encryption operations or CRYPT_TDES_DECRYPTION for decryption operations ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function 0 - An invalid pointer was not passed to the function ",
							" Remarks The input data must be a multiple of 8 bytes and must be padded at the end with zeros to meet the length ",
							" Example CRYPT_TDES_CTX mcDes3; int ret; byte out1[TDES_SIZE]; byte out2[TDES_SIZE]; strncpy((char*)key \"1234567890abcdefghijklmn\" 24); strncpy((char*)iv \"12345678\" 8); ret = CRYPT_TDES_KeySet( mcDes3 key iv CRYPT_TDES_ENCRYPTION); ret = CRYPT_TDES_CBC_Encrypt( mcDes3 out1 ourData TDES_SIZE); ret = CRYPT_TDES_KeySet( mcDes3 key iv CRYPT_TDES_DECRYPTION); ret = CRYPT_TDES_CBC_Decrypt( mcDes3 out2 out1 TDES_TEST_SIZE); ",
							" CRYPT_HMAC_CTX Structure ",
							" C struct CRYPT_HMAC_CTX { long long holder[96]; }CRYPT_HMAC_CTX; ",
							" Members Members Description long long holder ; This structure should be large enough to hold the internal representation the size is checked during initialization ",
							" CRYPT_HMAC_DataAdd Function ",
							" C int CRYPT_HMAC_DataAdd( CRYPT_HMAC_CTX* hmac const unsigned char* input unsigned int sz ); ",
							" Description This function adds data to the HMAC so that multiple blocks of data can be processed ",
							" Preconditions The CRYPT_HMAC_CTX context must be initialized using the CRYPT_HMAC_SetKey function prior to any call to this function ",
							" Parameters Parameters Description hmac Pointer to context that saves state between calls input Pointer to the data that will be used to update the hash sz Size of the input data in bytes ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function 0 - An invalid pointer was not passed to the function ",
							" Remarks None ",
							" Example CRYPT_HMAC_CTX mcHmac; byte mcDigest[CRYPT_SHA512_DIGEST_SIZE]; CRYPT_HMAC_SetKey( mcHmac CRYPT_HMAC_SHA key 4); CRYPT_HMAC_DataAdd( mcHmac ourData OUR_DATA_SIZE); CRYPT_HMAC_Finalize( mcHmac mcDigest); ",
							" CRYPT_HMAC_Finalize Function ",
							" C int CRYPT_HMAC_Finalize( CRYPT_HMAC_CTX* hmac unsigned char* digest ); ",
							" Description This function completes the HMAC calculations The results are placed in the location pointed to by the digest parameter ",
							" Preconditions The CRYPT_HMAC_CTX context must be initialized using the CRYPT_HMAC_SetKey function prior to any call to this function ",
							" Parameters Parameters Description hmac Pointer to context that saves state between calls digest Pointer to where the final HMAC digest results will be stored ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function 0 - An invalid pointer was not passed to the function ",
							" Remarks The area pointed to by the digest parameter must be large enough to hold the results ",
							" Example CRYPT_HMAC_CTX mcHmac; byte mcDigest[CRYPT_SHA512_DIGEST_SIZE]; CRYPT_HMAC_SetKey( mcHmac CRYPT_HMAC_SHA key 4); CRYPT_HMAC_DataAdd( mcHmac ourData OUR_DATA_SIZE); CRYPT_HMAC_Finalize( mcHmac mcDigest); ",
							" CRYPT_HMAC_SetKey Function ",
							" C int CRYPT_HMAC_SetKey( CRYPT_HMAC_CTX* hmac int type const unsigned char* key unsigned int sz ); ",
							" Description This function initializes the HMAC context and sets the key for the hash ",
							" Preconditions None ",
							" Parameters Parameters Description hmac Pointer to context that saves state between calls type Type of SHA operation to use with HMAC Must be one of the following: CRYPT_HMAC_SHA CRYPT_HMAC_SHA256 CRYPT_HMAC_SHA384 or CRYPT_HMAC_SHA512 key Secret key used for the hash sz Size of the input data in bytes ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function 0 - An invalid pointer was not passed to the function ",
							" Remarks None ",
							" Example CRYPT_HMAC_CTX mcHmac; byte mcDigest[CRYPT_SHA512_DIGEST_SIZE]; CRYPT_HMAC_SetKey( mcHmac CRYPT_HMAC_SHA key 4); CRYPT_HMAC_DataAdd( mcHmac ourData OUR_DATA_SIZE); CRYPT_HMAC_Finalize( mcHmac mcDigest); ",
							" CRYPT_SHA_CTX Structure ",
							" C struct CRYPT_SHA_CTX { }CRYPT_SHA_CTX; ",
							" Public Methods Name Description __attribute__ This structure should be large enough to hold the internal representation te size is checked during initialization ",
							" __attribute__ C int holder __attribute__( (aligned (8)) ); ",
							" CRYPT_SHA_DataAdd Function ",
							" C int CRYPT_SHA_DataAdd( CRYPT_SHA_CTX* sha const unsigned char* input unsigned int sz ); ",
							" Description This function updates the hash with the data provided ",
							" Preconditions The SHA context must be initialized prior to the first call of this function The context must not be modified by code outside of this function ",
							" Parameters Parameters Description sha Pointer to CRYPT_SHA_CTX structure which holds the hash values input Pointer to the data to use to update the hash sz Size of the data (in bytes) to use to update the hash ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function either sha or input 0 - An invalid pointer was not passed to the function ",
							" Remarks In order to preserve the validity of the SHA hash nothing must modify the context holding variable between calls to CRYPT_SHA_DataAdd ",
							" Example CRYPT_SHA_CTX sha; uint8_t buffer[1024]; uint8_t shaSum[SHA_DIGEST_SIZE]; CRYPT_SHA_Initialize( sha); CRYPT_SHA_DataAdd( sha buffer sizeof(buffer)); CRYPT_SHA_Finalize( sha shaSum); ",
							" CRYPT_SHA_DataSizeSet Function ",
							" C int CRYPT_SHA_DataSizeSet( CRYPT_SHA_CTX* sha unsigned int msgSize ); ",
							" Description The PIC32MZ hardware encryption module needs to know the size of the data before it starts processing This function sets that value ",
							" Preconditions None ",
							" Parameters Parameters Description sha Pointer to CRYPT_SHA_CTX structure which holds the hash values msgSize Size of the data (in bytes) that will be processed ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function 0 - An invalid pointer was not passed to the function ",
							" Remarks All SHA hashes have to start at a particular value before adding new data to it This function sets the necessary values for the structure ",
							" Example CRYPT_SHA_CTX sha; uint8_t buffer[1024]; uint8_t shasum[SHA_DIGEST_SIZE]; CRYPT_SHA_Initialize( sha); CRYPT_SHADataSizeSet( sha sizeof(buffer)); CRYPT_SHA_DataAdd( sha buffer sizeof(buffer)); CRYPT_SHA_Finalize( sha shasum); ",
							" CRYPT_SHA_Finalize Function ",
							" C int CRYPT_SHA_Finalize( CRYPT_SHA_CTX* sha unsigned char* digest ); ",
							" Description This function finalizes the hash and puts the result into digest ",
							" Preconditions The SHA context must be initialized prior to calling this function The context must not be modified by code outside of this function ",
							" Parameters Parameters Description sha Pointer to CRYPT_SHA_CTX structure which holds the hash values digest Pointer to byte array to store hash result ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function either sha or digest 0 - An invalid pointer was not passed to the function ",
							" Remarks In order to preserve the validity of the SHA hash nothing must modify the context hoding variable between calls to CRYPT_SHA_DataAdd and CRYPT_SHA_Finalize ",
							" Example CRYPT_SHA_CTX sha; uint8_t buffer[1024]; uint8_t shaSum[SHA_DIGEST_SIZE]; CRYPT_SHA_Initialize( sha); CRYPT_SHA_DataAdd( sha buffer sizeof(buffer)); CRYPT_SHA_Finalize( sha shaSum); ",
							" CRYPT_SHA_Initialize Function ",
							" C int CRYPT_SHA_Initialize( CRYPT_SHA_CTX* sha ); ",
							" Description This function initializes the internal structures necessary for SHA hash calculations ",
							" Preconditions None ",
							" Parameters Parameters Description sha Pointer to CRYPT_SHA_CTX structure which holds the hash values ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function 0 - An invalid pointer was not passed to the function ",
							" Remarks All SHA hashes have to start at a particular value before adding new data to it Thus function sets the necessary values for the structure ",
							" Example CRYPT_SHA_CTX sha; uint8_t shaSum[SHA_DIGEST_SIZE]; CRYPT_SHA_Initialize( sha); CRYPT_SHA_DataAdd( sha buffer sizeof(buffer)); CRYPT_SHA_Finalize( sha shaSum); ",
							" CRYPT_SHA224_DataAdd Function ",
							" C int CRYPT_SHA224_DataAdd( CRYPT_SHA256_CTX* sha224 const unsigned char* input unsigned int sz ); ",
							" Description This function updates the hash with the data provided ",
							" Preconditions The SHA224 context must be initialized prior to the first call of this function The context must not be modified by code outside of this function ",
							" Parameters Parameters Description sha224 Pointer to CRYPT_SHA256_CTX structure which holds the hash values input Pointer to the data to use to update the hash sz Size of the data (in bytes) to use to update the hash ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function either sha224 or input 0 - An invalid pointer was not passed to the function ",
							" Remarks In order to preserve the validity of the SHA224 hash nothing must modify the context holding variable between calls to CRYPT_SHA224_DataAdd ",
							" Example CRYPT_SHA256_CTX sha224; uint8_t buffer[1024]; uint8_t shaSum[SHA224_DIGEST_SIZE]; CRYPT_SHA224_Initialize( sha224); CRYPT_SHA224_DataAdd( sha224 buffer sizeof(buffer)); CRYPT_SHA224_Finalize( sha224 shaSum); ",
							" CRYPT_SHA224_Finalize Function ",
							" C int CRYPT_SHA224_Finalize( CRYPT_SHA256_CTX* sha224 unsigned char* digest ); ",
							" Description This function finalizes the hash and puts the result into digest ",
							" Preconditions The SHA224 context must be initialized prior to calling this function The context must not be modified by code outisde of this function ",
							" Parameters Parameters Description sha224 Pointer to CRYPT_SHA256_CTX structure which holds the hash values digest Pointer to byte array to store hash result ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function either sha224 or digest 0 - An invalid pointer was not passed to the function ",
							" Remarks In order to preserve the validity of the SHA224 hash nothing must modify the context holding variable between calls to CRYPT_SHA224_DataAdd and CRYPT_SHA224_Finalize ",
							" Example CRYPT_SHA256_CTX sha224; uint8_t buffer[1024]; uint8_t shaSum[SHA224_DIGEST_SIZE]; CRYPT_SHA224_Initialize( sha224); CRYPT_SHA224_DataAdd( sha224 buffer sizeof(buffer)); CRYPT_SHA224_Finalize( sha224 shaSum); ",
							" CRYPT_SHA224_Initialize Function ",
							" C int CRYPT_SHA224_Initialize( CRYPT_SHA256_CTX* sha224 ); ",
							" Description This function initializes the internal structures necessary for SHA224 hash calculations ",
							" Preconditions None ",
							" Parameters Parameters Description sha224 Pointer to context which saves state between calls ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function 0 - An invalid pointer was not passed to the function ",
							" Remarks All SHA hashes have to start at a particular value before adding new data to it This function sets the necessary values for the structure ",
							" Example CRYPT_SHA256_CTX sha; uint8_t shaSum[SHA224_DIGEST_SIZE]; CRYPT_SHA224_Initialize( sha); CRYPT_SHA224_DataAdd( sha buffer sizeof(buffer)); CRYPT_SHA224_Finalize( sha shaSum); ",
							" CRYPT_SHA256_CTX Structure ",
							" C struct CRYPT_SHA256_CTX { }CRYPT_SHA256_CTX; ",
							" Public Methods Name Description __attribute__ This structure should be large enough to hold the internal representation te size is checked during initialization ",
							" __attribute__ C int holder __attribute__( (aligned (8)) ); ",
							" CRYPT_SHA256_DataAdd Function ",
							" C int CRYPT_SHA256_DataAdd( CRYPT_SHA256_CTX* sha256 const unsigned char* input unsigned int sz ); ",
							" Description This function updates the hash with the data provided ",
							" Preconditions The SHA256 context must be inititialized prior to the first call of this function The context must not be modified by code outside of this function ",
							" Parameters Parameters Description sha256 Pointer to CRYPT_SHA256_CTX structure which holds the hash values input Pointer to the data to use to update the hash sz Size of the data (in bytes) to use to update the hash ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function either in sha256 or input 0 - An invalid pointer was not passed to the function ",
							" Remarks In order to preserve the validity of the SHA256 hash nothing must modify the context holding variable between calls to CRYPT_SHA256_DataAdd ",
							" Example CRYPT_SHA256_CTX sha256; uint8_t buffer[1024]; uint8_t shaSum[SHA256_DIGEST_SIZE]; CRYPT_SHA256_Initialize( sha256); CRYPT_SHA256_DataAdd( sha256 buffer sizeof(buffer)); CRYPT_SHA256_Finalize( sha256 shaSum); ",
							" CRYPT_SHA256_DataSizeSet Function ",
							" C int CRYPT_SHA256_DataSizeSet( CRYPT_SHA256_CTX* sha256 unsigned int msgSize ); ",
							" Description The PIC32MZ hardware encryption module needs to know the size of the data before it starts processing This function sets that value ",
							" Preconditions None ",
							" Parameters Parameters Description sha256 Pointer to CRYPT_SHA256_CTX structure which holds the hash values msgSize Size of the data (in bytes) that will be processed ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function 0 - An invalid pointer was not passed to the function ",
							" Remarks All SHA256 hashes have to start at a particular value before adding new data to it This function sets the necessary values for the structure ",
							" Example CRYPT_SHA256_CTX sha256; uint8_t buffer[1024]; uint8_t sha256sum[SHA256_DIGEST_SIZE]; CRYPT_SHA256_Initialize( sha256); CRYPT_SHA256DataSizeSet( sha256 sizeof(buffer)); CRYPT_SHA256_DataAdd( sha256 buffer sizeof(buffer)); CRYPT_SHA256_Finalize( sha256 sha256sum); ",
							" CRYPT_SHA256_Finalize Function ",
							" C int CRYPT_SHA256_Finalize( CRYPT_SHA256_CTX* sha256 unsigned char* digest ); ",
							" Description This function finalizes the hash and puts the result into digest ",
							" Preconditions The SHA256 context must be initialized prior to calling this function The context must not be modified by code outside of this function ",
							" Parameters Parameters Description sha256 Pointer to CRYPT_SHA256_CTX structure which holds the hash values digest Pointer to byte array to store hash result ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function either in sha256 or digest 0 - An invalid pointer was not passed to the function ",
							" Remarks In order to preserve the validity of the SHA256 hash nothing must modify the context holding variable between calls to CRYPT_SHA256_DataAdd and CRYPT_SHA256_Finalize ",
							" Example CRYPT_SHA256_CTX sha256; uint8_t buffer[1024]; uint8_t shaSum[SHA256_DIGEST_SIZE]; CRYPT_SHA256_Initialize( sha256); CRYPT_SHA256_DataAdd( sha256 buffer sizeof(buffer)); CRYPT_SHA256_Finalize( sha256 shaSum); ",
							" CRYPT_SHA256_Initialize Function ",
							" C int CRYPT_SHA256_Initialize( CRYPT_SHA256_CTX* sha256 ); ",
							" Description This function initializes the internal structures necessary for SHA256 hash calculations ",
							" Preconditions None ",
							" Parameters Parameters Description sha256 Pointer to context which saves state between calls ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function 0 - An invalid pointer was not passed to the function ",
							" Remarks All SHA hashes have to start at a particular value before adding new data to it This function sets the necessary values for the structure ",
							" Example CRYPT_SHA256_CTX sha; uint8_t shaSum[SHA256_DIGEST_SIZE]; CRYPT_SHA256_Initialize( sha); CRYPT_SHA256_DataAdd( sha buffer sizeof(buffer)); CRYPT_SHA256_Finalize( sha shaSum); ",
							" CRYPT_SHA384_CTX Structure ",
							" C struct CRYPT_SHA384_CTX { long long holder[32]; }CRYPT_SHA384_CTX; ",
							" Members Members Description long long holder This structure should be large enough to hold the internal representation the size is checked during initialization ",
							" CRYPT_SHA384_DataAdd Function ",
							" C int CRYPT_SHA384_DataAdd( CRYPT_SHA384_CTX* sha384 const unsigned char* input unsigned int sz ); ",
							" Description This function updates the hash with the data provided ",
							" Preconditions The SHA384 context must be initialized prior to the first call of this function The context must not be modified by code outside of this function ",
							" Parameters Parameters Description sha384 Pointer to CRYPT_SHA384_CTX structure which holds the hash values input Pointer to the data to use to update the hash sz Size of the data (in bytes) to use to update the hash ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function either in sha384 or input 0 - An invalid pointer was not passed to the function ",
							" Remarks In order to preserve the validity of the SHA384 hash nothing must modify the context holding variable between calls to CRYPT_SHA384_DataAdd ",
							" Example CRYPT_SHA384_CTX sha384; uint8_t buffer[1024]; uint8_t shaSum[SHA384_DIGEST_SIZE]; CRYPT_SHA384_Initialize( sha384); CRYPT_SHA384_DataAdd( sha384 buffer sizeof(buffer)); CRYPT_SHA384_Finalize( sha384 shaSum); ",
							" CRYPT_SHA384_Finalize Function ",
							" C int CRYPT_SHA384_Finalize( CRYPT_SHA384_CTX* sha384 unsigned char* digest ); ",
							" Description This function finalizes the hash and puts the result into digest ",
							" Preconditions The SHA384 context must be initialized prior to calling this function The context must not be modified by code outside of this function ",
							" Parameters Parameters Description sha384 Pointer to CRYPT_SHA384_CTX structure which holds the hash values digest Pointer to byte array to store hash result ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function either in sha384 or digest 0 - An invalid pointer was not passed to the function ",
							" Remarks In order to preserve the validity of the SHA384 hash nothing must modify the context holding variable between calls to CRYPT_SHA384_DataAdd and CRYPT_SHA384_Finalize ",
							" Example CRYPT_SHA384_CTX sha384; uint8_t buffer[1024]; uint8_t shaSum[SHA384_DIGEST_SIZE]; CRYPT_SHA384_Initialize( sha384); CRYPT_SHA384_DataAdd( sha384 buffer sizeof(buffer)); CRYPT_SHA384_Finalize( sha384 shaSum); ",
							" CRYPT_SHA384_Initialize Function ",
							" C int CRYPT_SHA384_Initialize( CRYPT_SHA384_CTX* sha384 ); ",
							" Description This function initializes the internal structures necessary for SHA384 hash calculations ",
							" Preconditions None ",
							" Parameters Parameters Description sha384 Pointer to CRYPT_SHA384_CTX structure which holds the hash values ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function 0 - An invalid pointer was not passed to the function ",
							" Remarks All SHA384 hashes have to start at a particular value before adding new data to it This function sets the necessary values for the structure ",
							" Example CRYPT_SHA384_CTX sha384; uint8_t shaSum[SHA384_DIGEST_SIZE]; CRYPT_SHA384_Initialize( sha384); CRYPT_SHA384_DataAdd( sha384 buffer sizeof(buffer)); CRYPT_SHA384_Finalize( sha384 shaSum); ",
							" CRYPT_SHA512_CTX Structure ",
							" C struct CRYPT_SHA512_CTX { long long holder[36]; }CRYPT_SHA512_CTX; ",
							" Members Members Description long long holder This structure should be large enough to hold the internal representation the size is checked during initialization ",
							" CRYPT_SHA512_DataAdd Function ",
							" C int CRYPT_SHA512_DataAdd( CRYPT_SHA512_CTX* sha512 const unsigned char* input unsigned int sz ); ",
							" Description This function updates the hash with the data provided ",
							" Preconditions The SHA512 context must be initialized prior to the first call of this function The context must not be modified by code outside of this function ",
							" Parameters Parameters Description sha512 Pointer to CRYPT_SHA512_CTX structure which holds the hash values input Pointer to the data to use to update the hash sz Size of the data (in bytes) to use to update the hash ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function either in sha512 or input 0 - An invalid pointer was not passed to the function ",
							" Remarks In order to preserve the validity of the SHA512 hash nothing must modify the context holding variable between calls to CRYPT_SHA512_DataAdd ",
							" Example CRYPT_SHA512_CTX sha512; uint8_t buffer[1024]; uint8_t sha512Sum[SHA512_DIGEST_SIZE]; CRYPT_SHA512_Initialize( sha512); CRYPT_SHA512_DataAdd( sha512 buffer sizeof(buffer)); CRYPT_SHA512_Finalize( sha512 sha512Sum); ",
							" CRYPT_SHA512_Finalize Function ",
							" C int CRYPT_SHA512_Finalize( CRYPT_SHA512_CTX* sha512 unsigned char* digest ); ",
							" Description This function finalizes the hash and puts the result into digest ",
							" Preconditions The SHA512 context must be initialized prior to calling this function The context must not be modified by code outisde of this function ",
							" Parameters Parameters Description sha512 Pointer to CRYPT_SHA512_CTX structure which holds the hash values digest Pointer to byte array to store hash result ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function either in sha512 or digest 0 - An invalid pointer was not passed to the function ",
							" Remarks In order to preserve the validity of the SHA512 hash nothing must modify the context holding variable between calls to CRYPT_SHA512_DataAdd and CRYPT_SHA512_Finalize ",
							" Example CRYPT_SHA512_CTX sha512; uint8_t buffer[1024]; uint8_t sha512Sum[SHA512_DIGEST_SIZE]; CRYPT_SHA512_Initialize( sha512); CRYPT_SHA512_DataAdd( sha512 buffer sizeof(buffer)); CRYPT_SHA512_Finalize( sha512 sha512Sum); ",
							" CRYPT_SHA512_Initialize Function ",
							" C int CRYPT_SHA512_Initialize( CRYPT_SHA512_CTX* sha512 ); ",
							" Description This function initializes the internal structures necessary for SHA512 hash calculations ",
							" Preconditions None ",
							" Parameters Parameters Description sha512 Pointer to CRYPT_SHA512_CTX structure which holds the hash values ",
							" Returns BAD_FUNC_ARG - An invalid pointer was passed to the function 0 - An invalid pointer was not passed to the function ",
							" Remarks All SHA512 hashes have to start at a particular value before adding new data to it This function sets the necessary values for the structure ",
							" Example CRYPT_SHA512_CTX sha512; uint8_t sha512Sum[SHA512_DIGEST_SIZE]; CRYPT_SHA512_Initialize( sha512); CRYPT_SHA512_DataAdd( sha512 buffer sizeof(buffer)); CRYPT_SHA512_Finalize( sha512 sha512Sum); "];

